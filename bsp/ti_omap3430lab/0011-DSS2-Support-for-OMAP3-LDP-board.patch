From 23cacf1ba57fa1ab6c5f835474e7094deae1f8b4 Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 7 May 2009 00:26:16 +0800
Subject: [PATCH] DSS2: Support for OMAP3 LDP board

The OMAP3 LDP platform specific data and init procedure of display.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-omap2/board-ldp.c |  256 +++++++++++++++++++++++++++++++++++++--
 1 files changed, 247 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-omap2/board-ldp.c b/arch/arm/mach-omap2/board-ldp.c
index 0313071..74e81b5 100644
--- a/arch/arm/mach-omap2/board-ldp.c
+++ b/arch/arm/mach-omap2/board-ldp.c
@@ -38,6 +38,7 @@
 #include <mach/gpmc.h>
 #include <mach/hsmmc.h>
 #include <mach/usb-musb.h>
+#include <mach/display.h>
 
 #include <asm/io.h>
 #include <asm/delay.h>
@@ -305,14 +306,256 @@ static struct spi_board_info ldp_spi_board_info[] __initdata = {
 	},
 };
 
-static struct platform_device ldp_lcd_device = {
-	.name		= "ldp_lcd",
-	.id		= -1,
+#define LCD_PANEL_BACKLIGHT_GPIO        (15 + OMAP_MAX_GPIO_LINES)
+#define LCD_PANEL_ENABLE_GPIO           (7 + OMAP_MAX_GPIO_LINES)
+#define LCD_PANEL_RESET_GPIO            55
+#define LCD_PANEL_QVGA_GPIO             56
+
+
+#define PM_RECEIVER             TWL4030_MODULE_PM_RECEIVER
+#define ENABLE_VAUX2_DEDICATED  0x09
+#define ENABLE_VAUX2_DEV_GRP    0x20
+#define ENABLE_VAUX3_DEDICATED	0x03
+#define ENABLE_VAUX3_DEV_GRP	0x20
+
+#define ENABLE_VPLL2_DEDICATED	0x05
+#define ENABLE_VPLL2_DEV_GRP	0xE0
+#define TWL4030_VPLL2_DEV_GRP	0x33
+#define TWL4030_VPLL2_DEDICATED	0x36
+
+#define t2_out(c, r, v) twl4030_i2c_write_u8(c, r, v)
+
+static unsigned backlight_gpio;
+static unsigned enable_gpio;
+static unsigned reset_gpio;
+static int lcd_enabled;
+static int dvi_enabled;
+
+static void enable_vpll2(int enable)
+{
+	u8 ded_val, grp_val;
+
+	if (enable) {
+		ded_val = ENABLE_VPLL2_DEDICATED;
+		grp_val = ENABLE_VPLL2_DEV_GRP;
+	} else {
+		ded_val = 0;
+		grp_val = 0;
+	}
+
+	twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
+			ded_val, TWL4030_VPLL2_DEDICATED);
+	twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
+			grp_val, TWL4030_VPLL2_DEV_GRP);
+}
+
+static int ldp_dsi_power_up(void)
+{
+	if (system_rev > OMAP3430_REV_ES1_0)
+		enable_vpll2(1);
+	return 0;
+}
+
+static void ldp_dsi_power_down(void)
+{
+	if (system_rev > OMAP3430_REV_ES1_0)
+		enable_vpll2(0);
+}
+
+static void __init ldp_display_init(void)
+{
+	int r;
+
+	reset_gpio    = LCD_PANEL_RESET_GPIO;
+	enable_gpio    = LCD_PANEL_ENABLE_GPIO;
+	backlight_gpio = LCD_PANEL_BACKLIGHT_GPIO;
+
+	r = gpio_request(reset_gpio, "LCD reset");
+	if (r) {
+		printk(KERN_ERR "failed to get LCD reset GPIO, (r=%d)\n", r);
+		goto err0;
+	}
+
+	r = gpio_request(LCD_PANEL_QVGA_GPIO, "VGA/QVGA switch");
+	if (r) {
+		printk(KERN_ERR "failed to get VGA/QVGA switch GPIO, (r=%d)\n", r);
+		goto err1;
+	}
+
+	r = gpio_request(enable_gpio, "LCD PANEL");
+	if (r) {
+		printk(KERN_ERR "failed to get LCD reset GPIO, r=%d\n", r);
+		goto err2;
+	}
+
+	r = gpio_request(backlight_gpio, "LCD Backlight");
+	if (r) {
+		printk(KERN_ERR "failed to get LCD backlight GPIO, r=%d\n", r);
+		goto err3;
+	}
+
+	gpio_direction_output(enable_gpio, 0);
+	gpio_direction_output(backlight_gpio, 0);
+
+	gpio_direction_output(LCD_PANEL_QVGA_GPIO, 0);
+	gpio_direction_output(LCD_PANEL_RESET_GPIO, 1);
+
+
+	return;
+err3:
+	gpio_free(enable_gpio);
+err2:
+	gpio_free(LCD_PANEL_QVGA_GPIO);
+err1:
+	gpio_free(reset_gpio);
+err0:
+	return;
+}
+
+
+static int ldp_panel_enable_lcd(struct omap_display *display)
+{
+	u8 ded_val, ded_reg;
+	u8 grp_val, grp_reg;
+
+	ldp_display_init();
+
+	if (dvi_enabled) {
+		printk(KERN_ERR "cannot enable LCD, DVI is enabled\n");
+		return -EINVAL;
+	}
+
+	ded_reg = TWL4030_VAUX3_DEDICATED;
+	ded_val = ENABLE_VAUX3_DEDICATED;
+	grp_reg = TWL4030_VAUX3_DEV_GRP;
+	grp_val = ENABLE_VAUX3_DEV_GRP;
+
+	gpio_direction_output(enable_gpio, 1);
+	gpio_direction_output(backlight_gpio, 1);
+
+	if (0 != t2_out(PM_RECEIVER, ded_val, ded_reg))
+		return -EIO;
+	if (0 != t2_out(PM_RECEIVER, grp_val, grp_reg))
+		return -EIO;
+
+	ldp_dsi_power_up();
+	lcd_enabled = 1;
+
+	return 0;
+}
+
+static void ldp_panel_disable_lcd(struct omap_display *display)
+{
+	lcd_enabled = 0;
+
+	ldp_dsi_power_down();
+
+	gpio_direction_output(enable_gpio, 0);
+	gpio_direction_output(backlight_gpio, 0);
+
+	if (system_rev > OMAP3430_REV_ES1_0) {
+		t2_out(PM_RECEIVER, 0x0, TWL4030_VPLL2_DEDICATED);
+		t2_out(PM_RECEIVER, 0x0, TWL4030_VPLL2_DEV_GRP);
+		mdelay(4);
+	}
+}
+
+static struct omap_display_data ldp_display_data = {
+	.type = OMAP_DISPLAY_TYPE_DPI,
+	.name = "lcd",
+	.panel_name = "sharp-ls037v7dw01",
+	.u.dpi.data_lines = 18,
+	.panel_enable = ldp_panel_enable_lcd,
+	.panel_disable = ldp_panel_disable_lcd,
+};
+
+static int ldp_panel_enable_dvi(struct omap_display *display)
+{
+	if (lcd_enabled) {
+		printk(KERN_ERR "cannot enable DVI, LCD is enabled\n");
+		return -EINVAL;
+	}
+	ldp_dsi_power_up();
+
+	dvi_enabled = 1;
+
+	return 0;
+}
+
+static void ldp_panel_disable_dvi(struct omap_display *display)
+{
+	ldp_dsi_power_down();
+	dvi_enabled = 0;
+
+	if (system_rev > OMAP3430_REV_ES1_0) {
+		t2_out(PM_RECEIVER, 0x0, TWL4030_VPLL2_DEDICATED);
+		t2_out(PM_RECEIVER, 0x0, TWL4030_VPLL2_DEV_GRP);
+		mdelay(4);
+	}
+}
+
+
+static struct omap_display_data ldp_display_data_dvi = {
+	.type = OMAP_DISPLAY_TYPE_DPI,
+	.name = "dvi",
+	.panel_name = "panel-generic",
+	.u.dpi.data_lines = 24,
+	.panel_enable = ldp_panel_enable_dvi,
+	.panel_disable = ldp_panel_disable_dvi,
+};
+
+static int ldp_panel_enable_tv(struct omap_display *display)
+{
+#define ENABLE_VDAC_DEDICATED           0x03
+#define ENABLE_VDAC_DEV_GRP             0x20
+
+	twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
+			ENABLE_VDAC_DEDICATED,
+			TWL4030_VDAC_DEDICATED);
+	twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
+			ENABLE_VDAC_DEV_GRP, TWL4030_VDAC_DEV_GRP);
+
+	return 0;
+}
+
+static void ldp_panel_disable_tv(struct omap_display *display)
+{
+	twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER, 0x00,
+			TWL4030_VDAC_DEDICATED);
+	twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER, 0x00,
+			TWL4030_VDAC_DEV_GRP);
+}
+
+static struct omap_display_data ldp_display_data_tv = {
+	.type = OMAP_DISPLAY_TYPE_VENC,
+	.name = "tv",
+	.u.venc.type = OMAP_DSS_VENC_TYPE_SVIDEO,
+	.panel_enable = ldp_panel_enable_tv,
+	.panel_disable = ldp_panel_disable_tv,
+};
+
+static struct omap_dss_platform_data ldp_dss_data = {
+	.dsi_power_up = ldp_dsi_power_up,
+	.dsi_power_down = ldp_dsi_power_down,
+	.num_displays = 3,
+	.displays = {
+		&ldp_display_data,
+		&ldp_display_data_dvi,
+		&ldp_display_data_tv,
+	}
+};
+
+static struct platform_device ldp_dss_device = {
+	.name          = "omapdss",
+	.id            = -1,
+	.dev            = {
+		.platform_data = &ldp_dss_data,
+	},
 };
 
 static struct platform_device *ldp_devices[] __initdata = {
 	&ldp_smc911x_device,
-	&ldp_lcd_device,
+	&ldp_dss_device,
 	&ldp_gpio_keys_device,
 };
 
@@ -357,13 +600,8 @@ static struct omap_uart_config ldp_uart_config __initdata = {
 	.enabled_uarts	= ((1 << 0) | (1 << 1) | (1 << 2)),
 };
 
-static struct omap_lcd_config ldp_lcd_config __initdata = {
-	.ctrl_name	= "internal",
-};
-
 static struct omap_board_config_kernel ldp_config[] __initdata = {
 	{ OMAP_TAG_UART,	&ldp_uart_config },
-	{ OMAP_TAG_LCD,		&ldp_lcd_config },
 };
 
 static int ldp_batt_table[] = {
-- 
1.6.0.4

