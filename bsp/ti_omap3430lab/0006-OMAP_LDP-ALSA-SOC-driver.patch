From a1f78ca93cf90abb5811beed19a7c0cc5bb8ac83 Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Sat, 20 Dec 2008 00:26:44 +0800
Subject: [PATCH] OMAP_LDP ALSA SOC driver

Add omap_ldp alsa soc machine driver.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 sound/soc/omap/Kconfig    |    8 +++
 sound/soc/omap/Makefile   |    2 +
 sound/soc/omap/omap-ldp.c |  149 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 159 insertions(+), 0 deletions(-)
 create mode 100644 sound/soc/omap/omap-ldp.c

diff --git a/sound/soc/omap/Kconfig b/sound/soc/omap/Kconfig
index ebad024..024b49b 100644
--- a/sound/soc/omap/Kconfig
+++ b/sound/soc/omap/Kconfig
@@ -30,3 +30,11 @@ config SND_OMAP_SOC_OMAP3_BEAGLE
 	help
 	  Say Y if you want to add support for SoC audio on the Beagleboard.
 
+config SND_OMAP_SOC_OMAP_LDP
+	tristate "SoC Audio support for OMAP LDP"
+	depends on SND_OMAP_SOC && MACH_OMAP_LDP
+	select SND_OMAP_SOC_MCBSP
+	select SND_SOC_TWL4030
+	help
+	  Say Y if you want to add support for SoC audio on the OMAP LDP.
+
diff --git a/sound/soc/omap/Makefile b/sound/soc/omap/Makefile
index 09fd0bb..10cb481 100644
--- a/sound/soc/omap/Makefile
+++ b/sound/soc/omap/Makefile
@@ -9,8 +9,10 @@ obj-$(CONFIG_SND_OMAP_SOC_MCBSP) += snd-soc-omap-mcbsp.o
 snd-soc-n810-objs := n810.o
 snd-soc-overo-objs := overo.o
 snd-soc-omap3beagle-objs := omap3beagle.o
+snd-soc-omap-ldp-objs := omap-ldp.o
 
 obj-$(CONFIG_SND_OMAP_SOC_N810) += snd-soc-n810.o
 obj-$(CONFIG_SND_OMAP_SOC_OVERO) += snd-soc-overo.o
 obj-$(CONFIG_SND_OMAP_SOC_OMAP3_BEAGLE) += snd-soc-omap3beagle.o
+obj-$(CONFIG_SND_OMAP_SOC_OMAP_LDP) += snd-soc-omap-ldp.o
 
diff --git a/sound/soc/omap/omap-ldp.c b/sound/soc/omap/omap-ldp.c
new file mode 100644
index 0000000..ec389f2
--- /dev/null
+++ b/sound/soc/omap/omap-ldp.c
@@ -0,0 +1,149 @@
+/*
+ * omap_ldp.c  --  SoC audio for OMAP LDP
+ *
+ * Copyright (c) 2008 Wind River Systems, Inc.
+ * Author: Stanley Miao <stanley.miao@windriver.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+
+#include <asm/mach-types.h>
+#include <mach/hardware.h>
+#include <mach/gpio.h>
+#include <mach/mcbsp.h>
+
+#include "omap-mcbsp.h"
+#include "omap-pcm.h"
+#include "../codecs/twl4030.h"
+
+static int omap_ldp_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = rtd->dai->codec_dai;
+	struct snd_soc_dai *cpu_dai = rtd->dai->cpu_dai;
+	int ret;
+
+	/* Set codec DAI configuration */
+	ret = snd_soc_dai_set_fmt(codec_dai,
+				  SND_SOC_DAIFMT_I2S |
+				  SND_SOC_DAIFMT_NB_NF |
+				  SND_SOC_DAIFMT_CBM_CFM);
+	if (ret < 0) {
+		printk(KERN_ERR "can't set codec DAI configuration\n");
+		return ret;
+	}
+
+	/* Set cpu DAI configuration */
+	ret = snd_soc_dai_set_fmt(cpu_dai,
+				  SND_SOC_DAIFMT_I2S |
+				  SND_SOC_DAIFMT_NB_NF |
+				  SND_SOC_DAIFMT_CBM_CFM);
+	if (ret < 0) {
+		printk(KERN_ERR "can't set cpu DAI configuration\n");
+		return ret;
+	}
+
+	/* Set the codec system clock for DAC and ADC */
+	ret = snd_soc_dai_set_sysclk(codec_dai, 0, 26000000,
+					    SND_SOC_CLOCK_IN);
+	if (ret < 0) {
+		printk(KERN_ERR "can't set codec system clock\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static struct snd_soc_ops omap_ldp_ops = {
+	.hw_params = omap_ldp_hw_params,
+};
+
+/* Digital audio interface glue - connects codec <--> CPU */
+static struct snd_soc_dai_link omap_ldp_dai = {
+	.name = "TWL4030",
+	.stream_name = "TWL4030",
+	.cpu_dai = &omap_mcbsp_dai[0],
+	.codec_dai = &twl4030_dai,
+	.ops = &omap_ldp_ops,
+};
+
+/* Audio machine driver */
+static struct snd_soc_card snd_soc_machine_omap_ldp = {
+	.name = "omap_ldp",
+	.dai_link = &omap_ldp_dai,
+	.num_links = 1,
+};
+
+/* Audio subsystem */
+static struct snd_soc_device omap_ldp_snd_devdata = {
+	.card = &snd_soc_machine_omap_ldp,
+	.platform = &omap_soc_platform,
+	.codec_dev = &soc_codec_dev_twl4030,
+};
+
+static struct platform_device *omap_ldp_snd_device;
+
+static int __init omap_ldp_soc_init(void)
+{
+	int ret;
+
+	if (!machine_is_omap_ldp()) {
+		pr_debug("Not OMAP LDP!\n");
+		return -ENODEV;
+	}
+	printk(KERN_INFO "omap_ldp SoC init\n");
+
+	omap_ldp_snd_device = platform_device_alloc("soc-audio", -1);
+	if (!omap_ldp_snd_device) {
+		printk(KERN_ERR "Platform device allocation failed\n");
+		return -ENOMEM;
+	}
+
+	platform_set_drvdata(omap_ldp_snd_device, &omap_ldp_snd_devdata);
+	omap_ldp_snd_devdata.dev = &omap_ldp_snd_device->dev;
+	*(unsigned int *)omap_ldp_dai.cpu_dai->private_data = 1; /* McBSP2 */
+
+	ret = platform_device_add(omap_ldp_snd_device);
+	if (ret)
+		goto err1;
+
+	return 0;
+
+err1:
+	printk(KERN_ERR "Unable to add platform device\n");
+	platform_device_put(omap_ldp_snd_device);
+
+	return ret;
+}
+module_init(omap_ldp_soc_init);
+
+static void __exit omap_ldp_soc_exit(void)
+{
+	platform_device_unregister(omap_ldp_snd_device);
+}
+module_exit(omap_ldp_soc_exit);
+
+MODULE_AUTHOR("Stanley Miao <stanley.miao@windriver.com>");
+MODULE_DESCRIPTION("ALSA SoC omap_ldp");
+MODULE_LICENSE("GPL");
-- 
1.6.0.3

