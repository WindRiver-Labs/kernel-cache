From c2143c25f91ce136863cfbe4609b7ab3a9ce5390 Mon Sep 17 00:00:00 2001
From: Sandeep Malik <Sandeep.Malik@freescale.com>
Date: Tue, 2 Feb 2010 13:10:07 +0530
Subject: [PATCH 03/12] powerpc/85xx: talitos: Allows channel remapping through the secondary interrupt.

Extracted from the P1020RDB_20100507-ltib.iso vendor drop.

This patch allows the user to enable the secondary interrupt in talitos using
which the channels associated with the interrupt gets remapped to the alternate
4K memory region.

Signed-off-by: Sandeep Malik <Sandeep.Malik@freescale.com>
Integrated-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 drivers/crypto/talitos.c |  520 ++++++++++++++++++++++++++++------------------
 drivers/crypto/talitos.h |   53 +++---
 2 files changed, 342 insertions(+), 231 deletions(-)

diff --git a/drivers/crypto/talitos.c b/drivers/crypto/talitos.c
index dc558a0..273cc07 100644
--- a/drivers/crypto/talitos.c
+++ b/drivers/crypto/talitos.c
@@ -1,7 +1,7 @@
 /*
  * talitos - Freescale Integrated Security Engine (SEC) device driver
  *
- * Copyright (c) 2008 Freescale Semiconductor, Inc.
+ * Copyright 2008-2010 Freescale Semiconductor, Inc.
  *
  * Scatterlist Crypto API glue code copied from files with the following:
  * Copyright (c) 2006-2007 Herbert Xu <herbert@gondor.apana.org.au>
@@ -52,11 +52,17 @@
 
 #define TALITOS_TIMEOUT 100000
 #define TALITOS_MAX_DATA_LEN 65535
+#define MAX_CHAN	4
+#define MAX_GROUPS	2
 
 #define DESC_TYPE(desc_hdr) ((be32_to_cpu(desc_hdr) >> 3) & 0x1f)
 #define PRIMARY_EU(desc_hdr) ((be32_to_cpu(desc_hdr) >> 28) & 0xf)
 #define SECONDARY_EU(desc_hdr) ((be32_to_cpu(desc_hdr) >> 16) & 0xf)
 
+#define MAP_ARRAY(chan_no)	(3 << (chan_no * 2))
+#define MAP_ARRAY_DONE(chan_no)	(1 << (chan_no * 2))
+
+
 /* descriptor pointer entry */
 struct talitos_ptr {
 	__be16 len;	/* length */
@@ -91,32 +97,30 @@ struct talitos_request {
 struct talitos_channel {
 	/* request fifo */
 	struct talitos_request *fifo;
-
 	/* number of requests pending in channel h/w fifo */
-	atomic_t submit_count ____cacheline_aligned;
-
-	/* request submission (head) lock */
-	spinlock_t head_lock ____cacheline_aligned;
+	int submit_count;
 	/* index to next free descriptor request */
-	int head;
-
-	/* request release (tail) lock */
-	spinlock_t tail_lock ____cacheline_aligned;
+	u8 head;
 	/* index to next in-progress/done descriptor request */
-	int tail;
+	u8 tail;
+	/* Channel id */
+	u8 id;
+	struct talitos_private *priv;
 };
 
 struct talitos_private {
 	struct device *dev;
 	struct of_device *ofdev;
 	void __iomem *reg;
-	int irq;
+	int irq_0;
+	int irq_1;
 
 	/* SEC version geometry (from device tree node) */
 	unsigned int num_channels;
 	unsigned int chfifo_len;
 	unsigned int exec_units;
 	unsigned int desc_types;
+	unsigned int chan_remap;
 
 	/* SEC Compatibility info */
 	unsigned long features;
@@ -130,11 +134,18 @@ struct talitos_private {
 
 	struct talitos_channel *chan;
 
-	/* next channel to be assigned next incoming descriptor */
-	atomic_t last_chan ____cacheline_aligned;
+	/* next channel to be assigned next incoming
+		descriptor */
+	u8 last_chan[MAX_GROUPS];
+	u32 chan_isr[MAX_GROUPS];
+	u32 chan_imr[MAX_GROUPS];
+	/* number of channels mapped to a core */
+	u8 core_num_chan[MAX_GROUPS];
+	/* channels numbers of channels mapped to a core */
+	u8 core_chan_no[MAX_GROUPS][MAX_CHAN] ____cacheline_aligned;
 
 	/* request callback tasklet */
-	struct tasklet_struct done_task;
+	struct tasklet_struct *done_task;
 
 	/* list of registered algorithms */
 	struct list_head alg_list;
@@ -143,10 +154,39 @@ struct talitos_private {
 	struct hwrng rng;
 };
 
+/*
+ * talitos_edesc - s/w-extended descriptor
+ * @src_nents: number of segments in input scatterlist
+ * @dst_nents: number of segments in output scatterlist
+ * @dma_len: length of dma mapped link_tbl space
+ * @dma_link_tbl: bus physical address of link_tbl
+ * @desc: h/w descriptor
+ * @link_tbl: input and output h/w link tables (if {src,dst}_nents > 1)
+ *
+ * if decrypting (with authcheck), or either one of src_nents or dst_nents
+ * is greater than 1, an integrity check value is concatenated to the end
+ * of link_tbl data
+ */
+struct talitos_edesc {
+	int src_nents;
+	int dst_nents;
+	int src_is_chained;
+	int dst_is_chained;
+	int dma_len;
+	dma_addr_t dma_link_tbl;
+	struct talitos_desc desc;
+	struct talitos_ptr link_tbl[0];
+};
+
 /* .features flag */
 #define TALITOS_FTR_SRC_LINK_TBL_LEN_INCLUDES_EXTENT 0x00000001
 #define TALITOS_FTR_HW_AUTH_CHECK 0x00000002
 
+static inline unsigned int get_chan_remap(struct talitos_private *priv)
+{
+	return priv->chan_remap;
+}
+
 static void to_talitos_ptr(struct talitos_ptr *talitos_ptr, dma_addr_t dma_addr)
 {
 	talitos_ptr->ptr = cpu_to_be32(lower_32_bits(dma_addr));
@@ -185,10 +225,10 @@ static int reset_channel(struct device *dev, int ch)
 	struct talitos_private *priv = dev_get_drvdata(dev);
 	unsigned int timeout = TALITOS_TIMEOUT;
 
-	setbits32(priv->reg + TALITOS_CCCR(ch), TALITOS_CCCR_RESET);
+	setbits32(priv->reg + TALITOS_CCCR(ch, priv), TALITOS_CCCR_RESET);
 
-	while ((in_be32(priv->reg + TALITOS_CCCR(ch)) & TALITOS_CCCR_RESET)
-	       && --timeout)
+	while ((in_be32(priv->reg + TALITOS_CCCR(ch, priv))
+		& TALITOS_CCCR_RESET) && --timeout)
 		cpu_relax();
 
 	if (timeout == 0) {
@@ -197,12 +237,12 @@ static int reset_channel(struct device *dev, int ch)
 	}
 
 	/* set 36-bit addressing, done writeback enable and done IRQ enable */
-	setbits32(priv->reg + TALITOS_CCCR_LO(ch), TALITOS_CCCR_LO_EAE |
+	setbits32(priv->reg + TALITOS_CCCR_LO(ch, priv), TALITOS_CCCR_LO_EAE |
 		  TALITOS_CCCR_LO_CDWE | TALITOS_CCCR_LO_CDIE);
 
 	/* and ICCR writeback, if available */
 	if (priv->features & TALITOS_FTR_HW_AUTH_CHECK)
-		setbits32(priv->reg + TALITOS_CCCR_LO(ch),
+		setbits32(priv->reg + TALITOS_CCCR_LO(ch, priv),
 		          TALITOS_CCCR_LO_IWSE);
 
 	return 0;
@@ -249,6 +289,12 @@ static int init_device(struct device *dev)
 	if (err)
 		return err;
 
+	if (priv->chan_remap)
+		/* Remap channels */
+		setbits32(priv->reg + TALITOS_MCR,
+			(in_be32(priv->reg + TALITOS_MCR)
+			| (priv->chan_remap << 12)));
+
 	/* reset channels */
 	for (ch = 0; ch < priv->num_channels; ch++) {
 		err = reset_channel(dev, ch);
@@ -287,65 +333,69 @@ static int talitos_submit(struct device *dev, struct talitos_desc *desc,
 {
 	struct talitos_private *priv = dev_get_drvdata(dev);
 	struct talitos_request *request;
-	unsigned long flags, ch;
-	int head;
+	u8 ch;
+	u8 smp_processor_id = smp_processor_id();
+	u8 head, last_chan, total_chan;
+	if (priv->core_num_chan[smp_processor_id] > 0) {
+		total_chan = priv->core_num_chan[smp_processor_id];
+		last_chan = priv->last_chan[smp_processor_id];
+		/* select done notification */
+		desc->hdr |= DESC_HDR_DONE_NOTIFY;
+
+		if (last_chan <  total_chan) {
+			ch = priv->core_chan_no[smp_processor_id][last_chan];
+			priv->last_chan[smp_processor_id]++;
+		} else {
+			ch = priv->core_chan_no[smp_processor_id][0];
+			priv->last_chan[smp_processor_id] = 1;
+		}
+		if (priv->chan[ch].submit_count != 0)
+			++priv->chan[ch].submit_count;
+		else
+			/* h/w fifo is full */
+			return -EAGAIN;
 
-	/* select done notification */
-	desc->hdr |= DESC_HDR_DONE_NOTIFY;
+		head = priv->chan[ch].head;
+		request = &priv->chan[ch].fifo[head];
 
-	/* emulate SEC's round-robin channel fifo polling scheme */
-	ch = atomic_inc_return(&priv->last_chan) & (priv->num_channels - 1);
+		/* map descriptor and save caller data */
+		request->dma_desc = dma_map_single(dev, desc, sizeof(*desc),
+					   DMA_BIDIRECTIONAL);
+		request->callback = callback;
+		request->context = context;
 
-	spin_lock_irqsave(&priv->chan[ch].head_lock, flags);
+		/* increment fifo head */
+		priv->chan[ch].head = (priv->chan[ch].head + 1) &
+					(priv->fifo_len - 1);
 
-	if (!atomic_inc_not_zero(&priv->chan[ch].submit_count)) {
-		/* h/w fifo is full */
-		spin_unlock_irqrestore(&priv->chan[ch].head_lock, flags);
+		smp_wmb();
+		request->desc = desc;
+
+		/* GO! */
+		wmb();
+		out_be32(priv->reg + TALITOS_FF(ch, priv),
+			cpu_to_be32(upper_32_bits(request->dma_desc)));
+		out_be32(priv->reg + TALITOS_FF_LO(ch, priv),
+			cpu_to_be32(lower_32_bits(request->dma_desc)));
+		return -EINPROGRESS;
+	} else {
 		return -EAGAIN;
 	}
-
-	head = priv->chan[ch].head;
-	request = &priv->chan[ch].fifo[head];
-
-	/* map descriptor and save caller data */
-	request->dma_desc = dma_map_single(dev, desc, sizeof(*desc),
-					   DMA_BIDIRECTIONAL);
-	request->callback = callback;
-	request->context = context;
-
-	/* increment fifo head */
-	priv->chan[ch].head = (priv->chan[ch].head + 1) & (priv->fifo_len - 1);
-
-	smp_wmb();
-	request->desc = desc;
-
-	/* GO! */
-	wmb();
-	out_be32(priv->reg + TALITOS_FF(ch),
-		 cpu_to_be32(upper_32_bits(request->dma_desc)));
-	out_be32(priv->reg + TALITOS_FF_LO(ch),
-		 cpu_to_be32(lower_32_bits(request->dma_desc)));
-
-	spin_unlock_irqrestore(&priv->chan[ch].head_lock, flags);
-
-	return -EINPROGRESS;
 }
 
 /*
  * process what was done, notify callback of error if not
  */
-static void flush_channel(struct device *dev, int ch, int error, int reset_ch)
+static void flush_channel(struct talitos_channel *chan, int error, int reset_ch)
 {
-	struct talitos_private *priv = dev_get_drvdata(dev);
+	struct talitos_private *priv = chan->priv;
+	struct device *dev = &priv->ofdev->dev;
 	struct talitos_request *request, saved_req;
-	unsigned long flags;
 	int tail, status;
 
-	spin_lock_irqsave(&priv->chan[ch].tail_lock, flags);
-
-	tail = priv->chan[ch].tail;
-	while (priv->chan[ch].fifo[tail].desc) {
-		request = &priv->chan[ch].fifo[tail];
+	tail = chan->tail;
+	while (chan->fifo[tail].desc) {
+		request = &chan->fifo[tail];
 
 		/* descriptors with their done bits set don't get the error */
 		rmb();
@@ -371,22 +421,16 @@ static void flush_channel(struct device *dev, int ch, int error, int reset_ch)
 		request->desc = NULL;
 
 		/* increment fifo tail */
-		priv->chan[ch].tail = (tail + 1) & (priv->fifo_len - 1);
-
-		spin_unlock_irqrestore(&priv->chan[ch].tail_lock, flags);
-
-		atomic_dec(&priv->chan[ch].submit_count);
-
+		chan->tail  = (tail + 1) & (priv->fifo_len - 1);
+		chan->submit_count -= 1;
 		saved_req.callback(dev, saved_req.desc, saved_req.context,
 				   status);
 		/* channel may resume processing in single desc error case */
 		if (error && !reset_ch && status == error)
 			return;
-		spin_lock_irqsave(&priv->chan[ch].tail_lock, flags);
-		tail = priv->chan[ch].tail;
+		tail = chan->tail;
 	}
 
-	spin_unlock_irqrestore(&priv->chan[ch].tail_lock, flags);
 }
 
 /*
@@ -394,13 +438,15 @@ static void flush_channel(struct device *dev, int ch, int error, int reset_ch)
  */
 static void talitos_done(unsigned long data)
 {
+	u8 smp_processor_id = smp_processor_id();
 	struct device *dev = (struct device *)data;
 	struct talitos_private *priv = dev_get_drvdata(dev);
-	int ch;
-
-	for (ch = 0; ch < priv->num_channels; ch++)
-		flush_channel(dev, ch, 0, 0);
+	u8 ch;
 
+	if (priv->core_num_chan[smp_processor_id] > 0)
+		for (ch = 0; ch < priv->core_num_chan[smp_processor_id]; ch++)
+			flush_channel(priv->chan +
+				priv->core_chan_no[smp_processor_id][ch], 0, 0);
 	/* At this point, all completed channels have been processed.
 	 * Unmask done interrupts for channels completed later on.
 	 */
@@ -417,7 +463,7 @@ static struct talitos_desc *current_desc(struct device *dev, int ch)
 	int tail = priv->chan[ch].tail;
 	dma_addr_t cur_desc;
 
-	cur_desc = in_be32(priv->reg + TALITOS_CDPR_LO(ch));
+	cur_desc = in_be32(priv->reg + TALITOS_CDPR_LO(ch, priv));
 
 	while (priv->chan[ch].fifo[tail].dma_desc != cur_desc) {
 		tail = (tail + 1) & (priv->fifo_len - 1);
@@ -499,115 +545,139 @@ static void report_eu_error(struct device *dev, int ch,
 
 	for (i = 0; i < 8; i++)
 		dev_err(dev, "DESCBUF 0x%08x_%08x\n",
-			in_be32(priv->reg + TALITOS_DESCBUF(ch) + 8*i),
-			in_be32(priv->reg + TALITOS_DESCBUF_LO(ch) + 8*i));
+		in_be32(priv->reg + TALITOS_DESCBUF(ch, priv) + 8*i),
+		in_be32(priv->reg + TALITOS_DESCBUF_LO(ch, priv) + 8*i));
 }
 
-/*
- * recover from error interrupts
- */
-static void talitos_error(unsigned long data, u32 isr, u32 isr_lo)
+static void handle_error(struct talitos_channel *chan, u32 isr, u32 isr_lo)
 {
-	struct device *dev = (struct device *)data;
-	struct talitos_private *priv = dev_get_drvdata(dev);
+	struct talitos_private *priv = chan->priv;
+	struct device *dev = &priv->ofdev->dev;
 	unsigned int timeout = TALITOS_TIMEOUT;
-	int ch, error, reset_dev = 0, reset_ch = 0;
+	int error, reset_dev = 0, reset_ch = 0;
 	u32 v, v_lo;
 
-	for (ch = 0; ch < priv->num_channels; ch++) {
-		/* skip channels without errors */
-		if (!(isr & (1 << (ch * 2 + 1))))
-			continue;
-
-		error = -EINVAL;
+	error = -EINVAL;
 
-		v = in_be32(priv->reg + TALITOS_CCPSR(ch));
-		v_lo = in_be32(priv->reg + TALITOS_CCPSR_LO(ch));
+	v = in_be32(priv->reg + TALITOS_CCPSR(chan->id, priv));
+	v_lo = in_be32(priv->reg + TALITOS_CCPSR_LO(chan->id, priv));
 
-		if (v_lo & TALITOS_CCPSR_LO_DOF) {
-			dev_err(dev, "double fetch fifo overflow error\n");
-			error = -EAGAIN;
-			reset_ch = 1;
-		}
-		if (v_lo & TALITOS_CCPSR_LO_SOF) {
-			/* h/w dropped descriptor */
-			dev_err(dev, "single fetch fifo overflow error\n");
-			error = -EAGAIN;
-		}
-		if (v_lo & TALITOS_CCPSR_LO_MDTE)
-			dev_err(dev, "master data transfer error\n");
-		if (v_lo & TALITOS_CCPSR_LO_SGDLZ)
-			dev_err(dev, "s/g data length zero error\n");
-		if (v_lo & TALITOS_CCPSR_LO_FPZ)
-			dev_err(dev, "fetch pointer zero error\n");
-		if (v_lo & TALITOS_CCPSR_LO_IDH)
-			dev_err(dev, "illegal descriptor header error\n");
-		if (v_lo & TALITOS_CCPSR_LO_IEU)
-			dev_err(dev, "invalid execution unit error\n");
-		if (v_lo & TALITOS_CCPSR_LO_EU)
-			report_eu_error(dev, ch, current_desc(dev, ch));
-		if (v_lo & TALITOS_CCPSR_LO_GB)
-			dev_err(dev, "gather boundary error\n");
-		if (v_lo & TALITOS_CCPSR_LO_GRL)
-			dev_err(dev, "gather return/length error\n");
-		if (v_lo & TALITOS_CCPSR_LO_SB)
-			dev_err(dev, "scatter boundary error\n");
-		if (v_lo & TALITOS_CCPSR_LO_SRL)
-			dev_err(dev, "scatter return/length error\n");
-
-		flush_channel(dev, ch, error, reset_ch);
-
-		if (reset_ch) {
-			reset_channel(dev, ch);
-		} else {
-			setbits32(priv->reg + TALITOS_CCCR(ch),
-				  TALITOS_CCCR_CONT);
-			setbits32(priv->reg + TALITOS_CCCR_LO(ch), 0);
-			while ((in_be32(priv->reg + TALITOS_CCCR(ch)) &
-			       TALITOS_CCCR_CONT) && --timeout)
-				cpu_relax();
-			if (timeout == 0) {
-				dev_err(dev, "failed to restart channel %d\n",
-					ch);
-				reset_dev = 1;
-			}
+	if (v_lo & TALITOS_CCPSR_LO_DOF) {
+		dev_err(dev, "double fetch fifo overflow error\n");
+		error = -EAGAIN;
+		reset_ch = 1;
+	}
+	if (v_lo & TALITOS_CCPSR_LO_SOF) {
+		/* h/w dropped descriptor */
+		dev_err(dev, "single fetch fifo overflow error\n");
+		error = -EAGAIN;
+	}
+	if (v_lo & TALITOS_CCPSR_LO_MDTE)
+		dev_err(dev, "master data transfer error\n");
+	if (v_lo & TALITOS_CCPSR_LO_SGDLZ)
+		dev_err(dev, "s/g data length zero error\n");
+	if (v_lo & TALITOS_CCPSR_LO_FPZ)
+		dev_err(dev, "fetch pointer zero error\n");
+	if (v_lo & TALITOS_CCPSR_LO_IDH)
+		dev_err(dev, "illegal descriptor header error\n");
+	if (v_lo & TALITOS_CCPSR_LO_IEU)
+		dev_err(dev, "invalid execution unit error\n");
+	if (v_lo & TALITOS_CCPSR_LO_EU)
+		report_eu_error(dev, chan->id, current_desc(dev, chan->id));
+	if (v_lo & TALITOS_CCPSR_LO_GB)
+		dev_err(dev, "gather boundary error\n");
+	if (v_lo & TALITOS_CCPSR_LO_GRL)
+		dev_err(dev, "gather return/length error\n");
+	if (v_lo & TALITOS_CCPSR_LO_SB)
+		dev_err(dev, "scatter boundary error\n");
+	if (v_lo & TALITOS_CCPSR_LO_SRL)
+		dev_err(dev, "scatter return/length error\n");
+
+	flush_channel(chan, error, reset_ch);
+
+	if (reset_ch) {
+		reset_channel(dev, chan->id);
+	} else {
+		setbits32(priv->reg + TALITOS_CCCR(chan->id, priv),
+			  TALITOS_CCCR_CONT);
+		setbits32(priv->reg + TALITOS_CCCR_LO(chan->id, priv), 0);
+		while ((in_be32(priv->reg + TALITOS_CCCR(chan->id, priv)) &
+		       TALITOS_CCCR_CONT) && --timeout)
+			cpu_relax();
+		if (timeout == 0) {
+			dev_err(dev, "failed to restart channel %d\n",
+				chan->id);
+			reset_dev = 1;
 		}
 	}
-	if (reset_dev || isr & ~TALITOS_ISR_CHERR || isr_lo) {
+
+	if (reset_dev || isr & ~(MAP_ARRAY(chan->id) - MAP_ARRAY_DONE(chan->id))
+			|| isr_lo) {
 		dev_err(dev, "done overflow, internal time out, or rngu error: "
 		        "ISR 0x%08x_%08x\n", isr, isr_lo);
 
 		/* purge request queues */
-		for (ch = 0; ch < priv->num_channels; ch++)
-			flush_channel(dev, ch, -EIO, 1);
+		flush_channel(chan, -EIO, 1);
 
 		/* reset and reinitialize the device */
-		init_device(dev);
+		if (reset_dev)
+			init_device(dev);
 	}
 }
 
-static irqreturn_t talitos_interrupt(int irq, void *data)
+/*
+ * recover from error interrupts
+ */
+static void talitos_error(void *data, u32 isr, u32 isr_lo)
 {
-	struct device *dev = data;
-	struct talitos_private *priv = dev_get_drvdata(dev);
-	u32 isr, isr_lo;
+	struct talitos_private *priv = data;
+	u8 i = 0;
+	u8 smp_processor_id = smp_processor_id();
+	if (priv->core_num_chan[smp_processor_id] > 0)
+		for (i = 0; i < priv->core_num_chan[smp_processor_id]; i++) {
+			if (isr & (1 <<
+				((priv->core_chan_no[smp_processor_id][i] << 1)
+				+ 1)))
+				handle_error(priv->chan +
+					priv->core_chan_no[smp_processor_id][i],
+					isr, isr_lo);
+		}
+}
 
+static irqreturn_t talitos_interrupt(int irq, void *data)
+{
+	struct talitos_private *priv = data;
+	u32 isr, isr_lo, isr_ack = 0;
+	u32 intr_mask = 0, isr_ack1 = 0;
+	u16 smp_processor_id = smp_processor_id();
 	isr = in_be32(priv->reg + TALITOS_ISR);
 	isr_lo = in_be32(priv->reg + TALITOS_ISR_LO);
-	/* Acknowledge interrupt */
-	out_be32(priv->reg + TALITOS_ICR, isr);
-	out_be32(priv->reg + TALITOS_ICR_LO, isr_lo);
 
-	if (unlikely((isr & ~TALITOS_ISR_CHDONE) || isr_lo))
-		talitos_error((unsigned long)data, isr, isr_lo);
-	else
-		if (likely(isr & TALITOS_ISR_CHDONE)) {
+	if (priv->core_num_chan[smp_processor_id] > 0) {
+		intr_mask = priv->chan_imr[smp_processor_id];
+		isr_ack = 0xffffff00 | priv->chan_isr[smp_processor_id];
+		isr = isr & isr_ack;
+		/* Acknowledge interrupt */
+		out_be32(priv->reg + TALITOS_ICR, isr);
+		out_be32(priv->reg + TALITOS_ICR_LO, isr_lo);
+		if (unlikely((isr & ~intr_mask) || isr_lo)) {
 			/* mask further done interrupts. */
-			clrbits32(priv->reg + TALITOS_IMR, TALITOS_IMR_DONE);
-			/* done_task will unmask done interrupts at exit */
-			tasklet_schedule(&priv->done_task);
+			clrbits32(priv->reg + TALITOS_IMR, isr_ack1);
+			talitos_error(data, isr, isr_lo);
+		} else {
+			if (likely(isr &  intr_mask)) {
+				/* mask further done interrupts.  */
+				clrbits32(priv->reg + TALITOS_IMR, intr_mask);
+				/* Schdeule  respective tasklet */
+				tasklet_schedule(per_cpu_ptr(priv->done_task,
+					smp_processor_id));
+			}
 		}
-
+	} else {
+		/* Acknowledge interrupt */
+		out_be32(priv->reg + TALITOS_ICR, isr);
+		out_be32(priv->reg + TALITOS_ICR_LO, isr_lo);
+	}
 	return (isr || isr_lo) ? IRQ_HANDLED : IRQ_NONE;
 }
 
@@ -760,30 +830,6 @@ badkey:
 	return -EINVAL;
 }
 
-/*
- * talitos_edesc - s/w-extended descriptor
- * @src_nents: number of segments in input scatterlist
- * @dst_nents: number of segments in output scatterlist
- * @dma_len: length of dma mapped link_tbl space
- * @dma_link_tbl: bus physical address of link_tbl
- * @desc: h/w descriptor
- * @link_tbl: input and output h/w link tables (if {src,dst}_nents > 1)
- *
- * if decrypting (with authcheck), or either one of src_nents or dst_nents
- * is greater than 1, an integrity check value is concatenated to the end
- * of link_tbl data
- */
-struct talitos_edesc {
-	int src_nents;
-	int dst_nents;
-	int src_is_chained;
-	int dst_is_chained;
-	int dma_len;
-	dma_addr_t dma_link_tbl;
-	struct talitos_desc desc;
-	struct talitos_ptr link_tbl[0];
-};
-
 static int talitos_map_sg(struct device *dev, struct scatterlist *sg,
 			  unsigned int nents, enum dma_data_direction dir,
 			  int chained)
@@ -1761,12 +1807,19 @@ static int talitos_remove(struct of_device *ofdev)
 
 	kfree(priv->chan);
 
-	if (priv->irq != NO_IRQ) {
-		free_irq(priv->irq, dev);
-		irq_dispose_mapping(priv->irq);
+	if (priv->irq_1 != NO_IRQ) {
+		free_irq(priv->irq_1, dev);
+		irq_dispose_mapping(priv->irq_1);
+	}
+
+	if (priv->irq_0 != NO_IRQ) {
+		free_irq(priv->irq_0, dev);
+		irq_dispose_mapping(priv->irq_0);
 	}
 
-	tasklet_kill(&priv->done_task);
+	for_each_possible_cpu(i)
+		tasklet_kill(per_cpu_ptr(priv->done_task, i));
+	free_percpu(priv->done_task); /* Alloc PER CPU structure */
 
 	iounmap(priv->reg);
 
@@ -1802,7 +1855,22 @@ static struct talitos_crypto_alg *talitos_alg_alloc(struct device *dev,
 
 	return t_alg;
 }
-
+static void update_chanmap(struct talitos_private *priv, unsigned int map)
+{
+	u8 i = 0;
+	for (i = 0; i < priv->num_channels; i++) {
+		if (map & 0x1) {
+			priv->core_chan_no[1][priv->core_num_chan[1]] =
+							MAX_CHAN - 1 - i;
+			priv->core_num_chan[1]++;
+		} else {
+			priv->core_chan_no[0][priv->core_num_chan[0]] =
+							MAX_CHAN - 1 - i;
+			priv->core_num_chan[0]++;
+		}
+		map = map >> 1;
+	}
+}
 static int talitos_probe(struct of_device *ofdev,
 			 const struct of_device_id *match)
 {
@@ -1811,6 +1879,7 @@ static int talitos_probe(struct of_device *ofdev,
 	struct talitos_private *priv;
 	const unsigned int *prop;
 	int i, err;
+	u8 smp_processor_id;
 
 	priv = kzalloc(sizeof(struct talitos_private), GFP_KERNEL);
 	if (!priv)
@@ -1819,26 +1888,31 @@ static int talitos_probe(struct of_device *ofdev,
 	dev_set_drvdata(dev, priv);
 
 	priv->ofdev = ofdev;
-
-	tasklet_init(&priv->done_task, talitos_done, (unsigned long)dev);
+	priv->dev = dev;
+	/* Alloc PER CPU structure */
+	priv->done_task = alloc_percpu(struct tasklet_struct);
+	for_each_possible_cpu(i) {
+		tasklet_init(per_cpu_ptr(priv->done_task, i),
+		talitos_done, (unsigned long)dev);
+	}
 
 	INIT_LIST_HEAD(&priv->alg_list);
 
-	priv->irq = irq_of_parse_and_map(np, 0);
+	priv->irq_0 = irq_of_parse_and_map(np, 0);
 
-	if (priv->irq == NO_IRQ) {
-		dev_err(dev, "failed to map irq\n");
+	if (priv->irq_0 == NO_IRQ) {
+		dev_err(dev, "failed to map irq_0\n");
 		err = -EINVAL;
 		goto err_out;
 	}
 
 	/* get the irq line */
-	err = request_irq(priv->irq, talitos_interrupt, 0,
-			  dev_driver_string(dev), dev);
+	err = request_irq(priv->irq_0, talitos_interrupt, 0,
+			  dev_driver_string(dev), priv);
 	if (err) {
-		dev_err(dev, "failed to request irq %d\n", priv->irq);
-		irq_dispose_mapping(priv->irq);
-		priv->irq = NO_IRQ;
+		dev_err(dev, "failed to request irq_0 %d\n", priv->irq_0);
+		irq_dispose_mapping(priv->irq_0);
+		priv->irq_0 = NO_IRQ;
 		goto err_out;
 	}
 
@@ -1873,9 +1947,41 @@ static int talitos_probe(struct of_device *ofdev,
 		goto err_out;
 	}
 
-	if (of_device_is_compatible(np, "fsl,sec3.0"))
+	if (of_device_is_compatible(np, "fsl,sec3.0")) {
 		priv->features |= TALITOS_FTR_SRC_LINK_TBL_LEN_INCLUDES_EXTENT;
-
+		prop = of_get_property(np, "fsl,channel-remap", NULL);
+		if (prop)
+			priv->chan_remap = *prop;
+		update_chanmap(priv, priv->chan_remap);
+		if (priv->chan_remap) {
+			priv->irq_1 = irq_of_parse_and_map(np, 1);
+
+			if (priv->irq_1 == NO_IRQ) {
+				dev_err(dev, "failed to map irq_1\n");
+				err = -EINVAL;
+				goto err_out;
+			}
+			/* get the irq_1 line */
+			err = request_irq(priv->irq_1, talitos_interrupt, 0,
+					dev_driver_string(dev), priv);
+			if (err) {
+				dev_err(dev, "failed to request irq_1 %d\n",
+					priv->irq_1);
+				irq_dispose_mapping(priv->irq_1);
+				priv->irq_1 = NO_IRQ;
+				goto err_out;
+			}
+		}
+	}
+	for (smp_processor_id = 0; smp_processor_id < NR_CPUS;
+				smp_processor_id++) {
+		for (i = 0; i < priv->core_num_chan[smp_processor_id]; i++) {
+			priv->chan_isr[smp_processor_id] +=
+			MAP_ARRAY(priv->core_chan_no[smp_processor_id][i]);
+			priv->chan_imr[smp_processor_id] +=
+			MAP_ARRAY_DONE(priv->core_chan_no[smp_processor_id][i]);
+		}
+	}
 	if (of_device_is_compatible(np, "fsl,sec2.1"))
 		priv->features |= TALITOS_FTR_HW_AUTH_CHECK;
 
@@ -1888,8 +1994,10 @@ static int talitos_probe(struct of_device *ofdev,
 	}
 
 	for (i = 0; i < priv->num_channels; i++) {
-		spin_lock_init(&priv->chan[i].head_lock);
-		spin_lock_init(&priv->chan[i].tail_lock);
+		priv->chan[i].id = i;
+		priv->chan[i].priv = priv;
+		priv->chan[i].head = 0;
+		priv->chan[i].tail = 0;
 	}
 
 	priv->fifo_len = roundup_pow_of_two(priv->chfifo_len);
@@ -1905,8 +2013,8 @@ static int talitos_probe(struct of_device *ofdev,
 	}
 
 	for (i = 0; i < priv->num_channels; i++)
-		atomic_set(&priv->chan[i].submit_count,
-			   -(priv->chfifo_len - 1));
+		priv->chan[i].submit_count =
+			   -(priv->chfifo_len - 1);
 
 	dma_set_mask(dev, DMA_BIT_MASK(36));
 
diff --git a/drivers/crypto/talitos.h b/drivers/crypto/talitos.h
index ff5a145..a38d48a 100644
--- a/drivers/crypto/talitos.h
+++ b/drivers/crypto/talitos.h
@@ -1,7 +1,7 @@
 /*
  * Freescale SEC (talitos) device register and descriptor header defines
  *
- * Copyright (c) 2006-2008 Freescale Semiconductor, Inc.
+ * Copyright 2006-2008, 2010 Freescale Semiconductor, Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
@@ -33,29 +33,32 @@
  */
 
 /* global register offset addresses */
-#define TALITOS_MCR			0x1030  /* master control register */
-#define TALITOS_MCR_LO			0x1038
-#define   TALITOS_MCR_SWR		0x1     /* s/w reset */
-#define TALITOS_IMR			0x1008  /* interrupt mask register */
+#define   TALITOS_MCR			0x1030  /* master control register */
+#define   TALITOS_MCR_LO		0x1034
+#define   TALITOS_MCR_SWR		0x1	/* s/w reset */
+#define   TALITOS_IMR			0x1008  /* interrupt mask register */
 #define   TALITOS_IMR_INIT		0x100ff /* enable channel IRQs */
 #define   TALITOS_IMR_DONE		0x00055 /* done IRQs */
-#define TALITOS_IMR_LO			0x100C
+#define   TALITOS_IMR_LO		0x100C
 #define   TALITOS_IMR_LO_INIT		0x20000 /* allow RNGU error IRQs */
-#define TALITOS_ISR			0x1010  /* interrupt status register */
+#define   TALITOS_ISR			0x1010  /* interrupt status register */
 #define   TALITOS_ISR_CHERR		0xaa    /* channel errors mask */
 #define   TALITOS_ISR_CHDONE		0x55    /* channel done mask */
-#define TALITOS_ISR_LO			0x1014
-#define TALITOS_ICR			0x1018  /* interrupt clear register */
-#define TALITOS_ICR_LO			0x101C
+#define   TALITOS_ISR_LO		0x1014
+#define   TALITOS_ICR			0x1018  /* interrupt clear register */
+#define   TALITOS_ICR_LO		0x101C
 
 /* channel register address stride */
 #define TALITOS_CH_STRIDE		0x100
+#define CHAN_BASE(ch, priv) ((((1 << (3 - ch)) \
+			& get_chan_remap(priv)) ? 0x0000 : 0x1000) \
+			+ (ch * TALITOS_CH_STRIDE))
 
 /* channel configuration register  */
-#define TALITOS_CCCR(ch)		(ch * TALITOS_CH_STRIDE + 0x1108)
+#define	  TALITOS_CCCR(ch, priv)	(CHAN_BASE(ch, priv) + 0x0108)
 #define   TALITOS_CCCR_CONT		0x2    /* channel continue */
 #define   TALITOS_CCCR_RESET		0x1    /* channel reset */
-#define TALITOS_CCCR_LO(ch)		(ch * TALITOS_CH_STRIDE + 0x110c)
+#define   TALITOS_CCCR_LO(ch, priv)	(CHAN_BASE(ch, priv) + 0x010c)
 #define   TALITOS_CCCR_LO_IWSE		0x80   /* chan. ICCR writeback enab. */
 #define   TALITOS_CCCR_LO_EAE		0x20   /* extended address enable */
 #define   TALITOS_CCCR_LO_CDWE		0x10   /* chan. done writeback enab. */
@@ -63,8 +66,8 @@
 #define   TALITOS_CCCR_LO_CDIE		0x2    /* channel done IRQ enable */
 
 /* CCPSR: channel pointer status register */
-#define TALITOS_CCPSR(ch)		(ch * TALITOS_CH_STRIDE + 0x1110)
-#define TALITOS_CCPSR_LO(ch)		(ch * TALITOS_CH_STRIDE + 0x1114)
+#define   TALITOS_CCPSR(ch, priv)	(CHAN_BASE(ch, priv) + 0x0110)
+#define   TALITOS_CCPSR_LO(ch, priv)	(CHAN_BASE(ch, priv) + 0x0114)
 #define   TALITOS_CCPSR_LO_DOF		0x8000 /* double FF write oflow error */
 #define   TALITOS_CCPSR_LO_SOF		0x4000 /* single FF write oflow error */
 #define   TALITOS_CCPSR_LO_MDTE		0x2000 /* master data transfer error */
@@ -79,24 +82,24 @@
 #define   TALITOS_CCPSR_LO_SRL		0x0010 /* scatter return/length error */
 
 /* channel fetch fifo register */
-#define TALITOS_FF(ch)			(ch * TALITOS_CH_STRIDE + 0x1148)
-#define TALITOS_FF_LO(ch)		(ch * TALITOS_CH_STRIDE + 0x114c)
+#define TALITOS_FF(ch, priv)		(CHAN_BASE(ch, priv) +  0x0148)
+#define TALITOS_FF_LO(ch, priv)		(CHAN_BASE(ch, priv) +  0x014c)
 
 /* current descriptor pointer register */
-#define TALITOS_CDPR(ch)		(ch * TALITOS_CH_STRIDE + 0x1140)
-#define TALITOS_CDPR_LO(ch)		(ch * TALITOS_CH_STRIDE + 0x1144)
+#define TALITOS_CDPR(ch, priv)		(CHAN_BASE(ch, priv) +  0x0140)
+#define TALITOS_CDPR_LO(ch, priv)	(CHAN_BASE(ch, priv) +  0x0144)
 
 /* descriptor buffer register */
-#define TALITOS_DESCBUF(ch)		(ch * TALITOS_CH_STRIDE + 0x1180)
-#define TALITOS_DESCBUF_LO(ch)		(ch * TALITOS_CH_STRIDE + 0x1184)
+#define TALITOS_DESCBUF(ch, priv)	(CHAN_BASE(ch, priv) +  0x0180)
+#define TALITOS_DESCBUF_LO(ch, priv)	(CHAN_BASE(ch, priv) +  0x0184)
 
 /* gather link table */
-#define TALITOS_GATHER(ch)		(ch * TALITOS_CH_STRIDE + 0x11c0)
-#define TALITOS_GATHER_LO(ch)		(ch * TALITOS_CH_STRIDE + 0x11c4)
+#define TALITOS_GATHER(ch, priv)	(CHAN_BASE(ch, priv) +  0x01c0)
+#define TALITOS_GATHER_LO(ch, priv)	(CHAN_BASE(ch, priv) +  0x01c4)
 
 /* scatter link table */
-#define TALITOS_SCATTER(ch)		(ch * TALITOS_CH_STRIDE + 0x11e0)
-#define TALITOS_SCATTER_LO(ch)		(ch * TALITOS_CH_STRIDE + 0x11e4)
+#define TALITOS_SCATTER(ch, priv)	(CHAN_BASE(ch, priv) +  0x01e0)
+#define TALITOS_SCATTER_LO(ch, priv)	(CHAN_BASE(ch, priv) + 0x01e4)
 
 /* execution unit interrupt status registers */
 #define TALITOS_DEUISR			0x2030 /* DES unit */
@@ -107,7 +110,7 @@
 #define TALITOS_MDEUISR_LO		0x6034
 #define TALITOS_MDEUICR			0x6038 /* interrupt control */
 #define TALITOS_MDEUICR_LO		0x603c
-#define   TALITOS_MDEUICR_LO_ICE	0x4000 /* integrity check IRQ enable */
+#define TALITOS_MDEUICR_LO_ICE		0x4000 /* integrity check IRQ enable */
 #define TALITOS_AFEUISR			0x8030 /* arc4 unit */
 #define TALITOS_AFEUISR_LO		0x8034
 #define TALITOS_RNGUISR			0xa030 /* random number unit */
-- 
1.6.5.2

