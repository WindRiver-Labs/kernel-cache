From edb2f561e9e7e38a7c2efc88d1939a35c592328d Mon Sep 17 00:00:00 2001
From: Sandeep Malik <sandeep.malik@freescale.com>
Date: Tue, 28 Sep 2010 16:35:54 +0800
Subject: [PATCH 12/12] powerpc/85xx: talitos: Assigning explicitly the SEC primary and secondary interrupts to core0 and core1

Extracted from the P1020RDB_20100507-ltib.iso vendor drop.

Without this explicit assignment, calltrace in talitos driver will
happen on P1020RDB:

$ modprobe tcrypt

irq 58: nobody cared (try booting with the "irqpoll" option)
Call Trace:
[decbfd00] [c00079b8] show_stack+0x44/0x160 (unreliable)
[decbfd30] [c00a9e50] __report_bad_irq+0x34/0xbc
[decbfd50] [c00aa0a8] note_interrupt+0x1d0/0x22c
[decbfd80] [c00aad8c] handle_fasteoi_irq+0xf0/0x138
[decbfda0] [c0004f54] native_do_IRQ+0xd4/0xfc
[decbfdc0] [c0003b60] do_IRQ+0x10/0x20
[decbfdd0] [c0011278] ret_from_except+0x0/0x18
[decbfe90] [c004f6f8] __do_softirq+0x8c/0x26c
[decbfef0] [c0004db4] do_softirq+0xa0/0xa4
[decbff00] [c004ef5c] irq_exit+0x74/0x90
[decbff10] [c0004f58] native_do_IRQ+0xd8/0xfc
[decbff30] [c0003b60] do_IRQ+0x10/0x20
[decbff40] [c0011278] ret_from_except+0x0/0x18
handlers:
[<c03e9364>] (talitos_interrupt+0x0/0xc64)
Disabling IRQ #58

Message from syslogd@P1020RDB at Sun Oct  4 07:19:20 2009 ...
P1020RDB kernel: Disabling IRQ #58

Signed-off-by: Sandeep Malik <sandeep.malik@freescale.com>
[ Adds the error log ]
Integrated-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 drivers/crypto/talitos.c |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/drivers/crypto/talitos.c b/drivers/crypto/talitos.c
index 45e05d1..9c1be2e 100644
--- a/drivers/crypto/talitos.c
+++ b/drivers/crypto/talitos.c
@@ -1964,6 +1964,13 @@ static int talitos_probe(struct of_device *ofdev,
 		irq_dispose_mapping(priv->irq[0]);
 		priv->irq[0] = NO_IRQ;
 		goto err_out;
+	} else {
+#if CONFIG_SMP
+		struct cpumask cpumask_msg_intrs;
+		cpumask_clear(&cpumask_msg_intrs);
+		cpumask_set_cpu(0, &cpumask_msg_intrs);
+		irq_set_affinity(priv->irq[0], &cpumask_msg_intrs);
+#endif
 	}
 
 	priv->reg = of_iomap(np, 0);
@@ -2020,6 +2027,16 @@ static int talitos_probe(struct of_device *ofdev,
 				irq_dispose_mapping(priv->irq[1]);
 				priv->irq[1] = NO_IRQ;
 				goto err_out;
+			} else {
+#if CONFIG_SMP
+				int cpus = num_online_cpus();
+				if (cpus > 1) {
+					struct cpumask cpumask_msg_intrs;
+					cpumask_clear(&cpumask_msg_intrs);
+					cpumask_set_cpu(1, &cpumask_msg_intrs);
+					irq_set_affinity(priv->irq[1], &cpumask_msg_intrs);
+				}
+#endif
 			}
 		}
 	}
-- 
1.6.5.2

