From 36c45287169491933213574b3289fdd6239fe3fc Mon Sep 17 00:00:00 2001
From: "Reece R. Pollack" <x0183204@ti.com>
Date: Tue, 15 Oct 2013 13:24:53 -0400
Subject: [PATCH 094/256] hwqueue: keystone: Make QoS WRR "weight" writable

This patch implements the sysfs "store" method for QoS WRR
node "write" attributes.

Behavioral changes include:
  * Lower bound of 1 enforced to avoid potential divide-by-zero
    faults if child_weight_sum is zero..
  * Upper bound raised from 2^10 to (2^28)-1.

Signed-off-by: Reece R. Pollack <x0183204@ti.com>
(cherry picked from commit 8ac701cef7757f7e193d37cf126217c71038ca01)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue_qos.c |   50 +++++++++++++++++++++++++-------
 drivers/hwqueue/keystone_qos.h         |    2 +-
 2 files changed, 40 insertions(+), 12 deletions(-)

diff --git a/drivers/hwqueue/keystone_hwqueue_qos.c b/drivers/hwqueue/keystone_hwqueue_qos.c
index c677370..bcd4880 100644
--- a/drivers/hwqueue/keystone_hwqueue_qos.c
+++ b/drivers/hwqueue/keystone_hwqueue_qos.c
@@ -1331,6 +1331,37 @@ static ssize_t qnode_weight_show(struct khwq_qos_tree_node *qnode,
 	return snprintf(buf, PAGE_SIZE, "%d\n", qnode->weight);
 }
 
+static ssize_t qnode_weight_store(struct khwq_qos_tree_node *qnode,
+				  const char *buf, size_t size)
+{
+	struct khwq_qos_tree_node *parent = qnode->parent;
+	struct khwq_qos_info *info = qnode->info;
+	unsigned int weight;
+	int error;
+
+	if (!parent || parent->type != QOS_NODE_WRR)
+		return -EINVAL;
+
+	error = kstrtouint(buf, 0, &weight);
+	if (error)
+		return error;
+
+	if (weight == 0 || weight > QOS_MAX_WEIGHT)
+		return -EINVAL;
+
+	qnode->weight = weight;
+
+	parent->child_weight_sum -= parent->child_weight[qnode->parent_input];
+	parent->child_weight_sum += weight;
+	parent->child_weight[qnode->parent_input] = weight;
+
+	khwq_qos_stop(info);
+
+	khwq_qos_start(info);
+
+	return size;
+}
+
 static ssize_t qnode_priority_show(struct khwq_qos_tree_node *qnode,
 					     char *buf)
 {
@@ -1510,8 +1541,8 @@ static KHWQ_QOS_QNODE_ATTR(priority, S_IRUGO,
 static KHWQ_QOS_QNODE_ATTR(output_queue, S_IRUGO,
 			   qnode_output_queue_show,
 			   NULL);
-static KHWQ_QOS_QNODE_ATTR(weight, S_IRUGO,
-			   qnode_weight_show, NULL);
+static KHWQ_QOS_QNODE_ATTR(weight, S_IRUGO|S_IWUSR,
+			   qnode_weight_show, qnode_weight_store);
 static KHWQ_QOS_QNODE_ATTR(output_rate, S_IRUGO|S_IWUSR,
 			   qnode_output_rate_show, qnode_output_rate_store);
 static KHWQ_QOS_QNODE_ATTR(burst_size, S_IRUGO|S_IWUSR,
@@ -1724,8 +1755,9 @@ static int khwq_qos_tree_parse(struct khwq_qos_info *info,
 	qnode->weight = -1;
 	of_property_read_u32(node, "weight", &qnode->weight);
 	if (qnode->weight != -1) {
-		if (qnode->weight > QOS_MAX_WEIGHT) {
-			dev_err(kdev->dev, "cannot have weight more than 1M\n");
+		if (qnode->weight == 0 || qnode->weight > QOS_MAX_WEIGHT) {
+			dev_err(kdev->dev, "weight must be between 1 and %d\n",
+				QOS_MAX_WEIGHT);
 			error = -EINVAL;
 			goto error_free;
 		}
@@ -1930,10 +1962,6 @@ static int khwq_qos_tree_parse(struct khwq_qos_info *info,
 		int o = offsetof(struct khwq_qos_tree_node, priority);
 		ktree_sort_children(&qnode->node, khwq_qos_cmp, (void *)o);
 	}
-	else if (qnode->type == QOS_NODE_WRR) {
-		int o = offsetof(struct khwq_qos_tree_node, weight);
-		ktree_sort_children(&qnode->node, khwq_qos_cmp, (void *)o);
-	}
 
 	return 0;
 
@@ -1970,7 +1998,7 @@ static int khwq_qos_tree_map_nodes(struct ktree_node *node, void *arg)
 
 		parent->child_weight[parent->child_count] = qnode->weight;
 		/* provide our parent with info */
-		parent->child_count ++;
+		parent->child_count++;
 		parent->child_weight_sum += qnode->weight;
 
 		/* inherit if parent is an input to drop sched */
@@ -2170,8 +2198,8 @@ static int khwq_qos_tree_start_port(struct khwq_qos_info *info,
 			}
 			val = (u32)(tmp);
 
-			dev_dbg(kdev->dev, "node weight = %d, weight "
-				 "credits = %d\n", qnode->child_weight[i], val);
+			dev_dbg(kdev->dev, "node %d weight = %d, credits = %d\n",
+					i, qnode->child_weight[i], val);
 		}
 
 		error = khwq_qos_set_sched_wrr_credit(info, idx, i, val, sync);
diff --git a/drivers/hwqueue/keystone_qos.h b/drivers/hwqueue/keystone_qos.h
index 3bcec2b..9569227 100644
--- a/drivers/hwqueue/keystone_qos.h
+++ b/drivers/hwqueue/keystone_qos.h
@@ -53,7 +53,7 @@
 #define QOS_BYTE_NORMALIZATION_FACTOR	3000
 #define QOS_PACKET_NORMALIZATION_FACTOR	2
 
-#define	QOS_MAX_WEIGHT			SZ_1M
+#define	QOS_MAX_WEIGHT			((1 << 28) - 1)
 
 #define to_qnode(_n)	container_of(_n, struct khwq_qos_tree_node, node)
 
-- 
1.7.5.4

