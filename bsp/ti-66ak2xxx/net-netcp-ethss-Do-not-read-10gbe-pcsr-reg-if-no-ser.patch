From e179bf1d989ddb48087681d567add18441f96b83 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Thu, 15 Sep 2016 12:45:13 -0400
Subject: [PATCH 285/347] net: netcp: ethss: Do not read 10gbe pcsr reg if no
 serdes phy defined

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

If there is no serdes phy defined, i.e. no individual SerDes
lane enabling is allowed, there is no point to read the PCSR
status register to determine the link status. This is the case
when 10gbe MCU firmware is used in configuring the 10gbe
SerDes. This patch implements the above mentioned changes.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Michael Scherban <m-scherban@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 184efdede8d13ac7ca16939e953d743756dd5ddc)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/ti/netcp_ethss.c |   22 +++++++++++++---------
 1 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/ti/netcp_ethss.c b/drivers/net/ethernet/ti/netcp_ethss.c
index f566da0..e7db280 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.c
+++ b/drivers/net/ethernet/ti/netcp_ethss.c
@@ -141,6 +141,8 @@
 #define	GBE_RXHOOK_ORDER			0
 #define GBE_DEFAULT_ALE_AGEOUT			30
 #define SLAVE_LINK_IS_XGMII(s) ((s)->link_interface >= XGMII_LINK_MAC_PHY)
+#define SLAVE_LINK_IS_XGMII_MAC_MAC(s) \
+	((s)->link_interface == XGMII_LINK_MAC_MAC_FORCED)
 #define SLAVE_LINK_IS_RGMII(s) \
 	(((s)->link_interface >= RGMII_LINK_MAC_PHY) && \
 	 ((s)->link_interface <= RGMII_LINK_MAC_PHY_NO_MDIO))
@@ -2017,6 +2019,12 @@ static void netcp_ethss_link_state_action(struct gbe_priv *gbe_dev,
 	}
 
 	if (slave->link_interface == XGMII_LINK_MAC_MAC_FORCED) {
+		/* start recover process only if there is a
+		 * serdes phy to recover
+		 */
+		if (!slave->serdes_phy)
+			return;
+
 		if (up) {
 			if (slave->link_recover_thresh ||
 			    slave->link_recovering) {
@@ -2081,7 +2089,7 @@ static void netcp_ethss_update_link_state(struct gbe_priv *gbe_dev,
 		} else
 			sw_link_state = netcp_sgmii_get_port_link(
 						SGMII_BASE(gbe_dev, sp), sp);
-	} else if (slave->link_interface == XGMII_LINK_MAC_MAC_FORCED) {
+	} else if (SLAVE_LINK_IS_XGMII_MAC_MAC(slave) && slave->serdes_phy) {
 		/* read status from pcsr status reg */
 		ret = regmap_read(gbe_dev->pcsr_regmap,
 				  XGBE10_PCSR_RX_STATUS(sp), &stat);
@@ -2099,14 +2107,10 @@ static void netcp_ethss_update_link_state(struct gbe_priv *gbe_dev,
 	if (atomic_xchg(&slave->link_state, link_state) != link_state) {
 		netcp_ethss_link_state_action(gbe_dev, ndev, slave,
 					      link_state);
-	} else {
-		if (slave->link_recover_thresh) {
-			if (++slave->link_recovering >=
-					slave->link_recover_thresh) {
-				schedule_delayed_work(&slave->link_recover_work,
-						      0);
-				slave->link_recovering = 1;
-			}
+	} else if (slave->serdes_phy && slave->link_recover_thresh) {
+		if (++slave->link_recovering >= slave->link_recover_thresh) {
+			schedule_delayed_work(&slave->link_recover_work, 0);
+			slave->link_recovering = 1;
 		}
 	}
 }
-- 
1.7.5.4

