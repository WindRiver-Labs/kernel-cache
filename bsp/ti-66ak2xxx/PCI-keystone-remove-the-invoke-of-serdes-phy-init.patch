From ed2f89ac643e934748a2fd237d19d271e940f283 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Mon, 22 Aug 2016 07:36:40 -0400
Subject: [PATCH 207/347] PCI: keystone: remove the invoke of serdes phy init

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Since SerDes PHY provider now performs the common
portion of SerDes configurations (configurations
that do not depend on whether a lane will actually
be used) and that is all what PCIe needs as far as
SerDes configurations are concerned.  Hence there
is no real need for PCIe driver to receive the PHY
instance.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit 0e412f665b3537cb874beec97a793f00b626c2bf)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/pci/host/pci-keystone.c |   18 +-----------------
 drivers/pci/host/pci-keystone.h |    1 -
 2 files changed, 1 insertions(+), 18 deletions(-)

diff --git a/drivers/pci/host/pci-keystone.c b/drivers/pci/host/pci-keystone.c
index bdeba9f..828dd41 100644
--- a/drivers/pci/host/pci-keystone.c
+++ b/drivers/pci/host/pci-keystone.c
@@ -368,7 +368,6 @@ static int __exit ks_pcie_remove(struct platform_device *pdev)
 {
 	struct keystone_pcie *ks_pcie = platform_get_drvdata(pdev);
 
-	phy_exit(ks_pcie->serdes_phy);
 	clk_disable_unprepare(ks_pcie->clk);
 
 	return 0;
@@ -376,7 +375,6 @@ static int __exit ks_pcie_remove(struct platform_device *pdev)
 
 static int __init ks_pcie_probe(struct platform_device *pdev)
 {
-	struct device_node *node = pdev->dev.of_node;
 	struct device *dev = &pdev->dev;
 	struct keystone_pcie *ks_pcie;
 	struct pcie_port *pp;
@@ -412,26 +410,12 @@ static int __init ks_pcie_probe(struct platform_device *pdev)
 	if (ret)
 		return ret;
 
-	ks_pcie->serdes_phy = devm_of_phy_get(dev, node, NULL);
-	if (IS_ERR(ks_pcie->serdes_phy)) {
-		ret = PTR_ERR(ks_pcie->serdes_phy);
-		dev_err(dev, "No %s serdes driver found: %d\n",
-			node->name, ret);
-		goto fail_clk;
-	}
-
-	ret = phy_init(ks_pcie->serdes_phy);
-	if (ret < 0)
-		goto fail_clk;
-
 	ret = ks_add_pcie_port(ks_pcie, pdev);
 	if (ret < 0)
-		goto fail_phy;
+		goto fail_clk;
 
 	return 0;
 
-fail_phy:
-	phy_exit(ks_pcie->serdes_phy);
 fail_clk:
 	clk_disable_unprepare(ks_pcie->clk);
 	return ret;
diff --git a/drivers/pci/host/pci-keystone.h b/drivers/pci/host/pci-keystone.h
index 8383d55..a5b0cb2 100644
--- a/drivers/pci/host/pci-keystone.h
+++ b/drivers/pci/host/pci-keystone.h
@@ -36,7 +36,6 @@ struct keystone_pcie {
 	/* Application register space */
 	void __iomem		*va_app_base;
 	struct resource		app;
-	struct phy		*serdes_phy;
 };
 
 /* Keystone DW specific MSI controller APIs/definitions */
-- 
1.7.5.4

