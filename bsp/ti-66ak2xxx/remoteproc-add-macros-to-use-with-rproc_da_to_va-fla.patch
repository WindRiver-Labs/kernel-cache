From 485b49ccfe3ebf8b5ed52b7e0708c76d2d9e59dd Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Thu, 18 Feb 2016 16:27:20 -0600
Subject: [PATCH 088/347] remoteproc: add macros to use with rproc_da_to_va()
 flags

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

The rproc_da_to_va() API takes in a flags argument to pass
it onto the individual remoteproc implementations to aid them
in performing proper address translations on internal memory
regions. As this can vary from one implementation to the other,
define some semantics for this flags argument.

A new flags type is encoded into the upper 16 bits along side
the actual value in the lower 16-bits for the flags argument,
to allow different individual implementations to have better
flexibility in interpreting the flags as per their needs.

The current remoteproc ELF loader code is also updated to
use this semantics to pass the different types of flags used
in different invocations of rproc_da_to_va().

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit 9975b690d4c0b8ca201d58dda0a6aa2c6ef99da3)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/remoteproc/remoteproc_core.c       |    6 ++++--
 drivers/remoteproc/remoteproc_elf_loader.c |    5 +++--
 include/linux/remoteproc.h                 |   14 ++++++++++++++
 3 files changed, 21 insertions(+), 4 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 9a87d06..3d87835 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -161,7 +161,9 @@ static void rproc_disable_iommu(struct rproc *rproc)
  * so we can access the referenced memory. This function also allows to perform
  * translations on the internal remoteproc memory regions through a platform
  * implementation specific da_to_va ops, if present. The @flags field is passed
- * onto these ops to aid the translation within the ops implementation.
+ * onto these ops to aid the translation within the ops implementation. The
+ * @flags field is to be passed as a combination of the RPROC_FLAGS_xxx type
+ * and the pertinent flags value for that type.
  *
  * The function returns a valid kernel address on success or NULL on failure.
  *
@@ -428,7 +430,7 @@ static int rproc_handle_trace(struct rproc *rproc, struct fw_rsc_trace *rsc,
 	}
 
 	/* what's the kernel address of this resource ? */
-	ptr = rproc_da_to_va(rproc, rsc->da, rsc->len, 0);
+	ptr = rproc_da_to_va(rproc, rsc->da, rsc->len, RPROC_FLAGS_NONE);
 	if (!ptr) {
 		dev_err(dev, "erroneous trace resource entry\n");
 		return -EINVAL;
diff --git a/drivers/remoteproc/remoteproc_elf_loader.c b/drivers/remoteproc/remoteproc_elf_loader.c
index 95dc24b..31045d6 100644
--- a/drivers/remoteproc/remoteproc_elf_loader.c
+++ b/drivers/remoteproc/remoteproc_elf_loader.c
@@ -183,7 +183,8 @@ rproc_elf_load_segments(struct rproc *rproc, const struct firmware *fw)
 		}
 
 		/* grab the kernel address for this device address */
-		ptr = rproc_da_to_va(rproc, da, memsz, phdr->p_flags);
+		ptr = rproc_da_to_va(rproc, da, memsz,
+				     RPROC_FLAGS_ELF_PHDR | phdr->p_flags);
 		if (!ptr) {
 			dev_err(dev, "bad phdr da 0x%x mem 0x%x\n", da, memsz);
 			ret = -EINVAL;
@@ -326,7 +327,7 @@ rproc_elf_find_loaded_rsc_table(struct rproc *rproc, const struct firmware *fw)
 		return NULL;
 
 	return rproc_da_to_va(rproc, shdr->sh_addr, shdr->sh_size,
-			      shdr->sh_flags);
+			      RPROC_FLAGS_ELF_SHDR | shdr->sh_flags);
 }
 
 const struct rproc_fw_ops rproc_elf_fw_ops = {
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index a8b58e7..3f78c0e 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -41,6 +41,7 @@
 #include <linux/completion.h>
 #include <linux/idr.h>
 #include <linux/of.h>
+#include <linux/bitops.h>
 
 /**
  * struct resource_table - firmware resource table header
@@ -325,6 +326,19 @@ struct rproc_mem_entry {
 
 struct rproc;
 
+/*
+ * Macros to use with flags field in rproc_da_to_va API. Use
+ * the upper 16 bits to dictate the flags type and the lower
+ * 16 bits to pass on the value of the flags pertinent to that
+ * type.
+ *
+ * Add any new flags type at a new bit-field position
+ */
+#define RPROC_FLAGS_SHIFT	16
+#define RPROC_FLAGS_NONE	0
+#define RPROC_FLAGS_ELF_PHDR	BIT(0 + RPROC_FLAGS_SHIFT)
+#define RPROC_FLAGS_ELF_SHDR	BIT(1 + RPROC_FLAGS_SHIFT)
+
 /**
  * struct rproc_ops - platform-specific device handlers
  * @start:	power on the device and boot it
-- 
1.7.5.4

