From 4ce95be3821ecd6681b3f0fbae1bf4e2fd4f9540 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Sat, 1 Apr 2017 09:18:25 +0800
Subject: [PATCH 083/347] mtd: spi-nor: cadence-quadspi: add a delay in write
 sequence

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

commit 14b9de6f8771c1cad7baad72e98e5bd4fd6f0fe9 ti-sdks

As per 66AK2G02 TRM SPRUHY8 section 11.14.5.3 Indirect Access Controller
programming sequence, a delay equal to couple QSPI master clock(~5ns) is
required after setting CQSPI_REG_INDIRECTWR_START bit and writing data
to the flash. Add a new compatible to handle the couple of cycles of
delay required in the indirect write sequence, since this delay is
specific to TI K2G SoC.

Signed-off-by: Vignesh R <vigneshr@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
-
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/mtd/spi-nor/cadence-quadspi.c |   20 ++++++++++++++++++++
 1 files changed, 20 insertions(+), 0 deletions(-)

diff --git a/drivers/mtd/spi-nor/cadence-quadspi.c b/drivers/mtd/spi-nor/cadence-quadspi.c
index 1241935..7974ea5 100644
--- a/drivers/mtd/spi-nor/cadence-quadspi.c
+++ b/drivers/mtd/spi-nor/cadence-quadspi.c
@@ -77,6 +77,9 @@ struct cqspi_st {
 	u32			fifo_depth;
 	u32			fifo_width;
 	u32			trigger_address;
+#ifdef CONFIG_ARCH_KEYSTONE
+	u32			wr_delay;
+#endif
 	struct cqspi_flash_pdata f_pdata[CQSPI_MAX_CHIPSELECT];
 };
 
@@ -609,6 +612,16 @@ static int cqspi_indirect_write_execute(struct spi_nor *nor,
 	writel(CQSPI_REG_INDIRECTWR_START_MASK,
 	       reg_base + CQSPI_REG_INDIRECTWR);
 
+#ifdef CONFIG_ARCH_KEYSTONE
+	/*
+	 * As per 66AK2G02 TRM SPRUHY8 section 11.14.5.3 Indirect Access
+	 * Controller programming sequence, couple of cycles of
+	 * QSPI_REF_CLK delay is required for the above bit to
+	 * be internally synchronized by the QSPI module.
+	 */
+	ndelay(cqspi->wr_delay);
+#endif
+
 	while (remaining > 0) {
 		write_bytes = remaining > page_size ? page_size : remaining;
 		writesl(cqspi->ahb_base, txbuf, DIV_ROUND_UP(write_bytes, 4));
@@ -1174,6 +1187,12 @@ static int cqspi_probe(struct platform_device *pdev)
 		return PTR_ERR(cqspi->clk);
 	}
 
+#ifdef CONFIG_ARCH_KEYSTONE
+	if (of_device_is_compatible(dev->of_node, "ti,k2g-qspi"))
+		cqspi->wr_delay = 3 * DIV_ROUND_UP(1000000000U,
+						   cqspi->master_ref_clk_hz);
+#endif
+
 	/* Obtain and remap controller address. */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	cqspi->iobase = devm_ioremap_resource(dev, res);
@@ -1286,6 +1305,7 @@ static const struct dev_pm_ops cqspi__dev_pm_ops = {
 
 static struct of_device_id const cqspi_dt_ids[] = {
 	{.compatible = "cdns,qspi-nor",},
+	{.compatible = "ti,k2g-qspi",},
 	{ /* end of table */ }
 };
 
-- 
1.7.5.4

