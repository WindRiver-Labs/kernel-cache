From d447fc81583bae8fd72fa742346b70da2f370598 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 8 Apr 2016 10:46:13 -0400
Subject: [PATCH 169/347] edac: keystone: add ddr3 ecc error handler

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

This patch adds DDR3 ECC error interrupt handler support
Keystone 2 devices. This is a simple uncorrectable
error handler that causes kernel panic if the error
ECC 2 bit error interrupt is raised.

Signed-off-by: Hao Zhang <hzhang@ti.com>
Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
(cherry picked from commit 84d13696fe527fbb379e69dcf2d31706348781bd)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/edac/keystone-mc-edac.txt  |   23 +++
 MAINTAINERS                                        |    7 +
 drivers/edac/Kconfig                               |    8 +
 drivers/edac/Makefile                              |    1 +
 drivers/edac/keystone_mc_edac.c                    |  167 ++++++++++++++++++++
 5 files changed, 206 insertions(+), 0 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/edac/keystone-mc-edac.txt
 create mode 100644 drivers/edac/keystone_mc_edac.c

diff --git a/Documentation/devicetree/bindings/edac/keystone-mc-edac.txt b/Documentation/devicetree/bindings/edac/keystone-mc-edac.txt
new file mode 100644
index 0000000..704f0ac
--- /dev/null
+++ b/Documentation/devicetree/bindings/edac/keystone-mc-edac.txt
@@ -0,0 +1,23 @@
+* Keystone DDR3 Memory Controller EDAC device bindings
+
+Keystone MC EDAC node is defined to describe the DDR3 memory controller
+ECC error detection hardware. The hardware is capable of auto correcting
+1 bit ECC errors. 2 bit ECC errors are uncorrectable and triggers an
+interrupt and handled by the edac ecc error driver which currently enables
+only interrupt for uncorrectable errors.
+
+The following section describes the EDAC DT node binding.
+
+Required properties:
+- compatible		: Shall be "ti,keystone-ddr3-mc-edac"
+- reg			: DDR3 MC base address
+- interrupts		: ECC error interrupt
+- interrupt-parent	: Interrupt controller node
+
+Example:
+	ddr3edac {
+		compatible = "ti,keystone-ddr3-mc-edac";
+		reg = <0x21010000 0x200>;
+		interrupts = <GIC_SPI 448 IRQ_TYPE_EDGE_RISING>;
+		interrupt-parent = <&gic>;
+	};
diff --git a/MAINTAINERS b/MAINTAINERS
index 6fdfc4c..d5c796b 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -4573,6 +4573,13 @@ S:     Supported
 F:     drivers/edac/xgene_edac.c
 F:     Documentation/devicetree/bindings/edac/apm-xgene-edac.txt
 
+EDAC-KEYSTONE
+TI KEYSTONE EDAC
+M:     Murali Karicheri <m-karicheri2@ti.com>
+S:     Supported
+F:     drivers/edac/keusyone_mc_edac.c
+F:     Documentation/devicetree/bindings/edac/keystone-mc-edac.txt
+
 EDIROL UA-101/UA-1000 DRIVER
 M:	Clemens Ladisch <clemens@ladisch.de>
 L:	alsa-devel@alsa-project.org (moderated for non-subscribers)
diff --git a/drivers/edac/Kconfig b/drivers/edac/Kconfig
index 2b8f8d2..769499a 100644
--- a/drivers/edac/Kconfig
+++ b/drivers/edac/Kconfig
@@ -430,4 +430,12 @@ config EDAC_XGENE
 	  Support for error detection and correction on the
 	  APM X-Gene family of SOCs.
 
+config EDAC_KEYSTONE_MC
+	bool "Keystone DDR3 MC ECC handler"
+	depends on ARCH_KEYSTONE
+	help
+	  Support for double bit error detection by DDR3 Memory
+	  controller. This is a simple handler that can panic on double
+	  bit error.
+
 endif # EDAC
diff --git a/drivers/edac/Makefile b/drivers/edac/Makefile
index da117ee..1783748 100644
--- a/drivers/edac/Makefile
+++ b/drivers/edac/Makefile
@@ -72,3 +72,4 @@ obj-$(CONFIG_EDAC_OCTEON_PCI)		+= octeon_edac-pci.o
 obj-$(CONFIG_EDAC_ALTERA)		+= altera_edac.o
 obj-$(CONFIG_EDAC_SYNOPSYS)		+= synopsys_edac.o
 obj-$(CONFIG_EDAC_XGENE)		+= xgene_edac.o
+obj-$(CONFIG_EDAC_KEYSTONE_MC)		+= keystone_mc_edac.o
diff --git a/drivers/edac/keystone_mc_edac.c b/drivers/edac/keystone_mc_edac.c
new file mode 100644
index 0000000..144fee8
--- /dev/null
+++ b/drivers/edac/keystone_mc_edac.c
@@ -0,0 +1,167 @@
+/*
+ * Copyright (C) 2016 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * Keystone DDR3 MC ECC error detection driver
+ *
+ * TODO: Need to investgiate how to hook this to the edac core driver.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/interrupt.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/module.h>
+
+/* DDR3 controller registers */
+#define DDR3_EOI			0x0A0
+#define DDR3_IRQ_STATUS_RAW_SYS		0x0A4
+#define DDR3_IRQ_STATUS_SYS		0x0AC
+#define DDR3_IRQ_ENABLE_SET_SYS		0x0B4
+#define DDR3_IRQ_ENABLE_CLR_SYS		0x0BC
+#define DDR3_ECC_CTRL			0x110
+#define DDR3_ONE_BIT_ECC_ERR_CNT	0x130
+#define TWO_BIT_ECC_ERR_ADDR_LOG	0x140
+
+#define DDR3_1B_ECC_ERR			BIT(5)
+#define DDR3_2B_ECC_ERR			BIT(4)
+#define DDR3_WR_ECC_ERR			BIT(3)
+#define DDR3_SYS_ERR			BIT(0)
+/* Bit 31 enables ECC and 28 enables RMW */
+#define ECC_ENABLED			(BIT(31) | BIT(28))
+
+static void ks2_mc_ddr3_ecc_check(void __iomem *reg)
+{
+	u32 irq_status;
+
+	irq_status = readl(reg + DDR3_IRQ_STATUS_SYS);
+	if ((irq_status & DDR3_2B_ECC_ERR) ||
+	    (irq_status & DDR3_WR_ECC_ERR)) {
+		/*
+		 * Do a kernel panic as this is double bit ECC error
+		 * or ECC write that are fatal
+		 */
+		if (irq_status & DDR3_2B_ECC_ERR)
+			panic("UC DDR3 ECC err, irq stats 0x%x, addr 0x%x..\n",
+			      irq_status,
+			      readl(reg + TWO_BIT_ECC_ERR_ADDR_LOG));
+		else
+			panic("UC DDR3 ECC err, irq stats 0x%x..\n",
+			      irq_status);
+	}
+}
+
+static irqreturn_t ks2_mc_ddr3_ecc_isr(int irq, void *reg_virt)
+{
+	void __iomem *reg = (void __iomem *)reg_virt;
+
+	ks2_mc_ddr3_ecc_check(reg);
+
+	/*
+	 * Other errors should be handled by hardware
+	 * So, nothing to do here. For now it never reaches here
+	 * as panic will be triggerred for ECC errors
+	 */
+	return IRQ_HANDLED;
+}
+
+static const struct of_device_id ks2_mc_ddr3_ecc_of_match[] = {
+	{.compatible = "ti,keystone-ddr3-mc-edac", },
+	{},
+};
+
+static int ks2_mc_ddr3_ecc_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	int error_irq = 0, ret = -ENODEV;
+	struct device *dev = &pdev->dev;
+	struct resource res;
+	void __iomem *reg;
+	u32 val;
+
+	if (of_address_to_resource(np, 0, &res) < 0) {
+		dev_err(dev, "no edac resource address\n");
+		return ret;
+	}
+
+	reg = devm_ioremap_resource(dev, &res);
+	if (IS_ERR(reg)) {
+		dev_err(dev,
+			"DDR3 controller regs not defined\n");
+		return PTR_ERR(reg);
+	}
+
+	/* Check if ECC is enabled. If not, just return */
+	val = readl(reg + DDR3_ECC_CTRL);
+	if (!(val & ECC_ENABLED)) {
+		dev_info(&pdev->dev, "ECC is not enabled, disable edac\n");
+		return ret;
+	}
+
+	/* disable and clear unused ECC interrupts */
+	writel(DDR3_1B_ECC_ERR | DDR3_SYS_ERR, reg + DDR3_IRQ_ENABLE_CLR_SYS);
+	writel(DDR3_1B_ECC_ERR | DDR3_SYS_ERR, reg + DDR3_IRQ_STATUS_SYS);
+
+	/* check if we already have unrecoverable errors */
+	ks2_mc_ddr3_ecc_check(reg);
+
+	writel(DDR3_2B_ECC_ERR | DDR3_WR_ECC_ERR,
+	       reg + DDR3_IRQ_ENABLE_CLR_SYS);
+
+	/* add DDR3 ECC error handler */
+	error_irq = platform_get_irq(pdev, 0);
+	if (!error_irq) {
+		dev_err(&pdev->dev,
+			"DDR3 ECC irq number not defined\n");
+		return ret;
+	}
+
+	ret = devm_request_irq(dev, error_irq, ks2_mc_ddr3_ecc_isr, 0,
+			       "ddr3-ecc-err-irq", (void *)reg);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"request_irq fail for DDR3 ECC error irq\n");
+		return ret;
+	}
+
+	writel(DDR3_2B_ECC_ERR | DDR3_WR_ECC_ERR,
+	       reg + DDR3_IRQ_ENABLE_SET_SYS);
+
+	return ret;
+}
+
+static struct platform_driver ks2_mc_ddr3_ecc_driver = {
+	.probe = ks2_mc_ddr3_ecc_probe,
+	.driver = {
+		   .name = "ks2_mc_ddr3_ecc",
+		   .of_match_table = ks2_mc_ddr3_ecc_of_match,
+	},
+};
+
+static int __init ks2_mc_ddr3_ecc_init(void)
+{
+	int ret = 0;
+
+	ret = platform_driver_register(&ks2_mc_ddr3_ecc_driver);
+	if (ret)
+		pr_warn("keystone DDR3 DDR3 ecc_init failed\n");
+
+	return ret;
+}
+subsys_initcall(ks2_mc_ddr3_ecc_init);
+
+MODULE_AUTHOR("Texas Instruments Inc.");
+MODULE_DESCRIPTION("EDAC Driver for Keystone DDR3 MC");
+MODULE_LICENSE("GPL v2");
-- 
1.7.5.4

