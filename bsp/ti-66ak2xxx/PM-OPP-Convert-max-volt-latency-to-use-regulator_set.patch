From 5526a7b2f0e717c9177d87d22e9e57bc3623f9bc Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Fri, 6 May 2016 10:54:28 -0500
Subject: [PATCH 323/347] PM / OPP: Convert max volt latency to use
 regulator_set_voltage_time_triplet

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Currently dev_pm_opp_get_max_volt_latency uses
regulator_set_voltage_time to calculate voltage latency but this may not
always be able to match an exact supported voltage from the regulator in
use to that which was requested by the OPP. Instead, let's use
regulator_set_voltage_time_triplet which accepts a range and is more
likely to find a supported voltage just as the regulator framework does
when actually setting the voltage to prevent the latency calculation
from failing when no exact match is found.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit c901d9aae0fa7100bb81e08a09e47bb592165588)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/base/power/opp/core.c |   34 +++++++++++++++++++++++++++-------
 1 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/drivers/base/power/opp/core.c b/drivers/base/power/opp/core.c
index 94b33ce..192007f 100644
--- a/drivers/base/power/opp/core.c
+++ b/drivers/base/power/opp/core.c
@@ -221,10 +221,11 @@ EXPORT_SYMBOL_GPL(dev_pm_opp_get_max_clock_latency);
 unsigned long dev_pm_opp_get_max_volt_latency(struct device *dev)
 {
 	struct opp_table *opp_table;
-	struct dev_pm_opp *opp;
+	struct dev_pm_opp *opp, *min_opp = NULL, *max_opp = NULL;
 	struct regulator *reg;
 	unsigned long latency_ns = 0;
-	unsigned long min_uV = ~0, max_uV = 0;
+	unsigned long old_min_uV, old_uV, old_max_uV;
+	unsigned long new_min_uV, new_uV, new_max_uV;
 	int ret;
 
 	rcu_read_lock();
@@ -246,19 +247,38 @@ unsigned long dev_pm_opp_get_max_volt_latency(struct device *dev)
 		if (!opp->available)
 			continue;
 
-		if (opp->u_volt_min < min_uV)
-			min_uV = opp->u_volt_min;
-		if (opp->u_volt_max > max_uV)
-			max_uV = opp->u_volt_max;
+		if (!min_opp || opp->u_volt_min < min_opp->u_volt_min)
+			min_opp = opp;
+		if (!max_opp || opp->u_volt_max > max_opp->u_volt_max)
+			max_opp = opp;
+	}
+
+	if (!min_opp || !max_opp) {
+		rcu_read_unlock();
+		return 0;
 	}
 
+	old_min_uV = min_opp->u_volt_min;
+	old_uV = min_opp->u_volt;
+	old_max_uV = min_opp->u_volt_max;
+
+	new_min_uV = max_opp->u_volt_min;
+	new_uV = max_opp->u_volt;
+	new_max_uV = max_opp->u_volt_max;
+
 	rcu_read_unlock();
 
 	/*
 	 * The caller needs to ensure that opp_table (and hence the regulator)
 	 * isn't freed, while we are executing this routine.
 	 */
-	ret = regulator_set_voltage_time(reg, min_uV, max_uV);
+	ret = regulator_set_voltage_time_triplet(reg, old_uV,
+						 old_min_uV,
+						 old_max_uV,
+						 new_uV,
+						 new_min_uV,
+						 new_max_uV);
+
 	if (ret > 0)
 		latency_ns = ret * 1000;
 
-- 
1.7.5.4

