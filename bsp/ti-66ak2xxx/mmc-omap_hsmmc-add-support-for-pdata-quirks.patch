From 963f6aa1ead07201349cf649134b16637c69241b Mon Sep 17 00:00:00 2001
From: Sekhar Nori <nsekhar@ti.com>
Date: Tue, 2 Feb 2016 17:28:30 +0530
Subject: [PATCH 132/347] mmc: omap_hsmmc: add support for pdata quirks

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Add support for driver to recognize pdata quirks
passed from platform to override certain DT information.

Silicon revision 1.1 and 1.0 of DRA7x silicon have
limitations w.r.t speed at which the MMC/SD interface
can operate (see errata i843).

This errata is fixed on silicon revision 2.0. Also,
silicon revision 2.0 comes with a different set of
IOdelay numbers than earlier silicon version.

Use the max_freq from platform data to limit the
maximum speed of the interface. The driver can now
handle multiple versions of IOdelay data through
a "version" tag to the pinctrl name.

Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit 8032e240b1c6d4e4a8d6d31a0f2c61acbd465f54)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/mmc/host/omap_hsmmc.c            |   67 +++++++++++++++++-------------
 include/linux/platform_data/hsmmc-omap.h |    3 +
 2 files changed, 41 insertions(+), 29 deletions(-)

diff --git a/drivers/mmc/host/omap_hsmmc.c b/drivers/mmc/host/omap_hsmmc.c
index bd74091..d68a1a9 100644
--- a/drivers/mmc/host/omap_hsmmc.c
+++ b/drivers/mmc/host/omap_hsmmc.c
@@ -2358,16 +2358,15 @@ MODULE_DEVICE_TABLE(of, omap_mmc_of_match);
 
 static struct omap_hsmmc_platform_data *of_get_hsmmc_pdata(struct device *dev)
 {
-	struct omap_hsmmc_platform_data *pdata, *legacy;
+	struct omap_hsmmc_platform_data *pdata = dev->platform_data;
 	struct device_node *np = dev->of_node;
 
-	pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
-	if (!pdata)
-		return ERR_PTR(-ENOMEM); /* out of memory */
-
-	legacy = dev_get_platdata(dev);
-	if (legacy && legacy->name)
-		pdata->name = legacy->name;
+	/* no pdata quirks! */
+	if (!pdata) {
+		pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
+		if (!pdata)
+			return ERR_PTR(-ENOMEM); /* out of memory */
+	}
 
 	if (of_find_property(np, "ti,dual-volt", NULL))
 		pdata->controller_flags |= OMAP_HSMMC_SUPPORTS_DUAL_VOLT;
@@ -2397,26 +2396,33 @@ static inline struct omap_hsmmc_platform_data
 }
 #endif
 
-static struct pinctrl_state *
-omap_hsmmc_pinctrl_lookup_state(struct omap_hsmmc_host *host, char *mode)
-{
-	struct pinctrl_state *state;
-
-	state = pinctrl_lookup_state(host->pinctrl, mode);
-	if (IS_ERR(state))
-		dev_err(mmc_dev(host->mmc),
-			"no pinctrl state for %s mode\n", mode);
-	return state;
-}
-
-#define OMAP_HSMMC_SETUP_PINCTRL(capvar, capmask, pinctrl)		\
+#define OMAP_HSMMC_SETUP_PINCTRL(capvar, capmask, mode)			\
 	do {								\
-		if (mmc->capvar & (capmask)) {				\
-			host->pinctrl##_pinctrl_state =			\
-				omap_hsmmc_pinctrl_lookup_state(host, #pinctrl);\
-			if (IS_ERR(host->pinctrl##_pinctrl_state))	\
-				mmc->capvar &= ~(capmask);		\
+		struct pinctrl_state *s = ERR_PTR(-ENODEV);		\
+		char str[20];						\
+		char *version = host->pdata->version;			\
+									\
+		if (!(mmc->capvar & (capmask)))				\
+			break;						\
+									\
+		if (host->pdata->version) {				\
+			sprintf(str, "%s-%s", #mode, version);		\
+			s = pinctrl_lookup_state(host->pinctrl, str);	\
+		}							\
+									\
+		if (IS_ERR(s)) {					\
+			sprintf(str, "%s", #mode);			\
+			s = pinctrl_lookup_state(host->pinctrl, str);	\
+		}							\
+									\
+		if (IS_ERR(s)) {					\
+			dev_err(host->dev, "no pinctrl state for %s "	\
+				"mode\n", #mode);			\
+			mmc->capvar &= ~(capmask);			\
+		} else {						\
+			host->mode##_pinctrl_state = s;			\
 		}							\
+									\
 	} while (0)
 
 static int omap_hsmmc_get_iodelay_pinctrl_state(struct omap_hsmmc_host *host)
@@ -2432,10 +2438,13 @@ static int omap_hsmmc_get_iodelay_pinctrl_state(struct omap_hsmmc_host *host)
 		return PTR_ERR(host->pinctrl);
 	}
 
-	host->default_pinctrl_state = omap_hsmmc_pinctrl_lookup_state(host,
-								     "default");
-	if (IS_ERR(host->default_pinctrl_state))
+	host->default_pinctrl_state = pinctrl_lookup_state(host->pinctrl,
+							   "default");
+	if (IS_ERR(host->default_pinctrl_state)) {
+		dev_err(host->dev,
+			"no pinctrl state for default mode\n");
 		return PTR_ERR(host->default_pinctrl_state);
+	}
 
 	OMAP_HSMMC_SETUP_PINCTRL(caps,	MMC_CAP_UHS_SDR104,	sdr104);
 	OMAP_HSMMC_SETUP_PINCTRL(caps,	MMC_CAP_UHS_DDR50,	ddr50);
diff --git a/include/linux/platform_data/hsmmc-omap.h b/include/linux/platform_data/hsmmc-omap.h
index 21832a3..8e77185 100644
--- a/include/linux/platform_data/hsmmc-omap.h
+++ b/include/linux/platform_data/hsmmc-omap.h
@@ -71,6 +71,9 @@ struct omap_hsmmc_platform_data {
 #define HSMMC_HAS_HSPE_SUPPORT	(1 << 2)
 	unsigned features;
 
+	/* string specifying a particular variant of hardware */
+	char *version;
+
 	int gpio_cd;			/* gpio (card detect) */
 	int gpio_cod;			/* gpio (cover detect) */
 	int gpio_wp;			/* gpio (write protect) */
-- 
1.7.5.4

