From fd0c83cc2820e58c9587a70dc1a003d81dc7212c Mon Sep 17 00:00:00 2001
From: Sekhar Nori <nsekhar@ti.com>
Date: Tue, 29 Mar 2016 19:59:07 +0530
Subject: [PATCH 151/347] serial: 8250: Add special initialization for
 Keystone 2 UART

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

The UART IP within TI's Keystone 2 SOCs are 16550 compatible. However,
Keystone 2 devices also have a couple additional nonstandard UART
registers.

The UART Power Emulation and Management register must be written to for the
particular UART to be enabled. UART0 doesn't have this issue since this the
ROM or U-boot already handles this step. For other UARTs, writing to this
register is needed by the driver otherwise it won't work.

Create a new driver that will export a function that will be used by the
8250 core driver.

Signed-off-by: Sekhar Nori <nsekhar@ti.com>
[fcooper@ti.com: Slightly moved function calls around]
Signed-off-by: Franklin S Cooper Jr <fcooper@ti.com>
Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>

(cherry picked from commit 88ac1b12a18783aeb926d968d8a5f56ac0ab0493)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/serial/keystone-uart.txt   |   23 ++++++++
 drivers/tty/serial/8250/8250_keystone.c            |   57 ++++++++++++++++++++
 drivers/tty/serial/8250/Kconfig                    |    8 +++
 drivers/tty/serial/8250/Makefile                   |    1 +
 include/linux/serial_8250.h                        |    1 +
 5 files changed, 90 insertions(+), 0 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/serial/keystone-uart.txt
 create mode 100644 drivers/tty/serial/8250/8250_keystone.c

diff --git a/Documentation/devicetree/bindings/serial/keystone-uart.txt b/Documentation/devicetree/bindings/serial/keystone-uart.txt
new file mode 100644
index 0000000..1339454
--- /dev/null
+++ b/Documentation/devicetree/bindings/serial/keystone-uart.txt
@@ -0,0 +1,23 @@
+Keystone UART controller
+
+Required properties:
+- compatible : should be "ti,keystone-uart" for K2G, K2E, K2L and K2HL
+               controllers
+
+See Documentation/devicetree/bindings/serial/8250.txt for other required
+and optional properties.
+
+Example:
+
+	uart1: serial@02531000 {
+		compatible = "ti,keystone-uart", "ns16550a";
+		current-speed = <115200>;
+		reg-shift = <2>;
+		reg-io-width = <4>;
+		reg = <0x02531000 0x100>;
+		interrupts = <GIC_SPI 165 IRQ_TYPE_EDGE_RISING>;
+		status = "disabled";
+		power-domains = <&k2g_pds K2G_DEV_UART1>;
+		clocks = <&k2g_clks K2G_DEV_UART1 0>;
+		clock-names = "fck";
+	};
diff --git a/drivers/tty/serial/8250/8250_keystone.c b/drivers/tty/serial/8250/8250_keystone.c
new file mode 100644
index 0000000..3ab80ad
--- /dev/null
+++ b/drivers/tty/serial/8250/8250_keystone.c
@@ -0,0 +1,57 @@
+/*
+ * TI Keystone 16550 UART "driver"
+ *
+ * This isn't a full driver; it just provides for special initialization
+ * that keystone UARTs need. Everything else is just using the standard
+ * 8250 support.
+ *
+ * Copyright (C) 2016 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/of_platform.h>
+#include <linux/serial_8250.h>
+#include <linux/serial_reg.h>
+
+#include "8250.h"
+
+/*
+ * Texas Instruments Keystone registers
+ */
+#define UART_KEYSTONE_PWREMU		0x0c		/* Power and Emulation */
+
+/*
+ * Keystone PWREMU register definitions
+ */
+#define UART_KEYSTONE_PWREMU_FREE	(1 << 0)	/* Free-running enable */
+#define UART_KEYSTONE_PWREMU_URRST	(1 << 13)	/* Receiver reset and enable */
+#define UART_KEYSTONE_PWREMU_UTRST	(1 << 14)	/* Transmitter reset and enable */
+
+int keystone_serial8250_init(struct uart_port *port)
+{
+	unsigned long flags;
+
+	if (!of_device_is_compatible(port->dev->of_node, "ti,keystone-uart"))
+		return 0;
+
+	spin_lock_irqsave(&port->lock, flags);
+
+	serial_port_out(port, UART_KEYSTONE_PWREMU,
+			 UART_KEYSTONE_PWREMU_FREE  |
+			 UART_KEYSTONE_PWREMU_URRST |
+			 UART_KEYSTONE_PWREMU_UTRST);
+
+	spin_unlock_irqrestore(&port->lock, flags);
+
+	return 0;
+}
+EXPORT_SYMBOL(keystone_serial8250_init);
diff --git a/drivers/tty/serial/8250/Kconfig b/drivers/tty/serial/8250/Kconfig
index 7c6f7af..50c5765 100644
--- a/drivers/tty/serial/8250/Kconfig
+++ b/drivers/tty/serial/8250/Kconfig
@@ -433,3 +433,11 @@ config SERIAL_OF_PLATFORM
 	  are probed through devicetree, including Open Firmware based
 	  PowerPC systems and embedded systems on architectures using the
 	  flattened device tree format.
+
+config SERIAL_8250_KEYSTONE
+	bool "TI Keystone serial port support"
+	depends on SERIAL_8250 && ARCH_KEYSTONE
+	default y
+	help
+	  If you have a TI Keystone based board and want to use the
+	  serial port, say Y to this option. If unsure, say N.
diff --git a/drivers/tty/serial/8250/Makefile b/drivers/tty/serial/8250/Makefile
index 367d403..8d89fee 100644
--- a/drivers/tty/serial/8250/Makefile
+++ b/drivers/tty/serial/8250/Makefile
@@ -31,5 +31,6 @@ obj-$(CONFIG_SERIAL_8250_INGENIC)	+= 8250_ingenic.o
 obj-$(CONFIG_SERIAL_8250_MID)		+= 8250_mid.o
 obj-$(CONFIG_SERIAL_8250_MOXA)		+= 8250_moxa.o
 obj-$(CONFIG_SERIAL_OF_PLATFORM)	+= 8250_of.o
+obj-$(CONFIG_SERIAL_8250_KEYSTONE)	+= 8250_keystone.o
 
 CFLAGS_8250_ingenic.o += -I$(srctree)/scripts/dtc/libfdt
diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 48ec765..ba8136f 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -150,6 +150,7 @@ extern int early_serial8250_setup(struct earlycon_device *device,
 extern void serial8250_do_set_termios(struct uart_port *port,
 		struct ktermios *termios, struct ktermios *old);
 extern unsigned int serial8250_do_get_mctrl(struct uart_port *port);
+extern int keystone_serial8250_init(struct uart_port *port);
 extern int serial8250_do_startup(struct uart_port *port);
 extern void serial8250_do_shutdown(struct uart_port *port);
 extern void serial8250_do_pm(struct uart_port *port, unsigned int state,
-- 
1.7.5.4

