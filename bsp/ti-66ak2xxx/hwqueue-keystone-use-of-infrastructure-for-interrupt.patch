From 3dd12cb3f22dbb737680910cafee2c7e8fcf3d7f Mon Sep 17 00:00:00 2001
From: Cyril Chemparathy <cyril@ti.com>
Date: Fri, 7 Dec 2012 14:13:38 -0500
Subject: [PATCH 084/256] hwqueue: keystone: use of infrastructure for
 interrupts (cherry picked from commit
 edebe5122ead2fad488bc7abeff75e3a59837461)

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue.c |   26 ++++++++++++++++----------
 drivers/hwqueue/keystone_hwqueue.h |    5 ++++-
 2 files changed, 20 insertions(+), 11 deletions(-)

diff --git a/drivers/hwqueue/keystone_hwqueue.c b/drivers/hwqueue/keystone_hwqueue.c
index e9a261c..3227255 100644
--- a/drivers/hwqueue/keystone_hwqueue.c
+++ b/drivers/hwqueue/keystone_hwqueue.c
@@ -26,6 +26,7 @@
 #include <linux/platform_device.h>
 #include <linux/dma-mapping.h>
 #include <linux/of.h>
+#include <linux/of_irq.h>
 #include <linux/of_device.h>
 #include <linux/of_address.h>
 #include <linux/firmware.h>
@@ -112,9 +113,9 @@ static void khwq_set_notify(struct hwqueue_instance *inst, bool enabled)
 	} else if (range->flags & RANGE_HAS_IRQ) {
 		queue = hwqueue_inst_to_id(inst) - range->queue_base;
 		if (enabled)
-			enable_irq(range->irq_base + queue);
+			enable_irq(range->irqs[queue]);
 		else
-			disable_irq_nosync(range->irq_base + queue);
+			disable_irq_nosync(range->irqs[queue]);
 	} else
 		hwqueue_set_poll(inst, enabled);
 }
@@ -127,7 +128,7 @@ static int khwq_setup_irq(struct khwq_range_info *range,
 	int ret = 0, irq;
 
 	if (range->flags & RANGE_HAS_IRQ) {
-		irq = range->irq_base + queue;
+		irq = range->irqs[queue];
 
 		ret = request_irq(irq, khwq_int_handler, 0, kq->irq_name, inst);
 		if (ret >= 0)
@@ -145,7 +146,7 @@ static void khwq_free_irq(struct hwqueue_instance *inst)
 	int irq;
 
 	if (range->flags & RANGE_HAS_IRQ) {
-		irq = range->irq_base + id;
+		irq = range->irqs[id];
 		free_irq(irq, inst);
 	}
 }
@@ -682,7 +683,7 @@ static int khwq_setup_queue_range(struct khwq_device *kdev,
 	struct khwq_range_info *range;
 	struct khwq_qmgr_info *qmgr;
 	u32 temp[2], start, end, id, index;
-	int ret;
+	int ret, i;
 
 	range = devm_kzalloc(dev, sizeof(*range), GFP_KERNEL);
 	if (!range) {
@@ -703,8 +704,14 @@ static int khwq_setup_queue_range(struct khwq_device *kdev,
 		return -EINVAL;
 	}
 
-	ret = of_property_read_u32(node, "irq-base", &range->irq_base);
-	if (ret >= 0)
+	for (i = 0; i < RANGE_MAX_IRQS; i++) {
+		range->irqs[i] = irq_of_parse_and_map(node, i);
+		if (range->irqs[i] == IRQ_NONE)
+			break;
+		range->num_irqs++;
+	}
+	range->num_irqs = min(range->num_irqs, range->num_queues);
+	if (range->num_irqs)
 		range->flags |= RANGE_HAS_IRQ;
 
 	if (of_get_property(node, "reserved", NULL))
@@ -741,11 +748,10 @@ static int khwq_setup_queue_range(struct khwq_device *kdev,
 
 	list_add_tail(&range->list, &kdev->queue_ranges);
 
-	dev_dbg(dev, "added range %s: %d-%d, irqs %d-%d%s%s%s\n",
+	dev_dbg(dev, "added range %s: %d-%d, %d irqs%s%s%s\n",
 		range->name, range->queue_base,
 		range->queue_base + range->num_queues - 1,
-		range->irq_base,
-		range->irq_base + range->num_queues - 1,
+		range->num_irqs,
 		(range->flags & RANGE_HAS_IRQ) ? ", has irq" : "",
 		(range->flags & RANGE_RESERVED) ? ", reserved" : "",
 		(range->flags & RANGE_HAS_ACCUMULATOR) ? ", acc" : "");
diff --git a/drivers/hwqueue/keystone_hwqueue.h b/drivers/hwqueue/keystone_hwqueue.h
index dddc3ec..c1dedaa 100644
--- a/drivers/hwqueue/keystone_hwqueue.h
+++ b/drivers/hwqueue/keystone_hwqueue.h
@@ -52,6 +52,8 @@
 #define ACC_INTD_OFFSET_COUNT(ch)	(0x0300 + 4 * (ch))
 #define ACC_INTD_OFFSET_STATUS(ch)	(0x0200 + 4 * ((ch) / 32))
 
+#define RANGE_MAX_IRQS			64
+
 enum khwq_acc_result {
 	ACC_RET_IDLE,
 	ACC_RET_SUCCESS,
@@ -179,7 +181,6 @@ struct khwq_range_info {
 	struct khwq_device	*kdev;
 	unsigned		 queue_base;
 	unsigned		 num_queues;
-	unsigned		 irq_base;
 	unsigned		 flags;
 	struct list_head	 list;
 	struct khwq_range_ops	*ops;
@@ -187,6 +188,8 @@ struct khwq_range_info {
 	struct khwq_acc_info	 acc_info;
 	struct khwq_acc_channel	*acc;
 	struct khwq_qos_info	*qos_info;
+	unsigned		 num_irqs;
+	int			 irqs[RANGE_MAX_IRQS];
 };
 
 struct khwq_range_ops {
-- 
1.7.5.4

