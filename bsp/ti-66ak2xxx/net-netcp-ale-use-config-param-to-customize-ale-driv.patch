From 136c7e72a0cf993d44e5493922d6f64f9c8d7fb4 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Wed, 4 May 2016 11:08:16 -0400
Subject: [PATCH 166/347] net: netcp: ale: use config param to customize ale
 driver for NU switch

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Current assumption that ALE major version 1.4 is unique to NU Switch
used in NetCP ethss is wrong. Rev 1.4 is used in other TI SoCs as well.
So use a configuration parameter, nu_switch_ale, to customize the
driver for nu switch specific handling such as the ale table bits
difference, separate unknown vlan registers etc.

While at it, also fix the comments to reflect the same. Also change
the debug print to info print so that ALE version gets displayed in
boot log.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
[nsekhar@ti.com: commit message updates]
Signed-off-by: Sekhar Nori <nsekhar@ti.com>

(cherry picked from commit 10c2330de99e2ddcea58312230ff5ef35ce1a056)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/ti/cpsw_ale.c    |   23 +++++++++--------------
 drivers/net/ethernet/ti/cpsw_ale.h    |    9 +++++++++
 drivers/net/ethernet/ti/netcp_ethss.c |    4 +++-
 3 files changed, 21 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/ti/cpsw_ale.c b/drivers/net/ethernet/ti/cpsw_ale.c
index 4724e9d..e15db39 100644
--- a/drivers/net/ethernet/ti/cpsw_ale.c
+++ b/drivers/net/ethernet/ti/cpsw_ale.c
@@ -40,7 +40,7 @@
 #define ALE_TABLE		0x34
 #define ALE_PORTCTL		0x40
 
-/* ALE Rev 1.4 (NU switch) Specific Registers */
+/* ALE NetCP NU switch specific Registers */
 #define ALE_UNKNOWNVLAN_MEMBER			0x90
 #define ALE_UNKNOWNVLAN_UNREG_MCAST_FLOOD	0x94
 #define ALE_UNKNOWNVLAN_REG_MCAST_FLOOD		0x98
@@ -736,15 +736,14 @@ void cpsw_ale_start(struct cpsw_ale *ale)
 	ale->version =
 		(ALE_VERSION_MAJOR(rev, ale->params.major_ver_mask) << 8) |
 		 ALE_VERSION_MINOR(rev);
-	dev_dbg(ale->params.dev, "initialized cpsw ale version %d.%d\n",
-		ALE_VERSION_MAJOR(rev, ale->params.major_ver_mask),
-		ALE_VERSION_MINOR(rev));
-
-	switch (ale->version) {
-	case ALE_VERSION_1R4:
-		/* Separate registers for unknown vlan configuration. Also
-		 * there are N bits, where N is number of ale ports and
-		 * shift value should be 0
+	dev_info(ale->params.dev, "initialized cpsw ale version %d.%d\n",
+		 ALE_VERSION_MAJOR(rev, ale->params.major_ver_mask),
+		 ALE_VERSION_MINOR(rev));
+
+	if (ale->params.nu_switch_ale) {
+		/* Separate registers for unknown vlan configuration.
+		 * Also there are N bits, where N is number of ale
+		 * ports and shift value should be 0
 		 */
 		ale_controls[ALE_PORT_UNKNOWN_VLAN_MEMBER].bits =
 					ale->params.ale_ports;
@@ -765,10 +764,6 @@ void cpsw_ale_start(struct cpsw_ale *ale)
 		ale_controls[ALE_PORT_UNTAGGED_EGRESS].shift = 0;
 		ale_controls[ALE_PORT_UNTAGGED_EGRESS].offset =
 					ALE_UNKNOWNVLAN_FORCE_UNTAG_EGRESS;
-		break;
-		/* Do nothing */
-	default:
-		break;
 	}
 
 	cpsw_ale_control_set(ale, 0, ALE_ENABLE, 1);
diff --git a/drivers/net/ethernet/ti/cpsw_ale.h b/drivers/net/ethernet/ti/cpsw_ale.h
index b9d4c3f..b1c7954 100644
--- a/drivers/net/ethernet/ti/cpsw_ale.h
+++ b/drivers/net/ethernet/ti/cpsw_ale.h
@@ -21,6 +21,15 @@ struct cpsw_ale_params {
 	unsigned long		ale_ageout;	/* in secs */
 	unsigned long		ale_entries;
 	unsigned long		ale_ports;
+	/* NU Switch has specific handling as number of bits in ALE entries
+	 * are different than other versions of ALE. Also there are specific
+	 * registers for unknown vlan specific fields. So use nu_switch_ale
+	 * to identify this hardware.
+	 */
+	bool			nu_switch_ale;
+	/* mask bit used in NU Switch ALE is 3 bits instead of 8 bits. So
+	 * pass it from caller.
+	 */
 	u32			major_ver_mask;
 };
 
diff --git a/drivers/net/ethernet/ti/netcp_ethss.c b/drivers/net/ethernet/ti/netcp_ethss.c
index 1720713..55188c6 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.c
+++ b/drivers/net/ethernet/ti/netcp_ethss.c
@@ -3363,8 +3363,10 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 	ale_params.ale_ageout	= GBE_DEFAULT_ALE_AGEOUT;
 	ale_params.ale_entries	= gbe_dev->ale_entries;
 	ale_params.ale_ports	= gbe_dev->ale_ports;
-	if (IS_SS_ID_MU(gbe_dev))
+	if (IS_SS_ID_MU(gbe_dev)) {
 		ale_params.major_ver_mask = 0x7;
+		ale_params.nu_switch_ale = true;
+	}
 	gbe_dev->ale = cpsw_ale_create(&ale_params);
 	if (!gbe_dev->ale) {
 		dev_err(gbe_dev->dev, "error initializing ale engine\n");
-- 
1.7.5.4

