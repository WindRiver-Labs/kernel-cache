From 21cb25e593e4f56eabdbffa70501a9d20e4d1e5b Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Fri, 11 Mar 2016 02:38:51 +0000
Subject: [PATCH 028/347] net: keystone: add support of keystone common serdes
 phy driver for gbe

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Prior to this patch, gbe inherits the SerDes configurations from
u-boot.  This patch updates the Keystone ethernet driver to use the
generic Keystone serdes phy driver for serdes initialization
and configuration.  The common serdes phy driver supports peripherals
on Keystone platforms that require serdes.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit 73a02e032d71db2e379ec51d7eaeb8edfe9f8dd4)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/net/keystone-netcp.txt     |   37 ++++++++++++++++++++
 drivers/net/ethernet/ti/netcp_ethss.c              |   37 ++++++++++++++++++-
 2 files changed, 72 insertions(+), 2 deletions(-)

diff --git a/Documentation/devicetree/bindings/net/keystone-netcp.txt b/Documentation/devicetree/bindings/net/keystone-netcp.txt
index 6e4bfac..d9339cf 100644
--- a/Documentation/devicetree/bindings/net/keystone-netcp.txt
+++ b/Documentation/devicetree/bindings/net/keystone-netcp.txt
@@ -115,6 +115,10 @@ Optional properties:
 				will only initialize these ports and attach PHY
 				driver to them if needed.
 
+- phys:		phandles to serdes devices
+		see Documentation/devicetree/bindings/phy/ti-phy.txt
+		for Keystone SerDes device specificcations.
+
 NetCP interface properties: Interface specification for NetCP sub-modules.
 Required properties:
 - rx-channel:	the navigator packet dma channel name for rx.
@@ -152,6 +156,38 @@ gbe_subsys: subsys@2090000 {
 	reg = <0x02090000 0x100>;
 };
 
+gbe_serdes: phy@232a000 {
+	status			= "ok";
+	#phy-cells		= <0>;
+	compatible		= "ti,keystone-serdes-gbe";
+	reg			= <0x0232a000 0x2000>;
+	link-rate-kbps		= <1250000>;
+	num-lanes		= <4>;
+	/*rx-force-enable;*/
+	lanes {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		lane@0 {
+			/*loopback;*/
+			reg		= <0>;
+			control-rate	= <2>; /* quart */
+			rx-start	= <7 5>;
+			rx-force	= <1 1>;
+			tx-coeff	= <0 0 0 12 4>;
+			       /* c1 c2 cm att vreg */
+		};
+		lane@1 {
+			/*loopback;*/
+			reg		= <1>;
+			control-rate	= <2>; /* quart */
+			rx-start	= <7 5>;
+			rx-force	= <1 1>;
+			tx-coeff	= <0 0 0 12 4>;
+			       /* c1 c2 cm att vreg */
+		};
+	};
+};
+
 netcp: netcp@2000000 {
 	reg = <0x2620110 0x8>;
 	reg-names = "efuse";
@@ -175,6 +211,7 @@ netcp: netcp@2000000 {
 			/* enable-ale; */
 			tx-queue = <648>;
 			tx-channel = <8>;
+			phys = <&gbe_serdes>;
 
 			interfaces {
 				gbe0: interface-0 {
diff --git a/drivers/net/ethernet/ti/netcp_ethss.c b/drivers/net/ethernet/ti/netcp_ethss.c
index 3eeed85..2985418 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.c
+++ b/drivers/net/ethernet/ti/netcp_ethss.c
@@ -26,6 +26,7 @@
 #include <linux/regmap.h>
 #include <linux/if_vlan.h>
 #include <linux/ethtool.h>
+#include <linux/phy/phy.h>
 
 #include "cpsw_ale.h"
 #include "netcp.h"
@@ -172,6 +173,7 @@
 
 #define HOST_TX_PRI_MAP_DEFAULT			0x00000000
 
+#define MAX_NUM_SERDES				2
 #define SGMII_MODULE_SIZE			0x100
 
 struct xgbe_ss_regs {
@@ -649,6 +651,7 @@ struct gbe_priv {
 	u8				max_num_slaves;
 	u8				max_num_ports; /* max_num_slaves + 1 */
 	u8				num_stats_mods;
+	u8				num_serdeses;
 	struct netcp_tx_pipe		tx_pipe;
 
 	int				host_port;
@@ -684,6 +687,7 @@ struct gbe_priv {
 	int				num_et_stats;
 	/*  Lock for updating the hwstats */
 	spinlock_t			hw_stats_lock;
+	struct phy			*serdes_phy[MAX_NUM_SERDES];
 };
 
 struct gbe_intf {
@@ -2723,6 +2727,8 @@ static int set_xgbe_ethss10_priv(struct gbe_priv *gbe_dev,
 	void __iomem *regs;
 	int ret, i;
 
+	gbe_dev->num_serdeses = 1;
+
 	gbe_dev->ss_regmap = syscon_regmap_lookup_by_phandle(node,
 							     "syscon-subsys");
 
@@ -2871,6 +2877,8 @@ static int set_gbe_ethss14_priv(struct gbe_priv *gbe_dev,
 	void __iomem *regs;
 	int i, ret;
 
+	gbe_dev->num_serdeses = 1;
+
 	if (gbe_dev->ss_regs) {
 		gbe_dev->sgmii_port_regs = gbe_dev->ss_regs +
 					   GBE13_SGMII_MODULE_OFFSET;
@@ -2988,6 +2996,7 @@ static int set_gbenu_ethss_priv(struct gbe_priv *gbe_dev,
 	void __iomem *regs;
 	int i, ret;
 
+	gbe_dev->num_serdeses = 2;
 	gbe_dev->num_stats_mods = gbe_dev->max_num_ports;
 	gbe_dev->et_stats = gbenu_et_stats;
 
@@ -3100,6 +3109,7 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 	struct device_node *secondary_ports;
 	struct cpsw_ale_params ale_params;
 	struct gbe_priv *gbe_dev;
+	struct phy *phy;
 	u32 slave_num;
 	int i, ret = 0;
 
@@ -3180,6 +3190,21 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 	if (ret)
 		return ret;
 
+	for (i = 0; i < gbe_dev->num_serdeses; i++) {
+		phy = devm_of_phy_get_by_index(dev, node, i);
+		if (IS_ERR(phy)) {
+			/* this one may be disabled, quietly skip */
+			dev_dbg(dev, "No %s serdes driver found: %ld\n",
+				node->name, PTR_ERR(phy));
+			continue;
+		}
+
+		gbe_dev->serdes_phy[i] = phy;
+		ret = phy_init(phy);
+		if (ret < 0)
+			goto exit_phys;
+	}
+
 	interfaces = of_get_child_by_name(node, "interfaces");
 	if (!interfaces)
 		dev_err(dev, "could not find interfaces\n");
@@ -3187,11 +3212,11 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 	ret = netcp_txpipe_init(&gbe_dev->tx_pipe, netcp_device,
 				gbe_dev->dma_chan_name, gbe_dev->tx_queue_id);
 	if (ret)
-		return ret;
+		goto exit_phys;
 
 	ret = netcp_txpipe_open(&gbe_dev->tx_pipe);
 	if (ret)
-		return ret;
+		goto exit_phys;
 
 	/* Create network interfaces */
 	INIT_LIST_HEAD(&gbe_dev->gbe_intf_head);
@@ -3261,10 +3286,14 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 	gbe_dev->timer.expires	 = jiffies + GBE_TIMER_INTERVAL;
 	add_timer(&gbe_dev->timer);
 	*inst_priv = gbe_dev;
+	dev_dbg(dev, "probed");
 	return 0;
 
 free_sec_ports:
 	free_secondary_ports(gbe_dev);
+exit_phys:
+	for (i = 0; i < gbe_dev->num_serdeses; i++)
+		phy_exit(gbe_dev->serdes_phy[i]);
 	return ret;
 }
 
@@ -3329,6 +3358,7 @@ static int gbe_release(void *intf_priv)
 static int gbe_remove(struct netcp_device *netcp_device, void *inst_priv)
 {
 	struct gbe_priv *gbe_dev = inst_priv;
+	int i;
 
 	del_timer_sync(&gbe_dev->timer);
 	cpsw_ale_stop(gbe_dev->ale);
@@ -3336,6 +3366,9 @@ static int gbe_remove(struct netcp_device *netcp_device, void *inst_priv)
 	netcp_txpipe_close(&gbe_dev->tx_pipe);
 	free_secondary_ports(gbe_dev);
 
+	for (i = 0; i < gbe_dev->num_serdeses; i++)
+		phy_exit(gbe_dev->serdes_phy[i]);
+
 	if (!list_empty(&gbe_dev->gbe_intf_head))
 		dev_alert(gbe_dev->dev,
 			  "unreleased ethss interfaces present\n");
-- 
1.7.5.4

