From decef85e667d057d0b0c7d284b5ee33e5dd01b49 Mon Sep 17 00:00:00 2001
From: "Reece R. Pollack" <x0183204@ti.com>
Date: Tue, 15 Jul 2014 16:54:39 -0400
Subject: [PATCH 108/256] hwqueue: keystone: Fix a bug in bounds-checking
 sysfs writes

In both qnode_output_rate_store() and qnode_burst_size_store() it's
possible for an invalid value to be detected after it's been stored
into the qnode field. This does not result in the PDSP being updated,
but it makes the display of the attributes wrong. This patch fixes
this.

Signed-off-by: Reece R. Pollack <x0183204@ti.com>
(cherry picked from commit 84ca6b0ed1b395f5e87536d619bdad737a587afa)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue_qos.c |   23 +++++++++++++++--------
 1 files changed, 15 insertions(+), 8 deletions(-)

diff --git a/drivers/hwqueue/keystone_hwqueue_qos.c b/drivers/hwqueue/keystone_hwqueue_qos.c
index 6db6052..de81885 100644
--- a/drivers/hwqueue/keystone_hwqueue_qos.c
+++ b/drivers/hwqueue/keystone_hwqueue_qos.c
@@ -1499,18 +1499,25 @@ static ssize_t qnode_output_rate_store(struct khwq_qos_tree_node *qnode,
 {
 	struct khwq_qos_info *info = qnode->info;
 	int idx = qnode->sched_port_idx;
-	int error, val;
+	int error, val, new_rate, shift;
+	unsigned long mask;
 
-	error = kstrtouint(buf, 0, &val);
+	error = kstrtouint(buf, 0, &new_rate);
 	if (error)
 		return error;
 	
-	qnode->output_rate = val;
-
-	val = qnode->output_rate / info->ticks_per_sec;
-	val <<= (qnode->acct == QOS_BYTE_ACCT) ?
+	shift = (qnode->acct == QOS_BYTE_ACCT) ?
 			QOS_CREDITS_BYTE_SHIFT :
 			QOS_CREDITS_PACKET_SHIFT;
+	mask = ~(BIT(BITS_PER_LONG - shift) - 1);
+
+	val = new_rate / info->ticks_per_sec;
+	if (((unsigned long)val & mask) != 0)
+		return -EINVAL;
+	val <<= shift;
+
+	qnode->output_rate = new_rate;
+
 	khwq_qos_set_sched_cir_credit(info, idx, val, true);
 
 	ktree_for_each_child(&qnode->node,
@@ -1541,8 +1548,6 @@ static ssize_t qnode_burst_size_store(struct khwq_qos_tree_node *qnode,
 	if (error)
 		return error;
 	
-	qnode->burst_size = field;
-
 	error = khwq_qos_get_sched_cir_credit(info, idx, &cir_credit);
 	if (error)
 		return error;
@@ -1553,6 +1558,8 @@ static ssize_t qnode_burst_size_store(struct khwq_qos_tree_node *qnode,
 	if (cir_max > (S32_MAX - cir_credit))
 		return -EINVAL;
 
+	qnode->burst_size = field;
+
 	khwq_qos_set_sched_cir_max(info, idx, (u32)cir_max, true);
 
 	return size;
-- 
1.7.5.4

