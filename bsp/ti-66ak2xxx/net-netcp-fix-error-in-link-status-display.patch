From ffacba9cb4a748402ec0a86ce861a4ca14db2b40 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Wed, 2 Nov 2016 08:03:07 -0400
Subject: [PATCH 278/347] net: netcp: fix error in link status display

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

When ethernet phy presents, the ethernet link status is
determined by the combined statuses of the phy link and
the sgmii link. That is, ethernet link is down if either
status is down, and ethernet link is up if both statuses
are up.

Prior to this patch, when ethernet link state changes,
the phy link status is displayed, regardless whether the
combined status is up or down. However, when the ethernet
link goes down, due a race condition, the phy link state
may not yet correctly reflect the down state while the
sgmii link state does. Thus blindly displaying the phy
link state is incorrect when the ethernet link goes down.

This patch fixes the problem by displaying the combined
state when ethernet link goes down and if phy is present.
When ethernet link goes up, the phy link state is displayed
if phy is present. When phy is absent, the sgmii link
status is displayed in any link state change.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit 47f4082438c56dec41cd15abf1214e131b497582)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/ti/netcp_ethss.c |   13 ++++++++-----
 1 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/ti/netcp_ethss.c b/drivers/net/ethernet/ti/netcp_ethss.c
index 1d69940..ff2adce 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.c
+++ b/drivers/net/ethernet/ti/netcp_ethss.c
@@ -1959,6 +1959,11 @@ static void netcp_ethss_link_state_action(struct gbe_priv *gbe_dev,
 		    (slave->link_interface != RGMII_LINK_MAC_PHY) &&
 		    (slave->link_interface != XGMII_LINK_MAC_PHY)))
 			netif_carrier_on(ndev);
+
+		if (phy)
+			phy_print_status(phy);
+		else
+			netdev_printk(KERN_INFO, ndev, "Link is Up\n");
 	} else {
 		writel(mac_control, GBE_REG_ADDR(slave, emac_regs,
 						 mac_control));
@@ -1970,13 +1975,11 @@ static void netcp_ethss_link_state_action(struct gbe_priv *gbe_dev,
 		    (slave->link_interface != RGMII_LINK_MAC_PHY) &&
 		    (slave->link_interface != XGMII_LINK_MAC_PHY)))
 			netif_carrier_off(ndev);
+
+		netdev_printk(KERN_INFO, ndev, "Link is Down\n");
 	}
 
-	if (phy) {
-		phy_print_status(phy);
-	} else if (slave->link_interface == XGMII_LINK_MAC_MAC_FORCED) {
-		netdev_printk(KERN_INFO, ndev,
-			      "Link is %s\n", (up ? "Up" : "Down"));
+	if (slave->link_interface == XGMII_LINK_MAC_MAC_FORCED) {
 		if (up) {
 			if (slave->link_recover_thresh ||
 			    slave->link_recovering) {
-- 
1.7.5.4

