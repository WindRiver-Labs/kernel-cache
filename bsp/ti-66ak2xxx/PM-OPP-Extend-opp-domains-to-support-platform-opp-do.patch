From 890f606953f967971453048dc65985ff3a5e83ce Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Fri, 6 May 2016 12:11:37 -0500
Subject: [PATCH 326/347] PM / OPP: Extend opp domains to support platform opp
 domain drivers

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Many SoCs have a single regulator and clock that supply a device that
transition when a device requests a new operating point. Some SoCs
expand on this and have multiple regulators with sequencing and other
requirements for one single device. Example is TI OMAP5 and DRA7
platforms that have a second ABB (adaptive body bias) regulator that
must be sequenced specially for frequency up and down clock transitions
and Class0 AVS requirements that allow for adjusting the desired voltage
before it is set for the cpu-supply.

In order to deal with special cases like that and others that exist,
extend opp domains to allow platform OPP drivers to register themselves
with the OPP domain core and provide mechanisms to control these
regulator paths while still using the generic dev_pm_opp_set_rate call
used by the higher level generic drivers like cpufreq / devfreq.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit 59d59bbe026215fc8c9a745bd882c2c78e93b320)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 Documentation/devicetree/bindings/opp/opp.txt |   12 +
 drivers/base/power/opp/domain.c               |  325 +++++++++++++++++++++----
 drivers/base/power/opp/domain.h               |   15 ++
 include/linux/pm_opp_domain.h                 |   91 +++++++
 4 files changed, 396 insertions(+), 47 deletions(-)
 create mode 100644 include/linux/pm_opp_domain.h

diff --git a/Documentation/devicetree/bindings/opp/opp.txt b/Documentation/devicetree/bindings/opp/opp.txt
index ee91cbd..eaac9e8 100644
--- a/Documentation/devicetree/bindings/opp/opp.txt
+++ b/Documentation/devicetree/bindings/opp/opp.txt
@@ -49,6 +49,18 @@ If required, this can be extended for SoC vendor specific bindings. Such binding
 should be documented as Documentation/devicetree/bindings/power/<vendor>-opp.txt
 and should have a compatible description like: "operating-points-v2-<vendor>".
 
+* Property: <supply-name>-opp-domain
+
+Devices requiring control beyond a single regulator can provide a
+"<supply-name>-opp-domain" pointing to an OPP domain node that has registered
+itself with the OPP core using the devm_opp_domain_register API that is part
+of the OPP domain core. Providing this phandle allows a platform OPP domain
+driver to override the standard OPP domain controls and control platform
+specific regulator topologies.
+
+NOTE: This property is optional, without this the standard single regulator
+"<supply-name>-supply" and single clock will be scaled during OPP transitions.
+
 * OPP Table Node
 
 This describes the OPPs belonging to a device. This node can have following
diff --git a/drivers/base/power/opp/domain.c b/drivers/base/power/opp/domain.c
index eb87829..d6bdc4c 100644
--- a/drivers/base/power/opp/domain.c
+++ b/drivers/base/power/opp/domain.c
@@ -8,41 +8,93 @@
  * published by the Free Software Foundation.
  *
  * OPP domain handles scaling of clocks and regulators for a device when
- * changing OPPs. Default configuration is one clock and one regulator per
- * device.
- *
+ * changing OPPs. Default configuration that will be handled without any
+ * opp domain platform driver is one clock and one regulator per device.
  */
 #include <linux/clk.h>
 #include <linux/device.h>
 #include <linux/of.h>
+#include <linux/module.h>
+#include <linux/pm_opp_domain.h>
 #include <linux/regulator/consumer.h>
 #include <linux/slab.h>
 
 #include "opp.h"
 #include "domain.h"
 
-static int _set_opp_domain_voltage(struct device *dev, struct regulator *reg,
-				   unsigned long u_volt,
+static DEFINE_MUTEX(pm_oppdm_list_lock);
+static LIST_HEAD(pm_oppdm_list);
+
+static struct pm_opp_domain_dev *opp_domain_parse_of(struct device_node *np,
+						     const char *supply)
+{
+	char prop_name[32];	/* 32 is max size of property name */
+	bool found = false;
+	struct device_node *oppdm_np;
+	struct pm_opp_domain_dev *oppdm_dev = NULL;
+
+	snprintf(prop_name, sizeof(prop_name), "%s-opp-domain", supply);
+	oppdm_np = of_parse_phandle(np, prop_name, 0);
+	if (oppdm_np) {
+		mutex_lock(&pm_oppdm_list_lock);
+		list_for_each_entry(oppdm_dev, &pm_oppdm_list, node)
+			if (oppdm_dev->dev && oppdm_np ==
+			    oppdm_dev->dev->of_node) {
+				found = true;
+				break;
+			}
+		mutex_unlock(&pm_oppdm_list_lock);
+
+		/* if node is present and not ready, then defer */
+		if (!found)
+			return ERR_PTR(-EPROBE_DEFER);
+	} else {
+		return NULL;
+	}
+
+	of_node_put(oppdm_np);
+	return oppdm_dev;
+}
+
+static int _set_opp_domain_voltage(struct pm_opp_domain *pod,
+				   struct regulator *reg,
+				   int flags, unsigned long u_volt,
 				   unsigned long u_volt_min,
 				   unsigned long u_volt_max)
 {
+	struct device *dev = pod->dev;
+	struct pm_opp_domain_dev *oppdm_dev = pod->oppdm_dev;
 	int ret;
 
-	/* Regulator not available for device */
-	if (IS_ERR(reg)) {
-		dev_dbg(dev, "%s: regulator not available: %ld\n", __func__,
-			PTR_ERR(reg));
-		return 0;
-	}
+	if (oppdm_dev) {
+		const struct pm_opp_domain_ops *ops;
+
+		if (IS_ERR(oppdm_dev))
+			return PTR_ERR(oppdm_dev);
 
-	dev_dbg(dev, "%s: voltages (mV): %lu %lu %lu\n", __func__, u_volt_min,
-		u_volt, u_volt_max);
+		ops = oppdm_dev->desc->ops;
 
-	ret = regulator_set_voltage_triplet(reg, u_volt_min, u_volt,
-					    u_volt_max);
-	if (ret)
-		dev_err(dev, "%s: failed to set voltage (%lu %lu %lu mV): %d\n",
-			__func__, u_volt_min, u_volt, u_volt_max, ret);
+		ret = ops->oppdm_do_transition(oppdm_dev->dev,
+					       pod->data,
+					       flags, u_volt, u_volt_min,
+					       u_volt_max);
+	} else {
+		/* Regulator not available for device */
+		if (IS_ERR(reg)) {
+			dev_dbg(dev, "%s: regulator not available: %ld\n",
+				__func__, PTR_ERR(reg));
+			return 0;
+		}
+
+		dev_dbg(dev, "%s: voltages (mV): %lu %lu %lu\n", __func__,
+			u_volt_min, u_volt, u_volt_max);
+
+		ret = regulator_set_voltage_triplet(reg, u_volt_min, u_volt,
+						    u_volt_max);
+		if (ret)
+			dev_err(dev, "%s: failed to set voltage (%lu %lu %lu mV): %d\n",
+				__func__, u_volt_min, u_volt, u_volt_max, ret);
+	}
 
 	return ret;
 }
@@ -120,7 +172,8 @@ int dev_pm_opp_domain_set_rate(struct pm_opp_domain *pod,
 
 	/* Scaling up? Scale voltage before frequency */
 	if (freq > old_freq) {
-		ret = _set_opp_domain_voltage(dev, reg, u_volt, u_volt_min,
+		ret = _set_opp_domain_voltage(pod, reg, PM_OPPDM_VOLT_PRERATE,
+					      u_volt, u_volt_min,
 					      u_volt_max);
 		if (ret)
 			goto restore_voltage;
@@ -140,7 +193,8 @@ int dev_pm_opp_domain_set_rate(struct pm_opp_domain *pod,
 
 	/* Scaling down? Scale voltage after frequency */
 	if (freq < old_freq) {
-		ret = _set_opp_domain_voltage(dev, reg, u_volt, u_volt_min,
+		ret = _set_opp_domain_voltage(pod, reg, PM_OPPDM_VOLT_POSTRATE,
+					      u_volt, u_volt_min,
 					      u_volt_max);
 		if (ret)
 			goto restore_freq;
@@ -155,8 +209,8 @@ restore_freq:
 restore_voltage:
 	/* This shouldn't harm even if the voltages weren't updated earlier */
 	if (!IS_ERR(old_opp))
-		_set_opp_domain_voltage(dev, reg, ou_volt, ou_volt_min,
-					ou_volt_max);
+		_set_opp_domain_voltage(pod, reg, PM_OPPDM_VOLT_ABORTRATE,
+					ou_volt, ou_volt_min, ou_volt_max);
 
 	return ret;
 }
@@ -168,6 +222,9 @@ restore_voltage:
  * This creates a pm_opp_domain and parses proper clock for the
  * device so it can be managed. Will defer if resources are
  * not yet available.
+ *
+ * NOTE: dev_pm_opp_set_supply MUST be called after this if a regulator
+ * or OPP domain platform driver will be used.
  */
 struct pm_opp_domain *dev_pm_opp_domain_get(struct device *dev)
 {
@@ -179,6 +236,7 @@ struct pm_opp_domain *dev_pm_opp_domain_get(struct device *dev)
 		return ERR_PTR(-ENOMEM);
 
 	pod->dev = dev;
+	pod->reg = ERR_PTR(-ENXIO);
 
 	/* Find clk for the device */
 	pod->clk = clk_get(dev, NULL);
@@ -200,7 +258,7 @@ err:
  * dev_pm_opp_domain_put() - Release an opp_domain
  * @pod: Pointer to the opp_domain to be released
  *
- * Returns -EBUSY if regulator hasn't been released, otherwise 0
+ * Returns -EBUSY if regulator hasn't been released by , otherwise 0
  */
 int dev_pm_opp_domain_put(struct pm_opp_domain *pod)
 {
@@ -233,18 +291,43 @@ int dev_pm_opp_domain_put(struct pm_opp_domain *pod)
 int dev_pm_opp_domain_get_supply(struct pm_opp_domain *pod,
 				 const char *supply)
 {
+	struct pm_opp_domain_dev *oppdm_dev = NULL;
 	int ret = 0;
 
 	if (!pod)
 		return -EINVAL;
 
-	pod->reg = regulator_get_optional(pod->dev, supply);
-	if (IS_ERR(pod->reg)) {
-		ret = PTR_ERR(pod->reg);
-		/* Regulator is not mandatory */
-		if (ret != -EPROBE_DEFER)
-			dev_dbg(pod->dev, "%s: Couldn't find regulator: %d\n",
-				__func__, ret);
+	/* First look for opp_domain of node */
+	oppdm_dev = opp_domain_parse_of(pod->dev->of_node, supply);
+	if (IS_ERR(oppdm_dev))
+		return PTR_ERR(oppdm_dev);
+
+	if (oppdm_dev) {
+		const struct pm_opp_domain_ops *ops;
+
+		pod->oppdm_dev = oppdm_dev;
+
+		if (!try_module_get(oppdm_dev->dev->driver->owner)) {
+			ret = -ENODEV;
+		} else {
+			ops = oppdm_dev->desc->ops;
+			if (ops->oppdm_get)
+				ret = ops->oppdm_get(oppdm_dev->dev, pod->dev,
+						     pod->dev->of_node,
+						     supply,
+						     &pod->data);
+			if (ret)
+				module_put(oppdm_dev->dev->driver->owner);
+		}
+	} else {
+		pod->reg = regulator_get_optional(pod->dev, supply);
+		if (IS_ERR(pod->reg)) {
+			ret = PTR_ERR(pod->reg);
+			/* Regulator is not mandatory */
+			if (ret != -EPROBE_DEFER)
+				dev_dbg(pod->dev, "%s: Couldn't find regulator: %d\n",
+					__func__, ret);
+		}
 	}
 
 	return ret;
@@ -258,12 +341,23 @@ int dev_pm_opp_domain_get_supply(struct pm_opp_domain *pod,
  */
 void dev_pm_opp_domain_put_supply(struct pm_opp_domain *pod)
 {
-	if (!pod)
-		return;
+	struct pm_opp_domain_dev *oppdm_dev = pod->oppdm_dev;
 
-	if (!IS_ERR_OR_NULL(pod->reg)) {
-		regulator_put(pod->reg);
-		pod->reg = NULL;
+	if (oppdm_dev) {
+		const struct pm_opp_domain_ops *ops;
+
+		if (IS_ERR(oppdm_dev))
+			return;
+
+		ops = oppdm_dev->desc->ops;
+		if (ops->oppdm_put)
+			ops->oppdm_put(oppdm_dev->dev, pod->dev, pod->data);
+		module_put(oppdm_dev->dev->driver->owner);
+	} else {
+		if (!IS_ERR_OR_NULL(pod->reg)) {
+			regulator_put(pod->reg);
+			pod->reg = NULL;
+		}
 	}
 }
 
@@ -286,14 +380,35 @@ int dev_pm_opp_domain_get_latency(struct pm_opp_domain *pod, int old_uV,
 {
 	int total_latency = 0;
 
-	if (!IS_ERR(pod->reg)) {
-		total_latency +=
-			 regulator_set_voltage_time_triplet(pod->reg,
-							    old_uV,
-							    old_uV_min,
-							    old_uV_max,
-							    new_uV, new_uV_min,
-							    new_uV_max);
+	struct pm_opp_domain_dev *oppdm_dev = pod->oppdm_dev;
+
+	if (oppdm_dev) {
+		const struct pm_opp_domain_ops *ops;
+
+		if (IS_ERR(oppdm_dev))
+			return 0;
+
+		ops = oppdm_dev->desc->ops;
+		if (ops->oppdm_get_latency)
+			total_latency += ops->oppdm_get_latency(oppdm_dev->dev,
+								pod->data,
+								old_uV,
+								old_uV_min,
+								old_uV_max,
+								new_uV,
+								new_uV_min,
+								new_uV_max);
+	} else {
+		if (!IS_ERR(pod->reg)) {
+			total_latency +=
+				regulator_set_voltage_time_triplet(pod->reg,
+								   old_uV,
+								   old_uV_min,
+								   old_uV_max,
+								   new_uV,
+								   new_uV_min,
+								   new_uV_max);
+		}
 	}
 
 	return total_latency;
@@ -313,10 +428,126 @@ bool dev_pm_opp_domain_opp_supported_by_supply(struct pm_opp_domain *pod,
 					       unsigned long uV_min,
 					       unsigned long uV_max)
 {
-	if (!IS_ERR(pod->reg) &&
-	    !regulator_is_supported_voltage(pod->reg, uV_min,
-					    uV_max))
-		return false;
+	struct pm_opp_domain_dev *oppdm_dev = pod->oppdm_dev;
+	int ret = 0;
+
+	if (oppdm_dev) {
+		const struct pm_opp_domain_ops *ops;
+
+		if (IS_ERR(oppdm_dev))
+			return PTR_ERR(oppdm_dev);
+
+		ops = oppdm_dev->desc->ops;
+
+		if (ops->oppdm_is_supported_voltage)
+			ret = ops->oppdm_is_supported_voltage(oppdm_dev->dev,
+							      pod->data,
+							      uV_min,
+							      uV_max);
+
+		if (!ret)
+			return false;
+	} else {
+		if (!IS_ERR(pod->reg) &&
+		    !regulator_is_supported_voltage(pod->reg, uV_min,
+						    uV_max))
+			return false;
+	}
 
 	return true;
 }
+
+static void devm_opp_domain_release(struct device *dev, void *res)
+{
+	struct pm_opp_domain_dev *oppdm_dev = *(struct pm_opp_domain_dev **)res;
+
+	mutex_lock(&pm_oppdm_list_lock);
+	list_del(&oppdm_dev->node);
+	mutex_unlock(&pm_oppdm_list_lock);
+
+	kfree(oppdm_dev);
+}
+
+/**
+ * devm_opp_domain_register - Resource managed opp domain registration
+ * @dev: pointer to the device representing the opp domain
+ * @desc: opp domain descriptor
+ *
+ * Called by opp domain drivers to register a opp domain.  Returns a
+ * valid pointer to struct pm_opp_domain_dev on success or an ERR_PTR() on
+ * error.  The opp domain will automatically be released when the device
+ * is unbound.
+ */
+struct pm_opp_domain_dev
+*devm_opp_domain_register(struct device *dev,
+			  const struct pm_opp_domain_desc *desc)
+{
+	struct pm_opp_domain_dev **ptr, *oppdm_dev;
+
+	if (!dev || !desc)
+		return ERR_PTR(-EINVAL);
+
+	if (!desc->ops)
+		return ERR_PTR(-EINVAL);
+
+	/* Mandatory to have notify transition */
+	if (!desc->ops->oppdm_do_transition) {
+		dev_err(dev, "%s: Bad desc: oppdm_do_transition missing\n",
+			__func__);
+		return ERR_PTR(-EINVAL);
+	}
+
+	oppdm_dev = kzalloc(sizeof(*oppdm_dev), GFP_KERNEL);
+	if (!oppdm_dev)
+		return ERR_PTR(-ENOMEM);
+
+	ptr = devres_alloc(devm_opp_domain_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr) {
+		kfree(oppdm_dev);
+		return ERR_PTR(-ENOMEM);
+	}
+
+	oppdm_dev->desc = desc;
+	oppdm_dev->dev = dev;
+
+	mutex_lock(&pm_oppdm_list_lock);
+	list_add(&oppdm_dev->node, &pm_oppdm_list);
+	mutex_unlock(&pm_oppdm_list_lock);
+
+	*ptr = oppdm_dev;
+	devres_add(dev, ptr);
+
+	return oppdm_dev;
+}
+EXPORT_SYMBOL_GPL(devm_opp_domain_register);
+
+static int devm_oppdm_dev_match(struct device *dev, void *res, void *data)
+{
+	struct pm_opp_domain_dev **r = res;
+
+	if (!r || !*r) {
+		WARN_ON(!r || !*r);
+		return 0;
+	}
+	return *r == data;
+}
+
+/**
+ * devm_opp_domain_unregister - Resource managed opp domain unregister
+ * @oppdm_dev: opp domain device returned by devm_opp_domain_register()
+ *
+ * Unregister an opp domain registered with devm_opp_domain_register().
+ * Normally this function will not need to be called and the resource
+ * management code will ensure that the resource is freed.
+ */
+void devm_opp_domain_unregister(struct pm_opp_domain_dev *oppdm_dev)
+{
+	int rc;
+	struct device *dev = oppdm_dev->dev;
+
+	rc = devres_release(dev, devm_opp_domain_release,
+			    devm_oppdm_dev_match, oppdm_dev);
+	if (rc != 0)
+		WARN_ON(rc);
+}
+EXPORT_SYMBOL_GPL(devm_opp_domain_unregister);
diff --git a/drivers/base/power/opp/domain.h b/drivers/base/power/opp/domain.h
index 0b85a68..1944e50 100644
--- a/drivers/base/power/opp/domain.h
+++ b/drivers/base/power/opp/domain.h
@@ -16,6 +16,20 @@
 #include <linux/err.h>
 #include <linux/pm_opp.h>
 
+struct pm_opp_domain_desc;
+
+/**
+ * struct pm_opp_domain_dev - internal representation of opp domain devices
+ * @dev:	voltage domain device
+ * @node:	list to remaining voltage domain devices
+ * @node:	mutex to control data structure modifications and serialize ops
+ */
+struct pm_opp_domain_dev {
+	const struct pm_opp_domain_desc *desc;
+	struct device *dev;
+	struct list_head node;
+};
+
 /**
  * struct pm_opp_domain - Structure to maintain opp domain info
  * @dev:        device for which we scale clk and supply
@@ -27,6 +41,7 @@ struct pm_opp_domain {
 	struct device *dev;
 	struct clk *clk;
 	struct regulator *reg;
+	struct pm_opp_domain_dev *oppdm_dev;
 	void *data;
 };
 
diff --git a/include/linux/pm_opp_domain.h b/include/linux/pm_opp_domain.h
new file mode 100644
index 0000000..0a40ce1
--- /dev/null
+++ b/include/linux/pm_opp_domain.h
@@ -0,0 +1,91 @@
+/*
+ * OPP Domain header for providers of platform OPP domain drivers
+ *
+ * Copyright (C) 2016 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __LINUX_PM_OPP_DOMAIN__
+#define __LINUX_PM_OPP_DOMAIN__
+
+#define PM_OPPDM_VOLT_PRERATE		BIT(0)
+#define PM_OPPDM_VOLT_POSTRATE		BIT(1)
+#define PM_OPPDM_VOLT_ABORTRATE		BIT(2)
+
+/**
+ * struct pm_opp_domain_ops - Operations functions for opp domain device
+ * @oppdm_get: (optional) invoked when opp domain supply is obtained.
+ * @oppdm_put: (optional) invoked when opp domain supply is released.
+ * @oppdm_latency:	(optional) compute and provide opp domain
+ *			transition latency.
+ * @oppdm_do_transition: (mandatory) callback for notification
+ * @oppdm_is_supported_voltage: (optional) return whether or not voltage
+ *				range is possible using the opp domain
+ *
+ * These functions provide hooks for platform OPP domain drivers to
+ * override the default operations of an OPP domain which only
+ * allow a single regulator per device for OPP transitions.
+ */
+struct pm_opp_domain_ops {
+	int (*oppdm_get)(struct device *oppdm_dev,
+			 struct device *request_dev,
+			 struct device_node *np,
+			 const char *supply,
+			 void **oppdm_data);
+	int (*oppdm_get_latency)(struct device *oppdm_dev, void *oppdm_data,
+				 unsigned long old_uv,
+				 unsigned long old_uv_min,
+				 unsigned long old_uv_max,
+				 unsigned long new_uv,
+				 unsigned long new_uv_min,
+				 unsigned long new_uv_max);
+	int (*oppdm_do_transition)(struct device *oppdm_dev,
+				   void *oppdm_data,
+				   unsigned long clk_notifier_flags,
+				   int uv, int uv_min, int uv_max);
+	void (*oppdm_put)(struct device *oppdm_dev,
+			  struct device *request_dev,
+			  void *oppdm_data);
+	bool (*oppdm_is_supported_voltage)(struct device *oppdm_dev,
+					   void *oppdm_data,
+					   unsigned long uV_min,
+					   unsigned long uV_max);
+};
+
+/**
+ * struct pm_oppdm_desc - Descriptor for the voltage domain
+ * @ops:	operations for the voltage domain
+ * @flags:	flags controlling the various operations
+ */
+struct pm_opp_domain_desc {
+	const struct pm_opp_domain_ops *ops;
+	u16 flags;
+};
+
+#ifdef CONFIG_PM_OPP
+struct pm_opp_domain_dev
+*devm_opp_domain_register(struct device *dev,
+			  const struct pm_opp_domain_desc *desc);
+void devm_opp_domain_unregister(struct pm_opp_domain_dev *oppdm_dev);
+#else
+static inline struct pm_opp_domain_dev
+*devm_opp_domain_register(struct device *dev,
+			  const struct pm_opp_domain_desc *desc)
+{
+	return -ENODEV;
+}
+
+static inline
+void devm_opp_domain_unregister(struct pm_opp_domain_dev *oppdm_dev)
+{
+}
+#endif /* CONFIG_PM_OPP */
+#endif /* __LINUX_PM_OPP_DOMAIN__ */
-- 
1.7.5.4

