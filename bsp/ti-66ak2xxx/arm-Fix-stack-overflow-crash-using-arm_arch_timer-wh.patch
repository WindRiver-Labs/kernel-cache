From 2d71b91ba63b38452e6c3ea7255b0b92e59b6485 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 15 Apr 2015 15:18:07 +0800
Subject: [PATCH 123/256] arm: Fix stack overflow crash using arm_arch_timer
 when ftracing

kernel will crash when running with ftrace function graph enabled in case of
using arm_arch_timer as system counter, and recursive call will be happened
on read_counter(), and finally incur stack overflow, in which shown as folows:

Unable to handle kernel NULL pointer dereference at virtual address 00000923
pgd = c0403000
[00000923] *pgd=80000000404003, *pmd=00000000
Internal error: Oops: 207 [#1] PREEMPT SMP ARM
Dumping ftrace buffer:
---------------------------------
   <...>-7       0d..1 765191658:   0)               |  __probe_kernel_read() {
   <...>-7       0d..2 765197634:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..3 765200862:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..4 765204018:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..5 765207288:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..6 765210564:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..7 765213612:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..8 765216612:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..9 765219798:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..a 765222852:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..b 765225804:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..c 765228810:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..d 765231744:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..e 765234636:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..f 765237498:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..10 765240486:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..11 765243510:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..12 765246570:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..13 765249612:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..14 765252666:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..15 765255750:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..16 765258846:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..17 765261894:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..18 765264870:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..19 765267996:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..1a 765271086:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..1b 765274122:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..1c 765277104:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..1d 765280206:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..1e 765283326:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..1f 765286374:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..20 765289362:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..21 765292662:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..22 765295776:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..23 765298830:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..24 765301872:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..25 765304746:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..26 765307800:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..27 765310848:   0)               |  arch_timer_read_counter() {
   <...>-7       0d..28 765313818:   0)               |  arch_timer_read_counter() {
---------------------------------
Modules linked in:
CPU: 0 PID: 6 Comm: kworker/u32:0 Not tainted 3.10.38-ltsi-WR6.0.0.0_standard #3
task: ef1caf80 ti: ef1f0000 task.ti: ef1f0000
PC is at prepare_ftrace_return+0x2c/0xa0
LR is at ftrace_graph_caller+0x18/0x20
pc : [<c04152f0>]    lr : [<c040e0a4>]    psr: 200d0193
sp : ef1f2048  ip : ef1f2070  fp : ef1f206c
r10: 000003e8  r9 : c11af328  r8 : ef1f4028
r7 : ef1f211c  r6 : c09f3d7c  r5 : c0d08114  r4 : ef1f2118
r3 : ef1f2048  r2 : ef1f211c  r1 : ffffffff  r0 : ef1f2000
Flags: nzCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment kernel
Control: 30c5387d  Table: 2d0c01c0  DAC: fffffffd
Process kworker/u32:0 (pid: 6, stack limit = 0xef1f0238)
Stack: (0xef1f2048 to 0xef1f2000)
[<c04152f0>] (prepare_ftrace_return+0x2c/0xa0) from [<c040e0a4>] (ftrace_graph_caller+0x18/0x20)
Code: e1a06001 e3c0003f e1a07002 e590100c (e5913924)

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/clocksource/arm_arch_timer.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/drivers/clocksource/arm_arch_timer.c b/drivers/clocksource/arm_arch_timer.c
index 49c38e7..800ae9a 100644
--- a/drivers/clocksource/arm_arch_timer.c
+++ b/drivers/clocksource/arm_arch_timer.c
@@ -372,7 +372,7 @@ u32 arch_timer_get_rate(void)
 	return arch_timer_rate;
 }
 
-static u64 arch_counter_get_cntvct_mem(void)
+static u64 notrace arch_counter_get_cntvct_mem(void)
 {
 	u32 vct_lo, vct_hi, tmp_hi;
 
-- 
1.7.5.4

