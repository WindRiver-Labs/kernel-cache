From ec2c90203e9dfc876390339b029aa30ebb188513 Mon Sep 17 00:00:00 2001
From: Sekhar Nori <nsekhar@ti.com>
Date: Tue, 31 May 2016 18:07:41 +0530
Subject: [PATCH 135/347] mmc: host: omap_hsmmc: reduce indentation in
 set_data_timeout()

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Negate the check for timeout being zero to reduce
the indentation for most of the function.

No functional changes.

Signed-off-by: Sekhar Nori <nsekhar@ti.com>
Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit 819ca87ef52d667ea978b43a7f10135c0514c036)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/mmc/host/omap_hsmmc.c |   87 +++++++++++++++++++++--------------------
 1 files changed, 45 insertions(+), 42 deletions(-)

diff --git a/drivers/mmc/host/omap_hsmmc.c b/drivers/mmc/host/omap_hsmmc.c
index d78766a..edc0e17 100644
--- a/drivers/mmc/host/omap_hsmmc.c
+++ b/drivers/mmc/host/omap_hsmmc.c
@@ -1554,51 +1554,54 @@ static void set_data_timeout(struct omap_hsmmc_host *host,
 	cycle_ns = 1000000000 / (host->clk_rate / clkd);
 	do_div(timeout, cycle_ns);
 	timeout += timeout_clks;
-	if (timeout) {
-		while ((timeout & 0x80000000) == 0) {
-			dto += 1;
-			timeout <<= 1;
-		}
-		dto = 31 - dto;
+
+	if (!timeout)
+		goto out;
+
+	while ((timeout & 0x80000000) == 0) {
+		dto += 1;
 		timeout <<= 1;
-		if (timeout && dto)
-			dto += 1;
-		if (dto >= 13)
-			dto -= 13;
-		else
-			dto = 0;
-		if (dto > 14) {
-			/*
-			 * DRA7 Errata No i834: When using high speed HS200 and
-			 * SDR104 cards, the functional clock for MMC module
-			 * will be 192MHz. At this frequency, the maximum
-			 * obtainable timeout (DTO =0xE) in hardware is
-			 * (1/192MHz)*2^27 = 700ms. Commands taking longer than
-			 * 700ms will be affected by this small window frame
-			 * and will be timing out frequently even without a
-			 * genuine timeout from the card. Workaround for
-			 * this errata is use a software timer instead of
-			 * hardware timer to provide the timeout requested
-			 * by the upper layer.
-			 *
-			 * The timeout from the upper layer denotes the delay
-			 * between the end bit of the read command and the
-			 * start bit of the data block and in the case of
-			 * multiple-read operation, they also define the
-			 * typical delay between the end bit of a data
-			 * block and the start bit of next data block.
-			 *
-			 * Calculate the total timeout value for the entire
-			 * transfer to complete from the timeout value given
-			 * by the upper layer.
-			 */
-			host->data_timeout = (data->blocks * (timeout_ns +
-					      MMC_BLOCK_TRANSFER_TIME_NS(
-					      data->blksz, ios->bus_width,
-					      ios->clock)));
-		}
+	}
+	dto = 31 - dto;
+	timeout <<= 1;
+	if (timeout && dto)
+		dto += 1;
+	if (dto >= 13)
+		dto -= 13;
+	else
+		dto = 0;
+	if (dto > 14) {
+		/*
+		 * DRA7 Errata No i834: When using high speed HS200 and
+		 * SDR104 cards, the functional clock for MMC module
+		 * will be 192MHz. At this frequency, the maximum
+		 * obtainable timeout (DTO =0xE) in hardware is
+		 * (1/192MHz)*2^27 = 700ms. Commands taking longer than
+		 * 700ms will be affected by this small window frame
+		 * and will be timing out frequently even without a
+		 * genuine timeout from the card. Workaround for
+		 * this errata is use a software timer instead of
+		 * hardware timer to provide the timeout requested
+		 * by the upper layer.
+		 *
+		 * The timeout from the upper layer denotes the delay
+		 * between the end bit of the read command and the
+		 * start bit of the data block and in the case of
+		 * multiple-read operation, they also define the
+		 * typical delay between the end bit of a data
+		 * block and the start bit of next data block.
+		 *
+		 * Calculate the total timeout value for the entire
+		 * transfer to complete from the timeout value given
+		 * by the upper layer.
+		 */
+		host->data_timeout = (data->blocks *
+				     (timeout_ns + MMC_BLOCK_TRANSFER_TIME_NS(
+				      data->blksz, ios->bus_width,
+				      ios->clock)));
 	}
 
+out:
 	reg &= ~DTO_MASK;
 	reg |= dto << DTO_SHIFT;
 	OMAP_HSMMC_WRITE(host->base, SYSCTL, reg);
-- 
1.7.5.4

