From 08b04a51cd338699da25e6a96e0446d3455050f5 Mon Sep 17 00:00:00 2001
From: Sam Nelson <sam.nelson@ti.com>
Date: Tue, 2 Jul 2013 22:06:00 -0400
Subject: [PATCH 209/256] remoteproc: Fix to enable shutdown and restart of
 rpmsg

When rproc shutdown is called, the associated vdev devices were not
cleaned up. Added cleanup of vdev devices. Also added check to avoid
issues with rproc_shutdown getting reentered when vdev devices are
cleaned.

Signed-off-by: Sam Nelson <sam.nelson@ti.com>
(cherry picked from commit 1dd125001d7aec936f0e17216fa61eb26198064b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/remoteproc/remoteproc_core.c |   19 +++++++++++++++++++
 1 files changed, 19 insertions(+), 0 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 000f17d..9afd1f0 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -1149,6 +1149,19 @@ unlock_mutex:
 	return ret;
 }
 EXPORT_SYMBOL(rproc_boot);
+/**
+ * rrproc_cleanup_vdev_entries() - cleanu vdev entries
+ */
+static void rproc_cleanup_vdev_entries(struct rproc *rproc)
+{
+	struct rproc_vdev *rvdev, *tmp;
+
+	/* clean up remote vdev entries */
+	list_for_each_entry_safe(rvdev, tmp, &rproc->rvdevs, node)
+		rproc_remove_virtio_dev(rvdev);
+
+	return;
+}
 
 /**
  * rproc_shutdown() - power off the remote processor
@@ -1174,6 +1187,10 @@ void rproc_shutdown(struct rproc *rproc)
 	struct device *dev = &rproc->dev;
 	int ret;
 
+	/* If already in offline state skip */
+	if (rproc->state == RPROC_OFFLINE)
+		return;
+
 	ret = mutex_lock_interruptible(&rproc->lock);
 	if (ret) {
 		dev_err(dev, "can't lock rproc %s: %d\n", rproc->name, ret);
@@ -1205,6 +1222,8 @@ void rproc_shutdown(struct rproc *rproc)
 		complete_all(&rproc->crash_comp);
 
 	rproc->state = RPROC_OFFLINE;
+	/* Cleanup vdev entries */
+	rproc_cleanup_vdev_entries(rproc);
 
 	dev_info(dev, "stopped remote processor %s\n", rproc->name);
 
-- 
1.7.5.4

