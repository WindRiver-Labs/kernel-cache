From ea1a67772180d2fe952ed88e3c04ee3d37b40ea9 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Mon, 22 Aug 2016 07:36:39 -0400
Subject: [PATCH 206/347] net: netcp: ethss: add 10gbe serdes lane receive
 recovery

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

When the remote device that the 10gbe device is connected
to is restarted for whatever reason, the receive direction
of a 10gbe serdes lane will need to be reset in order to
sync up again with the remote device's transmit pattern.

This patch adds support of such a 10gbe serdes lane receive
recovery.  When 10gbe driver detects a serdes lane down, it
will start a periodic attempt to recover the receive direction
of that lane.

This patch also adopts the remodelling of one SerDes lane
as a separate PHY device. Hene phy_init() is invoked per
each ethernet interface.

The changes are needed because of the recent update to the
SerDes configuration.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit e4d3b8a49e828c6c0ff1cb39d1025fb21bb85726)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/net/keystone-netcp.txt     |  122 ++++++++++-------
 drivers/net/ethernet/ti/netcp_ethss.c              |  136 +++++++++++++++-----
 drivers/net/ethernet/ti/netcp_ethss.h              |   16 ++-
 3 files changed, 190 insertions(+), 84 deletions(-)

diff --git a/Documentation/devicetree/bindings/net/keystone-netcp.txt b/Documentation/devicetree/bindings/net/keystone-netcp.txt
index ce9f53c..bb9c2de 100644
--- a/Documentation/devicetree/bindings/net/keystone-netcp.txt
+++ b/Documentation/devicetree/bindings/net/keystone-netcp.txt
@@ -111,6 +111,10 @@ Required properties:
 			- 10Gb mac<->mac forced mode : 11
 ----phy-handle:	phandle to PHY device
 
+----phys:	phandles to serdes PHY devices
+		see Documentation/devicetree/bindings/phy/ti-phy.txt
+		for Keystone SerDes device specificcations.
+
 Optional properties:
 - enable-ale:	NetCP driver keeps the address learning feature in the ethernet
 		switch module disabled. This attribute is to enable the address
@@ -120,10 +124,6 @@ Optional properties:
 				will only initialize these ports and attach PHY
 				driver to them if needed.
 
-- phys:		phandles to serdes devices
-		see Documentation/devicetree/bindings/phy/ti-phy.txt
-		for Keystone SerDes device specificcations.
-
 NetCP interface properties: Interface specification for NetCP sub-modules.
 Required properties:
 - rx-channel:	the navigator packet dma channel name for rx.
@@ -163,33 +163,53 @@ gbe_subsys: subsys@2090000 {
 
 gbe_serdes: phy@232a000 {
 	status			= "ok";
-	#phy-cells		= <0>;
 	compatible		= "ti,keystone-serdes-gbe";
 	reg			= <0x0232a000 0x2000>;
 	link-rate-kbps		= <1250000>;
 	num-lanes		= <4>;
 	/*rx-force-enable;*/
-	lanes {
-		#address-cells = <1>;
-		#size-cells = <0>;
-		lane@0 {
-			/*loopback;*/
-			reg		= <0>;
-			control-rate	= <2>; /* quart */
-			rx-start	= <7 5>;
-			rx-force	= <1 1>;
-			tx-coeff	= <0 0 0 12 4>;
-			       /* c1 c2 cm att vreg */
-		};
-		lane@1 {
-			/*loopback;*/
-			reg		= <1>;
-			control-rate	= <2>; /* quart */
-			rx-start	= <7 5>;
-			rx-force	= <1 1>;
-			tx-coeff	= <0 0 0 12 4>;
-			       /* c1 c2 cm att vreg */
-		};
+	#address-cells = <1>;
+	#size-cells = <0>;
+
+	serdes_lane0: lane@0 {
+		status		= "ok";
+		/*loopback;*/
+		#phy-cells	= <0>;
+		reg		= <0>;
+		control-rate	= <2>; /* quart */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <0 0 0 12 4>; /* c1 c2 cm att vreg */
+	};
+	serdes_lane1: lane@1 {
+		status		= "ok";
+		/*loopback;*/
+		#phy-cells	= <0>;
+		reg		= <1>;
+		control-rate	= <2>; /* quart */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <0 0 0 12 4>; /* c1 c2 cm att vreg */
+	};
+	serdes_lane2: lane@2 {
+		status		= "disabled";
+		/*loopback;*/
+		#phy-cells	= <0>;
+		reg		= <2>;
+		control-rate	= <2>; /* quart */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <0 0 0 12 4>; /* c1 c2 cm att vreg */
+	};
+	serdes_lane3: lane@3 {
+		status		= "disabled";
+		/*loopback;*/
+		#phy-cells	= <0>;
+		reg		= <3>;
+		control-rate	= <2>; /* quart */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <0 0 0 12 4>; /* c1 c2 cm att vreg */
 	};
 };
 
@@ -216,14 +236,15 @@ netcp: netcp@2000000 {
 			/* enable-ale; */
 			tx-queue = <648>;
 			tx-channel = <8>;
-			phys = <&gbe_serdes>;
 
 			interfaces {
 				gbe0: interface-0 {
+					phys = <&serdes_lane0>;
 					slave-port = <0>;
 					link-interface	= <4>;
 				};
 				gbe1: interface-1 {
+					phys = <&serdes_lane1>;
 					slave-port = <1>;
 					link-interface	= <4>;
 				};
@@ -231,10 +252,12 @@ netcp: netcp@2000000 {
 
 			secondary-slave-ports {
 				port-2 {
+					phys = <&serdes_lane2>;
 					slave-port = <2>;
 					link-interface	= <2>;
 				};
 				port-3 {
+					phys = <&serdes_lane3>;
 					slave-port = <3>;
 					link-interface	= <2>;
 				};
@@ -286,7 +309,6 @@ xgbe_pcsr: pcsr@2f00600 {
 
 xgbe_serdes: phy@231e000 {
 	status			= "disabled";
-	#phy-cells		= <0>;
 	compatible		= "ti,keystone-serdes-xgbe";
 	reg			= <0x0231e000 0x2000>;
 	link-rate-kbps		= <10312500>;
@@ -294,27 +316,26 @@ xgbe_serdes: phy@231e000 {
 	syscon-peripheral	= <&xgbe_subsys>;
 	syscon-link		= <&xgbe_pcsr>;
 	/*rx-force-enable;*/
-	lanes {
-		#address-cells = <1>;
-		#size-cells = <0>;
-		lane@0 {
-			/*loopback;*/
-			reg		= <0>;
-			control-rate	= <0>; /* full */
-			rx-start	= <7 5>;
-			rx-force	= <1 1>;
-			tx-coeff	= <2 0 0 12 4>;
-				/* c1 c2 cm att vreg */
-		};
-		lane@1 {
-			/*loopback;*/
-			reg		= <1>;
-			control-rate	= <0>; /* full */
-			rx-start	= <7 5>;
-			rx-force	= <1 1>;
-			tx-coeff	= <2 0 0 12 4>;
-				/* c1 c2 cm att vreg */
-		};
+	#address-cells  = <1>;
+	#size-cells     = <0>;
+
+	xserdes_lane0: lane@0 {
+		status		= "ok";
+		#phy-cells	= <0>;
+		reg		= <0>;
+		control-rate	= <0>; /* full */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <2 0 0 12 4>; /* c1 c2 cm att vreg */
+	};
+	xserdes_lane1: lane@1 {
+		status		= "ok";
+		#phy-cells	= <0>;
+		reg		= <1>;
+		control-rate	= <0>; /* full */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <2 0 0 12 4>; /* c1 c2 cm att vreg */
 	};
 };
 
@@ -348,14 +369,15 @@ netcpx: netcpx@2f00000 {
 			/* enable-ale; */
 			tx-queue = <692>;
 			tx-channel = "xnettx";
-			phys = <&xgbe_serdes>;
 
 			interfaces {
 				xgbe0: interface-0 {
+					phys = <&xserdes_lane0>;
 					slave-port = <0>;
 					link-interface	= <11>; /* MAC_MAC */
 				};
 				xgbe1: interface-1 {
+					phys = <&xserdes_lane1>;
 					slave-port = <1>;
 					link-interface	= <11>;
 				};
diff --git a/drivers/net/ethernet/ti/netcp_ethss.c b/drivers/net/ethernet/ti/netcp_ethss.c
index fbed5a7..db7a0c1e 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.c
+++ b/drivers/net/ethernet/ti/netcp_ethss.c
@@ -1808,6 +1808,24 @@ static int gbe_get_slave_port(struct gbe_priv *priv, u32 slave_num)
 	return slave_num;
 }
 
+/* Number of GBE_TIMER_INTERVAL */
+#define LINK_RECOVER_THRESHOLD	6
+
+static void gbe_slave_link_recover(struct work_struct *work)
+{
+	struct gbe_slave *slave = container_of(work, struct gbe_slave,
+					       link_recover_work.work);
+	struct device *dev = slave->gbe_dev->dev;
+	int lane = slave->slave_num;
+	int ret;
+
+	dev_dbg(dev, "recovering serdes lane %d ...\n", lane);
+
+	ret = phy_reset(slave->serdes_phy);
+	if (!ret)
+		dev_dbg(dev, "Serdes Lane %u rx recovered\n", lane);
+}
+
 static void netcp_ethss_link_state_action(struct gbe_priv *gbe_dev,
 					  struct net_device *ndev,
 					  struct gbe_slave *slave,
@@ -1851,11 +1869,28 @@ static void netcp_ethss_link_state_action(struct gbe_priv *gbe_dev,
 			netif_carrier_off(ndev);
 	}
 
-	if (phy)
+	if (phy) {
 		phy_print_status(phy);
-	else if (slave->link_interface == XGMII_LINK_MAC_MAC_FORCED) {
+	} else if (slave->link_interface == XGMII_LINK_MAC_MAC_FORCED) {
 		netdev_printk(KERN_INFO, ndev,
 			      "Link is %s\n", (up ? "Up" : "Down"));
+		if (up) {
+			if (slave->link_recover_thresh ||
+			    slave->link_recovering) {
+				slave->link_recover_thresh = 0;
+				slave->link_recovering = 0;
+				dev_info(gbe_dev->dev,
+					 "link_recover process cancelled: %s slave %d\n",
+					 netdev_name(ndev), slave->slave_num);
+			}
+		} else {
+			/* from up to down */
+			slave->link_recover_thresh = LINK_RECOVER_THRESHOLD;
+			slave->link_recovering = 1;
+			dev_info(gbe_dev->dev,
+				 "link_recover process initiated: %s slave %d\n",
+				 netdev_name(ndev), slave->slave_num);
+		}
 	}
 }
 
@@ -1918,9 +1953,19 @@ static void netcp_ethss_update_link_state(struct gbe_priv *gbe_dev,
 	phy_link_state = gbe_phy_link_status(slave);
 	link_state = phy_link_state & sw_link_state;
 
-	if (atomic_xchg(&slave->link_state, link_state) != link_state)
+	if (atomic_xchg(&slave->link_state, link_state) != link_state) {
 		netcp_ethss_link_state_action(gbe_dev, ndev, slave,
 					      link_state);
+	} else {
+		if (slave->link_recover_thresh) {
+			if (++slave->link_recovering >=
+					slave->link_recover_thresh) {
+				schedule_delayed_work(&slave->link_recover_work,
+						      0);
+				slave->link_recovering = 1;
+			}
+		}
+	}
 }
 
 static void xgbe_adjust_link(struct net_device *ndev)
@@ -2420,6 +2465,27 @@ static int gbe_close(void *intf_priv, struct net_device *ndev)
 	return 0;
 }
 
+static int init_serdes_phys(struct gbe_priv *gbe_dev, struct gbe_slave *slave,
+			    struct device_node *node, bool do_phy_init)
+{
+	struct device *dev = gbe_dev->dev;
+	struct phy *phy;
+
+	phy = devm_of_phy_get_by_index(dev, node, 0);
+	if (IS_ERR(phy)) {
+		/* this one may be disabled, quietly skip */
+		dev_dbg(dev, "%s sl-%d: No serdes phy found: %ld\n",
+			node->name, slave->slave_num, PTR_ERR(phy));
+		return 0;
+	}
+
+	slave->serdes_phy = phy;
+	if (!do_phy_init)
+		return 0;
+
+	return phy_init(phy);
+}
+
 static int init_slave(struct gbe_priv *gbe_dev, struct gbe_slave *slave,
 		      struct device_node *node)
 {
@@ -2439,6 +2505,7 @@ static int init_slave(struct gbe_priv *gbe_dev, struct gbe_slave *slave,
 		slave->link_interface = SGMII_LINK_MAC_PHY;
 	}
 
+	slave->gbe_dev = gbe_dev;
 	slave->open = false;
 	if ((slave->link_interface == SGMII_LINK_MAC_PHY) ||
 	    (slave->link_interface == RGMII_LINK_MAC_PHY) ||
@@ -2535,9 +2602,12 @@ static int init_slave(struct gbe_priv *gbe_dev, struct gbe_slave *slave,
 		XGBE_SET_REG_OFS(slave, emac_regs, mac_control);
 		XGBE_SET_REG_OFS(slave, emac_regs, soft_reset);
 		XGBE_SET_REG_OFS(slave, emac_regs, rx_maxlen);
+		INIT_DELAYED_WORK(&slave->link_recover_work,
+				  gbe_slave_link_recover);
 	}
 
 	atomic_set(&slave->link_state, NETCP_LINK_STATE_INVALID);
+
 	return 0;
 }
 
@@ -2550,6 +2620,7 @@ static void init_secondary_ports(struct gbe_priv *gbe_dev,
 	struct device_node *port;
 	struct gbe_slave *slave;
 	bool mac_phy_link = false;
+	int ret;
 
 	for_each_child_of_node(node, port) {
 		slave = devm_kzalloc(dev, sizeof(*slave), GFP_KERNEL);
@@ -2568,6 +2639,15 @@ static void init_secondary_ports(struct gbe_priv *gbe_dev,
 			continue;
 		}
 
+		if (!IS_SS_ID_2U(gbe_dev)) {
+			ret = init_serdes_phys(gbe_dev, slave, port, true);
+			if (ret && (ret != -ENODEV)) {
+				dev_err(dev, "serdes phy init failed\n");
+				devm_kfree(dev, slave);
+				continue;
+			}
+		}
+
 		if ((gbe_dev->ss_version == GBE_SS_VERSION_14) ||
 		    IS_SS_ID_NU(gbe_dev))
 			gbe_sgmii_config(gbe_dev, slave);
@@ -2642,6 +2722,8 @@ static void free_secondary_ports(struct gbe_priv *gbe_dev)
 	while (!list_empty(&gbe_dev->secondary_slaves)) {
 		slave = first_sec_slave(gbe_dev);
 
+		phy_exit(slave->serdes_phy);
+
 		if (slave->phy)
 			phy_disconnect(slave->phy);
 		list_del(&slave->slave_list);
@@ -2657,8 +2739,6 @@ static int set_xgbe_ethss10_priv(struct gbe_priv *gbe_dev,
 	void __iomem *regs;
 	int ret, i;
 
-	gbe_dev->num_serdeses = 1;
-
 	gbe_dev->ss_regmap = syscon_regmap_lookup_by_phandle(node,
 							     "syscon-subsys");
 
@@ -2817,8 +2897,6 @@ static int set_gbe_ethss14_priv(struct gbe_priv *gbe_dev,
 	void __iomem *regs;
 	int i, ret;
 
-	gbe_dev->num_serdeses = 1;
-
 	if (gbe_dev->ss_regs) {
 		gbe_dev->sgmii_port_regs = gbe_dev->ss_regs +
 					   GBE13_SGMII_MODULE_OFFSET;
@@ -2936,7 +3014,6 @@ static int set_gbenu_ethss_priv(struct gbe_priv *gbe_dev,
 	void __iomem *regs;
 	int i, ret;
 
-	gbe_dev->num_serdeses = 2;
 	gbe_dev->num_stats_mods = gbe_dev->max_num_ports;
 	gbe_dev->et_stats = gbenu_et_stats;
 
@@ -3131,21 +3208,6 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 	if (ret)
 		return ret;
 
-	for (i = 0; i < gbe_dev->num_serdeses; i++) {
-		phy = devm_of_phy_get_by_index(dev, node, i);
-		if (IS_ERR(phy)) {
-			/* this one may be disabled, quietly skip */
-			dev_dbg(dev, "No %s serdes driver found: %ld\n",
-				node->name, PTR_ERR(phy));
-			continue;
-		}
-
-		gbe_dev->serdes_phy[i] = phy;
-		ret = phy_init(phy);
-		if (ret < 0)
-			goto exit_phys;
-	}
-
 	interfaces = of_get_child_by_name(node, "interfaces");
 	if (!interfaces)
 		dev_err(dev, "could not find interfaces\n");
@@ -3153,21 +3215,28 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 	ret = netcp_txpipe_init(&gbe_dev->tx_pipe, netcp_device,
 				gbe_dev->dma_chan_name, gbe_dev->tx_queue_id);
 	if (ret)
-		goto exit_phys;
+		goto exit_err;
 
 	ret = netcp_txpipe_open(&gbe_dev->tx_pipe);
 	if (ret)
-		goto exit_phys;
+		goto exit_err;
 
 	/* Create network interfaces */
 	INIT_LIST_HEAD(&gbe_dev->gbe_intf_head);
 	for_each_child_of_node(interfaces, interface) {
+		if (!IS_SS_ID_2U(gbe_dev)) {
+			phy = devm_of_phy_get_by_index(dev, interface, 0);
+			if (!IS_ERR(phy))
+				phy_init(phy);
+		}
+
 		ret = of_property_read_u32(interface, "slave-port", &slave_num);
 		if (ret) {
 			dev_err(dev, "missing slave-port parameter, skipping interface configuration for %s\n",
 				interface->name);
 			continue;
 		}
+
 		gbe_dev->num_slaves++;
 		if (gbe_dev->num_slaves >= gbe_dev->max_num_slaves) {
 			of_node_put(interface);
@@ -3239,9 +3308,7 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 
 free_sec_ports:
 	free_secondary_ports(gbe_dev);
-exit_phys:
-	for (i = 0; i < gbe_dev->num_serdeses; i++)
-		phy_exit(gbe_dev->serdes_phy[i]);
+exit_err:
 	return ret;
 }
 
@@ -3278,6 +3345,14 @@ static int gbe_attach(void *inst_priv, struct net_device *ndev,
 		goto fail;
 	}
 
+	if (!IS_SS_ID_2U(gbe_dev)) {
+		ret = init_serdes_phys(gbe_dev, gbe_intf->slave, node, false);
+		if (ret && (ret != -ENODEV)) {
+			dev_err(gbe_dev->dev, "serdes phy init failed\n");
+			goto fail;
+		}
+	}
+
 	gbe_intf->tx_pipe = gbe_dev->tx_pipe;
 	ndev->ethtool_ops = &keystone_ethtool_ops;
 	list_add_tail(&gbe_intf->gbe_intf_list, &gbe_dev->gbe_intf_head);
@@ -3296,6 +3371,7 @@ static int gbe_release(void *intf_priv)
 {
 	struct gbe_intf *gbe_intf = intf_priv;
 
+	phy_exit(gbe_intf->slave->serdes_phy);
 	gbe_intf->ndev->ethtool_ops = NULL;
 	list_del(&gbe_intf->gbe_intf_list);
 	devm_kfree(gbe_intf->dev, gbe_intf->slave);
@@ -3306,7 +3382,6 @@ static int gbe_release(void *intf_priv)
 static int gbe_remove(struct netcp_device *netcp_device, void *inst_priv)
 {
 	struct gbe_priv *gbe_dev = inst_priv;
-	int i;
 
 	del_timer_sync(&gbe_dev->timer);
 	cpsw_ale_stop(gbe_dev->ale);
@@ -3315,9 +3390,6 @@ static int gbe_remove(struct netcp_device *netcp_device, void *inst_priv)
 	gbe_remove_sysfs_entries(gbe_dev);
 	free_secondary_ports(gbe_dev);
 
-	for (i = 0; i < gbe_dev->num_serdeses; i++)
-		phy_exit(gbe_dev->serdes_phy[i]);
-
 	if (!list_empty(&gbe_dev->gbe_intf_head))
 		dev_alert(gbe_dev->dev,
 			  "unreleased ethss interfaces present\n");
diff --git a/drivers/net/ethernet/ti/netcp_ethss.h b/drivers/net/ethernet/ti/netcp_ethss.h
index 3dceb83..a185fda 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.h
+++ b/drivers/net/ethernet/ti/netcp_ethss.h
@@ -94,7 +94,6 @@ struct gbe_priv {
 	u8				max_num_slaves;
 	u8				max_num_ports; /* max_num_slaves + 1 */
 	u8				num_stats_mods;
-	u8				num_serdeses;
 	struct netcp_tx_pipe		tx_pipe;
 
 	int				host_port;
@@ -130,7 +129,6 @@ struct gbe_priv {
 	int				num_et_stats;
 	/*  Lock for updating the hwstats */
 	spinlock_t			hw_stats_lock;
-	struct phy			*serdes_phy[MAX_NUM_SERDES];
 
 	struct kobject			kobj;
 	struct kobject			tx_pri_kobj;
@@ -140,6 +138,7 @@ struct gbe_priv {
 };
 
 struct gbe_slave {
+	struct gbe_priv			*gbe_dev;
 	void __iomem			*port_regs;
 	void __iomem			*emac_regs;
 	struct gbe_port_regs_ofs	port_regs_ofs;
@@ -152,8 +151,17 @@ struct gbe_slave {
 	u32				link_interface;
 	u32				mac_control;
 	u8				phy_port_t;
+					/* work trigger threshold
+					 *   0: triger disabled
+					 * > 1: trigger enabled
+					 */
+	u32				link_recover_thresh;
+					/* 0:NOT, > 0:recovering */
+	u32				link_recovering;
+	struct delayed_work		link_recover_work;
 	struct device_node		*phy_node;
 	struct list_head		slave_list;
+	struct phy			*serdes_phy;
 };
 
 struct gbe_intf {
@@ -188,6 +196,10 @@ void gbe_reset_mod_stats_ver14(struct gbe_priv *gbe_dev, int stats_mod);
 
 #define IS_SS_ID_NU(d) \
 	(GBE_IDENT((d)->ss_version) == GBE_SS_ID_NU)
+
+#define IS_SS_ID_2U(d) \
+	(GBE_IDENT((d)->ss_version) == GBE_SS_ID_2U)
+
 #define GBE_STATSA_MODULE			0
 #define GBE_STATSB_MODULE			1
 #define GBE_STATSC_MODULE			2
-- 
1.7.5.4

