From cfc829cc30cfffe61e75c96a99de188ccc4b40c1 Mon Sep 17 00:00:00 2001
From: "Reece R. Pollack" <x0183204@ti.com>
Date: Mon, 14 Oct 2013 14:43:25 -0400
Subject: [PATCH 093/256] hwqueue: keystone: Replace WRR weight normalization
 calculations

The old WRR weight normalization calculation algorithm was seriously
defective. This patch replaces that algorithm with a more accurate
one.

Also removed some dead code and variables related to the WRR calcs.

Signed-off-by: Reece R. Pollack <x0183204@ti.com>
(cherry picked from commit 47ff4fae2e031e2c8e89b80161aec5a350562e33)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue_qos.c |   33 +++++++++++++------------------
 drivers/hwqueue/keystone_qos.h         |    2 -
 2 files changed, 14 insertions(+), 21 deletions(-)

diff --git a/drivers/hwqueue/keystone_hwqueue_qos.c b/drivers/hwqueue/keystone_hwqueue_qos.c
index c39ecdb..c677370 100644
--- a/drivers/hwqueue/keystone_hwqueue_qos.c
+++ b/drivers/hwqueue/keystone_hwqueue_qos.c
@@ -34,6 +34,7 @@
 #include <linux/of_address.h>
 #include <linux/firmware.h>
 #include <linux/interrupt.h>
+#include <asm/div64.h>
 
 #include "hwqueue_internal.h"
 #include "keystone_hwqueue.h"
@@ -1958,8 +1959,6 @@ static int khwq_qos_tree_map_nodes(struct ktree_node *node, void *arg)
 	qnode->child_count	=  0;
 	qnode->parent_input	=  0;
 	qnode->child_weight_sum	=  0;
-	qnode->child_weight_max	=  0;
-	qnode->child_weight_min	= -1;
 	qnode->is_drop_input	= false;
 
 	if (qnode->drop_policy)
@@ -1973,10 +1972,6 @@ static int khwq_qos_tree_map_nodes(struct ktree_node *node, void *arg)
 		/* provide our parent with info */
 		parent->child_count ++;
 		parent->child_weight_sum += qnode->weight;
-		if (qnode->weight > parent->child_weight_max)
-			parent->child_weight_max = qnode->weight;
-		if (qnode->weight < parent->child_weight_min)
-			parent->child_weight_min = qnode->weight;
 
 		/* inherit if parent is an input to drop sched */
 		if (parent->is_drop_input)
@@ -2083,7 +2078,7 @@ static int khwq_qos_tree_start_port(struct khwq_qos_info *info,
 	struct khwq_device *kdev = info->kdev;
 	bool sync = false;
 	int inputs, i;
-	u64 scale, tmp;
+	u64 scale = 0ULL, tmp;
 
 	if (!qnode->has_sched_port)
 		return 0;
@@ -2147,6 +2142,14 @@ static int khwq_qos_tree_start_port(struct khwq_qos_info *info,
 	if (WARN_ON(error))
 		return error;
 
+	if (qnode->type == QOS_NODE_WRR) {
+		scale = inputs * ((qnode->acct == QOS_BYTE_ACCT) ?
+					QOS_BYTE_NORMALIZATION_FACTOR :
+					QOS_PACKET_NORMALIZATION_FACTOR);
+		scale <<= 48;
+		do_div(scale, qnode->child_weight_sum);
+	}
+
 	for (i = 0; i < inputs; i++) {
 		val = 0;
 		error = khwq_qos_set_sched_cong_thresh(info, idx, i, val, sync);
@@ -2155,25 +2158,17 @@ static int khwq_qos_tree_start_port(struct khwq_qos_info *info,
 
 		val = 0;
 		if (qnode->type == QOS_NODE_WRR) {
-			tmp = 0;
-			tmp = (qnode->child_weight[i] * inputs * 10) /
-				qnode->child_weight_sum;
+			tmp = qnode->child_weight[i];
+			tmp *= scale;
 
 			if (qnode->acct == QOS_BYTE_ACCT) {
-				scale = QOS_BYTE_NORMALIZATION_FACTOR;
-				scale <<= 48;
-				tmp *= scale;
-				tmp += 1ll << (47- QOS_CREDITS_BYTE_SHIFT);
+				tmp += 1ULL << (47 - QOS_CREDITS_BYTE_SHIFT);
 				tmp >>= (48 - QOS_CREDITS_BYTE_SHIFT);
 			} else {
-				scale = QOS_PACKET_NORMALIZATION_FACTOR;
-				scale <<= 48;
-				tmp *= scale;
-				tmp += 1ll << (47 - QOS_CREDITS_PACKET_SHIFT);
+				tmp += 1ULL << (47 - QOS_CREDITS_PACKET_SHIFT);
 				tmp >>= (48 - QOS_CREDITS_PACKET_SHIFT);
 			}
 			val = (u32)(tmp);
-			val /= 10;
 
 			dev_dbg(kdev->dev, "node weight = %d, weight "
 				 "credits = %d\n", qnode->child_weight[i], val);
diff --git a/drivers/hwqueue/keystone_qos.h b/drivers/hwqueue/keystone_qos.h
index 8c46f0e..3bcec2b 100644
--- a/drivers/hwqueue/keystone_qos.h
+++ b/drivers/hwqueue/keystone_qos.h
@@ -208,8 +208,6 @@ struct khwq_qos_tree_node {
 	int	 child_port_count;	/* children that need ports	*/
 	int	 child_count;		/* number of children		*/
 	int	 parent_input;		/* input number of parent	*/
-	u32	 child_weight_min;	/* min of child weights		*/
-	u32	 child_weight_max;	/* max of child weights		*/
 	u32	 child_weight[4];
 	u32	 child_weight_sum;	/* sum of child weights		*/
 	bool	 is_drop_input;		/* indicates that child's output
-- 
1.7.5.4

