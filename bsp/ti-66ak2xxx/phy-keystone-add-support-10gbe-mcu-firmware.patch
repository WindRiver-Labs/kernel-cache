From dea795cbc96cab1f29f825b3d7ca1cb7c224a7d6 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Fri, 22 Jul 2016 20:24:06 -0400
Subject: [PATCH 299/347] phy: keystone: add support 10gbe mcu firmware

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

The Keystone 10gbe SerDes has an option to use
an MCU firmware that does the configuration of
the SerDes and lane parameters by auto-negotiation
with the remote link partner.

This patch adds the support of using such a 10gbe
mcu firmware.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Michael Scherban <m-scherban@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit d10447d225d693add33e66e58d9a2c8ad55f301b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 Documentation/devicetree/bindings/phy/ti-phy.txt |  122 +++++++
 drivers/phy/phy-keystone-serdes.c                |  375 ++++++++++++++++++----
 2 files changed, 428 insertions(+), 69 deletions(-)

diff --git a/Documentation/devicetree/bindings/phy/ti-phy.txt b/Documentation/devicetree/bindings/phy/ti-phy.txt
index 9b992f6..4ea738c 100644
--- a/Documentation/devicetree/bindings/phy/ti-phy.txt
+++ b/Documentation/devicetree/bindings/phy/ti-phy.txt
@@ -413,3 +413,125 @@ netcpx: netcpx@2f00000 {
 	...
 
 };
+
+TI Keystone 10gbe SerDes PHY
+============================
+
+For 10gbe, there is an option of using an 10gbe MCU firmware.
+When the firmware is enabled, the individual lanes can be configured
+with the following in a mcu-firmware sub-node under the 10gbe SerDes
+node:
+
+lane:		Lane number.
+		- 0 -> Lane 0 (default)
+		- 1 -> Lane 1
+rate:		Link rate:
+		- 0 -> 1G/10G (default)
+		- 1 -> Force 1G
+		- 2 -> Force 10G
+autonegotiate:	Set to enable link rate autonegotiation when rate == 1G/10G.
+		- 0 -> disabled (default)
+		- 1 -> enabled
+tx_pause:	Enable TX pause frame generation.
+		- 0 -> disabled (default)
+		- 1 -> enabled
+rx_pause:	Enable RX pause frame generation.
+		- 0 -> disabled (default)
+		- 1 -> enabled
+10g_train:	Enable 10G link training.
+		- 0 -> disabled (default)
+		- 1 -> enabled
+fec:		Enable Forward Error Correction.
+		- 0 -> disabled (default)
+		- 1 -> enabled
+
+When 10gbe MCU firmware is used, the regular SerDes lane
+bindings should be disabled. 10gbe MCU firmware and regular
+SerDes lane bindings are mutually exclusive. See "Example:
+for Enabling K2E 10-GBE MCU Firmware" below.
+
+
+Example for Keystone K2E 10-GBE MCU Firmware Bindings:
+------------------------------------------------------
+
+xgbe_serdes: phy@231e000 {
+
+	status		= "disabled";
+
+	...
+
+	xserdes_lane0: lane@0 {
+		status		= "disabled";
+		#phy-cells	= <0>;
+		reg		= <0>;
+		control-rate	= <0>; /* full */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <2 0 0 12 4>; /* c1 c2 cm att vreg */
+	};
+	xserdes_lane1: lane@1 {
+		status		= "disabled";
+		#phy-cells	= <0>;
+		reg		= <1>;
+		control-rate	= <0>; /* full */
+		rx-start	= <7 5>;
+		rx-force	= <1 1>;
+		tx-coeff	= <2 0 0 12 4>; /* c1 c2 cm att vreg */
+	};
+
+	mcu-firmware {
+		status = "disabled";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		lane@0 {
+			status = "disabled";
+			reg = <0>;
+			rate = <0>; /* 0 = default
+				       1 = 1g
+				       2 = 10g */
+			autonegotiate;
+			/*tx_pause;*/
+			/*rx_pause;*/
+			10g_train;
+			/*fec;*/
+		};
+		lane@1 {
+			status = "disabled";
+			reg = <1>;
+			rate = <0>; /* 0 = default
+				       1 = 1g
+				       2 = 10g */
+			autonegotiate;
+			/*tx_pause;*/
+			/*rx_pause;*/
+			10g_train;
+			/*fec;*/
+		};
+	};
+};
+
+Example for Enabling K2E 10-GBE MCU Firmware:
+---------------------------------------------
+
+&xgbe_serdes {
+	status		= "ok";
+
+	xserdes_lane0: lane@0 {
+		status		= "disabled";
+	};
+	xserdes_lane1: lane@1 {
+		status		= "disabled";
+	};
+
+	mcu-firmware {
+		status = "ok";
+
+		lane@0 {
+			status = "ok";
+		};
+
+		lane@1 {
+			status = "ok";
+		};
+	};
+};
diff --git a/drivers/phy/phy-keystone-serdes.c b/drivers/phy/phy-keystone-serdes.c
index 089142a..0c90c37 100644
--- a/drivers/phy/phy-keystone-serdes.c
+++ b/drivers/phy/phy-keystone-serdes.c
@@ -50,6 +50,7 @@
 #include <linux/io.h>
 #include <linux/mfd/syscon.h>
 #include <linux/delay.h>
+#include <linux/random.h>
 #include <linux/firmware.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
@@ -199,7 +200,7 @@ struct kserdes_lane_config {
 	bool				loopback;
 };
 
-struct kserdes_fw_config {
+struct kserdes_mcu_fw_config {
 	bool				on;
 	u32				rate;
 	u32				link_loss_wait;
@@ -244,6 +245,8 @@ struct kserdes_ofs {
 static const char * const ks2_gbe_serdes_firmwares[] = {"ks2_gbe_serdes.bin"};
 static const char * const ks2_xgbe_serdes_firmwares[] = {"ks2_xgbe_serdes.bin"};
 static const char * const ks2_pcie_serdes_firmwares[] = {"ks2_pcie_serdes.bin"};
+static const char * const ks2_xgbe_serdes_mcu_firmwares[] =
+					{"ks2_xgbe_serdes_mcu_fw.bin"};
 
 #define MAX_VERSION		64
 #define INIT_FW_MAGIC_1		0xfaceface
@@ -251,6 +254,7 @@ static const char * const ks2_pcie_serdes_firmwares[] = {"ks2_pcie_serdes.bin"};
 
 static char *compatible_init_fw_version[] = {
 	"3.3.0.2c",
+	"323",
 	NULL,
 };
 
@@ -267,6 +271,11 @@ struct serdes_cfg {
 	u32 val;
 };
 
+struct serdes_mcu_fw_cfg {
+	u32 ofs;
+	u32 val;
+};
+
 struct kserdes_config {
 	struct device			*dev;
 	enum kserdes_phy_type		phy_type;
@@ -275,14 +284,14 @@ struct kserdes_config {
 	struct regmap			*peripheral_regmap;
 	struct regmap			*pcsr_regmap;
 	const char			*init_fw;
-	struct serdes_cfg		*init_cfg;
+	void				*init_cfg;
 	int				init_cfg_len;
 	enum kserdes_link_rate		link_rate;
 	bool				rx_force_enable;
 	struct kserdes_lane_config	lane[KSERDES_MAX_LANES];
 	struct kserdes_ofs		sofs;
-	bool				firmware;
-	struct kserdes_fw_config	fw;
+	bool				use_mcu_fw;
+	struct kserdes_mcu_fw_config	mcu_fw;
 };
 
 struct kserdes_phy {
@@ -337,6 +346,15 @@ static inline void kserdes_writel(void __iomem *base, u32 offset, u32 value)
 	writel(value, base + offset);
 }
 
+static void kserdes_load_mcu_fw(void __iomem *base,
+				struct serdes_mcu_fw_cfg *cfg, u32 size)
+{
+	u32 i;
+
+	for (i = 0; i < size; i++)
+		kserdes_writel(base, cfg[i].ofs, cfg[i].val);
+}
+
 static void kserdes_do_config(void __iomem *base,
 			      struct serdes_cfg *cfg, u32 size)
 {
@@ -410,8 +428,15 @@ static int kserdes_load_init_fw(struct kserdes_config *sc,
 	sc->init_cfg_len = fw->size - hdr_sz;
 	release_firmware(fw);
 
-	kserdes_do_config(sc->regs, sc->init_cfg,
-			  sc->init_cfg_len / sizeof(struct serdes_cfg));
+	if (sc->use_mcu_fw)
+		kserdes_load_mcu_fw(sc->regs,
+				    (struct serdes_mcu_fw_cfg *)sc->init_cfg,
+				    sc->init_cfg_len /
+				    sizeof(struct serdes_mcu_fw_cfg));
+	else
+		kserdes_do_config(sc->regs, sc->init_cfg,
+				  sc->init_cfg_len /
+				  sizeof(struct serdes_cfg));
 
 	return 0;
 }
@@ -1105,6 +1130,12 @@ static int kserdes_wait_lane_rx_valid(struct kserdes_config *sc, u32 lane)
 	} while (true);
 }
 
+static inline void _kserdes_set_link_loss_wait(void __iomem *sregs,
+					       u32 link_loss_wait)
+{
+	kserdes_writel(sregs, LINK_LOSS_WAIT_REG, link_loss_wait);
+}
+
 static inline void _kserdes_reset(void __iomem *sregs)
 {
 	FINSR(sregs, CPU_CTRL_REG, 29, 29, 0x1);
@@ -1115,7 +1146,7 @@ static inline void _kserdes_reset(void __iomem *sregs)
 
 static inline void kserdes_xge_pll_enable(struct kserdes_config *sc)
 {
-	if (!sc->firmware)
+	if (!sc->use_mcu_fw)
 		FINSR(sc->regs, CML_REG(0), 7, 0, 0x1f);
 
 	if (sc->link_rate == KSERDES_LINK_RATE_10P3125G) {
@@ -1126,6 +1157,13 @@ static inline void kserdes_xge_pll_enable(struct kserdes_config *sc)
 	}
 }
 
+static inline void
+_kserdes_enable_xgmii_port_select(struct regmap *peripheral_regmap,
+				  u32 port_selects)
+{
+	regmap_write(peripheral_regmap, XGE_CTRL_OFFSET, port_selects);
+}
+
 static inline void _kserdes_enable_xgmii_port(struct regmap *peripheral_regmap,
 					      u32 port)
 {
@@ -1252,66 +1290,6 @@ static int kserdes_wait_link_up(struct kserdes_config *sc,
 	return ret;
 }
 
-static inline void kserdes_xfw_get_lane_params(struct kserdes_config *sc,
-					       int lane)
-{
-	struct kserdes_fw_config *fw = &sc->fw;
-	u32 tx_ctrl, val_0, val_1;
-	u32 phy_a = PHY_A(sc->regs);
-
-	val_0 = kserdes_readl(sc->regs, LANEX_REG(lane, 0x04));
-	val_1 = kserdes_readl(sc->regs, LANEX_REG(lane, 0x08));
-
-	tx_ctrl = ((((val_0 >> 18) & 0x1)    << 24) |
-		   (((val_1 >> 0)  & 0xffff) <<  8) |
-		   (((val_0 >> 24) & 0xff)   <<  0));
-
-	if (phy_a) {
-		fw->cm = (val_1 >> 12) & 0xf;
-		fw->c1 = (val_1 >> 0) & 0x1f;
-		fw->c2 = (val_1 >> 8) & 0xf;
-	} else {
-		fw->cm = (tx_ctrl >> 16) & 0xf;
-		fw->c1 = (tx_ctrl >> 8) & 0x1f;
-		fw->c2 = (tx_ctrl >> 13) & 0x7;
-		fw->c2 = fw->c2 | (((tx_ctrl >> 24) & 0x1) << 3);
-	}
-
-	val_0 = _kserdes_read_select_tbus(sc->regs, lane + 1,
-					  (phy_a ? 0x11 : 0x10));
-	fw->attn = (val_0 >> 4) & 0xf;
-	fw->boost = (val_0 >> 8) & 0xf;
-
-	val_0 = _kserdes_read_select_tbus(sc->regs, lane + 1, 0x5);
-	fw->dlpf = (val_0 >> 2) & 0x3ff;
-
-	val_0 = _kserdes_read_select_tbus(sc->regs, lane + 1, 0x6);
-	fw->rxcal = (val_0 >> 3) & 0xff;
-}
-
-static inline void kserdes_xfw_mem_init(struct kserdes_config *sc)
-{
-	struct kserdes_fw_config *fw = &sc->fw;
-	u32 i, lane_config = 0;
-
-	for_each_lane(sc, i)
-		lane_config = (lane_config << 8) | (fw->lane_config[i] & 0xff);
-
-	lane_config <<= 8;
-
-	kserdes_writel(sc->regs, MEM_ADR_REG, KSERDES_XFW_CONFIG_START_ADDR);
-
-	for (i = KSERDES_XFW_CONFIG_START_ADDR;
-	     i < KSERDES_XFW_PARAM_START_ADDR; i += 4)
-		kserdes_writel(sc->regs, MEM_DATINC_REG, 0x00000000);
-
-	kserdes_writel(sc->regs, MEM_DATINC_REG, XFM_FLUSH_CMD);
-	kserdes_writel(sc->regs, MEM_DATINC_REG, fw->fast_train);
-	kserdes_writel(sc->regs, MEM_DATINC_REG, 0x00000000);
-	kserdes_writel(sc->regs, MEM_DATINC_REG, fw->lane_seeds);
-	kserdes_writel(sc->regs, MEM_DATINC_REG, lane_config);
-}
-
 static int kserdes_pcie_lanes_enable(struct kserdes_config *sc)
 {
 	int ret, i;
@@ -2062,8 +2040,173 @@ static int kserdes_sgmii_init(struct kserdes_config *sc)
 				    ARRAY_SIZE(ks2_gbe_serdes_firmwares));
 }
 
+static void kserdes_mcu_fw_check_download(struct kserdes_config *sc)
+{
+	struct serdes_mcu_fw_cfg *ent =
+		(struct serdes_mcu_fw_cfg *)sc->init_cfg;
+	int a_size, i;
+	u32 val, addr;
+
+	a_size = sc->init_cfg_len / sizeof(struct serdes_mcu_fw_cfg);
+
+	for (i = 0; i < a_size; i++, ent++) {
+		if (ent->ofs == MEM_ADR_REG) {
+			kserdes_writel(sc->regs, MEM_ADR_REG, ent->val);
+		} else if (ent->ofs == MEM_DATINC_REG) {
+			addr = kserdes_readl(sc->regs, MEM_ADR_REG);
+			val  = kserdes_readl(sc->regs, MEM_DATINC_REG);
+			if (val != ent->val) {
+				dev_err(sc->dev, "diff@ %d 0x%08x: 0x%08x 0x%08x\n",
+					i, addr, ent->val, val);
+			}
+		} else {
+			dev_err(sc->dev, "unknown reg ofs %08x\n",
+				ent->ofs);
+		}
+	}
+}
+
+static void kserdes_mcu_fw_auto_neg_status(struct kserdes_config *sc)
+{
+	struct kserdes_mcu_fw_config *fw = &sc->mcu_fw;
+	u32 aneg_in_prog = 0, i, aneg_ctl, tmp;
+	unsigned long timeout;
+
+	for_each_lane(sc, i) {
+		tmp = (fw->lane_config[i] & ANEG_1G_10G_OPT_MASK);
+
+		if ((tmp == ANEG_1G_10G_OPT_MASK) &&
+		    (fw->active_lane & BIT(i)))
+			aneg_in_prog |= BIT(i);
+	}
+
+	if (aneg_in_prog == 0)
+		return;
+
+	timeout = jiffies + msecs_to_jiffies(5000);
+
+	dev_info(sc->dev, "Waiting for autonegotiated link up.\n");
+
+	while (aneg_in_prog) {
+		for_each_lane(sc, i) {
+			aneg_ctl = kserdes_readl(sc->regs, LANEX_REG(i, 0x1d8));
+			aneg_ctl = (aneg_ctl & ANEG_LINK_CTL_1G10G_MASK);
+
+			if ((aneg_ctl == ANEG_LINK_CTL_10GKR_MASK) ||
+			    (aneg_ctl == ANEG_LINK_CTL_1GKX_MASK))
+				aneg_in_prog &= ~BIT(i);
+		}
+		if (time_after(jiffies, timeout))
+			break;
+		cpu_relax();
+	}
+
+	dev_info(sc->dev, "Lanes auto neg completed (mask): 0x%x\n",
+		 ~aneg_in_prog & fw->active_lane);
+}
+
+static inline void _kserdes_restart_mcu(void __iomem *sregs)
+{
+	u32 val;
+
+	val = (POR_EN | CPUREG_EN | AUTONEG_CTL | DATASPLIT);
+	kserdes_writel(sregs, CPU_CTRL_REG, val);
+
+	usleep_range(50, 100);
+
+	val &= ~POR_EN;
+	kserdes_writel(sregs, CPU_CTRL_REG, val);
+
+	FINSR(sregs, CMU0_REG(0x0), 23, 16, 0x80);
+	FINSR(sregs, CMU1_REG(0x10), 31, 24, 0x40);
+
+	val |= (CPU_EN | CPU_GO);
+	kserdes_writel(sregs, CPU_CTRL_REG, val);
+}
+
+static void kserdes_mcu_mem_init(struct kserdes_config *sc)
+{
+	struct kserdes_mcu_fw_config *fw = &sc->mcu_fw;
+	u32 i, lane_config = 0;
+
+	for_each_lane(sc, i)
+		lane_config = (lane_config << 8) | (fw->lane_config[i] & 0xff);
+
+	lane_config <<= 8;
+
+	kserdes_writel(sc->regs, MEM_ADR_REG, KSERDES_XFW_CONFIG_START_ADDR);
+
+	for (i = KSERDES_XFW_CONFIG_START_ADDR;
+	     i < KSERDES_XFW_PARAM_START_ADDR; i += 4)
+		kserdes_writel(sc->regs, MEM_DATINC_REG, 0x00000000);
+
+	kserdes_writel(sc->regs, MEM_DATINC_REG, XFM_FLUSH_CMD);
+	kserdes_writel(sc->regs, MEM_DATINC_REG, fw->fast_train);
+	kserdes_writel(sc->regs, MEM_DATINC_REG, 0x00000000);
+	kserdes_writel(sc->regs, MEM_DATINC_REG, fw->lane_seeds);
+	kserdes_writel(sc->regs, MEM_DATINC_REG, lane_config);
+}
+
+static int kserdes_mcu_fw_start(struct kserdes_config *sc)
+{
+	struct kserdes_mcu_fw_config *fw = &sc->mcu_fw;
+	u32 i;
+	int ret = 0;
+
+	_kserdes_pll_disable(sc->regs);
+	_kserdes_pll2_disable(sc->regs);
+
+	_kserdes_reset(sc->regs);
+
+	for_each_lane(sc, i)
+		_kserdes_lane_enable(sc->regs, i);
+
+	_kserdes_set_link_loss_wait(sc->regs, fw->link_loss_wait);
+
+	kserdes_xge_pll_enable(sc);
+
+	kserdes_mcu_mem_init(sc);
+
+	ret = kserdes_load_init_fw(sc, ks2_xgbe_serdes_mcu_firmwares,
+				   ARRAY_SIZE(ks2_xgbe_serdes_mcu_firmwares));
+	if (ret)
+		return ret;
+
+	_kserdes_restart_mcu(sc->regs);
+
+	/* 10G Auto-Negotiation Handling:
+	 * Wait to see if we can synchronize with other side.
+	 * If it doesn't it may require an interface
+	 * toggle after boot
+	 */
+	kserdes_mcu_fw_auto_neg_status(sc);
+
+	_kserdes_enable_xgmii_port_select(sc->peripheral_regmap,
+					  GENMASK(sc->lanes - 1, 0));
+
+	usleep_range(100, 200);
+
+	ret = kserdes_check_lanes_status(sc);
+	if (ret) {
+		kserdes_mcu_fw_check_download(sc);
+		return ret;
+	}
+
+	sc->mcu_fw.on = true;
+	return ret;
+}
+
 static int kserdes_xge_init(struct kserdes_config *sc)
 {
+	if (sc->use_mcu_fw) {
+		if (sc->mcu_fw.on) {
+			dev_info(sc->dev, "serdes firmware already started\n");
+			return 0;
+		}
+
+		return kserdes_mcu_fw_start(sc);
+	}
+
 	_kserdes_reset(sc->regs);
 	return kserdes_load_init_fw(sc, ks2_xgbe_serdes_firmwares,
 				    ARRAY_SIZE(ks2_xgbe_serdes_firmwares));
@@ -2267,13 +2410,96 @@ static struct phy_ops kserdes_phy_ops = {
 	.owner		= THIS_MODULE,
 };
 
+static int kserdes_mcu_fw_of_parse(struct device_node *node,
+				   struct kserdes_config *sc)
+{
+	struct kserdes_mcu_fw_config *fw = &sc->mcu_fw;
+	struct device_node *lane;
+	u32 rate, lnum;
+	int ret;
+
+	/* Get random lane seeds */
+	get_random_bytes(&fw->lane_seeds, sizeof(u32));
+	fw->lane_seeds &= 0x00ffff00;
+
+	fw->link_loss_wait = 20000;
+	/* Flush 64 bytes 0c,0d,0e,0f FAST Train */
+	fw->fast_train = 0x60000000;
+
+	/* get lane configs via DTS */
+	for_each_available_child_of_node(node, lane) {
+		ret = of_property_read_u32(lane, "reg", &lnum);
+		if (ret) {
+			dev_err(sc->dev, "Failed to parse reg\n");
+			return -EINVAL;
+		}
+
+		/* Set active lane(s) for polling */
+		fw->active_lane |= BIT(lnum);
+
+		/* get lane rate from DTS
+		 * 0=1g/10g, 1=force 1g, 2=force 10g
+		 */
+		of_property_read_u32(lane, "rate", &rate);
+		if (rate == 0) {
+			fw->lane_config[lnum] |= BIT(6);
+			fw->lane_config[lnum] |= BIT(5);
+		} else if (rate == 1) {
+			fw->lane_config[lnum] |= BIT(5);
+		} else if (rate == 2) {
+			fw->lane_config[lnum] |= BIT(6);
+		} else {
+			/* default to 1G/10G */
+			dev_err(sc->dev,
+				"Invalid lane rate defined. Using 1/10G.\n");
+			fw->lane_config[lnum] |= BIT(6);
+			fw->lane_config[lnum] |= BIT(5);
+		}
+
+		/* get lane properties from DTS */
+		if (of_find_property(lane, "autonegotiate", NULL))
+			fw->lane_config[lnum] |= BIT(7);
+
+		if (of_find_property(lane, "tx_pause", NULL))
+			fw->lane_config[lnum] |= BIT(4);
+
+		if (of_find_property(lane, "rx_pause", NULL))
+			fw->lane_config[lnum] |= BIT(3);
+
+		if (of_find_property(lane, "10g_train", NULL))
+			fw->lane_config[lnum] |= BIT(2);
+
+		if (of_find_property(lane, "fec", NULL))
+			fw->lane_config[lnum] |= BIT(1);
+	}
+
+	if (fw->active_lane == 0) {
+		dev_err(sc->dev, "No active serdes firmware lanes defined.");
+		return -EINVAL;
+	}
+
+	dev_dbg(sc->dev, "Active serdes fw lane(s): 0x%x", fw->active_lane);
+
+	/* Both lanes should be configured even if one is not in use, just
+	 * mirror the config over in that case.
+	 */
+	if (fw->active_lane == 0x1 || fw->active_lane == 0x2) {
+		if (fw->lane_config[0] & 0xff)
+			fw->lane_config[1] = fw->lane_config[0];
+		else if (fw->lane_config[1] & 0xff)
+			fw->lane_config[0] = fw->lane_config[1];
+	}
+
+	return 0;
+}
+
 static int kserdes_of_parse(struct platform_device *pdev,
 			    struct kserdes_dev *sd,
 			    struct device_node *np)
 {
 	const struct of_device_id *of_id;
 	struct kserdes_config *sc = &sd->sc;
-	struct device_node *child;
+	struct device_node *child, *fw_np;
 	struct device *dev = sd->dev;
 	struct resource res;
 	void __iomem *regs;
@@ -2340,6 +2566,14 @@ static int kserdes_of_parse(struct platform_device *pdev,
 		dev_info(dev, "use max allowed lanes %d\n", sc->lanes);
 	}
 
+	fw_np = of_get_child_by_name(np, "mcu-firmware");
+	if (fw_np && of_device_is_available(fw_np)) {
+		sc->use_mcu_fw = true;
+		ret = kserdes_mcu_fw_of_parse(fw_np, sc);
+		of_node_put(fw_np);
+		return ret;
+	}
+
 	if (of_property_read_bool(np, "rx-force-enable"))
 		sc->rx_force_enable = true;
 	else
@@ -2351,6 +2585,9 @@ static int kserdes_of_parse(struct platform_device *pdev,
 		struct kserdes_phy *ks_phy;
 		struct phy *phy;
 
+		if (child == fw_np)
+			continue;
+
 		lane = kserdes_of_parse_lane(dev, child, sc);
 		if (lane < 0) {
 			ret = lane;
@@ -2392,7 +2629,7 @@ static int kserdes_provider_lanes_enable_common(struct kserdes_config *sc)
 	unsigned long lanes_needed = 0;
 	int ret, i;
 
-	if (sc->firmware)
+	if (sc->use_mcu_fw)
 		return 0;
 
 	for_each_enable_lane(sc, i)
-- 
1.7.5.4

