From f0341c8092c13c5383247ee1319b507ec10ff908 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Fri, 29 Apr 2016 16:07:36 -0400
Subject: [PATCH 221/347] soc: ti: saving qmss clock in driver storage

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Some QMSS drivers requires the knowledge of the
clock rate at which the QMSS hardware subsystem
is running at in order to configure other hardware
components correctly.  This patch makes the changes
to save the QMSS clock in its private structure.

This change is backward compatible such that no error
will be posted if no "qmss_clk" is specified.  The
only consequence is that future driver modules
requiring the knowledge of qmss clock rate won't be
supported.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit d99287d4e05d6a617a3b709dcf3027647c9c2a72)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../bindings/soc/ti/keystone-navigator-qmss.txt    |    2 ++
 drivers/soc/ti/knav_qmss.h                         |    1 +
 drivers/soc/ti/knav_qmss_queue.c                   |    6 ++++++
 3 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt b/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
index d889cf0..04ad226 100644
--- a/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
+++ b/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
@@ -20,6 +20,7 @@ Required properties:
 - compatible	: Must be "ti,keystone-navigator-qmss";
 		: Must be "ti,keystone-navigator-qmss-l" for NSS Lite
 - clocks	: phandle to the reference clock for this device.
+- clock-names	: names of the clocks in the clocks property.
 - queue-range	: <start number> total range of queue numbers for the device.
 - linkram0	: <address size> for internal link ram, where size is the total
 		  link ram entries.
@@ -125,6 +126,7 @@ qmss: qmss@2a40000 {
 	#address-cells = <1>;
 	#size-cells = <1>;
 	clocks = <&chipclk13>;
+	clock-names = "qmss_clk";
 	ranges;
 	queue-range	= <0 0x4000>;
 	linkram0	= <0x100000 0x8000>;
diff --git a/drivers/soc/ti/knav_qmss.h b/drivers/soc/ti/knav_qmss.h
index d5b7c76..10b943c 100644
--- a/drivers/soc/ti/knav_qmss.h
+++ b/drivers/soc/ti/knav_qmss.h
@@ -302,6 +302,7 @@ enum qmss_version {
 
 struct knav_device {
 	struct device				*dev;
+	struct clk				*clk;
 	unsigned				base_id;
 	unsigned				num_queues;
 	unsigned				num_queues_in_use;
diff --git a/drivers/soc/ti/knav_qmss_queue.c b/drivers/soc/ti/knav_qmss_queue.c
index 523c613..8fcf180 100644
--- a/drivers/soc/ti/knav_qmss_queue.c
+++ b/drivers/soc/ti/knav_qmss_queue.c
@@ -16,6 +16,7 @@
  * General Public License for more details.
  */
 
+#include <linux/clk.h>
 #include <linux/debugfs.h>
 #include <linux/dma-mapping.h>
 #include <linux/firmware.h>
@@ -1861,6 +1862,11 @@ static int knav_queue_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, kdev);
 	kdev->dev = dev;
+
+	kdev->clk = clk_get(dev, "qmss_clk");
+	if (IS_ERR(kdev->clk))
+		kdev->clk = NULL;
+
 	INIT_LIST_HEAD(&kdev->queue_ranges);
 	INIT_LIST_HEAD(&kdev->qmgrs);
 	INIT_LIST_HEAD(&kdev->pools);
-- 
1.7.5.4

