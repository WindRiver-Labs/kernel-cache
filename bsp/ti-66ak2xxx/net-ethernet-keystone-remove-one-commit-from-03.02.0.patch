From 791f6ad6b8c7340ce65d52bf1c1e1261f33b3350 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Fri, 14 Apr 2017 10:19:49 +0800
Subject: [PATCH 329/347] net: ethernet: keystone: remove one commit from
 03.02.00.05

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

The commit b1cb86ae0 comes from 03.02.00.05, which seems no longer
necessary any more by 03.03.00.04, so remove it.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/ti/netcp_core.c |   83 +++++----------------------------
 include/linux/soc/ti/knav_dma.h      |   24 +++++-----
 2 files changed, 24 insertions(+), 83 deletions(-)

diff --git a/drivers/net/ethernet/ti/netcp_core.c b/drivers/net/ethernet/ti/netcp_core.c
index 7d66e97..3a309ee 100644
--- a/drivers/net/ethernet/ti/netcp_core.c
+++ b/drivers/net/ethernet/ti/netcp_core.c
@@ -103,30 +103,6 @@ static int netcp_debug_level = -1;
 module_param(netcp_debug_level, int, 0);
 MODULE_PARM_DESC(netcp_debug_level, "Netcp debug level (NETIF_MSG bits) (0=none,...,16=all)");
 
-static u32 get_sw_data(int index, struct knav_dma_desc *desc)
-{
-	/* No Endian conversion needed as this data is untouched by hw */
-	return desc->sw_data[index];
-}
-
-/* use these macros to get sw data */
-#define GET_SW_DATA0(desc) get_sw_data(0, desc)
-#define GET_SW_DATA1(desc) get_sw_data(1, desc)
-#define GET_SW_DATA2(desc) get_sw_data(2, desc)
-#define GET_SW_DATA3(desc) get_sw_data(3, desc)
-
-static void set_sw_data(int index, u32 data, struct knav_dma_desc *desc)
-{
-	/* No Endian conversion needed as this data is untouched by hw */
-	desc->sw_data[index] = data;
-}
-
-/* use these macros to set sw data */
-#define SET_SW_DATA0(data, desc) set_sw_data(0, data, desc)
-#define SET_SW_DATA1(data, desc) set_sw_data(1, data, desc)
-#define SET_SW_DATA2(data, desc) set_sw_data(2, data, desc)
-#define SET_SW_DATA3(data, desc) set_sw_data(3, data, desc)
-
 /* Read the e-fuse value as 32 bit values to be endian independent */
 static int emac_arch_get_mac_addr(char *x, void __iomem *efuse_mac, u32 swap)
 {
@@ -537,20 +513,10 @@ static void netcp_free_rx_desc_chain(struct netcp_intf *netcp,
 		}
 		knav_dma_get_pkt_info(&dma_buf, &tmp, &dma_desc, ndesc);
 		knav_dma_get_pad_info((u32 *)&buf_ptr, &tmp, ndesc);
-		/* warning!!!! We are retrieving the virtual ptr in the sw_data
-		 * field as a 32bit value. Will not work on 64bit machines
-		 */
-		buf_ptr = (void *)GET_SW_DATA0(ndesc);
-		buf_len = (int)GET_SW_DATA1(desc);
 		dma_unmap_page(netcp->dev, dma_buf, PAGE_SIZE, DMA_FROM_DEVICE);
 		__free_page(buf_ptr);
 		knav_pool_desc_put(netcp->rx_pool, desc);
 	}
-	/* warning!!!! We are retrieving the virtual ptr in the sw_data
-	 * field as a 32bit value. Will not work on 64bit machines
-	 */
-	buf_ptr = (void *)GET_SW_DATA0(desc);
-	buf_len = (int)GET_SW_DATA1(desc);
 
 	knav_dma_get_pad_info((u32 *)&buf_ptr, &buf_len, desc);
 	if (buf_ptr)
@@ -593,6 +559,7 @@ static int netcp_process_one_rx_packet(struct netcp_intf *netcp)
 	struct netcp_packet p_info;
 	struct sk_buff *skb;
 	void *org_buf_ptr;
+	u32 tmp;
 
 	dma_desc = knav_queue_pop(netcp->rx_queue, &dma_sz);
 	if (!dma_desc)
@@ -607,12 +574,6 @@ static int netcp_process_one_rx_packet(struct netcp_intf *netcp)
 	knav_dma_get_pkt_info(&dma_buff, &buf_len, &dma_desc, desc);
 	knav_dma_get_pad_info((u32 *)&org_buf_ptr, &org_buf_len, desc);
 
-	/* warning!!!! We are retrieving the virtual ptr in the sw_data
-	 * field as a 32bit value. Will not work on 64bit machines
-	 */
-	org_buf_ptr = (void *)GET_SW_DATA0(desc);
-	org_buf_len = (int)GET_SW_DATA1(desc);
-
 	if (unlikely(!org_buf_ptr)) {
 		dev_err(netcp->ndev_dev, "NULL bufptr in desc\n");
 		goto free_desc;
@@ -646,17 +607,12 @@ static int netcp_process_one_rx_packet(struct netcp_intf *netcp)
 		knav_dma_get_pkt_info(&dma_buff, &buf_len, &dma_desc, ndesc);
 		knav_dma_get_pad_info((u32 *)&page, &tmp, ndesc);
 
-		/* warning!!!! We are retrieving the virtual ptr in the sw_data
-		 * field as a 32bit value. Will not work on 64bit machines
-		 */
-		page = (struct page *)GET_SW_DATA0(desc);
-
 		if (likely(dma_buff && buf_len && page)) {
 			dma_unmap_page(netcp->dev, dma_buff, PAGE_SIZE,
 				       DMA_FROM_DEVICE);
 		} else {
-			dev_err(netcp->ndev_dev, "Bad Rx desc dma_buff(%pad), len(%d), page(%p)\n",
-				&dma_buff, buf_len, page);
+			dev_err(netcp->ndev_dev, "Bad Rx desc dma_buff(%p), len(%d), page(%p)\n",
+				(void *)dma_buff, buf_len, page);
 			goto free_desc;
 		}
 
@@ -740,6 +696,7 @@ static void netcp_free_rx_buf(struct netcp_intf *netcp, int fdq)
 	unsigned int buf_len, dma_sz;
 	dma_addr_t dma;
 	void *buf_ptr;
+	u32 tmp;
 
 	/* Allocate descriptor */
 	while ((dma = knav_queue_pop(netcp->rx_fdq[fdq], &dma_sz))) {
@@ -749,11 +706,8 @@ static void netcp_free_rx_buf(struct netcp_intf *netcp, int fdq)
 			continue;
 		}
 
-		get_org_pkt_info(&dma, &buf_len, desc);
-		/* warning!!!! We are retrieving the virtual ptr in the sw_data
-		 * field as a 32bit value. Will not work on 64bit machines
-		 */
-		buf_ptr = (void *)GET_SW_DATA0(desc);
+		knav_get_org_pkt_info(&dma, &buf_len, desc);
+		knav_dma_get_pad_info((u32 *)&buf_ptr, &tmp, desc);
 
 		if (unlikely(!dma)) {
 			dev_err(netcp->ndev_dev, "NULL orig_buff in desc\n");
@@ -805,7 +759,7 @@ static int netcp_allocate_rx_buf(struct netcp_intf *netcp, int fdq)
 	struct page *page;
 	dma_addr_t dma;
 	void *bufptr;
-	u32 sw_data[2];
+	u32 pad[2];
 
 	/* Allocate descriptor */
 	hwdesc = knav_pool_desc_get(netcp->rx_pool);
@@ -822,7 +776,7 @@ static int netcp_allocate_rx_buf(struct netcp_intf *netcp, int fdq)
 				SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 
 		bufptr = netdev_alloc_frag(primary_buf_len);
-		sw_data[1] = primary_buf_len;
+		pad[1] = primary_buf_len;
 
 		if (unlikely(!bufptr)) {
 			dev_warn_ratelimited(netcp->ndev_dev,
@@ -834,10 +788,8 @@ static int netcp_allocate_rx_buf(struct netcp_intf *netcp, int fdq)
 		if (unlikely(dma_mapping_error(netcp->dev, dma)))
 			goto fail;
 
-		/* warning!!!! We are saving the virtual ptr in the sw_data
-		 * field as a 32bit value. Will not work on 64bit machines
-		 */
-		sw_data[0] = (u32)bufptr;
+		pad[0] = (u32)bufptr;
+
 	} else {
 		/* Allocate a secondary receive queue entry */
 		page = alloc_page(GFP_ATOMIC | GFP_DMA | __GFP_COLD);
@@ -847,11 +799,8 @@ static int netcp_allocate_rx_buf(struct netcp_intf *netcp, int fdq)
 		}
 		buf_len = PAGE_SIZE;
 		dma = dma_map_page(netcp->dev, page, 0, buf_len, DMA_TO_DEVICE);
-		/* warning!!!! We are saving the virtual ptr in the sw_data
-		 * field as a 32bit value. Will not work on 64bit machines
-		 */
-		sw_data[0] = (u32)page;
-		sw_data[1] = 0;
+		pad[0] = (u32)page;
+		pad[1] = 0;
 	}
 
 	desc_info =  KNAV_DMA_DESC_PS_INFO_IN_DESC;
@@ -862,8 +811,6 @@ static int netcp_allocate_rx_buf(struct netcp_intf *netcp, int fdq)
 		    KNAV_DMA_DESC_RETQ_SHIFT;
 	knav_dma_set_org_pkt_info(dma, buf_len, hwdesc);
 	knav_dma_set_pad_info(pad[0], pad[1], hwdesc);
-	SET_SW_DATA0(sw_data[0], hwdesc);
-	SET_SW_DATA1(sw_data[1], hwdesc);
 	knav_dma_set_desc_info(desc_info, pkt_info, hwdesc);
 
 	/* Push to FDQs */
@@ -1188,10 +1135,6 @@ static int netcp_tx_submit_skb(struct netcp_intf *netcp,
 	}
 
 	knav_dma_set_words(&tmp, 1, &desc->packet_info);
-	/* warning!!!! We are saving the virtual ptr in the sw_data
-	 * field as a 32bit value. Will not work on 64bit machines
-	 */
-	SET_SW_DATA0((u32)skb, desc);
 	knav_dma_set_words((u32 *)&skb, 1, &desc->pad[0]);
 	knav_dma_set_words((u32 *)&pi, 1, &desc->pad[1]);
 
@@ -1798,7 +1741,7 @@ static void netcp_ndo_tx_timeout(struct net_device *ndev)
 {
 	struct netcp_intf *netcp = netdev_priv(ndev);
 
-	dev_err(netcp->ndev_dev, "transmit timed out tx descs(%d)\n", descs);
+	dev_err(netcp->ndev_dev, "transmit timed out");
 	netcp_process_tx_compl_packets(netcp, netcp->tx_compl_budget);
 	netif_trans_update(ndev);
 
diff --git a/include/linux/soc/ti/knav_dma.h b/include/linux/soc/ti/knav_dma.h
index 2caebbc..81a827e 100644
--- a/include/linux/soc/ti/knav_dma.h
+++ b/include/linux/soc/ti/knav_dma.h
@@ -48,7 +48,6 @@
 
 #define KNAV_DMA_NUM_EPIB_WORDS			4
 #define KNAV_DMA_NUM_PS_WORDS			16
-#define KNAV_DMA_NUM_SW_DATA_WORDS		4
 #define KNAV_DMA_FDQ_PER_CHAN			4
 
 /* Tx channel scheduling priority */
@@ -147,20 +146,19 @@ struct knav_dma_cfg {
  * @orig_buff:			buff pointer since 'buff' can be overwritten
  * @epib:			Extended packet info block
  * @psdata:			Protocol specific
- * @sw_data:			Software private data not touched by h/w
  */
 struct knav_dma_desc {
-	__le32	desc_info;
-	__le32	tag_info;
-	__le32	packet_info;
-	__le32	buff_len;
-	__le32	buff;
-	__le32	next_desc;
-	__le32	orig_len;
-	__le32	orig_buff;
-	__le32	epib[KNAV_DMA_NUM_EPIB_WORDS];
-	__le32	psdata[KNAV_DMA_NUM_PS_WORDS];
-	u32	sw_data[KNAV_DMA_NUM_SW_DATA_WORDS];
+	u32	desc_info;
+	u32	tag_info;
+	u32	packet_info;
+	u32	buff_len;
+	u32	buff;
+	u32	next_desc;
+	u32	orig_len;
+	u32	orig_buff;
+	u32	epib[KNAV_DMA_NUM_EPIB_WORDS];
+	u32	psdata[KNAV_DMA_NUM_PS_WORDS];
+	u32	pad[4];
 } ____cacheline_aligned;
 
 #if IS_ENABLED(CONFIG_KEYSTONE_NAVIGATOR_DMA)
-- 
1.7.5.4

