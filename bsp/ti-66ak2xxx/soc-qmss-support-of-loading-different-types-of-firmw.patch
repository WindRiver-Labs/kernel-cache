From 367260e526f5ac00edd6cec260d684c7e30da396 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Sat, 5 Mar 2016 10:23:30 -0500
Subject: [PATCH 222/347] soc: qmss: support of loading different types of
 firmware to pdsp

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Prior to this patch, it only supports the loading of accumulator
firmware to a QMSS PDSP.  This patch adds the support of loading
different types of firmware to a PDSP by specifying a "firmware_type"
in a QMSS PDSP devicetree bindings.

The changes are backward compatible with previous releases in
that if no PDSP firmware_type is specified, it is assumed to
be loaded with accumulator firmware.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 7bbeeba6cf4ee9613610914875ddc095fede26b0)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../bindings/soc/ti/keystone-navigator-qmss.txt    |    3 +-
 drivers/soc/ti/knav_qmss.h                         |    6 ++++
 drivers/soc/ti/knav_qmss_acc.c                     |    2 +-
 drivers/soc/ti/knav_qmss_queue.c                   |   28 +++++++++++++++-----
 4 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt b/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
index 04ad226..5a47bf6 100644
--- a/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
+++ b/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
@@ -102,7 +102,7 @@ For NSS lite, following QMSS reg indexes are used in that order
 Optional properties:
 - dma-coherent	: Present if DMA operations are coherent.
 - pdsps		: child node describing the PDSP configuration.
-  -- firmware		: firmware to be loaded on the PDSP.
+  -- firmware_type	: type of firmware to be loaded on the PDSP.
   -- id			: the qmss pdsp that will run the firmware.
   -- syscon-intd	: Handle to the syscon regmap of the QMSS interrupt
 			  distributor register region.
@@ -236,6 +236,7 @@ qmss: qmss@2a40000 {
 		#size-cells = <1>;
 		ranges;
 		pdsp0@0x2a10000 {
+			firmware_type = "acc";
 			syscon-intd = <&pdsp_intd>;
 			reg = <0x2a10000 0x1000>,
 			      <0x2a0f000 0x100>,
diff --git a/drivers/soc/ti/knav_qmss.h b/drivers/soc/ti/knav_qmss.h
index 10b943c..156842e 100644
--- a/drivers/soc/ti/knav_qmss.h
+++ b/drivers/soc/ti/knav_qmss.h
@@ -127,6 +127,9 @@ struct knav_acc_channel {
 	atomic_t		retrigger_count;
 };
 
+#define KNAV_PDSP_FW_TYPE_ACC				0
+#define KNAV_PDSP_FW_TYPE_QOS				1
+
 struct knav_pdsp_info {
 	const char					*name;
 	struct knav_reg_pdsp_regs  __iomem		*regs;
@@ -138,6 +141,9 @@ struct knav_pdsp_info {
 	struct regmap					*intd_regmap;
 	void __iomem					*intd;
 	u32 __iomem					*iram;
+	const char					**firmware;
+	u32						num_firmwares;
+	u32						firmware_type;
 	u32						id;
 	struct list_head				list;
 	bool						loaded;
diff --git a/drivers/soc/ti/knav_qmss_acc.c b/drivers/soc/ti/knav_qmss_acc.c
index 72affdb..9d2dc2f 100644
--- a/drivers/soc/ti/knav_qmss_acc.c
+++ b/drivers/soc/ti/knav_qmss_acc.c
@@ -518,7 +518,7 @@ int knav_init_acc_range(struct knav_device *kdev,
 		return -EINVAL;
 	}
 
-	if (!pdsp->started) {
+	if (!pdsp->started || (pdsp->firmware_type != KNAV_PDSP_FW_TYPE_ACC)) {
 		dev_err(kdev->dev, "pdsp id %d not started for range %s\n",
 			info->pdsp_id, range->name);
 		return -ENODEV;
diff --git a/drivers/soc/ti/knav_qmss_queue.c b/drivers/soc/ti/knav_qmss_queue.c
index 8fcf180..867431b 100644
--- a/drivers/soc/ti/knav_qmss_queue.c
+++ b/drivers/soc/ti/knav_qmss_queue.c
@@ -1595,6 +1595,7 @@ static int knav_queue_init_pdsps(struct knav_device *kdev,
 	struct device *dev = kdev->dev;
 	struct knav_pdsp_info *pdsp;
 	struct device_node *child;
+	const char *fw_type;
 	int ret;
 
 	for_each_child_of_node(pdsps, child) {
@@ -1611,6 +1612,19 @@ static int knav_queue_init_pdsps(struct knav_device *kdev,
 			continue;
 		}
 
+		ret = of_property_read_string(child, "firmware_type", &fw_type);
+		if ((ret < 0) || !fw_type || (strcmp(fw_type, "acc") == 0)) {
+			pdsp->firmware  = &knav_acc_firmwares[0];
+			pdsp->num_firmwares = ARRAY_SIZE(knav_acc_firmwares);
+			pdsp->firmware_type = KNAV_PDSP_FW_TYPE_ACC;
+		} else {
+			dev_err(dev, "unknown firmware_type %s for pdsp %s\n",
+				fw_type, pdsp->name);
+			devm_kfree(dev, pdsp);
+			continue;
+		}
+		dev_dbg(dev, "%s: fw type %s\n", pdsp->name, fw_type);
+
 		of_property_read_u32(child, "id", &pdsp->id);
 		list_add_tail(&pdsp->list, &kdev->pdsps);
 		if (pdsp->intd) {
@@ -1653,10 +1667,9 @@ static int knav_queue_load_pdsp(struct knav_device *kdev,
 	bool found = false;
 	u32 *fwdata;
 
-	for (i = 0; i < ARRAY_SIZE(knav_acc_firmwares); i++) {
-		if (knav_acc_firmwares[i]) {
-			ret = request_firmware_direct(&fw,
-						      knav_acc_firmwares[i],
+	for (i = 0; i < pdsp->num_firmwares; i++) {
+		if (pdsp->firmware[i]) {
+			ret = request_firmware_direct(&fw, pdsp->firmware[i],
 						      kdev->dev);
 			if (!ret) {
 				found = true;
@@ -1666,12 +1679,13 @@ static int knav_queue_load_pdsp(struct knav_device *kdev,
 	}
 
 	if (!found) {
-		dev_err(kdev->dev, "failed to get firmware for pdsp\n");
+		dev_err(kdev->dev, "failed to get firmware for pdsp %s\n",
+			pdsp->name);
 		return -ENODEV;
 	}
 
-	dev_info(kdev->dev, "firmware file %s downloaded for PDSP\n",
-		 knav_acc_firmwares[i]);
+	dev_info(kdev->dev, "firmware file %s downloaded for %s\n",
+		 pdsp->firmware[i], pdsp->name);
 
 	writel_relaxed(pdsp->id + 1, pdsp->command + 0x18);
 	/* download the firmware */
-- 
1.7.5.4

