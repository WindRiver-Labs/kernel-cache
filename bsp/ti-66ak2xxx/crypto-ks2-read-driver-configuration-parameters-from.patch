From be182224774294bcbfa5270cb8f2ac4b06fdb0fa Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Thu, 7 Jul 2016 13:06:43 -0400
Subject: [PATCH 305/347] crypto: ks2: read driver configuration parameters
 from dtb

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

This commit adds configuration fields such tx and rx queue numbers,
buffer sizes, etc. to the driver instance data structure.
It also adds the function to read the corresponding parameters from dtb.

Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit b8e46009f948a5c06964c749fa33f2524e62f15e)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/crypto/keystone-sa-hlp.h |   29 ++++++++++
 drivers/crypto/keystone-sa.c     |  113 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 142 insertions(+), 0 deletions(-)

diff --git a/drivers/crypto/keystone-sa-hlp.h b/drivers/crypto/keystone-sa-hlp.h
index a19539e..9edc7cc 100644
--- a/drivers/crypto/keystone-sa-hlp.h
+++ b/drivers/crypto/keystone-sa-hlp.h
@@ -19,10 +19,39 @@
 #ifndef _KEYSTONE_SA_HLP_
 #define _KEYSTONE_SA_HLP_
 
+#include <linux/soc/ti/knav_dma.h>
+#include <linux/regmap.h>
+
+#define SA_PID_OFS		0
+#define SA_CMD_STATUS_OFS	0x8
+#define SA_PA_FLOWID_OFS	0x10
+#define SA_CDMA_FLOWID_OFS	0x14
+#define	SA_PA_ENG_ID_OFS	0x18
+#define	SA_CDMA_ENG_ID_OFS	0x1C
+
 /* Crypto driver instance data */
 struct keystone_crypto_data {
 	struct platform_device	*pdev;
 	struct clk		*clk;
+	struct regmap	*sa_regmap;
+	u32		tx_submit_qid;
+	u32		tx_compl_qid;
+	u32		rx_compl_qid;
+	const char	*rx_chan_name;
+	const char	*tx_chan_name;
+	u32		tx_queue_depth;
+	u32		rx_queue_depths[KNAV_DMA_FDQ_PER_CHAN];
+	u32		rx_pool_size;
+	u32		rx_pool_region_id;
+	u32		tx_pool_size;
+	u32		tx_pool_region_id;
+
+	/* Security context data */
+	u16		sc_id_start;
+	u16		sc_id_end;
+	u16		sc_id;
+	atomic_t	rx_dma_page_cnt; /* N buf from 2nd pool available */
+	atomic_t	tx_dma_desc_cnt; /* Tx DMA desc-s available */
 };
 
 extern struct device *sa_ks2_dev;
diff --git a/drivers/crypto/keystone-sa.c b/drivers/crypto/keystone-sa.c
index 17e1e76..c1dbb54 100644
--- a/drivers/crypto/keystone-sa.c
+++ b/drivers/crypto/keystone-sa.c
@@ -24,12 +24,117 @@
 #include <linux/init.h>
 #include <linux/slab.h>
 #include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
 #include <linux/platform_device.h>
 #include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/mfd/syscon.h>
+#include <linux/soc/ti/knav_dma.h>
 #include "keystone-sa-hlp.h"
 
 struct device *sa_ks2_dev;
 
+static int sa_read_dtb(struct device_node *node,
+		       struct keystone_crypto_data *dev_data)
+{
+	int i, ret = 0;
+	struct device *dev = &dev_data->pdev->dev;
+	u32 temp[2];
+
+	ret = of_property_read_string(node, "ti,tx-channel",
+				      &dev_data->tx_chan_name);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,tx-channel\" parameter\n");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(node, "ti,tx-queue-depth",
+				       &dev_data->tx_queue_depth);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,tx-queue-depth\" parameter\n");
+		return -EINVAL;
+	}
+
+	atomic_set(&dev_data->tx_dma_desc_cnt, dev_data->tx_queue_depth);
+
+	ret = of_property_read_u32(node, "ti,tx-submit-queue",
+				       &dev_data->tx_submit_qid);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,tx-submit-queue\" parameter\n");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(node, "ti,tx-completion-queue",
+				       &dev_data->tx_compl_qid);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,tx-completion-queue\" parameter\n");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_string(node, "ti,rx-channel",
+				      &dev_data->rx_chan_name);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,rx-channel\" parameter\n");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32_array(node, "ti,rx-queue-depth",
+					 dev_data->rx_queue_depths,
+					 KNAV_DMA_FDQ_PER_CHAN);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,rx-queue-depth\" parameter\n");
+		return -EINVAL;
+	}
+	for (i = 0; i < KNAV_DMA_FDQ_PER_CHAN; i++)
+		dev_dbg(dev, "rx-queue-depth[%d]= %u\n", i,
+			dev_data->rx_queue_depths[i]);
+
+	atomic_set(&dev_data->rx_dma_page_cnt, 0);
+
+	ret = of_property_read_u32(node, "ti,rx-compl-queue",
+				       &dev_data->rx_compl_qid);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,rx-compl-queue\" parameter\n");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32_array(node, "ti,tx-pool", temp, 2);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,tx-pool\" parameter\n");
+		return -EINVAL;
+	}
+	dev_data->tx_pool_size = temp[0];
+	dev_data->tx_pool_region_id = temp[1];
+
+	ret = of_property_read_u32_array(node, "ti,rx-pool", temp, 2);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,rx-pool\" parameter\n");
+		return -EINVAL;
+	}
+	dev_data->rx_pool_size = temp[0];
+	dev_data->rx_pool_region_id = temp[1];
+
+	ret = of_property_read_u32_array(node, "ti,sc-id", temp, 2);
+	if (ret < 0) {
+		dev_err(dev, "missing \"ti,sc-id\" parameter\n");
+		return -EINVAL;
+	}
+	dev_data->sc_id_start = temp[0];
+	dev_data->sc_id_end = temp[1];
+	dev_data->sc_id = dev_data->sc_id_start;
+
+	dev_data->sa_regmap = syscon_regmap_lookup_by_phandle(node,
+							      "syscon-subsys");
+
+	if (IS_ERR(dev_data->sa_regmap)) {
+		dev_err(dev, "syscon_regmap_lookup_by_phandle failed\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static int keystone_crypto_remove(struct platform_device *pdev)
 {
 	pm_runtime_put_sync(&pdev->dev);
@@ -41,6 +146,7 @@ static int keystone_crypto_remove(struct platform_device *pdev)
 static int keystone_crypto_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
+	struct device_node *node = pdev->dev.of_node;
 	struct keystone_crypto_data *dev_data;
 	int ret;
 
@@ -60,6 +166,13 @@ static int keystone_crypto_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	/* Read configuration from device tree */
+	ret = sa_read_dtb(node, dev_data);
+	if (ret) {
+		dev_err(dev, "Failed to get all relevant configurations from DTB...\n");
+		return ret;
+	}
+
 	platform_set_drvdata(pdev, dev_data);
 
 	dev_info(dev, "crypto accelerator enabled\n");
-- 
1.7.5.4

