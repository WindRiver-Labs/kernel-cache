From 6e7c2cc6c4d6baa10e1d76e2def02f66f5cee8f2 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Thu, 28 Apr 2016 17:07:01 -0400
Subject: [PATCH 216/347] soc: ti: qmss: fix error in shared access of QMSS
 INTD by multiple pdsps

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Keystone Navigator QMSS has one INTD (interrupt distributor) shared by
all the PDSPs.  Current implementation does not allow remapping the
INTD register region if more than one PDSP are enabled and hence only
works when only one PDSP is enabled.

This patch fixes the problem by using syscon regmap to map the INTD
register region and hence can be shared by multiple PDSPs.

This fix is backward compatible when only one PDSP is enabled.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 8f3a4b7354645a845c1e8233e058fca4c84037ba)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../bindings/soc/ti/keystone-navigator-qmss.txt    |   10 ++-
 drivers/soc/ti/knav_qmss.h                         |   29 ++++++
 drivers/soc/ti/knav_qmss_acc.c                     |   19 ++--
 drivers/soc/ti/knav_qmss_queue.c                   |   98 ++++++++++++++------
 4 files changed, 115 insertions(+), 41 deletions(-)

diff --git a/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt b/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
index f4d1178..d889cf0 100644
--- a/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
+++ b/Documentation/devicetree/bindings/soc/ti/keystone-navigator-qmss.txt
@@ -103,16 +103,22 @@ Optional properties:
 - pdsps		: child node describing the PDSP configuration.
   -- firmware		: firmware to be loaded on the PDSP.
   -- id			: the qmss pdsp that will run the firmware.
+  -- syscon-intd	: Handle to the syscon regmap of the QMSS interrupt
+			  distributor register region.
   -- reg		: Address and size of the register set for the PDSP.
 			  Register regions should be specified in the following
 			  order
 			  - PDSP internal RAM region.
 			  - PDSP control/status region registers.
-			  - QMSS interrupt distributor registers.
 			  - PDSP command interface region.
 
 Example:
 
+pdsp_intd: intd@2a0c000 {
+	compatible	= "syscon";
+	reg		= <0x2a0c000 0x3c8>;
+};
+
 qmss: qmss@2a40000 {
 	compatible = "ti,keystone-qmss";
 	dma-coherent;
@@ -228,9 +234,9 @@ qmss: qmss@2a40000 {
 		#size-cells = <1>;
 		ranges;
 		pdsp0@0x2a10000 {
+			syscon-intd = <&pdsp_intd>;
 			reg = <0x2a10000 0x1000>,
 			      <0x2a0f000 0x100>,
-			      <0x2a0c000 0x3c8>,
 			      <0x2a20000 0x4000>;
 			id = <0>;
 		};
diff --git a/drivers/soc/ti/knav_qmss.h b/drivers/soc/ti/knav_qmss.h
index 5fa1ce6..37a99f5 100644
--- a/drivers/soc/ti/knav_qmss.h
+++ b/drivers/soc/ti/knav_qmss.h
@@ -19,6 +19,8 @@
 #ifndef __KNAV_QMSS_H__
 #define __KNAV_QMSS_H__
 
+#include <linux/regmap.h>
+
 #define THRESH_GTE	BIT(7)
 #define THRESH_LT	0
 
@@ -133,6 +135,7 @@ struct knav_pdsp_info {
 		struct knav_reg_acc_command __iomem	*acc_command;
 		u32 __iomem				*qos_command;
 	};
+	struct regmap					*intd_regmap;
 	void __iomem					*intd;
 	u32 __iomem					*iram;
 	u32						id;
@@ -374,6 +377,32 @@ struct knav_range_info {
 #define for_each_qmgr(kdev, qmgr)				\
 	list_for_each_entry(qmgr, &kdev->qmgrs, list)
 
+static inline int
+write_intd(struct knav_pdsp_info *pdsp, unsigned int reg, unsigned int val)
+{
+	int ret = 0;
+
+	if (pdsp->intd)
+		writel_relaxed(val, pdsp->intd + reg);
+	else
+		ret = regmap_write(pdsp->intd_regmap, reg, val);
+
+	return ret;
+}
+
+static inline int
+read_intd(struct knav_pdsp_info *pdsp, unsigned int reg, unsigned int *val)
+{
+	int ret = 0;
+
+	if (pdsp->intd)
+		*val = readl_relaxed(pdsp->intd + reg);
+	else
+		ret = regmap_read(pdsp->intd_regmap, reg, val);
+
+	return ret;
+}
+
 static inline struct knav_pdsp_info *
 knav_find_pdsp(struct knav_device *kdev, unsigned pdsp_id)
 {
diff --git a/drivers/soc/ti/knav_qmss_acc.c b/drivers/soc/ti/knav_qmss_acc.c
index 3d7225f..72affdb 100644
--- a/drivers/soc/ti/knav_qmss_acc.c
+++ b/drivers/soc/ti/knav_qmss_acc.c
@@ -18,6 +18,7 @@
 
 #include <linux/dma-mapping.h>
 #include <linux/io.h>
+#include <linux/mfd/syscon.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/of_address.h>
@@ -78,7 +79,7 @@ static int knav_acc_set_notify(struct knav_range_info *range,
 	offset = ACC_INTD_OFFSET_STATUS(kq->acc->channel);
 	dev_dbg(kdev->dev, "setup-notify: re-triggering irq for %s\n",
 		kq->acc->name);
-	writel_relaxed(mask, pdsp->intd + offset);
+	write_intd(pdsp, offset, mask);
 	return 0;
 }
 
@@ -118,15 +119,15 @@ static irqreturn_t knav_acc_int_handler(int irq, void *_instdata)
 	if (atomic_read(&acc->retrigger_count)) {
 		atomic_dec(&acc->retrigger_count);
 		__knav_acc_notify(range, acc);
-		writel_relaxed(1, pdsp->intd + ACC_INTD_OFFSET_COUNT(channel));
+		write_intd(pdsp, ACC_INTD_OFFSET_COUNT(channel), 1);
 		/* ack the interrupt */
-		writel_relaxed(ACC_CHANNEL_INT_BASE + channel,
-			       pdsp->intd + ACC_INTD_OFFSET_EOI);
+		write_intd(pdsp, ACC_INTD_OFFSET_EOI,
+			   ACC_CHANNEL_INT_BASE + channel);
 
 		return IRQ_HANDLED;
 	}
 
-	notifies = readl_relaxed(pdsp->intd + ACC_INTD_OFFSET_COUNT(channel));
+	read_intd(pdsp, ACC_INTD_OFFSET_COUNT(channel), &notifies);
 	WARN_ON(!notifies);
 	dma_sync_single_for_cpu(kdev->dev, list_dma, info->list_size,
 				DMA_FROM_DEVICE);
@@ -189,14 +190,10 @@ static irqreturn_t knav_acc_int_handler(int irq, void *_instdata)
 
 	/* flip to the other list */
 	acc->list_index ^= 1;
-
 	/* reset the interrupt counter */
-	writel_relaxed(1, pdsp->intd + ACC_INTD_OFFSET_COUNT(channel));
-
+	write_intd(pdsp, ACC_CHANNEL_INT_BASE + channel, 1);
 	/* ack the interrupt */
-	writel_relaxed(ACC_CHANNEL_INT_BASE + channel,
-		       pdsp->intd + ACC_INTD_OFFSET_EOI);
-
+	write_intd(pdsp, ACC_INTD_OFFSET_EOI, ACC_CHANNEL_INT_BASE + channel);
 	return IRQ_HANDLED;
 }
 
diff --git a/drivers/soc/ti/knav_qmss_queue.c b/drivers/soc/ti/knav_qmss_queue.c
index 1dd80fb..53b921c 100644
--- a/drivers/soc/ti/knav_qmss_queue.c
+++ b/drivers/soc/ti/knav_qmss_queue.c
@@ -21,6 +21,7 @@
 #include <linux/firmware.h>
 #include <linux/interrupt.h>
 #include <linux/io.h>
+#include <linux/mfd/syscon.h>
 #include <linux/module.h>
 #include <linux/of_address.h>
 #include <linux/of_device.h>
@@ -1474,12 +1475,68 @@ static int knav_queue_init_qmgrs(struct knav_device *kdev,
 	return 0;
 }
 
+static int knav_of_parse_pdsp_mem_map(struct knav_device *kdev,
+				      struct knav_pdsp_info *pdsp,
+				      struct device_node *pdsp_np)
+{
+	int num_regs, cmd_idx;
+
+	if (!of_find_property(pdsp_np, "reg", &num_regs))
+		return -EINVAL;
+
+	num_regs = num_regs / (2 * sizeof(u32));
+
+	if (num_regs < 4) {
+		pdsp->intd_regmap =
+			syscon_regmap_lookup_by_phandle(pdsp_np, "syscon-intd");
+
+		pdsp->intd = NULL;
+		cmd_idx = KNAV_QUEUE_PDSP_CMD_REG_INDEX - 1;
+	} else {
+		/* for backward compatible */
+		pdsp->intd =
+			knav_queue_map_reg(kdev, pdsp_np,
+					   KNAV_QUEUE_PDSP_INTD_REG_INDEX);
+
+		pdsp->intd_regmap = NULL;
+		cmd_idx = KNAV_QUEUE_PDSP_CMD_REG_INDEX;
+	}
+
+	pdsp->iram =
+		knav_queue_map_reg(kdev, pdsp_np,
+				   KNAV_QUEUE_PDSP_IRAM_REG_INDEX);
+	pdsp->regs =
+		knav_queue_map_reg(kdev, pdsp_np,
+				   KNAV_QUEUE_PDSP_REGS_REG_INDEX);
+	pdsp->command =
+		knav_queue_map_reg(kdev, pdsp_np, cmd_idx);
+
+	if (IS_ERR(pdsp->command) || IS_ERR(pdsp->iram) ||
+	    IS_ERR(pdsp->regs) || IS_ERR(pdsp->intd) ||
+	    IS_ERR(pdsp->intd_regmap)) {
+		dev_err(kdev->dev, "failed to map pdsp %s regs\n",
+			pdsp->name);
+		if (!IS_ERR_OR_NULL(pdsp->command))
+			devm_iounmap(kdev->dev, pdsp->command);
+		if (!IS_ERR_OR_NULL(pdsp->iram))
+			devm_iounmap(kdev->dev, pdsp->iram);
+		if (!IS_ERR_OR_NULL(pdsp->regs))
+			devm_iounmap(kdev->dev, pdsp->regs);
+		if (!IS_ERR_OR_NULL(pdsp->intd))
+			devm_iounmap(kdev->dev, pdsp->intd);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
 static int knav_queue_init_pdsps(struct knav_device *kdev,
 					struct device_node *pdsps)
 {
 	struct device *dev = kdev->dev;
 	struct knav_pdsp_info *pdsp;
 	struct device_node *child;
+	int ret;
 
 	for_each_child_of_node(pdsps, child) {
 		pdsp = devm_kzalloc(dev, sizeof(*pdsp), GFP_KERNEL);
@@ -1488,39 +1545,24 @@ static int knav_queue_init_pdsps(struct knav_device *kdev,
 			return -ENOMEM;
 		}
 		pdsp->name = knav_queue_find_name(child);
-		pdsp->iram =
-			knav_queue_map_reg(kdev, child,
-					   KNAV_QUEUE_PDSP_IRAM_REG_INDEX);
-		pdsp->regs =
-			knav_queue_map_reg(kdev, child,
-					   KNAV_QUEUE_PDSP_REGS_REG_INDEX);
-		pdsp->intd =
-			knav_queue_map_reg(kdev, child,
-					   KNAV_QUEUE_PDSP_INTD_REG_INDEX);
-		pdsp->command =
-			knav_queue_map_reg(kdev, child,
-					   KNAV_QUEUE_PDSP_CMD_REG_INDEX);
-
-		if (IS_ERR(pdsp->command) || IS_ERR(pdsp->iram) ||
-		    IS_ERR(pdsp->regs) || IS_ERR(pdsp->intd)) {
-			dev_err(dev, "failed to map pdsp %s regs\n",
-				pdsp->name);
-			if (!IS_ERR(pdsp->command))
-				devm_iounmap(dev, pdsp->command);
-			if (!IS_ERR(pdsp->iram))
-				devm_iounmap(dev, pdsp->iram);
-			if (!IS_ERR(pdsp->regs))
-				devm_iounmap(dev, pdsp->regs);
-			if (!IS_ERR(pdsp->intd))
-				devm_iounmap(dev, pdsp->intd);
+
+		ret = knav_of_parse_pdsp_mem_map(kdev, pdsp, child);
+		if (ret) {
 			devm_kfree(dev, pdsp);
 			continue;
 		}
+
 		of_property_read_u32(child, "id", &pdsp->id);
 		list_add_tail(&pdsp->list, &kdev->pdsps);
-		dev_dbg(dev, "added pdsp %s: command %p, iram %p, regs %p, intd %p\n",
-			pdsp->name, pdsp->command, pdsp->iram, pdsp->regs,
-			pdsp->intd);
+		if (pdsp->intd) {
+			dev_dbg(dev, "added pdsp %s: command %p, iram %p, regs %p, intd %p\n",
+				pdsp->name, pdsp->command, pdsp->iram,
+				pdsp->regs, pdsp->intd);
+		} else {
+			dev_dbg(dev, "added pdsp %s: command %p, iram %p, regs %p, intd_regmap %p\n",
+				pdsp->name, pdsp->command, pdsp->iram,
+				pdsp->regs, pdsp->intd_regmap);
+		}
 	}
 	return 0;
 }
-- 
1.7.5.4

