From ebdf927ec7f39fb6b0391503c91171e2ea624f30 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 5 May 2015 16:25:28 +0800
Subject: [PATCH 019/256] net: ti_cpsw: fix tlan and cpts consistency with
 keystone

This patch comes from:
  git://git.ti.com/keystone-linux/linux.git

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/ti/cpmac.c |   11 +-
 drivers/net/ethernet/ti/cpts.c  |  687 +++++++++++++++++++++++++++++++++++----
 drivers/net/ethernet/ti/cpts.h  |   62 +++-
 drivers/net/ethernet/ti/tlan.c  |    4 +-
 drivers/net/ethernet/ti/tlan.h  |    1 +
 5 files changed, 691 insertions(+), 74 deletions(-)

diff --git a/drivers/net/ethernet/ti/cpmac.c b/drivers/net/ethernet/ti/cpmac.c
index 73f74f3..b09c775 100644
--- a/drivers/net/ethernet/ti/cpmac.c
+++ b/drivers/net/ethernet/ti/cpmac.c
@@ -17,6 +17,7 @@
  */
 
 #include <linux/module.h>
+#include <linux/init.h>
 #include <linux/interrupt.h>
 #include <linux/moduleparam.h>
 
@@ -635,7 +636,7 @@ static void cpmac_hw_stop(struct net_device *dev)
 {
 	int i;
 	struct cpmac_priv *priv = netdev_priv(dev);
-	struct plat_cpmac_data *pdata = dev_get_platdata(&priv->pdev->dev);
+	struct plat_cpmac_data *pdata = priv->pdev->dev.platform_data;
 
 	ar7_device_reset(pdata->reset_bit);
 	cpmac_write(priv->regs, CPMAC_RX_CONTROL,
@@ -658,7 +659,7 @@ static void cpmac_hw_start(struct net_device *dev)
 {
 	int i;
 	struct cpmac_priv *priv = netdev_priv(dev);
-	struct plat_cpmac_data *pdata = dev_get_platdata(&priv->pdev->dev);
+	struct plat_cpmac_data *pdata = priv->pdev->dev.platform_data;
 
 	ar7_device_reset(pdata->reset_bit);
 	for (i = 0; i < 8; i++) {
@@ -918,7 +919,7 @@ static const struct ethtool_ops cpmac_ethtool_ops = {
 	.set_ringparam = cpmac_set_ringparam,
 };
 
-static void cpmac_adjust_link(struct net_device *dev)
+static void cpmac_adjust_link(struct net_device *dev, void *context)
 {
 	struct cpmac_priv *priv = netdev_priv(dev);
 	int new_state = 0;
@@ -1117,7 +1118,7 @@ static int cpmac_probe(struct platform_device *pdev)
 	struct net_device *dev;
 	struct plat_cpmac_data *pdata;
 
-	pdata = dev_get_platdata(&pdev->dev);
+	pdata = pdev->dev.platform_data;
 
 	if (external_switch || dumb_switch) {
 		strncpy(mdio_bus_id, "fixed-0", MII_BUS_ID_SIZE); /* fixed phys bus */
@@ -1172,7 +1173,7 @@ static int cpmac_probe(struct platform_device *pdev)
 						mdio_bus_id, phy_id);
 
 	priv->phy = phy_connect(dev, priv->phy_name, cpmac_adjust_link,
-				PHY_INTERFACE_MODE_MII);
+				PHY_INTERFACE_MODE_MII, NULL);
 
 	if (IS_ERR(priv->phy)) {
 		if (netif_msg_drv(priv))
diff --git a/drivers/net/ethernet/ti/cpts.c b/drivers/net/ethernet/ti/cpts.c
index 372cb19..7d06201 100644
--- a/drivers/net/ethernet/ti/cpts.c
+++ b/drivers/net/ethernet/ti/cpts.c
@@ -31,13 +31,162 @@
 
 #ifdef CONFIG_TI_CPTS
 
-static struct sock_filter ptp_filter[] = {
+struct cpts_tc_ts_converter {
+	u32 freq;
+	u32 mult;
+	u32 shift;
+	u32 div;
+};
+
+struct cpts_tc_ts_converter cpts_tc_ts_default_converters[] = {
+	{400000000, 2560, 10,  1},
+	{425000000, 5120,  7, 17},
+	{500000000, 2048, 10,  1},
+	{600000000, 5120, 10,  3},
+	{614400000, 5000, 10,  3},
+	{625000000, 4096,  9,  5},
+	{675000000, 5120,  7, 27},
+	{700000000, 5120,  9,  7},
+	{750000000, 4096, 10,  3},
+};
+
+static struct sock_filter ptp_default_filter[] = {
 	PTP_FILTER
 };
 
 #define cpts_read32(c, r)	__raw_readl(&c->reg->r)
 #define cpts_write32(c, v, r)	__raw_writel(v, &c->reg->r)
 
+#define CPTS_COUNTER_BITS	32
+#define TS_COMP_LAST_REG(cpts)	(cpts->ts_comp_last & cpts->cc.mask)
+
+#define VLAN_IPV4_HLEN(data) \
+	(((struct iphdr *)(data + OFF_IHL + VLAN_HLEN))->ihl << 2)
+
+static u64 cpts_ppb_correct_ns(struct cpts *cpts, u64 ns)
+{
+	s32 ppb = cpts->ppb;
+	int neg_adj = 0;
+	u64 temp_ns;
+
+	if (ppb == 0)
+		return ns;
+
+	if (ppb < 0) {
+		neg_adj = 1;
+		ppb = -ppb;
+	}
+
+	temp_ns = ns * ppb;
+	do_div(temp_ns, 1000000000);
+	return ns + (neg_adj ? -temp_ns : temp_ns);
+}
+
+/* Assumes ppb < 1000000000 */
+static u64 cpts_ppb_correct_cyc(struct cpts *cpts, u64 cyc)
+{
+	u64 temp_cyc;
+
+	if (cpts->ppb == 0)
+		return cyc;
+
+	temp_cyc = cyc * 1000000000;
+	do_div(temp_cyc, 1000000000 + cpts->ppb);
+	return temp_cyc;
+}
+
+static inline u64 cpts_cyc2ns(cycle_t cycles, u32 mult, u32 shift, u32 div)
+{
+	u64 ns;
+
+	ns = ((cycles * mult) >> shift);
+	do_div(ns, div);
+	return ns;
+}
+
+static u64 cpts_cc_cyc2ns(struct cpts *cpts, cycle_t cycles)
+{
+	const struct cyclecounter *cc = &cpts->cc;
+	u64 nsec = 0;
+	u64 corrected_ns;
+
+	/* to prevent overflow in cpts_cyc2ns */
+	while (cycles >= cpts->max_cycles) {
+		nsec += cpts->max_nsec;
+		cycles -= cpts->max_cycles;
+	}
+
+	nsec += cpts_cyc2ns(cycles, cc->mult, cc->shift, cpts->cc_div);
+
+	corrected_ns = cpts_ppb_correct_ns(cpts, nsec);
+
+	return nsec;
+}
+
+static cycle_t cpts_cc_read_delta(struct cpts *cpts)
+{
+	struct timecounter *tc = &cpts->tc;
+	cycle_t cycle_now, cycle_delta;
+
+	/* read cycle counter: */
+	cycle_now = tc->cc->read(tc->cc);
+
+	/* calculate the cc delta since the last cc_read_delta(): */
+	cycle_delta = (cycle_now - tc->cycle_last) & tc->cc->mask;
+
+	/* update cc last read */
+	tc->cycle_last = cycle_now;
+
+	return cycle_delta;
+}
+
+/* With cc's mult, calculate the max cycles that can be taken in
+ * cyc2ns without overflow. Also calculates the corresponding ns
+ */
+void cpts_cyc2ns_set_max_cap(struct cpts *cpts)
+{
+	cpts->max_cycles = 0xffffffffffffffff;
+	do_div(cpts->max_cycles, cpts->cc.mult);
+	cpts->max_nsec = cpts_cyc2ns(cpts->max_cycles, cpts->cc.mult,
+					cpts->cc.shift, cpts->cc_div);
+	cpts->max_nsec = cpts_ppb_correct_ns(cpts, cpts->max_nsec);
+}
+
+static u64 cpts_tc_read(struct cpts *cpts)
+{
+	cpts->cc_total += cpts_cc_read_delta(cpts);
+	cpts->tc.nsec = cpts_cc_cyc2ns(cpts, cpts->cc_total);
+
+	return cpts->tc_base + cpts->tc.nsec;
+}
+
+u64 cpts_tstamp_cyc2time(struct cpts *cpts, cycle_t cycle_tstamp)
+{
+	struct timecounter *tc = &cpts->tc;
+	u64 cycle_delta = (cycle_tstamp - tc->cycle_last) & tc->cc->mask;
+	u64 nsec;
+
+	/* Instead of always treating cycle_tstamp as more recent
+	 * than tc->cycle_last, detect when it is too far in the
+	 * future and treat it as old time stamp instead.
+	 */
+	if (cycle_delta > tc->cc->mask / 2) {
+		cycle_delta = (tc->cycle_last - cycle_tstamp) & tc->cc->mask;
+		nsec = tc->nsec - cpts_cc_cyc2ns(cpts, cycle_delta);
+	} else {
+		nsec = cpts_cc_cyc2ns(cpts, cycle_delta) + tc->nsec;
+	}
+
+	return cpts->tc_base + nsec;
+}
+
+void cpts_tc_init(struct cpts *cpts, u64 start_tstamp)
+{
+	timecounter_init(&cpts->tc, &cpts->cc, 0);
+	cpts->cc_total = 0;
+	cpts->tc_base = start_tstamp;
+}
+
 static int event_expired(struct cpts_event *event)
 {
 	return time_after(jiffies, event->tmo);
@@ -48,6 +197,11 @@ static int event_type(struct cpts_event *event)
 	return (event->high >> EVENT_TYPE_SHIFT) & EVENT_TYPE_MASK;
 }
 
+static int event_port(struct cpts_event *event)
+{
+	return (event->high >> PORT_NUMBER_SHIFT) & PORT_NUMBER_MASK;
+}
+
 static int cpts_fifo_pop(struct cpts *cpts, u32 *high, u32 *low)
 {
 	u32 r = cpts_read32(cpts, intstat_raw);
@@ -61,12 +215,29 @@ static int cpts_fifo_pop(struct cpts *cpts, u32 *high, u32 *low)
 	return -1;
 }
 
+static int cpts_event_list_clean_up(struct cpts *cpts, int ev_type)
+{
+	struct list_head *this, *next;
+	struct cpts_event *event;
+	int removed = 0;
+
+	list_for_each_safe(this, next, &cpts->events) {
+		event = list_entry(this, struct cpts_event, list);
+		if (event_expired(event) || (ev_type == event_type(event))) {
+			list_del_init(&event->list);
+			list_add(&event->list, &cpts->pool);
+			++removed;
+		}
+	}
+	return removed;
+}
+
 /*
  * Returns zero if matching event type was found.
  */
 static int cpts_fifo_read(struct cpts *cpts, int match)
 {
-	int i, type = -1;
+	int i, type = -1, removed;
 	u32 hi, lo;
 	struct cpts_event *event;
 
@@ -74,15 +245,22 @@ static int cpts_fifo_read(struct cpts *cpts, int match)
 		if (cpts_fifo_pop(cpts, &hi, &lo))
 			break;
 		if (list_empty(&cpts->pool)) {
-			pr_err("cpts: event pool is empty\n");
-			return -1;
+			removed = cpts_event_list_clean_up(cpts, -1);
+			if (!removed) {
+				pr_err("cpts: event pool is empty\n");
+				return -1;
+			}
+			pr_debug("cpts: list cleaned up %d\n", removed);
 		}
 		event = list_first_entry(&cpts->pool, struct cpts_event, list);
-		event->tmo = jiffies + 2;
+		event->tmo = jiffies + CPTS_TMO;
 		event->high = hi;
 		event->low = lo;
 		type = event_type(event);
 		switch (type) {
+		case CPTS_EV_HW:
+		case CPTS_EV_COMP:
+			event->tmo += (CPTS_COMP_TMO - CPTS_TMO);
 		case CPTS_EV_PUSH:
 		case CPTS_EV_RX:
 		case CPTS_EV_TX:
@@ -91,7 +269,6 @@ static int cpts_fifo_read(struct cpts *cpts, int match)
 			break;
 		case CPTS_EV_ROLL:
 		case CPTS_EV_HALF:
-		case CPTS_EV_HW:
 			break;
 		default:
 			pr_err("cpts: unknown event type\n");
@@ -127,31 +304,241 @@ static cycle_t cpts_systim_read(const struct cyclecounter *cc)
 	return val;
 }
 
-/* PTP clock operations */
+static u64 cpts_cc_ns2cyc(struct cpts *cpts, u64 nsec)
+{
+	u64 max_ns, max_cyc, cyc = 0;
+	u64 dividend;
+	u64 corrected_cyc;
 
-static int cpts_ptp_adjfreq(struct ptp_clock_info *ptp, s32 ppb)
+	max_cyc = (1ULL << CPTS_COUNTER_BITS) - 1;
+	max_ns = cpts_cc_cyc2ns(cpts, max_cyc);
+
+	while (nsec >= max_ns) {
+		nsec -= max_ns;
+		cyc += max_cyc;
+	}
+
+	if (nsec) {
+		dividend = (nsec * cpts->cc_div) << cpts->cc.shift;
+		cyc += div_u64(dividend, cpts->cc.mult);
+	}
+
+	corrected_cyc = cpts_ppb_correct_cyc(cpts, cyc);
+	return corrected_cyc;
+}
+
+static inline void cpts_ts_comp_add_ns(struct cpts *cpts, s64 add_ns)
 {
-	u64 adj;
-	u32 diff, mult;
+	u64 temp, cyc;
 	int neg_adj = 0;
-	unsigned long flags;
-	struct cpts *cpts = container_of(ptp, struct cpts, info);
 
-	if (ppb < 0) {
+	if (add_ns < 0) {
 		neg_adj = 1;
-		ppb = -ppb;
+		add_ns = -add_ns;
 	}
-	mult = cpts->cc_mult;
-	adj = mult;
-	adj *= ppb;
-	diff = div_u64(adj, 1000000000ULL);
 
-	spin_lock_irqsave(&cpts->lock, flags);
+	if (add_ns == NSEC_PER_SEC) {
+		/* avoid calculation */
+		cpts->ts_comp_last += cpts->pps_one_sec;
+		return;
+	}
 
-	timecounter_read(&cpts->tc);
+	temp = add_ns;
+	cyc = cpts_cc_ns2cyc(cpts, temp);
+	cpts->ts_comp_last += (neg_adj ? -cyc : cyc);
+}
+
+static inline void cpts_disable_ts_comp(struct cpts *cpts)
+{
+	cpts_write32(cpts, 0, ts_comp_length);
+}
 
-	cpts->cc.mult = neg_adj ? mult - diff : mult + diff;
+static inline void cpts_enable_ts_comp(struct cpts *cpts)
+{
+	cpts_write32(cpts, TS_COMP_LAST_REG(cpts), ts_comp_val);
+	cpts_write32(cpts, cpts->ts_comp_length, ts_comp_length);
+}
+
+static int cpts_ts_comp_add_reload(struct cpts *cpts, s64 add_ns, int enable)
+{
+	struct list_head *this, *next;
+	struct ptp_clock_event pevent;
+	struct cpts_event *event;
+	int reported = 0;
+	u64 ns;
+
+	list_for_each_safe(this, next, &cpts->events) {
+		event = list_entry(this, struct cpts_event, list);
+		if (event_type(event) == CPTS_EV_COMP) {
+			list_del_init(&event->list);
+			list_add(&event->list, &cpts->pool);
+			if (TS_COMP_LAST_REG(cpts) != event->low) {
+				pr_err("cpts ts_comp mismatch: %llx %08x\n",
+					cpts->ts_comp_last, event->low);
+				break;
+			} else
+				pr_debug("cpts comp ev tstamp: %u\n",
+					event->low);
+
+			/* report the event */
+			ns = cpts_tstamp_cyc2time(cpts, event->low);
+			pevent.type = PTP_CLOCK_PPSUSR;
+			pevent.pps_times.ts_real = ns_to_timespec(ns);
+			ptp_clock_event(cpts->clock, &pevent);
+			reported = 1;
+
+			/* reload: add ns to ts_comp */
+			cpts_ts_comp_add_ns(cpts, add_ns);
+			if (enable) {
+				/* enable ts_comp pulse with new val */
+				cpts_disable_ts_comp(cpts);
+				cpts_enable_ts_comp(cpts);
+			}
+			break;
+		}
+	}
+	return reported;
+}
+
+static int cpts_ts_comp_hw_ts_ev_report_restart(struct cpts *cpts)
+{
+	struct list_head *this, *next;
+	struct ptp_clock_event pevent;
+	struct cpts_event *event;
+	int reported = 0, ev;
+	u64 ns;
 
+	list_for_each_safe(this, next, &cpts->events) {
+		event = list_entry(this, struct cpts_event, list);
+		ev = event_type(event);
+		if (ev == CPTS_EV_COMP) {
+			list_del_init(&event->list);
+			list_add(&event->list, &cpts->pool);
+			if (TS_COMP_LAST_REG(cpts) != event->low) {
+				pr_err("cpts ts_comp mismatch: %llx %08x\n",
+					cpts->ts_comp_last, event->low);
+				continue;
+			} else
+				pr_debug("cpts comp ev tstamp: %u\n",
+					event->low);
+
+			/* report the event */
+			ns = cpts_tstamp_cyc2time(cpts, event->low);
+			pevent.type = PTP_CLOCK_PPSUSR;
+			pevent.pps_times.ts_real = ns_to_timespec(ns);
+			ptp_clock_event(cpts->clock, &pevent);
+			++reported;
+
+			/* reload: add ns to ts_comp */
+			cpts_ts_comp_add_ns(cpts, NSEC_PER_SEC);
+			/* enable ts_comp pulse with new val */
+			cpts_disable_ts_comp(cpts);
+			cpts_enable_ts_comp(cpts);
+			continue;
+		} else if (ev == CPTS_EV_HW) {
+			list_del_init(&event->list);
+			list_add(&event->list, &cpts->pool);
+			/* report the event */
+			pevent.timestamp =
+				cpts_tstamp_cyc2time(cpts, event->low);
+			pevent.type = PTP_CLOCK_EXTTS;
+			pevent.index = event_port(event) - 1;
+			ptp_clock_event(cpts->clock, &pevent);
+			++reported;
+			continue;
+		}
+	}
+	return reported;
+}
+
+/* PTP clock operations */
+
+static void cpts_tc_settime(struct cpts *cpts, u64 now)
+{
+	cycle_t cycles_to_pulse;
+	u64 ns_to_pulse, pulse_time;
+	u32 remainder;
+
+	if (cpts->pps_enable) {
+		cpts_disable_ts_comp(cpts);
+		cpts_fifo_read(cpts, CPTS_EV_COMP);
+		/* before adj, report existing pulse, if any,
+		 * and add 1 sec to local ts_comp counter,
+		 * but don't start the pps yet
+		 */
+		cpts_ts_comp_add_reload(cpts, NSEC_PER_SEC, 0);
+	}
+
+	/* set the ptp clock time */
+	cpts->tc.nsec = 0;
+	cpts->cc_total = 0;
+	cpts->tc_base = now;
+
+	if (cpts->pps_enable) {
+		/* adjust ts_comp and start it */
+		cycles_to_pulse =
+			(TS_COMP_LAST_REG(cpts) - cpts->tc.cycle_last) &
+			cpts->cc.mask;
+		ns_to_pulse = cpts_cc_cyc2ns(cpts, cycles_to_pulse);
+		pulse_time = cpts->tc_base + ns_to_pulse;
+		/* align pulse time to next sec boundary */
+		div_u64_rem(pulse_time, 1000000000, &remainder);
+		cpts_ts_comp_add_ns(cpts, NSEC_PER_SEC - remainder);
+		/* enable ts_comp pulse */
+		cpts_enable_ts_comp(cpts);
+	}
+}
+
+static int cpts_ptp_adjfreq(struct ptp_clock_info *ptp, s32 ppb)
+{
+	struct cpts *cpts = container_of(ptp, struct cpts, info);
+	u64 ns_to_pulse = 0, pulse_time, now;
+	cycle_t cycles_to_pulse;
+	unsigned long flags;
+	u32 remainder;
+
+	if (cpts->ignore_adjfreq) {
+		pr_debug("%s: ignored ppb = %d\n", __func__, ppb);
+		return 0;
+	}
+
+	spin_lock_irqsave(&cpts->lock, flags);
+	now = cpts_tc_read(cpts);
+
+	if (cpts->pps_enable) {
+		cpts_disable_ts_comp(cpts);
+		cpts_fifo_read(cpts, CPTS_EV_COMP);
+		/* before adj, if any, report existing pulse
+		 * and add 1 sec to local ts_comp counter,
+		 * but don't start the pps yet
+		 */
+		cpts_ts_comp_add_reload(cpts, NSEC_PER_SEC, 0);
+		cycles_to_pulse =
+			(TS_COMP_LAST_REG(cpts) - cpts->tc.cycle_last) &
+			cpts->cc.mask;
+		ns_to_pulse = cpts_cc_cyc2ns(cpts, cycles_to_pulse);
+	}
+
+	/* set the ptp clock time & new freq */
+	cpts->tc.nsec = 0;
+	cpts->cc_total = 0;
+	cpts->tc_base = now;
+	cpts->ppb = ppb;
+	cpts_cyc2ns_set_max_cap(cpts);
+	cpts->pps_one_sec = cpts_cc_ns2cyc(cpts, NSEC_PER_SEC);
+
+	if (cpts->pps_enable) {
+		/* adjust ts_comp based on new freq and start it */
+		cycles_to_pulse = cpts_cc_ns2cyc(cpts, ns_to_pulse);
+		cpts->ts_comp_last = (cycles_to_pulse + cpts->tc.cycle_last) &
+					cpts->cc.mask;
+		pulse_time = cpts->tc_base + ns_to_pulse;
+		/* align pulse time to next sec boundary */
+		div_u64_rem(pulse_time, 1000000000, &remainder);
+		cpts_ts_comp_add_ns(cpts, NSEC_PER_SEC - remainder);
+		/* enable ts_comp pulse */
+		cpts_enable_ts_comp(cpts);
+	}
 	spin_unlock_irqrestore(&cpts->lock, flags);
 
 	return 0;
@@ -164,11 +551,9 @@ static int cpts_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
 	struct cpts *cpts = container_of(ptp, struct cpts, info);
 
 	spin_lock_irqsave(&cpts->lock, flags);
-	now = timecounter_read(&cpts->tc);
-	now += delta;
-	timecounter_init(&cpts->tc, &cpts->cc, now);
+	now = cpts_tc_read(cpts) + delta;
+	cpts_tc_settime(cpts, now);
 	spin_unlock_irqrestore(&cpts->lock, flags);
-
 	return 0;
 }
 
@@ -180,7 +565,7 @@ static int cpts_ptp_gettime(struct ptp_clock_info *ptp, struct timespec *ts)
 	struct cpts *cpts = container_of(ptp, struct cpts, info);
 
 	spin_lock_irqsave(&cpts->lock, flags);
-	ns = timecounter_read(&cpts->tc);
+	ns = cpts_tc_read(cpts);
 	spin_unlock_irqrestore(&cpts->lock, flags);
 
 	ts->tv_sec = div_u64_rem(ns, 1000000000, &remainder);
@@ -200,8 +585,71 @@ static int cpts_ptp_settime(struct ptp_clock_info *ptp,
 	ns += ts->tv_nsec;
 
 	spin_lock_irqsave(&cpts->lock, flags);
-	timecounter_init(&cpts->tc, &cpts->cc, ns);
+	cpts_tc_read(cpts);
+	cpts_tc_settime(cpts, ns);
 	spin_unlock_irqrestore(&cpts->lock, flags);
+	return 0;
+}
+
+/* PPS */
+static int cpts_pps_enable(struct cpts *cpts, int on)
+{
+	unsigned long flags;
+	struct timespec ts;
+	u32 v;
+
+	if (cpts->pps_enable == on)
+		return 0;
+
+	cpts->pps_enable = on;
+
+	if (!on)
+		return 0;
+
+	/* get current counter value */
+	v = cpts_read32(cpts, control) | CPTS_EN;
+	cpts_write32(cpts, v, control);
+	cpts_write32(cpts, TS_PEND_EN, int_enable);
+	cpts_ptp_gettime(&cpts->info, &ts);
+	cpts->ts_comp_last = cpts->tc.cycle_last;
+	/* align to next sec boundary and add one sec */
+	cpts_ts_comp_add_ns(cpts, 2 * NSEC_PER_SEC - ts.tv_nsec);
+	/* remove stale TS_COMP events */
+	spin_lock_irqsave(&cpts->lock, flags);
+	cpts_event_list_clean_up(cpts, CPTS_EV_COMP);
+	/* enable ts_comp pulse */
+	cpts_disable_ts_comp(cpts);
+	cpts_enable_ts_comp(cpts);
+	spin_unlock_irqrestore(&cpts->lock, flags);
+	return 0;
+}
+
+static int cpts_pps_init(struct cpts *cpts)
+{
+	cpts->pps_one_sec = cpts_cc_ns2cyc(cpts, NSEC_PER_SEC);
+	return 0;
+}
+
+/* HW TS */
+static int cpts_extts_enable(struct cpts *cpts, u32 index, int on)
+{
+	u32 v;
+
+	if (index >= cpts->info.n_ext_ts)
+		return -ENXIO;
+
+	if (((cpts->hw_ts_enable & BIT(index)) >> index) == on)
+		return 0;
+
+	v = cpts_read32(cpts, control);
+	if (on) {
+		v |= BIT(8 + index);
+		cpts->hw_ts_enable |= BIT(index);
+	} else {
+		v &= ~BIT(8 + index);
+		cpts->hw_ts_enable &= ~BIT(index);
+	}
+	cpts_write32(cpts, v, control);
 
 	return 0;
 }
@@ -209,16 +657,26 @@ static int cpts_ptp_settime(struct ptp_clock_info *ptp,
 static int cpts_ptp_enable(struct ptp_clock_info *ptp,
 			   struct ptp_clock_request *rq, int on)
 {
+	struct cpts *cpts = container_of(ptp, struct cpts, info);
+
+	switch (rq->type) {
+	case PTP_CLK_REQ_PPS:
+		return cpts_pps_enable(cpts, on);
+	case PTP_CLK_REQ_EXTTS:
+		return cpts_extts_enable(cpts, rq->extts.index, on ? 1 : 0);
+	default:
+		break;
+	}
 	return -EOPNOTSUPP;
 }
 
 static struct ptp_clock_info cpts_info = {
 	.owner		= THIS_MODULE,
-	.name		= "CTPS timer",
+	.name		= "CPTS timer",
 	.max_adj	= 1000000,
-	.n_ext_ts	= 0,
+	.n_ext_ts	= 8,
 	.n_pins		= 0,
-	.pps		= 0,
+	.pps		= 1,
 	.adjfreq	= cpts_ptp_adjfreq,
 	.adjtime	= cpts_ptp_adjtime,
 	.gettime	= cpts_ptp_gettime,
@@ -226,33 +684,114 @@ static struct ptp_clock_info cpts_info = {
 	.enable		= cpts_ptp_enable,
 };
 
-static void cpts_overflow_check(struct work_struct *work)
+static int cpts_check_ts_comp_hw_ts_ev(struct cpts *cpts)
 {
+	unsigned long flags;
+
+	spin_lock_irqsave(&cpts->lock, flags);
+	cpts_ts_comp_hw_ts_ev_report_restart(cpts);
+	spin_unlock_irqrestore(&cpts->lock, flags);
+	return 0;
+}
+
+static void cpts_overflow_check(unsigned long arg)
+{
+	struct cpts *cpts = (struct cpts *)arg;
 	struct timespec ts;
-	struct cpts *cpts = container_of(work, struct cpts, overflow_work.work);
+	u32 v;
 
-	cpts_write32(cpts, CPTS_EN, control);
+	v = cpts_read32(cpts, control) | CPTS_EN;
+	cpts_write32(cpts, v, control);
 	cpts_write32(cpts, TS_PEND_EN, int_enable);
 	cpts_ptp_gettime(&cpts->info, &ts);
 	pr_debug("cpts overflow check at %ld.%09lu\n", ts.tv_sec, ts.tv_nsec);
-	schedule_delayed_work(&cpts->overflow_work, CPTS_OVERFLOW_PERIOD);
+	if (!cpts->pps_enable)
+		cpts_disable_ts_comp(cpts);
+	if (cpts->pps_enable || cpts->hw_ts_enable)
+		cpts_check_ts_comp_hw_ts_ev(cpts);
+	cpts->timer.expires = jiffies + CPTS_OVERFLOW_PERIOD;
+	add_timer(&cpts->timer);
+}
+
+static int cpts_get_rftclk_default_converters(struct cpts *cpts)
+{
+	struct cpts_tc_ts_converter *c = &cpts_tc_ts_default_converters[0];
+	struct cpts_tc_ts_converter *d_min_conv = NULL;
+	u32 a_size = ARRAY_SIZE(cpts_tc_ts_default_converters);
+	u32 f = cpts->rftclk_freq;
+	u32 d_min = 0xffffffff;
+	u32 i, d;
+
+	for (i = 0, c = &cpts_tc_ts_default_converters[0];
+					i < a_size; i++, c++) {
+		d = abs(f - c->freq);
+		if (d < d_min) {
+			d_min = d;
+			d_min_conv = c;
+		}
+	}
+
+	/* if ref clk freq differs from freq in the defaults
+	   for more than 1 MHz, do not return any multi/div/shif.
+	   1MHz is arbitrary but reasonable
+	*/
+	if (d_min >= 1000000)
+		return -1;
+
+	cpts->cc.mult	= d_min_conv->mult;
+	cpts->cc.shift	= d_min_conv->shift;
+	cpts->cc_div	= d_min_conv->div;
+
+	return 0;
 }
 
 #define CPTS_REF_CLOCK_NAME "cpsw_cpts_rft_clk"
 
 static void cpts_clk_init(struct cpts *cpts)
 {
-	cpts->refclk = clk_get(NULL, CPTS_REF_CLOCK_NAME);
+	unsigned long rate;
+	u64 max_sec;
+
+	cpts->refclk = clk_get(cpts->dev, CPTS_REF_CLOCK_NAME);
 	if (IS_ERR(cpts->refclk)) {
-		pr_err("Failed to clk_get %s\n", CPTS_REF_CLOCK_NAME);
+		pr_info("No %s defined.  Assumes external ref clock.\n",
+			CPTS_REF_CLOCK_NAME);
 		cpts->refclk = NULL;
-		return;
+	} else
+		cpts->rftclk_freq = clk_get_rate(cpts->refclk);
+
+	if (!cpts->cc.mult && !cpts->cc.shift) {
+		if (cpts_get_rftclk_default_converters(cpts)) {
+			/*
+			   calculate the multiplier/shift to
+			   convert CPTS counter ticks to ns.
+			*/
+			rate = cpts->rftclk_freq;
+			max_sec = ((1ULL << CPTS_COUNTER_BITS) - 1) +
+								(rate - 1);
+			do_div(max_sec, rate);
+
+			clocks_calc_mult_shift(&cpts->cc.mult, &cpts->cc.shift,
+						rate, NSEC_PER_SEC, max_sec);
+			cpts->cc_div = 1;
+		}
 	}
-	clk_prepare_enable(cpts->refclk);
+
+	pr_info("cpts rftclk rate(%u HZ),mult(%u),shift(%u),div(%u)\n",
+			cpts->rftclk_freq, cpts->cc.mult,
+			cpts->cc.shift, cpts->cc_div);
+
+	if (cpts->refclk)
+		clk_prepare_enable(cpts->refclk);
+
+	cpts_write32(cpts, cpts->rftclk_sel & 0x1f, rfclk_sel);
 }
 
 static void cpts_clk_release(struct cpts *cpts)
 {
+	if (!cpts->refclk)
+		return;
+
 	clk_disable(cpts->refclk);
 	clk_put(cpts->refclk);
 }
@@ -279,6 +818,14 @@ static int cpts_match(struct sk_buff *skb, unsigned int ptp_class,
 	case PTP_CLASS_V2_VLAN:
 		offset = ETH_HLEN + VLAN_HLEN;
 		break;
+	case PTP_CLASS_V1_VLAN_IPV4:
+	case PTP_CLASS_V2_VLAN_IPV4:
+		offset = ETH_HLEN + VLAN_HLEN + VLAN_IPV4_HLEN(data) + UDP_HLEN;
+		break;
+	case PTP_CLASS_V1_VLAN_IPV6:
+	case PTP_CLASS_V2_VLAN_IPV6:
+		offset = OFF_PTP6 + VLAN_HLEN;
+		break;
 	default:
 		return 0;
 	}
@@ -301,7 +848,7 @@ static u64 cpts_find_ts(struct cpts *cpts, struct sk_buff *skb, int ev_type)
 	u64 ns = 0;
 	struct cpts_event *event;
 	struct list_head *this, *next;
-	unsigned int class = sk_run_filter(skb, ptp_filter);
+	unsigned int class = sk_run_filter(skb, cpts->filter);
 	unsigned long flags;
 	u16 seqid;
 	u8 mtype;
@@ -313,16 +860,11 @@ static u64 cpts_find_ts(struct cpts *cpts, struct sk_buff *skb, int ev_type)
 	cpts_fifo_read(cpts, CPTS_EV_PUSH);
 	list_for_each_safe(this, next, &cpts->events) {
 		event = list_entry(this, struct cpts_event, list);
-		if (event_expired(event)) {
-			list_del_init(&event->list);
-			list_add(&event->list, &cpts->pool);
-			continue;
-		}
 		mtype = (event->high >> MESSAGE_TYPE_SHIFT) & MESSAGE_TYPE_MASK;
 		seqid = (event->high >> SEQUENCE_ID_SHIFT) & SEQUENCE_ID_MASK;
 		if (ev_type == event_type(event) &&
 		    cpts_match(skb, class, seqid, mtype)) {
-			ns = timecounter_cyc2time(&cpts->tc, event->low);
+			ns = cpts_tstamp_cyc2time(cpts, event->low);
 			list_del_init(&event->list);
 			list_add(&event->list, &cpts->pool);
 			break;
@@ -333,46 +875,58 @@ static u64 cpts_find_ts(struct cpts *cpts, struct sk_buff *skb, int ev_type)
 	return ns;
 }
 
-void cpts_rx_timestamp(struct cpts *cpts, struct sk_buff *skb)
+int cpts_rx_timestamp(struct cpts *cpts, struct sk_buff *skb)
 {
 	u64 ns;
 	struct skb_shared_hwtstamps *ssh;
 
 	if (!cpts->rx_enable)
-		return;
+		return -EPERM;
 	ns = cpts_find_ts(cpts, skb, CPTS_EV_RX);
 	if (!ns)
-		return;
+		return -ENOENT;
 	ssh = skb_hwtstamps(skb);
 	memset(ssh, 0, sizeof(*ssh));
 	ssh->hwtstamp = ns_to_ktime(ns);
+	return 0;
 }
 
-void cpts_tx_timestamp(struct cpts *cpts, struct sk_buff *skb)
+int cpts_tx_timestamp(struct cpts *cpts, struct sk_buff *skb)
 {
 	u64 ns;
 	struct skb_shared_hwtstamps ssh;
 
 	if (!(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS))
-		return;
+		return -EPERM;
 	ns = cpts_find_ts(cpts, skb, CPTS_EV_TX);
 	if (!ns)
-		return;
+		return -ENOENT;
 	memset(&ssh, 0, sizeof(ssh));
 	ssh.hwtstamp = ns_to_ktime(ns);
 	skb_tstamp_tx(skb, &ssh);
+	return 0;
 }
 
 #endif /*CONFIG_TI_CPTS*/
 
+/*
+    If both mult and shift are passed in as 0, they will be
+    calculated based on the cpts rfclk frequency
+*/
 int cpts_register(struct device *dev, struct cpts *cpts,
 		  u32 mult, u32 shift)
 {
 #ifdef CONFIG_TI_CPTS
 	int err, i;
 	unsigned long flags;
+	u32 v;
 
-	if (ptp_filter_init(ptp_filter, ARRAY_SIZE(ptp_filter))) {
+	if (cpts->filter == NULL) {
+		cpts->filter = ptp_default_filter;
+		cpts->filter_size = ARRAY_SIZE(ptp_default_filter);
+	}
+
+	if (ptp_filter_init(cpts->filter, cpts->filter_size)) {
 		pr_err("cpts: bad ptp filter\n");
 		return -EINVAL;
 	}
@@ -385,6 +939,7 @@ int cpts_register(struct device *dev, struct cpts *cpts,
 	}
 	spin_lock_init(&cpts->lock);
 
+	cpts->dev = dev;
 	cpts->cc.read = cpts_systim_read;
 	cpts->cc.mask = CLOCKSOURCE_MASK(32);
 	cpts->cc_mult = mult;
@@ -397,15 +952,33 @@ int cpts_register(struct device *dev, struct cpts *cpts,
 		list_add(&cpts->pool_data[i].list, &cpts->pool);
 
 	cpts_clk_init(cpts);
-	cpts_write32(cpts, CPTS_EN, control);
+	/* mult may be updated during clk init */
+	cpts->cc_mult = cpts->cc.mult;
+
+	v = cpts_read32(cpts, control) | CPTS_EN;
+	if (cpts->ts_comp_polarity)
+		v |= TS_COMP_POLARITY;
+	else
+		v &= ~TS_COMP_POLARITY;
+	cpts_write32(cpts, v, control);
 	cpts_write32(cpts, TS_PEND_EN, int_enable);
 
+	cpts_cyc2ns_set_max_cap(cpts);
+
+	if (cpts->info.pps)
+		cpts_pps_init(cpts);
+
 	spin_lock_irqsave(&cpts->lock, flags);
-	timecounter_init(&cpts->tc, &cpts->cc, ktime_to_ns(ktime_get_real()));
+	cpts_tc_init(cpts, ktime_to_ns(ktime_get_real()));
 	spin_unlock_irqrestore(&cpts->lock, flags);
 
-	INIT_DELAYED_WORK(&cpts->overflow_work, cpts_overflow_check);
-	schedule_delayed_work(&cpts->overflow_work, CPTS_OVERFLOW_PERIOD);
+	cpts->cc_total = cpts->tc.cycle_last;
+
+	init_timer(&cpts->timer);
+	cpts->timer.data        = (unsigned long)cpts;
+	cpts->timer.function    = cpts_overflow_check;
+	cpts->timer.expires     = jiffies + CPTS_OVERFLOW_PERIOD;
+	add_timer(&cpts->timer);
 
 	cpts->phc_index = ptp_clock_index(cpts->clock);
 #endif
@@ -417,7 +990,7 @@ void cpts_unregister(struct cpts *cpts)
 #ifdef CONFIG_TI_CPTS
 	if (cpts->clock) {
 		ptp_clock_unregister(cpts->clock);
-		cancel_delayed_work_sync(&cpts->overflow_work);
+		del_timer_sync(&cpts->timer);
 	}
 	if (cpts->refclk)
 		cpts_clk_release(cpts);
diff --git a/drivers/net/ethernet/ti/cpts.h b/drivers/net/ethernet/ti/cpts.h
index 1a581ef..30c640a 100644
--- a/drivers/net/ethernet/ti/cpts.h
+++ b/drivers/net/ethernet/ti/cpts.h
@@ -28,14 +28,23 @@
 #include <linux/ptp_clock_kernel.h>
 #include <linux/skbuff.h>
 
+#define PTP_CLASS_VLAN_IPV4  0x50 /* event in a VLAN tagged IPV4 packet */
+#define PTP_CLASS_VLAN_IPV6  0x60 /* event in a VLAN tagged IPV6 packet */
+
+#define PTP_CLASS_V1_VLAN_IPV4 (PTP_CLASS_V1 | PTP_CLASS_VLAN_IPV4)
+#define PTP_CLASS_V1_VLAN_IPV6 (PTP_CLASS_V1 | PTP_CLASS_VLAN_IPV6)
+#define PTP_CLASS_V2_VLAN_IPV4 (PTP_CLASS_V2 | PTP_CLASS_VLAN_IPV4)
+#define PTP_CLASS_V2_VLAN_IPV6 (PTP_CLASS_V2 | PTP_CLASS_VLAN_IPV6)
+
 struct cpsw_cpts {
 	u32 idver;                /* Identification and version */
 	u32 control;              /* Time sync control */
-	u32 res1;
+	u32 rfclk_sel;            /* Ref Clock Select (v1.5 only) */
 	u32 ts_push;              /* Time stamp event push */
 	u32 ts_load_val;          /* Time stamp load value */
 	u32 ts_load_en;           /* Time stamp load enable */
-	u32 res2[2];
+	u32 ts_comp_val;          /* Time stamp comparison value, v1.5 & up */
+	u32 ts_comp_length;       /* Time stamp comp assert len, v1.5 & up */
 	u32 intstat_raw;          /* Time sync interrupt status raw */
 	u32 intstat_masked;       /* Time sync interrupt status masked */
 	u32 int_enable;           /* Time sync interrupt enable */
@@ -43,6 +52,7 @@ struct cpsw_cpts {
 	u32 event_pop;            /* Event interrupt pop */
 	u32 event_low;            /* 32 Bit Event Time Stamp */
 	u32 event_high;           /* Event Type Fields */
+	u32 event_high2;          /* Domain number in Ptp message v1.5 & up */
 };
 
 /* Bit definitions for the IDVER register */
@@ -60,6 +70,7 @@ struct cpsw_cpts {
 #define HW3_TS_PUSH_EN       (1<<10) /* Hardware push 3 enable */
 #define HW2_TS_PUSH_EN       (1<<9)  /* Hardware push 2 enable */
 #define HW1_TS_PUSH_EN       (1<<8)  /* Hardware push 1 enable */
+#define TS_COMP_POLARITY     (1<<2)  /* TS_COMP Polarity */
 #define INT_TEST             (1<<1)  /* Interrupt Test */
 #define CPTS_EN              (1<<0)  /* Time Sync Enable */
 
@@ -91,10 +102,17 @@ enum {
 	CPTS_EV_HW,   /* Hardware Time Stamp Push Event */
 	CPTS_EV_RX,   /* Ethernet Receive Event */
 	CPTS_EV_TX,   /* Ethernet Transmit Event */
+	CPTS_EV_COMP, /* Time Stamp Compare Event */
 };
 
-/* This covers any input clock up to about 500 MHz. */
-#define CPTS_OVERFLOW_PERIOD (HZ * 8)
+/*
+   This covers any input clock up to about 500 MHz.
+   It also take care of misalignments that might occur
+   around counter half roll over.
+*/
+#define CPTS_OVERFLOW_PERIOD	(HZ / 5)
+#define CPTS_COMP_TMO		(CPTS_OVERFLOW_PERIOD * 2)
+#define CPTS_TMO		2
 
 #define CPTS_FIFO_DEPTH 16
 #define CPTS_MAX_EVENTS 32
@@ -102,11 +120,13 @@ enum {
 struct cpts_event {
 	struct list_head list;
 	unsigned long tmo;
+	u32 high2;
 	u32 high;
 	u32 low;
 };
 
 struct cpts {
+	struct device *dev;
 	struct cpsw_cpts __iomem *reg;
 	int tx_enable;
 	int rx_enable;
@@ -117,28 +137,48 @@ struct cpts {
 	u32 cc_mult; /* for the nominal frequency */
 	struct cyclecounter cc;
 	struct timecounter tc;
-	struct delayed_work overflow_work;
+	struct timer_list timer;
 	int phc_index;
 	struct clk *refclk;
 	struct list_head events;
 	struct list_head pool;
 	struct cpts_event pool_data[CPTS_MAX_EVENTS];
+	struct sock_filter *filter;
+	int filter_size;
+	int rftclk_sel;
+	u32 rftclk_freq;
+	int pps_enable;
+	u32 pps_one_sec; /* counter val equivalent of 1 sec */
+	u32 ts_comp_length;
+	u32 ts_comp_polarity;
+	u64 ts_comp_last;
+	u32 cc_div;
+	u64 cc_total;
+	u64 tc_base;
+	u64 max_cycles;
+	u64 max_nsec;
+	s32 ppb;
+	bool ignore_adjfreq;
+	u32 hw_ts_enable;
 #endif
 };
 
 #ifdef CONFIG_TI_CPTS
-void cpts_rx_timestamp(struct cpts *cpts, struct sk_buff *skb);
-void cpts_tx_timestamp(struct cpts *cpts, struct sk_buff *skb);
+extern int cpts_rx_timestamp(struct cpts *cpts, struct sk_buff *skb);
+extern int cpts_tx_timestamp(struct cpts *cpts, struct sk_buff *skb);
 #else
-static inline void cpts_rx_timestamp(struct cpts *cpts, struct sk_buff *skb)
+static inline int cpts_rx_timestamp(struct cpts *cpts, struct sk_buff *skb)
 {
+	return 0;
 }
-static inline void cpts_tx_timestamp(struct cpts *cpts, struct sk_buff *skb)
+static inline int cpts_tx_timestamp(struct cpts *cpts, struct sk_buff *skb)
 {
+	return 0;
 }
 #endif
 
-int cpts_register(struct device *dev, struct cpts *cpts, u32 mult, u32 shift);
-void cpts_unregister(struct cpts *cpts);
+extern int cpts_register(struct device *dev, struct cpts *cpts,
+			 u32 mult, u32 shift);
+extern void cpts_unregister(struct cpts *cpts);
 
 #endif
diff --git a/drivers/net/ethernet/ti/tlan.c b/drivers/net/ethernet/ti/tlan.c
index 62b19be..60c400f 100644
--- a/drivers/net/ethernet/ti/tlan.c
+++ b/drivers/net/ethernet/ti/tlan.c
@@ -319,6 +319,7 @@ static void tlan_remove_one(struct pci_dev *pdev)
 
 	free_netdev(dev);
 
+	pci_set_drvdata(pdev, NULL);
 	cancel_work_sync(&priv->tlan_tqueue);
 }
 
@@ -371,7 +372,7 @@ static int tlan_resume(struct pci_dev *pdev)
 
 	pci_set_power_state(pdev, PCI_D0);
 	pci_restore_state(pdev);
-	pci_enable_wake(pdev, PCI_D0, 0);
+	pci_enable_wake(pdev, 0, 0);
 	netif_device_attach(dev);
 
 	if (netif_running(dev))
@@ -532,6 +533,7 @@ static int tlan_probe1(struct pci_dev *pdev, long ioaddr, int irq, int rev,
 		/* This is a hack. We need to know which board structure
 		 * is suited for this adapter */
 		device_id = inw(ioaddr + EISA_ID2);
+		priv->is_eisa = 1;
 		if (device_id == 0x20F1) {
 			priv->adapter = &board_info[13]; /* NetFlex-3/E */
 			priv->adapter_rev = 23;		/* TLAN 2.3 */
diff --git a/drivers/net/ethernet/ti/tlan.h b/drivers/net/ethernet/ti/tlan.h
index 2eb33a2..5fc98a8 100644
--- a/drivers/net/ethernet/ti/tlan.h
+++ b/drivers/net/ethernet/ti/tlan.h
@@ -207,6 +207,7 @@ struct tlan_priv {
 	u8			tlan_full_duplex;
 	spinlock_t		lock;
 	u8			link;
+	u8			is_eisa;
 	struct work_struct			tlan_tqueue;
 	u8			neg_be_verbose;
 };
-- 
1.7.5.4

