From 36762be34a54d1c527dc94ea664260fc3e226329 Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Tue, 12 Jul 2016 14:13:36 -0400
Subject: [PATCH 308/347] crypto: ks2: add command label functions

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

KS2 SA hardware performs transformations accordingly to the instructions
given to it in the packet hardware descriptor ps_info fields.
TI LLD has utility functions to format and update those instructions.
LLD calls those instructions as "command label"

This commit ports those functions to the linux driver.

Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 92908b81487bd0d9575310e682fc174007cc89bb)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/crypto/Makefile            |    3 +-
 drivers/crypto/keystone-sa-hlp.h   |   49 ++++++
 drivers/crypto/keystone-sa-utils.c |  291 ++++++++++++++++++++++++++++++++++++
 3 files changed, 342 insertions(+), 1 deletions(-)
 create mode 100644 drivers/crypto/keystone-sa-utils.c

diff --git a/drivers/crypto/Makefile b/drivers/crypto/Makefile
index 871e2ef..c398b73 100644
--- a/drivers/crypto/Makefile
+++ b/drivers/crypto/Makefile
@@ -9,7 +9,8 @@ obj-$(CONFIG_CRYPTO_DEV_HIFN_795X) += hifn_795x.o
 obj-$(CONFIG_CRYPTO_DEV_IMGTEC_HASH) += img-hash.o
 obj-$(CONFIG_CRYPTO_DEV_IXP4XX) += ixp4xx_crypto.o
 obj-$(CONFIG_CRYPTO_DEV_KEYSTONE) += keystone-sa-driver.o
-keystone-sa-driver-objs := keystone-sa.o keystone-sa-lld.o
+keystone-sa-driver-objs := keystone-sa.o keystone-sa-lld.o \
+			   keystone-sa-utils.o
 obj-$(CONFIG_CRYPTO_DEV_MV_CESA) += mv_cesa.o
 obj-$(CONFIG_CRYPTO_DEV_MARVELL_CESA) += marvell/
 obj-$(CONFIG_CRYPTO_DEV_MXS_DCP) += mxs-dcp.o
diff --git a/drivers/crypto/keystone-sa-hlp.h b/drivers/crypto/keystone-sa-hlp.h
index 757e067..b2b4f22 100644
--- a/drivers/crypto/keystone-sa-hlp.h
+++ b/drivers/crypto/keystone-sa-hlp.h
@@ -24,6 +24,9 @@
 #include <linux/regmap.h>
 #include <asm/aes_glue.h>
 #include <crypto/aes.h>
+/* Number of 32 bit words in PS data  */
+#define SA_DMA_NUM_PS_WORDS	16
+
 
 #define SA_RX_BUF0_SIZE 1500
 
@@ -72,6 +75,52 @@ struct keystone_crypto_data {
 	atomic_t	tx_dma_desc_cnt; /* Tx DMA desc-s available */
 };
 
+/* Command label updation info */
+struct sa_cmdl_param_info {
+	u16	index;
+	u16	offset;
+	u16	size;
+};
+
+/* Maximum length of Auxiliary data in 32bit words */
+#define SA_MAX_AUX_DATA_WORDS	8
+
+struct sa_cmdl_upd_info {
+	u16	flags;
+	u16	submode;
+	struct sa_cmdl_param_info	enc_size;
+	struct sa_cmdl_param_info	enc_size2;
+	struct sa_cmdl_param_info	enc_offset;
+	struct sa_cmdl_param_info	enc_iv;
+	struct sa_cmdl_param_info	enc_iv2;
+	struct sa_cmdl_param_info	aad;
+	struct sa_cmdl_param_info	payload;
+	struct sa_cmdl_param_info	auth_size;
+	struct sa_cmdl_param_info	auth_size2;
+	struct sa_cmdl_param_info	auth_offset;
+	struct sa_cmdl_param_info	auth_iv;
+	struct sa_cmdl_param_info	aux_key_info;
+	u32				aux_key[SA_MAX_AUX_DATA_WORDS];
+};
+
+enum sa_submode {
+	SA_MODE_GEN = 0,
+	SA_MODE_CCM,
+	SA_MODE_GCM,
+	SA_MODE_GMAC
+};
+
+/*
+ * Number of 32bit words appended after the command label
+ * in PSDATA to identify the crypto request context.
+ * word-0: Request type
+ * word-1: pointer to request
+ */
+#define SA_PSDATA_CTX_WORDS 4
+
+/* Maximum size of Command label in 32 words */
+#define SA_MAX_CMDL_WORDS (SA_DMA_NUM_PS_WORDS - SA_PSDATA_CTX_WORDS)
+
 /* Tx DMA callback param */
 struct sa_dma_req_ctx {
 	struct keystone_crypto_data *dev_data;
diff --git a/drivers/crypto/keystone-sa-utils.c b/drivers/crypto/keystone-sa-utils.c
new file mode 100644
index 0000000..51e7ef4
--- /dev/null
+++ b/drivers/crypto/keystone-sa-utils.c
@@ -0,0 +1,291 @@
+/*
+ * Keystone crypto accelerator driver
+ *
+ * Copyright (C) 2015, 2016 Texas Instruments Incorporated - http://www.ti.com
+ *
+ * Authors:	Sandeep Nair
+ *		Vitaly Andrianov
+ *
+ * Contributors:Tinku Mannan
+ *		Hao Zhang
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/soc/ti/knav_dma.h>
+#include <linux/soc/ti/knav_qmss.h>
+
+#include "keystone-sa.h"
+#include "keystone-sa-hlp.h"
+
+#define SA_CMDL_UPD_ENC		0x0001
+#define SA_CMDL_UPD_AUTH	0x0002
+#define SA_CMDL_UPD_ENC_IV	0x0004
+#define SA_CMDL_UPD_AUTH_IV	0x0008
+#define SA_CMDL_UPD_AUX_KEY	0x0010
+
+/* Command Label Definitions and utility functions */
+struct sa_cmdl_cfg {
+	int	enc1st;
+	int	aalg;
+	u8	enc_eng_id;
+	u8	auth_eng_id;
+	u8	iv_size;
+	const u8 *akey;
+	u16	akey_len;
+};
+
+/* Format general command label */
+static int sa_format_cmdl_gen(struct sa_cmdl_cfg *cfg, u8 *cmdl,
+			      struct sa_cmdl_upd_info *upd_info)
+{
+	u8 offset = 0;
+	u32 *word_ptr = (u32 *)cmdl;
+	int i;
+	int ret = 0;
+
+	/* Clear the command label */
+	memset(cmdl, 0, (SA_MAX_CMDL_WORDS * sizeof(u32)));
+
+	/* Iniialize the command update structure */
+	memset(upd_info, 0, sizeof(*upd_info));
+	upd_info->enc_size.offset = 2;
+	upd_info->enc_size.size = 2;
+	upd_info->enc_offset.size = 1;
+	upd_info->enc_size2.size = 4;
+	upd_info->auth_size.offset = 2;
+	upd_info->auth_size.size = 2;
+	upd_info->auth_offset.size = 1;
+
+	if (cfg->aalg == SA_AALG_ID_AES_XCBC) {
+		/* Derive K2/K3 subkeys */
+		ret = sa_aes_xcbc_subkey(NULL, (u8 *)&upd_info->aux_key[0],
+					 (u8 *)&upd_info->aux_key[AES_BLOCK_SIZE
+					 / sizeof(u32)],
+					 cfg->akey, cfg->akey_len);
+		if (ret)
+			return ret;
+
+		/*
+		 * Format the key into 32bit CPU words
+		 * from a big-endian stream
+		 */
+		for (i = 0; i < SA_MAX_AUX_DATA_WORDS; i++)
+			upd_info->aux_key[i] =
+				be32_to_cpu(upd_info->aux_key[i]);
+	}
+
+	if (cfg->enc1st) {
+		if (cfg->enc_eng_id != SA_ENG_ID_NONE) {
+			upd_info->flags |= SA_CMDL_UPD_ENC;
+			upd_info->enc_size.index = 0;
+			upd_info->enc_offset.index = 1;
+
+			if ((cfg->enc_eng_id == SA_ENG_ID_EM1) &&
+			    (cfg->auth_eng_id == SA_ENG_ID_EM1))
+				cfg->auth_eng_id = SA_ENG_ID_EM2;
+
+			/* Encryption command label */
+			if (cfg->auth_eng_id != SA_ENG_ID_NONE)
+				cmdl[SA_CMDL_OFFSET_NESC] = cfg->auth_eng_id;
+			else
+				cmdl[SA_CMDL_OFFSET_NESC] = SA_ENG_ID_OUTPORT2;
+
+			/* Encryption modes requiring IV */
+			if (cfg->iv_size) {
+				upd_info->flags |= SA_CMDL_UPD_ENC_IV;
+				upd_info->enc_iv.index =
+					SA_CMDL_HEADER_SIZE_BYTES >> 2;
+				upd_info->enc_iv.size = cfg->iv_size;
+
+				cmdl[SA_CMDL_OFFSET_LABEL_LEN] =
+					SA_CMDL_HEADER_SIZE_BYTES +
+					cfg->iv_size;
+
+				cmdl[SA_CMDL_OFFSET_OPTION_CTRL1] =
+					(SA_CTX_ENC_AUX2_OFFSET |
+					 (cfg->iv_size >> 3));
+
+				offset = SA_CMDL_HEADER_SIZE_BYTES +
+						cfg->iv_size;
+			} else {
+				cmdl[SA_CMDL_OFFSET_LABEL_LEN] =
+					SA_CMDL_HEADER_SIZE_BYTES;
+				offset = SA_CMDL_HEADER_SIZE_BYTES;
+			}
+		}
+
+		if (cfg->auth_eng_id != SA_ENG_ID_NONE) {
+			upd_info->flags |= SA_CMDL_UPD_AUTH;
+			upd_info->auth_size.index = offset >> 2;
+			upd_info->auth_offset.index =
+				upd_info->auth_size.index + 1;
+
+			cmdl[offset + SA_CMDL_OFFSET_NESC] = SA_ENG_ID_OUTPORT2;
+
+			/* Algorithm with subkeys */
+			if ((cfg->aalg == SA_AALG_ID_AES_XCBC) ||
+			    (cfg->aalg == SA_AALG_ID_CMAC)) {
+				upd_info->flags |= SA_CMDL_UPD_AUX_KEY;
+				upd_info->aux_key_info.index =
+				(offset + SA_CMDL_HEADER_SIZE_BYTES) >> 2;
+
+				cmdl[offset + SA_CMDL_OFFSET_LABEL_LEN] =
+					SA_CMDL_HEADER_SIZE_BYTES + 16;
+				cmdl[offset + SA_CMDL_OFFSET_OPTION_CTRL1] =
+					(SA_CTX_ENC_AUX1_OFFSET | (16 >> 3));
+
+				offset += SA_CMDL_HEADER_SIZE_BYTES + 16;
+			} else {
+				cmdl[offset + SA_CMDL_OFFSET_LABEL_LEN] =
+					SA_CMDL_HEADER_SIZE_BYTES;
+				offset += SA_CMDL_HEADER_SIZE_BYTES;
+			}
+		}
+	} else {
+		/* Auth first */
+		if (cfg->auth_eng_id != SA_ENG_ID_NONE) {
+			upd_info->flags |= SA_CMDL_UPD_AUTH;
+			upd_info->auth_size.index = 0;
+			upd_info->auth_offset.index = 1;
+
+			if ((cfg->auth_eng_id == SA_ENG_ID_EM1) &&
+			    (cfg->enc_eng_id == SA_ENG_ID_EM1))
+				cfg->enc_eng_id = SA_ENG_ID_EM2;
+
+			/* Authentication command label */
+			if (cfg->enc_eng_id != SA_ENG_ID_NONE)
+				cmdl[SA_CMDL_OFFSET_NESC] = cfg->enc_eng_id;
+			else
+				cmdl[SA_CMDL_OFFSET_NESC] = SA_ENG_ID_OUTPORT2;
+
+			/* Algorithm with subkeys */
+			if ((cfg->aalg == SA_AALG_ID_AES_XCBC) ||
+			    (cfg->aalg == SA_AALG_ID_CMAC)) {
+				upd_info->flags |= SA_CMDL_UPD_AUX_KEY;
+				upd_info->aux_key_info.index =
+					(SA_CMDL_HEADER_SIZE_BYTES) >> 2;
+
+				cmdl[SA_CMDL_OFFSET_LABEL_LEN] =
+					SA_CMDL_HEADER_SIZE_BYTES + 16;
+				cmdl[offset + SA_CMDL_OFFSET_OPTION_CTRL1] =
+					(SA_CTX_ENC_AUX1_OFFSET | (16 >> 3));
+
+				offset = SA_CMDL_HEADER_SIZE_BYTES + 16;
+			} else {
+				cmdl[SA_CMDL_OFFSET_LABEL_LEN] =
+					SA_CMDL_HEADER_SIZE_BYTES;
+				offset = SA_CMDL_HEADER_SIZE_BYTES;
+			}
+		}
+
+		if (cfg->enc_eng_id != SA_ENG_ID_NONE) {
+			upd_info->flags |= SA_CMDL_UPD_ENC;
+			upd_info->enc_size.index = offset >> 2;
+			upd_info->enc_offset.index =
+				upd_info->enc_size.index + 1;
+
+			cmdl[offset + SA_CMDL_OFFSET_NESC] = SA_ENG_ID_OUTPORT2;
+
+			/* Encryption modes requiring IV */
+			if (cfg->iv_size) {
+				upd_info->flags |= SA_CMDL_UPD_ENC_IV;
+				upd_info->enc_iv.index =
+				(offset + SA_CMDL_HEADER_SIZE_BYTES) >> 2;
+				upd_info->enc_iv.size = cfg->iv_size;
+
+				cmdl[offset + SA_CMDL_OFFSET_LABEL_LEN] =
+				SA_CMDL_HEADER_SIZE_BYTES + cfg->iv_size;
+
+				cmdl[offset + SA_CMDL_OFFSET_OPTION_CTRL1] =
+				(SA_CTX_ENC_AUX2_OFFSET | (cfg->iv_size >> 3));
+
+				offset += SA_CMDL_HEADER_SIZE_BYTES +
+						cfg->iv_size;
+			} else {
+				cmdl[offset + SA_CMDL_OFFSET_LABEL_LEN] =
+					SA_CMDL_HEADER_SIZE_BYTES;
+				offset += SA_CMDL_HEADER_SIZE_BYTES;
+			}
+		}
+	}
+
+	offset = roundup(offset, 8);
+
+	for (i = 0; i < offset / 4; i++)
+		word_ptr[i] = be32_to_cpu(word_ptr[i]);
+
+	return offset;
+}
+
+static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
+{
+	int j;
+
+	for (j = 0; j < ((size16) ? 4 : 2); j++) {
+		*out = cpu_to_be32(*((u32 *)iv));
+		iv += 4;
+		out++;
+	}
+}
+
+/* Update Command label */
+static inline void
+sa_update_cmdl(struct device *dev, u8 enc_offset, u16 enc_size,	u8 *enc_iv,
+	       u8 auth_offset, u16 auth_size, u8 *auth_iv, u8 aad_size,
+	       u8 *aad,	struct sa_cmdl_upd_info	*upd_info, u32 *cmdl)
+{
+	switch (upd_info->submode) {
+	case SA_MODE_GEN:
+		if (likely(upd_info->flags & SA_CMDL_UPD_ENC)) {
+			cmdl[upd_info->enc_size.index] &= 0xffff0000;
+			cmdl[upd_info->enc_size.index] |= enc_size;
+			cmdl[upd_info->enc_offset.index] &= 0x00ffffff;
+			cmdl[upd_info->enc_offset.index] |=
+						((u32)enc_offset << 24);
+
+			if (likely(upd_info->flags & SA_CMDL_UPD_ENC_IV)) {
+				sa_copy_iv(&cmdl[upd_info->enc_iv.index],
+					   enc_iv,
+					   (upd_info->enc_iv.size > 8));
+			}
+		}
+
+		if (likely(upd_info->flags & SA_CMDL_UPD_AUTH)) {
+			cmdl[upd_info->auth_size.index] &= 0xffff0000;
+			cmdl[upd_info->auth_size.index] |= auth_size;
+			cmdl[upd_info->auth_offset.index] &= 0x00ffffff;
+			cmdl[upd_info->auth_offset.index] |=
+					((u32)auth_offset << 24);
+
+			if (upd_info->flags & SA_CMDL_UPD_AUTH_IV) {
+				sa_copy_iv(&cmdl[upd_info->auth_iv.index],
+					   auth_iv,
+					   (upd_info->auth_iv.size > 8));
+			}
+
+			if (upd_info->flags & SA_CMDL_UPD_AUX_KEY) {
+				int offset = (auth_size & 0xF) ? 4 : 0;
+
+				memcpy(&cmdl[upd_info->aux_key_info.index],
+				       &upd_info->aux_key[offset], 16);
+			}
+		}
+		break;
+
+	case SA_MODE_CCM:
+	case SA_MODE_GCM:
+	case SA_MODE_GMAC:
+	default:
+		dev_err(dev, "unsupported mode(%d)\n", upd_info->submode);
+		break;
+	}
+}
+
-- 
1.7.5.4

