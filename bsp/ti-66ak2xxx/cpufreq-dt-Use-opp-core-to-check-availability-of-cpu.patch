From 7cafc3d5d9134570e513f90a75ebd536b6810522 Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Fri, 6 May 2016 12:11:38 -0500
Subject: [PATCH 177/347] cpufreq: dt: Use opp core to check availability of
 cpu supply

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Currently the cpufreq-dt driver uses the regulator framework to check
for availability of a single regulator linked to the CPU. The OPP core
is responsible for controlling this regulator so let's use
dev_pm_opp_set_supply, which is responsible for getting the regulator in
the OPP core, to check for resources_available so that whatever supply the
OPP core is using, single regulator or something else, is checked in a
generic way without needing to extend the cpufreq-dt driver to check for
every possible supply type.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit a21244107869743e31b4befcaacfecbc411a9308)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/cpufreq/cpufreq-dt.c |   33 ++++++++++++++++++---------------
 1 files changed, 18 insertions(+), 15 deletions(-)

diff --git a/drivers/cpufreq/cpufreq-dt.c b/drivers/cpufreq/cpufreq-dt.c
index 204cd52..5a9aa65 100644
--- a/drivers/cpufreq/cpufreq-dt.c
+++ b/drivers/cpufreq/cpufreq-dt.c
@@ -21,7 +21,6 @@
 #include <linux/of.h>
 #include <linux/pm_opp.h>
 #include <linux/platform_device.h>
-#include <linux/regulator/consumer.h>
 #include <linux/slab.h>
 #include <linux/thermal.h>
 
@@ -87,7 +86,6 @@ node_put:
 static int resources_available(void)
 {
 	struct device *cpu_dev;
-	struct regulator *cpu_reg;
 	struct clk *cpu_clk;
 	int ret = 0;
 	const char *name;
@@ -120,22 +118,27 @@ static int resources_available(void)
 	if (!name)
 		return 0;
 
-	cpu_reg = regulator_get_optional(cpu_dev, name);
-	ret = PTR_ERR_OR_ZERO(cpu_reg);
-	if (ret) {
-		/*
-		 * If cpu's regulator supply node is present, but regulator is
-		 * not yet registered, we should try defering probe.
-		 */
-		if (ret == -EPROBE_DEFER)
-			dev_dbg(cpu_dev, "cpu0 regulator not ready, retry\n");
-		else
-			dev_dbg(cpu_dev, "no regulator for cpu0: %d\n", ret);
+	name = find_supply_name(cpu_dev);
+	if (name) {
+		ret = dev_pm_opp_set_supply(cpu_dev, name);
+		if (ret) {
+			/*
+			 * If cpu's supply node is present, but supply is
+			 * not yet registered, we should try defering probe.
+			 */
+			if (ret == -EPROBE_DEFER)
+				dev_dbg(cpu_dev, "cpu0 supply not ready, retry\n");
+			else
+				dev_dbg(cpu_dev, "no supply for cpu0: %d\n",
+					ret);
+
+			return ret;
+		}
 
-		return ret;
 	}
 
-	regulator_put(cpu_reg);
+	dev_pm_opp_put_supply(cpu_dev);
+
 	return 0;
 }
 
-- 
1.7.5.4

