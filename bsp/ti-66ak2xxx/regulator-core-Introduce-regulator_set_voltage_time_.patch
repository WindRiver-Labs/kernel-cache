From abfd54ed49f92d701c1f319fbc58090143136bdd Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Fri, 6 May 2016 10:54:26 -0500
Subject: [PATCH 327/347] regulator: core: Introduce
 regulator_set_voltage_time_triplet

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

regulator_set_voltage_time is critical for applications like cpufreq
ondemand governor but currently the function only matches exact voltages
when calculating voltage transition time. Due to the wide variety of
regulators that can be used with any given SoC, operating point voltages
may not always match exact voltages provided by the regulator in use,
so regulator_set_voltage_time will fail to match the min or max voltage
exactly and return -EINVAL even though it is a perfectly valid
transition.

Ideally we should be checking for a target, mininum, and maximum acceptable
voltage range for both the min and max voltages when calculating a voltage
transition time to allow us to find transition times between voltages
that are supported but may not match exactly. Introduce
regulator_set_voltage_time_triplet to allow passing a target, min and max
voltage value for the old and new voltage values used in transition
time calculation so that the regulator framework can pick voltages close
to what regulator_set_voltage would use and return transition time
between them.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit c683f7b3e04e7131c9665bd5e9fb26dd8f7cfd50)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/regulator/core.c           |   44 ++++++++++++++++++++++++++++++++++++
 include/linux/regulator/consumer.h |   13 ++++++++++
 2 files changed, 57 insertions(+), 0 deletions(-)

diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
index db320e8..99c8b9d 100644
--- a/drivers/regulator/core.c
+++ b/drivers/regulator/core.c
@@ -3064,6 +3064,50 @@ int regulator_set_voltage_time_sel(struct regulator_dev *rdev,
 EXPORT_SYMBOL_GPL(regulator_set_voltage_time_sel);
 
 /**
+ * regulator_set_voltage_time_triplet - get raise/fall time of voltages in range
+ * @regulator: regulator source
+ * @old_uV: starting voltage in microvolts
+ * @old_uV_min: minimum acceptable starting voltage in microvolts
+ * @old_uV_max: maximum acceptable starting voltage in microvolts
+ * @new_uV: target voltage in microvolts
+ * @new_uV_min: minimum acceptable target voltage in microvolts
+ * @new_uV_max: maximum acceptable target voltage in microvolts
+ *
+ * Provided with the starting and ending voltage, this function attempts to
+ * calculate the time in microseconds required to rise or fall to this new
+ * voltage, but will also choose an acceptable voltage for the starting or
+ * ending voltage if found in between the min and max values passed.
+ */
+int regulator_set_voltage_time_triplet(struct regulator *regulator,
+				       int old_uV, int old_uV_min,
+				       int old_uV_max, int new_uV,
+				       int new_uV_min, int new_uV_max)
+{
+	struct regulator_dev *rdev = regulator->rdev;
+	const struct regulator_ops *ops = rdev->desc->ops;
+	int old_sel = -1;
+	int new_sel = -1;
+
+	/* Currently requires operations to do this */
+	if (!ops->set_voltage_time_sel)
+		return -EINVAL;
+
+	old_sel = regulator_map_voltage(rdev, old_uV, old_uV_max);
+	if (old_sel < 0)
+		old_sel = regulator_map_voltage(rdev, old_uV_min, old_uV_max);
+
+	new_sel = regulator_map_voltage(rdev, new_uV, new_uV_max);
+	if (new_sel < 0)
+		new_sel = regulator_map_voltage(rdev, new_uV_min, new_uV_max);
+
+	if (old_sel < 0 || new_sel < 0)
+		return -EINVAL;
+
+	return ops->set_voltage_time_sel(rdev, old_sel, new_sel);
+}
+EXPORT_SYMBOL_GPL(regulator_set_voltage_time_triplet);
+
+/**
  * regulator_sync_voltage - re-apply last regulator output voltage
  * @regulator: regulator source
  *
diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
index cae500b..c0fab32 100644
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -232,6 +232,10 @@ unsigned int regulator_get_linear_step(struct regulator *regulator);
 int regulator_set_voltage(struct regulator *regulator, int min_uV, int max_uV);
 int regulator_set_voltage_time(struct regulator *regulator,
 			       int old_uV, int new_uV);
+int regulator_set_voltage_time_triplet(struct regulator *regulator,
+				       int old_uV, int old_uV_min,
+				       int old_uV_max, int new_uV,
+				       int new_uV_min, int new_uV_max);
 int regulator_get_voltage(struct regulator *regulator);
 int regulator_sync_voltage(struct regulator *regulator);
 int regulator_set_current_limit(struct regulator *regulator,
@@ -447,6 +451,15 @@ static inline int regulator_set_voltage_time(struct regulator *regulator,
 	return 0;
 }
 
+static inline
+int regulator_set_voltage_time_triplet(struct regulator *regulator,
+				       int old_uV, int old_uV_min,
+				       int old_uV_max, int new_uV,
+				       int new_uV_min, int new_uV_max)
+{
+	return 0;
+}
+
 static inline int regulator_get_voltage(struct regulator *regulator)
 {
 	return -EINVAL;
-- 
1.7.5.4

