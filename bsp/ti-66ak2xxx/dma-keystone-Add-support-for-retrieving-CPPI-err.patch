From 20664e7239e5784a1e13a5d0bd3f0529b6552de2 Mon Sep 17 00:00:00 2001
From: Sandeep Nair <sandeep_n@ti.com>
Date: Thu, 3 Oct 2013 16:26:54 -0400
Subject: [PATCH 055/256] dma: keystone: Add support for retrieving CPPI err

CPPI descriptor has error flags which can be set by NETCP to indicate error in
packet. For e.g. L3/L4 protocol checksum verification errors are indicated in
these flags, which the ethernet driver would need to access.
This patch adds support for retrieving the CPPI error flags through pktdma
driver.

Signed-off-by: Sandeep Nair <sandeep_n@ti.com>
(cherry picked from commit 00d1da1537b8a84b02e6acac46719d5c7d18194b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/dma/keystone-pktdma.c |   29 +++++++++++++++++++++++++++++
 include/linux/keystone-dma.h  |    1 +
 2 files changed, 30 insertions(+), 0 deletions(-)

diff --git a/drivers/dma/keystone-pktdma.c b/drivers/dma/keystone-pktdma.c
index ba63020..09ea740 100644
--- a/drivers/dma/keystone-pktdma.c
+++ b/drivers/dma/keystone-pktdma.c
@@ -60,6 +60,8 @@
 #define DESC_LEN_MASK		BITS(22)
 #define DESC_TYPE_HOST		0
 #define DESC_TYPE_SHIFT		26
+#define DESC_EFLAGS_MASK	BITS(4)
+#define DESC_EFLAGS_SHIFT	20
 
 #define DMA_DEFAULT_NUM_DESCS	128
 #define DMA_DEFAULT_PRIORITY	DMA_PRIO_MED_L
@@ -633,6 +635,15 @@ static int chan_complete(struct keystone_dma_chan *chan, struct hwqueue *queue,
 				sg_retlen++;
 				desc_copy(chan, data, hwdesc->psdata, len);
 			}
+
+			if ((desc->options & DMA_HAS_EFLAGS)) {
+				data = sg_virt(sg);
+				sg++;
+				sg_retlen++;
+				*data =
+				(hwval_to_host(chan, hwdesc->packet_info) >>
+				 DESC_EFLAGS_SHIFT) & DESC_EFLAGS_MASK;
+			}
 		}
 
 		/* Process the completed descriptor chain */
@@ -1575,6 +1586,24 @@ chan_prep_slave_sg(struct dma_chan *achan, struct scatterlist *_sg,
 		pslen /= sizeof(u32);
 	}
 
+	 /* Error flag is valid only for Rx channel */
+	if (unlikely((options & DMA_HAS_EFLAGS) &&
+			(direction == DMA_MEM_TO_DEV))) {
+		dev_err(chan_dev(chan), "eflag requested for Tx channel\n");
+		return ERR_PTR(-EINVAL);
+	}
+
+	if (options & DMA_HAS_EFLAGS) {
+		num_sg--;
+		sg++;
+
+		if (unlikely(sg->length < sizeof(u32))) {
+			dev_err(chan_dev(chan), "invalid eflag length %d\n",
+				sg->length);
+			return ERR_PTR(-EINVAL);
+		}
+	}
+
 	if (unlikely(options & DMA_HAS_FLOWTAG))
 		tag_info =
 			((options >> DMA_FLOWTAG_SHIFT) & DMA_FLOWTAG_MASK) <<
diff --git a/include/linux/keystone-dma.h b/include/linux/keystone-dma.h
index 73ac7ad..66c9bd5 100644
--- a/include/linux/keystone-dma.h
+++ b/include/linux/keystone-dma.h
@@ -20,6 +20,7 @@
 #define DMA_HAS_PSINFO		BIT(31)
 #define DMA_HAS_EPIB		BIT(30)
 #define DMA_HAS_FLOWTAG		BIT(29)
+#define DMA_HAS_EFLAGS		BIT(28)
 #define DMA_QNUM_SHIFT		24
 #define DMA_QNUM_MASK		BITS(2)
 #define DMA_FLOWTAG_SHIFT	18
-- 
1.7.5.4

