From b57a8db7ba18003dead2cb380f69cb3a584891e5 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Wed, 31 Aug 2016 10:48:10 -0400
Subject: [PATCH 208/347] net: netcp: add special handling for
 broadcast/multicast

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

This is a hack to implement special packet processing for specific marked
packets. The intended use is:

  1. Ethernet interfaces are part of a bridge
  2. The switch is enabled (by default it is not) through sysfs command
  3. ALE is enabled through sysfs command
  4. Bridge forwarding is disabled  Bridge forwarding disabled via
     "ebtables -P FORWARD DROP

In this rather odd situation, the bridge will transmit multicast packets
(and broadcast) by sending one on each of the slaved interfaces.
This results in multiple packets through QoS, which is considered "bad".
To avoid this, multicast/broadcast packets can be marked via ebtables for
special processing in the NetCP PA module before the packets are queued
for transmission. Packets thus recognized are NOT marked for egress via a
specific slave port, and thus will be transmitted through all slave ports
by the ALE in NetCP switch.

To check if the interface is part of a bridge, a netcp_netdevice_event()
handler is added to mark the interface part of a bridge or not and is
used by the PA module. A new sysfs interface "mcast_filter" has been added
to allow user to configure two u32 values: a "match" value and a "mask".

As part of the pa tx hook, it checks if the interface is bridged. If true,
it checks if special processing is needed by looking at the skb->mark
field, it bitwise-ANDs the skb->mark value with the "mask" value and
then compares the result with the "match" value. If these do not match,
the mark is ignored and the packet is processed normally.

However, if the "match" value matches, then the low-order 8 bits of the
skb->mark field is used as a bitmask to determine whether the packet
should be dropped. If the packet would normally have been directed to
slave port 1, then bit 0 of skb->mark is checked; slave port 2 checks
bit 1, etc. If the bit is set, then the packet is enqueued; If the bit
is NOT set, the packet is silently dropped.

    An example...

  User enter
    echo "12345600 ffffff00" >
	/sys/devices/platform/soc/2620110.netcp/mcast_filter

The runtime configuration scripts execute this command:

 ebtables -A OUTPUT -d Multicast -j mark \
                --mark-set 0x12345601 --mark-target ACCEPT

When the bridge attempts to send multicast packet, it will send
one packet to each of the slave interfaces. The packet sent by the bridge
to slave interface eth0 (ethss slave port 1) will be passed to the NetCP
switch, and the ALE will send this packet on all slave ports. The packets
sent by the bridge to other slave interfaces (eth1, NetCP switch slave
port 2) will be silently dropped.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Reece R. Pollack <x0183204@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
Tested-by: Wingman Kwok <w-kwok2@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit a54acb91c36bb04a113fb94863a6afabab7e55b6)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 Documentation/networking/keystone-netcp.txt |   60 ++++++++++++++++++++++
 drivers/net/ethernet/ti/netcp.h             |    3 +
 drivers/net/ethernet/ti/netcp_core.c        |   49 ++++++++++++++++---
 drivers/net/ethernet/ti/netcp_pa_core.c     |   72 ++++++++++++++++++++++++++-
 drivers/net/ethernet/ti/netcp_pa_core.h     |    9 +++
 5 files changed, 185 insertions(+), 8 deletions(-)
 create mode 100644 Documentation/networking/keystone-netcp.txt

diff --git a/Documentation/networking/keystone-netcp.txt b/Documentation/networking/keystone-netcp.txt
new file mode 100644
index 0000000..eae845d
--- /dev/null
+++ b/Documentation/networking/keystone-netcp.txt
@@ -0,0 +1,60 @@
+Linux Driver for Keystone NetCP Ethernet Network Connection
+===========================================================
+
+Keystone netcp driver files are located at drivers/net/ethernet/ti/netcp*
+
+sysfs entry to configure special packet handling
+================================================
+mcast_filter
+------------
+This is a hack solution to implement special packet processing
+for specific marked packets. The intended use is:
+
+      1. Ethernet interfaces are part of a bridge
+      2. The switch is enabled (by default it is not) through sysfs command
+      3. ALE is enabled through sysfs command
+      4. Bridge forwarding is disabled  Bridge forwarding disabled via
+         "ebtables -P FORWARD DROP
+
+In this rather odd situation, the bridge will transmit multicast packets
+(and broadcast) by sending one on each of the slaved interfaces.
+This results in multiple packets through QoS, which is considered "bad".
+To avoid this, multicast/broadcast packets can be marked via ebtables for
+special processing in the NetCP PA module before the packets are queued
+for transmission. Packets thus recognized are NOT marked for egress via a
+specific slave port, and thus will be transmitted through all slave ports
+by the ALE in NetCP switch.
+
+As part of the pa tx hook in netcp driver, it checks if the interface is
+bridged. If true, it checks if special processing is needed by looking
+at the skb->mark field, it bitwise-ANDs the skb->mark value with the
+"mask" value and then compares the result with the "match" value. If
+these do not match, the mark is ignored and the packet is processed
+normally.
+
+However, if the "match" value matches, then the low-order 8 bits of the
+skb->mark field is used as a bitmask to determine whether the packet
+should be dropped. If the packet would normally have been directed to
+slave port 1, then bit 0 of skb->mark is checked; slave port 2 checks
+bit 1, etc. If the bit is set, then the packet is enqueued; If the bit
+is NOT set, the packet is silently dropped.
+
+   An example...
+
+     User enter
+       echo "12345600 ffffff00" >
+       /sys/devices/platform/soc/2620110.netcp/mcast_filter
+
+  The runtime configuration scripts execute this command:
+
+     ebtables -A OUTPUT -d Multicast -j mark \
+                    --mark-set 0x12345601 --mark-target ACCEPT
+
+When the bridge attempts to send multicast packet, it will send
+one packet to each of the slave interfaces. The packet sent by the bridge
+to slave interface eth0 (ethss slave port 1) will be passed to the NetCP
+switch, and the ALE will send this packet on all slave ports. The packets
+sent by the bridge to other slave interfaces (eth1, NetCP switch slave
+port 2) will be silently dropped.
+
+NOTE: This works only when PA is used in the netcp data path
diff --git a/drivers/net/ethernet/ti/netcp.h b/drivers/net/ethernet/ti/netcp.h
index eb6c6a9..47e8ff6 100644
--- a/drivers/net/ethernet/ti/netcp.h
+++ b/drivers/net/ethernet/ti/netcp.h
@@ -27,6 +27,8 @@
 
 /* Maximum Ethernet frame size supported by Keystone switch */
 #define NETCP_MAX_FRAME_SIZE		9504
+/* to indicate netcp core should drop the packet */
+#define NETCP_TX_DROP			1
 
 #define SGMII_LINK_MAC_MAC_AUTONEG	0
 #define SGMII_LINK_MAC_PHY		1
@@ -91,6 +93,7 @@ struct netcp_intf {
 	struct device		*ndev_dev;
 	struct net_device	*ndev;
 	bool			big_endian;
+	bool			bridged;
 	unsigned int		tx_compl_qid;
 	void			*tx_pool;
 	struct list_head	txhook_list_head;
diff --git a/drivers/net/ethernet/ti/netcp_core.c b/drivers/net/ethernet/ti/netcp_core.c
index 055187a..6838d42 100644
--- a/drivers/net/ethernet/ti/netcp_core.c
+++ b/drivers/net/ethernet/ti/netcp_core.c
@@ -71,6 +71,7 @@ struct netcp_device {
 	struct list_head	interface_head;
 	struct list_head	modpriv_head;
 	struct device		*device;
+	struct notifier_block	nb;
 };
 
 struct netcp_inst_modpriv {
@@ -1133,12 +1134,8 @@ static int netcp_tx_submit_skb(struct netcp_intf *netcp,
 	list_for_each_entry(tx_hook, &netcp->txhook_list_head, list) {
 		ret = tx_hook->hook_rtn(tx_hook->order, tx_hook->hook_data,
 					&p_info);
-		if (unlikely(ret != 0)) {
-			dev_err(netcp->ndev_dev, "TX hook %d rejected the packet with reason(%d)\n",
-				tx_hook->order, ret);
-			ret = (ret < 0) ? ret : NETDEV_TX_OK;
+		if (unlikely(ret != 0))
 			goto out;
-		}
 	}
 
 	/* Make sure some TX hook claimed the packet */
@@ -1231,8 +1228,10 @@ static int netcp_ndo_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	}
 
 	ret = netcp_tx_submit_skb(netcp, skb, desc);
-	if (ret)
+	if (ret) {
+		ret = (ret < 0) ? ret : NETDEV_TX_OK;
 		goto drop;
+	}
 
 	netif_trans_update(ndev);
 
@@ -1245,7 +1244,8 @@ static int netcp_ndo_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	return NETDEV_TX_OK;
 
 drop:
-	tx_stats->tx_dropped++;
+	if (ret != NETDEV_TX_OK)
+		tx_stats->tx_dropped++;
 	if (desc)
 		netcp_free_tx_desc_chain(netcp, desc, sizeof(*desc));
 	dev_kfree_skb(skb);
@@ -2081,6 +2081,34 @@ static void netcp_delete_interface(struct netcp_device *netcp_device,
 	free_netdev(ndev);
 }
 
+static int netcp_netdevice_event(struct notifier_block *unused,
+				 unsigned long event, void *ptr)
+{
+	struct net_device *dev = netdev_notifier_info_to_dev(ptr);
+	struct netdev_notifier_changeupper_info *info;
+	struct netcp_intf *netcp = netdev_priv(dev);
+	struct net_device *upper_dev;
+	int ret = NOTIFY_DONE;
+
+	if (dev->netdev_ops != &netcp_netdev_ops)
+		return ret;
+
+	switch (event) {
+	case NETDEV_CHANGEUPPER:
+		info = ptr;
+		upper_dev = info->upper_dev;
+		if (info->master &&
+		    netif_is_bridge_master(upper_dev)) {
+			if (info->linking)
+				netcp->bridged = true;
+			else
+				netcp->bridged = false;
+		}
+		break;
+	}
+	return ret;
+}
+
 static int netcp_probe(struct platform_device *pdev)
 {
 	struct device_node *node = pdev->dev.of_node;
@@ -2147,6 +2175,11 @@ static int netcp_probe(struct platform_device *pdev)
 			dev_err(dev, "module(%s) probe failed\n", module->name);
 	}
 	mutex_unlock(&netcp_modules_lock);
+	netcp_device->nb.notifier_call = netcp_netdevice_event;
+	if (register_netdevice_notifier(&netcp_device->nb)) {
+		netcp_device->nb.notifier_call = NULL;
+		dev_err(dev, "Failed to create notifier\n");
+	}
 	return 0;
 
 probe_quit_interface:
@@ -2189,6 +2222,8 @@ static int netcp_remove(struct platform_device *pdev)
 	WARN(!list_empty(&netcp_device->interface_head),
 	     "%s interface list not empty!\n", pdev->name);
 
+	if (netcp_device->nb.notifier_call)
+		unregister_netdevice_notifier(&netcp_device->nb);
 	pm_runtime_put_sync(&pdev->dev);
 	pm_runtime_disable(&pdev->dev);
 	platform_set_drvdata(pdev, NULL);
diff --git a/drivers/net/ethernet/ti/netcp_pa_core.c b/drivers/net/ethernet/ti/netcp_pa_core.c
index 00bafc0..fe552c2 100644
--- a/drivers/net/ethernet/ti/netcp_pa_core.c
+++ b/drivers/net/ethernet/ti/netcp_pa_core.c
@@ -32,6 +32,9 @@
 #include "netcp.h"
 #include "netcp_pa_core.h"
 
+#define mcast_filter_attr_to_pa(attr)	\
+	container_of(attr, struct pa_core_device, mcast_filter_attr)
+
 static struct pa_lut_entry *pa_core_lut_alloc(struct pa_core_device *core_dev,
 					      enum pa_lut_type type,
 					      bool backwards)
@@ -798,7 +801,8 @@ int pa_core_remove(struct netcp_device *netcp_device, void *inst_priv)
 	pa_core_cleanup_ingress_tx_resources(core_dev, false);
 	/* clean up common rx resources */
 	pa_core_cleanup_common_rx_resources(core_dev);
-
+	device_remove_file(core_dev->dev,
+			   &core_dev->mcast_filter_attr);
 	kfree(core_dev->cluster_config);
 	kfree(core_dev->fw);
 	kfree(core_dev->lut);
@@ -890,11 +894,29 @@ static inline int extract_l4_proto(struct netcp_packet *p_info)
 static int pa_core_tx_hook(int order, void *data, struct netcp_packet *p_info)
 {
 	struct pa_intf *pa_intf = data;
+	struct netcp_intf *netcp_intf = pa_intf->netcp_intf;
 	struct pa_core_device *core_dev = pa_intf->core_dev;
 	struct pa_hw *hw = core_dev->hw;
 	struct sk_buff *skb = p_info->skb;
 	int size, total = 0;
 
+	/* HACK!!! If the upper 24 bits of the skb mark match with match
+	 * filter pattern, then drop the packet if the port bit is not
+	 * set in the lower 8 bits. This is a hack to prevent multiple
+	 * copies of multicast packets in the tx path to switch when
+	 * interface is part of a bridge and switch is enabled through sysfs.
+	 * In this usecase switch will replicate multicast packets to each
+	 * of its slave ports. So avoid duplication before the switch
+	 * using this hack. It is expected to be handled in future by
+	 * enhancing the driver to support switch device.
+	 */
+	if (netcp_intf->bridged &&
+	    core_dev->enable_mcast_filter && skb->mark &&
+	    ((skb->mark & core_dev->mask) == core_dev->match) &&
+	    ((skb->mark & BIT(pa_intf->eth_port - 1)) == 0)) {
+		return NETCP_TX_DROP;
+	}
+
 	/* Generate the next route command */
 	size = hw->fmtcmd_next_route(p_info, pa_intf->eth_port);
 	if (unlikely(size < 0))
@@ -1092,6 +1114,44 @@ fail:
 }
 EXPORT_SYMBOL_GPL(pa_core_open);
 
+static ssize_t mcast_filter_show(struct device *dev,
+				 struct device_attribute *attr,
+				 char *buf)
+{
+	struct pa_core_device *pa_core_dev = mcast_filter_attr_to_pa(attr);
+	int len = 0;
+
+	if (!pa_core_dev->match && !pa_core_dev->mask)
+		return len;
+
+	len = snprintf(buf, SZ_4K, "0x%x, 0x%x\n", pa_core_dev->match,
+		       pa_core_dev->mask);
+	return len;
+}
+
+static ssize_t mcast_filter_store(struct device *dev,
+				  struct device_attribute *attr,
+				  const char *buf, size_t count)
+{
+	struct pa_core_device *pa_core_dev = mcast_filter_attr_to_pa(attr);
+	int len;
+
+	len = sscanf(buf, "%8x %8x", &pa_core_dev->match, &pa_core_dev->mask);
+	if (len != 2)
+		return -EINVAL;
+
+	if (!pa_core_dev->mask && !pa_core_dev->match) {
+		pa_core_dev->enable_mcast_filter = false;
+		return count;
+	}
+	pa_core_dev->enable_mcast_filter = true;
+
+	return count;
+}
+
+DEVICE_ATTR(mcast_filter, S_IRUGO | S_IWUSR,
+	    mcast_filter_show, mcast_filter_store);
+
 static void *pa_core_init(struct netcp_device *netcp_device,
 			  struct device *dev,
 			  struct device_node *node,
@@ -1113,6 +1173,16 @@ static void *pa_core_init(struct netcp_device *netcp_device,
 	core_dev->dev = dev;
 	core_dev->hw = hw;
 
+	core_dev->mcast_filter_attr = dev_attr_mcast_filter;
+	sysfs_attr_init(&core_dev->mcast_filter_attr.attr);
+
+	*error = device_create_file(core_dev->dev,
+				    &core_dev->mcast_filter_attr);
+	if (*error) {
+		kfree(core_dev);
+		return NULL;
+	}
+
 	core_dev->netif_features = (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM);
 	if (hw->features & PA_RX_CHECKSUM)
 		core_dev->netif_features |= NETIF_F_RXCSUM;
diff --git a/drivers/net/ethernet/ti/netcp_pa_core.h b/drivers/net/ethernet/ti/netcp_pa_core.h
index 271ebb3..b423fb8 100644
--- a/drivers/net/ethernet/ti/netcp_pa_core.h
+++ b/drivers/net/ethernet/ti/netcp_pa_core.h
@@ -136,11 +136,20 @@ struct pa_hw {
 
 struct pa_core_device {
 	bool disable_hw_tstamp;
+	/* mask to be used to extract valid mark bit for checking */
+	u32 mask;
+	/* match pattern to use for comparison to mark value  */
+	u32 match;
+	/* bool to enable/disable special filtering based on above
+	 * mask, match values
+	 */
+	bool enable_mcast_filter;
 	struct pa_timestamp_info timestamp_info;
 	struct netcp_tx_pipe tx_pipe;
 	struct netcp_device *netcp_device;
 	struct device *dev;
 	struct clk *clk;
+	struct device_attribute mcast_filter_attr;
 
 	/* rx side */
 	void *rx_cmd_rsp_chan;
-- 
1.7.5.4

