From 65a682e4e495e69aa190c98d97a2f8a4aabb203e Mon Sep 17 00:00:00 2001
From: Grygorii Strashko <grygorii.strashko@ti.com>
Date: Fri, 28 Oct 2016 00:37:51 -0500
Subject: [PATCH 318/347] net: ethernet: ti: cpts: drop excessive writes to
 CTRL and INT_EN regs

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

CPTS module and IRQs are always enabled when CPTS is registered,
before starting overflow check work, and disabled during
deregistration, when overflow check work has been canceled already.
So, It doesn't require to (re)enable CPTS module and IRQs in
cpts_overflow_check().

Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 055f7536fbcc80ad80f2cac29877d1fa3d152ce3)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/ti/cpts.c |    7 -------
 1 files changed, 0 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/ti/cpts.c b/drivers/net/ethernet/ti/cpts.c
index fdf911f..7a72ea5 100644
--- a/drivers/net/ethernet/ti/cpts.c
+++ b/drivers/net/ethernet/ti/cpts.c
@@ -324,16 +324,9 @@ static void cpts_overflow_check(struct work_struct *work)
 	struct cpts *cpts = container_of(work, struct cpts, overflow_work.work);
 	struct timespec64 ts;
 	unsigned long flags;
-	u32 v;
 
 	spin_lock_irqsave(&cpts->lock, flags);
-
-	v = cpts_read32(cpts, control);
-	cpts_write32(cpts, v | CPTS_EN, control);
-	cpts_write32(cpts, TS_PEND_EN, int_enable);
-
 	ts = ns_to_timespec64(timecounter_read(&cpts->tc));
-
 	spin_unlock_irqrestore(&cpts->lock, flags);
 
 	if (cpts->hw_ts_enable)
-- 
1.7.5.4

