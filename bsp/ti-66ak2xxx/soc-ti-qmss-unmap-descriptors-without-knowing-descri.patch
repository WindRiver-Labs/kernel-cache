From 49076150541a388e34da91345beec8b3ec5d08a2 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Thu, 28 Apr 2016 17:34:00 -0400
Subject: [PATCH 218/347] soc: ti: qmss: unmap descriptors without knowing
 descriptor pool

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Prior to this patch, it is always assumed that the descriptor pool from
which a descriptor is fetched is known when the descriptor's dma address
is being unmapped to its virtual address.  This works fine if all the
descriptors, in particular tx descriptors, are taken from a single pool
and the pool handle is stored as the caller's global.  However if the
(tx) descriptors are created from different pools,callers trying to
unmap a descriptor's dma address would not know from which pool the
descriptor is created until after the unmap is done.

This patch adds a new API to unmap a descriptor's dma address
without any pool handle passed in as a parameter.  This implementation
essentially breaks up the existing knav_pool_desc_dma_to_virt() into two.
First part knav_desc_dma_to_virt() is to loop over the regions to find
out the pool from which the descriptor's dma address is taken and return
the corresponding virtual address.  After caller finished processing the
descriptor with the descriptor's virtual address, it should call the
second part knav_dma_desc_unmap() to complete the unmap.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit f89547a694c86d7a21eeb060fce16fa9ac5366b6)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/soc/ti/knav_qmss_queue.c |   40 ++++++++++++++++++++++++++++++++++++-
 include/linux/soc/ti/knav_qmss.h |    3 ++
 2 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/drivers/soc/ti/knav_qmss_queue.c b/drivers/soc/ti/knav_qmss_queue.c
index 53b921c..8b73975 100644
--- a/drivers/soc/ti/knav_qmss_queue.c
+++ b/drivers/soc/ti/knav_qmss_queue.c
@@ -743,6 +743,22 @@ void *knav_pool_desc_dma_to_virt(void *ph, dma_addr_t dma)
 }
 EXPORT_SYMBOL_GPL(knav_pool_desc_dma_to_virt);
 
+void *knav_desc_dma_to_virt(dma_addr_t dma, unsigned *desc_size)
+{
+	struct knav_region *reg_itr;
+
+	for_each_region(kdev, reg_itr) {
+		if ((reg_itr->dma_start <= dma) && (dma < reg_itr->dma_end)) {
+			*desc_size = reg_itr->desc_size;
+			return reg_itr->virt_start + (dma - reg_itr->dma_start);
+		}
+	}
+
+	*desc_size = 0;
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(knav_desc_dma_to_virt);
+
 /**
  * knav_pool_create()	- Create a pool of descriptors
  * @name		- name to give the pool handle
@@ -753,8 +769,7 @@ EXPORT_SYMBOL_GPL(knav_pool_desc_dma_to_virt);
  * Returns a pool handle on success.
  * Use IS_ERR_OR_NULL() to identify error values on return.
  */
-void *knav_pool_create(const char *name,
-					int num_desc, int region_id)
+void *knav_pool_create(const char *name, int num_desc, int region_id)
 {
 	struct knav_region *reg_itr, *region = NULL;
 	struct knav_pool *pool, *pi;
@@ -963,6 +978,27 @@ void *knav_pool_desc_unmap(void *ph, dma_addr_t dma, unsigned dma_sz)
 EXPORT_SYMBOL_GPL(knav_pool_desc_unmap);
 
 /**
+ * knav_dma_desc_unmap()	- Unmap descriptor after DMA transfer
+ * @dma				- DMA address of descriptor to unmap
+ * @dma_sz			- size of descriptor to unmap
+ * @desc			- Virt addr of descriptor to unmap
+ * @pool			- handle of pool from which desc is obtained
+ *
+ * Called after knav_desc_dma_to_virt to complete the unmap of
+ * a descriptor.
+ */
+void knav_dma_desc_unmap(dma_addr_t dma, unsigned dma_sz,
+			 void *desc, unsigned desc_sz, void *ph)
+{
+	struct knav_pool *pool = ph;
+
+	desc_sz = min(dma_sz, desc_sz);
+	dma_sync_single_for_cpu(pool->dev, dma, desc_sz, DMA_FROM_DEVICE);
+	prefetch(desc);
+}
+EXPORT_SYMBOL_GPL(knav_dma_desc_unmap);
+
+/**
  * knav_pool_count()	- Get the number of descriptors in pool.
  * @pool		- pool handle
  * Returns number of elements in the pool.
diff --git a/include/linux/soc/ti/knav_qmss.h b/include/linux/soc/ti/knav_qmss.h
index 9745df6..ebee47e 100644
--- a/include/linux/soc/ti/knav_qmss.h
+++ b/include/linux/soc/ti/knav_qmss.h
@@ -87,5 +87,8 @@ void *knav_pool_desc_unmap(void *ph, dma_addr_t dma, unsigned dma_sz);
 dma_addr_t knav_pool_desc_virt_to_dma(void *ph, void *virt);
 void *knav_pool_desc_dma_to_virt(void *ph, dma_addr_t dma);
 bool knav_qmss_device_ready(void);
+void knav_dma_desc_unmap(dma_addr_t dma, unsigned dma_sz,
+			 void *desc, unsigned desc_sz, void *ph);
+void *knav_desc_dma_to_virt(dma_addr_t dma, unsigned *desc_size);
 
 #endif /* __SOC_TI_KNAV_QMSS_H__ */
-- 
1.7.5.4

