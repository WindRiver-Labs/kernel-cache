From 9622fb6fe0d85d7448051f61af1ff8d23ad314c5 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 12 May 2015 23:58:51 +0800
Subject: [PATCH 253/256] arm: mm: Keystone skip fixup_pv_table

Since Keystone uses __fixup_pv_offsets in arch/arm/kernel/head.S for memory
greater than 4G, so skip fixup_pv_table when early_paging_init as well.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/mm/mmu.c |    4 +++-
 1 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mm/mmu.c b/arch/arm/mm/mmu.c
index f15c22e..b971270 100644
--- a/arch/arm/mm/mmu.c
+++ b/arch/arm/mm/mmu.c
@@ -1450,6 +1450,7 @@ void __init early_paging_init(const struct machine_desc *mdesc,
 
 	mdesc->init_meminfo();
 
+#ifndef CONFIG_ARCH_KEYSTONE
 	/* Run the patch stub to update the constants */
 	fixup_pv_table(&__pv_table_begin,
 		(&__pv_table_end - &__pv_table_begin) << 2);
@@ -1463,6 +1464,7 @@ void __init early_paging_init(const struct machine_desc *mdesc,
 	flush_cache_louis();
 	dsb();
 	isb();
+#endif
 
 	/* remap level 1 table */
 	for (i = 0; i < PTRS_PER_PGD; pud0++, i++) {
@@ -1476,7 +1478,7 @@ void __init early_paging_init(const struct machine_desc *mdesc,
 	do {
 		*pmdk++ = __pmd(phys | pmdprot);
 		phys += PMD_SIZE;
-	} while (phys < map_end);
+	} while (phys < __pa(map_end));
 
 	flush_cache_all();
 	cpu_switch_mm(pgd0, &init_mm);
-- 
1.7.5.4

