From bcef5f05bcbd172a4dcde98a0b110cbc03cc793d Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 29 Jul 2016 11:02:16 -0400
Subject: [PATCH 282/347] net: netcp: pa: enable pre-classification support in
 PA firmware

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Currently Linux PA driver adds specific rules to forward BC and MC
packets to Linux network interface queue at the ingress port. This
occupies entries in MAC LUT. However PA firmware supports a
pre-classifcation feature that can be used to forward these packets
to Linux queue without explicit rules in LUT, there by freeing up
the LUT entries for application use. This patch turns on this
feature in PA firmware for this purpose.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 1159bd442c0f133e0ebbe40341b14abc838a8827)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/net/keystone-netcp.txt     |    9 +-
 drivers/net/ethernet/ti/netcp_pa.c                 |  157 +++++++++++++++++---
 drivers/net/ethernet/ti/netcp_pa_core.c            |   73 +++++++++-
 drivers/net/ethernet/ti/netcp_pa_core.h            |    5 +
 drivers/net/ethernet/ti/netcp_pa_fw.h              |   89 +++++++++++-
 5 files changed, 311 insertions(+), 22 deletions(-)

diff --git a/Documentation/devicetree/bindings/net/keystone-netcp.txt b/Documentation/devicetree/bindings/net/keystone-netcp.txt
index d82ad2b..a22bf25 100644
--- a/Documentation/devicetree/bindings/net/keystone-netcp.txt
+++ b/Documentation/devicetree/bindings/net/keystone-netcp.txt
@@ -508,7 +508,14 @@ Optional properties:-
 		rx-channel:	rx channel name for ethernet interface when PA
 				is in the rx path for data. Uses a different
 				flow id when PA is added to the rx path.
-- disable-hw-timestamp:	Disable hw timestamp feature.
+- disable-hw-timestamp:		Disable hw timestamp feature.
+- disable-pre-classify:		By default, PA firmware does pre-classify
+				Broadcast and multicast packet at ingress
+				and route them to Linux network interface
+				rx-queue. To disable this feature in PA
+				firmware, add this DT property. In this case,
+				explicit BC & MC rules will be added to
+				LUT1-0 to achieve the same.
 
 Example:
 
diff --git a/drivers/net/ethernet/ti/netcp_pa.c b/drivers/net/ethernet/ti/netcp_pa.c
index 1be40c8..6344dce 100644
--- a/drivers/net/ethernet/ti/netcp_pa.c
+++ b/drivers/net/ethernet/ti/netcp_pa.c
@@ -191,6 +191,12 @@ static inline void swizfcmd(struct pa_frm_command *fcmd)
 	fcmd->reply_queue = cpu_to_be16(fcmd->reply_queue);
 }
 
+static inline void swiz_command_config(struct pa_frm_command_config_pa *cfg)
+{
+	cfg->pkt_ctrl.ctrl_bit_map = cpu_to_be16(cfg->pkt_ctrl.ctrl_bit_map);
+	cfg->pkt_ctrl.valid_bit_map = cpu_to_be16(cfg->pkt_ctrl.valid_bit_map);
+}
+
 static inline void swizal1(struct pa_frm_cmd_add_lut1 *al1)
 {
 	if (al1->type == PAFRM_COM_ADD_LUT1_STANDARD) {
@@ -653,19 +659,19 @@ static void pa_rx_packet_handler(void *param)
 		swizfcmd(fcmd);
 
 		if (fcmd->command_result != PAFRM_COMMAND_RESULT_SUCCESS) {
-			dev_dbg(core_dev->dev, "Command Result = 0x%x\n",
+			dev_err(core_dev->dev, "Command Result = 0x%x\n",
 				fcmd->command_result);
-			dev_dbg(core_dev->dev, "Command = 0x%x\n",
+			dev_err(core_dev->dev, "Command = 0x%x\n",
 				fcmd->command);
-			dev_dbg(core_dev->dev, "Magic = 0x%x\n", fcmd->magic);
-			dev_dbg(core_dev->dev, "Com ID = 0x%x\n", fcmd->com_id);
-			dev_dbg(core_dev->dev, "ret Context = 0x%x\n",
+			dev_err(core_dev->dev, "Magic = 0x%x\n", fcmd->magic);
+			dev_err(core_dev->dev, "Com ID = 0x%x\n", fcmd->com_id);
+			dev_err(core_dev->dev, "ret Context = 0x%x\n",
 				fcmd->ret_context);
-			dev_dbg(core_dev->dev, "Flow ID = 0x%x\n",
+			dev_err(core_dev->dev, "Flow ID = 0x%x\n",
 				fcmd->flow_id);
-			dev_dbg(core_dev->dev, "reply Queue = 0x%x\n",
+			dev_err(core_dev->dev, "reply Queue = 0x%x\n",
 				fcmd->reply_queue);
-			dev_dbg(core_dev->dev, "reply dest = 0x%x\n",
+			dev_err(core_dev->dev, "reply dest = 0x%x\n",
 				fcmd->reply_dest);
 		}
 		dev_dbg(core_dev->dev, "command response complete\n");
@@ -676,8 +682,8 @@ static void pa_rx_packet_handler(void *param)
 		break;
 
 	default:
-		dev_warn(core_dev->dev,
-			 "%s: bad response context, got 0x%08x\n",
+		dev_err(core_dev->dev,
+			"%s: bad response context, got 0x%08x\n",
 			 __func__, p_info->epib[1]);
 		break;
 	}
@@ -685,7 +691,7 @@ static void pa_rx_packet_handler(void *param)
 
 static void
 pa_format_cmd_hdr(struct pa_device *pa_dev,
-		  struct pa_frm_command *fcmd, u8 cmd, u16 cmd_id, u32 ctx)
+		  struct pa_frm_command *fcmd, u8 cmd, u16 cmd_id)
 {
 	struct pa_core_device *core_dev = &pa_dev->core_dev;
 
@@ -693,7 +699,7 @@ pa_format_cmd_hdr(struct pa_device *pa_dev,
 	fcmd->command = cmd;
 	fcmd->magic = PAFRM_CONFIG_COMMAND_SEC_BYTE;
 	fcmd->com_id = cpu_to_be16(cmd_id);
-	fcmd->ret_context = cpu_to_be32(ctx);
+	fcmd->ret_context = cpu_to_be32(PA_CONTEXT_CONFIG);
 	fcmd->flow_id = core_dev->cmd_flow_num;
 	fcmd->reply_queue = cpu_to_be16(core_dev->cmd_queue_num);
 	fcmd->reply_dest = PAFRM_DEST_PKTDMA;
@@ -705,7 +711,6 @@ static int pa_add_ip_proto(struct pa_core_device *core_dev, int index,
 	struct pa_device *pa_dev = to_pa(core_dev);
 	struct pa_route_info route_info, fail_info;
 	struct pa_frm_cmd_add_lut1 *al1;
-	u32 context = PA_CONTEXT_CONFIG;
 	struct pa_frm_command *fcmd;
 	unsigned flow_num, q_num;
 	struct pa_packet *tx;
@@ -761,7 +766,7 @@ static int pa_add_ip_proto(struct pa_core_device *core_dev, int index,
 	al1 = (struct pa_frm_cmd_add_lut1 *)&fcmd->cmd;
 	memset(al1, 0, sizeof(*al1));
 	pa_format_cmd_hdr(pa_dev, fcmd, PAFRM_CONFIG_COMMAND_ADDREP_LUT1,
-			  PA_COMID_L3, context);
+			  PA_COMID_L3);
 
 	al1->index = index;
 	al1->type = PAFRM_COM_ADD_LUT1_STANDARD;
@@ -801,7 +806,6 @@ static int pa_config_exception_route(struct pa_core_device *core_dev)
 	struct pa_device *pa_dev = to_pa(core_dev);
 	struct pa_route_info eroutes[EROUTE_N_MAX];
 	struct pa_frm_command_sys_config_pa *cpa;
-	u32 context = PA_CONTEXT_CONFIG;
 	struct pa_frm_command *fcmd;
 	struct pa_packet *tx;
 	int i, size, ret;
@@ -822,8 +826,7 @@ static int pa_config_exception_route(struct pa_core_device *core_dev)
 	fcmd = tx->data;
 	cpa = (struct pa_frm_command_sys_config_pa *)&fcmd->cmd;
 	memset(cpa, 0, sizeof(*cpa));
-	pa_format_cmd_hdr(pa_dev, fcmd, PAFRM_CONFIG_COMMAND_SYS_CONFIG,
-			  0, context);
+	pa_format_cmd_hdr(pa_dev, fcmd, PAFRM_CONFIG_COMMAND_SYS_CONFIG, 0);
 	cpa->cfg_code = PAFRM_SYSTEM_CONFIG_CODE_EROUTE;
 
 	for (i = 0; i < EROUTE_N_MAX; i++) {
@@ -979,6 +982,122 @@ fail:
 	return ret;
 }
 
+static int pa_config_pre_classify(struct pa_core_device *core_dev,
+				  bool enable)
+{
+	struct	pa_frm_packet_ctrl_config *packet_ctrl_cfg;
+	struct pa_device *pa_dev = to_pa(core_dev);
+	struct pa_frm_command_config_pa *pa_cfg;
+	struct pa_frm_command *fcmd;
+	struct pa_packet *tx;
+	int size;
+
+	size = (sizeof(struct pa_frm_command) +
+		sizeof(struct pa_frm_command_config_pa) + 4);
+	tx = core_ops->alloc_packet(core_dev, size, PA_CLUSTER_0);
+	if (!tx) {
+		dev_err(core_dev->dev,
+			"%s: could not allocate cmd tx packet\n",
+			__func__);
+		return -ENOMEM;
+	}
+
+	fcmd = tx->data;
+	pa_format_cmd_hdr(pa_dev, fcmd, PAFRM_CONFIG_COMMAND_CONFIG_PA, 0);
+
+	pa_cfg = (struct pa_frm_command_config_pa *)&fcmd->cmd;
+	memset(pa_cfg, 0, sizeof(*pa_cfg));
+	pa_cfg->valid_flag = PAFRM_COMMAND_CONFIG_VALID_PKT_CTRL;
+
+	packet_ctrl_cfg = &pa_cfg->pkt_ctrl;
+	packet_ctrl_cfg->valid_bit_map =
+		PA_PKT_CTRL_EMAC_IF_INGRESS_DEFAULT_ROUTE;
+	packet_ctrl_cfg->ctrl_bit_map = enable ?
+		PA_PKT_CTRL_EMAC_IF_INGRESS_DEFAULT_ROUTE : 0;
+
+	swiz_command_config(pa_cfg);
+	tx->psdata[0] = BIT(31);
+
+	return core_ops->submit_packet(tx, PA_CLUSTER_0);
+}
+
+static int
+pa_config_ingress_port_def_route(struct pa_intf *pa_intf,
+				 bool enable)
+{
+	struct pa_core_device *core_dev = pa_intf->core_dev;
+	struct pa_frm_def_route_info *port_route_cfg;
+	struct pa_device *pa_dev = to_pa(core_dev);
+	struct pa_frm_def_route_cfg *def_route_cfg;
+	struct pa_frm_command_sys_config_pa *cpa;
+	struct pa_frm_forward_host *fwd_host;
+	struct pa_frm_command *fcmd;
+	struct pa_packet *tx;
+	int size;
+
+	size = (sizeof(struct pa_frm_command) +
+		sizeof(struct pa_frm_command_sys_config_pa) + 4);
+
+	tx = core_ops->alloc_packet(core_dev, size, PA_CLUSTER_1);
+	if (!tx) {
+		dev_err(core_dev->dev,
+			"%s: could not allocate cmd tx packet\n",
+			__func__);
+		return -ENOMEM;
+	}
+
+	fcmd = tx->data;
+	pa_format_cmd_hdr(pa_dev, fcmd, PAFRM_CONFIG_COMMAND_SYS_CONFIG, 0);
+
+	cpa = (struct pa_frm_command_sys_config_pa *)&fcmd->cmd;
+	memset(cpa, 0, sizeof(*cpa));
+	cpa->cfg_code = PAFRM_SYSTEM_CONFIG_CODE_DEFAULT_ROUTE;
+	def_route_cfg = &cpa->u.def_route_cfg;
+	def_route_cfg->num_ports = 1;
+
+	/* we use one port at a time. So use entry at index 0 */
+	port_route_cfg = &def_route_cfg->route_cfg[0];
+	port_route_cfg->port = pa_intf->eth_port - 1;
+	port_route_cfg->ctrl_bit_map =
+		PA_EMAC_IF_DEF_ROUTE_MC_ENABLE |
+		PA_EMAC_IF_DEF_ROUTE_MC_PRE_CLASSIFY_ENABLE |
+		PA_EMAC_IF_DEF_ROUTE_BC_ENABLE |
+		PA_EMAC_IF_DEF_ROUTE_BC_PRE_CLASSIFY_ENABLE;
+
+	/* populate default route information for multicast packet */
+	port_route_cfg->def_route[DROUTE_MULTICAST].forward_type =
+		enable ? PAFRM_FORWARD_TYPE_HOST : PAFRM_FORWARD_TYPE_DISCARD;
+	port_route_cfg->def_route[DROUTE_MULTICAST].flow_id =
+		pa_intf->data_flow_num;
+	port_route_cfg->def_route[DROUTE_MULTICAST].queue =
+		pa_intf->data_queue_num;
+
+	fwd_host = &port_route_cfg->def_route[DROUTE_MULTICAST].u.host;
+	fwd_host->context = PA_CONTEXT_CONFIG;
+	fwd_host->ps_flags = (pa_intf->eth_port & GENMASK(3, 0))
+				<< PAFRM_ETH_PS_FLAGS_PORT_SHIFT;
+
+	/* populate default route information for broadcast packet */
+	port_route_cfg->def_route[DROUTE_BROADCAST].forward_type =
+		enable ? PAFRM_FORWARD_TYPE_HOST : PAFRM_FORWARD_TYPE_DISCARD;
+	port_route_cfg->def_route[DROUTE_BROADCAST].flow_id =
+		pa_intf->data_flow_num;
+	port_route_cfg->def_route[DROUTE_BROADCAST].queue =
+		pa_intf->data_queue_num;
+
+	fwd_host = &port_route_cfg->def_route[DROUTE_BROADCAST].u.host;
+	fwd_host->context = PA_CONTEXT_CONFIG;
+	/* TODO check if mask is 0xf or 0x7 */
+	fwd_host->ps_flags = (pa_intf->eth_port & GENMASK(3, 0))
+				<< PAFRM_ETH_PS_FLAGS_PORT_SHIFT;
+	swiz_fwd(&port_route_cfg->def_route[DROUTE_MULTICAST]);
+	swiz_fwd(&port_route_cfg->def_route[DROUTE_BROADCAST]);
+
+	tx->psdata[0] = BIT(31);
+
+	return core_ops->submit_packet(tx, PA_CLUSTER_0);
+}
+
 static int pa_fmtcmd_tx_csum(struct netcp_packet *p_info)
 {
 	struct sk_buff *skb = p_info->skb;
@@ -1007,7 +1126,7 @@ static int pa_fmtcmd_tx_csum(struct netcp_packet *p_info)
 
 static int pa_fmtcmd_next_route(struct netcp_packet *p_info, int eth_port)
 {
-	u8 ps_flags = (eth_port & GENMASK(2, 0))
+	u8 ps_flags = (eth_port & GENMASK(3, 0))
 				<< PAFRM_ETH_PS_FLAGS_PORT_SHIFT;
 
 	struct paho_next_route *nr;
@@ -1330,6 +1449,8 @@ static struct pa_hw netcp_pa_hw = {
 	.rx_packet_handler = pa_rx_packet_handler,
 	.add_mac_rule = pa_add_mac_rule,
 	.config_exception_route = pa_config_exception_route,
+	.config_ingress_port_def_route = pa_config_ingress_port_def_route,
+	.config_pre_classify = pa_config_pre_classify,
 	.set_streaming_switch = pa_set_streaming_switch,
 	.get_streaming_switch = pa_get_streaming_switch,
 	.cleanup = pa_tstamp_purge_pending,
diff --git a/drivers/net/ethernet/ti/netcp_pa_core.c b/drivers/net/ethernet/ti/netcp_pa_core.c
index fe552c2..a8d0d3f 100644
--- a/drivers/net/ethernet/ti/netcp_pa_core.c
+++ b/drivers/net/ethernet/ti/netcp_pa_core.c
@@ -236,6 +236,17 @@ static int pa_core_get_dt_bindings(struct pa_core_device *core_dev,
 		}
 	}
 
+	/* By default, BC & MC traffic at Ethernet Ingress port is routed to
+	 * Linux through pre-classification feature in PA firmware. Previously
+	 * Linux had explicit LUT1-0 rule to route them which is unnecessary
+	 * when pre-classification is enabled. But For some reason if this is
+	 * not desirable, user can add a DT property, disable-pre-classify, to
+	 * disable pre-classification feature in firmware.
+	 */
+	core_dev->disable_pre_classify = false;
+	if (of_property_read_bool(node, "disable-pre-classify"))
+		core_dev->disable_pre_classify = true;
+
 	ret = pa_core_parse_lut_range(core_dev, node, true);
 	if (ret)
 		return ret;
@@ -1000,6 +1011,7 @@ int pa_core_close(void *intf_priv,
 	struct pa_core_device *core_dev = pa_intf->core_dev;
 	struct netcp_intf *netcp_priv = netdev_priv(ndev);
 	struct pa_hw *hw = core_dev->hw;
+	int ret;
 
 	netcp_unregister_txhook(netcp_priv, PA_TXHOOK_ORDER,
 				pa_core_tx_hook, pa_intf);
@@ -1009,8 +1021,15 @@ int pa_core_close(void *intf_priv,
 		netcp_unregister_rxhook(netcp_priv, PA_RXHOOK_ORDER,
 					pa_core_rx_hook, pa_intf);
 
-	/* De-Configure the streaming switch */
 	mutex_lock(&hw->module_lock);
+	if (!core_dev->disable_pre_classify) {
+		ret = hw->config_ingress_port_def_route(pa_intf, false);
+		if (ret)
+			dev_err(core_dev->dev, "%s failed for port: %d\n",
+				__func__, pa_intf->eth_port);
+	}
+
+	/* De-Configure the streaming switch */
 	hw->set_streaming_switch(core_dev,
 				 pa_intf->eth_port,
 				 pa_intf->saved_ss_state);
@@ -1023,6 +1042,13 @@ int pa_core_close(void *intf_priv,
 			pa_del_ip_proto(core_dev, IPPROTO_TCP);
 			pa_del_ip_proto(core_dev, IPPROTO_UDP);
 		}
+
+		if (!core_dev->disable_pre_classify) {
+			ret = hw->config_pre_classify(core_dev, false);
+			if (ret)
+				dev_err(core_dev->dev, "%s failed  port: %d\n",
+					__func__, pa_intf->eth_port);
+		}
 		if (hw->cleanup)
 			hw->cleanup(core_dev);
 	}
@@ -1069,6 +1095,16 @@ int pa_core_open(void *intf_priv,
 						 PA_INVALID_PORT);
 			}
 
+			/* Enable global pre-classify feature in PA firmware
+			 * once
+			 */
+			if (!core_dev->disable_pre_classify) {
+				ret =
+				hw->config_pre_classify(core_dev, true);
+				if (ret)
+					goto fail;
+			}
+
 			/* make IP LUT entries invalid */
 			for (i = 0; i < core_dev->ip_lut_size; i++) {
 				if (!core_dev->ip_lut[i].valid)
@@ -1088,6 +1124,16 @@ int pa_core_open(void *intf_priv,
 		}
 	}
 
+	/* Configure pre-classify rule for the interface so that all BC and MC
+	 * packets at emac ingress port will get forwarded to the Linux network
+	 * interface rx-queue. This free up LUTs for application use.
+	 */
+	if (!core_dev->disable_pre_classify) {
+		ret = hw->config_ingress_port_def_route(pa_intf, true);
+		if (ret)
+			goto fail;
+	}
+
 	pa_intf->saved_ss_state =
 		hw->get_streaming_switch(core_dev, pa_intf->eth_port);
 	dev_dbg(core_dev->dev, "saved_ss_state for port %d is %d\n",
@@ -1205,6 +1251,16 @@ static void *pa_core_init(struct netcp_device *netcp_device,
 	if (*error < 0)
 		goto cleanup;
 
+	/* if pre-classify feature is enabled, corresponding functions should
+	 * be defined. So check for it.
+	 */
+	if (!core_dev->disable_pre_classify &&
+	    (!hw->config_pre_classify ||
+	     !hw->config_ingress_port_def_route)) {
+		*error = -ENODEV;
+		goto cleanup;
+	}
+
 	*error = hw->map_resources(core_dev, node);
 	if (*error < 0)
 		goto cleanup;
@@ -1476,7 +1532,7 @@ static void pa_core_load_firmware(void __iomem *dest,
 #define PA_CORE_MAX_LUT_ENTRY		3
 static inline int pa_lut_entry_count(enum netcp_addr_type type)
 {
-	return (type == ADDR_DEV || type == ADDR_UCAST || type == ADDR_ANY) ?
+	return (type == ADDR_DEV || type == ADDR_UCAST) ?
 		PA_CORE_MAX_LUT_ENTRY : 1;
 }
 
@@ -1495,6 +1551,19 @@ int pa_core_add_addr(void *intf_priv, struct netcp_addr *naddr)
 	if (!core_dev->inuse_if_count)
 		return -ENXIO;
 
+	if (!core_dev->disable_pre_classify &&
+	    (naddr->type == ADDR_BCAST ||
+	     naddr->type == ADDR_MCAST)) {
+		/* The pre-classify rule at PASS does forward BC, MC packets
+		 * to host. So nothing to do here
+		 */
+		dev_dbg(core_dev->dev,
+			"pa_add_addr, addr type %s, skipping for port %d\n",
+			naddr->type == ADDR_BCAST ? "bcast" : "mcast",
+			pa_intf->eth_port);
+		return 0;
+	}
+
 	spin_lock_irqsave(&core_dev->lock, flag);
 	for (idx = 0; idx < count; idx++) {
 		entries[idx] = pa_core_lut_alloc(core_dev, PA_LUT_MAC,
diff --git a/drivers/net/ethernet/ti/netcp_pa_core.h b/drivers/net/ethernet/ti/netcp_pa_core.h
index b423fb8..b87b028 100644
--- a/drivers/net/ethernet/ti/netcp_pa_core.h
+++ b/drivers/net/ethernet/ti/netcp_pa_core.h
@@ -114,6 +114,10 @@ struct pa_hw {
 	int	(*config_exception_route)(struct pa_core_device *core_dev);
 	int	(*add_ip_proto)(struct pa_core_device *core_dev, int index,
 				u8 proto, int rule);
+	int	(*config_pre_classify)(struct pa_core_device *core_dev,
+				       bool enable);
+	int	(*config_ingress_port_def_route)(struct pa_intf *pa_intfi,
+						 bool enable);
 	u32	(*set_streaming_switch)(struct pa_core_device *core_dev,
 					int port, u32 new_value);
 	u32	(*get_streaming_switch)(struct pa_core_device *core_dev,
@@ -188,6 +192,7 @@ struct pa_core_device {
 	const struct firmware **fw;
 	struct pa_hw *hw;
 	netdev_features_t netif_features;
+	bool disable_pre_classify;
 };
 
 int pa_core_release(void *intf_priv);
diff --git a/drivers/net/ethernet/ti/netcp_pa_fw.h b/drivers/net/ethernet/ti/netcp_pa_fw.h
index fc9b7c9..50101a249 100644
--- a/drivers/net/ethernet/ti/netcp_pa_fw.h
+++ b/drivers/net/ethernet/ti/netcp_pa_fw.h
@@ -812,7 +812,44 @@ struct pa_frm_com_eroute {
 	struct pa_frm_forward	eroute[EROUTE_N_MAX];
 };
 
-/* PA system configuration command */
+#define PAFRM_PKT_CAP_MAX_PORT			5
+#define PAFRM_MAX_EMAC_PORT	(PAFRM_PKT_CAP_MAX_PORT - 1)
+
+enum  {
+	DROUTE_MULTICAST,  /* default multicast route */
+	DROUTE_BROADCAST,  /* default broadcast route */
+	DROUTE_UNICAST,    /* default unicast route */
+	DROUTE_N_MAX
+};
+
+struct pa_frm_def_route_info {
+	/* Control Bit Map
+	 * b0: enable/disable route config for MC packets
+	 * b1: enable/disable route config for BC packets
+	 * b2: enable/disable route config for UC packets
+	 * b3: Pre classification enabled for default route
+	 *     otherwise post classification for default route
+	 */
+	u8	ctrl_bit_map;
+	/* ingress port. This is zero based. 0 - for first ethernet
+	 * slave port, 1 for second and so forth
+	 */
+	u8	port;
+	u16	rsvd;
+	struct pa_frm_forward def_route[DROUTE_N_MAX];
+};
+
+/* Default route configuration */
+struct pa_frm_def_route_cfg {
+	u8	num_ports; /* number of ports to be configured */
+	u8	rsvd1;
+	u16	rsvd2;
+	struct pa_frm_def_route_info route_cfg[PAFRM_MAX_EMAC_PORT];
+};
+
+/* PA system configuration command struct. Used by
+ * PAFRM_CONFIG_COMMAND_SYS_CONFIG command
+ */
 struct pa_frm_command_sys_config_pa {
 	/* system configuration code as defined below */
 	u8	cfg_code;
@@ -823,6 +860,8 @@ struct pa_frm_command_sys_config_pa {
 	union {
 		/* Exception routes configuration */
 		struct pa_frm_com_eroute eroute;
+		/* Default route configuration for interface */
+		struct pa_frm_def_route_cfg def_route_cfg;
 	} u;
 };
 
@@ -833,5 +872,53 @@ struct pa_frm_command_sys_config_pa {
 #define PAFRM_SYSTEM_CONFIG_CODE_802_1AG        3
 #define PAFRM_SYSTEM_CONFIG_CODE_IPSEC_NAT_T    4
 #define PAFRM_SYSTEM_CONFIG_CODE_GTPU           5
+#define PAFRM_SYSTEM_CONFIG_CODE_DEFAULT_ROUTE  8
+
+/* PA global configuration command struct. Used by
+ * PAFRM_CONFIG_COMMAND_CONFIG_PA
+ */
+struct pa_frm_packet_ctrl_config {
+	u16	ctrl_bit_map;
+	u16	valid_bit_map;
+	/* Below fields are not used by linux driver. So keeping it as reseved
+	 * for now for alignment and may be enhanced later as and when feature
+	 * is required in linux.
+	 */
+	u32	rsvd[2];
+};
+
+struct pa_frm_command_config_pa {
+	u8	valid_flag;
+	u8	rsvd1;
+	u16	rsvd2;
+	/* Below fields are not used by linux driver. So keeping it as reseved
+	 * for now for alignment and may be enhanced later as and when feature
+	 * is required in linux.
+	 */
+	u32	rsvd3[6];
+	struct	pa_frm_packet_ctrl_config pkt_ctrl;
+	u32	rsvd4;
+};
+
+/* Definitions below is used for valid_flag field of packet control command.
+ * Ingress default route is to be enabled for Pre-classification. This
+ * requires PA_PKT_CTRL_EMAC_IF_INGRESS_DEFAULT_ROUTE with valid_flag set
+ * or reset at bit position below.
+ */
+#define PAFRM_COMMAND_CONFIG_VALID_PKT_CTRL		BIT(6)
+
+/* Definitions below are used for Pre-Classify feature enablement for BC and
+ * MC at the ingress
+ */
+/* Set/Clear: default route enable for multicast */
+#define PA_EMAC_IF_DEF_ROUTE_MC_ENABLE			BIT(0)
+/* Set/Clear: default route enable for broadcast */
+#define PA_EMAC_IF_DEF_ROUTE_BC_ENABLE			BIT(1)
+/* Set/Clear: default route for multicast pre classification enable */
+#define PA_EMAC_IF_DEF_ROUTE_MC_PRE_CLASSIFY_ENABLE	BIT(3)
+/* Set/Clear:  default route for broadcast pre classification enable */
+#define PA_EMAC_IF_DEF_ROUTE_BC_PRE_CLASSIFY_ENABLE	BIT(4)
+/* Ingress default route enable/enable for mac interface */
+#define PA_PKT_CTRL_EMAC_IF_INGRESS_DEFAULT_ROUTE	BIT(7)
 
 #endif /* NETCP_PA_FW_H */
-- 
1.7.5.4

