From 650ce9e5286285ee16991d33357c6a9c74aa8376 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 28 Apr 2015 15:29:48 +0800
Subject: [PATCH 250/256] arm: keystone: memory idmap fixed when add virt addr

Keystone uses its own virt_to_idmap and virtual address check since LPAE
is enabled(8G space).

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/include/asm/memory.h |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/arch/arm/include/asm/memory.h b/arch/arm/include/asm/memory.h
index 6c939f6..6570ff8 100644
--- a/arch/arm/include/asm/memory.h
+++ b/arch/arm/include/asm/memory.h
@@ -20,6 +20,9 @@
 
 #include <asm/cache.h>
 #include <asm/runtime-patch.h>
+#ifdef CONFIG_ARCH_KEYSTONE
+#include <asm/pgtable-hwdef.h>
+#endif
 
 #ifdef CONFIG_NEED_MACH_MEMORY_H
 #include <mach/memory.h>
@@ -350,6 +353,7 @@ static inline void *phys_to_virt(phys_addr_t x)
 
 extern phys_addr_t (*arch_virt_to_idmap)(unsigned long x);
 
+#ifndef CONFIG_ARCH_KEYSTONE
 /*
  * These are for systems that have a hardware interconnect supported alias of
  * physical memory for idmap purposes.  Most cases should leave these
@@ -364,6 +368,7 @@ static inline phys_addr_t __virt_to_idmap(unsigned long x)
 }
 
 #define virt_to_idmap(x)	__virt_to_idmap((unsigned long)(x))
+#endif
 
 /*
  * Virtual <-> DMA view memory address translations
@@ -393,6 +398,13 @@ static inline __deprecated void *bus_to_virt(unsigned long x)
 /*
  * Conversion between a struct page and a physical address.
  *
+#ifdef CONFIG_ARCH_KEYSTONE
+ * Note: when converting an unknown physical address to a struct page,
+ * the resulting pointer must be validated using VALID_PAGE().  It must
+ * return an invalid struct page for any physical address not corresponding
+ * to a system RAM address.
+#endif
+ *
  *  page_to_pfn(page)	convert a struct page * to a PFN number
  *  pfn_to_page(pfn)	convert a _valid_ PFN number to struct page *
  *
@@ -402,9 +414,14 @@ static inline __deprecated void *bus_to_virt(unsigned long x)
 #define ARCH_PFN_OFFSET		PHYS_PFN_OFFSET
 
 #define virt_to_page(kaddr)	pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)
+#ifndef CONFIG_ARCH_KEYSTONE
 #define virt_addr_valid(kaddr)	(((unsigned long)(kaddr) >= PAGE_OFFSET && (unsigned long)(kaddr) < (unsigned long)high_memory) \
 					&& pfn_valid(__pa(kaddr) >> PAGE_SHIFT) )
+#else
+#define virt_addr_valid(kaddr)	((unsigned long)(kaddr) >= PAGE_OFFSET && (unsigned long)(kaddr) < (unsigned long)high_memory)
 
+#define ARCH_LOW_ADDRESS_LIMIT		PHYS_MASK
+#endif
 #endif
 
 #include <asm-generic/memory_model.h>
-- 
1.7.5.4

