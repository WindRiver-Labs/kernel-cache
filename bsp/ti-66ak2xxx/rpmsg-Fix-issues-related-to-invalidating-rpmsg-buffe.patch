From ca59ac3d7b756e5a8b04ebed1bd645e31450f248 Mon Sep 17 00:00:00 2001
From: Sam Nelson <sam.nelson@ti.com>
Date: Mon, 28 Jul 2014 13:40:00 -0400
Subject: [PATCH 229/256] rpmsg: Fix issues related to invalidating rpmsg
 buffers

- the code to invalidate and writeback the RPMSG buffers
   was done incorrectly.
- Added code to sync the buffers before adding to virtqueue
  and before use by cpu
- Note this code is only for keystone2

Signed-off-by: Sam Nelson <sam.nelson@ti.com>
(cherry picked from commit 42a3670c3d4c39ac4de4a5267d57560c79cb6056)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/rpmsg/virtio_rpmsg_bus.c |   19 +++++++++++++++++++
 1 files changed, 19 insertions(+), 0 deletions(-)

diff --git a/drivers/rpmsg/virtio_rpmsg_bus.c b/drivers/rpmsg/virtio_rpmsg_bus.c
index 595330b..60f692b 100644
--- a/drivers/rpmsg/virtio_rpmsg_bus.c
+++ b/drivers/rpmsg/virtio_rpmsg_bus.c
@@ -765,6 +765,11 @@ int rpmsg_send_offchannel_raw(struct rpmsg_channel *rpdev, u32 src, u32 dst,
 			return -ERESTARTSYS;
 		}
 	}
+#ifdef CONFIG_KEYSTONE2_DMA_COHERENT
+	/* Sync buffer for cpu access */
+	dma_sync_single_for_cpu(dev, virt_to_dma(dev, (void *)(msg)),
+		sizeof(struct rpmsg_hdr) + msg->len - 1, DMA_TO_DEVICE);
+#endif
 
 	msg->len = len;
 	msg->flags = 0;
@@ -774,6 +779,7 @@ int rpmsg_send_offchannel_raw(struct rpmsg_channel *rpdev, u32 src, u32 dst,
 	memcpy(msg->data, data, len);
 
 #ifdef CONFIG_KEYSTONE2_DMA_COHERENT
+	/* Sync buffer to give access to remote device */
 	dma_sync_single_for_device(dev, virt_to_dma(dev, (void *)(msg)),
 					sizeof(struct rpmsg_hdr) + msg->len - 1,
 					DMA_TO_DEVICE);
@@ -817,6 +823,7 @@ static int rpmsg_recv_single(struct virtproc_info *vrp, struct device *dev,
 	int err;
 
 #ifdef CONFIG_KEYSTONE2_DMA_COHERENT
+	/* Sync buffer to receive message */
 	dma_sync_single_for_cpu(dev, virt_to_dma(dev, (void *)(msg)),
 					sizeof(struct rpmsg_hdr) + msg->len - 1,
 					DMA_FROM_DEVICE);
@@ -867,6 +874,12 @@ static int rpmsg_recv_single(struct virtproc_info *vrp, struct device *dev,
 	/* publish the real size of the buffer */
 	sg_init_one(&sg, msg, RPMSG_BUF_SIZE);
 
+#ifdef CONFIG_KEYSTONE2_DMA_COHERENT
+	/* Sync buffer for remote device to use */
+	dma_sync_single_for_device(dev, virt_to_dma(dev, (void *)(msg)),
+		sizeof(struct rpmsg_hdr) + msg->len - 1, DMA_FROM_DEVICE);
+#endif
+
 	/* add the buffer back to the remote processor's virtqueue */
 	err = virtqueue_add_inbuf(vrp->rvq, &sg, 1, msg, GFP_KERNEL);
 	if (err < 0) {
@@ -1061,6 +1074,12 @@ static int rpmsg_probe(struct virtio_device *vdev)
 
 		sg_init_one(&sg, cpu_addr, RPMSG_BUF_SIZE);
 
+#ifdef CONFIG_KEYSTONE2_DMA_COHERENT
+	/* Sync buffer for remove device to use */
+	dma_sync_single_for_device(&vdev->dev, virt_to_dma(&vdev->dev,
+		(void *)(&sg)), RPMSG_BUF_SIZE, DMA_FROM_DEVICE);
+#endif
+
 		err = virtqueue_add_inbuf(vrp->rvq, &sg, 1, cpu_addr,
 								GFP_KERNEL);
 		WARN_ON(err); /* sanity check; this can't really happen */
-- 
1.7.5.4

