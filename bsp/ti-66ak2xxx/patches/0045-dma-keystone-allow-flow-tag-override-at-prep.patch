From 85c096f1399bcf187e8b98ec5118828d2c170f9b Mon Sep 17 00:00:00 2001
From: Cyril Chemparathy <cyril@ti.com>
Date: Fri, 15 Mar 2013 15:50:37 -0400
Subject: [PATCH 045/257] dma: keystone: allow flow tag override at prep

This patch allows the dma-engine user layer to override the flowtag on a per
packet basis at transfer prep time.  The expectation is that the caller passes
in an "options" argument with the DMA_HAS_FLOWTAG flag set, and with the
flowtag information included (see DMA_FLOWTAG_MASK and DMA_FLOWTAG_SHIFT).

Signed-off-by: Cyril Chemparathy <cyril@ti.com>
Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
(cherry picked from commit cb61325ceed6a21a9e0dea4bbb405f07083f2ec9)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/dma/keystone-pktdma.c | 13 ++++++++++---
 include/linux/keystone-dma.h  |  3 +++
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/drivers/dma/keystone-pktdma.c b/drivers/dma/keystone-pktdma.c
index 4a565f2..351c6d3 100644
--- a/drivers/dma/keystone-pktdma.c
+++ b/drivers/dma/keystone-pktdma.c
@@ -1492,6 +1492,7 @@ chan_prep_slave_sg(struct dma_chan *achan, struct scatterlist *_sg,
 	unsigned num_sg = _num_sg;
 	unsigned nsg;
 	unsigned packet_len;
+	u32 tag_info = chan->tag_info;
 	u32 packet_info, psflags;
 	u32 next_desc;
 	unsigned q_num = (options >> DMA_QNUM_SHIFT) & DMA_QNUM_MASK;
@@ -1537,6 +1538,11 @@ chan_prep_slave_sg(struct dma_chan *achan, struct scatterlist *_sg,
 		pslen /= sizeof(u32);
 	}
 
+	if (unlikely(options & DMA_HAS_FLOWTAG))
+		tag_info =
+			((options >> DMA_FLOWTAG_SHIFT) & DMA_FLOWTAG_MASK) <<
+				 DESC_FLOWTAG_SHIFT;
+
 	if (unlikely(!chan_is_alive(chan))) {
 		dev_err(chan_dev(chan), "cannot submit in state %s\n",
 			chan_state_str(chan_get_state(chan)));
@@ -1601,7 +1607,7 @@ chan_prep_slave_sg(struct dma_chan *achan, struct scatterlist *_sg,
 		packet_len += buflen;
 		desc_fill(chan, hwdesc,
 			  packet_len,		/* desc_info	*/
-			  chan->tag_info,	/* tag_info	*/
+			  tag_info,		/* tag_info	*/
 			  packet_info,		/* packet_info	*/
 			  buflen,		/* buff_len	*/
 			  sg_dma_address(sg),	/* buff		*/
@@ -1658,7 +1664,8 @@ dma_get_regs(struct keystone_dma_device *dma, int index, const char *name,
 	}
 
 	dev_vdbg(dev, "index: %d, res:%s, size:%x, phys:%x, virt:%p\n",
-		 index, name, size, res.start, regs);
+		 index, name, (unsigned int)size, (unsigned int)res.start,
+		 regs);
 
 	if (_size)
 		*_size = size;
@@ -2040,7 +2047,7 @@ static int keystone_dma_probe(struct platform_device *pdev)
 		return -ENODEV;
 	if (size < sizeof(struct reg_global)) {
 		dev_err(dma_dev(dma), "bad size (%d) for global regs\n",
-			size);
+			(int) size);
 		return -ENODEV;
 	}
 
diff --git a/include/linux/keystone-dma.h b/include/linux/keystone-dma.h
index d95a11f..73ac7ad 100644
--- a/include/linux/keystone-dma.h
+++ b/include/linux/keystone-dma.h
@@ -19,8 +19,11 @@
 
 #define DMA_HAS_PSINFO		BIT(31)
 #define DMA_HAS_EPIB		BIT(30)
+#define DMA_HAS_FLOWTAG		BIT(29)
 #define DMA_QNUM_SHIFT		24
 #define DMA_QNUM_MASK		BITS(2)
+#define DMA_FLOWTAG_SHIFT	18
+#define DMA_FLOWTAG_MASK	BITS(6)
 #define DMA_PORT(x)		x
 
 typedef void (*dma_notify_fn)(struct dma_chan *chan, void *arg);
-- 
2.7.4

