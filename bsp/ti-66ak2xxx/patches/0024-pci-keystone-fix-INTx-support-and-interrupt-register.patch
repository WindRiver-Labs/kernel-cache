From a290958bf50e3d02a63d7e74261cb0eae5cc5a3a Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 24 May 2013 13:25:59 -0400
Subject: [PATCH 024/257] pci: keystone: fix INTx support and interrupt
 register offset

Signed-off-by: Aurelien Jacquiot <a-jacquiot@ti.com>
Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
(cherry picked from commit aef6f9c62a6cd5faf1b337f79b2c721e12eef22b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/pci/host/pcie-keystone.c | 68 ++++++++++++++--------------------------
 1 file changed, 23 insertions(+), 45 deletions(-)

diff --git a/drivers/pci/host/pcie-keystone.c b/drivers/pci/host/pcie-keystone.c
index 211bc0b..82c3a10 100644
--- a/drivers/pci/host/pcie-keystone.c
+++ b/drivers/pci/host/pcie-keystone.c
@@ -608,16 +608,12 @@ keystone_pcie_fault(unsigned long addr, unsigned int fsr,
 
 static void mask_legacy_irq(void __iomem *reg_virt, int i)
 {
-	unsigned int offset = i << 4;
-
-	__raw_writel(0xf, reg_virt + IRQ_ENABLE_CLR + (offset << 2));
+	__raw_writel(0x1, reg_virt + IRQ_ENABLE_CLR + (i << 4));
 }
 
 static void unmask_legacy_irq(void __iomem *reg_virt, int i)
 {
-	unsigned int offset = i << 4;
-
-	__raw_writel(0xf, reg_virt + IRQ_ENABLE_SET + (offset << 2));
+	__raw_writel(0x1, reg_virt + IRQ_ENABLE_SET + (i << 4));
 }
 
 /**
@@ -645,52 +641,34 @@ static void keystone_legacy_irq_handler(unsigned int irq, struct irq_desc *desc)
 	chip->irq_mask(&desc->irq_data);
 	if (chip->irq_ack)
 		chip->irq_ack(&desc->irq_data);
-	if (chip->irq_eoi)
-		chip->irq_eoi(&desc->irq_data);
 
 	pending = __raw_readl(info->reg_cfg_virt +
-			IRQ_STATUS + (irq_offset << 2));
+			IRQ_STATUS + (irq_offset << 4));
 
 	if (BIT(0) & pending) {
 		virq = irq_linear_revmap(info->legacy_irqd, irq_offset);
-		pr_debug("irq: irq_offset %d, virq %d\n",
-				 irq_offset, virq);
+		pr_debug("irq: irq_offset %d, virq %d\n", irq_offset, virq);
 		generic_handle_irq(virq);
 	}
 
+	/* EOI the INTx interrupt */
+	__raw_writel(irq_offset, info->reg_cfg_virt + IRQ_EOI);
+
+	if (chip->irq_eoi)
+		chip->irq_eoi(&desc->irq_data);
 	chip->irq_unmask(&desc->irq_data);
 }
 
 static void ack_irq(struct irq_data *d)
 {
-	struct keystone_pcie_info *info = irq_data_get_irq_chip_data(d);
-	u32 offset;
-	unsigned int irq = d->irq;
-
-	offset = irq - irq_linear_revmap(info->legacy_irqd, 0);
-	__raw_writel(BIT(offset), info->reg_cfg_virt + IRQ_EOI);
 }
 
 static void mask_irq(struct irq_data *d)
 {
-	struct keystone_pcie_info *info = irq_data_get_irq_chip_data(d);
-	u32 offset;
-	unsigned int irq = d->irq;
-
-	offset = irq - irq_linear_revmap(info->legacy_irqd, 0);
-	__raw_writel(BIT(0),
-		info->reg_cfg_virt + IRQ_ENABLE_CLR + (offset << 2));
 }
 
 static void unmask_irq(struct irq_data *d)
 {
-	struct keystone_pcie_info *info = irq_data_get_irq_chip_data(d);
-	u32 offset;
-	unsigned int irq = d->irq;
-
-	offset = irq - irq_linear_revmap(info->legacy_irqd, 0);
-	__raw_writel(BIT(0),
-		info->reg_cfg_virt + IRQ_ENABLE_SET + (offset << 2));
 }
 
 static struct irq_chip keystone_legacy_irq_chip = {
@@ -728,16 +706,14 @@ static void keystone_msi_handler(unsigned int irq, struct irq_desc *desc)
 	chip->irq_mask(&desc->irq_data);
 	if (chip->irq_ack)
 		chip->irq_ack(&desc->irq_data);
-	if (chip->irq_eoi)
-		chip->irq_eoi(&desc->irq_data);
 
 	pending = __raw_readl(info->reg_cfg_virt +
-			MSI0_IRQ_STATUS + (offset << 2));
+			MSI0_IRQ_STATUS + (offset << 4));
 	/*
 	 * MSI0, Status bit 0-3 shows vectors 0, 8, 16, 24, MSI1 status bit
 	 * shows 1, 9, 17, 25 and so forth
 	 */
-	for (src = 0;  src < 4; src++) {
+	for (src = 0; src < 4; src++) {
 		if (BIT(src) & pending) {
 			vector = offset + (src << 3);
 			virq = irq_linear_revmap(info->msi_irqd, vector);
@@ -746,6 +722,9 @@ static void keystone_msi_handler(unsigned int irq, struct irq_desc *desc)
 			generic_handle_irq(virq);
 		}
 	}
+
+	if (chip->irq_eoi)
+		chip->irq_eoi(&desc->irq_data);
 	chip->irq_unmask(&desc->irq_data);
 }
 
@@ -761,9 +740,9 @@ static void ack_msi(struct irq_data *d)
 	bit_pos = offset >> 3;
 
 	__raw_writel(BIT(bit_pos),
-		info->reg_cfg_virt + MSI0_IRQ_STATUS + (offset << 2));
+		info->reg_cfg_virt + MSI0_IRQ_STATUS + (reg_offset << 4));
 
-	__raw_writel(offset + MSI_IRQ_OFFSET, info->reg_cfg_virt + IRQ_EOI);
+	__raw_writel(reg_offset + MSI_IRQ_OFFSET, info->reg_cfg_virt + IRQ_EOI);
 }
 
 static void mask_msi(struct irq_data *d)
@@ -778,7 +757,7 @@ static void mask_msi(struct irq_data *d)
 	bit_pos = offset >> 3;
 
 	__raw_writel(BIT(bit_pos),
-		info->reg_cfg_virt + MSI0_IRQ_ENABLE_CLR + (offset << 2));
+		info->reg_cfg_virt + MSI0_IRQ_ENABLE_CLR + (reg_offset << 4));
 }
 
 static void unmask_msi(struct irq_data *d)
@@ -793,7 +772,7 @@ static void unmask_msi(struct irq_data *d)
 	bit_pos = offset >> 3;
 
 	__raw_writel(BIT(bit_pos),
-		info->reg_cfg_virt + MSI0_IRQ_ENABLE_SET + (offset << 2));
+		info->reg_cfg_virt + MSI0_IRQ_ENABLE_SET + (reg_offset << 4));
 }
 
 /*
@@ -1028,7 +1007,6 @@ static int keystone_pcie_setup(int nr, struct pci_sys_data *sys)
 			keystone_msi_handler);
 		irq_set_handler_data(info->msi_host_irqs[i], info);
 	}
-
 #endif
 
 	get_and_clear_err(reg_virt);
@@ -1267,9 +1245,6 @@ static int keystone_pci_write_config(struct pci_bus *bus, unsigned int devfn,
 		return PCIBIOS_DEVICE_NOT_FOUND;
 	}
 
-	pr_info(": Writing config[%x] = %x for device %04x:%02x:%02x ...\n",
-		 where, value, bus_num, PCI_SLOT(devfn), PCI_FUNC(devfn));
-
 	if (!check_device(info->reg_cfg_virt, bus, PCI_SLOT(devfn)))
 		return PCIBIOS_DEVICE_NOT_FOUND;
 
@@ -1313,6 +1288,8 @@ static struct pci_bus *keystone_pcie_scan(int nr, struct pci_sys_data *sys)
 
 	/* Post enumeration fixups */
 	set_inbound_trans(info);
+
+	pr_info(DRIVER_NAME ": Ending PCI scan...\n");
 	return bus;
 }
 
@@ -1342,7 +1319,7 @@ static int keystone_pcie_map_irq(const struct pci_dev *dev, u8 slot, u8 pin)
 
 	/* pin has values from 1-4 */
 	return (info->virqs[pin - 1] >= 0) ?
-				info->virqs[pin - 1] : -1;
+		info->virqs[pin - 1] : -1;
 }
 
 
@@ -1350,6 +1327,7 @@ static struct hw_pci keystone_pcie_hw = {
 	.nr_controllers	= 1,
 	.setup		= keystone_pcie_setup,
 	.scan		= keystone_pcie_scan,
+	.swizzle        = pci_common_swizzle,
 	.map_irq	= keystone_pcie_map_irq,
 };
 
@@ -1406,7 +1384,7 @@ static int __init keystone_pcie_rc_init(void)
 					&irq_domain_simple_ops, NULL);
 		if (!rc_info->legacy_irqd) {
 			pr_err(DRIVER_NAME
-				": failed to add irq domain for legacy irqs\n");
+			       ": failed to add irq domain for legacy irqs\n");
 			goto err1;
 		}
 
-- 
2.7.4

