From c77e5b4e61ea48b900abfe20523b6d66f921d458 Mon Sep 17 00:00:00 2001
From: Cyril Chemparathy <cyril@ti.com>
Date: Thu, 15 Nov 2012 15:53:38 -0500
Subject: [PATCH 072/257] hwqueue: keystone: qos: lock around shadow writes at
 init

This patch introduces proper locking at range initialization time.  Without
this, shadow updates are called without the lock being held, and this causes
assert failures under preempt-rt.
(cherry picked from commit 1ca98fe9b7a0205b3261881fb13338ae9325ac6f)

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue_qos.c | 21 +++++++++++++++------
 1 file changed, 15 insertions(+), 6 deletions(-)

diff --git a/drivers/hwqueue/keystone_hwqueue_qos.c b/drivers/hwqueue/keystone_hwqueue_qos.c
index 0f9b583..f550cd7 100644
--- a/drivers/hwqueue/keystone_hwqueue_qos.c
+++ b/drivers/hwqueue/keystone_hwqueue_qos.c
@@ -2583,12 +2583,15 @@ static int khwq_qos_init_range(struct khwq_range_info *range)
 	pdsp = info->pdsp;
 	kdev = info->kdev;
 
+	spin_lock_bh(&info->lock);
+
 	magic = __raw_readl(pdsp->command + QOS_MAGIC_OFFSET);
 	version = __raw_readl(pdsp->command + QOS_VERSION_OFFSET);
 
 	if ((magic >> 16) != QOS_MAGIC_DROPSCHED) {
 		dev_err(kdev->dev, "invalid qos magic word %x\n", magic);
-		return -EINVAL;
+		error = -EINVAL;
+		goto fail;
 	}
 
 	dev_info(kdev->dev, "qos version 0x%x, magic %s\n", version,
@@ -2612,7 +2615,7 @@ static int khwq_qos_init_range(struct khwq_range_info *range)
 	error = khwq_qos_write_cmd(info, command);
 	if (error) {
 		dev_err(kdev->dev, "failed to set drop sched base\n");
-		return error;
+		goto fail;
 	}
 
 	/* command for qos scheduler base */
@@ -2621,7 +2624,7 @@ static int khwq_qos_init_range(struct khwq_range_info *range)
 	error = khwq_qos_write_cmd(info, command);
 	if (error) {
 		dev_err(kdev->dev, "failed to set qos sched base\n");
-		return error;
+		goto fail;
 	}
 
 	/* calculate the timer config from the pdsp tick */
@@ -2631,22 +2634,28 @@ static int khwq_qos_init_range(struct khwq_range_info *range)
 	error = khwq_qos_write_cmd(info, command);
 	if (error) {
 		dev_err(kdev->dev, "failed to set timer\n");
-		return error;
+		goto fail;
 	}
 
 	error = khwq_qos_program_drop_sched(info);
 	if (error) {
 		dev_err(kdev->dev, "failed to initialize drop scheduler\n");
-		return error;
+		goto fail;
 	}
 
+	spin_unlock_bh(&info->lock);
+
 	error = khwq_program_drop_policies(info);
 	if (error) {
 		dev_err(kdev->dev, "failed to initialize drop policies\n");
-		return error;
+		goto fail;
 	}
 
 	return 0;
+
+fail:
+	spin_unlock_bh(&info->lock);
+	return error;
 }
 
 struct khwq_range_ops khwq_qos_range_ops = {
-- 
2.7.4

