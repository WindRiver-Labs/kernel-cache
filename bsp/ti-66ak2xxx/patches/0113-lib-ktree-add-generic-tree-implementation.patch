From 779a6bd04629b80d4b5a5ef184cdd396fab336fe Mon Sep 17 00:00:00 2001
From: Cyril Chemparathy <cyril@ti.com>
Date: Fri, 19 Oct 2012 21:33:12 -0400
Subject: [PATCH 113/257] lib/ktree: add generic tree implementation

This patch adds a generic tree implementation along the same principles as the
existing klist implementation for lists.

Signed-off-by: Cyril Chemparathy <cyril@ti.com>
(cherry picked from commit 3e0c26e0b12201103154f62c535ed8c9d08a1a93)

Conflicts:
	lib/Makefile
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 include/linux/ktree.h | 110 ++++++++++++++++
 lib/Makefile          |   2 +-
 lib/ktree.c           | 355 ++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 466 insertions(+), 1 deletion(-)
 create mode 100644 include/linux/ktree.h
 create mode 100644 lib/ktree.c

diff --git a/include/linux/ktree.h b/include/linux/ktree.h
new file mode 100644
index 0000000..f0278bd
--- /dev/null
+++ b/include/linux/ktree.h
@@ -0,0 +1,110 @@
+/*
+ *	ktree.h - Some generic list helpers, extending struct list_head a bit.
+ *
+ *	Implementations are found in lib/ktree.c
+ *
+ *
+ *	Copyright (C) 2005 Patrick Mochel
+ *
+ *	This file is rleased under the GPL v2.
+ */
+
+#ifndef _LINUX_KTREE_H
+#define _LINUX_KTREE_H
+
+#include <linux/spinlock.h>
+#include <linux/kref.h>
+#include <linux/list.h>
+
+struct ktree_node;
+
+struct ktree {
+	spinlock_t		lock;
+	struct ktree_node	*root;
+	void			(*get)(struct ktree_node *);
+	void			(*put)(struct ktree_node *);
+};
+
+#define KTREE_INIT(_name, _get, _put)					\
+	{ .lock	= __SPIN_LOCK_UNLOCKED(_name.lock),		\
+	  .get		= _get,						\
+	  .put		= _put, }
+
+#define DEFINE_KTREE(_name, _get, _put)					\
+	struct ktree _name = KTREE_INIT(_name, _get, _put)
+
+extern void ktree_init(struct ktree *ktree, void (*get)(struct ktree_node *),
+		       void (*put)(struct ktree_node *));
+
+struct ktree_node {
+	struct ktree		*ktree;
+	bool			deleted;
+	struct ktree_node	*parent;
+	struct list_head	siblings;
+	struct list_head	children;
+	struct kref		refcount;
+};
+
+void ktree_set_root(struct ktree *ktree, struct ktree_node *root);
+
+static inline struct ktree_node *ktree_get_node(struct ktree_node *node)
+{
+	if (node)
+		kref_get(&node->refcount);
+	return node;
+}
+
+static inline struct ktree_node *ktree_get_root(struct ktree *ktree)
+{
+	return ktree_get_node(ktree->root);
+}
+
+static inline struct ktree_node *ktree_get_parent(struct ktree_node *node)
+{
+	return ktree_get_node(node->parent);
+}
+
+void ktree_put_node(struct ktree_node *node);
+
+void ktree_add_child_after(struct ktree_node *parent, struct ktree_node *child,
+			   struct ktree_node *pos);
+void ktree_add_child_before(struct ktree_node *parent, struct ktree_node *child,
+			    struct ktree_node *pos);
+
+static inline void ktree_add_child_first(struct ktree_node *parent,
+					 struct ktree_node *child)
+{
+	ktree_add_child_after(parent, child, NULL);
+}
+
+static inline void ktree_add_child_last(struct ktree_node *parent,
+					struct ktree_node *child)
+{
+	ktree_add_child_before(parent, child, NULL);
+}
+
+static inline void ktree_add_sibling_after(struct ktree_node *child,
+					   struct ktree_node *pos)
+{
+	ktree_add_child_after(pos->parent, child, pos);
+}
+
+static inline void ktree_add_sibling_before(struct ktree_node *child,
+					    struct ktree_node *pos)
+{
+	ktree_add_child_before(pos->parent, child, pos);
+}
+
+extern void ktree_del(struct ktree_node *node);
+extern void ktree_remove(struct ktree_node *node);
+
+static inline bool ktree_is_leaf(struct ktree_node *node)
+{
+	return list_empty(&node->children);
+}
+
+int ktree_for_each_child(struct ktree_node *parent,
+			 int (*visitor)(struct ktree_node *child, void *arg),
+			 void *arg);
+
+#endif
diff --git a/lib/Makefile b/lib/Makefile
index de854e5..df44fc9 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -19,7 +19,7 @@ obj-$(CONFIG_ARCH_HAS_DEBUG_STRICT_USER_COPY_CHECKS) += usercopy.o
 lib-$(CONFIG_MMU) += ioremap.o
 lib-$(CONFIG_SMP) += cpumask.o
 
-lib-y	+= kobject.o klist.o
+lib-y	+= kobject.o klist.o ktree.o
 obj-y	+= lockref.o
 
 obj-y += bcd.o div64.o sort.o parser.o halfmd4.o debug_locks.o random32.o \
diff --git a/lib/ktree.c b/lib/ktree.c
new file mode 100644
index 0000000..b830043
--- /dev/null
+++ b/lib/ktree.c
@@ -0,0 +1,355 @@
+/*
+ * ktree.c - Routines for manipulating ktrees.
+ *
+ * Copyright (C) 2005 Patrick Mochel
+ *
+ * This file is released under the GPL v2.
+ *
+ * This ktree interface provides a couple of structures that wrap around
+ * struct list_head to provide explicit list "head" (struct ktree) and list
+ * "node" (struct ktree_node) objects. For struct ktree, a spinlock is
+ * included that protects access to the actual list itself. struct
+ * ktree_node provides a pointer to the ktree that owns it and a kref
+ * reference count that indicates the number of current users of that node
+ * in the list.
+ *
+ * The entire point is to provide an interface for iterating over a list
+ * that is safe and allows for modification of the list during the
+ * iteration (e.g. insertion and removal), including modification of the
+ * current node on the list.
+ *
+ * It works using a 3rd object type - struct ktree_iter - that is declared
+ * and initialized before an iteration. ktree_iter_next() is used to acquire the
+ * next element in the list. It returns NULL if there are no more items.
+ * Internally, that routine takes the ktree's lock, decrements the
+ * reference count of the previous ktree_node and increments the count of
+ * the next ktree_node. It then drops the lock and returns.
+ *
+ * There are primitives for adding and removing nodes to/from a ktree.
+ * When deleting, ktree_del() will simply decrement the reference count.
+ * Only when the count goes to 0 is the node removed from the list.
+ * ktree_remove() will try to delete the node from the list and block until
+ * it is actually removed. This is useful for objects (like devices) that
+ * have been removed from the system and must be freed (but must wait until
+ * all accessors have finished).
+ */
+
+#include <linux/export.h>
+#include <linux/sched.h>
+#include <linux/ktree.h>
+
+static void knode_release(struct kref *kref);
+static void __ktree_put_node(struct ktree_node *node, bool kill);
+
+void ktree_put_node(struct ktree_node *node)
+{
+	if (node)
+		__ktree_put_node(node, false);
+}
+EXPORT_SYMBOL_GPL(ktree_put_node);
+
+static void knode_set_parent(struct ktree_node *node, struct ktree_node *parent)
+{
+	struct ktree_node *old_parent = node->parent;
+
+	WARN_ON(parent && parent->deleted);
+	node->parent = ktree_get_node(parent);
+	ktree_put_node(old_parent);
+}
+
+void ktree_init(struct ktree *ktree, void (*get)(struct ktree_node *),
+		void (*put)(struct ktree_node *))
+{
+	ktree->root = NULL;
+	spin_lock_init(&ktree->lock);
+	ktree->get = get;
+	ktree->put = put;
+}
+EXPORT_SYMBOL_GPL(ktree_init);
+
+static void ktree_node_init(struct ktree *ktree, struct ktree_node *parent,
+			    struct ktree_node *node)
+{
+	node->deleted = false;
+	INIT_LIST_HEAD(&node->siblings);
+	INIT_LIST_HEAD(&node->children);
+	kref_init(&node->refcount);
+	node->ktree = ktree;
+	knode_set_parent(node, parent);
+	if (ktree->get)
+		ktree->get(node);
+}
+
+void ktree_set_root(struct ktree *ktree, struct ktree_node *root)
+{
+	ktree_node_init(ktree, NULL, root);
+	ktree_del(ktree->root);
+	ktree->root = root;
+}
+EXPORT_SYMBOL_GPL(ktree_set_root);
+
+void ktree_add_child_before(struct ktree_node *parent, struct ktree_node *child,
+			    struct ktree_node *pos)
+{
+	struct ktree *ktree = parent->ktree;
+	struct list_head *head;
+
+	ktree_node_init(ktree, parent, child);
+
+	spin_lock(&ktree->lock);
+	head = pos ? &pos->siblings : &parent->children;
+	list_add_tail(&child->siblings, head);
+	spin_unlock(&ktree->lock);
+}
+EXPORT_SYMBOL_GPL(ktree_add_child_before);
+
+void ktree_add_child_after(struct ktree_node *parent, struct ktree_node *child,
+			    struct ktree_node *pos)
+{
+	struct ktree *ktree = parent->ktree;
+	struct list_head *head;
+
+	ktree_node_init(ktree, parent, child);
+
+	spin_lock(&ktree->lock);
+	head = pos ? &pos->siblings : &parent->children;
+	list_add(&child->siblings, head);
+	spin_unlock(&ktree->lock);
+}
+EXPORT_SYMBOL_GPL(ktree_add_child_after);
+
+static void ktree_node_destroy(struct ktree_node *node)
+{
+	struct ktree_node *parent = node->parent;
+	struct ktree *ktree = node->ktree;
+
+	WARN_ON(!ktree_is_leaf(node));
+	ktree->put(node);
+	ktree_put_node(parent);
+}
+
+struct ktree_waiter {
+	struct list_head list;
+	struct ktree_node *node;
+	struct task_struct *process;
+	int woken;
+};
+
+static DEFINE_SPINLOCK(ktree_remove_lock);
+static LIST_HEAD(ktree_remove_waiters);
+
+static void knode_release(struct kref *kref)
+{
+	struct ktree_waiter *waiter, *tmp;
+	struct ktree_node *node;
+	struct ktree *ktree;
+
+	node = container_of(kref, struct ktree_node, refcount);
+	WARN_ON(!node->deleted || !node->ktree);
+	ktree = node->ktree;
+
+	assert_spin_locked(&ktree->lock);
+
+	list_del(&node->siblings);
+
+	if (node == ktree->root)
+		ktree->root = NULL;
+
+	spin_lock(&ktree_remove_lock);
+	list_for_each_entry_safe(waiter, tmp, &ktree_remove_waiters, list) {
+		if (waiter->node != node)
+			continue;
+		waiter->woken = 1;
+		mb();
+		wake_up_process(waiter->process);
+		list_del(&waiter->list);
+	}
+	spin_unlock(&ktree_remove_lock);
+}
+
+typedef void (*put_fn)(struct ktree_node *);
+
+static bool __ktree_put_node_locked(struct ktree_node *node)
+{
+	return !!kref_put(&node->refcount, knode_release);
+}
+
+static void __ktree_put_node_unlock(struct ktree_node *node)
+{
+	struct ktree *ktree = node->ktree;
+
+	if (__ktree_put_node_locked(node)) {
+		spin_unlock(&ktree->lock);
+		ktree_node_destroy(node);
+		spin_lock(&ktree->lock);
+	}
+}
+
+static void __ktree_put_node(struct ktree_node *node, bool kill)
+{
+	struct ktree *ktree = node->ktree;
+	bool destroy;
+
+	spin_lock(&ktree->lock);
+	if (kill) {
+		WARN_ON(node->deleted);
+		node->deleted = true;
+	}
+	destroy = __ktree_put_node_locked(node);
+	spin_unlock(&ktree->lock);
+	if (destroy)
+		ktree_node_destroy(node);
+}
+
+int __ktree_del(struct ktree_node *child, void *arg)
+{
+	ktree_del(child);
+	return 0;
+}
+
+void ktree_del(struct ktree_node *node)
+{
+	if (node) {
+		ktree_for_each_child(node, __ktree_del, NULL);
+		__ktree_put_node(node, true);
+	}
+}
+EXPORT_SYMBOL_GPL(ktree_del);
+
+void ktree_remove(struct ktree_node *node)
+{
+	struct ktree_waiter waiter;
+
+	waiter.node = node;
+	waiter.process = current;
+	waiter.woken = 0;
+
+	spin_lock(&ktree_remove_lock);
+	list_add(&waiter.list, &ktree_remove_waiters);
+	spin_unlock(&ktree_remove_lock);
+
+	ktree_del(node);
+
+	for (;;) {
+		set_current_state(TASK_UNINTERRUPTIBLE);
+		if (waiter.woken)
+			break;
+		schedule();
+	}
+	__set_current_state(TASK_RUNNING);
+}
+EXPORT_SYMBOL_GPL(ktree_remove);
+
+static struct ktree_node *ktree_get_pos(struct ktree_node *parent,
+					struct list_head *pos)
+{
+	struct ktree_node *node = NULL;
+
+	if (pos != &parent->children)
+		node = container_of(pos, struct ktree_node, siblings);
+	return ktree_get_node(node);
+}
+
+struct ktree_node *ktree_try_traverse_parent(struct ktree_node *node)
+{
+	struct ktree_node *next;
+	next = ktree_get_parent(node);
+	if (next)
+		ktree_put_node(node);
+	return next;
+}
+
+struct ktree_node *ktree_traverse_parent(struct ktree_node *node)
+{
+	struct ktree_node *next;
+	next = ktree_get_parent(node);
+	ktree_put_node(node);
+	return next;
+}
+
+struct ktree_node *ktree_traverse_sibling(struct ktree_node *node, bool reverse)
+{
+	struct ktree_node *next, *parent;
+	struct list_head *pos;
+
+	parent = node->parent;
+	if (!parent)
+		return NULL;
+
+	spin_lock(&node->ktree->lock);
+	for (;;) {
+		pos = reverse ? node->siblings.prev : node->siblings.next;
+		next = ktree_get_pos(parent, pos);
+		__ktree_put_node_unlock(node);
+		if (!next || !next->deleted)
+			break;
+		node = next;
+	}
+	spin_unlock(&node->ktree->lock);
+
+	return next;
+}
+
+struct ktree_node *ktree_try_traverse_sibling(struct ktree_node *node,
+					      bool reverse)
+{
+	struct ktree_node *next;
+
+	node = ktree_get_node(node);
+	next = ktree_traverse_sibling(node, reverse);
+	if (next)
+		ktree_put_node(node);
+	return next;
+}
+
+struct ktree_node *ktree_traverse_child(struct ktree_node *node, bool reverse)
+{
+	struct ktree_node *child;
+	struct list_head *pos;
+
+	spin_lock(&node->ktree->lock);
+	pos = reverse ? node->children.prev : node->children.next;
+	child = ktree_get_pos(node, pos);
+	spin_unlock(&node->ktree->lock);
+
+	ktree_put_node(node);
+	if (child && child->deleted)
+		child = ktree_traverse_sibling(child, reverse);
+
+	return child;
+}
+
+struct ktree_node *ktree_try_traverse_child(struct ktree_node *node,
+					    bool reverse)
+{
+	struct ktree_node *next;
+
+	node = ktree_get_node(node);
+	next = ktree_traverse_child(node, reverse);
+	if (next)
+		ktree_put_node(node);
+	return next;
+}
+
+int ktree_for_each_child(struct ktree_node *parent,
+			 int (*visitor)(struct ktree_node *child, void *arg),
+			 void *arg)
+{
+	struct ktree_node *node;
+	bool reverse = false;
+	int error;
+
+	/* grab a reference that we drop as we traverse */
+	node = ktree_get_node(parent);
+
+	for (node = ktree_traverse_child(node, reverse); node;
+	     node = ktree_traverse_sibling(node, reverse)) {
+		error = visitor(node, arg);
+		if (error) {
+			ktree_put_node(node);
+			return error;
+		}
+	}
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ktree_for_each_child);
-- 
2.7.4

