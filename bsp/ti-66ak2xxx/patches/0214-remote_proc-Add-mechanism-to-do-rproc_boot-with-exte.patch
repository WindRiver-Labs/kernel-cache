From c939d266d718e7d48c98dcc9aecd6d087997ef6e Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Tue, 15 Oct 2013 14:15:04 -0400
Subject: [PATCH 214/257] remote_proc: Add mechanism to do rproc_boot with
 external mechanism to download and run

- This assumes the remote processor is downloaded and run using other
  mechannism external to remote proc
- Added new entries in rprc_fw_ops table to match updated structure

Signed-off-by: Sam Nelson <sam.nelson@ti.com>
(cherry picked from commit 423cc43840e25f39fb0b4b0d62291d5050037dab)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/remoteproc/remoteproc_core.c | 62 ++++++++++++++++++++++++++++++++++++
 drivers/remoteproc/remoteproc_user.c | 12 ++++++-
 include/linux/remoteproc.h           |  1 +
 3 files changed, 74 insertions(+), 1 deletion(-)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 3831f6c..e036861 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -982,6 +982,68 @@ out:
 	complete_all(&rproc->firmware_loading_complete);
 }
 
+/**
+ * rproc_boot_ext_download() - boot a remote processor with download done externally
+ * @rproc: handle of a remote processor
+ *
+ * Boot a remote processor ( with firmware download and power on done externally ...).
+ *
+ *
+ * Returns 0 on success, and an appropriate error value otherwise.
+ */
+
+int rproc_boot_ext_download(struct rproc *rproc)
+{
+	int ret;
+	struct device *dev;
+
+	if (!rproc) {
+		pr_err("invalid rproc handle\n");
+		return -EINVAL;
+	}
+
+	dev = &rproc->dev;
+
+	ret = mutex_lock_interruptible(&rproc->lock);
+	if (ret) {
+		dev_err(dev, "can't lock rproc %s: %d\n", rproc->name, ret);
+		return ret;
+	}
+
+	/* prevent underlying implementation from being removed */
+	if (!try_module_get(dev->parent->driver->owner)) {
+		dev_err(dev, "%s: can't get owner\n", __func__);
+		ret = -EINVAL;
+		goto unlock_mutex;
+	}
+
+	/* skip the boot process if rproc is already powered up */
+	if (atomic_inc_return(&rproc->power) > 1) {
+		ret = 0;
+		goto unlock_mutex;
+	}
+
+	dev_info(dev, "powering up %s\n", rproc->name);
+
+	/* power up the remote processor */
+	ret = rproc->ops->start(rproc);
+	if (ret) {
+		dev_err(dev, "can't start rproc %s: %d\n", rproc->name, ret);
+		goto unlock_mutex;
+	}
+
+	/* Set state to indicate RPROC is loaded so that the call from virtio to rproc boot returns*/
+	rproc->state = RPROC_LOADED;
+	rproc_fw_config_virtio(NULL, (void *)rproc);
+	rproc->state = RPROC_RUNNING;
+unlock_mutex:
+	mutex_unlock(&rproc->lock);
+	return ret;
+
+}
+
+EXPORT_SYMBOL(rproc_boot_ext_download);
+
 static int rproc_add_virtio_devices(struct rproc *rproc)
 {
 	int ret;
diff --git a/drivers/remoteproc/remoteproc_user.c b/drivers/remoteproc/remoteproc_user.c
index ec36ff8..0b81096 100644
--- a/drivers/remoteproc/remoteproc_user.c
+++ b/drivers/remoteproc/remoteproc_user.c
@@ -158,7 +158,7 @@ static int uproc_set_state(struct uproc_info *uproc,
 	int error = 0;
 
 	if (state == RPROC_USER_RUNNING)
-		error = rproc_boot(rproc);
+		error = rproc_boot_ext_download(rproc);
 	else if (state == RPROC_USER_OFFLINE)
 		rproc_shutdown(rproc);
 	else
@@ -385,6 +385,13 @@ uproc_find_rsc_table(struct rproc *rproc, const struct firmware *fw,
 		*tablesz = uproc->rsc_table_size;
 	return uproc->rsc_table;
 }
+static struct resource_table *
+uproc_find_loaded_rsc_table(struct rproc *rproc, const struct firmware *fw)
+{
+	struct uproc_info *uproc = rproc->priv;
+
+	return uproc->rsc_table;
+}
 
 static int uproc_load_segments(struct rproc *rproc, const struct firmware *fw)
 {
@@ -400,7 +407,10 @@ static const struct file_operations uproc_dev_fops = {
 
 static struct rproc_fw_ops uproc_fw_ops = {
 	.find_rsc_table		= uproc_find_rsc_table,
+	.find_loaded_rsc_table  = uproc_find_loaded_rsc_table,
 	.load			= uproc_load_segments,
+	.sanity_check		= NULL,
+	.get_boot_addr		= NULL,
 };
 
 /**
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index 9f07b1e..e297a4d 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -494,6 +494,7 @@ int rproc_del(struct rproc *rproc);
 int rproc_boot(struct rproc *rproc);
 void rproc_shutdown(struct rproc *rproc);
 void rproc_report_crash(struct rproc *rproc, enum rproc_crash_type type);
+int rproc_boot_ext_download(struct rproc *rproc);
 
 static inline struct rproc_vdev *vdev_to_rvdev(struct virtio_device *vdev)
 {
-- 
2.7.4

