From 11eccebd656e1202a251b10a23cdfa23c53f500b Mon Sep 17 00:00:00 2001
From: Sandeep Paulraj <s-paulraj@ti.com>
Date: Wed, 31 Oct 2012 13:21:57 -0400
Subject: [PATCH 056/257] hwqueue: extend push and pop api's to take an
 additional argument

An additional argument is being added to the hardware queue push and
pop api's.
This is needed due to the fact that there are implementations like
that of keystone hardware queue which need both a descriptor size
as well as packet size in a push operation.
A new argument called "flags" is now an additional argument to the
hardware queue push api. This can be used in a way defined by any driver
that leverages the hardware queue push api.The upper bits can have some
encoded information and the lower bits can have actual data.
The corresponding pop api too has this same additional
argument though this additional argument has no use at present.

Signed-off-by: Sandeep Paulraj <s-paulraj@ti.com>
(cherry picked from commit 0d5b523e414c00b319c858cca72efbe23eabe06b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/hwqueue_core.c     |  6 +++---
 drivers/hwqueue/hwqueue_internal.h |  5 +++--
 include/linux/hwqueue.h            | 19 +++++++++++--------
 3 files changed, 17 insertions(+), 13 deletions(-)

diff --git a/drivers/hwqueue/hwqueue_core.c b/drivers/hwqueue/hwqueue_core.c
index d7f8747..ec7e66c 100644
--- a/drivers/hwqueue/hwqueue_core.c
+++ b/drivers/hwqueue/hwqueue_core.c
@@ -578,7 +578,7 @@ int hwqueue_set_notifier(struct hwqueue *qh, hwqueue_notify_fn fn,
 EXPORT_SYMBOL(hwqueue_set_notifier);
 
 dma_addr_t __hwqueue_pop_slow(struct hwqueue_instance *inst, unsigned *size,
-			 struct timeval *timeout)
+			 struct timeval *timeout, unsigned flags)
 {
 	struct hwqueue_device *hdev = inst->hdev;
 	dma_addr_t dma_addr = 0;
@@ -588,7 +588,7 @@ dma_addr_t __hwqueue_pop_slow(struct hwqueue_instance *inst, unsigned *size,
 		unsigned long expires = timeval_to_jiffies(timeout);
 
 		ret = wait_event_interruptible_timeout(inst->wait,
-				(dma_addr = hdev->ops->pop(inst, size)),
+				(dma_addr = hdev->ops->pop(inst, size, flags)),
 				expires);
 		if (ret < 0)
 			return 0;
@@ -597,7 +597,7 @@ dma_addr_t __hwqueue_pop_slow(struct hwqueue_instance *inst, unsigned *size,
 		jiffies_to_timeval(ret, timeout);
 	} else {
 		ret = wait_event_interruptible(inst->wait,
-				(dma_addr = hdev->ops->pop(inst, size)));
+				(dma_addr = hdev->ops->pop(inst, size, flags)));
 		if (ret < 0)
 			return 0;
 		if (WARN_ON(!ret && !dma_addr))
diff --git a/drivers/hwqueue/hwqueue_internal.h b/drivers/hwqueue/hwqueue_internal.h
index c650340..0c2cd07 100644
--- a/drivers/hwqueue/hwqueue_internal.h
+++ b/drivers/hwqueue/hwqueue_internal.h
@@ -55,10 +55,11 @@ struct hwqueue_device_ops {
 
 	/* Push something into the queue */
 	int	 (*push)(struct hwqueue_instance *inst, dma_addr_t dma,
-			 unsigned size);
+			 unsigned size, unsigned flags);
 
 	/* Pop something from the queue */
-	dma_addr_t (*pop)(struct hwqueue_instance *inst, unsigned *size);
+	dma_addr_t (*pop)(struct hwqueue_instance *inst, unsigned *size,
+			  unsigned flags);
 
 	/* Flush a queue */
 	int	 (*flush)(struct hwqueue_instance *inst);
diff --git a/include/linux/hwqueue.h b/include/linux/hwqueue.h
index 713b413..586a606 100644
--- a/include/linux/hwqueue.h
+++ b/include/linux/hwqueue.h
@@ -47,8 +47,9 @@ struct hwqueue_instance;
 
 struct hwqueue {
 	int		 (*push)(struct hwqueue_instance *inst, dma_addr_t dma,
-				 unsigned size);
-	dma_addr_t	 (*pop)(struct hwqueue_instance *inst, unsigned *size);
+				 unsigned size, unsigned flags);
+	dma_addr_t	 (*pop)(struct hwqueue_instance *inst, unsigned *size,
+				unsigned flags);
 	int		 (*flush)(struct hwqueue_instance *inst);
 	int		 (*get_count)(struct hwqueue_instance *inst);
 	int		 (*map)(struct hwqueue_instance *inst, void *data,
@@ -85,7 +86,7 @@ int hwqueue_enable_notifier(struct hwqueue *queue);
 int hwqueue_disable_notifier(struct hwqueue *queue);
 
 dma_addr_t __hwqueue_pop_slow(struct hwqueue_instance *inst, unsigned *size,
-			 struct timeval *timeout);
+			 struct timeval *timeout, unsigned flags);
 
 /**
  * hwqueue_get_count() - poll a hardware queue and check if empty
@@ -120,10 +121,12 @@ static inline int hwqueue_flush(struct hwqueue *qh)
  * @qh	- hardware queue handle
  * @data	- data to push
  * @size	- size of data to push
+ * @flags	- can be used to pass additional information
  *
  * Returns 0 on success, errno otherwise.
  */
-static inline int hwqueue_push(struct hwqueue *qh, dma_addr_t dma, unsigned size)
+static inline int hwqueue_push(struct hwqueue *qh, dma_addr_t dma,
+			       unsigned size, unsigned flags)
 {
 	int ret = 0;
 
@@ -133,7 +136,7 @@ static inline int hwqueue_push(struct hwqueue *qh, dma_addr_t dma, unsigned size
 			break;
 		}
 
-		ret = qh->push(qh->inst, dma, size);
+		ret = qh->push(qh->inst, dma, size, flags);
 	} while (0);
 
 	if (unlikely(ret < 0))
@@ -152,7 +155,7 @@ static inline int hwqueue_push(struct hwqueue *qh, dma_addr_t dma, unsigned size
  * Returns a DMA address on success, 0 on failure.
  */
 static inline dma_addr_t hwqueue_pop(struct hwqueue *qh, unsigned *size,
-				struct timeval *timeout)
+				struct timeval *timeout , unsigned flags)
 {
 	dma_addr_t ret = 0;
 
@@ -162,7 +165,7 @@ static inline dma_addr_t hwqueue_pop(struct hwqueue *qh, unsigned *size,
 			break;
 		}
 
-		ret = qh->pop(qh->inst, size);
+		ret = qh->pop(qh->inst, size, flags);
 		if (likely(ret))
 			break;
 
@@ -170,7 +173,7 @@ static inline dma_addr_t hwqueue_pop(struct hwqueue *qh, unsigned *size,
 			   (timeout && !timeout->tv_sec && !timeout->tv_usec)))
 			break;
 
-		ret = __hwqueue_pop_slow(qh->inst, size, timeout);
+		ret = __hwqueue_pop_slow(qh->inst, size, timeout, flags);
 	} while (0);
 
 	if (likely(ret)) {
-- 
2.7.4

