From 343ba1a5a63f0c4352ae30317e9f6e240f4aa93d Mon Sep 17 00:00:00 2001
From: "Reece R. Pollack" <x0183204@ti.com>
Date: Tue, 22 Oct 2013 14:28:29 -0400
Subject: [PATCH 092/257] hwqueue: keystone: Support negative QoS
 overhead-bytes attribute

This patch supports negative QoS overhead-bytes attributes in the
device tree and via sysfs. This is intended to allow subtracting
a packet header size (ex: -20 for the IP header) from the output
data rate.

To specify a negative value in the device tree it may be necessary
to wrap the value with paretheses, as in this example:
	overhead-bytes = <(-20)>;
The paretheses are not required or accepted when writing to the
sysfs attribute. Also, changing a parent's sysfs attribute does not
cause the new value to propagate to its children; each child must
be changed separately.

This patch requires a new version of the QoS firmware (2_0_1_6), which
in turn requires changes to the firmware name in the device tree.
Without these changes, setting "overhead-bytes" negative behaves as
if it was set to zero. No error is reported.

Signed-off-by: Reece R. Pollack <x0183204@ti.com>
(cherry picked from commit 9cf309be44c6dfa97b4ae8ca970a6c86f107ec29)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue_qos.c | 27 +++++++++++++++++++++++----
 drivers/hwqueue/keystone_qos.h         |  1 +
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/drivers/hwqueue/keystone_hwqueue_qos.c b/drivers/hwqueue/keystone_hwqueue_qos.c
index bcd4880..54364c4 100644
--- a/drivers/hwqueue/keystone_hwqueue_qos.c
+++ b/drivers/hwqueue/keystone_hwqueue_qos.c
@@ -1439,7 +1439,7 @@ static ssize_t qnode_overhead_bytes_store(struct khwq_qos_tree_node *qnode,
 	struct khwq_qos_info *info = qnode->info;
 	int error, field;
 
-	error = kstrtouint(buf, 0, &field);
+	error = kstrtoint(buf, 0, &field);
 	if (error)
 		return error;
 	
@@ -2129,9 +2129,17 @@ static int khwq_qos_tree_start_port(struct khwq_qos_info *info,
 		return error;
 
 	val = qnode->overhead_bytes;
-	error = khwq_qos_set_sched_overhead_bytes(info, idx, val, sync);
+	error = khwq_qos_set_sched_overhead_bytes(info, idx,
+			(val < 0) ? 0 : val, sync);
+	if (WARN_ON(error))
+		return error;
+	error = khwq_qos_set_sched_remove_bytes(info, idx,
+			(val < 0) ? (-val) : 0, sync);
 	if (WARN_ON(error))
 		return error;
+	dev_dbg(kdev->dev, "%s overhead_bytes %d: %d/%d\n", qnode->name, val,
+			(val < 0) ? 0 : val,
+			(val < 0) ? (-val) : 0);
 
 	val = qnode->output_rate / info->ticks_per_sec;
 	error = khwq_qos_set_sched_out_throttle(info, idx, val, sync);
@@ -2528,6 +2536,11 @@ static int khwq_qos_stop_sched_port_queues(struct khwq_qos_info *info)
 			if (WARN_ON(error))
 				return error;
 
+			error = khwq_qos_set_sched_remove_bytes(info, idx, 0,
+								  false);
+			if (WARN_ON(error))
+				return error;
+
 			error = khwq_qos_set_sched_out_throttle(info, idx, 0,
 								false);
 			if (WARN_ON(error))
@@ -2926,7 +2939,7 @@ static ssize_t khwq_qos_sched_port_read(struct file *filp, char __user *buffer,
 	size_t len = 0;
 	ssize_t ret;
 	char *buf;
-	u32 temp, queues;
+	u32 temp, temp2, queues;
 
 	if (*ppos != 0)
 		return 0;
@@ -2977,8 +2990,13 @@ static ssize_t khwq_qos_sched_port_read(struct file *filp, char __user *buffer,
 			if (WARN_ON(error))
 				goto free;
 
+			error = khwq_qos_get_sched_remove_bytes(info, idx,
+								  &temp2);
+			if (WARN_ON(error))
+				goto free;
+
 			len += snprintf(buf + len, buf_len - len,
-					"overhead bytes %d ", temp);
+					"overhead bytes %d ", temp - temp2);
 
 			error = khwq_qos_get_sched_out_throttle(info, idx,
 								&temp);
@@ -3309,6 +3327,7 @@ static int khwq_qos_init_range(struct khwq_range_info *range)
 		__khwq_qos_set_sched_overhead_bytes(info, idx,
 						    QOS_DEFAULT_OVERHEAD_BYTES,
 						    false);
+		__khwq_qos_set_sched_remove_bytes(info, idx, 0, false);
 	}
 
 	for (i = 0 ; i < info->shadows[QOS_DROP_CFG_PROF].count; i++) {
diff --git a/drivers/hwqueue/keystone_qos.h b/drivers/hwqueue/keystone_qos.h
index 9569227..7fde627 100644
--- a/drivers/hwqueue/keystone_qos.h
+++ b/drivers/hwqueue/keystone_qos.h
@@ -370,6 +370,7 @@ DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_unit_flags,     0x00,  0,  8)
 DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_group_count,    0x00,  8,  8)
 DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_out_queue,      0x00, 16, 16)
 DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_overhead_bytes, 0x04,  0,  8)
+DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_remove_bytes,   0x04,  8,  8)
 DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_out_throttle,   0x04, 16, 16)
 DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_cir_credit,     0x08,  0, 32)
 DEFINE_FIELD_U32(QOS_SCHED_PORT_CFG, sched_cir_max,        0x0c,  0, 32)
-- 
2.7.4

