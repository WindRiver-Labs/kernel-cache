From 327f4f205070d5bbf677d83e2b4fec637698286b Mon Sep 17 00:00:00 2001
From: "Reece R. Pollack" <x0183204@ti.com>
Date: Mon, 25 Aug 2014 14:18:54 -0400
Subject: [PATCH 106/257] hwqueue: keystone: Minimize QoS output rate round-off
 errors

When calculating the QoS output rate, the desired rate was divided
by the number of PDSP timer ticks per second before being multiplied
(shifted) to calculate the number of credits. This truncates small
output rates. For example, requesting 125000 bytes/sec (1 Mbps)
gives an actual output rate of 120000 bytes/sec (960 Kbps).

This patch uses 64-bit integer math to allow the multiplication to
be done before the divide, minimizing the round-off errors.

Signed-off-by: Reece R. Pollack <x0183204@ti.com>
(cherry picked from commit 9ba84bbbcbd87cd7bc29a5078cdb1336fa445a0e)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue_qos.c | 31 +++++++++++++++++++------------
 1 file changed, 19 insertions(+), 12 deletions(-)

diff --git a/drivers/hwqueue/keystone_hwqueue_qos.c b/drivers/hwqueue/keystone_hwqueue_qos.c
index de81885..769c19b 100644
--- a/drivers/hwqueue/keystone_hwqueue_qos.c
+++ b/drivers/hwqueue/keystone_hwqueue_qos.c
@@ -1499,26 +1499,25 @@ static ssize_t qnode_output_rate_store(struct khwq_qos_tree_node *qnode,
 {
 	struct khwq_qos_info *info = qnode->info;
 	int idx = qnode->sched_port_idx;
-	int error, val, new_rate, shift;
-	unsigned long mask;
+	int error;
+	unsigned int new_rate;
+	u64 val64;
 
 	error = kstrtouint(buf, 0, &new_rate);
 	if (error)
 		return error;
 	
-	shift = (qnode->acct == QOS_BYTE_ACCT) ?
+	val64 = new_rate;
+	val64 <<= (qnode->acct == QOS_BYTE_ACCT) ?
 			QOS_CREDITS_BYTE_SHIFT :
 			QOS_CREDITS_PACKET_SHIFT;
-	mask = ~(BIT(BITS_PER_LONG - shift) - 1);
-
-	val = new_rate / info->ticks_per_sec;
-	if (((unsigned long)val & mask) != 0)
-		return -EINVAL;
-	val <<= shift;
+	do_div(val64, info->ticks_per_sec);
+	if (val64 > (u64)S32_MAX)
+		return -ERANGE;
 
 	qnode->output_rate = new_rate;
 
-	khwq_qos_set_sched_cir_credit(info, idx, val, true);
+	khwq_qos_set_sched_cir_credit(info, idx, (u32)val64, true);
 
 	ktree_for_each_child(&qnode->node,
 			     qnode_output_rate_store_child, qnode);
@@ -2457,10 +2456,18 @@ static int khwq_qos_tree_start_port(struct khwq_qos_info *info,
 	if (WARN_ON(error))
 		return error;
 
-	cir_credit = qnode->output_rate / info->ticks_per_sec;
-	cir_credit <<= (qnode->acct == QOS_BYTE_ACCT) ?
+	tmp = qnode->output_rate;
+	tmp <<= (qnode->acct == QOS_BYTE_ACCT) ?
 			QOS_CREDITS_BYTE_SHIFT :
 			QOS_CREDITS_PACKET_SHIFT;
+	do_div(tmp, info->ticks_per_sec);
+	if (tmp > (u64)S32_MAX) {
+		dev_warn(kdev->dev, "node %s output-rate is too large.\n",
+				qnode->name);
+		tmp = S32_MAX;
+	}
+	cir_credit = (u32)tmp;
+
 	error = khwq_qos_set_sched_cir_credit(info, idx, cir_credit, sync);
 	if (WARN_ON(error))
 		return error;
-- 
2.7.4

