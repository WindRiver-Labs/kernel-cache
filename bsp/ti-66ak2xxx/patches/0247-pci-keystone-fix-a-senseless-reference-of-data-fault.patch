From e52c9ede414eaa3156ab3dd4415126e7fbb08a14 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 5 May 2015 11:09:58 +0800
Subject: [PATCH 247/257] pci: keystone: fix a senseless reference of data
 fault

According to a note from original codes as follows:
  /* Note: only handle such abort during PCI bus probing */

So we move the reference of regs from definition into a place when it is valid.

[<c00190cc>] (unwind_backtrace) from [<c001364c>] (show_stack+0x20/0x24)
[<c001364c>] (show_stack) from [<c07cb6e4>] (dump_stack+0x84/0xd0)
[<c07cb6e4>] (dump_stack) from [<c006214c>] (__might_sleep+0x168/0x230)
[<c006214c>] (__might_sleep) from [<c07d3b98>] (do_page_fault+0x2f4/0x498)
[<c07d3b98>] (do_page_fault) from [<c0008448>] (do_DataAbort+0x40/0xa0)
[<c0008448>] (do_DataAbort) from [<c07d1cdc>] (__dabt_svc+0x3c/0x60)
Exception stack(0xef26dea8 to 0xef26def0)
dea0:                   00000000 b6e6ea00 ef26dfb0 00000000 c0bf1d40 00000211
dec0: c043d920 00000000 ef26dfb0 00000000 00000000 ef26defc ef26df00 ef26def0
dee0: c0008448 c043d948 60000193 ffffffff
[<c07d1cdc>] (__dabt_svc) from [<c043d948>] (keystone_pcie_fault+0x28/0xd0)
[<c043d948>] (keystone_pcie_fault) from [<c0008448>] (do_DataAbort+0x40/0xa0)
[<c0008448>] (do_DataAbort) from [<c07d1efc>] (__dabt_usr+0x3c/0x40)
Exception stack(0xef26dfb0 to 0xef26dff8)
dfa0:                                     00000000 00000000 00000000 00000000
dfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
dfe0: 00000000 be96df00 00000000 b6e6ea00 00000030 ffffffff
random: systemd urandom read with 16 bits of entropy available

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/pci/host/pcie-keystone.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/drivers/pci/host/pcie-keystone.c b/drivers/pci/host/pcie-keystone.c
index 23a81d0..2da231d 100644
--- a/drivers/pci/host/pcie-keystone.c
+++ b/drivers/pci/host/pcie-keystone.c
@@ -601,7 +601,7 @@ static int
 keystone_pcie_fault(unsigned long addr, unsigned int fsr,
 		struct pt_regs *regs)
 {
-	unsigned long instr = *(unsigned long *) instruction_pointer(regs);
+	unsigned long instr;
 
 	/* Note: only handle such abort during PCI bus probing */
 	if (!abort_check_base)
@@ -609,6 +609,9 @@ keystone_pcie_fault(unsigned long addr, unsigned int fsr,
 
 	get_and_clear_err((void __iomem *) abort_check_base);
 
+	/* Note: move here after having done abort_check_base */
+	instr = *(unsigned long *) instruction_pointer(regs);
+
 	/*
 	 * Mimic aborted read of all 1's as required to detect device/function
 	 * absence - check if the instruction that caused abort was a LOAD,
-- 
2.7.4

