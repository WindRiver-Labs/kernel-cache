From d993c8adc8ea1ee098319e5d36b7bf1647e1af50 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Sun, 12 Feb 2012 10:11:21 -0500
Subject: [PATCH 134/257] of: adding devres version of of_iomap

This adds devres version of the of_iomap() to allow resource to be cleaned
through devres.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
(cherry picked from commit f9146474270613d2b2fcf70b5364c3c3cae739ab)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/of/address.c       | 30 +++++++++++++++++++++++++++---
 include/linux/of_address.h |  2 ++
 2 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/drivers/of/address.c b/drivers/of/address.c
index 005c657..984330f 100644
--- a/drivers/of/address.c
+++ b/drivers/of/address.c
@@ -714,10 +714,9 @@ struct device_node *of_find_matching_node_by_address(struct device_node *from,
 	return NULL;
 }
 
-
 /**
  * of_iomap - Maps the memory mapped IO for a given device_node
- * @device:	the device whose io range will be mapped
+ * @device_node: Ptr to the device node that has the reg property
  * @index:	index of the io range
  *
  * Returns a pointer to the mapped memory
@@ -729,6 +728,31 @@ void __iomem *of_iomap(struct device_node *np, int index)
 	if (of_address_to_resource(np, index, &res))
 		return NULL;
 
-	return ioremap(res.start, resource_size(&res));
+	return (ioremap(res.start, resource_size(&res)));
+
 }
 EXPORT_SYMBOL(of_iomap);
+
+/**
+ * of_devm_iomap - devres version of of_iomap
+ * @device:	the device whose io range will be mapped
+ * @index:	index of the io range
+ *
+ * Returns a pointer to the mapped memory
+ */
+void __iomem *of_devm_iomap(struct device *dev, int index)
+{
+	struct device_node *np;
+	struct resource res;
+
+	if (!dev)
+		return NULL;
+
+	np = dev->of_node;
+	if (of_address_to_resource(np, index, &res))
+		return NULL;
+
+	return devm_ioremap(dev, res.start, resource_size(&res));
+}
+EXPORT_SYMBOL(of_devm_iomap);
+
diff --git a/include/linux/of_address.h b/include/linux/of_address.h
index 5f6ed6b..07d8fec 100644
--- a/include/linux/of_address.h
+++ b/include/linux/of_address.h
@@ -3,6 +3,7 @@
 #include <linux/ioport.h>
 #include <linux/errno.h>
 #include <linux/of.h>
+#include <linux/device.h>
 
 struct of_pci_range_parser {
 	struct device_node *node;
@@ -48,6 +49,7 @@ extern struct device_node *of_find_matching_node_by_address(
 					const struct of_device_id *matches,
 					u64 base_address);
 extern void __iomem *of_iomap(struct device_node *device, int index);
+extern void __iomem *of_devm_iomap(struct device *dev, int index);
 
 /* Extract an address from a device, returns the region size and
  * the address space flags too. The PCI version uses a BAR number
-- 
2.7.4

