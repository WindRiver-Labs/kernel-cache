From 1dc625f6b3dd4cd485877d02f233d727625543e7 Mon Sep 17 00:00:00 2001
From: "Reece R. Pollack" <x0183204@ti.com>
Date: Thu, 15 May 2014 19:42:05 -0400
Subject: [PATCH 102/257] hwqueue: keystone: Fix a bug in the
 sched_out_throttle calculations

Parameter "sched_out_throttle" is configured too small.  This leads
to under-utilization (low rate) and unexpected drops.  Seen with
1000:100:10:1 ratio WRR with 80mbit output and 60-80mbit input.  The
ratio kicks in with drops when all traffic should pass.

This patch increments the value of this parameter unless it's zero.

Signed-off-by: Reece R. Pollack <x0183204@ti.com>
(cherry picked from commit a479599149e8dbbb90277e13f6328c0204d6426a)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/hwqueue/keystone_hwqueue_qos.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/drivers/hwqueue/keystone_hwqueue_qos.c b/drivers/hwqueue/keystone_hwqueue_qos.c
index c9e70d2..b2bc8a4 100644
--- a/drivers/hwqueue/keystone_hwqueue_qos.c
+++ b/drivers/hwqueue/keystone_hwqueue_qos.c
@@ -1464,6 +1464,8 @@ static int qnode_output_rate_store_child(struct ktree_node *child, void *arg)
 
 	val = parent->output_rate;
 	val = (val + info->ticks_per_sec - 1) / info->ticks_per_sec;
+	if (val != 0)
+		++val;
 	khwq_qos_set_sched_out_throttle(info, idx, val, true);
 
 	return 0;
@@ -2301,6 +2303,8 @@ static int khwq_qos_tree_start_port(struct khwq_qos_info *info,
 
 	val = parent ? parent->output_rate : 0;
 	val = (val + info->ticks_per_sec - 1) / info->ticks_per_sec;
+	if (val != 0)
+		++val;
 	error = khwq_qos_set_sched_out_throttle(info, idx, val, sync);
 	if (WARN_ON(error))
 		return error;
-- 
2.7.4

