From 263eaf1c86e98304b266f63ee92502c843121340 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Wed, 30 Jul 2014 12:03:04 -0400
Subject: [PATCH 031/257] pci: keystone: update for two instances of PCI
 controller

Enhance the driver to support two instances of the PCI controller.
The SerDes setup code uses domain number to identify the instance and
initialize the corresponding SerDes lanes.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
(cherry picked from commit 9bcf730a35a20ab8553aa6193823c07012a6dcd5)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/pci/host/k2-platform.c   | 25 ++++++++++++++++--------
 drivers/pci/host/pci-pdata.h     |  4 ++--
 drivers/pci/host/pcie-keystone.c | 42 ++++++++++++++++++++++++++--------------
 3 files changed, 46 insertions(+), 25 deletions(-)

diff --git a/drivers/pci/host/k2-platform.c b/drivers/pci/host/k2-platform.c
index 57a1681..0e11103 100644
--- a/drivers/pci/host/k2-platform.c
+++ b/drivers/pci/host/k2-platform.c
@@ -27,8 +27,10 @@
 		pr_debug("reg %p has value %x\n", (void *)addr, \
 				(__raw_readl(addr) & ~mask))
 
-#define PCIE_RC_MODE		(BIT(2))
-#define PCIE_MODE_MASK		(BIT(1) | BIT(2))
+#define PCIE0_RC_MODE		(BIT(2))
+#define PCIE0_MODE_MASK		(BIT(1) | BIT(2))
+#define PCIE1_RC_MODE		(BIT(4))
+#define PCIE1_MODE_MASK		(BIT(3) | BIT(4))
 
 /* mask bits point to bits being modified */
 #define reg_rmw(addr, value, mask) \
@@ -153,7 +155,7 @@ static struct serdes_config k2_100mhz_pcie_5gbps_serdes[] = {
 	{0x0b14, 0x0000005d, 0x000000ff},
 };
 
-int k2_pcie_platform_setup(void *pdata, struct device_node *np)
+int k2_pcie_platform_setup(void *pdata, struct device_node *np, int domain)
 {
 	struct keystone_pcie_pdata *p_data = pdata;
 	void __iomem *reg_serdes_base, *devcfg;
@@ -164,7 +166,7 @@ int k2_pcie_platform_setup(void *pdata, struct device_node *np)
 	devcfg = of_iomap(np, 1);
 	reg_serdes_base = of_iomap(np, 2);
 
-	pr_info("keystone2_pcie_serdes_setup\n");
+	pr_info("keystone2_pcie_serdes_setup for domain %d\n", domain);
 
 	if (!reg_serdes_base)
 		pr_info("Assuming SERDES initialized by boot loader\n");
@@ -187,15 +189,22 @@ int k2_pcie_platform_setup(void *pdata, struct device_node *np)
 
 	/* enable RC mode in devcfg */
 	val = __raw_readl(devcfg);
-	val &= ~PCIE_MODE_MASK;
-	val |= PCIE_RC_MODE;
+	if (domain) {
+		val &= ~PCIE1_MODE_MASK;
+		val |= PCIE1_RC_MODE;
+	} else {
+		val &= ~PCIE0_MODE_MASK;
+		val |= PCIE0_RC_MODE;
+	}
 	__raw_writel(val, devcfg);
 
 	/* check if we need to enable link training */
 	p_data->en_link_train =
 		(of_get_property(np, "enable-linktrain", NULL) != NULL);
 
-	pr_info("keystone2_pcie_serdes_setup done, en_link_train = %d\n",
-		p_data->en_link_train);
+	pr_info("keystone2_pcie_serdes_setup done domain %d, en_link_train = %d\n",
+		domain, p_data->en_link_train);
+	iounmap(devcfg);
+	iounmap(reg_serdes_base);
 	return 0;
 }
diff --git a/drivers/pci/host/pci-pdata.h b/drivers/pci/host/pci-pdata.h
index e036f7c..fcf7f09 100644
--- a/drivers/pci/host/pci-pdata.h
+++ b/drivers/pci/host/pci-pdata.h
@@ -15,11 +15,11 @@
  */
 
 /* platform specific setup for k2 serdes */
-int k2_pcie_platform_setup(void *pdata, struct device_node *);
+int k2_pcie_platform_setup(void *pdata, struct device_node *, int domain);
 
 /* keystone pcie pdata configurations */
 struct keystone_pcie_pdata {
-	int (*setup)(void *pdata, struct device_node *);
+	int (*setup)(void *pdata, struct device_node *, int);
 	int en_link_train;
 };
 
diff --git a/drivers/pci/host/pcie-keystone.c b/drivers/pci/host/pcie-keystone.c
index 648d7c4..23a81d0 100644
--- a/drivers/pci/host/pcie-keystone.c
+++ b/drivers/pci/host/pcie-keystone.c
@@ -1341,10 +1341,10 @@ static __init struct pci_bus *keystone_pcie_scan(int nr,
 	struct keystone_pcie_info *info;
 	struct pci_bus *bus = NULL;
 
+	pr_info(DRIVER_NAME ": Starting PCI scan, nr %d...\n", nr);
 	if (nr != 0)
 		return bus;
 
-	pr_info(DRIVER_NAME ": Starting PCI scan...\n");
 	info = (struct keystone_pcie_info *)sys->private_data;
 
 	bus = pci_scan_root_bus(NULL, sys->busnr, &keystone_pci_ops, sys,
@@ -1420,13 +1420,14 @@ static const struct of_device_id keystone_pci_match_ids[] __initconst = {
 	{}
 };
 
-static int __init keystone_pcie_rc_init(void)
+static int __init keystone_pcie_controller_init(struct device_node *np,
+						int domain)
 {
 	struct keystone_pcie_info *rc_info;
 	const struct of_device_id *of_id;
-	struct device_node *np;
 	int err = -EINVAL, i;
 	struct clk *pcie_clk;
+	int port = 0;
 
 	pr_info(DRIVER_NAME ": keystone_pcie_rc_init - start\n");
 
@@ -1436,22 +1437,19 @@ static int __init keystone_pcie_rc_init(void)
 		return -ENOMEM;
 	}
 
-	np = of_find_matching_node(NULL, keystone_pci_match_ids);
-	if (!np) {
-		pr_err(DRIVER_NAME ": Unable to find pcie device node\n");
-		goto err;
-	}
-
 	of_id = of_match_node(keystone_pci_match_ids, np);
+
 	if (of_id)
 		rc_info->pdata = (struct keystone_pcie_pdata *)of_id->data;
 
 	/* Setup platform specific initialization */
-	if (rc_info->pdata)
-		err = rc_info->pdata->setup(rc_info->pdata, np);
+	if (rc_info->pdata) {
+		of_property_read_u32(np, "ti,pcie-port", &port);
+		err = rc_info->pdata->setup(rc_info->pdata, np, port);
 
-	if (err < 0)
-		goto err;
+		if (err < 0)
+			goto err;
+	}
 
 	/* Enable controller Power and Clock domains */
 	pcie_clk = of_clk_get(np, 0);
@@ -1514,9 +1512,8 @@ static int __init keystone_pcie_rc_init(void)
 		for (i = 0; i < rc_info->num_msi_irqs; i++)
 			irq_create_mapping(rc_info->msi_irqd, i);
 	}
-	of_node_put(np);
 	keystone_pcie_hw.private_data = (void **)&rc_info;
-	pcibios_min_mem = 0;
+	keystone_pcie_hw.domain = domain;
 	pci_common_init(&keystone_pcie_hw);
 	abort_check_base = 0;
 	pr_info(DRIVER_NAME ": keystone_pcie_rc_init - end\n");
@@ -1530,4 +1527,19 @@ err:
 	return err;
 }
 
+
+static int __init keystone_pcie_rc_init(void)
+{
+	struct device_node *np = NULL;
+	int ret = 0, domain = 0;
+
+	pcibios_min_mem = 0;
+
+	for_each_matching_node(np, keystone_pci_match_ids) {
+		if (of_device_is_available(np))
+			ret = keystone_pcie_controller_init(np, domain);
+		domain++;
+	}
+	return ret;
+}
 subsys_initcall(keystone_pcie_rc_init);
-- 
2.7.4

