From 87a60c1c45a44ceab4ab777364ab45d6c29f0bff Mon Sep 17 00:00:00 2001
From: Prabhu Kuttiyam <pkuttiyam@ti.com>
Date: Wed, 23 Jan 2013 00:39:03 -0500
Subject: [PATCH 042/257] keystone: dma: changes to add new sysfs entries for
 dma channels

This commit adds new sysfs entries:
for rx & tx: adds a complete queue
for tx: adds submit queue and a free queue

Signed-off-by: Prabhu Kuttiyam <pkuttiyam@ti.com>
(cherry picked from commit c1266c75ffa9dc1f37a4deac800dd2004f24e44a)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/dma/keystone-pktdma.c | 59 ++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 56 insertions(+), 3 deletions(-)

diff --git a/drivers/dma/keystone-pktdma.c b/drivers/dma/keystone-pktdma.c
index d993e44..b892855 100644
--- a/drivers/dma/keystone-pktdma.c
+++ b/drivers/dma/keystone-pktdma.c
@@ -1882,6 +1882,41 @@ static ssize_t keystone_dma_show_chan_num(struct device *dev,
 	return scnprintf(buf, PAGE_SIZE, "%u\n", chan->channel);
 }
 
+static ssize_t keystone_dma_show_complete_queue(struct device *dev,
+			     struct device_attribute *attr, char *buf)
+{
+	struct dma_chan *achan = dev_to_dma_chan(dev);
+	struct keystone_dma_chan *chan = from_achan(achan);
+
+	return scnprintf(buf, PAGE_SIZE, "%u\n", chan->qcfg_complete);
+}
+
+static ssize_t keystone_dma_show_free_queue(struct device *dev,
+			     struct device_attribute *attr, char *buf)
+{
+	struct dma_chan *achan = dev_to_dma_chan(dev);
+	struct keystone_dma_chan *chan = from_achan(achan);
+	int i, l = 0;
+
+	for (i = 0; i < KEYSTONE_QUEUES_PER_CHAN; i++) {
+		if (chan->qnum_submit[i])
+			l += scnprintf(buf + l, PAGE_SIZE - l, "%u ",
+				       chan->qnum_submit[i]);
+	}
+	l += scnprintf(buf + l, PAGE_SIZE - l, "\n");
+	return l;
+
+}
+
+static ssize_t keystone_dma_show_submit_queue(struct device *dev,
+			     struct device_attribute *attr, char *buf)
+{
+	struct dma_chan *achan = dev_to_dma_chan(dev);
+	struct keystone_dma_chan *chan = from_achan(achan);
+
+	return scnprintf(buf, PAGE_SIZE, "%u\n", chan->qcfg_submit);
+}
+
 static ssize_t keystone_dma_show_flow(struct device *dev,
 			     struct device_attribute *attr, char *buf)
 {
@@ -1896,6 +1931,10 @@ static DEVICE_ATTR(chan_num, S_IRUSR, keystone_dma_show_chan_num, NULL);
 static DEVICE_ATTR(tx_flow_tag, S_IRUSR | S_IWUSR, \
 	 keystone_dma_show_flow_tag, keystone_dma_store_flow_tag);
 static DEVICE_ATTR(rx_flow, S_IRUSR, keystone_dma_show_flow, NULL);
+static DEVICE_ATTR(complete_queue, S_IRUSR,
+		   keystone_dma_show_complete_queue, NULL);
+static DEVICE_ATTR(submit_queue, S_IRUSR, keystone_dma_show_submit_queue, NULL);
+static DEVICE_ATTR(free_queue, S_IRUSR, keystone_dma_show_free_queue, NULL);
 
 static void keystone_dma_destroy_attr(struct keystone_dma_device *dma)
 {
@@ -1911,10 +1950,14 @@ static void keystone_dma_destroy_attr(struct keystone_dma_device *dma)
 		/* remove sysfs entries */
 		device_remove_file(dev, &dev_attr_name);
 		device_remove_file(dev, &dev_attr_chan_num);
-		if (chan->direction == DMA_MEM_TO_DEV)
+			device_remove_file(dev, &dev_attr_complete_queue);
+		if (chan->direction == DMA_MEM_TO_DEV) {
 			device_remove_file(dev, &dev_attr_tx_flow_tag);
-		else
+			device_remove_file(dev, &dev_attr_submit_queue);
+		} else {
 			device_remove_file(dev, &dev_attr_rx_flow);
+			device_remove_file(dev, &dev_attr_free_queue);
+		}
 	}
 }
 
@@ -1937,14 +1980,24 @@ static int  keystone_dma_setup_attr(struct keystone_dma_device *dma)
 		status = device_create_file(dev, &dev_attr_chan_num);
 		if (status)
 			dev_warn(dev, "Couldn't create sysfs file chan_num\n");
+		status = device_create_file(dev, &dev_attr_complete_queue);
+		if (status)
+			dev_warn(dev, "Couldn't create sysfs file complete_queue\n");
 		if (chan->direction == DMA_MEM_TO_DEV) {
 			status = device_create_file(dev, &dev_attr_tx_flow_tag);
 			if (status)
 				dev_warn(dev, "Couldn't create sysfs file tx_flow_tag\n");
+			status = device_create_file(dev,
+						    &dev_attr_submit_queue);
+			if (status)
+				dev_warn(dev, "Couldn't create sysfs file submit_queue\n");
 		} else {
 			status = device_create_file(dev, &dev_attr_rx_flow);
 			if (status)
-				dev_warn(dev, "Couldn't create sysfs file tx_flow\n");
+				dev_warn(dev, "Couldn't create sysfs file rx_flow\n");
+			status = device_create_file(dev, &dev_attr_free_queue);
+			if (status)
+				dev_warn(dev, "Couldn't create sysfs file rx_free_queu\n");
 		}
 	}
 	return status;
-- 
2.7.4

