From 7c2c5b293435364b32906b9faef30a07ac12e5d8 Mon Sep 17 00:00:00 2001
From: Russ Dill <russ.dill@gmail.com>
Date: Mon, 19 Sep 2016 19:47:39 -0700
Subject: [PATCH 321/347] clk: TI_SCI: Fix determine_rate API usage

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

The determine_rate function should set the new rate in the rate field
of rate request and return 0 on success, negative value on error. The
function was instead not modifying rate and returning the frequency
on success and 0 on error. This sort of worked since most frequencies
turn out to not be negative values, but failed when the user later
tried to set the frequency to the exact rate value, which may not be
possible. See rate field of clk_rate_request in clk-provider.h:

 * @rate:               Requested clock rate. This field will be adjusted by
 *                      clock drivers according to hardware capabilities.

This error manifested as a DSS clock rate request for 49.9MHz, for which
the PMMC returned that it could set 49.875MHz. The function returned a
non-negative value (49875000) but did not modify rate. The clock API
then requested a frequency of exactly 49.9MHz, which then fails.

Signed-off-by: Russ Dill <Russ.Dill@gmail.com>
(cherry picked from commit ff3449863693bcd0e659a0fbcfc5c0a753182671)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/clk/keystone/sci-clk.c |   10 ++++++----
 1 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/drivers/clk/keystone/sci-clk.c b/drivers/clk/keystone/sci-clk.c
index 700f19d..cd21bfe 100644
--- a/drivers/clk/keystone/sci-clk.c
+++ b/drivers/clk/keystone/sci-clk.c
@@ -163,8 +163,8 @@ static unsigned long sci_clk_recalc_rate(struct clk_hw *hw,
  * Determines a suitable clock rate and parent for a TI SCI clock.
  * The parent handling is un-used, as generally the parent clock rates
  * are not known by the kernel; instead these are internally handled
- * by the firmware. Returns the new clock rate that can be set for the
- * clock, or 0 in failure.
+ * by the firmware. Returns 0 and sets the new rate in the req->rate field
+ * on success, returns < 0 on failure.
  */
 static int sci_clk_determine_rate(struct clk_hw *hw,
 				  struct clk_rate_request *req)
@@ -184,10 +184,12 @@ static int sci_clk_determine_rate(struct clk_hw *hw,
 		dev_err(clk->provider->dev,
 			"determine-rate failed for dev=%d, clk=%d, ret=%d\n",
 			clk->dev_id, clk->clk_id, ret);
-		return 0;
+		return ret;
 	}
 
-	return (int)new_rate;
+	req->rate = new_rate;
+
+	return 0;
 }
 
 /**
-- 
1.7.5.4

