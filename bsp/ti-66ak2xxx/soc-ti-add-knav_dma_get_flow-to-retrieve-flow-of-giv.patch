From a59a28409c0cc6173e0181f0b007d9e16fd99ab5 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 11 Mar 2016 02:39:06 +0000
Subject: [PATCH 043/347] soc: ti: add knav_dma_get_flow() to retrieve flow of
 given channel

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

Some devices using packet DMA (e.g. PA, SRIO) need to configure additional
hw registers based on flow Ids. Add a function to retrieve this flow
Id from a given channel for a DMA client.

Signed-off-by: Aurelien Jacquiot <a-jacquiot@ti.com>
Signed-off-by: Murali Karicheri <m-karicheri@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
(cherry picked from commit 1885879144cf3b197d3f26d4bc03a7192d2ce1ff)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/soc/ti/knav_dma.c       |   22 ++++++++++++++++++++++
 include/linux/soc/ti/knav_dma.h |    6 ++++++
 2 files changed, 28 insertions(+), 0 deletions(-)

diff --git a/drivers/soc/ti/knav_dma.c b/drivers/soc/ti/knav_dma.c
index 43439c9..802c3ee 100644
--- a/drivers/soc/ti/knav_dma.c
+++ b/drivers/soc/ti/knav_dma.c
@@ -533,6 +533,28 @@ void knav_dma_close_channel(void *channel)
 }
 EXPORT_SYMBOL_GPL(knav_dma_close_channel);
 
+/**
+ * knav_dma_get_flow() - retrieve flow Id from a given channel handle
+ * @channel     dma channel handle
+ *
+ * Returns corresponding flow Id on success or -EINVAL in case of error
+ */
+int knav_dma_get_flow(void *channel)
+{
+	struct knav_dma_chan *chan = channel;
+
+	if (!chan)
+		return -EINVAL;
+
+	if (!kdev) {
+		pr_err("keystone-navigator-dma driver not registered\n");
+		return -EINVAL;
+	}
+
+	return chan->flow;
+}
+EXPORT_SYMBOL_GPL(knav_dma_get_flow);
+
 static void __iomem *pktdma_get_regs(struct knav_dma_device *dma,
 				struct device_node *node,
 				unsigned index, resource_size_t *_size)
diff --git a/include/linux/soc/ti/knav_dma.h b/include/linux/soc/ti/knav_dma.h
index 29b5e6a..ddb87ec 100644
--- a/include/linux/soc/ti/knav_dma.h
+++ b/include/linux/soc/ti/knav_dma.h
@@ -164,6 +164,7 @@ void *knav_dma_open_channel(struct device *dev, const char *name,
 				struct knav_dma_cfg *config);
 void knav_dma_close_channel(void *channel);
 bool knav_dma_device_ready(void);
+int knav_dma_get_flow(void *channel);
 #else
 static inline void *knav_dma_open_channel(struct device *dev, const char *name,
 				struct knav_dma_cfg *config)
@@ -177,6 +178,11 @@ static inline bool knav_dma_device_ready(void)
 	return false;
 }
 
+static inline int knav_dma_get_flow(void *channel)
+{
+	return -EINVAL;
+}
+
 #endif
 
 #endif /* __SOC_TI_KEYSTONE_NAVIGATOR_DMA_H__ */
-- 
1.7.5.4

