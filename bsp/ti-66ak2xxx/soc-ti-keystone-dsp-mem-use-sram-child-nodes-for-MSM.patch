From cd1491459e51bf7fe85508a6525358b501104ab9 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 1 Aug 2016 16:37:05 -0500
Subject: [PATCH 215/347] soc: ti: keystone-dsp-mem: use sram child nodes for
 MSM RAM

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

The Keystone 2 SoCs have an on-chip RAM controlled by the Multicore
Shared Memory Controller (MSMC). The keystone-dsp-mem driver exposes
this MSM memory to userspace for the Multi Proc Manager (MPM) stack,
and relied on using the standard 'reg' property before.

This MSM RAM can be used by different client drivers and so is now
represented as a mmio-sram node and managed by the standard SRAM
driver. The keystone-dsp-mem driver has been enhanced to switch to
use the SRAM driver provided infrastructure to use MSM RAM. The logic
depends on marking the required SRAM regions as 'reserved' child nodes
under the parent MSM SRAM node with a specific "ti,keystone-dsp-msm-ram"
compatible property, and can scale to multiple discrete nodes.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit 45d0e76c50bcb379a16719ae99dd462971af5123)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../bindings/soc/ti/keystone-dsp-mem.txt           |   33 +++++++++++++++++--
 drivers/soc/ti/keystone_dsp_mem.c                  |   33 +++++++++++++++++--
 2 files changed, 58 insertions(+), 8 deletions(-)

diff --git a/Documentation/devicetree/bindings/soc/ti/keystone-dsp-mem.txt b/Documentation/devicetree/bindings/soc/ti/keystone-dsp-mem.txt
index 5a88488..b7cb6d5 100644
--- a/Documentation/devicetree/bindings/soc/ti/keystone-dsp-mem.txt
+++ b/Documentation/devicetree/bindings/soc/ti/keystone-dsp-mem.txt
@@ -12,8 +12,21 @@ supporting user-space based loading of the DSP remoteproc devices.
 Required properties:
 --------------------
 - compatible : Should be "ti,keystone-dsp-mem"
-- reg        : An array of memory regions, each region represented by a tuple
-               of the region's start address and the size of the region.
+- reg        : An array of memory regions (DDR), each region represented by a
+               tuple of the region's start address and the size of the region.
+
+SRAM usage (Optional):
+----------------------
+The on-chip Multicore Shared Memory (MSM) RAM can also be exposed to
+userspace by defining specific child nodes under the corresponding parent
+SRAM node. The generic SRAM binding is as per the binding document
+Documentation/devicetree/bindings/misc/sram.txt. Following properties
+should be used in each corresponding child node for the userspace mapping
+usecase:
+
+- compatible : Should be "ti,keystone-dsp-msm-ram"
+- reg        : Should contain a pair of values for the address and size
+               of the region, following the parent-child ranges convention.
 
 Example:
 --------
@@ -21,7 +34,19 @@ Example:
 	soc {
 		mpm_mem: dspmem {
 			compatible = "ti,keystone-dsp-mem";
-			reg  = <0x0c000000 0x00600000>, /* MSMC Memory */
-			       <0xa0000000 0x20000000>; /* DDR Memory */
+			reg  = <0xa0000000 0x20000000>; /* DDR Memory */
+		};
+
+		msm_ram: msmram@0c000000 {
+			compatible = "mmio-sram";
+			reg = <0x0c000000 0x600000>;
+			ranges = <0x0 0x0c000000 0x600000>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			sram-mpm@0 {
+				compatible = "ti,keystone-dsp-msm-ram";
+				reg = <0x0 0x80000>;
+			};
 		};
 	};
diff --git a/drivers/soc/ti/keystone_dsp_mem.c b/drivers/soc/ti/keystone_dsp_mem.c
index 621e205..b209042 100644
--- a/drivers/soc/ti/keystone_dsp_mem.c
+++ b/drivers/soc/ti/keystone_dsp_mem.c
@@ -219,9 +219,10 @@ static int keystone_dsp_mem_probe(struct platform_device *pdev)
 	struct keystone_dsp_mem_info *dsp_mem;
 	struct miscdevice *misc;
 	struct resource *res, temp_res;
+	struct device_node *sram_np;
 	char *name;
 	int ret, i;
-	int num_maps = 0;
+	int num_maps = 0, num_sram = 0;
 
 	if (!np) {
 		dev_err(dev, "only DT-based devices are supported\n");
@@ -239,11 +240,19 @@ static int keystone_dsp_mem_probe(struct platform_device *pdev)
 	 */
 	while (of_address_to_resource(np, num_maps, &temp_res) == 0)
 		num_maps++;
-	if (!num_maps || num_maps > KEYSTONE_DSP_MEM_MAP_INDEX_MASK)
+
+	for_each_compatible_node(sram_np, NULL, "ti,keystone-dsp-msm-ram") {
+		if (!of_device_is_available(sram_np))
+			continue;
+		num_sram++;
+	}
+
+	if ((!num_maps && !num_sram) ||
+	    (num_maps + num_sram > KEYSTONE_DSP_MEM_MAP_INDEX_MASK))
 		return -EINVAL;
 
-	dsp_mem->mem = devm_kcalloc(dev, num_maps, sizeof(*dsp_mem->mem),
-				    GFP_KERNEL);
+	dsp_mem->mem = devm_kcalloc(dev, num_maps + num_sram,
+				    sizeof(*dsp_mem->mem), GFP_KERNEL);
 	if (!dsp_mem->mem)
 		return -ENOMEM;
 
@@ -257,6 +266,22 @@ static int keystone_dsp_mem_probe(struct platform_device *pdev)
 	dsp_mem->num_maps = num_maps;
 	dsp_mem->dev = dev;
 
+	if (num_sram) {
+		for_each_compatible_node(sram_np, NULL,
+					 "ti,keystone-dsp-msm-ram") {
+			if (!of_device_is_available(sram_np))
+				continue;
+
+			ret = of_address_to_resource(sram_np, 0, &temp_res);
+			if (ret)
+				return -EINVAL;
+			dsp_mem->mem[i].addr = temp_res.start;
+			dsp_mem->mem[i].size = resource_size(&temp_res);
+			i++;
+			dsp_mem->num_maps++;
+		}
+	}
+
 	/*
 	 * construct a user-friendly device name by discarding any prefixes
 	 * from the DT-generated device name.
-- 
1.7.5.4

