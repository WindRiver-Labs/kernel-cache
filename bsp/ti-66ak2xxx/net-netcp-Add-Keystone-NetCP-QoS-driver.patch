From b27c481f3a8ea1336313a74395e41bac0bd35a88 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Wed, 18 May 2016 08:22:14 -0400
Subject: [PATCH 281/347] net: netcp: Add Keystone NetCP QoS driver

This patch comes from:
  git://git.ti.com/processor-sdk/processor-sdk-linux.git

This patch adds a netcp qos driver. This driver
sets up the hooks (txpipes) to the QMSS QoS
interface in NetCP thus providing DiffServ in
Keystone Linux.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
Signed-off-by: Reece R. Pollack <x0183204@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 3fa44118e8d4d43a90cfcbfa30899120afc8a97b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/net/keystone-netcp.txt     |   44 +++
 drivers/net/ethernet/ti/Kconfig                    |   12 +
 drivers/net/ethernet/ti/Makefile                   |    2 +
 drivers/net/ethernet/ti/netcp_qos.c                |  360 ++++++++++++++++++++
 4 files changed, 418 insertions(+), 0 deletions(-)
 create mode 100644 drivers/net/ethernet/ti/netcp_qos.c

diff --git a/Documentation/devicetree/bindings/net/keystone-netcp.txt b/Documentation/devicetree/bindings/net/keystone-netcp.txt
index b95aa1f..d82ad2b 100644
--- a/Documentation/devicetree/bindings/net/keystone-netcp.txt
+++ b/Documentation/devicetree/bindings/net/keystone-netcp.txt
@@ -577,3 +577,47 @@ PA device is provided below.
 			};
 		};
 	};
+
+NETCP Quality of Service (QoS) sub-module specifications
+========================================================
+
+Note: The bindings are experimental and may change while feature development
+is in progress. However attempt will be made to make changes backward
+compatible if possible.
+
+Required properties:
+- label:	Must be "netcp-qos"
+
+- compatible:	Must be "ti,netcp-qos"
+
+- interfaces:	interface specific configuration for QoS
+	-- tx-channel:	the navigator packet dma channel name for tx.
+			this is the channel to which a packet will be
+			dropped into when it comes out from a qostree.
+
+	-- tx-queues:	the subqueues to the QMSS QoS drop scheduler.
+
+NETCP QoS is a netcp device which appears under netcp-devices node.
+Example bindings for NETCP QoS device is as follows:
+
+	netcp-devices {
+
+		<other netcp devices>
+
+		qos@0 {
+			label = "netcp-qos";
+			compatible = "ti,netcp-qos";
+			tx-channel = "nettx";
+
+			interfaces {
+				qos0: interface-0 {
+					tx-queues = <645 8072 8073 8074
+						     8075 8076 8077>;
+				};
+				qos1: interface-1 {
+					tx-queues = <645 6472 6473 6474
+							6475 6476 6477>;
+				};
+			};
+		};
+	};
diff --git a/drivers/net/ethernet/ti/Kconfig b/drivers/net/ethernet/ti/Kconfig
index 4821b9c..1b64a1c 100644
--- a/drivers/net/ethernet/ti/Kconfig
+++ b/drivers/net/ethernet/ti/Kconfig
@@ -135,6 +135,18 @@ config TI_KEYSTONE_NETCP_PA2
           <file:Documentation/arm/keystone/netcp-pa.txt> to know more details
 	  about the driver.
 
+config TI_KEYSTONE_NETCP_QOS
+	depends on TI_KEYSTONE_NETCP
+	tristate "TI Keystone NETCP QOS driver"
+	select KEYSTONE_NAVIGATOR_QMSS_QOS
+	---help---
+
+	  This driver provides Quality of Service support on TI's
+	  Keystone platforms.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called netcp_qos.
+
 config TLAN
 	tristate "TI ThunderLAN support"
 	depends on (PCI || EISA)
diff --git a/drivers/net/ethernet/ti/Makefile b/drivers/net/ethernet/ti/Makefile
index 7ea0bdf..3474251 100644
--- a/drivers/net/ethernet/ti/Makefile
+++ b/drivers/net/ethernet/ti/Makefile
@@ -25,3 +25,5 @@ obj-$(CONFIG_TI_KEYSTONE_NETCP_PA) += keystone_netcp_pa.o
 keystone_netcp_pa-y := netcp_pa.o
 obj-$(CONFIG_TI_KEYSTONE_NETCP_PA2) += keystone_netcp_pa2.o
 keystone_netcp_pa2-y := netcp_pa2.o
+obj-$(CONFIG_TI_KEYSTONE_NETCP_QOS) += keystone_netcp_qos.o
+keystone_netcp_qos-y := netcp_qos.o
diff --git a/drivers/net/ethernet/ti/netcp_qos.c b/drivers/net/ethernet/ti/netcp_qos.c
new file mode 100644
index 0000000..7092adf
--- /dev/null
+++ b/drivers/net/ethernet/ti/netcp_qos.c
@@ -0,0 +1,360 @@
+/*
+ * Copyright (C) 2015 Texas Instruments Incorporated
+ * Authors: Reece Pollack <reece@theptrgroup.com>
+ *	    WingMan Kwok <w-kwok2@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/io.h>
+#include <linux/clk.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/types.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/of_net.h>
+#include <linux/of_address.h>
+#include <linux/spinlock.h>
+#include <linux/dmaengine.h>
+#include <linux/platform_device.h>
+#include <linux/soc/ti/knav_qmss.h>
+#include <linux/soc/ti/knav_dma.h>
+
+#include "netcp.h"
+
+#define QOS_MODULE_NAME		"netcp-qos"
+#define	QOS_TXHOOK_ORDER	20
+
+struct qos_subqueue {
+	struct netcp_tx_pipe	 tx_pipe;
+	struct kobject		 kobj;
+};
+
+struct qos_priv {
+	struct netcp_device		*netcp_device;
+	struct device			*dev;
+	const char			*dma_chan_name;
+	struct kobject			 kobj;
+};
+
+struct qos_intf {
+	struct qos_priv			*qos_priv;
+	struct net_device		*ndev;
+	struct device			*dev;
+	struct kobject			 kobj;
+	int				 max_subqueues;
+	struct qos_subqueue		 subqueues[1];
+	/* NB: tx-subqueues are allocated dynamically */
+};
+
+/* Sysfs stuff related to QoS Subqueues
+ */
+#define kobj_to_subqueue(kobj) container_of(kobj, struct qos_subqueue, kobj)
+
+static ssize_t qos_txqueue_show(struct kobject *kobj,
+				struct kobj_attribute *attr, char *buf)
+{
+	struct qos_subqueue *subq = kobj_to_subqueue(kobj);
+
+	return snprintf(buf, PAGE_SIZE, "%u\n", subq->tx_pipe.dma_queue_id);
+}
+
+struct kobj_attribute qos_txqueue_attr =
+	__ATTR(tx_queue, S_IRUGO, qos_txqueue_show, NULL);
+
+static ssize_t qos_txchan_show(struct kobject *kobj,
+			       struct kobj_attribute *attr, char *buf)
+{
+	struct qos_subqueue *subq = kobj_to_subqueue(kobj);
+
+	return snprintf(buf, PAGE_SIZE, "%s\n", subq->tx_pipe.dma_chan_name);
+}
+
+struct kobj_attribute qos_txchan_attr =
+	__ATTR(tx_channel, S_IRUGO, qos_txchan_show, NULL);
+
+static struct attribute *qos_subqueue_attrs[] = {
+		&qos_txqueue_attr.attr,
+		&qos_txchan_attr.attr,
+		NULL
+};
+
+static struct kobj_type qos_subqueue_ktype = {
+	.sysfs_ops = &kobj_sysfs_ops,
+	.default_attrs = qos_subqueue_attrs,
+};
+
+/* Sysfs stuff related to QoS Interfaces */
+static struct kobj_type qos_intf_ktype = {
+	.sysfs_ops = &kobj_sysfs_ops,
+};
+
+static struct kobj_type qos_inst_ktype = {
+	.sysfs_ops = &kobj_sysfs_ops,
+};
+
+static int qos_tx_hook(int order, void *data, struct netcp_packet *p_info)
+{
+	struct qos_intf *qos_intf = data;
+	struct sk_buff *skb = p_info->skb;
+	u16 queue_mapping = skb_get_queue_mapping(skb);
+
+	dev_dbg(qos_intf->dev, "priority: %u, queue_mapping: %04x\n",
+		skb->priority, queue_mapping);
+
+	if ((queue_mapping < qos_intf->max_subqueues) &&
+	    qos_intf->subqueues[queue_mapping].tx_pipe.dma_queue)
+		p_info->tx_pipe = &qos_intf->subqueues[queue_mapping].tx_pipe;
+	else {
+		dev_warn(qos_intf->dev,
+			 "queue mapping %hu invalid, QoS bypassed\n",
+			 queue_mapping);
+	}
+
+	return 0;
+}
+
+static int qos_close(void *intf_priv, struct net_device *ndev)
+{
+	struct qos_intf *qos_intf = intf_priv;
+	struct netcp_intf *netcp_intf = netdev_priv(ndev);
+	int i;
+
+	netcp_unregister_txhook(netcp_intf, QOS_TXHOOK_ORDER, qos_tx_hook,
+				qos_intf);
+
+	for (i = 0; i < qos_intf->max_subqueues; ++i) {
+		struct qos_subqueue *subq = &qos_intf->subqueues[i];
+
+		if (subq->tx_pipe.dma_chan_name)
+			netcp_txpipe_close(&subq->tx_pipe);
+	}
+
+	return 0;
+}
+
+static int qos_open(void *intf_priv, struct net_device *ndev)
+{
+	struct qos_intf *qos_intf = intf_priv;
+	struct netcp_intf *netcp_intf = netdev_priv(ndev);
+	int ret;
+	int i;
+
+	/* Open the QoS input queues */
+	for (i = 0; i < qos_intf->max_subqueues; ++i) {
+		struct qos_subqueue *subq = &qos_intf->subqueues[i];
+
+		if (subq->tx_pipe.dma_chan_name) {
+			ret = netcp_txpipe_open(&subq->tx_pipe);
+			if (ret)
+				goto fail;
+		}
+	}
+
+	netcp_register_txhook(netcp_intf, QOS_TXHOOK_ORDER,
+			      qos_tx_hook, qos_intf);
+	return 0;
+
+fail:
+	qos_close(intf_priv, ndev);
+	return ret;
+}
+
+static int init_tx_subqueue(struct qos_intf *qos_intf, int index,
+			    unsigned int tx_queue_id)
+{
+	struct netcp_intf *netcp = netdev_priv(qos_intf->ndev);
+	struct qos_subqueue *subq = &qos_intf->subqueues[index];
+	u8 name[32];
+	int ret;
+
+	netcp_txpipe_init(&subq->tx_pipe, netcp->netcp_device,
+			  qos_intf->qos_priv->dma_chan_name, tx_queue_id);
+
+	/* Create the per-subqueue entry and attributes */
+	snprintf(name, sizeof(name), "subqueue-%d", index);
+	ret = kobject_init_and_add(&subq->kobj, &qos_subqueue_ktype,
+				   kobject_get(&qos_intf->kobj), name);
+	if (ret) {
+		dev_err(qos_intf->dev,
+			"failed to create %s/%s/%s sysfs entry\n",
+			qos_intf->qos_priv->kobj.name, qos_intf->kobj.name,
+			name);
+		kobject_put(&subq->kobj);
+		kobject_put(&qos_intf->kobj);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int qos_attach(void *inst_priv, struct net_device *ndev,
+		      struct device_node *node, void **intf_priv)
+{
+	struct netcp_intf *netcp = netdev_priv(ndev);
+	struct qos_priv *qos_priv = inst_priv;
+	struct qos_intf *qos_intf;
+	int temp[NETCP_MAX_SUBQUEUES], size, ret, tx_queues, i;
+
+	tx_queues = netcp->ndev->num_tx_queues;
+	size = sizeof(struct qos_intf) +
+			((tx_queues - 1) * sizeof(struct qos_subqueue));
+	qos_intf = devm_kzalloc(qos_priv->dev, size, GFP_KERNEL);
+	if (!qos_intf) {
+		dev_err(qos_priv->dev,
+			"qos interface memory allocation failed\n");
+		return -ENOMEM;
+	}
+	qos_intf->max_subqueues = tx_queues;
+
+	qos_intf->qos_priv = qos_priv;
+	qos_intf->ndev = ndev;
+	qos_intf->dev = qos_priv->dev;
+	*intf_priv = qos_intf;
+
+	/* Create the per-interface sysfs entry */
+	ret = kobject_init_and_add(&qos_intf->kobj, &qos_intf_ktype,
+				   kobject_get(&qos_intf->qos_priv->kobj),
+				   node->name);
+	if (ret) {
+		dev_err(qos_intf->dev, "failed to create %s/%s sysfs entry\n",
+			qos_intf->qos_priv->kobj.name, node->name);
+		kobject_put(&qos_intf->kobj);
+		kobject_put(&qos_intf->qos_priv->kobj);
+		goto exit;
+	}
+
+	if (!of_get_property(node, "tx-queues", &tx_queues)) {
+		dev_err(qos_priv->dev, "missing \"tx-queues\" parameter\n");
+		return -ENODEV;
+	}
+
+	/* makes sure queues defined not exceeding intf can support */
+	tx_queues = min(tx_queues, qos_intf->max_subqueues);
+
+	ret = of_property_read_u32_array(node, "tx-queues", temp, tx_queues);
+	if (ret < 0) {
+		dev_err(qos_priv->dev, "error in \"tx-queues\" parameter\n");
+		tx_queues = 1;
+	}
+
+	for (i = 0; i < tx_queues; i++) {
+		if (temp[i] < 0) {
+			dev_dbg(qos_intf->dev,
+				"no tx-queue defined for mapping %d\n", i);
+			continue;
+		}
+
+		dev_dbg(qos_intf->dev, "mapping %d as %d\n", temp[i], i);
+
+		ret = init_tx_subqueue(qos_intf, i, temp[i]);
+		if (ret) {
+			dev_err(qos_intf->dev,
+				"failed to initialize subqueue %d\n", temp[i]);
+			goto exit;
+		}
+	}
+
+	return 0;
+exit:
+	devm_kfree(qos_priv->dev, qos_intf);
+	return ret;
+}
+
+static int qos_release(void *intf_priv)
+{
+	struct qos_intf *qos_intf = intf_priv;
+
+	devm_kfree(qos_intf->dev, qos_intf);
+	return 0;
+}
+
+static int qos_remove(struct netcp_device *netcp_device, void *inst_priv)
+{
+	struct qos_priv *qos_priv = inst_priv;
+
+	devm_kfree(qos_priv->dev, qos_priv);
+	return 0;
+}
+
+static int qos_probe(struct netcp_device *netcp_device, struct device *dev,
+		     struct device_node *node, void **inst_priv)
+{
+	struct qos_priv *qos_priv;
+	int ret = 0;
+
+	if (!node) {
+		dev_err(dev, "device tree info unavailable\n");
+		return -ENODEV;
+	}
+
+	qos_priv = devm_kzalloc(dev, sizeof(struct qos_priv), GFP_KERNEL);
+	if (!qos_priv)
+		return -ENOMEM;
+
+	*inst_priv = qos_priv;
+
+	qos_priv->netcp_device = netcp_device;
+	qos_priv->dev = dev;
+
+	ret = of_property_read_string(node, "tx-channel",
+				      &qos_priv->dma_chan_name);
+	if (ret < 0) {
+		dev_err(dev, "missing \"tx-channel\" parameter\n");
+		ret = -ENODEV;
+		goto exit;
+	}
+
+	/* Create the per-instance sysfs entry */
+	ret = kobject_init_and_add(&qos_priv->kobj, &qos_inst_ktype,
+				   kobject_get(&dev->kobj), node->name);
+	if (ret) {
+		dev_err(dev, "failed to create %s sysfs entry\n",
+			node->name);
+		kobject_put(&qos_priv->kobj);
+		kobject_put(&dev->kobj);
+		goto exit;
+	}
+
+	return 0;
+
+exit:
+	qos_remove(netcp_device, qos_priv);
+	*inst_priv = NULL;
+	return ret;
+}
+
+static struct netcp_module qos_module = {
+	.name		= QOS_MODULE_NAME,
+	.owner		= THIS_MODULE,
+	.probe		= qos_probe,
+	.open		= qos_open,
+	.close		= qos_close,
+	.remove		= qos_remove,
+	.attach		= qos_attach,
+	.release	= qos_release,
+};
+
+static int __init keystone_qos_init(void)
+{
+	return netcp_register_module(&qos_module);
+}
+module_init(keystone_qos_init);
+
+static void __exit keystone_qos_exit(void)
+{
+	netcp_unregister_module(&qos_module);
+}
+module_exit(keystone_qos_exit);
+
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Reece Pollack <reece@theptrgroup.com>");
+MODULE_DESCRIPTION("Quality of Service driver for Keystone devices");
-- 
1.7.5.4

