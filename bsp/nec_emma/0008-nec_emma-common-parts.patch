From 95974a4a915cf051b7721eeece4a354116451561 Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Tue, 28 Apr 2009 14:24:29 +0900
Subject: [PATCH] nec_emma: common parts

Introduce arch/mips/emma/common/ and include/asm-mips/emma/ sub-dirs
to put common interrupt routines, header files and so on, which can be
shared across all EMMA devices.

Arch/mips/emma/Kconfig file is also prepared in which we'll consolidate
EMMA specific kernel configurations.  It has EMMA3P and EMMA3PF configs
as a first reference.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 arch/mips/Kconfig               |    1 +
 arch/mips/emma/Kconfig          |   48 ++++++++++++++++++
 arch/mips/emma/common/Makefile  |   11 ++++
 arch/mips/emma/common/bhif.c    |  103 +++++++++++++++++++++++++++++++++++++++
 arch/mips/emma/common/gpio.c    |   71 +++++++++++++++++++++++++++
 arch/mips/emma/common/irq.c     |   54 ++++++++++++++++++++
 arch/mips/emma/common/prom.c    |   51 +++++++++++++++++++
 include/asm-mips/emma/bhif.h    |   14 +++++
 include/asm-mips/emma/emmaxxx.h |   85 ++++++++++++++++++++++++++++++++
 include/asm-mips/emma/gpio.h    |   13 +++++
 include/asm-mips/emma/irq.h     |   15 ++++++
 include/asm-mips/emma/prom.h    |   13 +++++
 12 files changed, 479 insertions(+), 0 deletions(-)
 create mode 100644 arch/mips/emma/Kconfig
 create mode 100644 arch/mips/emma/common/Makefile
 create mode 100644 arch/mips/emma/common/bhif.c
 create mode 100644 arch/mips/emma/common/gpio.c
 create mode 100644 arch/mips/emma/common/irq.c
 create mode 100644 arch/mips/emma/common/prom.c
 create mode 100644 include/asm-mips/emma/bhif.h
 create mode 100644 include/asm-mips/emma/emmaxxx.h
 create mode 100644 include/asm-mips/emma/gpio.h
 create mode 100644 include/asm-mips/emma/irq.h
 create mode 100644 include/asm-mips/emma/prom.h

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 2ca8539..8b5c2be 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -604,6 +604,7 @@ endchoice
 
 source "arch/mips/au1000/Kconfig"
 source "arch/mips/basler/excite/Kconfig"
+source "arch/mips/emma/Kconfig"
 source "arch/mips/jazz/Kconfig"
 source "arch/mips/lasat/Kconfig"
 source "arch/mips/pmc-sierra/Kconfig"
diff --git a/arch/mips/emma/Kconfig b/arch/mips/emma/Kconfig
new file mode 100644
index 0000000..673fa50
--- /dev/null
+++ b/arch/mips/emma/Kconfig
@@ -0,0 +1,48 @@
+config EMMA_SUBCPU
+	bool
+	default y if SOC_EMMA3P && CPU_MIPS32_R2
+	default y if SOC_EMMA3PF && CPU_MIPS32_R2
+
+config SOC_EMMA3P
+	bool
+	select EMMA_HAS_I2C
+	select EMMA_HAS_NEC_CANDY
+	select EMMA_HAS_SATA
+	select SOC_EMMA
+	select SYS_HAS_CPU_MIPS32_R2
+	select SYS_HAS_CPU_SS1000
+
+config SOC_EMMA3PF
+	bool
+	select EMMA_HAS_I2C
+	select EMMA_HAS_NEC_CANDY
+	select EMMA_HAS_SATA
+	select EMMA_HAS_USB_EHCI
+	select EMMA_HAS_USB_OHCI
+	select SOC_EMMA
+	select SYS_HAS_CPU_MIPS32_R2
+	select SYS_HAS_CPU_SS1000
+
+config SOC_EMMA
+	bool
+	select CEVT_R4K
+	select CSRC_R4K
+	select DMA_NONCOHERENT
+	select IRQ_CPU
+	select SYS_SUPPORTS_32BIT_KERNEL
+	select SYS_SUPPORTS_BIG_ENDIAN
+
+config EMMA_HAS_I2C
+	bool
+
+config EMMA_HAS_NEC_CANDY
+	bool
+
+config EMMA_HAS_SATA
+	bool
+
+config EMMA_HAS_USB_EHCI
+	bool
+
+config EMMA_HAS_USB_OHCI
+	bool
diff --git a/arch/mips/emma/common/Makefile b/arch/mips/emma/common/Makefile
new file mode 100644
index 0000000..8509c76
--- /dev/null
+++ b/arch/mips/emma/common/Makefile
@@ -0,0 +1,11 @@
+#
+#  Makefile for the NEC EMMAXXX common code
+#
+#  Copyright (C) NEC Electronics Corporation 2005-2009
+#
+#  This file is subject to the terms and conditions of the GNU General Public
+#  License.  See the file "COPYING" in the main directory of this archive
+#  for more details.
+#
+
+obj-y		:= bhif.o gpio.o irq.o prom.o
diff --git a/arch/mips/emma/common/bhif.c b/arch/mips/emma/common/bhif.c
new file mode 100644
index 0000000..590dcfa
--- /dev/null
+++ b/arch/mips/emma/common/bhif.c
@@ -0,0 +1,103 @@
+/*
+ * BHIF: Host I/F block - bootstrap, bus arbiter, interrupt controller, etc.
+ *
+ * Copyright (C) NEC Electronics Corporation 2009
+ * Copyright (C) 2008, 2009  Shinya Kuribayashi
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#include <linux/init.h>
+#include <linux/irq.h>
+
+#include <asm/emma/emmaxxx.h>
+#include <asm/emma/bhif.h>
+
+static void bhif_irq_unmask(unsigned int irq)
+{
+	u32 offset;
+	u32 value;
+
+	irq -= EMMA_IRQ_BASE;
+
+	offset = EMMA_BHIF_INT_EN_0 +
+		 (EMMA_BHIF_INT_EN_1 - EMMA_BHIF_INT_EN_0) * (irq / 32);
+	value = emma_in32(offset);
+	value |= 1UL << (irq % 32);
+	emma_out32(offset, value);
+}
+
+static void bhif_irq_mask(unsigned int irq)
+{
+	u32 offset;
+	u32 value;
+
+	irq -= EMMA_IRQ_BASE;
+
+	offset = EMMA_BHIF_INT_EN_0 +
+		 (EMMA_BHIF_INT_EN_1 - EMMA_BHIF_INT_EN_0) * (irq / 32);
+	value = emma_in32(offset);
+	value &= ~(1UL << (irq % 32));
+	emma_out32(offset, value);
+}
+
+struct irq_chip bhif_irq_controller = {
+	.name		= "BHIF",
+	.mask		= bhif_irq_mask,
+	.mask_ack	= bhif_irq_mask,
+	.unmask		= bhif_irq_unmask
+};
+
+void __init bhif_irq_init(void)
+{
+	unsigned int i;
+
+	for (i = 0; i < NUM_EMMA_IRQ; i++)
+		set_irq_chip_and_handler_name(EMMA_IRQ_BASE + i,
+					      &bhif_irq_controller,
+					      handle_level_irq, "level");
+}
+
+#ifdef EMMA_SW_CASCADE
+
+static void bhif_sw_irq_unmask(unsigned int irq)
+{
+	u32 value;
+
+	irq -= EMMA_SW_IRQ_BASE;
+
+	value = emma_in32(EMMA_BHIF_SW_INT_EN);
+	value |= 1UL << irq;
+	emma_out32(EMMA_BHIF_SW_INT_EN, value);
+}
+
+static void bhif_sw_irq_mask(unsigned int irq)
+{
+	u32 value;
+
+	irq -= EMMA_SW_IRQ_BASE;
+
+	value = emma_in32(EMMA_BHIF_SW_INT_EN);
+	value &= ~(1UL << irq);
+	emma_out32(EMMA_BHIF_SW_INT_EN, value);
+}
+
+struct irq_chip bhif_sw_irq_controller = {
+	.name		= "BHIF-SW",
+	.mask		= bhif_sw_irq_mask,
+	.mask_ack	= bhif_sw_irq_mask,
+	.unmask		= bhif_sw_irq_unmask,
+};
+
+void __init bhif_sw_irq_init(void)
+{
+	unsigned int i;
+
+	for (i = 0; i < NUM_EMMA_IRQ_SW; i++)
+		set_irq_chip_and_handler_name(EMMA_SW_IRQ_BASE + i,
+					      &bhif_sw_irq_controller,
+					      handle_level_irq, "level");
+}
+
+#endif /* EMMA_SW_CASCADE */
diff --git a/arch/mips/emma/common/gpio.c b/arch/mips/emma/common/gpio.c
new file mode 100644
index 0000000..3b4896c
--- /dev/null
+++ b/arch/mips/emma/common/gpio.c
@@ -0,0 +1,71 @@
+/*
+ * GPIO: General purpose I/O -  programmable I/O ports, interrupt generation
+ *
+ * Copyright (C) NEC Electronics Corporation 2009
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#include <linux/init.h>
+#include <linux/irq.h>
+
+#include <asm/emma/emmaxxx.h>
+#include <asm/emma/gpio.h>
+
+#ifdef CONFIG_HW_HAS_PCI
+
+static void gpio_irq_unmask(unsigned int irq)
+{
+	u32 offset;
+	u32 value;
+
+	irq -= EMMA_GPIO_IRQ_BASE;
+
+	offset = EMMA_GPIO_INT_MASK + EMMA_GPIO_INT_MASK_OFFSET * (irq / 32);
+	value = emma_in32(offset);
+	value |= 1UL << (irq % 32);
+	emma_out32(offset, value);
+}
+
+static void gpio_irq_mask(unsigned int irq)
+{
+	u32 offset;
+	u32 value;
+
+	irq -= EMMA_GPIO_IRQ_BASE;
+
+	offset = EMMA_GPIO_INT_MASK + EMMA_GPIO_INT_MASK_OFFSET * (irq / 32);
+	value = emma_in32(offset);
+	value &= ~(1UL << (irq % 32));
+	emma_out32(offset, value);
+}
+
+static void gpio_irq_ack(unsigned int irq)
+{
+	u32 offset;
+
+	irq -= EMMA_GPIO_IRQ_BASE;
+
+	offset = EMMA_GPIO_INT_ST + EMMA_GPIO_INT_ST_OFFSET * (irq / 32);
+	emma_out32(offset, ~(1UL << (irq % 32)));
+}
+
+struct irq_chip gpio_irq_controller = {
+	.name		= "GPIO",
+	.ack		= gpio_irq_ack,
+	.mask		= gpio_irq_mask,
+	.unmask		= gpio_irq_unmask,
+};
+
+void __init gpio_irq_init(void)
+{
+	unsigned int i;
+
+	for (i = 0; i < NUM_EMMA_IRQ_GPIO; i++)
+		set_irq_chip_and_handler_name(EMMA_GPIO_IRQ_BASE + i,
+					      &gpio_irq_controller,
+					      handle_edge_irq, "edge");
+}
+
+#endif /* CONFIG_HW_HAS_PCI */
diff --git a/arch/mips/emma/common/irq.c b/arch/mips/emma/common/irq.c
new file mode 100644
index 0000000..77045a2
--- /dev/null
+++ b/arch/mips/emma/common/irq.c
@@ -0,0 +1,54 @@
+/*
+ *  arch/mips/emma/common/irq.c
+ *      This file is common irq dispatcher.
+ *
+ *  Copyright (C) NEC Electronics Corporation 2005-2009
+ *
+ *  This file is based on the arch/mips/ddb5xxx/ddb5477/irq.c
+ *
+ *  Changes:
+ *		Wind River Systems, Inc.
+ *		- Ported to Linux 2.6.21 by Jack Tan <jack.tan@windriver.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+
+#include <asm/mipsregs.h>
+#include <asm/emma/irq.h>
+
+struct irqaction irq_cascade = {
+	.handler	= no_action,
+	.mask		= CPU_MASK_NONE,
+	.name		= "cascade",
+};
+
+asmlinkage void plat_irq_dispatch(void)
+{
+	unsigned int pending = read_c0_status() & read_c0_cause() & ST0_IM;
+
+	if (pending & STATUSF_IP7)
+		do_IRQ(MIPS_CPU_IRQ_BASE + 7);
+	else if (pending & STATUSF_IP2)
+		emma_irq_dispatch();
+	else if (pending & STATUSF_IP1)
+		do_IRQ(MIPS_CPU_IRQ_BASE + 1);
+	else if (pending & STATUSF_IP0)
+		do_IRQ(MIPS_CPU_IRQ_BASE + 0);
+	else
+		spurious_interrupt();
+}
diff --git a/arch/mips/emma/common/prom.c b/arch/mips/emma/common/prom.c
new file mode 100644
index 0000000..780a45b
--- /dev/null
+++ b/arch/mips/emma/common/prom.c
@@ -0,0 +1,51 @@
+/*
+ *  arch/mips/emma/common/prom.c
+ *      This file is prom file.
+ *
+ *  Copyright (C) NEC Electronics Corporation 2004-2007
+ *
+ *  This file is based on the arch/mips/ddb5xxx/common/prom.c
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#include <linux/init.h>
+#include <linux/string.h>
+
+#include <asm/bootinfo.h>
+
+/* [jsun@junsun.net] PMON passes arguments in C main() style */
+void __init prom_init_cmdline(void)
+{
+	int argc = fw_arg0;
+	char **arg = (char **)fw_arg1;
+	int i;
+
+	/* if user passes kernel args, ignore the default one */
+	if (argc > 1)
+		arcs_cmdline[0] = '\0';
+
+	/* arg[0] is "g", the rest is boot parameters */
+	for (i = 1; i < argc; i++) {
+		if (strlen(arcs_cmdline) + strlen(arg[i] + 1)
+		    >= sizeof(arcs_cmdline))
+			break;
+		strcat(arcs_cmdline, arg[i]);
+		strcat(arcs_cmdline, " ");
+	}
+}
+
+void __init prom_free_prom_memory(void)
+{
+}
diff --git a/include/asm-mips/emma/bhif.h b/include/asm-mips/emma/bhif.h
new file mode 100644
index 0000000..53442b6
--- /dev/null
+++ b/include/asm-mips/emma/bhif.h
@@ -0,0 +1,14 @@
+/*
+ * Copyright (C) NEC Electronics Corporation 2009
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#ifndef _ASM_EMMA_BHIF_H
+#define _ASM_EMMA_BHIF_H
+
+extern void bhif_irq_init(void);
+extern void bhif_sw_irq_init(void);
+
+#endif /* _ASM_EMMA_BHIF_H */
diff --git a/include/asm-mips/emma/emmaxxx.h b/include/asm-mips/emma/emmaxxx.h
new file mode 100644
index 0000000..052c442
--- /dev/null
+++ b/include/asm-mips/emma/emmaxxx.h
@@ -0,0 +1,85 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) NEC Electronics Corporation 2009
+ */
+#ifndef _ASM_EMMA_EMMAXXX_H
+#define _ASM_EMMA_EMMAXXX_H
+
+#ifdef CONFIG_SOC_EMMA3P
+#include <asm/emma/emma3p.h>
+#endif
+#ifdef CONFIG_SOC_EMMA3PF
+#include <asm/emma/emma3pf.h>
+#endif
+
+/* Processor-dependent register abstraction */
+#ifdef CONFIG_EMMA_SUBCPU
+#undef EMMA_BHIF_INT_ST_0
+#undef EMMA_BHIF_INT_ST_1
+#undef EMMA_BHIF_INT_ST_2
+#undef EMMA_BHIF_INT_EN_0
+#undef EMMA_BHIF_INT_EN_1
+#undef EMMA_BHIF_INT_EN_2
+#undef EMMA_GPIO_INT_MASK
+#define EMMA_BHIF_INT_ST_0	EMMA_BHIF_SUB_INT_ST_0
+#define EMMA_BHIF_INT_ST_1	EMMA_BHIF_SUB_INT_ST_1
+#define EMMA_BHIF_INT_ST_2	EMMA_BHIF_SUB_INT_ST_2
+#define EMMA_BHIF_INT_EN_0	EMMA_BHIF_SUB_INT_EN_0
+#define EMMA_BHIF_INT_EN_1	EMMA_BHIF_SUB_INT_EN_1
+#define EMMA_BHIF_INT_EN_2	EMMA_BHIF_SUB_INT_EN_2
+#define EMMA_GPIO_INT_MASK	EMMA_GPIO_SUB_INT_MASK
+#endif /* CONFIG_EMMA_SUBCPU */
+
+#ifndef __ASSEMBLY__
+
+#define EMMA_BASE 		(0xa0000000)
+
+static inline void emma_sync(void)
+{
+	volatile u32 *p = (volatile u32 *)0xb0000000;
+	(void)(*p);
+	__asm__ __volatile__("sync");
+}
+
+static inline void emma_out32(u32 offset, u32 val)
+{
+	*(volatile u32 *)(EMMA_BASE | offset) = val;
+	emma_sync();
+}
+
+static inline u32 emma_in32(u32 offset)
+{
+	u32 val = *(volatile u32 *)(EMMA_BASE | offset);
+	return val;
+}
+
+static inline void emma_out16(u32 offset, u16 val)
+{
+	*(volatile u16 *)(EMMA_BASE | offset) = val;
+	emma_sync();
+}
+
+static inline u16 emma_in16(u32 offset)
+{
+	u16 val = *(volatile u16 *)(EMMA_BASE | offset);
+	return val;
+}
+
+static inline void emma_out8(u32 offset, u8 val)
+{
+	*(volatile u8 *)(EMMA_BASE | offset) = val;
+	emma_sync();
+}
+
+static inline u8 emma_in8(u32 offset)
+{
+	u8 val = *(volatile u8 *)(EMMA_BASE | offset);
+	return val;
+}
+
+#endif /* __ASSEMBLY__ */
+
+#endif /* _ASM_EMMA_EMMAXXX_H */
diff --git a/include/asm-mips/emma/gpio.h b/include/asm-mips/emma/gpio.h
new file mode 100644
index 0000000..778f708
--- /dev/null
+++ b/include/asm-mips/emma/gpio.h
@@ -0,0 +1,13 @@
+/*
+ * Copyright (C) NEC Electronics Corporation 2009
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#ifndef _ASM_EMMA_GPIO_H
+#define _ASM_EMMA_GPIO_H
+
+extern void gpio_irq_init(void);
+
+#endif /* _ASM_EMMA_GPIO_H */
diff --git a/include/asm-mips/emma/irq.h b/include/asm-mips/emma/irq.h
new file mode 100644
index 0000000..fa44d9c
--- /dev/null
+++ b/include/asm-mips/emma/irq.h
@@ -0,0 +1,15 @@
+/*
+ * Copyright (C) NEC Electronics Corporation 2009
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#ifndef _ASM_EMMA_IRQ_H
+#define _ASM_EMMA_IRQ_H
+
+extern struct irqaction irq_cascade;
+
+extern void emma_irq_dispatch(void);
+
+#endif /* _ASM_EMMA_IRQ_H */
diff --git a/include/asm-mips/emma/prom.h b/include/asm-mips/emma/prom.h
new file mode 100644
index 0000000..10408af
--- /dev/null
+++ b/include/asm-mips/emma/prom.h
@@ -0,0 +1,13 @@
+/*
+ * Copyright (C) NEC Electronics Corporation 2009
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+#ifndef _ASM_EMMA_PROM_H
+#define _ASM_EMMA_PROM_H
+
+extern void prom_init_cmdline(void);
+
+#endif /* _ASM_EMMA_PROM_H */
-- 
1.6.0.4

