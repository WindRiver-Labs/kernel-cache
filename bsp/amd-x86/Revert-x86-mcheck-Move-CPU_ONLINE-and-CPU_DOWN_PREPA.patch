From d70b2637f36f623465facdf364bd9f23262351bf Mon Sep 17 00:00:00 2001
From: Liwei Song <liwei.song@windriver.com>
Date: Thu, 20 Sep 2018 03:09:27 +0000
Subject: [PATCH 2/3] Revert "x86/mcheck: Move CPU_ONLINE and CPU_DOWN_PREPARE
 to hotplug state machine"

This reverts commit a463a725e7e4a1a5045faf6102e4096805516bd3.
"x86/mcheck: Move CPU_ONLINE and CPU_DOWN_PREPARE to hotplug state machine"

Since RT kernel has change to use hrtimer, so these series patch
was not suitable for RT kernel, for revert them to aviod compile
error on preempt-rt kernel.

Signed-off-by: Liwei Song <liwei.song@windriver.com>
---
 arch/x86/kernel/cpu/mcheck/mce.c |   76 ++++++++++++++++++++------------------
 1 file changed, 40 insertions(+), 36 deletions(-)

diff --git a/arch/x86/kernel/cpu/mcheck/mce.c b/arch/x86/kernel/cpu/mcheck/mce.c
index 023d1d1..ab775a2 100644
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@ -2557,6 +2557,18 @@ mce_cpu_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)
 	unsigned int cpu = (unsigned long)hcpu;
 
 	switch (action & ~CPU_TASKS_FROZEN) {
+	case CPU_ONLINE:
+	case CPU_DOWN_FAILED:
+
+		mce_device_create(cpu);
+
+		if (mce_threshold_create_device(cpu)) {
+			mce_device_remove(cpu);
+			return NOTIFY_BAD;
+		}
+		mce_reenable_cpu();
+		mce_start_timer(cpu, t);
+		break;
 	case CPU_DEAD:
 		mce_intel_hcpu_update(cpu);
 
@@ -2565,41 +2577,16 @@ mce_cpu_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)
 			cmci_rediscover();
 		break;
 	case CPU_DOWN_PREPARE:
+		mce_disable_cpu();
 
+		mce_threshold_remove_device(cpu);
+		mce_device_remove(cpu);
 		break;
 	}
 
 	return NOTIFY_OK;
 }
 
-static int mce_cpu_online(unsigned int cpu)
-{
-	struct timer_list *t = &per_cpu(mce_timer, cpu);
-	int ret;
-
-	mce_device_create(cpu);
-
-	ret = mce_threshold_create_device(cpu);
-	if (ret) {
-		mce_device_remove(cpu);
-		return ret;
-	}
-	mce_reenable_cpu();
-	mce_start_timer(cpu, t);
-	return 0;
-}
-
-static int mce_cpu_pre_down(unsigned int cpu)
-{
-	struct timer_list *t = &per_cpu(mce_timer, cpu);
-
-	mce_disable_cpu();
-	del_timer_sync(t);
-	mce_threshold_remove_device(cpu);
-	mce_device_remove(cpu);
-	return 0;
-}
-
 static struct notifier_block mce_cpu_notifier = {
 	.notifier_call = mce_cpu_callback,
 };
@@ -2624,8 +2611,8 @@ static __init void mce_init_banks(void)
 
 static __init int mcheck_init_device(void)
 {
-	enum cpuhp_state hp_online;
 	int err;
+	int i = 0;
 
 	if (!mce_available(&boot_cpu_data)) {
 		err = -EIO;
@@ -2647,13 +2634,21 @@ static __init int mcheck_init_device(void)
 	if (err)
 		goto err_out_mem;
 
-	err = cpuhp_setup_state(CPUHP_AP_ONLINE_DYN, "x86/mce:online",
-				mce_cpu_online, mce_cpu_pre_down);
-	if (err < 0)
-		goto err_out_mem;
-	hp_online = err;
-
 	cpu_notifier_register_begin();
+	for_each_online_cpu(i) {
+		err = mce_device_create(i);
+		if (err) {
+			/*
+			 * Register notifier anyway (and do not unreg it) so
+			 * that we don't leave undeleted timers, see notifier
+			 * callback above.
+			 */
+			__register_hotcpu_notifier(&mce_cpu_notifier);
+			cpu_notifier_register_done();
+			goto err_device_create;
+		}
+	}
+
 	__register_hotcpu_notifier(&mce_cpu_notifier);
 	cpu_notifier_register_done();
 
@@ -2668,7 +2663,16 @@ static __init int mcheck_init_device(void)
 
 err_register:
 	unregister_syscore_ops(&mce_syscore_ops);
-	cpuhp_remove_state(hp_online);
+
+err_device_create:
+	/*
+	 * We didn't keep track of which devices were created above, but
+	 * even if we had, the set of online cpus might have changed.
+	 * Play safe and remove for every possible cpu, since
+	 * mce_device_remove() will do the right thing.
+	 */
+	for_each_possible_cpu(i)
+		mce_device_remove(i);
 
 err_out_mem:
 	free_cpumask_var(mce_device_initialized);
-- 
1.7.9.5

