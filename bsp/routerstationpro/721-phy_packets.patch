From 936e553e91d69715c6778849ea3409f583e927b8 Mon Sep 17 00:00:00 2001
From: nbd <nbd@3c298f89-4303-0410-b956-a3cf2f4a3e73>
Date: Tue, 17 Jul 2012 11:35:06 -0400
Subject: [PATCH 025/123] 721-phy_packets

Import of the above patch from openwrt trunk, as of this commit:

 ----------
commit c1d79f64eed0a7ac36b5b9bca52275b397bec424
Author: nbd <nbd@3c298f89-4303-0410-b956-a3cf2f4a3e73>
Date:   Mon Jul 16 16:26:51 2012 +0000

    uboot-ar71xx: fix compile on recent mac os x versions

    git-svn-id: svn://svn.openwrt.org/openwrt/trunk@32750 3c298f89-4303-0410-b956-a3cf2f4a3e73
 ----------

Path to patch in the repo is: target/linux/generic/patches-3.3
Repo is: git://nbd.name/openwrt.git

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/linux/if.h        |    1 +
 include/linux/netdevice.h |    8 ++++++++
 include/linux/skbuff.h    |   14 ++++----------
 net/Kconfig               |    6 ++++++
 net/core/dev.c            |   32 ++++++++++++++++++++++++++------
 net/core/skbuff.c         |   17 +++++++++++++++++
 net/ethernet/eth.c        |    6 ++++++
 7 files changed, 68 insertions(+), 16 deletions(-)

diff --git a/include/linux/if.h b/include/linux/if.h
index f995c66..99bd777 100644
--- a/include/linux/if.h
+++ b/include/linux/if.h
@@ -81,6 +81,7 @@
 #define IFF_UNICAST_FLT	0x20000		/* Supports unicast filtering	*/
 #define IFF_TEAM_PORT	0x40000		/* device used as team port */
 #define IFF_SUPP_NOFCS	0x80000		/* device supports sending custom FCS */
+#define IFF_NO_IP_ALIGN	0x100000	/* do not ip-align allocated rx pkts */
 
 
 #define IF_GET_IFACE	0x0001		/* for querying only */
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 33900a5..879d8db 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1079,6 +1079,11 @@ struct net_device {
 	const struct net_device_ops *netdev_ops;
 	const struct ethtool_ops *ethtool_ops;
 
+#ifdef CONFIG_ETHERNET_PACKET_MANGLE
+	void (*eth_mangle_rx)(struct net_device *dev, struct sk_buff *skb);
+	struct sk_buff *(*eth_mangle_tx)(struct net_device *dev, struct sk_buff *skb);
+#endif
+
 	/* Hardware header description */
 	const struct header_ops *header_ops;
 
@@ -1136,6 +1141,9 @@ struct net_device {
 	void			*ax25_ptr;	/* AX.25 specific data */
 	struct wireless_dev	*ieee80211_ptr;	/* IEEE 802.11 specific data,
 						   assign before registering */
+#ifdef CONFIG_ETHERNET_PACKET_MANGLE
+	void			*phy_ptr; /* PHY device specific data */
+#endif
 
 /*
  * Cache lines mostly used on receive path (including eth_type_trans())
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 111f26b..6ea1851 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -1690,6 +1690,10 @@ extern struct sk_buff *dev_alloc_skb(unsigned int length);
 extern struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
 		unsigned int length, gfp_t gfp_mask);
 
+extern struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,
+		unsigned int length, gfp_t gfp);
+
+
 /**
  *	netdev_alloc_skb - allocate an skbuff for rx on a specific device
  *	@dev: network device to receive on
@@ -1709,16 +1713,6 @@ static inline struct sk_buff *netdev_alloc_skb(struct net_device *dev,
 	return __netdev_alloc_skb(dev, length, GFP_ATOMIC);
 }
 
-static inline struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,
-		unsigned int length, gfp_t gfp)
-{
-	struct sk_buff *skb = __netdev_alloc_skb(dev, length + NET_IP_ALIGN, gfp);
-
-	if (NET_IP_ALIGN && skb)
-		skb_reserve(skb, NET_IP_ALIGN);
-	return skb;
-}
-
 static inline struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev,
 		unsigned int length)
 {
diff --git a/net/Kconfig b/net/Kconfig
index e07272d..b3904e8 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -23,6 +23,12 @@ menuconfig NET
 
 if NET
 
+config ETHERNET_PACKET_MANGLE
+	bool
+	help
+	  This option can be selected by phy drivers that need to mangle
+	  packets going in or out of an ethernet device.
+
 config WANT_COMPAT_NETLINK_MESSAGES
 	bool
 	help
diff --git a/net/core/dev.c b/net/core/dev.c
index 99e1d75..47c8660 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2231,9 +2231,19 @@ int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
 			}
 		}
 
-		skb_len = skb->len;
-		rc = ops->ndo_start_xmit(skb, dev);
-		trace_net_dev_xmit(skb, rc, dev, skb_len);
+#ifdef CONFIG_ETHERNET_PACKET_MANGLE
+		if (!dev->eth_mangle_tx ||
+		    (skb = dev->eth_mangle_tx(dev, skb)) != NULL)
+#else
+		if (1)
+#endif
+		{
+			skb_len = skb->len;
+			rc = ops->ndo_start_xmit(skb, dev);
+			trace_net_dev_xmit(skb, rc, dev, skb_len);
+		} else {
+			rc = NETDEV_TX_OK;
+		}
 		if (rc == NETDEV_TX_OK)
 			txq_trans_update(txq);
 		return rc;
@@ -2253,9 +2263,19 @@ gso:
 		if (dev->priv_flags & IFF_XMIT_DST_RELEASE)
 			skb_dst_drop(nskb);
 
-		skb_len = nskb->len;
-		rc = ops->ndo_start_xmit(nskb, dev);
-		trace_net_dev_xmit(nskb, rc, dev, skb_len);
+#ifdef CONFIG_ETHERNET_PACKET_MANGLE
+		if (!dev->eth_mangle_tx ||
+		    (nskb = dev->eth_mangle_tx(dev, nskb)) != NULL)
+#else
+		if (1)
+#endif
+		{
+			skb_len = nskb->len;
+			rc = ops->ndo_start_xmit(nskb, dev);
+			trace_net_dev_xmit(nskb, rc, dev, skb_len);
+		} else {
+			rc = NETDEV_TX_OK;
+		}
 		if (unlikely(rc != NETDEV_TX_OK)) {
 			if (rc & ~NETDEV_TX_MASK)
 				goto out_kfree_gso_skb;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index e598400..66f366f 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -58,6 +58,7 @@
 #include <linux/scatterlist.h>
 #include <linux/errqueue.h>
 #include <linux/prefetch.h>
+#include <linux/if.h>
 
 #include <net/protocol.h>
 #include <net/dst.h>
@@ -319,6 +320,22 @@ struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
 }
 EXPORT_SYMBOL(__netdev_alloc_skb);
 
+struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,
+		unsigned int length, gfp_t gfp)
+{
+	struct sk_buff *skb = __netdev_alloc_skb(dev, length + NET_IP_ALIGN, gfp);
+
+#ifdef CONFIG_ETHERNET_PACKET_MANGLE
+	if (dev->priv_flags & IFF_NO_IP_ALIGN)
+		return skb;
+#endif
+
+	if (NET_IP_ALIGN && skb)
+		skb_reserve(skb, NET_IP_ALIGN);
+	return skb;
+}
+EXPORT_SYMBOL(__netdev_alloc_skb_ip_align);
+
 void skb_add_rx_frag(struct sk_buff *skb, int i, struct page *page, int off,
 		     int size, unsigned int truesize)
 {
diff --git a/net/ethernet/eth.c b/net/ethernet/eth.c
index bf10a31..54ec04a 100644
--- a/net/ethernet/eth.c
+++ b/net/ethernet/eth.c
@@ -159,6 +159,12 @@ __be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev)
 	struct ethhdr *eth;
 
 	skb->dev = dev;
+
+#ifdef CONFIG_ETHERNET_PACKET_MANGLE
+	if (dev->eth_mangle_rx)
+		dev->eth_mangle_rx(dev, skb);
+#endif
+
 	skb_reset_mac_header(skb);
 	skb_pull_inline(skb, ETH_HLEN);
 	eth = eth_hdr(skb);
-- 
1.7.9.7

