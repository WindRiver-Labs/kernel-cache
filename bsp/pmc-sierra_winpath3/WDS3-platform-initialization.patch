From e623425480087fa34019e6df5ea00c5eb9fa17a3 Mon Sep 17 00:00:00 2001
From: Jiang, Bin <bin.jiang@windriver.com>
Date: Mon, 21 Mar 2011 11:01:04 +0800
Subject: [PATCH 01/13] WDS3: platform initialization

Extracted from vendor drop(linux-mti-2.6.29.4-1 with modifications for WDS3).

The basic patch of WDS3 platform.

Signed-off-by: Jiang Bin <bin.jiang@windriver.com>
---
 arch/mips/Kconfig                                  |    6 +-
 arch/mips/Makefile                                 |    8 +
 .../asm/mach-winpath/cpu-feature-overrides.h       |   44 +++
 .../include/asm/mach-winpath/kernel-entry-init.h   |   56 +++
 arch/mips/include/asm/mach-winpath/war.h           |   25 ++
 arch/mips/include/asm/wintegra/wds-sig.h           |   19 +
 arch/mips/include/asm/wintegra/wds.h               |   24 ++
 arch/mips/include/asm/wintegra/wds3.h              |  101 +++++
 arch/mips/include/asm/wintegra/winmon.h            |   19 +
 arch/mips/include/asm/wintegra/winmon4.h           |  119 ++++++
 arch/mips/include/asm/wintegra/winpath.h           |   19 +
 arch/mips/include/asm/wintegra/winpath3.h          |  305 ++++++++++++++++
 arch/mips/wintegra/Kconfig                         |   27 ++
 arch/mips/wintegra/wds3/Makefile                   |   10 +
 arch/mips/wintegra/wds3/wds3-init.c                |  385 ++++++++++++++++++++
 15 files changed, 1166 insertions(+), 1 deletions(-)
 create mode 100644 arch/mips/include/asm/mach-winpath/cpu-feature-overrides.h
 create mode 100644 arch/mips/include/asm/mach-winpath/kernel-entry-init.h
 create mode 100644 arch/mips/include/asm/mach-winpath/war.h
 create mode 100644 arch/mips/include/asm/wintegra/wds-sig.h
 create mode 100644 arch/mips/include/asm/wintegra/wds.h
 create mode 100644 arch/mips/include/asm/wintegra/wds3.h
 create mode 100644 arch/mips/include/asm/wintegra/winmon.h
 create mode 100644 arch/mips/include/asm/wintegra/winmon4.h
 create mode 100644 arch/mips/include/asm/wintegra/winpath.h
 create mode 100644 arch/mips/include/asm/wintegra/winpath3.h
 create mode 100644 arch/mips/wintegra/Kconfig
 create mode 100644 arch/mips/wintegra/wds3/Makefile
 create mode 100644 arch/mips/wintegra/wds3/wds3-init.c

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index cf2a482..8e759f3 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -682,6 +682,9 @@ config CAVIUM_OCTEON_REFERENCE_BOARD
 		Hikari
 	  Say Y here for most Octeon reference boards.
 
+config WINTEGRA_WINPATH
+	bool "WinPath processor based machines"
+
 endchoice
 
 source "arch/mips/alchemy/Kconfig"
@@ -696,6 +699,7 @@ source "arch/mips/txx9/Kconfig"
 source "arch/mips/vr41xx/Kconfig"
 source "arch/mips/cavium-octeon/Kconfig"
 source "arch/mips/loongson/Kconfig"
+source "arch/mips/wintegra/Kconfig"
 
 endmenu
 
@@ -1028,7 +1032,7 @@ config BOOT_ELF32
 config MIPS_L1_CACHE_SHIFT
 	int
 	default "4" if MACH_DECSTATION || MIKROTIK_RB532 || PMC_MSP4200_EVAL
-	default "6" if MIPS_CPU_SCACHE
+	default "6" if MIPS_CPU_SCACHE && !WINTEGRA_WINPATH
 	default "7" if SGI_IP22 || SGI_IP27 || SGI_IP28 || SNI_RM || CPU_CAVIUM_OCTEON
 	default "5"
 
diff --git a/arch/mips/Makefile b/arch/mips/Makefile
index efe7fd7..b317950 100644
--- a/arch/mips/Makefile
+++ b/arch/mips/Makefile
@@ -663,6 +663,14 @@ ifdef CONFIG_PHYSICAL_START
 load-y				= $(CONFIG_PHYSICAL_START)
 endif
 
+#
+# WINTEGRA WINPATH3
+#
+core-$(CONFIG_WINTEGRA_WINPATH3)        += arch/mips/wintegra/wds3/
+cflags-$(CONFIG_WINTEGRA_WINPATH3)      += -I$(srctree)/arch/mips/include/asm/mach-winpath
+load-$(CONFIG_WINTEGRA_WINPATH3)        += 0xffffffff85a00000
+
+
 cflags-y			+= -I$(srctree)/arch/mips/include/asm/mach-generic
 drivers-$(CONFIG_PCI)		+= arch/mips/pci/
 
diff --git a/arch/mips/include/asm/mach-winpath/cpu-feature-overrides.h b/arch/mips/include/asm/mach-winpath/cpu-feature-overrides.h
new file mode 100644
index 0000000..834c56b
--- /dev/null
+++ b/arch/mips/include/asm/mach-winpath/cpu-feature-overrides.h
@@ -0,0 +1,44 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2010 Wintegra Inc.
+ */
+#ifndef __ASM_MACH_MIPS_CPU_FEATURE_OVERRIDES_H
+#define __ASM_MACH_MIPS_CPU_FEATURE_OVERRIDES_H
+
+/*
+ * CPU feature overrides for MIPS boards
+ */
+#ifdef CONFIG_CPU_MIPS32
+#define cpu_has_tlb		1
+#define cpu_has_4kex		1
+#define cpu_has_4k_cache	1
+#define cpu_has_fpu		0
+#define cpu_has_32fpr		0
+#define cpu_has_counter	1
+#define cpu_has_watch		0
+#define cpu_has_divec		1
+#define cpu_has_vce		0
+#define cpu_has_cache_cdex_p	0
+#define cpu_has_cache_cdex_s	0
+#define cpu_has_prefetch	1
+#define cpu_has_mcheck		1
+#define cpu_has_ejtag          1
+#ifdef CONFIG_CPU_HAS_LLSC
+#define cpu_has_llsc		1
+#else
+#define cpu_has_llsc		0
+#endif
+#define cpu_has_vtag_icache	0
+#define cpu_has_dc_aliases	0
+#define cpu_has_ic_fills_f_dc	0
+#define cpu_has_nofpuex	0
+#define cpu_has_64bits		0
+#define cpu_has_64bit_zero_reg	0
+#define cpu_has_inclusive_pcaches	0
+#define cpu_icache_snoops_remote_store 0
+#endif
+
+#endif /* __ASM_MACH_MIPS_CPU_FEATURE_OVERRIDES_H */
diff --git a/arch/mips/include/asm/mach-winpath/kernel-entry-init.h b/arch/mips/include/asm/mach-winpath/kernel-entry-init.h
new file mode 100644
index 0000000..ffc33de
--- /dev/null
+++ b/arch/mips/include/asm/mach-winpath/kernel-entry-init.h
@@ -0,0 +1,56 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2010 Wintegra, Inc.
+ */
+#ifndef __ASM_MACH_MIPS_KERNEL_ENTRY_INIT_H
+#define __ASM_MACH_MIPS_KERNEL_ENTRY_INIT_H
+
+#define WINMON_FUNCTION_TABLE  0xbfc00500
+#define WINMON_PUTCHAR_OFS      (0+4)
+#define WINMON_PUTS_OFS         (1*4)
+#define WINMON_EXIT_OFS         (4*4)
+
+	.macro	kernel_entry_setup
+#ifdef CONFIG_MIPS_MT_SMTC
+	mfc0	t0, CP0_CONFIG
+	bgez	t0, 9f
+	mfc0	t0, CP0_CONFIG, 1
+	bgez	t0, 9f
+	mfc0	t0, CP0_CONFIG, 2
+	bgez	t0, 9f
+	mfc0	t0, CP0_CONFIG, 3
+	and	t0, 1<<2
+	bnez	t0, 0f
+9 :
+	/* Assume we came from WinMon... */
+	PTR_LA	v0, (WINMON_FUNCTION_TABLE+WINMON_PUTS_OFS)	/* WinMon puts */
+	lw	v0, (v0)
+	move	a0, zero
+	PTR_LA	a1, nonmt_processor
+	jal	v0
+
+	PTR_LA	v0, (WINMON_FUNCTION_TABLE+WINMON_EXIT_OFS)	/* WinMon exit */
+	lw	v0, (v0)
+	li	a0, 1
+	jal	v0
+
+1 :	b	1b
+
+	__INITDATA
+nonmt_processor :
+	.asciz	"SMTC kernel requires the MT ASE to run\n"
+	__FINIT
+0 :
+#endif
+	.endm
+
+/*
+ * Do SMP slave processor setup necessary before we can safely execute C code.
+ */
+	.macro	smp_slave_setup
+	.endm
+
+#endif /* __ASM_MACH_MIPS_KERNEL_ENTRY_INIT_H */
diff --git a/arch/mips/include/asm/mach-winpath/war.h b/arch/mips/include/asm/mach-winpath/war.h
new file mode 100644
index 0000000..7ab8cb6
--- /dev/null
+++ b/arch/mips/include/asm/mach-winpath/war.h
@@ -0,0 +1,25 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2002, 2004, 2007 by Ralf Baechle <ralf@linux-mips.org>
+ */
+#ifndef __ASM_MIPS_MACH_MIPS_WAR_H
+#define __ASM_MIPS_MACH_MIPS_WAR_H
+
+#define R4600_V1_INDEX_ICACHEOP_WAR	0
+#define R4600_V1_HIT_CACHEOP_WAR	0
+#define R4600_V2_HIT_CACHEOP_WAR	0
+#define R5432_CP0_INTERRUPT_WAR	0
+#define BCM1250_M3_WAR			0
+#define SIBYTE_1956_WAR		0
+#define MIPS4K_ICACHE_REFILL_WAR	1
+#define MIPS_CACHE_SYNC_WAR		1
+#define TX49XX_ICACHE_INDEX_INV_WAR	0
+#define RM9000_CDEX_SMP_WAR		0
+#define ICACHE_REFILLS_WORKAROUND_WAR	1
+#define R10000_LLSC_WAR		0
+#define MIPS34K_MISSED_ITLB_WAR	0
+
+#endif /* __ASM_MIPS_MACH_MIPS_WAR_H */
diff --git a/arch/mips/include/asm/wintegra/wds-sig.h b/arch/mips/include/asm/wintegra/wds-sig.h
new file mode 100644
index 0000000..234c7f7
--- /dev/null
+++ b/arch/mips/include/asm/wintegra/wds-sig.h
@@ -0,0 +1,19 @@
+#ifndef _ASM_WINTEGRA_WDS_SIG_H_
+#define _ASM_WINTEGRA_WDS_SIG_H_
+
+
+#define SIGNAL_RT_SER 35 /*SIGRTMIN*/
+#define SIGNAL_RT_OV      (SIGNAL_RT_SER + 1)
+#define SIGNAL_RT_BUSERR  (SIGNAL_RT_SER + 2)
+
+#define WPC_NTR_SIGNAL_REQ 38 /*SIGRTMIN + 3*/
+#define WPC_NTR_SIGNAL_USR 39
+
+#define SIGNAL_RT_CFUECC  40
+#define SIGNAL_RT_WFECC   41
+#define SIGNAL_RT_FMUECC  42
+#define SIGNAL_RT_COREECC 43
+
+#define SIGNAL_DUAL_PRINT 44
+
+#endif /*_ASM_WINTEGRA_WDS_SIG_H_*/
diff --git a/arch/mips/include/asm/wintegra/wds.h b/arch/mips/include/asm/wintegra/wds.h
new file mode 100644
index 0000000..847849a
--- /dev/null
+++ b/arch/mips/include/asm/wintegra/wds.h
@@ -0,0 +1,24 @@
+/**************************************************************************
+    Copyright (C) 2002-2010  Wintegra.
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of version 2 of the GNU General Public License
+    as published by the Free Software Foundation.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+**************************************************************************/
+#if defined CONFIG_WINTEGRA_WDS3
+#include "wds3.h"
+#endif
+
+#ifndef WINTEGRA_DEBUG_ENABLE
+#define WINTEGRA_DEBUG_ENABLE 0
+#endif
+
diff --git a/arch/mips/include/asm/wintegra/wds3.h b/arch/mips/include/asm/wintegra/wds3.h
new file mode 100644
index 0000000..fa47acb
--- /dev/null
+++ b/arch/mips/include/asm/wintegra/wds3.h
@@ -0,0 +1,101 @@
+/*
+ * Copyright (C) 2000-2010 Wintegra. All rights reserved.
+ *
+ * ########################################################################
+ *
+ *  This program is free software; you can distribute it and/or modify it
+ *  under the terms of the GNU General Public License (Version 2) as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+ *
+ * ########################################################################
+ *
+ * Defines of the Wintegra WDS3 boards specific address-MAP, registers, etc.
+ *
+ */
+#ifndef _WINTEGRA_WDS3_H
+#define _WINTEGRA_WDS3_H
+
+#include <asm/addrspace.h>
+
+#define WDS_WINPATH_NO_MAX   4
+#define MAX_SIU_NO           5
+#define MAX_WP_BANKS         7
+typedef struct  {
+  unsigned int wp_bus;
+  char         wds_bank_name[24];
+  unsigned int wp_bus_active;
+  unsigned int wp_phys_bank_base_addr;
+  unsigned int wp_phys_bank_size;
+  unsigned int wp_application_bank_base_addr;
+  unsigned int wp_application_bank_size;
+} wds_winpath_mem_bank_t;
+
+typedef struct {
+  unsigned int wp_clock_freq_siu[MAX_SIU_NO];
+  unsigned int wp_clock_freq_mips;
+  unsigned int wds_winpath_no_of_banks;
+  wds_winpath_mem_bank_t wds_winpath_mem_banks[MAX_WP_BANKS];
+} wds_per_winpath_t;
+
+typedef struct  {
+  unsigned int wds_winpath_no;            /*Number of WinPath devices on board*/
+  unsigned int wds_clock_freq_external;   /*Board external clock ferquency*/
+  unsigned int wds_winpath_phys_rif_base; /*uncached virtual address of WP RIF base*/
+  wds_per_winpath_t wds_wp[WDS_WINPATH_NO_MAX];
+  unsigned int wds_chip;
+  unsigned int wds_winmon_ver;
+} wds_board_descr_t;
+
+typedef struct {
+      unsigned int dual_core_enabled;
+      unsigned int comm_start_addr;
+      unsigned int print_buff_addr;
+} minimon_descr_t;
+
+
+extern wds_board_descr_t wds;
+extern minimon_descr_t   minimon_desc;
+
+#define WDS_IRQ_MIPS_REG   27
+
+#define WDS3_EXTERNAL_CLOCK     20000000 /*20MHz*/
+
+#define WDS3_SIU_BUS_PARAM_NUM       1
+#define WDS3_SIU_BUS_PACKET_NUM      2
+#define WDS3_SIU_BUS_INTERNAL_NUM    3
+#define WDS3_SIU_BUS_HOST_NUM        4
+#define WDS3_SIU_BUS_WMM5_NUM        5
+#define WDS3_SIU_BUS_RIF_NUM         6
+#define WDS3_FPGA_NUM                7
+
+
+static inline unsigned int WDS3_WINPATH_RIF_READ(unsigned int offs)
+{
+  unsigned char __iomem *base = (unsigned char __iomem *)wds.wds_winpath_phys_rif_base;
+  return __raw_readl(base+offs);
+}
+
+static inline void WDS3_WINPATH_RIF_WRITE(unsigned int val, unsigned int offs)
+{
+  unsigned char __iomem *base = (unsigned char __iomem *)wds.wds_winpath_phys_rif_base;
+  __raw_writel(val, base+offs);
+}
+
+static inline unsigned int WDS3_GET_WINPATH_RIF_BASE(void)
+{
+  return wds.wds_winpath_phys_rif_base;
+}
+
+#define WDS_HOST_SIZE            0x02000000
+#define WDS3_LED_REG            (KSEG1ADDR(0x1f10001c))
+
+#endif  /* !(_WINTEGRA_WDS3_H) */
diff --git a/arch/mips/include/asm/wintegra/winmon.h b/arch/mips/include/asm/wintegra/winmon.h
new file mode 100644
index 0000000..b9c19aa
--- /dev/null
+++ b/arch/mips/include/asm/wintegra/winmon.h
@@ -0,0 +1,19 @@
+/**************************************************************************
+    Copyright (C) 2002-2010  Wintegra.
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of version 2 of the GNU General Public License
+    as published by the Free Software Foundation.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+**************************************************************************/
+#ifdef CONFIG_WINTEGRA_WINPATH3
+#include "winmon4.h"
+#endif
diff --git a/arch/mips/include/asm/wintegra/winmon4.h b/arch/mips/include/asm/wintegra/winmon4.h
new file mode 100644
index 0000000..e8c3e9a
--- /dev/null
+++ b/arch/mips/include/asm/wintegra/winmon4.h
@@ -0,0 +1,119 @@
+/*
+ *   Copyright (C) 2010  Wintegra, Inc.
+ *   All rights reserved.
+ *
+ *   This program is free software; you can distribute it and/or modify it
+ *   under the terms of the GNU General Public License (Version 2) as
+ *   published by the Free Software Foundation.
+ *
+ *   This program is distributed in the hope it will be useful, but WITHOUT
+ *   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *   for more details.
+ *
+ *   You should have received a copy of the GNU General Public License along
+ *   with this program; if not, write to the Free Software Foundation, Inc.,
+ *   59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+ *
+ *
+ */
+
+#ifndef _WINMON_H_
+#define _WINMON_H_
+
+#define WINMON_MIPS_DSEG1_OFFSET 0xa0000000
+#define WINMON_MIPS_FLASH_BASE   0x1fc00000
+#define WINMON_MIPS_FUNCTION_TABLE_OFFSET  0x500
+
+#define WINMON_FUNCTION_TABLE    (WINMON_MIPS_FLASH_BASE+WINMON_MIPS_DSEG1_OFFSET+\
+				  WINMON_MIPS_FUNCTION_TABLE_OFFSET)
+
+#define WINMON_PUTCHAR_OFS              0
+#define WINMON_PUTS_OFS                 1
+#define WINMON_GETCHAR_OFS	         2
+#define WINMON_WAIT_OFS                 3
+#define WINMON_EXIT_OFS                 4
+#define WINMON_MALLOC_OFS	         5
+#define WINMON_CLOCK_OFS        	 6
+#define WINMON_DISPLAY_OFS      	 7
+#define WINMON_SETEXC_OFS        	 8
+#define WINMON_GETENV_OFS 	         11
+
+#define WINMON_ENABLE_INT_OFS		 15
+#define WINMON_DISABLE_INT_OFS		 16
+
+#define WINMON_MEM_ADDR_OFS             20
+#define WINMON_MEM_SIZE_OFS             21
+#define WINMON_BUS_ACTIVE_OFS           22
+
+#define WINMON_OS_MANAGE_OFS            23
+#define WINMON_SET_INT_PARTITION_OFS    32
+#define WINMON_GET_CORE_ID_OFS          33
+#define WINMON_GET_TC_ID_OFS            34
+#define WINMON_GET_MINIMON_DESC         36
+#define WINMON_GET_MULTI_WP_DESC        37
+#define WINMON_RESET_CORE               40
+#define WINMON_MINIMON_EXIT_OFS         43
+
+#define WINMON_FUNC(ofs) (((unsigned int *)(WINMON_FUNCTION_TABLE))[ofs])
+
+typedef void (*t_winmon_exit)(int rc);
+typedef int  (*t_winmon_putchar)(int c);
+typedef int  (*t_winmon_puts)(char *s);
+typedef int  (*t_winmon_getchar)(void);
+typedef int  (*t_winmon_wait)(unsigned int t);
+typedef int  (*t_winmon_malloc)(int s);
+typedef int  (*t_winmon_clock)(void);
+typedef void (*t_winmon_display)(unsigned char);
+typedef void *(*t_winmon_setexc)(int, void *);
+typedef char *(*t_winmon_getenv)(char *);
+
+typedef void (*t_winmon_enable_int)(int, int);
+typedef void (*t_winmon_disable_int)(int, int);
+
+typedef int  (*t_winmon_get_bus_address)(int c);
+typedef int  (*t_winmon_get_bus_size)(int c);
+typedef int  (*t_winmon_is_bus_access)(int c);
+
+typedef int  (*t_winmon_set_manange_os)(int c);
+typedef unsigned int  (*t_winmon_set_int_partition)(unsigned int partition, unsigned int size);
+typedef unsigned int  (*t_winmon_get_core_id)(void);
+typedef unsigned int  (*t_winmon_get_tc_id)(void);
+typedef unsigned int* (*t_winmon_get_minmon_desc)(void);
+typedef unsigned int* (*t_winmon_get_multi_wp_desc)(void);
+typedef void          (*t_winmon_reset_core)(void);
+typedef void          (*t_winmon_minimon_exit)(void);
+
+#define ILLEGAL_WINMON_FUNC_PTR 0xffffffff
+
+#define GENERAL_EXCEPTION_HANDLER   0
+#define INTERRUPT_EXCEPTION_HANDLER 1
+
+#define WinMon_putchar(c)\
+		(((t_winmon_putchar)WINMON_FUNC(WINMON_PUTCHAR_OFS))(c))
+#define WinMon_puts(c) (((t_winmon_puts)WINMON_FUNC(WINMON_PUTS_OFS))(c))
+#define WinMon_getchar() (((t_winmon_getchar)WINMON_FUNC(WINMON_GETCHAR_OFS))())
+#define WinMon_wait(c) (((t_winmon_wait)WINMON_FUNC(WINMON_WAIT_OFS))(c))
+#define WinMon_exit(rc) (((t_winmon_exit)WINMON_FUNC(WINMON_EXIT_OFS))(rc))
+#define WinMon_malloc(s) (((t_winmon_malloc)WINMON_FUNC(WINMON_MALLOC_OFS))(s))
+#define WinMon_clock() (((t_winmon_clock)WINMON_FUNC(WINMON_CLOCK_OFS))())
+#define WinMon_display(s) (((t_winmon_display)WINMON_FUNC(WINMON_DISPLAY_OFS))(s))
+#define WinMon_setexc(e, s) (((t_winmon_setexc)WINMON_FUNC(WINMON_SETEXC_OFS))(e, s)
+#define WinMon_getenv(name) (((t_winmon_getenv)WINMON_FUNC(WINMON_GETENV_OFS))(name))
+#define WinMon_get_bus_address(c) (((t_winmon_get_bus_address)WINMON_FUNC(WINMON_MEM_ADDR_OFS))(c))
+#define WinMon_get_bus_size(c) (((t_winmon_get_bus_size)WINMON_FUNC(WINMON_MEM_SIZE_OFS))(c))
+#define WinMon_is_bus_access(c) (((t_winmon_is_bus_access)WINMON_FUNC(WINMON_BUS_ACTIVE_OFS))(c))
+
+#define WinMon_enable_int(d, c) (((t_winmon_enable_int)WINMON_FUNC(WINMON_ENABLE_INT_OFS))(d, c))
+#define WinMon_disable_int(d, c) (((t_winmon_disable_int)WINMON_FUNC(WINMON_DISABLE_INT_OFS))(d, c))
+
+
+#define WinMon_set_manange_os(c) (((t_winmon_set_manange_os)WINMON_FUNC(WINMON_OS_MANAGE_OFS))(c))
+#define WinMon_set_int_partition(p, s)       (((t_winmon_set_int_partition)WINMON_FUNC(WINMON_SET_INT_PARTITION_OFS))(p, s))
+#define WinMon_get_core_id() (((t_winmon_get_core_id)WINMON_FUNC(WINMON_GET_CORE_ID_OFS))())
+#define WinMon_get_tc_id()   (((t_winmon_get_tc_id)WINMON_FUNC(WINMON_GET_TC_ID_OFS))())
+#define Winmon_get_minimon_desc() (((t_winmon_get_minmon_desc)WINMON_FUNC(WINMON_GET_MINIMON_DESC))())
+#define Winmon_get_multi_wp_desc()            (((t_winmon_get_multi_wp_desc)WINMON_FUNC(WINMON_GET_MULTI_WP_DESC))())
+#define Winmon_reset_core()                   (((t_winmon_reset_core)WINMON_FUNC(WINMON_RESET_CORE))())
+#define WinMon_minimon_exit()                 (((t_winmon_minimon_exit)WINMON_FUNC(WINMON_MINIMON_EXIT_OFS))())
+#endif
diff --git a/arch/mips/include/asm/wintegra/winpath.h b/arch/mips/include/asm/wintegra/winpath.h
new file mode 100644
index 0000000..a0fe56b
--- /dev/null
+++ b/arch/mips/include/asm/wintegra/winpath.h
@@ -0,0 +1,19 @@
+/**************************************************************************
+    Copyright (C) 2002-2008  Wintegra.
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of version 2 of the GNU General Public License
+    as published by the Free Software Foundation.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+**************************************************************************/
+#ifdef CONFIG_WINTEGRA_WINPATH3
+#include "winpath3.h"
+#endif
diff --git a/arch/mips/include/asm/wintegra/winpath3.h b/arch/mips/include/asm/wintegra/winpath3.h
new file mode 100644
index 0000000..e571035
--- /dev/null
+++ b/arch/mips/include/asm/wintegra/winpath3.h
@@ -0,0 +1,305 @@
+/*
+ * arnonm@wintegra.co.il
+ * Copyright (C) 2002-2010 Wintegra. All rights reserved.
+ *
+ * ########################################################################
+ *
+ *  This program is free software; you can distribute it and/or modify it
+ *  under the terms of the GNU General Public License (Version 2) as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+ *
+ * ########################################################################
+ *
+ * Defines of the Wintegra WinPath3 address-MAP, registers, etc.
+ *
+ */
+#ifndef _WINTEGRA_WINPATH3_H
+#define _WINTEGRA_WINPATH3_H
+
+#include "wds.h"
+
+
+/*
+ * Core ID
+ */
+#define Core0 0x0A0 /* The core with L1 cache */
+#define Core1 0x0A2 /* The core with L1+L2 cache */
+
+/*
+ * WINTEGRA CHIP
+ */
+
+#define WINTEGRA_WINPATH3_REV_A_ID         0xabcdaa01
+#define WINTEGRA_WINPATH3_REV_B_ID         0xabcdaa02
+#define WINTEGRA_SUPERLITE_REV_A_ID        0xabcdaa03
+#define WINTEGRA_SUPERLITE_REV_B_ID        0xabcdaa04
+#define WINTEGRA_SUPERLITE_REV_B_1_ID      0xabcdaa05
+#define WINTEGRA_SPO_ID                    0xabcdaa06
+#define WINTEGRA_WINPATH3_REV_B_2_ID       0xabcdaa07
+
+
+/*
+ * Interrupt Controller
+ */
+#define MAP_IC_INTERUPT_L               (0xc280)
+#define MAP_IC_INTERUPT_H               (0xc284)
+#define MAP_IC_MASK_MIPS_0_L            (0xc288)
+#define MAP_IC_MASK_MIPS_0_H            (0xc28c)
+#define MAP_IC_IRPT_MIPS_0_L            (0xc290)
+#define MAP_IC_IRPT_MIPS_0_H            (0xc294)
+#define MAP_IC_FIRST_MIPS_0             (0xc298)
+#define MAP_IC_MASK_MIPS_1_L            (0xc29c)
+#define MAP_IC_MASK_MIPS_1_H            (0xc2a0)
+#define MAP_IC_IRPT_MIPS_1_L            (0xc2a4)
+#define MAP_IC_IRPT_MIPS_1_H            (0xc2a8)
+#define MAP_IC_FIRST_MIPS_1             (0xc2ac)
+#define MAP_IC_MASK_EXTERNAL_L          (0xc2b0)
+#define MAP_IC_MASK_EXTERNAL_H          (0xc2b4)
+#define MAP_IC_IRPT_EXTERNAL_L          (0xc2b8)
+#define MAP_IC_IRPT_EXTERNAL_H          (0xc2bc)
+#define MAP_IC_FIRST_EXTERNAL           (0xc2c0)
+#define MAP_IC_MASK_PIN_L               (0xc2c4)
+#define MAP_IC_MASK_PIN_H               (0xc2c8)
+#define MAP_IC_IRPT_PIN_L               (0xc2cc)
+#define MAP_IC_IRPT_PIN_H               (0xc2d0)
+#define MAP_IC_FIRST_PIN                (0xc2d4)
+#define MAP_IC_SW_INT                   (0xc2d8)
+#define MAP_IC_INTMODE                  (0xc2dc)
+
+#define WINPATH3_CORE0 0x0A0 /* The core with L1 cache */
+#define WINPATH3_CORE1 0x0A2 /* The core with L1+L2 cache */
+
+/* BIU registers*/
+/* Packet (DDR) bus */
+#define MAP_SIU1_REG_HWM_TR_ERR_STAT0        (0x10288)
+#define MAP_SIU1_REG_HWM_TR_ERR_ADDR         (0x1028c)
+#define MAP_SIU1_REG_HWM_TR_ERR_STAT1        (0x10294)
+#define MAP_SIU1_REG_HWM_TR_ERR_STAT2        (0x10298)
+
+#define WINPATH_PARAM_BIU_TESR         MAP_SIU1_REG_HWM_TR_ERR_STAT0
+#define WINPATH_PARAM_BIU_TEAR         MAP_SIU1_REG_HWM_TR_ERR_ADDR
+#define WINPATH_PARAM_BIU_HBMS1        MAP_SIU1_REG_HWM_TR_ERR_STAT1
+#define WINPATH_PARAM_BIU_HBMS2        MAP_SIU1_REG_HWM_TR_ERR_STAT2
+
+/* Param (SRAM) bus */
+#define MAP_SIU2_REG_HWM_TR_ERR_STAT0        (0x10488)
+#define MAP_SIU2_REG_HWM_TR_ERR_ADDR         (0x1048c)
+#define MAP_SIU2_REG_HWM_TR_ERR_STAT1        (0x10494)
+#define MAP_SIU2_REG_HWM_TR_ERR_STAT2        (0x10498)
+
+#define WINPATH_PACKET_BIU_TESR        MAP_SIU2_REG_HWM_TR_ERR_STAT0
+#define WINPATH_PACKET_BIU_TEAR        MAP_SIU2_REG_HWM_TR_ERR_ADDR
+#define WINPATH_PACKET_BIU_HBMS1       MAP_SIU2_REG_HWM_TR_ERR_STAT1
+#define WINPATH_PACKET_BIU_HBMS2       MAP_SIU2_REG_HWM_TR_ERR_STAT2
+
+/* Internal (Global) bus */
+#define MAP_SIU3_REG_HWM_TR_ERR_ADDR         (0x10628)
+#define MAP_SIU3_REG_HWM_TR_ERR_STAT0        (0x1062c)
+#define MAP_SIU3_REG_HWM_TR_ERR_STAT1        (0x10630)
+#define MAP_SIU3_REG_HWM_TR_ERR_STAT2        (0x10634)
+
+#define WINPATH_INTERNAL_BIU_TESR      MAP_SIU3_REG_HWM_TR_ERR_ADDR
+#define WINPATH_INTERNAL_BIU_TEAR      MAP_SIU3_REG_HWM_TR_ERR_STAT0
+#define WINPATH_INTERNAL_BIU_HBMS1     MAP_SIU3_REG_HWM_TR_ERR_STAT1
+#define WINPATH_INTERNAL_BIU_HBMS2     MAP_SIU3_REG_HWM_TR_ERR_STAT2
+
+/* RIF */
+#define MAP_SIU3I_BIU_TESR                   (0x107f0)
+#define MAP_SIU3I_BIU_TEAR                   (0x107f4)
+#define MAP_SIU3I_BIU_HBMS1                  (0x107e8)
+#define MAP_SIU3I_BIU_HBMS2                  (0x107ec)
+
+#define WINPATH_RIF_BIU_TESR           MAP_SIU3I_BIU_TESR
+#define WINPATH_RIF_BIU_TEAR           MAP_SIU3I_BIU_TEAR
+#define WINPATH_RIF_BIU_HBMS1          MAP_SIU3I_BIU_HBMS1
+#define WINPATH_RIF_BIU_HBMS2          MAP_SIU3I_BIU_HBMS2
+
+/* Host bus */
+#define MAP_SIU4X_BIU_TESR                   (0x108f0)
+#define MAP_SIU4X_BIU_TEAR                   (0x108f4)
+#define MAP_SIU4X_BIU_HBMS1                  (0x108e8)
+#define MAP_SIU4X_BIU_HBMS2                  (0x108ec)
+
+#define WINPATH_HOST_BIU_TESR          MAP_SIU4X_BIU_TESR
+#define WINPATH_HOST_BIU_TEAR          MAP_SIU4X_BIU_TEAR
+#define WINPATH_HOST_BIU_HBMS1         MAP_SIU4X_BIU_HBMS1
+#define WINPATH_HOST_BIU_HBMS2         MAP_SIU4X_BIU_HBMS2
+
+/* Application bus */
+#define MAP_SIU4D_REG_HWM_TR_ERR_STAT0        (0x10A88)
+#define MAP_SIU4D_REG_HWM_TR_ERR_ADDR         (0x10A8c)
+#define MAP_SIU4D_REG_HWM_TR_ERR_STAT1        (0x10A94)
+#define MAP_SIU4D_REG_HWM_TR_ERR_STAT2        (0x10A98)
+
+#define WINPATH_APP_BIU_TESR           MAP_SIU4D_REG_HWM_TR_ERR_STAT0
+#define WINPATH_APP_BIU_TEAR           MAP_SIU4D_REG_HWM_TR_ERR_ADDR
+#define WINPATH_APP_BIU_HBMS1          MAP_SIU4D_REG_HWM_TR_ERR_STAT1
+#define WINPATH_APP_BIU_HBMS2          MAP_SIU4D_REG_HWM_TR_ERR_STAT2)
+
+/*
+ *   TA registers
+ */
+#define WINPATH_TA_BASE                (0x1000)
+#define WM_TA_BASE_REGS                512
+#define WM_TA_ORDER_REGS               128
+#define WM_TA_DEV_MAP_REGS             32
+#define MAP_TA_TRS_STAT                        (0x1b00)/* Offset from WDS_WINPATH_BASE */
+#define MAP_TA_DEV_MAP		                (0x1a00)/* Offset from WDS_WINPATH_BASE */
+#define MAP_TA_TIME_STAMP_TIMER_PRESCALAR	(0x1f80)/* Offset from WDS_WINPATH_BASE */
+#define MAP_TA_PC			        (0x1d00)/* Offset from WDS_WINPATH_BASE */
+#define WM_TA_DEV_MAP_RES  (((MAP_TA_TRS_STAT-MAP_TA_DEV_MAP)-(WM_TA_DEV_MAP_REGS*4))/4)
+#define WM_TA_TRS_SETS     64
+#define WM_TA_PC_RES       (((MAP_TA_TIME_STAMP_TIMER_PRESCALAR-MAP_TA_PC)-(WM_TA_TRS_SETS*4))/4)
+
+typedef struct wm_ta {
+      unsigned int          b[WM_TA_BASE_REGS];
+      volatile unsigned int order[WM_TA_ORDER_REGS];
+      unsigned int          dev_map[WM_TA_DEV_MAP_REGS];
+      unsigned int          res1[WM_TA_DEV_MAP_RES];
+      volatile unsigned int trs_stat[WM_TA_TRS_SETS];
+      volatile unsigned int ta_cam[WM_TA_TRS_SETS];
+      volatile unsigned int ta_pc[WM_TA_TRS_SETS];
+      unsigned int          res2[WM_TA_PC_RES];
+      unsigned int          ts_prescalar;
+      volatile unsigned int ts_timer[2];
+} wm_ta;
+
+
+/*
+ *  Clocks and Reset (CR) registers
+ */
+#define MAP_CLK_SIU1_PLLCFG1     (0xfb04)
+#define MAP_CLK_SIU2_PLLCFG1     (0xfc04)
+#define MAP_CLK_INTERNAL_PLLCFG1 (0xff04)
+#define MAP_CLK_SIU4D_PLLCFG1    (0xfd04)
+#define MAP_CLK_MIPS_PLLCFG1     (0xfe04)
+
+/*
+ * ASRAM
+ */
+#define SIU4X_MC_B_1_MTC 0xbe010808
+
+/*
+ * WMM
+ */
+
+typedef struct winpath_wmm{
+   unsigned long fifo_start[64];
+   unsigned long pad_0[64];
+   unsigned long fifo_end[64];
+   unsigned long pad_1[64];
+   unsigned long fifo_counter[64];
+   unsigned long pad_2[64];
+   unsigned long fifo_max[64];
+   unsigned long pad_3[64];
+   unsigned long iq_start[4];
+   unsigned long pad_4[4];
+   unsigned long iq_temp[4];
+   unsigned long pad_5[4];
+   unsigned long iq_end[4];
+   unsigned long pad_6[12];
+   unsigned long lar;
+   unsigned long utar;
+   unsigned long pad_7[2];
+   unsigned long fer[2];
+   unsigned long ffr[2];
+   unsigned long pad_8[4];
+   unsigned long hcr_reg;
+   unsigned long hcr_addr;
+   unsigned long hcr_cmd;
+   /* WP_U32 pad_9[465]; */
+} winpath_wmm;
+
+#define WINPATH_WMM_HOST_CMD_DELAY 1
+#define WINPATH_WMM_HOST_CMD_TIMEOUT 5000
+
+#define WINPATH_WMM_CMD_VALID 0x80000000
+#define WINPATH_WMM_CMD_OP_GET_FIFO     0x38000000
+#define WINPATH_WMM_CMD_OP_PUT_FIFO     0x40000000
+#define WINPATH_WMM_CMD_OP_WRITE_TRS    0x48000000
+#define WINPATH_WMM_CMD_OP_READ_TRS     0x50000000
+#define WINPATH_WMM_CMD_OP_PARAM_OFFSET 20
+#define WINPATH_WMM_CMD_OP_DECREMENT    0x08400000
+
+#define WINPATH_WMM_FIFO_UNDERRUN    1
+#define WINPATH_WMM_FIFO_OVERRUN     1
+
+enum {
+   WINPATH_WMM_HOST_CMD_OK = 0,
+   WINPATH_WMM_HOST_CMD_PREV_FAILED = 1,
+   WINPATH_WMM_HOST_CMD_CURR_FAILED = 2
+};
+
+typedef struct{
+   unsigned long base;
+   volatile unsigned long cmd;
+   volatile unsigned long reg;
+   volatile unsigned long address;
+   unsigned long status;
+} winpath_wmm_host_cmd;
+
+/*
+ * Rev. B registers
+ */
+#define MAP_CRI0_ECC_MODE               (0x10068)
+#define MAP_CRI0_ECC_IRPT               (0x1006c)
+
+#define MAP_CRI1_ECC_MODE               (0x100e8)
+#define MAP_CRI1_ECC_IRPT               (0x100ec)
+
+#define MAP_FMU_ECCER                   (0xa2b4)
+
+#define MAP_WF0_ECC_ERR_COUNT           (0x6454)
+#define MAP_WF0_ECC_CONFIG              (0x6458)
+
+#define MAP_WF1_ECC_ERR_COUNT           (0x6554)
+#define MAP_WF1_ECC_CONFIG              (0x6558)
+
+#define MAP_WF2_ECC_ERR_COUNT           (0x6654)
+#define MAP_WF2_ECC_CONFIG              (0x6658)
+
+#define MAP_WF3_ECC_ERR_COUNT           (0x6754)
+#define MAP_WF3_ECC_CONFIG              (0x6758)
+
+#define MAP_CFU_REG_RX_ECC_DEBUG_PTR    (0x61d8)
+#define MAP_CFU_REG_RX_ECC_DEBUG_DATA   (0x61dc)
+
+#define	MAP_FMU_ECC_ERROR1	 (0xa2b4)
+#define	MAP_FMU_ECC_ERROR2	 (0xa2b8)
+
+/*
+ * interface functions
+ */
+extern char *prom_getcmdline(void);
+extern void prom_init_cmdline(void);
+extern void prom_meminit(void);
+extern void mips_reboot_setup(void);
+extern int prom_putchar(char);
+extern unsigned int getHostSystemClock(int);
+extern int prom_get_ethernet_addr(unsigned char *);
+extern void winpath_wmm_host_cmd_execute(winpath_wmm_host_cmd *wmm_host_cmd_reg);
+
+/* Memory descriptor management. */
+#define PROM_MAX_PMEMBLOCKS    32
+struct prom_pmemblock {
+  unsigned long base; /* Within KSEG0. */
+  unsigned int size;  /* In bytes. */
+  unsigned int type;  /* free or prom memory */
+};
+
+
+#define WINPATH_INSTRUMENTATION_ENABLE 0
+
+#if WINPATH_INSTRUMENTATION_ENABLE
+extern void inst_mark(unsigned int code);
+#endif
+#endif
diff --git a/arch/mips/wintegra/Kconfig b/arch/mips/wintegra/Kconfig
new file mode 100644
index 0000000..316a533
--- /dev/null
+++ b/arch/mips/wintegra/Kconfig
@@ -0,0 +1,27 @@
+choice
+	prompt "Wintegra Processor type"
+        depends on WINTEGRA_WINPATH
+        default WINTEGRA_WINPATH3
+
+config WINTEGRA_WINPATH3
+        bool "Support for Wintegra Winpath3 device family"
+        select BOOT_ELF32
+        select CEVT_R4K
+        select IRQ_CPU
+        select SYS_HAS_CPU_MIPS32_R2
+        select DMA_COHERENT
+        select SYS_HAS_EARLY_PRINTK
+        select SYS_SUPPORTS_32BIT_KERNEL
+        select SYS_SUPPORTS_BIG_ENDIAN
+        select SYS_SUPPORTS_MULTITHREADING
+        select MIPS_CPU_SCACHE
+        help
+          Select WINTEGRA_WINPATH3 if configuring a Wintegra Winpath3 with a MIPS add-on board.
+
+endchoice
+
+config WINTEGRA_WDS3
+        bool "Support for Wintegra WDS3 board"
+        depends on WINTEGRA_WINPATH3
+        help
+          Select WINTEGRA_WDS3 if configuring a Wintegra WDS3 board.
diff --git a/arch/mips/wintegra/wds3/Makefile b/arch/mips/wintegra/wds3/Makefile
new file mode 100644
index 0000000..3ff6891
--- /dev/null
+++ b/arch/mips/wintegra/wds3/Makefile
@@ -0,0 +1,10 @@
+#
+# Carsten Langgaard, carstenl@mips.com
+# Copyright (C) 1999,2000 MIPS Technologies, Inc.  All rights reserved.
+#
+# Copyright (C) 2008 Wind River Systems, Inc.
+#   written by Ralf Baechle <ralf@linux-mips.org>
+#
+obj-y				:= wds3-init.o
+
+EXTRA_CFLAGS += -Werror
diff --git a/arch/mips/wintegra/wds3/wds3-init.c b/arch/mips/wintegra/wds3/wds3-init.c
new file mode 100644
index 0000000..d71aff2
--- /dev/null
+++ b/arch/mips/wintegra/wds3/wds3-init.c
@@ -0,0 +1,385 @@
+/*
+ * Copyright (C) 2000-2010 Wintegra Inc.  All rights reserved.
+ *
+ *  This program is free software; you can distribute it and/or modify it
+ *  under the terms of the GNU General Public License (Version 2) as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+ *
+ * PROM library initialisation code.
+ */
+#include "linux/init.h"
+#include "linux/string.h"
+#include "linux/kernel.h"
+#include "linux/module.h"
+
+#include "asm/bootinfo.h"
+#include "asm/io.h"
+#include "asm/system.h"
+#include "asm/cacheflush.h"
+#include "asm/traps.h"
+
+#include "asm/wintegra/winmon.h"
+#include "asm/wintegra/winpath.h"
+
+
+int prom_argc;
+int *_prom_argv, *_prom_envp;
+wds_board_descr_t wds;
+static spinlock_t wmm_cmd_lock;
+
+minimon_descr_t minimon_desc = {.dual_core_enabled = 0,
+				 .comm_start_addr = 0xffffffff,
+				 .print_buff_addr = 0xffffffff };
+
+/*
+ * Winmon pass arguments and environment as 32-bit pointer.
+ */
+
+static inline unsigned char str2hexnum(unsigned char c)
+{
+  if (c >= '0' && c <= '9')
+    return c - '0';
+  if (c >= 'a' && c <= 'f')
+    return c - 'a' + 10;
+  if (c >= 'A' && c <= 'F')
+    return c - 'A' + 10;
+  return 0;
+}
+
+static inline void str2eaddr(unsigned char *ea, unsigned char *str)
+{
+  int i;
+
+  for (i = 0; i < 6; i++) {
+    unsigned char num;
+
+    if ((*str == '.') || (*str == ':'))
+      str++;
+    num = str2hexnum(*str++) << 4;
+    num |= (str2hexnum(*str++));
+    ea[i] = num;
+  }
+}
+
+int prom_get_ethernet_addr(unsigned char *ethernet_addr)
+{
+  char *ethaddr_str;
+
+  ethaddr_str = WinMon_getenv("BOARD_MAC_ETHX");
+  if (!ethaddr_str) {
+    printk("ethaddr not set in boot prom\n");
+    return -1;
+  }
+  str2eaddr(ethernet_addr, ethaddr_str);
+
+#if WINTEGRA_DEBUG_ENABLE
+  {
+    int i;
+    printk("get_ethernet_addr: ");
+    for (i = 0; i < 5; i++)
+      printk("%02x:", (unsigned char)*(ethernet_addr+i));
+    printk("%02x\n", *(ethernet_addr+i));
+  }
+#endif
+  return 0;
+}
+
+#define WINTEGRA_WINPATH3_REV_A_STR      "WINPATH3_REV_A";
+#define WINTEGRA_WINPATH3_REV_B_STR      "WINPATH3_REV_B";
+#define WINTEGRA_WINPATH3_REV_B_2_STR    "WINPATH3_REV_B_2";
+#define WINTEGRA_WINPATH3SL_REV_A_STR    "WINPATH3_SL_REV_A";
+#define WINTEGRA_WINPATH3SL_REV_B_STR    "WINPATH3_SL_REV_B";
+#define WINTEGRA_WINPATH3SL_REV_B_1_STR  "WINPATH3_SL_REV_B_1";
+#define WINTEGRA_WINPATH3_SPO_STR        "WINPATH3_SPO";
+#define WINTEGRA_UNKNOWN_CHIP_STR        "UNKNOWN_CHIP"
+
+unsigned int __init get_physical_memory_layout(void)
+{
+  int i;
+  char *str;
+  wds_board_descr_t      *pWds;
+  wds_per_winpath_t      *pWp;
+  wds_winpath_mem_bank_t *pBank;
+
+  if (((unsigned int *)WINMON_FUNCTION_TABLE)[WINMON_GET_MULTI_WP_DESC] == 0xffffffff) {
+     printk("\n*** FATAL ERROR: WINMON MUST BE UPGRADED. CAN'T SUPPORT AUTO MEM MAP ***\n\n");
+     return -1;
+  }
+
+  pWds = (wds_board_descr_t *)Winmon_get_multi_wp_desc();
+
+  memcpy(&wds, pWds, sizeof(wds));
+
+  if (((unsigned int *)WINMON_FUNCTION_TABLE)[WINMON_GET_MINIMON_DESC] == 0xffffffff) {
+    printk("\n*** FATAL ERROR: WINMON MUST BE UPGRADED. CAN'T SUPPORT DUAL CORE ***\n\n");
+    return -1;
+  }
+
+  memcpy(&minimon_desc, Winmon_get_minimon_desc(), sizeof(minimon_descr_t));
+
+  pWds = &wds;
+  pWp = &(pWds->wds_wp[0]);
+
+  switch (pWds->wds_chip) {
+  case WINTEGRA_WINPATH3_REV_A_ID:
+	str = WINTEGRA_WINPATH3_REV_A_STR;
+	break;
+  case WINTEGRA_WINPATH3_REV_B_ID:
+	str = WINTEGRA_WINPATH3_REV_B_STR;
+	break;
+  case WINTEGRA_SUPERLITE_REV_A_ID:
+	str = WINTEGRA_WINPATH3SL_REV_A_STR;
+	break;
+  case WINTEGRA_SUPERLITE_REV_B_ID:
+	str = WINTEGRA_WINPATH3SL_REV_B_STR;
+	break;
+  case WINTEGRA_SUPERLITE_REV_B_1_ID:
+	str = WINTEGRA_WINPATH3SL_REV_B_1_STR;
+	break;
+  case WINTEGRA_SPO_ID:
+	str = WINTEGRA_WINPATH3_SPO_STR;
+	break;
+  case WINTEGRA_WINPATH3_REV_B_2_ID:
+	str = WINTEGRA_WINPATH3_REV_B_2_STR;
+	break;
+
+  default:
+	printk("\n*** Unknown chip id was read from Winmon. ID 0x%08x ***\n", pWds->wds_chip);
+	printk("PROBABLY WINMON SHOULD BE UPGRADED\n\n");
+	str = WINTEGRA_UNKNOWN_CHIP_STR;
+  }
+
+  printk("\n************************************\n");
+  printk("******** BOARD CONFIGURATION *******\n");
+  printk("************************************\n");
+  printk("No. of winpath %d\n", pWds->wds_winpath_no);
+  printk("Chip: %s\n", str);
+  printk("WinMon ver: %d.%d.%d\n", ((pWds->wds_winmon_ver&0xff000000)>>24), ((pWds->wds_winmon_ver&0x00ff0000)>>16), ((pWds->wds_winmon_ver&0x0000ff00)>>8));
+  printk("Board external clock %d Hz\n", pWds->wds_clock_freq_external);
+  printk("RIF base: 0x%08x\n", pWds->wds_winpath_phys_rif_base);
+  printk("WP No. of banks %d\n\n", pWp->wds_winpath_no_of_banks);
+  printk("Frequencies:\n");
+  printk("MIPS freq: %d Hz\n", pWp->wp_clock_freq_mips);
+  for (i = 0; i < 5; i++)
+     printk("SIU%d freq: %d Hz\n", i+1, pWp->wp_clock_freq_siu[i]);
+  printk("\n************ BANKS INFO ************\n");
+  for (i = 0; i < 7; i++) {
+	pBank = &(pWp->wds_winpath_mem_banks[i]);
+
+	pBank->wp_application_bank_base_addr = pBank->wp_phys_bank_base_addr;
+	pBank->wp_application_bank_size      = pBank->wp_phys_bank_size;
+
+	if (pWds->wds_chip == WINTEGRA_SPO_ID) {
+		if (pBank->wp_bus == WDS3_SIU_BUS_PARAM_NUM) {
+		pBank->wp_application_bank_base_addr += pBank->wp_application_bank_size;
+		pBank->wp_application_bank_base_addr -= WDS_HOST_SIZE;
+		pBank->wp_application_bank_size       = WDS_HOST_SIZE;
+	}
+
+     } else if (pBank->wp_bus == WDS3_SIU_BUS_HOST_NUM) {
+	pBank->wp_application_bank_base_addr += pBank->wp_application_bank_size;
+	pBank->wp_application_bank_base_addr -= WDS_HOST_SIZE;
+	pBank->wp_application_bank_size       = WDS_HOST_SIZE;
+     }
+
+     printk("Bank %d: active %d, base 0x%08x, size 0x%08x -- [%s]\n", i, pBank->wp_bus_active, pBank->wp_phys_bank_base_addr, pBank->wp_phys_bank_size, pBank->wds_bank_name);
+  }
+  printk("************************************\n\n");
+
+  return 0;
+}
+
+
+unsigned int getHostSystemClock(int WpId)
+{
+  return wds.wds_wp[WpId].wp_clock_freq_siu[2];
+}
+
+unsigned int getMipsSystemClock(void)
+{
+  return wds.wds_wp[0].wp_clock_freq_mips;
+}
+
+int prom_putchar(char c)
+{
+  return WinMon_putchar(c);
+}
+
+static void __init mips_nmi_setup(void)
+{
+	void *base;
+	extern char except_vec_nmi;
+
+	base = cpu_has_veic ?
+		(void *)(CAC_BASE + 0xa80) :
+		(void *)(CAC_BASE + 0x380);
+	memcpy(base, &except_vec_nmi, 0x80);
+	flush_icache_range((unsigned long)base, (unsigned long)base + 0x80);
+}
+
+static void __init mips_ejtag_setup(void)
+{
+	void *base;
+	extern char except_vec_ejtag_debug;
+
+	base = cpu_has_veic ?
+		(void *)(CAC_BASE + 0xa00) :
+		(void *)(CAC_BASE + 0x300);
+	memcpy(base, &except_vec_ejtag_debug, 0x80);
+	flush_icache_range((unsigned long)base, (unsigned long)base + 0x80);
+}
+
+extern struct plat_smp_ops msmtc_smp_ops;
+
+void __init prom_init(void)
+{
+#ifdef CONFIG_MIPS_CMP
+  int result;
+#endif
+
+  prom_argc = fw_arg0;
+  _prom_argv = (int *) fw_arg1;
+  _prom_envp = (int *) fw_arg2;
+
+  board_nmi_handler_setup = mips_nmi_setup;
+  board_ejtag_handler_setup = mips_ejtag_setup;
+
+  pr_info("\nLINUX started...\n");
+
+  if (get_physical_memory_layout())
+     return;
+
+  prom_init_cmdline();
+  prom_meminit();
+
+#ifdef CONFIG_MIPS_CMP
+  if (result)
+    register_smp_ops(&cmp_smp_ops);
+#endif
+#ifdef CONFIG_MIPS_MT_SMP
+#ifdef CONFIG_MIPS_CMP
+  if (!result)
+    register_smp_ops(&vsmp_smp_ops);
+#else
+  register_smp_ops(&vsmp_smp_ops);
+#endif
+#endif
+#ifdef CONFIG_MIPS_MT_SMTC
+  register_smp_ops(&msmtc_smp_ops);
+#endif
+}
+
+extern void wds3_be_init(void);
+extern int wds3_be_handler(struct pt_regs *regs, int is_fixup);
+
+const char *get_system_type(void)
+{
+  return "Wintegra WDS3 WinPath3 Development System";
+}
+
+void __init plat_mem_setup(void)
+{
+  mips_reboot_setup();
+
+  board_be_init = wds3_be_init;
+  board_be_handler = wds3_be_handler;
+  spin_lock_init(&wmm_cmd_lock);
+}
+
+/*******************************************************************/
+/*   Winpath WMM host command support                              */
+/*******************************************************************/
+void winpath_wmm_host_cmd_execute(winpath_wmm_host_cmd *wmm_host_cmd_reg)
+{
+   volatile winpath_wmm *wmm_base = (winpath_wmm *)wmm_host_cmd_reg->base;
+   unsigned long timeout = WINPATH_WMM_HOST_CMD_TIMEOUT;
+
+   local_irq_disable();
+   spin_lock(&wmm_cmd_lock);
+
+   while ((wmm_base->hcr_cmd & WINPATH_WMM_CMD_VALID) && timeout-- > 0)
+	;
+   /* return, do nothing if previous command is not completed */
+   if (timeout == 0) {
+      wmm_host_cmd_reg->status = WINPATH_WMM_HOST_CMD_PREV_FAILED;
+      spin_unlock(&wmm_cmd_lock);
+      local_irq_enable();
+      return;
+   }
+
+   /* put the block address to the WMM registers */
+   wmm_base->hcr_reg = wmm_host_cmd_reg->reg;
+   wmm_base->hcr_addr = wmm_host_cmd_reg->address;
+
+   /* issue the command */
+   wmm_base->hcr_cmd = wmm_host_cmd_reg->cmd;
+
+   /* check if the command has been succeeded */
+   timeout = WINPATH_WMM_HOST_CMD_TIMEOUT;
+   while ((wmm_base->hcr_cmd & WINPATH_WMM_CMD_VALID) && timeout-- > 0)
+	;
+   if (timeout == 0) {
+      wmm_host_cmd_reg->status = WINPATH_WMM_HOST_CMD_CURR_FAILED;
+      spin_unlock(&wmm_cmd_lock);
+      local_irq_enable();
+      return;
+   }
+
+   wmm_host_cmd_reg->cmd = wmm_base->hcr_cmd;
+   wmm_host_cmd_reg->reg = wmm_base->hcr_reg;
+   wmm_host_cmd_reg->address = wmm_base->hcr_addr;
+   wmm_host_cmd_reg->status = WINPATH_WMM_HOST_CMD_OK;
+
+   spin_unlock(&wmm_cmd_lock);
+   local_irq_enable();
+   return;
+}
+
+
+#if WINPATH_INSTRUMENTATION_ENABLE
+int inst_init;
+struct inst_data {
+  unsigned int ts;
+  unsigned int code;
+};
+
+struct inst_struct {
+  unsigned int next;
+  unsigned int limit;
+  struct inst_data data[0];
+};
+
+struct inst_struct *inst_base = (struct inst_struct *) 0xac000000;
+volatile unsigned int *inst_ts = (volatile unsigned int *) 0xbd021da8;
+
+void inst_mark(unsigned int code)
+{
+  unsigned int next;
+  /* initialize first time */
+  if (inst_init == 0) {
+    inst_base->next = 0;
+    inst_base->limit = 4096;
+    inst_init = 1;
+  }
+  /* record mark */
+  next = inst_base->next;
+  if (next < inst_base->limit) {
+    inst_base->next = next + 1;
+    inst_base->data[next].ts = *inst_ts;
+    inst_base->data[next].code = code;
+  }
+}
+
+EXPORT_SYMBOL_GPL(inst_mark);
+#endif
+
+EXPORT_SYMBOL_GPL(winpath_wmm_host_cmd_execute);
-- 
1.7.0.4

