From ac43bb2314a1ffc25516561e45b4455316cec599 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 28 Mar 2012 10:57:40 +0800
Subject: [PATCH 22/25] netdev/dpa: add the support to adjust the link speed
 for the dtsec used by userspace

Currently the userspace driver for dtsec doesn't support to adjust
the link speed according to the auto negotiation of phy. So the dtsec
can only works in 1000M mode by default. In order to fix this
limitation, we add the support to adjust the link speed of dtsec by
adding a "fixed-link" property in the mac device node. For example,
if you want to set the dtsec to 100M duplex mode, you can add the
following to the mac device mode.

	fixed-link = <0 1 100 0 0>;

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/dpa/dpaa_eth.c |    3 +++
 drivers/net/dpa/mac-api.c  |   28 ++++++++++++++++++++++++++++
 drivers/net/dpa/mac.h      |    1 +
 3 files changed, 32 insertions(+)

diff --git a/drivers/net/dpa/dpaa_eth.c b/drivers/net/dpa/dpaa_eth.c
index a3da10c..45002f6 100644
--- a/drivers/net/dpa/dpaa_eth.c
+++ b/drivers/net/dpa/dpaa_eth.c
@@ -2666,6 +2666,9 @@ dpaa_eth_probe(struct of_device *_of_dev, const struct of_device_id *match)
 		for_each_port_device(i, mac_dev->port_dev)
 			fm_port_enable(mac_dev->port_dev[i]);
 
+		if (mac_dev->adjust_link)
+			mac_dev->adjust_link(mac_dev);
+
 		return 0;
 	}
 
diff --git a/drivers/net/dpa/mac-api.c b/drivers/net/dpa/mac-api.c
index b514713..1632e34 100644
--- a/drivers/net/dpa/mac-api.c
+++ b/drivers/net/dpa/mac-api.c
@@ -579,6 +579,33 @@ static int __cold fm_rtc_set_drift(struct net_device *net_dev, uint32_t drift)
 	return _errno;
 }
 
+/*
+ * For the dtsec used by usdpaa, we support to set the mac speed by
+ * adding a "fixed-link" property in DTB.
+ */
+static int __cold dtsec_adjust_link(struct mac_device *mac_dev)
+{
+	struct device_node *mac_node = to_of_device(mac_dev->dev)->node;
+	const u32 *phy;
+	int _errno = 0;
+	t_Error	err;
+	int sz;
+
+	phy = of_get_property(mac_node, "fixed-link", &sz);
+	if (!phy || sz < sizeof(*phy) * 5)
+		return _errno;
+
+	err = FM_MAC_AdjustLink(
+			((struct mac_priv_s *)macdev_priv(mac_dev))->mac,
+			phy[2], phy[1]);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0))
+		dpaa_eth_err(mac_dev->dev, "FM_MAC_AdjustLink() = 0x%08x\n",
+				err);
+
+	return _errno;
+}
+
 static int __cold set_pause_frame(struct mac_device *mac_dev, struct ethtool_pauseparam *pause)
 {
 	int     _errno_get, _errno = 0;
@@ -685,6 +712,7 @@ static void __devinit __cold setup_dtsec(struct mac_device *mac_dev)
 	mac_dev->set_pause_frame 	= set_pause_frame;
 	mac_dev->get_pause_frame	= get_pause_frame;
 	mac_dev->get_stats		= mac_get_statistics;
+	mac_dev->adjust_link		= dtsec_adjust_link;
 }
 
 static void __devinit __cold setup_xgmac(struct mac_device *mac_dev)
diff --git a/drivers/net/dpa/mac.h b/drivers/net/dpa/mac.h
index b391e0f..e0ac555 100644
--- a/drivers/net/dpa/mac.h
+++ b/drivers/net/dpa/mac.h
@@ -94,6 +94,7 @@ struct mac_device {
 	int (*set_pause_frame)(struct mac_device *mac_dev, struct ethtool_pauseparam *pause);
 	int (*get_pause_frame)(struct mac_device *mac_dev, bool *tx, bool *rx);
 	int (*get_stats)(struct mac_device *mac_dev, uint64_t *p_Statistics);
+	int (*adjust_link)(struct mac_device *mac_dev);
 };
 
 struct mac_address {
-- 
1.7.9.7

