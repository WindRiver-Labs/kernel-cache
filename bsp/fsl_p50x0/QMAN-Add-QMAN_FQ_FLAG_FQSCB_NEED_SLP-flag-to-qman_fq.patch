From b3dfba5db192dba2cd6cf192fd51d0e1e6cf0ebb Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Fri, 13 Jan 2012 17:06:30 +0800
Subject: [PATCH 16/25] QMAN:Add QMAN_FQ_FLAG_FQSCB_NEED_SLP flag to qman_fq

On preempt-rt kernel, during qman-self testing, sleepable spinlocks
introduce call trace:

BUG: sleeping function called from invalid context
at linux/kernel/rtmutex.c:707
pcnt: 1 0 in_atomic(): 1, irqs_disabled(): 1, pid: 1430, name: modprobe
Call Trace:
[eae33db0] [c0007b10] show_stack+0x44/0x160 (unreliable)
[eae33de0] [c0034bb4] __might_sleep+0xe4/0x108
[eae33df0] [c0639d2c] rt_spin_lock+0x38/0xb4
[eae33e00] [c003a0cc] __wake_up+0x24/0x58
[eae33e20] [f955eee8] cb_fqs+0x54/0x70 [qman_tester]
[eae33e30] [c05637b8] qman_retire_fq+0x324/0x438
[eae33ea0] [f955f2f4] qman_test_high+0x1cc/0x2d8 [qman_tester]
[eae33ee0] [f955e018] test_init+0x14/0x2c [qman_tester]
[eae33ef0] [c0001d44] do_one_initcall+0x3c/0x1e0
[eae33f20] [c0085bb0] sys_init_module+0xf8/0x21c
[eae33f40] [c0010fc4] ret_from_syscall+0x0/0x4
 --- Exception: c00 at 0xff63564
    LR = 0x10003380

This is caused by the fqs callback function of qman_test_high
case involved a sleepable spinlock introduced by wake_up(), and the
callback is invoked from fqs_retire_fqs(), which implements a context
disabled preempt & irq.

The atomic context is used to protect key structure for qman driver.
While the callback of qman_test_high didn't touch such resource. So it
is free to invoke the callback outside the atomic context.

As result, the patch adds QMAN_FQ_FLAG_FQSCB_NEED_SLP  flag to qman_fq
structure. If the fqs callback function involves sleepable routine,
driver needs set the correspond bit when creating fq.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c      |   15 ++++++++++++---
 drivers/staging/fsl_qbman/qman_test_high.c |    3 ++-
 include/linux/fsl_qman.h                   |    2 ++
 3 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 18fa3647..fc34852 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -1719,6 +1719,7 @@ int qman_retire_fq(struct qman_fq *fq, u32 *flags)
 	unsigned long irqflags __maybe_unused;
 	int rval;
 	u8 res;
+	int unlocked = 0;
 
 	DPA_ASSERT((fq->state == qman_fq_state_parked) ||
 		(fq->state == qman_fq_state_sched));
@@ -1781,6 +1782,12 @@ int qman_retire_fq(struct qman_fq *fq, u32 *flags)
 #else
 			msg.fq.contextB = (u32)fq;
 #endif
+			if (fq_isset(fq, QMAN_FQ_FLAG_FQSCB_NEED_SLP)) {
+				FQUNLOCK(fq);
+				PORTAL_IRQ_UNLOCK(p, irqflags);
+				put_affine_portal();
+				unlocked = 1;
+			}
 			fq->cb.fqs(p, fq, &msg);
 		}
 	} else if (res == QM_MCR_RESULT_PENDING) {
@@ -1791,9 +1798,11 @@ int qman_retire_fq(struct qman_fq *fq, u32 *flags)
 		table_del_fq(p, fq);
 	}
 out:
-	FQUNLOCK(fq);
-	PORTAL_IRQ_UNLOCK(p, irqflags);
-	put_affine_portal();
+	if (unlocked == 0) {
+		FQUNLOCK(fq);
+		PORTAL_IRQ_UNLOCK(p, irqflags);
+		put_affine_portal();
+	}
 	return rval;
 }
 EXPORT_SYMBOL(qman_retire_fq);
diff --git a/drivers/staging/fsl_qbman/qman_test_high.c b/drivers/staging/fsl_qbman/qman_test_high.c
index e394640..d10de62 100644
--- a/drivers/staging/fsl_qbman/qman_test_high.c
+++ b/drivers/staging/fsl_qbman/qman_test_high.c
@@ -37,7 +37,8 @@
 
 #define CGR_ID		27
 #define POOL_ID		2
-#define FQ_FLAGS	QMAN_FQ_FLAG_DYNAMIC_FQID
+#define FQ_FLAGS	(QMAN_FQ_FLAG_DYNAMIC_FQID |\
+			QMAN_FQ_FLAG_FQSCB_NEED_SLP)
 #define NUM_ENQUEUES	10
 #define NUM_PARTIAL	4
 #define PORTAL_SDQCR	(QM_SDQCR_SOURCE_CHANNELS | \
diff --git a/include/linux/fsl_qman.h b/include/linux/fsl_qman.h
index 1e38edb..c059e2e 100644
--- a/include/linux/fsl_qman.h
+++ b/include/linux/fsl_qman.h
@@ -1045,6 +1045,8 @@ struct qman_cgr {
 #define QMAN_FQ_FLAG_LOCKED          0x00000008 /* multi-core locking */
 #define QMAN_FQ_FLAG_AS_IS           0x00000010 /* query h/w state */
 #define QMAN_FQ_FLAG_DYNAMIC_FQID    0x00000020 /* (de)allocate fqid */
+/* indicates fqs' cb needs sleep */
+#define QMAN_FQ_FLAG_FQSCB_NEED_SLP  0x00000040
 
 /* Flags to qman_destroy_fq() */
 #define QMAN_FQ_DESTROY_PARKED       0x00000001 /* FQ can be parked or OOS */
-- 
1.7.9.7

