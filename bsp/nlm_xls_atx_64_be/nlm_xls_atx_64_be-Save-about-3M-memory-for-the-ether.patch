From 703e7f93453c4bb23667329c77ceb84361678ee2 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Fri, 10 Sep 2010 08:56:17 -0700
Subject: [PATCH 2/2] nlm_xls_atx_64_be: Save about 3M memory for the ethernet driver

The size of struct user_mac_data is only:

	sizeof(struct user_mac_data) = 0x4f2098

But the phnx_user_mac.c ethernet driver tries to allocate 8M memory for
it, which has wasted about 3M memory.

This patch saves this 3M memory via calculating the PHNX_USER_MAC_SIZE
dynamically when compiling instead of hard-cording it as a too high
value.

BTW, the other related places are also cleaned up in this effort.

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/mips/include/asm/rmi/phnx_user_mac.h |    2 +-
 drivers/net/phoenix_user_mac.c            |   14 +++++++-------
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/arch/mips/include/asm/rmi/phnx_user_mac.h b/arch/mips/include/asm/rmi/phnx_user_mac.h
index 57a7209..f52477b 100644
--- a/arch/mips/include/asm/rmi/phnx_user_mac.h
+++ b/arch/mips/include/asm/rmi/phnx_user_mac.h
@@ -32,7 +32,7 @@
 #define _ASM_RMI_PHNX_USER_MAC_H
 
 #define PHNX_USER_MAC_MMAP_VIRT_START 0x60000000
-#define PHNX_USER_MAC_SIZE            0x800000
+#define PHNX_USER_MAC_SIZE            ALIGN(sizeof(struct user_mac_data), PAGE_SIZE)
 
 #ifndef __ASSEMBLY__
 #include <asm/rmi/sim.h>
diff --git a/drivers/net/phoenix_user_mac.c b/drivers/net/phoenix_user_mac.c
index dbb8be6..0159e45 100644
--- a/drivers/net/phoenix_user_mac.c
+++ b/drivers/net/phoenix_user_mac.c
@@ -855,12 +855,12 @@ int user_mac_ioctl(struct inode *inode, struct file *filp,
 			copy_from_user(&user_vaddr_len, ptr + 1,
 				       sizeof(*ptr));
 
-			if (user_vaddr_len < MB(8ULL)) {
+			if (user_vaddr_len < PHNX_USER_MAC_SIZE) {
 				printk
-				    ("\nCan't init usermac buffers with < 8MB buffer\n");
+				    ("\nCan't init usermac buffers with < %dMB buffer\n", (int) (PHNX_USER_MAC_SIZE >> 20));
 				return -ENOMEM;
 			} else {
-				no_of_pages = MB(8ULL) / KB(4);
+				no_of_pages = PHNX_USER_MAC_SIZE / PAGE_SIZE;
 				page_array = (struct page **) kmalloc
 				    (sizeof(struct page *) * (no_of_pages),
 				     GFP_KERNEL);
@@ -873,12 +873,12 @@ int user_mac_ioctl(struct inode *inode, struct file *filp,
 				    ("User Space Virtual ADdress [%#lx]",
 				     (unsigned long) user_vaddr);
 				for (i = 0; i < no_of_pages;
-				     i++, user_vaddr += KB(4)) {
+				     i++, user_vaddr += PAGE_SIZE) {
 					page_array[i] =
 					    user_vaddr_to_page((unsigned
 								long)
 							       user_vaddr,
-							       KB(4));
+							       PAGE_SIZE);
 					if (!page_array[i]) {
 						kfree(page_array);
 						printk
@@ -1303,9 +1303,9 @@ static void user_mac_mem_init(void)
 #ifdef CONFIG_HUGETLBFS
 static int __init xlr_hybrid_early_init(char *str)
 {
-	if (HPAGE_SIZE < MB(8)) {
+	if (HPAGE_SIZE < PHNX_USER_MAC_SIZE) {
 		printk
-		    ("Hugetlb user mac is not supported with < 8MB huge page size\n");
+		    ("Hugetlb user mac is not supported with < %dMB huge page size\n", (int) (PHNX_USER_MAC_SIZE >> 20));
 		return 0;
 	}
 	if (strcmp(str, "no") == 0) {
-- 
1.6.5.2

