From dd39888ed29aa2ce79974d9e47faedfea477792a Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Wed, 19 May 2010 23:57:28 +0800
Subject: [PATCH 02/38] nlm_xls_atx_64_be: platform exception support

When executing CP2 instructions(MSGSND, MSGLD, MSDWAIT) will cause coprocessor
unusable exception if the CU2 bit of STATUS is zero. Adding related exception
handler to allow CP2 access in user and kernel space.

And add the exception support of XLR/XLS when executing trap_init.

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/kernel/traps.c    |   43 +++++++++++++++++++++++++++++++------
 arch/mips/rmi/phoenix/cpu.c |   49 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 85 insertions(+), 7 deletions(-)
 create mode 100644 arch/mips/rmi/phoenix/cpu.c

diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index baa1748..c69ca6f 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -52,6 +52,7 @@
 #include <asm/stacktrace.h>
 #include <asm/irq.h>
 #include <asm/uasm.h>
+#include <asm/war.h>
 
 /*
  * Also used in unaligned.c and fault.c.
@@ -95,6 +96,21 @@ void (*board_nmi_handler_setup)(void);
 void (*board_ejtag_handler_setup)(void);
 void (*board_bind_eic_interrupt)(int irq, int regset);
 
+extern unsigned long phnx_ebase;
+
+static inline int rmi_xls_war(void)
+{
+	return RMI_XLS_WAR;
+}
+
+static inline int rmi_xls_32bit(void)
+{
+#if defined(CONFIG_RMI_PHOENIX) && defined(CONFIG_32BIT)
+	return 1;
+#else
+	return 0;
+#endif
+}
 
 static void show_raw_backtrace(unsigned long reg29)
 {
@@ -1477,6 +1493,13 @@ void __cpuinit per_cpu_trap_init(void)
 		secondaryTC = 1;
 #endif /* CONFIG_MIPS_MT_SMTC */
 
+	if (rmi_xls_32bit()) {
+		/* Some firmware leaves the BEV flag set, clear it. */
+		clear_c0_status(ST0_CU1|ST0_CU2|ST0_CU3|ST0_BEV|ST0_KX);
+	}else {
+		clear_c0_status(ST0_CU1|ST0_CU2|ST0_CU3|ST0_BEV);
+	}
+
 	/*
 	 * Disable coprocessors and select 32-bit or 64-bit addressing
 	 * and the 16/32 or 32/32 FPR register model.  Reset the BEV
@@ -1630,6 +1653,10 @@ void __init trap_init(void)
 			ebase += (read_c0_ebase() & 0x3ffff000);
 	}
 
+	if (rmi_xls_war()){
+		ebase = phnx_ebase;
+	}
+
 	per_cpu_trap_init();
 
 	/*
@@ -1734,13 +1761,15 @@ void __init trap_init(void)
 
 	set_except_vector(26, handle_dsp);
 
-	if (cpu_has_vce)
-		/* Special exception: R4[04]00 uses also the divec space. */
-		memcpy((void *)(ebase + 0x180), &except_vec3_r4000, 0x100);
-	else if (cpu_has_4kex)
-		memcpy((void *)(ebase + 0x180), &except_vec3_generic, 0x80);
-	else
-		memcpy((void *)(ebase + 0x080), &except_vec3_generic, 0x80);
+	if (!rmi_xls_war()) {
+		if (cpu_has_vce)
+			/* Special exception: R4[04]00 uses also the divec space. */
+			memcpy((void *)(ebase + 0x180), &except_vec3_r4000, 0x100);
+		else if (cpu_has_4kex)
+			memcpy((void *)(ebase + 0x180), &except_vec3_generic, 0x80);
+		else
+			memcpy((void *)(ebase + 0x080), &except_vec3_generic, 0x80);
+	}
 
 	local_flush_icache_range(ebase, ebase + 0x400);
 	flush_tlb_handlers();
diff --git a/arch/mips/rmi/phoenix/cpu.c b/arch/mips/rmi/phoenix/cpu.c
new file mode 100644
index 0000000..beb304d
--- /dev/null
+++ b/arch/mips/rmi/phoenix/cpu.c
@@ -0,0 +1,49 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2010 Wind River Systems,
+ *   written by Jack Tan <jack.tan@windriver.com>
+ */
+#include <linux/init.h>
+#include <linux/irqflags.h>
+#include <linux/notifier.h>
+#include <linux/prefetch.h>
+#include <linux/sched.h>
+
+#include <asm/cop2.h>
+#include <asm/current.h>
+#include <asm/mipsregs.h>
+#include <asm/page.h>
+
+extern __u64 xlr_cp2_exceptions[];
+
+static int cnmips_cu2_call(struct notifier_block *nfb, unsigned long action,
+        void *data)
+{
+	unsigned long flags;
+
+	switch (action) {
+	case CU2_EXCEPTION:
+		local_irq_save(flags);
+		set_c0_status(ST0_CU2);
+		KSTK_STATUS(current) |= ST0_CU2;
+		/* increment the cp2 exception stats */
+		xlr_cp2_exceptions[smp_processor_id()]++;
+		local_irq_restore(flags);
+		return NOTIFY_BAD;      /* Don't call default notifier */
+	}
+
+	return NOTIFY_OK;               /* Let default notifier send signals */
+}
+
+static struct notifier_block cnmips_cu2_notifier = {
+        .notifier_call = cnmips_cu2_call,
+};
+
+static int cnmips_cu2_setup(void)
+{
+        return register_cu2_notifier(&cnmips_cu2_notifier);
+}
+early_initcall(cnmips_cu2_setup);
-- 
1.6.5.2

