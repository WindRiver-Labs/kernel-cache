From f3dba283936a3d9059c9f018f2c2756845948e1b Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Fri, 21 May 2010 13:07:28 +0800
Subject: [PATCH 28/38] nlm_xls_atx_64_be: driver enable usb to support for above 4g memory

driver enable usb to support for above 4g memory

This patch is from RMI SDK 1.7.0

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/kernel/setup.c |   59 ++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 57 insertions(+), 2 deletions(-)

diff --git a/arch/mips/kernel/setup.c b/arch/mips/kernel/setup.c
index f9513f9..1a799b8 100644
--- a/arch/mips/kernel/setup.c
+++ b/arch/mips/kernel/setup.c
@@ -32,6 +32,9 @@
 #include <asm/smp-ops.h>
 #include <asm/system.h>
 
+#include <asm/rmi/sim.h>
+#include <asm/rmi/debug.h>
+
 struct cpuinfo_mips cpu_data[NR_CPUS] __read_mostly;
 
 EXPORT_SYMBOL(cpu_data);
@@ -106,11 +109,21 @@ void __init add_memory_region(phys_t start, phys_t size, long type)
 	boot_mem_map.nr_map++;
 }
 
+#ifdef CONFIG_RMI_PHOENIX
+int avail_mem_above_4G;
+int force_usb __initdata = 0;
+static int __init xls_force_usb(char *p)
+{
+	force_usb = 1;
+	return 0;
+}
+early_param("forceusb", xls_force_usb);
+#endif
+
 static void __init print_memory_map(void)
 {
 	int i;
 	const int field = 2 * sizeof(unsigned long);
-
 	for (i = 0; i < boot_mem_map.nr_map; i++) {
 		printk(KERN_INFO " memory: %0*Lx @ %0*Lx ",
 		       field, (unsigned long long) boot_mem_map.map[i].size,
@@ -127,12 +140,50 @@ static void __init print_memory_map(void)
 			printk(KERN_CONT "(reserved)\n");
 			break;
 		default:
-			printk(KERN_CONT "type %lu\n", boot_mem_map.map[i].type);
+			printk(KERN_CONT "type %llu\n",
+					(unsigned long long)boot_mem_map.map[i].type);
 			break;
 		}
 	}
 }
 
+#if defined(CONFIG_RMI_PHOENIX)
+/* This routine is useful when USB is desired on
+ * 64-Bit Linux with DRAM mapped >4G. On such systems,
+ * since the XLS USB controller is 32-bit, USB is
+ * disabled. Use command line option 'forceusb' to
+ * enable it; This adjusts the mapped available mem
+ * to a max of till 0xFFFFFFFF.
+ */
+static void __init tweak_avail_dram_map(void) {
+
+	int j=0;
+	int nrmap_ctr = (boot_mem_map.nr_map - 1);
+
+	avail_mem_above_4G = 0;
+
+	for (j = nrmap_ctr; j >= 0; j--) {
+		if ((boot_mem_map.map[j].addr + boot_mem_map.map[j].size)
+			> 0x100000000ULL) {
+			avail_mem_above_4G++;
+#ifdef CONFIG_64BIT
+			if (force_usb) {
+				printk(KERN_WARNING "[USB]:Re-adjusting Available DRAM map\n");
+				if (boot_mem_map.map[j].addr > 0x100000000ULL) {
+					boot_mem_map.nr_map--;
+				}
+				else {
+					/* Reclaim whatever we can... */
+					boot_mem_map.map[j].size =
+						0x100000000ULL - boot_mem_map.map[j].addr;
+				}
+			}
+#endif
+		}
+	}
+}
+#endif
+
 /*
  * Manage initrd
  */
@@ -486,6 +537,10 @@ static void __init arch_mem_init(char **cmdline_p)
 		print_memory_map();
 	}
 
+#ifdef CONFIG_RMI_PHOENIX
+	tweak_avail_dram_map();
+#endif
+
 	bootmem_init();
 	sparse_init();
 	paging_init();
-- 
1.6.5.2

