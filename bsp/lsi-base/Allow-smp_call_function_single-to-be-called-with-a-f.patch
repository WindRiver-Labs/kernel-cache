From 7ecd2e6969e226999bd592b5279f349ab71056de Mon Sep 17 00:00:00 2001
From: John Jacques <john.jacques@lsi.com>
Date: Fri, 20 Jun 2014 16:03:56 -0500
Subject: [PATCH 2/3] Allow smp_call_function_single() to be called with a
 function that doesn't return.

the patch come from:
https://github.com/lsigithub/lsi_axxia_yocto/commit/280cd8d6cdac9b3cb3bf618058c239083f8c2715

Signen-off-by: John Jacques <john.jacques@lsi.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 kernel/smp.c |   19 +++++++++++++++++--
 1 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/kernel/smp.c b/kernel/smp.c
index d5f3238..01406dc 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -25,6 +25,7 @@ static struct {
 
 enum {
 	CSD_FLAG_LOCK		= 0x01,
+	CSD_FLAG_NOWAIT		= 0x02,
 };
 
 struct call_function_data {
@@ -268,6 +269,8 @@ void generic_smp_call_function_single_interrupt(void)
 
 	while (!list_empty(&list)) {
 		struct call_single_data *data;
+		void (*func)(void *);
+		void *info;
 
 		data = list_entry(list.next, struct call_single_data, list);
 		list_del(&data->list);
@@ -278,12 +281,21 @@ void generic_smp_call_function_single_interrupt(void)
 		 * so save them away before making the call:
 		 */
 		data_flags = data->flags;
-
-		data->func(data->info);
+		func = data->func;
+		info = data->info;
 
 		/*
+		 * Unlock before calling func so that func never has
+		 * to return.
+		 *
 		 * Unlocked CSDs are valid through generic_exec_single():
 		 */
+		if ((data_flags & CSD_FLAG_LOCK) &&
+		    (data_flags & CSD_FLAG_NOWAIT))
+			csd_unlock(data);
+
+		func(info);
+
 		if (data_flags & CSD_FLAG_LOCK)
 			csd_unlock(data);
 	}
@@ -337,6 +349,9 @@ int smp_call_function_single(int cpu, smp_call_func_t func, void *info,
 
 			csd_lock(data);
 
+			if (!wait)
+				data->flags |= CSD_FLAG_NOWAIT;
+
 			data->func = func;
 			data->info = info;
 			generic_exec_single(cpu, data, wait);
-- 
1.7.5.4

