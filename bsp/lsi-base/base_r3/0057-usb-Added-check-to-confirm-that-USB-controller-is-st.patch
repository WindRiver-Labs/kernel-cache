From 9f73351715ac7ae74f97065af2802258d2c71611 Mon Sep 17 00:00:00 2001
From: SangeethaRao <sangeetha.rao@lsi.com>
Date: Thu, 10 Oct 2013 14:53:23 -0500
Subject: [PATCH 57/75] usb: Added check to confirm that USB controller is
 stopped before trying to reset it

Signed-off-by: SangeethaRao <sangeetha.rao@lsi.com>
---
 drivers/usb/host/ehci-ci13612.c |   24 ++++++++++++++++++++++++
 1 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/host/ehci-ci13612.c b/drivers/usb/host/ehci-ci13612.c
index b7bcac0..60694d0 100644
--- a/drivers/usb/host/ehci-ci13612.c
+++ b/drivers/usb/host/ehci-ci13612.c
@@ -85,6 +85,7 @@ static int ci13612_ehci_init(struct usb_hcd *hcd)
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
 	int retval = 0;
 	int len;
+	int value, count = 5;
 
 	/* EHCI registers start at offset 0x100 */
 	ehci->caps = hcd->regs + 0x100;
@@ -98,6 +99,29 @@ static int ci13612_ehci_init(struct usb_hcd *hcd)
 
 	ehci->sbrn = 0x20;
 
+	/* Reset is only allowed on a stopped controller,
+	 * ehci_reset assumes stopped state */
+	value = ehci_readl(ehci, &ehci->regs->command);
+	if (value & 0x1)
+	{
+		pr_info("ehci-ci13612 (ci13612_ehci_init): Controller Running - Trying to stop\n");
+		ehci_writel(ehci, value & 0xFFFE, &ehci->regs->command);
+		udelay(1);
+
+		/* Timed loop to try and stop the running Controller */
+		do {
+			value = ehci_readl(ehci, &ehci->regs->command);
+			udelay(1);
+			count--;
+		} while ((value & 0x1) && (count > 0));
+
+		if (value & 0x1) {
+			pr_err("ehci-ci13612: USB controller is in running state and cannot be"
+		       "stopped\n");
+			return -EFAULT;
+		}
+	}
+
 	/* reset and halt controller */
 	ehci_reset(ehci);
 
-- 
1.7.5.4

