From 151439699a42b5ecd22a1241f6f186147ca5ab3f Mon Sep 17 00:00:00 2001
From: Minghuan Lian <Minghuan.Lian@freescale.com>
Date: Mon, 16 Mar 2015 10:15:34 +0800
Subject: [PATCH 270/451] e1000: workaround: checking frame size

There is very small possibility of reading incorrect length.
The patch drops the unexpected frame by checking length value.

Signed-off-by: Minghuan Lian <Minghuan.Lian@freescale.com>
[Xulin: Original patch taken from
Linux-LS1043A-SDK-V0.4-SOURCE-20150826-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/ethernet/intel/e1000e/netdev.c |    8 +++++++-
 1 files changed, 7 insertions(+), 1 deletions(-)

diff --git a/drivers/net/ethernet/intel/e1000e/netdev.c b/drivers/net/ethernet/intel/e1000e/netdev.c
index a651854..db7834a 100644
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@ -982,6 +982,9 @@ static bool e1000_clean_rx_irq(struct e1000_ring *rx_ring, int *work_done,
 				length -= 4;
 		}
 
+		if (length > adapter->max_frame_size)
+			goto next_desc;
+
 		total_rx_bytes += length;
 		total_rx_packets++;
 
@@ -1341,7 +1344,7 @@ static bool e1000_clean_rx_irq_ps(struct e1000_ring *rx_ring, int *work_done,
 
 		length = le16_to_cpu(rx_desc->wb.middle.length0);
 
-		if (!length) {
+		if (!length || length > adapter->max_frame_size) {
 			e_dbg("Last part of the packet spanning multiple descriptors\n");
 			dev_kfree_skb_irq(skb);
 			goto next_desc;
@@ -1527,6 +1530,9 @@ static bool e1000_clean_jumbo_rx_irq(struct e1000_ring *rx_ring, int *work_done,
 
 		length = le16_to_cpu(rx_desc->wb.upper.length);
 
+		if (length > adapter->max_frame_size)
+			goto next_desc;
+
 		/* errors is only valid for DD + EOP descriptors */
 		if (unlikely((staterr & E1000_RXD_STAT_EOP) &&
 			     ((staterr & E1000_RXDEXT_ERR_FRAME_ERR_MASK) &&
-- 
1.7.5.4

