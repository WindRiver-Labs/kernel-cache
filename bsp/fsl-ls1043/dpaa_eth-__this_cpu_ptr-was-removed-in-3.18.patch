From a78b05fae9f032c22678bedc5fb66e8f94be7308 Mon Sep 17 00:00:00 2001
From: Madalin Bucur <madalin.bucur@freescale.com>
Date: Thu, 9 Jul 2015 11:57:17 +0300
Subject: [PATCH 283/451] dpaa_eth: __this_cpu_ptr() was removed in 3.18

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
[Xulin: Original patch taken from
Linux-LS1043A-SDK-V0.4-SOURCE-20150826-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |   22 ++++++++++----------
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    2 +-
 .../net/ethernet/freescale/dpa/dpaa_eth_generic.c  |   20 +++++++++---------
 .../net/ethernet/freescale/dpa/dpaa_eth_macsec.c   |   10 ++++----
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c   |    6 ++--
 .../net/ethernet/freescale/dpa/dpaa_eth_shared.c   |   10 ++++----
 6 files changed, 35 insertions(+), 35 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 28a3983..a5fb44f 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -424,8 +424,8 @@ priv_rx_error_dqrr(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	count_ptr = __this_cpu_ptr(priv->dpa_bp->percpu_count);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
+	count_ptr = raw_cpu_ptr(priv->dpa_bp->percpu_count);
 
 	if (dpaa_eth_napi_schedule(percpu_priv, portal))
 		return qman_cb_dqrr_stop;
@@ -461,9 +461,9 @@ priv_rx_default_dqrr(struct qman_portal		*portal,
 	/* Trace the Rx fd */
 	trace_dpa_rx_fd(net_dev, fq, &dq->fd);
 
-	/* IRQ handler, non-migratable; safe to use __this_cpu_ptr here */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	count_ptr = __this_cpu_ptr(dpa_bp->percpu_count);
+	/* IRQ handler, non-migratable; safe to use raw_cpu_ptr here */
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
+	count_ptr = raw_cpu_ptr(dpa_bp->percpu_count);
 
 	if (unlikely(dpaa_eth_napi_schedule(percpu_priv, portal)))
 		return qman_cb_dqrr_stop;
@@ -495,7 +495,7 @@ priv_tx_conf_error_dqrr(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	if (dpaa_eth_napi_schedule(percpu_priv, portal))
 		return qman_cb_dqrr_stop;
@@ -520,8 +520,8 @@ priv_tx_conf_default_dqrr(struct qman_portal		*portal,
 	/* Trace the fd */
 	trace_dpa_tx_conf_fd(net_dev, fq, &dq->fd);
 
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use raw_cpu_ptr */
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	if (dpaa_eth_napi_schedule(percpu_priv, portal))
 		return qman_cb_dqrr_stop;
@@ -543,8 +543,8 @@ void priv_ern(struct qman_portal	*portal,
 
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use raw_cpu_ptr */
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	percpu_priv->stats.tx_dropped++;
 	percpu_priv->stats.tx_fifo_errors++;
@@ -640,7 +640,7 @@ static void dpaa_eth_poll_controller(struct net_device *net_dev)
 {
 	struct dpa_priv_s *priv = netdev_priv(net_dev);
 	struct dpa_percpu_priv_s *percpu_priv =
-		__this_cpu_ptr(priv->percpu_priv);
+		raw_cpu_ptr(priv->percpu_priv);
 	struct qman_portal *p;
 	const struct qman_portal_config *pc;
 	struct dpa_napi_portal *np;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 06ada5f..c701e13 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -229,7 +229,7 @@ void __cold dpa_timeout(struct net_device *net_dev)
 	struct dpa_percpu_priv_s *percpu_priv;
 
 	priv = netdev_priv(net_dev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	if (netif_msg_timer(priv))
 		netdev_crit(net_dev, "Transmit timeout latency: %u ms\n",
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
index 5bb4af0..bf065ee 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
@@ -291,8 +291,8 @@ dpa_generic_rx_err_dqrr(struct qman_portal *portal,
 
 	netdev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(netdev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	countptr = __this_cpu_ptr(priv->rx_bp->percpu_count);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
+	countptr = raw_cpu_ptr(priv->rx_bp->percpu_count);
 	fd = &dq->fd;
 
 	/* TODO: extract bpid from the fd; when multiple bps are supported
@@ -364,8 +364,8 @@ dpa_generic_rx_dqrr(struct qman_portal *portal,
 
 	netdev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(netdev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	countptr = __this_cpu_ptr(priv->rx_bp->percpu_count);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
+	countptr = raw_cpu_ptr(priv->rx_bp->percpu_count);
 
 	/* This is needed for TCP traffic as draining only on TX is not
 	 * enough
@@ -416,7 +416,7 @@ dpa_generic_rx_dqrr(struct qman_portal *portal,
 
 	dma_unmap_single(bp->dev, addr, bp->size, DMA_BIDIRECTIONAL);
 
-	countptr = __this_cpu_ptr(bp->percpu_count);
+	countptr = raw_cpu_ptr(bp->percpu_count);
 	(*countptr)--;
 
 	/* The skb is currently pointed at head + headroom. The packet
@@ -455,7 +455,7 @@ static void dpa_generic_drain_bp(struct dpa_bp *bp, u8 nbuf)
 	int ret, i;
 	struct bm_buffer bmb[8];
 	dma_addr_t addr;
-	int *countptr = __this_cpu_ptr(bp->percpu_count);
+	int *countptr = raw_cpu_ptr(bp->percpu_count);
 	int count = *countptr;
 	struct sk_buff **skbh;
 
@@ -586,7 +586,7 @@ static int __hot dpa_generic_tx(struct sk_buff *skb, struct net_device *netdev)
 {
 	struct dpa_generic_priv_s *priv = netdev_priv(netdev);
 	struct dpa_percpu_priv_s *percpu_priv =
-		__this_cpu_ptr(priv->percpu_priv);
+		raw_cpu_ptr(priv->percpu_priv);
 	struct rtnl_link_stats64 *percpu_stats = &percpu_priv->stats;
 	struct dpa_bp *bp = priv->draining_tx_bp;
 	struct sk_buff **skbh = NULL;
@@ -663,7 +663,7 @@ static int __hot dpa_generic_tx(struct sk_buff *skb, struct net_device *netdev)
 		goto xmit_failed;
 	}
 
-	countptr = __this_cpu_ptr(bp->percpu_count);
+	countptr = raw_cpu_ptr(bp->percpu_count);
 	(*countptr)++;
 
 	percpu_stats->tx_packets++;
@@ -900,8 +900,8 @@ static void dpa_generic_ern(struct qman_portal *portal,
 
 	netdev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(netdev);
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use raw_cpu_ptr */
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 	percpu_priv->stats.tx_dropped++;
 	percpu_priv->stats.tx_fifo_errors++;
 	count_ern(percpu_priv, msg);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_macsec.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_macsec.c
index 86fa3b4..6275648 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_macsec.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_macsec.c
@@ -1238,7 +1238,7 @@ static int macsec_rx_hook(void *ptr, struct net_device *net_dev, u32 fqid)
 
 	selected_macsec_priv = macsec_priv[net_dev->ifindex - 1];
 
-	percpu_priv_m = __this_cpu_ptr(selected_macsec_priv->percpu_priv);
+	percpu_priv_m = raw_cpu_ptr(selected_macsec_priv->percpu_priv);
 
 	if ((rx_fd->status & FM_FD_STAT_RX_MACSEC) != 0) {
 		if (netif_msg_hw(selected_macsec_priv) && net_ratelimit())
@@ -1275,11 +1275,11 @@ static enum dpaa_eth_hook_result macsec_tx_hook(struct sk_buff *skb,
 		return DPAA_ETH_CONTINUE;
 
 	dpa_priv = netdev_priv(net_dev);
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	macsec_percpu_priv = __this_cpu_ptr(selected_macsec_priv->percpu_priv);
-	dpa_percpu_priv = __this_cpu_ptr(dpa_priv->percpu_priv);
+	/* Non-migratable context, safe to use raw_cpu_ptr */
+	macsec_percpu_priv = raw_cpu_ptr(selected_macsec_priv->percpu_priv);
+	dpa_percpu_priv = raw_cpu_ptr(dpa_priv->percpu_priv);
 
-	countptr = __this_cpu_ptr(dpa_priv->dpa_bp->percpu_count);
+	countptr = raw_cpu_ptr(dpa_priv->dpa_bp->percpu_count);
 
 	clear_fd(&fd);
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index b26914a..e8a3c06 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -851,10 +851,10 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		return NETDEV_TX_OK;
 #endif
 	priv = netdev_priv(net_dev);
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use raw_cpu_ptr */
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 	percpu_stats = &percpu_priv->stats;
-	countptr = __this_cpu_ptr(priv->dpa_bp->percpu_count);
+	countptr = raw_cpu_ptr(priv->dpa_bp->percpu_count);
 
 	clear_fd(&fd);
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index 8f26f7b..e730fca 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -239,7 +239,7 @@ shared_rx_dqrr(struct qman_portal *portal, struct qman_fq *fq,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(!dpa_bp);
@@ -375,7 +375,7 @@ shared_tx_error_dqrr(struct qman_portal                *portal,
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(!dpa_bp);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	if (netif_msg_hw(priv) && net_ratelimit())
 		netdev_warn(net_dev, "FD status = 0x%08x\n",
@@ -408,7 +408,7 @@ shared_tx_default_dqrr(struct qman_portal              *portal,
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(!dpa_bp);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	if (unlikely(fd->status & FM_FD_STAT_TX_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
@@ -439,7 +439,7 @@ static void shared_ern(struct qman_portal	*portal,
 
 	net_dev = dpa_fq->net_dev;
 	priv = netdev_priv(net_dev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	dpa_fd_release(net_dev, &msg->ern.fd);
 
@@ -462,7 +462,7 @@ int __hot dpa_shared_tx(struct sk_buff *skb, struct net_device *net_dev)
 	fm_prs_result_t *parse_results_ref;
 
 	priv = netdev_priv(net_dev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = raw_cpu_ptr(priv->percpu_priv);
 
 	memset(&fd, 0, sizeof(fd));
 	fd.format = qm_fd_contig;
-- 
1.7.5.4

