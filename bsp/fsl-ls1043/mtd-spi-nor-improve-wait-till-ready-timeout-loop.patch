From badbc19ea7c897245bed8989c1a930842703e54a Mon Sep 17 00:00:00 2001
From: Brian Norris <computersforpeace@gmail.com>
Date: Wed, 5 Nov 2014 02:32:03 -0800
Subject: [PATCH 409/451] mtd: spi-nor: improve wait-till-ready timeout loop

commit a95ce92e4b289228c51114dd19f714388093d52b upstream

There are a few small issues with the timeout loop in
spi_nor_wait_till_ready():

 * The first operation should not be a reschedule; we should check the
   status register at least once to see if we're complete!

 * We should check the status register one last time after declaring the
   deadline has passed, to prevent a premature timeout error (this is
   theoretically possible if we sleep for a long time after the previous
   status register check).

 * Add an error message, so it's obvious if we ever hit a timeout.

Signed-off-by: Brian Norris <computersforpeace@gmail.com>
Acked-by: Huang Shijie <shijie.huang@intel.com>
Reviewed-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/mtd/spi-nor/spi-nor.c |   12 ++++++++----
 1 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
index 0431d8e..647513f 100644
--- a/drivers/mtd/spi-nor/spi-nor.c
+++ b/drivers/mtd/spi-nor/spi-nor.c
@@ -217,12 +217,13 @@ static int spi_nor_ready(struct spi_nor *nor)
 static int spi_nor_wait_till_ready(struct spi_nor *nor) 
 {
 	unsigned long deadline;
-        int ret;
+        int timeout = 0, ret;
 
 	deadline = jiffies + MAX_READY_WAIT_JIFFIES;
 
-	do {
-		cond_resched();
+	while (!timeout) {
+		if (time_after_eq(jiffies, deadline))
+			timeout = 1;
 
 		ret = spi_nor_ready(nor);
 		if (ret < 0)
@@ -230,8 +231,11 @@ static int spi_nor_wait_till_ready(struct spi_nor *nor)
 		if (ret)
 			return 0;
 
-	} while (!time_after_eq(jiffies, deadline));
+		cond_resched();
+	}
 
+	dev_err(nor->dev, "flash operation timed out\n");
+ 
 	return -ETIMEDOUT;
 }
 
-- 
1.7.5.4

