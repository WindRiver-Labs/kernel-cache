From 3b982ab072588d1d6436af971f7794d0e5e7834d Mon Sep 17 00:00:00 2001
From: Marian-Cristian Rotariu <marian.rotariu@freescale.com>
Date: Mon, 2 Feb 2015 15:25:17 +0200
Subject: [PATCH 150/451] dpaa_eth: add low level calls to MAC device

Signed-off-by: Marian-Cristian Rotariu <marian.rotariu@freescale.com>
Change-Id: Ia3041215628ca7b0b117be56974d562bbc1b008f
Reviewed-on: http://git.am.freescale.net:8181/29738
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Yang Li <LeoLi@freescale.com>
[Xulin: Original patch taken from
Linux-LS1043A-SDK-V0.4-SOURCE-20150826-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    2 -
 drivers/net/ethernet/freescale/dpa/mac.c           |   25 ++++++++++++++++++-
 2 files changed, 23 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index b4fbddc..260e15f 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -167,14 +167,12 @@ int __cold dpa_start(struct net_device *net_dev)
 			goto mac_start_failed;
 	}
 
-#ifndef CONFIG_FSL_DPAA_DBG_EMULATOR
 	err = priv->mac_dev->start(mac_dev);
 	if (err < 0) {
 		if (netif_msg_ifup(priv))
 			netdev_err(net_dev, "mac_dev->start() = %d\n", err);
 		goto mac_start_failed;
 	}
-#endif
 	netif_tx_start_all_queues(net_dev);
 
 	return 0;
diff --git a/drivers/net/ethernet/freescale/dpa/mac.c b/drivers/net/ethernet/freescale/dpa/mac.c
index 4c83a05..a629960 100644
--- a/drivers/net/ethernet/freescale/dpa/mac.c
+++ b/drivers/net/ethernet/freescale/dpa/mac.c
@@ -353,8 +353,29 @@ static int __cold mac_probe(struct platform_device *_of_dev)
 	if (strstr(char_prop, "xgmii"))
 		mac_dev->if_support = SUPPORTED_10000baseT_Full;
 
-	/* TODO: Parse the "phy-handle" */
-	/* TODO: Initialize the MAC device (call to mac_dev->init)  */
+#ifndef CONFIG_FSL_DPAA_DBG_EMULATOR
+	/* Get the rest of the PHY information */
+	mac_dev->phy_node = of_parse_phandle(mac_node, "phy-handle", 0);
+	if (mac_dev->phy_node == NULL) {
+		int sz;
+		const u32 *phy_id = of_get_property(mac_node, "fixed-link",
+							&sz);
+		if (!phy_id || sz < sizeof(*phy_id)) {
+			dev_err(dev, "No PHY (or fixed link) found\n");
+			_errno = -EINVAL;
+			goto _return_dev_set_drvdata;
+		}
+
+		sprintf(mac_dev->fixed_bus_id, PHY_ID_FMT, "fixed-0",
+			phy_id[0]);
+	}
+#endif
+
+	_errno = mac_dev->init(mac_dev);
+	if (unlikely(_errno < 0)) {
+		dev_err(dev, "mac_dev->init() = %d\n", _errno);
+		goto _return_dev_set_drvdata;
+	}
 
 	/* pause frame autonegotiation enabled*/
 	mac_dev->autoneg_pause = true;
-- 
1.7.5.4

