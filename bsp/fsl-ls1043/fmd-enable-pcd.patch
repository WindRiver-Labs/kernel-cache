From c2eb5f9b14145165352ff609cd7646d5273666bd Mon Sep 17 00:00:00 2001
From: Mandy Lavi <mandy.lavi@freescale.com>
Date: Fri, 27 Mar 2015 00:07:50 +0900
Subject: [PATCH 146/451] fmd: enable pcd

Change-Id: Id0358f226bda9447f2e369792aae3f686a912ef7
Signed-off-by: Mandy Lavi <mandy.lavi@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/33618
Reviewed-by: Yang Li <LeoLi@freescale.com>
Tested-by: Yang Li <LeoLi@freescale.com>
[Xulin: Original patch taken from
Linux-LS1043A-SDK-V0.4-SOURCE-20150826-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 .../freescale/fman/Peripherals/FM/Port/fm_port.c   |   10 ----
 .../ethernet/freescale/fman/Peripherals/FM/fman.c  |    1 +
 .../freescale/fman/src/wrapper/lnxwrp_fm.c         |   14 +----
 .../freescale/fman/src/wrapper/lnxwrp_fm_port.c    |   54 +++++---------------
 .../freescale/fman/src/wrapper/lnxwrp_ioctls_fm.c  |    7 +++
 5 files changed, 24 insertions(+), 62 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fman/Peripherals/FM/Port/fm_port.c b/drivers/net/ethernet/freescale/fman/Peripherals/FM/Port/fm_port.c
index 319031b..cf26089 100644
--- a/drivers/net/ethernet/freescale/fman/Peripherals/FM/Port/fm_port.c
+++ b/drivers/net/ethernet/freescale/fman/Peripherals/FM/Port/fm_port.c
@@ -60,11 +60,6 @@ static t_Error CheckInitParameters(t_FmPort *p_FmPort)
     t_Error             ans = E_OK;
     uint32_t            unusedMask;
 
-
-printk("PpPpPpPp = p_FmPort->portType %d \n",p_FmPort->portType);
-printk("PpPpPpPp = p_FmPort->name %s \n",p_FmPort->name);
-
-
     if (p_FmPort->imEn)
     {
         if (p_FmPort->portType == e_FM_PORT_TYPE_RX_10G)
@@ -152,14 +147,11 @@ printk("PpPpPpPp = p_FmPort->name %s \n",p_FmPort->name);
         /* common BMI registers values */
         /* Check that Queue Id is not larger than 2^24, and is not 0 */
         if ((p_Params->errFqid & ~0x00FFFFFF) || !p_Params->errFqid){
-//printk("PpPpPpPp = p_Params->dfltFqid 0x%x  p_Params->errFqid = 0x%x \n",p_Params->dfltFqid,p_Params->errFqid);
             RETURN_ERROR(MAJOR, E_INVALID_VALUE, ("errFqid must be between 1 and 2^24-1"));
 
 	}
         if (p_Params->dfltFqid & ~0x00FFFFFF)
             RETURN_ERROR(MAJOR, E_INVALID_VALUE, ("dfltFqid must be between 1 and 2^24-1"));
-printk("PpPpPpPp = p_Params->dfltFqid 0x%x  p_Params->errFqid = 0x%x \n",p_Params->dfltFqid,p_Params->errFqid);
-
 
     }
 
@@ -2463,8 +2455,6 @@ t_Error FM_PORT_Init(t_Handle h_FmPort)
     if (p_FmPort->deepSleepVars.autoResMaxSizes)
         FmPortConfigAutoResForDeepSleepSupport1(p_FmPort);
 
-printk("PpPpPpPp = here i am 4 \n");
-
     return E_OK;
 }
 
diff --git a/drivers/net/ethernet/freescale/fman/Peripherals/FM/fman.c b/drivers/net/ethernet/freescale/fman/Peripherals/FM/fman.c
index 278752b..d410482 100755
--- a/drivers/net/ethernet/freescale/fman/Peripherals/FM/fman.c
+++ b/drivers/net/ethernet/freescale/fman/Peripherals/FM/fman.c
@@ -1286,6 +1286,7 @@ void fman_get_revision(struct fman_fpm_regs *fpm_rg,
 
 	tmp = ioread32be(&fpm_rg->fm_ip_rev_1);
 
+printk("RRRRRRRRRR Ret version fm_ip_rev_1 0x%x\n",tmp);
 #warning Planting fman rev number
 tmp = 0xa070603;
 
diff --git a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c
index dc7b6cd..defa4b5 100755
--- a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c
+++ b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm.c
@@ -557,6 +557,7 @@ static t_LnxWrpFmDev * ReadFmDevTreeNode (struct platform_device *of_dev)
     if (WARN_ON(lenp != sizeof(uint32_t)))
         return NULL;
     p_LnxWrpFmDev->fmDevSettings.param.fmClkFreq = (tmp_prop + 500000)/1000000; /* In MHz, rounded */
+printk("\n DBG: CCCCCCCCCCCCCCC recv clk-feq %d \n",tmp_prop);
 #warning planting clock-frequency
     p_LnxWrpFmDev->fmDevSettings.param.fmClkFreq = (699999993 + 500000)/1000000; /* In MHz, rounded */
 
@@ -696,6 +697,7 @@ static t_LnxWrpFmDev * ReadFmDevTreeNode (struct platform_device *of_dev)
 //     p_LnxWrpFmDev->hcCh = 17;
     p_LnxWrpFmDev->hcCh =
         qman_affine_channel(cpumask_first(qman_affine_cpus()));
+printk("\n DBG: UUUUUUUUUUUUUU hcCh ?%d? \n",p_LnxWrpFmDev->hcCh);
 
     p_LnxWrpFmDev->active = TRUE;
 
@@ -1063,12 +1065,10 @@ static int /*__devinit*/ fm_probe(struct platform_device *of_dev)
     if (InitFmDev(p_LnxWrpFmDev) != E_OK)
         return -EIO;
 
-#warning ioctl dissabled
-#if 0
+
     /* IOCTL ABI checking */
     LnxWrpPCDIOCTLEnumChecking();
     LnxWrpPCDIOCTLTypeChecking();
-#endif /* 0 */
 
     Sprint (p_LnxWrpFmDev->name, "%s%d", DEV_FM_NAME, p_LnxWrpFmDev->id);
 
@@ -1998,14 +1998,6 @@ static int __init __cold fm_load (void)
         printk("Failed to init FM wrapper!\n");
         return -ENODEV;
     }
-#warning API version irrelevant
-#if 0
-	printk(KERN_CRIT "Freescale FM module ("__DATE__ ":"__TIME__")," \
-		" FMD API version %d.%d.%d\n",
-		FMD_API_VERSION_MAJOR,
-		FMD_API_VERSION_MINOR,
-		FMD_API_VERSION_RESPIN);
-#endif
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm_port.c b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm_port.c
index 67f3439..d201047 100644
--- a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm_port.c
+++ b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_fm_port.c
@@ -180,8 +180,6 @@ static struct qman_fq *FqAlloc(t_LnxWrpFmDev * p_LnxWrpFmDev,
 static void FqFree(struct qman_fq *fq)
 {
 	int _errno;
-#warning: need to verify availability of qman functions
-//#if 0
 	_errno = qman_retire_fq(fq, NULL);
 	if (unlikely(_errno < 0))
 		printk(KERN_WARNING "qman_retire_fq(%u) = %d\n", qman_fq_fqid(fq), _errno);
@@ -192,7 +190,6 @@ static void FqFree(struct qman_fq *fq)
 
 	qman_destroy_fq(fq, 0);
 	XX_Free((t_FmTestFq *) fq);
-//#endif
 }
 
 static t_Error QmEnqueueCB(t_Handle h_Arg, void *p_Fd)
@@ -896,8 +893,6 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
     if (CheckNSetFmPortAdvArgs(p_LnxWrpFmPortDev) != E_OK)
 		RETURN_ERROR(MAJOR, E_INVALID_STATE, NO_MSG);
 
-printk(">>aa33aa >> \n");
-
 
 /* FMan Fifo sizes behind the scene":
  * Using the following formulae (*), under a set of simplifying assumptions (.):
@@ -1125,43 +1120,41 @@ static t_Error InitFmPcdDev(t_LnxWrpFmDev *p_LnxWrpFmDev)
 #endif /* CONFIG_MULTI_PARTITION_SUPPORT */
 		fmPcdParams.useHostCommand = TRUE;
 
-#warning: hard coded qman params
 
-//		p_LnxWrpFmDev->hc_tx_fq = NULL;
-//#if 0
+		p_LnxWrpFmDev->hc_tx_fq =
 		FqAlloc(p_LnxWrpFmDev,
 				0,
 				QMAN_FQ_FLAG_TO_DCPORTAL,
-				/* p_LnxWrpFmPortDev->txCh */ 2057, 0);
+				p_LnxWrpFmPortDev->txCh, 0);
+
 		if (!p_LnxWrpFmDev->hc_tx_fq)
 			RETURN_ERROR(MAJOR, E_NULL_POINTER,
 				     ("Frame queue allocation failed..."));
-//#endif
-		p_LnxWrpFmDev->hc_tx_conf_fq = NULL;
-//#if 0
+
+		p_LnxWrpFmDev->hc_tx_conf_fq =
 			FqAlloc(p_LnxWrpFmDev,
 				0,
 				QMAN_FQ_FLAG_NO_ENQUEUE,
-				/* p_LnxWrpFmDev->hcCh */ 17, 7);
+				p_LnxWrpFmDev->hcCh, 7);
+
 		if (!p_LnxWrpFmDev->hc_tx_conf_fq)
 			RETURN_ERROR(MAJOR, E_NULL_POINTER,
 				     ("Frame queue allocation failed..."));
-//#endif
-		p_LnxWrpFmDev->hc_tx_err_fq = NULL;
-//#if 0
+
+		p_LnxWrpFmDev->hc_tx_err_fq = 
 			FqAlloc(p_LnxWrpFmDev,
 				0,
 				QMAN_FQ_FLAG_NO_ENQUEUE,
-				/* p_LnxWrpFmDev->hcCh */ 17, 7);
+				p_LnxWrpFmDev->hcCh, 7);
+		
 		if (!p_LnxWrpFmDev->hc_tx_err_fq)
 			RETURN_ERROR(MAJOR, E_NULL_POINTER,
 				     ("Frame queue allocation failed..."));
-//#endif
 
 		fmPcdParams.hc.portBaseAddr = p_LnxWrpFmPortDev->baseAddr;
 		fmPcdParams.hc.portId =
 			p_LnxWrpFmPortDev->settings.param.portId;
-//#if 0
+
 		fmPcdParams.hc.qmChannel = p_LnxWrpFmPortDev->txCh;
 		fmPcdParams.hc.liodnBase =
 			p_LnxWrpFmPortDev->settings.param.liodnBase;
@@ -1172,11 +1165,6 @@ static t_Error InitFmPcdDev(t_LnxWrpFmDev *p_LnxWrpFmDev)
 			qman_fq_fqid(p_LnxWrpFmDev->hc_tx_conf_fq);
 		fmPcdParams.hc.f_QmEnqueue = QmEnqueueCB;
 		fmPcdParams.hc.h_QmArg = (t_Handle) p_LnxWrpFmDev;
-//#endif
-#warning Hard code values
-//fmPcdParams.hc.errFqid = 0x102;
-//fmPcdParams.hc.confFqid = 0x101;
-
 
 		p_LnxWrpFmDev->h_PcdDev = FM_PCD_Config(&fmPcdParams);
 
@@ -1276,22 +1264,15 @@ static int /*__devinit*/ fm_port_probe(struct platform_device *of_dev)
 
 	if (!p_LnxWrpFmPortDev->active)
 		return 0;
-printk( ">>> fm_port_probe aa >>> p_LnxWrpFmPortDev->id  %d \n",p_LnxWrpFmPortDev->id);
 
 	if (ConfigureFmPortDev(p_LnxWrpFmPortDev) != E_OK)
 		return -EIO;
-printk( ">>> fm_port_probe bb >>> p_LnxWrpFmPortDev->id  %d \n",p_LnxWrpFmPortDev->id);
-
 	dev_set_drvdata(dev, p_LnxWrpFmPortDev);
 
-printk( ">>> fm_port_probe cc >>> p_LnxWrpFmPortDev->id  %d \n",p_LnxWrpFmPortDev->id);
-
-#warning PCD not initialized
-#if 0
 	if (p_LnxWrpFmPortDev->settings.param.portType ==
 		e_FM_PORT_TYPE_OH_HOST_COMMAND)
 		InitFmPcdDev((t_LnxWrpFmDev *) p_LnxWrpFmPortDev->h_LnxWrpFmDev);
-#endif
+
 	p_LnxWrpFmDev = (t_LnxWrpFmDev *) p_LnxWrpFmPortDev->h_LnxWrpFmDev;
 
 
@@ -1337,14 +1318,10 @@ printk( ">>> fm_port_probe cc >>> p_LnxWrpFmPortDev->id  %d \n",p_LnxWrpFmPortDe
 			DEV_FM_OH_PORTS_MINOR_BASE;
 	}
 
-printk( ">>> fm_port_probe dd >>> p_LnxWrpFmPortDev->name  %s \n",p_LnxWrpFmPortDev->name);
-
 	device_create(p_LnxWrpFmDev->fm_class, NULL,
 		      MKDEV(p_LnxWrpFmDev->major, p_LnxWrpFmPortDev->minor),
 		      NULL, p_LnxWrpFmPortDev->name);
 
-printk( ">>> fm_port_probe ee device created > p_LnxWrpFmPortDev->name  %s \n",p_LnxWrpFmPortDev->name);
-
 	/* create sysfs entries for stats and regs */
 
 	if (fm_port_sysfs_create(dev) != 0) {
@@ -1354,8 +1331,6 @@ printk( ">>> fm_port_probe ee device created > p_LnxWrpFmPortDev->name  %s \n",p
 		return -EIO;
 	}
 
-printk( ">>> fm_port_probe ff sysfs created > p_LnxWrpFmPortDev->name  %s \n",p_LnxWrpFmPortDev->name);
-
 #ifdef FM_TX_INVALID_ECC_ERRATA_10GMAC_A009
 	FM_DisableRamsEcc(p_LnxWrpFmDev->h_Dev);
 #endif /* FM_TX_INVALID_ECC_ERRATA_10GMAC_A009 */
@@ -1421,13 +1396,10 @@ t_Error LNXWRP_FM_Port_Init(void)
 {
 	/* Register to the DTB for basic FM port API */
 	if (platform_driver_register(&fm_port_driver)){
-printk( ">>>>>>  LNXWRP_FM_Port_Init (aaaaaaa) \n");
 
 	    return E_NO_DEVICE;
 	}
 
-printk( ">>>>>>  LNXWRP_FM_Port_Init (bbbbbb-) \n");
-
 	return E_OK;
 }
 
diff --git a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_ioctls_fm.c b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_ioctls_fm.c
index b68c6ec..3cb53ac 100644
--- a/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_ioctls_fm.c
+++ b/drivers/net/ethernet/freescale/fman/src/wrapper/lnxwrp_ioctls_fm.c
@@ -331,10 +331,16 @@ void LnxWrpPCDIOCTLTypeChecking(void)
     ASSERT_COND(sizeof(ioc_fm_pcd_from_hdr_t) == sizeof(t_FmPcdFromHdr));
     ASSERT_COND(sizeof(ioc_fm_pcd_from_field_t) == sizeof(t_FmPcdFromField));
     ASSERT_COND(sizeof(ioc_fm_pcd_distinction_unit_t) == sizeof(t_FmPcdDistinctionUnit));
+
+#if defined(CONFIG_FMAN_LS1043)
+    /* different alignment */
+    ASSERT_COND(sizeof(ioc_fm_pcd_net_env_params_t) == sizeof(t_FmPcdNetEnvParams) + sizeof(void *) + 4);
+#else
 #if !defined(CONFIG_COMPAT)
     /* different alignment */
     ASSERT_COND(sizeof(ioc_fm_pcd_net_env_params_t) == sizeof(t_FmPcdNetEnvParams) + sizeof(void *));
 #endif
+#endif
     ASSERT_COND(sizeof(ioc_fm_pcd_extract_entry_t) == sizeof(t_FmPcdExtractEntry));
     ASSERT_COND(sizeof(ioc_fm_pcd_kg_extract_mask_t) == sizeof(t_FmPcdKgExtractMask));
     ASSERT_COND(sizeof(ioc_fm_pcd_kg_extract_dflt_t) == sizeof(t_FmPcdKgExtractDflt));
@@ -391,6 +397,7 @@ void LnxWrpPCDIOCTLTypeChecking(void)
     /*ioc_fm_pcd_cc_node_modify_key_params_t : private */
     /*ioc_fm_manip_hdr_info_t : private */
     /*ioc_fm_pcd_hash_table_set_t : private */
+#warning "ls1043 temporary remove size validation"
     ASSERT_COND(sizeof(ioc_fm_pcd_manip_frag_ip_params_t) == sizeof(t_FmPcdManipFragIpParams));
     ASSERT_COND(sizeof(ioc_fm_pcd_manip_reassem_ip_params_t) == sizeof(t_FmPcdManipReassemIpParams));
     ASSERT_COND(sizeof(ioc_fm_pcd_manip_special_offload_ipsec_params_t) == sizeof(t_FmPcdManipSpecialOffloadIPSecParams));
-- 
1.7.5.4

