From 0f862f45687a088fde89b6f97084421b780fe384 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 24 Aug 2016 11:14:30 +0800
Subject: [PATCH 10/18] crypto: caam: pass the same dev to
 dma_{map,unmap}_single

In the current code, two struct device are used to map and umap dma
memories respectively. One is embedded in platform_device, and the
other is the one embedded in net_device. The content of these devices
are the same, but it will trigger a warning when CONFIG_DMA_API_DEBUG
is enabled:

WARNING: CPU: 0 PID: 0 at lib/dma-debug.c:1096 check_unmap+0x734/0x978()
Call trace:
[<ffff80000008a638>] dump_backtrace+0x0/0x128
[<ffff80000008a784>] show_stack+0x24/0x30
[<ffff800000975bdc>] dump_stack+0x88/0xa8
[<ffff8000000a1c54>] warn_slowpath_common+0xa4/0xe0
[<ffff8000000a1cf4>] warn_slowpath_fmt+0x64/0x78
[<ffff8000004885ac>] check_unmap+0x734/0x978
[<ffff800000488858>] debug_dma_unmap_page+0x68/0x70
[<ffff800000795928>] caam_jr_dequeue+0x138/0x2b8
[<ffff8000008495a4>] net_rx_action+0x274/0x3a8
[<ffff8000000a5f58>] __do_softirq+0x138/0x368
[<ffff8000000a642c>] irq_exit+0x64/0xa8
[<ffff8000000ede08>] __handle_domain_irq+0x90/0x100
[<ffff800000082480>] gic_handle_irq+0x40/0x90
Exception stack(0xffff800000de7db0 to 0xffff800000de7ed0)
7da0: 00de4000 ffff8000 00dea000 ffff8000
7dc0: 00de7ef0 ffff8000 00086848 ffff8000 000e0a0c ffff8000 00000000 00000000
7de0: 00000000 00000000 00000001 00000000 00de7e90 ffff8000 00000000 00000000
7e00: 75e00068 ffff8000 00000001 00000000 00df2970 ffff8000 00de7e60 ffff8000
7e20: c3cd9020 ffff7bff ffffff80 00000000 c3cd9000 ffff7bff 00000028 00000000
7e40: fffffffe 0fffffff 73ae216a ffff8000 0000000f 00000000 0000677f 00000000
7e60: 73ae291c ffff8000 00de4000 ffff8000 00dea000 ffff8000 0098e000 ffff8000
7e80: 00ec3000 ffff8000 00000000 00000000 00dcdd00 ffff8000 00000000 00000000
7ea0: 00dd3288 ffff8000 00de7f00 ffff8000 00b58000 ffff8000 00de7ef0 ffff8000
7ec0: 00086844 ffff8000 00de7ef0 ffff8000
[<ffff8000000835a8>] el1_irq+0x68/0xd8
[<ffff8000000e0a0c>] cpu_startup_entry+0x38c/0x400
[<ffff8000009718b8>] rest_init+0x90/0xa0
[<ffff800000c60970>] start_kernel+0x394/0x3a8
---[ end trace e74ad61e38cddb8c ]---

So make sure we pass the same device struct to the dma helper functions.

And the dma address needs to make an endian convert before the transport address to
the function dma_unmap_single(), since when the dma address is allocted, it has
converted with the function rd_dma();

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/crypto/caam/jr.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/crypto/caam/jr.c b/drivers/crypto/caam/jr.c
index bfafbd7..741543d 100644
--- a/drivers/crypto/caam/jr.c
+++ b/drivers/crypto/caam/jr.c
@@ -190,7 +190,7 @@ static inline void caam_jr_consume(struct device *dev)
 	BUG_ON(CIRC_CNT(head, tail + i, JOBR_DEPTH) <= 0);
 
 	/* Unmap just-run descriptor so we can post-process */
-	dma_unmap_single(dev, jrp->outring[hw_idx].desc,
+	dma_unmap_single(dev, rd_dma(jrp->outring[hw_idx].desc),
 			 jrp->entinfo[sw_idx].desc_size,
 			 DMA_TO_DEVICE);
 
@@ -244,6 +244,7 @@ static int caam_jr_dequeue(struct napi_struct *napi, int budget)
 	struct caam_drv_private_jr *jrp = dev_get_drvdata(dev);
 	int cleaned = 0;
 
+	dev = jrp->dev;
 	while (rd_reg32(&jrp->rregs->outring_used) && cleaned < budget) {
 		caam_jr_consume(dev);
 		cleaned++;
-- 
2.7.4

