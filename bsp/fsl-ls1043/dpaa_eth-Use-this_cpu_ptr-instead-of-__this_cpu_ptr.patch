From 8d75893bba7248df6184684329b7b7da37bd4ab5 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Wed, 3 Jun 2015 09:42:01 +0300
Subject: [PATCH 176/451] dpaa_eth: Use this_cpu_ptr instead of __this_cpu_ptr

__this_cpu_ptr was removed so use this_cpu_ptr instead.
SET_ETHTOOL_OPS has been removed as well so directly assign the
corresponding ethtool ops structure to net device's ethtool_ops.

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
[Xulin: Original patch taken from
Linux-LS1043A-SDK-V0.4-SOURCE-20150826-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |   23 +++++++++----------
 drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c |    1 -
 .../net/ethernet/freescale/dpa/dpaa_eth_common.c   |    5 +--
 .../net/ethernet/freescale/dpa/dpaa_eth_generic.c  |   22 +++++++++---------
 .../net/ethernet/freescale/dpa/dpaa_eth_macless.c  |    1 -
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c   |    6 ++--
 .../net/ethernet/freescale/dpa/dpaa_eth_shared.c   |   11 ++++-----
 7 files changed, 32 insertions(+), 37 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 2f0dd32..dbd7c92 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -54,7 +54,6 @@
 #include <linux/net.h>		/* net_ratelimit() */
 #include <linux/if_ether.h>	/* ETH_P_IP and ETH_P_IPV6 */
 #include <linux/highmem.h>
-#include <linux/percpu.h>
 #include <linux/dma-mapping.h>
 #include <linux/fsl_bman.h>
 
@@ -423,8 +422,8 @@ priv_rx_error_dqrr(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	count_ptr = __this_cpu_ptr(priv->dpa_bp->percpu_count);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
+	count_ptr = this_cpu_ptr(priv->dpa_bp->percpu_count);
 
 	if (dpaa_eth_napi_schedule(percpu_priv, portal))
 		return qman_cb_dqrr_stop;
@@ -460,9 +459,9 @@ priv_rx_default_dqrr(struct qman_portal		*portal,
 	/* Trace the Rx fd */
 	trace_dpa_rx_fd(net_dev, fq, &dq->fd);
 
-	/* IRQ handler, non-migratable; safe to use __this_cpu_ptr here */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	count_ptr = __this_cpu_ptr(dpa_bp->percpu_count);
+	/* IRQ handler, non-migratable; safe to use this_cpu_ptr here */
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
+	count_ptr = this_cpu_ptr(dpa_bp->percpu_count);
 
 	if (unlikely(dpaa_eth_napi_schedule(percpu_priv, portal)))
 		return qman_cb_dqrr_stop;
@@ -494,7 +493,7 @@ priv_tx_conf_error_dqrr(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	if (dpaa_eth_napi_schedule(percpu_priv, portal))
 		return qman_cb_dqrr_stop;
@@ -519,8 +518,8 @@ priv_tx_conf_default_dqrr(struct qman_portal		*portal,
 	/* Trace the fd */
 	trace_dpa_tx_conf_fd(net_dev, fq, &dq->fd);
 
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use this_cpu_ptr */
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	if (dpaa_eth_napi_schedule(percpu_priv, portal))
 		return qman_cb_dqrr_stop;
@@ -542,8 +541,8 @@ static void priv_ern(struct qman_portal	*portal,
 
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use this_cpu_ptr */
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	percpu_priv->stats.tx_dropped++;
 	percpu_priv->stats.tx_fifo_errors++;
@@ -638,7 +637,7 @@ static void dpaa_eth_poll_controller(struct net_device *net_dev)
 {
 	struct dpa_priv_s *priv = netdev_priv(net_dev);
 	struct dpa_percpu_priv_s *percpu_priv =
-		__this_cpu_ptr(priv->percpu_priv);
+		this_cpu_ptr(priv->percpu_priv);
 	struct qman_portal *p;
 	const struct qman_portal_config *pc;
 	struct dpa_napi_portal *np;
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
index 3a40cfb..b24be24 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_base.c
@@ -35,7 +35,6 @@
 #include <linux/of_net.h>
 #include <linux/etherdevice.h>
 #include <linux/kthread.h>
-#include <linux/percpu.h>
 #include <linux/highmem.h>
 #include <linux/sort.h>
 #include <linux/fsl_qman.h>
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
index 7243f84..90ec10d 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_common.c
@@ -35,7 +35,6 @@
 #include <linux/of_net.h>
 #include <linux/etherdevice.h>
 #include <linux/kthread.h>
-#include <linux/percpu.h>
 #include <linux/highmem.h>
 #include <linux/sort.h>
 #include <linux/fsl_qman.h>
@@ -120,7 +119,7 @@ int dpa_netdev_init(struct device_node *dpa_node,
 	memcpy(net_dev->perm_addr, mac_addr, net_dev->addr_len);
 	memcpy(net_dev->dev_addr, mac_addr, net_dev->addr_len);
 
-	SET_ETHTOOL_OPS(net_dev, &dpa_ethtool_ops);
+	net_dev->ethtool_ops = &dpa_ethtool_ops;
 
 	net_dev->needed_headroom = priv->tx_headroom;
 	net_dev->watchdog_timeo = msecs_to_jiffies(tx_timeout);
@@ -223,7 +222,7 @@ void __cold dpa_timeout(struct net_device *net_dev)
 	struct dpa_percpu_priv_s *percpu_priv;
 
 	priv = netdev_priv(net_dev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	if (netif_msg_timer(priv))
 		netdev_crit(net_dev, "Transmit timeout latency: %u ms\n",
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
index b6283da..8a043b6 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_generic.c
@@ -291,8 +291,8 @@ dpa_generic_rx_err_dqrr(struct qman_portal *portal,
 
 	netdev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(netdev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	countptr = __this_cpu_ptr(priv->rx_bp->percpu_count);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
+	countptr = this_cpu_ptr(priv->rx_bp->percpu_count);
 	fd = &dq->fd;
 
 	/* TODO: extract bpid from the fd; when multiple bps are supported
@@ -364,8 +364,8 @@ dpa_generic_rx_dqrr(struct qman_portal *portal,
 
 	netdev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(netdev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
-	countptr = __this_cpu_ptr(priv->rx_bp->percpu_count);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
+	countptr = this_cpu_ptr(priv->rx_bp->percpu_count);
 
 	/* This is needed for TCP traffic as draining only on TX is not
 	 * enough
@@ -416,7 +416,7 @@ dpa_generic_rx_dqrr(struct qman_portal *portal,
 
 	dma_unmap_single(bp->dev, addr, bp->size, DMA_BIDIRECTIONAL);
 
-	countptr = __this_cpu_ptr(bp->percpu_count);
+	countptr = this_cpu_ptr(bp->percpu_count);
 	(*countptr)--;
 
 	/* The skb is currently pointed at head + headroom. The packet
@@ -455,7 +455,7 @@ static void dpa_generic_drain_bp(struct dpa_bp *bp, u8 nbuf)
 	int ret, i;
 	struct bm_buffer bmb[8];
 	dma_addr_t addr;
-	int *countptr = __this_cpu_ptr(bp->percpu_count);
+	int *countptr = this_cpu_ptr(bp->percpu_count);
 	int count = *countptr;
 	struct sk_buff **skbh;
 
@@ -586,7 +586,7 @@ static int __hot dpa_generic_tx(struct sk_buff *skb, struct net_device *netdev)
 {
 	struct dpa_generic_priv_s *priv = netdev_priv(netdev);
 	struct dpa_percpu_priv_s *percpu_priv =
-		__this_cpu_ptr(priv->percpu_priv);
+		this_cpu_ptr(priv->percpu_priv);
 	struct rtnl_link_stats64 *percpu_stats = &percpu_priv->stats;
 	struct dpa_bp *bp = priv->draining_tx_bp;
 	struct sk_buff **skbh = NULL;
@@ -663,7 +663,7 @@ static int __hot dpa_generic_tx(struct sk_buff *skb, struct net_device *netdev)
 		goto xmit_failed;
 	}
 
-	countptr = __this_cpu_ptr(bp->percpu_count);
+	countptr = this_cpu_ptr(bp->percpu_count);
 	(*countptr)++;
 
 	percpu_stats->tx_packets++;
@@ -751,7 +751,7 @@ static int dpa_generic_netdev_init(struct device_node *dpa_node,
 	memcpy(netdev->perm_addr, mac_addr, netdev->addr_len);
 	memcpy(netdev->dev_addr, mac_addr, netdev->addr_len);
 
-	SET_ETHTOOL_OPS(netdev, &dpa_generic_ethtool_ops);
+	netdev->ethtool_ops = &dpa_generic_ethtool_ops;
 
 	netdev->needed_headroom = priv->tx_headroom;
 	netdev->watchdog_timeo = msecs_to_jiffies(tx_timeout);
@@ -900,8 +900,8 @@ static void dpa_generic_ern(struct qman_portal *portal,
 
 	netdev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(netdev);
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use this_cpu_ptr */
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 	percpu_priv->stats.tx_dropped++;
 	percpu_priv->stats.tx_fifo_errors++;
 	count_ern(percpu_priv, msg);
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c
index 0a40ca4..99caa06 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_macless.c
@@ -44,7 +44,6 @@
 #include <linux/of_net.h>
 #include <linux/etherdevice.h>
 #include <linux/kthread.h>
-#include <linux/percpu.h>
 #include <linux/highmem.h>
 #include <linux/fsl_qman.h>
 #include "dpaa_eth.h"
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 19acf47..f55c866 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -891,10 +891,10 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		return NETDEV_TX_OK;
 #endif
 	priv = netdev_priv(net_dev);
-	/* Non-migratable context, safe to use __this_cpu_ptr */
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	/* Non-migratable context, safe to use this_cpu_ptr */
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 	percpu_stats = &percpu_priv->stats;
-	countptr = __this_cpu_ptr(priv->dpa_bp->percpu_count);
+	countptr = this_cpu_ptr(priv->dpa_bp->percpu_count);
 
 	clear_fd(&fd);
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
index 3757765..ef20918 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_shared.c
@@ -43,7 +43,6 @@
 #include <linux/of_platform.h>
 #include <linux/etherdevice.h>
 #include <linux/kthread.h>
-#include <linux/percpu.h>
 #include <linux/highmem.h>
 #include <linux/fsl_qman.h>
 #include "dpaa_eth.h"
@@ -242,7 +241,7 @@ shared_rx_dqrr(struct qman_portal *portal, struct qman_fq *fq,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = netdev_priv(net_dev);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(!dpa_bp);
@@ -378,7 +377,7 @@ shared_tx_error_dqrr(struct qman_portal                *portal,
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(!dpa_bp);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	if (netif_msg_hw(priv) && net_ratelimit())
 		netdev_warn(net_dev, "FD status = 0x%08x\n",
@@ -411,7 +410,7 @@ shared_tx_default_dqrr(struct qman_portal              *portal,
 	dpa_bp = dpa_bpid2pool(fd->bpid);
 	BUG_ON(!dpa_bp);
 
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	if (unlikely(fd->status & FM_FD_STAT_TX_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
@@ -442,7 +441,7 @@ static void shared_ern(struct qman_portal	*portal,
 
 	net_dev = dpa_fq->net_dev;
 	priv = netdev_priv(net_dev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	dpa_fd_release(net_dev, &msg->ern.fd);
 
@@ -465,7 +464,7 @@ int __hot dpa_shared_tx(struct sk_buff *skb, struct net_device *net_dev)
 	fm_prs_result_t *parse_results_ref;
 
 	priv = netdev_priv(net_dev);
-	percpu_priv = __this_cpu_ptr(priv->percpu_priv);
+	percpu_priv = this_cpu_ptr(priv->percpu_priv);
 
 	memset(&fd, 0, sizeof(fd));
 	fd.format = qm_fd_contig;
-- 
1.7.5.4

