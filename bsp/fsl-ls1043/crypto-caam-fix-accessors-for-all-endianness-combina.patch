From 4565341521af1dae2e9139f4b87da8ebbe636df9 Mon Sep 17 00:00:00 2001
From: Alex Porosanu <alexandru.porosanu@freescale.com>
Date: Wed, 5 Aug 2015 18:36:03 +0300
Subject: [PATCH 438/451] crypto/caam: fix accessors for all endianness
 combinations

This patch fixing of SEC register access, regardless of
the core endianness.

Fixes:

bf85c80 crypto/caam: ensure relevant accessors are available
23aea36 crypto: caam - fix endianness when writing/reading registers
5d14b2b crypto: caam - support (set|clear)bits32 for ARM64 platforms as well

Signed-off-by: Alex Porosanu <alexandru.porosanu@freescale.com>
[Xulin: Original patch taken from
Linux-LS1043A-SDK-V0.4-SOURCE-20150826-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/crypto/caam/regs.h |  140 +++++++++++++-------------------------------
 1 files changed, 42 insertions(+), 98 deletions(-)

diff --git a/drivers/crypto/caam/regs.h b/drivers/crypto/caam/regs.h
index 9fe96bb..461cb99 100644
--- a/drivers/crypto/caam/regs.h
+++ b/drivers/crypto/caam/regs.h
@@ -64,117 +64,62 @@
  *   performance counters.
  *
  */
-#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
-	#define in_be32(reg)	ioread32be(reg)
-	#define out_be32(reg, data)	iowrite32be(data, reg)
-#ifdef CONFIG_64BIT
-	#define out_be64(reg, data)	iowrite64be(data, reg)
-#endif
+#if !defined(__BIG_ENDIAN) && !defined(__LITTLE_ENDIAN)
+#error "Endianness undefined"
 #endif
 
-#if defined(__BIG_ENDIAN)
-	#ifdef CAAM_DIFF_ENDIAN
-		#define wr_reg32(reg, data) out_le32(reg, data)
-		#define rd_reg32(reg) in_le32(reg)
-
-		#define rd_en_val32(value) le32_to_cpu(value)
-		#define wr_en_val32(value) cpu_to_le32(value)
-
-		#define rd_en_val64(value) le64_to_cpu(value)
-		#define wr_en_val64(value) cpu_to_le64(value)
-	#else
-		#define wr_reg32(reg, data) out_be32(reg, data)
-		#define rd_reg32(reg) in_be32(reg)
-
-		#define rd_en_val32(value) (value)
-		#define wr_en_val32(value) (value)
-
-		#define rd_en_val64(value) (value)
-		#define wr_en_val64(value) (value)
-	#endif
-	#ifdef CONFIG_64BIT
-		#ifdef CAAM_DIFF_ENDIAN
+#if defined(CONFIG_64BIT)
+	#if defined(__BIG_ENDIAN) && defined(CAAM_DIFF_ENDIAN) || \
+	    defined(__LITTLE_ENDIAN) && !defined(CAAM_DIFF_ENDIAN)
+		#if defined(CONFIG_PPC)
 			#define wr_reg64(reg, data) out_le64(reg, data)
-			#define rd_reg64(reg) in_le64(reg)
+ 			#define rd_reg64(reg) in_le64(reg)
 		#else
+			#define wr_reg64(reg, data) writeq(data, reg)
+			#define rd_reg64(reg) readq(reg)
+		#endif
+	#else
+		#if defined(CONFIG_PPC)
 			#define wr_reg64(reg, data) out_be64(reg, data)
 			#define rd_reg64(reg) in_be64(reg)
+		#else
+			#define wr_reg64(reg, data) iowrite64be(data, reg)
+			#define rd_reg64(reg) ioread64be(reg)
 		#endif
-	#endif /* CONFIG_64BIT */
-#elif defined(__LITTLE_ENDIAN) /* __BIG_ENDIAN */
-	#ifdef CAAM_DIFF_ENDIAN
-		#define wr_reg32(reg, data) __raw_writel(cpu_to_be32(data), reg)
-		#define rd_reg32(reg) be32_to_cpu(__raw_readl(reg))
-
-		#define rd_en_val32(value) be32_to_cpu(value)
-		#define wr_en_val32(value) cpu_to_be32(value)
+	#endif
+#endif /* CONFIG_64BIT */
 
-		#define rd_en_val64(value) be64_to_cpu(value)
-		#define wr_en_val64(value) cpu_to_be64(value)
-	#else
-		#define wr_reg32(reg, data) __raw_writel(data, reg)
-		#define rd_reg32(reg) __raw_readl(reg)
+#if defined(__BIG_ENDIAN) && defined(CAAM_DIFF_ENDIAN) || \
+    defined(__LITTLE_ENDIAN) && !defined(CAAM_DIFF_ENDIAN)
+	#define rd_en_val32(value) le32_to_cpu(value)
+	#define wr_en_val32(value) cpu_to_le32(value)
 
-		#define rd_en_val32(value) (value)
-		#define wr_en_val32(value) (value)
+	#define rd_en_val64(value) le64_to_cpu(value)
+	#define wr_en_val64(value) cpu_to_le64(value)
 
-		#define rd_en_val64(value) (value)
-		#define wr_en_val64(value) (value)
-	#endif
-	#ifdef CONFIG_64BIT
-		#ifdef CAAM_DIFF_ENDIAN
-			#define wr_reg64(reg, data) \
-				__raw_writeq(cpu_to_be64(data), reg)
-			#define rd_reg64(reg) be64_to_cpu(__raw_readq(reg))
-		#else
-			#define wr_reg64(reg, data) __raw_writeq(data, reg)
-			#define rd_reg64(reg) __raw_readq(reg)
-		#endif
-	#endif
+	#define wr_reg32(reg, data) iowrite32(data, reg)
+	#define rd_reg32(reg) ioread32(reg)
 #else
-	#error "Endianness undefined"
-#endif /* __BIG_ENDIAN */
+	#define rd_en_val32(value) be32_to_cpu(value)
+	#define wr_en_val32(value) cpu_to_be32(value)
+
+	#define rd_en_val64(value) be64_to_cpu(value)
+	#define wr_en_val64(value) cpu_to_be64(value)
+
+	#define wr_reg32(reg, data) iowrite32be(data, reg)
+	#define rd_reg32(reg) ioread32be(reg)
+#endif
 
 #if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 /* These are common macros for Power, put here for ARMs */
-/*
- * Hint: for PowerPC (BE) core and LE CAAM, setbits32 won't work properly.
- * Currently, there's no actual part in this configuration.
- */
-#define setbits32(_addr, _v) writel((readl(_addr) | (wr_en_val32(_v))), (_addr))
-#define clrbits32(_addr, _v) \
-	writel((readl(_addr) & ~(wr_en_val32(_v))), (_addr))
-#endif /* __LITTLE_ENDIAN */
-
-#ifndef CONFIG_64BIT
-	#ifdef __LITTLE_ENDIAN
-		#ifdef CAAM_DIFF_ENDIAN
-static inline void wr_reg64(u64 __iomem *reg, u64 data)
-{
-	wr_reg32((u32 __iomem *)reg, (data & 0xffffffff00000000ull) >> 32);
-	wr_reg32((u32 __iomem *)reg + 1, data & 0x00000000ffffffffull);
-}
+#define setbits32(_addr, _v) wr_reg32((_addr), rd_reg32(_addr) | (_v))
+#define clrbits32(_addr, _v) wr_reg32((_addr), rd_reg32(_addr) & ~(_v))
 
-static inline u64 rd_reg64(u64 __iomem *reg)
-{
-	return (((u64)rd_reg32((u32 __iomem *)reg)) << 32) |
-		((u64)rd_reg32((u32 __iomem *)reg + 1));
-}
-		#else /* CAAM_DIFF_ENDIAN */
-static inline void wr_reg64(u64 __iomem *reg, u64 data)
-{
-	wr_reg32((u32 __iomem *)reg + 1, (data & 0xffffffff00000000ull) >> 32);
-	wr_reg32((u32 __iomem *)reg, data & 0x00000000ffffffffull);
-}
+#endif /* CONFIG_ARM || CONFIG_ARM64 */
 
-static inline u64 rd_reg64(u64 __iomem *reg)
-{
-	return (((u64)rd_reg32((u32 __iomem *)reg + 1)) << 32) |
-		((u64)rd_reg32((u32 __iomem *)reg));
-}
-		#endif /* CAAM_DIFF_ENDIAN */
-	#else /* __LITTLE_ENDIAN */
-		#ifdef CAAM_DIFF_ENDIAN
+#ifndef CONFIG_64BIT
+	#if defined(__BIG_ENDIAN) && defined(CAAM_DIFF_ENDIAN) || \
+	    defined(__LITTLE_ENDIAN) && !defined(CAAM_DIFF_ENDIAN)
 static inline void wr_reg64(u64 __iomem *reg, u64 data)
 {
 	wr_reg32((u32 __iomem *)reg + 1, (data & 0xffffffff00000000ull) >> 32);
@@ -186,7 +131,7 @@ static inline u64 rd_reg64(u64 __iomem *reg)
 	return (((u64)rd_reg32((u32 __iomem *)reg + 1)) << 32) |
 		((u64)rd_reg32((u32 __iomem *)reg));
 }
-		#else
+	#else
 static inline void wr_reg64(u64 __iomem *reg, u64 data)
 {
 	wr_reg32((u32 __iomem *)reg, (data & 0xffffffff00000000ull) >> 32);
@@ -198,8 +143,7 @@ static inline u64 rd_reg64(u64 __iomem *reg)
 	return (((u64)rd_reg32((u32 __iomem *)reg)) << 32) |
 		((u64)rd_reg32((u32 __iomem *)reg + 1));
 }
-		#endif /* CAAM_DIFF_ENDIAN */
-	#endif /* __LITTLE_ENDIAN */
+	#endif
 #endif /* CONFIG_64BIT */
 
 #ifdef CONFIG_ARCH_DMA_ADDR_T_64BIT
-- 
1.7.5.4

