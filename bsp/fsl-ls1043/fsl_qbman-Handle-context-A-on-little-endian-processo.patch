From f340d4307e9a75da5800bab87ce4445ee73af368 Mon Sep 17 00:00:00 2001
From: Roy Pledge <Roy.Pledge@freescale.com>
Date: Fri, 5 Jun 2015 16:15:31 -0400
Subject: [PATCH 180/451] fsl_qbman: Handle context A on little endian
 processors

Implement context A byte swapping

Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
[Xulin: Original patch taken from
Linux-LS1043A-SDK-V0.4-SOURCE-20150826-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |    2 ++
 include/linux/fsl_qman.h              |   11 +++++++++++
 2 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index 4486a38..ae46505 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -288,6 +288,7 @@ static inline void cpu_to_hw_fqd(struct qm_fqd *fqd)
 	fqd->dest_wq = cpu_to_be16(fqd->dest_wq);
 	fqd->ics_cred = cpu_to_be16(fqd->ics_cred);
 	fqd->context_b = cpu_to_be32(fqd->context_b);
+	fqd->context_a.opaque = cpu_to_be64(fqd->context_a.opaque);
 }
 
 static inline void hw_fqd_to_cpu(struct qm_fqd *fqd)
@@ -297,6 +298,7 @@ static inline void hw_fqd_to_cpu(struct qm_fqd *fqd)
 	fqd->dest_wq = be16_to_cpu(fqd->dest_wq);
 	fqd->ics_cred = be16_to_cpu(fqd->ics_cred);
 	fqd->context_b = be32_to_cpu(fqd->context_b);
+	fqd->context_a.opaque = be64_to_cpu(fqd->context_a.opaque);
 }
 
 /* Swap a 40 bit address */
diff --git a/include/linux/fsl_qman.h b/include/linux/fsl_qman.h
index a3e20b5..61211d2 100644
--- a/include/linux/fsl_qman.h
+++ b/include/linux/fsl_qman.h
@@ -525,17 +525,28 @@ struct qm_fqd {
 		/* Treat it as 64-bit opaque */
 		u64 opaque;
 		struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 			u32 hi;
 			u32 lo;
+#else
+			u32 lo;
+			u32 hi;
+#endif
 		};
 		/* Treat it as s/w portal stashing config */
 		/* See 1.5.6.7.1: "FQD Context_A field used for [...] */
 		struct {
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 			struct qm_fqd_stashing stashing;
 			/* 48-bit address of FQ context to
 			 * stash, must be cacheline-aligned */
 			u16 context_hi;
 			u32 context_lo;
+#else
+			u32 context_lo;
+			u16 context_hi;
+			struct qm_fqd_stashing stashing;
+#endif
 		} __packed;
 	} context_a;
 	struct qm_fqd_oac oac_query;
-- 
1.7.5.4

