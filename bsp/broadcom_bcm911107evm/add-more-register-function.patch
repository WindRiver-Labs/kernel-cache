From c7c3b2e7dbd5947c94aca0cfa4322a361dec16eb Mon Sep 17 00:00:00 2001
From: Fei Wu <fei.wu@windriver.com>
Date: Wed, 17 Mar 2010 19:39:32 +0800
Subject: [PATCH 35/47] add more register function

add more functions to operate the registers' bits, several device
drivers make use of them.

Signed-off-by: Fei Wu <fei.wu@windriver.com>
---
 arch/arm/mach-bcmring/include/csp/reg.h |  158 +++++++++++++++++++++++++++++++
 1 files changed, 158 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-bcmring/include/csp/reg.h b/arch/arm/mach-bcmring/include/csp/reg.h
index e5f60bf..9f3aec3 100644
--- a/arch/arm/mach-bcmring/include/csp/reg.h
+++ b/arch/arm/mach-bcmring/include/csp/reg.h
@@ -106,9 +106,167 @@ static inline void reg32_modify_mask(volatile uint32_t *reg, uint32_t mask,
 	REG_LOCAL_IRQ_RESTORE;
 }
 
+#define REG_LOCK_ACCESS
+#define REG_UNLOCK_ACCESS
+static inline void reg32_clear_bits(volatile uint32_t *reg, uint32_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg &= ~(value);
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg32_set_bits(volatile uint32_t *reg, uint32_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg |= value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg32_toggle_bits(volatile uint32_t *reg, uint32_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg ^= value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg32_write_masked(volatile uint32_t *reg, uint32_t mask, uint32_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg = (*reg & (~mask)) | (value & mask);
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
 static inline void reg32_write(volatile uint32_t *reg, uint32_t value)
 {
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
 	*reg = value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
 }
 
+static inline uint32_t reg32_read(volatile uint32_t *reg)
+{
+	return *reg;
+}
+
+/****************************************************************************/
+/*
+ *   16-bit register access functions
+ */
+/****************************************************************************/
+
+static inline void reg16_clear_bits(volatile uint16_t *reg, uint16_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg &= ~(value);
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg16_set_bits(volatile uint16_t *reg, uint16_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg |= value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg16_toggle_bits(volatile uint16_t *reg, uint16_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg ^= value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg16_write_masked(volatile uint16_t *reg, uint16_t mask, uint16_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg = (*reg & (~mask)) | (value & mask);
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg16_write(volatile uint16_t *reg, uint16_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg = value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline uint16_t reg16_read(volatile uint16_t *reg)
+{
+	return *reg;
+}
+
+/****************************************************************************/
+/*
+ *   8-bit register access functions
+ */
+/****************************************************************************/
+
+static inline void reg8_clear_bits(volatile uint8_t *reg, uint8_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg &= ~(value);
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg8_set_bits(volatile uint8_t *reg, uint8_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg |= value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg8_toggle_bits(volatile uint8_t *reg, uint8_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg ^= value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg8_write_masked(volatile uint8_t *reg, uint8_t mask, uint8_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg = (*reg & (~mask)) | (value & mask);
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline void reg8_write(volatile uint8_t *reg, uint8_t value)
+{
+	REG_LOCAL_IRQ_SAVE;
+	REG_LOCK_ACCESS;
+	*reg = value;
+	REG_UNLOCK_ACCESS;
+	REG_LOCAL_IRQ_RESTORE;
+}
+
+static inline uint8_t reg8_read(volatile uint8_t *reg)
+{
+	return *reg;
+}
 #endif /* CSP_REG_H */
-- 
1.7.0.4

