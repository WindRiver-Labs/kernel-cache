From 48934151e2db5c17145e743f6e9f0134e25443d7 Mon Sep 17 00:00:00 2001
From: Fei Wu <fei.wu@windriver.com>
Date: Wed, 17 Mar 2010 19:39:33 +0800
Subject: [PATCH 36/47] add another mode for clock

Some drivers, such as ethernet need to check the output status of
the clock, so add the mode chipcHw_OPTYPE_GET_OUTPUT.

Original patch taken from broadcom SDK PhonexChange6.1

Signed-off-by: Fei Wu <fei.wu@windriver.com>
---
 .../mach-bcmring/include/mach/csp/chipcHw_inline.h |   38 ++++++++++++--------
 1 files changed, 23 insertions(+), 15 deletions(-)

diff --git a/arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h b/arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h
index c78833a..bcabdb9 100644
--- a/arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h
+++ b/arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h
@@ -24,15 +24,16 @@
 
 /* ---- Private Constants and Types --------------------------------------- */
 typedef enum {
-	chipcHw_OPTYPE_BYPASS,	/* Bypass operation */
-	chipcHw_OPTYPE_OUTPUT	/* Output operation */
+	chipcHw_OPTYPE_SET_BYPASS,	/* Bypass operation */
+	chipcHw_OPTYPE_SET_OUTPUT,	/* Output operation */
+	chipcHw_OPTYPE_GET_OUTPUT	/* Check output status */
 } chipcHw_OPTYPE_e;
 
 /* ---- Public Constants and Types ---------------------------------------- */
 /* ---- Public Variable Externs ------------------------------------------- */
 /* ---- Public Function Prototypes ---------------------------------------- */
 /* ---- Private Function Prototypes --------------------------------------- */
-static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
+static inline int chipcHw_setClock(chipcHw_CLOCK_e clock,
 				    chipcHw_OPTYPE_e type, int mode);
 
 /****************************************************************************/
@@ -838,7 +839,7 @@ static inline void chipcHw_setUsbDevice(void)
 *
 */
 /****************************************************************************/
-static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
+static inline int chipcHw_setClock(chipcHw_CLOCK_e clock,
 				    chipcHw_OPTYPE_e type, int mode)
 {
 	volatile uint32_t *pPLLReg = (uint32_t *) 0x0;
@@ -877,7 +878,7 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 		break;
 	case chipcHw_CLOCK_USB:
 		pPLLReg = &pChipcHw->USBClock;
-		if (type == chipcHw_OPTYPE_OUTPUT) {
+		if (type == chipcHw_OPTYPE_SET_OUTPUT) {
 			if (mode) {
 				reg32_modify_and(pPLLReg,
 						 ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);
@@ -889,7 +890,7 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 		break;
 	case chipcHw_CLOCK_LCD:
 		pPLLReg = &pChipcHw->LCDClock;
-		if (type == chipcHw_OPTYPE_OUTPUT) {
+		if (type == chipcHw_OPTYPE_SET_OUTPUT) {
 			if (mode) {
 				reg32_modify_and(pPLLReg,
 						 ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);
@@ -901,7 +902,7 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 		break;
 	case chipcHw_CLOCK_APM:
 		pPLLReg = &pChipcHw->APMClock;
-		if (type == chipcHw_OPTYPE_OUTPUT) {
+		if (type == chipcHw_OPTYPE_SET_OUTPUT) {
 			if (mode) {
 				reg32_modify_and(pPLLReg,
 						 ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);
@@ -942,7 +943,7 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 
 	if (pPLLReg) {
 		switch (type) {
-		case chipcHw_OPTYPE_OUTPUT:
+		case chipcHw_OPTYPE_SET_OUTPUT:
 			/* PLL clock output enable/disable */
 			if (mode) {
 				if (clock == chipcHw_CLOCK_DDR) {
@@ -964,7 +965,7 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 				}
 			}
 			break;
-		case chipcHw_OPTYPE_BYPASS:
+		case chipcHw_OPTYPE_SET_BYPASS:
 			/* PLL clock bypass enable/disable */
 			if (mode) {
 				reg32_modify_or(pPLLReg,
@@ -973,11 +974,14 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 				reg32_modify_and(pPLLReg,
 						 ~chipcHw_REG_PLL_CLOCK_BYPASS_SELECT);
 			}
+		case chipcHw_OPTYPE_GET_OUTPUT:
+			/* Return output status */
+			return (reg32_read(pPLLReg) & chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE) ? 1 : 0;
 			break;
 		}
 	} else if (pClockCtrl) {
 		switch (type) {
-		case chipcHw_OPTYPE_OUTPUT:
+		case chipcHw_OPTYPE_SET_OUTPUT:
 			if (mode) {
 				reg32_modify_or(pClockCtrl,
 						chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE);
@@ -986,7 +990,7 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 						 ~chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE);
 			}
 			break;
-		case chipcHw_OPTYPE_BYPASS:
+		case chipcHw_OPTYPE_SET_BYPASS:
 			if (mode) {
 				reg32_modify_or(pClockCtrl,
 						chipcHw_REG_DIV_CLOCK_BYPASS_SELECT);
@@ -994,9 +998,13 @@ static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
 				reg32_modify_and(pClockCtrl,
 						 ~chipcHw_REG_DIV_CLOCK_BYPASS_SELECT);
 			}
+		case chipcHw_OPTYPE_GET_OUTPUT:
+			/* Return output status */
+			return (reg32_read(pClockCtrl) & chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE) ? 1 : 0;
 			break;
 		}
 	}
+	return 0;
 }
 
 /****************************************************************************/
@@ -1012,7 +1020,7 @@ static inline void chipcHw_setClockDisable(chipcHw_CLOCK_e clock)
 {
 
 	/* Disable output of the clock */
-	chipcHw_setClock(clock, chipcHw_OPTYPE_OUTPUT, 0);
+	chipcHw_setClock(clock, chipcHw_OPTYPE_SET_OUTPUT, 0);
 }
 
 /****************************************************************************/
@@ -1028,7 +1036,7 @@ static inline void chipcHw_setClockEnable(chipcHw_CLOCK_e clock)
 {
 
 	/* Enable output of the clock */
-	chipcHw_setClock(clock, chipcHw_OPTYPE_OUTPUT, 1);
+	chipcHw_setClock(clock, chipcHw_OPTYPE_SET_OUTPUT, 1);
 }
 
 /****************************************************************************/
@@ -1043,7 +1051,7 @@ static inline void chipcHw_setClockEnable(chipcHw_CLOCK_e clock)
 static inline void chipcHw_bypassClockEnable(chipcHw_CLOCK_e clock)
 {
 	/* Enable bypass clock */
-	chipcHw_setClock(clock, chipcHw_OPTYPE_BYPASS, 1);
+	chipcHw_setClock(clock, chipcHw_OPTYPE_SET_BYPASS, 1);
 }
 
 /****************************************************************************/
@@ -1058,7 +1066,7 @@ static inline void chipcHw_bypassClockEnable(chipcHw_CLOCK_e clock)
 static inline void chipcHw_bypassClockDisable(chipcHw_CLOCK_e clock)
 {
 	/* Disable bypass clock */
-	chipcHw_setClock(clock, chipcHw_OPTYPE_BYPASS, 0);
+	chipcHw_setClock(clock, chipcHw_OPTYPE_SET_BYPASS, 0);
 
 }
 
-- 
1.7.0.4

