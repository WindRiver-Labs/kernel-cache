From e7f672e16e1fdf2ca1a45cfdec6121e6f0452583 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Tue, 12 Aug 2014 14:56:43 +0800
Subject: [PATCH] rt: arm: fixmap: use set_fixmap_pte() instead of
 set_top_pte() when switching kmaps

After the patch ("ARM: 8031/2: change fixmap mapping region to support
32 CPUs"), the pmd for the kmap address has moved out of top_pmd, so it
is not right anymore to use set_top_pte() to set the corresponding pte
entry. We should use the specific set_fixmap_pte() instead. We have
already replaced most of them in that patch, but missed the ones in
function switch_kmaps() for rt kernel. Just fixes it.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/arm/mm/highmem.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/arm/mm/highmem.c b/arch/arm/mm/highmem.c
index 189c78b..6c2cfac 100644
--- a/arch/arm/mm/highmem.c
+++ b/arch/arm/mm/highmem.c
@@ -173,7 +173,7 @@ void switch_kmaps(struct task_struct *prev_p, struct task_struct *next_p)
 	for (i = 0; i < prev_p->kmap_idx; i++) {
 		int idx = i + KM_TYPE_NR * smp_processor_id();
 
-		set_top_pte(idx, __pte(0));
+		set_fixmap_pte(idx, __pte(0));
 	}
 	/*
 	 * Restore @next_p's kmap_atomic mappings
@@ -182,7 +182,7 @@ void switch_kmaps(struct task_struct *prev_p, struct task_struct *next_p)
 		int idx = i + KM_TYPE_NR * smp_processor_id();
 
 		if (!pte_none(next_p->kmap_pte[i]))
-			set_top_pte(idx, next_p->kmap_pte[i]);
+			set_fixmap_pte(idx, next_p->kmap_pte[i]);
 	}
 }
 #endif
-- 
1.7.5.4

