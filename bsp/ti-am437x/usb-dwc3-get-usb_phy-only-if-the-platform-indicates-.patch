From c16060b0e6b93b073cf190b42fea7b60bc7c9050 Mon Sep 17 00:00:00 2001
From: Kishon Vijay Abraham I <kishon@ti.com>
Date: Mon, 2 Sep 2013 16:51:34 +0530
Subject: [PATCH 045/285] usb: dwc3: get "usb_phy" only if the platform
 indicates the presence of PHY

There can be systems which does not have a external usb_phy, so get
usb_phy only if usb-phy property is added in the case of dt boot or if
platform_data indicates the presence of PHY. Also remove checking if
return value is -ENXIO since it's now changed to always enable usb_phy layer.

Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
[Kevin: The original patch taken from TI
ti-sdk-am437x-evm-07.01.00.00-Linux-x86-Install.bin, fix the merge
conflict with the patch "usb: dwc3: core: make USB3 PHY optional"]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/usb/dwc3/Kconfig         |    1 +
 drivers/usb/dwc3/core.c          |   84 +++++++++++++++++++++-----------------
 drivers/usb/dwc3/platform_data.h |    1 +
 3 files changed, 48 insertions(+), 38 deletions(-)

diff --git a/drivers/usb/dwc3/Kconfig b/drivers/usb/dwc3/Kconfig
index 757aa18..0b7c550 100644
--- a/drivers/usb/dwc3/Kconfig
+++ b/drivers/usb/dwc3/Kconfig
@@ -1,6 +1,7 @@
 config USB_DWC3
 	tristate "DesignWare USB3 DRD Core Support"
 	depends on (USB || USB_GADGET) && GENERIC_HARDIRQS
+	select USB_PHY
 	select USB_XHCI_PLATFORM if USB_SUPPORT && USB_XHCI_HCD
 	help
 	  Say Y or M here if your system has a Dual Role SuperSpeed
diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 790752e..6c365b4 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -430,13 +430,34 @@ static int dwc3_probe(struct platform_device *pdev)
 
 		switch (dwc->maximum_speed) {
 		case USB_SPEED_SUPER:
-			dwc->usb2_phy = devm_usb_get_phy_by_phandle(dev, "usb-phy", 0);
-			dwc->usb3_phy = devm_usb_get_phy_by_phandle(dev, "usb-phy", 1);
+			if (of_property_read_bool(node, "usb-phy")) {
+				dwc->usb2_phy = devm_usb_get_phy_by_phandle(dev,
+					"usb-phy", 0);
+				if (IS_ERR(dwc->usb2_phy))
+					return PTR_ERR(dwc->usb2_phy);
+				dwc->usb3_phy = devm_usb_get_phy_by_phandle(dev,
+					"usb-phy", 1);
+				if (IS_ERR(dwc->usb3_phy))
+					return PTR_ERR(dwc->usb3_phy);
+			} else {
+				dwc->usb2_phy = NULL;
+				dwc->usb3_phy = NULL;
+			}
+
 			break;
 		case USB_SPEED_HIGH:
 		case USB_SPEED_FULL:
 		case USB_SPEED_LOW:
-			dwc->usb2_phy = devm_usb_get_phy_by_phandle(dev, "usb-phy", 0);
+			dwc->usb3_phy = NULL;
+			dwc->usb3_generic_phy = NULL;
+			if (of_property_read_bool(node, "usb-phy")) {
+				dwc->usb2_phy = devm_usb_get_phy_by_phandle(dev,
+					"usb-phy", 0);
+				if (IS_ERR(dwc->usb2_phy))
+					return PTR_ERR(dwc->usb2_phy);
+			} else {
+				dwc->usb2_phy = NULL;
+			}
 			break;
 		}
 
@@ -446,13 +467,32 @@ static int dwc3_probe(struct platform_device *pdev)
 
 		switch (dwc->maximum_speed) {
 		case USB_SPEED_SUPER:
-			dwc->usb2_phy = devm_usb_get_phy(dev, USB_PHY_TYPE_USB2);
-			dwc->usb3_phy = devm_usb_get_phy(dev, USB_PHY_TYPE_USB3);
+			if (pdata->has_phy) {
+				dwc->usb2_phy = devm_usb_get_phy(dev,
+					USB_PHY_TYPE_USB2);
+				if (IS_ERR(dwc->usb2_phy))
+					return PTR_ERR(dwc->usb2_phy);
+				dwc->usb3_phy = devm_usb_get_phy(dev,
+					USB_PHY_TYPE_USB3);
+				if (IS_ERR(dwc->usb3_phy))
+					return PTR_ERR(dwc->usb3_phy);
+			} else {
+				dwc->usb2_phy = NULL;
+				dwc->usb3_phy = NULL;
+			}
 			break;
 		case USB_SPEED_HIGH:
 		case USB_SPEED_FULL:
 		case USB_SPEED_LOW:
-			dwc->usb2_phy = devm_usb_get_phy(dev, USB_PHY_TYPE_USB2);
+			dwc->usb3_phy = NULL;
+			if (pdata->has_phy) {
+				dwc->usb2_phy = devm_usb_get_phy(dev,
+					USB_PHY_TYPE_USB2);
+				if (IS_ERR(dwc->usb2_phy))
+					return PTR_ERR(dwc->usb2_phy);
+			} else {
+				dwc->usb2_phy = NULL;
+			}
 			break;
 		}
 
@@ -463,38 +503,6 @@ static int dwc3_probe(struct platform_device *pdev)
 	if (dwc->maximum_speed == USB_SPEED_UNKNOWN)
 		dwc->maximum_speed = USB_SPEED_SUPER;
 
-	if (IS_ERR(dwc->usb2_phy)) {
-		ret = PTR_ERR(dwc->usb2_phy);
-
-		/*
-		 * if -ENXIO is returned, it means PHY layer wasn't
-		 * enabled, so it makes no sense to return -EPROBE_DEFER
-		 * in that case, since no PHY driver will ever probe.
-		 */
-		if (ret == -ENXIO)
-			return ret;
-
-		dev_err(dev, "no usb2 phy configured\n");
-		return -EPROBE_DEFER;
-	}
-
-	if (dwc->maximum_speed == USB_SPEED_SUPER) {
-		if (IS_ERR(dwc->usb3_phy)) {
-			ret = PTR_ERR(dwc->usb2_phy);
-
-			/*
-			 * if -ENXIO is returned, it means PHY layer wasn't
-			 * enabled, so it makes no sense to return -EPROBE_DEFER
-			 * in that case, since no PHY driver will ever probe.
-			 */
-			if (ret == -ENXIO)
-				return ret;
-
-			dev_err(dev, "no usb3 phy configured\n");
-			return -EPROBE_DEFER;
-		}
-	}
-
 	usb_phy_set_suspend(dwc->usb2_phy, 0);
 	usb_phy_set_suspend(dwc->usb3_phy, 0);
 
diff --git a/drivers/usb/dwc3/platform_data.h b/drivers/usb/dwc3/platform_data.h
index 16ffe19..dc326c8 100644
--- a/drivers/usb/dwc3/platform_data.h
+++ b/drivers/usb/dwc3/platform_data.h
@@ -22,4 +22,5 @@
 struct dwc3_platform_data {
 	enum usb_device_speed maximum_speed;
 	bool tx_fifo_resize;
+	bool has_phy;
 };
-- 
1.7.5.4

