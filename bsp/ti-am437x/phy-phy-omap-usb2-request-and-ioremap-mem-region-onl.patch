From 07c3c8f5d2192571e4c78d26e4c6fd0f7b94ff9f Mon Sep 17 00:00:00 2001
From: Kishon Vijay Abraham I <kishon@ti.com>
Date: Thu, 19 Dec 2013 14:37:50 +0530
Subject: [PATCH 238/285] phy: phy-omap-usb2: request and ioremap mem region
 only from probe

commit e08a717 (phy: omap-usb2: Provide workaround for USB2PHY false
disconnect) has to configure a register to reduce the sensitivity of
the disconnect. But it does devm_request_and_ioremap in phy_init which
might be called many times leading to do requesting the same mem region
many times. So moved 'devm_request_and_ioremap' to probe.

Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
[Kevin: The original patch taken from TI
ti-sdk-am437x-evm-07.01.00.00-Linux-x86-Install.bin]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/phy/phy-omap-usb2.c |   22 +++++++++++-----------
 1 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/phy/phy-omap-usb2.c b/drivers/phy/phy-omap-usb2.c
index c375733..36b33b1 100644
--- a/drivers/phy/phy-omap-usb2.c
+++ b/drivers/phy/phy-omap-usb2.c
@@ -122,19 +122,9 @@ static int omap_usb_power_on(struct phy *x)
 static int omap_usb_init(struct phy *x)
 {
 	struct omap_usb *phy = phy_get_drvdata(x);
-	struct resource *res;
-	struct platform_device *pdev = to_platform_device(phy->dev);
 	u32 val;
 
 	if (phy->flags & OMAP_USB2_CALIBRATE_FALSE_DISCONNECT) {
-		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-		if (!res) {
-			dev_err(&pdev->dev, "memory resource not available\n");
-			return -ENODEV;
-		}
-		phy->phy_base = devm_request_and_ioremap(&pdev->dev, res);
-		if (!phy->phy_base)
-			return -ENOMEM;
 		/*
 		 *
 		 * Reduce the sensitivity of internal PHY by enabling the
@@ -200,6 +190,7 @@ static int omap_usb2_probe(struct platform_device *pdev)
 	struct device_node *control_node;
 	struct platform_device *control_pdev;
 	struct phy *generic_phy;
+	struct resource *res;
 	struct phy_provider *phy_provider;
 	const struct of_device_id *of_id;
 	struct usb_phy_data *phy_data;
@@ -230,8 +221,17 @@ static int omap_usb2_probe(struct platform_device *pdev)
 	phy->phy.otg		= otg;
 	phy->phy.type		= USB_PHY_TYPE_USB2;
 
-	if (phy_data->flags & OMAP_USB2_CALIBRATE_FALSE_DISCONNECT)
+	if (phy_data->flags & OMAP_USB2_CALIBRATE_FALSE_DISCONNECT) {
+		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+		if (!res) {
+			dev_err(&pdev->dev, "memory resource not available\n");
+			return -ENODEV;
+		}
+		phy->phy_base = devm_request_and_ioremap(&pdev->dev, res);
+		if (!phy->phy_base)
+			return -ENOMEM;
 		phy->flags |= OMAP_USB2_CALIBRATE_FALSE_DISCONNECT;
+	}
 
 	control_node = of_parse_phandle(node, "ctrl-module", 0);
 	if (!control_node) {
-- 
1.7.5.4

