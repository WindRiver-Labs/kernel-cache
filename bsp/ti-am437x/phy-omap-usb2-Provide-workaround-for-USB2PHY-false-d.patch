From bb83b3e829fe275ea301e7e16a8805e673497dbc Mon Sep 17 00:00:00 2001
From: Austin Beam <austinbeam@ti.com>
Date: Tue, 10 Dec 2013 11:12:31 +0530
Subject: [PATCH 129/285] phy: omap-usb2: Provide workaround for USB2PHY false
 disconnect

Enable the dra7x errata workaround for false disconnect problem
with USB2PHY. False disconnects were detected with some of the devices.
Reduce the sensitivity of the disconnect logic within the USB2PHY subsystem
to enusre these false disconnects are not registered.

[george.cherian@ti.com]
While at that, pass proper flags for each SoC's. This is a common driver
used across OMAP4,OMAP5,DRA7xx and AM437x USB2PHY.

False disconnect workaround is currently applicable for only DRA7x.

Update the omap-phy.txt Documentation also to add new comaptible.

Signed-off-by: Austin Beam <austinbeam@ti.com>
Signed-off-by: George Cherian <george.cherian@ti.com>
Reviewed-by: Roger Quadros <rogerq@ti.com>
[Kevin: The original patch taken from TI
ti-sdk-am437x-evm-07.01.00.00-Linux-x86-Install.bin]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 Documentation/devicetree/bindings/phy/omap-phy.txt |    3 +-
 drivers/phy/phy-omap-usb2.c                        |   49 ++++++++++++++++++++
 include/linux/phy/omap_usb.h                       |   10 ++--
 3 files changed, 57 insertions(+), 5 deletions(-)

diff --git a/Documentation/devicetree/bindings/phy/omap-phy.txt b/Documentation/devicetree/bindings/phy/omap-phy.txt
index ac1af3a..bd07589 100644
--- a/Documentation/devicetree/bindings/phy/omap-phy.txt
+++ b/Documentation/devicetree/bindings/phy/omap-phy.txt
@@ -5,7 +5,8 @@ OMAP USB2 PHY
 Required properties:
  - reg : Address and length of the register set for the device.
  - compatible: Should be either of
-	* "ti,omap-usb2" for OMAP4,OMAP5,DRA7
+	* "ti,omap-usb2" for OMAP4 and OMAP5
+	* "ti,dra7x-usb2" for DRA7
 	* "ti,am437x-usb2" for AM437x
  - #phy-cells: determine the number of cells that should be given in the
    phandle while referencing this phy.
diff --git a/drivers/phy/phy-omap-usb2.c b/drivers/phy/phy-omap-usb2.c
index 2225a28..c375733 100644
--- a/drivers/phy/phy-omap-usb2.c
+++ b/drivers/phy/phy-omap-usb2.c
@@ -31,6 +31,9 @@
 #include <linux/of_platform.h>
 #include <linux/phy/phy.h>
 
+#define USB2PHY_DISCON_BYP_LATCH (1 << 31)
+#define USB2PHY_ANA_CONFIG1 0x4c
+
 /**
  * omap_usb2_set_comparator - links the comparator present in the sytem with
  *	this phy
@@ -116,7 +119,40 @@ static int omap_usb_power_on(struct phy *x)
 	return 0;
 }
 
+static int omap_usb_init(struct phy *x)
+{
+	struct omap_usb *phy = phy_get_drvdata(x);
+	struct resource *res;
+	struct platform_device *pdev = to_platform_device(phy->dev);
+	u32 val;
+
+	if (phy->flags & OMAP_USB2_CALIBRATE_FALSE_DISCONNECT) {
+		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+		if (!res) {
+			dev_err(&pdev->dev, "memory resource not available\n");
+			return -ENODEV;
+		}
+		phy->phy_base = devm_request_and_ioremap(&pdev->dev, res);
+		if (!phy->phy_base)
+			return -ENOMEM;
+		/*
+		 *
+		 * Reduce the sensitivity of internal PHY by enabling the
+		 * DISCON_BYP_LATCH of the USB2PHY_ANA_CONFIG1 register. This
+		 * resolves issues with certain devices which can otherwise
+		 * be prone to false disconnects.
+		 *
+		 */
+		val = omap_usb_readl(phy->phy_base, USB2PHY_ANA_CONFIG1);
+		val |= USB2PHY_DISCON_BYP_LATCH;
+		omap_usb_writel(phy->phy_base, USB2PHY_ANA_CONFIG1, val);
+	}
+
+	return 0;
+}
+
 static struct phy_ops ops = {
+	.init		= omap_usb_init,
 	.power_on	= omap_usb_power_on,
 	.power_off	= omap_usb_power_off,
 	.owner		= THIS_MODULE,
@@ -128,6 +164,11 @@ static const struct usb_phy_data omap_usb2_data = {
 	.flags = OMAP_USB2_HAS_START_SRP | OMAP_USB2_HAS_SET_VBUS,
 };
 
+static const struct usb_phy_data dra7x_usb2_data = {
+	.label = "dra7x_usb2",
+	.flags = OMAP_USB2_CALIBRATE_FALSE_DISCONNECT,
+};
+
 static const struct usb_phy_data am437x_usb2_data = {
 	.label = "am437x_usb2",
 	.flags =  0,
@@ -139,6 +180,10 @@ static const struct of_device_id omap_usb2_id_table[] = {
 		.data = &omap_usb2_data,
 	},
 	{
+		.compatible = "ti,dra7x-usb2",
+		.data = &dra7x_usb2_data,
+	},
+	{
 		.compatible = "ti,am437x-usb2",
 		.data = &am437x_usb2_data,
 	},
@@ -163,6 +208,7 @@ static int omap_usb2_probe(struct platform_device *pdev)
 
 	if (!of_id)
 		return -EINVAL;
+
 	phy_data = (struct usb_phy_data *)of_id->data;
 
 	phy = devm_kzalloc(&pdev->dev, sizeof(*phy), GFP_KERNEL);
@@ -184,6 +230,9 @@ static int omap_usb2_probe(struct platform_device *pdev)
 	phy->phy.otg		= otg;
 	phy->phy.type		= USB_PHY_TYPE_USB2;
 
+	if (phy_data->flags & OMAP_USB2_CALIBRATE_FALSE_DISCONNECT)
+		phy->flags |= OMAP_USB2_CALIBRATE_FALSE_DISCONNECT;
+
 	control_node = of_parse_phandle(node, "ctrl-module", 0);
 	if (!control_node) {
 		dev_err(&pdev->dev, "Failed to get control device phandle\n");
diff --git a/include/linux/phy/omap_usb.h b/include/linux/phy/omap_usb.h
index 289a56a..946f2d8 100644
--- a/include/linux/phy/omap_usb.h
+++ b/include/linux/phy/omap_usb.h
@@ -38,6 +38,8 @@ struct omap_usb {
 	struct clk		*wkupclk;
 	struct clk		*optclk;
 	struct clk		*optclk2;
+	void __iomem		*phy_base;
+	u32			flags;
 };
 
 struct usb_phy_data {
@@ -45,10 +47,10 @@ struct usb_phy_data {
 	u32 flags;
 };
 
-enum usb_phy_data_flags {
-	OMAP_USB2_HAS_START_SRP = 1,
-	OMAP_USB2_HAS_SET_VBUS,
-};
+/* Driver Flags */
+#define OMAP_USB2_HAS_START_SRP (1 << 0)
+#define OMAP_USB2_HAS_SET_VBUS (1 << 1)
+#define OMAP_USB2_CALIBRATE_FALSE_DISCONNECT (1 << 2)
 
 #define	phy_to_omapusb(x)	container_of((x), struct omap_usb, phy)
 
-- 
1.7.5.4

