From c46989d2205859f001779f1de8a22797b93951a9 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Thu, 14 Aug 2014 09:35:51 +0800
Subject: [PATCH 2/4] arm: omap2: hwmod: fix the memory leak in
 _init_opt_clks_dt()

The variable 'opt_clk_names' is an array which holds the pointers to
the dt strings. After we init 'oh->opt_clks[i].role' with the
corresponding pointers, this array becomes useless. So we should
release it. The following is the call trace reported by kmemleak:
unreferenced object 0xeea8a700 (size 64):
  comm "swapper", pid 1, jiffies 4294937383 (age 6688.810s)
  hex dump (first 32 bytes):
    14 37 ff df 00 00 00 00 00 00 00 00 00 00 00 00  .7..............
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  backtrace:
    [<c0158f5c>] create_object+0x130/0x294
    [<c06ebe5c>] kmemleak_alloc+0x48/0x78
    [<c014a9ac>] __kmalloc+0x190/0x400
    [<c09f8670>] _init+0x2b8/0x520
    [<c09f8c7c>] __omap_hwmod_setup_all+0x4c/0x94
    [<c0008830>] do_one_initcall+0x128/0x180
    [<c09ebe98>] kernel_init_freeable+0x1e8/0x2b8
    [<c06eb528>] kernel_init+0x1c/0x168
    [<c000e4c8>] ret_from_fork+0x14/0x20
    [<ffffffff>] 0xffffffff

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Tested-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/mach-omap2/omap_hwmod.c |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/arch/arm/mach-omap2/omap_hwmod.c b/arch/arm/mach-omap2/omap_hwmod.c
index 3be9afe..5762adc 100644
--- a/arch/arm/mach-omap2/omap_hwmod.c
+++ b/arch/arm/mach-omap2/omap_hwmod.c
@@ -883,8 +883,10 @@ static int _init_opt_clks_dt(struct omap_hwmod *oh, struct device_node *np)
 
 	oh->opt_clks = kzalloc(sizeof(struct omap_hwmod_opt_clk *)
 			       * opt_clks_cnt, GFP_KERNEL);
-	if (!oh->opt_clks)
-		return -ENOMEM;
+	if (!oh->opt_clks) {
+		kfree(opt_clk_names);
+		return  -ENOMEM;
+	}
 
 	oh->opt_clks_cnt = opt_clks_cnt;
 
@@ -899,6 +901,8 @@ static int _init_opt_clks_dt(struct omap_hwmod *oh, struct device_node *np)
 		oh->opt_clks[i].role = opt_clk_names[i];
 		clk_prepare(oh->opt_clks[i]._clk);
 	}
+
+	kfree(opt_clk_names);
 	return ret;
 }
 
-- 
1.7.5.4

