From b941d25a4bb8d04f4a593a4c9e92b636f5ec6238 Mon Sep 17 00:00:00 2001
From: Felipe Balbi <balbi@ti.com>
Date: Fri, 15 Nov 2013 10:15:25 -0600
Subject: [PATCH 099/285] clk: gpio: fix build warning

we should be returning a clock pointer, not
an integer.

Changes by Darren Etheridge (detheridge@ti.com):
v2: incorporating additional suggestions from Nishanth Menon (nm@ti.com)
v3: incorporate additional inputs for Nishanth and Felipe

Signed-off-by: Felipe Balbi <balbi@ti.com>
Signed-off-by: Darren Etheridge <detheridge@ti.com>
[Kevin: The original patch taken from TI
ti-sdk-am437x-evm-07.01.00.00-Linux-x86-Install.bin]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/clk/clk-gpio.c |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/clk/clk-gpio.c b/drivers/clk/clk-gpio.c
index 6661e5b..e1268d8 100644
--- a/drivers/clk/clk-gpio.c
+++ b/drivers/clk/clk-gpio.c
@@ -76,7 +76,7 @@ struct clk *clk_register_gpio(struct device *dev, const char *name,
 		unsigned int gpio, bool active_low)
 {
 	struct clk_gpio *clk_gpio;
-	struct clk *clk;
+	struct clk *clk = ERR_PTR(-EINVAL);
 	struct clk_init_data init = { NULL };
 	unsigned long gpio_flags;
 	int err;
@@ -94,6 +94,7 @@ struct clk *clk_register_gpio(struct device *dev, const char *name,
 	if (err) {
 		pr_err("%s: %s: Error requesting clock control gpio %u\n",
 		       __func__, name, gpio);
+		clk = ERR_PTR(err);
 		goto clk_register_gpio_err;
 	}
 
@@ -105,6 +106,7 @@ struct clk *clk_register_gpio(struct device *dev, const char *name,
 
 	if (!clk_gpio) {
 		pr_err("%s: %s: could not allocate gpio clk\n", __func__, name);
+		clk = ERR_PTR(-ENOMEM);
 		goto clk_register_gpio_err;
 	}
 
@@ -123,8 +125,6 @@ struct clk *clk_register_gpio(struct device *dev, const char *name,
 	if (!IS_ERR(clk))
 		return clk;
 
-	err = PTR_ERR(clk);
-
 	if (!dev)
 		kfree(clk_gpio);
 
@@ -132,7 +132,7 @@ clk_register_gpio_err:
 	if (!dev)
 		gpio_free(gpio);
 
-	return err;
+	return clk;
 }
 EXPORT_SYMBOL_GPL(clk_register_gpio);
 
-- 
1.7.5.4

