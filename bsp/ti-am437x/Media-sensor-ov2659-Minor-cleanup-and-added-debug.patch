From 8b3dd158c129e69e52d19b6a8b6e27b94c7d1904 Mon Sep 17 00:00:00 2001
From: Benoit Parrot <bparrot@ti.com>
Date: Tue, 4 Feb 2014 02:18:40 +0000
Subject: [PATCH 210/285] Media: sensor ov2659: Minor cleanup and added debug

Modified register dump functions to cover all registers
Remove remaining unsused code leftover from the ov9650 adaptation

Signed-off-by: Benoit Parrot <bparrot@ti.com>
Signed-off-by: Darren Etheridge <detheridge@ti.com>
[Kevin: The original patch taken from TI
ti-sdk-am437x-evm-07.01.00.00-Linux-x86-Install.bin]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/media/i2c/ov2659.c |  282 +++++++++++---------------------------------
 include/media/ov2659.h     |    7 +-
 2 files changed, 70 insertions(+), 219 deletions(-)

diff --git a/drivers/media/i2c/ov2659.c b/drivers/media/i2c/ov2659.c
index 3024210..64419e6 100644
--- a/drivers/media/i2c/ov2659.c
+++ b/drivers/media/i2c/ov2659.c
@@ -226,7 +226,7 @@ MODULE_PARM_DESC(debug, "Debug level (0-2)");
 #define REG_YSC_H                     (0x5604)
 #define REG_YSC_L                     (0x5605)
 #define REG_VOFFSET                   (0x5606)
-#define REG_NULL                      (0xffff)	/* Array end token */
+#define REG_NULL                      (0x0000)	/* Array end token */
 
 #define OV265X_ID(_msb, _lsb)	((_msb) << 8 | (_lsb))
 #define OV2659_ID		0x2656
@@ -272,19 +272,6 @@ struct ov2659_framesize {
 	const struct sensor_register *regs;
 };
 
-struct ov2659_interval {
-	struct v4l2_fract interval;
-	/* Maximum resolution for this interval */
-	struct v4l2_frmsize_discrete size;
-	u8 clkrc_div;
-};
-
-enum gpio_id {
-	GPIO_PWDN,
-	GPIO_RST,
-	NUM_GPIOS,
-};
-
 struct ov2659_pll_ctrl {
 	u8 ctrl1;
 	u8 ctrl2;
@@ -295,7 +282,6 @@ struct ov2659 {
 	struct v4l2_subdev sd;
 	struct media_pad pad;
 	enum v4l2_mbus_type bus_type;
-	int gpios[NUM_GPIOS];
 	/* External master clock frequency */
 	unsigned long mclk_frequency;
 
@@ -304,9 +290,6 @@ struct ov2659 {
 
 	struct i2c_client *client;
 
-	/* Exposure row interval in us */
-	unsigned int exp_row_interval;
-
 	unsigned short id;
 	const struct ov2659_framesize *frame_size;
 	/* Current Output format Register Value (REG_FORMAT_CTRL00) */
@@ -315,15 +298,12 @@ struct ov2659 {
 	struct v4l2_mbus_framefmt format;
 
 	struct ov2659_ctrls ctrls;
-	/* Pointer to frame rate control data structure */
-	const struct ov2659_interval *fiv;
+
 	/* Sensor specific feq/pll config */
 	struct ov2659_pll_ctrl pll;
 
 	int streaming;
 	int power;
-
-	u8 apply_frame_fmt;
 };
 
 static const struct sensor_register ov2659_init_regs[] = {
@@ -497,7 +477,7 @@ static const struct sensor_register ov2659_init_regs[] = {
 	{0x5063, 0x69}, /* Y AVG */
 /*	{REG_ISP_PRE_CTRL00, 0x80}, */ /* Enable Test Pattern: ColorBar */
 
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 
 /* 1280x720 720p */
@@ -528,7 +508,7 @@ static struct sensor_register ov2659_720p[] = {
 	{0x3a09, 0x6f},
 	{0x3a0b, 0x5d},
 	{0x3a15, 0x9a},
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 
 /* 1600X1200 UXGA */
@@ -576,7 +556,7 @@ static struct sensor_register ov2659_uxga[] = {
 	{0x4608, 0x00},
 	{0x4609, 0x80},
 	{0x5002, 0x00},
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 
 /* 1280X1024 SXGA */
@@ -624,7 +604,7 @@ static struct sensor_register ov2659_sxga[] = {
 	{0x4608, 0x00},
 	{0x4609, 0x80},
 	{0x5002, 0x00},
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 /* 1024X768 SXGA */
 static struct sensor_register ov2659_xga[] = {
@@ -671,7 +651,7 @@ static struct sensor_register ov2659_xga[] = {
 	{0x4608, 0x00},
 	{0x4609, 0x80},
 	{0x5002, 0x00},
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 /* 800X600 SVGA*/
 static struct sensor_register ov2659_svga[] = {
@@ -718,7 +698,7 @@ static struct sensor_register ov2659_svga[] = {
 	{0x4608, 0x00},
 	{0x4609, 0x80},
 	{0x5002, 0x00},
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 
 /* 640X480 VGA */
@@ -766,7 +746,7 @@ static struct sensor_register ov2659_vga[] = {
 	{0x4608, 0x00},
 	{0x4609, 0x80},
 	{0x5002, 0x10},
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 
 /* 320*240 QVGA */
@@ -814,7 +794,7 @@ static  struct sensor_register ov2659_qvga[] = {
 	{0x4608, 0x00},
 	{0x4609, 0x80},
 	{0x5002, 0x10},
-	{0xffff, 0x00}
+	{0x0000, 0x00}
 };
 
 static const struct ov2659_framesize ov2659_framesizes[] = {
@@ -875,25 +855,25 @@ struct ov2659_pixfmt {
 /* YUV422 YUYV*/
 static struct sensor_register ov2659_format_yuyv[] = {
 	{0x4300, 0x30}, /* Format */
-	{0xffff, 0x0}
+	{0x0000, 0x0}
 };
 
 /* YUV422 UYVY  */
 static struct sensor_register ov2659_format_uyvy[] = {
 	{0x4300, 0x32}, /* Format */
-	{0xffff, 0x0}
+	{0x0000, 0x0}
 };
 
 /* Raw Bayer BGGR */
 static struct sensor_register ov2659_format_bggr[] = {
 	{0x4300, 0x00}, /* Format */
-	{0xffff, 0x0}
+	{0x0000, 0x0}
 };
 
 /* RGB565 */
 static struct sensor_register ov2659_format_rgb565[] = {
 	{0x4300, 0x60}, /* Format */
-	{0xffff, 0x0}
+	{0x0000, 0x0}
 };
 
 static const struct ov2659_pixfmt ov2659_formats[] = {
@@ -911,19 +891,6 @@ static const struct ov2659_pixfmt ov2659_formats[] = {
 		ov2659_format_bggr},
 };
 
-/*
- * This table specifies possible frame resolution and interval
- * combinations. Default CLKRC[5:0] divider values are valid
- * only for 24 MHz external clock frequency.
- */
-static struct ov2659_interval ov2659_intervals[] = {
-	{{ 100, 625 }, { SXGA_WIDTH, SXGA_HEIGHT }, 0 },  /* 6.25 fps */
-	{{ 10,  125 }, { VGA_WIDTH, VGA_HEIGHT },   1 },  /* 12.5 fps */
-	{{ 10,  125 }, { QVGA_WIDTH, QVGA_HEIGHT }, 3 },  /* 12.5 fps */
-	{{ 1,   25  }, { VGA_WIDTH, VGA_HEIGHT },   0 },  /* 25 fps */
-	{{ 1,   25  }, { QVGA_WIDTH, QVGA_HEIGHT }, 1 },  /* 25 fps */
-};
-
 static inline struct v4l2_subdev *ctrl_to_sd(struct v4l2_ctrl *ctrl)
 {
 	return &container_of(ctrl->handler, struct ov2659, ctrls.handler)->sd;
@@ -968,7 +935,6 @@ static int ov2659_write(struct i2c_client *client, u16 reg, u8 val)
 	return err;
 }
 
-
 /* sensor register read */
 static int ov2659_read(struct i2c_client *client, u16 reg, u8 *val)
 {
@@ -1013,7 +979,7 @@ static int ov2659_write_array(struct i2c_client *client,
 {
 	int i, ret = 0;
 
-	for (i = 0; ret == 0 && regs[i].addr != REG_NULL; i++) {
+	for (i = 0; ret == 0 && regs[i].addr; i++) {
 		ret = ov2659_write(client, regs[i].addr, regs[i].value);
 		usleep_range(5000, 6000);
 	}
@@ -1033,61 +999,49 @@ static int dump_reg(struct i2c_client *client, u16 reg)
 
 static void ov2659_reg_dump(struct i2c_client *client)
 {
+	int i;
+
 	dump_reg(client, REG_SOFTWARE_STANDBY);
 	dump_reg(client, REG_SOFTWARE_RESET);
-	dump_reg(client, REG_IO_CTRL00);
-	dump_reg(client, REG_IO_CTRL01);
-	dump_reg(client, REG_IO_CTRL02);
-	dump_reg(client, REG_OUTPUT_VALUE00);
-	dump_reg(client, REG_OUTPUT_VALUE01);
-	dump_reg(client, REG_OUTPUT_VALUE02);
-	dump_reg(client, REG_OUTPUT_SELECT00);
-	dump_reg(client, REG_OUTPUT_SELECT01);
-	dump_reg(client, REG_OUTPUT_SELECT02);
-	dump_reg(client, REG_OUTPUT_DRIVE);
-	dump_reg(client, REG_SC_PWC);
-	dump_reg(client, REG_SC_CLKRST0);
-	dump_reg(client, REG_SC_CLKRST1);
-	dump_reg(client, REG_SC_CLKRST2);
-	dump_reg(client, REG_SC_CLKRST3);
-	dump_reg(client, REG_SC_PLL_CTRL0);
-	dump_reg(client, REG_SC_PLL_CTRL1);
-	dump_reg(client, REG_SC_PLL_CTRL2);
-	dump_reg(client, REG_SC_PLL_CTRL3);
-	dump_reg(client, REG_TIMING_HS_H);
-	dump_reg(client, REG_TIMING_HS_L);
-	dump_reg(client, REG_TIMING_VS_H);
-	dump_reg(client, REG_TIMING_VS_L);
-	dump_reg(client, REG_TIMING_HW_H);
-	dump_reg(client, REG_TIMING_HW_L);
-	dump_reg(client, REG_TIMING_VH_H);
-	dump_reg(client, REG_TIMING_VH_L);
-
-	dump_reg(client, REG_TIMING_DVPHO_H);
-	dump_reg(client, REG_TIMING_DVPHO_L);
-	dump_reg(client, REG_TIMING_DVPVO_H);
-	dump_reg(client, REG_TIMING_DVPVO_L);
-
-	dump_reg(client, REG_TIMING_HTS_H);
-	dump_reg(client, REG_TIMING_HTS_L);
-	dump_reg(client, REG_TIMING_VTS_H);
-	dump_reg(client, REG_TIMING_VTS_L);
-	dump_reg(client, REG_TIMING_HOFFS_L);
-	dump_reg(client, REG_TIMING_VOFFS_L);
-	dump_reg(client, REG_TIMING_XINC);
-	dump_reg(client, REG_TIMING_YINC);
-	dump_reg(client, REG_FORMAT_CTRL00);
-	dump_reg(client, REG_TIMING_VERT_FORMAT);
-	dump_reg(client, REG_TIMING_HORIZ_FORMAT);
-	dump_reg(client, REG_VFIFO_READ_START_H);
-	dump_reg(client, REG_VFIFO_READ_START_L);
-	dump_reg(client, REG_DVP_CTRL01);
-	dump_reg(client, REG_DVP_CTRL02);
-	dump_reg(client, REG_DVP_CTRL03);
-	dump_reg(client, REG_ISP_CTRL00);
-	dump_reg(client, REG_ISP_CTRL01);
-	dump_reg(client, REG_ISP_CTRL02);
 
+	for (i = 0x3000; i <= 0x302f; i++)
+		dump_reg(client, i);
+
+	for (i = 0x3400; i <= 0x3406; i++)
+		dump_reg(client, i);
+
+	for (i = 0x3500; i <= 0x3513; i++)
+		dump_reg(client, i);
+
+	for (i = 0x3600; i <= 0x3640; i++)
+		dump_reg(client, i);
+
+	for (i = 0x3800; i <= 0x3821; i++)
+		dump_reg(client, i);
+
+	for (i = 0x3a00; i <= 0x3a26; i++)
+		dump_reg(client, i);
+
+	for (i = 0x4000; i <= 0x4009; i++)
+		dump_reg(client, i);
+
+	for (i = 0x4201; i <= 0x4202; i++)
+		dump_reg(client, i);
+
+	for (i = 0x4300; i <= 0x4301; i++)
+		dump_reg(client, i);
+
+	for (i = 0x4600; i <= 0x4609; i++)
+		dump_reg(client, i);
+
+	for (i = 0x4700; i <= 0x4709; i++)
+		dump_reg(client, i);
+
+	for (i = 0x5000; i <= 0x50a0; i++)
+		dump_reg(client, i);
+
+	for (i = 0x5600; i <= 0x5606; i++)
+		dump_reg(client, i);
 }
 
 struct pll_ctrl_reg {
@@ -1109,7 +1063,7 @@ static const struct pll_ctrl_reg ctrl3[] = {
 	{48, 0x1b},
 	{64, 0x1e},
 	{96, 0x1f},
-	{0xffff, 0x00},
+	{0, 0x00},
 };
 
 static const struct pll_ctrl_reg ctrl1[] = {
@@ -1128,7 +1082,7 @@ static const struct pll_ctrl_reg ctrl1[] = {
 	{26, 0xd0},
 	{28, 0xe0},
 	{30, 0xf0},
-	{0xffff, 0x00},
+	{0, 0x00},
 };
 
 static unsigned int ov2659_pll_calc_params(struct ov2659 *ov2659)
@@ -1142,9 +1096,9 @@ static unsigned int ov2659_pll_calc_params(struct ov2659 *ov2659)
 	u32 bestdelta = -1;
 	int i, j;
 
-	for (i = 0; ctrl1[i].div != 0xffff; i++) {
+	for (i = 0; ctrl1[i].div != 0; i++) {
 		postdiv = ctrl1[i].div;
-		for (j = 0; ctrl3[j].div != 0xffff; j++) {
+		for (j = 0; ctrl3[j].div != 0; j++) {
 			prediv = ctrl3[j].div;
 			for (mult = 1; mult <= 63; mult++) {
 				actual  = ov2659->mclk_frequency;
@@ -1191,16 +1145,15 @@ static int ov2659_set_pixel_clock(struct ov2659 *ov2659)
 		{0x3004, 0x10}, /* System Divider */
 		{0x3005, 0x22}, /* Pixel clock Multiplier */
 		{0x3006, 0x0d}, /* System Divider */
-		{0xffff, 0x00}
+		{0x0000, 0x00}
 	};
 
-	dev_dbg(&client->dev, "%s\n", __func__);
-
-	/* Now set the array using the calculated values */
 	pll_regs[0].value = ov2659->pll.ctrl1;
 	pll_regs[1].value = ov2659->pll.ctrl2;
 	pll_regs[2].value = ov2659->pll.ctrl3;
 
+	dev_dbg(&client->dev, "%s\n", __func__);
+
 	ret = ov2659_write_array(client, pll_regs);
 	if (ret < 0)
 		return ret;
@@ -1250,13 +1203,6 @@ static int ov2659_s_power(struct v4l2_subdev *sd, int on)
  * V4L2 controls
  */
 
-static void ov2659_update_exposure_ctrl(struct ov2659 *ov2659)
-{
-	struct i2c_client *client = ov2659->client;
-	dev_dbg(&client->dev, "%s:\n", __func__);
-
-}
-
 static int ov2659_set_banding_filter(struct ov2659 *ov2659, int value)
 {
 	return 0;
@@ -1267,9 +1213,6 @@ static int ov2659_set_white_balance(struct ov2659 *ov2659, int awb)
 	return 0;
 }
 
-#define NUM_BR_LEVELS	7
-#define NUM_BR_REGS	3
-
 static int ov2659_set_brightness(struct ov2659 *ov2659, int val)
 {
 	return 0;
@@ -1521,75 +1464,6 @@ static int ov2659_enum_frame_sizes(struct v4l2_subdev *sd,
 	return 0;
 }
 
-static int ov2659_g_frame_interval(struct v4l2_subdev *sd,
-				   struct v4l2_subdev_frame_interval *fi)
-{
-	struct ov2659 *ov2659 = to_ov2659(sd);
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-
-	dev_dbg(&client->dev, "%s:\n", __func__);
-
-	mutex_lock(&ov2659->lock);
-	fi->interval = ov2659->fiv->interval;
-	mutex_unlock(&ov2659->lock);
-
-	return 0;
-}
-
-static int __ov2659_set_frame_interval(struct ov2659 *ov2659,
-				       struct v4l2_subdev_frame_interval *fi)
-{
-	struct v4l2_mbus_framefmt *mbus_fmt = &ov2659->format;
-	const struct ov2659_interval *fiv = &ov2659_intervals[0];
-	u64 req_int, err, min_err = ~0ULL;
-	unsigned int i;
-	struct i2c_client *client = ov2659->client;
-
-
-	if (fi->interval.denominator == 0)
-		return -EINVAL;
-
-	req_int = (u64)(fi->interval.numerator * 10000) /
-		fi->interval.denominator;
-
-	for (i = 0; i < ARRAY_SIZE(ov2659_intervals); i++) {
-		const struct ov2659_interval *iv = &ov2659_intervals[i];
-
-		if (mbus_fmt->width != iv->size.width ||
-		    mbus_fmt->height != iv->size.height)
-			continue;
-		err = abs64((u64)(iv->interval.numerator * 10000) /
-			    iv->interval.denominator - req_int);
-		if (err < min_err) {
-			fiv = iv;
-			min_err = err;
-		}
-	}
-	ov2659->fiv = fiv;
-
-	dev_dbg(&client->dev, "Changed frame interval to %u us\n",
-		 fiv->interval.numerator * 1000000 / fiv->interval.denominator);
-
-	return 0;
-}
-
-static int ov2659_s_frame_interval(struct v4l2_subdev *sd,
-				   struct v4l2_subdev_frame_interval *fi)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	struct ov2659 *ov2659 = to_ov2659(sd);
-	int ret;
-
-	dev_dbg(&client->dev, "Setting %d/%d frame interval\n",
-		 fi->interval.numerator, fi->interval.denominator);
-
-	mutex_lock(&ov2659->lock);
-	ret = __ov2659_set_frame_interval(ov2659, fi);
-	ov2659->apply_frame_fmt = 1;
-	mutex_unlock(&ov2659->lock);
-	return ret;
-}
-
 static int ov2659_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh,
 			  struct v4l2_subdev_format *fmt)
 {
@@ -1609,6 +1483,10 @@ static int ov2659_get_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh,
 	fmt->format = ov2659->format;
 	mutex_unlock(&ov2659->lock);
 
+	dev_dbg(&client->dev, "ov2659_get_fmt: %x %dx%d\n",
+		ov2659->format.code, ov2659->format.width,
+		ov2659->format.height);
+
 	return 0;
 }
 
@@ -1623,7 +1501,7 @@ static void __ov2659_try_frame_size(struct v4l2_mbus_framefmt *mf,
 	while (i--) {
 		int err = abs(fsize->width - mf->width)
 				+ abs(fsize->height - mf->height);
-		if ((err < min_err) && (fsize->regs[0].addr != REG_NULL)) {
+		if ((err < min_err) && (fsize->regs[0].addr)) {
 			min_err = err;
 			match = fsize;
 		}
@@ -1676,19 +1554,7 @@ static int ov2659_set_fmt(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh,
 				ov2659_formats[index].format_ctrl_regs;
 		}
 	}
-
-	if (!ret && fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
-		struct v4l2_subdev_frame_interval fiv = {
-			.interval = { 0, 1 }
-		};
-		/* Reset to minimum possible frame interval */
-		__ov2659_set_frame_interval(ov2659, &fiv);
-	}
 	mutex_unlock(&ov2659->lock);
-
-	if (!ret)
-		ov2659_update_exposure_ctrl(ov2659);
-
 	return ret;
 }
 
@@ -1787,8 +1653,6 @@ static const struct v4l2_subdev_pad_ops ov2659_pad_ops = {
 
 static const struct v4l2_subdev_video_ops ov2659_video_ops = {
 	.s_stream = ov2659_s_stream,
-	.g_frame_interval = ov2659_g_frame_interval,
-	.s_frame_interval = ov2659_s_frame_interval,
 };
 
 static const struct v4l2_subdev_internal_ops ov2659_sd_internal_ops = {
@@ -1815,6 +1679,8 @@ static int ov2659_detect_sensor(struct v4l2_subdev *sd)
 	u8 pid, ver;
 	int ret;
 
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
 	mutex_lock(&ov2659->lock);
 	 __ov2659_set_power(ov2659, 1);
 	usleep_range(25000, 26000);
@@ -1874,8 +1740,6 @@ ov2659_get_pdata(struct i2c_client *client)
 	if (!pdata)
 		goto done;
 
-	pdata->gpio_pwdn = -1;
-	pdata->gpio_reset = -1;
 	of_property_read_u32(endpoint, "mclk-frequency",
 		&pdata->mclk_frequency);
 
@@ -1899,10 +1763,6 @@ static int ov2659_probe(struct i2c_client *client,
 	} else {
 		dev_dbg(&client->dev, "pdata mclk-frequency: %d\n",
 				pdata->mclk_frequency);
-		dev_dbg(&client->dev, "pdata gpio-pwdn: %d\n",
-			pdata->gpio_pwdn);
-		dev_dbg(&client->dev, "pdata gpio-reset: %d\n",
-			pdata->gpio_reset);
 	}
 
 	ov2659 = devm_kzalloc(&client->dev, sizeof(*ov2659), GFP_KERNEL);
@@ -1937,15 +1797,11 @@ static int ov2659_probe(struct i2c_client *client,
 	ov2659_get_default_format(&ov2659->format);
 	ov2659->frame_size = &ov2659_framesizes[2];
 	ov2659->format_ctrl_regs = ov2659_formats[0].format_ctrl_regs;
-	ov2659->fiv = &ov2659_intervals[1];
 
 	ret = ov2659_detect_sensor(sd);
 	if (ret < 0)
 		goto err_ctrls;
 
-	/* Update exposure time min/max to match frame format */
-	ov2659_update_exposure_ctrl(ov2659);
-
 	/* Calculate the PLL register value needed */
 	ov2659_pll_calc_params(ov2659);
 
diff --git a/include/media/ov2659.h b/include/media/ov2659.h
index 98895ce..c734c6c 100644
--- a/include/media/ov2659.h
+++ b/include/media/ov2659.h
@@ -13,15 +13,10 @@
 /**
  * struct ov2659_platform_data - ov2659 driver platform data
  * @mclk_frequency: the sensor's master clock frequency in Hz
- * @gpio_pwdn:	    number of a GPIO connected to OV2659 PWDN pin
- * @gpio_reset:     number of a GPIO connected to OV2659 RESET pin
  *
- * If any of @gpio_pwdn or @gpio_reset are unused then they should be
- * set to a negative value. @mclk_frequency must always be specified.
+ * @mclk_frequency must always be specified.
  */
 struct ov2659_platform_data {
 	unsigned int mclk_frequency;
-	int gpio_pwdn;
-	int gpio_reset;
 };
 #endif /* OV2659_H_ */
-- 
1.7.5.4

