From 7e539d0eb536bcf920966bf3775a55b0cde3a8d8 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 20 Aug 2014 16:51:00 +0800
Subject: [PATCH] can: c_can: set irq_safe for runtime PM

The runtime PM helper functions c_can_pm_runtime_get/put_sync may be
used in atomic context. So we need to set the irq_safe for runtime
PM in order to avoid the following call trace:
  BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:954
  in_atomic(): 0, irqs_disabled(): 0, pid: 1013, name: qmgr
  2 locks held by qmgr/1013:
   #0:  (rtnl_mutex){+.+.+.}, at: [<c05ff7e0>] netlink_dump+0x28/0x1ec
   #1:  (rcu_read_lock){.+.+..}, at: [<c05e4dd0>] rtnl_dump_ifinfo+0x0/0x310
  CPU: 0 PID: 1013 Comm: qmgr Not tainted 3.10.38-ltsi-WR6.0.0.0_standard #1
  [<c0016398>] (unwind_backtrace+0x0/0x100) from [<c0012adc>] (show_stack+0x20/0x24)
  [<c0012adc>] (show_stack+0x20/0x24) from [<c0718c98>] (dump_stack+0x24/0x28)
  [<c0718c98>] (dump_stack+0x24/0x28) from [<c007a704>] (__might_sleep+0x160/0x1f8)
  [<c007a704>] (__might_sleep+0x160/0x1f8) from [<c0426344>] (__pm_runtime_resume+0x98/0x9c)
  [<c0426344>] (__pm_runtime_resume+0x98/0x9c) from [<c046f86c>] (c_can_get_berr_counter+0x30/0x6c)
  [<c046f86c>] (c_can_get_berr_counter+0x30/0x6c) from [<c046ec64>] (can_fill_info+0x108/0x16c)
  [<c046ec64>] (can_fill_info+0x108/0x16c) from [<c05e40e8>] (rtnl_fill_ifinfo+0x5c4/0x7d0)
  [<c05e40e8>] (rtnl_fill_ifinfo+0x5c4/0x7d0) from [<c05e4f18>] (rtnl_dump_ifinfo+0x148/0x310)
  [<c05e4f18>] (rtnl_dump_ifinfo+0x148/0x310) from [<c05ff85c>] (netlink_dump+0xa4/0x1ec)
  [<c05ff85c>] (netlink_dump+0xa4/0x1ec) from [<c05fff40>] (__netlink_dump_start+0x140/0x168)
  [<c05fff40>] (__netlink_dump_start+0x140/0x168) from [<c05e5514>] (rtnetlink_rcv_msg+0x130/0x228)
  [<c05e5514>] (rtnetlink_rcv_msg+0x130/0x228) from [<c0601d5c>] (netlink_rcv_skb+0xbc/0xd0)
  [<c0601d5c>] (netlink_rcv_skb+0xbc/0xd0) from [<c05e53dc>] (rtnetlink_rcv+0x38/0x40)
  [<c05e53dc>] (rtnetlink_rcv+0x38/0x40) from [<c060172c>] (netlink_unicast+0x148/0x1f0)
  [<c060172c>] (netlink_unicast+0x148/0x1f0) from [<c0601b28>] (netlink_sendmsg+0x2a4/0x320)
  [<c0601b28>] (netlink_sendmsg+0x2a4/0x320) from [<c05b94bc>] (sock_sendmsg+0x88/0xac)
  [<c05b94bc>] (sock_sendmsg+0x88/0xac) from [<c05bb8f4>] (SyS_sendto+0xc4/0xe8)
  [<c05bb8f4>] (SyS_sendto+0xc4/0xe8) from [<c000e3c0>] (ret_fast_syscall+0x0/0x

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/can/c_can/c_can.c |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/drivers/net/can/c_can/c_can.c b/drivers/net/can/c_can/c_can.c
index e59c42b..c10d9a4 100644
--- a/drivers/net/can/c_can/c_can.c
+++ b/drivers/net/can/c_can/c_can.c
@@ -210,6 +210,12 @@ static const struct can_bittiming_const c_can_bittiming_const = {
 	.brp_inc = 1,
 };
 
+static inline void c_can_pm_runtime_irq_safe(const struct c_can_priv *priv)
+{
+	if (priv->device)
+		pm_runtime_irq_safe(priv->device);
+}
+
 static inline void c_can_pm_runtime_enable(const struct c_can_priv *priv)
 {
 	if (priv->device)
@@ -1282,6 +1288,7 @@ int register_c_can_dev(struct net_device *dev)
 	int err;
 
 	c_can_pm_runtime_enable(priv);
+	c_can_pm_runtime_irq_safe(priv);
 
 	dev->flags |= IFF_ECHO;	/* we support local echo */
 	dev->netdev_ops = &c_can_netdev_ops;
-- 
1.7.5.4

