From 231a97874a56b7410ba9cbbff0830c1a390fe4f0 Mon Sep 17 00:00:00 2001
From: Roger Quadros <rogerq@ti.com>
Date: Fri, 7 Feb 2014 15:11:58 +0200
Subject: [PATCH 045/188] usb: musb: dsps: Resume early in noirq context

This commit comes from branch ti-linux-3.12.y:

git://git.ti.com/ti-linux-kernel/ti-linux-kernel.git

The musb core driver resumes in noirq context so we must do so as well
to ensure we are ready before musb core driver resumes.

Not doing so breaks suspend/resume and causes delays upto 15 seconds
with high-speed mass storage device connected to host.

Signed-off-by: Roger Quadros <rogerq@ti.com>
(cherry picked from commit a417b32c0d461771fa2515ea1540be524744615a)
---
 drivers/usb/musb/musb_dsps.c |   11 ++++++++---
 1 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/musb/musb_dsps.c b/drivers/usb/musb/musb_dsps.c
index 1e440db..0dc7ce5 100644
--- a/drivers/usb/musb/musb_dsps.c
+++ b/drivers/usb/musb/musb_dsps.c
@@ -800,7 +800,7 @@ static const struct of_device_id musb_dsps_of_match[] = {
 };
 MODULE_DEVICE_TABLE(of, musb_dsps_of_match);
 
-#ifdef CONFIG_PM
+#ifdef CONFIG_PM_SLEEP
 static int dsps_suspend(struct device *dev)
 {
 	struct dsps_glue *glue = dev_get_drvdata(dev);
@@ -819,7 +819,7 @@ static int dsps_suspend(struct device *dev)
 	return 0;
 }
 
-static int dsps_resume(struct device *dev)
+static int dsps_resume_noirq(struct device *dev)
 {
 	struct dsps_glue *glue = dev_get_drvdata(dev);
 	const struct dsps_musb_wrapper *wrp = glue->wrp;
@@ -838,7 +838,12 @@ static int dsps_resume(struct device *dev)
 }
 #endif
 
-static SIMPLE_DEV_PM_OPS(dsps_pm_ops, dsps_suspend, dsps_resume);
+static const struct dev_pm_ops dsps_pm_ops = {
+#ifdef CONFIG_PM_SLEEP
+	.suspend        = dsps_suspend,
+	.resume_noirq   = dsps_resume_noirq,
+#endif
+};
 
 static struct platform_driver dsps_usbss_driver = {
 	.probe		= dsps_probe,
-- 
1.7.5.4

