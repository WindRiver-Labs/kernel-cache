From 8dd005e3bb58328a322add688b317dbce457d642 Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Fri, 8 Apr 2016 14:13:13 -0700
Subject: [PATCH 102/188] staging: apf: Fixed an error involving invalidation

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

If a CPU wrote data to the cache, instructed a DMA to write
to a sub-region an incomplete cache line, then read the line back,
an incorrect data would be read.  This stemmed from how the CPU
invalidated the D-Cache after the DMA finished writing.  The CPU
would invalidate the entire block, assuming the DMA has written the
entire block, thus losing the data that the CPU wrote that the DMA
did not over-write.  This is resolved by manually flushing the value
down, and invalidating before the DMA write is issued, instead of
invalidating after.

Signed-off-by: Michael Gill <gill@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 3affa58cfc9c9727c0dee7ee12d5738e8ca03777)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c | 26 +++++++------------------
 drivers/staging/apf/xlnk.c           | 37 ++++++++++++++++++++++++------------
 2 files changed, 32 insertions(+), 31 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 21328a6..88f33cf 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -829,10 +829,11 @@ int xdma_submit(struct xdma_chan *chan,
 		sglist_dma = sglist;
 		sgcnt_dma = sgcnt;
 		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
-			kaddr = phys_to_virt((phys_addr_t)userbuf);
-			if (dmadir == DMA_TO_DEVICE) {
-				__cpuc_flush_dcache_area(kaddr, size);
-				outer_clean_range((phys_addr_t)userbuf,
+			__cpuc_flush_dcache_area(kaddr, size);
+			outer_clean_range((phys_addr_t)userbuf,
+					  (u32)userbuf + size);
+			if (dmadir == DMA_FROM_DEVICE) {
+				outer_inv_range((phys_addr_t)userbuf,
 						(u32)userbuf + size);
 			}
 		}
@@ -901,13 +902,11 @@ EXPORT_SYMBOL(xdma_submit);
 int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 {
 	struct xdma_chan *chan = dmahead->chan;
-	void *kaddr, *paddr;
-	int size;
 	DEFINE_DMA_ATTRS(attrs);
 
-	if (chan->poll_mode) {
+	if (chan->poll_mode)
 		xilinx_chan_desc_cleanup(chan);
-	} else
+	else
 		wait_for_completion(&dmahead->cmp);
 
 	if (dmahead->is_dmabuf) {
@@ -921,17 +920,6 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 						 dmahead->dmadir, &attrs);
 
 		unpin_user_pages(dmahead->sglist, dmahead->sgcnt);
-	} else {
-		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
-			paddr = dmahead->userbuf;
-			size = dmahead->size;
-			kaddr = phys_to_virt((phys_addr_t)paddr);
-			if (dmahead->dmadir != DMA_TO_DEVICE) {
-				__cpuc_flush_dcache_area(kaddr, size);
-				outer_inv_range((phys_addr_t)paddr,
-						(u32)paddr + size);
-			}
-		}
 	}
 	return 0;
 }
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index c52061a..1d18a1f 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -46,6 +46,7 @@
 #include <linux/clk.h>
 #include <linux/of.h>
 #include <linux/list.h>
+#include <asm/cacheflush.h>
 
 #include "xlnk-ioctl.h"
 #include "xlnk.h"
@@ -356,6 +357,19 @@ static int xlnk_buf_findnull(void)
 	return 0;
 }
 
+static int xlnk_buf_find_by_phys_addr(unsigned long addr)
+{
+	int i;
+
+	for (i = 1; i < xlnk_bufpool_size; i++) {
+		if (xlnk_phyaddr[i] <= addr &&
+		    xlnk_phyaddr[i] + xlnk_buflen[i] > addr)
+			return i;
+	}
+
+	return 0;
+}
+
 /**
  * allocate and return an id
  * id must be a positve number
@@ -1137,6 +1151,7 @@ static int xlnk_cachecontrol_ioctl(struct file *filp, unsigned int code,
 	union xlnk_args temp_args;
 	int status, size;
 	void *paddr, *kaddr;
+	int buf_id;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
 						sizeof(union xlnk_args));
@@ -1156,19 +1171,17 @@ static int xlnk_cachecontrol_ioctl(struct file *filp, unsigned int code,
 
 	size = temp_args.cachecontrol.size;
 	paddr = temp_args.cachecontrol.phys_addr;
-	kaddr = phys_to_virt((unsigned int)paddr);
-
-	if (temp_args.cachecontrol.action == 0) {
-		/* flush cache */
-		__cpuc_flush_dcache_area(kaddr, size);
-		outer_clean_range((unsigned int)paddr,
-				  (unsigned int)(paddr + size));
-	} else {
-		/* invalidate cache */
-		__cpuc_flush_dcache_area(kaddr, size);
-		outer_inv_range((unsigned int)paddr,
-				(unsigned int)(paddr + size));
+	buf_id = xlnk_buf_find_by_phys_addr(paddr);
+	if (buf_id == 0) {
+		pr_err("Illegal cachecontrol on non-sds_alloc memory");
+		return -EINVAL;
 	}
+	kaddr = xlnk_bufpool[buf_id];
+
+	__cpuc_flush_dcache_area(kaddr, size);
+	outer_flush_range(paddr, paddr + size);
+	if (temp_args.cachecontrol.action == 1)
+		outer_inv_range(paddr, paddr + size);
 
 	return 0;
 }
-- 
2.0.2

