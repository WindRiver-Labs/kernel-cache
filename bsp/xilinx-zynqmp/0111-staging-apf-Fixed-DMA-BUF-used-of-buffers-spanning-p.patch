From db631915c45238d68efa3327dd9eea886071bf0a Mon Sep 17 00:00:00 2001
From: Michael Gill <gill@xilinx.com>
Date: Thu, 2 Jun 2016 18:21:20 -0700
Subject: [PATCH 111/188] staging: apf: Fixed DMA-BUF used of buffers spanning
 partial pages

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

The DRM infrastructure when using the xilinx driver has a
potential to return a buffer mapped to a memory region spanning a
partial page, such as in the case of a 1920x1080 resolution
buffer.  When this happens, the scatterlist returned from the DRM
API describes a region rounded up to a whole page.  This patch
trims the returned scatterlist, thus making it usable by a DMA.

Signed-off-by: Michael Gill <gill@xilinx.com>
Signed-off-by: Christian Kohn <christian.kohn@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit ab52f93e8fcb4fb45da9709592fc14f5a37d632b)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c | 49 +++++++++++++++++++++++-------------
 drivers/staging/apf/xlnk.c           |  2 ++
 drivers/staging/apf/xlnk.h           |  2 ++
 3 files changed, 35 insertions(+), 18 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 0ba536f..dbf96f7 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -822,11 +822,13 @@ int xdma_submit(struct xdma_chan *chan,
 	dmahead->userflag = user_flags;
 	dmadir = chan->direction;
 	if (dp) {
-		struct scatterlist *sg;
-		int i;
-		unsigned int remaining_size = size;
 
 		if (!dp->is_mapped) {
+			struct scatterlist *sg;
+			int cpy_size;
+			int i;
+			unsigned int remaining_size = size;
+
 			dp->dbuf_attach = dma_buf_attach(dp->dbuf, chan->dev);
 			dp->dbuf_sg_table = dma_buf_map_attachment(
 				dp->dbuf_attach, chan->direction);
@@ -836,24 +838,35 @@ int xdma_submit(struct xdma_chan *chan,
 					__func__, (int)dp->dbuf_sg_table);
 				return -EINVAL;
 			}
-			dp->is_mapped = 1;
-		}
-
-		sglist_dma = dp->dbuf_sg_table->sgl;
-		sglist = dp->dbuf_sg_table->sgl;
-		sgcnt = dp->dbuf_sg_table->nents;
-		sgcnt_dma = dp->dbuf_sg_table->nents;
-
-		for_each_sg(sglist, sg, sgcnt, i) {
-			if (sg_dma_len(sg) > remaining_size) {
-				sg_dma_len(sg) = remaining_size;
-				remaining_size = 0;
-			} else {
-				remaining_size -= sg_dma_len(sg);
+			cpy_size = dp->dbuf_sg_table->nents *
+				sizeof(struct scatterlist);
+			dp->sg_list = vmalloc(cpy_size);
+			if (!dp->sg_list)
+				return -ENOMEM;
+			dp->sg_list_cnt = 0;
+			memcpy(dp->sg_list, dp->dbuf_sg_table->sgl, cpy_size);
+			for_each_sg(dp->sg_list,
+				    sg,
+				    dp->dbuf_sg_table->nents,
+				    i) {
+				if (remaining_size == 0) {
+					sg_dma_len(sg) = 0;
+				} else if (sg_dma_len(sg) > remaining_size) {
+					sg_dma_len(sg) = remaining_size;
+					dp->sg_list_cnt++;
+				} else {
+					remaining_size -= sg_dma_len(sg);
+					dp->sg_list_cnt++;
+				}
 			}
+			dp->is_mapped = 1;
 		}
 
-		dmahead->userbuf = (void *)dp->dbuf_sg_table->sgl->dma_address;
+		sglist_dma = dp->sg_list;
+		sglist = dp->sg_list;
+		sgcnt = dp->sg_list_cnt;
+		sgcnt_dma = dp->sg_list_cnt;
+		dmahead->userbuf = (void *)sglist->dma_address;
 		dmahead->is_dmabuf = 1;
 	} else if (user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS) {
 		/*
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 3cb9b73..a35857b 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -888,6 +888,8 @@ static int xlnk_cleardmabuf_ioctl(struct file *filp, unsigned int code,
 				dma_buf_unmap_attachment(dp->dbuf_attach,
 					dp->dbuf_sg_table, dp->dma_direction);
 				dma_buf_detach(dp->dbuf, dp->dbuf_attach);
+				if (dp->sg_list)
+					vfree(dp->sg_list);
 			}
 			dma_buf_put(dp->dbuf);
 			list_del(&dp->list);
diff --git a/drivers/staging/apf/xlnk.h b/drivers/staging/apf/xlnk.h
index 9edb347..b68e475 100644
--- a/drivers/staging/apf/xlnk.h
+++ b/drivers/staging/apf/xlnk.h
@@ -45,6 +45,8 @@ struct xlnk_dmabuf_reg {
 	struct dma_buf *dbuf;
 	struct dma_buf_attachment *dbuf_attach;
 	struct sg_table *dbuf_sg_table;
+	struct scatterlist *sg_list;
+	int sg_list_cnt;
 	int is_mapped;
 	int dma_direction;
 	struct list_head list;
-- 
2.0.2

