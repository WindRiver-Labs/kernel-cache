From c9fc158f2ba20ea422f20e417f92fd0c89cbd7aa Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Fri, 24 Jul 2015 10:53:52 -0700
Subject: [PATCH 635/827] drm: xilinx: drv: Iterate the connector list for suspend/resume

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

There can be multiple connectors. Iterate connector list to suspend
and resume. Store / restore the connector DPMS so that the connector
is in the correct state after resume. Remove the encoder/connector
pointers from struct xilinx_drm_private as they are no long needed.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 388a0761e7a07559a7a470700aaf1d1396344e46)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_drv.c | 47 ++++++++++++++++++++++++---------
 1 file changed, 35 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_drv.c b/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
index 6cb9898..04ff490 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
@@ -46,8 +46,6 @@
 struct xilinx_drm_private {
 	struct drm_device *drm;
 	struct drm_crtc *crtc;
-	struct drm_encoder *encoder;
-	struct drm_connector *connector;
 	struct drm_fb_helper *fb;
 	struct platform_device *pdev;
 };
@@ -244,6 +242,8 @@ unsigned int xilinx_drm_format_depth(uint32_t drm_format)
 static int xilinx_drm_load(struct drm_device *drm, unsigned long flags)
 {
 	struct xilinx_drm_private *private;
+	struct drm_encoder *encoder;
+	struct drm_connector *connector;
 	struct platform_device *pdev = drm->platformdev;
 	unsigned int bpp;
 	unsigned int align;
@@ -264,18 +264,18 @@ static int xilinx_drm_load(struct drm_device *drm, unsigned long flags)
 	}
 
 	/* create a xilinx encoder */
-	private->encoder = xilinx_drm_encoder_create(drm);
-	if (IS_ERR(private->encoder)) {
+	encoder = xilinx_drm_encoder_create(drm);
+	if (IS_ERR(encoder)) {
 		DRM_DEBUG_DRIVER("failed to create xilinx encoder\n");
-		ret = PTR_ERR(private->encoder);
+		ret = PTR_ERR(encoder);
 		goto err_out;
 	}
 
 	/* create a xilinx connector */
-	private->connector = xilinx_drm_connector_create(drm, private->encoder);
-	if (IS_ERR(private->connector)) {
+	connector = xilinx_drm_connector_create(drm, encoder);
+	if (IS_ERR(connector)) {
 		DRM_DEBUG_DRIVER("failed to create xilinx connector\n");
-		ret = PTR_ERR(private->connector);
+		ret = PTR_ERR(connector);
 		goto err_out;
 	}
 
@@ -415,9 +415,21 @@ static struct drm_driver xilinx_drm_driver = {
 static int xilinx_drm_pm_suspend(struct device *dev)
 {
 	struct xilinx_drm_private *private = dev_get_drvdata(dev);
+	struct drm_device *drm = private->drm;
+	struct drm_connector *connector;
+
+	drm_modeset_lock_all(drm);
+	drm_kms_helper_poll_disable(drm);
+	list_for_each_entry(connector, &drm->mode_config.connector_list, head) {
+		int old_dpms = connector->dpms;
 
-	drm_kms_helper_poll_disable(private->drm);
-	drm_helper_connector_dpms(private->connector, DRM_MODE_DPMS_SUSPEND);
+		if (connector->funcs->dpms)
+			connector->funcs->dpms(connector,
+					       DRM_MODE_DPMS_SUSPEND);
+
+		connector->dpms = old_dpms;
+	}
+	drm_modeset_unlock_all(drm);
 
 	return 0;
 }
@@ -426,9 +438,20 @@ static int xilinx_drm_pm_suspend(struct device *dev)
 static int xilinx_drm_pm_resume(struct device *dev)
 {
 	struct xilinx_drm_private *private = dev_get_drvdata(dev);
+	struct drm_device *drm = private->drm;
+	struct drm_connector *connector;
 
-	drm_helper_connector_dpms(private->connector, DRM_MODE_DPMS_ON);
-	drm_kms_helper_poll_enable(private->drm);
+	drm_modeset_lock_all(drm);
+	list_for_each_entry(connector, &drm->mode_config.connector_list, head) {
+		if (connector->funcs->dpms) {
+			int dpms = connector->dpms;
+
+			connector->dpms = DRM_MODE_DPMS_OFF;
+			connector->funcs->dpms(connector, dpms);
+		}
+	}
+	drm_kms_helper_poll_enable(drm);
+	drm_modeset_unlock_all(drm);
 
 	return 0;
 }
-- 
2.9.3

