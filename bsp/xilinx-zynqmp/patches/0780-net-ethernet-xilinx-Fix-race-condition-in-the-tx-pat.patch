From 0e655a7e6b73efebdd27f1dc432174e26b641e21 Mon Sep 17 00:00:00 2001
From: Kedareswara rao Appana <appana.durga.rao@xilinx.com>
Date: Mon, 22 Feb 2016 19:07:35 +0530
Subject: [PATCH 780/827] net: ethernet: xilinx: Fix race condition in the tx path

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This patch removes code that were earlier added to avoid a race condition
between xmit and xmit_done. In the current implementation
with the spin_lock_irqsave put before check_tx_bd_space,
the earlier race condition will never occur.

This change also results in significant performance improvement on Tx path.
Tested on the setup zc706, 1000base-X in PL with full checksum offloading enabled
in the h/w the perf numbers before this patch (TX - 641.56 Mbps and RX - 727.63 Mbps)
after this patch (TX - 780 Mbps and Rx - 755 Mbps).

Signed-off-by: Kedareswara rao Appana <appanad@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit ebc8535a21d1e6887e01b72e8a19a12e6f90868d)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 0442a1e..3a669ac 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -816,14 +816,6 @@ static int axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 		return NETDEV_TX_BUSY;
 	}
 
-	if (lp->tx_bd_ci > lp->tx_bd_tail) {
-		if (!netif_queue_stopped(ndev))
-			netif_stop_queue(ndev);
-		spin_unlock_irqrestore(&lp->tx_lock, flags);
-		return NETDEV_TX_BUSY;
-	}
-	spin_unlock_irqrestore(&lp->tx_lock, flags);
-
 #ifdef CONFIG_XILINX_AXI_EMAC_HWTSTAMP
 	if ((lp->tstamp_config.tx_type == HWTSTAMP_TX_ONESTEP_SYNC) ||
 	    (lp->tstamp_config.tx_type == HWTSTAMP_TX_ON)) {
@@ -837,6 +829,7 @@ static int axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 				dev_err(&ndev->dev, "failed "
 					"to allocate new socket buffer\n");
 				dev_kfree_skb_any(skb);
+				spin_unlock_irqrestore(&lp->tx_lock, flags);
 				return NETDEV_TX_OK;
 			}
 
@@ -912,6 +905,8 @@ static int axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	++lp->tx_bd_tail;
 	lp->tx_bd_tail %= TX_BD_NUM;
 
+	spin_unlock_irqrestore(&lp->tx_lock, flags);
+
 	return NETDEV_TX_OK;
 }
 
-- 
2.9.3

