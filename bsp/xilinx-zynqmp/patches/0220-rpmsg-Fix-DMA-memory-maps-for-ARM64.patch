From 09438de4c194033ce700c87a4745d56c7c0c8737 Mon Sep 17 00:00:00 2001
From: "Edgar E. Iglesias" <edgar.iglesias@xilinx.com>
Date: Fri, 12 Jun 2015 15:22:01 +1000
Subject: [PATCH 220/827] rpmsg: Fix DMA memory maps for ARM64

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

To avoid breaking bisectability, this is a squash of several commits:

remoteproc: Remove ZynqMP R5 DMA map workarounds
rpmsg: DMA map sgs passed to virtio
Revert 1e226059643f1dafeabad8d1ed82a01da6e61cc4
"remoteproc: Add handler to convert virtual addr to physical addr"

Signed-off-by: Jason Wu <j.wu@xilinx.com>
Signed-off-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit d6b32705c204199479d734d7342036cef8634137)

Conflicts:
	drivers/rpmsg/virtio_rpmsg_bus.c
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/remoteproc/zynqmp_r5_remoteproc.c | 26 ------------------
 drivers/rpmsg/virtio_rpmsg_bus.c          | 44 ++++++++++++++++++++++++++-----
 2 files changed, 38 insertions(+), 32 deletions(-)

diff --git a/drivers/remoteproc/zynqmp_r5_remoteproc.c b/drivers/remoteproc/zynqmp_r5_remoteproc.c
index 757d96b..f99fdbe 100644
--- a/drivers/remoteproc/zynqmp_r5_remoteproc.c
+++ b/drivers/remoteproc/zynqmp_r5_remoteproc.c
@@ -482,26 +482,10 @@ static int zynqmp_r5_rproc_stop(struct rproc *rproc)
 	return 0;
 }
 
-static void *zynqmp_r5_kva_to_guest_addr_kva(struct rproc *rproc,
-				void *va, struct virtqueue *vq)
-{
-	struct rproc_vring *rvring;
-
-	rvring = (struct rproc_vring *)(vq->priv);
-
-	/*
-	 * Remoteproc uses dma_alloc_coherent to set up the address of vring.
-	 * It assumes the remote has the same memory address mapping for
-	 * vring.
-	 */
-	return (void *)(phys_to_virt(rvring->dma) + (va - rvring->va));
-}
-
 static struct rproc_ops zynqmp_r5_rproc_ops = {
 	.start		= zynqmp_r5_rproc_start,
 	.stop		= zynqmp_r5_rproc_stop,
 	.kick		= zynqmp_r5_rproc_kick,
-	.kva_to_guest_addr_kva = zynqmp_r5_kva_to_guest_addr_kva,
 };
 
 static irqreturn_t r5_remoteproc_interrupt(int irq, void *dev_id)
@@ -542,16 +526,6 @@ static int zynqmp_r5_remoteproc_probe(struct platform_device *pdev)
 		return -ENXIO;
 	}
 
-	ret = dma_declare_coherent_memory(&pdev->dev, res->start,
-		res->start, resource_size(res),
-		DMA_MEMORY_IO | DMA_MEMORY_EXCLUSIVE);
-	if (!(ret & DMA_MEMORY_IO)) {
-		dev_err(&pdev->dev, "dma_declare_coherent_memory failed %x - %x\n",
-			(u32)res->start, (u32)res->end);
-		ret = -ENOMEM;
-		goto err_exit;
-	}
-
 	/* FIXME: it may need to extend to 64/48 bit */
 	ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 	if (ret) {
diff --git a/drivers/rpmsg/virtio_rpmsg_bus.c b/drivers/rpmsg/virtio_rpmsg_bus.c
index 73354ee..a160290 100644
--- a/drivers/rpmsg/virtio_rpmsg_bus.c
+++ b/drivers/rpmsg/virtio_rpmsg_bus.c
@@ -210,6 +210,38 @@ static void __ept_release(struct kref *kref)
 	kfree(ept);
 }
 
+static inline int rpmsg_virtqueue_add_outbuf(struct virtqueue *vq,
+		struct scatterlist *sg, unsigned int num,
+		void *data,
+		gfp_t gfp)
+{
+	return __virtqueue_add_sgs(vq, &sg, num, 0, data, gfp, true);
+}
+
+static inline int rpmsg_virtqueue_add_inbuf(struct virtqueue *vq,
+		struct scatterlist *sg, unsigned int num,
+		void *data,
+		gfp_t gfp)
+{
+	return __virtqueue_add_sgs(vq, &sg, 0, num, data, gfp, true);
+}
+
+static inline dma_addr_t msg_dma_address(struct virtproc_info *vrp, void *msg)
+{
+	unsigned long offset = msg - vrp->rbufs;
+
+	return vrp->bufs_dma + offset;
+}
+
+static inline void rpmsg_msg_sg_init(struct virtproc_info *vrp,
+				     struct scatterlist *sg,
+				     void *msg, unsigned int len)
+{
+	sg_init_table(sg, 1);
+	sg_dma_address(sg) = msg_dma_address(vrp, msg);
+	sg_dma_len(sg) = len;
+}
+
 /* for more info, see below documentation of rpmsg_create_ept() */
 static struct rpmsg_endpoint *__rpmsg_create_ept(struct virtproc_info *vrp,
 		struct rpmsg_channel *rpdev, rpmsg_rx_cb_t cb,
@@ -754,12 +786,12 @@ int rpmsg_send_offchannel_raw(struct rpmsg_channel *rpdev, u32 src, u32 dst,
 	print_hex_dump(KERN_DEBUG, "rpmsg_virtio TX: ", DUMP_PREFIX_NONE, 16, 1,
 					msg, sizeof(*msg) + msg->len, true);
 
-	sg_init_one(&sg, msg, sizeof(*msg) + len);
+	rpmsg_msg_sg_init(vrp, &sg, msg, sizeof(*msg) + len);
 
 	mutex_lock(&vrp->tx_lock);
 
 	/* add message to the remote processor's virtqueue */
-	err = virtqueue_add_outbuf(vrp->svq, &sg, 1, msg, GFP_KERNEL);
+	err = rpmsg_virtqueue_add_outbuf(vrp->svq, &sg, 1, msg, GFP_KERNEL);
 	if (err) {
 		/*
 		 * need to reclaim the buffer here, otherwise it's lost
@@ -828,10 +860,10 @@ static int rpmsg_recv_single(struct virtproc_info *vrp, struct device *dev,
 		dev_warn(dev, "msg received with no recipient\n");
 
 	/* publish the real size of the buffer */
-	sg_init_one(&sg, msg, RPMSG_BUF_SIZE);
+	rpmsg_msg_sg_init(vrp, &sg, msg, RPMSG_BUF_SIZE);
 
 	/* add the buffer back to the remote processor's virtqueue */
-	err = virtqueue_add_inbuf(vrp->rvq, &sg, 1, msg, GFP_KERNEL);
+	err = rpmsg_virtqueue_add_inbuf(vrp->rvq, &sg, 1, msg, GFP_KERNEL);
 	if (err < 0) {
 		dev_err(dev, "failed to add a virtqueue buffer: %d\n", err);
 		return err;
@@ -1007,9 +1039,9 @@ static int rpmsg_probe(struct virtio_device *vdev)
 		struct scatterlist sg;
 		void *cpu_addr = vrp->rbufs + i * RPMSG_BUF_SIZE;
 
-		sg_init_one(&sg, cpu_addr, RPMSG_BUF_SIZE);
+		rpmsg_msg_sg_init(vrp, &sg, cpu_addr, RPMSG_BUF_SIZE);
 
-		err = virtqueue_add_inbuf(vrp->rvq, &sg, 1, cpu_addr,
+		err = rpmsg_virtqueue_add_inbuf(vrp->rvq, &sg, 1, cpu_addr,
 								GFP_KERNEL);
 		WARN_ON(err); /* sanity check; this can't really happen */
 	}
-- 
2.9.3

