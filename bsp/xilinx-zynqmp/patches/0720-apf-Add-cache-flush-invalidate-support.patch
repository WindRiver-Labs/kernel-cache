From c626f145a1f9403b5df16f39897f17478222be4d Mon Sep 17 00:00:00 2001
From: S Mohan <s.mohan@xilinx.com>
Date: Tue, 10 Sep 2013 08:57:34 -0700
Subject: [PATCH 720/827] apf: Add cache flush invalidate support

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Add cache flush invalidate support for physically
contiguous memories in the apf dma driver

Signed-off-by: S Mohan <s.mohan@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 787cd9bf2ddfd693b3213b67158b18111868b39e)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 9ae372a..173ce59 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -780,6 +780,7 @@ int xdma_submit(struct xdma_chan *chan,
 	unsigned int sgcnt, sgcnt_dma;
 	enum dma_data_direction dmadir;
 	int status;
+	void *kaddr;
 	DEFINE_DMA_ATTRS(attrs);
 
 
@@ -807,6 +808,12 @@ int xdma_submit(struct xdma_chan *chan,
 
 		sglist_dma = sglist;
 		sgcnt_dma = sgcnt;
+		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
+			kaddr = phys_to_virt((phys_addr_t)userbuf);
+			dmac_map_area(kaddr, size, DMA_TO_DEVICE);
+			outer_clean_range((phys_addr_t)userbuf,
+						(u32)userbuf + size);
+		}
 	} else {
 		/* pin user pages is monitored separately */
 		xlnk_record_event(XLNK_ET_KERNEL_BEFORE_PIN_USER_PAGE);
@@ -879,6 +886,8 @@ EXPORT_SYMBOL(xdma_submit);
 int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 {
 	struct xdma_chan *chan = dmahead->chan;
+	void *kaddr, *paddr;
+	int size;
 	DEFINE_DMA_ATTRS(attrs);
 	xlnk_record_event(XLNK_ET_KERNEL_ENTER_DMA_WAIT);
 
@@ -898,6 +907,14 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 		xlnk_record_event(XLNK_ET_KERNEL_AFTER_DMA_UNMAP_SG);
 
 		unpin_user_pages(dmahead->sglist, dmahead->sgcnt);
+	} else {
+		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
+			paddr = dmahead->userbuf;
+			size = dmahead->size;
+			kaddr = phys_to_virt((phys_addr_t)paddr);
+			outer_inv_range((phys_addr_t)paddr, (u32)paddr + size);
+			dmac_unmap_area(kaddr, size, DMA_FROM_DEVICE);
+		}
 	}
 	xlnk_record_event(XLNK_ET_KERNEL_LEAVE_DMA_WAIT);
 	return 0;
-- 
2.9.3

