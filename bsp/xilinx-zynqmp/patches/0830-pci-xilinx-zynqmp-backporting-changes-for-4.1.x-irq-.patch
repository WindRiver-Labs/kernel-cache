From 5fb1524db8c13b8d8d21845645a28a9773a98539 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 25 Oct 2016 11:17:04 +0800
Subject: [PATCH 830/830] pci: xilinx: zynqmp: backporting changes for 4.1.x
 irq handler

This patch is to modify funtion interfaces to fit for 4.1.x irq domain.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/pci/host/pcie-xilinx-nwl.c | 36 +++++++++++++++++++++---------------
 1 file changed, 21 insertions(+), 15 deletions(-)

diff --git a/drivers/pci/host/pcie-xilinx-nwl.c b/drivers/pci/host/pcie-xilinx-nwl.c
index 5139e64..23c436e 100644
--- a/drivers/pci/host/pcie-xilinx-nwl.c
+++ b/drivers/pci/host/pcie-xilinx-nwl.c
@@ -343,7 +343,7 @@ static void nwl_pcie_handle_msi_irq(struct nwl_pcie *pcie, u32 status_reg)
 	}
 }
 
-static void nwl_pcie_msi_handler_high(struct irq_desc *desc)
+static void nwl_pcie_msi_handler_high(int irq, struct irq_desc *desc)
 {
 	struct irq_chip *chip = irq_desc_get_chip(desc);
 	struct nwl_pcie *pcie = irq_desc_get_handler_data(desc);
@@ -353,7 +353,7 @@ static void nwl_pcie_msi_handler_high(struct irq_desc *desc)
 	chained_irq_exit(chip, desc);
 }
 
-static void nwl_pcie_msi_handler_low(struct irq_desc *desc)
+static void nwl_pcie_msi_handler_low(int irq, struct irq_desc *desc)
 {
 	struct irq_chip *chip = irq_desc_get_chip(desc);
 	struct nwl_pcie *pcie = irq_desc_get_handler_data(desc);
@@ -463,10 +463,14 @@ static void nwl_msi_free_irq_domain(struct nwl_pcie *pcie)
 {
 	struct nwl_msi *msi = &pcie->msi;
 
-	if (msi->irq_msi0)
-		irq_set_chained_handler_and_data(msi->irq_msi0, NULL, NULL);
-	if (msi->irq_msi1)
-		irq_set_chained_handler_and_data(msi->irq_msi1, NULL, NULL);
+	if (msi->irq_msi0) {
+		irq_set_handler_data(msi->irq_msi0, NULL);
+		irq_set_chained_handler(msi->irq_msi0, NULL);
+	}
+	if (msi->irq_msi1) {
+		irq_set_handler_data(msi->irq_msi1, NULL);
+		irq_set_chained_handler(msi->irq_msi1, NULL);
+	}
 
 	if (msi->msi_domain)
 		irq_domain_remove(msi->msi_domain);
@@ -496,16 +500,15 @@ static void nwl_pcie_free_irq_domain(struct nwl_pcie *pcie)
 static int nwl_pcie_init_msi_irq_domain(struct nwl_pcie *pcie)
 {
 #ifdef CONFIG_PCI_MSI
-	struct fwnode_handle *fwnode = of_node_to_fwnode(pcie->dev->of_node);
 	struct nwl_msi *msi = &pcie->msi;
 
-	msi->dev_domain = irq_domain_add_linear(NULL, INT_PCI_MSI_NR,
+	msi->dev_domain = irq_domain_add_linear(pcie->dev->of_node, INT_PCI_MSI_NR,
 						&dev_msi_domain_ops, pcie);
 	if (!msi->dev_domain) {
 		dev_err(pcie->dev, "failed to create dev IRQ domain\n");
 		return -ENOMEM;
 	}
-	msi->msi_domain = pci_msi_create_irq_domain(fwnode,
+	msi->msi_domain = pci_msi_create_irq_domain(pcie->dev->of_node,
 						    &nwl_msi_domain_info,
 						    msi->dev_domain);
 	if (!msi->msi_domain) {
@@ -564,8 +567,9 @@ static int nwl_pcie_enable_msi(struct nwl_pcie *pcie, struct pci_bus *bus)
 		goto err;
 	}
 
-	irq_set_chained_handler_and_data(msi->irq_msi1,
-					 nwl_pcie_msi_handler_high, pcie);
+	irq_set_handler_data(msi->irq_msi1, pcie);
+	irq_set_chained_handler(msi->irq_msi1,
+				(irq_flow_handler_t)nwl_pcie_msi_handler_high);
 
 	/* Get msi_0 IRQ number */
 	msi->irq_msi0 = platform_get_irq_byname(pdev, "msi0");
@@ -575,8 +579,9 @@ static int nwl_pcie_enable_msi(struct nwl_pcie *pcie, struct pci_bus *bus)
 		goto err;
 	}
 
-	irq_set_chained_handler_and_data(msi->irq_msi0,
-					 nwl_pcie_msi_handler_low, pcie);
+	irq_set_handler_data(msi->irq_msi0, pcie);
+	irq_set_chained_handler(msi->irq_msi0,
+				(irq_flow_handler_t)nwl_pcie_msi_handler_low);
 
 	/* Check for msii_present bit */
 	ret = nwl_bridge_readl(pcie, I_MSII_CAPABILITIES) & MSII_PRESENT;
@@ -783,8 +788,9 @@ static int nwl_pcie_parse_dt(struct nwl_pcie *pcie,
 		return -EINVAL;
 	}
 
-	irq_set_chained_handler_and_data(pcie->irq_intx,
-					 nwl_pcie_leg_handler, pcie);
+	irq_set_handler_data(pcie->irq_intx, pcie);
+	irq_set_chained_handler(pcie->irq_intx,
+				(irq_flow_handler_t)nwl_pcie_leg_handler);
 
 	return 0;
 }
-- 
2.9.3

