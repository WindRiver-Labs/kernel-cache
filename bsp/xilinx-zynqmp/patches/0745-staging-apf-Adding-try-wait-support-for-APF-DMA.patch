From bf69592c3c120b1e731c27e638ff85cdf9ed87ec Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Wed, 8 Jun 2016 15:15:34 -0700
Subject: [PATCH 745/827] staging: apf: Adding try-wait support for APF DMA

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This patch adds a non-blocking poll of the scatter-gather APF DMA
done state.  This is used to implement 'try-wait', which is a new
feature introduced into user space runtimes for SDSoC.

Signed-off-by: Michael Gill <gill@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit dfb97bc345e323f2851022be24b0846183d158cc)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c | 25 +++++++++++++++++++------
 drivers/staging/apf/xilinx-dma-apf.h |  7 ++++++-
 drivers/staging/apf/xlnk.c           | 25 ++++++++++++++-----------
 drivers/staging/apf/xlnk.h           |  1 +
 4 files changed, 40 insertions(+), 18 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 15c9677..f6dbcbf 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -953,14 +953,25 @@ int xdma_submit(struct xdma_chan *chan,
 }
 EXPORT_SYMBOL(xdma_submit);
 
-int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
+int xdma_wait(struct xdma_head *dmahead,
+	      unsigned int user_flags,
+	      unsigned int *operating_flags)
 {
 	struct xdma_chan *chan = dmahead->chan;
 	DEFINE_DMA_ATTRS(attrs);
-	if (chan->poll_mode)
+	if (chan->poll_mode) {
 		xilinx_chan_desc_cleanup(chan);
-	else
-		wait_for_completion(&dmahead->cmp);
+		*operating_flags |= XDMA_FLAGS_WAIT_COMPLETE;
+	} else {
+		if (*operating_flags & XDMA_FLAGS_TRYWAIT) {
+			if (!wait_for_completion_timeout(&dmahead->cmp, 1))
+				return 0;
+			*operating_flags |= XDMA_FLAGS_WAIT_COMPLETE;
+		} else {
+			wait_for_completion(&dmahead->cmp);
+			*operating_flags |= XDMA_FLAGS_WAIT_COMPLETE;
+		}
+	}
 
 	if (dmahead->is_dmabuf) {
 		dmahead->is_dmabuf = 0;
@@ -968,9 +979,11 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 		if (!(user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE))
 			dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
 
-		get_dma_ops(chan->dev)->unmap_sg(chan->dev, dmahead->sglist,
+		get_dma_ops(chan->dev)->unmap_sg(chan->dev,
+						 dmahead->sglist,
 						 dmahead->sgcnt,
-						 dmahead->dmadir, &attrs);
+						 dmahead->dmadir,
+						 &attrs);
 
 		unpin_user_pages(dmahead->sglist, dmahead->sgcnt);
 	}
diff --git a/drivers/staging/apf/xilinx-dma-apf.h b/drivers/staging/apf/xilinx-dma-apf.h
index 82d9cf4..cd2a0b0 100644
--- a/drivers/staging/apf/xilinx-dma-apf.h
+++ b/drivers/staging/apf/xilinx-dma-apf.h
@@ -96,6 +96,9 @@
 #define XDMA_MAX_APPWORDS		5
 #define XDMA_BD_CLEANUP_THRESHOLD	((XDMA_MAX_BD_CNT * 8) / 10)
 
+#define XDMA_FLAGS_WAIT_COMPLETE 1
+#define XDMA_FLAGS_TRYWAIT 2
+
 /* Platform data definition until ARM supports device tree */
 struct xdma_channel_config {
 	char *type;
@@ -213,7 +216,9 @@ int xdma_submit(struct xdma_chan *chan,
 		unsigned int user_flags,
 		struct xdma_head **dmaheadpp,
 		struct xlnk_dmabuf_reg *dp);
-int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags);
+int xdma_wait(struct xdma_head *dmahead,
+	      unsigned int user_flags,
+	      unsigned int *operating_flags);
 int xdma_getconfig(struct xdma_chan *chan,
 		   unsigned char *irq_thresh,
 		   unsigned char *irq_delay);
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 185e935..9633403 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -1214,18 +1214,21 @@ static int xlnk_dmawait_ioctl(struct file *filp, unsigned int code,
 		struct xdma_head *dmahead =
 			(struct xdma_head *)temp_args.dmawait.dmahandle;
 
-		status = xdma_wait(dmahead, dmahead->userflag);
-		if (temp_args.dmawait.nappwords) {
-			memcpy(temp_args.dmawait.appwords,
-			       dmahead->appwords_o,
-			       dmahead->nappwords_o * sizeof(u32));
-
-			if (copy_to_user((void __user *)args,
-					 &temp_args,
-					 sizeof(union xlnk_args)))
-				return -EFAULT;
+		status = xdma_wait(dmahead,
+				   dmahead->userflag,
+				   &temp_args.dmawait.flags);
+		if (temp_args.dmawait.flags & XDMA_FLAGS_WAIT_COMPLETE) {
+			if (temp_args.dmawait.nappwords) {
+				memcpy(temp_args.dmawait.appwords,
+				       dmahead->appwords_o,
+				       dmahead->nappwords_o * sizeof(u32));
+			}
+			kfree(dmahead);
 		}
-		kfree(dmahead);
+		if (copy_to_user((void __user *)args,
+				 &temp_args,
+				 sizeof(union xlnk_args)))
+			return -EFAULT;
 	}
 #endif
 
diff --git a/drivers/staging/apf/xlnk.h b/drivers/staging/apf/xlnk.h
index b68e475..637d8b6 100644
--- a/drivers/staging/apf/xlnk.h
+++ b/drivers/staging/apf/xlnk.h
@@ -97,6 +97,7 @@ union xlnk_args {
 		xlnk_uint_type nappwords;
 		xlnk_uint_type appwords[XLNK_MAX_APPWORDS];
 		/* appwords array we only accept 5 max */
+		xlnk_uint_type flags;
 	} dmawait;
 	struct __attribute__ ((__packed__)) {
 		xlnk_intptr_type dmachan;
-- 
2.9.3

