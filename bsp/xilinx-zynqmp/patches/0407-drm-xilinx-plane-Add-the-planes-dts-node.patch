From 29588ba42855786c6bc86e7808cb69888fdb6aab Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Thu, 14 Nov 2013 12:16:30 -0800
Subject: [PATCH 407/827] drm: xilinx: plane: Add the 'planes' dts node

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Add the 'planes' dts node under xilinx_drm. The IP instances for each plane
can be specified using this node, and this enables to have the same IPs
in 2 locations: 1 before OSD(for plane), and 1 after OSD(for crtc).

Signed-off-by: Hyun Kwon <hyunk@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 3655866c4e646b38f66530037217bbee7707e7e2)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/drm/xilinx/xilinx_drm.txt  | 20 ++++++++---
 drivers/gpu/drm/xilinx/xilinx_drm_plane.c          | 39 ++++++++++++++++++----
 2 files changed, 48 insertions(+), 11 deletions(-)

diff --git a/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt b/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
index 5313873..f80a9ef 100644
--- a/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
+++ b/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
@@ -11,24 +11,34 @@ vdma --> [remapper] -> (osd) -> (rgb2yuv) -> (cresample) -> [axi2vid] -> adv7511
 
 Required properties:
  - compatible: value should be "xlnx,drm".
- - dmas: the phandle list of DMA specifiers
- - dma-names: the indentifier strings for DMAs
  - osd: the phandle for on screen display IP if used in the hardware design
  - rgb2yuv: the phandle for rgb2ycrcb IP if used in the hardware design
  - cresample: the phandle for chroma resampler IP if used in the hardware design
  - vtc: the phandle for video timing controller IP
  - encoder-slave: the phandle for the encoder slave.
+ - planes: the subnode for resources for each plane
+
+Required plane properties:
+ - dmas: the phandle list of DMA specifiers
+ - dma-names: the indentifier strings for DMAs
 
 Example:
 
 	xilinx_drm {
 		compatible = "xlnx,drm";
-		dmas = <&axi_vdma_0 0
-			&axi_vdma_1 0>;
-		dma-names = "vdma0", "vdma1";
 		osd = <&v_osd_0>;
 		rgb2yuv = <&v_rgb2ycrcb_0>;
 		cresample = <&v_cresample_0>;
 		vtc = <&v_tc_0>;
 		encoder-slave = <&adv7511>;
+		planes {
+			plane0 {
+				dma = <&axi_vdma_0>;
+				dma-names = "vdma";
+			};
+			plane1 {
+				dma = <&axi_vdma_1>;
+				dma-names = "vdma";
+			};
+		};
 	};
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
index 49ebd23..bde70829 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
@@ -23,6 +23,7 @@
 #include <linux/amba/xilinx_dma.h>
 #include <linux/device.h>
 #include <linux/dmaengine.h>
+#include <linux/of_dma.h>
 #include <linux/platform_device.h>
 
 #include "xilinx_drm_drv.h"
@@ -77,6 +78,7 @@ struct xilinx_drm_plane {
  * struct xilinx_drm_plane_manager: Xilinx drm plane manager object
  *
  * @drm: drm device
+ * @node: plane device node
  * @osd: osd instance
  * @num_planes: number of available planes
  * @format: video format
@@ -85,6 +87,7 @@ struct xilinx_drm_plane {
  */
 struct xilinx_drm_plane_manager {
 	struct drm_device *drm;
+	struct device_node *node;
 	struct xilinx_osd *osd;
 	int num_planes;
 	uint32_t format;
@@ -345,7 +348,8 @@ xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
 {
 	struct xilinx_drm_plane *plane;
 	struct device *dev = manager->drm->dev;
-	char dma_name[16];
+	char plane_name[16];
+	struct device_node *plane_node;
 	int i;
 	int ret;
 
@@ -358,20 +362,29 @@ xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
 		return ERR_PTR(-ENODEV);
 	}
 
+	snprintf(plane_name, sizeof(plane_name), "plane%d", i);
+	plane_node = of_get_child_by_name(manager->node, plane_name);
+	if (!plane_node) {
+		DRM_ERROR("failed to find a plane node\n");
+		return ERR_PTR(-ENODEV);
+	}
+
 	plane = devm_kzalloc(dev, sizeof(*plane), GFP_KERNEL);
-	if (!plane)
-		return ERR_PTR(-ENOMEM);
+	if (!plane) {
+		ret = -ENOMEM;
+		goto err_out;
+	}
 
 	plane->priv = priv;
 	plane->id = i;
 	plane->dpms = DRM_MODE_DPMS_OFF;
 	DRM_DEBUG_KMS("plane->id: %d\n", plane->id);
 
-	snprintf(dma_name, sizeof(dma_name), "vdma%d", i);
-	plane->vdma.chan = dma_request_slave_channel(dev, dma_name);
+	plane->vdma.chan = of_dma_request_slave_channel(plane_node, "vdma");
 	if (!plane->vdma.chan) {
 		DRM_ERROR("failed to request dma channel\n");
-		return ERR_PTR(-ENODEV);
+		ret = -ENODEV;
+		goto err_out;
 	}
 
 	/* create an OSD layer when OSD is available */
@@ -398,6 +411,8 @@ xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
 	plane->manager = manager;
 	manager->planes[i] = plane;
 
+	of_node_put(plane_node);
+
 	return plane;
 
 err_init:
@@ -407,6 +422,8 @@ err_init:
 	}
 err_osd_layer:
 	dma_release_channel(plane->vdma.chan);
+err_out:
+	of_node_put(plane_node);
 	return ERR_PTR(ret);
 }
 
@@ -512,6 +529,13 @@ xilinx_drm_plane_probe_manager(struct drm_device *drm)
 	if (!manager)
 		return ERR_PTR(-ENOMEM);
 
+	/* this node is used to create a plane */
+	manager->node = of_get_child_by_name(dev->of_node, "planes");
+	if (!manager->node) {
+		DRM_ERROR("failed to get a planes node\n");
+		return ERR_PTR(-EINVAL);
+	}
+
 	manager->drm = drm;
 
 	/* probe an OSD. proceed even if there's no OSD */
@@ -520,6 +544,7 @@ xilinx_drm_plane_probe_manager(struct drm_device *drm)
 		manager->osd = xilinx_osd_probe(dev, sub_node);
 		of_node_put(sub_node);
 		if (IS_ERR(manager->osd)) {
+			of_node_put(manager->node);
 			DRM_ERROR("failed to probe an osd\n");
 			return ERR_CAST(manager->osd);
 		}
@@ -546,4 +571,6 @@ void xilinx_drm_plane_remove_manager(struct xilinx_drm_plane_manager *manager)
 			manager->planes[i] = NULL;
 		}
 	}
+
+	of_node_put(manager->node);
 }
-- 
2.9.3

