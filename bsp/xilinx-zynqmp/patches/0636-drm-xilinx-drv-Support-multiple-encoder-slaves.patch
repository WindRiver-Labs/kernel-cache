From 6624ca5074fd24f747d99ee0db2f2c927408c3f6 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Fri, 24 Jul 2015 10:53:53 -0700
Subject: [PATCH 636/827] drm: xilinx: drv: Support multiple encoder slaves

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Create multiple encoder / connector pairs if there are multiple
encoder slave phandles.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 3dd4a244db52762b20e30353e545af2f9935c7ac)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_connector.c |  6 ++---
 drivers/gpu/drm/xilinx/xilinx_drm_connector.h |  2 +-
 drivers/gpu/drm/xilinx/xilinx_drm_drv.c       | 37 +++++++++++++++++----------
 drivers/gpu/drm/xilinx/xilinx_drm_encoder.c   | 20 +++++----------
 drivers/gpu/drm/xilinx/xilinx_drm_encoder.h   |  3 ++-
 5 files changed, 35 insertions(+), 33 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_connector.c b/drivers/gpu/drm/xilinx/xilinx_drm_connector.c
index 7884339..fa4a347 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_connector.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_connector.c
@@ -134,7 +134,7 @@ static const struct xilinx_drm_connector_type connector_types[] = {
 /* create connector */
 struct drm_connector *
 xilinx_drm_connector_create(struct drm_device *drm,
-			    struct drm_encoder *base_encoder)
+			    struct drm_encoder *base_encoder, int id)
 {
 	struct xilinx_drm_connector *connector;
 	const char *string;
@@ -148,8 +148,8 @@ xilinx_drm_connector_create(struct drm_device *drm,
 	connector->base.polled = DRM_CONNECTOR_POLL_CONNECT |
 				 DRM_CONNECTOR_POLL_DISCONNECT;
 
-	ret = of_property_read_string(drm->dev->of_node, "xlnx,connector-type",
-				      &string);
+	ret = of_property_read_string_index(drm->dev->of_node,
+					    "xlnx,connector-type", id, &string);
 	if (ret < 0) {
 		dev_err(drm->dev, "No connector type in DT\n");
 		return ERR_PTR(ret);
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_connector.h b/drivers/gpu/drm/xilinx/xilinx_drm_connector.h
index 78bfbb5..750bfd8 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_connector.h
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_connector.h
@@ -23,7 +23,7 @@ struct drm_connector;
 
 struct drm_connector *
 xilinx_drm_connector_create(struct drm_device *drm,
-			    struct drm_encoder *base_encoder);
+			    struct drm_encoder *base_encoder, int id);
 void xilinx_drm_connector_destroy(struct drm_connector *base_connector);
 
 #endif /* _XILINX_DRM_CONNECTOR_H_ */
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_drv.c b/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
index 04ff490..516e336 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
@@ -244,9 +244,9 @@ static int xilinx_drm_load(struct drm_device *drm, unsigned long flags)
 	struct xilinx_drm_private *private;
 	struct drm_encoder *encoder;
 	struct drm_connector *connector;
+	struct device_node *encoder_node;
 	struct platform_device *pdev = drm->platformdev;
-	unsigned int bpp;
-	unsigned int align;
+	unsigned int bpp, align, i = 0;
 	int ret;
 
 	private = devm_kzalloc(drm->dev, sizeof(*private), GFP_KERNEL);
@@ -263,20 +263,29 @@ static int xilinx_drm_load(struct drm_device *drm, unsigned long flags)
 		goto err_out;
 	}
 
-	/* create a xilinx encoder */
-	encoder = xilinx_drm_encoder_create(drm);
-	if (IS_ERR(encoder)) {
-		DRM_DEBUG_DRIVER("failed to create xilinx encoder\n");
-		ret = PTR_ERR(encoder);
-		goto err_out;
+	while ((encoder_node = of_parse_phandle(drm->dev->of_node,
+						"xlnx,encoder-slave", i))) {
+		encoder = xilinx_drm_encoder_create(drm, encoder_node);
+		of_node_put(encoder_node);
+		if (IS_ERR(encoder)) {
+			DRM_DEBUG_DRIVER("failed to create xilinx encoder\n");
+			ret = PTR_ERR(encoder);
+			goto err_out;
+		}
+
+		connector = xilinx_drm_connector_create(drm, encoder, i);
+		if (IS_ERR(connector)) {
+			DRM_DEBUG_DRIVER("failed to create xilinx connector\n");
+			ret = PTR_ERR(connector);
+			goto err_out;
+		}
+
+		i++;
 	}
 
-	/* create a xilinx connector */
-	connector = xilinx_drm_connector_create(drm, encoder);
-	if (IS_ERR(connector)) {
-		DRM_DEBUG_DRIVER("failed to create xilinx connector\n");
-		ret = PTR_ERR(connector);
-		goto err_out;
+	if (i == 0) {
+		DRM_ERROR("failed to get an encoder slave node\n");
+		return -ENODEV;
 	}
 
 	ret = drm_vblank_init(drm, 1);
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_encoder.c b/drivers/gpu/drm/xilinx/xilinx_drm_encoder.c
index 683d0fd..8bac4fd 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_encoder.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_encoder.c
@@ -147,10 +147,10 @@ static struct drm_encoder_funcs xilinx_drm_encoder_funcs = {
 };
 
 /* create encoder */
-struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm)
+struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm,
+					      struct device_node *node)
 {
 	struct xilinx_drm_encoder *encoder;
-	struct device_node *sub_node;
 	struct i2c_client *i2c_slv;
 	struct i2c_driver *i2c_driver;
 	struct drm_i2c_encoder_driver *drm_i2c_driver;
@@ -166,8 +166,9 @@ struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm)
 
 	encoder->dpms = DRM_MODE_DPMS_OFF;
 
-	/* initialize encoder */
+	/* FIXME: Use DT to figure out crtcs / clones */
 	encoder->slave.base.possible_crtcs = 1;
+	encoder->slave.base.possible_clones = ~0;
 	ret = drm_encoder_init(drm, &encoder->slave.base,
 			       &xilinx_drm_encoder_funcs,
 			       DRM_MODE_ENCODER_TMDS);
@@ -179,15 +180,8 @@ struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm)
 	drm_encoder_helper_add(&encoder->slave.base,
 			       &xilinx_drm_encoder_helper_funcs);
 
-	/* get slave encoder */
-	sub_node = of_parse_phandle(drm->dev->of_node, "xlnx,encoder-slave", 0);
-	if (!sub_node) {
-		DRM_ERROR("failed to get an encoder slave node\n");
-		return ERR_PTR(-ENODEV);
-	}
-
 	/* initialize slave encoder */
-	i2c_slv = of_find_i2c_device_by_node(sub_node);
+	i2c_slv = of_find_i2c_device_by_node(node);
 	if (i2c_slv && i2c_slv->dev.driver) {
 		i2c_driver = to_i2c_driver(i2c_slv->dev.driver);
 		drm_i2c_driver = to_drm_i2c_encoder_driver(i2c_driver);
@@ -201,7 +195,7 @@ struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm)
 		ret = drm_i2c_driver->encoder_init(i2c_slv, drm,
 						   &encoder->slave);
 	} else {
-		platform_slv = of_find_device_by_node(sub_node);
+		platform_slv = of_find_device_by_node(node);
 		if (!platform_slv) {
 			DRM_DEBUG_KMS("failed to get an encoder slv\n");
 			return ERR_PTR(-EPROBE_DEFER);
@@ -227,8 +221,6 @@ struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm)
 							&encoder->slave);
 	}
 
-	of_node_put(sub_node);
-
 	if (ret) {
 		DRM_ERROR("failed to initialize encoder slave\n");
 		goto err_out;
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_encoder.h b/drivers/gpu/drm/xilinx/xilinx_drm_encoder.h
index 8a72e68..7707f14 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_encoder.h
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_encoder.h
@@ -21,7 +21,8 @@
 struct drm_device;
 struct drm_encoder;
 
-struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm);
+struct drm_encoder *xilinx_drm_encoder_create(struct drm_device *drm,
+					      struct device_node *node);
 void xilinx_drm_encoder_destroy(struct drm_encoder *base_encoder);
 
 #endif /* _XILINX_DRM_ENCODER_H_ */
-- 
2.9.3

