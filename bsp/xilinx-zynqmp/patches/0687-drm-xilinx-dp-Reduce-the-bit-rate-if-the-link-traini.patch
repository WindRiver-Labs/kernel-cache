From 0157716f4fd0b94d130e14c4f668616716fa1a13 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Fri, 17 Jun 2016 16:37:07 -0700
Subject: [PATCH 687/827] drm: xilinx: dp: Reduce the bit rate if the link training fails

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Per DP 1.2 spec, when the linke training fails and there's
more low link rate available to try, it needs to retry
the link training with lower link rate. Since the link rate
depends on the current mode, move the training sequence to
mode set, and update other configuration such as init wait value
accordingly.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 28f06f4dd82e9915e7ee2cae6cf52b9e2666c68c)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_dp.c | 51 ++++++++++++++++++++++++----------
 1 file changed, 37 insertions(+), 14 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_dp.c b/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
index 3dfbf28..c195140 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
@@ -736,16 +736,12 @@ static int xilinx_drm_dp_train(struct xilinx_drm_dp *dp)
 	memset(dp->train_set, 0, 4);
 
 	ret = xilinx_drm_dp_link_train_cr(dp);
-	if (ret) {
-		DRM_ERROR("failed to train clock recovery\n");
+	if (ret)
 		return ret;
-	}
 
 	ret = xilinx_drm_dp_link_train_ce(dp);
-	if (ret) {
-		DRM_ERROR("failed to train channel eq\n");
+	if (ret)
 		return ret;
-	}
 
 	xilinx_drm_writel(dp->iomem, XILINX_DP_TX_TRAINING_PATTERN_SET,
 			  DP_TRAINING_PATTERN_DISABLE);
@@ -786,7 +782,6 @@ static void xilinx_drm_dp_dpms(struct drm_encoder *encoder, int dpms)
 				break;
 			usleep_range(300, 500);
 		}
-		xilinx_drm_dp_train(dp);
 		xilinx_drm_writel(dp->iomem, XILINX_DP_TX_SW_RESET,
 				  XILINX_DP_TX_SW_RESET_ALL);
 		xilinx_drm_writel(iomem, XILINX_DP_TX_ENABLE_MAIN_STREAM, 1);
@@ -989,11 +984,15 @@ static void xilinx_drm_dp_mode_set_stream(struct xilinx_drm_dp *dp,
  * xilinx_drm_dp_mode_configure - Configure the link values
  * @dp: DisplayPort IP core structure
  * @pclock: pixel clock for requested display mode
+ * @current_bw: current link rate
  *
  * Find the link configuration values, rate and lane count for requested pixel
  * clock @pclock.
+ *
+ * Return: Current link rate code, or -EINVAL.
  */
-static void xilinx_drm_dp_mode_configure(struct xilinx_drm_dp *dp, int pclock)
+static int xilinx_drm_dp_mode_configure(struct xilinx_drm_dp *dp, int pclock,
+					u8 current_bw)
 {
 	int max_rate = dp->link_config.max_rate;
 	u8 bws[3] = { DP_LINK_BW_1_62, DP_LINK_BW_2_7, DP_LINK_BW_5_4 };
@@ -1003,9 +1002,13 @@ static void xilinx_drm_dp_mode_configure(struct xilinx_drm_dp *dp, int pclock)
 	u8 lane_cnt, i;
 	s8 clock;
 
-	for (i = 0; i < ARRAY_SIZE(bws); i++)
-		if (bws[i] == max_link_rate_code)
+	for (i = ARRAY_SIZE(bws) - 1; i >= 0; i--) {
+		if (current_bw && bws[i] >= current_bw)
+			continue;
+
+		if (bws[i] <= max_link_rate_code)
 			break;
+	}
 
 	for (lane_cnt = 1; lane_cnt <= max_lanes; lane_cnt <<= 1)
 		for (clock = i; clock >= 0; clock--) {
@@ -1017,9 +1020,13 @@ static void xilinx_drm_dp_mode_configure(struct xilinx_drm_dp *dp, int pclock)
 			if (pclock <= rate) {
 				dp->mode.bw_code = bws[clock];
 				dp->mode.lane_cnt = lane_cnt;
-				return;
+				return bws[clock];
 			}
 		}
+
+	DRM_ERROR("failed to configure link values\n");
+
+	return -EINVAL;
 }
 
 static void xilinx_drm_dp_mode_set(struct drm_encoder *encoder,
@@ -1027,10 +1034,26 @@ static void xilinx_drm_dp_mode_set(struct drm_encoder *encoder,
 				   struct drm_display_mode *adjusted_mode)
 {
 	struct xilinx_drm_dp *dp = to_dp(encoder);
+	int bw = 0;
+	unsigned int ret;
+
+	do {
+		bw = xilinx_drm_dp_mode_configure(dp, adjusted_mode->clock, bw);
+		if (bw < 0)
+			return;
+
+		xilinx_drm_dp_mode_set_stream(dp, adjusted_mode);
+		xilinx_drm_dp_mode_set_transfer_unit(dp, adjusted_mode);
+
+		xilinx_drm_writel(dp->iomem, XILINX_DP_TX_PHY_POWER_DOWN, 0);
+		ret = xilinx_drm_dp_train(dp);
+		xilinx_drm_writel(dp->iomem, XILINX_DP_TX_PHY_POWER_DOWN,
+				  XILINX_DP_TX_PHY_POWER_DOWN_ALL);
+		if (!ret)
+			return;
+	} while (bw >= DP_LINK_BW_1_62);
 
-	xilinx_drm_dp_mode_configure(dp, adjusted_mode->clock);
-	xilinx_drm_dp_mode_set_stream(dp, adjusted_mode);
-	xilinx_drm_dp_mode_set_transfer_unit(dp, adjusted_mode);
+	DRM_ERROR("failed to train the DP link\n");
 }
 
 static enum drm_connector_status
-- 
2.9.3

