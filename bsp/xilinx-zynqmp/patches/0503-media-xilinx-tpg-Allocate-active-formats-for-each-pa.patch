From 664d373547b3f040da63bdb741ce617a2a999627 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Tue, 18 Mar 2014 09:18:59 -0700
Subject: [PATCH 503/827] media: xilinx: tpg: Allocate active formats for each pad

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

When TPG has an input pad, the 2 try formats are stored in the file
handle. So 2 active formats are allocated in struct xtpg_device, and
this will make format handling more consistent, and help to store active
formats in struct xvip_device later as one format per pad will be needed.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 63b2e13d10899888656559605442ac78608d8d50)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-tpg.c | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-tpg.c b/drivers/media/platform/xilinx/xilinx-tpg.c
index 516337b..bd50944 100644
--- a/drivers/media/platform/xilinx/xilinx-tpg.c
+++ b/drivers/media/platform/xilinx/xilinx-tpg.c
@@ -103,7 +103,7 @@
  * @xvip: Xilinx Video IP device
  * @pads: media pads
  * @npads: number of pads (1 or 2)
- * @format: active V4L2 media bus format at the source pad
+ * @formats: active V4L2 media bus format for each pad
  * @default_format: default V4L2 media bus format
  * @vip_format: format information corresponding to the active format
  * @bayer: boolean flag if TPG is set to any bayer format
@@ -115,7 +115,7 @@ struct xtpg_device {
 	struct media_pad pads[2];
 	unsigned int npads;
 
-	struct v4l2_mbus_framefmt format;
+	struct v4l2_mbus_framefmt formats[2];
 	struct v4l2_mbus_framefmt default_format;
 	const struct xvip_video_format *vip_format;
 	bool bayer;
@@ -141,7 +141,7 @@ static int xtpg_s_stream(struct v4l2_subdev *subdev, int enable)
 		return 0;
 	}
 
-	xvip_set_frame_size(&xtpg->xvip, &xtpg->format);
+	xvip_set_frame_size(&xtpg->xvip, &xtpg->formats[0]);
 
 	xvip_start(&xtpg->xvip);
 
@@ -160,7 +160,7 @@ __xtpg_get_pad_format(struct xtpg_device *xtpg, struct v4l2_subdev_fh *fh,
 	case V4L2_SUBDEV_FORMAT_TRY:
 		return v4l2_subdev_get_try_format(fh, pad);
 	case V4L2_SUBDEV_FORMAT_ACTIVE:
-		return &xtpg->format;
+		return &xtpg->formats[pad];
 	default:
 		return NULL;
 	}
@@ -294,7 +294,8 @@ static void xtpg_set_test_pattern(struct xtpg_device *xtpg,
 	 * the TPG IP core is updated.
 	 */
 	if (pattern)
-		bayer_phase = xtpg_get_bayer_phase(xtpg->format.code);
+		bayer_phase =
+			xtpg_get_bayer_phase(xtpg->formats[0].code);
 	else
 		bayer_phase = XTPG_BAYER_PHASE_OFF;
 
@@ -722,7 +723,9 @@ static int xtpg_probe(struct platform_device *pdev)
 	if (bayer_phase != XTPG_BAYER_PHASE_OFF)
 		xtpg->bayer = true;
 
-	xtpg->format = xtpg->default_format;
+	xtpg->formats[0] = xtpg->default_format;
+	if (xtpg->npads == 2)
+		xtpg->formats[1] = xtpg->default_format;
 
 	/* Initialize V4L2 subdevice and media entity */
 	subdev = &xtpg->xvip.subdev;
-- 
2.9.3

