From 450d0b5bcb9bbccac69cd6e767d8dfb31ec9625b Mon Sep 17 00:00:00 2001
From: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Date: Sat, 20 Aug 2016 01:06:43 +0530
Subject: [PATCH 003/827] clk: zynqmp: Add zynqmp ultrascale gate support

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Add zynqmp ultrascale gate support
Based on the common gate with the IO accessors customized This is
needed so as to not break multi-platform support.
Also spinlocking is removed as it is taken care by firmware.

Signed-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 85926715c882e8c662505a0419685546f751add3)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/clk/zynqmp/Makefile          |   2 +-
 drivers/clk/zynqmp/clk-gate-zynqmp.c | 153 +++++++++++++++++++++++++++++++++++
 include/linux/clk/zynqmp.h           |   7 ++
 3 files changed, 161 insertions(+), 1 deletion(-)
 create mode 100644 drivers/clk/zynqmp/clk-gate-zynqmp.c

diff --git a/drivers/clk/zynqmp/Makefile b/drivers/clk/zynqmp/Makefile
index 9a89973..e28a3d6 100644
--- a/drivers/clk/zynqmp/Makefile
+++ b/drivers/clk/zynqmp/Makefile
@@ -1,3 +1,3 @@
 # Zynq Ultrascale+ MPSoC clock specific Makefile
 
-obj-$(CONFIG_ARCH_ZYNQMP)	+= pll.o
+obj-$(CONFIG_ARCH_ZYNQMP)	+= pll.o clk-gate-zynqmp.o
diff --git a/drivers/clk/zynqmp/clk-gate-zynqmp.c b/drivers/clk/zynqmp/clk-gate-zynqmp.c
new file mode 100644
index 0000000..32824d2
--- /dev/null
+++ b/drivers/clk/zynqmp/clk-gate-zynqmp.c
@@ -0,0 +1,153 @@
+/*
+ * Zynq UltraScale+ MPSoC clock controller
+ *
+ *  Copyright (C) 2016 Xilinx
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Gated clock implementation
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/clk/zynqmp.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/io.h>
+#include <linux/err.h>
+#include <linux/string.h>
+
+/**
+ * DOC: basic gatable clock which can gate and ungate it's output
+ *
+ * Traits of this clock:
+ * prepare - clk_(un)prepare only ensures parent is (un)prepared
+ * enable - clk_enable and clk_disable are functional & control gating
+ * rate - inherits rate from parent.  No clk_set_rate support
+ * parent - fixed parent.  No clk_set_parent support
+ */
+
+#define to_clk_gate(_hw) container_of(_hw, struct clk_gate, hw)
+
+/*
+ * It works on following logic:
+ *
+ * For enabling clock, enable = 1
+ *	set2dis = 1	-> clear bit	-> set = 0
+ *	set2dis = 0	-> set bit	-> set = 1
+ *
+ * For disabling clock, enable = 0
+ *	set2dis = 1	-> set bit	-> set = 1
+ *	set2dis = 0	-> clear bit	-> set = 0
+ *
+ * So, result is always: enable xor set2dis.
+ */
+static void clk_gate_endisable(struct clk_hw *hw, int enable)
+{
+	struct clk_gate *gate = to_clk_gate(hw);
+	int set = gate->flags & CLK_GATE_SET_TO_DISABLE ? 1 : 0;
+	u32 reg;
+
+	set ^= enable;
+
+	if (gate->flags & CLK_GATE_HIWORD_MASK) {
+		reg = BIT(gate->bit_idx + 16);
+	} else {
+		reg = zynqmp_pm_mmio_readl(gate->reg);
+
+		if (!set)
+			reg &= ~BIT(gate->bit_idx);
+	}
+
+	if (set)
+		reg |= BIT(gate->bit_idx);
+	zynqmp_pm_mmio_writel(reg, gate->reg);
+}
+
+static int zynqmp_clk_gate_enable(struct clk_hw *hw)
+{
+	clk_gate_endisable(hw, 1);
+
+	return 0;
+}
+
+static void zynqmp_clk_gate_disable(struct clk_hw *hw)
+{
+	clk_gate_endisable(hw, 0);
+}
+
+static int zynqmp_clk_gate_is_enabled(struct clk_hw *hw)
+{
+	u32 reg;
+	struct clk_gate *gate = to_clk_gate(hw);
+
+	reg = zynqmp_pm_mmio_readl(gate->reg);
+
+	/* if a set bit disables this clk, flip it before masking */
+	if (gate->flags & CLK_GATE_SET_TO_DISABLE)
+		reg ^= BIT(gate->bit_idx);
+
+	reg &= BIT(gate->bit_idx);
+
+	return reg ? 1 : 0;
+}
+
+const struct clk_ops zynqmp_clk_gate_ops = {
+	.enable = zynqmp_clk_gate_enable,
+	.disable = zynqmp_clk_gate_disable,
+	.is_enabled = zynqmp_clk_gate_is_enabled,
+};
+EXPORT_SYMBOL_GPL(zynqmp_clk_gate_ops);
+
+/**
+ * zynqmp_clk_register_gate - register a gate clock with the clock framework
+ * @dev: device that is registering this clock
+ * @name: name of this clock
+ * @parent_name: name of this clock's parent
+ * @flags: framework-specific flags for this clock
+ * @reg: register address to control gating of this clock
+ * @bit_idx: which bit in the register controls gating of this clock
+ * @clk_gate_flags: gate-specific flags for this clock
+ *
+ * Return: clock handle of the registered clock gate
+ */
+struct clk *zynqmp_clk_register_gate(struct device *dev, const char *name,
+		const char *parent_name, unsigned long flags,
+		resource_size_t *reg, u8 bit_idx,
+		u8 clk_gate_flags)
+{
+	struct clk_gate *gate;
+	struct clk *clk;
+	struct clk_init_data init;
+
+	if ((clk_gate_flags & CLK_GATE_HIWORD_MASK) && (bit_idx > 15)) {
+		pr_err("gate bit exceeds LOWORD field\n");
+		return ERR_PTR(-EINVAL);
+	}
+
+	/* allocate the gate */
+	gate = kzalloc(sizeof(*gate), GFP_KERNEL);
+	if (!gate)
+		return ERR_PTR(-ENOMEM);
+
+	init.name = name;
+	init.ops = &zynqmp_clk_gate_ops;
+	init.flags = flags | CLK_IS_BASIC;
+	init.parent_names = (parent_name ? &parent_name : NULL);
+	init.num_parents = parent_name ? 1 : 0;
+
+	/* struct clk_gate assignments */
+	gate->reg = reg;
+	gate->bit_idx = bit_idx;
+	gate->flags = clk_gate_flags;
+	gate->hw.init = &init;
+
+	clk = clk_register(dev, &gate->hw);
+
+	if (IS_ERR(clk))
+		kfree(gate);
+
+	return clk;
+}
+EXPORT_SYMBOL_GPL(zynqmp_clk_register_gate);
diff --git a/include/linux/clk/zynqmp.h b/include/linux/clk/zynqmp.h
index 179068c..e125adf 100644
--- a/include/linux/clk/zynqmp.h
+++ b/include/linux/clk/zynqmp.h
@@ -19,6 +19,8 @@
 #include <linux/spinlock.h>
 #include <linux/soc/xilinx/zynqmp/pm.h>
 
+struct device;
+
 static inline u32 zynqmp_pm_mmio_readl(void __iomem *reg)
 {
 	u32 val;
@@ -44,4 +46,9 @@ struct clk *clk_register_zynqmp_pll(const char *name, const char *parent,
 		unsigned long flag, resource_size_t *pll_ctrl,
 		resource_size_t *pll_status, u8 lock_index);
 
+struct clk *zynqmp_clk_register_gate(struct device *dev, const char *name,
+		const char *parent_name, unsigned long flags,
+		resource_size_t *reg, u8 bit_idx,
+		u8 clk_gate_flags);
+
 #endif
-- 
2.9.3

