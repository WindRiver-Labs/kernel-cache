From d094299b131876377a9d4ffd1efa5ff8e3e58fb6 Mon Sep 17 00:00:00 2001
From: Michael Gill <michael.gill@xilinx.com>
Date: Tue, 12 Jul 2016 11:37:02 -0700
Subject: [PATCH 747/827] staging: apf: Fixed failing buffer allocation in driver

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

kmalloc was failing due to allocate large memory requests.
This patch moves to an alternative method of allocating sds_alloc
backing buffers.

Signed-off-by: Michael Gill <gill@xilinx.com>
(cherry picked from commit 404013b16cebc8e904a6464689685ddb1676ebac)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xilinx-dma-apf.c |  6 ++++-
 drivers/staging/apf/xilinx-dma-apf.h |  1 +
 drivers/staging/apf/xlnk.c           | 44 ++++++++++++++++++++++++++++--------
 3 files changed, 40 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index 48a0844..31ddc0f 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -794,6 +794,7 @@ static void xdma_release(struct device *dev)
 
 int xdma_submit(struct xdma_chan *chan,
 			xlnk_intptr_type userbuf,
+			void *kaddr,
 			unsigned int size,
 			unsigned int nappwords_i,
 			u32 *appwords_i,
@@ -878,7 +879,10 @@ int xdma_submit(struct xdma_chan *chan,
 		sglist_dma = sglist;
 		sgcnt_dma = sgcnt;
 		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
-			void *kaddr = phys_to_virt(userbuf);
+			if (!kaddr) {
+				pr_err("Whoops, cannot flush without an address\n");
+				return -EINVAL;
+			}
 #if XLNK_SYS_BIT_WIDTH == 32
 			__cpuc_flush_dcache_area(kaddr, size);
 			outer_clean_range(userbuf,
diff --git a/drivers/staging/apf/xilinx-dma-apf.h b/drivers/staging/apf/xilinx-dma-apf.h
index cd2a0b0..5a09cdb 100644
--- a/drivers/staging/apf/xilinx-dma-apf.h
+++ b/drivers/staging/apf/xilinx-dma-apf.h
@@ -209,6 +209,7 @@ void xdma_release_channel(struct xdma_chan *chan);
 void xdma_release_all_channels(void);
 int xdma_submit(struct xdma_chan *chan,
 		xlnk_intptr_type userbuf,
+		void *kaddr,
 		unsigned int size,
 		unsigned int nappwords_i,
 		u32 *appwords_i,
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 9633403..4258ce6 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -370,17 +370,23 @@ static int xlnk_allocbuf(unsigned int len, unsigned int cacheable)
 		pr_err("No id could be found in range\n");
 		return -ENOMEM;
 	}
-	kaddr = kmalloc(len + PAGE_SIZE, GFP_KERNEL | GFP_DMA);
+	if (cacheable)
+		kaddr = dma_alloc_noncoherent(xlnk_dev,
+					      len,
+					      &phys_addr_anchor,
+					      GFP_KERNEL);
+	else
+		kaddr = dma_alloc_coherent(xlnk_dev,
+					   len,
+					   &phys_addr_anchor,
+					   GFP_KERNEL);
 	if (!kaddr)
 		return -ENOMEM;
-	phys_addr_anchor = virt_to_phys(kaddr);
 	xlnk_bufpool_alloc_point[id] = kaddr;
-	page_dst = (((phys_addr_anchor + (PAGE_SIZE - 1))
-		/ PAGE_SIZE) * PAGE_SIZE) - phys_addr_anchor;
-	xlnk_bufpool[id] = (void *)((uint8_t *)kaddr + page_dst);
+	xlnk_bufpool[id] = kaddr;
 	xlnk_buflen[id] = len;
 	xlnk_bufcacheable[id] = cacheable;
-	xlnk_phyaddr[id] = phys_addr_anchor + page_dst;
+	xlnk_phyaddr[id] = phys_addr_anchor;
 
 	return id;
 }
@@ -389,7 +395,7 @@ static int xlnk_init_bufpool(void)
 {
 	unsigned int i;
 
-	xlnk_dev_buf = kmalloc(8192, GFP_KERNEL | __GFP_DMA);
+	xlnk_dev_buf = kmalloc(8192, GFP_KERNEL | GFP_DMA);
 	*((char *)xlnk_dev_buf) = '\0';
 
 	if (!xlnk_dev_buf) {
@@ -768,7 +774,7 @@ static int xlnk_allocbuf_ioctl(struct file *filp, unsigned int code,
 
 	union xlnk_args temp_args;
 	int status;
-	xlnk_intptr_type id;
+	xlnk_int_type id;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
 				sizeof(union xlnk_args));
@@ -791,14 +797,22 @@ static int xlnk_allocbuf_ioctl(struct file *filp, unsigned int code,
 
 static int xlnk_freebuf(int id)
 {
-
 	if (id <= 0 || id >= xlnk_bufpool_size)
 		return -ENOMEM;
 
 	if (!xlnk_bufpool[id])
 		return -ENOMEM;
 
-	kfree(xlnk_bufpool_alloc_point[id]);
+	if (xlnk_bufcacheable[id])
+		dma_free_noncoherent(xlnk_dev,
+				     xlnk_buflen[id],
+				     xlnk_bufpool_alloc_point[id],
+				     xlnk_phyaddr[id]);
+	else
+		dma_free_coherent(xlnk_dev,
+				  xlnk_buflen[id],
+				  xlnk_bufpool_alloc_point[id],
+				  xlnk_phyaddr[id]);
 	xlnk_bufpool[id] = NULL;
 	xlnk_phyaddr[id] = (dma_addr_t)NULL;
 	xlnk_buflen[id] = 0;
@@ -1139,9 +1153,19 @@ static int xlnk_dmasubmit_ioctl(struct file *filp, unsigned int code,
 		}
 		temp_args.dmasubmit.dmahandle = (xlnk_intptr_type)t;
 	} else {
+		int buf_id =
+			xlnk_buf_find_by_phys_addr(temp_args.dmasubmit.buf);
+		void *kaddr = NULL;
+
+		if (buf_id) {
+			xlnk_intptr_type addr_delta = xlnk_phyaddr[buf_id] -
+				temp_args.dmasubmit.buf;
+			kaddr = (u8 *)(xlnk_bufpool[buf_id]) + addr_delta;
+		}
 		status = xdma_submit((struct xdma_chan *)
 				     (temp_args.dmasubmit.dmachan),
 				     temp_args.dmasubmit.buf,
+						 kaddr,
 				     temp_args.dmasubmit.len,
 				     temp_args.dmasubmit.nappwords_i,
 				     temp_args.dmasubmit.appwords_i,
-- 
2.9.3

