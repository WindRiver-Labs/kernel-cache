From 465f1f00962f28661709548aeb5264f8f651a07f Mon Sep 17 00:00:00 2001
From: Kedareswara rao Appana <appana.durga.rao@xilinx.com>
Date: Thu, 10 Sep 2015 22:24:50 +0530
Subject: [PATCH 763/827] net: ethernet: xilinx: Convert the driver to use of_get_phy_mode

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This patch updates the driver to use of_get_phy_mode.

Signed-off-by: Kedareswara rao Appana <appanad@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit c37196fac0a900e8e74a5f4c6afcd76edb667375)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet.h      |  2 ++
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c | 17 ++++++++---------
 2 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet.h b/drivers/net/ethernet/xilinx/xilinx_axienet.h
index 2009b74..0176f9b 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet.h
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet.h
@@ -423,6 +423,7 @@ struct axidma_bd {
  * @jumbo_support: Stores hardware configuration for jumbo support. If hardware
  *		   can handle jumbo packets, this entry will be 1, else 0.
  * @is_10Gmac:	  Check for 10g mac.
+ * @phy_interface: Phy interface type.
  */
 struct axienet_local {
 	struct net_device *ndev;
@@ -470,6 +471,7 @@ struct axienet_local {
 	u32 coalesce_count_rx;
 	u32 coalesce_count_tx;
 	u32 is_10Gmac;
+	u32 phy_interface;
 };
 
 /**
diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 42a4a4a..ff6822e 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -28,6 +28,7 @@
 #include <linux/of_platform.h>
 #include <linux/of_irq.h>
 #include <linux/of_address.h>
+#include <linux/of_net.h>
 #include <linux/skbuff.h>
 #include <linux/spinlock.h>
 #include <linux/phy.h>
@@ -1005,16 +1006,9 @@ static int axienet_open(struct net_device *ndev)
 		return ret;
 
 	if (lp->phy_node && !lp->is_10Gmac) {
-		if (lp->phy_type == XAE_PHY_TYPE_GMII ||
-		    lp->phy_type == XAE_PHY_TYPE_1000BASE_X) {
-			lp->phy_dev = of_phy_connect(lp->ndev, lp->phy_node,
+		lp->phy_dev = of_phy_connect(lp->ndev, lp->phy_node,
 					     axienet_adjust_link, 0,
-					     PHY_INTERFACE_MODE_GMII);
-		} else if (lp->phy_type == XAE_PHY_TYPE_RGMII_2_0) {
-			lp->phy_dev = of_phy_connect(lp->ndev, lp->phy_node,
-					     axienet_adjust_link, 0,
-					     PHY_INTERFACE_MODE_RGMII_ID);
-		}
+					     lp->phy_interface);
 
 		if (!lp->phy_dev)
 			dev_err(lp->dev, "of_phy_connect() failed\n");
@@ -1729,6 +1723,11 @@ static int axienet_probe(struct platform_device *pdev)
 	lp->coalesce_count_rx = XAXIDMA_DFT_RX_THRESHOLD;
 	lp->coalesce_count_tx = XAXIDMA_DFT_TX_THRESHOLD;
 
+	ret = of_get_phy_mode(pdev->dev.of_node);
+	if (ret < 0)
+		dev_warn(&pdev->dev, "couldn't find phy i/f\n");
+	lp->phy_interface = ret;
+
 	lp->phy_node = of_parse_phandle(pdev->dev.of_node, "phy-handle", 0);
 	if (lp->phy_node) {
 		ret = axienet_mdio_setup(lp, pdev->dev.of_node);
-- 
2.9.3

