From 9785b6ca088c04d29347574276c017a884f2c09c Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Thu, 14 Nov 2013 12:16:33 -0800
Subject: [PATCH 410/827] drm: xilinx: crtc: Add CCF support for pixel clock

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Replace dependency on si570 using CCF interface.

Signed-off-by: Hyun Kwon <hyunk@xilinx.com>
Acked-by: Soren Brinkmann <sorenb@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 72712c5e407072d67d81129137de31c62ba5051f)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/drm/xilinx/xilinx_drm.txt  |  3 ++
 drivers/gpu/drm/xilinx/Kconfig                     |  3 +-
 drivers/gpu/drm/xilinx/xilinx_drm_crtc.c           | 35 +++++++++++++++-------
 3 files changed, 28 insertions(+), 13 deletions(-)

diff --git a/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt b/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
index f8d131b..b21d946 100644
--- a/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
+++ b/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
@@ -16,6 +16,7 @@ Required properties:
  - cresample: the phandle for chroma resampler IP if used in the hardware design
  - vtc: the phandle for video timing controller IP
  - encoder-slave: the phandle for the encoder slave.
+ - clocks: the phandle for the pixel clock
  - planes: the subnode for resources for each plane
 
 Required plane properties:
@@ -33,6 +34,7 @@ vdma - [remap] - rgb2yuv - cresample - [axi2vid] - adv7511
 		compatible = "xlnx,drm";
 		vtc = <&v_tc_0>;
 		encoder-slave = <&adv7511>;
+		clocks = <&si570>;
 		planes {
 			plane0 {
 				dma = <&axi_vdma_0>;
@@ -54,6 +56,7 @@ vdma - [remap] - rgb2yuv -|                               |
 		cresample = <&v_cresample_0>;
 		vtc = <&v_tc_0>;
 		encoder-slave = <&adv7511>;
+		clocks = <&si570>;
 		planes {
 			plane0 {
 				dma = <&axi_vdma_0>;
diff --git a/drivers/gpu/drm/xilinx/Kconfig b/drivers/gpu/drm/xilinx/Kconfig
index 0e83cfb..f30926e 100644
--- a/drivers/gpu/drm/xilinx/Kconfig
+++ b/drivers/gpu/drm/xilinx/Kconfig
@@ -1,11 +1,10 @@
 config DRM_XILINX
 	tristate "Xilinx DRM"
-	depends on DRM && ARCH_ZYNQ
+	depends on DRM && ARCH_ZYNQ && HAVE_CLK
 	select DRM_KMS_HELPER
 	select DRM_KMS_CMA_HELPER
 	select DRM_GEM_CMA_HELPER
 	select DRM_ENCODER_ADV7511
-	select SI570
 	select XILINX_AXIVDMA
 	help
 	  DRM display driver for Xilinx IP based pipelines.
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
index 55ff920..9668c78 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
@@ -21,10 +21,10 @@
 #include <drm/drm_fb_cma_helper.h>
 #include <drm/drm_gem_cma_helper.h>
 
+#include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/device.h>
 #include <linux/i2c.h>
-#include <linux/i2c/si570.h>
 
 #include <video/videomode.h>
 
@@ -40,7 +40,7 @@ struct xilinx_drm_crtc {
 	struct drm_plane *priv_plane;
 	struct xilinx_cresample *cresample;
 	struct xilinx_rgb2yuv *rgb2yuv;
-	struct i2c_client *si570;
+	struct clk *pixel_clock;
 	struct xilinx_vtc *vtc;
 	struct xilinx_drm_plane_manager *plane_manager;
 	int dpms;
@@ -119,14 +119,20 @@ static int xilinx_drm_crtc_mode_set(struct drm_crtc *base_crtc,
 {
 	struct xilinx_drm_crtc *crtc = to_xilinx_crtc(base_crtc);
 	struct videomode vm;
+	long diff;
 	int ret;
 
-	/* set si570 pixel clock */
-	set_frequency_si570(&crtc->si570->dev, adjusted_mode->clock * 1000);
+	/* set pixel clock */
+	ret = clk_set_rate(crtc->pixel_clock, adjusted_mode->clock * 1000);
+	if (ret) {
+		DRM_ERROR("failed to set a pixel clock\n");
+		return ret;
+	}
 
-	/* TODO: delay required for si570 clock, and this will be removed
-	 * with a si570 ccf driver */
-	usleep_range(10000, 10001);
+	diff = clk_get_rate(crtc->pixel_clock) - adjusted_mode->clock * 1000;
+	if (abs(diff) > (adjusted_mode->clock * 1000) / 20)
+		DRM_INFO("actual pixel clock rate(%d) is off by %ld\n",
+				adjusted_mode->clock, diff);
 
 	/* set video timing */
 	vm.hactive = adjusted_mode->hdisplay;
@@ -228,6 +234,8 @@ void xilinx_drm_crtc_destroy(struct drm_crtc *base_crtc)
 
 	drm_crtc_cleanup(base_crtc);
 
+	clk_disable_unprepare(crtc->pixel_clock);
+
 	xilinx_drm_plane_destroy_planes(crtc->plane_manager);
 	xilinx_drm_plane_destroy_private(crtc->plane_manager, crtc->priv_plane);
 	xilinx_drm_plane_remove_manager(crtc->plane_manager);
@@ -415,14 +423,19 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 	/* create extra planes */
 	xilinx_drm_plane_create_planes(crtc->plane_manager, possible_crtcs);
 
-	/* TODO: this will be removed with a si570 ccf driver */
-	crtc->si570 = get_i2c_client_si570();
-	if (!crtc->si570) {
-		DRM_DEBUG_KMS("failed to get si570 clock\n");
+	crtc->pixel_clock = devm_clk_get(drm->dev, 0);
+	if (IS_ERR(crtc->pixel_clock)) {
+		DRM_DEBUG_KMS("failed to get pixel clock\n");
 		ret = -EPROBE_DEFER;
 		goto err_out;
 	}
 
+	ret = clk_prepare_enable(crtc->pixel_clock);
+	if (ret) {
+		DRM_DEBUG_KMS("failed to prepare/enable clock\n");
+		goto err_out;
+	}
+
 	sub_node = of_parse_phandle(drm->dev->of_node, "vtc", 0);
 	if (!sub_node) {
 		DRM_ERROR("failed to get a video timing controller node\n");
-- 
2.9.3

