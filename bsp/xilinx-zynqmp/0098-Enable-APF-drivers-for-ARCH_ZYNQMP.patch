From 68229a7bcd61542e177a52bbe4181a7ad13541fb Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Sun, 25 Sep 2016 21:53:32 +0800
Subject: [PATCH 098/188] Enable APF drivers for ARCH_ZYNQMP

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This is to integrate the commits up to 0abb430a.

Signed-off-by: Yogesh Chobe <yogesh.chobe@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/Kconfig          |   2 +-
 drivers/staging/apf/xilinx-dma-apf.c |  78 +++++++++--
 drivers/staging/apf/xilinx-dma-apf.h |   7 +-
 drivers/staging/apf/xlnk-ioctl.h     |   4 +-
 drivers/staging/apf/xlnk.c           | 260 ++++++++++++++++++++++++++---------
 drivers/staging/apf/xlnk.h           |  20 +++
 6 files changed, 294 insertions(+), 77 deletions(-)

diff --git a/drivers/staging/apf/Kconfig b/drivers/staging/apf/Kconfig
index 1c07925..32708b1 100644
--- a/drivers/staging/apf/Kconfig
+++ b/drivers/staging/apf/Kconfig
@@ -4,7 +4,7 @@
 
 menuconfig XILINX_APF
 	tristate "Xilinx APF Accelerator driver"
-	depends on ARCH_ZYNQ
+	depends on ARCH_ZYNQ || ARCH_ZYNQMP
 	default n
 	help
 	  Select if you want to include APF accelerator driver
diff --git a/drivers/staging/apf/xilinx-dma-apf.c b/drivers/staging/apf/xilinx-dma-apf.c
index b8ddec8..8d5fa28 100644
--- a/drivers/staging/apf/xilinx-dma-apf.c
+++ b/drivers/staging/apf/xilinx-dma-apf.c
@@ -35,6 +35,11 @@
 #include <linux/uaccess.h>
 #include <asm/cacheflush.h>
 #include <linux/sched.h>
+#include <linux/dma-buf.h>
+
+#include <linux/of.h>
+#include <linux/irq.h>
+#include <linux/of_irq.h>
 
 #include "xilinx-dma-apf.h"
 
@@ -46,6 +51,7 @@ static LIST_HEAD(dma_device_list);
 #define DMA_OUT(addr, val)      (iowrite32(val, addr))
 #define DMA_IN(addr)            (ioread32(addr))
 
+
 static int unpin_user_pages(struct scatterlist *sglist, unsigned int cnt);
 /* Driver functions */
 static void xdma_clean_bd(struct xdma_desc_hw *bd)
@@ -768,7 +774,8 @@ int xdma_submit(struct xdma_chan *chan,
 			u32 *appwords_i,
 			unsigned int nappwords_o,
 			unsigned int user_flags,
-			struct xdma_head **dmaheadpp)
+			struct xdma_head **dmaheadpp,
+			struct xlnk_dmabuf_reg *dp)
 {
 	struct xdma_head *dmahead;
 	struct scatterlist *sglist, *sglist_dma;
@@ -779,19 +786,38 @@ int xdma_submit(struct xdma_chan *chan,
 	DEFINE_DMA_ATTRS(attrs);
 
 
-	dmahead = kmalloc(sizeof(struct xdma_head), GFP_KERNEL);
+	dmahead = kzalloc(sizeof(struct xdma_head), GFP_KERNEL);
 	if (!dmahead)
 		return -ENOMEM;
 
-	memset(dmahead, 0, sizeof(struct xdma_head));
-
 	dmahead->chan = chan;
 	dmahead->userbuf = userbuf;
 	dmahead->size = size;
 	dmahead->dmadir = chan->direction;
 	dmahead->userflag = user_flags;
 	dmadir = chan->direction;
-	if (user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS) {
+	if (dp) {
+		if (!dp->is_mapped) {
+			dp->dbuf_attach = dma_buf_attach(dp->dbuf, chan->dev);
+			dp->dbuf_sg_table = dma_buf_map_attachment(
+				dp->dbuf_attach, chan->direction);
+
+			if (IS_ERR_OR_NULL(dp->dbuf_sg_table)) {
+				pr_err("%s unable to map sg_table for dbuf: %d\n",
+					__func__, (int)dp->dbuf_sg_table);
+				return -EINVAL;
+			}
+			dp->is_mapped = 1;
+		}
+
+		sglist_dma = dp->dbuf_sg_table->sgl;
+		sglist = dp->dbuf_sg_table->sgl;
+		sgcnt = dp->dbuf_sg_table->nents;
+		sgcnt_dma = dp->dbuf_sg_table->nents;
+
+		dmahead->userbuf = (void *)dp->dbuf_sg_table->sgl->dma_address;
+		dmahead->is_dmabuf = 1;
+	} else if (user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS) {
 		/*
 		 * convert physically contiguous buffer into
 		 * minimal length sg list
@@ -804,7 +830,6 @@ int xdma_submit(struct xdma_chan *chan,
 		sgcnt_dma = sgcnt;
 		if (user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE) {
 			kaddr = phys_to_virt((phys_addr_t)userbuf);
-			dmac_map_area(kaddr, size, DMA_TO_DEVICE);
 			if (dmadir == DMA_TO_DEVICE) {
 				outer_clean_range((phys_addr_t)userbuf,
 						(u32)userbuf + size);
@@ -884,7 +909,9 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 	} else
 		wait_for_completion(&dmahead->cmp);
 
-	if (!(user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS)) {
+	if (dmahead->is_dmabuf) {
+		dmahead->is_dmabuf = 0;
+	} else if (!(user_flags & CF_FLAG_PHYSICALLY_CONTIGUOUS)) {
 		if (!(user_flags & CF_FLAG_CACHE_FLUSH_INVALIDATE))
 			dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
 
@@ -902,7 +929,6 @@ int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags)
 				outer_inv_range((phys_addr_t)paddr,
 						(u32)paddr + size);
 			}
-			dmac_unmap_area(kaddr, size, DMA_FROM_DEVICE);
 		}
 	}
 	return 0;
@@ -939,6 +965,40 @@ int xdma_setconfig(struct xdma_chan *chan,
 }
 EXPORT_SYMBOL(xdma_setconfig);
 
+static struct of_device_id gic_match[] = {
+	{ .compatible = "arm,cortex-a9-gic", },
+	{ .compatible = "arm,cortex-a15-gic", },
+	{ },
+};
+
+static struct device_node *gic_node;
+
+unsigned int xlate_irq(unsigned int hwirq)
+{
+	struct of_phandle_args irq_data;
+	unsigned int irq;
+
+	if (!gic_node)
+		gic_node = of_find_matching_node(NULL, gic_match);
+
+	if (WARN_ON(!gic_node))
+		return hwirq;
+
+	irq_data.np = gic_node;
+	irq_data.args_count = 3;
+	irq_data.args[0] = 0;
+	irq_data.args[1] = hwirq - 32; /* GIC SPI offset */
+	irq_data.args[2] = IRQ_TYPE_LEVEL_HIGH;
+
+	irq = irq_create_of_mapping(&irq_data);
+	if (WARN_ON(!irq))
+		irq = hwirq;
+
+	pr_info("%s: hwirq %d, irq %d\n", __func__, hwirq, irq);
+
+	return irq;
+}
+
 /* Brute-force probing for xilinx DMA
  */
 static int xdma_probe(struct platform_device *pdev)
@@ -1015,7 +1075,7 @@ static int xdma_probe(struct platform_device *pdev)
 		xdev->chan[chan->id] = chan;
 
 		/* The IRQ resource */
-		chan->irq = dma_config->channel_config[i].irq;
+		chan->irq = xlate_irq(dma_config->channel_config[i].irq);
 		if (chan->irq <= 0) {
 			pr_err("get_resource for IRQ for dev %d failed\n",
 				pdev->id);
diff --git a/drivers/staging/apf/xilinx-dma-apf.h b/drivers/staging/apf/xilinx-dma-apf.h
index 39d3da6..1ce2e2d 100644
--- a/drivers/staging/apf/xilinx-dma-apf.h
+++ b/drivers/staging/apf/xilinx-dma-apf.h
@@ -22,6 +22,9 @@
 /* dma stuff */
 #include <linux/dma-mapping.h>
 
+/* xlnk structures */
+#include "xlnk.h"
+
 #define XDMA_IOC_MAGIC 'X'
 #define XDMA_IOCRESET		_IO(XDMA_IOC_MAGIC, 0)
 #define XDMA_IOCREQUEST		_IOWR(XDMA_IOC_MAGIC, 1, unsigned long)
@@ -186,6 +189,7 @@ struct xdma_head {
 	u32 appwords_o[XDMA_MAX_APPWORDS];
 	unsigned int userflag;
 	u32 last_bd_index;
+	u32 is_dmabuf;
 };
 
 struct xdma_chan *xdma_request_channel(char *name);
@@ -198,7 +202,8 @@ int xdma_submit(struct xdma_chan *chan,
 		u32 *appwords_i,
 		unsigned int nappwords_o,
 		unsigned int user_flags,
-		struct xdma_head **dmaheadpp);
+		struct xdma_head **dmaheadpp,
+		struct xlnk_dmabuf_reg *dp);
 int xdma_wait(struct xdma_head *dmahead, unsigned int user_flags);
 int xdma_getconfig(struct xdma_chan *chan,
 		   unsigned char *irq_thresh,
diff --git a/drivers/staging/apf/xlnk-ioctl.h b/drivers/staging/apf/xlnk-ioctl.h
index 685570e..8aa08b4 100644
--- a/drivers/staging/apf/xlnk-ioctl.h
+++ b/drivers/staging/apf/xlnk-ioctl.h
@@ -9,8 +9,8 @@
 
 #define XLNK_IOCALLOCBUF	_IOWR(XLNK_IOC_MAGIC, 2, unsigned long)
 #define XLNK_IOCFREEBUF		_IOWR(XLNK_IOC_MAGIC, 3, unsigned long)
-
-
+#define XLNK_IOCADDDMABUF	_IOWR(XLNK_IOC_MAGIC, 4, unsigned long)
+#define XLNK_IOCCLEARDMABUF	_IOWR(XLNK_IOC_MAGIC, 5, unsigned long)
 
 #define XLNK_IOCDMAREQUEST	_IOWR(XLNK_IOC_MAGIC, 7, unsigned long)
 #define XLNK_IOCDMASUBMIT	_IOWR(XLNK_IOC_MAGIC, 8, unsigned long)
diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index 1add41a..a471afd 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -25,6 +25,7 @@
 #include <linux/mm.h>
 #include <asm/cacheflush.h>
 #include <linux/io.h>
+#include <linux/dma-buf.h>
 
 #include <linux/string.h>
 
@@ -34,6 +35,18 @@
 #include <linux/completion.h>
 #include <linux/wait.h>
 
+#include <linux/device.h>
+#include <linux/init.h>
+#include <linux/cdev.h>
+
+#include <linux/sched.h>
+#include <linux/pagemap.h>
+#include <linux/errno.h>	/* error codes */
+#include <linux/dma-mapping.h>  /* dma */
+#include <linux/clk.h>
+#include <linux/of.h>
+#include <linux/list.h>
+
 #include "xlnk-ioctl.h"
 #include "xlnk.h"
 
@@ -51,21 +64,6 @@ static void xdma_if_device_release(struct device *op)
 
 #endif
 
-#ifdef MODULE
-#include <linux/module.h>
-#endif
-
-#include <linux/device.h>
-#include <linux/init.h>
-#include <linux/moduleparam.h>
-#include <linux/cdev.h>
-
-#include <linux/sched.h>
-#include <linux/mm.h>	   /* everything */
-#include <linux/pagemap.h>
-#include <linux/errno.h>	/* error codes */
-#include <linux/dma-mapping.h>  /* dma */
-
 #define DRIVER_NAME  "xlnk"
 #define DRIVER_VERSION  "0.2"
 
@@ -106,6 +104,7 @@ static void xlnk_vma_close(struct vm_area_struct *vma);
 
 static int xlnk_init_bufpool(void);
 
+LIST_HEAD(xlnk_dmabuf_list);
 
 static int xlnk_shutdown(unsigned long buf);
 static int xlnk_recover_resource(unsigned long buf);
@@ -188,8 +187,8 @@ static void xlnk_devpacks_free(unsigned long base)
 	devpack = xlnk_devpacks_find(base);
 	if (devpack) {
 		platform_device_unregister(&devpack->pdev);
-		kfree(devpack);
 		xlnk_devpacks_delete(devpack);
+		kfree(devpack);
 	}
 }
 
@@ -202,15 +201,53 @@ static void xlnk_devpacks_free_all(void)
 		devpack = xlnk_devpacks[i];
 		if (devpack) {
 			platform_device_unregister(&devpack->pdev);
-			kfree(devpack);
 			xlnk_devpacks_delete(devpack);
+			kfree(devpack);
 		}
 	}
 }
 
+/**
+ * struct xlnk_data - data specific to xlnk
+ * @numxclks:	number of clocks available
+ * @clks:	pointer to array of clocks
+ *
+ * This struct should contain all the data specific to xlnk
+ */
+struct xlnk_data {
+	int numxclks;
+	struct clk **clks;
+};
+
+/**
+ * xlnk_clk_control() - turn all xlnk clocks on or off
+ * @turn_on:	false - turn off (disable), true - turn on (enable)
+ *
+ * This function obtains a list of available clocks from the driver data
+ * and enables or disables all of them based on the value of turn_on
+ */
+static void xlnk_clk_control(bool turn_on)
+{
+	struct xlnk_data *xlnk_dat;
+	int i;
+
+	xlnk_dat = platform_get_drvdata(xlnk_pdev);
+	for (i = 0; i < xlnk_dat->numxclks; i++) {
+		if (IS_ERR(xlnk_dat->clks[i]))
+			continue;
+		if (turn_on)
+			clk_prepare_enable(xlnk_dat->clks[i]);
+		else
+			clk_disable_unprepare(xlnk_dat->clks[i]);
+	}
+}
+
 static int xlnk_probe(struct platform_device *pdev)
 {
-	int err;
+	int err, i;
+	const char *clkname;
+	struct clk **clks;
+	struct xlnk_data *xlnk_dat;
 	dev_t dev = 0;
 
 	xlnk_dev_buf = NULL;
@@ -221,7 +258,8 @@ static int xlnk_probe(struct platform_device *pdev)
 	/* use 2.6 device model */
 	err = alloc_chrdev_region(&dev, 0, 1, driver_name);
 	if (err) {
-		pr_err("%s: Can't get major %d\n", __func__, driver_major);
+		dev_err(&pdev->dev, "%s: Can't get major %d\n",
+			 __func__, driver_major);
 		goto err1;
 	}
 
@@ -232,35 +270,67 @@ static int xlnk_probe(struct platform_device *pdev)
 	err = cdev_add(&xlnk_cdev, dev, 1);
 
 	if (err) {
-		pr_err("%s: Failed to add XLNK device\n", __func__);
+		dev_err(&pdev->dev, "%s: Failed to add XLNK device\n",
+			 __func__);
 		goto err3;
 	}
 
 	/* udev support */
 	xlnk_class = class_create(THIS_MODULE, "xlnk");
 	if (IS_ERR(xlnk_class)) {
-		pr_err("%s: Error creating xlnk class\n", __func__);
+		dev_err(xlnk_dev, "%s: Error creating xlnk class\n", __func__);
 		goto err3;
 	}
 
 	driver_major = MAJOR(dev);
 
-	pr_info("xlnk major %d\n", driver_major);
+	dev_info(&pdev->dev, "Major %d\n", driver_major);
 
 	device_create(xlnk_class, NULL, MKDEV(driver_major, 0),
 			  NULL, "xlnk");
 
 	xlnk_init_bufpool();
 
-	pr_info("%s driver loaded\n", DRIVER_NAME);
+	dev_info(&pdev->dev, "%s driver loaded\n", DRIVER_NAME);
 
 	xlnk_pdev = pdev;
 	xlnk_dev = &pdev->dev;
+	xlnk_dat = devm_kzalloc(xlnk_dev,
+				sizeof(*xlnk_dat),
+				GFP_KERNEL);
+	if (!xlnk_dat)
+		return -ENOMEM;
 
+	xlnk_dat->numxclks = of_property_count_strings(xlnk_dev->of_node,
+							"clock-names");
+	if (xlnk_dat->numxclks > 0) {
+		clks = devm_kmalloc_array(xlnk_dev,
+					xlnk_dat->numxclks,
+					sizeof(struct clk *),
+					GFP_KERNEL);
+		if (!clks)
+			return -ENOMEM;
+
+		xlnk_dat->clks = clks;
+		for (i = 0; i < xlnk_dat->numxclks; i++) {
+			of_property_read_string_index(xlnk_dev->of_node,
+						"clock-names",
+						i,
+						&clkname);
+			if (clkname) {
+				clks[i] = devm_clk_get(xlnk_dev, clkname);
+				if (IS_ERR(clks[i]))
+					dev_warn(xlnk_dev,
+						"Unable to get clk\n");
+			} else
+				dev_warn(xlnk_dev, "Unable to get clock\n");
+		}
+	}
+	platform_set_drvdata(xlnk_pdev, xlnk_dat);
 	if (xlnk_pdev)
-		pr_info("xlnk_pdev is not null\n");
+		dev_info(&pdev->dev, "xlnk_pdev is not null\n");
 	else
-		pr_info("xlnk_pdev is null\n");
+		dev_info(&pdev->dev, "xlnk_pdev is null\n");
 
 	xlnk_devpacks_init();
 
@@ -306,8 +376,8 @@ static int xlnk_allocbuf(unsigned int len, unsigned int cacheable)
 	xlnk_bufcacheable[id] = cacheable;
 
 	if (!xlnk_bufpool[id]) {
-		pr_err("%s: dma_alloc_coherent of %d byte buffer failed\n",
-		       __func__, len);
+		dev_err(xlnk_dev, "%s: dma_alloc_coherent of %d byte buffer failed\n",
+			 __func__, len);
 		return -ENOMEM;
 	}
 
@@ -322,7 +392,7 @@ static int xlnk_init_bufpool(void)
 	*((char *)xlnk_dev_buf) = '\0';
 
 	if (!xlnk_dev_buf) {
-		pr_err("%s: malloc failed\n", __func__);
+		dev_err(xlnk_dev, "%s: malloc failed\n", __func__);
 		return -ENOMEM;
 	}
 
@@ -363,11 +433,17 @@ static int xlnk_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct of_device_id xlnk_match[] = {
+	{ .compatible = "xlnx,xlnk-1.0", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, xlnk_match);
 
 static struct platform_driver xlnk_driver = {
 	.driver = {
-		   .name = DRIVER_NAME,
-		   },
+		.name = DRIVER_NAME,
+		.of_match_table = xlnk_match,
+	},
 	.probe = xlnk_probe,
 	.remove = xlnk_remove,
 	.suspend = XLNK_SUSPEND,
@@ -376,18 +452,6 @@ static struct platform_driver xlnk_driver = {
 
 static u64 dma_mask = 0xFFFFFFFFUL;
 
-static struct platform_device xlnk_device = {
-	.name = "xlnk",
-	.id = 0,
-	.dev = {
-		.platform_data = NULL,
-		.dma_mask = &dma_mask,
-		.coherent_dma_mask = 0xFFFFFFFF,
-	},
-	.resource = NULL,
-	.num_resources = 0,
-};
-
 /*
  * This function is called when an application opens handle to the
  * bridge driver.
@@ -398,6 +462,7 @@ static int xlnk_open(struct inode *ip, struct file *filp)
 
 	if ((filp->f_flags & O_ACCMODE) == O_WRONLY)
 		xlnk_dev_size = 0;
+	xlnk_clk_control(true);
 
 	return status;
 }
@@ -453,6 +518,7 @@ static ssize_t xlnk_write(struct file *filp, const char __user *buf,
  */
 static int xlnk_release(struct inode *ip, struct file *filp)
 {
+	xlnk_clk_control(false);
 	return 0;
 }
 
@@ -751,6 +817,72 @@ static int xlnk_freebuf_ioctl(struct file *filp, unsigned int code,
 	return xlnk_freebuf(id);
 }
 
+static int xlnk_adddmabuf_ioctl(struct file *filp, unsigned int code,
+			unsigned long args)
+{
+	struct dmabuf_args db_args;
+	struct xlnk_dmabuf_reg *db;
+	int status;
+
+	status = copy_from_user(&db_args, (void __user *)args,
+			sizeof(struct dmabuf_args));
+
+	if (status)
+		return -ENOMEM;
+
+	dev_dbg(xlnk_dev, "Registering dmabuf fd %d for virtual address %p\n",
+		db_args.dmabuf_fd, db_args.user_vaddr);
+
+	db = kzalloc(sizeof(struct xlnk_dmabuf_reg), GFP_KERNEL);
+	if (!db)
+		return -ENOMEM;
+
+	db->dmabuf_fd = db_args.dmabuf_fd;
+	db->user_vaddr = db_args.user_vaddr;
+
+	db->dbuf = dma_buf_get(db->dmabuf_fd);
+	if (IS_ERR_OR_NULL(db->dbuf)) {
+		dev_err(xlnk_dev, "%s Invalid dmabuf fd %d\n",
+			 __func__, db->dmabuf_fd);
+		return -EINVAL;
+	}
+	db->is_mapped = 0;
+
+	INIT_LIST_HEAD(&db->list);
+	list_add_tail(&db->list, &xlnk_dmabuf_list);
+
+	return 0;
+}
+
+static int xlnk_cleardmabuf_ioctl(struct file *filp, unsigned int code,
+				unsigned long args)
+{
+	struct dmabuf_args db_args;
+	struct xlnk_dmabuf_reg *dp, *dp_temp;
+	int status;
+
+	status = copy_from_user(&db_args, (void __user *)args,
+			sizeof(struct dmabuf_args));
+
+	if (status)
+		return -ENOMEM;
+
+	list_for_each_entry_safe(dp, dp_temp, &xlnk_dmabuf_list, list) {
+		if (dp->user_vaddr == db_args.user_vaddr) {
+			if (dp->is_mapped) {
+				dma_buf_unmap_attachment(dp->dbuf_attach,
+					dp->dbuf_sg_table, dp->dma_direction);
+				dma_buf_detach(dp->dbuf, dp->dbuf_attach);
+			}
+			dma_buf_put(dp->dbuf);
+			list_del(&dp->list);
+			kfree(dp);
+			return 0;
+		}
+	}
+	return 1;
+}
+
 static int xlnk_dmarequest_ioctl(struct file *filp, unsigned int code,
 				 unsigned long args)
 {
@@ -801,6 +933,7 @@ static int xlnk_dmasubmit_ioctl(struct file *filp, unsigned int code,
 #ifdef CONFIG_XILINX_DMA_APF
 	union xlnk_args temp_args;
 	struct xdma_head *dmahead;
+	struct xlnk_dmabuf_reg *dp, *cp;
 	int status = -1;
 
 	status = copy_from_user(&temp_args, (void __user *)args,
@@ -812,6 +945,15 @@ static int xlnk_dmasubmit_ioctl(struct file *filp, unsigned int code,
 	if (!temp_args.dmasubmit.dmachan)
 		return -ENODEV;
 
+	cp = NULL;
+
+	list_for_each_entry(dp, &xlnk_dmabuf_list, list) {
+		if (dp->user_vaddr == temp_args.dmasubmit.buf) {
+			cp = dp;
+			break;
+		}
+	}
+
 	status = xdma_submit((struct xdma_chan *)temp_args.dmasubmit.dmachan,
 						temp_args.dmasubmit.buf,
 						temp_args.dmasubmit.len,
@@ -819,7 +961,8 @@ static int xlnk_dmasubmit_ioctl(struct file *filp, unsigned int code,
 						temp_args.dmasubmit.appwords_i,
 						temp_args.dmasubmit.nappwords_o,
 						temp_args.dmasubmit.flag,
-						&dmahead);
+						&dmahead,
+						cp);
 
 	if (!status) {
 		temp_args.dmasubmit.dmahandle = (u32)dmahead;
@@ -999,13 +1142,14 @@ static int xlnk_cachecontrol_ioctl(struct file *filp, unsigned int code,
 						sizeof(union xlnk_args));
 
 	if (status) {
-		pr_err("Error in copy_from_user. status = %d\n", status);
+		dev_err(xlnk_dev, "Error in copy_from_user. status = %d\n",
+			status);
 		return -ENOMEM;
 	}
 
 	if (!(temp_args.cachecontrol.action == 0 ||
 		  temp_args.cachecontrol.action == 1)) {
-		pr_err("Illegal action specified to cachecontrol_ioctl: %d\n",
+		dev_err(xlnk_dev, "Illegal action specified to cachecontrol_ioctl: %d\n",
 		       temp_args.cachecontrol.action);
 		return -EINVAL;
 	}
@@ -1016,14 +1160,12 @@ static int xlnk_cachecontrol_ioctl(struct file *filp, unsigned int code,
 
 	if (temp_args.cachecontrol.action == 0) {
 		/* flush cache */
-		dmac_map_area(kaddr, size, DMA_TO_DEVICE);
 		outer_clean_range((unsigned int)paddr,
 				  (unsigned int)(paddr + size));
 	} else {
 		/* invalidate cache */
 		outer_inv_range((unsigned int)paddr,
 				(unsigned int)(paddr + size));
-		dmac_unmap_area(kaddr, size, DMA_FROM_DEVICE);
 	}
 
 	return 0;
@@ -1049,6 +1191,12 @@ static long xlnk_ioctl(struct file *filp, unsigned int code,
 	case XLNK_IOCFREEBUF:
 		status = xlnk_freebuf_ioctl(filp, code, args);
 		break;
+	case XLNK_IOCADDDMABUF:
+		status = xlnk_adddmabuf_ioctl(filp, code, args);
+		break;
+	case XLNK_IOCCLEARDMABUF:
+		status = xlnk_cleardmabuf_ioctl(filp, code, args);
+		break;
 	case XLNK_IOCDMAREQUEST:
 		status = xlnk_dmarequest_ioctl(filp, code, args);
 		break;
@@ -1153,23 +1301,7 @@ static int xlnk_recover_resource(unsigned long buf)
 	return 0;
 }
 
-static int __init xlnk_init(void)
-{
-	pr_info("%s driver initializing\n", DRIVER_NAME);
-
-	platform_device_register(&xlnk_device);
-
-	return platform_driver_register(&xlnk_driver);
-}
-
-static void __exit xlnk_exit(void)
-{
-	platform_driver_unregister(&xlnk_driver);
-}
-
-/* APF driver initialization and de-initialization functions */
-module_init(xlnk_init);
-module_exit(xlnk_exit);
+module_platform_driver(xlnk_driver);
 
 MODULE_DESCRIPTION("Xilinx APF driver");
 MODULE_LICENSE("GPL");
diff --git a/drivers/staging/apf/xlnk.h b/drivers/staging/apf/xlnk.h
index 6059cf0..e99d4c7 100644
--- a/drivers/staging/apf/xlnk.h
+++ b/drivers/staging/apf/xlnk.h
@@ -21,6 +21,22 @@ enum xlnk_dma_direction {
 	XLNK_DMA_NONE = 3,
 };
 
+struct dmabuf_args {
+	int dmabuf_fd;
+	void *user_vaddr;
+};
+
+struct xlnk_dmabuf_reg {
+	int dmabuf_fd;
+	void *user_vaddr;
+	struct dma_buf *dbuf;
+	struct dma_buf_attachment *dbuf_attach;
+	struct sg_table *dbuf_sg_table;
+	int is_mapped;
+	int dma_direction;
+	struct list_head list;
+};
+
 union xlnk_args {
 	struct {
 		unsigned int len;
@@ -33,6 +49,10 @@ union xlnk_args {
 		void *buf;
 	} freebuf;
 	struct {
+		int dmabuf_fd;
+		void *user_addr;
+	} dmabuf;
+	struct {
 		char name[64]; /* max length of 64 */
 		u32 dmachan; /* return value */
 		unsigned int bd_space_phys_addr;/*for bd chain used by dmachan*/
-- 
2.0.2

