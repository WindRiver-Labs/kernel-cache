From 81c7db33079dfb7209ba58770a423b542aac8a0d Mon Sep 17 00:00:00 2001
From: S Mohan <s.mohan@xilinx.com>
Date: Thu, 20 Feb 2014 17:04:42 -0800
Subject: [PATCH 092/188] APF: Check 'copy_to_user' return value

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Check the return value of 'copy_to_user' and if it is
non-zero, return -EFAULT
This is to fix build warnings reported by kbuild test robot
drivers/staging/apf/xlnk.c: In function 'xlnk_dmarequest_ioctl':
	drivers/staging/apf/xlnk.c:838:14:
	warning: ignoring return value of 'copy_to_user',
	declared with attribute warn_unused_result [-Wunused-result]
drivers/staging/apf/xlnk.c: In function 'xlnk_dmasubmit_ioctl':
	drivers/staging/apf/xlnk.c:883:15:
	warning: ignoring return value of 'copy_to_user',
	declared with attribute warn_unused_result [-Wunused-result]
drivers/staging/apf/xlnk.c: In function 'xlnk_dmawait_ioctl':
	drivers/staging/apf/xlnk.c:915:15:
	warning: ignoring return value of 'copy_to_user',
	declared with attribute warn_unused_result [-Wunused-result]
drivers/staging/apf/xlnk.c: In function 'xlnk_dump_events':
	drivers/staging/apf/xlnk.c:1280:14:
	warning: ignoring return value of 'copy_to_user',
	declared with attribute warn_unused_result [-Wunused-result]

Reported-by: kbuild test robot <fengguang.wu@intel.com>
Signed-off-by: S Mohan <s.mohan@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 418f210872f9ca6e63b44f0b5db7a74a2d51a7cb)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/staging/apf/xlnk.c | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/apf/xlnk.c b/drivers/staging/apf/xlnk.c
index bf9fb36..5de6566 100644
--- a/drivers/staging/apf/xlnk.c
+++ b/drivers/staging/apf/xlnk.c
@@ -783,7 +783,9 @@ static int xlnk_dmarequest_ioctl(struct file *filp, unsigned int code,
 	temp_args.dmarequest.bd_space_phys_addr = chan->bd_phys_addr;
 	temp_args.dmarequest.bd_space_size = chan->bd_chain_size;
 
-	copy_to_user((void __user *)args, &temp_args, sizeof(union xlnk_args));
+	if (copy_to_user((void __user *)args, &temp_args,
+			sizeof(union xlnk_args)))
+		return -EFAULT;
 
 	return 0;
 
@@ -826,8 +828,9 @@ static int xlnk_dmasubmit_ioctl(struct file *filp, unsigned int code,
 		temp_args.dmasubmit.dmahandle = (u32)dmahead;
 		temp_args.dmasubmit.last_bd_index =
 					(u32)dmahead->last_bd_index;
-		copy_to_user((void __user *)args, &temp_args,
-				sizeof(union xlnk_args));
+		if (copy_to_user((void __user *)args, &temp_args,
+				sizeof(union xlnk_args)))
+			return -EFAULT;
 		return 0;
 	}
 #endif
@@ -857,8 +860,9 @@ static int xlnk_dmawait_ioctl(struct file *filp, unsigned int code,
 		memcpy(temp_args.dmawait.appwords, dmahead->appwords_o,
 			   dmahead->nappwords_o * sizeof(u32));
 
-		copy_to_user((void __user *)args, &temp_args,
-				sizeof(union xlnk_args));
+		if (copy_to_user((void __user *)args, &temp_args,
+				sizeof(union xlnk_args)))
+			return -EFAULT;
 	}
 	kfree(dmahead);
 
@@ -1213,8 +1217,9 @@ static int xlnk_dump_events(unsigned long buf)
 	 * xlnk_get_event_size() and ignore the rest to avoid
 	 * buffer overflow issue
 	 */
-	copy_to_user((void __user *)buf, xlnk_et,
-		xlnk_et_numbers_to_dump * sizeof(struct event_tracer));
+	if (copy_to_user((void __user *)buf, xlnk_et,
+		xlnk_et_numbers_to_dump * sizeof(struct event_tracer)))
+		return -EFAULT;
 
 	/* clear up event pool so it's ready to use again */
 	xlnk_et_index = 0;
-- 
2.0.2

