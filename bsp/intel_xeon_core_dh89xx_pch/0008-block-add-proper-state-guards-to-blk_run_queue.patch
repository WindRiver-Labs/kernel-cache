From b8da9aa9c5093d6a3bb5cce59b6aebbb559baaee Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Tue, 6 Dec 2011 13:22:46 +0800
Subject: [PATCH 1/2] block: add proper state guards to __blk_run_queue

blk_cleanup_queue() calls elevator_exit() and after this, the state
of the queue is DEAD. We can't touch the elevator without oopsing.
__blk_run_queue() must check for this state.

This was reported as causing an oops:

BUG: unable to handle kernel paging request at ffffffffffffffff
IP: [<ffffffffffffffff>] 0xffffffffffffffff
PGD 1796067 PUD 1797067 PMD 0
Oops: 0010 [#1] PREEMPT SMP
LTT NESTING LEVEL : 0
last sysfs file:
CPU 0
Modules linked in:

Pid: 4, comm: ksoftirqd/0 Not tainted 2.6.34.10-WR4.3.0.0_standard #1 To be filled by O.E.M./SandyBridge Platform
RIP: 0010:[<ffffffffffffffff>]  [<ffffffffffffffff>] 0xffffffffffffffff
RSP: 0018:ffff880004003d10  EFLAGS: 00010086
RAX: 0000000000000001 RBX: ffff880068498000 RCX: 0000000000000000
RDX: ffffffffffffffff RSI: 0000000000000286 RDI: ffff880068498000
RBP: ffff880004003d18 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000286
R13: ffff880068498000 R14: ffff880004003d88 R15: ffff880068460000
FS:  0000000000000000(0000) GS:ffff880004000000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
CR2: ffffffffffffffff CR3: 0000000001794000 CR4: 00000000000406b0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
Process ksoftirqd/0 (pid: 4, threadinfo ffff88007ae58000, task ffff88007ae39350)
Stack:
 ffffffff812dd0db ffff880004003d38 ffffffff812e4382 ffff880068498000
<0> ffff880068498000 ffff880004003d58 ffffffff812e458b ffff88007d40f000
<0> ffff880004003d88 ffff880004003dc8 ffffffff813a416b ffff880004003d78
Call Trace:
 <IRQ>
 [<ffffffff812dd0db>] ? elv_queue_empty+0x2b/0x30
 [<ffffffff812e4382>] __blk_run_queue+0x22/0x150
 [<ffffffff812e458b>] blk_run_queue+0x2b/0x50
 [<ffffffff813a416b>] scsi_run_queue+0xdb/0x360
 [<ffffffff81390822>] ? put_device+0x12/0x20
 [<ffffffff813a510d>] scsi_next_command+0x3d/0x60
 [<ffffffff813a5cde>] scsi_io_completion+0x35e/0x580
 [<ffffffff8156f2a2>] ? _raw_spin_unlock_irqrestore+0x12/0x40
 [<ffffffff8139eda0>] scsi_finish_command+0xb0/0xe0
 [<ffffffff813a6028>] scsi_softirq_done+0x118/0x140
 [<ffffffff812ea495>] blk_done_softirq+0x75/0x90
 [<ffffffff8104bf2c>] __do_softirq+0xec/0x280

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 block/blk-core.c |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/block/blk-core.c b/block/blk-core.c
index dd9795d..732a438 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -400,6 +400,9 @@ void __blk_run_queue(struct request_queue *q)
 	if (unlikely(blk_queue_stopped(q)))
 		return;
 
+	if (test_bit(QUEUE_FLAG_DEAD, &q->queue_flags))
+		return;
+
 	if (elv_queue_empty(q))
 		return;
 
-- 
1.7.4.1

