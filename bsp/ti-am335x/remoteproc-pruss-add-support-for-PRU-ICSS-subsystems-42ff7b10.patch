From ed5313fe610f05637727328fc59de6264723b65f Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 6 Feb 2017 23:12:53 -0600
Subject: [PATCH 578/895] remoteproc/pruss: add support for PRU-ICSS
 subsystems on 66AK2G SoC

The 66AK2G SoC supports two PRU-ICSS instances, named PRUSS0 and PRUSS1,
each of which has two PRU processor cores. The two PRU-ICSS instances
are identical to each other with few minor SoC integration differences,
and are very similar to the PRU-ICSS1 of AM57xx/AM43xx. The Shared Data
RAM size is larger and the number of interrupts coming into MPU INTC
is like the instances on AM437x. There are also few other differences
attributing to integration in Keystone architecture (like no SYSCFG
register or PRCM handshake protocols). Other IP level differences
include different constant table, differences in system event interrupt
input sources etc. They also do not have a programmable module reset
line like those present on AM33xx/AM43xx SoCs. The modules are reset
just like any other IP with the SoC's global cold/warm resets.

The existing PRUSS platform drivers have been enhanced to support
these 66AK2G PRU-ICSS instances through new 66AK2G specific compatibles
for properly probing and booting all the different PRU cores in each
PRU-ICSS processor subsystem. A build dependency with ARCH_KEYSTONE is
added to enable the driver to be built in K2G-only configuration. The
OMAP Mailbox IP is not present on 66AK2G SoC, so the build dependency
has to be adjusted accordingly. The virtio rpmsg stack is enabled
using PRU system events for interrupts (possible to implement using
Keystone specific IPCGR registers as well) for uniformity across
all platforms.

The names for the firmware images are fixed for each PRU core and is
expected to be as follows for regular usecases:
    PRU-ICSS0 PRU0 Core: k2g-pru0_0-fw
    PRU-ICSS0 PRU1 Core: k2g-pru0_1-fw
    PRU-ICSS1 PRU0 Core: k2g-pru1_0-fw
    PRU-ICSS1 PRU1 Core: k2g-pru1_1-fw

Signed-off-by: Andrew F. Davis <afd@ti.com>
Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit eea82a17f94292f8ff3d88a003c48ad4e87f81c1)
---
 .../bindings/remoteproc/ti,pruss-remoteproc.txt    |   25 ++++++++++-
 drivers/remoteproc/Kconfig                         |    5 +-
 drivers/remoteproc/pru_rproc.c                     |   45 ++++++++++++++++++++
 drivers/remoteproc/pruss.c                         |   35 +++++++++++++++
 drivers/remoteproc/pruss_intc.c                    |    8 ++++
 drivers/remoteproc/pruss_soc_bus.c                 |   25 ++++++++++-
 6 files changed, 135 insertions(+), 8 deletions(-)

diff --git a/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt b/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
index 05e30bf..65991fb 100644
--- a/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
+++ b/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
@@ -46,7 +46,9 @@ Required Properties:
                        "ti,am3356-pruss-soc-bus" for AM335x family of SoCs
                        "ti,am4376-pruss-soc-bus" for AM437x family of SoCs
                        "ti,am5728-pruss-soc-bus" for AM57xx family of SoCs
+                       "ti,k2g-pruss-soc-bus" for 66AK2G family of SoCs
 - ti,hwmods      : name of the hwmod associated with the PRUSS instance
+                   (not applicable for 66AK2G SoCs)
 - reg            : base address and size of the PRUSS CFG sub-module containing
                    the SoC interconnect configuration register
 - #address-cells : should be 1
@@ -55,6 +57,19 @@ Required Properties:
                    same address view as the parent, so should be mentioned without
                    any value for the property
 
+Optional properties:
+--------------------
+The following properties are _required_ only for Keystone 2 66AK2G SoCs. They
+are not applicable to OMAP-architecture based SoCs.
+
+- power-domains  : Should contain a phandle to a PM domain provider node. This
+                   property is as per the binding,
+                       Documentation/devicetree/bindings/soc/ti/sci-pm-domain.txt
+
+- ti,sci-id      : Should contain the SCI device id to identify the specific
+                   device. The id values are defined in the dt include file,
+                       include/dt-bindings/genpd/k2g.h
+
 
 PRU-ICSS Parent Node
 =====================
@@ -69,6 +84,7 @@ Required Properties:
                        "ti,am3356-pruss" for AM335x family of SoCs
                        "ti,am4376-pruss" for AM437x family of SoCs
                        "ti,am5728-pruss" for AM57xx family of SoCs
+                       "ti,k2g-pruss" for 66AK2G family of SoCs
 - reg            : base address and size for each of the sub-modules as
                    mentioned in reg-names, and in the same order as the
                    reg-names
@@ -105,6 +121,7 @@ Required Properties:
                              "ti,am3356-pruss-intc" for AM335x family of SoCs
                              "ti,am4376-pruss-intc" for AM437x family of SoCs
                              "ti,am5728-pruss-intc" for AM57xx family of SoCs
+                             "ti,k2g-pruss-intc" for 66AK2G family of SoCs
 - reg                  : base address and size for the PRUSS INTC sub-module
 - reg-names            : should contain the string "intc"
 - interrupts           : all the interrupts generated towards the main host
@@ -116,8 +133,8 @@ Required Properties:
                          host interrupt number,
                              "host2", "host3", "host4", "host5", "host6",
                              "host7", "host8" or "host9"
-                         NOTE: AM437x SoCs do not have "host7" interrupt
-                               connected to MPU
+                         NOTE: AM437x and 66AK2G SoCs do not have "host7"
+                               interrupt connected to MPU
 - interrupt-controller : mark this node as an interrupt controller
 - #interrupt-cells     : should be 1. Client users shall use the PRU System
                          event number (the interrupt source that the client
@@ -137,6 +154,7 @@ Required Properties:
                        "ti,am3356-pru" for AM335x family of SoCs
                        "ti,am4376-pru" for AM437x family of SoCs
                        "ti,am5728-pru" for AM57xx family of SoCs
+                       "ti,k2g-pru" for 66AK2G family of SoCs
 - reg            : base address and size for each of the 3 sub-module address
                    spaces as mentioned in reg-names, and in the same order as
                    the reg-names
@@ -150,7 +168,8 @@ Optional Properties:
 --------------------
 The virtio based communication between the MPU and a PRU core _requires_
 either the 'mboxes' property, or the set of 'interrupt-parent', 'interrupts'
-and 'interrupt-names' properties to be defined.
+and 'interrupt-names' properties to be defined. The 'mboxes' property is not
+applicable for 66AK2G SoCs.
 
 - mboxes           : OMAP Mailbox specifier denoting the sub-mailbox, if using
                      a mailbox for IPC signalling between host and a PRU core.
diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index edc416b..f8cc067 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -95,10 +95,11 @@ config DA8XX_REMOTEPROC
 
 config PRUSS_REMOTEPROC
 	tristate "TI PRUSS remoteproc support"
-	depends on HAS_DMA && (SOC_AM33XX || SOC_AM43XX || SOC_DRA7XX)
+	depends on HAS_DMA
+	depends on SOC_AM33XX || SOC_AM43XX || SOC_DRA7XX || ARCH_KEYSTONE
 	depends on REMOTEPROC
 	select MAILBOX
-	select OMAP2PLUS_MBOX
+	select OMAP2PLUS_MBOX if ARCH_OMAP2PLUS
 	select RPMSG_VIRTIO
 	default n
 	help
diff --git a/drivers/remoteproc/pru_rproc.c b/drivers/remoteproc/pru_rproc.c
index 9d87b88..47e817d 100644
--- a/drivers/remoteproc/pru_rproc.c
+++ b/drivers/remoteproc/pru_rproc.c
@@ -819,6 +819,27 @@ static struct pru_private_data am57xx_pru2_1_rproc_pdata = {
 	.fw_name = "am57xx-pru2_1-fw",
 };
 
+/* 66AK2G PRUSS0 PRU core-specific private data */
+static struct pru_private_data k2g_pru0_0_rproc_pdata = {
+	.id = 0,
+	.fw_name = "k2g-pru0_0-fw",
+};
+
+static struct pru_private_data k2g_pru0_1_rproc_pdata = {
+	.id = 1,
+	.fw_name = "k2g-pru0_1-fw",
+};
+
+static struct pru_private_data k2g_pru1_0_rproc_pdata = {
+	.id = 0,
+	.fw_name = "k2g-pru1_0-fw",
+};
+
+static struct pru_private_data k2g_pru1_1_rproc_pdata = {
+	.id = 1,
+	.fw_name = "k2g-pru1_1-fw",
+};
+
 /* AM33xx SoC-specific PRU Device data */
 static struct pru_match_private_data am335x_pru_match_data[] = {
 	{
@@ -880,10 +901,34 @@ static struct pru_match_private_data am57xx_pru_match_data[] = {
 	},
 };
 
+/* 66AK2G SoC-specific PRU Device data */
+static struct pru_match_private_data k2g_pru_match_data[] = {
+	{
+		.device_name	= "20ab4000.pru0",
+		.priv_data	= &k2g_pru0_0_rproc_pdata,
+	},
+	{
+		.device_name	= "20ab8000.pru1",
+		.priv_data	= &k2g_pru0_1_rproc_pdata,
+	},
+	{
+		.device_name	= "20af4000.pru0",
+		.priv_data	= &k2g_pru1_0_rproc_pdata,
+	},
+	{
+		.device_name	= "20af8000.pru1",
+		.priv_data	= &k2g_pru1_1_rproc_pdata,
+	},
+	{
+		/* sentinel */
+	},
+};
+
 static const struct of_device_id pru_rproc_match[] = {
 	{ .compatible = "ti,am3356-pru", .data = am335x_pru_match_data, },
 	{ .compatible = "ti,am4376-pru", .data = am437x_pru_match_data, },
 	{ .compatible = "ti,am5728-pru", .data = am57xx_pru_match_data, },
+	{ .compatible = "ti,k2g-pru", .data = k2g_pru_match_data, },
 	{},
 };
 MODULE_DEVICE_TABLE(of, pru_rproc_match);
diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index e9fe3d7..04f42fb 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -175,6 +175,18 @@ static struct of_dev_auxdata am57xx_pruss2_rproc_auxdata_lookup[] = {
 	{ /* sentinel */ },
 };
 
+static struct of_dev_auxdata k2g_pruss0_rproc_auxdata_lookup[] = {
+	OF_DEV_AUXDATA("ti,k2g-pru", 0x20ab4000, "20ab4000.pru0", NULL),
+	OF_DEV_AUXDATA("ti,k2g-pru", 0x20ab8000, "20ab8000.pru1", NULL),
+	{ /* sentinel */ },
+};
+
+static struct of_dev_auxdata k2g_pruss1_rproc_auxdata_lookup[] = {
+	OF_DEV_AUXDATA("ti,k2g-pru", 0x20af4000, "20af4000.pru0", NULL),
+	OF_DEV_AUXDATA("ti,k2g-pru", 0x20af8000, "20af8000.pru1", NULL),
+	{ /* sentinel */ },
+};
+
 /* instance-specific driver private data */
 static struct pruss_private_data am335x_pruss_priv_data = {
 	.aux_data = am335x_pruss_rproc_auxdata_lookup,
@@ -197,6 +209,14 @@ static struct pruss_private_data am57xx_pruss2_priv_data = {
 	.aux_data = am57xx_pruss2_rproc_auxdata_lookup,
 };
 
+static struct pruss_private_data k2g_pruss0_priv_data = {
+	.aux_data = k2g_pruss0_rproc_auxdata_lookup,
+};
+
+static struct pruss_private_data k2g_pruss1_priv_data = {
+	.aux_data = k2g_pruss1_rproc_auxdata_lookup,
+};
+
 static struct pruss_match_private_data am335x_match_data[] = {
 	{
 		.device_name	= "4a300000.pruss",
@@ -235,10 +255,25 @@ static struct pruss_match_private_data am57xx_match_data[] = {
 	},
 };
 
+static struct pruss_match_private_data k2g_match_data[] = {
+	{
+		.device_name	= "20a80000.pruss",
+		.priv_data	= &k2g_pruss0_priv_data,
+	},
+	{
+		.device_name	= "20ac0000.pruss",
+		.priv_data	= &k2g_pruss1_priv_data,
+	},
+	{
+		/* sentinel */
+	},
+};
+
 static const struct of_device_id pruss_of_match[] = {
 	{ .compatible = "ti,am3356-pruss", .data = &am335x_match_data, },
 	{ .compatible = "ti,am4376-pruss", .data = &am437x_match_data, },
 	{ .compatible = "ti,am5728-pruss", .data = &am57xx_match_data, },
+	{ .compatible = "ti,k2g-pruss", .data = &k2g_match_data, },
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, pruss_of_match);
diff --git a/drivers/remoteproc/pruss_intc.c b/drivers/remoteproc/pruss_intc.c
index 548c3f0..1f2e405 100644
--- a/drivers/remoteproc/pruss_intc.c
+++ b/drivers/remoteproc/pruss_intc.c
@@ -571,6 +571,10 @@ static struct pruss_intc_match_data am437x_pruss_intc_data = {
 	.no_host7_intr = true,
 };
 
+static struct pruss_intc_match_data k2g_pruss_intc_data = {
+	.no_host7_intr = true,
+};
+
 static const struct of_device_id pruss_intc_of_match[] = {
 	{
 		.compatible = "ti,am3356-pruss-intc",
@@ -584,6 +588,10 @@ static const struct of_device_id pruss_intc_of_match[] = {
 		.compatible = "ti,am5728-pruss-intc",
 		.data = NULL,
 	},
+	{
+		.compatible = "ti,k2g-pruss-intc",
+		.data = &k2g_pruss_intc_data,
+	},
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, pruss_intc_of_match);
diff --git a/drivers/remoteproc/pruss_soc_bus.c b/drivers/remoteproc/pruss_soc_bus.c
index 66639f4..d1b3f4f 100644
--- a/drivers/remoteproc/pruss_soc_bus.c
+++ b/drivers/remoteproc/pruss_soc_bus.c
@@ -44,11 +44,13 @@
  * @base: kernel mapped address for bus register base
  * @in_standby: flag for storing standby status
  * @has_reset: cached variable for storing global module reset flag
+ * @skip_syscfg: flag to indicate if PRCM master standby/slave idle is needed
  */
 struct pruss_soc_bus {
 	void __iomem *base;
 	bool in_standby;
 	bool has_reset;
+	bool skip_syscfg;
 };
 
 /**
@@ -109,6 +111,9 @@ static int pruss_soc_bus_suspend(struct device *dev)
 	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
 	u32 syscfg_val;
 
+	if (psoc_bus->skip_syscfg)
+		return 0;
+
 	syscfg_val = readl_relaxed(psoc_bus->base + SYSCFG_OFFSET);
 	psoc_bus->in_standby = syscfg_val & SYSCFG_STANDBY_INIT;
 
@@ -127,7 +132,7 @@ static int pruss_soc_bus_resume(struct device *dev)
 	int ret = 0;
 
 	/* re-enable OCP master ports/disable MStandby */
-	if (!psoc_bus->in_standby) {
+	if (!psoc_bus->skip_syscfg && !psoc_bus->in_standby) {
 		ret = pruss_soc_bus_enable_ocp_master_ports(dev);
 		if (ret)
 			dev_err(dev, "%s failed\n", __func__);
@@ -142,6 +147,9 @@ static void pruss_disable_module(struct device *dev)
 {
 	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
 
+	if (psoc_bus->skip_syscfg)
+		goto put_sync;
+
 	/* configure Smart Standby */
 	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
 			  SYSCFG_STANDBY_MODE_MASK, SYSCFG_STANDBY_MODE_SMART);
@@ -150,7 +158,8 @@ static void pruss_disable_module(struct device *dev)
 	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
 			  SYSCFG_STANDBY_INIT, SYSCFG_STANDBY_INIT);
 
-	/* tell PRCM to initiate IDLE request */
+put_sync:
+	/* initiate IDLE request, disable clocks */
 	pm_runtime_put_sync(dev);
 }
 
@@ -159,13 +168,16 @@ static int pruss_enable_module(struct device *dev)
 	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
 	int ret;
 
-	/* tell PRCM to de-assert IDLE request */
+	/* enable clocks, de-assert IDLE request */
 	ret = pm_runtime_get_sync(dev);
 	if (ret < 0) {
 		pm_runtime_put_noidle(dev);
 		return ret;
 	}
 
+	if (psoc_bus->skip_syscfg)
+		return ret;
+
 	/* configure for Smart Idle & Smart Standby */
 	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
 			  SYSCFG_IDLE_MODE_MASK, SYSCFG_IDLE_MODE_SMART);
@@ -218,6 +230,8 @@ static int pruss_soc_bus_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 	psoc_bus->has_reset = data->has_reset;
+	psoc_bus->skip_syscfg =
+			!!of_device_is_compatible(node, "ti,k2g-pruss-soc-bus");
 	platform_set_drvdata(pdev, psoc_bus);
 
 	if (psoc_bus->has_reset) {
@@ -283,10 +297,15 @@ static struct pruss_soc_bus_match_data am57xx_data = {
 	.has_reset = false,
 };
 
+static struct pruss_soc_bus_match_data k2g_data = {
+	.has_reset = false,
+};
+
 static const struct of_device_id pruss_soc_bus_of_match[] = {
 	{ .compatible = "ti,am3356-pruss-soc-bus", .data = &am335x_data, },
 	{ .compatible = "ti,am4376-pruss-soc-bus", .data = &am437x_data, },
 	{ .compatible = "ti,am5728-pruss-soc-bus", .data = &am57xx_data, },
+	{ .compatible = "ti,k2g-pruss-soc-bus", .data = &k2g_data, },
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, pruss_soc_bus_of_match);
-- 
1.7.5.4

