From 33b1723376639fc6b69329d81aa95a9845f46432 Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Thu, 2 Jul 2015 10:04:13 -0500
Subject: [PATCH 213/800] ARM: OMAP2+: pm33xx: Add base cpuidle support

In some cases, like that of C1 and greater c-states on am335x, we must
use the wkup-m3 and sleep33xx code to properly get the cpu to low power
state. In order to do this we place update the pm33xx code to support
calling into the sleep33xx code without using the additional supoprt
code necessary for suspend and also and a new op to be defined in
pm33xx-core, cpu_suspend, which will allow us to make a call to just
suspend the cpu without of the support code required for soc suspend.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/pm.h          |    3 ++-
 arch/arm/mach-omap2/pm33xx-core.c |   14 ++++++++++++--
 arch/arm/mach-omap2/pm33xx.c      |   15 ++++++++++++++-
 3 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-omap2/pm.h b/arch/arm/mach-omap2/pm.h
index f622b00..f197994 100644
--- a/arch/arm/mach-omap2/pm.h
+++ b/arch/arm/mach-omap2/pm.h
@@ -83,9 +83,10 @@ extern void (*omap3_do_wfi_sram)(void);
 
 /* for sharing core pm ops with amx3 pm modules */
 struct am33xx_pm_ops {
-	int	(*init)(void);
+	int	(*init)(void (*do_sram_cpuidle)(u32 wfi_flags));
 	int	(*soc_suspend)(unsigned int state, int (*fn)(unsigned long),
 			       unsigned long args);
+	int	(*cpu_suspend)(int (*fn)(unsigned long), unsigned long args);
 };
 
 /* for sharing asm function addrs with amx3 pm modules */
diff --git a/arch/arm/mach-omap2/pm33xx-core.c b/arch/arm/mach-omap2/pm33xx-core.c
index cbbc935..ce61475 100644
--- a/arch/arm/mach-omap2/pm33xx-core.c
+++ b/arch/arm/mach-omap2/pm33xx-core.c
@@ -65,7 +65,7 @@ static int amx3_common_init(void)
 	return 0;
 }
 
-static int am33xx_suspend_init(void)
+static int am33xx_suspend_init(void (*do_sram_cpuidle)(u32 wfi_flags))
 {
 	int ret;
 
@@ -81,7 +81,7 @@ static int am33xx_suspend_init(void)
 	return ret;
 }
 
-static int am43xx_suspend_init(void)
+static int am43xx_suspend_init(void (*do_sram_cpuidle)(u32 wfi_flags))
 {
 	int ret = 0;
 
@@ -150,9 +150,19 @@ static int am43xx_suspend(unsigned int state, int (*fn)(unsigned long),
 	return ret;
 }
 
+static int am33xx_cpu_suspend(int (*fn)(unsigned long), unsigned long args)
+{
+	int ret = 0;
+
+	ret = cpu_suspend(args, fn);
+
+	return ret;
+}
+
 static struct am33xx_pm_ops am33xx_ops = {
 	.init = am33xx_suspend_init,
 	.soc_suspend = am33xx_suspend,
+	.cpu_suspend = am33xx_cpu_suspend,
 };
 
 static struct am33xx_pm_ops am43xx_ops = {
diff --git a/arch/arm/mach-omap2/pm33xx.c b/arch/arm/mach-omap2/pm33xx.c
index 619dce9..042c2cb 100644
--- a/arch/arm/mach-omap2/pm33xx.c
+++ b/arch/arm/mach-omap2/pm33xx.c
@@ -44,6 +44,16 @@ static struct am33xx_pm_ops *pm_ops;
 static struct am33xx_pm_sram_addr *pm_sram;
 static unsigned long suspend_wfi_flags;
 
+static void am33xx_do_sram_idle(u32 wfi_flags)
+{
+	int ret = 0;
+
+	ret = wkup_m3_prepare_low_power(WKUP_M3_IDLE);
+
+	if (!ret)
+		pm_ops->cpu_suspend(am33xx_do_wfi_sram, wfi_flags);
+}
+
 #ifdef CONFIG_SUSPEND
 static int am33xx_pm_suspend(suspend_state_t suspend_state)
 {
@@ -96,6 +106,8 @@ static int am33xx_pm_begin(suspend_state_t state)
 {
 	int ret = -EINVAL;
 
+	cpu_idle_poll_ctrl(true);
+
 	switch (state) {
 	case PM_SUSPEND_MEM:
 	case PM_SUSPEND_STANDBY:
@@ -109,6 +121,7 @@ static int am33xx_pm_begin(suspend_state_t state)
 static void am33xx_pm_end(void)
 {
 	wkup_m3_finish_low_power();
+	cpu_idle_poll_ctrl(false);
 }
 
 static int am33xx_pm_valid(suspend_state_t state)
@@ -235,7 +248,7 @@ int am33xx_pm_init(void)
 	suspend_wfi_flags |= WFI_FLAG_DISABLE_EMIF;
 	suspend_wfi_flags |= WFI_FLAG_WAKE_M3;
 
-	ret = pm_ops->init();
+	ret = pm_ops->init(am33xx_do_sram_idle);
 	if (ret) {
 		pr_err("Unable to call core pm init!\n");
 		return -ENODEV;
-- 
1.7.5.4

