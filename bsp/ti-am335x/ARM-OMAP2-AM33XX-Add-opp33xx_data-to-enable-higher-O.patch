From 197976e3b29a028f0b2a97c8b721d5676f056e01 Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Wed, 22 Jul 2015 16:01:28 -0500
Subject: [PATCH 279/800] ARM: OMAP2+: AM33XX: Add opp33xx_data to enable
 higher OPPs

The availability of certain higher OPPs on AM33XX is defined by a
register value and they can differ between silicon revisions. Define a
table containing this information to properly enable OPPs for cpufreq.

OPP information from AM335x Data Manual, SPRS717F, Revised April 2013.

efuse_sma values decoded using "Device_Attribute_ Bit Requests_v0.1.pptx"
Revised 9/11/2013.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/Makefile       |    1 +
 arch/arm/mach-omap2/io.c           |    2 +
 arch/arm/mach-omap2/opp33xx_data.c |  171 ++++++++++++++++++++++++++++++++++++
 arch/arm/mach-omap2/pm.h           |    5 +
 4 files changed, 179 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/mach-omap2/opp33xx_data.c

diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index 41c36cc..39a9e99 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -77,6 +77,7 @@ obj-$(CONFIG_ARCH_OMAP2)		+= sdrc2xxx.o
 ifeq ($(CONFIG_PM_OPP),y)
 obj-y					+= opp.o
 obj-$(CONFIG_ARCH_OMAP3)		+= opp3xxx_data.o
+obj-$(CONFIG_SOC_AM33XX)		+= opp33xx_data.o
 obj-$(CONFIG_ARCH_OMAP4)		+= opp4xxx_data.o
 endif
 
diff --git a/arch/arm/mach-omap2/io.c b/arch/arm/mach-omap2/io.c
index 3fed778..ef8bf8f 100644
--- a/arch/arm/mach-omap2/io.c
+++ b/arch/arm/mach-omap2/io.c
@@ -49,6 +49,7 @@
 #include "cm44xx.h"
 #include "prm.h"
 #include "cm.h"
+#include "pm.h"
 #include "prcm_mpu44xx.h"
 #include "prminst44xx.h"
 #include "prm2xxx.h"
@@ -653,6 +654,7 @@ void __init am33xx_init_early(void)
 
 void __init am33xx_init_late(void)
 {
+	am33xx_opp_init();
 	omap_common_late_init();
 }
 #endif
diff --git a/arch/arm/mach-omap2/opp33xx_data.c b/arch/arm/mach-omap2/opp33xx_data.c
new file mode 100644
index 0000000..0e07186
--- /dev/null
+++ b/arch/arm/mach-omap2/opp33xx_data.c
@@ -0,0 +1,171 @@
+/*
+ * AM33XX OPP table definitions.
+ *
+ * Copyright (C) 2014 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/io.h>
+#include <linux/module.h>
+
+#include "control.h"
+#include "omap_opp_data.h"
+#include "pm.h"
+#include "soc.h"
+
+/*
+ * Errata 1.0.15: OPP50 Operation on MPU Domain is Not Supported.
+ *
+ * To minimize power consumption, the ARM Cortex-A8 may be operated at
+ * the lower frequency defined by OPP50, but the respective voltage
+ * domain VDD_MPU must be operated as defined by OPP100. So MPU OPP50
+ * definition is modified to 275MHz, 1.1V.
+ */
+static struct omap_opp_def am33xx_es1_0_opp_list[] __initdata = {
+	/* MPU OPP1 - OPP50 */
+	OPP_INITIALIZER("mpu", true, 275000000, 1100000),
+	/* MPU OPP2 - OPP100 */
+	OPP_INITIALIZER("mpu", true, 500000000, 1100000),
+	/* MPU OPP3 - OPP120 */
+	OPP_INITIALIZER("mpu", true, 600000000, 1200000),
+	/* MPU OPP4 - OPPTurbo */
+	OPP_INITIALIZER("mpu", true, 720000000, 1260000),
+};
+
+static struct omap_opp_def am33xx_es2_x_opp_list[] __initdata = {
+	/* MPU OPP1 - OPP50 or OPP100 */
+	OPP_INITIALIZER("mpu", true, 300000000, 950000),
+	/* MPU OPP2 - OPP100 */
+	OPP_INITIALIZER("mpu", true, 600000000, 1100000),
+	/* MPU OPP3 - OPP120 */
+	OPP_INITIALIZER("mpu", true, 720000000, 1200000),
+	/* MPU OPP4 - OPPTurbo */
+	OPP_INITIALIZER("mpu", true, 800000000, 1260000),
+	/* MPU OPP5 - OPPNitro */
+	OPP_INITIALIZER("mpu", false, 1000000000, 1325000),
+};
+
+/* From AM335x TRM, SPRUH73H, Section 9.3.50 */
+#define AM33XX_EFUSE_SMA_OFFSET	0x7fc
+
+/*
+ * Bits [12:0] are OPP Disabled bits,
+ * 1 = OPP is disabled and not available,
+ * 0 = OPP available.
+ */
+#define MAX_FREQ_MASK		0x1fff
+#define MAX_FREQ_SHFT		0
+
+/* ES 2.1 eFuse Values for enabling/diasbling specific OPPs */
+#define EFUSE_OPP_50_300MHZ_BIT		(0x1 << 4)
+#define EFUSE_OPP_100_300MHZ_BIT	(0x1 << 5)
+#define EFUSE_OPP_100_600MHZ_BIT	(0x1 << 6)
+#define EFUSE_OPP_120_720MHZ_BIT	(0x1 << 7)
+#define EFUSE_OPP_TURBO_800MHZ_BIT	(0x1 << 8)
+#define EFUSE_OPP_NITRO_1GHZ_BIT	(0x1 << 9)
+
+/**
+ * am33xx_opp_init() - initialize am33xx opp table
+ */
+int __init am33xx_opp_init(void)
+{
+	int r = -ENODEV;
+	u32 rev, val, max_freq;
+
+	if (WARN(!soc_is_am33xx(), "Cannot init OPPs: unsupported SoC.\n"))
+		return r;
+
+	rev = omap_rev();
+
+	switch (rev) {
+	case AM335X_REV_ES1_0:
+		r = omap_init_opp_table(am33xx_es1_0_opp_list,
+			ARRAY_SIZE(am33xx_es1_0_opp_list));
+		break;
+
+	case AM335X_REV_ES2_1:
+		/*
+		 * First read efuse sma reg to detect package type and
+		 * supported frequency
+		 */
+		val = omap_ctrl_readl(AM33XX_EFUSE_SMA_OFFSET);
+
+		if (!(val & MAX_FREQ_MASK)) {
+			/*
+			* if mpu max freq is not populated, fall back to
+			* PG 2.0 OPP settings.
+			*/
+			r =
+			omap_init_opp_table(am33xx_es2_x_opp_list,
+					ARRAY_SIZE(am33xx_es2_x_opp_list));
+			break;
+		}
+
+		/*
+		 * 1 = OPP is disabled and not available,
+		 * 0 = OPP available.
+		 */
+		max_freq = ~val & MAX_FREQ_MASK;
+
+		/*
+		 * 300 MHz OPP is special because one of two different u_volt
+		 * values so check and update voltage value to OPP 100 level
+		 * if efuse is set.
+		 */
+		if (max_freq & EFUSE_OPP_100_300MHZ_BIT) {
+			opp_def_list_update_opp_voltage(am33xx_es2_x_opp_list,
+				ARRAY_SIZE(am33xx_es2_x_opp_list),
+				"mpu", 300000000, 1100000);
+			opp_def_list_enable_opp(am33xx_es2_x_opp_list,
+				ARRAY_SIZE(am33xx_es2_x_opp_list),
+				"mpu", 300000000, true);
+		} else if (max_freq & EFUSE_OPP_50_300MHZ_BIT) {
+			opp_def_list_enable_opp(am33xx_es2_x_opp_list,
+				ARRAY_SIZE(am33xx_es2_x_opp_list),
+				"mpu", 300000000, true);
+		} else {
+			opp_def_list_enable_opp(am33xx_es2_x_opp_list,
+				ARRAY_SIZE(am33xx_es2_x_opp_list),
+				"mpu", 300000000, false);
+		}
+
+		opp_def_list_enable_opp(am33xx_es2_x_opp_list,
+			ARRAY_SIZE(am33xx_es2_x_opp_list),
+			"mpu", 600000000,
+			(max_freq & EFUSE_OPP_100_600MHZ_BIT) ? true : false);
+
+		opp_def_list_enable_opp(am33xx_es2_x_opp_list,
+			ARRAY_SIZE(am33xx_es2_x_opp_list),
+			"mpu", 720000000,
+			(max_freq & EFUSE_OPP_120_720MHZ_BIT) ? true : false);
+
+		opp_def_list_enable_opp(am33xx_es2_x_opp_list,
+			ARRAY_SIZE(am33xx_es2_x_opp_list),
+			"mpu", 800000000,
+			(max_freq & EFUSE_OPP_TURBO_800MHZ_BIT) ? true : false);
+
+		opp_def_list_enable_opp(am33xx_es2_x_opp_list,
+			ARRAY_SIZE(am33xx_es2_x_opp_list),
+			"mpu", 1000000000,
+			(max_freq & EFUSE_OPP_NITRO_1GHZ_BIT) ? true : false);
+
+		r = omap_init_opp_table(am33xx_es2_x_opp_list,
+			ARRAY_SIZE(am33xx_es2_x_opp_list));
+		break;
+
+	case AM335X_REV_ES2_0:
+	/* FALLTHROUGH */
+	default:
+		r = omap_init_opp_table(am33xx_es2_x_opp_list,
+			ARRAY_SIZE(am33xx_es2_x_opp_list));
+	}
+
+	return r;
+}
diff --git a/arch/arm/mach-omap2/pm.h b/arch/arm/mach-omap2/pm.h
index b466b18..3b3e3b7 100644
--- a/arch/arm/mach-omap2/pm.h
+++ b/arch/arm/mach-omap2/pm.h
@@ -51,6 +51,7 @@ extern int omap_pm_clkdms_setup(struct clockdomain *clkdm, void *unused);
 #if defined(CONFIG_PM_OPP)
 extern int omap3_opp_init(void);
 extern int omap4_opp_init(void);
+extern int am33xx_opp_init(void);
 #else
 static inline int omap3_opp_init(void)
 {
@@ -60,6 +61,10 @@ static inline int omap4_opp_init(void)
 {
 	return -EINVAL;
 }
+static inline int am33xx_opp_init(void)
+{
+	return -EINVAL;
+}
 #endif
 
 extern int omap3_pm_get_suspend_state(struct powerdomain *pwrdm);
-- 
1.7.5.4

