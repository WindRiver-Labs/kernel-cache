From 7a4f70cfbc2f51bc805c9fcc4c6641ff77643667 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Wed, 22 Mar 2017 21:11:28 -0500
Subject: [PATCH 596/895] remoteproc: debugfs: fix a SRCU deadlock with
 recovery file

The remoteproc debugfs file 'recovery' interface is provided to
aid developers to halt an error recovery and perform a post-mortem
analysis of a remote processor before continuing with the error
recovery. A write operation on this file can be used to disable
the recovery, recover once or to re-enable the error recovery
without halting.

This debugfs file is created using the debugfs_create_file(), so
supports the file lifetime management support intrinsically by means
of the srcu construct in the debugfs core (added in 4.7 kernel). The
remoteproc recovery process when triggered also involves the caching
and removal of the current traces and creation of the last traces
which operate on the same debugfs srcu lock, causing an SRCU deadlock
with the following signature,

"Illegal synchronize_srcu() in same-type SRCU (or in RCU) read-side
critical section!".

Use the debugfs_create_file_unsafe() to create the recovery file in a
non-proxying operation mode to avoid this deadlock. The file lifetime
management for the corresponding file_operations is skipped for now as
the creation of this recovery file is failrly self-managed within the
remoteproc core. A long term solution would probably be to revise the
crash handler workqueue to perform just the recovery in the workqueue
function.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit 091031c00891984ac08896047e99a8afd93c0d63)
---
 drivers/remoteproc/remoteproc_debugfs.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_debugfs.c b/drivers/remoteproc/remoteproc_debugfs.c
index 096ea21..d2dcdcb 100644
--- a/drivers/remoteproc/remoteproc_debugfs.c
+++ b/drivers/remoteproc/remoteproc_debugfs.c
@@ -214,8 +214,8 @@ void rproc_create_debug_dir(struct rproc *rproc)
 
 	debugfs_create_file("name", 0400, rproc->dbg_dir,
 			    rproc, &rproc_name_ops);
-	debugfs_create_file("recovery", 0400, rproc->dbg_dir,
-			    rproc, &rproc_recovery_ops);
+	debugfs_create_file_unsafe("recovery", 0400, rproc->dbg_dir,
+				   rproc, &rproc_recovery_ops);
 	debugfs_create_file("version", 0400, rproc->dbg_dir,
 			    rproc, &rproc_version_ops);
 }
-- 
1.7.5.4

