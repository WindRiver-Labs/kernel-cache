From 0061a4d2cf4046ae0591c690e4fa9db2d627a174 Mon Sep 17 00:00:00 2001
From: Russ Dill <russ.dill@ti.com>
Date: Thu, 23 Jan 2014 01:56:52 -0800
Subject: [PATCH 146/188] ARM: AM33XX: Remove unnecessary delays from
 suspend/resume path

This commit comes from branch ti-linux-3.12.y:
  git://git.ti.com/ti-linux-kernel/ti-linux-kernel.git

No delays are mentioned as being required in any of the TRM documentation.
Instead, wait for the EMIF to indicate that it is ready.

This is needed for am33xx CPU idle support, which is sensitive to return
to active status.

Signed-off-by: Russ Dill <russ.dill@ti.com>
(cherry picked from commit dcad654f4ccd5466934e2359744d9f4a0ce57216)
---
 arch/arm/mach-omap2/sleep33xx.S |   30 ++++++++++++------------------
 1 files changed, 12 insertions(+), 18 deletions(-)

diff --git a/arch/arm/mach-omap2/sleep33xx.S b/arch/arm/mach-omap2/sleep33xx.S
index 40e6793..36e0745 100644
--- a/arch/arm/mach-omap2/sleep33xx.S
+++ b/arch/arm/mach-omap2/sleep33xx.S
@@ -28,7 +28,8 @@
 
 #define EMIF_POWER_MGMT_SELF_REFRESH_MODE 				0x0200
 #define EMIF_POWER_MGMT_SELF_REFRESH_MODE_MASK  		0x0700
-#define EMIF_POWER_MGMT_DELAY_PERIOD					0x1000
+
+#define EMIF_STATUS_READY				0x0004
 
 #define AM33XX_CM_CLKCTRL_MODULEMODE_DISABLE			0x0003
 #define AM33XX_CM_CLKCTRL_MODULEMODE_ENABLE				0x0002
@@ -121,11 +122,6 @@ ENTRY(am33xx_do_wfi)
 	ldr	r2, [r1, #0]
 
 
-	mov	r1, #EMIF_POWER_MGMT_DELAY_PERIOD	@ Wait for system
-wait_self_refresh:					@ to enter SR
-	subs	r1, r1, #1
-	bne	wait_self_refresh
-
 	/* Disable EMIF */
 	ldr	r1, virt_emif_clkctrl
 	ldr	r2, [r1]
@@ -209,6 +205,11 @@ wait_emif_enable:
 	ldr	r1, emif_pmcr_shdw_val
 	str	r1, [r0, #EMIF_POWER_MANAGEMENT_CTRL_SHDW]
 
+	/* Wait for EMIF to become ready */
+1:	ldr	r1, [r0, #EMIF_STATUS]
+	tst	r1, #EMIF_STATUS_READY
+	beq	1b
+
 	/*
 	 * Set SCTLR.C bit to allow data cache allocation
 	 */
@@ -217,12 +218,6 @@ wait_emif_enable:
 	mcr	p15, 0, r0, c1, c0, 0
 	isb
 
-	/* EMIF needs some time before read/write possible */
-	mov r0, #EMIF_POWER_MGMT_DELAY_PERIOD
-wait_abt:
-	subs   r0, r0, #1
-	bne wait_abt
-
 	/* Let the suspend code know about the abort */
 	mov	r0, #1
 	ldmfd	sp!, {r4 - r11, pc}	@ restore regs and return
@@ -286,16 +281,15 @@ wait_emif_enable1:
 	ldr	r1, emif_zqcfg_val
 	str	r1, [r0, #EMIF_SDRAM_OUTPUT_IMPEDANCE_CALIBRATION_CONFIG]
 
-	/* EMIF needs some time before read/write possible */
-	mov	r1, #EMIF_POWER_MGMT_DELAY_PERIOD
-wait_resume:
-	subs	r1, r1, #1
-	bne	wait_resume
-
 	/* All done.. so restore back enter into suspend configuration */
 	ldr	r1, emif_pmcr_val
 	str	r1, [r0, #EMIF_POWER_MANAGEMENT_CONTROL]
 
+	/* Wait for EMIF to become ready */
+1:	ldr	r1, [r0, #EMIF_STATUS]
+	tst	r1, #EMIF_STATUS_READY
+	beq	1b
+
 	/* We are back. Branch to the common CPU resume routine */
 	mov	r0, #0
 	ldr	pc, resume_addr
-- 
1.7.5.4

