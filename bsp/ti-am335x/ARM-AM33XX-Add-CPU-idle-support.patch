From 7527f58af67d034bc26c4c4785684ef4b5e9bd48 Mon Sep 17 00:00:00 2001
From: Russ Dill <russ.dill@ti.com>
Date: Fri, 25 Jul 2014 17:52:45 -0500
Subject: [PATCH 214/800] ARM: AM33XX: Add CPU idle support

This patch adds support for CPU idle on am335x. It has been tested with
Beaglebone Black, Beaglebone White, a PG1.x DDR2 am335x-evm and a PG2.x
DDR3 am335x-evm. The patchset supports putting the MPU PLL into bypass,
putting the MPU into retention mode, and putting the DDR into self
refresh.

The EMIF can bring the DDR out of self refresh when it needs to service
a DMA request. However, for maximum power savings on DDR3 systems, extra
steps need to be performed that the EMIF cannot reverse on its own.
Because of this, two separate sets of CPU idle states are provided, one
for DDR2 systems, and one for DDR3 systems. The DDR3 states do not
include self refresh alone as this actually increases power consumption.

It would be possible to increase DDR3 power savings if the am33xx CPU
idle code were able to detect if there were any potential EMIF users
before allowing deeper DDR3 states.

Signed-off-by: Russ Dill <russ.dill@ti.com>
Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/Makefile      |    1 +
 arch/arm/mach-omap2/cpuidle33xx.c |  120 +++++++++++++++++++++++++++++++++++++
 arch/arm/mach-omap2/pm.h          |   12 ++++
 arch/arm/mach-omap2/pm33xx-core.c |    2 +
 4 files changed, 135 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/mach-omap2/cpuidle33xx.c

diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index b846a93..5bdaf25 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -107,6 +107,7 @@ AFLAGS_sleep43xx.o			:=-Wa,-march=armv7-a$(plus_sec)
 endif
 
 ifeq ($(CONFIG_CPU_IDLE),y)
+obj-$(CONFIG_SOC_AM33XX)                += cpuidle33xx.o
 obj-$(CONFIG_ARCH_OMAP3)                += cpuidle34xx.o
 omap-4-5-idle-common			=  cpuidle44xx.o
 obj-$(CONFIG_ARCH_OMAP4)		+= $(omap-4-5-idle-common)
diff --git a/arch/arm/mach-omap2/cpuidle33xx.c b/arch/arm/mach-omap2/cpuidle33xx.c
new file mode 100644
index 0000000..bcab3f4
--- /dev/null
+++ b/arch/arm/mach-omap2/cpuidle33xx.c
@@ -0,0 +1,120 @@
+/*
+ * AM33XX CPU idle Routines
+ *
+ * Copyright (C) 2011-2013 Texas Instruments, Inc.
+ * Santosh Shilimkar <santosh.shilimkar@ti.com>
+ * Rajendra Nayak <rnayak@ti.com>
+ * Russ Dill <russ.dill@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/sched.h>
+#include <linux/cpuidle.h>
+#include <linux/cpu_pm.h>
+#include <asm/cpuidle.h>
+
+#include "common.h"
+#include "pm.h"
+
+#define AM33XX_FLAG_MPU_PLL		BIT(16)
+#define AM33XX_FLAG_SELF_REFRESH	BIT(17)
+#define AM33XX_FLAG_DISABLE_EMIF	BIT(18)
+
+static void (*do_sram_idle)(u32 wfi_flags);
+
+static int am33xx_enter_idle(struct cpuidle_device *dev,
+			     struct cpuidle_driver *drv, int index)
+{
+	struct cpuidle_state *state;
+	u32 wfi_flags = 0;
+
+	if (omap_irq_pending() || need_resched())
+		return index;
+
+	state = &drv->states[index];
+
+	if (state->flags & AM33XX_FLAG_SELF_REFRESH)
+		wfi_flags |= WFI_FLAG_SELF_REFRESH;
+
+	if (state->flags & AM33XX_FLAG_MPU_PLL)
+		wfi_flags |= WFI_FLAG_WAKE_M3;
+
+	cpu_pm_enter();
+	if (do_sram_idle)
+		do_sram_idle(wfi_flags);
+	cpu_pm_exit();
+
+	return index;
+}
+
+/* Power usage measured as a combination of CPU and DDR power rails */
+struct cpuidle_state am33xx_ddr2_states[] = {
+	ARM_CPUIDLE_WFI_STATE,
+	{
+		.exit_latency = 176,
+		.target_residency = 300,
+		.power_usage = 562,
+		.flags = AM33XX_FLAG_MPU_PLL,
+		.enter = am33xx_enter_idle,
+		.name = "C1",
+		.desc = "Bypass MPU PLL",
+	},
+	{
+		.exit_latency = 390,
+		.target_residency = 500,
+		.power_usage = 529,
+		.flags = AM33XX_FLAG_MPU_PLL | AM33XX_FLAG_SELF_REFRESH,
+		.enter = am33xx_enter_idle,
+		.name = "C1+SR",
+		.desc = "Bypass MPU PLL + DDR SR",
+	},
+};
+
+struct cpuidle_state am33xx_ddr3_states[] = {
+	ARM_CPUIDLE_WFI_STATE,
+	{
+		.exit_latency = 100,
+		.target_residency = 200,
+		.power_usage = 497,
+		.flags = AM33XX_FLAG_MPU_PLL,
+		.enter = am33xx_enter_idle,
+		.name = "C1",
+		.desc = "Bypass MPU PLL",
+	},
+};
+
+static struct cpuidle_driver am33xx_idle_driver = {
+	.name		= "am33xx_idle",
+	.owner		= THIS_MODULE,
+};
+
+/**
+ * am33xx_idle_init - Init routine for am33xx idle
+ *
+ * Registers the am33xx specific cpuidle driver to the cpuidle
+ * framework with the valid set of states.
+ */
+int am33xx_idle_init(bool ddr3, void (*do_idle)(u32 wfi_flags))
+{
+	do_sram_idle = do_idle;
+
+	if (ddr3) {
+		BUILD_BUG_ON(ARRAY_SIZE(am33xx_ddr3_states) >
+					ARRAY_SIZE(am33xx_idle_driver.states));
+		memcpy(am33xx_idle_driver.states, am33xx_ddr3_states,
+		       sizeof(am33xx_ddr3_states));
+		am33xx_idle_driver.state_count =
+						ARRAY_SIZE(am33xx_ddr3_states);
+	} else {
+		BUILD_BUG_ON(ARRAY_SIZE(am33xx_ddr2_states) >
+					ARRAY_SIZE(am33xx_idle_driver.states));
+		memcpy(am33xx_idle_driver.states, am33xx_ddr2_states,
+		       sizeof(am33xx_ddr2_states));
+		am33xx_idle_driver.state_count =
+						ARRAY_SIZE(am33xx_ddr2_states);
+	}
+	return cpuidle_register(&am33xx_idle_driver, NULL);
+}
diff --git a/arch/arm/mach-omap2/pm.h b/arch/arm/mach-omap2/pm.h
index f197994..399768d 100644
--- a/arch/arm/mach-omap2/pm.h
+++ b/arch/arm/mach-omap2/pm.h
@@ -16,9 +16,21 @@
 #include "powerdomain.h"
 
 #ifdef CONFIG_CPU_IDLE
+extern int am33xx_idle_init(bool ddr3, void (*do_idle)(u32 wfi_flags));
 extern int __init omap3_idle_init(void);
 extern int __init omap4_idle_init(void);
 #else
+static inline int am33xx_idle_init(bool ddr3, void (*do_sram_cpuidle)
+				   (u32 wfi_flags))
+{
+	return 0;
+}
+
+static inline int am437x_idle_init(void)
+{
+	return 0;
+}
+
 static inline int omap3_idle_init(void)
 {
 	return 0;
diff --git a/arch/arm/mach-omap2/pm33xx-core.c b/arch/arm/mach-omap2/pm33xx-core.c
index ce61475..e902281 100644
--- a/arch/arm/mach-omap2/pm33xx-core.c
+++ b/arch/arm/mach-omap2/pm33xx-core.c
@@ -76,6 +76,8 @@ static int am33xx_suspend_init(void (*do_sram_cpuidle)(u32 wfi_flags))
 		return -ENODEV;
 	}
 
+	am33xx_idle_init(true, do_sram_cpuidle);
+
 	ret = amx3_common_init();
 
 	return ret;
-- 
1.7.5.4

