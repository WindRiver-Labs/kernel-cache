From 72d4bd815eb64fc8d083e3f7442461ff0f66acce Mon Sep 17 00:00:00 2001
From: Roger Quadros <rogerq@ti.com>
Date: Fri, 3 Feb 2017 12:09:38 -0600
Subject: [PATCH 582/895] remoteproc/pruss: add APIs to get and set the PRU
 cores

Add two new get and put API, pruss_rproc_get() and pruss_rproc_put(),
to the PRUSS platform driver to allow client drivers to acquire and
release the remoteproc device associated with a PRU core. The PRU
cores are treated as resources with only one client owning it at
a time.

The pruss_rproc_get() function returns the rproc handle corresponding
to a PRU core identified by its id number. The pruss_rproc_put() is
the complimentary function to pruss_rproc_get().

Signed-off-by: Roger Quadros <rogerq@ti.com>
Signed-off-by: Felipe Balbi <balbi@ti.com>
Signed-off-by: Andrew F. Davis <afd@ti.com>
[s-anna@ti.com: update pru lookup logic, error checking, cleanup]
Signed-off-by: Suman Anna <s-anna@ti.com>

(cherry picked from commit a6699015516d6e3fc1ba7a30314a30e4a3246d4d)
---
 drivers/remoteproc/pruss.c |  139 ++++++++++++++++++++++++++++++++++++++++++++
 drivers/remoteproc/pruss.h |   11 ++++
 include/linux/pruss.h      |   20 ++++++
 3 files changed, 170 insertions(+), 0 deletions(-)

diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index 4ed609d..60dc52a 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -19,6 +19,8 @@
 #include <linux/dma-mapping.h>
 #include <linux/module.h>
 #include <linux/of_device.h>
+#include <linux/remoteproc.h>
+#include <linux/pruss.h>
 
 #include "pruss.h"
 
@@ -101,6 +103,142 @@ void pruss_put(struct pruss *pruss)
 }
 EXPORT_SYMBOL_GPL(pruss_put);
 
+/* get the rproc phandle corresponding to a pru_id */
+static struct rproc *__pruss_rproc_get(struct pruss *pruss,
+				       enum pruss_pru_id pru_id)
+{
+	struct device_node *rproc_np = NULL;
+	struct device_node *child;
+	struct platform_device *pdev;
+	struct rproc *rproc;
+	char pru_name[5];
+
+	/* get rproc corresponding to pru_id using the label property */
+	snprintf(pru_name, sizeof(pru_name), "pru%d", pru_id);
+	for_each_child_of_node(pruss->dev->of_node, child) {
+		if (of_property_match_string(child, "label", pru_name) == 0) {
+			rproc_np = child;
+			break;
+		}
+	}
+
+	if (!rproc_np)
+		return ERR_PTR(-ENODEV);
+
+	pdev = of_find_device_by_node(rproc_np);
+	of_node_put(rproc_np);
+
+	if (!pdev)
+		/* probably PRU not yet probed */
+		return ERR_PTR(-EPROBE_DEFER);
+
+	rproc = platform_get_drvdata(pdev);
+	if (!rproc)
+		return ERR_PTR(-EPROBE_DEFER);
+
+	get_device(&rproc->dev);
+
+	return rproc;
+}
+
+/**
+ * pruss_rproc_get() - Get the rproc instance corresponding to pru_id
+ * @pruss: the pruss instance
+ * @pru_id: the PRU id of which we need the rproc instance
+ *
+ * Allows only one user to own the rproc resource at a time.
+ * Caller must call pruss_rproc_put() when done with using the rproc.
+ *
+ * Returns rproc handle on success. ERR_PTR on failure e.g.
+ * -EBUSY if PRU is already reserved by someone else
+ * -ENODEV if not yet available.
+ * -EINVAL if invalid parameters.
+ */
+struct rproc *pruss_rproc_get(struct pruss *pruss,
+			      enum pruss_pru_id pru_id)
+{
+	struct rproc *rproc;
+	int ret;
+
+	if (!pruss)
+		return ERR_PTR(-EINVAL);
+
+	if (pru_id != PRUSS_PRU0 && pru_id != PRUSS_PRU1)
+		return ERR_PTR(-EINVAL);
+
+	rproc = __pruss_rproc_get(pruss, pru_id);
+	if (IS_ERR(rproc))
+		return rproc;
+
+	mutex_lock(&pruss->lock);
+
+	if (pruss->pru_in_use[pru_id]) {
+		ret = -EBUSY;
+		goto unlock;
+	}
+
+	pruss->pru_in_use[pru_id] = rproc;
+
+	mutex_unlock(&pruss->lock);
+
+	return rproc;
+
+unlock:
+	mutex_unlock(&pruss->lock);
+	put_device(&rproc->dev);
+
+	return ERR_PTR(ret);
+}
+EXPORT_SYMBOL_GPL(pruss_rproc_get);
+
+/* find out PRU ID from the rproc instance */
+static enum pruss_pru_id pruss_rproc_to_pru_id(struct pruss *pruss,
+					       struct rproc *rproc)
+{
+	enum pruss_pru_id pru_id;
+
+	for (pru_id = PRUSS_PRU0; pru_id < PRUSS_NUM_PRUS; pru_id++)
+		if (pruss->pru_in_use[pru_id] == rproc)
+			return pru_id;
+
+	return -1;
+}
+
+/**
+ * pruss_rproc_put() - release the PRU rproc resource
+ * @pruss: the pruss instance
+ * @rproc: the rproc resource to release
+ *
+ * Releases the rproc resource and makes it available to other
+ * users.
+ */
+void pruss_rproc_put(struct pruss *pruss, struct rproc *rproc)
+{
+	int pru_id;
+
+	if (!pruss || IS_ERR_OR_NULL(rproc))
+		return;
+
+	mutex_lock(&pruss->lock);
+
+	pru_id = pruss_rproc_to_pru_id(pruss, rproc);
+	if (pru_id < 0) {
+		mutex_unlock(&pruss->lock);
+		return;
+	}
+
+	if (!pruss->pru_in_use[pru_id]) {
+		mutex_unlock(&pruss->lock);
+		return;
+	}
+	pruss->pru_in_use[pru_id] = NULL;
+
+	mutex_unlock(&pruss->lock);
+
+	put_device(&rproc->dev);
+}
+EXPORT_SYMBOL(pruss_rproc_put);
+
 static const struct of_device_id pruss_of_match[];
 
 static const
@@ -155,6 +293,7 @@ static int pruss_probe(struct platform_device *pdev)
 		return -ENOMEM;
 
 	pruss->dev = dev;
+	mutex_init(&pruss->lock);
 
 	for (i = 0; i < ARRAY_SIZE(mem_names); i++) {
 		if (data->has_no_sharedram && !strcmp(mem_names[i], "shrdram2"))
diff --git a/drivers/remoteproc/pruss.h b/drivers/remoteproc/pruss.h
index 632a94e..489f735 100644
--- a/drivers/remoteproc/pruss.h
+++ b/drivers/remoteproc/pruss.h
@@ -17,6 +17,11 @@
 #ifndef _PRUSS_H_
 #define _PRUSS_H_
 
+/* number of PRUs within a PRUSS */
+#ifndef PRUSS_NUM_PRUS
+#define PRUSS_NUM_PRUS		2
+#endif
+
 /* maximum number of system events */
 #define MAX_PRU_SYS_EVENTS	64
 
@@ -103,12 +108,18 @@ struct pruss_intc_config {
  * @dev: pruss device pointer
  * @mem_regions: data for each of the PRUSS memory regions
  * @host_mask: indicate which HOST IRQs are enabled
+ * @pru_running: flag to indicate if PRU is running
+ * @pru_in_use: flag to indicate if PRU is used
+ * @lock: mutex to serialize access to resources
  */
 struct pruss {
 	struct list_head node;
 	struct device *dev;
 	struct pruss_mem_region mem_regions[PRUSS_MEM_MAX];
 	u32 host_mask;
+	bool pru_running[PRUSS_NUM_PRUS];
+	struct rproc *pru_in_use[PRUSS_NUM_PRUS];
+	struct mutex lock; /* PRU resource lock */
 };
 
 int pruss_intc_configure(struct pruss *pruss,
diff --git a/include/linux/pruss.h b/include/linux/pruss.h
index 1e3bdd7..1b89114 100644
--- a/include/linux/pruss.h
+++ b/include/linux/pruss.h
@@ -18,6 +18,15 @@
 #ifndef __LINUX_PRUSS_H
 #define __LINUX_PRUSS_H
 
+/**
+ * enum pruss_pru_id - PRU core identifiers
+ */
+enum pruss_pru_id {
+	PRUSS_PRU0 = 0,
+	PRUSS_PRU1,
+	PRUSS_NUM_PRUS,
+};
+
 struct pruss;
 
 #if IS_ENABLED(CONFIG_PRUSS_REMOTEPROC)
@@ -25,6 +34,9 @@ struct pruss;
 int pruss_intc_trigger(unsigned int irq);
 struct pruss *pruss_get(struct device *dev);
 void pruss_put(struct pruss *pruss);
+struct rproc *pruss_rproc_get(struct pruss *pruss,
+			      enum pruss_pru_id pru_id);
+void pruss_rproc_put(struct pruss *pruss, struct rproc *rproc);
 
 #else
 
@@ -40,6 +52,14 @@ static inline struct pruss *pruss_get(struct device *dev)
 
 static inline void pruss_put(struct pruss *pruss) { }
 
+static inline struct rproc *pruss_rproc_get(struct pruss *pruss,
+					    enum pruss_pru_id pru_id)
+{
+	return ERR_PTR(-ENOTSUPP);
+}
+
+static inline void pruss_rproc_put(struct pruss *pruss, struct rproc *rproc) { }
+
 #endif /* CONFIG_PRUSS_REMOTEPROC */
 
 #endif /* __LINUX_PRUSS_H */
-- 
1.7.5.4

