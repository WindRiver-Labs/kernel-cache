From 79d73b561df21b0c70694b8741b7debb8a76c4c1 Mon Sep 17 00:00:00 2001
From: czou <cao.zou@windriver.com>
Date: Mon, 11 Apr 2016 18:51:14 +0800
Subject: [PATCH 2/2] RT: cpu_pm: replace the spinloc with raw_spinlock in cpu
 pm

cpu pm functions are called in irq disabled, it will call spinlock
to protect the notifier, but in RT kernel, it will cause a crash
. here replace the spin lock with raw_spinlock.
crash log as follow:
BUG: sleeping function called from invalid context at
kernel/locking/rtmutex.c:917
in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/0
Preemption disabled at:[<  (null)>]   (null)

CPU: 0 PID: 0 Comm: swapper/0 Not tainted
4.1.18-rt13-WR8.0.0.0_preempt-rt+ #164
Hardware name: Generic AM33XX (Flattened Device Tree)
[<c001ac54>] (unwind_backtrace) from [<c0014034>] (show_stack+0x20/0x24)
[<c0014034>] (show_stack) from [<c08c769c>] (dump_stack+0x8c/0xb0)
[<c08c769c>] (dump_stack) from [<c006a6e0>] (___might_sleep+0x124/0x1bc)
[<c006a6e0>] (___might_sleep) from [<c08ce0c4>]
(__rt_spin_lock+0x28/0x80)
[<c08ce0c4>] (__rt_spin_lock) from [<c08ce3dc>] (rt_read_lock+0x44/0x54)
[<c08ce3dc>] (rt_read_lock) from [<c010b454>] (cpu_pm_enter+0x20/0x64)
[<c010b454>] (cpu_pm_enter) from [<c0031f9c>]
(am33xx_enter_idle+0x70/0xa0)
[<c0031f9c>] (am33xx_enter_idle) from [<c0658a1c>]
(cpuidle_enter_state+0x7c/0x328)
[<c0658a1c>] (cpuidle_enter_state) from [<c0658d18>]
(cpuidle_enter+0x24/0x28)
[<c0658d18>] (cpuidle_enter) from [<c0084cec>]
(cpu_startup_entry+0x258/0x4e8)
[<c0084cec>] (cpu_startup_entry) from [<c08c00f8>] (rest_init+0x84/0x9c)
[<c08c00f8>] (rest_init) from [<c0c81ccc>] (start_kernel+0x37c/0x3f4)

Signed-off-by: czou <cao.zou@windriver.com>
---
 kernel/cpu_pm.c |   26 +++++++++++++-------------
 1 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/kernel/cpu_pm.c b/kernel/cpu_pm.c
index 9656a3c..88c69b9 100644
--- a/kernel/cpu_pm.c
+++ b/kernel/cpu_pm.c
@@ -22,7 +22,7 @@
 #include <linux/spinlock.h>
 #include <linux/syscore_ops.h>
 
-static DEFINE_RWLOCK(cpu_pm_notifier_lock);
+static DEFINE_RAW_SPINLOCK(cpu_pm_notifier_lock);
 static RAW_NOTIFIER_HEAD(cpu_pm_notifier_chain);
 
 static int cpu_pm_notify(enum cpu_pm_event event, int nr_to_call, int *nr_calls)
@@ -50,9 +50,9 @@ int cpu_pm_register_notifier(struct notifier_block *nb)
 	unsigned long flags;
 	int ret;
 
-	write_lock_irqsave(&cpu_pm_notifier_lock, flags);
+	raw_spin_lock_irqsave(&cpu_pm_notifier_lock, flags);
 	ret = raw_notifier_chain_register(&cpu_pm_notifier_chain, nb);
-	write_unlock_irqrestore(&cpu_pm_notifier_lock, flags);
+	raw_spin_unlock_irqrestore(&cpu_pm_notifier_lock, flags);
 
 	return ret;
 }
@@ -72,9 +72,9 @@ int cpu_pm_unregister_notifier(struct notifier_block *nb)
 	unsigned long flags;
 	int ret;
 
-	write_lock_irqsave(&cpu_pm_notifier_lock, flags);
+	raw_spin_lock_irqsave(&cpu_pm_notifier_lock, flags);
 	ret = raw_notifier_chain_unregister(&cpu_pm_notifier_chain, nb);
-	write_unlock_irqrestore(&cpu_pm_notifier_lock, flags);
+	raw_spin_unlock_irqrestore(&cpu_pm_notifier_lock, flags);
 
 	return ret;
 }
@@ -100,7 +100,7 @@ int cpu_pm_enter(void)
 	int nr_calls;
 	int ret = 0;
 
-	read_lock(&cpu_pm_notifier_lock);
+	raw_spin_lock(&cpu_pm_notifier_lock);
 	ret = cpu_pm_notify(CPU_PM_ENTER, -1, &nr_calls);
 	if (ret)
 		/*
@@ -108,7 +108,7 @@ int cpu_pm_enter(void)
 		 * PM entry who are notified earlier to prepare for it.
 		 */
 		cpu_pm_notify(CPU_PM_ENTER_FAILED, nr_calls - 1, NULL);
-	read_unlock(&cpu_pm_notifier_lock);
+	raw_spin_unlock(&cpu_pm_notifier_lock);
 
 	return ret;
 }
@@ -130,9 +130,9 @@ int cpu_pm_exit(void)
 {
 	int ret;
 
-	read_lock(&cpu_pm_notifier_lock);
+	raw_spin_lock(&cpu_pm_notifier_lock);
 	ret = cpu_pm_notify(CPU_PM_EXIT, -1, NULL);
-	read_unlock(&cpu_pm_notifier_lock);
+	raw_spin_unlock(&cpu_pm_notifier_lock);
 
 	return ret;
 }
@@ -159,7 +159,7 @@ int cpu_cluster_pm_enter(void)
 	int nr_calls;
 	int ret = 0;
 
-	read_lock(&cpu_pm_notifier_lock);
+	raw_spin_lock(&cpu_pm_notifier_lock);
 	ret = cpu_pm_notify(CPU_CLUSTER_PM_ENTER, -1, &nr_calls);
 	if (ret)
 		/*
@@ -167,7 +167,7 @@ int cpu_cluster_pm_enter(void)
 		 * PM entry who are notified earlier to prepare for it.
 		 */
 		cpu_pm_notify(CPU_CLUSTER_PM_ENTER_FAILED, nr_calls - 1, NULL);
-	read_unlock(&cpu_pm_notifier_lock);
+	raw_spin_unlock(&cpu_pm_notifier_lock);
 
 	return ret;
 }
@@ -192,9 +192,9 @@ int cpu_cluster_pm_exit(void)
 {
 	int ret;
 
-	read_lock(&cpu_pm_notifier_lock);
+	raw_spin_lock(&cpu_pm_notifier_lock);
 	ret = cpu_pm_notify(CPU_CLUSTER_PM_EXIT, -1, NULL);
-	read_unlock(&cpu_pm_notifier_lock);
+	raw_spin_unlock(&cpu_pm_notifier_lock);
 
 	return ret;
 }
-- 
1.7.5.4

