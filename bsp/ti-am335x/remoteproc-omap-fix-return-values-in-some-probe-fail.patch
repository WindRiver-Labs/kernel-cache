From b697be3bdd93536a277bc9a0a74041f77b05ece1 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 20 Mar 2017 15:03:38 -0500
Subject: [PATCH 594/895] remoteproc/omap: fix return values in some probe
 failure paths

The OMAP remoteproc probe is returning success on some failure
code paths, even though the function actually failed and all
necessary cleanup has been performed. This results in an invalid
device being bound to the driver from the driver core perspective
and causes a crash when the driver's remove function is invoked
on this failed rproc device during the removal of the module.
Fix these failure code paths by initializing the return variable
appropriately.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit 5248202918e6579ec436d5dec79101e6f106c26f)
---
 drivers/remoteproc/omap_remoteproc.c |   15 +++++++++++----
 1 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/drivers/remoteproc/omap_remoteproc.c b/drivers/remoteproc/omap_remoteproc.c
index 1b6f06e..f34441a 100644
--- a/drivers/remoteproc/omap_remoteproc.c
+++ b/drivers/remoteproc/omap_remoteproc.c
@@ -1212,19 +1212,26 @@ static int omap_rproc_probe(struct platform_device *pdev)
 
 	init_completion(&oproc->pm_comp);
 	oproc->autosuspend_delay = omap_rproc_get_autosuspend_delay(pdev);
-	if (oproc->autosuspend_delay < 0)
+	if (oproc->autosuspend_delay < 0) {
+		ret = oproc->autosuspend_delay;
 		goto free_rproc;
+	}
 
 	ret = of_property_read_u32(np, "ti,rproc-standby-info", &standby_addr);
-	if (ret || !standby_addr)
+	if (ret || !standby_addr) {
+		ret = !standby_addr ? -EINVAL : ret;
 		goto free_rproc;
+	}
 
 	oproc->standby_addr = devm_ioremap(&pdev->dev, standby_addr,
 					   sizeof(u32));
-	if (!oproc->standby_addr)
+	if (!oproc->standby_addr) {
+		ret = -ENOMEM;
 		goto free_rproc;
+	}
 
-	if (of_reserved_mem_device_init(&pdev->dev)) {
+	ret = of_reserved_mem_device_init(&pdev->dev);
+	if (ret) {
 		dev_err(&pdev->dev, "device does not have specific CMA pool\n");
 		goto free_rproc;
 	}
-- 
1.7.5.4

