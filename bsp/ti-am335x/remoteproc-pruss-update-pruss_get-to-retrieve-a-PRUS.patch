From 86e52b0614c46e17e3e9d68521500326c52409e7 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 5 Jun 2017 16:03:19 -0500
Subject: [PATCH 608/895] remoteproc/pruss: update pruss_get() to retrieve a
 PRUSS id

Update the pruss_get() function to take in an additional integer
pointer argument in which the PRUSS instance id is filled in and
provided back to the callers. This allows the drivers to add some
instance-specific logic/customization in their code, as the PRUSS
handle is not useful to build this logic.

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
(cherry picked from commit 76954fe54525fcb5a980ad7c27ff1ba8965e0d00)
---
 drivers/remoteproc/pruss.c |   11 +++++++++--
 include/linux/pruss.h      |    4 ++--
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index fba4b77..e976038 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -52,9 +52,14 @@ static LIST_HEAD(pruss_list);
 /**
  * pruss_get() - get the pruss for the given device
  * @dev: device interested in the pruss
+ * @pruss_id: integer pointer to fill in the pruss instance id
  *
  * Finds the pruss device referenced by the "pruss" property in the
- * requesting (client) device's device node.
+ * requesting (client) device's device node. The function will also
+ * return the PRUSS instance id to requestors if @pruss_id is provided.
+ * This can be used by PRU client drivers to distinguish between
+ * multiple PRUSS instances, and build some customization around a
+ * specific PRUSS instance.
  *
  * This function increments the pruss device's refcount, so always
  * use pruss_put() to decrement it back once pruss isn't needed anymore.
@@ -64,7 +69,7 @@ static LIST_HEAD(pruss_list);
  * -EINVAL if invalid parameter
  * -EPROBE_DEFER if the pruss device is not yet available
  */
-struct pruss *pruss_get(struct device *dev)
+struct pruss *pruss_get(struct device *dev, int *pruss_id)
 {
 	struct pruss *pruss = NULL, *p;
 	struct device_node *np;
@@ -82,6 +87,8 @@ struct pruss *pruss_get(struct device *dev)
 		if (p->dev->of_node == np) {
 			pruss = p;
 			get_device(pruss->dev);
+			if (pruss_id)
+				*pruss_id = pruss->id;
 			break;
 		}
 	}
diff --git a/include/linux/pruss.h b/include/linux/pruss.h
index 8551763..5ab8c34 100644
--- a/include/linux/pruss.h
+++ b/include/linux/pruss.h
@@ -82,7 +82,7 @@ struct pruss;
 #if IS_ENABLED(CONFIG_PRUSS_REMOTEPROC)
 
 int pruss_intc_trigger(unsigned int irq);
-struct pruss *pruss_get(struct device *dev);
+struct pruss *pruss_get(struct device *dev, int *pruss_id);
 void pruss_put(struct pruss *pruss);
 struct rproc *pruss_rproc_get(struct pruss *pruss,
 			      enum pruss_pru_id pru_id);
@@ -104,7 +104,7 @@ static inline int pruss_intc_trigger(unsigned int irq)
 	return -ENOTSUPP;
 }
 
-static inline struct pruss *pruss_get(struct device *dev)
+static inline struct pruss *pruss_get(struct device *dev, int *pruss_id)
 {
 	return ERR_PTR(-ENOTSUPP);
 }
-- 
1.7.5.4

