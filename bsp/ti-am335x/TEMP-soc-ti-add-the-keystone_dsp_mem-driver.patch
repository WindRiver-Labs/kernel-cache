From 2150265fffeec6f6bb722376eab6ce9772fb2d0d Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Wed, 15 Feb 2017 12:22:18 -0600
Subject: [PATCH 671/895] TEMP: soc: ti: add the keystone_dsp_mem driver

A very simple keystone_dsp_mem driver has been added for TI's
Keystone 2 family of SoCs. This driver provides a user-space
mapping interface for some on-chip Multicore Shared Memory (MSM)
SRAM Memory regions and some portions of the platform board's
DDR memory. This is done to enable the Multi Proc Manager (MPM)
based loader for loading different firmware images into both
DDR and on-chip SRAM in userspace for the various C66 DSP
co-processors on the SoC.

The different MSM RAM regions to be exposed to userspace through
this driver need to be defined as 'reserved' child nodes under
the parent MSM RAM mmio-sram node with a specific compatible
"ti,keystone-dsp-msm-ram" property. Each of the DDR regions to
be exposed are defined using reserved-memory nodes and linked
to the driver through an appropriate 'reg' entry value in the
dspmem node. Multiple discrete regions of either SRAM and/or DDR
can be exposed to userspace by defining similar DTS nodes.

The mapping interfaces are provided through a miscdevice,
expected to have a device name (currently /dev/dspmem, derived
from DT node name) matching the usage within MPM. The mmap logic
itself is based on a mechanism used within the UIO framework.

TODO:
Evaluate the need for a 'dspmem' node as it is not a traditional
hardware device.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit ee75ee1e6fedd6f429537a23e6957dfe0aa28453)
---
 drivers/soc/ti/Kconfig                |   11 ++
 drivers/soc/ti/Makefile               |    1 +
 drivers/soc/ti/keystone_dsp_mem.c     |  247 +++++++++++++++++++++++++++++++++
 include/uapi/linux/Kbuild             |    1 +
 include/uapi/linux/keystone_dsp_mem.h |   20 +++
 5 files changed, 280 insertions(+), 0 deletions(-)
 create mode 100644 drivers/soc/ti/keystone_dsp_mem.c
 create mode 100644 include/uapi/linux/keystone_dsp_mem.h

diff --git a/drivers/soc/ti/Kconfig b/drivers/soc/ti/Kconfig
index 11a47e6..7b7f409 100644
--- a/drivers/soc/ti/Kconfig
+++ b/drivers/soc/ti/Kconfig
@@ -6,6 +6,17 @@ menuconfig SOC_TI
 
 if SOC_TI
 
+config KEYSTONE_DSP_MEM
+	tristate "TI Keystone DSP Memory Mapping Driver"
+	depends on ARCH_KEYSTONE
+	help
+	  Userspace memory mapping interface driver for TI Keystone SoCs.
+	  Provides access to MSM SRAM memory region and dedicated DDR
+	  carveout memory regions to user space to aid userspace loading
+	  of the DSPs within the SoC.
+
+	  If unsure, say N.
+
 config KEYSTONE_NAVIGATOR_QMSS
 	tristate "Keystone Queue Manager Sub System"
 	depends on ARCH_KEYSTONE
diff --git a/drivers/soc/ti/Makefile b/drivers/soc/ti/Makefile
index d9bd4ba..e59a59c 100644
--- a/drivers/soc/ti/Makefile
+++ b/drivers/soc/ti/Makefile
@@ -1,6 +1,7 @@
 #
 # TI Keystone SOC drivers
 #
+obj-$(CONFIG_KEYSTONE_DSP_MEM)		+= keystone_dsp_mem.o
 obj-$(CONFIG_KEYSTONE_NAVIGATOR_QMSS)	+= knav_qmss.o
 knav_qmss-y := knav_qmss_queue.o knav_qmss_acc.o
 obj-$(CONFIG_KEYSTONE_NAVIGATOR_DMA)	+= knav_dma.o
diff --git a/drivers/soc/ti/keystone_dsp_mem.c b/drivers/soc/ti/keystone_dsp_mem.c
new file mode 100644
index 0000000..bc7c4e5
--- /dev/null
+++ b/drivers/soc/ti/keystone_dsp_mem.c
@@ -0,0 +1,247 @@
+/*
+ * TI Keystone DSP Memory Mapping Driver
+ *
+ * Copyright (C) 2015-2017 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/uaccess.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/miscdevice.h>
+#include <linux/fs.h>
+#include <linux/mm.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <uapi/linux/keystone_dsp_mem.h>
+
+/**
+ * struct keystone_dsp_mem - internal memory structure
+ * @addr: physical address on the bus to access the memory region
+ * @size: size of the memory region
+ */
+struct keystone_dsp_mem {
+	phys_addr_t addr;
+	resource_size_t size;
+};
+
+/**
+ * struct keystone_dsp_mem_info - Keystone DSP Memory device structure
+ * @dev: device pointer
+ * @misc: child miscdevice structure
+ * @mem: memory region array pointer
+ * @num_maps: number of memory regions
+ */
+struct keystone_dsp_mem_info {
+	struct device *dev;
+	struct miscdevice misc;
+	struct keystone_dsp_mem *mem;
+	int num_maps;
+};
+
+#define to_dsp_mem_info(m) container_of(m, struct keystone_dsp_mem_info, misc)
+
+static int keystone_dsp_mem_check_addr(struct keystone_dsp_mem_info *dsp_mem,
+				       int mask, size_t size)
+{
+	struct device *dev = dsp_mem->dev;
+	size_t req_offset;
+	u32 index;
+
+	index = mask & KEYSTONE_DSP_MEM_MAP_INDEX_MASK;
+	if (index >= dsp_mem->num_maps) {
+		dev_err(dev, "invalid mmap region index %d\n", index);
+		return -EINVAL;
+	}
+
+	req_offset = (mask - index) << PAGE_SHIFT;
+	if (req_offset + size < req_offset) {
+		dev_err(dev, "invalid request - overflow, mmap offset = 0x%zx size 0x%zx region %d\n",
+			req_offset, size, index);
+		return -EINVAL;
+	}
+
+	if ((req_offset + size) > dsp_mem->mem[index].size) {
+		dev_err(dev, "invalid request - out of range, mmap offset 0x%zx size 0x%zx region %d\n",
+			req_offset, size, index);
+		return -EINVAL;
+	}
+
+	return index;
+}
+
+/*
+ * This is a custom mmap function following semantics based on the UIO
+ * mmap implementation. The vm_pgoff passed in the vma structure is a
+ * combination of the memory region index and the actual page offset in
+ * that region. This checks if user request is in valid range before
+ * providing mmap access.
+ *
+ * XXX: Evaluate this approach, as the MSMC memory can be mapped in whole
+ * into userspace as it is not super-large, and the allowable kernel
+ * unmapped DDR memory can be mmaped using traditional mmap semantics.
+ */
+static int keystone_dsp_mem_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	size_t size = vma->vm_end - vma->vm_start;
+	struct miscdevice *misc = file->private_data;
+	struct keystone_dsp_mem_info *dsp_mem = to_dsp_mem_info(misc);
+	int index;
+
+	index = keystone_dsp_mem_check_addr(dsp_mem, vma->vm_pgoff, size);
+	if (index < 0)
+		return index;
+
+	vma->vm_page_prot = phys_mem_access_prot(file,
+				(dsp_mem->mem[index].addr >> PAGE_SHIFT) +
+				(vma->vm_pgoff - index), size,
+				vma->vm_page_prot);
+
+	if (remap_pfn_range(vma, vma->vm_start,
+			    (dsp_mem->mem[index].addr >> PAGE_SHIFT) +
+			    (vma->vm_pgoff - index), size, vma->vm_page_prot))
+		return -EAGAIN;
+
+	return 0;
+}
+
+static const struct file_operations keystone_dsp_mem_fops = {
+	.owner	= THIS_MODULE,
+	.mmap	= keystone_dsp_mem_mmap,
+};
+
+static int keystone_dsp_mem_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct keystone_dsp_mem_info *dsp_mem;
+	struct miscdevice *misc;
+	struct resource *res, temp_res;
+	struct device_node *sram_np;
+	char *name;
+	int ret, i;
+	int num_maps = 0, num_sram = 0;
+
+	if (!np) {
+		dev_err(dev, "only DT-based devices are supported\n");
+		return -EINVAL;
+	}
+
+	dsp_mem = devm_kzalloc(dev, sizeof(*dsp_mem), GFP_KERNEL);
+	if (!dsp_mem)
+		return -ENOMEM;
+
+	/*
+	 * count the io resources agnostic of #address-cells and #size-cells.
+	 * could use the platform device's num_resources directly, but let's
+	 * not make any assumptions on the resources being all IOMEM resources.
+	 */
+	while (of_address_to_resource(np, num_maps, &temp_res) == 0)
+		num_maps++;
+
+	for_each_compatible_node(sram_np, NULL, "ti,keystone-dsp-msm-ram") {
+		if (!of_device_is_available(sram_np))
+			continue;
+		num_sram++;
+	}
+
+	if ((!num_maps && !num_sram) ||
+	    (num_maps + num_sram > KEYSTONE_DSP_MEM_MAP_INDEX_MASK))
+		return -EINVAL;
+
+	dsp_mem->mem = devm_kcalloc(dev, num_maps + num_sram,
+				    sizeof(*dsp_mem->mem), GFP_KERNEL);
+	if (!dsp_mem->mem)
+		return -ENOMEM;
+
+	for (i = 0; i < num_maps; i++) {
+		res = platform_get_resource(pdev, IORESOURCE_MEM, i);
+		if (!res || resource_type(res) != IORESOURCE_MEM)
+			return -EINVAL;
+		dsp_mem->mem[i].addr = res->start;
+		dsp_mem->mem[i].size = resource_size(res);
+	}
+	dsp_mem->num_maps = num_maps;
+	dsp_mem->dev = dev;
+
+	if (num_sram) {
+		for_each_compatible_node(sram_np, NULL,
+					 "ti,keystone-dsp-msm-ram") {
+			if (!of_device_is_available(sram_np))
+				continue;
+
+			ret = of_address_to_resource(sram_np, 0, &temp_res);
+			if (ret)
+				return -EINVAL;
+			dsp_mem->mem[i].addr = temp_res.start;
+			dsp_mem->mem[i].size = resource_size(&temp_res);
+			i++;
+			dsp_mem->num_maps++;
+		}
+	}
+
+	/*
+	 * construct a user-friendly device name by discarding any prefixes
+	 * from the DT-generated device name.
+	 */
+	name = strchr(dev_name(dev), '.');
+	if (!name)
+		name = strchr(dev_name(dev), ':');
+	name = name ? name + 1 : (char *)dev_name(dev);
+
+	misc = &dsp_mem->misc;
+	misc->minor = MISC_DYNAMIC_MINOR;
+	misc->name = name;
+	misc->fops = &keystone_dsp_mem_fops;
+	misc->parent = dev;
+	ret = misc_register(misc);
+	if (ret) {
+		dev_err(dev, "could not register misc device %s\n", name);
+		return ret;
+	}
+
+	platform_set_drvdata(pdev, dsp_mem);
+
+	dev_info(dev, "registered misc device %s\n", name);
+
+	return 0;
+}
+
+static int keystone_dsp_mem_remove(struct platform_device *pdev)
+{
+	struct keystone_dsp_mem_info *dsp_mem = platform_get_drvdata(pdev);
+
+	misc_deregister(&dsp_mem->misc);
+
+	return 0;
+}
+
+static const struct of_device_id keystone_dsp_mem_of_match[] = {
+	{ .compatible = "ti,keystone-dsp-mem", },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, keystone_dsp_mem_of_match);
+
+static struct platform_driver keystone_dsp_mem_driver = {
+	.probe	= keystone_dsp_mem_probe,
+	.remove	= keystone_dsp_mem_remove,
+	.driver	= {
+		.name = "keystone-dsp-mem",
+		.of_match_table = keystone_dsp_mem_of_match,
+	},
+};
+
+module_platform_driver(keystone_dsp_mem_driver);
+MODULE_AUTHOR("Suman Anna");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("TI Keystone DSP Memory Mapping Driver");
+MODULE_ALIAS("platform:keystone-dsp-mem");
diff --git a/include/uapi/linux/Kbuild b/include/uapi/linux/Kbuild
index 899e547..abfe209 100644
--- a/include/uapi/linux/Kbuild
+++ b/include/uapi/linux/Kbuild
@@ -231,6 +231,7 @@ header-y += kernel-page-flags.h
 header-y += kexec.h
 header-y += keyboard.h
 header-y += keyctl.h
+header-y += keystone_dsp_mem.h
 
 ifneq ($(wildcard $(srctree)/arch/$(SRCARCH)/include/uapi/asm/kvm.h \
 		  $(srctree)/arch/$(SRCARCH)/include/asm/kvm.h),)
diff --git a/include/uapi/linux/keystone_dsp_mem.h b/include/uapi/linux/keystone_dsp_mem.h
new file mode 100644
index 0000000..dc5b29f
--- /dev/null
+++ b/include/uapi/linux/keystone_dsp_mem.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2015-2017 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _UAPI_KEYSTONE_DSP_MEM_H_
+#define _UAPI_KEYSTONE_DSP_MEM_H_
+
+#define KEYSTONE_DSP_MEM_MAP_INDEX_MASK		(0x7)
+#define KEYSTONE_DSP_MEM_MAP_OFFSET_SHIFT	(3)
+
+#endif /* _UAPI_KEYSTONE_DSP_MEM_H_ */
-- 
1.7.5.4

