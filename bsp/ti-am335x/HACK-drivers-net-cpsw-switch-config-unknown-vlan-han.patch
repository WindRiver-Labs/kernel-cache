From 40a8672580f8c01dce3bbecddf6b1a909727844e Mon Sep 17 00:00:00 2001
From: Mugunthan V N <mugunthanvnm@ti.com>
Date: Tue, 21 Jul 2015 11:33:30 +0530
Subject: [PATCH 271/800] HACK: drivers: net: cpsw: switch-config: unknown
 vlan handling

Currently only known VLAN id packets are handled inside the switch,
when an unknown VLAN is received, the switch will drop the packets.
This ioctl allows user to subscribe the ports for unknown VLAN id
packet forwarding with combinations like packet with multicst destination
address present which is present in ALE table with unknown VLAN id and
packet with multicast destination address which is not present in ALE
table with unknown VLAN id, then switch will start forwarding these
packets as per configured by the user. Additional features of the
unknown vlan handling of the switch other than port forwarding is to
untag on egress for external ports.

Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
Signed-off-by: Sekhar Nori <nsekhar@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/net/ethernet/ti/cpsw.c         |   22 ++++++++++++++++++++++
 include/uapi/linux/net_switch_config.h |    5 +++++
 2 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/ti/cpsw.c b/drivers/net/ethernet/ti/cpsw.c
index 28c7a7f..b4bb537 100644
--- a/drivers/net/ethernet/ti/cpsw.c
+++ b/drivers/net/ethernet/ti/cpsw.c
@@ -1658,6 +1658,28 @@ static int cpsw_switch_config_ioctl(struct net_device *ndev,
 		ret = copy_to_user(ifrq->ifr_data, &config, sizeof(config));
 		break;
 	}
+	case CONFIG_SWITCH_ADD_UNKNOWN_VLAN_INFO:
+		if ((config.unknown_vlan_member <= 7) &&
+		    (config.unknown_vlan_untag <= 7) &&
+		    (config.unknown_vlan_unreg_multi <= 7) &&
+		    (config.unknown_vlan_reg_multi <= 7)) {
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNTAGGED_EGRESS,
+					     config.unknown_vlan_untag);
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNKNOWN_REG_MCAST_FLOOD,
+					     config.unknown_vlan_reg_multi);
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNKNOWN_MCAST_FLOOD,
+					     config.unknown_vlan_unreg_multi);
+			cpsw_ale_control_set(priv->ale, 0,
+					     ALE_PORT_UNKNOWN_VLAN_MEMBER,
+					     config.unknown_vlan_member);
+			ret = 0;
+		} else {
+			dev_err(priv->dev, "Invalid Unknown VLAN Arguments\n");
+		}
+		break;
 
 	default:
 		ret = -EOPNOTSUPP;
diff --git a/include/uapi/linux/net_switch_config.h b/include/uapi/linux/net_switch_config.h
index 05ba057..87b2b7b 100644
--- a/include/uapi/linux/net_switch_config.h
+++ b/include/uapi/linux/net_switch_config.h
@@ -28,6 +28,7 @@ enum {
 	CONFIG_SWITCH_DEL_VLAN,
 	CONFIG_SWITCH_SET_PORT_CONFIG,
 	CONFIG_SWITCH_GET_PORT_CONFIG,
+	CONFIG_SWITCH_ADD_UNKNOWN_VLAN_INFO,
 };
 
 /*
@@ -43,6 +44,10 @@ struct net_switch_config {
 	unsigned char	untag_port;	/* Untag ports */
 	unsigned char	addr[6];
 	unsigned int	super;
+	unsigned char	unknown_vlan_member;
+	unsigned char	unknown_vlan_untag;
+	unsigned int	unknown_vlan_unreg_multi;
+	unsigned int	unknown_vlan_reg_multi;
 	struct ethtool_cmd ecmd;
 
 	unsigned int ret_type;   /* Return  Success/Failure */
-- 
1.7.5.4

