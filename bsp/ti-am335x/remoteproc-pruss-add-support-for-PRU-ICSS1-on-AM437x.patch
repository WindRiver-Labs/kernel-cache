From 7915330acd020a886ce60177ab7022c8c0d026da Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Thu, 2 Feb 2017 17:17:55 -0600
Subject: [PATCH 572/895] remoteproc/pruss: add support for PRU-ICSS1 on
 AM437x SoCs

Enhance all the PRUSS platform drivers to support the PRU-ICSS1
sub-system on the AM437x family of SoCs. AM437x has two PRU-ICSS
instances, and support has been added only for the PRU-ICSS1 at
the moment. PRU-ICSS1 on AM437x is very similar to the PRU-ICSS
on AM33xx except for few minor differences - increased Instruction
RAM, increased Shared Data RAM2, and 1 less interrupt (PRUSS host
interrupt 7 which is redirected to the other PRUSS) towards the
MPU INTC.

The adaptation uses a newly introduced pruss_match_private_data
structure and the pruss_get_private_data() function to retrieve
a PRUSS instance specific data using a device-name based lookup
logic. This will ease the scalability for supporting multiple
instances like the additional PRUSS0 on AM43xx SoC or both the
PRUSS instances on AM57xx SoCs and 66AK2G SoCs.

The initial names for the firmware images for each PRU core are
expected to be as follows (these can be adjusted through sysfs
if required):
     PRU-ICSS1 PRU0 Core: am437x-pru1_0-fw
     PRU-ICSS1 PRU1 Core: am437x-pru1_1-fw

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Andrew F. Davis <afd@ti.com>
(cherry picked from commit e53ace08bea95dcb966e36eb7fadca8062ac5f9e)
---
 drivers/remoteproc/Kconfig         |    2 +-
 drivers/remoteproc/pru_rproc.c     |   27 +++++++++++
 drivers/remoteproc/pruss.c         |   88 +++++++++++++++++++++++++++++++++--
 drivers/remoteproc/pruss_intc.c    |   31 ++++++++++++-
 drivers/remoteproc/pruss_soc_bus.c |    5 ++
 5 files changed, 146 insertions(+), 7 deletions(-)

diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index 1119096..c176031 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -95,7 +95,7 @@ config DA8XX_REMOTEPROC
 
 config PRUSS_REMOTEPROC
 	tristate "TI PRUSS remoteproc support"
-	depends on HAS_DMA && SOC_AM33XX
+	depends on HAS_DMA && (SOC_AM33XX || SOC_AM43XX)
 	depends on REMOTEPROC
 	select MAILBOX
 	select OMAP2PLUS_MBOX
diff --git a/drivers/remoteproc/pru_rproc.c b/drivers/remoteproc/pru_rproc.c
index 897b98c..40a284b 100644
--- a/drivers/remoteproc/pru_rproc.c
+++ b/drivers/remoteproc/pru_rproc.c
@@ -775,6 +775,17 @@ static struct pru_private_data am335x_pru1_rproc_pdata = {
 	.fw_name = "am335x-pru1-fw",
 };
 
+/* AM437x PRUSS1 PRU core-specific private data */
+static struct pru_private_data am437x_pru1_0_rproc_pdata = {
+	.id = 0,
+	.fw_name = "am437x-pru1_0-fw",
+};
+
+static struct pru_private_data am437x_pru1_1_rproc_pdata = {
+	.id = 1,
+	.fw_name = "am437x-pru1_1-fw",
+};
+
 /* AM33xx SoC-specific PRU Device data */
 static struct pru_match_private_data am335x_pru_match_data[] = {
 	{
@@ -790,8 +801,24 @@ static struct pru_match_private_data am335x_pru_match_data[] = {
 	},
 };
 
+/* AM43xx SoC-specific PRU Device data */
+static struct pru_match_private_data am437x_pru_match_data[] = {
+	{
+		.device_name	= "54434000.pru0",
+		.priv_data	= &am437x_pru1_0_rproc_pdata,
+	},
+	{
+		.device_name	= "54438000.pru1",
+		.priv_data	= &am437x_pru1_1_rproc_pdata,
+	},
+	{
+		/* sentinel */
+	},
+};
+
 static const struct of_device_id pru_rproc_match[] = {
 	{ .compatible = "ti,am3356-pru", .data = am335x_pru_match_data, },
+	{ .compatible = "ti,am4376-pru", .data = am437x_pru_match_data, },
 	{},
 };
 MODULE_DEVICE_TABLE(of, pru_rproc_match);
diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index 1276012..a4e71c6 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -21,9 +21,45 @@
 
 #include "pruss.h"
 
-static struct of_dev_auxdata pruss_rproc_auxdata_lookup[];
+/**
+ * struct pruss_private_data - PRUSS driver private data
+ * @aux_data: auxiliary data used for creating the child nodes
+ */
+struct pruss_private_data {
+	struct of_dev_auxdata *aux_data;
+};
+
+/**
+ * struct pruss_match_private_data - private data to handle multiple instances
+ * @device_name: device name of the PRUSS instance
+ * @priv_data: PRUSS driver private data for this PRUSS instance
+ */
+struct pruss_match_private_data {
+	const char *device_name;
+	struct pruss_private_data *priv_data;
+};
+
 static const struct of_device_id pruss_of_match[];
 
+static const
+struct pruss_private_data *pruss_get_private_data(struct platform_device *pdev)
+{
+	const struct pruss_match_private_data *data;
+	const struct of_device_id *match;
+
+	match = of_match_device(pruss_of_match, &pdev->dev);
+	if (!match)
+		return ERR_PTR(-ENODEV);
+
+	data = match->data;
+	for (; data && data->device_name; data++) {
+		if (!strcmp(dev_name(&pdev->dev), data->device_name))
+			return data->priv_data;
+	}
+
+	return NULL;
+}
+
 static int pruss_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -31,6 +67,7 @@ static int pruss_probe(struct platform_device *pdev)
 	struct pruss *pruss;
 	struct resource *res;
 	int ret, i;
+	const struct pruss_private_data *data;
 	const char *mem_names[PRUSS_MEM_MAX] = { "dram0", "dram1", "shrdram2",
 						 "cfg", "iep", "mii_rt" };
 
@@ -39,6 +76,12 @@ static int pruss_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
+	data = pruss_get_private_data(pdev);
+	if (IS_ERR_OR_NULL(data)) {
+		dev_err(dev, "missing private data\n");
+		return -ENODEV;
+	}
+
 	ret = dma_set_coherent_mask(dev, DMA_BIT_MASK(32));
 	if (ret) {
 		dev_err(dev, "dma_set_coherent_mask: %d\n", ret);
@@ -71,8 +114,7 @@ static int pruss_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, pruss);
 
 	dev_info(&pdev->dev, "creating PRU cores and other child platform devices\n");
-	ret = of_platform_populate(node, NULL, pruss_rproc_auxdata_lookup,
-				   &pdev->dev);
+	ret = of_platform_populate(node, NULL, data->aux_data, &pdev->dev);
 	if (ret)
 		dev_err(dev, "of_platform_populate failed\n");
 
@@ -99,14 +141,50 @@ static int pruss_remove(struct platform_device *pdev)
  *      PRU device names with an identifier like xxxxxxxx.pru0 agnostic of
  *      name defined in device tree.
  */
-static struct of_dev_auxdata pruss_rproc_auxdata_lookup[] = {
+static struct of_dev_auxdata am335x_pruss_rproc_auxdata_lookup[] = {
 	OF_DEV_AUXDATA("ti,am3356-pru", 0x4a334000, "4a334000.pru0", NULL),
 	OF_DEV_AUXDATA("ti,am3356-pru", 0x4a338000, "4a338000.pru1", NULL),
 	{ /* sentinel */ },
 };
 
+static struct of_dev_auxdata am437x_pruss1_rproc_auxdata_lookup[] = {
+	OF_DEV_AUXDATA("ti,am4376-pru", 0x54434000, "54434000.pru0", NULL),
+	OF_DEV_AUXDATA("ti,am4376-pru", 0x54438000, "54438000.pru1", NULL),
+	{ /* sentinel */ },
+};
+
+/* instance-specific driver private data */
+static struct pruss_private_data am335x_pruss_priv_data = {
+	.aux_data = am335x_pruss_rproc_auxdata_lookup,
+};
+
+static struct pruss_private_data am437x_pruss1_priv_data = {
+	.aux_data = am437x_pruss1_rproc_auxdata_lookup,
+};
+
+static struct pruss_match_private_data am335x_match_data[] = {
+	{
+		.device_name	= "4a300000.pruss",
+		.priv_data	= &am335x_pruss_priv_data,
+	},
+	{
+		/* sentinel */
+	},
+};
+
+static struct pruss_match_private_data am437x_match_data[] = {
+	{
+		.device_name	= "54400000.pruss",
+		.priv_data	= &am437x_pruss1_priv_data,
+	},
+	{
+		/* sentinel */
+	},
+};
+
 static const struct of_device_id pruss_of_match[] = {
-	{ .compatible = "ti,am3356-pruss", },
+	{ .compatible = "ti,am3356-pruss", .data = &am335x_match_data, },
+	{ .compatible = "ti,am4376-pruss", .data = &am437x_match_data, },
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, pruss_of_match);
diff --git a/drivers/remoteproc/pruss_intc.c b/drivers/remoteproc/pruss_intc.c
index 6962a35..72c2494 100644
--- a/drivers/remoteproc/pruss_intc.c
+++ b/drivers/remoteproc/pruss_intc.c
@@ -31,6 +31,14 @@ static const char * const irq_names[] = {
 };
 
 /**
+ * struct pruss_intc_match_data - match data to handle SoC variations
+ * @no_host7_intr: flag denoting the absence of host7 interrupt into MPU
+ */
+struct pruss_intc_match_data {
+	bool no_host7_intr;
+};
+
+/**
  * struct pruss_intc - PRUSS interrupt controller structure
  * @pruss: back-reference to parent PRUSS structure
  * @irqs: kernel irq numbers corresponding to PRUSS host interrupts
@@ -458,6 +466,8 @@ err:
 	chained_irq_exit(chip, desc);
 }
 
+static const struct of_device_id pruss_intc_of_match[];
+
 static int pruss_intc_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -466,6 +476,11 @@ static int pruss_intc_probe(struct platform_device *pdev)
 	struct resource *res;
 	struct irq_chip *irqchip;
 	int i, irq;
+	const struct pruss_intc_match_data *data;
+	bool skip_host7;
+
+	data = of_match_device(pruss_intc_of_match, dev)->data;
+	skip_host7 = data ? data->no_host7_intr : false;
 
 	intc = devm_kzalloc(dev, sizeof(*intc), GFP_KERNEL);
 	if (!intc)
@@ -517,6 +532,9 @@ static int pruss_intc_probe(struct platform_device *pdev)
 	for (i = 0; i < MAX_HOST_NUM_IRQS; i++) {
 		irq = platform_get_irq_byname(pdev, irq_names[i]);
 		if (irq < 0) {
+			if (!strcmp(irq_names[i], "host7") && !!skip_host7)
+				continue;
+
 			dev_err(dev, "platform_ger_irq_byname failed for %s : %d\n",
 				irq_names[i], irq);
 			goto fail_irq;
@@ -549,8 +567,19 @@ static int pruss_intc_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static struct pruss_intc_match_data am437x_pruss_intc_data = {
+	.no_host7_intr = true,
+};
+
 static const struct of_device_id pruss_intc_of_match[] = {
-	{ .compatible = "ti,am3356-pruss-intc", },
+	{
+		.compatible = "ti,am3356-pruss-intc",
+		.data = NULL,
+	},
+	{
+		.compatible = "ti,am4376-pruss-intc",
+		.data = &am437x_pruss_intc_data,
+	},
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, pruss_intc_of_match);
diff --git a/drivers/remoteproc/pruss_soc_bus.c b/drivers/remoteproc/pruss_soc_bus.c
index 55c2d01..101b930db 100644
--- a/drivers/remoteproc/pruss_soc_bus.c
+++ b/drivers/remoteproc/pruss_soc_bus.c
@@ -142,8 +142,13 @@ static struct pruss_soc_bus_match_data am335x_data = {
 	.has_reset = true,
 };
 
+static struct pruss_soc_bus_match_data am437x_data = {
+	.has_reset = true,
+};
+
 static const struct of_device_id pruss_soc_bus_of_match[] = {
 	{ .compatible = "ti,am3356-pruss-soc-bus", .data = &am335x_data, },
+	{ .compatible = "ti,am4376-pruss-soc-bus", .data = &am437x_data, },
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, pruss_soc_bus_of_match);
-- 
1.7.5.4

