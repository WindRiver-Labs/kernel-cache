From 5c58a19f5bc032c82f2d0efd6c2bc439396031d8 Mon Sep 17 00:00:00 2001
From: Sekhar Nori <nsekhar@ti.com>
Date: Fri, 16 Oct 2015 18:15:55 +0530
Subject: [PATCH 600/800] irqchip: omap-intc: add support for spurious irq
 handling

Under some conditions, irq sorting procedure used
by INTC can go wrong resulting in a spurious irq
getting reported.

If this condition is not handled, it results in
endless stream of:

    unexpected IRQ trap at vector 00

messages from ack_bad_irq()

Handle the spurious interrupt condition in omap-intc
driver to prevent this.

Signed-off-by: Sekhar Nori <nsekhar@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/irqchip/irq-omap-intc.c |   18 ++++++++++++++++++
 1 files changed, 18 insertions(+), 0 deletions(-)

diff --git a/drivers/irqchip/irq-omap-intc.c b/drivers/irqchip/irq-omap-intc.c
index a569c6d..9c0859a 100644
--- a/drivers/irqchip/irq-omap-intc.c
+++ b/drivers/irqchip/irq-omap-intc.c
@@ -21,6 +21,8 @@
 #include <linux/of.h>
 #include <linux/of_address.h>
 #include <linux/of_irq.h>
+#include <linux/ratelimit.h>
+#include <linux/printk.h>
 
 #include "irqchip.h"
 
@@ -48,6 +50,7 @@
 #define INTC_ILR0		0x0100
 
 #define ACTIVEIRQ_MASK		0x7f	/* omap2/3 active interrupt bits */
+#define SPURIOUSIRQ_MASK	(0x1ffffff << 7)
 #define INTCPS_NR_ILR_REGS	128
 #define INTCPS_NR_MIR_REGS	4
 
@@ -347,6 +350,21 @@ out:
 			break;
 
 		irqnr = intc_readl(INTC_SIR);
+
+		/*
+		 * A spurious IRQ can result if interrupt that triggered the
+		 * sorting is no longer active during the sorting (10 INTC
+		 * functional clock cycles after interrupt assertion). Or a
+		 * change in interrupt mask affected the result during sorting
+		 * time. There is no special handling required except ignoring
+		 * the SIR register value just read and retrying.
+		 * See section 6.2.5 of AM335x TRM Literature Number: SPRUH73K
+		 */
+		if ((irqnr & SPURIOUSIRQ_MASK) == SPURIOUSIRQ_MASK) {
+			pr_debug_ratelimited("%s: spurious irq!\n", __func__);
+			break;
+		}
+
 		irqnr &= ACTIVEIRQ_MASK;
 
 		if (irqnr) {
-- 
1.7.5.4

