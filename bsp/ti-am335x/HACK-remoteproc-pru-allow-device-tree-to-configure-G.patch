From f573e1000d69bf91c8141f3d3ff78d1f84065ab8 Mon Sep 17 00:00:00 2001
From: Roger Quadros <rogerq@ti.com>
Date: Wed, 15 Jun 2016 14:57:42 -0500
Subject: [PATCH 587/895] HACK: remoteproc/pru: allow device tree to configure
 GP_MUX_SEL

Add support for the property "ti,pruss-gp-mux-mode" in the device
tree that will configure a PRU core's GP_MUX_SEL value in the
PRUSS_GPCFG register.

This property is currently limited only for AM571x-IDK board and
for the PRU Ethernet usecase, due to the inherent pinmux choices
made for 6-port (4 PRU + 2 CPSW) Ethernet functionality.

Signed-off-by: Roger Quadros <rogerq@ti.com>
[s-anna@ti.com: restrict the usage for AM571x IDK PRU Ethernet usecase]
Signed-off-by: Suman Anna <s-anna@ti.com>

(cherry picked from commit a67dccf1547546761b746f51aeb5e11125169871)
---
 .../bindings/remoteproc/ti,pruss-remoteproc.txt    |    3 +++
 drivers/remoteproc/pru_rproc.c                     |   20 ++++++++++++++++++++
 2 files changed, 23 insertions(+), 0 deletions(-)

diff --git a/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt b/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
index 862f831..639d51a 100644
--- a/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
+++ b/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
@@ -190,6 +190,9 @@ applicable for 66AK2G SoCs.
                      number,
                          "vring" - for PRU to HOST virtqueue signalling
                          "kick"  - for HOST to PRU virtqueue signalling
+- ti,pruss-gp-mux-sel : integer value of the GP MUX mode needed by an
+                        application to be run on a PRU. Currently to be used
+                        _only_ for PRU Ethernet usecase on AM571x IDK board.
 
 
 MDIO Child Node
diff --git a/drivers/remoteproc/pru_rproc.c b/drivers/remoteproc/pru_rproc.c
index 4e66aa0..190b79c 100644
--- a/drivers/remoteproc/pru_rproc.c
+++ b/drivers/remoteproc/pru_rproc.c
@@ -692,6 +692,7 @@ static int pru_rproc_probe(struct platform_device *pdev)
 	struct resource *res;
 	int i, ret;
 	const char *mem_names[PRU_MEM_MAX] = { "iram", "control", "debug" };
+	u32 mux_sel;
 
 	if (!np) {
 		dev_err(dev, "Non-DT platform device not supported\n");
@@ -786,12 +787,28 @@ static int pru_rproc_probe(struct platform_device *pdev)
 		goto put_mbox;
 	}
 
+	if (of_machine_is_compatible("ti,am5718-idk") && pru->use_eth &&
+	    !of_property_read_u32(np, "ti,pruss-gp-mux-sel", &mux_sel)) {
+		if (mux_sel < PRUSS_GP_MUX_SEL_GP ||
+		    mux_sel >= PRUSS_GP_MUX_MAX) {
+			dev_err(dev, "invalid gp_mux_sel %d\n", mux_sel);
+			ret = -EINVAL;
+			goto del_rproc;
+		}
+
+		ret = pruss_cfg_set_gpmux(pru->pruss, pru->id, mux_sel);
+		if (ret)
+			goto del_rproc;
+	}
+
 	pru_rproc_create_debug_entries(rproc);
 
 	dev_info(dev, "PRU rproc node %s probed successfully\n", np->full_name);
 
 	return 0;
 
+del_rproc:
+	rproc_del(rproc);
 put_mbox:
 	mbox_free_channel(pru->mbox);
 free_rproc:
@@ -809,6 +826,9 @@ static int pru_rproc_remove(struct platform_device *pdev)
 
 	mbox_free_channel(pru->mbox);
 
+	if (of_machine_is_compatible("ti,am5718-idk") && pru->use_eth)
+		pruss_cfg_set_gpmux(pru->pruss, pru->id, PRUSS_GP_MUX_SEL_GP);
+
 	rproc_del(rproc);
 	rproc_free(rproc);
 
-- 
1.7.5.4

