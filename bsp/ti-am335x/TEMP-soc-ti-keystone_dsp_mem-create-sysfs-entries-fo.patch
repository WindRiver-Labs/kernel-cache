From c375bf37a4563e287f8d25c966c760ef46529741 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Tue, 6 Sep 2016 14:45:29 -0500
Subject: [PATCH 672/895] TEMP: soc: ti: keystone_dsp_mem: create sysfs
 entries for memories

The keystone-dsp-mem driver is enhanced to provide sysfs entries to
allow userspace to read the address and size of supported DDR and
Multicore Shared Memory (MSM) RAM memories that are exposed to
userspace. This sysfs logic provides an agnostic way of presenting
the supported memories irrespective of how the driver acquires the
memories.

Each supported memory region is represented by its own directory,
and are created under the dspmem misc device. The directories can
be accessed under the /sys/class/misc/dspmem/ path.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit 56f72f081b1097fcb9dc2a59cba2a7e98eccc035)
---
 drivers/soc/ti/keystone_dsp_mem.c |  102 +++++++++++++++++++++++++++++++++++++
 1 files changed, 102 insertions(+), 0 deletions(-)

diff --git a/drivers/soc/ti/keystone_dsp_mem.c b/drivers/soc/ti/keystone_dsp_mem.c
index bc7c4e5..37313da 100644
--- a/drivers/soc/ti/keystone_dsp_mem.c
+++ b/drivers/soc/ti/keystone_dsp_mem.c
@@ -28,12 +28,16 @@
  * struct keystone_dsp_mem - internal memory structure
  * @addr: physical address on the bus to access the memory region
  * @size: size of the memory region
+ * @kobj: kobject for the sysfs directory file
  */
 struct keystone_dsp_mem {
 	phys_addr_t addr;
 	resource_size_t size;
+	struct kobject kobj;
 };
 
+#define to_dsp_mem(obj) container_of(obj, struct keystone_dsp_mem, kobj)
+
 /**
  * struct keystone_dsp_mem_info - Keystone DSP Memory device structure
  * @dev: device pointer
@@ -50,6 +54,95 @@ struct keystone_dsp_mem_info {
 
 #define to_dsp_mem_info(m) container_of(m, struct keystone_dsp_mem_info, misc)
 
+static ssize_t mem_addr_show(struct keystone_dsp_mem *mem, char *buf)
+{
+	return sprintf(buf, "%pa\n", &mem->addr);
+}
+
+static ssize_t mem_size_show(struct keystone_dsp_mem *mem, char *buf)
+{
+	return sprintf(buf, "%pa\n", &mem->size);
+}
+
+struct mem_sysfs_entry {
+	struct attribute attr;
+	ssize_t (*show)(struct keystone_dsp_mem *, char *);
+	ssize_t (*store)(struct keystone_dsp_mem *, const char *, size_t);
+};
+
+static struct mem_sysfs_entry addr_attribute =
+	__ATTR(addr, 0444, mem_addr_show, NULL);
+static struct mem_sysfs_entry size_attribute =
+	__ATTR(size, 0444, mem_size_show, NULL);
+
+static struct attribute *attrs[] = {
+	&addr_attribute.attr,
+	&size_attribute.attr,
+	NULL,	/* sentinel */
+};
+
+static ssize_t mem_type_show(struct kobject *kobj, struct attribute *attr,
+			     char *buf)
+{
+	struct keystone_dsp_mem *mem = to_dsp_mem(kobj);
+	struct mem_sysfs_entry *entry;
+
+	entry = container_of(attr, struct mem_sysfs_entry, attr);
+	if (!entry->show)
+		return -EIO;
+
+	return entry->show(mem, buf);
+}
+
+static const struct sysfs_ops mem_sysfs_ops = {
+	.show = mem_type_show,
+};
+
+static struct kobj_type mem_attr_type = {
+	.sysfs_ops	= &mem_sysfs_ops,
+	.default_attrs	= attrs,
+};
+
+static int keystone_dsp_mem_add_attrs(struct keystone_dsp_mem_info *dsp_mem)
+{
+	int i, ret;
+	struct keystone_dsp_mem *mem;
+	struct kobject *kobj_parent = &dsp_mem->misc.this_device->kobj;
+
+	for (i = 0; i < dsp_mem->num_maps; i++) {
+		mem = &dsp_mem->mem[i];
+		kobject_init(&mem->kobj, &mem_attr_type);
+		ret = kobject_add(&mem->kobj, kobj_parent, "memory%d", i);
+		if (ret)
+			goto err_add_kobj;
+		ret = kobject_uevent(&mem->kobj, KOBJ_ADD);
+		if (ret)
+			goto err_event;
+	}
+
+	return 0;
+
+err_event:
+	i--;
+err_add_kobj:
+	for (; i >= 0; i--) {
+		mem = &dsp_mem->mem[i];
+		kobject_put(&mem->kobj);
+	}
+	return ret;
+}
+
+static void keystone_dsp_mem_del_attrs(struct keystone_dsp_mem_info *dsp_mem)
+{
+	int i;
+	struct keystone_dsp_mem *mem;
+
+	for (i = 0; i < dsp_mem->num_maps; i++) {
+		mem = &dsp_mem->mem[i];
+		kobject_put(&mem->kobj);
+	}
+}
+
 static int keystone_dsp_mem_check_addr(struct keystone_dsp_mem_info *dsp_mem,
 				       int mask, size_t size)
 {
@@ -211,6 +304,13 @@ static int keystone_dsp_mem_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, dsp_mem);
 
+	ret = keystone_dsp_mem_add_attrs(dsp_mem);
+	if (ret) {
+		dev_err(dsp_mem->dev, "error creating sysfs files (%d)\n", ret);
+		misc_deregister(&dsp_mem->misc);
+		return ret;
+	}
+
 	dev_info(dev, "registered misc device %s\n", name);
 
 	return 0;
@@ -220,6 +320,8 @@ static int keystone_dsp_mem_remove(struct platform_device *pdev)
 {
 	struct keystone_dsp_mem_info *dsp_mem = platform_get_drvdata(pdev);
 
+	keystone_dsp_mem_del_attrs(dsp_mem);
+
 	misc_deregister(&dsp_mem->misc);
 
 	return 0;
-- 
1.7.5.4

