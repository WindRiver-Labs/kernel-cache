From 48ff51e096dbd33583f6ee96fdcabbf18004cab0 Mon Sep 17 00:00:00 2001
From: Benoit Parrot <bparrot@ti.com>
Date: Thu, 29 Oct 2015 18:41:17 -0500
Subject: [PATCH 627/800] HACK: vb2: Remove the V4L2 check for DMABUF

When VPE is used with the g-streamer plugin in the data_offset
and bytesused plane variable are no longer used as intended
since commit:
8a75ffb81b1c ("[media] vb2: fix bytesused == 0 handling")
This currently break vpe usage when dealing with NV12 co-planar
formatted frame.

This hack bends the data_offset usage to allow proper dma offset
calculation when using NV12 co-planar frame.
This currently needed as they are no-existing method to allow for this
type of usage (i.e. using a single buffer to carry both plane's data).

The V4L2 check for DMABUF in verify_length is temporarily removed
The data_offset check against byteused is also removed.

Some of these changes might be removed once the userspace
application properly sets the 'bytesused' for each source plane.

When proper support for this has been added at the framework level
then this patch will need to be revisited.

Signed-off-by: Benoit Parrot <bparrot@ti.com>
Signed-off-by: Jyri Sarha <jsarha@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/media/v4l2-core/videobuf2-core.c |    8 ++------
 1 files changed, 2 insertions(+), 6 deletions(-)

diff --git a/drivers/media/v4l2-core/videobuf2-core.c b/drivers/media/v4l2-core/videobuf2-core.c
index 472eaad..fa1b0b1 100644
--- a/drivers/media/v4l2-core/videobuf2-core.c
+++ b/drivers/media/v4l2-core/videobuf2-core.c
@@ -586,19 +586,15 @@ static int __verify_length(struct vb2_buffer *vb, const struct v4l2_buffer *b)
 
 	if (V4L2_TYPE_IS_MULTIPLANAR(b->type)) {
 		for (plane = 0; plane < vb->num_planes; ++plane) {
-			length = (b->memory == V4L2_MEMORY_USERPTR ||
-				  b->memory == V4L2_MEMORY_DMABUF)
+			length = (b->memory == V4L2_MEMORY_USERPTR)
 			       ? b->m.planes[plane].length
 			       : vb->v4l2_planes[plane].length;
+
 			bytesused = b->m.planes[plane].bytesused
 				  ? b->m.planes[plane].bytesused : length;
 
 			if (b->m.planes[plane].bytesused > length)
 				return -EINVAL;
-
-			if (b->m.planes[plane].data_offset > 0 &&
-			    b->m.planes[plane].data_offset >= bytesused)
-				return -EINVAL;
 		}
 	} else {
 		length = (b->memory == V4L2_MEMORY_USERPTR)
-- 
1.7.5.4

