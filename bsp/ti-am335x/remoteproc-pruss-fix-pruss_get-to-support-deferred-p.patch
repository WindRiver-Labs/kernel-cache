From 4b30009ee815f56dee06b8c801aeb96da4afc928 Mon Sep 17 00:00:00 2001
From: Jean-Jacques Hiblot <jjhiblot@ti.com>
Date: Fri, 10 Mar 2017 15:14:45 +0000
Subject: [PATCH 595/895] remoteproc: pruss: fix pruss_get() to support
 deferred probe in clients

Knowing the error cause in pruss_get() is required to implement deferred
probe in the prueth driver and other PRUSS client drivers: deferred probe
must take place only when the pruss device is not yet available, not when
it is never going to be available. Fix up the pruss_get() function to
return an appropriate error-scenario specific ERR_PTR instead of a NULL
value on all errors.

Signed-off-by: Jean-Jacques Hiblot <jjhiblot@ti.com>
Acked-by: Roger Quadros <rogerq@ti.com>
Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit dcf3a415d1ce6f796168288ec2d51f2a2a844c10)
---
 drivers/remoteproc/pruss.c |   14 +++++++++-----
 1 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index ec2b2b2..d3d1fdc 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -57,7 +57,10 @@ static LIST_HEAD(pruss_list);
  * This function increments the pruss device's refcount, so always
  * use pruss_put() to decrement it back once pruss isn't needed anymore.
  *
- * Returns the pruss handle on success, and NULL on failure.
+ * Returns the pruss handle on success. ERR_PTR on failure e.g.
+ * -ENOENT if missing "pruss" property or if pruss device is not enabled in dt
+ * -EINVAL if invalid parameter
+ * -EPROBE_DEFER if the pruss device is not yet available
  */
 struct pruss *pruss_get(struct device *dev)
 {
@@ -65,11 +68,12 @@ struct pruss *pruss_get(struct device *dev)
 	struct device_node *np;
 
 	if (!dev)
-		return NULL;
+		return ERR_PTR(-EINVAL);
 
 	np = of_parse_phandle(dev->of_node, "pruss", 0);
-	if (!np)
-		return NULL;
+	if (!np || !of_device_is_available(np))
+		/* pruss is never going to show up */
+		return ERR_PTR(-ENOENT);
 
 	mutex_lock(&pruss_list_mutex);
 	list_for_each_entry(p, &pruss_list, node) {
@@ -83,7 +87,7 @@ struct pruss *pruss_get(struct device *dev)
 	mutex_unlock(&pruss_list_mutex);
 	of_node_put(np);
 
-	return pruss;
+	return pruss ? pruss : ERR_PTR(-EPROBE_DEFER);
 }
 EXPORT_SYMBOL_GPL(pruss_get);
 
-- 
1.7.5.4

