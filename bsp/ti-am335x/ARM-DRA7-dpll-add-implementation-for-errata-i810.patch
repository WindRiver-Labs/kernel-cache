From a140f57c4669ead8be5db123f318e41042dca031 Mon Sep 17 00:00:00 2001
From: Tero Kristo <t-kristo@ti.com>
Date: Wed, 27 May 2015 09:14:51 +0300
Subject: [PATCH 253/800] ARM: DRA7: dpll: add implementation for errata i810

Errata i810 states that the DPLL controller can be stuck if the downstream
clocks are disabled and DPLL is in auto mode while M/N ratios are changed.
Workaround for this is to force enable (SW_WKUP) the downstream clockdomain
while reprogramming the DPLL. This patch adds the support for this, the
actual clkdm-sink info needs to be added in a separate patch.

See DRA75x, DRA74x Errata; id i810 for more details.

Signed-off-by: Tero Kristo <t-kristo@ti.com>
Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-omap2/clock.c    |   19 +++++++++++++++++++
 arch/arm/mach-omap2/dpll3xxx.c |    6 ++++++
 drivers/clk/ti/dpll.c          |    2 ++
 include/linux/clk/ti.h         |    3 +++
 4 files changed, 30 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-omap2/clock.c b/arch/arm/mach-omap2/clock.c
index a699d71..e07e901 100644
--- a/arch/arm/mach-omap2/clock.c
+++ b/arch/arm/mach-omap2/clock.c
@@ -291,6 +291,25 @@ void omap2_init_clk_clkdm(struct clk_hw *hw)
 }
 
 /**
+ * omap2_init_dpll_clkdm - setup DPLL sink clockdomain
+ * @dd: DPLL data pointer
+ * @np: device node pointer describing the DPLL
+ *
+ * Sets up DPLL sink clkdm, if available. This is only required for
+ * fixing J6 errata i810. No return value.
+ */
+void omap2_init_dpll_clkdm(struct dpll_data *dd, struct device_node *np)
+{
+	struct device_node *clkdm;
+
+	clkdm = of_parse_phandle(np, "ti,sink-clkdm", 0);
+	if (!clkdm)
+		return;
+
+	dd->sink_clkdm = clkdm_lookup(clkdm->name);
+}
+
+/**
  * omap2_clk_disable_clkdm_control - disable clkdm control on clk enable/disable
  *
  * Prevent the OMAP clock code from calling into the clockdomain code
diff --git a/arch/arm/mach-omap2/dpll3xxx.c b/arch/arm/mach-omap2/dpll3xxx.c
index 44e57ec..1d17418 100644
--- a/arch/arm/mach-omap2/dpll3xxx.c
+++ b/arch/arm/mach-omap2/dpll3xxx.c
@@ -303,6 +303,9 @@ static int omap3_noncore_dpll_program(struct clk_hw_omap *clk, u16 freqsel)
 	/* 3430 ES2 TRM: 4.7.6.9 DPLL Programming Sequence */
 	_omap3_noncore_dpll_bypass(clk);
 
+	if (dd->sink_clkdm)
+		clkdm_clk_enable(dd->sink_clkdm, clk->hw.clk);
+
 	/*
 	 * Set jitter correction. Jitter correction applicable for OMAP343X
 	 * only since freqsel field is no longer present on other devices.
@@ -371,6 +374,9 @@ static int omap3_noncore_dpll_program(struct clk_hw_omap *clk, u16 freqsel)
 
 	_omap3_noncore_dpll_lock(clk);
 
+	if (dd->sink_clkdm)
+		clkdm_clk_disable(dd->sink_clkdm, clk->hw.clk);
+
 	return 0;
 }
 
diff --git a/drivers/clk/ti/dpll.c b/drivers/clk/ti/dpll.c
index 9cf2f35..1749ff4 100644
--- a/drivers/clk/ti/dpll.c
+++ b/drivers/clk/ti/dpll.c
@@ -414,6 +414,8 @@ static void __init of_ti_dpll_setup(struct device_node *node,
 	if (of_property_read_bool(node, "ti,lock"))
 		dpll_mode |= 1 << DPLL_LOCKED;
 
+	omap2_init_dpll_clkdm(dd, node);
+
 	if (dpll_mode)
 		dd->modes = dpll_mode;
 
diff --git a/include/linux/clk/ti.h b/include/linux/clk/ti.h
index bf9dd3e..e8afbde 100644
--- a/include/linux/clk/ti.h
+++ b/include/linux/clk/ti.h
@@ -25,6 +25,7 @@
  * @div1_mask: mask of the DPLL N bitfield in @mult_div1_reg
  * @clk_bypass: struct clk pointer to the clock's bypass clock input
  * @clk_ref: struct clk pointer to the clock's reference clock input
+ * @sink_clkdm: the main clockdomain fed by this DPLL, for errata i810 on DRA7
  * @control_reg: register containing the DPLL mode bitfield
  * @enable_mask: mask of the DPLL mode bitfield in @control_reg
  * @last_rounded_rate: cache of the last rate result of omap2_dpll_round_rate()
@@ -72,6 +73,7 @@ struct dpll_data {
 	u32			div1_mask;
 	struct clk		*clk_bypass;
 	struct clk		*clk_ref;
+	struct clockdomain	*sink_clkdm;
 	void __iomem		*control_reg;
 	u32			enable_mask;
 	unsigned long		last_rounded_rate;
@@ -293,6 +295,7 @@ unsigned long omap3_dpll_recalc(struct clk_hw *hw, unsigned long parent_rate);
 long omap2_dpll_round_rate(struct clk_hw *hw, unsigned long target_rate,
 			   unsigned long *parent_rate);
 void omap2_init_clk_clkdm(struct clk_hw *clk);
+void omap2_init_dpll_clkdm(struct dpll_data *dd, struct device_node *np);
 unsigned long omap3_clkoutx2_recalc(struct clk_hw *hw,
 				    unsigned long parent_rate);
 int omap3_clkoutx2_set_rate(struct clk_hw *hw, unsigned long rate,
-- 
1.7.5.4

