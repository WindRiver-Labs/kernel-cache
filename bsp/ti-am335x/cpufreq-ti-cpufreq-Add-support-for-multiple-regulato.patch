From 72defdb38c6c448077c9cb25193695bce7d93a57 Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Thu, 22 Dec 2016 01:13:47 -0600
Subject: [PATCH 870/895] cpufreq: ti-cpufreq: Add support for multiple
 regulators

Some platforms, like those in the DRA7 and AM57 families, require the
scaling of multiple regulators in order to properly support higher OPPs.
Let the ti-cpufreq driver determine when this is required and pass the
appropriate regulator names to the OPP core so that they can be properly
managed.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit 95c25ab28d4d897e1144190381c6d947aa31c273)
---
 drivers/cpufreq/ti-cpufreq.c |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/drivers/cpufreq/ti-cpufreq.c b/drivers/cpufreq/ti-cpufreq.c
index 0410a51..e6c34ad 100644
--- a/drivers/cpufreq/ti-cpufreq.c
+++ b/drivers/cpufreq/ti-cpufreq.c
@@ -46,6 +46,7 @@ struct ti_cpufreq_soc_data {
 	unsigned long (*efuse_xlate)(struct ti_cpufreq_data *opp_data,
 				     unsigned long efuse);
 	unsigned long efuse_fallback;
+	bool multi_regulator;
 };
 
 struct ti_cpufreq_data {
@@ -89,15 +90,18 @@ static unsigned long dra7_efuse_xlate(struct ti_cpufreq_data *opp_data,
 static struct ti_cpufreq_soc_data am3x_soc_data = {
 	.efuse_xlate = amx3_efuse_xlate,
 	.efuse_fallback = AM33XX_800M_ARM_MPU_MAX_FREQ,
+	.multi_regulator = false,
 };
 
 static struct ti_cpufreq_soc_data am4x_soc_data = {
 	.efuse_xlate = amx3_efuse_xlate,
 	.efuse_fallback = AM43XX_600M_ARM_MPU_MAX_FREQ,
+	.multi_regulator = false,
 };
 
 static struct ti_cpufreq_soc_data dra7_soc_data = {
 	.efuse_xlate = dra7_efuse_xlate,
+	.multi_regulator = true,
 };
 
 /**
@@ -216,7 +220,9 @@ static int ti_cpufreq_probe(struct platform_device *pdev)
 	u32 version[VERSION_COUNT];
 	struct device_node *np;
 	const struct of_device_id *match;
+	struct opp_table *ti_opp_table;
 	struct ti_cpufreq_data *opp_data;
+	const char * const reg_names[] = {"vdd", "vbb"};
 	int ret;
 
 	np = of_find_node_by_path("/");
@@ -271,6 +277,16 @@ static int ti_cpufreq_probe(struct platform_device *pdev)
 		goto fail_put_node;
 	}
 
+	if (opp_data->soc_data->multi_regulator) {
+		ti_opp_table = dev_pm_opp_set_regulators(opp_data->cpu_dev,
+							 reg_names,
+							 ARRAY_SIZE(reg_names));
+		if (IS_ERR(ti_opp_table)) {
+			dev_pm_opp_put_supported_hw(opp_data->cpu_dev);
+			return PTR_ERR(ti_opp_table);
+		}
+	}
+
 register_cpufreq_dt:
 	platform_device_register_simple("cpufreq-dt", -1, NULL, 0);
 
-- 
1.7.5.4

