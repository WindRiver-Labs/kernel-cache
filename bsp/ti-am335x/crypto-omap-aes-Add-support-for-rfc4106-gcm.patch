From 7f504d8da89386afb0552e99b0ab6feae98b0e77 Mon Sep 17 00:00:00 2001
From: Lokesh Vutla <lokeshvutla@ti.com>
Date: Mon, 13 Jul 2015 11:16:10 +0530
Subject: [PATCH 237/800] crypto: omap-aes: Add support for rfc4106 gcm

IPSec uses rfc 4106 gcm. Add support for the same in
onap-aes driver.

Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/crypto/omap-aes-gcm.c |   46 +++++++++++++++++++++++++++++++++++++++-
 drivers/crypto/omap-aes.c     |   25 +++++++++++++++++++++-
 drivers/crypto/omap-aes.h     |    5 ++++
 3 files changed, 73 insertions(+), 3 deletions(-)

diff --git a/drivers/crypto/omap-aes-gcm.c b/drivers/crypto/omap-aes-gcm.c
index 370891b..6f9b32a 100644
--- a/drivers/crypto/omap-aes-gcm.c
+++ b/drivers/crypto/omap-aes-gcm.c
@@ -224,7 +224,7 @@ static int do_encrypt_iv(struct aead_request *req, u32 *tag)
 					tcrypt_complete, &result);
 	ret = crypto_ablkcipher_setkey(tfm, (u8 *)ctx->key, ctx->keylen);
 	ablkcipher_request_set_crypt(ablk_req, &iv_sg, &iv_sg, AES_BLOCK_SIZE,
-				     req->iv);
+				     ctx->iv);
 	ret = crypto_ablkcipher_encrypt(ablk_req);
 	switch (ret) {
 	case 0:
@@ -339,7 +339,7 @@ static int omap_aes_gcm_crypt(struct aead_request *req, unsigned long mode)
 	int err;
 
 	memset(ctx->auth_tag, 0, sizeof(ctx->auth_tag));
-	memcpy(req->iv + 12, &counter, 4);
+	memcpy(ctx->iv + 12, &counter, 4);
 
 	/* Create E(K, IV) */
 	err = do_encrypt_iv(req, ctx->auth_tag);
@@ -362,11 +362,33 @@ static int omap_aes_gcm_crypt(struct aead_request *req, unsigned long mode)
 
 int omap_aes_gcm_encrypt(struct aead_request *req)
 {
+	struct omap_aes_ctx *ctx = crypto_aead_ctx(crypto_aead_reqtfm(req));
+
+	memcpy(ctx->iv, req->iv, 12);
 	return omap_aes_gcm_crypt(req, FLAGS_ENCRYPT | FLAGS_GCM);
 }
 
 int omap_aes_gcm_decrypt(struct aead_request *req)
 {
+	struct omap_aes_ctx *ctx = crypto_aead_ctx(crypto_aead_reqtfm(req));
+
+	memcpy(ctx->iv, req->iv, 12);
+	return omap_aes_gcm_crypt(req, FLAGS_GCM);
+}
+
+int omap_aes_4106gcm_encrypt(struct aead_request *req)
+{
+	struct omap_aes_ctx *ctx = crypto_aead_ctx(crypto_aead_reqtfm(req));
+
+	memcpy(ctx->iv + 4, req->iv, 8);
+	return omap_aes_gcm_crypt(req, FLAGS_ENCRYPT | FLAGS_GCM);
+}
+
+int omap_aes_4106gcm_decrypt(struct aead_request *req)
+{
+	struct omap_aes_ctx *ctx = crypto_aead_ctx(crypto_aead_reqtfm(req));
+
+	memcpy(ctx->iv + 4, req->iv, 8);
 	return omap_aes_gcm_crypt(req, FLAGS_GCM);
 }
 
@@ -384,3 +406,23 @@ int omap_aes_gcm_setkey(struct crypto_aead *tfm, const u8 *key,
 
 	return 0;
 }
+
+int omap_aes_4106gcm_setkey(struct crypto_aead *tfm, const u8 *key,
+			    unsigned int keylen)
+{
+	struct omap_aes_ctx *ctx = crypto_aead_ctx(tfm);
+	int ret;
+
+	if (keylen < 4)
+		return -EINVAL;
+
+	keylen -= 4;
+
+	ret = omap_aes_gcm_setkey(tfm, key, keylen);
+	if (ret)
+		return ret;
+
+	memcpy(ctx->iv, key + keylen, 4);
+
+	return 0;
+}
diff --git a/drivers/crypto/omap-aes.c b/drivers/crypto/omap-aes.c
index a69754b..80963f2 100644
--- a/drivers/crypto/omap-aes.c
+++ b/drivers/crypto/omap-aes.c
@@ -36,6 +36,7 @@
 #include <linux/interrupt.h>
 #include <crypto/scatterwalk.h>
 #include <crypto/aes.h>
+#include <crypto/internal/aead.h>
 #include "omap-aes.h"
 
 /* keep registered devices data here */
@@ -128,7 +129,7 @@ int omap_aes_write_ctrl(struct omap_aes_dev *dd)
 
 	if ((dd->flags & (FLAGS_GCM)) && dd->aead_req->iv)
 		omap_aes_write_n(dd, AES_REG_IV(dd, 0),
-				 (u32 *)dd->aead_req->iv, 4);
+				 (u32 *)dd->ctx->iv, 4);
 
 	val = FLD_VAL(((dd->ctx->keylen >> 3) - 1), 4, 3);
 	if (dd->flags & FLAGS_CBC)
@@ -789,6 +790,28 @@ static struct crypto_alg algs_ctr[] = {
 		.decrypt	= omap_aes_gcm_decrypt,
 	}
 },
+{
+	.cra_name		= "rfc4106(gcm(aes))",
+	.cra_driver_name	= "rfc4106-gcm-aes-omap",
+	.cra_priority		= 300,
+	.cra_flags		= CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_ASYNC |
+				  CRYPTO_ALG_KERN_DRIVER_ONLY,
+	.cra_blocksize		= 1,
+	.cra_ctxsize		= sizeof(struct omap_aes_ctx),
+	.cra_alignmask		= 0,
+	.cra_type		= &crypto_nivaead_type,
+	.cra_module		= THIS_MODULE,
+	.cra_init		= omap_aes_gcm_cra_init,
+	.cra_exit		= omap_aes_cra_exit,
+	.cra_u.aead = {
+		.maxauthsize	= AES_BLOCK_SIZE,
+		.geniv		= "eseqiv",
+		.ivsize		= AES_BLOCK_SIZE,
+		.setkey		= omap_aes_4106gcm_setkey,
+		.encrypt	= omap_aes_4106gcm_encrypt,
+		.decrypt	= omap_aes_4106gcm_decrypt,
+	}
+},
 };
 
 static struct omap_aes_algs_info omap_aes_algs_info_ecb_cbc[] = {
diff --git a/drivers/crypto/omap-aes.h b/drivers/crypto/omap-aes.h
index e0621dd..579d484 100644
--- a/drivers/crypto/omap-aes.h
+++ b/drivers/crypto/omap-aes.h
@@ -96,6 +96,7 @@ struct omap_aes_ctx {
 	int		keylen;
 	u32		key[AES_KEYSIZE_256 / sizeof(u32)];
 	u32		auth_tag[AES_BLOCK_SIZE / sizeof(u32)];
+	u8		iv[AES_BLOCK_SIZE];
 	unsigned long	flags;
 };
 
@@ -195,8 +196,12 @@ void omap_aes_write(struct omap_aes_dev *dd, u32 offset, u32 value);
 struct omap_aes_dev *omap_aes_find_dev(struct omap_aes_ctx *ctx);
 int omap_aes_gcm_setkey(struct crypto_aead *tfm, const u8 *key,
 			unsigned int keylen);
+int omap_aes_4106gcm_setkey(struct crypto_aead *tfm, const u8 *key,
+			    unsigned int keylen);
 int omap_aes_gcm_encrypt(struct aead_request *req);
 int omap_aes_gcm_decrypt(struct aead_request *req);
+int omap_aes_4106gcm_encrypt(struct aead_request *req);
+int omap_aes_4106gcm_decrypt(struct aead_request *req);
 int omap_aes_write_ctrl(struct omap_aes_dev *dd);
 int omap_aes_check_aligned(struct scatterlist *sg, int total);
 int omap_aes_crypt_dma_start(struct omap_aes_dev *dd);
-- 
1.7.5.4

