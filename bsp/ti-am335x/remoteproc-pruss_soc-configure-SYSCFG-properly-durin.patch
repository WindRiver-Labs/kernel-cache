From 87240683da6050ecb5c09473c58cbefd044b54ed Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 6 Feb 2017 20:32:53 -0600
Subject: [PATCH 576/895] remoteproc/pruss_soc: configure SYSCFG properly
 during probe/remove

The PRUSS CFG module's SYSCFG register is used for managing the
PRCM clock management settings at the PRU-ICSS subsystem level.

Add two helper functions pruss_{enable/disable}_module() that
programs this SYSCFG register during probe and remove. The
register is currently programmed for the default Smart-Idle
and Smart-Standby always during probe. The MStandby is enabled
during remove to undo the settings in probe to properly configure
the SYSCFG in the case that a firmware has disabled MStandby.
This is needed on SoCs like AM57xx that do not have a reset line
and so cannot reset the register properly.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit a00ff1f0030a002d7ea8491d7404dcb324f71ec1)
---
 drivers/remoteproc/pruss_soc_bus.c |   60 ++++++++++++++++++++++++++++++++---
 1 files changed, 54 insertions(+), 6 deletions(-)

diff --git a/drivers/remoteproc/pruss_soc_bus.c b/drivers/remoteproc/pruss_soc_bus.c
index 87b97af..66639f4 100644
--- a/drivers/remoteproc/pruss_soc_bus.c
+++ b/drivers/remoteproc/pruss_soc_bus.c
@@ -29,6 +29,16 @@
 #define SYSCFG_STANDBY_INIT	BIT(4)
 #define SYSCFG_SUB_MWAIT_READY	BIT(5)
 
+#define SYSCFG_STANDBY_MODE_FORCE	(0 << 2)
+#define SYSCFG_STANDBY_MODE_NO		(1 << 2)
+#define SYSCFG_STANDBY_MODE_SMART	(2 << 2)
+#define SYSCFG_STANDBY_MODE_MASK	(3 << 2)
+
+#define SYSCFG_IDLE_MODE_FORCE		0
+#define SYSCFG_IDLE_MODE_NO		1
+#define SYSCFG_IDLE_MODE_SMART		2
+#define SYSCFG_IDLE_MODE_MASK		3
+
 /**
  * struct pruss_soc_bus - PRUSS SoC bus structure
  * @base: kernel mapped address for bus register base
@@ -127,6 +137,44 @@ static int pruss_soc_bus_resume(struct device *dev)
 }
 #endif /* CONFIG_PM_SLEEP */
 
+/* firmware must be idle when calling this function */
+static void pruss_disable_module(struct device *dev)
+{
+	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
+
+	/* configure Smart Standby */
+	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
+			  SYSCFG_STANDBY_MODE_MASK, SYSCFG_STANDBY_MODE_SMART);
+
+	/* initiate MStandby */
+	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
+			  SYSCFG_STANDBY_INIT, SYSCFG_STANDBY_INIT);
+
+	/* tell PRCM to initiate IDLE request */
+	pm_runtime_put_sync(dev);
+}
+
+static int pruss_enable_module(struct device *dev)
+{
+	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
+	int ret;
+
+	/* tell PRCM to de-assert IDLE request */
+	ret = pm_runtime_get_sync(dev);
+	if (ret < 0) {
+		pm_runtime_put_noidle(dev);
+		return ret;
+	}
+
+	/* configure for Smart Idle & Smart Standby */
+	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
+			  SYSCFG_IDLE_MODE_MASK, SYSCFG_IDLE_MODE_SMART);
+	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
+			  SYSCFG_STANDBY_MODE_MASK, SYSCFG_STANDBY_MODE_SMART);
+
+	return ret;
+}
+
 static const struct of_device_id pruss_soc_bus_of_match[];
 
 static const struct pruss_soc_bus_match_data *pruss_soc_bus_get_match_data(
@@ -181,10 +229,10 @@ static int pruss_soc_bus_probe(struct platform_device *pdev)
 	}
 
 	pm_runtime_enable(dev);
-	ret = pm_runtime_get_sync(dev);
+	ret = pruss_enable_module(dev);
 	if (ret < 0) {
-		pm_runtime_put_noidle(dev);
-		goto fail_clock;
+		dev_err(dev, "couldn't enable module\n");
+		goto fail_module;
 	}
 
 	ret = of_platform_populate(node, NULL, NULL, dev);
@@ -194,8 +242,8 @@ static int pruss_soc_bus_probe(struct platform_device *pdev)
 	return 0;
 
 fail_of:
-	pm_runtime_put_sync(dev);
-fail_clock:
+	pruss_disable_module(dev);
+fail_module:
 	pm_runtime_disable(dev);
 	if (psoc_bus->has_reset)
 		pdata->assert_reset(pdev, pdata->reset_name);
@@ -212,7 +260,7 @@ static int pruss_soc_bus_remove(struct platform_device *pdev)
 
 	of_platform_depopulate(dev);
 
-	pm_runtime_put_sync(dev);
+	pruss_disable_module(dev);
 	pm_runtime_disable(dev);
 
 	if (psoc_bus->has_reset)
-- 
1.7.5.4

