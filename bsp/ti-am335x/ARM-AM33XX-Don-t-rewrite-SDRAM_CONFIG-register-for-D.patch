From 1821075630edf412debb785fa8727390602bd29d Mon Sep 17 00:00:00 2001
From: Russ Dill <russ.dill@ti.com>
Date: Thu, 23 Jan 2014 01:56:50 -0800
Subject: [PATCH 144/188] ARM: AM33XX: Don't rewrite SDRAM_CONFIG register for
 DDR2 systems

This commit comes from branch ti-linux-3.12.y:
  git://git.ti.com/ti-linux-kernel/ti-linux-kernel.git

When the EMIF (memory controller) resets after losing power, the
EMIF_SDRAM_CONFIG register gets loaded with the contents of the
CONTROL_SECURE_SDRAM_CONFIG register. This is so that reinitializations
of the SDRAM that occur when writing to this register are not necessary
at resume time.

Program the CONTROL_SECURE_SDRAM_CONFIG register once at init time rather
than the SDRAM_CONFIG register at every resume.

This is needed to make the most gains out of CPU idle, which is very
sensitive to return to active timing.

Signed-off-by: Russ Dill <Russ.Dill@ti.com>
(cherry picked from commit 7e9e1d420f7317b6e0a8b6f35571367cb7f8a7d1)
---
 arch/arm/mach-omap2/control.h   |    3 +++
 arch/arm/mach-omap2/pm33xx.c    |   11 +++++++++++
 arch/arm/mach-omap2/sleep33xx.S |   28 ----------------------------
 3 files changed, 14 insertions(+), 28 deletions(-)

diff --git a/arch/arm/mach-omap2/control.h b/arch/arm/mach-omap2/control.h
index b76a890..aa06099 100644
--- a/arch/arm/mach-omap2/control.h
+++ b/arch/arm/mach-omap2/control.h
@@ -363,6 +363,9 @@
 #define AM33XX_CONTROL_STATUS_SYSBOOT1_WIDTH		0x2
 #define AM33XX_CONTROL_STATUS_SYSBOOT1_MASK		(0x3 << 22)
 
+/* AM33XX CONTROL_SECURE_SDRAM_CONFIG register */
+#define AM33XX_CONTROL_SECURE_SDRAM_CONFIG	0x110
+
 /* AM33XX PWMSS Control register */
 #define AM33XX_PWMSS_TBCLK_CLKCTRL			0x664
 
diff --git a/arch/arm/mach-omap2/pm33xx.c b/arch/arm/mach-omap2/pm33xx.c
index bf9b725..9939769 100644
--- a/arch/arm/mach-omap2/pm33xx.c
+++ b/arch/arm/mach-omap2/pm33xx.c
@@ -46,6 +46,7 @@
 #include "soc.h"
 #include "sram.h"
 #include "omap_device.h"
+#include "control.h"
 
 #ifdef CONFIG_SUSPEND
 static void __iomem *scu_base;
@@ -396,6 +397,8 @@ cleanup_sleep:
 
 static int am33xx_suspend_init(void)
 {
+	u32 temp;
+
 	gfx_l4ls_clkdm = clkdm_lookup("gfx_l4ls_gfx_clkdm");
 	l3s_clkdm = clkdm_lookup("l3s_clkdm");
 	l4fw_clkdm = clkdm_lookup("l4fw_clkdm");
@@ -411,6 +414,14 @@ static int am33xx_suspend_init(void)
 	am33xx_pm->ipc.reg0 = (AM33XX_OCMC_END -
 		am33xx_do_wfi_sz + am33xx_resume_offset + 0x4);
 
+	/*
+	 * Save SDRAM config in shadow register.
+	 * When the EMIF gets powered back up, its SDRAM_CONFIG register gets
+	 * loaded from the SECURE_SDRAM_CONFIG register.
+	 */
+	temp = readl(am33xx_emif_base + EMIF_SDRAM_CONFIG);
+	omap_ctrl_writel(temp, AM33XX_CONTROL_SECURE_SDRAM_CONFIG);
+
 	return 0;
 }
 
diff --git a/arch/arm/mach-omap2/sleep33xx.S b/arch/arm/mach-omap2/sleep33xx.S
index 311ea64..0dc70fb 100644
--- a/arch/arm/mach-omap2/sleep33xx.S
+++ b/arch/arm/mach-omap2/sleep33xx.S
@@ -86,8 +86,6 @@ ENTRY(am33xx_do_wfi)
 
 	ldr	r0, emif_addr_virt
 	/* Save EMIF configuration */
-	ldr	r1, [r0, #EMIF_SDRAM_CONFIG]
-	str	r1, emif_sdcfg_val
 	ldr	r1, [r0, #EMIF_SDRAM_REFRESH_CONTROL]
 	str	r1, emif_ref_ctrl_val
 	ldr	r1, [r0, #EMIF_SDRAM_TIMING_1]
@@ -210,16 +208,6 @@ wait_emif_enable:
 	str	r1, [r0, #EMIF_POWER_MANAGEMENT_CTRL_SHDW]
 
 	/*
-	 * A write to SDRAM CONFIG register triggers
-	 * an init sequence and hence it must be done
-	 * at the end for DDR2
-	 */
-	ldr r0, emif_addr_virt
-	add r0, r0, #EMIF_SDRAM_CONFIG
-	ldr r4, emif_sdcfg_val
-	str r4, [r0]
-
-	/*
 	 * Set SCTLR.C bit to allow data cache allocation
 	 */
 	mrc	p15, 0, r0, c1, c0, 0
@@ -296,20 +284,6 @@ wait_emif_enable1:
 	ldr	r1, emif_zqcfg_val
 	str	r1, [r0, #EMIF_SDRAM_OUTPUT_IMPEDANCE_CALIBRATION_CONFIG]
 
-	/* Write to SDRAM_CONFIG only for DDR2 */
-	ldr	r2, mem_type
-	cmp	r2, #MEM_TYPE_DDR2
-	bne	resume_to_ddr
-
-	/*
-	 * A write to SDRAM CONFIG register triggers
-	 * an init sequence and hence it must be done
-	 * at the end for DDR2
-	 */
-	ldr	r1, emif_sdcfg_val
-	str	r1, [r0, #EMIF_SDRAM_CONFIG]
-
-resume_to_ddr:
 	/* EMIF needs some time before read/write possible */
 	mov	r1, #EMIF_POWER_MGMT_DELAY_PERIOD
 wait_resume:
@@ -363,8 +337,6 @@ emif_timing2_val:
 	.word	0xDEADBEEF
 emif_timing3_val:
 	.word	0xDEADBEEF
-emif_sdcfg_val:
-	.word	0xDEADBEEF
 emif_ref_ctrl_val:
 	.word	0xDEADBEEF
 emif_zqcfg_val:
-- 
1.7.5.4

