From 790982e572ed40232efaddc2290d5cd8cf801e51 Mon Sep 17 00:00:00 2001
From: Erik Rainey <erik.rainey@ti.com>
Date: Mon, 16 Apr 2012 22:04:00 -0500
Subject: [PATCH 517/800] HACK: drm/omap: flush the mapped page in kmap/kunmap

A kernel driver can access a omapdrm/gem backed buffer page through
a cycle of dma_buf_begin_cpu_access, dma_buf_kmap & dma_buf_kunmap,
dma_buf_end_cpu_access function invocations. Any changes to the
buffer by the kernel driver are not reflected properly in RAM,
so flush the cache deliberately in the kmap/kunmap dma_buf ops
implementations of the omapdrm/gem buffers.

NOTE:
This is a HACK patch and is being added to enable hardware accelerated
MultiMedia usecases leveraging libdce in userspace and rpmsg-rpc kernel
driver to run successfully. It will be reverted once a proper solution
is arrived at.

Signed-off-by: Erik Rainey <erik.rainey@ti.com>
[s-anna@ti.com: add proper comments, commit description & checkpatch fixes]
Signed-off-by: Suman Anna <s-anna@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/gpu/drm/omapdrm/omap_gem_dmabuf.c |   19 +++++++++++++++++++
 1 files changed, 19 insertions(+), 0 deletions(-)

diff --git a/drivers/gpu/drm/omapdrm/omap_gem_dmabuf.c b/drivers/gpu/drm/omapdrm/omap_gem_dmabuf.c
index 0cc71c9..19ce000 100644
--- a/drivers/gpu/drm/omapdrm/omap_gem_dmabuf.c
+++ b/drivers/gpu/drm/omapdrm/omap_gem_dmabuf.c
@@ -122,8 +122,18 @@ static void *omap_gem_dmabuf_kmap(struct dma_buf *buffer,
 {
 	struct drm_gem_object *obj = buffer->priv;
 	struct page **pages;
+	dma_addr_t dma_addr;
 	omap_gem_get_pages(obj, &pages, false);
 	omap_gem_cpu_sync(obj, page_num);
+
+	/*
+	 * invalidate/flush the cache for this page deliberately.
+	 * XXX: revisit this, to find the proper place for invoking these calls.
+	 */
+	dma_addr = dma_map_page(obj->dev->dev, pages[page_num], 0, PAGE_SIZE,
+				DMA_BIDIRECTIONAL);
+	dma_unmap_page(obj->dev->dev, dma_addr, PAGE_SIZE, DMA_BIDIRECTIONAL);
+
 	return kmap(pages[page_num]);
 }
 
@@ -132,8 +142,17 @@ static void omap_gem_dmabuf_kunmap(struct dma_buf *buffer,
 {
 	struct drm_gem_object *obj = buffer->priv;
 	struct page **pages;
+	dma_addr_t dma_addr;
 	omap_gem_get_pages(obj, &pages, false);
 	kunmap(pages[page_num]);
+
+	/*
+	 * invalidate/flush the cache for this page deliberately.
+	 * XXX: revisit this, to find the proper place for invoking these calls.
+	 */
+	dma_addr = dma_map_page(obj->dev->dev, pages[page_num], 0, PAGE_SIZE,
+				DMA_BIDIRECTIONAL);
+	dma_unmap_page(obj->dev->dev, dma_addr, PAGE_SIZE, DMA_BIDIRECTIONAL);
 }
 
 static int omap_gem_dmabuf_mmap(struct dma_buf *buffer,
-- 
1.7.5.4

