From 16270252418118b60b30506a07d707cc7863fb4e Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Fri, 28 Aug 2015 00:25:46 -0500
Subject: [PATCH 789/800] remoteproc/pruss: manage PRUs without virtio devices
 manually

A PRUSS consists of dual 32-bit RISC PRU cores, with each having
a separate firmware file. The programmable nature of the PRU means
that it can be running any software. A PRU core sometimes may not
communicate with the host processor at all and can strictly be used
to aid/complement the software running on the other PRU core, as a
slave core.

The remoteproc infrastructure auto-boots the processors that have
support for virtio transports (virtio devices in their resource
tables). The remoteproc virtio layer also handles the shutdown for
such remoteproc devices, but not for processors booted outside the
remoteproc virtio layer. Any remaining remoteproc devices have to
be managed by other drivers using rproc_boot() and rproc_shutdown()
API.

Support has been added to the PRU remoteproc driver itself to manage
the boot cycle of such PRU devices manually, by checking for the
presence (absence) of virtio devices. This is done to avoid having
any dummy drivers just to manage the life cycle of such PRU devices.

NOTE:
- This patch may not fly upstream because of the cyclic module reference
  count held by the remoteproc core. The above API usage is meant for
  other drivers, and not remoteproc platform implementation drivers.
  This approach has to be evaluated again.
- The rmmod of the PRUSS remoteproc module can only succeed when the
  PRU/PRUSS devices are unbound from their drivers, if there were any
  manually booted PRU cores. Ideally, the boot would have to be
  implemented in a different layer to avoid this issue.

Signed-off-by: Suman Anna <s-anna@ti.com>
---
 drivers/remoteproc/pruss_remoteproc.c |   23 +++++++++++++++++++++++
 1 files changed, 23 insertions(+), 0 deletions(-)

diff --git a/drivers/remoteproc/pruss_remoteproc.c b/drivers/remoteproc/pruss_remoteproc.c
index 4474155..eec7f1e 100644
--- a/drivers/remoteproc/pruss_remoteproc.c
+++ b/drivers/remoteproc/pruss_remoteproc.c
@@ -737,6 +737,22 @@ static int pru_rproc_probe(struct platform_device *pdev)
 		goto put_mbox;
 	}
 
+	/*
+	 * rproc_add will boot the processor if the corresponding PRU
+	 * has a virtio device published in its resource table. If not
+	 * present, manually boot the PRU remoteproc, but only after
+	 * the remoteproc core is done with loading the firmware image.
+	 */
+	wait_for_completion(&pru->rproc->firmware_loading_complete);
+	if (list_empty(&pru->rproc->rvdevs)) {
+		dev_info(dev, "booting the PRU core manually\n");
+		ret = rproc_boot(pru->rproc);
+		if (ret) {
+			dev_err(dev, "rproc_boot failed\n");
+			goto del_rproc;
+		}
+	}
+
 	/* suppress unused function warning */
 	(void)pru_trigger_interrupt;
 
@@ -744,6 +760,8 @@ static int pru_rproc_probe(struct platform_device *pdev)
 
 	return 0;
 
+del_rproc:
+	rproc_del(pru->rproc);
 put_mbox:
 	mbox_free_channel(pru->mbox);
 free_rproc:
@@ -759,6 +777,11 @@ static int pru_rproc_remove(struct platform_device *pdev)
 
 	dev_info(dev, "%s: removing rproc %s\n", __func__, rproc->name);
 
+	if (list_empty(&pru->rproc->rvdevs)) {
+		dev_info(dev, "stopping the manually booted PRU core\n");
+		rproc_shutdown(pru->rproc);
+	}
+
 	mbox_free_channel(pru->mbox);
 
 	rproc_del(rproc);
-- 
1.7.5.4

