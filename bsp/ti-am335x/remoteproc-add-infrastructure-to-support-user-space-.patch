From c4a048666eaf56047422e2abba7762b32ada64e4 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 13 Feb 2017 18:11:07 -0600
Subject: [PATCH 589/895] remoteproc: add infrastructure to support user-space
 loading/booting

The remoteproc infrastructure is enhanced to allow remoteproc drivers
to support userspace driven loading and booting mechanism. This is
done in preparation to allow the TI Keystone remoteproc driver to
support a userspace based loader.

A new field 'use_userspace_loader' is added to the rproc structure,
and this field is expected to be set alongside configuring the
'auto_boot' flag to false by remoteproc drivers wishing to bypass
the in-kernel loading and boot mechanism. The remoteproc core skips
looking for firmware or loading any firmware segments using these
two state flags.

The remoteproc drivers are expected to invoke rproc_boot() and
rproc_shutdown() for triggering the boot and shutdown of the remote
processor after the loading is completed and the resource table
information is published to the remoteproc driver. The resource
table is processed in-line during the rproc_boot() invocation.

The interface and implementation details to userspace is left to
the individual remoteproc drivers.

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Sam Nelson <sam.nelson@ti.com>
(cherry picked from commit 1c15e38f32b1ab1fd11a14ca8670dcfa56651f13)
---
 drivers/remoteproc/remoteproc_core.c |   34 ++++++++++++++++++++++------------
 include/linux/remoteproc.h           |    2 ++
 2 files changed, 24 insertions(+), 12 deletions(-)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 65bc002..0999faa 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -1105,7 +1105,11 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 	if (ret)
 		return ret;
 
-	dev_info(dev, "Booting fw image %s, size %zd\n", name, fw->size);
+	if (!rproc->use_userspace_loader)
+		dev_info(dev, "Booting fw image %s, size %zd\n",
+			 name, fw->size);
+	else
+		dev_info(dev, "Booting unspecified pre-loaded fw image\n");
 
 	/*
 	 * if enabling an IOMMU isn't relevant for this rproc, this is
@@ -1160,11 +1164,14 @@ static int rproc_fw_boot(struct rproc *rproc, const struct firmware *fw)
 		}
 	}
 
-	/* load the ELF segments to memory */
-	ret = rproc_load_segments(rproc, fw);
-	if (ret) {
-		dev_err(dev, "Failed to load program segments: %d\n", ret);
-		goto clean_up_resources;
+	if (!rproc->use_userspace_loader) {
+		/* load the ELF segments to memory */
+		ret = rproc_load_segments(rproc, fw);
+		if (ret) {
+			dev_err(dev, "Failed to load program segments: %d\n",
+				ret);
+			goto clean_up_resources;
+		}
 	}
 
 	/*
@@ -1371,16 +1378,19 @@ static int __rproc_boot(struct rproc *rproc)
 
 	dev_info(dev, "powering up %s\n", rproc->name);
 
-	/* load firmware */
-	ret = request_firmware(&firmware_p, rproc->firmware, dev);
-	if (ret < 0) {
-		dev_err(dev, "request_firmware failed: %d\n", ret);
-		goto downref_rproc;
+	if (!rproc->use_userspace_loader) {
+		/* load firmware */
+		ret = request_firmware(&firmware_p, rproc->firmware, dev);
+		if (ret < 0) {
+			dev_err(dev, "request_firmware failed: %d\n", ret);
+			goto downref_rproc;
+		}
 	}
 
 	ret = rproc_fw_boot(rproc, firmware_p);
 
-	release_firmware(firmware_p);
+	if (!rproc->use_userspace_loader)
+		release_firmware(firmware_p);
 
 downref_rproc:
 	if (ret)
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index 7292be8..b17cdd5 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -446,6 +446,7 @@ enum rproc_crash_type {
  * @cached_table: copy of the resource table
  * @fw_version: human readable version information extracted from f/w
  * @has_iommu: flag to indicate if remote processor is behind an MMU
+ * @use_userspace_loader: flag to denote if remoteproc is loaded by userspace
  */
 struct rproc {
 	struct list_head node;
@@ -482,6 +483,7 @@ struct rproc {
 	char *fw_version;
 	bool has_iommu;
 	bool auto_boot;
+	bool use_userspace_loader;
 };
 
 /**
-- 
1.7.5.4

