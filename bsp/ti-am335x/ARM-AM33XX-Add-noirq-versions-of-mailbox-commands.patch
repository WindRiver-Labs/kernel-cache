From 1540398cf48cfddcd840c82090ae609f7375bc49 Mon Sep 17 00:00:00 2001
From: Russ Dill <russ.dill@ti.com>
Date: Thu, 23 Jan 2014 01:56:54 -0800
Subject: [PATCH 152/188] ARM: AM33XX: Add noirq versions of mailbox commands

This commit comes from branch ti-linux-3.12.y:
  git://git.ti.com/ti-linux-kernel/ti-linux-kernel.git

The mailbox framework is used to send messages between the A8 and the
M3 PM coprocessor. In order to support CPU idle, the messages need to
be sent when IRQs are disabled, preventing the use of spin_lock_bh.
Make a noirq version of the functions required that do not attempt
to take such a lock.

Signed-off-by: Russ Dill <russ.dill@ti.com>
(cherry picked from commit cd7ec02f16a2c0337361ca4dcff544d87286618d)
---
 arch/arm/mach-omap2/wkup_m3.c  |   19 +++++++++++++++++++
 arch/arm/mach-omap2/wkup_m3.h  |    1 +
 drivers/mailbox/omap-mailbox.c |   24 ++++++++++++++++--------
 include/linux/omap-mailbox.h   |    1 +
 4 files changed, 37 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-omap2/wkup_m3.c b/arch/arm/mach-omap2/wkup_m3.c
index 45fb78b..c35327f 100644
--- a/arch/arm/mach-omap2/wkup_m3.c
+++ b/arch/arm/mach-omap2/wkup_m3.c
@@ -186,6 +186,25 @@ int wkup_m3_copy_data(const u8 *data, size_t size)
 	return wkup_m3->data_end - wkup_m3->data;
 }
 
+int wkup_m3_ping_noirq(void)
+{
+	int ret = 0;
+
+	if (!wkup_m3->mbox) {
+		pr_err("PM: No IPC channel to communicate with wkup_m3!\n");
+		return -EIO;
+	}
+
+	/*
+	 * Write a dummy message to the mailbox in order to trigger the RX
+	 * interrupt to alert the M3 that data is available in the IPC
+	 * registers.
+	 */
+	ret = omap_mbox_msg_send_noirq(wkup_m3->mbox, 0xABCDABCD);
+
+	return ret;
+}
+
 struct wkup_m3_wakeup_src wkup_m3_wake_src(void)
 {
 	struct am33xx_ipc_regs ipc_regs;
diff --git a/arch/arm/mach-omap2/wkup_m3.h b/arch/arm/mach-omap2/wkup_m3.h
index 2fe60d0..53903f4 100644
--- a/arch/arm/mach-omap2/wkup_m3.h
+++ b/arch/arm/mach-omap2/wkup_m3.h
@@ -50,6 +50,7 @@ struct am33xx_ipc_regs {
 int wkup_m3_prepare(void);
 void wkup_m3_set_ops(struct wkup_m3_ops *ops);
 int wkup_m3_ping(void);
+int wkup_m3_ping_noirq(void);
 struct wkup_m3_wakeup_src wkup_m3_wake_src(void);
 int wkup_m3_pm_status(void);
 int wkup_m3_is_valid(void);
diff --git a/drivers/mailbox/omap-mailbox.c b/drivers/mailbox/omap-mailbox.c
index bcac0f3..695dc59 100644
--- a/drivers/mailbox/omap-mailbox.c
+++ b/drivers/mailbox/omap-mailbox.c
@@ -89,21 +89,18 @@ static inline int is_mbox_irq(struct omap_mbox *mbox, omap_mbox_irq_t irq)
  *
  * Returns 0 on success, or an error otherwise
  */
-int omap_mbox_msg_send(struct omap_mbox *mbox, mbox_msg_t msg)
+int omap_mbox_msg_send_noirq(struct omap_mbox *mbox, mbox_msg_t msg)
 {
 	struct omap_mbox_queue *mq = mbox->txq;
-	int ret = 0, len;
-
-	spin_lock_bh(&mq->lock);
+	int len;
 
 	if (kfifo_avail(&mq->fifo) < sizeof(msg)) {
-		ret = -ENOMEM;
-		goto out;
+		return -ENOMEM;
 	}
 
 	if (kfifo_is_empty(&mq->fifo) && !mbox_poll_for_space(mbox)) {
 		mbox_fifo_write(mbox, msg);
-		goto out;
+		return 0;
 	}
 
 	len = kfifo_in(&mq->fifo, (unsigned char *)&msg, sizeof(msg));
@@ -111,8 +108,19 @@ int omap_mbox_msg_send(struct omap_mbox *mbox, mbox_msg_t msg)
 
 	tasklet_schedule(&mbox->txq->tasklet);
 
-out:
+	return 0;
+}
+EXPORT_SYMBOL(omap_mbox_msg_send_noirq);
+
+int omap_mbox_msg_send(struct omap_mbox *mbox, mbox_msg_t msg)
+{
+	struct omap_mbox_queue *mq = mbox->txq;
+	int ret;
+
+	spin_lock_bh(&mq->lock);
+	ret = omap_mbox_msg_send_noirq(mbox, msg);
 	spin_unlock_bh(&mq->lock);
+
 	return ret;
 }
 EXPORT_SYMBOL(omap_mbox_msg_send);
diff --git a/include/linux/omap-mailbox.h b/include/linux/omap-mailbox.h
index 86c8943..27631fa 100644
--- a/include/linux/omap-mailbox.h
+++ b/include/linux/omap-mailbox.h
@@ -20,6 +20,7 @@ typedef int __bitwise omap_mbox_irq_t;
 
 /* client api for message transmission */
 int omap_mbox_msg_send(struct omap_mbox *, mbox_msg_t msg);
+int omap_mbox_msg_send_noirq(struct omap_mbox *mbox, mbox_msg_t msg);
 
 /* client api for acquiring and releasing a mailbox */
 struct omap_mbox *omap_mbox_get(const char *, struct notifier_block *nb);
-- 
1.7.5.4

