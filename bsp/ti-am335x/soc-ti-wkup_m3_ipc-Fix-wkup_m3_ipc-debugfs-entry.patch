From 74a1efe680365aabbca157226e98c620aacf4c34 Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Wed, 15 Mar 2017 21:32:29 -0500
Subject: [PATCH 673/895] soc: ti: wkup_m3_ipc: Fix wkup_m3_ipc debugfs entry

There are several issues with the wkup_m3_ipc debugfs entry and this
patch fixes them all:

In an attempt to prevent the enable_late_halt debugfs entry from using
an invalid wkup_m3_ipc pointer its creation was moved until after the
wkup_m3 had booted. Unfortunately it was placed in the wkup_m3 irq
handler leading to a bug.

Waiting until the m3 is booted is unneccessary as the data structures
configured by the enable_late_halt sysfs entry are created during probe,
so call wkup_m3_ipc_dbg_init during probe instead of interrupt context
which causes "sleeping function called from invalid context
triggered by wkup_m3_txev_handler" bug.

In addition to that the wkup_m3_ipc_dbg_init call is enclosed in
CONFIG_DEBUG_FS block but will cause undefined function error if that
option is not selected, so add a stub for case where !CONFIG_DEBUG_FS.

Finally, make sure we remove the debugfs entry when we remove the driver
so there are no issues when we try to prove again, and so that there is
not a floating, invalid, debugfs entry when the driver is unloaded.

Fixes: f5714f575f3b ("soc: ti: wkup_m3_ipc: Fix enable_late_halt sysfs entry")
Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
(cherry picked from commit afed31c7352b5048b6975af3c0d72b2f5051c97c)
---
 drivers/soc/ti/wkup_m3_ipc.c |   27 ++++++++++++++++++++++-----
 include/linux/wkup_m3_ipc.h  |    2 ++
 2 files changed, 24 insertions(+), 5 deletions(-)

diff --git a/drivers/soc/ti/wkup_m3_ipc.c b/drivers/soc/ti/wkup_m3_ipc.c
index 2d9516a..62f96eb 100644
--- a/drivers/soc/ti/wkup_m3_ipc.c
+++ b/drivers/soc/ti/wkup_m3_ipc.c
@@ -207,18 +207,32 @@ DEFINE_SIMPLE_ATTRIBUTE(wkup_m3_ipc_option_fops, option_get, option_set,
 
 static int wkup_m3_ipc_dbg_init(struct wkup_m3_ipc *m3_ipc)
 {
-	struct dentry *d;
+	m3_ipc->dbg_path = debugfs_create_dir("wkup_m3_ipc", NULL);
 
-	d = debugfs_create_dir("wkup_m3_ipc", NULL);
-	if (!d)
+	if (!m3_ipc->dbg_path)
 		return -EINVAL;
 
-	(void)debugfs_create_file("enable_late_halt", 0644, d,
+	(void)debugfs_create_file("enable_late_halt", 0644,
+				  m3_ipc->dbg_path,
 				  &m3_ipc->halt,
 				  &wkup_m3_ipc_option_fops);
 
 	return 0;
 }
+
+static inline void wkup_m3_ipc_dbg_destroy(struct wkup_m3_ipc *m3_ipc)
+{
+	debugfs_remove_recursive(m3_ipc->dbg_path);
+}
+#else
+static inline int wkup_m3_ipc_dbg_init(struct wkup_m3_ipc *m3_ipc)
+{
+	return 0;
+}
+
+static inline void wkup_m3_ipc_dbg_destroy(struct wkup_m3_ipc *m3_ipc)
+{
+}
 #endif /* CONFIG_DEBUG_FS */
 
 static void am33xx_txev_eoi(struct wkup_m3_ipc *m3_ipc)
@@ -286,7 +300,6 @@ static irqreturn_t wkup_m3_txev_handler(int irq, void *ipc_data)
 
 		m3_ipc->state = M3_STATE_INITED;
 		wkup_m3_init_scale_data(m3_ipc, dev);
-		wkup_m3_ipc_dbg_init(m3_ipc);
 		complete(&m3_ipc->sync_complete);
 		break;
 	case M3_STATE_MSG_FOR_RESET:
@@ -700,6 +713,8 @@ static int wkup_m3_ipc_probe(struct platform_device *pdev)
 		goto err_put_rproc;
 	}
 
+	wkup_m3_ipc_dbg_init(m3_ipc);
+
 	return 0;
 
 err_put_rproc:
@@ -711,6 +726,8 @@ err_free_mbox:
 
 static int wkup_m3_ipc_remove(struct platform_device *pdev)
 {
+	wkup_m3_ipc_dbg_destroy(m3_ipc_state);
+
 	mbox_free_channel(m3_ipc_state->mbox);
 
 	rproc_shutdown(m3_ipc_state->rproc);
diff --git a/include/linux/wkup_m3_ipc.h b/include/linux/wkup_m3_ipc.h
index 3014fe7..ba7049f 100644
--- a/include/linux/wkup_m3_ipc.h
+++ b/include/linux/wkup_m3_ipc.h
@@ -47,6 +47,8 @@ struct wkup_m3_ipc {
 
 	struct wkup_m3_ipc_ops *ops;
 	bool is_rtc_only;
+
+	struct dentry *dbg_path;
 };
 
 struct wkup_m3_wakeup_src {
-- 
1.7.5.4

