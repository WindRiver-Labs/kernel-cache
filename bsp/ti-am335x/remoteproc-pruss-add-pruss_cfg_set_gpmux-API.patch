From ed3a442828be252de24f0b7ee758a2862879892d Mon Sep 17 00:00:00 2001
From: Roger Quadros <rogerq@ti.com>
Date: Tue, 31 May 2016 18:01:47 +0000
Subject: [PATCH 586/895] remoteproc/pruss: add pruss_cfg_set_gpmux() API

Add a new API, pruss_cfg_set_gpmux(), to set the GP MUX mode
for programming the PRUSS internal wrapper mux functionality
as needed by a usecase. This mux functionality is on top of
the device level pinmux.

This API is currently limited to the PRU remoteproc driver.

Signed-off-by: Roger Quadros <rogerq@ti.com>
[s-anna@ti.com: rename API, revise minor comments & commit]
Signed-off-by: Suman Anna <s-anna@ti.com>

(cherry picked from commit c843dac7d1d7b6e887cc1d18a66250ab276e8a5e)
---
 drivers/remoteproc/pruss.c |   33 +++++++++++++++++++++++++++++++++
 drivers/remoteproc/pruss.h |   18 ++++++++++++++++++
 2 files changed, 51 insertions(+), 0 deletions(-)

diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index b912409..ec2b2b2 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -378,6 +378,39 @@ int pruss_cfg_gpimode(struct pruss *pruss, struct rproc *rproc,
 EXPORT_SYMBOL_GPL(pruss_cfg_gpimode);
 
 /**
+ * pruss_cfg_set_gpmux() - set the GP_MUX mode of the PRU
+ * @pruss: the pruss instance handle
+ * @pru_id: the PRU id for which the GP_MUX mode is to be set
+ * @mux_sel: GP mux sel value to set
+ *
+ * Sets the GP MUX mode for a given PRU by programming the
+ * corresponding PRUSS_CFG_GPCFGx register. This API is currently
+ * limited to be invoked only by the pru_rproc driver
+ *
+ * Returns 0 on success, or an error code otherwise
+ */
+int pruss_cfg_set_gpmux(struct pruss *pruss, enum pruss_pru_id pru_id,
+			enum pruss_gp_mux_sel mux_sel)
+{
+	u32 reg, val, mask;
+
+	if (pru_id < 0 || pru_id >= PRUSS_NUM_PRUS) {
+		dev_err(pruss->dev, "%s: invalid PRU id, %d\n",
+			__func__, pru_id);
+		return -EINVAL;
+	}
+
+	reg = PRUSS_CFG_GPCFG0 + (0x4 * pru_id);
+	val = mux_sel << PRUSS_GPCFG_PRU_MUX_SEL_SHIFT;
+	mask = PRUSS_GPCFG_PRU_MUX_SEL_MASK;
+
+	pruss_set_reg(pruss, PRUSS_MEM_CFG, reg, mask, val);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pruss_cfg_set_gpmux);
+
+/**
  * pruss_cfg_miirt_enable() - Enable/disable MII RT Events
  * @pruss: the pruss instance
  * @enable: enable/disable
diff --git a/drivers/remoteproc/pruss.h b/drivers/remoteproc/pruss.h
index af7e701..a2340089 100644
--- a/drivers/remoteproc/pruss.h
+++ b/drivers/remoteproc/pruss.h
@@ -115,6 +115,9 @@
 #define PRUSS_GPCFG_PRU_GPI_MODE_MASK		GENMASK(1, 0)
 #define PRUSS_GPCFG_PRU_GPI_MODE_SHIFT		0
 
+#define PRUSS_GPCFG_PRU_MUX_SEL_SHIFT		26
+#define PRUSS_GPCFG_PRU_MUX_SEL_MASK		GENMASK(29, 26)
+
 /* PRUSS_MII_RT register bits */
 #define PRUSS_MII_RT_EVENT_EN			BIT(0)
 
@@ -123,6 +126,19 @@
 #define PRUSS_SPP_PRU1_PAD_HP_EN		BIT(0)
 
 /**
+ * enum pruss_gp_mux_sel - PRUSS GPI/O Mux modes for the
+ * PRUSS_GPCFG0/1 registers
+ */
+enum pruss_gp_mux_sel {
+	PRUSS_GP_MUX_SEL_GP = 0,
+	PRUSS_GP_MUX_SEL_ENDAT,
+	PRUSS_GP_MUX_SEL_RESERVED,
+	PRUSS_GP_MUX_SEL_SD,
+	PRUSS_GP_MUX_SEL_MII2,
+	PRUSS_GP_MUX_MAX,
+};
+
+/**
  * struct pruss_intc_config - INTC configuration info
  * @sysev_to_ch: system events to channel mapping information
  * @ch_to_host: interrupt channel to host interrupt information
@@ -160,5 +176,7 @@ int pruss_intc_configure(struct pruss *pruss,
 			 struct pruss_intc_config *intc_config);
 int pruss_intc_unconfigure(struct pruss *pruss,
 			   struct pruss_intc_config *intc_config);
+int pruss_cfg_set_gpmux(struct pruss *pruss, enum pruss_pru_id pru_id,
+			enum pruss_gp_mux_sel mux_sel);
 
 #endif	/* _PRUSS_H_ */
-- 
1.7.5.4

