From 47f9c8976b09d83c3a2bfd75223e753eb7136179 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 26 Sep 2017 11:39:14 +0800
Subject: [PATCH 892/895] mailbox: fix an invalid context by replacing lock
 type

BUG: sleeping function called from invalid context at kernel/locking/rtmutex.c:995
in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper
Preemption disabled at:[<c0834c08>] schedule_preempt_disabled+0x28/0x2c

CPU: 0 PID: 0 Comm: swapper Not tainted 4.8.24-rt10-WR9.0.0.11_preempt-rt #1
Hardware name: Generic AM33XX (Flattened Device Tree)
[<c0111bd8>] (unwind_backtrace) from [<c010cfc0>] (show_stack+0x20/0x24)
[<c010cfc0>] (show_stack) from [<c04ba6f0>] (dump_stack+0x24/0x28)
[<c04ba6f0>] (dump_stack) from [<c0156c54>] (___might_sleep+0x13c/0x1b4)
[<c0156c54>] (___might_sleep) from [<c0837f00>] (rt_spin_lock+0x2c/0x74)
[<c0837f00>] (rt_spin_lock) from [<c06e21f8>] (mbox_send_message+0x38/0x124)
[<c06e21f8>] (mbox_send_message) from [<bf17f638>] (wkup_m3_prepare_low_power+0x178/0x1dc [wkup_m3_ipc])
[<bf17f638>] (wkup_m3_prepare_low_power [wkup_m3_ipc]) from [<bf18b064>] (am33xx_do_sram_idle+0x64/0x74 [pm33xx])
[<bf18b064>] (am33xx_do_sram_idle [pm33xx]) from [<c0122e30>] (amx3_idle_enter+0x40/0x50)
[<c0122e30>] (amx3_idle_enter) from [<c010e380>] (arm_cpuidle_suspend+0x30/0x34)
[<c010e380>] (arm_cpuidle_suspend) from [<c06a2b38>] (arm_enter_idle_state+0x50/0x68)
[<c06a2b38>] (arm_enter_idle_state) from [<c06a1280>] (cpuidle_enter_state+0x134/0x3ec)
[<c06a1280>] (cpuidle_enter_state) from [<c06a1588>] (cpuidle_enter+0x24/0x28)
[<c06a1588>] (cpuidle_enter) from [<c0161d18>] (call_cpuidle+0x40/0x58)
[<c0161d18>] (call_cpuidle) from [<c01620c0>] (cpu_startup_entry+0x218/0x328)
[<c01620c0>] (cpu_startup_entry) from [<c0833548>] (rest_init+0x94/0x98)
[<c0833548>] (rest_init) from [<c0c00d40>] (start_kernel+0x3a8/0x3b4)

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/mailbox/mailbox.c          |   24 ++++++++++++------------
 drivers/mailbox/omap-mailbox.c     |    4 ++--
 include/linux/mailbox_controller.h |    2 +-
 3 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/drivers/mailbox/mailbox.c b/drivers/mailbox/mailbox.c
index 4a36632..b4f1bd8 100644
--- a/drivers/mailbox/mailbox.c
+++ b/drivers/mailbox/mailbox.c
@@ -31,11 +31,11 @@ static int add_to_rbuf(struct mbox_chan *chan, void *mssg)
 	int idx;
 	unsigned long flags;
 
-	spin_lock_irqsave(&chan->lock, flags);
+	raw_spin_lock_irqsave(&chan->lock, flags);
 
 	/* See if there is any space left */
 	if (chan->msg_count == MBOX_TX_QUEUE_LEN) {
-		spin_unlock_irqrestore(&chan->lock, flags);
+		raw_spin_unlock_irqrestore(&chan->lock, flags);
 		return -ENOBUFS;
 	}
 
@@ -48,7 +48,7 @@ static int add_to_rbuf(struct mbox_chan *chan, void *mssg)
 	else
 		chan->msg_free++;
 
-	spin_unlock_irqrestore(&chan->lock, flags);
+	raw_spin_unlock_irqrestore(&chan->lock, flags);
 
 	return idx;
 }
@@ -60,7 +60,7 @@ static void msg_submit(struct mbox_chan *chan)
 	void *data;
 	int err = -EBUSY;
 
-	spin_lock_irqsave(&chan->lock, flags);
+	raw_spin_lock_irqsave(&chan->lock, flags);
 
 	if (!chan->msg_count || chan->active_req)
 		goto exit;
@@ -83,7 +83,7 @@ static void msg_submit(struct mbox_chan *chan)
 		chan->msg_count--;
 	}
 exit:
-	spin_unlock_irqrestore(&chan->lock, flags);
+	raw_spin_unlock_irqrestore(&chan->lock, flags);
 
 	if (!err && (chan->txdone_method & TXDONE_BY_POLL))
 		/* kick start the timer immediately to avoid delays */
@@ -96,10 +96,10 @@ static void tx_tick(struct mbox_chan *chan, int r)
 	unsigned long flags;
 	void *mssg;
 
-	spin_lock_irqsave(&chan->lock, flags);
+	raw_spin_lock_irqsave(&chan->lock, flags);
 	mssg = chan->active_req;
 	chan->active_req = NULL;
-	spin_unlock_irqrestore(&chan->lock, flags);
+	raw_spin_unlock_irqrestore(&chan->lock, flags);
 
 	/* Submit next message */
 	msg_submit(chan);
@@ -341,7 +341,7 @@ struct mbox_chan *mbox_request_channel(struct mbox_client *cl, int index)
 		return ERR_PTR(-EBUSY);
 	}
 
-	spin_lock_irqsave(&chan->lock, flags);
+	raw_spin_lock_irqsave(&chan->lock, flags);
 	chan->msg_free = 0;
 	chan->msg_count = 0;
 	chan->active_req = NULL;
@@ -351,7 +351,7 @@ struct mbox_chan *mbox_request_channel(struct mbox_client *cl, int index)
 	if (chan->txdone_method	== TXDONE_BY_POLL && cl->knows_txdone)
 		chan->txdone_method |= TXDONE_BY_ACK;
 
-	spin_unlock_irqrestore(&chan->lock, flags);
+	raw_spin_unlock_irqrestore(&chan->lock, flags);
 
 	ret = chan->mbox->ops->startup(chan);
 	if (ret) {
@@ -409,14 +409,14 @@ void mbox_free_channel(struct mbox_chan *chan)
 	chan->mbox->ops->shutdown(chan);
 
 	/* The queued TX requests are simply aborted, no callbacks are made */
-	spin_lock_irqsave(&chan->lock, flags);
+	raw_spin_lock_irqsave(&chan->lock, flags);
 	chan->cl = NULL;
 	chan->active_req = NULL;
 	if (chan->txdone_method == (TXDONE_BY_POLL | TXDONE_BY_ACK))
 		chan->txdone_method = TXDONE_BY_POLL;
 
 	module_put(chan->mbox->dev->driver->owner);
-	spin_unlock_irqrestore(&chan->lock, flags);
+	raw_spin_unlock_irqrestore(&chan->lock, flags);
 }
 EXPORT_SYMBOL_GPL(mbox_free_channel);
 
@@ -465,7 +465,7 @@ int mbox_controller_register(struct mbox_controller *mbox)
 		chan->cl = NULL;
 		chan->mbox = mbox;
 		chan->txdone_method = txdone;
-		spin_lock_init(&chan->lock);
+		raw_spin_lock_init(&chan->lock);
 	}
 
 	if (!mbox->of_xlate)
diff --git a/drivers/mailbox/omap-mailbox.c b/drivers/mailbox/omap-mailbox.c
index c5e8b9c..acf19e1 100644
--- a/drivers/mailbox/omap-mailbox.c
+++ b/drivers/mailbox/omap-mailbox.c
@@ -444,13 +444,13 @@ struct mbox_chan *omap_mbox_request_channel(struct mbox_client *cl,
 		return ERR_PTR(-ENOENT);
 
 	chan = mbox->chan;
-	spin_lock_irqsave(&chan->lock, flags);
+	raw_spin_lock_irqsave(&chan->lock, flags);
 	chan->msg_free = 0;
 	chan->msg_count = 0;
 	chan->active_req = NULL;
 	chan->cl = cl;
 	init_completion(&chan->tx_complete);
-	spin_unlock_irqrestore(&chan->lock, flags);
+	raw_spin_unlock_irqrestore(&chan->lock, flags);
 
 	ret = chan->mbox->ops->startup(chan);
 	if (ret) {
diff --git a/include/linux/mailbox_controller.h b/include/linux/mailbox_controller.h
index 74deadb..25575e7 100644
--- a/include/linux/mailbox_controller.h
+++ b/include/linux/mailbox_controller.h
@@ -122,7 +122,7 @@ struct mbox_chan {
 	void *active_req;
 	unsigned msg_count, msg_free;
 	void *msg_data[MBOX_TX_QUEUE_LEN];
-	spinlock_t lock; /* Serialise access to the channel */
+	raw_spinlock_t lock; /* Serialise access to the channel */
 	void *con_priv;
 };
 
-- 
1.7.5.4

