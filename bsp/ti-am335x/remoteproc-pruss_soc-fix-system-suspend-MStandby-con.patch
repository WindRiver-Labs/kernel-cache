From 04b1b27d186a051d2c8bc1dc9ec5b7cf78e8e759 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 6 Feb 2017 10:24:59 -0600
Subject: [PATCH 575/895] remoteproc/pruss_soc: fix system suspend/MStandby
 config issues

The PRU-ICSS subsystem has a separate PRUSS_CFG module that
contains various configuration registers. This includes a control
bit STANDBY_INIT in register PRUSS_CFG register to initiate a
Standby sequence (when set) and trigger a MStandby request to the
SoC's PRCM module. This same bit is also used to enable the OCP
master ports (when cleared). The system suspend/resume functionality
on AM33xx/AM437x/AM57xx SoCs requires all initiators to assert their
MStandby signal properly inorder to successfully enter suspend, and
resume on a wakeup event.

Certain firmwares can enable the OCP master ports through the
STANDBY_INIT programming on the firmware side in order to access
peripherals or memories external to the PRUSS. This causes a hang
in the resume sequence on AM33xx/AM437x boards and requires a
board reset to come out of the hang.

This patch adds the preliminary System PM callbacks in the PRUSS SoC
bus driver, and fixes this system resume hang by setting the
STANDBY_INIT in the PM system suspend callback and resetting it back
in the PM system resume callback, if so configured. The clearing of
the STANDBY_INIT during resume requires an acknowledgment from PRCM
and is done through the monitoring of the PRUSS_SYSCFG.SUB_MWAIT bit.

NOTE:
1. This patch only adds the PM callbacks with code to fix the System
   Suspend/Resume hang issue on AM33xx/AM437x SoCs, but does not
   implement the full context save and restore required for the PRUSS
   drivers to work across system suspend/resume when the power domain
   is switched off (L4PER domain is switched OFF on AM335x/AM437x
   during system suspend/resume, so PRUSS modules do lose context).
2. The PRUSS driver functionality on AM57xx SoCs is not affected that
   much because the PER power domain to which the PRUSS IPs belong is
   not switched OFF during suspend/resume.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit 3f484f09d87f3128b93f1b5315fec9fa4485a3f0)
---
 drivers/remoteproc/pruss_soc_bus.c |   89 ++++++++++++++++++++++++++++++++++++
 1 files changed, 89 insertions(+), 0 deletions(-)

diff --git a/drivers/remoteproc/pruss_soc_bus.c b/drivers/remoteproc/pruss_soc_bus.c
index 2c936e2..87b97af 100644
--- a/drivers/remoteproc/pruss_soc_bus.c
+++ b/drivers/remoteproc/pruss_soc_bus.c
@@ -15,6 +15,7 @@
  * GNU General Public License for more details.
  */
 
+#include <linux/delay.h>
 #include <linux/io.h>
 #include <linux/module.h>
 #include <linux/of_platform.h>
@@ -24,13 +25,19 @@
 
 #include <linux/platform_data/remoteproc-pruss.h>
 
+#define SYSCFG_OFFSET		0x4
+#define SYSCFG_STANDBY_INIT	BIT(4)
+#define SYSCFG_SUB_MWAIT_READY	BIT(5)
+
 /**
  * struct pruss_soc_bus - PRUSS SoC bus structure
  * @base: kernel mapped address for bus register base
+ * @in_standby: flag for storing standby status
  * @has_reset: cached variable for storing global module reset flag
  */
 struct pruss_soc_bus {
 	void __iomem *base;
+	bool in_standby;
 	bool has_reset;
 };
 
@@ -42,6 +49,84 @@ struct pruss_soc_bus_match_data {
 	bool has_reset;
 };
 
+static inline void pruss_soc_bus_rmw(void __iomem *base, unsigned int offset,
+				     u32 mask, u32 set)
+{
+	u32 val;
+
+	val = readl_relaxed(base + offset);
+	val &= ~mask;
+	val |= (set & mask);
+	writel_relaxed(val, base + offset);
+}
+
+#ifdef CONFIG_PM_SLEEP
+/*
+ * This function programs the PRUSS_SYSCFG.STANDBY_INIT bit to achieve dual
+ * functionalities - one is to deassert the MStandby signal to the device
+ * PRCM, and the other is to enable OCP master ports to allow accesses
+ * outside of the PRU-ICSS. The function has to wait for the PRCM to
+ * acknowledge through the monitoring of the PRUSS_SYSCFG.SUB_MWAIT bit.
+ */
+static int pruss_soc_bus_enable_ocp_master_ports(struct device *dev)
+{
+	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
+	u32 syscfg_val, i;
+	bool ready = false;
+
+	pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET, SYSCFG_STANDBY_INIT,
+			  0);
+
+	/* wait till we are ready for transactions - delay is arbitrary */
+	for (i = 0; i < 10; i++) {
+		syscfg_val = readl_relaxed(psoc_bus->base + SYSCFG_OFFSET);
+		ready = !(syscfg_val & SYSCFG_SUB_MWAIT_READY);
+		if (ready)
+			break;
+		udelay(5);
+	}
+
+	if (!ready) {
+		dev_err(dev, "timeout waiting for SUB_MWAIT_READY\n");
+		return -ETIMEDOUT;
+	}
+
+	return 0;
+}
+
+static int pruss_soc_bus_suspend(struct device *dev)
+{
+	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
+	u32 syscfg_val;
+
+	syscfg_val = readl_relaxed(psoc_bus->base + SYSCFG_OFFSET);
+	psoc_bus->in_standby = syscfg_val & SYSCFG_STANDBY_INIT;
+
+	/* initiate MStandby, undo the MStandby config in probe */
+	if (!psoc_bus->in_standby) {
+		pruss_soc_bus_rmw(psoc_bus->base, SYSCFG_OFFSET,
+				  SYSCFG_STANDBY_INIT, SYSCFG_STANDBY_INIT);
+	}
+
+	return 0;
+}
+
+static int pruss_soc_bus_resume(struct device *dev)
+{
+	struct pruss_soc_bus *psoc_bus = dev_get_drvdata(dev);
+	int ret = 0;
+
+	/* re-enable OCP master ports/disable MStandby */
+	if (!psoc_bus->in_standby) {
+		ret = pruss_soc_bus_enable_ocp_master_ports(dev);
+		if (ret)
+			dev_err(dev, "%s failed\n", __func__);
+	}
+
+	return ret;
+}
+#endif /* CONFIG_PM_SLEEP */
+
 static const struct of_device_id pruss_soc_bus_of_match[];
 
 static const struct pruss_soc_bus_match_data *pruss_soc_bus_get_match_data(
@@ -158,9 +243,13 @@ static const struct of_device_id pruss_soc_bus_of_match[] = {
 };
 MODULE_DEVICE_TABLE(of, pruss_soc_bus_of_match);
 
+static SIMPLE_DEV_PM_OPS(pruss_soc_bus_pm_ops,
+			 pruss_soc_bus_suspend, pruss_soc_bus_resume);
+
 static struct platform_driver pruss_soc_bus_driver = {
 	.driver	= {
 		.name = "pruss-soc-bus",
+		.pm = &pruss_soc_bus_pm_ops,
 		.of_match_table = pruss_soc_bus_of_match,
 	},
 	.probe	= pruss_soc_bus_probe,
-- 
1.7.5.4

