From 5b688a7f04a3a16a06ac8d81a5a210e0acb031ff Mon Sep 17 00:00:00 2001
From: Sekhar Nori <nsekhar@ti.com>
Date: Wed, 26 Aug 2015 16:29:13 +0530
Subject: [PATCH 513/800] tty: serial: 8250: omap: add optional gpio based
 port enable

In some platforms the uart port is selected/enabled using
a GPIO based selector.

The GPIO for the UART selection is passed through DT and is
an optional property. When passed, the GPIO is set once, at
probe time.

Signed-off-by: Sekhar Nori <nsekhar@ti.com>
[zou: Original patch taken from PROCESSOR-SDK-LINUX-AM335X 02_00_01_07]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 .../devicetree/bindings/serial/omap_serial.txt     |    1 +
 drivers/tty/serial/8250/8250_omap.c                |    8 ++++++++
 2 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/Documentation/devicetree/bindings/serial/omap_serial.txt b/Documentation/devicetree/bindings/serial/omap_serial.txt
index d25ad99..a67976c 100644
--- a/Documentation/devicetree/bindings/serial/omap_serial.txt
+++ b/Documentation/devicetree/bindings/serial/omap_serial.txt
@@ -17,6 +17,7 @@ Optional properties:
 - dmas : DMA specifier, consisting of a phandle to the DMA controller
          node and a DMA channel number.
 - dma-names : "rx" for receive channel, "tx" for transmit channel.
+- enable-gpio: A gpio line to enable the uart port
 
 Example:
 
diff --git a/drivers/tty/serial/8250/8250_omap.c b/drivers/tty/serial/8250/8250_omap.c
index dfc68ff..477eee0 100644
--- a/drivers/tty/serial/8250/8250_omap.c
+++ b/drivers/tty/serial/8250/8250_omap.c
@@ -1093,6 +1093,7 @@ static int omap8250_probe(struct platform_device *pdev)
 	struct resource *irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
 	struct omap8250_priv *priv;
 	struct uart_8250_port up;
+	struct gpio_desc *enable;
 	int ret;
 	void __iomem *membase;
 
@@ -1178,6 +1179,13 @@ static int omap8250_probe(struct platform_device *pdev)
 			 DEFAULT_CLK_SPEED);
 	}
 
+	/* on some boards, a GPIO based port enable is present */
+	enable = devm_gpiod_get_optional(&pdev->dev, "enable", GPIOD_OUT_HIGH);
+	if (IS_ERR(enable)) {
+		dev_err(&pdev->dev, "gpio request failed: %d\n", ret);
+		return PTR_ERR(enable);
+	}
+
 	priv->latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
 	priv->calc_latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
 	pm_qos_add_request(&priv->pm_qos_request, PM_QOS_CPU_DMA_LATENCY,
-- 
1.7.5.4

