From 5ef599920d03addaebf62067cb5ea62a3d4679b9 Mon Sep 17 00:00:00 2001
From: Roger Quadros <rogerq@ti.com>
Date: Mon, 21 Dec 2015 23:55:19 +0530
Subject: [PATCH 581/895] remoteproc/pruss: add pruss_get()/put() API

Add two new get and put API, pruss_get() and pruss_put(), to the
PRUSS platform driver to allow client drivers to request a handle
to a PRUSS device. This handle will be used by client drivers to
request various operations of the PRUSS platform driver through
additional API that will be added in the following patches.

The pruss_get() function returns the pruss handle corresponding
to a PRUSS device referenced by the PRUSS phandle in the "pruss"
property of the client device's DT node. The pruss_put() is the
complimentary function to pruss_get().

Signed-off-by: Roger Quadros <rogerq@ti.com>
Signed-off-by: Felipe Balbi <balbi@ti.com>
Signed-off-by: Andrew F. Davis <afd@ti.com>
[s-anna@ti.com: error checking, binding updates, few minor fixes]
Signed-off-by: Suman Anna <s-anna@ti.com>

(cherry picked from commit 2da6bfd7be5650646f1cb6042f064c374fe9b415)
---
 .../bindings/remoteproc/ti,pruss-remoteproc.txt    |   11 +++
 drivers/remoteproc/pruss.c                         |   80 +++++++++++++++++++-
 drivers/remoteproc/pruss.h                         |    2 +
 include/linux/pruss.h                              |   12 +++
 4 files changed, 104 insertions(+), 1 deletions(-)

diff --git a/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt b/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
index 18f49a5..862f831 100644
--- a/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
+++ b/Documentation/devicetree/bindings/remoteproc/ti,pruss-remoteproc.txt
@@ -200,6 +200,17 @@ used in TI Davinci SoCs. Please refer to the corresponding binding document,
 Documentation/devicetree/bindings/net/davinci-mdio.txt for details.
 
 
+Application/User Nodes
+=======================
+The PRUSS device node will typically get used by application/user nodes that
+define/represent a PRU application. Each application/client node would need a
+reference to the PRUSS node or directly the PRU nodes in general.
+
+Optional Properties:
+--------------------
+- pruss          : phandle to a PRUSS node
+
+
 Example:
 ========
 1.	/* AM33xx PRU-ICSS */
diff --git a/drivers/remoteproc/pruss.c b/drivers/remoteproc/pruss.c
index 04f42fb..4ed609d 100644
--- a/drivers/remoteproc/pruss.c
+++ b/drivers/remoteproc/pruss.c
@@ -4,6 +4,7 @@
  * Copyright (C) 2014-2017 Texas Instruments Incorporated - http://www.ti.com/
  *	Suman Anna <s-anna@ti.com>
  *	Andrew F. Davis <afd@ti.com>
+ *	Roger Quadros <rogerq@ti.com>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -41,6 +42,65 @@ struct pruss_match_private_data {
 	struct pruss_private_data *priv_data;
 };
 
+static DEFINE_MUTEX(pruss_list_mutex);
+static LIST_HEAD(pruss_list);
+
+/**
+ * pruss_get() - get the pruss for the given device
+ * @dev: device interested in the pruss
+ *
+ * Finds the pruss device referenced by the "pruss" property in the
+ * requesting (client) device's device node.
+ *
+ * This function increments the pruss device's refcount, so always
+ * use pruss_put() to decrement it back once pruss isn't needed anymore.
+ *
+ * Returns the pruss handle on success, and NULL on failure.
+ */
+struct pruss *pruss_get(struct device *dev)
+{
+	struct pruss *pruss = NULL, *p;
+	struct device_node *np;
+
+	if (!dev)
+		return NULL;
+
+	np = of_parse_phandle(dev->of_node, "pruss", 0);
+	if (!np)
+		return NULL;
+
+	mutex_lock(&pruss_list_mutex);
+	list_for_each_entry(p, &pruss_list, node) {
+		if (p->dev->of_node == np) {
+			pruss = p;
+			get_device(pruss->dev);
+			break;
+		}
+	}
+
+	mutex_unlock(&pruss_list_mutex);
+	of_node_put(np);
+
+	return pruss;
+}
+EXPORT_SYMBOL_GPL(pruss_get);
+
+/**
+ * pruss_put() - decrement pruss device's usecount
+ * @pruss: pruss handle
+ *
+ * Complimentary function for pruss_get(). Needs to be called
+ * after the PRUSS is used, and only if the pruss_get() succeeds.
+ */
+void pruss_put(struct pruss *pruss)
+{
+	if (!pruss)
+		return;
+
+	put_device(pruss->dev);
+}
+EXPORT_SYMBOL_GPL(pruss_put);
+
 static const struct of_device_id pruss_of_match[];
 
 static const
@@ -117,10 +177,23 @@ static int pruss_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, pruss);
 
+	mutex_lock(&pruss_list_mutex);
+	list_add_tail(&pruss->node, &pruss_list);
+	mutex_unlock(&pruss_list_mutex);
+
 	dev_info(&pdev->dev, "creating PRU cores and other child platform devices\n");
 	ret = of_platform_populate(node, NULL, data->aux_data, &pdev->dev);
-	if (ret)
+	if (ret) {
 		dev_err(dev, "of_platform_populate failed\n");
+		goto err_of_fail;
+	}
+
+	return 0;
+
+err_of_fail:
+	mutex_lock(&pruss_list_mutex);
+	list_del(&pruss->node);
+	mutex_unlock(&pruss_list_mutex);
 
 	return ret;
 }
@@ -128,10 +201,15 @@ static int pruss_probe(struct platform_device *pdev)
 static int pruss_remove(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
+	struct pruss *pruss = platform_get_drvdata(pdev);
 
 	dev_info(dev, "remove PRU cores and other child platform devices\n");
 	of_platform_depopulate(dev);
 
+	mutex_lock(&pruss_list_mutex);
+	list_del(&pruss->node);
+	mutex_unlock(&pruss_list_mutex);
+
 	return 0;
 }
 
diff --git a/drivers/remoteproc/pruss.h b/drivers/remoteproc/pruss.h
index fa3302a..632a94e 100644
--- a/drivers/remoteproc/pruss.h
+++ b/drivers/remoteproc/pruss.h
@@ -99,11 +99,13 @@ struct pruss_intc_config {
 
 /**
  * struct pruss - PRUSS parent structure
+ * @node: list node of this object
  * @dev: pruss device pointer
  * @mem_regions: data for each of the PRUSS memory regions
  * @host_mask: indicate which HOST IRQs are enabled
  */
 struct pruss {
+	struct list_head node;
 	struct device *dev;
 	struct pruss_mem_region mem_regions[PRUSS_MEM_MAX];
 	u32 host_mask;
diff --git a/include/linux/pruss.h b/include/linux/pruss.h
index 6cb1f0f..1e3bdd7 100644
--- a/include/linux/pruss.h
+++ b/include/linux/pruss.h
@@ -3,6 +3,7 @@
  *
  * Copyright (C) 2015-2017 Texas Instruments Incorporated - http://www.ti.com
  *	Suman Anna <s-anna@ti.com>
+ *	Roger Quadros <rogerq@ti.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -17,9 +18,13 @@
 #ifndef __LINUX_PRUSS_H
 #define __LINUX_PRUSS_H
 
+struct pruss;
+
 #if IS_ENABLED(CONFIG_PRUSS_REMOTEPROC)
 
 int pruss_intc_trigger(unsigned int irq);
+struct pruss *pruss_get(struct device *dev);
+void pruss_put(struct pruss *pruss);
 
 #else
 
@@ -28,6 +33,13 @@ static inline int pruss_intc_trigger(unsigned int irq)
 	return -ENOTSUPP;
 }
 
+static inline struct pruss *pruss_get(struct device *dev)
+{
+	return ERR_PTR(-ENOTSUPP);
+}
+
+static inline void pruss_put(struct pruss *pruss) { }
+
 #endif /* CONFIG_PRUSS_REMOTEPROC */
 
 #endif /* __LINUX_PRUSS_H */
-- 
1.7.5.4

