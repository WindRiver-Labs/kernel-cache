From 2d3a037cb8135854f32c263f8d1786875a7540ff Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 21 Oct 2010 17:27:12 +0800
Subject: [PATCH 13/26] Comcerto: exp bus intialization

Add exp bus intialization and exp bus registers offset for Comcerto-1000.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-comcerto/comcerto-1000.c             |   37 ++++++++++
 .../arm/mach-comcerto/include/mach/comcerto-1000.h |    1 +
 .../include/mach/comcerto-1000/exp-bus.h           |   73 ++++++++++++++++++++
 3 files changed, 111 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/mach-comcerto/include/mach/comcerto-1000/exp-bus.h

diff --git a/arch/arm/mach-comcerto/comcerto-1000.c b/arch/arm/mach-comcerto/comcerto-1000.c
index 32fd97e..4e3f14e 100644
--- a/arch/arm/mach-comcerto/comcerto-1000.c
+++ b/arch/arm/mach-comcerto/comcerto-1000.c
@@ -185,8 +185,45 @@ void __init device_irq_init(void)
 	comcerto_irq_init(comcerto_irq_table, ARRAY_SIZE(comcerto_irq_table));
 }
 
+int comcerto_exp_values[5][6] = {
+	/* ENABLE, SEG_SZ, CFG, TMG1, TMG2, TMG3 */
+	{1, 0xFFF, EXP_MEM_BUS_SIZE_16, 0x03034007, 0x04040502, 0x00000002}, /*NOR Values*/
+	{0, 0x3FF, EXP_STRB_MODE|EXP_ALE_MODE|EXP_MEM_BUS_SIZE_8, 0x1A10201A, 0x03080403, 0x0000002},
+	{0, 0x3FF, EXP_RDY_EN|EXP_MEM_BUS_SIZE_32, 0x1A1A401F, 0x06060A04, 0x00000002},
+	{0, 0x3FF, 0x200, 0x1A1A401F, 0x06060A04, 0x00000002},
+	{1, 0x000, EXP_NAND_MODE|EXP_MEM_BUS_SIZE_8, 0x1A1A401F, 0x06060A04, 0x00000002},/* NAND */
+};
+
+static __init void exp_bus_init(void)
+{
+	int cs;
+
+	/*First, Reset the Expansion block*/
+	__raw_writel(0x1, COMCERTO_EXP_SW_RST_R);
+	/* Divider value 6 for Exp bus at 31.25MHz */
+	__raw_writel(0x6, COMCERTO_EXP_CLOCK_DIV_R);
+
+	for (cs = 0; cs < 5; cs++) {
+		/* configure only enabled CS */
+		if (comcerto_exp_values[cs][0] == 1) {
+			/*mode configuration*/
+			__raw_writel(comcerto_exp_values[cs][2], COMCERTO_EXP_CSx_CFG_R(cs));
+			/*Chip select Segment size configuration*/
+			__raw_writel(comcerto_exp_values[cs][1], COMCERTO_EXP_CSx_SEG_R(cs));
+			/*Chip select timing configuration*/
+			__raw_writel(comcerto_exp_values[cs][3], COMCERTO_EXP_CSx_TMG1_R(cs));
+			__raw_writel(comcerto_exp_values[cs][4], COMCERTO_EXP_CSx_TMG2_R(cs));
+			__raw_writel(comcerto_exp_values[cs][5], COMCERTO_EXP_CSx_TMG3_R(cs));
+		}
+	}
+
+	/*Chip Select activation*/
+	__raw_writel(EXP_CLK_EN | EXP_CS0_EN | EXP_CS4_EN, COMCERTO_EXP_CS_EN_R);
+}
+
 void __init device_init(void)
 {
+	exp_bus_init();
 	writel(readl(COMCERTO_BLOCK_RESET_REG) & ~(GEMAC0_RST | GEMAC1_RST), COMCERTO_BLOCK_RESET_REG);
 	udelay(15);
 	writel(readl(COMCERTO_BLOCK_RESET_REG) | GEMAC0_RST | GEMAC1_RST, COMCERTO_BLOCK_RESET_REG);
diff --git a/arch/arm/mach-comcerto/include/mach/comcerto-1000.h b/arch/arm/mach-comcerto/include/mach/comcerto-1000.h
index b222198..6fbea89 100644
--- a/arch/arm/mach-comcerto/include/mach/comcerto-1000.h
+++ b/arch/arm/mach-comcerto/include/mach/comcerto-1000.h
@@ -93,5 +93,6 @@
 #include <mach/comcerto-1000/clk-rst.h>
 #include <mach/comcerto-1000/timer.h>
 #include <mach/comcerto-1000/intr.h>
+#include <mach/comcerto-1000/exp-bus.h>
 
 #endif
diff --git a/arch/arm/mach-comcerto/include/mach/comcerto-1000/exp-bus.h b/arch/arm/mach-comcerto/include/mach/comcerto-1000/exp-bus.h
new file mode 100644
index 0000000..b189b99
--- /dev/null
+++ b/arch/arm/mach-comcerto/include/mach/comcerto-1000/exp-bus.h
@@ -0,0 +1,73 @@
+/*
+ *  arch/arm/mach-comcerto/include/mach/comcerto-1000/exp-bus.h
+ *
+ *  Copyright (C) 2008 Mindspeed Technologies, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef __COMCERTO_EXP_BUS_H__
+#define __COMCERTO_EXP_BUS_H__
+
+#define COMCERTO_EXP_CS0_BASE			0x20000000
+#define COMCERTO_EXP_CS1_BASE			0x24000000
+#define COMCERTO_EXP_CS2_BASE			0x28000000
+#define COMCERTO_EXP_CS3_BASE			0x2C000000
+#define COMCERTO_EXP_CS4_BASE			0x30000000
+
+/***** Registers address *****/
+#define COMCERTO_EXP_SW_RST_R			APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x000)
+#define COMCERTO_EXP_CS_EN_R			APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x004)
+#define COMCERTO_EXP_CSx_SEG_R(x)		APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x008 + (0x4*x))
+#define COMCERTO_EXP_CSx_CFG_R(x)		APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x01C + (0x4*x))
+#define COMCERTO_EXP_CSx_TMG1_R(x)		APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x030 + (0x4*x))
+#define COMCERTO_EXP_CSx_TMG2_R(x)		APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x044 + (0x4*x))
+#define COMCERTO_EXP_CSx_TMG3_R(x)		APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x058 + (0x4*x))
+#define COMCERTO_EXP_CLOCK_DIV_R		APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x06C)
+
+#define COMCERTO_EXP_MFSM_R			APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x100)
+#define COMCERTO_EXP_CSFSM_R			APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x104)
+#define COMCERTO_EXP_WRSM_R			APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x108)
+#define COMCERTO_EXP_RDSM_R			APB_VADDR(COMCERTO_APB_EXPBUS_BASE + 0x10C)
+
+/***** Masks *****/
+
+/* EXP_SWRST_R register */
+#define EXP_SW_RST				0x00000001
+
+/* EXP_CS_EN_R register */
+#define EXP_CS4_EN				0x00000020
+#define EXP_CS3_EN				0x00000010
+#define EXP_CS2_EN				0x00000008
+#define EXP_CS1_EN				0x00000004
+#define EXP_CS0_EN				0x00000002
+#define EXP_CLK_EN				0x00000001
+
+/* EXP_CSx_CFG_R register */
+#define EXP_RDY_EDG				0x00000800
+#define EXP_RDY_EN				0x00000400
+#define EXP_NAND_MODE				0x00000200
+#define EXP_DM_MODE				0x00000100
+#define EXP_STRB_MODE				0x00000080
+#define EXP_ALE_MODE				0x00000040
+#define EXP_RE_CMD_LVL				0x00000020
+#define EXP_WE_CMD_LVL				0x00000010
+#define EXP_CS_LEVEL				0x00000008
+#define EXP_MEM_BUS_SIZE			0x00000006
+#define EXP_MEM_BUS_SIZE_32			0x00000004
+#define EXP_MEM_BUS_SIZE_16			0x00000002
+#define EXP_MEM_BUS_SIZE_8			0x00000000
+
+#endif
-- 
1.6.5.2

