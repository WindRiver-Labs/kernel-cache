From 0fa31e1b7848567684effb4e585df396bbdf7f38 Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Mon, 18 Oct 2010 15:30:52 +0800
Subject: [PATCH 06/26] Comcerto: M83xxx: C1K Multifunction EVM board Ethernet platform data

Original codes came from Mindspeed's vendor drop sdk-comcerto-openwrt-6.0.

Add the eth0, eth1, mdio0, mdio1, fbpool0 and fbpool1 device structure and
associated resources.

Integrated-by: Stanley.Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-comcerto/board-c1kmfcn_evm.c     |  252 ++++++++++++++++++++++++
 arch/arm/mach-comcerto/comcerto-1000.c         |    7 +
 arch/arm/mach-comcerto/include/mach/gemac.h    |   64 ++++++
 arch/arm/mach-comcerto/include/mach/hardware.h |    3 +
 arch/arm/mach-comcerto/include/mach/memory.h   |    3 +
 5 files changed, 329 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/mach-comcerto/include/mach/gemac.h

diff --git a/arch/arm/mach-comcerto/board-c1kmfcn_evm.c b/arch/arm/mach-comcerto/board-c1kmfcn_evm.c
index 096aa3a..ab3f403 100644
--- a/arch/arm/mach-comcerto/board-c1kmfcn_evm.c
+++ b/arch/arm/mach-comcerto/board-c1kmfcn_evm.c
@@ -53,8 +53,259 @@ static struct platform_device comcerto_uart = {
 	},
 };
 
+/* --------------------------------------------------------------------
+ *  Network
+ * -------------------------------------------------------------------- */
+
+u8 eth0_def_mac[6] = {0x00, 0xED, 0xCD, 0xEF, 0xAA, 0xCC};
+u8 eth2_def_mac[6] = {0x00, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E};
+
+struct comcerto_eth_platform_data comcerto_gem0_pdata = {
+	.name = "eth0",
+	.device_flags = CONFIG_COMCERTO_GEMAC | COMCERTO_GEM_DELAY,
+	.mii_config = CONFIG_COMCERTO_USE_RGMII,
+	.gemac_mode = GEMAC_SW_CONF | GEMAC_SW_FULL_DUPLEX | GEMAC_SW_SPEED_1G,
+	.phy_flags = 0,
+	.bus_id = 0,
+	.phy_id = 0,
+	.gem_id = 0,
+	.mac_addr = eth0_def_mac,
+};
+
+struct comcerto_eth_platform_data comcerto_gem1_pdata = {
+	.name = "eth2",
+	.device_flags = CONFIG_COMCERTO_GEMAC | COMCERTO_GEM_DELAY,
+	.mii_config = CONFIG_COMCERTO_USE_GMII,
+	.gemac_mode = GEMAC_SW_CONF | GEMAC_SW_FULL_DUPLEX | GEMAC_SW_SPEED_1G,
+	.phy_flags = GEMAC_NO_PHY,
+	.bus_id = 0,
+	.phy_id = 0,
+	.gem_id = 1,
+	.mac_addr = eth2_def_mac,
+};
+
+struct resource eth0_resources[] = {
+	{
+		.name	= "gemac",
+		.start	= COMCERTO_APB_EMAC0_BASE,
+		.end	= COMCERTO_APB_EMAC0_BASE + SZ_64K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "aram",
+		.start	= COMCERTO_AHB_ARAM_BASE + 0x6000, /* 16KiB */
+		.end	= COMCERTO_AHB_ARAM_BASE + 0x9FFF,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "fpp_smi",
+		.start	= COMCERTO_AHB_ARAM_BASE + 0x420,
+		.end	= COMCERTO_AHB_ARAM_BASE + 0x43f,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "rx",
+		.start	= IRQ_EMAC0_BATCH,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.name	= "fpp_rx",
+		.start	= IRQ_CSPVED0RX,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.name	= "fpp_tx",
+		.start	= IRQ_CSPVED0TX,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.name	= "gemac",
+		.start	= IRQ_EMAC0,
+		.flags	= IORESOURCE_IRQ,
+	},
+
+};
+
+static struct platform_device comcerto_eth0_device = {
+	.name	= "c1000-eth",
+	.id	= 0,
+	.dev.platform_data = &comcerto_gem0_pdata,
+	.num_resources = ARRAY_SIZE(eth0_resources),
+	.resource = eth0_resources,
+};
+
+struct resource eth2_resources[] = {
+	{
+		.name	= "gemac",
+		.start	= COMCERTO_APB_EMAC1_BASE,
+		.end	= COMCERTO_APB_EMAC1_BASE + SZ_64K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "aram",
+		.start	= COMCERTO_AHB_ARAM_BASE + 0xa000, /* 16KiB */
+		.end	= COMCERTO_AHB_ARAM_BASE + 0xdFFF,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "fpp_smi",
+		.start	= COMCERTO_AHB_ARAM_BASE + 0x440,
+		.end	= COMCERTO_AHB_ARAM_BASE + 0x45f,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "rx",
+		.start	= IRQ_EMAC1_BATCH,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.name	= "fpp_rx",
+		.start	= IRQ_CSPVED1RX,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.name	= "fpp_tx",
+		.start	= IRQ_CSPVED1TX,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.name	= "gemac",
+		.start	= IRQ_EMAC1,
+		.flags	= IORESOURCE_IRQ,
+	},
+
+};
+
+static struct platform_device comcerto_eth2_device = {
+	.name	= "c1000-eth",
+	.id	= 1,
+	.dev.platform_data = &comcerto_gem1_pdata,
+	.num_resources = ARRAY_SIZE(eth2_resources),
+	.resource = eth2_resources,
+};
+
+static struct comcerto_mdio_data comcerto_mdio0_pdata = {
+	.phy_mask = 0xFFFFFEFE,
+	.mdc_div = 96,
+};
+
+static struct comcerto_mdio_data comcerto_mdio1_pdata = {
+	.phy_mask = 0xFFFFFFFF,
+	.mdc_div = 96,
+};
+
+struct resource mdio0_resources[] = {
+	{
+		.start	= COMCERTO_APB_EMAC0_BASE + 0xE000,
+		.end	= COMCERTO_APB_EMAC0_BASE + 0xE400 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+
+};
+
+static struct platform_device comcerto_mdio0_device = {
+	.name			= "comcerto-mdio",
+	.id			= 0,
+	.dev.platform_data	= &comcerto_mdio0_pdata,
+	.num_resources		= ARRAY_SIZE(mdio0_resources),
+	.resource 		= mdio0_resources,
+};
+
+struct resource mdio1_resources[] = {
+	{
+		.start	= COMCERTO_APB_EMAC1_BASE + 0xE000,
+		.end	= COMCERTO_APB_EMAC1_BASE + 0xE400 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+
+};
+
+static struct platform_device comcerto_mdio1_device = {
+	.name			= "comcerto-mdio",
+	.id			= 1,
+	.dev.platform_data	= &comcerto_mdio1_pdata,
+	.num_resources		= ARRAY_SIZE(mdio1_resources),
+	.resource 		= mdio1_resources,
+};
+
+static struct comcerto_fbpool_platform_data comcerto_fbpoolA_pdata = {
+	.length			= 4608,
+	.high_threshold		= (1024+512+128),
+	.low_threshold		= 128,
+};
+
+struct resource fbpoolA_resources[] = {
+	{
+		.name	= "regs",
+		.start	= COMCERTO_APB_ARAM_BASE,
+		.end	= COMCERTO_APB_ARAM_BASE + SZ_4K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "aram",
+		.start	= COMCERTO_AHB_ARAM_BASE + 0x0600,
+		.end	= COMCERTO_AHB_ARAM_BASE + 0x4dff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "irq",
+		.start	= IRQ_ARAM,
+		.flags	= IORESOURCE_IRQ,
+	},
+
+};
+
+static struct platform_device comcerto_fbpoolA_device = {
+	.name	= "c1000-fbpool",
+	.id	= 0,
+	.dev.platform_data = &comcerto_fbpoolA_pdata,
+	.num_resources = ARRAY_SIZE(fbpoolA_resources),
+	.resource = fbpoolA_resources,
+};
+
+static struct comcerto_fbpool_platform_data comcerto_fbpoolB_pdata = {
+	.length			= (256+128),
+	.high_threshold		= 64,
+	.low_threshold		= 8,
+};
+
+struct resource fbpoolB_resources[] = {
+	{
+		.name	= "regs",
+		.start	= COMCERTO_APB_ARAM_BASE,
+		.end	= COMCERTO_APB_ARAM_BASE + SZ_4K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "aram",
+		.start	= COMCERTO_AHB_ARAM_BASE + 0x4e00,
+		.end	= COMCERTO_AHB_ARAM_BASE + 0x53FF,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "irq",
+		.start	= IRQ_ARAM,
+		.flags	= IORESOURCE_IRQ,
+	},
+
+};
+
+static struct platform_device comcerto_fbpoolB_device = {
+	.name	= "c1000-fbpool",
+	.id	= 1,
+	.dev.platform_data = &comcerto_fbpoolB_pdata,
+	.num_resources = ARRAY_SIZE(fbpoolB_resources),
+	.resource = fbpoolB_resources,
+};
+
 static struct platform_device *comcerto_devices[] __initdata = {
 	&comcerto_uart,
+	&comcerto_fbpoolA_device,
+	&comcerto_fbpoolB_device,
+	&comcerto_mdio0_device,
+	&comcerto_eth0_device,
+	&comcerto_mdio1_device,
+	&comcerto_eth2_device,
 };
 
 /************************************************************************
@@ -73,6 +324,7 @@ static void __init platform_irq_init(void)
 
 static void __init platform_init(void)
 {
+	device_init();
 	platform_add_devices(comcerto_devices, ARRAY_SIZE(comcerto_devices));
 }
 
diff --git a/arch/arm/mach-comcerto/comcerto-1000.c b/arch/arm/mach-comcerto/comcerto-1000.c
index 45a821f..32fd97e 100644
--- a/arch/arm/mach-comcerto/comcerto-1000.c
+++ b/arch/arm/mach-comcerto/comcerto-1000.c
@@ -29,6 +29,7 @@
 #include <mach/hardware.h>
 #include <mach/irq.h>
 #include <mach/irqs.h>
+#include <linux/delay.h>
 
 /***********************************************************
  *   Virtual address Mapping                               *
@@ -184,3 +185,9 @@ void __init device_irq_init(void)
 	comcerto_irq_init(comcerto_irq_table, ARRAY_SIZE(comcerto_irq_table));
 }
 
+void __init device_init(void)
+{
+	writel(readl(COMCERTO_BLOCK_RESET_REG) & ~(GEMAC0_RST | GEMAC1_RST), COMCERTO_BLOCK_RESET_REG);
+	udelay(15);
+	writel(readl(COMCERTO_BLOCK_RESET_REG) | GEMAC0_RST | GEMAC1_RST, COMCERTO_BLOCK_RESET_REG);
+}
diff --git a/arch/arm/mach-comcerto/include/mach/gemac.h b/arch/arm/mach-comcerto/include/mach/gemac.h
new file mode 100644
index 0000000..90d6828
--- /dev/null
+++ b/arch/arm/mach-comcerto/include/mach/gemac.h
@@ -0,0 +1,64 @@
+/*
+ *  linux/arch/arm/mach-comcerto/include/mach/gemac.h
+ *
+ *  Copyright (c) 2010 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __ASM_COMCERTO_GEMAC_H__
+#define __ASM_COMCERTO_GEMAC_H__
+#include <linux/types.h>
+
+#define CONFIG_COMCERTO_GEMAC		1
+#define COMCERTO_GEM_DELAY		2
+
+#define CONFIG_COMCERTO_USE_MII		1
+#define CONFIG_COMCERTO_USE_RMII	2
+#define CONFIG_COMCERTO_USE_GMII	4
+#define CONFIG_COMCERTO_USE_RGMII	8
+
+#define GEMAC_SW_CONF			((1 << 8) | (1 << 11))
+#define GEMAC_PHY_CONF			0
+#define GEMAC_SW_FULL_DUPLEX		(1 << 9)
+#define GEMAC_SW_SPEED_10M		(0 << 12)
+#define GEMAC_SW_SPEED_100M		(1 << 12)
+#define GEMAC_SW_SPEED_1G		(2 << 12)
+
+#define GEMAC_NO_PHY			(1 << 0)
+#define GEMAC_PHY_RGMII_ADD_DELAY	(1 << 1)
+
+#ifndef __ASSEMBLY__
+
+struct comcerto_eth_platform_data {
+	/* device specific information */
+	unsigned int device_flags;
+	char name[16];
+
+
+	/* board specific information */
+	unsigned int mii_config;
+	unsigned int gemac_mode;
+	unsigned int phy_flags;
+	unsigned int gem_id;
+	unsigned int bus_id;
+	unsigned int phy_id;
+	char *mac_addr;
+};
+
+struct comcerto_fbpool_platform_data {
+	unsigned short length;
+	unsigned short high_threshold;
+	unsigned short low_threshold;
+};
+
+struct comcerto_mdio_data {
+	int irq[32];
+	unsigned int phy_mask;
+	int mdc_div;
+};
+#endif
+
+#endif
diff --git a/arch/arm/mach-comcerto/include/mach/hardware.h b/arch/arm/mach-comcerto/include/mach/hardware.h
index da023b2..d69d2fd 100644
--- a/arch/arm/mach-comcerto/include/mach/hardware.h
+++ b/arch/arm/mach-comcerto/include/mach/hardware.h
@@ -28,11 +28,14 @@
 	#error "mach/hardware.h :  Unknown architecture"
 #endif
 
+#include <mach/gemac.h>
+
 #ifndef __ASSEMBLY__
 struct sys_timer;
 extern struct sys_timer comcerto_timer;
 extern void device_map_io(void);
 extern void device_irq_init(void);
+extern void device_init(void);
 #endif
 
 #endif
diff --git a/arch/arm/mach-comcerto/include/mach/memory.h b/arch/arm/mach-comcerto/include/mach/memory.h
index 6d42d06..9cd7413 100644
--- a/arch/arm/mach-comcerto/include/mach/memory.h
+++ b/arch/arm/mach-comcerto/include/mach/memory.h
@@ -30,4 +30,7 @@
 #define __pfn_to_bus(x)		__pfn_to_phys(x)
 #define __bus_to_pfn(x)		__phys_to_pfn(x)
 
+#define aram_to_virt(p)         (void *)(((unsigned long)p - COMCERTO_AHB_ARAM_BASE) + ARAM_MEMORY_VADDR)
+#define virt_to_aram(v)         (((unsigned long)v - ARAM_MEMORY_VADDR) + COMCERTO_AHB_ARAM_BASE)
+
 #endif
-- 
1.6.5.2

