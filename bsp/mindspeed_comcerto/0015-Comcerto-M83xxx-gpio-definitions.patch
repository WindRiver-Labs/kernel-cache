From 2955363b01d97f3d570bdbc698fd271c45253219 Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Fri, 22 Oct 2010 11:16:24 +0800
Subject: [PATCH 15/26] Comcerto: M83xxx: gpio definitions

Original codes came from Mindspeed's vendor drop sdk-comcerto-openwrt-6.0.

Added gpio registers offset and defined some functions to handle gpio
registers for Comcerto-1000.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 .../arm/mach-comcerto/include/mach/comcerto-1000.h |    1 +
 .../include/mach/comcerto-1000/gpio.h              |  131 ++++++++++++++++++++
 arch/arm/mach-comcerto/include/mach/gpio.h         |   54 ++++++++
 3 files changed, 186 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/mach-comcerto/include/mach/comcerto-1000/gpio.h
 create mode 100644 arch/arm/mach-comcerto/include/mach/gpio.h

diff --git a/arch/arm/mach-comcerto/include/mach/comcerto-1000.h b/arch/arm/mach-comcerto/include/mach/comcerto-1000.h
index 6fbea89..7922a7a 100644
--- a/arch/arm/mach-comcerto/include/mach/comcerto-1000.h
+++ b/arch/arm/mach-comcerto/include/mach/comcerto-1000.h
@@ -93,6 +93,7 @@
 #include <mach/comcerto-1000/clk-rst.h>
 #include <mach/comcerto-1000/timer.h>
 #include <mach/comcerto-1000/intr.h>
+#include <mach/comcerto-1000/gpio.h>
 #include <mach/comcerto-1000/exp-bus.h>
 
 #endif
diff --git a/arch/arm/mach-comcerto/include/mach/comcerto-1000/gpio.h b/arch/arm/mach-comcerto/include/mach/comcerto-1000/gpio.h
new file mode 100644
index 0000000..8aada74
--- /dev/null
+++ b/arch/arm/mach-comcerto/include/mach/comcerto-1000/gpio.h
@@ -0,0 +1,131 @@
+/*
+ *  arch/arm/mach-comcerto/include/mach/comcerto-1000/gpio.h
+ *
+ *  Copyright (C) 2008 Mindspeed Technologies, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef __COMCERTO_GPIO_H__
+#define __COMCERTO_GPIO_H__
+
+/***** GPIO  *****/
+#define COMCERTO_GPIO_OUTPUT_REG			APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x00))
+#define COMCERTO_GPIO_OE_REG				APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x04))
+#define COMCERTO_GPIO_INT_CFG_REG			APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x08))
+#define COMCERTO_GPIO_ARM_UNALIGNED_LOGIC_ENABLE	APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x0C))
+#define COMCERTO_GPIO_INPUT_REG				APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x10))	/*GPIO input register*/
+#define COMCERTO_GPIO_APB_WS				APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x14))
+#define COMCERTO_GPIO_SYSTEM_CONFIG			APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x1C))
+#define COMCERTO_GPIO_MBIST				APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x20))
+#define COMCERTO_GPIO_TDM_MUX				APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x28))
+#define COMCERTO_GPIO_ARM_ID				APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x30))
+#define COMCERTO_GPIO_PAD_CTRL				APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x34))
+#define COMCERTO_GPIO_BOOTSTRAP_STATUS			APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x40))
+#define COMCERTO_GPIO_BOOTSTRAP_OVERRIDE		APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x44))
+#define COMCERTO_GPIO_USB_PHY_BIST_STATUS_REG		APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x48))
+#define COMCERTO_GPIO_GENERAL_CONTROL_REG		APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x4C))
+#define COMCERTO_GPIO_DEVICE_ID_REG			APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x50))
+#define COMCERTO_GPIO_ARM_MEMORY_SENSE_AMP		APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x54))
+#define COMCERTO_GPIO_PIN_SELECT_REG			APB_VADDR((COMCERTO_APB_GPIO_BASE + 0x58))
+
+#define GPIO_0		0x00000001
+#define GPIO_1		0x00000002
+#define GPIO_2		0x00000004
+#define GPIO_3		0x00000008
+#define GPIO_4		0x00000010
+#define GPIO_5		0x00000020
+#define GPIO_6	        0x00000040
+#define GPIO_7		0x00000080
+#define GPIO_8		0x00000100
+#define GPIO_9		0x00000200
+#define GPIO_10		0x00000400
+#define GPIO_11		0x00000800
+#define GPIO_12		0x00001000
+#define GPIO_13		0x00002000
+#define GPIO_14		0x00004000
+#define GPIO_15		0x00008000
+#define GPIO_16		0x00010000
+#define GPIO_17		0x00020000
+#define GPIO_18		0x00040000
+#define GPIO_19		0x00080000
+#define GPIO_20		0x00100000
+#define GPIO_21		0x00200000
+#define GPIO_22		0x00400000
+#define GPIO_23		0x00800000
+#define GPIO_24		0x01000000
+#define GPIO_25		0x02000000
+#define GPIO_26		0x04000000
+#define GPIO_27		0x08000000
+#define GPIO_28		0x10000000
+#define GPIO_29		0x20000000
+#define GPIO_30		0x40000000
+#define GPIO_31		0x80000000
+
+/* GPIO Pin Select Pins */
+#define EXP_A20		(1 << 31)
+#define EXP_NAND_CLE	(1 << 31)
+#define EXP_A19		(1 << 30)
+#define EXP_NAND_ALE	(1 << 30)
+#define EXP_A18		(1 << 29)
+#define EXP_NAND_CS	(1 << 29)
+#define SPI_SS3_N	(1 << 28)
+#define SPI_SS2_N	(1 << 27)
+#define SPI_SS1_N	(1 << 26)
+#define SPI_TXD		(1 << 25)
+#define SPI_SCLK	(1 << 24)
+#define UART1_TX	(1 << 23)
+#define UART1_RX	(1 << 22)
+#define EXP_RDY_BSY	(1 << 21)
+#define EXP_ALE		(1 << 20)
+#define I2C_SDA		(1 << 19)
+#define I2C_SCL		(1 << 18)
+#define TM_EXT_RESET	(1 << 17)
+#define TIM_EVNT1	(1 << 16)
+#define TIM_EVNT0	(1 << 15)
+#define EXP_A14		(1 << 14)
+#define SPI_SS0_N	(1 << 13)
+#define SPI_RXD		(1 << 12)
+#define EXP_A13		(1 << 11)
+#define EXP_A17		(1 << 10)
+#define EXP_A16		(1 << 9)
+#define EXP_A15		(1 << 8)
+#define EXP_IRQ		(1 << 7)
+#define EXP_A21		(1 << 6)
+#define EXP_NAND_RDY	(1 << 6)
+#define EXP_CS3_N	(1 << 5)
+
+#define SPI_BUS (SPI_RXD | SPI_SCLK | SPI_TXD)
+/* TODO move these to board file, enable only used ones */
+#define SPI_SSN (SPI_SS0_N | SPI_SS1_N | SPI_SS2_N | SPI_SS3_N)
+
+#define UART1_BUS	(UART1_RX | UART1_TX)
+#define I2C_BUS		(I2C_SCL | I2C_SDA)
+#define NAND_BUS	(EXP_NAND_CS | EXP_NAND_ALE | EXP_NAND_CLE | EXP_RDY_BSY | EXP_ALE | EXP_CS3_N)
+#if defined(CONFIG_MTD_NAND_COMCERTO) || defined(CONFIG_MTD_NAND_COMCERTO_MODULE)
+#define EXP_BUS		(EXP_A13 | EXP_A14 | EXP_A15 | EXP_A16 | EXP_A17 | EXP_A18 | EXP_A19 | EXP_A20)
+#else
+#define EXP_BUS		(EXP_A13 | EXP_A14 | EXP_A15 | EXP_A16 | EXP_A17 | EXP_A18 | EXP_A19 | EXP_A20 | EXP_A21)
+#endif
+
+/* general control register values */
+#define USB_USER_WAKEUP		(1 << 2)
+#define USB_FORCE_SUSPEND	(1 << 1)
+#define UART_LOOPBACK_ENABLE	(1 << 0)
+
+/* system config register */
+#define PCIE_REFCLK_SRC		(1 << 12)
+
+#endif
diff --git a/arch/arm/mach-comcerto/include/mach/gpio.h b/arch/arm/mach-comcerto/include/mach/gpio.h
new file mode 100644
index 0000000..51c9e91
--- /dev/null
+++ b/arch/arm/mach-comcerto/include/mach/gpio.h
@@ -0,0 +1,54 @@
+/*
+ * linux/arch/arm/mach-comcerto/time.c
+ *
+ * Copyright (c) 2010 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+
+/* Return GPIO mask from GPIO number*/
+#define comcerto_gpio_mask(gpio_number)         (1 << (gpio_number))
+
+/* Set gpio pins specified by gpiomask to be outputs */
+#define comcerto_gpio_enable_output(gpiomask)   \
+	__raw_writel(__raw_readl(COMCERTO_GPIO_OE_REG) | (gpiomask), COMCERTO_GPIO_OE_REG)
+
+/* Set output pins specified by gpiomask to low */
+#define comcerto_gpio_set_0(gpiomask)   \
+		__raw_writel(__raw_readl(COMCERTO_GPIO_OUTPUT_REG) \
+		& ~(gpiomask), COMCERTO_GPIO_OUTPUT_REG)
+
+/* Set output pins specified by gpiomask to high */
+#define comcerto_gpio_set_1(gpiomask)   \
+		__raw_writel(__raw_readl(COMCERTO_GPIO_OUTPUT_REG) | \
+			(gpiomask), COMCERTO_GPIO_OUTPUT_REG)
+
+/* Read status of input pins specified by gpiomask */
+#define comcerto_gpio_read(gpiomask)    \
+		(__raw_readl(COMCERTO_GPIO_INPUT_REG) & (gpiomask))
+
+/* a combined ack for all GPIOs */
+#define comcerto_gpio_ack_int(gpiomask) \
+		__raw_writel((gpiomask), COMCERTO_INTC_STATUS_REG_0)
+
+
+#define comcerto_gpio_ctrl(value, mask) do { \
+	u32 status; \
+	while (((status = __raw_readl(COMCERTO_GPIO_IOCTRL_REG)) & \
+				(mask)) != (value)) { \
+		__raw_writel(0x55555555, COMCERTO_GPIO_LOCK_REG);  \
+		__raw_writel((status & ~(mask)) | \
+				(value), COMCERTO_GPIO_IOCTRL_REG); } \
+	} while (0)
-- 
1.5.4.3

