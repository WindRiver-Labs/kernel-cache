From c470539103decc68bc5e512e3b13a3b0e3a0af22 Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Tue, 30 Mar 2010 18:26:58 -0400
Subject: [PATCH] PPC32/85xx: Refactor smp_85xx_kick_cpu()

Move uboot version-based, conditionally compiled code out of the
smp_85xx_kick_cpu() and into it's own subroutine. This allows adding
a third option for a kexec-bootable kernel without dirtying the
code even more.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
---
 arch/powerpc/platforms/85xx/smp.c |   72 ++++++++++++++++++++++--------------
 1 files changed, 44 insertions(+), 28 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/smp.c b/arch/powerpc/platforms/85xx/smp.c
index 6167e03..2ab08bf 100644
--- a/arch/powerpc/platforms/85xx/smp.c
+++ b/arch/powerpc/platforms/85xx/smp.c
@@ -20,13 +20,15 @@
 #include <asm/pci-bridge.h>
 #include <asm/mpic.h>
 #include <asm/cacheflush.h>
+#include <asm/reg_booke.h>
 
 #include <sysdev/fsl_soc.h>
 
 extern volatile unsigned long __secondary_hold_acknowledge;
 extern void __early_start(void);
 
-#ifdef CONFIG_MPC8572DS_UBOOT_COMPAT
+#if defined(CONFIG_MPC8572DS_UBOOT_COMPAT)
+
 extern void __secondary_start_page(void);
 #define EEBPCR_CPU1_EN	0x02000000
 #define EEBPCR_CPU0_EN	0x01000000
@@ -51,7 +53,28 @@ smp_85xx_release_core(int nr)
 	pcr |= EEBPCR_CPU1_EN;
 	out_be32(ecm_vaddr + (ECM_PORT_CONFIG_OFFSET >> 2), pcr);
 }
-#endif
+
+static void __init __smp_85xx_kick_cpu(int nr)
+{
+	__iomem u32 *bptr_vaddr;
+	u32 bptr, oldbptr;
+
+	/* Get the BPTR */
+	bptr_vaddr = ioremap(get_immrbase() + MPC85xx_BPTR_OFFSET, 4);
+
+	/* Set the BPTR to the secondary boot page */
+	oldbptr = in_be32(bptr_vaddr);
+	bptr = (BPTR_EN | (__pa((unsigned)__secondary_start_page) >> 12));
+	out_be32(bptr_vaddr, bptr);
+
+	iounmap(bptr_vaddr);
+
+	/* Kick that CPU */
+	smp_85xx_release_core(nr);
+
+}
+
+#else	/* latest u-boot way of bringing CPU1 into the kernel */
 
 #define BOOT_ENTRY_ADDR_UPPER	0
 #define BOOT_ENTRY_ADDR_LOWER	1
@@ -64,35 +87,12 @@ smp_85xx_release_core(int nr)
 #define NUM_BOOT_ENTRY		8
 #define SIZE_BOOT_ENTRY		(NUM_BOOT_ENTRY * sizeof(u32))
 
-static void __init
-smp_85xx_kick_cpu(int nr)
+static void __init __smp_85xx_kick_cpu(int nr)
 {
-	unsigned long flags;
 	__iomem u32 *bptr_vaddr;
-#ifdef CONFIG_MPC8572DS_UBOOT_COMPAT
-	u32 bptr, oldbptr;
-#else
 	const u64 *cpu_rel_addr;
 	struct device_node *np;
-#endif
-	int n = 0;
 
-	WARN_ON (nr < 0 || nr >= NR_CPUS);
-
-	pr_debug("smp_85xx_kick_cpu: kick CPU #%d\n", nr);
-
-	local_irq_save(flags);
-
-#ifdef CONFIG_MPC8572DS_UBOOT_COMPAT
-	/* Get the BPTR */
-	bptr_vaddr = ioremap(get_immrbase() + MPC85xx_BPTR_OFFSET, 4);
-	/* Set the BPTR to the secondary boot page */
-	oldbptr = in_be32(bptr_vaddr);
-	bptr = (BPTR_EN | (__pa((unsigned)__secondary_start_page) >> 12));
-	out_be32(bptr_vaddr, bptr);
-	/* Kick that CPU */
-	smp_85xx_release_core(nr);
-#else
 	np = of_get_cpu_node(nr, NULL);
 	cpu_rel_addr = of_get_property(np, "cpu-release-addr", NULL);
 
@@ -106,14 +106,30 @@ smp_85xx_kick_cpu(int nr)
 
 	out_be32(bptr_vaddr + BOOT_ENTRY_PIR, nr);
 	out_be32(bptr_vaddr + BOOT_ENTRY_ADDR_LOWER, __pa(__early_start));
+
+	iounmap(bptr_vaddr);
+}
+
 #endif
 
+static void __init
+smp_85xx_kick_cpu(int nr)
+{
+	unsigned long flags;
+	int n = 0;
+
+	WARN_ON (nr < 0 || nr >= NR_CPUS);
+
+	pr_debug("smp_85xx_kick_cpu: kick CPU #%d\n", nr);
+
+	local_irq_save(flags);
+
+	__smp_85xx_kick_cpu(nr);
+
 	/* Wait a bit for the CPU to ack. */
 	while ((__secondary_hold_acknowledge != nr) && (++n < 1000))
 		mdelay(1);
 
-	iounmap(bptr_vaddr);
-
 	local_irq_restore(flags);
 
 	pr_debug("waited %d msecs for CPU #%d.\n", n, nr);
-- 
1.6.0.4

