From 78060d767859fb281f8150c569556a60d7619393 Mon Sep 17 00:00:00 2001
From: Jayachandran B <jayachandran.b@intel.com>
Date: Fri, 18 Dec 2015 15:12:03 +0530
Subject: [PATCH 2010/2508] ASoC: Intel: Skylake: fix reset controller
 sequencing

commit 80d155456ec3f34ed6692591bb704b0a75a11a08 from
https://github.com/01org/linux-apollolake-i

MISCBDCGE is a new register for Misc Backbone clock gate control
which is useful to control while resetting the link and ensuring
controller is in required state so add API to control it

HW recommends that we reset with CGCTL.MISCBDCGE disabled, so add
that while doing init chip and reset sequence.

Change-Id: Ie1333378e0d8a43c654a45b52593621b90ba77f7
Signed-off-by: Jayachandran B <jayachandran.b@intel.com>
Signed-off-by: Vinod Koul <vinod.koul@intel.com>
Signed-off-by: Mark Brown <broonie@kernel.org>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/9615
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Jayanti, Satya Charitardha <satya.charitardha.jayanti@intel.com>
---
 sound/soc/intel/skylake/skl-pcm.c     |    1 +
 sound/soc/intel/skylake/skl-sst-ipc.h |    4 ++
 sound/soc/intel/skylake/skl.c         |   53 ++++++++++++++++++++++++++++++--
 sound/soc/intel/skylake/skl.h         |    3 ++
 4 files changed, 57 insertions(+), 4 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 679fd24..39328c8 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1586,6 +1586,7 @@ static int skl_platform_soc_probe(struct snd_soc_platform *platform)
 		skl->skl_sst->update_d0i3c = skl_update_d0i3c;
 		skl->skl_sst->platform = platform;
 		skl->skl_sst->notify_ops = cb_ops;
+		skl->skl_sst->enable_miscbdcge = skl_enable_miscbdcge;
 	}
 
 	skl_get_probe_widget(platform, skl);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 19fb212..18e7d90 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -108,6 +108,10 @@ struct skl_sst {
 	struct snd_soc_platform *platform;
 	struct skl_dsp_notify_ops notify_ops;
 	struct skl_dsp_notify_params *params;
+	/* callback for miscbdge */
+	void (*enable_miscbdcge)(struct device *dev, bool enable);
+	/*Is CGCTL.MISCBDCGE disabled*/
+	bool miscbdcg_disabled;
 };
 
 struct skl_ipc_init_instance_msg {
diff --git a/sound/soc/intel/skylake/skl.c b/sound/soc/intel/skylake/skl.c
index 2380617..6b53e3c 100644
--- a/sound/soc/intel/skylake/skl.c
+++ b/sound/soc/intel/skylake/skl.c
@@ -136,6 +136,49 @@ static void skl_get_total_bytes_transferred(struct hdac_stream *hstr)
 	hstr->curr_pos += no_of_bytes;
 }
 
+static void update_pci_dword(struct pci_dev *pci,
+			unsigned int reg, u32 mask, u32 val)
+{
+	u32 data = 0;
+
+	pci_read_config_dword(pci, reg, &data);
+	data &= ~mask;
+	data |= (val & mask);
+	pci_write_config_dword(pci, reg, data);
+}
+
+/*
+ * skl_enable_miscbdcge - enable/dsiable CGCTL.MISCBDCGE bits
+ *
+ * @dev: device pointer
+ * @enable: enable/disable flag
+ */
+ void skl_enable_miscbdcge(struct device *dev, bool enable)
+{
+	struct pci_dev *pci = to_pci_dev(dev);
+	u32 val;
+
+	val = enable ? AZX_CGCTL_MISCBDCGE_MASK : 0;
+
+	update_pci_dword(pci, AZX_PCIREG_CGCTL, AZX_CGCTL_MISCBDCGE_MASK, val);
+}
+
+/*
+ * While performing reset, controller may not come back properly causing
+ * issues, so recommendation is to set CGCTL.MISCBDCGE to 0 then do reset
+ * (init chip) and then again set CGCTL.MISCBDCGE to 1
+ */
+static int skl_init_chip(struct hdac_bus *bus, bool full_reset)
+{
+	int ret;
+
+	skl_enable_miscbdcge(bus->dev, false);
+	ret = snd_hdac_bus_init_chip(bus, full_reset);
+	skl_enable_miscbdcge(bus->dev, true);
+
+	return ret;
+}
+
 /* called from IRQ */
 static void skl_stream_update(struct hdac_bus *bus, struct hdac_stream *hstr)
 {
@@ -248,7 +291,9 @@ static int _skl_suspend(struct hdac_ext_bus *ebus)
 		return ret;
 
 	snd_hdac_bus_stop_chip(bus);
+	skl_enable_miscbdcge(bus->dev, false);
 	snd_hdac_bus_enter_link_reset(bus);
+	skl_enable_miscbdcge(bus->dev, true);
 
 	return 0;
 }
@@ -259,7 +304,7 @@ static int _skl_resume(struct hdac_ext_bus *ebus)
 	struct hdac_bus *bus = ebus_to_hbus(ebus);
 
 	skl_init_pci(skl);
-	snd_hdac_bus_init_chip(bus, true);
+	skl_init_chip(bus, true);
 
 	return skl_resume_dsp(skl);
 }
@@ -536,7 +581,7 @@ static int skl_codec_create(struct hdac_ext_bus *ebus)
 				 * back to the sanity state.
 				 */
 				snd_hdac_bus_stop_chip(bus);
-				snd_hdac_bus_init_chip(bus, true);
+				skl_init_chip(bus, true);
 			}
 		}
 	}
@@ -675,7 +720,8 @@ static int skl_first_init(struct hdac_ext_bus *ebus)
 	if (err < 0)
 		return err;
 #endif
-	snd_hdac_bus_init_chip(bus, true);
+
+	skl_init_chip(bus, true);
 
 	snd_hdac_set_codec_wakeup(bus, false);
 
@@ -727,7 +773,6 @@ static int skl_probe(struct pci_dev *pci,
 						  (void *)pci_id->driver_data);
 		if (err < 0)
 			goto out_dsp_free;
-
 	}
 	if (ebus->mlcap)
 		err = snd_hdac_ext_bus_get_ml_capabilities(ebus);
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 68c264e..b7f028c 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -52,6 +52,8 @@
 /* D0I3C Register fields */
 #define AZX_REG_VS_D0I3C_CIP      0x1 /* Command in progress */
 #define AZX_REG_VS_D0I3C_I3       0x4 /* D0i3 enable */
+#define AZX_PCIREG_CGCTL		0x48
+#define AZX_CGCTL_MISCBDCGE_MASK	(1 << 6)
 
 struct skl_dsp_resource {
 	u32 max_mcps;
@@ -129,6 +131,7 @@ int skl_suspend_dsp(struct skl *skl);
 int skl_resume_dsp(struct skl *skl);
 int skl_free(struct hdac_ext_bus *ebus);
 void skl_update_d0i3c(struct device *dev, bool enable);
+void skl_enable_miscbdcge(struct device *dev, bool enable);
 
 struct skl_module_cfg;
 
-- 
1.7.5.4

