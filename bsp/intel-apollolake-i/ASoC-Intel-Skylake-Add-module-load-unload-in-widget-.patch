From 4d11ed3f4b7edf1825c8cb2668e5ab01a2970a72 Mon Sep 17 00:00:00 2001
From: Jeeja KP <jeeja.kp@intel.com>
Date: Mon, 10 Aug 2015 11:35:16 +0530
Subject: [PATCH 1707/2508] ASoC: Intel: Skylake: Add module load/unload in
 widget handler

commit e2f094b73cd0be89f085c5ed976806af3766e25e from
https://github.com/01org/linux-apollolake-i

In case of loadable module, the modules need to be loaded
before module initialization and unload after pipeline is deleted.
Modules are identified by the guid, the guid information is read from
module widget private data. This patch adds support to load/unload
module in widget event handler.

Signed-off-by: Dharageswari.R <dharageswari.r@intel.com>
Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c       |   16 ++++++++++++
 sound/soc/intel/skylake/skl-topology.c       |   35 ++++++++++++++++++++++---
 sound/soc/intel/skylake/skl-topology.h       |    5 +++
 sound/soc/intel/skylake/skl-tplg-interface.h |    2 +
 4 files changed, 53 insertions(+), 5 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index d7fa1b1..caad891 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -161,6 +161,22 @@ int skl_resume_dsp(struct skl *skl)
 	return ret;
 }
 
+
+int skl_load_modules(struct skl_sst *ctx, struct skl_module_cfg *mcfg)
+{
+	if (ctx->dsp->fw_ops.load_mod)
+		return ctx->dsp->fw_ops.load_mod(ctx->dsp, mcfg->id.module_id,
+								mcfg->guid);
+	return 0;
+}
+
+int skl_unload_modules(struct skl_sst *ctx, struct skl_module_cfg *mcfg)
+{
+	if (ctx->dsp->fw_ops.unload_mod)
+		return ctx->dsp->fw_ops.unload_mod(ctx->dsp, mcfg->id.module_id);
+
+	return 0;
+}
 enum skl_bitdepth skl_get_bit_depth(int params)
 {
 	switch (params) {
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index e0ec70e..203a35b 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -412,10 +412,13 @@ skl_tplg_init_pipe_modules(struct skl *skl, struct skl_pipe *pipe)
 		if (!skl_tplg_alloc_pipe_mcps(skl, mconfig))
 			return -ENOMEM;
 
-		/*
-		 * apply fix/conversion to module params based on
-		 * FE/BE params
-		 */
+		if (mconfig->is_loadable) {
+			ret = skl_load_modules(ctx, mconfig);
+			if (ret < 0)
+				return ret;
+		}
+
+		/* apply fix/conversion to module params based on FE/BE params*/
 		skl_tplg_update_module_params(w, ctx);
 
 		skl_tplg_set_module_init_data(w);
@@ -431,6 +434,24 @@ skl_tplg_init_pipe_modules(struct skl *skl, struct skl_pipe *pipe)
 	return 0;
 }
 
+static int skl_tplg_unload_pipe_modules(struct skl_sst *ctx,
+	 struct skl_pipe *pipe)
+{
+	struct skl_pipe_module *w_module = NULL;
+	struct skl_module_cfg *mconfig = NULL;
+
+	dev_dbg(ctx->dev, "%s: pipe=%d\n", __func__, pipe->ppl_id);
+	list_for_each_entry(w_module, &pipe->w_list, node) {
+		mconfig  = w_module->w->priv;
+		dev_dbg(ctx->dev, "unload module_id=%d\n", mconfig->id.module_id);
+
+		if (mconfig->is_loadable)
+			return skl_unload_modules(ctx, mconfig);
+	}
+
+	return 0;
+}
+
 /*
  * Mixer module represents a pipeline. So in the Pre-PMU event of mixer we
  * need create the pipeline. So we do following:
@@ -752,7 +773,7 @@ static int skl_tplg_mixer_dapm_post_pmd_event(struct snd_soc_dapm_widget *w,
 	ret = skl_delete_pipe(ctx, mconfig->pipe);
 	skl_tplg_free_pipe_mem(skl, mconfig);
 
-	return ret;
+	return skl_tplg_unload_pipe_modules(ctx, s_pipe);
 }
 
 /*
@@ -1326,6 +1347,10 @@ static int skl_tplg_widget_load(struct snd_soc_component *cmpnt,
 	mconfig->time_slot = dfw_config->time_slot;
 	mconfig->formats_config.caps_size = dfw_config->caps.caps_size;
 
+	if (dfw_config->is_loadable)
+		memcpy(mconfig->guid, dfw_config->guid,
+					ARRAY_SIZE(dfw_config->guid));
+
 	mconfig->m_in_pin = devm_kzalloc(bus->dev, (mconfig->max_in_queue) *
 						sizeof(*mconfig->m_in_pin),
 						GFP_KERNEL);
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 83a788b..2440f0f 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -253,6 +253,7 @@ enum skl_module_state {
 };
 
 struct skl_module_cfg {
+	char guid[SKL_MOD_NAME];
 	struct skl_module_inst_id id;
 	u8 domain;
 	bool homogenous_inputs;
@@ -336,5 +337,9 @@ int skl_unbind_modules(struct skl_sst *ctx, struct skl_module_cfg
 int skl_set_module_params(struct skl_sst *ctx, u32 *params, int size,
 			u32 param_id, struct skl_module_cfg *mcfg);
 
+int skl_load_modules(struct skl_sst *ctx, struct skl_module_cfg *mcfg);
+
+int skl_unload_modules(struct skl_sst *ctx, struct skl_module_cfg *mcfg);
+
 enum skl_bitdepth skl_get_bit_depth(int params);
 #endif
diff --git a/sound/soc/intel/skylake/skl-tplg-interface.h b/sound/soc/intel/skylake/skl-tplg-interface.h
index cd382ce..a26a91d 100644
--- a/sound/soc/intel/skylake/skl-tplg-interface.h
+++ b/sound/soc/intel/skylake/skl-tplg-interface.h
@@ -26,6 +26,7 @@
 #define HDA_SST_CFG_MAX	900 /* size of copier cfg*/
 #define MAX_IN_QUEUE 8
 #define MAX_OUT_QUEUE 8
+#define SKL_MOD_NAME 40 /* Length of GUID string */
 
 #define SKL_UUID_STR_SZ 40
 /* Event types goes here */
@@ -170,6 +171,7 @@ struct skl_dfw_pipe {
 } __packed;
 
 struct skl_dfw_module {
+	char guid[SKL_MOD_NAME];
 	u16 module_id;
 	u16 instance_id;
 	u32 max_mcps;
-- 
1.7.5.4

