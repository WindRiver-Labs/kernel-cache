From bc4bfb4499fb0f4a78fa8c2807486324bf6a5ff8 Mon Sep 17 00:00:00 2001
From: Sagar Arun Kamble <sagar.a.kamble@intel.com>
Date: Wed, 12 Oct 2016 08:48:55 -0700
Subject: [PATCH 68/68] drm/i915: WA to address the Ringbuffer coherency issue

commit 6e06dacda21b3de803e5ca03b8d14e1021861b30 from
git://git.yoctoproject.org/linux-yocto-4.1

Driver updates the ring buffer via GMADR. In case of GuC based
submission, those updates done in ring buffer via GMADR may not get
committed to memory by the time the Command streamer starts reading the
updated locations, as a result stale data would be read back causing a
hang.  For Host based submission, this problem will not be there as the
write to Tail register or ELSP register will happen from the Host side
(CPU write to any GFX register goes to GTTMMADR BAR and Hw already
enforces the ordering between outstanding GMADR writes & new GTTMADR
writes).  MMIO writes from GuC side, understandably, do not go to
GTTMMADR BAR so ordering is not enforced resulting in a race (which may
or may not get exposed, depending upon the timing).

Signed-off-by: Sagar Arun Kamble <sagar.a.kamble@intel.com>
Signed-off-by: Jeff McGee <jeff.mcgee@intel.com>
[mattrope: checkpatch tweaks to commit message format/spelling]
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/i915/i915_guc_submission.c |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_guc_submission.c b/drivers/gpu/drm/i915/i915_guc_submission.c
index 1bcc9d2..a52b0e5 100644
--- a/drivers/gpu/drm/i915/i915_guc_submission.c
+++ b/drivers/gpu/drm/i915/i915_guc_submission.c
@@ -261,6 +261,7 @@ static void guc_init_doorbell(struct intel_guc *guc,
 
 static int guc_ring_doorbell(struct i915_guc_client *gc)
 {
+	struct drm_i915_private *dev_priv = guc_to_i915(gc->guc);
 	struct guc_process_desc *desc;
 	union guc_doorbell_qw db_cmp, db_exc, db_ret;
 	union guc_doorbell_qw *db;
@@ -286,6 +287,8 @@ static int guc_ring_doorbell(struct i915_guc_client *gc)
 	/* pointer of current doorbell cacheline */
 	db = base + gc->doorbell_offset;
 
+	/* WA to flush out the pending GMADR writes to ring buffer */
+	POSTING_READ(GUC_STATUS);
 	while (attempt--) {
 		/* lets ring the doorbell */
 		db_ret.value_qw = atomic64_cmpxchg((atomic64_t *)db,
-- 
1.7.5.4

