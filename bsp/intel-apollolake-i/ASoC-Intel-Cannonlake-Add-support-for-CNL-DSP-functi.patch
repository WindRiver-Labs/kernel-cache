From d6ac7f247f02463ee8756d155441117415f16a46 Mon Sep 17 00:00:00 2001
From: Guneshwor Singh <guneshwor.o.singh@intel.com>
Date: Fri, 20 Nov 2015 04:16:17 +0530
Subject: [PATCH 1827/2508] ASoC: Intel: Cannonlake: Add support for CNL DSP
 functions and Registers

commit 7b829452b47b7973dbb87ab04d5bd214343918b3 from
https://github.com/01org/linux-apollolake-i

This adds Cannonlake specific registers and support for
CNL DSP related functions.

Major diff of IPC registers (cAVS 1.8 vs 1.5) are:

- HIPCIDR -- HIPCI
- HIPCIDD -- HIPCIE
- Introduction of HICPIDA (done bit in HIPCIE)
- Offset of HIPCCTL

Change-Id: If95f392f51c50513dc6cfe3b59bb2c46b52d495a
Signed-off-by: Guneshwor Singh <guneshwor.o.singh@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/7591
Reviewed-by: Shah, Hardik T <hardik.t.shah@intel.com>
Tested-by: Shah, Hardik T <hardik.t.shah@intel.com>
---
 sound/soc/intel/skylake/cnl-sst-dsp.c |  257 +++++++++++++++++++++++++++++++++
 sound/soc/intel/skylake/cnl-sst-dsp.h |  128 ++++++++++++++++
 2 files changed, 385 insertions(+), 0 deletions(-)
 create mode 100644 sound/soc/intel/skylake/cnl-sst-dsp.c
 create mode 100644 sound/soc/intel/skylake/cnl-sst-dsp.h

diff --git a/sound/soc/intel/skylake/cnl-sst-dsp.c b/sound/soc/intel/skylake/cnl-sst-dsp.c
new file mode 100644
index 0000000..2cfc399
--- /dev/null
+++ b/sound/soc/intel/skylake/cnl-sst-dsp.c
@@ -0,0 +1,257 @@
+/*
+ * cnl-sst-dsp.c - CNL SST library generic function
+ *
+ * Copyright (C) 2015-16, Intel Corporation.
+ * Author: Guneshwor Singh <guneshwor.o.singh@intel.com>
+ *
+ * Modified from:
+ *	SKL SST library generic function
+ *	Copyright (C) 2014-15, Intel Corporation.
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as version 2, as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ */
+#include <sound/pcm.h>
+
+#include "../common/sst-dsp.h"
+#include "../common/sst-ipc.h"
+#include "../common/sst-dsp-priv.h"
+#include "cnl-sst-dsp.h"
+
+/* various timeout values */
+#define CNL_DSP_PU_TO		50
+#define CNL_DSP_PD_TO		50
+#define CNL_DSP_RESET_TO	50
+
+static int cnl_dsp_core_set_reset_state(struct sst_dsp  *ctx)
+{
+	int ret;
+
+	/* update bits */
+	sst_dsp_shim_update_bits_unlocked(ctx,
+			CNL_ADSP_REG_ADSPCS, CNL_ADSPCS_CRST_MASK,
+			CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK));
+
+	/* poll with timeout to check if operation successful */
+	ret = sst_dsp_register_poll(ctx,
+			CNL_ADSP_REG_ADSPCS,
+			CNL_ADSPCS_CRST_MASK,
+			CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK),
+			CNL_DSP_RESET_TO,
+			"Set reset");
+	if ((sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
+				CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK)) !=
+				CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK)) {
+		dev_err(ctx->dev, "Set reset state failed\n");
+		ret = -EIO;
+	}
+
+	return ret;
+}
+
+static int cnl_dsp_core_unset_reset_state(struct sst_dsp  *ctx)
+{
+	int ret;
+
+	/* update bits */
+	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
+					CNL_ADSPCS_CRST_MASK1, 0);
+
+	/* poll with timeout to check if operation successful */
+	ret = sst_dsp_register_poll(ctx,
+			CNL_ADSP_REG_ADSPCS,
+			CNL_ADSPCS_CRST_MASK1,
+			0,
+			CNL_DSP_RESET_TO,
+			"Unset reset");
+
+	if ((sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
+				 CNL_ADSPCS_CRST1(1)) != 0) {
+		dev_err(ctx->dev, "Unset reset state failed\n");
+		ret = -EIO;
+	}
+
+	return ret;
+}
+
+static bool is_cnl_dsp_core_enable(struct sst_dsp *ctx)
+{
+	int val;
+	bool is_enable;
+
+	val = sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS);
+
+	is_enable = ((val & CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK)) &&
+			(val & CNL_ADSPCS_SPA(CNL_DSP_CORES_MASK)) &&
+			!(val & CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK)) &&
+			!(val & CNL_ADSPCS_CSTALL(CNL_DSP_CORES_MASK)));
+
+	dev_dbg(ctx->dev, "DSP core is enabled=%d\n", is_enable);
+	return is_enable;
+}
+
+static int cnl_dsp_reset_core(struct sst_dsp *ctx)
+{
+	/* stall core */
+	sst_dsp_shim_write_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
+			sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
+			CNL_ADSPCS_CSTALL(CNL_DSP_CORES_MASK));
+
+	/* set reset state */
+	return cnl_dsp_core_set_reset_state(ctx);
+}
+
+static int cnl_dsp_start_core(struct sst_dsp *ctx)
+{
+	int ret;
+
+	/* unset reset state */
+	ret = cnl_dsp_core_unset_reset_state(ctx);
+	if (ret < 0) {
+		dev_dbg(ctx->dev, "dsp unset reset failed\n");
+		return ret;
+	}
+
+	/* run core */
+	dev_dbg(ctx->dev, "Unstalling core...\n");
+	/* FIXME Unstalling only one core out of 4 cores for CNL */
+	sst_dsp_shim_write_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
+			 sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
+				~CNL_ADSPCS_CSTALL1(1));
+	dev_dbg(ctx->dev, "FW Poll Status: reg=0x%#x\n",
+		sst_dsp_shim_read(ctx, CNL_ADSP_REG_ADSPCS));
+
+	/* FIXME Disabling this check since we unstalled only one core */
+
+	/* if (!is_cnl_dsp_core_enable(ctx)) {
+		cnl_dsp_reset_core(ctx);
+		dev_err(ctx->dev, "DSP core enable failed\n");
+		ret = -EIO;
+	} */
+
+	return ret;
+}
+
+static int cnl_dsp_core_power_up(struct sst_dsp  *ctx)
+{
+	int ret;
+
+	/* update bits */
+	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
+		CNL_ADSPCS_SPA_MASK, CNL_ADSPCS_SPA(CNL_DSP_CORES_MASK));
+
+	/* poll with timeout to check if operation successful */
+	ret = sst_dsp_register_poll(ctx,
+			CNL_ADSP_REG_ADSPCS,
+			CNL_ADSPCS_CPA_MASK,
+			CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK),
+			CNL_DSP_PU_TO,
+			"Power up");
+
+	if ((sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
+			CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK)) !=
+			CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK)) {
+		dev_err(ctx->dev, "DSP core power up failed\n");
+		ret = -EIO;
+	}
+
+	return ret;
+}
+
+static int cnl_dsp_core_power_down(struct sst_dsp  *ctx)
+{
+	/* update bits */
+	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
+					CNL_ADSPCS_SPA_MASK, 0);
+
+	/* poll with timeout to check if operation successful */
+	return sst_dsp_register_poll(ctx,
+			CNL_ADSP_REG_ADSPCS,
+			CNL_ADSPCS_CPA_MASK,
+			0,
+			CNL_DSP_PD_TO,
+			"Power down");
+}
+
+int cnl_dsp_enable_core(struct sst_dsp *ctx)
+{
+	int ret;
+
+	/* power up */
+	ret = cnl_dsp_core_power_up(ctx);
+	if (ret < 0) {
+		dev_dbg(ctx->dev, "dsp core power up failed\n");
+		return ret;
+	}
+
+	return cnl_dsp_start_core(ctx);
+}
+
+int cnl_dsp_disable_core(struct sst_dsp *ctx)
+{
+	int ret;
+
+	ret = cnl_dsp_reset_core(ctx);
+	if (ret < 0) {
+		dev_err(ctx->dev, "dsp core reset failed\n");
+		return ret;
+	}
+
+	/* power down core*/
+	ret = cnl_dsp_core_power_down(ctx);
+	if (ret < 0) {
+		dev_err(ctx->dev, "dsp core power down failed\n");
+		return ret;
+	}
+
+	if (is_cnl_dsp_core_enable(ctx)) {
+		dev_err(ctx->dev, "DSP core disable failed\n");
+		ret = -EIO;
+	}
+
+	return ret;
+}
+
+irqreturn_t cnl_dsp_sst_interrupt(int irq, void *dev_id)
+{
+	struct sst_dsp *ctx = dev_id;
+	u32 val;
+	irqreturn_t result = IRQ_NONE;
+
+	spin_lock(&ctx->spinlock);
+
+	val = sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPIS);
+	ctx->intr_status = val;
+
+	if (val == 0xffffffff) {
+		spin_unlock(&ctx->spinlock);
+		return IRQ_NONE;
+	}
+
+	if (val & CNL_ADSPIS_IPC) {
+		cnl_ipc_int_disable(ctx);
+		result = IRQ_WAKE_THREAD;
+	}
+
+	spin_unlock(&ctx->spinlock);
+
+	return result;
+}
+
+void cnl_dsp_free(struct sst_dsp *dsp)
+{
+	cnl_ipc_int_disable(dsp);
+
+	free_irq(dsp->irq, dsp);
+	cnl_dsp_disable_core(dsp);
+}
+EXPORT_SYMBOL_GPL(cnl_dsp_free);
diff --git a/sound/soc/intel/skylake/cnl-sst-dsp.h b/sound/soc/intel/skylake/cnl-sst-dsp.h
new file mode 100644
index 0000000..3f03f2f
--- /dev/null
+++ b/sound/soc/intel/skylake/cnl-sst-dsp.h
@@ -0,0 +1,128 @@
+/*
+ * Cannonlake SST DSP Support
+ *
+ * Copyright (C) 2015-16, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as version 2, as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#ifndef __CNL_SST_DSP_H__
+#define __CNL_SST_DSP_H__
+
+#include <linux/interrupt.h>
+#include <sound/memalloc.h>
+
+struct sst_dsp;
+struct skl_sst;
+struct sst_dsp_device;
+
+/* Intel HD Audio General DSP Registers */
+#define CNL_ADSP_GEN_BASE		0x0
+#define CNL_ADSP_REG_ADSPCS		(CNL_ADSP_GEN_BASE + 0x04)
+#define CNL_ADSP_REG_ADSPIC		(CNL_ADSP_GEN_BASE + 0x08)
+#define CNL_ADSP_REG_ADSPIS		(CNL_ADSP_GEN_BASE + 0x0C)
+
+/* Intel HD Audio Inter-Processor Communication Registers */
+#define CNL_ADSP_IPC_BASE               0xC0
+#define CNL_ADSP_REG_HIPCTDR            (CNL_ADSP_IPC_BASE + 0x00)
+#define CNL_ADSP_REG_HIPCTDA            (CNL_ADSP_IPC_BASE + 0x04)
+#define CNL_ADSP_REG_HIPCTDD            (CNL_ADSP_IPC_BASE + 0x08)
+#define CNL_ADSP_REG_HIPCIDR            (CNL_ADSP_IPC_BASE + 0x10)
+#define CNL_ADSP_REG_HIPCIDA            (CNL_ADSP_IPC_BASE + 0x14)
+#define CNL_ADSP_REG_HIPCIDD            (CNL_ADSP_IPC_BASE + 0x18)
+#define CNL_ADSP_REG_HIPCCST            (CNL_ADSP_IPC_BASE + 0x20)
+#define CNL_ADSP_REG_HIPCCSR            (CNL_ADSP_IPC_BASE + 0x24)
+#define CNL_ADSP_REG_HIPCCTL            (CNL_ADSP_IPC_BASE + 0x28)
+
+/* HIPCTDR */
+#define CNL_ADSP_REG_HIPCTDR_BUSY	BIT(31)
+
+/* HIPCTDA */
+#define CNL_ADSP_REG_HIPCTDA_DONE	BIT(31)
+
+/* HIPCIDR */
+#define CNL_ADSP_REG_HIPCIDR_BUSY	BIT(31)
+
+/* HIPCIDA */
+#define CNL_ADSP_REG_HIPCIDA_DONE	BIT(31)
+
+/* CNL HIPCCTL */
+#define CNL_ADSP_REG_HIPCCTL_DONE	BIT(1)
+#define CNL_ADSP_REG_HIPCCTL_BUSY	BIT(0)
+
+/* CNL HIPCT */
+#define CNL_ADSP_REG_HIPCT_BUSY		BIT(31)
+
+/* Intel HD Audio SRAM Window 1 */
+#define CNL_ADSP_SRAM1_BASE		0xA0000
+
+#define CNL_ADSP_MMIO_LEN		0x10000
+
+#define CNL_ADSP_W0_STAT_SZ		0x1000
+
+#define CNL_ADSP_W0_UP_SZ		0x1000
+
+#define CNL_ADSP_W1_SZ			0x1000
+
+#define CNL_FW_STS_MASK			0xf
+
+#define CNL_FW_INIT			0x1
+#define CNL_FW_RFW_START		0xf
+
+#define CNL_ADSPIC_IPC			1
+#define CNL_ADSPIS_IPC			1
+
+/* ADSPCS - Audio DSP Control & Status */
+#define CNL_DSP_CORES		4
+#define CNL_DSP_CORES_MASK	((1 << CNL_DSP_CORES) - 1)
+
+/* Core Reset - asserted high */
+#define CNL_ADSPCS_CRST_SHIFT	0
+#define CNL_ADSPCS_CRST_MASK	(CNL_DSP_CORES_MASK << CNL_ADSPCS_CRST_SHIFT)
+#define CNL_ADSPCS_CRST(x)	((x << CNL_ADSPCS_CRST_SHIFT) &		\
+					CNL_ADSPCS_CRST_MASK)
+#define CNL_ADSPCS_CRST_MASK1	(1 << CNL_ADSPCS_CRST_SHIFT)
+#define CNL_ADSPCS_CRST1(x)	((x << CNL_ADSPCS_CRST_SHIFT) &		\
+					CNL_ADSPCS_CRST_MASK1)
+
+/* Core run/stall - when set to '1' core is stalled */
+#define CNL_ADSPCS_CSTALL_SHIFT	8
+#define CNL_ADSPCS_CSTALL_MASK	(CNL_DSP_CORES_MASK <<	\
+					CNL_ADSPCS_CSTALL_SHIFT)
+#define CNL_ADSPCS_CSTALL(x)	((x << CNL_ADSPCS_CSTALL_SHIFT) &	\
+				CNL_ADSPCS_CSTALL_MASK)
+#define CNL_ADSPCS_CSTALL_MASK1	(1 << CNL_ADSPCS_CSTALL_SHIFT)
+#define CNL_ADSPCS_CSTALL1(x)	((x << CNL_ADSPCS_CSTALL_SHIFT) &	\
+				CNL_ADSPCS_CSTALL_MASK1)
+
+/* Set Power Active - when set to '1' turn cores on */
+#define CNL_ADSPCS_SPA_SHIFT	16
+#define CNL_ADSPCS_SPA_MASK	(CNL_DSP_CORES_MASK << CNL_ADSPCS_SPA_SHIFT)
+#define CNL_ADSPCS_SPA(x)	((x << CNL_ADSPCS_SPA_SHIFT) &		\
+					CNL_ADSPCS_SPA_MASK)
+
+/* Current Power Active - power status of cores, set by hardware */
+#define CNL_ADSPCS_CPA_SHIFT	24
+#define CNL_ADSPCS_CPA_MASK	(CNL_DSP_CORES_MASK << CNL_ADSPCS_CPA_SHIFT)
+#define CNL_ADSPCS_CPA(x)	((x << CNL_ADSPCS_CPA_SHIFT) &		\
+					CNL_ADSPCS_CPA_MASK)
+
+int cnl_dsp_enable_core(struct sst_dsp *ctx);
+int cnl_dsp_disable_core(struct sst_dsp *ctx);
+irqreturn_t cnl_dsp_sst_interrupt(int irq, void *dev_id);
+void cnl_dsp_free(struct sst_dsp *dsp);
+
+int cnl_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
+		struct skl_dsp_loader_ops dsp_ops, struct skl_sst **dsp);
+void cnl_sst_dsp_cleanup(struct device *dev, struct skl_sst *ctx);
+
+void cnl_ipc_int_disable(struct sst_dsp *ctx);
+
+#endif /*__CNL_SST_DSP_H__*/
-- 
1.7.5.4

