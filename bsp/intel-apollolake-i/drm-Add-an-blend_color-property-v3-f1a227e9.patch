From 00871dc7c371c162bab3a714ebe26f13e97b3d52 Mon Sep 17 00:00:00 2001
From: Damien Lespiau <damien.lespiau@intel.com>
Date: Mon, 18 Jan 2016 20:45:38 +0530
Subject: [PATCH 4438/4706] drm: Add an blend_color property (v3)

commit 7654ad8fde990187661a21b30f127629fbdd2a5c from
git://git.yoctoproject.org/linux-yocto-4.1

Add blend color property and update the
documentation for the same

V2: Add blend color support in get property.

v3 (by Matt):
 - Switch to using drm_rgba property type and value

Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
Signed-off-by: vandita kulkarni <vandita.kulkarni@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/drm_atomic.c |    4 ++++
 drivers/gpu/drm/drm_crtc.c   |    6 ++++++
 include/drm/drm_blend.h      |    4 ++++
 include/drm/drm_crtc.h       |    3 ++-
 include/drm/drm_plane.h      |    2 ++
 5 files changed, 18 insertions(+), 1 deletions(-)

diff --git a/drivers/gpu/drm/drm_atomic.c b/drivers/gpu/drm/drm_atomic.c
index acc6340..5e2eef0 100644
--- a/drivers/gpu/drm/drm_atomic.c
+++ b/drivers/gpu/drm/drm_atomic.c
@@ -722,6 +722,8 @@ int drm_atomic_plane_set_property(struct drm_plane *plane,
 		state->zpos = val;
 	} else if (property == config->prop_blend_func) {
 		state->blend_mode.func = val;
+	} else if (property == config->prop_blend_color) {
+		state->blend_mode.color.v = val;
 	} else if (plane->funcs->atomic_set_property) {
 		return plane->funcs->atomic_set_property(plane, state,
 				property, val);
@@ -782,6 +784,8 @@ drm_atomic_plane_get_property(struct drm_plane *plane,
 		*val = state->zpos;
 	} else if (property == config->prop_blend_func) {
 		*val = state->blend_mode.func;
+	} else if (property == config->prop_blend_color) {
+		*val = state->blend_mode.color.v;
 	} else if (plane->funcs->atomic_get_property) {
 		return plane->funcs->atomic_get_property(plane, state, property, val);
 	} else {
diff --git a/drivers/gpu/drm/drm_crtc.c b/drivers/gpu/drm/drm_crtc.c
index 681f969..328074c 100644
--- a/drivers/gpu/drm/drm_crtc.c
+++ b/drivers/gpu/drm/drm_crtc.c
@@ -425,6 +425,12 @@ static int drm_mode_create_standard_properties(struct drm_device *dev)
 		return -ENOMEM;
 	dev->mode_config.prop_blend_func = prop;
 
+	prop = drm_property_create_rgba(dev, DRM_MODE_PROP_ATOMIC,
+					"blend_color");
+	if (!prop)
+		return -ENOMEM;
+	dev->mode_config.prop_blend_color = prop;
+
 	return 0;
 }
 
diff --git a/include/drm/drm_blend.h b/include/drm/drm_blend.h
index 0b657a0..d2a615b 100644
--- a/include/drm/drm_blend.h
+++ b/include/drm/drm_blend.h
@@ -152,6 +152,10 @@ enum drm_blend_factor {
 	DRM_BLEND_FACTOR_ONE,
 	DRM_BLEND_FACTOR_SRC_ALPHA,
 	DRM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
+	DRM_BLEND_FACTOR_CONSTANT_ALPHA,
+	DRM_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
+	DRM_BLEND_FACTOR_CONSTANT_ALPHA_TIMES_SRC_ALPHA,
+	DRM_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA_TIMES_SRC_ALPHA,
 };
 
 #define DRM_BLEND_FUNC(src_factor, dst_factor)		\
diff --git a/include/drm/drm_crtc.h b/include/drm/drm_crtc.h
index cb31603..8e3b0e1 100644
--- a/include/drm/drm_crtc.h
+++ b/include/drm/drm_crtc.h
@@ -1188,9 +1188,10 @@ struct drm_mode_config {
 	struct drm_property *prop_background_color;
 
 	/**
-	 * @prop_blend_func: GL-style plane blending factors
+	 * @prop_blend_func: GL-style plane blending factors and color
 	 */
 	struct drm_property *prop_blend_func;
+	struct drm_property *prop_blend_color;
 
 	/**
 	 * @dvi_i_subconnector_property: Optional DVI-I property to
diff --git a/include/drm/drm_plane.h b/include/drm/drm_plane.h
index c2770b2..25b2008 100644
--- a/include/drm/drm_plane.h
+++ b/include/drm/drm_plane.h
@@ -25,11 +25,13 @@
 
 #include <linux/list.h>
 #include <linux/ctype.h>
+#include <drm/drm_blend.h>
 #include <drm/drm_mode_object.h>
 
 struct drm_crtc;
 
 struct drm_blend_mode {
+	struct drm_rgba color;
 	uint64_t func;
 };
 
-- 
1.7.5.4

