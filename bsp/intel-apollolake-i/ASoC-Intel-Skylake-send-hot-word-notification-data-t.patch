From 38525f79c5034f874d66cabb9aef426607cb12b5 Mon Sep 17 00:00:00 2001
From: G Kranthi <gudishax.kranthikumar@intel.com>
Date: Tue, 5 Apr 2016 20:44:05 +0530
Subject: [PATCH 2027/2508] ASoC: Intel: Skylake: send hot-word notification
 data to user

commit e2eda72c8b78f95f3f67dce7e7412948aeb15e05 from
https://github.com/01org/linux-apollolake-i

Hot-word notification need to send event specific
data to the HAL. This patch will add support for
sending the data when notification was received. This
event specific data will be flushed once user
queries respective notification event.

Change-Id: I6c4b6d05b6fe51d014abe30c2731b01559ca066c
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-25262
Signed-off-by: G Kranthi <gudishax.kranthikumar@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/8889
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Jayanti, Satya Charitardha <satya.charitardha.jayanti@intel.com>
---
 sound/soc/intel/skylake/bxt-sst.c      |    5 ----
 sound/soc/intel/skylake/skl-pcm.c      |   36 ++++++++++++++++++++++---------
 sound/soc/intel/skylake/skl-sst-dsp.h  |   18 ++++++++++++---
 sound/soc/intel/skylake/skl-sst-ipc.c  |   17 +++++++++++++-
 sound/soc/intel/skylake/skl-topology.c |   18 ++++++++++++---
 5 files changed, 68 insertions(+), 26 deletions(-)

diff --git a/sound/soc/intel/skylake/bxt-sst.c b/sound/soc/intel/skylake/bxt-sst.c
index ee2bf08..b8d55c9 100644
--- a/sound/soc/intel/skylake/bxt-sst.c
+++ b/sound/soc/intel/skylake/bxt-sst.c
@@ -31,7 +31,6 @@
 #include "skl-sst-ipc.h"
 #include "skl-tplg-interface.h"
 #include "skl-fwlog.h"
-#include "skl.h"
 
 #define FW_ROM_INIT_DONE                0x1
 
@@ -108,7 +107,6 @@ int bxt_sst_dsp_init_hw(struct device *dev, void __iomem *mmio_base, int irq,
 	struct skl_sst *skl;
 	struct sst_dsp *sst;
 	u32 dsp_wp[] = {BXT_ADSP_WP_DSP0, BXT_ADSP_WP_DSP1};
-	struct skl_dsp_notify_params *params;
 	int ret = 0;
 
 	dev_dbg(dev, "In %s\n", __func__);
@@ -146,9 +144,6 @@ int bxt_sst_dsp_init_hw(struct device *dev, void __iomem *mmio_base, int irq,
 		dev_err(dev, "FW tracing init failed : %x", ret);
 		return ret;
 	}
-	params = devm_kzalloc(dev, sizeof(struct skl_dsp_notify_params), GFP_KERNEL);
-	params->skl_sst = skl;
-	skl->params = params;
 
 	ret = skl_ipc_init(dev, skl);
 	if (ret)
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 6030563..d9a55ad 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -852,27 +852,41 @@ static struct snd_soc_dai_ops skl_link_dai_ops = {
 	.trigger = skl_link_pcm_trigger,
 };
 
-static int skl_dsp_cb_event(struct skl_dsp_notify_params *params)
+static int skl_dsp_cb_event(struct skl_sst *skl, unsigned int event,
+		struct skl_notify_data *notify_data)
 {
-	struct snd_soc_platform *soc_platform = params->skl_sst->platform;
+	struct snd_soc_platform *soc_platform = skl->platform;
 	struct snd_soc_card *card;
 	struct snd_kcontrol *kcontrol;
+	struct soc_bytes_ext *sb;
+	struct skl_algo_data *bc;
+	u8 param_length;
 
 	if (!soc_platform) {
-		dev_err(params->skl_sst->dev,
+		dev_err(skl->dev,
 			"%s: Platform not found\n", __func__);
 		return -EINVAL;
 	}
 
-	card = soc_platform->component.card;
-	kcontrol = snd_soc_card_get_kcontrol(card,
-				"hwd_in hwd 0 notif params"); /*control name of WoV notification*/
-	if (!kcontrol) {
-			dev_err(params->skl_sst->dev,
-				"hwd notification control not found\n");
-			return -EINVAL;
+
+	switch (event) {
+	case EVENT_GLB_NOTIFY_PHRASE_DETECTED:
+		card = soc_platform->component.card;
+		/*TODO Need to avoid hard-coded control name*/
+		kcontrol = snd_soc_card_get_kcontrol(card,
+					"hwd_in hwd 0 notif params"); /*control name of WoV notification*/
+		if (!kcontrol) {
+				dev_err(skl->dev,
+					"hwd notification control not found\n");
+				return -EINVAL;
 		}
-	snd_ctl_notify(card->snd_card, SNDRV_CTL_EVENT_MASK_VALUE, &kcontrol->id);
+
+		sb = (struct soc_bytes_ext *)kcontrol->private_value;
+		bc = (struct skl_algo_data *)sb->dobj.private;
+		param_length = sizeof(struct skl_notify_data) + sizeof(struct skl_hwd_event);
+		memcpy(bc->params, (char *)notify_data, param_length);
+		snd_ctl_notify(card->snd_card, SNDRV_CTL_EVENT_MASK_VALUE, &kcontrol->id);
+	}
 	return 0;
 }
 
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index b1b34ad..cfbfa53 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -122,6 +122,10 @@ struct sst_dsp_device;
 /** FW Extended Manifest Header id = $AE1 */
 #define SKL_EXT_MANIFEST_MAGIC_HEADER_ID   0x31454124
 
+/*DSP notification events*/
+#define EVENT_GLB_NOTIFY_PHRASE_DETECTED  4
+
+/* DSP Core state */
 enum skl_dsp_states {
 	SKL_DSP_RUNNING = 1,
 	SKL_DSP_RUNNING_D0I3, /* Running in D0i3 state*/
@@ -159,12 +163,18 @@ struct skl_dsp_loader_ops {
 				 int stream_tag);
 };
 
-struct skl_dsp_notify_params {
-	struct skl_sst *skl_sst;
-	u32 event;
+struct skl_hwd_event {
+	bool is_hwd_event;
+};
+
+struct skl_notify_data {
+	u32 type;
+	u32 length;
+	char data[0];
 };
+
 struct skl_dsp_notify_ops {
-	int (*notify_cb)(struct skl_dsp_notify_params *params);
+	int (*notify_cb)(struct skl_sst *skl, unsigned int event, struct skl_notify_data *notify_data);
 };
 
 struct skl_load_module_info {
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index bc8918a..f62cff3 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -14,6 +14,7 @@
  */
 #include <linux/device.h>
 #include <linux/delay.h>
+#include <linux/slab.h>
 
 #include "../common/sst-dsp.h"
 #include "skl-sst-dsp.h"
@@ -449,6 +450,8 @@ int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 		struct skl_ipc_header header)
 {
 	struct skl_sst *skl = container_of(ipc, struct skl_sst, ipc);
+	struct skl_notify_data *notify_data;
+	struct skl_hwd_event hwd_data;
 
 	if (IPC_GLB_NOTIFY_MSG_TYPE(header.primary)) {
 		switch (IPC_GLB_NOTIFY_TYPE(header.primary)) {
@@ -473,9 +476,19 @@ int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 
 		case IPC_GLB_NOTIFY_PHRASE_DETECTED:
 			dev_err(ipc->dev, "*****Pharse Detected **********\n");
-			mdelay(1);
-			skl->notify_ops.notify_cb(skl->params);
+			notify_data = kzalloc((sizeof(struct skl_notify_data) + sizeof(struct skl_hwd_event)), GFP_KERNEL);
+			if (!notify_data)
+				return -ENOMEM;
 
+			hwd_data.is_hwd_event = true;
+
+			/* Copying hot-word event specific data */
+			memcpy(notify_data->data, &hwd_data, sizeof(struct skl_hwd_event));
+			notify_data->length = sizeof(struct skl_hwd_event);
+			notify_data->type = 0xFF;
+			mdelay(1);
+			skl->notify_ops.notify_cb(skl, IPC_GLB_NOTIFY_PHRASE_DETECTED, notify_data);
+			kfree(notify_data);
 			/*
 			 * Per HW recomendation, After phrase detection,
 			 * clear the CGCTL.MISCBDCGE.
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 26503c5..e333d70 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -1387,6 +1387,8 @@ static int skl_tplg_tlv_control_get(struct snd_kcontrol *kcontrol,
 	struct snd_soc_dapm_context *dapm = snd_soc_dapm_kcontrol_dapm(kcontrol);
 	struct skl_algo_data *bc = (struct skl_algo_data *)sb->dobj.private;
 	struct skl *skl = get_skl_ctx(dapm->dev);
+	struct skl_notify_data *notify_data;
+	int ret = 0;
 
 	dev_dbg(dapm->dev, "In%s control_name=%s, id=%u\n", __func__, kcontrol->id.name, bc->param_id);
 	dev_dbg(dapm->dev, "size = %u (%#x), max = %#x\n", size, size, bc->max);
@@ -1396,14 +1398,21 @@ static int skl_tplg_tlv_control_get(struct snd_kcontrol *kcontrol,
 				      bc->max, bc->param_id, mconfig);
 
 	if (bc->params) {
-		int ret;
 		ret = copy_to_user(data, &bc->param_id, sizeof(u32));
 		ret = copy_to_user(((unsigned char *)data) + sizeof(u32), &bc->max, sizeof(u32));
 		ret = copy_to_user(((unsigned char *)data) + 2*sizeof(u32), bc->params, size - 2*sizeof(u32));
 
-		return  ret;
 	}
-	return 0;
+
+	/* Notification payload will be set to 0 after read is done */
+	if (bc->notification_ctrl) {
+		notify_data = (struct skl_notify_data *)bc->params;
+
+		if (notify_data != NULL)
+			memset(notify_data->data, 0, notify_data->length);
+	}
+
+	return  ret;
 }
 
 static int skl_tplg_tlv_control_set(struct snd_kcontrol *kcontrol,
@@ -1420,7 +1429,8 @@ static int skl_tplg_tlv_control_set(struct snd_kcontrol *kcontrol,
 	dev_dbg(dapm->dev, "in %s control=%s\n", __func__, kcontrol->id.name);
 	dev_dbg(dapm->dev, "size = %u, %#x\n", size, size);
 
-	if (ac->params) {
+	if (ac->params && (ac->access_type == SKL_WIDGET_WRITE ||
+				ac->access_type == SKL_WIDGET_READ_WRITE)) {
 		memset(ac->params, 0, ac->max);
                 /* skip copying first two u32 words from user which is the TLV header */
 		if (copy_from_user(ac->params,
-- 
1.7.5.4

