From 1935eef1cb3cbbc88f0e30543411e5f2012b8bac Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Thu, 27 Oct 2016 16:51:33 +0300
Subject: [PATCH 4630/4706] mei: dal: handle correctly big endian values.

commit 1a7cd2332a3028ffefd2fb016e35b18626856bd8 from
git://git.yoctoproject.org/linux-yocto-4.1

Replace byte_order_swapi with be32_to_cpu for handling
big endian values.
Use __be32 for big endian values and add __CHECK_ENDIAN__
to compilation flags.

Change-Id: I8e0271574b47a52d378d403f9adb2435c5a841ab
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/Makefile      |    3 ++-
 drivers/misc/mei/dal/bhp_heci.h    |    6 +++---
 drivers/misc/mei/dal/bhp_impl_ta.c |   27 +++++----------------------
 3 files changed, 10 insertions(+), 26 deletions(-)

diff --git a/drivers/misc/mei/dal/Makefile b/drivers/misc/mei/dal/Makefile
index 7574e7f..312fccc 100644
--- a/drivers/misc/mei/dal/Makefile
+++ b/drivers/misc/mei/dal/Makefile
@@ -1,4 +1,5 @@
-ccflags-y += -DDEBUG
+ccflags-y += -D__CHECK_ENDIAN__ -DDEBUG
+
 obj-$(CONFIG_INTEL_MEI_DAL) += mei_dal.o
 mei_dal-objs := dal_class.o
 mei_dal-objs += dal_cdev.o
diff --git a/drivers/misc/mei/dal/bhp_heci.h b/drivers/misc/mei/dal/bhp_heci.h
index 16f1323..9b8a58c 100644
--- a/drivers/misc/mei/dal/bhp_heci.h
+++ b/drivers/misc/mei/dal/bhp_heci.h
@@ -184,14 +184,14 @@ struct bhp_get_isd_response {
 
 struct bhp_snr_response {
 	/* field response comes from java BIG endian */
-	s32 response;
+	__be32 response;
 	s8 buffer[0];
 };
 
 struct bhp_snr_bof_response {
 	/* field response comes from java BIG endian */
-	s32 response;
-	u32 request_length;
+	__be32 response;
+	__be32 request_length;
 };
 
 struct bhp_list_ta_packages_response {
diff --git a/drivers/misc/mei/dal/bhp_impl_ta.c b/drivers/misc/mei/dal/bhp_impl_ta.c
index be2a337..8e45643 100644
--- a/drivers/misc/mei/dal/bhp_impl_ta.c
+++ b/drivers/misc/mei/dal/bhp_impl_ta.c
@@ -144,18 +144,6 @@ static s32 string_to_uuid(const s8 *str, s8 *uuid)
 	return 1;
 }
 
-static void byte_order_swapi(int *i)
-{
-	int i_tmp = *i;
-	char *c = (char *) i;
-	char *c_tmp = (char *) &i_tmp;
-
-	c[0] = c_tmp[3];
-	c[1] = c_tmp[2];
-	c[2] = c_tmp[1];
-	c[3] = c_tmp[0];
-}
-
 /* try to session_enter for IVM, then SVM */
 static struct bh_response_record *
 session_enter_vm(u64 seq, int *conn_idx, int lock_session)
@@ -557,10 +545,8 @@ int bhp_send_and_recv(const u64 handle, int command_id,
 		if (rr->buffer &&
 		    rr->length >= sizeof(struct bhp_snr_response)) {
 			resp = (struct bhp_snr_response *)rr->buffer;
-			if (response_code) {
-				*response_code = resp->response;
-				byte_order_swapi(response_code);
-			}
+			if (response_code)
+				*response_code = be32_to_cpu(resp->response);
 
 			len = rr->length - sizeof(struct bhp_snr_response);
 
@@ -588,13 +574,10 @@ int bhp_send_and_recv(const u64 handle, int command_id,
 		struct bhp_snr_bof_response *resp =
 				(struct bhp_snr_bof_response *)rr->buffer;
 
-		if (response_code) {
-			*response_code = resp->response;
-			byte_order_swapi(response_code);
-		}
+		if (response_code)
+			*response_code = be32_to_cpu(resp->response);
 
-		*output_length = resp->request_length;
-		byte_order_swapi((int *) output_length);
+		*output_length = be32_to_cpu(resp->request_length);
 	}
 
 	kfree(rr->buffer);
-- 
1.7.5.4

