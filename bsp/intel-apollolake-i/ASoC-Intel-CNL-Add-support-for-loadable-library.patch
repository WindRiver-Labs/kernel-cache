From e2a9826e9433560efd896d7e48067c1f3ffcd45d Mon Sep 17 00:00:00 2001
From: Guneshwor Singh <guneshwor.o.singh@intel.com>
Date: Thu, 5 May 2016 09:07:26 +0530
Subject: [PATCH 1962/2508] ASoC: Intel: CNL: Add support for loadable library

commit 5ca7ce306890459fa882378bfa34b8584bfc6bb5 from
https://github.com/01org/linux-apollolake-i

Change-Id: I00d10da42fba00432dcb9a449e8830bb8f443237
Signed-off-by: Guneshwor Singh <guneshwor.o.singh@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/9464
Reviewed-by: Shah, Hardik T <hardik.t.shah@intel.com>
Tested-by: Shah, Hardik T <hardik.t.shah@intel.com>
---
 sound/soc/intel/skylake/cnl-sst.c |   79 ++++++++++++++++++++++++++++++++++++-
 1 files changed, 78 insertions(+), 1 deletions(-)

diff --git a/sound/soc/intel/skylake/cnl-sst.c b/sound/soc/intel/skylake/cnl-sst.c
index 5d90a7a..e65c0b7 100644
--- a/sound/soc/intel/skylake/cnl-sst.c
+++ b/sound/soc/intel/skylake/cnl-sst.c
@@ -38,6 +38,7 @@
 #include "skl-sst-dsp.h"
 #include "skl-sst-ipc.h"
 #include "skl-fwlog.h"
+#include "skl.h"
 
 #define FW_ROM_INIT_DONE                0x1
 #define CNL_IPC_PURGE_FW		0x01004000
@@ -402,11 +403,79 @@ static unsigned int cnl_get_errorcode(struct sst_dsp *ctx)
 	 return sst_dsp_shim_read(ctx, CNL_ADSP_ERROR_CODE);
 }
 
+static int cnl_load_library(struct sst_dsp *ctx, struct skl_dfw_manifest *minfo)
+{
+	struct snd_dma_buffer dmab;
+	struct skl_sst *cnl = ctx->thread_context;
+	const struct firmware *fw = NULL;
+	struct skl_ext_manifest_header *hdr;
+	u32 size;
+	const void *data;
+	int ret = 0, i, dma_id, stream_tag;
+
+	for (i = 1; i < minfo->lib_count; i++) {
+		fw = NULL;
+		ret = request_firmware(&fw, minfo->lib[i].name, ctx->dev);
+		if (ret < 0) {
+			dev_err(ctx->dev, "Request firmware failed %d for library: %s\n", ret, minfo->lib[i].name);
+			goto load_library_failed;
+		}
+
+		size = fw->size;
+		data = fw->data;
+		hdr = (struct skl_ext_manifest_header *)fw->data;
+		if (hdr->ext_manifest_id == SKL_EXT_MANIFEST_MAGIC_HEADER_ID) {
+			dev_dbg(ctx->dev, "Found extended manifest in lib binary\n");
+			/* Check for extended manifest is not greater than FW size*/
+			if (hdr->ext_manifest_len >= fw->size) {
+				ret = -EINVAL;
+				goto load_library_failed;
+			}
+
+			size = fw->size - hdr->ext_manifest_len;
+			data = (u8 *)fw->data + hdr->ext_manifest_len;
+		}
+
+		dev_dbg(ctx->dev, "Preparing host dma for lib %s with size:%d\n", minfo->lib[i].name, size);
+		stream_tag = ctx->dsp_ops.prepare(ctx->dev, 0x40, size,
+						&dmab);
+		if (stream_tag <= 0) {
+			dev_err(ctx->dev, "DMA prepare for lib download failed\n");
+			ret = stream_tag;
+			goto load_library_failed;
+		}
+		dma_id = stream_tag - 1;
+		memcpy(dmab.area, data, size);
+
+		/* make sure Library is flushed to DDR */
+		clflush_cache_range(dmab.area, size);
+
+		ctx->dsp_ops.trigger(ctx->dev, true, stream_tag);
+		ret = skl_sst_ipc_load_library(&cnl->ipc, dma_id, i);
+		if (ret < 0) {
+			dev_err(ctx->dev, "Load lib %s failed: %d\n", minfo->lib[i].name, ret);
+			dev_dbg(ctx->dev, "Error code=0x%x: FW status=0x%x\n",
+				sst_dsp_shim_read(ctx, CNL_ADSP_ERROR_CODE),
+				sst_dsp_shim_read(ctx, CNL_ADSP_FW_STATUS));
+		}
+
+		ctx->dsp_ops.trigger(ctx->dev, false, stream_tag);
+		ctx->dsp_ops.cleanup(ctx->dev, &dmab, stream_tag);
+	}
+
+	return 0;
+
+load_library_failed:
+	release_firmware(fw);
+	return ret;
+}
+
 static struct skl_dsp_fw_ops cnl_fw_ops = {
 	.set_state_D0 = cnl_set_dsp_D0,
 	.set_state_D3 = cnl_set_dsp_D3,
 	.load_fw = cnl_load_base_firmware,
 	.get_fw_errcode = cnl_get_errorcode,
+	.load_library = cnl_load_library,
 };
 
 static struct sst_ops cnl_ops = {
@@ -601,10 +670,18 @@ int cnl_sst_dsp_init_fw(struct device *dev,
 
 	ret = ctx->dsp->fw_ops.load_fw(ctx->dsp);
 	if (ret < 0) {
-		dev_err(dev, "Load base fw failed : %d", ret);
+		dev_err(dev, "Load base fw failed: %d", ret);
 		return ret;
 	}
 	ctx->fw_loaded = true;
+
+	if (minfo->lib_count > 1) {
+		ret = ctx->dsp->fw_ops.load_library(ctx->dsp, minfo);
+		if (ret < 0) {
+			dev_err(dev, "Load library failed: %d", ret);
+			return ret;
+		}
+	}
 	return 0;
 }
 EXPORT_SYMBOL_GPL(cnl_sst_dsp_init_fw);
-- 
1.7.5.4

