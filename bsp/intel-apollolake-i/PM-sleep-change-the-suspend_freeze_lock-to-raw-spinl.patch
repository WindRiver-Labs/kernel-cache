From 281a3e96cf929030594a872b9c8753591cc4070a Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 19 Apr 2017 19:46:46 +0800
Subject: [PATCH] PM / sleep: change the suspend_freeze_lock to raw spinlock

The freeze_wake() may be invoked in irq context, and then would cause
the following call trace on a rt kernel:
Call Trace:
 <IRQ>  [<ffffffff81a69ff5>] dump_stack+0x54/0x6f
 [<ffffffff8107dcf7>] ___might_sleep+0xe7/0x170
 [<ffffffff81a71834>] rt_spin_lock+0x24/0x60
 [<ffffffff810a155a>] freeze_wake+0x1a/0x60
 [<ffffffff8161b435>] pm_system_wakeup+0x15/0x20
 [<ffffffff810b3fea>] irq_pm_check_wakeup+0x3a/0x50
 [<ffffffff810b0e49>] irq_may_run+0x29/0x60
 [<ffffffff810b10ec>] handle_edge_irq+0x2c/0x190
 [<ffffffff81005632>] handle_irq+0x22/0x40
 [<ffffffff81a7438b>] do_IRQ+0x5b/0x100
 [<ffffffff81a728eb>] common_interrupt+0x6b/0x6b

So change the suspend_freeze_lock to raw spinlock to fix this issue.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 kernel/power/suspend.c |   14 +++++++-------
 1 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/kernel/power/suspend.c b/kernel/power/suspend.c
index 8d7a1ef..7ee6bdf 100644
--- a/kernel/power/suspend.c
+++ b/kernel/power/suspend.c
@@ -40,7 +40,7 @@ static const struct platform_freeze_ops *freeze_ops;
 static DECLARE_WAIT_QUEUE_HEAD(suspend_freeze_wait_head);
 
 enum freeze_state __read_mostly suspend_freeze_state;
-static DEFINE_SPINLOCK(suspend_freeze_lock);
+static DEFINE_RAW_SPINLOCK(suspend_freeze_lock);
 
 void freeze_set_ops(const struct platform_freeze_ops *ops)
 {
@@ -56,12 +56,12 @@ static void freeze_begin(void)
 
 static void freeze_enter(void)
 {
-	spin_lock_irq(&suspend_freeze_lock);
+	raw_spin_lock_irq(&suspend_freeze_lock);
 	if (pm_wakeup_pending())
 		goto out;
 
 	suspend_freeze_state = FREEZE_STATE_ENTER;
-	spin_unlock_irq(&suspend_freeze_lock);
+	raw_spin_unlock_irq(&suspend_freeze_lock);
 
 	get_online_cpus();
 	cpuidle_resume();
@@ -77,23 +77,23 @@ static void freeze_enter(void)
 	cpuidle_pause();
 	put_online_cpus();
 
-	spin_lock_irq(&suspend_freeze_lock);
+	raw_spin_lock_irq(&suspend_freeze_lock);
 
  out:
 	suspend_freeze_state = FREEZE_STATE_NONE;
-	spin_unlock_irq(&suspend_freeze_lock);
+	raw_spin_unlock_irq(&suspend_freeze_lock);
 }
 
 void freeze_wake(void)
 {
 	unsigned long flags;
 
-	spin_lock_irqsave(&suspend_freeze_lock, flags);
+	raw_spin_lock_irqsave(&suspend_freeze_lock, flags);
 	if (suspend_freeze_state > FREEZE_STATE_NONE) {
 		suspend_freeze_state = FREEZE_STATE_WAKE;
 		wake_up(&suspend_freeze_wait_head);
 	}
-	spin_unlock_irqrestore(&suspend_freeze_lock, flags);
+	raw_spin_unlock_irqrestore(&suspend_freeze_lock, flags);
 }
 EXPORT_SYMBOL_GPL(freeze_wake);
 
-- 
1.7.5.4

