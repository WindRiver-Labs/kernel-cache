From 82469c24c98c24291df9d7e650377a97498a0f40 Mon Sep 17 00:00:00 2001
From: Vinod Koul <vinod.koul@intel.com>
Date: Thu, 27 Aug 2015 08:31:32 +0530
Subject: [PATCH 1740/2508] ASoC: Intel: Skylake: add debugfs facility for
 modules

commit cead1ff07b211b4bf56ed59f5dc96a4d597e450f from
https://github.com/01org/linux-apollolake-i

Driver modules have lot of information represented in struct
skl_module_cfg.  Knowing this is useful for debug, so enable
debugfs for this structure

Signed-off-by: Vinod Koul <vinod.koul@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c    |  129 +++++++++++++++++++++++++++++++-
 sound/soc/intel/skylake/skl-messages.c |    1 +
 sound/soc/intel/skylake/skl-nhlt.c     |    2 +
 sound/soc/intel/skylake/skl-topology.c |    2 +
 sound/soc/intel/skylake/skl.h          |   12 +++-
 5 files changed, 144 insertions(+), 2 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index ff27e4f..004ce82 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -15,8 +15,11 @@
 
 #include <linux/pci.h>
 #include <linux/debugfs.h>
+#include <sound/soc.h>
 #include "skl.h"
 #include "skl-nhlt.h"
+#include "skl-tplg-interface.h"
+#include "skl-topology.h"
 
 #define MAX_SSP 4
 
@@ -33,6 +36,7 @@ struct skl_debug {
 	struct dentry *nhlt;
 	struct nhlt_blob ssp_blob[MAX_SSP];
 	struct nhlt_blob dmic_blob;
+	struct dentry *modules;
 };
 
 struct nhlt_specific_cfg
@@ -176,6 +180,118 @@ static int skl_init_nhlt(struct skl_debug *d)
 	return 0;
 }
 
+#define MOD_BUF (2 * PAGE_SIZE)
+
+static ssize_t skl_print_pins(struct skl_module_pin *m_pin, char *buf,
+				int max_pin, ssize_t ret, bool direction)
+{
+	int i;
+
+	for (i = 0; i < max_pin; i++)
+		ret += snprintf(buf + ret, MOD_BUF - ret,
+				"%s%d\n\tModule %d\n\tInstance %d\n\t%s\n\t%s\n\tIndex:%d\n",
+				direction ? "Input Pin:" : "Output Pin:",
+				i, m_pin[i].id.module_id, m_pin[i].id.instance_id,
+				m_pin[i].in_use ? "Used" : "Unused",
+				m_pin[i].is_dynamic ? "Dynamic" : "Static",
+				m_pin[i].pin_index);
+	return ret;
+}
+
+static ssize_t skl_print_fmt(struct skl_module_fmt *fmt, char *buf,
+					ssize_t ret, bool direction)
+{
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"%s\n\tCH %d\n\tFreq %d\n\tBit %d\tDepth %d\n\tCh config %x\n",
+			direction ? "Input Format:" : "Output Format:",
+			fmt->channels, fmt->s_freq, fmt->bit_depth,
+			fmt->valid_bit_depth, fmt->ch_cfg);
+
+	return ret;
+}
+
+static ssize_t module_read(struct file *file, char __user *user_buf,
+		size_t count, loff_t *ppos)
+{
+	struct skl_module_cfg *mconfig = file->private_data;
+	char *buf;
+	ssize_t ret;
+
+	buf = kzalloc(MOD_BUF, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	ret = snprintf(buf, MOD_BUF, "Module\n\tid: %d\n\tinstance id: %d\n",
+			mconfig->id.module_id, mconfig->id.instance_id);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"Resources\n\tMCPS %x\n\tIBS %x\n\tOBS %x\t\n",
+			mconfig->mcps, mconfig->ibs, mconfig->obs);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"Module data:\n\tCore %d\n\tIN queue %d\n\tOut queue %d\n\t%s\n",
+			mconfig->core_id, mconfig->max_in_queue,
+			mconfig->max_out_queue,
+			mconfig->is_loadable ? "loadable" : "inbuilt");
+
+	ret += skl_print_fmt(&mconfig->in_fmt, buf, ret, true);
+	ret += skl_print_fmt(&mconfig->out_fmt, buf, ret, false);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"Fixup:\n\tParams %x\n\tConverter %x\n",
+			mconfig->params_fixup, mconfig->converter);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"Module Gateway\n\tType %x\n\tInstance %d\n\tHW conn %x\n\tSlot %x\n",
+			mconfig->dev_type, mconfig->vbus_id,
+			mconfig->hw_conn_type, mconfig->time_slot);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"Pipeline ID\n\t%d\n\tPriority %d\n\tConn Type %d\n\tPages %x\n",
+			mconfig->pipe->ppl_id, mconfig->pipe->pipe_priority,
+			mconfig->pipe->conn_type, mconfig->pipe->memory_pages);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"\tParams:\n\t\tHost DMA %d\n\t\tLink DMA %d\n",
+			mconfig->pipe->p_params->host_dma_id,
+			mconfig->pipe->p_params->link_dma_id);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"\tPCM params:\n\t\tCH %d\n\t\tFreq %d\n\t\tFormat %d\n",
+			mconfig->pipe->p_params->ch,
+			mconfig->pipe->p_params->s_freq,
+			mconfig->pipe->p_params->s_fmt);
+
+	ret += snprintf(buf + ret, MOD_BUF - ret,
+			"\tLink %x\n\tStream %x\n",
+			mconfig->pipe->p_params->linktype,
+			mconfig->pipe->p_params->stream);
+
+	ret += skl_print_pins(mconfig->m_in_pin, buf, mconfig->max_in_queue, ret, true);
+	ret += skl_print_pins(mconfig->m_out_pin, buf, mconfig->max_out_queue, ret, false);
+
+	ret = simple_read_from_buffer(user_buf, count, ppos, buf, ret);
+
+	kfree(buf);
+	return ret;
+}
+
+static const struct file_operations mcfg_fops = {
+	.open = simple_open,
+	.read = module_read,
+	.llseek = default_llseek,
+};
+
+
+void skl_debug_init_module(struct skl_debug *d,
+			struct snd_soc_dapm_widget *w,
+			struct skl_module_cfg *mconfig)
+{
+	if (!debugfs_create_file(w->name, 0444, d->modules, mconfig, &mcfg_fops))
+		dev_err(d->dev, "%s: module debugfs init failed\n", w->name);
+}
+
 struct skl_debug *skl_debugfs_init(struct skl *skl)
 {
 	struct skl_debug *d;
@@ -198,12 +314,23 @@ struct skl_debug *skl_debugfs_init(struct skl *skl)
 	d->nhlt =  debugfs_create_dir("nhlt", d->fs);
 	if (IS_ERR(d->nhlt) || !d->nhlt) {
 		dev_err(&skl->pci->dev, "nhlt debugfs create failed\n");
-		return NULL;
+		goto err;
+	}
+
+	/* now create the module dir */
+	d->modules =  debugfs_create_dir("modules", d->fs);
+	if (IS_ERR(d->modules) || !d->modules) {
+		dev_err(&skl->pci->dev, "modules debugfs create failed\n");
+		goto err;
 	}
 
 	skl_init_nhlt(d);
 
 	return d;
+
+err:
+	debugfs_remove_recursive(d->fs);
+	return NULL;
 }
 
 void skl_debugfs_exit(struct skl_debug *d)
diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 4b31002..1c8b797 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -21,6 +21,7 @@
 #include <linux/pci.h>
 #include <sound/core.h>
 #include <sound/pcm.h>
+#include <sound/soc.h>
 #include "skl-sst-dsp.h"
 #include "skl-sst-ipc.h"
 #include "skl.h"
diff --git a/sound/soc/intel/skylake/skl-nhlt.c b/sound/soc/intel/skylake/skl-nhlt.c
index 213d563..2be8b64 100644
--- a/sound/soc/intel/skylake/skl-nhlt.c
+++ b/sound/soc/intel/skylake/skl-nhlt.c
@@ -17,6 +17,8 @@
  * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *
  */
+
+#include <sound/soc.h>
 #include "skl.h"
 
 /* Unique identification for getting NHLT blobs */
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index db3caf5..ca54cf4 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -1405,6 +1405,8 @@ static int skl_tplg_widget_load(struct snd_soc_component *cmpnt,
 	mconfig->formats_config.param_id = dfw_config->caps.param_id;
 	mconfig->formats_config.set_params = dfw_config->caps.set_params;
 
+	skl_debug_init_module(skl->debugfs, w, mconfig);
+
 bind_event:
 	if (tplg_w->event_type == 0) {
 		dev_dbg(bus->dev, "ASoC: No event handler required\n");
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index f31f0409..4046275 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -98,13 +98,17 @@ void skl_free_dsp(struct skl *skl);
 int skl_suspend_dsp(struct skl *skl);
 int skl_resume_dsp(struct skl *skl);
 
+struct skl_module_cfg;
+
 #ifdef CONFIG_DEBUG_FS
 
 struct skl_debug *skl_debugfs_init(struct skl *skl);
 void skl_debugfs_exit(struct skl_debug *d);
 struct nhlt_specific_cfg
 *skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance);
-
+void skl_debug_init_module(struct skl_debug *d,
+			struct snd_soc_dapm_widget *w,
+			struct skl_module_cfg *mconfig);
 #else
 
 struct skl_debug {
@@ -125,6 +129,12 @@ struct nhlt_specific_cfg
 	return NULL;
 }
 
+void skl_debug_init_module(struct skl_debug *d,
+			struct snd_soc_dapm_widget *w,
+			struct skl_module_cfg *mconfig)
+{
+}
+
 #endif
 
 #endif /* __SOUND_SOC_SKL_H */
-- 
1.7.5.4

