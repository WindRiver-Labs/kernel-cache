From 4a441f02bb9e5504a0999cbfde974d231b22db11 Mon Sep 17 00:00:00 2001
From: Damien Lespiau <damien.lespiau@intel.com>
Date: Mon, 18 Jan 2016 20:45:38 +0530
Subject: [PATCH 1416/2508] drm: Add an blend_color property (v3)

commit a971f88a180913adf25c76980821850cf4f267b8 from
https://github.com/01org/linux-apollolake-i

Add blend color property and update the
documentation for the same

V2: Add blend color support in get property.

v3 (by Matt):
 - Switch to using drm_rgba property type and value

Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
Signed-off-by: vandita kulkarni <vandita.kulkarni@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/drm_atomic.c |    4 ++++
 drivers/gpu/drm/drm_crtc.c   |    6 ++++++
 include/drm/drm_crtc.h       |   14 ++++++++++----
 3 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/drm_atomic.c b/drivers/gpu/drm/drm_atomic.c
index 96b2c0e..98b6a58 100644
--- a/drivers/gpu/drm/drm_atomic.c
+++ b/drivers/gpu/drm/drm_atomic.c
@@ -708,6 +708,8 @@ int drm_atomic_plane_set_property(struct drm_plane *plane,
 		state->rotation = val;
 	} else if (property == config->prop_blend_func) {
 		state->blend_mode.func = val;
+	} else if (property == config->prop_blend_color) {
+		state->blend_mode.color.v = val;
 	} else if (plane->funcs->atomic_set_property) {
 		return plane->funcs->atomic_set_property(plane, state,
 				property, val);
@@ -766,6 +768,8 @@ drm_atomic_plane_get_property(struct drm_plane *plane,
 		*val = state->rotation;
 	} else if (property == config->prop_blend_func) {
 		*val = state->blend_mode.func;
+	} else if (property == config->prop_blend_color) {
+		*val = state->blend_mode.color.v;
 	} else if (plane->funcs->atomic_get_property) {
 		return plane->funcs->atomic_get_property(plane, state, property, val);
 	} else {
diff --git a/drivers/gpu/drm/drm_crtc.c b/drivers/gpu/drm/drm_crtc.c
index 2f49ad6..54666b8 100644
--- a/drivers/gpu/drm/drm_crtc.c
+++ b/drivers/gpu/drm/drm_crtc.c
@@ -1593,6 +1593,12 @@ static int drm_mode_create_standard_properties(struct drm_device *dev)
 		return -ENOMEM;
 	dev->mode_config.prop_blend_func = prop;
 
+	prop = drm_property_create_rgba(dev, DRM_MODE_PROP_ATOMIC,
+					"blend_color");
+	if (!prop)
+		return -ENOMEM;
+	dev->mode_config.prop_blend_color = prop;
+
 	return 0;
 }
 
diff --git a/include/drm/drm_crtc.h b/include/drm/drm_crtc.h
index 89e37896..21e9c2a 100644
--- a/include/drm/drm_crtc.h
+++ b/include/drm/drm_crtc.h
@@ -105,6 +105,10 @@ enum drm_blend_factor {
 	DRM_BLEND_FACTOR_ONE,
 	DRM_BLEND_FACTOR_SRC_ALPHA,
 	DRM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
+	DRM_BLEND_FACTOR_CONSTANT_ALPHA,
+	DRM_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
+	DRM_BLEND_FACTOR_CONSTANT_ALPHA_TIMES_SRC_ALPHA,
+	DRM_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA_TIMES_SRC_ALPHA,
 };
 
 #define DRM_BLEND_FUNC(src_factor, dst_factor)		\
@@ -112,10 +116,6 @@ enum drm_blend_factor {
 #define DRM_BLEND_FUNC_SRC_FACTOR(val)	(((val) >> 16) & 0xffff)
 #define DRM_BLEND_FUNC_DST_FACTOR(val)	((val) & 0xffff)
 
-struct drm_blend_mode {
-	uint64_t func;
-};
-
 enum drm_connector_force {
 	DRM_FORCE_UNSPECIFIED,
 	DRM_FORCE_OFF,
@@ -397,6 +397,11 @@ drm_rgba_bits(struct drm_rgba c, unsigned compshift, unsigned bits) {
 #define DRM_RGBA_BLUEBITS(c, bits)  drm_rgba_bits(c, 16, bits)
 #define DRM_RGBA_ALPHABITS(c, bits) drm_rgba_bits(c, 0, bits)
 
+struct drm_blend_mode {
+	struct drm_rgba color;
+	uint64_t func;
+};
+
 /**
  * struct drm_crtc_state - mutable CRTC state
  * @crtc: backpointer to the CRTC
@@ -2236,6 +2241,7 @@ struct drm_mode_config {
 	struct drm_property *prop_mode_id;
 	struct drm_property *prop_background_color;
 	struct drm_property *prop_blend_func;
+	struct drm_property *prop_blend_color;
 
 	/* DVI-I properties */
 	struct drm_property *dvi_i_subconnector_property;
-- 
1.7.5.4

