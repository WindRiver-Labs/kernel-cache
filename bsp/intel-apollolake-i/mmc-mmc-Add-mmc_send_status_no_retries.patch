From 27fd44d3252d3c196fad8a704b8d4ca61efb9023 Mon Sep 17 00:00:00 2001
From: Adrian Hunter <adrian.hunter@intel.com>
Date: Thu, 6 Oct 2016 14:15:15 +0300
Subject: [PATCH 04/68] mmc: mmc: Add mmc_send_status_no_retries()

commit 9b9c9be4dab1b3eee507a787096a27f0a60284d9 from
git://git.yoctoproject.org/linux-yocto-4.1

Error bits in the status response are cleared as soon as the response is
sent, so if the status is being used to check errors there is no point
retrying. Add a function mmc_send_status_no_retries() that does not retry
to facilitate that case.

Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
Signed-off-by: Lim Key Seong <key.seong.lim@intel.com>
---
 drivers/mmc/core/mmc_ops.c |   16 +++++++++++-----
 drivers/mmc/core/mmc_ops.h |    1 +
 2 files changed, 12 insertions(+), 5 deletions(-)

diff --git a/drivers/mmc/core/mmc_ops.c b/drivers/mmc/core/mmc_ops.c
index 0e9ae1c..155d68c 100644
--- a/drivers/mmc/core/mmc_ops.c
+++ b/drivers/mmc/core/mmc_ops.c
@@ -54,8 +54,8 @@ static const u8 tuning_blk_pattern_8bit[] = {
 	0xff, 0x77, 0x77, 0xff, 0x77, 0xbb, 0xdd, 0xee,
 };
 
-static inline int __mmc_send_status(struct mmc_card *card, u32 *status,
-				    bool ignore_crc)
+static int __mmc_send_status(struct mmc_card *card, u32 *status,
+			     bool ignore_crc, int retries)
 {
 	int err;
 	struct mmc_command cmd = {0};
@@ -70,7 +70,7 @@ static inline int __mmc_send_status(struct mmc_card *card, u32 *status,
 	if (ignore_crc)
 		cmd.flags &= ~MMC_RSP_CRC;
 
-	err = mmc_wait_for_cmd(card->host, &cmd, MMC_CMD_RETRIES);
+	err = mmc_wait_for_cmd(card->host, &cmd, retries);
 	if (err)
 		return err;
 
@@ -85,7 +85,12 @@ static inline int __mmc_send_status(struct mmc_card *card, u32 *status,
 
 int mmc_send_status(struct mmc_card *card, u32 *status)
 {
-	return __mmc_send_status(card, status, false);
+	return __mmc_send_status(card, status, false, MMC_CMD_RETRIES);
+}
+
+int mmc_send_status_no_retries(struct mmc_card *card, u32 *status)
+{
+	return __mmc_send_status(card, status, false, 0);
 }
 
 static int _mmc_select_card(struct mmc_host *host, struct mmc_card *card)
@@ -545,7 +550,8 @@ int __mmc_switch(struct mmc_card *card, u8 set, u8 index, u8 value,
 	timeout = jiffies + msecs_to_jiffies(timeout_ms);
 	do {
 		if (send_status) {
-			err = __mmc_send_status(card, &status, ignore_crc);
+			err = __mmc_send_status(card, &status, ignore_crc,
+						MMC_CMD_RETRIES);
 			if (err)
 				goto out;
 		}
diff --git a/drivers/mmc/core/mmc_ops.h b/drivers/mmc/core/mmc_ops.h
index f498f9a..40678f9 100644
--- a/drivers/mmc/core/mmc_ops.h
+++ b/drivers/mmc/core/mmc_ops.h
@@ -21,6 +21,7 @@ int mmc_all_send_cid(struct mmc_host *host, u32 *cid);
 int mmc_set_relative_addr(struct mmc_card *card);
 int mmc_send_csd(struct mmc_card *card, u32 *csd);
 int mmc_send_status(struct mmc_card *card, u32 *status);
+int mmc_send_status_no_retries(struct mmc_card *card, u32 *status);
 int mmc_send_cid(struct mmc_host *host, u32 *cid);
 int mmc_spi_read_ocr(struct mmc_host *host, int highcap, u32 *ocrp);
 int mmc_spi_set_crc(struct mmc_host *host, int use_crc);
-- 
1.7.5.4

