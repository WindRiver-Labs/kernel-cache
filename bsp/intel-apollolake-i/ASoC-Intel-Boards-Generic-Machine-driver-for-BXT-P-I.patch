From be2565797cc82766b2fac5da1f568b7e6fae5de1 Mon Sep 17 00:00:00 2001
From: Mousumi Jana <mousumix.jana@intel.com>
Date: Wed, 27 Jul 2016 00:29:03 +0530
Subject: [PATCH 4683/4706] ASoC: Intel: Boards: Generic Machine driver for
 BXT-P IVI

commit b9db6e9fae3f8106758275571154d5d54ba70d5b from
git://git.yoctoproject.org/linux-yocto-4.1

Added a generic machine driver which supports
6 Playback, 6 Capture streams that can be interfaced to
any of the available 6 SSPs. All SSP DAIs have been
enabled and interfaced to individial dummy codec DAIs

Change-Id: If9ef415818202ad29e2b4c745c3783b66f0b92f5
Signed-off-by: Mousumi Jana <mousumix.jana@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/10571
Reviewed-by: B, Jayachandran <jayachandran.b@intel.com>
Tested-by: Jayanti, Satya Charitardha <satya.charitardha.jayanti@intel.com>
---
 sound/soc/intel/Kconfig                   |   13 +
 sound/soc/intel/boards/Makefile           |    2 +
 sound/soc/intel/boards/bxtp_ivi_generic.c |  506 +++++++++++++++++++++++++++++
 3 files changed, 521 insertions(+), 0 deletions(-)
 create mode 100644 sound/soc/intel/boards/bxtp_ivi_generic.c

diff --git a/sound/soc/intel/Kconfig b/sound/soc/intel/Kconfig
index b86e0d3..853aaee 100644
--- a/sound/soc/intel/Kconfig
+++ b/sound/soc/intel/Kconfig
@@ -195,6 +195,19 @@ config SND_SOC_INTEL_BXTP_IVI_RSE_MACH
         Say Y if you have such a device
         If unsure select "N".
 
+config SND_SOC_INTEL_BXTP_IVI_GENERIC_MACH
+        tristate "ASoC Audio driver for BXTP IVI Generic with Dummy Codecs"
+        select SND_SOC_INTEL_SST
+        select SND_SOC_INTEL_SKYLAKE
+        select SND_SOC_COMPRESS
+        default n
+        help
+        This adds support for ASoC machine driver for Broxton-P platforms
+        with Dummy I2S audio codec for IVI generic configuration.
+        Say Y if you have such a device
+        If unsure select "N".
+
+
 config SND_SOC_INTEL_SKL_NAU88L25_SSM4567_MACH
 	tristate "ASoC Audio driver for SKL with NAU88L25 and SSM4567 in I2S Mode"
 	select SND_SOC_INTEL_SST
diff --git a/sound/soc/intel/boards/Makefile b/sound/soc/intel/boards/Makefile
index e5296ba..a1ee720 100644
--- a/sound/soc/intel/boards/Makefile
+++ b/sound/soc/intel/boards/Makefile
@@ -8,6 +8,7 @@ snd-soc-sst-cht-bsw-rt5645-objs := cht_bsw_rt5645.o
 snd-soc-skl_rt286-objs := skl_rt286.o
 snd-soc-bxtp_ivi_hu_rt298-objs := bxtp_ivi_hu_rt298.o
 snd-soc-bxtp_ivi_rse_rt298-objs := bxtp_ivi_rse_rt298.o
+snd-soc-bxtp_ivi_generic-objs := bxtp_ivi_generic.o
 snd-skl_nau88l25_ssm4567-objs := skl_nau88l25_ssm4567.o
 snd-skl_rt5650-objs := skl_rt5650.o
 snd-soc-bxt_mrgfld_dpcm_florida-objs := mrgfld_dpcm_florida.o
@@ -28,6 +29,7 @@ obj-$(CONFIG_SND_SOC_INTEL_CHT_BSW_RT5645_MACH) += snd-soc-sst-cht-bsw-rt5645.o
 obj-$(CONFIG_SND_SOC_INTEL_SKL_RT286_MACH) += snd-soc-skl_rt286.o
 obj-$(CONFIG_SND_SOC_INTEL_BXTP_IVI_HU_MACH) += snd-soc-bxtp_ivi_hu_rt298.o
 obj-$(CONFIG_SND_SOC_INTEL_BXTP_IVI_RSE_MACH) += snd-soc-bxtp_ivi_rse_rt298.o
+obj-$(CONFIG_SND_SOC_INTEL_BXTP_IVI_GENERIC_MACH) += snd-soc-bxtp_ivi_generic.o
 obj-$(CONFIG_SND_SOC_INTEL_SKL_NAU88L25_SSM4567_MACH) += snd-skl_nau88l25_ssm4567.o
 obj-$(CONFIG_SND_SOC_INTEL_SKL_RT5650_MACH) += snd-skl_rt5650.o
 obj-$(CONFIG_SND_SOC_INTEL_BXT_MRGFLD_MACH) += snd-soc-bxt_mrgfld_dpcm_florida.o
diff --git a/sound/soc/intel/boards/bxtp_ivi_generic.c b/sound/soc/intel/boards/bxtp_ivi_generic.c
new file mode 100644
index 0000000..b8f9e38
--- /dev/null
+++ b/sound/soc/intel/boards/bxtp_ivi_generic.c
@@ -0,0 +1,506 @@
+/*
+ * Intel Broxton-P I2S Machine Driver for IVI
+ *
+ * Copyright (C) 2016, Intel Corporation. All rights reserved.
+ *
+ * Modified from:
+ *   Intel BXTP RT298 Machine driver
+ *   Intel Skylake I2S Machine driver
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include <sound/jack.h>
+#include <sound/pcm_params.h>
+
+#define SSP0_GPIO_BASE 0xd0c40610
+#define SSP0_GPIO_VALUE1 0x40900500
+#define SSP0_GPIO_VALUE2 0x44000600
+#define SSP1_GPIO_BASE 0xd0c40660
+#define SSP1_GPIO_VALUE1 0x44000400
+#define SSP4_GPIO_BASE 0xd0c705A0
+#define SSP4_GPIO_VALUE1 0x44000A00
+#define SSP4_GPIO_VALUE2 0x44000800
+#define SSP5_GPIO_BASE 0xd0c70580
+#define SSP5_GPIO_VALUE 0x44000800
+
+static const struct snd_soc_dapm_widget broxton_widgets[] = {
+	SND_SOC_DAPM_HP("Headphone Jack", NULL),
+	SND_SOC_DAPM_SPK("Speaker", NULL),
+	SND_SOC_DAPM_SPK("Speaker2", NULL),
+	SND_SOC_DAPM_SPK("Speaker3", NULL),
+	SND_SOC_DAPM_MIC("DMIC2", NULL),
+};
+
+static const struct snd_soc_dapm_route broxton_rt298_map[] = {
+	{"Speaker", NULL, "Dummy Playback"},
+	{"Speaker1", NULL, "Dummy Playback1"},
+	{"Speaker2", NULL, "Dummy Playback2"},
+	{"Speaker3", NULL, "Dummy Playback3"},
+	{"Speaker4", NULL, "Dummy Playback4"},
+	{"Speaker5", NULL, "Dummy Playback5"},
+
+	{"Dummy Capture1", NULL, "DMIC2"},
+	{"Dummy Capture", NULL, "DMIC3"},
+	{"Dummy Capture2", NULL, "DMIC4"},
+	{"Dummy Capture3", NULL, "DMIC5"},
+	{"Dummy Capture4", NULL, "DMIC6"},
+	{"Dummy Capture5", NULL, "DMIC7"},
+	/* BE connections */
+	{ "Dummy Playback4", NULL, "ssp5 Tx"},
+	{ "ssp5 Tx", NULL, "codec3_out"},
+	{ "codec3_in", NULL, "ssp5 Rx" },
+	{ "ssp5 Rx", NULL, "Dummy Capture4"},
+	{ "Dummy Playback2", NULL, "ssp4 Tx"},
+	{ "ssp4 Tx", NULL, "codec0_out"},
+	{ "codec0_in", NULL, "ssp4 Rx" },
+	{ "ssp4 Rx", NULL, "Dummy Capture2"},
+
+	{ "Dummy Playback5", NULL, "ssp3 Tx"},
+	{ "ssp3 Tx", NULL, "codec5_out"},
+	{ "codec5_in", NULL, "ssp3 Rx"},
+	{ "ssp3 Rx", NULL, "Dummy Capture5"},
+	{ "Dummy Playback3", NULL, "ssp2 Tx"},
+	{ "ssp2 Tx", NULL, "codec1_out"},
+	{ "codec1_in", NULL, "ssp2 Rx"},
+	{ "ssp2 Rx", NULL, "Dummy Capture3"},
+
+	{ "Dummy Playback", NULL, "ssp1 Tx"},
+	{ "ssp1 Tx", NULL, "codec2_out"},
+	{ "codec2_in", NULL, "ssp1 Rx"},
+	{ "ssp1 Rx", NULL, "Dummy Capture"},
+
+	{ "hdmi_ssp0_in", NULL, "ssp0 Rx"},
+	{ "ssp0 Rx", NULL, "Dummy Capture1"},
+	{ "Dummy Playback1", NULL, "ssp0 Tx"},
+	{ "ssp0 Tx", NULL, "codec4_out"},
+};
+
+static int bxtp_ssp0_gpio_init(struct snd_soc_pcm_runtime *rtd)
+{
+	char *gpio_addr;
+	u32 gpio_value1 = SSP0_GPIO_VALUE1;
+	u32 gpio_value2 = SSP0_GPIO_VALUE2;
+
+	gpio_addr = (void *)ioremap_nocache(SSP0_GPIO_BASE, 0x30);
+	if (gpio_addr == NULL)
+		return(-EIO);
+
+	memcpy_toio(gpio_addr + 0x8, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x10, &gpio_value2, sizeof(gpio_value2));
+	memcpy_toio(gpio_addr + 0x18, &gpio_value2, sizeof(gpio_value2));
+	memcpy_toio(gpio_addr + 0x20, &gpio_value2, sizeof(gpio_value2));
+
+	iounmap(gpio_addr);
+	return 0;
+}
+
+static int bxtp_ssp1_gpio_init(struct snd_soc_pcm_runtime *rtd)
+{
+
+	char *gpio_addr;
+	u32 gpio_value1 = SSP1_GPIO_VALUE1;
+
+	gpio_addr = (void *)ioremap_nocache(SSP1_GPIO_BASE, 0x30);
+	if (gpio_addr == NULL)
+		return(-EIO);
+
+	memcpy_toio(gpio_addr + 0x8, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x10, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x18, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x20, &gpio_value1, sizeof(gpio_value1));
+
+	iounmap(gpio_addr);
+	return 0;
+}
+
+static int bxtp_ssp4_gpio_init(struct snd_soc_pcm_runtime *rtd)
+{
+
+	char *gpio_addr;
+	u32 gpio_value1 = SSP4_GPIO_VALUE1;
+	u32 gpio_value2 = SSP4_GPIO_VALUE2;
+
+	gpio_addr = (void *)ioremap_nocache(SSP4_GPIO_BASE, 0x30);
+	if (gpio_addr == NULL)
+		return(-EIO);
+
+	memcpy_toio(gpio_addr, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x8, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x10, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x18, &gpio_value2, sizeof(gpio_value2));
+
+	iounmap(gpio_addr);
+	return 0;
+
+}
+
+static int bxtp_ssp5_gpio_init(struct snd_soc_pcm_runtime *rtd)
+{
+	char *gpio_addr;
+	u32 gpio_value1 = SSP5_GPIO_VALUE;
+
+	gpio_addr = (void *)ioremap_nocache(SSP5_GPIO_BASE, 0x30);
+	if (gpio_addr == NULL)
+		return(-EIO);
+
+	memcpy_toio(gpio_addr, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x8, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x10, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x18, &gpio_value1, sizeof(gpio_value1));
+
+	iounmap(gpio_addr);
+	return 0;
+}
+
+static int broxton_ssp1_fixup(struct snd_soc_pcm_runtime *rtd,
+			struct snd_pcm_hw_params *params)
+{
+	struct snd_interval *rate = hw_param_interval(params,
+				SNDRV_PCM_HW_PARAM_RATE);
+	struct snd_interval *channels = hw_param_interval(params,
+				SNDRV_PCM_HW_PARAM_CHANNELS);
+
+	/* The ADSP will covert the FE rate to 48k, 4 Channel */
+	rate->min = rate->max = 48000;
+	channels->min = channels->max = 4;
+
+	/* set SSP1 to 16 bit */
+	snd_mask_set(&params->masks[SNDRV_PCM_HW_PARAM_FORMAT -
+					SNDRV_PCM_HW_PARAM_FIRST_MASK],
+					SNDRV_PCM_FORMAT_S16_LE);
+	return 0;
+}
+
+static int broxton_ssp2_fixup(struct snd_soc_pcm_runtime *rtd,
+			struct snd_pcm_hw_params *params)
+{
+	struct snd_interval *rate = hw_param_interval(params,
+				SNDRV_PCM_HW_PARAM_RATE);
+	struct snd_interval *channels = hw_param_interval(params,
+				SNDRV_PCM_HW_PARAM_CHANNELS);
+
+	/* The ADSP will covert the FE rate to 44.1k, stereo */
+	rate->min = rate->max = 44100;
+	channels->min = channels->max = 2;
+
+	/* set SSP2 to 16 bit */
+	snd_mask_set(&params->masks[SNDRV_PCM_HW_PARAM_FORMAT -
+					SNDRV_PCM_HW_PARAM_FIRST_MASK],
+					SNDRV_PCM_FORMAT_S16_LE);
+	return 0;
+}
+
+static int broxton_ssp4_fixup(struct snd_soc_pcm_runtime *rtd,
+			struct snd_pcm_hw_params *params)
+{
+	struct snd_interval *rate = hw_param_interval(params,
+					SNDRV_PCM_HW_PARAM_RATE);
+	struct snd_interval *channels = hw_param_interval(params,
+					SNDRV_PCM_HW_PARAM_CHANNELS);
+
+	/* The ADSP will covert the FE rate to 44k, stereo */
+	rate->min = rate->max = 44100;
+	channels->min = channels->max = 2;
+
+	/* set SSP4 to 16 bit */
+	snd_mask_set(&params->masks[SNDRV_PCM_HW_PARAM_FORMAT -
+					SNDRV_PCM_HW_PARAM_FIRST_MASK],
+					SNDRV_PCM_FORMAT_S16_LE);
+	return 0;
+}
+
+/* broxton digital audio interface glue - connects codec <--> CPU */
+static struct snd_soc_dai_link broxton_rt298_dais[] = {
+	/* Front End DAI links */
+	{
+		.name = "Bxt Audio Port 1",
+		.stream_name = "System Pin 1",
+		.cpu_dai_name = "System Pin",
+		.platform_name = "0000:00:0e.0",
+		.nonatomic = 1,
+		.dynamic = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai2",
+		.trigger = {SND_SOC_DPCM_TRIGGER_POST,
+			SND_SOC_DPCM_TRIGGER_POST},
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "Bxt Audio Port 2",
+		.stream_name = "System Pin 2",
+		.cpu_dai_name = "System Pin 2",
+		.platform_name = "0000:00:0e.0",
+		.nonatomic = 1,
+		.dynamic = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai3",
+		.trigger = {SND_SOC_DPCM_TRIGGER_POST,
+			SND_SOC_DPCM_TRIGGER_POST},
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "Bxt Audio Port 3",
+		.stream_name = "System Pin 3",
+		.cpu_dai_name = "System Pin 3",
+		.platform_name = "0000:00:0e.0",
+		.nonatomic = 1,
+		.dynamic = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.trigger = {SND_SOC_DPCM_TRIGGER_POST,
+			SND_SOC_DPCM_TRIGGER_POST},
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "Bxt Audio Port 4",
+		.stream_name = "System Pin 4",
+		.cpu_dai_name = "System Pin 4",
+		.platform_name = "0000:00:0e.0",
+		.nonatomic = 1,
+		.dynamic = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.trigger = {SND_SOC_DPCM_TRIGGER_POST,
+			SND_SOC_DPCM_TRIGGER_POST},
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "Bxt Audio Port 5",
+		.stream_name = "System Pin 5",
+		.cpu_dai_name = "System Pin 5",
+		.platform_name = "0000:00:0e.0",
+		.nonatomic = 1,
+		.dynamic = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai1",
+		.trigger = {SND_SOC_DPCM_TRIGGER_POST,
+			SND_SOC_DPCM_TRIGGER_POST},
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "Bxt Audio Port 6",
+		.stream_name = "System Pin 6",
+		.cpu_dai_name = "System Pin 6",
+		.platform_name = "0000:00:0e.0",
+		.nonatomic = 1,
+		.dynamic = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai1",
+		.trigger = {SND_SOC_DPCM_TRIGGER_POST,
+			SND_SOC_DPCM_TRIGGER_POST},
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+
+	/* Trace Buffer DAI links */
+	{
+		.name = "Bxt Trace Buffer0",
+		.stream_name = "Core 0 Trace Buffer",
+		.cpu_dai_name = "TraceBuffer0 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.platform_name = "0000:00:0e.0",
+		.capture_only = true,
+		.ignore_suspend = 1,
+	},
+	{
+		.name = "Bxt Trace Buffer1",
+		.stream_name = "Core 1 Trace Buffer",
+		.cpu_dai_name = "TraceBuffer1 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.platform_name = "0000:00:0e.0",
+		.capture_only = true,
+		.ignore_suspend = 1,
+	},
+	{
+		.name = "Bxt Compress Probe playback",
+		.stream_name = "Probe Playback",
+		.cpu_dai_name = "Compress Probe0 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.platform_name = "0000:00:0e.0",
+		.init = NULL,
+		.nonatomic = 1,
+	},
+	{
+		.name = "Bxt Compress Probe capture",
+		.stream_name = "Probe Capture",
+		.cpu_dai_name = "Compress Probe1 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.platform_name = "0000:00:0e.0",
+		.init = NULL,
+		.nonatomic = 1,
+	},
+
+	/* Back End DAI links */
+	{
+		/* SSP0 - Codec - for HDMI MCH */
+		.name = "SSP0-Codec",
+		.be_id = 0,
+		.cpu_dai_name = "SSP0 Pin",
+		.platform_name = "0000:00:0e.0",
+		.no_pcm = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai1",
+		.init = bxtp_ssp0_gpio_init,
+		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+		.ignore_suspend = 1,
+		.ignore_pmdown_time = 1,
+		.dpcm_capture = 1,
+		.dpcm_playback = 1,
+	},
+	{
+		/* SSP1 - Codec */
+		.name = "SSP1-Codec",
+		.be_id = 1,
+		.cpu_dai_name = "SSP1 Pin",
+		.platform_name = "0000:00:0e.0",
+		.no_pcm = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.init =  bxtp_ssp1_gpio_init,
+		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+		.ignore_suspend = 1,
+		.ignore_pmdown_time = 1,
+		.be_hw_params_fixup = broxton_ssp1_fixup,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		/* SSP2 - Codec */
+		.name = "SSP2-Codec",
+		.be_id = 2,
+		.cpu_dai_name = "SSP2 Pin",
+		.platform_name = "0000:00:0e.0",
+		.no_pcm = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai3",
+		.init = NULL,
+		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+		.ignore_suspend = 1,
+		.ignore_pmdown_time = 1,
+		.be_hw_params_fixup = broxton_ssp2_fixup,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		/* SSP3 - Codec */
+		.name = "SSP3-Codec",
+		.be_id = 3,
+		.cpu_dai_name = "SSP3 Pin",
+		.platform_name = "0000:00:0e.0",
+		.no_pcm = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai5",
+		.init = NULL,
+		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+		.ignore_suspend = 1,
+		.ignore_pmdown_time = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		/* SSP4 - Codec */
+		.name = "SSP4-Codec",
+		.be_id = 3,
+		.cpu_dai_name = "SSP4 Pin",
+		.platform_name = "0000:00:0e.0",
+		.no_pcm = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai2",
+		.init =  bxtp_ssp4_gpio_init,
+		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+		.ignore_suspend = 1,
+		.ignore_pmdown_time = 1,
+		.be_hw_params_fixup = broxton_ssp4_fixup,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		/* SSP5 - Codec */
+		.name = "SSP5-Codec",
+		.be_id = 5,
+		.cpu_dai_name = "SSP5 Pin",
+		.platform_name = "0000:00:0e.0",
+		.no_pcm = 1,
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai4",
+		.init =  bxtp_ssp5_gpio_init,
+		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+		.ignore_suspend = 1,
+		.ignore_pmdown_time = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+};
+
+/* broxton audio machine driver for SPT + RT298S */
+static struct snd_soc_card broxton_rt298 = {
+	.name = "broxton-ivi-generic",
+	.owner = THIS_MODULE,
+	.dai_link = broxton_rt298_dais,
+	.num_links = ARRAY_SIZE(broxton_rt298_dais),
+	.controls = NULL,
+	.num_controls = 0,
+	.dapm_widgets = broxton_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(broxton_widgets),
+	.dapm_routes = broxton_rt298_map,
+	.num_dapm_routes = ARRAY_SIZE(broxton_rt298_map),
+	.fully_routed = true,
+};
+
+static int broxton_audio_probe(struct platform_device *pdev)
+{
+	broxton_rt298.dev = &pdev->dev;
+
+	return snd_soc_register_card(&broxton_rt298);
+}
+
+static int broxton_audio_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_card(&broxton_rt298);
+	return 0;
+}
+
+static struct platform_driver broxton_audio = {
+	.probe = broxton_audio_probe,
+	.remove = broxton_audio_remove,
+	.driver = {
+		.name = "bxt_ivi_generic_i2s",
+	},
+};
+
+module_platform_driver(broxton_audio)
+
+/* Module information */
+MODULE_AUTHOR("Pardha Saradhi K <pardha.saradhi.kesapragada@intel.com>");
+MODULE_AUTHOR("Mousumi Jana <mousumix.jana@intel.com>");
+MODULE_DESCRIPTION("Intel SST Audio for Broxton");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:bxt_ivi_generic_i2s");
-- 
1.7.5.4

