From 7b0a87d395d7482081954509a6fab1108c164196 Mon Sep 17 00:00:00 2001
From: Mousumi Jana <mousumix.jana@intel.com>
Date: Thu, 31 Mar 2016 20:10:46 +0530
Subject: [PATCH 1933/2508] ASoC: Intel: Skylake: Add support for DSP log
 priority selection

commit 4f7d051d7f0d0caf08ffb65b79992973fc4e19f7 from
https://github.com/01org/linux-apollolake-i

Added kcontrol in platform for DSP log level. User can select
between QUIET, CRITICAL, HIGH, MEDIUM, LOW, VERBOSE levels
before starting the compressed stream for log capture.
Default value is set to MEDIUM.

Change-Id: I097235f0cd9dca5c7263f8c9a1400329abbe8ef6
Signed-off-by: Mousumi Jana <mousumix.jana@intel.com>
---
 sound/soc/intel/common/sst-dsp-priv.h        |    2 +
 sound/soc/intel/skylake/skl-fwlog.c          |   26 +++++++++++++++++++
 sound/soc/intel/skylake/skl-fwlog.h          |    2 +
 sound/soc/intel/skylake/skl-messages.c       |    7 +----
 sound/soc/intel/skylake/skl-topology.c       |   35 ++++++++++++++++++++++++++
 sound/soc/intel/skylake/skl-tplg-interface.h |    1 +
 6 files changed, 67 insertions(+), 6 deletions(-)

diff --git a/sound/soc/intel/common/sst-dsp-priv.h b/sound/soc/intel/common/sst-dsp-priv.h
index 515503f..cdd42c0 100644
--- a/sound/soc/intel/common/sst-dsp-priv.h
+++ b/sound/soc/intel/common/sst-dsp-priv.h
@@ -128,6 +128,8 @@ struct sst_trace_window {
 	u32		nr_dsp;
 	/* indicates which DSPs have logging enabled */
 	u32		flags;
+       /* dsp fw log level*/
+	u32 log_priority;
 };
 
 /*
diff --git a/sound/soc/intel/skylake/skl-fwlog.c b/sound/soc/intel/skylake/skl-fwlog.c
index 8346422..cdaaf6d 100644
--- a/sound/soc/intel/skylake/skl-fwlog.c
+++ b/sound/soc/intel/skylake/skl-fwlog.c
@@ -20,6 +20,10 @@
 #include <linux/delay.h>
 #include <sound/compress_driver.h>
 #include "../common/sst-dsp-priv.h"
+#include "skl-sst-ipc.h"
+#include "skl.h"
+
+#define DEF_LOG_PRIORITY 3
 
 /*
  * Initialize trace window and firmware write pointers for the platform
@@ -47,6 +51,7 @@ int skl_dsp_init_trace_window(struct sst_dsp *sst, u32 *wp, u32 offset,
 	sst->trace_wind.flags = 0;
 	sst->trace_wind.dbg_buffers = buff;
 	sst->trace_wind.dsp_wps = dsp_wps;
+	sst->trace_wind.log_priority = DEF_LOG_PRIORITY;
 	for (idx = 0; idx < cores; idx++)
 		sst->trace_wind.dsp_wps[idx] = (void *)(sst->addr.lpe
 							+ wp[idx]);
@@ -83,6 +88,27 @@ int skl_dsp_init_log_buffer(struct sst_dsp *sst, int size,	int core,
 }
 EXPORT_SYMBOL_GPL(skl_dsp_init_log_buffer);
 
+int update_dsp_log_priority(int value, struct skl *skl)
+{
+	int ret = 0;
+	struct skl_sst *ctx = skl->skl_sst;
+
+	ctx->dsp->trace_wind.log_priority = value;
+	return ret;
+}
+EXPORT_SYMBOL_GPL(update_dsp_log_priority);
+
+int get_dsp_log_priority(struct skl *skl)
+{
+	int ret = 0;
+	u32 value;
+	struct skl_sst *ctx = skl->skl_sst;
+
+	value = ctx->dsp->trace_wind.log_priority;
+	return value;
+}
+EXPORT_SYMBOL_GPL(get_dsp_log_priority);
+
 unsigned long skl_dsp_log_avail(struct sst_dsp *sst, int core)
 {
 	struct sst_dbg_rbuffer *buff = sst->trace_wind.dbg_buffers[core];
diff --git a/sound/soc/intel/skylake/skl-fwlog.h b/sound/soc/intel/skylake/skl-fwlog.h
index 46caea9..fbaf8ad 100644
--- a/sound/soc/intel/skylake/skl-fwlog.h
+++ b/sound/soc/intel/skylake/skl-fwlog.h
@@ -13,3 +13,5 @@ void skl_dsp_get_log_buff(struct sst_dsp *sst, int core);
 void skl_dsp_put_log_buff(struct sst_dsp *sst, int core);
 void skl_dsp_done_log_buffer(struct sst_dsp *sst, int core);
 int skl_dsp_get_buff_users(struct sst_dsp *sst, int core);
+int update_dsp_log_priority(int value, struct skl *skl);
+int get_dsp_log_priority(struct skl *skl);
diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 72de419..cbdecf1 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -58,11 +58,6 @@ static int skl_free_dma_buf(struct device *dev, struct snd_dma_buffer *dmab)
 }
 
 #define ENABLE_LOGS		6
-#if defined(CONFIG_SND_SOC_INTEL_CNL_FPGA)
-#define DEFAULT_LOG_PRIORITY	6
-#else
-#define DEFAULT_LOG_PRIORITY	5
-#endif
 
 /* set firmware logging state via IPC */
 int skl_dsp_enable_logging(struct sst_generic_ipc *ipc, int core, int enable)
@@ -73,7 +68,7 @@ int skl_dsp_enable_logging(struct sst_generic_ipc *ipc, int core, int enable)
 
 	log_msg.core_mask = (1 << core);
 	log_msg.logs_core[core].enable = enable;
-	log_msg.logs_core[core].priority = DEFAULT_LOG_PRIORITY;
+	log_msg.logs_core[core].priority = ipc->dsp->trace_wind.log_priority;
 
 	msg.large_param_id = ENABLE_LOGS;
 	msg.param_data_size = sizeof(log_msg);
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 7b63123..0420f34 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -26,11 +26,13 @@
 #include "skl-topology.h"
 #include "skl.h"
 #include "skl-tplg-interface.h"
+#include "skl-fwlog.h"
 
 #define SKL_CH_FIXUP_MASK		(1 << 0)
 #define SKL_RATE_FIXUP_MASK		(1 << 1)
 #define SKL_FMT_FIXUP_MASK		(1 << 2)
 
+
 /* Update the count of streams for which D0i3 can be attempted and that of
  * streams for which D0i3 can not be attempted. In the streaming case
  * D0i3 can be attempted for streams that can afford large latency/large
@@ -918,6 +920,32 @@ static int skl_tplg_pga_event(struct snd_soc_dapm_widget *w,
 
 	return 0;
 }
+static int skl_tplg_dsp_log_get(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_platform *platform = snd_soc_kcontrol_platform(kcontrol);
+	struct hdac_ext_bus *ebus = snd_soc_component_get_drvdata
+					(&(platform->component));
+	struct skl *skl = ebus_to_skl(ebus);
+
+	ucontrol->value.integer.value[0] = get_dsp_log_priority(skl);
+
+	return 0;
+}
+
+static int skl_tplg_dsp_log_set(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_platform *platform = snd_soc_kcontrol_platform(kcontrol);
+	struct hdac_ext_bus *ebus = snd_soc_component_get_drvdata
+					(&(platform->component));
+	struct skl *skl = ebus_to_skl(ebus);
+
+	update_dsp_log_priority(ucontrol->value.integer.value[0], skl);
+
+	return 0;
+}
+
 
 static int skl_tplg_tlv_control_get(struct snd_kcontrol *kcontrol,
 			unsigned int __user *data, unsigned int size)
@@ -1239,6 +1267,11 @@ const struct snd_soc_tplg_bytes_ext_ops skl_tlv_ops[] = {
 					skl_tplg_tlv_control_set},
 };
 
+static const struct snd_soc_tplg_kcontrol_ops skl_tplg_kcontrol_ops[] = {
+	{SKL_CONTROL_TYPE_DSP_LOG, skl_tplg_dsp_log_get,
+					skl_tplg_dsp_log_set},
+};
+
 /*
  * The topology binary passes the pin info for a module so initialize the pin
  * info passed into module instance
@@ -1541,6 +1574,8 @@ exit_manifest:
 static struct snd_soc_tplg_ops skl_tplg_ops  = {
 	.widget_load = skl_tplg_widget_load,
 	.control_load = skl_tplg_control_load,
+	.io_ops = skl_tplg_kcontrol_ops,
+	.io_ops_count = ARRAY_SIZE(skl_tplg_kcontrol_ops),
 	.bytes_ext_ops = skl_tlv_ops,
 	.bytes_ext_ops_count = ARRAY_SIZE(skl_tlv_ops),
 	.manifest = skl_manifest_load,
diff --git a/sound/soc/intel/skylake/skl-tplg-interface.h b/sound/soc/intel/skylake/skl-tplg-interface.h
index f511182..e491a8c 100644
--- a/sound/soc/intel/skylake/skl-tplg-interface.h
+++ b/sound/soc/intel/skylake/skl-tplg-interface.h
@@ -22,6 +22,7 @@
 /* Default types range from 0~12. type can range from 0 to 0xff
  * SST types start at higher to avoid any overlapping in future */
 #define SKL_CONTROL_TYPE_BYTE_EXT	0x100
+#define SKL_CONTROL_TYPE_DSP_LOG      0x105
 
 #define HDA_SST_CFG_MAX	900 /* size of copier cfg*/
 #define MAX_IN_QUEUE 8
-- 
1.7.5.4

