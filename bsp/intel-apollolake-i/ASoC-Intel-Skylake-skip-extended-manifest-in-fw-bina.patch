From 6ac84a838e7ab2b048bf43974f324a0164c80bde Mon Sep 17 00:00:00 2001
From: Ramesh Babu <ramesh.babu@intel.com>
Date: Tue, 19 Jan 2016 18:09:47 +0530
Subject: [PATCH 1840/2508] ASoC: Intel: Skylake: skip extended manifest in fw
 binary

commit 25c8a9b864538fc01049b1c17670435e9400e0e3 from
https://github.com/01org/linux-apollolake-i

Audio DSP firmware could have extended manifest header as
a part of fw image. The extended manifest is meant for
offline tools and it should not be loaded to dsp memory.

Check if the given fw image has extended manigest, if
yes then skip it and then load into dsp.

Change-Id: I7fcd8fa2d75f8634be8b9c4268568a3705468fb4
Signed-off-by: Ramesh Babu <ramesh.babu@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/8020
---
 sound/soc/intel/skylake/bxt-sst.c     |   18 +++++++++++++++---
 sound/soc/intel/skylake/skl-sst-dsp.h |   11 +++++++++++
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/sound/soc/intel/skylake/bxt-sst.c b/sound/soc/intel/skylake/bxt-sst.c
index 72dfa54..3868912 100644
--- a/sound/soc/intel/skylake/bxt-sst.c
+++ b/sound/soc/intel/skylake/bxt-sst.c
@@ -353,8 +353,11 @@ static int bxt_set_dsp_D3(struct sst_dsp *ctx)
 
 static int bxt_load_base_firmware(struct sst_dsp *ctx)
 {
+	struct skl_ext_manifest_header *hdr;
+	u32 size;
+	const void *data;
 	int ret = 0;
-	const struct firmware *fw = NULL;
+	struct firmware *fw = NULL;
 	struct skl_sst *skl = ctx->thread_context;
 
 	dev_dbg(ctx->dev, "In %s\n", __func__);
@@ -365,11 +368,20 @@ static int bxt_load_base_firmware(struct sst_dsp *ctx)
 		goto sst_load_base_firmware_failed;
 	}
 
-	ret = sst_bxt_prepare_fw(ctx, fw->data, fw->size);
+	size = fw->size;
+	data = fw->data;
+	hdr = (struct skl_ext_manifest_header *)fw->data;
+	if (hdr->ext_manifest_id == SKL_EXT_MANIFEST_MAGIC_HEADER_ID) {
+		dev_dbg(ctx->dev, "Found Extended manifest in FW Binary\n");
+		size = fw->size - hdr->ext_manifest_len;
+		data = (u8 *)fw->data + hdr->ext_manifest_len;
+	}
+
+	ret = sst_bxt_prepare_fw(ctx, data, size);
 	/* FIXME: Retry Enabling core and ROM load. Retry seemed to help during
 	   A0 Power On.So retain it for now. */
 	if (ret < 0) {
-		ret = sst_bxt_prepare_fw(ctx, fw->data, fw->size);
+		ret = sst_bxt_prepare_fw(ctx, data, size);
 		if (ret < 0) {
 			dev_err(ctx->dev, "Core En/ROM load fail:%d\n", ret);
 			goto sst_load_base_firmware_failed;
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index 2a4ff71..c501106 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -103,6 +103,9 @@ struct skl_dfw_manifest;
 #define SST_DSP_POWER_D0	0x0  /* full On */
 #define SST_DSP_POWER_D3	0x3  /* Off */
 
+/** FW Extended Manifest Header id = $AE1 */
+#define SKL_EXT_MANIFEST_MAGIC_HEADER_ID   0x31454124
+
 enum skl_dsp_states {
 	SKL_DSP_RUNNING = 1,
 	SKL_DSP_RESET,
@@ -149,6 +152,14 @@ struct skl_module_table {
 	struct list_head list;
 };
 
+struct skl_ext_manifest_header {
+    u32  ext_manifest_id;
+    u32  ext_manifest_len;
+    u16  ext_manifest_version_major;
+    u16  ext_manifest_version_minor;
+    u32  ext_manifest_entries;
+} __packed;
+
 void skl_cldma_process_intr(struct sst_dsp *ctx);
 void skl_cldma_int_disable(struct sst_dsp *ctx);
 int skl_cldma_prepare(struct sst_dsp *ctx);
-- 
1.7.5.4

