From 994607632731e5550c70d94ffab84399af5b29a1 Mon Sep 17 00:00:00 2001
From: "Pawse, GuruprasadX" <guruprasadx.pawse@intel.com>
Date: Sun, 17 Jul 2016 21:39:12 +0530
Subject: [PATCH 4688/4706] ASoC: Intel: Skylake: Probe code cleanup

commit 6f9a573a0c955dfc3c9a92a0992de0902e2468ce from
git://git.yoctoproject.org/linux-yocto-4.1

Mainly involves renaming function names and structure members
to a more meaningful one.

Change-Id: I0abd86a3d0f3cac30a9421869800f3fc680e5466
Signed-off-by: Pawse, GuruprasadX <guruprasadx.pawse@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/10380
Reviewed-by: Koul, Vinod <vinod.koul@intel.com>
Reviewed-by: Jayanti, Satya Charitardha <satya.charitardha.jayanti@intel.com>
Tested-by: Jayanti, Satya Charitardha <satya.charitardha.jayanti@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c |    2 +-
 sound/soc/intel/skylake/skl-probe.c    |   12 +++---
 sound/soc/intel/skylake/skl-topology.c |   62 ++++++++++++++++----------------
 sound/soc/intel/skylake/skl-topology.h |   18 +++++----
 4 files changed, 48 insertions(+), 46 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 4c8739f..ac97b19 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -1050,7 +1050,7 @@ static void skl_dump_bind_info(struct skl_sst *ctx, struct skl_module_cfg
 		src_module->m_state, dst_module->m_state);
 }
 
-int skl_disconnect_probe_point(struct skl_sst *ctx,
+int skl_probe_point_disconnect_ext(struct skl_sst *ctx,
 				struct snd_soc_dapm_widget *w)
 {
 	struct skl_ipc_large_config_msg msg;
diff --git a/sound/soc/intel/skylake/skl-probe.c b/sound/soc/intel/skylake/skl-probe.c
index 608f4da..08f6ec4 100644
--- a/sound/soc/intel/skylake/skl-probe.c
+++ b/sound/soc/intel/skylake/skl-probe.c
@@ -76,7 +76,7 @@ static int set_injector_stream(struct hdac_ext_stream *stream,
 	struct skl_probe_config *pconfig =  &skl->skl_sst->probe_config;
 	int i;
 
-	i = skl_get_probe_index(dai, pconfig);
+	i = skl_probe_get_index(dai, pconfig);
 	if (i != -1) {
 		pconfig->iprobe[i].stream = stream;
 		pconfig->iprobe[i].dma_id =
@@ -182,11 +182,11 @@ int skl_probe_compr_set_params(struct snd_compr_stream *substream,
 	}
 
 	if (substream->direction == SND_COMPRESS_PLAYBACK) {
-		index = skl_get_probe_index(dai, pconfig);
+		index = skl_probe_get_index(dai, pconfig);
 		if (index < 0)
 			return -EINVAL;
 
-		ret = skl_tplg_probe_attach_injector_dma(pconfig->w, skl->skl_sst, index);
+		ret = skl_probe_attach_inj_dma(pconfig->w, skl->skl_sst, index);
 		if (ret < 0)
 			return -EINVAL;
 
@@ -220,7 +220,7 @@ int skl_probe_compr_close(struct snd_compr_stream *substream,
 		goto probe_uninit;
 
 	if (substream->direction == SND_COMPRESS_PLAYBACK) {
-		index = skl_get_probe_index(dai, pconfig);
+		index = skl_probe_get_index(dai, pconfig);
 		if (index < 0)
 			return -EINVAL;
 
@@ -234,7 +234,7 @@ int skl_probe_compr_close(struct snd_compr_stream *substream,
 
 		pconfig->i_refc--;
 	} else if (substream->direction == SND_COMPRESS_CAPTURE) {
-		ret = skl_disconnect_probe_point(skl->skl_sst, pconfig->w);
+		ret = skl_probe_point_disconnect_ext(skl->skl_sst, pconfig->w);
 		if (ret < 0)
 			return -EINVAL;
 
@@ -405,7 +405,7 @@ int skl_probe_compr_trigger(struct snd_compr_stream *substream, int cmd,
 		/* FW starts probe module soon after its params are set.
 		 * So to avoid xruns, start DMA first and then set probe params.
 		 */
-		ret = skl_tplg_set_probe_params(pconfig->w, skl->skl_sst, substream->direction, dai);
+		ret = skl_probe_point_set_config(pconfig->w, skl->skl_sst, substream->direction, dai);
 		if (ret < 0)
 			return -EINVAL;
 	}
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 2173705..1f56b1d 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -629,7 +629,7 @@ static int skl_tplg_alloc_pipe_widget(struct device *dev,
 	return 0;
 }
 
-int skl_get_probe_index(struct snd_soc_dai *dai,
+int skl_probe_get_index(struct snd_soc_dai *dai,
 				struct skl_probe_config *pconfig)
 {
 	int i, ret = -1;
@@ -643,12 +643,12 @@ int skl_get_probe_index(struct snd_soc_dai *dai,
 	return ret;
 }
 
-int skl_tplg_probe_attach_injector_dma(struct snd_soc_dapm_widget *w,
+int skl_probe_attach_inj_dma(struct snd_soc_dapm_widget *w,
 				struct skl_sst *ctx, int index)
 {
 	int ret = -EINVAL;
 	struct skl_module_cfg *mconfig = w->priv;
-	struct skl_attach_probe_dma ad;
+	struct skl_probe_attach_inj_dma ad;
 	struct skl_probe_config *pconfig = &ctx->probe_config;
 
 	if (pconfig->iprobe[index].state == SKL_PROBE_STATE_INJ_NONE) {
@@ -658,7 +658,7 @@ int skl_tplg_probe_attach_injector_dma(struct snd_soc_dapm_widget *w,
 		ad.node_id.node.rsvd = 0;
 		ad.dma_buff_size = SKL_INJECT_PROBE_DMA_BUFF_SIZE;
 
-		ret = skl_set_module_params(ctx, (void *)&ad, sizeof(struct skl_attach_probe_dma),
+		ret = skl_set_module_params(ctx, (void *)&ad, sizeof(struct skl_probe_attach_inj_dma),
 						SKL_PROBE_INJECT_DMA_ATTACH, mconfig);
 		if (ret < 0)
 			return -EINVAL;
@@ -703,7 +703,7 @@ int skl_probe_detach_inj_dma(struct skl_sst *ctx, struct snd_soc_dapm_widget *w,
 	return ret;
 }
 
-int skl_tplg_set_probe_params(struct snd_soc_dapm_widget *w,
+int skl_probe_point_set_config(struct snd_soc_dapm_widget *w,
 					struct skl_sst *ctx, int direction,
 					struct snd_soc_dai *dai)
 {
@@ -717,7 +717,7 @@ int skl_tplg_set_probe_params(struct snd_soc_dapm_widget *w,
 	if (direction == SND_COMPRESS_PLAYBACK) {
 
 		/* only one injector point can be set at a time*/
-		n = skl_get_probe_index(dai, pconfig);
+		n = skl_probe_get_index(dai, pconfig);
 		if (n < 0)
 			return -EINVAL;
 
@@ -1747,18 +1747,18 @@ static int skl_probe_set_tlv_ext(struct snd_kcontrol *kcontrol)
 	if (index < 0)
 		return -EINVAL;
 
-	if ((ap->is_connect == SKL_PROBE_CONNECT) &&
+	if ((ap->operation == SKL_PROBE_CONNECT) &&
 		(pconfig->eprobe[index].state == SKL_PROBE_STATE_EXT_NONE)) {
 		/* cache extractor params */
-		pconfig->eprobe[index].operation = ap->is_connect;
-		pconfig->eprobe[index].purpose = ap->is_ext_inj;
-		pconfig->eprobe[index].probe_point_id = ap->params;
+		pconfig->eprobe[index].operation = ap->operation;
+		pconfig->eprobe[index].purpose = ap->purpose;
+		pconfig->eprobe[index].probe_point_id = ap->probe_point_id;
 
 		/* Below check ensures that atleast one extractor stream is in progress
 		in which case the driver can send the CONNECT IPC */
 		if (pconfig->e_refc > 0) {
-			memcpy(&connect_point.params, &ap->params, sizeof(u32));
-			connect_point.connection = ap->is_ext_inj;
+			memcpy(&connect_point.params, &ap->probe_point_id, sizeof(u32));
+			connect_point.connection = ap->purpose;
 			connect_point.node_id = -1;
 			ret = skl_set_module_params(skl->skl_sst, (void *)&connect_point,
 				sizeof(struct probe_pt_param), SKL_PROBE_CONNECT, mconfig);
@@ -1769,10 +1769,10 @@ static int skl_probe_set_tlv_ext(struct snd_kcontrol *kcontrol)
 			pconfig->eprobe[index].state = SKL_PROBE_STATE_EXT_CONNECTED;
 			dev_dbg(dapm->dev, "eprobe[%d].state %d\n", index, pconfig->eprobe[index].state);
 		}
-	} else if ((ap->is_connect == SKL_PROBE_DISCONNECT) &&
+	} else if ((ap->operation == SKL_PROBE_DISCONNECT) &&
 			(pconfig->eprobe[index].state == SKL_PROBE_STATE_EXT_CONNECTED) &&
 			(pconfig->e_refc > 0)) {
-		disconnect_point = (int)ap->params;
+		disconnect_point = (int)ap->probe_point_id;
 		ret = skl_set_module_params(skl->skl_sst, (void *)&disconnect_point,
 			sizeof(disconnect_point), SKL_PROBE_DISCONNECT, mconfig);
 		if (ret < 0) {
@@ -1813,16 +1813,16 @@ static int skl_probe_set_tlv_inj(struct snd_kcontrol *kcontrol)
 	if (index < 0)
 		return -EINVAL;
 
-	if ((ap->is_connect == SKL_PROBE_CONNECT) &&
+	if ((ap->operation == SKL_PROBE_CONNECT) &&
 		(pconfig->iprobe[index].state == SKL_PROBE_STATE_INJ_NONE)) {
 		/* cache injector params */
-		pconfig->iprobe[index].operation = ap->is_connect;
-		pconfig->iprobe[index].purpose = ap->is_ext_inj;
-		pconfig->iprobe[index].probe_point_id = ap->params;
-	} else if ((ap->is_connect == SKL_PROBE_DISCONNECT) &&
+		pconfig->iprobe[index].operation = ap->operation;
+		pconfig->iprobe[index].purpose = ap->purpose;
+		pconfig->iprobe[index].probe_point_id = ap->probe_point_id;
+	} else if ((ap->operation == SKL_PROBE_DISCONNECT) &&
 		(pconfig->iprobe[index].state == SKL_PROBE_STATE_INJ_CONNECTED) &&
 		(pconfig->i_refc > 0)) {
-		disconnect_point = (int)ap->params;
+		disconnect_point = (int)ap->probe_point_id;
 		ret = skl_set_module_params(skl->skl_sst, (void *)&disconnect_point,
 			sizeof(disconnect_point), SKL_PROBE_DISCONNECT, mconfig);
 		if (ret < 0) {
@@ -1853,22 +1853,22 @@ static int skl_tplg_tlv_probe_set(struct snd_kcontrol *kcontrol,
 	if (data) {
 		offset = (unsigned char *)data;
 		offset += 2 * sizeof(u32); /* To skip TLV heeader */
-		if (copy_from_user(&ap->is_connect,
-					offset, sizeof(ap->is_connect)))
+		if (copy_from_user(&ap->operation,
+					offset, sizeof(ap->operation)))
 			return -EIO;
 
-		offset += sizeof(ap->is_connect);
-		if (copy_from_user(&ap->is_ext_inj,
-					offset, sizeof(ap->is_ext_inj)))
+		offset += sizeof(ap->operation);
+		if (copy_from_user(&ap->purpose,
+					offset, sizeof(ap->purpose)))
 			return -EIO;
 
-		offset += sizeof(ap->is_ext_inj);
-		if (copy_from_user(&ap->params,
-					offset, sizeof(ap->params)))
+		offset += sizeof(ap->purpose);
+		if (copy_from_user(&ap->probe_point_id,
+					offset, sizeof(ap->probe_point_id)))
 			return -EIO;
 
-		dev_dbg(dapm->dev, "connect state = %d, extract_inject = %d, params = %d\n",
-						ap->is_connect, ap->is_ext_inj, ap->params);
+		dev_dbg(dapm->dev, "operation = %d, purpose = %d, probe_point_id = %d\n",
+						ap->operation, ap->purpose, ap->probe_point_id);
 
 		/* In the case of extraction, additional probe points can be set when
 		 * the stream is in progress and the driver can immediately send the
@@ -1877,7 +1877,7 @@ static int skl_tplg_tlv_probe_set(struct snd_kcontrol *kcontrol,
 		 * control has to be opened. Hence below implementation ensures that the
 		 * connect IPC is sent only in case of extractor.
 		 */
-		switch (ap->is_ext_inj) {
+		switch (ap->purpose) {
 		case SKL_PROBE_EXTRACT:
 			ret = skl_probe_set_tlv_ext(kcontrol);
 			break;
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 4f63712..f01ce63 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -356,13 +356,15 @@ struct skl_algo_data {
 };
 
 struct skl_probe_data {
-	u8 is_connect;
-	u32 is_ext_inj;
-	u32 params;
+	/* connect or disconnect */
+	u8 operation;
+	/* extractor or injector or inject-reextract */
+	u32 purpose;
+	u32 probe_point_id;
 	u32 node_id;
 } __packed;
 
-struct skl_attach_probe_dma {
+struct skl_probe_attach_inj_dma {
 	union skl_connector_node_id node_id;
 	u32 dma_buff_size;
 } __packed;
@@ -440,14 +442,14 @@ int skl_init_probe_module(struct skl_sst *ctx, struct skl_module_cfg *module_con
 
 int skl_uninit_probe_module(struct skl_sst *ctx, struct skl_module_cfg *module_config);
 
-int skl_get_probe_index(struct snd_soc_dai *dai,
+int skl_probe_get_index(struct snd_soc_dai *dai,
 				struct skl_probe_config *pconfig);
 
-int skl_tplg_probe_attach_injector_dma(struct snd_soc_dapm_widget *w,
+int skl_probe_attach_inj_dma(struct snd_soc_dapm_widget *w,
 					struct skl_sst *ctx, int index);
 int skl_probe_detach_inj_dma(struct skl_sst *ctx,
 					struct snd_soc_dapm_widget *w, int index);
-int skl_tplg_set_probe_params(struct snd_soc_dapm_widget *w,
+int skl_probe_point_set_config(struct snd_soc_dapm_widget *w,
 						struct skl_sst *ctx, int direction,
 						struct snd_soc_dai *dai);
 int skl_tplg_set_module_params(struct snd_soc_dapm_widget *w,
@@ -458,7 +460,7 @@ int skl_bind_modules(struct skl_sst *ctx, struct skl_module_cfg
 
 int skl_unbind_modules(struct skl_sst *ctx, struct skl_module_cfg
 	*src_module, struct skl_module_cfg *dst_module);
-int skl_disconnect_probe_point(struct skl_sst *ctx,
+int skl_probe_point_disconnect_ext(struct skl_sst *ctx,
 					struct snd_soc_dapm_widget *w);
 int skl_probe_point_disconnect_inj(struct skl_sst *ctx,
 					struct snd_soc_dapm_widget *w, int index);
-- 
1.7.5.4

