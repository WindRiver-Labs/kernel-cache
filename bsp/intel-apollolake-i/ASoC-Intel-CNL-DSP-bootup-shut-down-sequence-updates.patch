From 28cd0ca01b47c8e55fd23fd79d277059b197f3b5 Mon Sep 17 00:00:00 2001
From: Guneshwor Singh <guneshwor.o.singh@intel.com>
Date: Mon, 25 Apr 2016 18:59:51 +0530
Subject: [PATCH 1955/2508] ASoC: Intel: CNL: DSP bootup/shut down sequence
 updates

commit b236efd70db2b786eb6dc02456f77512506ec90e from
https://github.com/01org/linux-apollolake-i

This is the corresponding same changes done for BXT in
753ab97 ASoC: Intel: Skylake: DSP bootup/shut down sequence updates

Change-Id: I9359ac556678ba32c9acdb6d34a3af01539f8ce5
Signed-off-by: Guneshwor Singh <guneshwor.o.singh@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/8970
Reviewed-by: Shah, Hardik T <hardik.t.shah@intel.com>
Tested-by: Shah, Hardik T <hardik.t.shah@intel.com>
---
 sound/soc/intel/skylake/cnl-sst-dsp.c |  120 ++++++++++++++++-----------------
 sound/soc/intel/skylake/cnl-sst-dsp.h |   27 ++------
 sound/soc/intel/skylake/cnl-sst.c     |   62 ++++++++++++------
 3 files changed, 105 insertions(+), 104 deletions(-)

diff --git a/sound/soc/intel/skylake/cnl-sst-dsp.c b/sound/soc/intel/skylake/cnl-sst-dsp.c
index 2cfc399..66d9a4d 100644
--- a/sound/soc/intel/skylake/cnl-sst-dsp.c
+++ b/sound/soc/intel/skylake/cnl-sst-dsp.c
@@ -32,189 +32,183 @@
 #define CNL_DSP_PD_TO		50
 #define CNL_DSP_RESET_TO	50
 
-static int cnl_dsp_core_set_reset_state(struct sst_dsp  *ctx)
+static int cnl_dsp_core_set_reset_state(struct sst_dsp *ctx, unsigned core)
 {
 	int ret;
 
 	/* update bits */
 	sst_dsp_shim_update_bits_unlocked(ctx,
-			CNL_ADSP_REG_ADSPCS, CNL_ADSPCS_CRST_MASK,
-			CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK));
+			CNL_ADSP_REG_ADSPCS, CNL_ADSPCS_CRST(core),
+			CNL_ADSPCS_CRST(core));
 
 	/* poll with timeout to check if operation successful */
 	ret = sst_dsp_register_poll(ctx,
 			CNL_ADSP_REG_ADSPCS,
-			CNL_ADSPCS_CRST_MASK,
-			CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK),
+			CNL_ADSPCS_CRST(core),
+			CNL_ADSPCS_CRST(core),
 			CNL_DSP_RESET_TO,
 			"Set reset");
 	if ((sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
-				CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK)) !=
-				CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK)) {
-		dev_err(ctx->dev, "Set reset state failed\n");
+				CNL_ADSPCS_CRST(core)) !=
+				CNL_ADSPCS_CRST(core)) {
+		dev_err(ctx->dev, "DSP core %#x set reset state failed\n",
+								core);
 		ret = -EIO;
 	}
 
 	return ret;
 }
 
-static int cnl_dsp_core_unset_reset_state(struct sst_dsp  *ctx)
+static int cnl_dsp_core_unset_reset_state(struct sst_dsp *ctx, unsigned core)
 {
 	int ret;
 
 	/* update bits */
 	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
-					CNL_ADSPCS_CRST_MASK1, 0);
+					CNL_ADSPCS_CRST(core), 0);
 
 	/* poll with timeout to check if operation successful */
 	ret = sst_dsp_register_poll(ctx,
 			CNL_ADSP_REG_ADSPCS,
-			CNL_ADSPCS_CRST_MASK1,
+			CNL_ADSPCS_CRST(core),
 			0,
 			CNL_DSP_RESET_TO,
 			"Unset reset");
 
 	if ((sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
-				 CNL_ADSPCS_CRST1(1)) != 0) {
-		dev_err(ctx->dev, "Unset reset state failed\n");
+				 CNL_ADSPCS_CRST(core)) != 0) {
+		dev_err(ctx->dev, "DSP core %#x unset reset state failed\n",
+								core);
 		ret = -EIO;
 	}
 
 	return ret;
 }
 
-static bool is_cnl_dsp_core_enable(struct sst_dsp *ctx)
+static bool is_cnl_dsp_core_enable(struct sst_dsp *ctx, unsigned core)
 {
 	int val;
 	bool is_enable;
 
 	val = sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS);
 
-	is_enable = ((val & CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK)) &&
-			(val & CNL_ADSPCS_SPA(CNL_DSP_CORES_MASK)) &&
-			!(val & CNL_ADSPCS_CRST(CNL_DSP_CORES_MASK)) &&
-			!(val & CNL_ADSPCS_CSTALL(CNL_DSP_CORES_MASK)));
+	is_enable = (val & CNL_ADSPCS_CPA(core)) &&
+			(val & CNL_ADSPCS_SPA(core)) &&
+			!(val & CNL_ADSPCS_CRST(core)) &&
+			!(val & CNL_ADSPCS_CSTALL(core));
 
-	dev_dbg(ctx->dev, "DSP core is enabled=%d\n", is_enable);
 	return is_enable;
 }
 
-static int cnl_dsp_reset_core(struct sst_dsp *ctx)
+static int cnl_dsp_reset_core(struct sst_dsp *ctx, unsigned core)
 {
 	/* stall core */
-	sst_dsp_shim_write_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
-			sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
-			CNL_ADSPCS_CSTALL(CNL_DSP_CORES_MASK));
+	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
+			CNL_ADSPCS_CSTALL(core),
+			CNL_ADSPCS_CSTALL(core));
 
 	/* set reset state */
-	return cnl_dsp_core_set_reset_state(ctx);
+	return cnl_dsp_core_set_reset_state(ctx, core);
 }
 
-static int cnl_dsp_start_core(struct sst_dsp *ctx)
+static int cnl_dsp_start_core(struct sst_dsp *ctx, unsigned core)
 {
 	int ret;
 
 	/* unset reset state */
-	ret = cnl_dsp_core_unset_reset_state(ctx);
+	ret = cnl_dsp_core_unset_reset_state(ctx, core);
 	if (ret < 0) {
-		dev_dbg(ctx->dev, "dsp unset reset failed\n");
+		dev_dbg(ctx->dev, "DSP core %#x unset reset failed\n", core);
 		return ret;
 	}
 
 	/* run core */
-	dev_dbg(ctx->dev, "Unstalling core...\n");
-	/* FIXME Unstalling only one core out of 4 cores for CNL */
-	sst_dsp_shim_write_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
-			 sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
-				~CNL_ADSPCS_CSTALL1(1));
-	dev_dbg(ctx->dev, "FW Poll Status: reg=0x%#x\n",
-		sst_dsp_shim_read(ctx, CNL_ADSP_REG_ADSPCS));
-
-	/* FIXME Disabling this check since we unstalled only one core */
-
-	/* if (!is_cnl_dsp_core_enable(ctx)) {
-		cnl_dsp_reset_core(ctx);
-		dev_err(ctx->dev, "DSP core enable failed\n");
+	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
+				CNL_ADSPCS_CSTALL(core), 0);
+
+	if (!is_cnl_dsp_core_enable(ctx, core)) {
+		cnl_dsp_reset_core(ctx, core);
+		dev_err(ctx->dev, "DSP core %#x enable failed\n", core);
 		ret = -EIO;
-	} */
+	}
 
 	return ret;
 }
 
-static int cnl_dsp_core_power_up(struct sst_dsp  *ctx)
+static int cnl_dsp_core_power_up(struct sst_dsp *ctx, unsigned core)
 {
 	int ret;
 
 	/* update bits */
 	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
-		CNL_ADSPCS_SPA_MASK, CNL_ADSPCS_SPA(CNL_DSP_CORES_MASK));
+		CNL_ADSPCS_SPA(core), CNL_ADSPCS_SPA(core));
 
 	/* poll with timeout to check if operation successful */
 	ret = sst_dsp_register_poll(ctx,
 			CNL_ADSP_REG_ADSPCS,
-			CNL_ADSPCS_CPA_MASK,
-			CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK),
+			CNL_ADSPCS_CPA(core),
+			CNL_ADSPCS_CPA(core),
 			CNL_DSP_PU_TO,
 			"Power up");
 
 	if ((sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_REG_ADSPCS) &
-			CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK)) !=
-			CNL_ADSPCS_CPA(CNL_DSP_CORES_MASK)) {
-		dev_err(ctx->dev, "DSP core power up failed\n");
+			CNL_ADSPCS_CPA(core)) !=
+			CNL_ADSPCS_CPA(core)) {
+		dev_err(ctx->dev, "DSP core %#x power up failed\n", core);
 		ret = -EIO;
 	}
 
 	return ret;
 }
 
-static int cnl_dsp_core_power_down(struct sst_dsp  *ctx)
+static int cnl_dsp_core_power_down(struct sst_dsp *ctx, unsigned core)
 {
 	/* update bits */
 	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPCS,
-					CNL_ADSPCS_SPA_MASK, 0);
+					CNL_ADSPCS_SPA(core), 0);
 
 	/* poll with timeout to check if operation successful */
 	return sst_dsp_register_poll(ctx,
 			CNL_ADSP_REG_ADSPCS,
-			CNL_ADSPCS_CPA_MASK,
+			CNL_ADSPCS_CPA(core),
 			0,
 			CNL_DSP_PD_TO,
 			"Power down");
 }
 
-int cnl_dsp_enable_core(struct sst_dsp *ctx)
+int cnl_dsp_enable_core(struct sst_dsp *ctx, unsigned core)
 {
 	int ret;
 
 	/* power up */
-	ret = cnl_dsp_core_power_up(ctx);
+	ret = cnl_dsp_core_power_up(ctx, core);
 	if (ret < 0) {
-		dev_dbg(ctx->dev, "dsp core power up failed\n");
+		dev_dbg(ctx->dev, "DSP core %#x power up failed", core);
 		return ret;
 	}
 
-	return cnl_dsp_start_core(ctx);
+	return cnl_dsp_start_core(ctx, core);
 }
 
-int cnl_dsp_disable_core(struct sst_dsp *ctx)
+int cnl_dsp_disable_core(struct sst_dsp *ctx, unsigned core)
 {
 	int ret;
 
-	ret = cnl_dsp_reset_core(ctx);
+	ret = cnl_dsp_reset_core(ctx, core);
 	if (ret < 0) {
-		dev_err(ctx->dev, "dsp core reset failed\n");
+		dev_err(ctx->dev, "DSP core %#x reset failed\n", core);
 		return ret;
 	}
 
 	/* power down core*/
-	ret = cnl_dsp_core_power_down(ctx);
+	ret = cnl_dsp_core_power_down(ctx, core);
 	if (ret < 0) {
-		dev_err(ctx->dev, "dsp core power down failed\n");
+		dev_err(ctx->dev, "DSP core %#x power down failed\n", core);
 		return ret;
 	}
 
-	if (is_cnl_dsp_core_enable(ctx)) {
-		dev_err(ctx->dev, "DSP core disable failed\n");
+	if (is_cnl_dsp_core_enable(ctx, core)) {
+		dev_err(ctx->dev, "DSP core %#x disable failed\n", core);
 		ret = -EIO;
 	}
 
@@ -252,6 +246,6 @@ void cnl_dsp_free(struct sst_dsp *dsp)
 	cnl_ipc_int_disable(dsp);
 
 	free_irq(dsp->irq, dsp);
-	cnl_dsp_disable_core(dsp);
+	cnl_dsp_disable_core(dsp, SKL_DSP_CORE_MASK(0));
 }
 EXPORT_SYMBOL_GPL(cnl_dsp_free);
diff --git a/sound/soc/intel/skylake/cnl-sst-dsp.h b/sound/soc/intel/skylake/cnl-sst-dsp.h
index 974905e..bc0148f 100644
--- a/sound/soc/intel/skylake/cnl-sst-dsp.h
+++ b/sound/soc/intel/skylake/cnl-sst-dsp.h
@@ -85,37 +85,22 @@ struct sst_dsp_device;
 
 /* Core Reset - asserted high */
 #define CNL_ADSPCS_CRST_SHIFT	0
-#define CNL_ADSPCS_CRST_MASK	(CNL_DSP_CORES_MASK << CNL_ADSPCS_CRST_SHIFT)
-#define CNL_ADSPCS_CRST(x)	((x << CNL_ADSPCS_CRST_SHIFT) &		\
-					CNL_ADSPCS_CRST_MASK)
-#define CNL_ADSPCS_CRST_MASK1	(1 << CNL_ADSPCS_CRST_SHIFT)
-#define CNL_ADSPCS_CRST1(x)	((x << CNL_ADSPCS_CRST_SHIFT) &		\
-					CNL_ADSPCS_CRST_MASK1)
+#define CNL_ADSPCS_CRST(x)	(x << CNL_ADSPCS_CRST_SHIFT)
 
 /* Core run/stall - when set to '1' core is stalled */
 #define CNL_ADSPCS_CSTALL_SHIFT	8
-#define CNL_ADSPCS_CSTALL_MASK	(CNL_DSP_CORES_MASK <<	\
-					CNL_ADSPCS_CSTALL_SHIFT)
-#define CNL_ADSPCS_CSTALL(x)	((x << CNL_ADSPCS_CSTALL_SHIFT) &	\
-				CNL_ADSPCS_CSTALL_MASK)
-#define CNL_ADSPCS_CSTALL_MASK1	(1 << CNL_ADSPCS_CSTALL_SHIFT)
-#define CNL_ADSPCS_CSTALL1(x)	((x << CNL_ADSPCS_CSTALL_SHIFT) &	\
-				CNL_ADSPCS_CSTALL_MASK1)
+#define CNL_ADSPCS_CSTALL(x)	(x << CNL_ADSPCS_CSTALL_SHIFT)
 
 /* Set Power Active - when set to '1' turn cores on */
 #define CNL_ADSPCS_SPA_SHIFT	16
-#define CNL_ADSPCS_SPA_MASK	(CNL_DSP_CORES_MASK << CNL_ADSPCS_SPA_SHIFT)
-#define CNL_ADSPCS_SPA(x)	((x << CNL_ADSPCS_SPA_SHIFT) &		\
-					CNL_ADSPCS_SPA_MASK)
+#define CNL_ADSPCS_SPA(x)	(x << CNL_ADSPCS_SPA_SHIFT)
 
 /* Current Power Active - power status of cores, set by hardware */
 #define CNL_ADSPCS_CPA_SHIFT	24
-#define CNL_ADSPCS_CPA_MASK	(CNL_DSP_CORES_MASK << CNL_ADSPCS_CPA_SHIFT)
-#define CNL_ADSPCS_CPA(x)	((x << CNL_ADSPCS_CPA_SHIFT) &		\
-					CNL_ADSPCS_CPA_MASK)
+#define CNL_ADSPCS_CPA(x)	(x << CNL_ADSPCS_CPA_SHIFT)
 
-int cnl_dsp_enable_core(struct sst_dsp *ctx);
-int cnl_dsp_disable_core(struct sst_dsp *ctx);
+int cnl_dsp_enable_core(struct sst_dsp *ctx, unsigned core);
+int cnl_dsp_disable_core(struct sst_dsp *ctx, unsigned core);
 irqreturn_t cnl_dsp_sst_interrupt(int irq, void *dev_id);
 void cnl_dsp_free(struct sst_dsp *dsp);
 
diff --git a/sound/soc/intel/skylake/cnl-sst.c b/sound/soc/intel/skylake/cnl-sst.c
index 2f3603c..5d90a7a 100644
--- a/sound/soc/intel/skylake/cnl-sst.c
+++ b/sound/soc/intel/skylake/cnl-sst.c
@@ -184,7 +184,7 @@ static int cnl_prepare_fw(struct sst_dsp *ctx, const void *fwdata,
 			CNL_ADSP_REG_HIPCIDR_BUSY |
 			CNL_IPC_PURGE_FW | (stream_tag - 1));
 
-	ret = cnl_dsp_enable_core(ctx);
+	ret = cnl_dsp_enable_core(ctx, SKL_DSP_CORE_MASK(0));
 	if (ret < 0) {
 		dev_err(ctx->dev, "Boot dsp core failed ret: %d\n", ret);
 		ret = -EIO;
@@ -234,7 +234,7 @@ static int cnl_prepare_fw(struct sst_dsp *ctx, const void *fwdata,
 
 	return 0;
 base_fw_load_failed:
-	cnl_dsp_disable_core(ctx);
+	cnl_dsp_disable_core(ctx, SKL_DSP_CORE_MASK(0));
 	ctx->dsp_ops.cleanup(ctx->dev, &ctx->dmab, stream_tag);
 #if IS_ENABLED(CONFIG_SND_SOC_INTEL_CNL_FPGA)
 	cnl_fpga_free_imr(ctx);
@@ -301,7 +301,7 @@ static int cnl_load_base_firmware(struct sst_dsp *ctx)
 					msecs_to_jiffies(SKL_IPC_BOOT_MSECS));
 		if (ret == 0) {
 			dev_err(ctx->dev, "DSP boot failed, FW Ready timed-out\n");
-			cnl_dsp_disable_core(ctx);
+			cnl_dsp_disable_core(ctx, SKL_DSP_CORE_MASK(0));
 			ret = -EIO;
 		} else {
 
@@ -319,30 +319,52 @@ static int cnl_set_dsp_D0(struct sst_dsp *ctx, unsigned int core_id)
 {
 	int ret = 0;
 	struct skl_sst *cnl = ctx->thread_context;
+	unsigned core_mask = SKL_DSP_CORE_MASK(core_id);
+	struct skl_ipc_dxstate_info dx;
 
 	cnl->boot_complete = false;
 
-	ret = cnl_dsp_enable_core(ctx);
+	ret = cnl_dsp_enable_core(ctx, core_mask);
 	if (ret < 0) {
-		dev_err(ctx->dev, "enable dsp core failed: %d\n", ret);
+		dev_err(ctx->dev, "enable DSP core %d failed: %d\n",
+			core_id, ret);
 		return ret;
 	}
 
-	/* enable interrupt */
-	cnl_ipc_int_enable(ctx);
-	cnl_ipc_op_int_enable(ctx);
+	if (core_id == 0) {
+		/* enable interrupt */
+		cnl_ipc_int_enable(ctx);
+		cnl_ipc_op_int_enable(ctx);
 
-	ret = wait_event_timeout(cnl->boot_wait, cnl->boot_complete,
+		ret = wait_event_timeout(cnl->boot_wait, cnl->boot_complete,
 					msecs_to_jiffies(SKL_IPC_BOOT_MSECS));
-	if (ret == 0) {
-		dev_err(ctx->dev, "DSP boot timeout: 0x%x\n",
-			sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_FW_STATUS));
-		cnl_dsp_disable_core(ctx);
-		return -EIO;
+		if (ret == 0) {
+			dev_err(ctx->dev,
+				"DSP boot timeout: Status=%#x Error=%#x\n",
+				sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_FW_STATUS),
+				sst_dsp_shim_read_unlocked(ctx, CNL_ADSP_ERROR_CODE));
+			goto err;
+		}
+	} else {
+		dx.core_mask = core_mask;
+		dx.dx_mask = core_mask;
+
+		ret = skl_ipc_set_dx(&cnl->ipc,
+				     CNL_INSTANCE_ID,
+				     CNL_BASE_FW_MODULE_ID,
+				     &dx);
+		if (ret < 0) {
+			dev_err(ctx->dev, "Failed to set DSP core %d to D0\n",
+								core_id);
+			goto err;
+		}
 	}
 
 	ctx->core_info.core_state[core_id] = SKL_DSP_RUNNING;
 	return 0;
+err:
+	cnl_dsp_disable_core(ctx, core_mask);
+	return ret;
 }
 
 static int cnl_set_dsp_D3(struct sst_dsp *ctx, unsigned int core_id)
@@ -350,10 +372,9 @@ static int cnl_set_dsp_D3(struct sst_dsp *ctx, unsigned int core_id)
 	int ret;
 	struct skl_ipc_dxstate_info dx;
 	struct skl_sst *cnl = ctx->thread_context;
+	unsigned core_mask = SKL_DSP_CORE_MASK(core_id);
 
-	dev_dbg(ctx->dev, "In %s:\n", __func__);
-
-	dx.core_mask = CNL_DSP_CORES_MASK;
+	dx.core_mask = core_mask;
 	dx.dx_mask = SKL_IPC_D3_MASK;
 	ret = skl_ipc_set_dx(&cnl->ipc,
 			     CNL_INSTANCE_ID,
@@ -361,12 +382,13 @@ static int cnl_set_dsp_D3(struct sst_dsp *ctx, unsigned int core_id)
 			     &dx);
 	if (ret < 0)
 		dev_err(ctx->dev,
-			"Failed to set DSP to D3:core id = %d;Continue reset\n",
+			"Failed to set DSP core %d to D3; continue reset\n",
 			core_id);
 
-	ret = cnl_dsp_disable_core(ctx);
+	ret = cnl_dsp_disable_core(ctx, core_mask);
 	if (ret < 0) {
-		dev_err(ctx->dev, "disable dsp core failed: %d\n", ret);
+		dev_err(ctx->dev, "Disable DSP core %d failed: %d\n",
+			core_id, ret);
 		return -EIO;
 	}
 
-- 
1.7.5.4

