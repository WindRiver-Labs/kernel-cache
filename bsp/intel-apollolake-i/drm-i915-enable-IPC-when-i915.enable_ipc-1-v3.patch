From 1ded8714d1ab9817180f0d0c5330cd2e2c8dff68 Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Tue, 19 Jan 2016 17:43:50 -0800
Subject: [PATCH 1247/2508] drm/i915: enable IPC when i915.enable_ipc=1 (v3)

commit 4ca3ba8a53c46de54d94bad83fefec15f5ee52a0 from
https://github.com/01org/linux-apollolake-i

Enabling IPC (Isochronous Priority Control) is
recommended as a fix for display corruption and
flickering issues found on APL-I Silicons.

Until this becomes our offical fix for issues,
we keep this as an optional configuration
that can be conditionally enabled.

To make it enabled, i915.enable_ipc=1 should be
provided as one of boot command parameters.
It is turned off by default.

v2: fixed syntax
v3: IPC can only be enabled on BXT

Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/i915/i915_params.c |    5 +++++
 drivers/gpu/drm/i915/i915_params.h |    1 +
 drivers/gpu/drm/i915/i915_reg.h    |    1 +
 drivers/gpu/drm/i915/intel_pm.c    |    9 +++++++++
 4 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index 800b67f..30fd64d 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -59,6 +59,7 @@ struct i915_params i915 __read_mostly = {
 	.enable_dp_mst = true,
 	.inject_load_failure = 0,
 	.hpd_sense_invert = -1,
+	.enable_ipc = 0,
 };
 
 module_param_named(modeset, i915.modeset, int, 0400);
@@ -214,3 +215,7 @@ MODULE_PARM_DESC(inject_load_failure,
 module_param_named_unsafe(hpd_sense_invert, i915.hpd_sense_invert, int, 0400);
 MODULE_PARM_DESC(hpd_sense_invert,
 		 "Invert HPD sense (-1=auto [default], 1=Invert, 0=Do not invert)");
+
+module_param_named_unsafe(enable_ipc, i915.enable_ipc, bool, 0400);
+MODULE_PARM_DESC(enable_ipc,
+		 "Enable Isochronous Priority Control (default: false)");
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index 906ae0d..fc7092c 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -62,6 +62,7 @@ struct i915_params {
 	bool verbose_state_checks;
 	bool nuclear_pageflip;
 	bool enable_dp_mst;
+	bool enable_ipc;
 };
 
 extern struct i915_params i915 __read_mostly;
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 95ea324..daf7a8e 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -6001,6 +6001,7 @@ enum skl_disp_power_wells {
 #define  DISP_FBC_WM_DIS		(1<<15)
 #define DISP_ARB_CTL2	_MMIO(0x45004)
 #define  DISP_DATA_PARTITION_5_6	(1<<6)
+#define  DISP_ENABLE_IPC		(1<<3)
 #define DBUF_CTL	_MMIO(0x45008)
 #define  DBUF_POWER_REQUEST		(1<<31)
 #define  DBUF_POWER_STATE		(1<<30)
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 79cd5f8..52b90e5 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -4145,10 +4145,19 @@ void ilk_wm_get_hw_state(struct drm_device *dev)
  */
 void intel_update_watermarks(struct drm_crtc *crtc)
 {
+	struct drm_device *dev = crtc->dev;
 	struct drm_i915_private *dev_priv = crtc->dev->dev_private;
 
 	if (dev_priv->display.update_wm)
 		dev_priv->display.update_wm(crtc);
+
+	/*
+	 * BXT: IPC can be enabled optionally for test purpose
+	 * now to address display flickering and/or corruption.
+	 */
+	if (IS_BROXTON(dev) && i915.enable_ipc)
+		I915_WRITE(DISP_ARB_CTL2,
+			I915_READ(DISP_ARB_CTL2) | DISP_ENABLE_IPC);
 }
 
 /*
-- 
1.7.5.4

