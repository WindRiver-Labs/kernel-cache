From 0283dd7f3aa5e6d5c22c698fcc3402629db6e681 Mon Sep 17 00:00:00 2001
From: Damien Lespiau <damien.lespiau@intel.com>
Date: Fri, 12 Feb 2016 15:45:31 -0800
Subject: [PATCH 4436/4706] drm: Introduce the blend-func property (v3)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit 883b6b67d822e45ef9cac6f37142698bf4f52293 from
git://git.yoctoproject.org/linux-yocto-4.1

We'd like to be able to program the blending modes of display planes.
Ville suggested to use something similar to the GL blend states, which
does seem like a good idea.

For now, we only consider blend factors, but room is left for
extensions: blend equation, separate rgb/alpha blend factors, blend
color.

V2: Added the belnd func property support in get property.

v3 (by Matt):
 - Move checking to intel_plane_atomic_check()
 - Reject garbage bits in the blending function value
 - Add DRM_DEBUG_KMS() messages on check failures
 - Make property atomic-only

Suggested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
Signed-off-by: Vandita Kulkarni <vandita.kulkarni@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/drm_atomic.c |    4 ++++
 drivers/gpu/drm/drm_crtc.c   |    6 ++++++
 include/drm/drm_blend.h      |   13 +++++++++++++
 include/drm/drm_crtc.h       |    5 +++++
 include/drm/drm_plane.h      |    7 +++++++
 5 files changed, 35 insertions(+), 0 deletions(-)

diff --git a/drivers/gpu/drm/drm_atomic.c b/drivers/gpu/drm/drm_atomic.c
index 70fdc18..acc6340 100644
--- a/drivers/gpu/drm/drm_atomic.c
+++ b/drivers/gpu/drm/drm_atomic.c
@@ -720,6 +720,8 @@ int drm_atomic_plane_set_property(struct drm_plane *plane,
 		state->rotation = val;
 	} else if (property == plane->zpos_property) {
 		state->zpos = val;
+	} else if (property == config->prop_blend_func) {
+		state->blend_mode.func = val;
 	} else if (plane->funcs->atomic_set_property) {
 		return plane->funcs->atomic_set_property(plane, state,
 				property, val);
@@ -778,6 +780,8 @@ drm_atomic_plane_get_property(struct drm_plane *plane,
 		*val = state->rotation;
 	} else if (property == plane->zpos_property) {
 		*val = state->zpos;
+	} else if (property == config->prop_blend_func) {
+		*val = state->blend_mode.func;
 	} else if (plane->funcs->atomic_get_property) {
 		return plane->funcs->atomic_get_property(plane, state, property, val);
 	} else {
diff --git a/drivers/gpu/drm/drm_crtc.c b/drivers/gpu/drm/drm_crtc.c
index 2d7bedf..681f969 100644
--- a/drivers/gpu/drm/drm_crtc.c
+++ b/drivers/gpu/drm/drm_crtc.c
@@ -419,6 +419,12 @@ static int drm_mode_create_standard_properties(struct drm_device *dev)
 		return -ENOMEM;
 	dev->mode_config.gamma_lut_size_property = prop;
 
+	prop = drm_property_create_range(dev, DRM_MODE_PROP_ATOMIC,
+					 "blend_func", 0, U32_MAX);
+	if (!prop)
+		return -ENOMEM;
+	dev->mode_config.prop_blend_func = prop;
+
 	return 0;
 }
 
diff --git a/include/drm/drm_blend.h b/include/drm/drm_blend.h
index 1f23dcb..0b657a0 100644
--- a/include/drm/drm_blend.h
+++ b/include/drm/drm_blend.h
@@ -146,4 +146,17 @@ drm_rgba_bits(struct drm_rgba c, unsigned compshift, unsigned bits) {
 #define DRM_RGBA_BLUEBITS(c, bits)  drm_rgba_bits(c, 16, bits)
 #define DRM_RGBA_ALPHABITS(c, bits) drm_rgba_bits(c, 0, bits)
 
+enum drm_blend_factor {
+	DRM_BLEND_FACTOR_AUTO,
+	DRM_BLEND_FACTOR_ZERO,
+	DRM_BLEND_FACTOR_ONE,
+	DRM_BLEND_FACTOR_SRC_ALPHA,
+	DRM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
+};
+
+#define DRM_BLEND_FUNC(src_factor, dst_factor)		\
+	(DRM_BLEND_FACTOR_##src_factor << 16 | DRM_BLEND_FACTOR_##dst_factor)
+#define DRM_BLEND_FUNC_SRC_FACTOR(val)	(((val) >> 16) & 0xffff)
+#define DRM_BLEND_FUNC_DST_FACTOR(val)	((val) & 0xffff)
+
 #endif
diff --git a/include/drm/drm_crtc.h b/include/drm/drm_crtc.h
index 9efec24..cb31603 100644
--- a/include/drm/drm_crtc.h
+++ b/include/drm/drm_crtc.h
@@ -1188,6 +1188,11 @@ struct drm_mode_config {
 	struct drm_property *prop_background_color;
 
 	/**
+	 * @prop_blend_func: GL-style plane blending factors
+	 */
+	struct drm_property *prop_blend_func;
+
+	/**
 	 * @dvi_i_subconnector_property: Optional DVI-I property to
 	 * differentiate between analog or digital mode.
 	 */
diff --git a/include/drm/drm_plane.h b/include/drm/drm_plane.h
index 8b4dc62..c2770b2 100644
--- a/include/drm/drm_plane.h
+++ b/include/drm/drm_plane.h
@@ -29,6 +29,10 @@
 
 struct drm_crtc;
 
+struct drm_blend_mode {
+	uint64_t func;
+};
+
 /**
  * struct drm_plane_state - mutable plane state
  * @plane: backpointer to the plane
@@ -78,6 +82,9 @@ struct drm_plane_state {
 	/* Plane rotation */
 	unsigned int rotation;
 
+	/* GL-style plane blending factors */
+	struct drm_blend_mode blend_mode;
+
 	/* Plane zpos */
 	unsigned int zpos;
 	unsigned int normalized_zpos;
-- 
1.7.5.4

