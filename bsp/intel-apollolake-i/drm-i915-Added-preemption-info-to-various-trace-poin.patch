From de8c9360424bba8ad3c25f11cfdabebe1f0e3094 Mon Sep 17 00:00:00 2001
From: John Harrison <John.C.Harrison@Intel.com>
Date: Fri, 8 Apr 2016 13:53:28 -0700
Subject: [PATCH 1374/2508] drm/i915: Added preemption info to various trace
 points

commit 81943d6457127c612e1f8aa830dec953b5bd5ae2 from
https://github.com/01org/linux-apollolake-i

v2: Fixed a typo (and improved the names in general). Updated for
changes to notify() code.

For: VIZ-2021
Signed-off-by: Dave Gordon <david.s.gordon@intel.com>
Signed-off-by: Jeff McGee <jeff.mcgee@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/i915/i915_gem.c       |    6 ++++--
 drivers/gpu/drm/i915/i915_scheduler.c |    2 +-
 drivers/gpu/drm/i915/i915_trace.h     |   30 +++++++++++++++++++-----------
 3 files changed, 24 insertions(+), 14 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index f32291b..a5f7157 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -2952,7 +2952,7 @@ void i915_gem_request_notify(struct intel_engine_cs *engine, bool fence_locked)
 	u32 seqno;
 
 	if (list_empty(&engine->fence_signal_list)) {
-		trace_i915_gem_request_notify(engine, 0);
+		trace_i915_gem_request_notify(engine, 0, 0, 0);
 		return;
 	}
 
@@ -2964,7 +2964,7 @@ void i915_gem_request_notify(struct intel_engine_cs *engine, bool fence_locked)
 	 * It can never lead to not processing work that does need to happen.
 	 */
 	seqno = engine->get_seqno(engine, false);
-	trace_i915_gem_request_notify(engine, seqno);
+	trace_i915_gem_request_notify(engine, seqno, 0, 0);
 
 	/* Is there anything new to process? */
 	if ((seqno == engine->last_irq_seqno) &&
@@ -3021,6 +3021,8 @@ void i915_gem_request_notify(struct intel_engine_cs *engine, bool fence_locked)
 						I915_PREEMPTIVE_ACTIVE_SEQNO);
 		preempt_done = intel_read_status_page(engine,
 						I915_PREEMPTIVE_DONE_SEQNO);
+		trace_i915_gem_request_notify(engine, seqno, preempt_start,
+					      preempt_done);
 
 		/*
 		 * A preemption request leaves both ACTIVE and DONE set to the
diff --git a/drivers/gpu/drm/i915/i915_scheduler.c b/drivers/gpu/drm/i915/i915_scheduler.c
index 251e007..47eee07 100644
--- a/drivers/gpu/drm/i915/i915_scheduler.c
+++ b/drivers/gpu/drm/i915/i915_scheduler.c
@@ -1001,7 +1001,7 @@ bool i915_scheduler_notify_request(struct drm_i915_gem_request *req,
 	unsigned long flags;
 	bool result;
 
-	trace_i915_scheduler_landing(req);
+	trace_i915_scheduler_landing(req, preempt);
 
 	spin_lock_irqsave(&scheduler->lock, flags);
 
diff --git a/drivers/gpu/drm/i915/i915_trace.h b/drivers/gpu/drm/i915/i915_trace.h
index c4ce3fa..07626f7 100644
--- a/drivers/gpu/drm/i915/i915_trace.h
+++ b/drivers/gpu/drm/i915/i915_trace.h
@@ -561,13 +561,16 @@ DEFINE_EVENT(i915_gem_request, i915_gem_request_add,
 );
 
 TRACE_EVENT(i915_gem_request_notify,
-	    TP_PROTO(struct intel_engine_cs *engine, uint32_t seqno),
-	    TP_ARGS(engine, seqno),
+	    TP_PROTO(struct intel_engine_cs *engine, uint32_t seqno,
+		     uint32_t preempt_start, uint32_t preempt_done),
+	    TP_ARGS(engine, seqno, preempt_start, preempt_done),
 
 	    TP_STRUCT__entry(
 			     __field(u32, dev)
 			     __field(u32, ring)
 			     __field(u32, seqno)
+			     __field(u32, preempt_start)
+			     __field(u32, preempt_done)
 			     __field(bool, is_empty)
 			     ),
 
@@ -575,12 +578,15 @@ TRACE_EVENT(i915_gem_request_notify,
 			   __entry->dev = engine->dev->primary->index;
 			   __entry->ring = engine->id;
 			   __entry->seqno = seqno;
+			   __entry->preempt_start = preempt_start;
+			   __entry->preempt_done = preempt_done;
 			   __entry->is_empty =
 					list_empty(&engine->fence_signal_list);
 			   ),
 
-	    TP_printk("dev=%u, ring=%u, seqno=%u, empty=%d",
+	    TP_printk("dev=%u, ring=%u, seqno=%u, preempt_start=%u, preempt_done=%u, empty=%d",
 		      __entry->dev, __entry->ring, __entry->seqno,
+		      __entry->preempt_start, __entry->preempt_done,
 		      __entry->is_empty)
 );
 
@@ -880,27 +886,29 @@ TRACE_EVENT(i915_scheduler_unfly,
 );
 
 TRACE_EVENT(i915_scheduler_landing,
-	    TP_PROTO(struct drm_i915_gem_request *req),
-	    TP_ARGS(req),
+	    TP_PROTO(struct drm_i915_gem_request *req, bool preempt),
+	    TP_ARGS(req, preempt),
 
 	    TP_STRUCT__entry(
 			     __field(u32, engine)
 			     __field(u32, uniq)
 			     __field(u32, seqno)
 			     __field(u32, status)
+			     __field(bool, preempt)
 			     ),
 
 	    TP_fast_assign(
-			   __entry->engine = req->engine->id;
-			   __entry->uniq   = req->uniq;
-			   __entry->seqno  = req->seqno;
-			   __entry->status = req->scheduler_qe ?
+			   __entry->engine  = req->engine->id;
+			   __entry->uniq    = req->uniq;
+			   __entry->seqno   = req->seqno;
+			   __entry->status  = req->scheduler_qe ?
 						req->scheduler_qe->status : ~0U;
+			   __entry->preempt = preempt;
 			   ),
 
-	    TP_printk("engine=%d, uniq=%d, seqno=%d, status=%d",
+	    TP_printk("engine=%d, uniq=%d, seqno=%d, status=%d, preempt=%d",
 		      __entry->engine, __entry->uniq, __entry->seqno,
-		      __entry->status)
+		      __entry->status, __entry->preempt)
 );
 
 TRACE_EVENT(i915_scheduler_remove,
-- 
1.7.5.4

