From 93c314604065b2f52d164ec3bcc94ff85a5d8b01 Mon Sep 17 00:00:00 2001
From: Yael Samet <yael.samet@intel.com>
Date: Tue, 17 Jan 2017 10:17:40 +0200
Subject: [PATCH 4673/4706] mei: dal: rename dal_read to dal_wait_for_read

commit c42d8fd1553f86bd4e49278e5a48f2e18f18e852 from
git://git.yoctoproject.org/linux-yocto-4.1

The dal_read function just waits until there is some data
in the client queue, so it's name changed to dal_wait_for_read.
The returned value chenged from ssize_t to int, it returns 0 on success,
and !0 on error.

Change-Id: Icd0d51ad330b4241d18c64d5ea4d3db62888ce8b
Signed-off-by: Yael Samet <yael.samet@intel.com>
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/dal_cdev.c  |    4 ++--
 drivers/misc/mei/dal/dal_class.c |    2 +-
 drivers/misc/mei/dal/dal_dev.h   |    2 +-
 drivers/misc/mei/dal/dal_kdi.c   |    6 +++---
 4 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/misc/mei/dal/dal_cdev.c b/drivers/misc/mei/dal/dal_cdev.c
index ad76dac..68032c5 100644
--- a/drivers/misc/mei/dal/dal_cdev.c
+++ b/drivers/misc/mei/dal/dal_cdev.c
@@ -132,11 +132,11 @@ static ssize_t dal_dev_read(struct file *fp, char __user *buf,
 {
 	struct dal_client *dc = fp->private_data;
 	struct dal_device *ddev = dc->ddev;
-	ssize_t ret;
+	int ret;
 	size_t len;
 	unsigned int copied;
 
-	ret = dal_read(dc);
+	ret = dal_wait_for_read(dc);
 
 	if (ret != 0)
 		return ret;
diff --git a/drivers/misc/mei/dal/dal_class.c b/drivers/misc/mei/dal/dal_class.c
index 1436e7b..5337b8b 100644
--- a/drivers/misc/mei/dal/dal_class.c
+++ b/drivers/misc/mei/dal/dal_class.c
@@ -487,7 +487,7 @@ write_more:
  * blocking function, it waits until the caller (dc)
  * will have data on his read_queue
  */
-ssize_t dal_read(struct dal_client *dc)
+int dal_wait_for_read(struct dal_client *dc)
 {
 	struct dal_device *ddev = dc->ddev;
 	struct device *dev = &ddev->dev;
diff --git a/drivers/misc/mei/dal/dal_dev.h b/drivers/misc/mei/dal/dal_dev.h
index 50cf933..fe1523f 100644
--- a/drivers/misc/mei/dal/dal_dev.h
+++ b/drivers/misc/mei/dal/dal_dev.h
@@ -217,7 +217,7 @@ struct dal_client {
 };
 
 ssize_t dal_write(struct dal_client *dc, size_t count, u64 seq);
-ssize_t dal_read(struct  dal_client *dc);
+int dal_wait_for_read(struct  dal_client *dc);
 
 struct device *dal_find_dev(enum dal_dev_type device_id);
 
diff --git a/drivers/misc/mei/dal/dal_kdi.c b/drivers/misc/mei/dal/dal_kdi.c
index b34a6e8..6194fd0 100644
--- a/drivers/misc/mei/dal/dal_kdi.c
+++ b/drivers/misc/mei/dal/dal_kdi.c
@@ -177,7 +177,7 @@ int kdi_recv(unsigned int handle, unsigned char *buf, size_t *count)
 	struct dal_device *ddev;
 	struct dal_client *dc;
 	struct device *dev;
-	ssize_t ret;
+	int ret;
 	size_t len;
 
 	mei_device = (enum dal_dev_type)handle;
@@ -200,7 +200,7 @@ int kdi_recv(unsigned int handle, unsigned char *buf, size_t *count)
 		goto out;
 	}
 
-	ret = dal_read(dc);
+	ret = dal_wait_for_read(dc);
 
 	if (ret)
 		goto out;
@@ -225,7 +225,7 @@ int kdi_recv(unsigned int handle, unsigned char *buf, size_t *count)
 
 	ret = kfifo_out(&dc->read_queue, buf, len);
 	if (ret != len) {
-		dev_err(&ddev->dev, "could not copy buffer: src size = %zd, dest size = %zd\n",
+		dev_err(&ddev->dev, "could not copy buffer: src size = %zd, dest size = %d\n",
 			len, ret);
 		ret = -EFAULT;
 	}
-- 
1.7.5.4

