From 175826ef5f47585ea701e8421392fd6d95363efd Mon Sep 17 00:00:00 2001
From: Mousumi Jana <mousumix.jana@intel.com>
Date: Fri, 13 May 2016 23:48:09 +0530
Subject: [PATCH 1972/2508] ASoC: Intel: Skylake: Support for DSP exception
 record dump

commit af540d373e4619f5603fe626fd04a2274b384ab7 from
https://github.com/01org/linux-apollolake-i

In the cases where the DSP encounters an exception
during its execution, the record is stored in the FW
registers window, aligned towards the end. This data
is read by the driver and is passed to the user space
using the linux coredump framework
The record contains data on a per core basis is dumped to
the userspace in two scenarios -
1. when DSP sends an EXCEPTION_CAUGHT IPC
2. during any IPC timeout

Change-Id: I3fbb50fc705fbb593f03b6a556fab26e8eed8c30
Signed-off-by: Mousumi Jana <mousumix.jana@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/9242
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>
---
 sound/soc/intel/Kconfig               |    1 +
 sound/soc/intel/skylake/skl-sst-ipc.c |   45 ++++++++++++++++++++++++++++++++-
 sound/soc/intel/skylake/skl-sst-ipc.h |   30 ++++++++++++++++++++++
 3 files changed, 75 insertions(+), 1 deletions(-)

diff --git a/sound/soc/intel/Kconfig b/sound/soc/intel/Kconfig
index 3c0d2c3..b3cf2a6 100644
--- a/sound/soc/intel/Kconfig
+++ b/sound/soc/intel/Kconfig
@@ -130,6 +130,7 @@ config SND_SOC_INTEL_SKYLAKE
 	select SND_HDA_DSP_LOADER
 	select SND_SOC_TOPOLOGY
 	select SND_SOC_INTEL_SST
+	select WANT_DEV_COREDUMP
 
 config SND_SOC_INTEL_SKL_RT286_MACH
 	tristate "ASoC Audio driver for SKL with RT286 I2S mode"
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index 3c54ea2..4a5a32d 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -19,6 +19,9 @@
 #include "skl-sst-dsp.h"
 #include "skl-sst-ipc.h"
 #include "skl-fwlog.h"
+#include <linux/slab.h>
+#include <linux/devcoredump.h>
+#include <linux/pci.h>
 
 #define IPC_IXC_STATUS_BITS		24
 
@@ -262,7 +265,9 @@ enum skl_ipc_notification_type {
 	IPC_GLB_NOTIFY_RESOURCE_EVENT = 5,
 	IPC_GLB_NOTIFY_LOG_BUFFER_STATUS = 6,
 	IPC_GLB_NOTIFY_TIMESTAMP_CAPTURED = 7,
-	IPC_GLB_NOTIFY_FW_READY = 8
+	IPC_GLB_NOTIFY_FW_READY = 8,
+	IPC_GLB_NOTIFY_FW_AUD_CLASS_RESULT = 9,
+	IPC_GLB_NOTIFY_EXCEPTION_CAUGHT = 10
 };
 
 /* Module Message Types */
@@ -279,6 +284,34 @@ enum skl_ipc_module_msg {
 	IPC_MOD_DELETE_INSTANCE = 11
 };
 
+static void fw_exception_dump_read(struct sst_dsp *dsp)
+{
+	struct skl_dsp_core_dump *coredump;
+	void *fw_reg_addr;
+	struct pci_dev *pci = to_pci_dev(dsp->dev);
+
+	coredump = vzalloc(sizeof(struct skl_dsp_core_dump));
+	if (!coredump) {
+		dev_err(dsp->dev, "failed to allocate memory\n");
+		return;
+	}
+
+	coredump->length0 = (sizeof(struct fw_version)
+		+ sizeof(struct sw_version) + sizeof(u32)*2)/sizeof(u32);
+	coredump->bus_dev_id = pci->device;
+	coredump->crash_dump_ver = 0x1;
+
+	coredump->length2 = MAX_FW_REG_SZ/sizeof(u32);
+	coredump->type2 = TYPE2_EXCEPTION;
+
+	fw_reg_addr = dsp->mailbox.in_base - dsp->addr.w0_stat_sz;
+	memcpy_fromio(coredump->fwreg, fw_reg_addr, MAX_FW_REG_SZ);
+
+	dev_coredumpv(dsp->dev, coredump,
+			sizeof(struct skl_dsp_core_dump), GFP_KERNEL);
+}
+
+
 void skl_ipc_tx_data_copy(struct ipc_message *msg, char *tx_data,
 		size_t tx_size)
 {
@@ -341,6 +374,10 @@ static int skl_ipc_tx_message(struct sst_generic_ipc *ipc, u64 header,
 
 	ret = _skl_ipc_tx_message(ipc, header, tx_data, tx_bytes, rx_data,
 			rx_bytes, wait, timeout);
+	if (ret == -ETIMEDOUT)
+		/* code for timeout exception*/
+		fw_exception_dump_read(dsp);
+
 	if (ret < 0)
 		return ret;
 
@@ -440,6 +477,12 @@ int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 			skl->notify_ops.notify_cb(skl->params);
 			break;
 
+		case IPC_GLB_NOTIFY_EXCEPTION_CAUGHT:
+			dev_err(ipc->dev, "*****Exception Detected **********\n");
+			/* hexdump of the fw core exception record reg */
+			fw_exception_dump_read(skl->dsp);
+			break;
+
 		default:
 			dev_err(ipc->dev, "ipc: Unhandled error msg=%x",
 						header.primary);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 32f400a..19fb212 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -28,6 +28,9 @@ struct sst_generic_ipc;
 
 #define NO_OF_INJECTOR 6
 #define NO_OF_EXTRACTOR 8
+#define MAX_FW_REG_SZ 4096
+#define FW_REG_SZ 1024
+#define TYPE2_EXCEPTION 2
 
 enum skl_ipc_pipeline_state {
 	PPL_INVALID_STATE =	0,
@@ -150,6 +153,33 @@ struct skl_log_state_msg {
 	struct	skl_log_state logs_core[2];
 };
 
+struct fw_version {
+	u16 major;
+	u16 minor;
+	u16 hotfix;
+	u16 build;
+} __packed;
+
+struct sw_version {
+	u16 major;
+	u16 minor;
+	u16 hotfix;
+	u16 build;
+} __packed;
+
+struct skl_dsp_core_dump {
+	u16 type0;
+	u16 length0;
+	u32 crash_dump_ver;
+	u16 bus_dev_id;
+	u16 cavs_hw_version;
+	struct fw_version fw_ver;
+	struct sw_version sw_ver;
+	u16 type2;
+	u16 length2;
+	u32 fwreg[FW_REG_SZ];
+} __packed;
+
 /* Timeout values in milliseconds for response from FW */
 #define SKL_IPC_BOOT_MSECS              3000
 #define SKL_IPC_LOAD_LIB_TIMEOUT        3000
-- 
1.7.5.4

