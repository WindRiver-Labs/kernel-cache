From 903764df4523d3a97167f2c9dbf701957fdc8fc4 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Thu, 27 Apr 2017 10:12:19 +0800
Subject: [PATCH 3/3] PM / wakeup: invoke freeze_wake() in non irq context on
 rt kernel

In freeze_wake(), several spin locks such as suspend_freeze_lock,
wait_queue_head_t.lock are used. But on a rt kernel, these locks
would become blockable, it is definitely not allowed to run in
a irq context. So we introduce a swork_event to make sure that
freeze_wake() run in a non irq context on rt kernel. This fixes
the call trace like this:
     <IRQ>  [<ffffffff81a69ff5>] dump_stack+0x54/0x6f
     [<ffffffff8107dcf7>] ___might_sleep+0xe7/0x170
     [<ffffffff81a71834>] rt_spin_lock+0x24/0x60
     [<ffffffff810a155a>] freeze_wake+0x1a/0x60
     [<ffffffff8161b435>] pm_system_wakeup+0x15/0x20
     [<ffffffff810b3fea>] irq_pm_check_wakeup+0x3a/0x50
     [<ffffffff810b0e49>] irq_may_run+0x29/0x60
     [<ffffffff810b10ec>] handle_edge_irq+0x2c/0x190
     [<ffffffff81005632>] handle_irq+0x22/0x40
     [<ffffffff81a7438b>] do_IRQ+0x5b/0x100
     [<ffffffff81a728eb>] common_interrupt+0x6b/0x6b

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/base/power/wakeup.c |   29 ++++++++++++++++++++++++++++-
 1 files changed, 28 insertions(+), 1 deletions(-)

diff --git a/drivers/base/power/wakeup.c b/drivers/base/power/wakeup.c
index 7726200..b3a95d8 100644
--- a/drivers/base/power/wakeup.c
+++ b/drivers/base/power/wakeup.c
@@ -725,11 +725,38 @@ bool pm_wakeup_pending(void)
 	return ret || pm_abort_suspend;
 }
 
-void pm_system_wakeup(void)
+static void __pm_system_wakeup(void)
 {
 	pm_abort_suspend = true;
 	freeze_wake();
 }
+
+#ifdef CONFIG_PREEMPT_RT_FULL
+static int __init pm_system_wakeup_init(void)
+{
+	BUG_ON(swork_get());
+	return 0;
+}
+core_initcall(pm_system_wakeup_init);
+
+static void _pm_system_wakeup(struct swork_event *event)
+{
+	__pm_system_wakeup();
+}
+static struct swork_event wakeup_work = {
+	.func = _pm_system_wakeup
+};
+
+void pm_system_wakeup(void)
+{
+	swork_queue(&wakeup_work);
+}
+#else
+void pm_system_wakeup(void)
+{
+	__pm_system_wakeup();
+}
+#endif
 EXPORT_SYMBOL_GPL(pm_system_wakeup);
 
 void pm_wakeup_clear(void)
-- 
1.7.5.4

