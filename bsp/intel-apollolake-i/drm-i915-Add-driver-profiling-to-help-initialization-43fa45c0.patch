From d061123aeefa0e7d8115e726771370205feca728 Mon Sep 17 00:00:00 2001
From: Bob Paauwe <bob.j.paauwe@intel.com>
Date: Wed, 9 Dec 2015 16:19:30 -0800
Subject: [PATCH 4381/4706] drm/i915: Add driver profiling to help
 initialization tuning. (v2)

commit 7463eb72108bd6199d056da22d5abc457d40ebb0 from
git://git.yoctoproject.org/linux-yocto-4.1

Add ability to get some "lite" profiling information about the
the driver load process. Add a debugfs entry that reports the time
taken by various driver activities; the driver load, the framebuffer
device initialization, the GUC firmware load and the csr firmware load.

The GUC firmware load is currently a serial in-line process so this
time is also included in the overall driver load time.

If the file is queried before all the asynchrous processes complete,
their values will be reported as 0.

v2: Added csr firmware load profile (Matt)
    Moved guc firmware load tracking closer to actual load function (Bob)

Signed-off-by: Bob Paauwe <bob.j.paauwe@intel.com>
Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
[Kevin: Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c     |   20 ++++++++++++++++++++
 drivers/gpu/drm/i915/i915_drv.c         |    5 +++++
 drivers/gpu/drm/i915/i915_drv.h         |    8 ++++++++
 drivers/gpu/drm/i915/intel_csr.c        |    2 ++
 drivers/gpu/drm/i915/intel_fbdev.c      |    6 ++++++
 drivers/gpu/drm/i915/intel_guc_loader.c |    3 +++
 6 files changed, 44 insertions(+), 0 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index 27b0e34..2d2ed88 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -2387,6 +2387,25 @@ static int i915_rps_boost_info(struct seq_file *m, void *data)
 	return 0;
 }
 
+static int i915_timing_info(struct seq_file *m, void *data)
+{
+	struct drm_info_node *node = m->private;
+	struct drm_device *dev = node->minor->dev;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	seq_printf(m, "Timing info\n");
+	seq_printf(m, "  Driver load time: %lldms\n",
+		   (dev_priv->profile.driver_load / 1000000));
+	seq_printf(m, "  Frambuffer device load time: %lldms\n",
+		   (dev_priv->profile.fbdev_load / 1000000));
+	seq_printf(m, "  GUC firmware load time: %lldms\n",
+		   (dev_priv->profile.guc_load / 1000000));
+	seq_printf(m, "  CSR firmware load time: %lldms\n",
+		   (dev_priv->profile.csr_load / 1000000));
+
+	return 0;
+}
+
 static int i915_llc(struct seq_file *m, void *data)
 {
 	struct drm_i915_private *dev_priv = node_to_i915(m->private);
@@ -5295,6 +5314,7 @@ static const struct drm_info_list i915_debugfs_list[] = {
 	{"i915_sseu_status", i915_sseu_status, 0},
 	{"i915_drrs_status", i915_drrs_status, 0},
 	{"i915_rps_boost_info", i915_rps_boost_info, 0},
+	{"i915_timing_info", i915_timing_info, 0},
 };
 #define I915_DEBUGFS_ENTRIES ARRAY_SIZE(i915_debugfs_list)
 
diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 7dbbff6..2c469e4 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -1178,6 +1178,9 @@ int i915_driver_load(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct drm_i915_private *dev_priv;
 	int ret;
+	unsigned long long start_tm;
+
+	start_tm = sched_clock();
 
 	if (i915.nuclear_pageflip)
 		driver.driver_features |= DRIVER_ATOMIC;
@@ -1243,6 +1246,8 @@ int i915_driver_load(struct pci_dev *pdev, const struct pci_device_id *ent)
 
 	intel_runtime_pm_put(dev_priv);
 
+	dev_priv->profile.driver_load = sched_clock() - start_tm;
+
 	printk(KERN_INFO "IOTG i915 forklift 2016-12-15\n");
 
 	return 0;
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 8334f3f..1689edc 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1701,6 +1701,13 @@ struct intel_pipe_crc {
 	wait_queue_head_t wq;
 };
 
+struct intel_load_profiles {
+	unsigned long long driver_load;
+	unsigned long long fbdev_load;
+	unsigned long long guc_load;
+	unsigned long long csr_load;
+};
+
 struct i915_frontbuffer_tracking {
 	spinlock_t lock;
 
@@ -1901,6 +1908,7 @@ struct drm_i915_private {
 #ifdef CONFIG_DEBUG_FS
 	struct intel_pipe_crc pipe_crc[I915_MAX_PIPES];
 #endif
+	struct intel_load_profiles profile;
 
 	/* dpll and cdclk state is protected by connection_mutex */
 	int num_shared_dpll;
diff --git a/drivers/gpu/drm/i915/intel_csr.c b/drivers/gpu/drm/i915/intel_csr.c
index 1ea0e1f..e82822e 100644
--- a/drivers/gpu/drm/i915/intel_csr.c
+++ b/drivers/gpu/drm/i915/intel_csr.c
@@ -400,6 +400,7 @@ static void csr_load_work_fn(struct work_struct *work)
 	struct intel_csr *csr;
 	const struct firmware *fw;
 	int ret;
+	unsigned long long start = sched_clock();
 
 	dev_priv = container_of(work, typeof(*dev_priv), csr.work);
 	csr = &dev_priv->csr;
@@ -426,6 +427,7 @@ static void csr_load_work_fn(struct work_struct *work)
 	}
 
 	release_firmware(fw);
+	dev_priv->profile.csr_load = sched_clock() - start;
 }
 
 /**
diff --git a/drivers/gpu/drm/i915/intel_fbdev.c b/drivers/gpu/drm/i915/intel_fbdev.c
index b7098f9..4f712cf 100644
--- a/drivers/gpu/drm/i915/intel_fbdev.c
+++ b/drivers/gpu/drm/i915/intel_fbdev.c
@@ -734,11 +734,17 @@ int intel_fbdev_init(struct drm_device *dev)
 static void intel_fbdev_initial_config(void *data, async_cookie_t cookie)
 {
 	struct intel_fbdev *ifbdev = data;
+	struct drm_i915_private *dev_priv = to_i915(ifbdev->helper.dev);
+	unsigned long long start_tm;
+
+	start_tm = sched_clock();
 
 	/* Due to peculiar init order wrt to hpd handling this is separate. */
 	if (drm_fb_helper_initial_config(&ifbdev->helper,
 					 ifbdev->preferred_bpp))
 		intel_fbdev_fini(ifbdev->helper.dev);
+
+	dev_priv->profile.fbdev_load = sched_clock() - start_tm;
 }
 
 void intel_fbdev_initial_config_async(struct drm_device *dev)
diff --git a/drivers/gpu/drm/i915/intel_guc_loader.c b/drivers/gpu/drm/i915/intel_guc_loader.c
index a9572ea..140b5ba 100644
--- a/drivers/gpu/drm/i915/intel_guc_loader.c
+++ b/drivers/gpu/drm/i915/intel_guc_loader.c
@@ -720,6 +720,7 @@ void intel_guc_init(struct drm_device *dev)
 	struct intel_guc_fw *guc_fw = &dev_priv->guc.guc_fw;
 	const char *fw_path;
 	bool is_forced_rc6 = false;
+	unsigned long long start;
 
 	/* A negative value means "use platform default" */
 	if (i915.enable_guc_loading < 0)
@@ -758,6 +759,7 @@ void intel_guc_init(struct drm_device *dev)
 	if (*fw_path == '\0')
 		return;
 
+	start = sched_clock();
 	guc_fw->guc_fw_fetch_status = GUC_FIRMWARE_PENDING;
 	DRM_DEBUG_DRIVER("GuC firmware pending, path %s\n", fw_path);
 
@@ -782,6 +784,7 @@ void intel_guc_init(struct drm_device *dev)
 		DRM_DEBUG_DRIVER("End Broxton GuC load WA: exit RC6\n");
 		I915_WRITE(GEN6_RC_STATE, I915_READ(GEN6_RC_STATE) & ~RC6_STATE);
 	}
+	dev_priv->profile.guc_load = sched_clock() - start;
 }
 
 /**
-- 
1.7.5.4

