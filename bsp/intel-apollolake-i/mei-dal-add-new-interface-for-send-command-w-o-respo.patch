From fab9d5499ef5ec2c53ecad42351e26fc4cb24079 Mon Sep 17 00:00:00 2001
From: Yael Samet <yael.samet@intel.com>
Date: Tue, 17 Jan 2017 09:56:08 +0200
Subject: [PATCH 4672/4706] mei: dal: add new interface for send command w/o
 response payload

commit d383a7bc21d6fd7b344d520b3bd1da04345658a7 from
git://git.yoctoproject.org/linux-yocto-4.1

Add simplified interface for bh commands that do not require response
payload except returned status. The new function frees the payload
buffer internally removing much of repeated boiler plate code.
The new function is called bh_cmd and old bh_cmd_transfer is renamed
to bh_request().

Change-Id: Ia4430012a1f3a9ead10af6eb1de1ca3e1e04dbb8
Signed-off-by: Yael Samet <yael.samet@intel.com>
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/bhp_impl.c    |    4 +-
 drivers/misc/mei/dal/bhp_impl.h    |    6 ++--
 drivers/misc/mei/dal/bhp_impl_ta.c |   56 ++++++++++++++++++-----------------
 3 files changed, 34 insertions(+), 32 deletions(-)

diff --git a/drivers/misc/mei/dal/bhp_impl.c b/drivers/misc/mei/dal/bhp_impl.c
index d0fd932..51b86e8 100644
--- a/drivers/misc/mei/dal/bhp_impl.c
+++ b/drivers/misc/mei/dal/bhp_impl.c
@@ -566,8 +566,8 @@ static void bh_connections_deinit(void)
 }
 
 #define MAX_RETRY_COUNT 3
-int bh_cmd_transfer(int conn_idx, void *cmd, unsigned int clen,
-		    const void *data, unsigned int dlen, u64 seq)
+int bh_request(int conn_idx, void *cmd, unsigned int clen,
+	       const void *data, unsigned int dlen, u64 seq)
 {
 	int ret;
 	u32 retry_count;
diff --git a/drivers/misc/mei/dal/bhp_impl.h b/drivers/misc/mei/dal/bhp_impl.h
index 704397d..f4bde93 100644
--- a/drivers/misc/mei/dal/bhp_impl.h
+++ b/drivers/misc/mei/dal/bhp_impl.h
@@ -164,9 +164,9 @@ void session_exit(int conn_idx, struct bh_response_record *session,
 void session_close(int conn_idx, struct bh_response_record *session,
 		   u64 seq, int unlock_session);
 
-/* send one message through mei */
-int bh_cmd_transfer(int conn_idx, void *cmd, unsigned int clen,
-		    const void *data, unsigned int dlen, u64 seq);
+/* send and receive one message through mei */
+int bh_request(int conn_idx, void *cmd, unsigned int clen,
+	       const void *data, unsigned int dlen, u64 seq);
 
 /* open vm connection for sdid and increase vm connection counter by 1 */
 int bh_do_open_vm(uuid_be sdid, int *conn_idx, int mode);
diff --git a/drivers/misc/mei/dal/bhp_impl_ta.c b/drivers/misc/mei/dal/bhp_impl_ta.c
index 63a9c8e..12813c3 100644
--- a/drivers/misc/mei/dal/bhp_impl_ta.c
+++ b/drivers/misc/mei/dal/bhp_impl_ta.c
@@ -161,6 +161,21 @@ const uuid_be *bh_open_session_ta_id(const struct bhp_command_header *hdr,
 	return &open_cmd->appid;
 }
 
+static int bh_cmd(int conn_idx,
+		  void *cmd, unsigned int cmd_len,
+		  const void *data, unsigned int data_len,
+		  u64 seq, struct bh_response_record *rr)
+{
+	int ret;
+
+	ret = bh_request(conn_idx, cmd, cmd_len, data, data_len, seq);
+
+	kfree(rr->buffer);
+	rr->buffer = NULL;
+
+	return ret;
+}
+
 
 enum bhp_vm_mode {
 	BHP_OPEN_VM_QUERY_MODE = 0,
@@ -201,8 +216,8 @@ static int bh_proxy_get_sd_by_ta(uuid_be taid, uuid_be *sdid)
 	h->id = BHP_CMD_GET_SD_BY_TA;
 	cmd->taid = taid;
 
-	ret = bh_cmd_transfer(CONN_IDX_SDM, h, sizeof(*h) + sizeof(*cmd), NULL,
-			      0, rrmap_add(CONN_IDX_SDM, &rr));
+	ret = bh_request(CONN_IDX_SDM, h, sizeof(*h) + sizeof(*cmd), NULL,
+			 0, rrmap_add(CONN_IDX_SDM, &rr));
 
 	if (!ret)
 		ret = rr.code;
@@ -241,13 +256,11 @@ static int bh_proxy_check_svl_ta_blocked_state(uuid_be taid)
 	memcpy(&cmd->taid, &taid,
 	       sizeof(struct bhp_check_svl_ta_blocked_state_cmd));
 
-	ret = bh_cmd_transfer(CONN_IDX_SDM, h, sizeof(*h) + sizeof(*cmd), NULL,
-			      0, rrmap_add(CONN_IDX_SDM, &rr));
+	ret = bh_cmd(CONN_IDX_SDM, h, sizeof(*h) + sizeof(*cmd), NULL,
+		     0, rrmap_add(CONN_IDX_SDM, &rr), &rr);
 	if (!ret)
 		ret = rr.code;
 
-	kfree(rr.buffer);
-
 	return ret;
 }
 
@@ -276,8 +289,8 @@ static int bh_proxy_listJTAPackages(int conn_idx, int *count,
 
 	h->id = BHP_CMD_LIST_TA_PACKAGES;
 
-	ret = bh_cmd_transfer(conn_idx, h, sizeof(*h), NULL, 0,
-			      rrmap_add(conn_idx, &rr));
+	ret = bh_request(conn_idx, h, sizeof(*h), NULL, 0,
+			 rrmap_add(conn_idx, &rr));
 	if (!ret)
 		ret = rr.code;
 	if (ret)
@@ -339,14 +352,12 @@ static int bh_proxy_download_javata(int conn_idx,
 	h->id = BHP_CMD_DOWNLOAD_JAVATA;
 	cmd->appid = ta_id;
 
-	ret = bh_cmd_transfer(conn_idx, h, sizeof(*h) + sizeof(*cmd), ta_pkg,
-			      pkg_len, rrmap_add(conn_idx, &rr));
+	ret = bh_cmd(conn_idx, h, sizeof(*h) + sizeof(*cmd), ta_pkg,
+		     pkg_len, rrmap_add(conn_idx, &rr), &rr);
 
 	if (!ret)
 		ret = rr.code;
 
-	kfree(rr.buffer);
-
 	return ret;
 }
 
@@ -389,15 +400,10 @@ static int bh_proxy_openjtasession(int conn_idx,
 	h->id = BHP_CMD_OPEN_JTASESSION;
 	cmd->appid = ta_id;
 
-	ret = bh_cmd_transfer(conn_idx, cmd_buf, cmd_sz,
-			      init_buffer, init_len, seq);
-
+	ret = bh_cmd(conn_idx, cmd_buf, cmd_sz, init_buffer, init_len, seq, rr);
 	if (!ret)
 		ret = rr->code;
 
-	kfree(rr->buffer);
-	rr->buffer = NULL;
-
 	if (ret == BHE_PACKAGE_NOT_FOUND) {
 		/*
 		 * VM might delete the TA pkg when no live session.
@@ -408,14 +414,11 @@ static int bh_proxy_openjtasession(int conn_idx,
 		if (ret)
 			goto out_err;
 
-		ret = bh_cmd_transfer(conn_idx, cmd_buf, cmd_sz,
-				      init_buffer, init_len, seq);
+		ret = bh_cmd(conn_idx, cmd_buf, cmd_sz, init_buffer,
+			     init_len, seq, rr);
 
 		if (!ret)
 			ret = rr->code;
-
-		kfree(rr->buffer);
-		rr->buffer = NULL;
 	}
 
 	if (ret)
@@ -554,8 +557,8 @@ int bhp_send_and_recv(const u64 handle, int command_id,
 	cmd->command = command_id;
 	cmd->outlen = *output_length;
 
-	ret = bh_cmd_transfer(conn_idx, h, sizeof(*h) + sizeof(*cmd), input,
-			      length, seq);
+	ret = bh_request(conn_idx, h, sizeof(*h) + sizeof(*cmd), input,
+			 length, seq);
 	if (!ret)
 		ret = rr->code;
 
@@ -632,8 +635,7 @@ int bhp_close_ta_session(const u64 handle)
 	h->id = BHP_CMD_CLOSE_JTASESSION;
 	cmd->ta_session_id = rr->addr;
 
-	ret = bh_cmd_transfer(conn_idx, h, sizeof(*h) + sizeof(*cmd), NULL, 0,
-			      seq);
+	ret = bh_cmd(conn_idx, h, sizeof(*h) + sizeof(*cmd), NULL, 0, seq, rr);
 
 	if (!ret)
 		ret = rr->code;
-- 
1.7.5.4

