From 8e4a6b49f67b37d3b1c2b15bf8f4bafc3adfb907 Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Wed, 24 Aug 2016 10:55:37 +0300
Subject: [PATCH 19/68] mei: dal: rename interfaces names

commit 15751fd6e64a6ec949e49b0dd5499acd4484a8cd from
git://git.yoctoproject.org/linux-yocto-4.1

Match dal interface names with actual interface names
Replace DAL_INTF_KERNEL_SPACE with  DAL_INTF_KDI
and DAL_INTF_USER_SPACE with DAL_INTF_CDEV

Change-Id: Ib1d29b305c44f1903442636a06809272b799a3e8
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/bhp_impl.c  |    4 ++--
 drivers/misc/mei/dal/dal_cdev.c  |    4 ++--
 drivers/misc/mei/dal/dal_class.c |   14 +++++++-------
 drivers/misc/mei/dal/dal_dev.h   |    8 ++++----
 drivers/misc/mei/dal/dal_kdi.c   |    6 +++---
 5 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/drivers/misc/mei/dal/bhp_impl.c b/drivers/misc/mei/dal/bhp_impl.c
index 1a8c7dd..8c85756 100644
--- a/drivers/misc/mei/dal/bhp_impl.c
+++ b/drivers/misc/mei/dal/bhp_impl.c
@@ -135,7 +135,7 @@ static int kdi_send_wrapper(unsigned int handle,
 	}
 
 	ddev = to_dal_device(dev);
-	dc = ddev->clients[DAL_INTF_KERNEL_SPACE];
+	dc = ddev->clients[DAL_INTF_KDI];
 	if (!dc) {
 		dev_err(dev, "client is NULL\n");
 		ret = BPE_INTERNAL_ERROR;
@@ -179,7 +179,7 @@ static int kdi_recv_wrapper(unsigned int handle,
 		return BPE_INTERNAL_ERROR;
 
 	ddev = to_dal_device(dev);
-	dc = ddev->clients[DAL_INTF_KERNEL_SPACE];
+	dc = ddev->clients[DAL_INTF_KDI];
 	if (!dc) {
 		dev_err(dev, "client is NULL\n");
 		ret = BPE_INTERNAL_ERROR;
diff --git a/drivers/misc/mei/dal/dal_cdev.c b/drivers/misc/mei/dal/dal_cdev.c
index 8211b5c..9754a8d 100644
--- a/drivers/misc/mei/dal/dal_cdev.c
+++ b/drivers/misc/mei/dal/dal_cdev.c
@@ -95,11 +95,11 @@ static int dal_dev_open(struct inode *inode, struct file *fp)
 	if (test_and_set_bit(DAL_DEV_OPENED, &ddev->status))
 		return -EBUSY;
 
-	ret = dal_dc_setup(ddev, DAL_INTF_USER_SPACE);
+	ret = dal_dc_setup(ddev, DAL_INTF_CDEV);
 	if (ret)
 		goto err;
 
-	fp->private_data = ddev->clients[DAL_INTF_USER_SPACE];
+	fp->private_data = ddev->clients[DAL_INTF_CDEV];
 
 	return nonseekable_open(inode, fp);
 
diff --git a/drivers/misc/mei/dal/dal_class.c b/drivers/misc/mei/dal/dal_class.c
index fddd7c0..e835fbc 100644
--- a/drivers/misc/mei/dal/dal_class.c
+++ b/drivers/misc/mei/dal/dal_class.c
@@ -400,17 +400,17 @@ static enum dal_intf get_client_by_squence_number(struct dal_device *ddev)
 {
 	struct bhp_response_header *head;
 
-	if (!ddev->clients[DAL_INTF_KERNEL_SPACE])
-		return DAL_INTF_USER_SPACE;
+	if (!ddev->clients[DAL_INTF_KDI])
+		return DAL_INTF_CDEV;
 
 	head = (struct bhp_response_header *)ddev->bh_fw_msg.msg;
 
 	dev_dbg(&ddev->dev, "msg seq = %llu", head->seq);
 
-	if (head->seq == ddev->clients[DAL_INTF_KERNEL_SPACE]->seq)
-		return DAL_INTF_KERNEL_SPACE;
+	if (head->seq == ddev->clients[DAL_INTF_KDI]->seq)
+		return DAL_INTF_KDI;
 
-	return DAL_INTF_USER_SPACE;
+	return DAL_INTF_CDEV;
 }
 
 static void dal_recv_cb(struct mei_cl_device *cldev, u32 events, void *context)
@@ -455,11 +455,11 @@ static void dal_recv_cb(struct mei_cl_device *cldev, u32 events, void *context)
 		dev_dbg(&ddev->dev, "recv_cb(): Client set by sequence number");
 		dc = ddev->clients[intf];
 	} else if (dal_msg_is_spooler(ddev->bh_fw_msg.msg)) {
-		intf = DAL_INTF_USER_SPACE;
+		intf = DAL_INTF_CDEV;
 		dev_dbg(&ddev->dev, "recv_cb(): EVENT msg received");
 		dc = ddev->clients[intf];
 	} else if (!ddev->current_read_client) {
-		intf = DAL_INTF_USER_SPACE;
+		intf = DAL_INTF_CDEV;
 		dev_dbg(&ddev->dev, "recv_cb(): EXTRA msg received - curr == NULL");
 		dc = ddev->clients[intf];
 		is_unexpected_msg = true;
diff --git a/drivers/misc/mei/dal/dal_dev.h b/drivers/misc/mei/dal/dal_dev.h
index 7f49abc..9ecaba1 100644
--- a/drivers/misc/mei/dal/dal_dev.h
+++ b/drivers/misc/mei/dal/dal_dev.h
@@ -82,12 +82,12 @@ extern struct class *dal_class;
 /**
  * enum intf_intf - represents dal interface type
  *
- * @DAL_INTF_KERNEL_SPACE:  kernel space interface
- * @DAL_INTF_USER_SPACE:  user space /dev/interface
+ * @DAL_INTF_KDI:  (kdi) kernel space interface
+ * @DAL_INTF_CDEV: char device interface
  */
 enum dal_intf {
-	DAL_INTF_KERNEL_SPACE,
-	DAL_INTF_USER_SPACE,
+	DAL_INTF_KDI,
+	DAL_INTF_CDEV,
 };
 
 /** enum dal_notify_action_type:
diff --git a/drivers/misc/mei/dal/dal_kdi.c b/drivers/misc/mei/dal/dal_kdi.c
index 2219d2a..acbfa4c 100644
--- a/drivers/misc/mei/dal/dal_kdi.c
+++ b/drivers/misc/mei/dal/dal_kdi.c
@@ -160,7 +160,7 @@ static int kdi_create_kernel_clients(void)
 			return -EFAULT;
 		}
 		ddev = to_dal_device(dev);
-		ret = dal_dc_setup(ddev, DAL_INTF_KERNEL_SPACE);
+		ret = dal_dc_setup(ddev, DAL_INTF_KDI);
 		put_device(dev);
 		if (ret)
 			return ret;
@@ -193,10 +193,10 @@ static void kdi_destroy_kernel_clients(void)
 		/* TODO: just call destroy kdic ...  */
 		ddev = to_dal_device(dev);
 		dev_dbg(&ddev->dev, "kdi_destroy_kernel_clients(): free kernel space client");
-		dc = ddev->clients[DAL_INTF_KERNEL_SPACE];
+		dc = ddev->clients[DAL_INTF_KDI];
 		kfifo_free(&dc->read_queue);
 		kfree(dc);
-		ddev->clients[DAL_INTF_KERNEL_SPACE] = NULL;
+		ddev->clients[DAL_INTF_KDI] = NULL;
 		put_device(dev);
 	}
 }
-- 
1.7.5.4

