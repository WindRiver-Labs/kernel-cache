From 04ce24df952239c075b86ae9488bdfc954e2afb6 Mon Sep 17 00:00:00 2001
From: Weifeng Voon <weifeng.voon@intel.com>
Date: Sat, 23 Jul 2016 12:12:07 +0800
Subject: [PATCH 2249/2508] x86/platform/bxt: Enable board file for APL LPSS
 PCI mode

commit 7e90c00ccb71e8e7f7ceded412319b43dc077ec3 from
https://github.com/01org/linux-apollolake-i

This patch is for registering SPI slave for APL platform: Leaf Hill,
Juniper Hill and Oxbow Hill.

Signed-off-by: Weifeng Voon <weifeng.voon@intel.com>
---
 MAINTAINERS                       |    2 +-
 arch/x86/Kconfig                  |    8 ++
 arch/x86/platform/bxt/Makefile    |    1 +
 arch/x86/platform/bxt/apl-board.c |  134 +++++++++++++++++++++++++++++++++++++
 4 files changed, 144 insertions(+), 1 deletions(-)
 create mode 100644 arch/x86/platform/bxt/apl-board.c

diff --git a/MAINTAINERS b/MAINTAINERS
index 032a7ab..1f63731 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -2302,7 +2302,7 @@ S:	Supported
 F:	drivers/pinctrl/intel/pinctrl-apl-dev.c
 F:	include/linux/pinctrl/pinctrl-apl.h
 
-BROXTON PLATFORM TESTING
+BROXTON PLATFORM BOARD FILE
 M:	Yu, Ong Hock <ong.hock.yu@intel.com>
 S:	Supported
 F:	arch/x86/platform/bxt/*
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index f5b8ad3..d4ce09c 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -1,3 +1,11 @@
+#enable SPI node
+config APL_SPI_BRD
+	bool "PCI mode SPI support on APL"
+	depends on X86_INTEL_LPSS
+	---help---
+	  This option is needed if were to use Intel Apollo Lake SPI
+	  in PCI mode.
+
 # Select 32 or 64 bit
 config 64BIT
 	bool "64-bit kernel" if ARCH = "x86"
diff --git a/arch/x86/platform/bxt/Makefile b/arch/x86/platform/bxt/Makefile
index 5990592..ee34212 100644
--- a/arch/x86/platform/bxt/Makefile
+++ b/arch/x86/platform/bxt/Makefile
@@ -1 +1,2 @@
 obj-$(CONFIG_X86_INTEL_SBI_APL) += sbi_apl.o
+obj-$(CONFIG_APL_SPI_BRD) += apl-board.o
diff --git a/arch/x86/platform/bxt/apl-board.c b/arch/x86/platform/bxt/apl-board.c
new file mode 100644
index 0000000..7b81664
--- /dev/null
+++ b/arch/x86/platform/bxt/apl-board.c
@@ -0,0 +1,134 @@
+/*
+ * Copyright (c) 2016, Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/clk.h>
+#include <linux/clkdev.h>
+#include <linux/clk-provider.h>
+#include <linux/spi/spidev.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/pxa2xx_spi.h>
+#include <linux/pwm.h>
+
+static struct pxa2xx_spi_chip chip_data = {
+	.gpio_cs = -EINVAL,
+	.dma_burst_size = 1,
+	.pio_dma_threshold = 8,
+};
+
+static struct spi_board_info apl_spi_slaves[] = {
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 1,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 2,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 2,
+		.chip_select = 0,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 2,
+		.chip_select = 1,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 2,
+		.chip_select = 2,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 3,
+		.chip_select = 0,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 3,
+		.chip_select = 1,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 50000000,
+		.bus_num = 3,
+		.chip_select = 2,
+		.controller_data = &chip_data,
+		.mode = SPI_MODE_0,
+	}
+};
+
+static int apl_spi_board_setup(void)
+{
+	int ret = -1;
+
+	/* Register the SPI devices */
+	if (!spi_register_board_info
+			(apl_spi_slaves, ARRAY_SIZE(apl_spi_slaves))) {
+		ret = 0;
+		pr_warn("\nfailed to register the SPI slaves...\n");
+	} else {
+		pr_debug("\nsuccessfully registered the SPI slaves...\n");
+	}
+	return ret;
+}
+
+static int __init apl_board_init(void)
+{
+	int ret;
+
+	pr_debug("\nregistering APL SPI devices...\n");
+	ret = apl_spi_board_setup();
+	if (ret)
+		goto exit;
+
+exit:
+	return ret;
+}
+arch_initcall(apl_board_init);
+MODULE_LICENSE("GPL v2");
-- 
1.7.5.4

