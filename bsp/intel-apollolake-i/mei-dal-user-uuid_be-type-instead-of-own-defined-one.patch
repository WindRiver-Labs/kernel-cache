From d3fe49ab3035ed5078db9613b16b9807c1fb9e45 Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Sun, 30 Oct 2016 13:55:44 +0200
Subject: [PATCH 4636/4706] mei: dal: user uuid_be type instead of own defined
 one

commit c7fd88f730153e2a50b53de4b76de8d08ccaf4e8 from
git://git.yoctoproject.org/linux-yocto-4.1

The UUID is spec defined so we can use this type also
in hardware interface.

Change-Id: I9911aa6b9035635f6f9889843180fe243eb72274
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/bh_acp_format.h |    5 +++--
 drivers/misc/mei/dal/bh_types.h      |   14 --------------
 drivers/misc/mei/dal/bhp_heci.h      |   17 ++++++++++-------
 drivers/misc/mei/dal/bhp_impl.c      |    8 ++++----
 drivers/misc/mei/dal/bhp_impl.h      |    5 +++--
 drivers/misc/mei/dal/bhp_impl_ta.c   |   29 +++++++++++++----------------
 6 files changed, 33 insertions(+), 45 deletions(-)

diff --git a/drivers/misc/mei/dal/bh_acp_format.h b/drivers/misc/mei/dal/bh_acp_format.h
index 7cacf24..2e1885d 100644
--- a/drivers/misc/mei/dal/bh_acp_format.h
+++ b/drivers/misc/mei/dal/bh_acp_format.h
@@ -61,6 +61,7 @@
 #ifndef BH_ACP_FORMAT_H
 #define BH_ACP_FORMAT_H
 
+#include <linux/uuid.h>
 #include "bh_types.h"
 
 /* make sure those limitation values are adjusted to real world */
@@ -111,7 +112,7 @@ struct ac_name {
 
 struct bh_ta_id_list {
 	u32 num;
-	struct bh_ta_id list[0];
+	uuid_be list[0];
 } __packed;
 
 /*
@@ -145,7 +146,7 @@ struct ac_pack {
 } __packed;
 
 struct ac_ins_ta_header {
-	struct bh_ta_id ta_id;
+	uuid_be ta_id;
 	u32 ta_svn;
 	u8 hash_alg_type;
 	u8 ta_reserved[3];
diff --git a/drivers/misc/mei/dal/bh_types.h b/drivers/misc/mei/dal/bh_types.h
index b428c45..cf5170e 100644
--- a/drivers/misc/mei/dal/bh_types.h
+++ b/drivers/misc/mei/dal/bh_types.h
@@ -62,25 +62,11 @@
 
 #include <linux/types.h>
 
-#define BH_GUID_LENGTH 16
 #define BH_MAX_PACK_HASH_LEN 32
-
 struct bh_pack_hash {
 	u8 data[BH_MAX_PACK_HASH_LEN];
 };
 
-struct bh_ta_id {
-	u8 data[BH_GUID_LENGTH];
-};
-
-#define BH_TAID_LEN sizeof(struct bh_ta_id)
-
-struct bh_sd_id {
-	u8 data[BH_GUID_LENGTH];
-};
-
-#define BH_SDID_LEN sizeof(struct bh_sd_id)
-
 /**
  * struct _bh_ta_install_condition_list_t:
  *	 install_condition is like properties,
diff --git a/drivers/misc/mei/dal/bhp_heci.h b/drivers/misc/mei/dal/bhp_heci.h
index df74dd8..d0cab8f 100644
--- a/drivers/misc/mei/dal/bhp_heci.h
+++ b/drivers/misc/mei/dal/bhp_heci.h
@@ -70,6 +70,9 @@
 #ifndef __BHP_HECI_H
 #define __BHP_HECI_H
 
+#include <linux/types.h>
+#include <linux/uuid.h>
+
 #include "bh_types.h"
 #include "bh_errcode.h"
 
@@ -140,12 +143,12 @@ struct bhp_response_header {
 };
 
 struct bhp_download_javata_cmd {
-	struct bh_ta_id appid;
+	uuid_be appid;
 	s8 appblob[0];
 };
 
 struct bhp_open_jtasession_cmd {
-	struct bh_ta_id appid;
+	uuid_be appid;
 	s8 buffer[0];
 };
 
@@ -161,7 +164,7 @@ struct bhp_snr_cmd {
 };
 
 struct bhp_check_svl_ta_blocked_state_cmd {
-	struct bh_ta_id taid;
+	uuid_be taid;
 };
 
 struct bhp_reset_launcher_response {
@@ -170,15 +173,15 @@ struct bhp_reset_launcher_response {
 };
 
 struct bhp_get_sd_by_ta_cmd {
-	struct bh_ta_id taid;
+	uuid_be taid;
 };
 
 struct bhp_get_sd_by_ta_response {
-	struct bh_sd_id sdid;
+	uuid_be sdid;
 };
 
 struct bhp_get_isd_response {
-	struct bh_sd_id sdid;
+	uuid_be sdid;
 };
 
 struct bhp_snr_response {
@@ -195,7 +198,7 @@ struct bhp_snr_bof_response {
 
 struct bhp_list_ta_packages_response {
 	u32 count;
-	struct bh_ta_id app_ids[0];
+	uuid_be app_ids[0];
 };
 
 #endif /* __BHP_HECI_H */
diff --git a/drivers/misc/mei/dal/bhp_impl.c b/drivers/misc/mei/dal/bhp_impl.c
index c49ce7e..63fe7a0 100644
--- a/drivers/misc/mei/dal/bhp_impl.c
+++ b/drivers/misc/mei/dal/bhp_impl.c
@@ -69,7 +69,7 @@ static u64 sequence_number = MSG_SEQ_START_NUMBER;
 static struct bh_connection_item connections[MAX_CONNECTIONS];
 
 /* the isd-id in the firmware, got during init */
-static struct bh_sd_id isd_uuid;
+static uuid_be isd_uuid;
 static struct bhp_transport bhp_transport;
 
 /*
@@ -401,7 +401,7 @@ static int bh_transport_send(unsigned int handle, const void *buffer,
 	return BH_SUCCESS;
 }
 
-int bh_do_open_vm(struct bh_sd_id sdid, int *conn_idx, int mode)
+int bh_do_open_vm(uuid_be sdid, int *conn_idx, int mode)
 {
 	if (!conn_idx)
 		return BPE_INVALID_PARAMS;
@@ -532,7 +532,7 @@ static void bh_do_connect(int conn_idx)
 	conn->handle = 0;
 	conn->conn_count = 0;
 	INIT_LIST_HEAD(&conn->rr_map_list_header);
-	memset(&conn->sdid, 0x00, sizeof(struct bh_sd_id));
+	memset(&conn->sdid, 0x00, sizeof(uuid_be));
 }
 
 static int bh_do_disconnect(int conn_idx)
@@ -555,7 +555,7 @@ static int bh_do_disconnect(int conn_idx)
 	}
 
 	INIT_LIST_HEAD(&conn->rr_map_list_header);
-	memset(&conn->sdid, 0x00, sizeof(struct bh_sd_id));
+	memset(&conn->sdid, 0x00, sizeof(uuid_be));
 
 	return BH_SUCCESS;
 }
diff --git a/drivers/misc/mei/dal/bhp_impl.h b/drivers/misc/mei/dal/bhp_impl.h
index 25df58d..b65fc154 100644
--- a/drivers/misc/mei/dal/bhp_impl.h
+++ b/drivers/misc/mei/dal/bhp_impl.h
@@ -63,6 +63,7 @@
 #include <linux/list.h>
 #include <linux/slab.h>
 #include <linux/bitops.h>
+#include <linux/uuid.h>
 
 #include "bh_types.h"
 #include "bhp_exp.h"
@@ -104,7 +105,7 @@ struct bh_connection_item {
 	unsigned int handle;
 	struct list_head rr_map_list_header;
 	unsigned int conn_count;
-	struct bh_sd_id sdid;
+	uuid_be sdid;
 };
 
 /* maximum concurrent activities on one session */
@@ -168,7 +169,7 @@ int bh_cmd_transfer(int conn_idx, void *cmd, unsigned int clen,
 		    const void *data, unsigned int dlen, u64 seq);
 
 /* open vm connection for sdid and increase vm connection counter by 1 */
-int bh_do_open_vm(struct bh_sd_id sdid, int *conn_idx, int mode);
+int bh_do_open_vm(uuid_be sdid, int *conn_idx, int mode);
 
 /* decrease vm connection counter by 1 */
 int bh_do_close_vm(int conn_idx);
diff --git a/drivers/misc/mei/dal/bhp_impl_ta.c b/drivers/misc/mei/dal/bhp_impl_ta.c
index 6f94300..faa2f03 100644
--- a/drivers/misc/mei/dal/bhp_impl_ta.c
+++ b/drivers/misc/mei/dal/bhp_impl_ta.c
@@ -131,7 +131,7 @@ session_enter_vm(u64 seq, int *conn_idx, int lock_session)
 	return rr;
 }
 
-static int bh_proxy_get_sd_by_ta(struct bh_ta_id taid, struct bh_sd_id *sdid)
+static int bh_proxy_get_sd_by_ta(uuid_be taid, uuid_be *sdid)
 {
 	int ret;
 	char cmdbuf[CMDBUF_SIZE];
@@ -173,7 +173,7 @@ cleanup:
 	return ret;
 }
 
-static int bh_proxy_check_svl_ta_blocked_state(struct bh_ta_id taid)
+static int bh_proxy_check_svl_ta_blocked_state(uuid_be taid)
 {
 	int ret;
 	char cmdbuf[CMDBUF_SIZE];
@@ -202,14 +202,14 @@ static int bh_proxy_check_svl_ta_blocked_state(struct bh_ta_id taid)
 }
 
 static int bh_proxy_listJTAPackages(int conn_idx, int *count,
-				    struct bh_ta_id **app_ids)
+				    uuid_be **app_ids)
 {
 	int ret;
 	char cmdbuf[CMDBUF_SIZE];
 	struct bhp_command_header *h = (struct bhp_command_header *) cmdbuf;
 	struct bh_response_record rr;
 	struct bhp_list_ta_packages_response *resp;
-	struct bh_ta_id *outbuf;
+	uuid_be *outbuf;
 	unsigned int i;
 
 	memset(cmdbuf, 0x00, sizeof(cmdbuf));
@@ -244,14 +244,14 @@ static int bh_proxy_listJTAPackages(int conn_idx, int *count,
 	if (!resp->count)
 		goto out;
 
-	if (rr.length != sizeof(struct bh_ta_id) *
+	if (rr.length != sizeof(uuid_be) *
 			 resp->count +
 			sizeof(struct bhp_list_ta_packages_response)) {
 		ret = BPE_MESSAGE_ILLEGAL;
 		goto out;
 	}
 
-	outbuf = kcalloc(resp->count, sizeof(struct bh_ta_id), GFP_KERNEL);
+	outbuf = kcalloc(resp->count, sizeof(uuid_be), GFP_KERNEL);
 
 	if (!outbuf) {
 		ret = BPE_OUT_OF_MEMORY;
@@ -270,7 +270,7 @@ out:
 
 static int bh_proxy_download_javata(
 		int conn_idx,
-		struct bh_ta_id ta_id,
+		uuid_be ta_id,
 		const char *ta_pkg,
 		unsigned int pkg_len)
 {
@@ -303,7 +303,7 @@ static int bh_proxy_download_javata(
 
 static int bh_proxy_openjtasession(
 		int conn_idx,
-		struct bh_ta_id ta_id,
+		uuid_be ta_id,
 		const char *init_buffer,
 		unsigned int init_len,
 		u64 *handle,
@@ -388,14 +388,13 @@ int bhp_open_ta_session(u64 *session, const char *app_id,
 			const u8 *init_buffer, size_t init_len)
 {
 	int ret;
-	struct bh_ta_id ta_id;
-	uuid_be ta_uuid;
+	uuid_be ta_id;
 	int conn_idx = 0;
 	int vm_conn_closed = 0;
-	struct bh_sd_id sdid;
+	uuid_be sdid;
 	int ta_existed = 0;
 	int count = 0;
-	struct bh_ta_id *app_ids = NULL;
+	uuid_be *app_ids = NULL;
 	int i;
 
 	if (!app_id || !session)
@@ -407,11 +406,9 @@ int bhp_open_ta_session(u64 *session, const char *app_id,
 	if (!init_buffer && init_len != 0)
 		return BPE_INVALID_PARAMS;
 
-	if (__uuid_be_to_bin(app_id, &ta_uuid))
+	if (__uuid_be_to_bin(app_id, &ta_id))
 		return BPE_INVALID_PARAMS;
 
-	memcpy(ta_id.data, ta_uuid.b, sizeof(ta_id.data));
-
 	*session = 0;
 
 	/* 1.1: get the TA's sdid */
@@ -432,7 +429,7 @@ int bhp_open_ta_session(u64 *session, const char *app_id,
 	ret = bh_proxy_listJTAPackages(conn_idx, &count, &app_ids);
 	if (ret == BH_SUCCESS) {
 		for (i = 0; i < count; i++) {
-			if (!memcmp(&ta_id, &app_ids[i], sizeof(struct bh_ta_id))) {
+			if (!uuid_be_cmp(ta_id, app_ids[i])) {
 				ta_existed = 1;
 				break;
 			}
-- 
1.7.5.4

