From 0b703bb7217684fdd1f81090409ed6f79f61bf3f Mon Sep 17 00:00:00 2001
From: Kranthi G <gudishax.kranthikumar@intel.com>
Date: Mon, 14 Dec 2015 16:18:10 +0530
Subject: [PATCH 1823/2508] ASoC: Intel: Skylake: Add support for loadable
 library

commit ff69e1aa693ca8bbb49179874a4c77b7af69ca81 from
https://github.com/01org/linux-apollolake-i

Change-Id: Ibf591a8c2950349d5acb5a8a946080aaffbb062b
Signed-off-by: Kranthi G <gudishax.kranthikumar@intel.com>
Signed-off-by: Ramesh Babu <Ramesh.Babu@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/7900
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>
---
 sound/soc/intel/skylake/bxt-sst.c            |   60 +++++++++++++++++++++++++-
 sound/soc/intel/skylake/skl-messages.c       |    3 +-
 sound/soc/intel/skylake/skl-pcm.c            |   24 +++++++++-
 sound/soc/intel/skylake/skl-sst-dsp.h        |    6 ++-
 sound/soc/intel/skylake/skl-sst-ipc.c        |   23 ++++++++++
 sound/soc/intel/skylake/skl-sst-ipc.h        |    3 +
 sound/soc/intel/skylake/skl-topology.c       |   39 +++++++++++++++++
 sound/soc/intel/skylake/skl-tplg-interface.h |   12 +++++
 sound/soc/intel/skylake/skl.c                |    7 +---
 sound/soc/intel/skylake/skl.h                |   11 +++--
 10 files changed, 171 insertions(+), 17 deletions(-)

diff --git a/sound/soc/intel/skylake/bxt-sst.c b/sound/soc/intel/skylake/bxt-sst.c
index 80453ae..82e2376 100644
--- a/sound/soc/intel/skylake/bxt-sst.c
+++ b/sound/soc/intel/skylake/bxt-sst.c
@@ -29,6 +29,7 @@
 #include "../common/sst-dsp-priv.h"
 #include "../common/sst-ipc.h"
 #include "skl-sst-ipc.h"
+#include "skl-tplg-interface.h"
 
 #define FW_ROM_INIT_DONE                0x1
 
@@ -54,6 +55,8 @@
 static int bxt_load_base_firmware(struct sst_dsp *ctx);
 static int bxt_set_dsp_D0(struct sst_dsp *ctx);
 static int bxt_set_dsp_D3(struct sst_dsp *ctx);
+static int bxt_load_library(struct sst_dsp *ctx,
+		struct skl_dfw_manifest *minfo);
 
 static unsigned int bxt_get_errorcode(struct sst_dsp *ctx)
 {
@@ -65,6 +68,7 @@ static struct skl_dsp_fw_ops bxt_fw_ops = {
 	.set_state_D3 = bxt_set_dsp_D3,
 	.load_fw = bxt_load_base_firmware,
 	.get_fw_errcode = bxt_get_errorcode,
+	.load_library = bxt_load_library,
 };
 
 static struct sst_ops skl_ops = {
@@ -82,7 +86,8 @@ static struct sst_dsp_device skl_dev = {
 };
 
 int bxt_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
-		struct skl_dsp_loader_ops dsp_ops, struct skl_sst **dsp)
+		struct skl_dsp_loader_ops dsp_ops, struct skl_sst **dsp,
+		struct skl_dfw_manifest *minfo)
 {
 	struct skl_sst *skl;
 	struct sst_dsp *sst;
@@ -131,6 +136,14 @@ int bxt_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
 		return ret;
 	}
 
+	if (minfo->lib_count > 1) {
+		ret = sst->fw_ops.load_library(sst, minfo);
+		if (ret < 0) {
+			dev_err(dev, "Load Library failed : %x", ret);
+			return ret;
+		}
+	}
+
 	if (dsp)
 		*dsp = skl;
 	dev_dbg(dev, "Exit %s\n", __func__);
@@ -138,6 +151,51 @@ int bxt_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
 }
 EXPORT_SYMBOL_GPL(bxt_sst_dsp_init);
 
+static int bxt_load_library(struct sst_dsp *ctx, struct skl_dfw_manifest *minfo)
+{
+	struct snd_dma_buffer dmab;
+	struct skl_sst *skl = ctx->thread_context;
+	const struct firmware *fw = NULL;
+	int ret = 0, i, dma_id, stream_tag;
+
+	for (i = 1; i < minfo->lib_count; i++) {
+		fw = NULL;
+		ret = request_firmware(&fw, minfo->lib[i].name, ctx->dev);
+		if (ret < 0) {
+			dev_err(ctx->dev, "Request firmware failed %d for library: %s\n", ret, minfo->lib[i].name);
+			goto load_library_failed;
+		}
+
+		dev_dbg(ctx->dev, "Starting to preapre host dma for library name \
+			: %s of size:%zx\n", minfo->lib[i].name, fw->size);
+		stream_tag = ctx->dsp_ops.prepare(ctx->dev, 0x40, fw->size,
+						&dmab);
+		if (stream_tag <= 0) {
+			dev_err(ctx->dev, "Failed to prepare DMA engine for \
+				FW loading, err: %x\n", stream_tag);
+			ret = stream_tag;
+			goto load_library_failed;
+		}
+		dma_id = stream_tag - 1;
+		memcpy(dmab.area, fw->data, fw->size);
+
+		ctx->dsp_ops.trigger(ctx->dev, true, stream_tag);
+		ret = skl_sst_ipc_load_library(&skl->ipc, dma_id, i);
+		if (ret < 0)
+			dev_err(ctx->dev, "Load Library  IPC failed: %d for library: %s\n", ret, minfo->lib[i].name);
+
+		ctx->dsp_ops.trigger(ctx->dev, false, stream_tag);
+		ctx->dsp_ops.cleanup(ctx->dev, &dmab, stream_tag);
+		release_firmware(fw);
+	}
+
+	return ret;
+
+load_library_failed:
+	release_firmware(fw);
+	return ret;
+}
+
 static int sst_bxt_prepare_fw(struct sst_dsp *ctx, const void *fwdata,
 		u32 fwsize)
 {
diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 6916576..5ad9f76 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -238,7 +238,8 @@ int skl_init_dsp(struct skl *skl)
 
 	loader_ops = dsp_ops[index].loader_ops();
 	ret = dsp_ops[index].init(bus->dev, mmio_base, irq,
-					loader_ops, &skl->skl_sst);
+		loader_ops, &skl->skl_sst, &skl->manifest);
+
 	if (ret < 0)
 		return ret;
 
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index d93771a..82cc61e 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1118,11 +1118,29 @@ static int skl_pcm_new(struct snd_soc_pcm_runtime *rtd)
 static int skl_platform_soc_probe(struct snd_soc_platform *platform)
 {
 	struct hdac_ext_bus *ebus = dev_get_drvdata(platform->dev);
+	struct hdac_bus *bus = ebus_to_hbus(ebus);
+	int ret = 0;
+	struct skl *skl = ebus_to_skl(ebus);
 
-	if (ebus->ppcap)
-		return skl_tplg_init(platform, ebus);
+	if (ebus->ppcap) {
+		ret = skl_tplg_init(platform, ebus);
+		if (ret < 0) {
+			dev_dbg(bus->dev, "error failed while initializing topology\n");
+			return ret;
+		}
 
-	return 0;
+		ret = skl_init_dsp(skl);
+		if (ret < 0) {
+			dev_dbg(bus->dev, "error failed to register dsp\n");
+			goto out_free;
+		}
+	}
+
+	return ret;
+out_free:
+	skl->init_failed = 1;
+	skl_free(ebus);
+	return ret;
 }
 
 static int skl_platform_soc_remove(struct snd_soc_platform *platform)
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index ce319a4..2a4ff71 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -23,6 +23,7 @@
 struct sst_dsp;
 struct skl_sst;
 struct sst_dsp_device;
+struct skl_dfw_manifest;
 
 /* Intel HD Audio General DSP Registers */
 #define SKL_ADSP_GEN_BASE		0x0
@@ -110,6 +111,8 @@ enum skl_dsp_states {
 struct skl_dsp_fw_ops {
 	int (*load_fw)(struct sst_dsp  *ctx);
 	/* FW module parser/loader */
+	int (*load_library)(struct sst_dsp *ctx,
+		struct skl_dfw_manifest *minfo);
 	int (*parse_fw)(struct sst_dsp *ctx);
 	int (*set_state_D0)(struct sst_dsp *ctx);
 	int (*set_state_D3)(struct sst_dsp *ctx);
@@ -165,7 +168,8 @@ int skl_dsp_boot(struct sst_dsp *ctx);
 int skl_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
 		struct skl_dsp_loader_ops dsp_ops, struct skl_sst **dsp);
 int bxt_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
-		struct skl_dsp_loader_ops dsp_ops, struct skl_sst **dsp);
+		struct skl_dsp_loader_ops dsp_ops, struct skl_sst **dsp,
+		struct skl_dfw_manifest *minfo);
 void skl_sst_dsp_cleanup(struct device *dev, struct skl_sst *ctx);
 void bxt_sst_dsp_cleanup(struct device *dev, struct skl_sst *ctx);
 
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index 523d331..54635f4 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -194,6 +194,7 @@ enum skl_ipc_glb_type {
 	IPC_GLB_GET_PPL_CONTEXT_SIZE = 21,
 	IPC_GLB_SAVE_PPL = 22,
 	IPC_GLB_RESTORE_PPL = 23,
+	IPC_GLB_LOAD_LIBRARY = 24,
 	IPC_GLB_NOTIFY = 26,
 	IPC_GLB_MAX_IPC_MSG_NUMBER = 31 /* Maximum message number */
 };
@@ -905,3 +906,25 @@ int skl_ipc_get_large_config(struct sst_generic_ipc *ipc,
 	return ret;
 }
 EXPORT_SYMBOL_GPL(skl_ipc_get_large_config);
+
+int skl_sst_ipc_load_library(struct sst_generic_ipc *ipc,
+			u8 dma_id, u8 table_id)
+{
+	struct skl_ipc_header header = {0};
+	u64 *ipc_header = (u64 *)(&header);
+	int ret = 0;
+
+	header.primary = IPC_MSG_TARGET(IPC_FW_GEN_MSG);
+	header.primary |= IPC_MSG_DIR(IPC_MSG_REQUEST);
+	header.primary |= IPC_GLB_TYPE(IPC_GLB_LOAD_LIBRARY);
+	header.primary |= IPC_MOD_INSTANCE_ID(table_id);
+	header.primary |= IPC_MOD_ID(dma_id);
+
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, 0);
+
+	if (ret < 0)
+		dev_err(ipc->dev, "ipc: load lib failed\n");
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(skl_sst_ipc_load_library);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index f1fb159..80dd4cf 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -125,6 +125,9 @@ int skl_ipc_get_large_config(struct sst_generic_ipc *ipc,
 		struct skl_ipc_large_config_msg *msg, u32 *param,
 		u32 *txparam, u32 size);
 
+int skl_sst_ipc_load_library(struct sst_generic_ipc *ipc, u8 dma_id,
+		u8 table_id);
+
 void skl_ipc_int_enable(struct sst_dsp *dsp);
 void skl_ipc_op_int_enable(struct sst_dsp *ctx);
 void skl_ipc_op_int_disable(struct sst_dsp *ctx);
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 757f07e..fb9452a 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -1483,11 +1483,50 @@ int skl_tplg_control_load(struct snd_soc_component *cmpnt,
 	return 0;
 }
 
+static int skl_manifest_load(struct snd_soc_component *cmpnt,
+				struct snd_soc_tplg_manifest *manifest)
+{
+	struct skl_dfw_manifest *minfo;
+	struct hdac_ext_bus *ebus = snd_soc_component_get_drvdata(cmpnt);
+	struct hdac_bus *bus = ebus_to_hbus(ebus);
+	struct skl *skl = ebus_to_skl(ebus);
+	int ret = 0;
+	u8 *mdata;
+
+	minfo = &skl->manifest;
+	mdata = manifest->priv.data;
+	minfo->lib_count = *mdata;
+
+	if (minfo->lib_count > HDA_MAX_LIB) {
+		dev_err(bus->dev, "Exceeding max Library count. Got:%d\n",
+				minfo->lib_count);
+		ret = -EINVAL;
+		goto exit_manifest;
+	}
+
+	mdata++;
+	minfo->lib = devm_kzalloc(bus->dev, minfo->lib_count *
+			(sizeof(struct lib_info)), GFP_KERNEL);
+
+	if (!minfo->lib) {
+		ret = -ENOMEM;
+		goto exit_manifest;
+	}
+
+	memcpy(minfo->lib, mdata, (u32) (minfo->lib_count *
+				(sizeof(struct lib_info))));
+
+exit_manifest:
+	return ret;
+}
+
+
 static struct snd_soc_tplg_ops skl_tplg_ops  = {
 	.widget_load = skl_tplg_widget_load,
 	.control_load = skl_tplg_control_load,
 	.bytes_ext_ops = skl_tlv_ops,
 	.bytes_ext_ops_count = ARRAY_SIZE(skl_tlv_ops),
+	.manifest = skl_manifest_load,
 };
 
 /* This will be read from topology manifest, currently defined here */
diff --git a/sound/soc/intel/skylake/skl-tplg-interface.h b/sound/soc/intel/skylake/skl-tplg-interface.h
index 0c591b4..f126217 100644
--- a/sound/soc/intel/skylake/skl-tplg-interface.h
+++ b/sound/soc/intel/skylake/skl-tplg-interface.h
@@ -28,6 +28,9 @@
 #define MAX_OUT_QUEUE 8
 #define SKL_MOD_NAME 40 /* Length of GUID string */
 
+#define LIB_NAME_LENGTH 512
+#define HDA_MAX_LIB    16
+
 #define SKL_UUID_STR_SZ 40
 /* Event types goes here */
 /* Reserve event type 0 for no event handlers */
@@ -228,4 +231,13 @@ struct skl_dfw_algo_data {
 	char params[0];
 } __packed;
 
+struct lib_info {
+	char name[LIB_NAME_LENGTH];
+} __packed;
+
+struct skl_dfw_manifest {
+	u8 lib_count;
+	struct lib_info *lib;
+} __packed;
+
 #endif
diff --git a/sound/soc/intel/skylake/skl.c b/sound/soc/intel/skylake/skl.c
index 8a7acae..067710e 100644
--- a/sound/soc/intel/skylake/skl.c
+++ b/sound/soc/intel/skylake/skl.c
@@ -242,7 +242,7 @@ static const struct dev_pm_ops skl_pm = {
 /*
  * destructor
  */
-static int skl_free(struct hdac_ext_bus *ebus)
+int skl_free(struct hdac_ext_bus *ebus)
 {
 	struct skl *skl  = ebus_to_skl(ebus);
 	struct hdac_bus *bus = ebus_to_hbus(ebus);
@@ -594,11 +594,6 @@ static int skl_probe(struct pci_dev *pci,
 
 	/* check if dsp is there */
 	if (ebus->ppcap) {
-		err = skl_init_dsp(skl);
-		if (err < 0) {
-			dev_dbg(bus->dev, "error failed to register dsp\n");
-			goto out_free;
-		}
 		/*TODO  machine name need to be read from DSDT entry*/
 		err = skl_machine_device_register(skl,
 						  (void *)pci_id->driver_data);
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 54c3914..25bd8ec 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -76,6 +76,7 @@ struct skl {
 	struct skl_debug *debugfs;
 	bool nhlt_override;
 	bool mod_set_get_status;
+	struct skl_dfw_manifest manifest;
 };
 
 struct platform_info {
@@ -104,9 +105,9 @@ struct skl_dsp_ops {
 	int id;
 	struct skl_dsp_loader_ops (*loader_ops)(void);
 
-	int (*init)(struct device *dev, void __iomem *mmio_base,
-			int irq, struct skl_dsp_loader_ops loader_ops,
-						struct skl_sst **skl_sst);
+	int (*init)(struct device *dev, void __iomem *mmio_base, int irq,
+		struct skl_dsp_loader_ops loader_ops, struct skl_sst **skl_sst,
+		struct skl_dfw_manifest *minfo);
 	void (*cleanup)(struct device *dev, struct skl_sst *ctx);
 };
 
@@ -122,6 +123,7 @@ int skl_init_dsp(struct skl *skl);
 int skl_free_dsp(struct skl *skl);
 int skl_suspend_dsp(struct skl *skl);
 int skl_resume_dsp(struct skl *skl);
+int skl_free(struct hdac_ext_bus *ebus);
 
 struct skl_module_cfg;
 
@@ -134,8 +136,7 @@ struct nhlt_specific_cfg
 *skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance,
 			u8 stream);
 void skl_debug_init_module(struct skl_debug *d,
-			struct snd_soc_dapm_widget *w,
-			struct skl_module_cfg *mconfig);
+	struct snd_soc_dapm_widget *w, struct skl_module_cfg *mconfig);
 #else
 
 struct skl_debug {
-- 
1.7.5.4

