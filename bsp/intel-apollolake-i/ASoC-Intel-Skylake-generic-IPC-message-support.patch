From 8f11bfb67eda8ef5c0bc5c8b3741042b3ca81191 Mon Sep 17 00:00:00 2001
From: Mousumi Jana <mousumix.jana@intel.com>
Date: Wed, 25 Nov 2015 22:52:40 +0530
Subject: [PATCH 1814/2508] ASoC: Intel: Skylake: generic IPC message support

commit 5e0ee758d03052ad10f7e0eeaf1eeb61973c3f41 from
https://github.com/01org/linux-apollolake-i

Debugfs provides an interface to send generic ipc message.
This feature can be used to send any IPC command by
passing it as a binary blob to the interface.

Change-Id: Ic712c303a8e4559e2628e7507f16828913860a26
Signed-off-by: Mousumi Jana <mousumix.jana@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/7598
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c    |  159 +++++++++++++++++++++++++++++++-
 sound/soc/intel/skylake/skl-topology.h |    7 ++
 sound/soc/intel/skylake/skl.h          |    1 +
 3 files changed, 165 insertions(+), 2 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index 414016d..eb8454c 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -20,8 +20,15 @@
 #include "skl-nhlt.h"
 #include "skl-tplg-interface.h"
 #include "skl-topology.h"
+#include "skl-sst-dsp.h"
+#include "skl-sst-ipc.h"
 
+#define MAX_SZ 1025
 #define MAX_SSP 6
+#define IPC_MOD_LARGE_CONFIG_GET 3
+#define IPC_MOD_LARGE_CONFIG_SET 4
+#define MOD_BUF1 (3 * PAGE_SIZE)
+#define MOD_BUF (2 * PAGE_SIZE)
 
 struct nhlt_blob {
 	size_t size;
@@ -37,6 +44,7 @@ struct skl_debug {
 	struct nhlt_blob ssp_blob[2*MAX_SSP];
 	struct nhlt_blob dmic_blob;
 	struct dentry *modules;
+	u32 ipc_data[MAX_SZ];
 };
 
 struct nhlt_specific_cfg
@@ -122,6 +130,154 @@ static const struct file_operations nhlt_fops = {
 	.llseek = default_llseek,
 };
 
+static ssize_t mod_control_read(struct file *file,
+			char __user *user_buf, size_t count, loff_t *ppos)
+{
+	struct skl_debug *d = file->private_data;
+	char *state;
+	char *buf1;
+	int ret;
+	unsigned int ofs = 0;
+
+	if (d->ipc_data[0] == 0) {
+		state = d->skl->mod_set_get_status ? "Fail\n" : "success\n";
+		return simple_read_from_buffer(user_buf, count, ppos,
+			state, strlen(state));
+	}
+
+	state = d->skl->mod_set_get_status ? "Fail\n" : "success\n";
+	buf1 = kzalloc(MOD_BUF1, GFP_KERNEL);
+	if (!buf1)
+		return -ENOMEM;
+
+	ret = snprintf(buf1, MOD_BUF1,
+			"%s\nLARGE PARAM DATA\n", state);
+
+	for (ofs = 0 ; ofs < d->ipc_data[0] ; ofs += 16) {
+		ret += snprintf(buf1 + ret, MOD_BUF1 - ret, "0x%.4x : ", ofs);
+		hex_dump_to_buffer(&(d->ipc_data[1]) + ofs, 16, 16, 4,
+					buf1 + ret, MOD_BUF1 - ret, 0);
+		ret += strlen(buf1 + ret);
+		if (MOD_BUF1 - ret > 0)
+			buf1[ret++] = '\n';
+	}
+
+	ret = simple_read_from_buffer(user_buf, count, ppos, buf1, ret);
+	kfree(buf1);
+	return ret;
+
+}
+
+static ssize_t mod_control_write(struct file *file,
+		const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	struct skl_debug *d = file->private_data;
+	struct mod_set_get *mod_set_get;
+	char *buf;
+	int retval, type;
+	ssize_t written;
+	u32 size, mbsz;
+	u32 *large_data;
+	int large_param_size;
+
+	struct skl_sst *ctx = d->skl->skl_sst;
+	struct skl_ipc_large_config_msg msg;
+	struct skl_ipc_header header = {0};
+	u64 *ipc_header = (u64 *)(&header);
+
+	buf = kzalloc(MOD_BUF, GFP_KERNEL);
+	written = simple_write_to_buffer(buf, MOD_BUF, ppos,
+						user_buf, count);
+	size = written;
+	print_hex_dump(KERN_DEBUG, "buf :", DUMP_PREFIX_OFFSET, 8, 4,
+			buf, size, false);
+
+	mod_set_get = (struct mod_set_get *)buf;
+	header.primary = mod_set_get->primary;
+	header.extension = mod_set_get->extension;
+
+	mbsz = mod_set_get->size - (sizeof(u32)*2);
+	print_hex_dump(KERN_DEBUG, "header mailbox:", DUMP_PREFIX_OFFSET, 8, 4,
+			mod_set_get->mailbx, size-12, false);
+	type =  ((0x1f000000) & (mod_set_get->primary))>>24;
+
+	switch (type) {
+
+	case IPC_MOD_LARGE_CONFIG_GET:
+		msg.module_id = (header.primary) & 0x0000ffff;
+		msg.instance_id = ((header.primary) & 0x00ff0000)>>16;
+		msg.large_param_id = ((header.extension) & 0x0ff00000)>>20;
+		msg.param_data_size = (header.extension) & 0x000fffff;
+		large_param_size = msg.param_data_size;
+
+		large_data = kzalloc(large_param_size, GFP_KERNEL);
+		if (!large_data)
+			return -ENOMEM;
+
+		if (mbsz)
+			retval = skl_ipc_get_large_config(&ctx->ipc, &msg,
+				large_data, &(mod_set_get->mailbx[0]), mbsz);
+		else
+			retval = skl_ipc_get_large_config(&ctx->ipc,
+					&msg, large_data, NULL, 0);
+
+		d->ipc_data[0] = msg.param_data_size;
+		memcpy(&d->ipc_data[1], large_data, msg.param_data_size);
+		break;
+
+	case IPC_MOD_LARGE_CONFIG_SET:
+		d->ipc_data[0] = 0;
+		msg.module_id = (header.primary) & 0x0000ffff;
+		msg.instance_id = ((header.primary) & 0x00ff0000)>>16;
+		msg.large_param_id = ((header.extension) & 0x0ff00000)>>20;
+		msg.param_data_size = (header.extension) & 0x000fffff;
+
+		retval = skl_ipc_set_large_config(&ctx->ipc, &msg,
+						(u32 *)(&mod_set_get->mailbx));
+		d->ipc_data[0] = 0;
+		break;
+
+	default:
+		if (mbsz)
+			retval = sst_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
+				mod_set_get->mailbx, mbsz, NULL, 0);
+
+		else
+			retval = sst_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
+				NULL, 0, NULL, 0);
+
+		d->ipc_data[0] = 0;
+		break;
+
+	}
+	if (retval)
+		d->skl->mod_set_get_status = 1;
+	else
+		d->skl->mod_set_get_status = 0;
+
+	/* Userspace has been fiddling around behind the kernel's back */
+	add_taint(TAINT_USER, LOCKDEP_NOW_UNRELIABLE);
+
+	return written;
+}
+
+static const struct file_operations set_get_ctrl_fops = {
+	.open = simple_open,
+	.read = mod_control_read,
+	.write = mod_control_write,
+	.llseek = default_llseek,
+};
+
+static int skl_init_mod_set_get(struct skl_debug *d)
+{
+	if (!debugfs_create_file("set_get_ctrl", 0644, d->modules, d,
+				 &set_get_ctrl_fops)) {
+		dev_err(d->dev, "module set get ctrl debugfs init failed\n");
+		return -EIO;
+	}
+	return 0;
+}
+
 static ssize_t nhlt_control_read(struct file *file,
 			char __user *user_buf, size_t count, loff_t *ppos)
 {
@@ -190,8 +346,6 @@ static int skl_init_nhlt(struct skl_debug *d)
 	return 0;
 }
 
-#define MOD_BUF (2 * PAGE_SIZE)
-
 static ssize_t skl_print_pins(struct skl_module_pin *m_pin, char *buf,
 				int max_pin, ssize_t ret, bool direction)
 {
@@ -335,6 +489,7 @@ struct skl_debug *skl_debugfs_init(struct skl *skl)
 	}
 
 	skl_init_nhlt(d);
+	skl_init_mod_set_get(d);
 
 	return d;
 
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 9f56023..5d635c4 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -314,6 +314,13 @@ static inline struct skl *get_skl_ctx(struct device *dev)
 	return ebus_to_skl(ebus);
 }
 
+struct mod_set_get {
+	u32 size;
+	u32 primary;
+	u32 extension;
+	u32 mailbx[1024];
+};
+
 int skl_tplg_be_update_params(struct snd_soc_dai *dai,
 	struct skl_pipe_params *params);
 void skl_tplg_set_be_dmic_config(struct snd_soc_dai *dai,
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 999623f..9f82eea 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -75,6 +75,7 @@ struct skl {
 
 	struct skl_debug *debugfs;
 	bool nhlt_override;
+	bool mod_set_get_status;
 };
 
 #define skl_to_ebus(s)	(&(s)->ebus)
-- 
1.7.5.4

