From 6e3f392af4ca8e2b3fa4b1df15de61679983cb16 Mon Sep 17 00:00:00 2001
From: Yael Samet <yael.samet@intel.com>
Date: Sun, 15 Jan 2017 10:28:47 +0200
Subject: [PATCH 4666/4706] mei: dal: refactor bhp_send_and_recv's error path

commit c50bdc1e1862d12d52d02a93222a1899d64d81a6 from
git://git.yoctoproject.org/linux-yocto-4.1

Change error path of bhp_send_and_recv function.
Use goto instead of multiple "ifs" statements

Change-Id: Id0caeb914f5cb056ab505cab3551e48af2b3998a
Signed-off-by: Yael Samet <yael.samet@intel.com>
---
 drivers/misc/mei/dal/bhp_impl_ta.c |   68 ++++++++++++++++++------------------
 1 files changed, 34 insertions(+), 34 deletions(-)

diff --git a/drivers/misc/mei/dal/bhp_impl_ta.c b/drivers/misc/mei/dal/bhp_impl_ta.c
index 810413c..018c495 100644
--- a/drivers/misc/mei/dal/bhp_impl_ta.c
+++ b/drivers/misc/mei/dal/bhp_impl_ta.c
@@ -552,60 +552,60 @@ int bhp_send_and_recv(const u64 handle, int command_id,
 
 	rr->buffer = NULL;
 	h->id = BHP_CMD_SENDANDRECV;
-
 	cmd->ta_session_id = rr->addr;
 	cmd->command = command_id;
 	cmd->outlen = *output_length;
 
 	ret = bh_cmd_transfer(conn_idx, (char *)h, sizeof(*h) + sizeof(*cmd),
 			      (char *) input, length, seq);
-
 	if (!ret)
 		ret = rr->code;
 
 	if (rr->killed)
 		ret = BHE_UNCAUGHT_EXCEPTION;
 
-	if (!ret) {
-		struct bhp_snr_response *resp = NULL;
-
-		if (rr->buffer &&
-		    rr->length >= sizeof(struct bhp_snr_response)) {
-			resp = (struct bhp_snr_response *)rr->buffer;
-			if (response_code)
-				*response_code = be32_to_cpu(resp->response);
-
-			len = rr->length - sizeof(struct bhp_snr_response);
-
-			if (len > 0) {
-				if (output && *output_length >= len) {
-					*output = kzalloc(len, GFP_KERNEL);
-					if (*output)
-						memcpy(*output,
-						       resp->buffer, len);
-					else
-						ret = -ENOMEM;
-
-				} else
-					ret = -EMSGSIZE;
-			}
+	if (ret == BHE_APPLET_SMALL_BUFFER && rr->buffer &&
+			rr->length == sizeof(struct bhp_snr_bof_response)) {
+		struct bhp_snr_bof_response *bof_resp =
+			(struct bhp_snr_bof_response *)rr->buffer;
+
+		if (response_code)
+			*response_code = be32_to_cpu(bof_resp->response);
 
-			*output_length = len;
-		} else
-			ret = -EBADMSG;
+		*output_length = be32_to_cpu(bof_resp->request_length);
+	}
 
-	} else if (ret == BHE_APPLET_SMALL_BUFFER && rr->buffer &&
-		   rr->length == sizeof(struct bhp_snr_bof_response)) {
+	if (ret)
+		goto out;
 
-		struct bhp_snr_bof_response *resp =
-				(struct bhp_snr_bof_response *)rr->buffer;
+	if (rr->buffer && rr->length >= sizeof(struct bhp_snr_response)) {
+		struct bhp_snr_response *resp =
+			(struct bhp_snr_response *)rr->buffer;
 
 		if (response_code)
 			*response_code = be32_to_cpu(resp->response);
 
-		*output_length = be32_to_cpu(resp->request_length);
-	}
+		len = rr->length - sizeof(struct bhp_snr_response);
 
+		if (*output_length < len) {
+			ret = -EMSGSIZE;
+			goto out;
+		}
+
+		if (len > 0 && output) {
+			*output = kzalloc(len, GFP_KERNEL);
+			if (!*output) {
+				ret = -ENOMEM;
+				goto out;
+			}
+			memcpy(*output, resp->buffer, len);
+		}
+
+		*output_length = len;
+	} else
+		ret = -EBADMSG;
+
+out:
 	kfree(rr->buffer);
 	rr->buffer = NULL;
 
-- 
1.7.5.4

