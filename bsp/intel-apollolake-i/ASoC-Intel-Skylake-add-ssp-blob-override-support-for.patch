From 1bc088c60d54556c2943b2d3e3343ed04b36be46 Mon Sep 17 00:00:00 2001
From: Omair M Abdullah <omair.m.abdullah@intel.com>
Date: Tue, 15 Sep 2015 17:46:57 +0530
Subject: [PATCH 1744/2508] ASoC: Intel: Skylake: add ssp blob override
 support for capture

commit 828ffc0d84123da9f8bec6a8622083d34d69b1c1 from
https://github.com/01org/linux-apollolake-i

Capture on SSP can have different blob, so add support for different blobs for
PB/CAP on same SSP.

Signed-off-by: Omair M Abdullah <omair.m.abdullah@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c    |   19 ++++++++++++++-----
 sound/soc/intel/skylake/skl-topology.c |    3 ++-
 sound/soc/intel/skylake/skl.h          |    5 +++--
 3 files changed, 19 insertions(+), 8 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index 0b70bee..7a7bdf7 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -34,13 +34,14 @@ struct skl_debug {
 
 	struct dentry *fs;
 	struct dentry *nhlt;
-	struct nhlt_blob ssp_blob[MAX_SSP];
+	struct nhlt_blob ssp_blob[2*MAX_SSP];
 	struct nhlt_blob dmic_blob;
 	struct dentry *modules;
 };
 
 struct nhlt_specific_cfg
-*skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance)
+*skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance,
+		u8 stream)
 {
 	switch (link_type) {
 	case NHLT_LINK_DMIC:
@@ -50,7 +51,10 @@ struct nhlt_specific_cfg
 		if (instance >= MAX_SSP)
 			return NULL;
 
-		return d->ssp_blob[instance].cfg;
+		if (stream == SNDRV_PCM_STREAM_PLAYBACK)
+			return d->ssp_blob[instance].cfg;
+		else
+			return d->ssp_blob[MAX_SSP + instance].cfg;
 
 	default:
 		break;
@@ -172,9 +176,12 @@ static int skl_init_nhlt(struct skl_debug *d)
 	}
 
 	for (i = 0; i < MAX_SSP; i++) {
-		sprintf(name, "ssp%d", i);
+		sprintf(name, "ssp%dp", i);
 		if (!debugfs_create_file(name, 0644, d->nhlt, &d->ssp_blob[i], &nhlt_fops))
 			dev_err(d->dev, "%s: debugfs init failed\n", name);
+		sprintf(name, "ssp%dc", i);
+		if (!debugfs_create_file(name, 0644, d->nhlt, &d->ssp_blob[MAX_SSP + i], &nhlt_fops))
+			dev_err(d->dev, "%s: debugfs init failed\n", name);
 	}
 
 	if (!debugfs_create_file("dmic", 0644, d->nhlt, &d->dmic_blob, &nhlt_fops))
@@ -343,8 +350,10 @@ void skl_debugfs_exit(struct skl_debug *d)
 	debugfs_remove_recursive(d->fs);
 
 	/* free blob memory, if allocated */
-	for (i = 0; i < MAX_SSP; i++)
+	for (i = 0; i < MAX_SSP; i++) {
 		kfree(d->ssp_blob[i].cfg);
+		kfree(d->ssp_blob[MAX_SSP + i].cfg);
+	}
 	kfree(d->dmic_blob.cfg);
 
 	kfree(d);
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 9ef4b20..43a6343 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -1119,7 +1119,8 @@ static int skl_tplg_be_fill_pipe_params(struct snd_soc_dai *dai,
 	} else {
 		dev_warn(dai->dev, "Querying NHLT blob from Debugfs!!!!\n");
 		cfg = skl_nhlt_get_debugfs_blob(skl->debugfs,
-					link_type, mconfig->vbus_id);
+					link_type, mconfig->vbus_id,
+					params->stream);
 	}
 	if (cfg) {
 		mconfig->formats_config.caps_size = cfg->size;
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 4046275..9fdf5e2 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -105,7 +105,8 @@ struct skl_module_cfg;
 struct skl_debug *skl_debugfs_init(struct skl *skl);
 void skl_debugfs_exit(struct skl_debug *d);
 struct nhlt_specific_cfg
-*skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance);
+*skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance,
+			u8 stream);
 void skl_debug_init_module(struct skl_debug *d,
 			struct snd_soc_dapm_widget *w,
 			struct skl_module_cfg *mconfig);
@@ -124,7 +125,7 @@ void skl_debugfs_exit(struct skl_debug *d)
 }
 
 struct nhlt_specific_cfg
-*skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance)
+*skl_nhlt_get_debugfs_blob(struct skl_debug *d, u8 link_type, u32 instance, u8 stream)
 {
 	return NULL;
 }
-- 
1.7.5.4

