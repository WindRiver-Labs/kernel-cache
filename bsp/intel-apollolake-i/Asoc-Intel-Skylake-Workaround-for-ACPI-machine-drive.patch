From ebd89062f3e148da031934171ce02f6cdca91faa Mon Sep 17 00:00:00 2001
From: "SengKai,Tan" <seng.kai.tan@intel.com>
Date: Wed, 27 Apr 2016 13:08:39 +0800
Subject: [PATCH 2224/2508] Asoc: Intel: Skylake: Workaround for ACPI machine
 driver

commit 88a8e5f11b2a43d967cad979e365f59276d44848 from
https://github.com/01org/linux-apollolake-i

This commit provide an example for user on how to used ACPI
HID to load Apollo Lake-I Leaf Hill CRB machine driver.

This commit also resolve kernel panic issue when the ACPI is not found
in the sst_machines structural array. The searching mechanism inside
sst_acpi_find_machine function will go beyond the array boundary
caused kernel panic..

Signed-off-by: Tan, Seng Kai <seng.kai.tan@intel.com>
---
 sound/soc/intel/skylake/skl.c |   22 ++++++++++++++++------
 1 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/sound/soc/intel/skylake/skl.c b/sound/soc/intel/skylake/skl.c
index 058761d..4c321c0 100644
--- a/sound/soc/intel/skylake/skl.c
+++ b/sound/soc/intel/skylake/skl.c
@@ -482,12 +482,14 @@ static struct sst_machines *sst_acpi_find_machine(
 	struct sst_machines *mach;
 	bool found = false;
 
-	for (mach = machines; mach->codec_id; mach++)
-		if (ACPI_SUCCESS(acpi_get_devices(mach->codec_id,
-						  sst_acpi_mach_match,
-						  &found, NULL)) && found)
-			return mach;
-
+	for (mach = machines; mach->codec_id; mach++) {
+		if (mach->codec_id[0] != 0) {
+			if (ACPI_SUCCESS(acpi_get_devices(mach->codec_id,
+					sst_acpi_mach_match,
+					&found, NULL)) && found)
+				return mach;
+		}
+	}
 	return NULL;
 }
 
@@ -495,6 +497,7 @@ static struct sst_machines *sst_acpi_find_machine(
 static struct sst_machines sst_cnl_devdata[] = {
 	{ "dummy", "cnl_florida", CNL_NUM_I2S_PORTS },
 	{ "dummy", "cnl_florida", CNL_NUM_I2S_PORTS },
+	{ 0, 0, 0 }
 };
 
 static int skl_machine_device_register(struct skl *skl, void *driver_data)
@@ -964,15 +967,22 @@ static void skl_remove(struct pci_dev *pci)
 static struct sst_machines sst_skl_devdata[] = {
 	{ "INT343A", "skl_alc286s_i2s", SKL_NUM_I2S_PORTS },
 	{ "INT343B", "skl_nau88l25_ssm4567_i2s", SKL_NUM_I2S_PORTS },
+	{ 0, 0, 0 }
 };
 
 static struct sst_machines sst_bxt_devdata[] = {
 	{ "INT34C1", "mrgfld_florida", BXT_NUM_I2S_PORTS },
 	{ "INT34E0", "mrgfld_florida", BXT_NUM_I2S_PORTS },
+	{ 0, 0, 0 }
 };
 
 static struct sst_machines sst_bxtp_devdata[] = {
 	{ "INT343A", "bxt_alc298s_i2s", BXTP_NUM_I2S_PORTS },
+	/* Workaround: INT34C1 does not match with actual codec
+	used. This only server as an example for user to
+	follow */
+	{ "INT34C1", "lfcrb_dummy_i2s", BXTP_NUM_I2S_PORTS },
+	{ 0, 0, 0 }
 };
 
 /* PCI IDs */
-- 
1.7.5.4

