From 925b7d2f95acb8c93ec26aa2bba2f26f26369e2b Mon Sep 17 00:00:00 2001
From: "Ooi, Joyce" <joyce.ooi@intel.com>
Date: Thu, 8 Dec 2016 16:10:09 +0800
Subject: [PATCH 4573/4706] Revert "iio: common: hid-sensors: Change the
 precision of scale values"

commit a619ad083040b8ea27d53a73d3920c803fbe9252 from
git://git.yoctoproject.org/linux-yocto-4.1

This reverts commit ed696db0d2c1 ("iio: common: hid-sensors: Change the
precision of scale values").
This patch is reverted to pick up the upstream version.

Signed-off-by: Ooi, Joyce <joyce.ooi@intel.com>
---
 .../iio/common/hid-sensors/hid-sensor-attributes.c |   61 ++++++++++----------
 1 files changed, 30 insertions(+), 31 deletions(-)

diff --git a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
index 6fe6dde..e81f434 100644
--- a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
@@ -30,26 +30,26 @@ static struct {
 	u32 usage_id;
 	int unit; /* 0 for default others from HID sensor spec */
 	int scale_val0; /* scale, whole number */
-	int scale_val1; /* scale, fraction in nanos */
+	int scale_val1; /* scale, fraction in micros */
 } unit_conversion[] = {
-	{HID_USAGE_SENSOR_ACCEL_3D, 0, 9, 806650000},
+	{HID_USAGE_SENSOR_ACCEL_3D, 0, 9, 806650},
 	{HID_USAGE_SENSOR_ACCEL_3D,
 		HID_USAGE_SENSOR_UNITS_METERS_PER_SEC_SQRD, 1, 0},
 	{HID_USAGE_SENSOR_ACCEL_3D,
-		HID_USAGE_SENSOR_UNITS_G, 9, 806650000},
+		HID_USAGE_SENSOR_UNITS_G, 9, 806650},
 
-	{HID_USAGE_SENSOR_GYRO_3D, 0, 0, 17453293},
+	{HID_USAGE_SENSOR_GYRO_3D, 0, 0, 17453},
 	{HID_USAGE_SENSOR_GYRO_3D,
 		HID_USAGE_SENSOR_UNITS_RADIANS_PER_SECOND, 1, 0},
 	{HID_USAGE_SENSOR_GYRO_3D,
-		HID_USAGE_SENSOR_UNITS_DEGREES_PER_SECOND, 0, 17453293},
+		HID_USAGE_SENSOR_UNITS_DEGREES_PER_SECOND, 0, 17453},
 
-	{HID_USAGE_SENSOR_COMPASS_3D, 0, 0, 1000000},
+	{HID_USAGE_SENSOR_COMPASS_3D, 0, 0, 1000},
 	{HID_USAGE_SENSOR_COMPASS_3D, HID_USAGE_SENSOR_UNITS_GAUSS, 1, 0},
 
-	{HID_USAGE_SENSOR_INCLINOMETER_3D, 0, 0, 17453293},
+	{HID_USAGE_SENSOR_INCLINOMETER_3D, 0, 0, 17453},
 	{HID_USAGE_SENSOR_INCLINOMETER_3D,
-		HID_USAGE_SENSOR_UNITS_DEGREES, 0, 17453293},
+		HID_USAGE_SENSOR_UNITS_DEGREES, 0, 17453},
 	{HID_USAGE_SENSOR_INCLINOMETER_3D,
 		HID_USAGE_SENSOR_UNITS_RADIANS, 1, 0},
 
@@ -266,16 +266,16 @@ EXPORT_SYMBOL(hid_sensor_write_raw_hyst_value);
 /*
  * This fuction applies the unit exponent to the scale.
  * For example:
- * 9.806650000 ->exp:2-> val0[980]val1[665000000]
- * 9.000806000 ->exp:2-> val0[900]val1[80600000]
- * 0.17453293 ->exp:2-> val0[17]val1[453293000]
- * 1.00174532 ->exp:0-> val0[1]val1[1745320]
- * 1.00174532 ->exp:2-> val0[100]val1[174532000]
- * 1.00174532 ->exp:4-> val0[10017]val1[453200000]
- * 9.80665000 ->exp:-2-> val0[0]val1[98066500]
+ * 9.806650 ->exp:2-> val0[980]val1[665000]
+ * 9.000806 ->exp:2-> val0[900]val1[80600]
+ * 0.174535 ->exp:2-> val0[17]val1[453500]
+ * 1.001745 ->exp:0-> val0[1]val1[1745]
+ * 1.001745 ->exp:2-> val0[100]val1[174500]
+ * 1.001745 ->exp:4-> val0[10017]val1[450000]
+ * 9.806650 ->exp:-2-> val0[0]val1[98066]
  */
-static void adjust_exponent_nano(int *val0, int *val1, int scale0,
-				 int scale1, int exp)
+static void adjust_exponent_micro(int *val0, int *val1, int scale0,
+				  int scale1, int exp)
 {
 	int i;
 	int x;
@@ -285,32 +285,32 @@ static void adjust_exponent_nano(int *val0, int *val1, int scale0,
 	if (exp > 0) {
 		*val0 = scale0 * pow_10(exp);
 		res = 0;
-		if (exp > 9) {
+		if (exp > 6) {
 			*val1 = 0;
 			return;
 		}
 		for (i = 0; i < exp; ++i) {
-			x = scale1 / pow_10(8 - i);
+			x = scale1 / pow_10(5 - i);
 			res += (pow_10(exp - 1 - i) * x);
-			scale1 = scale1 % pow_10(8 - i);
+			scale1 = scale1 % pow_10(5 - i);
 		}
 		*val0 += res;
 			*val1 = scale1 * pow_10(exp);
 	} else if (exp < 0) {
 		exp = abs(exp);
-		if (exp > 9) {
+		if (exp > 6) {
 			*val0 = *val1 = 0;
 			return;
 		}
 		*val0 = scale0 / pow_10(exp);
 		rem = scale0 % pow_10(exp);
 		res = 0;
-		for (i = 0; i < (9 - exp); ++i) {
-			x = scale1 / pow_10(8 - i);
-			res += (pow_10(8 - exp - i) * x);
-			scale1 = scale1 % pow_10(8 - i);
+		for (i = 0; i < (6 - exp); ++i) {
+			x = scale1 / pow_10(5 - i);
+			res += (pow_10(5 - exp - i) * x);
+			scale1 = scale1 % pow_10(5 - i);
 		}
-		*val1 = rem * pow_10(9 - exp) + res;
+		*val1 = rem * pow_10(6 - exp) + res;
 	} else {
 		*val0 = scale0;
 		*val1 = scale1;
@@ -332,15 +332,14 @@ int hid_sensor_format_scale(u32 usage_id,
 			unit_conversion[i].unit == attr_info->units) {
 			exp  = hid_sensor_convert_exponent(
 						attr_info->unit_expo);
-			adjust_exponent_nano(val0, val1,
-					     unit_conversion[i].scale_val0,
-					     unit_conversion[i].scale_val1,
-					     exp);
+			adjust_exponent_micro(val0, val1,
+					unit_conversion[i].scale_val0,
+					unit_conversion[i].scale_val1, exp);
 			break;
 		}
 	}
 
-	return IIO_VAL_INT_PLUS_NANO;
+	return IIO_VAL_INT_PLUS_MICRO;
 }
 EXPORT_SYMBOL(hid_sensor_format_scale);
 
-- 
1.7.5.4

