From dd1231c8573d49870ee6898a566f20aabf0cdafd Mon Sep 17 00:00:00 2001
From: Uma Shankar <uma.shankar@intel.com>
Date: Tue, 20 Dec 2016 10:24:31 -0800
Subject: [PATCH 4460/4706] drm/i915: Add DSI panel power on/off sequence
 programming (v2)

commit c05cbbe9733df7b8853d4056fd7e03580aa328f6 from
git://git.yoctoproject.org/linux-yocto-4.1

Panel Power On/Off sequences are part of Panel spec. These are present
in VBT v3 of the Intel VBT spec. Enabling the support of same in DRM
layer and Intel's DSI VBT sequence handling.

v2: rebased on IOTG release (Bob)

Signed-off-by: Uma Shankar <uma.shankar@intel.com>
Signed-off-by: Deepak M <m.deepak@intel.com>
Signed-off-by: Bob Paauwe <bob.j.paauwe@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/i915/intel_dsi.c           |    7 +++++
 drivers/gpu/drm/i915/intel_dsi_panel_vbt.c |   18 ++++++++++++-
 include/drm/drm_panel.h                    |   36 ++++++++++++++++++++++++++++
 3 files changed, 59 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_dsi.c b/drivers/gpu/drm/i915/intel_dsi.c
index b799fb4..cf07b4d 100644
--- a/drivers/gpu/drm/i915/intel_dsi.c
+++ b/drivers/gpu/drm/i915/intel_dsi.c
@@ -558,6 +558,10 @@ static void intel_dsi_pre_enable(struct intel_encoder *encoder,
 
 	intel_dsi_prepare(encoder, pipe_config);
 
+	/* Panel Enable */
+	drm_panel_power_on(intel_dsi->panel);
+	msleep(intel_dsi->panel_on_delay);
+
 	/* Panel Enable over CRC PMIC */
 	if (intel_dsi->gpio_panel)
 		gpiod_set_value_cansleep(intel_dsi->gpio_panel, 1);
@@ -761,6 +765,9 @@ static void intel_dsi_post_disable(struct intel_encoder *encoder,
 	}
 
 	drm_panel_unprepare(intel_dsi->panel);
+
+	/* Disable Panel */
+	drm_panel_power_off(intel_dsi->panel);
 	msleep(intel_dsi->panel_off_delay);
 
 	intel_disable_dsi_pll(encoder);
diff --git a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
index 03ec38f..c56cbc4 100644
--- a/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
+++ b/drivers/gpu/drm/i915/intel_dsi_panel_vbt.c
@@ -493,7 +493,6 @@ static void generic_exec_sequence(struct drm_panel *panel, enum mipi_seq seq_id)
 static int vbt_panel_prepare(struct drm_panel *panel)
 {
 	generic_exec_sequence(panel, MIPI_SEQ_ASSERT_RESET);
-	generic_exec_sequence(panel, MIPI_SEQ_POWER_ON);
 	generic_exec_sequence(panel, MIPI_SEQ_DEASSERT_RESET);
 	generic_exec_sequence(panel, MIPI_SEQ_INIT_OTP);
 
@@ -503,7 +502,6 @@ static int vbt_panel_prepare(struct drm_panel *panel)
 static int vbt_panel_unprepare(struct drm_panel *panel)
 {
 	generic_exec_sequence(panel, MIPI_SEQ_ASSERT_RESET);
-	generic_exec_sequence(panel, MIPI_SEQ_POWER_OFF);
 
 	return 0;
 }
@@ -546,10 +544,26 @@ static int vbt_panel_get_modes(struct drm_panel *panel)
 	return 1;
 }
 
+static int vbt_panel_power_on(struct drm_panel *panel)
+{
+	generic_exec_sequence(panel, MIPI_SEQ_POWER_ON);
+
+	return 0;
+}
+
+static int vbt_panel_power_off(struct drm_panel *panel)
+{
+	generic_exec_sequence(panel, MIPI_SEQ_POWER_OFF);
+
+	return 0;
+}
+
 static const struct drm_panel_funcs vbt_panel_funcs = {
 	.disable = vbt_panel_disable,
 	.unprepare = vbt_panel_unprepare,
 	.prepare = vbt_panel_prepare,
+	.power_on = vbt_panel_power_on,
+	.power_off = vbt_panel_power_off,
 	.enable = vbt_panel_enable,
 	.get_modes = vbt_panel_get_modes,
 };
diff --git a/include/drm/drm_panel.h b/include/drm/drm_panel.h
index 220d1e2b..f883c12 100644
--- a/include/drm/drm_panel.h
+++ b/include/drm/drm_panel.h
@@ -69,6 +69,8 @@ struct drm_panel_funcs {
 	int (*disable)(struct drm_panel *panel);
 	int (*unprepare)(struct drm_panel *panel);
 	int (*prepare)(struct drm_panel *panel);
+	int (*power_on)(struct drm_panel *panel);
+	int (*power_off)(struct drm_panel *panel);
 	int (*enable)(struct drm_panel *panel);
 	int (*get_modes)(struct drm_panel *panel);
 	int (*get_timings)(struct drm_panel *panel, unsigned int num_timings,
@@ -167,6 +169,40 @@ static inline int drm_panel_enable(struct drm_panel *panel)
 }
 
 /**
+ * drm_panel_power_on - power on a panel
+ * @panel: DRM panel
+ *
+ * Calling this function will cause the panel display drivers to turn on
+ * the power rails.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+static inline int drm_panel_power_on(struct drm_panel *panel)
+{
+	if (panel && panel->funcs && panel->funcs->power_on)
+		return panel->funcs->power_on(panel);
+
+	return panel ? -ENOSYS : -EINVAL;
+}
+
+/**
+ * drm_panel_power_off - power off a panel
+ * @panel: DRM panel
+ *
+ * Calling this function will cause the panel display drivers to turn off
+ * the power rails.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+static inline int drm_panel_power_off(struct drm_panel *panel)
+{
+	if (panel && panel->funcs && panel->funcs->power_off)
+		return panel->funcs->power_off(panel);
+
+	return panel ? -ENOSYS : -EINVAL;
+}
+
+/**
  * drm_panel_get_modes - probe the available display modes of a panel
  * @panel: DRM panel
  *
-- 
1.7.5.4

