From 8676347518a0d234cab38b81b81d84721b0a3026 Mon Sep 17 00:00:00 2001
From: Evyatar Vaalani <evyatar.vaalani@intel.com>
Date: Mon, 16 Jan 2017 15:47:01 +0200
Subject: [PATCH 4675/4706] mei: dal: remove bh_do_close_vm flows

commit 0b503626dfa44e1a686de5bb3a3f2d61f0c4f59e from
git://git.yoctoproject.org/linux-yocto-4.1

bh_do_close_vm function just return success and therefore has no meaning.

Change-Id: I09bdee6575c474b34afaf9f422b6780eac782d7a
igned-off-by: Evyatar Vaalani <vyatar.vaalani@intel.com>
---
 drivers/misc/mei/dal/bhp_impl.c    |   30 +-----------------------------
 drivers/misc/mei/dal/bhp_impl.h    |    3 ---
 drivers/misc/mei/dal/bhp_impl_ta.c |   17 +----------------
 3 files changed, 2 insertions(+), 48 deletions(-)

diff --git a/drivers/misc/mei/dal/bhp_impl.c b/drivers/misc/mei/dal/bhp_impl.c
index 51b86e8..03e7534 100644
--- a/drivers/misc/mei/dal/bhp_impl.c
+++ b/drivers/misc/mei/dal/bhp_impl.c
@@ -245,8 +245,6 @@ struct bh_response_record *session_enter(int conn_idx, u64 seq,
 void session_exit(int conn_idx, struct bh_response_record *session,
 		  u64 seq, int unlock_session)
 {
-	bool close_vm_conn = false;
-
 	mutex_enter(connections[conn_idx].bhm_rrmap);
 	session->count--;
 
@@ -257,27 +255,17 @@ void session_exit(int conn_idx, struct bh_response_record *session,
 			mutex_exit(session->session_lock);
 
 		destroy_session(session);
-		if (conn_idx >= CONN_IDX_SVM)
-			close_vm_conn = true;
 	} else {
 		if (unlock_session)
 			mutex_exit(session->session_lock);
 	}
 
 	mutex_exit(connections[conn_idx].bhm_rrmap);
-
-	/* remove the VM conn counter of
-	 * this session:only for connected SVM
-	 */
-	if (close_vm_conn)
-		bh_do_close_vm(conn_idx);
 }
 
 void session_close(int conn_idx, struct bh_response_record *session,
 		   u64 seq, int unlock_session)
 {
-	bool close_vm_conn = false;
-
 	mutex_enter(connections[conn_idx].bhm_rrmap);
 	session->count--;
 
@@ -286,9 +274,6 @@ void session_close(int conn_idx, struct bh_response_record *session,
 		if (unlock_session)
 			mutex_exit(session->session_lock);
 		destroy_session(session);
-
-		if (conn_idx >= CONN_IDX_SVM)
-			close_vm_conn = true;
 	} else {
 		session->killed = true;
 		if (unlock_session)
@@ -296,12 +281,6 @@ void session_close(int conn_idx, struct bh_response_record *session,
 	}
 
 	mutex_exit(connections[conn_idx].bhm_rrmap);
-
-	/* remove the VM conn counter of
-	 * this session:only for connected SVM
-	 */
-	if (close_vm_conn)
-		bh_do_close_vm(conn_idx);
 }
 
 static void session_kill(int conn_idx, struct bh_response_record *session,
@@ -323,9 +302,7 @@ static void session_kill(int conn_idx, struct bh_response_record *session,
 	 * only for connected SVM
 	 */
 	if (close_vm_conn) {
-		if (!is_caller_svm_recv_thread) {
-			bh_do_close_vm(conn_idx);
-		} else {
+		if (is_caller_svm_recv_thread) {
 			mutex_enter(connections[conn_idx].lock);
 			if (connections[conn_idx].conn_count != 1)
 				connections[conn_idx].conn_count--;
@@ -402,11 +379,6 @@ int bh_do_open_vm(uuid_be sdid, int *conn_idx, int mode)
 	return 0;
 }
 
-int bh_do_close_vm(int conn_idx)
-{
-	return 0;
-}
-
 static int bh_send_message(int conn_idx, void *cmd, unsigned int clen,
 		const void *data, unsigned int dlen, u64 seq)
 {
diff --git a/drivers/misc/mei/dal/bhp_impl.h b/drivers/misc/mei/dal/bhp_impl.h
index f4bde93..401c1de 100644
--- a/drivers/misc/mei/dal/bhp_impl.h
+++ b/drivers/misc/mei/dal/bhp_impl.h
@@ -171,9 +171,6 @@ int bh_request(int conn_idx, void *cmd, unsigned int clen,
 /* open vm connection for sdid and increase vm connection counter by 1 */
 int bh_do_open_vm(uuid_be sdid, int *conn_idx, int mode);
 
-/* decrease vm connection counter by 1 */
-int bh_do_close_vm(int conn_idx);
-
 /* returns hdr if msg is cmd hdr, otherwise returns NULL */
 const struct bhp_command_header *bh_msg_cmd_hdr(const void *msg, size_t len);
 
diff --git a/drivers/misc/mei/dal/bhp_impl_ta.c b/drivers/misc/mei/dal/bhp_impl_ta.c
index 12813c3..59813c2 100644
--- a/drivers/misc/mei/dal/bhp_impl_ta.c
+++ b/drivers/misc/mei/dal/bhp_impl_ta.c
@@ -366,7 +366,6 @@ static int bh_proxy_openjtasession(int conn_idx,
 				   const char *init_buffer,
 				   unsigned int init_len,
 				   u64 *handle,
-				   int *vm_conn_closed,
 				   const char *ta_pkg,
 				   unsigned int pkg_len)
 {
@@ -430,12 +429,7 @@ static int bh_proxy_openjtasession(int conn_idx,
 	return 0;
 
 out_err:
-	/*
-	 * bh_do_closeVM() will be called in following
-	 * session_close(), as rr->count is 1
-	 */
 	session_close(conn_idx, rr, seq, 0);
-	*vm_conn_closed = 1;
 
 	return ret;
 }
@@ -447,7 +441,6 @@ int bhp_open_ta_session(u64 *session, const char *app_id,
 	int ret;
 	uuid_be ta_id;
 	int conn_idx = 0;
-	int vm_conn_closed = 0;
 	uuid_be sdid;
 	int ta_existed = 0;
 	int count = 0;
@@ -505,17 +498,9 @@ int bhp_open_ta_session(u64 *session, const char *app_id,
 	/* 3: send opensession cmd to VM */
 	ret = bh_proxy_openjtasession(conn_idx, ta_id,
 				      init_buffer, init_len,
-				      session, &vm_conn_closed,
-				      ta_pkg, pkg_len);
+				      session, ta_pkg, pkg_len);
 
 cleanup:
-	/*
-	 * closeVM only when this process failed and vm has not been closed
-	 * inside openjtasession, otherwise the session is created.
-	 */
-	if (ret && !vm_conn_closed)
-		bh_do_close_vm(conn_idx);
-
 	return ret;
 }
 
-- 
1.7.5.4

