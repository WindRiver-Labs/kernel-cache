From f7df91c03f2615f8676eb58aeb5c8b6ce86c4406 Mon Sep 17 00:00:00 2001
From: Deepak S <deepak.s@intel.com>
Date: Fri, 13 Jan 2017 15:40:48 -0800
Subject: [PATCH 4476/4706] drm/i915/vlv: Add valleyview RPS debugfs disabling

commit 900bec6cc04cf165e3552edc5f00c1865a9b9891 from
git://git.yoctoproject.org/linux-yocto-4.1

This patch exposes a new debugfs interface 'i915_rps_disable'
Following 2 values shall be echoed into this file.
'0' - RPS explicitly enabled .
'1' - RPS explicitly disabled.

This interface provides capabilty to enable/disable Turbo feature
at runtime, which is needed for its validation.

Tracked-On:
Issue: VIZ-3403
Change-Id: Idff952a26c45fd42f1e940a030f9788a073c1bc8
Signed-off-by: Deepak S <deepak.s@intel.com>
Signed-off-by: Jeff McGee <jeff.mcgee@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/i915/i915_debugfs.c |   41 +++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_drv.h     |    3 ++
 drivers/gpu/drm/i915/intel_pm.c     |   38 ++++++++++++++++++++++++++------
 3 files changed, 75 insertions(+), 7 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index 55a5c27..30e3316 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -5255,6 +5255,46 @@ DEFINE_SIMPLE_ATTRIBUTE(i915_rps_disable_boost_fops,
 		i915_rps_disable_boost_get, i915_rps_disable_boost_set,
 			"%llu\n");
 
+static int i915_rps_disable_get(void *data, u64 *val)
+{
+	struct drm_device *dev = data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	if (!IS_VALLEYVIEW(dev))
+		return -ENODEV;
+
+	*val = dev_priv->rps.rps_disable;
+
+	return 0;
+}
+
+static int i915_rps_disable_set(void *data, u64 val)
+{
+	struct drm_device *dev = data;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	int ret;
+
+	if (!IS_VALLEYVIEW(dev))
+		return -ENODEV;
+
+	DRM_DEBUG_DRIVER("Setting RPS disable %s\n",
+			 val ? "true" : "false");
+
+	ret = mutex_lock_interruptible(&dev_priv->rps.hw_lock);
+	if (ret)
+		return ret;
+
+	vlv_set_rps_mode(dev_priv, val);
+
+	mutex_unlock(&dev_priv->rps.hw_lock);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(i915_rps_disable_fops,
+			i915_rps_disable_get, i915_rps_disable_set,
+			"%llu\n");
+
 static int i915_rc6_disable_get(void *data, u64 *val)
 {
 	struct drm_device *dev = data;
@@ -5648,6 +5688,7 @@ static const struct i915_debugfs_files {
 	{"i915_max_freq", &i915_max_freq_fops},
 	{"i915_min_freq", &i915_min_freq_fops},
 	{"i915_rps_disable_boost", &i915_rps_disable_boost_fops},
+	{"i915_rps_disable", &i915_rps_disable_fops},
 	{"i915_rc6_disable", &i915_rc6_disable_fops},
 	{"i915_cache_sharing", &i915_cache_sharing_fops},
 	{"i915_ring_missed_irq", &i915_ring_missed_irq_fops},
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 7827fd1..653f553 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1258,6 +1258,8 @@ struct intel_gen6_power_mgmt {
 
 	bool rc6_disable;
 	bool debugfs_disable_boost;
+	u32 rps_mask;
+	bool rps_disable;
 
 	/*
 	 * Protects RPS/RC6 register access and PCU communication.
@@ -3778,6 +3780,7 @@ extern void i915_redisable_vga_power_on(struct drm_device *dev);
 extern bool ironlake_set_drps(struct drm_i915_private *dev_priv, u8 val);
 extern void intel_init_pch_refclk(struct drm_device *dev);
 extern void intel_set_rps(struct drm_i915_private *dev_priv, u8 val);
+extern void vlv_set_rps_mode(struct drm_i915_private *dev_priv, bool disable);
 extern int intel_set_rc6_mode(struct drm_device *dev, bool disable);
 extern void intel_set_memory_cxsr(struct drm_i915_private *dev_priv,
 				  bool enable);
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 15a3f9f..5be8484 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -5136,6 +5136,26 @@ static void cherryview_disable_rps(struct drm_i915_private *dev_priv)
 	I915_WRITE(GEN6_RC_CONTROL, 0);
 }
 
+void vlv_set_rps_mode(struct drm_i915_private *dev_priv, bool disable)
+{
+	if (!IS_VALLEYVIEW(dev_priv)) {
+		DRM_DEBUG_DRIVER("RPS mode change not supported\n");
+		return;
+	}
+
+	WARN_ON(!mutex_is_locked(&dev_priv->rps.hw_lock));
+
+	dev_priv->rps.rps_disable = disable;
+
+	if (disable) {
+		I915_WRITE(GEN6_RP_CONTROL, 0);
+		gen6_disable_rps_interrupts(dev_priv);
+	} else {
+		I915_WRITE(GEN6_RP_CONTROL, dev_priv->rps.rps_mask);
+		gen6_enable_rps_interrupts(dev_priv);
+	}
+}
+
 static void valleyview_disable_rps(struct drm_i915_private *dev_priv)
 {
 	/* we're doing forcewake before Disabling RC6,
@@ -5144,6 +5164,9 @@ static void valleyview_disable_rps(struct drm_i915_private *dev_priv)
 
 	I915_WRITE(GEN6_RC_CONTROL, 0);
 
+	/* Disable rps */
+	vlv_set_rps_mode(dev_priv, true);
+
 	intel_uncore_forcewake_put(dev_priv, FORCEWAKE_ALL);
 }
 
@@ -6120,6 +6143,8 @@ static void cherryview_enable_rps(struct drm_i915_private *dev_priv)
 
 	reset_rps(dev_priv, valleyview_set_rps);
 
+	vlv_set_rps_mode(dev_priv, false);
+
 	intel_uncore_forcewake_put(dev_priv, FORCEWAKE_ALL);
 }
 
@@ -6153,13 +6178,12 @@ static void valleyview_enable_rps(struct drm_i915_private *dev_priv)
 
 	I915_WRITE(GEN6_RP_IDLE_HYSTERSIS, 10);
 
-	I915_WRITE(GEN6_RP_CONTROL,
-		   GEN6_RP_MEDIA_TURBO |
-		   GEN6_RP_MEDIA_HW_NORMAL_MODE |
-		   GEN6_RP_MEDIA_IS_GFX |
-		   GEN6_RP_ENABLE |
-		   GEN6_RP_UP_BUSY_AVG |
-		   GEN6_RP_DOWN_IDLE_CONT);
+	dev_priv->rps.rps_mask = GEN6_RP_MEDIA_TURBO |
+				   GEN6_RP_MEDIA_HW_NORMAL_MODE |
+				   GEN6_RP_MEDIA_IS_GFX |
+				   GEN6_RP_ENABLE |
+				   GEN6_RP_UP_BUSY_AVG |
+				   GEN6_RP_DOWN_IDLE_CONT;
 
 	I915_WRITE(GEN6_RC6_WAKE_RATE_LIMIT, 0x00280000);
 	I915_WRITE(GEN6_RC_EVALUATION_INTERVAL, 125000);
-- 
1.7.5.4

