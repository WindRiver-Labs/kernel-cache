From 2f2524bfd7a3a8ecb330c1a7f07338f898656428 Mon Sep 17 00:00:00 2001
From: Jeeja KP <jeeja.kp@intel.com>
Date: Mon, 10 Aug 2015 04:30:18 +0530
Subject: [PATCH 1702/2508] ASoC: Intel: Skylake: Add tlv byte control get/put
 handler

commit 74f5b84c0dec6603319547d38ea462e95fa3da26 from
https://github.com/01org/linux-apollolake-i

Added support for setting and getting TLV bytes data.

Signed-off-by: Mythri P K <mythri.p.k@intel.com>
Signed-off-by: Divya Prakash <divya1.prakash@intel.com>
Signed-off-by: Omair M Abdullah <omair.m.abdullah@intel.com>
Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
---
 sound/soc/intel/skylake/skl-topology.c       |   60 ++++++++++++++++++++++++++
 sound/soc/intel/skylake/skl-topology.h       |    6 +++
 sound/soc/intel/skylake/skl-tplg-interface.h |    3 +-
 3 files changed, 68 insertions(+), 1 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 62febfc..9cfd272 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -790,6 +790,66 @@ static int skl_tplg_pga_event(struct snd_soc_dapm_widget *w,
 	return 0;
 }
 
+static int skl_tplg_tlv_control_get(struct snd_kcontrol *kcontrol,
+			unsigned int __user *data, unsigned int size)
+{
+	struct soc_bytes_ext *sb = (void *) kcontrol->private_value;
+	struct snd_soc_dapm_context *dapm = snd_soc_dapm_kcontrol_dapm(kcontrol);
+	struct skl_algo_data *bc = (struct skl_algo_data *)sb->dobj.private;
+
+	dev_dbg(dapm->dev, "In%s control_name=%s, id=%u\n", __func__, kcontrol->id.name, bc->param_id);
+	dev_dbg(dapm->dev, "size = %u (%#x), max = %#x\n", size, size, bc->max);
+
+	if (bc->params) {
+		int ret;
+		ret = copy_to_user(data, &bc->param_id, sizeof(u32));
+		ret = copy_to_user(((unsigned char *)data) + sizeof(u32), &size, sizeof(u32));
+		ret = copy_to_user(((unsigned char *)data) + 2*sizeof(u32), bc->params, size);
+
+		return  ret;
+	}
+	return 0;
+}
+
+#define SKL_PARAM_VENDOR_ID 0xff
+
+static int skl_tplg_tlv_control_set(struct snd_kcontrol *kcontrol,
+			const unsigned int __user *data, unsigned int size)
+{
+	struct snd_soc_dapm_context *dapm =
+				snd_soc_dapm_kcontrol_dapm(kcontrol);
+	struct snd_soc_dapm_widget *w = snd_soc_dapm_kcontrol_widget(kcontrol);
+	struct skl_module_cfg *mconfig = w->priv;
+	struct soc_bytes_ext *sb = (void *) kcontrol->private_value;
+	struct skl_algo_data *ac = (struct skl_algo_data *)sb->dobj.private;
+	struct skl *skl = get_skl_ctx(dapm->dev);
+
+	dev_dbg(dapm->dev, "in %s control=%s\n", __func__, kcontrol->id.name);
+	dev_dbg(dapm->dev, "size = %u, %#x\n", size, size);
+	if (ac->params) {
+		/*
+		 * if the param_is is of type Vendor, firmware expects actual
+		 * parameter id and size from the control.
+		 */
+		if (ac->param_id == SKL_PARAM_VENDOR_ID) {
+			if (copy_from_user(ac->params,
+					   ((unsigned char *)data),
+					   size))
+				return -EIO;
+		} else {
+			if (copy_from_user(ac->params,
+					   ((unsigned char *)data) + 2*sizeof(u32),
+					   size))
+				return -EIO;
+		}
+
+		if (w->power)
+			return skl_set_module_params(skl->skl_sst, (void *)ac->params,
+						ac->max, ac->param_id, mconfig);
+	}
+	return 0;
+}
+
 /*
  * The FE params are passed by hw_params of the DAI.
  * On hw_params, the params are stored in Gateway module of the FE and we
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 398ab85..bc7bcd1 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -283,6 +283,12 @@ struct skl_module_cfg {
 	struct skl_specific_cfg formats_config;
 };
 
+struct skl_algo_data {
+	u32 param_id;
+	u32 max;
+	char *params;
+};
+
 struct skl_pipeline {
 	struct skl_pipe *pipe;
 	struct list_head node;
diff --git a/sound/soc/intel/skylake/skl-tplg-interface.h b/sound/soc/intel/skylake/skl-tplg-interface.h
index 25af01a..c7051c1 100644
--- a/sound/soc/intel/skylake/skl-tplg-interface.h
+++ b/sound/soc/intel/skylake/skl-tplg-interface.h
@@ -212,7 +212,8 @@ struct skl_dfw_module {
 
 struct skl_dfw_algo_data {
 	u32 max;
-	char *params;
+	u32 param_id;
+	char params[0];
 } __packed;
 
 #endif
-- 
1.7.5.4

