From 114e37806b35669b8ab91699491feca97ae9d053 Mon Sep 17 00:00:00 2001
From: Yael Samet <yael.samet@intel.com>
Date: Thu, 12 Jan 2017 08:19:03 +0200
Subject: [PATCH 4659/4706] mei: dal: fix some indentation issues

commit 20afebbcb4e5610e620b9c409a14b8c8b2a821ab from
git://git.yoctoproject.org/linux-yocto-4.1

Change-Id: I688400c469d03d75e3fcfb4153f0edf0b2e23b1f
Signed-off-by: Yael Samet <yael.samet@intel.com>
---
 drivers/misc/mei/dal/admin_pack_ext.c |    2 +-
 drivers/misc/mei/dal/admin_pack_int.c |    3 +-
 drivers/misc/mei/dal/bhp_impl.c       |   21 ++++++-------
 drivers/misc/mei/dal/bhp_impl_ta.c    |   52 ++++++++++++++++-----------------
 drivers/misc/mei/dal/dal_kdi.c        |    2 +-
 5 files changed, 38 insertions(+), 42 deletions(-)

diff --git a/drivers/misc/mei/dal/admin_pack_ext.c b/drivers/misc/mei/dal/admin_pack_ext.c
index 79300d5..5f22717 100644
--- a/drivers/misc/mei/dal/admin_pack_ext.c
+++ b/drivers/misc/mei/dal/admin_pack_ext.c
@@ -135,7 +135,7 @@ int acp_pload_ins_jta_prop(const void *raw_data, unsigned int size,
 		return -EINVAL;
 
 	return acp_load_pack(raw_data, size, AC_INSTALL_JTA_PROP,
-			    (struct ac_pack *)pack);
+			     (struct ac_pack *)pack);
 }
 
 int acp_get_cmd_id(const void *raw_data, unsigned int size, int *cmd_id)
diff --git a/drivers/misc/mei/dal/admin_pack_int.c b/drivers/misc/mei/dal/admin_pack_int.c
index 4dee31e..2828fbf 100644
--- a/drivers/misc/mei/dal/admin_pack_int.c
+++ b/drivers/misc/mei/dal/admin_pack_int.c
@@ -136,10 +136,11 @@ static int pr_move(struct pack_reader *pr, size_t n_move)
 
 	/* integer overflow or out of acp pkg size */
 	if ((size_t)pr->cur > SIZE_MAX - n_move ||
-	    new_cur > pr->head + pr->total)
+			new_cur > pr->head + pr->total)
 		return -EINVAL;
 
 	pr->cur = new_cur;
+
 	return 0;
 }
 
diff --git a/drivers/misc/mei/dal/bhp_impl.c b/drivers/misc/mei/dal/bhp_impl.c
index b560340b..a899264 100644
--- a/drivers/misc/mei/dal/bhp_impl.c
+++ b/drivers/misc/mei/dal/bhp_impl.c
@@ -124,9 +124,7 @@ static struct RR_MAP_INFO *rrmap_find_by_addr(struct list_head *rr_map_header,
 	struct list_head *pos;
 	struct RR_MAP_INFO *rrmap_info;
 
-	list_for_each(pos, rr_map_header)
-	{
-
+	list_for_each(pos, rr_map_header) {
 		rrmap_info = list_entry(pos, struct RR_MAP_INFO, link);
 		if (rrmap_info && rrmap_info->seq == seq)
 			return rrmap_info;
@@ -149,7 +147,7 @@ u64 rrmap_add(int conn_idx, struct bh_response_record *rr)
 	rrmap_info->rr = rr;
 
 	list_add_tail(&rrmap_info->link,
-		     &connections[conn_idx].rr_map_list_header);
+		      &connections[conn_idx].rr_map_list_header);
 
 	return rrmap_info->seq;
 }
@@ -217,7 +215,6 @@ struct bh_response_record *session_enter(int conn_idx, u64 seq,
 				   seq);
 
 	if (rrmap_info) {
-
 		if (rrmap_info->rr->is_session && !rrmap_info->rr->killed) {
 			session = rrmap_info->rr;
 
@@ -456,14 +453,14 @@ static int bh_recv_message(int conn_idx, u64 *seq)
 	struct bh_response_record *rr = NULL;
 	int session_killed;
 
-	ret = bh_transport_recv(conn_idx,
-			(char *) head, sizeof(struct bhp_response_header));
+	ret = bh_transport_recv(conn_idx, (char *) head,
+				sizeof(struct bhp_response_header));
 	if (ret)
 		return ret;
 
 	/* check magic */
 	if (memcmp(BHP_MSG_RESPONSE_MAGIC,
-			head->h.magic, BHP_MSG_MAGIC_LENGTH) != 0)
+		   head->h.magic, BHP_MSG_MAGIC_LENGTH) != 0)
 		return -EBADMSG;
 
 	/* verify rr */
@@ -490,9 +487,9 @@ static int bh_recv_message(int conn_idx, u64 *seq)
 			rr->addr = head->addr;
 
 		session_killed = (rr->is_session &&
-				(rr->code == BHE_WD_TIMEOUT ||
-				rr->code == BHE_UNCAUGHT_EXCEPTION ||
-				rr->code == BHE_APPLET_CRASHED));
+				  (rr->code == BHE_WD_TIMEOUT ||
+				  rr->code == BHE_UNCAUGHT_EXCEPTION ||
+				  rr->code == BHE_APPLET_CRASHED));
 
 		/* set killed flag before wake up send_wait thread */
 		if (session_killed) {
@@ -570,7 +567,7 @@ static void bh_connections_deinit(void)
 
 #define MAX_RETRY_COUNT   (3)
 int bh_cmd_transfer(int conn_idx, void *cmd, unsigned int clen,
-		const void *data, unsigned int dlen, u64 seq)
+		    const void *data, unsigned int dlen, u64 seq)
 {
 	int ret;
 	u32 retry_count = 0;
diff --git a/drivers/misc/mei/dal/bhp_impl_ta.c b/drivers/misc/mei/dal/bhp_impl_ta.c
index 5c7145b..4cf446a 100644
--- a/drivers/misc/mei/dal/bhp_impl_ta.c
+++ b/drivers/misc/mei/dal/bhp_impl_ta.c
@@ -151,7 +151,7 @@ const uuid_be *bh_open_session_ta_id(const struct bhp_command_header *hdr,
 	struct bhp_open_jtasession_cmd *open_cmd;
 
 	if (count < sizeof(struct bhp_command_header) +
-		sizeof(struct bhp_open_jtasession_cmd))
+			sizeof(struct bhp_open_jtasession_cmd))
 		return NULL;
 
 	open_cmd = (struct bhp_open_jtasession_cmd *)hdr->cmd;
@@ -200,8 +200,8 @@ static int bh_proxy_get_sd_by_ta(uuid_be taid, uuid_be *sdid)
 	cmd->taid = taid;
 
 	ret = bh_cmd_transfer(CONN_IDX_SDM, (char *) h,
-			sizeof(*h) + sizeof(*cmd), NULL, 0,
-			rrmap_add(CONN_IDX_SDM, &rr));
+			      sizeof(*h) + sizeof(*cmd), NULL, 0,
+			      rrmap_add(CONN_IDX_SDM, &rr));
 
 	if (!ret)
 		ret = rr.code;
@@ -238,11 +238,11 @@ static int bh_proxy_check_svl_ta_blocked_state(uuid_be taid)
 	h->id = BHP_CMD_CHECK_SVL_TA_BLOCKED_STATE;
 	cmd->taid = taid;
 	memcpy(&cmd->taid, &taid,
-			sizeof(struct bhp_check_svl_ta_blocked_state_cmd));
+	       sizeof(struct bhp_check_svl_ta_blocked_state_cmd));
 
 	ret = bh_cmd_transfer(CONN_IDX_SDM, (char *) h,
-			sizeof(*h) + sizeof(*cmd), NULL, 0,
-			rrmap_add(CONN_IDX_SDM, &rr));
+			      sizeof(*h) + sizeof(*cmd), NULL, 0,
+			      rrmap_add(CONN_IDX_SDM, &rr));
 	if (!ret)
 		ret = rr.code;
 
@@ -277,7 +277,7 @@ static int bh_proxy_listJTAPackages(int conn_idx, int *count,
 	h->id = BHP_CMD_LIST_TA_PACKAGES;
 
 	ret = bh_cmd_transfer(conn_idx, (char *)h, sizeof(*h),
-			     NULL, 0, rrmap_add(conn_idx, &rr));
+			      NULL, 0, rrmap_add(conn_idx, &rr));
 	if (!ret)
 		ret = rr.code;
 	if (ret)
@@ -294,8 +294,7 @@ static int bh_proxy_listJTAPackages(int conn_idx, int *count,
 		goto out;
 	}
 
-	if (rr.length != sizeof(uuid_be) *
-			 resp->count +
+	if (rr.length != sizeof(uuid_be) * resp->count +
 			sizeof(struct bhp_list_ta_packages_response)) {
 		ret = -EBADMSG;
 		goto out;
@@ -307,6 +306,7 @@ static int bh_proxy_listJTAPackages(int conn_idx, int *count,
 		ret = -ENOMEM;
 		goto out;
 	}
+
 	for (i = 0; i < resp->count; i++)
 		outbuf[i] = resp->app_ids[i];
 
@@ -318,11 +318,10 @@ out:
 	return ret;
 }
 
-static int bh_proxy_download_javata(
-		int conn_idx,
-		uuid_be ta_id,
-		const char *ta_pkg,
-		unsigned int pkg_len)
+static int bh_proxy_download_javata(int conn_idx,
+				    uuid_be ta_id,
+				    const char *ta_pkg,
+				    unsigned int pkg_len)
 {
 	int ret;
 	char cmdbuf[CMDBUF_SIZE];
@@ -341,7 +340,7 @@ static int bh_proxy_download_javata(
 	cmd->appid = ta_id;
 
 	ret = bh_cmd_transfer(conn_idx, (char *) h, sizeof(*h) + sizeof(*cmd),
-			ta_pkg, pkg_len, rrmap_add(conn_idx, &rr));
+			      ta_pkg, pkg_len, rrmap_add(conn_idx, &rr));
 
 	if (!ret)
 		ret = rr.code;
@@ -351,15 +350,14 @@ static int bh_proxy_download_javata(
 	return ret;
 }
 
-static int bh_proxy_openjtasession(
-		int conn_idx,
-		uuid_be ta_id,
-		const char *init_buffer,
-		unsigned int init_len,
-		u64 *handle,
-		int *vm_conn_closed,
-		const char *ta_pkg,
-		unsigned int pkg_len)
+static int bh_proxy_openjtasession(int conn_idx,
+				   uuid_be ta_id,
+				   const char *init_buffer,
+				   unsigned int init_len,
+				   u64 *handle,
+				   int *vm_conn_closed,
+				   const char *ta_pkg,
+				   unsigned int pkg_len)
 {
 	int ret;
 	char cmdbuf[CMDBUF_SIZE];
@@ -390,7 +388,7 @@ static int bh_proxy_openjtasession(
 	cmd->appid = ta_id;
 
 	ret = bh_cmd_transfer(conn_idx, (char *) h, sizeof(*h) + sizeof(*cmd),
-			     (char *) init_buffer, init_len, seq);
+			      (char *) init_buffer, init_len, seq);
 
 	if (!ret)
 		ret = rr->code;
@@ -407,8 +405,8 @@ static int bh_proxy_openjtasession(
 					       ta_pkg, pkg_len);
 		if (!ret) {
 			ret = bh_cmd_transfer(conn_idx, (char *)h,
-					sizeof(*h) + sizeof(*cmd),
-					(char *)init_buffer, init_len, seq);
+					    sizeof(*h) + sizeof(*cmd),
+					    (char *)init_buffer, init_len, seq);
 
 			if (!ret)
 				ret = rr->code;
diff --git a/drivers/misc/mei/dal/dal_kdi.c b/drivers/misc/mei/dal/dal_kdi.c
index 159a497..1967be0 100644
--- a/drivers/misc/mei/dal/dal_kdi.c
+++ b/drivers/misc/mei/dal/dal_kdi.c
@@ -309,7 +309,7 @@ int dal_send_and_receive(u64 session_handle, int command_id, const u8 *input,
 	mutex_lock(&kdi_lock);
 
 	ret = bhp_send_and_recv(session_handle, command_id, input, input_len,
-				   (void **)output, output_len, response_code);
+				(void **)output, output_len, response_code);
 
 	if (ret)
 		pr_err("bhp_send_and_recv failed with status = %d\n", ret);
-- 
1.7.5.4

