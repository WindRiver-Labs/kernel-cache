From b5fe25579c82f23a754e23338e4f01919ab3c2b8 Mon Sep 17 00:00:00 2001
From: Dan Williams <dan.j.williams@intel.com>
Date: Tue, 10 Apr 2012 18:35:13 -0400
Subject: [PATCH 132/474] libata: export ata_host suspend/resume infrastructure for sas

commit 7859c15771098448cda7600090cc477b415edc9f from
git://git.kernel.org/pub/scm/linux/kernel/git/djbw/isci.git

This is a backported version of "libata: export ata_port suspend/resume
infrastructure for sas"

Export the common portion of host suspend/resume.  and allow sas to
perform these operations asynchronously (similar to the libsas async-ata
probe implmentation).  Async operation is determined by having an
external, rather than stack based, location for storing the result of
the operation.

Signed-off-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/ata/libata-core.c |   45 +++++++++++++++++++++++++++++++++++++--------
 include/linux/libata.h    |   11 +++++++++++
 2 files changed, 48 insertions(+), 8 deletions(-)

diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index cdcdb37..683b78b 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -5407,13 +5407,15 @@ bool ata_link_offline(struct ata_link *link)
 		(!slave || ata_phys_link_offline(slave));
 }
 
+static int ata_pm_result_ignore;
+
 #ifdef CONFIG_PM
 static int ata_host_request_pm(struct ata_host *host, pm_message_t mesg,
 			       unsigned int action, unsigned int ehi_flags,
-			       int wait)
+			       int *async)
 {
 	unsigned long flags;
-	int i, rc;
+	int i, rc = 0;
 
 	for (i = 0; i < host->n_ports; i++) {
 		struct ata_port *ap = host->ports[i];
@@ -5431,10 +5433,16 @@ static int ata_host_request_pm(struct ata_host *host, pm_message_t mesg,
 		spin_lock_irqsave(ap->lock, flags);
 
 		ap->pm_mesg = mesg;
-		if (wait) {
-			rc = 0;
+
+		/* in the async case caller guarantees 1 port per host,
+		 * and we force the issue below
+		 */
+		if (async && async != &ata_pm_result_ignore)
+			ap->pm_result = async;
+		else if (!async)
 			ap->pm_result = &rc;
-		}
+		else
+			ap->pm_result = NULL;
 
 		ap->pflags |= ATA_PFLAG_PM_PENDING;
 		ata_for_each_link(link, ap, HOST_FIRST) {
@@ -5447,7 +5455,7 @@ static int ata_host_request_pm(struct ata_host *host, pm_message_t mesg,
 		spin_unlock_irqrestore(ap->lock, flags);
 
 		/* wait and check result */
-		if (wait) {
+		if (!async) {
 			ata_port_wait_eh(ap);
 			WARN_ON(ap->pflags & ATA_PFLAG_PM_PENDING);
 			if (rc)
@@ -5458,6 +5466,26 @@ static int ata_host_request_pm(struct ata_host *host, pm_message_t mesg,
 	return 0;
 }
 
+/* sas ports don't participate in pm runtime management of ata_ports,
+ * and need to resume ata devices at the domain level, not the per-port
+ * level. sas suspend/resume is async to allow parallel port recovery
+ * since sas has multiple ata_port instances per Scsi_Host.
+ */
+int ata_sas_port_async_suspend(struct ata_port *ap, int *async)
+{
+	return ata_host_request_pm(ap->host, PMSG_SUSPEND, 0, ATA_EHI_QUIET,
+				   async);
+}
+EXPORT_SYMBOL_GPL(ata_sas_port_async_suspend);
+
+int ata_sas_port_async_resume(struct ata_port *ap, int *async)
+{
+	return ata_host_request_pm(ap->host, PMSG_ON, ATA_EH_RESET,
+				   ATA_EHI_NO_AUTOPSY | ATA_EHI_QUIET,
+				   async);
+}
+EXPORT_SYMBOL_GPL(ata_sas_port_async_resume);
+
 /**
  *	ata_host_suspend - suspend host
  *	@host: host to suspend
@@ -5495,7 +5523,7 @@ int ata_host_suspend(struct ata_host *host, pm_message_t mesg)
 	if (mesg.event == PM_EVENT_SUSPEND)
 		ehi_flags |= ATA_EHI_NO_AUTOPSY | ATA_EHI_NO_RECOVERY;
 
-	rc = ata_host_request_pm(host, mesg, 0, ehi_flags, 1);
+	rc = ata_host_request_pm(host, mesg, 0, ehi_flags, NULL);
 	if (rc == 0)
 		host->dev->power.power_state = mesg;
 	return rc;
@@ -5515,7 +5543,8 @@ int ata_host_suspend(struct ata_host *host, pm_message_t mesg)
 void ata_host_resume(struct ata_host *host)
 {
 	ata_host_request_pm(host, PMSG_ON, ATA_EH_RESET,
-			    ATA_EHI_NO_AUTOPSY | ATA_EHI_QUIET, 0);
+			    ATA_EHI_NO_AUTOPSY | ATA_EHI_QUIET,
+			    &ata_pm_result_ignore);
 	host->dev->power.power_state = PMSG_ON;
 
 	/* reenable link pm */
diff --git a/include/linux/libata.h b/include/linux/libata.h
index 10d4e67..cae639a 100644
--- a/include/linux/libata.h
+++ b/include/linux/libata.h
@@ -985,6 +985,17 @@ extern bool ata_link_offline(struct ata_link *link);
 #ifdef CONFIG_PM
 extern int ata_host_suspend(struct ata_host *host, pm_message_t mesg);
 extern void ata_host_resume(struct ata_host *host);
+extern int ata_sas_port_async_suspend(struct ata_port *ap, int *async);
+extern int ata_sas_port_async_resume(struct ata_port *ap, int *async);
+#else
+static inline int ata_sas_port_async_suspend(struct ata_port *ap, int *async)
+{
+	return 0;
+}
+static inline int ata_sas_port_async_resume(struct ata_port *ap, int *async)
+{
+	return 0;
+}
 #endif
 extern int ata_ratelimit(void);
 extern u32 ata_wait_register(void __iomem *reg, u32 mask, u32 val,
-- 
1.7.0

