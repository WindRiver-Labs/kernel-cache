From 2fbb558f2ede51d7b89bf421d92f5e42cb6fb184 Mon Sep 17 00:00:00 2001
From: Dave Jiang <dave.jiang@intel.com>
Date: Sat, 26 Mar 2011 17:14:07 -0700
Subject: [PATCH 085/478] isci: Remove "screaming" data types

upstream: de728b7d72089330603819a74255a0469780fd0e

Converting the all CAPS data types to lower case.

Reported-by: Christoph Hellwig <hch@infradead.org>
Signed-off-by: Dave Jiang <dave.jiang@intel.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>

Integrated-by: Hui Wang <Hui.Wang@windriver.com>
---
 drivers/scsi/isci/core/sati_translator_sequence.h  |   16 ++--
 drivers/scsi/isci/core/sci_base_port.h             |   44 ++++++-------
 drivers/scsi/isci/core/sci_base_request.h          |   10 ++--
 drivers/scsi/isci/core/sci_base_state.h            |    8 +-
 drivers/scsi/isci/core/sci_base_state_machine.c    |    4 +-
 drivers/scsi/isci/core/sci_status.h                |    6 +-
 drivers/scsi/isci/core/scic_port.h                 |    2 +-
 drivers/scsi/isci/core/scic_sds_controller.c       |    2 +-
 drivers/scsi/isci/core/scic_sds_controller.h       |    4 +-
 drivers/scsi/isci/core/scic_sds_phy.h              |    8 +-
 drivers/scsi/isci/core/scic_sds_port.c             |    7 +--
 drivers/scsi/isci/core/scic_sds_port.h             |   72 ++++++++++---------
 .../isci/core/scic_sds_port_configuration_agent.c  |    2 +-
 .../isci/core/scic_sds_port_configuration_agent.h  |    6 +-
 .../scsi/isci/core/scic_sds_remote_node_context.h  |    4 +-
 drivers/scsi/isci/core/scic_sds_request.h          |    8 +-
 .../scsi/isci/core/scic_sds_stp_packet_request.c   |    4 +-
 .../scsi/isci/core/scic_sds_stp_packet_request.h   |    2 +-
 drivers/scsi/isci/core/scic_sds_stp_pio_request.h  |    2 +-
 drivers/scsi/isci/core/scic_sds_stp_request.h      |   12 ++--
 .../isci/core/scic_sds_unsolicited_frame_control.h |    6 +-
 drivers/scsi/isci/core/scu_registers.h             |   62 ++++++++---------
 drivers/scsi/isci/core/scu_task_context.h          |   48 +++++++-------
 drivers/scsi/isci/probe_roms.h                     |    2 +-
 24 files changed, 167 insertions(+), 174 deletions(-)

diff --git a/drivers/scsi/isci/core/sati_translator_sequence.h b/drivers/scsi/isci/core/sati_translator_sequence.h
index 592570d..915724c 100644
--- a/drivers/scsi/isci/core/sati_translator_sequence.h
+++ b/drivers/scsi/isci/core/sati_translator_sequence.h
@@ -67,7 +67,7 @@
 #include "sati_device.h"
 
 /**
- * enum _SATI_TRANSLATOR_SEQUENCE_TYPE - This enumeration defines the possible
+ * enum _sati_translator_sequence_type - This enumeration defines the possible
  *    sequence types for the translator.
  *
  *
@@ -172,7 +172,7 @@ enum sati_translator_sequence_type {
  *
  *
  */
-typedef  struct SATI_MODE_SELECT_PROCESSING_STATE {
+struct sati_mode_select_processing_state {
 	u8 *mode_pages;
 	u32 mode_page_offset;
 	u32 mode_pages_size;
@@ -180,11 +180,10 @@ typedef  struct SATI_MODE_SELECT_PROCESSING_STATE {
 	u32 total_ata_command_sent;
 	u32 ata_command_sent_for_cmp; /* cmp: current mode page */
 	bool current_mode_page_processed;
-
-} SATI_MODE_SELECT_PROCESSING_STATE_T;
+};
 
 
-enum SATI_REASSIGN_BLOCKS_ATA_COMMAND_STATUS {
+enum sati_reassign_blocks_ata_command_status {
 	SATI_REASSIGN_BLOCKS_READY_TO_SEND,
 	SATI_REASSIGN_BLOCKS_COMMAND_FAIL,
 	SATI_REASSIGN_BLOCKS_COMMAND_SUCCESS,
@@ -204,7 +203,7 @@ struct sati_reassign_blocks_processing_state {
 	u32 size_of_data_processed;
 	u32 ata_command_sent_for_current_lba;
 	bool current_lba_processed;
-	enum     SATI_REASSIGN_BLOCKS_ATA_COMMAND_STATUS ata_command_status;
+	enum  sati_reassign_blocks_ata_command_status ata_command_status;
 
 };
 
@@ -291,8 +290,9 @@ struct sati_translator_sequence {
 		u32 translated_command;
 		u32 move_sector_count;
 		u32 scratch;
-		struct sati_reassign_blocks_processing_state reassign_blocks_process_state;
-		SATI_MODE_SELECT_PROCESSING_STATE_T process_state;
+		struct sati_reassign_blocks_processing_state
+			reassign_blocks_process_state;
+		struct sati_mode_select_processing_state process_state;
 		struct sati_atapi_data sati_atapi_data;
 	} command_specific_data;
 
diff --git a/drivers/scsi/isci/core/sci_base_port.h b/drivers/scsi/isci/core/sci_base_port.h
index b931c3c..252d48c 100644
--- a/drivers/scsi/isci/core/sci_base_port.h
+++ b/drivers/scsi/isci/core/sci_base_port.h
@@ -128,19 +128,16 @@ struct sci_base_port {
 
 struct sci_base_phy;
 
-typedef enum sci_status (*SCI_BASE_PORT_HANDLER_T)(
-	struct sci_base_port *
-	);
+typedef enum sci_status (*sci_base_port_handler_t) (
+	struct sci_base_port *);
 
-typedef enum sci_status (*SCI_BASE_PORT_PHY_HANDLER_T)(
+typedef enum sci_status (*sci_base_port_phy_handler_t) (
 	struct sci_base_port *,
-	struct sci_base_phy *
-	);
+	struct sci_base_phy *);
 
-typedef enum sci_status (*SCI_BASE_PORT_RESET_HANDLER_T)(
+typedef enum sci_status (*sci_base_port_reset_handler_t) (
 	struct sci_base_port *,
-	u32 timeout
-	);
+	u32 timeout);
 
 /**
  * struct sci_base_port_state_handler - This structure contains all of the
@@ -152,40 +149,39 @@ typedef enum sci_status (*SCI_BASE_PORT_RESET_HANDLER_T)(
  */
 struct sci_base_port_state_handler {
 	/**
-	 * The start_handler specifies the method invoked when a user attempts to
-	 * start a port.
+	 * The start_handler specifies the method invoked when a user
+	 * attempts to start a port.
 	 */
-	SCI_BASE_PORT_HANDLER_T start_handler;
+	sci_base_port_handler_t start_handler;
 
 	/**
-	 * The stop_handler specifies the method invoked when a user attempts to
-	 * stop a port.
+	 * The stop_handler specifies the method invoked when a user
+	 * attempts to stop a port.
 	 */
-	SCI_BASE_PORT_HANDLER_T stop_handler;
+	sci_base_port_handler_t stop_handler;
 
 	/**
 	 * The destruct_handler specifies the method invoked when attempting to
 	 * destruct a port.
 	 */
-	SCI_BASE_PORT_HANDLER_T destruct_handler;
+	sci_base_port_handler_t destruct_handler;
 
 	/**
-	 * The reset_handler specifies the method invoked when a user attempts to
-	 * hard reset a port.
+	 * The reset_handler specifies the method invoked when a user
+	 * attempts to hard reset a port.
 	 */
-	SCI_BASE_PORT_RESET_HANDLER_T reset_handler;
+	sci_base_port_reset_handler_t reset_handler;
 
 	/**
-	 * The add_phy_handler specifies the method invoked when a user attempts to
-	 * add another phy into the port.
+	 * The add_phy_handler specifies the method invoked when a user
+	 * attempts to add another phy into the port.
 	 */
-	SCI_BASE_PORT_PHY_HANDLER_T add_phy_handler;
+	sci_base_port_phy_handler_t add_phy_handler;
 
 	/**
 	 * The remove_phy_handler specifies the method invoked when a user
 	 * attempts to remove a phy from the port.
 	 */
-	SCI_BASE_PORT_PHY_HANDLER_T remove_phy_handler;
-
+	sci_base_port_phy_handler_t remove_phy_handler;
 };
 #endif /* _SCI_BASE_PORT_H_ */
diff --git a/drivers/scsi/isci/core/sci_base_request.h b/drivers/scsi/isci/core/sci_base_request.h
index d1b2195..223aa4c 100644
--- a/drivers/scsi/isci/core/sci_base_request.h
+++ b/drivers/scsi/isci/core/sci_base_request.h
@@ -129,7 +129,7 @@ struct sci_base_request {
 	struct sci_base_state_machine state_machine;
 };
 
-typedef enum sci_status (*SCI_BASE_REQUEST_HANDLER_T)(
+typedef enum sci_status (*sci_base_request_handler_t)(
 	struct sci_base_request *this_request
 	);
 
@@ -146,25 +146,25 @@ struct sci_base_request_state_handler {
 	 * The start_handler specifies the method invoked when a user attempts to
 	 * start a request.
 	 */
-	SCI_BASE_REQUEST_HANDLER_T start_handler;
+	sci_base_request_handler_t start_handler;
 
 	/**
 	 * The abort_handler specifies the method invoked when a user attempts to
 	 * abort a request.
 	 */
-	SCI_BASE_REQUEST_HANDLER_T abort_handler;
+	sci_base_request_handler_t abort_handler;
 
 	/**
 	 * The complete_handler specifies the method invoked when a user attempts to
 	 * complete a request.
 	 */
-	SCI_BASE_REQUEST_HANDLER_T complete_handler;
+	sci_base_request_handler_t complete_handler;
 
 	/**
 	 * The destruct_handler specifies the method invoked when a user attempts to
 	 * destruct a request.
 	 */
-	SCI_BASE_REQUEST_HANDLER_T destruct_handler;
+	sci_base_request_handler_t destruct_handler;
 
 };
 
diff --git a/drivers/scsi/isci/core/sci_base_state.h b/drivers/scsi/isci/core/sci_base_state.h
index d6b9c1a..4272a6f 100644
--- a/drivers/scsi/isci/core/sci_base_state.h
+++ b/drivers/scsi/isci/core/sci_base_state.h
@@ -58,11 +58,11 @@
 
 #include "sci_object.h"
 
-typedef void (*SCI_BASE_STATE_HANDLER_T)(
+typedef void (*sci_base_state_handler_t)(
 	void
 	);
 
-typedef void (*SCI_STATE_TRANSITION_T)(
+typedef void (*sci_state_transition_t)(
 	struct sci_base_object *base_object
 	);
 
@@ -77,13 +77,13 @@ struct sci_base_state {
 	 * This field is a function pointer that defines the method to be
 	 * invoked when the state is entered.
 	 */
-	SCI_STATE_TRANSITION_T enter_state;
+	sci_state_transition_t enter_state;
 
 	/**
 	 * This field is a function pointer that defines the method to be
 	 * invoked when the state is exited.
 	 */
-	SCI_STATE_TRANSITION_T exit_state;
+	sci_state_transition_t exit_state;
 
 };
 
diff --git a/drivers/scsi/isci/core/sci_base_state_machine.c b/drivers/scsi/isci/core/sci_base_state_machine.c
index 5b1e8da..bc416d5 100644
--- a/drivers/scsi/isci/core/sci_base_state_machine.c
+++ b/drivers/scsi/isci/core/sci_base_state_machine.c
@@ -65,7 +65,7 @@
 static void sci_state_machine_exit_state(struct sci_base_state_machine *sm)
 {
 	u32 state = sm->current_state_id;
-	SCI_STATE_TRANSITION_T exit = sm->state_table[state].exit_state;
+	sci_state_transition_t exit = sm->state_table[state].exit_state;
 
 	if (exit)
 		exit(sm->state_machine_owner);
@@ -74,7 +74,7 @@ static void sci_state_machine_exit_state(struct sci_base_state_machine *sm)
 static void sci_state_machine_enter_state(struct sci_base_state_machine *sm)
 {
 	u32 state = sm->current_state_id;
-	SCI_STATE_TRANSITION_T enter = sm->state_table[state].enter_state;
+	sci_state_transition_t enter = sm->state_table[state].enter_state;
 
 	if (enter)
 		enter(sm->state_machine_owner);
diff --git a/drivers/scsi/isci/core/sci_status.h b/drivers/scsi/isci/core/sci_status.h
index 72b6108..8b66619 100644
--- a/drivers/scsi/isci/core/sci_status.h
+++ b/drivers/scsi/isci/core/sci_status.h
@@ -65,7 +65,7 @@
 
 
 /**
- * enum _SCI_STATUS - This is the general return status enumeration for non-IO,
+ * enum sci_status - This is the general return status enumeration for non-IO,
  *    non-task management related SCI interface methods.
  *
  *
@@ -347,7 +347,7 @@ enum sci_status {
 };
 
 /**
- * enum _SCI_IO_STATUS - This enumeration depicts all of the possible IO
+ * enum sci_io_status - This enumeration depicts all of the possible IO
  *    completion status values.  Each value in this enumeration maps directly
  *    to a value in the enum sci_status enumeration.  Please refer to that
  *    enumeration for detailed comments concerning what the status represents.
@@ -380,7 +380,7 @@ enum sci_io_status {
 };
 
 /**
- * enum _SCI_TASK_STATUS - This enumeration depicts all of the possible task
+ * enum sci_task_status - This enumeration depicts all of the possible task
  *    completion status values.  Each value in this enumeration maps directly
  *    to a value in the enum sci_status enumeration.  Please refer to that
  *    enumeration for detailed comments concerning what the status represents.
diff --git a/drivers/scsi/isci/core/scic_port.h b/drivers/scsi/isci/core/scic_port.h
index 5829533..56d0507 100644
--- a/drivers/scsi/isci/core/scic_port.h
+++ b/drivers/scsi/isci/core/scic_port.h
@@ -61,7 +61,7 @@
 
 struct scic_sds_port;
 
-enum SCIC_PORT_NOT_READY_REASON_CODE {
+enum scic_port_not_ready_reason_code {
 	SCIC_PORT_NOT_READY_NO_ACTIVE_PHYS,
 	SCIC_PORT_NOT_READY_HARD_RESET_REQUESTED,
 	SCIC_PORT_NOT_READY_INVALID_PORT_CONFIGURATION,
diff --git a/drivers/scsi/isci/core/scic_sds_controller.c b/drivers/scsi/isci/core/scic_sds_controller.c
index f20d0eb..9266fbe 100644
--- a/drivers/scsi/isci/core/scic_sds_controller.c
+++ b/drivers/scsi/isci/core/scic_sds_controller.c
@@ -705,7 +705,7 @@ static enum sci_status scic_sds_controller_stop_ports(struct scic_sds_controller
 
 	for (index = 0; index < scic->logical_port_entries; index++) {
 		struct scic_sds_port *sci_port = &scic->port_table[index];
-		SCI_BASE_PORT_HANDLER_T stop;
+		sci_base_port_handler_t stop;
 
 		stop = sci_port->state_handlers->parent.stop_handler;
 		port_status = stop(&sci_port->parent);
diff --git a/drivers/scsi/isci/core/scic_sds_controller.h b/drivers/scsi/isci/core/scic_sds_controller.h
index 22b5f2c..fd78148 100644
--- a/drivers/scsi/isci/core/scic_sds_controller.h
+++ b/drivers/scsi/isci/core/scic_sds_controller.h
@@ -90,12 +90,12 @@ struct scic_sds_controller;
 #define SCU_COMPLETION_RAM_ALIGNMENT            (64)
 
 /**
- * enum SCIC_SDS_CONTROLLER_MEMORY_DESCRIPTORS -
+ * enum scic_sds_controller_memory_descriptors -
  *
  * This enumeration depects the types of MDEs that are going to be created for
  * the controller object.
  */
-enum SCIC_SDS_CONTROLLER_MEMORY_DESCRIPTORS {
+enum scic_sds_controller_memory_descriptors {
 	/**
 	 * Completion queue MDE entry
 	 */
diff --git a/drivers/scsi/isci/core/scic_sds_phy.h b/drivers/scsi/isci/core/scic_sds_phy.h
index 4745a79..7f7a045 100644
--- a/drivers/scsi/isci/core/scic_sds_phy.h
+++ b/drivers/scsi/isci/core/scic_sds_phy.h
@@ -92,11 +92,11 @@ struct scic_sds_port;
 #define SCIC_SDS_SATA_LINK_TRAINING_TIMEOUT  250
 
 /**
- * enum SCIC_SDS_PHY_STARTING_SUBSTATES -
+ * enum scic_sds_phy_starting_substates -
  *
  *
  */
-enum SCIC_SDS_PHY_STARTING_SUBSTATES {
+enum scic_sds_phy_starting_substates {
 	/**
 	 * Initial state
 	 */
@@ -156,7 +156,7 @@ struct scic_sds_controller;
  *
  *
  */
-enum SCIC_SDS_PHY_PROTOCOL {
+enum scic_sds_phy_protocol {
 	/**
 	 * This is an unknown phy type since there is either nothing on the other
 	 * end or we have not detected the phy type as yet.
@@ -202,7 +202,7 @@ struct scic_sds_phy {
 	 * field contains a legitamite value once the PHY has link trained with
 	 * a remote phy.
 	 */
-	enum SCIC_SDS_PHY_PROTOCOL protocol;
+	enum scic_sds_phy_protocol protocol;
 
 	/**
 	 * This field specifies the index with which this phy is associated (0-3).
diff --git a/drivers/scsi/isci/core/scic_sds_port.c b/drivers/scsi/isci/core/scic_sds_port.c
index 0a95f64..88b892d 100644
--- a/drivers/scsi/isci/core/scic_sds_port.c
+++ b/drivers/scsi/isci/core/scic_sds_port.c
@@ -620,15 +620,12 @@ enum sci_status scic_port_get_properties(
 }
 
 /**
- * scic_port_hard_reset() - This method will request the SCI implementation to
- *    perform a HARD RESET on the SAS Port.  If/When the HARD RESET completes
- *    the SCI user will be notified via an SCI OS callback indicating a direct
- *    attached device was found.
+ * scic_port_hard_reset() - perform port hard reset
  * @port: a handle corresponding to the SAS port to be hard reset.
  * @reset_timeout: This parameter specifies the number of milliseconds in which
  *    the port reset operation should complete.
  *
- * The SCI User callback in SCIC_USER_CALLBACKS_T will only be called once for
+ * The SCI User callback in scic_user_callbacks_t will only be called once for
  * each phy in the SAS Port at completion of the hard reset sequence. Return a
  * status indicating whether the hard reset started successfully. SCI_SUCCESS
  * This value is returned if the hard reset operation started successfully.
diff --git a/drivers/scsi/isci/core/scic_sds_port.h b/drivers/scsi/isci/core/scic_sds_port.h
index 8167f5e..a5aa9e1 100644
--- a/drivers/scsi/isci/core/scic_sds_port.h
+++ b/drivers/scsi/isci/core/scic_sds_port.h
@@ -84,21 +84,23 @@
  * This enumeration depicts all of the states for the core port ready substate
  * machine.
  */
-enum SCIC_SDS_PORT_READY_SUBSTATES {
+enum scic_sds_port_ready_substates {
 	/**
-	 * The substate where the port is started and ready but has no active phys.
+	 * The substate where the port is started and ready but has no
+	 * active phys.
 	 */
 	SCIC_SDS_PORT_READY_SUBSTATE_WAITING,
 
 	/**
-	 * The substate where the port is started and ready and there is at least one
-	 * phy operational.
+	 * The substate where the port is started and ready and there is
+	 * at least one phy operational.
 	 */
 	SCIC_SDS_PORT_READY_SUBSTATE_OPERATIONAL,
 
 	/**
-	 * The substate where the port is started and there was an add/remove phy
-	 * event.  This state is only used in Automatic Port Configuration Mode (APC)
+	 * The substate where the port is started and there was an
+	 * add/remove phy event.  This state is only used in Automatic
+	 * Port Configuration Mode (APC)
 	 */
 	SCIC_SDS_PORT_READY_SUBSTATE_CONFIGURING,
 
@@ -122,9 +124,9 @@ struct scic_sds_port {
 	struct sci_base_port parent;
 
 	/**
-	 * This field is the port index that is reported to the SCI USER.  This allows
-	 * the actual hardware physical port to change without the SCI USER getting a
-	 * different answer for the get port index.
+	 * This field is the port index that is reported to the SCI USER.
+	 * This allows the actual hardware physical port to change without
+	 * the SCI USER getting a different answer for the get port index.
 	 */
 	u8 logical_port_index;
 
@@ -134,9 +136,9 @@ struct scic_sds_port {
 	u8 physical_port_index;
 
 	/**
-	 * This field contains the active phy mask for the port.  This mask is used in
-	 * conjunction with the phy state to determine which phy to select for some
-	 * port operations.
+	 * This field contains the active phy mask for the port.
+	 * This mask is used in conjunction with the phy state to determine
+	 * which phy to select for some port operations.
 	 */
 	u8 active_phy_mask;
 
@@ -150,8 +152,8 @@ struct scic_sds_port {
 	u32 started_request_count;
 
 	/**
-	 * This field contains the number of devices assigned to this port.  It is
-	 * used to control port start requests.
+	 * This field contains the number of devices assigned to this port.
+	 * It is used to control port start requests.
 	 */
 	u32 assigned_device_count;
 
@@ -167,7 +169,8 @@ struct scic_sds_port {
 	struct scic_sds_phy *phy_table[SCI_MAX_PHYS];
 
 	/**
-	 * This field is a pointer back to the controller that owns this port object.
+	 * This field is a pointer back to the controller that owns this
+	 * port object.
 	 */
 	struct scic_sds_controller *owning_controller;
 
@@ -178,8 +181,8 @@ struct scic_sds_port {
 
 	/**
 	 * This field points to the current set of state handlers for this port
-	 * object.  These state handlers are assigned at each enter state of the state
-	 * machine.
+	 * object.  These state handlers are assigned at each enter state of
+	 * the state machine.
 	 */
 	struct scic_sds_port_state_handler *state_handlers;
 
@@ -191,17 +194,18 @@ struct scic_sds_port {
 	/* / Memory mapped hardware register space */
 
 	/**
-	 * This field is the pointer to the port task scheduler registers for the SCU
-	 * hardware.
+	 * This field is the pointer to the port task scheduler registers
+	 * for the SCU hardware.
 	 */
-	struct scu_port_task_scheduler_registers __iomem *port_task_scheduler_registers;
+	struct scu_port_task_scheduler_registers __iomem
+		*port_task_scheduler_registers;
 
 	/**
-	 * This field is identical for all port objects and points to the port task
-	 * scheduler group PE configuration registers.  It is used to assign PEs to a
-	 * port.
+	 * This field is identical for all port objects and points to the port
+	 * task scheduler group PE configuration registers.
+	 * It is used to assign PEs to a port.
 	 */
-	SCU_PORT_PE_CONFIGURATION_REGISTER_T *port_pe_configuration_register;
+	u32 *port_pe_configuration_register;
 
 	/**
 	 * This field is the VIIT register space for ths port object.
@@ -211,13 +215,13 @@ struct scic_sds_port {
 };
 
 
-typedef enum sci_status (*SCIC_SDS_PORT_EVENT_HANDLER_T)(struct scic_sds_port *, u32);
+typedef enum sci_status (*scic_sds_port_event_handler_t)(struct scic_sds_port *, u32);
 
-typedef enum sci_status (*SCIC_SDS_PORT_FRAME_HANDLER_T)(struct scic_sds_port *, u32);
+typedef enum sci_status (*scic_sds_port_frame_handler_t)(struct scic_sds_port *, u32);
 
-typedef void (*SCIC_SDS_PORT_LINK_HANDLER_T)(struct scic_sds_port *, struct scic_sds_phy *);
+typedef void (*scic_sds_port_link_handler_t)(struct scic_sds_port *, struct scic_sds_phy *);
 
-typedef enum sci_status (*SCIC_SDS_PORT_IO_REQUEST_HANDLER_T)(
+typedef enum sci_status (*scic_sds_port_io_request_handler_t)(
 	struct scic_sds_port *,
 	struct scic_sds_remote_device *,
 	struct scic_sds_request *);
@@ -225,14 +229,14 @@ typedef enum sci_status (*SCIC_SDS_PORT_IO_REQUEST_HANDLER_T)(
 struct scic_sds_port_state_handler {
 	struct sci_base_port_state_handler parent;
 
-	SCIC_SDS_PORT_FRAME_HANDLER_T frame_handler;
-	SCIC_SDS_PORT_EVENT_HANDLER_T event_handler;
+	scic_sds_port_frame_handler_t frame_handler;
+	scic_sds_port_event_handler_t event_handler;
 
-	SCIC_SDS_PORT_LINK_HANDLER_T link_up_handler;
-	SCIC_SDS_PORT_LINK_HANDLER_T link_down_handler;
+	scic_sds_port_link_handler_t link_up_handler;
+	scic_sds_port_link_handler_t link_down_handler;
 
-	SCIC_SDS_PORT_IO_REQUEST_HANDLER_T start_io_handler;
-	SCIC_SDS_PORT_IO_REQUEST_HANDLER_T complete_io_handler;
+	scic_sds_port_io_request_handler_t start_io_handler;
+	scic_sds_port_io_request_handler_t complete_io_handler;
 
 };
 
diff --git a/drivers/scsi/isci/core/scic_sds_port_configuration_agent.c b/drivers/scsi/isci/core/scic_sds_port_configuration_agent.c
index d2d3f52..22703b3 100644
--- a/drivers/scsi/isci/core/scic_sds_port_configuration_agent.c
+++ b/drivers/scsi/isci/core/scic_sds_port_configuration_agent.c
@@ -820,7 +820,7 @@ enum sci_status scic_sds_port_configuration_agent_initialize(
 	struct scic_sds_port_configuration_agent *port_agent)
 {
 	enum sci_status status = SCI_SUCCESS;
-	enum SCIC_PORT_CONFIGURATION_MODE mode;
+	enum scic_port_configuration_mode mode;
 	struct isci_host *ihost = sci_object_get_association(scic);
 
 	mode = scic->oem_parameters.sds1.controller.mode_type;
diff --git a/drivers/scsi/isci/core/scic_sds_port_configuration_agent.h b/drivers/scsi/isci/core/scic_sds_port_configuration_agent.h
index 4146735..56a40a7 100644
--- a/drivers/scsi/isci/core/scic_sds_port_configuration_agent.h
+++ b/drivers/scsi/isci/core/scic_sds_port_configuration_agent.h
@@ -71,7 +71,7 @@ struct scic_sds_port_configuration_agent;
 struct scic_sds_port;
 struct scic_sds_phy;
 
-typedef void (*SCIC_SDS_PORT_CONFIGURATION_AGENT_PHY_HANDLER_T)(
+typedef void (*scic_sds_port_configuration_agent_phy_handler_t)(
 	struct scic_sds_controller *,
 	struct scic_sds_port_configuration_agent *,
 	struct scic_sds_port *,
@@ -91,8 +91,8 @@ struct scic_sds_port_configuration_agent {
 
 	bool timer_pending;
 
-	SCIC_SDS_PORT_CONFIGURATION_AGENT_PHY_HANDLER_T link_up_handler;
-	SCIC_SDS_PORT_CONFIGURATION_AGENT_PHY_HANDLER_T link_down_handler;
+	scic_sds_port_configuration_agent_phy_handler_t link_up_handler;
+	scic_sds_port_configuration_agent_phy_handler_t link_down_handler;
 
 	void *timer;
 
diff --git a/drivers/scsi/isci/core/scic_sds_remote_node_context.h b/drivers/scsi/isci/core/scic_sds_remote_node_context.h
index eccad55..e21abe2 100644
--- a/drivers/scsi/isci/core/scic_sds_remote_node_context.h
+++ b/drivers/scsi/isci/core/scic_sds_remote_node_context.h
@@ -213,7 +213,7 @@ enum scis_sds_remote_node_context_states {
  * This enumeration is used to define the end destination state for the remote
  * node context.
  */
-enum SCIC_SDS_REMOTE_NODE_CONTEXT_DESTINATION_STATE {
+enum scic_sds_remote_node_context_destination_state {
 	SCIC_SDS_REMOTE_NODE_DESTINATION_STATE_UNSPECIFIED,
 	SCIC_SDS_REMOTE_NODE_DESTINATION_STATE_READY,
 	SCIC_SDS_REMOTE_NODE_DESTINATION_STATE_FINAL
@@ -257,7 +257,7 @@ struct scic_sds_remote_node_context {
 	 * state.  This can cause an automatic resume on receiving a suspension
 	 * notification.
 	 */
-	enum SCIC_SDS_REMOTE_NODE_CONTEXT_DESTINATION_STATE destination_state;
+	enum scic_sds_remote_node_context_destination_state destination_state;
 
 	/**
 	 * This field contains the callback function that the user requested to be
diff --git a/drivers/scsi/isci/core/scic_sds_request.h b/drivers/scsi/isci/core/scic_sds_request.h
index c54d8ef..286b749 100644
--- a/drivers/scsi/isci/core/scic_sds_request.h
+++ b/drivers/scsi/isci/core/scic_sds_request.h
@@ -74,7 +74,7 @@ struct scic_sds_remote_device;
 struct scic_sds_io_request_state_handler;
 
 /**
- * enum _SCIC_SDS_IO_REQUEST_STARTED_TASK_MGMT_SUBSTATES - This enumeration
+ * enum _scic_sds_io_request_started_task_mgmt_substates - This enumeration
  *    depicts all of the substates for a task management request to be
  *    performed in the STARTED super-state.
  *
@@ -98,7 +98,7 @@ enum scic_sds_raw_request_started_task_mgmt_substates {
 
 
 /**
- * enum _SCIC_SDS_SMP_REQUEST_STARTED_SUBSTATES - This enumeration depicts all
+ * enum _scic_sds_smp_request_started_substates - This enumeration depicts all
  *    of the substates for a SMP request to be performed in the STARTED
  *    super-state.
  *
@@ -120,7 +120,7 @@ enum scic_sds_smp_request_started_substates {
 };
 
 /**
- * struct SCIC_SDS_IO_REQUEST - This structure contains or references all of
+ * struct scic_sds_request - This structure contains or references all of
  *    the data necessary to process a task management or normal IO request.
  *
  *
@@ -328,7 +328,7 @@ extern const struct sci_base_state scic_sds_io_request_started_task_mgmt_substat
  * scic_sds_io_request_tc_completion() -
  *
  * This macro invokes the core state task completion handler for the
- * SCIC_SDS_IO_REQUEST_T object.
+ * struct scic_sds_io_request object.
  */
 #define scic_sds_io_request_tc_completion(this_request, completion_code) \
 	{ \
diff --git a/drivers/scsi/isci/core/scic_sds_stp_packet_request.c b/drivers/scsi/isci/core/scic_sds_stp_packet_request.c
index 97dc9bf..9635b37 100644
--- a/drivers/scsi/isci/core/scic_sds_stp_packet_request.c
+++ b/drivers/scsi/isci/core/scic_sds_stp_packet_request.c
@@ -146,7 +146,7 @@ void scu_stp_packet_request_command_phase_construct_task_context(
 	}
 
 	/* sata header */
-	memset(&(task_context->type.stp), 0, sizeof(struct STP_TASK_CONTEXT));
+	memset(&(task_context->type.stp), 0, sizeof(struct stp_task_context));
 	task_context->type.stp.fis_type = SATA_FIS_TYPE_DATA;
 
 	/*
@@ -213,7 +213,7 @@ void scu_stp_packet_request_command_phase_reconstruct_raw_frame_task_context(
 	memset(this_request->command_buffer, 0, sizeof(struct sata_fis_reg_h2d));
 	memcpy(((u8 *)this_request->command_buffer + sizeof(u32)), atapi_cdb, atapi_cdb_length);
 
-	memset(&(task_context->type.stp), 0, sizeof(struct STP_TASK_CONTEXT));
+	memset(&(task_context->type.stp), 0, sizeof(struct stp_task_context));
 	task_context->type.stp.fis_type = SATA_FIS_TYPE_DATA;
 
 	/*
diff --git a/drivers/scsi/isci/core/scic_sds_stp_packet_request.h b/drivers/scsi/isci/core/scic_sds_stp_packet_request.h
index 2a7aec9..eebfff3 100644
--- a/drivers/scsi/isci/core/scic_sds_stp_packet_request.h
+++ b/drivers/scsi/isci/core/scic_sds_stp_packet_request.h
@@ -70,7 +70,7 @@
  *
  * This is the enumeration of the SATA PIO DATA IN started substate machine.
  */
-enum _SCIC_SDS_STP_PACKET_REQUEST_STARTED_SUBSTATES {
+enum _scic_sds_stp_packet_request_started_substates {
 	/**
 	 * While in this state the IO request object is waiting for the TC completion
 	 * notification for the H2D Register FIS
diff --git a/drivers/scsi/isci/core/scic_sds_stp_pio_request.h b/drivers/scsi/isci/core/scic_sds_stp_pio_request.h
index d4dc118..d0ae590 100644
--- a/drivers/scsi/isci/core/scic_sds_stp_pio_request.h
+++ b/drivers/scsi/isci/core/scic_sds_stp_pio_request.h
@@ -72,7 +72,7 @@
  *
  * This is the enumeration of the SATA PIO DATA IN started substate machine.
  */
-enum _SCIC_SDS_STP_REQUEST_STARTED_PIO_SUBSTATES {
+enum _scic_sds_stp_request_started_pio_substates {
 	/**
 	 * While in this state the IO request object is waiting for the TC completion
 	 * notification for the H2D Register FIS
diff --git a/drivers/scsi/isci/core/scic_sds_stp_request.h b/drivers/scsi/isci/core/scic_sds_stp_request.h
index 1074879..cb4d2d6 100644
--- a/drivers/scsi/isci/core/scic_sds_stp_request.h
+++ b/drivers/scsi/isci/core/scic_sds_stp_request.h
@@ -134,36 +134,36 @@ struct scic_sds_stp_request {
 };
 
 /**
- * enum SCIC_SDS_STP_REQUEST_STARTED_UDMA_SUBSTATES - This enumeration depicts
+ * enum scic_sds_stp_request_started_udma_substates - This enumeration depicts
  *    the various sub-states associated with a SATA/STP UDMA protocol operation.
  *
  *
  */
-enum SCIC_SDS_STP_REQUEST_STARTED_UDMA_SUBSTATES {
+enum scic_sds_stp_request_started_udma_substates {
 	SCIC_SDS_STP_REQUEST_STARTED_UDMA_AWAIT_TC_COMPLETION_SUBSTATE,
 	SCIC_SDS_STP_REQUEST_STARTED_UDMA_AWAIT_D2H_REG_FIS_SUBSTATE,
 };
 
 /**
- * enum SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_SUBSTATES - This enumeration
+ * enum scic_sds_stp_request_started_non_data_substates - This enumeration
  *    depicts the various sub-states associated with a SATA/STP non-data
  *    protocol operation.
  *
  *
  */
-enum SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_SUBSTATES {
+enum scic_sds_stp_request_started_non_data_substates {
 	SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_AWAIT_H2D_COMPLETION_SUBSTATE,
 	SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_AWAIT_D2H_SUBSTATE,
 };
 
 /**
- * enum SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_SUBSTATES - THis enumeration
+ * enum scic_sds_stp_request_started_soft_reset_substates - THis enumeration
  *    depicts the various sub-states associated with a SATA/STP soft reset
  *    operation.
  *
  *
  */
-enum SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_SUBSTATES {
+enum scic_sds_stp_request_started_soft_reset_substates {
 	SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_AWAIT_H2D_ASSERTED_COMPLETION_SUBSTATE,
 	SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_AWAIT_H2D_DIAGNOSTIC_COMPLETION_SUBSTATE,
 	SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_AWAIT_D2H_RESPONSE_FRAME_SUBSTATE,
diff --git a/drivers/scsi/isci/core/scic_sds_unsolicited_frame_control.h b/drivers/scsi/isci/core/scic_sds_unsolicited_frame_control.h
index 49db83f..a0204aa 100644
--- a/drivers/scsi/isci/core/scic_sds_unsolicited_frame_control.h
+++ b/drivers/scsi/isci/core/scic_sds_unsolicited_frame_control.h
@@ -69,13 +69,13 @@
 #include "sci_status.h"
 
 /**
- * enum UNSOLICITED_FRAME_STATE -
+ * enum unsolicited_frame_state -
  *
  * This enumeration represents the current unsolicited frame state.  The
  * controller object can not updtate the hardware unsolicited frame put pointer
  * unless it has already processed the priror unsolicited frames.
  */
-enum UNSOLICITED_FRAME_STATE {
+enum unsolicited_frame_state {
 	/**
 	 * This state is when the frame is empty and not in use.  It is
 	 * different from the released state in that the hardware could DMA
@@ -110,7 +110,7 @@ struct scic_sds_unsolicited_frame {
 	/**
 	 * This field contains the current frame state
 	 */
-	enum UNSOLICITED_FRAME_STATE state;
+	enum unsolicited_frame_state state;
 
 	/**
 	 * This field points to the frame header data.
diff --git a/drivers/scsi/isci/core/scu_registers.h b/drivers/scsi/isci/core/scu_registers.h
index 05a1411..12f2bac 100644
--- a/drivers/scsi/isci/core/scu_registers.h
+++ b/drivers/scsi/isci/core/scu_registers.h
@@ -1423,7 +1423,7 @@ struct scu_sgpio_registers {
  * ***************************************************************************** */
 #define     SCU_VIIT_BASE     0x1c00
 
-struct SCU_VIIT_REGISTERS {
+struct scu_viit_registers {
 	u32 registers[256];
 };
 
@@ -1463,8 +1463,6 @@ struct scu_port_task_scheduler_registers {
 	u32 status;
 };
 
-typedef u32 SCU_PORT_PE_CONFIGURATION_REGISTER_T;
-
 /**
  * struct scu_port_task_scheduler_group_registers - These are the PORT Task
  *    Scheduler registers
@@ -1495,7 +1493,7 @@ struct scu_port_task_scheduler_group_registers {
  * 0x0034 PCSPE1CR
  * 0x0038 PCSPE2CR
  * 0x003C PCSPE3CR */
-	SCU_PORT_PE_CONFIGURATION_REGISTER_T protocol_engine[4];
+	u32 protocol_engine[4];
 /* 0x0040 ETMTSCCR */
 	u32 tc_scanning_interval_control;
 /* 0x0044 ETMRNSCCR */
@@ -1684,12 +1682,12 @@ struct scu_afe_registers {
 	u32 reserved_0c00_0ffc[0x0100];
 };
 
-struct SCU_PROTOCOL_ENGINE_GROUP_REGISTERS {
+struct scu_protocol_engine_group_registers {
 	u32 table[0xE0];
 };
 
 
-struct SCU_VIIT_IIT {
+struct scu_viit_iit {
 	u32 table[256];
 };
 
@@ -1699,7 +1697,7 @@ struct SCU_VIIT_IIT {
  *
  *
  */
-struct SCU_ZONE_PARTITION_TABLE {
+struct scu_zone_partition_table {
 	u32 table[2048];
 };
 
@@ -1709,7 +1707,7 @@ struct SCU_ZONE_PARTITION_TABLE {
  *
  *
  */
-struct SCU_COMPLETION_RAM {
+struct scu_completion_ram {
 	u32 ram[128];
 };
 
@@ -1719,19 +1717,19 @@ struct SCU_COMPLETION_RAM {
  *
  *
  */
-struct SCU_FRAME_BUFFER_RAM {
+struct scu_frame_buffer_ram {
 	u32 ram[128];
 };
 
-#define SCU_SCRATCH_RAM_SIZE_IN_DWORDS  256
+#define scu_scratch_ram_SIZE_IN_DWORDS  256
 
 /**
  * Placeholder for the scratch RAM registers.
  *
  *
  */
-struct SCU_SCRATCH_RAM {
-	u32 ram[SCU_SCRATCH_RAM_SIZE_IN_DWORDS];
+struct scu_scratch_ram {
+	u32 ram[scu_scratch_ram_SIZE_IN_DWORDS];
 };
 
 /**
@@ -1739,7 +1737,7 @@ struct SCU_SCRATCH_RAM {
  *
  *
  */
-struct NOA_PROTOCOL_ENGINE_PARTITION {
+struct noa_protocol_engine_partition {
 	u32 reserved[64];
 };
 
@@ -1748,7 +1746,7 @@ struct NOA_PROTOCOL_ENGINE_PARTITION {
  *
  *
  */
-struct NOA_HUB_PARTITION {
+struct noa_hub_partition {
 	u32 reserved[64];
 };
 
@@ -1757,38 +1755,38 @@ struct NOA_HUB_PARTITION {
  *
  *
  */
-struct NOA_HOST_INTERFACE_PARTITION {
+struct noa_host_interface_partition {
 	u32 reserved[64];
 };
 
 /**
- * struct TRANSPORT_LINK_LAYER_PAIR - The SCU Hardware pairs up the TL
+ * struct transport_link_layer_pair - The SCU Hardware pairs up the TL
  *    registers with the LL registers so we must place them adjcent to make the
  *    array of registers in the PEG.
  *
  *
  */
-struct TRANSPORT_LINK_LAYER_PAIR {
+struct transport_link_layer_pair {
 	struct scu_transport_layer_registers tl;
 	struct scu_link_layer_registers ll;
 };
 
 /**
- * struct SCU_PEG_REGISTERS - SCU Protocol Engine Memory mapped register space.
+ * struct scu_peg_registers - SCU Protocol Engine Memory mapped register space.
  *     These registers are unique to each protocol engine group.  There can be
  *    at most two PEG for a single SCU part.
  *
  *
  */
-struct SCU_PEG_REGISTERS {
-	struct TRANSPORT_LINK_LAYER_PAIR pe[4];
+struct scu_peg_registers {
+	struct transport_link_layer_pair pe[4];
 	struct scu_port_task_scheduler_group_registers ptsg;
-	struct SCU_PROTOCOL_ENGINE_GROUP_REGISTERS peg;
+	struct scu_protocol_engine_group_registers peg;
 	struct scu_sgpio_registers sgpio;
 	u32 reserved_01500_1BFF[0x1C0];
 	struct scu_viit_entry viit[64];
-	struct SCU_ZONE_PARTITION_TABLE zpt0;
-	struct SCU_ZONE_PARTITION_TABLE zpt1;
+	struct scu_zone_partition_table zpt0;
+	struct scu_zone_partition_table zpt1;
 };
 
 /**
@@ -1800,20 +1798,20 @@ struct SCU_PEG_REGISTERS {
  */
 struct scu_registers {
 	/* 0x0000 - PEG 0 */
-	struct SCU_PEG_REGISTERS peg0;
+	struct scu_peg_registers peg0;
 
 	/* 0x6000 - SDMA and Miscellaneous */
 	struct scu_sdma_registers sdma;
-	struct SCU_COMPLETION_RAM cram;
-	struct SCU_FRAME_BUFFER_RAM fbram;
+	struct scu_completion_ram cram;
+	struct scu_frame_buffer_ram fbram;
 	u32 reserved_6800_69FF[0x80];
-	struct NOA_PROTOCOL_ENGINE_PARTITION noa_pe;
-	struct NOA_HUB_PARTITION noa_hub;
-	struct NOA_HOST_INTERFACE_PARTITION noa_if;
+	struct noa_protocol_engine_partition noa_pe;
+	struct noa_hub_partition noa_hub;
+	struct noa_host_interface_partition noa_if;
 	u32 reserved_6d00_7fff[0x4c0];
 
 	/* 0x8000 - PEG 1 */
-	struct SCU_PEG_REGISTERS peg1;
+	struct scu_peg_registers peg1;
 
 	/* 0xE000 - AFE Registers */
 	struct scu_afe_registers afe;
@@ -1822,9 +1820,7 @@ struct scu_registers {
 	u32 reserved_f000_211fff[0x80c00];
 
 	/* 0x212000 - scratch RAM */
-	struct SCU_SCRATCH_RAM scratch_ram;
-
+	struct scu_scratch_ram scratch_ram;
 };
 
-
 #endif   /* _SCU_REGISTERS_HEADER_ */
diff --git a/drivers/scsi/isci/core/scu_task_context.h b/drivers/scsi/isci/core/scu_task_context.h
index 818a575..7df87d9 100644
--- a/drivers/scsi/isci/core/scu_task_context.h
+++ b/drivers/scsi/isci/core/scu_task_context.h
@@ -65,7 +65,7 @@
 
 
 /**
- * enum SCU_SSP_TASK_TYPE - This enumberation defines the various SSP task
+ * enum scu_ssp_task_type - This enumberation defines the various SSP task
  *    types the SCU hardware will accept. The definition for the various task
  *    types the SCU hardware will accept can be found in the DS specification.
  *
@@ -78,10 +78,10 @@ typedef enum {
 	SCU_TASK_TYPE_RESPONSE,         /* /< Driver generated response frame (targt mode) */
 	SCU_TASK_TYPE_RAW_FRAME,        /* /< Raw frame request type */
 	SCU_TASK_TYPE_PRIMITIVE         /* /< Request for a primitive to be transmitted */
-} SCU_SSP_TASK_TYPE;
+} scu_ssp_task_type;
 
 /**
- * enum SCU_SATA_TASK_TYPE - This enumeration defines the various SATA task
+ * enum scu_sata_task_type - This enumeration defines the various SATA task
  *    types the SCU hardware will accept. The definition for the various task
  *    types the SCU hardware will accept can be found in the DS specification.
  *
@@ -99,7 +99,7 @@ typedef enum {
 	SCU_TASK_TYPE_DMA_OUT,          /* /< Write request */
 	SCU_TASK_TYPE_FPDMAQ_WRITE,     /* /< NCQ write Request */
 	SCU_TASK_TYPE_PACKET_DMA_OUT    /* /< Packet write request */
-} SCU_SATA_TASK_TYPE;
+} scu_sata_task_type;
 
 
 /**
@@ -290,12 +290,12 @@ typedef enum {
 #define SCU_TASK_CONTEXT_PROTOCOL_NONE   0x07
 
 /**
- * struct SSP_TASK_CONTEXT - This is the SCU hardware definition for an SSP
+ * struct ssp_task_context - This is the SCU hardware definition for an SSP
  *    request.
  *
  *
  */
-struct SSP_TASK_CONTEXT {
+struct ssp_task_context {
 	/* OFFSET 0x18 */
 	u32 reserved00:24;
 	u32 frame_type:8;
@@ -324,12 +324,12 @@ struct SSP_TASK_CONTEXT {
 };
 
 /**
- * struct STP_TASK_CONTEXT - This is the SCU hardware definition for an STP
+ * struct stp_task_context - This is the SCU hardware definition for an STP
  *    request.
  *
  *
  */
-struct STP_TASK_CONTEXT {
+struct stp_task_context {
 	/* OFFSET 0x18 */
 	u32 fis_type:8;
 	u32 pm_port:4;
@@ -356,12 +356,12 @@ struct STP_TASK_CONTEXT {
 };
 
 /**
- * struct SMP_TASK_CONTEXT - This is the SCU hardware definition for an SMP
+ * struct smp_task_context - This is the SCU hardware definition for an SMP
  *    request.
  *
  *
  */
-struct SMP_TASK_CONTEXT {
+struct smp_task_context {
 	/* OFFSET 0x18 */
 	u32 response_length:8;
 	u32 function_result:8;
@@ -386,12 +386,12 @@ struct SMP_TASK_CONTEXT {
 };
 
 /**
- * struct PRIMITIVE_TASK_CONTEXT - This is the SCU hardware definition used
+ * struct primitive_task_context - This is the SCU hardware definition used
  *    when the driver wants to send a primitive on the link.
  *
  *
  */
-struct PRIMITIVE_TASK_CONTEXT {
+struct primitive_task_context {
 	/* OFFSET 0x18 */
 	/**
 	 * This field is the control word and it must be 0.
@@ -421,13 +421,13 @@ struct PRIMITIVE_TASK_CONTEXT {
  * The union of the protocols that can be selected in the SCU task context
  *    field.
  *
- * PROTOCOL_CONTEXT
+ * protocol_context
  */
-union PROTOCOL_CONTEXT {
-	struct SSP_TASK_CONTEXT ssp;
-	struct STP_TASK_CONTEXT stp;
-	struct SMP_TASK_CONTEXT smp;
-	struct PRIMITIVE_TASK_CONTEXT primitive;
+union protocol_context {
+	struct ssp_task_context ssp;
+	struct stp_task_context stp;
+	struct smp_task_context smp;
+	struct primitive_task_context primitive;
 	u32 words[6];
 };
 
@@ -502,13 +502,13 @@ struct scu_sgl_element_pair {
 };
 
 /**
- * struct TRANSPORT_SNAPSHOT - This structure is the SCU hardware scratch area
+ * struct transport_snapshot - This structure is the SCU hardware scratch area
  *    for the task context. This is set to 0 by the driver but can be read by
  *    issuing a dump TC request to the SCU.
  *
  *
  */
-struct TRANSPORT_SNAPSHOT {
+struct transport_snapshot {
 	/* OFFSET 0x48 */
 	u32 xfer_rdy_write_data_length;
 
@@ -639,7 +639,7 @@ struct scu_task_context {
 	/**
 	 * This field is programmed with one of the following command type codes
 	 *
-	 * For SAS requests use the SCU_SSP_TASK_TYPE
+	 * For SAS requests use the scu_ssp_task_type
 	 *    - SCU_TASK_TYPE_IOREAD
 	 *    - SCU_TASK_TYPE_IOWRITE
 	 *    - SCU_TASK_TYPE_SMP_REQUEST
@@ -647,7 +647,7 @@ struct scu_task_context {
 	 *    - SCU_TASK_TYPE_RAW_FRAME
 	 *    - SCU_TASK_TYPE_PRIMITIVE
 	 *
-	 * For SATA requests use the SCU_SATA_TASK_TYPE
+	 * For SATA requests use the scu_sata_task_type
 	 *    - SCU_TASK_TYPE_DMA_IN
 	 *    - SCU_TASK_TYPE_FPDMAQ_READ
 	 *    - SCU_TASK_TYPE_PACKET_DMA_IN
@@ -787,7 +787,7 @@ struct scu_task_context {
 	/**
 	 * This union provides for the protocol specif part of the SCU Task Context.
 	 */
-	union PROTOCOL_CONTEXT type;
+	union protocol_context type;
 
 	/* OFFSET 0x30-0x34 */
 	/**
@@ -863,7 +863,7 @@ struct scu_task_context {
 	u32 write_data_length; /* read only set to 0 */
 
 	/* OFFSET 0x48-0x58 */
-	struct TRANSPORT_SNAPSHOT snapshot; /* read only set to 0 */
+	struct transport_snapshot snapshot; /* read only set to 0 */
 
 	/* OFFSET 0x5C */
 	u32 block_protection_enable:1;
diff --git a/drivers/scsi/isci/probe_roms.h b/drivers/scsi/isci/probe_roms.h
index c2162cf..f079358 100644
--- a/drivers/scsi/isci/probe_roms.h
+++ b/drivers/scsi/isci/probe_roms.h
@@ -111,7 +111,7 @@ struct isci_oem_hdr {
  * A PORT_PHY mask that assigns just a single PHY to a port and no other PHYs
  * being assigned is sufficient to declare manual PORT configuration.
  */
-enum SCIC_PORT_CONFIGURATION_MODE {
+enum scic_port_configuration_mode {
 	SCIC_PORT_MANUAL_CONFIGURATION_MODE = 0,
 	SCIC_PORT_AUTOMATIC_CONFIGURATION_MODE = 1
 };
-- 
1.7.0

