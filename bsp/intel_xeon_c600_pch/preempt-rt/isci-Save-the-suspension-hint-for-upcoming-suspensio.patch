From 551d70de89d84be46df67e9f9cd60775b8239f09 Mon Sep 17 00:00:00 2001
From: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
Date: Thu, 8 Mar 2012 22:41:59 -0800
Subject: [PATCH 164/478] isci: Save the suspension hint for upcoming suspensions.

commit 7882967d400f82886260a10b67c19110acb76d20 from
git://git.kernel.org/pub/scm/linux/kernel/git/djbw/isci.git

In the case of a suspend call while in SCI_RNC_POSTING or INVALIDATING
states, the LLHANG detect needed to be saved so the upcoming suspension
would enable it correctly.  The unused suspend callback parameters were
removed.

Signed-off-by: Jeff Skirvin <jeffrey.d.skirvin@intel.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/scsi/isci/remote_device.c       |    6 ++----
 drivers/scsi/isci/remote_node_context.c |   16 +++++++---------
 drivers/scsi/isci/remote_node_context.h |    5 ++---
 drivers/scsi/isci/request.c             |    3 +--
 4 files changed, 12 insertions(+), 18 deletions(-)

diff --git a/drivers/scsi/isci/remote_device.c b/drivers/scsi/isci/remote_device.c
index cc8ab69..1a85e9e 100644
--- a/drivers/scsi/isci/remote_device.c
+++ b/drivers/scsi/isci/remote_device.c
@@ -75,10 +75,8 @@ const char *dev_state_name(enum sci_remote_device_states state)
 static enum sci_status sci_remote_device_suspend(struct isci_remote_device *idev,
 						 enum sci_remote_node_suspension_reasons reason)
 {
-	return sci_remote_node_context_suspend(&idev->rnc,
-					       reason,
-					       SCI_SOFTWARE_SUSPEND_EXPECTED_EVENT,
-					       NULL, NULL);
+	return sci_remote_node_context_suspend(&idev->rnc, reason,
+					       SCI_SOFTWARE_SUSPEND_EXPECTED_EVENT);
 }
 
 /**
diff --git a/drivers/scsi/isci/remote_node_context.c b/drivers/scsi/isci/remote_node_context.c
index 85bf5ec..2ac9260 100644
--- a/drivers/scsi/isci/remote_node_context.c
+++ b/drivers/scsi/isci/remote_node_context.c
@@ -315,8 +315,8 @@ static void sci_remote_node_context_ready_state_enter(struct sci_base_state_mach
 	if ((dest_select == RNC_DEST_SUSPENDED) ||
 	    (dest_select == RNC_DEST_SUSPENDED_RESUME)) {
 		sci_remote_node_context_suspend(
-			rnc, SCI_SW_SUSPEND_NORMAL,
-			SCI_SOFTWARE_SUSPEND_EXPECTED_EVENT, NULL, NULL);
+			rnc, rnc->suspend_reason,
+			SCI_SOFTWARE_SUSPEND_EXPECTED_EVENT);
 
 		if (dest_select == RNC_DEST_SUSPENDED_RESUME) {
 			sci_remote_node_context_resume(rnc, usr_cb, usr_param);
@@ -539,9 +539,7 @@ enum sci_status sci_remote_node_context_destruct(struct sci_remote_node_context
 enum sci_status sci_remote_node_context_suspend(
 			struct sci_remote_node_context *sci_rnc,
 			enum sci_remote_node_suspension_reasons suspend_reason,
-			u32 suspend_type,
-			scics_sds_remote_node_context_callback cb_fn,
-			void *cb_p)
+			u32 suspend_type)
 {
 	enum scis_sds_remote_node_context_states state
 		= sci_rnc->sm.current_state_id;
@@ -581,6 +579,8 @@ enum sci_status sci_remote_node_context_suspend(
 		 * needs to be done immediately.
 		 */
 		sci_rnc->destination_state = RNC_DEST_SUSPENDED;
+		sci_rnc->suspend_type = suspend_type;
+		sci_rnc->suspend_reason = suspend_reason;
 		return SCI_SUCCESS;
 
 	case SCI_RNC_TX_SUSPENDED:
@@ -603,14 +603,12 @@ enum sci_status sci_remote_node_context_suspend(
 		return SCI_FAILURE_INVALID_STATE;
 	}
 	sci_rnc->destination_state = dest_param;
-	sci_rnc->user_callback = cb_fn;
-	sci_rnc->user_cookie   = cb_p;
-	sci_rnc->suspend_type  = suspend_type;
+	sci_rnc->suspend_type = suspend_type;
+	sci_rnc->suspend_reason = suspend_reason;
 
 	if (status == SCI_SUCCESS) { /* Already in the destination state? */
 		struct isci_host *ihost = idev->owning_port->owning_controller;
 
-		sci_remote_node_context_notify_user(sci_rnc);
 		wake_up_all(&ihost->eventq); /* Let observers look. */
 		return SCI_SUCCESS;
 	}
diff --git a/drivers/scsi/isci/remote_node_context.h b/drivers/scsi/isci/remote_node_context.h
index 364da37..9eee304 100644
--- a/drivers/scsi/isci/remote_node_context.h
+++ b/drivers/scsi/isci/remote_node_context.h
@@ -169,6 +169,7 @@ struct sci_remote_node_context {
 	 * context suspension.
 	 */
 	u32 suspend_type;
+	enum sci_remote_node_suspension_reasons suspend_reason;
 
 	/**
 	 * This field is true if the remote node context is resuming from its current
@@ -209,9 +210,7 @@ enum sci_status sci_remote_node_context_destruct(struct sci_remote_node_context
 						      void *callback_parameter);
 enum sci_status sci_remote_node_context_suspend(struct sci_remote_node_context *sci_rnc,
 						     u32 suspend_type,
-						     u32 suspension_code,
-						     scics_sds_remote_node_context_callback cb_fn,
-						     void *cb_p);
+						     u32 suspension_code);
 enum sci_status sci_remote_node_context_resume(struct sci_remote_node_context *sci_rnc,
 						    scics_sds_remote_node_context_callback cb_fn,
 						    void *cb_p);
diff --git a/drivers/scsi/isci/request.c b/drivers/scsi/isci/request.c
index cb302ce..6a4dc2d 100644
--- a/drivers/scsi/isci/request.c
+++ b/drivers/scsi/isci/request.c
@@ -2383,8 +2383,7 @@ static void sci_request_handle_suspending_completions(
 			&ireq->target_device->rnc,
 			SCI_HW_SUSPEND,
 			(is_tx_rx) ? SCU_EVENT_TL_RNC_SUSPEND_TX_RX
-				   : SCU_EVENT_TL_RNC_SUSPEND_TX,
-			NULL, NULL);
+				   : SCU_EVENT_TL_RNC_SUSPEND_TX);
 	}
 }
 
-- 
1.7.0

