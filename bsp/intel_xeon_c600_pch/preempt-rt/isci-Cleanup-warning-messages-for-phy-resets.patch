From 75baf3b19eef8eb74171b34012ca5d6b75151d53 Mon Sep 17 00:00:00 2001
From: Dave Jiang <dave.jiang@intel.com>
Date: Wed, 2 Mar 2011 13:10:45 -0800
Subject: [PATCH 041/478] isci: Cleanup warning messages for phy resets

upstream: d7628d052242d634dc1e2584c422e690578918a3

Moving some of the chattiness of warning messages to debug so only the Linux
system messages are shown.

Signed-off-by: Dave Jiang <dave.jiang@intel.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>

Integrated-by: Hui Wang <Hui.Wang@windriver.com>
---
 drivers/scsi/isci/core/scic_sds_controller.c |   65 ++++++++++----------------
 drivers/scsi/isci/core/scic_sds_phy.c        |   36 +++++++--------
 drivers/scsi/isci/remote_device.c            |    2 +-
 3 files changed, 43 insertions(+), 60 deletions(-)

diff --git a/drivers/scsi/isci/core/scic_sds_controller.c b/drivers/scsi/isci/core/scic_sds_controller.c
index deee7eb..180bb1e 100644
--- a/drivers/scsi/isci/core/scic_sds_controller.c
+++ b/drivers/scsi/isci/core/scic_sds_controller.c
@@ -1669,7 +1669,7 @@ void scic_sds_controller_link_up(
 	if (link_up)
 		link_up(scic, sci_port, sci_phy);
 	else
-		dev_warn(scic_to_dev(scic),
+		dev_dbg(scic_to_dev(scic),
 			"%s: SCIC Controller linkup event from phy %d in "
 			"unexpected state %d\n",
 			__func__,
@@ -1694,14 +1694,11 @@ void scic_sds_controller_link_down(
 	if (link_down)
 		link_down(scic, sci_port, sci_phy);
 	else
-		dev_warn(scic_to_dev(scic),
+		dev_dbg(scic_to_dev(scic),
 			"%s: SCIC Controller linkdown event from phy %d in "
 			"unexpected state %d\n",
 			__func__,
-			sci_phy->phy_index,
-			sci_base_state_machine_get_state(
-				scic_sds_controller_get_base_state_machine(
-					scic)));
+			sci_phy->phy_index, state);
 }
 
 /**
@@ -1710,28 +1707,22 @@ void scic_sds_controller_link_down(
  *
  */
 
-void scic_sds_controller_remote_device_started(
-	struct scic_sds_controller *this_controller,
-	struct scic_sds_remote_device  *the_device)
+void scic_sds_controller_remote_device_started(struct scic_sds_controller *scic,
+					       struct scic_sds_remote_device *sci_dev)
 {
 	u32 state;
-	scic_sds_controller_device_handler_t remote_device_started_handler;
+	scic_sds_controller_device_handler_t started;
 
-	state = this_controller->parent.state_machine.current_state_id;
-	remote_device_started_handler = scic_sds_controller_state_handler_table[state].remote_device_started_handler;
+	state = scic->parent.state_machine.current_state_id;
+	started = scic_sds_controller_state_handler_table[state].remote_device_started_handler;
 
-	if (remote_device_started_handler != NULL)
-		remote_device_started_handler(this_controller, the_device);
+	if (started)
+		started(scic, sci_dev);
 	else {
-		dev_warn(scic_to_dev(this_controller),
-		"%s: SCIC Controller 0x%p remote device started event "
-		"from device 0x%p in unexpected state  %d\n",
-		__func__,
-		this_controller,
-		the_device,
-		sci_base_state_machine_get_state(
-			scic_sds_controller_get_base_state_machine(
-				this_controller)));
+		dev_dbg(scic_to_dev(scic),
+			 "%s: SCIC Controller 0x%p remote device started event "
+			 "from device 0x%p in unexpected state  %d\n",
+			 __func__, scic, sci_dev, state);
 	}
 }
 
@@ -1761,29 +1752,23 @@ bool scic_sds_controller_has_remote_devices_stopping(
  *
  */
 
-void scic_sds_controller_remote_device_stopped(
-	struct scic_sds_controller  *this_controller,
-	struct scic_sds_remote_device *the_device)
+void scic_sds_controller_remote_device_stopped(struct scic_sds_controller *scic,
+					       struct scic_sds_remote_device *sci_dev)
 {
 
 	u32 state;
-	scic_sds_controller_device_handler_t remote_device_stopped_handler;
+	scic_sds_controller_device_handler_t stopped;
 
-	state = this_controller->parent.state_machine.current_state_id;
-	remote_device_stopped_handler = scic_sds_controller_state_handler_table[state].remote_device_stopped_handler;
+	state = scic->parent.state_machine.current_state_id;
+	stopped = scic_sds_controller_state_handler_table[state].remote_device_stopped_handler;
 
-	if (remote_device_stopped_handler != NULL)
-		remote_device_stopped_handler(this_controller, the_device);
+	if (stopped)
+		stopped(scic, sci_dev);
 	else {
-		dev_warn(scic_to_dev(this_controller),
-		"%s: SCIC Controller 0x%p remote device stopped event "
-		"from device 0x%p in unexpected state  %d\n",
-		__func__,
-		this_controller,
-		the_device,
-		sci_base_state_machine_get_state(
-			scic_sds_controller_get_base_state_machine(
-				this_controller)));
+		dev_dbg(scic_to_dev(scic),
+			"%s: SCIC Controller 0x%p remote device stopped event "
+			"from device 0x%p in unexpected state  %d\n",
+			__func__, scic, sci_dev, state);
 	}
 }
 
diff --git a/drivers/scsi/isci/core/scic_sds_phy.c b/drivers/scsi/isci/core/scic_sds_phy.c
index 6f00ff6..2717458 100644
--- a/drivers/scsi/isci/core/scic_sds_phy.c
+++ b/drivers/scsi/isci/core/scic_sds_phy.c
@@ -808,11 +808,11 @@ static enum sci_status scic_sds_phy_starting_substate_await_ossp_event_handler(
 		break;
 
 	default:
-		dev_warn(sciphy_to_dev(this_phy),
-			 "%s: PHY starting substate machine received "
-			 "unexpected event_code %x\n",
-			 __func__,
-			 event_code);
+		dev_dbg(sciphy_to_dev(this_phy),
+			"%s: PHY starting substate machine received "
+			"unexpected event_code %x\n",
+			__func__,
+			event_code);
 
 		result = SCI_FAILURE;
 		break;
@@ -2000,26 +2000,24 @@ enum sci_status scic_sds_phy_default_start_handler(
 
 /**
  *
- * @phy: This is the struct sci_base_phy object which is cast into a struct scic_sds_phy
- *    object.
+ * @phy: This is the struct sci_base_phy object which is cast into a
+ * struct scic_sds_phy object.
  *
  * This is the default method for phy a stop request.  It will report a warning
  * and exit. enum sci_status SCI_FAILURE_INVALID_STATE
  */
-enum sci_status scic_sds_phy_default_stop_handler(
-	struct sci_base_phy *phy)
+enum sci_status scic_sds_phy_default_stop_handler(struct sci_base_phy *base_phy)
 {
-	struct scic_sds_phy *this_phy;
+	struct scic_sds_phy *sci_phy;
 
-	this_phy = (struct scic_sds_phy *)phy;
+	sci_phy = (struct scic_sds_phy *)base_phy;
 
-	dev_warn(sciphy_to_dev(this_phy),
-		 "%s: SCIC Phy 0x%p requested to stop from invalid "
-		 "state %d\n",
-		 __func__,
-		 this_phy,
-		 sci_base_state_machine_get_state(
-			 &this_phy->parent.state_machine));
+	dev_dbg(sciphy_to_dev(sci_phy),
+		"%s: SCIC Phy 0x%p requested to stop from invalid state %d\n",
+		__func__,
+		sci_phy,
+		sci_base_state_machine_get_state(
+			&sci_phy->parent.state_machine));
 
 	return SCI_FAILURE_INVALID_STATE;
 }
@@ -2119,7 +2117,7 @@ enum sci_status scic_sds_phy_default_event_handler(
 	struct scic_sds_phy *this_phy,
 	u32 event_code)
 {
-	dev_warn(sciphy_to_dev(this_phy),
+	dev_dbg(sciphy_to_dev(this_phy),
 		"%s: SCIC Phy 0x%p received unexpected event status %x "
 		"while in state %d\n",
 		__func__,
diff --git a/drivers/scsi/isci/remote_device.c b/drivers/scsi/isci/remote_device.c
index dec9033..e684a05 100644
--- a/drivers/scsi/isci/remote_device.c
+++ b/drivers/scsi/isci/remote_device.c
@@ -472,7 +472,7 @@ void isci_remote_device_gone(
 	struct isci_remote_device *isci_device = isci_dev_from_domain_dev(
 		domain_dev);
 
-	dev_err(&isci_device->isci_port->isci_host->pdev->dev,
+	dev_dbg(&isci_device->isci_port->isci_host->pdev->dev,
 		"%s: domain_device = %p, isci_device = %p, isci_port = %p\n",
 		__func__, domain_dev, isci_device, isci_device->isci_port);
 
-- 
1.7.0

