From dbe843e91d23f695741708944216034c407c1797 Mon Sep 17 00:00:00 2001
From: Bin Jiang <bin.jiang@windriver.com>
Date: Mon, 19 May 2014 17:06:51 +0800
Subject: [PATCH 06/13] watchdog: sp805_wdt.c: support hardware watchdog on
 Broadcom iProc chips

Support hardware watchdog on Broadcom iProc chips.

[Original changes taken from iProcLDK_3.4.6.package.tgz]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
---
 drivers/watchdog/Kconfig     |    8 ++++++++
 drivers/watchdog/Makefile    |    1 +
 drivers/watchdog/sp805_wdt.c |   27 +++++++++++++++++++++++++++
 3 files changed, 36 insertions(+), 0 deletions(-)

diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index 9debff3..471b28e 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -115,6 +115,14 @@ config ARM_SP805_WATCHDOG
 	  ARM Primecell SP805 Watchdog timer. This will reboot your system when
 	  the timeout is reached.
 
+config IPROC_CCB_WDT
+	tristate "CCB Watchdog Timer support"
+	select WATCHDOG_CORE
+	depends on ARCH_IPROC && (MACH_HR2 || MACH_HX4 || MACH_NSP || MACH_KT2)
+	help
+	  This selects a driver for the hardware watchdog on Broadcom
+	  iProc chips.
+
 config AT91RM9200_WATCHDOG
 	tristate "AT91RM9200 watchdog"
 	depends on ARCH_AT91RM9200
diff --git a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
index e5165ab..31fe5af 100644
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -30,6 +30,7 @@ obj-$(CONFIG_USBPCWATCHDOG) += pcwd_usb.o
 
 # ARM Architecture
 obj-$(CONFIG_ARM_SP805_WATCHDOG) += sp805_wdt.o
+obj-$(CONFIG_IPROC_CCB_WDT) += sp805_wdt.o
 obj-$(CONFIG_AT91RM9200_WATCHDOG) += at91rm9200_wdt.o
 obj-$(CONFIG_AT91SAM9X_WATCHDOG) += at91sam9_wdt.o
 obj-$(CONFIG_OMAP_WATCHDOG) += omap_wdt.o
diff --git a/drivers/watchdog/sp805_wdt.c b/drivers/watchdog/sp805_wdt.c
index 8872642..81fdc0f 100644
--- a/drivers/watchdog/sp805_wdt.c
+++ b/drivers/watchdog/sp805_wdt.c
@@ -29,6 +29,10 @@
 #include <linux/types.h>
 #include <linux/watchdog.h>
 
+#include <mach/iproc_regs.h>
+#include <asm/pgtable.h>
+#include <mach/memory.h>
+
 /* default timeout in seconds */
 #define DEFAULT_TIMEOUT		60
 
@@ -77,6 +81,26 @@ module_param(nowayout, bool, 0);
 MODULE_PARM_DESC(nowayout,
 		"Set to 1 to keep watchdog running after device release");
 
+/* This routine get boot status to indicate if the last boot is from WDT */
+static unsigned int wdt_get_clear_bootstatus(void)
+{
+	unsigned int reg;
+	unsigned int bootstatus = 0;
+	void __iomem *wdt_bootsatus = IOMEM(HW_IO_PHYS_TO_VIRT(IPROC_CCB_WDT_BOOTSTATUS));
+
+	reg = readl_relaxed(wdt_bootsatus);
+	bootstatus = reg & (1 << IPROC_CCB_WDT_BOOTSTATUS_BIT);
+	if(bootstatus) {
+		/* write 1 to clear boot status bit */
+		writel_relaxed(reg, wdt_bootsatus);
+#if defined(CONFIG_MACH_NSP)
+		writel_relaxed(reg, wdt_bootsatus);
+#endif	
+	}
+
+	return bootstatus;	
+}
+
 /* This routine finds load value that will reset system in required timout */
 static int wdt_setload(struct watchdog_device *wdd, unsigned int timeout)
 {
@@ -254,8 +278,11 @@ sp805_wdt_probe(struct amba_device *adev, const struct amba_id *id)
 		goto err_register;
 	}
 	amba_set_drvdata(adev, wdt);
+	wdt->wdd.bootstatus = wdt_get_clear_bootstatus();
 
 	dev_info(&adev->dev, "registration successful\n");
+	dev_info(&adev->dev, "CCB wdt driver - timtout=%d sec, nowayout=%d\n", 
+		DEFAULT_TIMEOUT, nowayout);
 	return 0;
 
 err_register:
-- 
1.7.5.4

