From f86070b690ca164e8614b92a73199f342bedd9fe Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Thu, 31 Jan 2013 15:21:16 +0800
Subject: [PATCH 05/16] LSI:ACP34xx:Cleanup platform clock driver

Cleanup acp34xx's platform clock driver with following modification:
1.Remove unnecessary debug macros.
2.Fix code indent issues.
3.Remove dead code.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/lsi/acp/clocks.c |   61 +++++++++++++++-------------------------------
 1 file changed, 20 insertions(+), 41 deletions(-)

diff --git a/drivers/lsi/acp/clocks.c b/drivers/lsi/acp/clocks.c
index c3c07c7..bf9fda0 100644
--- a/drivers/lsi/acp/clocks.c
+++ b/drivers/lsi/acp/clocks.c
@@ -28,22 +28,20 @@
 #include "ncr.h"
 
 /*
-  ===============================================================================
-  ===============================================================================
   Private Interface
-  ===============================================================================
-  ===============================================================================
 */
 
-static unsigned char ps[] = {1, 3, 2, 4};
+static unsigned char ps[] = { 1, 3, 2, 4 };
 
 static unsigned char idiv[] = {
 	1, 16, 17, 30, 13, 18, 7, 31, 14, 11, 19, 21, 27, 8, 23, 32,
-	15, 29, 12, 6, 10, 20, 26, 22, 28, 5, 9, 25, 4, 24, 3, 2};
+	15, 29, 12, 6, 10, 20, 26, 22, 28, 5, 9, 25, 4, 24, 3, 2
+};
 
 static unsigned char odiv[] = {
 	1, 2, 28, 27, 22, 21, 30, 29, 24, 23, 12, 11, 16, 15, 32, 31,
-	26, 25, 20, 19, 10, 9, 14, 13, 18, 17, 8, 7, 6, 5, 4, 3};
+	26, 25, 20, 19, 10, 9, 14, 13, 18, 17, 8, 7, 6, 5, 4, 3
+};
 
 static unsigned char mult[] = {
 	1, 123, 117, 251, 245, 69, 111, 125, 119, 95, 105, 197, 239,
@@ -80,7 +78,6 @@ static unsigned char mult[] = {
 #define RANGEB_MAIN(value)  (odiv[(RANGEB((value)) & 0x1f)])
 
 /*
-  ------------------------------------------------------------------------------
   get_ppc_pll
 
   Assumes the the PPC PLL is locked...
@@ -98,19 +95,10 @@ get_ppc_pll(unsigned long *dco, unsigned long *pllouta, unsigned long *plloutb)
 	*pllouta = *dco / (RANGEA_PRE(ctrl) * RANGEA_MAIN(ctrl));
 	*plloutb = *dco / (RANGEB_PRE(ctrl) * RANGEB_MAIN(ctrl));
 
-#if 0
-	printf("0x%x %d 0x%x (%d %d) 0x%x (%d %d) 0x%x (%d %d)\n",
-	       ctrl, PREDIV(ctrl),
-	       MULTINT(ctrl), MULTINT_PRE(ctrl), MULTINT_MAIN(ctrl),
-	       RANGEA(ctrl), RANGEA_PRE(ctrl), RANGEA_MAIN(ctrl),
-	       RANGEB(ctrl), RANGEB_PRE(ctrl), RANGEB_MAIN(ctrl));
-#endif
-
 	return 0;
 }
 
 /*
-  -------------------------------------------------------------------------------
   acp_clock_get_asic
 */
 
@@ -129,25 +117,24 @@ acp_clock_get_asic(int clock, unsigned long *frequency)
 	mcgs = mfdcr(0xd01);
 
 	switch (clock) {
-	case 0:			/* PPC */
+	case 0:		/* PPC */
 		if (0 == (mcgc & 0xc0000000)) {
 			/* ppc_clk is clk_ref0 */
 			*frequency = CLK_REF0 / 1000;
 		} else if (0 == get_ppc_pll(&dco, &pllouta, &plloutb)) {
-			if (1 == ((mcgc & 0xc0000000) >> 30)) {
+			if (1 == ((mcgc & 0xc0000000) >> 30))
 				*frequency = pllouta;
-			} else {
+			else
 				*frequency = pllouta / 2;
-			}
 		} else {
 			return -1;
 		}
 		break;
-	case 1:			/* Peripheral */
+	case 1:		/* Peripheral */
 		if (0 == (mcgc & 0x08000000)) {
 			/* clk_per is clk_ref0 */
 			*frequency = CLK_REF0 / 1000;
- 		} else {
+		} else {
 			/* clk_per is clk_pllb_ppc */
 			if (0 == (mcgs & 0x80000000) ||
 			    (0 == dco &&
@@ -167,7 +154,6 @@ acp_clock_get_asic(int clock, unsigned long *frequency)
 }
 
 /*
-  -------------------------------------------------------------------------------
   acp_glock_get_emulation
 */
 
@@ -177,13 +163,13 @@ acp_clock_get_emulation(int clock, unsigned long *frequency)
 	*frequency = 0ULL;
 
 	/*
-	  Clocks are only available on the ASIC.
-	*/
+	   Clocks are only available on the ASIC.
+	 */
 	switch (clock) {
-	case 0:			/* PPC */
+	case 0:		/* PPC */
 		*frequency = 12500;
 		break;
-	case 1:			/* Peripheral */
+	case 1:		/* Peripheral */
 		*frequency = 6500;
 		break;
 	default:
@@ -196,7 +182,6 @@ acp_clock_get_emulation(int clock, unsigned long *frequency)
 
 #ifdef CONFIG_ACPISS
 /*
-  -------------------------------------------------------------------------------
   acp_glock_get_iss
 */
 
@@ -206,13 +191,13 @@ acp_clock_get_iss(int clock, unsigned long *frequency)
 	*frequency = 0ULL;
 
 	/*
-	  Clocks are only available on the ASIC.
-	*/
+	   Clocks are only available on the ASIC.
+	 */
 	switch (clock) {
-	case 0:			/* PPC */
+	case 0:		/* PPC */
 		*frequency = 12500;
 		break;
-	case 1:			/* Peripheral */
+	case 1:		/* Peripheral */
 		*frequency = 6500;
 		break;
 	default:
@@ -225,15 +210,10 @@ acp_clock_get_iss(int clock, unsigned long *frequency)
 #endif
 
 /*
-  ===============================================================================
-  ===============================================================================
   Public Interface
-  ===============================================================================
-  ===============================================================================
 */
 
 /*
-  -------------------------------------------------------------------------------
   acp_clock_get
 */
 
@@ -243,11 +223,10 @@ acp_clock_get(int clock, unsigned long *frequency)
 #ifdef CONFIG_ACPISS
 	return acp_clock_get_iss(clock, frequency);
 #else
-	if (0 == is_asic()) {
+	if (0 == is_asic())
 		return acp_clock_get_emulation(clock, frequency);
-	} else {
+	else
 		return acp_clock_get_asic(clock, frequency);
-	}
 
 	return -1;
 #endif
-- 
1.7.9.7

