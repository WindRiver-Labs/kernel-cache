From 71ad7ee9124f68bb1932fe2671b9b8d5e9dc81cc Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Tue, 31 Jul 2012 13:37:37 +0800
Subject: [PATCH] lsi/net: free the skb with irq enabled

The dev_kfree_skb can't be invoked with irq disabled, otherwise
we will get the following call trace:
WARNING: at kernel/softirq.c:182
Modules linked in:
NIP: c042cb20 LR: c0999ee0 CTR: c0977b98
REGS: cffd7af0 TRAP: 0700   Tainted: G        W     (3.4.6-WR5.0+snapshot-20120730_standard)
MSR: 00021000 <CE,ME>  CR: 22042088  XER: 20000000
TASK = cf86ec00[0] 'swapper/3' THREAD: cf8b6000 CPU: 3
GPR00: 00000001 cffd7ba0 cf86ec00 c0977be8 00001000 00000000 0000001c 24000000
GPR08: 00000000 c0b8059a 00000000 00000000 22042084 00000000 0fba2240 0000003c
GPR16: c0a9d22c c0a9d240 cfb38dcc 0000007a 00000001 00000000 00000080 0000007a
GPR24: 00000000 0000007a 0fbaa300 cfb38800 cffd6000 cfb38dd4 cfbe8108 cffd6000
NIP [c042cb20] local_bh_enable_ip+0x74/0xd8
LR [c0999ee0] _raw_read_unlock_bh+0x44/0x54
Call Trace:
[cffd7ba0] [c099a96c] __raw_read_lock_bh+0x28/0x40 (unreliable)
[cffd7bb0] [c0999ee0] _raw_read_unlock_bh+0x44/0x54
[cffd7bc0] [c0977be8] xs_udp_write_space+0x50/0x64
[cffd7bd0] [c0888bd4] sock_wfree+0x88/0xa4
[cffd7be0] [c088c114] skb_release_head_state+0x9c/0x104
[cffd7bf0] [c088dca8] __kfree_skb+0x24/0xec
[cffd7c00] [c088ddc0] consume_skb+0x50/0x100
[cffd7c20] [c087f64c] appnic_hard_start_xmit+0x42c/0x458
[cffd7c70] [c089e550] dev_hard_start_xmit+0x324/0x6d4
[cffd7cd0] [c08b9c14] sch_direct_xmit+0xc8/0x204
[cffd7cf0] [c089eae8] dev_queue_xmit+0x1e8/0x69c
[cffd7d20] [c08a90c4] neigh_resolve_output+0x11c/0x1c8
[cffd7d40] [c08a9968] neigh_update+0x2b8/0x418
[cffd7d80] [c08fd5d0] arp_process+0x254/0x60c
[cffd7de0] [c08fdaac] arp_rcv+0x124/0x15c
[cffd7e00] [c0898638] __netif_receive_skb+0x564/0x6e0
[cffd7e60] [c089971c] netif_receive_skb+0x5c/0x16c
[cffd7ea0] [c087ef14] lsinet_poll+0x4a4/0x7b0
[cffd7f40] [c0899ac8] net_rx_action+0x104/0x2cc
[cffd7f90] [c042cf10] __do_softirq+0xf8/0x270
[cffd7ff0] [c040d1d0] call_do_softirq+0x14/0x24
[cf8b7e60] [c0404ce8] do_softirq+0x9c/0xdc
[cf8b7e80] [c042d36c] irq_exit+0xa8/0xc0
[cf8b7e90] [c04049e0] do_IRQ+0x100/0x17c
[cf8b7ec0] [c040eb50] ret_from_except+0x0/0x18
--- Exception: 501 at cpm_idle+0x3c/0x68
    LR = cpu_idle+0xc8/0x184
[cf8b7f80] [c049b854] rcu_idle_enter+0x9c/0xe0 (unreliable)
[cf8b7f90] [c0408418] cpu_idle+0xc8/0x184
[cf8b7fc0] [c09ad858] start_secondary+0x2c8/0x2cc
[cf8b7ff0] [c040142c] start_secondary_47x+0x24/0x48
Instruction dump:
5409016f 4182004c 38600001 48571d7d 801f0080 70090004 41a20068 4800002c
3d20c0b8 3929059a 88090005 68000001 <0f000000> 2f800000 419effbc 38000001

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/lsi/acp/net.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/lsi/acp/net.c b/drivers/lsi/acp/net.c
index 8de649f..69d94f4 100644
--- a/drivers/lsi/acp/net.c
+++ b/drivers/lsi/acp/net.c
@@ -3198,9 +3198,9 @@ appnic_hard_start_xmit( struct sk_buff * skb,
     ERROR_PRINT( "No transmit descriptors available!\n" );
   }
 
+  appnic_special_unlock( & adapter->lock );
   /* free the socket buffer */
   dev_kfree_skb( skb );
-  appnic_special_unlock( & adapter->lock );
 
 #ifdef __APPNIC_C_PROFILE__
   end_ = ( 0xffffffff - readl( ( TIMER7_BASE + TIMER_n_VALUE ) ) );
-- 
1.7.9.7

