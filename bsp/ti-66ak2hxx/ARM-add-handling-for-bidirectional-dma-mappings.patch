From f454ad1169dd6b9c25d8176e6ffea254606ef514 Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <Guoqing.Jiang@windriver.com>
Date: Tue, 16 Jul 2013 14:53:01 +0800
Subject: [PATCH 07/20] ARM: add handling for bidirectional dma mappings

Commit ccf3656e66272466ec7c15f99be7a1379e056afb from arago tree
git://arago-project.org/git/projects/linux-keystone.git releases/03.00.00.11/master

This patch adds handling for bidirectional dma maps.  The modification to
v7_dma_map_area is consistent with existing implementation on earlier ARM
architectures (e.g. see arch/arm/mm/cache-v6.S).  In addition,
__dma_page_cpu_to_dev() has been extended to clean and invalidate
the outer cache for bidirectional maps.

Signed-off-by: Cyril Chemparathy <cyril@ti.com>
Signed-off-by: Guoqing Jiang <Guoqing.Jiang@windriver.com>
---
 arch/arm/mm/cache-v7.S    |  7 ++++---
 arch/arm/mm/dma-mapping.c | 13 ++++++++-----
 2 files changed, 12 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mm/cache-v7.S b/arch/arm/mm/cache-v7.S
index 515b000..685fc9a 100644
--- a/arch/arm/mm/cache-v7.S
+++ b/arch/arm/mm/cache-v7.S
@@ -424,9 +424,10 @@ ENDPROC(v7_dma_flush_range)
  */
 ENTRY(v7_dma_map_area)
 	add	r1, r1, r0
-	teq	r2, #DMA_FROM_DEVICE
-	beq	v7_dma_inv_range
-	b	v7_dma_clean_range
+	cmp	r2, #DMA_TO_DEVICE
+	beq	v7_dma_clean_range
+	bcs	v7_dma_inv_range
+	b	v7_dma_flush_range
 ENDPROC(v7_dma_map_area)
 
 /*
diff --git a/arch/arm/mm/dma-mapping.c b/arch/arm/mm/dma-mapping.c
index 9674476..d852419 100644
--- a/arch/arm/mm/dma-mapping.c
+++ b/arch/arm/mm/dma-mapping.c
@@ -856,15 +856,18 @@ static void __dma_page_cpu_to_dev(struct page *page, unsigned long off,
 {
 	unsigned long paddr;
 
+	if (unlikely(dir == DMA_NONE))
+		return;
+
 	dma_cache_maint_page(page, off, size, dir, dmac_map_area);
 
 	paddr = page_to_phys(page) + off;
-	if (dir == DMA_FROM_DEVICE) {
-		outer_inv_range(paddr, paddr + size);
-	} else {
+
+	if (dir != DMA_FROM_DEVICE)
 		outer_clean_range(paddr, paddr + size);
-	}
-	/* FIXME: non-speculating: flush on bidirectional mappings? */
+
+	if (dir != DMA_TO_DEVICE)
+		outer_inv_range(paddr, paddr + size);
 }
 
 static void __dma_page_dev_to_cpu(struct page *page, unsigned long off,
-- 
1.8.4.93.g57e4c17

