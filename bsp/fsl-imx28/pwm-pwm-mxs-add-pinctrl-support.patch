From 511ffbd82be418ef063c855933944978b05a87ec Mon Sep 17 00:00:00 2001
From: Shawn Guo <shawn.guo@linaro.org>
Date: Tue, 26 Jun 2012 16:58:11 +0800
Subject: [PATCH 167/169] pwm: pwm-mxs: add pinctrl support

Call pinctrl subsystem to set up pwm pin.

Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
Signed-off-by: Thierry Reding <thierry.reding@avionic-design.de>
(cherry picked from commit 1112fe88d4ebbb5f46750726b87fb0beb1396835)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/pwm/pwm-mxs.c            |    6 ++
 include/linux/pinctrl/consumer.h |  115 ++++++++++++++++++++------------------
 2 files changed, 67 insertions(+), 54 deletions(-)

diff --git a/drivers/pwm/pwm-mxs.c b/drivers/pwm/pwm-mxs.c
index 3b7f3ab..269d7c2 100644
--- a/drivers/pwm/pwm-mxs.c
+++ b/drivers/pwm/pwm-mxs.c
@@ -16,6 +16,7 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/pinctrl/consumer.h>
 #include <linux/platform_device.h>
 #include <linux/pwm.h>
 #include <linux/slab.h>
@@ -130,6 +131,7 @@ static int mxs_pwm_probe(struct platform_device *pdev)
 	struct device_node *np = pdev->dev.of_node;
 	struct mxs_pwm_chip *mxs;
 	struct resource *res;
+	struct pinctrl *pinctrl;
 	int ret;
 
 	mxs = devm_kzalloc(&pdev->dev, sizeof(*mxs), GFP_KERNEL);
@@ -141,6 +143,10 @@ static int mxs_pwm_probe(struct platform_device *pdev)
 	if (!mxs->base)
 		return -EADDRNOTAVAIL;
 
+	pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
+	if (IS_ERR(pinctrl))
+		return PTR_ERR(pinctrl);
+
 	mxs->clk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(mxs->clk))
 		return PTR_ERR(mxs->clk);
diff --git a/include/linux/pinctrl/consumer.h b/include/linux/pinctrl/consumer.h
index 6dd96fb..3757cc6 100644
--- a/include/linux/pinctrl/consumer.h
+++ b/include/linux/pinctrl/consumer.h
@@ -39,60 +39,6 @@ extern int pinctrl_select_state(struct pinctrl *p, struct pinctrl_state *s);
 extern struct pinctrl * __must_check devm_pinctrl_get(struct device *dev);
 extern void devm_pinctrl_put(struct pinctrl *p);
 
-#else /* !CONFIG_PINCTRL */
-
-static inline int pinctrl_request_gpio(unsigned gpio)
-{
-	return 0;
-}
-
-static inline void pinctrl_free_gpio(unsigned gpio)
-{
-}
-
-static inline int pinctrl_gpio_direction_input(unsigned gpio)
-{
-	return 0;
-}
-
-static inline int pinctrl_gpio_direction_output(unsigned gpio)
-{
-	return 0;
-}
-
-static inline struct pinctrl * __must_check pinctrl_get(struct device *dev)
-{
-	return NULL;
-}
-
-static inline void pinctrl_put(struct pinctrl *p)
-{
-}
-
-static inline struct pinctrl_state * __must_check pinctrl_lookup_state(
-							struct pinctrl *p,
-							const char *name)
-{
-	return NULL;
-}
-
-static inline int pinctrl_select_state(struct pinctrl *p,
-				       struct pinctrl_state *s)
-{
-	return 0;
-}
-
-static inline struct pinctrl * __must_check devm_pinctrl_get(struct device *dev)
-{
-	return NULL;
-}
-
-static inline void devm_pinctrl_put(struct pinctrl *p)
-{
-}
-
-#endif /* CONFIG_PINCTRL */
-
 static inline struct pinctrl * __must_check pinctrl_get_select(
 					struct device *dev, const char *name)
 {
@@ -157,6 +103,67 @@ static inline struct pinctrl * __must_check devm_pinctrl_get_select_default(
 	return devm_pinctrl_get_select(dev, PINCTRL_STATE_DEFAULT);
 }
 
+
+#else /* !CONFIG_PINCTRL */
+
+static inline struct pinctrl * __must_check devm_pinctrl_get_select_default(
+					struct device *dev)
+{
+	return (struct pinctrl * )NULL;
+}
+
+static inline int pinctrl_request_gpio(unsigned gpio)
+{
+	return 0;
+}
+
+static inline void pinctrl_free_gpio(unsigned gpio)
+{
+}
+
+static inline int pinctrl_gpio_direction_input(unsigned gpio)
+{
+	return 0;
+}
+
+static inline int pinctrl_gpio_direction_output(unsigned gpio)
+{
+	return 0;
+}
+
+static inline struct pinctrl * __must_check pinctrl_get(struct device *dev)
+{
+	return NULL;
+}
+
+static inline void pinctrl_put(struct pinctrl *p)
+{
+}
+
+static inline struct pinctrl_state * __must_check pinctrl_lookup_state(
+							struct pinctrl *p,
+							const char *name)
+{
+	return NULL;
+}
+
+static inline int pinctrl_select_state(struct pinctrl *p,
+				       struct pinctrl_state *s)
+{
+	return 0;
+}
+
+static inline struct pinctrl * __must_check devm_pinctrl_get(struct device *dev)
+{
+	return NULL;
+}
+
+static inline void devm_pinctrl_put(struct pinctrl *p)
+{
+}
+
+#endif /* CONFIG_PINCTRL */
+
 #ifdef CONFIG_PINCONF
 
 extern int pin_config_get(const char *dev_name, const char *name,
-- 
1.7.0

