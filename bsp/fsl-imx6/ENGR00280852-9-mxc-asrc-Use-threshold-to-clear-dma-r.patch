From 713804c030611d7f088dda2f1856d54e2c60b4d8 Mon Sep 17 00:00:00 2001
From: Nicolin Chen <b42378@freescale.com>
Date: Thu, 26 Sep 2013 18:22:00 +0800
Subject: [PATCH 0593/1072] ENGR00280852-9 mxc: asrc: Use threshold to clear
 dma request

git://git.freescale.com/imx/linux-2.6-imx.git imx_3.10.17_1.0.0_beta
commit fd781ec17700b4bbda31a262c82967ca69cfe969

Previously, we used sdma's event pending to forcibly re-schedule sdma
for work round, because sdma channel for ASRC input task would fail to
be opened due to its dma request always keeping high after ASRC opens
the pair, which cause sdma miss the trigger point of dma request.

Now, instead of using event pending, we clear the dma request on ASRC
driver side by setting its thresholds to an impossible trigger area
during its stall state. Since ASRC would stall its process when input
fifo is near empty or output fifo is near full, during the stall state,
the specific thresholds, 0 for input fifo and 63 for output fifo, would
never let asrc meet this condition. So dma request can be cleared and
raised again after we restore the true required thresholds.

Accordingly, since we don't need event pending any more, we dropped the
code from the sdma driver.

Signed-off-by: Nicolin Chen <b42378@freescale.com>
Signed-off-by: Hongbo Zhong <hongbo.zhong@windriver.com>
---
 drivers/dma/imx-sdma.c      |   15 ---------------
 drivers/mxc/asrc/mxc_asrc.c |   15 +++++++++++----
 include/linux/mxc_asrc.h    |    3 ++-
 3 files changed, 13 insertions(+), 20 deletions(-)

diff --git a/drivers/dma/imx-sdma.c b/drivers/dma/imx-sdma.c
index bde8608..32c999d 100644
--- a/drivers/dma/imx-sdma.c
+++ b/drivers/dma/imx-sdma.c
@@ -1307,21 +1307,6 @@ static void sdma_issue_pending(struct dma_chan *chan)
 		sdma_enable_channel(sdma, sdmac->channel);
 }
 
-void sdma_set_event_pending(struct dma_chan *chan)
-{
-	struct sdma_channel *sdmac = to_sdma_chan(chan);
-	struct sdma_engine *sdma = sdmac->sdma;
-	u32 channel = sdmac->channel;
-	u32 reg;
-
-	reg = readl_relaxed(sdma->regs + SDMA_H_EVTPEND);
-	reg |= 1 << channel;
-	writel_relaxed(reg, sdma->regs + SDMA_H_EVTPEND);
-
-	return;
-}
-EXPORT_SYMBOL(sdma_set_event_pending);
-
 #define SDMA_SCRIPT_ADDRS_ARRAY_SIZE_V1	38
 
 static void sdma_add_scripts(struct sdma_engine *sdma,
diff --git a/drivers/mxc/asrc/mxc_asrc.c b/drivers/mxc/asrc/mxc_asrc.c
index 3809f9c..46a1f77 100644
--- a/drivers/mxc/asrc/mxc_asrc.c
+++ b/drivers/mxc/asrc/mxc_asrc.c
@@ -497,11 +497,9 @@ int asrc_config_pair(struct asrc_config *config)
 }
 EXPORT_SYMBOL(asrc_config_pair);
 
-#define ASRC_MAX_FIFO_THRESHOLD		63
-
 int asrc_set_watermark(enum asrc_pair_index index, u32 in_wm, u32 out_wm)
 {
-	if (in_wm > ASRC_MAX_FIFO_THRESHOLD || out_wm > ASRC_MAX_FIFO_THRESHOLD) {
+	if (in_wm > ASRC_FIFO_THRESHOLD_MAX || out_wm > ASRC_FIFO_THRESHOLD_MAX) {
 		pair_err("invalid watermark!\n");
 		return -EINVAL;
 	}
@@ -1167,7 +1165,16 @@ static void mxc_asrc_submit_dma(struct asrc_pair_params *params)
 	dmaengine_submit(params->desc_out);
 	dma_async_issue_pending(params->desc_out->chan);
 
-	sdma_set_event_pending(params->input_dma_channel);
+	/*
+	 * Clear dma request during the stall state of ASRC:
+	 * During STALL state, the remaining in input fifo would never be
+	 * smaller than the input threshold while the output fifo would not
+	 * be bigger than output one. Thus the dma request would be cleared.
+	 */
+	asrc_set_watermark(index, ASRC_FIFO_THRESHOLD_MIN, ASRC_FIFO_THRESHOLD_MAX);
+
+	/* Update the real input threshold to raise dma request */
+	asrc_set_watermark(index, params->input_wm, params->output_wm);
 }
 #endif
 
diff --git a/include/linux/mxc_asrc.h b/include/linux/mxc_asrc.h
index 5f71a57..1131189 100644
--- a/include/linux/mxc_asrc.h
+++ b/include/linux/mxc_asrc.h
@@ -24,6 +24,8 @@
 #define ASRC_DMA_BUFFER_NUM		2
 #define ASRC_INPUTFIFO_THRESHOLD	32
 #define ASRC_OUTPUTFIFO_THRESHOLD	32
+#define ASRC_FIFO_THRESHOLD_MIN		0
+#define ASRC_FIFO_THRESHOLD_MAX		63
 #define ASRC_DMA_BUFFER_SIZE		(1024 * 48 * 4)
 #define ASRC_MAX_BUFFER_SIZE		(1024 * 48)
 #define ASRC_OUTPUT_LAST_SAMPLE_DEFAULT	8
@@ -380,6 +382,5 @@ extern int asrc_get_dma_request(enum asrc_pair_index index, bool i);
 extern void asrc_finish_conv(enum asrc_pair_index index);
 extern int asrc_set_watermark(enum asrc_pair_index index,
 		u32 in_wm, u32 out_wm);
-extern void sdma_set_event_pending(struct dma_chan *chan);
 
 #endif/* __MXC_ASRC_H__ */
-- 
1.7.5.4

