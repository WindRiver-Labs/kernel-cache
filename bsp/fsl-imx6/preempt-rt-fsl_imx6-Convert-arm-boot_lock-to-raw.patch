From b0ab147b2685132dbd5021a3bd60d62ef6519a7f Mon Sep 17 00:00:00 2001
From: Zhong Hongbo <hongbo.zhong@windriver.com>
Date: Fri, 8 Feb 2013 14:32:47 +0800
Subject: [PATCH 3/5] preempt-rt/fsl_imx6: Convert arm boot_lock to raw

The arm boot_lock is used by the secondary processor startup code.  The locking
task is the idle thread, which has idle->sched_class == &idle_sched_class.
idle_sched_class->enqueue_task == NULL, so if the idle task blocks on the
lock, the attempt to wake it when the lock becomes available will fail:

try_to_wake_up()
   ...
      activate_task()
         enqueue_task()
            p->sched_class->enqueue_task(rq, p, flags)

Fix by converting boot_lock to a raw spin lock.

Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-mx6/platsmp.c |   10 +++++-----
 1 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-mx6/platsmp.c b/arch/arm/mach-mx6/platsmp.c
index aef9dcb..ca61db0 100644
--- a/arch/arm/mach-mx6/platsmp.c
+++ b/arch/arm/mach-mx6/platsmp.c
@@ -33,7 +33,7 @@
 #include <mach/smp.h>
 #include "src-reg.h"
 
-static DEFINE_SPINLOCK(boot_lock);
+static DEFINE_RAW_SPINLOCK(boot_lock);
 
 static void __iomem *scu_base_addr(void)
 {
@@ -42,7 +42,7 @@ static void __iomem *scu_base_addr(void)
 
 void __cpuinit platform_secondary_init(unsigned int cpu)
 {
-	spin_lock(&boot_lock);
+	raw_spin_lock(&boot_lock);
 	/*
 	* if any interrupts are already enabled for the primary
 	* core (e.g. timer irq), then they will not have been enabled
@@ -56,7 +56,7 @@ void __cpuinit platform_secondary_init(unsigned int cpu)
 	* Synchronise with the boot thread.
 	*/
 
-	spin_unlock(&boot_lock);
+	raw_spin_unlock(&boot_lock);
 
 }
 
@@ -70,7 +70,7 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 	  * set synchronisation state between this boot processor
 	  * and the secondary one
 	  */
-	spin_lock(&boot_lock);
+	raw_spin_lock(&boot_lock);
 
 	/* set entry point for cpu1-cpu3*/
 	boot_entry = virt_to_phys(mx6_secondary_startup);
@@ -92,7 +92,7 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 	* now the secondary core is starting up let it run its
 	* calibrations, then wait for it to finish
 	*/
-	spin_unlock(&boot_lock);
+	raw_spin_unlock(&boot_lock);
 
 	return 0;
 
-- 
1.7.0

