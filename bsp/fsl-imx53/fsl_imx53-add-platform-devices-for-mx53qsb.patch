From d696f9196350cc463a771deec7a7cc7dfc5f952e Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <Guoqing.Jiang@windriver.com>
Date: Tue, 15 Jan 2013 10:01:54 +0800
Subject: [PATCH 04/23] fsl_imx53: add platform devices for mx53qsb

Refer to vendor-drop package, L2.6.35_11.09.01_ER_source.tar.gz

Add the support for pmu, srtc, pmic, dvfs, busfreq and usb devices.

Signed-off-by: Guoqing Jiang <Guoqing.Jiang@windriver.com>
---
 arch/arm/mach-imx/mach-mx53_loco.c |   61 ++++++++++++++++++++++++++++++++++++
 1 file changed, 61 insertions(+)

diff --git a/arch/arm/mach-imx/mach-mx53_loco.c b/arch/arm/mach-imx/mach-mx53_loco.c
index 37f67ca..5c8b550 100644
--- a/arch/arm/mach-imx/mach-mx53_loco.c
+++ b/arch/arm/mach-imx/mach-mx53_loco.c
@@ -23,6 +23,7 @@
 #include <linux/delay.h>
 #include <linux/gpio.h>
 #include <linux/i2c.h>
+#include <linux/platform_device.h>
 
 #include <mach/common.h>
 #include <mach/hardware.h>
@@ -32,7 +33,10 @@
 #include <asm/mach/arch.h>
 #include <asm/mach/time.h>
 
+#include "crm-regs-imx5.h"
 #include "devices-imx53.h"
+#include "pmic.h"
+#include "usb.h"
 
 #define MX53_LOCO_POWER			IMX_GPIO_NR(1, 8)
 #define MX53_LOCO_UI1			IMX_GPIO_NR(2, 14)
@@ -44,6 +48,8 @@
 #define LOCO_SD1_CD			IMX_GPIO_NR(3, 13)
 #define LOCO_ACCEL_EN			IMX_GPIO_NR(6, 14)
 
+static struct mxc_regulator_platform_data bus_freq_data;
+
 static iomux_v3_cfg_t mx53_loco_pads[] = {
 	/* FEC */
 	MX53_PAD_FEC_MDC__FEC_MDC,
@@ -268,12 +274,46 @@ void __init imx53_qsb_common_init(void)
 					 ARRAY_SIZE(mx53_loco_pads));
 }
 
+static struct mxc_dvfs_platform_data dvfs_core_data = {
+	.reg_id = "SW1A",
+	.clk1_id = "cpu_clk",
+	.clk2_id = "gpc_dvfs",
+	.gpc_cntr_offset = MXC_GPC_CNTR_OFFSET,
+	.gpc_vcr_offset = MXC_GPC_VCR_OFFSET,
+	.ccm_cdcr_offset = MXC_CCM_CDCR_OFFSET,
+	.ccm_cacrr_offset = MXC_CCM_CACRR_OFFSET,
+	.ccm_cdhipr_offset = MXC_CCM_CDHIPR_OFFSET,
+	.prediv_mask = 0x1F800,
+	.prediv_offset = 11,
+	.prediv_val = 3,
+	.div3ck_mask = 0xE0000000,
+	.div3ck_offset = 29,
+	.div3ck_val = 2,
+	.emac_val = 0x08,
+	.upthr_val = 25,
+	.dnthr_val = 9,
+	.pncthr_val = 33,
+	.upcnt_val = 10,
+	.dncnt_val = 10,
+	.delay_time = 30,
+};
+
 static struct i2c_board_info mx53loco_i2c_devices[] = {
 	{
 		I2C_BOARD_INFO("mma8450", 0x1C),
 	},
 };
 
+#define USB_PWREN	(6*32 + 8)
+
+static void mx53_loco_usbh1_vbus(bool on)
+{
+	if (on)
+		gpio_set_value(USB_PWREN, 1);
+	else
+		gpio_set_value(USB_PWREN, 0);
+}
+
 static void __init mx53_loco_board_init(void)
 {
 	int ret;
@@ -284,6 +324,7 @@ static void __init mx53_loco_board_init(void)
 	mx53_loco_fec_reset();
 	imx53_add_fec(&mx53_loco_fec_data);
 	imx53_add_imx2_wdt(0, NULL);
+	imx53_add_armpmu();
 
 	ret = gpio_request_one(LOCO_ACCEL_EN, GPIOF_OUT_INIT_HIGH, "accel_en");
 	if (ret)
@@ -298,6 +339,26 @@ static void __init mx53_loco_board_init(void)
 	imx_add_gpio_keys(&loco_button_data);
 	gpio_led_register_device(-1, &mx53loco_leds_data);
 	imx53_add_ahci_imx();
+	imx53_add_mxc_srtc();
+	mx53_loco_init_mc34708();
+	imx53_add_mxc_scc();
+
+	bus_freq_data.cpu_reg_id = "SW1A";
+	bus_freq_data.vcc_reg_id = "SW2";
+	imx_add_platform_device("busfreq", 0, NULL, 0,
+				&bus_freq_data, sizeof(bus_freq_data));
+	if (ret)
+		pr_err("Cannot register busfreq device: %d\n", ret);
+
+	imx53_add_dvfs_core(&dvfs_core_data);
+
+	/* USB PWR enable */
+	gpio_request(USB_PWREN, "usb-pwr");
+	gpio_direction_output(USB_PWREN, 0);
+
+	imx_otg_base = MX53_IO_ADDRESS(MX53_OTG_BASE_ADDR);
+	mx5_set_host1_vbus_func(mx53_loco_usbh1_vbus);
+	mx5_usbh1_init();
 }
 
 static void __init mx53_loco_timer_init(void)
-- 
1.7.9.7

