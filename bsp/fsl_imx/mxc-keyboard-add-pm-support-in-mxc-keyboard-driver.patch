From 242819f2fddf4af3eb85b1de4785c411af8ed0a8 Mon Sep 17 00:00:00 2001
From: Wang Hui <Hui.Wang@windriver.com>
Date: Wed, 19 May 2010 19:17:43 +0800
Subject: [PATCH 07/30] mxc/keyboard: add pm support in mxc keyboard driver

To make the keyboard as a wakeup device when enter PM suspending,
we need to add device wakeup management in this driver.

[The change is referred to mxc_keyb.c of L2.6.31_09.12.01_SDK.tar.gz
BSP package:http://www.freescale.com/webapp/sps/site/prod_summary.jsp\
?code=IMX35PDK&fpsp=1&tab=Design_Tools_Tab]

Signed-off-by: Wang Hui <Hui.Wang@windriver.com>
---
 drivers/input/keyboard/imx_keypad.c |   55 +++++++++++++++++++++++++++++++++++
 1 files changed, 55 insertions(+), 0 deletions(-)

diff --git a/drivers/input/keyboard/imx_keypad.c b/drivers/input/keyboard/imx_keypad.c
index d92c15c..9920241 100644
--- a/drivers/input/keyboard/imx_keypad.c
+++ b/drivers/input/keyboard/imx_keypad.c
@@ -567,6 +567,59 @@ static int __devexit imx_keypad_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM
+/*!
+ * This function puts the Keypad controller in low-power mode/state.
+ * If Keypad is enabled as a wake source(i.e. it can resume the system
+ * from suspend mode), the Keypad controller doesn't enter low-power state.
+ *
+ * @param   pdev  the device structure used to give information on Keypad
+ *                to suspend
+ * @param   state the power state the device is entering
+ *
+ * @return  return -1 when the keypad is pressed. Otherwise, return 0
+ */
+static int imx_keypad_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	struct imx_keypad *keypad = platform_get_drvdata(pdev);
+	/* When the keypad is still pressed, clean up registers and timers */
+	if (timer_pending(&keypad->check_matrix_timer))
+		return -1;
+
+	if (device_may_wakeup(&pdev->dev))
+		enable_irq_wake(keypad->irq);
+	else
+		disable_irq(keypad->irq);
+
+	return 0;
+}
+
+/*!
+ * This function brings the Keypad controller back from low-power state.
+ * If Keypad is enabled as a wake source(i.e. it can resume the system
+ * from suspend mode), the Keypad controller doesn't enter low-power state.
+ *
+ * @param   pdev  the device structure used to give information on Keypad
+ *                to resume
+ *
+ * @return  The function always returns 0.
+ */
+static int imx_keypad_resume(struct platform_device *pdev)
+{
+	struct imx_keypad *keypad = platform_get_drvdata(pdev);
+	if (device_may_wakeup(&pdev->dev))
+		disable_irq_wake(keypad->irq);
+	else
+		enable_irq(keypad->irq);
+
+	return 0;
+}
+
+#else
+#define mxc_kpp_suspend  NULL
+#define mxc_kpp_resume   NULL
+#endif				/* CONFIG_PM */
+
 static struct platform_driver imx_keypad_driver = {
 	.driver		= {
 		.name	= "imx-keypad",
@@ -574,6 +627,8 @@ static struct platform_driver imx_keypad_driver = {
 	},
 	.probe		= imx_keypad_probe,
 	.remove		= __devexit_p(imx_keypad_remove),
+	.suspend	= imx_keypad_suspend,
+	.resume		= imx_keypad_resume,
 };
 
 static int __init imx_keypad_init(void)
-- 
1.6.5.2

