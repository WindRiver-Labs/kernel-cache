From 9f93bcb2180ec681321268c87f426a8a5fcd4352 Mon Sep 17 00:00:00 2001
From: Anca-Jeanina Floarea <anca.floarea@freescale.com>
Date: Thu, 9 Aug 2012 18:28:21 +0000
Subject: [PATCH 282/518] dpa_stats: Fix IPSec class counter creation

Array of security association identifiers provided by user-space
application was improperly being used in kernel component.

Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_stats.c     |    9 ++-
 drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c |   72 ++++++++++++++++-------
 2 files changed, 57 insertions(+), 24 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.c b/drivers/staging/fsl_dpa_offload/dpa_stats.c
index eadcaa4..ad8ac48 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.c
@@ -1012,6 +1012,7 @@ static int set_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Store CcNode handle and set number of keys to one */
 	cnt_tbl_cb->keys[0].cc_node = cls_tbl.cc_node;
+	cnt_tbl_cb->keys[0].valid = TRUE;
 	cnt_tbl_cb->keys_num = 1;
 
 	/* Check the Classifier Table counter */
@@ -1127,6 +1128,7 @@ static int set_cnt_ipsec_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	}
 
 	cnt_ipsec_cb->sa_id[0] = params->ipsec_params.sa_id;
+	cnt_ipsec_cb->valid[0] = TRUE;
 	cnt_ipsec_cb->sa_id_num = 1;
 
 	err = dpa_ipsec_sa_get_stats(cnt_cb->ipsec_cb.sa_id[0], &stats);
@@ -1982,10 +1984,13 @@ static int get_cnt_ipsec_stats(struct dpa_stats_req_cb *req_cb,
 	for (i = 0; i < cnt_cb->ipsec_cb.sa_id_num; i++) {
 		if (!cnt_cb->ipsec_cb.valid[i]) {
 			/* Write the memory location */
-			*(uint32_t *)(req_cb->request_area) = 0;
+			memset(req_cb->request_area, 0,
+					cnt_cb->ipsec_cb.info.stats_num *
+					STATS_VAL_SIZE);
 
 			/* Update the memory pointer */
-			req_cb->request_area += STATS_VAL_SIZE;
+			req_cb->request_area += STATS_VAL_SIZE *
+					cnt_cb->ipsec_cb.info.stats_num;
 
 			continue;
 		}
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
index 7f5902d..4f111c6 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
@@ -379,6 +379,7 @@ static int do_ioctl_stats_create_class_counter(void *args)
 	struct dpa_stats_cls_cnt_classif_node *cnode;
 	struct dpa_stats_cls_cnt_classif_tbl  *tbl;
 	struct dpa_offload_lookup_key key;
+	int *sa_ids = NULL;
 	long ret = 0;
 	uint32_t i = 0;
 
@@ -387,18 +388,8 @@ static int do_ioctl_stats_create_class_counter(void *args)
 		return -EINVAL;
 	}
 
-	if (prm.cnt_params.type == DPA_STATS_CNT_CLASSIF_NODE) {
-		cnode = &prm.cnt_params.classif_node_params;
-
-		for (i = 0; i < prm.cnt_params.class_members; i++) {
-			ret = copy_key_descriptor(&cnode->keys[i], &key);
-			if (ret != 0) {
-				pr_err("Could not copy the key descriptor\n");
-				return -EINVAL;
-			}
-		}
-
-	} else if (prm.cnt_params.type == DPA_STATS_CNT_CLASSIF_TBL) {
+	switch (prm.cnt_params.type) {
+	case DPA_STATS_CNT_CLASSIF_TBL:
 		tbl = &prm.cnt_params.classif_tbl_params;
 
 		if (tbl->key_type == DPA_STATS_CLASSIF_SINGLE_KEY) {
@@ -436,6 +427,38 @@ static int do_ioctl_stats_create_class_counter(void *args)
 				}
 			}
 		}
+		break;
+	case DPA_STATS_CNT_CLASSIF_NODE:
+		cnode = &prm.cnt_params.classif_node_params;
+
+		for (i = 0; i < prm.cnt_params.class_members; i++) {
+			ret = copy_key_descriptor(&cnode->keys[i], &key);
+			if (ret != 0) {
+				pr_err("Could not copy the key descriptor\n");
+				return -EINVAL;
+			}
+		}
+		break;
+	case DPA_STATS_CNT_IPSEC:
+		/* Allocate memory to store the sa ids array */
+		sa_ids = kmalloc(prm.cnt_params.class_members, GFP_KERNEL);
+		if (!sa_ids) {
+			pr_err("No more memory for sa ids pointer\n");
+			return -ENOMEM;
+		}
+
+		if (copy_from_user(sa_ids,
+				prm.cnt_params.ipsec_params.sa_id,
+				(prm.cnt_params.class_members * sizeof(int)))) {
+			pr_err("Could not copy array of SA ids\n");
+			kfree(sa_ids);
+			return -EBUSY;
+		}
+
+		prm.cnt_params.ipsec_params.sa_id = sa_ids;
+		break;
+	default:
+		break;
 	}
 
 	ret = dpa_stats_create_class_counter(prm.stats_id,
@@ -448,16 +471,8 @@ static int do_ioctl_stats_create_class_counter(void *args)
 		ret = -EINVAL;
 	}
 
-	if (prm.cnt_params.type == DPA_STATS_CNT_CLASSIF_NODE) {
-		cnode = &prm.cnt_params.classif_node_params;
-
-		for (i = 0; i < prm.cnt_params.class_members; i++) {
-			kfree(cnode->keys[i].byte);
-			kfree(cnode->keys[i].mask);
-		}
-	}
-
-	if (prm.cnt_params.type == DPA_STATS_CNT_CLASSIF_TBL) {
+	switch (prm.cnt_params.type) {
+	case DPA_STATS_CNT_CLASSIF_TBL:
 		tbl = &prm.cnt_params.classif_tbl_params;
 
 		for (i = 0; i < prm.cnt_params.class_members; i++) {
@@ -473,6 +488,19 @@ static int do_ioctl_stats_create_class_counter(void *args)
 				kfree(tbl->pairs[i].second_key.mask);
 			}
 		}
+		break;
+	case DPA_STATS_CNT_CLASSIF_NODE:
+		for (i = 0; i < prm.cnt_params.class_members; i++) {
+			kfree(prm.cnt_params.classif_node_params.keys[i].byte);
+			kfree(prm.cnt_params.classif_node_params.keys[i].mask);
+		}
+		break;
+	case DPA_STATS_CNT_IPSEC:
+		kfree(sa_ids);
+		break;
+
+	default:
+		break;
 	}
 
 	return ret;
-- 
1.7.5.4

