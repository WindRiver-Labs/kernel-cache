From c8ef90dfcc85ec3e094561a807b25ac57c00cc66 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Tue, 7 Aug 2012 19:52:28 +0000
Subject: [PATCH 270/518] dpa_classifier: Add/fix type casts

Some variable type casts were added and fixed so that the code is
more explicit.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   21 +++++++++++----------
 1 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 0d5f365..b48f422 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -1320,7 +1320,7 @@ static int table_init_indexed(struct dpa_cls_table *cls_table)
 
 static int table_init_hash(struct dpa_cls_table *cls_table)
 {
-	unsigned int i;
+	uint16_t i;
 	int err = 0;
 	t_FmPcdCcNextEngineParams next_engine_params;
 	t_Handle cc_node;
@@ -3084,7 +3084,7 @@ static int init_fwd_hm(struct dpa_cls_hm *pfwd_hm)
 						e_FM_PCD_MANIP_INSRT_GENERIC;
 		hm_node->params.u.hdr.insrtParams.u.generic.replace = TRUE;
 
-		size = sizeof(struct ethhdr) - ETHERTYPE_SIZE;
+		size = (uint8_t)(sizeof(struct ethhdr) - ETHERTYPE_SIZE);
 		pdata = kzalloc(size, GFP_KERNEL);
 		if (!pdata) {
 			pr_err("ERROR: %s, %s (%d): Not enough RAM for "
@@ -3371,7 +3371,7 @@ static int init_insert_hm(struct dpa_cls_hm *pinsert_hm)
 {
 	struct dpa_cls_hm_node *hm_node = NULL;
 	unsigned int size;
-	unsigned int offset = 0;
+	uint8_t offset = 0;
 	uint8_t *pdata;
 
 	/* Create a header insert node: */
@@ -3404,14 +3404,15 @@ static int init_insert_hm(struct dpa_cls_hm *pinsert_hm)
 			memcpy(pdata,
 				&pinsert_hm->params.insert.param.eth.eth_header,
 				sizeof(struct ethhdr) - ETHERTYPE_SIZE);
-			offset += sizeof(struct ethhdr) - ETHERTYPE_SIZE;
+			offset += (uint8_t)(sizeof(struct ethhdr) -
+								ETHERTYPE_SIZE);
 			/* Copy the VLAN tags */
 			memcpy(&pdata[offset],
 				&pinsert_hm->params.insert.param.eth.qtag,
 				pinsert_hm->params.insert.param.eth.num_tags *
 				sizeof(struct vlan_header));
-			offset += pinsert_hm->params.insert.param.eth.num_tags *
-				sizeof(struct vlan_header);
+			offset += (uint8_t) (pinsert_hm->params.insert.param.
+				eth.num_tags * sizeof(struct vlan_header));
 			/* Copy the EtherType */
 			memcpy(&pdata[offset],
 		&pinsert_hm->params.insert.param.eth.eth_header.h_proto,
@@ -3972,8 +3973,8 @@ static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm)
 			hm_node->params.u.hdr.insrtParams.u.generic.offset =
 							ETHERTYPE_OFFSET;
 
-			size = pvlan_hm->params.vlan.params.egress.num_tags *
-						sizeof(struct vlan_header);
+			size = (uint8_t) (pvlan_hm->params.vlan.params.egress.
+				num_tags * sizeof(struct vlan_header));
 			pdata = kzalloc(size, GFP_KERNEL);
 			if (!pdata) {
 				pr_err("ERROR: %s, %s (%d): Not enough memory "
@@ -4167,8 +4168,8 @@ static int init_mpls_hm(struct dpa_cls_hm *pmpls_hm)
 					specificL2 =
 					e_FM_PCD_MANIP_HDR_INSRT_MPLS;
 
-		size = pmpls_hm->params.mpls.num_labels *
-						sizeof(struct mpls_header);
+		size = (uint8_t) (pmpls_hm->params.mpls.num_labels *
+						sizeof(struct mpls_header));
 		pdata = kzalloc(size, GFP_KERNEL);
 		if (!pdata) {
 			pr_err("ERROR: %s, %s (%d): Not enough memory for MPLS "
-- 
1.7.5.4

