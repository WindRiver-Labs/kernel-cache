From 850187e638116c0268aaf7e9be01727d4647f029 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Wed, 12 Sep 2012 16:01:44 +0000
Subject: [PATCH 303/518] dpa_classifier: Add import feature for VLAN specific
 HM

Implemented the import feature for the VLAN specific header
manipulation.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |  107 ++++++++++++----------
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |   12 +--
 2 files changed, 62 insertions(+), 57 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index a000cf5..45e1818 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -4261,12 +4261,6 @@ int dpa_classif_set_vlan_hm(const struct dpa_cls_hm_vlan_params	*vlan_params,
 
 	*hmd = DPA_OFFLD_DESC_NONE;
 
-	if (res) {
-		pr_err("ERROR: %s, %s (%d): Header manipulation import is not "
-			"yet supported.\n", __FILE__, __func__, __LINE__);
-		return -ENOSYS;
-	}
-
 	err = vlan_hm_check_params(vlan_params);
 	if (err < 0)
 		return err;
@@ -4283,64 +4277,88 @@ int dpa_classif_set_vlan_hm(const struct dpa_cls_hm_vlan_params	*vlan_params,
 	/* Copy the VLAN specific HM parameters locally */
 	memcpy(&pvlan_hm->vlan_params, vlan_params, sizeof(*vlan_params));
 
-	if (res)
-		err = import_vlan_hm(pvlan_hm, res);
-	else {
-		err = init_vlan_hm(pvlan_hm);
-		if (err) {
-			dpa_classif_free_hm(*hmd);
-			*hmd = DPA_OFFLD_DESC_NONE;
-			return err;
-		}
-
-		if (chain_head)
-			/* Initialize low level HM ops chain */
-			err = init_hm_chain(pvlan_hm->vlan_params.fm_pcd,
-				pvlan_hm->hm_chain, pvlan_hm->hm_chain);
+	err = vlan_hm_prepare_nodes(pvlan_hm, res);
+	if (err < 0) {
+		pr_err("ERROR: %s, %s (%d): Failed to acquire necessary HM "
+			"nodes.\n", __FILE__, __func__, __LINE__);
+		goto vlan_hm_error;
 	}
 
-	if (err) {
-		dpa_classif_free_hm(*hmd);
-		*hmd = DPA_OFFLD_DESC_NONE;
+	err = vlan_hm_update_params(pvlan_hm);
+	if (err < 0) {
+		pr_err("ERROR: %s, %s (%d): Failed to update low level header "
+			"manipulation parameters.\n", __FILE__, __func__,
+			__LINE__);
+		goto vlan_hm_error;
 	}
 
+	if (chain_head)
+		err = init_hm_chain(pvlan_hm->vlan_params.fm_pcd,
+				pvlan_hm->hm_chain,
+				pvlan_hm->hm_chain);
+
+	return err;
+
+vlan_hm_error:
+
+	remove_hm_op(*hmd);
+
+	*hmd = DPA_OFFLD_DESC_NONE;
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_set_vlan_hm);
 
-static int import_vlan_hm(struct dpa_cls_hm *pvlan_hm,
+static int vlan_hm_prepare_nodes(struct dpa_cls_hm *pvlan_hm,
 				const struct dpa_cls_hm_vlan_resources *res)
 {
+	struct dpa_cls_hm_node *hm_node;
 	void * const *phm_nodes;
-	int err;
+	int err = 0;
 
 	BUG_ON(!pvlan_hm);
-	BUG_ON(!res);
 
-	phm_nodes = &res->vlan_node;
+	pvlan_hm->num_nodes = 1;
 
-	err = import_hm_nodes_to_chain(phm_nodes, 1, pvlan_hm);
+	if (res) { /* Import HM nodes */
+		phm_nodes = &res->vlan_node;
 
-	/* Update here the hm nodes parameters */
+		err = import_hm_nodes_to_chain(phm_nodes,
+					pvlan_hm->num_nodes,
+					pvlan_hm);
+	} else { /* Create HM nodes */
+		hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
+		if (!hm_node) {
+			pr_err("ERROR: %s, %s (%d): Not enough memory for "
+				"header manip nodes.\n", __FILE__, __func__,
+				__LINE__);
+			return -ENOMEM;
+		}
+
+		INIT_LIST_HEAD(&hm_node->list_node);
+		pvlan_hm->hm_node[0]	= hm_node;
+
+		add_local_hm_nodes_to_chain(pvlan_hm);
+	}
 
 	return err;
 }
 
-static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm)
+static int vlan_hm_update_params(struct dpa_cls_hm *pvlan_hm)
 {
-	struct dpa_cls_hm_node *hm_node = NULL;
+	struct dpa_cls_hm_node *hm_node;
 	uint8_t size;
 	uint8_t *pdata;
 
 	BUG_ON(!pvlan_hm);
 
-	/* Create a header manip node for VLAN: */
-	hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
-	if (!hm_node) {
-		pr_err("ERROR: %s, %s (%d): No more memory for header manip "
-			"nodes.\n", __FILE__, __func__, __LINE__);
-		return -ENOMEM;
+	if ((pvlan_hm->num_nodes < 1) || (!pvlan_hm->hm_node[0])) {
+		pr_err("ERROR: %s, %s (%d): Inconsistency between resources "
+			"and provided parameters.\n", __FILE__, __func__,
+			__LINE__);
+		return -EINVAL;
 	}
+	hm_node = pvlan_hm->hm_node[0];
 
 	hm_node->params.type = e_FM_PCD_MANIP_HDR;
 
@@ -4392,6 +4410,7 @@ static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm)
 			hm_node->params.u.hdr.fieldUpdate = TRUE;
 			hm_node->params.u.hdr.fieldUpdateParams.type =
 					e_FM_PCD_MANIP_HDR_FIELD_UPDATE_VLAN;
+			hm_node->params.u.hdr.dontParseAfterManip = TRUE;
 
 			switch (pvlan_hm->vlan_params.egress.update_op) {
 			case DPA_CLS_HM_VLAN_UPDATE_VPri:
@@ -4427,20 +4446,14 @@ static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm)
 		break;
 	}
 
-	INIT_LIST_HEAD(&hm_node->list_node);
-	pvlan_hm->hm_node[0]	= hm_node;
-	pvlan_hm->num_nodes	= 1;
-
-	add_local_hm_nodes_to_chain(pvlan_hm);
-
 	return 0;
 }
 
 int dpa_classif_modify_vlan_hm(int hmd,
 	const struct dpa_cls_hm_vlan_params *new_vlan_params, int modify_flags)
 {
-	pr_err("ERROR: %s, %s (%d): VLAN HM runtime modification not supported "
-		"yet.\n", __FILE__, __func__, __LINE__);
+	pr_err("ERROR: %s, %s (%d): Not implemented yet.\n", __FILE__, __func__,
+		__LINE__);
 	return -ENOSYS;
 }
 EXPORT_SYMBOL(dpa_classif_modify_vlan_hm);
@@ -4597,8 +4610,8 @@ static int init_mpls_hm(struct dpa_cls_hm *pmpls_hm)
 int dpa_classif_modify_mpls_hm(int hmd,
 	const struct dpa_cls_hm_mpls_params *new_mpls_params, int modify_flags)
 {
-	pr_err("ERROR: %s, %s (%d): MPLS HM runtime modification not supported "
-		"yet.\n", __FILE__, __func__, __LINE__);
+	pr_err("ERROR: %s, %s (%d): Not implemented yet.\n", __FILE__, __func__,
+		__LINE__);
 	return -ENOSYS;
 }
 EXPORT_SYMBOL(dpa_classif_modify_mpls_hm);
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index c0792c7..d4f6427 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -481,18 +481,10 @@ static int update_hm_update_params(struct dpa_cls_hm *pupdate_hm);
 static int
 	vlan_hm_check_params(const struct dpa_cls_hm_vlan_params *vlan_params);
 
-/*
- * Imports the low level header manipulation nodes for a VLAN specific
- * classifier header manipulation op.
- */
-static int import_vlan_hm(struct dpa_cls_hm *pvlan_hm,
+static int vlan_hm_prepare_nodes(struct dpa_cls_hm *pvlan_hm,
 				const struct dpa_cls_hm_vlan_resources *res);
 
-/*
- * Creates the low level header manipulation nodes for a VLAN specific
- * classifier header manipulation op.
- */
-static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm);
+static int vlan_hm_update_params(struct dpa_cls_hm *pvlan_hm);
 
 /*
  * Verifies that the parameters provided for a MPLS specific header
-- 
1.7.5.4

