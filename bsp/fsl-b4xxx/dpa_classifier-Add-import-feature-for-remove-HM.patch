From 13bd4854a55b5bf01356b2bc8f51cf56ddb22816 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Tue, 11 Sep 2012 20:02:28 +0000
Subject: [PATCH 300/518] dpa_classifier: Add import feature for remove HM

Implemented the import feature for the remove header manipulation.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |  109 ++++++++++++---------
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |   12 +--
 2 files changed, 64 insertions(+), 57 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index a2121b6..927190d 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -2470,8 +2470,8 @@ static int insert_hm_check_params(const struct dpa_cls_hm_insert_params
 		if (insert_params->eth.num_tags >
 			DPA_CLS_HM_MAX_VLANs) {
 			pr_err("ERROR: %s, %s (%d): Insert HM: Can only insert "
-				"a maximum of %d VLANs.\n", __FILE__, __func__,
-				__LINE__, DPA_CLS_HM_MAX_VLANs);
+				"a maximum of %d VLAN tags.\n", __FILE__,
+				__func__, __LINE__, DPA_CLS_HM_MAX_VLANs);
 			return -EINVAL;
 		}
 		break;
@@ -3488,12 +3488,6 @@ int dpa_classif_set_remove_hm(const struct dpa_cls_hm_remove_params
 
 	*hmd = DPA_OFFLD_DESC_NONE;
 
-	if (res) {
-		pr_err("ERROR: %s, %s (%d): Header manipulation import is not "
-			"yet supported.\n", __FILE__, __func__, __LINE__);
-		return -ENOSYS;
-	}
-
 	err = remove_hm_check_params(remove_params);
 	if (err < 0)
 		return err;
@@ -3511,66 +3505,91 @@ int dpa_classif_set_remove_hm(const struct dpa_cls_hm_remove_params
 	memcpy(&premove_hm->remove_params, remove_params,
 						sizeof(*remove_params));
 
-	if (res)
-		err = import_remove_hm(premove_hm, res);
-	else {
-		err = init_remove_hm(premove_hm);
-		if (err) {
-			dpa_classif_free_hm(*hmd);
-			*hmd = DPA_OFFLD_DESC_NONE;
-			return err;
-		}
-
-		if (chain_head)
-			/* Initialize low level HM ops chain */
-			err = init_hm_chain(premove_hm->remove_params.fm_pcd,
-				premove_hm->hm_chain, premove_hm->hm_chain);
+	err = remove_hm_prepare_nodes(premove_hm, res);
+	if (err < 0) {
+		pr_err("ERROR: %s, %s (%d): Failed to acquire necessary HM "
+			"nodes.\n", __FILE__, __func__, __LINE__);
+		goto remove_hm_error;
 	}
 
-	if (err) {
-		dpa_classif_free_hm(*hmd);
-		*hmd = DPA_OFFLD_DESC_NONE;
+	err = remove_hm_update_params(premove_hm);
+	if (err < 0) {
+		pr_err("ERROR: %s, %s (%d): Failed to update low level header "
+			"manipulation parameters.\n", __FILE__, __func__,
+			__LINE__);
+		goto remove_hm_error;
 	}
 
+	if (chain_head)
+		err = init_hm_chain(premove_hm->remove_params.fm_pcd,
+				premove_hm->hm_chain,
+				premove_hm->hm_chain);
+
+	return err;
+
+remove_hm_error:
+
+	remove_hm_op(*hmd);
+
+	*hmd = DPA_OFFLD_DESC_NONE;
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_set_remove_hm);
 
-static int import_remove_hm(struct dpa_cls_hm *premove_hm,
+static int remove_hm_prepare_nodes(struct dpa_cls_hm *premove_hm,
 				const struct dpa_cls_hm_remove_resources *res)
 {
+	struct dpa_cls_hm_node *hm_node;
 	void * const *phm_nodes;
-	int err;
+	int err = 0;
 
 	BUG_ON(!premove_hm);
-	BUG_ON(!res);
 
-	phm_nodes = &res->remove_node;
+	premove_hm->num_nodes = 1;
 
-	err = import_hm_nodes_to_chain(phm_nodes, 1, premove_hm);
+	if (res) { /* Import HM nodes */
+		phm_nodes = &res->remove_node;
 
-	/* Update here the hm nodes parameters */
+		err = import_hm_nodes_to_chain(phm_nodes,
+					premove_hm->num_nodes,
+					premove_hm);
+	} else { /* Create HM nodes */
+		hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
+		if (!hm_node) {
+			pr_err("ERROR: %s, %s (%d): Not enough memory for "
+				"header manip nodes.\n", __FILE__, __func__,
+				__LINE__);
+			return -ENOMEM;
+		}
+
+		INIT_LIST_HEAD(&hm_node->list_node);
+		premove_hm->hm_node[0]	= hm_node;
+
+		add_local_hm_nodes_to_chain(premove_hm);
+	}
 
 	return err;
 }
 
-static int init_remove_hm(struct dpa_cls_hm *premove_hm)
+static int remove_hm_update_params(struct dpa_cls_hm *premove_hm)
 {
-	struct dpa_cls_hm_node *hm_node = NULL;
+	struct dpa_cls_hm_node *hm_node;
 
 	BUG_ON(!premove_hm);
 
-	/* Create a header remove node: */
-	hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
-	if (!hm_node) {
-		pr_err("ERROR: %s, %s (%d): No more memory for header manip "
-			"nodes.\n", __FILE__, __func__, __LINE__);
-		return -ENOMEM;
+	if ((premove_hm->num_nodes < 1) || (!premove_hm->hm_node[0])) {
+		pr_err("ERROR: %s, %s (%d): Inconsistency between resources "
+			"and provided parameters.\n", __FILE__, __func__,
+			__LINE__);
+		return -EINVAL;
 	}
+	hm_node = premove_hm->hm_node[0];
 
 	hm_node->params.type			= e_FM_PCD_MANIP_HDR;
 	hm_node->params.u.hdr.rmv		= TRUE;
 	hm_node->params.u.hdr.rmvParams.type	= e_FM_PCD_MANIP_RMV_GENERIC;
+	hm_node->params.u.hdr.dontParseAfterManip = TRUE;
 
 	switch (premove_hm->remove_params.type) {
 	case DPA_CLS_HM_REMOVE_PPP:
@@ -3586,15 +3605,11 @@ static int init_remove_hm(struct dpa_cls_hm *premove_hm)
 					premove_hm->remove_params.custom.size;
 		break;
 	default:
+		/* Should never get here */
+		BUG_ON(false);
 		break;
 	}
 
-	INIT_LIST_HEAD(&hm_node->list_node);
-	premove_hm->hm_node[0]	= hm_node;
-	premove_hm->num_nodes	= 1;
-
-	add_local_hm_nodes_to_chain(premove_hm);
-
 	return 0;
 }
 
@@ -3602,8 +3617,8 @@ int dpa_classif_modify_remove_hm(int hmd,
 	const struct dpa_cls_hm_remove_params *new_remove_params,
 	int modify_flags)
 {
-	pr_err("ERROR: %s, %s (%d): Remove HM runtime modification not "
-		"supported yet.\n", __FILE__, __func__, __LINE__);
+	pr_err("ERROR: %s, %s (%d): Not implemented yet.\n", __FILE__, __func__,
+		__LINE__);
 	return -ENOSYS;
 }
 EXPORT_SYMBOL(dpa_classif_modify_remove_hm);
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index 2db5ed1..7843e27 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -453,18 +453,10 @@ static int init_fwd_hm(struct dpa_cls_hm *pfwd_hm);
 static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
 	*remove_params);
 
-/*
- * Imports the low level header manipulation nodes for a header remove
- * classifier header manipulation op.
- */
-static int import_remove_hm(struct dpa_cls_hm *premove_hm,
+static int remove_hm_prepare_nodes(struct dpa_cls_hm *premove_hm,
 				const struct dpa_cls_hm_remove_resources *res);
 
-/*
- * Creates the low level header manipulation nodes for a header remove
- * classifier header manipulation op.
- */
-static int init_remove_hm(struct dpa_cls_hm *premove_hm);
+static int remove_hm_update_params(struct dpa_cls_hm *premove_hm);
 
 /*
  * Verifies that the parameters provided for a header insert header
-- 
1.7.5.4

