From f932a27e5c00d238b3346927c8dbdc411fee30fc Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Fri, 14 Dec 2012 14:23:09 +0200
Subject: [PATCH 448/518] dpa_classifier: Fix param transfer for 32bit user
 space apps/64bit kernel compatibility mode for
 function dpa_classif_table_get_params

The function dpa_classif_table_get_params did not have any
special code to manage parameter transfer from user space to
kernel space in the 32bit/64bit compat mode. This was added
now.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/dpa_classifier_ioctl.h |   20 +++--
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |   88 ++++++++++++++++++--
 2 files changed, 93 insertions(+), 15 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
index 9d772d1..bceff54 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
@@ -492,20 +492,24 @@ int dpa_cls_tbl_entry_params_compatcpy(
 	const struct compat_ioc_dpa_cls_tbl_entry_params	*uparam);
 
 int dpa_cls_tbl_params_compatcpy(
-		struct ioc_dpa_cls_tbl_params *kparam,
-		const struct compat_ioc_dpa_cls_tbl_params *uparam);
+		struct ioc_dpa_cls_tbl_params			*kparam,
+		const struct compat_ioc_dpa_cls_tbl_params	*uparam);
+
+int dpa_cls_tbl_params_rcompatcpy(
+		struct compat_ioc_dpa_cls_tbl_params		*uparam,
+		const struct ioc_dpa_cls_tbl_params		*kparam);
 
 int dpa_cls_tbl_miss_action_params_compatcpy(
-		struct ioc_dpa_cls_tbl_miss_action *kparam,
-		const struct compat_ioc_dpa_cls_tbl_miss_action *uparam);
+		struct ioc_dpa_cls_tbl_miss_action		*kparam,
+		const struct compat_ioc_dpa_cls_tbl_miss_action	*uparam);
 
 int dpa_cls_tbl_action_params_compatcpy(
-		struct dpa_cls_tbl_action *kparam,
-		const struct dpa_cls_compat_tbl_action *uparam);
+		struct dpa_cls_tbl_action			*kparam,
+		const struct dpa_cls_compat_tbl_action		*uparam);
 
 int dpa_cls_tbl_action_params_rcompatcpy(
-		struct dpa_cls_compat_tbl_action *uparam,
-		const struct dpa_cls_tbl_action *kparam);
+		struct dpa_cls_compat_tbl_action		*uparam,
+		const struct dpa_cls_tbl_action			*kparam);
 
 int dpa_cls_tbl_entry_mod_by_key_params_compatcpy(
 	struct ioc_dpa_cls_tbl_entry_mod_by_key			*kparam,
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index ed8195c..9d1d8c9 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -441,27 +441,58 @@ long wrp_dpa_classif_do_ioctl(
 #endif /* CONFIG_COMPAT */
 	case DPA_CLS_IOC_TBL_GET_PARAMS:
 	{
-		struct ioc_dpa_cls_tbl_params param;
+		struct ioc_dpa_cls_tbl_params kparam;
+#ifdef CONFIG_COMPAT
+		struct compat_ioc_dpa_cls_tbl_params uparam;
 
-		dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d): "
-			"table_get_params\n", __func__, __LINE__));
+		/* Prepare arguments */
+		if (compat_mode) {
+			if (copy_from_user(&uparam, (void *) args,
+							sizeof(uparam))) {
+				pr_err("ERROR: %s, %s (%d): Read failed: "
+					"dpa_classif_table_lookup_by_key user "
+					"space args.\n", __FILE__, __func__,
+					__LINE__);
+				return -EBUSY;
+			}
 
+			/* Transfer the data into the kernel space params: */
+			kparam.td = uparam.td;
+		} else
+#endif /* CONFIG_COMPAT */
 		/* Prepare arguments */
-		if (copy_from_user(&param, (void *) args, sizeof(param))) {
+		if (copy_from_user(&kparam, (void *) args, sizeof(kparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: "
 				"dpa_classif_table_lookup_by_key user space "
 				"args.\n", __FILE__, __func__, __LINE__);
 			return -EBUSY;
 		}
 
+		dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d): "
+			"table_get_params\n", __func__, __LINE__));
+
 		/* Call function */
-		ret = dpa_classif_table_get_params(param.td,
-						&param.table_params);
+		ret = dpa_classif_table_get_params(kparam.td,
+						&kparam.table_params);
+		if (ret < 0)
+			return ret;
+
+#ifdef CONFIG_COMPAT
+	if (compat_mode) {
+		ret = dpa_cls_tbl_params_rcompatcpy(&uparam, &kparam);
 		if (ret < 0)
 			return ret;
 
+		if (copy_to_user((void *) args, &uparam, sizeof(uparam))) {
+			pr_err("ERROR: %s, %s (%d): Write failed: "
+				"dpa_classif_table_get_params result.\n",
+				__FILE__, __func__, __LINE__);
+			return -EBUSY;
+		}
+	} else
+#endif /* CONFIG_COMPAT */
 		/* Return results to user space */
-		if (copy_to_user((void *) args, &param, sizeof(param))) {
+		if (copy_to_user((void *) args, &kparam, sizeof(kparam))) {
 			pr_err("ERROR: %s, %s (%d): Write failed: "
 				"dpa_classif_table_get_params result.\n",
 				__FILE__, __func__, __LINE__);
@@ -2462,6 +2493,49 @@ int dpa_cls_tbl_params_compatcpy(
 	return 0;
 }
 
+int dpa_cls_tbl_params_rcompatcpy(
+		struct compat_ioc_dpa_cls_tbl_params	*uparam,
+		const struct ioc_dpa_cls_tbl_params	*kparam)
+{
+	uparam->table_params.fm_pcd = compat_get_ptr2id(
+						kparam->table_params.fm_pcd,
+						FM_MAP_TYPE_PCD_NODE);
+	uparam->table_params.cc_node = compat_get_ptr2id(
+					kparam->table_params.cc_node,
+					FM_MAP_TYPE_PCD_NODE);
+	if (kparam->table_params.distribution)
+		uparam->table_params.distribution = compat_get_ptr2id(
+					kparam->table_params.distribution,
+					FM_MAP_TYPE_PCD_NODE);
+
+	uparam->table_params.type	= kparam->table_params.type;
+	uparam->table_params.entry_mgmt	= kparam->table_params.entry_mgmt;
+	uparam->table_params.prefilled_entries =
+					kparam->table_params.prefilled_entries;
+
+	switch (kparam->table_params.type) {
+	case DPA_CLS_TBL_INDEXED:
+		memcpy(&uparam->table_params.indexed_params,
+				&kparam->table_params.indexed_params,
+				sizeof(struct dpa_cls_tbl_indexed_params));
+		break;
+	case DPA_CLS_TBL_HASH:
+		memcpy(&uparam->table_params.hash_params,
+				&kparam->table_params.hash_params,
+				sizeof(struct dpa_cls_tbl_hash_params));
+
+		break;
+	case DPA_CLS_TBL_EXACT_MATCH:
+		memcpy(&uparam->table_params.exact_match_params,
+				&kparam->table_params.exact_match_params,
+				sizeof(struct dpa_cls_tbl_exact_match_params));
+
+		break;
+	}
+
+	return 0;
+}
+
 int dpa_cls_tbl_miss_action_params_compatcpy(
 		struct ioc_dpa_cls_tbl_miss_action		*kparam,
 		const struct compat_ioc_dpa_cls_tbl_miss_action	*uparam)
-- 
1.7.5.4

