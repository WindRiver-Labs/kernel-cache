From 7b9c4629f2ecffe8a2af0517c6c52cb0c98cf1db Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Thu, 17 May 2012 22:42:17 +0000
Subject: [PATCH 157/518] DPA IPSec - add support for getting SA lifetime
 counters

Implemented dpa_ipsec_sa_get_stats external API function
for DPA IPSec component, which is used for getting the
SA lifetime counters (packets and bytes processed).

This function will be used by the DPA IPSec Statistics component

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
Acked-by: Mihai Serb <mihai.serb@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c |   31 +++++++++++++++++++++++++++
 include/linux/fsl_dpa_ipsec.h               |   10 ++++++++
 2 files changed, 41 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index bd37c77..a02fdfc 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -2047,6 +2047,7 @@ static int copy_sa_params_to_out_sa(struct dpa_ipsec_sa *sa,
 	/* Only IPv4 inner packets are currently supported */
 	sa->sec_desc->pdb_en.ip_nh = 0x04;
 
+	sa->enable_stats = sa_params->enable_stats;
 #ifdef DEBUG_PARAM
 	/* Printing all the parameters */
 	print_sa_sec_param(sa);
@@ -2180,6 +2181,7 @@ static int copy_sa_params_to_in_sa(struct dpa_ipsec_sa *sa,
 	       sizeof(struct dpa_ipsec_ip_address));
 
 	sa->policy_miss_fqid = sa_params->sa_in_params.policy_miss_fqid;
+	sa->enable_stats = sa_params->enable_stats;
 #ifdef DEBUG_PARAM
 	/* Printing all the parameters */
 	print_sa_sec_param(sa);
@@ -3690,3 +3692,32 @@ int dpa_ipsec_sa_flush_policies(int sa_id)
 	return 0;
 }
 EXPORT_SYMBOL(dpa_ipsec_sa_flush_policies);
+
+int dpa_ipsec_sa_get_stats(int sa_id, struct dpa_ipsec_sa_stats *sa_stats)
+{
+	struct dpa_ipsec_sa *sa;
+	uint32_t *desc;
+
+	if (!sa_stats) {
+		xx_pr_err("Invalid SA statistics storage pointer\n");
+		return -EINVAL;
+	}
+
+	sa = get_sa_from_sa_id(sa_id);
+	if (!sa) {
+		xx_pr_err("Invalid SA handle for SA id %d\n", sa_id);
+		return -EINVAL;
+	}
+
+	if (!sa->enable_stats) {
+		xx_pr_err("Statistics are not enabled for SA id %d\n", sa_id);
+		return -EPERM;
+	}
+
+	desc = (uint32_t *)sa->sec_desc->desc;
+	sa_stats->packets_count = *(desc + sa->stats_offset / sizeof(u32));
+	sa_stats->bytes_count = *(desc + sa->stats_offset / sizeof(u32) + 1);
+
+	return 0;
+}
+EXPORT_SYMBOL(dpa_ipsec_sa_get_stats);
diff --git a/include/linux/fsl_dpa_ipsec.h b/include/linux/fsl_dpa_ipsec.h
index 89ed38b..3ac6b98 100644
--- a/include/linux/fsl_dpa_ipsec.h
+++ b/include/linux/fsl_dpa_ipsec.h
@@ -326,6 +326,7 @@ struct dpa_ipsec_sa_params {
 				 * to outer header and vice versa	      */
 	uint8_t sa_wqid;	/* Work queue Id for all the queues in this SA*/
 	uint8_t sa_bpid;	/* Buffer Pool ID to be used with this SA     */
+	int	enable_stats;	/* Enable counting packets and bytes processed*/
 	struct dpa_ipsec_sa_crypto_params crypto_params;/* IPSec crypto params*/
 	enum dpa_ipsec_direction sa_dir;  /* SA direction: Outbound/Inbound   */
 	union {
@@ -440,4 +441,13 @@ int dpa_ipsec_sa_get_policies(int sa_id,
 /* This function will remove all policies associated with the specified SA */
 int dpa_ipsec_sa_flush_policies(int sa_id);
 
+/* DPA-IPSec Statistics */
+struct dpa_ipsec_sa_stats {
+	uint32_t packets_count;
+	uint32_t bytes_count;
+};
+
+/* This function will populate sa_stats with SEC statistics for SA with sa_id */
+int dpa_ipsec_sa_get_stats(int sa_id, struct dpa_ipsec_sa_stats *sa_stats);
+
 #endif	/* __FSL_DPA_IPSEC_H */
-- 
1.7.5.4

