From 1a79a16fc0d4d0186b2169739885123bfe9c850e Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Thu, 17 May 2012 22:42:28 +0000
Subject: [PATCH 158/518] DPA IPSec Wrapper - add support to get lifetime
 counters from UserSpace

New ioctl DPA_IPSEC_IOC_GET_SA_STATS used for calling
dpa_ipsec_sa_get_stats function from user space.

Created ioc_dpa_ipsec_sa_get_stats for passing funtion argument
from user space application

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
Acked-by: Mihai Serb <mihai.serb@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec_ioctl.h |    8 ++++
 drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c   |   42 +++++++++++++++++++++
 2 files changed, 50 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec_ioctl.h b/drivers/staging/fsl_dpa_offload/dpa_ipsec_ioctl.h
index 005d1b8..4475061 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec_ioctl.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec_ioctl.h
@@ -68,6 +68,11 @@ struct ioc_dpa_ipsec_sa_get_policies {
 	int *num_pol;		/* number of policies */
 };
 
+struct ioc_dpa_ipsec_sa_get_stats {
+	int sa_id;		/* sa id */
+	struct dpa_ipsec_sa_stats *sa_stats;
+};
+
 #define DPA_IPSEC_IOC_MAGIC	0xee
 
 #define DPA_IPSEC_IOC_INIT \
@@ -100,4 +105,7 @@ struct ioc_dpa_ipsec_sa_get_policies {
 #define DPA_IPSEC_IOC_FLUSH_SA_POLICIES \
 	_IOW(DPA_IPSEC_IOC_MAGIC, 9, int)
 
+#define DPA_IPSEC_IOC_GET_SA_STATS \
+	_IOWR(DPA_IPSEC_IOC_MAGIC, 11, struct ioc_dpa_ipsec_sa_get_stats)
+
 #endif	/* __DPA_IPSEC_IOCTL_H */
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
index fb81935..05d44c7 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
@@ -338,6 +338,48 @@ err_pol_cleanup:
 		break;
 	}
 
+	case DPA_IPSEC_IOC_GET_SA_STATS: {
+		struct ioc_dpa_ipsec_sa_get_stats prm, *in_prm;
+		int sa_id;
+
+		in_prm = (struct ioc_dpa_ipsec_sa_get_stats *)args;
+		if (in_prm->sa_id < 0) {
+			xx_pr_err("Invalid input SA id\n");
+			return -EINVAL;
+		}
+
+		if (!in_prm->sa_stats) {
+			xx_pr_err("Invalid parameters\n");
+			return -EINVAL;
+		}
+
+		sa_id = in_prm->sa_id;
+
+		prm.sa_stats = xx_zalloc(sizeof(*prm.sa_stats));
+		if (!prm.sa_stats) {
+			xx_pr_err("No more memory");
+			return -ENOMEM;
+		}
+
+		err = dpa_ipsec_sa_get_stats(sa_id, prm.sa_stats);
+		if (err < 0) {
+			xx_pr_err("Getting stats failed\n");
+			kfree(prm.sa_stats);
+			return err;
+		}
+
+		if (copy_to_user(in_prm->sa_stats, prm.sa_stats,
+				 sizeof(*prm.sa_stats))) {
+			xx_pr_err("Could not copy parameters\n");
+			kfree(prm.sa_stats);
+			return -EINVAL;
+		}
+
+		kfree(prm.sa_stats);
+
+		break;
+	}
+
 	default:
 		xx_pr_err("Invalid DPA IPsec ioctl\n");
 		break;
-- 
1.7.5.4

