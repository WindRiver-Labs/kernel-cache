From 5ffa3e0413a831fbf1d61939ad65c8c6feedd2cd Mon Sep 17 00:00:00 2001
From: Anca-Jeanina Floarea <anca.floarea@freescale.com>
Date: Fri, 3 Aug 2012 22:47:47 +0000
Subject: [PATCH 250/518] Added DPA Stats component

The purpose of the DPA Stats module is to provide to the Application
a unitary method for retrieving counters that are spread at different
hardware or software locations.

Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/Makefile    |    2 +-
 drivers/staging/fsl_dpa_offload/dpa_stats.c |  250 +++++++++++++++++++++++++++
 drivers/staging/fsl_dpa_offload/dpa_stats.h |   62 +++++++
 include/linux/fsl_dpa_offload.h             |    2 +-
 include/linux/fsl_dpa_stats.h               |   73 ++++++++
 5 files changed, 387 insertions(+), 2 deletions(-)
 create mode 100644 drivers/staging/fsl_dpa_offload/dpa_stats.c
 create mode 100644 drivers/staging/fsl_dpa_offload/dpa_stats.h
 create mode 100644 include/linux/fsl_dpa_stats.h

diff --git a/drivers/staging/fsl_dpa_offload/Makefile b/drivers/staging/fsl_dpa_offload/Makefile
index 99d4a48..4e419d1 100644
--- a/drivers/staging/fsl_dpa_offload/Makefile
+++ b/drivers/staging/fsl_dpa_offload/Makefile
@@ -49,5 +49,5 @@ obj-$(CONFIG_FSL_IPACC_USECASES)   += usecases/
 obj-$(CONFIG_FSL_DPA_OFFLOAD) += dpa_offload.o
 
 dpa_offload-objs :=  crc8.o dpa_classifier.o dpa_compat.o dpa_ipsec.o \
-		     dpa_ipsec_desc.o cq.o wrp_dpa_classifier.o \
+		     dpa_ipsec_desc.o cq.o dpa_stats.o wrp_dpa_classifier.o \
 		     wrp_dpa_ipsec.o dpa_offload_module.o
diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.c b/drivers/staging/fsl_dpa_offload/dpa_stats.c
new file mode 100644
index 0000000..cbd741c
--- /dev/null
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.c
@@ -0,0 +1,250 @@
+/* Copyright 2008-2012 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * DPA Classifier Application Programming Interface implementation
+ */
+
+#include <linux/of_platform.h>
+
+/* DPA offloading layer includes */
+#include "dpa_compat.h"
+#include "dpa_stats.h"
+
+#define STATS_VAL_SIZE 4
+
+/* Global dpa_stats component */
+struct dpa_stats *gbl_dpa_stats;
+
+/* check that the provided params are valid */
+static int check_dpa_stats_params(const struct dpa_stats_params *params)
+{
+	/* Check init parameters */
+	if (!params) {
+		pr_err("Invalid DPA Stats parameters handle\n");
+		return -EINVAL;
+	}
+
+	/* There must be at least one counter */
+	if (!params->max_counters) {
+		pr_err("Invalid DPA Stats number of counters\n");
+		return -EINVAL;
+	}
+
+	if (!params->storage_area) {
+		pr_err("Invalid DPA Stats storage area\n");
+		return -EINVAL;
+	}
+
+	if (params->storage_area_len < STATS_VAL_SIZE) {
+		pr_err("Invalid DPA Stats storage area length\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int put_cnt(struct dpa_stats *dpa_stats, struct dpa_stats_cnt_cb *cnt_cb)
+{
+	int err = 0;
+
+	/* Release the Counter id in the Counter IDs circular queue */
+	err = cq_put_4bytes(dpa_stats->cnt_id_cq, cnt_cb->cnt_id);
+	if (err < 0) {
+		pr_err("Could not release the counter id %d\n", cnt_cb->cnt_id);
+		return -EDOM;
+	}
+
+	/* Mark the Counter id as 'not used' */
+	dpa_stats->used_cnt_ids[cnt_cb->cnt_index] =
+						DPA_OFFLD_INVALID_OBJECT_ID;
+
+	/* Clear all 'cnt_cb' information */
+	cnt_cb->cnt_index = DPA_OFFLD_INVALID_OBJECT_ID;
+	cnt_cb->cnt_id = DPA_OFFLD_INVALID_OBJECT_ID;
+
+	return 0;
+}
+
+static int init_cnts_cb(struct dpa_stats *dpa_stats)
+{
+	struct dpa_stats_params config = dpa_stats->config;
+	int i;
+
+	/* Create circular queue that holds free counter IDs */
+	dpa_stats->cnt_id_cq = cq_new(config.max_counters, sizeof(int));
+	if (!dpa_stats->cnt_id_cq) {
+		pr_err("Could not create Counter IDs circular queue\n");
+		return -ENOMEM;
+	}
+
+	/* Fill the circular queue with ids */
+	for (i = 0; i < config.max_counters; i++) {
+		if (cq_put_4bytes(dpa_stats->cnt_id_cq, i) < 0) {
+			pr_err("Could not fill Counter IDs circular queue\n");
+			return -EDOM;
+		}
+	}
+
+	/* Allocate array to store counter ids that are 'in use' */
+	dpa_stats->used_cnt_ids = kmalloc(
+			config.max_counters * sizeof(uint32_t), GFP_KERNEL);
+	if (!dpa_stats->used_cnt_ids) {
+		pr_err("No more memory for used counter ids array\n");
+		return -ENOMEM;
+	}
+	memset(dpa_stats->used_cnt_ids, DPA_OFFLD_INVALID_OBJECT_ID,
+			config.max_counters * sizeof(uint32_t));
+
+	/* Allocate array to store counters control blocks */
+	dpa_stats->cnts_cb = kzalloc(config.max_counters *
+			sizeof(struct dpa_stats_cnt_cb), GFP_KERNEL);
+	if (!dpa_stats->cnts_cb) {
+		pr_err("No more memory for used counters control blocks\n");
+		return -ENOMEM;
+	}
+
+	for (i = 0; i < config.max_counters; i++)
+		dpa_stats->cnts_cb[i].dpa_stats = dpa_stats;
+
+	return 0;
+}
+
+static int free_cnts_cb(struct dpa_stats *dpa_stats)
+{
+	struct dpa_stats_cnt_cb *cnt_cb = NULL;
+	uint32_t id, i;
+	int err = 0;
+
+	for (i = 0; i < dpa_stats->config.max_counters; i++) {
+		id = dpa_stats->used_cnt_ids[i];
+
+		if (id != DPA_OFFLD_INVALID_OBJECT_ID) {
+			cnt_cb = &(dpa_stats->cnts_cb[id]);
+
+			/* Release the counter id in the Counter IDs cq */
+			err = put_cnt(dpa_stats, cnt_cb);
+			if (err < 0) {
+				pr_err("Failed to release a counter id\n");
+				return err;
+			}
+		}
+	}
+
+	/* Release counters IDs circular queue */
+	if (dpa_stats->cnt_id_cq) {
+		cq_delete(dpa_stats->cnt_id_cq);
+		dpa_stats->cnt_id_cq = NULL;
+	}
+
+	/* Release counters control blocks */
+	kfree(dpa_stats->cnts_cb);
+	dpa_stats->cnts_cb = NULL;
+
+	/* Release counters 'used ids' array */
+	kfree(dpa_stats->used_cnt_ids);
+	dpa_stats->used_cnt_ids = NULL;
+
+	return 0;
+}
+
+/* cleanup DPA Stats */
+static void free_resources(void)
+{
+	struct dpa_stats *dpa_stats;
+
+	/* Sanity check */
+	if (!gbl_dpa_stats) {
+		pr_err("DPA stats instance is not initialized\n");
+		return;
+	}
+	dpa_stats = gbl_dpa_stats;
+
+	/* free counters control blocks related stuff */
+	free_cnts_cb(dpa_stats);
+
+	kfree(dpa_stats);
+	gbl_dpa_stats = NULL;
+}
+
+int dpa_stats_init(const struct dpa_stats_params *params, int *dpa_stats_id)
+{
+	struct dpa_stats *dpa_stats = NULL;
+	int err = 0;
+
+	/* Multiple DPA Stats instances are not currently supported */
+	unused(dpa_stats_id);
+
+	/* Sanity checks */
+	if (gbl_dpa_stats) {
+		pr_err("dpa_stats component already initialized.\n");
+		pr_err("Multiple DPA Stats Instances aren not supported.\n");
+		return -EPERM;
+	}
+
+	/* Check user-provided parameters */
+	err = check_dpa_stats_params(params);
+	if (err < 0)
+		return err;
+
+	/* Control block allocation */
+	dpa_stats = (struct dpa_stats *)xx_zalloc(sizeof(struct dpa_stats));
+	if (!dpa_stats) {
+		pr_err("Could not allocate memory for control block.\n");
+		return -ENOMEM;
+	}
+
+	/* Store parameters */
+	dpa_stats->config = *params;
+
+	/* Allocate and initialize counters control block  */
+	err = init_cnts_cb(dpa_stats);
+	if (err < 0) {
+		free_resources();
+		return err;
+	}
+
+	gbl_dpa_stats = dpa_stats;
+
+	return 0;
+}
+EXPORT_SYMBOL(dpa_stats_init);
+
+int dpa_stats_free(int dpa_stats_id)
+{
+	/* multiple DPA Stats instances are not currently supported */
+	unused(dpa_stats_id);
+
+	free_resources();
+
+	return 0;
+}
+EXPORT_SYMBOL(dpa_stats_free);
diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.h b/drivers/staging/fsl_dpa_offload/dpa_stats.h
new file mode 100644
index 0000000..10ee6b9
--- /dev/null
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.h
@@ -0,0 +1,62 @@
+
+/* Copyright 2008-2012 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * Internal DPA Classifier Application Programming Interface
+ */
+
+#ifndef __DPA_STATS_H
+#define __DPA_STATS_H
+
+/* DPA offloading layer includes */
+#include "linux/fsl_dpa_stats.h"
+#include "dpa_compat.h"
+#include "cq.h"
+
+/* DPA Stats - Control Block */
+struct dpa_stats {
+	struct dpa_stats_params config;	/* Configuration parameters as
+					provided in dap_stats_init */
+	struct cq *cnt_id_cq;	/* Circular Queue with ids for stats counters */
+	uint32_t *used_cnt_ids;	/* Counter ids used by this dpa_stats instance*/
+	struct dpa_stats_cnt_cb *cnts_cb; /* Array of counters control blocks */
+};
+
+/* DPA Stats counter control block */
+struct dpa_stats_cnt_cb {
+	struct dpa_stats *dpa_stats; /* Pointer to DPA Stats */
+	uint32_t cnt_id;  /* Counter identifier */
+	uint32_t cnt_index; /* Counter index in the 'used_cnt_ids'*/
+	uint32_t bytes_num; /* Number of bytes occupied by this counter */
+};
+
+#endif /* __DPA_STATS_H */
diff --git a/include/linux/fsl_dpa_offload.h b/include/linux/fsl_dpa_offload.h
index dde5499..86a0d2c 100644
--- a/include/linux/fsl_dpa_offload.h
+++ b/include/linux/fsl_dpa_offload.h
@@ -53,7 +53,7 @@
 #define DPA_OFFLD_MAXENTRYKEYSIZE				56
 
 #define DPA_OFFLD_DESC_NONE					-1
-
+#define DPA_OFFLD_INVALID_OBJECT_ID				-1
 
 /* Description of lookup key */
 struct dpa_offload_lookup_key {
diff --git a/include/linux/fsl_dpa_stats.h b/include/linux/fsl_dpa_stats.h
new file mode 100644
index 0000000..d2382e3a
--- /dev/null
+++ b/include/linux/fsl_dpa_stats.h
@@ -0,0 +1,73 @@
+/* Copyright 2008-2012 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * DPA Statistics Application Programming Interface.
+ */
+
+#ifndef __FSL_DPA_STATS_H
+#define __FSL_DPA_STATS_H
+
+/* DPA offloading layer includes */
+#include "fsl_dpa_compat.h"
+#include "fsl_dpa_offload.h"
+
+/* Other includes */
+#include <linux/types.h>
+
+/* DPA Stats instance parameters */
+struct dpa_stats_params {
+
+	/* Maximum number of counters managed by DPA Stats instance */
+	unsigned int max_counters;
+
+	/* Pointer to the memory area where the values of the counters
+	 * will be written by the DPA Stats instance */
+	void *storage_area;
+
+	/* Length in bytes of the storage memory area */
+	unsigned int storage_area_len;
+};
+
+/* Creates and initializes a DPA Stats instance */
+int dpa_stats_init(const struct dpa_stats_params *params, int *dpa_stats_id);
+
+/*
+ * Releases all resources associated with a DPA Stats instance
+ * and destroys it.
+ */
+int dpa_stats_free(int dpa_stats_id);
+
+int dpa_stats_create_sampling_group(void);
+
+int dpa_stats_remove_sampling_group(void);
+
+#endif	/* __FSL_DPA_STATS_H */
-- 
1.7.5.4

