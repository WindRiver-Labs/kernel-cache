From 123185ebb9f8274eeae0ff8f9f70bc34e60a63b6 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Tue, 12 Feb 2013 11:30:45 +0200
Subject: [PATCH 051/518] dpaa_eth: Optionally disable ndo_select_queue in
 favor of XPS

The existence of a ndo_select_queue() callback overrides the XPS
selection logic on the egress path. Provide a Kconfig choice of
disabling this callback, to allow the standard XPS selection logic and
user-controlled FQ-to-CPU mapping.

In addition, if XPS is chosen, use the queue from
skb->queue_mapping for transmission.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/net/ethernet/freescale/Kconfig           |   10 ++++++++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c    |    9 +++++++--
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h    |   10 ++++++++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c |    2 +-
 4 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/freescale/Kconfig b/drivers/net/ethernet/freescale/Kconfig
index f821951..a3962e5 100644
--- a/drivers/net/ethernet/freescale/Kconfig
+++ b/drivers/net/ethernet/freescale/Kconfig
@@ -189,6 +189,16 @@ choice DPA_ETH_WQ_ASSIGN
 		  Rx Error and Tx Error FQs go to WQ2.
 endchoice
 
+config DPAA_ETH_USE_NDO_SELECT_QUEUE
+	bool "Use driver's Tx queue selection mechanism"
+	default y
+	---help---
+	  The DPAA-Ethernet driver defines a ndo_select_queue() callback for optimal selection
+	  of the egress FQ. That will override the XPS support for this netdevice.
+	  If for whatever reason you want to be in control of the egress FQ-to-CPU selection and mapping,
+	  or simply don't want to use the driver's ndo_select_queue() callback, then unselect this
+	  and use the standard XPS support instead.
+
 config DPAA_ETH_UNIT_TESTS
 	bool "Run Unit Tests for DPAA Ethernet"
 	depends on DPA
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index b8af061..fdc3d6a 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1844,8 +1844,7 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
 
 	clear_fd(&fd);
-	/* Use the Tx queue of the current cpu */
-	queue_mapping = smp_processor_id();
+	queue_mapping = dpa_get_queue_mapping(skb);
 
 	if (unlikely(skb_headroom(skb) < DPA_BP_HEAD)) {
 		struct sk_buff *skb_new;
@@ -3139,10 +3138,12 @@ static const struct file_operations dpa_debugfs_fops = {
 };
 #endif
 
+#ifdef CONFIG_DPAA_ETH_USE_NDO_SELECT_QUEUE
 static u16 dpa_select_queue(struct net_device *net_dev, struct sk_buff *skb)
 {
 	return smp_processor_id();
 }
+#endif
 
 static const struct net_device_ops dpa_private_ops = {
 	.ndo_open = dpa_start,
@@ -3152,7 +3153,9 @@ static const struct net_device_ops dpa_private_ops = {
 	.ndo_get_stats = dpa_get_stats,
 	.ndo_set_mac_address = dpa_set_mac_address,
 	.ndo_validate_addr = eth_validate_addr,
+#ifdef CONFIG_DPAA_ETH_USE_NDO_SELECT_QUEUE
 	.ndo_select_queue = dpa_select_queue,
+#endif
 	.ndo_change_mtu = dpa_change_mtu,
 	.ndo_set_rx_mode = dpa_set_rx_mode,
 	.ndo_init = dpa_ndo_init,
@@ -3169,7 +3172,9 @@ static const struct net_device_ops dpa_shared_ops = {
 	.ndo_get_stats = dpa_get_stats,
 	.ndo_set_mac_address = dpa_set_mac_address,
 	.ndo_validate_addr = eth_validate_addr,
+#ifdef CONFIG_DPAA_ETH_USE_NDO_SELECT_QUEUE
 	.ndo_select_queue = dpa_select_queue,
+#endif
 	.ndo_set_rx_mode = dpa_set_rx_mode,
 #ifdef CONFIG_FSL_DPA_1588
 	.ndo_do_ioctl = dpa_ioctl,
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index da91e24..9a83a7b 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -567,4 +567,14 @@ static inline void _dpa_assign_wq(struct dpa_fq *fq)
 #endif /* CONFIG_DPA_ETH_WQ_ASSIGN_* */
 
 
+#ifdef CONFIG_DPAA_ETH_USE_NDO_SELECT_QUEUE
+/* Use in lieu of skb_get_queue_mapping() */
+#define dpa_get_queue_mapping(skb) \
+	smp_processor_id()
+#else
+/* Use the queue selected by XPS */
+#define dpa_get_queue_mapping(skb) \
+	skb_get_queue_mapping(skb)
+#endif
+
 #endif	/* __DPA_H */
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 7aecb1c..0cdf638 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -708,7 +708,7 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 	clear_fd(&fd);
 
-	queue_mapping = smp_processor_id();
+	queue_mapping = dpa_get_queue_mapping(skb);
 
 
 #ifdef CONFIG_FSL_DPA_1588
-- 
1.7.5.4

