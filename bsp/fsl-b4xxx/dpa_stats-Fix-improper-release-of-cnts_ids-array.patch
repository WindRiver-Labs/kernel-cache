From 46695095d601552c3cd68798f76fcc072971fa27 Mon Sep 17 00:00:00 2001
From: Anca-Jeanina Floarea <anca.floarea@freescale.com>
Date: Mon, 17 Sep 2012 18:50:18 +0000
Subject: [PATCH 325/518] dpa_stats: Fix improper release of cnts_ids array

The DPA Stats driver was using the cnts_ids array
after the dpa_stats_get_counters function returned
to the user-application, causing an issue when the
memory area was released by user-application. Fixed
this issue by copying the array of counter identifiers
in a memory area allocated in the DPA Stats driver.

Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_stats.c     |   25 ++++++++++++++++++++--
 drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c |    6 ++--
 2 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.c b/drivers/staging/fsl_dpa_offload/dpa_stats.c
index ba8dbb0..3f75a59 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.c
@@ -245,8 +245,6 @@ static int put_req(struct dpa_stats *dpa_stats, struct dpa_stats_req_cb *req_cb)
 	dpa_stats->used_req_ids[req_cb->req_index] =
 						DPA_OFFLD_INVALID_OBJECT_ID;
 
-	memset(req_cb, 0, sizeof(struct dpa_stats_req_cb));
-
 	/* Clear all 'req_cb' information by setting them to a maximum value */
 	req_cb->req_index = DPA_OFFLD_INVALID_OBJECT_ID;
 	req_cb->req_id = DPA_STATS_MAX_NUM_OF_REQUESTS;
@@ -386,6 +384,17 @@ static int init_reqs_cb(struct dpa_stats *dpa_stats)
 		return -ENOMEM;
 	}
 
+	/* Allocate array to store the counter ids */
+	for (i = 0; i < DPA_STATS_MAX_NUM_OF_REQUESTS; i++) {
+		dpa_stats->reqs_cb[i].config.cnts_ids =
+				kzalloc(DPA_STATS_MAX_NUM_OF_COUNTERS *
+						sizeof(int), GFP_KERNEL);
+		if (!dpa_stats->reqs_cb[i].config.cnts_ids) {
+			pr_err("No more memory for array of counter ids\n");
+			return -ENOMEM;
+		}
+	}
+
 	return 0;
 }
 
@@ -409,6 +418,10 @@ static int free_reqs_cb(struct dpa_stats *dpa_stats)
 				pr_err("Failed to release a request id\n");
 				return err;
 			}
+
+			/* Release the array of counter ids */
+			kfree(req_cb->config.cnts_ids);
+			req_cb->config.cnts_ids = NULL;
 		}
 	}
 
@@ -2907,7 +2920,13 @@ int dpa_stats_get_counters(struct dpa_stats_cnt_request_params params,
 		return err;
 	}
 
-	req_cb->config = params;
+	/* Store user-provided request parameters */
+	memcpy(req_cb->config.cnts_ids,
+			params.cnts_ids, params.cnts_ids_len * sizeof(int));
+
+	req_cb->config.reset_cnts = params.reset_cnts;
+	req_cb->config.storage_area_offset = params.storage_area_offset;
+	req_cb->config.cnts_ids_len = params.cnts_ids_len;
 	req_cb->request_done = request_done;
 
 	/* Set memory area where the request should write */
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
index e1444e7..7fb42e7 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
@@ -671,6 +671,9 @@ static int do_ioctl_stats_get_counters(void *args)
 		return -EINVAL;
 	}
 
+	/* Request was sent, release the array of counter ids */
+	kfree(req_cnts);
+
 	/* If request is synchronous copy counters values to user space */
 	if (!prm.request_done) {
 		if (copy_to_user((wrp_dpa_stats.us_mem +
@@ -679,13 +682,10 @@ static int do_ioctl_stats_get_counters(void *args)
 				prm.req_params.storage_area_offset),
 				prm.cnts_len)) {
 			pr_err("Couldn't copy counters values to storage area\n");
-			kfree(req_cnts);
 			return -EINVAL;
 		}
 	}
 
-	kfree(req_cnts);
-
 	return ret;
 }
 
-- 
1.7.5.4

