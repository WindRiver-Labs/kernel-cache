From efa726e35e2a87ddb8eedfba31358a4796adfb77 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Fri, 18 Jan 2013 21:58:35 +0000
Subject: [PATCH 008/518] fmd: Cleanup coding style of fsl_fman.h

Make the header that contains the FMD wrapper API more linux-like
in regards to coding style (replace spaces with tabs, wrap lines
at 80 chars).

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../dpa/NetCommSw/src/inc/wrapper/fsl_fman.h       |  208 +++++++++++---------
 1 files changed, 110 insertions(+), 98 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h
index 9a89e8c..6afde38 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/inc/wrapper/fsl_fman.h
@@ -31,9 +31,9 @@
  */
 
 /******************************************************************************
- @File          fsl_fman.h
+ @File		fsl_fman.h
 
- @Description   Linux internal kernel API
+ @Description	Linux internal kernel API
 *//***************************************************************************/
 
 #ifndef __FSL_FMAN_H
@@ -46,19 +46,19 @@
 #include "fm_port_ext.h"
 
 /**************************************************************************//**
- @Group         FM_LnxKern_grp Frame Manager Linux wrapper API
+ @Group		FM_LnxKern_grp Frame Manager Linux wrapper API
 
- @Description   FM API functions, definitions and enums.
+ @Description	FM API functions, definitions and enums.
 
  @{
 *//***************************************************************************/
 
 /**************************************************************************//**
- @Group         FM_LnxKern_ctrl_grp Control Unit
+ @Group		FM_LnxKern_ctrl_grp Control Unit
 
- @Description   Control Unit
+ @Description	Control Unit
 
-                Internal Kernel Control Unit API
+		Internal Kernel Control Unit API
  @{
 *//***************************************************************************/
 
@@ -67,217 +67,229 @@
 /*****************************************************************************/
 
 /**************************************************************************//**
- @Description   A structure ..,
+ @Description	A structure ..,
 *//***************************************************************************/
 struct fm;
 
 /**************************************************************************//**
- @Description   A structure ..,
+ @Description	A structure ..,
 *//***************************************************************************/
 struct fm_port;
 
-typedef int (*alloc_pcd_fqids)(struct device    *dev,
-                               uint32_t         num,
-                               uint8_t          alignment,
-                               uint32_t         *base_fqid);
+typedef int (*alloc_pcd_fqids)(struct device *dev, uint32_t num,
+			       uint8_t alignment, uint32_t *base_fqid);
 
-typedef int (*free_pcd_fqids)(struct device    *dev,
-                               uint32_t         base_fqid);
+typedef int (*free_pcd_fqids)(struct device *dev, uint32_t base_fqid);
 
 struct fm_port_pcd_param {
-    alloc_pcd_fqids         cba;
-    free_pcd_fqids          cbf;
-    struct device           *dev;
+	alloc_pcd_fqids	 cba;
+	free_pcd_fqids	 cbf;
+	struct device	*dev;
 };
 
 /**************************************************************************//**
- @Description   A structure of information about each of the external
-                buffer pools used by the port,
+ @Description	A structure of information about each of the external
+		buffer pools used by the port,
 *//***************************************************************************/
 struct fm_port_pool_param {
-    uint8_t                 id;                 /**< External buffer pool id */
-    uint16_t                size;               /**< External buffer pool buffer size */
+	uint8_t		id;		/**< External buffer pool id */
+	uint16_t	size;		/**< External buffer pool buffer size */
 };
 
 /**************************************************************************//**
  @Description   structure for additional port parameters
 *//***************************************************************************/
 struct fm_port_params {
-    uint32_t                    errq;               /**< Error Queue Id. */
-    uint32_t                    defq;               /**< For Tx and HC - Default Confirmation queue,
-                                                         0 means no Tx confirmation for processed frames.
-                                                         For Rx and OP - default Rx queue. */
-    uint8_t                     num_pools;          /**< Number of pools use by this port */
-    struct fm_port_pool_param   pool_param[FM_PORT_MAX_NUM_OF_EXT_POOLS];
-                                                    /**< Parameters for each pool */
-    uint16_t                    priv_data_size;     /**< Area that user may save for his own need (E.g. save the SKB) */
-    bool                        parse_results;      /**< Whether to have the parser-results in the Rx/Tx buffer */
-    bool                        hash_results;       /**< Whether to have the hash-results in the Rx/Tx buffer */
-    bool                        time_stamp;         /**< Whether to have the time-stamp in the Rx/Tx buffer */
-    bool                        frag_enable;        /**< Whether to enable fragmentation support, for OP only */
+	uint32_t errq;	    /**< Error Queue Id. */
+	uint32_t defq;	    /**< For Tx and HC - Default Confirmation queue,
+				 0 means no Tx conf for processed frames.
+				 For Rx and OP - default Rx queue. */
+	uint8_t	num_pools;  /**< Number of pools use by this port */
+	struct fm_port_pool_param pool_param[FM_PORT_MAX_NUM_OF_EXT_POOLS];
+			    /**< Parameters for each pool */
+	uint16_t priv_data_size;  /**< Area that user may save for his own
+				       need (E.g. save the SKB) */
+	bool parse_results; /**< Put the parser-results in the Rx/Tx buffer */
+	bool hash_results;  /**< Put the hash-results in the Rx/Tx buffer */
+	bool time_stamp;    /**< Put the time-stamp in the Rx/Tx buffer */
+	bool frag_enable;   /**< Fragmentation support, for OP only */
 };
 
 /**************************************************************************//**
- @Function      fm_bind
+ @Function	fm_bind
 
- @Description   Bind to a specific FM device.
+ @Description	Bind to a specific FM device.
 
- @Param[in]     fm_dev  - the OF handle of the FM device.
+ @Param[in]	fm_dev	- the OF handle of the FM device.
 
- @Return        A handle of the FM device.
+ @Return	A handle of the FM device.
 
- @Cautions      Allowed only after the port was created.
+ @Cautions	Allowed only after the port was created.
 *//***************************************************************************/
-struct fm * fm_bind (struct device *fm_dev);
+struct fm *fm_bind(struct device *fm_dev);
 
 /**************************************************************************//**
- @Function      fm_unbind
+ @Function	fm_unbind
 
- @Description   Un-bind from a specific FM device.
+ @Description	Un-bind from a specific FM device.
 
- @Param[in]     fm      - A handle of the FM device.
+ @Param[in]	fm	- A handle of the FM device.
 
- @Cautions      Allowed only after the port was created.
+ @Cautions	Allowed only after the port was created.
 *//***************************************************************************/
 void fm_unbind(struct fm *fm);
 
-void * fm_get_handle(struct fm *fm);
-void * fm_get_rtc_handle(struct fm *fm);
-struct resource * fm_get_mem_region(struct fm *fm);
+void *fm_get_handle(struct fm *fm);
+void *fm_get_rtc_handle(struct fm *fm);
+struct resource *fm_get_mem_region(struct fm *fm);
 
 /**************************************************************************//**
- @Function      fm_port_bind
+ @Function	fm_port_bind
 
- @Description   Bind to a specific FM-port device (may be Rx or Tx port).
+ @Description	Bind to a specific FM-port device (may be Rx or Tx port).
 
- @Param[in]     fm_port_dev - the OF handle of the FM port device.
+ @Param[in]	fm_port_dev - the OF handle of the FM port device.
 
- @Return        A handle of the FM port device.
+ @Return	A handle of the FM port device.
 
- @Cautions      Allowed only after the port was created.
+ @Cautions	Allowed only after the port was created.
 *//***************************************************************************/
-struct fm_port * fm_port_bind (struct device *fm_port_dev);
+struct fm_port *fm_port_bind(struct device *fm_port_dev);
 
 /**************************************************************************//**
- @Function      fm_port_unbind
+ @Function	fm_port_unbind
 
- @Description   Un-bind from a specific FM-port device (may be Rx or Tx port).
+ @Description	Un-bind from a specific FM-port device (may be Rx or Tx port).
 
- @Param[in]     port        - A handle of the FM port device.
+ @Param[in]	port	- A handle of the FM port device.
 
- @Cautions      Allowed only after the port was created.
+ @Cautions	Allowed only after the port was created.
 *//***************************************************************************/
 void fm_port_unbind(struct fm_port *port);
 
 /**************************************************************************//**
- @Function      fm_set_rx_port_params
+ @Function	fm_set_rx_port_params
 
- @Description   Configure parameters for a specific Rx FM-port device.
+ @Description	Configure parameters for a specific Rx FM-port device.
 
- @Param[in]     port        - A handle of the FM port device.
- @Param[in]     params      - Rx port parameters
+ @Param[in]	port	- A handle of the FM port device.
+ @Param[in]	params	- Rx port parameters
 
- @Cautions      Allowed only after the port is binded.
+ @Cautions	Allowed only after the port is binded.
 *//***************************************************************************/
-void fm_set_rx_port_params(struct fm_port *port, struct fm_port_params *params);
+void fm_set_rx_port_params(struct fm_port *port,
+			   struct fm_port_params *params);
 
 /**************************************************************************//**
- @Function      fm_port_pcd_bind
+ @Function	fm_port_pcd_bind
 
- @Description   Bind as a listener on a port PCD.
+ @Description	Bind as a listener on a port PCD.
 
- @Param[in]     port        - A handle of the FM port device.
- @Param[in]     params      - PCD port parameters
+ @Param[in]	port	- A handle of the FM port device.
+ @Param[in]	params	- PCD port parameters
 
- @Cautions      Allowed only after the port is binded.
+ @Cautions	Allowed only after the port is binded.
 *//***************************************************************************/
 void fm_port_pcd_bind (struct fm_port *port, struct fm_port_pcd_param *params);
 
 /**************************************************************************//**
- @Function      fm_get_tx_port_channel
+ @Function	fm_get_tx_port_channel
 
- @Description   Get qman-channel number for this Tx port.
+ @Description	Get qman-channel number for this Tx port.
 
- @Param[in]     port        - A handle of the FM port device.
+ @Param[in]	port	- A handle of the FM port device.
 
- @Return        qman-channel number for this Tx port.
+ @Return	qman-channel number for this Tx port.
 
- @Cautions      Allowed only after the port is binded.
+ @Cautions	Allowed only after the port is binded.
 *//***************************************************************************/
 int fm_get_tx_port_channel(struct fm_port *port);
 
 /**************************************************************************//**
- @Function      fm_set_tx_port_params
+ @Function	fm_set_tx_port_params
 
- @Description   Configure parameters for a specific Tx FM-port device
+ @Description	Configure parameters for a specific Tx FM-port device
 
- @Param[in]     port        - A handle of the FM port device.
- @Param[in]     params      - Tx port parameters
+ @Param[in]	port	- A handle of the FM port device.
+ @Param[in]	params	- Tx port parameters
 
- @Cautions      Allowed only after the port is binded.
+ @Cautions	Allowed only after the port is binded.
 *//***************************************************************************/
 void fm_set_tx_port_params(struct fm_port *port, struct fm_port_params *params);
 
+
 /**************************************************************************//**
- @Function      fm_mac_set_handle
+ @Function	fm_mac_set_handle
 
- @Description   Set mac handle
+ @Description	Set mac handle
 
- @Param[in]     h_lnx_wrp_fm_dev - A handle of the LnxWrp FM device.
- @Param[in]     h_fm_mac         - A handle of the LnxWrp FM MAC device.
- @Param[in]     mac_id            - MAC id.
+ @Param[in]	h_lnx_wrp_fm_dev - A handle of the LnxWrp FM device.
+ @Param[in]	h_fm_mac	 - A handle of the LnxWrp FM MAC device.
+ @Param[in]	mac_id		 - MAC id.
 *//***************************************************************************/
-void fm_mac_set_handle(t_Handle h_lnx_wrp_fm_dev, t_Handle h_fm_mac, int mac_id);
+void fm_mac_set_handle(t_Handle h_lnx_wrp_fm_dev, t_Handle h_fm_mac,
+		       int mac_id);
 
 /**************************************************************************//**
- @Function      fm_port_enable
+ @Function	fm_port_enable
 
- @Description   Enable specific FM-port device (may be Rx or Tx port).
+ @Description	Enable specific FM-port device (may be Rx or Tx port).
 
- @Param[in]     port        - A handle of the FM port device.
+ @Param[in]	port	- A handle of the FM port device.
 
- @Cautions      Allowed only the port is initialized.
+ @Cautions	Allowed only after the port is initialized.
 *//***************************************************************************/
-int fm_port_enable (struct fm_port *port);
+int fm_port_enable(struct fm_port *port);
 
 /**************************************************************************//**
- @Function      fm_port_disable
+ @Function	fm_port_disable
 
- @Description   Disable specific FM-port device (may be Rx or Tx port).
+ @Description	Disable specific FM-port device (may be Rx or Tx port).
 
- @Param[in]     port        - A handle of the FM port device.
+ @Param[in]	port	- A handle of the FM port device.
 
- @Cautions      Allowed only the port is initialized.
+ @Cautions	Allowed only after the port is initialized.
 *//***************************************************************************/
 void fm_port_disable(struct fm_port *port);
 
-void * fm_port_get_handle(struct fm_port *port);
+void *fm_port_get_handle(struct fm_port *port);
 
 /**************************************************************************//**
- @Description   Get base address of this port. Useful for accessing
-                port-specific registers (i.e., not common ones).
+ @Function	fm_port_get_base_address
+
+ @Description	Get base address of this port. Useful for accessing
+		port-specific registers (i.e., not common ones).
 
- @Param[in]     port        - A handle of the FM port device.
- @Param[out]    base_addr   - The port's base addr (virtual address).
+ @Param[in]	port		- A handle of the FM port device.
+
+ @Param[out]	base_addr	- The port's base addr (virtual address).
 *//***************************************************************************/
 void fm_port_get_base_addr(const struct fm_port *port, uint64_t *base_addr);
 
 /**************************************************************************//**
+ @Function	fm_mutex_lock
+
  @Description   Lock function required before any FMD/LLD call.
 *//***************************************************************************/
 void fm_mutex_lock(void);
 
 /**************************************************************************//**
+ @Function	fm_mutex_unlock
+
  @Description   Unlock function required after any FMD/LLD call.
 *//***************************************************************************/
 void fm_mutex_unlock(void);
 
 /**************************************************************************//**
+ @Function	fm_get_max_frm
+
  @Description   Get the maximum frame size
 *//***************************************************************************/
 int fm_get_max_frm(void);
 
 /**************************************************************************//**
+ @Function	fm_get_rx_extra_headroom
+
  @Description   Get the extra headroom size
 *//***************************************************************************/
 int fm_get_rx_extra_headroom(void);
-- 
1.7.5.4

