From 64dc7edbc0f6f1e4aca0e87ac7800b78eecdd48b Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Tue, 11 Sep 2012 20:01:41 +0000
Subject: [PATCH 296/518] dpa_classifier: Bug fix. "Update HM" w/ only IP
 Fragmentation not working

The indexes of HM nodes were messed up when creating a header update
HM with only IP fragmentation (i.e. no update and no replace). This
patch fixes this problem and update HMs w/ only IP fragmentation
are now functional.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   45 +++++++++++++--------
 1 files changed, 28 insertions(+), 17 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index e91650d..7fcc9c8 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -2463,7 +2463,7 @@ static int update_hm_check_params(const struct dpa_cls_hm_update_params
 
 	if ((update_params->op_flags == DPA_CLS_HM_UPDATE_NONE) &&
 		(update_params->ip_frag_params.mtu == 0)) {
-		pr_err("ERROR: %s, %s (%d): Refusing to create an empty update "
+		pr_err("ERROR: %s, %s (%d): Cannot create an empty update "
 			"HM.\n", __FILE__, __func__, __LINE__);
 		return -EINVAL;
 	}
@@ -3715,6 +3715,10 @@ static int init_update_hm(struct dpa_cls_hm *pupdate_hm)
 				pnext_hm->hm_chain);
 	}
 
+	/*
+	 * If no compatible HM node was found for the header update
+	 * operations...
+	 */
 	if (!hm_node) {
 		/* Create a header manip node for this update: */
 		hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
@@ -3727,7 +3731,11 @@ static int init_update_hm(struct dpa_cls_hm *pupdate_hm)
 		return -ENOMEM;
 	}
 
-	hm_node->params.type = e_FM_PCD_MANIP_HDR;
+	pupdate_hm->num_nodes = 0;
+	if (size) {
+		hm_node->params.type = -1;
+		INIT_LIST_HEAD(&hm_node->list_node);
+	}
 
 	update_ops = DPA_CLS_HM_UPDATE_IPv4_UPDATE |
 			DPA_CLS_HM_UPDATE_IPv6_UPDATE |
@@ -3738,7 +3746,8 @@ static int init_update_hm(struct dpa_cls_hm *pupdate_hm)
 
 	if (pupdate_hm->update_params.op_flags & update_ops) {
 
-		hm_node->params.u.hdr.fieldUpdate = TRUE;
+		hm_node->params.type			= e_FM_PCD_MANIP_HDR;
+		hm_node->params.u.hdr.fieldUpdate	= TRUE;
 
 		if (pupdate_hm->update_params.op_flags &
 				DPA_CLS_HM_UPDATE_IPv4_UPDATE) {
@@ -3879,7 +3888,8 @@ static int init_update_hm(struct dpa_cls_hm *pupdate_hm)
 
 	if (pupdate_hm->update_params.op_flags & replace_ops) {
 
-		hm_node->params.u.hdr.custom = TRUE;
+		hm_node->params.type		= e_FM_PCD_MANIP_HDR;
+		hm_node->params.u.hdr.custom	= TRUE;
 		hm_node->params.u.hdr.customParams.type =
 				e_FM_PCD_MANIP_HDR_CUSTOM_IP_REPLACE;
 
@@ -3913,20 +3923,24 @@ static int init_update_hm(struct dpa_cls_hm *pupdate_hm)
 		}
 	}
 
-	pupdate_hm->hm_node[0]	= hm_node;
-	pupdate_hm->num_nodes	= 1;
-
-	if (size)
-		INIT_LIST_HEAD(&pupdate_hm->hm_node[0]->list_node);
+	if (hm_node->params.type != -1) {
+		pupdate_hm->hm_node[pupdate_hm->num_nodes++] = hm_node;
+		hm_node = NULL;
+	}
 
 	if (pupdate_hm->update_params.ip_frag_params.mtu) {
 		/* IP fragmentation option is enabled */
 		/* Create a header manip node: */
-		hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
 		if (!hm_node) {
-			pr_err("ERROR: %s, %s (%d): No more memory for header "
-				"manip nodes.\n", __FILE__, __func__, __LINE__);
-			return -ENOMEM;
+			hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
+			if (!hm_node) {
+				pr_err("ERROR: %s, %s (%d): No more memory for "
+					"header manip nodes.\n", __FILE__,
+					__func__, __LINE__);
+				return -ENOMEM;
+			}
+
+			INIT_LIST_HEAD(&hm_node->list_node);
 		}
 
 		hm_node->params.type = e_FM_PCD_MANIP_FRAG;
@@ -3951,10 +3965,7 @@ static int init_update_hm(struct dpa_cls_hm *pupdate_hm)
 			break;
 		}
 
-		INIT_LIST_HEAD(&hm_node->list_node);
-
-		pupdate_hm->hm_node[1]	= hm_node;
-		pupdate_hm->num_nodes	= 2;
+		pupdate_hm->hm_node[pupdate_hm->num_nodes++] = hm_node;
 	}
 
 	add_local_hm_nodes_to_chain(pupdate_hm);
-- 
1.7.5.4

