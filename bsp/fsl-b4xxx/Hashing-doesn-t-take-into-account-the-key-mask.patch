From 756fa3478555cd4f12496822ba579337aa4990fc Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Fri, 9 Mar 2012 21:25:34 +0000
Subject: [PATCH 108/518] Hashing doesn't take into account the key mask

Before calculating the HASH when looking into the shadow tables to find
some entry, the key mask is now applied on the key data. This way the
function hashes only the part of the key which is actually used.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   23 +++++++++++++++++++--
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |    8 +++++++
 2 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 9dc07fe..e742f36 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -1638,6 +1638,7 @@ static struct list_head *find_shadow_entry(const struct dpa_cls_table
 	struct list_head *pos, *bucket_list;
 	unsigned int i;
 	struct dpa_cls_tbl_shadow_table *shadow_table;
+	uint8_t masked_key[DPA_CLS_TBL_MAXENTRYKEYSIZE];
 
 	xx_assert(cls_table);
 	xx_assert(key);
@@ -1656,7 +1657,8 @@ static struct list_head *find_shadow_entry(const struct dpa_cls_table
 			key_size =
 				cls_table->params.exact_match_params.key_size;
 
-		shadow_table_index = crc8(key->byte, key_size);
+		key_apply_mask(key, masked_key, key_size);
+		shadow_table_index = crc8(masked_key, key_size);
 
 		bucket_list =
 			&shadow_table->shadow_entry[shadow_table_index];
@@ -1927,7 +1929,9 @@ static int table_insert_entry_exact_match(struct dpa_cls_table	*cls_table,
 			&shadow_entry->list_node;
 
 		/* Add entry to the proper shadow table. */
-		shadow_table_index = crc8(key->byte,
+		key_apply_mask(key, key_data,
+			cls_table->params.exact_match_params.key_size);
+		shadow_table_index = crc8(key_data,
 				cls_table->params.exact_match_params.key_size);
 		shadow_table = cls_table->shadow_table;
 		list_add_tail(&shadow_entry->list_node,
@@ -2054,7 +2058,9 @@ static int table_insert_entry_hash(struct dpa_cls_table		*cls_table,
 			&shadow_entry->list_node;
 
 		/* Add entry to the proper shadow table. */
-		shadow_table_index = crc8(key->byte,
+		key_apply_mask(key, key_data,
+			cls_table->params.exact_match_params.key_size);
+		shadow_table_index = crc8(key_data,
 				cls_table->params.hash_params.key_size);
 		shadow_table = cls_table->shadow_table;
 		list_add_tail(&shadow_entry->list_node,
@@ -2225,3 +2231,14 @@ static inline void put_table_descriptor(int td)
 			table[td] = NULL;
 	}
 }
+
+static inline void key_apply_mask(const struct dpa_cls_tbl_key	*key,
+				uint8_t				*new_key,
+				unsigned int			key_size)
+{
+	int i;
+
+	memset(new_key, 0, key_size);
+	for (i = 0; i < key_size; i++)
+		new_key[i] = key->byte[i] & key->mask[i];
+}
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index d202b88..9e87861 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -293,5 +293,13 @@ static int	get_new_table_descriptor(int *td);
  */
 static inline void put_table_descriptor(int td);
 
+/*
+ * Applies the key mask on the key and provides the updated key
+ * in a new buffer.
+ */
+static inline void key_apply_mask(const struct dpa_cls_tbl_key	*key,
+				uint8_t				*new_key,
+				unsigned int			key_size);
+
 
 #endif /* __DPA_CLASSIFIER_H */
-- 
1.7.5.4

