From ea424d922f5e8930e8c7073a8aebd8d3a4f91338 Mon Sep 17 00:00:00 2001
From: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
Date: Tue, 5 Nov 2013 10:43:03 +0200
Subject: [PATCH 129/130] dpa_offload: Fix creation of IPSec class counter

A DPA Stats class counter of type IPSec couldn't be properly
created due to wrong allocation of memory necessary to store the
class members and use of uninitialized value of cnt_cb->members_num.

Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
Change-Id: Ib26c107ca00eed4638c7ad92e75d182633a2e21d
Reviewed-on: http://git.am.freescale.net:8181/6273
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Marian-Cornel Chereji <marian.chereji@freescale.com>
Reviewed-by: Thomas Trefny <Tom.Trefny@freescale.com>
[This is a patch delivered from Freescale against fsl-sdk-v1.4.5,
 rebase on current context.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_stats.c     |   12 ++++--------
 drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c |    4 ++--
 2 files changed, 6 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.c b/drivers/staging/fsl_dpa_offload/dpa_stats.c
index 234c607..5b533e5 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.c
@@ -2581,7 +2581,7 @@ static int set_cls_cnt_ipsec_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	}
 
 	/* Allocate memory for array of security association ids */
-	cnt_cb->ipsec_cb.sa_id = kcalloc(cnt_cb->members_num,
+	cnt_cb->ipsec_cb.sa_id = kcalloc(prm->class_members,
 				  sizeof(*cnt_cb->ipsec_cb.sa_id), GFP_KERNEL);
 	if (!cnt_cb->ipsec_cb.sa_id) {
 		log_err("Cannot allocate memory for array of security association ids, for counter id %d\n",
@@ -2590,7 +2590,7 @@ static int set_cls_cnt_ipsec_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	}
 
 	/* Allocate memory for array that stores if SA id is valid */
-	cnt_cb->ipsec_cb.valid = kcalloc(cnt_cb->members_num,
+	cnt_cb->ipsec_cb.valid = kcalloc(prm->class_members,
 				  sizeof(*cnt_cb->ipsec_cb.valid), GFP_KERNEL);
 	if (!cnt_cb->ipsec_cb.valid) {
 		log_err("Cannot allocate memory for array that stores if security association ids are valid for counter id %d\n",
@@ -2598,17 +2598,13 @@ static int set_cls_cnt_ipsec_cb(struct dpa_stats_cnt_cb *cnt_cb,
 		return -ENOMEM;
 	}
 
+	cnt_cb->members_num = prm->class_members;
+
 	/* Map IPSec counter selection to statistics */
 	err = cnt_gen_sel_to_stats(cnt_cb, prm->ipsec_params.cnt_sel);
 	if (err < 0)
 		return err;
 
-	cnt_cb->members_num = prm->class_members;
-
-	/* Set number of bytes that will be written by this counter */
-	cnt_cb->bytes_num = cnt_cb->members_num *
-			STATS_VAL_SIZE * cnt_cb->info.stats_num;
-
 	for (i = 0; i < prm->class_members; i++) {
 		if (prm->ipsec_params.sa_id[i] != DPA_OFFLD_INVALID_OBJECT_ID) {
 			cnt_ipsec_cb->sa_id[i] = prm->ipsec_params.sa_id[i];
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
index 45fbe27..85ab1b5 100755
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
@@ -954,7 +954,7 @@ static int do_ioctl_stats_create_class_counter(void *args)
 		break;
 	case DPA_STATS_CNT_IPSEC:
 		/* Allocate memory to store the sa ids array */
-		sa_ids = kmalloc(prm.cnt_params.class_members, GFP_KERNEL);
+		sa_ids = kmalloc(cls_mbrs * sizeof(*sa_ids), GFP_KERNEL);
 		if (!sa_ids) {
 			log_err("Cannot allocate memory for SA ids array\n");
 			return -ENOMEM;
@@ -962,7 +962,7 @@ static int do_ioctl_stats_create_class_counter(void *args)
 
 		if (copy_from_user(sa_ids,
 				prm.cnt_params.ipsec_params.sa_id,
-				(prm.cnt_params.class_members * sizeof(int)))) {
+				(cls_mbrs * sizeof(*sa_ids)))) {
 			log_err("Cannot copy from user array of SA ids\n");
 			kfree(sa_ids);
 			return -EBUSY;
-- 
1.7.5.4

