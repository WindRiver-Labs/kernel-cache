From 6a05f9f55ac6058a9395fdf63324b408646c2139 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Thu, 7 Mar 2013 23:59:33 +0000
Subject: [PATCH 505/518] dpaa_eth: Add support for new buffer layout
 parameters

The new chosen node mechanism allows a user to configure some extra
per port parameters related to buffer layout. Add support in the
ethernet driver to account for these new parameters and the changes
in FMD wrapper API.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../net/ethernet/freescale/dpa/dpaa_eth-common.h   |    5 +++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c      |    6 ++++++
 drivers/net/ethernet/freescale/dpa/dpaa_eth.h      |   15 +++++++++++----
 drivers/net/ethernet/freescale/dpa/offline_port.c  |   11 +++++++++--
 4 files changed, 31 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
index f26e089..ea110a8 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth-common.h
@@ -58,11 +58,14 @@ enum dpa_fq_type {
 #endif
 };
 
+/* TODO: This structure should be renamed & moved to the FMD wrapper */
 struct dpa_buffer_layout_s {
 	uint16_t	priv_data_size;
 	bool		parse_results;
 	bool		time_stamp;
 	bool		hash_results;
+	uint8_t		manip_extra_space;
+	uint16_t	data_align;
 };
 
 #define DPA_TX_PRIV_DATA_SIZE	16
@@ -80,6 +83,8 @@ struct dpa_buffer_layout_s {
 	param.hash_results = buf_layout->hash_results; \
 	param.frag_enable = false; \
 	param.time_stamp = buf_layout->time_stamp; \
+	param.manip_extra_space = buf_layout->manip_extra_space; \
+	param.data_align = buf_layout->data_align; \
 	fm_set_##type##_port_params(port, &param); \
 }
 
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index e8e56b7..e12d6cc 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -1499,12 +1499,18 @@ static struct dpa_bp *dpa_size2pool(struct dpa_priv_s *priv, size_t size)
 static void dpa_set_buffer_layout(struct dpa_priv_s *priv, struct fm_port *port,
 				  struct dpa_buffer_layout_s *layout, int type)
 {
+	struct fm_port_params params;
+
 	layout->priv_data_size = (type == RX ?
 			DPA_RX_PRIV_DATA_SIZE : DPA_TX_PRIV_DATA_SIZE);
 	layout->parse_results = true;
 	layout->hash_results = true;
 	if (priv && priv->tsu && priv->tsu->valid)
 		layout->time_stamp = true;
+
+	fm_port_get_buff_layout_ext_params(port, &params);
+	layout->manip_extra_space = params.manip_extra_space;
+	layout->data_align = params.data_align;
 }
 
 /**
diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
index 122bb9d..e03669a 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.h
@@ -491,19 +491,26 @@ static inline int dpa_check_rx_mtu(struct sk_buff *skb, int mtu)
 
 static inline uint16_t dpa_get_headroom(struct dpa_buffer_layout_s *bl)
 {
+	uint16_t headroom;
 	/*
 	 * The frame headroom must accomodate:
 	 * - the driver private data area
 	 * - parse results, hash results, timestamp if selected
+	 * - manip extra space
 	 * If either hash results or time stamp are selected, both will
 	 * be copied to/from the frame headroom, as TS is located between PR and
 	 * HR in the IC and IC copy size has a granularity of 16bytes
 	 * (see description of FMBM_RICP and FMBM_TICP registers in DPAARM)
+	 *
+	 * Also make sure the headroom is a multiple of data_align bytes
 	 */
-	return bl->priv_data_size +
-		(bl->parse_results ? DPA_PARSE_RESULTS_SIZE : 0) +
-		(bl->hash_results || bl->time_stamp ?
-		 DPA_TIME_STAMP_SIZE + DPA_HASH_RESULTS_SIZE : 0);
+	headroom = bl->priv_data_size +
+		   (bl->parse_results ? DPA_PARSE_RESULTS_SIZE : 0) +
+		   (bl->hash_results || bl->time_stamp ?
+		    DPA_TIME_STAMP_SIZE + DPA_HASH_RESULTS_SIZE : 0) +
+		   bl->manip_extra_space;
+
+	return bl->data_align ? ALIGN(headroom, bl->data_align) : headroom;
 }
 
 static inline uint16_t dpa_get_buffer_size(struct dpa_buffer_layout_s *bl,
diff --git a/drivers/net/ethernet/freescale/dpa/offline_port.c b/drivers/net/ethernet/freescale/dpa/offline_port.c
index 600d94c..4e9184b 100644
--- a/drivers/net/ethernet/freescale/dpa/offline_port.c
+++ b/drivers/net/ethernet/freescale/dpa/offline_port.c
@@ -97,12 +97,19 @@ static int __devinit __cold oh_free_pcd_fqids(struct device *dev, uint32_t base_
 	return 0;
 }
 
-static void oh_set_buffer_layout(struct dpa_buffer_layout_s *layout)
+static void oh_set_buffer_layout(struct fm_port *port,
+				 struct dpa_buffer_layout_s *layout)
 {
+	struct fm_port_params params;
+
 	layout->priv_data_size = DPA_TX_PRIV_DATA_SIZE;
 	layout->parse_results = true;
 	layout->hash_results = true;
 	layout->time_stamp = false;
+
+	fm_port_get_buff_layout_ext_params(port, &params);
+	layout->manip_extra_space = params.manip_extra_space;
+	layout->data_align = params.data_align;
 }
 
 static int __devinit
@@ -272,7 +279,7 @@ oh_port_probe(struct platform_device *_of_dev)
 		goto return_kfree;
 	}
 
-	oh_set_buffer_layout(&buf_layout);
+	oh_set_buffer_layout(oh_config->oh_port, &buf_layout);
 	/* Set Tx params */
 	dpaa_eth_init_port(tx, oh_config->oh_port, oh_port_tx_params,
 		oh_config->error_fqid, oh_config->default_fqid, (&buf_layout));
-- 
1.7.5.4

