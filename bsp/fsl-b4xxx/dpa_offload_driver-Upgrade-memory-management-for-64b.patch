From 0e092bcd48878c2b1f6a38f6a4d7ba9dc866339f Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Wed, 30 May 2012 15:34:38 +0000
Subject: [PATCH 208/518] dpa_offload_driver: Upgrade memory management for
 64bits

The dpa_compat layer was performing some operations which were
truncating addresses to 32 bits. These are highly unhealthy when
running a 64 bit kernel and are now fixed.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_compat.c |   30 +++++++++++++-------------
 1 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_compat.c b/drivers/staging/fsl_dpa_offload/dpa_compat.c
index c3f01ad..b185644 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_compat.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_compat.c
@@ -95,16 +95,16 @@ void *dpa_offld_malloc_smart(size_t	size,
 	tmp = dpa_offld_malloc(size, zero);
 	if (tmp == NULL)
 		return NULL;
-	memory = (void *)(((unsigned)tmp + alignment + sizeof(void *)) &
+	memory = (void *)(((unsigned long)tmp + alignment + sizeof(void *)) &
 			~(alignment - 1));
-	*(void **)((unsigned)memory - sizeof(void *)) = tmp;
+	*(void **)((uint8_t *)memory - sizeof(void *)) = tmp;
 
 	return memory;
 }
 
 void dpa_offld_free_smart(void *memory)
 {
-	dpa_offld_free(*(void **)((unsigned)memory - sizeof(void*)));
+	dpa_offld_free(*(void **)((uint8_t *)memory - sizeof(void*)));
 }
 
 #ifdef DPA_OFFLOAD_DEBUG_MEMORY
@@ -161,8 +161,8 @@ void xx_free_debug(void *memory)
 
 
 	if (list_empty(&mem_block_list)) {
-		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated memory\n  (0x%08x).\n",
-			__LINE__, __func__, (unsigned)memory);
+		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated memory\n  (0x%p).\n",
+			__LINE__, __func__, memory);
 		dump_stack();
 		return;
 	}
@@ -178,8 +178,8 @@ void xx_free_debug(void *memory)
 	}
 
 	if (!found) {
-		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated memory\n  (0x%08x).\n",
-			__LINE__, __func__, (unsigned)memory);
+		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated memory\n  (0x%p).\n",
+			__LINE__, __func__, memory);
 		dump_stack();
 		return;
 	}
@@ -187,7 +187,7 @@ void xx_free_debug(void *memory)
 	list_del(temp);
 	if (memblk->free_func != dpa_offld_free) {
 		pr_err("\nERROR: Freeing memory with the wrong \"free\" function.\n");
-		pr_err("  Memory block @ 0x%08x\n", (unsigned)memblk->mem);
+		pr_err("  Memory block @ 0x%p\n", memblk->mem);
 		pr_err("  Allocated in: %s\n", memblk->file_name);
 		pr_err("  Line %d, function \"%s\"\n", memblk->file_line,
 			memblk->func_name);
@@ -256,8 +256,8 @@ void xx_free_smart_debug(void *memory)
 
 
 	if (list_empty(&mem_block_list)) {
-		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated\n  memory (0x%08x).\n",
-			__LINE__, __func__, (unsigned)memory);
+		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated\n  memory (0x%p).\n",
+			__LINE__, __func__, memory);
 		dump_stack();
 		return;
 	}
@@ -273,8 +273,8 @@ void xx_free_smart_debug(void *memory)
 	}
 
 	if (!found) {
-		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated\n  memory (0x%08x).\n",
-			__LINE__, __func__, (unsigned)memory);
+		pr_err("\nERROR: dpa_compat.c (%d), %s: Attempt to free unallocated\n  memory (0x%p).\n",
+			__LINE__, __func__, memory);
 		dump_stack();
 		return;
 	}
@@ -283,7 +283,7 @@ void xx_free_smart_debug(void *memory)
 	if (memblk->free_func != dpa_offld_free_smart) {
 		pr_err("\nERROR: dpa_compat.c (%d), %s: Freeing memory with the wrong\n  \"free\" function.\n",
 			__LINE__, __func__);
-		pr_err("  Memory block @ 0x%08x\n", (unsigned)memblk->mem);
+		pr_err("  Memory block @ 0x%p\n", memblk->mem);
 		pr_err("  Allocated in: %s\n", memblk->file_name);
 		pr_err("  Line %d, function \"%s\"\n", memblk->file_line,
 			memblk->func_name);
@@ -309,8 +309,8 @@ void dpa_offld_display_mem_leaks(void)
 			memblk = list_entry(temp,
 					struct dpa_offld_memory_block_info,
 					node);
-			pr_warn("\nLeaking %d bytes @ 0x%08x\n", memblk->size,
-				(unsigned)memblk->mem);
+			pr_warn("\nLeaking %u bytes @ 0x%p\n",
+				(unsigned)memblk->size, memblk->mem);
 			pr_warn("  Allocated in: %s\n", memblk->file_name);
 			pr_warn("  Line %d, function \"%s\"\n",
 				memblk->file_line, memblk->func_name);
-- 
1.7.5.4

