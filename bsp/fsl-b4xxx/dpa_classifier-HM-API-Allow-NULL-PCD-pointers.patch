From 27e7aeb26217e6c582c1e4a958a89af47275d610 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Tue, 11 Sep 2012 20:02:03 +0000
Subject: [PATCH 298/518] dpa_classifier: HM API: Allow NULL PCD pointers

When using the header manipulations "set" functions in "import" mode,
the user must be allowed to provide a NULL (or otherwise invalid) PCD
pointer, because this is ignored in this case. The wrapper was
complaining when the PCD pointer was provided as NULL.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |   74 +++++++++++--------
 1 files changed, 43 insertions(+), 31 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 3f0de7f..7c9b24e 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -640,10 +640,12 @@ static long do_ioctl_set_remove_hm(unsigned long args, bool compat_mode)
 		}
 
 	/* Translate FM_PCD file descriptor */
-	kparam.rm_params.fm_pcd = translate_fm_pcd_handle(kparam.rm_params.
-								fm_pcd);
-	if (!kparam.rm_params.fm_pcd)
-		return -EINVAL;
+	if ((int)kparam.rm_params.fm_pcd >= 0) {
+		kparam.rm_params.fm_pcd =
+			translate_fm_pcd_handle(kparam.rm_params.fm_pcd);
+		if (!kparam.rm_params.fm_pcd)
+			return -EINVAL;
+	}
 
 	if (kparam.res.remove_node)
 		p_res = &kparam.res;
@@ -651,8 +653,6 @@ static long do_ioctl_set_remove_hm(unsigned long args, bool compat_mode)
 	ret = dpa_classif_set_remove_hm(&kparam.rm_params, kparam.next_hmd,
 					&kparam.hmd, kparam.chain_head,
 					p_res);
-
-
 	if (ret < 0)
 		return ret;
 
@@ -749,11 +749,14 @@ static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
 				__FILE__, __func__, __LINE__);
 			return -EBUSY;
 		}
+
 	/* Translate FM_PCD file descriptor */
-	kparam.ins_params.fm_pcd = translate_fm_pcd_handle(kparam.ins_params.
-								fm_pcd);
-	if (!kparam.ins_params.fm_pcd)
-		return -EINVAL;
+	if ((int)kparam.ins_params.fm_pcd >= 0) {
+		kparam.ins_params.fm_pcd =
+			translate_fm_pcd_handle(kparam.ins_params.fm_pcd);
+		if (!kparam.ins_params.fm_pcd)
+			return -EINVAL;
+	}
 
 	if (kparam.res.insert_node)
 		p_res = &kparam.res;
@@ -776,7 +779,6 @@ static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
 	ret = dpa_classif_set_insert_hm(&kparam.ins_params, kparam.next_hmd,
 					&kparam.hmd, kparam.chain_head,
 					p_res);
-
 	if (ret < 0)
 			return ret;
 
@@ -889,10 +891,12 @@ static long  do_ioctl_set_vlan_hm(unsigned long args, bool compat_mode)
 		}
 
 	/* Translate FM_PCD file descriptor */
-	kparam.vlan_params.fm_pcd = translate_fm_pcd_handle(kparam.vlan_params.
-								fm_pcd);
-	if (!kparam.vlan_params.fm_pcd)
-		return -EINVAL;
+	if ((int)kparam.vlan_params.fm_pcd >= 0) {
+		kparam.vlan_params.fm_pcd =
+			translate_fm_pcd_handle(kparam.vlan_params.fm_pcd);
+		if (!kparam.vlan_params.fm_pcd)
+			return -EINVAL;
+	}
 
 	if (kparam.res.vlan_node)
 			p_res = &kparam.res;
@@ -996,10 +1000,12 @@ static long do_ioctl_set_nat_hm(unsigned long args, bool compat_mode)
 		}
 
 	/* Translate FM_PCD file descriptor */
-	kparam.nat_params.fm_pcd = translate_fm_pcd_handle(kparam.nat_params.
-								fm_pcd);
-	if (!kparam.nat_params.fm_pcd)
-		return -EINVAL;
+	if ((int)kparam.nat_params.fm_pcd >= 0) {
+		kparam.nat_params.fm_pcd =
+			translate_fm_pcd_handle(kparam.nat_params.fm_pcd);
+		if (!kparam.nat_params.fm_pcd)
+			return -EINVAL;
+	}
 
 	if (kparam.res.l3_update_node || kparam.res.l4_update_node)
 		p_res = &kparam.res;
@@ -1102,10 +1108,12 @@ static long do_ioctl_set_update_hm(unsigned long args, bool compat_mode)
 		}
 
 	/* Translate FM_PCD file descriptor */
-	kparam.update_params.fm_pcd = translate_fm_pcd_handle(kparam.
-						update_params.fm_pcd);
-	if (!kparam.update_params.fm_pcd)
-		return -EINVAL;
+	if ((int)kparam.update_params.fm_pcd >= 0) {
+		kparam.update_params.fm_pcd =
+			translate_fm_pcd_handle(kparam.update_params.fm_pcd);
+		if (!kparam.update_params.fm_pcd)
+			return -EINVAL;
+	}
 
 	if (kparam.res.ip_frag_node || kparam.res.update_node)
 		p_res = &kparam.res;
@@ -1209,10 +1217,12 @@ static long do_ioctl_set_fwd_hm(unsigned long args, bool compat_mode)
 		}
 
 	/* Translate FM_PCD file descriptor */
-	kparam.fwd_params.fm_pcd = translate_fm_pcd_handle(kparam.fwd_params.
-								fm_pcd);
-	if (!kparam.fwd_params.fm_pcd)
-		return -EINVAL;
+	if ((int)kparam.fwd_params.fm_pcd >= 0) {
+		kparam.fwd_params.fm_pcd =
+			translate_fm_pcd_handle(kparam.fwd_params.fm_pcd);
+		if (!kparam.fwd_params.fm_pcd)
+			return -EINVAL;
+	}
 
 	if (kparam.res.ip_frag_node || kparam.res.fwd_node ||
 	    kparam.res.pppoe_node)
@@ -1317,10 +1327,12 @@ static long  do_ioctl_set_mpls_hm(unsigned long args, bool compat_mode)
 		}
 
 	/* Translate FM_PCD file descriptor */
-	kparam.mpls_params.fm_pcd = translate_fm_pcd_handle(kparam.mpls_params.
-								fm_pcd);
-	if (!kparam.mpls_params.fm_pcd)
-		return -EINVAL;
+	if ((int)kparam.mpls_params.fm_pcd >= 0) {
+		kparam.mpls_params.fm_pcd =
+			translate_fm_pcd_handle(kparam.mpls_params.fm_pcd);
+		if (!kparam.mpls_params.fm_pcd)
+			return -EINVAL;
+	}
 
 	if (kparam.res.ins_rm_node)
 		p_res = &kparam.res;
-- 
1.7.5.4

