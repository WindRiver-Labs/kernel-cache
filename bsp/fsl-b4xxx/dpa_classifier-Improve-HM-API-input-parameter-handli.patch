From 41b52aa6218bfff719650c30d10a7b63b6298059 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Mon, 29 Oct 2012 21:34:26 +0000
Subject: [PATCH 342/518] dpa_classifier: Improve HM API input parameter
 handling

There were several cases where the DPA Classifier relied on pointers
provided by the user for low level driver configuration. This was a risk,
because those memory areas are not under the control of DPA Classifier
and could have been destroyed at any time by the user application while
the DPA Classifier still needs them.

The DPA Classifier now copies locally all buffers acquired from the user
application for configuration of the low level driver.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c   |   37 ++++++++++++++++----
 drivers/staging/fsl_dpa_offload/dpa_classifier.h   |    3 ++
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |    2 +
 3 files changed, 35 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index b475a62..de0a98a 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -2542,11 +2542,8 @@ static int key_to_entry_id(const struct dpa_cls_table *cls_table,
 
 	/* Find the shadow entry associated with this key */
 	shadow_list_entry = find_shadow_entry(cls_table, key);
-	if (shadow_list_entry == NULL) {
-		pr_err("ERROR: %s, %s (%d): DPA Classifier table entry not "
-			"found.\n", __FILE__, __func__, __LINE__);
+	if (shadow_list_entry == NULL)
 		return -ENODEV;
-	}
 
 	shadow_entry = list_entry(shadow_list_entry,
 				struct dpa_cls_tbl_shadow_entry,
@@ -3214,11 +3211,30 @@ int remove_hm_chain(struct list_head *chain_head, struct list_head *item)
 
 	list_del(item);
 
-	kfree(item);
+	remove_hm_node(pcurrent);
 
 	return err;
 }
 
+static void remove_hm_node(struct dpa_cls_hm_node *node)
+{
+	/* Check and remove all allocated buffers from the HM params: */
+	switch (node->params.type) {
+	case e_FM_PCD_MANIP_HDR:
+		if ((node->params.u.hdr.insrt) &&
+				(node->params.u.hdr.insrtParams.type ==
+				e_FM_PCD_MANIP_INSRT_GENERIC))
+			kfree(node->params.u.hdr.insrtParams.u.generic.p_Data);
+
+		break;
+	default:
+		break;
+	}
+
+	/* Remove the node */
+	kfree(node);
+}
+
 static struct dpa_cls_hm_node
 	*find_compatible_hm_node(enum dpa_cls_hm_node_type	type,
 				struct list_head		*list)
@@ -4145,7 +4161,13 @@ static int insert_hm_update_params(struct dpa_cls_hm *pinsert_hm)
 		break;
 	case DPA_CLS_HM_INSERT_CUSTOM:
 		size	= pinsert_hm->insert_params.custom.size;
-		pdata	= pinsert_hm->insert_params.custom.data;
+		pdata	= kzalloc(size, GFP_KERNEL);
+		if (!pdata) {
+			pr_err("ERROR: %s, %s (%d): Not enough memory for "
+				"insert HM.\n", __FILE__, __func__, __LINE__);
+			return -ENOMEM;
+		}
+		memcpy(pdata, pinsert_hm->insert_params.custom.data, size);
 		offset	= pinsert_hm->insert_params.custom.offset;
 		break;
 	default:
@@ -5105,7 +5127,8 @@ int dpa_classif_import_static_hm(void *hm, int next_hmd, int *hmd)
 		return -ENOMEM;
 	}
 
-	hm_node->node = hm;
+	hm_node->node		= hm;
+	hm_node->params.type	= -1; /* to identify an unknown HM */
 	INIT_LIST_HEAD(&hm_node->list_node);
 
 	pstatic_hm->hm_node[0]	= hm_node;
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index d4f6427..441ef24 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -400,6 +400,9 @@ static int init_hm_chain(void *fm_pcd, struct list_head *chain_head,
 static int remove_hm_chain(struct list_head	*chain_head,
 			struct list_head	*item);
 
+/* Removes a low level (FMD) header manipulation node */
+static void remove_hm_node(struct dpa_cls_hm_node *node);
+
 /*
  * Creates a new classifier header manipulation object and links it to an
  * existing object if needed.
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 6a54127..3d104a4 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -779,6 +779,7 @@ static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
 	ret = dpa_classif_set_insert_hm(&kparam.ins_params, kparam.next_hmd,
 					&kparam.hmd, kparam.chain_head,
 					p_res);
+	kfree(data);
 	if (ret < 0)
 			return ret;
 
@@ -857,6 +858,7 @@ static long do_ioctl_modify_insert_hm(unsigned long args, bool compat_mode)
 
 	ret = dpa_classif_modify_insert_hm(kparam.hmd, &kparam.ins_params,
 					   kparam.modify_flags);
+	kfree(data);
 
 	return ret;
 }
-- 
1.7.5.4

