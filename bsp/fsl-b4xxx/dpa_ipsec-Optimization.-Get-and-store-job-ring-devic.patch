From e8aa9afd290316c06bbe155010a14df67fc71c6f Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Fri, 15 Feb 2013 22:13:43 +0000
Subject: [PATCH 480/518] dpa_ipsec: Optimization. Get and store job ring
 device

Updated get_sec_info to store the job ring device.

Updated get_jrdev to use the information stored by get_sec_info
and return it if valid. This is improving the previous version
which was searching in the device tree every time was called.

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c      |    6 ++++-
 drivers/staging/fsl_dpa_offload/dpa_ipsec.h      |    1 +
 drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.c |   26 ++++++++++++++++-----
 drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.h |    2 +-
 4 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index d2ab851..04e9519 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -3138,7 +3138,11 @@ int dpa_ipsec_init(const struct dpa_ipsec_params *params, int *dpa_ipsec_id)
 	dpa_ipsec->num_used_sas = 0;
 
 	/* retrieve and store SEC ERA information */
-	get_sec_info(dpa_ipsec);
+	err = get_sec_info(dpa_ipsec);
+	if (err < 0) {
+		free_resources();
+		return err;
+	}
 
 	return 0;
 }
diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.h b/drivers/staging/fsl_dpa_offload/dpa_ipsec.h
index 1a3de5a..9555c58 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.h
@@ -371,6 +371,7 @@ struct dpa_ipsec {
 	int num_used_sas;  /* The current number of sa's used by this instance*/
 	int sec_era; /* SEC ERA information */
 	int sec_ver; /* SEC version information */
+	struct device *jrdev; /* Job ring device */
 	struct mutex lock; /* Lock for this dpa_ipsec instance */
 };
 
diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.c
index cd2b4f7..b53ffe6 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.c
@@ -40,6 +40,8 @@
 
 #include "dpa_ipsec_desc.h"
 
+static struct device *get_jrdev(struct dpa_ipsec *dpa_ipsec);
+
 /* If SEC ERA is unknown default to this value */
 #define SEC_DEF_ERA	2 /* like in P4080 */
 
@@ -65,7 +67,7 @@ static const struct of_device_id sec_jr_match[] = {
 };
 
 /* retrieve and store SEC information */
-void get_sec_info(struct dpa_ipsec *dpa_ipsec)
+int get_sec_info(struct dpa_ipsec *dpa_ipsec)
 {
 	struct device_node *sec_node;
 	struct platform_device *sec_of_dev;
@@ -98,15 +100,23 @@ def_sec_era:
 		sec_era = SEC_DEF_ERA;
 
 	dpa_ipsec->sec_era = sec_era;
+	dpa_ipsec->jrdev = get_jrdev(dpa_ipsec);
+	if (!dpa_ipsec->jrdev)
+		return -EINVAL;
+
+	return 0;
 }
 
 
-static struct device *get_jrdev(void)
+static struct device *get_jrdev(struct dpa_ipsec *dpa_ipsec)
 {
 	struct device_node *sec_jr_node;
 	struct platform_device *sec_of_jr_dev;
 	struct device *sec_jr_dev;
 
+	if (dpa_ipsec->jrdev)
+		return dpa_ipsec->jrdev;
+
 	sec_jr_node = of_find_matching_node(NULL, &sec_jr_match[0]);
 	if (sec_jr_node == NULL) {
 		pr_err("Couln't find the device_node SEC job-ring, check the device tree\n");
@@ -924,7 +934,7 @@ int build_extended_encap_shared_descriptor(struct dpa_ipsec_sa *sa,
 	extra_cmds_len = desc_len(extra_cmds) - 1;
 
 	/* get the jr device  */
-	jrdev = get_jrdev();
+	jrdev = get_jrdev(sa->dpa_ipsec);
 	if (!jrdev) {
 		pr_err("Failed to get the job ring device, check the dts\n");
 		return -EINVAL;
@@ -1147,7 +1157,7 @@ int build_extended_decap_shared_descriptor(struct dpa_ipsec_sa *sa,
 	extra_cmds_len = desc_len(extra_cmds) - 1;
 
 	/* get the jr device  */
-	jrdev = get_jrdev();
+	jrdev = get_jrdev(sa->dpa_ipsec);
 	if (!jrdev) {
 		pr_err("Failed to get the job ring device, check the dts\n");
 		return -EINVAL;
@@ -1394,7 +1404,7 @@ int create_sec_descriptor(struct dpa_ipsec_sa *sa)
 	int ret = 0;
 
 	/* get the jr device  */
-	jrdev = get_jrdev();
+	jrdev = get_jrdev(sa->dpa_ipsec);
 	if (!jrdev) {
 		pr_err("Failed to get the job ring device, check the dts\n");
 		return -EINVAL;
@@ -1536,15 +1546,19 @@ int generate_split_key(struct auth_params *auth_param)
 	struct device *jrdev;
 	dma_addr_t dma_addr_in, dma_addr_out;
 	u32 *desc, timeout = 1000000, alg_sel = 0;
+	struct dpa_ipsec_sa *sa;
 	atomic_t done;
 	int ret = 0;
 
+	sa = container_of(auth_param, struct dpa_ipsec_sa, auth_data);
+	BUG_ON(!sa->dpa_ipsec);
+
 	ret = get_split_key_info(auth_param, &alg_sel);
 	/* exit if error or there is no need to compute a split key */
 	if (ret < 0 || alg_sel == 0)
 		return ret;
 
-	jrdev = get_jrdev();
+	jrdev = get_jrdev(sa->dpa_ipsec);
 	if (!jrdev) {
 		pr_err("Could not get job ring device, please check dts\n");
 		return -ENODEV;
diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.h b/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.h
index 6258259..07630f16 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec_desc.h
@@ -87,7 +87,7 @@ struct sec_descriptor {
 	};
 };
 
-void get_sec_info(struct dpa_ipsec *dpa_ipsec);
+int get_sec_info(struct dpa_ipsec *dpa_ipsec);
 int create_sec_descriptor(struct dpa_ipsec_sa *sa);
 int generate_split_key(struct auth_params *auth_param);
 
-- 
1.7.5.4

