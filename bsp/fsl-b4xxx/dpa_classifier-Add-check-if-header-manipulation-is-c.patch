From 5913acaf5e3b19e8fe6451ba2c9e1f8175630f19 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Fri, 22 Feb 2013 22:00:49 +0000
Subject: [PATCH 463/518] dpa_classifier: Add check if header manipulation is
 chain head before attaching to table entry

Added a new function to query whether a header manipulation
operation is chain head.

Updated the dpa_classifier to refuse to insert a table entry which
has a header manipulation operation that is not a header manipulation
chain head.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   29 ++++++++++++++++++++++
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |    3 ++
 2 files changed, 32 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index bf1c686..ad10c06 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -2965,6 +2965,15 @@ static int action_to_next_engine_params(const struct dpa_cls_tbl_action *action,
 					__LINE__);
 				return -EINVAL;
 			}
+			if (!dpa_classif_hm_is_chain_head(
+						action->enq_params.hmd)) {
+				pr_err("ERROR: %s, %s (%d): hmd=%d is not a "
+					"header manipulation chain head. Only "
+					"chain heads can be attached to table "
+					"entries.\n", __FILE__, __func__,
+					__LINE__, action->enq_params.hmd);
+				return -EINVAL;
+			}
 			next_engine_params->h_Manip = (t_Handle)
 		dpa_classif_hm_lock_chain(action->enq_params.hmd);
 			if (!next_engine_params->h_Manip) {
@@ -6809,6 +6818,26 @@ void dpa_classif_hm_release_chain(int hmd)
 				"node=0x%p.\n", hm_node->node);
 }
 
+bool dpa_classif_hm_is_chain_head(int hmd)
+{
+	struct dpa_cls_hm *hm;
+
+	if (hmd == DPA_OFFLD_DESC_NONE)
+		/* Nothing to do */
+		return false;
+
+	if ((hmd < 0) || (hmd >= hm_array.num_descriptors)) {
+		pr_err("ERROR: %s, %s (%d): Invalid HM descriptor hmd=%d. "
+			"Should be between %d and %d.\n", __FILE__, __func__,
+			__LINE__, hmd, 0, hm_array.num_descriptors-1);
+		return false;
+	}
+
+	hm = hm_array.object[hmd];
+
+	return hm->chain_head;
+}
+
 void *dpa_classif_get_frag_hm_handle(int hmd)
 {
 	struct dpa_cls_hm *hm;
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index f8e6fb0..cfc7378 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -658,6 +658,9 @@ void *dpa_classif_hm_lock_chain(int hmd);
 /* Releases a locked header manipulation chain. */
 void dpa_classif_hm_release_chain(int hmd);
 
+/* Tells whether a specific header manipulation operation is a chain head */
+bool dpa_classif_hm_is_chain_head(int hmd);
+
 /*
  * Given a header manipulation object descriptor, this function searches
  * through the header manipulation chain that this object belongs to and
-- 
1.7.5.4

