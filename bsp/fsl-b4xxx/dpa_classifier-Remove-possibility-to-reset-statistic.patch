From 1903c215546a6daa9dd6601502da2a9dea8c837f Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Tue, 11 Sep 2012 20:00:14 +0000
Subject: [PATCH 290/518] dpa_classifier: Remove possibility to reset
 statistics

The statistics reset feature is not necessary and was removed.
Removed the two API functions

dpa_classif_table_reset_entry_stats_by_key
dpa_classif_table_reset_entry_stats_by_ref

Also removed the statistics reset feature when reading the entry
stats using one of

dpa_classif_table_get_entry_stats_by_ref
dpa_classif_table_reset_entry_stats_by_key

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c   |   80 +-----------------
 drivers/staging/fsl_dpa_offload/dpa_classifier.h   |   10 ---
 .../staging/fsl_dpa_offload/dpa_classifier_ioctl.h |   14 ---
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |   86 +-------------------
 include/linux/fsl_dpa_classifier.h                 |   20 +----
 5 files changed, 8 insertions(+), 202 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index bc6120d..203888d 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -965,8 +965,7 @@ EXPORT_SYMBOL(dpa_classif_table_flush);
 
 int dpa_classif_table_get_entry_stats_by_key(int			td,
 				const struct dpa_offload_lookup_key	*key,
-				struct dpa_cls_tbl_entry_stats		*stats,
-				int					reset)
+				struct dpa_cls_tbl_entry_stats		*stats)
 {
 	int entry_id;
 
@@ -990,15 +989,13 @@ int dpa_classif_table_get_entry_stats_by_key(int			td,
 
 	return dpa_classif_table_get_entry_stats_by_ref(td,
 							entry_id,
-							stats,
-							reset);
+							stats);
 }
 EXPORT_SYMBOL(dpa_classif_table_get_entry_stats_by_key);
 
 int dpa_classif_table_get_entry_stats_by_ref(int		td,
 				int				entry_id,
-				struct dpa_cls_tbl_entry_stats	*stats,
-				int				reset)
+				struct dpa_cls_tbl_entry_stats	*stats)
 {
 	unsigned int cc_node_index;
 	uint8_t entry_index;
@@ -1026,81 +1023,10 @@ int dpa_classif_table_get_entry_stats_by_ref(int		td,
 	stats->total_pkts = (unsigned long)
 		FM_PCD_MatchTableGetKeyCounter(cc_node,	entry_index);
 
-	if (stats->total_pkts < index_entry->last_stats.total_pkts)
-		/* Roll over */
-		index_entry->stats.total_pkts +=
-			((unsigned long int)0xffffffff -
-			index_entry->last_stats.total_pkts) + stats->total_pkts;
-	else
-		index_entry->stats.total_pkts += stats->total_pkts -
-					index_entry->last_stats.total_pkts;
-	index_entry->last_stats.total_pkts = stats->total_pkts;
-	stats->total_pkts = index_entry->stats.total_pkts;
-	if (reset)
-		index_entry->stats.total_pkts = 0;
-
 	return 0;
 }
 EXPORT_SYMBOL(dpa_classif_table_get_entry_stats_by_ref);
 
-int dpa_classif_table_reset_entry_stats_by_key(int			td,
-				const struct dpa_offload_lookup_key	*key)
-{
-	int entry_id;
-
-	xx_sanity_check_return_value(((td >= 0) &&
-		(td < table_array.num_descriptors)), "td", -EINVAL);
-	xx_sanity_check_return_value(table_array.object[td], "td", -EINVAL);
-	xx_sanity_check_return_value(key, "key", -EINVAL);
-	xx_sanity_check_return_value(key->byte, "key", -EINVAL);
-	xx_sanity_check_return_value(((key->size > 0) &&
-		(key->size <= DPA_OFFLD_MAXENTRYKEYSIZE)), "key", -EINVAL);
-
-	entry_id = key_to_entry_id((struct dpa_cls_table *)
-					table_array.object[td], key);
-	if (entry_id < 0) {
-		pr_err("ERROR: %s, %s (%d): Unable to determine entry_id "
-			"associated with this lookup key.\n", __FILE__,
-			__func__, __LINE__);
-		return entry_id;
-	}
-
-	return dpa_classif_table_reset_entry_stats_by_ref(td, entry_id);
-}
-EXPORT_SYMBOL(dpa_classif_table_reset_entry_stats_by_key);
-
-int dpa_classif_table_reset_entry_stats_by_ref(int		td,
-				int				entry_id)
-{
-	unsigned int cc_node_index;
-	struct dpa_cls_tbl_entry *index_entry;
-	t_Handle cc_node;
-	struct dpa_cls_table *ptable;
-
-	xx_sanity_check_return_value(((td >= 0) &&
-		(td < table_array.num_descriptors)), "td", -EINVAL);
-	xx_sanity_check_return_value(table_array.object[td], "td", -EINVAL);
-
-	ptable = (struct dpa_cls_table *) table_array.object[td];
-
-	xx_sanity_check_return_value(((entry_id >= 0) &&
-		(entry_id < ptable->entries_cnt)), "entry_id", -EINVAL);
-	xx_sanity_check_return_value(ptable->entry[entry_id].valid,
-		"entry_id", -EINVAL);
-
-	cc_node_index	= ptable->entry[entry_id].int_cc_node_index;
-	index_entry	= &ptable->entry[entry_id];
-
-	cc_node = (t_Handle)ptable->int_cc_node[cc_node_index].cc_node;
-	index_entry->last_stats.total_pkts =
-		(unsigned long) FM_PCD_MatchTableGetKeyCounter(cc_node,
-						index_entry->entry_index);
-	index_entry->stats.total_pkts = 0;
-
-	return 0;
-}
-EXPORT_SYMBOL(dpa_classif_table_reset_entry_stats_by_ref);
-
 int dpa_classif_table_get_params(int td, struct dpa_cls_tbl_params *params)
 {
 	struct dpa_cls_table *ptable;
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index fd55f41..6108dee 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -80,16 +80,6 @@ struct dpa_cls_tbl_entry {
 	 */
 	struct list_head		*shadow_entry;
 
-	/* Last packet statistics for this entry. */
-	struct dpa_cls_tbl_entry_stats	stats;
-
-	/*
-	 * Last statistics counters provided by the low level
-	 * driver. This is used for low level driver counter roll
-	 * over protection.
-	 */
-	struct dpa_cls_tbl_entry_stats	last_stats;
-
 	/*
 	 * List node which allows linking this entry in the index
 	 * management list.
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
index 5cd924d..130f68d7 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
@@ -102,14 +102,12 @@ struct ioc_dpa_cls_tbl_entry_stats_by_key {
 	int td;
 	struct dpa_offload_lookup_key key;
 	struct dpa_cls_tbl_entry_stats stats;
-	int reset;
 };
 
 struct ioc_dpa_cls_tbl_entry_stats_by_ref {
 	int td;
 	int entry_id;
 	struct dpa_cls_tbl_entry_stats stats;
-	int reset;
 };
 
 struct ioc_dpa_cls_hm_remove_params {
@@ -230,7 +228,6 @@ struct compat_ioc_dpa_cls_tbl_entry_stats_by_key {
 	int td;
 	struct compat_ioc_dpa_offld_lookup_key key;
 	struct dpa_cls_tbl_entry_stats stats;
-	int reset;
 };
 
 struct compat_ioc_dpa_cls_tbl_entry_params {
@@ -622,17 +619,6 @@ int dpa_cls_hm_mpls_params_compatcpy(
 #define DPA_CLS_IOC_TBL_GET_STATS_BY_REF		\
 	_IOR(DPA_CLS_IOC_MAGIC, 12, struct ioc_dpa_cls_tbl_entry_stats_by_ref)
 
-#define DPA_CLS_IOC_TBL_RESET_STATS_BY_KEY		\
-	_IOR(DPA_CLS_IOC_MAGIC, 13, struct ioc_dpa_cls_tbl_entry_by_key)
-
-#ifdef CONFIG_COMPAT
-#define DPA_CLS_IOC_COMPAT_TBL_RESET_STATS_BY_KEY	\
-	_IOR(DPA_CLS_IOC_MAGIC, 13, struct compat_ioc_dpa_cls_tbl_entry_by_key)
-#endif /* CONFIG_COMPAT */
-
-#define DPA_CLS_IOC_TBL_RESET_STATS_BY_REF		\
-	_IOR(DPA_CLS_IOC_MAGIC, 14, struct ioc_dpa_cls_tbl_entry_by_ref)
-
 #define DPA_CLS_IOC_TBL_GET_PARAMS			\
 	_IOWR(DPA_CLS_IOC_MAGIC, 15, struct ioc_dpa_cls_tbl_params)
 
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 6c72c4e..3f0de7f 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -153,9 +153,6 @@ static long do_ioctl_table_delete_entry_by_key(unsigned long	args,
 static long do_ioctl_table_get_stats_by_key(unsigned long	args,
 						bool		compat_mode);
 
-static long do_ioctl_table_reset_stats_by_key(unsigned long	args,
-						bool		compat_mode);
-
 static long do_ioctl_set_remove_hm(unsigned long	args,
 				bool			compat_mode);
 
@@ -405,8 +402,7 @@ long wrp_dpa_classif_do_ioctl(
 		/* Call function */
 		ret = dpa_classif_table_get_entry_stats_by_ref(param.td,
 							       param.entry_id,
-							       &param.stats,
-							       param.reset);
+							       &param.stats);
 		if (ret < 0)
 			return ret;
 
@@ -422,32 +418,6 @@ long wrp_dpa_classif_do_ioctl(
 	}
 
 #ifdef CONFIG_COMPAT
-	case DPA_CLS_IOC_COMPAT_TBL_RESET_STATS_BY_KEY:
-#endif /* CONFIG_COMPAT */
-	case DPA_CLS_IOC_TBL_RESET_STATS_BY_KEY:
-		ret = do_ioctl_table_reset_stats_by_key(args, compat_mode);
-		break;
-
-	case DPA_CLS_IOC_TBL_RESET_STATS_BY_REF:
-	{
-		struct ioc_dpa_cls_tbl_entry_by_ref param;
-
-		/* Prepare arguments */
-		if (copy_from_user(&param, (void *) args, sizeof(param))) {
-			pr_err("ERROR: %s, %s (%d): Read failed: "
-				"dpa_classif_table_reset_entry_stats_by_ref "
-				"user space args.\n", __FILE__, __func__,
-				__LINE__);
-			return -EBUSY;
-		}
-
-		/* Call function */
-		ret = dpa_classif_table_reset_entry_stats_by_ref(param.td,
-							    param.entry_id);
-
-		break;
-	}
-#ifdef CONFIG_COMPAT
 	case DPA_CLS_IOC_COMPAT_TBL_GET_PARAMS:
 #endif /* CONFIG_COMPAT */
 	case DPA_CLS_IOC_TBL_GET_PARAMS:
@@ -1957,8 +1927,7 @@ static long do_ioctl_table_get_stats_by_key(unsigned long	args,
 	/* Call function */
 	ret = dpa_classif_table_get_entry_stats_by_key(kparam.td,
 						       &kparam.key,
-						       &kparam.stats,
-						       kparam.reset);
+						       &kparam.stats);
 	if (ret < 0)
 		return ret;
 
@@ -1986,54 +1955,6 @@ static long do_ioctl_table_get_stats_by_key(unsigned long	args,
 	return ret;
 }
 
-static long do_ioctl_table_reset_stats_by_key(unsigned long	args,
-					bool			compat_mode)
-{
-	struct ioc_dpa_cls_tbl_entry_by_key kparam;
-	uint8_t key_buf[DPA_OFFLD_MAXENTRYKEYSIZE];
-	uint8_t mask_buf[DPA_OFFLD_MAXENTRYKEYSIZE];
-#ifdef CONFIG_COMPAT
-	long ret = 0;
-	struct compat_ioc_dpa_cls_tbl_entry_by_key uparam;
-
-	/* Prepare arguments */
-	if (compat_mode) {
-		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
-			pr_err("ERROR: %s, %s (%d): Read failed: "
-				"dpa_classif_table_reset_entry_stats_by_key "
-				"user space args.\n", __FILE__, __func__,
-				__LINE__);
-			return -EBUSY;
-		}
-
-		kparam.key.byte = key_buf;
-		kparam.key.mask = mask_buf;
-		kparam.key.size = DPA_OFFLD_MAXENTRYKEYSIZE;
-
-		/* Transfer the data into the kernel space params: */
-		ret = dpa_cls_tbl_entry_by_key_params_compatcpy(&kparam,
-			&uparam);
-		if (ret < 0)
-			return ret;
-	} else
-#endif /* CONFIG_COMPAT */
-	{
-		/* Prepare arguments */
-		if (copy_from_user(&kparam, (void *) args, sizeof(kparam))) {
-			pr_err("ERROR: %s, %s (%d): Read failed: "
-				"dpa_classif_table_reset_entry_stats_by_key user space "
-				"args.\n", __FILE__, __func__, __LINE__);
-			return -EBUSY;
-		}
-
-		COPY_KEY_PARAMS;
-	}
-
-	/* Call function */
-	return dpa_classif_table_reset_entry_stats_by_key(kparam.td,
-							&kparam.key);
-}
-
 void *translate_fm_pcd_handle(void *fm_pcd)
 {
 	struct file *fm_pcd_file;
@@ -2067,7 +1988,6 @@ int dpa_cls_tbl_entry_stats_by_key_params_compatcpy(
 	int err = 0;
 
 	kparam->td	= uparam->td;
-	kparam->reset	= uparam->reset;
 
 	err = dpa_lookup_key_params_compatcpy(&kparam->key, &uparam->key);
 	if (err < 0)
@@ -2208,7 +2128,7 @@ int dpa_cls_tbl_params_compatcpy(
 	kparam->table_params.fm_pcd = compat_ptr(uparam->table_params.fm_pcd);
 	kparam->table_params.cc_node = compat_get_id2ptr(
 					uparam->table_params.cc_node,
-					PCD_NODE);
+					FM_MAP_TYPE_PCD_NODE);
 
 	kparam->table_params.type	= uparam->table_params.type;
 	kparam->table_params.entry_mgmt	= uparam->table_params.entry_mgmt;
diff --git a/include/linux/fsl_dpa_classifier.h b/include/linux/fsl_dpa_classifier.h
index 439aeb6..ce53a63 100644
--- a/include/linux/fsl_dpa_classifier.h
+++ b/include/linux/fsl_dpa_classifier.h
@@ -398,8 +398,7 @@ int dpa_classif_table_flush(int td);
  */
 int dpa_classif_table_get_entry_stats_by_key(int			td,
 				const struct dpa_offload_lookup_key	*key,
-				struct dpa_cls_tbl_entry_stats		*stats,
-				int					reset);
+				struct dpa_cls_tbl_entry_stats		*stats);
 
 /*
  * Returns the statistics for a specified entry in a specified
@@ -407,22 +406,7 @@ int dpa_classif_table_get_entry_stats_by_key(int			td,
  */
 int dpa_classif_table_get_entry_stats_by_ref(int		td,
 				int				entry_id,
-				struct dpa_cls_tbl_entry_stats	*stats,
-				int				reset);
-
-/*
- * Resets the statistics for a specified entry in a specified
- * table. The entry is identified by its lookup key.
- */
-int dpa_classif_table_reset_entry_stats_by_key(int			td,
-				const struct dpa_offload_lookup_key	*key);
-
-/*
- * Resets the statistics for a specified entry in a specified
- * table. The entry is identified by its ref (pointer).
- */
-int dpa_classif_table_reset_entry_stats_by_ref(int		td,
-				int				entry_id);
+				struct dpa_cls_tbl_entry_stats	*stats);
 
 /* Returns the parameters of a classifier table. */
 int dpa_classif_table_get_params(int td, struct dpa_cls_tbl_params *params);
-- 
1.7.5.4

