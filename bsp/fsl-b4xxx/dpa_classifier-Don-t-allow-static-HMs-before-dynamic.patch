From 7e9fffb1324c157dd9b22eae80d50e8d5ae9765c Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Tue, 2 Apr 2013 17:09:15 +0300
Subject: [PATCH 34/36] dpa_classifier: Don't allow static HMs before dynamic
 HMs in a chain

Added verification of the supported hybrid header manipulation chains. Hybrid
header manipulation chains are supported but the static/imported header
manipulations must be last in chain. This code issues an error when it detects
that the user wants to connect static header manipulation ops to dynamic header
manipulation ops (i.e. created at runtime).

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.3.0_ALPHA, of
https://git.freescale.com/git-private/cgit.cgi/ppc/dpaa-offload/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   65 +++++++++++++++-------
 1 files changed, 45 insertions(+), 20 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index ef54298..f3493e5 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -3654,11 +3654,14 @@ static int init_hm_chain(void *fm_pcd, struct list_head *chain_head,
 	struct dpa_cls_hm_node *pcurrent, *pnext;
 	t_FmPcdManipParams params;
 	static int index;
+	static int num_int_nodes;
 
 	BUG_ON(!chain_head);
 	BUG_ON(!item);
 
-	index++;
+	if (index++ == 0)
+		num_int_nodes = 0;
+
 	if (item->next != chain_head) {
 		/* Initialize the rest of the HM chain */
 		err = init_hm_chain(fm_pcd, chain_head, item->next);
@@ -3810,28 +3813,50 @@ static int init_hm_chain(void *fm_pcd, struct list_head *chain_head,
 				"FM_PCD_ManipNodeSet. Failed to initialize low "
 				"level HM #%d from this chain.\n", __FILE__,
 				__func__, __LINE__, index);
-			err = -EINVAL;
+			err = -EBUSY;
 		}
 
 		pcurrent->flags |= DPA_CLS_HM_NODE_INTERNAL;
-	} else {
-		dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d): REPLACE existing "
-			"HM node (h_node=0x%p).\n", __func__, __LINE__,
-			pcurrent->node));
-		/* Need to sync with an existing node */
-		/*
-		 * Have to make a copy of the manip node params because
-		 * ManipNodeReplace does not accept h_NextManip != NULL.
-		 */
-		memcpy(&params, &pcurrent->params, sizeof(params));
-		params.h_NextManip = NULL;
-		error = FM_PCD_ManipNodeReplace(pcurrent->node, &params);
-		if (error != E_OK) {
-			pr_err("ERROR: %s, %s (%d): FMan driver call failed - "
-				"FM_PCD_ManipNodeReplace. Failed to initialize "
-				"low level HM #%d from this chain.\n", __FILE__,
-				__func__, __LINE__, index);
-			err = -EBUSY;
+
+		num_int_nodes++;
+	} else { /* This can be either a STATIC node or an IMPORTED node */
+		if (num_int_nodes) {
+			/*
+			 * When working with header manipulation chains that are
+			 * half created / half imported, the imported or static
+			 * nodes MUST always be LAST in chain. Rechaining low
+			 * level header manipulation nodes that are already
+			 * initialized is not possible.
+			 */
+			pr_err("ERROR: %s, %s (%d): Unsupported hybrid header "
+				"manipulation chain. The imported/static HM ops "
+				"must be LAST in chain.\n", __FILE__, __func__,
+				__LINE__);
+			return -EINVAL;
+		}
+		/* For STATIC HM ops we don't need to do anything here */
+		if (pcurrent->params.type != -1) {
+			/* Imported HM - need to sync with an existing node */
+			dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d): REPLACE "
+				"existing HM node (h_node=0x%p).\n", __func__,
+				__LINE__, pcurrent->node));
+
+			/*
+			 * Have to make a copy of the manip node params because
+			 * ManipNodeReplace does not accept h_NextManip != NULL.
+			 */
+			memcpy(&params, &pcurrent->params, sizeof(params));
+			params.h_NextManip = NULL;
+			error = FM_PCD_ManipNodeReplace(pcurrent->node,
+							&params);
+			if (error != E_OK) {
+				pr_err("ERROR: %s, %s (%d): FMan driver call "
+					"failed - FM_PCD_ManipNodeReplace. "
+					"Failed to initialize low level HM #%d "
+					"from this chain.\n", __FILE__,
+					__func__, __LINE__, index);
+				err = -EBUSY;
+			}
 		}
 	}
 
-- 
1.7.5.4

