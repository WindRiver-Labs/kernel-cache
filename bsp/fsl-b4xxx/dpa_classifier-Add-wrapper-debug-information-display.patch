From 82b195e2358d633d54fc35d04888e80620134346 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Mon, 29 Oct 2012 21:37:19 +0000
Subject: [PATCH 350/518] dpa_classifier: Add wrapper debug information
 display option

Added a series of dpa_classifier wrapper debug messages that can
be enabled using the build symbol DPA_CLASSIFIER_WRP_DEBUG. This
may improve debugging time, especially when debugging ioctl
command mapping.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |  178 +++++++++++++++++---
 1 files changed, 153 insertions(+), 25 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index f47a00d..1a82f76 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -129,6 +129,13 @@ do {									\
 	}								\
 } while (0)
 
+#ifdef DPA_CLASSIFIER_WRP_DEBUG
+#define dpa_cls_wrp_dbg(message) printk message
+#else
+#define dpa_cls_wrp_dbg(message)
+#endif /* DPA_CLASSIFIER_DEBUG */
+
+
 static long do_ioctl_table_create(unsigned long args, bool compat_mode);
 
 static long do_ioctl_table_modify_miss_action(unsigned long	args,
@@ -295,6 +302,9 @@ long wrp_dpa_classif_do_ioctl(
 	long ret = 0;
 
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) --> Processing ioctl "
+		"cmd=0x%x\n", __func__, __LINE__, cmd));
+
 	switch (cmd) {
 #ifdef CONFIG_COMPAT
 	case DPA_CLS_IOC_COMPAT_TBL_CREATE:
@@ -346,6 +356,9 @@ long wrp_dpa_classif_do_ioctl(
 	{
 		struct ioc_dpa_cls_tbl_entry_by_ref param;
 
+		dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d): "
+			"delete_entry_by_ref\n", __func__, __LINE__));
+
 		/* Prepare arguments */
 		if (copy_from_user(&param, (void *) args, sizeof(param))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: "
@@ -390,6 +403,9 @@ long wrp_dpa_classif_do_ioctl(
 	{
 		struct ioc_dpa_cls_tbl_entry_stats_by_ref param;
 
+		dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d): "
+			"get_stats_by_ref\n", __func__, __LINE__));
+
 		/* Prepare arguments */
 		if (copy_from_user(&param, (void *) args, sizeof(param))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: "
@@ -423,6 +439,9 @@ long wrp_dpa_classif_do_ioctl(
 	{
 		struct ioc_dpa_cls_tbl_params param;
 
+		dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d): "
+			"table_get_params\n", __func__, __LINE__));
+
 		/* Prepare arguments */
 		if (copy_from_user(&param, (void *) args, sizeof(param))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: "
@@ -542,6 +561,9 @@ long wrp_dpa_classif_do_ioctl(
 		return -EINVAL;
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d): Done <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
@@ -572,6 +594,9 @@ static long do_ioctl_table_create(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.table_params.fm_pcd = translate_fm_pcd_handle(kparam.
 							table_params.fm_pcd);
@@ -601,6 +626,9 @@ static long do_ioctl_table_create(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
@@ -632,6 +660,9 @@ static long do_ioctl_set_remove_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	if ((int)kparam.rm_params.fm_pcd >= 0) {
 		kparam.rm_params.fm_pcd =
@@ -666,14 +697,17 @@ static long do_ioctl_set_remove_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
 static long do_ioctl_modify_remove_hm(unsigned long args, bool compat_mode)
 {
-	long ret = 0;
 	struct ioc_dpa_cls_hm_remove_params kparam;
 #ifdef CONFIG_COMPAT
+	long ret = 0;
 	struct compat_ioc_dpa_cls_hm_remove_params uparam;
 
 	if (compat_mode) {
@@ -696,16 +730,17 @@ static long do_ioctl_modify_remove_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.rm_params.fm_pcd = translate_fm_pcd_handle(kparam.rm_params.
 								fm_pcd);
 	if (!kparam.rm_params.fm_pcd)
 		return -EINVAL;
 
-	ret = dpa_classif_modify_remove_hm(kparam.hmd, &kparam.rm_params,
+	return dpa_classif_modify_remove_hm(kparam.hmd, &kparam.rm_params,
 					   kparam.modify_flags);
-
-	return ret;
 }
 
 static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
@@ -717,6 +752,7 @@ static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
 	uint8_t sz;
 #ifdef CONFIG_COMPAT
 	struct compat_ioc_dpa_cls_hm_insert_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -737,6 +773,9 @@ static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	if ((int)kparam.ins_params.fm_pcd >= 0) {
 		kparam.ins_params.fm_pcd =
@@ -786,8 +825,10 @@ static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
-	return ret;
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
 
+	return ret;
 }
 
 static long do_ioctl_modify_insert_hm(unsigned long args, bool compat_mode)
@@ -798,6 +839,7 @@ static long do_ioctl_modify_insert_hm(unsigned long args, bool compat_mode)
 	uint8_t sz;
 #ifdef CONFIG_COMPAT
 	struct compat_ioc_dpa_cls_hm_insert_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -818,6 +860,9 @@ static long do_ioctl_modify_insert_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.ins_params.fm_pcd = translate_fm_pcd_handle(kparam.ins_params.
 								fm_pcd);
@@ -843,6 +888,9 @@ static long do_ioctl_modify_insert_hm(unsigned long args, bool compat_mode)
 					   kparam.modify_flags);
 	kfree(data);
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
@@ -853,6 +901,7 @@ static long  do_ioctl_set_vlan_hm(unsigned long args, bool compat_mode)
 	struct dpa_cls_hm_vlan_resources *p_res = NULL;
 #ifdef CONFIG_COMPAT
 	struct compat_ioc_dpa_cls_hm_vlan_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -873,6 +922,9 @@ static long  do_ioctl_set_vlan_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	if ((int)kparam.vlan_params.fm_pcd >= 0) {
 		kparam.vlan_params.fm_pcd =
@@ -907,16 +959,20 @@ static long  do_ioctl_set_vlan_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 
 }
 
 static long do_ioctl_modify_vlan_hm(unsigned long args, bool compat_mode)
 {
-	long ret = 0;
 	struct ioc_dpa_cls_hm_vlan_params kparam;
 #ifdef CONFIG_COMPAT
+	long ret = 0;
 	struct compat_ioc_dpa_cls_hm_vlan_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -937,16 +993,17 @@ static long do_ioctl_modify_vlan_hm(unsigned long args, bool compat_mode)
 		return -EBUSY;
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.vlan_params.fm_pcd = translate_fm_pcd_handle(kparam.vlan_params.
 								fm_pcd);
 	if (!kparam.vlan_params.fm_pcd)
 		return -EINVAL;
 
-	ret = dpa_classif_modify_vlan_hm(kparam.hmd, &kparam.vlan_params,
+	return dpa_classif_modify_vlan_hm(kparam.hmd, &kparam.vlan_params,
 					kparam.modify_flags);
-
-	return ret;
 }
 
 static long do_ioctl_set_nat_hm(unsigned long args, bool compat_mode)
@@ -956,6 +1013,7 @@ static long do_ioctl_set_nat_hm(unsigned long args, bool compat_mode)
 	struct dpa_cls_hm_nat_resources *p_res = NULL;
 #ifdef CONFIG_COMPAT
 	struct compat_ioc_dpa_cls_hm_nat_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -976,6 +1034,9 @@ static long do_ioctl_set_nat_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	if ((int)kparam.nat_params.fm_pcd >= 0) {
 		kparam.nat_params.fm_pcd =
@@ -1010,15 +1071,19 @@ static long do_ioctl_set_nat_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
 static long do_ioctl_modify_nat_hm(unsigned long args, bool compat_mode)
 {
-	long ret = 0;
 	struct ioc_dpa_cls_hm_nat_params kparam;
 #ifdef CONFIG_COMPAT
+	long ret = 0;
 	struct compat_ioc_dpa_cls_hm_nat_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -1039,16 +1104,17 @@ static long do_ioctl_modify_nat_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.nat_params.fm_pcd = translate_fm_pcd_handle(kparam.nat_params.
 								fm_pcd);
 	if (!kparam.nat_params.fm_pcd)
 		return -EINVAL;
 
-	ret = dpa_classif_modify_nat_hm(kparam.hmd, &kparam.nat_params,
+	return dpa_classif_modify_nat_hm(kparam.hmd, &kparam.nat_params,
 					kparam.modify_flags);
-
-	return ret;
 }
 
 static long do_ioctl_set_update_hm(unsigned long args, bool compat_mode)
@@ -1058,6 +1124,7 @@ static long do_ioctl_set_update_hm(unsigned long args, bool compat_mode)
 	struct dpa_cls_hm_update_resources *p_res = NULL;
 #ifdef CONFIG_COMPAT
 	struct compat_ioc_dpa_cls_hm_update_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -1078,6 +1145,9 @@ static long do_ioctl_set_update_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	if ((int)kparam.update_params.fm_pcd >= 0) {
 		kparam.update_params.fm_pcd =
@@ -1113,15 +1183,19 @@ static long do_ioctl_set_update_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
 static long do_ioctl_modify_update_hm(unsigned long args, bool compat_mode)
 {
-	long ret = 0;
 	struct ioc_dpa_cls_hm_update_params kparam;
 #ifdef CONFIG_COMPAT
+	long ret = 0;
 	struct compat_ioc_dpa_cls_hm_update_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -1142,16 +1216,17 @@ static long do_ioctl_modify_update_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.update_params.fm_pcd = translate_fm_pcd_handle(kparam.
 						update_params.fm_pcd);
 	if (!kparam.update_params.fm_pcd)
 		return -EINVAL;
 
-	ret = dpa_classif_modify_update_hm(kparam.hmd, &kparam.update_params,
+	return dpa_classif_modify_update_hm(kparam.hmd, &kparam.update_params,
 					   kparam.modify_flags);
-
-	return ret;
 }
 
 static long do_ioctl_set_fwd_hm(unsigned long args, bool compat_mode)
@@ -1161,6 +1236,7 @@ static long do_ioctl_set_fwd_hm(unsigned long args, bool compat_mode)
 	struct dpa_cls_hm_fwd_resources *p_res = NULL;
 #ifdef CONFIG_COMPAT
 	struct compat_ioc_dpa_cls_hm_fwd_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -1181,6 +1257,9 @@ static long do_ioctl_set_fwd_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	if ((int)kparam.fwd_params.fm_pcd >= 0) {
 		kparam.fwd_params.fm_pcd =
@@ -1217,15 +1296,19 @@ static long do_ioctl_set_fwd_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
 static long do_ioctl_modify_fwd_hm(unsigned long args, bool compat_mode)
 {
-	long ret = 0;
 	struct ioc_dpa_cls_hm_fwd_params kparam;
 #ifdef CONFIG_COMPAT
+	long ret = 0;
 	struct compat_ioc_dpa_cls_hm_fwd_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -1246,16 +1329,17 @@ static long do_ioctl_modify_fwd_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.fwd_params.fm_pcd = translate_fm_pcd_handle(kparam.fwd_params.
 								fm_pcd);
 	if (!kparam.fwd_params.fm_pcd)
 		return -EINVAL;
 
-	ret = dpa_classif_modify_fwd_hm(kparam.hmd, &kparam.fwd_params,
+	return dpa_classif_modify_fwd_hm(kparam.hmd, &kparam.fwd_params,
 					kparam.modify_flags);
-
-	return ret;
 }
 
 static long  do_ioctl_set_mpls_hm(unsigned long args, bool compat_mode)
@@ -1285,6 +1369,9 @@ static long  do_ioctl_set_mpls_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	if ((int)kparam.mpls_params.fm_pcd >= 0) {
 		kparam.mpls_params.fm_pcd =
@@ -1319,15 +1406,19 @@ static long  do_ioctl_set_mpls_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
 static long  do_ioctl_modify_mpls_hm(unsigned long args, bool compat_mode)
 {
-	long ret = 0;
 	struct ioc_dpa_cls_hm_mpls_params kparam;
 #ifdef CONFIG_COMPAT
+	long ret = 0;
 	struct compat_ioc_dpa_cls_hm_mpls_params uparam;
+
 	if (compat_mode) {
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
 			pr_err("ERROR: %s, %s (%d): Read failed: user "
@@ -1348,16 +1439,17 @@ static long  do_ioctl_modify_mpls_hm(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Translate FM_PCD file descriptor */
 	kparam.mpls_params.fm_pcd = translate_fm_pcd_handle(kparam.mpls_params.
 								fm_pcd);
 	if (!kparam.mpls_params.fm_pcd)
 		return -EINVAL;
 
-	ret = dpa_classif_modify_mpls_hm(kparam.hmd, &kparam.mpls_params,
+	return dpa_classif_modify_mpls_hm(kparam.hmd, &kparam.mpls_params,
 					kparam.modify_flags);
-
-	return ret;
 }
 
 static long do_ioctl_table_modify_miss_action(unsigned long	args,
@@ -1389,6 +1481,9 @@ static long do_ioctl_table_modify_miss_action(unsigned long	args,
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	return dpa_classif_table_modify_miss_action(kparam.td,
 						&kparam.miss_action);
@@ -1448,6 +1543,9 @@ static long do_ioctl_table_insert_entry(unsigned long args, bool compat_mode)
 		}
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	ret = dpa_classif_table_insert_entry(kparam.td,
 					&kparam.key,
@@ -1475,6 +1573,9 @@ static long do_ioctl_table_insert_entry(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
@@ -1565,6 +1666,9 @@ static long do_ioctl_table_modify_entry_by_key(unsigned long	args,
 		}
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	return dpa_classif_table_modify_entry_by_key(kparam.td,
 						&kparam.key,
@@ -1649,6 +1753,9 @@ static long do_ioctl_table_modify_entry_by_ref(unsigned long	args,
 		}
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	return dpa_classif_table_modify_entry_by_ref(kparam.td,
 						kparam.entry_id,
@@ -1693,6 +1800,9 @@ static long do_ioctl_table_lookup_by_key(unsigned long args, bool compat_mode)
 		COPY_KEY_PARAMS;
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	ret = dpa_classif_table_lookup_by_key(kparam.td,
 					      &kparam.key,
@@ -1721,6 +1831,9 @@ static long do_ioctl_table_lookup_by_key(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
@@ -1753,6 +1866,9 @@ static long do_ioctl_table_lookup_by_ref(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	ret = dpa_classif_table_lookup_by_ref(kparam.td,
 					      kparam.entry_id,
@@ -1781,6 +1897,9 @@ static long do_ioctl_table_lookup_by_ref(unsigned long args, bool compat_mode)
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
@@ -1824,6 +1943,9 @@ static long do_ioctl_table_delete_entry_by_key(unsigned long	args,
 		COPY_KEY_PARAMS;
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d)\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	return dpa_classif_table_delete_entry_by_key(kparam.td,
 						    &kparam.key);
@@ -1869,6 +1991,9 @@ static long do_ioctl_table_get_stats_by_key(unsigned long	args,
 		COPY_KEY_PARAMS;
 	}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Call function */
 	ret = dpa_classif_table_get_entry_stats_by_key(kparam.td,
 						       &kparam.key,
@@ -1895,6 +2020,9 @@ static long do_ioctl_table_get_stats_by_key(unsigned long	args,
 			return -EBUSY;
 		}
 
+	dpa_cls_wrp_dbg(("DEBUG: classifier_wrp %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 
-- 
1.7.5.4

