From 7777326fbe324560944ab9266715190d642b8b70 Mon Sep 17 00:00:00 2001
From: Radu-Andrei BULIE <radu.bulie@freescale.com>
Date: Thu, 9 Aug 2012 13:23:56 +0000
Subject: [PATCH 264/518] offload_use_case: Synchronize usecase due to changes
 in common header definitions

Update ipsec parameters for policies and SAs due to changes in
ipsec API for using common header definitions.

Signed-off-by: Radu-Andrei BULIE <radu.bulie@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/usecases/ipsec_init.c  |   14 ++++----
 drivers/staging/fsl_dpa_offload/usecases/xfrm_km.c |   39 +++++++++++---------
 2 files changed, 28 insertions(+), 25 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c b/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c
index 54c6578..06d4272 100644
--- a/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c
+++ b/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c
@@ -49,32 +49,32 @@
 #define IPSEC_PRE_DEC_TBL_KEY_SIZE \
 	{ \
 		/* IPV4 SA */ \
-		(IPv4_ADDR_SIZE_IN_BYTES + \
+		(DPA_OFFLD_IPv4_ADDR_LEN_BYTES + \
 		 IP_PROTO_FIELD_LEN + \
 		 ESP_SPI_FIELD_LEN), \
 		 /* IPV4 SA w/ NATT*/ \
-		(IPv4_ADDR_SIZE_IN_BYTES + \
+		(DPA_OFFLD_IPv4_ADDR_LEN_BYTES + \
 		 IP_PROTO_FIELD_LEN + \
 		 2 * PORT_FIELD_LEN + \
 		 ESP_SPI_FIELD_LEN), \
 		 /* IPV6 SA */ \
-		(IPv6_ADDR_SIZE_IN_BYTES + \
+		(DPA_OFFLD_IPv6_ADDR_LEN_BYTES + \
 		 IP_PROTO_FIELD_LEN + \
 		 ESP_SPI_FIELD_LEN) \
 	}
 
 #define IPSEC_OUT_PRE_ENC_TBL_KEY_SIZE \
 	{ \
-		(2 * IPv4_ADDR_SIZE_IN_BYTES + \
+		(2 * DPA_OFFLD_IPv4_ADDR_LEN_BYTES + \
 		 IP_PROTO_FIELD_LEN + \
 		 2 * PORT_FIELD_LEN), \
-		(2 * IPv6_ADDR_SIZE_IN_BYTES + \
+		(2 * DPA_OFFLD_IPv6_ADDR_LEN_BYTES + \
 		 IP_PROTO_FIELD_LEN + \
 		 2 * PORT_FIELD_LEN), \
-		(2 * IPv4_ADDR_SIZE_IN_BYTES + \
+		(2 * DPA_OFFLD_IPv4_ADDR_LEN_BYTES + \
 		 IP_PROTO_FIELD_LEN + \
 		 2 * PORT_FIELD_LEN), \
-		(2 * IPv6_ADDR_SIZE_IN_BYTES + \
+		(2 * DPA_OFFLD_IPv6_ADDR_LEN_BYTES + \
 		 IP_PROTO_FIELD_LEN + \
 		 2 * PORT_FIELD_LEN), \
 		 0,	\
diff --git a/drivers/staging/fsl_dpa_offload/usecases/xfrm_km.c b/drivers/staging/fsl_dpa_offload/usecases/xfrm_km.c
index 4014820..23b4840 100644
--- a/drivers/staging/fsl_dpa_offload/usecases/xfrm_km.c
+++ b/drivers/staging/fsl_dpa_offload/usecases/xfrm_km.c
@@ -48,6 +48,9 @@
 #include "dbgfs_ctl.h"
 
 #define HASH_SIZE 256
+#define DPA_IPSEC_ADDR_T_IPv4 4
+#define DPA_IPSEC_ADDR_T_IPv6 6
+
 static const u32 jhash_initval = 0xdeadbeef;
 /* offloaded SA hash entry */
 struct sa {
@@ -386,6 +389,7 @@ static int offload_sa(int dpa_ipsec_id,
 			outer_iphdr.daddr = x->id.daddr.a4;
 			outer_iphdr.protocol = IPPROTO_ESP;
 			sa_params->sa_out_params.outer_ip_header = &outer_iphdr;
+			sa_params->sa_out_params.ip_ver = DPA_IPSEC_ADDR_T_IPv4;
 			sa_params->sa_out_params.ip_hdr_size =
 			    sizeof(outer_iphdr);
 		} else if (x->props.family == AF_INET6) {
@@ -401,8 +405,7 @@ static int offload_sa(int dpa_ipsec_id,
 			    &outer_ip6hdr;
 			sa_params->sa_out_params.ip_hdr_size =
 			    sizeof(outer_ip6hdr);
-			sa_params->sa_out_params.addr_type =
-			    DPA_IPSEC_ADDR_T_IPv6;
+			sa_params->sa_out_params.ip_ver = DPA_IPSEC_ADDR_T_IPv6;
 		}
 		sa_params->sa_out_params.outer_udp_header = NULL;
 		sa_params->sa_out_params.post_sec_flow_id = 0;
@@ -411,22 +414,22 @@ static int offload_sa(int dpa_ipsec_id,
 		sa_params->sa_dir = DPA_IPSEC_INBOUND;
 		sa_params->sa_in_params.use_udp_encap = 0;
 		if (x->props.family == AF_INET) {
-			sa_params->sa_in_params.src_addr.addr_type =
+			sa_params->sa_in_params.src_addr.version =
 			    DPA_IPSEC_ADDR_T_IPv4;
-			sa_params->sa_in_params.src_addr.ipv4.word =
+			sa_params->sa_in_params.src_addr.addr.ipv4.word =
 			    x->props.saddr.a4;
-			sa_params->sa_in_params.dest_addr.addr_type =
+			sa_params->sa_in_params.dest_addr.version =
 			    DPA_IPSEC_ADDR_T_IPv4;
-			sa_params->sa_in_params.dest_addr.ipv4.word =
+			sa_params->sa_in_params.dest_addr.addr.ipv4.word =
 			    x->id.daddr.a4;
 		} else if (x->props.family == AF_INET6) {
-			sa_params->sa_in_params.src_addr.addr_type =
+			sa_params->sa_in_params.src_addr.version =
 			    DPA_IPSEC_ADDR_T_IPv6;
-			memcpy(sa_params->sa_in_params.src_addr.ipv6.byte,
+			memcpy(sa_params->sa_in_params.src_addr.addr.ipv6.byte,
 			       x->props.saddr.a6, sizeof(x->props.saddr.a6));
-			sa_params->sa_in_params.dest_addr.addr_type =
+			sa_params->sa_in_params.dest_addr.version =
 			    DPA_IPSEC_ADDR_T_IPv6;
-			memcpy(sa_params->sa_in_params.dest_addr.ipv6.byte,
+			memcpy(sa_params->sa_in_params.dest_addr.addr.ipv6.byte,
 			       x->id.daddr.a6, sizeof(x->id.daddr.a6));
 		}
 
@@ -464,16 +467,16 @@ static inline int offload_policy(struct dpa_ipsec_policy_params *pol_params,
 		pol_params->dir_params.out_frag.mtu = usr_params.mtu_pre_enc;
 	}
 	if (sel->family == AF_INET) {
-		pol_params->src_addr.addr_type = DPA_IPSEC_ADDR_T_IPv4;
-		pol_params->src_addr.ipv4.word = sel->saddr.a4;
-		pol_params->dest_addr.addr_type = DPA_IPSEC_ADDR_T_IPv4;
-		pol_params->dest_addr.ipv4.word = sel->daddr.a4;
+		pol_params->src_addr.version = DPA_IPSEC_ADDR_T_IPv4;
+		pol_params->src_addr.addr.ipv4.word = sel->saddr.a4;
+		pol_params->dest_addr.version = DPA_IPSEC_ADDR_T_IPv4;
+		pol_params->dest_addr.addr.ipv4.word = sel->daddr.a4;
 	} else if (sel->family == AF_INET6) {
-		pol_params->src_addr.addr_type = DPA_IPSEC_ADDR_T_IPv6;
-		memcpy(pol_params->src_addr.ipv6.byte,
+		pol_params->src_addr.version = DPA_IPSEC_ADDR_T_IPv6;
+		memcpy(pol_params->src_addr.addr.ipv6.byte,
 			sel->saddr.a6, sizeof(sel->saddr.a6));
-		pol_params->dest_addr.addr_type = DPA_IPSEC_ADDR_T_IPv6;
-		memcpy(pol_params->dest_addr.ipv6.byte,
+		pol_params->dest_addr.version = DPA_IPSEC_ADDR_T_IPv6;
+		memcpy(pol_params->dest_addr.addr.ipv6.byte,
 			sel->daddr.a6, sizeof(sel->daddr.a6));
 	}
 	pol_params->src_prefix_len = sel->prefixlen_s;
-- 
1.7.5.4

