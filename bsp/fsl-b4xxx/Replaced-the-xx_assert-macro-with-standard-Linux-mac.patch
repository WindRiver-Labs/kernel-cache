From 4c14c9dba44a505b979b2930a84fb626cef94986 Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Fri, 29 Jun 2012 16:16:09 +0000
Subject: [PATCH 217/518] Replaced the xx_assert macro with standard Linux
 macro

updated cq.c to use the Linux BUG_ON macro for doing assert
conditions.

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
Acked-by: Mihai Serb <mihai.serb@freescale.com>
Acked-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/cq.c |   61 +++++++++++++++++----------------
 1 files changed, 31 insertions(+), 30 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/cq.c b/drivers/staging/fsl_dpa_offload/cq.c
index e04bc88..6d2992c 100644
--- a/drivers/staging/fsl_dpa_offload/cq.c
+++ b/drivers/staging/fsl_dpa_offload/cq.c
@@ -43,8 +43,8 @@ struct cq *cq_new(int max_items, int item_size)
 {
 	struct cq *cq;
 
-	xx_assert(max_items);
-	xx_assert(item_size);
+	BUG_ON(!max_items);
+	BUG_ON(!item_size);
 
 	cq = kmalloc(sizeof(*cq) + max_items * item_size, GFP_KERNEL);
 	if (cq) {
@@ -61,7 +61,7 @@ struct cq *cq_new(int max_items, int item_size)
 
 void cq_delete(struct cq *cq)
 {
-	xx_assert(cq);
+	BUG_ON(!cq);
 	while (mutex_is_locked(&cq->cq_lock)) {
 		udelay(100);
 		cpu_relax();
@@ -73,7 +73,7 @@ int cq_flush(struct cq *cq)
 {
 	int items_in_queue;
 
-	xx_assert(cq);
+	BUG_ON(!cq);
 
 	/* Acquire circular queue lock */
 	mutex_lock(&cq->cq_lock);
@@ -94,7 +94,7 @@ int cq_put(struct cq *cq, void *item)
 	int put_pos, max_items, first, items_in_queue, item_size;
 	uint8_t *byte = (uint8_t *)item;
 
-	xx_assert(cq);
+	BUG_ON(!cq);
 
 	/* Acquire circular queue lock */
 	mutex_lock(&cq->cq_lock);
@@ -128,32 +128,32 @@ int cq_put(struct cq *cq, void *item)
 
 int cq_put_1byte(struct cq *cq, uint8_t item)
 {
-	xx_assert(cq);
-	xx_assert(cq->item_size == 1);
+	BUG_ON(!cq);
+	BUG_ON(cq->item_size != 1);
 
 	return cq_put(cq, &item);
 }
 
 int cq_put_2bytes(struct cq *cq, uint16_t item)
 {
-	xx_assert(cq);
-	xx_assert(cq->item_size == 2);
+	BUG_ON(!cq);
+	BUG_ON(cq->item_size != 2);
 
 	return cq_put(cq, &item);
 }
 
 int cq_put_4bytes(struct cq *cq, uint32_t item)
 {
-	xx_assert(cq);
-	xx_assert(cq->item_size == 4);
+	BUG_ON(!cq);
+	BUG_ON(cq->item_size != 4);
 
 	return cq_put(cq, &item);
 }
 
 int cq_put_8bytes(struct cq *cq, uint64_t item)
 {
-	xx_assert(cq);
-	xx_assert(cq->item_size == 8);
+	BUG_ON(!cq);
+	BUG_ON(cq->item_size != 8);
 
 	return cq_put(cq, &item);
 }
@@ -163,8 +163,8 @@ int cq_get(struct cq *cq, void *item)
 	int get_pos, items_in_queue, item_size, first;
 	uint8_t *byte = (uint8_t *)item;
 
-	xx_assert(cq);
-	xx_assert(item);
+	BUG_ON(!cq);
+	BUG_ON(!item);
 
 	/* Acquire circular queue lock */
 	mutex_lock(&cq->cq_lock);
@@ -197,36 +197,36 @@ int cq_get(struct cq *cq, void *item)
 
 int cq_get_1byte(struct cq *cq, uint8_t *item)
 {
-	xx_assert(cq);
-	xx_assert(item);
-	xx_assert(cq->item_size == 1);
+	BUG_ON(!cq);
+	BUG_ON(!item);
+	BUG_ON(cq->item_size != 1);
 
 	return cq_get(cq, item);
 }
 
 int cq_get_2bytes(struct cq *cq, uint16_t *item)
 {
-	xx_assert(cq);
-	xx_assert(item);
-	xx_assert(cq->item_size == 2);
+	BUG_ON(!cq);
+	BUG_ON(!item);
+	BUG_ON(cq->item_size != 2);
 
 	return cq_get(cq, item);
 }
 
 int cq_get_4bytes(struct cq *cq, uint32_t *item)
 {
-	xx_assert(cq);
-	xx_assert(item);
-	xx_assert(cq->item_size == 4);
+	BUG_ON(!cq);
+	BUG_ON(!item);
+	BUG_ON(cq->item_size != 4);
 
 	return cq_get(cq, item);
 }
 
 int cq_get_8bytes(struct cq *cq, uint64_t *item)
 {
-	xx_assert(cq);
-	xx_assert(item);
-	xx_assert(cq->item_size == 8);
+	BUG_ON(!cq);
+	BUG_ON(!item);
+	BUG_ON(cq->item_size != 8);
 
 	return cq_get(cq, item);
 }
@@ -234,7 +234,8 @@ int cq_get_8bytes(struct cq *cq, uint64_t *item)
 int cq_items_in_queue(struct cq *cq)
 {
 	int items_in_queue;
-	xx_assert(cq);
+
+	BUG_ON(!cq);
 
 	/* Acquire circular queue lock */
 	mutex_lock(&cq->cq_lock);
@@ -252,8 +253,8 @@ int cq_read(struct cq *cq, void *read_item, int position)
 	int item_size, first, items_in_queue, bytePosition;
 	uint8_t *read_byte = (uint8_t *)read_item;
 
-	xx_assert(cq);
-	xx_assert(read_item);
+	BUG_ON(!cq);
+	BUG_ON(!read_item);
 
 	/* Acquire circular queue lock */
 	mutex_lock(&cq->cq_lock);
-- 
1.7.5.4

