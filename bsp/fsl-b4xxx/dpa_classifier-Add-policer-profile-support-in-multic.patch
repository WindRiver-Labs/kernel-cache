From 3eb4ab92b9dda097bfa247d335b3692be37e917d Mon Sep 17 00:00:00 2001
From: Radu Bulie <radu.bulie@freescale.com>
Date: Mon, 25 Mar 2013 15:10:50 +0000
Subject: [PATCH 30/36] dpa_classifier: Add policer profile support in
 multicast component

Add policer profile support for multicast members.

Signed-off-by: Radu Bulie <radu.bulie@freescale.com>
[Grabbed from the branch, LINUX_IR5.3.0_ALPHA, of
https://git.freescale.com/git-private/cgit.cgi/ppc/dpaa-offload/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   77 ++++++++++++----------
 1 files changed, 43 insertions(+), 34 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 3bb7ab5..75a6f59 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -7469,15 +7469,6 @@ int dpa_classif_mcast_create_group(
 		 * set parameters for the first member
 		 */
 		member_params = &pgroup->group_params.member_params;
-
-		if (member_params->policer_params != NULL) {
-			pr_err("ERROR: %s, %s (%d): Policing for DPA "
-				"Classifier flows is not yet supported.\n",
-				__FILE__, __func__, __LINE__);
-			err = -ENOSYS;
-			goto dpa_classif_mcast_create_group_error;
-		}
-
 		replic_grp_params = kzalloc(sizeof(t_FmPcdFrmReplicGroupParams),
 					    GFP_KERNEL);
 		if (!replic_grp_params) {
@@ -7502,7 +7493,8 @@ int dpa_classif_mcast_create_group(
 				pr_err("ERROR: %s, %s (%d): Failed "
 					 "to alocate direct scheme params.\n",
 					__FILE__, __func__, __LINE__);
-				return -ENOMEM;
+				err = -ENOMEM;
+				goto dpa_classif_mcast_create_group_error;
 			}
 
 			classification = group_params->classification;
@@ -7528,7 +7520,8 @@ int dpa_classif_mcast_create_group(
 				pr_err("ERROR: %s, %s (%d): Failed "
 					"to set direct scheme.\n",
 					__FILE__, __func__, __LINE__);
-				return -EINVAL;
+				err = -EINVAL;
+				goto dpa_classif_mcast_create_group_error;
 			}
 
 			/* Redirect frames to KeyGen direct scheme */
@@ -7540,16 +7533,26 @@ int dpa_classif_mcast_create_group(
 			next_engine_params->params.kgParams.overrideFqid =
 						member_params->override_fqid;
 		} else {
-			next_engine_params->nextEngine = e_FM_PCD_DONE;
+			if (member_params->policer_params) {
+				next_engine_params->nextEngine = e_FM_PCD_PLCR;
+				next_engine_params->params.plcrParams.
+					sharedProfile =
+				member_params->policer_params->shared_profile;
+				next_engine_params->params.plcrParams.
+					newRelativeProfileId =
+			      member_params->policer_params->new_rel_profile_id;
+			} else {
+				next_engine_params->nextEngine = e_FM_PCD_DONE;
+				next_engine_params->params.enqueueParams.
+					newRelativeStorageProfileId =
+						  member_params->new_rel_vsp_id;
+			}
 			next_engine_params->params.enqueueParams.action =
 						e_FM_PCD_ENQ_FRAME;
 			next_engine_params->params.enqueueParams.overrideFqid =
-						member_params->override_fqid;
+						  member_params->override_fqid;
 			next_engine_params->params.enqueueParams.newFqid =
-						member_params->new_fqid;
-			next_engine_params->params.enqueueParams.
-						  newRelativeStorageProfileId =
-						  member_params->new_rel_vsp_id;
+						  member_params->new_fqid;
 		}
 		if (member_params->hmd != DPA_OFFLD_DESC_NONE) {
 			next_engine_params->h_Manip = (t_Handle)
@@ -7676,14 +7679,6 @@ int dpa_classif_mcast_add_member(int grpd,
 	pgroup->last_index++;
 	pgroup->member_ids[*membrd] = pgroup->last_index;
 
-	if (member_params->policer_params != NULL) {
-		pr_err("ERROR: %s, %s (%d): Policing for DPA Classifier flows "
-			"is not yet supported.\n", __FILE__, __func__,
-			__LINE__);
-		err = -ENOSYS;
-		goto dpa_classif_mcast_add_member_error;
-	}
-
 	replic_grp_params = kzalloc(sizeof(t_FmPcdFrmReplicGroupParams),
 				    GFP_KERNEL);
 	if (!replic_grp_params) {
@@ -7706,7 +7701,9 @@ int dpa_classif_mcast_add_member(int grpd,
 			pr_err("ERROR: %s, %s (%d): Failed "
 				 "to alocate direct scheme params.\n",
 				__FILE__, __func__, __LINE__);
-			return -ENOMEM;
+			err = -ENOMEM;
+			goto dpa_classif_mcast_add_member_error;
+
 		}
 
 		classification = pgroup->group_params.classification;
@@ -7731,7 +7728,8 @@ int dpa_classif_mcast_add_member(int grpd,
 			pr_err("ERROR: %s, %s (%d): Failed "
 				"to set direct scheme.\n",
 				__FILE__, __func__, __LINE__);
-			return -EINVAL;
+			err = -EINVAL;
+			goto dpa_classif_mcast_add_member_error;
 		}
 
 		/* Redirect frames to KeyGen direct scheme */
@@ -7743,16 +7741,27 @@ int dpa_classif_mcast_add_member(int grpd,
 		next_engine_params->params.kgParams.overrideFqid =
 					member_params->override_fqid;
 	} else {
-		next_engine_params->nextEngine = e_FM_PCD_DONE;
+		if (member_params->policer_params) {
+			next_engine_params->nextEngine = e_FM_PCD_PLCR;
+			next_engine_params->params.plcrParams.
+				sharedProfile =
+				member_params->policer_params->shared_profile;
+
+			next_engine_params->params.plcrParams.
+				newRelativeProfileId =
+			      member_params->policer_params->new_rel_profile_id;
+		} else {
+			next_engine_params->nextEngine = e_FM_PCD_DONE;
+			next_engine_params->params.enqueueParams.
+				newRelativeStorageProfileId =
+						  member_params->new_rel_vsp_id;
+		}
 		next_engine_params->params.enqueueParams.action =
-						e_FM_PCD_ENQ_FRAME;
+							     e_FM_PCD_ENQ_FRAME;
 		next_engine_params->params.enqueueParams.overrideFqid =
-						member_params->override_fqid;
+						   member_params->override_fqid;
 		next_engine_params->params.enqueueParams.newFqid =
-						member_params->new_fqid;
-		next_engine_params->params.enqueueParams.
-						newRelativeStorageProfileId =
-						 member_params->new_rel_vsp_id;
+						   member_params->new_fqid;
 	}
 
 	if (member_params->hmd != DPA_OFFLD_DESC_NONE) {
-- 
1.7.5.4

