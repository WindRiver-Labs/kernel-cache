From 34efc676fbfca0de64e26fe1ca903407f373bda7 Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Fri, 23 Mar 2012 15:55:03 +0000
Subject: [PATCH 130/518] Fix indentation in WRP DPA IPSec

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c |  359 ++++++++++++-----------
 1 files changed, 180 insertions(+), 179 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
index 89bc1eb..9e5dec9 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_ipsec.c
@@ -103,223 +103,224 @@ long wrp_dpa_ipsec_ioctl(struct file *filp, unsigned int cmd,
 
 	switch (cmd) {
 	case DPA_IPSEC_IOC_INIT: {
-			struct ioc_dpa_ipsec_params prm;
-			struct file *fm_pcd_file;
-			t_LnxWrpFmDev *fm_wrapper_dev;
-			if (copy_from_user(&prm,
-					   (struct ioc_dpa_ipsec_params *) args,
-					    sizeof(prm))) {
-				xx_pr_err("Could not copy parameters ");
-				return -EINVAL;
-			}
+		struct ioc_dpa_ipsec_params prm;
+		struct file *fm_pcd_file;
+		t_LnxWrpFmDev *fm_wrapper_dev;
+		if (copy_from_user(&prm,
+				   (struct ioc_dpa_ipsec_params *) args,
+				    sizeof(prm))) {
+			xx_pr_err("Could not copy parameters ");
+			return -EINVAL;
+		}
 
-			/* Translate FM_PCD file descriptor */
-			fm_pcd_file = fcheck((unsigned int)
-						prm.dpa_ipsec_params.fm_pcd);
-			if (!fm_pcd_file) {
-				xx_pr_err("Could not acquire PCD handle");
-				return -EINVAL;
-			}
-			fm_wrapper_dev =
-				((t_LnxWrpFmDev *)fm_pcd_file->private_data);
-			prm.dpa_ipsec_params.fm_pcd =
-					(void *)fm_wrapper_dev->h_PcdDev;
-
-			err = dpa_ipsec_init(&prm.dpa_ipsec_params,
-					     &prm.dpa_ipsec_id);
-			if (err < 0)
-				return err;
-
-			if (copy_to_user((void *)args, &prm, sizeof(prm))) {
-				xx_pr_err("Could not copy to user the SA id");
-				return -EINVAL;
-			}
-			break;
+		/* Translate FM_PCD file descriptor */
+		fm_pcd_file = fcheck((unsigned int)
+					prm.dpa_ipsec_params.fm_pcd);
+		if (!fm_pcd_file) {
+			xx_pr_err("Could not acquire PCD handle");
+			return -EINVAL;
 		}
+		fm_wrapper_dev =
+			((t_LnxWrpFmDev *)fm_pcd_file->private_data);
+		prm.dpa_ipsec_params.fm_pcd =
+				(void *)fm_wrapper_dev->h_PcdDev;
+
+		err = dpa_ipsec_init(&prm.dpa_ipsec_params,
+				     &prm.dpa_ipsec_id);
+		if (err < 0)
+			return err;
+
+		if (copy_to_user((void *)args, &prm, sizeof(prm))) {
+			xx_pr_err("Could not copy to user the SA id");
+			return -EINVAL;
+		}
+		break;
+	}
 
 	case DPA_IPSEC_IOC_FREE: {
-			int dpa_ipsec_id;
-			if (copy_from_user(&dpa_ipsec_id, (int *)args,
-					    sizeof(int))) {
-				xx_pr_err("Could not copy parameters");
-				return -EINVAL;
-			}
-			err = dpa_ipsec_free(dpa_ipsec_id);
-			if (err < 0)
-				return err;
-			break;
+		int dpa_ipsec_id;
+		if (copy_from_user(&dpa_ipsec_id, (int *)args,
+				    sizeof(int))) {
+			xx_pr_err("Could not copy parameters");
+			return -EINVAL;
 		}
+		err = dpa_ipsec_free(dpa_ipsec_id);
+		if (err < 0)
+			return err;
+		break;
+	}
 
 	case DPA_IPSEC_IOC_CREATE_SA: {
-			struct ioc_dpa_ipsec_sa_params prm;
-			if (copy_from_user(&prm,
-					(struct ioc_dpa_ipsec_sa_params *) args,
-					 sizeof(prm))) {
-				xx_pr_err("Could not copy parameters");
-				return -EINVAL;
-			}
-			err = dpa_ipsec_create_sa(prm.dpa_ipsec_id,
-						  &prm.sa_params,
-						  &prm.sa_id);
-			if (err < 0)
-				return err;
-
-			if (copy_to_user((void *)args, &prm, sizeof(prm))) {
-				xx_pr_err("Could not copy to user the SA id");
-				return -EINVAL;
-			}
-			break;
+		struct ioc_dpa_ipsec_sa_params prm;
+		if (copy_from_user(&prm,
+				(struct ioc_dpa_ipsec_sa_params *) args,
+				 sizeof(prm))) {
+			xx_pr_err("Could not copy parameters");
+			return -EINVAL;
 		}
+		err = dpa_ipsec_create_sa(prm.dpa_ipsec_id,
+					  &prm.sa_params,
+					  &prm.sa_id);
+		if (err < 0)
+			return err;
+
+		if (copy_to_user((void *)args, &prm, sizeof(prm))) {
+			xx_pr_err("Could not copy to user the SA id");
+			return -EINVAL;
+		}
+		break;
+	}
 
 	case DPA_IPSEC_IOC_REMOVE_SA: {
-			int sa_id;
-			if (copy_from_user(&sa_id, (int *)args, sizeof(int))) {
-				xx_pr_err("Could not copy parameters");
-				return -EINVAL;
-			}
-
-			err = dpa_ipsec_remove_sa(sa_id);
-			if (err < 0)
-				return err;
-			break;
+		int sa_id;
+		if (copy_from_user(&sa_id, (int *)args, sizeof(int))) {
+			xx_pr_err("Could not copy parameters");
+			return -EINVAL;
 		}
 
+		err = dpa_ipsec_remove_sa(sa_id);
+		if (err < 0)
+			return err;
+		break;
+	}
+
 	case DPA_IPSEC_IOC_ADD_POLICY: {
-			struct ioc_dpa_ipsec_add_rem_policy pol;
-			if (copy_from_user(&pol,
-				   (struct ioc_dpa_ipsec_add_rem_policy *) args,
-				    sizeof(pol))) {
-				xx_pr_err("Could not copy parameters");
-				return -EINVAL;
-			}
-			err = dpa_ipsec_sa_add_policy(pol.sa_id,
-						      &pol.pol_params);
-			if (err < 0)
-				return err;
-			break;
+		struct ioc_dpa_ipsec_add_rem_policy pol;
+		if (copy_from_user(&pol,
+			   (struct ioc_dpa_ipsec_add_rem_policy *) args,
+			    sizeof(pol))) {
+			xx_pr_err("Could not copy parameters");
+			return -EINVAL;
 		}
+		err = dpa_ipsec_sa_add_policy(pol.sa_id,
+					      &pol.pol_params);
+		if (err < 0)
+			return err;
+		break;
+	}
 	case DPA_IPSEC_IOC_REMOVE_POLICY: {
-			struct ioc_dpa_ipsec_add_rem_policy pol;
-			if (copy_from_user(&pol,
-				   (struct ioc_dpa_ipsec_add_rem_policy *) args,
-				    sizeof(pol))) {
-				xx_pr_err("Could not copy parameters\n");
-				return -EINVAL;
-			}
-
-			err = dpa_ipsec_sa_remove_policy(pol.sa_id,
-							 &pol.pol_params);
-			if (err < 0)
-				return err;
-			break;
+		struct ioc_dpa_ipsec_add_rem_policy pol;
+		if (copy_from_user(&pol,
+			   (struct ioc_dpa_ipsec_add_rem_policy *) args,
+			    sizeof(pol))) {
+			xx_pr_err("Could not copy parameters\n");
+			return -EINVAL;
 		}
 
+		err = dpa_ipsec_sa_remove_policy(pol.sa_id,
+						 &pol.pol_params);
+		if (err < 0)
+			return err;
+		break;
+	}
+
 	case DPA_IPSEC_IOC_SA_REKEYING: {
-			struct ioc_dpa_ipsec_sa_rekeying_prm prm;
+		struct ioc_dpa_ipsec_sa_rekeying_prm prm;
 
-			if (copy_from_user(&prm,
-				  (struct ioc_dpa_ipsec_sa_rekeying_prm *) args,
-				   sizeof(prm))) {
-				xx_pr_err("Could not copy parameters for rekeying");
-				return -EINVAL;
-			}
+		if (copy_from_user(&prm,
+			  (struct ioc_dpa_ipsec_sa_rekeying_prm *) args,
+			   sizeof(prm))) {
+			xx_pr_err("Could not copy parameters for rekeying");
+			return -EINVAL;
+		}
 
-			err = dpa_ipsec_sa_rekeying(prm.sa_id, &prm.sa_params,
-						    default_rekey_event_cb,
-						    prm.auto_rmv_old_sa,
-						    &prm.new_sa_id);
-			if (err < 0)
-				return err;
+		err = dpa_ipsec_sa_rekeying(prm.sa_id, &prm.sa_params,
+					    default_rekey_event_cb,
+					    prm.auto_rmv_old_sa,
+					    &prm.new_sa_id);
+		if (err < 0)
+			return err;
 
-			if (copy_to_user((void *)args, &prm, sizeof(prm))) {
-				xx_pr_err("Could not copy to user the SA id");
-				return -EINVAL;
-			}
-			break;
+		if (copy_to_user((void *)args, &prm, sizeof(prm))) {
+			xx_pr_err("Could not copy to user the SA id");
+			return -EINVAL;
 		}
+		break;
+	}
 
 	case DPA_IPSEC_IOC_FLUSH_ALL_SA: {
-			int dpa_ipsec_id;
+		int dpa_ipsec_id;
 
-			if (copy_from_user(&dpa_ipsec_id,
-					    (int *)args, sizeof(int))) {
-				xx_pr_err("Could not copy parameters");
-				return -EINVAL;
-			}
-
-			err = dpa_ipsec_flush_all_sa(dpa_ipsec_id);
-			if (err < 0)
-				return err;
-			break;
+		if (copy_from_user(&dpa_ipsec_id,
+				    (int *)args, sizeof(int))) {
+			xx_pr_err("Could not copy parameters");
+			return -EINVAL;
 		}
 
+		err = dpa_ipsec_flush_all_sa(dpa_ipsec_id);
+		if (err < 0)
+			return err;
+		break;
+	}
+
 	case DPA_IPSEC_IOC_GET_SA_POLICIES: {
-			struct ioc_dpa_ipsec_sa_get_policies prm, *in_prm;
-			int sa_id, num_pol;
+		struct ioc_dpa_ipsec_sa_get_policies prm, *in_prm;
+		int sa_id, num_pol;
 
-			in_prm = (struct ioc_dpa_ipsec_sa_get_policies *) args;
-			if (in_prm->sa_id < 0) {
-				xx_pr_err("Invalid input sa id\n");
-				return -EINVAL;
-			}
+		in_prm = (struct ioc_dpa_ipsec_sa_get_policies *) args;
+		if (in_prm->sa_id < 0) {
+			xx_pr_err("Invalid input SA id\n");
+			return -EINVAL;
+		}
 
-			if (!in_prm->policy_params) {
-				if (!in_prm->num_pol) {
-					xx_pr_err("Invalid parameters\n");
+		if (!in_prm->policy_params) {
+			if (!in_prm->num_pol) {
+				xx_pr_err("Invalid parameters\n");
+				return -EINVAL;
+			} else {
+				sa_id = in_prm->sa_id;
+				err = dpa_ipsec_sa_get_policies(sa_id,
+							NULL, &num_pol);
+				if (err < 0) {
+					xx_pr_err("Get policy count failed\n");
+					return err;
+				}
+				if (copy_to_user(in_prm->num_pol,
+						 &num_pol,
+						 sizeof(int))) {
+					xx_pr_err("Couldn't copy parameters\n");
 					return -EINVAL;
-				} else {
-					sa_id = in_prm->sa_id;
-					err = dpa_ipsec_sa_get_policies(sa_id,
-								NULL, &num_pol);
-					if (err < 0) {
-						xx_pr_err("sa get policy count failed\n");
-						return err;
-					}
-					if (copy_to_user(in_prm->num_pol,
-							 &num_pol,
-							 sizeof(int))) {
-						xx_pr_err("Could not copy parameters\n");
-						return -EINVAL;
-					}
-					return 0;
 				}
+				return 0;
 			}
+		}
 
-			sa_id = in_prm->sa_id;
-			if (copy_from_user(&num_pol,
-					   in_prm->num_pol, sizeof(int))) {
-				xx_pr_err("Could not copy user parameters\n");
-				return -EINVAL;
-			}
-			if (num_pol <= 0) {
-				xx_pr_err("Invalid number of policies for sa id %d\n", sa_id);
-				return -EINVAL;
-			}
+		sa_id = in_prm->sa_id;
+		if (copy_from_user(&num_pol,
+				   in_prm->num_pol, sizeof(int))) {
+			xx_pr_err("Could not copy user parameters\n");
+			return -EINVAL;
+		}
+		if (num_pol <= 0) {
+			xx_pr_err("Invalid number of policies for sa id %d\n",
+				  sa_id);
+			return -EINVAL;
+		}
 
-			prm.policy_params =
-				xx_zalloc(num_pol * sizeof(*prm.policy_params));
-			if (!prm.policy_params) {
-				xx_pr_err("No more memory");
-				return -ENOMEM;
-			}
+		prm.policy_params =
+			xx_zalloc(num_pol * sizeof(*prm.policy_params));
+		if (!prm.policy_params) {
+			xx_pr_err("No more memory");
+			return -ENOMEM;
+		}
 
-			err = dpa_ipsec_sa_get_policies(sa_id,
-							prm.policy_params,
-							&num_pol);
-			if (err < 0) {
-				xx_pr_err("Store policy failed");
-				return err;
-			}
+		err = dpa_ipsec_sa_get_policies(sa_id,
+						prm.policy_params,
+						&num_pol);
+		if (err < 0) {
+			xx_pr_err("Store policy failed");
+			return err;
+		}
 
-			if (copy_to_user(in_prm->policy_params,
-					prm.policy_params,
-					num_pol * sizeof(*prm.policy_params))) {
-				xx_pr_err("Could not copy parameters\n");
-				return -EINVAL;
-			}
-			kfree(prm.policy_params);
-			break;
+		if (copy_to_user(in_prm->policy_params,
+				prm.policy_params,
+				num_pol * sizeof(*prm.policy_params))) {
+			xx_pr_err("Could not copy parameters\n");
+			return -EINVAL;
 		}
+		kfree(prm.policy_params);
+		break;
+	}
 	default:
 		xx_pr_err("Invalid DPA IPsec ioctl\n");
 		break;
-- 
1.7.5.4

