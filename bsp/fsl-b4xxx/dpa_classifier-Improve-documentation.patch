From 0700e2acba50f8220c95cb269c345f1885816a8e Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Fri, 9 Nov 2012 19:07:24 +0000
Subject: [PATCH 386/518] dpa_classifier: Improve documentation

Added some data structures and functions documentation.
Re-formatted existing documentation to comply with Linux kernel
documentation standards.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |  110 ++++++++++++++---
 include/linux/fsl_dpa_classifier.h               |  141 +++++++++++++---------
 2 files changed, 175 insertions(+), 76 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index 78ad558..1a0d07f 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -57,6 +57,10 @@
  */
 #define DPA_CLS_TBL_MAXSHADOWTABLESIZE				256
 
+/*
+ * Max number of low level header manip nodes per header manipulation
+ * operation.
+ */
 #define DPA_CLS_HM_MAX_NODES_PER_OP				3
 
 /* Available flags for a header manipulation node: */
@@ -112,36 +116,33 @@ struct dpa_cls_tbl_entry {
 struct dpa_cls_tbl_shadow_entry {
 
 	struct dpa_offload_lookup_key	key;		/* Lookup key info */
+
 	struct dpa_cls_tbl_action	action;		/* Action info */
-	int				entry_id;	/* Id of this entry
-							 * (helps find
-							 * the index
-							 * management
-							 * entry faster */
-	struct list_head		list_node;	/* Pointers to other
-							 * shadow entries
-							 * in the current
-							 * set (bucket) */
+
+	/* Id of this entry (helps find the index management entry faster) */
+	int				entry_id;
+
+	/* Pointers to other shadow entries in the current set (bucket) */
+	struct list_head		list_node;
 };
 
 /* Shadow Table Entry for indexed tables */
 struct dpa_cls_tbl_shadow_entry_indexed {
 
 	struct dpa_cls_tbl_action	action;		/* Action info */
-	struct list_head		list_node;	/* Pointers to other
-							 * shadow entries
-							 * in the current
-							 * set (bucket) */
+
+	/* Pointers to other shadow entries in the current set (bucket) */
+	struct list_head		list_node;
 };
 
 /* Shadow Table */
 struct dpa_cls_tbl_shadow_table {
 
-	struct list_head	*shadow_entry;	/* Shadow table sets
-						 * (buckets) */
-	unsigned int		size;		/* The size of the shadow
-						 * table in number of sets
-						 * (buckets) */
+	/* Shadow table sets (buckets) */
+	struct list_head	*shadow_entry;
+
+	/* The size of the shadow table in number of sets (buckets) */
+	unsigned int		size;
 };
 
 /* Internal FMan Cc Node Management Info */
@@ -202,6 +203,7 @@ struct dpa_cls_table {
 	/* (Initial) parameters of the DPA Classifier table. */
 	struct dpa_cls_tbl_params		params;
 
+	/* Access control object for this table to avoid race conditions. */
 	struct mutex				access;
 };
 
@@ -216,15 +218,27 @@ struct dpa_cls_descriptor_table {
 	/* Array of descriptors */
 	void		**object;
 
+	/*
+	 * Access control object for this descriptor table to avoid race
+	 * conditions
+	 */
 	struct mutex	*access;
 };
 
 struct dpa_cls_hm_node {
+	/* Handle to the FMan header manip node */
 	void			*node;
 
+	/* The flags indicate certain properties of the current nodes */
 	unsigned		flags;
+
+	/* Used to keep count of the references to this header manip node */
 	unsigned		ref;
+
+	/* Stores the low level driver parameters of this header manip node */
 	t_FmPcdManipParams	params;
+
+	/* Links to other header manip nodes in the current chain */
 	struct list_head	list_node;
 };
 
@@ -250,27 +264,60 @@ enum dpa_cls_hm_type {
 };
 
 struct dpa_cls_hm {
+	/* Type of this high level HM operation */
 	enum dpa_cls_hm_type				type;
 
+	/* Indicates whether this op is the chain head or not */
 	bool						chain_head;
 
 	union {
+		/* Stores parameters for a NAT type header manipulation op */
 		struct dpa_cls_hm_nat_params		nat_params;
+
+		/*
+		 * Stores parameters for a Forwarding type header manipulation
+		 * op
+		 */
 		struct dpa_cls_hm_fwd_params		fwd_params;
+
+		/* Stores parameters for a remove header manipulation op */
 		struct dpa_cls_hm_remove_params		remove_params;
+
+		/* Stores parameters for an insert header manipulation op */
 		struct dpa_cls_hm_insert_params		insert_params;
+
+		/* Stores parameters for an update header manipulation op */
 		struct dpa_cls_hm_update_params		update_params;
+
+		/*
+		 * Stores parameters for a VLAN specific header manipulation
+		 * op
+		 */
 		struct dpa_cls_hm_vlan_params		vlan_params;
+
+		/*
+		 * Stores parameters for a MPLS specific header manipulation
+		 * op
+		 */
 		struct dpa_cls_hm_mpls_params		mpls_params;
 	};
 
+	/*
+	 * Holds references to the low level driver manip nodes used to
+	 * implement the current high level header manipulation op
+	 */
 	struct dpa_cls_hm_node		*hm_node[DPA_CLS_HM_MAX_NODES_PER_OP];
 
+	/* Specifies the number of used items in the [hm_node] array */
 	unsigned int			num_nodes;
 
 	/* Pointer to the low level driver HM node chain */
 	struct list_head		*hm_chain;
 
+	/*
+	 * Links to other high level header manipulation ops in the current
+	 * chain
+	 */
 	struct list_head		list_node;
 };
 
@@ -440,6 +487,10 @@ static void remove_hm_op(int hmd);
  */
 static int nat_hm_check_params(const struct dpa_cls_hm_nat_params *nat_params);
 
+/*
+ * Prepares (creates or imports) the header manipulation nodes for a NAT type
+ * header manipulation op.
+ */
 static int nat_hm_prepare_nodes(struct dpa_cls_hm *pnat_hm,
 				const struct dpa_cls_hm_nat_resources *res);
 
@@ -451,6 +502,10 @@ static int nat_hm_update_params(struct dpa_cls_hm *pnat_hm);
  */
 static int fwd_hm_check_params(const struct dpa_cls_hm_fwd_params *fwd_params);
 
+/*
+ * Prepares (creates or imports) the header manipulation nodes for a Forwarding
+ * type header manipulation op.
+ */
 static int fwd_hm_prepare_nodes(struct dpa_cls_hm *pfwd_hm,
 				const struct dpa_cls_hm_fwd_resources *res);
 
@@ -463,6 +518,10 @@ static int fwd_hm_update_params(struct dpa_cls_hm *pfwd_hm);
 static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
 	*remove_params);
 
+/*
+ * Prepares (creates or imports) the header manipulation nodes for a remove
+ * header manipulation op.
+ */
 static int remove_hm_prepare_nodes(struct dpa_cls_hm *premove_hm,
 				const struct dpa_cls_hm_remove_resources *res);
 
@@ -475,6 +534,10 @@ static int remove_hm_update_params(struct dpa_cls_hm *premove_hm);
 static int insert_hm_check_params(const struct dpa_cls_hm_insert_params
 	*insert_params);
 
+/*
+ * Prepares (creates or imports) the header manipulation nodes for an insert
+ * header manipulation op.
+ */
 static int insert_hm_prepare_nodes(struct dpa_cls_hm *pinsert_hm,
 				const struct dpa_cls_hm_insert_resources *res);
 
@@ -487,6 +550,10 @@ static int insert_hm_update_params(struct dpa_cls_hm *pinsert_hm);
 static int update_hm_check_params(const struct dpa_cls_hm_update_params
 	*update_params);
 
+/*
+ * Prepares (creates or imports) the header manipulation nodes for an update
+ * header manipulation op.
+ */
 static int update_hm_prepare_nodes(struct dpa_cls_hm *pupdate_hm,
 				const struct dpa_cls_hm_update_resources *res);
 
@@ -499,9 +566,16 @@ static int update_hm_update_params(struct dpa_cls_hm *pupdate_hm);
 static int
 	vlan_hm_check_params(const struct dpa_cls_hm_vlan_params *vlan_params);
 
+/*
+ * Prepares (creates or imports) the header manipulation nodes for a VLAN
+ * specific header manipulation.
+ */
 static int vlan_hm_prepare_nodes(struct dpa_cls_hm *pvlan_hm,
 				const struct dpa_cls_hm_vlan_resources *res);
 
+/*
+ * Fills in the parameters of the header manipulation nodes
+ */
 static int vlan_hm_update_params(struct dpa_cls_hm *pvlan_hm);
 
 /*
diff --git a/include/linux/fsl_dpa_classifier.h b/include/linux/fsl_dpa_classifier.h
index 0e50b69..d466bee 100644
--- a/include/linux/fsl_dpa_classifier.h
+++ b/include/linux/fsl_dpa_classifier.h
@@ -67,54 +67,71 @@ enum dpa_cls_tbl_type {
 
 /* DPA Classifier Table Action Types */
 enum dpa_cls_tbl_action_type {
-	DPA_CLS_TBL_ACTION_NONE = 0,	/* Unspecified action */
-	DPA_CLS_TBL_ACTION_DROP,	/* Drop frame */
-	DPA_CLS_TBL_ACTION_ENQ,		/* Send frame into a frame queue
-					* (enqueue) */
-	DPA_CLS_TBL_ACTION_NEXT_TABLE	/* Go to another table and
-					* re-classify the packet */
+
+	/* Unspecified action */
+	DPA_CLS_TBL_ACTION_NONE = 0,
+
+	/* Drop frame */
+	DPA_CLS_TBL_ACTION_DROP,
+
+	/* Send frame into a frame queue (enqueue) */
+	DPA_CLS_TBL_ACTION_ENQ,
+
+	/* Go to another table and re-classify the packet */
+	DPA_CLS_TBL_ACTION_NEXT_TABLE
 };
 
 /* DPA Classifier Table Entry Modification Types */
 enum dpa_cls_tbl_modify_type {
-	DPA_CLS_TBL_MODIFY_KEY = 0,		/* Modify the entry key.
-						* This modification is
-						* supported only on exact match
-						* tables. */
-	DPA_CLS_TBL_MODIFY_ACTION,		/* Modify the entry action */
-	DPA_CLS_TBL_MODIFY_KEY_AND_ACTION	/* Modify the entry key and
-						* action. This modification is
-						* supported only on exact match
-						* tables. */
+
+	/*
+	 * Modify the entry key. This modification is supported only on exact
+	 * match tables.
+	 */
+	DPA_CLS_TBL_MODIFY_KEY = 0,
+
+	/* Modify the entry action */
+	DPA_CLS_TBL_MODIFY_ACTION,
+
+	/*
+	 * Modify the entry key and action. This modification is supported only
+	 * on exact match tables.
+	 */
+	DPA_CLS_TBL_MODIFY_KEY_AND_ACTION
 };
 
 /* DPA Classifier Table Entry Management Types */
 enum dpa_cls_tbl_entry_mgmt {
-	DPA_CLS_TBL_MANAGE_BY_KEY = 0,	/* Manage entries by key (shadow
-					* table). The shadow table consumes more
-					* RAM, but allows the user to do
-					* software lookups and refer to the
-					* table entries by their key as well as
-					* by their reference (Id) */
+	/*
+	 * Manage entries by key (shadow table). The shadow table consumes more
+	 * RAM, but allows the user to do software lookups and refer to the
+	 * table entries by their key as well as by their reference (Id)
+	 */
+	DPA_CLS_TBL_MANAGE_BY_KEY = 0,
 
-	DPA_CLS_TBL_MANAGE_BY_REF,	/* Manage entries by reference only
-					* (no shadow table). Saves memory and
-					* speeds up runtime operations, but the
-					* user cannot do software lookups and
-					* can only refer to the entries by
-					* their reference (Id) */
+	/*
+	 * Manage entries by reference only (no shadow table). Saves memory and
+	 * speeds up runtime operations, but the user cannot do software
+	 * lookups and can only refer to the entries by their reference (Id)
+	 */
+	DPA_CLS_TBL_MANAGE_BY_REF,
 };
 
 
 /* DPA Classifier HASH table parameters */
 struct dpa_cls_tbl_hash_params {
 
-	unsigned int	num_sets;	/* Number of sets (buckets) of the
-					* HASH table */
-	unsigned int	max_ways;	/* Number of ways of the HASH table
-					* (capability to resolve conflicts) */
-	unsigned int	hash_offs;	/* HASH offset */
-	uint8_t		key_size;	/* Key size in bytes */
+	/* Number of sets (buckets) of the HASH table */
+	unsigned int	num_sets;
+
+	/* Number of ways of the HASH table (capability to resolve conflicts) */
+	unsigned int	max_ways;
+
+	/* HASH offset */
+	unsigned int	hash_offs;
+
+	/* Key size in bytes */
+	uint8_t		key_size;
 };
 
 /* DPA Classifier indexed table parameters */
@@ -126,10 +143,14 @@ struct dpa_cls_tbl_indexed_params {
 /* DPA Classifier exact match table parameters */
 struct dpa_cls_tbl_exact_match_params {
 
-	unsigned int	entries_cnt;	/* Number of entries in the table */
-	uint8_t		key_size;	/* Key size in bytes */
-	int		use_priorities;	/* Use priorities for each entry in
-					* table if nonzero */
+	/* Number of entries in the table */
+	unsigned int	entries_cnt;
+
+	/* Key size in bytes */
+	uint8_t		key_size;
+
+	/* Use priorities for each entry in table if nonzero */
+	int		use_priorities;
 };
 
 /* DPA Classifier table parameters */
@@ -176,21 +197,19 @@ struct dpa_cls_tbl_params {
 /* Policer parameters */
 struct dpa_cls_tbl_policer_params {
 
-	int		modify_policer_params;	/* Nonzero if the default
-						* policer parameters will be
-						* overridden */
-	int		shared_profile;		/* Nonzero if this policer
-						* profile is shared between
-						* ports; relevant only if
-						* [modify_policer_params] is
-						* nonzero */
-	unsigned int	new_rel_profile_id;	/* this parameter should
-						* indicate the policer profile
-						* offset within the port's
-						* policer profiles or from the
-						* SHARED window; relevant only
-						* if [modify_policer_params]
-						* is nonzero */
+	/* [True] if the default policer parameters will be overridden */
+	bool		modify_policer_params;
+
+	/* [True] if this policer profile is shared between ports; relevant
+	 * only if [modify_policer_params] is set to [true]. */
+	bool		shared_profile;
+
+	/*
+	 * This parameter should indicate the policer profile offset within the
+	 * port's policer profiles or from the SHARED window; relevant only if
+	 * [modify_policer_params] is set to [true].
+	 */
+	unsigned int	new_rel_profile_id;
 };
 
 /* Enqueue action parameters */
@@ -232,8 +251,11 @@ struct dpa_cls_tbl_enq_action_desc {
 /* Action parameters to route to a new classifier table */
 struct dpa_cls_tbl_next_table_desc {
 
-	int		next_td; /* Descriptor of the next DPA Classifier
-				 * table to continue classification with */
+	/*
+	 * Descriptor of the next DPA Classifier table to continue
+	 * classification with
+	 */
+	int		next_td;
 };
 
 /* DPA Classifier action descriptor */
@@ -285,9 +307,8 @@ struct dpa_cls_tbl_entry_mod_params {
 /* DPA Classifier table entry statistics */
 struct dpa_cls_tbl_entry_stats {
 
-	uint64_t		total_pkts;	/* The total number of
-						* packets that have hit the
-						* entry */
+	/* The total number of packets that have hit the entry */
+	uint64_t		total_pkts;
 };
 
 
@@ -442,8 +463,12 @@ enum dpa_cls_hm_nat_proto {
 
 /* NAT operation type */
 enum dpa_cls_hm_nat_type {
+	/* Traditional NAT */
 	DPA_CLS_HM_NAT_TYPE_TRADITIONAL,
+
+	/* NAT w/ protocol translation */
 	DPA_CLS_HM_NAT_TYPE_NAT_PT,
+
 	DPA_CLS_HM_NAT_TYPE_LAST_ENTRY
 };
 
-- 
1.7.5.4

