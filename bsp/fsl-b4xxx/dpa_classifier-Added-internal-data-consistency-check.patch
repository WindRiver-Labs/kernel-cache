From fa53827b4f7502b05760828e9817160ee9a0571b Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Thu, 9 Aug 2012 16:12:51 +0000
Subject: [PATCH 280/518] dpa_classifier: Added internal data consistency
 checks for the header manipulation API

Added new data consistency checks in the functions implementing the
header manipulation API. Replaced the obsolete xx_assert with BUG_ON
wherever necessary.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   73 ++++++++++++++++-----
 1 files changed, 55 insertions(+), 18 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 225daad..2cc72fe 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -2237,6 +2237,8 @@ static inline void key_apply_mask(const struct dpa_offload_lookup_key *key,
 
 static int fwd_hm_check_params(const struct dpa_cls_hm_fwd_params *fwd_params)
 {
+	BUG_ON(!fwd_params);
+
 	if (fwd_params->out_if_type == DPA_CLS_HM_IF_TYPE_PPPoE) {
 		pr_err("ERROR: %s, %s (%d): Forwarding HM: PPPoE output "
 			"interface not supported yet.\n", __FILE__, __func__,
@@ -2250,7 +2252,7 @@ static int fwd_hm_check_params(const struct dpa_cls_hm_fwd_params *fwd_params)
 static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
 	*remove_params)
 {
-	xx_assert(remove_params);
+	BUG_ON(!remove_params);
 
 	switch (remove_params->type) {
 	case DPA_CLS_HM_REMOVE_ETHERNET:
@@ -2273,7 +2275,7 @@ static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
 static int insert_hm_check_params(const struct dpa_cls_hm_insert_params
 	*insert_params)
 {
-	xx_assert(insert_params);
+	BUG_ON(!insert_params);
 
 	switch (insert_params->type) {
 	case DPA_CLS_HM_INSERT_PPPoE:
@@ -2307,6 +2309,8 @@ static int update_hm_check_params(const struct dpa_cls_hm_update_params
 					DPA_CLS_HM_REPLACE_IPv6_BY_IPv4;
 	int ops;
 
+	BUG_ON(!update_params);
+
 	if ((update_params->op_flags == DPA_CLS_HM_UPDATE_NONE) &&
 		(update_params->ip_frag_params.mtu == 0)) {
 		pr_err("ERROR: %s, %s (%d): Refusing to create an empty update "
@@ -2382,7 +2386,7 @@ static int update_hm_check_params(const struct dpa_cls_hm_update_params
 static int
 	vlan_hm_check_params(const struct dpa_cls_hm_vlan_params *vlan_params)
 {
-	xx_assert(vlan_params);
+	BUG_ON(!vlan_params);
 
 	if ((vlan_params->type != DPA_CLS_HM_VLAN_EGRESS) &&
 		(vlan_params->egress.update_op !=
@@ -2424,6 +2428,8 @@ static int
 static int
 	mpls_hm_check_params(const struct dpa_cls_hm_mpls_params *mpls_params)
 {
+	BUG_ON(!mpls_params);
+
 	if ((mpls_params->type == DPA_CLS_HM_MPLS_INSERT_LABELS) &&
 		(mpls_params->num_labels > DPA_CLS_HM_MAX_MPLS_LABELS)) {
 		pr_err("ERROR: %s, %s (%d): MPLS HM: Can only insert a maximum "
@@ -2443,6 +2449,13 @@ static int import_hm_nodes_to_chain(void * const *node_array,
 	struct dpa_cls_hm_node *hm_node;
 	int i, j;
 
+	if (!num_nodes)
+		/* Nothing to do */
+		return 0;
+
+	BUG_ON(!node_array);
+	BUG_ON(!hm);
+
 	if (!list_empty(&hm->list_node)) {
 		pnext_hm = list_entry(hm->list_node.next,
 				struct dpa_cls_hm,
@@ -2555,6 +2568,8 @@ static int add_local_hm_nodes_to_chain(struct dpa_cls_hm *phm)
 	struct dpa_cls_hm *pcurrent;
 	int i;
 
+	BUG_ON(!phm);
+
 	if (!list_empty(&phm->list_node)) {
 		pnext_hm = list_entry(phm->list_node.next,
 				struct dpa_cls_hm,
@@ -2596,6 +2611,9 @@ static int init_hm_chain(void *fm_pcd, struct list_head *chain_head,
 	int err = 0;
 	struct dpa_cls_hm_node *pcurrent, *pnext;
 
+	BUG_ON(!chain_head);
+	BUG_ON(!current);
+
 	if (current->next != chain_head) {
 		/* Initialize the rest of the HM chain */
 		err = init_hm_chain(fm_pcd, chain_head, current->next);
@@ -2621,6 +2639,9 @@ int remove_hm_chain(struct list_head *chain_head, struct list_head *current)
 	int err = 0;
 	struct dpa_cls_hm_node *pcurrent;
 
+	BUG_ON(!chain_head);
+	BUG_ON(!current);
+
 	/* Remove the current node: */
 	pcurrent = list_entry(current, struct dpa_cls_hm_node, list_node);
 
@@ -2650,6 +2671,8 @@ static struct dpa_cls_hm_node
 	struct dpa_cls_hm_node *phm_node;
 	e_FmPcdManipHdrFieldUpdateType val;
 
+	BUG_ON(!list);
+
 	switch (type) {
 	case DPA_CLS_HM_NODE_IPv4_HDR_UPDATE:
 		val = e_FM_PCD_MANIP_HDR_FIELD_UPDATE_IPV4;
@@ -2683,6 +2706,8 @@ static int create_new_hm_op(int *hmd, int next_hmd)
 	struct dpa_cls_hm *hm;
 	struct dpa_cls_hm *next_hm;
 
+	BUG_ON(!hmd);
+
 	*hmd = DPA_OFFLD_DESC_NONE;
 
 	if (next_hmd != DPA_OFFLD_DESC_NONE)
@@ -2792,8 +2817,8 @@ static int import_nat_hm(struct dpa_cls_hm *pnat_hm,
 	void * const *phm_nodes;
 	int err;
 
-	xx_assert(pnat_hm);
-	xx_assert(res);
+	BUG_ON(!pnat_hm);
+	BUG_ON(!res);
 
 	phm_nodes = &res->l3_update_node;
 
@@ -2810,6 +2835,8 @@ static int init_nat_hm(struct dpa_cls_hm *pnat_hm)
 	struct dpa_cls_hm *pnext_hm = NULL;
 	struct dpa_cls_hm *pcurrent;
 
+	BUG_ON(!pnat_hm);
+
 	if (!list_empty(&pnat_hm->list_node))
 		pnext_hm = list_entry(pnat_hm->list_node.next,
 					struct dpa_cls_hm,
@@ -2979,8 +3006,8 @@ static int import_fwd_hm(struct dpa_cls_hm *pfwd_hm,
 	void * const *phm_nodes;
 	int err;
 
-	xx_assert(pfwd_hm);
-	xx_assert(res);
+	BUG_ON(!pfwd_hm);
+	BUG_ON(!res);
 
 	phm_nodes = &res->fwd_node;
 
@@ -2997,6 +3024,8 @@ static int init_fwd_hm(struct dpa_cls_hm *pfwd_hm)
 	uint8_t size;
 	uint8_t *pdata;
 
+	BUG_ON(!pfwd_hm);
+
 	/* Create a forwarding node: */
 	hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
 	if (!hm_node) {
@@ -3005,7 +3034,7 @@ static int init_fwd_hm(struct dpa_cls_hm *pfwd_hm)
 		return -ENOMEM;
 	}
 
-	xx_assert(pfwd_hm->params.fwd.out_if_type != DPA_CLS_HM_IF_TYPE_PPPoE);
+	BUG_ON(pfwd_hm->fwd_params.out_if_type == DPA_CLS_HM_IF_TYPE_PPPoE);
 
 	switch (pfwd_hm->fwd_params.out_if_type) {
 	case DPA_CLS_HM_IF_TYPE_ETHERNET:
@@ -3159,8 +3188,8 @@ static int import_remove_hm(struct dpa_cls_hm *premove_hm,
 	void * const *phm_nodes;
 	int err;
 
-	xx_assert(premove_hm);
-	xx_assert(res);
+	BUG_ON(!premove_hm);
+	BUG_ON(!res);
 
 	phm_nodes = &res->remove_node;
 
@@ -3175,6 +3204,8 @@ static int init_remove_hm(struct dpa_cls_hm *premove_hm)
 {
 	struct dpa_cls_hm_node *hm_node = NULL;
 
+	BUG_ON(!premove_hm);
+
 	/* Create a header remove node: */
 	hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
 	if (!hm_node) {
@@ -3287,8 +3318,8 @@ static int import_insert_hm(struct dpa_cls_hm *pinsert_hm,
 	void * const *phm_nodes;
 	int err;
 
-	xx_assert(pinsert_hm);
-	xx_assert(res);
+	BUG_ON(!pinsert_hm);
+	BUG_ON(!res);
 
 	phm_nodes = &res->insert_node;
 
@@ -3306,6 +3337,8 @@ static int init_insert_hm(struct dpa_cls_hm *pinsert_hm)
 	uint8_t offset = 0;
 	uint8_t *pdata;
 
+	BUG_ON(!pinsert_hm);
+
 	/* Create a header insert node: */
 	hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
 	if (!hm_node) {
@@ -3468,8 +3501,8 @@ static int import_update_hm(struct dpa_cls_hm *pupdate_hm,
 	void * const *phm_nodes;
 	int err;
 
-	xx_assert(pupdate_hm);
-	xx_assert(res);
+	BUG_ON(!pupdate_hm);
+	BUG_ON(!res);
 
 	phm_nodes = &res->update_node;
 
@@ -3487,6 +3520,8 @@ static int init_update_hm(struct dpa_cls_hm *pupdate_hm)
 	uint8_t size = 0;
 	int update_ops, replace_ops;
 
+	BUG_ON(!pupdate_hm);
+
 	/* Check if we can attach to an existing update node */
 	if (!list_empty(&pupdate_hm->list_node)) {
 		pnext_hm = list_entry(pupdate_hm->list_node.next,
@@ -3846,8 +3881,8 @@ static int import_vlan_hm(struct dpa_cls_hm *pvlan_hm,
 	void * const *phm_nodes;
 	int err;
 
-	xx_assert(pvlan_hm);
-	xx_assert(res);
+	BUG_ON(!pvlan_hm);
+	BUG_ON(!res);
 
 	phm_nodes = &res->vlan_node;
 
@@ -3864,6 +3899,8 @@ static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm)
 	uint8_t size;
 	uint8_t *pdata;
 
+	BUG_ON(!pvlan_hm);
+
 	/* Create a header manip node for VLAN: */
 	hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
 	if (!hm_node) {
@@ -4038,8 +4075,8 @@ static int import_mpls_hm(struct dpa_cls_hm *pmpls_hm,
 	void * const *phm_nodes;
 	int err;
 
-	xx_assert(pmpls_hm);
-	xx_assert(res);
+	BUG_ON(!pmpls_hm);
+	BUG_ON(!res);
 
 	phm_nodes = &res->ins_rm_node;
 
-- 
1.7.5.4

