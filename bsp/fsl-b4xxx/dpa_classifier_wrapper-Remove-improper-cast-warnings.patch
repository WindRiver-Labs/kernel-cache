From 2e3b3b0c3f78d9a08cb9d673c9a1615d91fcdd76 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Fri, 9 Nov 2012 19:05:15 +0000
Subject: [PATCH 378/518] dpa_classifier_wrapper: Remove improper cast
 warnings at build time in 64bit mode

The dpa_classifier wrapper was issuing a series of warnings at build
time related to casting a pointer to an integer. This only happened
when compiling the Linux kernel for 64bits machines, where the addresses
are 64 bits long. Although the program logic is correct, casting to a
32 bit integer was losing data and the compiler kept warning about that.

Changed the cast to long int to avoid losing data when working with
64 bit long addresses.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |   14 +++++++-------
 1 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 0cd8206..ec14359 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -664,7 +664,7 @@ static long do_ioctl_set_remove_hm(unsigned long args, bool compat_mode)
 		__LINE__));
 
 	/* Translate FM_PCD file descriptor */
-	if ((int)kparam.rm_params.fm_pcd >= 0) {
+	if ((long)kparam.rm_params.fm_pcd >= 0) {
 		kparam.rm_params.fm_pcd =
 			translate_fm_pcd_handle(kparam.rm_params.fm_pcd);
 		if (!kparam.rm_params.fm_pcd)
@@ -777,7 +777,7 @@ static long do_ioctl_set_insert_hm(unsigned long args, bool compat_mode)
 		__LINE__));
 
 	/* Translate FM_PCD file descriptor */
-	if ((int)kparam.ins_params.fm_pcd >= 0) {
+	if ((long)kparam.ins_params.fm_pcd >= 0) {
 		kparam.ins_params.fm_pcd =
 			translate_fm_pcd_handle(kparam.ins_params.fm_pcd);
 		if (!kparam.ins_params.fm_pcd)
@@ -926,7 +926,7 @@ static long  do_ioctl_set_vlan_hm(unsigned long args, bool compat_mode)
 		__LINE__));
 
 	/* Translate FM_PCD file descriptor */
-	if ((int)kparam.vlan_params.fm_pcd >= 0) {
+	if ((long)kparam.vlan_params.fm_pcd >= 0) {
 		kparam.vlan_params.fm_pcd =
 			translate_fm_pcd_handle(kparam.vlan_params.fm_pcd);
 		if (!kparam.vlan_params.fm_pcd)
@@ -1038,7 +1038,7 @@ static long do_ioctl_set_nat_hm(unsigned long args, bool compat_mode)
 		__LINE__));
 
 	/* Translate FM_PCD file descriptor */
-	if ((int)kparam.nat_params.fm_pcd >= 0) {
+	if ((long)kparam.nat_params.fm_pcd >= 0) {
 		kparam.nat_params.fm_pcd =
 			translate_fm_pcd_handle(kparam.nat_params.fm_pcd);
 		if (!kparam.nat_params.fm_pcd)
@@ -1149,7 +1149,7 @@ static long do_ioctl_set_update_hm(unsigned long args, bool compat_mode)
 		__LINE__));
 
 	/* Translate FM_PCD file descriptor */
-	if ((int)kparam.update_params.fm_pcd >= 0) {
+	if ((long)kparam.update_params.fm_pcd >= 0) {
 		kparam.update_params.fm_pcd =
 			translate_fm_pcd_handle(kparam.update_params.fm_pcd);
 		if (!kparam.update_params.fm_pcd)
@@ -1261,7 +1261,7 @@ static long do_ioctl_set_fwd_hm(unsigned long args, bool compat_mode)
 		__LINE__));
 
 	/* Translate FM_PCD file descriptor */
-	if ((int)kparam.fwd_params.fm_pcd >= 0) {
+	if ((long)kparam.fwd_params.fm_pcd >= 0) {
 		kparam.fwd_params.fm_pcd =
 			translate_fm_pcd_handle(kparam.fwd_params.fm_pcd);
 		if (!kparam.fwd_params.fm_pcd)
@@ -1373,7 +1373,7 @@ static long  do_ioctl_set_mpls_hm(unsigned long args, bool compat_mode)
 		__LINE__));
 
 	/* Translate FM_PCD file descriptor */
-	if ((int)kparam.mpls_params.fm_pcd >= 0) {
+	if ((long)kparam.mpls_params.fm_pcd >= 0) {
 		kparam.mpls_params.fm_pcd =
 			translate_fm_pcd_handle(kparam.mpls_params.fm_pcd);
 		if (!kparam.mpls_params.fm_pcd)
-- 
1.7.5.4

