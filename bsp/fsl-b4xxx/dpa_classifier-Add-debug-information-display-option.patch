From 8826911ab2c1abf12ce7ed84a13526a8fbe24367 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Mon, 29 Oct 2012 21:37:06 +0000
Subject: [PATCH 349/518] dpa_classifier: Add debug information display option

Added a series of debug messages that can be enabled using the build
symbol DPA_CLASSIFIER_DEBUG. This may improve debugging time.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |  171 ++++++++++++++++++++++
 1 files changed, 171 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 19906a8..70f4c83b 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -56,6 +56,12 @@
 #define ETHERTYPE_OFFSET					12
 #define ETHERTYPE_SIZE						2 /* bytes */
 
+#ifdef DPA_CLASSIFIER_DEBUG
+#define dpa_cls_dbg(message) printk message
+#else
+#define dpa_cls_dbg(message)
+#endif /* DPA_CLASSIFIER_DEBUG */
+
 
 DEFINE_MUTEX(table_array_lock);
 DEFINE_MUTEX(hm_array_lock);
@@ -101,6 +107,9 @@ int dpa_classif_table_create(const struct dpa_cls_tbl_params	*params,
 	struct dpa_cls_table *ptable;
 	unsigned int i;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!params) {
 		pr_err("ERROR: %s, %s (%d): \"params\" cannot be NULL.\n",
@@ -268,6 +277,9 @@ int dpa_classif_table_create(const struct dpa_cls_tbl_params	*params,
 	if (err < 0)
 		goto dpa_classif_table_create_error;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 
 dpa_classif_table_create_error:
@@ -297,6 +309,9 @@ int dpa_classif_table_free(int td)
 	int err;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	lock_desc_table(&table_array);
 	ptable = desc_to_object(&table_array, td);
 	if (!ptable) {
@@ -342,6 +357,9 @@ int dpa_classif_table_free(int td)
 
 	kfree(ptable);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_free);
@@ -354,6 +372,9 @@ int dpa_classif_table_modify_miss_action(int			td,
 	t_FmPcdCcNextEngineParams miss_engine_params;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!miss_action) {
 		pr_err("ERROR: %s, %s (%d): \"miss_action\" cannot be NULL.\n",
@@ -417,6 +438,9 @@ int dpa_classif_table_modify_miss_action(int			td,
 	}
 	mutex_unlock(&ptable->access);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 EXPORT_SYMBOL(dpa_classif_table_modify_miss_action);
@@ -430,6 +454,9 @@ int dpa_classif_table_insert_entry(int				td,
 	int err = 0;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!key) {
 		pr_err("ERROR: %s, %s (%d): \"key\" cannot be NULL.\n",
@@ -517,6 +544,9 @@ int dpa_classif_table_insert_entry(int				td,
 		pr_err("\n");
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_insert_entry);
@@ -537,6 +567,9 @@ int dpa_classif_table_modify_entry_by_key(int			td,
 	uint8_t *new_mask;
 	t_FmPcdCcKeyParams key_params;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!key) {
 		pr_err("ERROR: %s, %s (%d): \"key\" cannot be NULL.\n",
@@ -813,6 +846,9 @@ int dpa_classif_table_modify_entry_by_key(int			td,
 		pr_err("\n");
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return ret;
 }
 EXPORT_SYMBOL(dpa_classif_table_modify_entry_by_key);
@@ -838,6 +874,9 @@ int dpa_classif_table_modify_entry_by_ref(int			td,
 	int err;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	lock_desc_table(&table_array);
 	ptable = desc_to_object(&table_array, td);
 	if (!ptable) {
@@ -867,6 +906,9 @@ int dpa_classif_table_modify_entry_by_ref(int			td,
 			"table td=%d. Entry ref=%d.\n", __FILE__, __func__,
 			__LINE__, td, entry_id);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_modify_entry_by_ref);
@@ -891,6 +933,9 @@ static int table_modify_entry_by_ref(struct dpa_cls_table	*ptable,
 	t_Handle cc_node;
 	struct list_head *shadow_list_entry, *new_bucket_list;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!ptable);
 
 	/* Parameters sanity checks: */
@@ -1127,6 +1172,9 @@ static int table_modify_entry_by_ref(struct dpa_cls_table	*ptable,
 				sizeof(struct dpa_cls_tbl_action));
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
@@ -1143,6 +1191,9 @@ int dpa_classif_table_delete_entry_by_key(int				td,
 	struct list_head *list_current;
 	struct dpa_cls_tbl_entry *index_entry;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!key) {
 		pr_err("ERROR: %s, %s (%d): \"key\" cannot be NULL.\n",
@@ -1280,6 +1331,9 @@ int dpa_classif_table_delete_entry_by_key(int				td,
 		pr_err("\n");
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_delete_entry_by_key);
@@ -1289,6 +1343,9 @@ int dpa_classif_table_delete_entry_by_ref(int td, int entry_id)
 	int err;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	lock_desc_table(&table_array);
 	ptable = desc_to_object(&table_array, td);
 	if (!ptable) {
@@ -1307,6 +1364,9 @@ int dpa_classif_table_delete_entry_by_ref(int td, int entry_id)
 			"table td=%d. Entry ref=%d.\n", __FILE__, __func__,
 			__LINE__, td, entry_id);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_delete_entry_by_ref);
@@ -1323,6 +1383,9 @@ static int table_delete_entry_by_ref(struct dpa_cls_table *ptable, int entry_id)
 	struct dpa_cls_tbl_cc_node_info *int_cc_node;
 	struct dpa_cls_tbl_entry *index_entry;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!ptable);
 
 	/* Parameters sanity checks: */
@@ -1410,6 +1473,9 @@ static int table_delete_entry_by_ref(struct dpa_cls_table *ptable, int entry_id)
 
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
@@ -1422,6 +1488,9 @@ int dpa_classif_table_lookup_by_key(int				td,
 	struct dpa_cls_tbl_shadow_entry_indexed *shadow_entry_indexed;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!key) {
 		pr_err("ERROR: %s, %s (%d): \"key\" cannot be NULL.\n",
@@ -1485,6 +1554,10 @@ int dpa_classif_table_lookup_by_key(int				td,
 	}
 
 	mutex_unlock(&ptable->access);
+
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 EXPORT_SYMBOL(dpa_classif_table_lookup_by_key);
@@ -1498,6 +1571,9 @@ int dpa_classif_table_lookup_by_ref(int				td,
 	struct dpa_cls_tbl_shadow_entry_indexed *shadow_entry_indexed;
 	struct list_head *shadow_list_entry;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!action) {
 		pr_err("ERROR: %s, %s (%d): \"action\" cannot be NULL.\n",
@@ -1557,6 +1633,10 @@ int dpa_classif_table_lookup_by_ref(int				td,
 	}
 
 	mutex_unlock(&ptable->access);
+
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 EXPORT_SYMBOL(dpa_classif_table_lookup_by_ref);
@@ -1566,6 +1646,9 @@ int dpa_classif_table_flush(int td)
 	int err;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	lock_desc_table(&table_array);
 	ptable = desc_to_object(&table_array, td);
 	if (!ptable) {
@@ -1584,6 +1667,9 @@ int dpa_classif_table_flush(int td)
 			"type=%d.\n", __FILE__, __func__, __LINE__, td,
 			ptable->params.type);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_flush);
@@ -1599,6 +1685,9 @@ static int flush_table(struct dpa_cls_table *ptable)
 	struct dpa_cls_tbl_cc_node_info *int_cc_node;
 	struct dpa_cls_tbl_entry *index_entry;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	if ((ptable->params.type == DPA_CLS_TBL_HASH) &&
 			(ptable->params.prefilled_entries))
 		/* Flush not available for pre-filled HASH tables */
@@ -1668,6 +1757,9 @@ static int flush_table(struct dpa_cls_table *ptable)
 		}
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
@@ -1679,6 +1771,9 @@ int dpa_classif_table_get_entry_stats_by_key(int			td,
 	int err;
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!key) {
 		pr_err("ERROR: %s, %s (%d): \"key\" cannot be NULL.\n",
@@ -1744,6 +1839,9 @@ int dpa_classif_table_get_entry_stats_by_key(int			td,
 		pr_err("\n");
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_get_entry_stats_by_key);
@@ -1755,6 +1853,9 @@ int dpa_classif_table_get_entry_stats_by_ref(int		td,
 	struct dpa_cls_table *ptable;
 	int err;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	lock_desc_table(&table_array);
 	ptable = desc_to_object(&table_array, td);
 	if (!ptable) {
@@ -1773,6 +1874,9 @@ int dpa_classif_table_get_entry_stats_by_ref(int		td,
 			"table td=%d. Entry ref=%d.\n", __FILE__, __func__,
 			__LINE__, td, entry_id);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 EXPORT_SYMBOL(dpa_classif_table_get_entry_stats_by_ref);
@@ -1786,6 +1890,9 @@ static int table_get_entry_stats_by_ref(struct dpa_cls_table	*ptable,
 	t_Handle cc_node;
 	struct dpa_cls_tbl_entry *index_entry;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!ptable);
 
 	/* Parameters sanity checks: */
@@ -1814,6 +1921,9 @@ static int table_get_entry_stats_by_ref(struct dpa_cls_table	*ptable,
 	stats->total_pkts = (unsigned long)
 		FM_PCD_MatchTableGetKeyCounter(cc_node,	entry_index);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
@@ -1821,6 +1931,9 @@ int dpa_classif_table_get_params(int td, struct dpa_cls_tbl_params *params)
 {
 	struct dpa_cls_table *ptable;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	/* Parameters sanity checks: */
 	if (!params) {
 		pr_err("ERROR: %s, %s (%d): \"params\" cannot be NULL.\n",
@@ -1842,6 +1955,10 @@ int dpa_classif_table_get_params(int td, struct dpa_cls_tbl_params *params)
 	memcpy(params, &ptable->params, sizeof(struct dpa_cls_tbl_params));
 
 	mutex_unlock(&ptable->access);
+
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 EXPORT_SYMBOL(dpa_classif_table_get_params);
@@ -1892,6 +2009,9 @@ static int table_init_indexed(struct dpa_cls_table *cls_table)
 	t_Handle cc_node;
 	struct dpa_cls_tbl_shadow_entry_indexed *shadow_entry;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!cls_table);
 	BUG_ON(cls_table->params.type != DPA_CLS_TBL_INDEXED);
 	BUG_ON(cls_table->int_cc_nodes_count != 1);
@@ -1970,6 +2090,9 @@ static int table_init_indexed(struct dpa_cls_table *cls_table)
 		}
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
@@ -1980,6 +2103,9 @@ static int table_init_hash(struct dpa_cls_table *cls_table)
 	t_FmPcdCcNextEngineParams next_engine_params;
 	t_Handle cc_node;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!cls_table);
 	BUG_ON(cls_table->params.type != DPA_CLS_TBL_HASH);
 
@@ -2039,6 +2165,9 @@ static int table_init_hash(struct dpa_cls_table *cls_table)
 			+ 4) ;
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 
 table_init_hash_error:
@@ -2051,6 +2180,9 @@ static int table_init_exact_match(struct dpa_cls_table *cls_table)
 {
 	int err = 0;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!cls_table);
 	BUG_ON(cls_table->params.type != DPA_CLS_TBL_EXACT_MATCH);
 
@@ -2080,6 +2212,9 @@ static int table_init_exact_match(struct dpa_cls_table *cls_table)
 	}
 	INIT_LIST_HEAD(&cls_table->entry_list);
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 
 table_init_exact_match_error:
@@ -2093,6 +2228,9 @@ static int verify_table_params(const struct dpa_cls_tbl_params *params)
 	int err = 0;
 	unsigned int num_sets;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!params);
 
 	switch (params->type) {
@@ -2191,6 +2329,9 @@ static int verify_table_params(const struct dpa_cls_tbl_params *params)
 		err = -EINVAL;
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return err;
 }
 
@@ -2204,6 +2345,9 @@ static struct list_head *find_shadow_entry(const struct dpa_cls_table
 	struct dpa_cls_tbl_shadow_table *shadow_table;
 	uint8_t masked_key[DPA_OFFLD_MAXENTRYKEYSIZE];
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!cls_table);
 	BUG_ON(!key);
 	BUG_ON(!key->byte);
@@ -2256,6 +2400,9 @@ static struct list_head *find_shadow_entry(const struct dpa_cls_table
 	}
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	if (found)
 		return pos;
 
@@ -2280,6 +2427,9 @@ static int table_insert_entry_exact_match(struct dpa_cls_table	*cls_table,
 	struct dpa_cls_tbl_entry *index_entry;
 	struct list_head *list_current;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!cls_table);
 	BUG_ON(!key);
 	BUG_ON(!action);
@@ -2464,6 +2614,9 @@ static int table_insert_entry_exact_match(struct dpa_cls_table	*cls_table,
 	if (entry_id)
 		*entry_id = k;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
@@ -2484,6 +2637,9 @@ static int table_insert_entry_hash(struct dpa_cls_table		*cls_table,
 	struct list_head *list_current;
 	struct dpa_cls_tbl_entry *index_entry;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!cls_table);
 	BUG_ON(!key);
 	BUG_ON(!action);
@@ -2650,6 +2806,9 @@ static int table_insert_entry_hash(struct dpa_cls_table		*cls_table,
 	if (entry_id)
 		*entry_id = j;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
@@ -2660,6 +2819,9 @@ static int action_to_next_engine_params(const struct dpa_cls_tbl_action *action,
 	struct dpa_cls_hm *hm;
 	struct dpa_cls_hm_node *hm_node;
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!action);
 	BUG_ON(!next_engine_params);
 
@@ -2762,12 +2924,18 @@ static int action_to_next_engine_params(const struct dpa_cls_tbl_action *action,
 		return -EINVAL;
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
 static int next_engine_params_to_action(const t_FmPcdCcNextEngineParams
 	*next_engine_params, struct dpa_cls_tbl_action *action)
 {
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) -->\n", __func__,
+		__LINE__));
+
 	BUG_ON(!action);
 	BUG_ON(!next_engine_params);
 
@@ -2832,6 +3000,9 @@ static int next_engine_params_to_action(const t_FmPcdCcNextEngineParams
 		action->type = DPA_CLS_TBL_ACTION_NONE;
 	}
 
+	dpa_cls_dbg(("DEBUG: dpa_classifier %s (%d) <--\n", __func__,
+		__LINE__));
+
 	return 0;
 }
 
-- 
1.7.5.4

