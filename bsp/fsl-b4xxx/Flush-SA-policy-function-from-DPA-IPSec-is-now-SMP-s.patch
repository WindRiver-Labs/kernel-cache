From 6dfc0208c6b2a2e92a376fb8bc9159a3a9b34cf3 Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Fri, 18 May 2012 20:50:42 +0000
Subject: [PATCH 166/518] Flush SA policy function from DPA IPSec is now SMP
 safe

synchronized dpa_ipsec_sa_flush_policies
created sa_flush_policies which expects SA to be lock,
this function will be called from other parts.

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
Acked-by: Mihai Serb <mihai.serb@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c |   44 ++++++++++++++++++++-------
 1 files changed, 33 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index baba5ba..1ee5be5 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -3716,27 +3716,49 @@ int dpa_ipsec_sa_get_policies(int sa_id,
 }
 EXPORT_SYMBOL(dpa_ipsec_sa_get_policies);
 
+/* Expects that SA structure is locked */
+static int sa_flush_policies(struct dpa_ipsec_sa *sa)
+{
+	struct dpa_ipsec_policy_entry *pol_entry, *tmp;
+	int err = 0, ret = 0;
+
+	BUG_ON(!sa);
+
+	list_for_each_entry_safe(pol_entry, tmp, &sa->policy_headlist, node) {
+		err = remove_policy(sa, pol_entry);
+		if (err < 0) {
+			xx_pr_err("Failed remove policy entry SA %d\n", sa->id);
+			ret = -EAGAIN;
+			/* continue with the other policies even if error
+			 * occured for this policy */
+		}
+	}
+
+	return ret;
+}
+
 int dpa_ipsec_sa_flush_policies(int sa_id)
 {
-	struct dpa_ipsec_policy_entry *pol_entr, *tmp_pol_entr;
 	struct dpa_ipsec_sa *sa;
-	int err = 0;
+	int ret = 0;
 
 	sa = get_sa_from_sa_id(sa_id);
 	if (!sa) {
-		xx_pr_err("Invalid SA handle for sa id %d\n", sa_id);
+		xx_pr_err("Invalid SA handle for SA id %d\n", sa_id);
 		return -EINVAL;
 	}
 
-	list_for_each_entry_safe(pol_entr, tmp_pol_entr, &sa->policy_headlist,
-				 node) {
-		err = remove_policy(sa, pol_entr);
-		if (err < 0) {
-			xx_pr_err("Couldn't remove policy entry");
-			return err;
+	ret = mutex_trylock(&sa->lock);
+	if (ret == 0) {
+		xx_pr_err("Failed to acquire lock for SA %d\n", sa->id);
+		return -EBUSY;
 		}
-	}
-	return 0;
+
+	ret = sa_flush_policies(sa);
+
+	mutex_unlock(&sa->lock);
+
+	return ret;
 }
 EXPORT_SYMBOL(dpa_ipsec_sa_flush_policies);
 
-- 
1.7.5.4

