From 532bceec7178095b5c45f12b069c61bfff50e9aa Mon Sep 17 00:00:00 2001
From: Aurelian Zanoschi <aurelian.zanoschi@freescale.com>
Date: Thu, 6 Dec 2012 22:06:03 +0000
Subject: [PATCH 423/518] dpa_stats: Cosmetics in print area of module

Done some cosmetics for the pr_error in module and wrapper

Signed-off-by: Aurelian Zanoschi <aurelian.zanoschi@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_stats.c     |   60 +++++++++++-----------
 drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c |   44 ++++++++--------
 2 files changed, 52 insertions(+), 52 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.c b/drivers/staging/fsl_dpa_offload/dpa_stats.c
index 0c53074..1bda3e1 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.c
@@ -213,7 +213,7 @@ static int get_new_cnt(struct dpa_stats *dpa_stats,
 			break;
 
 	if (i == dpa_stats->config.max_counters) {
-		pr_err("All counters have been used");
+		pr_err("All counters have been used\n");
 		cq_put_4bytes(dpa_stats->cnt_id_cq, id);
 		mutex_unlock(&dpa_stats->lock);
 		return -EDOM;
@@ -260,7 +260,7 @@ static int get_new_req(struct dpa_stats *dpa_stats,
 			break;
 
 	if (i == DPA_STATS_MAX_NUM_OF_REQUESTS) {
-		pr_err("All requests have been used");
+		pr_err("All requests have been used\n");
 		cq_put_4bytes(dpa_stats->req_id_cq, id);
 		mutex_unlock(&dpa_stats->lock);
 		return -EDOM;
@@ -1113,7 +1113,7 @@ static int set_cnt_reass_cb(struct dpa_stats_cnt_cb *cnt_cb,
 		(cnt_sel <= DPA_STATS_CNT_REASS_IPv4_ALL)) ||
 		((cnt_sel >= DPA_STATS_CNT_REASS_IPv6_FRAMES) &&
 		(cnt_sel <= DPA_STATS_CNT_REASS_IPv6_ALL)))) {
-		pr_err("Invalid Reassembly counter selection");
+		pr_err("Invalid Reassembly counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1161,7 +1161,7 @@ static int set_cnt_frag_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Fragmentation counter selection */
 	if ((cnt_sel == 0) || (cnt_sel > DPA_STATS_CNT_FRAG_ALL)) {
-		pr_err("Invalid Fragmentation counter selection");
+		pr_err("Invalid Fragmentation counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1201,7 +1201,7 @@ static int set_cnt_plcr_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Policer counter selection */
 	if ((cnt_sel == 0) || (cnt_sel > DPA_STATS_CNT_PLCR_ALL)) {
-		pr_err("Invalid Policer counter selection");
+		pr_err("Invalid Policer counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1254,7 +1254,7 @@ static int set_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 		frag_stats = 1;
 
 	} else {
-		pr_err("Invalid Classifier Table counter selection");
+		pr_err("Invalid Classifier Table counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1322,7 +1322,7 @@ static int set_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Classification Node counter selection */
 	if ((prm.cnt_sel == 0) ||  (prm.cnt_sel > DPA_STATS_CNT_CLASSIF_ALL)) {
-		pr_err("Invalid Classif_Node counter selection");
+		pr_err("Invalid Classif_Node counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1385,7 +1385,7 @@ static int set_cnt_ipsec_cb(struct dpa_stats_cnt_cb *cnt_cb,
 			DPA_STATS_CNT_IPSEC][DPA_STATS_CNT_NUM_OF_PACKETS];
 		cnt_cb->info.stats_num = 2;
 	} else {
-		pr_err("Invalid IPSec counter selection");
+		pr_err("Invalid IPSec counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1422,7 +1422,7 @@ static int set_cls_cnt_eth_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	/* Check Ethernet counter selection */
 	if ((params->eth_params.cnt_sel == 0) ||
 			(params->eth_params.cnt_sel > DPA_STATS_CNT_ETH_ALL)) {
-		pr_err("Invalid Ethernet counter selection");
+		pr_err("Invalid Ethernet counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1483,7 +1483,7 @@ static int set_cls_cnt_reass_cb(struct dpa_stats_cnt_cb *cnt_cb,
 		(cnt_sel <= DPA_STATS_CNT_REASS_IPv4_ALL)) ||
 		((cnt_sel >= DPA_STATS_CNT_REASS_IPv6_FRAMES) &&
 		(cnt_sel <= DPA_STATS_CNT_REASS_IPv6_ALL)))) {
-		pr_err("Invalid Reassembly counter selection");
+		pr_err("Invalid Reassembly counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1534,7 +1534,7 @@ static int set_cls_cnt_frag_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Fragmentation counter selection */
 	if ((cnt_sel == 0) || (cnt_sel > DPA_STATS_CNT_FRAG_ALL)) {
-		pr_err("Invalid Fragmentation counter selection");
+		pr_err("Invalid Fragmentation counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1577,7 +1577,7 @@ static int set_cls_cnt_plcr_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Policer counter selection */
 	if ((cnt_sel == 0) || (cnt_sel > DPA_STATS_CNT_PLCR_ALL)) {
-		pr_err("Invalid Policer counter selection");
+		pr_err("Invalid Policer counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1672,7 +1672,7 @@ static int set_cls_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Classifier Table descriptor */
 	if (params->classif_tbl_params.td == DPA_OFFLD_INVALID_OBJECT_ID) {
-		pr_err("Invalid Classifier Table descriptor");
+		pr_err("Invalid Classifier Table descriptor\n");
 		return -EINVAL;
 	}
 
@@ -1694,7 +1694,7 @@ static int set_cls_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 		frag_stats = 1;
 
 	} else {
-		pr_err("Invalid Classifier Table counter selection");
+		pr_err("Invalid Classifier Table counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1813,7 +1813,7 @@ static int set_cls_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Classification Cc Node counter selection */
 	if ((prm.cnt_sel == 0) ||  (prm.cnt_sel > DPA_STATS_CNT_CLASSIF_ALL)) {
-		pr_err("Invalid Classif_Node counter selection");
+		pr_err("Invalid Classif_Node counter selection\n");
 		return -EINVAL;
 	}
 
@@ -1879,7 +1879,7 @@ static int set_cls_cnt_ipsec_cb(struct dpa_stats_cnt_cb *cnt_cb,
 			DPA_STATS_CNT_IPSEC][DPA_STATS_CNT_NUM_OF_PACKETS];
 		cnt_cb->info.stats_num = 2;
 	} else {
-		pr_err("Invalid IPSec counter selection");
+		pr_err("Invalid IPSec counter selection\n");
 		return -EINVAL;
 	}
 
@@ -2565,7 +2565,7 @@ int dpa_stats_create_counter(int dpa_stats_id,
 
 		err = set_cnt_eth_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create ETH counter");
+			pr_err("Failed to create ETH counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2575,7 +2575,7 @@ int dpa_stats_create_counter(int dpa_stats_id,
 
 		err = set_cnt_reass_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Reassembly counter");
+			pr_err("Failed to create Reassembly counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2585,7 +2585,7 @@ int dpa_stats_create_counter(int dpa_stats_id,
 
 		err = set_cnt_frag_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Fragmentation counter");
+			pr_err("Failed to create Fragmentation counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2595,7 +2595,7 @@ int dpa_stats_create_counter(int dpa_stats_id,
 
 		err = set_cnt_plcr_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Policer counter");
+			pr_err("Failed to create Policer counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2604,7 +2604,7 @@ int dpa_stats_create_counter(int dpa_stats_id,
 
 		err = set_cnt_classif_tbl_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Classif Table counter");
+			pr_err("Failed to create Classif Table counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2613,7 +2613,7 @@ int dpa_stats_create_counter(int dpa_stats_id,
 
 		err = set_cnt_ccnode_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Classif Cc Node counter");
+			pr_err("Failed to create Classif Cc Node counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2623,7 +2623,7 @@ int dpa_stats_create_counter(int dpa_stats_id,
 
 		err = set_cnt_ipsec_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create IPSec counter");
+			pr_err("Failed to create IPSec counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2708,7 +2708,7 @@ int dpa_stats_create_class_counter(int dpa_stats_id,
 
 		err = set_cls_cnt_eth_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create ETH counter");
+			pr_err("Failed to create ETH counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2718,7 +2718,7 @@ int dpa_stats_create_class_counter(int dpa_stats_id,
 
 		err = set_cls_cnt_reass_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Reassembly counter");
+			pr_err("Failed to create Reassembly counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2728,7 +2728,7 @@ int dpa_stats_create_class_counter(int dpa_stats_id,
 
 		err = set_cls_cnt_frag_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Fragmentation counter");
+			pr_err("Failed to create Fragmentation counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2738,7 +2738,7 @@ int dpa_stats_create_class_counter(int dpa_stats_id,
 
 		err = set_cls_cnt_plcr_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Policer counter");
+			pr_err("Failed to create Policer counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2747,7 +2747,7 @@ int dpa_stats_create_class_counter(int dpa_stats_id,
 
 		err = set_cls_cnt_classif_tbl_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Classif Table counter");
+			pr_err("Failed to create Classif Table counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2756,7 +2756,7 @@ int dpa_stats_create_class_counter(int dpa_stats_id,
 
 		err = set_cls_cnt_ccnode_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create Classif Cc Node counter");
+			pr_err("Failed to create Classif Cc Node counter\n");
 			goto create_counter_err;
 		}
 		break;
@@ -2766,7 +2766,7 @@ int dpa_stats_create_class_counter(int dpa_stats_id,
 
 		err = set_cls_cnt_ipsec_cb(cnt_cb, params);
 		if (err != 0) {
-			pr_err("Failed to create IPSec counter");
+			pr_err("Failed to create IPSec counter\n");
 			goto create_counter_err;
 		}
 
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
index df57fed..5926a34 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_stats.c
@@ -160,7 +160,7 @@ int wrp_dpa_stats_init(void)
 	dpa_stats_cdev_major =
 	    register_chrdev(0, DPA_STATS_CDEV, &dpa_stats_fops);
 	if (dpa_stats_cdev_major < 0) {
-		pr_err("Could not register DPA Stats character device");
+		pr_err("Could not register DPA Stats character device\n");
 		return dpa_stats_cdev_major;
 	}
 
@@ -474,7 +474,7 @@ static long do_ioctl_stats_init(struct ioc_dpa_stats_params *prm)
 	prm->stats_params.storage_area = kzalloc(
 			prm->stats_params.storage_area_len, GFP_KERNEL);
 	if (!prm->stats_params.storage_area) {
-		pr_err("Could not allocate kernel storage area");
+		pr_err("Could not allocate kernel storage area\n");
 		return -ENOMEM;
 	}
 
@@ -564,7 +564,7 @@ static int do_ioctl_stats_create_counter(void *args)
 	long ret = 0;
 
 	if (copy_from_user(&prm, args, sizeof(prm))) {
-		pr_err("Could not copy Counter parameters");
+		pr_err("Could not copy Counter parameters\n");
 		return -EINVAL;
 	}
 
@@ -590,7 +590,7 @@ static int do_ioctl_stats_create_counter(void *args)
 		return ret;
 
 	if (copy_to_user((void *)args, &prm, sizeof(prm))) {
-		pr_err("Could not copy to user the Counter ID");
+		pr_err("Could not copy to user the Counter ID\n");
 		ret = -EINVAL;
 	}
 
@@ -611,7 +611,7 @@ static int do_ioctl_stats_compat_create_counter(void *args)
 	long ret = 0;
 
 	if (copy_from_user(&uprm, args, sizeof(uprm))) {
-		pr_err("Could not copy Counter parameters");
+		pr_err("Could not copy Counter parameters\n");
 		return -EINVAL;
 	}
 
@@ -673,7 +673,7 @@ static int do_ioctl_stats_compat_create_counter(void *args)
 	uprm.cnt_id = kprm.cnt_id;
 
 	if (copy_to_user((void *)args, &uprm, sizeof(uprm))) {
-		pr_err("Could not copy to user the Counter ID");
+		pr_err("Could not copy to user the Counter ID\n");
 		ret = -EINVAL;
 	}
 
@@ -702,7 +702,7 @@ static int do_ioctl_stats_create_class_counter(void *args)
 	long ret = 0;
 
 	if (copy_from_user(&prm, args, sizeof(prm))) {
-		pr_err("Could not copy Counter parameters");
+		pr_err("Could not copy Counter parameters\n");
 		return -EINVAL;
 	}
 
@@ -833,7 +833,7 @@ static int do_ioctl_stats_create_class_counter(void *args)
 		return ret;
 
 	if (copy_to_user((void *)args, &prm, sizeof(prm))) {
-		pr_err("Could not copy to user the Counter ID");
+		pr_err("Could not copy to user the Counter ID\n");
 		ret = -EINVAL;
 	}
 
@@ -891,7 +891,7 @@ static int do_ioctl_stats_compat_create_class_counter(void *args)
 	uint32_t i = 0;
 
 	if (copy_from_user(&uprm, args, sizeof(uprm))) {
-		pr_err("Could not copy Counter parameters");
+		pr_err("Could not copy Counter parameters\n");
 		return -EINVAL;
 	}
 
@@ -978,7 +978,7 @@ static int do_ioctl_stats_compat_create_class_counter(void *args)
 	uprm.cnt_id = kprm.cnt_id;
 
 	if (copy_to_user((void *)args, &uprm, sizeof(uprm))) {
-		pr_err("Could not copy to user the Counter ID");
+		pr_err("Could not copy to user the Counter ID\n");
 		ret = -EINVAL;
 	}
 
@@ -1204,7 +1204,7 @@ static int do_ioctl_stats_get_counters(void *args)
 	long ret = 0;
 
 	if (copy_from_user(&prm, args, sizeof(prm))) {
-		pr_err("Could not copy Request parameters");
+		pr_err("Could not copy Request parameters\n");
 		return -EINVAL;
 	}
 
@@ -1257,7 +1257,7 @@ static int do_ioctl_stats_get_counters(void *args)
 		}
 
 		if (copy_to_user((void *)args, &prm, sizeof(prm))) {
-			pr_err("Could not copy to user the Counter ID");
+			pr_err("Could not copy to user the Counter ID\n");
 			ret = -EINVAL;
 		}
 	}
@@ -1273,7 +1273,7 @@ static int do_ioctl_stats_compat_get_counters(void *args)
 	long ret = 0;
 
 	if (copy_from_user(&uprm, args, sizeof(uprm))) {
-		pr_err("Could not copy Request parameters");
+		pr_err("Could not copy Request parameters\n");
 		return -EINVAL;
 	}
 
@@ -1335,7 +1335,7 @@ static int do_ioctl_stats_compat_get_counters(void *args)
 		uprm.cnts_len = kprm.cnts_len;
 
 		if (copy_to_user((void *)args, &uprm, sizeof(uprm))) {
-			pr_err("Could not copy to user the Counter ID");
+			pr_err("Could not copy to user the Counter ID\n");
 			ret = -EINVAL;
 		}
 	}
@@ -1351,7 +1351,7 @@ static int do_ioctl_stats_reset_counters(void *args)
 	long ret = 0;
 
 	if (copy_from_user(&prm, args, sizeof(prm))) {
-		pr_err("Could not copy Counters Reset parameters");
+		pr_err("Could not copy Counters Reset parameters\n");
 		return -EINVAL;
 	}
 
@@ -1396,7 +1396,7 @@ static int do_ioctl_stats_compat_reset_counters(void *args)
 	long ret = 0;
 
 	if (copy_from_user(&uprm, args, sizeof(uprm))) {
-		pr_err("Could not copy Counters Reset parameters");
+		pr_err("Could not copy Counters Reset parameters\n");
 		return -EINVAL;
 	}
 
@@ -1448,7 +1448,7 @@ static long wrp_dpa_stats_do_ioctl(struct file *filp, unsigned int cmd,
 
 		/* Copy parameters from user-space */
 		if (copy_from_user(&kparam, (void *) args, sizeof(kparam))) {
-			pr_err("Could not read dpa_stats_init user space args");
+			pr_err("Could not read dpa_stats_init user space args\n");
 			return -EBUSY;
 		}
 
@@ -1458,7 +1458,7 @@ static long wrp_dpa_stats_do_ioctl(struct file *filp, unsigned int cmd,
 
 		/* Copy paramters to user-space */
 		if (copy_to_user((void *) args, &kparam, sizeof(kparam))) {
-			pr_err("Could not write dpa_stats_init result");
+			pr_err("Could not write dpa_stats_init result\n");
 			return -EBUSY;
 		}
 		break;
@@ -1487,7 +1487,7 @@ static long wrp_dpa_stats_do_ioctl(struct file *filp, unsigned int cmd,
 		int dpa_stats_cnt_id;
 		if (copy_from_user(&dpa_stats_cnt_id, (int *)args,
 				    sizeof(int))) {
-			pr_err("Could not copy parameters");
+			pr_err("Could not copy parameters\n");
 			return -EINVAL;
 		}
 
@@ -1529,7 +1529,7 @@ static long wrp_dpa_stats_do_compat_ioctl(struct file *filp, unsigned int cmd,
 
 		/* Copy parameters from user space */
 		if (copy_from_user(&uparam, (void *) args, sizeof(uparam))) {
-			pr_err("Could not read dpa_stats_init user space args");
+			pr_err("Could not read dpa_stats_init user space args\n");
 			return -EBUSY;
 		}
 		dpa_stats_init_compatcpy(&kparam, &uparam);
@@ -1541,7 +1541,7 @@ static long wrp_dpa_stats_do_compat_ioctl(struct file *filp, unsigned int cmd,
 		/* Copy result to user-space */
 		uparam.dpa_stats_id = kparam.dpa_stats_id;
 		if (copy_to_user((void *) args, &uparam, sizeof(uparam))) {
-			pr_err("Could not write dpa_stats_init result");
+			pr_err("Could not write dpa_stats_init result\n");
 			return -EBUSY;
 		}
 		break;
@@ -1571,7 +1571,7 @@ static long wrp_dpa_stats_do_compat_ioctl(struct file *filp, unsigned int cmd,
 
 		if (copy_from_user(&dpa_stats_cnt_id, (int *)args,
 				    sizeof(int))) {
-			pr_err("Could not copy parameters");
+			pr_err("Could not copy parameters\n");
 			return -EINVAL;
 		}
 
-- 
1.7.5.4

