From dd547b1a3a7b27ef4c42bd2c024b64b596baa49b Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Tue, 16 Apr 2013 11:06:52 +0800
Subject: [PATCH 14/36] powerpc/usb: Force FS connect for HS devices

Workaround for USB errata A-005275. Incoming packets are
randomly corrucpted by h/w resulting in varying errors.
Makes FS as default mode by
        - Disabling HS chirp signalling
        - Forcing EPS field of all packets to FS

This errata does not affect FS mode.

Forces all HS devices to connect in FS mode for all socs
affected by this errata:
P3041 and P2041 rev 1.0 and 1.1
P5020 and P5010 rev 1.0 and 2.0
P5040 and P1010 rev 1.0

Workaround can be disabled by selecting "CONFIG_USB_FSL_OVERRIDE_A_005275"
in menuconfig

Signed-off-by: Ramneek Mehresh <ramneek.mehresh@freescale.com>
Signed-off-by: Andy Fleming <afleming@freescale.com>
[Grabbed from the branch, LINUX_IR5.3.0_ALPHA, of
https://git.freescale.com/git-private/cgit.cgi/ppc/dpaa-offload/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/include/asm/mpc85xx.h |   13 ++++++++++++-
 drivers/usb/host/Kconfig           |   10 ++++++++++
 drivers/usb/host/ehci-fsl.c        |    8 ++++++++
 drivers/usb/host/ehci-hub.c        |    5 +++++
 drivers/usb/host/ehci-q.c          |    6 +++++-
 drivers/usb/host/ehci.h            |   10 ++++++++++
 drivers/usb/host/fsl-mph-dr-of.c   |   33 +++++++++++++++++++++++++++++++++
 include/linux/fsl_devices.h        |    2 ++
 8 files changed, 85 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/include/asm/mpc85xx.h b/arch/powerpc/include/asm/mpc85xx.h
index fafca9f5..cf67c92 100644
--- a/arch/powerpc/include/asm/mpc85xx.h
+++ b/arch/powerpc/include/asm/mpc85xx.h
@@ -52,7 +52,18 @@
 #define SVR_8569_E	0x808800
 #define SVR_8572	0x80E000
 #define SVR_8572_E	0x80E800
-
+#define SVR_P1010	0x80F900
+#define SVR_P1010_E	0x80F100
+#define SVR_P5040	0x820400
+#define SVR_P5040_E	0x820B00
+#define SVR_P5010	0x822100
+#define SVR_P5010_E	0x822900
+#define SVR_P5020	0x822000
+#define SVR_P5020_E	0x822800
+#define SVR_P2041	0x821001
+#define SVR_P2041_E	0x821801
+#define SVR_P3041	0x821103
+#define SVR_P3041_E	0x821903
 
 static inline int fsl_svr_is(u32 svr)
 {
diff --git a/drivers/usb/host/Kconfig b/drivers/usb/host/Kconfig
index c532b6e..4664486 100644
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@ -182,6 +182,16 @@ config USB_EHCI_FSL
 	---help---
 	  Variation of ARC USB block used in some Freescale chips.
 
+config USB_FSL_OVERRIDE_A_005275
+	bool "Override Full Speed as default mode for socs affected by erratum-A_005275"
+	depends on USB_EHCI_HCD && USB_EHCI_FSL && FSL_SOC
+	default n
+	---help---
+	 On chips potentially affected by erratum A-005275, we force full
+	 speed operation, as high speed may be unreliable. If you know your
+	 chip is unaffected by this erratum, say Y to override, the workaround
+	 and allow high speed operation. If not sure, say N.
+
 config USB_EHCI_MXC
 	bool "Support for Freescale i.MX on-chip EHCI USB controller"
 	depends on USB_EHCI_HCD && ARCH_MXC
diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index a40ec46..c85c0c7 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -308,6 +308,14 @@ static int ehci_fsl_usb_setup(struct ehci_hcd *ehci)
 		out_be32(non_ehci + FSL_SOC_USB_SNOOP2, 0x80000000 | SNOOP_SIZE_2GB);
 	}
 
+	/* Deal with USB Erratum USB A-005275
+	 * Packet corruption in HS mode
+	 */
+#ifndef CONFIG_USB_FSL_OVERRIDE_A_005275
+	if (pdata->force_fs_mode == 1)
+		ehci->has_fsl_hs_errata = 1;
+#endif
+
 	if ((pdata->operating_mode == FSL_USB2_DR_HOST) ||
 			(pdata->operating_mode == FSL_USB2_DR_OTG))
 		if (ehci_fsl_setup_phy(hcd, pdata->phy_mode, 0))
diff --git a/drivers/usb/host/ehci-hub.c b/drivers/usb/host/ehci-hub.c
index 3cb52a9..976454d 100644
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@ -1035,6 +1035,11 @@ static int ehci_hub_control (
 				ehci->reset_done [wIndex] = jiffies
 						+ msecs_to_jiffies (50);
 			}
+
+			/* Force full-speed connect; disable HS Chirp */
+			if (ehci_has_fsl_hs_errata(ehci))
+				temp |= (1 << 24); /* set PFSC bit */
+
 			ehci_writel(ehci, temp, status_reg);
 			break;
 
diff --git a/drivers/usb/host/ehci-q.c b/drivers/usb/host/ehci-q.c
index 7261e8f..ed3c4f0 100644
--- a/drivers/usb/host/ehci-q.c
+++ b/drivers/usb/host/ehci-q.c
@@ -929,7 +929,11 @@ qh_make (
 		break;
 
 	case USB_SPEED_HIGH:		/* no TT involved */
-		info1 |= (2 << 12);	/* EPS "high" */
+		if (!ehci_has_fsl_hs_errata(ehci))
+			info1 |= (2 << 12);	/* EPS "high" */
+		else
+			info1 |= (0 << 12);	/* EPS "full speed" */
+
 		if (type == PIPE_CONTROL) {
 			info1 |= (EHCI_TUNE_RL_HS << 28);
 			info1 |= 64 << 16;	/* usb2 fixed maxpacket */
diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index 2694ed6..ad07fe6 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -138,6 +138,7 @@ struct ehci_hcd {			/* one per controller */
 	/* SILICON QUIRKS */
 	unsigned		no_selective_suspend:1;
 	unsigned		has_fsl_port_bug:1; /* FreeScale */
+	unsigned		has_fsl_hs_errata:1;	/* Freescale HS quirk */
 	unsigned		big_endian_mmio:1;
 	unsigned		big_endian_desc:1;
 	unsigned		big_endian_capbase:1;
@@ -613,6 +614,15 @@ ehci_port_speed(struct ehci_hcd *ehci, unsigned int portsc)
 #define	ehci_has_fsl_portno_bug(e)		(0)
 #endif
 
+#if defined(CONFIG_PPC_85xx) && !defined(CONFIG_USB_FSL_OVERRIDE_A_005275)
+/* Some Freescale processors have an erratum (USB A-005275) in which
+ * incoming packets get corrupted in HS mode
+ */
+#define ehci_has_fsl_hs_errata(e)	((e)->has_fsl_hs_errata)
+#else
+#define ehci_has_fsl_hs_errata(e)	(0)
+#endif
+
 /*
  * While most USB host controllers implement their registers in
  * little-endian format, a minority (celleb companion chip) implement
diff --git a/drivers/usb/host/fsl-mph-dr-of.c b/drivers/usb/host/fsl-mph-dr-of.c
index 667c948..313f170 100644
--- a/drivers/usb/host/fsl-mph-dr-of.c
+++ b/drivers/usb/host/fsl-mph-dr-of.c
@@ -17,6 +17,7 @@
 #include <linux/of_platform.h>
 #include <linux/clk.h>
 #include <linux/module.h>
+#include <asm/mpc85xx.h>
 
 struct fsl_usb2_dev_data {
 	char *dr_mode;		/* controller mode */
@@ -119,6 +120,33 @@ error:
 
 static const struct of_device_id fsl_usb2_mph_dr_of_match[];
 
+#ifndef CONFIG_USB_FSL_OVERRIDE_A_005275
+static int check_soc_ver(struct device_node *node)
+{
+	unsigned int svr = mfspr(SPRN_SVR);
+	int flag = 0;
+
+	/* Deal with USB Erratum USB A-005275
+	 * Packet corruption in HS mode, default to
+	 * FS mode for the following
+	 * P3041 and P2041 rev 1.0 and 1.1
+	 * P5020 and P5010 rev 1.0 and 2.0
+	 * P5040 and P1010 rev 1.0
+	 */
+	if ((fsl_svr_is(SVR_P3041)) || (fsl_svr_is(SVR_P3041_E)) ||
+		(fsl_svr_is(SVR_P2041)) || (fsl_svr_is(SVR_P2041_E)))
+		 flag = (IS_SVR_REV(svr, 1, 0)) || (IS_SVR_REV(svr, 1, 1));
+	else if ((fsl_svr_is(SVR_P5020)) || (fsl_svr_is(SVR_P5020_E)) ||
+			(fsl_svr_is(SVR_P5010)) || (fsl_svr_is(SVR_P5010_E)))
+		flag = (IS_SVR_REV(svr, 1, 0)) || (IS_SVR_REV(svr, 2, 0));
+	else if ((fsl_svr_is(SVR_P5040)) || (fsl_svr_is(SVR_P5040_E)) ||
+			(fsl_svr_is(SVR_P1010)) || (fsl_svr_is(SVR_P1010_E)))
+		flag = IS_SVR_REV(svr, 1, 0);
+
+	return flag;
+}
+#endif
+
 static int usb_get_ver_info(struct device_node *np)
 {
 	int ver = -1;
@@ -205,6 +233,11 @@ static int __devinit fsl_usb2_mph_dr_of_probe(struct platform_device *ofdev)
 	pdata->phy_mode = determine_usb_phy(prop);
 	pdata->controller_ver = usb_get_ver_info(np);
 
+#ifndef CONFIG_USB_FSL_OVERRIDE_A_005275
+	if (check_soc_ver(np))
+		pdata->force_fs_mode = 1;
+#endif
+
 	if (pdata->have_sysif_regs) {
 		if (pdata->controller_ver < 0) {
 			dev_warn(&ofdev->dev, "Could not get controller version\n");
diff --git a/include/linux/fsl_devices.h b/include/linux/fsl_devices.h
index 769ef42..033813e 100644
--- a/include/linux/fsl_devices.h
+++ b/include/linux/fsl_devices.h
@@ -175,6 +175,8 @@ struct fsl_usb2_platform_data {
 	u32		pmflags;	/* PM from otg or system */
 	spinlock_t lock;
 
+	unsigned	force_fs_mode:1;
+
 	/* register save area for suspend/resume */
 	u32		pm_command;
 	u32		pm_status;
-- 
1.7.5.4

