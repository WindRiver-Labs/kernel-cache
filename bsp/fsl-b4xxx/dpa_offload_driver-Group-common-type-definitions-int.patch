From 4bbd0675dc370faa5b6df126cab6d907c9fe8070 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Fri, 3 Aug 2012 23:32:58 +0000
Subject: [PATCH 225/518] dpa_offload_driver: Group common type definitions
 into a separate header file - fsl_dpa_offload.h

There are data type definitions which are used across all DPA
offloading driver components. For clarity and ease of use, these
data type definitions were grouped into a new header file which
can be included by each of the individual components.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |    4 +-
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c      |   12 +-
 include/linux/fsl_dpa_classifier.h               |    8 +-
 include/linux/fsl_dpa_offload.h                  |  125 ++++++++++++++++++++++
 4 files changed, 135 insertions(+), 14 deletions(-)
 create mode 100644 include/linux/fsl_dpa_offload.h

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 5eebe05..9c249d3 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -73,7 +73,7 @@ int dpa_classif_table_create(const struct dpa_cls_tbl_params	*params,
 	xx_sanity_check_return_value(params, "params", -EINVAL);
 	xx_sanity_check_return_value(td, "td", -EINVAL);
 
-	*td = -1;
+	*td = DPA_OFFLD_DESC_NONE;
 
 	err = verify_table_params(params);
 	if (err < 0)
@@ -188,7 +188,7 @@ dpa_classif_table_create_error:
 		put_descriptor(&table_array, *td);
 	}
 
-	*td = -1;
+	*td = DPA_OFFLD_DESC_NONE;
 
 	return err;
 }
diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index 5f6f78e..26a3307 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -206,7 +206,7 @@ static int check_ipsec_params(const struct dpa_ipsec_params *prms)
 	 */
 	for (i = 0; i < DPA_IPSEC_MAX_SUPPORTED_PROTOS; i++)
 		if (prms->pre_sec_out_params.dpa_cls_td[i] !=
-						DPA_CLS_INVALID_TABLE_DESC) {
+						DPA_OFFLD_DESC_NONE) {
 			/* verify that it is not an indexed table */
 			err = dpa_classif_table_get_params(
 				       prms->pre_sec_out_params.dpa_cls_td[i],
@@ -230,7 +230,7 @@ static int check_ipsec_params(const struct dpa_ipsec_params *prms)
 
 	/* post decryption SA classification table */
 	if (prms->post_sec_in_params.dpa_cls_td ==
-						  DPA_CLS_INVALID_TABLE_DESC) {
+						  DPA_OFFLD_DESC_NONE) {
 		pr_err("Specify a valid table for post decryption classification\n");
 		return -EINVAL;
 	}
@@ -400,7 +400,7 @@ static int create_inpol_cls_tbl(struct dpa_ipsec *dpa_ipsec,
 	BUG_ON(!cc_node);
 	BUG_ON(!td);
 
-	*td = DPA_CLS_INVALID_TABLE_DESC;
+	*td = DPA_OFFLD_DESC_NONE;
 
 	memset(&params, 0, sizeof(params));
 	params.fm_pcd = dpa_ipsec->config.fm_pcd;
@@ -423,7 +423,7 @@ static inline void destroy_inpol_cls_tbl(int td)
 {
 	int err;
 
-	if (td != DPA_CLS_INVALID_TABLE_DESC) {
+	if (td != DPA_OFFLD_DESC_NONE) {
 		err = dpa_classif_table_free(td);
 		if (err < 0)
 			pr_err("Could not free EM table\n");
@@ -1183,13 +1183,13 @@ static int update_outbound_policy(struct dpa_ipsec_sa *sa,
 	table_idx = GET_POL_CC_NODE_INDX(policy_selectors->protocol);
 	table = dpa_ipsec->config.pre_sec_out_params.dpa_cls_td[table_idx];
 
-	if (table == DPA_CLS_INVALID_TABLE_DESC) {
+	if (table == DPA_OFFLD_DESC_NONE) {
 		struct dpa_ipsec_pre_sec_out_params *pre_sec_out_params;
 		pre_sec_out_params = &dpa_ipsec->config.pre_sec_out_params;
 
 		if ((table_idx != DPA_IPSEC_PROTO_ANY) &&
 		    (pre_sec_out_params->dpa_cls_td[DPA_IPSEC_PROTO_ANY] !=
-				    DPA_CLS_INVALID_TABLE_DESC)) {
+				    DPA_OFFLD_DESC_NONE)) {
 			table =
 			    pre_sec_out_params->dpa_cls_td[DPA_IPSEC_PROTO_ANY];
 		} else {
diff --git a/include/linux/fsl_dpa_classifier.h b/include/linux/fsl_dpa_classifier.h
index cc02413..28a794b 100644
--- a/include/linux/fsl_dpa_classifier.h
+++ b/include/linux/fsl_dpa_classifier.h
@@ -40,9 +40,8 @@
 
 /* DPA offloading layer includes */
 #include "fsl_dpa_compat.h"
+#include "fsl_dpa_offload.h"
 
-/* Other includes */
-#include <linux/types.h>
 
 
 /* API functions, definitions and enums */
@@ -51,8 +50,6 @@
 /* DPA Classifier maximum size of a lookup key, in bytes */
 #define DPA_CLS_TBL_MAXENTRYKEYSIZE				56
 
-/* DPA Classifier invalid table descriptor */
-#define DPA_CLS_INVALID_TABLE_DESC				-1
 
 /* DPA Classifier Table Types */
 enum dpa_cls_tbl_type {
@@ -123,8 +120,7 @@ struct dpa_cls_tbl_exact_match_params {
 	unsigned int	entries_cnt;	/* Number of entries in the table */
 	uint8_t		key_size;	/* Key size in bytes */
 	int		use_priorities;	/* Use priorities for each entry in
-					* table if nonzero (this mode is not
-					* supported yet) */
+					* table if nonzero */
 };
 
 /* DPA Classifier table parameters */
diff --git a/include/linux/fsl_dpa_offload.h b/include/linux/fsl_dpa_offload.h
new file mode 100644
index 0000000..abeacbb
--- /dev/null
+++ b/include/linux/fsl_dpa_offload.h
@@ -0,0 +1,125 @@
+
+/* Copyright 2008-2012 Freescale Semiconductor, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * DPA Offloading Driver General Data Types.
+ */
+
+#ifndef __FSL_DPA_OFFLOAD_H
+#define __FSL_DPA_OFFLOAD_H
+
+
+#include "fsl_dpa_compat.h"
+#include <linux/if_ether.h>
+#include <linux/types.h>
+
+
+/* General definitions */
+#define DPA_OFFLD_IPv4_ADDR_LEN_BYTES				4
+#define DPA_OFFLD_IPv6_ADDR_LEN_BYTES				16
+#define DPA_OFFLD_IPv6_ADDR_LEN_WORDS				8
+#define DPA_OFFLD_IPv6_ADDR_LEN_LONG				4
+
+#define DPA_OFFLD_DESC_NONE					-1
+
+
+/* Description of the IPv4 address */
+union dpa_offload_ipv4_address {
+	/* Address as 32bit word */
+	uint32_t	word;
+
+	/* Address as byte array*/
+	uint8_t		byte[DPA_OFFLD_IPv4_ADDR_LEN_BYTES];
+};
+
+/* Description of the IPv6 address */
+union dpa_offload_ipv6_address {
+	/* Address as byte array*/
+	uint8_t		byte[DPA_OFFLD_IPv6_ADDR_LEN_BYTES];
+
+	/* Address as word array */
+	uint32_t	word[DPA_OFFLD_IPv6_ADDR_LEN_WORDS];
+
+	/* Address as long word */
+	uint64_t	lword[DPA_OFFLD_IPv6_ADDR_LEN_LONG];
+};
+
+struct dpa_offload_ip_address {
+	/*
+	 * IP version. Must be either 4 or 6. No other values are considered
+	 * valid.
+	 */
+	unsigned int		version;
+
+	union {
+		union dpa_offload_ipv4_address	ipv4;
+		union dpa_offload_ipv6_address	ipv6;
+	} addr;
+};
+
+/* Description of the well known PPPoE header */
+struct pppoe_header {
+	uint8_t			version:4;	/* Protocol version */
+	uint8_t			type:4;		/* Type */
+	uint8_t			code;		/* Packet type code */
+	uint16_t		sid;		/* Session Id */
+	uint16_t		length;		/* Payload size */
+};
+
+/* Description of the MPLS header */
+struct mpls_header {
+	uint32_t	label:20;		/* Label value */
+	uint32_t	exp:3;			/* Experimental */
+	uint32_t	s:1;			/* Bottom of stack */
+	uint32_t	ttl:8;			/* Time to live */
+};
+
+/* Description of the IPv6 header */
+struct ipv6_header {
+	uint32_t			version:4;	/* Version */
+	uint32_t			tc:8;		/* Traffic Class */
+	uint32_t			flow_label:20;	/* Label */
+	uint16_t			payload_len;	/* Payload size */
+	uint8_t				next_hdr;	/* Next protocol */
+	uint8_t				hop_limit;	/* Hop Limit */
+	union dpa_offload_ipv6_address	ipsa;		/* Source address */
+	union dpa_offload_ipv6_address	ipda;		/* Destination addr */
+};
+
+/* Description of the VLAN header */
+struct vlan_header {
+	uint16_t			tpid;
+	uint16_t			tci;
+};
+
+
+#endif /* __FSL_DPA_OFFLOAD_H */
-- 
1.7.5.4

