From c7128f255e87c4a337c336d9b010bcd1d169e295 Mon Sep 17 00:00:00 2001
From: Radu Bulie <radu.bulie@freescale.com>
Date: Mon, 25 Mar 2013 15:11:13 +0000
Subject: [PATCH 28/36] dpa_classifier: Render multicast component thread safe

Signed-off-by: Radu Bulie <radu.bulie@freescale.com>
[Grabbed from the branch, LINUX_IR5.3.0_ALPHA, of
https://git.freescale.com/git-private/cgit.cgi/ppc/dpaa-offload/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   13 ++++++++++---
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |    3 +++
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index 32ff4de..aacf8dc 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -7412,6 +7412,8 @@ int dpa_classif_mcast_create_group(
 		goto dpa_classif_mcast_create_group_error;
 	}
 
+	mutex_init(&pgroup->access);
+
 	if (group_params->prefilled_members > group_params->max_members) {
 		pr_err("\nERROR: %s, %s (%d): Number of prefilled members is "
 			"greater than the maximum number of members in group."
@@ -7561,6 +7563,7 @@ dpa_classif_mcast_create_group_error:
 	if (pgroup) {
 		kfree(pgroup->member_used);
 		kfree(pgroup->member_ids);
+		mutex_destroy(&pgroup->access);
 		kfree(pgroup);
 		put_descriptor(&mcast_grp_array, *grpd);
 	}
@@ -7613,6 +7616,7 @@ int dpa_classif_mcast_add_member(int grpd,
 
 	max_members = pgroup->group_params.max_members;
 	prefill_start = pgroup->group_params.prefilled_members;
+	mutex_lock(&pgroup->access);
 	for (member_id = prefill_start; member_id < max_members; member_id++)
 		if (pgroup->member_used[member_id] == false) {
 			*membrd = member_id;
@@ -7626,6 +7630,7 @@ int dpa_classif_mcast_add_member(int grpd,
 		pr_err("\nERROR: %s, %s (%d): Current member index  %d"
 			"is already in use .\n", __FILE__, __func__,
 			__LINE__, *membrd);
+		mutex_unlock(&pgroup->access);
 		return -ENOSPC;
 	}
 
@@ -7698,7 +7703,7 @@ int dpa_classif_mcast_add_member(int grpd,
 		err = -EINVAL;
 		goto dpa_classif_mcast_add_member_error;
 	}
-
+	mutex_unlock(&pgroup->access);
 	kfree(replic_grp_params);
 	return 0;
 
@@ -7710,7 +7715,7 @@ dpa_classif_mcast_add_member_error:
 
 	pgroup->member_ids[*membrd] = DPA_OFFLD_DESC_NONE;
 	pgroup->last_index--;
-
+	mutex_unlock(&pgroup->access);
 	kfree(replic_grp_params);
 
 	return err;
@@ -7752,6 +7757,7 @@ int dpa_classif_mcast_remove_member(int grpd, int membrd)
 		return -EINVAL;
 	}
 
+	mutex_lock(&pgroup->access);
 	pgroup->num_members--;
 	pgroup->member_used[membrd] = false;
 
@@ -7766,7 +7772,7 @@ int dpa_classif_mcast_remove_member(int grpd, int membrd)
 
 	pgroup->member_ids[membrd] = DPA_OFFLD_DESC_NONE;
 	pgroup->last_index--;
-
+	mutex_unlock(&pgroup->access);
 
 	return 0;
 }
@@ -7797,6 +7803,7 @@ int dpa_classif_mcast_free_group(int grpd)
 	kfree(pgroup->member_used);
 	kfree(pgroup->member_ids);
 	put_descriptor(&mcast_grp_array, grpd);
+	mutex_destroy(&pgroup->access);
 	kfree(pgroup);
 
 	return 0;
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index c74b2ac..30805c0 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -359,6 +359,9 @@ struct dpa_cls_mcast_group {
 	 * Group handle
 	 */
 	void		*group;
+
+	/* Access control object for the group to avoid race conditions. */
+	struct mutex				access;
 };
 #endif
 #ifdef __DPA_CLASSIFIER_C
-- 
1.7.5.4

