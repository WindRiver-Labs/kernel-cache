From 9f1c40b7e59c8ed3cba208479a763bc92a19b5bf Mon Sep 17 00:00:00 2001
From: Oren Katzengold <oren@freescale.com>
Date: Wed, 13 Mar 2013 15:48:04 +0000
Subject: [PATCH 066/518] fmd: Allow 2 ways of initializing VSP for offline
 ports

1) If the initialization is to be done inside the kernel, then the caller
   of fm_set_tx_port_params() will provide buffer pool parameters via the
   pool_param and num_pools fields inside the fm_port_params structure.

2) If the initialization is to be done in user space, the caller of
   fm_set_tx_port_params() will put the value 0 in fm_port_params->num_pools.
   In such case only FM_PORT_VSPAlloc() will be done and the initialization
   of the VSP is left to the user.

Signed-off-by: Oren Katzengold <oren@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../dpa/NetCommSw/src/wrapper/lnxwrp_fm.h          |    1 +
 .../dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c     |   55 ++++++++++++-------
 2 files changed, 36 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h
index b2dee57..37c52c7 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm.h
@@ -97,6 +97,7 @@ typedef struct {
     uint64_t                    baseAddr;               /* Port's *virtual* address */
     uint32_t                    memSize;
     t_WrpFmPortDevSettings      settings;
+    t_FmExtPools                opExtPools;
     uint8_t                     totalNumOfSchemes;
     uint8_t                     schemesBase;
     uint8_t                     numOfSchemesUsed;
diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c
index 0f83e8c..b8b993c 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/src/wrapper/lnxwrp_fm_port.c
@@ -485,7 +485,7 @@ struct device_node * GetFmPortAdvArgsDevTreeNode (struct device_node *fm_node,
             return port_node;
     	}
     }
- 
+
     return NULL;
 }
 
@@ -584,19 +584,20 @@ static t_Error CheckNSetFmPortAdvArgs (t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
     	if (WARN_ON(lenp != sizeof(uint32_t)*2))
             RETURN_ERROR(MINOR, E_INVALID_VALUE, NO_MSG);
 
-        if (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX || 
-            p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX_10G)
+        if ((p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX) ||
+            (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX_10G) ||
+            ((p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_OH_OFFLINE_PARSING) &&
+             p_LnxWrpFmPortDev->settings.frag_enabled))
             return E_OK;
-            
+
         memset(&portVSPAllocParams, 0, sizeof(portVSPAllocParams));
         memset(&fmVspParams, 0, sizeof(fmVspParams));
 
         portVSPAllocParams.numOfProfiles = (uint8_t)uint32_prop[0];
         portVSPAllocParams.dfltRelativeId = (uint8_t)uint32_prop[1];
+
         fmVspParams.h_Fm = p_LnxWrpFmDev->h_Dev;
-        memcpy(&fmVspParams.extBufPools,
-               &p_LnxWrpFmPortDev->settings.param.specificParams.rxParams.extBufPools,
-               sizeof(t_FmExtPools));
+
         fmVspParams.portParams.portType = p_LnxWrpFmPortDev->settings.param.portType;
         fmVspParams.portParams.portId   = p_LnxWrpFmPortDev->settings.param.portId;
         fmVspParams.relativeProfileId   = portVSPAllocParams.dfltRelativeId;
@@ -606,15 +607,30 @@ static t_Error CheckNSetFmPortAdvArgs (t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
             portId = fmVspParams.portParams.portId;
             if (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_RX_10G)
                 portId += FM_MAX_NUM_OF_1G_RX_PORTS;
-            portVSPAllocParams.h_FmTxPort = p_LnxWrpFmDev->txPorts[portId].h_Dev;
+            portVSPAllocParams.h_FmTxPort =
+                p_LnxWrpFmDev->txPorts[portId].h_Dev;
             fmVspParams.liodnOffset = 
                 p_LnxWrpFmDev->rxPorts[portId].settings.param.specificParams.rxParams.liodnOffset;
+            memcpy(&fmVspParams.extBufPools,
+                   &p_LnxWrpFmPortDev->settings.param.specificParams.rxParams.extBufPools,
+                   sizeof(t_FmExtPools));
+        }
+        else
+        {
+            memcpy(&fmVspParams.extBufPools,
+                   &p_LnxWrpFmPortDev->opExtPools,
+                   sizeof(t_FmExtPools));
         }
 
         if ((err = FM_PORT_VSPAlloc(p_LnxWrpFmPortDev->h_Dev,
                                     &portVSPAllocParams)) != E_OK)
             RETURN_ERROR(MINOR, err, NO_MSG);
 
+        /* We're initializing only the default VSP that are being used by the Linux-Ethernet-driver */
+        if ((p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_OH_OFFLINE_PARSING) &&
+            !p_LnxWrpFmPortDev->opExtPools.numOfPoolsUsed)
+            return E_OK;
+
         p_LnxWrpFmPortDev->h_DfltVsp = FM_VSP_Config(&fmVspParams);
         if (!p_LnxWrpFmPortDev->h_DfltVsp)
             RETURN_ERROR(MAJOR, E_INVALID_HANDLE, ("default-VSP for port!"));
@@ -743,10 +759,9 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
 					 NCSW_PARAMS(1,
 						(t_FmBufferPrefixContent *)))
 
-			if((p_LnxWrpFmPortDev->settings.param.portType ==
+			if ((p_LnxWrpFmPortDev->settings.param.portType ==
 				    e_FM_PORT_TYPE_OH_OFFLINE_PARSING) &&
-				   (p_LnxWrpFmPortDev->settings.
-						frag_enabled == TRUE)) {
+				   (p_LnxWrpFmPortDev->settings.frag_enabled == TRUE)) {
 
 				ADV_CONFIG_CHECK(p_LnxWrpFmPortDev->h_Dev,
 					FM_PORT_ConfigExtBufPools,
@@ -916,20 +931,20 @@ void fm_set_tx_port_params(struct fm_port *port,
 				    buffPrefixContent)));
 
 	/* oh port specific parameter (for fragmentation only) */
-	if ((params->frag_enable == TRUE) &&
-	    (p_LnxWrpFmPortDev->settings.param.portType ==
-	     e_FM_PORT_TYPE_OH_OFFLINE_PARSING)) {
-		t_FmExtPools opExtPools;
+	if ((p_LnxWrpFmPortDev->settings.param.portType ==
+	     e_FM_PORT_TYPE_OH_OFFLINE_PARSING) &&
+	     params->num_pools) {
 		int i;
 
-		memset(&opExtPools, 0, sizeof(opExtPools));
-		opExtPools.numOfPoolsUsed = params->num_pools;
+		p_LnxWrpFmPortDev->opExtPools.numOfPoolsUsed = params->num_pools;
 		for (i = 0; i < params->num_pools; i++) {
-			opExtPools.extBufPool[i].id = params->pool_param[i].id;
-			opExtPools.extBufPool[i].size = params->pool_param[i].size;
+			p_LnxWrpFmPortDev->opExtPools.extBufPool[i].id = params->pool_param[i].id;
+			p_LnxWrpFmPortDev->opExtPools.extBufPool[i].size = params->pool_param[i].size;
 		}
+
+		if (p_LnxWrpFmPortDev->settings.frag_enabled)
 		ADD_ADV_CONFIG_NO_RET(FM_PORT_ConfigExtBufPools,
-				      ARGS(1, (&opExtPools)));
+				      ARGS(1, (&p_LnxWrpFmPortDev->opExtPools)));
 	}
 
 	ADD_ADV_CONFIG_END InitFmPortDev(p_LnxWrpFmPortDev);
-- 
1.7.5.4

