From 1e523b01f2f07522ed3172e6cb0215b0f32c917b Mon Sep 17 00:00:00 2001
From: Radu Bulie <radu.bulie@freescale.com>
Date: Tue, 22 Jan 2013 15:54:22 +0000
Subject: [PATCH 462/518] dpa_classifier: Fix parameters copy function in
 compat mode for NAT type header manipulation

For traditional NAT header manip operation parameters transmitted through
ioctl were not copied.

Signed-off-by: Radu Bulie <radu.bulie@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |   46 +++++++++++---------
 1 files changed, 25 insertions(+), 21 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index aacf444..7a32c11 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -2768,28 +2768,32 @@ int dpa_cls_hm_nat_params_compatcpy(
 	kparam->nat_params.flags	= uparam->nat_params.flags;
 	kparam->nat_params.proto	= uparam->nat_params.proto;
 	kparam->nat_params.type		= uparam->nat_params.type;
-	kparam->nat_params.nat_pt.type	= uparam->nat_params.nat_pt.type;
-	type = kparam->nat_params.nat_pt.type;
 
-	switch (type) {
-	case DPA_CLS_HM_NAT_PT_IPv6_TO_IPv4:
-		kparam->nat_params.nat_pt.new_header.ipv4.options_size =
-			uparam->nat_params.nat_pt.new_header.ipv4.options_size;
-		kparam->nat_params.nat_pt.new_header.ipv4.options =
-			compat_ptr(uparam->nat_params.nat_pt.new_header.ipv4.
-				   options);
-		memcpy(&kparam->nat_params.nat_pt.new_header.ipv4.header,
-			&uparam->nat_params.nat_pt.new_header.ipv4.header,
-			sizeof(struct iphdr));
-		break;
-	case DPA_CLS_HM_NAT_PT_IPv4_TO_IPv6:
-		memcpy(&kparam->nat_params.nat_pt.new_header.ipv6,
-			&uparam->nat_params.nat_pt.new_header.ipv6,
-			sizeof(struct ipv6_header));
-		break;
-	default:
-		break;
-	}
+	if (kparam->nat_params.type == DPA_CLS_HM_NAT_TYPE_NAT_PT) {
+		kparam->nat_params.nat_pt.type = uparam->nat_params.nat_pt.type;
+		type = kparam->nat_params.nat_pt.type;
+		switch (type) {
+		case DPA_CLS_HM_NAT_PT_IPv6_TO_IPv4:
+			kparam->nat_params.nat_pt.new_header.ipv4.options_size =
+			 uparam->nat_params.nat_pt.new_header.ipv4.options_size;
+			kparam->nat_params.nat_pt.new_header.ipv4.options =
+			  compat_ptr(uparam->nat_params.nat_pt.new_header.ipv4.
+					   options);
+			memcpy(&kparam->nat_params.nat_pt.new_header.ipv4.
+				header, &uparam->nat_params.nat_pt.new_header.
+				ipv4.header, sizeof(struct iphdr));
+			break;
+		case DPA_CLS_HM_NAT_PT_IPv4_TO_IPv6:
+			memcpy(&kparam->nat_params.nat_pt.new_header.ipv6,
+				&uparam->nat_params.nat_pt.new_header.ipv6,
+				sizeof(struct ipv6_header));
+			break;
+		default:
+			break;
+		}
+	} else if (kparam->nat_params.type == DPA_CLS_HM_NAT_TYPE_TRADITIONAL)
+			memcpy(&kparam->nat_params.nat, &uparam->nat_params.nat,
+			      sizeof(struct dpa_cls_hm_traditional_nat_params));
 
 	kparam->nat_params.fm_pcd = compat_ptr(uparam->nat_params.fm_pcd);
 	kparam->nat_params.sport = uparam->nat_params.sport;
-- 
1.7.5.4

