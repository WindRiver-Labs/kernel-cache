From 229e371409e02bd9511c8056924c89893130cd2d Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Wed, 20 Feb 2013 20:10:03 +0000
Subject: [PATCH 451/518] dpa_classifier: Update support for MPLS specific
 header manipulation

The support for MPLS specific header manipulation was reorganized to
match the implementation of the other types of header manipulation.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |  110 ++++++++++++----------
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |   23 +++--
 2 files changed, 72 insertions(+), 61 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index df21562..972244b 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -5732,10 +5732,6 @@ int dpa_classif_set_mpls_hm(const struct dpa_cls_hm_mpls_params	*mpls_params,
 
 	*hmd = DPA_OFFLD_DESC_NONE;
 
-	pr_err("ERROR: %s, %s (%d): MPLS specific header manipulation is not "
-		"supported yet.\n", __FILE__, __func__, __LINE__);
-	return -ENOSYS;
-
 	err = mpls_hm_check_params(mpls_params);
 	if (err < 0) {
 		pr_err("ERROR: %s, %s (%d): Invalid MPLS specific HM "
@@ -5758,67 +5754,89 @@ int dpa_classif_set_mpls_hm(const struct dpa_cls_hm_mpls_params	*mpls_params,
 	/* Copy the VLAN specific HM parameters locally */
 	memcpy(&pmpls_hm->mpls_params, mpls_params, sizeof(*mpls_params));
 
-	if (res)
-		err = import_mpls_hm(pmpls_hm, res);
-	else {
-		err = init_mpls_hm(pmpls_hm);
-		if (err) {
-			dpa_classif_free_hm(*hmd);
-			*hmd = DPA_OFFLD_DESC_NONE;
-			return err;
-		}
+	err = mpls_hm_prepare_nodes(pmpls_hm, res);
+	if (err < 0) {
+		pr_err("ERROR: %s, %s (%d): Failed to acquire necessary HM "
+			"nodes.\n", __FILE__, __func__, __LINE__);
+		goto mpls_hm_error;
+	}
 
-		if (chain_head) {
-			/* Initialize low level HM ops chain */
-			err = init_hm_chain(pmpls_hm->mpls_params.fm_pcd,
-				pmpls_hm->hm_chain, pmpls_hm->hm_chain->next);
-			if (err < 0)
-				pr_err("ERROR: %s, %s (%d): Failed to "
-					"initialize low level HM chain.\n",
-					__FILE__, __func__, __LINE__);
-		}
+	err = mpls_hm_update_params(pmpls_hm);
+	if (err < 0) {
+		pr_err("ERROR: %s, %s (%d): Failed to update low level header "
+			"manipulation parameters.\n", __FILE__, __func__,
+			__LINE__);
+		goto mpls_hm_error;
 	}
 
-	if (err) {
-		dpa_classif_free_hm(*hmd);
-		*hmd = DPA_OFFLD_DESC_NONE;
+	if (chain_head) {
+		err = init_hm_chain(pmpls_hm->mpls_params.fm_pcd,
+				pmpls_hm->hm_chain,
+				pmpls_hm->hm_chain->next);
+		if (err < 0)
+			pr_err("ERROR: %s, %s (%d): Failed to initialize low "
+				"level HM chain.\n", __FILE__, __func__,
+				__LINE__);
 	}
 
 	return err;
+
+mpls_hm_error:
+
+	remove_hm_op(*hmd);
+
+	*hmd = DPA_OFFLD_DESC_NONE;
+
+	return err;
 }
 EXPORT_SYMBOL(dpa_classif_set_mpls_hm);
 
-static int import_mpls_hm(struct dpa_cls_hm *pmpls_hm,
+static int mpls_hm_prepare_nodes(struct dpa_cls_hm *pmpls_hm,
 				const struct dpa_cls_hm_mpls_resources *res)
 {
+	struct dpa_cls_hm_node *hm_node;
 	void * const *phm_nodes;
-	int err;
+	int err = 0;
 
 	BUG_ON(!pmpls_hm);
-	BUG_ON(!res);
 
-	phm_nodes = &res->ins_rm_node;
+	pmpls_hm->num_nodes = 1;
+
+	if (res) { /* Import HM nodes */
+		phm_nodes = &res->ins_rm_node;
+
+		err = import_hm_nodes_to_chain(phm_nodes,
+					pmpls_hm->num_nodes,
+					pmpls_hm);
+	} else { /* Create HM nodes */
+		hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
+		if (!hm_node) {
+			pr_err("ERROR: %s, %s (%d): Not enough memory for "
+				"header manip nodes.\n", __FILE__, __func__,
+				__LINE__);
+			return -ENOMEM;
+		}
 
-	err = import_hm_nodes_to_chain(phm_nodes, 1, pmpls_hm);
+		INIT_LIST_HEAD(&hm_node->list_node);
+		pmpls_hm->hm_node[0]	= hm_node;
 
-	/* Update here the hm nodes parameters */
+		add_local_hm_nodes_to_chain(pmpls_hm);
+	}
 
 	return err;
 }
 
-static int init_mpls_hm(struct dpa_cls_hm *pmpls_hm)
+static int mpls_hm_update_params(struct dpa_cls_hm *pmpls_hm)
 {
 	struct dpa_cls_hm_node *hm_node = NULL;
 	uint8_t size;
 	uint8_t *pdata;
 
-	/* Create a header manip node for MPLS: */
-	hm_node = kzalloc(sizeof(*hm_node), GFP_KERNEL);
-	if (!hm_node) {
-		pr_err("ERROR: %s, %s (%d): No more memory for header manip "
-			"nodes.\n", __FILE__, __func__, __LINE__);
-		return -ENOMEM;
-	}
+	BUG_ON(!pmpls_hm);
+	BUG_ON(pmpls_hm->num_nodes != 1);
+	BUG_ON(!pmpls_hm->hm_node[0]);
+
+	hm_node = pmpls_hm->hm_node[0];
 
 	hm_node->params.type = e_FM_PCD_MANIP_HDR;
 
@@ -5862,19 +5880,11 @@ static int init_mpls_hm(struct dpa_cls_hm *pmpls_hm)
 
 		break;
 	default:
-		kfree(hm_node);
-		pr_err("ERROR: %s, %s (%d): Unknown MPLS header manipulation "
-			"type (%d).\n", __FILE__, __func__, __LINE__,
-			pmpls_hm->mpls_params.type);
-		return -EINVAL;
+		/* Should never get here */
+		BUG_ON(1);
+		break;
 	}
 
-	INIT_LIST_HEAD(&hm_node->list_node);
-	pmpls_hm->hm_node[0]	= hm_node;
-	pmpls_hm->num_nodes	= 1;
-
-	add_local_hm_nodes_to_chain(pmpls_hm);
-
 	return 0;
 }
 
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index 9d6ba65..f8e6fb0 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -528,6 +528,7 @@ static int nat_hm_check_params(const struct dpa_cls_hm_nat_params *nat_params);
 static int nat_hm_prepare_nodes(struct dpa_cls_hm *pnat_hm,
 				const struct dpa_cls_hm_nat_resources *res);
 
+/* Fills in the parameters of the header manipulation nodes */
 static int nat_hm_update_params(struct dpa_cls_hm *pnat_hm);
 
 /*
@@ -543,6 +544,7 @@ static int fwd_hm_check_params(const struct dpa_cls_hm_fwd_params *fwd_params);
 static int fwd_hm_prepare_nodes(struct dpa_cls_hm *pfwd_hm,
 				const struct dpa_cls_hm_fwd_resources *res);
 
+/* Fills in the parameters of the header manipulation nodes */
 static int fwd_hm_update_params(struct dpa_cls_hm *pfwd_hm);
 
 /*
@@ -559,6 +561,7 @@ static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
 static int remove_hm_prepare_nodes(struct dpa_cls_hm *premove_hm,
 				const struct dpa_cls_hm_remove_resources *res);
 
+/* Fills in the parameters of the header manipulation nodes */
 static int remove_hm_update_params(struct dpa_cls_hm *premove_hm);
 
 /*
@@ -575,6 +578,7 @@ static int insert_hm_check_params(const struct dpa_cls_hm_insert_params
 static int insert_hm_prepare_nodes(struct dpa_cls_hm *pinsert_hm,
 				const struct dpa_cls_hm_insert_resources *res);
 
+/* Fills in the parameters of the header manipulation nodes */
 static int insert_hm_update_params(struct dpa_cls_hm *pinsert_hm);
 
 /*
@@ -591,6 +595,7 @@ static int update_hm_check_params(const struct dpa_cls_hm_update_params
 static int update_hm_prepare_nodes(struct dpa_cls_hm *pupdate_hm,
 				const struct dpa_cls_hm_update_resources *res);
 
+/* Fills in the parameters of the header manipulation nodes */
 static int update_hm_update_params(struct dpa_cls_hm *pupdate_hm);
 
 /*
@@ -607,9 +612,7 @@ static int
 static int vlan_hm_prepare_nodes(struct dpa_cls_hm *pvlan_hm,
 				const struct dpa_cls_hm_vlan_resources *res);
 
-/*
- * Fills in the parameters of the header manipulation nodes
- */
+/* Fills in the parameters of the header manipulation nodes */
 static int vlan_hm_update_params(struct dpa_cls_hm *pvlan_hm);
 
 /*
@@ -620,17 +623,15 @@ static int mpls_hm_check_params(const struct dpa_cls_hm_mpls_params
 	*mpls_params);
 
 /*
- * Imports the low level header manipulation nodes for a MPLS specific
- * classifier header manipulation op.
+ * Prepares (creates or imports) the header manipulation nodes for a MPLS
+ * specific header manipulation.
  */
-static int import_mpls_hm(struct dpa_cls_hm *pmpls_hm,
+static int mpls_hm_prepare_nodes(struct dpa_cls_hm *pmpls_hm,
 				const struct dpa_cls_hm_mpls_resources *res);
 
-/*
- * Creates the low level header manipulation nodes for a MPLS specific
- * classifier header manipulation op.
- */
-static int init_mpls_hm(struct dpa_cls_hm *pmpls_hm);
+/* Fills in the parameters of the header manipulation nodes */
+static int mpls_hm_update_params(struct dpa_cls_hm *pmpls_hm);
+
 
 #endif /*__DPA_CLASSIFIER_C */
 
-- 
1.7.5.4

