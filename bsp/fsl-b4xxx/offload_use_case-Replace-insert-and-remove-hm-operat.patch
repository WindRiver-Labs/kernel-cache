From fc9c6ef4af6c5d843feea6437bbca9b9c093dc8a Mon Sep 17 00:00:00 2001
From: Bulie Radu-Andrei-B37577 <radu.bulie@freescale.com>
Date: Tue, 30 Oct 2012 18:12:11 +0000
Subject: [PATCH 375/518] offload_use_case: Replace insert and remove hm
 operations with forward hm operation

This patch replaces the remove/insert hm operations chain with
forward operation chained with vpri update on outbound post
encryption exact match table.

Signed-off-by: Bulie Radu-Andrei-B37577 <radu.bulie@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/usecases/genl_ctl.c    |    8 +-
 .../staging/fsl_dpa_offload/usecases/genl_ctl.h    |    9 +-
 .../staging/fsl_dpa_offload/usecases/ipsec_init.c  |   89 ++++++++++----------
 3 files changed, 53 insertions(+), 53 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.c b/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.c
index 8b013ad..7a65c8a 100644
--- a/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.c
+++ b/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.c
@@ -399,11 +399,11 @@ static int put_fm_params(struct sk_buff *skb_2, struct genl_info *info)
 		fm_params.cc_out_rx_pre_enc = compat_get_id2ptr(
 					     compat_fm_params.cc_out_rx_pre_enc,
 					     FM_MAP_TYPE_PCD_NODE);
-		fm_params.remove_eth_hm = compat_get_id2ptr(
-						compat_fm_params.remove_eth_hm,
+		fm_params.vpri_update_hm = compat_get_id2ptr(
+						compat_fm_params.vpri_update_hm,
 						FM_MAP_TYPE_PCD_NODE);
-		fm_params.insert_eth_hm = compat_get_id2ptr(
-						compat_fm_params.insert_eth_hm,
+		fm_params.fwd_hm = compat_get_id2ptr(
+						compat_fm_params.fwd_hm,
 						FM_MAP_TYPE_PCD_NODE);
 		fm_params.nat_ip_hm = compat_get_id2ptr(
 						compat_fm_params.nat_ip_hm,
diff --git a/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.h b/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.h
index 155ae3b..1369698 100644
--- a/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.h
+++ b/drivers/staging/fsl_dpa_offload/usecases/genl_ctl.h
@@ -98,6 +98,7 @@ struct ipsec_uparms {
 	__u32 ip_dst_ob_nat;
 	__u32 udp_dport_ob_nat;
 	bool inb_pol_check;
+	u8 vlan_priority;
 };
 
 /* Inbound post IPSEC OH queue types*/
@@ -126,8 +127,8 @@ struct compat_ipsec_fm_uparms {
 	compat_uptr_t cc_out_rx_pre_enc;
 	compat_uptr_t nat_ip_hm;
 	compat_uptr_t nat_udp_hm;
-	compat_uptr_t remove_eth_hm;
-	compat_uptr_t insert_eth_hm;
+	compat_uptr_t vpri_update_hm;
+	compat_uptr_t fwd_hm;
 	int ip4_num_keys;
 	int ip6_num_keys;
 	int nat_num_keys;
@@ -146,8 +147,8 @@ struct ipsec_fm_uparms {
 	void *cc_out_rx_pre_enc;
 	void *nat_ip_hm;
 	void *nat_udp_hm;
-	void *remove_eth_hm;
-	void *insert_eth_hm;
+	void *vpri_update_hm;
+	void *fwd_hm;
 	int ip4_num_keys;
 	int ip6_num_keys;
 	int nat_num_keys;
diff --git a/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c b/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c
index 59912ef..6463fbe 100644
--- a/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c
+++ b/drivers/staging/fsl_dpa_offload/usecases/ipsec_init.c
@@ -130,7 +130,7 @@ static int outb_post_enc_ccnode_num_entries[] = IPSEC_OUT_POST_ENC_NUM_ENTRIES;
 static uint8_t outb_post_enc_ccnode_key_size[] = IPSEC_OUT_POST_ENC_KEY_SIZE;
 static struct dpa_ipsec_params ipsec_params;
 static int ipsec_initialized = 0;
-static int hmd_ins, hmd_rm, hmd_nat;
+static int hmd_fwd, hmd_vlan, hmd_nat;
 
 extern struct ipsec_fm_uparms fm_params;
 
@@ -300,22 +300,24 @@ out_inb_post_sec:
 
 static int create_hm_outb_post_enc(int *outb_hmd, struct ipsec_uparms *params)
 {
-	struct dpa_cls_hm_remove_params rm_params;
-	struct dpa_cls_hm_insert_params ins_params;
-	struct dpa_cls_hm_remove_resources rm_res;
-	struct dpa_cls_hm_insert_resources ins_res;
-	struct dpa_cls_hm_remove_resources *p_rm_res = NULL;
-	struct dpa_cls_hm_insert_resources *p_ins_res = NULL;
+	struct dpa_cls_hm_vlan_params vlan_params;
+	struct dpa_cls_hm_fwd_params fwd_params;
+	struct dpa_cls_hm_fwd_resources fwd_res;
+	struct dpa_cls_hm_vlan_resources vlan_res;
+	struct dpa_cls_hm_fwd_resources *p_fwd_res = NULL;
+	struct dpa_cls_hm_vlan_resources *p_vlan_res = NULL;
 	t_LnxWrpFmDev *fm_dev;
 	struct file *fm_pcd_file;
 	unsigned char data[2 * ETH_ALEN];
 	int err = 0;
 
-	hmd_ins  =	DPA_OFFLD_DESC_NONE;
-	hmd_rm   =	DPA_OFFLD_DESC_NONE;
+	hmd_fwd  =	DPA_OFFLD_DESC_NONE;
+	hmd_vlan   =	DPA_OFFLD_DESC_NONE;
 
-	memset(&rm_params, 0, sizeof(struct dpa_cls_hm_remove_params));
-	memset(&ins_params, 0, sizeof(struct dpa_cls_hm_insert_params));
+	memset(&fwd_params, 0, sizeof(struct dpa_cls_hm_fwd_params));
+	memset(&vlan_params, 0, sizeof(struct dpa_cls_hm_vlan_params));
+	memset(&vlan_res, 0, sizeof(struct dpa_cls_hm_vlan_resources));
+	memset(&fwd_res, 0, sizeof(struct dpa_cls_hm_fwd_resources));
 
 	fm_pcd_file = fcheck((unsigned long)fm_params.pcd_dev);
 	if (!fm_pcd_file) {
@@ -329,44 +331,41 @@ static int create_hm_outb_post_enc(int *outb_hmd, struct ipsec_uparms *params)
 	memcpy(&data[6], &params->smac[0], ETH_ALEN);
 
 	/* Remove and insert operation */
-	rm_params.type = DPA_CLS_HM_REMOVE_CUSTOM;
-	rm_params.custom.offset = 0;
-	rm_params.custom.size = 2 * ETH_ALEN;
-	rm_params.fm_pcd = fm_dev->h_PcdDev;
-	ins_params.type = DPA_CLS_HM_INSERT_CUSTOM;
-	ins_params.custom.offset = 0x00;
-	ins_params.custom.size = 2 * ETH_ALEN;
-	ins_params.custom.data = data;
-	ins_params.fm_pcd = fm_dev->h_PcdDev;
-
-	memset(&ins_res, 0, sizeof(struct dpa_cls_hm_insert_resources));
-	memset(&rm_res, 0, sizeof(struct dpa_cls_hm_remove_resources));
-
-	rm_res.remove_node  =	fm_params.remove_eth_hm;
-	ins_res.insert_node =	fm_params.insert_eth_hm;
-
-	if (rm_res.remove_node)
-		p_rm_res = &rm_res;
-
-	if (ins_res.insert_node)
-		p_ins_res = &ins_res;
-
-	err = dpa_classif_set_insert_hm(&ins_params, DPA_OFFLD_DESC_NONE,
-					&hmd_ins, false, p_ins_res);
+	vlan_params.fm_pcd = fm_dev;
+	vlan_params.type = DPA_CLS_HM_VLAN_EGRESS;
+	vlan_params.egress.update_op = DPA_CLS_HM_VLAN_UPDATE_VPri;
+	vlan_params.egress.update.vpri = params->vlan_priority;
+	vlan_res.vlan_node = fm_params.vpri_update_hm;
+
+	if (vlan_res.vlan_node)
+		p_vlan_res = &vlan_res;
+	err = dpa_classif_set_vlan_hm(&vlan_params, DPA_OFFLD_DESC_NONE,
+					&hmd_vlan, false, p_vlan_res);
+
 	if (err < 0) {
-		pr_err("%d - Failed to create insert hm operation\n", err);
+		pr_err("%d - Failed to create vlan priority update "
+			"hm operation\n", err);
 		return err;
 	}
 
-	err = dpa_classif_set_remove_hm(&rm_params, hmd_ins, &hmd_rm, true,
-					p_rm_res);
-
+	/* Forward operation*/
+	fwd_params.fm_pcd = fm_dev;
+	fwd_params.out_if_type = DPA_CLS_HM_IF_TYPE_ETHERNET;
+
+	memcpy(fwd_params.eth.macda, data, ETH_ALEN);
+	memcpy(fwd_params.eth.macsa, &data[6], ETH_ALEN);
+	fwd_res.fwd_node = fm_params.fwd_hm;
+	if (fwd_res.fwd_node)
+		p_fwd_res = &fwd_res;
+	err = dpa_classif_set_fwd_hm(&fwd_params, hmd_vlan,
+					&hmd_fwd, true, p_fwd_res);
 	if (err < 0) {
-		pr_err("%d - Failed to create remove hm operation\n", err);
+		pr_err("%d - Failed to create forward "
+			"hm operation\n", err);
 		return err;
 	}
 
-	*outb_hmd = hmd_rm;
+	*outb_hmd = hmd_fwd;
 
 	return 0;
 }
@@ -695,11 +694,11 @@ int cleanup_ipsec_offload(int dpa_ipsec_id)
 	if (hmd_nat != DPA_OFFLD_DESC_NONE)
 		dpa_classif_free_hm(hmd_nat);
 
-	if (hmd_ins != DPA_OFFLD_DESC_NONE)
-		dpa_classif_free_hm(hmd_ins);
+	if (hmd_vlan != DPA_OFFLD_DESC_NONE)
+		dpa_classif_free_hm(hmd_vlan);
 
-	if (hmd_rm != DPA_OFFLD_DESC_NONE)
-		dpa_classif_free_hm(hmd_rm);
+	if (hmd_fwd != DPA_OFFLD_DESC_NONE)
+		dpa_classif_free_hm(hmd_fwd);
 
 	for (i = 0; i < DPA_IPSEC_MAX_SA_TYPE; i++)
 		dpa_classif_table_free(ipsec_params.pre_sec_in_params.
-- 
1.7.5.4

