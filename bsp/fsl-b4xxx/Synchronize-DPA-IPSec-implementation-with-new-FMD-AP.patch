From b46f36e07c2516028cdea692c9800ca2f6940e0e Mon Sep 17 00:00:00 2001
From: Mihai Serb <mihai.serb@freescale.com>
Date: Thu, 17 May 2012 20:34:33 +0000
Subject: [PATCH 147/518] Synchronize DPA IPSec implementation with new FMD
 API.

Replace calls to old (deprecated) FMD functions with their equivalents
in the new FMD API and update specific structures names and members.

Signed-off-by: Mihai Serb <mihai.serb@freescale.com>
Acked-by: Andrei Varvara <andrei.varvara@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c |   24 +++++++++++-------------
 1 files changed, 11 insertions(+), 13 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index 8fb20aa..037c79e 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -381,7 +381,8 @@ static int create_inpol_node(struct dpa_ipsec *dpa_ipsec, void **cc_node)
 			     &cc_node_prms.keysParams.ccNextEngineParamsForMiss;
 	next_engine_miss_action->nextEngine = e_FM_PCD_DONE;
 
-	*cc_node = FM_PCD_CcSetNode(dpa_ipsec->config.fm_pcd, &cc_node_prms);
+	*cc_node = FM_PCD_MatchTableSet(dpa_ipsec->config.fm_pcd,
+					&cc_node_prms);
 	if (!*cc_node) {
 		xx_pr_fmd_err(E_NOT_AVAILABLE, "FM_PCD_CcSetNode");
 		return -EBUSY;
@@ -395,7 +396,7 @@ static inline void destroy_inpol_node(struct dpa_ipsec *dpa_ipsec,
 {
 	t_Error fmd_err;
 
-	fmd_err = FM_PCD_CcDeleteNode(dpa_ipsec->config.fm_pcd, cc_node);
+	fmd_err = FM_PCD_MatchTableDelete(cc_node);
 	if (fmd_err != E_OK) {
 		xx_pr_fmd_err(fmd_err, "FM_PCD_CcDeleteNode");
 		xx_pr_err("Could not free policy check CC Node\n");
@@ -1094,7 +1095,7 @@ static int create_frag_manip(struct dpa_ipsec *dpa_ipsec,
 			     struct dpa_ipsec_policy_entry *policy_entry,
 			     struct dpa_cls_tbl_header_manip **hm)
 {
-	t_FmPcdManipFragOrReasmParams *frag_param;
+	t_FmPcdManipFragParams *frag_param;
 
 	/* sanity checks */
 	if (!dpa_ipsec) {
@@ -1113,16 +1114,14 @@ static int create_frag_manip(struct dpa_ipsec *dpa_ipsec,
 	}
 
 	memset(&pcd_manip_params, 0, sizeof(pcd_manip_params));
-	frag_param = &pcd_manip_params.fragOrReasmParams;
-	pcd_manip_params.fragOrReasm = TRUE;
-	frag_param->frag = TRUE;
+	frag_param = &pcd_manip_params.u.frag;
+	pcd_manip_params.type = e_FM_PCD_MANIP_FRAG;
 	frag_param->hdr  = HEADER_TYPE_IPv4;
-	frag_param->ipFragParams.sizeForFragmentation = policy_entry->mtu;
-	frag_param->ipFragParams.scratchBpid = dpa_ipsec->config.ipf_bpid;
-	frag_param->ipFragParams.dontFragAction =
+	frag_param->u.ipFrag.sizeForFragmentation = policy_entry->mtu;
+	frag_param->u.ipFrag.scratchBpid = dpa_ipsec->config.ipf_bpid;
+	frag_param->u.ipFrag.dontFragAction =
 			pcd_df_action[policy_entry->df_action];
-	*hm = FM_PCD_ManipSetNode(dpa_ipsec->config.fm_pcd,
-				  &pcd_manip_params);
+	*hm = FM_PCD_ManipNodeSet(dpa_ipsec->config.fm_pcd, &pcd_manip_params);
 	if (!*hm) {
 		xx_pr_fmd_err(E_NOT_AVAILABLE, "FM_PCD_ManipSetNode");
 		return -EBUSY;
@@ -1147,8 +1146,7 @@ static int destroy_frag_manip(struct dpa_ipsec *dpa_ipsec,
 		return -EFAULT;
 	}
 
-	fmd_err = FM_PCD_ManipDeleteNode(dpa_ipsec->config.fm_pcd,
-					 (t_Handle)hm);
+	fmd_err = FM_PCD_ManipNodeDelete((t_Handle)hm);
 	if (fmd_err != E_OK) {
 		xx_pr_fmd_err(fmd_err, "FM_PCD_ManipDeleteNode");
 		return -EBUSY;
-- 
1.7.5.4

