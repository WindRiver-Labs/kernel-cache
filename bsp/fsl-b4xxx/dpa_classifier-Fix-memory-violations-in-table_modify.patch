From 3dbb5b1c16a0cee44e8cf7fa9d139a03f240ab40 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Mon, 29 Oct 2012 21:37:38 +0000
Subject: [PATCH 351/518] dpa_classifier: Fix memory violations in
 table_modify_entry

The functions table_modify_entry_by_key and table_modify_entry_by_ref
were producing memory corruption because they were writing to bad
memory addresses and they were not copying data from user space using
copy_from_user before accessing it. This was fixed.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |   43 +++++++++++++++-----
 1 files changed, 33 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 1a82f76..b88c4e6 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -1610,9 +1610,10 @@ static long do_ioctl_table_modify_entry_by_key(unsigned long	args,
 		new_key.mask = new_mask_buf;
 		new_key.size = DPA_OFFLD_MAXENTRYKEYSIZE;
 
-		kparam.mod_params.key = &new_key;
-
-		kparam.mod_params.action = &action;
+		kparam.mod_params.key		= &new_key;
+		kparam.mod_params.action	= &action;
+		kparam.mod_params.action->enq_params.policer_params =
+							&policer_params;
 
 		/* Transfer the data into the kernel space params: */
 		ret = dpa_cls_tbl_entry_mod_by_key_params_compatcpy(&kparam,
@@ -1701,7 +1702,12 @@ static long do_ioctl_table_modify_entry_by_ref(unsigned long	args,
 		new_key.mask = new_mask_buf;
 		new_key.size = DPA_OFFLD_MAXENTRYKEYSIZE;
 
-		kparam.mod_params.key = &new_key;
+		memset(&kparam, 0,
+			sizeof(struct ioc_dpa_cls_tbl_entry_mod_by_ref));
+		kparam.mod_params.key		= &new_key;
+		kparam.mod_params.action	= &action;
+		kparam.mod_params.action->enq_params.policer_params =
+							&policer_params;
 
 		/* Transfer the data into the kernel space params: */
 		ret = dpa_cls_tbl_entry_mod_by_ref_params_compatcpy(&kparam,
@@ -2136,8 +2142,7 @@ int dpa_cls_tbl_action_params_compatcpy(
 		kparam->enq_params.new_fqid =
 				uparam->enq_params.new_fqid;
 		kparam->enq_params.hmd = uparam->enq_params.hmd;
-
-		if (uparam->enq_params.policer_params) {
+		if (compat_ptr(uparam->enq_params.policer_params)) {
 			BUG_ON(!kparam->enq_params.policer_params);
 			if (copy_from_user(kparam->enq_params.policer_params,
 				compat_ptr(uparam->enq_params.policer_params),
@@ -2266,19 +2271,37 @@ int dpa_cls_tbl_entry_mod_params_compatcpy(
 	kparam->type = uparam->type;
 
 	if (compat_ptr(uparam->key)) {
+		struct compat_ioc_dpa_offld_lookup_key key;
+
 		BUG_ON(!kparam->key);
-		err = dpa_lookup_key_params_compatcpy(kparam->key,
-				compat_ptr(uparam->key));
+		if (copy_from_user(&key, compat_ptr(uparam->key),
+			sizeof(struct compat_ioc_dpa_offld_lookup_key))) {
+			pr_err("ERROR: %s, %s (%d): Read failed: New key "
+				"parameters.\n", __FILE__, __func__, __LINE__);
+			return -EBUSY;
+		}
+
+		err = dpa_lookup_key_params_compatcpy(kparam->key, &key);
 	} else
 		kparam->key = NULL;
 
 	if (err < 0)
 		return err;
 
-	if (uparam->action) {
+	if (compat_ptr(uparam->action)) {
+		struct dpa_cls_compat_tbl_action action;
+
 		BUG_ON(!kparam->action);
+
+		if (copy_from_user(&action, compat_ptr(uparam->action),
+			sizeof(struct dpa_cls_compat_tbl_action))) {
+			pr_err("ERROR: %s, %s (%d): Read failed: New action "
+				"parameters.\n", __FILE__, __func__, __LINE__);
+			return -EBUSY;
+		}
+
 		err = dpa_cls_tbl_action_params_compatcpy(kparam->action,
-						compat_ptr(uparam->action));
+								&action);
 	} else
 		kparam->action = NULL;
 
-- 
1.7.5.4

