From af63274088757b3aea8028ac73c8309df84852fa Mon Sep 17 00:00:00 2001
From: Anca-Jeanina Floarea <anca.floarea@freescale.com>
Date: Fri, 7 Sep 2012 20:16:32 +0000
Subject: [PATCH 310/518] dpa_stats: Extended the classification counter
 selection

Added the possibility to select the entire group of Classification
counters and changed the statistics name to better reflect its purpose

Signed-off-by: Anca Jeanina FLOAREA <anca.floarea@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_stats.c |   45 ++++++++++++++++-----------
 include/linux/fsl_dpa_stats.h               |   28 +++++++++--------
 2 files changed, 42 insertions(+), 31 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_stats.c b/drivers/staging/fsl_dpa_offload/dpa_stats.c
index 005952d..bfbafc4 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_stats.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_stats.c
@@ -693,7 +693,7 @@ static void create_classif_stats(struct dpa_stats *dpa_stats)
 			(void *)&stats.byteCount - (void *)&stats;
 	/* DPA_STATS_CNT_CLASSIF_PACKETS */
 	dpa_stats->stats_sel[DPA_STATS_CNT_CLASSIF_NODE][1] = (void *)
-			&stats.frameLengthRangeCount[0] - (void *)&stats;
+			&stats.frameCount - (void *)&stats;
 	/* DPA_STATS_CNT_CLASSIF_RANGE1 */
 	dpa_stats->stats_sel[DPA_STATS_CNT_CLASSIF_NODE][2] = (void *)
 			&stats.frameLengthRangeCount[0] - (void *)&stats;
@@ -1076,11 +1076,15 @@ static int set_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 
 	/* Check Classifier Table counter selection */
 	if (!((cnt_sel >= DPA_STATS_CNT_CLASSIF_BYTES) &&
-			(cnt_sel <= DPA_STATS_CNT_CLASSIF_RANGE10))) {
+	    (cnt_sel <= DPA_STATS_CNT_CLASSIF_ALL))) {
 		pr_err("Invalid Classifier Table counter selection");
 		return -EINVAL;
 	}
 
+	/* Entire group of counters was selected */
+	if (cnt_sel == DPA_STATS_CNT_CLASSIF_ALL)
+		cnt_sel -= 1;
+
 	err = dpa_classif_table_get_params(prm.td, &cls_tbl);
 	if (err != 0) {
 		pr_err("Invalid Classifier Table descriptor\n");
@@ -1126,9 +1130,8 @@ static int set_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 {
 	struct dpa_stats_cnt_classif_cb *cnt_ccnode_cb = &cnt_cb->ccnode_cb;
 	struct dpa_stats *dpa_stats = cnt_cb->dpa_stats;
-	struct dpa_stats_cnt_classif_node classif = params->classif_node_params;
+	struct dpa_stats_cnt_classif_node prm = params->classif_node_params;
 	t_FmPcdCcKeyStatistics stats;
-	uint32_t cnt_sel = classif.cnt_sel;
 	int err = 0;
 
 	if (!dpa_stats) {
@@ -1136,23 +1139,21 @@ static int set_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 		return -EFAULT;
 	}
 
-	/* Check Classification Cc Node counter selection */
-	if ((cnt_sel == 0) ||  (cnt_sel > DPA_STATS_CNT_CLASSIF_RANGE10) ||
-		((cnt_sel >= DPA_STATS_CNT_CLASSIF_RANGE1) &&
-		(cnt_sel & DPA_STATS_CNT_CLASSIF_PACKETS))) {
+	/* Check Classification Node counter selection */
+	if ((prm.cnt_sel == 0) ||  (prm.cnt_sel > DPA_STATS_CNT_CLASSIF_ALL)) {
 		pr_err("Invalid Classif_Node counter selection");
 		return -EINVAL;
 	}
 
 	/* Copy the key descriptor */
-	err = copy_key_descriptor(&classif.key, &cnt_ccnode_cb->keys[0]);
+	err = copy_key_descriptor(&prm.key, &cnt_ccnode_cb->keys[0]);
 	if (err != 0) {
 		pr_err("Unable to copy key descriptor\n");
 		return -EINVAL;
 	}
 
 	/* Store CcNode handle and set number of keys to one */
-	cnt_ccnode_cb->cc_node = classif.cc_node;
+	cnt_ccnode_cb->cc_node = prm.cc_node;
 	cnt_ccnode_cb->keys_num = 1;
 
 	/* Check the Classifier Node counter parameters */
@@ -1169,7 +1170,7 @@ static int set_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	/* Map Classif Node counter selection to CcNode statistics */
 	cnt_sel_to_stats(&cnt_ccnode_cb->info,
 		dpa_stats->stats_sel[DPA_STATS_CNT_CLASSIF_NODE],
-		(cnt_sel >> CLASSIF_STATS_SHIFT));
+		(prm.cnt_sel >> CLASSIF_STATS_SHIFT));
 
 	/* Set number of bytes that will be written by this counter */
 	cnt_cb->bytes_num = STATS_VAL_SIZE * cnt_ccnode_cb->info.stats_num;
@@ -1497,17 +1498,28 @@ static int set_cls_cnt_classif_tbl_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	struct dpa_stats *dpa_stats = cnt_cb->dpa_stats;
 	struct dpa_stats_cls_cnt_classif_tbl prm = params->classif_tbl_params;
 	struct dpa_cls_tbl_params cls_tbl;
-	t_FmPcdCcKeyStatistics stats;
+	struct t_FmPcdCcKeyStatistics stats;
 	uint32_t i = 0, cnt_sel = prm.cnt_sel;
 	int err = 0;
 
+	/* Check Classifier Table descriptor */
+	if (params->classif_tbl_params.td == DPA_OFFLD_INVALID_OBJECT_ID) {
+		pr_err("Invalid Classifier Table descriptor");
+		return -EINVAL;
+	}
+
 	/* Check Classifier Table counter selection */
 	if (!((cnt_sel >= DPA_STATS_CNT_CLASSIF_BYTES) &&
-			(cnt_sel <= DPA_STATS_CNT_CLASSIF_RANGE10))) {
+	    (cnt_sel <= DPA_STATS_CNT_CLASSIF_ALL))) {
 		pr_err("Invalid Classifier Table counter selection");
 		return -EINVAL;
 	}
 
+	/* Entire group of counters was selected */
+	if (cnt_sel == DPA_STATS_CNT_CLASSIF_ALL)
+		cnt_sel -= 1;
+
+	cnt_tbl_cb->td = params->classif_tbl_params.td;
 	cnt_tbl_cb->keys_num = params->class_members;
 
 	if (prm.key_type == DPA_STATS_CLASSIF_SINGLE_KEY) {
@@ -1603,7 +1615,6 @@ static int set_cls_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	struct dpa_stats *dpa_stats = cnt_cb->dpa_stats;
 	struct dpa_stats_cls_cnt_classif_node prm = params->classif_node_params;
 	t_FmPcdCcKeyStatistics stats;
-	uint32_t cnt_sel = prm.cnt_sel;
 	uint32_t i = 0;
 	int err = 0;
 
@@ -1613,9 +1624,7 @@ static int set_cls_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	}
 
 	/* Check Classification Cc Node counter selection */
-	if ((cnt_sel == 0) ||  (cnt_sel > DPA_STATS_CNT_CLASSIF_RANGE10) ||
-		((cnt_sel >= DPA_STATS_CNT_CLASSIF_RANGE1) &&
-		(cnt_sel & DPA_STATS_CNT_CLASSIF_PACKETS))) {
+	if ((prm.cnt_sel == 0) ||  (prm.cnt_sel > DPA_STATS_CNT_CLASSIF_ALL)) {
 		pr_err("Invalid Classif_Node counter selection");
 		return -EINVAL;
 	}
@@ -1647,7 +1656,7 @@ static int set_cls_cnt_ccnode_cb(struct dpa_stats_cnt_cb *cnt_cb,
 	/* Map Classif Node counter selection to CcNode statistics */
 	cnt_sel_to_stats(&cnt_ccnode_cb->info,
 		dpa_stats->stats_sel[DPA_STATS_CNT_CLASSIF_NODE],
-		(cnt_sel >> CLASSIF_STATS_SHIFT));
+		(prm.cnt_sel >> CLASSIF_STATS_SHIFT));
 
 	/* Set number of bytes that will be written by this counter */
 	cnt_cb->bytes_num = cnt_ccnode_cb->keys_num *
diff --git a/include/linux/fsl_dpa_stats.h b/include/linux/fsl_dpa_stats.h
index 6ebf6df..943c4f9 100644
--- a/include/linux/fsl_dpa_stats.h
+++ b/include/linux/fsl_dpa_stats.h
@@ -352,29 +352,31 @@ struct dpa_stats_cnt_plcr {
 /* DPA Stats Classification counters */
 enum dpa_stats_cnt_classif_sel {
 	/* Number of bytes processed by classification entry */
-	DPA_STATS_CNT_CLASSIF_BYTES   = 0x00000010,
+	DPA_STATS_CNT_CLASSIF_BYTES		= 0x00000010,
 	/* Number of frames processed by classification entry */
-	DPA_STATS_CNT_CLASSIF_PACKETS = 0x00000020,
+	DPA_STATS_CNT_CLASSIF_PACKETS		= 0x00000020,
+	/* Number of frames for frame length range 0 */
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE0	= 0x00000040,
 	/* Number of frames for frame length range 1 */
-	DPA_STATS_CNT_CLASSIF_RANGE1  = 0x00000040,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE1	= 0x00000080,
 	/* Number of frames for frame length range 2 */
-	DPA_STATS_CNT_CLASSIF_RANGE2  = 0x00000080,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE2	= 0x00000100,
 	/* Number of frames for frame length range 3 */
-	DPA_STATS_CNT_CLASSIF_RANGE3  = 0x00000100,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE3	= 0x00000200,
 	/* Number of frames for frame length range 4 */
-	DPA_STATS_CNT_CLASSIF_RANGE4  = 0x00000200,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE4	= 0x00000400,
 	/* Number of frames for frame length range 5 */
-	DPA_STATS_CNT_CLASSIF_RANGE5  = 0x00000400,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE5	= 0x00000800,
 	/* Number of frames for frame length range 6 */
-	DPA_STATS_CNT_CLASSIF_RANGE6  = 0x00000800,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE6	= 0x00001000,
 	/* Number of frames for frame length range 7 */
-	DPA_STATS_CNT_CLASSIF_RANGE7  = 0x00001000,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE7	= 0x00002000,
 	/* Number of frames for frame length range 8 */
-	DPA_STATS_CNT_CLASSIF_RANGE8  = 0x00002000,
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE8	= 0x00004000,
 	/* Number of frames for frame length range 9 */
-	DPA_STATS_CNT_CLASSIF_RANGE9  = 0x00004000,
-	/* Number of frames for frame length range 10 */
-	DPA_STATS_CNT_CLASSIF_RANGE10  = 0x00008000
+	DPA_STATS_CNT_CLASSIF_RMON_RANGE9	= 0x00008000,
+	/* Select all counters */
+	DPA_STATS_CNT_CLASSIF_ALL		= 0x00010000
 };
 
 /* DPA Stats Classifier Table counter parameters */
-- 
1.7.5.4

