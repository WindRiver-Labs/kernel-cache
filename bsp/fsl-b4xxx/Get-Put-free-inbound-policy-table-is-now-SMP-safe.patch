From 8926df26c1785eb51814217cf390d27b017b76cd Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Fri, 18 May 2012 20:48:33 +0000
Subject: [PATCH 162/518] Get/Put free inbound policy table is now SMP safe

updated the get_free_inbpol_tbl & put_free_inbpol_tbl to
be SMP safe.

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
Acked-by: Mihai Serb <mihai.serb@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index b51f2b6..2c960b8 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -563,6 +563,9 @@ static int get_free_inbpol_tbl(struct dpa_ipsec *dpa_ipsec, int *table_desc)
 		return -EFAULT;
 	}
 
+	/* Lock inbound policy list */
+	mutex_lock(&dpa_ipsec->sa_mng.inpol_tables_lock);
+
 	head = &dpa_ipsec->sa_mng.inpol_tables;
 
 	list_for_each_entry(inpol_tbl, head, table_list)
@@ -573,15 +576,21 @@ static int get_free_inbpol_tbl(struct dpa_ipsec *dpa_ipsec, int *table_desc)
 		inpol_tbl->used = TRUE;
 	else {
 		xx_pr_err("No more free EM tables for inbound policy verification\n");
+		/* Unlock inbound policy list */
+		mutex_unlock(&dpa_ipsec->sa_mng.inpol_tables_lock);
 		return -ENOMEM;
 	}
 
 	if (inpol_tbl->td < 0) {
 		xx_pr_err("Invalid table reference\n");
+		/* Unlock inbound policy list */
+		mutex_unlock(&dpa_ipsec->sa_mng.inpol_tables_lock);
 		return -EFAULT;
 	}
 
 	*table_desc = inpol_tbl->td;
+	/* Unlock inbound policy list */
+	mutex_unlock(&dpa_ipsec->sa_mng.inpol_tables_lock);
 
 	return 0;
 }
@@ -602,6 +611,9 @@ static int put_free_inbpol_tbl(struct dpa_ipsec *dpa_ipsec, int table_desc)
 		return -EFAULT;
 	}
 
+	/* Lock inbound policy list */
+	mutex_lock(&dpa_ipsec->sa_mng.inpol_tables_lock);
+
 	head = &dpa_ipsec->sa_mng.inpol_tables;
 
 	list_for_each_entry(inpol_tbl, head, table_list)
@@ -610,10 +622,15 @@ static int put_free_inbpol_tbl(struct dpa_ipsec *dpa_ipsec, int table_desc)
 
 	if (inpol_tbl->used == FALSE) {
 		xx_pr_warn("Exact match table %d is not used\n", table_desc);
+		/* Unlock inbound policy list */
+		mutex_unlock(&dpa_ipsec->sa_mng.inpol_tables_lock);
 		return 0;
 	} else
 		inpol_tbl->used = FALSE;
 
+	/* Unlock inbound policy list */
+	mutex_unlock(&dpa_ipsec->sa_mng.inpol_tables_lock);
+
 	return 0;
 }
 
-- 
1.7.5.4

