From 51d4dbde9891d9d43b1dfa801e6aa9f6eda1d595 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Mon, 29 Oct 2012 21:37:50 +0000
Subject: [PATCH 352/518] dpa_classifier: HM API: Use compat_get_id2ptr only
 on valid manip node identifiers

Avoid querying id2ptr for NULL manip node identifiers in the HM API
compat copy functions. This produces errors in the FMD.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |  161 ++++++++++++++------
 1 files changed, 111 insertions(+), 50 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index b88c4e6..d6b99f8 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -2345,13 +2345,20 @@ int dpa_cls_hm_remove_params_compatcpy(
 	kparam->rm_params.type = uparam->rm_params.type;
 	memcpy(&kparam->rm_params.custom, &uparam->rm_params.custom,
 		sizeof(struct dpa_cls_hm_custom_rm_params));
+
 	kparam->rm_params.fm_pcd = compat_ptr(uparam->rm_params.fm_pcd);
-	kparam->next_hmd = uparam->next_hmd;
-	kparam->hmd =  uparam->hmd;
-	kparam->res.remove_node = compat_get_id2ptr(uparam->res.remove_node,
-						    FM_MAP_TYPE_PCD_NODE);
-	kparam->chain_head = uparam->chain_head;
-	kparam->modify_flags = uparam->modify_flags;
+	kparam->next_hmd	= uparam->next_hmd;
+	kparam->hmd		= uparam->hmd;
+
+	if (uparam->res.remove_node)
+		kparam->res.remove_node	= compat_get_id2ptr(
+						uparam->res.remove_node,
+						FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->res.remove_node	= NULL;
+
+	kparam->chain_head	= uparam->chain_head;
+	kparam->modify_flags	= uparam->modify_flags;
 
 	return 0;
 }
@@ -2386,13 +2393,19 @@ int dpa_cls_hm_insert_params_compatcpy(
 	default:
 		break;
 	}
+
 	kparam->ins_params.fm_pcd = compat_ptr(uparam->ins_params.fm_pcd);
-	kparam->next_hmd = uparam->next_hmd;
-	kparam->hmd =  uparam->hmd;
-	kparam->res.insert_node = compat_get_id2ptr(uparam->res.insert_node,
-						    FM_MAP_TYPE_PCD_NODE);
-	kparam->chain_head = uparam->chain_head;
-	kparam->modify_flags = uparam->modify_flags;
+	kparam->next_hmd	= uparam->next_hmd;
+	kparam->hmd		= uparam->hmd;
+	if (uparam->res.insert_node)
+		kparam->res.insert_node	= compat_get_id2ptr(
+							uparam->res.insert_node,
+							FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->res.insert_node	= NULL;
+
+	kparam->chain_head	= uparam->chain_head;
+	kparam->modify_flags	= uparam->modify_flags;
 
 	return 0;
 }
@@ -2420,12 +2433,18 @@ int dpa_cls_hm_vlan_params_compatcpy(
 	}
 
 	kparam->vlan_params.fm_pcd = compat_ptr(uparam->vlan_params.fm_pcd);
-	kparam->next_hmd = uparam->next_hmd;
-	kparam->hmd =  uparam->hmd;
-	kparam->res.vlan_node = compat_get_id2ptr(uparam->res.vlan_node,
+	kparam->next_hmd	= uparam->next_hmd;
+	kparam->hmd		= uparam->hmd;
+
+	if (uparam->res.vlan_node)
+		kparam->res.vlan_node = compat_get_id2ptr(
+						uparam->res.vlan_node,
 						FM_MAP_TYPE_PCD_NODE);
-	kparam->chain_head = uparam->chain_head;
-	kparam->modify_flags = uparam->modify_flags;
+	else
+		kparam->res.vlan_node = NULL;
+
+	kparam->chain_head	= uparam->chain_head;
+	kparam->modify_flags	= uparam->modify_flags;
 
 	return 0;
 }
@@ -2434,23 +2453,32 @@ int dpa_cls_hm_nat_params_compatcpy(
 		struct ioc_dpa_cls_hm_nat_params			*kparam,
 		const struct compat_ioc_dpa_cls_hm_nat_params		*uparam)
 {
-	kparam->nat_params.flags = uparam->nat_params.flags;
-	kparam->nat_params.proto = uparam->nat_params.proto;
-	kparam->nat_params.type = uparam->nat_params.type;
+	kparam->nat_params.flags	= uparam->nat_params.flags;
+	kparam->nat_params.proto	= uparam->nat_params.proto;
+	kparam->nat_params.type		= uparam->nat_params.type;
 	memcpy(&kparam->nat_params.nat_pt, &uparam->nat_params.nat_pt,
 		sizeof(kparam->nat_params.nat_pt));
 
 	kparam->nat_params.fm_pcd = compat_ptr(uparam->nat_params.fm_pcd);
-	kparam->next_hmd = uparam->next_hmd;
-	kparam->hmd =  uparam->hmd;
-	kparam->res.l3_update_node =
-			compat_get_id2ptr(uparam->res.l3_update_node,
-					FM_MAP_TYPE_PCD_NODE);
-	kparam->res.l4_update_node =
-			compat_get_id2ptr(uparam->res.l4_update_node,
-					FM_MAP_TYPE_PCD_NODE);
-	kparam->chain_head = uparam->chain_head;
-	kparam->modify_flags = uparam->modify_flags;
+	kparam->next_hmd	= uparam->next_hmd;
+	kparam->hmd		= uparam->hmd;
+
+	if (uparam->res.l3_update_node)
+		kparam->res.l3_update_node = compat_get_id2ptr(
+						uparam->res.l3_update_node,
+						FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->res.l3_update_node = NULL;
+
+	if (uparam->res.l4_update_node)
+		kparam->res.l4_update_node = compat_get_id2ptr(
+						uparam->res.l4_update_node,
+						FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->res.l4_update_node = NULL;
+
+	kparam->chain_head	= uparam->chain_head;
+	kparam->modify_flags	= uparam->modify_flags;
 
 	return 0;
 }
@@ -2467,15 +2495,27 @@ int dpa_cls_hm_update_params_compatcpy(
 	memcpy(&kparam->update_params.ip_frag_params,
 		&uparam->update_params.ip_frag_params,
 		sizeof(kparam->update_params.ip_frag_params));
+
 	kparam->update_params.fm_pcd = compat_ptr(uparam->update_params.fm_pcd);
-	kparam->next_hmd = uparam->next_hmd;
-	kparam->hmd =  uparam->hmd;
-	kparam->res.update_node = compat_get_id2ptr(uparam->res.update_node,
+	kparam->next_hmd	= uparam->next_hmd;
+	kparam->hmd		= uparam->hmd;
+
+	if (uparam->res.update_node)
+		kparam->res.update_node = compat_get_id2ptr(
+						uparam->res.update_node,
 						FM_MAP_TYPE_PCD_NODE);
-	kparam->res.ip_frag_node = compat_get_id2ptr(uparam->res.ip_frag_node,
-							FM_MAP_TYPE_PCD_NODE);
-	kparam->chain_head = uparam->chain_head;
-	kparam->modify_flags = uparam->modify_flags;
+	else
+		kparam->res.update_node = NULL;
+
+	if (uparam->res.ip_frag_node)
+		kparam->res.ip_frag_node = compat_get_id2ptr(
+						uparam->res.ip_frag_node,
+						FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->res.ip_frag_node = NULL;
+
+	kparam->chain_head	= uparam->chain_head;
+	kparam->modify_flags	= uparam->modify_flags;
 
 	return 0;
 }
@@ -2506,16 +2546,31 @@ int dpa_cls_hm_fwd_params_compatcpy(
 	}
 
 	kparam->fwd_params.fm_pcd = compat_ptr(uparam->fwd_params.fm_pcd);
-	kparam->next_hmd = uparam->next_hmd;
-	kparam->hmd =  uparam->hmd;
-	kparam->res.fwd_node = compat_get_id2ptr(uparam->res.fwd_node,
+	kparam->next_hmd	= uparam->next_hmd;
+	kparam->hmd		= uparam->hmd;
+
+	if (uparam->res.fwd_node)
+		kparam->res.fwd_node = compat_get_id2ptr(uparam->res.fwd_node,
 						FM_MAP_TYPE_PCD_NODE);
-	kparam->res.pppoe_node = compat_get_id2ptr(uparam->res.pppoe_node,
+	else
+		kparam->res.fwd_node = NULL;
+
+	if (uparam->res.pppoe_node)
+		kparam->res.pppoe_node = compat_get_id2ptr(
+						uparam->res.pppoe_node,
 						FM_MAP_TYPE_PCD_NODE);
-	kparam->res.ip_frag_node = compat_get_id2ptr(uparam->res.ip_frag_node,
+	else
+		kparam->res.pppoe_node = NULL;
+
+	if (uparam->res.ip_frag_node)
+		kparam->res.ip_frag_node = compat_get_id2ptr(
+						uparam->res.ip_frag_node,
 						FM_MAP_TYPE_PCD_NODE);
-	kparam->chain_head = uparam->chain_head;
-	kparam->modify_flags = uparam->modify_flags;
+	else
+		kparam->res.ip_frag_node = NULL;
+
+	kparam->chain_head	= uparam->chain_head;
+	kparam->modify_flags	= uparam->modify_flags;
 
 	return 0;
 }
@@ -2529,12 +2584,18 @@ int dpa_cls_hm_mpls_params_compatcpy(
 		sizeof(struct mpls_header) * DPA_CLS_HM_MAX_MPLS_LABELS);
 	kparam->mpls_params.num_labels = uparam->mpls_params.num_labels;
 	kparam->mpls_params.fm_pcd = compat_ptr(uparam->mpls_params.fm_pcd);
-	kparam->next_hmd = uparam->next_hmd;
-	kparam->hmd =  uparam->hmd;
-	kparam->res.ins_rm_node = compat_get_id2ptr(uparam->res.ins_rm_node,
-				FM_MAP_TYPE_PCD_NODE);
-	kparam->chain_head = uparam->chain_head;
-	kparam->modify_flags = uparam->modify_flags;
+	kparam->next_hmd	= uparam->next_hmd;
+	kparam->hmd		= uparam->hmd;
+
+	if (uparam->res.ins_rm_node)
+		kparam->res.ins_rm_node = compat_get_id2ptr(
+						uparam->res.ins_rm_node,
+						FM_MAP_TYPE_PCD_NODE);
+	else
+		kparam->res.ins_rm_node = NULL;
+
+	kparam->chain_head	= uparam->chain_head;
+	kparam->modify_flags	= uparam->modify_flags;
 
 	return 0;
 }
-- 
1.7.5.4

