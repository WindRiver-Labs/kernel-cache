From 3a9cdbcb692aad14a9d5aa43b2ac1b70e2053c20 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Thu, 28 Feb 2013 21:08:59 +0000
Subject: [PATCH 492/518] dpaa_eth: Add recycling support in dpa unit test for
 FmanV3 platforms

Due to recycling mechanism on FmanV3, there were many "TX
Packet never arrived" messages printed in the console issued
because the Qman DQRR polling was not dequeueing the frames from
the recycling queues.
We added support for recycling inside the dpa unit test.
Also, we are counting the "TX Packet never arrived" as failed tests.

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/net/ethernet/freescale/dpa/dpaa_eth.c |   61 +++++++++++++++++++++++--
 1 files changed, 57 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
index 765867e..f763174 100644
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth.c
@@ -2495,7 +2495,9 @@ static const struct qman_fq tx_unit_test_fq __devinitconst = {
 };
 
 static struct __devinitdata dpa_fq unit_fq;
-
+#ifdef CONFIG_DPA_TX_RECYCLE
+static struct dpa_fq unit_recycle_fq;
+#endif
 static bool __devinitdata tx_unit_test_ran; /* Starts as false */
 
 static int __devinit dpa_tx_unit_test(struct net_device *net_dev)
@@ -2510,6 +2512,9 @@ static int __devinit dpa_tx_unit_test(struct net_device *net_dev)
 	int err = 0;
 	int tests_failed = 0;
 	const cpumask_t *cpus = qman_affine_cpus();
+#ifdef CONFIG_DPA_TX_RECYCLE
+	struct qman_fq *oldrecycleq;
+#endif
 
 	if (!alloc_cpumask_var(&old_cpumask, GFP_KERNEL)) {
 		pr_err("UNIT test cpumask allocation failed\n");
@@ -2544,11 +2549,38 @@ static int __devinit dpa_tx_unit_test(struct net_device *net_dev)
 		goto fq_init_fail;
 	}
 
-	pr_err("TX Unit Test using FQ %d\n", qman_fq_fqid(&unit_fq.fq_base));
-
 	/* Replace queue 0 with this queue */
 	priv->egress_fqs[smp_processor_id()] = &unit_fq.fq_base;
 
+#ifdef CONFIG_DPA_TX_RECYCLE
+	oldrecycleq = priv->recycle_fqs[smp_processor_id()];
+	unit_recycle_fq.net_dev = net_dev;
+	unit_recycle_fq.fq_base = tx_unit_test_fq;
+
+	err = qman_create_fq(0, QMAN_FQ_FLAG_DYNAMIC_FQID,
+			&unit_recycle_fq.fq_base);
+
+	if (err < 0) {
+		pr_err("UNIT test Recycle FQ create failed: %d\n", err);
+		goto recycle_fq_create_fail;
+	}
+
+	err = qman_init_fq(&unit_recycle_fq.fq_base,
+			QMAN_INITFQ_FLAG_SCHED | QMAN_INITFQ_FLAG_LOCAL, NULL);
+	if (err < 0) {
+		pr_err("UNIT test Recycle FQ init failed: %d\n", err);
+		goto recycle_fq_init_fail;
+	}
+
+	priv->recycle_fqs[smp_processor_id()] = &unit_recycle_fq.fq_base;
+
+	pr_err("TX Unit Test using FQ: %d - Recycle FQ: %d\n",
+		qman_fq_fqid(&unit_fq.fq_base),
+		qman_fq_fqid(&unit_recycle_fq.fq_base));
+#else
+	pr_err("TX Unit Test using FQ %d\n", qman_fq_fqid(&unit_fq.fq_base));
+#endif
+
 	/* Try packet sizes from 64-bytes to just above the maximum */
 	for (size = 64; size <= 9600 + 128; size += 64) {
 		for (headroom = DPA_BP_HEAD; headroom < 0x800; headroom += 16) {
@@ -2590,8 +2622,13 @@ static int __devinit dpa_tx_unit_test(struct net_device *net_dev)
 			ret = spin_event_timeout(qman_poll_dqrr(1) != 0,
 					100000, 1);
 
-			if (!ret)
+			if (!ret) {
 				pr_err("TX Packet never arrived\n");
+				/*
+				 * Count the test as failed.
+				 */
+				tests_failed++;
+			}
 
 			/* Was it good? */
 			if (tx_unit_test_passed == false) {
@@ -2613,6 +2650,22 @@ end_test:
 	if (unlikely(err < 0))
 		pr_err("Could not OOS TX Unit Test FQ (%d)\n", err);
 
+#ifdef CONFIG_DPA_TX_RECYCLE
+	err = qman_retire_fq(&unit_recycle_fq.fq_base, NULL);
+	if (unlikely(err < 0))
+		pr_err("Could not retire Recycle TX Unit Test FQ (%d)\n", err);
+
+	err = qman_oos_fq(&unit_recycle_fq.fq_base);
+	if (unlikely(err < 0))
+		pr_err("Could not OOS Recycle TX Unit Test FQ (%d)\n", err);
+
+recycle_fq_init_fail:
+	qman_destroy_fq(&unit_recycle_fq.fq_base, 0);
+
+recycle_fq_create_fail:
+	priv->recycle_fqs[smp_processor_id()] = oldrecycleq;
+#endif
+
 fq_init_fail:
 	qman_destroy_fq(&unit_fq.fq_base, 0);
 
-- 
1.7.5.4

