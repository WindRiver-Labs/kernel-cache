From 46d15c1ecd94474b8c463ef5d1703a94537106bc Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@freescale.com>
Date: Thu, 9 Aug 2012 16:12:33 +0000
Subject: [PATCH 279/518] dpa_classifier: Move static function definitions to
 the internal header

Moved static function prototypes from the dpa_classifier.c source
file into its internal header: dpa_classifier.h.

Signed-off-by: Marian Chereji <marian.chereji@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_classifier.c |   68 ---------
 drivers/staging/fsl_dpa_offload/dpa_classifier.h |  166 +++++++++++++++++++++-
 2 files changed, 164 insertions(+), 70 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.c b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
index ac802fc..225daad 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.c
@@ -73,74 +73,6 @@ struct dpa_cls_descriptor_table		hm_array = {
 };
 
 
-static struct dpa_cls_hm_node
-	*find_compatible_hm_node(enum dpa_cls_hm_node_type type,
-							struct list_head *list);
-
-static int import_hm_nodes_to_chain(void * const *node_array,
-	unsigned int num_nodes, struct dpa_cls_hm *hm);
-
-static int init_hm_chain(void *fm_pcd, struct list_head *chain_head,
-						struct list_head *current);
-
-static int remove_hm_chain(struct list_head	*chain_head,
-			struct list_head	*current);
-
-static int import_nat_hm(struct dpa_cls_hm *pnat_hm,
-				const struct dpa_cls_hm_nat_resources *res);
-
-static int init_nat_hm(struct dpa_cls_hm *pnat_hm);
-
-static int fwd_hm_check_params(const struct dpa_cls_hm_fwd_params *fwd_params);
-
-static int import_fwd_hm(struct dpa_cls_hm *pfwd_hm,
-				const struct dpa_cls_hm_fwd_resources *res);
-
-static int init_fwd_hm(struct dpa_cls_hm *pfwd_hm);
-
-static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
-	*remove_params);
-
-static int import_remove_hm(struct dpa_cls_hm *premove_hm,
-				const struct dpa_cls_hm_remove_resources *res);
-
-static int init_remove_hm(struct dpa_cls_hm *premove_hm);
-
-static int create_new_hm_op(int *hmd, int next_hmd);
-
-static int insert_hm_check_params(const struct dpa_cls_hm_insert_params
-	*insert_params);
-
-static int import_insert_hm(struct dpa_cls_hm *pinsert_hm,
-				const struct dpa_cls_hm_insert_resources *res);
-
-static int init_insert_hm(struct dpa_cls_hm *pinsert_hm);
-
-static int update_hm_check_params(const struct dpa_cls_hm_update_params
-	*update_params);
-
-static int import_update_hm(struct dpa_cls_hm *pupdate_hm,
-				const struct dpa_cls_hm_update_resources *res);
-
-static int init_update_hm(struct dpa_cls_hm *pupdate_hm);
-
-static int
-	vlan_hm_check_params(const struct dpa_cls_hm_vlan_params *vlan_params);
-
-static int import_vlan_hm(struct dpa_cls_hm *pvlan_hm,
-				const struct dpa_cls_hm_vlan_resources *res);
-
-static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm);
-
-static int mpls_hm_check_params(const struct dpa_cls_hm_mpls_params
-	*mpls_params);
-
-static int import_mpls_hm(struct dpa_cls_hm *pmpls_hm,
-				const struct dpa_cls_hm_mpls_resources *res);
-
-static int init_mpls_hm(struct dpa_cls_hm *pmpls_hm);
-
-
 int dpa_classif_table_create(const struct dpa_cls_tbl_params	*params,
 				int				*td)
 {
diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier.h b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
index cfd1039..1f58845 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier.h
@@ -349,8 +349,8 @@ static int	get_new_descriptor(struct dpa_cls_descriptor_table *desc_table,
  * the descriptor table overflows (or it doesn't exist at all), the function
  * will attempt to extend it (or create it).
  */
-static int acquire_new_descriptor(struct dpa_cls_descriptor_table *desc_table,
-	int *desc);
+static int	acquire_new_descriptor(struct dpa_cls_descriptor_table
+	*desc_table, int *desc);
 
 /*
  * Releases a descriptor to a descriptor table. In case the descriptor table
@@ -366,6 +366,168 @@ static inline void put_descriptor(struct dpa_cls_descriptor_table *desc_table,
 static inline void key_apply_mask(const struct dpa_offload_lookup_key *key,
 	uint8_t *new_key);
 
+/*
+ * Finds in a chain of low level header manipulation nodes a node which is
+ * compatible with a specific operation, so that the node can be reused.
+ */
+static struct dpa_cls_hm_node
+	*find_compatible_hm_node(enum dpa_cls_hm_node_type type,
+							struct list_head *list);
+
+/*
+ * Import a set of low level header manipulation nodes into an existing
+ * low level header manipulation nodes list (associated with a classifier
+ * header manipulation op).
+ */
+static int import_hm_nodes_to_chain(void * const *node_array,
+	unsigned int num_nodes, struct dpa_cls_hm *hm);
+
+/* Initializes a chain (list) of low level header manipulation nodes. */
+static int init_hm_chain(void *fm_pcd, struct list_head *chain_head,
+						struct list_head *current);
+
+/* Removes a chain (list) of low level header manipulation nodes. */
+static int remove_hm_chain(struct list_head	*chain_head,
+			struct list_head	*current);
+
+/*
+ * Creates a new classifier header manipulation object and links it to an
+ * existing object if needed.
+ */
+static int create_new_hm_op(int *hmd, int next_hmd);
+
+/*
+ * Imports the low level header manipulation nodes for a NAT classifier header
+ * manipulation op.
+ */
+static int import_nat_hm(struct dpa_cls_hm *pnat_hm,
+				const struct dpa_cls_hm_nat_resources *res);
+
+/*
+ * Creates the low level header manipulation nodes for a NAT classifier header
+ * manipulation op.
+ */
+static int init_nat_hm(struct dpa_cls_hm *pnat_hm);
+
+/*
+ * Verifies that the parameters provided for a Forwarding type header
+ * manipulation op are correct.
+ */
+static int fwd_hm_check_params(const struct dpa_cls_hm_fwd_params *fwd_params);
+
+/*
+ * Imports the low level header manipulation nodes for a Forwarding type
+ * classifier header manipulation op.
+ */
+static int import_fwd_hm(struct dpa_cls_hm *pfwd_hm,
+				const struct dpa_cls_hm_fwd_resources *res);
+
+/*
+ * Creates the low level header manipulation nodes for a Forwarding type
+ * classifier header manipulation op.
+ */
+static int init_fwd_hm(struct dpa_cls_hm *pfwd_hm);
+
+/*
+ * Verifies that the parameters provided for a header remove header
+ * manipulation op are correct.
+ */
+static int remove_hm_check_params(const struct dpa_cls_hm_remove_params
+	*remove_params);
+
+/*
+ * Imports the low level header manipulation nodes for a header remove
+ * classifier header manipulation op.
+ */
+static int import_remove_hm(struct dpa_cls_hm *premove_hm,
+				const struct dpa_cls_hm_remove_resources *res);
+
+/*
+ * Creates the low level header manipulation nodes for a header remove
+ * classifier header manipulation op.
+ */
+static int init_remove_hm(struct dpa_cls_hm *premove_hm);
+
+/*
+ * Verifies that the parameters provided for a header insert header
+ * manipulation op are correct.
+ */
+static int insert_hm_check_params(const struct dpa_cls_hm_insert_params
+	*insert_params);
+
+/*
+ * Imports the low level header manipulation nodes for a header insert
+ * classifier header manipulation op.
+ */
+static int import_insert_hm(struct dpa_cls_hm *pinsert_hm,
+				const struct dpa_cls_hm_insert_resources *res);
+
+/*
+ * Creates the low level header manipulation nodes for a header insert
+ * classifier header manipulation op.
+ */
+static int init_insert_hm(struct dpa_cls_hm *pinsert_hm);
+
+/*
+ * Verifies that the parameters provided for a header update header
+ * manipulation op are correct.
+ */
+static int update_hm_check_params(const struct dpa_cls_hm_update_params
+	*update_params);
+
+/*
+ * Imports the low level header manipulation nodes for a header update
+ * classifier header manipulation op.
+ */
+static int import_update_hm(struct dpa_cls_hm *pupdate_hm,
+				const struct dpa_cls_hm_update_resources *res);
+
+/*
+ * Creates the low level header manipulation nodes for a header update
+ * classifier header manipulation op.
+ */
+static int init_update_hm(struct dpa_cls_hm *pupdate_hm);
+
+/*
+ * Verifies that the parameters provided for a VLAN specific header
+ * manipulation op are correct.
+ */
+static int
+	vlan_hm_check_params(const struct dpa_cls_hm_vlan_params *vlan_params);
+
+/*
+ * Imports the low level header manipulation nodes for a VLAN specific
+ * classifier header manipulation op.
+ */
+static int import_vlan_hm(struct dpa_cls_hm *pvlan_hm,
+				const struct dpa_cls_hm_vlan_resources *res);
+
+/*
+ * Creates the low level header manipulation nodes for a VLAN specific
+ * classifier header manipulation op.
+ */
+static int init_vlan_hm(struct dpa_cls_hm *pvlan_hm);
+
+/*
+ * Verifies that the parameters provided for a MPLS specific header
+ * manipulation op are correct.
+ */
+static int mpls_hm_check_params(const struct dpa_cls_hm_mpls_params
+	*mpls_params);
+
+/*
+ * Imports the low level header manipulation nodes for a MPLS specific
+ * classifier header manipulation op.
+ */
+static int import_mpls_hm(struct dpa_cls_hm *pmpls_hm,
+				const struct dpa_cls_hm_mpls_resources *res);
+
+/*
+ * Creates the low level header manipulation nodes for a MPLS specific
+ * classifier header manipulation op.
+ */
+static int init_mpls_hm(struct dpa_cls_hm *pmpls_hm);
+
 #endif /*__DPA_CLASSIFIER_C */
 
 
-- 
1.7.5.4

