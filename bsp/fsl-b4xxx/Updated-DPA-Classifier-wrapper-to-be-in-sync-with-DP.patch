From d81f314d8df95ba822e8e3bdc40a791d2fecfb8a Mon Sep 17 00:00:00 2001
From: Mihai Serb <mihai.serb@freescale.com>
Date: Sat, 11 Feb 2012 02:37:43 +0000
Subject: [PATCH 094/518] Updated DPA Classifier wrapper to be in sync with
 DPA IPsec wrapper implementation.

Signed-off-by: Mihai Serb <mihai.serb@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 .../staging/fsl_dpa_offload/dpa_classifier_ioctl.h |   96 ++++-
 .../staging/fsl_dpa_offload/wrp_dpa_classifier.c   |  416 ++++---------------
 2 files changed, 169 insertions(+), 343 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
index dbec4d3..96d992a 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_classifier_ioctl.h
@@ -42,47 +42,113 @@
 #include "linux/ioctl.h"
 
 
-#define DPA_CLS_IOC_MAGIC				0xbe
+struct ioc_dpa_cls_tbl_params {
+	struct dpa_cls_tbl_params tbl_params;
+	int td;
+};
+
+struct ioc_dpa_cls_tbl_miss_action {
+	int td;
+	struct dpa_cls_tbl_action miss_action;
+};
+
+struct ioc_dpa_cls_tbl_entry_params {
+	int td;
+	struct dpa_cls_tbl_key key;
+	struct dpa_cls_tbl_action action;
+	int priority;
+	int entry_id;
+};
+
+struct ioc_dpa_cls_tbl_entry_mod_by_key {
+	int td;
+	struct dpa_cls_tbl_key key;
+	struct dpa_cls_tbl_entry_mod_params mod_params;
+};
+
+struct ioc_dpa_cls_tbl_entry_mod_by_ref {
+	int td;
+	int entry_id;
+	struct dpa_cls_tbl_entry_mod_params mod_params;
+};
+
+struct ioc_dpa_cls_tbl_entry_del_by_key {
+	int td;
+	struct dpa_cls_tbl_key key;
+};
+
+struct ioc_dpa_cls_tbl_entry_del_by_ref {
+	int td;
+	int entry_id;
+};
+
+struct ioc_dpa_cls_tbl_lookup_by_key {
+	int td;
+	struct dpa_cls_tbl_key key;
+	struct dpa_cls_tbl_action action;
+};
+
+struct ioc_dpa_cls_tbl_lookup_by_ref {
+	int td;
+	int entry_id;
+	struct dpa_cls_tbl_action action;
+};
+
+struct ioc_dpa_cls_tbl_entry_stats_by_key {
+	int td;
+	struct dpa_cls_tbl_key key;
+	struct dpa_cls_tbl_entry_stats stats;
+};
+
+struct ioc_dpa_cls_tbl_entry_stats_by_ref {
+	int td;
+	int entry_id;
+	struct dpa_cls_tbl_entry_stats stats;
+};
 
+#define DPA_CLS_IOC_MAGIC				0xbe
 
-#define DPA_CLS_IOC_TBL_CREATE	_IOWR(DPA_CLS_IOC_MAGIC, 0, unsigned char)
+#define DPA_CLS_IOC_TBL_CREATE				\
+	_IOWR(DPA_CLS_IOC_MAGIC, 0, struct ioc_dpa_cls_tbl_params)
 
-#define DPA_CLS_IOC_TBL_FREE	_IOW(DPA_CLS_IOC_MAGIC, 1, unsigned char)
+#define DPA_CLS_IOC_TBL_FREE				\
+	_IOW(DPA_CLS_IOC_MAGIC, 1, uint8_t *)
 
 #define DPA_CLS_IOC_TBL_MODIFY_MISS_ACTION		\
-				_IOW(DPA_CLS_IOC_MAGIC, 2, unsigned char)
+	_IOW(DPA_CLS_IOC_MAGIC, 2, struct ioc_dpa_cls_tbl_miss_action)
 
 #define DPA_CLS_IOC_TBL_INSERT_ENTRY			\
-				_IOWR(DPA_CLS_IOC_MAGIC, 3, unsigned char)
+	_IOWR(DPA_CLS_IOC_MAGIC, 3, struct ioc_dpa_cls_tbl_entry_params)
 
 #define DPA_CLS_IOC_TBL_MODIFY_ENTRY_BY_KEY		\
-				_IOW(DPA_CLS_IOC_MAGIC, 4, unsigned char)
+	_IOW(DPA_CLS_IOC_MAGIC, 4, struct ioc_dpa_cls_tbl_entry_mod_by_key)
 
 #define DPA_CLS_IOC_TBL_MODIFY_ENTRY_BY_REF		\
-				_IOW(DPA_CLS_IOC_MAGIC, 5, unsigned char)
+	_IOW(DPA_CLS_IOC_MAGIC, 5, struct ioc_dpa_cls_tbl_entry_mod_by_ref)
 
 #define DPA_CLS_IOC_TBL_DELETE_ENTRY_BY_KEY		\
-				_IOW(DPA_CLS_IOC_MAGIC, 6, unsigned char)
+	_IOW(DPA_CLS_IOC_MAGIC, 6, struct ioc_dpa_cls_tbl_entry_del_by_key)
 
 #define DPA_CLS_IOC_TBL_DELETE_ENTRY_BY_REF		\
-				_IOW(DPA_CLS_IOC_MAGIC, 7, unsigned char)
+	_IOW(DPA_CLS_IOC_MAGIC, 7, struct ioc_dpa_cls_tbl_entry_del_by_ref)
 
 #define DPA_CLS_IOC_TBL_LOOKUP_BY_KEY			\
-				_IOR(DPA_CLS_IOC_MAGIC, 8, unsigned char)
+	_IOR(DPA_CLS_IOC_MAGIC, 8, struct ioc_dpa_cls_tbl_entry_del_by_key)
 
 #define DPA_CLS_IOC_TBL_LOOKUP_BY_REF			\
-				_IOR(DPA_CLS_IOC_MAGIC, 9, unsigned char)
+	_IOR(DPA_CLS_IOC_MAGIC, 9, struct ioc_dpa_cls_tbl_lookup_by_ref)
 
-#define DPA_CLS_IOC_TBL_FLUSH	_IOW(DPA_CLS_IOC_MAGIC, 10, unsigned char)
+#define DPA_CLS_IOC_TBL_FLUSH				\
+	_IOW(DPA_CLS_IOC_MAGIC, 10, uint8_t *)
 
 #define DPA_CLS_IOC_TBL_GET_STATS_BY_KEY		\
-				_IOR(DPA_CLS_IOC_MAGIC, 11, unsigned char)
+	_IOR(DPA_CLS_IOC_MAGIC, 11, struct ioc_dpa_cls_tbl_entry_stats_by_key)
 
 #define DPA_CLS_IOC_TBL_GET_STATS_BY_REF		\
-				_IOR(DPA_CLS_IOC_MAGIC, 12, unsigned char)
+	_IOR(DPA_CLS_IOC_MAGIC, 12, struct ioc_dpa_cls_tbl_entry_stats_by_ref)
 
 #define DPA_CLS_IOC_TBL_GET_PARAMS			\
-				_IOWR(DPA_CLS_IOC_MAGIC, 13, unsigned char)
+	_IOWR(DPA_CLS_IOC_MAGIC, 13, struct ioc_dpa_cls_tbl_params)
 
 
 #endif /* __DPA_CLASSIFIER_IOCTL_H */
diff --git a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
index 294e200..be3afa6 100644
--- a/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
+++ b/drivers/staging/fsl_dpa_offload/wrp_dpa_classifier.c
@@ -132,37 +132,30 @@ long wrp_dpa_classif_ioctl(
 	switch (cmd) {
 	case DPA_CLS_IOC_TBL_CREATE:
 	{
-		struct dpa_cls_tbl_params	*uparams, kparams;
-		int				*utd, ktd;
+		struct ioc_dpa_cls_tbl_params	prm;
 		struct file			*fm_pcd_file;
 		t_LnxWrpFmDev			*fm_wrapper_dev;
 
-
 		/* Prepare arguments */
-		uparams = (struct dpa_cls_tbl_params *) args;
-		utd	= (int *)((void *)uparams +
-				sizeof(struct dpa_cls_tbl_params));
-
-		if (copy_from_user(
-				&kparams,
-				uparams,
-				sizeof(struct dpa_cls_tbl_params))) {
+		if (copy_from_user(&prm,
+				   (struct ioc_dpa_cls_tbl_params *) args,
+				   sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_create user space args"));
 			return -EBUSY;
 		}
 
 		/* Translate FM_PCD file descriptor */
-		fm_pcd_file = fcheck((unsigned int)kparams.fm_pcd);
+		fm_pcd_file = fcheck((unsigned int)prm.tbl_params.fm_pcd);
 		fm_wrapper_dev = ((t_LnxWrpFmDev *)fm_pcd_file->private_data);
-		kparams.fm_pcd = (void *)fm_wrapper_dev->h_PcdDev;
+		prm.tbl_params.fm_pcd = (void *)fm_wrapper_dev->h_PcdDev;
 
 		/* Call function */
-		ret = dpa_classif_table_create(&kparams, &ktd);
+		ret = dpa_classif_table_create(&prm.tbl_params, &prm.td);
 		if (ret < 0)
 			return ret;
 
 		/* Return results to user space */
-		if (copy_to_user(utd, &ktd, sizeof(int))) {
+		if (copy_to_user((void *) args, &prm, sizeof(prm))) {
 			xx_pr_err(("Could not write dpa_classif_table_create result"));
 			return -EBUSY;
 		}
@@ -176,90 +169,46 @@ long wrp_dpa_classif_ioctl(
 
 	case DPA_CLS_IOC_TBL_MODIFY_MISS_ACTION:
 	{
-		struct dpa_cls_tbl_action		*uaction, kaction;
-		int					*utd, ktd;
-
+		struct ioc_dpa_cls_tbl_miss_action	prm;
 
 		/* Prepare arguments */
-		utd	= (int *)(args);
-		uaction = (struct dpa_cls_tbl_action *)((void *)utd +
-				sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+				   (struct ioc_dpa_cls_tbl_miss_action *) args,
+				    sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_modify_miss_action user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(
-				&kaction,
-				uaction,
-				sizeof(struct dpa_cls_tbl_action))) {
-			xx_pr_err(("Could not read dpa_classif_table_modify_miss_action user space args (#2)"));
-			return -EBUSY;
-		}
 		/* Call function */
-		ret = dpa_classif_table_modify_miss_action(ktd, &kaction);
+		ret = dpa_classif_table_modify_miss_action(prm.td,
+							   &prm.miss_action);
 
 		break;
 	}
 
 	case DPA_CLS_IOC_TBL_INSERT_ENTRY:
 	{
-		struct dpa_cls_tbl_key		*ukey, kkey;
-		struct dpa_cls_tbl_action	*uaction, kaction;
-		int				*utd, ktd;
-		int				*uentry_id, *upriority;
-		int				kentry_id, kpriority;
-
+		struct ioc_dpa_cls_tbl_entry_params	prm;
 
 		/* Prepare arguments */
-		utd		= (int *)(args);
-		ukey		= (struct dpa_cls_tbl_key *)((void *)utd +
-					sizeof(int));
-		uaction		= (struct dpa_cls_tbl_action *)((void*)ukey +
-					sizeof(struct dpa_cls_tbl_key));
-		upriority	= (int *)((void *)uaction +
-					sizeof(struct dpa_cls_tbl_action));
-		uentry_id	= (int *)((void *)upriority + sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+				   (struct ioc_dpa_cls_tbl_entry_params *) args,
+				    sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_insert_entry user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(
-				&kaction,
-				uaction,
-				sizeof(struct dpa_cls_tbl_action))) {
-			xx_pr_err(("Could not read dpa_classif_table_insert_entry user space args (#2)"));
-			return -EBUSY;
-		}
-
-		if (copy_from_user(&kpriority, upriority, sizeof(int))) {
-			xx_pr_err(("Could not read dpa_classif_table_insert_entry user space args (#3)"));
-			return -EBUSY;
-		}
-
-		if (copy_from_user(
-				&kkey,
-				ukey,
-				sizeof(struct dpa_cls_tbl_key))) {
-			xx_pr_err(("Could not read dpa_classif_table_insert_entry user space args (#3)"));
-			return -EBUSY;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_insert_entry(
-						ktd,
-						&kkey,
-						&kaction,
-						kpriority,
-						&kentry_id);
+		ret = dpa_classif_table_insert_entry(prm.td,
+						     &prm.key,
+						     &prm.action,
+						     prm.priority,
+						     &prm.entry_id);
 		if (ret < 0)
 			return ret;
 
 		/* Return results to user space */
-		if (copy_to_user(uentry_id, &kentry_id, sizeof(int))) {
+		if (copy_to_user((void *) args, &prm, sizeof(prm))) {
 			xx_pr_err(("Could not write dpa_classif_table_insert_entry result"));
 			return -EBUSY;
 		}
@@ -269,245 +218,104 @@ long wrp_dpa_classif_ioctl(
 
 	case DPA_CLS_IOC_TBL_MODIFY_ENTRY_BY_KEY:
 	{
-		struct dpa_cls_tbl_key			*ukey, kkey, knew_key;
-		struct dpa_cls_tbl_action		knew_action;
-		struct dpa_cls_tbl_entry_mod_params	*umod_params;
-		struct dpa_cls_tbl_entry_mod_params	kmod_params;
-		int					*utd, ktd;
-
+		struct ioc_dpa_cls_tbl_entry_mod_by_key	prm;
 
 		/* Prepare arguments */
-		utd		= (int *)(args);
-		ukey		= (struct dpa_cls_tbl_key *)((void *)utd +
-					sizeof(int));
-		umod_params	= (struct dpa_cls_tbl_entry_mod_params *)
-					((void *)ukey +
-					sizeof(struct dpa_cls_tbl_key));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+			      (struct ioc_dpa_cls_tbl_entry_mod_by_key *) args,
+			       sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_key user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(
-				&kkey,
-				ukey,
-				sizeof(struct dpa_cls_tbl_key))) {
-			xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_key user space args (#2)"));
-			return -EBUSY;
-		}
-
-		if (copy_from_user(
-				&kmod_params,
-				umod_params,
-				sizeof(struct dpa_cls_tbl_entry_mod_params))) {
-			xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_key user space args (#3)"));
-			return -EBUSY;
-		}
-
-		if (((kmod_params.type == DPA_CLS_TBL_MODIFY_KEY) ||
-			(kmod_params.type ==
-				DPA_CLS_TBL_MODIFY_KEY_AND_ACTION)) &&
-			(kmod_params.key)) {
-			if (copy_from_user(
-					&knew_key,
-					kmod_params.key,
-					sizeof(struct dpa_cls_tbl_key))) {
-				xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_key user space args (#3.1)"));
-				return -EBUSY;
-			}
-
-			kmod_params.key = &knew_key;
-		}
-
-		if (((kmod_params.type == DPA_CLS_TBL_MODIFY_ACTION) ||
-			(kmod_params.type ==
-				DPA_CLS_TBL_MODIFY_KEY_AND_ACTION)) &&
-			(kmod_params.action)) {
-			if (copy_from_user(
-					&knew_action,
-					kmod_params.action,
-					sizeof(struct dpa_cls_tbl_action))) {
-				xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_key user space args (#3.2)"));
-				return -EBUSY;
-			}
-
-			kmod_params.action = &knew_action;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_modify_entry_by_key(
-							ktd,
-							&kkey,
-							&kmod_params);
+		ret = dpa_classif_table_modify_entry_by_key(prm.td,
+							    &prm.key,
+							    &prm.mod_params);
 
 		break;
 	}
 
 	case DPA_CLS_IOC_TBL_MODIFY_ENTRY_BY_REF:
 	{
-		struct dpa_cls_tbl_key			knew_key;
-		struct dpa_cls_tbl_action		knew_action;
-		struct dpa_cls_tbl_entry_mod_params	*umod_params;
-		struct dpa_cls_tbl_entry_mod_params	kmod_params;
-		int					*utd, ktd;
-		int					*uentry_id, kentry_id;
-
+		struct ioc_dpa_cls_tbl_entry_mod_by_ref	prm;
 
 		/* Prepare arguments */
-		utd		= (int *)(args);
-		uentry_id	= (int *)((void *)utd + sizeof(int));
-		umod_params	= (struct dpa_cls_tbl_entry_mod_params *)
-					((void *)uentry_id + sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+			(struct ioc_dpa_cls_tbl_entry_mod_by_ref *) args,
+			sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_ref user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(&kentry_id, uentry_id, sizeof(int))) {
-			xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_ref user space args (#2)"));
-			return -EBUSY;
-		}
-
-		if (copy_from_user(
-				&kmod_params,
-				umod_params,
-				sizeof(struct dpa_cls_tbl_entry_mod_params))) {
-			xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_ref user space args (#3)"));
-			return -EBUSY;
-		}
-
-		if (((kmod_params.type == DPA_CLS_TBL_MODIFY_KEY) ||
-			(kmod_params.type ==
-				DPA_CLS_TBL_MODIFY_KEY_AND_ACTION)) &&
-			(kmod_params.key)) {
-			if (copy_from_user(
-					&knew_key,
-					kmod_params.key,
-					sizeof(struct dpa_cls_tbl_key))) {
-				xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_ref user space args (#3.1)"));
-				return -EBUSY;
-			}
-
-			kmod_params.key = &knew_key;
-		}
-
-		if (((kmod_params.type == DPA_CLS_TBL_MODIFY_ACTION) ||
-			(kmod_params.type ==
-				DPA_CLS_TBL_MODIFY_KEY_AND_ACTION)) &&
-			(kmod_params.action)) {
-			if (copy_from_user(
-					&knew_action,
-					kmod_params.action,
-					sizeof(struct dpa_cls_tbl_action))) {
-				xx_pr_err(("Could not read dpa_classif_table_modify_entry_by_ref user space args (#3.2)"));
-				return -EBUSY;
-			}
-
-			kmod_params.action = &knew_action;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_modify_entry_by_ref(
-							ktd,
-							kentry_id,
-							&kmod_params);
+		ret = dpa_classif_table_modify_entry_by_ref(prm.td,
+							    prm.entry_id,
+							    &prm.mod_params);
 
 		break;
 	}
 
 	case DPA_CLS_IOC_TBL_DELETE_ENTRY_BY_KEY:
 	{
-		struct dpa_cls_tbl_key		*ukey, kkey;
-		int				*utd, ktd;
-
+		struct ioc_dpa_cls_tbl_entry_del_by_key	prm;
 
 		/* Prepare arguments */
-		utd	= (int *)(args);
-		ukey	= (struct dpa_cls_tbl_key *)(args + sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+			(struct ioc_dpa_cls_tbl_entry_del_by_key *) args,
+			sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_delete_entry_by_key user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(
-				&kkey,
-				ukey,
-				sizeof(struct dpa_cls_tbl_key))) {
-			xx_pr_err(("Could not read dpa_classif_table_delete_entry_by_key user space args (#2)"));
-			return -EBUSY;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_delete_entry_by_key(ktd, &kkey);
+		ret = dpa_classif_table_delete_entry_by_key(prm.td,
+							    &prm.key);
 
 		break;
 	}
 
 	case DPA_CLS_IOC_TBL_DELETE_ENTRY_BY_REF:
 	{
-		int	*uentry_id, kentry_id;
-		int	*utd, ktd;
+		struct ioc_dpa_cls_tbl_entry_del_by_ref	prm;
 
 
 		/* Prepare arguments */
-		utd		= (int *)(args);
-		uentry_id	= (int *)(args + sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+			(struct ioc_dpa_cls_tbl_entry_del_by_ref *) args,
+			sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_delete_entry_by_ref user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(&kentry_id, uentry_id, sizeof(int))) {
-			xx_pr_err(("Could not read dpa_classif_table_delete_entry_by_ref user space args (#2)"));
-			return -EBUSY;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_delete_entry_by_ref(ktd, kentry_id);
+		ret = dpa_classif_table_delete_entry_by_ref(prm.td,
+							    prm.entry_id);
 
 		break;
 	}
 
 	case DPA_CLS_IOC_TBL_LOOKUP_BY_KEY:
 	{
-		struct dpa_cls_tbl_key		*ukey, kkey;
-		struct dpa_cls_tbl_action	*uaction, kaction;
-		int				*utd, ktd;
-
+		struct ioc_dpa_cls_tbl_lookup_by_key	prm;
 
 		/* Prepare arguments */
-		utd	= (int *)(args);
-		ukey	= (struct dpa_cls_tbl_key *)((void *)utd + sizeof(int));
-		uaction	= (struct dpa_cls_tbl_action *)((void*)ukey +
-					sizeof(struct dpa_cls_tbl_key));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+				(struct ioc_dpa_cls_tbl_lookup_by_key *) args,
+				sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_lookup_by_key user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(
-				&kkey,
-				ukey,
-				sizeof(struct dpa_cls_tbl_key))) {
-			xx_pr_err(("Could not read dpa_classif_table_lookup_by_key user space args (#2)"));
-			return -EBUSY;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_lookup_by_key(ktd, &kkey, &kaction);
+		ret = dpa_classif_table_lookup_by_key(prm.td,
+						      &prm.key,
+						      &prm.action);
 		if (ret < 0)
 			return ret;
 
 		/* Return results to user space */
-		if (copy_to_user(
-				uaction,
-				&kaction,
-				sizeof(struct dpa_cls_tbl_action))) {
+		if (copy_to_user((void *) args, &prm, sizeof(prm))) {
 			xx_pr_err(("Could not write dpa_classif_table_lookup_by_key result"));
 			return -EBUSY;
 		}
@@ -517,37 +325,26 @@ long wrp_dpa_classif_ioctl(
 
 	case DPA_CLS_IOC_TBL_LOOKUP_BY_REF:
 	{
-		int				*uentry_id, kentry_id;
-		struct dpa_cls_tbl_action	*uaction, kaction;
-		int				*utd, ktd;
+		struct ioc_dpa_cls_tbl_lookup_by_ref	prm;
 
 
 		/* Prepare arguments */
-		utd		= (int *)(args);
-		uentry_id	= (int *)((void *)utd + sizeof(int));
-		uaction		= (struct dpa_cls_tbl_action *)
-					((void *)uentry_id + sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+				(struct ioc_dpa_cls_tbl_lookup_by_ref *) args,
+				sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_lookup_by_ref user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(&kentry_id, uentry_id, sizeof(int))) {
-			xx_pr_err(("Could not read dpa_classif_table_lookup_by_ref user space args (#2)"));
-			return -EBUSY;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_lookup_by_ref(ktd, kentry_id, &kaction);
+		ret = dpa_classif_table_lookup_by_ref(prm.td,
+						      prm.entry_id,
+						      &prm.action);
 		if (ret < 0)
 			return ret;
 
 		/* Return results to user space */
-		if (copy_to_user(
-				uaction,
-				&kaction,
-				sizeof(struct dpa_cls_tbl_action))) {
+		if (copy_to_user((void *) args, &prm, sizeof(prm))) {
 			xx_pr_err(("Could not write dpa_classif_table_lookup_by_ref result"));
 			return -EBUSY;
 		}
@@ -561,43 +358,26 @@ long wrp_dpa_classif_ioctl(
 
 	case DPA_CLS_IOC_TBL_GET_STATS_BY_KEY:
 	{
-		struct dpa_cls_tbl_key		*ukey, kkey;
-		int				*utd, ktd;
-		struct dpa_cls_tbl_entry_stats	*ustats, kstats;
+		struct ioc_dpa_cls_tbl_entry_stats_by_key	prm;
 
 
 		/* Prepare arguments */
-		utd	= (int *)(args);
-		ukey	= (struct dpa_cls_tbl_key *)((void *)utd + sizeof(int));
-		ustats	= (struct dpa_cls_tbl_entry_stats *)((void*)ukey +
-						sizeof(struct dpa_cls_tbl_key));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+			(struct ioc_dpa_cls_tbl_entry_stats_by_key *) args,
+			sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_get_entry_stats_by_key user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(
-				&kkey,
-				ukey,
-				sizeof(struct dpa_cls_tbl_key))) {
-			xx_pr_err(("Could not read dpa_classif_table_get_entry_stats_by_key user space args (#2)"));
-			return -EBUSY;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_get_entry_stats_by_key(
-							ktd,
-							&kkey,
-							&kstats);
+		ret = dpa_classif_table_get_entry_stats_by_key(prm.td,
+							       &prm.key,
+							       &prm.stats);
 		if (ret < 0)
 			return ret;
 
 		/* Return results to user space */
-		if (copy_to_user(
-				ustats,
-				&kstats,
-				sizeof(struct dpa_cls_tbl_entry_stats))) {
+		if (copy_to_user((void *) args, &prm, sizeof(prm))) {
 			xx_pr_err(("Could not write dpa_classif_table_get_entry_stats_by_key result"));
 			return -EBUSY;
 		}
@@ -607,40 +387,26 @@ long wrp_dpa_classif_ioctl(
 
 	case DPA_CLS_IOC_TBL_GET_STATS_BY_REF:
 	{
-		int				*uentry_id, kentry_id;
-		int				*utd, ktd;
-		struct dpa_cls_tbl_entry_stats	*ustats, kstats;
+		struct ioc_dpa_cls_tbl_entry_stats_by_ref	prm;
 
 
 		/* Prepare arguments */
-		utd		= (int *)(args);
-		uentry_id	= (int *)((void *)utd + sizeof(int));
-		ustats		= (struct dpa_cls_tbl_entry_stats *)
-					((void *)uentry_id + sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+			(struct ioc_dpa_cls_tbl_entry_stats_by_ref *) args,
+			sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_get_entry_stats_by_ref user space args (#1)"));
 			return -EBUSY;
 		}
 
-		if (copy_from_user(&kentry_id, uentry_id, sizeof(int))) {
-			xx_pr_err(("Could not read dpa_classif_table_get_entry_stats_by_ref user space args (#2)"));
-			return -EBUSY;
-		}
-
 		/* Call function */
-		ret = dpa_classif_table_get_entry_stats_by_ref(
-							ktd,
-							kentry_id,
-							&kstats);
+		ret = dpa_classif_table_get_entry_stats_by_ref(prm.td,
+							       prm.entry_id,
+							       &prm.stats);
 		if (ret < 0)
 			return ret;
 
 		/* Return results to user space */
-		if (copy_to_user(
-				ustats,
-				&kstats,
-				sizeof(struct dpa_cls_tbl_entry_stats))) {
+		if (copy_to_user((void *) args, &prm, sizeof(prm))) {
 			xx_pr_err(("Could not write dpa_classif_table_get_entry_stats_by_ref result"));
 			return -EBUSY;
 		}
@@ -650,30 +416,24 @@ long wrp_dpa_classif_ioctl(
 
 	case DPA_CLS_IOC_TBL_GET_PARAMS:
 	{
-		struct dpa_cls_tbl_params		*uparams, kparams;
-		int					*utd, ktd;
+		struct ioc_dpa_cls_tbl_params	prm;
 
 
 		/* Prepare arguments */
-		utd	= (int *)(args);
-		uparams	= (struct dpa_cls_tbl_params *)
-				((void *)utd + sizeof(int));
-
-		if (copy_from_user(&ktd, utd, sizeof(int))) {
+		if (copy_from_user(&prm,
+				   (struct ioc_dpa_cls_tbl_params *) args,
+				   sizeof(prm))) {
 			xx_pr_err(("Could not read dpa_classif_table_lookup_by_key user space args (#1)"));
 			return -EBUSY;
 		}
 
 		/* Call function */
-		ret = dpa_classif_table_get_params(ktd, &kparams);
+		ret = dpa_classif_table_get_params(prm.td, &prm.tbl_params);
 		if (ret < 0)
 			return ret;
 
 		/* Return results to user space */
-		if (copy_to_user(
-				uparams,
-				&kparams,
-				sizeof(struct dpa_cls_tbl_params))) {
+		if (copy_to_user((void *) args, &prm, sizeof(prm))) {
 			xx_pr_err(("Could not write dpa_classif_table_get_params result"));
 			return -EBUSY;
 		}
-- 
1.7.5.4

