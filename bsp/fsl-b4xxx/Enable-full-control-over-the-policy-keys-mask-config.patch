From 0c65c6b369fce79c76e851e7a8ed1eda3eb59ce9 Mon Sep 17 00:00:00 2001
From: Mihai Serb <mihai.serb@freescale.com>
Date: Fri, 27 Jul 2012 22:26:11 +0000
Subject: [PATCH 233/518] Enable full control over the policy keys' mask
 configuration

Add a filed which enables the masking of the protocol field and thus
allow the DPA IPSec instance to build the mask for a specific
policy key based solely on the values of the masking parameters
(one for each possible field in the policy key) provided by the
upper layer.

Signed-off-by: Mihai Serb <mihai.serb@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c |   13 +++----------
 drivers/staging/fsl_dpa_offload/dpa_ipsec.h |    4 +++-
 include/linux/fsl_dpa_ipsec.h               |    1 +
 3 files changed, 7 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index 63330fc..d744ece 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -1034,16 +1034,8 @@ static int fill_policy_key(int td,
 			break;
 
 		case DPA_IPSEC_KEY_FIELD_PROTO:
-			if (pol_sel->protocol) {
-				SET_IP_PROTO_IN_KEY(key, offset,
-						    pol_sel->protocol);
-				SET_IP_PROTO_MASK(mask, offset, 0xFF);
-			} else {
-				/* ignore protocol field */
-				SET_IP_PROTO_IN_KEY(key, offset,
-						    DPA_IPSEC_DEF_PAD_VAL);
-				SET_IP_PROTO_MASK(mask, offset, 0x00);
-			}
+			SET_IP_PROTO_IN_KEY(key, offset, pol_sel->protocol);
+			SET_IP_PROTO_MASK(mask, offset, pol_sel->masked_proto);
 			offset += IP_PROTO_FIELD_LEN;
 			break;
 
@@ -2206,6 +2198,7 @@ static void copy_policy_selectors(struct dpa_ipsec_policy_params *policy_params,
 	policy_selectors->dest_addr = policy_params->dest_addr;
 	policy_selectors->dest_prefix_len = policy_params->dest_prefix_len;
 	policy_selectors->protocol = policy_params->protocol;
+	policy_selectors->masked_proto = policy_params->masked_proto;
 	policy_selectors->src_port = policy_params->src_port;
 	policy_selectors->src_port_mask = policy_params->src_port_mask;
 	policy_selectors->dest_port = policy_params->dest_port;
diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.h b/drivers/staging/fsl_dpa_offload/dpa_ipsec.h
index 1c13831..3bc7b21 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.h
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.h
@@ -152,7 +152,8 @@
 	(IPv4_ADDR_SIZE_IN_BYTES) : (IPv6_ADDR_SIZE_IN_BYTES))
 
 #define SET_IP_PROTO_IN_KEY(_key, _off, _val) (_key[_off] = _val)
-#define SET_IP_PROTO_MASK(_mask, _off, _val) (_mask[_off] = _val)
+#define SET_IP_PROTO_MASK(_mask, _off, _is_masked) \
+		(_mask[_off] = _is_masked ? 0x00 : 0xFF)
 #define SET_L4_PORT_MASK(_mask, _off, _val) \
 		(*(uint16_t *) &(_mask[_off]) = _val)
 
@@ -337,6 +338,7 @@ struct dpa_ipsec_policy_selectors {
 	struct dpa_ipsec_ip_address dest_addr;	/* Destination IP address     */
 	uint8_t dest_prefix_len;	/* Destination network prefix	      */
 	uint8_t protocol;	/* Protocol				      */
+	bool	masked_proto;	/* Mask the entire protocol field	      */
 	uint16_t dest_port;	/* Destination port			      */
 	uint16_t dest_port_mask;	/* Destination port mask	      */
 	uint16_t src_port;	/* Source port				      */
diff --git a/include/linux/fsl_dpa_ipsec.h b/include/linux/fsl_dpa_ipsec.h
index de722bd..e2459e5 100644
--- a/include/linux/fsl_dpa_ipsec.h
+++ b/include/linux/fsl_dpa_ipsec.h
@@ -438,6 +438,7 @@ struct dpa_ipsec_policy_params {
 	struct dpa_ipsec_ip_address dest_addr;	/**< Destination IP address   */
 	uint8_t dest_prefix_len; /* Destination network prefix		      */
 	uint8_t protocol;	/* Protocol				      */
+	bool masked_proto;	/* Mask the entire protocol field	      */
 	uint16_t dest_port;	/* Destination port			      */
 	uint16_t dest_port_mask;/* Destination port mask		      */
 	uint16_t src_port;	/* Source port				      */
-- 
1.7.5.4

