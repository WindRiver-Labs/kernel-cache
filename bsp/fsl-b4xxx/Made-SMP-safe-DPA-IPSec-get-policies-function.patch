From 98c92e43ba241527d93d6c69defb12a6cb8c0a70 Mon Sep 17 00:00:00 2001
From: andrei varvara <andrei.varvara@freescale.com>
Date: Fri, 18 May 2012 20:54:24 +0000
Subject: [PATCH 177/518] Made SMP safe DPA IPSec get policies function

lock the SA structure. return if lock is contended

Signed-off-by: Andrei Varvara <andrei.varvara@freescale.com>
Acked-by: Mihai Serb <mihai.serb@freescale.com>
[Grabbed from the branch, LINUX_IR5.2.0, of
https://git.freescale.com/git-private/cgit.cgi/ppc/alu-b4860/linux.git.]
Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 drivers/staging/fsl_dpa_offload/dpa_ipsec.c |   23 +++++++++++++++--------
 1 files changed, 15 insertions(+), 8 deletions(-)

diff --git a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
index f60cb82..04964e7 100644
--- a/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
+++ b/drivers/staging/fsl_dpa_offload/dpa_ipsec.c
@@ -4088,35 +4088,42 @@ int dpa_ipsec_sa_get_policies(int sa_id,
 			      int *num_pol)
 {
 	struct dpa_ipsec_sa *sa;
-	int err;
+	int ret;
 
 	if (sa_id < 0) {
 		xx_pr_err("Invalid SA id");
 		return -EINVAL;
 	}
 
+	if (!num_pol) {
+		xx_pr_err("Invalid num_pol parameter handle\n");
+		return -EINVAL;
+	}
+
 	sa = get_sa_from_sa_id(sa_id);
 	if (!sa) {
 		pr_err("Invalid SA handle\n");
 		return -EINVAL;
 	}
 
-	if (!num_pol) {
-		xx_pr_err("Invalid num_pol parameter handle\n");
-		return -EINVAL;
+	ret = mutex_trylock(&sa->lock);
+	if (ret == 0) {
+		xx_pr_err("Failed to acquire lock for SA %d\n", sa->id);
+		return -EBUSY;
 	}
 
 	if (!policy_params) {
 		/* get the number of policies for SA with id sa_id */
 		*num_pol = get_policy_count_for_sa(sa);
+		mutex_unlock(&sa->lock);
 		return 0;
 	}
 
-	err = copy_all_policies(sa, policy_params, *num_pol);
-	if (err < 0)
-		return err;
+	ret = copy_all_policies(sa, policy_params, *num_pol);
 
-	return 0;
+	mutex_unlock(&sa->lock);
+
+	return ret;
 }
 EXPORT_SYMBOL(dpa_ipsec_sa_get_policies);
 
-- 
1.7.5.4

