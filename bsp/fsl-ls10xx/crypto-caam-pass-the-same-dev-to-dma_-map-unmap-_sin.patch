From e610b4e5a586ce3347d3b52c4aab596ed0e1ffc9 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 29 Oct 2014 09:48:42 +0800
Subject: [PATCH 1/2] crypto: caam: pass the same dev to
 dma_{map,unmap}_single

In the current code, two struct device are used to map and umap dma
memories respectively. One is embedded in platform_device, and the
other is the one embedded in net_device. The content of these devices
are the same, but it will trigger a warning when CONFIG_DMA_API_DEBUG
is enabled:
  WARNING: CPU: 0 PID: 0 at lib/dma-debug.c:1080 check_unmap+0x168/0x84c()
  caam_jr 1710000.jr: DMA-API: device driver tries to free DMA memory it has not allocated [device address=0x0000000087d10084] [size=16 bytes]
  Modules linked in:
  CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.14.22-WR7.0.0.0_standard #1
  [<80017cb0>] (unwind_backtrace) from [<800127d4>] (show_stack+0x20/0x24)
  [<800127d4>] (show_stack) from [<806bc064>] (dump_stack+0x74/0xc0)
  usb 1-1: new high-speed USB device number 2 using xhci-hcd
  [<806bc064>] (dump_stack) from [<80025ce0>] (warn_slowpath_common+0x7c/0xa0)
  [<80025ce0>] (warn_slowpath_common) from [<80025d44>] (warn_slowpath_fmt+0x40/0x48)
  [<80025d44>] (warn_slowpath_fmt) from [<803d8b54>] (check_unmap+0x168/0x84c)
  [<803d8b54>] (check_unmap) from [<803d92a4>] (debug_dma_unmap_page+0x6c/0x78)
  [<803d92a4>] (debug_dma_unmap_page) from [<805497b8>] (caam_jr_dequeue+0x1a0/0x27c)
  [<805497b8>] (caam_jr_dequeue) from [<805bc89c>] (net_rx_action+0x100/0x264)
  [<805bc89c>] (net_rx_action) from [<8002aae0>] (__do_softirq+0x150/0x33c)
  [<8002aae0>] (__do_softirq) from [<8002af54>] (irq_exit+0x94/0xb8)
  [<8002af54>] (irq_exit) from [<8000f368>] (handle_IRQ+0x7c/0xa0)
  [<8000f368>] (handle_IRQ) from [<80008564>] (gic_handle_irq+0x4c/0x70)
  [<80008564>] (gic_handle_irq) from [<806c1bc0>] (__irq_svc+0x40/0x70)
  Exception stack(0x809f5eb0 to 0x809f5ef8)
  5ea0: 809f5ef8 00000001 237e5710 00000001
  5ec0: 00000000 bffdbf38 2377fb40 00000001 80a3fb40 00000000 80a3fb40 809f5f2c
  5ee0: 00000008 809f5ef8 80079b1c 8052ec94 00000113 ffffffff
  [<806c1bc0>] (__irq_svc) from [<8052ec94>] (cpuidle_enter_state+0x60/0xe8)
  [<8052ec94>] (cpuidle_enter_state) from [<8052ee90>] (cpuidle_idle_call+0x174/0x278)
  [<8052ee90>] (cpuidle_idle_call) from [<8000f6e0>] (arch_cpu_idle+0x18/0x48)
  [<8000f6e0>] (arch_cpu_idle) from [<8006c9a0>] (cpu_startup_entry+0x1bc/0x240)
  [<8006c9a0>] (cpu_startup_entry) from [<806b606c>] (rest_init+0x80/0x98)
  [<806b606c>] (rest_init) from [<8096eba4>] (start_kernel+0x37c/0x3e0)
  [<8096eba4>] (start_kernel) from [<80008084>] (0x80008084)

So make sure we pass the same device struct to the dma helper functions.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/crypto/caam/jr.c |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/drivers/crypto/caam/jr.c b/drivers/crypto/caam/jr.c
index 1f8e4d1..33e859dc 100644
--- a/drivers/crypto/caam/jr.c
+++ b/drivers/crypto/caam/jr.c
@@ -176,6 +176,7 @@ static int caam_jr_dequeue(struct napi_struct *napi, int budget)
 	void *userarg;
 	int cleaned = 0;
 
+	dev = jrp->dev;
 	while (rd_reg32(&jrp->rregs->outring_used) && cleaned < budget) {
 
 		head = ACCESS_ONCE(jrp->head);
-- 
1.7.5.4

