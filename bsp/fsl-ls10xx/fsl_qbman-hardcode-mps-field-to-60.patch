From cb08aa73ae0658cc2751670f501b3a7321b4b6a2 Mon Sep 17 00:00:00 2001
From: Haiying Wang <Haiying.Wang@freescale.com>
Date: Thu, 4 Jun 2015 15:49:39 -0400
Subject: [PATCH 54/70] fsl_qbman: hardcode mps field to 60

In LNI shaper setup, setting mps to 60 to round up the frame length
to 60 for shaper calculations, for any dequeued frame length less
than 60 bytes.

Signed-off-by: Haiying Wang <Haiying.Wang@freescale.com>
Change-Id: I88013d2ee39b3620a4e97f3366a87664ec0ea9dc
Reviewed-on: http://git.am.freescale.net:8181/37437
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Roy Pledge <roy.pledge@freescale.com>
Reviewed-by: Honghua Yin <Hong-Hua.Yin@freescale.com>
[czou:Original patch taken from
LS1021A-IOT-Rev2-v0.4-20150907-yocto.iso]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |    5 ++++-
 include/linux/fsl_qman.h              |    6 ++++--
 2 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index e47d571..aa80f21 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -3461,6 +3461,7 @@ int qman_ceetm_lni_enable_shaper(struct qm_ceetm_lni *lni, int coupled,
 			 lni->er_token_rate.fraction;
 	config_opts.shaper_config.crtbl = lni->cr_token_bucket_limit;
 	config_opts.shaper_config.ertbl = lni->er_token_bucket_limit;
+	config_opts.shaper_config.mps = 60;
 	return qman_ceetm_configure_mapping_shaper_tcfc(&config_opts);
 }
 EXPORT_SYMBOL(qman_ceetm_lni_enable_shaper);
@@ -3484,6 +3485,7 @@ int qman_ceetm_lni_disable_shaper(struct qm_ceetm_lni *lni)
 	 */
 	config_opts.shaper_config.crtcr = 0xFFFFFF;
 	config_opts.shaper_config.ertcr = 0xFFFFFF;
+	config_opts.shaper_config.mps = 60;
 	lni->shaper_enable = 0;
 	return qman_ceetm_configure_mapping_shaper_tcfc(&config_opts);
 }
@@ -3527,6 +3529,7 @@ int qman_ceetm_lni_set_commit_rate(struct qm_ceetm_lni *lni,
 					query_result.shaper_query.ertcr;
 		config_opts.shaper_config.ertbl =
 					query_result.shaper_query.ertbl;
+		config_opts.shaper_config.mps = query_result.shaper_query.mps;
 		return	qman_ceetm_configure_mapping_shaper_tcfc(&config_opts);
 	} else {
 		return 0;
@@ -3622,7 +3625,7 @@ int qman_ceetm_lni_set_excess_rate(struct qm_ceetm_lni *lni,
 					query_result.shaper_query.crtcr;
 		config_opts.shaper_config.crtbl =
 					query_result.shaper_query.crtbl;
-
+		config_opts.shaper_config.mps = query_result.shaper_query.mps;
 		return qman_ceetm_configure_mapping_shaper_tcfc(&config_opts);
 	} else {
 		return 0;
diff --git a/include/linux/fsl_qman.h b/include/linux/fsl_qman.h
index 2c67ccd..2004aa8 100644
--- a/include/linux/fsl_qman.h
+++ b/include/linux/fsl_qman.h
@@ -789,7 +789,8 @@ struct qm_mcc_ceetm_mapping_shaper_tcfc_config {
 			u32 ertcr:24;
 			u16 crtbl;
 			u16 ertbl;
-			u8 __reserved2[48];
+			u8 mps;	/* This will be hardcoded by driver with 60 */
+			u8 __reserved2[47];
 		} __packed shaper_config;
 		struct {
 			u8 __reserved2[11];
@@ -1203,7 +1204,8 @@ struct qm_mcr_ceetm_mapping_shaper_tcfc_query {
 			u32 ertcr:24;
 			u16 crtbl;
 			u16 ertbl;
-			u8 __reserved2[16];
+			u8 mps;
+			u8 __reserved2[15];
 			u32 crat;
 			u32 erat;
 			u8 __reserved3[24];
-- 
1.7.5.4

