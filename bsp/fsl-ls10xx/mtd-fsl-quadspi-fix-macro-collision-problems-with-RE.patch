From d0abd399db07685d32452d12bc0a88593aecd85e Mon Sep 17 00:00:00 2001
From: Ovidiu Panait <ovidiu.panait@windriver.com>
Date: Tue, 12 Feb 2019 10:23:51 +0200
Subject: [PATCH] mtd: fsl-quadspi: fix macro collision problems with
 READ/WRITE"

commit 6c1ad49339f46ff453d6f07be7d63fd495069bfe from
https://github.com/Freescale/linux-fslc.git

Mainline commit 9386aae907d9ee79d54640f09d70909393e0ddeb addresses
macro collisions, however the mainline and downstream kernel driver
do not match.

Fix the issue addressed in mainline in the downstream codebase.

Signed-off-by: Max Krummenacher <max.krummenacher@toradex.com>
Signed-off-by: Otavio Salvador <otavio@ossystems.com.br>
[OP: adjusted context for fsl_ls10xx branch]
Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
---
 drivers/mtd/spi-nor/fsl-quadspi.c |   66 +++++++++++++++++--------------------
 1 file changed, 31 insertions(+), 35 deletions(-)

diff --git a/drivers/mtd/spi-nor/fsl-quadspi.c b/drivers/mtd/spi-nor/fsl-quadspi.c
index cdf8005..5d4d303 100644
--- a/drivers/mtd/spi-nor/fsl-quadspi.c
+++ b/drivers/mtd/spi-nor/fsl-quadspi.c
@@ -172,7 +172,7 @@
 /* Macros for constructing the LUT register. */
 #define LUT0(ins, pad, opr)						\
 		(((opr) << OPRND0_SHIFT) | ((LUT_##pad) << PAD0_SHIFT) | \
-		((LUT_##ins) << INSTR0_SHIFT))
+		((ins) << INSTR0_SHIFT))
 
 #define LUT1(ins, pad, opr)	(LUT0(ins, pad, opr) << OPRND1_SHIFT)
 
@@ -334,13 +334,12 @@ static void fsl_qspi_init_lut(struct fsl_qspi *q)
 		if (op == SPINOR_OP_READ_1_1_4 || op == SPINOR_OP_READ4_1_1_4) {
 			/* read mode : 1-1-4 */
 			qspi_writel(q,
-				LUT0(CMD, PAD1, op) | LUT1(ADDR, PAD1, addrlen),
-				base + QUADSPI_LUT(lut_base));
+				LUT0(LUT_CMD, PAD1, op) | LUT1(LUT_ADDR, PAD1,
+				addrlen), base + QUADSPI_LUT(lut_base));
 
 			qspi_writel(q,
-				LUT0(DUMMY, PAD1, dm)
-				| LUT1(READ, PAD4, rxfifo),
-				base + QUADSPI_LUT(lut_base + 1));
+				LUT0(LUT_DUMMY, PAD1, dm) | LUT1(LUT_READ, PAD4,
+				rxfifo), base + QUADSPI_LUT(lut_base + 1));
 		} else {
 			dev_err(nor->dev, "Unsupported opcode : 0x%.2x\n", op);
 		}
@@ -348,28 +347,28 @@ static void fsl_qspi_init_lut(struct fsl_qspi *q)
 		if (op == SPINOR_OP_READ_1_4_4_D ||
 			 op == SPINOR_OP_READ4_1_4_4_D) {
 			/* read mode : 1-4-4, such as Spansion s25fl128s. */
-			qspi_writel(q, LUT0(CMD, PAD1, op)
-				| LUT1(ADDR_DDR, PAD4, addrlen),
+			qspi_writel(q, LUT0(LUT_CMD, PAD1, op)
+				| LUT1(LUT_ADDR_DDR, PAD4, addrlen),
 				base + QUADSPI_LUT(lut_base));
 
-			qspi_writel(q, LUT0(MODE_DDR, PAD4, 0xff)
-				| LUT1(DUMMY, PAD1, dm),
+			qspi_writel(q, LUT0(LUT_MODE_DDR, PAD4, 0xff)
+				| LUT1(LUT_DUMMY, PAD1, dm),
 				base + QUADSPI_LUT(lut_base + 1));
 
-			qspi_writel(q, LUT0(READ_DDR, PAD4, rxfifo)
-				| LUT1(JMP_ON_CS, PAD1, 0),
+			qspi_writel(q, LUT0(LUT_READ_DDR, PAD4, rxfifo)
+				| LUT1(LUT_JMP_ON_CS, PAD1, 0),
 				base + QUADSPI_LUT(lut_base + 2));
 		} else if (op == SPINOR_OP_READ_1_1_4_D) {
 			/* read mode : 1-1-4, such as Micron N25Q256A. */
-			qspi_writel(q, LUT0(CMD, PAD1, op)
-				| LUT1(ADDR_DDR, PAD1, addrlen),
+			qspi_writel(q, LUT0(LUT_CMD, PAD1, op)
+				| LUT1(LUT_ADDR_DDR, PAD1, addrlen),
 				base + QUADSPI_LUT(lut_base));
 
-			qspi_writel(q, LUT0(DUMMY, PAD1, dm)
-				| LUT1(READ_DDR, PAD4, rxfifo),
+			qspi_writel(q, LUT0(LUT_DUMMY, PAD1, dm)
+				| LUT1(LUT_READ_DDR, PAD4, rxfifo),
 				base + QUADSPI_LUT(lut_base + 1));
 
-			qspi_writel(q, LUT0(JMP_ON_CS, PAD1, 0),
+			qspi_writel(q, LUT0(LUT_JMP_ON_CS, PAD1, 0),
 				base + QUADSPI_LUT(lut_base + 2));
 		} else {
 			dev_err(nor->dev, "Unsupported opcode : 0x%.2x\n", op);
@@ -378,61 +377,58 @@ static void fsl_qspi_init_lut(struct fsl_qspi *q)
 
 	/* Write enable */
 	lut_base = SEQID_WREN * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_WREN),
-			base + QUADSPI_LUT(lut_base));
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_WREN),
+		base + QUADSPI_LUT(lut_base));
 
 	/* Page Program */
 	lut_base = SEQID_PP * 4;
-	qspi_writel(q, LUT0(CMD, PAD1,
-			nor->program_opcode) | LUT1(ADDR, PAD1, addrlen),
-			base + QUADSPI_LUT(lut_base));
-	qspi_writel(q, LUT0(WRITE, PAD1, 0), base + QUADSPI_LUT(lut_base + 1));
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, nor->program_opcode) | LUT1(LUT_ADDR, PAD1,
+			addrlen), base + QUADSPI_LUT(lut_base));
+	qspi_writel(q, LUT0(LUT_WRITE, PAD1, 0), base + QUADSPI_LUT(lut_base + 1));
 
 	/* Read Status */
 	lut_base = SEQID_RDSR * 4;
-	qspi_writel(q, LUT0(CMD, PAD1,
-			SPINOR_OP_RDSR) | LUT1(READ, PAD1, 0x1),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_RDSR) | LUT1(LUT_READ, PAD1, 0x1),
 			base + QUADSPI_LUT(lut_base));
 
 	/* Erase a sector */
 	lut_base = SEQID_SE * 4;
-	qspi_writel(q, LUT0(CMD, PAD1,
-			nor->erase_opcode) | LUT1(ADDR, PAD1, addrlen),
-			base + QUADSPI_LUT(lut_base));
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, nor->erase_opcode) | LUT1(LUT_ADDR, PAD1,
+			addrlen), base + QUADSPI_LUT(lut_base));
 
 	/* Erase the whole chip */
 	lut_base = SEQID_CHIP_ERASE * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_CHIP_ERASE),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_CHIP_ERASE),
 			base + QUADSPI_LUT(lut_base));
 
 	/* READ ID */
 	lut_base = SEQID_RDID * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_RDID) | LUT1(READ, PAD1, 0x8),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_RDID) | LUT1(LUT_READ, PAD1, 0x8),
 			base + QUADSPI_LUT(lut_base));
 
 	/* Write Register */
 	lut_base = SEQID_WRSR * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_WRSR) | LUT1(WRITE, PAD1, 0x2),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_WRSR) | LUT1(LUT_WRITE, PAD1, 0x2),
 			base + QUADSPI_LUT(lut_base));
 
 	/* Read Configuration Register */
 	lut_base = SEQID_RDCR * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_RDCR) | LUT1(READ, PAD1, 0x1),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_RDCR) | LUT1(LUT_READ, PAD1, 0x1),
 			base + QUADSPI_LUT(lut_base));
 
 	/* Write disable */
 	lut_base = SEQID_WRDI * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_WRDI),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_WRDI),
 			base + QUADSPI_LUT(lut_base));
 
 	/* Enter 4 Byte Mode (Micron) */
 	lut_base = SEQID_EN4B * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_EN4B),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_EN4B),
 			base + QUADSPI_LUT(lut_base));
 
 	/* Enter 4 Byte Mode (Spansion) */
 	lut_base = SEQID_BRWR * 4;
-	qspi_writel(q, LUT0(CMD, PAD1, SPINOR_OP_BRWR),
+	qspi_writel(q, LUT0(LUT_CMD, PAD1, SPINOR_OP_BRWR),
 			base + QUADSPI_LUT(lut_base));
 
 	fsl_qspi_lock_lut(q);
-- 
1.7.9.5

