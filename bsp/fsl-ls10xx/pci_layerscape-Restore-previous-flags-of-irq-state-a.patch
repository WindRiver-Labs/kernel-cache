From 629e3ba0c49747054a73eaf2108ee9613deecb1c Mon Sep 17 00:00:00 2001
From: Qi Hou <qi.hou@windriver.com>
Date: Wed, 18 May 2016 18:08:42 +0800
Subject: [PATCH] pci_layerscape : Restore previous flags of irq state after
 generic_handle_irq()

Since generic_handle_irq() should always be called in interrupt disabled context,it must
be ensured that interrupts hasn't been enabled.In the body of ls_pcie_msi_irq_handler(),
interrupts will be enabled,but it is in the domain of generic_handle_irq().

The call trace of ls_pcie_msi_irq_handler like below:
handle_IRQ()
	|-> generic_handle_irq()
		|-> handle_fasteoi_irq()
			|-> handle_irq_event()
				|-> handle_irq_event_percpu()
					|-> action->handler() --- ls_pcie_msi_irq_handler()
					|	|-> local_irq_disable();
					|	|-> local_irq_enable();
					|

This will cause a dump_stack() to notify this error, the output like below:

WARNING: CPU: 0 PID: 0 at kernel/irq/handle.c:148 handle_irq_event_percpu+0x2f8/0x308()
r8168: eth3: link up
irq 211 handler ls_pcie_msi_irq_handler+0x0/0xb8 enabled interrupts
Modules linked in: r8168(O)
CPU: 0 PID: 0 Comm: swapper/0 Tainted: G O 3.14.39ltsi-rt37-WR7.0.0.12_preempt-rt #20
[<80018ff8>] (unwind_backtrace) from [<80013664>] (show_stack+0x20/0x24)
[<80013664>] (show_stack) from [<807b2b38>] (dump_stack+0x84/0xd0)
[<807b2b38>] (dump_stack) from [<800297c0>] (warn_slowpath_common+0x84/0xa0)
[<800297c0>] (warn_slowpath_common) from [<8002981c>] (warn_slowpath_fmt+0x40/0x48)
[<8002981c>] (warn_slowpath_fmt) from [<8007d860>] (handle_irq_event_percpu+0x2f8/0x308)
[<8007d860>] (handle_irq_event_percpu) from [<8007d8e8>] (handle_irq_event+0x78/0xb8)
[<8007d8e8>] (handle_irq_event) from [<80081090>] (handle_fasteoi_irq+0x90/0x1a4)
[<80081090>] (handle_fasteoi_irq) from [<8007cba8>] (generic_handle_irq+0x3c/0x4c)
[<8007cba8>] (generic_handle_irq) from [<8000fddc>] (handle_IRQ+0x50/0xa0)
[<8000fddc>] (handle_IRQ) from [<800085ac>] (gic_handle_irq+0x3c/0x6c)
[<800085ac>] (gic_handle_irq) from [<80014240>] (__irq_svc+0x40/0x84)

To fix this bug,local_irq_enable() should be substituted by local_irq_restore() to restore
the irq state.

Signed-off-by: Qi Hou <qi.hou@windriver.com>
---
 drivers/pci/host/pci-layerscape.c |    5 +++--
 1 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/drivers/pci/host/pci-layerscape.c b/drivers/pci/host/pci-layerscape.c
index df6e59a..3bbdc23 100644
--- a/drivers/pci/host/pci-layerscape.c
+++ b/drivers/pci/host/pci-layerscape.c
@@ -88,6 +88,7 @@ static irqreturn_t ls_pcie_msi_irq_handler(int irq, void *data)
 	struct ls_pcie *pcie = to_ls_pcie(pp);
 	unsigned long val;
 	int msi_irq, ret, pos;
+	unsigned long flags;
 
 	regmap_read(pcie->scfg, LS1021A_MSIR_OFF(pcie->index), (u32 *) &val);
 
@@ -107,11 +108,11 @@ static irqreturn_t ls_pcie_msi_irq_handler(int irq, void *data)
 			}
 
 	#if defined(CONFIG_PREEMPT_RT_FULL) || defined(CONFIG_PREEMPT_RTB)
-			local_irq_disable();
+			local_irq_save(flags);
 	#endif
 			generic_handle_irq(msi_irq);
 	#if defined(CONFIG_PREEMPT_RT_FULL) || defined(CONFIG_PREEMPT_RTB)
-			local_irq_enable();
+			local_irq_restore(flags);
 	#endif
 			ret = IRQ_HANDLED;
 			pos++;
-- 
1.7.5.4

