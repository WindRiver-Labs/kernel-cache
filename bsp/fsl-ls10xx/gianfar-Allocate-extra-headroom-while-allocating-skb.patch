From 6ad8ce4215a073b4b7ead3f62ab5c6ecc0c35501 Mon Sep 17 00:00:00 2001
From: Alok Makhariya <B46187@freescale.com>
Date: Fri, 28 Mar 2014 18:19:53 +0530
Subject: [PATCH 048/129] gianfar: Allocate extra headroom while allocating
 skb in gianfar

ASF requires some extra headrom for IPSec processing.
During IPSec processing packet size increases adding
the Outer IP header, ESP header, ICV and Padding to
the packet. In case the headroom/tailroom is not
present copy of packet is made. Reserved that required
extra headroom while allocating the buffer in gianfar,
so that packet copy is avoided

CQ ID : ENGR00304852
Change-Id: I2580bf20fb2acd5a9ced4166375ca22f56f764fe
Signed-off-by: Alok Makhariya <B46187@freescale.com>
Reviewed-on: http://git.am.freescale.net:8181/10356
Reviewed-by: Rajan Gupta <rajan.gupta@freescale.com>
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Jose Rivera <German.Rivera@freescale.com>
[Xulin: Original patch taken from
Freescale-Linux-SDK-for-LS1021A-IOT-Rev2-v0.4-SOURCE-20150907-yocto.iso]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/ethernet/freescale/gianfar.c |    5 +++++
 drivers/net/ethernet/freescale/gianfar.h |    8 ++++++++
 2 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index 58bd7f4f..c16e569 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -2715,7 +2715,12 @@ static struct sk_buff *gfar_alloc_skb(struct net_device *dev)
 	struct gfar_private *priv = netdev_priv(dev);
 	struct sk_buff *skb;
 
+#ifndef CONFIG_AS_FASTPATH
 	skb = netdev_alloc_skb(dev, priv->rx_buffer_size + RXBUF_ALIGNMENT);
+#else
+	skb = netdev_alloc_skb(dev, priv->rx_buffer_size + RXBUF_ALIGNMENT +
+							EXTRA_HEADROOM);
+#endif
 	if (!skb)
 		return NULL;
 
diff --git a/drivers/net/ethernet/freescale/gianfar.h b/drivers/net/ethernet/freescale/gianfar.h
index ca8458f..6c1c256 100644
--- a/drivers/net/ethernet/freescale/gianfar.h
+++ b/drivers/net/ethernet/freescale/gianfar.h
@@ -79,6 +79,10 @@ struct ethtool_rx_list {
 /* Number of bytes to align the rx bufs to */
 #define RXBUF_ALIGNMENT 64
 
+#ifdef CONFIG_AS_FASTPATH
+/* Headroom required for IPSec processing in ASF */
+#define EXTRA_HEADROOM 128
+#endif
 /* The number of bytes which composes a unit for the purpose of
  * allocating data buffers.  ie-for any given MTU, the data buffer
  * will be the next highest multiple of 512 bytes. */
@@ -1671,6 +1675,10 @@ static inline void gfar_rx_checksum(struct sk_buff *skb, struct rxfcb *fcb)
 
 static inline void gfar_align_skb(struct sk_buff *skb)
 {
+#ifdef CONFIG_AS_FASTPATH
+	/* Reserving the extra headroom required for ASF IPSec processing */
+	skb_reserve(skb, EXTRA_HEADROOM);
+#endif
 	/* We need the data buffer to be aligned properly.  We will reserve
 	* as many bytes as needed to align the data properly
 	*/
-- 
1.7.5.4

