From ec3364dcd660fa1997ce857a20fd5c3ebdc2b4c7 Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Thu, 7 May 2015 11:04:30 +0800
Subject: [PATCH] driver:regmap: replace spin_lock_irqsave/unlock with
 raw_spin_lock_irqsave/unlock

While executing lspci to read PCIE configuration space for fsl ls1021a,
the following call trace is triggered.

BUG: sleeping function called from invalid context at locking/rtmutex.c:907
in_atomic(): 1, irqs_disabled(): 128, pid: 384, name: lspci
INFO: lockdep is turned off.
[<80018c90>] (unwind_backtrace) from [<8001385c>] (show_stack+0x20/0x24)
[<8001385c>] (show_stack) from [<807baf60>] (dump_stack+0x84/0xd0)
[<807baf60>] (dump_stack) from [<80062d14>] (__might_sleep+0x168/0x230)
[<80062d14>] (__might_sleep) from [<807c03e0>] (rt_spin_lock+0x34/0x68)
[<807c03e0>] (rt_spin_lock) from [<804adad0>] (regmap_lock_spinlock+0x24/0x30)
[<804adad0>] (regmap_lock_spinlock) from [<804ad834>] (regmap_read+0x40/0x70)
[<804ad834>] (regmap_read) from [<80443d98>] (ls_pcie_link_up+0x30/0x4c)
[<80443d98>] (ls_pcie_link_up) from [<80442d40>] (dw_pcie_valid_config.isra.12+0x48/0xa0)
[<80442d40>] (dw_pcie_valid_config.isra.12) from [<80442ea4>] (dw_pcie_rd_conf+0x50/0x184)
[<80442ea4>] (dw_pcie_rd_conf) from [<80427ebc>] (pci_user_read_config_dword+0x70/0xb4)
[<80427ebc>] (pci_user_read_config_dword) from [<80433564>] (pci_read_config+0x12c/0x2c4)
[<80433564>] (pci_read_config) from [<801f57d0>] (sysfs_kf_bin_read+0x68/0xa0)
[<801f57d0>] (sysfs_kf_bin_read) from [<801f978c>] (kernfs_fop_read+0xa4/0x16c)
[<801f978c>] (kernfs_fop_read) from [<80182944>] (vfs_read+0xa4/0x14c)
[<80182944>] (vfs_read) from [<801831c4>] (SyS_pread64+0x88/0xa0)
[<801831c4>] (SyS_pread64) from [<8000edc0>] (ret_fast_syscall+0x0/0x48)

function ls_pcie_link_up() invokes the regmap_read(), which would call the
rt_spin_lock() and might_sleep, but this function ls_pcie_link_up() is called
with irq disabled and in atomic, so we should use raw_spin_lock_irqsave/unlock.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/base/regmap/internal.h |    2 +-
 drivers/base/regmap/regmap.c   |    6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 33414b1..753d6e1 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -50,7 +50,7 @@ struct regmap_async {
 
 struct regmap {
 	struct mutex mutex;
-	spinlock_t spinlock;
+	raw_spinlock_t spinlock;
 	unsigned long spinlock_flags;
 	regmap_lock lock;
 	regmap_unlock unlock;
diff --git a/drivers/base/regmap/regmap.c b/drivers/base/regmap/regmap.c
index 978573f..3c0186d 100644
--- a/drivers/base/regmap/regmap.c
+++ b/drivers/base/regmap/regmap.c
@@ -342,7 +342,7 @@ __acquires(&map->spinlock)
 	struct regmap *map = __map;
 	unsigned long flags;
 
-	spin_lock_irqsave(&map->spinlock, flags);
+	raw_spin_lock_irqsave(&map->spinlock, flags);
 	map->spinlock_flags = flags;
 }
 
@@ -350,7 +350,7 @@ static void regmap_unlock_spinlock(void *__map)
 __releases(&map->spinlock)
 {
 	struct regmap *map = __map;
-	spin_unlock_irqrestore(&map->spinlock, map->spinlock_flags);
+	raw_spin_unlock_irqrestore(&map->spinlock, map->spinlock_flags);
 }
 
 static void dev_get_regmap_release(struct device *dev, void *res)
@@ -526,7 +526,7 @@ struct regmap *regmap_init(struct device *dev,
 	} else {
 		if ((bus && bus->fast_io) ||
 		    config->fast_io) {
-			spin_lock_init(&map->spinlock);
+			raw_spin_lock_init(&map->spinlock);
 			map->lock = regmap_lock_spinlock;
 			map->unlock = regmap_unlock_spinlock;
 		} else {
-- 
1.7.5.4

