From 4ecbefbb39213d3478826fb1e2ed1460a4e17263 Mon Sep 17 00:00:00 2001
From: Minghuan Lian <Minghuan.Lian@freescale.com>
Date: Wed, 30 Apr 2014 03:34:56 +0000
Subject: [PATCH 093/255] arm: pci: Add layerscape PCIe controller driver

Signed-off-by: Minghuan Lian <Minghuan.Lian@freescale.com>
[Kevin: Original patch taken from
LS1021A-SDK-V1.1-ARM-SOURCE-20140815-yocto.iso]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/arm/mach-imx/Kconfig          |   2 +
 drivers/pci/host/Kconfig           |   7 ++
 drivers/pci/host/Makefile          |   1 +
 drivers/pci/host/pcie-layerscape.c | 237 +++++++++++++++++++++++++++++++++++++
 4 files changed, 247 insertions(+)
 create mode 100644 drivers/pci/host/pcie-layerscape.c

diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index 125d276..e001b2f 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -147,6 +147,8 @@ config	FSL_SOC
 config ARCH_LAYERSCAPE
 	bool
 	select FSL_SOC
+	select MIGHT_HAVE_PCI
+	select PCI_DOMAINS if PCI
 
 if ARCH_MULTI_V4T
 
diff --git a/drivers/pci/host/Kconfig b/drivers/pci/host/Kconfig
index 47d46c6..a8704ed 100644
--- a/drivers/pci/host/Kconfig
+++ b/drivers/pci/host/Kconfig
@@ -33,4 +33,11 @@ config PCI_RCAR_GEN2
 	  There are 3 internal PCI controllers available with a single
 	  built-in EHCI/OHCI host controller present on each one.
 
+config PCIE_LAYERSCAPE
+	bool "Freescale Layerscape PCIe controller"
+	depends on OF
+	depends on ARCH_LAYERSCAPE
+	select PCIEPORTBUS
+	select PCIE_DW
+
 endmenu
diff --git a/drivers/pci/host/Makefile b/drivers/pci/host/Makefile
index 13fb333..c25e12c 100644
--- a/drivers/pci/host/Makefile
+++ b/drivers/pci/host/Makefile
@@ -4,3 +4,4 @@ obj-$(CONFIG_PCI_IMX6) += pci-imx6.o
 obj-$(CONFIG_PCI_MVEBU) += pci-mvebu.o
 obj-$(CONFIG_PCI_TEGRA) += pci-tegra.o
 obj-$(CONFIG_PCI_RCAR_GEN2) += pci-rcar-gen2.o
+obj-$(CONFIG_PCIE_LAYERSCAPE) += pcie-layerscape.o
diff --git a/drivers/pci/host/pcie-layerscape.c b/drivers/pci/host/pcie-layerscape.c
new file mode 100644
index 0000000..742c798
--- /dev/null
+++ b/drivers/pci/host/pcie-layerscape.c
@@ -0,0 +1,237 @@
+/*
+ * PCIe host controller driver for Freescale Layerscape SoCs
+ *
+ * Copyright (C) 2014 Freescale Semiconductor.
+ *
+  * Author: Minghuan Lian <Minghuan.Lian@freescale.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/mfd/syscon.h>
+#include <linux/module.h>
+#include <linux/of_pci.h>
+#include <linux/of_platform.h>
+#include <linux/of_irq.h>
+#include <linux/of_address.h>
+#include <linux/pci.h>
+#include <linux/platform_device.h>
+#include <linux/regmap.h>
+#include <linux/resource.h>
+#include <linux/signal.h>
+#include <linux/types.h>
+
+#include "pcie-designware.h"
+
+struct ls_pcie {
+	struct list_head node;
+	struct device *dev;
+	struct pci_bus *bus;
+	void __iomem *dbi;
+	void __iomem *scfg;
+	struct pcie_port pp;
+	int index;
+	int irq;
+	int msi_irq;
+	int pme_irq;
+	int cfg_irq;
+};
+
+/* PEX1/2 Misc Ports Status Register */
+#define PEXMSCPORTSR(idx)	(0x94 + (idx) * 4)
+#define LTSSM_STATE_SHIFT	11
+#define LTSSM_STATE_MASK	0x3f
+#define LTSSM_PCIE_L0		0x16 /* L0 state */
+
+static int global_index;
+static LIST_HEAD(ls_pcie_list);
+
+#define to_ls_pcie(x)	container_of(x, struct ls_pcie, pp)
+
+static int ls_pcie_link_up(struct pcie_port *pp)
+{
+	struct ls_pcie *pcie = to_ls_pcie(pp);
+	u32 rc;
+
+	/* RM did not say the value meaning */
+	rc = (readl(pcie->scfg + PEXMSCPORTSR(pcie->index)) >>
+	     LTSSM_STATE_SHIFT) | LTSSM_STATE_MASK;
+	if (rc < LTSSM_PCIE_L0)
+		return 0;
+
+	return 1;
+}
+
+/*
+static irqreturn_t ls_pcie_msi_irq_handler(int irq, void *arg)
+{
+	struct pcie_port *pp = arg;
+
+	dw_handle_msi_irq(pp);
+
+	return IRQ_HANDLED;
+}
+*/
+
+static void ls_pcie_host_init(struct pcie_port *pp)
+{
+	int count = 0;
+
+	dw_pcie_setup_rc(pp);
+
+	while (!ls_pcie_link_up(pp)) {
+		usleep_range(100, 1000);
+		count++;
+		if (count >= 200) {
+			dev_err(pp->dev, "phy link never came up\n");
+			return;
+		}
+	}
+
+	/*
+	if (IS_ENABLED(CONFIG_PCI_MSI)) {
+		pp->quirks |= DW_PCIE_QUIRK_NO_MSI_VEC;
+		pp->quirks |= DW_PCIE_QUIRK_MSI_SELF_EN;
+		dw_pcie_msi_init(pp);
+	}
+	*/
+
+	return;
+}
+
+
+static struct pcie_host_ops ls_pcie_host_ops = {
+	.link_up = ls_pcie_link_up,
+	.host_init = ls_pcie_host_init,
+};
+
+static int ls_add_pcie_port(struct ls_pcie *pcie)
+{
+	struct pcie_port *pp;
+	int ret;
+
+	if (!pcie)
+		return -EINVAL;
+
+	pp = &pcie->pp;
+	pp->dev = pcie->dev;
+	pp->dbi_base = pcie->dbi;
+	pp->irq = pcie->irq;
+
+/*
+	if (IS_ENABLED(CONFIG_PCI_MSI)) {
+		pp->msi_irq = pcie->msi_irq;
+		ret = devm_request_irq(pp->dev, pp->msi_irq,
+					imx_pcie_msi_irq_handler,
+					IRQF_SHARED, "ls-pcie", pp);
+		if (ret) {
+			dev_err(pp->dev, "failed to request msi irq\n");
+			return ret;
+		}
+	}
+*/
+	pp->root_bus_nr = -1;
+	pp->ops = &ls_pcie_host_ops;
+
+	spin_lock_init(&pp->conf_lock);
+	ret = dw_pcie_host_init(pp);
+	if (ret) {
+		dev_err(pp->dev, "failed to initialize host\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int __init ls_pcie_probe(struct platform_device *pdev)
+{
+	struct ls_pcie *pcie;
+	struct resource *dbi_base;
+	struct device_node *np;
+	int ret;
+
+	pcie = devm_kzalloc(&pdev->dev, sizeof(*pcie), GFP_KERNEL);
+	if (!pcie)
+		return -ENOMEM;
+
+	pcie->dev = &pdev->dev;
+	pcie->index = global_index++;
+
+	dbi_base = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!dbi_base) {
+		dev_err(&pdev->dev, "dbi_base memory resource not found\n");
+		return -ENODEV;
+	}
+
+	pcie->dbi = devm_ioremap_resource(&pdev->dev, dbi_base);
+	if (IS_ERR(pcie->dbi)) {
+		ret = PTR_ERR(pcie->dbi);
+		goto err;
+	}
+
+	/* map SCFG register */
+	np = of_find_compatible_node(NULL, NULL, "fsl,ls1021a-scfg");
+	pcie->scfg = of_iomap(np, 0);
+	if (!pcie->scfg) {
+		dev_err(&pdev->dev, "unable to find SCFG registers\n");
+		ret = -ENODEV;
+		goto err;
+	}
+
+	/* request interrupt */
+	pcie->irq = platform_get_irq_byname(pdev, "intr");
+	if (pcie->irq < 0) {
+		dev_err(&pdev->dev, "failed to get IRQ: %d\n", pcie->irq);
+		goto err;
+	}
+
+	pcie->msi_irq = platform_get_irq_byname(pdev, "msi");
+	if (pcie->msi_irq < 0) {
+		dev_err(&pdev->dev,
+			"failed to get MSI IRQ: %d\n", pcie->msi_irq);
+		goto err;
+	}
+
+	ret = ls_add_pcie_port(pcie);
+	if (ret < 0)
+		goto err;
+
+	platform_set_drvdata(pdev, pcie);
+	list_add(&pcie->node, &ls_pcie_list);
+
+	return 0;
+
+err:
+	return ret;
+}
+
+static const struct of_device_id ls_pcie_of_match[] = {
+	{ .compatible = "fsl,pcie" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ls_pcie_of_match);
+
+static struct platform_driver ls_pcie_driver = {
+	.driver = {
+		.name = "layerscape-pcie",
+		.owner = THIS_MODULE,
+		.of_match_table = ls_pcie_of_match,
+	},
+};
+
+/* Freescale PCIe driver does not allow module unload */
+static int __init ls_pcie_init(void)
+{
+	return platform_driver_probe(&ls_pcie_driver, ls_pcie_probe);
+}
+subsys_initcall(ls_pcie_init);
+
+MODULE_AUTHOR("Minghuan Lian <Minghuan.Lian@freescale.com>");
+MODULE_DESCRIPTION("Freescale Layerscape PCIe host controller driver");
+MODULE_LICENSE("GPL v2");
-- 
2.0.2

