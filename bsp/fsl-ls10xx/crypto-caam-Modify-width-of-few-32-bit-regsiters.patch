From bfc090e03c235b02874862745a1cdf14d574115f Mon Sep 17 00:00:00 2001
From: Ruchika Gupta <ruchika.gupta@freescale.com>
Date: Thu, 15 May 2014 10:26:03 +0530
Subject: [PATCH 116/255] crypto:caam - Modify width of few 32 bit regsiters

64K block support

Signed-off-by: Ruchika Gupta <ruchika.gupta@freescale.com>
[Kevin: Original patch taken from
LS1021A-SDK-V1.1-ARM-SOURCE-20140815-yocto.iso]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/crypto/caam/ctrl.c |  20 ++++---
 drivers/crypto/caam/regs.h | 142 +++++++++++++++++++++++++++++----------------
 2 files changed, 105 insertions(+), 57 deletions(-)

diff --git a/drivers/crypto/caam/ctrl.c b/drivers/crypto/caam/ctrl.c
index 1c38f86..23b9155 100644
--- a/drivers/crypto/caam/ctrl.c
+++ b/drivers/crypto/caam/ctrl.c
@@ -371,7 +371,7 @@ EXPORT_SYMBOL(caam_get_era);
 static int caam_probe(struct platform_device *pdev)
 {
 	int ret, ring, rspec, gen_sk, ent_delay = RTSDCTL_ENT_DLY_MIN;
-	u64 caam_id;
+	u32 caam_id;
 	struct device *dev;
 	struct device_node *nprop, *np;
 	struct caam_ctrl __iomem *ctrl;
@@ -380,7 +380,10 @@ static int caam_probe(struct platform_device *pdev)
 #ifdef CONFIG_DEBUG_FS
 	struct caam_perfmon *perfmon;
 #endif
-	u64 cha_vid;
+	u32 val_prev, val;
+	u32 scfgr;
+	u64 comp_params;
+	u32 cha_vid_ls;
 
 	ctrlpriv = kzalloc(sizeof(struct caam_drv_private), GFP_KERNEL);
 	if (!ctrlpriv)
@@ -456,8 +459,9 @@ static int caam_probe(struct platform_device *pdev)
 		}
 
 	/* Check to see if QI present. If so, enable */
-	ctrlpriv->qi_present = !!(rd_reg64(&topregs->ctrl.perfmon.comp_parms) &
-				  CTPR_QI_MASK);
+	ctrlpriv->qi_present =
+			!!(rd_reg32(&topregs->ctrl.perfmon.comp_parms_ms) &
+				  CTPR_MS_QI_MASK);
 	if (ctrlpriv->qi_present) {
 		ctrlpriv->qi = (struct caam_queue_if __force *)&topregs->qi;
 		/* This is all that's required to physically enable QI */
@@ -471,13 +475,13 @@ static int caam_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
-	cha_vid = rd_reg64(&topregs->ctrl.perfmon.cha_id);
+	cha_vid_ls = rd_reg32(&topregs->ctrl.perfmon.cha_id_ls);
 
 	/*
 	 * If SEC has RNG version >= 4 and RNG state handle has not been
 	 * already instantiated, do RNG instantiation
 	 */
-	if ((cha_vid & CHA_ID_RNG_MASK) >> CHA_ID_RNG_SHIFT >= 4) {
+	if ((cha_vid_ls & CHA_ID_LS_RNG_MASK) >> CHA_ID_LS_RNG_SHIFT >= 4) {
 		ctrlpriv->rng4_sh_init =
 			rd_reg32(&topregs->ctrl.r4tst[0].rdsta);
 		/*
@@ -531,10 +535,10 @@ static int caam_probe(struct platform_device *pdev)
 
 	/* NOTE: RTIC detection ought to go here, around Si time */
 
-	caam_id = rd_reg64(&topregs->ctrl.perfmon.caam_id);
+	caam_id = rd_reg32(&topregs->ctrl.perfmon.caam_id_ms);
 
 	/* Report "alive" for developer to see */
-	dev_info(dev, "device ID = 0x%016llx (Era %d)\n", caam_id,
+	dev_info(dev, "device ID = 0x%08x (Era %d)\n", caam_id,
 		 caam_get_era());
 	dev_info(dev, "job rings = %d, qi = %d\n",
 		 ctrlpriv->total_jobrs, ctrlpriv->qi_present);
diff --git a/drivers/crypto/caam/regs.h b/drivers/crypto/caam/regs.h
index ce00c6d..4bdef91 100644
--- a/drivers/crypto/caam/regs.h
+++ b/drivers/crypto/caam/regs.h
@@ -103,6 +103,10 @@ static inline u64 rd_reg64(u64 __iomem *reg)
 }
 #endif
 
+#ifdef CONFIG_ARCH_LAYERSCAPE
+#define CONFIG_64K_MEMORY_BLOCK
+#endif
+
 /*
  * jr_outentry
  * Represents each entry in a JobR output ring
@@ -120,45 +124,45 @@ struct jr_outentry {
  */
 
 /* Number of DECOs */
-#define CHA_NUM_DECONUM_SHIFT	56
-#define CHA_NUM_DECONUM_MASK	(0xfull << CHA_NUM_DECONUM_SHIFT)
+#define CHA_NUM_MS_DECONUM_SHIFT	24
+#define CHA_NUM_MS_DECONUM_MASK	(0xfull << CHA_NUM_MS_DECONUM_SHIFT)
 
 /* CHA Version IDs */
-#define CHA_ID_AES_SHIFT	0
-#define CHA_ID_AES_MASK		(0xfull << CHA_ID_AES_SHIFT)
+#define CHA_ID_LS_AES_SHIFT	0
+#define CHA_ID_LS_AES_MASK		(0xfull << CHA_ID_LS_AES_SHIFT)
 
-#define CHA_ID_DES_SHIFT	4
-#define CHA_ID_DES_MASK		(0xfull << CHA_ID_DES_SHIFT)
+#define CHA_ID_LS_DES_SHIFT	4
+#define CHA_ID_LS_DES_MASK		(0xfull << CHA_ID_LS_DES_SHIFT)
 
-#define CHA_ID_ARC4_SHIFT	8
-#define CHA_ID_ARC4_MASK	(0xfull << CHA_ID_ARC4_SHIFT)
+#define CHA_ID_LS_ARC4_SHIFT	8
+#define CHA_ID_LS_ARC4_MASK	(0xfull << CHA_ID_LS_ARC4_SHIFT)
 
-#define CHA_ID_MD_SHIFT		12
-#define CHA_ID_MD_MASK		(0xfull << CHA_ID_MD_SHIFT)
+#define CHA_ID_LS_MD_SHIFT	12
+#define CHA_ID_LS_MD_MASK	(0xfull << CHA_ID_LS_MD_SHIFT)
 
-#define CHA_ID_RNG_SHIFT	16
-#define CHA_ID_RNG_MASK		(0xfull << CHA_ID_RNG_SHIFT)
+#define CHA_ID_LS_RNG_SHIFT	16
+#define CHA_ID_LS_RNG_MASK	(0xfull << CHA_ID_LS_RNG_SHIFT)
 
-#define CHA_ID_SNW8_SHIFT	20
-#define CHA_ID_SNW8_MASK	(0xfull << CHA_ID_SNW8_SHIFT)
+#define CHA_ID_LS_SNW8_SHIFT	20
+#define CHA_ID_LS_SNW8_MASK	(0xfull << CHA_ID_LS_SNW8_SHIFT)
 
-#define CHA_ID_KAS_SHIFT	24
-#define CHA_ID_KAS_MASK		(0xfull << CHA_ID_KAS_SHIFT)
+#define CHA_ID_LS_KAS_SHIFT	24
+#define CHA_ID_LS_KAS_MASK	(0xfull << CHA_ID_LS_KAS_SHIFT)
 
-#define CHA_ID_PK_SHIFT		28
-#define CHA_ID_PK_MASK		(0xfull << CHA_ID_PK_SHIFT)
+#define CHA_ID_LS_PK_SHIFT	28
+#define CHA_ID_LS_PK_MASK	(0xfull << CHA_ID_LS_PK_SHIFT)
 
-#define CHA_ID_CRC_SHIFT	32
-#define CHA_ID_CRC_MASK		(0xfull << CHA_ID_CRC_SHIFT)
+#define CHA_ID_MS_CRC_SHIFT	0
+#define CHA_ID_MS_CRC_MASK	(0xfull << CHA_ID_MS_CRC_SHIFT)
 
-#define CHA_ID_SNW9_SHIFT	36
-#define CHA_ID_SNW9_MASK	(0xfull << CHA_ID_SNW9_SHIFT)
+#define CHA_ID_MS_SNW9_SHIFT	4
+#define CHA_ID_MS_SNW9_MASK	(0xfull << CHA_ID_MS_SNW9_SHIFT)
 
-#define CHA_ID_DECO_SHIFT	56
-#define CHA_ID_DECO_MASK	(0xfull << CHA_ID_DECO_SHIFT)
+#define CHA_ID_MS_DECO_SHIFT	24
+#define CHA_ID_MS_DECO_MASK	(0xfull << CHA_ID_MS_DECO_SHIFT)
 
-#define CHA_ID_JR_SHIFT		60
-#define CHA_ID_JR_MASK		(0xfull << CHA_ID_JR_SHIFT)
+#define CHA_ID_MS_JR_SHIFT	28
+#define CHA_ID_MS_JR_MASK	(0xfull << CHA_ID_MS_JR_SHIFT)
 
 struct sec_vid {
 	u16 ip_id;
@@ -178,10 +182,12 @@ struct caam_perfmon {
 	u64 rsvd[13];
 
 	/* CAAM Hardware Instantiation Parameters		fa0-fbf */
-	u64 cha_rev;		/* CRNR - CHA Revision Number		*/
-#define CTPR_QI_SHIFT		57
-#define CTPR_QI_MASK		(0x1ull << CTPR_QI_SHIFT)
-	u64 comp_parms;	/* CTPR - Compile Parameters Register	*/
+	u32 cha_rev_ms;		/* CRNR - CHA Rev No. Most significant half*/
+	u32 cha_rev_ls;		/* CRNR - CHA Rev No. Least significant half*/
+#define CTPR_MS_QI_SHIFT	25
+#define CTPR_MS_QI_MASK		(0x1ull << CTPR_MS_QI_SHIFT)
+	u32 comp_parms_ms;	/* CTPR - Compile Parameters Register	*/
+	u32 comp_parms_ls;	/* CTPR - Compile Parameters Register	*/
 	u64 rsvd1[2];
 
 	/* CAAM Global Status					fc0-fdf */
@@ -195,9 +201,12 @@ struct caam_perfmon {
 	/* Component Instantiation Parameters			fe0-fff */
 	u32 rtic_id;		/* RVID - RTIC Version ID	*/
 	u32 ccb_id;		/* CCBVID - CCB Version ID	*/
-	u64 cha_id;		/* CHAVID - CHA Version ID	*/
-	u64 cha_num;		/* CHANUM - CHA Number		*/
-	u64 caam_id;		/* CAAMVID - CAAM Version ID	*/
+	u32 cha_id_ms;		/* CHAVID - CHA Version ID Most Significant*/
+	u32 cha_id_ls;		/* CHAVID - CHA Version ID Least Significant*/
+	u32 cha_num_ms;		/* CHANUM - CHA Number Most Significant	*/
+	u32 cha_num_ls;		/* CHANUM - CHA Number Least Significant*/
+	u32 caam_id_ms;		/* CAAMVID - CAAM Version ID MS	*/
+	u32 caam_id_ls;		/* CAAMVID - CAAM Version ID LS	*/
 };
 
 /* LIODN programming for DMA configuration */
@@ -310,7 +319,8 @@ struct caam_ctrl {
 	/* Bus Access Configuration Section			010-11f */
 	/* Read/Writable                                                */
 	struct masterid jr_mid[4];	/* JRxLIODNR - JobR LIODN setup */
-	u32 rsvd3[12];
+	u32 rsvd3[11];
+	u32 jrstart;			/* JRSTART  Job Ring Start Register */
 	struct masterid rtic_mid[4];	/* RTICxLIODNR - RTIC LIODN setup */
 	u32 rsvd4[7];
 	u32 deco_rq;			/* DECORR - DECO Request */
@@ -342,6 +352,9 @@ struct caam_ctrl {
 
 	/* Performance Monitor                                  f00-fff */
 	struct caam_perfmon perfmon;
+#ifdef CONFIG_64K_MEMORY_BLOCK
+	u64 rsvd10[7680];
+#endif
 };
 
 /*
@@ -371,10 +384,22 @@ struct caam_ctrl {
 #define MCFGR_AXIPRI		0x00000008 /* Assert AXI priority sideband */
 #define MCFGR_BURST_64		0x00000001 /* Max burst size */
 
+/* JRSTART register offsets */
+#define JRSTART_JR0_START	0x00000001 /* Start Job ring 0 */
+#define JRSTART_JR1_START	0x00000002 /* Start Job ring 1 */
+#define JRSTART_JR2_START	0x00000004 /* Start Job ring 2 */
+#define JRSTART_JR3_START	0x00000008 /* Start Job ring 3 */
+
 /*
  * caam_job_ring - direct job ring setup
+ * For 4K Memory Block size
  * 1-4 possible per instantiation, base + 1000/2000/3000/4000
  * Padded out to 0x1000
+ *
+ * For 64K Memory Block Size
+ * 1-4 possible per instantiation, base + 10000/20000/30000/40000
+ * Padded out to 0x10000
+
  */
 struct caam_job_ring {
 	/* Input ring */
@@ -417,6 +442,9 @@ struct caam_job_ring {
 
 	/* Performance Monitor                                  f00-fff */
 	struct caam_perfmon perfmon;
+#ifdef CONFIG_64K_MEMORY_BLOCK
+	u64 rsvd13[7680];
+#endif
 };
 
 #define JR_RINGSIZE_MASK	0x03ff
@@ -579,6 +607,9 @@ struct caam_assurance {
 	/* Block hashes @ 200/300/400/500 */
 	struct rtic_memhash hash[4];	/* Block hash values A-D */
 	u32 rsvd_3[640];
+#ifdef CONFIG_64K_MEMORY_BLOCK
+	u64 rsvd_4[7680];
+#endif
 };
 
 /*
@@ -596,6 +627,9 @@ struct caam_queue_if {
 	u32 qi_enq_cfg_hi;	/* QISEQC - QI Enqueue Command     */
 	u32 qi_enq_cfg_lo;
 	u32 rsvd2[1016];
+#ifdef CONFIG_64K_MEMORY_BLOCK
+	u64 rsvd3[7680];
+#endif
 };
 
 /* QI control bits - low word */
@@ -644,9 +678,13 @@ struct deco_sg_table {
  *
  * Only accessible when direct DECO access is turned on
  * (done in DECORR, via MID programmed in DECOxMID
- *
+ * For 4K memory block size
  * 5 typical, base + 0x8000/9000/a000/b000
  * Padded out to 0x1000 long
+ *
+ * For 64K memory block size
+ * 5 typical, base + 0x80000/90000/a0000/b0000
+ * Padded out to 0x10000 long
  */
 struct caam_deco {
 	u32 rsvd1;
@@ -724,6 +762,9 @@ struct caam_deco {
 #define DESC_DBG_DECO_STAT_MASK		0x00F00000
 	u32 desc_dbg;		/* DxDDR - DECO Debug Register */
 	u32 rsvd31[126];
+#ifdef CONFIG_64K_MEMORY_BLOCK
+	u64 rsvd32[7680];
+#endif
 };
 
 #define DECO_JQCR_WHL		0x20000000
@@ -731,20 +772,20 @@ struct caam_deco {
 
 /*
  * Current top-level view of memory map is:
- *
- * 0x0000 - 0x0fff - CAAM Top-Level Control
- * 0x1000 - 0x1fff - Job Ring 0
- * 0x2000 - 0x2fff - Job Ring 1
- * 0x3000 - 0x3fff - Job Ring 2
- * 0x4000 - 0x4fff - Job Ring 3
- * 0x5000 - 0x5fff - (unused)
- * 0x6000 - 0x6fff - Assurance Controller
- * 0x7000 - 0x7fff - Queue Interface
- * 0x8000 - 0x8fff - DECO-CCB 0
- * 0x9000 - 0x9fff - DECO-CCB 1
- * 0xa000 - 0xafff - DECO-CCB 2
- * 0xb000 - 0xbfff - DECO-CCB 3
- * 0xc000 - 0xcfff - DECO-CCB 4
+ * 4 K memory Block/ 64K memory Block
+ * 0x0000 - 0x0fff / 0x00000 - 0x0ffff- CAAM Top-Level Control
+ * 0x1000 - 0x1fff / 0x10000 - 0x1ffff- Job Ring 0
+ * 0x2000 - 0x2fff / 0x20000 - 0x2ffff- Job Ring 1
+ * 0x3000 - 0x3fff / 0x30000 - 0x3ffff- Job Ring 2
+ * 0x4000 - 0x4fff / 0x40000 - 0x4ffff- Job Ring 3
+ * 0x5000 - 0x5fff / 0x50000 - 0x5ffff- (unused)
+ * 0x6000 - 0x6fff / 0x60000 - 0x6ffff- Assurance Controller
+ * 0x7000 - 0x7fff / 0x70000 - 0x7ffff- Queue Interface
+ * 0x8000 - 0x8fff / 0x80000 - 0x7ffff- DECO-CCB 0
+ * 0x9000 - 0x9fff / 0x90000 - 0x7ffff- DECO-CCB 1
+ * 0xa000 - 0xafff / 0xa0000 - 0x7ffff- DECO-CCB 2
+ * 0xb000 - 0xbfff / 0xb0000 - 0x7ffff- DECO-CCB 3
+ * 0xc000 - 0xcfff / 0xb0000 - 0x7ffff- DECO-CCB 4
  *
  * caam_full describes the full register view of CAAM if useful,
  * although many configurations may choose to implement parts of
@@ -754,6 +795,9 @@ struct caam_full {
 	struct caam_ctrl __iomem ctrl;
 	struct caam_job_ring jr[4];
 	u64 rsvd[512];
+#ifdef CONFIG_64K_MEMORY_BLOCK
+	u64 rsvd2[7680];
+#endif
 	struct caam_assurance assure;
 	struct caam_queue_if qi;
 	struct caam_deco deco;
-- 
2.0.2

