From bc64a3b27cbb697271384c71e06f7e14e79871c1 Mon Sep 17 00:00:00 2001
From: Jingchang Lu <jingchang.lu@freescale.com>
Date: Mon, 28 Apr 2014 22:16:46 +0800
Subject: [PATCH 070/255] arm: mxc: add big-endian registers support to the
 reset watchdog

Signed-off-by: Jingchang Lu <jingchang.lu@freescale.com>
[Kevin: Original patch taken from
LS1021A-SDK-V1.1-ARM-SOURCE-20140815-yocto.iso, just some minor
modifications due to the context change.]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/arm/mach-imx/system.c | 27 +++++++++++++++++----------
 1 file changed, 17 insertions(+), 10 deletions(-)

diff --git a/arch/arm/mach-imx/system.c b/arch/arm/mach-imx/system.c
index 5e3027d..453fb3a 100644
--- a/arch/arm/mach-imx/system.c
+++ b/arch/arm/mach-imx/system.c
@@ -34,6 +34,7 @@
 
 static void __iomem *wdog_base;
 static struct clk *wdog_clk;
+static bool big_endian;
 
 /*
  * Reset the system. It is called by machine_restart().
@@ -51,16 +52,20 @@ void mxc_restart(enum reboot_mode mode, const char *cmd)
 		wcr_enable = (1 << 2);
 
 	/* Assert SRS signal */
-	__raw_writew(wcr_enable, wdog_base);
-	/*
-	 * Due to imx6q errata ERR004346 (WDOG: WDOG SRS bit requires to be
-	 * written twice), we add another two writes to ensure there must be at
-	 * least two writes happen in the same one 32kHz clock period.  We save
-	 * the target check here, since the writes shouldn't be a huge burden
-	 * for other platforms.
-	 */
-	__raw_writew(wcr_enable, wdog_base);
-	__raw_writew(wcr_enable, wdog_base);
+	if (big_endian)
+		iowrite16be(wcr_enable, WDOG_WCR_REG);
+	else {
+		__raw_writew(wcr_enable, wdog_base);
+		/*
+		 * Due to imx6q errata ERR004346 (WDOG: WDOG SRS bit requires
+		 * to be written twice), we add another two writes to ensure
+		 * there must be at least two writes happen in the same one
+		 * 32kHz clock period.  We save the target check here, since
+		 * the writes shouldn't be a huge burden for other platforms.
+		 */
+		__raw_writew(wcr_enable, wdog_base);
+		__raw_writew(wcr_enable, wdog_base);
+	}
 
 	/* wait for reset to assert... */
 	mdelay(500);
@@ -96,6 +101,8 @@ void __init mxc_arch_reset_init_dt(void)
 	wdog_base = of_iomap(np, 0);
 	WARN_ON(!wdog_base);
 
+	big_endian = of_property_read_bool(np, "big-endian");
+
 	wdog_clk = of_clk_get(np, 0);
 	if (IS_ERR(wdog_clk)) {
 		pr_warn("%s: failed to get wdog clock\n", __func__);
-- 
2.0.2

