From 51fb5b4e12d9ba8253ec0ee870c2f01fde940759 Mon Sep 17 00:00:00 2001
From: Xiubo Li <Li.Xiubo@freescale.com>
Date: Fri, 18 Jul 2014 16:43:28 +0800
Subject: [PATCH 214/255] fb: Fix the DCU on LS1021A.

Signed-off-by: Alison Wang <b18965@freescale.com>
Signed-off-by: Xiubo Li <Li.Xiubo@freescale.com>
[Kevin: Original patch taken from
LS1021A-SDK-V1.1-ARM-SOURCE-20140815-yocto.iso]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/video/fsl-dcu-fb.c | 320 +++++++++++++++++++++++++++------------------
 1 file changed, 196 insertions(+), 124 deletions(-)

diff --git a/drivers/video/fsl-dcu-fb.c b/drivers/video/fsl-dcu-fb.c
index 1f4b52c..c6e6655 100644
--- a/drivers/video/fsl-dcu-fb.c
+++ b/drivers/video/fsl-dcu-fb.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2013 Freescale Semiconductor, Inc.
+ * Copyright 2012-2014 Freescale Semiconductor, Inc.
  *
  * Freescale DCU framebuffer device driver
  *
@@ -9,25 +9,25 @@
  * (at your option) any later version.
  */
 
-#include <linux/module.h>
-#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
 #include <linux/dma-mapping.h>
-#include <linux/interrupt.h>
 #include <linux/fb.h>
-#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
 #include <linux/of_platform.h>
-#include <linux/uaccess.h>
-#include <linux/delay.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/uaccess.h>
 #include <video/of_display_timing.h>
 #include <video/videomode.h>
-#include <linux/pm_runtime.h>
 
 #define DRIVER_NAME			"fsl-dcu-fb"
 
-#define DCU_DCU_MODE			0x0010
+#define DCU_DCU_MODE			0x10
 #define DCU_MODE_BLEND_ITER(x)		((x) << 20)
-#define DCU_MODE_RASTER_EN		(1 << 14)
+#define DCU_MODE_RASTER_EN		BIT(14)
 #define DCU_MODE_DCU_MODE(x)		(x)
 #define DCU_MODE_DCU_MODE_MASK		0x03
 #define DCU_MODE_OFF			0
@@ -35,47 +35,47 @@
 #define DCU_MODE_TEST			2
 #define DCU_MODE_COLORBAR		3
 
-#define DCU_BGND			0x0014
+#define DCU_BGND			0x14
 #define DCU_BGND_R(x)			((x) << 16)
 #define DCU_BGND_G(x)			((x) << 8)
 #define DCU_BGND_B(x)			(x)
 
-#define DCU_DISP_SIZE			0x0018
+#define DCU_DISP_SIZE			0x18
 #define DCU_DISP_SIZE_DELTA_Y(x)	((x) << 16)
 #define DCU_DISP_SIZE_DELTA_X(x)	(x)
 
-#define DCU_HSYN_PARA			0x001c
+#define DCU_HSYN_PARA			0x1c
 #define DCU_HSYN_PARA_BP(x)		((x) << 22)
 #define DCU_HSYN_PARA_PW(x)		((x) << 11)
 #define DCU_HSYN_PARA_FP(x)		(x)
 
-#define DCU_VSYN_PARA			0x0020
+#define DCU_VSYN_PARA			0x20
 #define DCU_VSYN_PARA_BP(x)		((x) << 22)
 #define DCU_VSYN_PARA_PW(x)		((x) << 11)
 #define DCU_VSYN_PARA_FP(x)		(x)
 
-#define DCU_SYN_POL			0x0024
+#define DCU_SYN_POL			0x24
 #define DCU_SYN_POL_INV_PXCK_FALL	(0 << 6)
 #define DCU_SYN_POL_NEG_REMAIN		(0 << 5)
-#define DCU_SYN_POL_INV_VS_LOW		(1 << 1)
-#define DCU_SYN_POL_INV_HS_LOW		(1)
+#define DCU_SYN_POL_INV_VS_LOW		BIT(1)
+#define DCU_SYN_POL_INV_HS_LOW		BIT(0)
 
-#define DCU_THRESHOLD			0x0028
+#define DCU_THRESHOLD			0x28
 #define DCU_THRESHOLD_LS_BF_VS(x)	((x) << 16)
 #define DCU_THRESHOLD_OUT_BUF_HIGH(x)	((x) << 8)
 #define DCU_THRESHOLD_OUT_BUF_LOW(x)	(x)
 
-#define DCU_INT_STATUS			0x002C
-#define DCU_INT_STATUS_UNDRUN		(1 << 1)
+#define DCU_INT_STATUS			0x2C
+#define DCU_INT_STATUS_UNDRUN		BIT(1)
 
-#define DCU_INT_MASK			0x0030
-#define DCU_INT_MASK_UNDRUN		(1 << 1)
+#define DCU_INT_MASK			0x30
+#define DCU_INT_MASK_UNDRUN		BIT(1)
 
-#define DCU_DIV_RATIO			0x0054
+#define DCU_DIV_RATIO			0x54
 
-#define DCU_UPDATE_MODE			0x00cc
-#define DCU_UPDATE_MODE_MODE		(1 << 31)
-#define DCU_UPDATE_MODE_READREG		(1 << 30)
+#define DCU_UPDATE_MODE			0xcc
+#define DCU_UPDATE_MODE_MODE		BIT(31)
+#define DCU_UPDATE_MODE_READREG		BIT(30)
 
 #define DCU_CTRLDESCLN_1(x)		(0x200 + (x) * 0x40)
 #define DCU_CTRLDESCLN_1_HEIGHT(x)	((x) << 16)
@@ -88,15 +88,15 @@
 #define DCU_CTRLDESCLN_3(x)		(0x208 + (x) * 0x40)
 
 #define DCU_CTRLDESCLN_4(x)		(0x20c + (x) * 0x40)
-#define DCU_CTRLDESCLN_4_EN		(1 << 31)
-#define DCU_CTRLDESCLN_4_TILE_EN	(1 << 30)
-#define DCU_CTRLDESCLN_4_DATA_SEL_CLUT	(1 << 29)
-#define DCU_CTRLDESCLN_4_SAFETY_EN	(1 << 28)
+#define DCU_CTRLDESCLN_4_EN		BIT(31)
+#define DCU_CTRLDESCLN_4_TILE_EN	BIT(30)
+#define DCU_CTRLDESCLN_4_DATA_SEL_CLUT	BIT(29)
+#define DCU_CTRLDESCLN_4_SAFETY_EN	BIT(28)
 #define DCU_CTRLDESCLN_4_TRANS(x)	((x) << 20)
 #define DCU_CTRLDESCLN_4_BPP(x)		((x) << 16)
-#define DCU_CTRLDESCLN_4_RLE_EN		(1 << 15)
+#define DCU_CTRLDESCLN_4_RLE_EN		BIT(15)
 #define DCU_CTRLDESCLN_4_LUOFFS(x)	((x) << 4)
-#define DCU_CTRLDESCLN_4_BB_ON		(1 << 2)
+#define DCU_CTRLDESCLN_4_BB_ON		BIT(2)
 #define DCU_CTRLDESCLN_4_AB(x)		(x)
 
 #define DCU_CTRLDESCLN_5(x)		(0x210 + (x) * 0x40)
@@ -119,15 +119,22 @@
 #define DCU_CTRLDESCLN_9(x)		(0x220 + (x) * 0x40)
 #define DCU_CTRLDESCLN_9_BG_BCOLOR(x)	(x)
 
+#define DCU_CTRLDESCLN_10(x)		(0x224 + (x) * 0x40)
+
+#ifdef CONFIG_SOC_VF610
 #define DCU_TOTAL_LAYER_NUM		64
 #define DCU_LAYER_NUM_MAX		6
+#else
+#define DCU_TOTAL_LAYER_NUM		16
+#define DCU_LAYER_NUM_MAX		4
+#endif
 
 #define BPP_16_RGB565			4
 #define BPP_24_RGB888			5
 #define BPP_32_ARGB8888			6
 
-#define TCON_CTRL1			0x0000
-#define TCON_BYPASS_ENABLE		(1 << 29)
+#define TCON_CTRL1			0x00
+#define TCON_BYPASS_ENABLE		BIT(29)
 
 #define MFB_SET_ALPHA		_IOW('M', 0, __u8)
 #define MFB_GET_ALPHA		_IOR('M', 0, __u8)
@@ -242,22 +249,48 @@ static inline void dcu_writel(bool big_endian, u32 val, void __iomem *addr)
 		iowrite32(val, addr);
 }
 
+static void reset_total_layers(struct dcu_fb_data *dcufb, int index)
+{
+	void __iomem *base = dcufb->reg_base;
+	bool big_endian = dcufb->big_endian;
+	int i;
+
+	for (i = index; i < DCU_TOTAL_LAYER_NUM; i++) {
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_1(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_2(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_3(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_4(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_5(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_6(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_7(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_8(i));
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_9(i));
+#ifndef CONFIG_SOC_VF610
+		dcu_writel(big_endian, 0, base + DCU_CTRLDESCLN_10(i));
+#endif
+	}
+
+	dcu_writel(big_endian, DCU_UPDATE_MODE_READREG, base + DCU_UPDATE_MODE);
+}
+
 static int enable_panel(struct fb_info *info)
 {
 	struct fb_var_screeninfo *var = &info->var;
 	struct mfb_info *mfbi = info->par;
 	struct dcu_fb_data *dcufb = mfbi->parent;
-	unsigned int bpp;
+	bool big_endian = dcufb->big_endian;
+	void __iomem *base = dcufb->reg_base;
+	unsigned int bpp, val;
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_1_HEIGHT(var->yres) |
+	dcu_writel(big_endian, DCU_CTRLDESCLN_1_HEIGHT(var->yres) |
 		DCU_CTRLDESCLN_1_WIDTH(var->xres),
-		dcufb->reg_base + DCU_CTRLDESCLN_1(mfbi->index));
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_2_POSY(mfbi->y_layer_d) |
+		base + DCU_CTRLDESCLN_1(mfbi->index));
+	dcu_writel(big_endian, DCU_CTRLDESCLN_2_POSY(mfbi->y_layer_d) |
 		DCU_CTRLDESCLN_2_POSX(mfbi->x_layer_d),
-		dcufb->reg_base + DCU_CTRLDESCLN_2(mfbi->index));
+		base + DCU_CTRLDESCLN_2(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, info->fix.smem_start,
-		dcufb->reg_base + DCU_CTRLDESCLN_3(mfbi->index));
+	dcu_writel(big_endian, info->fix.smem_start,
+		base + DCU_CTRLDESCLN_3(mfbi->index));
 
 	switch (var->bits_per_pixel) {
 	case 16:
@@ -275,32 +308,42 @@ static int enable_panel(struct fb_info *info)
 		return -EINVAL;
 	}
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_4_EN |
+	dcu_writel(big_endian, DCU_CTRLDESCLN_4_EN |
 		DCU_CTRLDESCLN_4_TRANS(mfbi->alpha) |
 		DCU_CTRLDESCLN_4_BPP(bpp) |
 		DCU_CTRLDESCLN_4_AB(mfbi->blend),
-		dcufb->reg_base + DCU_CTRLDESCLN_4(mfbi->index));
+		base + DCU_CTRLDESCLN_4(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_5_CKMAX_R(0xff) |
+	dcu_writel(big_endian, DCU_CTRLDESCLN_5_CKMAX_R(0xff) |
 		DCU_CTRLDESCLN_5_CKMAX_G(0xff) |
 		DCU_CTRLDESCLN_5_CKMAX_B(0xff),
-		dcufb->reg_base + DCU_CTRLDESCLN_5(mfbi->index));
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_6_CKMIN_R(0) |
+		base + DCU_CTRLDESCLN_5(mfbi->index));
+	dcu_writel(big_endian, DCU_CTRLDESCLN_6_CKMIN_R(0) |
 		DCU_CTRLDESCLN_6_CKMIN_G(0) |
 		DCU_CTRLDESCLN_6_CKMIN_B(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_6(mfbi->index));
+		base + DCU_CTRLDESCLN_6(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_7_TILE_VER(0) |
+	dcu_writel(big_endian, DCU_CTRLDESCLN_7_TILE_VER(0) |
 		DCU_CTRLDESCLN_7_TILE_HOR(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_7(mfbi->index));
-
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_8_FG_FCOLOR(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_8(mfbi->index));
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_9_BG_BCOLOR(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_9(mfbi->index));
+		base + DCU_CTRLDESCLN_7(mfbi->index));
+
+	dcu_writel(big_endian, DCU_CTRLDESCLN_8_FG_FCOLOR(0),
+		base + DCU_CTRLDESCLN_8(mfbi->index));
+	dcu_writel(big_endian, DCU_CTRLDESCLN_9_BG_BCOLOR(0),
+		base + DCU_CTRLDESCLN_9(mfbi->index));
+
+	dcu_writel(big_endian, DCU_UPDATE_MODE_READREG,
+			base + DCU_UPDATE_MODE);
+	while (1) {
+		val = dcu_readl(big_endian, base + DCU_UPDATE_MODE);
+		if (val & DCU_UPDATE_MODE_READREG)
+			continue;
+
+		dcu_writel(big_endian, DCU_UPDATE_MODE_MODE,
+				base + DCU_UPDATE_MODE);
+		break;
+	}
 
-	dcu_writel(dcufb->big_endian, DCU_UPDATE_MODE_READREG,
-			dcufb->reg_base + DCU_UPDATE_MODE);
 	return 0;
 }
 
@@ -308,39 +351,41 @@ static int disable_panel(struct fb_info *info)
 {
 	struct mfb_info *mfbi = info->par;
 	struct dcu_fb_data *dcufb = mfbi->parent;
+	bool big_endian = dcufb->big_endian;
+	void __iomem *base = dcufb->reg_base;
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_1_HEIGHT(0) |
+	dcu_writel(big_endian, DCU_CTRLDESCLN_1_HEIGHT(0) |
 		DCU_CTRLDESCLN_1_WIDTH(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_1(mfbi->index));
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_2_POSY(0) |
+		base + DCU_CTRLDESCLN_1(mfbi->index));
+	dcu_writel(big_endian, DCU_CTRLDESCLN_2_POSY(0) |
 		DCU_CTRLDESCLN_2_POSX(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_2(mfbi->index));
+		base + DCU_CTRLDESCLN_2(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, 0,
-		dcufb->reg_base + DCU_CTRLDESCLN_3(mfbi->index));
-	dcu_writel(dcufb->big_endian, 0,
-		dcufb->reg_base + DCU_CTRLDESCLN_4(mfbi->index));
+	dcu_writel(big_endian, 0,
+		base + DCU_CTRLDESCLN_3(mfbi->index));
+	dcu_writel(big_endian, 0,
+		base + DCU_CTRLDESCLN_4(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_5_CKMAX_R(0) |
+	dcu_writel(big_endian, DCU_CTRLDESCLN_5_CKMAX_R(0) |
 		DCU_CTRLDESCLN_5_CKMAX_G(0) |
 		DCU_CTRLDESCLN_5_CKMAX_B(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_5(mfbi->index));
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_6_CKMIN_R(0) |
+		base + DCU_CTRLDESCLN_5(mfbi->index));
+	dcu_writel(big_endian, DCU_CTRLDESCLN_6_CKMIN_R(0) |
 		DCU_CTRLDESCLN_6_CKMIN_G(0) |
 		DCU_CTRLDESCLN_6_CKMIN_B(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_6(mfbi->index));
+		base + DCU_CTRLDESCLN_6(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_7_TILE_VER(0) |
+	dcu_writel(big_endian, DCU_CTRLDESCLN_7_TILE_VER(0) |
 		DCU_CTRLDESCLN_7_TILE_HOR(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_7(mfbi->index));
+		base + DCU_CTRLDESCLN_7(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_8_FG_FCOLOR(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_8(mfbi->index));
-	dcu_writel(dcufb->big_endian, DCU_CTRLDESCLN_9_BG_BCOLOR(0),
-		dcufb->reg_base + DCU_CTRLDESCLN_9(mfbi->index));
+	dcu_writel(big_endian, DCU_CTRLDESCLN_8_FG_FCOLOR(0),
+		base + DCU_CTRLDESCLN_8(mfbi->index));
+	dcu_writel(big_endian, DCU_CTRLDESCLN_9_BG_BCOLOR(0),
+		base + DCU_CTRLDESCLN_9(mfbi->index));
 
-	dcu_writel(dcufb->big_endian, DCU_UPDATE_MODE_READREG,
-		dcufb->reg_base + DCU_UPDATE_MODE);
+	dcu_writel(big_endian, DCU_UPDATE_MODE_READREG,
+		base + DCU_UPDATE_MODE);
 	return 0;
 }
 
@@ -352,6 +397,7 @@ static void enable_controller(struct fb_info *info)
 
 	dcu_mode = dcu_readl(dcufb->big_endian,
 		dcufb->reg_base + DCU_DCU_MODE);
+	dcu_mode &= ~DCU_MODE_DCU_MODE_MASK;
 	dcu_writel(dcufb->big_endian, dcu_mode |
 		DCU_MODE_DCU_MODE(DCU_MODE_NORMAL),
 		dcufb->reg_base + DCU_DCU_MODE);
@@ -462,41 +508,55 @@ static void update_controller(struct fb_info *info)
 	struct fb_var_screeninfo *var = &info->var;
 	struct mfb_info *mfbi = info->par;
 	struct dcu_fb_data *dcufb = mfbi->parent;
+	bool big_endian = dcufb->big_endian;
+	void __iomem *base = dcufb->reg_base;
 	unsigned int div;
+	u32 val;
 
 	div = fsl_dcu_calc_div(info);
-	dcu_writel(dcufb->big_endian, (div - 1),
-		dcufb->reg_base + DCU_DIV_RATIO);
+	dcu_writel(big_endian, (div - 1), base + DCU_DIV_RATIO);
 
-	dcu_writel(dcufb->big_endian, DCU_DISP_SIZE_DELTA_Y(var->yres) |
+	dcu_writel(big_endian, DCU_DISP_SIZE_DELTA_Y(var->yres) |
 		DCU_DISP_SIZE_DELTA_X(var->xres / 16),
-		dcufb->reg_base + DCU_DISP_SIZE);
+		base + DCU_DISP_SIZE);
 
 	/* Horizontal and vertical sync parameters */
-	dcu_writel(dcufb->big_endian, DCU_HSYN_PARA_BP(var->left_margin) |
+	dcu_writel(big_endian, DCU_HSYN_PARA_BP(var->left_margin) |
 		DCU_HSYN_PARA_PW(var->hsync_len) |
 		DCU_HSYN_PARA_FP(var->right_margin),
-		dcufb->reg_base + DCU_HSYN_PARA);
+		base + DCU_HSYN_PARA);
 
-	dcu_writel(dcufb->big_endian, DCU_VSYN_PARA_BP(var->upper_margin) |
+	dcu_writel(big_endian, DCU_VSYN_PARA_BP(var->upper_margin) |
 		DCU_VSYN_PARA_PW(var->vsync_len) |
 		DCU_VSYN_PARA_FP(var->lower_margin),
-		dcufb->reg_base + DCU_VSYN_PARA);
+		base + DCU_VSYN_PARA);
 
-	dcu_writel(dcufb->big_endian, DCU_SYN_POL_INV_PXCK_FALL |
+	dcu_writel(big_endian, DCU_SYN_POL_INV_PXCK_FALL |
 		DCU_SYN_POL_NEG_REMAIN | DCU_SYN_POL_INV_VS_LOW |
-		DCU_SYN_POL_INV_HS_LOW,	dcufb->reg_base + DCU_SYN_POL);
+		DCU_SYN_POL_INV_HS_LOW,	base + DCU_SYN_POL);
 
-	dcu_writel(dcufb->big_endian, DCU_BGND_R(0) | DCU_BGND_G(0) |
-		DCU_BGND_B(0), dcufb->reg_base + DCU_BGND);
+	dcu_writel(big_endian, DCU_BGND_R(0) | DCU_BGND_G(0) |
+		DCU_BGND_B(0), base + DCU_BGND);
 
-	dcu_writel(dcufb->big_endian, DCU_MODE_BLEND_ITER(DCU_LAYER_NUM_MAX) |
-		DCU_MODE_RASTER_EN, dcufb->reg_base + DCU_DCU_MODE);
+	dcu_writel(big_endian, DCU_MODE_BLEND_ITER(DCU_LAYER_NUM_MAX) |
+		DCU_MODE_RASTER_EN, base + DCU_DCU_MODE);
 
-	dcu_writel(dcufb->big_endian, DCU_THRESHOLD_LS_BF_VS(0x3) |
+	dcu_writel(big_endian, DCU_THRESHOLD_LS_BF_VS(0x3) |
 		DCU_THRESHOLD_OUT_BUF_HIGH(0x78) |
-		DCU_THRESHOLD_OUT_BUF_LOW(0),
-		dcufb->reg_base + DCU_THRESHOLD);
+		DCU_THRESHOLD_OUT_BUF_LOW(0xa),
+		base + DCU_THRESHOLD);
+
+	dcu_writel(big_endian, DCU_UPDATE_MODE_READREG,
+			base + DCU_UPDATE_MODE);
+	while (1) {
+		val = dcu_readl(big_endian, base + DCU_UPDATE_MODE);
+		if (val & DCU_UPDATE_MODE_READREG)
+			continue;
+
+		dcu_writel(big_endian, DCU_UPDATE_MODE_MODE,
+				base + DCU_UPDATE_MODE);
+		break;
+	}
 }
 
 static int map_video_memory(struct fb_info *info)
@@ -724,34 +784,6 @@ static int fsl_dcu_ioctl(struct fb_info *info, unsigned int cmd,
 	return 0;
 }
 
-static void reset_total_layers(struct dcu_fb_data *dcufb)
-{
-	int i;
-
-	for (i = 1; i < DCU_TOTAL_LAYER_NUM; i++) {
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_1(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_2(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_3(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_4(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_5(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_6(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_7(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_8(i));
-		dcu_writel(dcufb->big_endian, 0,
-			dcufb->reg_base + DCU_CTRLDESCLN_9(i));
-	}
-	dcu_writel(dcufb->big_endian, DCU_UPDATE_MODE_READREG,
-		dcufb->reg_base + DCU_UPDATE_MODE);
-}
-
 static int fsl_dcu_open(struct fb_info *info, int user)
 {
 	struct mfb_info *mfbi = info->par;
@@ -967,7 +999,7 @@ static int bypass_tcon(struct device_node *np, bool big_endian)
 
 	tcon_np = of_parse_phandle(np, "tcon-controller", 0);
 	if (!tcon_np)
-		return -EINVAL;
+		return 0;
 
 	tcon_pdev = of_find_device_by_node(tcon_np);
 	if (!tcon_pdev)
@@ -990,6 +1022,34 @@ static int bypass_tcon(struct device_node *np, bool big_endian)
 	return 0;
 }
 
+static int scfg_config(struct device_node *np, bool big_endian)
+{
+	struct device_node *scfg_np;
+	struct platform_device *scfg_pdev;
+	struct resource *res;
+	void __iomem *scfg_reg;
+
+	scfg_np = of_parse_phandle(np, "scfg-controller", 0);
+	if (!scfg_np)
+		return 0;
+
+	scfg_pdev = of_find_device_by_node(scfg_np);
+	if (!scfg_pdev)
+		return -EINVAL;
+
+	res = platform_get_resource(scfg_pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -ENODEV;
+
+	scfg_reg = devm_ioremap_resource(&scfg_pdev->dev, res);
+	if (IS_ERR(scfg_reg))
+		return PTR_ERR(scfg_reg);
+
+	dcu_writel(big_endian, 0xffffffff, scfg_reg + 0x200);
+	dcu_writel(big_endian, 0x80000000, scfg_reg + 0x028);
+
+	return 0;
+}
 static int fsl_dcu_probe(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
@@ -1019,7 +1079,7 @@ static int fsl_dcu_probe(struct platform_device *pdev)
 		return PTR_ERR(dcufb->reg_base);
 	}
 
-	dcufb->big_endian = of_property_read_bool(np, "big-endians");
+	dcufb->big_endian = of_property_read_bool(np, "big-endian");
 
 	dcufb->irq = platform_get_irq(pdev, 0);
 	if (!dcufb->irq) {
@@ -1042,6 +1102,12 @@ static int fsl_dcu_probe(struct platform_device *pdev)
 		goto failed_bypasstcon;
 	}
 
+	ret = scfg_config(np, dcufb->big_endian);
+	if (ret) {
+		dev_err(&pdev->dev, "could not config scfg\n");
+		goto failed_bypasstcon;
+	}
+
 	dcufb->clk = devm_clk_get(&pdev->dev, "dcu");
 	if (IS_ERR(dcufb->clk)) {
 		ret = PTR_ERR(dcufb->clk);
@@ -1053,6 +1119,10 @@ static int fsl_dcu_probe(struct platform_device *pdev)
 	pm_runtime_enable(dcufb->dev);
 	pm_runtime_get_sync(dcufb->dev);
 
+#ifndef CONFIG_SOC_VF610
+	reset_total_layers(dcufb, 0);
+#endif
+
 	for (i = 0; i < ARRAY_SIZE(dcufb->fsl_dcu_info); i++) {
 		dcufb->fsl_dcu_info[i] =
 			framebuffer_alloc(sizeof(struct mfb_info), &pdev->dev);
@@ -1075,7 +1145,9 @@ static int fsl_dcu_probe(struct platform_device *pdev)
 		}
 	}
 
-	reset_total_layers(mfbi->parent);
+#ifdef CONFIG_SOC_VF610
+	reset_total_layers(dcufb, 1);
+#endif
 	return 0;
 
 failed_register_framebuffer:
-- 
2.0.2

