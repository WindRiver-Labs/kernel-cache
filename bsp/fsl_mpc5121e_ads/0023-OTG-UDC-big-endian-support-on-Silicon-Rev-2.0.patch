From 2562a525785f1aa3a4cdbd2ac5f0e56136e93c79 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Tue, 4 Nov 2008 14:46:10 +0800
Subject: [PATCH] OTG UDC big endian support on Silicon Rev 2.0

Because EHCI has its own both endians support
file:
	divers/usb/host/ehci.h

must do it for UDC and otg in
	arch/powerpc/include/asm/fsl_usb_io.h

They both share:
	arch/powerpc/platforms/512x/mpc5121_usb.c

Signed-off-by: Andrew Liu <shengping.liu@windriver.com>
---
 arch/powerpc/include/asm/fsl_usb_io.h |  107 +++++++++++++++++++++++++++++++++
 arch/powerpc/platforms/512x/Kconfig   |    9 +++
 2 files changed, 116 insertions(+), 0 deletions(-)
 create mode 100644 arch/powerpc/include/asm/fsl_usb_io.h

diff --git a/arch/powerpc/include/asm/fsl_usb_io.h b/arch/powerpc/include/asm/fsl_usb_io.h
new file mode 100644
index 0000000..e3a9229
--- /dev/null
+++ b/arch/powerpc/include/asm/fsl_usb_io.h
@@ -0,0 +1,107 @@
+/* Copyright (c) 2008 Freescale Semiconductor Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the  GNU General Public License along
+ * with this program; if not, write  to the Free Software Foundation, Inc.,
+ * 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+#ifndef _FSL_USB_IO_H
+#define _FSL_USB_IO_H
+
+/*
+ * On some SoCs, the USB controller registers can be big or little endian,
+ * depending on the version of the chip.  For these SoCs, the kernel
+ * should be configured with CONFIG_USB_FSL_BIG_ENDIAN_MMIO enabled.
+ *
+ * The "big-endian-regs" property should be specified in the USB node
+ * of the device tree for SoCs that have BE USB registers.
+ * pdata->big_endian_mmio reflects the state of that device tree property.
+ *
+ * In order to be able to run the same kernel binary on 2 different
+ * versions of an SoC, the BE/LE decision must be made at run time.
+ * _fsl_readl and fsl_writel are pointers to the BE or LE readl()
+ * and writel() functions, and fsl_readl() and fsl_writel() call through
+ * those pointers.
+ *
+ * For SoCs with the usual LE USB registers, don't enable
+ * CONFIG_USB_FSL_BIG_ENDIAN_MMIO, and then fsl_readl() and fsl_writel()
+ * are just macro wrappers for in_le32() and out_le32().
+ *
+ * In either (LE or mixed) case, the function fsl_set_usb_accessors()
+ * should be called at probe time, to either set up the readl/writel
+ * function pointers (mixed case), or do nothing (LE case).
+ *
+ * The host USB drivers already have a mechanism to handle BE/LE
+ * registers.  The functionality here is intended to be used by the
+ * gadget and OTG transceiver drivers.
+ *
+ * This file also contains controller-to-cpu accessors for the
+ * USB descriptors, since their endianess is also SoC dependant.
+ * The kernel option CONFIG_USB_FSL_BIG_ENDIAN_DESC configures
+ * which way to go.
+ */
+
+#ifdef CONFIG_USB_FSL_BIG_ENDIAN_MMIO
+static u32 _fsl_readl_be(const volatile void __iomem *p)
+{
+	return in_be32(p);
+}
+static u32  _fsl_readl_le(const volatile void __iomem *p)
+{
+	return in_le32(p);
+}
+
+static void _fsl_writel_be(u32 v, volatile void __iomem *p)
+{
+	out_be32(p, v);
+}
+static void _fsl_writel_le(u32 v, volatile void __iomem *p)
+{
+	out_le32(p, v);
+}
+
+static u32 (*_fsl_readl)(const volatile void __iomem *p);
+static void (*_fsl_writel)(u32 v, volatile void __iomem *p);
+
+#define fsl_readl(p)		(*_fsl_readl)((p))
+#define fsl_writel(v, p)	(*_fsl_writel)((v), (p))
+
+static inline void fsl_set_usb_accessors(struct fsl_usb2_platform_data *pdata)
+{
+	if (pdata->big_endian_mmio) {
+		_fsl_readl = _fsl_readl_be;
+		_fsl_writel = _fsl_writel_be;
+	} else {
+		_fsl_readl = _fsl_readl_le;
+		_fsl_writel = _fsl_writel_le;
+	}
+}
+
+#else /* CONFIG_USB_FSL_BIG_ENDIAN_MMIO */
+
+#define fsl_readl(addr)		in_le32((addr))
+#define fsl_writel(val32, addr) out_le32((addr), (val32))
+
+static inline void fsl_set_usb_accessors(struct fsl_usb2_platform_data *pdata)
+{
+}
+#endif /* CONFIG_USB_FSL_BIG_ENDIAN_MMIO */
+
+#ifdef CONFIG_USB_FSL_BIG_ENDIAN_DESC
+#define cpu_to_hc32(x)	(x)
+#define hc32_to_cpu(x)	(x)
+#else
+#define cpu_to_hc32(x)	cpu_to_le32((x))
+#define hc32_to_cpu(x)	le32_to_cpu((x))
+#endif
+
+#endif /* _FSL_USB_IO_H */
diff --git a/arch/powerpc/platforms/512x/Kconfig b/arch/powerpc/platforms/512x/Kconfig
index 171bee9..8341dab 100644
--- a/arch/powerpc/platforms/512x/Kconfig
+++ b/arch/powerpc/platforms/512x/Kconfig
@@ -11,6 +11,15 @@ config PPC_MPC5121
 	select PPC_PCI_CHOICE
 	select FSL_PCI if PCI
 	select USB_ARCH_HAS_EHCI
+	select USB_FSL_BIG_ENDIAN_DESC
+	select USB_FSL_BIG_ENDIAN_MMIO
+
+config USB_FSL_BIG_ENDIAN_MMIO
+	bool
+
+config USB_FSL_BIG_ENDIAN_DESC
+	bool
+
 
 config MPC5121_ADS
 	bool "Freescale MPC5121E ADS"
-- 
1.6.0.90.g436ed

