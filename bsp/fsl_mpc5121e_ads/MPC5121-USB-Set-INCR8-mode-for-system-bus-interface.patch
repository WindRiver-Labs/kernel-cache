From a063b541861dbc1b23460896a2150b7bd518c8e5 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Thu, 18 Jun 2009 15:33:50 +0800
Subject: [PATCH 09/25] MPC5121 USB: Set INCR8 mode for system bus interface.

Original patch taken from rev 4 board support ISO image:
  mpc5121ads-20081208_ltib-beta.iso
  http://www.freescale.com/webapp/sps/site/overview.jsp?
  nodeId=0127260061033202A5621E

This is a work-around for the USB-bus-hang problem observed
when there is heavy simultaneous PATA write activity.

Signed-off-by: Bruce Schmid <duck@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/usb/host/ehci-fsl.c |    6 ++++++
 drivers/usb/host/ehci-fsl.h |    1 +
 drivers/usb/host/ehci-hcd.c |    9 +++++++++
 drivers/usb/host/ehci.h     |    1 +
 4 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index 59c928b..3ab602c 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -647,6 +647,12 @@ static int ehci_fsl_drv_resume(struct platform_device *pdev)
 	tmp = USBMODE_CM_HOST | (pdata->es ? USBMODE_ES : 0);
 	ehci_writel(ehci, tmp, hcd->regs + FSL_SOC_USB_USBMODE);
 
+	/*
+	 * set SBUSCFG:AHBBRST so that control msgs don't
+	 * fail when doing heavy PATA writes.
+	 */
+	ehci_writel(ehci, SBUSCFG_INCR8, hcd->regs + FSL_SOC_USB_SBUSCFG);
+
 	/* restore EHCI registers */
 	ehci_writel(ehci, usb_ehci_regs.command, &ehci->regs->command);
 	ehci_writel(ehci, usb_ehci_regs.status, &ehci->regs->status);
diff --git a/drivers/usb/host/ehci-fsl.h b/drivers/usb/host/ehci-fsl.h
index 7bee0af..d3f9489 100644
--- a/drivers/usb/host/ehci-fsl.h
+++ b/drivers/usb/host/ehci-fsl.h
@@ -19,6 +19,7 @@
 #define _EHCI_FSL_H
 
 /* offsets for the non-ehci registers in the FSL SOC USB controller */
+#define FSL_SOC_USB_SBUSCFG	0x90
 #define FSL_SOC_USB_BURSTSIZE	0x160
 #define FSL_SOC_USB_ULPIVP	0x170
 #define FSL_SOC_USB_PORTSC1	0x184
diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index 30e7e36..f132588 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -198,6 +198,15 @@ static void tdi_reset (struct ehci_hcd *ehci)
 	tmp |= USBMODE_BE;
 #endif
 	ehci_writel(ehci, tmp, reg_ptr);
+
+#ifdef CONFIG_PPC_MPC512x
+	/*
+	 * set SBUSCFG:AHBBRST so that control msgs don't
+	 * fail when doing heavy PATA writes.
+	 */
+	reg_ptr = (u32 __iomem *)(((u8 __iomem *)ehci->regs) - 0xB0);
+	ehci_writel(ehci, SBUSCFG_INCR8, reg_ptr);
+#endif
 }
 
 /* reset a non-running (STS_HALT == 1) controller */
diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index f75aef0..b2cac29 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -859,5 +859,6 @@ static inline u32 hc32_to_cpup (const struct ehci_hcd *ehci, const __hc32 *x)
 #endif	/* DEBUG */
 
 /*-------------------------------------------------------------------------*/
+#define	SBUSCFG_INCR8 0x02	/* INCR8, specified */
 
 #endif /* __LINUX_EHCI_HCD_H */
-- 
1.6.3.1

