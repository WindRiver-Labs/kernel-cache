From 03ff2fc14e8e328e1e34362361e975ba789be2d3 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Wed, 8 Jul 2009 10:20:14 +0800
Subject: [PATCH 21/25] MPC5121 ALSA: add mmap

Original patch taken from Freescale BSP Global
Package Pool:
  http://www.bitshrine.org/gpp/

ALSA driver now supports the following rates:
48kHz, 44.1kHz, 32kHz, 24Khz, 22.05kHz, 16kHz,
11.025kHz, 8kHz

The ALSA driver supports the following formats:
Signed and unsigned, 8, 16 and 32 bit, big and
little endian, stereo andmono

Soft mixer is supported

Also updated copyright of mpc5121_pcm.c from
2007,2008 to 2007-2009

Signed-off-by: Chen Hongjun <Hong-jun.chen@freecale.com>
Signed-off-by: John Rigby <jrigby@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 arch/powerpc/include/asm/dma-mapping.h |   18 ++++++++++++++++++
 sound/soc/fsl/mpc5121_pcm.c            |   19 +++++++++++++++++--
 2 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/include/asm/dma-mapping.h b/arch/powerpc/include/asm/dma-mapping.h
index c7ca45f..595275b 100644
--- a/arch/powerpc/include/asm/dma-mapping.h
+++ b/arch/powerpc/include/asm/dma-mapping.h
@@ -371,6 +371,24 @@ static inline void dma_unmap_sg(struct device *dev, struct scatterlist *sg,
 	/* We don't do anything here. */
 }
 
+/*
+ * A helper to mmap the pages allocated via dma_alloc_coherent()
+ */
+static inline int dma_mmap_coherent(struct device *dev,
+				struct vm_area_struct *vma,
+				void *cpu_addr, dma_addr_t handle,
+				size_t size)
+{
+	struct page *pg;
+#ifdef CONFIG_NOT_COHERENT_CACHE
+	cpu_addr = bus_to_virt(handle);
+#endif
+	pg = virt_to_page(cpu_addr);
+	return remap_pfn_range(vma,
+				vma->vm_start,
+				page_to_pfn(pg) + vma->vm_pgoff,
+				size, vma->vm_page_prot);
+}
 #endif /* CONFIG_PPC64 */
 
 static inline void dma_sync_single_for_cpu(struct device *dev,
diff --git a/sound/soc/fsl/mpc5121_pcm.c b/sound/soc/fsl/mpc5121_pcm.c
index ad82084..c4c28a7 100644
--- a/sound/soc/fsl/mpc5121_pcm.c
+++ b/sound/soc/fsl/mpc5121_pcm.c
@@ -1,6 +1,6 @@
 /*
  * Freescale MPC5121 ALSA SoC PCM driver
- * Copyright 2007,2008 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2007-2009 Freescale Semiconductor, Inc. All Rights Reserved
  * Author: John Rigby <jrigby@freescale.com>
  *
  *
@@ -64,7 +64,9 @@ struct mpc512x_dma_config pcm_config;
 			    SNDRV_PCM_FMTBIT_U32_BE)
 
 static const struct snd_pcm_hardware mpc512x_pcm_hardware = {
-	.info = SNDRV_PCM_INFO_INTERLEAVED,
+	.info = SNDRV_PCM_INFO_INTERLEAVED |
+		SNDRV_PCM_INFO_MMAP |
+		SNDRV_PCM_INFO_MMAP_VALID,
 	.formats = MPC5121_PCM_FORMATS,
 	.rates = SNDRV_PCM_RATE_8000_48000,
 	.rate_min = 8000,
@@ -280,6 +282,18 @@ static int mpc512x_pcm_close(struct snd_pcm_substream *substream)
 	return 0;
 }
 
+static int mpc512x_pcm_mmap(struct snd_pcm_substream *substream,
+			struct vm_area_struct *area)
+{
+	if (!substream->ops->page)
+		return dma_mmap_coherent(substream->dma_buffer.dev.dev,
+					area,
+					substream->runtime->dma_area,
+					substream->runtime->dma_addr,
+					area->vm_end - area->vm_start);
+	return 0;
+}
+
 static struct snd_pcm_ops mpc512x_pcm_ops = {
 	.open = mpc512x_pcm_open,
 	.close = mpc512x_pcm_close,
@@ -289,6 +303,7 @@ static struct snd_pcm_ops mpc512x_pcm_ops = {
 	.prepare = mpc512x_pcm_prepare,
 	.trigger = mpc512x_pcm_trigger,
 	.pointer = mpc512x_pcm_pointer,
+	.mmap	 = mpc512x_pcm_mmap,
 };
 
 static int mpc512x_pcm_preallocate_dma_buffer(struct snd_pcm *pcm, int stream)
-- 
1.6.3.1

