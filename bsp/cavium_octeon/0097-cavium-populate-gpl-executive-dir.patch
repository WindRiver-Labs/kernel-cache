From 61b3502c76931ec76f83f758bd5803f2d665c86d Mon Sep 17 00:00:00 2001
From: Wally Gleemer <Wally.Gleemer@windriver.com>
Date: Tue, 25 Mar 2008 16:21:44 -0700
Subject: [PATCH] cavium: populate gpl-executive dir

Populate the gpl-executive dir with the same contents as what is in
OCTEON-LINUX-1.7.1-240  -- some trailing whitespace stripped.

Signed-off-by: Wally Gleemer <Wally.Gleemer@windriver.com>
---
 arch/mips/cavium-octeon/gpl-executive/Makefile     |   58 ++++++++++
 .../gpl-executive/config/executive-config.h        |  115 ++++++++++++++++++++
 .../gpl-executive/cvmx-linux-kernel-exports.c      |   96 ++++++++++++++++
 3 files changed, 269 insertions(+), 0 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/gpl-executive/Makefile
 create mode 100644 arch/mips/cavium-octeon/gpl-executive/config/executive-config.h
 create mode 100644 arch/mips/cavium-octeon/gpl-executive/cvmx-linux-kernel-exports.c

diff --git a/arch/mips/cavium-octeon/gpl-executive/Makefile b/arch/mips/cavium-octeon/gpl-executive/Makefile
new file mode 100644
index 0000000..7d41a04
--- /dev/null
+++ b/arch/mips/cavium-octeon/gpl-executive/Makefile
@@ -0,0 +1,58 @@
+#
+# Makefile for the Cavium Octeon specific kernel interface routines
+# under Linux.
+#
+# This file is subject to the terms and conditions of the GNU General Public
+# License.  See the file "COPYING" in the main directory of this archive
+# for more details.
+#
+# Copyright (C) 2005-2007 Cavium Networks
+#
+
+src ?= .
+
+EXTRA_CFLAGS += -I $(src)/config
+
+executive-files := cvmx-bootmem.o
+executive-files += cvmx-cmd-queue.o
+executive-files += cvmx-dma-engine.o
+executive-files += cvmx-fpa.o
+executive-files += cvmx-helper.o
+executive-files += cvmx-helper-board.o
+executive-files += cvmx-helper-errata.o
+executive-files += cvmx-helper-fpa.o
+executive-files += cvmx-helper-loop.o
+executive-files += cvmx-helper-npi.o
+executive-files += cvmx-helper-rgmii.o
+executive-files += cvmx-helper-sgmii.o
+executive-files += cvmx-helper-spi.o
+executive-files += cvmx-helper-util.o
+executive-files += cvmx-helper-xaui.o
+executive-files += cvmx-l2c.o
+executive-files += cvmx-mgmt-port.o
+executive-files += cvmx-pcie.o
+executive-files += cvmx-pko.o
+executive-files += cvmx-raid.o
+executive-files += cvmx-spi4000.o
+executive-files += cvmx-spi.o
+executive-files += cvmx-sysinfo.o
+executive-files += cvmx-twsi.o
+executive-files += cvmx-warn.o
+executive-files += octeon-model.o
+executive-files += octeon-pci-console.o
+
+obj-y := cvmx-linux-kernel-exports.o $(executive-files)
+
+executive-obj-files := $(executive-files:%=$(src)/%)
+executive-src-files := $(executive-obj-files:%.o=%.c)
+${src}/cvmx-linux-kernel-exports.c $(executive-src-files): $(src)/config/cvmx-config.h
+
+$(executive-src-files):
+	ln -fs $(@:$(src)/%.c=$(OCTEON_ROOT)/executive/%.c) $@
+
+$(src)/config/cvmx-config.h: $(src)/config/executive-config.h
+	cd $(src) && cvmx-config config/executive-config.h
+
+clean:
+	rm -f *.o $(executive-src-files)
+
diff --git a/arch/mips/cavium-octeon/gpl-executive/config/executive-config.h b/arch/mips/cavium-octeon/gpl-executive/config/executive-config.h
new file mode 100644
index 0000000..bf7a2cb
--- /dev/null
+++ b/arch/mips/cavium-octeon/gpl-executive/config/executive-config.h
@@ -0,0 +1,115 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2005-2007 Cavium Networks
+ */
+/*
+ * File version info: $Id: executive-config.h 25756 2007-07-02 23:25:50Z kreese $
+ */
+#ifndef __EXECUTIVE_CONFIG_H__
+#define __EXECUTIVE_CONFIG_H__
+
+/* Define to enable the use of simple executive DFA functions */
+//#define CVMX_ENABLE_DFA_FUNCTIONS
+
+/* Define to enable the use of simple executive packet output functions.
+** For packet I/O setup enable the helper functions below.
+*/
+#define CVMX_ENABLE_PKO_FUNCTIONS
+
+/* Define to enable the use of simple executive timer bucket functions.
+** Refer to cvmx-tim.[ch] for more information
+*/
+//#define CVMX_ENABLE_TIMER_FUNCTIONS
+
+/* Define to enable the use of simple executive helper functions. These
+** include many harware setup functions.  See cvmx-helper.[ch] for
+** details.
+*/
+#define CVMX_ENABLE_HELPER_FUNCTIONS
+
+/* CVMX_HELPER_FIRST_MBUFF_SKIP is the number of bytes to reserve before
+** the beginning of the packet. If necessary, override the default
+** here.  See the IPD section of the hardware manual for MBUFF SKIP
+** details.*/
+#define CVMX_HELPER_FIRST_MBUFF_SKIP 184
+
+/* CVMX_HELPER_NOT_FIRST_MBUFF_SKIP is the number of bytes to reserve in each
+** chained packet element. If necessary, override the default here */
+#define CVMX_HELPER_NOT_FIRST_MBUFF_SKIP 0
+
+/* CVMX_HELPER_ENABLE_BACK_PRESSURE controls whether back pressure is enabled
+** for all input ports. This controls if IPD sends backpressure to all ports if
+** Octeon's FPA pools don't have enough packet or work queue entries. Even when
+** this is off, it is still possible to get backpressure from individual
+** hardware ports. When configuring backpressure, also check
+** CVMX_HELPER_DISABLE_*_BACKPRESSURE below. If necessary, override the default
+** here */
+#define CVMX_HELPER_ENABLE_BACK_PRESSURE 1
+
+/* CVMX_HELPER_ENABLE_IPD controls if the IPD is enabled in the helper
+**  function. Once it is enabled the hardware starts accepting packets. You
+**  might want to skip the IPD enable if configuration changes are need
+**  from the default helper setup. If necessary, override the default here */
+#define CVMX_HELPER_ENABLE_IPD 0
+
+/* CVMX_HELPER_INPUT_TAG_TYPE selects the type of tag that the IPD assigns
+** to incoming packets. */
+#define CVMX_HELPER_INPUT_TAG_TYPE CVMX_POW_TAG_TYPE_ORDERED
+
+/* The following select which fields are used by the PIP to generate
+** the tag on INPUT
+** 0: don't include
+** 1: include */
+#define CVMX_HELPER_INPUT_TAG_IPV6_SRC_IP	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_DST_IP   	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_SRC_PORT 	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_DST_PORT 	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_NEXT_HEADER 	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_SRC_IP	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_DST_IP   	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_SRC_PORT 	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_DST_PORT 	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_PROTOCOL	0
+#define CVMX_HELPER_INPUT_TAG_INPUT_PORT	1
+
+/* Select skip mode for input ports */
+#define CVMX_HELPER_INPUT_PORT_SKIP_MODE	CVMX_PIP_PORT_CFG_MODE_SKIPL2
+
+/* Define the number of queues per output port */
+#define CVMX_HELPER_PKO_QUEUES_PER_PORT_INTERFACE0	1
+#define CVMX_HELPER_PKO_QUEUES_PER_PORT_INTERFACE1	1
+
+/* Force backpressure to be disabled.  This overrides all other
+** backpressure configuration */
+#define CVMX_HELPER_DISABLE_RGMII_BACKPRESSURE 0
+
+/* Disable the SPI4000's processing of backpressure packets and backpressure
+** generation. When this is 1, the SPI4000 will not stop sending packets when
+** receiving backpressure. It will also not generate backpressure packets when
+** its internal FIFOs are full. */
+#define CVMX_HELPER_DISABLE_SPI4000_BACKPRESSURE 0
+
+/* Select the number of low latency memory ports (interfaces) that
+** will be configured.  Valid values are 1 and 2.
+*/
+#define CVMX_LLM_CONFIG_NUM_PORTS 1
+
+/* Enable the fix for PKI-100 errata ("Size field is 8 too large in WQE and next
+** pointers"). If CVMX_ENABLE_LEN_M8_FIX is not enabled the fix for this errats will
+** not be enabled.
+** 0: Fix is not enabled
+** 1: Fix is enabled, if supported by hardware
+*/
+#define CVMX_ENABLE_LEN_M8_FIX  1
+
+#if defined(CVMX_ENABLE_HELPER_FUNCTIONS) && !defined(CVMX_ENABLE_PKO_FUNCTIONS)
+#define CVMX_ENABLE_PKO_FUNCTIONS
+#endif
+
+/* Executive resource descriptions provided in cvmx-resources.config */
+#include "cvmx-resources.config"
+
+#endif
diff --git a/arch/mips/cavium-octeon/gpl-executive/cvmx-linux-kernel-exports.c b/arch/mips/cavium-octeon/gpl-executive/cvmx-linux-kernel-exports.c
new file mode 100644
index 0000000..deeb064
--- /dev/null
+++ b/arch/mips/cavium-octeon/gpl-executive/cvmx-linux-kernel-exports.c
@@ -0,0 +1,96 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2005-2007 Cavium Networks
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include "cvmx.h"
+#include "cvmx-bootmem.h"
+#include "cvmx-cmd-queue.h"
+#include "cvmx-helper.h"
+#include "cvmx-helper-board.h"
+#include "cvmx-helper-util.h"
+#include "cvmx-mgmt-port.h"
+#include "cvmx-pko.h"
+#include "cvmx-spi.h"
+#include "cvmx-sysinfo.h"
+#include "cvmx-warn.h"
+
+/* Exports for cvmx-bootmem.c */
+EXPORT_SYMBOL(cvmx_bootmem_alloc);
+EXPORT_SYMBOL(cvmx_bootmem_alloc_address);
+EXPORT_SYMBOL(cvmx_bootmem_alloc_range);
+EXPORT_SYMBOL(cvmx_bootmem_alloc_named);
+EXPORT_SYMBOL(cvmx_bootmem_alloc_named_address);
+EXPORT_SYMBOL(cvmx_bootmem_alloc_named_range);
+EXPORT_SYMBOL(cvmx_bootmem_free_named);
+EXPORT_SYMBOL(cvmx_bootmem_find_named_block);
+EXPORT_SYMBOL(cvmx_bootmem_available_mem);
+
+/* Exports for cvmx-cmd-queue.c */
+EXPORT_SYMBOL(cvmx_cmd_queue_initialize);
+EXPORT_SYMBOL(cvmx_cmd_queue_shutdown);
+EXPORT_SYMBOL(cvmx_cmd_queue_length);
+EXPORT_SYMBOL(cvmx_cmd_queue_buffer);
+EXPORT_SYMBOL(cvmx_cmd_queue_write);
+EXPORT_SYMBOL(cvmx_cmd_queue_write1);
+EXPORT_SYMBOL(cvmx_cmd_queue_write2);
+EXPORT_SYMBOL(cvmx_cmd_queue_write3);
+EXPORT_SYMBOL(cvmx_cmd_queue_write4);
+
+/* Exports for cvmx-helper.c */
+EXPORT_SYMBOL(cvmx_helper_ipd_and_packet_input_enable);
+EXPORT_SYMBOL(cvmx_helper_initialize_packet_io_global);
+EXPORT_SYMBOL(cvmx_helper_initialize_packet_io_local);
+EXPORT_SYMBOL(cvmx_helper_ports_on_interface);
+EXPORT_SYMBOL(cvmx_helper_get_number_of_interfaces);
+EXPORT_SYMBOL(cvmx_helper_interface_get_mode);
+EXPORT_SYMBOL(cvmx_helper_link_autoconf);
+EXPORT_SYMBOL(cvmx_helper_link_get);
+EXPORT_SYMBOL(cvmx_helper_link_set);
+
+/* Exports for cvmx-helper-board.c */
+EXPORT_SYMBOL(cvmx_helper_board_get_mii_address);
+
+/* Exports for cvmx-helper-util.c */
+EXPORT_SYMBOL(cvmx_helper_interface_mode_to_string);
+EXPORT_SYMBOL(cvmx_helper_dump_packet);
+EXPORT_SYMBOL(cvmx_helper_setup_red_queue);
+EXPORT_SYMBOL(cvmx_helper_setup_red);
+EXPORT_SYMBOL(cvmx_helper_get_version);
+EXPORT_SYMBOL(cvmx_helper_get_ipd_port);
+EXPORT_SYMBOL(cvmx_helper_get_interface_num);
+EXPORT_SYMBOL(cvmx_helper_get_interface_index_num);
+
+/* Exports for cvmx-mgmt-port.c */
+EXPORT_SYMBOL(cvmx_mgmt_port_initialize);
+EXPORT_SYMBOL(cvmx_mgmt_port_shutdown);
+EXPORT_SYMBOL(cvmx_mgmt_port_enable);
+EXPORT_SYMBOL(cvmx_mgmt_port_disable);
+EXPORT_SYMBOL(cvmx_mgmt_port_send);
+EXPORT_SYMBOL(cvmx_mgmt_port_receive);
+EXPORT_SYMBOL(cvmx_mgmt_port_get_link);
+EXPORT_SYMBOL(cvmx_mgmt_port_set_mac);
+EXPORT_SYMBOL(cvmx_mgmt_port_get_mac);
+
+/* Exports for cvmx-pko.c */
+EXPORT_SYMBOL(cvmx_pko_initialize_global);
+EXPORT_SYMBOL(cvmx_pko_initialize_local);
+EXPORT_SYMBOL(cvmx_pko_enable);
+EXPORT_SYMBOL(cvmx_pko_disable);
+EXPORT_SYMBOL(cvmx_pko_shutdown);
+EXPORT_SYMBOL(cvmx_pko_config_port);
+
+/* Exports for cvmx-spi.c and cvmx-spi4000.c */
+EXPORT_SYMBOL(cvmx_spi_restart_interface);
+EXPORT_SYMBOL(cvmx_spi4000_check_speed);
+
+/* Exports for cvmx-sysinfo.c */
+EXPORT_SYMBOL(cvmx_sysinfo_get);
+
+/* Exports for cvmx-warn.c */
+EXPORT_SYMBOL(cvmx_warn);
+
-- 
1.5.5.1

