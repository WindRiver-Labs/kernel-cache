From 1e27f0a065a563cc34da6925bca65037455c0dc4 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:23:19 -0700
Subject: [PATCH] Add Clock API support based on R4K CEVT.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/Kconfig           |    1 +
 arch/mips/kernel/cevt-r4k.c |   22 +++++++++++++++++-----
 2 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index cdcf2fd..f32dd0d 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -623,6 +623,7 @@ config CAVIUM_OCTEON_REFERENCE_BOARD
 	select SYS_SUPPORTS_64BIT_KERNEL
 	select SYS_SUPPORTS_BIG_ENDIAN
 	select SYS_SUPPORTS_HIGHMEM
+	select SYS_R4K_CVET_HWTIMER 
 	select SYS_SUPPORTS_KGDB
 	select CPU_CAVIUM_OCTEON
 	select SWAP_IO_SPACE
diff --git a/arch/mips/kernel/cevt-r4k.c b/arch/mips/kernel/cevt-r4k.c
index afe06db..9b63970 100644
--- a/arch/mips/kernel/cevt-r4k.c
+++ b/arch/mips/kernel/cevt-r4k.c
@@ -48,6 +48,7 @@ static struct hwtimer mips_hwtimer = {
 	.hook = NULL,
 	.hook_data = NULL
 };
+static atomic_t hwtimer_cpu_trigger[NR_CPUS];
 #endif
 
 static int mips_next_event(unsigned long delta,
@@ -104,10 +105,15 @@ irqreturn_t c0_compare_interrupt(int irq, void *dev_id)
 	}
 
 #if defined (CONFIG_SYS_R4K_CVET_HWTIMER) && defined (CONFIG_HWTIMER_HOOKS)
-	spin_lock(mips_hwtimer.lock);
-	if (mips_hwtimer.hook != NULL)
-		(mips_hwtimer.hook)(mips_hwtimer.hook_data);
-	spin_unlock(mips_hwtimer.lock);
+	if (atomic_dec_and_test(&hwtimer_cpu_trigger[smp_processor_id()])) {
+		atomic_set(&hwtimer_cpu_trigger[smp_processor_id()],
+			   num_online_cpus());
+
+		spin_lock(mips_hwtimer.lock);
+		if (mips_hwtimer.hook != NULL)
+			(mips_hwtimer.hook)(mips_hwtimer.hook_data);
+		spin_unlock(mips_hwtimer.lock);
+	}
 #endif
 out:
 	return IRQ_HANDLED;
@@ -209,7 +215,13 @@ int __cpuinit mips_clockevent_init(void)
 		return -ENXIO;
 
 #if defined (CONFIG_SYS_R4K_CVET_HWTIMER) && defined (CONFIG_HWTIMER_HOOKS)
-	register_hwtimer(&mips_hwtimer);
+	if (smp_processor_id() == 0) {
+		unsigned int i;
+		for_each_possible_cpu(i)
+			atomic_set(&hwtimer_cpu_trigger[i], i + 1);
+
+		register_hwtimer(&mips_hwtimer);
+	}
 #endif
 	/*
 	 * With vectored interrupts things are getting platform specific.
-- 
1.5.5.1

