From 6e8e475c2dcbc0fe5e048a1fbd01e0745400fe8d Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Mon, 27 Oct 2008 15:57:51 -0400
Subject: [PATCH] [PATCH] unchanged:

From 209eeb63eadd88871ba4047b70c38c2ae125a6de Mon Sep 17 00:00:00 2001
Subject: [PATCH] unchanged:
---
 arch/mips/cavium-octeon/msi.c        |    8 +-
 arch/mips/cavium-octeon/pci-common.c |   28 +++++----
 arch/mips/cavium-octeon/pci-common.h |    8 +-
 arch/mips/cavium-octeon/pci.c        |   16 +++---
 arch/mips/cavium-octeon/pci_chips.c  |  106 +++++++++++++++++-----------------
 arch/mips/cavium-octeon/pcie.c       |   30 ++++++----
 6 files changed, 102 insertions(+), 94 deletions(-)

diff --git a/arch/mips/cavium-octeon/msi.c b/arch/mips/cavium-octeon/msi.c
index b09f065..3b9ab3f 100644
--- a/arch/mips/cavium-octeon/msi.c
+++ b/arch/mips/cavium-octeon/msi.c
@@ -14,12 +14,12 @@
 #include "pci-common.h"
 
 /* Each bit in msi_free_irq_bitmask represents a MSI interrupt that is in use */
-static uint64_t msi_free_irq_bitmask = 0;
+static uint64_t msi_free_irq_bitmask;
 
 /* Each bit in msi_multiple_irq_bitmask tells that the device using this bit in
    msi_free_irq_bitmask is also using the next bit. This is used so we can
    disable all of the MSI interrupts when a device uses multiple */
-static uint64_t msi_multiple_irq_bitmask = 0;
+static uint64_t msi_multiple_irq_bitmask;
 
 /* This lock controls updates to msi_free_irq_bitmask and
    msi_multiple_irq_bitmask */
@@ -73,7 +73,7 @@ int arch_setup_msi_irq(struct pci_dev *dev, struct msi_desc *desc)
 	if (request_private_bits > 5)
 		request_private_bits = 0;
 
-      try_only_one:
+try_only_one:
 	/* The IRQs have to be aligned on a power of two based on the number
 	   being requested */
 	irq_step = 1 << request_private_bits;
@@ -122,7 +122,7 @@ int arch_setup_msi_irq(struct pci_dev *dev, struct msi_desc *desc)
 		break;
 	case OCTEON_DMA_BAR_TYPE_PCIE:
 		/* When using PCIe, Bar 0 is based at 0 */
-		// FIXME CVMX_NPEI_MSI_RCV* other than 0?
+		/* FIXME CVMX_NPEI_MSI_RCV* other than 0? */
 		msg.address_lo = (0 + CVMX_NPEI_PCIE_MSI_RCV) & 0xffffffff;
 		msg.address_hi = (0 + CVMX_NPEI_PCIE_MSI_RCV) >> 32;
 		break;
diff --git a/arch/mips/cavium-octeon/pci-common.c b/arch/mips/cavium-octeon/pci-common.c
index 8706d45..16b71fa 100644
--- a/arch/mips/cavium-octeon/pci-common.c
+++ b/arch/mips/cavium-octeon/pci-common.c
@@ -9,13 +9,13 @@
 #include <linux/init.h>
 #include <linux/pci.h>
 #include <linux/interrupt.h>
-#include <asm/time.h>
-#include <asm/delay.h>
+#include <linux/time.h>
+#include <linux/delay.h>
 #include "pci-common.h"
 #include "hal.h"
 
-typeof(pcibios_map_irq) * octeon_pcibios_map_irq = NULL;
-octeon_dma_bar_type_t octeon_dma_bar_type = OCTEON_DMA_BAR_TYPE_INVALID;
+typeof(pcibios_map_irq) *octeon_pcibios_map_irq;
+enum octeon_dma_bar_type octeon_dma_bar_type = OCTEON_DMA_BAR_TYPE_INVALID;
 
 /**
  * Map a PCI device to the appropriate interrupt line
@@ -54,14 +54,14 @@ int pcibios_plat_dev_init(struct pci_dev *dev)
 	/* Set latency timers for all devices */
 	pci_write_config_byte(dev, PCI_LATENCY_TIMER, 48);
 
-        /* Enable reporting System errors and parity errors on all devices */
-        {
-            uint16_t config;
-            /* Enable parity checking and error reporting */
-            pci_read_config_word(dev, PCI_COMMAND, &config);
-            config |= PCI_COMMAND_PARITY | PCI_COMMAND_SERR;
-            pci_write_config_word(dev, PCI_COMMAND, config);
-        }
+	/* Enable reporting System errors and parity errors on all devices */
+	{
+		uint16_t config;
+		/* Enable parity checking and error reporting */
+		pci_read_config_word(dev, PCI_COMMAND, &config);
+		config |= PCI_COMMAND_PARITY | PCI_COMMAND_SERR;
+		pci_write_config_word(dev, PCI_COMMAND, config);
+	}
 
 	if (dev->subordinate) {
 		uint16_t config;
@@ -73,7 +73,9 @@ int pcibios_plat_dev_init(struct pci_dev *dev)
 		config |= PCI_BRIDGE_CTL_PARITY | PCI_BRIDGE_CTL_SERR;
 		/* Reporting master aborts also causes SERR. Normally it
 		   creates too much noise, but it might be useful in the future */
-		// config |= PCI_BRIDGE_CTL_MASTER_ABORT;
+		/*
+		config |= PCI_BRIDGE_CTL_MASTER_ABORT;
+		*/
 		pci_write_config_word(dev, PCI_BRIDGE_CONTROL, config);
 	}
 
diff --git a/arch/mips/cavium-octeon/pci-common.h b/arch/mips/cavium-octeon/pci-common.h
index 5256bca..74ae799 100644
--- a/arch/mips/cavium-octeon/pci-common.h
+++ b/arch/mips/cavium-octeon/pci-common.h
@@ -16,24 +16,24 @@
 /* pcibios_map_irq() is defined inside pci-common.c. All it does is call the
    Octeon specific version pointed to by this variable. This function needs to
    change for PCI or PCIe based hosts */
-extern typeof(pcibios_map_irq) * octeon_pcibios_map_irq;
+extern typeof(pcibios_map_irq) *octeon_pcibios_map_irq;
 
 /* The following defines are only used when octeon_dma_bar_type =
    OCTEON_DMA_BAR_TYPE_BIG */
 #define OCTEON_PCI_BAR1_HOLE_BITS 5
 #define OCTEON_PCI_BAR1_HOLE_SIZE (1ul<<(OCTEON_PCI_BAR1_HOLE_BITS+3))
 
-typedef enum {
+enum octeon_dma_bar_type {
 	OCTEON_DMA_BAR_TYPE_INVALID,
 	OCTEON_DMA_BAR_TYPE_SMALL,
 	OCTEON_DMA_BAR_TYPE_BIG,
 	OCTEON_DMA_BAR_TYPE_PCIE
-} octeon_dma_bar_type_t;
+};
 
 /**
  * This is a variable to tell the DMA mapping system in dma-octeon.c
  * how to map PCI DMA addresses.
  */
-extern octeon_dma_bar_type_t octeon_dma_bar_type;
+extern enum octeon_dma_bar_type octeon_dma_bar_type;
 
 #endif
diff --git a/arch/mips/cavium-octeon/pci.c b/arch/mips/cavium-octeon/pci.c
index b3e66a5..c56d2d5 100644
--- a/arch/mips/cavium-octeon/pci.c
+++ b/arch/mips/cavium-octeon/pci.c
@@ -9,8 +9,8 @@
 #include <linux/init.h>
 #include <linux/pci.h>
 #include <linux/interrupt.h>
-#include <asm/time.h>
-#include <asm/delay.h>
+#include <linux/time.h>
+#include <linux/delay.h>
 #include "hal.h"
 #include "pci-common.h"
 
@@ -28,7 +28,7 @@
 /**
  * This is the bit decoding used for the Octeon PCI controller addresses
  */
-typedef union {
+union octeon_pci_address {
 	uint64_t u64;
 	struct {
 		uint64_t upper:2;
@@ -44,7 +44,7 @@ typedef union {
 		uint64_t func:3;
 		uint64_t reg:8;
 	} s;
-} octeon_pci_address_t;
+};
 
 
 /**
@@ -94,9 +94,9 @@ int __init octeon_pci_pcibios_map_irq(struct pci_dev *dev, u8 slot, u8 pin)
  * @return
  */
 static int octeon_read_config(struct pci_bus *bus, unsigned int devfn, int reg,
-			      int size, u32 * val)
+			      int size, u32 *val)
 {
-	octeon_pci_address_t pci_addr;
+	union octeon_pci_address pci_addr;
 
 	pci_addr.u64 = 0;
 	pci_addr.s.upper = 2;
@@ -140,7 +140,7 @@ static int octeon_read_config(struct pci_bus *bus, unsigned int devfn, int reg,
 static int octeon_write_config(struct pci_bus *bus, unsigned int devfn, int reg,
 			       int size, u32 val)
 {
-	octeon_pci_address_t pci_addr;
+	union octeon_pci_address pci_addr;
 
 	pci_addr.u64 = 0;
 	pci_addr.s.upper = 2;
@@ -223,7 +223,7 @@ static void octeon_pci_initialize(void)
 
 	udelay(2000);		/* Hold PCI reset for 2 ms */
 
-	ctl_status.u64 = 0;	// cvmx_read_csr(CVMX_NPI_CTL_STATUS);
+	ctl_status.u64 = 0;	/* cvmx_read_csr(CVMX_NPI_CTL_STATUS); */
 	ctl_status.s.max_word = 1;
 	ctl_status.s.timer = 1;
 	cvmx_write_csr(CVMX_NPI_CTL_STATUS, ctl_status.u64);
diff --git a/arch/mips/cavium-octeon/pci_chips.c b/arch/mips/cavium-octeon/pci_chips.c
index b7e113b..38aab18 100644
--- a/arch/mips/cavium-octeon/pci_chips.c
+++ b/arch/mips/cavium-octeon/pci_chips.c
@@ -9,10 +9,12 @@
 #include <linux/init.h>
 #include <linux/pci.h>
 #include <linux/interrupt.h>
-#include <asm/delay.h>
+#include <linux/delay.h>
 #include "hal.h"
 
 
+extern void octeon_i8259_setup(int irq_line);
+
 /**
  * Fixup the Via southbridge to enable the IDE. By default
  * it is disabled and doesn't show up in a bus scan.
@@ -44,7 +46,6 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_VIA, PCI_DEVICE_ID_VIA_82C686,
  */
 static void chip_vt82c686b_fix_parent_bridge(struct pci_dev *via_dev)
 {
-	extern void octeon_i8259_setup(int irq_line);
 	struct pci_dev *dev = via_dev->bus->self;
 	uint16_t val;
 	pci_write_config_word(dev, 0x04, 0x0026);
@@ -73,16 +74,16 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_VIA, PCI_DEVICE_ID_VIA_82C686,
 static void chip_vt82c686b_setup(struct pci_dev *dev)
 {
 	uint8_t bvalue;
-	pci_write_config_byte(dev, 0x40, 0x08);	// I/O Recovery Time Enable
-	pci_write_config_byte(dev, 0x41, 0x41);	// I/O Recovery Time=8BCLKs,
-						// ISA Refresh
-	pci_write_config_byte(dev, 0x45, 0x80);	// ISA Master /DMA to PCI Line
-						// Buffer Enable
-	pci_write_config_byte(dev, 0x46, 0x60);	// GATE INTR Enable, Flush Line
-						// Buffer for Int or DMA IOR
-						// Cycle Enable
-	pci_write_config_byte(dev, 0x47, 0xa0);	// CPU Reset source: INIT, EISA
-						// 4d0 /4d1 port enable
+	pci_write_config_byte(dev, 0x40, 0x08);	/* I/O Recovery Time Enable */
+	pci_write_config_byte(dev, 0x41, 0x41);	/* I/O Recovery Time=8BCLKs,
+						   ISA Refresh */
+	pci_write_config_byte(dev, 0x45, 0x80);	/* ISA Master /DMA to PCI Line
+						   Buffer Enable */
+	pci_write_config_byte(dev, 0x46, 0x60);	/* GATE INTR Enable, Flush Line
+						   Buffer for Int or DMA IOR
+						   Cycle Enable */
+	pci_write_config_byte(dev, 0x47, 0xa0);	/* CPU Reset source: INIT, EISA
+						   4d0 /4d1 port enable */
 	/*
 	   Offset 48 - Miscellaneous Control 3 ................................
 	   RW 7-4 Reserved ........................................ always
@@ -147,7 +148,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	pci_write_config_byte(dev, 0x52, 0x34);
 
 	/*
-	   Offset 5A � KBC / RTC
+	   Offset 5A - KBC / RTC
 	   Control......................................RW Bits 7-4 of this
 	   register are latched from pins SD7-4 at power- up but are read/write
 	   accessible so may be changed after power-up to change the default
@@ -198,7 +199,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	pci_write_config_word(dev, 0x66, 0x4);
 
 	/*
-	   Offset 77 � GPIO Control 4 Control (10h)..................... RW 7
+	   Offset 77 - GPIO Control 4 Control (10h)..................... RW 7
 	   DRQ / DACK# Pins are GPI / GPO 0
 	   Disable................................................... default 1
 	   Enable 6 Game Port XY Pins are GPI / GPO 0
@@ -215,10 +216,10 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	   Disable................................................... default 1
 	   Enable 0 GPO13 Enable (Pin U5) 0 Pin defined as
 	   SOE#.............................. default 1 Pin defined as GPO13 */
-	pci_write_config_byte(dev, 0x77, 0x40);	// Enable GPI22
+	pci_write_config_byte(dev, 0x77, 0x40);	/* Enable GPI22 */
 
 	/*
-	   Offset 81 � ISA Positive Decoding Control 1..................RW 7
+	   Offset 81 - ISA Positive Decoding Control 1..................RW 7
 	   On-Board I/O Port Positive Decoding 0 Disable
 	   ...................................................default 1 Enable
 	   6 Microsoft-Sound System I/O Port Positive Decoding 0 Disable
@@ -235,7 +236,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	pci_write_config_byte(dev, 0x81, 0xc0);
 
 	/*
-	   Offset 82 � ISA Positive Decoding Control 2..................RW 7
+	   Offset 82 - ISA Positive Decoding Control 2..................RW 7
 	   FDC Positive Decoding 0 Disable
 	   ...................................................default 1 Enable
 	   6 LPT Positive Decoding 0 Disable
@@ -252,7 +253,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	pci_write_config_byte(dev, 0x82, 0xdc);
 
 	/*
-	   Offset 83 � ISA Positive Decoding Control 3 ................. RW 7
+	   Offset 83 - ISA Positive Decoding Control 3 ................. RW 7
 	   COM Port B Positive Decoding 0
 	   Disable................................................... default 1
 	   Enable 6-4 COM-Port B Decode Range 000 3F8h-3FFh
@@ -267,7 +268,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	pci_write_config_byte(dev, 0x83, 0x98);
 
 	/*
-	   Offset 84 � ISA Positive Decoding Control 4 ................. RW 7-5
+	   Offset 84 - ISA Positive Decoding Control 4 ................. RW 7-5
 	   Reserved ........................................always reads 0 4
 	   CD: Reserved.....................................always reads 0 CE:
 	   Port CF9 Positive Decoding 0 Disable 1
@@ -282,7 +283,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	pci_write_config_byte(dev, 0x84, 0x04);
 
 	/*
-	   Offset 85 � Extended Function Enable............................RW
+	   Offset 85 - Extended Function Enable............................RW
 	   7-6 PCI Master Grant Timeout Select 00 Disable
 	   ...................................................default 01 32 PCI
 	   Clocks 10 64 PCI Clocks 11 96 PCI Clocks 5 Keyboard Controller
@@ -301,7 +302,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	pci_write_config_byte(dev, 0x85, 0x23);
 
 	/*
-	   Index E0 � Super-I/O Device ID (3Ch) ............................ RO
+	   Index E0 - Super-I/O Device ID (3Ch) ............................ RO
 	   7-0 Super-I/O ID ........................................ default =
 	   3Ch */
 	outb(0xe0, 0x3f0);
@@ -309,7 +310,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 		printk("    ERROR: Super-I/O Device ID not found (read 0x%x, expected 0x3c)\n", inb(0x3f1));
 
 	/*
-	   Index E2 � Super-I/O Function Select (03h)...................RW 7-5
+	   Index E2 - Super-I/O Function Select (03h)...................RW 7-5
 	   Reserved ........................................ always reads 0 4
 	   Floppy Controller Enable 0 Disable
 	   ...................................................default 1 Enable
@@ -339,7 +340,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	outb(0x2f8 >> 2, 0x3f1);	/* PC Legacy default is 0x2f8 */
 
 	/*
-	   Index F6 � Floppy Controller Configuration................. RW 7-6
+	   Index F6 - Floppy Controller Configuration................. RW 7-6
 	   Reserved ........................................always reads 0 5
 	   Floppy Drive On Parallel Port 0 Parallel Port (SPP) Mode
 	   ...................... default 1 FDC Mode 4 3-Mode FDD 0
@@ -373,28 +374,28 @@ static void chip_vt82c686b_ide_setup(struct pci_dev *dev)
 	uint8_t bvalue;
 	pci_read_config_byte(dev, 0x40, &bvalue);
 	pci_write_config_byte(dev, 0x40, bvalue | 3);
-	pci_write_config_byte(dev, 0x04, 0x87);	// Enable Bus Master I/O
-						// space,Memory space
-	pci_write_config_byte(dev, 0x0d, 0x40);	// Latency Timer
-	pci_write_config_byte(dev, 0x3c, 0x0e);	// Interrupt Line
+	pci_write_config_byte(dev, 0x04, 0x87);	/* Enable Bus Master I/O
+						   space,Memory space */
+	pci_write_config_byte(dev, 0x0d, 0x40);	/* Latency Timer */
+	pci_write_config_byte(dev, 0x3c, 0x0e);	/* Interrupt Line */
 	pci_read_config_byte(dev, 0x41, &bvalue);
-	pci_write_config_byte(dev, 0x41, bvalue | 0xc0);	// enable read
-								// prefectch/post
-								// write buffer
-	pci_write_config_byte(dev, 0x43, 0x05);	// FIFO configuration 1/2
-	pci_write_config_byte(dev, 0x44, 0x1c);	// Miscellaneous Control
-	pci_write_config_byte(dev, 0x45, 0x00);	// Miscellaneous Control
+	pci_write_config_byte(dev, 0x41, bvalue | 0xc0);/* enable read
+							   prefectch/post
+							   write buffer */
+	pci_write_config_byte(dev, 0x43, 0x05);	/* FIFO configuration 1/2 */
+	pci_write_config_byte(dev, 0x44, 0x1c);	/* Miscellaneous Control */
+	pci_write_config_byte(dev, 0x45, 0x00);	/* Miscellaneous Control */
 
-	pci_write_config_byte(dev, 0x46, 0xc0);	// Disable DMA FIFO flush
-	pci_write_config_dword(dev, 0x48, 0xa8a8a8a8);	// Drive Timing Control
-	pci_write_config_byte(dev, 0x4c, 0xff);	// Address Setup Time
+	pci_write_config_byte(dev, 0x46, 0xc0);	/* Disable DMA FIFO flush */
+	pci_write_config_dword(dev, 0x48, 0xa8a8a8a8);	/* Drive Timing Ctrl */
+	pci_write_config_byte(dev, 0x4c, 0xff);		/* Address Setup Time */
 
-	pci_write_config_dword(dev, 0x50, 0x07070707);	// UltraDMA Extended
-							// Timing Control
-	pci_write_config_byte(dev, 0x54, 0x04);	// UltraDMA FIFO control
+	pci_write_config_dword(dev, 0x50, 0x07070707);	/* UltraDMA Extended
+							   Timing Control */
+	pci_write_config_byte(dev, 0x54, 0x04);	/* UltraDMA FIFO control */
 
-	pci_write_config_word(dev, 0x04, 0x87);	// Eanable I/O space, Bus
-						// Master
+	pci_write_config_word(dev, 0x04, 0x87);	/* Eanable I/O space,
+						   Bus Master */
 
 	pci_write_config_byte(dev, 0x3c, OCTEON_IRQ_I8259S6);
 	dev->irq = OCTEON_IRQ_I8259S6;
@@ -430,14 +431,14 @@ static void chip_vt82c686b_pmio_setup(struct pci_dev *dev)
 	uint32_t base;
 	u8 val;
 
-	pci_write_config_word(dev, 0x041, 0x80);	// Eanble PM/IO base
-	pci_write_config_word(dev, 0x048, 0x500);	// Set PM/IO base to
-							// 0x500
+	pci_write_config_word(dev, 0x041, 0x80);	/* Enable PM/IO base */
+	pci_write_config_word(dev, 0x048, 0x500);	/* Set PM/IO base to
+							   0x500 */
 
-	pci_read_config_dword(dev, 0x48, &base);	// read PM/IO base
+	pci_read_config_dword(dev, 0x48, &base);	/* read PM/IO base */
 	base = base & 0xff00;
-	val = inb(base + 0x4a);	// bit 6 is IDE cable type 0:80w, 1:40w
-	outb(0x10, 0x70);	// write to CMOS offset=0x10
+	val = inb(base + 0x4a);	/* bit 6 is IDE cable type 0:80w, 1:40w */
+	outb(0x10, 0x70);	/* write to CMOS offset=0x10 */
 	outb(val, 0x71);
 	outb(0x10, 0x70);
 	val = inb(0x71);
@@ -456,17 +457,16 @@ DECLARE_PCI_FIXUP_ENABLE(PCI_VENDOR_ID_VIA, PCI_DEVICE_ID_VIA_82C686_4,
 static void chip_plx6540_optimize(struct pci_dev *dev)
 {
 	uint8_t buffer_control;
-	pci_write_config_byte(dev, 0x48, (2 << 1) /* PCIX 4 cache lines */ |(5 << 3)	/* PCI
-											   20
-											   dwords
-					 */ );
+	pci_write_config_byte(dev, 0x48,  (2 << 1) /* PCIX 4 cache lines */
+					| (5 << 3) /* PCI 20 dwords*/
+						);
 					/* Primary bus prefetch */
-	pci_write_config_byte(dev, 0x4a, (8 << 2) /* 32 dwords */ );	/* Primary
+	pci_write_config_byte(dev, 0x4a, (8 << 2) /* 32 dwords */);	/* Primary
 									   Incremental
 									   Prefetch
 									   Count
 									 */
-	pci_write_config_byte(dev, 0x4c, 96 /* max dwords prefetch */ );	/* Primary
+	pci_write_config_byte(dev, 0x4c, 96 /* max dwords prefetch */);		/* Primary
 										   Maximum
 										   Prefetch
 										   Count
diff --git a/arch/mips/cavium-octeon/pcie.c b/arch/mips/cavium-octeon/pcie.c
index 90f2c0f..f15416b 100644
--- a/arch/mips/cavium-octeon/pcie.c
+++ b/arch/mips/cavium-octeon/pcie.c
@@ -9,8 +9,8 @@
 #include <linux/init.h>
 #include <linux/pci.h>
 #include <linux/interrupt.h>
-#include <asm/time.h>
-#include <asm/delay.h>
+#include <linux/time.h>
+#include <linux/delay.h>
 #include "hal.h"
 #include "cvmx-pcie.h"
 #include "pci-common.h"
@@ -67,7 +67,7 @@ int __init octeon_pcie_pcibios_map_irq(struct pci_dev *dev, u8 slot, u8 pin)
  */
 static inline int octeon_pcie_read_config(int pcie_port, struct pci_bus *bus,
 					  unsigned int devfn, int reg, int size,
-					  u32 * val)
+					  u32 *val)
 {
 	octeon_cvmemctl_t cvmmemctl;
 	octeon_cvmemctl_t cvmmemctl_save;
@@ -152,9 +152,11 @@ static inline int octeon_pcie_read_config(int pcie_port, struct pci_bus *bus,
 		__write_64bit_c0_register($11, 7, cvmmemctl.u64);
 	}
 
-	// printk("octeon_pcie_read_config(pcie_port=%d, bus=%d, devfn=0x%x,
-	// reg=0x%x, size=%d, val=%p)\n",
-	// pcie_port, bus_number, devfn, reg, size, val);
+	/*
+	printk("octeon_pcie_read_config(pcie_port=%d, bus=%d, devfn=0x%x,
+	       reg=0x%x, size=%d, val=%p)\n",
+	       pcie_port, bus_number, devfn, reg, size, val);
+	*/
 
 	switch (size) {
 	case 4:
@@ -172,7 +174,9 @@ static inline int octeon_pcie_read_config(int pcie_port, struct pci_bus *bus,
 	default:
 		return PCIBIOS_FUNC_NOT_SUPPORTED;
 	}
-	// printk("octeon_pcie_read_config val=0x%x\n", *val);
+	/*
+	printk("octeon_pcie_read_config val=0x%x\n", *val);
+	*/
 	if (OCTEON_IS_MODEL(OCTEON_CN56XX_PASS1) ||
 	    OCTEON_IS_MODEL(OCTEON_CN56XX_PASS1_1))
 		__write_64bit_c0_register($11, 7, cvmmemctl_save.u64);
@@ -180,13 +184,13 @@ static inline int octeon_pcie_read_config(int pcie_port, struct pci_bus *bus,
 }
 
 static int octeon_pcie0_read_config(struct pci_bus *bus, unsigned int devfn,
-				    int reg, int size, u32 * val)
+				    int reg, int size, u32 *val)
 {
 	return octeon_pcie_read_config(0, bus, devfn, reg, size, val);
 }
 
 static int octeon_pcie1_read_config(struct pci_bus *bus, unsigned int devfn,
-				    int reg, int size, u32 * val)
+				    int reg, int size, u32 *val)
 {
 	return octeon_pcie_read_config(1, bus, devfn, reg, size, val);
 }
@@ -213,9 +217,11 @@ static inline int octeon_pcie_write_config(int pcie_port, struct pci_bus *bus,
 	if (bus->parent == NULL)
 		bus_number = 0;
 
-	// printk("octeon_pcie_write_config(pcie_port=%d, bus=%d, devfn=0x%x,
-	// reg=0x%x, size=%d, val=0x%x)\n",
-	// pcie_port, bus_number, devfn, reg, size, val);
+	/*
+	printk("octeon_pcie_write_config(pcie_port=%d, bus=%d, devfn=0x%x,
+	       reg=0x%x, size=%d, val=0x%x)\n",
+	       pcie_port, bus_number, devfn, reg, size, val);
+	*/
 	switch (size) {
 	case 4:
 		cvmx_pcie_config_write32(pcie_port, bus_number, devfn >> 3,
-- 
1.5.5.1

