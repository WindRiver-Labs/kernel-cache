From 15e1b0a67e2483f022d9a359ca5ff14207a7cb8e Mon Sep 17 00:00:00 2001
From: Wally Gleemer <Wally.Gleemer@windriver.com>
Date: Thu, 13 Mar 2008 22:43:15 -0700
Subject: [PATCH] cavium: timer IRQ cleanup

Kernel.org git ID 7bcf7717 for clockevents totally changes the timer
code.  This brings it in line with the other r4k read_c0 type timer
platforms and reduces the board specifics even more.

Signed-off-by: Wally Gleemer <Wally.Gleemer@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |   69 ++------------------------------------
 1 files changed, 4 insertions(+), 65 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 4e819f6..512abca 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -4,6 +4,7 @@
  * for more details.
  *
  * Copyright (C) 2004-2007 Cavium Networks
+ * Copyright (C) 2008 Wind River Systems
  */
 #include <linux/init.h>
 #include <linux/delay.h>
@@ -36,7 +37,6 @@
 
 extern void octeon_user_io_init(void);
 extern void pci_console_init(const char *arg);
-static unsigned long CYCLES_PER_JIFFY;
 static int ECC_REPORT_SINGLE_BIT_ERRORS = 0;
 static unsigned long long MAX_MEMORY = 512ull << 20;
 
@@ -108,70 +108,13 @@ static void octeon_halt(void)
 
 
 /**
- * Read the Octeon high performance counter
+ * Platform time init specifics.
  *
- * @return The counter value. For some brain dead reason, the kernel
- *         uses a 32bit number here.
- */
-static cycles_t octeon_hpt_read(void)
-{
-	cycles_t cycles;
-      asm("rdhwr %0,$31":"=r"(cycles));
-	return cycles;
-}
-
-
-/**
- * Acknowledge a timer tick. We don't use the standard Mips
- * one because it confuses the timer ticks and the HPT clock.
- */
-static void octeon_timer_ack(void)
-{
-	uint32_t count;
-	uint32_t next_compare = read_c0_compare() + CYCLES_PER_JIFFY;
-	write_c0_compare(next_compare);
-	count = read_c0_count();
-	if ((count - next_compare) < 0x7fffffff) {
-		next_compare = count + CYCLES_PER_JIFFY;
-		write_c0_compare(next_compare);
-	}
-}
-
-
-/**
- * Interrupt entry point for timer ticks
- *
- * @param irq
- * @param dev_id
  * @return
  */
-static irqreturn_t octeon_main_timer_interrupt(int irq, void *dev_id)
+void __init plat_time_init(void)
 {
-	if (read_c0_cause() & (1 << 30)) {
-		if (smp_processor_id() == 0) {
-			/* This function calls the timer ack internally */
-			timer_interrupt(irq, dev_id);
-		} else {
-			octeon_timer_ack();
-			local_timer_interrupt(irq, dev_id);
-		}
-		return IRQ_HANDLED;
-	} else
-		return IRQ_NONE;
-}
-
-
-/**
- * Setup the first cores timer interrupt
- *
- * @param irq
- * @return
- */
-void __init plat_timer_setup(struct irqaction *irq)
-{
-	irq->handler = octeon_main_timer_interrupt;
-	irq->flags |= SA_SHIRQ;
-	setup_irq(7, irq);
+	/* Nothing special here, but we are required to have one */
 }
 
 
@@ -894,11 +837,7 @@ void prom_init(void)
 
 	/* you should these macros defined in include/asm/bootinfo.h */
 	mips_machtype = MACH_CAVIUM_OCTEON;
-
 	mips_hpt_frequency = octeon_get_clock_rate();
-	clocksource_mips.read = octeon_hpt_read;
-	mips_timer_ack = octeon_timer_ack;
-	CYCLES_PER_JIFFY = ((mips_hpt_frequency + HZ / 2) / HZ);
 
 	_machine_restart = octeon_restart;
 	_machine_halt = octeon_halt;
-- 
1.5.5.1

