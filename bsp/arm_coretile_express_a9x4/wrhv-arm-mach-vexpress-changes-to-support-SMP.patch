From b3fafae34897fa10d4492124129b924c86fb9242 Mon Sep 17 00:00:00 2001
From: Jim Somerville <Jim.Somerville@windriver.com>
Date: Tue, 6 Sep 2011 19:46:05 -0400
Subject: [PATCH] wrhv: arm: mach-vexpress changes to support SMP

Change points:
- paravirt the smp cross call inline routine
- create paravirt routines to weakly use the native ones

Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
---
 arch/arm/mach-vexpress/include/mach/smp.h |   12 +++++++++---
 arch/arm/mach-vexpress/platsmp.c          |   28 ++++++++++++++++++++++++++--
 2 files changed, 35 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-vexpress/include/mach/smp.h b/arch/arm/mach-vexpress/include/mach/smp.h
index 58077dc..eef3f00 100644
--- a/arch/arm/mach-vexpress/include/mach/smp.h
+++ b/arch/arm/mach-vexpress/include/mach/smp.h
@@ -3,11 +3,17 @@
 
 #include <asm/hardware/gic.h>
 
-/*
- * We use IRQ1 as the IPI
- */
+extern void paravirt_smp_cross_call(const struct cpumask *mask);
+
 static inline void smp_cross_call(const struct cpumask *mask)
 {
+#ifdef CONFIG_PARAVIRT
+	paravirt_smp_cross_call(mask);
+#else
+	/*
+	 * We use IRQ1 as the IPI
+	 */
 	gic_raise_softirq(mask, 1);
+#endif
 }
 #endif
diff --git a/arch/arm/mach-vexpress/platsmp.c b/arch/arm/mach-vexpress/platsmp.c
index 9074d3b..630e657 100644
--- a/arch/arm/mach-vexpress/platsmp.c
+++ b/arch/arm/mach-vexpress/platsmp.c
@@ -42,7 +42,7 @@ static void __iomem *scu_base_addr(void)
 
 static DEFINE_SPINLOCK(boot_lock);
 
-void __cpuinit platform_secondary_init(unsigned int cpu)
+void __cpuinit native_platform_secondary_init(unsigned int cpu)
 {
 	trace_hardirqs_off();
 
@@ -67,7 +67,7 @@ void __cpuinit platform_secondary_init(unsigned int cpu)
 	spin_unlock(&boot_lock);
 }
 
-int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
+int __cpuinit native_boot_secondary(unsigned int cpu, struct task_struct *idle)
 {
 	unsigned long timeout;
 
@@ -116,6 +116,15 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 void paravirt_smp_init_cpus(void)
 	__attribute__((weak, alias("native_smp_init_cpus")));
 
+void paravirt_smp_prepare_cpus(unsigned int max_cpus)
+	__attribute__((weak, alias("native_smp_prepare_cpus")));
+
+int paravirt_boot_secondary(unsigned int cpu, struct task_struct *idle)
+	__attribute__((weak, alias("native_boot_secondary")));
+
+void paravirt_platform_secondary_init(unsigned int cpu)
+	__attribute__((weak, alias("native_platform_secondary_init")));
+
 /*
  * Initialise the CPU possible map early - this describes the CPUs
  * which may be present or become present in the system.
@@ -155,6 +164,21 @@ void __init smp_init_cpus(void)
 
 void __init smp_prepare_cpus(unsigned int max_cpus)
 {
+	paravirt_smp_prepare_cpus(max_cpus);
+}
+
+int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
+{
+	return paravirt_boot_secondary(cpu, idle);
+}
+
+void __cpuinit platform_secondary_init(unsigned int cpu)
+{
+	paravirt_platform_secondary_init(cpu);
+}
+
+void __init native_smp_prepare_cpus(unsigned int max_cpus)
+{
 	unsigned int ncores = num_possible_cpus();
 	unsigned int cpu = smp_processor_id();
 	int i;
-- 
1.7.0.2

