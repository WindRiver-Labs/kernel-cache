From 1c589d8f6e7fc8842ab5ad8d18bced61ef5eec55 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Mon, 4 Jul 2011 13:19:33 +0800
Subject: [PATCH 3/3] wrhv/arm: introduce wrhv_exclude_devices parameter

On ARM architecture all the amba and platform devices are hardcoded
in the kernel files. In order to distribute the devices among multi
linux GOS, wrhv_exclude_devices parameter is introduced to exclude
the devices on the amba and platform buses.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 arch/arm/kernel/vbi/wrhv.c |   45 ++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 45 insertions(+), 0 deletions(-)

diff --git a/arch/arm/kernel/vbi/wrhv.c b/arch/arm/kernel/vbi/wrhv.c
index c420738..44d137d 100644
--- a/arch/arm/kernel/vbi/wrhv.c
+++ b/arch/arm/kernel/vbi/wrhv.c
@@ -21,6 +21,8 @@
 #include <linux/mm.h>
 #include <linux/stddef.h>
 #include <linux/clockchips.h>
+#include <linux/amba/bus.h>
+#include <linux/platform_device.h>
 
 #include <asm/setup.h>
 #include <asm/irq.h>
@@ -342,3 +344,46 @@ void wrhv_init(void)
 
 	arm_pm_restart = wrhv_restart;
 }
+
+#define WRHV_EXCLUDE_DEVICES_LEN	256
+static char wrhv_exclude_devices[WRHV_EXCLUDE_DEVICES_LEN];
+
+static int __init setup_wrhv_exclude_devices(char *buf)
+{
+	if (strlen(buf) >= sizeof(wrhv_exclude_devices)) {
+		pr_err("wrhv_exclude_devices is larger than %d\n",
+			WRHV_EXCLUDE_DEVICES_LEN);
+		return -EINVAL;
+	}
+
+	strncpy(wrhv_exclude_devices, buf, WRHV_EXCLUDE_DEVICES_LEN - 1);
+	return 0;
+}
+early_param("wrhv_exclude_devices", setup_wrhv_exclude_devices);
+
+static int wrhv_device_is_available(const char *name)
+{
+	char *p;
+	int ret = 1;
+
+	while ((p = strstr(wrhv_exclude_devices, name))) {
+		size_t l = strlen(name);
+
+		if (p[l] == '\0' || p[l] == ',') {
+			ret = 0;
+			pr_info("The device %s is explicitly excluded\n", name);
+			break;
+		}
+	}
+	return ret;
+}
+
+int arch_amba_device_is_available(struct amba_device *dev)
+{
+	return wrhv_device_is_available(dev->dev.init_name);
+}
+
+int arch_platform_device_is_available(struct platform_device *dev)
+{
+	return wrhv_device_is_available(dev->name);
+}
-- 
1.7.0.4

