From c5907c6c48fd36f6055d4006c00759553c25739c Mon Sep 17 00:00:00 2001
From: Bruce Ashfield <bruce.ashfield@windriver.com>
Date: Mon, 21 Jun 2010 00:59:32 -0400
Subject: [PATCH] sungem: avoid phy_read/write conflict with phy.h

Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
---
 drivers/net/sungem.c |   10 +++++-----
 1 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/net/sungem.c b/drivers/net/sungem.c
index e6880f1..3ae530e 100644
--- a/drivers/net/sungem.c
+++ b/drivers/net/sungem.c
@@ -169,7 +169,7 @@ static inline int _phy_read(struct net_device *dev, int mii_id, int reg)
 	return __phy_read(gp, mii_id, reg);
 }
 
-static inline u16 phy_read(struct gem *gp, int reg)
+static inline u16 sungem_phy_read(struct gem *gp, int reg)
 {
 	return __phy_read(gp, gp->mii_phy_addr, reg);
 }
@@ -202,7 +202,7 @@ static inline void _phy_write(struct net_device *dev, int mii_id, int reg, int v
 	__phy_write(gp, mii_id, reg, val & 0xffff);
 }
 
-static inline void phy_write(struct gem *gp, int reg, u16 val)
+static inline void sungem_phy_write(struct gem *gp, int reg, u16 val)
 {
 	__phy_write(gp, gp->mii_phy_addr, reg, val);
 }
@@ -1741,9 +1741,9 @@ static void gem_init_phy(struct gem *gp)
 			/* Some PHYs used by apple have problem getting back to us,
 			 * we do an additional reset here
 			 */
-			phy_write(gp, MII_BMCR, BMCR_RESET);
+			sungem_phy_write(gp, MII_BMCR, BMCR_RESET);
 			msleep(20);
-			if (phy_read(gp, MII_BMCR) != 0xffff)
+			if (sungem_phy_read(gp, MII_BMCR) != 0xffff)
 				break;
 			if (i == 2)
 				printk(KERN_WARNING "%s: GMAC PHY not responding !\n",
@@ -2073,7 +2073,7 @@ static int gem_check_invariants(struct gem *gp)
 
 		for (i = 0; i < 32; i++) {
 			gp->mii_phy_addr = i;
-			if (phy_read(gp, MII_BMCR) != 0xffff)
+			if (sungem_phy_read(gp, MII_BMCR) != 0xffff)
 				break;
 		}
 		if (i == 32) {
-- 
1.6.5.2

