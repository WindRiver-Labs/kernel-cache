From 693a8120524611dd5681826b0204ee59a00a4533 Mon Sep 17 00:00:00 2001
From: Wei Yang <Wei.Yang@windriver.com>
Date: Tue, 5 Jun 2012 15:48:34 +0800
Subject: [PATCH 01/11] gpio: detect the SuperIO chip at runtime

This patch is used to runtime detect gpio on multi board

[
This should be squashed into:

commit 9782ca2f581dc663411980b67e6c666ebff5e998

Add GPIO driver support for Portwell NANO 8044
]

Signed-off-by: Li Liang <liang.li@windriver.com>
Signed-off-by: Yang Wei <wei.yang@windriver.com>
---
 drivers/gpio/gpio-nano8044.c |   89 ++++++++++++++++++++++++++++++++++++------
 1 file changed, 78 insertions(+), 11 deletions(-)

diff --git a/drivers/gpio/gpio-nano8044.c b/drivers/gpio/gpio-nano8044.c
index 6ca265e..a2b0bde 100644
--- a/drivers/gpio/gpio-nano8044.c
+++ b/drivers/gpio/gpio-nano8044.c
@@ -25,11 +25,14 @@
  * Windriver Corporation
  */
 
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/pci.h>
 #include <linux/ioport.h>
 #include <linux/gpio.h>
+#include <linux/platform_device.h>
 
 #define DRVNAME "8044_gpio"
 /*
@@ -51,12 +54,15 @@
  */
 
 #define CR_07 (0x07)		/* Logical Device selection */
+#define CR_20 (0x20)		/* Chip ID High Byte */
+#define CR_21 (0x21)		/* Chip ID Low Byte */
 #define CR_2A (0x2A)		/* I2C Pin Select address */
 #define CR_2C (0x2C)		/* Multi-function Pin Select address */
 /*
  * The ninth Logical Device of Super IO
  */
-#define LD_09 (0x09)           /* The LD provide GPIO functionality */
+#define SIO_W83627DHG_ID    0xa020
+#define LD_09 (0x09)		/* The LD provide GPIO functionality */
 /* The configuration registers of the ninth logical device */
 #define CR_30 (0x30)		/* Enable logical device active address */
 #define CR_E7 (0xE7)		/* Status Register */
@@ -186,11 +192,37 @@ static struct gpio_chip w83627dhg_gpio_chip = {
 	.can_sleep = 0,
 };
 
-static void detect_chip(u8 ioaddr)
+static int w83627dhg_find(u8 ioaddr)
+{
+	u16 id;
+	superio_enter(ioaddr);
+
+	id = superio_inb(ioaddr, CR_20) << 8 | superio_inb(ioaddr, CR_21);
+	id &= 0xfff0;		/* Delete IC version */
+	superio_exit(IO_EFIR);
+	if (id == SIO_W83627DHG_ID)
+		return 0;
+	return -ENODEV;
+
+}
+
+static int __devexit w83627dhg_remove(struct platform_device *pdev)
+{
+	int err;
+	err = gpiochip_remove(&w83627dhg_gpio_chip);
+
+	pr_info(KERN_INFO "8044_gpio_exit(%d)\n", err);
+
+}
+
+static int __devinit w83627dhg_probe(struct platform_device *pdev)
 {
+	u8 ioaddr = IO_EFIR;
 	u8 tmp;
+	int err = -1;
 	superio_enter(ioaddr);
 
+	printk(KERN_INFO "detect super io chip: W83627DHG");
 	tmp = superio_inb(ioaddr, CR_2A);
 	tmp &= 0xFD;
 	superio_outb(ioaddr, CR_2A, tmp);
@@ -215,28 +247,63 @@ static void detect_chip(u8 ioaddr)
 
 	superio_exit(IO_EFIR);
 
+	err = gpiochip_add(&w83627dhg_gpio_chip);
+	if (err < 0)
+		return err;
+
+	printk(KERN_INFO "8044_gpio_init Done.\n");
+	return 0;
 }
 
+static struct platform_driver w83627dhg_driver = {
+	.driver = {
+		   .owner = THIS_MODULE,
+		   .name = DRVNAME,
+		   },
+	.probe = w83627dhg_probe,
+	.remove = __devexit_p(w83627dhg_remove),
+};
+
+static struct platform_device *pdev;
+
 static int __init nano8044_gpio_init(void)
 {
 	int err;
 
-	detect_chip(IO_EFIR);
-
-	err = gpiochip_add(&w83627dhg_gpio_chip);
-	if (err < 0)
-		return err;
+	if (w83627dhg_find(IO_EFIR))
+		return -ENODEV;
+	err = platform_driver_register(&w83627dhg_driver);
+	if (err)
+		goto exit;
+
+	pdev = platform_device_alloc(DRVNAME, 0);
+	if (!pdev) {
+		err = -ENOMEM;
+		pr_err("Device allocation failed\n");
+		goto exit_unregister;
+	}
 
-	printk(KERN_INFO "8044_gpio_init Done.\n");
+	err = platform_device_add(pdev);
+	if (err) {
+		pr_err("Device addition failed (%d)\n", err);
+		goto exit_device_put;
+	}
 	return 0;
+
+exit_device_put:
+	platform_device_put(pdev);
+exit_unregister:
+	platform_driver_unregister(&w83627dhg_driver);
+exit:
+	return err;
+
 }
 
 static void __exit nano8044_gpio_exit(void)
 {
-	int err;
-	err = gpiochip_remove(&w83627dhg_gpio_chip);
+	platform_device_unregister(pdev);
+	platform_driver_unregister(&w83627dhg_driver);
 
-	printk(KERN_INFO "8044_gpio_exit(%d)\n", err);
 }
 
 module_init(nano8044_gpio_init);
-- 
1.7.9.7

