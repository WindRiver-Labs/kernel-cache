From ead64b62bb5d7259826a47459d33665a30aefadc Mon Sep 17 00:00:00 2001
From: fupan li <fupan.li@windriver.com>
Date: Tue, 28 Jan 2014 15:39:28 +0800
Subject: [PATCH] register the platform needed clk for BayTrail

Signed-off-by: fupan li <fupan.li@windriver.com>
---
 arch/x86/platform/Makefile       |    3 ++
 drivers/platform/x86/byt-board.c |   48 ++++++++++++++++++++++++++++++++++----
 2 files changed, 46 insertions(+), 5 deletions(-)

diff --git a/arch/x86/platform/Makefile b/arch/x86/platform/Makefile
index e170272..5ad6bb6 100644
--- a/arch/x86/platform/Makefile
+++ b/arch/x86/platform/Makefile
@@ -3,6 +3,9 @@ obj-y	+= ce4100/
 obj-y	+= efi/
 obj-y	+= geode/
 obj-y	+= intel-atom/
+ifeq ($(CONFIG_BYT_LPSS_BRD),y)
+obj-y	+= byt/
+endif
 obj-y	+= iris/
 obj-y	+= mrst/
 obj-y	+= olpc/
diff --git a/drivers/platform/x86/byt-board.c b/drivers/platform/x86/byt-board.c
index 03aa040..7024b8e 100644
--- a/drivers/platform/x86/byt-board.c
+++ b/drivers/platform/x86/byt-board.c
@@ -24,8 +24,8 @@ static struct spi_board_info byt_spi_slaves[] = {
          }
 };
 
-static int byt_spi_board_setup()
-{
+static int byt_spi_board_setup(void) {
+
         int ret = -1;
 
         /* Register the SPI devices */
@@ -36,10 +36,48 @@ static int byt_spi_board_setup()
         return ret;
 }
 
-static int __init byt_board_init(void)
-{
+static int byt_clk_setup(void) {
+
+	struct clk *clk, *clk1;
+
+	/* Make sure the root clk required by the LPSS driver is registered */
+	clk = clk_get(NULL, "lpss_clk");
+	if (IS_ERR(clk)) {
+		clk = clk_register_fixed_rate(NULL, "lpss_clk", NULL, CLK_IS_ROOT,
+							100000000);
+	}
+
+	/*
+	 * to check has the spi_clk been registered by the ACPI mode,
+	 * if yes, skip it, otherwise, register those clks.
+	*/
+	clk1 = clk_get(NULL, "spi_clk");
+	if (IS_ERR(clk1)) 
+		clk1 = clk_register_fixed_rate(NULL, "spi_clk", "lpss_clk", 0, 50000000);
+
+	/*
+         * to check the clock has the  been registered by the ACPI mode,
+         * if yes, skip it, otherwise, register those clks.
+        */
+
+	clk1 = clk_get(NULL, "0000:00:1e.5");
+	if (IS_ERR(clk1))
+		clk_register_clkdev(clk, NULL, "0000:00:1e.5");
+	
+	/* register the clock for DW DMA engines */
+	clk1 = clk_get(NULL, "0000:00:1e.0");
+	if (IS_ERR(clk1))
+		clk_register_clkdev(clk, "hclk", "0000:00:1e.0");
+
+	return 0;
+}
+
+static int __init byt_board_init(void) {
+
 	int ret;
 
+	ret = byt_clk_setup();
+
 	ret = byt_spi_board_setup();
 	if (ret)
 		goto exit;
@@ -47,5 +85,5 @@ static int __init byt_board_init(void)
 exit:
 	return ret;
 }
-arch_initcall(byt_board_init);
+subsys_initcall_sync(byt_board_init);
 MODULE_LICENSE(GPL);
-- 
1.7.5.4

