From e8bf065fda26e31ec13c4b2b1bef2689316110b8 Mon Sep 17 00:00:00 2001
From: Kishon Vijay Abraham I <kishon@ti.com>
Date: Fri, 22 Jun 2012 17:02:47 +0530
Subject: [PATCH 130/142] usb: otg: utils: devres: Add API's to associate a
 device with the phy

commit 410219dcd2ba8d8b4bcfa9c232f35bf505bc021a upstream

Used devres API's to associate the phy with a device so that on
driver detach, release function is invoked on the devres data(usb_phy)
and devres data(usb_phy) is released.

Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
Signed-off-by: Felipe Balbi <balbi@ti.com>
Signed-off-by: fupan li <fupan.li@windriver.com>
---
 drivers/usb/otg/otg.c   |   62 +++++++++++++++++++++++++++++++++++++++++++++++
 include/linux/usb/otg.h |   14 ++++++++++
 2 files changed, 76 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/otg/otg.c b/drivers/usb/otg/otg.c
index 801e597..870cb4f 100644
--- a/drivers/usb/otg/otg.c
+++ b/drivers/usb/otg/otg.c
@@ -12,11 +12,54 @@
 #include <linux/kernel.h>
 #include <linux/export.h>
 #include <linux/device.h>
+#include <linux/slab.h>
 
 #include <linux/usb/otg.h>
 
 static struct usb_phy *phy;
 
+static void devm_usb_phy_release(struct device *dev, void *res)
+{
+	struct usb_phy *phy = *(struct usb_phy **)res;
+
+	usb_put_phy(phy);
+}
+
+static int devm_usb_phy_match(struct device *dev, void *res, void *match_data)
+{
+	return res == match_data;
+}
+
+/**
+ * devm_usb_get_phy - find the USB PHY
+ * @dev - device that requests this phy
+ * @type - the type of the phy the controller requires
+ *
+ * Gets the phy using usb_get_phy(), and associates a device with it using
+ * devres. On driver detach, release function is invoked on the devres data,
+ * then, devres data is freed.
+ *
+ * For use by USB host and peripheral drivers.
+ */
+struct usb_phy *devm_usb_get_phy(struct device *dev, enum usb_phy_type type)
+{
+	struct usb_phy **ptr, *phy;
+
+	ptr = devres_alloc(devm_usb_phy_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr)
+		return NULL;
+
+	phy = usb_get_phy(type);
+	if (phy) {
+		*ptr = phy;
+		devres_add(dev, ptr);
+	} else
+		devres_free(ptr);
+
+	return phy;
+}
+EXPORT_SYMBOL(devm_usb_get_phy);
+
 /**
  * usb_get_transceiver - find the (single) USB transceiver
  *
@@ -35,6 +78,25 @@ struct usb_phy *usb_get_transceiver(void)
 EXPORT_SYMBOL(usb_get_transceiver);
 
 /**
+ * devm_usb_put_phy - release the USB PHY
+ * @dev - device that wants to release this phy
+ * @phy - the phy returned by devm_usb_get_phy()
+ *
+ * destroys the devres associated with this phy and invokes usb_put_phy
+ * to release the phy.
+ *
+ * For use by USB host and peripheral drivers.
+ */
+void devm_usb_put_phy(struct device *dev, struct usb_phy *phy)
+{
+	int r;
+
+	r = devres_destroy(dev, devm_usb_phy_release, devm_usb_phy_match, phy);
+	dev_WARN_ONCE(dev, r, "couldn't find PHY resource\n");
+}
+EXPORT_SYMBOL(devm_usb_put_phy);
+
+/**
  * usb_put_transceiver - release the (single) USB transceiver
  * @x: the transceiver returned by usb_get_transceiver()
  *
diff --git a/include/linux/usb/otg.h b/include/linux/usb/otg.h
index 38ab3f4..a73ea01 100644
--- a/include/linux/usb/otg.h
+++ b/include/linux/usb/otg.h
@@ -173,7 +173,10 @@ usb_phy_shutdown(struct usb_phy *x)
 /* for usb host and peripheral controller drivers */
 #ifdef CONFIG_USB_OTG_UTILS
 extern struct usb_phy *usb_get_transceiver(void);
+extern struct usb_phy *devm_usb_get_phy(struct device *dev,
+	enum usb_phy_type type);
 extern void usb_put_transceiver(struct usb_phy *);
+extern void devm_usb_put_phy(struct device *dev, struct usb_phy *x);
 extern const char *otg_state_string(enum usb_otg_state state);
 #else
 static inline struct usb_phy *usb_get_transceiver(void)
@@ -181,14 +184,25 @@ static inline struct usb_phy *usb_get_transceiver(void)
 	return NULL;
 }
 
+static inline struct usb_phy *devm_usb_get_phy(struct device *dev,
+	enum usb_phy_type type)
+{
+	return NULL;
+}
+
 static inline void usb_put_transceiver(struct usb_phy *x)
 {
 }
 
+static inline void devm_usb_put_phy(struct device *dev, struct usb_phy *x)
+{
+}
+
 static inline const char *otg_state_string(enum usb_otg_state state)
 {
 	return NULL;
 }
+
 #endif
 
 /* Context: can sleep */
-- 
1.7.5.4

