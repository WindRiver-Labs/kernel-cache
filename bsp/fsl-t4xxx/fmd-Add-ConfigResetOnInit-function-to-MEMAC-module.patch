From 04947fb0d8fa0c28bc59965ce1f943b6524abb24 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Fri, 29 Jun 2012 15:09:06 +0000
Subject: [PATCH 43/57] fmd: Add ConfigResetOnInit function to MEMAC module

commit 0a79e774a77a4513f79abb31c068d687e02b7c6d from
https://git.freescale.com/git-private/cgit.cgi/ppc/t4240/linux.git

* added MemacConfigResetOnInit routine and initialized corresponding
callback
* added conditional compile-time flag for FM_MAC_ConfigResetOnInit
calls as reset might not be correctly implemented in simulator

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Signed-off-by: Andy Fleming <afleming@freescale.com>
---
 .../dpa/NetCommSw/Peripherals/FM/MAC/memac.c       |   17 ++++++++++++++++-
 drivers/net/ethernet/freescale/dpa/mac-api.c       |    2 ++
 2 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/freescale/dpa/NetCommSw/Peripherals/FM/MAC/memac.c b/drivers/net/ethernet/freescale/dpa/NetCommSw/Peripherals/FM/MAC/memac.c
index cb6959b..a578212 100644
--- a/drivers/net/ethernet/freescale/dpa/NetCommSw/Peripherals/FM/MAC/memac.c
+++ b/drivers/net/ethernet/freescale/dpa/NetCommSw/Peripherals/FM/MAC/memac.c
@@ -111,6 +111,8 @@ static void SetDefaultParam(t_MemacDriverParam *p_MemacDriverParam)
 
     p_MemacDriverParam->pauseTime                = DEFAULT_pauseTime;
 
+    p_MemacDriverParam->resetOnInit              = DEFAULT_resetOnInit;
+
 #ifdef FM_TX_ECC_FRMS_ERRATA_10GMAC_A004
     p_MemacDriverParam->skipFman11Workaround     = DEFAULT_skipFman11Workaround;
 #endif /* FM_TX_ECC_FRMS_ERRATA_10GMAC_A004 */
@@ -342,6 +344,19 @@ static t_Error MemacConfigLengthCheck(t_Handle h_Memac, bool newVal)
     return E_OK;
 }
 
+/* .............................................................................. */
+
+static t_Error MemacConfigResetOnInit(t_Handle h_Memac, bool enable)
+{
+    t_Memac *p_Memac = (t_Memac *)h_Memac;
+
+    SANITY_CHECK_RETURN_ERROR(p_Memac, E_INVALID_HANDLE);
+    SANITY_CHECK_RETURN_ERROR(p_Memac->p_MemacDriverParam, E_INVALID_STATE);
+
+    p_Memac->p_MemacDriverParam->resetOnInit = enable;
+
+    return E_OK;
+}
 
 #ifdef FM_TX_ECC_FRMS_ERRATA_10GMAC_A004
 /* .............................................................................. */
@@ -957,7 +972,7 @@ static void InitFmMacControllerDriver(t_FmMacControllerDriver *p_FmMacController
     p_FmMacControllerDriver->f_FM_MAC_ConfigHalfDuplex          = NULL; /* half-duplex is not supported in xgec */
     p_FmMacControllerDriver->f_FM_MAC_ConfigLengthCheck         = MemacConfigLengthCheck;
     p_FmMacControllerDriver->f_FM_MAC_ConfigException           = NULL; //MemacConfigException;
-    p_FmMacControllerDriver->f_FM_MAC_ConfigResetOnInit         = NULL; //MemacConfigResetOnInit;
+    p_FmMacControllerDriver->f_FM_MAC_ConfigResetOnInit         = MemacConfigResetOnInit;
 
 #ifdef FM_TX_ECC_FRMS_ERRATA_10GMAC_A004
     p_FmMacControllerDriver->f_FM_MAC_ConfigSkipFman11Workaround= MemacConfigSkipFman11Workaround;
diff --git a/drivers/net/ethernet/freescale/dpa/mac-api.c b/drivers/net/ethernet/freescale/dpa/mac-api.c
index df24813..3ed25ac 100644
--- a/drivers/net/ethernet/freescale/dpa/mac-api.c
+++ b/drivers/net/ethernet/freescale/dpa/mac-api.c
@@ -171,6 +171,7 @@ static int __devinit __cold init(struct mac_device *mac_dev)
 		}
 	}
 	else  {
+#ifndef CONFIG_T4_SIMULATOR_WORKAROUND
 		err = FM_MAC_ConfigResetOnInit(priv->mac, true);
 		_errno = -GET_ERROR_TYPE(err);
 		if (unlikely(_errno < 0)) {
@@ -178,6 +179,7 @@ static int __devinit __cold init(struct mac_device *mac_dev)
 				"FM_MAC_ConfigResetOnInit() = 0x%08x\n", err);
 			goto _return_fm_mac_free;
 		}
+#endif
 	}
 
 	err = FM_MAC_Init(priv->mac);
-- 
1.7.9.7

