From e0b570cd7451c3a98ee0fc9636fe429b4b481827 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Tue, 7 Dec 2010 17:37:05 +0800
Subject: [PATCH 36/47] nlm_xlr_atx_64_be: add oprofile module support

This patch make the oprofile support be available as module, which may
be important in some cases.

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 .../include/asm/mach-rmi/cpu-feature-overrides.h   |   19 +++++++++++++++++++
 arch/mips/kernel/smp.c                             |    1 +
 arch/mips/oprofile/op_model_phoenix.c              |    7 +++++++
 arch/mips/rmi/phoenix/irq.c                        |   13 ++++++++-----
 kernel/extable.c                                   |    1 +
 5 files changed, 36 insertions(+), 5 deletions(-)
 create mode 100644 arch/mips/include/asm/mach-rmi/cpu-feature-overrides.h

diff --git a/arch/mips/include/asm/mach-rmi/cpu-feature-overrides.h b/arch/mips/include/asm/mach-rmi/cpu-feature-overrides.h
new file mode 100644
index 0000000..43bdfad
--- /dev/null
+++ b/arch/mips/include/asm/mach-rmi/cpu-feature-overrides.h
@@ -0,0 +1,19 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+
+#ifndef __ASM_MACH_RMI_CPU_FEATURE_OVERRIDES_H
+#define __ASM_MACH_RMI_CPU_FEATURE_OVERRIDES_H
+
+/*
+ * The current_cpu_type() defined in
+ * arch/mips/include/asm/cpu-features.h called smp_processor_id(), which
+ * may introduce warning about calling smp_processor_id() in preemptible
+ * context, we don't care this for we have this unique cpu type in XLR,
+ * so, define it as CPU_PHOENIX directly will avoid this warning.
+ */
+#define current_cpu_type() CPU_PHOENIX
+
+#endif /* __ASM_MACH_RMI_CPU_FEATURE_OVERRIDES_H */
diff --git a/arch/mips/kernel/smp.c b/arch/mips/kernel/smp.c
index 9f5d9d8..814b2a0 100644
--- a/arch/mips/kernel/smp.c
+++ b/arch/mips/kernel/smp.c
@@ -49,6 +49,7 @@
 volatile cpumask_t cpu_callin_map;	/* Bitmask of started secondaries */
 int __cpu_number_map[NR_CPUS];		/* Map physical to logical */
 int __cpu_logical_map[NR_CPUS];		/* Map logical to physical */
+EXPORT_SYMBOL(__cpu_number_map);
 
 /* Number of TCs (or siblings in Intel speak) per CPU core */
 int smp_num_siblings = 1;
diff --git a/arch/mips/oprofile/op_model_phoenix.c b/arch/mips/oprofile/op_model_phoenix.c
index bab02c6..cb8df07 100644
--- a/arch/mips/oprofile/op_model_phoenix.c
+++ b/arch/mips/oprofile/op_model_phoenix.c
@@ -314,6 +314,8 @@ static void phnx_reset_perf_counters(void)
 	__write_32bit_c0_register($25, 3, 0);
 }
 
+extern void (*phoenix_oprofile_handler)(int irq, void *dev_id, struct pt_regs *regs);
+
 static int __init phoenix_init(void)
 {
 	int i;
@@ -325,11 +327,16 @@ static int __init phoenix_init(void)
 		g_stop_pmc[i] = 1;
 	phnx_reset_perf_counters();
 
+	/* Install the handler */
+	phoenix_oprofile_handler = phoenix_oprofile_int_handler;
+
 	return 0;
 }
 
 static void phoenix_exit(void)
 {
+	/* Uninstall the handler */
+	phoenix_oprofile_handler = NULL;
 	phnx_reset_perf_counters();
 }
 
diff --git a/arch/mips/rmi/phoenix/irq.c b/arch/mips/rmi/phoenix/irq.c
index 62a8927..519b618 100644
--- a/arch/mips/rmi/phoenix/irq.c
+++ b/arch/mips/rmi/phoenix/irq.c
@@ -28,6 +28,7 @@
 
 #include <linux/kernel_stat.h>
 #include <linux/cpumask.h>
+#include <linux/module.h>
 
 #include <asm/kgdb.h>
 
@@ -338,7 +339,9 @@ void __init init_phoenix_irqs(void)
 }
 
 #if defined(CONFIG_OPROFILE) || defined(CONFIG_OPROFILE_MODULE)
-extern void phoenix_oprofile_int_handler(int irq, void *dev_id, struct pt_regs *regs);
+void (*phoenix_oprofile_handler)(int irq, void *dev_id, struct pt_regs *regs);
+
+EXPORT_SYMBOL(phoenix_oprofile_handler);
 #endif
 
 void do_phnx_IRQ(unsigned int irq, struct pt_regs *regs)
@@ -359,8 +362,8 @@ void do_phnx_IRQ(unsigned int irq, struct pt_regs *regs)
 		phnx_msgring_int_handler(irq, regs);
 #if defined(CONFIG_OPROFILE) || defined(CONFIG_OPROFILE_MODULE)
 	else if (irq == IRQ_IPI_OPROFILE) {
-		if (phoenix_thr_id() != 0)
-			phoenix_oprofile_int_handler(irq, NULL, regs);
+		if (phoenix_thr_id() != 0 && phoenix_oprofile_handler != NULL)
+			phoenix_oprofile_handler(irq, NULL, regs);
 	}
 #endif
 	else
@@ -434,8 +437,8 @@ asmlinkage void plat_irq_dispatch(void)
 		 * overflowed. Then we know for sure that this is a perf event
 		 */
 		if (is_perfcnt_overflow()) {
-			if (phoenix_thr_id() == 0)
-				phoenix_oprofile_int_handler(IRQ_TIMER, NULL, pt_regs);
+			if (phoenix_thr_id() == 0 && phoenix_oprofile_handler != NULL)
+				phoenix_oprofile_handler(IRQ_TIMER, NULL, pt_regs);
 		} else
 #endif
 			phoenix_timer_interrupt(pt_regs, IRQ_TIMER);
diff --git a/kernel/extable.c b/kernel/extable.c
index 7f8f263..639070d 100644
--- a/kernel/extable.c
+++ b/kernel/extable.c
@@ -90,6 +90,7 @@ int __kernel_text_address(unsigned long addr)
 		return 1;
 	return 0;
 }
+EXPORT_SYMBOL(__kernel_text_address);
 
 int kernel_text_address(unsigned long addr)
 {
-- 
1.7.0.4

