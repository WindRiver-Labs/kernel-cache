From dbc0311ee48ea4d173ecde89274432682c376cee Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Mon, 6 Dec 2010 11:06:17 +0800
Subject: [PATCH 02/47] nlm_xlr_atx_64_be: add exception handling

When executing CP2 instructions(MSGSND, MSGLD, MSDWAIT) will cause
coprocessor unusable exception if the CU2 bit of STATUS is zero. Adding
related exception handler to allow CP2 access in user and kernel space.

And add the exception support of XLR/XLS when executing trap_init.

Signed-off-by: Jack Tan <jack.tan@windriver.com>
[ No need to add an extra global variable to init the ebase, initialize
it in trap_init() directly ]
Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/mips/kernel/traps.c    |   22 +++++++++++++++++---
 arch/mips/rmi/phoenix/cpu.c |   45 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 63 insertions(+), 4 deletions(-)
 create mode 100644 arch/mips/rmi/phoenix/cpu.c

diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index 9d01fc3..a9ca517 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -1480,6 +1480,13 @@ void __cpuinit native_per_cpu_trap_init(void)
 		secondaryTC = 1;
 #endif /* CONFIG_MIPS_MT_SMTC */
 
+#ifdef CONFIG_32BIT
+	/* Some firmware leaves the BEV flag set, clear it. */
+	clear_c0_status(ST0_CU1|ST0_CU2|ST0_CU3|ST0_BEV|ST0_KX);
+#else
+	clear_c0_status(ST0_CU1|ST0_CU2|ST0_CU3|ST0_BEV);
+#endif
+
 	/*
 	 * Disable coprocessors and select 32-bit or 64-bit addressing
 	 * and the 16/32 or 32/32 FPR register model.  Reset the BEV
@@ -1487,7 +1494,7 @@ void __cpuinit native_per_cpu_trap_init(void)
 	 * IP27).  Set XX for ISA IV code to work.
 	 */
 #ifdef CONFIG_64BIT
-	status_set |= ST0_FR|ST0_KX|ST0_SX|ST0_UX;
+	status_set |= ST0_CU0|ST0_FR|ST0_KX|ST0_SX|ST0_UX;
 #endif
 	if (current_cpu_data.isa_level == MIPS_CPU_ISA_IV)
 		status_set |= ST0_XX;
@@ -1615,7 +1622,7 @@ __setup("rdhwr_noopt", set_rdhwr_noopt);
 
 void __init trap_init(void)
 {
-	extern char except_vec3_generic, except_vec3_r4000;
+	extern char except_vec3_generic;
 	extern char except_vec4;
 	unsigned long i;
 	int rollback;
@@ -1628,6 +1635,9 @@ void __init trap_init(void)
 		return;	/* Already done */
 #endif
 
+#ifdef CONFIG_CPU_PHOENIX
+	ebase = read_c0_ebase() & (~((1 << 12) - 1));
+#else
 	if (cpu_has_veic || cpu_has_vint) {
 		unsigned long size = 0x200 + VECTORSPACING*64;
 		ebase = (unsigned long)
@@ -1639,6 +1649,7 @@ void __init trap_init(void)
 			ebase += (read_c0_ebase() & 0x3ffff000);
 #endif
 	}
+#endif
 
 	per_cpu_trap_init();
 
@@ -1744,13 +1755,16 @@ void __init trap_init(void)
 
 	set_except_vector(26, handle_dsp);
 
-	if (cpu_has_vce)
+#ifndef CONFIG_CPU_PHOENIX
+	if (cpu_has_vce) {
+		extern char except_vec3_r4000;
 		/* Special exception: R4[04]00 uses also the divec space. */
 		memcpy((void *)(ebase + 0x180), &except_vec3_r4000, 0x100);
-	else if (cpu_has_4kex)
+	} else if (cpu_has_4kex)
 		memcpy((void *)(ebase + 0x180), &except_vec3_generic, 0x80);
 	else
 		memcpy((void *)(ebase + 0x080), &except_vec3_generic, 0x80);
+#endif
 
 	local_flush_icache_range(ebase, ebase + 0x400);
 	flush_tlb_handlers();
diff --git a/arch/mips/rmi/phoenix/cpu.c b/arch/mips/rmi/phoenix/cpu.c
new file mode 100644
index 0000000..04ba0c7
--- /dev/null
+++ b/arch/mips/rmi/phoenix/cpu.c
@@ -0,0 +1,45 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2010 Wind River Systems,
+ *   written by Jack Tan <jack.tan@windriver.com>
+ */
+#include <linux/init.h>
+#include <linux/irqflags.h>
+#include <linux/notifier.h>
+#include <linux/prefetch.h>
+#include <linux/sched.h>
+
+#include <asm/cop2.h>
+#include <asm/current.h>
+#include <asm/mipsregs.h>
+#include <asm/page.h>
+
+static int mips_cu2_call(struct notifier_block *nfb, unsigned long
+		action, void *data)
+{
+	unsigned long flags;
+
+	switch (action) {
+	case CU2_EXCEPTION:
+		local_irq_save(flags);
+		set_c0_status(ST0_CU2);
+		KSTK_STATUS(current) |= ST0_CU2;
+		local_irq_restore(flags);
+		return NOTIFY_BAD;	/* Don't call default notifier */
+	}
+
+	return NOTIFY_OK;		/* Let default notifier send signals */
+}
+
+static struct notifier_block mips_cu2_notifier = {
+	.notifier_call = mips_cu2_call,
+};
+
+static int mips_cu2_setup(void)
+{
+	return register_cu2_notifier(&mips_cu2_notifier);
+}
+early_initcall(mips_cu2_setup);
-- 
1.7.0.4

