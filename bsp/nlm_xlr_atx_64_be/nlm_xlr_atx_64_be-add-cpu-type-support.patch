From 4dafe15ce34dff84c75904c698ef2b22d578171e Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Wed, 19 May 2010 23:57:28 +0800
Subject: [PATCH 01/47] nlm_xlr_atx_64_be: add cpu type support

Extracted from RMI SDK 1.7.0.

XLR (aka: phoenix) support wait instruction, so add support for it.

XLR processor implements the MIPS64 R1 instruction set and has some
enhancements. (Atomic Swap, Atomic Load and Add, Message send etc ...)
So add a new cpu type CPU_PHOENIX not use the CPU_MIPS64.

XLR's cache differs from the legency 4K processor's which is marked as
MIPS_CPU_4K_CACHE in linux kernel, so add a new cache type
MIPS_CPU_PHOENIX_CACHE.

The processor need to be supported is for XLR732 REV C4.

Signed-off-by: Jack Tan <jack.tan@windriver.com>
[ Use the generic r4k_wait() directly for XLR support it. ]
Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/mips/include/asm/cpu-features.h |    3 +++
 arch/mips/include/asm/cpu.h          |    4 +++-
 arch/mips/kernel/cpu-probe.c         |   30 ++++++++++++++++++++++++++++++
 3 files changed, 36 insertions(+), 1 deletions(-)

diff --git a/arch/mips/include/asm/cpu-features.h b/arch/mips/include/asm/cpu-features.h
index ac73ced..fcd1031 100644
--- a/arch/mips/include/asm/cpu-features.h
+++ b/arch/mips/include/asm/cpu-features.h
@@ -41,6 +41,9 @@
 #ifndef cpu_has_octeon_cache
 #define cpu_has_octeon_cache	0
 #endif
+#ifndef cpu_has_phoenix_cache
+#define cpu_has_phoenix_cache	(cpu_data[0].options & MIPS_CPU_PHOENIX_CACHE)
+#endif
 #ifndef cpu_has_fpu
 #define cpu_has_fpu		(current_cpu_data.options & MIPS_CPU_FPU)
 #define raw_cpu_has_fpu		(raw_current_cpu_data.options & MIPS_CPU_FPU)
diff --git a/arch/mips/include/asm/cpu.h b/arch/mips/include/asm/cpu.h
index a5acda4..968f3f4 100644
--- a/arch/mips/include/asm/cpu.h
+++ b/arch/mips/include/asm/cpu.h
@@ -33,6 +33,7 @@
 #define PRID_COMP_TOSHIBA	0x070000
 #define PRID_COMP_LSI		0x080000
 #define PRID_COMP_LEXRA		0x0b0000
+#define PRID_COMP_RMI		0x0c0000
 #define PRID_COMP_CAVIUM	0x0d0000
 
 
@@ -224,7 +225,7 @@ enum cpu_type_enum {
 	 * MIPS64 class processors
 	 */
 	CPU_5KC, CPU_20KC, CPU_25KF, CPU_SB1, CPU_SB1A, CPU_LOONGSON2,
-	CPU_CAVIUM_OCTEON, CPU_CAVIUM_OCTEON_PLUS,
+	CPU_CAVIUM_OCTEON, CPU_CAVIUM_OCTEON_PLUS, CPU_PHOENIX,
 
 	CPU_LAST
 };
@@ -274,6 +275,7 @@ enum cpu_type_enum {
 #define MIPS_CPU_VINT		0x00080000 /* CPU supports MIPSR2 vectored interrupts */
 #define MIPS_CPU_VEIC		0x00100000 /* CPU supports MIPSR2 external interrupt controller mode */
 #define MIPS_CPU_ULRI		0x00200000 /* CPU has ULRI feature */
+#define MIPS_CPU_PHOENIX_CACHE	0x00400000 /* CPU has ULRI feature */
 
 /*
  * CPU ASE encodings
diff --git a/arch/mips/kernel/cpu-probe.c b/arch/mips/kernel/cpu-probe.c
index 51d87c2..c40af7b 100644
--- a/arch/mips/kernel/cpu-probe.c
+++ b/arch/mips/kernel/cpu-probe.c
@@ -169,6 +169,7 @@ void __init check_wait(void)
 	case CPU_BCM6358:
 	case CPU_CAVIUM_OCTEON:
 	case CPU_CAVIUM_OCTEON_PLUS:
+	case CPU_PHOENIX:
 #ifdef CONFIG_WRHV
 		cpu_wait = wrhv_wait;
 #else
@@ -942,6 +943,32 @@ platform:
 	}
 }
 
+static inline void cpu_probe_rmi(struct cpuinfo_mips *c, unsigned int cpu)
+{
+	decode_configs(c);
+
+	c->options &= ~MIPS_CPU_4K_CACHE;
+
+	switch (c->processor_id & 0xff00) {
+
+	default:
+		c->cputype = CPU_PHOENIX;
+		__cpu_name[cpu] = "XLR732 Rev C4";
+
+		c->isa_level = MIPS_CPU_ISA_M64R1;
+		c->options = (MIPS_CPU_TLB     |
+		  MIPS_CPU_4KEX    |
+		  MIPS_CPU_COUNTER |
+		  MIPS_CPU_DIVEC   |
+		  MIPS_CPU_WATCH   |
+		  MIPS_CPU_PREFETCH |
+		  MIPS_CPU_EJTAG   |
+		  MIPS_CPU_PHOENIX_CACHE |
+		  MIPS_CPU_LLSC);
+		break;
+	}
+}
+
 const char *__cpu_name[NR_CPUS];
 const char *__elf_platform;
 
@@ -983,6 +1010,9 @@ __cpuinit void cpu_probe(void)
 	case PRID_COMP_CAVIUM:
 		cpu_probe_cavium(c, cpu);
 		break;
+	case PRID_COMP_RMI:
+		cpu_probe_rmi(c, cpu);
+		break;
 	}
 
 	BUG_ON(!__cpu_name[cpu]);
-- 
1.7.0.2

