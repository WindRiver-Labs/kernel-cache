From 736d2f0201214309979be3d0609702be9ba6bc48 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Fri, 17 Dec 2010 13:25:34 +0800
Subject: [PATCH 41/47] nlm_xlr_atx_64_be: add compressed kernel image support

Based on the mainline compressed(self decompressed) kernel
image(vmlinuz) support framework of MIPS, this patch adds the compressed
kernel image for the XLR732 ATX-I/II boards via selecting
SYS_SUPPORTS_ZBOOT, the related serial port debugging support(can be
enabled by CONFIG_DEBUG_ZBOOT=y) is also added via implementing the putc
function(the prom_putchar() variant).

With this support, the size of the kernel images looks like this:

$ ls -lh vmlinu{x,z}
-rwxr-xr-x 1 zwu admin  69M 2010-12-17 13:18 vmlinux
-rwxr-xr-x 1 zwu admin 2.2M 2010-12-17 13:18 vmlinuz

As we can see, vmlinuz is much smaller than vmlinux.

The loading/booting procedure looks like this:

[snip]
C4_XLR732 @ ATX_II_B $ ifconfig -i gmac0
C4_XLR732 @ ATX_II_B $ tftpc -s 128.224.163.135 -f /xlr/vmlinuz-std
Downloading [/xlr/vmlinuz-std].
Server IP : 128.224.163.135
C4_XLR732 @ ATX_II_B $ tftpc stall; Check network setup.
Bytes downloaded: 2299939
tftpc: download done. Size [2299939] @ Addr [0x120000000]
C4_XLR732 @ ATX_II_B $ elfload
C4_XLR732 @ ATX_II_B $ userapp root=/dev/nfs rw nfsroot=128.224.163.135:/opt/rootfs/xlr732/401 ip=dhcp console=ttyS0,38400
cpu_online_map=ffffffff, userapp_cpu_map ffffffff
psb_os_active_mask=0, psb_os_mask=0
boot1_info: userapp_cpu_map=ffffffff, psb_os_cpu_map=0
            cpu_online_map = 0xffffffff
Jumping to the application... 0x87820000
------------------------------------------------------------
Preparing ffffffff bitmask of cpus to run
Resetting gmac0 ...
...done
count = 32, total = 32
All slave cpus (32) ack'ed userapp init
Initializing message ring for cpu_1
Initializing message ring for cpu_7
Initializing message ring for cpu_2
Initializing message ring for cpu_4
Initializing message ring for cpu_6
Initializing message ring for cpu_5
Initializing message ring for cpu_3
count = 8, total = 8
All slave cpus (8) ack'ed message ring init
Initializing message ring for cpu_0
zimage at:     87821660 87A39170
Uncompressing Linux at load address 83400000
Now, booting the kernel...
Initializing cgroup subsys cpuset
Initializing cgroup subsys cpu
Linux version 2.6.34.6-WR4.0.0.0_standard (zwu@falcon-desktop) (gcc version 4.4.1 (Wind River Linux Sourcery G++ 4.4-291) ) #85 SMP PREEMPT Fri Dec 17 13:18:13 HKT 2010
[snip]

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/mips/Kconfig                    |    1 +
 arch/mips/boot/compressed/Makefile   |    1 +
 arch/mips/boot/compressed/uart-rmi.c |   23 +++++++++++++++++++++++
 arch/mips/include/asm/rmi/iomap.h    |   10 ++++++++++
 arch/mips/rmi/ptr/serial.c           |    6 +-----
 5 files changed, 36 insertions(+), 5 deletions(-)
 create mode 100644 arch/mips/boot/compressed/uart-rmi.c

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 1736693..ab62f55 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -697,6 +697,7 @@ config RMI_PTR
 	select SYS_SUPPORTS_64BIT_KERNEL
 	select SYS_SUPPORTS_BIG_ENDIAN
 	select SYS_SUPPORTS_HIGHMEM
+	select SYS_SUPPORTS_ZBOOT
 	select DMA_COHERENT
 	select CEVT_R4K
 	select CSRC_R4K
diff --git a/arch/mips/boot/compressed/Makefile b/arch/mips/boot/compressed/Makefile
index 790ddd3..5ba89c2 100644
--- a/arch/mips/boot/compressed/Makefile
+++ b/arch/mips/boot/compressed/Makefile
@@ -38,6 +38,7 @@ obj-y := $(obj)/head.o $(obj)/decompress.o $(obj)/dbg.o
 ifdef CONFIG_DEBUG_ZBOOT
 obj-$(CONFIG_SYS_SUPPORTS_ZBOOT_UART16550) += $(obj)/uart-16550.o
 obj-$(CONFIG_MACH_ALCHEMY)		   += $(obj)/uart-alchemy.o
+obj-$(CONFIG_RMI_PHOENIX)		   += $(obj)/uart-rmi.o
 endif
 
 OBJCOPYFLAGS_vmlinux.bin := $(OBJCOPYFLAGS) -O binary -R .comment -S
diff --git a/arch/mips/boot/compressed/uart-rmi.c b/arch/mips/boot/compressed/uart-rmi.c
new file mode 100644
index 0000000..139e6ce
--- /dev/null
+++ b/arch/mips/boot/compressed/uart-rmi.c
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2010 Wind River Systems, Inc.
+ * Author: Wu Zhangjin <zhangjin.wu@windriver.com>
+ *
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ */
+
+/*
+ * undefine RMI_BRIDGE_WKAROUND here to use the simple mmio operations
+ * to avoid making the thing too complex.
+ */
+#undef RMI_BRIDGE_WKAROUND
+
+#include <asm/rmi/iomap.h>
+
+unsigned long phoenix_io_base = (unsigned long) (DEFAULT_PHOENIX_IO_BASE);
+
+void putc(char c)
+{
+	rmi_prom_putchar(c);
+}
diff --git a/arch/mips/include/asm/rmi/iomap.h b/arch/mips/include/asm/rmi/iomap.h
index 029e6d1..d695ee7 100644
--- a/arch/mips/include/asm/rmi/iomap.h
+++ b/arch/mips/include/asm/rmi/iomap.h
@@ -93,6 +93,7 @@
 
 #include <linux/preempt.h>
 #include <linux/types.h>
+#include <linux/serial_reg.h>
 #include <asm/byteorder.h>
 
 typedef volatile __u32 phoenix_reg_t;
@@ -219,6 +220,15 @@ static inline void rmi_br_write_unlock(unsigned int flags)
 #endif
 extern void on_chip_init(void);
 
+static inline void rmi_prom_putchar(char c)
+{
+	phoenix_reg_t *mmio = phoenix_io_mmio(PHOENIX_IO_UART_0_OFFSET);
+
+	while ((phoenix_read_reg(mmio, UART_LSR) & UART_LSR_THRE) == 0)
+		;
+	phoenix_write_reg(mmio, UART_TX, c);
+}
+
 #endif
 
 #endif
diff --git a/arch/mips/rmi/ptr/serial.c b/arch/mips/rmi/ptr/serial.c
index c7686af..61fe1a9 100644
--- a/arch/mips/rmi/ptr/serial.c
+++ b/arch/mips/rmi/ptr/serial.c
@@ -17,11 +17,7 @@
 #ifdef CONFIG_EARLY_PRINTK
 void prom_putchar(char c)
 {
-	phoenix_reg_t *mmio = phoenix_io_mmio(PHOENIX_IO_UART_0_OFFSET);
-
-	while (phoenix_read_reg(mmio, 0x5) == 0)
-		;
-	phoenix_write_reg(mmio, 0x0, c);
+	rmi_prom_putchar(c);
 }
 #endif
 
-- 
1.7.0.4

