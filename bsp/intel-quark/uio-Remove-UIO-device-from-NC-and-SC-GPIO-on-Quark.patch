From 9d6b1797af3bd7f0f92b4d391819c5d54e3d4dfc Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Fri, 31 Jul 2015 18:15:13 +0800
Subject: [PATCH 6/8] uio: Remove UIO device from NC and SC GPIO on Quark

This patch is to remove the UIO device drive from NC
and SC GPIO driver on Intel Quark Platform

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: Ibf55a703f1ec617abe18f2b6b9c56d59e15df3d4
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5954
Reviewed-by: Rafferty, William A <william.a.rafferty@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c          |   22 ----------------------
 drivers/mfd/intel_qrk_gip_gpio.c |   27 ---------------------------
 2 files changed, 0 insertions(+), 49 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index bba1e00..7b245c9 100755
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -31,7 +31,6 @@
 #include <linux/irq.h>
 
 #include <linux/gpio.h>
-#include <linux/uio_driver.h>
 
 #define GEN	0x00
 #define GIO	0x04
@@ -80,7 +79,6 @@ struct sch_gpio {
 	int irq_base;
 	bool irq_support;
 	DECLARE_BITMAP(wake_irqs, MAX_GPIO);
-	struct uio_info info;
 };
 
 #define to_sch_gpio(gc)		container_of(gc, struct sch_gpio, chip)
@@ -532,21 +530,6 @@ static int sch_gpio_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, sch);
 
-	/* UIO */
-	sch->info.port[0].name = "gpio_regs";
-	sch->info.port[0].start = res->start;
-	sch->info.port[0].size = resource_size(res);
-	sch->info.port[0].porttype = UIO_PORT_X86;
-	sch->info.name = "sch_gpio";
-	sch->info.version = "0.0.1";
-
-	if (uio_register_device(&pdev->dev, &sch->info))
-		goto err_sch_uio_register;
-
-	pr_info("%s UIO port addr 0x%04x size %lu porttype %d\n",
-		__func__, (unsigned int)sch->info.port[0].start,
-		sch->info.port[0].size, sch->info.port[0].porttype);
-
 	err = platform_device_register(&gpio_restrict_pdev);
 	if (err < 0)
 		goto err_sch_gpio_device_register;
@@ -554,9 +537,6 @@ static int sch_gpio_probe(struct platform_device *pdev)
 	return 0;
 
 err_sch_gpio_device_register:
-	uio_unregister_device(&sch->info);
-
-err_sch_uio_register:
 err_sch_request_irq:
 	irq_free_descs(sch->irq_base, sch->chip.ngpio);
 
@@ -571,8 +551,6 @@ static int sch_gpio_remove(struct platform_device *pdev)
 	int ret;
 	struct sch_gpio *sch = platform_get_drvdata(pdev);
 
-	uio_unregister_device(&sch->info);
-
 	if (sch->irq_support)
 		irq_free_descs(sch->irq_base, sch->chip.ngpio);
 
diff --git a/drivers/mfd/intel_qrk_gip_gpio.c b/drivers/mfd/intel_qrk_gip_gpio.c
index 886b3d8..b34d459 100644
--- a/drivers/mfd/intel_qrk_gip_gpio.c
+++ b/drivers/mfd/intel_qrk_gip_gpio.c
@@ -27,7 +27,6 @@
 #include <linux/module.h>
 #include <linux/pci.h>
 #include <linux/platform_device.h>
-#include <linux/uio_driver.h>
 #include <linux/mfd/intel_qrk_gip.h>
 
 static void gpio_restrict_release(struct device *dev) {}
@@ -35,7 +34,6 @@ static struct platform_device gpio_restrict_pdev = {
 	.name	= "gpio-restrict-sc",
 	.dev.release = gpio_restrict_release,
 };
-struct uio_info *info;
 
 /* The base GPIO number under GPIOLIB framework */
 #define INTEL_QRK_GIP_GPIO_BASE		8
@@ -496,11 +494,6 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 	int retval = 0;
 	resource_size_t start = 0, len = 0;
 
-	/* Get UIO memory */
-	info = kzalloc(sizeof(struct uio_info), GFP_KERNEL);
-	if (!info)
-		return -ENOMEM;
-
 	/* Determine the address of the GPIO area */
 	start = pci_resource_start(pdev, GIP_GPIO_BAR);
 	len = pci_resource_len(pdev, GIP_GPIO_BAR);
@@ -566,22 +559,6 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 		goto err_unregister_platform_device;
 	}
 
-	/* UIO */
-	info->mem[0].addr = start;
-	info->mem[0].internal_addr = reg_base;
-	info->mem[0].size = len;
-	info->mem[0].memtype = UIO_MEM_PHYS;
-	info->mem[0].name = "gpio_regs";
-	info->name = "gpio uio";
-	info->version = "0.0.1";
-
-	if (uio_register_device(&pdev->dev, info))
-		goto err_unregister_platform_device;
-
-	pr_info("%s UIO addr 0x%08x internal_addr 0x%08x size %lu memtype %d\n",
-		__func__, (unsigned int)info->mem[0].addr,
-		(unsigned int)info->mem[0].internal_addr, info->mem[0].size,
-		info->mem[0].memtype);
 	igc->chip_types->chip.irq_mask = intel_qrk_gpio_irq_mask;
 	igc->chip_types->chip.irq_unmask = intel_qrk_gpio_irq_unmask;
 	igc->chip_types->chip.irq_set_type = intel_qrk_gpio_irq_type;
@@ -606,7 +583,6 @@ err_free_gpiochip:
 err_iounmap:
 	iounmap(reg_base);
 exit:
-	kfree(info);
 	return retval;
 }
 
@@ -641,9 +617,6 @@ void intel_qrk_gpio_remove(struct pci_dev *pdev)
 	if (0 != gpiochip_remove(gc))
 		dev_err(&pdev->dev, "failed removing gpio_chip\n");
 
-	uio_unregister_device(info);
-	kfree(info);
-
 	kfree(gc);
 	iounmap(reg_base);
 
-- 
1.7.5.4

