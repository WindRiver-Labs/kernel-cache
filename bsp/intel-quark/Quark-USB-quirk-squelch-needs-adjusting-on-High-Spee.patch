From bfad83cabacd43baa8844fe1f46a2b0861f96d57 Mon Sep 17 00:00:00 2001
From: Kevin Clarke <kevin1.clarke@intel.com>
Date: Wed, 19 Nov 2014 13:48:53 +0000
Subject: [PATCH 37/42] Quark USB quirk, squelch needs adjusting on High Speed
 - RTC #66054

- Detect there is a fault with taking too long to enumerate, as noise
  around the level of the squelch threshold is being interpreted as bad
  signalling (see HSD 85470 for more details).
- Adjust squelch threshold low to eliminate false signalling.
- If still failing to enumerate adjust squelch threshold high.
- Settle squelch back to default when port enumerates correctly.
- Drop back to full speed if the adjustments did not help.
- Above adjustments stop repeated waiting and resets and make
  enumeration to HS, or if the adjusments do not work to FS.

Change-Id: I4f683c8d6cd01ab1d0c008e8b16d5fc3021b0ca3
(cherry picked from commit 7d750146712e19f0ff47a3f106c6c6cf9e251900)

Conflicts:

	drivers/usb/host/pci-quirks.h

Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Change-Id: Iec77207fe331c4414dedf713baced051ea7dad61
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4786
Reviewed-by: Ahmad, Josef <josef.ahmad@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/usb/host/ehci-hub.c   |   77 +++++++++++++++++++++++++++++++++++++++-
 drivers/usb/host/ehci-pci.c   |   11 ++++++
 drivers/usb/host/ehci.h       |   16 ++++++++
 drivers/usb/host/pci-quirks.c |   44 ++++++++++++++++++++++-
 drivers/usb/host/pci-quirks.h |    2 +
 5 files changed, 146 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/host/ehci-hub.c b/drivers/usb/host/ehci-hub.c
index 7d6f64c..d67aa0c 100644
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@ -599,6 +599,11 @@ static int check_reset_complete (
 	} else {
 		ehci_dbg(ehci, "port %d reset complete, port enabled\n",
 			index + 1);
+		if (ehci->has_x1000_phy && ehci->x1000_phy_squelch) {
+			/* If squelch was adjusted, then reset back to normal */
+			quirk_qrk_usb_phy_set_squelch(QRK_SQUELCH_DEFAULT);
+			ehci->x1000_phy_squelch = QRK_SQUELCH_DEFAULT;
+		}
 		/* ensure 440EPx ohci controller state is suspended */
 		if (ehci->has_amcc_usb23)
 			set_ohci_hcfs(ehci, 0);
@@ -691,6 +696,62 @@ ehci_hub_status_data (struct usb_hcd *hcd, char *buf)
 
 /*-------------------------------------------------------------------------*/
 
+/*
+ * __ehci_adjust_x1000_squelch
+ *
+ * Adjust the squelch on PHY for Intel Quark X1000
+ *
+ * Feature on X1000 SOC where squelch of on SOC PHY may need to be adjusted
+ * during enumeration of HS, trying a number of different levels.
+ * The adjustment is followed by a port repower to enable
+ * the state machine realign and a RESET to restart the
+ * enumeration process. This will result in succesful HS enumeration instead
+ * of cycling through waits and resets which were not solving the issue and
+ * ultimately ending up with no enumeration.
+ */
+
+static void
+__ehci_adjust_x1000_squelch(
+	struct ehci_hcd	*ehci,
+	u32 __iomem	*status_reg,
+	u16		windex
+) {
+	u32		temp;
+	temp = ehci_readl(ehci, status_reg);
+
+	switch (ehci->x1000_phy_squelch) {
+	case QRK_SQUELCH_DEFAULT:   /* No squelch yet done now put it low */
+		ehci->x1000_phy_squelch = QRK_SQUELCH_LO;
+		break;
+	case QRK_SQUELCH_LO: /* Low squelch done now put it high */
+		ehci->x1000_phy_squelch = QRK_SQUELCH_HI;
+		break;
+	case QRK_SQUELCH_HI:
+			/* High done now put it back to default and
+			   reset state for for next time */
+		ehci->x1000_phy_squelch = QRK_SQUELCH_DEFAULT;
+		break;
+	}
+	temp = ehci_readl(ehci, status_reg);
+	ehci_writel(ehci, temp & ~PORT_POWER, status_reg);
+	quirk_qrk_usb_phy_set_squelch(ehci->x1000_phy_squelch);
+	temp = ehci_readl(ehci, status_reg);
+	ehci_writel(ehci, temp | PORT_POWER, status_reg);
+	ehci_handshake(ehci, status_reg, PORT_CONNECT, 1, 2000);
+			/*  allow time for repower to work */
+	if (ehci->x1000_phy_squelch == QRK_SQUELCH_DEFAULT)
+		return;	/* do not reset port when finished
+			   as we are OK with enum. Just set
+			   back to default for next device */
+	temp = ehci_readl(ehci, status_reg);
+	temp |= PORT_RESET;
+	temp &= ~PORT_PE;
+	ehci->reset_done[windex] = jiffies + msecs_to_jiffies(50);
+	ehci_writel(ehci, temp, status_reg);
+}
+
+/*-------------------------------------------------------------------------*/
+
 static void
 ehci_hub_descriptor (
 	struct ehci_hcd			*ehci,
@@ -1072,7 +1133,16 @@ static int ehci_hub_control (
 			 */
 			retval = ehci_handshake(ehci, status_reg,
 					PORT_RESET, 0, 1000);
-			if (retval != 0) {
+			if (retval == -ETIMEDOUT && ehci->has_x1000_phy) {
+				/* Quark, squelch adjust and RESET needed */
+				__ehci_adjust_x1000_squelch(ehci, status_reg,
+								wIndex);
+				if (ehci->x1000_phy_squelch)
+					/* If squelch adjusted */
+					goto error;
+				/* else squelch is back at default allow enum
+					to continue */
+			} else if (retval != 0) {
 				ehci_err (ehci, "port %d reset error %d\n",
 					wIndex + 1, retval);
 				goto error;
@@ -1217,7 +1287,10 @@ static int ehci_hub_control (
 			} else {
 				temp |= PORT_RESET;
 				temp &= ~PORT_PE;
-
+				if (ehci->has_x1000_phy
+						&& ehci->x1000_phy_squelch)
+					ehci->x1000_phy_squelch
+						= QRK_SQUELCH_DEFAULT;
 				/*
 				 * caller must wait, then call GetPortStatus
 				 * usb 2.0 spec says 50 ms resets on root
diff --git a/drivers/usb/host/ehci-pci.c b/drivers/usb/host/ehci-pci.c
index ca7b964..87b066b 100644
--- a/drivers/usb/host/ehci-pci.c
+++ b/drivers/usb/host/ehci-pci.c
@@ -137,6 +137,17 @@ static int ehci_pci_setup(struct usb_hcd *hcd)
 	case PCI_VENDOR_ID_INTEL:
 		if (pdev->device == PCI_DEVICE_ID_INTEL_CE4100_USB)
 			hcd->has_tt = 1;
+		else if (pdev->device == PCI_DEVICE_ID_INTEL_QUARK_X1000_SOC
+						&& pdev->revision  == 0x10) {
+			ehci->has_x1000_phy = 1;
+			ehci->x1000_phy_squelch = QRK_SQUELCH_DEFAULT;
+			/* Intel Quark device of this revision requires
+				adjustment of squelch on the PHY
+			*/
+			ehci_info(ehci,
+			"QUARK USB phy rev 0x%x may have squelch ref adjusted\n"
+						, pdev->revision);
+		}
 		break;
 	case PCI_VENDOR_ID_TDI:
 		if (pdev->device == PCI_DEVICE_ID_TDI_EHCI)
diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index 9dfc6c1..56e59df 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -227,6 +227,22 @@ struct ehci_hcd {			/* one per controller */
 	unsigned		need_oc_pp_cycle:1; /* MPC834X port power */
 	unsigned		imx28_write_fix:1; /* For Freescale i.MX28 */
 
+	unsigned		has_x1000_phy:1;
+	/* Intel Quark X10xx needs squelch adjustment during HS enumeration
+	 * to eliminate noise at around default power on squelch of 112.5mV
+	 * which causes the noise to look like signalling. We need to adjust
+	 * the squelch to eliminate that false signalling.
+	 * First we adjust it lo and if the false signalling is now damped,
+	 * enumeration works OK. If that fails  we adjust hi and see
+	 * if it enumerates OK, if not we are at the END and will default to
+	 * full speed.  */
+	#define QRK_SQUELCH_DEFAULT	0 /* apply default of 112.5 mV */
+	#define QRK_SQUELCH_LO		1 /* apply low  of 100 mV */
+	#define QRK_SQUELCH_HI		2 /* apply high of 125 mV */
+
+	unsigned		x1000_phy_squelch:2;
+					/*Squelch state during quirk */
+
 	/* required for usb32 quirk */
 	#define OHCI_CTRL_HCFS          (3 << 6)
 	#define OHCI_USB_OPER           (2 << 6)
diff --git a/drivers/usb/host/pci-quirks.c b/drivers/usb/host/pci-quirks.c
index 11223ec..f006020 100644
--- a/drivers/usb/host/pci-quirks.c
+++ b/drivers/usb/host/pci-quirks.c
@@ -18,7 +18,7 @@
 #include <linux/dmi.h>
 #include "pci-quirks.h"
 #include "xhci-ext-caps.h"
-
+#include <asm/iosf_mbi.h>
 
 #define UHCI_USBLEGSUP		0xc0		/* legacy support */
 #define UHCI_USBCMD		0		/* command register */
@@ -846,7 +846,6 @@ static int handshake(void __iomem *ptr, u32 mask, u32 done,
 	return -ETIMEDOUT;
 }
 
-#define PCI_DEVICE_ID_INTEL_QUARK_X1000_SOC		0x0939
 bool usb_is_intel_qrk(struct pci_dev *pdev)
 {
 	return pdev->vendor == PCI_VENDOR_ID_INTEL &&
@@ -1105,6 +1104,47 @@ hc_init:
 
 	iounmap(base);
 }
+#ifdef CONFIG_X86_INTEL_QUARK
+/**
+ * quirk_qrk_usb_phy_set_squelch
+ *
+ * Uses side band access on quark to access USB PHY registers where the
+ * squelch value can be adjusted.
+ * @threshold: ref to millivolts to set the squelch to there are just a few
+ *             values available to use in quark
+ *
+ * QRK_SQUELCH_DEFAULT	0 apply default of 112.5 mV
+ * QRK_SQUELCH_LO	1 apply low  of 100 mV
+ * QRK_SQUELCH_HI	2 apply high of 125 mV
+ */
+#define USB2COMPBG	0x7F04	/* PHY register over side band */
+#define HS_SQ_REF_POS   13	/* bit position for squelch */
+#define HS_SQ_REF_MASK  (3 << HS_SQ_REF_POS) /* bit mask for squelch */
+
+#define USBPHY_SB_READ	0x06	/* Sideband read command  */
+#define USBPHY_SB_WRITE	0x07	/* Sideband write command */
+#define SB_ID_USBPHY	0x14	/* Port of USB PHY */
+
+void quirk_qrk_usb_phy_set_squelch(u32 threshold)
+{
+	u32 regval, regnew;
+	iosf_mbi_read(SB_ID_USBPHY, USBPHY_SB_READ, USB2COMPBG,
+								 &regval);
+	regnew = regval & ~HS_SQ_REF_MASK;
+	regnew |= ((threshold<<HS_SQ_REF_POS) & HS_SQ_REF_MASK);
+	iosf_mbi_write(SB_ID_USBPHY, USBPHY_SB_WRITE, USB2COMPBG,
+								regnew);
+	pr_info("USB PHY squelch ref adjusted from %8x to %8x\n",
+						regval, regnew);
+}
+#else
+inline void quirk_qrk_usb_phy_set_squelch(u32 threshold)
+{
+}
+#endif
+EXPORT_SYMBOL_GPL(quirk_qrk_usb_phy_set_squelch);
+
+
 
 static void quirk_usb_early_handoff(struct pci_dev *pdev)
 {
diff --git a/drivers/usb/host/pci-quirks.h b/drivers/usb/host/pci-quirks.h
index a0f19d0..8dfdea86 100644
--- a/drivers/usb/host/pci-quirks.h
+++ b/drivers/usb/host/pci-quirks.h
@@ -15,6 +15,8 @@ void usb_disable_xhci_ports(struct pci_dev *xhci_pdev);
 void sb800_prefetch(struct device *dev, int on);
 bool usb_is_intel_qrk(struct pci_dev *pdev);
 void usb_set_qrk_bulk_thresh(struct pci_dev *pdev);
+#define PCI_DEVICE_ID_INTEL_QUARK_X1000_SOC		0x0939
+void quirk_qrk_usb_phy_set_squelch(u32 threshold);
 #else
 struct pci_dev;
 static inline void usb_amd_quirk_pll_disable(void) {}
-- 
1.7.5.4

