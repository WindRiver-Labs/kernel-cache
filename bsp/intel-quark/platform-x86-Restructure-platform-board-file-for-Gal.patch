From 6ec519da40f25bbaa5c478e3b64c9399ff4985c7 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Tue, 31 Mar 2015 18:26:28 +0800
Subject: [PATCH 18/32] platform: x86: Restructure platform board file for
 Galileo

This patch is to split the platform board file for both
Galileo Gen1 and Gen2.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/platform/x86/intel-quark/Makefile          |    8 +-
 .../x86/intel-quark/intel_quark_board_data.c       |   19 +-
 .../x86/intel-quark/intel_quark_platform_galileo.c |  333 +------------------
 .../intel_quark_platform_galileo_gen2.c            |  359 ++++++++++++++++++++
 4 files changed, 387 insertions(+), 332 deletions(-)
 create mode 100644 drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c

diff --git a/drivers/platform/x86/intel-quark/Makefile b/drivers/platform/x86/intel-quark/Makefile
index 987a0e9..8b80197 100644
--- a/drivers/platform/x86/intel-quark/Makefile
+++ b/drivers/platform/x86/intel-quark/Makefile
@@ -1,2 +1,8 @@
-obj-$(CONFIG_INTEL_QUARK_PLATFORM_GALILEO)	+= intel_quark_platform_galileo.o
+#obj-$(CONFIG_INTEL_QUARK_PLATFORM_GALILEO)	+= intel_quark_platform_galileo.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_board_data.o
+obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_galileo_gen2.o
+obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_galileo.o
+#obj-$(CONFIG_X86_INTEL_QUARK)>-+= intel_qrk_plat_clanton_hill.o
+#obj-$(CONFIG_X86_INTEL_QUARK)>-+= intel_qrk_plat_clanton_peak.o
+#obj-$(CONFIG_X86_INTEL_QUARK)>-+= intel_qrk_plat_cross_hill.o
+#obj-$(CONFIG_X86_INTEL_QUARK)>-+= intel_qrk_plat_kips_bay.o
diff --git a/drivers/platform/x86/intel-quark/intel_quark_board_data.c b/drivers/platform/x86/intel-quark/intel_quark_board_data.c
index 7922eda..f2fe11c 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_board_data.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_board_data.c
@@ -104,7 +104,22 @@ static struct platform_device bsp_data[] = {
 		.name	= "GalileoGen2",
 		.id	= -1,
 	},
-
+	{
+		.name	= "CrossHill",
+		.id	= -1,
+	},
+	{
+		.name	= "ClantonHill",
+		.id	= -1,
+	},
+	{
+		.name	= "ClantonPeakSVP",
+		.id	= -1,
+	},
+	{
+		.name	= "KipsBay",
+		.id	= -1,
+	},
 };
 
 /**
@@ -209,7 +224,7 @@ static int __init intel_qrk_board_data_init(void)
 	     i < sizeof(bsp_data)/sizeof(struct platform_device); i++) {
 		if (!strcmp(bsp_data[i].name, board_name)) {
 			/* Register Galileo Platform Device as General */
-			platform_device_register(&bsp_data[0]);
+			platform_device_register(&bsp_data[i]);
 			found = true;
 
 			/* Galileo IDE expects this entry */
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
index c672d49..2228ca9 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
@@ -38,29 +38,6 @@
 
 #define DRIVER_NAME "Galileo"
 
-struct intel_quark_platform_struct {
-	struct platform_device *pdevice;
-	int (*init)(void);
-	int (*exit)(void);
-};
-
-static struct intel_quark_platform_struct *quark_platform;
-
-static struct platform_device bsp_data[] = {
-	{
-		.name	= "Galileo",
-		.id	= -1,
-	},
-	{
-		.name	= "GalileoGen2",
-		.id	= -1,
-	},
-};
-
-/*
- * Gen1 Specific
- */
-
 /* GPIO line used to detect the LSB of the Cypress i2c address */
 #define GPIO_CYPRESS_A0			7
 /* GPIO line Cypress interrupts are routed to (in S0 power state) */
@@ -296,7 +273,7 @@ static int intel_qrk_spi_add_onboard_devs(void)
 			ARRAY_SIZE(spi_onboard_devs));
 }
 
-static int intel_quark_galileo_gen1_init(void)
+static int intel_quark_galileo_gen1_init(struct platform_device *pdev)
 {
 	int ret = 0;
 	static int spi_done;
@@ -353,310 +330,8 @@ end:
 	return ret;
 }
 
-static int intel_quark_galileo_gen1_exit(void)
-{
-	return 0;
-}
-
-
-/******************************************************************************
- *                        Intel Galileo Gen2
- ******************************************************************************/
-#define GPIO_PCAL9555A_EXP2_INT		9
-
-static int gpio_cs;
-
-module_param(gpio_cs, int, S_IRUGO | S_IWUSR);
-MODULE_PARM_DESC(gpio_cs, "Enable GPIO chip-select for SPI channel 1");
-
-/******************************************************************************
- *             Texas Instruments ADC1x8S102 SPI Device Platform Data
- ******************************************************************************/
-#include "linux/platform_data/adc1x8s102.h"
-
-/* Maximum input voltage allowed for each ADC input, in milliVolts */
-#define ADC1x8S102_MAX_EXT_VIN 5000
-
-static const struct adc1x8s102_platform_data adc1x8s102_platform_data = {
-	.ext_vin = ADC1x8S102_MAX_EXT_VIN
-};
-
-#include "linux/platform_data/pca953x.h"
-#define PCAL9555A_GPIO_BASE_OFFSET 16
-
-static struct pca953x_platform_data pcal9555a_platform_data_exp0 = {
-	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET,
-	.irq_base = -1,
-};
-
-static struct pca953x_platform_data pcal9555a_platform_data_exp1 = {
-	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET + 16,
-	.irq_base = -1,
-};
-
-static struct pca953x_platform_data pcal9555a_platform_data_exp2 = {
-	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET + 32,
-};
-
-#include "linux/platform_data/pca9685.h"
-
-static struct pca9685_pdata pca9685_platform_data = {
-	.chan_mapping = {
-		PWM_CH_GPIO, PWM_CH_PWM,
-		PWM_CH_GPIO, PWM_CH_PWM,
-		PWM_CH_GPIO, PWM_CH_PWM,
-		PWM_CH_GPIO, PWM_CH_PWM,
-		PWM_CH_GPIO, PWM_CH_PWM,
-		PWM_CH_GPIO, PWM_CH_PWM,
-		PWM_CH_GPIO, PWM_CH_GPIO,
-		PWM_CH_GPIO, PWM_CH_GPIO,
-		PWM_CH_DISABLED /* ALL_LED disabled */
-	},
-	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET + 48,
-};
-
-/******************************************************************************
- *                        Intel Galileo Gen2 i2c clients
- ******************************************************************************/
-#define EEPROM_ADDR				0x54
-#define PCAL9555A_EXP0_ADDR			0x25
-#define PCAL9555A_EXP1_ADDR			0x26
-#define PCAL9555A_EXP2_ADDR			0x27
-#define PCA9685_ADDR				0x47
-
-static struct i2c_board_info probed_i2c_eeprom;
-static struct i2c_board_info probed_i2c_pcal9555a_exp0 = {
-	.platform_data = &pcal9555a_platform_data_exp0,
-};
-static struct i2c_board_info probed_i2c_pcal9555a_exp1 = {
-	.platform_data = &pcal9555a_platform_data_exp1,
-};
-static struct i2c_board_info probed_i2c_pcal9555a_exp2 = {
-	.platform_data = &pcal9555a_platform_data_exp2,
-};
-static struct i2c_board_info probed_i2c_pca9685 = {
-	.platform_data = &pca9685_platform_data,
-};
-
-static const unsigned short eeprom_i2c_addr_gen2[] = {
-	EEPROM_ADDR, I2C_CLIENT_END
-};
-static const unsigned short pcal9555a_exp0_i2c_addr[] = {
-	PCAL9555A_EXP0_ADDR, I2C_CLIENT_END
-};
-static const unsigned short pcal9555a_exp1_i2c_addr[] = {
-	PCAL9555A_EXP1_ADDR, I2C_CLIENT_END
-};
-static const unsigned short pcal9555a_exp2_i2c_addr[] = {
-	PCAL9555A_EXP2_ADDR, I2C_CLIENT_END
-};
-static const unsigned short pca9685_i2c_addr[] = {
-	PCA9685_ADDR, I2C_CLIENT_END
-};
-
-static int i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+static int intel_quark_galileo_gen1_exit(struct platform_device *pdev)
 {
-	/* Always return success: the I2C clients are already known.  */
-	return 1;
-}
-
-static struct spi_board_info spi0_onboard_devs_gen2[] = {
-	{
-		.modalias = "m25p80",
-		.platform_data = &ilb_flash,
-		.bus_num = LPC_SCH_SPI_BUS_ID,
-		.chip_select = 0,
-	},
-	{
-		.modalias = "adc1x8s102",
-		.max_speed_hz = 16667000,
-		.platform_data = &adc1x8s102_platform_data,
-		.mode = SPI_MODE_3,
-		.bus_num = 0,
-		.chip_select = 0,
-		.controller_data = &qrk_ffrd_spi_0_cs_0,
-	},
-};
-
-static struct spi_board_info spi1_onboard_devs_gpiocs_gen2[] = {
-	{
-		.modalias = "spidev",
-		.chip_select = 0,
-		.controller_data = NULL,
-		.max_speed_hz = 50000000,
-		.bus_num = 1,
-		.controller_data = &qrk_ffrd_spi_1_cs_0,
-	},
-};
-
-static struct spi_board_info spi1_onboard_devs_gen2[] = {
-	{
-		.modalias = "spidev",
-		.chip_select = 0,
-		.controller_data = NULL,
-		.max_speed_hz = 50000000,
-		.bus_num = 1,
-	},
-};
-
-/**
- * intel_qrk_spi_add_onboard_devs
- *
- * @return 0 on success or standard errnos on failure
- *
- * Registers onboard SPI device(s) present on the Izmir platform
- */
-static int intel_qrk_spi_add_onboard_devs_gen2(void)
-{
-	int ret = 0;
-
-	ret = spi_register_board_info(spi0_onboard_devs_gen2,
-				      ARRAY_SIZE(spi0_onboard_devs_gen2));
-	if (ret)
-		return ret;
-
-	if (gpio_cs)
-		return spi_register_board_info(spi1_onboard_devs_gpiocs_gen2,
-					ARRAY_SIZE(spi1_onboard_devs_gpiocs_gen2));
-	else
-		return spi_register_board_info(spi1_onboard_devs_gen2,
-					ARRAY_SIZE(spi1_onboard_devs_gen2));
-}
-
-static struct gpio reserved_gpios_gen2[] = {
-	{
-		GPIO_PCAL9555A_EXP2_INT,
-		GPIOF_IN,
-		"pcal9555a-exp2-int",
-	},
-};
-
-static int intel_quark_galileo_gen2_init(void)
-{
-	int ret = 0;
-	struct i2c_adapter *i2c_adap = NULL;
-	struct i2c_client *client = NULL;
-
-	/* Need to tell the PCA953X driver which GPIO IRQ to use for signalling
-	 * interrupts.  We can't get the IRQ until the GPIO driver is loaded.
-	 * Hence, we defer registration of the I2C devices until now
-	 */
-	i2c_adap = i2c_get_adapter(0);
-	if (NULL == i2c_adap) {
-		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
-			__func__);
-		return -EPROBE_DEFER;
-	}
-
-	ret = gpio_request_array(reserved_gpios_gen2, ARRAY_SIZE(reserved_gpios_gen2));
-	if (ret) {
-			pr_info("%s: gpio_request_array failure. Deferring..\n",
-				__func__);
-			ret = -EPROBE_DEFER;
-		goto end;
-	}
-
-	strlcpy(probed_i2c_eeprom.type, "24c08", I2C_NAME_SIZE);
-	client = i2c_new_probed_device(i2c_adap, &probed_i2c_eeprom,
-				       eeprom_i2c_addr_gen2, i2c_probe);
-	if (client == NULL) {
-		pr_err("%s: Failed to probe 24c08 I2C device\n", __func__);
-		ret = -ENODEV;
-		goto end;
-	}
-
-	strlcpy(probed_i2c_pcal9555a_exp0.type, "pcal9555a", I2C_NAME_SIZE);
-	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcal9555a_exp0,
-				       pcal9555a_exp0_i2c_addr, i2c_probe);
-	if (client == NULL) {
-		pr_err("%s: Failed to probe pcal9555a I2C device\n", __func__);
-		ret = -ENODEV;
-		goto end;
-	}
-
-	strlcpy(probed_i2c_pcal9555a_exp1.type, "pcal9555a", I2C_NAME_SIZE);
-	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcal9555a_exp1,
-				       pcal9555a_exp1_i2c_addr, i2c_probe);
-	if (client == NULL) {
-		pr_err("%s: Failed to probe pcal9555a I2C device\n", __func__);
-		ret = -ENODEV;
-		goto end;
-	}
-
-	strlcpy(probed_i2c_pcal9555a_exp2.type, "pcal9555a", I2C_NAME_SIZE);
-	probed_i2c_pcal9555a_exp2.irq = gpio_to_irq(GPIO_PCAL9555A_EXP2_INT);
-	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcal9555a_exp2,
-				       pcal9555a_exp2_i2c_addr, i2c_probe);
-	if (client == NULL) {
-		pr_err("%s: Failed to probe pcal9555a I2C device\n", __func__);
-		ret = -ENODEV;
-		goto end;
-	}
-
-	strlcpy(probed_i2c_pca9685.type, "pca9685", I2C_NAME_SIZE);
-	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pca9685,
-				       pca9685_i2c_addr, i2c_probe);
-	if (client == NULL) {
-		pr_err("%s: Failed to probe pca9685 I2C device\n", __func__);
-		ret = -ENODEV;
-		goto end;
-	}
-
-	ret = intel_qrk_spi_add_onboard_devs_gen2();
-
-end:
-	i2c_put_adapter(i2c_adap);
-	return ret;
-}
-
-static int intel_quark_galileo_gen2_exit(void)
-{
-	return 0;
-}
-
-static struct intel_quark_platform_struct intel_quark_platform_arrays[] = {
-	{
-		.pdevice = &bsp_data[0],
-		.init = intel_quark_galileo_gen1_init,
-		.exit = intel_quark_galileo_gen1_exit,
-	},
-	{
-		.pdevice = &bsp_data[1],
-		.init = intel_quark_galileo_gen2_init,
-		.exit = intel_quark_galileo_gen2_exit,
-	},
-	{
-		/* terminator */
-	},
-};
-
-static int intel_quark_galileo_probe(struct platform_device *pdev)
-{
-	const char *bios_version = dmi_get_system_info(DMI_BIOS_VERSION);
-	const char *board_name = dmi_get_system_info(DMI_BOARD_NAME);
-	int ret = 0;
-	u32 i;
-
-	/* BIOS later than version 0.9.0 contains the right DMI data */
-	for (i = 0; board_name != NULL && bios_version != NULL &&
-	     i < sizeof(intel_quark_platform_arrays)/sizeof(struct intel_quark_platform_struct); i++) {
-		if (!strcmp(intel_quark_platform_arrays[i].pdevice->name, board_name)) {
-			quark_platform = &intel_quark_platform_arrays[i];
-			break;
-		}
-	}
-
-	if (quark_platform != NULL)
-		ret = quark_platform->init();
-
-	return ret;
-}
-
-static int intel_quark_galileo_remove(struct platform_device *pdev)
-{
-	if (quark_platform != NULL)
-		quark_platform->exit();
-
 	return 0;
 }
 
@@ -665,8 +340,8 @@ static struct platform_driver quark_galileo_platform_driver = {
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
 	},
-	.probe		= intel_quark_galileo_probe,
-	.remove		= intel_quark_galileo_remove,
+	.probe		= intel_quark_galileo_gen1_init,
+	.remove		= intel_quark_galileo_gen1_exit,
 };
 module_platform_driver(quark_galileo_platform_driver);
 
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c
new file mode 100644
index 0000000..5aa0ce3
--- /dev/null
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c
@@ -0,0 +1,359 @@
+/*
+ * Copyright(c) 2013 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+/*
+ * Intel Quark Legacy Platform Data accessor layer
+ *
+ * Simple Legacy SPI flash access layer
+ *
+ * Author : Bryan O'Donoghue <bryan.odonoghue@linux.intel.com> 2013
+ */
+
+#include <linux/dmi.h>
+#include <linux/errno.h>
+#include <linux/ioport.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/printk.h>
+
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/platform_data/at24.h>
+#include <linux/io.h>
+#include <linux/mfd/cy8c9540a.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mtd/physmap.h>
+#include <linux/spi/pxa2xx_spi.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/flash.h>
+
+/******************************************************************************
+ *                        Intel Galileo Gen2
+ ******************************************************************************/
+
+#define DRIVER_NAME "GalileoGen2"
+
+#define GPIO_PCAL9555A_EXP2_INT		9
+
+static int gpio_cs;
+
+module_param(gpio_cs, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(gpio_cs, "Enable GPIO chip-select for SPI channel 1");
+
+/******************************************************************************
+ *             Texas Instruments ADC1x8S102 SPI Device Platform Data
+ ******************************************************************************/
+#include "linux/platform_data/adc1x8s102.h"
+
+/* Maximum input voltage allowed for each ADC input, in milliVolts */
+#define ADC1x8S102_MAX_EXT_VIN 5000
+
+static const struct adc1x8s102_platform_data adc1x8s102_platform_data = {
+	.ext_vin = ADC1x8S102_MAX_EXT_VIN
+};
+
+#include "linux/platform_data/pca953x.h"
+#define PCAL9555A_GPIO_BASE_OFFSET 16
+
+static struct pca953x_platform_data pcal9555a_platform_data_exp0 = {
+	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET,
+	.irq_base = -1,
+};
+
+static struct pca953x_platform_data pcal9555a_platform_data_exp1 = {
+	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET + 16,
+	.irq_base = -1,
+};
+
+static struct pca953x_platform_data pcal9555a_platform_data_exp2 = {
+	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET + 32,
+};
+
+#include "linux/platform_data/pca9685.h"
+
+static struct pca9685_pdata pca9685_platform_data = {
+	.chan_mapping = {
+		PWM_CH_GPIO, PWM_CH_PWM,
+		PWM_CH_GPIO, PWM_CH_PWM,
+		PWM_CH_GPIO, PWM_CH_PWM,
+		PWM_CH_GPIO, PWM_CH_PWM,
+		PWM_CH_GPIO, PWM_CH_PWM,
+		PWM_CH_GPIO, PWM_CH_PWM,
+		PWM_CH_GPIO, PWM_CH_GPIO,
+		PWM_CH_GPIO, PWM_CH_GPIO,
+		PWM_CH_DISABLED /* ALL_LED disabled */
+	},
+	.gpio_base = PCAL9555A_GPIO_BASE_OFFSET + 48,
+};
+
+/******************************************************************************
+ *                        Intel Galileo Gen2 i2c clients
+ ******************************************************************************/
+#define EEPROM_ADDR				0x54
+#define PCAL9555A_EXP0_ADDR			0x25
+#define PCAL9555A_EXP1_ADDR			0x26
+#define PCAL9555A_EXP2_ADDR			0x27
+#define PCA9685_ADDR				0x47
+
+static struct i2c_board_info probed_i2c_eeprom;
+static struct i2c_board_info probed_i2c_pcal9555a_exp0 = {
+	.platform_data = &pcal9555a_platform_data_exp0,
+};
+static struct i2c_board_info probed_i2c_pcal9555a_exp1 = {
+	.platform_data = &pcal9555a_platform_data_exp1,
+};
+static struct i2c_board_info probed_i2c_pcal9555a_exp2 = {
+	.platform_data = &pcal9555a_platform_data_exp2,
+};
+static struct i2c_board_info probed_i2c_pca9685 = {
+	.platform_data = &pca9685_platform_data,
+};
+
+static const unsigned short eeprom_i2c_addr_gen2[] = {
+	EEPROM_ADDR, I2C_CLIENT_END
+};
+static const unsigned short pcal9555a_exp0_i2c_addr[] = {
+	PCAL9555A_EXP0_ADDR, I2C_CLIENT_END
+};
+static const unsigned short pcal9555a_exp1_i2c_addr[] = {
+	PCAL9555A_EXP1_ADDR, I2C_CLIENT_END
+};
+static const unsigned short pcal9555a_exp2_i2c_addr[] = {
+	PCAL9555A_EXP2_ADDR, I2C_CLIENT_END
+};
+static const unsigned short pca9685_i2c_addr[] = {
+	PCA9685_ADDR, I2C_CLIENT_END
+};
+
+static int i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	/* Always return success: the I2C clients are already known.  */
+	return 1;
+}
+
+/******************************************************************************
+ *                 Intel Quark SPI Controller Data
+ ******************************************************************************/
+static struct pxa2xx_spi_chip qrk_ffrd_spi_0_cs_0 = {
+	.gpio_cs = 8,
+};
+
+static struct pxa2xx_spi_chip qrk_ffrd_spi_1_cs_0 = {
+	.gpio_cs = 10,
+};
+
+#define LPC_SCH_SPI_BUS_ID 0x03
+
+/* TODO: extract this data from layout.conf encoded in flash */
+struct mtd_partition galileo_gen2_ilb_partitions[] = {
+	{
+		.name		= "grub",
+		.size		= 4096,
+		.offset		= 0,
+	},
+	{
+		.name		= "grub.conf",
+		.size		= 0xA00,
+		.offset		= 0x50500,
+	},
+	{
+		.name		= "layout.conf",
+		.size		= 4096,
+		.offset		= 0x708000,
+	},
+	{
+		.name		= "sketch",
+		.size		= 0x40000,
+		.offset		= 0x750000,
+	},
+	{
+		.name		= "raw",
+		.size		= 8192000,
+		.offset		= 0,
+
+	},
+};
+
+static struct flash_platform_data ilb_flash = {
+	.type = "s25fl064k",
+	.parts = galileo_gen2_ilb_partitions,
+	.nr_parts = ARRAY_SIZE(galileo_gen2_ilb_partitions),
+};
+
+static struct spi_board_info spi0_onboard_devs_gen2[] = {
+	{
+		.modalias = "m25p80",
+		.platform_data = &ilb_flash,
+		.bus_num = LPC_SCH_SPI_BUS_ID,
+		.chip_select = 0,
+	},
+	{
+		.modalias = "adc1x8s102",
+		.max_speed_hz = 16667000,
+		.platform_data = &adc1x8s102_platform_data,
+		.mode = SPI_MODE_3,
+		.bus_num = 0,
+		.chip_select = 0,
+		.controller_data = &qrk_ffrd_spi_0_cs_0,
+	},
+};
+
+static struct spi_board_info spi1_onboard_devs_gpiocs_gen2[] = {
+	{
+		.modalias = "spidev",
+		.chip_select = 0,
+		.controller_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.controller_data = &qrk_ffrd_spi_1_cs_0,
+	},
+};
+
+static struct spi_board_info spi1_onboard_devs_gen2[] = {
+	{
+		.modalias = "spidev",
+		.chip_select = 0,
+		.controller_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+	},
+};
+
+/**
+ * intel_qrk_spi_add_onboard_devs
+ *
+ * @return 0 on success or standard errnos on failure
+ *
+ * Registers onboard SPI device(s) present on the Izmir platform
+ */
+static int intel_qrk_spi_add_onboard_devs_gen2(void)
+{
+	int ret = 0;
+
+	ret = spi_register_board_info(spi0_onboard_devs_gen2,
+				      ARRAY_SIZE(spi0_onboard_devs_gen2));
+	if (ret)
+		return ret;
+
+	if (gpio_cs)
+		return spi_register_board_info(spi1_onboard_devs_gpiocs_gen2,
+					ARRAY_SIZE(spi1_onboard_devs_gpiocs_gen2));
+	else
+		return spi_register_board_info(spi1_onboard_devs_gen2,
+					ARRAY_SIZE(spi1_onboard_devs_gen2));
+}
+
+static struct gpio reserved_gpios_gen2[] = {
+	{
+		GPIO_PCAL9555A_EXP2_INT,
+		GPIOF_IN,
+		"pcal9555a-exp2-int",
+	},
+};
+
+static int intel_quark_galileo_gen2_init(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct i2c_adapter *i2c_adap = NULL;
+	struct i2c_client *client = NULL;
+
+	/* Need to tell the PCA953X driver which GPIO IRQ to use for signalling
+	 * interrupts.  We can't get the IRQ until the GPIO driver is loaded.
+	 * Hence, we defer registration of the I2C devices until now
+	 */
+	i2c_adap = i2c_get_adapter(0);
+	if (NULL == i2c_adap) {
+		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
+			__func__);
+		return -EPROBE_DEFER;
+	}
+
+	ret = gpio_request_array(reserved_gpios_gen2, ARRAY_SIZE(reserved_gpios_gen2));
+	if (ret) {
+			pr_info("%s: gpio_request_array failure. Deferring..\n",
+				__func__);
+			ret = -EPROBE_DEFER;
+		goto end;
+	}
+
+	strlcpy(probed_i2c_eeprom.type, "24c08", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_eeprom,
+				       eeprom_i2c_addr_gen2, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe 24c08 I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+	strlcpy(probed_i2c_pcal9555a_exp0.type, "pcal9555a", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcal9555a_exp0,
+				       pcal9555a_exp0_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe pcal9555a I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+	strlcpy(probed_i2c_pcal9555a_exp1.type, "pcal9555a", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcal9555a_exp1,
+				       pcal9555a_exp1_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe pcal9555a I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+	strlcpy(probed_i2c_pcal9555a_exp2.type, "pcal9555a", I2C_NAME_SIZE);
+	probed_i2c_pcal9555a_exp2.irq = gpio_to_irq(GPIO_PCAL9555A_EXP2_INT);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcal9555a_exp2,
+				       pcal9555a_exp2_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe pcal9555a I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+	strlcpy(probed_i2c_pca9685.type, "pca9685", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pca9685,
+				       pca9685_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe pca9685 I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+	ret = intel_qrk_spi_add_onboard_devs_gen2();
+
+end:
+	i2c_put_adapter(i2c_adap);
+	return ret;
+}
+
+static int intel_quark_galileo_gen2_exit(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver quark_galileo_platform_driver = {
+	.driver		= {
+		.name	= DRIVER_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_quark_galileo_gen2_init,
+	.remove		= intel_quark_galileo_gen2_exit,
+};
+module_platform_driver(quark_galileo_platform_driver);
+
+MODULE_AUTHOR("Bryan O'Donoghue <bryan.odonoghue@intel.com>");
+MODULE_DESCRIPTION("Intel Quark SPI Data API");
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_ALIAS("platform:"DRIVER_NAME);
-- 
1.7.5.4

