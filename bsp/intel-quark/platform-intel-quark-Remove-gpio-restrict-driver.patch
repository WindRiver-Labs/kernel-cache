From 7314a15f4a77f949050a74f1d136a56d3e642570 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Wed, 29 Apr 2015 17:37:10 +0800
Subject: [PATCH 25/42] platform: intel-quark: Remove gpio restrict driver

This patch is to remove the gpio restrict driver and uses DEFERRED_PROBE
instead.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: I123bf4567ba1e2a666608362721aa6a48abe0ad3
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4754
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 .../intel_quark_platform_clanton_peak.c            |   63 +---------
 .../intel-quark/intel_quark_platform_cross_hill.c  |  124 ++++---------------
 .../intel-quark/intel_quark_platform_kips_bay.c    |   18 +---
 3 files changed, 34 insertions(+), 171 deletions(-)

diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c
index 44ad102..cfdd819 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c
@@ -46,9 +46,6 @@
 #define SPI1_CS2_GPIO				14
 #define SPI1_CS3_GPIO				15
 
-static int nc_gpio_reg = 0;
-static int sc_gpio_reg = 0;
-
 static int spi_eight_dev = 0;
 module_param(spi_eight_dev, int, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(spi_eight_dev,
@@ -224,71 +221,23 @@ err:
 	return ret;
 }
 
-static int intel_qrk_gpio_restrict_probe_nc(struct platform_device *pdev)
-{
-	int ret = 0;
-	nc_gpio_reg = 1;
-
-	if (spi_eight_dev) {
-		if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
-			ret = intel_qrk_spi_add_onboard_eight_devs();
-		}
-	} else if (spi_bbang) {
-		ret = register_bitbanged_spi(1);
-	}
-	return ret;
-}
-
-static int intel_qrk_gpio_restrict_probe_sc(struct platform_device *pdev)
+static int intel_qrk_plat_clanton_peak_probe(struct platform_device *pdev)
 {
 	int ret = 0;
-	sc_gpio_reg = 1;
 
 	if (spi_eight_dev) {
-		if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
-			ret = intel_qrk_spi_add_onboard_eight_devs();
-		}
+		ret = intel_qrk_spi_add_onboard_eight_devs();
+		if (ret)
+			goto end;
 	} else if (spi_bbang) {
 		ret = register_bitbanged_spi(0);
 	}
-	return ret;
-}
-
-static struct platform_driver gpio_restrict_pdriver_nc = {
-	.driver		= {
-		.name	= GPIO_RESTRICT_NAME_NC,
-		.owner	= THIS_MODULE,
-	},
-	.probe		= intel_qrk_gpio_restrict_probe_nc,
-};
-
-static struct platform_driver gpio_restrict_pdriver_sc = {
-	.driver		= {
-		.name	= GPIO_RESTRICT_NAME_SC,
-		.owner	= THIS_MODULE,
-	},
-	.probe		= intel_qrk_gpio_restrict_probe_sc,
-};
-
-static int intel_qrk_plat_clanton_peak_probe(struct platform_device *pdev)
-{
-	int ret = 0;
-
-	ret = platform_driver_register(&gpio_restrict_pdriver_nc);
-	if (ret) {
-		pr_err("%s: couldn't register %s platform driver\n",
-		       __func__, gpio_restrict_pdriver_nc.driver.name);
-	}
-
-	ret = platform_driver_register(&gpio_restrict_pdriver_sc);
-	if (ret) {
-		pr_err("%s: couldn't register %s platform driver\n",
-		       __func__, gpio_restrict_pdriver_sc.driver.name);
-	}
 
 	if (0 == spi_eight_dev) {
 		ret = intel_qrk_spi_add_onboard_devs();
 	}
+
+end:
 	return ret;
 }
 
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c b/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c
index a031857..f58f747 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c
@@ -17,8 +17,6 @@
 #include <linux/platform_data/tpm_i2c_infenion.h>
 
 #define DRIVER_NAME		"CrossHill"
-#define GPIO_RESTRICT_NAME_NC	"qrk-gpio-restrict-nc"
-#define GPIO_RESTRICT_NAME_SC	"qrk-gpio-restrict-sc"
 
 /*
  * GPIO numbers to use for reading 4-bit Blackburn Peak SPI daughterboard ID
@@ -34,10 +32,6 @@
  */
 #define GPIO_78M6610_INT	2
 
-static int nc_gpio_reg;
-static int sc_gpio_reg;
-
-static int cross_hill_probe;
 /*
  * GPIOs used as interrupts by MAX78M6610+LMU eADC
  *
@@ -51,7 +45,6 @@ static struct gpio crh_eadc_int_gpios[] = {
 	},
 };
 
-
 /*
  * Blackburn Peak SPI daughterboard ID values
  */
@@ -186,9 +179,9 @@ static int intel_qrk_slb9645tt_probe(void)
 
 	ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
 	if (ret) {
-		pr_err("%s: unable to reserve the GPIOs for slb9645tt\n",
+		pr_err("%s: unable to reserve the GPIOs for slb9645tt, Deferring..\n",
 			__func__);
-		return ret;
+		return -EPROBE_DEFER;
 	}
 
 	probed_slb9645tt.irq = gpio_to_irq(GPIO_SLB9645TT_INT);
@@ -290,8 +283,9 @@ static int intel_qrk_spi_get_bpeak_id(u8 *bpeak_id)
 	ret = gpio_request_array(spi_bpeak_id_gpios,
 			ARRAY_SIZE(spi_bpeak_id_gpios));
 	if (ret) {
-		pr_err("%s: Failed to allocate Blackburn Peak ID GPIO pins\n",
-				__func__);
+		pr_info("%s: Failed to allocate Blackburn Peak ID GPIO pins. Deferring...\n",
+			__func__);
+		ret = -EPROBE_DEFER;
 		return ret;
 	}
 
@@ -324,8 +318,8 @@ static int intel_qrk_spi_add_bpeak_devs(void)
 
 	ret = intel_qrk_spi_get_bpeak_id(&spi_bpeak_id);
 	if (ret) {
-		pr_err("%s: failed to obtain Blackburn Peak ID\n",
-				__func__);
+		pr_info("%s: failed to obtain Blackburn Peak ID. Deferring...\n",
+			__func__);
 		return ret;
 	}
 
@@ -339,14 +333,15 @@ static int intel_qrk_spi_add_bpeak_devs(void)
 			ret = gpio_request_array(crh_eadc_int_gpios,
 					ARRAY_SIZE(crh_eadc_int_gpios));
 			if (ret) {
-				pr_err("%s: Failed to allocate eADC interrupt GPIO pins!\n",
-						__func__);
+				pr_info("%s: Failed to allocate eADC interrupt GPIO pins! Deferring...\n",
+					__func__);
+				ret = -EPROBE_DEFER;
 				return ret;
 			}
 			ret = gpio_to_irq(GPIO_78M6610_INT);
 			if (ret < 0) {
 				pr_err("%s: Failed to request IRQ for GPIO %u!\n",
-						__func__, GPIO_78M6610_INT);
+					__func__, GPIO_78M6610_INT);
 				goto error_gpio_free;
 			}
 			spi_energy_adc_devs[0].irq = ret;
@@ -386,95 +381,28 @@ error_gpio_free:
 	return ret;
 }
 
-/** intel_qrk_spi_devs_addon
- *
- * addon spi device when gpio support in place
- */
-static int intel_qrk_spi_devs_addon(void)
+static int intel_qrk_plat_cross_hill_probe(struct platform_device *pdev)
 {
 	int ret = 0;
+	static int spi_done;
 
-	if (cross_hill_probe != 1) {
-
-		ret = intel_qrk_spi_add_onboard_devs();
-		if (ret)
-			return ret;
-
-		ret = intel_qrk_spi_add_bpeak_devs();
-
-		cross_hill_probe = 1;
-	}
-
-	return ret;
-}
-
-/**
- * intel_qrk_gpio_restrict_probe_nc
- *
- * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
- * GPIOs are never released nor accessed by this driver.
- */
-static int intel_qrk_gpio_restrict_probe_nc(struct platform_device *pdev)
-{
-	int ret;
-	nc_gpio_reg = 1;
-
-	if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
-		ret = intel_qrk_spi_devs_addon();
-		if (ret)
-			return ret;
-
-		return intel_qrk_slb9645tt_probe();
-	}
-	return 0;
-}
-
-/**
- * intel_qrk_gpio_restrict_probe_sc
- *
- * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
- * GPIOs are never released nor accessed by this driver.
- */
-static int intel_qrk_gpio_restrict_probe_sc(struct platform_device *pdev)
-{
-	int ret;
-	sc_gpio_reg = 1;
+	if (spi_done)
+		goto bpeak_devs;
 
-	if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
-		ret = intel_qrk_spi_devs_addon();
-		if (ret)
-			return ret;
-
-		return intel_qrk_slb9645tt_probe();
-	}
-	return 0;
-}
-
-static struct platform_driver gpio_restrict_pdriver_nc = {
-	.driver		= {
-		.name	= GPIO_RESTRICT_NAME_NC,
-		.owner	= THIS_MODULE,
-	},
-	.probe		= intel_qrk_gpio_restrict_probe_nc,
-};
-
-static struct platform_driver gpio_restrict_pdriver_sc = {
-	.driver		= {
-		.name	= GPIO_RESTRICT_NAME_SC,
-		.owner	= THIS_MODULE,
-	},
-	.probe		= intel_qrk_gpio_restrict_probe_sc,
-};
-
-static int intel_qrk_plat_cross_hill_probe(struct platform_device *pdev)
-{
-	int ret;
+	ret = intel_qrk_spi_add_onboard_devs();
+	if (ret)
+		goto end;
+ 
+	spi_done = 1;
 
-	ret = platform_driver_register(&gpio_restrict_pdriver_nc);
+bpeak_devs:
+	ret = intel_qrk_spi_add_bpeak_devs();
 	if (ret)
-		return ret;
+		goto end;
 
-	return platform_driver_register(&gpio_restrict_pdriver_sc);
+	ret = intel_qrk_slb9645tt_probe();
+end:
+	return ret;
 }
 
 static int intel_qrk_plat_cross_hill_remove(struct platform_device *pdev)
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c b/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c
index 34618f8..37e4204 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c
@@ -112,29 +112,15 @@ static int intel_qrk_spi_add_onboard_devs(void)
 					ARRAY_SIZE(spi1_onboard_devs));
 }
 
-
 /**
- * intel_qrk_gpio_restrict_probe
+ * intel_qrk_plat_kips_bay_probe
  *
  * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
  * GPIOs are never released nor accessed by this driver.
  */
-static int intel_qrk_gpio_restrict_probe(struct platform_device *pdev)
-{
-	return intel_qrk_spi_add_onboard_devs();
-}
-
-static struct platform_driver gpio_restrict_pdriver = {
-	.driver		= {
-		.name	= GPIO_RESTRICT_NAME,
-		.owner	= THIS_MODULE,
-	},
-	.probe		= intel_qrk_gpio_restrict_probe,
-};
-
 static int intel_qrk_plat_kips_bay_probe(struct platform_device *pdev)
 {
-	return platform_driver_register(&gpio_restrict_pdriver);
+	return intel_qrk_spi_add_onboard_devs();
 }
 
 static int intel_qrk_plat_kips_bay_remove(struct platform_device *pdev)
-- 
1.7.5.4

