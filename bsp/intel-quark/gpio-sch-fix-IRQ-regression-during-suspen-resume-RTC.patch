From 55aae27569a9a291cac32c4a678721e39d827166 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Thu, 14 May 2015 15:47:24 +0800
Subject: [PATCH 05/65] gpio-sch: fix IRQ regression during suspen/resume -
 RTC #98435 #96479

This patch is ported from BSP R1.1 to do the following:

Commit a0b747 fixed a bug in the gpio-sch's irq_disable routine but
introduced a regression as the corollary logic wasn't implemented
in irq_enable.
This regression caused the gpio driver not to trigger interrupts
on previously set up lines after irq_disable/irq_enable.  Which
also affects resuming from S3 power state as the power management
subsystem calls directly into the two callbacks.
This patch adds the missing logic, which consists in restoring the
interrupt trigger registers during irq_enable.

Original author is Josef Ahmad <josef.ahmad@intel.com>

The patch is modified for the consolidated core and resume banks.
Interrupt trigger enable status was combined into single variable
under sch_gpio_context structure.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: I311b66f7851b0d3aadd85d47489d27880a7b6e2c
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4993
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |   24 ++++++++++++++++++------
 1 files changed, 18 insertions(+), 6 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index dfd37f8..87df3b9 100644
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -53,12 +53,9 @@ struct sch_gpio_context {
 	u32 cglvl;
 	u32 cgsmi;
 	u32 cgnmien;
-	/* Core well interrupt trigger enable */
-	u32 cgtpe;
-	u32 cgtne;
-	/* Resume well interrupt trigger enable */
-	u32 rgtpe;
-	u32 rgtne;
+	/* Well interrupt trigger enable */
+	u32 gtpe;
+	u32 gtne;
 };
 
 struct sch_gpio {
@@ -198,12 +195,20 @@ static struct gpio_chip sch_gpio_chip = {
 static void sch_gpio_irq_enable(struct irq_data *d)
 {
 	struct sch_gpio *sch = container_of(d, struct sch_gpio, data);
+	struct sch_gpio_context *regs = &sch->context;
 	u32 gpio_num;
 	unsigned long flags;
 
 	gpio_num = d->irq - sch->irq_base;
+
 	spin_lock_irqsave(&sch->lock, flags);
+
+	if(regs->gtpe & BIT(gpio_num))
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 1);
+	if(regs->gtne & BIT(gpio_num))
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 1);
 	sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 1);
+
 	spin_unlock_irqrestore(&sch->lock, flags);
 }
 
@@ -240,6 +245,7 @@ static void sch_gpio_irq_ack(struct irq_data *d)
 static int sch_gpio_irq_type(struct irq_data *d, unsigned type)
 {
 	struct sch_gpio *sch = container_of(d, struct sch_gpio, data);
+	struct sch_gpio_context *regs = &sch->context;
 	unsigned long flags;
 	u32 gpio_num;
 
@@ -273,6 +279,12 @@ static int sch_gpio_irq_type(struct irq_data *d, unsigned type)
 		return -EINVAL;
 	}
 
+	/* cache trigger setup */
+	regs->gtpe &= ~BIT(gpio_num);
+	regs->gtne &= ~BIT(gpio_num);
+	regs->gtpe |= inl(sch->iobase + GTPE);
+	regs->gtne |= inl(sch->iobase + GTNE);
+
 	spin_unlock_irqrestore(&sch->lock, flags);
 
 	return 0;
-- 
1.7.5.4

