From 73a478842cfe9fb23c9a3a35f119af3d5ae46e71 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Tue, 21 Jul 2015 13:45:03 +0800
Subject: [PATCH 2/8] mfd: intel_qrk_gip: code refactoring

This patch is to complete the follow:
- relocate the intel_qrk_gip.h header to include directory
- add the template for the license statements
- remove the unused module parameters for intel_qrk_gip_gpio
- update the module license to GPL
- streamline the ngpio and gpio_irqbase

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: I6f996e65439abe083e83cabc0383623c2e82a19e
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5921
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/mfd/intel_qrk_gip.h       |   97 -------------------------------------
 drivers/mfd/intel_qrk_gip_core.c  |   24 ++++-----
 drivers/mfd/intel_qrk_gip_gpio.c  |   60 ++++++++---------------
 drivers/mfd/intel_qrk_gip_i2c.c   |   16 +-----
 include/linux/mfd/intel_qrk_gip.h |   97 +++++++++++++++++++++++++++++++++++++
 5 files changed, 131 insertions(+), 163 deletions(-)
 delete mode 100644 drivers/mfd/intel_qrk_gip.h
 create mode 100644 include/linux/mfd/intel_qrk_gip.h

diff --git a/drivers/mfd/intel_qrk_gip.h b/drivers/mfd/intel_qrk_gip.h
deleted file mode 100644
index 0b40638..0000000
--- a/drivers/mfd/intel_qrk_gip.h
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Copyright(c) 2013-2015 Intel Corporation.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- */
-/*
- * Intel Quark GIP (GPIO/I2C) driver
- */
-
-#ifndef __INTEL_QRKGIP_H__
-#define __INTEL_QRKGIP_H__
-
-#include <linux/i2c.h>
-#include <linux/mfd/intel_qrk_gip_pdata.h>
-#include <linux/pci.h>
-#include "../i2c/busses/i2c-designware-core.h"
-
-/* PCI BAR for register base address */
-#define GIP_I2C_BAR		0
-#define GIP_GPIO_BAR		1
-
-/**
- * intel_qrk_gpio_probe
- *
- * @param pdev: Pointer to GIP PCI device
- * @return 0 success < 0 failure
- *
- * Perform GPIO-specific probing on behalf of the top-level GIP driver.
- */
-int intel_qrk_gpio_probe(struct pci_dev *pdev);
-
-/**
- * intel_qrk_gpio_remove
- *
- * @param pdev: Pointer to GIP PCI device
- *
- * Perform GPIO-specific resource release on behalf of the top-level GIP driver.
- */
-void intel_qrk_gpio_remove(struct pci_dev *pdev);
-
-/**
- * intel_qrk_gpio_isr
- *
- * @param irq: IRQ number to be served
- * @param dev_id: used to distinguish the device (for shared interrupts)
- *
- * Perform GPIO-specific ISR of the top-level GIP driver.
- */
-irqreturn_t intel_qrk_gpio_isr(int irq, void *dev_id);
-
-/**
- * intel_qrk_gpio_save_state
- *
- * Save GPIO register state for system-wide suspend events and mask out
- * interrupts.
- */
-void intel_qrk_gpio_save_state(void);
-
-/**
- * intel_qrk_gpio_restore_state
- *
- * Restore GPIO register state for system-wide resume events and clear out
- * spurious interrupts.
- */
-void intel_qrk_gpio_restore_state(void);
-
-/**
- * intel_qrk_i2c_probe
- * @param pdev: Pointer to GIP PCI device
- * @param drvdata: private driver data
- * @param drvdata: GIP platform-specific settings
- * @return 0 success < 0 failure
- *
- * Perform I2C-specific probing on behalf of the top-level GIP driver.
- */
-int intel_qrk_i2c_probe(struct pci_dev *pdev,
-			struct dw_i2c_dev **drvdata,
-			struct intel_qrk_gip_pdata *pdata);
-
-/**
- * intel_qrk_i2c_remove
- * @param pdev: Pointer to GIP PCI device
- * @param dev: Pointer to I2C private data
- *
- * Perform I2C-specific resource release on behalf of the top-level GIP driver.
- */
-void intel_qrk_i2c_remove(struct pci_dev *pdev,
-	struct dw_i2c_dev *dev);
-
-#endif /* __INTEL_QRKGIP_H__ */
diff --git a/drivers/mfd/intel_qrk_gip_core.c b/drivers/mfd/intel_qrk_gip_core.c
index 08644a0..b1557be 100644
--- a/drivers/mfd/intel_qrk_gip_core.c
+++ b/drivers/mfd/intel_qrk_gip_core.c
@@ -31,18 +31,18 @@
 #include <linux/mfd/intel_qrk_gip_pdata.h>
 #include <linux/module.h>
 #include <linux/pci.h>
-#include "intel_qrk_gip.h"
+#include <linux/mfd/intel_qrk_gip.h>
 
 static unsigned int enable_msi = 1;
-module_param(enable_msi, uint, S_IRUGO | S_IWUSR);
+module_param(enable_msi, uint, S_IRUGO);
 MODULE_PARM_DESC(enable_msi, "Enable PCI MSI mode");
 
 static unsigned int i2c = 1;
-module_param(i2c, uint, S_IRUGO | S_IWUSR);
+module_param(i2c, uint, S_IRUGO);
 MODULE_PARM_DESC(i2c, "Register I2C adapter");
 
 static unsigned int gpio = 1;
-module_param(gpio, uint, S_IRUGO | S_IWUSR);
+module_param(gpio, uint, S_IRUGO);
 MODULE_PARM_DESC(gpio, "Register GPIO chip");
 
 /* GIP private data, supporting only a single instance of the device. */
@@ -69,15 +69,14 @@ static irqreturn_t intel_qrk_gip_handler(int irq, void *dev_id)
 
 	mask_pvm(data->pci_device);
 
+	if (likely(gpio))
+		ret_gpio = intel_qrk_gpio_isr(irq, NULL);
+
 	if (likely(i2c)) {
 		/* Only I2C gets platform data */
 		ret_i2c = i2c_dw_isr(irq, data->i2c_drvdata);
 	}
 
-	if (likely(gpio)) {
-		ret_gpio = intel_qrk_gpio_isr(irq, NULL);
-	}
-
 	unmask_pvm(data->pci_device);
 
 	if (likely(IRQ_HANDLED == ret_i2c || IRQ_HANDLED == ret_gpio))
@@ -241,7 +240,7 @@ static int intel_qrk_gip_probe(struct pci_dev *pdev,
 			"intel_qrk_gip", gip_drvdata);
 	if (retval) {
 		dev_err(&pdev->dev, "error requesting IRQ\n");
-		goto err;
+		goto err_release_drvdata;
 	}
 
 	return 0;
@@ -249,7 +248,6 @@ static int intel_qrk_gip_probe(struct pci_dev *pdev,
 err_release_drvdata:
 	pci_set_drvdata(pdev, NULL);
 	kfree(gip_drvdata);
-err:
 	if (enable_msi)
 		pci_disable_msi(pdev);
 err_pciregions_release:
@@ -305,8 +303,8 @@ static struct pci_driver intel_qrk_gip_driver = {
 	.id_table	= intel_qrk_gip_ids,
 	.probe		= intel_qrk_gip_probe,
 	.remove		= intel_qrk_gip_remove,
-	.driver         = {
-		.pm     = &qrk_gip_pm_ops,
+	.driver		= {
+		.pm	= &qrk_gip_pm_ops,
 	},
 };
 
@@ -325,4 +323,4 @@ module_exit(intel_qrk_gip_exit);
 
 MODULE_AUTHOR("Intel Corporation");
 MODULE_DESCRIPTION("Quark GIP driver");
-MODULE_LICENSE("Dual BSD/GPL");
+MODULE_LICENSE("GPL");
diff --git a/drivers/mfd/intel_qrk_gip_gpio.c b/drivers/mfd/intel_qrk_gip_gpio.c
index be08532..886b3d8 100644
--- a/drivers/mfd/intel_qrk_gip_gpio.c
+++ b/drivers/mfd/intel_qrk_gip_gpio.c
@@ -28,7 +28,7 @@
 #include <linux/pci.h>
 #include <linux/platform_device.h>
 #include <linux/uio_driver.h>
-#include "intel_qrk_gip.h"
+#include <linux/mfd/intel_qrk_gip.h>
 
 static void gpio_restrict_release(struct device *dev) {}
 static struct platform_device gpio_restrict_pdev = {
@@ -43,20 +43,12 @@ struct uio_info *info;
 /* The default number of South-Cluster GPIO on Quark. */
 #define INTEL_QRK_GIP_NGPIO		8
 
-/*
- * The default base IRQ for searching and allocating the range of GPIO IRQ
- * descriptors.
- */
-#define INTEL_QRK_GIP_GPIO_IRQBASE	56
-
 /* The GPIO private data. */
 static struct gpio_chip *gc;
 static struct irq_chip_generic *igc;
 static void __iomem *reg_base;
 static spinlock_t lock;
 static int irq_base;
-static unsigned int n_gpio = INTEL_QRK_GIP_NGPIO;
-static unsigned int gpio_irqbase = INTEL_QRK_GIP_GPIO_IRQBASE;
 
 /* Store GPIO context across system-wide suspend/resume transitions */
 static struct gpio_saved_regs {
@@ -82,12 +74,6 @@ static struct gpio_saved_regs {
 #define PORTA_INT_EOI			0x4c	/* Clear interrupt */
 #define PORTA_EXT			0x50	/* External */
 
-module_param(n_gpio, uint, S_IRUGO | S_IWUSR);
-MODULE_PARM_DESC(n_gpio, "Number of GPIO");
-
-module_param(gpio_irqbase, uint, S_IRUGO | S_IWUSR);
-MODULE_PARM_DESC(gpio_irqbase, "Base IRQ for GPIO range");
-
 /**
  * intel_qrk_gpio_get
  * @param chip: Pointer to GPIO chip registered by GPIOLIB
@@ -270,7 +256,8 @@ static int intel_qrk_gpio_irq_type(struct irq_data *d, unsigned type)
 
 	if (type & (IRQ_TYPE_LEVEL_HIGH | IRQ_TYPE_LEVEL_LOW)) {
 		__irq_set_handler_locked(d->irq, handle_level_irq);
-	} else if (type & IRQ_TYPE_EDGE_BOTH) {
+	} else if (0 == ret && type & (IRQ_TYPE_EDGE_FALLING
+		   | IRQ_TYPE_EDGE_RISING)) {
 		__irq_set_handler_locked(d->irq, handle_edge_irq);
 	}
 
@@ -538,13 +525,6 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 		goto err_iounmap;
 	}
 
-	if (n_gpio == 0 || n_gpio > INTEL_QRK_GIP_NGPIO) {
-		dev_err(&pdev->dev, "n_gpio outside range [1,%d]\n",
-			INTEL_QRK_GIP_NGPIO);
-		retval = -EINVAL;
-		goto err_free_gpiochip;
-	}
-
 	gc->label = "intel_qrk_gip_gpio";
 	gc->owner = THIS_MODULE;
 	gc->direction_input = intel_qrk_gpio_direction_input;
@@ -554,7 +534,7 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 	gc->set_debounce = intel_qrk_gpio_set_debounce;
 	gc->to_irq = intel_qrk_gpio_to_irq;
 	gc->base = INTEL_QRK_GIP_GPIO_BASE;
-	gc->ngpio = n_gpio;
+	gc->ngpio = INTEL_QRK_GIP_NGPIO;
 	gc->can_sleep = 0;
 	retval = gpiochip_add(gc);
 	if (retval) {
@@ -568,7 +548,7 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 	 * Allocate a range of IRQ descriptor for the available GPIO.
 	 * IRQs are allocated dynamically.
 	 */
-	irq_base = irq_alloc_descs(-1, gpio_irqbase, n_gpio, NUMA_NO_NODE);
+	irq_base = irq_alloc_descs(-1, 0, gc->ngpio, NUMA_NO_NODE);
 	if (irq_base < 0) {
 		dev_err(&pdev->dev, "failure adding GPIO IRQ descriptors\n");
 		goto err_remove_gpiochip;
@@ -583,7 +563,7 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 			reg_base, handle_simple_irq);
 	if (NULL == igc) {
 		retval = -ENOMEM;
-		goto err_free_irq_descs;
+		goto err_unregister_platform_device;
 	}
 
 	/* UIO */
@@ -596,7 +576,7 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 	info->version = "0.0.1";
 
 	if (uio_register_device(&pdev->dev, info))
-		goto err_free_irq_descs;
+		goto err_unregister_platform_device;
 
 	pr_info("%s UIO addr 0x%08x internal_addr 0x%08x size %lu memtype %d\n",
 		__func__, (unsigned int)info->mem[0].addr,
@@ -609,13 +589,15 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 	igc->chip_types->chip.irq_disable = intel_qrk_gpio_irq_disable;
 	igc->chip_types->chip.irq_ack = intel_qrk_gpio_irq_ack;
 
-	irq_setup_generic_chip(igc, IRQ_MSK(n_gpio), IRQ_GC_INIT_MASK_CACHE,
-			IRQ_NOREQUEST | IRQ_NOPROBE, 0);
+	irq_setup_generic_chip(igc, IRQ_MSK(gc->ngpio), IRQ_GC_INIT_MASK_CACHE,
+			       IRQ_NOREQUEST | IRQ_NOPROBE, 0);
 
 	return 0;
 
+err_unregister_platform_device:
+	platform_device_unregister(&gpio_restrict_pdev);
 err_free_irq_descs:
-	irq_free_descs(irq_base, n_gpio);
+	irq_free_descs(irq_base, gc->ngpio);
 err_remove_gpiochip:
 	if (0 != gpiochip_remove(gc))
 		dev_err(&pdev->dev, "failed removing gpio_chip\n");
@@ -624,8 +606,7 @@ err_free_gpiochip:
 err_iounmap:
 	iounmap(reg_base);
 exit:
-	if (info != NULL)
-		kfree(info);
+	kfree(info);
 	return retval;
 }
 
@@ -648,23 +629,22 @@ void intel_qrk_gpio_remove(struct pci_dev *pdev)
 	}
 
 	/* Tear down IRQ descriptors */
-	irq_remove_generic_chip(igc, IRQ_MSK(n_gpio), 0,
-		IRQ_NOREQUEST | IRQ_NOPROBE);
+	irq_remove_generic_chip(igc, IRQ_MSK(gc->ngpio), 0,
+				IRQ_NOREQUEST | IRQ_NOPROBE);
 	kfree(igc);
-	irq_free_descs(irq_base, n_gpio);
 
 	platform_device_unregister(&gpio_restrict_pdev);
 
+	irq_free_descs(irq_base, gc->ngpio);
+
 	/* Release GPIO chip */
 	if (0 != gpiochip_remove(gc))
 		dev_err(&pdev->dev, "failed removing gpio_chip\n");
 
-
-	if (info != NULL){
-		uio_unregister_device(info);
-		kfree(info);
-	}
+	uio_unregister_device(info);
+	kfree(info);
 
 	kfree(gc);
 	iounmap(reg_base);
+
 }
diff --git a/drivers/mfd/intel_qrk_gip_i2c.c b/drivers/mfd/intel_qrk_gip_i2c.c
index 754bac2..0b0328e 100644
--- a/drivers/mfd/intel_qrk_gip_i2c.c
+++ b/drivers/mfd/intel_qrk_gip_i2c.c
@@ -16,7 +16,7 @@
  *  PCI glue logic for Quark GIP/I2C.
  *  The GIP I2C device is the DesignWare I2C. This file defines the PCI glue
  *  for this driver and is heavily based on
- *  on drivers/i2c/busses/i2c-designware-pcidrv.c.  Also, it relies on
+ *  drivers/i2c/busses/i2c-designware-pcidrv.c.  Also, it relies on
  *  drivers/i2c/busses/i2c-designware-core.c for the core logic.
  *  Please note only a single instance of the I2C device is supported.
  */
@@ -26,11 +26,7 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/pci.h>
-#include "intel_qrk_gip.h"
-
-enum dw_pci_ctl_id_t {
-	quark_0,
-};
+#include <linux/mfd/intel_qrk_gip.h>
 
 /*
  * By default, driver operates in fast mode (400kHz).
@@ -55,12 +51,7 @@ static struct dw_pci_controller qrk_gip_i2c_controller = {
 	.bus_cfg	= INTEL_QRK_STD_CFG | DW_IC_CON_SPEED_FAST,
 	.tx_fifo_depth	= 16,
 	.rx_fifo_depth	= 16,
-	.clk_khz	=
-#ifdef CONFIG_INTEL_QUARK_X1000_SOC_FPGAEMU
-			14000,
-#else
-			33000,
-#endif
+	.clk_khz	= 33000,
 	//.explicit_stop	= 1,
 };
 
@@ -185,7 +176,6 @@ int intel_qrk_i2c_probe(struct pci_dev *pdev,
 	dev->rx_fifo_depth = controller->rx_fifo_depth;
 	//dev->explicit_stop = controller->explicit_stop;
 
-	/* dw_i2c_dev additional parameters in Kernel 3.14 */
 	dev->sda_hold_time	= 0;
 	dev->sda_falling_time	= 300;
 	dev->scl_falling_time	= 300;
diff --git a/include/linux/mfd/intel_qrk_gip.h b/include/linux/mfd/intel_qrk_gip.h
new file mode 100644
index 0000000..bfa0d64
--- /dev/null
+++ b/include/linux/mfd/intel_qrk_gip.h
@@ -0,0 +1,97 @@
+/*
+ * Copyright(c) 2013-2015 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+/*
+ * Intel Quark GIP (GPIO/I2C) driver
+ */
+
+#ifndef __INTEL_QRKGIP_H__
+#define __INTEL_QRKGIP_H__
+
+#include <linux/i2c.h>
+#include <linux/mfd/intel_qrk_gip_pdata.h>
+#include <linux/pci.h>
+#include "../../drivers/i2c/busses/i2c-designware-core.h"
+
+/* PCI BAR for register base address */
+#define GIP_I2C_BAR		0
+#define GIP_GPIO_BAR		1
+
+/**
+ * intel_qrk_gpio_probe
+ *
+ * @param pdev: Pointer to GIP PCI device
+ * @return 0 success < 0 failure
+ *
+ * Perform GPIO-specific probing on behalf of the top-level GIP driver.
+ */
+int intel_qrk_gpio_probe(struct pci_dev *pdev);
+
+/**
+ * intel_qrk_gpio_remove
+ *
+ * @param pdev: Pointer to GIP PCI device
+ *
+ * Perform GPIO-specific resource release on behalf of the top-level GIP driver.
+ */
+void intel_qrk_gpio_remove(struct pci_dev *pdev);
+
+/**
+ * intel_qrk_gpio_isr
+ *
+ * @param irq: IRQ number to be served
+ * @param dev_id: used to distinguish the device (for shared interrupts)
+ *
+ * Perform GPIO-specific ISR of the top-level GIP driver.
+ */
+irqreturn_t intel_qrk_gpio_isr(int irq, void *dev_id);
+
+/**
+ * intel_qrk_gpio_save_state
+ *
+ * Save GPIO register state for system-wide suspend events and mask out
+ * interrupts.
+ */
+void intel_qrk_gpio_save_state(void);
+
+/**
+ * intel_qrk_gpio_restore_state
+ *
+ * Restore GPIO register state for system-wide resume events and clear out
+ * spurious interrupts.
+ */
+void intel_qrk_gpio_restore_state(void);
+
+/**
+ * intel_qrk_i2c_probe
+ * @param pdev: Pointer to GIP PCI device
+ * @param drvdata: private driver data
+ * @param pdata: GIP platform-specific settings
+ * @return 0 success < 0 failure
+ *
+ * Perform I2C-specific probing on behalf of the top-level GIP driver.
+ */
+int intel_qrk_i2c_probe(struct pci_dev *pdev,
+			struct dw_i2c_dev **drvdata,
+			struct intel_qrk_gip_pdata *pdata);
+
+/**
+ * intel_qrk_i2c_remove
+ * @param pdev: Pointer to GIP PCI device
+ * @param dev: Pointer to I2C private data
+ *
+ * Perform I2C-specific resource release on behalf of the top-level GIP driver.
+ */
+void intel_qrk_i2c_remove(struct pci_dev *pdev,
+	struct dw_i2c_dev *dev);
+
+#endif /* __INTEL_QRKGIP_H__ */
-- 
1.7.5.4

