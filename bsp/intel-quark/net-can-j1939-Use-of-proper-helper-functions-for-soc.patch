From d6f160235ca63a0f7661dce2e6a8f04d0e955066 Mon Sep 17 00:00:00 2001
From: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Date: Tue, 14 Apr 2015 13:35:34 +0800
Subject: [PATCH 18/65] net: can: j1939: Use of proper helper functions for
 sock reference assignments and added review comments

This patch uses the helper functions for the proper assignement of
the sock reference to CAN related skb.

Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Signed-off-by: Naveen Kumar <naveen.kumarx.saini@intel.com>
Change-Id: I5b2278227cfb1c82fe2e02c3162438e9459d3758
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4682
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 net/can/j1939/socket.c    |    6 +++---
 net/can/j1939/transport.c |    5 +++--
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/net/can/j1939/socket.c b/net/can/j1939/socket.c
index 299003c..b8973cb 100644
--- a/net/can/j1939/socket.c
+++ b/net/can/j1939/socket.c
@@ -17,7 +17,7 @@
 #include <linux/list.h>
 #include <linux/if_arp.h>
 #include <net/tcp_states.h>
-
+#include <linux/can/skb.h>
 #include <linux/can/core.h>
 #include <linux/can/j1939.h>
 #include "j1939-priv.h"
@@ -186,7 +186,7 @@ static void j1939sk_recv_skb(struct sk_buff *oskb, void *data)
 	if (oskb->sk == &jsk->sk)
 		cb->msg_flags |= MSG_CONFIRM;
 
-	skb->sk = &jsk->sk;
+	can_skb_set_owner(skb, &jsk->sk);
 	if (sock_queue_rcv_skb(&jsk->sk, skb) < 0)
 		kfree_skb(skb);
 }
@@ -795,7 +795,7 @@ static int j1939sk_sendmsg(struct kiocb *iocb, struct socket *sock,
 	if (ret < 0)
 		goto free_skb;
 	skb->dev = dev;
-	skb->sk  = sk;
+	can_skb_set_owner(skb, sk);
 
 	BUILD_BUG_ON(sizeof(skb->cb) < sizeof(*skb_cb));
 
diff --git a/net/can/j1939/transport.c b/net/can/j1939/transport.c
index 9f723c6..0177bf9 100644
--- a/net/can/j1939/transport.c
+++ b/net/can/j1939/transport.c
@@ -14,6 +14,7 @@
 #include <linux/version.h>
 #include <linux/if_arp.h>
 #include <linux/wait.h>
+#include <linux/can/skb.h>
 #include "j1939-priv.h"
 
 #define REGULAR		0
@@ -350,8 +351,8 @@ static int j1939tp_tx_dat(struct session *related,
 	skb->protocol = related->skb->protocol;
 	skb->pkt_type = related->skb->pkt_type;
 	skb->ip_summed = related->skb->ip_summed;
-	skb->sk	= related->skb->sk;
 
+	can_skb_set_owner(skb, related->skb->sk);
 	skb_cb = (void *)skb->cb;
 	*skb_cb = *(related->cb);
 	fix_cb(skb_cb);
@@ -386,7 +387,7 @@ static int j1939xtp_do_tx_ctl(struct sk_buff *related, int extd,
 	skb->protocol = related->protocol;
 	skb->pkt_type = related->pkt_type;
 	skb->ip_summed = related->ip_summed;
-	skb->sk	= related->sk;
+	can_skb_set_owner(skb, related->sk);
 
 	skb_cb = (void *)skb->cb;
 	*skb_cb = *rel_cb;
-- 
1.7.5.4

