From 4a174783eaee01ec484c5160960c8888c7fa6861 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Thu, 14 May 2015 15:13:05 +0800
Subject: [PATCH 04/65] gpio-sch: RTC #96478 Fix NC GPIO kernel panic due to
 lack of register cleanup

This patch is ported from BSP R1.1 to do the following:

The NC GPIO driver does not properly tear down the required registers when
irq_free() are called causing the system to latch an IRQ which does not
exist any longer. The system gets a NULL-pointer dereference when it tries
to run an ISR that doesnt exist causing a kernel panic. The fix clears the
GPE, TPE, TNE and GTS registers for both core and SUS GPIOs when the IRQ is
disabled.

Original author is John Toomey <john.toomey@intel.com>

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: I71acf02d0462cff91d2d2956928ee22e7f411a44
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4992
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |   11 ++++++++---
 1 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index b90eadc..dfd37f8 100644
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -214,10 +214,15 @@ static void sch_gpio_irq_disable(struct irq_data *d)
 	unsigned long flags;
 
 	gpio_num = d->irq - sch->irq_base;
-	spin_lock_irqsave(&sch->lock, flags);
-	if (!test_bit(gpio_num, sch->wake_irqs))
+
+	if (!test_bit(gpio_num, sch->wake_irqs)) {
+		spin_lock_irqsave(&sch->lock, flags);
 		sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 0);
-	spin_unlock_irqrestore(&sch->lock, flags);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTS, 1);
+		spin_unlock_irqrestore(&sch->lock, flags);
+	}
 }
 
 static void sch_gpio_irq_ack(struct irq_data *d)
-- 
1.7.5.4

