From 6a7565f4a43f6038bb92e38e0e3e894c1429318e Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Thu, 11 Jun 2015 10:41:34 +0800
Subject: [PATCH 29/65] gpio: gpio-sch: Fix code formatting and typo error

This patch fixes some of the code formatting as the result
from code review. And this patch fixes the typo that causes
no unlock from spin_lock on irq.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: If79bf88313b373264cab3f65df83f0a116b86f5a
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5248
Reviewed-by: Rafferty, William A <william.a.rafferty@intel.com>
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |   38 ++++++++++++++++++++++++--------------
 1 files changed, 24 insertions(+), 14 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index 1a8f9c0..51c8007 100644
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -43,7 +43,7 @@
 #define CGNMIEN	0x40
 #define RGNMIEN	0x44
 
-/* Maximum number of resume GPIOS supported by this driver */
+/* Maximum number of GPIOS supported by this driver */
 #define MAX_GPIO_IRQS	9
 
 /* Cache register context */
@@ -91,6 +91,7 @@ static unsigned sch_gpio_bit(struct sch_gpio *sch, unsigned gpio)
 {
 	if (gpio >= sch->resume_base)
 		gpio -= sch->resume_base;
+
 	return gpio % 8;
 }
 
@@ -131,10 +132,10 @@ static int sch_gpio_direction_in(struct gpio_chip *gc, unsigned gpio_num)
 	struct sch_gpio *sch = to_sch_gpio(gc);
 	unsigned long flags;
 
-
 	spin_lock_irqsave(&sch->lock, flags);
 	sch_gpio_reg_set(gc, gpio_num, GIO, 1);
 	spin_unlock_irqrestore(&sch->lock, flags);
+
 	return 0;
 }
 
@@ -173,8 +174,10 @@ static int sch_gpio_direction_out(struct gpio_chip *gc, unsigned gpio_num,
 	 * and an external pull-up is connected.
 	 */
 	sch_gpio_set(gc, gpio_num, val);
+
 	return 0;
 }
+
 static int sch_gpio_to_irq(struct gpio_chip *gc, unsigned offset)
 {
 	struct sch_gpio *sch = to_sch_gpio(gc);
@@ -320,6 +323,7 @@ int sch_gpio_resume_irq_set_wake(struct irq_data *d, unsigned int on)
 		set_bit(gpio_num, sch->wake_irqs);
 	else
 		clear_bit(gpio_num, sch->wake_irqs);
+
 end:
 	return ret;
 }
@@ -366,7 +370,7 @@ static void sch_gpio_irq_disable_all(struct sch_gpio *sch, unsigned int num)
 		sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 0);
 		sch_gpio_reg_set(&sch->chip, gpio_num, GSMI, 0);
 
-		if (gpio_num >= 2)
+		if (gpio_num >= sch->resume_base)
 			sch_gpio_reg_set(&sch->chip, gpio_num, RGNMIEN, 0);
 		else
 			sch_gpio_reg_set(&sch->chip, gpio_num, CGNMIEN, 0);
@@ -392,6 +396,7 @@ static inline irqreturn_t do_serve_irq(int reg_status, unsigned int irq_base)
 			ret = IRQ_HANDLED;
 		} while (pending);
 	}
+
 	return ret;
 }
 
@@ -404,7 +409,7 @@ static irqreturn_t sch_gpio_irq_handler(int irq, void *dev_id)
 	 * to access the status of resume bank irq status, we need
 	 * recalculate the irq base for resume bank
 	 */
-	int resume_irq_base =  sch->irq_base + sch->resume_base;
+	int resume_irq_base = sch->irq_base + sch->resume_base;
 
 	ret |= do_serve_irq(sch->iobase + GTS, sch->irq_base);
 	ret |= do_serve_irq(sch->iobase + RGTS, resume_irq_base);
@@ -539,15 +544,14 @@ static int sch_gpio_remove(struct platform_device *pdev)
 	}
 
 	gpiochip_remove(&sch->chip);
+
 	return 0;
 }
 
 /*
- * Disables IRQ line of Legacy GPIO chip so that its state is not controlled
- * by
+ * Disables IRQ line of Legacy GPIO chip so that its state is not controlled by
  * PM framework (disabled before calling suspend_noirq callback and
- * re-enabled
- * after calling resume_noirq callback of devices).
+ * re-enabled after calling resume_noirq callback of devices).
  */
 static int sch_gpio_suspend_sys(struct device *dev)
 {
@@ -555,8 +559,10 @@ static int sch_gpio_suspend_sys(struct device *dev)
 	struct sch_gpio *sch = platform_get_drvdata(pdev);
 
 	disable_irq(sch->irq);
+
 	return 0;
 }
+
 /*
  * Saves the state of configuration registers for Core Well GPIOs.
  * Don't touch Core Well interrupt triggers and SCI/GPE because they are
@@ -569,13 +575,16 @@ static int sch_gpio_suspend_sys_noirq(struct device *dev)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct sch_gpio *sch = platform_get_drvdata(pdev);
 	struct sch_gpio_context *regs = &sch->context;
+
 	regs->cgen	= inl(sch->iobase + GEN);
 	regs->cgio	= inl(sch->iobase + GIO);
 	regs->cglvl	= inl(sch->iobase + GLV);
 	regs->cgsmi	= inl(sch->iobase + GSMI);
 	regs->cgnmien	= inl(sch->iobase + CGNMIEN);
+
 	return 0;
 }
+
 /*
  * Restore the context saved by sch_gpio_suspend_sys_noirq().
  */
@@ -584,22 +593,22 @@ static int sch_gpio_resume_sys_noirq(struct device *dev)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct sch_gpio *sch = platform_get_drvdata(pdev);
 	struct sch_gpio_context *regs = &sch->context;
+
 	outl(regs->cgio, sch->iobase + GIO);
 	outl(regs->cglvl, sch->iobase + GLV);
 	outl(regs->cgsmi, sch->iobase + GSMI);
 	outl(regs->cgnmien, sch->iobase + CGNMIEN);
 	outl(regs->cgen, sch->iobase + GEN);
+
 	return 0;
 }
+
 /*
  * Re-enables the IRQ line of Legacy GPIO chip.
- * Done here instead of dpm_resume_no_irq() PM handler in order to be sure
- * that
+ * Done here instead of pm_resume_no_irq() PM handler in order to be sure that
  * all the system busses (I2C, SPI) are resumed when the IRQ is fired,
- * otherwise
- * a SPI or I2C device might fail to handle its own interrupt because the
- * IRQ
- * handler (bottom half) involves talking to the device.
+ * otherwise a SPI or I2C device might fail to handle its own interrupt because
+ * the IRQ handler (bottom half) involves talking to the device.
  */
 static int sch_gpio_resume_sys(struct device *dev)
 {
@@ -607,6 +616,7 @@ static int sch_gpio_resume_sys(struct device *dev)
 	struct sch_gpio *sch = platform_get_drvdata(pdev);
 
 	enable_irq(sch->irq);
+
 	return 0;
 }
 
-- 
1.7.5.4

