From e895526d8b2a597ddee91d6aa503c208c9df2e52 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Fri, 19 Jun 2015 14:17:44 +0800
Subject: [PATCH 61/65] platform: x86: Restrict probe mechanism for controlled
 probing

This patch is adding the restrict probe mechanism which was available in previous
release. While deferred probing has been enabled in kernel 3.14, but this
functionality is only available to both GPIO and I2C.

SPI on various quark platform has the dependency on GPIO, for its chip select, and the
function spi_match_master_to_boardinfo doesn't handle the EPROBE_DEFER, and if
SPI loads prior to the GPIO, the SPI device will fail to get initialized.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: I780ed64eed3b3e8ee7ac1226b702c2a39b15c3a1
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5382
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c                            |   13 +++
 .../intel_quark_platform_clanton_hill.c            |    4 +-
 .../intel_quark_platform_clanton_peak.c            |   66 +++++++++++--
 .../intel-quark/intel_quark_platform_cross_hill.c  |  107 +++++++++++++++-----
 .../x86/intel-quark/intel_quark_platform_galileo.c |   61 +++++++++---
 .../intel_quark_platform_galileo_gen2.c            |   48 +++++++--
 .../intel-quark/intel_quark_platform_kips_bay.c    |   15 +++-
 7 files changed, 250 insertions(+), 64 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index 2379a96..b6d4673 100755
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -63,6 +63,12 @@ struct sch_gpio_context {
 	DECLARE_BITMAP(gtne_irqs, MAX_GPIO);
 };
 
+static void qrk_gpio_restrict_release(struct device *dev) {}
+static struct platform_device qrk_gpio_restrict_pdev = {
+	.name	= "qrk-gpio-restrict-nc",
+	.dev.release = qrk_gpio_restrict_release,
+};
+
 struct sch_gpio {
 	struct gpio_chip chip;
 	struct sch_gpio_context context;
@@ -541,8 +547,13 @@ static int sch_gpio_probe(struct platform_device *pdev)
 		__func__, (unsigned int)sch->info.port[0].start,
 		sch->info.port[0].size, sch->info.port[0].porttype);
 
+	err = platform_device_register(&qrk_gpio_restrict_pdev);
+	if (err < 0)
+		goto err_sch_gpio_device_register;
+
 	return 0;
 
+err_sch_gpio_device_register:
 err_sch_uio_register:
 err_sch_request_irq:
 	irq_free_descs(sch->irq_base, sch->chip.ngpio);
@@ -563,6 +574,8 @@ static int sch_gpio_remove(struct platform_device *pdev)
 	if (sch->irq_support)
 		irq_free_descs(sch->irq_base, sch->chip.ngpio);
 
+	platform_device_unregister(&qrk_gpio_restrict_pdev);
+
 	ret = gpiochip_remove(&sch->chip);
 
 	return ret;
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
index 66bf25e..b5b3f94 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
@@ -200,7 +200,6 @@ static struct platform_driver gpio_restrict_pdriver = {
 	.probe		= intel_qrk_gpio_restrict_probe,
 };
 
-#if 0
 static int intel_qrk_plat_clanton_hill_probe(struct platform_device *pdev)
 {
 	int ret = 0;
@@ -209,7 +208,6 @@ static int intel_qrk_plat_clanton_hill_probe(struct platform_device *pdev)
 
 	return ret;
 }
-#endif
 
 static int intel_qrk_plat_clanton_hill_remove(struct platform_device *pdev)
 {
@@ -263,7 +261,7 @@ static struct platform_driver qrk_clanton_hill_driver = {
 		.owner	= THIS_MODULE,
 		.pm	= &qrk_clanton_hill_pm,
 	},
-	.probe		= intel_qrk_gpio_restrict_probe,
+	.probe		= intel_qrk_plat_clanton_hill_probe,
 	.remove		= intel_qrk_plat_clanton_hill_remove,
 };
 
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c
index 3848492..2f2f098 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_peak.c
@@ -46,6 +46,9 @@
 #define SPI1_CS2_GPIO				14
 #define SPI1_CS3_GPIO				15
 
+static int nc_gpio_reg;
+static int sc_gpio_reg;
+
 static int spi_eight_dev = 0;
 module_param(spi_eight_dev, int, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(spi_eight_dev,
@@ -221,26 +224,71 @@ err:
 	return ret;
 }
 
-static int intel_qrk_plat_clanton_peak_probe(struct platform_device *pdev)
+static int intel_qrk_gpio_restrict_probe_nc(struct platform_device *pdev)
 {
 	int ret = 0;
+	nc_gpio_reg = 1;
 
 	if (spi_eight_dev) {
-		ret = intel_qrk_spi_add_onboard_eight_devs();
-		if (ret)
-			goto end;
+		if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
+			ret = intel_qrk_spi_add_onboard_eight_devs();
+		}
 	} else if (spi_bbang) {
-		ret = register_bitbanged_spi(0);
-		if (ret)
-			goto end;
 		ret = register_bitbanged_spi(1);
 	}
+	return ret;
+}
+
+static int intel_qrk_gpio_restrict_probe_sc(struct platform_device *pdev)
+{
+	int ret = 0;
+	sc_gpio_reg = 1;
+
+	if (spi_eight_dev) {
+		if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
+			ret = intel_qrk_spi_add_onboard_eight_devs();
+		}
+	} else if (spi_bbang) {
+		ret = register_bitbanged_spi(0);
+	}
+	return ret;
+}
+
+static struct platform_driver gpio_restrict_pdriver_nc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_NC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_nc,
+};
+
+static struct platform_driver gpio_restrict_pdriver_sc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_SC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_sc,
+};
+
+static int intel_qrk_plat_clanton_peak_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	ret = platform_driver_register(&gpio_restrict_pdriver_nc);
+	if (ret) {
+		pr_err("%s: couldn't register %s platform driver\n",
+		       __func__, gpio_restrict_pdriver_nc.driver.name);
+	}
+
+	ret = platform_driver_register(&gpio_restrict_pdriver_sc);
+	if (ret) {
+		pr_err("%s: couldn't register %s platform driver\n",
+		       __func__, gpio_restrict_pdriver_sc.driver.name);
+	}
 
 	if (0 == spi_eight_dev) {
 		ret = intel_qrk_spi_add_onboard_devs();
 	}
-
-end:
 	return ret;
 }
 
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c b/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c
index 3dce53b..1a263e8 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_cross_hill.c
@@ -17,6 +17,8 @@
 #include <linux/platform_data/tpm_i2c_infenion.h>
 
 #define DRIVER_NAME		"CrossHill"
+#define GPIO_RESTRICT_NAME_NC	"qrk-gpio-restrict-nc"
+#define GPIO_RESTRICT_NAME_SC	"qrk-gpio-restrict-sc"
 
 /*
  * GPIO numbers to use for reading 4-bit Blackburn Peak SPI daughterboard ID
@@ -32,6 +34,11 @@
  */
 #define GPIO_78M6610_INT	2
 
+static int nc_gpio_reg;
+static int sc_gpio_reg;
+
+static int cross_hill_probe;
+
 /*
  * GPIOs used as interrupts by MAX78M6610+LMU eADC
  *
@@ -283,9 +290,8 @@ static int intel_qrk_spi_get_bpeak_id(u8 *bpeak_id)
 	ret = gpio_request_array(spi_bpeak_id_gpios,
 			ARRAY_SIZE(spi_bpeak_id_gpios));
 	if (ret) {
-		pr_info("%s: Failed to allocate Blackburn Peak ID GPIO pins. Deferring...\n",
+		pr_info("%s: Failed to allocate Blackburn Peak ID GPIO pins\n",
 			__func__);
-		ret = -EPROBE_DEFER;
 		return ret;
 	}
 
@@ -318,7 +324,7 @@ static int intel_qrk_spi_add_bpeak_devs(void)
 
 	ret = intel_qrk_spi_get_bpeak_id(&spi_bpeak_id);
 	if (ret) {
-		pr_info("%s: failed to obtain Blackburn Peak ID. Deferring...\n",
+		pr_info("%s: failed to obtain Blackburn Peak ID\n",
 			__func__);
 		return ret;
 	}
@@ -333,9 +339,8 @@ static int intel_qrk_spi_add_bpeak_devs(void)
 			ret = gpio_request_array(crh_eadc_int_gpios,
 					ARRAY_SIZE(crh_eadc_int_gpios));
 			if (ret) {
-				pr_info("%s: Failed to allocate eADC interrupt GPIO pins! Deferring...\n",
+				pr_info("%s: Failed to allocate eADC interrupt GPIO pins!\n",
 					__func__);
-				ret = -EPROBE_DEFER;
 				return ret;
 			}
 			ret = gpio_to_irq(GPIO_78M6610_INT);
@@ -381,37 +386,87 @@ error_gpio_free:
 	return ret;
 }
 
-static int intel_qrk_plat_cross_hill_probe(struct platform_device *pdev)
+/** intel_qrk_spi_devs_addon
+ *
+ * addon spi device when gpio support in place
+ */
+static int intel_qrk_spi_devs_addon(void)
 {
 	int ret = 0;
-	static int bpeak_done;
-	static int spi_done;
 
-	if (bpeak_done)
-		goto spi;
+	if (cross_hill_probe != 1) {
+		ret = intel_qrk_spi_add_onboard_devs();
+		if (ret)
+			return ret;
+		ret = intel_qrk_spi_add_bpeak_devs();
+		cross_hill_probe = 1;
+	}
 
-	ret = intel_qrk_spi_add_bpeak_devs();
-	if (ret)
-		goto end;
- 
-	bpeak_done = 1;
+	return ret;
+}
 
-spi:
+/**
+ * intel_qrk_gpio_restrict_probe_nc
+ *
+ * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
+ * GPIOs are never released nor accessed by this driver.
+ */
+static int intel_qrk_gpio_restrict_probe_nc(struct platform_device *pdev)
+{
+	int ret;
+	nc_gpio_reg = 1;
 
-	if (spi_done)
-		goto slb;
+	if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
+		ret = intel_qrk_spi_devs_addon();
+		if (ret)
+			return ret;
+	}
+	return 0;
+}
 
-	ret = intel_qrk_spi_add_onboard_devs();
-	if (ret)
-		goto end;
+/**
+ * intel_qrk_gpio_restrict_probe_sc
+ *
+ * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
+ * GPIOs are never released nor accessed by this driver.
+ */
+static int intel_qrk_gpio_restrict_probe_sc(struct platform_device *pdev)
+{
+	int ret;
+	sc_gpio_reg = 1;
 
-	spi_done = 1;
+	if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
+		ret = intel_qrk_spi_devs_addon();
+		if (ret)
+			return ret;
+	}
+	return 0;
+}
 
-slb:
-	ret = intel_qrk_slb9645tt_probe();
+static struct platform_driver gpio_restrict_pdriver_nc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_NC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_nc,
+};
+static struct platform_driver gpio_restrict_pdriver_sc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_SC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_sc,
+};
 
-end:
-	return ret;
+static int intel_qrk_plat_cross_hill_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	ret = platform_driver_register(&gpio_restrict_pdriver_nc);
+	if (ret)
+		return ret;
+
+	return platform_driver_register(&gpio_restrict_pdriver_sc);
 }
 
 static int intel_qrk_plat_cross_hill_remove(struct platform_device *pdev)
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
index 9358d43..186e5af 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
@@ -38,6 +38,8 @@
 #include <linux/mfd/intel_qrk_gip_pdata.h>
 
 #define DRIVER_NAME "Galileo"
+#define GPIO_RESTRICT_NAME	"qrk-gpio-restrict-sc"
+#define LPC_SCH_SPINAME		"spi-lpc-sch"
 
 /* GPIO line used to detect the LSB of the Cypress i2c address */
 #define GPIO_CYPRESS_A0			7
@@ -283,15 +285,21 @@ static int intel_qrk_spi_add_onboard_devs(void)
 			ARRAY_SIZE(spi_onboard_devs));
 }
 
-static int intel_quark_galileo_gen1_init(struct platform_device *pdev)
+/**
+ * intel_qrk_gpio_restrict_probe
+ *
+ * Register devices that depend on GPIOs.
+ * Note this function makes extensive use of the probe deferral mechanism:
+ * gpio_request() for a GPIO that is not yet available returns
+ * -EPROBE_DEFER.
+ */
+static int intel_qrk_gpio_restrict_probe(struct platform_device *pdev)
 {
 	int ret = 0;
+	struct i2c_client *cypress = NULL, *eeprom = NULL;
 	static int spi_done;
 	static int gpios_done;
 
-	/* Assign GIP driver handle for board-specific settings */
-	intel_qrk_gip_get_pdata = galileo_gip_get_pdata;
-
 	if (spi_done)
 		goto gpios;
 
@@ -306,12 +314,8 @@ gpios:
 		goto i2c;
 
 	ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
-	if (ret) {
-		pr_info("%s: gpio_request_array failure. Deferring..\n",
-			__func__);
-		ret = -EPROBE_DEFER;
+	if (ret)
 		goto end;
-	}
 
 	probed_i2c_cypress.irq = gpio_to_irq(GPIO_CYPRESS_INT_S3);
 
@@ -330,7 +334,7 @@ i2c:
 					cypress_i2c_addr, cypress_i2c_probe);
 	strlcpy(probed_i2c_eeprom.type, "at24", I2C_NAME_SIZE);
 	eeprom = i2c_new_probed_device(i2c_adap, &probed_i2c_eeprom,
-				       eeprom_i2c_addr, eeprom_i2c_probe);
+					eeprom_i2c_addr, eeprom_i2c_probe);
 	i2c_put_adapter(i2c_adap);
 
 	if (NULL == cypress || NULL == eeprom) {
@@ -343,7 +347,37 @@ end:
 	return ret;
 }
 
-static int intel_quark_galileo_gen1_exit(struct platform_device *pdev)
+static struct platform_driver gpio_restrict_pdriver = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe,
+};
+
+static int intel_quark_platform_galileo_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	/* Assign GIP driver handle for board-specific settings */
+	intel_qrk_gip_get_pdata = galileo_gip_get_pdata;
+
+	/* gpio */
+	ret = platform_driver_register(&gpio_restrict_pdriver);
+	if (ret)
+		goto end;
+
+#if 0
+	/* legacy SPI - TBD */
+	ret = platform_driver_register(&intel_qrk_plat_galileo_lpcspi_pdriver);
+	if (ret)
+		goto end;
+#endif
+end:
+	return ret;
+}
+
+static int intel_quark_platform_galileo_remove(struct platform_device *pdev)
 {
 	return 0;
 }
@@ -353,9 +387,10 @@ static struct platform_driver quark_galileo_platform_driver = {
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
 	},
-	.probe		= intel_quark_galileo_gen1_init,
-	.remove		= intel_quark_galileo_gen1_exit,
+	.probe		= intel_quark_platform_galileo_probe,
+	.remove		= intel_quark_platform_galileo_remove,
 };
+
 module_platform_driver(quark_galileo_platform_driver);
 
 MODULE_AUTHOR("Bryan O'Donoghue <bryan.odonoghue@intel.com>");
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c
index f201d17..a2422bc 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo_gen2.c
@@ -42,6 +42,8 @@
  ******************************************************************************/
 
 #define DRIVER_NAME "GalileoGen2"
+#define GPIO_RESTRICT_NAME	"qrk-gpio-restrict-sc"
+#define LPC_SCH_SPINAME		"spi-lpc-sch"
 
 #define GPIO_PCAL9555A_EXP2_INT		9
 
@@ -270,15 +272,20 @@ static struct gpio reserved_gpios_gen2[] = {
 	},
 };
 
-static int intel_quark_galileo_gen2_init(struct platform_device *pdev)
+/**
+ * intel_qrk_gpio_restrict_probe
+ *
+ * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
+ * GPIOs are never released nor accessed by this driver.
+ *
+ * Registers devices which are dependent on this GPIO driver
+ */
+static int intel_qrk_gpio_restrict_probe(struct platform_device *pdev)
 {
 	int ret = 0;
 	struct i2c_adapter *i2c_adap = NULL;
 	struct i2c_client *client = NULL;
 
-	/* Assign GIP driver handle for board-specific settings */
-	intel_qrk_gip_get_pdata = galileo_gen2_gip_get_pdata;
-
 	/* Need to tell the PCA953X driver which GPIO IRQ to use for signalling
 	 * interrupts.  We can't get the IRQ until the GPIO driver is loaded.
 	 * Hence, we defer registration of the I2C devices until now
@@ -290,11 +297,10 @@ static int intel_quark_galileo_gen2_init(struct platform_device *pdev)
 		return -EPROBE_DEFER;
 	}
 
-	ret = gpio_request_array(reserved_gpios_gen2, ARRAY_SIZE(reserved_gpios_gen2));
+	ret = gpio_request_array(reserved_gpios_gen2,
+				 ARRAY_SIZE(reserved_gpios_gen2));
 	if (ret) {
-			pr_info("%s: gpio_request_array failure. Deferring..\n",
-				__func__);
-			ret = -EPROBE_DEFER;
+		dev_err(&client->dev, "failed to request reserved gpios\n");
 		goto end;
 	}
 
@@ -345,13 +351,30 @@ static int intel_quark_galileo_gen2_init(struct platform_device *pdev)
 	}
 
 	ret = intel_qrk_spi_add_onboard_devs_gen2();
-
 end:
 	i2c_put_adapter(i2c_adap);
+
 	return ret;
 }
 
-static int intel_quark_galileo_gen2_exit(struct platform_device *pdev)
+static struct platform_driver gpio_restrict_pdriver = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe,
+};
+
+static int intel_quark_platform_galileo_gen2_probe(struct platform_device *pdev)
+{
+	/* Assign GIP driver handle for board-specific settings */
+	intel_qrk_gip_get_pdata = galileo_gen2_gip_get_pdata;
+
+	/* gpio */
+	return platform_driver_register(&gpio_restrict_pdriver);
+}
+
+static int intel_quark_platform_galileo_gen2_remove(struct platform_device *pdev)
 {
 	return 0;
 }
@@ -361,9 +384,10 @@ static struct platform_driver quark_galileo_platform_driver = {
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
 	},
-	.probe		= intel_quark_galileo_gen2_init,
-	.remove		= intel_quark_galileo_gen2_exit,
+	.probe		= intel_quark_platform_galileo_gen2_probe,
+	.remove		= intel_quark_platform_galileo_gen2_remove,
 };
+
 module_platform_driver(quark_galileo_platform_driver);
 
 MODULE_AUTHOR("Bryan O'Donoghue <bryan.odonoghue@intel.com>");
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c b/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c
index 37e4204..a01cdcb 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_kips_bay.c
@@ -118,11 +118,24 @@ static int intel_qrk_spi_add_onboard_devs(void)
  * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
  * GPIOs are never released nor accessed by this driver.
  */
-static int intel_qrk_plat_kips_bay_probe(struct platform_device *pdev)
+static int intel_qrk_gpio_restrict_probe(struct platform_device *pdev)
 {
 	return intel_qrk_spi_add_onboard_devs();
 }
 
+static struct platform_driver gpio_restrict_pdriver = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe,
+};
+
+static int intel_qrk_plat_kips_bay_probe(struct platform_device *pdev)
+{
+	return platform_driver_register(&gpio_restrict_pdriver);
+}
+
 static int intel_qrk_plat_kips_bay_remove(struct platform_device *pdev)
 {
 	return 0;
-- 
1.7.5.4

