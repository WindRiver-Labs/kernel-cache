From 4b00d6907dc296781df9297af171bb4fae7e1f2f Mon Sep 17 00:00:00 2001
From: Bogdan Pricop <bogdan.pricop@emutex.com>
Date: Sat, 25 Oct 2014 15:59:49 +0100
Subject: [PATCH 31/42] USB-Device (pch_udc): add S3 support for Intel Quark

* Change the PM support from legacy PCI suspend/resume routines to the
  new Linux power management framework.
* Remove any generic PCI operations from PCH-UDC driver and let
  pci_pm_suspend() and pci_pm_resume() handle them.
* Disconnect the USB-Device during "suspend" phase only if there is a
  USB Gadget loaded on top of the USB-Device.
* Save device configuration register, device control register and
  interrupt control registers (device and endpoints) during "suspend_noirq"
  phase; The rest of the registers (endpoints specific registers) will be
  re-configured when the USB gadget re-connects to the USB-Host machine.
* Restore the content of saved registers in resume_noirq PM callback
* Reconnect the USB Gadget during resume phase only if there is a USB
  Gadget loaded on top of USB-Device.
(cherry picked from commit 2bc260e4cb2051e14bd5978b33accf9ecbace237)

Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Conflicts:

	drivers/usb/gadget/pch_udc.c

Change-Id: I4b188aa239c423ae7e8895db36e54e21e9d5b21b
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4782
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Reviewed-by: Ahmad, Josef <josef.ahmad@intel.com>
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/usb/gadget/pch_udc.c |  215 ++++++++++++++++++++++++++++++++++--------
 1 files changed, 174 insertions(+), 41 deletions(-)

diff --git a/drivers/usb/gadget/pch_udc.c b/drivers/usb/gadget/pch_udc.c
index bbfddd1..05ede4e 100644
--- a/drivers/usb/gadget/pch_udc.c
+++ b/drivers/usb/gadget/pch_udc.c
@@ -230,6 +230,18 @@ static int vbus_gpio_port = -1;		/* GPIO port number (-1:Not used) */
 #define UDC_DMA_MAXPACKET	65536	/* maximum packet size for DMA */
 
 /**
+ * Bit masks used to make sure the RO bits are saved as 0 thus restore will
+ * set them to 0, as specified in the Quak data-sheet.
+ */
+#define D_CFG_UDC_REG_MASK		0x0FFFBF
+#define D_CTRL_UDC_REG_MASK		0xFFFF3FFD
+#define D_INT_UDC_REG_MASK		0xFF
+#define D_INTR_MSK_UDC_REG_MASK		0xFF
+#define EP_INTR_UDC_REG_MASK		0x0F000F
+#define	EP_INTR_MSK_UDC_REG_MASK	0x0F000F
+#define TEST_MODE_UDC_REG_MASK		0x01
+
+/**
  * struct pch_udc_data_dma_desc - Structure to hold DMA descriptor information
  *				  for data
  * @status:		Status quadlet
@@ -335,6 +347,20 @@ struct pch_vbus_gpio_data {
 };
 
 /**
+ * struct pch_saved_reg - Registers to be saved during S3 suspend to RAM and
+ *			restore during S3 resume.
+ */
+struct pch_saved_regs {
+	u32	d_cfg_udc_reg;
+	u32	d_ctrl_udc_reg;
+	u32	d_int_udc_reg;
+	u32	d_intr_msk_udc_reg;
+	u32	ep_intr_udc_reg;
+	u32	ep_intr_msk_udc_reg;
+	u32	test_mode_udc_reg;
+};
+
+/**
  * struct pch_udc_dev - Structure holding complete information
  *			of the PCH USB device
  * @gadget:		gadget driver data
@@ -365,6 +391,7 @@ struct pch_vbus_gpio_data {
  * @phy_err_cnt:	Count of phy_errs on this device
  * @cfg_data:		current cfg, intf, and alt in use
  * @vbus_gpio:		GPIO informaton for detecting VBUS
+ * @saved_regs		Where to save MMIO during suspend_noirq
  */
 struct pch_udc_dev {
 	struct usb_gadget		gadget;
@@ -394,6 +421,9 @@ struct pch_udc_dev {
 	unsigned			phy_err_cnt;
 	struct pch_udc_cfg_data		cfg_data;
 	struct pch_vbus_gpio_data	vbus_gpio;
+#ifdef CONFIG_PM
+	struct pch_saved_regs		saved_regs;
+#endif
 };
 #define to_pch_udc(g)	(container_of((g), struct pch_udc_dev, gadget))
 
@@ -3161,45 +3191,6 @@ static void pch_udc_remove(struct pci_dev *pdev)
 	kfree(dev);
 }
 
-#ifdef CONFIG_PM
-static int pch_udc_suspend(struct pci_dev *pdev, pm_message_t state)
-{
-	struct pch_udc_dev *dev = pci_get_drvdata(pdev);
-
-	pch_udc_disable_interrupts(dev, UDC_DEVINT_MSK);
-	pch_udc_disable_ep_interrupts(dev, UDC_EPINT_MSK_DISABLE_ALL);
-
-	pci_disable_device(pdev);
-	pci_enable_wake(pdev, PCI_D3hot, 0);
-
-	if (pci_save_state(pdev)) {
-		dev_err(&pdev->dev,
-			"%s: could not save PCI config state\n", __func__);
-		return -ENOMEM;
-	}
-	pci_set_power_state(pdev, pci_choose_state(pdev, state));
-	return 0;
-}
-
-static int pch_udc_resume(struct pci_dev *pdev)
-{
-	int ret;
-
-	pci_set_power_state(pdev, PCI_D0);
-	pci_restore_state(pdev);
-	ret = pci_enable_device(pdev);
-	if (ret) {
-		dev_err(&pdev->dev, "%s: pci_enable_device failed\n", __func__);
-		return ret;
-	}
-	pci_enable_wake(pdev, PCI_D3hot, 0);
-	return 0;
-}
-#else
-#define pch_udc_suspend	NULL
-#define pch_udc_resume	NULL
-#endif /* CONFIG_PM */
-
 static int pch_udc_probe(struct pci_dev *pdev,
 			  const struct pci_device_id *id)
 {
@@ -3320,6 +3311,147 @@ finished:
 	return retval;
 }
 
+#ifdef CONFIG_PM
+
+/**
+ * pch_udc_save_regs - save the Memory Mapped I/O device configuration
+ *		registers.
+ * @dev: - USB-Device instance
+ *
+ * It always returns 0.
+ */
+static int pch_udc_save_regs(struct pch_udc_dev *dev)
+{
+	dev->saved_regs.d_cfg_udc_reg = pch_udc_readl(dev, UDC_DEVCFG_ADDR) &
+		D_CFG_UDC_REG_MASK;
+	dev->saved_regs.d_ctrl_udc_reg = pch_udc_readl(dev, UDC_DEVCTL_ADDR) &
+		D_CTRL_UDC_REG_MASK;
+	dev->saved_regs.d_int_udc_reg = pch_udc_readl(dev, UDC_DEVIRQSTS_ADDR) &
+		D_INT_UDC_REG_MASK;
+	dev->saved_regs.d_intr_msk_udc_reg = pch_udc_readl(dev,
+			UDC_DEVIRQMSK_ADDR) & D_INTR_MSK_UDC_REG_MASK;
+	dev->saved_regs.ep_intr_udc_reg = pch_udc_readl(dev, UDC_EPIRQSTS_ADDR)
+		& EP_INTR_UDC_REG_MASK;
+	dev->saved_regs.ep_intr_msk_udc_reg = pch_udc_readl(dev,
+			UDC_EPIRQMSK_ADDR) & EP_INTR_MSK_UDC_REG_MASK;
+	dev->saved_regs.test_mode_udc_reg = pch_udc_readl(dev, UDC_DEVLPM_ADDR)
+		& TEST_MODE_UDC_REG_MASK;
+	return 0;
+}
+
+
+/**
+ * pch_udc_restore_regs - restore all the Memory Mapped I/O registers saved
+ *			during suspend phase by pch_udc_save_regs() function.
+ * @dev: - USB-Device instance
+ *
+ * Always returns 0.
+ */
+static int pch_udc_restore_regs(struct pch_udc_dev *dev)
+{
+	pch_udc_writel(dev, dev->saved_regs.d_cfg_udc_reg, UDC_DEVCFG_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.d_ctrl_udc_reg, UDC_DEVCTL_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.d_int_udc_reg, UDC_DEVIRQSTS_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.d_intr_msk_udc_reg,
+			UDC_DEVIRQMSK_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.ep_intr_udc_reg, UDC_EPIRQSTS_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.ep_intr_msk_udc_reg,
+			UDC_EPIRQMSK_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.test_mode_udc_reg, UDC_DEVLPM_ADDR);
+	return 0;
+}
+
+/**
+ * pch_udc_suspend - ".suspend" PM callback
+ *
+ * Always returns 0.
+ *
+ * If there is a USB Gadget on top of the USB-Device driver, shut it down (
+ * disable device and endpoints interrupts; set Soft Disconnect).
+ */
+static int pch_udc_suspend(struct device *pdevice)
+{
+	struct pci_dev *pdev = to_pci_dev(pdevice);
+	struct pch_udc_dev *dev = pci_get_drvdata(pdev);
+
+	if (dev->driver)
+		pch_udc_shutdown(pdev);
+
+	return 0;
+}
+
+/**
+ * pch_udc_suspend_noirq - ".suspend_noirq" PM callback.
+ *
+ * Always returns 0.
+ *
+ * It saves the Memory Mapped I/O device configuration registers.
+ */
+static int pch_udc_suspend_noirq(struct device *pdevice)
+{
+	int ret;
+
+	struct pci_dev *pdev	= to_pci_dev(pdevice);
+	struct pch_udc_dev *dev	= pci_get_drvdata(pdev);
+
+	ret = pch_udc_save_regs(dev);
+	return ret;
+}
+
+/**
+ * pch_udc_resume_noirq - ".resume_noirq" PM callback
+ *
+ * Always returns 0.
+ *
+ * Restore all the Memory Mapped I/O device configuration registers saved during
+ * suspend_noirq phase.
+ */
+static int pch_udc_resume_noirq(struct device *pdevice)
+{
+	struct pci_dev *pdev	= to_pci_dev(pdevice);
+	struct pch_udc_dev *dev	= pci_get_drvdata(pdev);
+
+	pch_udc_restore_regs(dev);
+	return 0;
+}
+
+/**
+ * pch_udc_resume - ".resume" PM callback.
+ *
+ * Always returns 0.
+ *
+ * Reconnects the USB Gadget if it exists on top of USB-Device.
+ */
+static int pch_udc_resume(struct device *pdevice)
+{
+	struct pci_dev *pdev	= to_pci_dev(pdevice);
+	struct pch_udc_dev *dev	= pci_get_drvdata(pdev);
+
+	if (dev->driver)
+		pch_udc_reconnect(dev);
+
+	return 0;
+}
+
+#else /* CONFIG_PM */
+
+#define pch_udc_suspend		NULL
+#define pch_udc_suspend_noirq	NULL
+#define pch_udc_resume_noirq	NULL
+#define pch_udc_resume		NULL
+
+#endif /* CONFIG_PM */
+
+/**
+ * Power Management callbacks
+ */
+const struct dev_pm_ops pch_udc_pm_ops = {
+	.suspend	= pch_udc_suspend,
+	.suspend_noirq	= pch_udc_suspend_noirq,
+	.resume_noirq	= pch_udc_resume_noirq,
+	.resume		= pch_udc_resume,
+};
+
 static const struct pci_device_id pch_udc_pcidev_id[] = {
 	{
 		PCI_DEVICE(PCI_VENDOR_ID_INTEL,
@@ -3352,9 +3484,10 @@ static struct pci_driver pch_udc_driver = {
 	.id_table =	pch_udc_pcidev_id,
 	.probe =	pch_udc_probe,
 	.remove =	pch_udc_remove,
-	.suspend =	pch_udc_suspend,
-	.resume =	pch_udc_resume,
 	.shutdown =	pch_udc_shutdown,
+	.driver =	{
+		.pm =	&pch_udc_pm_ops,
+	},
 };
 
 module_pci_driver(pch_udc_driver);
-- 
1.7.5.4

