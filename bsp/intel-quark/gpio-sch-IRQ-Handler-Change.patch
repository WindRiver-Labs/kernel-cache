From 25a97e38003acd7060a80ab71f9bf46125330af9 Mon Sep 17 00:00:00 2001
From: William Rafferty <william.a.rafferty@intel.com>
Date: Fri, 12 Jun 2015 17:18:50 +0100
Subject: [PATCH 40/65] gpio-sch: IRQ Handler Change

Removed the while loop in the interrupt handler to prevent
the IRQ getting completely stuck if a GPIO misbehaves

Signed-off-by: William Rafferty <william.a.rafferty@intel.com>
Change-Id: I6f4ef242214ef071d67fc6e4b71d47d852df2bb0
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5350
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |   24 ++++++++++++------------
 1 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index 7ab5fb4..43c606b 100755
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -239,12 +239,9 @@ static void sch_gpio_irq_ack(struct irq_data *d)
 {
 	struct sch_gpio *sch = irq_data_get_irq_chip_data(d);
 	u32 gpio_num;
-	unsigned long flags;
 
 	gpio_num = d->irq - sch->irq_base;
-	spin_lock_irqsave(&sch->lock, flags);
 	sch_gpio_reg_set(&(sch->chip), gpio_num, GTS, 1);
-	spin_unlock_irqrestore(&sch->lock, flags);
 }
 
 static int sch_gpio_irq_type(struct irq_data *d, unsigned type)
@@ -384,15 +381,18 @@ static inline irqreturn_t do_serve_irq(int reg_status, unsigned int irq_base)
 {
 	int ret = IRQ_NONE;
 	u32 pending = 0, gpio = 0;
-	/* Which pin (if any) triggered the interrupt */
-	while ((pending = inb(reg_status))) {
-		/* Serve each asserted interrupt */
-		do {
-			gpio = __ffs(pending);
-			generic_handle_irq(irq_base + gpio);
-			pending &= ~BIT(gpio);
-			ret = IRQ_HANDLED;
-		} while (pending);
+	/* Which pins (if any) triggered the interrupt */
+	pending = inl(reg_status);
+
+	/* Serve each asserted interrupt */
+	/* Note that the interrupt is cleared as part of the irq_ack of
+	 * the handle_edge_irq callback
+	 */
+	while (pending) {
+		gpio = __ffs(pending);
+		generic_handle_irq(irq_base + gpio);
+		pending &= ~BIT(gpio);
+		ret = IRQ_HANDLED;
 	}
 
 	return ret;
-- 
1.7.5.4

