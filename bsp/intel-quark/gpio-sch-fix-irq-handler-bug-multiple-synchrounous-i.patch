From 0d250a4507accb4acd5507d28119629ddc02889d Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Mon, 18 May 2015 14:29:51 +0800
Subject: [PATCH 06/65] gpio-sch: fix irq handler bug (multiple synchrounous
 irqs) - RTC #75539

This patch is ported from R1.1 to do the following:

This patch fixes a bug that causes the driver to detect only a single
interrupt per power well at a time.  This bug is particularly nasty
as the undetected interrupts are then lost.

The root cause is a bug in the way interrupts are cleared.  The device
provides a single register that acts as both status and EOI (R/W1C).
The ISR in the driver is instead EOI'ing with a read-modify-write.
This causes any additional asserted bit to be cleared but never
served.

This fix is based on previous work by Billy Rafferty and Anthony Fee
(commits 8cac6f68 and 31ce6abd), and optimised to avoid code
duplication.

----

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Arumugam,Kamenee <kamenee.arumugam@intel.com>
Change-Id: I87fb5c6dbea46371ad80e4931e413965014b9e52
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4994
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |   37 ++++++++++++++++++++++++++-----------
 1 files changed, 26 insertions(+), 11 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index 87df3b9..47d2807 100644
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -39,6 +39,7 @@
 #define GGPE	0x14
 #define GSMI	0x18
 #define GTS	0x1C
+#define RGTS	0x3C
 #define CGNMIEN	0x40
 #define RGNMIEN	0x44
 
@@ -378,22 +379,36 @@ static void sch_gpio_irq_disable_all(struct sch_gpio *sch, unsigned int num)
 	spin_unlock_irqrestore(&sch->lock, flags);
 }
 
+static inline irqreturn_t do_serve_irq(int reg_status, unsigned int irq_base)
+{
+	int ret = IRQ_NONE;
+	u32 pending = 0, gpio = 0;
+	/* Which pin (if any) triggered the interrupt */
+	while ((pending = inb(reg_status))) {
+		/* Serve each asserted interrupt */
+		do {
+			gpio = __ffs(pending);
+			generic_handle_irq(irq_base + gpio);
+			pending &= ~BIT(gpio);
+			ret = IRQ_HANDLED;
+		} while (pending);
+	}
+	return ret;
+}
+
 static irqreturn_t sch_gpio_irq_handler(int irq, void *dev_id)
 {
 	struct sch_gpio *sch = dev_id;
-	int res;
-	unsigned int i;
 	int ret = IRQ_NONE;
+	/* In 3.14, both the core and resume banks are consolidated,
+	 * but the physical registers are still separated. In order
+	 * to access the status of resume bank irq status, we need
+	 * recalculate the irq base for resume bank
+	 */
+	int resume_irq_base =  sch->irq_base + sch->resume_base;
 
-	for (i = 0; i < sch->chip.ngpio; i++) {
-		res = sch_gpio_reg_get(&sch->chip, i, GTS);
-		if (res) {
-			/* clear by setting GTS to 1 */
-			sch_gpio_reg_set(&sch->chip, i, GTS, 1);
-			generic_handle_irq(sch->irq_base + i);
-			ret = IRQ_HANDLED;
-		}
-	}
+	ret |= do_serve_irq(sch->iobase + GTS, sch->irq_base);
+	ret |= do_serve_irq(sch->iobase + RGTS, resume_irq_base);
 
 	return ret;
 }
-- 
1.7.5.4

