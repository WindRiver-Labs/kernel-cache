From 93ef379290eefe49fe9f8d1a9310cc7bfefacfe1 Mon Sep 17 00:00:00 2001
From: Bogdan Pricop <bogdan.pricop@emutex.com>
Date: Tue, 3 Mar 2015 13:30:28 +0000
Subject: [PATCH 14/42] pch_udc VBUS detection platform device

* Create platform device for pch_udc GPIO VBUS detection and pass GPIO
  port number to driver's platform data.

Signed-off-by: Bogdan Pricop <bogdan.pricop@emutex.com>
Signed-off-by: Kartikey Parmar <kartikeyx.r.parmar@intel.com>
Change-Id: Ib728f8d7a1fa6caeec4706154d7d631e7939ec4a
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4650
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 .../intel-quark/intel_qrk_plat_reliance_creek.c    |   23 ++++++++++++++++++++
 1 files changed, 23 insertions(+), 0 deletions(-)

diff --git a/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c b/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
index 67c492b..167bbd9 100644
--- a/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
+++ b/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
@@ -30,6 +30,7 @@
 #include <linux/spi/spi.h>
 #include <linux/i2c/pcf857x.h>
 #include <linux/platform_data/tpm_i2c_infenion.h>
+#include <linux/platform_data/pch_udc.h>
 
 #define DRIVER_NAME		"RelianceCreek"
 #define GPIO_RESTRICT_NAME_NC	"qrk-gpio-restrict-nc"
@@ -44,6 +45,21 @@
 /* GPIO line SLB9645TT interrupt are routed to */
 #define GPIO_SLB9645TT_INT            13
 
+/* GPIO port used for VBUS detection (USBD_DET = GPIO<6>) */
+#define GPIO_USBD_DET			14
+
+static struct pch_udc_platform_data pch_udc_pdata	= {
+	.vbus_gpio_port	= GPIO_USBD_DET,
+};
+
+static struct platform_device pch_udc_gpio_vbus_device	= {
+	.name			= "pch_gpio_vbus",
+	.id			= -1,
+	.dev			= {
+		.platform_data	= &pch_udc_pdata,
+	},
+};
+
 static int nc_gpio_reg;
 static int sc_gpio_reg;
 
@@ -439,6 +455,13 @@ static int intel_qrk_plat_reliance_creek_probe(struct platform_device *pdev)
 	if (ret)
 		return ret;
 
+	/* Register GPIO VBUS platform device */
+	ret = platform_device_register(&pch_udc_gpio_vbus_device);
+	if (ret) {
+		pr_err("%s: Failed to register pch_udc_gpio_vbus_device!\n",
+				__func__);
+		return ret;
+	}
 
 	return 0;
 }
-- 
1.7.5.4

