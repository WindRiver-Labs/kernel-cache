From 6691c14f5acefb50bd04bb2f987512a9e542fecd Mon Sep 17 00:00:00 2001
From: "vasudevan,krishna prasath" <krishna.prasathx.k.vasudevan@intel.com>
Date: Thu, 25 Jun 2015 22:55:52 +0700
Subject: [PATCH 54/65] HSUART:Commiting changes for Inconsistent device
 numbering(RTC 98436)

The inconsistent device numbering in MFD glue driver has been changed.

Signed-off-by: vasudevan,krishna prasath <krishna.prasathx.k.vasudevan@intel.com>
Change-Id: Ic6bbf912fb51a337c4c8f9d0cdd9eca07a1b1e7c
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5413
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Reviewed-by: Ji, Kai <kai.ji@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/mfd/intel_quark_hsuart_dma.c |  116 +++++++++++++++++-----------------
 1 files changed, 58 insertions(+), 58 deletions(-)

diff --git a/drivers/mfd/intel_quark_hsuart_dma.c b/drivers/mfd/intel_quark_hsuart_dma.c
index c18eb91..67dd795 100644
--- a/drivers/mfd/intel_quark_hsuart_dma.c
+++ b/drivers/mfd/intel_quark_hsuart_dma.c
@@ -23,13 +23,13 @@
 #include <uapi/linux/serial_core.h>
 #include "../tty/serial/8250/8250.h"
 
+static bool uart0_dma = true;
+module_param(uart0_dma, bool, 0);
+MODULE_PARM_DESC(uart0_dma, "Set UART0 to use DMA");
+
 static bool uart1_dma = true;
 module_param(uart1_dma, bool, 0);
-MODULE_PARM_DESC(uart1_dma, "Set UART0 to use DMA");
-
-static bool uart2_dma = true;
-module_param(uart2_dma, bool, 0);
-MODULE_PARM_DESC(uart2_dma, "Set UART1 to use DMA");
+MODULE_PARM_DESC(uart1_dma, "Set UART1 to use DMA");
 
 /* MFD */
 #define	QUARK_IORESOURCE_MEM			0
@@ -38,8 +38,8 @@ MODULE_PARM_DESC(uart2_dma, "Set UART1 to use DMA");
 #define	QUARK_MFD_UART				1
 
 /* HSUART DMA Paired ID */
-#define	INTEL_QUARK_UART1_PAIR_ID		0
-#define	INTEL_QUARK_UART2_PAIR_ID		1
+#define	INTEL_QUARK_UART0_PAIR_ID		0
+#define	INTEL_QUARK_UART1_PAIR_ID		1
 
 /* Serial */
 #define	TX					0
@@ -47,10 +47,10 @@ MODULE_PARM_DESC(uart2_dma, "Set UART1 to use DMA");
 #define	INTEL_QUARK_UART_MEM_BAR		0
 
 /* DMA for Serial */
+#define	INTEL_QUARK_UART0_RX_CH_ID		0
+#define	INTEL_QUARK_UART0_TX_CH_ID		1
 #define	INTEL_QUARK_UART1_RX_CH_ID		0
 #define	INTEL_QUARK_UART1_TX_CH_ID		1
-#define	INTEL_QUARK_UART2_RX_CH_ID		0
-#define	INTEL_QUARK_UART2_TX_CH_ID		1
 
 /* DMA */
 #define	INTEL_QUARK_DMA_MEM_BAR			1
@@ -114,8 +114,8 @@ static struct mfd_cell intel_quark_hsuart_dma_cells[] = {
  * Serial Sections
  */
 enum serial8250_pdata_index {
-	INTEL_QUARK_UART1 = 0,
-	INTEL_QUARK_UART2,
+	INTEL_QUARK_UART0 = 0,
+	INTEL_QUARK_UART1,
 };
 
 static bool intel_quark_uart_dma_filter(struct dma_chan *chan, void *param);
@@ -128,60 +128,72 @@ struct serial8250_filter_param {
 };
 
 static struct serial8250_filter_param intel_quark_filter_param[][2] = {
-	[INTEL_QUARK_UART1] = {
+	[INTEL_QUARK_UART0] = {
 		[RX] = {
-			.chan_id = INTEL_QUARK_UART1_RX_CH_ID,
-			.device_id = INTEL_QUARK_UART1_PAIR_ID,
-			.slave_config_id = INTEL_QUARK_UART1,
+			.chan_id = INTEL_QUARK_UART0_RX_CH_ID,
+			.device_id = INTEL_QUARK_UART0_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART0,
 			.slave_config_direction = RX,
 		},
 		[TX] = {
-			.chan_id = INTEL_QUARK_UART1_TX_CH_ID,
-			.device_id = INTEL_QUARK_UART1_PAIR_ID,
-			.slave_config_id = INTEL_QUARK_UART1,
+			.chan_id = INTEL_QUARK_UART0_TX_CH_ID,
+			.device_id = INTEL_QUARK_UART0_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART0,
 			.slave_config_direction = TX,
 		},
 	},
-	[INTEL_QUARK_UART2] = {
+	[INTEL_QUARK_UART1] = {
 		[RX] = {
-			.chan_id = INTEL_QUARK_UART2_RX_CH_ID,
-			.device_id = INTEL_QUARK_UART2_PAIR_ID,
-			.slave_config_id = INTEL_QUARK_UART2,
+			.chan_id = INTEL_QUARK_UART1_RX_CH_ID,
+			.device_id = INTEL_QUARK_UART1_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART1,
 			.slave_config_direction = RX,
 		},
 		[TX] = {
-			.chan_id = INTEL_QUARK_UART2_TX_CH_ID,
-			.device_id = INTEL_QUARK_UART2_PAIR_ID,
-			.slave_config_id = INTEL_QUARK_UART2,
+			.chan_id = INTEL_QUARK_UART1_TX_CH_ID,
+			.device_id = INTEL_QUARK_UART1_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART1,
 			.slave_config_direction = TX,
 		},
 	},
 };
 
 static struct dw_dma_slave dma_dws[][2] = {
-	[INTEL_QUARK_UART1] = {
+	[INTEL_QUARK_UART0] = {
 		[RX] = {
-			.cfg_hi = DWC_CFGH_SRC_PER(INTEL_QUARK_UART1_RX_CH_ID),
+			.cfg_hi = DWC_CFGH_SRC_PER(INTEL_QUARK_UART0_RX_CH_ID),
 			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
 		},
 		[TX] = {
-			.cfg_hi = DWC_CFGH_DST_PER(INTEL_QUARK_UART1_TX_CH_ID),
+			.cfg_hi = DWC_CFGH_DST_PER(INTEL_QUARK_UART0_TX_CH_ID),
 			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
 		},
 	},
-	[INTEL_QUARK_UART2] = {
+	[INTEL_QUARK_UART1] = {
 		[RX] = {
-			.cfg_hi = DWC_CFGH_SRC_PER(INTEL_QUARK_UART2_RX_CH_ID),
+			.cfg_hi = DWC_CFGH_SRC_PER(INTEL_QUARK_UART1_RX_CH_ID),
 			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
 		},
 		[TX] = {
-			.cfg_hi = DWC_CFGH_DST_PER(INTEL_QUARK_UART2_TX_CH_ID),
+			.cfg_hi = DWC_CFGH_DST_PER(INTEL_QUARK_UART1_TX_CH_ID),
 			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
 		},
 	},
 };
 
 static struct uart_8250_dma serial8250_dma[] = {
+	[INTEL_QUARK_UART0] = {
+		.fn = &intel_quark_uart_dma_filter,
+		.tx_chan_id = INTEL_QUARK_UART0_TX_CH_ID,
+		.rx_chan_id = INTEL_QUARK_UART0_RX_CH_ID,
+		.txconf.slave_id = INTEL_QUARK_UART0_TX_CH_ID,
+		.rxconf.slave_id = INTEL_QUARK_UART0_RX_CH_ID,
+		.txconf.dst_maxburst = 8,
+		.rxconf.src_maxburst = 8,
+		.rxconf.device_fc = false,
+		.tx_param = &intel_quark_filter_param[INTEL_QUARK_UART0][TX],
+		.rx_param = &intel_quark_filter_param[INTEL_QUARK_UART0][RX],
+	},
 	[INTEL_QUARK_UART1] = {
 		.fn = &intel_quark_uart_dma_filter,
 		.tx_chan_id = INTEL_QUARK_UART1_TX_CH_ID,
@@ -194,47 +206,35 @@ static struct uart_8250_dma serial8250_dma[] = {
 		.tx_param = &intel_quark_filter_param[INTEL_QUARK_UART1][TX],
 		.rx_param = &intel_quark_filter_param[INTEL_QUARK_UART1][RX],
 	},
-	[INTEL_QUARK_UART2] = {
-		.fn = &intel_quark_uart_dma_filter,
-		.tx_chan_id = INTEL_QUARK_UART2_TX_CH_ID,
-		.rx_chan_id = INTEL_QUARK_UART2_RX_CH_ID,
-		.txconf.slave_id = INTEL_QUARK_UART2_TX_CH_ID,
-		.rxconf.slave_id = INTEL_QUARK_UART2_RX_CH_ID,
-		.txconf.dst_maxburst = 8,
-		.rxconf.src_maxburst = 8,
-		.rxconf.device_fc = false,
-		.tx_param = &intel_quark_filter_param[INTEL_QUARK_UART2][TX],
-		.rx_param = &intel_quark_filter_param[INTEL_QUARK_UART2][RX],
-	},
 };
 
 static struct uart_8250_port serial8250_port[] = {
-	[INTEL_QUARK_UART1] = {
+	[INTEL_QUARK_UART0] = {
 		.port.fifosize = 16,
 		.tx_loadsz = 8,
-		.dma = &serial8250_dma[INTEL_QUARK_UART1],
+		.dma = &serial8250_dma[INTEL_QUARK_UART0],
 	},
-	[INTEL_QUARK_UART2] = {
+	[INTEL_QUARK_UART1] = {
 		.port.fifosize = 16,
 		.tx_loadsz = 8,
-		.dma = &serial8250_dma[INTEL_QUARK_UART2],
+		.dma = &serial8250_dma[INTEL_QUARK_UART1],
 	},
 };
 
 static struct plat_serial8250_port serial8250_pdata[] = {
-	[INTEL_QUARK_UART1] = {
+	[INTEL_QUARK_UART0] = {
 		.dma_mapbase = INTEL_X1000_DMA_MAPBASE,
 		.uartclk = 44236800,
 		.iotype = UPIO_MEM32,
 		.regshift = 2,
-		.private_data = &serial8250_port[INTEL_QUARK_UART1],
+		.private_data = &serial8250_port[INTEL_QUARK_UART0],
 	},
-	[INTEL_QUARK_UART2] = {
+	[INTEL_QUARK_UART1] = {
 		.dma_mapbase = INTEL_X1000_DMA_MAPBASE,
 		.uartclk = 44236800,
 		.iotype = UPIO_MEM32,
 		.regshift = 2,
-		.private_data = &serial8250_port[INTEL_QUARK_UART2],
+		.private_data = &serial8250_port[INTEL_QUARK_UART1],
 	},
 };
 
@@ -257,10 +257,10 @@ static bool intel_quark_uart_dma_filter(struct dma_chan *chan, void *param)
 	chan->private = dws;
 
 	switch (data->device_id) {
+	case INTEL_QUARK_UART0_PAIR_ID:
+		return uart0_dma;
 	case INTEL_QUARK_UART1_PAIR_ID:
 		return uart1_dma;
-	case INTEL_QUARK_UART2_PAIR_ID:
-		return uart2_dma;
 	}
 
 	return true;
@@ -279,11 +279,11 @@ static int intel_quark_uart_device_probe(struct pci_dev *pdev,
 		cell->name = "dw-apb-uart";
 		bar = INTEL_QUARK_UART_MEM_BAR;
 		if (1 == PCI_FUNC(pdev->devfn)) {
+			cell->id = INTEL_QUARK_UART0_PAIR_ID;
+			pdata = &serial8250_pdata[INTEL_QUARK_UART0];
+		} else if (5 == PCI_FUNC(pdev->devfn)) {
 			cell->id = INTEL_QUARK_UART1_PAIR_ID;
 			pdata = &serial8250_pdata[INTEL_QUARK_UART1];
-		} else if (5 == PCI_FUNC(pdev->devfn)) {
-			cell->id = INTEL_QUARK_UART2_PAIR_ID;
-			pdata = &serial8250_pdata[INTEL_QUARK_UART2];
 		} else {
 			goto uart_error;
 		}
@@ -361,10 +361,10 @@ static int intel_quark_dma_device_probe(struct pci_dev *pdev,
 		cell->name = "dw_dmac";
 		bar = INTEL_QUARK_DMA_MEM_BAR;
 		if (1 == PCI_FUNC(pdev->devfn)) {
-			cell->id = INTEL_QUARK_UART1_PAIR_ID;
+			cell->id = INTEL_QUARK_UART0_PAIR_ID;
 			pdata = &dw_dma_pdata[INTEL_QUARK_DMA1];
 		} else if (5 == PCI_FUNC(pdev->devfn)) {
-			cell->id = INTEL_QUARK_UART2_PAIR_ID;
+			cell->id = INTEL_QUARK_UART1_PAIR_ID;
 			pdata = &dw_dma_pdata[INTEL_QUARK_DMA2];
 		} else {
 			goto dma_error;
-- 
1.7.5.4

