From c663f853349906eefc2157a2e9206b90336112fa Mon Sep 17 00:00:00 2001
From: "Arumugam,Kamenee" <kamenee.arumugam@intel.com>
Date: Tue, 14 Apr 2015 16:11:30 +0800
Subject: [PATCH 08/65] IIO Accelerometer: Modified lis331dlh accelerometer to
 use new IIO framework in kernel 3.14.

-Added in struct st_sensors_platform_data to set drdy_int_pin in
platform data clanton hill,needed during init part of st sensor core.
-Member named chaged in struct iio_chan_spec according to new IIO
framework, such as info_mask to info_mask_separate and new struct
to handle events in accelerometer.
-Modified lis331dlh event_read_config/write_event_config to have
correct passing parameter as define in IIO framework.

Signed-off-by: Arumugam,Kamenee <kamenee.arumugam@intel.com>
Change-Id: I28c03d4178d679d29ecceb7e8f5ed8554d1587b8
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4515
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/iio/accel/lis331dlh_intel_qrk.c            |   67 ++++++++++++-------
 drivers/iio/common/st_sensors/st_sensors_core.c    |    6 +-
 .../intel_quark_platform_clanton_hill.c            |    8 ++-
 include/linux/iio/common/st_sensors.h              |   10 +++
 include/linux/platform_data/lis331dlh_intel_qrk.h  |   11 +++
 5 files changed, 74 insertions(+), 28 deletions(-)

diff --git a/drivers/iio/accel/lis331dlh_intel_qrk.c b/drivers/iio/accel/lis331dlh_intel_qrk.c
index eda9cce..40aec86 100644
--- a/drivers/iio/accel/lis331dlh_intel_qrk.c
+++ b/drivers/iio/accel/lis331dlh_intel_qrk.c
@@ -37,10 +37,8 @@
 #include <linux/iio/iio.h>
 #include <linux/iio/sysfs.h>
 #include <linux/iio/events.h>
-
 #include <linux/iio/common/st_sensors.h>
 #include <linux/iio/common/st_sensors_i2c.h>
-
 #include <linux/platform_data/lis331dlh_intel_qrk.h>
 
 /* DEFAULT VALUE FOR SENSORS */
@@ -115,8 +113,7 @@
 { \
 	.type = device_type, \
 	.modified = 1, \
-	.info_mask = IIO_CHAN_INFO_RAW_SEPARATE_BIT | \
-			IIO_CHAN_INFO_SCALE_SEPARATE_BIT, \
+	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) | BIT(IIO_CHAN_INFO_SCALE) , \
 	.scan_index = index, \
 	.channel = mod, \
 	.channel2 = mod, \
@@ -128,7 +125,8 @@
 		.storagebits = 16, \
 		.endianness = endian, \
 	}, \
-	.event_mask = IIO_EV_BIT(IIO_EV_TYPE_THRESH, IIO_EV_DIR_RISING), \
+	.event_spec = lis331dlh_events,					\
+	.num_event_specs = ARRAY_SIZE(lis331dlh_events),			\
 }
 
 static const u8 iio_modifier_map[] = {
@@ -142,6 +140,15 @@ static const u8 iio_modifier_map[] = {
 	IIO_MOD_X_AND_Y_AND_Z,
 };
 
+static const struct iio_event_spec lis331dlh_events[] = {
+	{
+		.type = IIO_EV_TYPE_THRESH,
+		.dir = IIO_EV_DIR_RISING,
+		.mask_separate = BIT(IIO_EV_INFO_VALUE) |
+			BIT(IIO_EV_INFO_ENABLE),
+	},
+};
+
 
 /*  Threshold event ISR bottom half.  This function reads interrupt status
  *  registers for INT2 to reset any active interrupt conditions
@@ -204,7 +211,7 @@ static inline int lis331dlh_intel_qrk_read_info_raw(struct iio_dev *indio_dev,
 	int err;
 
 	mutex_lock(&indio_dev->mlock);
-	err = st_sensors_read_axis_data(indio_dev, ch->address, val);
+	err = st_sensors_read_axis_data(indio_dev, ch, val);
 
 	if (unlikely(err < 0))
 		goto read_error;
@@ -279,10 +286,12 @@ static const struct attribute_group lis331dlh_intel_qrk_attribute_group = {
 	.attrs = lis331dlh_intel_qrk_attributes,
 };
 
-static int lis331dlh_intel_qrk_read_event_value(
-	struct iio_dev *indio_dev,
-	u64 event_code,
-	int *val)
+static int lis331dlh_intel_qrk_read_event_value(struct iio_dev *indio_dev,
+	const struct iio_chan_spec *chan,
+	enum iio_event_type type,
+	enum iio_event_direction dir,
+	enum iio_event_info info,
+	int *val, int *val2)
 {
 	int err;
 	u8 data;
@@ -291,14 +300,20 @@ static int lis331dlh_intel_qrk_read_event_value(
 	err = sdata->tf->read_byte(&sdata->tb, sdata->dev,
 				ST_ACCEL_2_INT2_THRESH_ADDR, &data);
 
+	if (err)
+		return err;
+
 	*val = (int) data;
-	return err;
+	return IIO_VAL_INT;
+
 }
 
-static int lis331dlh_intel_qrk_write_event_value(
-	struct iio_dev *indio_dev,
-	u64 event_code,
-	int val)
+static int lis331dlh_intel_qrk_write_event_value(struct iio_dev *indio_dev,
+	const struct iio_chan_spec *chan,
+	enum iio_event_type type,
+	enum iio_event_direction dir,
+	enum iio_event_info info,
+	int val, int val2)
 {
 	int err;
 	struct st_sensor_data *sdata;
@@ -350,9 +365,10 @@ static int lis331dlh_intel_qrk_configure_threshold_interrupt(
 	return err;
 }
 
-static int lis331dlh_intel_qrk_read_event_config(
-	struct iio_dev *indio_dev,
-	u64 event_code)
+static int lis331dlh_intel_qrk_read_event_config(struct iio_dev *indio_dev,
+	const struct iio_chan_spec *chan,
+	enum iio_event_type type,
+	enum iio_event_direction dir)
 {
 	int err = 0;
 	u8 data, mask;
@@ -362,14 +378,15 @@ static int lis331dlh_intel_qrk_read_event_config(
 				   ST_ACCEL_2_INT2_CFG_ADDR,
 				   &data);
 
-	mask = 1 << ((IIO_EVENT_CODE_EXTRACT_MODIFIER(event_code) << 1) - 1);
+	mask = (1 << ((chan->channel2 << 1) -1));
 
 	return !!(data & mask);
 }
 
-static int lis331dlh_intel_qrk_write_event_config(
-	struct iio_dev *indio_dev,
-	u64 event_code,
+static int lis331dlh_intel_qrk_write_event_config(struct iio_dev *indio_dev,
+	const struct iio_chan_spec *chan,
+	enum iio_event_type type,
+	enum iio_event_direction dir,
 	int state)
 {
 	int err;
@@ -379,7 +396,7 @@ static int lis331dlh_intel_qrk_write_event_config(
 	bool new_int_state;
 
 	struct st_sensor_data *sdata = iio_priv(indio_dev);
-	mask = 1 << ((IIO_EVENT_CODE_EXTRACT_MODIFIER(event_code) << 1) - 1);
+	mask = (1 << ((chan->channel2 << 1) -1));
 
 	err = st_sensors_write_data_with_mask(indio_dev,
 					ST_ACCEL_2_INT2_CFG_ADDR,
@@ -485,7 +502,7 @@ static struct st_sensors lis331dlh_intel_qrk_sensor = {
 	},
 	.drdy_irq = {
 		.addr = ST_ACCEL_2_CTRL_REG3,
-		.mask = ST_ACCEL_2_DRDY_IRQ_MASK,
+		.mask_int2 = ST_ACCEL_2_DRDY_IRQ_MASK,
 	},
 	.multi_read_bit = ST_ACCEL_2_MULTIREAD_BIT,
 	.bootime = 2,
@@ -549,7 +566,7 @@ static int lis331dlh_intel_qrk_probe(
 
 	adata->sensor->drdy_irq.ig1.en_mask = QRK_ACCEL_INT2_DISABLED;
 
-	ret = st_sensors_init_sensor(indio_dev);
+	ret = st_sensors_init_sensor(indio_dev,pdata->default_lis331dlh_pdata);
 	if (unlikely(ret < 0))
 		goto lis331dlh_intel_qrk_init_err;
 
diff --git a/drivers/iio/common/st_sensors/st_sensors_core.c b/drivers/iio/common/st_sensors/st_sensors_core.c
index 7ba1ef2..b3b3975 100644
--- a/drivers/iio/common/st_sensors/st_sensors_core.c
+++ b/drivers/iio/common/st_sensors/st_sensors_core.c
@@ -25,7 +25,7 @@ static inline u32 st_sensors_get_unaligned_le24(const u8 *p)
 	return (s32)((p[0] | p[1] << 8 | p[2] << 16) << 8) >> 8;
 }
 
-static int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
+int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
 						u8 reg_addr, u8 mask, u8 data)
 {
 	int err;
@@ -42,6 +42,7 @@ static int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
 st_sensors_write_data_with_mask_error:
 	return err;
 }
+EXPORT_SYMBOL(st_sensors_write_data_with_mask);
 
 static int st_sensors_match_odr(struct st_sensors *sensor,
 			unsigned int odr, struct st_sensor_odr_avl *odr_out)
@@ -322,7 +323,7 @@ st_sensors_match_scale_error:
 }
 EXPORT_SYMBOL(st_sensors_set_fullscale_by_gain);
 
-static int st_sensors_read_axis_data(struct iio_dev *indio_dev,
+int st_sensors_read_axis_data(struct iio_dev *indio_dev,
 				struct iio_chan_spec const *ch, int *data)
 {
 	int err;
@@ -350,6 +351,7 @@ st_sensors_free_memory:
 
 	return err;
 }
+EXPORT_SYMBOL(st_sensors_read_axis_data);
 
 int st_sensors_read_info_raw(struct iio_dev *indio_dev,
 				struct iio_chan_spec const *ch, int *val)
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
index d3945f5..66bf25e 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
@@ -74,8 +74,14 @@ static struct spi_board_info spi_onboard_devs[] = {
 #define ST_ACCEL_GPIO_S0 15
 #define ST_ACCEL_GPIO_S3 4
 
-static struct lis331dlh_intel_qrk_platform_data lis331dlh_i2c_platform_data = {
+static const struct st_sensors_platform_data lis331dlh_pdata = {
+	.drdy_int_pin =2,
+};
+
+
+static const struct lis331dlh_intel_qrk_platform_data lis331dlh_i2c_platform_data = {
 	.irq2_pin = ST_ACCEL_GPIO_S3,
+	.default_lis331dlh_pdata = &lis331dlh_pdata,
 };
 
 static struct gpio reserved_gpios[] = {
diff --git a/include/linux/iio/common/st_sensors.h b/include/linux/iio/common/st_sensors.h
index 3c005eb..883a390 100644
--- a/include/linux/iio/common/st_sensors.h
+++ b/include/linux/iio/common/st_sensors.h
@@ -27,10 +27,14 @@
 #define ST_SENSORS_FULLSCALE_AVL_MAX		10
 
 #define ST_SENSORS_NUMBER_ALL_CHANNELS		4
+#define ST_SENSORS_NUMBER_DATA_CHANNELS		3
 #define ST_SENSORS_ENABLE_ALL_AXIS		0x07
+#define ST_SENSORS_BYTE_FOR_CHANNEL		2
 #define ST_SENSORS_SCAN_X			0
 #define ST_SENSORS_SCAN_Y			1
 #define ST_SENSORS_SCAN_Z			2
+#define ST_SENSORS_DEFAULT_12_REALBITS		12
+#define ST_SENSORS_DEFAULT_16_REALBITS		16
 #define ST_SENSORS_DEFAULT_POWER_ON_VALUE	0x01
 #define ST_SENSORS_DEFAULT_POWER_OFF_VALUE	0x00
 #define ST_SENSORS_DEFAULT_WAI_ADDRESS		0x0f
@@ -265,6 +269,9 @@ static inline void st_sensors_deallocate_trigger(struct iio_dev *indio_dev)
 int st_sensors_init_sensor(struct iio_dev *indio_dev,
 					struct st_sensors_platform_data *pdata);
 
+int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
+				u8 reg_addr, u8 mask, u8 data);
+
 int st_sensors_set_enable(struct iio_dev *indio_dev, bool enable);
 
 int st_sensors_set_axis_enable(struct iio_dev *indio_dev, u8 axis_enable);
@@ -275,6 +282,9 @@ int st_sensors_set_dataready_irq(struct iio_dev *indio_dev, bool enable);
 
 int st_sensors_set_fullscale_by_gain(struct iio_dev *indio_dev, int scale);
 
+int st_sensors_read_axis_data(struct iio_dev *indio_dev,
+				struct iio_chan_spec const *ch, int *data);
+
 int st_sensors_read_info_raw(struct iio_dev *indio_dev,
 				struct iio_chan_spec const *ch, int *val);
 
diff --git a/include/linux/platform_data/lis331dlh_intel_qrk.h b/include/linux/platform_data/lis331dlh_intel_qrk.h
index 8d01fe1..d9bd0e5 100644
--- a/include/linux/platform_data/lis331dlh_intel_qrk.h
+++ b/include/linux/platform_data/lis331dlh_intel_qrk.h
@@ -8,13 +8,24 @@
 #ifndef __LINUX_PLATFORM_DATA_LIS331DLH_INTEL_QRK_H__
 #define __LINUX_PLATFORM_DATA_LIS331DLH_INTEL_QRK_H__
 
+#include <linux/iio/common/st_sensors.h>
+
 /**
  * struct lis331dlh_intel_qrk_platform_data - Platform data for the ST Micro
  *                                            accelerometer driver
  * @irq2_pin: GPIO pin number for the threshold interrupt(INT2).
  **/
+/**
+* struct st_sensors_platform_data - default accel platform data
+* @drdy_int_pin: default accel DRDY is available on INT1 pin.
+*/
+
 struct lis331dlh_intel_qrk_platform_data {
 	int irq2_pin;
+	struct st_sensors_platform_data *default_lis331dlh_pdata;
+
 };
 
+
+
 #endif /* LINUX_PLATFORM_DATA_LIS331DLH_INTEL_QRK_H_ */
-- 
1.7.5.4

