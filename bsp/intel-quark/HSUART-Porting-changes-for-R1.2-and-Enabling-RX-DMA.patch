From d80ca0a52aaa6a1cd7ebd18c436d6a1a8eb0dfd9 Mon Sep 17 00:00:00 2001
From: "vasudevan,krishna prasath" <krishna.prasathx.k.vasudevan@intel.com>
Date: Sat, 23 May 2015 00:21:52 +0700
Subject: [PATCH 22/65] HSUART:Porting changes for R1.2 and Enabling RX DMA

HSUART RX DMA is enabled and it is ported to 3.14,also changes for review comments are added
The FIFO trigger level is retained at 8 Bytes.

Signed-off-by: vasudevan,krishna prasath <krishna.prasathx.k.vasudevan@intel.com>
Change-Id: I51b2526bb64466911344b7253a1e933ee8a5e60f
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4624
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/dma/dw/core.c                |   17 +-
 drivers/dma/dw/platform.c            |    9 +-
 drivers/mfd/Kconfig                  |   10 +
 drivers/mfd/Makefile                 |    1 +
 drivers/mfd/intel_quark_hsuart_dma.c |  482 ++++++++++++++++++++++++++++++++++
 drivers/tty/serial/8250/8250.h       |    5 +-
 drivers/tty/serial/8250/8250_core.c  |   10 +-
 drivers/tty/serial/8250/8250_dma.c   |   83 ++++---
 drivers/tty/serial/8250/8250_dw.c    |  108 ++++++++-
 include/linux/dw_dmac.h              |    5 +
 include/linux/serial_8250.h          |    2 +
 11 files changed, 681 insertions(+), 51 deletions(-)
 create mode 100644 drivers/mfd/intel_quark_hsuart_dma.c

diff --git a/drivers/dma/dw/core.c b/drivers/dma/dw/core.c
index 02281fe..6f2d842 100644
--- a/drivers/dma/dw/core.c
+++ b/drivers/dma/dw/core.c
@@ -901,7 +901,6 @@ slave_sg_fromdev_fill_desc:
 			}
 			desc->lli.ctlhi = dlen >> reg_width;
 			desc->len = dlen;
-
 			if (!first) {
 				first = desc;
 			} else {
@@ -1607,10 +1606,18 @@ int dw_dma_probe(struct dw_dma_chip *chip, struct dw_dma_platform_data *pdata)
 			dwc->block_size = pdata->block_size;
 
 			/* Check if channel supports multi block transfer */
-			channel_writel(dwc, LLP, 0xfffffffc);
-			dwc->nollp =
-				(channel_readl(dwc, LLP) & 0xfffffffc) == 0;
-			channel_writel(dwc, LLP, 0);
+			/*if nollp flag is not set, it causes race condition
+			as this flag used in dwc_do_start*/
+
+			if (pdata->nollp[i] == true) {
+				dwc->nollp = 1;
+			} else {
+				channel_writel(dwc, LLP, 0xfffffffc);
+				dwc->nollp =
+					(channel_readl(dwc, LLP)
+						& 0xfffffffc) == 0;
+				channel_writel(dwc, LLP, 0);
+			}
 		}
 	}
 
diff --git a/drivers/dma/dw/platform.c b/drivers/dma/dw/platform.c
index 210ac1a..00b527a 100644
--- a/drivers/dma/dw/platform.c
+++ b/drivers/dma/dw/platform.c
@@ -185,7 +185,6 @@ static int dw_probe(struct platform_device *pdev)
 	chip->irq = platform_get_irq(pdev, 0);
 	if (chip->irq < 0)
 		return chip->irq;
-
 	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	chip->regs = devm_ioremap_resource(dev, mem);
 	if (IS_ERR(chip->regs))
@@ -202,8 +201,12 @@ static int dw_probe(struct platform_device *pdev)
 	chip->dev = dev;
 
 	chip->clk = devm_clk_get(chip->dev, "hclk");
-	if (IS_ERR(chip->clk))
-		return PTR_ERR(chip->clk);
+	if (IS_ERR(chip->clk)) {
+		if (PTR_ERR(chip->clk) == -ENOENT)
+			chip->clk = NULL;
+		else
+			return PTR_ERR(chip->clk);
+	}
 	err = clk_prepare_enable(chip->clk);
 	if (err)
 		return err;
diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index 76c6059..9957fa5 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -622,6 +622,16 @@ config AB3100_CORE
 	  LEDs, vibrator, system power and temperature, power management
 	  and ALSA sound.
 
+config MFD_INTEL_QUARK_HSUART_DMA
+	tristate "Intel Quark MFD for High Speed UART with DMA Engine"
+	depends on PCI
+	select MFD_CORE
+	help
+	  This MFD supports High Speed UART PCI device with its DMA engine
+	  companion in Intel Quark product series such as Intel Quark X1000.
+	  Its role is spliting the 2 devices in an orderly manner for their
+	  respective driver.
+
 config AB3100_OTP
 	tristate "ST-Ericsson AB3100 OTP functions"
 	depends on AB3100_CORE
diff --git a/drivers/mfd/Makefile b/drivers/mfd/Makefile
index f06081f..54576d1 100644
--- a/drivers/mfd/Makefile
+++ b/drivers/mfd/Makefile
@@ -177,3 +177,4 @@ obj-$(CONFIG_MFD_RETU)		+= retu-mfd.o
 obj-$(CONFIG_MFD_AS3711)	+= as3711.o
 obj-$(CONFIG_MFD_AS3722)	+= as3722.o
 obj-$(CONFIG_MFD_STW481X)	+= stw481x.o
+obj-$(CONFIG_MFD_INTEL_QUARK_HSUART_DMA)	+= intel_quark_hsuart_dma.o
diff --git a/drivers/mfd/intel_quark_hsuart_dma.c b/drivers/mfd/intel_quark_hsuart_dma.c
new file mode 100644
index 0000000..1138120
--- /dev/null
+++ b/drivers/mfd/intel_quark_hsuart_dma.c
@@ -0,0 +1,482 @@
+/*
+ * Copyright(c) 2013-2015 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/irq.h>
+#include <linux/pci.h>
+#include <linux/mfd/core.h>
+#include <linux/serial_8250.h>
+#include <linux/dw_dmac.h>
+#include <uapi/linux/serial_reg.h>
+#include <uapi/linux/serial_core.h>
+#include <../tty/serial/8250/8250.h>
+
+static bool uart1_dma = true;
+module_param(uart1_dma, bool, 0);
+MODULE_PARM_DESC(uart1_dma, "Set UART0 to use DMA");
+
+static bool uart2_dma = true;
+module_param(uart2_dma, bool, 0);
+MODULE_PARM_DESC(uart2_dma, "Set UART1 to use DMA");
+
+/* MFD */
+#define	QUARK_IORESOURCE_MEM			0
+#define	QUARK_IORESOURCE_IRQ			1
+#define	QUARK_MFD_DMA				0
+#define	QUARK_MFD_UART				1
+
+/* HSUART DMA Paired ID */
+#define	INTEL_QUARK_UART1_PAIR_ID		0
+#define	INTEL_QUARK_UART2_PAIR_ID		1
+
+/* Serial */
+#define	TX					0
+#define	RX					1
+#define	INTEL_QUARK_UART_MEM_BAR		0
+
+/* DMA for Serial */
+#define	INTEL_QUARK_UART1_RX_CH_ID		0
+#define	INTEL_QUARK_UART1_TX_CH_ID		1
+#define	INTEL_QUARK_UART2_RX_CH_ID		0
+#define	INTEL_QUARK_UART2_TX_CH_ID		1
+
+/* DMA */
+#define	INTEL_QUARK_DMA_MEM_BAR			1
+
+/* MISC */
+	/* Intel Quark X1000 HSUART DMA Engine Internal Base Address */
+#define	INTEL_X1000_DMA_MAPBASE			0xFFFFF000
+
+/* PCI ID List */
+#define	PCI_DEVICE_ID_INTEL_QUARK_X1000_UART	0x0936
+
+static const struct pci_device_id intel_quark_hsuart_dma_ids[] = {
+	{ PCI_VDEVICE(INTEL, PCI_DEVICE_ID_INTEL_QUARK_X1000_UART) },
+	{ /* Sentinel */ },
+};
+/*
+ * Multi-Functional Device Section
+ */
+static struct resource mfd_dma_res[] = {
+	[QUARK_IORESOURCE_MEM] = {
+		.start = 0x0,
+		.end = 0x0,
+		.flags = IORESOURCE_MEM,
+	},
+	[QUARK_IORESOURCE_IRQ] = {
+		.start = 0x0,
+		.end = 0x0,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct resource mfd_uart_res[] = {
+	[QUARK_IORESOURCE_MEM] = {
+		.start = 0x0,
+		.end = 0x0,
+		.flags = IORESOURCE_MEM,
+	},
+	[QUARK_IORESOURCE_IRQ] = {
+		.start = 0x0,
+		.end = 0x0,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct mfd_cell intel_quark_hsuart_dma_cells[] = {
+	[QUARK_MFD_DMA] = {
+		.name = "",
+		.num_resources = ARRAY_SIZE(mfd_dma_res),
+		.resources = mfd_dma_res,
+		.ignore_resource_conflicts = true,
+	},
+	[QUARK_MFD_UART] = {
+		.name = "",
+		.num_resources = ARRAY_SIZE(mfd_uart_res),
+		.resources = mfd_uart_res,
+		.ignore_resource_conflicts = true,
+	},
+};
+
+/*
+ * Serial Sections
+ */
+enum serial8250_pdata_index {
+	INTEL_QUARK_UART1 = 0,
+	INTEL_QUARK_UART2,
+};
+
+static bool intel_quark_uart_dma_filter(struct dma_chan *chan, void *param);
+
+struct serial8250_filter_param {
+	int chan_id;
+	int device_id;
+	int slave_config_id;
+	int slave_config_direction;
+};
+
+static struct serial8250_filter_param intel_quark_filter_param[][2] = {
+	[INTEL_QUARK_UART1] = {
+		[RX] = {
+			.chan_id = INTEL_QUARK_UART1_RX_CH_ID,
+			.device_id = INTEL_QUARK_UART1_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART1,
+			.slave_config_direction = RX,
+		},
+		[TX] = {
+			.chan_id = INTEL_QUARK_UART1_TX_CH_ID,
+			.device_id = INTEL_QUARK_UART1_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART1,
+			.slave_config_direction = TX,
+		},
+	},
+	[INTEL_QUARK_UART2] = {
+		[RX] = {
+			.chan_id = INTEL_QUARK_UART2_RX_CH_ID,
+			.device_id = INTEL_QUARK_UART2_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART2,
+			.slave_config_direction = RX,
+		},
+		[TX] = {
+			.chan_id = INTEL_QUARK_UART2_TX_CH_ID,
+			.device_id = INTEL_QUARK_UART2_PAIR_ID,
+			.slave_config_id = INTEL_QUARK_UART2,
+			.slave_config_direction = TX,
+		},
+	},
+};
+
+static struct dw_dma_slave dma_dws[][2] = {
+	[INTEL_QUARK_UART1] = {
+		[RX] = {
+			.cfg_hi = DWC_CFGH_SRC_PER(INTEL_QUARK_UART1_RX_CH_ID),
+			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
+		},
+		[TX] = {
+			.cfg_hi = DWC_CFGH_DST_PER(INTEL_QUARK_UART1_TX_CH_ID),
+			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
+		},
+	},
+	[INTEL_QUARK_UART2] = {
+		[RX] = {
+			.cfg_hi = DWC_CFGH_SRC_PER(INTEL_QUARK_UART2_RX_CH_ID),
+			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
+		},
+		[TX] = {
+			.cfg_hi = DWC_CFGH_DST_PER(INTEL_QUARK_UART2_TX_CH_ID),
+			.cfg_lo = (DWC_CFGL_HS_DST_POL | DWC_CFGL_HS_SRC_POL),
+		},
+	},
+};
+
+static struct uart_8250_dma serial8250_dma[] = {
+	[INTEL_QUARK_UART1] = {
+		.fn = &intel_quark_uart_dma_filter,
+		.tx_chan_id = INTEL_QUARK_UART1_TX_CH_ID,
+		.rx_chan_id = INTEL_QUARK_UART1_RX_CH_ID,
+		.txconf.slave_id = INTEL_QUARK_UART1_TX_CH_ID,
+		.rxconf.slave_id = INTEL_QUARK_UART1_RX_CH_ID,
+		.txconf.dst_maxburst = 8,
+		.rxconf.src_maxburst = 8,
+		.rxconf.device_fc = false,
+		.tx_param = &intel_quark_filter_param[INTEL_QUARK_UART1][TX],
+		.rx_param = &intel_quark_filter_param[INTEL_QUARK_UART1][RX],
+	},
+	[INTEL_QUARK_UART2] = {
+		.fn = &intel_quark_uart_dma_filter,
+		.tx_chan_id = INTEL_QUARK_UART2_TX_CH_ID,
+		.rx_chan_id = INTEL_QUARK_UART2_RX_CH_ID,
+		.txconf.slave_id = INTEL_QUARK_UART2_TX_CH_ID,
+		.rxconf.slave_id = INTEL_QUARK_UART2_RX_CH_ID,
+		.txconf.dst_maxburst = 8,
+		.rxconf.src_maxburst = 8,
+		.rxconf.device_fc = false,
+		.tx_param = &intel_quark_filter_param[INTEL_QUARK_UART2][TX],
+		.rx_param = &intel_quark_filter_param[INTEL_QUARK_UART2][RX],
+	},
+};
+
+static struct uart_8250_port serial8250_port[] = {
+	[INTEL_QUARK_UART1] = {
+		.port.fifosize = 16,
+		.tx_loadsz = 8,
+		.dma = &serial8250_dma[INTEL_QUARK_UART1],
+	},
+	[INTEL_QUARK_UART2] = {
+		.port.fifosize = 16,
+		.tx_loadsz = 8,
+		.dma = &serial8250_dma[INTEL_QUARK_UART2],
+	},
+};
+
+static struct plat_serial8250_port serial8250_pdata[] = {
+	[INTEL_QUARK_UART1] = {
+		.dma_mapbase = INTEL_X1000_DMA_MAPBASE,
+		.uartclk = 44236800,
+		.iotype = UPIO_MEM32,
+		.regshift = 2,
+		.private_data = &serial8250_port[INTEL_QUARK_UART1],
+	},
+	[INTEL_QUARK_UART2] = {
+		.dma_mapbase = INTEL_X1000_DMA_MAPBASE,
+		.uartclk = 44236800,
+		.iotype = UPIO_MEM32,
+		.regshift = 2,
+		.private_data = &serial8250_port[INTEL_QUARK_UART2],
+	},
+};
+
+static bool intel_quark_uart_dma_filter(struct dma_chan *chan, void *param)
+{
+	struct dw_dma_slave *dws;
+	struct serial8250_filter_param *data;
+
+	if (!param)
+		return false;
+	data = param;
+
+	if (chan->device->dev_id != data->device_id)
+		return false;
+	if (chan->chan_id != data->chan_id)
+		return false;
+
+	dws = &dma_dws[data->slave_config_id][data->slave_config_direction];
+	dws->dma_dev = chan->device->dev;
+	chan->private = dws;
+
+	switch (data->device_id) {
+	case INTEL_QUARK_UART1_PAIR_ID:
+		return uart1_dma;
+	case INTEL_QUARK_UART2_PAIR_ID:
+		return uart2_dma;
+	}
+
+	return true;
+}
+
+static int intel_quark_uart_device_probe(struct pci_dev *pdev,
+					const struct pci_device_id *id)
+{
+	struct resource *res;
+	void *pdata;
+	struct mfd_cell *cell = &intel_quark_hsuart_dma_cells[QUARK_MFD_UART];
+	int bar = 0, ret = 0;
+
+	switch (id->device) {
+	case PCI_DEVICE_ID_INTEL_QUARK_X1000_UART:
+		cell->name = "dw-apb-uart";
+		bar = INTEL_QUARK_UART_MEM_BAR;
+		if (1 == PCI_FUNC(pdev->devfn)) {
+			cell->id = INTEL_QUARK_UART1_PAIR_ID;
+			pdata = &serial8250_pdata[INTEL_QUARK_UART1];
+		} else if (5 == PCI_FUNC(pdev->devfn)) {
+			cell->id = INTEL_QUARK_UART2_PAIR_ID;
+			pdata = &serial8250_pdata[INTEL_QUARK_UART2];
+		} else {
+			goto uart_error;
+		}
+		cell->platform_data = pdata;
+		cell->pdata_size = sizeof(struct plat_serial8250_port);
+		break;
+	default:
+		goto uart_error;
+	}
+
+	res = &mfd_uart_res[QUARK_IORESOURCE_MEM];
+	res->start = pci_resource_start(pdev, bar);
+	res->end = pci_resource_end(pdev, bar);
+
+	res = &mfd_uart_res[QUARK_IORESOURCE_IRQ];
+	res->start = pdev->irq;
+	res->end = pdev->irq;
+
+	pci_set_master(pdev);
+
+	ret = mfd_add_devices(&pdev->dev, 0, cell, 1, NULL, 0, NULL);
+	if (ret) {
+		pci_clear_master(pdev);
+	}
+
+	return ret;
+
+uart_error:
+	dev_warn(&pdev->dev, "no valid UART device.\n");
+	ret = -ENODEV;
+	return ret;
+}
+
+/*
+ * DMA Sections
+ */
+enum dw_dma_pdata_index {
+	INTEL_QUARK_DMA1 = 0,
+	INTEL_QUARK_DMA2,
+};
+
+static struct dw_dma_platform_data dw_dma_pdata[] = {
+	[INTEL_QUARK_DMA1] = {
+		.nr_channels = 2,
+		.is_private = true,
+		.chan_allocation_order = CHAN_ALLOCATION_ASCENDING,
+		.chan_priority = CHAN_PRIORITY_ASCENDING,
+		.block_size = 4095U,
+		.nr_masters = 1,
+		.data_width = {2, 0, 0, 0},
+		.nollp = {true, true,},
+	},
+	[INTEL_QUARK_DMA2] = {
+		.nr_channels = 2,
+		.is_private = true,
+		.chan_allocation_order = CHAN_ALLOCATION_ASCENDING,
+		.chan_priority = CHAN_PRIORITY_ASCENDING,
+		.block_size = 4095U,
+		.nr_masters = 1,
+		.data_width = {2, 0, 0, 0},
+		.nollp = {true, true, },
+	},
+};
+
+static int intel_quark_dma_device_probe(struct pci_dev *pdev,
+					const struct pci_device_id *id)
+{
+	struct resource *res;
+	void *pdata;
+	struct mfd_cell *cell = &intel_quark_hsuart_dma_cells[QUARK_MFD_DMA];
+	int bar = 0, ret = 0;
+
+	switch (id->device) {
+	case PCI_DEVICE_ID_INTEL_QUARK_X1000_UART:
+		cell->name = "dw_dmac";
+		bar = INTEL_QUARK_DMA_MEM_BAR;
+		if (1 == PCI_FUNC(pdev->devfn)) {
+			cell->id = INTEL_QUARK_UART1_PAIR_ID;
+			pdata = &dw_dma_pdata[INTEL_QUARK_DMA1];
+		} else if (5 == PCI_FUNC(pdev->devfn)) {
+			cell->id = INTEL_QUARK_UART2_PAIR_ID;
+			pdata = &dw_dma_pdata[INTEL_QUARK_DMA2];
+		} else {
+			goto dma_error;
+		}
+		cell->platform_data = pdata;
+		cell->pdata_size = sizeof(struct dw_dma_platform_data);
+		break;
+	default:
+		goto dma_error;
+	}
+
+	res = &mfd_dma_res[QUARK_IORESOURCE_MEM];
+	res->start = pci_resource_start(pdev, bar);
+	res->end = pci_resource_end(pdev, bar);
+
+	res = &mfd_dma_res[QUARK_IORESOURCE_IRQ];
+	res->start = pdev->irq;
+	res->end = pdev->irq;
+
+	ret = mfd_add_devices(&pdev->dev, 0, cell, 1, NULL, 0, NULL);
+	goto dma_done;
+
+dma_error:
+	dev_warn(&pdev->dev, "no valid DMA device.\n");
+	ret = -ENODEV;
+dma_done:
+	return ret;
+}
+
+/*
+ * Main Section
+ */
+static int intel_quark_hsuart_dma_probe(struct pci_dev *pdev,
+					const struct pci_device_id *id)
+{
+	int ret = 0;
+
+	dev_info(&pdev->dev, "found PCI serial controller(ID: %04x:%04x)\n",
+		 pdev->vendor, pdev->device);
+
+	ret = pci_enable_device(pdev);
+	if (ret) {
+		dev_warn(&pdev->dev, "Failed to enable PCI Device\n");
+		goto probe_error;
+	}
+	/* Execute DMA device probe first. I/O can live with/without DMA */
+	ret = intel_quark_dma_device_probe(pdev, id);
+	if (ret)
+		dev_warn(&pdev->dev, "Failed to initialize DMA device\n");
+
+	ret = intel_quark_uart_device_probe(pdev, id);
+	if (ret) {
+		dev_warn(&pdev->dev, "Failed to initialize HSUART device\n");
+		goto probe_disable_device;
+	}
+
+	return ret;
+
+probe_disable_device:
+	mfd_remove_devices(&pdev->dev);
+	pci_disable_device(pdev);
+probe_error:
+	return ret;
+}
+
+static void intel_quark_hsuart_dma_remove(struct pci_dev *pdev)
+{
+	mfd_remove_devices(&pdev->dev);
+	pci_disable_device(pdev);
+}
+
+#ifdef CONFIG_PM
+/*
+ * Quark SoC family does not support ACPI D3_hot, ie the HSUART is
+ * powered off during ACPI S3 state.
+ * UART and DMA context is restored by respectively the tty and dmaengine
+ * subsystems.
+ *
+ * At the PCI level, we need to ensure that bus mastering is enabled, before
+ * IRQs are switched on.
+ */
+static int intel_quark_hsuart_dma_suspend_noirq(struct device *dev)
+{
+	pci_clear_master(to_pci_dev(dev));
+	return 0;
+}
+static int intel_quark_hsuart_dma_resume_noirq(struct device *dev)
+{
+	pci_set_master(to_pci_dev(dev));
+	return 0;
+}
+#endif /* CONFIG_PM */
+
+static const struct dev_pm_ops intel_quark_hsuart_dma_pm_ops = {
+#ifdef CONFIG_PM
+	.suspend_noirq = intel_quark_hsuart_dma_suspend_noirq,
+	.resume_noirq = intel_quark_hsuart_dma_resume_noirq,
+#endif
+};
+
+static struct pci_driver intel_quark_hsuart_dma_driver = {
+	.name		= "intel_quark_hsuart_dma",
+	.id_table	= intel_quark_hsuart_dma_ids,
+	.probe		= intel_quark_hsuart_dma_probe,
+	.remove		= intel_quark_hsuart_dma_remove,
+	.driver = {
+		.pm	= &intel_quark_hsuart_dma_pm_ops,
+	},
+};
+
+module_pci_driver(intel_quark_hsuart_dma_driver);
+
+MODULE_AUTHOR("Chew, Kean Ho <kean.ho.chew@intel.com>");
+MODULE_DESCRIPTION("HSUART DMA MFD driver for Intel Quark Series");
+MODULE_LICENSE("GPL");
diff --git a/drivers/tty/serial/8250/8250.h b/drivers/tty/serial/8250/8250.h
index 1ebf853..6773612 100644
--- a/drivers/tty/serial/8250/8250.h
+++ b/drivers/tty/serial/8250/8250.h
@@ -40,8 +40,10 @@ struct uart_8250_dma {
 	size_t			tx_size;
 
 	unsigned char		tx_running:1;
+	resource_size_t	mapbase;	/* resource base */
 };
 
+
 struct old_serial_port {
 	unsigned int uart;
 	unsigned int baud_base;
@@ -79,9 +81,8 @@ struct serial8250_config {
 
 #define PROBE_RSA	(1 << 0)
 #define PROBE_ANY	(~0)
-
 #define HIGH_BITS_OFFSET ((sizeof(long)-sizeof(int))*8)
-
+#define TRIGGER_LEVEL 8
 #ifdef CONFIG_SERIAL_8250_SHARE_IRQ
 #define SERIAL8250_SHARE_IRQS 1
 #else
diff --git a/drivers/tty/serial/8250/8250_core.c b/drivers/tty/serial/8250/8250_core.c
index 060ff67..09c191a 100644
--- a/drivers/tty/serial/8250/8250_core.c
+++ b/drivers/tty/serial/8250/8250_core.c
@@ -1551,7 +1551,7 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir)
 	int dma_err = 0;
 	u64 tsc = 0;
 
-if (up->bound_j1708)
+	if (up->bound_j1708)
 		rdtscll(tsc);
 
 	if (iir & UART_IIR_NO_INT)
@@ -1563,7 +1563,7 @@ if (up->bound_j1708)
 
 	DEBUG_INTR("status = %x...", status);
 
-if (up->bound_j1708) {
+	if (up->bound_j1708) {
 		serial8250_rx_j1708_char(up, status, tsc);
 		spin_unlock_irqrestore(&port->lock, flags);
 		return 1;
@@ -2413,7 +2413,7 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	 * have sufficient FIFO entries for the latency of the remote
 	 * UART to respond.  IOW, at least 32 bytes of FIFO.
 	 */
-	if (up->capabilities & UART_CAP_AFE && port->fifosize >= 32) {
+	if (up->capabilities & UART_CAP_AFE) {
 		up->mcr &= ~UART_MCR_AFE;
 		if (termios->c_cflag & CRTSCTS)
 			up->mcr |= UART_MCR_AFE;
@@ -2608,11 +2608,11 @@ static int serial8250_request_std_resource(struct uart_8250_port *up)
 {
 	unsigned int size = serial8250_port_size(up);
 	struct uart_port *port = &up->port;
+	int ret = 0;
 
-if (up->bound_j1708)
+	if (up->bound_j1708)
 		return 0;
 
-	int ret = 0;
 
 	switch (port->iotype) {
 	case UPIO_AU:
diff --git a/drivers/tty/serial/8250/8250_dma.c b/drivers/tty/serial/8250/8250_dma.c
index 148ffe4..91d175c 100644
--- a/drivers/tty/serial/8250/8250_dma.c
+++ b/drivers/tty/serial/8250/8250_dma.c
@@ -12,9 +12,12 @@
 #include <linux/tty_flip.h>
 #include <linux/serial_reg.h>
 #include <linux/dma-mapping.h>
+#include <linux/serial_8250.h>
 
 #include "8250.h"
 
+struct uart_8250_port uart_8250_priv;
+
 static void __dma_tx_complete(void *param)
 {
 	struct uart_8250_port	*p = param;
@@ -23,7 +26,7 @@ static void __dma_tx_complete(void *param)
 	unsigned long	flags;
 
 	dma_sync_single_for_cpu(dma->txchan->device->dev, dma->tx_addr,
-				UART_XMIT_SIZE, DMA_TO_DEVICE);
+			UART_XMIT_SIZE, DMA_TO_DEVICE);
 
 	spin_lock_irqsave(&p->port.lock, flags);
 
@@ -47,21 +50,22 @@ static void __dma_rx_complete(void *param)
 	struct uart_8250_port	*p = param;
 	struct uart_8250_dma	*dma = p->dma;
 	struct tty_port		*tty_port = &p->port.state->port;
-	struct dma_tx_state	state;
-	int			count;
 
 	dma_sync_single_for_cpu(dma->rxchan->device->dev, dma->rx_addr,
 				dma->rx_size, DMA_FROM_DEVICE);
 
-	dmaengine_tx_status(dma->rxchan, dma->rx_cookie, &state);
 	dmaengine_terminate_all(dma->rxchan);
 
-	count = dma->rx_size - state.residue;
-
-	tty_insert_flip_string(tty_port, dma->rx_buf, count);
-	p->port.icount.rx += count;
+	tty_insert_flip_string(tty_port, dma->rx_buf, dma->rx_size);
+	p->port.icount.rx += dma->rx_size;
 
 	tty_flip_buffer_push(tty_port);
+
+	/*Enabling the Interrupts Line status and Receive buffer*/
+#ifdef CONFIG_X86_INTEL_QUARK
+	serial_out(p, UART_IER, (uart_8250_priv.ier | (UART_IER_RLSI |
+				UART_IER_RDI)));
+#endif
 }
 
 int serial8250_tx_dma(struct uart_8250_port *p)
@@ -71,7 +75,7 @@ int serial8250_tx_dma(struct uart_8250_port *p)
 	struct dma_async_tx_descriptor	*desc;
 
 	if (uart_tx_stopped(&p->port) || dma->tx_running ||
-	    uart_circ_empty(xmit))
+			uart_circ_empty(xmit))
 		return 0;
 
 	dma->tx_size = CIRC_CNT_TO_END(xmit->head, xmit->tail, UART_XMIT_SIZE);
@@ -91,7 +95,7 @@ int serial8250_tx_dma(struct uart_8250_port *p)
 	dma->tx_cookie = dmaengine_submit(desc);
 
 	dma_sync_single_for_device(dma->txchan->device->dev, dma->tx_addr,
-				   UART_XMIT_SIZE, DMA_TO_DEVICE);
+			UART_XMIT_SIZE, DMA_TO_DEVICE);
 
 	dma_async_issue_pending(dma->txchan);
 
@@ -110,17 +114,13 @@ int serial8250_rx_dma(struct uart_8250_port *p, unsigned int iir)
 
 	switch (iir & 0x3f) {
 	case UART_IIR_RLSI:
-		/* 8250_core handles errors and break interrupts */
+			/* 8250_core handles errors and break interrupts */
 		return -EIO;
 	case UART_IIR_RX_TIMEOUT:
 		/*
-		 * If RCVR FIFO trigger level was not reached, complete the
-		 * transfer and let 8250_core copy the remaining data.
-		 */
-		if (dma_status == DMA_IN_PROGRESS) {
-			dmaengine_pause(dma->rxchan);
-			__dma_rx_complete(p);
-		}
+		*If RCVR FIFO trigger level was not reached, complete
+		* the transfer and let 8250_core copy the remaining data.
+		*/
 		return -ETIMEDOUT;
 	default:
 		break;
@@ -128,10 +128,17 @@ int serial8250_rx_dma(struct uart_8250_port *p, unsigned int iir)
 
 	if (dma_status)
 		return 0;
+	/*disabling the Interrupts Line status and Receive buffer*/
+#ifdef CONFIG_X86_INTEL_QUARK
+	uart_8250_priv.ier = serial_in(p, UART_IER);
+
+	serial_out(p, UART_IER, (uart_8250_priv.ier &
+				~(UART_IER_RLSI | UART_IER_RDI)));
+#endif
 
 	desc = dmaengine_prep_slave_single(dma->rxchan, dma->rx_addr,
-					   dma->rx_size, DMA_DEV_TO_MEM,
-					   DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
+			dma->rx_size, DMA_DEV_TO_MEM,
+			DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
 	if (!desc)
 		return -EBUSY;
 
@@ -153,23 +160,29 @@ int serial8250_request_dma(struct uart_8250_port *p)
 {
 	struct uart_8250_dma	*dma = p->dma;
 	dma_cap_mask_t		mask;
-
+	if (dma->mapbase) {
+		dma->rxconf.src_addr	= dma->mapbase;
+		dma->txconf.dst_addr	= dma->mapbase;
+	} else {
+		dma->rxconf.src_addr	= p->port.mapbase;
+		dma->txconf.dst_addr	= p->port.mapbase;
+	}
 	/* Default slave configuration parameters */
 	dma->rxconf.direction		= DMA_DEV_TO_MEM;
 	dma->rxconf.src_addr_width	= DMA_SLAVE_BUSWIDTH_1_BYTE;
-	dma->rxconf.src_addr		= p->port.mapbase + UART_RX;
+	dma->rxconf.src_addr		+= UART_RX;
 
 	dma->txconf.direction		= DMA_MEM_TO_DEV;
 	dma->txconf.dst_addr_width	= DMA_SLAVE_BUSWIDTH_1_BYTE;
-	dma->txconf.dst_addr		= p->port.mapbase + UART_TX;
+	dma->txconf.dst_addr		+= UART_TX;
 
 	dma_cap_zero(mask);
 	dma_cap_set(DMA_SLAVE, mask);
 
 	/* Get a channel for RX */
 	dma->rxchan = dma_request_slave_channel_compat(mask,
-						       dma->fn, dma->rx_param,
-						       p->port.dev, "rx");
+			dma->fn, dma->rx_param,
+			p->port.dev, "rx");
 	if (!dma->rxchan)
 		return -ENODEV;
 
@@ -177,8 +190,8 @@ int serial8250_request_dma(struct uart_8250_port *p)
 
 	/* Get a channel for TX */
 	dma->txchan = dma_request_slave_channel_compat(mask,
-						       dma->fn, dma->tx_param,
-						       p->port.dev, "tx");
+			dma->fn, dma->tx_param,
+			p->port.dev, "tx");
 	if (!dma->txchan) {
 		dma_release_channel(dma->rxchan);
 		return -ENODEV;
@@ -188,21 +201,21 @@ int serial8250_request_dma(struct uart_8250_port *p)
 
 	/* RX buffer */
 	if (!dma->rx_size)
-		dma->rx_size = PAGE_SIZE;
+		dma->rx_size = TRIGGER_LEVEL;
 
 	dma->rx_buf = dma_alloc_coherent(dma->rxchan->device->dev, dma->rx_size,
-					&dma->rx_addr, GFP_KERNEL);
+			&dma->rx_addr, GFP_KERNEL);
 	if (!dma->rx_buf)
 		goto err;
 
 	/* TX buffer */
 	dma->tx_addr = dma_map_single(dma->txchan->device->dev,
-					p->port.state->xmit.buf,
-					UART_XMIT_SIZE,
-					DMA_TO_DEVICE);
+			p->port.state->xmit.buf,
+			UART_XMIT_SIZE,
+			DMA_TO_DEVICE);
 	if (dma_mapping_error(dma->txchan->device->dev, dma->tx_addr)) {
 		dma_free_coherent(dma->rxchan->device->dev, dma->rx_size,
-				  dma->rx_buf, dma->rx_addr);
+				dma->rx_buf, dma->rx_addr);
 		goto err;
 	}
 
@@ -227,14 +240,14 @@ void serial8250_release_dma(struct uart_8250_port *p)
 	/* Release RX resources */
 	dmaengine_terminate_all(dma->rxchan);
 	dma_free_coherent(dma->rxchan->device->dev, dma->rx_size, dma->rx_buf,
-			  dma->rx_addr);
+			dma->rx_addr);
 	dma_release_channel(dma->rxchan);
 	dma->rxchan = NULL;
 
 	/* Release TX resources */
 	dmaengine_terminate_all(dma->txchan);
 	dma_unmap_single(dma->txchan->device->dev, dma->tx_addr,
-			 UART_XMIT_SIZE, DMA_TO_DEVICE);
+			UART_XMIT_SIZE, DMA_TO_DEVICE);
 	dma_release_channel(dma->txchan);
 	dma->txchan = NULL;
 	dma->tx_running = 0;
diff --git a/drivers/tty/serial/8250/8250_dw.c b/drivers/tty/serial/8250/8250_dw.c
index ed31135..98a94f9 100644
--- a/drivers/tty/serial/8250/8250_dw.c
+++ b/drivers/tty/serial/8250/8250_dw.c
@@ -148,7 +148,17 @@ static unsigned int dw8250_serial_in32(struct uart_port *p, int offset)
 
 	return dw8250_modify_msr(p, offset, value);
 }
+static void dw8250_set_termios(struct uart_port *p, struct ktermios *termios,
+		   struct ktermios *old)
+{
+	struct uart_8250_port *up =
+		container_of(p, struct uart_8250_port, port);
+
+	/* For Quark, hs-uart is capable of auto flow control */
+	up->capabilities |= UART_CAP_AFE;
 
+	serial8250_do_set_termios(p, termios, old);
+}
 static int dw8250_handle_irq(struct uart_port *p)
 {
 	struct dw8250_data *d = p->private_data;
@@ -239,7 +249,7 @@ static int dw8250_probe_of(struct uart_port *p,
 		p->type = PORT_OCTEON;
 		data->usr_reg = 0x27;
 		has_ucv = false;
-	} else if (!of_property_read_u32(np, "reg-io-width", &val)) {
+	}	else if (!of_property_read_u32(np, "reg-io-width", &val)) {
 		switch (val) {
 		case 1:
 			break;
@@ -272,6 +282,96 @@ static int dw8250_probe_of(struct uart_port *p,
 
 	return 0;
 }
+static void _dw8250_mfd_dma_probe(struct uart_8250_port *up,
+					struct uart_8250_port *priv)
+{
+	up->dma->rx_chan_id = priv->dma->rx_chan_id;
+	up->dma->tx_chan_id = priv->dma->tx_chan_id;
+
+	if (priv->dma->fn)
+		up->dma->fn = priv->dma->fn;
+
+	if (priv->dma->txconf.dst_maxburst > 0)
+		up->dma->txconf.dst_maxburst = priv->dma->txconf.dst_maxburst;
+
+	if (priv->dma->rxconf.src_maxburst > 0)
+		up->dma->rxconf.src_maxburst = priv->dma->rxconf.src_maxburst;
+
+	if (priv->dma->tx_param)
+		up->dma->tx_param = priv->dma->tx_param;
+
+	if (priv->dma->rx_param)
+		up->dma->rx_param = priv->dma->rx_param;
+
+	return;
+}
+
+
+static int dw8250_probe_mfd_dev(struct platform_device *pdev,
+				struct uart_8250_port *up,
+				struct dw8250_data *data)
+{
+	struct plat_serial8250_port *pdata;
+	struct uart_8250_port *priv;
+	struct uart_port *p = &up->port;
+
+	/* Bail out if the device doesn't contain platform data */
+	if (NULL == pdev->dev.platform_data) {
+		dev_err(&pdev->dev, "no MFD platform data found!\n");
+		return -ENODEV;
+	}
+	pdata = pdev->dev.platform_data;
+
+	/* Bail out if there is no clock source assignment in platform data */
+	if (0 == pdata->uartclk) {
+		dev_err(&pdev->dev, "no uartclk found.\n");
+		return -ENODEV;
+	}
+	p->uartclk = pdata->uartclk;
+	dw8250_setup_port(up);
+
+	if (pdata->iotype) {
+		p->iotype = pdata->iotype;
+		if (p->iotype == UPIO_MEM32) {
+			p->serial_in = dw8250_serial_in32;
+			p->serial_out = dw8250_serial_out32;
+		}
+	}
+
+	if (pdata->regshift)
+		p->regshift = pdata->regshift;
+
+	p->set_termios = dw8250_set_termios;
+
+	up->dma = &data->dma;
+
+	if (pdata->dma_mapbase)
+		up->dma->mapbase = pdata->dma_mapbase;
+
+	if (pdata->private_data)
+		priv = pdata->private_data;
+	else
+		goto probe_mfd_dev_done;
+
+	if (priv->port.fifosize > 0)
+		p->fifosize = priv->port.fifosize;
+
+	if (priv->tx_loadsz > 0)
+		up->tx_loadsz = priv->tx_loadsz;
+	else
+		up->tx_loadsz = p->fifosize;
+
+	/* Override capabilities if found */
+	if (priv->capabilities > 0)
+		up->capabilities = priv->capabilities;
+
+	/* Override DMA structure if found */
+	if (priv->dma)
+		_dw8250_mfd_dma_probe(up, priv);
+
+probe_mfd_dev_done:
+	return 0;
+}
 
 static int dw8250_probe_acpi(struct uart_8250_port *up,
 			     struct dw8250_data *data)
@@ -287,6 +387,7 @@ static int dw8250_probe_acpi(struct uart_8250_port *up,
 
 	p->iotype = UPIO_MEM32;
 	p->serial_in = dw8250_serial_in32;
+	p->set_termios = dw8250_set_termios;
 	p->serial_out = dw8250_serial_out32;
 	p->regshift = 2;
 
@@ -350,6 +451,7 @@ static int dw8250_probe(struct platform_device *pdev)
 	uart.port.serial_out = dw8250_serial_out;
 	uart.port.private_data = data;
 
+	dw8250_setup_port(&uart);
 	if (pdev->dev.of_node) {
 		err = dw8250_probe_of(&uart.port, data);
 		if (err)
@@ -358,6 +460,10 @@ static int dw8250_probe(struct platform_device *pdev)
 		err = dw8250_probe_acpi(&uart, data);
 		if (err)
 			return err;
+	} else if (strcmp((pdev->dev.type)->name, "mfd_device") == 0) {
+		err = dw8250_probe_mfd_dev(pdev, &uart, data);
+		if (err)
+			return err;
 	} else {
 		return -ENODEV;
 	}
diff --git a/include/linux/dw_dmac.h b/include/linux/dw_dmac.h
index 481ab23..c8a121c 100644
--- a/include/linux/dw_dmac.h
+++ b/include/linux/dw_dmac.h
@@ -59,6 +59,10 @@ struct dw_dma_platform_data {
 	unsigned short	block_size;
 	unsigned char	nr_masters;
 	unsigned char	data_width[4];
+	bool		is_embedded;
+	struct dw_dma_slave	*sd;
+	unsigned int	sd_count;
+	bool		nollp[8];
 };
 
 /* bursts size */
@@ -110,5 +114,6 @@ void dw_dma_cyclic_stop(struct dma_chan *chan);
 dma_addr_t dw_dma_get_src_addr(struct dma_chan *chan);
 
 dma_addr_t dw_dma_get_dst_addr(struct dma_chan *chan);
+bool dw_dma_generic_filter(struct dma_chan *chan, void *param);
 
 #endif /* DW_DMAC_H */
diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 12d803b0..9f76451 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -13,6 +13,7 @@
 
 #include <linux/serial_core.h>
 #include <linux/platform_device.h>
+#include <linux/dmaengine.h>
 
 /*
  * This is the platform device platform_data structure
@@ -21,6 +22,7 @@ struct plat_serial8250_port {
 	unsigned long	iobase;		/* io base address */
 	void __iomem	*membase;	/* ioremap cookie or NULL */
 	resource_size_t	mapbase;	/* resource base */
+	resource_size_t	dma_mapbase;	/* resource base */
 	unsigned int	irq;		/* interrupt number */
 	unsigned long	irqflags;	/* request_irq flags */
 	unsigned int	uartclk;	/* UART clock rate */
-- 
1.7.5.4

