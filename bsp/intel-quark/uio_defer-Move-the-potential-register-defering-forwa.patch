From b62ad57301bb844c988a4cc8c64503f5f28169cb Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Mon, 19 May 2014 11:13:38 +0800
Subject: [PATCH 1/2] uio_defer: Move the potential register defering forward.

Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 drivers/gpio/gpio-sch.c          |   16 +++++++---------
 drivers/mfd/intel_qrk_gip_gpio.c |    5 +++++
 2 files changed, 12 insertions(+), 9 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index 126e207..0c82d67 100755
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -595,6 +595,11 @@ static int __devinit sch_gpio_probe(struct platform_device *pdev)
 	struct sch_gpio *chip;
 	int err, id;
 
+	if (!uio_initialized) {
+		dev_info(&pdev->dev, "UIO core is not ready yet. Deferring..\n");
+		return -EPROBE_DEFER;
+	}
+
 	chip = kzalloc(sizeof(*chip), GFP_KERNEL);
 	if (chip == NULL)
 		return -ENOMEM;
@@ -728,11 +733,6 @@ static int __devinit sch_gpio_probe(struct platform_device *pdev)
 	info->name = "sch_gpio";
 	info->version = "0.0.1";
 
-	if (!uio_initialized) {
-		dev_info(&pdev->dev, "uio core is not ready yet. Deferring..\n");
-		goto err_sch_uio_register;
-	}
-
 	if (uio_register_device(&pdev->dev, info))
 		goto err_sch_uio_register;
 
@@ -755,14 +755,12 @@ err_sch_intr_resume:
 	irq_free_descs(chip->irq_base_core, sch_gpio_core.ngpio);
 
 err_sch_intr_core:
-	err = gpiochip_remove(&sch_gpio_resume);
-	if (err)
+	if (gpiochip_remove(&sch_gpio_resume))
 		dev_err(&pdev->dev, "%s failed, %d\n",
 		"resume gpiochip_remove()", err);
 
 err_sch_gpio_resume:
-	err = gpiochip_remove(&sch_gpio_core);
-	if (err)
+	if (gpiochip_remove(&sch_gpio_core))
 		dev_err(&pdev->dev, "%s failed, %d\n",
 		"core gpiochip_remove()", err);
 
diff --git a/drivers/mfd/intel_qrk_gip_gpio.c b/drivers/mfd/intel_qrk_gip_gpio.c
index ef19e2f..e93ca6f 100644
--- a/drivers/mfd/intel_qrk_gip_gpio.c
+++ b/drivers/mfd/intel_qrk_gip_gpio.c
@@ -499,6 +499,11 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 	int retval = 0;
 	resource_size_t start = 0, len = 0;
 
+	if (!uio_initialized) {
+		dev_info(&pdev->dev, "UIO core is not ready yet. Deferring..\n");
+		return -EPROBE_DEFER;
+	}
+
 	/* Get UIO memory */
 	info = kzalloc(sizeof(struct uio_info), GFP_KERNEL);
 	if (!info)
-- 
1.7.5.4

