From d3bc08ed79246e2b856f538e6c2b7f7b93361c98 Mon Sep 17 00:00:00 2001
From: System User <josel@animal.emutex.com>
Date: Fri, 20 Jun 2014 16:54:00 +0100
Subject: [PATCH 10/65] net: can: slcan: Added XSLCAN version of slcan module

The existing SLCAN supports 1 channel. This patch is created to
support 2 channels.

Signed-off by: David Hunt <dave@emutex.com>
Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Signed-off-by: Naveen Kumar <naveen.kumarx.saini@intel.com>
(cherry picked from 3.8 kernel commit d45b21e10dc782e65afabdc3335bac8433496bb7)

Conflicts:

	drivers/net/can/slcan.c

Change-Id: Iea79733d0107d71ca8f12dd21461f0d5fd43eb11
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4674
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/net/can/slcan.c |  435 +++++++++++++++++++++++++++++------------------
 1 files changed, 272 insertions(+), 163 deletions(-)

diff --git a/drivers/net/can/slcan.c b/drivers/net/can/slcan.c
index 1d0dab8..b0daa98 100644
--- a/drivers/net/can/slcan.c
+++ b/drivers/net/can/slcan.c
@@ -65,46 +65,64 @@ MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Oliver Hartkopp <socketcan@hartkopp.net>");
 
 #define SLCAN_MAGIC 0x53CA
-
-static int maxdev = 10;		/* MAX number of SLCAN channels;
-				   This can be overridden with
-				   insmod slcan.ko maxdev=nnn	*/
-module_param(maxdev, int, 0);
-MODULE_PARM_DESC(maxdev, "Maximum number of slcan interfaces");
+#define MUX_NETDEV_MAX 10
+
+static int maxchannel = 10;	/* MAX number of SLCAN channels;
+				*  This can be overridden with
+				*  insmod slcan.ko maxcahnnel=nnn
+				*/
+module_param(maxchannel, int, 0);
+MODULE_PARM_DESC(maxchannel, "Maximum number of slcan channels");
+
+static int muxnetdevs = 2;	/*	MAX number of net devices multiplexed
+				*	per SLCAN channel;
+				*	This can be overridden with
+				*	insmod slcan.ko muxnetdevs=nnn
+				*/
+module_param(muxnetdevs, int, 0);
+MODULE_PARM_DESC(muxnetdevs, "Max number of netdevs muxed per slcan channel");
 
 /* maximum rx buffer len: extended CAN frame with timestamp */
-#define SLC_MTU (sizeof("T1111222281122334455667788EA5F\r")+1)
+#define SLC_MTU (sizeof("0T1111222281122334455667788EA5F\r")+1)
 
 #define SLC_CMD_LEN 1
 #define SLC_SFF_ID_LEN 3
 #define SLC_EFF_ID_LEN 8
 
-struct slcan {
+struct slcan_channel {
 	int			magic;
 
 	/* Various fields. */
 	struct tty_struct	*tty;		/* ptr to TTY structure	     */
-	struct net_device	*dev;		/* easy for intr handling    */
+	struct net_device	*dev[MUX_NETDEV_MAX];
+	/* easy for intr handling    */
 	spinlock_t		lock;
 	struct work_struct	tx_work;	/* Flushes transmit buffer   */
 
 	/* These are pointers to the malloc()ed frame buffers. */
 	unsigned char		rbuff[SLC_MTU];	/* receiver buffer	     */
 	int			rcount;         /* received chars counter    */
-	unsigned char		xbuff[SLC_MTU];	/* transmitter buffer	     */
-	unsigned char		*xhead;         /* pointer to next XMIT byte */
-	int			xleft;          /* bytes left in XMIT queue  */
 
 	unsigned long		flags;		/* Flag values/ mode etc     */
 #define SLF_INUSE		0		/* Channel in use            */
 #define SLF_ERROR		1               /* Parity, etc. error        */
 };
 
-static struct net_device **slcan_devs;
+struct slcan_dev {
+	struct slcan_channel	*channel;	/* parent slcan channel      */
+	int			addr;
+
+	/* These are pointers to the malloc()ed frame buffers. */
+	unsigned char		xbuff[SLC_MTU];	/* transmitter buffer	     */
+	unsigned char		*xhead;         /* pointer to next XMIT byte */
+	int			xleft;          /* bytes left in XMIT queue  */
+};
+
+static struct slcan_channel **slcan_channels;
 
- /************************************************************************
-  *			SLCAN ENCAPSULATION FORMAT			 *
-  ************************************************************************/
+/************************************************************************
+ *			SLCAN ENCAPSULATION FORMAT			 *
+ ************************************************************************/
 
 /*
  * A CAN frame has a can_id (11 bit standard frame format OR 29 bit extended
@@ -137,31 +155,34 @@ static struct net_device **slcan_devs;
  *
  */
 
- /************************************************************************
-  *			STANDARD SLCAN DECAPSULATION			 *
-  ************************************************************************/
+/************************************************************************
+ *			STANDARD SLCAN DECAPSULATION			 *
+ ************************************************************************/
 
 /* Send one completely decapsulated can_frame to the network layer */
-static void slc_bump(struct slcan *sl)
+static void slc_bump(struct slcan_channel *sl)
 {
 	struct sk_buff *skb;
 	struct can_frame cf;
-	int i, tmp;
+	int i, tmp, ext_frame, dev_idx;
 	u32 tmpid;
 	char *cmd = sl->rbuff;
-
 	cf.can_id = 0;
 
+	/* XSLCAN frame detection */
+	ext_frame = (sl->rbuff[0] >= '0' && sl->rbuff[0] <= '9') ? 1 : 0;
+
 	switch (*cmd) {
 	case 'r':
 		cf.can_id = CAN_RTR_FLAG;
 		/* fallthrough */
 	case 't':
 		/* store dlc ASCII value and terminate SFF CAN ID string */
-		cf.can_dlc = sl->rbuff[SLC_CMD_LEN + SLC_SFF_ID_LEN];
-		sl->rbuff[SLC_CMD_LEN + SLC_SFF_ID_LEN] = 0;
+		cf.can_dlc = sl->rbuff[SLC_CMD_LEN + SLC_SFF_ID_LEN +
+				ext_frame];
+		sl->rbuff[SLC_CMD_LEN + SLC_SFF_ID_LEN + ext_frame] = 0;
 		/* point to payload data behind the dlc */
-		cmd += SLC_CMD_LEN + SLC_SFF_ID_LEN + 1;
+		cmd += SLC_CMD_LEN + SLC_SFF_ID_LEN + ext_frame + 1;
 		break;
 	case 'R':
 		cf.can_id = CAN_RTR_FLAG;
@@ -169,16 +190,17 @@ static void slc_bump(struct slcan *sl)
 	case 'T':
 		cf.can_id |= CAN_EFF_FLAG;
 		/* store dlc ASCII value and terminate EFF CAN ID string */
-		cf.can_dlc = sl->rbuff[SLC_CMD_LEN + SLC_EFF_ID_LEN];
-		sl->rbuff[SLC_CMD_LEN + SLC_EFF_ID_LEN] = 0;
+		cf.can_dlc = sl->rbuff[SLC_CMD_LEN + SLC_EFF_ID_LEN +
+				ext_frame];
+		sl->rbuff[SLC_CMD_LEN + SLC_EFF_ID_LEN + ext_frame] = 0;
 		/* point to payload data behind the dlc */
-		cmd += SLC_CMD_LEN + SLC_EFF_ID_LEN + 1;
+		cmd += SLC_CMD_LEN + SLC_EFF_ID_LEN + ext_frame + 1;
 		break;
 	default:
 		return;
 	}
 
-	if (kstrtou32(sl->rbuff + SLC_CMD_LEN, 16, &tmpid))
+	if (kstrtou32(sl->rbuff + SLC_CMD_LEN + ext_frame, 16, &tmpid))
 		return;
 
 	cf.can_id |= tmpid;
@@ -210,30 +232,34 @@ static void slc_bump(struct slcan *sl)
 	if (!skb)
 		return;
 
-	skb->dev = sl->dev;
+	dev_idx = ext_frame ? sl->rbuff[0] - '0' : 0;
+
+	if (sl->dev[dev_idx] == NULL)
+		return;
+
+	skb->dev = sl->dev[dev_idx];
 	skb->protocol = htons(ETH_P_CAN);
 	skb->pkt_type = PACKET_BROADCAST;
 	skb->ip_summed = CHECKSUM_UNNECESSARY;
 
 	can_skb_reserve(skb);
-	can_skb_prv(skb)->ifindex = sl->dev->ifindex;
+	can_skb_prv(skb)->ifindex = sl->dev[dev_idx]->ifindex;
 
 	memcpy(skb_put(skb, sizeof(struct can_frame)),
 	       &cf, sizeof(struct can_frame));
 	netif_rx_ni(skb);
 
-	sl->dev->stats.rx_packets++;
-	sl->dev->stats.rx_bytes += cf.can_dlc;
+	sl->dev[dev_idx]->stats.rx_packets++;
+	sl->dev[dev_idx]->stats.rx_bytes += cf.can_dlc;
 }
 
 /* parse tty input stream */
-static void slcan_unesc(struct slcan *sl, unsigned char s)
+static void slcan_unesc(struct slcan_channel *sl, unsigned char s)
 {
 	if ((s == '\r') || (s == '\a')) { /* CR or BEL ends the pdu */
 		if (!test_and_clear_bit(SLF_ERROR, &sl->flags) &&
-		    (sl->rcount > 4))  {
+		    (sl->rcount > 4))
 			slc_bump(sl);
-		}
 		sl->rcount = 0;
 	} else {
 		if (!test_bit(SLF_ERROR, &sl->flags))  {
@@ -241,60 +267,53 @@ static void slcan_unesc(struct slcan *sl, unsigned char s)
 				sl->rbuff[sl->rcount++] = s;
 				return;
 			} else {
-				sl->dev->stats.rx_over_errors++;
+				sl->dev[0]->stats.rx_over_errors++;
 				set_bit(SLF_ERROR, &sl->flags);
 			}
 		}
 	}
 }
 
- /************************************************************************
-  *			STANDARD SLCAN ENCAPSULATION			 *
-  ************************************************************************/
+/************************************************************************
+ *			STANDARD SLCAN ENCAPSULATION			 *
+ ************************************************************************/
 
 /* Encapsulate one can_frame and stuff into a TTY queue. */
-static void slc_encaps(struct slcan *sl, struct can_frame *cf)
+static void slc_encaps(struct slcan_dev *sl_dev, struct can_frame *cf,
+		       int dev_idx)
 {
-	int actual, i;
-	unsigned char *pos;
-	unsigned char *endpos;
-	canid_t id = cf->can_id;
-
-	pos = sl->xbuff;
+	int actual, idx, i;
+	char cmd, if_idx;
 
 	if (cf->can_id & CAN_RTR_FLAG)
-		*pos = 'R'; /* becomes 'r' in standard frame format (SFF) */
+		cmd = 'R'; /* becomes 'r' in standard frame format (SFF) */
 	else
-		*pos = 'T'; /* becomes 't' in standard frame format (SSF) */
-
-	/* determine number of chars for the CAN-identifier */
-	if (cf->can_id & CAN_EFF_FLAG) {
-		id &= CAN_EFF_MASK;
-		endpos = pos + SLC_EFF_ID_LEN;
+		cmd = 'T'; /* becomes 't' in standard frame format (SSF) */
+
+	if (muxnetdevs < 2) {
+		if (cf->can_id & CAN_EFF_FLAG)
+			sprintf(sl_dev->xbuff, "%c%08X%d", cmd,
+				cf->can_id & CAN_EFF_MASK, cf->can_dlc);
+		else
+			sprintf(sl_dev->xbuff, "%c%03X%d", cmd | 0x20,
+				cf->can_id & CAN_SFF_MASK, cf->can_dlc);
 	} else {
-		*pos |= 0x20; /* convert R/T to lower case for SFF */
-		id &= CAN_SFF_MASK;
-		endpos = pos + SLC_SFF_ID_LEN;
-	}
-
-	/* build 3 (SFF) or 8 (EFF) digit CAN identifier */
-	pos++;
-	while (endpos >= pos) {
-		*endpos-- = hex_asc_upper[id & 0xf];
-		id >>= 4;
+		if_idx = dev_idx + '0';
+		if (cf->can_id & CAN_EFF_FLAG)
+			sprintf(sl_dev->xbuff, "%c%c%08X%d", if_idx, cmd,
+				cf->can_id & CAN_EFF_MASK, cf->can_dlc);
+		else
+			sprintf(sl_dev->xbuff, "%c%c%03X%d", if_idx,
+				cmd | 0x20,
+				cf->can_id & CAN_SFF_MASK, cf->can_dlc);
 	}
 
-	pos += (cf->can_id & CAN_EFF_FLAG) ? SLC_EFF_ID_LEN : SLC_SFF_ID_LEN;
-
-	*pos++ = cf->can_dlc + '0';
+	idx = strlen(sl_dev->xbuff);
 
-	/* RTR frames may have a dlc > 0 but they never have any data bytes */
-	if (!(cf->can_id & CAN_RTR_FLAG)) {
-		for (i = 0; i < cf->can_dlc; i++)
-			pos = hex_byte_pack_upper(pos, cf->data[i]);
-	}
+	for (i = 0; i < cf->can_dlc; i++)
+		sprintf(&sl_dev->xbuff[idx + 2 * i], "%02X", cf->data[i]);
 
-	*pos++ = '\r';
+	strcat(sl_dev->xbuff, "\r"); /* add terminating character */
 
 	/* Order of next two lines is *very* important.
 	 * When we are sending a little amount of data,
@@ -304,40 +323,55 @@ static void slc_encaps(struct slcan *sl, struct can_frame *cf)
 	 * if we did not request it before write operation.
 	 *       14 Oct 1994  Dmitry Gorodchanin.
 	 */
-	set_bit(TTY_DO_WRITE_WAKEUP, &sl->tty->flags);
-	actual = sl->tty->ops->write(sl->tty, sl->xbuff, pos - sl->xbuff);
-	sl->xleft = (pos - sl->xbuff) - actual;
-	sl->xhead = sl->xbuff + actual;
-	sl->dev->stats.tx_bytes += cf->can_dlc;
+	set_bit(TTY_DO_WRITE_WAKEUP, &sl_dev->channel->tty->flags);
+	actual = sl_dev->channel->tty->ops->write(sl_dev->channel->tty,
+			sl_dev->xbuff,
+			strlen(sl_dev->xbuff));
+
+	sl_dev->xleft = strlen(sl_dev->xbuff) - actual;
+	sl_dev->xhead = sl_dev->xbuff + actual;
+	sl_dev->channel->dev[dev_idx]->stats.tx_bytes += cf->can_dlc;
 }
 
 /* Write out any remaining transmit buffer. Scheduled when tty is writable */
 static void slcan_transmit(struct work_struct *work)
 {
-	struct slcan *sl = container_of(work, struct slcan, tx_work);
-	int actual;
+	struct slcan_channel *sl = container_of(work, struct slcan_channel,
+					 tx_work);
+	int actual, i;
+	struct slcan_dev *sl_dev;
 
 	spin_lock_bh(&sl->lock);
 	/* First make sure we're connected. */
-	if (!sl->tty || sl->magic != SLCAN_MAGIC || !netif_running(sl->dev)) {
+	if (!sl || sl->magic != SLCAN_MAGIC) {
 		spin_unlock_bh(&sl->lock);
 		return;
 	}
 
-	if (sl->xleft <= 0)  {
-		/* Now serial buffer is almost free & we can start
-		 * transmission of another packet */
-		sl->dev->stats.tx_packets++;
-		clear_bit(TTY_DO_WRITE_WAKEUP, &sl->tty->flags);
-		spin_unlock_bh(&sl->lock);
-		netif_wake_queue(sl->dev);
-		return;
-	}
+	for (i = 0; i < muxnetdevs; i++) {
+
+		if (!netif_running(sl->dev[i]))
+			continue;
 
-	actual = sl->tty->ops->write(sl->tty, sl->xhead, sl->xleft);
-	sl->xleft -= actual;
-	sl->xhead += actual;
+		sl_dev = netdev_priv(sl->dev[i]);
+
+		if (sl_dev->xleft <= 0)  {
+			/* Now serial buffer is almost free & we can start
+			 * transmission of another packet
+			 */
+			sl->dev[i]->stats.tx_packets++;
+			clear_bit(TTY_DO_WRITE_WAKEUP, &sl->tty->flags);
+			netif_wake_queue(sl->dev[i]);
+			continue;
+		}
+
+		actual = sl->tty->ops->write(sl->tty, sl_dev->xhead,
+					 sl_dev->xleft);
+		sl_dev->xleft -= actual;
+		sl_dev->xhead += actual;
+	}
 	spin_unlock_bh(&sl->lock);
+
 }
 
 /*
@@ -346,15 +380,16 @@ static void slcan_transmit(struct work_struct *work)
  */
 static void slcan_write_wakeup(struct tty_struct *tty)
 {
-	struct slcan *sl = tty->disc_data;
-
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
 	schedule_work(&sl->tx_work);
 }
 
 /* Send a can_frame to a TTY queue. */
 static netdev_tx_t slc_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-	struct slcan *sl = netdev_priv(dev);
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
 
 	if (skb->len != sizeof(struct can_frame))
 		goto out;
@@ -370,8 +405,9 @@ static netdev_tx_t slc_xmit(struct sk_buff *skb, struct net_device *dev)
 		goto out;
 	}
 
-	netif_stop_queue(sl->dev);
-	slc_encaps(sl, (struct can_frame *) skb->data); /* encaps & send */
+	netif_stop_queue(sl->dev[sl_dev->addr]);
+	slc_encaps(sl_dev, (struct can_frame *) skb->data,
+		   sl_dev->addr); /* encaps & send */
 	spin_unlock(&sl->lock);
 
 out:
@@ -387,7 +423,9 @@ out:
 /* Netdevice UP -> DOWN routine */
 static int slc_close(struct net_device *dev)
 {
-	struct slcan *sl = netdev_priv(dev);
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
 
 	spin_lock_bh(&sl->lock);
 	if (sl->tty) {
@@ -396,7 +434,7 @@ static int slc_close(struct net_device *dev)
 	}
 	netif_stop_queue(dev);
 	sl->rcount   = 0;
-	sl->xleft    = 0;
+	sl_dev->xleft    = 0;
 	spin_unlock_bh(&sl->lock);
 
 	return 0;
@@ -405,7 +443,9 @@ static int slc_close(struct net_device *dev)
 /* Netdevice DOWN -> UP routine */
 static int slc_open(struct net_device *dev)
 {
-	struct slcan *sl = netdev_priv(dev);
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
 
 	if (sl->tty == NULL)
 		return -ENODEV;
@@ -418,9 +458,33 @@ static int slc_open(struct net_device *dev)
 /* Hook the destructor so we can free slcan devs at the right point in time */
 static void slc_free_netdev(struct net_device *dev)
 {
-	int i = dev->base_addr;
+	int dev_idx, devs_in_use, i;
+
+	struct slcan_dev *sl_dev = netdev_priv(dev);
+
+	struct slcan_channel *sl = sl_dev->channel;
+
+	dev_idx = sl_dev->addr;
+
 	free_netdev(dev);
-	slcan_devs[i] = NULL;
+
+	sl->dev[dev_idx] = NULL;
+
+	devs_in_use = 0;
+
+	for (i = 0; i < muxnetdevs; i++) {
+		if (sl->dev[i] != 0)
+			devs_in_use++;
+	}
+
+	/* Free slcan_channel when not referencing any netdev. */
+	if (devs_in_use == 0) {
+		for (i = 0; i < maxchannel; i++) {
+			if (sl == slcan_channels[i])
+				slcan_channels[i] = NULL;
+		}
+		kfree(sl);
+	}
 }
 
 static const struct net_device_ops slc_netdev_ops = {
@@ -462,16 +526,19 @@ static void slc_setup(struct net_device *dev)
 static void slcan_receive_buf(struct tty_struct *tty,
 			      const unsigned char *cp, char *fp, int count)
 {
-	struct slcan *sl = (struct slcan *) tty->disc_data;
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
 
-	if (!sl || sl->magic != SLCAN_MAGIC || !netif_running(sl->dev))
+	if (!sl || sl->magic != SLCAN_MAGIC)
+		return;
+
+	if (!netif_running(sl->dev[0]))
 		return;
 
 	/* Read the characters out of the buffer */
 	while (count--) {
 		if (fp && *fp++) {
 			if (!test_and_set_bit(SLF_ERROR, &sl->flags))
-				sl->dev->stats.rx_errors++;
+				sl->dev[0]->stats.rx_errors++;
 			cp++;
 			continue;
 		}
@@ -486,56 +553,79 @@ static void slcan_receive_buf(struct tty_struct *tty,
 /* Collect hanged up channels */
 static void slc_sync(void)
 {
-	int i;
-	struct net_device *dev;
-	struct slcan	  *sl;
+	int i, j;
+	struct slcan_channel *sl;
 
-	for (i = 0; i < maxdev; i++) {
-		dev = slcan_devs[i];
-		if (dev == NULL)
+	for (i = 0; i < maxchannel; i++) {
+		sl = slcan_channels[i];
+		if (sl == NULL)
 			break;
 
-		sl = netdev_priv(dev);
 		if (sl->tty)
 			continue;
-		if (dev->flags & IFF_UP)
-			dev_close(dev);
+
+		for (j = 0; j < muxnetdevs; j++) {
+
+			if (sl->dev[i] == NULL)
+				continue;
+
+			if (sl->dev[i]->flags & IFF_UP)
+				dev_close(sl->dev[i]);
+		}
 	}
 }
 
 /* Find a free SLCAN channel, and link in this `tty' line. */
-static struct slcan *slc_alloc(dev_t line)
+static struct slcan_channel *slc_alloc(dev_t line)
 {
-	int i;
+	int i, j;
 	char name[IFNAMSIZ];
 	struct net_device *dev = NULL;
-	struct slcan       *sl;
+	struct slcan_channel *sl;
+	struct slcan_dev *sl_dev;
 
-	for (i = 0; i < maxdev; i++) {
-		dev = slcan_devs[i];
-		if (dev == NULL)
+	for (i = 0; i < maxchannel; i++) {
+		sl = slcan_channels[i];
+		if (sl == NULL)
 			break;
 
 	}
 
 	/* Sorry, too many, all slots in use */
-	if (i >= maxdev)
+	if (i >= maxchannel)
 		return NULL;
 
-	sprintf(name, "slcan%d", i);
-	dev = alloc_netdev(sizeof(*sl), name, slc_setup);
-	if (!dev)
+	sl = kzalloc(sizeof(struct slcan_channel), GFP_KERNEL);
+
+	if (!sl)
 		return NULL;
 
-	dev->base_addr  = i;
-	sl = netdev_priv(dev);
+	for (j = 0; j < MUX_NETDEV_MAX; j++)
+		sl->dev[j] = NULL;
+
+	for (j = 0; j < muxnetdevs; j++) {
+		sprintf(name, "slcan%d", i * muxnetdevs + j);
+
+		dev = alloc_netdev(sizeof(*sl_dev), name, slc_setup);
+		if (!dev)
+			return NULL;
+
+		dev->base_addr  = i * muxnetdevs + j;
+		sl_dev = netdev_priv(dev);
+
+		sl_dev->channel = sl;
+		sl_dev->addr = j;
+		sl_dev->xleft = 0;
+
+		sl->dev[j] = dev;
+	}
 
 	/* Initialize channel control data */
 	sl->magic = SLCAN_MAGIC;
-	sl->dev	= dev;
+
 	spin_lock_init(&sl->lock);
 	INIT_WORK(&sl->tx_work, slcan_transmit);
-	slcan_devs[i] = dev;
+	slcan_channels[i] = sl;
 
 	return sl;
 }
@@ -552,8 +642,8 @@ static struct slcan *slc_alloc(dev_t line)
 
 static int slcan_open(struct tty_struct *tty)
 {
-	struct slcan *sl;
-	int err;
+	struct slcan_channel *sl;
+	int err, i;
 
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
@@ -577,6 +667,7 @@ static int slcan_open(struct tty_struct *tty)
 	if (sl && sl->magic == SLCAN_MAGIC)
 		goto err_exit;
 
+
 	/* OK.  Find a free SLCAN channel to use. */
 	err = -ENFILE;
 	sl = slc_alloc(tty_devnum(tty));
@@ -589,13 +680,15 @@ static int slcan_open(struct tty_struct *tty)
 	if (!test_bit(SLF_INUSE, &sl->flags)) {
 		/* Perform the low-level SLCAN initialization. */
 		sl->rcount   = 0;
-		sl->xleft    = 0;
 
 		set_bit(SLF_INUSE, &sl->flags);
 
-		err = register_netdevice(sl->dev);
-		if (err)
-			goto err_free_chan;
+		for (i = 0; i < muxnetdevs; i++) {
+
+			err = register_netdevice(sl->dev[i]);
+			if (err)
+				goto err_free_chan;
+		}
 	}
 
 	/* Done.  We have linked the TTY line to a channel. */
@@ -627,7 +720,9 @@ err_exit:
 
 static void slcan_close(struct tty_struct *tty)
 {
-	struct slcan *sl = (struct slcan *) tty->disc_data;
+	int i;
+
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
 
 	/* First make sure we're connected. */
 	if (!sl || sl->magic != SLCAN_MAGIC || sl->tty != tty)
@@ -641,7 +736,8 @@ static void slcan_close(struct tty_struct *tty)
 	flush_work(&sl->tx_work);
 
 	/* Flush network side */
-	unregister_netdev(sl->dev);
+	for (i = 0; i < muxnetdevs; i++)
+		unregister_netdev(sl->dev[i]);
 	/* This will complete via sl_free_netdev */
 }
 
@@ -655,7 +751,7 @@ static int slcan_hangup(struct tty_struct *tty)
 static int slcan_ioctl(struct tty_struct *tty, struct file *file,
 		       unsigned int cmd, unsigned long arg)
 {
-	struct slcan *sl = (struct slcan *) tty->disc_data;
+	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
 	unsigned int tmp;
 
 	/* First make sure we're connected. */
@@ -664,8 +760,8 @@ static int slcan_ioctl(struct tty_struct *tty, struct file *file,
 
 	switch (cmd) {
 	case SIOCGIFNAME:
-		tmp = strlen(sl->dev->name) + 1;
-		if (copy_to_user((void __user *)arg, sl->dev->name, tmp))
+		tmp = strlen(sl->dev[0]->name) + 1;
+		if (copy_to_user((void __user *)arg, sl->dev[0]->name, tmp))
 			return -EFAULT;
 		return 0;
 
@@ -693,21 +789,32 @@ static int __init slcan_init(void)
 {
 	int status;
 
-	if (maxdev < 4)
-		maxdev = 4; /* Sanity */
+	if (maxchannel < 4)
+		maxchannel = 4; /* Sanity */
+
+	if (muxnetdevs < 1)
+		muxnetdevs = 1;
+
+	if (muxnetdevs > MUX_NETDEV_MAX)
+		muxnetdevs = MUX_NETDEV_MAX;
 
 	printk(banner);
-	printk(KERN_INFO "slcan: %d dynamic interface channels.\n", maxdev);
+	printk(KERN_INFO "slcan: %d dynamic interface channels.\n", maxchannel);
 
-	slcan_devs = kzalloc(sizeof(struct net_device *)*maxdev, GFP_KERNEL);
-	if (!slcan_devs)
+	if (muxnetdevs > 1)
+		printk(KERN_INFO "slcan: xslcan multiplexer enabled ratio %d:1.\n",
+		       muxnetdevs);
+
+	slcan_channels = kzalloc(sizeof(struct slcan_channel *)*maxchannel,
+					GFP_KERNEL);
+	if (!slcan_channels)
 		return -ENOMEM;
 
 	/* Fill in our line protocol discipline, and register it */
 	status = tty_register_ldisc(N_SLCAN, &slc_ldisc);
 	if (status)  {
 		printk(KERN_ERR "slcan: can't register line discipline\n");
-		kfree(slcan_devs);
+		kfree(slcan_channels);
 	}
 	return status;
 }
@@ -715,12 +822,11 @@ static int __init slcan_init(void)
 static void __exit slcan_exit(void)
 {
 	int i;
-	struct net_device *dev;
-	struct slcan *sl;
+	struct slcan_channel *sl;
 	unsigned long timeout = jiffies + HZ;
 	int busy = 0;
 
-	if (slcan_devs == NULL)
+	if (slcan_channels == NULL)
 		return;
 
 	/* First of all: check for active disciplines and hangup them.
@@ -730,11 +836,11 @@ static void __exit slcan_exit(void)
 			msleep_interruptible(100);
 
 		busy = 0;
-		for (i = 0; i < maxdev; i++) {
-			dev = slcan_devs[i];
-			if (!dev)
+		for (i = 0; i < maxchannel; i++) {
+
+			sl = slcan_channels[i];
+			if (!sl)
 				continue;
-			sl = netdev_priv(dev);
 			spin_lock_bh(&sl->lock);
 			if (sl->tty) {
 				busy++;
@@ -747,25 +853,28 @@ static void __exit slcan_exit(void)
 	/* FIXME: hangup is async so we should wait when doing this second
 	   phase */
 
-	for (i = 0; i < maxdev; i++) {
-		dev = slcan_devs[i];
-		if (!dev)
+	for (i = 0; i < maxchannel; i++) {
+		sl = slcan_channels[i];
+		if (!sl)
 			continue;
-		slcan_devs[i] = NULL;
+		slcan_channels[i] = NULL;
 
-		sl = netdev_priv(dev);
 		if (sl->tty) {
 			printk(KERN_ERR "%s: tty discipline still running\n",
-			       dev->name);
+			       sl->dev[i]->name);
 			/* Intentionally leak the control block. */
-			dev->destructor = NULL;
+			sl->dev[i]->destructor = NULL;
 		}
 
-		unregister_netdev(dev);
+		if (sl->dev[i] == NULL)
+			continue;
+
+		for (i = 0; i < muxnetdevs; i++)
+			unregister_netdev(sl->dev[i]);
 	}
 
-	kfree(slcan_devs);
-	slcan_devs = NULL;
+	kfree(slcan_channels);
+	slcan_channels = NULL;
 
 	i = tty_unregister_ldisc(N_SLCAN);
 	if (i)
-- 
1.7.5.4

