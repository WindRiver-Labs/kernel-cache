From b8be68d502284b35761292cec3e42efa49f52947 Mon Sep 17 00:00:00 2001
From: William Rafferty <william.a.rafferty@intel.com>
Date: Fri, 12 Jun 2015 18:08:22 +0100
Subject: [PATCH 42/65] gpio-sch: Corrected wakeup GPIO Usage

Signed-off-by: William Rafferty <william.a.rafferty@intel.com>
Change-Id: I9e888e96dd2774d67c899ef5c616612b1cbe39a3
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5352
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |   42 +++++++++++++++++++++++-------------------
 1 files changed, 23 insertions(+), 19 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index c0d2664..ad0e976 100755
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -45,8 +45,8 @@
 
 #define RESUME_WELL_OFFSET	0x20
 
-/* Maximum number of GPIOS supported by this driver */
-#define MAX_GPIO_IRQS	9
+/* Maximum number of GPIOs supported by this driver */
+#define MAX_GPIO	64
 
 /* Cache register context */
 struct sch_gpio_context {
@@ -71,10 +71,11 @@ struct sch_gpio {
 	int irq;
 	int irq_base;
 	bool irq_support;
-	DECLARE_BITMAP(wake_irqs, MAX_GPIO_IRQS);
+	DECLARE_BITMAP(wake_irqs, MAX_GPIO);
 };
 
-#define to_sch_gpio(gc)	container_of(gc, struct sch_gpio, chip)
+#define to_sch_gpio(gc)		container_of(gc, struct sch_gpio, chip)
+#define irq_to_gpio_number()	(d->irq - sch->irq_base)
 
 static unsigned sch_gpio_offset(struct sch_gpio *sch, unsigned gpio,
 				unsigned reg)
@@ -204,13 +205,13 @@ static void sch_gpio_irq_enable(struct irq_data *d)
 	u32 gpio_num;
 	unsigned long flags;
 
-	gpio_num = d->irq - sch->irq_base;
+	gpio_num = irq_to_gpio_number();
 
 	spin_lock_irqsave(&sch->lock, flags);
 
-	if(regs->gtpe & BIT(gpio_num))
+	if (regs->gtpe & BIT(gpio_num))
 		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 1);
-	if(regs->gtne & BIT(gpio_num))
+	if (regs->gtne & BIT(gpio_num))
 		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 1);
 	sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 1);
 
@@ -223,7 +224,7 @@ static void sch_gpio_irq_disable(struct irq_data *d)
 	u32 gpio_num;
 	unsigned long flags;
 
-	gpio_num = d->irq - sch->irq_base;
+	gpio_num = irq_to_gpio_number();
 
 	if (!test_bit(gpio_num, sch->wake_irqs)) {
 		spin_lock_irqsave(&sch->lock, flags);
@@ -240,7 +241,7 @@ static void sch_gpio_irq_ack(struct irq_data *d)
 	struct sch_gpio *sch = irq_data_get_irq_chip_data(d);
 	u32 gpio_num;
 
-	gpio_num = d->irq - sch->irq_base;
+	gpio_num = irq_to_gpio_number();
 	sch_gpio_reg_set(&(sch->chip), gpio_num, GTS, 1);
 }
 
@@ -251,7 +252,7 @@ static int sch_gpio_irq_type(struct irq_data *d, unsigned type)
 	unsigned long flags;
 	u32 gpio_num;
 
-	gpio_num = d->irq - sch->irq_base;
+	gpio_num = irq_to_gpio_number();
 
 	spin_lock_irqsave(&sch->lock, flags);
 
@@ -296,8 +297,7 @@ static int sch_gpio_irq_type(struct irq_data *d, unsigned type)
  * Enables/Disables power-management wake-on of an IRQ.
  * Inhibits disabling of the specified IRQ if on != 0.
  * Make sure you call it via irq_set_irq_wake() with on = 1 during suspend
- * and
- * with on = 0 during resume.
+ * and with on = 0 during resume.
  * Returns 0 if success, negative error code otherwhise
  */
 int sch_gpio_resume_irq_set_wake(struct irq_data *d, unsigned int on)
@@ -307,17 +307,21 @@ int sch_gpio_resume_irq_set_wake(struct irq_data *d, unsigned int on)
 	int ret = 0;
 
 	if (NULL == d) {
-		pr_err("%s(): Null irq_data\n", __func__);
+		dev_err(sch->chip.dev, "null irq_data\n");
 		ret = -EFAULT;
 		goto end;
 	}
-	gpio_num = d->irq - sch->irq_base;
-	if (gpio_num >= MAX_GPIO_IRQS) {
-		pr_err("%s(): gpio_num bigger(%d) than MAX_GPIO_IRQS(%d)-1\n",
-				__func__, gpio_num, MAX_GPIO_IRQS);
+
+	gpio_num = irq_to_gpio_number();
+	/* This function is only relavent on resume well GPIO */
+	if (gpio_num < sch->resume_base) {
+		dev_err(sch->chip.dev,
+				"unable to change wakeup on core well GPIO%d\n",
+				gpio_num);
 		ret = -EINVAL;
 		goto end;
 	}
+
 	if (on)
 		set_bit(gpio_num, sch->wake_irqs);
 	else
@@ -333,7 +337,7 @@ static struct irq_chip sch_irq_chip = {
 	.irq_ack	= sch_gpio_irq_ack,
 	.irq_set_type	= sch_gpio_irq_type,
 	.irq_set_wake	= sch_gpio_resume_irq_set_wake,
- };
+};
 
 static void sch_gpio_irqs_init(struct sch_gpio *sch)
 {
@@ -498,7 +502,7 @@ static int sch_gpio_probe(struct platform_device *pdev)
 				  KBUILD_MODNAME, sch);
 		if (err) {
 			dev_err(&pdev->dev,
-				"%s failed to request IRQ\n", __func__);
+				"failed to request IRQ\n");
 			goto err_sch_request_irq;
 		}
 
-- 
1.7.5.4

