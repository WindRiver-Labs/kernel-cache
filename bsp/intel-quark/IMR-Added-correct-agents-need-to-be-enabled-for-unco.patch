From a1e62589fd1033b7d1a9f257f3b1b972870cc980 Mon Sep 17 00:00:00 2001
From: "Arumugam,Kamenee" <kamenee.arumugam@intel.com>
Date: Thu, 18 Jun 2015 15:38:10 +0800
Subject: [PATCH 36/65] IMR: Added correct agents need to be enabled for
 uncompressed kernel data IMR based on Quark
 requirement.

Below listed agents that need to be enabled for uncompressed
kernel:
Read access: eSRAM Flush/Init + Non-SMM CPU0
Write access: eSRAM Flush/Init + Non-SMM + CPU snoops

Note. CPU snoop will only preform write access.

Signed-off-by: Arumugam,Kamenee <kamenee.arumugam@intel.com>
Change-Id: I35b20681ec9c3c0a7f49701f4d42dc1a9a7be8df
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5334
Reviewed-by: Ji, Kai <kai.ji@intel.com>
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 arch/x86/platform/intel-quark/imr.c |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/arch/x86/platform/intel-quark/imr.c b/arch/x86/platform/intel-quark/imr.c
index 105a796..3f084ca 100644
--- a/arch/x86/platform/intel-quark/imr.c
+++ b/arch/x86/platform/intel-quark/imr.c
@@ -632,7 +632,8 @@ static void __init imr_fixup_memmap(struct imr_device *idev)
 	 * from the beginning of the .text secton to the end of the
 	 * .init_begin section as one physically contiguous block.
 	 */
-	ret = imr_add_range(base, size, IMR_CPU, IMR_CPU, true);
+	ret = imr_add_range(base, size, IMR_CPU|IMR_ESRAM_FLUSH, 
+		IMR_CPU|IMR_ESRAM_FLUSH|IMR_CPU_SNOOP, true);
 	if (ret < 0) {
 		pr_err("unable to setup IMR for kernel: (%p - %p)\n",
 			&_text, &__init_begin);
-- 
1.7.5.4

