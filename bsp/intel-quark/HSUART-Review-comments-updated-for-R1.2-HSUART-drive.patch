From 4fb19b365fdf912d5c49b9bd76bb99591060ef48 Mon Sep 17 00:00:00 2001
From: "vasudevan,krishna prasath" <krishna.prasathx.k.vasudevan@intel.com>
Date: Thu, 30 Jul 2015 17:16:01 +0700
Subject: [PATCH 4/8] HSUART:Review comments updated for R1.2 HSUART driver

The racey global variable issue is fixed,it is replaced
by the platform specific variable in the 8250_port
structure,the 8250_port struct will have separate instance
for each tty,hence race condition will be avoided while ier
value is saved, when both tty are working simultaneously.

Signed-off-by: vasudevan,krishna prasath <krishna.prasathx.k.vasudevan@intel.com>

Change-Id: Ia55f8dc0bab821b633834e3f9f02fbb76aaedba6
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5500
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Vasudevan, Krishna PrasathX K <krishna.prasathx.k.vasudevan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/dma/dw/core.c               |    4 +-
 drivers/tty/serial/8250/8250.h      |    2 -
 drivers/tty/serial/8250/8250_core.c |    7 +++
 drivers/tty/serial/8250/8250_dma.c  |   76 +++++++++++++++++++++--------------
 drivers/tty/serial/8250/8250_dw.c   |    3 +-
 include/linux/dw_dmac.h             |    6 +--
 include/linux/serial_8250.h         |    3 +
 7 files changed, 61 insertions(+), 40 deletions(-)

diff --git a/drivers/dma/dw/core.c b/drivers/dma/dw/core.c
index 6f2d842..b43779d 100644
--- a/drivers/dma/dw/core.c
+++ b/drivers/dma/dw/core.c
@@ -1606,8 +1606,8 @@ int dw_dma_probe(struct dw_dma_chip *chip, struct dw_dma_platform_data *pdata)
 			dwc->block_size = pdata->block_size;
 
 			/* Check if channel supports multi block transfer */
-			/*if nollp flag is not set, it causes race condition
-			as this flag used in dwc_do_start*/
+			/* In Quark SoC, nollp flag is enabled by DMA
+			 * controller,hence forcing nollp flag to 1 */
 
 			if (pdata->nollp[i] == true) {
 				dwc->nollp = 1;
diff --git a/drivers/tty/serial/8250/8250.h b/drivers/tty/serial/8250/8250.h
index 6773612..9460924 100644
--- a/drivers/tty/serial/8250/8250.h
+++ b/drivers/tty/serial/8250/8250.h
@@ -43,7 +43,6 @@ struct uart_8250_dma {
 	resource_size_t	mapbase;	/* resource base */
 };
 
-
 struct old_serial_port {
 	unsigned int uart;
 	unsigned int baud_base;
@@ -82,7 +81,6 @@ struct serial8250_config {
 #define PROBE_RSA	(1 << 0)
 #define PROBE_ANY	(~0)
 #define HIGH_BITS_OFFSET ((sizeof(long)-sizeof(int))*8)
-#define TRIGGER_LEVEL 8
 #ifdef CONFIG_SERIAL_8250_SHARE_IRQ
 #define SERIAL8250_SHARE_IRQS 1
 #else
diff --git a/drivers/tty/serial/8250/8250_core.c b/drivers/tty/serial/8250/8250_core.c
index 09c191a..32f9816 100644
--- a/drivers/tty/serial/8250/8250_core.c
+++ b/drivers/tty/serial/8250/8250_core.c
@@ -2413,7 +2413,14 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	 * have sufficient FIFO entries for the latency of the remote
 	 * UART to respond.  IOW, at least 32 bytes of FIFO.
 	 */
+
+#ifdef CONFIG_X86_INTEL_QUARK
+	/* Quark SoC has only 16 bytes FIFO and AFE is required for
+	 * higher baud rates to avoid overflow */
 	if (up->capabilities & UART_CAP_AFE) {
+#else
+	if (up->capabilities & UART_CAP_AFE && port->fifosize >= 32) {
+#endif
 		up->mcr &= ~UART_MCR_AFE;
 		if (termios->c_cflag & CRTSCTS)
 			up->mcr |= UART_MCR_AFE;
diff --git a/drivers/tty/serial/8250/8250_dma.c b/drivers/tty/serial/8250/8250_dma.c
index 91d175c..b1734d2f 100644
--- a/drivers/tty/serial/8250/8250_dma.c
+++ b/drivers/tty/serial/8250/8250_dma.c
@@ -16,7 +16,9 @@
 
 #include "8250.h"
 
-struct uart_8250_port uart_8250_priv;
+#ifdef CONFIG_X86_INTEL_QUARK
+#define TRIGGER_LEVEL 8
+#endif
 
 static void __dma_tx_complete(void *param)
 {
@@ -26,7 +28,7 @@ static void __dma_tx_complete(void *param)
 	unsigned long	flags;
 
 	dma_sync_single_for_cpu(dma->txchan->device->dev, dma->tx_addr,
-			UART_XMIT_SIZE, DMA_TO_DEVICE);
+				UART_XMIT_SIZE, DMA_TO_DEVICE);
 
 	spin_lock_irqsave(&p->port.lock, flags);
 
@@ -50,21 +52,29 @@ static void __dma_rx_complete(void *param)
 	struct uart_8250_port	*p = param;
 	struct uart_8250_dma	*dma = p->dma;
 	struct tty_port		*tty_port = &p->port.state->port;
+	struct dma_tx_state     state;
+	int			count;
 
 	dma_sync_single_for_cpu(dma->rxchan->device->dev, dma->rx_addr,
 				dma->rx_size, DMA_FROM_DEVICE);
 
+	dmaengine_tx_status(dma->rxchan, dma->rx_cookie, &state);
 	dmaengine_terminate_all(dma->rxchan);
 
-	tty_insert_flip_string(tty_port, dma->rx_buf, dma->rx_size);
-	p->port.icount.rx += dma->rx_size;
+#ifdef CONFIG_X86_INTEL_QUARK
+	count = dma->rx_size;
+#else
+	count = dma->rx_size - state.residue;
+#endif
+	tty_insert_flip_string(tty_port, dma->rx_buf, count);
+	p->port.icount.rx += count;
 
 	tty_flip_buffer_push(tty_port);
 
-	/*Enabling the Interrupts Line status and Receive buffer*/
 #ifdef CONFIG_X86_INTEL_QUARK
-	serial_out(p, UART_IER, (uart_8250_priv.ier | (UART_IER_RLSI |
-				UART_IER_RDI)));
+	/* Enabling the Interrupts Line status and Receive buffer */
+	serial_out(p, UART_IER, (p->saved_ier | (UART_IER_RLSI |
+		   UART_IER_RDI)));
 #endif
 }
 
@@ -75,7 +85,7 @@ int serial8250_tx_dma(struct uart_8250_port *p)
 	struct dma_async_tx_descriptor	*desc;
 
 	if (uart_tx_stopped(&p->port) || dma->tx_running ||
-			uart_circ_empty(xmit))
+	    uart_circ_empty(xmit))
 		return 0;
 
 	dma->tx_size = CIRC_CNT_TO_END(xmit->head, xmit->tail, UART_XMIT_SIZE);
@@ -95,7 +105,7 @@ int serial8250_tx_dma(struct uart_8250_port *p)
 	dma->tx_cookie = dmaengine_submit(desc);
 
 	dma_sync_single_for_device(dma->txchan->device->dev, dma->tx_addr,
-			UART_XMIT_SIZE, DMA_TO_DEVICE);
+				   UART_XMIT_SIZE, DMA_TO_DEVICE);
 
 	dma_async_issue_pending(dma->txchan);
 
@@ -114,11 +124,11 @@ int serial8250_rx_dma(struct uart_8250_port *p, unsigned int iir)
 
 	switch (iir & 0x3f) {
 	case UART_IIR_RLSI:
-			/* 8250_core handles errors and break interrupts */
+		/* 8250_core handles errors and break interrupts */
 		return -EIO;
 	case UART_IIR_RX_TIMEOUT:
 		/*
-		*If RCVR FIFO trigger level was not reached, complete
+		* If RCVR FIFO trigger level was not reached, complete
 		* the transfer and let 8250_core copy the remaining data.
 		*/
 		return -ETIMEDOUT;
@@ -128,17 +138,18 @@ int serial8250_rx_dma(struct uart_8250_port *p, unsigned int iir)
 
 	if (dma_status)
 		return 0;
-	/*disabling the Interrupts Line status and Receive buffer*/
+
 #ifdef CONFIG_X86_INTEL_QUARK
-	uart_8250_priv.ier = serial_in(p, UART_IER);
+	/* Disabling the Interrupts Line status and Receive buffer */
+	p->saved_ier = serial_in(p, UART_IER);
 
-	serial_out(p, UART_IER, (uart_8250_priv.ier &
-				~(UART_IER_RLSI | UART_IER_RDI)));
+	serial_out(p, UART_IER, (p->saved_ier &
+		   ~(UART_IER_RLSI | UART_IER_RDI)));
 #endif
 
 	desc = dmaengine_prep_slave_single(dma->rxchan, dma->rx_addr,
-			dma->rx_size, DMA_DEV_TO_MEM,
-			DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
+					   dma->rx_size, DMA_DEV_TO_MEM,
+					   DMA_PREP_INTERRUPT | DMA_CTRL_ACK);
 	if (!desc)
 		return -EBUSY;
 
@@ -181,8 +192,8 @@ int serial8250_request_dma(struct uart_8250_port *p)
 
 	/* Get a channel for RX */
 	dma->rxchan = dma_request_slave_channel_compat(mask,
-			dma->fn, dma->rx_param,
-			p->port.dev, "rx");
+						       dma->fn, dma->rx_param,
+						       p->port.dev, "rx");
 	if (!dma->rxchan)
 		return -ENODEV;
 
@@ -190,8 +201,8 @@ int serial8250_request_dma(struct uart_8250_port *p)
 
 	/* Get a channel for TX */
 	dma->txchan = dma_request_slave_channel_compat(mask,
-			dma->fn, dma->tx_param,
-			p->port.dev, "tx");
+						       dma->fn, dma->tx_param,
+						       p->port.dev, "tx");
 	if (!dma->txchan) {
 		dma_release_channel(dma->rxchan);
 		return -ENODEV;
@@ -199,23 +210,28 @@ int serial8250_request_dma(struct uart_8250_port *p)
 
 	dmaengine_slave_config(dma->txchan, &dma->txconf);
 
-	/* RX buffer */
+#ifdef CONFIG_X86_INTEL_QUARK
+	/* RX buffer is set at RX FIFO trigger level for Quark SoC */
 	if (!dma->rx_size)
 		dma->rx_size = TRIGGER_LEVEL;
-
+#else
+	/* RX buffer */
+	if (!dma->rx_size)
+		dma->rx_size = PAGE_SIZE;
+#endif
 	dma->rx_buf = dma_alloc_coherent(dma->rxchan->device->dev, dma->rx_size,
-			&dma->rx_addr, GFP_KERNEL);
+					&dma->rx_addr, GFP_KERNEL);
 	if (!dma->rx_buf)
 		goto err;
 
 	/* TX buffer */
 	dma->tx_addr = dma_map_single(dma->txchan->device->dev,
-			p->port.state->xmit.buf,
-			UART_XMIT_SIZE,
-			DMA_TO_DEVICE);
+				      p->port.state->xmit.buf,
+				      UART_XMIT_SIZE,
+				      DMA_TO_DEVICE);
 	if (dma_mapping_error(dma->txchan->device->dev, dma->tx_addr)) {
 		dma_free_coherent(dma->rxchan->device->dev, dma->rx_size,
-				dma->rx_buf, dma->rx_addr);
+				  dma->rx_buf, dma->rx_addr);
 		goto err;
 	}
 
@@ -240,14 +256,14 @@ void serial8250_release_dma(struct uart_8250_port *p)
 	/* Release RX resources */
 	dmaengine_terminate_all(dma->rxchan);
 	dma_free_coherent(dma->rxchan->device->dev, dma->rx_size, dma->rx_buf,
-			dma->rx_addr);
+			  dma->rx_addr);
 	dma_release_channel(dma->rxchan);
 	dma->rxchan = NULL;
 
 	/* Release TX resources */
 	dmaengine_terminate_all(dma->txchan);
 	dma_unmap_single(dma->txchan->device->dev, dma->tx_addr,
-			UART_XMIT_SIZE, DMA_TO_DEVICE);
+			 UART_XMIT_SIZE, DMA_TO_DEVICE);
 	dma_release_channel(dma->txchan);
 	dma->txchan = NULL;
 	dma->tx_running = 0;
diff --git a/drivers/tty/serial/8250/8250_dw.c b/drivers/tty/serial/8250/8250_dw.c
index a98771c..e4ce76a 100644
--- a/drivers/tty/serial/8250/8250_dw.c
+++ b/drivers/tty/serial/8250/8250_dw.c
@@ -184,9 +184,10 @@ static void dw8250_set_termios(struct uart_port *p, struct ktermios *termios,
 	struct uart_8250_port *up =
 		container_of(p, struct uart_8250_port, port);
 
+#ifdef CONFIG_X86_INTEL_QUARK
 	/* For Quark, hs-uart is capable of auto flow control */
 	up->capabilities |= UART_CAP_AFE;
-
+#endif
 	serial8250_do_set_termios(p, termios, old);
 }
 static int dw8250_handle_irq(struct uart_port *p)
diff --git a/include/linux/dw_dmac.h b/include/linux/dw_dmac.h
index c8a121c..d94ad40 100644
--- a/include/linux/dw_dmac.h
+++ b/include/linux/dw_dmac.h
@@ -44,8 +44,7 @@ struct dw_dma_slave {
  * @nr_masters: Number of AHB masters supported by the controller
  * @data_width: Maximum data width supported by hardware per AHB master
  *		(0 - 8bits, 1 - 16bits, ..., 5 - 256bits)
- * @sd: slave specific data. Used for configuring channels
- * @sd_count: count of slave data structures passed.
+ * @nollp: Indicating llp capability of DMA and peripheral
  */
 struct dw_dma_platform_data {
 	unsigned int	nr_channels;
@@ -59,9 +58,6 @@ struct dw_dma_platform_data {
 	unsigned short	block_size;
 	unsigned char	nr_masters;
 	unsigned char	data_width[4];
-	bool		is_embedded;
-	struct dw_dma_slave	*sd;
-	unsigned int	sd_count;
 	bool		nollp[8];
 };
 
diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 9f76451..6b4b8bf 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -79,6 +79,9 @@ struct uart_8250_port {
 	unsigned int		tx_loadsz;	/* transmit fifo load size */
 	unsigned char		acr;
 	unsigned char		ier;
+#ifdef CONFIG_X86_INTEL_QUARK
+	unsigned char		saved_ier;
+#endif
 	unsigned char		lcr;
 	unsigned char		mcr;
 	unsigned char		mcr_mask;	/* mask of user bits */
-- 
1.7.5.4

