From 300123110c67138584d069bc68450b5676c74b06 Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Fri, 2 Jan 2015 11:54:04 +0800
Subject: [PATCH 08/31] Implement custom power management for quark client
 USB.

source: Intel vendor drop 1.1.0-rc2

Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 Documentation/usb/linux-cdc-acm.inf |    4 +-
 drivers/usb/gadget/pch_udc.c        |  433 ++++++++++++++++++++++++++---------
 drivers/usb/gadget/serial.c         |   28 ++-
 3 files changed, 352 insertions(+), 113 deletions(-)

diff --git a/Documentation/usb/linux-cdc-acm.inf b/Documentation/usb/linux-cdc-acm.inf
index f0ffc27..e56f074 100644
--- a/Documentation/usb/linux-cdc-acm.inf
+++ b/Documentation/usb/linux-cdc-acm.inf
@@ -90,10 +90,10 @@ ServiceBinary=%12%\USBSER.sys
 [SourceDisksFiles]
 [SourceDisksNames]
 [DeviceList]
-%DESCRIPTION%=DriverInstall, USB\VID_0525&PID_A4A7, USB\VID_1D6B&PID_0104&MI_02, USB\VID_1D6B&PID_0106&MI_00
+%DESCRIPTION%=DriverInstall, USB\VID_0525&PID_A4A7, USB\VID_1D6B&PID_0104&MI_02, USB\VID_1D6B&PID_0106&MI_00, USB\VID_8086&PID_BABE  
 
 [DeviceList.NTamd64]
-%DESCRIPTION%=DriverInstall, USB\VID_0525&PID_A4A7, USB\VID_1D6B&PID_0104&MI_02, USB\VID_1D6B&PID_0106&MI_00
+%DESCRIPTION%=DriverInstall, USB\VID_0525&PID_A4A7, USB\VID_1D6B&PID_0104&MI_02, USB\VID_1D6B&PID_0106&MI_00, USB\VID_8086&PID_BABE  
 
 
 ;------------------------------------------------------------------------------
diff --git a/drivers/usb/gadget/pch_udc.c b/drivers/usb/gadget/pch_udc.c
index ea00b27..1ebdbd0 100644
--- a/drivers/usb/gadget/pch_udc.c
+++ b/drivers/usb/gadget/pch_udc.c
@@ -6,6 +6,7 @@
  * the Free Software Foundation; version 2 of the License.
  */
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+#include <asm/qrk.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/pci.h>
@@ -18,6 +19,21 @@
 #include <linux/gpio.h>
 #include <linux/irq.h>
 
+static unsigned int enable_msi = 1;
+module_param(enable_msi, uint, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(enable_msi, "Enable PCI MSI mode");
+
+static unsigned int phy_err_max;
+module_param(phy_err_max, uint, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(phy_err_max, "PHY ERR count before disconnect, 0 to disable");
+
+static unsigned int phy_err_time = 100;
+module_param(phy_err_time, uint, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(phy_err_time, "delay time between disconnect in milliseconds");
+
+static unsigned long  phy_err_time_jiffies;	/* delay time between disconnect  */
+static unsigned long  phy_err_backoff_end;	/* timeout for PHY ERR disconnect */
+
 /* GPIO port for VBUS detecting */
 static int vbus_gpio_port = -1;		/* GPIO port number (-1:Not used) */
 
@@ -213,6 +229,18 @@ static int vbus_gpio_port = -1;		/* GPIO port number (-1:Not used) */
 #define UDC_DMA_MAXPACKET	65536	/* maximum packet size for DMA */
 
 /**
+ * Bit masks used to make sure the RO bits are saved as 0 thus restore will
+ * set them to 0, as specified in the Quak data-sheet.
+ */
+#define D_CFG_UDC_REG_MASK		0x0FFFBF
+#define D_CTRL_UDC_REG_MASK		0xFFFF3FFD
+#define D_INT_UDC_REG_MASK		0xFF
+#define D_INTR_MSK_UDC_REG_MASK		0xFF
+#define EP_INTR_UDC_REG_MASK		0x0F000F
+#define EP_INTR_MSK_UDC_REG_MASK	0x0F000F
+#define TEST_MODE_UDC_REG_MASK		0x01
+
+/**
  * struct pch_udc_data_dma_desc - Structure to hold DMA descriptor information
  *				  for data
  * @status:		Status quadlet
@@ -318,6 +346,20 @@ struct pch_vbus_gpio_data {
 };
 
 /**
+ * struct pch_saved_reg - Registers to be saved during S3 suspend to RAM and
+ *			restore during S3 resume.
+ */
+struct pch_saved_regs {
+	u32	d_cfg_udc_reg;
+	u32	d_ctrl_udc_reg;
+	u32	d_int_udc_reg;
+	u32	d_intr_msk_udc_reg;
+	u32	ep_intr_udc_reg;
+	u32	ep_intr_msk_udc_reg;
+	u32	test_mode_udc_reg;
+};
+
+/**
  * struct pch_udc_dev - Structure holding complete information
  *			of the PCH USB device
  * @gadget:		gadget driver data
@@ -345,8 +387,10 @@ struct pch_vbus_gpio_data {
  * @base_addr:		for mapped device memory
  * @bar:		Indicates which PCI BAR for USB regs
  * @irq:		IRQ line for the device
+ * @phy_err_cnt:	Count of phy_errs on this device
  * @cfg_data:		current cfg, intf, and alt in use
  * @vbus_gpio:		GPIO informaton for detecting VBUS
+ * @saved_regs:		Where to save MMIO during suspend_noirq
  */
 struct pch_udc_dev {
 	struct usb_gadget		gadget;
@@ -373,8 +417,12 @@ struct pch_udc_dev {
 	void __iomem			*base_addr;
 	unsigned			bar;
 	unsigned			irq;
+	unsigned			phy_err_cnt;
 	struct pch_udc_cfg_data		cfg_data;
 	struct pch_vbus_gpio_data	vbus_gpio;
+#ifdef CONFIG_PM
+	struct pch_saved_regs		saved_regs;
+#endif
 };
 #define to_pch_udc(g)	(container_of((g), struct pch_udc_dev, gadget))
 
@@ -565,6 +613,7 @@ static inline void pch_udc_set_selfpowered(struct pch_udc_dev *dev)
  */
 static inline void pch_udc_set_disconnect(struct pch_udc_dev *dev)
 {
+	dev_dbg(&dev->pdev->dev, "udc disconnect");
 	pch_udc_bit_set(dev, UDC_DEVCTL_ADDR, UDC_DEVCTL_SD);
 }
 
@@ -590,6 +639,7 @@ static void pch_udc_clear_disconnect(struct pch_udc_dev *dev)
 static void pch_udc_init(struct pch_udc_dev *dev);
 static void pch_udc_reconnect(struct pch_udc_dev *dev)
 {
+	dev_dbg(&dev->pdev->dev, "udc reconnect");
 	pch_udc_init(dev);
 
 	/* enable device interrupts */
@@ -1072,6 +1122,10 @@ static void pch_udc_init(struct pch_udc_dev *dev)
 	/* mask and clear all device interrupts */
 	pch_udc_bit_set(dev, UDC_DEVIRQMSK_ADDR, UDC_DEVINT_MSK);
 	pch_udc_bit_set(dev, UDC_DEVIRQSTS_ADDR, UDC_DEVINT_MSK);
+	if (phy_err_max)
+		/* Allow ES and US as they may come back when we hit PHY ERR*/
+		pch_udc_bit_clr(dev, UDC_DEVIRQMSK_ADDR, UDC_DEVINT_US |
+						UDC_DEVINT_ES);
 
 	/* mask and clear all ep interrupts */
 	pch_udc_bit_set(dev, UDC_EPIRQMSK_ADDR, UDC_EPINT_MSK_DISABLE_ALL);
@@ -1775,7 +1829,7 @@ static struct usb_request *pch_udc_alloc_request(struct usb_ep *usbep,
 		return NULL;
 	ep = container_of(usbep, struct pch_udc_ep, ep);
 	dev = ep->dev;
-	req = kzalloc(sizeof *req, gfp);
+	req = kzalloc(sizeof(*req), gfp);
 	if (!req)
 		return NULL;
 	req->req.dma = DMA_ADDR_INVALID;
@@ -2097,7 +2151,7 @@ static void pch_udc_init_setup_buff(struct pch_udc_stp_dma_desc *td_stp)
 	if (!td_stp)
 		return;
 	td_stp->reserved = ++pky_marker;
-	memset(&td_stp->request, 0xFF, sizeof td_stp->request);
+	memset(&td_stp->request, 0xFF, sizeof(td_stp->request));
 	td_stp->status = PCH_UDC_BS_HST_RDY;
 }
 
@@ -2158,8 +2212,8 @@ static void pch_udc_complete_transfer(struct pch_udc_ep *ep)
 		return;
 	if ((req->td_data_last->status & PCH_UDC_RXTX_STS) !=
 	     PCH_UDC_RTS_SUCC) {
-		dev_err(&dev->pdev->dev, "Invalid RXTX status (0x%08x) "
-			"epstatus=0x%08x\n",
+		dev_err(&dev->pdev->dev,
+			"Invalid RXTX status (0x%08x) epstatus=0x%08x\n",
 		       (req->td_data_last->status & PCH_UDC_RXTX_STS),
 		       (int)(ep->epsts));
 		return;
@@ -2207,8 +2261,8 @@ static void pch_udc_complete_receiver(struct pch_udc_ep *ep)
 
 	while (1) {
 		if ((td->status & PCH_UDC_RXTX_STS) != PCH_UDC_RTS_SUCC) {
-			dev_err(&dev->pdev->dev, "Invalid RXTX status=0x%08x "
-				"epstatus=0x%08x\n",
+			dev_err(&dev->pdev->dev,
+				"Invalid RXTX status=0x%08x epstatus=0x%08x\n",
 				(req->td_data->status & PCH_UDC_RXTX_STS),
 				(int)(ep->epsts));
 			return;
@@ -2626,6 +2680,7 @@ static void pch_udc_svc_enum_interrupt(struct pch_udc_dev *dev)
 		BUG();
 	}
 	dev->gadget.speed = speed;
+	dev->phy_err_cnt = 0;
 	pch_udc_activate_control_ep(dev);
 	pch_udc_enable_ep_interrupts(dev, UDC_EPINT_IN_EP0 | UDC_EPINT_OUT_EP0);
 	pch_udc_set_dma(dev, DMA_DIR_TX);
@@ -2655,7 +2710,7 @@ static void pch_udc_svc_intf_interrupt(struct pch_udc_dev *dev)
 							 UDC_DEVSTS_ALT_SHIFT;
 	dev->set_cfg_not_acked = 1;
 	/* Construct the usb request for gadget driver and inform it */
-	memset(&dev->setup_data, 0 , sizeof dev->setup_data);
+	memset(&dev->setup_data, 0 , sizeof(dev->setup_data));
 	dev->setup_data.bRequest = USB_REQ_SET_INTERFACE;
 	dev->setup_data.bRequestType = USB_RECIP_INTERFACE;
 	dev->setup_data.wValue = cpu_to_le16(dev->cfg_data.cur_alt);
@@ -2694,7 +2749,7 @@ static void pch_udc_svc_cfg_interrupt(struct pch_udc_dev *dev)
 	dev->cfg_data.cur_cfg = (dev_stat & UDC_DEVSTS_CFG_MASK) >>
 				UDC_DEVSTS_CFG_SHIFT;
 	/* make usb request for gadget driver */
-	memset(&dev->setup_data, 0 , sizeof dev->setup_data);
+	memset(&dev->setup_data, 0 , sizeof(dev->setup_data));
 	dev->setup_data.bRequest = USB_REQ_SET_CONFIGURATION;
 	dev->setup_data.wValue = cpu_to_le16(dev->cfg_data.cur_cfg);
 	/* program the NE registers */
@@ -2742,6 +2797,35 @@ static void pch_udc_dev_isr(struct pch_udc_dev *dev, u32 dev_intr)
 	/* Set Config Interrupt */
 	if (dev_intr & UDC_DEVINT_SC)
 		pch_udc_svc_cfg_interrupt(dev);
+
+	/* checking for PHY ERR is enabled */
+	if (phy_err_max) {
+		/* USB Suspend and IDLE interrupt together  */
+
+		if ((dev_intr & UDC_DEVINT_US)
+				&& (dev_intr & UDC_DEVINT_ES)) {
+			dev->phy_err_cnt += 1;
+			if (dev->phy_err_cnt >= phy_err_max
+				&& time_after(jiffies, phy_err_backoff_end)) {
+				/* HERE is a symptom of a state machine which
+				 * may need to be reset, so force a disconnect
+				 * and set a delay before allows again */
+				dev_dbg(&dev->pdev->dev,
+					"USB_SUSPEND & USB_ES phy_err_cnt count %d",
+					dev->phy_err_cnt);
+				phy_err_backoff_end = jiffies
+					+ phy_err_time_jiffies;
+				dev->phy_err_cnt = 0;
+				pch_udc_set_disconnect(dev);
+			} else  {
+				dev_dbg(&dev->pdev->dev,
+					"USB_SUSPEND & USB_ES");
+			}
+		} else {
+		/* received normal interrupt fault has cleared */
+			dev->phy_err_cnt = 0;
+		}
+	}
 	/* USB Suspend interrupt */
 	if (dev_intr & UDC_DEVINT_US) {
 		if (dev->driver
@@ -2787,55 +2871,74 @@ static irqreturn_t pch_udc_isr(int irq, void *pdev)
 {
 	struct pch_udc_dev *dev = (struct pch_udc_dev *) pdev;
 	u32 dev_intr, ep_intr;
-	int i;
-
-	dev_intr = pch_udc_read_device_interrupts(dev);
-	ep_intr = pch_udc_read_ep_interrupts(dev);
-
-	/* For a hot plug, this find that the controller is hung up. */
-	if (dev_intr == ep_intr)
-		if (dev_intr == pch_udc_readl(dev, UDC_DEVCFG_ADDR)) {
-			dev_dbg(&dev->pdev->dev, "UDC: Hung up\n");
-			/* The controller is reset */
-			pch_udc_writel(dev, UDC_SRST, UDC_SRST_ADDR);
-			return IRQ_HANDLED;
+	int i, events = 0, count = 0;
+
+	mask_pvm(dev->pdev);
+	do {
+		events = 0;
+		dev_intr = pch_udc_read_device_interrupts(dev);
+		ep_intr = pch_udc_read_ep_interrupts(dev);
+
+		/* For a hot plug, this find that the controller is hung up. */
+		if (dev_intr == ep_intr)
+			if (dev_intr == pch_udc_readl(dev, UDC_DEVCFG_ADDR)) {
+				dev_dbg(&dev->pdev->dev, "UDC: Hung up\n");
+				/* The controller is reset */
+				pch_udc_writel(dev, UDC_SRST, UDC_SRST_ADDR);
+				unmask_pvm(dev->pdev);
+				return IRQ_HANDLED;
+			}
+		if (dev_intr) {
+			/* Clear device interrupts */
+			pch_udc_write_device_interrupts(dev, dev_intr);
+			events = 1;
+			count = 1;
 		}
-	if (dev_intr)
-		/* Clear device interrupts */
-		pch_udc_write_device_interrupts(dev, dev_intr);
-	if (ep_intr)
-		/* Clear ep interrupts */
-		pch_udc_write_ep_interrupts(dev, ep_intr);
-	if (!dev_intr && !ep_intr)
-		return IRQ_NONE;
-	spin_lock(&dev->lock);
-	if (dev_intr)
-		pch_udc_dev_isr(dev, dev_intr);
-	if (ep_intr) {
-		pch_udc_read_all_epstatus(dev, ep_intr);
-		/* Process Control In interrupts, if present */
-		if (ep_intr & UDC_EPINT_IN_EP0) {
-			pch_udc_svc_control_in(dev);
-			pch_udc_postsvc_epinters(dev, 0);
+		if (ep_intr) {
+			/* Clear ep interrupts */
+			pch_udc_write_ep_interrupts(dev, ep_intr);
+			events = 1;
+			count = 1;
 		}
-		/* Process Control Out interrupts, if present */
-		if (ep_intr & UDC_EPINT_OUT_EP0)
-			pch_udc_svc_control_out(dev);
-		/* Process data in end point interrupts */
-		for (i = 1; i < PCH_UDC_USED_EP_NUM; i++) {
-			if (ep_intr & (1 <<  i)) {
-				pch_udc_svc_data_in(dev, i);
-				pch_udc_postsvc_epinters(dev, i);
+		if (!dev_intr && !ep_intr) {
+			unmask_pvm(dev->pdev);
+			if (count)
+				return IRQ_HANDLED;
+			else
+				return IRQ_NONE;
+		}
+		spin_lock(&dev->lock);
+		if (dev_intr)
+			pch_udc_dev_isr(dev, dev_intr);
+		if (ep_intr) {
+			pch_udc_read_all_epstatus(dev, ep_intr);
+			/* Process Control In interrupts, if present */
+			if (ep_intr & UDC_EPINT_IN_EP0) {
+				pch_udc_svc_control_in(dev);
+				pch_udc_postsvc_epinters(dev, 0);
+			}
+			/* Process Control Out interrupts, if present */
+			if (ep_intr & UDC_EPINT_OUT_EP0)
+				pch_udc_svc_control_out(dev);
+			/* Process data in end point interrupts */
+			for (i = 1; i < PCH_UDC_USED_EP_NUM; i++) {
+				if (ep_intr & (1 <<  i)) {
+					pch_udc_svc_data_in(dev, i);
+					pch_udc_postsvc_epinters(dev, i);
+				}
 			}
+			/* Process data out end point interrupts */
+			for (i = UDC_EPINT_OUT_SHIFT + 1;
+				i < (UDC_EPINT_OUT_SHIFT + PCH_UDC_USED_EP_NUM);
+				i++)
+				if (ep_intr & (1 <<  i))
+					pch_udc_svc_data_out(dev,
+						i - UDC_EPINT_OUT_SHIFT);
 		}
-		/* Process data out end point interrupts */
-		for (i = UDC_EPINT_OUT_SHIFT + 1; i < (UDC_EPINT_OUT_SHIFT +
-						 PCH_UDC_USED_EP_NUM); i++)
-			if (ep_intr & (1 <<  i))
-				pch_udc_svc_data_out(dev, i -
-							 UDC_EPINT_OUT_SHIFT);
-	}
-	spin_unlock(&dev->lock);
+		spin_unlock(&dev->lock);
+	} while (events == 1);
+	unmask_pvm(dev->pdev);
+
 	return IRQ_HANDLED;
 }
 
@@ -2885,7 +2988,7 @@ static void pch_udc_pcd_reinit(struct pch_udc_dev *dev)
 	INIT_LIST_HEAD(&dev->gadget.ep_list);
 
 	/* Initialize the endpoints structures */
-	memset(dev->ep, 0, sizeof dev->ep);
+	memset(dev->ep, 0, sizeof(dev->ep));
 	for (i = 0; i < PCH_UDC_EP_NUM; i++) {
 		struct pch_udc_ep *ep = &dev->ep[i];
 		ep->dev = dev;
@@ -3047,9 +3150,14 @@ static void pch_udc_remove(struct pci_dev *pdev)
 		dev_err(&pdev->dev,
 			"%s: gadget driver still bound!!!\n", __func__);
 	/* dma pool cleanup */
-	if (dev->data_requests)
-		pci_pool_destroy(dev->data_requests);
-
+	if (dev->data_requests) {
+		/* cleanup DMA desc's for ep0in */
+		if (dev->ep[UDC_EP0OUT_IDX].td_data) {
+			pci_pool_free(dev->data_requests,
+				dev->ep[UDC_EP0OUT_IDX].td_data,
+				dev->ep[UDC_EP0OUT_IDX].td_data_phys);
+		}
+	}
 	if (dev->stp_requests) {
 		/* cleanup DMA desc's for ep0in */
 		if (dev->ep[UDC_EP0OUT_IDX].td_stp) {
@@ -3057,13 +3165,11 @@ static void pch_udc_remove(struct pci_dev *pdev)
 				dev->ep[UDC_EP0OUT_IDX].td_stp,
 				dev->ep[UDC_EP0OUT_IDX].td_stp_phys);
 		}
-		if (dev->ep[UDC_EP0OUT_IDX].td_data) {
-			pci_pool_free(dev->stp_requests,
-				dev->ep[UDC_EP0OUT_IDX].td_data,
-				dev->ep[UDC_EP0OUT_IDX].td_data_phys);
-		}
-		pci_pool_destroy(dev->stp_requests);
 	}
+	if (dev->stp_requests)
+		pci_pool_destroy(dev->stp_requests);
+	if (dev->data_requests)
+		pci_pool_destroy(dev->data_requests);
 
 	if (dev->dma_addr)
 		dma_unmap_single(&dev->pdev->dev, dev->dma_addr,
@@ -3074,8 +3180,11 @@ static void pch_udc_remove(struct pci_dev *pdev)
 
 	pch_udc_exit(dev);
 
-	if (dev->irq_registered)
+	if (dev->irq_registered) {
 		free_irq(pdev->irq, dev);
+		if (enable_msi)
+			pci_disable_msi(pdev);
+	}
 	if (dev->base_addr)
 		iounmap(dev->base_addr);
 	if (dev->mem_region)
@@ -3087,45 +3196,6 @@ static void pch_udc_remove(struct pci_dev *pdev)
 	pci_set_drvdata(pdev, NULL);
 }
 
-#ifdef CONFIG_PM
-static int pch_udc_suspend(struct pci_dev *pdev, pm_message_t state)
-{
-	struct pch_udc_dev *dev = pci_get_drvdata(pdev);
-
-	pch_udc_disable_interrupts(dev, UDC_DEVINT_MSK);
-	pch_udc_disable_ep_interrupts(dev, UDC_EPINT_MSK_DISABLE_ALL);
-
-	pci_disable_device(pdev);
-	pci_enable_wake(pdev, PCI_D3hot, 0);
-
-	if (pci_save_state(pdev)) {
-		dev_err(&pdev->dev,
-			"%s: could not save PCI config state\n", __func__);
-		return -ENOMEM;
-	}
-	pci_set_power_state(pdev, pci_choose_state(pdev, state));
-	return 0;
-}
-
-static int pch_udc_resume(struct pci_dev *pdev)
-{
-	int ret;
-
-	pci_set_power_state(pdev, PCI_D0);
-	pci_restore_state(pdev);
-	ret = pci_enable_device(pdev);
-	if (ret) {
-		dev_err(&pdev->dev, "%s: pci_enable_device failed\n", __func__);
-		return ret;
-	}
-	pci_enable_wake(pdev, PCI_D3hot, 0);
-	return 0;
-}
-#else
-#define pch_udc_suspend	NULL
-#define pch_udc_resume	NULL
-#endif /* CONFIG_PM */
-
 static int pch_udc_probe(struct pci_dev *pdev,
 			  const struct pci_device_id *id)
 {
@@ -3135,7 +3205,7 @@ static int pch_udc_probe(struct pci_dev *pdev,
 	struct pch_udc_dev	*dev;
 
 	/* init */
-	dev = kzalloc(sizeof *dev, GFP_KERNEL);
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
 		pr_err("%s: no memory for device structure\n", __func__);
 		return -ENOMEM;
@@ -3183,6 +3253,14 @@ static int pch_udc_probe(struct pci_dev *pdev,
 		retval = -ENODEV;
 		goto finished;
 	}
+
+	pci_set_master(pdev);
+	if (enable_msi == 1)
+		pci_enable_msi(pdev);
+	dev->phy_err_cnt = 0;
+	phy_err_backoff_end = jiffies;
+	phy_err_time_jiffies  = msecs_to_jiffies(phy_err_time);
+
 	if (request_irq(pdev->irq, pch_udc_isr, IRQF_SHARED, KBUILD_MODNAME,
 			dev)) {
 		dev_err(&pdev->dev, "%s: request_irq(%d) fail\n", __func__,
@@ -3193,7 +3271,7 @@ static int pch_udc_probe(struct pci_dev *pdev,
 	dev->irq = pdev->irq;
 	dev->irq_registered = 1;
 
-	pci_set_master(pdev);
+
 	pci_try_set_mwi(pdev);
 
 	/* device struct setup */
@@ -3221,6 +3299,146 @@ finished:
 	return retval;
 }
 
+#ifdef CONFIG_PM
+
+/**
+ * pch_udc_save_regs - save the Memory Mapped I/O device configuration
+ *	      registers.
+ * @dev: - USB-Device instance
+ *
+ * It always returns 0.
+ */
+static int pch_udc_save_regs(struct pch_udc_dev *dev)
+{
+	dev->saved_regs.d_cfg_udc_reg = pch_udc_readl(dev, UDC_DEVCFG_ADDR) &
+		D_CFG_UDC_REG_MASK;
+	dev->saved_regs.d_ctrl_udc_reg = pch_udc_readl(dev, UDC_DEVCTL_ADDR) &
+		D_CTRL_UDC_REG_MASK;
+	dev->saved_regs.d_int_udc_reg = pch_udc_readl(dev, UDC_DEVIRQSTS_ADDR) &
+		D_INT_UDC_REG_MASK;
+	dev->saved_regs.d_intr_msk_udc_reg = pch_udc_readl(dev,
+			UDC_DEVIRQMSK_ADDR) & D_INTR_MSK_UDC_REG_MASK;
+	dev->saved_regs.ep_intr_udc_reg = pch_udc_readl(dev, UDC_EPIRQSTS_ADDR)
+		& EP_INTR_UDC_REG_MASK;
+	dev->saved_regs.ep_intr_msk_udc_reg = pch_udc_readl(dev,
+			UDC_EPIRQMSK_ADDR) & EP_INTR_MSK_UDC_REG_MASK;
+	dev->saved_regs.test_mode_udc_reg = pch_udc_readl(dev, UDC_DEVLPM_ADDR)
+		& TEST_MODE_UDC_REG_MASK;
+	return 0;
+}
+
+/**
+ * pch_udc_restore_regs - restore all the Memory Mapped I/O registers saved
+ *		      during suspend phase by pch_udc_save_regs() function.
+ * @dev: - USB-Device instance
+ *
+ * Always returns 0.
+ */
+static int pch_udc_restore_regs(struct pch_udc_dev *dev)
+{
+	pch_udc_writel(dev, dev->saved_regs.d_cfg_udc_reg, UDC_DEVCFG_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.d_ctrl_udc_reg, UDC_DEVCTL_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.d_int_udc_reg, UDC_DEVIRQSTS_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.d_intr_msk_udc_reg,
+			UDC_DEVIRQMSK_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.ep_intr_udc_reg, UDC_EPIRQSTS_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.ep_intr_msk_udc_reg,
+			UDC_EPIRQMSK_ADDR);
+	pch_udc_writel(dev, dev->saved_regs.test_mode_udc_reg, UDC_DEVLPM_ADDR);
+	return 0;
+}
+
+/**
+ * pch_udc_suspend - ".suspend" PM callback
+ *
+ * Always returns 0.
+ *
+ * If there is a USB Gadget on top of the USB-Device driver, shut it down (
+ * disable device and endpoints interrupts; set Soft Disconnect).
+ */
+static int pch_udc_suspend(struct device *pdevice)
+{
+	struct pci_dev *pdev = to_pci_dev(pdevice);
+	struct pch_udc_dev *dev = pci_get_drvdata(pdev);
+
+	if (dev->driver)
+		pch_udc_shutdown(pdev);
+
+	return 0;
+}
+
+/**
+ * pch_udc_suspend_noirq - ".suspend_noirq" PM callback.
+ *
+ * Always returns 0.
+ *
+ * It saves the Memory Mapped I/O device configuration registers.
+ */
+static int pch_udc_suspend_noirq(struct device *pdevice)
+{
+	int ret;
+
+	struct pci_dev *pdev    = to_pci_dev(pdevice);
+	struct pch_udc_dev *dev = pci_get_drvdata(pdev);
+
+	ret = pch_udc_save_regs(dev);
+	return ret;
+}
+
+/**
+ * pch_udc_resume_noirq - ".resume_noirq" PM callback
+ *
+ * Always returns 0.
+ *
+ * Restore all the Memory Mapped I/O device configuration registers saved during
+ * suspend_noirq phase.
+ */
+static int pch_udc_resume_noirq(struct device *pdevice)
+{
+	struct pci_dev *pdev    = to_pci_dev(pdevice);
+	struct pch_udc_dev *dev = pci_get_drvdata(pdev);
+
+	pch_udc_restore_regs(dev);
+	return 0;
+}
+
+/**
+ * pch_udc_resume - ".resume" PM callback.
+ *
+ * Always returns 0.
+ *
+ * Reconnects the USB Gadget if it exists on top of USB-Device.
+ */
+static int pch_udc_resume(struct device *pdevice)
+{
+	struct pci_dev *pdev    = to_pci_dev(pdevice);
+	struct pch_udc_dev *dev = pci_get_drvdata(pdev);
+
+	if (dev->driver)
+		pch_udc_reconnect(dev);
+
+	return 0;
+}
+
+#else /* CONFIG_PM */
+
+#define pch_udc_suspend		NULL
+#define pch_udc_suspend_noirq	NULL
+#define pch_udc_resume_noirq	NULL
+#define pch_udc_resume		NULL
+
+#endif /* CONFIG_PM */
+
+/**
+ * Power Management callbacks
+ */
+const struct dev_pm_ops pch_udc_pm_ops = {
+	.suspend	= pch_udc_suspend,
+	.suspend_noirq	= pch_udc_suspend_noirq,
+	.resume_noirq	= pch_udc_resume_noirq,
+	.resume		= pch_udc_resume,
+};
+
 static DEFINE_PCI_DEVICE_TABLE(pch_udc_pcidev_id) = {
 	{
 		PCI_DEVICE(PCI_VENDOR_ID_INTEL,
@@ -3253,9 +3471,10 @@ static struct pci_driver pch_udc_driver = {
 	.id_table =	pch_udc_pcidev_id,
 	.probe =	pch_udc_probe,
 	.remove =	pch_udc_remove,
-	.suspend =	pch_udc_suspend,
-	.resume =	pch_udc_resume,
 	.shutdown =	pch_udc_shutdown,
+	.driver =	{
+		.pm =	&pch_udc_pm_ops,
+	},
 };
 
 module_pci_driver(pch_udc_driver);
diff --git a/drivers/usb/gadget/serial.c b/drivers/usb/gadget/serial.c
index 1f5f978..49c150d 100644
--- a/drivers/usb/gadget/serial.c
+++ b/drivers/usb/gadget/serial.c
@@ -114,6 +114,15 @@ static unsigned n_ports = 1;
 module_param(n_ports, uint, 0);
 MODULE_PARM_DESC(n_ports, "number of ports to create, default=1");
 
+static __u16 vendor = GS_VENDOR_ID;
+module_param(vendor, ushort, 0);
+MODULE_PARM_DESC(vendor, "User specified vendor ID (default="
+		__MODULE_STRING(GS_VENDOR_ID)")");
+
+static __u16 product = 0;
+module_param(product, ushort, 0);
+MODULE_PARM_DESC(product, "User specified product ID");
+
 /*-------------------------------------------------------------------------*/
 
 static struct usb_configuration serial_config_driver = {
@@ -190,6 +199,14 @@ static int __init gs_bind(struct usb_composite_dev *cdev)
 	status = strings_dev[STRING_DESCRIPTION_IDX].id;
 	serial_config_driver.iConfiguration = status;
 
+	/* Allow command line over-ride to set specific vendor/device id */
+	if (vendor != GS_VENDOR_ID)
+		device_desc.idVendor = cpu_to_le16(vendor);
+	if (product != 0)
+		device_desc.idProduct = cpu_to_le16(product);
+	pr_info("g_serial: Vendor 0x%04x Product 0x%04x\n",
+		device_desc.idVendor, device_desc.idProduct);
+
 	if (gadget_is_otg(cdev->gadget)) {
 		serial_config_driver.descriptors = otg_desc;
 		serial_config_driver.bmAttributes |= USB_CONFIG_ATT_WAKEUP;
@@ -239,6 +256,7 @@ static __refdata struct usb_composite_driver gserial_driver = {
 	.unbind		= gs_unbind,
 };
 
+static int bCfgVal;
 static int __init init(void)
 {
 	/* We *could* export two configs; that'd be much cleaner...
@@ -246,19 +264,21 @@ static int __init init(void)
 	 */
 	if (use_acm) {
 		serial_config_driver.label = "CDC ACM config";
-		serial_config_driver.bConfigurationValue = 2;
-		device_desc.bDeviceClass = USB_CLASS_COMM;
+		serial_config_driver.bConfigurationValue = ++bCfgVal;
+		device_desc.bDeviceClass = USB_CLASS_MISC;
+		device_desc.bDeviceSubClass = 0x02;
+		device_desc.bDeviceProtocol = 0x01;
 		device_desc.idProduct =
 				cpu_to_le16(GS_CDC_PRODUCT_ID);
 	} else if (use_obex) {
 		serial_config_driver.label = "CDC OBEX config";
-		serial_config_driver.bConfigurationValue = 3;
+		serial_config_driver.bConfigurationValue = ++bCfgVal;
 		device_desc.bDeviceClass = USB_CLASS_COMM;
 		device_desc.idProduct =
 			cpu_to_le16(GS_CDC_OBEX_PRODUCT_ID);
 	} else {
 		serial_config_driver.label = "Generic Serial config";
-		serial_config_driver.bConfigurationValue = 1;
+		serial_config_driver.bConfigurationValue = ++bCfgVal;
 		device_desc.bDeviceClass = USB_CLASS_VENDOR_SPEC;
 		device_desc.idProduct =
 				cpu_to_le16(GS_PRODUCT_ID);
-- 
1.7.5.4

