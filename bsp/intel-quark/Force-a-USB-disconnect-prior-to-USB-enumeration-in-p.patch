From d6c6a891186da9edb848fb8f9a79cc417bc17d59 Mon Sep 17 00:00:00 2001
From: Kevin Clarke <kevinx.clarke@intel.com>
Date: Mon, 18 Aug 2014 14:53:39 +0100
Subject: [PATCH 30/42] Force a USB disconnect prior to USB enumeration in
 pch_udc driver to improve connection (rtc 80286)

Some Galileo and other reference boards show problems when connecting
as USB device. Host sees failure to enumerate and sticks faultily in
full speed. Device fails to enumerate correctly in High Speed and enters
a pattern of interrupt assertion for suspend/idle.

Manual workaround showed that reload of g_serial caused problem to go away.
By combining Elec Validation traces with probing of IRQ register a fault
pattern emerged, where device was in state with Idle and Suspend bits always
set. Acking of these bits would not clear them. This information was used as a
detection method, i.e. if we see IRQ register "stuck" with these bits we
can use it as an indication of the fault condition. It was also noted
that these IRQ bits were marked off by default after entering SUS so that
the fault condition could not be seen.

In a normal operation, the IRQ bits clear immediately after Acking and the
Suspend/Idle condition would be out of spec after going into suspend.

A threshold of 30 times was used to indicate that we have the fault
and then the workaround is implemented, which is to do a USB soft disconnect
from the device driver. This causes the device to re-enumerate with the
Host PC.

This re-enumeration probably clears the condition which caused
the problem also.

A standoff timer phy_err_time was implemented to only allow the recovery
attempt by default once every 100ms, module param allows htis to be changed
at module load. Workaround can be enabled by setting module param
phy_err_cnt to 30 (works well on Quark)  or other non zero value, smaller
values fix the problem earlier and are recommended.

Change-Id: I536080dde801d3c9467f26593a04765268256ecc
Signed-off-by: Kevin Clarke <kevin1.clarke@intel.com>
(cherry picked from commit ac0987ba8b431a962db113bda8114b33f602069c)

Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Change-Id: I083d111d2c1b5440919889c9005e9a7da36926b5
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4781
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/usb/gadget/pch_udc.c |   52 ++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 52 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/gadget/pch_udc.c b/drivers/usb/gadget/pch_udc.c
index 3ad837b..bbfddd1 100644
--- a/drivers/usb/gadget/pch_udc.c
+++ b/drivers/usb/gadget/pch_udc.c
@@ -24,6 +24,17 @@ static unsigned int enable_msi = 1;
 module_param(enable_msi, uint, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(enable_msi, "Enable PCI MSI mode");
 
+static unsigned int phy_err_max;
+module_param(phy_err_max, uint, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(phy_err_max, "PHY ERR count before disconnect, 0 to disable");
+
+static unsigned int phy_err_time = 100;
+module_param(phy_err_time, uint, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(phy_err_time, "delay time between disconnect in milliseconds");
+
+static unsigned long  phy_err_time_jiffies;	/* delay time between disconnect  */
+static unsigned long  phy_err_backoff_end;	/* timeout for PHY ERR disconnect */
+
 /* GPIO port for VBUS detecting */
 static int vbus_gpio_port = -1;		/* GPIO port number (-1:Not used) */
 
@@ -351,6 +362,7 @@ struct pch_vbus_gpio_data {
  * @base_addr:		for mapped device memory
  * @bar:		Indicates which PCI BAR for USB regs
  * @irq:		IRQ line for the device
+ * @phy_err_cnt:	Count of phy_errs on this device
  * @cfg_data:		current cfg, intf, and alt in use
  * @vbus_gpio:		GPIO informaton for detecting VBUS
  */
@@ -379,6 +391,7 @@ struct pch_udc_dev {
 	void __iomem			*base_addr;
 	unsigned			bar;
 	unsigned			irq;
+	unsigned			phy_err_cnt;
 	struct pch_udc_cfg_data		cfg_data;
 	struct pch_vbus_gpio_data	vbus_gpio;
 };
@@ -571,6 +584,7 @@ static inline void pch_udc_set_selfpowered(struct pch_udc_dev *dev)
  */
 static inline void pch_udc_set_disconnect(struct pch_udc_dev *dev)
 {
+	dev_dbg(&dev->pdev->dev, "udc disconnect");
 	pch_udc_bit_set(dev, UDC_DEVCTL_ADDR, UDC_DEVCTL_SD);
 }
 
@@ -596,6 +610,7 @@ static void pch_udc_clear_disconnect(struct pch_udc_dev *dev)
 static void pch_udc_init(struct pch_udc_dev *dev);
 static void pch_udc_reconnect(struct pch_udc_dev *dev)
 {
+	dev_dbg(&dev->pdev->dev, "udc reconnect");
 	pch_udc_init(dev);
 
 	/* enable device interrupts */
@@ -1078,6 +1093,10 @@ static void pch_udc_init(struct pch_udc_dev *dev)
 	/* mask and clear all device interrupts */
 	pch_udc_bit_set(dev, UDC_DEVIRQMSK_ADDR, UDC_DEVINT_MSK);
 	pch_udc_bit_set(dev, UDC_DEVIRQSTS_ADDR, UDC_DEVINT_MSK);
+	if (phy_err_max)
+		/* Allow ES and US as they may come back when we hit PHY ERR*/
+		pch_udc_bit_clr(dev, UDC_DEVIRQMSK_ADDR, UDC_DEVINT_US |
+						UDC_DEVINT_ES);
 
 	/* mask and clear all ep interrupts */
 	pch_udc_bit_set(dev, UDC_EPIRQMSK_ADDR, UDC_EPINT_MSK_DISABLE_ALL);
@@ -2632,6 +2651,7 @@ static void pch_udc_svc_enum_interrupt(struct pch_udc_dev *dev)
 		BUG();
 	}
 	dev->gadget.speed = speed;
+	dev->phy_err_cnt = 0;
 	pch_udc_activate_control_ep(dev);
 	pch_udc_enable_ep_interrupts(dev, UDC_EPINT_IN_EP0 | UDC_EPINT_OUT_EP0);
 	pch_udc_set_dma(dev, DMA_DIR_TX);
@@ -2748,6 +2768,35 @@ static void pch_udc_dev_isr(struct pch_udc_dev *dev, u32 dev_intr)
 	/* Set Config Interrupt */
 	if (dev_intr & UDC_DEVINT_SC)
 		pch_udc_svc_cfg_interrupt(dev);
+
+	/* checking for PHY ERR is enabled */
+	if (phy_err_max) {
+		/* USB Suspend and IDLE interrupt together  */
+
+		if ((dev_intr & UDC_DEVINT_US)
+				&& (dev_intr & UDC_DEVINT_ES)) {
+			dev->phy_err_cnt += 1;
+			if (dev->phy_err_cnt >= phy_err_max
+				&& time_after(jiffies, phy_err_backoff_end)) {
+				/* HERE is a symptom of a state machine which
+				 * may need to be reset, so force a disconnect
+				 * and set a delay before allows again */
+				dev_dbg(&dev->pdev->dev,
+					"USB_SUSPEND & USB_ES phy_err_cnt count %d",
+					dev->phy_err_cnt);
+				phy_err_backoff_end = jiffies
+					+ phy_err_time_jiffies;
+				dev->phy_err_cnt = 0;
+				pch_udc_set_disconnect(dev);
+			} else  {
+				dev_dbg(&dev->pdev->dev,
+					"USB_SUSPEND & USB_ES");
+			}
+		} else {
+		/* received normal interrupt fault has cleared */
+			dev->phy_err_cnt = 0;
+		}
+	}
 	/* USB Suspend interrupt */
 	if (dev_intr & UDC_DEVINT_US) {
 		if (dev->driver
@@ -3229,6 +3278,9 @@ static int pch_udc_probe(struct pci_dev *pdev,
 	if (enable_msi == 1){
 		pci_enable_msi(pdev);
 	}
+	dev->phy_err_cnt = 0;
+	phy_err_backoff_end = jiffies;
+	phy_err_time_jiffies  = msecs_to_jiffies(phy_err_time);
 
 	if (request_irq(pdev->irq, pch_udc_isr, IRQF_SHARED, KBUILD_MODNAME,
 			dev)) {
-- 
1.7.5.4

