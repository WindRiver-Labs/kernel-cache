From 8c8d083a202d2be2f36cee78d73b5195f4ce870e Mon Sep 17 00:00:00 2001
From: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Date: Thu, 28 May 2015 12:13:35 +0800
Subject: [PATCH 24/65] Revert "slcan: Fixing synchronization issues Xslcan"

This reverts commit 12fe0754962cec9c523a14e59b0c5d2fa5c527b1.

Change-Id: I6a256a8083010b551f70c388323cad2fe275f253
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5119
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>

Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/net/can/slcan.c |   35 +++++++++++++++++++++++++----------
 1 files changed, 25 insertions(+), 10 deletions(-)

diff --git a/drivers/net/can/slcan.c b/drivers/net/can/slcan.c
index 3629f89..ebd2bce 100644
--- a/drivers/net/can/slcan.c
+++ b/drivers/net/can/slcan.c
@@ -52,6 +52,7 @@
 #include <linux/delay.h>
 #include <linux/init.h>
 #include <linux/kernel.h>
+#include <linux/workqueue.h>
 #include <linux/can.h>
 #include <linux/can/skb.h>
 
@@ -101,6 +102,7 @@ struct slcan {
 	struct net_device	*dev[MUX_NETDEV_MAX];
 	/* easy for intr handling    */
 	spinlock_t		lock;
+	struct work_struct	tx_work;	/* Flushes transmit buffer   */
 
 	/* These are pointers to the malloc()ed frame buffers. */
 	unsigned char		rbuff[SLC_MTU];	/* receiver buffer	     */
@@ -348,17 +350,17 @@ static void slc_encaps(struct slcan_channel *sl_chan, struct can_frame *cf,
 	sl_chan->device->dev[dev_idx]->stats.tx_bytes += cf->can_dlc;
 }
 
-/* Called by the driver when there's room for more data.  If we have
- * more packets to send, we send them here.
- */
-static void slcan_write_wakeup(struct tty_struct *tty)
+/* Write out any remaining transmit buffer. Scheduled when tty is writable */
+static void slcan_transmit(struct work_struct *work)
 {
+	struct slcan *sl = container_of(work, struct slcan, tx_work);
 	int actual, i;
-	struct slcan *sl = (struct slcan *) tty->disc_data;
 	struct slcan_channel *sl_chan;
 
+	spin_lock_bh(&sl->lock);
 	/* First make sure we're connected. */
 	if (!sl->tty || sl->magic != SLCAN_MAGIC) {
+		spin_unlock_bh(&sl->lock);
 		return;
 	}
 
@@ -368,24 +370,34 @@ static void slcan_write_wakeup(struct tty_struct *tty)
 			continue;
 
 		sl_chan = netdev_priv(sl->dev[i]);
-		spin_lock(&sl->lock);
+
 		if (sl_chan->xleft <= 0)  {
 			/* Now serial buffer is almost free & we can start
 			 * transmission of another packet
 			 */
 			sl->dev[i]->stats.tx_packets++;
-			clear_bit(TTY_DO_WRITE_WAKEUP, &tty->flags);
-			spin_unlock(&sl->lock);
+			clear_bit(TTY_DO_WRITE_WAKEUP, &sl->tty->flags);
 			netif_wake_queue(sl->dev[i]);
 			continue;
 		}
 
-		actual = tty->ops->write(tty, sl_chan->xhead,
+		actual = sl->tty->ops->write(sl->tty, sl_chan->xhead,
 					sl_chan->xleft);
 		sl_chan->xleft -= actual;
 		sl_chan->xhead += actual;
-		spin_unlock(&sl->lock);
 	}
+	spin_unlock_bh(&sl->lock);
+
+}
+
+/*
+ * Called by the driver when there's room for more data.
+ * Schedule the transmit.
+ */
+static void slcan_write_wakeup(struct tty_struct *tty)
+{
+	struct slcan *sl = (struct slcan *) tty->disc_data;
+	schedule_work(&sl->tx_work);
 }
 
 /* Send a can_frame to a TTY queue. */
@@ -633,6 +645,7 @@ static struct slcan *slc_alloc(dev_t line)
 	sl->magic = SLCAN_MAGIC;
 
 	spin_lock_init(&sl->lock);
+	INIT_WORK(&sl->tx_work, slcan_transmit);
 	slcan_devs[i] = sl;
 
 	return sl;
@@ -744,6 +757,8 @@ static void slcan_close(struct tty_struct *tty)
 	sl->tty = NULL;
 	spin_unlock_bh(&sl->lock);
 
+	flush_work(&sl->tx_work);
+
 	/* Flush network side */
 	for (i = 0; i < muxnetdevs; i++) {
 		if (sl->dev[i])
-- 
1.7.5.4

