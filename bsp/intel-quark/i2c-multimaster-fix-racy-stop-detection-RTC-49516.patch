From a182de825593d333f5f39236bc03aa07436e6be7 Mon Sep 17 00:00:00 2001
From: Josef Ahmad <josef.ahmad@linux.intel.com>
Date: Thu, 25 Jul 2013 14:35:08 +0100
Subject: [PATCH] i2c multimaster: fix racy stop detection - RTC #49516

Driver wrongly assumes the interface always owns the bus when populating Tx
fifo: therefore it looks for a STOP symbol on the bus to terminate the
transaction.
This breaks in a multi-master scenario: if another master owns the bus while
the driver is filling the fifo, the subsequent STOP symbol on the bus will be
related to the other master.  This gets interpreted by the driver as its own
exit condition, resulting in a premature termination of the driver's
transaction.

Impact:
- data corruption: less bytes than expected are transmitted/received
- data corruption happens silently
- if the hardware is configured with IC_EMPTYFIFO_HOLD_MASTER_EN=1, the last
  byte which asserts the STOP command will not be transferred, resulting in a
  bus deadlock where SCL is held low.

The fix ensures STOP condition is processed only after all the content of the
transaction buffer is pushed onto Tx fifo, and both Tx and Rx fifos are empty.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>

diff --git a/drivers/i2c/busses/i2c-designware-core.c b/drivers/i2c/busses/i2c-designware-core.c
index 3c20e4bd6dd1..8ae292f2c408 100644
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@ -736,8 +736,6 @@ static u32 i2c_dw_read_clear_intrbits(struct dw_i2c_dev *dev)
 		dw_readl(dev, DW_IC_CLR_RX_DONE);
 	if (stat & DW_IC_INTR_ACTIVITY)
 		dw_readl(dev, DW_IC_CLR_ACTIVITY);
-	if (stat & DW_IC_INTR_STOP_DET)
-		dw_readl(dev, DW_IC_CLR_STOP_DET);
 	if (stat & DW_IC_INTR_START_DET)
 		dw_readl(dev, DW_IC_CLR_START_DET);
 	if (stat & DW_IC_INTR_GEN_CALL)
@@ -788,8 +786,21 @@ irqreturn_t i2c_dw_isr(int this_irq, void *dev_id)
 	 * the current transmit status.
 	 */
 
+	/*
+	 * Process stop condition after the last transaction segment is
+	 * transmitted (and received if appropriate).
+	 */
+	if (dev->msgs_num == dev->msg_write_idx
+		&& (DW_IC_INTR_STOP_DET & dw_readl(dev, DW_IC_INTR_STAT))
+		&& 0 == dw_readl(dev, DW_IC_TXFLR)
+		&& 0 == dw_readl(dev, DW_IC_RXFLR)
+		&& 0 == dev->rx_outstanding) {
+			dw_readl(dev, DW_IC_CLR_STOP_DET);
+			complete(&dev->cmd_complete);
+	}
+
 tx_aborted:
-	if ((stat & (DW_IC_INTR_TX_ABRT | DW_IC_INTR_STOP_DET)) || dev->msg_err)
+	if ((stat & (DW_IC_INTR_TX_ABRT)) || dev->msg_err)
 		complete(&dev->cmd_complete);
 
 	return IRQ_HANDLED;
-- 
2.1.0

