From 535eba8c8ba9e9c6b579c9026d749df29455c376 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Tue, 31 Mar 2015 18:53:53 +0800
Subject: [PATCH 22/32] platform: x86: ClantonHill Board Platform Board File

Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/platform/x86/intel-quark/Makefile          |    2 +-
 .../intel_quark_platform_clanton_hill.c            |  267 ++++++++++++++++++++
 2 files changed, 268 insertions(+), 1 deletions(-)
 create mode 100644 drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c

diff --git a/drivers/platform/x86/intel-quark/Makefile b/drivers/platform/x86/intel-quark/Makefile
index f1a5b4c..55d334c 100644
--- a/drivers/platform/x86/intel-quark/Makefile
+++ b/drivers/platform/x86/intel-quark/Makefile
@@ -4,5 +4,5 @@ obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_galileo_gen2.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_galileo.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_cross_hill.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_clanton_peak.o
-#obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platfrom_clanton_hill.o
+obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_clanton_hill.o
 #obj-$(CONFIG_X86_INTEL_QUARK)>-+= intel_qrk_plat_kips_bay.o
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
new file mode 100644
index 0000000..8571702
--- /dev/null
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_clanton_hill.c
@@ -0,0 +1,267 @@
+/*
+ * {% copyright %}
+ */
+/*
+ * Intel Quark Legacy Platform Data Layout.conf accessor
+ *
+ * Simple Legacy SPI flash access layer
+ *
+ */
+
+#include <linux/errno.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/printk.h>
+#include <linux/spi/pxa2xx_spi.h>
+#include <linux/spi/spi.h>
+#include <linux/interrupt.h>
+
+#define DRIVER_NAME		"ClantonHill"
+#define GPIO_RESTRICT_NAME	"qrk-gpio-restrict-nc"
+
+/* LTC4417 PowerPath controller output VALID1# is connected to GPIO_SUS<1>,
+ * which is Linux gpio3 and its IRQ must be configured as wake_irq */
+#define POWER_PATH_GPIO		3
+static int power_path_irq = -1;
+
+/******************************************************************************
+ *             Analog Devices AD7298 SPI Device Platform Data
+ ******************************************************************************/
+#include "linux/platform_data/ad7298.h"
+
+/* Maximum input voltage allowed for each ADC input, in milliVolts */
+#define AD7298_MAX_EXT_VIN 5000
+#define AD7298_MAX_EXT_VIN_EXT_BATT 30000
+#define AD7298_MAX_EXT_VIN_INT_BATT 9200
+
+static const struct ad7298_platform_data ad7298_platform_data = {
+	.ext_ref = false,
+	.ext_vin_max = { AD7298_MAX_EXT_VIN, AD7298_MAX_EXT_VIN,
+		AD7298_MAX_EXT_VIN, AD7298_MAX_EXT_VIN,
+		AD7298_MAX_EXT_VIN, AD7298_MAX_EXT_VIN,
+		AD7298_MAX_EXT_VIN_EXT_BATT, AD7298_MAX_EXT_VIN_INT_BATT }
+};
+
+/******************************************************************************
+ *                 Intel Quark SPI Controller Data
+ ******************************************************************************/
+static struct pxa2xx_spi_chip qrk_ffrd_spi_0_cs_0 = {
+	.gpio_cs = 8,
+};
+
+static struct spi_board_info spi_onboard_devs[] = {
+	{
+		.modalias = "ad7298",
+		.max_speed_hz = 5000000,
+		.platform_data = &ad7298_platform_data,
+		.mode = SPI_MODE_2,
+		.bus_num = 0,
+		.chip_select = 0,
+		.controller_data = &qrk_ffrd_spi_0_cs_0,
+	},
+};
+
+/******************************************************************************
+ *             ST Microelectronics LIS331DLH I2C Device Platform Data
+ ******************************************************************************/
+#include <linux/platform_data/lis331dlh_intel_qrk.h>
+
+/* GPIO interrupt pins connected to the LIS331DLH */
+#define ST_ACCEL_GPIO_S0 15
+#define ST_ACCEL_GPIO_S3 4
+
+static struct lis331dlh_intel_qrk_platform_data lis331dlh_i2c_platform_data = {
+	.irq2_pin = ST_ACCEL_GPIO_S3,
+};
+
+static struct gpio reserved_gpios[] = {
+	{
+		ST_ACCEL_GPIO_S0,
+		GPIOF_IN,
+		"st_accel_i2c-int1"
+	},
+	{
+		ST_ACCEL_GPIO_S3,
+		GPIOF_IN,
+		"st_accel_i2c-int2"
+	},
+};
+
+/* I2C device addresses */
+#define MAX9867_ADDR				0x18
+#define LIS331DLH_ADDR				0x19
+
+static struct i2c_adapter *i2c_adap;
+static struct i2c_board_info probed_i2c_lis331dlh = {
+	.platform_data = &lis331dlh_i2c_platform_data,
+};
+static struct i2c_board_info probed_i2c_max9867;
+static const unsigned short max9867_i2c_addr[] =
+	{ MAX9867_ADDR, I2C_CLIENT_END };
+static const unsigned short lis331dlh_i2c_addr[] =
+	{ LIS331DLH_ADDR, I2C_CLIENT_END };
+
+static int i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	/* Always return success: the I2C clients are already known.  */
+	return 1;
+}
+
+/**
+ * intel_qrk_spi_add_onboard_devs
+ *
+ * @return 0 on success or standard errnos on failure
+ *
+ * Registers onboard SPI device(s) present on the Clanton Hill platform
+ */
+static int intel_qrk_spi_add_onboard_devs(void)
+{
+	return spi_register_board_info(spi_onboard_devs,
+				       ARRAY_SIZE(spi_onboard_devs));
+}
+
+/**
+ * intel_qrk_gpio_restrict_probe
+ *
+ * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
+ * GPIOs are never released nor accessed by this driver.
+ */
+static int intel_qrk_gpio_restrict_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	static int gpio_done, spi_done, gpio_wake_done;
+	struct i2c_client *max9867 = NULL, *lis331dlh = NULL;
+
+	if (gpio_wake_done)
+		goto gpio;
+	ret = gpio_request(POWER_PATH_GPIO, "ltc4417-power-path");
+	if (ret)
+		goto end;
+	ret = gpio_to_irq(POWER_PATH_GPIO);
+	power_path_irq = ret;
+	gpio_free(POWER_PATH_GPIO);
+	gpio_wake_done = 1;
+gpio:
+	if (gpio_done)
+		goto spi;
+	ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
+	if (ret)
+		goto end;
+	gpio_done = 1;
+
+spi:
+	if (spi_done)
+		goto i2c;
+	ret = intel_qrk_spi_add_onboard_devs();
+	if (ret)
+		goto end;
+	spi_done = 1;
+i2c:
+	i2c_adap = i2c_get_adapter(0);
+	if (NULL == i2c_adap) {
+		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
+			__func__);
+		ret = -EPROBE_DEFER;
+		goto end;
+	}
+	strlcpy(probed_i2c_max9867.type, "intel-qrk-max9867", I2C_NAME_SIZE);
+	max9867 = i2c_new_probed_device(i2c_adap, &probed_i2c_max9867,
+					max9867_i2c_addr, i2c_probe);
+	strlcpy(probed_i2c_lis331dlh.type, "lis331dlh_qrk", I2C_NAME_SIZE);
+	lis331dlh = i2c_new_probed_device(i2c_adap, &probed_i2c_lis331dlh,
+					lis331dlh_i2c_addr, i2c_probe);
+	i2c_put_adapter(i2c_adap);
+
+	if (NULL == max9867 || NULL == lis331dlh) {
+		pr_err("%s: can't probe I2C devices\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+end:
+	return ret;
+}
+
+static struct platform_driver gpio_restrict_pdriver = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe,
+};
+
+static int intel_qrk_plat_clanton_hill_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	ret = platform_driver_register(&gpio_restrict_pdriver);
+
+	return ret;
+}
+
+static int intel_qrk_plat_clanton_hill_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+/**
+ * qrk_clanton_hill_suspend - ".suspend" PM hook
+ * @dev - pointer to device being suspended.
+ * Returns 0 if success, negative error code otherwise
+ *
+ * Enable the IRQ associated with the GPIO driven by VALID1# output of LTC4417
+ * PowerPath controller as wake capable.
+ */
+static int qrk_clanton_hill_suspend(struct device * dev)
+{
+	int ret = 0;
+	ret = enable_irq_wake(power_path_irq);
+	if (ret)
+		pr_err("%s: Error enabling irq_wake for IRQ %d: %d\n",
+				__func__, power_path_irq, ret);
+	return ret;
+}
+
+/**
+ * qrk_clanton_hill_resume - ".resume" PM hook
+ * @dev - pointer to device being resumed
+ * Returns 0 if success, negative error code otherwise
+ *
+ * Disable the IRQ associated with the GPIO driven by VALID1# output of LTC4417
+ * PowerPath controller as wake capable.
+ */
+static int qrk_clanton_hill_resume(struct device *dev)
+{
+	int ret = 0;
+	ret =  disable_irq_wake(power_path_irq);
+	if (ret)
+		pr_err("%s: Error disabling irq_wake for IRQ %d: %d\n",
+				__func__, power_path_irq, ret);
+	return ret;
+}
+
+const struct dev_pm_ops qrk_clanton_hill_pm = {
+	.suspend	= qrk_clanton_hill_suspend,
+	.resume		= qrk_clanton_hill_resume,
+};
+
+static struct platform_driver qrk_clanton_hill_driver = {
+	.driver		= {
+		.name	= DRIVER_NAME,
+		.owner	= THIS_MODULE,
+		.pm	= &qrk_clanton_hill_pm,
+	},
+	.probe		= intel_qrk_plat_clanton_hill_probe,
+	.remove		= intel_qrk_plat_clanton_hill_remove,
+};
+
+module_platform_driver(qrk_clanton_hill_driver);
+
+MODULE_AUTHOR("Bryan O'Donoghue <bryan.odonoghue@intel.com>");
+MODULE_DESCRIPTION("Clanton Hill BSP Data");
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_ALIAS("platform:"DRIVER_NAME);
-- 
1.7.5.4

