From 747e56730f47abf92c2d83af0dff85078ef63fe8 Mon Sep 17 00:00:00 2001
From: Pengyu Ma <pengyu.ma@windriver.com>
Date: Mon, 27 Jul 2015 08:39:16 +0000
Subject: [PATCH 1/2] Revert "spi-pxa2xx: enable MSI support and fix detection
 failure."

MSI support in SPI is not necessary

This reverts commit 18d0b4f28d9b6c4c244a38bf2a976e54b7efb10f.
---
 drivers/spi/spi-pxa2xx-pci.c |   27 ++++-----------------------
 drivers/spi/spi-pxa2xx.c     |   14 +-------------
 include/linux/pxa2xx_ssp.h   |    1 -
 3 files changed, 5 insertions(+), 37 deletions(-)

diff --git a/drivers/spi/spi-pxa2xx-pci.c b/drivers/spi/spi-pxa2xx-pci.c
index 3e63224..88b8f91 100644
--- a/drivers/spi/spi-pxa2xx-pci.c
+++ b/drivers/spi/spi-pxa2xx-pci.c
@@ -54,14 +54,6 @@ static bool lpss_dma_filter(struct dma_chan *chan, void *param)
 	return true;
 }
 
-#ifdef CONFIG_X86_INTEL_QUARK
-static int enable_msi = 1;
-#else
-static int enable_msi;
-#endif
-module_param(enable_msi, int, S_IRUGO | S_IWUSR);
-MODULE_PARM_DESC(enable_msi, "Enable PCI MSI mode");
-
 static struct pxa_spi_info spi_info_configs[] = {
 	[PORT_CE4100] = {
 		.type = PXA25x_SSP,
@@ -104,7 +96,7 @@ static struct pxa_spi_info spi_info_configs[] = {
 	[PORT_QUARK_X1000] = {
 		.type = QUARK_X1000_SSP,
 		.port_id = -1,
-		.num_chipselect = 4,
+		.num_chipselect = 1,
 		.max_clk_rate = 50000000,
 	},
 };
@@ -159,28 +151,17 @@ static int pxa2xx_spi_pci_probe(struct pci_dev *dev,
 	spi_pdata.enable_dma = c->rx_param && c->tx_param;
 
 	ssp = &spi_pdata.ssp;
-	ssp->pcidev = dev;
 	ssp->phys_base = pci_resource_start(dev, 0);
 	ssp->mmio_base = pcim_iomap_table(dev)[0];
 	if (!ssp->mmio_base) {
 		dev_err(&dev->dev, "failed to ioremap() registers\n");
 		return -EIO;
 	}
-
-	pci_set_master(dev);
-	if (enable_msi == 1) {
-		ret = pci_enable_msi(dev);
-		if (ret) {
-			dev_dbg(&dev->dev, "failed to allocate MSI entry\n");
-		}
-	}
-
 	ssp->irq = dev->irq;
 	ssp->port_id = (c->port_id >= 0) ? c->port_id : dev->devfn;
-	if (c->type != QUARK_X1000_SSP)
-		ssp->port_id = (c->port_id >= 0) ? c->port_id : dev->devfn;
-	else
-		ssp->port_id = PCI_FUNC(dev->devfn);
+#ifdef CONFIG_X86_INTEL_QUARK
+	ssp->port_id = PCI_FUNC(ssp->port_id);
+#endif
 	ssp->type = c->type;
 
 	snprintf(buf, sizeof(buf), "pxa2xx-spi.%d", ssp->port_id);
diff --git a/drivers/spi/spi-pxa2xx.c b/drivers/spi/spi-pxa2xx.c
index 8568c48..cba00ac 100644
--- a/drivers/spi/spi-pxa2xx.c
+++ b/drivers/spi/spi-pxa2xx.c
@@ -38,9 +38,6 @@
 #include <asm/io.h>
 #include <asm/irq.h>
 #include <asm/delay.h>
-#ifdef CONFIG_X86_INTEL_QUARK
-#include <asm/qrk.h>
-#endif
 
 #include "spi-pxa2xx.h"
 
@@ -689,7 +686,6 @@ static irqreturn_t ssp_int(int irq, void *dev_id)
 	u32 sccr1_reg;
 	u32 mask = drv_data->mask_sr;
 	u32 status;
-	irqreturn_t ret;
 
 	/*
 	 * The IRQ might be shared with other peripherals so we must first
@@ -719,10 +715,6 @@ static irqreturn_t ssp_int(int irq, void *dev_id)
 	if (!(status & mask))
 		return IRQ_NONE;
 
-#ifdef CONFIG_X86_INTEL_QUARK
-	mask_pvm(drv_data->ssp->pcidev);
-#endif
-
 	if (!drv_data->cur_msg) {
 
 		write_SSCR0(read_SSCR0(reg) & ~SSCR0_SSE, reg);
@@ -738,11 +730,7 @@ static irqreturn_t ssp_int(int irq, void *dev_id)
 		return IRQ_HANDLED;
 	}
 
-	ret = drv_data->transfer_handler(drv_data);
-#ifdef CONFIG_X86_INTEL_QUARK
-	unmask_pvm(drv_data->ssp->pcidev);
-#endif
-	return ret;
+	return drv_data->transfer_handler(drv_data);
 }
 
 /*
diff --git a/include/linux/pxa2xx_ssp.h b/include/linux/pxa2xx_ssp.h
index 95f443d..671248c 100644
--- a/include/linux/pxa2xx_ssp.h
+++ b/include/linux/pxa2xx_ssp.h
@@ -212,7 +212,6 @@ struct ssp_device {
 	int		irq;
 	int		drcmr_rx;
 	int		drcmr_tx;
-	struct pci_dev  *pcidev;
 
 	struct device_node	*of_node;
 };
-- 
1.7.5.4

