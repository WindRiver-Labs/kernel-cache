From b6af516fa2efe02c2f41ba62422e5c7066aaa4c9 Mon Sep 17 00:00:00 2001
From: Dan O'Donovan <dan@emutex.com>
Date: Wed, 4 Feb 2015 12:06:11 +0000
Subject: [PATCH 04/42] platform: quark: Add Reliance Creek platform driver

Add platform driver to register the following devices on the
Intel Quark-based Reliance Creek platform:
- SPI devices
  - SC16IS741 SPI to single-UART
  - SC16IS752 SPI to dual-UART
- I2C devices
  - TMP75 temperature sensor
  - 24C64 EEPROM
  - PCF8574 I2C to GPIO (x3)

Signed-off-by: Dan O'Donovan <dan@emutex.com>
Signed-off-by: Kartikey Parmar <kartikeyx.r.parmar@intel.com>
Change-Id: Iebac54557a4dc8145d180f4a2c27d53a90ccf692
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4639
Tested-by: Fung, Joshua <joshua.fung@intel.com>
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/platform/x86/intel-quark/Makefile          |    1 +
 .../intel-quark/intel_qrk_plat_reliance_creek.c    |  430 ++++++++++++++++++++
 .../x86/intel-quark/intel_quark_board_data.c       |    8 +
 3 files changed, 439 insertions(+), 0 deletions(-)
 create mode 100644 drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c

diff --git a/drivers/platform/x86/intel-quark/Makefile b/drivers/platform/x86/intel-quark/Makefile
index 6fa3737..fa20ce1 100644
--- a/drivers/platform/x86/intel-quark/Makefile
+++ b/drivers/platform/x86/intel-quark/Makefile
@@ -6,6 +6,7 @@ obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_cross_hill.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_clanton_peak.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_clanton_hill.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_kips_bay.o
+obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_qrk_plat_reliance_creek.o
 obj-$(CONFIG_INTEL_QRK_J1708) += intel_qrk_j1708.o
 obj-$(CONFIG_INTEL_QRK_AUDIO_CTRL)+= intel_qrk_audio_ctrl.o
 obj-$(CONFIG_INTEL_QRK_THERMAL)+= intel_qrk_thermal.o
diff --git a/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c b/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
new file mode 100644
index 0000000..566ecf3
--- /dev/null
+++ b/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
@@ -0,0 +1,430 @@
+/*
+ * Intel Quark board support platform driver
+ *
+ * Copyright(c) 2015 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * Author : Dan O'Donovan <dan@emutex.com> 2015
+ */
+
+#include <linux/errno.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/i2c/at24.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/module.h>
+#include <linux/mfd/intel_qrk_gip_pdata.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mtd/physmap.h>
+#include <linux/platform_device.h>
+#include <linux/printk.h>
+#include <linux/spi/pxa2xx_spi.h>
+#include <linux/spi/spi.h>
+#include <linux/i2c/pcf857x.h>
+
+#define DRIVER_NAME		"RelianceCreek"
+#define GPIO_RESTRICT_NAME_NC	"qrk-gpio-restrict-nc"
+#define GPIO_RESTRICT_NAME_SC	"qrk-gpio-restrict-sc"
+
+/* GPIO signal names from RelianceCreek board data-sheet, prefixed with GPIO_ */
+#define GPIO_IRQ_SPI2UART_B_BUF		15
+#define GPIO_GPIO1_RS485_IRQ		9
+
+static int nc_gpio_reg;
+static int sc_gpio_reg;
+
+/* Reliance Creek boards require i2c master to operate @400kHz 'fast mode' */
+static struct intel_qrk_gip_pdata gip_pdata = {
+	.i2c_std_mode = 0,
+};
+static struct intel_qrk_gip_pdata *reliance_creek_gip_get_pdata(void)
+{
+	return &gip_pdata;
+}
+
+#include "linux/i2c/pca953x.h"
+#define PCF8574_GPIO_BASE_OFFSET 16
+
+static struct pcf857x_platform_data pcf8574_platform_data_exp1 = {
+	.gpio_base = PCF8574_GPIO_BASE_OFFSET,
+};
+
+static struct pcf857x_platform_data pcf8574_platform_data_exp2 = {
+	.gpio_base = PCF8574_GPIO_BASE_OFFSET + 8,
+};
+
+static struct pcf857x_platform_data pcf8574_platform_data_exp3 = {
+	.gpio_base = PCF8574_GPIO_BASE_OFFSET + 16,
+};
+
+
+/******************************************************************************
+ *                        Reliance Creek i2c clients
+ ******************************************************************************/
+#define TMP75_ADDR				0x48
+#define EEPROM_ADDR				0x50
+#define PCF8574_EXP1_ADDR			0x23
+#define PCF8574_EXP2_ADDR			0x21
+#define PCF8574_EXP3_ADDR			0x22
+
+static struct i2c_board_info probed_i2c_tmp75;
+static struct i2c_board_info probed_i2c_eeprom;
+static struct i2c_board_info probed_i2c_pcf8574_exp1 = {
+	.platform_data = &pcf8574_platform_data_exp1,
+};
+static struct i2c_board_info probed_i2c_pcf8574_exp2 = {
+	.platform_data = &pcf8574_platform_data_exp2,
+};
+static struct i2c_board_info probed_i2c_pcf8574_exp3 = {
+	.platform_data = &pcf8574_platform_data_exp3,
+};
+
+static const unsigned short tmp75_i2c_addr[] = {
+	TMP75_ADDR, I2C_CLIENT_END
+};
+static const unsigned short eeprom_i2c_addr[] = {
+	EEPROM_ADDR, I2C_CLIENT_END
+};
+static const unsigned short pcf8574_exp1_i2c_addr[] = {
+	PCF8574_EXP1_ADDR, I2C_CLIENT_END
+};
+static const unsigned short pcf8574_exp2_i2c_addr[] = {
+	PCF8574_EXP2_ADDR, I2C_CLIENT_END
+};
+static const unsigned short pcf8574_exp3_i2c_addr[] = {
+	PCF8574_EXP3_ADDR, I2C_CLIENT_END
+};
+
+static int i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	/* Always return success: the I2C clients are already known.  */
+	return 1;
+}
+
+/******************************************************************************
+ *             NXP SC16IS7XX SPI Device Platform Data
+ ******************************************************************************/
+
+static const unsigned long sc16is752_platform_data = 18432000;
+static const unsigned long sc16is741_platform_data = 18432000;
+
+/******************************************************************************
+ *                 Intel Quark SPI Controller Data
+ ******************************************************************************/
+static struct pxa2xx_spi_chip qrk_ffrd_spi_0_cs_0 = {
+	.gpio_cs = 4,
+};
+
+static struct pxa2xx_spi_chip qrk_ffrd_spi_1_cs_0 = {
+	.gpio_cs = 10,
+};
+
+static struct spi_board_info spi_sc16is752_info = {
+	.modalias = "sc16is752",
+	.max_speed_hz = 4000000,
+	.mode = SPI_MODE_0,
+	.bus_num = 0,
+	.chip_select = 0,
+	.controller_data = &qrk_ffrd_spi_0_cs_0,
+	.platform_data = &sc16is752_platform_data,
+};
+
+static struct spi_board_info spi_sc16is741_info = {
+	.modalias = "sc16is74x",
+	.max_speed_hz = 4000000,
+	.mode = SPI_MODE_0,
+	.bus_num = 1,
+	.chip_select = 0,
+	.controller_data = &qrk_ffrd_spi_1_cs_0,
+	.platform_data = &sc16is741_platform_data,
+};
+
+
+static struct gpio reserved_gpios[] = {
+	{
+		GPIO_IRQ_SPI2UART_B_BUF,
+		GPIOF_IN,
+		"sc16is752-int",
+	},
+	{
+		GPIO_GPIO1_RS485_IRQ,
+		GPIOF_IN,
+		"sc16is741-int",
+	},
+};
+
+/**
+ * intel_qrk_gpio_restrict_probe
+ *
+ * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
+ * GPIOs are never released nor accessed by this driver.
+ *
+ * Registers devices which are dependent on these GPIO drivers
+ */
+static int intel_qrk_gpio_restrict_probe(void)
+{
+	int ret;
+
+	/* Reserve GPIOs for SPI device interrupts (never released) */
+	ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
+	if (ret) {
+		pr_err("%s: failed to request reserved gpios\n",
+		       __func__);
+		goto end;
+	}
+
+	/*
+	 * Register on-board SPI devices
+	 */
+	spi_sc16is752_info.irq = gpio_to_irq(GPIO_IRQ_SPI2UART_B_BUF);
+	ret = spi_register_board_info(&spi_sc16is752_info, 1);
+	if (ret) {
+		pr_err("%s: Failed to register sc16is752 SPI device\n",
+		       __func__);
+		goto end;
+	}
+
+	spi_sc16is741_info.irq = gpio_to_irq(GPIO_GPIO1_RS485_IRQ);
+	ret = spi_register_board_info(&spi_sc16is741_info, 1);
+	if (ret) {
+		pr_err("%s: Failed to register sc16is741 SPI device\n",
+		       __func__);
+		goto end;
+	}
+
+end:
+	return ret;
+}
+
+/**
+ * intel_qrk_gpio_restrict_probe_nc
+ *
+ * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
+ * GPIOs are never released nor accessed by this driver.
+ */
+static int intel_qrk_gpio_restrict_probe_nc(struct platform_device *pdev)
+{
+	int ret;
+	nc_gpio_reg = 1;
+
+	if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
+		ret = intel_qrk_gpio_restrict_probe();
+		if (ret)
+			return ret;
+	}
+	return 0;
+}
+
+/**
+ * intel_qrk_gpio_restrict_probe_sc
+ *
+ * Make GPIOs pertaining to Firmware inaccessible by requesting them.  The
+ * GPIOs are never released nor accessed by this driver.
+ */
+static int intel_qrk_gpio_restrict_probe_sc(struct platform_device *pdev)
+{
+	int ret;
+	sc_gpio_reg = 1;
+
+	if (nc_gpio_reg == 1 && sc_gpio_reg == 1) {
+		ret = intel_qrk_gpio_restrict_probe();
+		if (ret)
+			return ret;
+	}
+	return 0;
+}
+
+static struct platform_driver gpio_restrict_pdriver_nc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_NC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_nc,
+};
+
+static struct platform_driver gpio_restrict_pdriver_sc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_SC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_sc,
+};
+
+/**
+ * intel_qrk_i2c_add_onboard_devs
+ *
+ * @return 0 on success or standard errnos on failure
+ *
+ * Registers onboard I2c device(s) present on the Reliance Creek platform
+ */
+static int intel_qrk_i2c_add_onboard_devs(void)
+{
+	int ret = 0;
+	struct i2c_adapter *i2c_adap = NULL;
+	struct i2c_client *client = NULL;
+
+	i2c_adap = i2c_get_adapter(0);
+	if (NULL == i2c_adap) {
+		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
+			__func__);
+		return -EPROBE_DEFER;
+	}
+
+	/*
+	 * Register on-board I2C devices
+	 */
+	strlcpy(probed_i2c_tmp75.type, "tmp75", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_tmp75,
+				       tmp75_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe tmp75 I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+	strlcpy(probed_i2c_eeprom.type, "24c64", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_eeprom,
+				       eeprom_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe 24c64 I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+	strlcpy(probed_i2c_pcf8574_exp3.type, "pcf8574", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcf8574_exp3,
+				       pcf8574_exp3_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe pcf8574 I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+end:
+	i2c_put_adapter(i2c_adap);
+
+	return ret;
+}
+
+/**
+ * intel_qrk_i2c_add_onboard_devs
+ *
+ * @return 0 on success or standard errnos on failure
+ *
+ * Registers I2c device(s) present on the Reliance Creek Sensor Interface Board
+ */
+static int intel_qrk_i2c_add_sib_devs(void)
+{
+	int ret = 0;
+	struct i2c_adapter *i2c_adap = NULL;
+	struct i2c_client *client = NULL;
+
+	i2c_adap = i2c_get_adapter(0);
+	if (NULL == i2c_adap) {
+		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
+			__func__);
+		return -EPROBE_DEFER;
+	}
+
+	/*
+	 * Register I2C devices on the Sensor Interface Board
+	 */
+	strlcpy(probed_i2c_pcf8574_exp1.type, "pcf8574", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcf8574_exp1,
+				       pcf8574_exp1_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe pcf8574 I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+	strlcpy(probed_i2c_pcf8574_exp2.type, "pcf8574", I2C_NAME_SIZE);
+	client = i2c_new_probed_device(i2c_adap, &probed_i2c_pcf8574_exp2,
+				       pcf8574_exp2_i2c_addr, i2c_probe);
+	if (client == NULL) {
+		pr_err("%s: Failed to probe pcf8574 I2C device\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+end:
+	i2c_put_adapter(i2c_adap);
+
+	return ret;
+}
+
+static int intel_qrk_plat_reliance_creek_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	/* Assign GIP driver handle for board-specific settings */
+	intel_qrk_gip_get_pdata = reliance_creek_gip_get_pdata;
+
+	/* Register on-board I2C devices (common to all SKUs) */
+	ret = intel_qrk_i2c_add_onboard_devs();
+	if (ret)
+		return ret;
+
+	/* Register I2C devices on Sensor Interface Board
+	 * Applicable to Reliance Creek SPU board only
+	 */
+	if (pdev->id_entry && pdev->id_entry->driver_data) {
+		ret = intel_qrk_i2c_add_sib_devs();
+		if (ret)
+			return ret;
+	}
+
+	/* Note that we register I2C devices first and everything else later
+	 * because the I2C reg functions may return -EPROBE_DEFER
+	 * and the following functions are not written to be idempotent
+	 */
+	ret = platform_driver_register(&gpio_restrict_pdriver_nc);
+	if (ret)
+		return ret;
+	ret = platform_driver_register(&gpio_restrict_pdriver_sc);
+	if (ret)
+		return ret;
+
+
+	return 0;
+}
+
+static int intel_qrk_plat_reliance_creek_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_device_id intel_qrk_reliance_creek_ids[] = {
+	{
+		.name = "RelianceCreek",
+		.driver_data = 0,
+	},
+	{
+		.name = "RelianceCreekSPU",
+		.driver_data = 1,
+	},
+};
+MODULE_DEVICE_TABLE(platform, intel_qrk_reliance_creek_ids);
+
+static struct platform_driver intel_qrk_reliance_creek_driver = {
+	.driver		= {
+		.name	= DRIVER_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_plat_reliance_creek_probe,
+	.remove		= intel_qrk_plat_reliance_creek_remove,
+	.id_table	= intel_qrk_reliance_creek_ids,
+};
+
+module_platform_driver(intel_qrk_reliance_creek_driver);
+
+MODULE_AUTHOR("Dan O'Donovan <dan@emutex.com>");
+MODULE_DESCRIPTION("Reliance Creek BSP Data");
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_ALIAS("platform:"DRIVER_NAME);
diff --git a/drivers/platform/x86/intel-quark/intel_quark_board_data.c b/drivers/platform/x86/intel-quark/intel_quark_board_data.c
index c75ed6e..1304bf5 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_board_data.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_board_data.c
@@ -121,6 +121,14 @@ static struct platform_device bsp_data[] = {
 		.name	= "KipsBay",
 		.id	= -1,
 	},
+	{
+		.name	= "RelianceCreek",
+		.id	= -1,
+	},
+	{
+		.name	= "RelianceCreekSPU",
+		.id	= -1,
+	},
 };
 
 /**
-- 
1.7.5.4

