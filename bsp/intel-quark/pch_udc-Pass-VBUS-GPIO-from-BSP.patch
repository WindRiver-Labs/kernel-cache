From 5c671fcb383bc3890954524944705659843157d4 Mon Sep 17 00:00:00 2001
From: Bogdan Pricop <bogdan.pricop@emutex.com>
Date: Tue, 3 Mar 2015 09:19:47 +0000
Subject: [PATCH 13/42] pch_udc: Pass VBUS GPIO from BSP

* Add an intermediary module pch-gpio-vbus which is build only if the
  user selects USB_EG20T_GPIO_VBUS new defined option. It is loaded
  by the kernel when the BSP creates its associated platform device.

* If USB_EG20T_GPIO_VBUS option is select pch_udc driver knows it runs
  on a HW platform which supports GPIO VBUS sensing and returns
  -EPROBE_DEFER until it gets a valid platform data structure from
  pch-gpio-vbus module.

Signed-off-by: Bogdan Pricop <bogdan.pricop@emutex.com>
Signed-off-by: Kartikey Parmar <kartikeyx.r.parmar@intel.com>
Change-Id: I537023a541b3f84791c3ec76200500a3258def61
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4649
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/usb/gadget/Kconfig            |   14 ++++++++
 drivers/usb/gadget/Makefile           |    1 +
 drivers/usb/gadget/pch_gpio_vbus.c    |   57 +++++++++++++++++++++++++++++++++
 drivers/usb/gadget/pch_udc.c          |   17 ++++++++++
 include/linux/platform_data/pch_udc.h |   28 ++++++++++++++++
 include/linux/usb/pch_gpio_vbus.h     |   25 ++++++++++++++
 6 files changed, 142 insertions(+), 0 deletions(-)
 create mode 100644 drivers/usb/gadget/pch_gpio_vbus.c
 create mode 100644 include/linux/platform_data/pch_udc.h
 create mode 100644 include/linux/usb/pch_gpio_vbus.h

diff --git a/drivers/usb/gadget/Kconfig b/drivers/usb/gadget/Kconfig
index fd13ef0..60d81f1 100644
--- a/drivers/usb/gadget/Kconfig
+++ b/drivers/usb/gadget/Kconfig
@@ -467,6 +467,20 @@ config USB_EG20T
 	  ML7213/ML7831 is completely compatible for Intel EG20T PCH.
 
 	  This driver can be used with Intel's Quark X1000 SOC platform
+
+config USB_EG20T_GPIO_VBUS
+	tristate "USB UDC Platform Data"
+	depends on USB_EG20T
+	help
+	  Select this option only and if you know for sure your Hardware
+	  platform supports GPIO VBUS sensing.
+	  Make sure your BSP initialises the pch-udc platform data and creates
+	  the associated platform device, otherwise the USB_EG20T driver is
+	  never going to be loaded.
+
+	  If you aren't absolute sure about GPIO VBUS support on your Hardware
+	  platform, don't select this module.
+
 #
 # LAST -- dummy/emulated controller
 #
diff --git a/drivers/usb/gadget/Makefile b/drivers/usb/gadget/Makefile
index 5f150bc..0bd1b3d 100644
--- a/drivers/usb/gadget/Makefile
+++ b/drivers/usb/gadget/Makefile
@@ -30,6 +30,7 @@ obj-$(CONFIG_USB_S3C_HSOTG)	+= s3c-hsotg.o
 obj-$(CONFIG_USB_S3C_HSUDC)	+= s3c-hsudc.o
 obj-$(CONFIG_USB_LPC32XX)	+= lpc32xx_udc.o
 obj-$(CONFIG_USB_EG20T)		+= pch_udc.o
+obj-$(CONFIG_USB_EG20T_GPIO_VBUS)	+= pch_gpio_vbus.o
 obj-$(CONFIG_USB_MV_UDC)	+= mv_udc.o
 mv_udc-y			:= mv_udc_core.o
 obj-$(CONFIG_USB_FUSB300)	+= fusb300_udc.o
diff --git a/drivers/usb/gadget/pch_gpio_vbus.c b/drivers/usb/gadget/pch_gpio_vbus.c
new file mode 100644
index 0000000..74c20cb
--- /dev/null
+++ b/drivers/usb/gadget/pch_gpio_vbus.c
@@ -0,0 +1,57 @@
+/*
+ * Copyright(c) 2015 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+/* Driver loaded by kernel when BSP creates a pch-gpio-vbus platform device.
+ * Used for passing the pdata from BSP layer to PCI driver layer
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/usb/pch_gpio_vbus.h>
+
+static struct pch_udc_platform_data *pdata;
+
+
+struct pch_udc_platform_data *get_pch_udc_platform_data(void)
+{
+	return pdata;
+}
+EXPORT_SYMBOL_GPL(get_pch_udc_platform_data);
+
+
+static int pch_udc_gpio_vbus_probe(struct platform_device *pdev)
+{
+	dev_info(&pdev->dev, "Probing driver...\n");
+	pdata = pdev->dev.platform_data;
+	if (!pdata)
+		dev_warn(&pdev->dev, "pdata is NULL!\n");
+	else
+		dev_info(&pdev->dev, "pdata OK!\n");
+
+	return 0;
+}
+
+static struct platform_driver pch_udc_gpio_vbus_driver = {
+	.driver		= {
+		.name	= "pch_gpio_vbus",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= pch_udc_gpio_vbus_probe,
+	.remove		= NULL,
+};
+module_platform_driver(pch_udc_gpio_vbus_driver);
+
+MODULE_AUTHOR("Bogdan Pricop <bogdan.pricop@emutex.com>");
+MODULE_DESCRIPTION("USB pch-udc platform data");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:pch_gpio_vbus");
diff --git a/drivers/usb/gadget/pch_udc.c b/drivers/usb/gadget/pch_udc.c
index 460d953..3257c82 100644
--- a/drivers/usb/gadget/pch_udc.c
+++ b/drivers/usb/gadget/pch_udc.c
@@ -17,6 +17,7 @@
 #include <linux/usb/gadget.h>
 #include <linux/gpio.h>
 #include <linux/irq.h>
+#include <linux/usb/pch_gpio_vbus.h>
 
 /* GPIO port for VBUS detecting */
 static int vbus_gpio_port = -1;		/* GPIO port number (-1:Not used) */
@@ -3177,6 +3178,22 @@ static int pch_udc_probe(struct pci_dev *pdev,
 		retval = -ENODEV;
 		goto finished;
 	}
+
+	/* If the driver runs on a HW platform which supports GPIO VBUS sensing
+	 * and the BSP layer initialises the platform data structure, get it
+	 * through pch-gpio-vbus driver */
+#ifdef CONFIG_USB_EG20T_GPIO_VBUS
+	dev_info(&pdev->dev, "GPIO VBUS support present!\n");
+	struct pch_udc_platform_data *pdata = NULL;
+	pdata = get_pch_udc_platform_data();
+	if (NULL == pdata) {
+		dev_info(&pdev->dev, "Platform device not registered yet... probe defered!\n");
+		retval = -EPROBE_DEFER;
+		goto finished;
+	}
+	vbus_gpio_port = pdata->vbus_gpio_port;
+#endif
+
 	/* initialize the hardware */
 	if (pch_udc_pcd_init(dev)) {
 		retval = -ENODEV;
diff --git a/include/linux/platform_data/pch_udc.h b/include/linux/platform_data/pch_udc.h
new file mode 100644
index 0000000..dd462e1
--- /dev/null
+++ b/include/linux/platform_data/pch_udc.h
@@ -0,0 +1,28 @@
+/*
+ * Intel QRK/EG20T OCH/LAPIS Semiconductor UDC driver
+ *
+ * Copyright(c) 2015 Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#ifndef LINUX_PLATFORM_DATA_PCH_UDC_H
+#define LINUX_PLATFORM_DATA_PCH_UDC_H
+
+/**
+ * struct pch_udc_platform_data - Structure holding GPIO informaton
+ *					for detecting VBUS
+ * @vbus_gpio_port:		gpio port number
+ */
+struct pch_udc_platform_data {
+	int		    vbus_gpio_port;
+};
+
+#endif /* LINUX_PLATFORM_DATA_PCH_UDC_H */
diff --git a/include/linux/usb/pch_gpio_vbus.h b/include/linux/usb/pch_gpio_vbus.h
new file mode 100644
index 0000000..91cea1e
--- /dev/null
+++ b/include/linux/usb/pch_gpio_vbus.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright(c) 2015 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#ifndef PCH_GPIO_VBUS_H
+#define PCH_GPIO_VBUS_H
+
+#include <linux/platform_data/pch_udc.h>
+
+/**
+ * Get platform data structure filled in by BSP driver.
+ */
+struct pch_udc_platform_data *get_pch_udc_platform_data(void);
+
+
+#endif /* PCH_GPIO_VBUS_H */
-- 
1.7.5.4

