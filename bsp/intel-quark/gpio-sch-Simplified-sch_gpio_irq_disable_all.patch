From 96ecb85380e4c221d4ef94e24a80e6264b64f586 Mon Sep 17 00:00:00 2001
From: William Rafferty <william.a.rafferty@intel.com>
Date: Fri, 12 Jun 2015 11:17:03 +0100
Subject: [PATCH 38/65] gpio-sch: Simplified sch_gpio_irq_disable_all()

Signed-off-by: William Rafferty <william.a.rafferty@intel.com>
Change-Id: Ib02c929717d574914cd4a7927d9664bf831c7e05
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5348
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |   46 ++++++++++++++++++++++------------------------
 1 files changed, 22 insertions(+), 24 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index ccb79ae..6f0e515 100755
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -43,6 +43,8 @@
 #define CGNMIEN	0x40
 #define RGNMIEN	0x44
 
+#define RESUME_WELL_OFFSET	0x20
+
 /* Maximum number of GPIOS supported by this driver */
 #define MAX_GPIO_IRQS	9
 
@@ -81,7 +83,7 @@ static unsigned sch_gpio_offset(struct sch_gpio *sch, unsigned gpio,
 
 	if (gpio >= sch->resume_base) {
 		gpio -= sch->resume_base;
-		base += 0x20;
+		base += RESUME_WELL_OFFSET;
 	}
 
 	return base + reg + gpio / 8;
@@ -357,29 +359,25 @@ static void sch_gpio_irqs_deinit(struct sch_gpio *sch, unsigned int num)
 	}
 }
 
-static void sch_gpio_irq_disable_all(struct sch_gpio *sch, unsigned int num)
+static void sch_gpio_irq_disable_all(struct sch_gpio *sch)
 {
-	unsigned long flags;
-	unsigned int gpio_num;
-
-	spin_lock_irqsave(&sch->lock, flags);
-
-	for (gpio_num = 0; gpio_num < num; gpio_num++) {
-		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 0);
-		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 0);
-		sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 0);
-		sch_gpio_reg_set(&sch->chip, gpio_num, GSMI, 0);
-
-		if (gpio_num >= sch->resume_base)
-			sch_gpio_reg_set(&sch->chip, gpio_num, RGNMIEN, 0);
-		else
-			sch_gpio_reg_set(&sch->chip, gpio_num, CGNMIEN, 0);
-
-		/* clear any pending interrupts */
-		sch_gpio_reg_set(&sch->chip, gpio_num, GTS, 1);
-	}
-
-	spin_unlock_irqrestore(&sch->lock, flags);
+	/* Disable core well interrupts */
+	outl(0x00, sch->iobase + GTPE);
+	outl(0x00, sch->iobase + GTNE);
+	outl(0x00, sch->iobase + GGPE);
+	outl(0x00, sch->iobase + GSMI);
+	outl(0x00, sch->iobase + CGNMIEN);
+
+	/* Disable resume well interrupts */
+	outl(0x00, sch->iobase + GTPE + RESUME_WELL_OFFSET);
+	outl(0x00, sch->iobase + GTNE + RESUME_WELL_OFFSET);
+	outl(0x00, sch->iobase + GGPE + RESUME_WELL_OFFSET);
+	outl(0x00, sch->iobase + GSMI + RESUME_WELL_OFFSET);
+	outl(0x00, sch->iobase + RGNMIEN);
+
+	/* Clear any pending interrupts */
+	outl(0xFFFFFFFF, sch->iobase + GTS);
+	outl(0xFFFFFFFF, sch->iobase + GTS + RESUME_WELL_OFFSET);
 }
 
 static inline irqreturn_t do_serve_irq(int reg_status, unsigned int irq_base)
@@ -504,7 +502,7 @@ static int sch_gpio_probe(struct platform_device *pdev)
 		}
 
 		/* disable interrupts */
-		sch_gpio_irq_disable_all(sch, sch->chip.ngpio);
+		sch_gpio_irq_disable_all(sch);
 
 		err = request_irq(sch->irq, sch_gpio_irq_handler, IRQF_SHARED,
 				  KBUILD_MODNAME, sch);
-- 
1.7.5.4

