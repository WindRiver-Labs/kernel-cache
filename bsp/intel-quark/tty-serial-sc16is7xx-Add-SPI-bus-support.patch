From 999a747ada5a33fa05094f7f8743027c20f7ebc6 Mon Sep 17 00:00:00 2001
From: Bogdan Pricop <bogdan.pricop@emutex.com>
Date: Thu, 5 Feb 2015 17:57:12 +0000
Subject: [PATCH 02/42] tty: serial: sc16is7xx: Add SPI bus support

* Move I2C-specific code into separate module (sc16is7xx-i2c.c)
* Add new SPI-specific code in new module (sc16is7xx-spi.c)
* Move some common data definitions into new file (sc16is7xx.h)
* Add new sc16is7xx-spi and sc16is7xx-i2c modules to Kconfig/Makefile

Signed-off-by: Bogdan Pricop <bogdan.pricop@emutex.com>
Signed-off-by: Dan O'Donovan <dan@emutex.com>
Signed-off-by: Kartikey Parmar <kartikeyx.r.parmar@intel.com>
Change-Id: I413d43814698faa960a81523280853c4be363f9a
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4638
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/tty/serial/Kconfig         |   23 ++++++-
 drivers/tty/serial/Makefile        |    2 +
 drivers/tty/serial/sc16is7xx-i2c.c |   87 +++++++++++++++++++++++
 drivers/tty/serial/sc16is7xx-spi.c |   84 +++++++++++++++++++++++
 drivers/tty/serial/sc16is7xx.c     |  133 ++++++------------------------------
 drivers/tty/serial/sc16is7xx.h     |   77 +++++++++++++++++++++
 6 files changed, 292 insertions(+), 114 deletions(-)
 create mode 100644 drivers/tty/serial/sc16is7xx-i2c.c
 create mode 100644 drivers/tty/serial/sc16is7xx-spi.c
 create mode 100644 drivers/tty/serial/sc16is7xx.h

diff --git a/drivers/tty/serial/Kconfig b/drivers/tty/serial/Kconfig
index e3b094a..b3f011a 100644
--- a/drivers/tty/serial/Kconfig
+++ b/drivers/tty/serial/Kconfig
@@ -1162,14 +1162,33 @@ config SERIAL_SCCNXP_CONSOLE
 
 config SERIAL_SC16IS7XX
 	tristate "SC16IS7xx serial support"
-	depends on I2C
+	depends on (I2C || SPI_MASTER)
 	select SERIAL_CORE
-	select REGMAP_I2C if I2C
 	help
 	  This selects support for SC16IS7xx serial ports.
 	  Supported ICs are SC16IS740, SC16IS741, SC16IS750, SC16IS752,
 	  SC16IS760 and SC16IS762.
 
+config SERIAL_SC16IS7XX_SPI
+	tristate "support SPI bus connection"
+	depends on SERIAL_SC16IS7XX && SPI_MASTER
+	select REGMAP_SPI
+	help
+	  Say Y here if you have a SC16IS7XX UART hooked up to a SPI bus.
+
+	  To compile this driver as a module, choose M here;
+	  the module will be called sc16is7xx-spi.
+
+config SERIAL_SC16IS7XX_I2C
+	tristate "support I2C bus connection"
+	depends on SERIAL_SC16IS7XX && I2C
+	select REGMAP_I2C
+	help
+	  Say Y here if you have a SC16IS7XX UART hooked up to an I2C bus.
+
+	  To compile this driver as a module, choose M here;
+	  the module will be called sc16is7xx-i2c
+
 config SERIAL_BFIN_SPORT
 	tristate "Blackfin SPORT emulate UART"
 	depends on BLACKFIN
diff --git a/drivers/tty/serial/Makefile b/drivers/tty/serial/Makefile
index a4ead6b..d263f4b 100644
--- a/drivers/tty/serial/Makefile
+++ b/drivers/tty/serial/Makefile
@@ -85,6 +85,8 @@ obj-$(CONFIG_SERIAL_TEGRA) += serial-tegra.o
 obj-$(CONFIG_SERIAL_AR933X)   += ar933x_uart.o
 obj-$(CONFIG_SERIAL_EFM32_UART) += efm32-uart.o
 obj-$(CONFIG_SERIAL_SC16IS7XX) += sc16is7xx.o
+obj-$(CONFIG_SERIAL_SC16IS7XX_SPI) += sc16is7xx-spi.o
+obj-$(CONFIG_SERIAL_SC16IS7XX_I2C) += sc16is7xx-i2c.o
 obj-$(CONFIG_SERIAL_ARC)	+= arc_uart.o
 obj-$(CONFIG_SERIAL_RP2)	+= rp2.o
 obj-$(CONFIG_SERIAL_FSL_LPUART)	+= fsl_lpuart.o
diff --git a/drivers/tty/serial/sc16is7xx-i2c.c b/drivers/tty/serial/sc16is7xx-i2c.c
new file mode 100644
index 0000000..087ce2a
--- /dev/null
+++ b/drivers/tty/serial/sc16is7xx-i2c.c
@@ -0,0 +1,87 @@
+/*
+ * SC16IS7XX tty serial driver (I2C bus)
+ *
+ * Copyright (C) 2014 GridPoint
+ * Author: Jon Ringle <jringle@gridpoint.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/of_device.h>
+#include <linux/interrupt.h>
+#include <linux/of.h>
+#include <linux/regmap.h>
+#include <linux/module.h>
+#include <linux/i2c.h>
+
+#include "sc16is7xx.h"
+
+static int sc16is7xx_i2c_probe(struct i2c_client *i2c,
+			       const struct i2c_device_id *id)
+{
+	unsigned long flags = 0;
+	struct regmap *regmap;
+	struct sc16is7xx_devtype *devtype;
+	struct regmap_config regcfg;
+
+	if (i2c->dev.of_node) {
+		const struct of_device_id *of_id =
+				of_match_device(sc16is7xx_dt_ids, &i2c->dev);
+		if (of_id == NULL) {
+			dev_err(&i2c->dev, "Error getting device id!\n");
+			return -1;
+		}
+		devtype = (struct sc16is7xx_devtype *)of_id->data;
+	} else {
+		devtype = (struct sc16is7xx_devtype *)id->driver_data;
+	}
+
+	_dev_info(&i2c->dev, "device type: %s\n", devtype->name);
+	flags = IRQF_TRIGGER_LOW;
+
+	sc16is7xx_regmap_config_init(&regcfg, devtype->nr_uart);
+
+	regmap = devm_regmap_init_i2c(i2c, &regcfg);
+	if (IS_ERR(regmap)) {
+		dev_err(&i2c->dev, "Error initialising the I2C regmap!\n");
+		return -1;
+	}
+
+	return sc16is7xx_probe(&i2c->dev, devtype, regmap, i2c->irq, flags);
+}
+
+static int sc16is7xx_i2c_remove(struct i2c_client *client)
+{
+	return sc16is7xx_remove(&client->dev);
+}
+
+static const struct i2c_device_id sc16is7xx_i2c_id_table[] = {
+	{ "sc16is74x",	(kernel_ulong_t)&sc16is74x_devtype, },
+	{ "sc16is750",	(kernel_ulong_t)&sc16is750_devtype, },
+	{ "sc16is752",	(kernel_ulong_t)&sc16is752_devtype, },
+	{ "sc16is760",	(kernel_ulong_t)&sc16is760_devtype, },
+	{ "sc16is762",	(kernel_ulong_t)&sc16is762_devtype, },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, sc16is7xx_i2c_id_table);
+
+static struct i2c_driver sc16is7xx_i2c_uart_driver = {
+	.driver = {
+		.name		= SC16IS7XX_NAME,
+		.owner		= THIS_MODULE,
+		.of_match_table	= of_match_ptr(sc16is7xx_dt_ids),
+	},
+	.probe			= sc16is7xx_i2c_probe,
+	.remove			= sc16is7xx_i2c_remove,
+	.id_table		= sc16is7xx_i2c_id_table,
+};
+module_i2c_driver(sc16is7xx_i2c_uart_driver);
+
+MODULE_ALIAS("i2c:sc16is7xx");
+
+MODULE_AUTHOR("Nicol√°s Pernas Maradei <nicolas.pernas.maradei@emutex.com>");
+MODULE_DESCRIPTION("SC16IS7XX tty serial driver over I2C bus");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/tty/serial/sc16is7xx-spi.c b/drivers/tty/serial/sc16is7xx-spi.c
new file mode 100644
index 0000000..800fd885
--- /dev/null
+++ b/drivers/tty/serial/sc16is7xx-spi.c
@@ -0,0 +1,84 @@
+/*
+ * SC16IS7XX tty serial driver (SPI bus)
+ *
+ * Copyright (C) 2014 GridPoint
+ * Author: Jon Ringle <jringle@gridpoint.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/of_device.h>
+#include <linux/interrupt.h>
+#include <linux/of.h>
+#include <linux/regmap.h>
+#include <linux/module.h>
+#include <linux/spi/spi.h>
+
+#include "sc16is7xx.h"
+
+static int sc16is7xx_spi_probe(struct spi_device *spi)
+{
+	unsigned long flags = 0;
+	struct regmap *regmap;
+	struct sc16is7xx_devtype *devtype;
+	struct regmap_config regcfg;
+
+	if (spi->dev.of_node) {
+		const struct of_device_id *of_id =
+			of_match_device(sc16is7xx_dt_ids, &spi->dev);
+		if (of_id == NULL) {
+			dev_err(&spi->dev, "Error getting device id!\n");
+			return -1;
+		}
+		devtype = (struct sc16is7xx_devtype *)of_id->data;
+	} else {
+		const struct spi_device_id *id = spi_get_device_id(spi);
+		devtype = (struct sc16is7xx_devtype *)id->driver_data;
+	}
+	_dev_info(&spi->dev, "device type: %s\n", devtype->name);
+	flags = IRQF_TRIGGER_LOW;
+
+	sc16is7xx_regmap_config_init(&regcfg, devtype->nr_uart);
+
+	regmap = devm_regmap_init_spi(spi, &regcfg);
+	if (IS_ERR(regmap)) {
+		dev_err(&spi->dev, "Error initialising the SPI regmap!\n");
+		return -1;
+	}
+
+	return sc16is7xx_probe(&spi->dev, devtype, regmap, spi->irq, flags);
+}
+
+static int sc16is7xx_spi_remove(struct spi_device *spi)
+{
+	return sc16is7xx_remove(&spi->dev);
+}
+
+static const struct spi_device_id sc16is7xx_spi_id_table[] = {
+	{ "sc16is74x",	(kernel_ulong_t)&sc16is74x_devtype, },
+	{ "sc16is750",	(kernel_ulong_t)&sc16is750_devtype, },
+	{ "sc16is752",	(kernel_ulong_t)&sc16is752_devtype, },
+	{ "sc16is760",	(kernel_ulong_t)&sc16is760_devtype, },
+	{ "sc16is762",	(kernel_ulong_t)&sc16is762_devtype, },
+	{ }
+};
+MODULE_DEVICE_TABLE(spi, sc16is7xx_spi_id_table);
+
+static struct spi_driver sc16is7xx_spi_driver = {
+	.driver = {
+		.name		= SC16IS7XX_NAME,
+		.owner		= THIS_MODULE,
+		.of_match_table	= of_match_ptr(sc16is7xx_dt_ids),
+	},
+	.probe			= sc16is7xx_spi_probe,
+	.remove			= sc16is7xx_spi_remove,
+	.id_table		= sc16is7xx_spi_id_table,
+};
+module_spi_driver(sc16is7xx_spi_driver);
+
+MODULE_AUTHOR("Bogdan Pricop <bogdan.pricop@emutex.com>");
+MODULE_DESCRIPTION("SC16IS7XX tty serial driver over SPI bus");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/tty/serial/sc16is7xx.c b/drivers/tty/serial/sc16is7xx.c
index 4e73f55..5c4744f 100644
--- a/drivers/tty/serial/sc16is7xx.c
+++ b/drivers/tty/serial/sc16is7xx.c
@@ -16,7 +16,6 @@
 #include <linux/delay.h>
 #include <linux/device.h>
 #include <linux/gpio.h>
-#include <linux/i2c.h>
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
@@ -27,7 +26,8 @@
 #include <linux/tty_flip.h>
 #include <linux/uaccess.h>
 
-#define SC16IS7XX_NAME			"sc16is7xx"
+#include "sc16is7xx.h"
+
 
 /* SC16IS7XX register definitions */
 #define SC16IS7XX_RHR_REG		(0x00) /* RX FIFO */
@@ -292,13 +292,7 @@
 
 /* Misc definitions */
 #define SC16IS7XX_FIFO_SIZE		(64)
-#define SC16IS7XX_REG_SHIFT		2
 
-struct sc16is7xx_devtype {
-	char	name[10];
-	int	nr_gpio;
-	int	nr_uart;
-};
 
 struct sc16is7xx_one {
 	struct uart_port		port;
@@ -360,36 +354,6 @@ static void sc16is7xx_power(struct uart_port *port, int on)
 			      on ? 0 : SC16IS7XX_IER_SLEEP_BIT);
 }
 
-static struct sc16is7xx_devtype sc16is74x_devtype = {
-	.name		= "SC16IS74X",
-	.nr_gpio	= 0,
-	.nr_uart	= 1,
-};
-
-static struct sc16is7xx_devtype sc16is750_devtype = {
-	.name		= "SC16IS750",
-	.nr_gpio	= 8,
-	.nr_uart	= 1,
-};
-
-static struct sc16is7xx_devtype sc16is752_devtype = {
-	.name		= "SC16IS752",
-	.nr_gpio	= 8,
-	.nr_uart	= 2,
-};
-
-static struct sc16is7xx_devtype sc16is760_devtype = {
-	.name		= "SC16IS760",
-	.nr_gpio	= 8,
-	.nr_uart	= 1,
-};
-
-static struct sc16is7xx_devtype sc16is762_devtype = {
-	.name		= "SC16IS762",
-	.nr_gpio	= 8,
-	.nr_uart	= 2,
-};
-
 static bool sc16is7xx_regmap_volatile(struct device *dev, unsigned int reg)
 {
 	switch (reg >> SC16IS7XX_REG_SHIFT) {
@@ -546,7 +510,7 @@ static void sc16is7xx_handle_rx(struct uart_port *port, unsigned int rxlen,
 		rxlen -= bytes_read;
 	}
 
-	tty_flip_buffer_push(&port->state->port.tty);
+	tty_flip_buffer_push(port->state->port.tty);
 }
 
 static void sc16is7xx_handle_tx(struct uart_port *port)
@@ -1059,12 +1023,12 @@ static int sc16is7xx_gpio_direction_output(struct gpio_chip *chip,
 }
 #endif
 
-static int sc16is7xx_probe(struct device *dev,
+int sc16is7xx_probe(struct device *dev,
 			   struct sc16is7xx_devtype *devtype,
 			   struct regmap *regmap, int irq, unsigned long flags)
 {
 	unsigned long freq, *pfreq = dev_get_platdata(dev);
-	struct clk *clk;
+	struct clk *clk = NULL;
 	int i, ret;
 	struct sc16is7xx_port *s;
 
@@ -1081,7 +1045,7 @@ static int sc16is7xx_probe(struct device *dev,
 	}
 
 	clk = devm_clk_get(dev, NULL);
-	if (IS_ERR(clk)) {
+	if (IS_ERR_OR_NULL(clk)) {
 		if (pfreq)
 			freq = *pfreq;
 		else
@@ -1174,8 +1138,9 @@ out_clk:
 
 	return ret;
 }
+EXPORT_SYMBOL(sc16is7xx_probe);
 
-static int sc16is7xx_remove(struct device *dev)
+int sc16is7xx_remove(struct device *dev)
 {
 	struct sc16is7xx_port *s = dev_get_drvdata(dev);
 	int i, ret = 0;
@@ -1202,78 +1167,22 @@ static int sc16is7xx_remove(struct device *dev)
 
 	return ret;
 }
+EXPORT_SYMBOL(sc16is7xx_remove);
 
-static const struct of_device_id __maybe_unused sc16is7xx_dt_ids[] = {
-	{ .compatible = "nxp,sc16is740",	.data = &sc16is74x_devtype, },
-	{ .compatible = "nxp,sc16is741",	.data = &sc16is74x_devtype, },
-	{ .compatible = "nxp,sc16is750",	.data = &sc16is750_devtype, },
-	{ .compatible = "nxp,sc16is752",	.data = &sc16is752_devtype, },
-	{ .compatible = "nxp,sc16is760",	.data = &sc16is760_devtype, },
-	{ .compatible = "nxp,sc16is762",	.data = &sc16is762_devtype, },
-	{ }
-};
-MODULE_DEVICE_TABLE(of, sc16is7xx_dt_ids);
-
-static struct regmap_config regcfg = {
-	.reg_bits = 7,
-	.pad_bits = 1,
-	.val_bits = 8,
-	.cache_type = REGCACHE_RBTREE,
-	.volatile_reg = sc16is7xx_regmap_volatile,
-	.precious_reg = sc16is7xx_regmap_precious,
-};
-
-static int sc16is7xx_i2c_probe(struct i2c_client *i2c,
-			       const struct i2c_device_id *id)
+void sc16is7xx_regmap_config_init(struct regmap_config *regcfg, int nr_uart)
 {
-	struct sc16is7xx_devtype *devtype;
-	unsigned long flags = 0;
-	struct regmap *regmap;
-
-	if (i2c->dev.of_node) {
-		const struct of_device_id *of_id =
-				of_match_device(sc16is7xx_dt_ids, &i2c->dev);
-
-		devtype = (struct sc16is7xx_devtype *)of_id->data;
-	} else {
-		devtype = (struct sc16is7xx_devtype *)id->driver_data;
-		flags = IRQF_TRIGGER_FALLING;
-	}
-
-	regcfg.max_register = (0xf << SC16IS7XX_REG_SHIFT) |
-			      (devtype->nr_uart - 1);
-	regmap = devm_regmap_init_i2c(i2c, &regcfg);
-
-	return sc16is7xx_probe(&i2c->dev, devtype, regmap, i2c->irq, flags);
+	static struct regmap_config template = {
+		.reg_bits = 7,
+		.pad_bits = 1,
+		.val_bits = 8,
+		.cache_type = REGCACHE_RBTREE,
+		.volatile_reg = sc16is7xx_regmap_volatile,
+		.precious_reg = sc16is7xx_regmap_precious,
+	};
+	memcpy(regcfg, &template, sizeof(*regcfg));
+	regcfg->max_register = ((0x0F << SC16IS7XX_REG_SHIFT) | (nr_uart - 1));
 }
-
-static int sc16is7xx_i2c_remove(struct i2c_client *client)
-{
-	return sc16is7xx_remove(&client->dev);
-}
-
-static const struct i2c_device_id sc16is7xx_i2c_id_table[] = {
-	{ "sc16is74x",	(kernel_ulong_t)&sc16is74x_devtype, },
-	{ "sc16is750",	(kernel_ulong_t)&sc16is750_devtype, },
-	{ "sc16is752",	(kernel_ulong_t)&sc16is752_devtype, },
-	{ "sc16is760",	(kernel_ulong_t)&sc16is760_devtype, },
-	{ "sc16is762",	(kernel_ulong_t)&sc16is762_devtype, },
-	{ }
-};
-MODULE_DEVICE_TABLE(i2c, sc16is7xx_i2c_id_table);
-
-static struct i2c_driver sc16is7xx_i2c_uart_driver = {
-	.driver = {
-		.name		= SC16IS7XX_NAME,
-		.owner		= THIS_MODULE,
-		.of_match_table	= of_match_ptr(sc16is7xx_dt_ids),
-	},
-	.probe		= sc16is7xx_i2c_probe,
-	.remove		= sc16is7xx_i2c_remove,
-	.id_table	= sc16is7xx_i2c_id_table,
-};
-module_i2c_driver(sc16is7xx_i2c_uart_driver);
-MODULE_ALIAS("i2c:sc16is7xx");
+EXPORT_SYMBOL(sc16is7xx_regmap_config_init);
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Jon Ringle <jringle@gridpoint.com>");
diff --git a/drivers/tty/serial/sc16is7xx.h b/drivers/tty/serial/sc16is7xx.h
new file mode 100644
index 0000000..1f113df
--- /dev/null
+++ b/drivers/tty/serial/sc16is7xx.h
@@ -0,0 +1,77 @@
+/*
+ * SC16IS7xx tty serial driver
+ *
+ * Copyright (C) 2014 GridPoint
+ * Author: Jon Ringle <jringle@gridpoint.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef _SC16IS7XX_H_
+#define _SC16IS7XX_H_
+
+
+/* Misc definition used in core module (sc16is7xx.c) and in I2C/SPI bus
+ * specific modules */
+#define SC16IS7XX_NAME			"sc16is7xx"
+#define SC16IS7XX_REG_SHIFT		2
+
+struct sc16is7xx_devtype {
+	char	name[10];
+	int	nr_gpio;
+	int	nr_uart;
+};
+
+
+static struct sc16is7xx_devtype sc16is74x_devtype = {
+	.name		= "SC16IS74X",
+	.nr_gpio	= 0,
+	.nr_uart	= 1,
+};
+
+static struct sc16is7xx_devtype sc16is750_devtype = {
+	.name		= "SC16IS750",
+	.nr_gpio	= 8,
+	.nr_uart	= 1,
+};
+
+static struct sc16is7xx_devtype sc16is752_devtype = {
+	.name		= "SC16IS752",
+	.nr_gpio	= 8,
+	.nr_uart	= 2,
+};
+
+static struct sc16is7xx_devtype sc16is760_devtype = {
+	.name		= "SC16IS760",
+	.nr_gpio	= 8,
+	.nr_uart	= 1,
+};
+
+static struct sc16is7xx_devtype sc16is762_devtype = {
+	.name		= "SC16IS762",
+	.nr_gpio	= 8,
+	.nr_uart	= 2,
+};
+
+static const struct of_device_id __maybe_unused sc16is7xx_dt_ids[] = {
+	{ .compatible = "nxp,sc16is740",	.data = &sc16is74x_devtype, },
+	{ .compatible = "nxp,sc16is741",	.data = &sc16is74x_devtype, },
+	{ .compatible = "nxp,sc16is750",	.data = &sc16is750_devtype, },
+	{ .compatible = "nxp,sc16is752",	.data = &sc16is752_devtype, },
+	{ .compatible = "nxp,sc16is760",	.data = &sc16is760_devtype, },
+	{ .compatible = "nxp,sc16is762",	.data = &sc16is762_devtype, },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, sc16is7xx_dt_ids);
+
+int sc16is7xx_probe(struct device *dev, struct sc16is7xx_devtype *devtype,
+		struct regmap *regmap, int irq, unsigned long flags);
+
+int sc16is7xx_remove(struct device *dev);
+
+void sc16is7xx_regmap_config_init(struct regmap_config *regcfg, int nr_uart);
+
+#endif /* _SC16IS7XX_H_ */
-- 
1.7.5.4

