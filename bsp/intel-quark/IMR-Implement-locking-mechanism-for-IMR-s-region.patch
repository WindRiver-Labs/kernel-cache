From d5acf1dea81add3503f2bb35fd3e15453e73a4f8 Mon Sep 17 00:00:00 2001
From: "Arumugam,Kamenee" <kamenee.arumugam@intel.com>
Date: Mon, 1 Jun 2015 10:57:20 +0800
Subject: [PATCH 31/65] IMR:Implement locking mechanism for IMR's region.

Cherry pick from R1.1 (ec8d2e087690421a0bfa1803accc4b0e445b9212)
implementation to this IMR driver.

Lock all IMRs by default (RTC Item 59002)

Change the default value of imr_lock from 0 to 1 from within intel_qrk_imr.c
This will avoid having to explicitly enable IMR locks via GRUB.  Instead,
the default behaviour is to have all IMRs locked by default.

Signed-off-by: Arumugam,Kamenee <kamenee.arumugam@intel.com>
Signed-off-by: Dermot Murphy <dermot.b.murphy@intel.com>
Signed-off-by: Arumugam,Kamenee <kamenee.arumugam@intel.com>
Change-Id: Ia50ee1b5b914ce10a5fb1ea24dcd4d9adcc9ff71
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5289
Reviewed-by: Ji, Kai <kai.ji@intel.com>
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 arch/x86/platform/intel-quark/imr.c |   38 +++++++++++++++++++++++++++++++++++
 1 files changed, 38 insertions(+), 0 deletions(-)

diff --git a/arch/x86/platform/intel-quark/imr.c b/arch/x86/platform/intel-quark/imr.c
index 84bd371..105a796 100644
--- a/arch/x86/platform/intel-quark/imr.c
+++ b/arch/x86/platform/intel-quark/imr.c
@@ -75,6 +75,15 @@ struct imr_regs {
 #define phys_to_imr(x)	((x) >> IMR_SHIFT)
 
 /**
+ * module parameter
+ *
+ * If imr_lock is true, lock all the IMRs.
+ */
+static int imr_lock = 1;
+module_param(imr_lock, int, S_IRUGO|S_IWUSR);
+MODULE_PARM_DESC(imr_lock, "lock all IMRs (default=on)");
+
+/**
  * imr_is_enabled - true if an IMR is enabled false otherwise.
  *
  * Determines if an IMR is enabled based on address range and read/write
@@ -570,6 +579,30 @@ static inline int imr_clear(int reg)
 }
 
 /**
+ * intel_qrk_imr_lockall
+ *
+ * lock up all un-locked IMRs
+ */
+static void intel_qrk_imr_lockall(struct imr_device *idev)
+{
+	int i = 0;
+	uint32_t temp_addr;
+	struct imr_regs imr;
+
+	/* Cycle through IMRs locking whichever are unlocked */
+	for (i = 0; i < idev->max_imr; i++) {
+		imr_read(idev, i, &imr);
+
+		temp_addr = imr.addr_lo;
+		if (!(temp_addr & IMR_LOCK)) {
+			pr_debug("%s: locking IMR %d\n", __func__, i);
+			temp_addr |= IMR_LOCK;
+			imr_write(idev, i, &imr, true);
+		}
+	}
+}
+
+/**
  * imr_fixup_memmap - Tear down IMRs used during bootup.
  *
  * BIOS and Grub both setup IMRs around compressed kernel, initrd memory
@@ -638,6 +671,11 @@ static int __init imr_init(void)
 	if (ret != 0)
 		pr_warn("debugfs register failed!\n");
 	imr_fixup_memmap(idev);
+
+	if (imr_lock) {
+		intel_qrk_imr_lockall(idev);
+	}
+
 	return 0;
 }
 
-- 
1.7.5.4

