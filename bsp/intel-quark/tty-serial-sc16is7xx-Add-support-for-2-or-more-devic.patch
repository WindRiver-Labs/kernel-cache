From 2b4b089f5a4570c323e76399e594df50ebeb0157 Mon Sep 17 00:00:00 2001
From: Bogdan Pricop <bogdan.pricop@emutex.com>
Date: Wed, 11 Feb 2015 10:35:01 +0000
Subject: [PATCH 05/42] tty: serial: sc16is7xx: Add support for 2 or more
 devices

Problem:
If 2 or more SC16OS7xx devices are present, the driver wants to register
a /dev/ttSC0 port for the first channel of the second device which will
fail because /dev/ttySC0 already exists as channel 0 of first device.

Solution:
* Add a global variable to keep track of the registered serial ports.
* Add base_port member to sc16is7xx_port structure used to translate the
  port number to device channel.

Signed-off-by: Bogdan Pricop <bogdan.pricop@emutex.com>
Signed-off-by: Dan O'Donovan <dan@emutex.com>
Signed-off-by: Kartikey Parmar <kartikeyx.r.parmar@intel.com>
Change-Id: I3bdb1f309c7e223748f51836658f9f96c91ecb5d
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4643
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/tty/serial/sc16is7xx.c |   36 ++++++++++++++++++++++++++----------
 1 files changed, 26 insertions(+), 10 deletions(-)

diff --git a/drivers/tty/serial/sc16is7xx.c b/drivers/tty/serial/sc16is7xx.c
index 5c4744f..e60e249 100644
--- a/drivers/tty/serial/sc16is7xx.c
+++ b/drivers/tty/serial/sc16is7xx.c
@@ -313,17 +313,27 @@ struct sc16is7xx_port {
 #endif
 	unsigned char			buf[SC16IS7XX_FIFO_SIZE];
 	struct sc16is7xx_one		p[0];
+	/* tty number of the device first port;
+	 * it is used when 2 or more SC16IS7XX devices are present. */
+	unsigned int			base_port;
 };
 
 #define to_sc16is7xx_one(p,e)	((container_of((p), struct sc16is7xx_one, e)))
 
+/**
+ * Keep track of registered ports as a global variable to avoid clash if we
+ * have more than one SC16IS7XX device present.
+ */
+static int last_uart;
+
 static u8 sc16is7xx_port_read(struct uart_port *port, u8 reg)
 {
 	struct sc16is7xx_port *s = dev_get_drvdata(port->dev);
 	unsigned int val = 0;
+	unsigned int channel = port->line - s->base_port;
 
 	regmap_read(s->regmap,
-		    (reg << SC16IS7XX_REG_SHIFT) | port->line, &val);
+		    (reg << SC16IS7XX_REG_SHIFT) | channel, &val);
 
 	return val;
 }
@@ -331,18 +341,20 @@ static u8 sc16is7xx_port_read(struct uart_port *port, u8 reg)
 static void sc16is7xx_port_write(struct uart_port *port, u8 reg, u8 val)
 {
 	struct sc16is7xx_port *s = dev_get_drvdata(port->dev);
+	unsigned int channel = port->line - s->base_port;
 
 	regmap_write(s->regmap,
-		     (reg << SC16IS7XX_REG_SHIFT) | port->line, val);
+		     (reg << SC16IS7XX_REG_SHIFT) | channel, val);
 }
 
 static void sc16is7xx_port_update(struct uart_port *port, u8 reg,
 				  u8 mask, u8 val)
 {
 	struct sc16is7xx_port *s = dev_get_drvdata(port->dev);
+	unsigned int channel = port->line - s->base_port;
 
 	regmap_update_bits(s->regmap,
-			   (reg << SC16IS7XX_REG_SHIFT) | port->line,
+			   (reg << SC16IS7XX_REG_SHIFT) | channel,
 			   mask, val);
 }
 
@@ -460,8 +472,8 @@ static void sc16is7xx_handle_rx(struct uart_port *port, unsigned int rxlen,
 			s->buf[0] = sc16is7xx_port_read(port, SC16IS7XX_RHR_REG);
 			bytes_read = 1;
 		} else {
-			u8 reg = SC16IS7XX_RHR_REG << SC16IS7XX_REG_SHIFT |
-				port->line;
+			u8 reg = (SC16IS7XX_RHR_REG << SC16IS7XX_REG_SHIFT) |
+				(port->line - s->base_port);
 			regcache_cache_bypass(s->regmap, true);
 			regmap_raw_read(s->regmap, reg,	s->buf, rxlen);
 			regcache_cache_bypass(s->regmap, false);
@@ -532,7 +544,8 @@ static void sc16is7xx_handle_tx(struct uart_port *port)
 	/* Get length of data pending in circular buffer */
 	to_send = uart_circ_chars_pending(xmit);
 	if (likely(to_send)) {
-		u8 reg = SC16IS7XX_THR_REG << SC16IS7XX_REG_SHIFT | port->line;
+		u8 reg = SC16IS7XX_THR_REG << SC16IS7XX_REG_SHIFT |
+			 (port->line - s->base_port);
 
 		/* Limit to size of TX FIFO */
 		txlen = sc16is7xx_port_read(port, SC16IS7XX_TXLVL_REG);
@@ -602,7 +615,7 @@ static irqreturn_t sc16is7xx_ist(int irq, void *dev_id)
 	struct sc16is7xx_port *s = (struct sc16is7xx_port *)dev_id;
 	int i;
 
-	for (i = 0; i < s->uart.nr; ++i)
+	for (i = 0; i < s->devtype->nr_uart; ++i)
 		sc16is7xx_port_irq(s, i);
 
 	return IRQ_HANDLED;
@@ -1058,10 +1071,13 @@ int sc16is7xx_probe(struct device *dev,
 	s->devtype = devtype;
 	dev_set_drvdata(dev, s);
 
+	s->base_port = last_uart;
+	last_uart += devtype->nr_uart;
+
 	/* Register UART driver */
 	s->uart.owner		= THIS_MODULE;
 	s->uart.dev_name	= "ttySC";
-	s->uart.nr		= devtype->nr_uart;
+	s->uart.nr		= last_uart;
 	ret = uart_register_driver(&s->uart);
 	if (ret) {
 		dev_err(dev, "Registering UART driver failed\n");
@@ -1091,7 +1107,7 @@ int sc16is7xx_probe(struct device *dev,
 
 	for (i = 0; i < devtype->nr_uart; ++i) {
 		/* Initialize port data */
-		s->p[i].port.line	= i;
+		s->p[i].port.line	= s->base_port + i;
 		s->p[i].port.dev	= dev;
 		s->p[i].port.irq	= irq;
 		s->p[i].port.type	= PORT_SC16IS7XX;
@@ -1153,7 +1169,7 @@ int sc16is7xx_remove(struct device *dev)
 	}
 #endif
 
-	for (i = 0; i < s->uart.nr; i++) {
+	for (i = 0; i < s->devtype->nr_uart; i++) {
 		cancel_work_sync(&s->p[i].tx_work);
 		cancel_work_sync(&s->p[i].md_work);
 		uart_remove_one_port(&s->uart, &s->p[i].port);
-- 
1.7.5.4

