From fb0cd04690a5a92c5b6692eacce33bda417a5ddf Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Wed, 22 Apr 2015 09:10:51 +0800
Subject: [PATCH 01/42] gpio-pca953x: add support for NXP PCAL9555a on Galileo
 Gen2

This patch is to add the support of NXP PCAL9555a GPIO,
which is on Galileo Gen2, migrating from kernel 3.8 to kernel 3.14.

This patch includes the following:
- RTC #75521 - GPIO pullup
- RTC #77507 - Level triggered IRQ
- PM callbacks for suspend/resume

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/Kconfig        |    2 +-
 drivers/gpio/gpio-pca953x.c |  331 ++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 312 insertions(+), 21 deletions(-)

diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index fb80f57..f2cb69f 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -502,7 +502,7 @@ config GPIO_PCA953X
 
 config GPIO_PCA953X_IRQ
 	bool "Interrupt controller support for PCA953x"
-	depends on GPIO_PCA953X=y
+	depends on GPIO_PCA953X
 	help
 	  Say yes here to enable the pca953x to be used as an interrupt
 	  controller. It requires the driver to be built in the kernel.
diff --git a/drivers/gpio/gpio-pca953x.c b/drivers/gpio/gpio-pca953x.c
index b438237..9475dda 100644
--- a/drivers/gpio/gpio-pca953x.c
+++ b/drivers/gpio/gpio-pca953x.c
@@ -29,6 +29,12 @@
 #define PCA953X_INVERT		2
 #define PCA953X_DIRECTION	3
 
+#define PCAL953X_IN_LATCH	34
+#define PCAL953X_PUPD_EN	35
+#define PCAL953X_PUPD_SEL	36
+#define PCAL953X_INT_MASK	37
+#define PCAL953X_INT_STAT	38
+
 #define REG_ADDR_AI		0x80
 
 #define PCA957X_IN		0
@@ -44,6 +50,7 @@
 #define PCA_INT			0x0100
 #define PCA953X_TYPE		0x1000
 #define PCA957X_TYPE		0x2000
+#define PCAL953X_TYPE		0x4000
 
 static const struct i2c_device_id pca953x_id[] = {
 	{ "pca9505", 40 | PCA953X_TYPE | PCA_INT, },
@@ -55,6 +62,7 @@ static const struct i2c_device_id pca953x_id[] = {
 	{ "pca9539", 16 | PCA953X_TYPE | PCA_INT, },
 	{ "pca9554", 8  | PCA953X_TYPE | PCA_INT, },
 	{ "pca9555", 16 | PCA953X_TYPE | PCA_INT, },
+	{ "pcal9555a", 16 | PCAL953X_TYPE | PCA_INT, },
 	{ "pca9556", 8  | PCA953X_TYPE, },
 	{ "pca9557", 8  | PCA953X_TYPE, },
 	{ "pca9574", 8  | PCA957X_TYPE | PCA_INT, },
@@ -81,6 +89,8 @@ struct pca953x_chip {
 	unsigned gpio_start;
 	u8 reg_output[MAX_BANK];
 	u8 reg_direction[MAX_BANK];
+	u8 reg_pupd_en[MAX_BANK];
+	u8 reg_pupd_sel[MAX_BANK];
 	struct mutex i2c_lock;
 
 #ifdef CONFIG_GPIO_PCA953X_IRQ
@@ -210,6 +220,7 @@ static int pca953x_gpio_direction_input(struct gpio_chip *gc, unsigned off)
 	reg_val = chip->reg_direction[off / BANK_SZ] | (1u << (off % BANK_SZ));
 
 	switch (chip->chip_type) {
+	case PCAL953X_TYPE:
 	case PCA953X_TYPE:
 		offset = PCA953X_DIRECTION;
 		break;
@@ -247,6 +258,7 @@ static int pca953x_gpio_direction_output(struct gpio_chip *gc,
 			& ~(1u << (off % BANK_SZ));
 
 	switch (chip->chip_type) {
+	case PCAL953X_TYPE:
 	case PCA953X_TYPE:
 		offset = PCA953X_OUTPUT;
 		break;
@@ -263,6 +275,7 @@ static int pca953x_gpio_direction_output(struct gpio_chip *gc,
 	/* then direction */
 	reg_val = chip->reg_direction[off / BANK_SZ] & ~(1u << (off % BANK_SZ));
 	switch (chip->chip_type) {
+	case PCAL953X_TYPE:
 	case PCA953X_TYPE:
 		offset = PCA953X_DIRECTION;
 		break;
@@ -291,6 +304,7 @@ static int pca953x_gpio_get_value(struct gpio_chip *gc, unsigned off)
 
 	mutex_lock(&chip->i2c_lock);
 	switch (chip->chip_type) {
+	case PCAL953X_TYPE:
 	case PCA953X_TYPE:
 		offset = PCA953X_INPUT;
 		break;
@@ -328,6 +342,7 @@ static void pca953x_gpio_set_value(struct gpio_chip *gc, unsigned off, int val)
 			& ~(1u << (off % BANK_SZ));
 
 	switch (chip->chip_type) {
+	case PCAL953X_TYPE:
 	case PCA953X_TYPE:
 		offset = PCA953X_OUTPUT;
 		break;
@@ -344,6 +359,65 @@ exit:
 	mutex_unlock(&chip->i2c_lock);
 }
 
+static int pca953x_gpio_set_drive(struct gpio_chip *gc,
+				  unsigned off, unsigned mode)
+{
+	struct pca953x_chip *chip;
+	u8 pupd_en_reg_val, pupd_sel_reg_val;
+	int ret = 0;
+
+	chip = container_of(gc, struct pca953x_chip, gpio_chip);
+
+	if (chip->chip_type != PCAL953X_TYPE)
+		return -EINVAL;
+
+	mutex_lock(&chip->i2c_lock);
+
+	switch (mode) {
+	case GPIOF_DRIVE_PULLUP:
+		pupd_en_reg_val = chip->reg_pupd_en[off / BANK_SZ]
+			| (1u << (off % BANK_SZ));
+		pupd_sel_reg_val = chip->reg_pupd_sel[off / BANK_SZ]
+			| (1u << (off % BANK_SZ));
+		break;
+	case GPIOF_DRIVE_PULLDOWN:
+		pupd_en_reg_val = chip->reg_pupd_en[off / BANK_SZ]
+			| (1u << (off % BANK_SZ));
+		pupd_sel_reg_val = chip->reg_pupd_sel[off / BANK_SZ]
+			& ~(1u << (off % BANK_SZ));
+		break;
+	case GPIOF_DRIVE_STRONG:
+	case GPIOF_DRIVE_HIZ:
+		pupd_en_reg_val = chip->reg_pupd_en[off / BANK_SZ]
+			& ~(1u << (off % BANK_SZ));
+		pupd_sel_reg_val = chip->reg_pupd_sel[off / BANK_SZ];
+		break;
+	default:
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (pupd_en_reg_val != chip->reg_pupd_en[off / BANK_SZ]) {
+		ret = pca953x_write_single(chip, PCAL953X_PUPD_EN,
+					pupd_en_reg_val, off);
+		if (ret)
+			goto exit;
+		chip->reg_pupd_en[off / BANK_SZ] = pupd_en_reg_val;
+	}
+
+	if (pupd_sel_reg_val != chip->reg_pupd_sel[off / BANK_SZ]) {
+		ret = pca953x_write_single(chip, PCAL953X_PUPD_SEL,
+					pupd_sel_reg_val, off);
+		if (ret)
+			goto exit;
+		chip->reg_pupd_sel[off / BANK_SZ] = pupd_sel_reg_val;
+	}
+
+exit:
+	mutex_unlock(&chip->i2c_lock);
+	return ret;
+}
+
 static void pca953x_setup_gpio(struct pca953x_chip *chip, int gpios)
 {
 	struct gpio_chip *gc;
@@ -362,6 +436,9 @@ static void pca953x_setup_gpio(struct pca953x_chip *chip, int gpios)
 	gc->dev = &chip->client->dev;
 	gc->owner = THIS_MODULE;
 	gc->names = chip->names;
+
+	if (chip->chip_type == PCAL953X_TYPE)
+		gc->set_drive = pca953x_gpio_set_drive;
 }
 
 #ifdef CONFIG_GPIO_PCA953X_IRQ
@@ -398,6 +475,7 @@ static void pca953x_irq_bus_sync_unlock(struct irq_data *d)
 {
 	struct pca953x_chip *chip = irq_data_get_irq_chip_data(d);
 	u8 new_irqs;
+	u8 not_irq_mask[MAX_BANK];
 	int level, i;
 
 	/* Look for any newly setup interrupt */
@@ -413,6 +491,18 @@ static void pca953x_irq_bus_sync_unlock(struct irq_data *d)
 		}
 	}
 
+	for (i = 0; i < NBANK(chip); i++)
+		not_irq_mask[i] = ~chip->irq_mask[i];
+
+	if (chip->chip_type == PCAL953X_TYPE) {
+		/* Enable latch on interrupt-enabled inputs */
+		pca953x_write_regs(chip, PCAL953X_IN_LATCH,
+				   chip->irq_mask);
+		/* Unmask enabled interrupts */
+		pca953x_write_regs(chip, PCAL953X_INT_MASK,
+				   not_irq_mask);
+	}
+
 	mutex_unlock(&chip->irq_lock);
 }
 
@@ -458,6 +548,24 @@ static u8 pca953x_irq_pending(struct pca953x_chip *chip, u8 *pending)
 	u8 trigger[MAX_BANK], triggers = 0;
 	int ret, i, offset = 0;
 
+	if (chip->chip_type == PCAL953X_TYPE) {
+		/* Read the current interrupt status from the device */
+		ret = pca953x_read_regs(chip, PCAL953X_INT_STAT, pending);
+		if (ret)
+			return 0;
+		/* Check latched inputs and clear interrupt status */
+		ret = pca953x_read_regs(chip, PCA953X_INPUT, cur_stat);
+		if (ret)
+			return 0;
+		/* Apply filter for rising/falling edge selection */
+		for (i = 0; i < NBANK(chip); i++) {
+			pending[i] &= (~cur_stat[i] & chip->irq_trig_fall[i]) |
+					(cur_stat[i] & chip->irq_trig_raise[i]);
+			pendings += pending[i];
+		}
+		return pendings;
+	}
+
 	switch (chip->chip_type) {
 	case PCA953X_TYPE:
 		offset = PCA953X_INPUT;
@@ -549,25 +657,27 @@ static int pca953x_irq_setup(struct pca953x_chip *chip,
 	if (irq_base != -1
 			&& (id->driver_data & PCA_INT)) {
 
-		switch (chip->chip_type) {
-		case PCA953X_TYPE:
-			offset = PCA953X_INPUT;
-			break;
-		case PCA957X_TYPE:
-			offset = PCA957X_IN;
-			break;
+		if (chip->chip_type != PCAL953X_TYPE) {
+			switch (chip->chip_type) {
+			case PCA953X_TYPE:
+				offset = PCA953X_INPUT;
+				break;
+			case PCA957X_TYPE:
+				offset = PCA957X_IN;
+				break;
+			}
+			ret = pca953x_read_regs(chip, offset, chip->irq_stat);
+			if (ret)
+				return ret;
+
+			/*
+			 * There is no way to know which GPIO line generated the
+			 * interrupt.  We have to rely on the previous read for
+			 * this purpose.
+			 */
+			for (i = 0; i < NBANK(chip); i++)
+				chip->irq_stat[i] &= chip->reg_direction[i];
 		}
-		ret = pca953x_read_regs(chip, offset, chip->irq_stat);
-		if (ret)
-			return ret;
-
-		/*
-		 * There is no way to know which GPIO line generated the
-		 * interrupt.  We have to rely on the previous read for
-		 * this purpose.
-		 */
-		for (i = 0; i < NBANK(chip); i++)
-			chip->irq_stat[i] &= chip->reg_direction[i];
 		mutex_init(&chip->irq_lock);
 
 		chip->domain = irq_domain_add_simple(client->dev.of_node,
@@ -658,6 +768,17 @@ static int device_pca953x_init(struct pca953x_chip *chip, u32 invert)
 	int ret;
 	u8 val[MAX_BANK];
 
+	if (chip->chip_type == PCAL953X_TYPE) {
+		ret = pca953x_read_regs(chip, PCAL953X_PUPD_EN,
+					chip->reg_pupd_en);
+		if (ret)
+			goto out;
+		ret = pca953x_read_regs(chip, PCAL953X_PUPD_SEL,
+					chip->reg_pupd_sel);
+		if (ret)
+			goto out;
+	}
+
 	ret = pca953x_read_regs(chip, PCA953X_OUTPUT, chip->reg_output);
 	if (ret)
 		goto out;
@@ -737,7 +858,8 @@ static int pca953x_probe(struct i2c_client *client,
 
 	chip->client = client;
 
-	chip->chip_type = id->driver_data & (PCA953X_TYPE | PCA957X_TYPE);
+	chip->chip_type = id->driver_data & (PCAL953X_TYPE | PCA953X_TYPE
+					     | PCA957X_TYPE);
 
 	mutex_init(&chip->i2c_lock);
 
@@ -746,7 +868,7 @@ static int pca953x_probe(struct i2c_client *client,
 	 */
 	pca953x_setup_gpio(chip, id->driver_data & PCA_GPIO_MASK);
 
-	if (chip->chip_type == PCA953X_TYPE)
+	if (chip->chip_type & (PCA953X_TYPE | PCAL953X_TYPE))
 		ret = device_pca953x_init(chip, invert);
 	else
 		ret = device_pca957x_init(chip, invert);
@@ -793,6 +915,174 @@ static int pca953x_remove(struct i2c_client *client)
 	return 0;
 }
 
+#ifdef CONFIG_PM
+
+/*
+ * There is nothing to be done before the system goes to S3 - the registers
+ * values are stored in driver's cache.
+ * */
+#define pca953x_suspend	NULL
+
+/**
+ * pca953x_resume - resume PM callback
+ * @dev - pointer to device
+ * Returns 0 if succes, negative value otherwhise
+ *
+ * Restore registers state from driver's cache. If restoring one or more
+ * registers fail, it keeps trying to restore the rest of the registers and
+ * returns only the last error code.
+ */
+static int pca953x_resume(struct device *dev)
+{
+	struct i2c_client *i2c = container_of(dev, struct i2c_client, dev);
+	struct pca953x_chip *chip = i2c_get_clientdata(i2c);
+	struct pca953x_platform_data *pdata;
+	int ret = 0;
+	u32 invert = 0;
+	int err = 0;
+	int i;
+	u8 not_irq_mask[MAX_BANK];
+	u8 val[MAX_BANK];
+
+	/* Retrieve invert from platform data */
+	pdata = i2c->dev.platform_data;
+	if (pdata)
+		invert = pdata->invert;
+	else
+		pca953x_get_alt_pdata(i2c, &chip->gpio_start, &invert);
+
+	/* set platform specific polarity inversion */
+	if (invert)
+		memset(val, 0xFF, NBANK(chip));
+	else
+		memset(val, 0, NBANK(chip));
+
+	mutex_lock(&chip->i2c_lock);
+	switch (chip->chip_type) {
+	case PCAL953X_TYPE:
+		/* Restore the pull-up/pull-down enable & selection
+		 * registers */
+		ret = pca953x_write_regs(chip, PCAL953X_PUPD_EN,
+				chip->reg_pupd_en);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring pull-up enable register: %d\n",
+				ret);
+			err = ret;
+		}
+		ret = pca953x_write_regs(chip, PCAL953X_PUPD_SEL,
+				chip->reg_pupd_sel);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring pull-up select register: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Restore latch on interrupt-enabled inputs */
+		ret = pca953x_write_regs(chip, PCAL953X_IN_LATCH,
+				  chip->irq_mask);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring input latch register: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Unmask enabled interrupts */
+		/* Bitwise complement (~) has to done on integer types
+		 * thus, this is a temporary variable to store the
+		 * bitwise complemented values */
+		for (i = 0; i < MAX_BANK; i++)
+			not_irq_mask[i] = ~chip->irq_mask[i];
+		ret = pca953x_write_regs(chip, PCAL953X_INT_MASK,
+				  not_irq_mask);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring interrupt mask register: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Continue restoring outport and direction port registers */
+	case PCA953X_TYPE:
+		/* Restore platform specific polarity inversion */
+		ret = pca953x_write_regs(chip, PCA953X_INVERT, val);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring polarity inversion: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Restore output port register(s) */
+		ret = pca953x_write_regs(chip, PCA953X_OUTPUT,
+					 chip->reg_output);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring output port register: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Restore GPIOs directions - configuration register(s) */
+		ret = pca953x_write_regs(chip, PCA953X_DIRECTION,
+				chip->reg_direction);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring direction register: %d\n",
+				ret);
+			err = ret;
+		}
+		break;
+	case PCA957X_TYPE:
+		/* Restore platform specific polarity inversion */
+		ret = pca953x_write_regs(chip, PCA957X_INVRT, val);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring polarity inversion: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Restore output port register(s) */
+		ret = pca953x_write_regs(chip, PCA957X_OUT, chip->reg_output);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring output port register: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Restore GPIOs directions - configuration register(s) */
+		ret = pca953x_write_regs(chip, PCA957X_CFG,
+					 chip->reg_direction);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring direction register: %d\n",
+				ret);
+			err = ret;
+		}
+		/* Enable back register 6 and 7 to controll pull-up and
+		 * pull-down */
+		memset(val, 0x02, NBANK(chip));
+		ret = pca953x_write_regs(chip, PCA957X_BKEN, val);
+		if (ret < 0) {
+			dev_err(&i2c->dev,
+				"Error restoring bus-hold register: %d\n",
+				ret);
+			err = ret;
+		}
+		break;
+	}
+	mutex_unlock(&chip->i2c_lock);
+	return err;
+}
+#else /* !CONFIG_PM */
+
+#define pca953x_suspend	NULL
+#define pca953x_resume	NULL
+
+#endif /* CONFIG_PM */
+
+const struct dev_pm_ops pca953x_pm_ops = {
+	.suspend	= pca953x_suspend,
+	.resume		= pca953x_resume,
+};
+
 static const struct of_device_id pca953x_dt_ids[] = {
 	{ .compatible = "nxp,pca9505", },
 	{ .compatible = "nxp,pca9534", },
@@ -826,6 +1116,7 @@ static struct i2c_driver pca953x_driver = {
 	.driver = {
 		.name	= "pca953x",
 		.of_match_table = pca953x_dt_ids,
+		.pm	= &pca953x_pm_ops,
 	},
 	.probe		= pca953x_probe,
 	.remove		= pca953x_remove,
-- 
1.7.5.4

