From c2726550c97d02d27820926db68c6c54d5859616 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Thu, 7 May 2015 15:32:25 +0800
Subject: [PATCH 39/42] gpio-sch: Add support of suspend/resume and wake
 events support

This patch is ported from Quark X1000 Soc R1.1 to add support
of suspend/resume for S3. The patch is based on the patch from
Bogdan Pricop <bogdan.pricop@emutex.com>.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
Change-Id: Ifd317618dac4a9854d274d680a0cd1ff217a4139
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4989
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c |  139 +++++++++++++++++++++++++++++++++++++++--------
 1 files changed, 116 insertions(+), 23 deletions(-)

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index 9d61893..48b03e3 100644
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -42,9 +42,26 @@
 #define CGNMIEN	0x40
 #define RGNMIEN	0x44
 
+/* Cache register context */
+struct sch_gpio_context {
+	/* Core well generic registers */
+	u32 cgen;
+	u32 cgio;
+	u32 cglvl;
+	u32 cgsmi;
+	u32 cgnmien;
+	/* Core well interrupt trigger enable */
+	u32 cgtpe;
+	u32 cgtne;
+	/* Resume well interrupt trigger enable */
+	u32 rgtpe;
+	u32 rgtne;
+};
+
 struct sch_gpio {
 	struct gpio_chip chip;
 	struct irq_data data;
+	struct sch_gpio_context context;
 	spinlock_t lock;
 	unsigned short iobase;
 	unsigned short core_base;
@@ -110,11 +127,11 @@ static void sch_gpio_reg_set(struct gpio_chip *gc, unsigned gpio, unsigned reg,
 
 static int sch_gpio_direction_in(struct gpio_chip *gc, unsigned gpio_num)
 {
-     struct sch_gpio *sch = to_sch_gpio(gc);
-     unsigned long flags;
+	struct sch_gpio *sch = to_sch_gpio(gc);
+	unsigned long flags;
 
 
-    spin_lock_irqsave(&sch->lock, flags);
+	spin_lock_irqsave(&sch->lock, flags);
 	sch_gpio_reg_set(gc, gpio_num, GIO, 1);
 	spin_unlock_irqrestore(&sch->lock, flags);
 	return 0;
@@ -128,7 +145,7 @@ static int sch_gpio_get(struct gpio_chip *gc, unsigned gpio_num)
 static void sch_gpio_set(struct gpio_chip *gc, unsigned gpio_num, int val)
 {
 	struct sch_gpio *sch = to_sch_gpio(gc);
-    unsigned long flags;
+	unsigned long flags;
 
 	spin_lock_irqsave(&sch->lock, flags);
 	sch_gpio_reg_set(gc, gpio_num, GLV, val);
@@ -139,7 +156,7 @@ static int sch_gpio_direction_out(struct gpio_chip *gc, unsigned gpio_num,
 				  int val)
 {
 	struct sch_gpio *sch = to_sch_gpio(gc);
-    unsigned long flags;
+	unsigned long flags;
 
 	spin_lock_irqsave(&sch->lock, flags);
 	sch_gpio_reg_set(gc, gpio_num, GIO, 0);
@@ -171,7 +188,7 @@ static struct gpio_chip sch_gpio_chip = {
 	.get			= sch_gpio_get,
 	.direction_output	= sch_gpio_direction_out,
 	.set			= sch_gpio_set,
-    .to_irq			= sch_gpio_to_irq,
+	.to_irq			= sch_gpio_to_irq,
 };
 
 static void sch_gpio_irq_enable(struct irq_data *d)
@@ -182,7 +199,7 @@ static void sch_gpio_irq_enable(struct irq_data *d)
 
 	gpio_num = d->irq - sch->irq_base;
 	spin_lock_irqsave(&sch->lock, flags);
-	sch_gpio_reg_set(sch, gpio_num, GGPE, 1);
+	sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 1);
 	spin_unlock_irqrestore(&sch->lock, flags);
 }
 
@@ -194,7 +211,7 @@ static void sch_gpio_irq_disable(struct irq_data *d)
 
 	gpio_num = d->irq - sch->irq_base;
 	spin_lock_irqsave(&sch->lock, flags);
-	sch_gpio_reg_set(sch, gpio_num, GGPE, 0);
+	sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 0);
 	spin_unlock_irqrestore(&sch->lock, flags);
 }
 
@@ -222,23 +239,23 @@ static int sch_gpio_irq_type(struct irq_data *d, unsigned type)
 
 	switch (type) {
 	case IRQ_TYPE_EDGE_RISING:
-		sch_gpio_reg_set(sch, gpio_num, GTPE, 1);
-		sch_gpio_reg_set(sch, gpio_num, GTNE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 1);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 0);
 		break;
 
 	case IRQ_TYPE_EDGE_FALLING:
-		sch_gpio_reg_set(sch, gpio_num, GTNE, 1);
-		sch_gpio_reg_set(sch, gpio_num, GTPE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 1);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 0);
 		break;
 
 	case IRQ_TYPE_EDGE_BOTH:
-		sch_gpio_reg_set(sch, gpio_num, GTPE, 1);
-		sch_gpio_reg_set(sch, gpio_num, GTNE, 1);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 1);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 1);
 		break;
 
 	case IRQ_TYPE_NONE:
-		sch_gpio_reg_set(sch, gpio_num, GTPE, 0);
-		sch_gpio_reg_set(sch, gpio_num, GTNE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 0);
 		break;
 
 	default:
@@ -287,15 +304,15 @@ static void sch_gpio_irq_disable_all(struct sch_gpio *sch, unsigned int num)
 	spin_lock_irqsave(&sch->lock, flags);
 
 	for (gpio_num = 0; gpio_num < num; gpio_num++) {
-		sch_gpio_reg_set(sch, gpio_num, GTPE, 0);
-		sch_gpio_reg_set(sch, gpio_num, GTNE, 0);
-		sch_gpio_reg_set(sch, gpio_num, GGPE, 0);
-		sch_gpio_reg_set(sch, gpio_num, GSMI, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTPE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GTNE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GGPE, 0);
+		sch_gpio_reg_set(&sch->chip, gpio_num, GSMI, 0);
 
 		if (gpio_num >= 2)
-			sch_gpio_reg_set(sch, gpio_num, RGNMIEN, 0);
+			sch_gpio_reg_set(&sch->chip, gpio_num, RGNMIEN, 0);
 		else
-			sch_gpio_reg_set(sch, gpio_num, CGNMIEN, 0);
+			sch_gpio_reg_set(&sch->chip, gpio_num, CGNMIEN, 0);
 
 		/* clear any pending interrupts */
 		sch_gpio_reg_set(&sch->chip, gpio_num, GTS, 1);
@@ -454,9 +471,85 @@ static int sch_gpio_remove(struct platform_device *pdev)
 	return 0;
 }
 
+/*
+ * Disables IRQ line of Legacy GPIO chip so that its state is not controlled
+ * by
+ * PM framework (disabled before calling suspend_noirq callback and
+ * re-enabled
+ * after calling resume_noirq callback of devices).
+ */
+static int sch_gpio_suspend_sys(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct sch_gpio *sch = platform_get_drvdata(pdev);
+
+	disable_irq(sch->irq);
+	return 0;
+}
+/*
+ * Saves the state of configuration registers for Core Well GPIOs.
+ * Don't touch Core Well interrupt triggers and SCI/GPE because they are
+ * handled by the irqchip subsystem.
+ * Don't touch Suspend Well GPIO registers because they are alive and
+ * functional in both S3 and S0 states.
+ */
+static int sch_gpio_suspend_sys_noirq(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct sch_gpio *sch = platform_get_drvdata(pdev);
+	struct sch_gpio_context *regs = &sch->context;
+	regs->cgen	= inl(sch->iobase + GEN);
+	regs->cgio	= inl(sch->iobase + GIO);
+	regs->cglvl	= inl(sch->iobase + GLV);
+	regs->cgsmi	= inl(sch->iobase + GSMI);
+	regs->cgnmien	= inl(sch->iobase + CGNMIEN);
+	return 0;
+}
+/*
+ * Restore the context saved by sch_gpio_suspend_sys_noirq().
+ */
+static int sch_gpio_resume_sys_noirq(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct sch_gpio *sch = platform_get_drvdata(pdev);
+	struct sch_gpio_context *regs = &sch->context;
+	outl(regs->cgio, sch->iobase + GIO);
+	outl(regs->cglvl, sch->iobase + GLV);
+	outl(regs->cgsmi, sch->iobase + GSMI);
+	outl(regs->cgnmien, sch->iobase + CGNMIEN);
+	outl(regs->cgen, sch->iobase + GEN);
+	return 0;
+}
+/*
+ * Re-enables the IRQ line of Legacy GPIO chip.
+ * Done here instead of dpm_resume_no_irq() PM handler in order to be sure
+ * that
+ * all the system busses (I2C, SPI) are resumed when the IRQ is fired,
+ * otherwise
+ * a SPI or I2C device might fail to handle its own interrupt because the
+ * IRQ
+ * handler (bottom half) involves talking to the device.
+ */
+static int sch_gpio_resume_sys(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct sch_gpio *sch = platform_get_drvdata(pdev);
+
+	enable_irq(sch->irq);
+	return 0;
+}
+
+const struct dev_pm_ops sch_gpio_pm_ops = {
+	.suspend	= sch_gpio_suspend_sys,
+	.suspend_noirq	= sch_gpio_suspend_sys_noirq,
+	.resume_noirq	= sch_gpio_resume_sys_noirq,
+	.resume		= sch_gpio_resume_sys,
+};
+
 static struct platform_driver sch_gpio_driver = {
 	.driver = {
-		.name = "sch_gpio",
+		.name	= "sch_gpio",
+		.pm	= &sch_gpio_pm_ops,
 	},
 	.probe		= sch_gpio_probe,
 	.remove		= sch_gpio_remove,
-- 
1.7.5.4

