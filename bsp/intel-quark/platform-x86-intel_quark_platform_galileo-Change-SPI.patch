From 10a9699bd0778eef2f74f83aefb3538a74289618 Mon Sep 17 00:00:00 2001
From: "Wong, Mun Choy" <mun.choy.wong@intel.com>
Date: Fri, 31 Jul 2015 14:12:54 +0800
Subject: [PATCH 3/8] platform: x86: intel_quark_platform_galileo: Change SPI,
 I2C & GPIO calling sequence (RTC:114524)

During the GPIO Restrict Probe on Galileo Gen1, the sequence of
calling SPI, I2C and GPIO interfaces is causing a system lock-up,
with "noapic nolapic" kernel parameter. The lock-up is due a
missing interrupt handler to handle the I2C interrupt (TX_EMPTY)
and it is because the GIP Probe would return without requesting
the IRQ when it fails to enable MSI.

The calling sequence is now changed to follow the Galileo Gen2
implementations so that the spi_register_board_info function
is called after I2C and GPIO during GPIO Restrict Probe to avoid
the system to lock-up.

Signed-off-by: Wong, Mun Choy <mun.choy.wong@intel.com>
Change-Id: Id29ffa2bb4bfd68676d70150661bf4d1ecf4033d
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5941
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 .../x86/intel-quark/intel_quark_platform_galileo.c |   44 ++++++++------------
 1 files changed, 17 insertions(+), 27 deletions(-)

diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
index f1e3d42..eba1a2e 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_galileo.c
@@ -161,8 +161,6 @@ static const unsigned short eeprom_i2c_addr[] = {
 	I2C_CLIENT_END
 };
 
-struct i2c_client *cypress = NULL, *eeprom = NULL;
-
 /******************************************************************************
  *                 Intel Quark SPI Controller Data
  ******************************************************************************/
@@ -297,31 +295,11 @@ static int intel_qrk_gpio_restrict_probe(struct platform_device *pdev)
 {
 	int ret = 0;
 	struct i2c_client *cypress = NULL, *eeprom = NULL;
-	static int spi_done;
-	static int gpios_done;
-
-	if (spi_done)
-		goto gpios;
-
-	ret = intel_qrk_spi_add_onboard_devs();
-	if (ret)
-		goto end;
-
-	spi_done = 1;
-
-gpios:
-	if (gpios_done)
-		goto i2c;
-
-	ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
-	if (ret)
-		goto end;
-
-	probed_i2c_cypress.irq = gpio_to_irq(GPIO_CYPRESS_INT_S3);
 
-	gpios_done = 1;
-
-i2c:
+	/* The sequence of calling spi, gpio & i2c was different and an issue
+	 * was found that the system would lock-up later when running without
+	 * APIC. Calling sequence is now changed to follow the Galileo Gen2. 
+	 */
 	i2c_adap = i2c_get_adapter(0);
 	if (NULL == i2c_adap) {
 		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
@@ -329,13 +307,21 @@ i2c:
 		ret = -EPROBE_DEFER;
 		goto end;
 	}
+
+	ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
+	if (ret){
+		pr_info("%s: failed to request reserved gpios\n",
+			__func__);
+		goto end;
+	}
+
 	strlcpy(probed_i2c_cypress.type, "cy8c9540a", I2C_NAME_SIZE);
+	probed_i2c_cypress.irq = gpio_to_irq(GPIO_CYPRESS_INT_S3);
 	cypress = i2c_new_probed_device(i2c_adap, &probed_i2c_cypress,
 					cypress_i2c_addr, cypress_i2c_probe);
 	strlcpy(probed_i2c_eeprom.type, "at24", I2C_NAME_SIZE);
 	eeprom = i2c_new_probed_device(i2c_adap, &probed_i2c_eeprom,
 					eeprom_i2c_addr, eeprom_i2c_probe);
-	i2c_put_adapter(i2c_adap);
 
 	if (NULL == cypress || NULL == eeprom) {
 		pr_err("%s: can't probe Cypress Expander\n", __func__);
@@ -343,7 +329,11 @@ i2c:
 		goto end;
 	}
 
+	ret = intel_qrk_spi_add_onboard_devs();
+
 end:
+	i2c_put_adapter(i2c_adap);
+
 	return ret;
 }
 
-- 
1.7.5.4

