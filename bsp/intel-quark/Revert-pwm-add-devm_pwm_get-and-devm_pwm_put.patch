From 9a31c36ec96ff82583dae12a94e6ecaaf2d55631 Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Sat, 5 Oct 2013 16:18:04 +0800
Subject: [PATCH 1159/1187] Revert "pwm: add devm_pwm_get() and
 devm_pwm_put()"

This reverts commit 4b494cc4e947ae94f1f561e1ba81a3aeed1880b7.

Conflicts:

	include/linux/pwm.h

Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 Documentation/driver-model/devres.txt |    4 --
 Documentation/pwm.txt                 |    3 +-
 drivers/pwm/core.c                    |   58 ---------------------------------
 include/linux/pwm.h                   |    2 -
 4 files changed, 1 insertions(+), 66 deletions(-)

diff --git a/Documentation/driver-model/devres.txt b/Documentation/driver-model/devres.txt
index 43cff70..950856b 100644
--- a/Documentation/driver-model/devres.txt
+++ b/Documentation/driver-model/devres.txt
@@ -284,7 +284,3 @@ CLOCK
 PINCTRL
   devm_pinctrl_get()
   devm_pinctrl_put()
-
-PWM
-  devm_pwm_get()
-  devm_pwm_put()
diff --git a/Documentation/pwm.txt b/Documentation/pwm.txt
index 1039b68..b0a8fdf 100644
--- a/Documentation/pwm.txt
+++ b/Documentation/pwm.txt
@@ -36,8 +36,7 @@ Legacy users can request a PWM device using pwm_request() and free it
 after usage with pwm_free().
 
 New users should use the pwm_get() function and pass to it the consumer
-device or a consumer name. pwm_put() is used to free the PWM device. Managed
-variants of these functions, devm_pwm_get() and devm_pwm_put(), also exist.
+device or a consumer name. pwm_put() is used to free the PWM device.
 
 After being requested a PWM has to be configured using:
 
diff --git a/drivers/pwm/core.c b/drivers/pwm/core.c
index bfc8c05..adb194a 100644
--- a/drivers/pwm/core.c
+++ b/drivers/pwm/core.c
@@ -696,64 +696,6 @@ out:
 }
 EXPORT_SYMBOL_GPL(pwm_put);
 
-static void devm_pwm_release(struct device *dev, void *res)
-{
-	pwm_put(*(struct pwm_device **)res);
-}
-
-/**
- * devm_pwm_get() - resource managed pwm_get()
- * @dev: device for PWM consumer
- * @con_id: consumer name
- *
- * This function performs like pwm_get() but the acquired PWM device will
- * automatically be released on driver detach.
- */
-struct pwm_device *devm_pwm_get(struct device *dev, const char *con_id)
-{
-	struct pwm_device **ptr, *pwm;
-
-	ptr = devres_alloc(devm_pwm_release, sizeof(**ptr), GFP_KERNEL);
-	if (!ptr)
-		return ERR_PTR(-ENOMEM);
-
-	pwm = pwm_get(dev, con_id);
-	if (!IS_ERR(pwm)) {
-		*ptr = pwm;
-		devres_add(dev, ptr);
-	} else {
-		devres_free(ptr);
-	}
-
-	return pwm;
-}
-EXPORT_SYMBOL_GPL(devm_pwm_get);
-
-static int devm_pwm_match(struct device *dev, void *res, void *data)
-{
-	struct pwm_device **p = res;
-
-	if (WARN_ON(!p || !*p))
-		return 0;
-
-	return *p == data;
-}
-
-/**
- * devm_pwm_put() - resource managed pwm_put()
- * @dev: device for PWM consumer
- * @pwm: PWM device
- *
- * Release a PWM previously allocated using devm_pwm_get(). Calling this
- * function is usually not needed because devm-allocated resources are
- * automatically released on driver detach.
- */
-void devm_pwm_put(struct device *dev, struct pwm_device *pwm)
-{
-	WARN_ON(devres_release(dev, devm_pwm_release, devm_pwm_match, pwm));
-}
-EXPORT_SYMBOL_GPL(devm_pwm_put);
-
 #ifdef CONFIG_DEBUG_FS
 static void pwm_dbg_show(struct pwm_chip *chip, struct seq_file *s)
 {
diff --git a/include/linux/pwm.h b/include/linux/pwm.h
index 6842d11..be377bc 100644
--- a/include/linux/pwm.h
+++ b/include/linux/pwm.h
@@ -191,8 +191,6 @@ struct pwm_device *of_pwm_xlate_with_flags(struct pwm_chip *pc,
 struct pwm_device *pwm_get(struct device *dev, const char *consumer);
 void pwm_put(struct pwm_device *pwm);
 
-struct pwm_device *devm_pwm_get(struct device *dev, const char *consumer);
-void devm_pwm_put(struct device *dev, struct pwm_device *pwm);
 #else
 static inline int pwm_set_chip_data(struct pwm_device *pwm, void *data)
 {
-- 
1.7.5.4

