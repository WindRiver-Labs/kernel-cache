From 84d73312c10645a3c87699897c99e386ac43c7b3 Mon Sep 17 00:00:00 2001
From: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Date: Mon, 20 Apr 2015 19:06:01 +0800
Subject: [PATCH 19/65] net: can: slcan: Added gerrit review comments.

Handled memory leaks, structure name changes and loop bugs.

Details are available on below gerrit link:

https://git-ger-5.devtools.intel.com/gerrit/#/c/125887/3/drivers/net/can/slcan.c

Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Signed-off-by: Naveen Kumar <naveen.kumarx.saini@intel.com>
Change-Id: I8015adf69f258ccbb435f0206d722b3925d3f019
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4683
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/net/can/slcan.c |  268 ++++++++++++++++++++++++++---------------------
 1 files changed, 147 insertions(+), 121 deletions(-)

diff --git a/drivers/net/can/slcan.c b/drivers/net/can/slcan.c
index ad10e1c..ebd2bce 100644
--- a/drivers/net/can/slcan.c
+++ b/drivers/net/can/slcan.c
@@ -66,30 +66,35 @@ MODULE_AUTHOR("Oliver Hartkopp <socketcan@hartkopp.net>");
 
 #define SLCAN_MAGIC 0x53CA
 #define MUX_NETDEV_MAX 10
+#define MUX_NETDEV_QUARK 2
 
 static int maxchannel = 10;	/* MAX number of SLCAN channels;
-				*  This can be overridden with
-				*  insmod slcan.ko maxcahnnel=nnn
-				*/
+				 *  This can be overridden with
+				 *  insmod slcan.ko maxcahnnel=nnn
+				 */
 module_param(maxchannel, int, 0);
 MODULE_PARM_DESC(maxchannel, "Maximum number of slcan channels");
 
-static int muxnetdevs = 2;	/*	MAX number of net devices multiplexed
-				*	per SLCAN channel;
-				*	This can be overridden with
-				*	insmod slcan.ko muxnetdevs=nnn
-				*/
+static int muxnetdevs = MUX_NETDEV_QUARK; /* MAX number of net
+					   * devices multiplexed
+					   * per SLCAN channel;
+					   * This can be overridden with
+				 	   * insmod slcan.ko muxnetdevs=nnn
+					   */
 module_param(muxnetdevs, int, 0);
 MODULE_PARM_DESC(muxnetdevs, "Max number of netdevs muxed per slcan channel");
 
 /* maximum rx buffer len: extended CAN frame with timestamp */
-#define SLC_MTU (sizeof("0T1111222281122334455667788EA5F\r")+1)
+/* <channel identifier (1 byte)> <type (1 byte)> <id(3 or 8 byte)> */
+/* <dlc (1 byte)> <data (Max 8 byte)> */
+#define SLC_MTU (sizeof("cT1111222281122334455667788EA5F\r")+1)
 
 #define SLC_CMD_LEN 1
 #define SLC_SFF_ID_LEN 3
 #define SLC_EFF_ID_LEN 8
 
-struct slcan_channel {
+/* structure for slcan device */
+struct slcan {
 	int			magic;
 
 	/* Various fields. */
@@ -108,17 +113,19 @@ struct slcan_channel {
 #define SLF_ERROR		1               /* Parity, etc. error        */
 };
 
-struct slcan_dev {
-	struct slcan_channel	*channel;	/* parent slcan channel      */
+
+/* structure for slcan channel */
+struct slcan_channel {
+	struct slcan		*device;	/* parent slcan device      */
 	int			addr;
 
 	/* These are pointers to the malloc()ed frame buffers. */
 	unsigned char		xbuff[SLC_MTU];	/* transmitter buffer	     */
-	unsigned char		*xhead;         /* pointer to next XMIT byte */
-	int			xleft;          /* bytes left in XMIT queue  */
+	unsigned char		*xhead;		/* pointer to next XMIT byte */
+	int			xleft;		/* bytes left in XMIT queue  */
 };
 
-static struct slcan_channel **slcan_channels;
+static struct slcan **slcan_devs;
 
 /************************************************************************
  *			SLCAN ENCAPSULATION FORMAT			 *
@@ -132,9 +139,10 @@ static struct slcan_channel **slcan_channels;
  * RTR-bit is set. This causes another ECU to send a CAN frame with the
  * given can_id.
  *
- * The SLCAN ASCII representation of these different frame types is:
- * <type> <id> <dlc> <data>*
+ * The XSLCAN ASCII representation of these different frame types is:
+ * <channel identifier> <type> <id> <dlc> <data>*
  *
+ * The <channel identifier> is one byte ASCII number <0-9>
  * Extended frames (29 bit) are defined by capital characters in the type.
  * RTR frames are defined as 'r' types - normal frames have 't' type:
  * t => 11 bit data frame
@@ -148,10 +156,12 @@ static struct slcan_channel **slcan_channels;
  *
  * Examples:
  *
- * t1230 : can_id 0x123, can_dlc 0, no data
- * t4563112233 : can_id 0x456, can_dlc 3, data 0x11 0x22 0x33
- * T12ABCDEF2AA55 : extended can_id 0x12ABCDEF, can_dlc 2, data 0xAA 0x55
- * r1230 : can_id 0x123, can_dlc 0, no data, remote transmission request
+ * 0t1230 : channel_id 0x0, can_id 0x123, can_dlc 0, no data
+ * 0t4563112233 : channel_id 0x0, can_id 0x456, can_dlc 3, data 0x11 0x22 0x33
+ * 0T12ABCDEF2AA55 : channel_id 0x0, extended can_id 0x12ABCDEF, can_dlc 2,
+ * data 0xAA 0x55
+ * 0r1230 : channel_id 0x0, can_id 0x123, can_dlc 0, no data,
+ * remote transmission request
  *
  */
 
@@ -160,29 +170,32 @@ static struct slcan_channel **slcan_channels;
  ************************************************************************/
 
 /* Send one completely decapsulated can_frame to the network layer */
-static void slc_bump(struct slcan_channel *sl)
+static void slc_bump(struct slcan *sl)
 {
 	struct sk_buff *skb;
 	struct can_frame cf;
-	int i, tmp, ext_frame, dev_idx;
+	int i, tmp, frame_type_pos, dev_idx;
 	u32 tmpid;
 	char *cmd = sl->rbuff;
+	char frame_type;
+
 	cf.can_id = 0;
 
 	/* XSLCAN frame detection */
-	ext_frame = (sl->rbuff[0] >= '0' && sl->rbuff[0] <= '9') ? 1 : 0;
+	frame_type_pos = (sl->rbuff[0] >= '0' && sl->rbuff[0] <= '9') ? 1 : 0;
+	frame_type = sl->rbuff[frame_type_pos];
 
-	switch (*cmd) {
+	switch (frame_type) {
 	case 'r':
 		cf.can_id = CAN_RTR_FLAG;
 		/* fallthrough */
 	case 't':
 		/* store dlc ASCII value and terminate SFF CAN ID string */
 		cf.can_dlc = sl->rbuff[SLC_CMD_LEN + SLC_SFF_ID_LEN +
-				ext_frame];
-		sl->rbuff[SLC_CMD_LEN + SLC_SFF_ID_LEN + ext_frame] = 0;
+				frame_type_pos];
+		sl->rbuff[SLC_CMD_LEN + SLC_SFF_ID_LEN + frame_type_pos] = 0;
 		/* point to payload data behind the dlc */
-		cmd += SLC_CMD_LEN + SLC_SFF_ID_LEN + ext_frame + 1;
+		cmd += SLC_CMD_LEN + SLC_SFF_ID_LEN + frame_type_pos + 1;
 		break;
 	case 'R':
 		cf.can_id = CAN_RTR_FLAG;
@@ -191,16 +204,16 @@ static void slc_bump(struct slcan_channel *sl)
 		cf.can_id |= CAN_EFF_FLAG;
 		/* store dlc ASCII value and terminate EFF CAN ID string */
 		cf.can_dlc = sl->rbuff[SLC_CMD_LEN + SLC_EFF_ID_LEN +
-				ext_frame];
-		sl->rbuff[SLC_CMD_LEN + SLC_EFF_ID_LEN + ext_frame] = 0;
+				frame_type_pos];
+		sl->rbuff[SLC_CMD_LEN + SLC_EFF_ID_LEN + frame_type_pos] = 0;
 		/* point to payload data behind the dlc */
-		cmd += SLC_CMD_LEN + SLC_EFF_ID_LEN + ext_frame + 1;
+		cmd += SLC_CMD_LEN + SLC_EFF_ID_LEN + frame_type_pos + 1;
 		break;
 	default:
 		return;
 	}
 
-	if (kstrtou32(sl->rbuff + SLC_CMD_LEN + ext_frame, 16, &tmpid))
+	if (kstrtou32(sl->rbuff + SLC_CMD_LEN + frame_type_pos, 16, &tmpid))
 		return;
 
 	cf.can_id |= tmpid;
@@ -232,7 +245,7 @@ static void slc_bump(struct slcan_channel *sl)
 	if (!skb)
 		return;
 
-	dev_idx = ext_frame ? sl->rbuff[0] - '0' : 0;
+	dev_idx = frame_type_pos ? sl->rbuff[0] - '0' : 0;
 
 	if (sl->dev[dev_idx] == NULL)
 		return;
@@ -254,12 +267,13 @@ static void slc_bump(struct slcan_channel *sl)
 }
 
 /* parse tty input stream */
-static void slcan_unesc(struct slcan_channel *sl, unsigned char s)
+static void slcan_unesc(struct slcan *sl, unsigned char s)
 {
 	if ((s == '\r') || (s == '\a')) { /* CR or BEL ends the pdu */
 		if (!test_and_clear_bit(SLF_ERROR, &sl->flags) &&
-		    (sl->rcount > 4))
+		    (sl->rcount > 4))  {
 			slc_bump(sl);
+		}
 		sl->rcount = 0;
 	} else {
 		if (!test_bit(SLF_ERROR, &sl->flags))  {
@@ -267,6 +281,9 @@ static void slcan_unesc(struct slcan_channel *sl, unsigned char s)
 				sl->rbuff[sl->rcount++] = s;
 				return;
 			} else {
+				/* TODO: sl->dev[0] Need to fix,
+				 * require design changes
+				 */
 				sl->dev[0]->stats.rx_over_errors++;
 				set_bit(SLF_ERROR, &sl->flags);
 			}
@@ -279,7 +296,7 @@ static void slcan_unesc(struct slcan_channel *sl, unsigned char s)
  ************************************************************************/
 
 /* Encapsulate one can_frame and stuff into a TTY queue. */
-static void slc_encaps(struct slcan_dev *sl_dev, struct can_frame *cf,
+static void slc_encaps(struct slcan_channel *sl_chan, struct can_frame *cf,
 		       int dev_idx)
 {
 	int actual, idx, i;
@@ -292,28 +309,28 @@ static void slc_encaps(struct slcan_dev *sl_dev, struct can_frame *cf,
 
 	if (muxnetdevs < 2) {
 		if (cf->can_id & CAN_EFF_FLAG)
-			sprintf(sl_dev->xbuff, "%c%08X%d", cmd,
+			sprintf(sl_chan->xbuff, "%c%08X%d", cmd,
 				cf->can_id & CAN_EFF_MASK, cf->can_dlc);
 		else
-			sprintf(sl_dev->xbuff, "%c%03X%d", cmd | 0x20,
+			sprintf(sl_chan->xbuff, "%c%03X%d", cmd | 0x20,
 				cf->can_id & CAN_SFF_MASK, cf->can_dlc);
 	} else {
 		if_idx = dev_idx + '0';
 		if (cf->can_id & CAN_EFF_FLAG)
-			sprintf(sl_dev->xbuff, "%c%c%08X%d", if_idx, cmd,
+			sprintf(sl_chan->xbuff, "%c%c%08X%d", if_idx, cmd,
 				cf->can_id & CAN_EFF_MASK, cf->can_dlc);
 		else
-			sprintf(sl_dev->xbuff, "%c%c%03X%d", if_idx,
+			sprintf(sl_chan->xbuff, "%c%c%03X%d", if_idx,
 				cmd | 0x20,
 				cf->can_id & CAN_SFF_MASK, cf->can_dlc);
 	}
 
-	idx = strlen(sl_dev->xbuff);
+	idx = strlen(sl_chan->xbuff);
 
 	for (i = 0; i < cf->can_dlc; i++)
-		sprintf(&sl_dev->xbuff[idx + 2 * i], "%02X", cf->data[i]);
+		sprintf(&sl_chan->xbuff[idx + 2 * i], "%02X", cf->data[i]);
 
-	strcat(sl_dev->xbuff, "\r"); /* add terminating character */
+	strcat(sl_chan->xbuff, "\r"); /* add terminating character */
 
 	/* Order of next two lines is *very* important.
 	 * When we are sending a little amount of data,
@@ -323,27 +340,26 @@ static void slc_encaps(struct slcan_dev *sl_dev, struct can_frame *cf,
 	 * if we did not request it before write operation.
 	 *       14 Oct 1994  Dmitry Gorodchanin.
 	 */
-	set_bit(TTY_DO_WRITE_WAKEUP, &sl_dev->channel->tty->flags);
-	actual = sl_dev->channel->tty->ops->write(sl_dev->channel->tty,
-			sl_dev->xbuff,
-			strlen(sl_dev->xbuff));
-
-	sl_dev->xleft = strlen(sl_dev->xbuff) - actual;
-	sl_dev->xhead = sl_dev->xbuff + actual;
-	sl_dev->channel->dev[dev_idx]->stats.tx_bytes += cf->can_dlc;
+	set_bit(TTY_DO_WRITE_WAKEUP, &sl_chan->device->tty->flags);
+	actual = sl_chan->device->tty->ops->write(sl_chan->device->tty,
+			sl_chan->xbuff,
+			strlen(sl_chan->xbuff));
+
+	sl_chan->xleft = strlen(sl_chan->xbuff) - actual;
+	sl_chan->xhead = sl_chan->xbuff + actual;
+	sl_chan->device->dev[dev_idx]->stats.tx_bytes += cf->can_dlc;
 }
 
 /* Write out any remaining transmit buffer. Scheduled when tty is writable */
 static void slcan_transmit(struct work_struct *work)
 {
-	struct slcan_channel *sl = container_of(work, struct slcan_channel,
-					 tx_work);
+	struct slcan *sl = container_of(work, struct slcan, tx_work);
 	int actual, i;
-	struct slcan_dev *sl_dev;
+	struct slcan_channel *sl_chan;
 
 	spin_lock_bh(&sl->lock);
 	/* First make sure we're connected. */
-	if (!sl || sl->magic != SLCAN_MAGIC) {
+	if (!sl->tty || sl->magic != SLCAN_MAGIC) {
 		spin_unlock_bh(&sl->lock);
 		return;
 	}
@@ -353,9 +369,9 @@ static void slcan_transmit(struct work_struct *work)
 		if (!netif_running(sl->dev[i]))
 			continue;
 
-		sl_dev = netdev_priv(sl->dev[i]);
+		sl_chan = netdev_priv(sl->dev[i]);
 
-		if (sl_dev->xleft <= 0)  {
+		if (sl_chan->xleft <= 0)  {
 			/* Now serial buffer is almost free & we can start
 			 * transmission of another packet
 			 */
@@ -365,10 +381,10 @@ static void slcan_transmit(struct work_struct *work)
 			continue;
 		}
 
-		actual = sl->tty->ops->write(sl->tty, sl_dev->xhead,
-					 sl_dev->xleft);
-		sl_dev->xleft -= actual;
-		sl_dev->xhead += actual;
+		actual = sl->tty->ops->write(sl->tty, sl_chan->xhead,
+					sl_chan->xleft);
+		sl_chan->xleft -= actual;
+		sl_chan->xhead += actual;
 	}
 	spin_unlock_bh(&sl->lock);
 
@@ -380,16 +396,16 @@ static void slcan_transmit(struct work_struct *work)
  */
 static void slcan_write_wakeup(struct tty_struct *tty)
 {
-	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
+	struct slcan *sl = (struct slcan *) tty->disc_data;
 	schedule_work(&sl->tx_work);
 }
 
 /* Send a can_frame to a TTY queue. */
 static netdev_tx_t slc_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-	struct slcan_dev *sl_dev = netdev_priv(dev);
+	struct slcan_channel *sl_chan = netdev_priv(dev);
 
-	struct slcan_channel *sl = sl_dev->channel;
+	struct slcan *sl = sl_chan->device;
 
 	if (skb->len != sizeof(struct can_frame))
 		goto out;
@@ -405,9 +421,9 @@ static netdev_tx_t slc_xmit(struct sk_buff *skb, struct net_device *dev)
 		goto out;
 	}
 
-	netif_stop_queue(sl->dev[sl_dev->addr]);
-	slc_encaps(sl_dev, (struct can_frame *) skb->data,
-		   sl_dev->addr); /* encaps & send */
+	netif_stop_queue(sl->dev[sl_chan->addr]);
+	slc_encaps(sl_chan, (struct can_frame *) skb->data,
+		   sl_chan->addr); /* encaps & send */
 	spin_unlock(&sl->lock);
 
 out:
@@ -423,9 +439,9 @@ out:
 /* Netdevice UP -> DOWN routine */
 static int slc_close(struct net_device *dev)
 {
-	struct slcan_dev *sl_dev = netdev_priv(dev);
+	struct slcan_channel *sl_chan = netdev_priv(dev);
 
-	struct slcan_channel *sl = sl_dev->channel;
+	struct slcan *sl = sl_chan->device;
 
 	spin_lock_bh(&sl->lock);
 	if (sl->tty) {
@@ -433,8 +449,8 @@ static int slc_close(struct net_device *dev)
 		clear_bit(TTY_DO_WRITE_WAKEUP, &sl->tty->flags);
 	}
 	netif_stop_queue(dev);
-	sl->rcount   = 0;
-	sl_dev->xleft    = 0;
+	sl->rcount     = 0;
+	sl_chan->xleft = 0;
 	spin_unlock_bh(&sl->lock);
 
 	return 0;
@@ -443,9 +459,9 @@ static int slc_close(struct net_device *dev)
 /* Netdevice DOWN -> UP routine */
 static int slc_open(struct net_device *dev)
 {
-	struct slcan_dev *sl_dev = netdev_priv(dev);
+	struct slcan_channel *sl_chan = netdev_priv(dev);
 
-	struct slcan_channel *sl = sl_dev->channel;
+	struct slcan *sl = sl_chan->device;
 
 	if (sl->tty == NULL)
 		return -ENODEV;
@@ -460,11 +476,11 @@ static void slc_free_netdev(struct net_device *dev)
 {
 	int dev_idx, devs_in_use, i;
 
-	struct slcan_dev *sl_dev = netdev_priv(dev);
+	struct slcan_channel *sl_chan = netdev_priv(dev);
 
-	struct slcan_channel *sl = sl_dev->channel;
+	struct slcan *sl = sl_chan->device;
 
-	dev_idx = sl_dev->addr;
+	dev_idx = sl_chan->addr;
 
 	free_netdev(dev);
 
@@ -477,11 +493,11 @@ static void slc_free_netdev(struct net_device *dev)
 			devs_in_use++;
 	}
 
-	/* Free slcan_channel when not referencing any netdev. */
+	/* Free slcan devs when not referencing any netdev. */
 	if (devs_in_use == 0) {
 		for (i = 0; i < maxchannel; i++) {
-			if (sl == slcan_channels[i])
-				slcan_channels[i] = NULL;
+			if (sl == slcan_devs[i])
+				slcan_devs[i] = NULL;
 		}
 		kfree(sl);
 	}
@@ -526,11 +542,12 @@ static void slc_setup(struct net_device *dev)
 static void slcan_receive_buf(struct tty_struct *tty,
 			      const unsigned char *cp, char *fp, int count)
 {
-	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
+	struct slcan *sl = (struct slcan *) tty->disc_data;
 
 	if (!sl || sl->magic != SLCAN_MAGIC)
 		return;
 
+	/* TODO: sl->dev[0] Need to fix, require design changes */
 	if (!netif_running(sl->dev[0]))
 		return;
 
@@ -554,10 +571,10 @@ static void slcan_receive_buf(struct tty_struct *tty,
 static void slc_sync(void)
 {
 	int i, j;
-	struct slcan_channel *sl;
+	struct slcan *sl;
 
 	for (i = 0; i < maxchannel; i++) {
-		sl = slcan_channels[i];
+		sl = slcan_devs[i];
 		if (sl == NULL)
 			break;
 
@@ -566,26 +583,26 @@ static void slc_sync(void)
 
 		for (j = 0; j < muxnetdevs; j++) {
 
-			if (sl->dev[i] == NULL)
+			if (sl->dev[j] == NULL)
 				continue;
 
-			if (sl->dev[i]->flags & IFF_UP)
-				dev_close(sl->dev[i]);
+			if (sl->dev[j]->flags & IFF_UP)
+				dev_close(sl->dev[j]);
 		}
 	}
 }
 
 /* Find a free SLCAN channel, and link in this `tty' line. */
-static struct slcan_channel *slc_alloc(dev_t line)
+static struct slcan *slc_alloc(dev_t line)
 {
 	int i, j;
 	char name[IFNAMSIZ];
 	struct net_device *dev = NULL;
-	struct slcan_channel *sl;
-	struct slcan_dev *sl_dev;
+	struct slcan *sl;
+	struct slcan_channel *sl_chan;
 
 	for (i = 0; i < maxchannel; i++) {
-		sl = slcan_channels[i];
+		sl = slcan_devs[i];
 		if (sl == NULL)
 			break;
 
@@ -595,7 +612,7 @@ static struct slcan_channel *slc_alloc(dev_t line)
 	if (i >= maxchannel)
 		return NULL;
 
-	sl = kzalloc(sizeof(struct slcan_channel), GFP_KERNEL);
+	sl = kzalloc(sizeof(struct slcan), GFP_KERNEL);
 
 	if (!sl)
 		return NULL;
@@ -606,18 +623,20 @@ static struct slcan_channel *slc_alloc(dev_t line)
 	for (j = 0; j < muxnetdevs; j++) {
 		sprintf(name, "slcan%d", i * muxnetdevs + j);
 
-		dev = alloc_netdev(sizeof(*sl_dev), name, slc_setup);
+		dev = alloc_netdev(sizeof(*sl_chan), name, slc_setup);
 		if (!dev) {
+			for (i = 0; i < j; i++)
+				free_netdev(sl->dev[i]);
 			kfree(sl);
 			return NULL;
 		}
 
 		dev->base_addr  = i * muxnetdevs + j;
-		sl_dev = netdev_priv(dev);
+		sl_chan = netdev_priv(dev);
 
-		sl_dev->channel = sl;
-		sl_dev->addr = j;
-		sl_dev->xleft = 0;
+		sl_chan->device = sl;
+		sl_chan->addr = j;
+		sl_chan->xleft = 0;
 
 		sl->dev[j] = dev;
 	}
@@ -627,7 +646,7 @@ static struct slcan_channel *slc_alloc(dev_t line)
 
 	spin_lock_init(&sl->lock);
 	INIT_WORK(&sl->tx_work, slcan_transmit);
-	slcan_channels[i] = sl;
+	slcan_devs[i] = sl;
 
 	return sl;
 }
@@ -644,8 +663,8 @@ static struct slcan_channel *slc_alloc(dev_t line)
 
 static int slcan_open(struct tty_struct *tty)
 {
-	struct slcan_channel *sl;
-	int err, i;
+	struct slcan *sl;
+	int err, i, j;
 
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
@@ -669,7 +688,6 @@ static int slcan_open(struct tty_struct *tty)
 	if (sl && sl->magic == SLCAN_MAGIC)
 		goto err_exit;
 
-
 	/* OK.  Find a free SLCAN channel to use. */
 	err = -ENFILE;
 	sl = slc_alloc(tty_devnum(tty));
@@ -686,10 +704,14 @@ static int slcan_open(struct tty_struct *tty)
 		set_bit(SLF_INUSE, &sl->flags);
 
 		for (i = 0; i < muxnetdevs; i++) {
-
 			err = register_netdevice(sl->dev[i]);
-			if (err)
-				goto err_free_chan;
+			if (err) {
+				for (j = 0; j < i; j++) {
+					if (sl->dev[j])
+						unregister_netdev(sl->dev[j]);
+				}
+			goto err_free_chan;
+			}
 		}
 	}
 
@@ -704,7 +726,7 @@ err_free_chan:
 	sl->tty = NULL;
 	tty->disc_data = NULL;
 	clear_bit(SLF_INUSE, &sl->flags);
-
+	kfree(sl);
 err_exit:
 	rtnl_unlock();
 
@@ -724,7 +746,7 @@ static void slcan_close(struct tty_struct *tty)
 {
 	int i;
 
-	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
+	struct slcan *sl = (struct slcan *) tty->disc_data;
 
 	/* First make sure we're connected. */
 	if (!sl || sl->magic != SLCAN_MAGIC || sl->tty != tty)
@@ -738,8 +760,10 @@ static void slcan_close(struct tty_struct *tty)
 	flush_work(&sl->tx_work);
 
 	/* Flush network side */
-	for (i = 0; i < muxnetdevs; i++)
-		unregister_netdev(sl->dev[i]);
+	for (i = 0; i < muxnetdevs; i++) {
+		if (sl->dev[i])
+			unregister_netdev(sl->dev[i]);
+	}
 	/* This will complete via sl_free_netdev */
 }
 
@@ -753,7 +777,7 @@ static int slcan_hangup(struct tty_struct *tty)
 static int slcan_ioctl(struct tty_struct *tty, struct file *file,
 		       unsigned int cmd, unsigned long arg)
 {
-	struct slcan_channel *sl = (struct slcan_channel *) tty->disc_data;
+	struct slcan *sl = (struct slcan *) tty->disc_data;
 	unsigned int tmp;
 
 	/* First make sure we're connected. */
@@ -762,6 +786,7 @@ static int slcan_ioctl(struct tty_struct *tty, struct file *file,
 
 	switch (cmd) {
 	case SIOCGIFNAME:
+		/* TODO: sl->dev[0] Need to fix, require design changes */
 		tmp = strlen(sl->dev[0]->name) + 1;
 		if (copy_to_user((void __user *)arg, sl->dev[0]->name, tmp))
 			return -EFAULT;
@@ -807,28 +832,27 @@ static int __init slcan_init(void)
 		printk(KERN_INFO "slcan: xslcan multiplexer enabled ratio %d:1.\n",
 		       muxnetdevs);
 
-	slcan_channels = kzalloc(sizeof(struct slcan_channel *)*maxchannel,
-					GFP_KERNEL);
-	if (!slcan_channels)
+	slcan_devs = kzalloc(sizeof(struct slcan *)*maxchannel,GFP_KERNEL);
+	if (!slcan_devs)
 		return -ENOMEM;
 
 	/* Fill in our line protocol discipline, and register it */
 	status = tty_register_ldisc(N_SLCAN, &slc_ldisc);
 	if (status)  {
 		printk(KERN_ERR "slcan: can't register line discipline\n");
-		kfree(slcan_channels);
+		kfree(slcan_devs);
 	}
 	return status;
 }
 
 static void __exit slcan_exit(void)
 {
-	int i;
-	struct slcan_channel *sl;
+	int i, j;
+	struct slcan *sl;
 	unsigned long timeout = jiffies + HZ;
 	int busy = 0;
 
-	if (slcan_channels == NULL)
+	if (slcan_devs == NULL)
 		return;
 
 	/* First of all: check for active disciplines and hangup them.
@@ -840,7 +864,7 @@ static void __exit slcan_exit(void)
 		busy = 0;
 		for (i = 0; i < maxchannel; i++) {
 
-			sl = slcan_channels[i];
+			sl = slcan_devs[i];
 			if (!sl)
 				continue;
 			spin_lock_bh(&sl->lock);
@@ -856,10 +880,10 @@ static void __exit slcan_exit(void)
 	   phase */
 
 	for (i = 0; i < maxchannel; i++) {
-		sl = slcan_channels[i];
+		sl = slcan_devs[i];
 		if (!sl)
 			continue;
-		slcan_channels[i] = NULL;
+		slcan_devs[i] = NULL;
 
 		if (sl->tty) {
 			printk(KERN_ERR "%s: tty discipline still running\n",
@@ -871,12 +895,14 @@ static void __exit slcan_exit(void)
 		if (sl->dev[i] == NULL)
 			continue;
 
-		for (i = 0; i < muxnetdevs; i++)
-			unregister_netdev(sl->dev[i]);
+		for (j = 0; j < muxnetdevs; j++) {
+			if (sl->dev[j])
+				unregister_netdev(sl->dev[j]);
+		}
 	}
 
-	kfree(slcan_channels);
-	slcan_channels = NULL;
+	kfree(slcan_devs);
+	slcan_devs = NULL;
 
 	i = tty_unregister_ldisc(N_SLCAN);
 	if (i)
-- 
1.7.5.4

