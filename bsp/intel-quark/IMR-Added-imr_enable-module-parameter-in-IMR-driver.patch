From 61f23671e1b8dc2cc84b3ab9c7b9f944aad006dc Mon Sep 17 00:00:00 2001
From: "Ji, Kai" <kai.ji@intel.com>
Date: Wed, 1 Jul 2015 14:37:50 +0800
Subject: [PATCH 57/65] IMR:Added imr_enable module parameter in IMR driver.

The imr_enable module parameter offer the functionality
to NOT configure run-time kernel data IMR if imr_enable = 0.

Signed-off-by: Arumugam,Kamenee <kamenee.arumugam@intel.com>
Change-Id: I93f8ff7d3a7cf7228ad7c760643b4aa39fece930
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/5508
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Reviewed-by: Ji, Kai <kai.ji@intel.com>
Tested-by: Ji, Kai <kai.ji@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 arch/x86/platform/intel-quark/imr.c |   29 +++++++++++++++++++++--------
 1 files changed, 21 insertions(+), 8 deletions(-)

diff --git a/arch/x86/platform/intel-quark/imr.c b/arch/x86/platform/intel-quark/imr.c
index 77a3480..bf18608 100644
--- a/arch/x86/platform/intel-quark/imr.c
+++ b/arch/x86/platform/intel-quark/imr.c
@@ -84,6 +84,15 @@ module_param(imr_lock, int, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(imr_lock, "lock all IMRs (default=on)");
 
 /**
+ * module parameter
+ *
+ * If imr_enable is zero, do not setup kernel runtime data IMR.
+ */
+static int imr_enable = 1;
+module_param(imr_enable, int, S_IRUGO|S_IWUSR);
+MODULE_PARM_DESC(imr_enable, "enable IMRs for kernel runtime data(default=on)");
+
+/**
  * imr_is_enabled - true if an IMR is enabled false otherwise.
  *
  * Determines if an IMR is enabled based on address range and read/write
@@ -628,19 +637,22 @@ static void __init imr_fixup_memmap(struct imr_device *idev)
 	for (i = 0; i < idev->max_imr; i++)
 		imr_clear(i);
 
+
 	/*
 	 * Setup a locked IMR around the physical extent of the kernel
 	 * from the beginning of the .text secton to the end of the
 	 * .init_begin section as one physically contiguous block.
 	 */
-	ret = imr_add_range(base, size, IMR_CPU|IMR_ESRAM_FLUSH, 
-		IMR_CPU|IMR_ESRAM_FLUSH|IMR_CPU_SNOOP, true);
-	if (ret < 0) {
-		pr_err("unable to setup IMR for kernel: (%p - %p)\n",
-			&_text, &__init_begin);
-	} else {
-		pr_info("protecting kernel .text - .init_begin: %zu KiB (%p - %p)\n",
-			size / 1024, &_text, &__init_begin);
+	if(imr_enable) {
+		ret = imr_add_range(base, size, IMR_CPU|IMR_ESRAM_FLUSH,
+				IMR_CPU|IMR_ESRAM_FLUSH|IMR_CPU_SNOOP, true);
+		if (ret < 0) {
+			pr_err("unable to setup IMR for kernel: (%p - %p)\n",
+					&_text, &__init_begin);
+		} else {
+			pr_info("protecting kernel .text - .init_begin: %zu KiB (%p - %p)\n",
+					size / 1024, &_text, &__init_begin);
+		}
 	}
 
 }
@@ -672,6 +684,7 @@ static int __init imr_init(void)
 	ret = imr_debugfs_register(idev);
 	if (ret != 0)
 		pr_warn("debugfs register failed!\n");
+
 	imr_fixup_memmap(idev);
 
 	if (imr_lock) {
-- 
1.7.5.4

