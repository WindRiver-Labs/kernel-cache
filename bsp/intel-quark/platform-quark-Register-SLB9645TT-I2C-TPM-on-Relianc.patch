From 2bffb6bcfb04acc2f3f29bd973d2e8b2c6cba9ba Mon Sep 17 00:00:00 2001
From: Dan O'Donovan <dan@emutex.com>
Date: Fri, 6 Feb 2015 15:09:42 +0000
Subject: [PATCH 08/42] platform: quark: Register SLB9645TT I2C TPM on
 Reliance Creek platform

Register Infineon SLB9645TT I2C TPM on Reliance Creek platform variants.

Derived from Intel Quark Cross Hill platform init example.

Signed-off-by: Dan O'Donovan <dan@emutex.com>
Signed-off-by: Kartikey Parmar <kartikeyx.r.parmar@intel.com>
Change-Id: I4ac50bdaa1116035977cf0be78aee916b84589f5
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4640
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 .../intel-quark/intel_qrk_plat_reliance_creek.c    |   71 ++++++++++++++++++--
 1 files changed, 66 insertions(+), 5 deletions(-)

diff --git a/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c b/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
index 566ecf3..9aa6edf 100644
--- a/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
+++ b/drivers/platform/x86/intel-quark/intel_qrk_plat_reliance_creek.c
@@ -30,6 +30,7 @@
 #include <linux/spi/pxa2xx_spi.h>
 #include <linux/spi/spi.h>
 #include <linux/i2c/pcf857x.h>
+#include <linux/platform_data/tpm_i2c_infenion.h>
 
 #define DRIVER_NAME		"RelianceCreek"
 #define GPIO_RESTRICT_NAME_NC	"qrk-gpio-restrict-nc"
@@ -39,6 +40,11 @@
 #define GPIO_IRQ_SPI2UART_B_BUF		15
 #define GPIO_GPIO1_RS485_IRQ		9
 
+/* GPIO line used to reset SLB9645TT */
+#define GPIO_SLB9645TT_RESET          0
+/* GPIO line SLB9645TT interrupt are routed to */
+#define GPIO_SLB9645TT_INT            13
+
 static int nc_gpio_reg;
 static int sc_gpio_reg;
 
@@ -66,6 +72,10 @@ static struct pcf857x_platform_data pcf8574_platform_data_exp3 = {
 	.gpio_base = PCF8574_GPIO_BASE_OFFSET + 16,
 };
 
+struct tpm_i2c_infenion_platform_data slb9645tt_platform_data = {
+	.gpio_reset = GPIO_SLB9645TT_RESET,
+	.gpio_irq = GPIO_SLB9645TT_INT,
+};
 
 /******************************************************************************
  *                        Reliance Creek i2c clients
@@ -75,6 +85,7 @@ static struct pcf857x_platform_data pcf8574_platform_data_exp3 = {
 #define PCF8574_EXP1_ADDR			0x23
 #define PCF8574_EXP2_ADDR			0x21
 #define PCF8574_EXP3_ADDR			0x22
+#define SLB9645TT_ADDR				0x20
 
 static struct i2c_board_info probed_i2c_tmp75;
 static struct i2c_board_info probed_i2c_eeprom;
@@ -87,6 +98,9 @@ static struct i2c_board_info probed_i2c_pcf8574_exp2 = {
 static struct i2c_board_info probed_i2c_pcf8574_exp3 = {
 	.platform_data = &pcf8574_platform_data_exp3,
 };
+static struct i2c_board_info probed_slb9645tt = {
+	.platform_data = &slb9645tt_platform_data,
+};
 
 static const unsigned short tmp75_i2c_addr[] = {
 	TMP75_ADDR, I2C_CLIENT_END
@@ -103,6 +117,9 @@ static const unsigned short pcf8574_exp2_i2c_addr[] = {
 static const unsigned short pcf8574_exp3_i2c_addr[] = {
 	PCF8574_EXP3_ADDR, I2C_CLIENT_END
 };
+static const unsigned short slb9645tt_i2c_addr[] = {
+	SLB9645TT_ADDR, I2C_CLIENT_END
+};
 
 static int i2c_probe(struct i2c_adapter *adap, unsigned short addr)
 {
@@ -160,8 +177,23 @@ static struct gpio reserved_gpios[] = {
 		GPIOF_IN,
 		"sc16is741-int",
 	},
+	{
+		GPIO_SLB9645TT_RESET,
+		GPIOF_OUT_INIT_HIGH,
+		"slb96455tt-reset",
+	},
+	{
+		GPIO_SLB9645TT_INT,
+		GPIOF_IN,
+		"slb96455tt-int",
+	},
 };
 
+static int slb9645tt_i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	return gpio_get_value(GPIO_SLB9645TT_RESET);
+}
+
 /**
  * intel_qrk_gpio_restrict_probe
  *
@@ -172,14 +204,41 @@ static struct gpio reserved_gpios[] = {
  */
 static int intel_qrk_gpio_restrict_probe(void)
 {
+	struct i2c_adapter *i2c_adap;
+	struct i2c_client *slb9645tt;
 	int ret;
 
-	/* Reserve GPIOs for SPI device interrupts (never released) */
+	/* Reserve GPIOs for I2C/SPI device interrupts (never released) */
 	ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
 	if (ret) {
 		pr_err("%s: failed to request reserved gpios\n",
 		       __func__);
-		goto end;
+		return ret;
+	}
+
+	/*
+	 * Register on-board I2C devices
+	 */
+	probed_slb9645tt.irq = gpio_to_irq(GPIO_SLB9645TT_INT);
+
+	i2c_adap = i2c_get_adapter(0);
+	if (!i2c_adap) {
+		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
+			__func__);
+		ret = -EPROBE_DEFER;
+		goto err;
+	}
+
+	strlcpy(probed_slb9645tt.type, "slb9645tt", I2C_NAME_SIZE);
+	slb9645tt = i2c_new_probed_device(i2c_adap, &probed_slb9645tt,
+					  slb9645tt_i2c_addr,
+					  slb9645tt_i2c_probe);
+	i2c_put_adapter(i2c_adap);
+
+	if (!slb9645tt) {
+		pr_err("%s: can't probe slb9645tt\n", __func__);
+		ret = -ENODEV;
+		goto err;
 	}
 
 	/*
@@ -190,7 +249,7 @@ static int intel_qrk_gpio_restrict_probe(void)
 	if (ret) {
 		pr_err("%s: Failed to register sc16is752 SPI device\n",
 		       __func__);
-		goto end;
+		goto err;
 	}
 
 	spi_sc16is741_info.irq = gpio_to_irq(GPIO_GPIO1_RS485_IRQ);
@@ -198,10 +257,12 @@ static int intel_qrk_gpio_restrict_probe(void)
 	if (ret) {
 		pr_err("%s: Failed to register sc16is741 SPI device\n",
 		       __func__);
-		goto end;
+		goto err;
 	}
 
-end:
+	return 0;
+err:
+	gpio_free_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
 	return ret;
 }
 
-- 
1.7.5.4

