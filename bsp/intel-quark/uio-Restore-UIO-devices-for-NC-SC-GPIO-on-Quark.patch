From f9cbe41fc88b23eeb47f6902ed1a7a64dcff9bf9 Mon Sep 17 00:00:00 2001
From: William Rafferty <william.a.rafferty@intel.com>
Date: Mon, 10 Aug 2015 15:45:37 +0800
Subject: [PATCH 8/8] uio: Restore UIO devices for NC & SC GPIO on Quark

This patch adds conditional support for UIO interfaces for Quark
GPIO peripherals.

Please note that this interface in non-coherent with gpiolib.
Also building in any of the gpio drivers will prevent the use
of the UIO interface

RTC # 117039 & # 115953

Signed-off-by: William Rafferty <william.a.rafferty@intel.com>
Change-Id: I2042505ea3fe1b51c7d3e56eb0d0171e3d4c5904
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/6059
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Reviewed-by: Fung, Joshua <joshua.fung@intel.com>
Tested-by: Fung, Joshua <joshua.fung@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/gpio/gpio-sch.c          |   32 ++++++++++++++++++++++++++++
 drivers/mfd/intel_qrk_gip_gpio.c |   42 ++++++++++++++++++++++++++++++++++++++
 drivers/uio/Kconfig              |    9 ++++++++
 3 files changed, 83 insertions(+), 0 deletions(-)
 mode change 100644 => 100755 drivers/mfd/intel_qrk_gip_gpio.c
 mode change 100644 => 100755 drivers/uio/Kconfig

diff --git a/drivers/gpio/gpio-sch.c b/drivers/gpio/gpio-sch.c
index 7b245c9..058a5b7 100755
--- a/drivers/gpio/gpio-sch.c
+++ b/drivers/gpio/gpio-sch.c
@@ -31,6 +31,9 @@
 #include <linux/irq.h>
 
 #include <linux/gpio.h>
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+#include <linux/uio_driver.h>
+#endif
 
 #define GEN	0x00
 #define GIO	0x04
@@ -79,6 +82,9 @@ struct sch_gpio {
 	int irq_base;
 	bool irq_support;
 	DECLARE_BITMAP(wake_irqs, MAX_GPIO);
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	struct uio_info info;
+#endif
 };
 
 #define to_sch_gpio(gc)		container_of(gc, struct sch_gpio, chip)
@@ -530,6 +536,23 @@ static int sch_gpio_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, sch);
 
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	/* UIO */
+	sch->info.port[0].name = "gpio_regs";
+	sch->info.port[0].start = res->start;
+	sch->info.port[0].size = resource_size(res);
+	sch->info.port[0].porttype = UIO_PORT_X86;
+	sch->info.name = "sch_gpio";
+	sch->info.version = "0.0.1";
+
+	if (uio_register_device(&pdev->dev, &sch->info))
+		goto err_sch_uio_register;
+
+	pr_info("%s UIO port addr 0x%04x size %lu porttype %d\n",
+		__func__, (unsigned int)sch->info.port[0].start,
+		sch->info.port[0].size, sch->info.port[0].porttype);
+#endif
+
 	err = platform_device_register(&gpio_restrict_pdev);
 	if (err < 0)
 		goto err_sch_gpio_device_register;
@@ -537,6 +560,11 @@ static int sch_gpio_probe(struct platform_device *pdev)
 	return 0;
 
 err_sch_gpio_device_register:
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	uio_unregister_device(&sch->info);
+
+err_sch_uio_register:
+#endif
 err_sch_request_irq:
 	irq_free_descs(sch->irq_base, sch->chip.ngpio);
 
@@ -551,6 +579,10 @@ static int sch_gpio_remove(struct platform_device *pdev)
 	int ret;
 	struct sch_gpio *sch = platform_get_drvdata(pdev);
 
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	uio_unregister_device(&sch->info);
+#endif
+
 	if (sch->irq_support)
 		irq_free_descs(sch->irq_base, sch->chip.ngpio);
 
diff --git a/drivers/mfd/intel_qrk_gip_gpio.c b/drivers/mfd/intel_qrk_gip_gpio.c
old mode 100644
new mode 100755
index b34d459..077242b
--- a/drivers/mfd/intel_qrk_gip_gpio.c
+++ b/drivers/mfd/intel_qrk_gip_gpio.c
@@ -29,12 +29,20 @@
 #include <linux/platform_device.h>
 #include <linux/mfd/intel_qrk_gip.h>
 
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+#include <linux/uio_driver.h>
+#endif
+
 static void gpio_restrict_release(struct device *dev) {}
 static struct platform_device gpio_restrict_pdev = {
 	.name	= "gpio-restrict-sc",
 	.dev.release = gpio_restrict_release,
 };
 
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+struct uio_info *info;
+#endif
+
 /* The base GPIO number under GPIOLIB framework */
 #define INTEL_QRK_GIP_GPIO_BASE		8
 
@@ -494,6 +502,13 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 	int retval = 0;
 	resource_size_t start = 0, len = 0;
 
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	/* Get UIO memory */
+	info = kzalloc(sizeof(struct uio_info), GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+#endif
+
 	/* Determine the address of the GPIO area */
 	start = pci_resource_start(pdev, GIP_GPIO_BAR);
 	len = pci_resource_len(pdev, GIP_GPIO_BAR);
@@ -559,6 +574,25 @@ int intel_qrk_gpio_probe(struct pci_dev *pdev)
 		goto err_unregister_platform_device;
 	}
 
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	/* UIO */
+	info->mem[0].addr = start;
+	info->mem[0].internal_addr = reg_base;
+	info->mem[0].size = len;
+	info->mem[0].memtype = UIO_MEM_PHYS;
+	info->mem[0].name = "gpio_regs";
+	info->name = "gpio uio";
+	info->version = "0.0.1";
+
+	if (uio_register_device(&pdev->dev, info))
+		goto err_unregister_platform_device;
+
+	pr_info("%s UIO addr 0x%08x internal_addr 0x%08x size %lu memtype %d\n",
+		__func__, (unsigned int)info->mem[0].addr,
+		(unsigned int)info->mem[0].internal_addr, info->mem[0].size,
+		info->mem[0].memtype);
+#endif
+
 	igc->chip_types->chip.irq_mask = intel_qrk_gpio_irq_mask;
 	igc->chip_types->chip.irq_unmask = intel_qrk_gpio_irq_unmask;
 	igc->chip_types->chip.irq_set_type = intel_qrk_gpio_irq_type;
@@ -583,6 +617,9 @@ err_free_gpiochip:
 err_iounmap:
 	iounmap(reg_base);
 exit:
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	kfree(info);
+#endif
 	return retval;
 }
 
@@ -617,6 +654,11 @@ void intel_qrk_gpio_remove(struct pci_dev *pdev)
 	if (0 != gpiochip_remove(gc))
 		dev_err(&pdev->dev, "failed removing gpio_chip\n");
 
+#ifdef CONFIG_INTEL_QRK_GPIO_UIO
+	uio_unregister_device(info);
+	kfree(info);
+#endif
+
 	kfree(gc);
 	iounmap(reg_base);
 
diff --git a/drivers/uio/Kconfig b/drivers/uio/Kconfig
old mode 100644
new mode 100755
index 5a90914..383e459
--- a/drivers/uio/Kconfig
+++ b/drivers/uio/Kconfig
@@ -135,4 +135,13 @@ config UIO_MF624
 
 	  If you compile this as a module, it will be called uio_mf624.
 
+config INTEL_QRK_GPIO_UIO
+	bool "Intel Quark GPIO UIO Interface"
+	depends on (INTEL_QRK_GIP = 'm') && (GPIO_SCH = 'm')
+	help
+	  Adds a UIO interface to allow direct access to the GPIOs registers.
+	  This allows the user to bypass the default gpiolib sysfs method.
+	  Please note that this is non-coherent with gpiolib and should be used
+	  with the appropriate care and understanding.
+
 endif
-- 
1.7.5.4

