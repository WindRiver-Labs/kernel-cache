From bd93194f6438d5c4b51e4ed6a3365928333830f3 Mon Sep 17 00:00:00 2001
From: Mihaita Ivascu <mihaita.ivascu@windriver.com>
Date: Fri, 11 Sep 2015 14:16:22 +0300
Subject: [PATCH 6/6] Add support for ECS GWS-QX (ecs-gen2) ODM board.

Signed-off-by: Mihaita Ivascu <mihaita.ivascu@windriver.com>
Signed-off-by: Daniel Gheorghe <dgheorgh@windriver.com>
---
 drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c   |   10 +
 drivers/platform/x86/intel-quark/Makefile          |    1 +
 .../x86/intel-quark/intel_quark_board_data.c       |    4 +
 .../x86/intel-quark/intel_quark_platform_ecsgen2.c |  555 ++++++++++++++++++++
 4 files changed, 570 insertions(+), 0 deletions(-)
 create mode 100644 drivers/platform/x86/intel-quark/intel_quark_platform_ecsgen2.c

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 3c46bd0..1837661 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -222,6 +222,16 @@ static struct stmmac_pci_dmi_data quark_pci_dmi_data[] = {
 		.func = 7,
 		.phy_addr = 1,
 	},
+	{
+		.name = "EcsGen2",
+		.func = 6,
+		.phy_addr = 1,
+	},
+	{
+		.name = "EcsGen2",
+		.func = 7,
+		.phy_addr = 1,
+	},
 	{}
 };
 
diff --git a/drivers/platform/x86/intel-quark/Makefile b/drivers/platform/x86/intel-quark/Makefile
index bb76216..5c09e08 100644
--- a/drivers/platform/x86/intel-quark/Makefile
+++ b/drivers/platform/x86/intel-quark/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_clanton_peak.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_clanton_hill.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_kips_bay.o
 obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_aiot_x1000.o
+obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_quark_platform_ecsgen2.o
 # To add Reliance Creek platform support, kindly enable below line.
 # obj-$(CONFIG_X86_INTEL_QUARK)			+= intel_qrk_plat_reliance_creek.o
 obj-$(CONFIG_INTEL_QRK_J1708) += intel_qrk_j1708.o
diff --git a/drivers/platform/x86/intel-quark/intel_quark_board_data.c b/drivers/platform/x86/intel-quark/intel_quark_board_data.c
index abf7e67..4b8f1cb 100644
--- a/drivers/platform/x86/intel-quark/intel_quark_board_data.c
+++ b/drivers/platform/x86/intel-quark/intel_quark_board_data.c
@@ -141,6 +141,10 @@ static struct platform_device bsp_data[] = {
 		.name	= "AiotX1000",
 		.id	= -1,
 	},
+	{
+		.name	= "EcsGen2",
+		.id	= -1,
+	},
 };
 
 /**
diff --git a/drivers/platform/x86/intel-quark/intel_quark_platform_ecsgen2.c b/drivers/platform/x86/intel-quark/intel_quark_platform_ecsgen2.c
new file mode 100644
index 0000000..9cd6c49
--- /dev/null
+++ b/drivers/platform/x86/intel-quark/intel_quark_platform_ecsgen2.c
@@ -0,0 +1,555 @@
+/*
+ *
+ * Copyright(c) 2013 Intel Corporation.
+ * Copyright (C) 2014 Wind River Systems
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Contact Information:
+ * Wind River Systems, Inc
+ */
+/*
+ * ECS GEN2 board entry point
+ *
+ * Author : Adrian Bradianu <adrian.bradianu@windriver.com>
+ */
+
+#include <linux/errno.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/platform_data/at24.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/module.h>
+#include <linux/mfd/cy8c9540a.h>
+#include <linux/mfd/intel_qrk_gip_pdata.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mtd/physmap.h>
+#include <linux/platform_device.h>
+#include <linux/printk.h>
+#include <linux/spi/pxa2xx_spi.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/flash.h>
+#include <linux/delay.h>
+
+#define DRIVER_NAME 		"EcsGen2"
+#define GPIO_RESTRICT_NAME_SC 	"qrk-gpio-restrict-sc"
+#define GPIO_RESTRICT_NAME_NC 	"qrk-gpio-restrict-nc"
+#define LPC_SCH_SPINAME		"spi-lpc-sch"
+
+/* GPIO line used to detect the LSB of the first Cypress i2c address (U19) */
+#define GPIO_CYPRESS_0_A0		7
+/* GPIO line used to detect the LSB of the second Cypress i2c address (U1) */
+#define GPIO_CYPRESS_1_A0		11
+/* GPIO line Cypress interrupts are routed to (in S0 power state) */
+#define GPIO_CYPRESS_INT_S0		13
+/* GPIO line Cypress interrupts are routed to (in S3 power state) */
+#define GPIO_CYPRESS_INT_S3		2
+
+/* GPIO line used for LDAC on DAC7564 */
+#define GPIO_DAC7564_LDAC		9
+
+/* Cypress i2c address depending on A0 value */
+#define CYPRESS_ADDR_A0_1		0x20
+#define CYPRESS_ADDR_A0_0		0x21
+#define EEPROM_ADDR_A0_1		0x50
+#define EEPROM_ADDR_A0_0		0x51
+
+static int nc_gpio_reg;
+static int sc_gpio_reg;
+
+/******************************************************************************
+ *                   Cypress I/O Expander Platform Data
+ ******************************************************************************/
+static struct cy8c9540a_pdata cy8c9540a_0_platform_data = {
+	.por_default		= {
+		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	/* Output */
+		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* Int mask */
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* PWM */
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Inversion */
+		0xe0, 0xe0, 0xff, 0xf3, 0x00, 0xff, 0xff, 0xff, /* Direction */
+		0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,	/* P0 drive */
+		0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,	/* P1 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P2 drive */
+		0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,	/* P3 drive */
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,	/* P4 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P5 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P6 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P7 drive */
+		0x00, 0xff, 0x00,				/* PWM0 */
+		0x00, 0xff, 0x00,				/* PWM1 */
+		0x00, 0xff, 0x00,				/* PWM2 */
+		0x00, 0xff, 0x00,				/* PWM3 */
+		0x00, 0xff, 0x00,				/* PWM4 */
+		0x00, 0xff, 0x00,				/* PWM5 */
+		0x00, 0xff, 0x00,				/* PWM6 */
+		0x00, 0xff, 0x00,				/* PWM7 */
+		0x00, 0xff, 0x00,				/* PWM8 */
+		0x00, 0xff, 0x00,				/* PWM9 */
+		0x00, 0xff, 0x00,				/* PWM10 */
+		0x00, 0xff, 0x00,				/* PWM11 */
+		0x00, 0xff, 0x00,				/* PWM12 */
+		0x00, 0xff, 0x00,				/* PWM13 */
+		0x00, 0xff, 0x00,				/* PWM14 */
+		0x00, 0xff, 0x00,				/* PWM15 */
+		0xff,						/* PWM CLKdiv */
+		0x02,						/* EEPROM en */
+		0x00						/* CRC */
+	},
+	.pwm2gpio_mapping	= {
+		CY8C9540A_PWM_UNUSED,
+		3,
+		CY8C9540A_PWM_UNUSED,
+		2,
+		9,
+		1,
+		8,
+		0,
+	},
+	.gpio_base		= 16,
+	.pwm_base		= 0,
+	.irq_base		= 64,
+};
+
+/* P0, P1 inputs, P3, P4 outputs */
+static struct cy8c9540a_pdata cy8c9540a_1_platform_data = {
+	.por_default		= {
+		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	/* Output */
+		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /* Int mask */
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* PWM */
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Inversion */
+		0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, /* Directions */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P0 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P1 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P2 drive */
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P3 drive */
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P4 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P5 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P6 drive */
+		0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* P7 drive */
+		0x00, 0xff, 0x00,				/* PWM0 */
+		0x00, 0xff, 0x00,				/* PWM1 */
+		0x00, 0xff, 0x00,				/* PWM2 */
+		0x00, 0xff, 0x00,				/* PWM3 */
+		0x00, 0xff, 0x00,				/* PWM4 */
+		0x00, 0xff, 0x00,				/* PWM5 */
+		0x00, 0xff, 0x00,				/* PWM6 */
+		0x00, 0xff, 0x00,				/* PWM7 */
+		0x00, 0xff, 0x00,				/* PWM8 */
+		0x00, 0xff, 0x00,				/* PWM9 */
+		0x00, 0xff, 0x00,				/* PWM10 */
+        	0x00, 0xff, 0x00,				/* PWM11 */
+		0x00, 0xff, 0x00,				/* PWM12 */
+		0x00, 0xff, 0x00,				/* PWM13 */
+		0x00, 0xff, 0x00,				/* PWM14 */
+		0x00, 0xff, 0x00,				/* PWM15 */
+		0xff,						/* PWM CLKdiv */
+		0x02,						/* EEPROM en */
+		0x00						/* CRC */
+	},
+	.pwm2gpio_mapping	= {
+		0,
+		1,
+		2,
+		3,
+		4,
+		5,
+		6,
+		7,
+	},
+	.gpio_base		= 56,
+	.pwm_base		= 8,
+	.irq_base		= 104,
+};
+
+/* Cypress expander requires i2c master to operate @100kHz 'standard mode' */
+static struct intel_qrk_gip_pdata gip_pdata = {
+	.i2c_std_mode = 1,
+};
+static struct intel_qrk_gip_pdata *ecsgen2_gip_get_pdata(void)
+{
+	return &gip_pdata;
+}
+
+/******************************************************************************
+ *             Analog Devices AD7298 SPI Device Platform Data
+ ******************************************************************************/
+#include "linux/platform_data/ad7298.h"
+
+/* Maximum input voltage allowed for each ADC input, in milliVolts */
+#define AD7298_MAX_EXT_VIN 5000
+
+static const struct ad7298_platform_data ad7298_platform_data = {
+	.ext_ref = false,
+	.ext_vin_max = { AD7298_MAX_EXT_VIN, AD7298_MAX_EXT_VIN,
+		AD7298_MAX_EXT_VIN, AD7298_MAX_EXT_VIN,
+		AD7298_MAX_EXT_VIN, AD7298_MAX_EXT_VIN,
+		AD7298_MAX_EXT_VIN, AD7298_MAX_EXT_VIN }
+};
+
+static struct at24_platform_data at24_platform_data = {
+	.byte_len = (11 * 1024),
+	.page_size = 1,
+	.flags = AT24_FLAG_ADDR16,
+};
+
+/******************************************************************************
+ *             Texas Instruments DAC7564 SPI Device Platform Data
+ ******************************************************************************/
+#include "linux/platform_data/dac7564.h"
+
+static struct dac7564_platform_data dac7564_platform_data = {
+	.address = 0,
+	.int_vref = false
+};
+
+/******************************************************************************
+ *                        i2c clients
+ ******************************************************************************/
+static struct i2c_board_info probed_i2c_cypress_0 = {
+	.platform_data = &cy8c9540a_0_platform_data,
+};
+
+static struct i2c_board_info probed_i2c_cypress_1 = {
+	.platform_data = &cy8c9540a_1_platform_data,
+};
+
+static struct i2c_board_info probed_i2c_eeprom_0 = {
+	.platform_data = &at24_platform_data,
+};
+
+static struct i2c_board_info probed_i2c_eeprom_1 = {
+	.platform_data = &at24_platform_data,
+};
+
+static struct i2c_adapter *i2c_adap;
+static const unsigned short cypress_0_i2c_addr[] =
+	{ CYPRESS_ADDR_A0_1, CYPRESS_ADDR_A0_0, I2C_CLIENT_END };
+static const unsigned short cypress_1_i2c_addr[] =
+	{ CYPRESS_ADDR_A0_0, CYPRESS_ADDR_A0_1, I2C_CLIENT_END };
+static const unsigned short eeprom_0_i2c_addr[] =
+	{ EEPROM_ADDR_A0_1, EEPROM_ADDR_A0_0, I2C_CLIENT_END };
+static const unsigned short eeprom_1_i2c_addr[] =
+	{ EEPROM_ADDR_A0_0, EEPROM_ADDR_A0_1, I2C_CLIENT_END };
+
+/******************************************************************************
+ *                 Intel Quark SPI Controller Data
+ ******************************************************************************/
+static struct pxa2xx_spi_chip qrk_ffrd_spi_0_cs_0 = {
+	.gpio_cs = 8,
+};
+
+static struct pxa2xx_spi_chip qrk_ffrd_spi_1_cs_0 = {
+	.gpio_cs = 10,
+};
+
+#define LPC_SCH_SPI_BUS_ID 0x03
+
+/* TODO: extract this data from layout.conf encoded in flash */
+struct mtd_partition ecsgen2_ilb_partitions [] = {
+	{
+		.name		= "grub",
+		.size		= 0x80400,
+		.offset		= 0,
+	},
+	{
+		.name		= "grub.conf",
+		.size		= 0xA00,
+		.offset		= 0x80400,
+	},
+	{
+		.name		= "layout.conf",
+		.size		= 4096,
+		.offset		= 0x4FF000,
+	},
+	{
+		.name		= "sketch",
+		.size		= 0x40000,
+		.offset		= 0x750000,
+	},
+	{
+		.name		= "raw",
+		.size		= 8192000,
+		.offset		= 0,
+
+	},
+};
+
+static struct flash_platform_data ecsgen2_ilb_flash = {
+	.type = "s25fl064k",
+	.parts = ecsgen2_ilb_partitions,
+	.nr_parts = ARRAY_SIZE(ecsgen2_ilb_partitions),
+};
+
+static struct spi_board_info spi_onboard_devs[] = {
+	{
+		.modalias = "m25p80",
+		.platform_data = &ecsgen2_ilb_flash,
+		.bus_num = LPC_SCH_SPI_BUS_ID,
+		.chip_select = 0,
+	},
+	{
+		.modalias = "ad7298",
+		.max_speed_hz = 5000000,
+		.platform_data = &ad7298_platform_data,
+		.mode = SPI_MODE_2,
+		.bus_num = 0,
+		.chip_select = 0,
+		.controller_data = &qrk_ffrd_spi_0_cs_0,
+	},
+	{
+		.modalias = "dac7564",
+		.max_speed_hz = 50000000,
+                .platform_data = &dac7564_platform_data,
+                .mode = SPI_MODE_2,
+		.bus_num = 1,
+                .chip_select = 0,
+                .controller_data = &qrk_ffrd_spi_1_cs_0,
+	},
+};
+
+static struct gpio reserved_gpios[] = {
+	{
+		GPIO_CYPRESS_0_A0,
+		GPIOF_IN,
+		"cy8c9540a-a0",
+	},
+	{
+		GPIO_CYPRESS_1_A0,
+		GPIOF_IN,
+		"cy8c9540a-a0",
+	},
+	{
+		GPIO_CYPRESS_INT_S0,
+		GPIOF_IN,
+		"cy8c9540a-int-s0",
+	},
+	{
+		GPIO_CYPRESS_INT_S3,
+		GPIOF_IN,
+		"cy8c9540a-int-s3",
+	},
+        {
+		GPIO_DAC7564_LDAC,
+		GPIOF_OUT_INIT_LOW,
+		"dac7564-ldac",
+	},
+};
+
+static int eeprom_0_i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	if (gpio_get_value(GPIO_CYPRESS_0_A0) && EEPROM_ADDR_A0_1 == addr)
+		return 1;
+	if (!gpio_get_value(GPIO_CYPRESS_0_A0) && EEPROM_ADDR_A0_0 == addr)
+		return 1;
+	return 0;
+}
+
+static int eeprom_1_i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	if (gpio_get_value(GPIO_CYPRESS_1_A0) && EEPROM_ADDR_A0_1 == addr)
+		return 1;
+	if (!gpio_get_value(GPIO_CYPRESS_1_A0) && EEPROM_ADDR_A0_0 == addr)
+		return 1;
+	return 0;
+}
+
+static int cypress_0_i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	if (gpio_get_value(GPIO_CYPRESS_0_A0) && CYPRESS_ADDR_A0_1 == addr)
+		return 1;
+	if (!gpio_get_value(GPIO_CYPRESS_0_A0) && CYPRESS_ADDR_A0_0 == addr)
+		return 1;
+	return 0;
+}
+
+static int cypress_1_i2c_probe(struct i2c_adapter *adap, unsigned short addr)
+{
+	if (gpio_get_value(GPIO_CYPRESS_1_A0) && CYPRESS_ADDR_A0_1 == addr)
+		return 1;
+	if (!gpio_get_value(GPIO_CYPRESS_1_A0) && CYPRESS_ADDR_A0_0 == addr)
+		return 1;
+	return 0;
+}
+
+/**
+ * intel_qrk_spi_add_onboard_devs
+ *
+ * @return 0 on success or standard errnos on failure
+ *
+ * Registers onboard SPI device(s) present on the Izmir platform
+ */
+static int intel_qrk_spi_add_onboard_devs(void)
+{
+
+	return spi_register_board_info(spi_onboard_devs,
+			ARRAY_SIZE(spi_onboard_devs));
+}
+
+
+/**
+ * intel_qrk_gpio_restrict_probe
+ *
+ * Register devices that depend on GPIOs.
+ * Note this function makes extensive use of the probe deferral mechanism:
+ * gpio_request() for a GPIO that is not yet available returns
+ * -EPROBE_DEFER.
+ */
+static int intel_qrk_gpio_restrict_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct i2c_client *cypress_0 = NULL, *cypress_1 = NULL;
+	struct i2c_client *eeprom_0 = NULL, *eeprom_1 = NULL;
+	static int gpios_done;
+
+	if (!gpios_done) {
+		ret = gpio_request_array(reserved_gpios, ARRAY_SIZE(reserved_gpios));
+		if (ret) {
+		  pr_info("%s: gpio drivers not ready yet. Deferring..\n", __func__);
+		  ret = -EPROBE_DEFER;
+		  goto end;
+		}
+
+		probed_i2c_cypress_0.irq = gpio_to_irq(GPIO_CYPRESS_INT_S0);
+		probed_i2c_cypress_1.irq = gpio_to_irq(GPIO_CYPRESS_INT_S0);
+
+		gpios_done = 1;
+	}
+
+	i2c_adap = i2c_get_adapter(0);
+	if (NULL == i2c_adap) {
+		ret = -ENODEV;
+		goto end;
+	}
+	strlcpy(probed_i2c_cypress_0.type, "cy8c9540a", I2C_NAME_SIZE);
+	cypress_0 = i2c_new_probed_device(i2c_adap, &probed_i2c_cypress_0,
+				    cypress_0_i2c_addr, cypress_0_i2c_probe);
+	strlcpy(probed_i2c_cypress_1.type, "cy8c9540a", I2C_NAME_SIZE);
+	cypress_1 = i2c_new_probed_device(i2c_adap, &probed_i2c_cypress_1,
+				    cypress_1_i2c_addr, cypress_1_i2c_probe);
+	strlcpy(probed_i2c_eeprom_0.type, "at24", I2C_NAME_SIZE);
+	eeprom_0 = i2c_new_probed_device(i2c_adap, &probed_i2c_eeprom_0,
+				    eeprom_0_i2c_addr, eeprom_0_i2c_probe);
+	strlcpy(probed_i2c_eeprom_1.type, "at24", I2C_NAME_SIZE);
+	eeprom_1 = i2c_new_probed_device(i2c_adap, &probed_i2c_eeprom_1,
+				    eeprom_1_i2c_addr, eeprom_1_i2c_probe);
+	i2c_put_adapter(i2c_adap);
+
+	if (NULL == cypress_0 || NULL == cypress_1 ||
+	    NULL == eeprom_0 || NULL == eeprom_1) {
+		pr_err("%s: can't probe Cypress Expander\n", __func__);
+		ret = -ENODEV;
+		goto end;
+	}
+
+end:
+	return ret;
+}
+
+static int intel_qrk_gpio_restrict_probe_sc(struct platform_device *pdev)
+{
+	static int spi_done;
+	
+	if (!spi_done) {
+		int ret = intel_qrk_spi_add_onboard_devs();
+		if (ret) {
+			pr_err("%s: can't add on-board spi devices\n", __func__);
+			return ret;
+		}
+
+		spi_done = 1;
+	}
+
+	sc_gpio_reg = 1;
+	if (sc_gpio_reg && nc_gpio_reg)
+		return intel_qrk_gpio_restrict_probe(pdev);
+
+	return 0;
+}
+
+static int intel_qrk_gpio_restrict_probe_nc(struct platform_device *pdev)
+{
+	nc_gpio_reg = 1;
+	if (sc_gpio_reg && nc_gpio_reg)
+		return intel_qrk_gpio_restrict_probe(pdev);
+
+	return 0;
+}
+
+static struct platform_driver gpio_restrict_pdriver_sc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_SC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_sc,
+};
+
+static struct platform_driver gpio_restrict_pdriver_nc = {
+	.driver		= {
+		.name	= GPIO_RESTRICT_NAME_NC,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_gpio_restrict_probe_nc,
+};
+
+static int intel_qrk_plat_ecsgen2_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	/* Assign GIP driver handle for board-specific settings */
+	intel_qrk_gip_get_pdata = ecsgen2_gip_get_pdata;
+
+	i2c_adap = i2c_get_adapter(0);
+	if (NULL == i2c_adap) {
+		pr_info("%s: i2c adapter not ready yet. Deferring..\n",
+			__func__);
+		ret = -EPROBE_DEFER;
+		goto end;
+	}
+
+	/* sc gpio */
+	ret = platform_driver_register(&gpio_restrict_pdriver_sc);
+	if (ret)
+		goto end;
+
+	/* nc gpio */
+	ret = platform_driver_register(&gpio_restrict_pdriver_nc);
+	if (ret)
+		goto end;
+
+end:
+	return ret;
+}
+
+static int intel_qrk_plat_ecsgen2_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver qrk_ecsgen2_driver = {
+	.driver		= {
+		.name	= DRIVER_NAME,
+		.owner	= THIS_MODULE,
+	},
+	.probe		= intel_qrk_plat_ecsgen2_probe,
+	.remove		= intel_qrk_plat_ecsgen2_remove,
+};
+
+module_platform_driver(qrk_ecsgen2_driver);
+
+MODULE_AUTHOR("Adrian Bradianu <adrian.bradianu@windriver.com>");
+MODULE_DESCRIPTION("ECS GEN2 BSP Data");
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_ALIAS("platform:"DRIVER_NAME);
+
-- 
1.7.5.4

