From 6f8c202f2fa20568f3dd94ce936b17b502de0abe Mon Sep 17 00:00:00 2001
From: Bogdan Pricop <bogdan.pricop@emutex.com>
Date: Sat, 25 Oct 2014 16:03:34 +0100
Subject: [PATCH 32/42] USB-Device pch_udc: Fix checkpatch.pl warnings

* Fix all errors/warnings reported by checkpatch.pl script except "Avoid
  CamelCase"; the USB standard uses CamelCase notation, therefore it should
  be accepted in code because it is easier to map the code on standard when
  both use the same names.
(cherry picked from commit 4d04da1e5d5e478ac84db9752873f9e63f32d622)

Conflicts:

	drivers/usb/gadget/pch_udc.c

Signed-off-by: Dheeraj Jamwal <dheerajx.s.jamwal@intel.com>
Change-Id: Ia37b0aa8811ae32474ad8f04b956269d8c93bcd2
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/4783
Reviewed-by: Ahmad, Josef <josef.ahmad@intel.com>
Tested-by: Tan, Raymond <raymond.tan@intel.com>
Reviewed-by: Tan, Raymond <raymond.tan@intel.com>
Signed-off-by: Pengyu Ma <pengyu.ma@windriver.com>
---
 drivers/usb/gadget/pch_udc.c |   34 ++++++++++++++++------------------
 1 files changed, 16 insertions(+), 18 deletions(-)

diff --git a/drivers/usb/gadget/pch_udc.c b/drivers/usb/gadget/pch_udc.c
index 05ede4e..6108dcc 100644
--- a/drivers/usb/gadget/pch_udc.c
+++ b/drivers/usb/gadget/pch_udc.c
@@ -1830,7 +1830,7 @@ static struct usb_request *pch_udc_alloc_request(struct usb_ep *usbep,
 		return NULL;
 	ep = container_of(usbep, struct pch_udc_ep, ep);
 	dev = ep->dev;
-	req = kzalloc(sizeof *req, gfp);
+	req = kzalloc(sizeof(*req), gfp);
 	if (!req)
 		return NULL;
 	req->req.dma = DMA_ADDR_INVALID;
@@ -2152,7 +2152,7 @@ static void pch_udc_init_setup_buff(struct pch_udc_stp_dma_desc *td_stp)
 	if (!td_stp)
 		return;
 	td_stp->reserved = ++pky_marker;
-	memset(&td_stp->request, 0xFF, sizeof td_stp->request);
+	memset(&td_stp->request, 0xFF, sizeof(td_stp->request));
 	td_stp->status = PCH_UDC_BS_HST_RDY;
 }
 
@@ -2213,8 +2213,8 @@ static void pch_udc_complete_transfer(struct pch_udc_ep *ep)
 		return;
 	if ((req->td_data_last->status & PCH_UDC_RXTX_STS) !=
 	     PCH_UDC_RTS_SUCC) {
-		dev_err(&dev->pdev->dev, "Invalid RXTX status (0x%08x) "
-			"epstatus=0x%08x\n",
+		dev_err(&dev->pdev->dev,
+			"Invalid RXTX status (0x%08x) epstatus=0x%08x\n",
 		       (req->td_data_last->status & PCH_UDC_RXTX_STS),
 		       (int)(ep->epsts));
 		return;
@@ -2262,8 +2262,8 @@ static void pch_udc_complete_receiver(struct pch_udc_ep *ep)
 
 	while (1) {
 		if ((td->status & PCH_UDC_RXTX_STS) != PCH_UDC_RTS_SUCC) {
-			dev_err(&dev->pdev->dev, "Invalid RXTX status=0x%08x "
-				"epstatus=0x%08x\n",
+			dev_err(&dev->pdev->dev,
+				"Invalid RXTX status=0x%08x epstatus=0x%08x\n",
 				(req->td_data->status & PCH_UDC_RXTX_STS),
 				(int)(ep->epsts));
 			return;
@@ -2711,7 +2711,7 @@ static void pch_udc_svc_intf_interrupt(struct pch_udc_dev *dev)
 							 UDC_DEVSTS_ALT_SHIFT;
 	dev->set_cfg_not_acked = 1;
 	/* Construct the usb request for gadget driver and inform it */
-	memset(&dev->setup_data, 0 , sizeof dev->setup_data);
+	memset(&dev->setup_data, 0 , sizeof(dev->setup_data));
 	dev->setup_data.bRequest = USB_REQ_SET_INTERFACE;
 	dev->setup_data.bRequestType = USB_RECIP_INTERFACE;
 	dev->setup_data.wValue = cpu_to_le16(dev->cfg_data.cur_alt);
@@ -2750,7 +2750,7 @@ static void pch_udc_svc_cfg_interrupt(struct pch_udc_dev *dev)
 	dev->cfg_data.cur_cfg = (dev_stat & UDC_DEVSTS_CFG_MASK) >>
 				UDC_DEVSTS_CFG_SHIFT;
 	/* make usb request for gadget driver */
-	memset(&dev->setup_data, 0 , sizeof dev->setup_data);
+	memset(&dev->setup_data, 0 , sizeof(dev->setup_data));
 	dev->setup_data.bRequest = USB_REQ_SET_CONFIGURATION;
 	dev->setup_data.wValue = cpu_to_le16(dev->cfg_data.cur_cfg);
 	/* program the NE registers */
@@ -2889,24 +2889,23 @@ static irqreturn_t pch_udc_isr(int irq, void *pdev)
 				unmask_pvm(dev->pdev);
 				return IRQ_HANDLED;
 			}
-		if (dev_intr){
+		if (dev_intr) {
 			/* Clear device interrupts */
 			pch_udc_write_device_interrupts(dev, dev_intr);
 			events = 1;
 		}
-		if (ep_intr){
+		if (ep_intr) {
 			/* Clear ep interrupts */
 			pch_udc_write_ep_interrupts(dev, ep_intr);
 			events = 1;
 		}
-		if (!dev_intr && !ep_intr){
+		if (!dev_intr && !ep_intr) {
 			unmask_pvm(dev->pdev);
 			return IRQ_NONE;
 		}
 		spin_lock(&dev->lock);
-		if (dev_intr){
+		if (dev_intr)
 			pch_udc_dev_isr(dev, dev_intr);
-		}
 		if (ep_intr) {
 			pch_udc_read_all_epstatus(dev, ep_intr);
 			/* Process Control In interrupts, if present */
@@ -2933,7 +2932,7 @@ static irqreturn_t pch_udc_isr(int irq, void *pdev)
 						i - UDC_EPINT_OUT_SHIFT);
 		}
 		spin_unlock(&dev->lock);
-	}while(events == 1);
+	} while (events == 1);
 	unmask_pvm(dev->pdev);
 
 	return IRQ_HANDLED;
@@ -2985,7 +2984,7 @@ static void pch_udc_pcd_reinit(struct pch_udc_dev *dev)
 	INIT_LIST_HEAD(&dev->gadget.ep_list);
 
 	/* Initialize the endpoints structures */
-	memset(dev->ep, 0, sizeof dev->ep);
+	memset(dev->ep, 0, sizeof(dev->ep));
 	for (i = 0; i < PCH_UDC_EP_NUM; i++) {
 		struct pch_udc_ep *ep = &dev->ep[i];
 		ep->dev = dev;
@@ -3200,7 +3199,7 @@ static int pch_udc_probe(struct pci_dev *pdev,
 	struct pch_udc_dev	*dev;
 
 	/* init */
-	dev = kzalloc(sizeof *dev, GFP_KERNEL);
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
 	if (!dev) {
 		pr_err("%s: no memory for device structure\n", __func__);
 		return -ENOMEM;
@@ -3266,9 +3265,8 @@ static int pch_udc_probe(struct pci_dev *pdev,
 	}
 
 	pci_set_master(pdev);
-	if (enable_msi == 1){
+	if (enable_msi == 1)
 		pci_enable_msi(pdev);
-	}
 	dev->phy_err_cnt = 0;
 	phy_err_backoff_end = jiffies;
 	phy_err_time_jiffies  = msecs_to_jiffies(phy_err_time);
-- 
1.7.5.4

