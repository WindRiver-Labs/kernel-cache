From a5c7be366b275c62ab9e211a974220a2626c6caa Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Mon, 16 Jan 2012 14:11:52 -0800
Subject: [PATCH 210/236] NET: octeon_ethernet: Fix handling of fragmented SKBs.

Source: Cavium SDK 2.3-427

The number of fragments was being miscalculated.

Signed-off-by: David Daney <david.daney@cavium.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/net/octeon/ethernet-xmit.c |   16 +++++++++-------
 1 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/drivers/net/octeon/ethernet-xmit.c b/drivers/net/octeon/ethernet-xmit.c
index d31d26d..09ffc2e 100644
--- a/drivers/net/octeon/ethernet-xmit.c
+++ b/drivers/net/octeon/ethernet-xmit.c
@@ -116,14 +116,16 @@ CVM_OCT_XMIT
 		skb_walk_frags(skb, skb_tmp)
 			frag_count++;
 	/*
-	 * We have space for 12 segment pointers, If there will be more
-	 * than that, we must linearize.
+	 * We have space for 12 segment pointers, If there will be
+	 * more than that, we must linearize.  The count is: 1 (base
+	 * SKB) + frag_count + nr_frags.
 	 */
 	if (unlikely(skb_shinfo(skb)->nr_frags + frag_count > 11)) {
 		if (unlikely(__skb_linearize(skb))) {
 			queue_type = QUEUE_DROP;
 			goto skip_xmit;
 		}
+		frag_count = 0;
 	}
 
 #ifndef CVM_OCT_LOCKLESS
@@ -186,20 +188,20 @@ CVM_OCT_XMIT
 		hw_buffer.s.pool = 0;
 		hw_buffer.s.size = skb_headlen(skb);
 		hw_buffer_list[0] = hw_buffer.u64;
-		for (i = 0; i < skb_shinfo(skb)->nr_frags; i++) {
-			struct skb_frag_struct *fs = skb_shinfo(skb)->frags + i;
+		for (i = 1; i <= skb_shinfo(skb)->nr_frags; i++) {
+			struct skb_frag_struct *fs = skb_shinfo(skb)->frags + i - 1;
 			hw_buffer.s.addr = virt_to_phys((u8 *)page_address(fs->page) + fs->page_offset);
 			hw_buffer.s.size = fs->size;
-			hw_buffer_list[i + 1] = hw_buffer.u64;
+			hw_buffer_list[i] = hw_buffer.u64;
 		}
 		skb_walk_frags(skb, skb_tmp) {
 			hw_buffer.s.addr = virt_to_phys(skb_tmp->data);
 			hw_buffer.s.size = skb_tmp->len;
-			hw_buffer_list[i + 1] = hw_buffer.u64;
+			hw_buffer_list[i] = hw_buffer.u64;
 			i++;
 		}
 		hw_buffer.s.addr = virt_to_phys(hw_buffer_list);
-		hw_buffer.s.size = skb_shinfo(skb)->nr_frags + 1;
+		hw_buffer.s.size = i;
 		pko_command.s.segs = hw_buffer.s.size;
 		pko_command.s.gather = 1;
 		goto dont_put_skbuff_in_hw;
-- 
1.7.0

