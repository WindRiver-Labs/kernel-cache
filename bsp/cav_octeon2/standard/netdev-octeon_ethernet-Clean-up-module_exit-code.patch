From 6f5bfe3ef9d73cc11279635a83b3f27c511d3bcb Mon Sep 17 00:00:00 2001
From: David Daney <ddaney@caviumnetworks.com>
Date: Mon, 18 Apr 2011 14:53:33 -0700
Subject: [PATCH 061/236] netdev: octeon_ethernet: Clean up module_exit code

Source: Cavium SDK 2.1.0-407

Split cvm_oct_rx_shutdown in to two parts. One run before the
unregister_netdev() and one after.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Integrated-by: Phil Staub <Phil.Staub@windriver.com>
---
 drivers/net/octeon/ethernet-mem.h |    2 +
 drivers/net/octeon/ethernet-rx.c  |  132 +++++++++++++++++++------------------
 drivers/net/octeon/ethernet-rx.h  |    3 +-
 3 files changed, 72 insertions(+), 65 deletions(-)

diff --git a/drivers/net/octeon/ethernet-mem.h b/drivers/net/octeon/ethernet-mem.h
index 713f2ed..89cdda4 100644
--- a/drivers/net/octeon/ethernet-mem.h
+++ b/drivers/net/octeon/ethernet-mem.h
@@ -27,3 +27,5 @@
 
 int cvm_oct_mem_fill_fpa(int pool, int size, int elements);
 void cvm_oct_mem_empty_fpa(int pool, int size, int elements);
+void cvm_oct_mem_cleanup(void);
+void cvm_oct_mem_uninit(void);
diff --git a/drivers/net/octeon/ethernet-rx.c b/drivers/net/octeon/ethernet-rx.c
index 31260a0..b37eede 100644
--- a/drivers/net/octeon/ethernet-rx.c
+++ b/drivers/net/octeon/ethernet-rx.c
@@ -462,7 +462,7 @@ err:
 	return;
 }
 
-void cvm_oct_rx_shutdown(int num_wqe)
+void cvm_oct_rx_shutdown0(void)
 {
 	int i;
 
@@ -478,82 +478,86 @@ void cvm_oct_rx_shutdown(int num_wqe)
 	/* Shutdown all of the NAPIs */
 	for_each_possible_cpu(i)
 		netif_napi_del(&cvm_oct_napi[i].napi);
+}
 
-	if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
-		union cvmx_fpa_quex_available queue_available;
-		union cvmx_sso_cfg sso_cfg;
-		union cvmx_sso_rwq_pop_fptr pop_fptr;
-		union cvmx_sso_rwq_psh_fptr fptr;
-		union cvmx_sso_fpage_cnt fpage_cnt;
-		int num_to_transfer, count, i;
-		void *mem;
+void cvm_oct_rx_shutdown1()
+{
+	union cvmx_fpa_quex_available queue_available;
+	union cvmx_sso_cfg sso_cfg;
+	union cvmx_sso_rwq_pop_fptr pop_fptr;
+	union cvmx_sso_rwq_psh_fptr fptr;
+	union cvmx_sso_fpage_cnt fpage_cnt;
+	int num_to_transfer, count, i;
+	void *mem;
 
-		sso_cfg.u64 = cvmx_read_csr(CVMX_SSO_CFG);
-		sso_cfg.s.rwen = 0;
-		sso_cfg.s.rwq_byp_dis = 1;
-		cvmx_write_csr(CVMX_SSO_CFG, sso_cfg.u64);
-		cvmx_read_csr(CVMX_SSO_CFG);
-		queue_available.u64 = cvmx_read_csr(CVMX_FPA_QUEX_AVAILABLE(8));
 
-		/* Make CVMX_FPA_QUEX_AVAILABLE(8) % 16 == 0*/
-		for (num_to_transfer = 16 - (queue_available.s.que_siz % 16);
-		     num_to_transfer > 0; num_to_transfer--) {
-			do {
-				pop_fptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_POP_FPTR);
-			} while (!pop_fptr.s.val);
-			for (;;) {
-				fptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_PSH_FPTR);
-				if (!fptr.s.full)
-					break;
-				__delay(1000);
-			}
-			fptr.s.fptr = pop_fptr.s.fptr;
-			cvmx_write_csr(CVMX_SSO_RWQ_PSH_FPTR, fptr.u64);
-		}
-		cvmx_read_csr(CVMX_SSO_CFG);
 
+	if (!OCTEON_IS_MODEL(OCTEON_CN68XX))
+		return;
+
+	sso_cfg.u64 = cvmx_read_csr(CVMX_SSO_CFG);
+	sso_cfg.s.rwen = 0;
+	sso_cfg.s.rwq_byp_dis = 1;
+	cvmx_write_csr(CVMX_SSO_CFG, sso_cfg.u64);
+	cvmx_read_csr(CVMX_SSO_CFG);
+	queue_available.u64 = cvmx_read_csr(CVMX_FPA_QUEX_AVAILABLE(8));
+
+	/* Make CVMX_FPA_QUEX_AVAILABLE(8) % 16 == 0*/
+	for (num_to_transfer = (16 - queue_available.s.que_siz) % 16;
+	     num_to_transfer > 0; num_to_transfer--) {
 		do {
-			queue_available.u64 = cvmx_read_csr(CVMX_FPA_QUEX_AVAILABLE(8));
-		} while (queue_available.s.que_siz % 16);
+			pop_fptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_POP_FPTR);
+		} while (!pop_fptr.s.val);
+		for (;;) {
+			fptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_PSH_FPTR);
+			if (!fptr.s.full)
+				break;
+			__delay(1000);
+		}
+		fptr.s.fptr = pop_fptr.s.fptr;
+		cvmx_write_csr(CVMX_SSO_RWQ_PSH_FPTR, fptr.u64);
+	}
+	cvmx_read_csr(CVMX_SSO_CFG);
 
-		sso_cfg.s.rwen = 1;
-		sso_cfg.s.rwq_byp_dis = 0;
-		cvmx_write_csr(CVMX_SSO_CFG, sso_cfg.u64);
+	do {
+		queue_available.u64 = cvmx_read_csr(CVMX_FPA_QUEX_AVAILABLE(8));
+	} while (queue_available.s.que_siz % 16);
 
-		for (i = 0; i < 8; i++) {
-			cvmx_sso_rwq_head_ptrx_t head_ptr;
-			cvmx_sso_rwq_tail_ptrx_t tail_ptr;
+	sso_cfg.s.rwen = 1;
+	sso_cfg.s.rwq_byp_dis = 0;
+	cvmx_write_csr(CVMX_SSO_CFG, sso_cfg.u64);
 
-			void *mem;
+	for (i = 0; i < 8; i++) {
+		cvmx_sso_rwq_head_ptrx_t head_ptr;
+		cvmx_sso_rwq_tail_ptrx_t tail_ptr;
 
-			head_ptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_HEAD_PTRX(i));
-			tail_ptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_TAIL_PTRX(i));
-			WARN_ON(head_ptr.s.ptr != tail_ptr.s.ptr);
+		head_ptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_HEAD_PTRX(i));
+		tail_ptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_TAIL_PTRX(i));
+		WARN_ON(head_ptr.s.ptr != tail_ptr.s.ptr);
 
-			mem = phys_to_virt(((u64)head_ptr.s.ptr) << 7);
-			kmem_cache_free(cvm_oct_kmem_sso, mem);
-		}
+		mem = phys_to_virt(((u64)head_ptr.s.ptr) << 7);
+		kmem_cache_free(cvm_oct_kmem_sso, mem);
+	}
 
-		count = 0;
+	count = 0;
 
+	do {
 		do {
-			do {
-				pop_fptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_POP_FPTR);
-				if (pop_fptr.s.val) {
-					mem = phys_to_virt(((u64)pop_fptr.s.fptr) << 7);
-					kmem_cache_free(cvm_oct_kmem_sso, mem);
-					count++;
-				}
-			} while (pop_fptr.s.val);
-			fpage_cnt.u64 = cvmx_read_csr(CVMX_SSO_FPAGE_CNT);
-		} while (fpage_cnt.s.fpage_cnt);
+			pop_fptr.u64 = cvmx_read_csr(CVMX_SSO_RWQ_POP_FPTR);
+			if (pop_fptr.s.val) {
+				mem = phys_to_virt(((u64)pop_fptr.s.fptr) << 7);
+				kmem_cache_free(cvm_oct_kmem_sso, mem);
+				count++;
+			}
+		} while (pop_fptr.s.val);
+		fpage_cnt.u64 = cvmx_read_csr(CVMX_SSO_FPAGE_CNT);
+	} while (fpage_cnt.s.fpage_cnt);
 
-		WARN_ON(count != cvm_oct_sso_fptr_count);
+	WARN_ON(count != cvm_oct_sso_fptr_count);
 
-		sso_cfg.s.rwen = 0;
-		sso_cfg.s.rwq_byp_dis = 0;
-		cvmx_write_csr(CVMX_SSO_CFG, sso_cfg.u64);
-		kmem_cache_destroy(cvm_oct_kmem_sso);
-		cvm_oct_kmem_sso = NULL;
-	}
+	sso_cfg.s.rwen = 0;
+	sso_cfg.s.rwq_byp_dis = 0;
+	cvmx_write_csr(CVMX_SSO_CFG, sso_cfg.u64);
+	kmem_cache_destroy(cvm_oct_kmem_sso);
+	cvm_oct_kmem_sso = NULL;
 }
diff --git a/drivers/net/octeon/ethernet-rx.h b/drivers/net/octeon/ethernet-rx.h
index ce7dc2e..2c5d093 100644
--- a/drivers/net/octeon/ethernet-rx.h
+++ b/drivers/net/octeon/ethernet-rx.h
@@ -28,7 +28,8 @@
 
 void cvm_oct_poll_controller(struct net_device *dev);
 void cvm_oct_rx_initialize(int);
-void cvm_oct_rx_shutdown(int);
+void cvm_oct_rx_shutdown0(void);
+void cvm_oct_rx_shutdown1(void);
 
 static inline void cvm_oct_rx_refill_pool(int fill_threshold)
 {
-- 
1.7.0

