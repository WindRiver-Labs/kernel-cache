From d0432093517153714fec0940cd4a6cdc80a2ceb4 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Fri, 11 Nov 2011 14:57:37 -0800
Subject: [PATCH 152/236] MIPS: Octeon: Move uartdisable= processing earlier in the bootstrap

Source: Cavium SDK 2.2-414

This allows us to set a more sane console= parameter.

Signed-off-by: David Daney <david.daney@cavium.com>
Integrated-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/cavium-octeon/serial.c      |   52 +++-----------------------------
 arch/mips/cavium-octeon/setup.c       |    2 +
 arch/mips/include/asm/octeon/octeon.h |    3 ++
 3 files changed, 10 insertions(+), 47 deletions(-)

diff --git a/arch/mips/cavium-octeon/serial.c b/arch/mips/cavium-octeon/serial.c
index 8600113..107cba0 100644
--- a/arch/mips/cavium-octeon/serial.c
+++ b/arch/mips/cavium-octeon/serial.c
@@ -18,8 +18,6 @@
 
 #include <asm/octeon/octeon.h>
 
-static int octeon_serial_uartdisable_mask;
-
 #if defined(CONFIG_CAVIUM_GDB) || defined(CONFIG_KGDB)
 static int cavium_gdb_active;
 
@@ -31,15 +29,12 @@ static int __init opt_cavium_gdb(char *p)
 }
 early_param("cavium_gdb", opt_cavium_gdb);
 
-
-#define DEBUG_UART 1
-
 static irqreturn_t interrupt_debug_char(int cpl, void *dev_id)
 {
 	unsigned long lsrval;
 	unsigned long tmp;
 
-	lsrval = cvmx_read_csr(CVMX_MIO_UARTX_LSR(DEBUG_UART));
+	lsrval = cvmx_read_csr(CVMX_MIO_UARTX_LSR(OCTEON_DEBUG_UART));
 	if (lsrval & 1) {
 		/*
 		 * Pulse MCD0 signal on Ctrl-C to stop all the
@@ -61,19 +56,16 @@ static irqreturn_t interrupt_debug_char(int cpl, void *dev_id)
 
 static int octeon_setup_debug_uart(void)
 {
-	octeon_serial_uartdisable_mask |= (1 << DEBUG_UART);
 	/* cavium_gdb_active is true if 'cavium_gdb' was detected on
 	   kernel command line */
 	if (cavium_gdb_active) {
-		if (request_irq(OCTEON_IRQ_UART0 + DEBUG_UART,
-				interrupt_debug_char, IRQF_SHARED, "Cavium GDB",
+	if (request_irq(OCTEON_IRQ_UART0 + OCTEON_DEBUG_UART, interrupt_debug_char, IRQF_SHARED, "Cavium GDB",
 				interrupt_debug_char)) {
-			panic("request_irq(%d) failed.",
-			      OCTEON_IRQ_UART0 + DEBUG_UART);
+		panic("request_irq(%d) failed.", OCTEON_IRQ_UART0 + OCTEON_DEBUG_UART);
 		}
 
-		cvmx_write_csr(CVMX_MIO_UARTX_IER(DEBUG_UART),
-			cvmx_read_csr(CVMX_MIO_UARTX_IER(DEBUG_UART)) | 1);
+	cvmx_write_csr(CVMX_MIO_UARTX_IER(OCTEON_DEBUG_UART),
+		       cvmx_read_csr(CVMX_MIO_UARTX_IER(OCTEON_DEBUG_UART)) | 1);
 	}
 	return 0;
 }
@@ -105,40 +97,6 @@ void octeon_serial_out(struct uart_port *up, int offset, int value)
 	cvmx_write_csr((uint64_t)(up->membase + (offset << 3)), (u8)value);
 }
 
-
-static int __init octeon_serial_uartdisable_setup(char *str)
-{
-	char *comma;
-
-	while (str) {
-		comma = strchr(str, ',');
-		if (comma == NULL || (comma - str) == 2) {
-			switch (*str) {
-			case '0':
-				octeon_serial_uartdisable_mask |= 1;
-				break;
-			case '1':
-				octeon_serial_uartdisable_mask |= 2;
-				break;
-			case '2':
-				octeon_serial_uartdisable_mask |= 4;
-				break;
-			default:
-				goto err;
-			}
-		} else {
-err:
-			pr_warning("Invalid uartdisable= parameter\n");
-			break;
-		}
-		str = comma;
-		if (str)
-			str++;
-	}
-	return 0;
-}
-__setup("uartdisable=", octeon_serial_uartdisable_setup);
-
 static int __devinit octeon_serial_probe(struct platform_device *pdev)
 {
 	int irq, res;
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 3b0e905..85ed30a 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -127,6 +127,8 @@ EXPORT_SYMBOL(octeon_bootloader_entry_addr);
 /* If an initrd named block is specified, its name goes here. */
 char __initdata rd_name[64];
 
+int octeon_serial_uartdisable_mask;
+
 #define SDK_VERSION "2.2"
 
 /**
diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index 4c55eda..0391c77 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -288,4 +288,7 @@ int octeon_request_ipi_handler(octeon_message_fn_t fn);
 void octeon_send_ipi_single(int cpu, unsigned int action);
 void octeon_release_ipi_handler(int action);
 
+#define OCTEON_DEBUG_UART 1
+extern int octeon_serial_uartdisable_mask;
+
 #endif /* __ASM_OCTEON_OCTEON_H */
-- 
1.7.0

