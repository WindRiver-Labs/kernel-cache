From 430d1d6e300dd7bf15e034fdca45c4fcf0058f69 Mon Sep 17 00:00:00 2001
From: Phil Staub <Phil.Staub@windriver.com>
Date: Thu, 16 Jun 2011 16:15:23 -0700
Subject: [PATCH 053/236] USB: Cavium: Miscellaneous usb driver cleanups.

Source: Cavium SDK 2.1.0-407

Debugging code can now be selected with OCTEON_HCD_DEBUG.

Cleanup debug printing macros, replace printk with pr_*

Signed-off-by: Phil Staub <Phil.Staub@windriver.com>
---
 drivers/usb/host/octeon-hcd.c |   97 ++++++++++++++++++++++++-----------------
 1 files changed, 57 insertions(+), 40 deletions(-)

diff --git a/drivers/usb/host/octeon-hcd.c b/drivers/usb/host/octeon-hcd.c
index 85bddc4..4faaa10 100644
--- a/drivers/usb/host/octeon-hcd.c
+++ b/drivers/usb/host/octeon-hcd.c
@@ -22,15 +22,25 @@
 
 #include "../core/hcd.h"
 
-/*#define DEBUG_CALL(format, ...)         printk(format, ##__VA_ARGS__) */
-#define DEBUG_CALL(format, ...)         do {} while (0)
-/*#define DEBUG_SUBMIT(format, ...)       printk(format, ##__VA_ARGS__) */
-#define DEBUG_SUBMIT(format, ...)       do {} while (0)
-/*#define DEBUG_ROOT_HUB(format, ...)     printk(format, ##__VA_ARGS__) */
-#define DEBUG_ROOT_HUB(format, ...)     do {} while (0)
-/*#define DEBUG_ERROR(format, ...)        printk(format, ##__VA_ARGS__) */
-#define DEBUG_ERROR(format, ...)        do {} while (0)
-#define DEBUG_FATAL(format, ...)        printk(format, ##__VA_ARGS__)
+#undef OCTEON_HCD_DEBUG
+
+#ifdef OCTEON_HCD_DEBUG
+
+#define DEBUG_CALL()			pr_info("OcteonUSB: %s called\n", __func__)
+#define DEBUG_SUBMIT(format, ...)       pr_info("OcteonUSB: %s " format, __func__, ##__VA_ARGS__)
+#define DEBUG_ROOT_HUB(format, ...)	pr_info(format, ##__VA_ARGS__)
+#define DEBUG_ERROR(format, ...)	pr_err("OcteonUSB: %s " format, __func__, ##__VA_ARGS__)
+
+#else
+
+#define DEBUG_CALL()			do {} while (0)
+#define DEBUG_SUBMIT(format, ...)	do {} while (0)
+#define DEBUG_ROOT_HUB(format, ...)	do {} while (0)
+#define DEBUG_ERROR(format, ...)	do {} while (0)
+
+#endif
+
+#define DEBUG_FATAL(format, ...)        pr_crit(format, ##__VA_ARGS__)
 
 struct octeon_hcd {
 	spinlock_t lock;
@@ -58,7 +68,7 @@ static irqreturn_t octeon_usb_irq(struct usb_hcd *hcd)
 
 	struct octeon_hcd *priv = hcd_to_octeon(hcd);
 	unsigned long flags;
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	spin_lock_irqsave(&priv->lock, flags);
 	cvmx_usb_poll(&priv->usb);
 	spin_unlock_irqrestore(&priv->lock, flags);
@@ -74,7 +84,7 @@ static void octeon_usb_port_callback(cvmx_usb_state_t *usb,
 				     void *user_data)
 {
 	struct octeon_hcd *priv = cvmx_usb_to_octeon(usb);
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	spin_unlock(&priv->lock);
 	usb_hcd_poll_rh_status(octeon_to_hcd(priv));
 	spin_lock(&priv->lock);
@@ -84,7 +94,7 @@ static int octeon_usb_start(struct usb_hcd *hcd)
 {
 	struct octeon_hcd *priv = hcd_to_octeon(hcd);
 	unsigned long flags;
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	hcd->state = HC_STATE_RUNNING;
 	spin_lock_irqsave(&priv->lock, flags);
 	cvmx_usb_register_callback(&priv->usb, CVMX_USB_CALLBACK_PORT_CHANGED,
@@ -97,7 +107,7 @@ static void octeon_usb_stop(struct usb_hcd *hcd)
 {
 	struct octeon_hcd *priv = hcd_to_octeon(hcd);
 	unsigned long flags;
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	spin_lock_irqsave(&priv->lock, flags);
 	cvmx_usb_register_callback(&priv->usb, CVMX_USB_CALLBACK_PORT_CHANGED,
 				   NULL, NULL);
@@ -108,7 +118,7 @@ static void octeon_usb_stop(struct usb_hcd *hcd)
 static int octeon_usb_get_frame_number(struct usb_hcd *hcd)
 {
 	struct octeon_hcd *priv = hcd_to_octeon(hcd);
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	return cvmx_usb_get_frame_number(&priv->usb);
 }
 
@@ -122,7 +132,7 @@ static void octeon_usb_urb_complete_callback(cvmx_usb_state_t *usb,
 {
 	struct octeon_hcd *priv = cvmx_usb_to_octeon(usb);
 	struct urb *urb = user_data;
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	urb->actual_length = bytes_transferred;
 	urb->hcpriv = NULL;
 
@@ -140,8 +150,8 @@ static void octeon_usb_urb_complete_callback(cvmx_usb_state_t *usb,
 				urb->iso_frame_desc[i].actual_length = iso_packet[i].length;
 				urb->actual_length += urb->iso_frame_desc[i].actual_length;
 			} else {
-				DEBUG_ERROR("%s: ISOCHRONOUS packet=%d of %d status=%d pipe=%d submit=%d size=%d\n",
-					    __FUNCTION__, i, urb->number_of_packets,
+				DEBUG_ERROR("ISOCHRONOUS packet=%d of %d status=%d pipe=%d submit=%d size=%d\n",
+					    i, urb->number_of_packets,
 					    iso_packet[i].status, pipe_handle,
 					    submit_handle, iso_packet[i].length);
 				urb->iso_frame_desc[i].status = -EREMOTEIO;
@@ -160,22 +170,22 @@ static void octeon_usb_urb_complete_callback(cvmx_usb_state_t *usb,
 		urb->status = -ENOENT;
 		break;
 	case CVMX_USB_COMPLETE_STALL:
-		DEBUG_ERROR("%s: status=stall pipe=%d submit=%d size=%d\n", __FUNCTION__, pipe_handle, submit_handle, bytes_transferred);
+		DEBUG_ERROR("status=stall pipe=%d submit=%d size=%d\n", pipe_handle, submit_handle, bytes_transferred);
 		urb->status = -EPIPE;
 		break;
 	case CVMX_USB_COMPLETE_BABBLEERR:
-		DEBUG_ERROR("%s: status=babble pipe=%d submit=%d size=%d\n", __FUNCTION__, pipe_handle, submit_handle, bytes_transferred);
+		DEBUG_ERROR("status=babble pipe=%d submit=%d size=%d\n", pipe_handle, submit_handle, bytes_transferred);
 		urb->status = -EPIPE;
 		break;
 	case CVMX_USB_COMPLETE_SHORT:
-		DEBUG_ERROR("%s: status=short pipe=%d submit=%d size=%d\n", __FUNCTION__, pipe_handle, submit_handle, bytes_transferred);
+		DEBUG_ERROR("status=short pipe=%d submit=%d size=%d\n", pipe_handle, submit_handle, bytes_transferred);
 		urb->status = -EREMOTEIO;
 		break;
 	case CVMX_USB_COMPLETE_ERROR:
 	case CVMX_USB_COMPLETE_XACTERR:
 	case CVMX_USB_COMPLETE_DATATGLERR:
 	case CVMX_USB_COMPLETE_FRAMEERR:
-		DEBUG_ERROR("%s: status=%d pipe=%d submit=%d size=%d\n", __FUNCTION__, status, pipe_handle, submit_handle, bytes_transferred);
+		DEBUG_ERROR("status=%d pipe=%d submit=%d size=%d\n", status, pipe_handle, submit_handle, bytes_transferred);
 		urb->status = -EPROTO;
 		break;
 	}
@@ -195,7 +205,7 @@ static int octeon_usb_urb_enqueue(struct usb_hcd *hcd,
 	cvmx_usb_iso_packet_t *iso_packet;
 	struct usb_host_endpoint *ep = urb->ep;
 
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	spin_lock_irqsave(&priv->lock, flags);
 
 	if (!ep->hcpriv) {
@@ -261,7 +271,7 @@ static int octeon_usb_urb_enqueue(struct usb_hcd *hcd,
 						 split_port);
 		if (pipe_handle < 0) {
 			spin_unlock_irqrestore(&priv->lock, flags);
-			DEBUG_ERROR("OcteonUSB: %s failed to create pipe\n", __FUNCTION__);
+			DEBUG_ERROR("failed to create pipe\n");
 			return -ENOMEM;
 		}
 		ep->hcpriv = (void *)(0x10000L + pipe_handle);
@@ -270,7 +280,7 @@ static int octeon_usb_urb_enqueue(struct usb_hcd *hcd,
 
 	switch (usb_pipetype(urb->pipe)) {
 	case PIPE_ISOCHRONOUS:
-		DEBUG_SUBMIT("OcteonUSB: %s submit isochronous to %d.%d\n", __FUNCTION__, usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
+		DEBUG_SUBMIT("submit isochronous to %d.%d\n", usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
 		/* Allocate a structure to use for our private list of isochronous
 		   packets */
 		iso_packet = kmalloc(urb->number_of_packets * sizeof(cvmx_usb_iso_packet_t), GFP_ATOMIC);
@@ -303,7 +313,7 @@ static int octeon_usb_urb_enqueue(struct usb_hcd *hcd,
 		}
 		break;
 	case PIPE_INTERRUPT:
-		DEBUG_SUBMIT("OcteonUSB: %s submit interrupt to %d.%d\n", __FUNCTION__, usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
+		DEBUG_SUBMIT("submit interrupt to %d.%d\n", usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
 		submit_handle = cvmx_usb_submit_interrupt(&priv->usb, pipe_handle,
 							  urb->transfer_dma,
 							  urb->transfer_buffer_length,
@@ -311,7 +321,7 @@ static int octeon_usb_urb_enqueue(struct usb_hcd *hcd,
 							  urb);
 		break;
 	case PIPE_CONTROL:
-		DEBUG_SUBMIT("OcteonUSB: %s submit control to %d.%d\n", __FUNCTION__, usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
+		DEBUG_SUBMIT("submit control to %d.%d\n", usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
 		submit_handle = cvmx_usb_submit_control(&priv->usb, pipe_handle,
 							urb->setup_dma,
 							urb->transfer_dma,
@@ -320,7 +330,7 @@ static int octeon_usb_urb_enqueue(struct usb_hcd *hcd,
 							urb);
 		break;
 	case PIPE_BULK:
-		DEBUG_SUBMIT("OcteonUSB: %s submit bulk to %d.%d\n", __FUNCTION__, usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
+		DEBUG_SUBMIT("submit bulk to %d.%d\n", usb_pipedevice(urb->pipe), usb_pipeendpoint(urb->pipe));
 		submit_handle = cvmx_usb_submit_bulk(&priv->usb, pipe_handle,
 						     urb->transfer_dma,
 						     urb->transfer_buffer_length,
@@ -330,7 +340,7 @@ static int octeon_usb_urb_enqueue(struct usb_hcd *hcd,
 	}
 	if (submit_handle < 0) {
 		spin_unlock_irqrestore(&priv->lock, flags);
-		DEBUG_ERROR("OcteonUSB: %s failed to submit\n", __FUNCTION__);
+		DEBUG_ERROR("failed to submit\n");
 		return -ENOMEM;
 	}
 	urb->hcpriv = (void *)(long)(((submit_handle & 0xffff) << 16) | pipe_handle);
@@ -345,7 +355,7 @@ static int octeon_usb_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int stat
 	int submit_handle;
 	unsigned long flags;
 
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 
 	if (!urb->dev)
 		return -EINVAL;
@@ -355,7 +365,7 @@ static int octeon_usb_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int stat
 	spin_lock_irqsave(&priv->lock, flags);
 	if (cvmx_usb_cancel(&priv->usb, pipe_handle, submit_handle)) {
 		spin_unlock_irqrestore(&priv->lock, flags);
-		DEBUG_ERROR("OcteonUSB: Canceling URB failed\n");
+		DEBUG_ERROR("Canceling URB failed\n");
 		return -1;
 	}
 	spin_unlock_irqrestore(&priv->lock, flags);
@@ -364,7 +374,7 @@ static int octeon_usb_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int stat
 
 static void octeon_usb_endpoint_disable(struct usb_hcd *hcd, struct usb_host_endpoint *ep)
 {
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	if (ep->hcpriv) {
 		struct octeon_hcd *priv = hcd_to_octeon(hcd);
 		int pipe_handle = 0xffff & (long)ep->hcpriv;
@@ -372,7 +382,7 @@ static void octeon_usb_endpoint_disable(struct usb_hcd *hcd, struct usb_host_end
 		spin_lock_irqsave(&priv->lock, flags);
 		cvmx_usb_cancel_all(&priv->usb, pipe_handle);
 		if (cvmx_usb_close_pipe(&priv->usb, pipe_handle))
-			DEBUG_ERROR("OcteonUSB: Closing pipe %d failed\n", pipe_handle);
+			DEBUG_ERROR("Closing pipe %d failed\n", pipe_handle);
 		spin_unlock_irqrestore(&priv->lock, flags);
 		ep->hcpriv = NULL;
 	}
@@ -384,7 +394,7 @@ static int octeon_usb_hub_status_data(struct usb_hcd *hcd, char *buf)
 	cvmx_usb_port_status_t port_status;
 	unsigned long flags;
 
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 
 	spin_lock_irqsave(&priv->lock, flags);
 	port_status = cvmx_usb_get_status(&priv->usb);
@@ -613,13 +623,14 @@ static const struct hc_driver octeon_hc_driver = {
 static int octeon_usb_driver_probe(struct device *dev)
 {
 	int status;
+	int initialize_flags;
 	int usb_num = to_platform_device(dev)->id;
 	int irq = platform_get_irq(to_platform_device(dev), 0);
 	struct octeon_hcd *priv;
 	struct usb_hcd *hcd;
 	unsigned long flags;
 
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 
 	/* Set the DMA mask to 64bits so we get buffers already translated for
 	   DMA */
@@ -636,8 +647,14 @@ static int octeon_usb_driver_probe(struct device *dev)
 
 	spin_lock_init(&priv->lock);
 
-	/*status = cvmx_usb_initialize(&priv->usb, usb_num, CVMX_USB_INITIALIZE_FLAGS_CLOCK_AUTO | CVMX_USB_INITIALIZE_FLAGS_DEBUG_INFO | CVMX_USB_INITIALIZE_FLAGS_DEBUG_TRANSFERS | CVMX_USB_INITIALIZE_FLAGS_DEBUG_CALLBACKS); */
-	status = cvmx_usb_initialize(&priv->usb, usb_num, CVMX_USB_INITIALIZE_FLAGS_CLOCK_AUTO);
+	initialize_flags = CVMX_USB_INITIALIZE_FLAGS_CLOCK_AUTO;
+
+#ifdef OCTEON_HCD_DEBUG
+	initialize_flags |= CVMX_USB_INITIALIZE_FLAGS_DEBUG_INFO;
+	initialize_flags |= CVMX_USB_INITIALIZE_FLAGS_DEBUG_TRANSFERS;
+	initialize_flags |= CVMX_USB_INITIALIZE_FLAGS_DEBUG_CALLBACKS;
+#endif
+	status = cvmx_usb_initialize(&priv->usb, usb_num, initialize_flags);
 	if (status) {
 		DEBUG_FATAL("OcteonUSB: USB initialization failed with %d\n", status);
 		kfree(hcd);
@@ -658,7 +675,7 @@ static int octeon_usb_driver_probe(struct device *dev)
 		return -1;
 	}
 
-	printk("OcteonUSB: Registered HCD for port %d on irq %d\n", usb_num, irq);
+	pr_info("OcteonUSB: Registered HCD for port %d on irq %d\n", usb_num, irq);
 
 	return 0;
 }
@@ -670,7 +687,7 @@ static int octeon_usb_driver_remove(struct device *dev)
 	struct octeon_hcd *priv = hcd_to_octeon(hcd);
 	unsigned long flags;
 
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 
 	usb_remove_hcd(hcd);
 	spin_lock_irqsave(&priv->lock, flags);
@@ -775,7 +792,7 @@ static int __init octeon_usb_module_init(void)
 	__register_for_kexec_shutdown();
 
 	octeon_usb_registered = 1;
-	printk(KERN_INFO "OcteonUSB: Detected %d ports\n", num_devices);
+	pr_info("OcteonUSB: Detected %d ports\n", num_devices);
 
 	/*
 	 * Only cn52XX and cn56XX have DWC_OTG USB hardware and the
@@ -818,7 +835,7 @@ static int __init octeon_usb_module_init(void)
 
 static void __exit octeon_usb_module_cleanup(void)
 {
-	DEBUG_CALL("OcteonUSB: %s called\n", __FUNCTION__);
+	DEBUG_CALL();
 	__unregister_for_kexec_shutdown();
 	__shutdown_usb_ports();
 	if (octeon_usb_registered)
-- 
1.7.0

