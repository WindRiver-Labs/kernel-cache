From 20b511da902af46f57424695042b3aae32638a0e Mon Sep 17 00:00:00 2001
From: David Daney <ddaney@caviumnetworks.com>
Date: Thu, 10 Feb 2011 11:34:59 -0800
Subject: [PATCH 065/236] netdev: octeon_ethernet: Don't do GMX operations on non-GMX ports.

Source: Cavium SDK 2.1.0-407

Also flag bits converted to bitfields to clean up the code.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Integrated-by: Phil Staub <Phil.Staub@windriver.com>
---
 drivers/net/octeon/ethernet-mdio.c   |   22 ++++++++++++----------
 drivers/net/octeon/ethernet-napi.c   |    8 ++++----
 drivers/net/octeon/ethernet-tx.c     |    2 +-
 drivers/net/octeon/ethernet-xmit.c   |    7 +++----
 drivers/net/octeon/ethernet.c        |   23 ++++++++++-------------
 drivers/net/octeon/octeon-ethernet.h |   13 ++++++-------
 6 files changed, 36 insertions(+), 39 deletions(-)

diff --git a/drivers/net/octeon/ethernet-mdio.c b/drivers/net/octeon/ethernet-mdio.c
index c7c9b85..36a989e 100644
--- a/drivers/net/octeon/ethernet-mdio.c
+++ b/drivers/net/octeon/ethernet-mdio.c
@@ -172,13 +172,14 @@ static int cvm_oct_ioctl_hwtstamp(struct net_device *dev,
 
 	switch (config.tx_type) {
 	case HWTSTAMP_TX_OFF:
-		priv->flags &= ~(OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_SW |
-				 OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_HW);
+		priv->tx_timestamp_sw = 0;
+		priv->tx_timestamp_hw = 0;
 		break;
 	case HWTSTAMP_TX_ON:
-		priv->flags |= (have_hw_timestamps) ?
-			OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_HW :
-			OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_SW;
+		if (have_hw_timestamps)
+			priv->tx_timestamp_hw = 1;
+		else
+			priv->tx_timestamp_sw = 1;
 		break;
 	default:
 		return -ERANGE;
@@ -186,8 +187,8 @@ static int cvm_oct_ioctl_hwtstamp(struct net_device *dev,
 
 	switch (config.rx_filter) {
 	case HWTSTAMP_FILTER_NONE:
-		priv->flags &= ~(OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_HW |
-				 OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_SW);
+		priv->rx_timestamp_hw = 0;
+		priv->rx_timestamp_sw = 0;
 		if (have_hw_timestamps) {
 			union cvmx_gmxx_rxx_frm_ctl gmxx_rxx_frm_ctl;
 			union cvmx_pip_prt_cfgx pip_prt_cfgx;
@@ -215,9 +216,10 @@ static int cvm_oct_ioctl_hwtstamp(struct net_device *dev,
 	case HWTSTAMP_FILTER_PTP_V2_EVENT:
 	case HWTSTAMP_FILTER_PTP_V2_SYNC:
 	case HWTSTAMP_FILTER_PTP_V2_DELAY_REQ:
-		priv->flags |= (have_hw_timestamps) ?
-			OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_HW :
-			OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_SW;
+		if (have_hw_timestamps)
+			priv->rx_timestamp_hw = 1;
+		else
+			priv->rx_timestamp_sw = 1;
 		config.rx_filter = HWTSTAMP_FILTER_ALL;
 		if (have_hw_timestamps) {
 			union cvmx_gmxx_rxx_frm_ctl gmxx_rxx_frm_ctl;
diff --git a/drivers/net/octeon/ethernet-napi.c b/drivers/net/octeon/ethernet-napi.c
index a314c2c..1a2dd2b 100644
--- a/drivers/net/octeon/ethernet-napi.c
+++ b/drivers/net/octeon/ethernet-napi.c
@@ -156,14 +156,14 @@ static int CVM_OCT_NAPI_POLL(struct napi_struct *napi, int budget)
 				netif_wake_queue(skb->dev);
 			shtx = skb_tx(skb);
 			if (unlikely(shtx->hardware)) {
-				if (priv->flags & OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_HW) {
+				if (priv->tx_timestamp_hw) {
 					uint64_t ns = *(uint64_t *)work->packet_data;
 					struct skb_shared_hwtstamps ts;
 					ts.syststamp = cvm_oct_ptp_to_ktime(ns);
 					ts.hwtstamp = ns_to_ktime(ns);
 					skb_tstamp_tx(skb, &ts);
 				}
-				if (priv->flags & OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_SW) {
+				if (priv->tx_timestamp_sw) {
 					uint64_t ns = *(uint64_t *)work->packet_data;
 					struct skb_shared_hwtstamps ts;
 					ts.syststamp = ns_to_ktime(ns);
@@ -311,13 +311,13 @@ static int CVM_OCT_NAPI_POLL(struct napi_struct *napi, int budget)
 			 * currently up.
 			 */
 			if (likely(priv->netdev->flags & IFF_UP)) {
-				if (priv->flags & OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_SW) {
+				if (priv->rx_timestamp_sw) {
 					struct skb_shared_hwtstamps *ts;
 					ts = skb_hwtstamps(skb);
 					ts->syststamp = ktime_get_real();
 					ts->hwtstamp = ns_to_ktime(0);
 				}
-				if (priv->flags & OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_HW) {
+				if (priv->rx_timestamp_hw) {
 					/* The first 8 bytes are the timestamp */
 					uint64_t ns = *(uint64_t*)skb->data;
 					struct skb_shared_hwtstamps *ts;
diff --git a/drivers/net/octeon/ethernet-tx.c b/drivers/net/octeon/ethernet-tx.c
index 29747ce..2b6486a 100644
--- a/drivers/net/octeon/ethernet-tx.c
+++ b/drivers/net/octeon/ethernet-tx.c
@@ -117,7 +117,7 @@ int cvm_oct_transmit_qos(struct net_device *dev,
 		return -1;
 	}
 
-	if (priv->flags & OCTEON_ETHERNET_FLAG_TX_LOCKLESS) {
+	if (priv->tx_lockless) {
 		qos = cvmx_get_core_num();
 		lock_type = CVMX_PKO_LOCK_NONE;
 	} else {
diff --git a/drivers/net/octeon/ethernet-xmit.c b/drivers/net/octeon/ethernet-xmit.c
index e3218ca..a247d3e 100644
--- a/drivers/net/octeon/ethernet-xmit.c
+++ b/drivers/net/octeon/ethernet-xmit.c
@@ -191,8 +191,7 @@ CVM_OCT_XMIT
 	 */
 #if REUSE_SKBUFFS_WITHOUT_FREE
 	/* Timestamps are returned in the WQE, so we can't reuse the buffer */
-	if (unlikely(priv->flags & (OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_SW |
-				    OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_HW)))
+	if (unlikely(priv->tx_timestamp_sw || priv->tx_timestamp_hw))
 		goto dont_put_skbuff_in_hw;
 
 	fpa_head = skb->head + 256 - ((unsigned long)skb->head & 0x7f);
@@ -360,11 +359,11 @@ dont_put_skbuff_in_hw:
 	/* Send the packet to the output queue */
 	if (queue_type == QUEUE_WQE) {
 		uint64_t word2 = cvmx_ptr_to_phys(work);
-		if (priv->flags & OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_SW) {
+		if (priv->tx_timestamp_sw) {
 			/* The first 8 bytes work->packet_data will get the timestamp */
 			*(uint64_t *)work->packet_data = ktime_to_ns(ktime_get_real());
 		}
-		if (priv->flags & OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_HW) {
+		if (priv->tx_timestamp_hw) {
 			/* The first 8 bytes work->packet_data will get the timestamp */
 			*(uint64_t *)work->packet_data = 0;
 			word2 |= 1ull<<40; /* Bit 40 controls timestamps */
diff --git a/drivers/net/octeon/ethernet.c b/drivers/net/octeon/ethernet.c
index 64af57a..4877676 100644
--- a/drivers/net/octeon/ethernet.c
+++ b/drivers/net/octeon/ethernet.c
@@ -334,9 +334,7 @@ static int cvm_oct_common_change_mtu(struct net_device *dev, int new_mtu)
 	}
 	dev->mtu = new_mtu;
 
-	if ((priv->interface < 2)
-	    && (cvmx_helper_interface_get_mode(priv->interface) !=
-		CVMX_HELPER_INTERFACE_MODE_SPI)) {
+	if (priv->has_gmx_regs) {
 		/* Add ethernet header and FCS, and VLAN if configured. */
 		int max_packet = new_mtu + 14 + 4 + vlan_bytes;
 
@@ -376,9 +374,7 @@ static void cvm_oct_common_set_multicast_list(struct net_device *dev)
 	union cvmx_gmxx_prtx_cfg gmx_cfg;
 	struct octeon_ethernet *priv = netdev_priv(dev);
 
-	if ((priv->interface < 2)
-	    && (cvmx_helper_interface_get_mode(priv->interface) !=
-		CVMX_HELPER_INTERFACE_MODE_SPI)) {
+	if (priv->has_gmx_regs) {
 		union cvmx_gmxx_rxx_adr_ctl control;
 		control.u64 = 0;
 		control.s.bcst = 1;	/* Allow broadcast MAC addresses */
@@ -434,9 +430,7 @@ static int cvm_oct_common_set_mac_address(struct net_device *dev, void *addr)
 
 	memcpy(dev->dev_addr, addr + 2, 6);
 
-	if ((priv->interface < 2)
-	    && (cvmx_helper_interface_get_mode(priv->interface) !=
-		CVMX_HELPER_INTERFACE_MODE_SPI)) {
+	if (priv->has_gmx_regs) {
 		int i;
 		uint8_t *ptr = addr;
 		uint64_t mac = 0;
@@ -888,10 +882,11 @@ static int __init cvm_oct_init_module(void)
 #ifdef CONFIG_OCTEON_ETHERNET_LOCKLESS_IF_SUPPORTED
 				if (octeon_pko_lockless()) {
 					dev->netdev_ops = &cvm_oct_xaui_lockless_netdev_ops;
-					priv->flags |= OCTEON_ETHERNET_FLAG_TX_LOCKLESS;
+					priv->tx_lockless = 1;
 				} else
 #endif
 					dev->netdev_ops = &cvm_oct_xaui_netdev_ops;
+				priv->has_gmx_regs = 1;
 				strcpy(dev->name, "xaui%d");
 				break;
 
@@ -904,10 +899,11 @@ static int __init cvm_oct_init_module(void)
 #ifdef CONFIG_OCTEON_ETHERNET_LOCKLESS_IF_SUPPORTED
 				if (octeon_pko_lockless()) {
 					dev->netdev_ops = &cvm_oct_sgmii_lockless_netdev_ops;
-					priv->flags |= OCTEON_ETHERNET_FLAG_TX_LOCKLESS;
+					priv->tx_lockless = 1;
 				} else
 #endif
 					dev->netdev_ops = &cvm_oct_sgmii_netdev_ops;
+				priv->has_gmx_regs = 1;
 				strcpy(dev->name, "eth%d");
 				break;
 
@@ -915,7 +911,7 @@ static int __init cvm_oct_init_module(void)
 #ifdef CONFIG_OCTEON_ETHERNET_LOCKLESS_IF_SUPPORTED
 				if (octeon_pko_lockless()) {
 					dev->netdev_ops = &cvm_oct_spi_lockless_netdev_ops;
-					priv->flags |= OCTEON_ETHERNET_FLAG_TX_LOCKLESS;
+					priv->tx_lockless = 1;
 				} else
 #endif
 					dev->netdev_ops = &cvm_oct_spi_netdev_ops;
@@ -927,10 +923,11 @@ static int __init cvm_oct_init_module(void)
 #ifdef CONFIG_OCTEON_ETHERNET_LOCKLESS_IF_SUPPORTED
 				if (octeon_pko_lockless()) {
 					dev->netdev_ops = &cvm_oct_rgmii_lockless_netdev_ops;
-					priv->flags |= OCTEON_ETHERNET_FLAG_TX_LOCKLESS;
+					priv->tx_lockless = 1;
 				} else
 #endif
 					dev->netdev_ops = &cvm_oct_rgmii_netdev_ops;
+				priv->has_gmx_regs = 1;
 				strcpy(dev->name, "eth%d");
 				break;
 #ifdef CONFIG_RAPIDIO
diff --git a/drivers/net/octeon/octeon-ethernet.h b/drivers/net/octeon/octeon-ethernet.h
index a02d57f..78653a4 100644
--- a/drivers/net/octeon/octeon-ethernet.h
+++ b/drivers/net/octeon/octeon-ethernet.h
@@ -59,13 +59,12 @@ struct octeon_ethernet {
 	 */
 	int imode;
 
-	/* Flags controlling aspects of the device */
-	int flags;
-#define OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_SW (1<<0)
-#define OCTEON_ETHERNET_FLAG_TX_TIMESTAMP_HW (1<<1)
-#define OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_SW (1<<2)
-#define OCTEON_ETHERNET_FLAG_RX_TIMESTAMP_HW (1<<3)
-#define OCTEON_ETHERNET_FLAG_TX_LOCKLESS     (1<<4)
+	unsigned int has_gmx_regs:1;
+	unsigned int tx_timestamp_sw:1;
+	unsigned int tx_timestamp_hw:1;
+	unsigned int rx_timestamp_sw:1;
+	unsigned int rx_timestamp_hw:1;
+	unsigned int tx_lockless:1;
 
 	/* Optional intecept callback defined above */
 	cvm_oct_callback_t      intercept_cb;
-- 
1.7.0

