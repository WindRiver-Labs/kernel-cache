From 2302b85ea4e647d6ef0559672725624f546ee899 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Thu, 10 Nov 2011 13:28:31 -0800
Subject: [PATCH 100/236] MIPS: Octeon: Register error interrupts in ebb6800

Register error interrupts for each block, there is a separate
IRQ bit for each block.

Source: Cavium SDK 2.2-414

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Integrated-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |   55 ++++++++++++++++++++++++++++++++++++++-
 1 files changed, 54 insertions(+), 1 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index e5aa3ac..576124b 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -1183,7 +1183,60 @@ void prom_free_prom_memory(void)
 #else
 	irq_flags = IRQF_SHARED;
 #endif
-	if (!OCTEON_IS_MODEL(OCTEON_CN68XX)) {
+	if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
+		if (request_irq(OCTEON_IRQ_NAND, octeon_rml_interrupt, IRQF_SHARED,
+					"NAND RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_NAND)\n");
+		}
+		if (request_irq(OCTEON_IRQ_MIO, octeon_rml_interrupt, IRQF_SHARED,
+					"MIO RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_MIO)\n");
+		}
+		if (request_irq(OCTEON_IRQ_FPA, octeon_rml_interrupt, IRQF_SHARED,
+					"FPA RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_FPA)\n");
+		}
+		if (request_irq(OCTEON_IRQ_POW, octeon_rml_interrupt, IRQF_SHARED,
+					"POW RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_POW)\n");
+		}
+		if (request_irq(OCTEON_IRQ_L2C, octeon_rml_interrupt, IRQF_SHARED,
+					"L2C RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_L2C)\n");
+		}
+		if (request_irq(OCTEON_IRQ_IPD, octeon_rml_interrupt, IRQF_SHARED,
+					"IPD RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_IPD)\n");
+		}
+		if (request_irq(OCTEON_IRQ_PKO, octeon_rml_interrupt, IRQF_SHARED,
+					"PKO RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_PKO)\n");
+		}
+		if (request_irq(OCTEON_IRQ_ZIP, octeon_rml_interrupt, IRQF_SHARED,
+					"ZIP RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_ZIP)\n");
+		}
+		if (request_irq(OCTEON_IRQ_RAD, octeon_rml_interrupt, IRQF_SHARED,
+					"RAD RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_RAD)\n");
+		}
+		if (request_irq(OCTEON_IRQ_KEY, octeon_rml_interrupt, IRQF_SHARED,
+					"KEY RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_KEY)\n");
+		}
+		if (request_irq(OCTEON_IRQ_DFA, octeon_rml_interrupt, IRQF_SHARED,
+					"DFA RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_DFA)\n");
+		}
+		if (request_irq(OCTEON_IRQ_DPI, octeon_rml_interrupt, IRQF_SHARED,
+					"DPI RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_DPI)\n");
+		}
+		if (request_irq(OCTEON_IRQ_AGL, octeon_rml_interrupt, IRQF_SHARED,
+					"AGL RML_RSL", octeon_rml_interrupt)) {
+			panic("Unable to request_irq(OCTEON_IRQ_AGL)\n");
+		}
+	} else {
 		if (request_irq(OCTEON_IRQ_RML, octeon_rml_interrupt, irq_flags,
 					"RML_RSL", octeon_rml_interrupt)) {
 			panic("Unable to request_irq(OCTEON_IRQ_RML)\n");
-- 
1.7.0

