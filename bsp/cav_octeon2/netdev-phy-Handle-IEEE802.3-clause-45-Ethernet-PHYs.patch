From aac744bfd725a0fbb6d7431484860fc5b309c8b8 Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Thu, 8 Nov 2012 11:09:08 +0800
Subject: [PATCH 1/2] netdev/phy: Handle IEEE802.3 clause 45 Ethernet PHYs

Source: Cavium SDK 2.3-427

The IEEE802.3 clause 45 MDIO bus protocol allows for directly
addressing PHY registers using a 21 bit address, and is used by many
10G Ethernet PHYS.  Already existing is the ability of MDIO bus
drivers to use clause 45, with the MII_ADDR_C45 flag.  Here we add
some support in the PHY and device tree infrastructure to use these
PHYs.

Normally the MII_ADDR_C45 flag is ORed with the register address to
indicate a clause 45 transaction.  Here we also use this flag in the
*device* address passed to get_phy_id() and get_phy_device() to
indicate that probing should be done with clause 45 transactions.  If
a PHY is successfully probed with MII_ADDR_C45, the new struct
phy_device is_c45 flag is set for the PHY.

Signed-off-by: David Daney <david.daney@cavium.com>
Integrated-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 drivers/net/phy/phy_device.c |   19 +++++++++++++++++--
 include/linux/phy.h          |   11 +++++++++--
 2 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 9fd9863..39255ca 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -168,6 +168,8 @@ struct phy_device* phy_device_create(struct mii_bus *bus, int addr, int phy_id)
 
 	dev->autoneg = AUTONEG_ENABLE;
 
+	dev->is_c45 = (addr & MII_ADDR_C45) != 0;
+	addr &= ~MII_ADDR_C45;
 	dev->addr = addr;
 	dev->phy_id = phy_id;
 	dev->bus = bus;
@@ -198,11 +200,18 @@ int get_phy_id(struct mii_bus *bus, int addr, u32 *phy_id)
 {
 	int phy_reg;
 	int i;
+	u32 c45_reg_base = 0;
+
+	if (addr & MII_ADDR_C45) {
+		addr &= ~MII_ADDR_C45;
+		/* Access the PHY's PHY XS registers with C45 mode. */
+		c45_reg_base = MII_ADDR_C45 | 0x40000;
+	}
 
 	for (i = 1; i < 5; i++) {
 		/* Grab the bits from PHYIR1, and put them
 		 * in the upper half */
-		phy_reg = mdiobus_read(bus, addr, i, MII_PHYSID1);
+		phy_reg = mdiobus_read(bus, addr, i, c45_reg_base | MII_PHYSID1);
 
 		if (phy_reg < 0)
 			return -EIO;
@@ -210,7 +219,7 @@ int get_phy_id(struct mii_bus *bus, int addr, u32 *phy_id)
 		*phy_id = (phy_reg & 0xffff) << 16;
 
 		/* Grab the bits from PHYIR2, and put them in the lower half */
-		phy_reg = mdiobus_read(bus, addr, i, MII_PHYSID2);
+		phy_reg = mdiobus_read(bus, addr, i, c45_reg_base | MII_PHYSID2);
 
 		if (phy_reg < 0)
 			return -EIO;
@@ -440,6 +449,12 @@ int phy_attach_direct(struct net_device *dev, struct phy_device *phydev,
 	 * exist, and we should use the genphy driver. */
 	if (NULL == d->driver) {
 		int err;
+
+		if (phydev->is_c45) {
+			pr_err("No driver for phy %x\n", phydev->phy_id);
+			return -ENODEV;
+		}
+
 		if (interface == PHY_INTERFACE_MODE_XGMII)
 			d->driver = &gen10g_driver.driver;
 		else
diff --git a/include/linux/phy.h b/include/linux/phy.h
index fb732de..ce4ddd3 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -82,8 +82,12 @@ typedef enum {
  */
 #define MII_BUS_ID_SIZE	(20 - 3)
 
-/* Or MII_ADDR_C45 into regnum for read/write on mii_bus to enable the 21 bit
-   IEEE 802.3ae clause 45 addressing mode used by 10GIGE phy chips. */
+/*
+ * Or MII_ADDR_C45 into regnum for read/write on mii_bus to enable the
+ * 21 bit IEEE 802.3ae clause 45 addressing mode used by 10GIGE phy
+ * chips.  Also may be ORed into the device address in
+ * phy_device_create(), phy_attach_direct(), etc.
+ */
 #define MII_ADDR_C45 (1<<30)
 
 /*
@@ -243,6 +247,7 @@ enum phy_state {
  * phy_id: UID for this device found during discovery
  * state: state of the PHY for management purposes
  * dev_flags: Device-specific flags used by the PHY driver.
+ * is_c45:  Set to true if this phy uses clause 45 addressing.
  * addr: Bus address of PHY
  * link_timeout: The number of timer firings to wait before the
  * giving up on the current attempt at acquiring a link
@@ -280,6 +285,8 @@ struct phy_device {
 
 	u32 dev_flags;
 
+	bool is_c45;
+
 	phy_interface_t interface;
 
 	/* Bus address of the PHY (0-32) */
-- 
1.7.0

