From 7dbcb36f94f5420b262dc432d326e92bd2f66192 Mon Sep 17 00:00:00 2001
From: Jiang Bin <bin.jiang@windriver.com>
Date: Mon, 14 May 2012 18:28:30 +0800
Subject: [PATCH 200/238] MIPS: Octeon: Fix __xlate_proc_name warning

The name of interrupt includes '/' character which causes following
message in runtime:

WARNING: at linux/fs/proc/generic.c:317 __xlate_proc_name+0x104/0x140()
name 'NAND RML/RSL'
Modules linked in:
Call Trace:
[<ffffffff801100bc>] dump_stack+0x8/0x34
[<ffffffff8030e698>] warn_slowpath_common+0x70/0x98
[<ffffffff8030e714>] warn_slowpath_fmt+0x34/0x40
[<ffffffff80447a6c>] __xlate_proc_name+0x104/0x140
[<ffffffff80448118>] __proc_create+0x80/0x130
[<ffffffff80448b18>] proc_mkdir_mode+0x28/0x68
[<ffffffff80379688>] register_handler_proc+0x108/0x128
[<ffffffff8037673c>] __setup_irq+0x1dc/0x458
[<ffffffff80376aac>] request_threaded_irq+0xf4/0x278
[<ffffffff80114be4>] prom_free_prom_memory+0xe4/0x5d0
[<ffffffff80105f40>] free_initmem+0x10/0xc0
[<ffffffff801140b8>] init_post+0x18/0xe8
[<ffffffff81132474>] kernel_init+0x29c/0x2c0
[<ffffffff802d8748>] kernel_thread_helper+0x10/0x18

'/' is used to identify a directory name in __xlate_proc_name, so it should
not be in a proc name.

Signed-off-by: Jiang Bin <bin.jiang@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |   32 ++++++++++++++++----------------
 1 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index e429b44..3b92b89 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -1206,59 +1206,59 @@ void prom_free_prom_memory(void)
 	if (OCTEON_IS_MODEL(OCTEON_CN68XX)) {
 		int i;
 		if (request_irq(OCTEON_IRQ_NAND, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "NAND RML/RSL",
+					IRQF_SHARED, "NAND RML_RSL",
 					cvmx_error_get_index(CVMX_NDF_INT))) {
 			panic("Unable to request_irq(OCTEON_IRQ_NAND)");
 		}
 		if (request_irq(OCTEON_IRQ_MIO, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "MIO RML/RSL",
+					IRQF_SHARED, "MIO RML_RSL",
 					cvmx_error_get_index(CVMX_MIO_RST_INT))) {
 			panic("Unable to request_irq(OCTEON_IRQ_MIO)");
 		}
 		if (request_irq(OCTEON_IRQ_FPA, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "FPA RML/RSL",
+					IRQF_SHARED, "FPA RML_RSL",
 					cvmx_error_get_index(CVMX_FPA_INT_SUM))) {
 			panic("Unable to request_irq(OCTEON_IRQ_FPA)");
 		}
 #if 0
 		if (request_irq(OCTEON_IRQ_POW, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "POW RML/RSL",
+					IRQF_SHARED, "POW RML_RSL",
 					cvmx_error_get_index(CVMX_SSO_ERR))) {
 			panic("Unable to request_irq(OCTEON_IRQ_POW)");
 		}
 #endif
 		if (request_irq(OCTEON_IRQ_L2C, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "L2C RML/RSL",
+					IRQF_SHARED, "L2C RML_RSL",
 					cvmx_error_get_index(CVMX_L2C_INT_REG))) {
 			panic("Unable to request_irq(OCTEON_IRQ_L2C)");
 		}
 		if (request_irq(OCTEON_IRQ_IPD, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "IPD RML/RSL",
+					IRQF_SHARED, "IPD RML_RSL",
 					cvmx_error_get_index(CVMX_IPD_INT_SUM))) {
 			panic("Unable to request_irq(OCTEON_IRQ_IPD)");
 		}
 		if (request_irq(OCTEON_IRQ_PIP, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "PIP RML/RSL",
+					IRQF_SHARED, "PIP RML_RSL",
 					cvmx_error_get_index(CVMX_PIP_INT_REG))) {
 			panic("Unable to request_irq(OCTEON_IRQ_PIP)");
 		}
 		if (request_irq(OCTEON_IRQ_PKO, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "PKO RML/RSL",
+					IRQF_SHARED, "PKO RML_RSL",
 					cvmx_error_get_index(CVMX_PKO_REG_ERROR))) {
 			panic("Unable to request_irq(OCTEON_IRQ_PKO)");
 		}
 		if (request_irq(OCTEON_IRQ_ZIP, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "ZIP RML/RSL",
+					IRQF_SHARED, "ZIP RML_RSL",
 					cvmx_error_get_index(CVMX_ZIP_ERROR))) {
 			panic("Unable to request_irq(OCTEON_IRQ_ZIP)");
 		}
 		if (request_irq(OCTEON_IRQ_RAD, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "RAD RML/RSL",
+					IRQF_SHARED, "RAD RML_RSL",
 					cvmx_error_get_index(CVMX_RAD_REG_ERROR))) {
 			panic("Unable to request_irq(OCTEON_IRQ_RAD)");
 		}
 		if (request_irq(OCTEON_IRQ_KEY, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "KEY RML/RSL",
+					IRQF_SHARED, "KEY RML_RSL",
 					cvmx_error_get_index(CVMX_KEY_INT_SUM))) {
 			panic("Unable to request_irq(OCTEON_IRQ_KEY)");
 		}
@@ -1268,23 +1268,23 @@ void prom_free_prom_memory(void)
 			cvmx_write_csr(CVMX_PEXP_SLI_INT_SUM, 1);
 		}
 		if (request_irq(OCTEON_IRQ_SLI, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "SLI RML/RSL",
+					IRQF_SHARED, "SLI RML_RSL",
 					cvmx_error_get_index(
 						CVMX_PEXP_SLI_INT_SUM))) {
 			panic("Unable to request_irq(OCTEON_IRQ_SLI)");
 		}
 		if (request_irq(OCTEON_IRQ_DFA, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "DFA RML/RSL",
+					IRQF_SHARED, "DFA RML_RSL",
 					cvmx_error_get_index(CVMX_DFA_ERROR))) {
 			panic("Unable to request_irq(OCTEON_IRQ_DFA)");
 		}
 		if (request_irq(OCTEON_IRQ_DPI, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "DPI RML/RSL",
+					IRQF_SHARED, "DPI RML_RSL",
 					cvmx_error_get_index(CVMX_DPI_INT_REG))) {
 			panic("Unable to request_irq(OCTEON_IRQ_DPI)");
 		}
 		if (request_irq(OCTEON_IRQ_AGL, octeon_rml_interrupt_v2,
-					IRQF_SHARED, "AGL RML/RSL",
+					IRQF_SHARED, "AGL RML_RSL",
 					cvmx_error_get_index(
 						CVMX_AGL_GMX_BAD_REG))) {
 			panic("Unable to request_irq(OCTEON_IRQ_AGL)");
@@ -1308,7 +1308,7 @@ void prom_free_prom_memory(void)
 			index = cvmx_error_get_index(CVMX_LMCX_INT(i));
 			if (request_irq(OCTEON_IRQ_LMC0 + i,
 					octeon_rml_interrupt_v2, IRQF_SHARED,
-					"LMC RML/RSL", index))
+					"LMC RML_RSL", index))
 				panic("Unable to request_irq(OCTEON_IRQ_LMC%d)", i);
 		}
 	} else {
-- 
1.7.0

