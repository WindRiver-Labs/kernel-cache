From 1e1eeb0a71366f18a53d27ab9dcbd0a37bfd92c7 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Fri, 15 Jul 2011 16:30:42 -0700
Subject: [PATCH 050/238] netdev: octeon-ethernet: Increase srio mailbox array.

Source: Cavium SDK 2.1.0-407

EBB66XX has 2 SRIO interfaces at srio_port 0 and srio_port 2.

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Integrated-by: Phil Staub <Phil.Staub@windriver.com>
---
 arch/mips/cavium-octeon/octeon-rapidio.c |   42 +++++++++++++++++++++++------
 drivers/net/octeon/ethernet.c            |    2 +-
 drivers/net/octeon/octeon-ethernet.h     |    2 +-
 3 files changed, 35 insertions(+), 11 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-rapidio.c b/arch/mips/cavium-octeon/octeon-rapidio.c
index c1f7d8d..3609439 100644
--- a/arch/mips/cavium-octeon/octeon-rapidio.c
+++ b/arch/mips/cavium-octeon/octeon-rapidio.c
@@ -24,6 +24,8 @@
 #include <asm/octeon/cvmx-dma-engine.h>
 #include <asm/octeon/cvmx-fpa.h>
 #include <asm/octeon/cvmx-config.h>
+#include <asm/octeon/cvmx-helper.h>
+#include <asm/octeon/cvmx-helper-util.h>
 
 #define RIO_PRINTK(mport, fmt, ...) \
 	printk(KERN_INFO "SRIO%d: " fmt, (mport)->id, ##__VA_ARGS__)
@@ -696,9 +698,11 @@ extern int cvm_oct_mem_fill_fpa(int pool, int size, int elements);
  */
 static int __init octeon_rio_init(void)
 {
-	static struct octeon_rio_port srio_ports[2];
+	static struct octeon_rio_port srio_ports[4];
 	static struct rio_ops srio_ops;
 	int count = 0;
+        int port_index = (OCTEON_IS_MODEL(OCTEON_CN66XX) ? 4 : 2);
+	cvmx_mio_rst_ctlx_t mio_rst_ctl;
 
 	int srio_port;
 	if (!octeon_has_feature(OCTEON_FEATURE_SRIO))
@@ -714,16 +718,36 @@ static int __init octeon_rio_init(void)
 	srio_ops.unmap = octeon_rio_mem_unmap;
 
 	memset(srio_ports, 0, sizeof(srio_ports));
-	for (srio_port = 0; srio_port < 2; srio_port++) {
-		cvmx_sriox_status_reg_t sriox_status_reg;
-		cvmx_mio_rst_ctlx_t mio_rst_ctl;
-		sriox_status_reg.u64 =
-			cvmx_read_csr(CVMX_SRIOX_STATUS_REG(srio_port));
-		if (!sriox_status_reg.s.srio)
-			continue;
+	for (srio_port = 0; srio_port < port_index; srio_port++) {
+		if (OCTEON_IS_MODEL(OCTEON_CN66XX))
+		{
+			int status = cvmx_helper_get_qlm_status(0);
+			switch(srio_port)
+			{
+			case 0:  /* 1x4 lane */
+				if (status != 4)
+					continue;
+				break;
+			case 2:  /* 2x2 lane */
+				if (status != 5)
+					continue;
+				break;
+			default:
+				continue;
+			}
+			mio_rst_ctl.u64 = cvmx_read_csr(CVMX_MIO_RST_CNTLX(srio_port));
+		}
+		else
+		{
+			cvmx_sriox_status_reg_t sriox_status_reg;
+			sriox_status_reg.u64 =
+				cvmx_read_csr(CVMX_SRIOX_STATUS_REG(srio_port));
+			if (!sriox_status_reg.s.srio)
+				continue;
+			mio_rst_ctl.u64 = cvmx_read_csr(CVMX_MIO_RST_CTLX(srio_port));
+		}
 		INIT_WORK(&srio_ports[srio_port].work, octeon_rio_work);
 		/* Only host mode ports enumerate. Endpoint does discovery */
-		mio_rst_ctl.u64 = cvmx_read_csr(CVMX_MIO_RST_CTLX(srio_port));
 		if (mio_rst_ctl.s.prtmode)
 			srio_ports[srio_port].mport.host_deviceid = srio_port;
 		else
diff --git a/drivers/net/octeon/ethernet.c b/drivers/net/octeon/ethernet.c
index 66538c4..cfbdb36 100644
--- a/drivers/net/octeon/ethernet.c
+++ b/drivers/net/octeon/ethernet.c
@@ -150,7 +150,7 @@ struct octeon_ethernet *cvm_oct_by_port[TOTAL_NUMBER_OF_PORTS] __cacheline_align
 /*
  * cvm_oct_by_srio_mbox is indexed by the SRIO mailbox.
  */
-struct octeon_ethernet *cvm_oct_by_srio_mbox[2][4];
+struct octeon_ethernet *cvm_oct_by_srio_mbox[4][4];
 
 /*
  * cvm_oct_list is a list of all cvm_oct_private_t created by this driver.
diff --git a/drivers/net/octeon/octeon-ethernet.h b/drivers/net/octeon/octeon-ethernet.h
index 9d6a2b1..34deff9 100644
--- a/drivers/net/octeon/octeon-ethernet.h
+++ b/drivers/net/octeon/octeon-ethernet.h
@@ -132,7 +132,7 @@ extern int pow_receive_group;
 extern char pow_send_list[];
 extern struct list_head cvm_oct_list;
 extern struct octeon_ethernet *cvm_oct_by_port[];
-extern struct octeon_ethernet *cvm_oct_by_srio_mbox[2][4];
+extern struct octeon_ethernet *cvm_oct_by_srio_mbox[4][4];
 
 extern struct workqueue_struct *cvm_oct_poll_queue;
 extern atomic_t cvm_oct_poll_queue_stopping;
-- 
1.7.0

