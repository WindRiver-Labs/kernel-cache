From 0b1a8854d390350bb8095f44bfc591717b451fb8 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Wed, 11 Apr 2012 09:54:08 +0800
Subject: [PATCH 186/238] MIPS: Octeon: Implement DCache errata workaround for all CN6XXX

Source: Cavium SDK 2.3-427

Signed-off-by: David Daney <david.daney@cavium.com>

Remove "select CAVIUM_CN63XXP1" of "config CAVIUM_OCTEON2". By default,
disable CN63XXP1 errata workarounds.

Signed-off-by: Jiang Bin <bin.jiang@windriver.com>
---
 arch/mips/cavium-octeon/Kconfig                |    8 +++-----
 arch/mips/cavium-octeon/setup.c                |    8 ++++----
 arch/mips/include/asm/mach-cavium-octeon/war.h |    3 +++
 arch/mips/mm/uasm.c                            |    2 +-
 4 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/arch/mips/cavium-octeon/Kconfig b/arch/mips/cavium-octeon/Kconfig
index 889979a..998bf7d 100644
--- a/arch/mips/cavium-octeon/Kconfig
+++ b/arch/mips/cavium-octeon/Kconfig
@@ -14,16 +14,14 @@ config CAVIUM_OCTEON2
          OcteonPlus processor cores.
 
 config CAVIUM_CN63XXP1
-	bool "Enable CN63XXP1 errata workarounds"
+	bool "Enable CN6XXX DCache prefetch errata workaround"
 	depends on CPU_CAVIUM_OCTEON
 	default "n"
 	help
-	  The CN63XXP1 chip requires build time workarounds to
+	  The CN6XXX chips require build time workarounds to
 	  function reliably, select this option to enable them.  These
 	  workarounds will cause a slight decrease in performance on
-	  non-CN63XXP1 hardware, so it is recommended to select "n"
-	  unless it is known the workarounds are needed.
-
+	  non-CN6XXX hardware.
 
 config CAVIUM_OCTEON_CHK_CVMX_PARAMETER
        bool "Build the kernel using -DCVMX_ENABLE_PARAMETER_CHECKING=1"
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 13beb4d..d11089f 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -1150,7 +1150,7 @@ void prom_free_prom_memory(void)
 #ifdef CONFIG_CAVIUM_DECODE_RSL
 	unsigned long irq_flags;
 #endif
-	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_X)) {
+	if (CAVIUM_OCTEON_DCACHE_PREFETCH_WAR) {
 		/* Check for presence of Core-14449 fix.  */
                 u32 insn;
                 u32 *foo;
@@ -1169,11 +1169,11 @@ void prom_free_prom_memory(void)
                         : "=r" (insn) : : "$31", "memory");
 
                 if ((insn >> 26) != 0x33)
-                        panic("No PREF instruction at Core-14449 probe point.\n");
+			panic("No PREF instruction at Core-14449 probe point.");
  
                 if (((insn >> 16) & 0x1f) != 28)
-                        panic("Core-14449 WAR not in place (%04x).\n"
-                                "Please build kernel with proper options (CONFIG_CAVIUM_OCTEON2).\n", insn);
+			panic("OCTEON II DCache prefetch workaround not in place (%04x).\n"
+				"Please build kernel with proper options (CONFIG_CAVIUM_CN63XXP1).", insn);
         }
 #ifdef CONFIG_CAVIUM_DECODE_RSL
  	/* Add an interrupt handler for general failures. */
diff --git a/arch/mips/include/asm/mach-cavium-octeon/war.h b/arch/mips/include/asm/mach-cavium-octeon/war.h
index c4712d7..fe903a4 100644
--- a/arch/mips/include/asm/mach-cavium-octeon/war.h
+++ b/arch/mips/include/asm/mach-cavium-octeon/war.h
@@ -23,4 +23,7 @@
 #define R10000_LLSC_WAR			0
 #define MIPS34K_MISSED_ITLB_WAR		0
 
+#define CAVIUM_OCTEON_DCACHE_PREFETCH_WAR	\
+	OCTEON_IS_MODEL(OCTEON_CN6XXX)
+
 #endif /* __ASM_MIPS_MACH_CAVIUM_OCTEON_WAR_H */
diff --git a/arch/mips/mm/uasm.c b/arch/mips/mm/uasm.c
index 811dba9..0829fa8 100644
--- a/arch/mips/mm/uasm.c
+++ b/arch/mips/mm/uasm.c
@@ -462,7 +462,7 @@ I_u1(_zcbt);
 void __uasminit uasm_i_pref(u32 **buf, unsigned int a, signed int b,
 			    unsigned int c)
 {
-	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_X) && a <= 24 && a != 5)
+	if (CAVIUM_OCTEON_DCACHE_PREFETCH_WAR && a <= 24 && a != 5)
 		/*
 		 * As per erratum Core-14449, replace prefetches 0-4,
 		 * 6-24 with 'pref 28'.
-- 
1.7.0

