From e764e4da3300475931451c819a7add64b34ef4b7 Mon Sep 17 00:00:00 2001
From: Adrian Alonso <adrian.alonso@nxp.com>
Date: Wed, 27 Jan 2016 17:49:33 -0600
Subject: [PATCH 05/85] MLK-12400: ARM: imx: imx6q: lppdr2 mmdc timing
 settings

Add support for saving initial boot mmdc timing settings,
restore timming settings when switching from low to high
lpddr2 ddr frequency.

Signed-off-by: Adrian Alonso <adrian.alonso@nxp.com>
Signed-off-by: Ranjani Vaidyanathan <ranjani.vaidyanathan@nxp.com>
(Cherry picked from commit 6787b0fea9eb1ba5cc21e2faf232c3e7d80ac028)
[zou:Original patch taken from
git://git.freescale.com/imx/linux-imx.git imx_4.1.15_2.0.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-imx/busfreq_lpddr2.c    |   87 ++++++++++++++++++++++++++++-----
 arch/arm/mach-imx/common.c            |    2 +-
 arch/arm/mach-imx/lpddr2_freq_imx6q.S |   51 ++++++++-----------
 3 files changed, 97 insertions(+), 43 deletions(-)

diff --git a/arch/arm/mach-imx/busfreq_lpddr2.c b/arch/arm/mach-imx/busfreq_lpddr2.c
index c42b872..cd20893 100644
--- a/arch/arm/mach-imx/busfreq_lpddr2.c
+++ b/arch/arm/mach-imx/busfreq_lpddr2.c
@@ -42,6 +42,7 @@
 #include <linux/proc_fs.h>
 #include <linux/sched.h>
 #include <linux/smp.h>
+#include <linux/slab.h>
 
 #include "common.h"
 #include "hardware.h"
@@ -57,7 +58,7 @@ extern void mx6_lpddr2_freq_change(u32 freq, int bus_freq_mode);
 extern void imx6_up_lpddr2_freq_change(u32 freq, int bus_freq_mode);
 extern unsigned long save_ttbr1(void);
 extern void restore_ttbr1(unsigned long ttbr1);
-extern void mx6q_lpddr2_freq_change(u32 freq, int bus_freq_mode);
+extern void mx6q_lpddr2_freq_change(u32 freq, void *ddr_settings);
 extern unsigned long ddr_freq_change_iram_base;
 extern unsigned long imx6_lpddr2_freq_change_start asm("imx6_lpddr2_freq_change_start");
 extern unsigned long imx6_lpddr2_freq_change_end asm("imx6_lpddr2_freq_change_end");
@@ -65,6 +66,27 @@ extern unsigned long mx6q_lpddr2_freq_change_start asm("mx6q_lpddr2_freq_change_
 extern unsigned long mx6q_lpddr2_freq_change_end asm("mx6q_lpddr2_freq_change_end");
 extern unsigned long iram_tlb_phys_addr;
 
+struct mmdc_settings_info {
+	u32 size;
+	void *settings;
+} __aligned(8);
+static struct mmdc_settings_info *mmdc_settings_info;
+void (*mx6_change_lpddr2_freq_smp)(u32 ddr_freq, struct mmdc_settings_info
+		*mmdc_settings_info) = NULL;
+
+static int mmdc_settings_size;
+static unsigned long (*mmdc_settings)[2];
+static unsigned long (*iram_mmdc_settings)[2];
+static unsigned long *iram_settings_size;
+static unsigned long *iram_ddr_freq_chage;
+unsigned long mmdc_timing_settings[][2] = {
+	{0x0C, 0x0},	/* mmdc_mdcfg0 */
+	{0x10, 0x0},	/* mmdc_mdcfg1 */
+	{0x14, 0x0},	/* mmdc_mdcfg2 */
+	{0x18, 0x0},	/* mmdc_mdmisc */
+	{0x38, 0x0},	/* mmdc_mdcfg3lp */
+};
+
 #ifdef CONFIG_SMP
 volatile u32 *wait_for_lpddr2_freq_update;
 static unsigned int online_cpus;
@@ -77,8 +99,6 @@ extern void __iomem *imx_scu_base;
 static void __iomem *gic_dist_base;
 #endif
 
-#define SMP_WFE_CODE_SIZE 0x400
-
 #ifdef CONFIG_SMP
 static irqreturn_t wait_in_wfe_irq(int irq, void *dev_id)
 {
@@ -152,11 +172,10 @@ int init_mmdc_lpddr2_settings(struct platform_device *busfreq_pdev)
 int update_lpddr2_freq_smp(int ddr_rate)
 {
 	unsigned long ttbr1;
-	int me = 0;
-	int mode = get_bus_freq_mode();
+	int i, me = 0;
 #ifdef CONFIG_SMP
 	int cpu = 0;
-	u32 reg;
+	u32 reg = 0;
 #endif
 
 	if (ddr_rate == curr_ddr_rate)
@@ -164,6 +183,14 @@ int update_lpddr2_freq_smp(int ddr_rate)
 
 	printk(KERN_DEBUG "Bus freq set to %d start...\n", ddr_rate);
 
+	for (i=0; i < mmdc_settings_size; i++) {
+		iram_mmdc_settings[i][0] = mmdc_settings[i][0];
+		iram_mmdc_settings[i][1] = mmdc_settings[i][1];
+	}
+
+	mmdc_settings_info->size = mmdc_settings_size;
+	mmdc_settings_info->settings = iram_mmdc_settings;
+
 	/* ensure that all Cores are in WFE. */
 	local_irq_disable();
 
@@ -197,6 +224,7 @@ int update_lpddr2_freq_smp(int ddr_rate)
 
 	/* Wait for the other active CPUs to idle */
 	while (1) {
+		reg = 0;
 		reg = readl_relaxed(imx_scu_base + 0x08);
 		reg |= (0x02 << (me * 8));
 		if (reg == online_cpus)
@@ -216,8 +244,7 @@ int update_lpddr2_freq_smp(int ddr_rate)
 	ttbr1 = save_ttbr1();
 
 	/* Now change DDR frequency. */
-	mx6_change_lpddr2_freq(ddr_rate,
-		(mode == BUS_FREQ_LOW || mode == BUS_FREQ_ULTRA_LOW) ? 1 : 0);
+	mx6_change_lpddr2_freq_smp(ddr_rate, mmdc_settings_info);
 
 	restore_ttbr1(ttbr1);
 
@@ -233,6 +260,7 @@ int update_lpddr2_freq_smp(int ddr_rate)
 #endif
 
 	local_irq_enable();
+
 	printk(KERN_DEBUG "Bus freq set to %d done! cpu=%d\n", ddr_rate, me);
 
 	return 0;
@@ -240,14 +268,36 @@ int update_lpddr2_freq_smp(int ddr_rate)
 
 int init_mmdc_lpddr2_settings_mx6q(struct platform_device *busfreq_pdev)
 {
-	unsigned long ddr_code_size;
-#ifdef CONFIG_SMP
 	struct device *dev = &busfreq_pdev->dev;
+	unsigned long ddr_code_size = 0;
+	unsigned long wfe_code_size = 0;
 	struct device_node *node;
+	void __iomem *mmdc_base;
+	int i;
+#ifdef CONFIG_SMP
 	struct irq_data *d;
 	u32 cpu;
 	int err;
+#endif
 
+	node = of_find_compatible_node(NULL, NULL, "fsl,imx6q-mmdc");
+	if (!node) {
+		printk(KERN_ERR "failed to find mmdc device tree data!\n");
+		return -EINVAL;
+	}
+
+	mmdc_base = of_iomap(node, 0);
+	if (!mmdc_base) {
+		dev_err(dev, "unable to map mmdc registers\n");
+		return -EINVAL;
+	}
+
+	mmdc_settings_size = ARRAY_SIZE(mmdc_timing_settings);
+	mmdc_settings = kmalloc((mmdc_settings_size * 8), GFP_KERNEL);
+	memcpy(mmdc_settings, mmdc_timing_settings,
+			sizeof(mmdc_timing_settings));
+
+#ifdef CONFIG_SMP
 	node = of_find_compatible_node(NULL, NULL, "arm,cortex-a9-gic");
 	if (!node) {
 		printk(KERN_ERR "failed to find imx6q-a9-gic device tree data!\n");
@@ -284,15 +334,26 @@ int init_mmdc_lpddr2_settings_mx6q(struct platform_device *busfreq_pdev)
 	/* Stoange_iram_basee the variable used to communicate between cores in
 	 * a non-cacheable IRAM area */
 	wait_for_lpddr2_freq_update = (u32 *)ddr_freq_change_iram_base;
+	wfe_code_size = (&wfe_smp_freq_change_end - &wfe_smp_freq_change_start) *4;
+
 	wfe_change_lpddr2_freq = (void *)fncpy((void *)ddr_freq_change_iram_base + 0x8,
-			&wfe_smp_freq_change, SMP_WFE_CODE_SIZE - 0x8);
+			&wfe_smp_freq_change, wfe_code_size);
 #endif
+	iram_settings_size = (void *)ddr_freq_change_iram_base + wfe_code_size + 0x8;
+	iram_mmdc_settings = (void *)iram_settings_size + 0x8;
+	iram_ddr_freq_chage = (void *)iram_mmdc_settings + (mmdc_settings_size * 8) + 0x8;
+	mmdc_settings_info = (struct mmdc_settings_info *)iram_settings_size;
+
 	ddr_code_size = (&mx6q_lpddr2_freq_change_end -&mx6q_lpddr2_freq_change_start) *4;
 
-	mx6_change_lpddr2_freq = (void *)fncpy(
-			(void *)ddr_freq_change_iram_base + SMP_WFE_CODE_SIZE,
+	mx6_change_lpddr2_freq_smp = (void *)fncpy(iram_ddr_freq_chage,
 			&mx6q_lpddr2_freq_change, ddr_code_size);
 
+	/* save initial mmdc boot timing settings */
+	for (i=0; i < mmdc_settings_size; i++)
+		mmdc_settings[i][1] = readl_relaxed(mmdc_base +
+				mmdc_settings[i][0]);
+
 	curr_ddr_rate = ddr_normal_rate;
 
 	return 0;
diff --git a/arch/arm/mach-imx/common.c b/arch/arm/mach-imx/common.c
index c375cc4..c53f9c4 100644
--- a/arch/arm/mach-imx/common.c
+++ b/arch/arm/mach-imx/common.c
@@ -146,7 +146,7 @@ u32 mx6q_lpddr2_freq_change_start, mx6q_lpddr2_freq_change_end;
 u32 wfe_smp_freq_change_start, wfe_smp_freq_change_end;
 void mx6_ddr3_freq_change(u32 freq, void *ddr_settings,
 	bool dll_mode, void *iomux_offsets) {}
-void mx6q_lpddr2_freq_change(u32 freq, int bus_freq_mode) {}
+void mx6q_lpddr2_freq_change(u32 freq, void *ddr_settings) {}
 void wfe_smp_freq_change(u32 cpuid, u32 *ddr_freq_change_done) {}
 #endif
 
diff --git a/arch/arm/mach-imx/lpddr2_freq_imx6q.S b/arch/arm/mach-imx/lpddr2_freq_imx6q.S
index 6bf0db6..1eb83a4 100644
--- a/arch/arm/mach-imx/lpddr2_freq_imx6q.S
+++ b/arch/arm/mach-imx/lpddr2_freq_imx6q.S
@@ -228,14 +228,14 @@ wait_div_update2:
 
 	.endm
 
-	.macro set_timings_below_100MHz_operation
+	.macro	set_timings_below_100MHz_operation
 	/* Set MMDCx_MISC[RALAT] = 2 cycles */
 	ldr	r6, [r8, #0x18]
 	bic	r6, r6, #(0x7 << 6)
 	orr	r6, r6, #(0x2 << 6)
 	str	r6, [r8, #0x18]
 
-	/* Adjust LPDDR2 timmings for 24Mhz operation */
+	/* Adjust LPDDR2 timings for 24Mhz operation */
 	ldr	r5, =0x03032073
 	str	r5, [r8, #0xC]  	/* MMDC0_MDCFG0 */
 	ldr	r7, =0x00020482
@@ -264,37 +264,30 @@ skip_below_100Mhz_ch1_timings:
 
 	.endm
 
-	.macro set_timmings_above_100MHz_operation
-	/* Set MMDCx_MISC[RALAT] = 5 cycles */
-	ldr	r6, [r8, #0x18]
-	bic	r6, r6, #(0x7 << 6)
-	orr	r6, r6, #(0x5 << 6)
-	str	r6, [r8, #0x18]
-
-	/* Adjust LPDDR2 timmings for 400Mhz operation */
-	ldr	r5, =0x33374133
-	str	r5, [r8, #0xC]  	/* MMDC0_MDCFG0 */
-	ldr	r7, =0x00100A82
-	str	r7, [r8, #0x10] 	/* MMDC0_MDCFG1 */
-	ldr	r9, =0x00000093
-	str	r9, [r8, #0x14] 	/* MMDC0_MDCFG2 */
-	ldr	r10, =0x001A0889
-	str	r10, [r8, #0x38] 	/* MMDC0_MDCFG3LP */
+	.macro	set_timings_above_100MHz_operation
+	/* restore timing from mmdc_settings_info */
+	ldr	r6, [r1, #0x0]
+	ldr	r7, [r1, #0x4]
+tloop:
+	ldr	r9, [r7], #0x4
+	ldr	r10, [r7], #0x4
+	str	r10, [r8, r9]
+	subs	r6, r6, #0x1
+	bne	tloop
 
 	/* Check if lpddr2 channel 1 is enabled */
 	ldr	r6, [r8, #0x18]
 	ands	r6, r6, #(1 << 2)
 	beq	skip_above_100Mhz_ch1_timings
 
-	ldr	r6, [r4, #0x18]
-	bic	r6, r6, #(0x7 << 6)
-	orr	r6, r6, #(0x5 << 6)
-	str	r6, [r4, #0x18]
-
-	str	r5, [r4, #0xC]  	/* MMDC1_MDCFG0 */
-	str	r7, [r4, #0x10] 	/* MMDC1_MDCFG1 */
-	str	r9, [r4, #0x14] 	/* MMDC1_MDCFG2 */
-	str	r10, [r4, #0x38] 	/* MMDC1_MDCFG3LP */
+	ldr	r6, [r1, #0x0]
+	ldr	r7, [r1, #0x4]
+tloop2:
+	ldr	r9, [r7], #0x4
+	ldr	r10, [r7], #0x4
+	str	r10, [r4, r9]
+	subs	r6, r6, #0x1
+	bne	tloop2
 
 skip_above_100Mhz_ch1_timings:
 
@@ -390,7 +383,7 @@ skip_lower_force_measure_ch1:
 
 	.macro	mmdc_clk_above_100MHz
 
-	set_timmings_above_100MHz_operation
+	set_timings_above_100MHz_operation
 
 	/* Make sure that the PHY measurement unit is NOT in bypass mode */
 	ldr	r5, =0x8B8
@@ -438,7 +431,7 @@ skip_above_force_measure_ch1:
  *  Make sure DDR is in self-refresh.
  *  IRQs are already disabled.
  * r0 : DDR freq.
- * r1: low_bus_freq_mode flag
+ * r1 : mmdc_settings_info
  */
 	.align 3
 ENTRY(mx6q_lpddr2_freq_change)
-- 
1.7.5.4

