From 07cd872d0b0e4f3f3e58eeeeca1ee0ea0b61a84f Mon Sep 17 00:00:00 2001
From: Richard Zhu <hongxing.zhu@nxp.com>
Date: Fri, 2 Sep 2016 16:42:26 +0800
Subject: [PATCH 70/85] MLK-13178-2 pci: imx6: add one regulator for ext osc

On imx6qp sabresd rev b board, there is a standalone
external oscilator, used to provided the clks for
imx6qp pcie.

Add one regulator into pcie node, let the ext osc work.

Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
(cherry picked from commit 891e336212fe9a8a8fd71f4d78868faaa9481d32)
[zou:Original patch taken from
git://git.freescale.com/imx/linux-imx.git imx_4.1.15_2.0.0_ga]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/pci/host/pci-imx6.c |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
index 1bfc70b..c519e8e 100644
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -59,6 +59,7 @@ struct imx6_pcie {
 	struct regmap		*reg_src;
 	void __iomem		*mem_base;
 	struct regulator	*pcie_phy_regulator;
+	struct regulator	*pcie_bus_regulator;
 };
 
 /* PCIe Root Complex registers (memory-mapped) */
@@ -471,6 +472,12 @@ static void imx6_pcie_init_phy(struct pcie_port *pp)
 				IMX6SX_GPR12_RX_EQ_MASK, IMX6SX_GPR12_RX_EQ_2);
 	}
 
+	if (imx6_pcie->pcie_bus_regulator != NULL) {
+		ret = regulator_enable(imx6_pcie->pcie_bus_regulator);
+		if (ret)
+			dev_err(pp->dev, "failed to enable pcie regulator.\n");
+	}
+
 	if (!is_imx7d_pcie(imx6_pcie)) {
 		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
 				IMX6Q_GPR12_PCIE_CTL_2, 0 << 10);
@@ -527,6 +534,8 @@ static int imx6_pcie_wait_for_link(struct pcie_port *pp)
 			release_bus_freq(BUS_FREQ_HIGH);
 			if (imx6_pcie->pcie_phy_regulator != NULL)
 				regulator_disable(imx6_pcie->pcie_phy_regulator);
+			if (imx6_pcie->pcie_bus_regulator != NULL)
+				regulator_disable(imx6_pcie->pcie_bus_regulator);
 		}
 		return -EINVAL;
 	}
@@ -1008,6 +1017,8 @@ static int pci_imx_suspend_noirq(struct device *dev)
 		/* Power down PCIe PHY. */
 		if (imx6_pcie->pcie_phy_regulator != NULL)
 			regulator_disable(imx6_pcie->pcie_phy_regulator);
+		if (imx6_pcie->pcie_bus_regulator != NULL)
+			regulator_disable(imx6_pcie->pcie_bus_regulator);
 		if (gpio_is_valid(imx6_pcie->power_on_gpio))
 			gpio_set_value_cansleep(imx6_pcie->power_on_gpio, 0);
 	} else {
@@ -1179,6 +1190,11 @@ static int __init imx6_pcie_probe(struct platform_device *pdev)
 		return PTR_ERR(imx6_pcie->pcie);
 	}
 
+	imx6_pcie->pcie_bus_regulator = devm_regulator_get(pp->dev,
+			"pcie-bus");
+	if (IS_ERR(imx6_pcie->pcie_bus_regulator))
+		imx6_pcie->pcie_bus_regulator = NULL;
+
 	/* Grab GPR config register range */
 	if (is_imx7d_pcie(imx6_pcie)) {
 		imx6_pcie->iomuxc_gpr =
-- 
1.7.5.4

