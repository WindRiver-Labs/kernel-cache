From 04b2a07ef4df2568ed4bf3c85b23e20020521ef5 Mon Sep 17 00:00:00 2001
From: Sanyog Kale <sanyog.r.kale@intel.com>
Date: Wed, 23 Nov 2016 11:13:02 +0530
Subject: [PATCH 4031/4301] SoundWire: Bus header file changes for BRA feature

commit 2a11987a39ea7282e9790391bdba74a61457a9f6 from
git://git@github.com:01org/linux-intel-4.9.git

This patch includes:
	- Bus API for supporting BRA feature.
	- BRA defines as per MIPI 1.1 spec.

Signed-off-by: Sanyog Kale <sanyog.r.kale@intel.com>
---
 drivers/sdw/sdw_priv.h  |    2 +
 include/linux/sdw_bus.h |   74 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 76 insertions(+), 0 deletions(-)

diff --git a/drivers/sdw/sdw_priv.h b/drivers/sdw/sdw_priv.h
index 38e597d..b165d72 100644
--- a/drivers/sdw/sdw_priv.h
+++ b/drivers/sdw/sdw_priv.h
@@ -267,6 +267,8 @@ int sdw_bus_bw_init(void);
 int sdw_mstr_bw_init(struct sdw_bus *sdw_bs);
 int sdw_bus_calc_bw(struct sdw_stream_tag *stream_tag, bool enable);
 int sdw_bus_calc_bw_dis(struct sdw_stream_tag *stream_tag, bool unprepare);
+int sdw_bus_bra_xport_config(struct sdw_bus *sdw_mstr_bs,
+	struct sdw_bra_block *block, bool enable);
 int sdw_chn_enable(void);
 void sdw_unlock_mstr(struct sdw_master *mstr);
 int sdw_trylock_mstr(struct sdw_master *mstr);
diff --git a/include/linux/sdw_bus.h b/include/linux/sdw_bus.h
index c17a6d7..3c7d4cb 100644
--- a/include/linux/sdw_bus.h
+++ b/include/linux/sdw_bus.h
@@ -60,6 +60,66 @@
 #define SDW_PORT_ENCODING_TYPE_SIGN_MAGNITUDE	0x2
 #define SDW_PORT_ENCODING_TYPE_IEEE_32_FLOAT	0x4
 
+#define SDW_BRA_PORT_ID			0
+#define SDW_BRA_CHN_MASK		0x1
+
+#define SDW_BRA_HEADER_SIZE		6 /* In bytes */
+#define SDW_BRA_HEADER_CRC_SIZE		1 /* In bytes */
+#define SDW_BRA_DATA_CRC_SIZE		1 /* In bytes */
+#define SDW_BRA_HEADER_RESP_SIZE	1 /* In bytes */
+#define SDW_BRA_FOOTER_RESP_SIZE	1 /* In bytes */
+#define SDW_BRA_PADDING_SZ		1 /* In bytes */
+#define SDW_BRA_HEADER_TOTAL_SZ		8 /* In bytes */
+
+#define SDW_BRA_BPT_PAYLOAD_TYPE	0x0
+#define SDW_BRA_BPT_PYLD_TY_MASK	0xFF3FFFFF
+#define SDW_BRA_BPT_PYLD_TY_SHIFT	22
+
+#define SDW_BRA_HDR_ACTIVE		0x3
+#define SDW_BRA_HDR_ACTIVE_SHIFT	6
+#define SDW_BRA_HDR_ACTIVE_MASK		0x3F
+
+#define SDW_BRA_HDR_SLV_ADDR_SHIFT	2
+#define SDW_BRA_HDR_SLV_ADDR_MASK	0xC3
+
+#define SDW_BRA_HDR_RD_WR_SHIFT		1
+#define SDW_BRA_HDR_RD_WR_MASK		0xFD
+
+#define SDW_BRA_HDR_MSB_BYTE_SET	1
+#define SDW_BRA_HDR_MSB_BYTE_UNSET	0
+#define SDW_BRA_HDR_MSB_BYTE_CHK	255
+#define SDW_BRA_HDR_MSB_BYTE_MASK	0xFE
+#define SDW_BRA_HDR_MSB_BYTE_SHIFT	0
+
+#define SDW_BRA_HDR_SLV_REG_OFF_SHIFT0	0
+#define SDW_BRA_HDR_SLV_REG_OFF_MASK0	0xFF
+#define SDW_BRA_HDR_SLV_REG_OFF_SHIFT8	8
+#define SDW_BRA_HDR_SLV_REG_OFF_MASK8	0xFF00
+#define SDW_BRA_HDR_SLV_REG_OFF_SHIFT16	16
+#define SDW_BRA_HDR_SLV_REG_OFF_MASK16	0xFF0000
+#define SDW_BRA_HDR_SLV_REG_OFF_SHIFT24	24
+#define SDW_BRA_HDR_SLV_REG_OFF_MASK24	0xFF000000
+
+#define SDW_BRA_HDR_RESP_ACK_SHIFT	3
+#define SDW_BRA_HDR_RESP_NRDY_SHIFT	5
+#define SDW_BRA_FTR_RESP_ACK_SHIFT	2
+#define SDW_BRA_FTR_RESP_RES_SHIFT	4
+#define SDW_BRA_HDR_RESP_ACK_MASK	0x3
+#define SDW_BRA_HDR_RESP_NRDY_MASK	0x1
+#define SDW_BRA_FTR_RESP_ACK_MASK	0x3
+#define SDW_BRA_FTR_RESP_RES_MASK	0x1
+
+#define SDW_BRA_TARGET_READY		0
+#define SDW_BRA_TARGET_NOT_READY	1
+
+#define SDW_BRA_ACK_NAK_IGNORED		0
+#define SDW_BRA_ACK_NAK_OK		1
+#define SDW_BRA_ACK_NAK_FAILED_ABORT	2
+#define SDW_BRA_ACK_NAK_RSVD_ABORT	3
+
+#define SDW_BRA_FTR_RESULT_GOOD		0
+#define SDW_BRA_FTR_RESULT_BAD		1
+
 /* enum sdw_driver_type: There are different driver callbacks for slave and
  *			master. This is to differentiate between slave driver
  *			and master driver. Bus driver binds master driver to
@@ -1349,6 +1409,15 @@ struct sdw_master *sdw_get_master(int nr);
  */
 void sdw_put_master(struct sdw_master *mstr);
 
+/**
+ * sdw_slave_xfer_bra_block: Transfer the data block using the BTP/BRA
+ *				protocol.
+ * @mstr: SoundWire Master Master
+ * @block: Data block to be transferred.
+ */
+int sdw_slave_xfer_bra_block(struct sdw_master *mstr,
+				struct sdw_bra_block *block);
+
 
 /**
  * module_sdw_slave_driver() - Helper macro for registering a sdw Slave driver
@@ -1460,6 +1529,11 @@ static inline void sdw_slave_set_drvdata(struct sdw_slave *slv,
 	dev_set_drvdata(&slv->dev, data);
 }
 
+static inline void *sdw_master_get_platdata(const struct sdw_master *mstr)
+{
+	return dev_get_platdata(&mstr->dev);
+}
+
 /**
  * sdw_slave_get_bus_params: Get the current bus params. Some Slaves
  *			requires bus params at the probe to program its
-- 
1.7.5.4

