From a1b8ae3cc4a10a68059eedc1bbc6e68dc38c3f7f Mon Sep 17 00:00:00 2001
From: Wenlin Kang <wenlin.kang@windriver.com>
Date: Wed, 8 May 2019 14:06:31 +0800
Subject: [PATCH] SoundWire: fixes two compile error

This issue was introduced by commit b816e8ac3d6d3a497f2034dcd8dbbdc1340e6833
(SoundWire: Add support to register slaves on enumeration), it used function
kthread_init_work() and kthread_queue_work(), but the two only was exist
after upstream commit 3989144f863a(kthread: kthread worker API cleanup),
so change them to previous name.

This patch fixes the following error:

| drivers/sdw/sdw.c: In function 'sdw_register_master':
| drivers/sdw/sdw.c:1705:2: error: implicit declaration of function 'kthread_init_worker' [-Werror=implicit-function-declaration]
|   kthread_init_worker(&sdw_bus->kworker);
|   ^~~~~~~~~~~~~~~~~~~
| drivers/sdw/sdw.c:1714:2: error: implicit declaration of function 'kthread_init_work' [-Werror=implicit-function-declaration]
|   kthread_init_work(&sdw_bus->kwork, handle_slave_status);
|   ^~~~~~~~~~~~~~~~~
| drivers/sdw/sdw.c: In function 'sdw_master_update_slv_status':
| drivers/sdw/sdw.c:1774:2: error: implicit declaration of function 'kthread_queue_work' [-Werror=implicit-function-declaration]
|   kthread_queue_work(&bus->kworker, &bus->kwork);
|   ^~~~~~~~~~~~~~~~~~
| drivers/sdw/sdw.c: In function 'sdw_mstr_deprep_after_clk_start':
| drivers/sdw/sdw.c:3324:3: warning: this 'if' clause does not guard... [-Wmisleading-indentation]
|    if (slave->driver && slave->driver->post_clk_stop_prep)
|    ^~
| drivers/sdw/sdw.c:3332:4: note: ...this statement, but the latter is misleadingly indented as if it is guarded by the 'if'
|     if (ret)
|     ^~

Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/sdw/sdw.c | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/drivers/sdw/sdw.c b/drivers/sdw/sdw.c
index c05001666cc2..ab92115d8982 100644
--- a/drivers/sdw/sdw.c
+++ b/drivers/sdw/sdw.c
@@ -1702,7 +1702,7 @@ static int sdw_register_master(struct sdw_master *mstr)
 	ret = device_register(&mstr->dev);
 	if (ret)
 		goto out_list;
-	kthread_init_worker(&sdw_bus->kworker);
+	init_kthread_worker(&sdw_bus->kworker);
 	sdw_bus->status_thread = kthread_run(kthread_worker_fn,
 					&sdw_bus->kworker, "%s",
 					dev_name(&mstr->dev));
@@ -1711,7 +1711,7 @@ static int sdw_register_master(struct sdw_master *mstr)
 		ret = PTR_ERR(sdw_bus->status_thread);
 		goto task_failed;
 	}
-	kthread_init_work(&sdw_bus->kwork, handle_slave_status);
+	init_kthread_work(&sdw_bus->kwork, handle_slave_status);
 	INIT_LIST_HEAD(&sdw_bus->status_list);
 	spin_lock_init(&sdw_bus->spinlock);
 	ret = sdw_mstr_bw_init(sdw_bus);
@@ -1771,7 +1771,7 @@ int sdw_master_update_slv_status(struct sdw_master *mstr,
 	list_add_tail(&slv_status->node, &bus->status_list);
 	spin_unlock_irqrestore(&bus->spinlock, flags);
 
-	kthread_queue_work(&bus->kworker, &bus->kwork);
+	queue_kthread_work(&bus->kworker, &bus->kwork);
 	return 0;
 }
 EXPORT_SYMBOL_GPL(sdw_master_update_slv_status);
@@ -3325,12 +3325,12 @@ int sdw_mstr_deprep_after_clk_start(struct sdw_master *mstr)
 			ret = slave->driver->post_clk_stop_prep(slave,
 							clock_stop_mode,
 							stop);
-			/*
-			 * Even if Slave fails we continue with other
-			 * Slaves. This should never happen ideally.
-			 */
-			if (ret)
-				dev_err(&mstr->dev, "Post de-prepare failed for Slave %d\n",
+		/*
+		 * Even if Slave fails we continue with other
+		 * Slaves. This should never happen ideally.
+		 */
+		if (ret)
+			dev_err(&mstr->dev, "Post de-prepare failed for Slave %d\n",
 					slave->slv_number);
 	}
 	return 0;
-- 
2.17.1

