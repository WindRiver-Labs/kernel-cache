From f1c31f249f871d3b01b6612cbb6cec5fa997d4f2 Mon Sep 17 00:00:00 2001
From: Shreyas NC <shreyas.nc@intel.com>
Date: Fri, 6 Jan 2017 09:10:20 +0530
Subject: [PATCH 4087/4301] ASoC: Intel: Skylake: Parse and update module
 config structure

commit debe33e748120508ae41e4a57f03c4981cfc00d4 from
git://git@github.com:01org/linux-intel-4.9.git

A DSP path and the modules in the path can support various
configurations. The list of supported configurations from topology
would be stored and later selected runtime based on the hw params.

So, change the relevant structures and populate them by parsing
tokens.

Change-Id: I1d6835171230a45fd9a3a20fd1df754a636c9ee2
Signed-off-by: Shreyas NC <shreyas.nc@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/13459
Reviewed-by: Kale, Sanyog R <sanyog.r.kale@intel.com>
Reviewed-by: Singh, Guneshwor O <guneshwor.o.singh@intel.com>
Reviewed-by: Diwakar, Praveen <praveen.diwakar@intel.com>
Tested-by: Sm, Bhadur A <bhadur.a.sm@intel.com>
[Kevin: Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 sound/soc/intel/skylake/skl-messages.c |   81 ++++--
 sound/soc/intel/skylake/skl-pcm.c      |    6 +-
 sound/soc/intel/skylake/skl-topology.c |  521 +++++++++++++++++++++++++-------
 sound/soc/intel/skylake/skl-topology.h |   40 +++
 4 files changed, 522 insertions(+), 126 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index cfbc0ef..23c71b2 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -1209,6 +1209,26 @@ enum skl_bitdepth skl_get_bit_depth(int params)
 	}
 }
 
+static struct
+skl_module_fmt *skl_get_pin_format(struct skl_module_cfg *mconfig,
+					u8 pin_direction, u8 pin_idx)
+{
+	struct skl_module *module = mconfig->module;
+	int fmt_idx = mconfig->fmt_idx;
+	struct skl_module_intf *intf;
+	struct skl_module_fmt *pin_fmt;
+
+	intf = &module->formats[fmt_idx];
+
+	if (pin_direction == SKL_INPUT_PIN)
+		pin_fmt = &intf->input[pin_idx].pin_fmt;
+	else
+		pin_fmt = &intf->output[pin_idx].pin_fmt;
+
+	return pin_fmt;
+}
+
+
 /*
  * Each module in DSP expects a base module configuration, which consists of
  * PCM format information, which we calculate in driver and resource values
@@ -1219,9 +1239,15 @@ static void skl_set_base_module_format(struct skl_sst *ctx,
 			struct skl_module_cfg *mconfig,
 			struct skl_base_cfg *base_cfg)
 {
-	struct skl_module_fmt *format = &mconfig->in_fmt[0];
+	struct skl_module *module = mconfig->module;
+	int res_idx = mconfig->res_idx;
+	struct skl_module_res *res;
+	struct  skl_module_fmt *format;
 
-	base_cfg->audio_fmt.number_of_channels = (u8)format->channels;
+	res = &module->resources[res_idx];
+
+	format = skl_get_pin_format(mconfig, SKL_INPUT_PIN, 0);
+	base_cfg->audio_fmt.number_of_channels = format->channels;
 
 	base_cfg->audio_fmt.s_freq = format->s_freq;
 	base_cfg->audio_fmt.bit_depth = format->bit_depth;
@@ -1237,10 +1263,10 @@ static void skl_set_base_module_format(struct skl_sst *ctx,
 
 	base_cfg->audio_fmt.interleaving = format->interleaving_style;
 
-	base_cfg->cps = mconfig->mcps;
-	base_cfg->ibs = mconfig->ibs;
-	base_cfg->obs = mconfig->obs;
-	base_cfg->is_pages = mconfig->mem_pages;
+	base_cfg->cps = res->cps;
+	base_cfg->ibs = res->ibs;
+	base_cfg->obs = res->obs;
+	base_cfg->is_pages = res->is_pages;
 }
 
 /*
@@ -1337,6 +1363,10 @@ static void skl_setup_cpr_gateway_cfg(struct skl_sst *ctx,
 			struct skl_module_cfg *mconfig,
 			struct skl_cpr_cfg *cpr_mconfig)
 {
+	struct skl_module_res *res;
+	int res_idx = mconfig->res_idx;
+	struct skl *skl = get_skl_ctx(ctx->dev);
+
 	cpr_mconfig->gtw_cfg.node_id = skl_get_node_id(ctx, mconfig);
 
 	if (cpr_mconfig->gtw_cfg.node_id == SKL_NON_GATEWAY_CPR_NODE_ID) {
@@ -1344,11 +1374,20 @@ static void skl_setup_cpr_gateway_cfg(struct skl_sst *ctx,
 		return;
 	}
 
+	if (skl->nr_modules == 0) {
+		res = &mconfig->module->resources[res_idx];
+	} else {
+		res = &mconfig->module->resources[mconfig->res_idx];
+		cpr_mconfig->gtw_cfg.dma_buffer_size = res->dma_buffer_size;
+		goto skip_buf_size_calc;
+	}
+	
 	if (SKL_CONN_SOURCE == mconfig->hw_conn_type)
-		cpr_mconfig->gtw_cfg.dma_buffer_size = 2 * mconfig->obs;
+		cpr_mconfig->gtw_cfg.dma_buffer_size = 2 * res->obs;
 	else
-		cpr_mconfig->gtw_cfg.dma_buffer_size = 2 * mconfig->ibs;
+		cpr_mconfig->gtw_cfg.dma_buffer_size = 2 * res->ibs;
 
+skip_buf_size_calc:
 	cpr_mconfig->cpr_feature_mask = 0;
 	cpr_mconfig->gtw_cfg.config_length  = 0;
 
@@ -1396,7 +1435,9 @@ static void skl_setup_out_format(struct skl_sst *ctx,
 			struct skl_module_cfg *mconfig,
 			struct skl_audio_data_format *out_fmt)
 {
-	struct skl_module_fmt *format = &mconfig->out_fmt[0];
+	struct skl_module_fmt *format;
+
+	format = skl_get_pin_format(mconfig, SKL_OUTPUT_PIN, 0);
 
 	out_fmt->number_of_channels = (u8)format->channels;
 	out_fmt->s_freq = format->s_freq;
@@ -1421,12 +1462,14 @@ static void skl_set_src_format(struct skl_sst *ctx,
 			struct skl_module_cfg *mconfig,
 			struct skl_src_module_cfg *src_mconfig)
 {
-	struct skl_module_fmt *fmt = &mconfig->out_fmt[0];
+	struct skl_module_fmt *format;
+
+	format = skl_get_pin_format(mconfig, SKL_OUTPUT_PIN, 0);
 
 	skl_set_base_module_format(ctx, mconfig,
 		(struct skl_base_cfg *)src_mconfig);
 
-	src_mconfig->src_cfg = fmt->s_freq;
+	src_mconfig->src_cfg = format->s_freq;
 }
 
 /*
@@ -1438,16 +1481,18 @@ static void skl_set_updown_mixer_format(struct skl_sst *ctx,
 			struct skl_module_cfg *mconfig,
 			struct skl_up_down_mixer_cfg *mixer_mconfig)
 {
-	struct skl_module_fmt *fmt = &mconfig->out_fmt[0];
 	int i = 0;
+	struct skl_module_fmt *format;
+
+	format = skl_get_pin_format(mconfig, SKL_OUTPUT_PIN, 0);
 
 	skl_set_base_module_format(ctx,	mconfig,
 		(struct skl_base_cfg *)mixer_mconfig);
-	mixer_mconfig->out_ch_cfg = fmt->ch_cfg;
+	mixer_mconfig->out_ch_cfg = format->ch_cfg;
 
 	/* Select F/W default coefficient */
 	mixer_mconfig->coeff_sel = 0x0;
-	mixer_mconfig->ch_map = fmt->ch_map;
+	mixer_mconfig->ch_map = format->ch_map;
 
 	/* User coeff, don't care since we are selecting F/W defaults */
 	for (i = 0; i < UP_DOWN_MIXER_MAX_COEFF; i++)
@@ -1894,8 +1939,8 @@ int skl_unbind_modules(struct skl_sst *ctx,
 	struct skl_ipc_bind_unbind_msg msg;
 	struct skl_module_inst_id src_id = src_mcfg->id;
 	struct skl_module_inst_id dst_id = dst_mcfg->id;
-	int in_max = dst_mcfg->max_in_queue;
-	int out_max = src_mcfg->max_out_queue;
+	int in_max = dst_mcfg->module->max_input_pins;
+	int out_max = src_mcfg->module->max_output_pins;
 	int src_index, dst_index, src_pin_state, dst_pin_state;
 
 	skl_dump_bind_info(ctx, src_mcfg, dst_mcfg);
@@ -1956,8 +2001,8 @@ int skl_bind_modules(struct skl_sst *ctx,
 {
 	int ret;
 	struct skl_ipc_bind_unbind_msg msg;
-	int in_max = dst_mcfg->max_in_queue;
-	int out_max = src_mcfg->max_out_queue;
+	int in_max = dst_mcfg->module->max_input_pins;
+	int out_max = src_mcfg->module->max_output_pins;
 	int src_index, dst_index;
 
 	skl_dump_bind_info(ctx, src_mcfg, dst_mcfg);
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 4bf8069..b1e82d5 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1707,7 +1707,11 @@ static int skl_get_module_info(struct skl *skl, struct skl_module_cfg *mconfig)
 	list_for_each_entry(module, &ctx->uuid_list, list) {
 		if (uuid_le_cmp(*uuid_mod, module->uuid) == 0) {
 			mconfig->id.module_id = module->id;
-			mconfig->is_loadable = module->is_loadable;
+			if (skl->nr_modules != 0)
+				mconfig->module = module->mod_data;
+			if (mconfig->module)
+				 mconfig->module->loadable =
+					 module->is_loadable;
 			return 0;
 		}
 	}
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 8f94176..4a7b080 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -56,6 +56,9 @@ static const int mic_quatro_list[][SKL_CH_QUATRO] = {
 {0, 1, 2, 3},
 };
 
+#define CHECK_HW_PARAMS(ch, freq, bps, prm_ch, prm_freq, prm_bps) \
+	(((ch == prm_ch) && (bps == prm_bps) && (freq == prm_freq))?1:0)
+
 void skl_tplg_d0i3_get(struct skl *skl, enum d0i3_capability caps)
 {
 	struct skl_d0i3_data *d0i3 =  &skl->skl_sst->d0i3;
@@ -162,13 +165,21 @@ static void skl_tplg_alloc_pipe_mem(struct skl *skl,
  * Each pipelines needs mcps to be allocated. Check if we have mcps for this
  * pipe.
  */
-
 static bool skl_is_pipe_mcps_avail(struct skl *skl,
 				struct skl_module_cfg *mconfig)
 {
 	struct skl_sst *ctx = skl->skl_sst;
+	int res_idx;
+	struct skl_module_res *res;
+
+	if (mconfig->res_idx == -1)
+		res_idx = 0;
+	else
+		res_idx = mconfig->res_idx;
 
-	if (skl->resource.mcps + mconfig->mcps > skl->resource.max_mcps) {
+	res = &mconfig->module->resources[res_idx];
+
+	if (skl->resource.mcps + res->cps > skl->resource.max_mcps) {
 		dev_err(ctx->dev,
 			"%s: module_id %d instance %d\n", __func__,
 			mconfig->id.module_id, mconfig->id.instance_id);
@@ -184,7 +195,18 @@ static bool skl_is_pipe_mcps_avail(struct skl *skl,
 static void skl_tplg_alloc_pipe_mcps(struct skl *skl,
 				struct skl_module_cfg *mconfig)
 {
-	skl->resource.mcps += mconfig->mcps;
+	u8 res_idx;
+	struct skl_module_res *res;
+
+	if (mconfig->res_idx == -1)
+		res_idx = 0;
+	else
+		res_idx = mconfig->res_idx;
+
+	res = &mconfig->module->resources[res_idx];
+
+	skl->resource.mcps += res->cps;
+
 }
 
 /*
@@ -193,7 +215,16 @@ static void skl_tplg_alloc_pipe_mcps(struct skl *skl,
 static void
 skl_tplg_free_pipe_mcps(struct skl *skl, struct skl_module_cfg *mconfig)
 {
-	skl->resource.mcps -= mconfig->mcps;
+	u8 res_idx;
+	struct skl_module_res *res;
+
+	if (mconfig->res_idx == -1)
+		res_idx = 0;
+	else
+		res_idx = mconfig->res_idx;
+
+	res = &mconfig->module->resources[res_idx];
+	skl->resource.mcps -= res->cps;
 }
 
 /*
@@ -205,21 +236,25 @@ skl_tplg_free_pipe_mem(struct skl *skl, struct skl_module_cfg *mconfig)
 	skl->resource.mem -= mconfig->pipe->memory_pages;
 }
 
-
 static void skl_dump_mconfig(struct skl_sst *ctx,
 					struct skl_module_cfg *mcfg)
 {
+	struct skl_module_intf *intf;
+
+	intf = &mcfg->module->formats[0];
 	dev_dbg(ctx->dev, "Dumping config\n");
 	dev_dbg(ctx->dev, "Input Format:\n");
-	dev_dbg(ctx->dev, "channels = %d\n", mcfg->in_fmt[0].channels);
-	dev_dbg(ctx->dev, "s_freq = %d\n", mcfg->in_fmt[0].s_freq);
-	dev_dbg(ctx->dev, "ch_cfg = %d\n", mcfg->in_fmt[0].ch_cfg);
-	dev_dbg(ctx->dev, "valid bit depth = %d\n", mcfg->in_fmt[0].valid_bit_depth);
+	dev_dbg(ctx->dev, "channels = %d\n", intf->input[0].pin_fmt.channels);
+	dev_dbg(ctx->dev, "s_freq = %d\n", intf->input[0].pin_fmt.s_freq);
+	dev_dbg(ctx->dev, "ch_cfg = %d\n", intf->input[0].pin_fmt.ch_cfg);
+	dev_dbg(ctx->dev, "valid bit depth = %d\n",
+				intf->input[0].pin_fmt.valid_bit_depth);
 	dev_dbg(ctx->dev, "Output Format:\n");
-	dev_dbg(ctx->dev, "channels = %d\n", mcfg->out_fmt[0].channels);
-	dev_dbg(ctx->dev, "s_freq = %d\n", mcfg->out_fmt[0].s_freq);
-	dev_dbg(ctx->dev, "valid bit depth = %d\n", mcfg->out_fmt[0].valid_bit_depth);
-	dev_dbg(ctx->dev, "ch_cfg = %d\n", mcfg->out_fmt[0].ch_cfg);
+	dev_dbg(ctx->dev, "channels = %d\n", intf->output[0].pin_fmt.channels);
+	dev_dbg(ctx->dev, "s_freq = %d\n", intf->output[0].pin_fmt.s_freq);
+	dev_dbg(ctx->dev, "valid bit depth = %d\n",
+				intf->output[0].pin_fmt.valid_bit_depth);
+	dev_dbg(ctx->dev, "ch_cfg = %d\n", intf->output[0].pin_fmt.ch_cfg);
 }
 
 static void skl_tplg_update_chmap(struct skl_module_fmt *fmt, int chs)
@@ -292,8 +327,8 @@ static void skl_tplg_update_params_fixup(struct skl_module_cfg *m_cfg,
 	struct skl_module_fmt *in_fmt, *out_fmt;
 
 	/* Fixups will be applied to pin 0 only */
-	in_fmt = &m_cfg->in_fmt[0];
-	out_fmt = &m_cfg->out_fmt[0];
+	in_fmt = &m_cfg->module->formats[0].input[0].pin_fmt;
+	out_fmt = &m_cfg->module->formats[0].output[0].pin_fmt;
 
 	if (params->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		if (is_fe) {
@@ -332,12 +367,14 @@ static void skl_tplg_update_buffer_size(struct skl_sst *ctx,
 	int multiplier = 1;
 	struct skl_module_fmt *in_fmt, *out_fmt;
 	int in_rate, out_rate;
+	struct skl_module_res *res;
 
 	/* Since fixups is applied to pin 0 only, ibs, obs needs
 	 * change for pin 0 only
 	 */
-	in_fmt = &mcfg->in_fmt[0];
-	out_fmt = &mcfg->out_fmt[0];
+	res = &mcfg->module->resources[0];
+	in_fmt = &mcfg->module->formats[0].input[0].pin_fmt;
+	out_fmt = &mcfg->module->formats[0].output[0].pin_fmt;
 
 	if (mcfg->m_type == SKL_MODULE_TYPE_SRCINT)
 		multiplier = 5;
@@ -347,18 +384,17 @@ static void skl_tplg_update_buffer_size(struct skl_sst *ctx,
 	else
 		in_rate = (in_fmt->s_freq / 1000);
 
-	mcfg->ibs = in_rate * (mcfg->in_fmt->channels) *
-			(mcfg->in_fmt->bit_depth >> 3) *
+	res->ibs = in_rate * (in_fmt->channels) *
+			(in_fmt->bit_depth >> 3) *
 			multiplier;
 
-	if (mcfg->out_fmt->s_freq % 1000)
-		out_rate = (mcfg->out_fmt->s_freq / 1000) + 1;
+	if (out_fmt->s_freq % 1000)
+		out_rate = (out_fmt->s_freq / 1000) + 1;
 	else
-		out_rate = (mcfg->out_fmt->s_freq / 1000);
+		out_rate = (out_fmt->s_freq / 1000);
 
-	mcfg->obs = out_rate * (mcfg->out_fmt->channels) *
-			(mcfg->out_fmt->bit_depth >> 3) *
-			multiplier;
+	res->obs = out_rate * (out_fmt->channels) *
+			(out_fmt->bit_depth >> 3) * multiplier;
 }
 
 static u8 skl_tplg_be_dev_type(int dev_type)
@@ -395,33 +431,42 @@ static int skl_tplg_update_be_blob(struct snd_soc_dapm_widget *w,
 	struct nhlt_specific_cfg *cfg;
 	struct skl *skl = get_skl_ctx(ctx->dev);
 	u8 dev_type = skl_tplg_be_dev_type(m_cfg->dev_type);
+	struct skl_module_intf *m_intf;
+	int fmt_idx;
 
 	/* check if we already have blob */
 	if (m_cfg->formats_config.caps_size > 0)
 		return 0;
 
+	if (m_cfg->fmt_idx == -1)
+		fmt_idx = 0;
+	else
+		fmt_idx = m_cfg->fmt_idx;
+
+	m_intf = &m_cfg->module->formats[fmt_idx];
+
 	dev_dbg(ctx->dev, "Applying default cfg blob\n");
 	switch (m_cfg->dev_type) {
 	case SKL_DEVICE_DMIC:
 		link_type = NHLT_LINK_DMIC;
 		dir = SNDRV_PCM_STREAM_CAPTURE;
-		s_freq = m_cfg->in_fmt[0].s_freq;
-		s_fmt = m_cfg->in_fmt[0].bit_depth;
-		ch = m_cfg->in_fmt[0].channels;
+		s_freq = m_intf->input[0].pin_fmt.s_freq;
+		s_fmt = m_intf->input[0].pin_fmt.bit_depth;
+		ch = m_intf->input[0].pin_fmt.channels;
 		break;
 
 	case SKL_DEVICE_I2S:
 		link_type = NHLT_LINK_SSP;
 		if (m_cfg->hw_conn_type == SKL_CONN_SOURCE) {
 			dir = SNDRV_PCM_STREAM_PLAYBACK;
-			s_freq = m_cfg->out_fmt[0].s_freq;
-			s_fmt = m_cfg->out_fmt[0].bit_depth;
-			ch = m_cfg->out_fmt[0].channels;
+			s_freq = m_intf->output[0].pin_fmt.s_freq;
+			s_fmt = m_intf->output[0].pin_fmt.bit_depth;
+			ch = m_intf->output[0].pin_fmt.channels;
 		} else {
 			dir = SNDRV_PCM_STREAM_CAPTURE;
-			s_freq = m_cfg->in_fmt[0].s_freq;
-			s_fmt = m_cfg->in_fmt[0].bit_depth;
-			ch = m_cfg->in_fmt[0].channels;
+			s_freq = m_intf->input[0].pin_fmt.s_freq;
+			s_fmt = m_intf->input[0].pin_fmt.bit_depth;
+			ch = m_intf->input[0].pin_fmt.channels;
 		}
 		break;
 
@@ -476,6 +521,38 @@ static void skl_tplg_update_module_params(struct snd_soc_dapm_widget *w,
 	skl_dump_mconfig(ctx, m_cfg);
 }
 
+/*
+ * Module formats and resources depend on the current pipe configuration.
+ * Here, we select proper resource and format indices for the respective
+ * module.
+ */
+static int skl_tplg_find_module_params(struct device *dev,
+			struct skl_module_cfg *m_cfg)
+{
+	struct skl_pipe *pipe;
+	struct skl_pipe_mcfg *p_cfg;
+	u8 cfg_idx;
+
+	pipe = m_cfg->pipe;
+
+	/*
+	 * If there are no configs filled up from the dfw, then
+	 * the all the resources and formats are filled at index 0
+	 */
+	if (pipe->nr_cfgs == 0)
+		return 0;
+
+	cfg_idx = pipe->cur_config_idx;
+
+	p_cfg = &m_cfg->mod_cfg[cfg_idx];
+	m_cfg->res_idx = p_cfg->res_idx;
+	m_cfg->fmt_idx = p_cfg->fmt_idx;
+	dev_dbg(dev, "mod id: %d mod inst: %d res_idx: %d fmt_idx: %d\n",
+			m_cfg->id.module_id, m_cfg->id.instance_id,
+			m_cfg->res_idx, m_cfg->fmt_idx);
+	return 0;
+}
+
 int skl_get_probe_index(struct snd_soc_dai *dai,
 				struct skl_probe_config *pconfig)
 {
@@ -688,11 +765,15 @@ skl_tplg_init_pipe_modules(struct skl *skl, struct skl_pipe *pipe)
 		w = w_module->w;
 		mconfig = w->priv;
 
+		ret = skl_tplg_find_module_params(ctx->dev, mconfig);
+		if (ret < 0)
+			return ret;
+
 		/* check resource available */
 		if (!skl_is_pipe_mcps_avail(skl, mconfig))
 			return -ENOMEM;
 
-		if (mconfig->is_loadable && ctx->dsp->fw_ops.load_mod) {
+		if (mconfig->module->loadable && ctx->dsp->fw_ops.load_mod) {
 			ret = ctx->dsp->fw_ops.load_mod(ctx->dsp,
 				mconfig->id.module_id, mconfig->guid);
 			if (ret < 0)
@@ -715,8 +796,12 @@ skl_tplg_init_pipe_modules(struct skl *skl, struct skl_pipe *pipe)
 		 */
 		skl_tplg_update_module_params(w, ctx);
 		uuid_mod = (uuid_le *)mconfig->guid;
+		if (skl->conf_version < 2)
+			skl_tplg_update_module_params(w, ctx);
+
 		mconfig->id.pvt_id = skl_get_pvt_id(ctx, uuid_mod,
 						mconfig->id.instance_id);
+
 		if (mconfig->id.pvt_id < 0)
 			return ret;
 		skl_tplg_set_module_init_data(w);
@@ -756,7 +841,7 @@ static int skl_tplg_unload_pipe_modules(struct skl_sst *ctx,
 		uuid_mod = (uuid_le *)mconfig->guid;
 
 
-		if (mconfig->is_loadable && ctx->dsp->fw_ops.unload_mod &&
+		if (mconfig->module->loadable && ctx->dsp->fw_ops.unload_mod &&
 			mconfig->m_state > SKL_MODULE_UNINIT)
 			return ctx->dsp->fw_ops.unload_mod(ctx->dsp,
 						mconfig->id.module_id);
@@ -775,6 +860,79 @@ static int skl_tplg_unload_pipe_modules(struct skl_sst *ctx,
 }
 
 /*
+ ** Here, we select pipe format based on the pipe type and pipe
+ * direction
+ * to determine the current config index for the pipeline. The confix
+ * index is then used to select proper module resources.
+ *Intermediate pipes currently have a fixed format hence we select the
+ * 0th configuratation by default for such pipes.
+ **/
+static int
+skl_tplg_get_pipe_config(struct skl *skl, struct skl_module_cfg *mconfig)
+{
+	struct skl_sst *ctx = skl->skl_sst;
+	struct skl_pipe *pipe = mconfig->pipe;
+	struct skl_pipe_params *params = pipe->p_params;
+	struct skl_path_config *pconfig = &pipe->configs[0];
+	struct skl_pipe_fmt *fmt = NULL;
+	int i;
+
+	if (pipe->nr_cfgs == 0) {
+		pipe->cur_config_idx = 0;
+		return 0;
+	}
+
+	for (i = 0; i < pipe->nr_cfgs; i++) {
+		pconfig = &pipe->configs[i];
+
+		switch (pipe->conn_type) {
+		case SKL_PIPE_CONN_TYPE_FE:
+			if (pipe->direction == SNDRV_PCM_STREAM_PLAYBACK)
+				fmt = &pconfig->in_fmt;
+			else
+				fmt = &pconfig->out_fmt;
+			break;
+
+		case SKL_PIPE_CONN_TYPE_BE:
+			if (pipe->direction == SNDRV_PCM_STREAM_PLAYBACK)
+				fmt = &pconfig->out_fmt;
+			else
+				fmt = &pconfig->in_fmt;
+			break;
+
+		default:
+			dev_dbg(ctx->dev,
+				"Loop pipe detected, take 0th config\n");
+			pipe->cur_config_idx = 0;
+			pipe->memory_pages = pconfig->mem_pages;
+			dev_dbg(ctx->dev, "Pipe#:%d Memory pages %d\n",
+					pipe->ppl_id, pipe->memory_pages);
+			return 0;
+		}
+
+		if (fmt == NULL) {
+			dev_err(ctx->dev, "Invalid pipe format detected: %d\n",
+					pipe->ppl_id);
+			return -EINVAL;
+		}
+
+		if (CHECK_HW_PARAMS(params->ch, params->s_freq, params->s_fmt,
+					fmt->channels, fmt->freq, fmt->bps)) {
+			pipe->cur_config_idx = i;
+			pipe->memory_pages = pconfig->mem_pages;
+			dev_dbg(ctx->dev, "found pipe config:%d idx:%d\n",
+					pipe->cur_config_idx, i);
+			return 0;
+		}
+	}
+
+	dev_err(ctx->dev, "Invalid pipe config: %d %d %d for pipe: %d\n",
+					params->ch, params->s_freq,
+					params->s_fmt, pipe->ppl_id);
+	return -EINVAL;
+}
+
+/*
  * Mixer module represents a pipeline. So in the Pre-PMU event of mixer we
  * need create the pipeline. So we do following:
  *   - check the resources
@@ -793,6 +951,10 @@ static int skl_tplg_mixer_dapm_pre_pmu_event(struct snd_soc_dapm_widget *w,
 	struct skl_sst *ctx = skl->skl_sst;
 	struct skl_module_deferred_bind *modules;
 
+	ret = skl_tplg_get_pipe_config(skl, mconfig);
+	if (ret < 0)
+		return ret;
+
 	/* check resource available */
 	if (!skl_is_pipe_mcps_avail(skl, mconfig))
 		return -EBUSY;
@@ -896,12 +1058,12 @@ static int skl_tplg_set_module_bind_params(struct snd_soc_dapm_widget *w,
 	 * check all out/in pins are in bind state.
 	 * if so set the module param
 	 */
-	for (i = 0; i < mcfg->max_out_queue; i++) {
+	for (i = 0; i < mcfg->module->max_output_pins; i++) {
 		if (mcfg->m_out_pin[i].pin_state != SKL_PIN_BIND_DONE)
 			return 0;
 	}
 
-	for (i = 0; i < mcfg->max_in_queue; i++) {
+	for (i = 0; i < mcfg->module->max_input_pins; i++) {
 		if (mcfg->m_in_pin[i].pin_state != SKL_PIN_BIND_DONE)
 			return 0;
 	}
@@ -952,7 +1114,7 @@ static int skl_tplg_module_add_deferred_bind(struct skl *skl,
 	int i;
 
 	/* only supported for module with static pin connection */
-	for (i = 0; i < dst->max_in_queue; i++) {
+	for (i = 0; i < dst->module->max_input_pins; i++) {
 		struct skl_module_pin *pin = &dst->m_in_pin[i];
 
 		if (pin->is_dynamic)
@@ -1212,7 +1374,7 @@ static int skl_tplg_mixer_dapm_pre_pmd_event(struct snd_soc_dapm_widget *w,
 	if (ret)
 		return ret;
 
-	for (i = 0; i < sink_mconfig->max_in_queue; i++) {
+	for (i = 0; i < sink_mconfig->module->max_input_pins; i++) {
 		if (sink_mconfig->m_in_pin[i].pin_state == SKL_PIN_BIND_DONE) {
 			src_mconfig = sink_mconfig->m_in_pin[i].tgt_mcfg;
 			if (!src_mconfig)
@@ -1323,7 +1485,7 @@ static int skl_tplg_pga_dapm_post_pmd_event(struct snd_soc_dapm_widget *w,
 	if (ret)
 		return ret;
 
-	for (i = 0; i < src_mconfig->max_out_queue; i++) {
+	for (i = 0; i < src_mconfig->module->max_output_pins; i++) {
 		if (src_mconfig->m_out_pin[i].pin_state == SKL_PIN_BIND_DONE) {
 			sink_mconfig = src_mconfig->m_out_pin[i].tgt_mcfg;
 			if (!sink_mconfig)
@@ -1770,49 +1932,62 @@ int skl_tplg_update_pipe_params(struct device *dev,
 			struct skl_pipe_params *params)
 {
 	struct skl_module_fmt *format = NULL;
+	int ret;
+	struct skl_module_intf *intf;
+	struct skl_module_res *res;
+	struct skl *skl = get_skl_ctx(dev);
 
 	skl_tplg_fill_dma_id(mconfig, params);
 
-	if (params->stream == SNDRV_PCM_STREAM_PLAYBACK)
-		format = &mconfig->in_fmt[0];
-	else
-		format = &mconfig->out_fmt[0];
+	/* Module data will be filled to 0th index for legacy */
+	ret = skl_tplg_find_module_params(dev, mconfig);
+	if (ret < 0)
+		return ret;
 
-	/* set the hw_params */
-	format->s_freq = params->s_freq;
-	format->channels = params->ch;
-	format->valid_bit_depth = skl_get_bit_depth(params->s_fmt);
+	if (skl->nr_modules == 0) {
+		intf = &mconfig->module->formats[0];
+		res = &mconfig->module->resources[0];
 
-	/*
-	 * 16 bit is 16 bit container whereas 24 bit is in 32 bit
-	 * container so update bit depth accordingly
-	 */
-	switch (format->valid_bit_depth) {
-	case SKL_DEPTH_16BIT:
-		format->bit_depth = format->valid_bit_depth;
-		break;
+		if (params->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			format = &mconfig->module->formats[0].input[0].pin_fmt;
+		else
+			format = &mconfig->module->formats[0].output[0].pin_fmt;
 
-	case SKL_DEPTH_24BIT:
-	case SKL_DEPTH_32BIT:
-		format->bit_depth = SKL_DEPTH_32BIT;
-		break;
+		/* set the hw_params */
+		format->s_freq = params->s_freq;
+		format->channels = params->ch;
+		format->valid_bit_depth = skl_get_bit_depth(params->s_fmt);
 
-	default:
-		dev_err(dev, "Invalid bit depth %x for pipe\n",
-				format->valid_bit_depth);
-		return -EINVAL;
-	}
+		/*
+		 * 16 bit is 16 bit container whereas 24 bit is in 32 bit
+		 * container so update bit depth accordingly
+		 */
+		switch (format->valid_bit_depth) {
+		case SKL_DEPTH_16BIT:
+			format->bit_depth = format->valid_bit_depth;
+			break;
 
-	if (params->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-		mconfig->ibs = (format->s_freq / 1000) *
+		case SKL_DEPTH_24BIT:
+		case SKL_DEPTH_32BIT:
+			format->bit_depth = SKL_DEPTH_32BIT;
+			break;
+
+		default:
+			dev_err(dev, "Invalid bit depth %x for pipe\n",
+					format->valid_bit_depth);
+			return -EINVAL;
+		}
+
+		if (params->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+			res->ibs = (format->s_freq / 1000) *
 				(format->channels) *
 				(format->bit_depth >> 3);
-	} else {
-		mconfig->obs = (format->s_freq / 1000) *
+		} else {
+			res->obs = (format->s_freq / 1000) *
 				(format->channels) *
 				(format->bit_depth >> 3);
+		}
 	}
-
 	return 0;
 }
 
@@ -2135,6 +2310,54 @@ static const struct snd_soc_tplg_kcontrol_ops skl_tplg_kcontrol_ops[] = {
 	},
 };
 
+static int skl_tplg_fill_pipe_cfg(struct device *dev,
+			struct skl_pipe *pipe, u32 tkn,
+			u32 tkn_val, int conf_idx, int dir)
+{
+	struct skl_pipe_fmt *fmt;
+	struct skl_path_config *config;
+
+	switch (dir) {
+	case SKL_DIR_IN:
+		fmt = &pipe->configs[conf_idx].in_fmt;
+		break;
+
+	case SKL_DIR_OUT:
+		fmt = &pipe->configs[conf_idx].out_fmt;
+		break;
+
+	default:
+		dev_err(dev, "Invalid direction value\n");
+		return -EINVAL;
+	}
+
+	config = &pipe->configs[conf_idx];
+
+	switch (tkn) {
+	case SKL_TKN_U32_CFG_FREQ:
+		fmt->freq = tkn_val;
+		break;
+
+	case SKL_TKN_U8_CFG_CHAN:
+		fmt->channels = tkn_val;
+		break;
+
+	case SKL_TKN_U8_CFG_BPS:
+		fmt->bps = tkn_val;
+		break;
+
+	case SKL_TKN_U32_PATH_MEM_PGS:
+		config->mem_pages = tkn_val;
+		break;
+
+	default:
+		dev_err(dev, "Invalid config value\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static int skl_tplg_fill_pipe_tkn(struct device *dev,
 			struct skl_pipe *pipe, u32 tkn,
 			u32 tkn_val)
@@ -2157,6 +2380,29 @@ static int skl_tplg_fill_pipe_tkn(struct device *dev,
 		pipe->lp_mode = tkn_val;
 		break;
 
+	case SKL_TKN_U32_PIPE_CREATE_PRIORITY:
+		pipe->create_priority = tkn_val;
+		break;
+
+	case SKL_TKN_U32_PIPE_DIRECTION:
+		pipe->direction = tkn_val;
+		break;
+
+	case SKL_TKN_U32_PIPE_ORDER:
+		pipe->order = tkn_val;
+		break;
+
+	case SKL_TKN_U32_PIPE_MODE:
+		pipe->pipe_mode = tkn_val;
+		break;
+
+	case SKL_TKN_U32_NUM_CONFIGS:
+		pipe->nr_cfgs = tkn_val;
+		break;
+
+	case SKL_TKN_U32_PIPE_NUM_MODULES:
+		break;
+
 	default:
 		dev_err(dev, "Token not handled %d\n", tkn);
 		return -EINVAL;
@@ -2318,19 +2564,22 @@ static int skl_tplg_fill_fmt(struct device *dev,
 }
 
 static int skl_tplg_widget_fill_fmt(struct device *dev,
-		struct skl_module_cfg *mconfig,
+		struct skl_module_intf *fmt,
 		u32 tkn, u32 val, u32 dir, int fmt_idx)
 {
 	struct skl_module_fmt *dst_fmt;
 	int ret;
 
+	if (!fmt)
+		return -EINVAL;
+
 	switch (dir) {
 	case SKL_DIR_IN:
-		dst_fmt = &mconfig->in_fmt[fmt_idx];
+		dst_fmt = &fmt->input[fmt_idx].pin_fmt;
 		break;
 
 	case SKL_DIR_OUT:
-		dst_fmt = &mconfig->out_fmt[fmt_idx];
+		dst_fmt = &fmt->output[fmt_idx].pin_fmt;
 		break;
 
 	default:
@@ -2453,6 +2702,10 @@ static int skl_tplg_fill_res_tkn(struct device *dev,
 		res->ibs = tkn_elem->value;
 		break;
 
+	case SKL_TKN_U32_MAX_MCPS:
+		res->cps = tkn_elem->value;
+		break;
+
 	case SKL_TKN_MM_U32_RES_PIN_ID:
 	case SKL_TKN_MM_U32_PIN_BUF:
 		ret = skl_tplg_mfest_pin_res_tkn(dev,
@@ -2484,48 +2737,59 @@ static int skl_tplg_get_token(struct device *dev,
 	int tkn_count = 0;
 	int ret;
 	static int is_pipe_exists;
-	static int pin_index, dir;
+	static int pin_index, dir, conf_idx;
+	struct skl_module_intf *intf = NULL;
+	struct skl_module_res *res = NULL;
+	int res_idx = mconfig->res_idx;
+	int fmt_idx = mconfig->fmt_idx;
+
+	/*
+	 * If the manifest structure contains no modules, fill all
+	 * the module data to 0th index.
+	 * res_idx and fmt_idx are default set to 0.
+	 */
+	if (skl->nr_modules == 0) {
+		res = &mconfig->module->resources[res_idx];
+		intf = &mconfig->module->formats[fmt_idx];
+	}
 
 	if (tkn_elem->token > SKL_TKN_MAX)
 		return -EINVAL;
 
 	switch (tkn_elem->token) {
 	case SKL_TKN_U8_IN_QUEUE_COUNT:
-		mconfig->max_in_queue = tkn_elem->value;
-		mconfig->m_in_pin = devm_kzalloc(dev, mconfig->max_in_queue *
-					sizeof(*mconfig->m_in_pin),
-					GFP_KERNEL);
-		if (!mconfig->m_in_pin)
-			return -ENOMEM;
-
+		mconfig->module->max_input_pins = tkn_elem->value;
 		break;
 
 	case SKL_TKN_U8_OUT_QUEUE_COUNT:
-		mconfig->max_out_queue = tkn_elem->value;
-		mconfig->m_out_pin = devm_kzalloc(dev, mconfig->max_out_queue *
-					sizeof(*mconfig->m_out_pin),
-					GFP_KERNEL);
-
-		if (!mconfig->m_out_pin)
-			return -ENOMEM;
-
+		mconfig->module->max_output_pins = tkn_elem->value;
 		break;
 
 	case SKL_TKN_U8_DYN_IN_PIN:
 		if (!mconfig->m_in_pin)
+			mconfig->m_in_pin = devm_kzalloc(dev,
+						SKL_MAX_IN_QUEUE *
+						sizeof(*mconfig->m_in_pin),
+						GFP_KERNEL);
+		if (!mconfig->m_in_pin)
 			return -ENOMEM;
 
 		skl_tplg_fill_pin_dynamic_val(mconfig->m_in_pin,
-			mconfig->max_in_queue, tkn_elem->value);
+			SKL_MAX_IN_QUEUE, tkn_elem->value);
 
 		break;
 
 	case SKL_TKN_U8_DYN_OUT_PIN:
 		if (!mconfig->m_out_pin)
+			mconfig->m_out_pin = devm_kzalloc(dev,
+						SKL_MAX_IN_QUEUE *
+						sizeof(*mconfig->m_in_pin),
+						GFP_KERNEL);
+		if (!mconfig->m_out_pin)
 			return -ENOMEM;
 
 		skl_tplg_fill_pin_dynamic_val(mconfig->m_out_pin,
-			mconfig->max_out_queue, tkn_elem->value);
+			SKL_MAX_OUT_QUEUE, tkn_elem->value);
 
 		break;
 
@@ -2549,24 +2813,23 @@ static int skl_tplg_get_token(struct device *dev,
 		break;
 
 	case SKL_TKN_U16_MOD_INST_ID:
-		mconfig->id.instance_id =
-		tkn_elem->value;
+		mconfig->id.instance_id = tkn_elem->value;
 		break;
 
+	/*
+	 * mem_pages is expected only for legacy topology.
+	 * So, fill it in the 0th index of config
+	 */
 	case SKL_TKN_U32_MEM_PAGES:
-		mconfig->mem_pages = tkn_elem->value;
-		break;
-
 	case SKL_TKN_U32_MAX_MCPS:
-		mconfig->mcps = tkn_elem->value;
-		break;
-
 	case SKL_TKN_U32_OBS:
-		mconfig->obs = tkn_elem->value;
-		break;
-
 	case SKL_TKN_U32_IBS:
-		mconfig->ibs = tkn_elem->value;
+		ret = skl_tplg_fill_res_tkn(dev, tkn_elem, res,
+				dir, pin_index);
+
+		if (ret < 0)
+			return ret;
+
 		break;
 
 	case SKL_TKN_U32_VBUS_ID:
@@ -2599,10 +2862,21 @@ static int skl_tplg_get_token(struct device *dev,
 
 		break;
 
+	case SKL_TKN_U32_PIPE_CONFIG_ID:
+		conf_idx = tkn_elem->value;
+		break;
+
+
 	case SKL_TKN_U32_PIPE_CONN_TYPE:
 	case SKL_TKN_U32_PIPE_PRIORITY:
 	case SKL_TKN_U32_PIPE_MEM_PGS:
 	case SKL_TKN_U32_PMODE:
+	case SKL_TKN_U32_PIPE_CREATE_PRIORITY:
+	case SKL_TKN_U32_PIPE_DIRECTION:
+	case SKL_TKN_U32_PIPE_ORDER:
+	case SKL_TKN_U32_PIPE_MODE:
+	case SKL_TKN_U32_PIPE_NUM_MODULES:
+	case SKL_TKN_U32_NUM_CONFIGS:
 		if (is_pipe_exists) {
 			ret = skl_tplg_fill_pipe_tkn(dev, mconfig->pipe,
 					tkn_elem->token, tkn_elem->value);
@@ -2612,6 +2886,27 @@ static int skl_tplg_get_token(struct device *dev,
 
 		break;
 
+	case SKL_TKN_U32_PATH_MEM_PGS:
+	case SKL_TKN_U32_CFG_FREQ:
+	case SKL_TKN_U8_CFG_CHAN:
+	case SKL_TKN_U8_CFG_BPS:
+		if (mconfig->pipe->nr_cfgs) {
+			ret = skl_tplg_fill_pipe_cfg(dev, mconfig->pipe,
+					tkn_elem->token, tkn_elem->value,
+					conf_idx, dir);
+			if (ret < 0)
+				return ret;
+		}
+		break;
+
+	case SKL_TKN_CFG_MOD_RES_ID:
+		mconfig->mod_cfg[conf_idx].res_idx = tkn_elem->value;
+		break;
+
+	case SKL_TKN_CFG_MOD_FMT_IDX:
+		mconfig->mod_cfg[conf_idx].fmt_idx = tkn_elem->value;
+		break;
+
 	/*
 	 * SKL_TKN_U32_DIR_PIN_COUNT token has the value for both
 	 * direction and the pin count. The first four bits represent
@@ -2631,7 +2926,7 @@ static int skl_tplg_get_token(struct device *dev,
 	case SKL_TKN_U32_FMT_INTERLEAVE:
 	case SKL_TKN_U32_FMT_SAMPLE_TYPE:
 	case SKL_TKN_U32_FMT_CH_MAP:
-		ret = skl_tplg_widget_fill_fmt(dev, mconfig, tkn_elem->token,
+		ret = skl_tplg_widget_fill_fmt(dev, intf, tkn_elem->token,
 				tkn_elem->value, dir, pin_index);
 
 		if (ret < 0)
@@ -2676,6 +2971,10 @@ static int skl_tplg_get_token(struct device *dev,
 	case SKL_TKN_U8_CONN_TYPE:
 		break;
 
+	case SKL_TKN_U8_PDI_TYPE:
+		mconfig->pdi_type = tkn_elem->value;
+		break;
+
 	default:
 		dev_err(dev, "Token %d not handled\n",
 				tkn_elem->token);
@@ -2852,11 +3151,11 @@ static void skl_clear_pin_config(struct snd_soc_platform *platform,
 					strlen(platform->component.name))) {
 		mconfig = w->priv;
 		pipe = mconfig->pipe;
-		for (i = 0; i < mconfig->max_in_queue; i++) {
+		for (i = 0; i < mconfig->module->max_input_pins; i++) {
 			mconfig->m_in_pin[i].in_use = false;
 			mconfig->m_in_pin[i].pin_state = SKL_PIN_UNBIND;
 		}
-		for (i = 0; i < mconfig->max_out_queue; i++) {
+		for (i = 0; i < mconfig->module->max_output_pins; i++) {
 			mconfig->m_out_pin[i].in_use = false;
 			mconfig->m_out_pin[i].pin_state = SKL_PIN_UNBIND;
 		}
@@ -2915,6 +3214,14 @@ static int skl_tplg_widget_load(struct snd_soc_component *cmpnt,
 	if (!mconfig)
 		return -ENOMEM;
 
+	if (skl->nr_modules == 0) {
+		mconfig->module = devm_kzalloc(bus->dev,
+				sizeof(*mconfig->module), GFP_KERNEL);
+
+		if (!mconfig->module)
+			return -ENOMEM;
+	}
+
 	w->priv = mconfig;
 
 	ret = snd_skl_get_module_info(skl->skl_sst, mconfig->guid, dfw_config);
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 513b5e1..6009903 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -93,6 +93,13 @@ enum skl_widget_type {
 	SKL_WIDGET_PGA = 3,
 	SKL_WIDGET_MUX = 4
 };
+
+enum skl_pipe_type {
+	SKL_PIPE_SOURCE = 0,
+	SKL_PIPE_INTERMEDIATE = 3,
+	SKL_PIPE_SINK = 7
+};
+
 struct probe_pt_param {
 	u32 params;
 	u32 connection;
@@ -277,14 +284,43 @@ struct skl_pipe_params {
 	unsigned int link_bps;
 };
 
+struct skl_pipe_fmt {
+	u32 freq;
+	u8 channels;
+	u8 bps;
+};
+
+struct skl_pipe_mcfg {
+	u8 res_idx;
+	u8 fmt_idx;
+};
+
+struct skl_path_config {
+	char name[SKL_MAX_NAME_LENGTH];
+	u8 idx;
+	u8 mem_pages;
+	struct skl_pipe_fmt in_fmt;
+	struct skl_pipe_fmt out_fmt;
+};
+
 struct skl_pipe {
 	u8 ppl_id;
 	u8 pipe_priority;
 	u16 conn_type;
 	u32 memory_pages;
 	u8 lp_mode;
+	char name[SKL_MAX_NAME_LENGTH];
+	char device[32];
+	u8 create_priority;
+	u8 order;
+	u8 direction;
+	u8 pipe_mode;
 	struct skl_pipe_params *p_params;
 	enum skl_pipe_state state;
+	u8 nr_modules;
+	u8 cur_config_idx;
+	u8 nr_cfgs;
+	struct skl_path_config configs[SKL_MAX_PATH_CONFIGS];
 	struct list_head w_list;
 	bool passthru;
 };
@@ -316,6 +352,9 @@ struct skl_sdw_aggregation {
 struct skl_module_cfg {
 	u8 guid[16];
 	struct skl_module_inst_id id;
+	struct skl_module *module;
+	int res_idx;
+	int fmt_idx;
 	u8 domain;
 	bool homogenous_inputs;
 	bool homogenous_outputs;
@@ -353,6 +392,7 @@ struct skl_module_cfg {
 	enum skl_module_state m_state;
 	struct skl_pipe *pipe;
 	struct skl_specific_cfg formats_config;
+	struct skl_pipe_mcfg mod_cfg[SKL_MAX_MODULES_IN_PIPE];
 };
 
 struct skl_algo_data {
-- 
1.7.5.4

