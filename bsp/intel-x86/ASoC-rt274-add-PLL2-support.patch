From c777844c06669661e18371a7f72e637399378c9f Mon Sep 17 00:00:00 2001
From: bardliao <bardliao@realtek.com>
Date: Thu, 17 Nov 2016 15:58:40 +0800
Subject: [PATCH 4055/4301] ASoC: rt274: add PLL2 support

commit b13fddddb00ed381fead4fa1f87e09c0fee553b4 from
git://git@github.com:01org/linux-intel-4.9.git

PLL2 can be used for no MCLK.

Change-Id: I4988b920d1ccb1414535ab360b64082877acb62e
Signed-off-by: bardliao <bardliao@realtek.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/12399
Reviewed-by: Kale, Sanyog R <sanyog.r.kale@intel.com>
Reviewed-by: Kp, Jeeja <jeeja.kp@intel.com>
Tested-by: Avati, Santosh Kumar <santosh.kumar.avati@intel.com>
---
 sound/soc/codecs/rt274.c |   87 ++++++++++++++++++++++++++++++++++++++++++----
 sound/soc/codecs/rt274.h |   24 ++++++++++--
 2 files changed, 100 insertions(+), 11 deletions(-)

diff --git a/sound/soc/codecs/rt274.c b/sound/soc/codecs/rt274.c
index e728363..53f3370 100644
--- a/sound/soc/codecs/rt274.c
+++ b/sound/soc/codecs/rt274.c
@@ -44,6 +44,7 @@ struct rt274_priv {
 	struct delayed_work jack_detect_work;
 	int sys_clk;
 	int clk_id;
+	int fs;
 	unsigned int adb_reg_addr[0x100];
 	unsigned int adb_reg_value[0x100];
 	unsigned short adb_reg_num;
@@ -694,20 +695,89 @@ static int rt274_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
 	return 0;
 }
 
+static int rt274_set_dai_pll(struct snd_soc_dai *dai, int pll_id, int source,
+			unsigned int freq_in, unsigned int freq_out)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rt274_priv *rt274 = snd_soc_codec_get_drvdata(codec);
+
+	switch (source) {
+	case RT274_PLL2_S_MCLK:
+		snd_soc_update_bits(codec, RT274_PLL2_CTRL,
+				RT274_PLL2_SRC_MASK, RT274_PLL2_SRC_MCLK);
+		break;
+	default:
+		dev_warn(codec->dev, "invalid pll source, use BCLK\n");
+	case RT274_PLL2_S_BCLK:
+		snd_soc_update_bits(codec, RT274_PLL2_CTRL,
+				RT274_PLL2_SRC_MASK, RT274_PLL2_SRC_BCLK);
+		break;
+	}
+
+	if (source == RT274_PLL2_S_BCLK) {
+		snd_soc_update_bits(codec, RT274_MCLK_CTRL,
+				(0x3 << 12), (0x3 << 12));
+		switch (rt274->fs) {
+		case 50:
+			snd_soc_write(codec, 0x7a, 0xaab6);
+			snd_soc_write(codec, 0x7b, 0x0301);
+			snd_soc_write(codec, 0x7c, 0x04fe);
+			break;
+		case 64:
+			snd_soc_write(codec, 0x7a, 0xaa96);
+			snd_soc_write(codec, 0x7b, 0x8003);
+			snd_soc_write(codec, 0x7c, 0x081e);
+			break;
+		case 128:
+			snd_soc_write(codec, 0x7a, 0xaa96);
+			snd_soc_write(codec, 0x7b, 0x8003);
+			snd_soc_write(codec, 0x7c, 0x080e);
+			break;
+		default:
+			dev_warn(codec->dev, "invalid freq_in, assume 4.8M\n");
+		case 100:
+			snd_soc_write(codec, 0x7a, 0xaab6);
+			snd_soc_write(codec, 0x7b, 0x0301);
+			snd_soc_write(codec, 0x7c, 0x047e);
+			break;
+		}
+	}
+
+	return 0;
+}
+
 static int rt274_set_dai_sysclk(struct snd_soc_dai *dai,
 				int clk_id, unsigned int freq, int dir)
 {
 	struct snd_soc_codec *codec = dai->codec;
 	struct rt274_priv *rt274 = snd_soc_codec_get_drvdata(codec);
+	unsigned int clk_src, mclk_en;
 
 	dev_dbg(codec->dev, "%s freq=%d\n", __func__, freq);
 
-	if (RT274_SCLK_S_MCLK == clk_id)
-		snd_soc_update_bits(codec, RT274_MCLK_CTRL,
-				RT274_MCLK_MODE_MASK, RT274_MCLK_MODE_EN);
-	else
-		snd_soc_update_bits(codec, RT274_MCLK_CTRL,
-				RT274_MCLK_MODE_MASK, RT274_MCLK_MODE_DIS);
+	switch (clk_id) {
+	case RT274_SCLK_S_MCLK:
+		mclk_en = RT274_MCLK_MODE_EN;
+		clk_src = RT274_CLK_SRC_MCLK;
+		break;
+	case RT274_SCLK_S_PLL1:
+		mclk_en = RT274_MCLK_MODE_DIS;
+		clk_src = RT274_CLK_SRC_MCLK;
+		break;
+	case RT274_SCLK_S_PLL2:
+		mclk_en = RT274_MCLK_MODE_EN;
+		clk_src = RT274_CLK_SRC_PLL2;
+		break;
+	default:
+		mclk_en = RT274_MCLK_MODE_DIS;
+		clk_src = RT274_CLK_SRC_MCLK;
+		dev_warn(codec->dev, "invalid sysclk source, use PLL1\n");
+		break;
+	}
+	snd_soc_update_bits(codec, RT274_MCLK_CTRL,
+			RT274_MCLK_MODE_MASK, mclk_en);
+	snd_soc_update_bits(codec, RT274_CLK_CTRL,
+			RT274_CLK_SRC_MASK, clk_src);
 
 	switch (freq) {
 	case 19200000:
@@ -750,9 +820,11 @@ static int rt274_set_dai_sysclk(struct snd_soc_dai *dai,
 static int rt274_set_bclk_ratio(struct snd_soc_dai *dai, unsigned int ratio)
 {
 	struct snd_soc_codec *codec = dai->codec;
+	struct rt274_priv *rt274 = snd_soc_codec_get_drvdata(codec);
 
 	dev_dbg(codec->dev, "%s ratio=%d\n", __func__, ratio);
-	if (50 == ratio)
+	rt274->fs = ratio;
+	if ((ratio / 50) == 0)
 		snd_soc_update_bits(codec,
 			RT274_I2S_CTRL1, 0x1000, 0x1000);
 	else
@@ -1017,6 +1089,7 @@ static const struct snd_soc_dai_ops rt274_aif_dai_ops = {
 	.hw_params = rt274_hw_params,
 	.set_fmt = rt274_set_dai_fmt,
 	.set_sysclk = rt274_set_dai_sysclk,
+	.set_pll = rt274_set_dai_pll,
 	.set_bclk_ratio = rt274_set_bclk_ratio,
 	.set_tdm_slot = rt274_set_tdm_slot,
 };
diff --git a/sound/soc/codecs/rt274.h b/sound/soc/codecs/rt274.h
index 2c4eee3..6a9886a 100644
--- a/sound/soc/codecs/rt274.h
+++ b/sound/soc/codecs/rt274.h
@@ -131,6 +131,8 @@
 #define RT274_I2S_CTRL1			0x63
 #define RT274_I2S_CTRL2			0x64
 #define RT274_MCLK_CTRL			0x71
+#define RT274_CLK_CTRL			0x72
+#define RT274_PLL2_CTRL			0x7b
 
 
 /* EAPD GPIO IRQ control (Index 0x10) */
@@ -159,9 +161,19 @@
 #define RT274_I2S_FMT_PCMB	(0x3 << 8)
 
 /* MCLK clock domain control (Index 0x71) */
-#define RT274_MCLK_MODE_MASK	(0x1 << 13)
-#define RT274_MCLK_MODE_DIS	(0x0 << 13)
-#define RT274_MCLK_MODE_EN	(0x1 << 13)
+#define RT274_MCLK_MODE_MASK	(0x1 << 14)
+#define RT274_MCLK_MODE_DIS	(0x0 << 14)
+#define RT274_MCLK_MODE_EN	(0x1 << 14)
+
+/* Clock control (Index 0x72) */
+#define RT274_CLK_SRC_MASK	(0x7 << 3)
+#define RT274_CLK_SRC_MCLK	(0x0 << 3)
+#define RT274_CLK_SRC_PLL2	(0x3 << 3)
+
+/* PLL2 control (Index 0x7b) */
+#define RT274_PLL2_SRC_MASK	(0x1 << 13)
+#define RT274_PLL2_SRC_MCLK	(0x0 << 13)
+#define RT274_PLL2_SRC_BCLK	(0x1 << 13)
 
 /* HP-OUT (0x21) */
 #define RT274_M_HP_MUX_SFT	14
@@ -179,7 +191,11 @@
 #define RT274_ADC_SEL_DMIC	3
 
 #define RT274_SCLK_S_MCLK	0
-#define RT274_SCLK_S_PLL	1
+#define RT274_SCLK_S_PLL1	1
+#define RT274_SCLK_S_PLL2	2
+
+#define RT274_PLL2_S_MCLK	0
+#define RT274_PLL2_S_BCLK	1
 
 enum {
 	RT274_AIF1,
-- 
1.7.5.4

