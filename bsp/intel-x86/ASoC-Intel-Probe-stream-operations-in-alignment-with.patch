From a9c03b760e1517b8510a2fecd4d016de54fbd7b4 Mon Sep 17 00:00:00 2001
From: Divya Prakash <divya1.prakash@intel.com>
Date: Thu, 21 Apr 2016 17:48:53 +0530
Subject: [PATCH 3976/4301] ASoC: Intel: Probe stream operations in alignment
 with new firmware interface

commit 9c68e22bc47c209c9910852cdbb6a6da99e00baf from
git://git@github.com:01org/linux-intel-4.9.git

Based on the new firmware interface and IPCs, following
are implemented:
- Probe as a standalone module and not as a pipeline
- Probe module initialization, gateway configuration
  and deletion
- Single extractor and multiple injector stream setup
- Caching stream info such as DMA channel, buffer size,
  DMA type for all streams
- Single probe instance running for all extractors and
  injectors
- IPCs for connection, disconnection and DMA attach

Change-Id: Icad5108227ff12a7f6cb23b3ae47358f1c8f2cf4
Signed-off-by: Divya Prakash <divya1.prakash@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/8814
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>
[Kevin: Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 sound/soc/intel/skylake/Makefile             |    2 +-
 sound/soc/intel/skylake/skl-messages.c       |  123 ++++++++++
 sound/soc/intel/skylake/skl-pcm.c            |   26 ++-
 sound/soc/intel/skylake/skl-probe.c          |  324 ++++++++++++++++++++++++++
 sound/soc/intel/skylake/skl-probe.h          |   37 +++
 sound/soc/intel/skylake/skl-sst-ipc.h        |   30 +++
 sound/soc/intel/skylake/skl-topology.c       |  103 ++++++++-
 sound/soc/intel/skylake/skl-topology.h       |   47 ++++-
 sound/soc/intel/skylake/skl-tplg-interface.h |   13 +
 9 files changed, 700 insertions(+), 5 deletions(-)
 create mode 100644 sound/soc/intel/skylake/skl-probe.c
 create mode 100644 sound/soc/intel/skylake/skl-probe.h

diff --git a/sound/soc/intel/skylake/Makefile b/sound/soc/intel/skylake/Makefile
index ac409a4..04218cc 100644
--- a/sound/soc/intel/skylake/Makefile
+++ b/sound/soc/intel/skylake/Makefile
@@ -1,5 +1,5 @@
 snd-soc-skl-objs := skl.o skl-sdw-pcm.o skl-pcm.o skl-nhlt.o skl-messages.o \
-skl-topology.o skl-sdw-pcm.o skl-compress.o
+skl-topology.o skl-sdw-pcm.o skl-compress.o skl-probe.o
 
 ifdef CONFIG_DEBUG_FS
   snd-soc-skl-objs += skl-debug.o
diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 8d677bc..d0b2112 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -695,6 +695,30 @@ static void skl_set_copier_format(struct skl_sst *ctx,
 	skl_setup_cpr_gateway_cfg(ctx, mconfig, cpr_mconfig);
 }
 
+static void skl_setup_probe_gateway_cfg(struct skl_sst *ctx,
+			struct skl_module_cfg *mconfig,
+			struct skl_probe_cfg *probe_cfg)
+{
+	union skl_connector_node_id node_id = {0};
+	struct skl_probe_config *pconfig = &ctx->probe_config;
+
+	node_id.node.dma_type = pconfig->edma_type;
+	node_id.node.vindex = pconfig->edma_id;
+	probe_cfg->prb_cfg.dma_buffer_size = pconfig->edma_buffsize;
+
+	memcpy(&(probe_cfg->prb_cfg.node_id), &node_id, sizeof(u32));
+}
+
+static void skl_set_probe_format(struct skl_sst *ctx,
+			struct skl_module_cfg *mconfig,
+			struct skl_probe_cfg *probe_mconfig)
+{
+	struct skl_base_cfg *base_cfg = (struct skl_base_cfg *)probe_mconfig;
+
+	skl_set_base_module_format(ctx, mconfig, base_cfg);
+	skl_setup_probe_gateway_cfg(ctx, mconfig, probe_mconfig);
+}
+
 /*
  * Algo module are DSP pre processing modules. Algo module take base module
  * configuration and params
@@ -747,6 +771,9 @@ static u16 skl_get_module_param_size(struct skl_sst *ctx,
 		param_size += mconfig->formats_config.caps_size;
 		return param_size;
 
+	case SKL_MODULE_TYPE_PROBE:
+		return sizeof(struct skl_probe_cfg);
+
 	case SKL_MODULE_TYPE_SRCINT:
 		return sizeof(struct skl_src_module_cfg);
 
@@ -801,6 +828,10 @@ static int skl_set_module_format(struct skl_sst *ctx,
 		skl_set_copier_format(ctx, module_config, *param_data);
 		break;
 
+	case SKL_MODULE_TYPE_PROBE:
+		skl_set_probe_format(ctx, module_config, *param_data);
+		break;
+
 	case SKL_MODULE_TYPE_SRCINT:
 		skl_set_src_format(ctx, module_config, *param_data);
 		break;
@@ -967,6 +998,70 @@ int skl_init_module(struct skl_sst *ctx,
 	return ret;
 }
 
+int skl_init_probe_module(struct skl_sst *ctx,
+			struct skl_module_cfg *mconfig)
+{
+	u16 module_config_size = 0;
+	void *param_data = NULL;
+	int ret;
+	struct skl_ipc_init_instance_msg msg;
+
+	dev_dbg(ctx->dev, "%s: module_id = %d instance=%d\n", __func__,
+		 mconfig->id.module_id, mconfig->id.instance_id);
+
+
+	ret = skl_set_module_format(ctx, mconfig,
+			&module_config_size, &param_data);
+	if (ret < 0) {
+		dev_err(ctx->dev, "Failed to set module format ret=%d\n", ret);
+		return ret;
+	}
+
+	msg.module_id = mconfig->id.module_id;
+	msg.instance_id = mconfig->id.instance_id;
+	msg.ppl_instance_id = -1;
+	msg.param_data_size = module_config_size;
+	msg.core_id = mconfig->core_id;
+	msg.domain = mconfig->domain;
+
+	ret = skl_ipc_init_instance(&ctx->ipc, &msg, param_data);
+	if (ret < 0) {
+		dev_err(ctx->dev, "Failed to init instance ret=%d\n", ret);
+		kfree(param_data);
+		return ret;
+	}
+	mconfig->m_state = SKL_MODULE_INIT_DONE;
+	kfree(param_data);
+	return ret;
+}
+
+int skl_uninit_probe_module(struct skl_sst *ctx,
+			struct skl_module_cfg *mconfig)
+{
+	u16 module_config_size = 0;
+	int ret;
+	struct skl_ipc_init_instance_msg msg;
+
+	dev_dbg(ctx->dev, "%s: module_id = %d instance=%d\n", __func__,
+		 mconfig->id.module_id, mconfig->id.instance_id);
+
+	msg.module_id = mconfig->id.module_id;
+	msg.instance_id = mconfig->id.instance_id;
+	msg.ppl_instance_id = -1;
+	msg.param_data_size = module_config_size;
+	msg.core_id = mconfig->core_id;
+	msg.domain = mconfig->domain;
+
+	ret = skl_ipc_delete_instance(&ctx->ipc, &msg);
+	if (ret < 0) {
+		dev_err(ctx->dev, "Failed to delete instance ret=%d\n", ret);
+		return ret;
+	}
+	mconfig->m_state = SKL_MODULE_UNINIT;
+
+	return ret;
+}
+
 static void skl_dump_bind_info(struct skl_sst *ctx, struct skl_module_cfg
 	*src_module, struct skl_module_cfg *dst_module)
 {
@@ -979,6 +1074,34 @@ static void skl_dump_bind_info(struct skl_sst *ctx, struct skl_module_cfg
 		src_module->m_state, dst_module->m_state);
 }
 
+int skl_disconnect_probe_point(struct skl_sst *ctx,
+				struct snd_soc_dapm_widget *w)
+{
+	struct skl_ipc_large_config_msg msg;
+	struct skl_probe_config *pconfig = &ctx->probe_config;
+	struct skl_module_cfg *mcfg;
+	int probe_point[8] = {0};
+	int n = 0, i;
+	int no_of_extractor = pconfig->no_extractor;
+
+	dev_dbg(ctx->dev, "Disconnecting probe\n");
+	mcfg = w->priv;
+	msg.module_id = mcfg->id.module_id;
+	msg.instance_id = mcfg->id.instance_id;
+	msg.large_param_id = SKL_PROBE_DISCONNECT;
+
+	for (i = 0; i < no_of_extractor; i++) {
+		if (pconfig->eprobe[i].set) {
+			probe_point[n] = pconfig->eprobe[i].id;
+			pconfig->eprobe[i].set = -1;
+			n++;
+		}
+	}
+
+	msg.param_data_size = n * sizeof(u32);
+	return skl_ipc_set_large_config(&ctx->ipc, &msg,
+						probe_point);
+}
 /*
  * On module freeup, we need to unbind the module with modules
  * it is already bind.
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 3cbfa9d..b8dc0bc 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -30,7 +30,7 @@
 #include "skl-sst-ipc.h"
 #include "skl-sdw-pcm.h"
 #include "skl-fwlog.h"
-#include "skl-compress.h"
+#include "skl-probe.h"
 
 #define HDA_MONO 1
 #define HDA_STEREO 2
@@ -1634,6 +1634,29 @@ static int skl_populate_modules(struct skl *skl)
 
 	return ret;
 }
+static int skl_get_probe_widget(struct snd_soc_platform *platform,
+							struct skl *skl)
+{
+	struct skl_probe_config *pconfig = &skl->skl_sst->probe_config;
+	struct snd_soc_dapm_widget *w;
+
+	list_for_each_entry(w, &platform->component.card->widgets, list) {
+		if (is_skl_dsp_widget_type(w) &&
+				(strstr(w->name, "probe") != NULL)) {
+			pconfig->w = w;
+
+			dev_dbg(platform->dev, "widget type=%d name=%s\n",
+							w->id, w->name);
+			break;
+		}
+	}
+
+	pconfig->probe_count = 0;
+	pconfig->no_injector = 6;
+	pconfig->no_extractor = 8;
+
+	return 0;
+}
 
 static int skl_platform_soc_probe(struct snd_soc_platform *platform)
 {
@@ -1669,6 +1692,7 @@ static int skl_platform_soc_probe(struct snd_soc_platform *platform)
 		}
 		skl_dsp_enable_notification(skl->skl_sst, false);
 		skl_populate_modules(skl);
+		skl_get_probe_widget(platform, skl);
 	}
 	pm_runtime_mark_last_busy(platform->dev);
 	pm_runtime_put_autosuspend(platform->dev);
diff --git a/sound/soc/intel/skylake/skl-probe.c b/sound/soc/intel/skylake/skl-probe.c
new file mode 100644
index 0000000..7c206ec
--- /dev/null
+++ b/sound/soc/intel/skylake/skl-probe.c
@@ -0,0 +1,324 @@
+/*
+ *  skl-probe.c -ASoC HDA Platform driver file implementing probe functionality
+ *
+ *  Copyright (C) 2015-2016 Intel Corp
+ *  Author:  Divya Prakash <divya1.prakash@intel.com>
+ *
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ */
+
+#include <linux/pci.h>
+#include <linux/pm_runtime.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include "skl.h"
+#include "skl-topology.h"
+#include "skl-sst-ipc.h"
+#include "skl-compress.h"
+
+#define USE_SPIB 0
+
+static int set_injector_stream(struct hdac_ext_stream *stream,
+						struct snd_soc_dai *dai)
+{
+	/*
+	 * In the case of injector probe since there can be multiple
+	 * streams, we derive the injector stream number from the dai
+	 * that is opened.
+	 */
+	struct skl *skl = get_skl_ctx(dai->dev);
+	struct skl_probe_config *pconfig =  &skl->skl_sst->probe_config;
+	int i;
+
+	if ((i = skl_get_probe_index(dai, pconfig)) != -1) {
+		pconfig->iprobe[i].stream = stream;
+		pconfig->iprobe[i].dma_id =
+				hdac_stream(stream)->stream_tag - 1;
+	}
+	return 0;
+}
+
+int skl_probe_compr_open(struct snd_compr_stream *substream,
+						struct snd_soc_dai *dai)
+{
+	struct hdac_ext_bus *ebus = dev_get_drvdata(dai->dev);
+	struct hdac_ext_stream *stream = NULL;
+	struct snd_compr_runtime *runtime = substream->runtime;
+	struct skl *skl = get_skl_ctx(dai->dev);
+	struct skl_probe_config *pconfig =  &skl->skl_sst->probe_config;
+
+	dev_dbg(dai->dev, "%s dev is  %s\n",  __func__, dev_name(dai->dev));
+
+	if (!pconfig->probe_count) {
+		/*TODO: Configuring the right DMA buffer size*/
+		pconfig->edma_buffsize = 832;
+		pconfig->edma_type = SKL_DMA_HDA_HOST_INPUT_CLASS;
+		pconfig->estream = hdac_ext_host_stream_compr_assign(ebus,
+								substream,
+							SND_COMPRESS_CAPTURE);
+		pconfig->edma_id = hdac_stream(pconfig->estream)->stream_tag - 1;
+	}
+
+	if (substream->direction == SND_COMPRESS_PLAYBACK) {
+		stream = hdac_ext_host_stream_compr_assign(ebus, substream,
+							SND_COMPRESS_PLAYBACK);
+		set_injector_stream(stream, dai);
+		runtime->private_data = stream;
+
+	} else if (substream->direction == SND_COMPRESS_CAPTURE) {
+		stream = pconfig->estream;
+		runtime->private_data = pconfig->estream;
+	}
+
+	if (stream == NULL) {
+		dev_err(dai->dev, "stream = NULL\n");
+		return -EBUSY;
+	}
+
+	hdac_stream(stream)->curr_pos = 0;
+
+	return 0;
+}
+
+int skl_probe_compr_set_params(struct snd_compr_stream *substream,
+					struct snd_compr_params *params,
+							struct snd_soc_dai *dai)
+{
+
+	struct hdac_ext_bus *ebus = dev_get_drvdata(dai->dev);
+	struct hdac_ext_stream *stream = get_hdac_ext_compr_stream(substream);
+	struct snd_compr_runtime *runtime = substream->runtime;
+	struct skl *skl = get_skl_ctx(dai->dev);
+	struct skl_probe_config *pconfig =  &skl->skl_sst->probe_config;
+	struct skl_module_cfg *mconfig = pconfig->w->priv;
+	int ret, dma_id;
+	unsigned int format_val = 0;
+	int err;
+
+	dev_dbg(dai->dev, "%s: %s\n", __func__, dai->name);
+	ret = skl_substream_alloc_compr_pages(ebus, substream,
+				runtime->fragments*runtime->fragment_size);
+	if (ret < 0)
+		return ret;
+
+	dma_id = hdac_stream(stream)->stream_tag - 1;
+	dev_dbg(dai->dev, "dma_id=%d\n", dma_id);
+
+	if (hdac_stream(stream)->prepared) {
+		dev_dbg(dai->dev, "already stream is prepared - returning\n");
+		return 0;
+	}
+
+	snd_hdac_stream_reset(hdac_stream(stream));
+
+	err = snd_hdac_stream_set_params(hdac_stream(stream), format_val);
+	if (err < 0)
+		return err;
+
+	err = snd_hdac_stream_setup(hdac_stream(stream));
+	if (err < 0) {
+		dev_err(dai->dev, "snd_hdac_stream_setup err = %d\n", err);
+		return err;
+	}
+
+	hdac_stream(stream)->prepared = 1;
+
+	/* Initialize probe module only the first time */
+	if (!pconfig->probe_count) {
+
+		ret = skl_init_probe_module(skl->skl_sst, mconfig);
+		if (ret < 0)
+			return ret;
+	}
+
+	if (substream->direction == SND_COMPRESS_PLAYBACK)
+		skl_tplg_attach_probe_dma(pconfig->w, skl->skl_sst, dai);
+
+	skl_tplg_set_probe_params(pconfig->w, skl->skl_sst, substream->direction, dai);
+	pconfig->probe_count++;
+
+#if USE_SPIB
+	snd_hdac_ext_stream_spbcap_enable(ebus, 1, hdac_stream(stream)->index);
+#endif
+	return 0;
+}
+
+int skl_probe_compr_close(struct snd_compr_stream *substream,
+						struct snd_soc_dai *dai)
+{
+	struct hdac_ext_stream *stream = get_hdac_ext_compr_stream(substream);
+	struct hdac_ext_bus *ebus = dev_get_drvdata(dai->dev);
+	struct skl *skl = get_skl_ctx(dai->dev);
+	struct skl_probe_config *pconfig =  &skl->skl_sst->probe_config;
+	int ret;
+
+	dev_dbg(dai->dev, "%s: %s\n", __func__, dai->name);
+#if USE_SPIB
+	snd_hdac_ext_stream_spbcap_enable(ebus, 0, hdac_stream(stream)->index);
+#endif
+
+	if (!--pconfig->probe_count) {
+		skl_disconnect_probe_point(skl->skl_sst, pconfig->w);
+		ret = skl_uninit_probe_module(skl->skl_sst, pconfig->w->priv);
+		if (ret < 0)
+			return ret;
+	}
+
+	snd_hdac_stream_cleanup(hdac_stream(stream));
+	hdac_stream(stream)->prepared = 0;
+
+	skl_substream_free_compr_pages(ebus_to_hbus(ebus), substream);
+
+	snd_hdac_ext_stream_release(stream, HDAC_EXT_STREAM_TYPE_HOST);
+
+	return 0;
+}
+
+int skl_probe_compr_ack(struct snd_compr_stream *substream, size_t bytes,
+							struct snd_soc_dai *dai)
+{
+	struct hdac_ext_bus *ebus = dev_get_drvdata(dai->dev);
+	struct hdac_bus *bus = ebus_to_hbus(ebus);
+	u64 new_spib_pos;
+	struct snd_compr_runtime *runtime = substream->runtime;
+	u64 spib_pos = div64_u64(runtime->total_bytes_available,
+				    runtime->buffer_size);
+
+	spib_pos = runtime->total_bytes_available -
+		      (spib_pos * runtime->buffer_size);
+	/*SPIB position is a wrap around counter that indicates
+	the position relative to the buffer start address*/
+	new_spib_pos = (spib_pos + bytes) % runtime->buffer_size;
+
+	if (!bus->spbcap) {
+		dev_err(dai->dev, "Address of SPB capability is NULL");
+		return -EINVAL;
+	}
+#if USE_SPIB
+	writel(new_spib_pos, stream->spib_addr);
+#endif
+	return 0;
+}
+
+int skl_probe_compr_tstamp(struct snd_compr_stream *stream,
+		struct snd_compr_tstamp *tstamp, struct snd_soc_dai *dai)
+{
+	struct hdac_ext_stream *hstream = get_hdac_ext_compr_stream(stream);
+
+	tstamp->copied_total = hstream->hstream.curr_pos;
+
+	return 0;
+
+}
+
+int skl_probe_compr_copy(struct snd_compr_stream *stream, char __user *buf,
+					size_t count, struct snd_soc_dai *dai)
+{
+	int offset = 0, availcount = 0, retval = 0, copy;
+	void *dstn;
+
+	if (stream->direction == SND_COMPRESS_CAPTURE) {
+		offset = stream->runtime->total_bytes_transferred %
+						stream->runtime->buffer_size;
+		dstn = stream->runtime->dma_area + offset;
+		availcount = (stream->runtime->buffer_size - offset);
+		if (count > availcount) {
+
+			retval = copy_to_user(buf, dstn, availcount);
+			retval += copy_to_user(buf + availcount,
+					stream->runtime->dma_area,
+							count - availcount);
+		} else
+			retval = copy_to_user(buf, stream->runtime->dma_area
+							+ offset, count);
+
+		if (!retval)
+			retval = count;
+		else
+			retval = count - retval;
+
+	} else if (stream->direction == SND_COMPRESS_PLAYBACK) {
+
+		offset = stream->runtime->total_bytes_available %
+						stream->runtime->buffer_size;
+		dstn = stream->runtime->dma_area + offset;
+
+		if (count < stream->runtime->buffer_size - offset)
+			retval = copy_from_user(dstn, buf, count);
+		else {
+			copy = stream->runtime->buffer_size - offset;
+			retval = copy_from_user(dstn, buf, copy);
+			retval += copy_from_user(stream->runtime->dma_area,
+						buf + copy, count - copy);
+		}
+			if (!retval)
+				retval = count;
+			else
+				retval = count - retval;
+	}
+
+#if USE_SPIB
+	spib_pos = (offset + retval)%stream->runtime->dma_bytes;
+	snd_hdac_ext_stream_set_spib(ebus, estream, spib_pos);
+#endif
+
+	return retval;
+
+}
+
+int skl_probe_compr_trigger(struct snd_compr_stream *substream, int cmd,
+							struct snd_soc_dai *dai)
+{
+	struct hdac_ext_bus *ebus = get_bus_compr_ctx(substream);
+	struct hdac_bus *bus = ebus_to_hbus(ebus);
+	struct hdac_ext_stream *stream;
+	struct hdac_stream *hstr;
+	int start;
+	unsigned long cookie;
+
+	stream = get_hdac_ext_compr_stream(substream);
+	hstr = hdac_stream(stream);
+
+	if (!hstr->prepared)
+		return -EPIPE;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+	case SNDRV_PCM_TRIGGER_RESUME:
+		start = 1;
+		break;
+
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_STOP:
+		start = 0;
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+	spin_lock_irqsave(&bus->reg_lock, cookie);
+
+	if (start)
+		snd_hdac_stream_start(hdac_stream(stream), true);
+	else
+		snd_hdac_stream_stop(hdac_stream(stream));
+
+	spin_unlock_irqrestore(&bus->reg_lock, cookie);
+
+	return 0;
+}
diff --git a/sound/soc/intel/skylake/skl-probe.h b/sound/soc/intel/skylake/skl-probe.h
new file mode 100644
index 0000000..a7b8f34
--- /dev/null
+++ b/sound/soc/intel/skylake/skl-probe.h
@@ -0,0 +1,37 @@
+
+/*
+ *  skl-probe.h - Skylake probe header file
+ *
+ *  Copyright (C) 2015-16 Intel Corp
+ *  Author: Divya Prakash <divya1.prakash@intel.com>
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ */
+
+int skl_probe_compr_open(struct snd_compr_stream *substream,
+					struct snd_soc_dai *dai);
+
+int skl_probe_compr_set_params(struct snd_compr_stream *substream,
+			struct snd_compr_params *params, struct snd_soc_dai *dai);
+
+int skl_probe_compr_tstamp(struct snd_compr_stream *stream,
+			struct snd_compr_tstamp *tstamp, struct snd_soc_dai *dai);
+int skl_probe_compr_close(struct snd_compr_stream *substream,
+					struct snd_soc_dai *dai);
+int skl_probe_compr_ack(struct snd_compr_stream *substream, size_t bytes,
+					struct snd_soc_dai *dai);
+int skl_probe_compr_copy(struct snd_compr_stream *stream, char __user *buf,
+					size_t count, struct snd_soc_dai *dai);
+int skl_probe_compr_trigger(struct snd_compr_stream *substream, int cmd,
+					struct snd_soc_dai *dai);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 326c78b..8b71212 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -24,6 +24,9 @@ struct sst_dsp;
 struct skl_sst;
 struct sst_generic_ipc;
 
+#define NO_OF_INJECTOR 6
+#define NO_OF_EXTRACTOR 8
+
 enum skl_ipc_pipeline_state {
 	PPL_INVALID_STATE =	0,
 	PPL_UNINITIALIZED =	1,
@@ -78,6 +81,32 @@ struct skl_lib_info {
 	const struct firmware *fw;
 };
 
+struct injector_data {
+	int set;
+	int id;
+	struct hdac_ext_stream *stream;
+	int dma_id;
+	int dma_buf_size;
+};
+
+struct extractor_data {
+	int set;
+	int id;
+};
+
+struct skl_probe_config {
+	struct snd_soc_dapm_widget *w;
+	int probe_count;
+	int edma_id;
+	int edma_type;
+	int edma_buffsize;
+	int no_extractor;
+	int no_injector;
+	struct hdac_ext_stream *estream;
+	struct injector_data iprobe[NO_OF_INJECTOR];
+	struct extractor_data eprobe[NO_OF_EXTRACTOR];
+};
+
 struct skl_sst {
 	struct device *dev;
 	struct sst_dsp *dsp;
@@ -126,6 +155,7 @@ struct skl_sst {
 	int num_sdw_controllers;
 	/* Array of sdw masters */
 	struct sdw_master *mstr;
+	struct skl_probe_config probe_config;
 };
 
 struct skl_ipc_init_instance_msg {
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 63fa8b4..ead304e 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -92,7 +92,7 @@ void skl_tplg_d0i3_put(struct skl *skl, enum d0i3_capability caps)
  * SKL DSP driver modelling uses only few DAPM widgets so for rest we will
  * ignore. This helpers checks if the SKL driver handles this widget type
  */
-static int is_skl_dsp_widget_type(struct snd_soc_dapm_widget *w)
+int is_skl_dsp_widget_type(struct snd_soc_dapm_widget *w)
 {
 	switch (w->id) {
 	case snd_soc_dapm_dai_link:
@@ -463,12 +463,111 @@ static void skl_tplg_update_module_params(struct snd_soc_dapm_widget *w,
 	skl_dump_mconfig(ctx, m_cfg);
 }
 
+int skl_get_probe_index(struct snd_soc_dai *dai,
+				struct skl_probe_config *pconfig)
+{
+	int i, ret = -1;
+	char pos[4];
+
+	for (i = 0; i < pconfig->no_injector; i++) {
+		snprintf(pos, 4, "%d", i);
+		if (strstr(dai->name, pos))
+			return i;
+	}
+	return ret;
+}
+
+int skl_tplg_attach_probe_dma(struct snd_soc_dapm_widget *w,
+					struct skl_sst *ctx, struct snd_soc_dai *dai)
+{
+	int i, ret;
+	struct skl_module_cfg *mconfig = w->priv;
+	struct skl_attach_probe_dma ad;
+	struct skl_probe_config *pconfig = &ctx->probe_config;
+
+	if ((i = skl_get_probe_index(dai, pconfig)) != -1) {
+		ad.node_id.node.vindex = pconfig->iprobe[i].dma_id;
+		ad.node_id.node.dma_type = SKL_DMA_HDA_HOST_OUTPUT_CLASS;
+		ad.node_id.node.rsvd = 0;
+		ad.dma_buff_size = 1536;/* TODO:Configure based on calculation*/
+	}
+
+	ret = skl_set_module_params(ctx, (u32 *)&ad,
+			sizeof(struct skl_attach_probe_dma), 1, mconfig);
+	return ret;
+
+}
+
+int skl_tplg_set_probe_params(struct snd_soc_dapm_widget *w,
+					struct skl_sst *ctx, int direction,
+					struct snd_soc_dai *dai)
+{
+	int i, ret = 0, n = 0;
+	struct skl_module_cfg *mconfig = w->priv;
+	const struct snd_kcontrol_new *k;
+	struct soc_bytes_ext *sb;
+	struct skl_probe_data *bc;
+	struct skl_probe_config *pconfig = &ctx->probe_config;
+	struct probe_pt_param prb_pt_param[8] = {{0}};
+
+	if (direction == SND_COMPRESS_PLAYBACK) {
+
+		/* only one injector point can be set at a time*/
+		n = skl_get_probe_index(dai, pconfig);
+		k = &w->kcontrol_news[pconfig->no_extractor + n];
+
+		if (k->access & SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK) {
+			sb = (void *) k->private_value;
+			bc = (struct skl_probe_data *)sb->dobj.private;
+			pr_debug("bc->is_ext_inj = %d, bc->params = %d, bc->is_connect = %d \n",
+						bc->is_ext_inj, bc->params, bc->is_connect);
+			if (!(bc->is_ext_inj == SKL_PROBE_INJECT ||
+					bc->is_ext_inj == SKL_PROBE_INJECT_REEXTRACT))
+				return -EINVAL;
+
+			prb_pt_param[0].params = (int)bc->params;
+			prb_pt_param[0].connection = bc->is_ext_inj;
+			prb_pt_param[0].node_id =  pconfig->iprobe[n].dma_id;
+			ret = skl_set_module_params(ctx, (void *)prb_pt_param, sizeof(struct probe_pt_param),
+							bc->is_connect, mconfig);
+		}
+
+	} else if (direction == SND_COMPRESS_CAPTURE) {
+
+		/*multiple extractor points can be set simultaneously*/
+		for (i = 0; i < pconfig->no_extractor; i++) {
+			k = &w->kcontrol_news[i];
+			if (k->access & SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK) {
+				sb = (void *) k->private_value;
+				bc = (struct skl_probe_data *)sb->dobj.private;
+
+				pr_debug("bc->is_ext_inj = %d, bc->params = %d, bc->is_connect = %d \n",
+							bc->is_ext_inj, bc->params, bc->is_connect);
+				if (bc->is_ext_inj == SKL_PROBE_EXTRACT &&
+						pconfig->eprobe[i].set == 1) {
+					pr_debug("Retrieving the exractor params \n");
+					prb_pt_param[n].params = (int)bc->params;
+					prb_pt_param[n].connection = bc->is_ext_inj;
+					prb_pt_param[n].node_id = -1;
+					n++;
+				}
+			}
+		}
+
+		if (n > 0)
+			ret = skl_set_module_params(ctx, (void *)prb_pt_param, n * sizeof(struct probe_pt_param),
+						SKL_PROBE_CONNECT, mconfig);
+
+	}
+	return ret;
+}
+
 /*
  * some modules can have multiple params set from user control and
  * need to be set after module is initialized. If set_param flag is
  * set module params will be done after module is initialised.
  */
-static int skl_tplg_set_module_params(struct snd_soc_dapm_widget *w,
+int skl_tplg_set_module_params(struct snd_soc_dapm_widget *w,
 						struct skl_sst *ctx)
 {
 	int i, ret;
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 158c96a..872e03b 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -89,6 +89,11 @@ enum skl_widget_type {
 	SKL_WIDGET_PGA = 3,
 	SKL_WIDGET_MUX = 4
 };
+struct probe_pt_param {
+	u32 params;
+	u32 connection;
+	u32 node_id;
+};
 
 struct skl_audio_data_format {
 	enum skl_s_freq s_freq;
@@ -110,6 +115,16 @@ struct skl_base_cfg {
 	struct skl_audio_data_format audio_fmt;
 };
 
+struct skl_probe_gtw_cfg {
+	u32 node_id;
+	u32 dma_buffer_size;
+} __packed;
+
+struct skl_probe_cfg {
+	struct skl_base_cfg base_cfg;
+	struct skl_probe_gtw_cfg prb_cfg;
+} __packed;
+
 struct skl_cpr_gtw_cfg {
 	u32 node_id;
 	u32 dma_buffer_size;
@@ -355,6 +370,17 @@ struct skl_algo_data {
 	char *params;
 };
 
+struct skl_probe_data {
+	u8 is_connect;
+	u32 is_ext_inj;
+	u32 params;
+	u32 node_id;
+} __packed;
+
+struct skl_attach_probe_dma {
+	union skl_connector_node_id node_id;
+	u32 dma_buff_size;
+} __packed;
 struct skl_pipeline {
 	struct skl_pipe *pipe;
 	struct list_head node;
@@ -386,6 +412,7 @@ static inline struct skl *get_skl_ctx(struct device *dev)
 	return ebus_to_skl(ebus);
 }
 
+struct skl_probe_config;
 int skl_tplg_be_update_params(struct snd_soc_dai *dai,
 	struct skl_pipe_params *params);
 int skl_dsp_set_dma_control(struct skl_sst *ctx,
@@ -416,12 +443,28 @@ int skl_reset_pipe(struct skl_sst *ctx, struct skl_pipe *pipe);
 
 int skl_init_module(struct skl_sst *ctx, struct skl_module_cfg *module_config);
 
+int skl_init_probe_module(struct skl_sst *ctx, struct skl_module_cfg *module_config);
+
+int skl_uninit_probe_module(struct skl_sst *ctx, struct skl_module_cfg *module_config);
+
+int skl_get_probe_index(struct snd_soc_dai *dai,
+				struct skl_probe_config *pconfig);
+
+int skl_tplg_attach_probe_dma(struct snd_soc_dapm_widget *w,
+					struct skl_sst *ctx, struct snd_soc_dai *dai);
+int skl_tplg_set_probe_params(struct snd_soc_dapm_widget *w,
+						struct skl_sst *ctx, int direction,
+						struct snd_soc_dai *dai);
+int skl_tplg_set_module_params(struct snd_soc_dapm_widget *w,
+						struct skl_sst *ctx);
+
 int skl_bind_modules(struct skl_sst *ctx, struct skl_module_cfg
 	*src_module, struct skl_module_cfg *dst_module);
 
 int skl_unbind_modules(struct skl_sst *ctx, struct skl_module_cfg
 	*src_module, struct skl_module_cfg *dst_module);
-
+int skl_disconnect_probe_point(struct skl_sst *ctx,
+					struct snd_soc_dapm_widget *w);
 int skl_set_module_params(struct skl_sst *ctx, u32 *params, int size,
 			u32 param_id, struct skl_module_cfg *mcfg);
 int skl_get_module_params(struct skl_sst *ctx, u32 *params, int size,
@@ -429,6 +472,8 @@ int skl_get_module_params(struct skl_sst *ctx, u32 *params, int size,
 
 struct skl_module_cfg *skl_tplg_be_get_cpr_module(struct snd_soc_dai *dai,
 								int stream);
+int is_skl_dsp_widget_type(struct snd_soc_dapm_widget *w);
+
 enum skl_bitdepth skl_get_bit_depth(int params);
 int skl_pcm_host_dma_prepare(struct device *dev,
 			struct skl_pipe_params *params);
diff --git a/sound/soc/intel/skylake/skl-tplg-interface.h b/sound/soc/intel/skylake/skl-tplg-interface.h
index 8fed6ce..ae0dc56 100644
--- a/sound/soc/intel/skylake/skl-tplg-interface.h
+++ b/sound/soc/intel/skylake/skl-tplg-interface.h
@@ -26,6 +26,7 @@
 #define SKL_CONTROL_TYPE_BYTE_TLV	0x100
 #define SKL_CONTROL_TYPE_MIC_SELECT	0x102
 #define SKL_CONTROL_TYPE_DSP_LOG      0x105
+#define SKL_CONTROL_TYPE_BYTE_PROBE	0x101
 
 #define HDA_SST_CFG_MAX	900 /* size of copier cfg*/
 #define MAX_IN_QUEUE 8
@@ -87,6 +88,7 @@ enum skl_module_type {
 	SKL_MODULE_TYPE_BASE_OUTFMT,
 	SKL_MODULE_TYPE_KPB,
 	SKL_MODULE_TYPE_MIC_SELECT,
+	SKL_MODULE_TYPE_PROBE
 };
 
 enum skl_core_affinity {
@@ -233,6 +235,17 @@ struct skl_dfw_module {
 	struct skl_dfw_module_caps caps;
 } __packed;
 
+enum skl_probe_connect_type {
+	SKL_PROBE_CONNECT = 3,
+	SKL_PROBE_DISCONNECT
+};
+
+enum skl_probe_direction {
+	SKL_PROBE_EXTRACT = 0,
+	SKL_PROBE_INJECT,
+	SKL_PROBE_INJECT_REEXTRACT
+};
+
 struct skl_dfw_sdw_aggdata {
 	u32 alh_stream_num;
 	u32 channel_mask;
-- 
1.7.5.4

