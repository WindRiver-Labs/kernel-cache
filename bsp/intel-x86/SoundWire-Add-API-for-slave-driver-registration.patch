From ee86e31f27cbb35b1bdb92ea8bd878b592380be2 Mon Sep 17 00:00:00 2001
From: Hardik T Shah <hardik.t.shah@intel.com>
Date: Tue, 8 Mar 2016 22:30:07 +0530
Subject: [PATCH 3809/4301] SoundWire: Add API for slave driver registration.

commit d085775bffcae4aeafe5d4de8589a324ee47827c from
git://git@github.com:01org/linux-intel-4.9.git

This patch add supports for registering/unregistering
SoundWire slave driver. Slave device is registered
by bus driver on enumeration.

Change-Id: I9853409c4383e8c87ac04df97d506d0d980f760c
Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
---
 include/linux/sdw_bus.h |   37 +++++++++++++++++++++++++++++++++++++
 1 files changed, 37 insertions(+), 0 deletions(-)

diff --git a/include/linux/sdw_bus.h b/include/linux/sdw_bus.h
index 38f8c9b..169e46a 100644
--- a/include/linux/sdw_bus.h
+++ b/include/linux/sdw_bus.h
@@ -1023,4 +1023,41 @@ int __sdw_mstr_driver_register(struct module *owner,
  */
 void sdw_mstr_driver_unregister(struct sdw_mstr_driver *drv);
 
+/**
+ * __sdw_slave_driver_register: SoundWire Slave driver registration with
+ *				SDW bus. This API will register the Slave
+ *				driver with the SoundWire bus. It is typically
+ *				called from the driver's module-init function.
+ * @drv: Driver to be associated with Slave.
+ */
+int __sdw_slave_driver_register(struct module *owner,
+					struct sdw_slave_driver *drv);
+#define sdw_slave_driver_register(drv) \
+			__sdw_slave_driver_register(THIS_MODULE, drv)
+
+/**
+ * sdw_register_slave_capabilities: Register slave device capabilties to the
+ *				bus driver. Since bus driver handles bunch
+ *				of slave register programming it should
+ *				be aware of slave device capabilties.
+ *				Slave device is attached to bus based on
+ *				enumeration. Once slave driver is attached
+ *				to device and probe of slave driver is called
+ *				on device and driver binding, slave driver
+ *				should call this function to register its
+ *				capabilties to bus. This should be the very
+ *				first function to bus driver from slave driver
+ *				once slave driver is registered and probed.
+ * @slave: SoundWire Slave handle
+ * @cap: Slave capabilities to be updated to bus driver.
+ */
+int sdw_register_slave_capabilities(struct sdw_slave *slave,
+					struct sdw_slv_capabilities *cap);
+
+/**
+ * sdw_slave_driver_unregister: Undo effects of sdw_slave_driver_register
+ * @drv: SDW Slave driver to be unregistered
+ */
+void sdw_slave_driver_unregister(struct sdw_slave_driver *drv);
+
 #endif /*  _LINUX_SDW_BUS_H */
-- 
1.7.5.4

