From d043737a37d8a2367b5856df115635fb21307511 Mon Sep 17 00:00:00 2001
From: Zhang Ning <ning.a.zhang@intel.com>
Date: Wed, 16 Nov 2016 10:20:37 +0800
Subject: [PATCH 4261/4301] support kernel preload modules

commit 15c4c6346dfb1dd6d8f71970fa77164dbc19c504 from
git://git@github.com:01org/linux-intel-4.9.git

in order to speed up boot, we need load module by kernel

below are what we meet, and solution.

1, our kernel has CONFIG_MODULE_SIG=y, kernel sign key
and algorithm must init before the point we preload modules.
so we make asymmetric, x509, system_keyring load before rootfs_initcall

2, for request_module doesn't support module parameters, and we need to
load modules with parameters.
we write a new method to load kernel modules.

3, in order to leave more buffer for module preload, rootfs_populate moved
to fs_initcall. rootfs_populate starts at 300ms. 60ms early than before.

4, in order not to hard code the preload modules inside kernel, we add
"/preload_module" to support dynamic configure.

Syntax of "/preload_module":
this file is UNIX format, means newline is '\n', no encoding support, ASCII
NO comments support.
one module pre-line. it looks like below.
/full/path/to/module.ko option1=value1 option2=value2
/full/path/to/module2.ko

Modules order MUST in dependence order.
we will never resolve module dependence.

Change-Id: I98862a2103a611494403d68a75f48e153e0a275d
Tracked-On:
Signed-off-by: Zhang Ning <ning.a.zhang@intel.com>
---
 Documentation/preload_module.txt         |   66 +++++++++++++++++++++++
 certs/system_keyring.c                   |    4 +-
 crypto/asymmetric_keys/asymmetric_type.c |    2 +-
 crypto/asymmetric_keys/x509_public_key.c |    2 +-
 crypto/rsa.c                             |    2 +-
 init/initramfs.c                         |    5 ++-
 init/preload_module.c                    |   84 ++++++++++++++++++++++++++++++
 7 files changed, 159 insertions(+), 6 deletions(-)
 create mode 100644 Documentation/preload_module.txt
 create mode 100644 init/preload_module.c

diff --git a/Documentation/preload_module.txt b/Documentation/preload_module.txt
new file mode 100644
index 0000000..af9b2ca
--- /dev/null
+++ b/Documentation/preload_module.txt
@@ -0,0 +1,66 @@
+            ========================
+            preload module in kernel
+            ========================
+
+            author: Zhang Ning <ning.a.zhang@intel.com>
+
+==========
+background
+==========
+
+preload module in kernel is to speed up system boot.
+
+
+we (liu shuo <shuo.liu@intel.com> and me) found after async rootfs_populate. there
+is a time slot to preload modules, and it can run parallelly with kernel main
+thread.
+
+usually system boot like (with async rootfs_populate):
+
+-----kernel main thread----------------->>init thread---load modules--other init---->>>
+    |--async roofs---->>>>>>>>>>>>>>>>>>>>|
+
+if preload modules in kernel, system boot like:
+
+-----kernel main thread----------------->>init thread----other init---->>>
+    |--async rootfs---->>load modules-----|
+
+we can find time saving, when async rootfs is faster than kernel main thread.
+and that require a small rootfs.
+
+this method will load configure from /preload_module, and load them one by one.
+
+
+
+============
+requirements
+============
+
+A, rootfs_populate is using async_schedule_domain.
+B, small rootfs. the kernel driver to preload and related firmware need be in rootfs.
+C, if CONFIG_MODULE_SIG=y, need load related sign key/algorithm in advance.
+	eg: asymmetric_type.c, x509_public_key.c, system_keyring.c
+
+
+==============
+tuning preload
+==============
+
+A, tuning rootfs size, build non-urgent to other parittion.
+B, move rootfs_populate to early stage, and sign key/algorithm needs to adjust
+	same time.
+
+
+=========================
+Syntax of /preload_module
+=========================
+
+A, this file is UNIX format, means newline is '\n', no encoding support, ASCII
+B, NO comments support.
+C, one module pre-line, using full path, no alias.
+	module option starts after module path, separate with single space (not tab).
+	it looks like below.
+/full/path/to/module.ko option1=value1 option2=value2
+/full/path/to/module2.ko
+
+D, Modules order MUST in dependence order. we will never resolve module dependence.
diff --git a/certs/system_keyring.c b/certs/system_keyring.c
index 50979d6..97a7c84 100644
--- a/certs/system_keyring.c
+++ b/certs/system_keyring.c
@@ -106,7 +106,7 @@ static __init int system_trusted_keyring_init(void)
 /*
  * Must be initialised before we try and load the keys into the keyring.
  */
-device_initcall(system_trusted_keyring_init);
+fs_initcall(system_trusted_keyring_init);
 
 /*
  * Load the compiled-in list of X.509 certificates.
@@ -162,7 +162,7 @@ dodgy_cert:
 	pr_err("Problem parsing in-kernel X.509 certificate list\n");
 	return 0;
 }
-late_initcall(load_system_certificate_list);
+device_initcall(load_system_certificate_list);
 
 #ifdef CONFIG_SYSTEM_DATA_VERIFICATION
 
diff --git a/crypto/asymmetric_keys/asymmetric_type.c b/crypto/asymmetric_keys/asymmetric_type.c
index 6600181..38bcf73 100644
--- a/crypto/asymmetric_keys/asymmetric_type.c
+++ b/crypto/asymmetric_keys/asymmetric_type.c
@@ -521,5 +521,5 @@ static void __exit asymmetric_key_cleanup(void)
 	unregister_key_type(&key_type_asymmetric);
 }
 
-module_init(asymmetric_key_init);
+fs_initcall(asymmetric_key_init);
 module_exit(asymmetric_key_cleanup);
diff --git a/crypto/asymmetric_keys/x509_public_key.c b/crypto/asymmetric_keys/x509_public_key.c
index fb73229..f298e1e 100644
--- a/crypto/asymmetric_keys/x509_public_key.c
+++ b/crypto/asymmetric_keys/x509_public_key.c
@@ -256,7 +256,7 @@ static void __exit x509_key_exit(void)
 	unregister_asymmetric_key_parser(&x509_key_parser);
 }
 
-module_init(x509_key_init);
+fs_initcall(x509_key_init);
 module_exit(x509_key_exit);
 
 MODULE_DESCRIPTION("X.509 certificate parser");
diff --git a/crypto/rsa.c b/crypto/rsa.c
index 4c280b6..ef4ff76 100644
--- a/crypto/rsa.c
+++ b/crypto/rsa.c
@@ -392,7 +392,7 @@ static void rsa_exit(void)
 	crypto_unregister_akcipher(&rsa);
 }
 
-module_init(rsa_init);
+fs_initcall(rsa_init);
 module_exit(rsa_exit);
 MODULE_ALIAS_CRYPTO("rsa");
 MODULE_LICENSE("GPL");
diff --git a/init/initramfs.c b/init/initramfs.c
index a15084b..9aae8841 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -19,6 +19,8 @@
 #include <linux/syscalls.h>
 #include <linux/utime.h>
 #include <linux/async.h>
+#include "preload_module.c"
+
 
 static ssize_t __init xwrite(int fd, const char *p, size_t count)
 {
@@ -655,6 +657,7 @@ static void __init async_populate_rootfs(void *data, async_cookie_t cookie)
 		 * us a chance to load before device_initcalls.
 		 */
 		load_default_modules();
+		load_preload_modules();
 	}
 	return;
 }
@@ -665,4 +668,4 @@ static int __init populate_rootfs(void)
 	return 0;
 }
 
-rootfs_initcall(populate_rootfs);
+fs_initcall(populate_rootfs);
diff --git a/init/preload_module.c b/init/preload_module.c
new file mode 100644
index 0000000..ae54d82
--- /dev/null
+++ b/init/preload_module.c
@@ -0,0 +1,84 @@
+#include <linux/types.h>
+#include <linux/syscalls.h>
+#include <linux/fcntl.h>
+
+#define MODULE_LIST_CONF "/preload_module"
+#define CONFIG_SIZE (1024 * 4)
+
+static int __init load_module(const char *filename, const char *options)
+{
+	int fd, ret;
+
+	fd = sys_open(filename, O_RDONLY, 0);
+	if (fd < 0)
+		return fd;
+	ret = sys_finit_module(fd, options ? options : "", 0);
+	sys_close(fd);
+	return ret;
+}
+
+static int __init find_pos(char *s, char c)
+{
+	char *t;
+
+	t = s;
+	while (true) {
+		if (*t == '\0')
+			break;
+		if (*t == c)
+			break;
+		t++;
+	}
+	return t-s;
+}
+
+static int __init load_preload_modules(void)
+{
+	int fd, count, pos0, pos1;
+	char *cache, *line, *name, *options;
+	char *temp1, *temp;
+
+	temp1 = kmalloc(CONFIG_SIZE, GFP_KERNEL);
+	if (!temp1)
+		return -ENOMEM;
+	fd = sys_open(MODULE_LIST_CONF, O_RDONLY, 0);
+	if (fd < 0) {
+		kfree(temp1);
+		return fd;
+	}
+	count = sys_read(fd, temp1, CONFIG_SIZE);
+	cache = kstrndup(temp1, count, GFP_KERNEL);
+	kfree(temp1);
+	sys_close(fd);
+	if (!cache)
+		return -ENOMEM;
+
+	temp = cache;
+	for (;;) {
+		if (cache + count <= temp)
+			break;
+		pos0 = find_pos(temp, '\n');
+		if (pos0 > 0) {
+			line = kstrndup(temp, pos0, GFP_KERNEL);
+			temp = temp + pos0 + 1;
+		} else {
+			temp++;
+			continue;
+		}
+		if (!line)
+			continue;
+		pos1 = find_pos(line, ' ');
+		name = kstrndup(line, pos1, GFP_KERNEL);
+		if (!name)
+			continue;
+		if (strlen(line) > pos1)
+			options = line + pos1 + 1;
+		else
+			options = NULL;
+		load_module(name, options);
+		kfree(line);
+		kfree(name);
+	}
+	kfree(cache);
+	return 0;
+}
-- 
1.7.5.4

