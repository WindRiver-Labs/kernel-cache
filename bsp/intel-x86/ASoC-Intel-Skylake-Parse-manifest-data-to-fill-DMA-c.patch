From 5c0b5930afacec238ed5bdd0efbdc0c332d4c28b Mon Sep 17 00:00:00 2001
From: "Kareem,Shaik" <kareem.m.shaik@intel.com>
Date: Thu, 15 Jun 2017 13:25:09 +0530
Subject: [PATCH 4245/4301] ASoC: Intel: Skylake: Parse manifest data to fill
 DMA control parameters

commit b1d4f6303844cea69cc65534a68af4aea8c40c22 from
git://git@github.com:01org/linux-intel-4.9.git

DMA control parameters are required in order to initialize or
modify DMA gateway configuration in ADSP Firmware. These parameters
are kept in the manifest data blocks and driver should read these
values from this manifest.

This patch parses manifest private data blocks and fill DMA control
configuration structure in driver accordingly.

Change-Id: Icb01a78c1869181681c7d82f49069dc666be4444
Signed-off-by: Kareem,Shaik <kareem.m.shaik@intel.com>
---
 include/uapi/sound/snd_sst_tokens.h    |   11 +++-
 sound/soc/intel/skylake/skl-topology.c |   86 ++++++++++++++++++++++++++++++--
 sound/soc/intel/skylake/skl.h          |   21 ++++++++
 3 files changed, 111 insertions(+), 7 deletions(-)

diff --git a/include/uapi/sound/snd_sst_tokens.h b/include/uapi/sound/snd_sst_tokens.h
index a5a4242..2a1de81 100644
--- a/include/uapi/sound/snd_sst_tokens.h
+++ b/include/uapi/sound/snd_sst_tokens.h
@@ -257,6 +257,12 @@
  *
  * %SKL_TKN_U32_SCH_NUM_CONF:   Number of configs
  *
+ * %SKL_TKN_U32_DMACTRL_CFG_IDX:
+ *				Config index to fill up DMA control params
+ *
+ * %SKL_TKN_U32_DMACTRL_CFG_SIZE:
+ *				Size information of DMA control params
+ *
  * %SKL_TKN_MM_U8_MAJOR_VER:    Major version of firmware extended manifest
  *
  * %SKL_TKN_MM_U8_MINOR_VER:    Minor version of firmware extended manifest
@@ -461,9 +467,10 @@ enum SKL_TKNS {
 	SKL_TKN_U32_AGG_LINK_ID,
 	SKL_TKN_U32_AGG_CH_MASK,
 	SKL_TKN_U32_AGG_ID,
-
 	SKL_TKN_U32_DMA_BUF_SIZE,
-	SKL_TKN_MAX = SKL_TKN_U32_DMA_BUF_SIZE,
+	SKL_TKN_U32_DMACTRL_CFG_IDX,
+	SKL_TKN_U32_DMACTRL_CFG_SIZE,
+	SKL_TKN_MAX = SKL_TKN_U32_DMACTRL_CFG_SIZE,
 };
 
 #endif
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index da586ac..dd9da0a 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -3786,6 +3786,63 @@ static int skl_tplg_get_str_tkn(struct device *dev,
 	return tkn_count;
 }
 
+static int skl_tplg_mfest_fill_dmactrl(struct device *dev,
+		struct skl_dmactrl_config *dmactrl_cfg,
+		struct snd_soc_tplg_vendor_value_elem *tkn_elem)
+{
+
+	u32 cfg_idx = dmactrl_cfg->idx;
+	struct skl_dmctrl_hdr *hdr = &dmactrl_cfg->hdr[cfg_idx];
+
+	switch (tkn_elem->token) {
+	case SKL_TKN_U32_FMT_CH:
+		hdr->ch = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_FMT_FREQ:
+		hdr->freq = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_FMT_BIT_DEPTH:
+		hdr->fmt = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_PIPE_DIRECTION:
+		hdr->direction = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_TIME_SLOT:
+		hdr->tdm_slot = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_VBUS_ID:
+		hdr->vbus_id = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_DMACTRL_CFG_IDX:
+		dmactrl_cfg->idx  = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_DMACTRL_CFG_SIZE:
+		if (tkn_elem->value && !hdr->data) {
+			hdr->data = devm_kzalloc(dev,
+				tkn_elem->value, GFP_KERNEL);
+			if (!hdr->data)
+				return -ENOMEM;
+			hdr->data_size = tkn_elem->value;
+		} else {
+			hdr->data_size = 0;
+			dev_err(dev, "Invalid dmactrl info \n");
+		}
+		break;
+	default:
+		dev_err(dev, "Invalid token %d\n", tkn_elem->token);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static int skl_tplg_mfest_fill_fmt(struct device *dev,
 		struct skl_module_intf *fmt,
 		struct snd_soc_tplg_vendor_value_elem *tkn_elem,
@@ -4043,9 +4100,17 @@ static int skl_tplg_get_int_tkn(struct device *dev,
 	case SKL_TKN_U32_FMT_SAMPLE_TYPE:
 	case SKL_TKN_U32_FMT_CH_MAP:
 	case SKL_TKN_MM_U32_INTF_PIN_ID:
-		ret = skl_tplg_mfest_fill_fmt(dev, fmt, tkn_elem, dir,
-				pin_idx);
-
+	case SKL_TKN_U32_PIPE_DIRECTION:
+	case SKL_TKN_U8_TIME_SLOT:
+	case SKL_TKN_U32_VBUS_ID:
+	case SKL_TKN_U32_DMACTRL_CFG_IDX:
+	case SKL_TKN_U32_DMACTRL_CFG_SIZE:
+		if (skl->modules)
+			ret = skl_tplg_mfest_fill_fmt(dev, fmt, tkn_elem, dir,
+					pin_idx);
+		else
+			ret = skl_tplg_mfest_fill_dmactrl(dev, &skl->cfg.dmactrl_cfg,
+					 tkn_elem);
 		if (ret < 0)
 			return ret;
 
@@ -4151,8 +4216,9 @@ static int skl_tplg_get_manifest_data(struct snd_soc_tplg_manifest *manifest,
 {
 	struct snd_soc_tplg_vendor_array *array;
 	int num_blocks, block_size = 0, block_type, off = 0;
+	struct skl_dmctrl_hdr *dmactrl_hdr;
+	int cfg_idx, ret;
 	char *data;
-	int ret;
 
 	/* Read the NUM_DATA_BLOCKS descriptor */
 	array = (struct snd_soc_tplg_vendor_array *)manifest->priv.data;
@@ -4197,7 +4263,17 @@ static int skl_tplg_get_manifest_data(struct snd_soc_tplg_manifest *manifest,
 
 			--num_blocks;
 		} else {
-			return -EINVAL;
+			cfg_idx = skl->cfg.dmactrl_cfg.idx;
+			if (cfg_idx < SKL_MAX_DMACTRL_CFG) {
+				dmactrl_hdr = &skl->cfg.dmactrl_cfg.hdr[cfg_idx];
+				if (dmactrl_hdr->data && (dmactrl_hdr->data_size == block_size))
+					memcpy(dmactrl_hdr->data, data, block_size);
+			} else {
+				dev_err(dev, "error block_idx value exceeding %d\n", cfg_idx);
+				return -EINVAL;
+			}
+			ret = block_size;
+			--num_blocks;
 		}
 		off += ret;
 	}
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 9ad7659..df2ee44 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -42,6 +42,7 @@
 #define SKL_MAX_OUT_QUEUE 8
 #define SKL_MAX_LL_SRC_CFG  8
 #define SKL_MAX_DMA_CFG    24
+#define SKL_MAX_DMACTRL_CFG	7
 
 struct skl_dsp_resource {
 	u32 max_mcps;
@@ -86,12 +87,32 @@ struct skl_sch_config {
 	u32 node_info[SKL_MAX_LL_SRC_CFG];
 } __packed;
 
+struct skl_dmctrl_hdr {
+	u32 vbus_id;
+	u32 freq;
+	u32 tdm_slot;
+	u32 fmt;
+	u32 direction;
+	u32 ch;
+	u32 data_size;
+	u32 *data;
+} __packed;
+
+struct skl_dmactrl_config {
+	u32 type;
+	u32 size;
+	u32 idx;
+	struct skl_dmctrl_hdr hdr[SKL_MAX_DMACTRL_CFG];
+} __packed;
+
+
 struct skl_fw_cfg_info {
 	struct skl_mem_status mem_sts;
 	struct skl_dsp_freq slw_frq;
 	struct skl_dsp_freq fst_frq;
 	struct skl_dma_buff_cfg dmacfg;
 	struct skl_sch_config sch_cfg;
+	struct skl_dmactrl_config dmactrl_cfg;
 } __packed;
 
 struct skl {
-- 
1.7.5.4

