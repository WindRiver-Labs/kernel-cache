From 0e773e0da6bfbd218db06ed20468b74975b1948a Mon Sep 17 00:00:00 2001
From: Sathyanarayanan Kuppuswamy <sathyanarayanan.kuppuswamy@intel.com>
Date: Tue, 9 May 2017 15:33:49 -0700
Subject: [PATCH 3651/4301] usb: host: xhci-pci: set host device phy handle

commit ade2fe74c52008d78135929c7f7ce9c942fc7b78 from
git://git@github.com:01org/linux-intel-4.9.git

In some Intel SOC's, an internal PHY is shared between
host and device controller. So the PHY should be registered
for both host and device mode. This patch handles the
section of host side configuration.

Signed-off-by: Sathyanarayanan Kuppuswamy <sathyanarayanan.kuppuswamy@intel.com>
[Kevin: Remove the unused variable]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/usb/host/xhci-pci.c |   26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index ffbdb99..c120c27 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -24,6 +24,8 @@
 #include <linux/slab.h>
 #include <linux/module.h>
 #include <linux/acpi.h>
+#include <linux/usb/phy.h>
+#include <linux/usb/otg.h>
 
 #include "xhci.h"
 #include "xhci-trace.h"
@@ -53,6 +55,8 @@
 #define PCI_DEVICE_ID_INTEL_BROXTON_B_XHCI		0x1aa8
 #define PCI_DEVICE_ID_INTEL_APL_XHCI			0x5aa8
 
+#define XHCI_INTEL_VENDOR_CAPS 192
+
 static const char hcd_name[] = "xhci_hcd";
 
 static struct hc_driver __read_mostly xhci_pci_hc_driver;
@@ -66,11 +70,33 @@ static const struct xhci_driver_overrides xhci_pci_overrides __initconst = {
 /* called after powerup, by probe or system-pm "wakeup" */
 static int xhci_pci_reinit(struct xhci_hcd *xhci, struct pci_dev *pdev)
 {
+	struct usb_hcd *hcd;
+	int retval;
+
 	/*
 	 * TODO: Implement finding debug ports later.
 	 * TODO: see if there are any quirks that need to be added to handle
 	 * new extended capabilities.
 	 */
+	retval = XHCI_HCC_EXT_CAPS(readl(&xhci->cap_regs->hcc_params));
+	retval = xhci_find_next_ext_cap(&xhci->cap_regs->hc_capbase,
+					retval << 2,
+					XHCI_INTEL_VENDOR_CAPS);
+	/* If This capbility is found, register host on PHY for OTG purpose */
+	if (pdev->vendor == PCI_VENDOR_ID_INTEL && retval) {
+		hcd = xhci_to_hcd(xhci);
+		hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
+
+		if (!IS_ERR_OR_NULL(hcd->usb_phy)) {
+			retval = otg_set_host(hcd->usb_phy->otg, &hcd->self);
+			if (retval)
+				usb_put_phy(hcd->usb_phy);
+		} else {
+			xhci_dbg(xhci, "No USB2 PHY transceiver found\n");
+			hcd->usb_phy = NULL;
+		}
+	}
+
 
 	/* PCI Memory-Write-Invalidate cycle support is optional (uncommon) */
 	if (!pci_set_mwi(pdev))
-- 
1.7.5.4

