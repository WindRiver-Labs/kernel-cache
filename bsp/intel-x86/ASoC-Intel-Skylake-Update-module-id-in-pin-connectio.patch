From 922aeccbbcafc39b4c70581c0885a73d27386d94 Mon Sep 17 00:00:00 2001
From: "Panwar, Ashish" <ashish.panwar@intel.com>
Date: Mon, 29 Aug 2016 10:00:44 +0530
Subject: [PATCH 4092/4301] ASoC: Intel: Skylake: Update module id in pin
 connections

commit 200673d63cfbd3f08bebe913a000460331fcdbf6 from
git://git@github.com:01org/linux-intel-4.9.git

Currently, each module instance id is getting read from
firmware binary and updated in the driver. However, the
module id in the statically mapped pins of a module is
still the same as coming from topology binary. This causes
module binding failure if the module id is wrong in the
topology binary. This patch updates the module id in the
pin connections of each module instance.

Signed-off-by: Panwar, Ashish <ashish.panwar@intel.com>
Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
[Kevin: Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 sound/soc/intel/skylake/skl-pcm.c      |   52 +++++++++++++++++++++++++++-----
 sound/soc/intel/skylake/skl-topology.h |    1 +
 2 files changed, 45 insertions(+), 8 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index b1e82d5..3b01990 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1694,8 +1694,13 @@ static int skl_pcm_new(struct snd_soc_pcm_runtime *rtd)
 static int skl_get_module_info(struct skl *skl, struct skl_module_cfg *mconfig)
 {
 	struct skl_sst *ctx = skl->skl_sst;
+	int i;
+	struct skl_module_inst_id *pin_id;
+	struct skl_module *skl_module;
+	uuid_le *uuid_bin_fw, *uuid_bin_tplg;
 	struct uuid_module *module;
 	uuid_le *uuid_mod;
+	bool found = false;
 
 	uuid_mod = (uuid_le *)mconfig->guid;
 
@@ -1707,18 +1712,46 @@ static int skl_get_module_info(struct skl *skl, struct skl_module_cfg *mconfig)
 	list_for_each_entry(module, &ctx->uuid_list, list) {
 		if (uuid_le_cmp(*uuid_mod, module->uuid) == 0) {
 			mconfig->id.module_id = module->id;
-			if (skl->nr_modules != 0)
-				mconfig->module = module->mod_data;
-			if (mconfig->module)
-				 mconfig->module->loadable =
-					 module->is_loadable;
-			return 0;
+			found = true;
+			break;
 		}
 	}
 
-	return -EIO;
+	if (!found)
+		return -EIO;
+		
+	uuid_bin_fw = &module->uuid;
+	for (i = 0; i < skl->nr_modules; i++) {
+		skl_module = &skl->modules[i];
+		uuid_bin_tplg = &skl_module->uuid;
+		if (uuid_le_cmp(*uuid_bin_fw, *uuid_bin_tplg) == 0) {
+			mconfig->module = skl_module;
+			found = true;
+			break;
+		}
+	}
+	
+	if (!found)
+		return -EIO;
+
+	list_for_each_entry(module, &ctx->uuid_list, list) {
+		for (i = 0; i < SKL_MAX_IN_QUEUE; i++) {
+			pin_id = &mconfig->m_in_pin[i].id;
+			if (uuid_le_cmp(pin_id->mod_uuid, module->uuid) == 0)
+				pin_id->module_id = module->id;
+		}
+		
+		for (i = 0; i < SKL_MAX_OUT_QUEUE; i++) {
+			pin_id = &mconfig->m_out_pin[i].id;
+			if (uuid_le_cmp(pin_id->mod_uuid, module->uuid) == 0)
+				pin_id->module_id = module->id;
+		}
+	}
+
+	return 0;
 }
 
+
 static int skl_populate_modules(struct skl *skl)
 {
 	struct skl_pipeline *p;
@@ -1803,8 +1836,11 @@ static int skl_platform_soc_probe(struct snd_soc_platform *platform)
 			dev_err(platform->dev, "Failed to boot first fw: %d\n", ret);
 			return ret;
 		}
+		ret = skl_populate_modules(skl);
+		if (ret < 0)
+			return ret;
+
 		skl_dsp_enable_notification(skl->skl_sst, false);
-		skl_populate_modules(skl);
 		skl_get_probe_widget(platform, skl);
 	}
 	pm_runtime_mark_last_busy(platform->dev);
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 79a2b2d..9c6f526 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -232,6 +232,7 @@ struct skl_kpb_params {
 };
 
 struct skl_module_inst_id {
+	uuid_le mod_uuid;
 	u32 module_id;
 	u32 instance_id;
 	int pvt_id;
-- 
1.7.5.4

