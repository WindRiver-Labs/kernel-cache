From 9f6bdb0ea56a83f8d8378b6d6db3f144dda8d791 Mon Sep 17 00:00:00 2001
From: Hardik T Shah <hardik.t.shah@intel.com>
Date: Wed, 9 Mar 2016 11:50:25 +0530
Subject: [PATCH 3825/4301] SoundWire: Implement "match" callback for bus
 driver

commit 00e2518cbb2f5c145ca6d1e7a4dfdfaa4ef1fdc5 from
git://git@github.com:01org/linux-intel-4.9.git

This patch implements "match" method for the bus driver
registration.

Change-Id: I9fabdce35c7010b7fb5f8c52ff5eaa917f68dfc4
Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
---
 drivers/sdw/sdw.c |  149 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 149 insertions(+), 0 deletions(-)

diff --git a/drivers/sdw/sdw.c b/drivers/sdw/sdw.c
index bdb2d5a..0950bcd 100644
--- a/drivers/sdw/sdw.c
+++ b/drivers/sdw/sdw.c
@@ -35,12 +35,161 @@
 #include <linux/sdw/sdw_registers.h>
 #include "sdw_priv.h"
 
+#define sdw_slave_attr_gr NULL
+#define sdw_mstr_attr_gr NULL
+
+
 /* Global instance handling all the SoundWire buses */
 struct sdw_core sdw_core;
 
+static void sdw_slave_release(struct device *dev)
+{
+	kfree(to_sdw_slave(dev));
+}
+
+static void sdw_mstr_release(struct device *dev)
+{
+	struct sdw_master *mstr = to_sdw_master(dev);
+
+	complete(&mstr->slv_released);
+}
+
+static struct device_type sdw_slv_type = {
+	.groups		= sdw_slave_attr_gr,
+	.release	= sdw_slave_release,
+};
+
+static struct device_type sdw_mstr_type = {
+	.groups		= sdw_mstr_attr_gr,
+	.release	= sdw_mstr_release,
+};
+/**
+ * sdw_slave_verify - return parameter as sdw_slave, or NULL
+ * @dev: device, probably from some driver model iterator
+ *
+ * When traversing the driver model tree, perhaps using driver model
+ * iterators like @device_for_each_child(), you can't assume very much
+ * about the nodes you find.  Use this function to avoid oopses caused
+ * by wrongly treating some non-SDW device as an sdw_slave.
+ */
+struct sdw_slave *sdw_slave_verify(struct device *dev)
+{
+	return (dev->type == &sdw_slv_type)
+			? to_sdw_slave(dev)
+			: NULL;
+}
+
+/**
+ * sdw_mstr_verify - return parameter as sdw_master, or NULL
+ * @dev: device, probably from some driver model iterator
+ *
+ * When traversing the driver model tree, perhaps using driver model
+ * iterators like @device_for_each_child(), you can't assume very much
+ * about the nodes you find.  Use this function to avoid oopses caused
+ * by wrongly treating some non-SDW device as an sdw_slave.
+ */
+struct sdw_master *sdw_mstr_verify(struct device *dev)
+{
+	return (dev->type == &sdw_mstr_type)
+			? to_sdw_master(dev)
+			: NULL;
+}
+
+static const struct sdw_slave_id *sdw_match_slave(const struct sdw_slave_id *id,
+					const struct sdw_slave *sdw_slv)
+{
+	while (id->name[0]) {
+		if (strncmp(sdw_slv->name, id->name, SOUNDWIRE_NAME_SIZE) == 0)
+			return id;
+		id++;
+	}
+	return NULL;
+}
+
+static const struct sdw_master_id *sdw_match_master(
+			const struct sdw_master_id *id,
+			const struct sdw_master *sdw_mstr)
+{
+	if (!id)
+		return NULL;
+	while (id->name[0]) {
+		if (strncmp(sdw_mstr->name, id->name, SOUNDWIRE_NAME_SIZE) == 0)
+			return id;
+		id++;
+	}
+	return NULL;
+}
+
+static int sdw_slv_match(struct device *dev, struct device_driver *driver)
+{
+	struct sdw_slave *sdw_slv;
+	struct sdw_slave_driver *drv = to_sdw_slave_driver(driver);
+	int ret = 0;
+
+	/* Check if driver is slave type or not, both master and slave
+	 * driver has first field as driver_type, so if driver is not
+	 * of slave type return
+	 */
+	if (drv->driver_type !=  SDW_DRIVER_TYPE_SLAVE)
+		return ret;
+
+	sdw_slv = to_sdw_slave(dev);
+
+	if (drv->id_table)
+		ret = (sdw_match_slave(drv->id_table, sdw_slv) != NULL);
+
+	if (driver->name && !ret)
+		ret = (strncmp(sdw_slv->name, driver->name, SOUNDWIRE_NAME_SIZE)
+			== 0);
+	if (ret)
+		sdw_slv->driver = drv;
+	return ret;
+}
+static int sdw_mstr_match(struct device *dev, struct device_driver *driver)
+{
+	struct sdw_master *sdw_mstr;
+	struct sdw_mstr_driver *drv = to_sdw_mstr_driver(driver);
+	int ret = 0;
+
+	/* Check if driver is slave type or not, both master and slave
+	 * driver has first field as driver_type, so if driver is not
+	 * of slave type return
+	 */
+	if (drv->driver_type !=  SDW_DRIVER_TYPE_MASTER)
+		return ret;
+
+	sdw_mstr = to_sdw_master(dev);
+
+	if (drv->id_table)
+		ret =  (sdw_match_master(drv->id_table, sdw_mstr) != NULL);
+
+	if (driver->name)
+		ret = (strncmp(sdw_mstr->name, driver->name,
+			SOUNDWIRE_NAME_SIZE) == 0);
+	if (ret)
+		sdw_mstr->driver = drv;
+
+	return ret;
+}
+
+static int sdw_match(struct device *dev, struct device_driver *driver)
+{
+	struct sdw_slave *sdw_slv;
+	struct sdw_master *sdw_mstr;
+
+	sdw_slv = sdw_slave_verify(dev);
+	sdw_mstr = sdw_mstr_verify(dev);
+	if (sdw_slv)
+		return sdw_slv_match(dev, driver);
+	else if (sdw_mstr)
+		return sdw_mstr_match(dev, driver);
+	return 0;
+
+}
 
 struct bus_type sdw_bus_type = {
 	.name		= "soundwire",
+	.match		= sdw_match,
 };
 EXPORT_SYMBOL_GPL(sdw_bus_type);
 
-- 
1.7.5.4

