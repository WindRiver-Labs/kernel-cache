From 99cdde6e557724974e7e9c5854e550027fd39b57 Mon Sep 17 00:00:00 2001
From: Guneshwor Singh <guneshwor.o.singh@intel.com>
Date: Mon, 6 Mar 2017 09:47:50 +0530
Subject: [PATCH 4093/4301] ASoC: Intel: Skylake: Split dais and add flag for
 dynamic dais

commit e8592878b6a7b352936eac7c29560145965d5795 from
git://git@github.com:01org/linux-intel-4.9.git

Since FE dais can come from topology, split the FE dais from
existing dai array and use module param to decide to register
them during probe.

Change-Id: I9f5d3d89e070b65800ada57746df21d1f6754e78
Signed-off-by: Guneshwor Singh <guneshwor.o.singh@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/13923
Reviewed-by: Prusty, Subhransu S <subhransu.s.prusty@intel.com>
Reviewed-by: Jayanti, Satya Charitardha <satya.charitardha.jayanti@intel.com>
Reviewed-by: Diwakar, Praveen <praveen.diwakar@intel.com>
Tested-by: Sm, Bhadur A <bhadur.a.sm@intel.com>
---
 sound/soc/intel/skylake/skl-pcm.c |  154 +++++++++++++++++++++---------------
 1 files changed, 90 insertions(+), 64 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 3b01990..fafad31 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -936,47 +936,7 @@ static struct snd_soc_dai_ops skl_sdw_dai_ops = {
 	.shutdown = skl_sdw_shutdown,
 };
 
-static struct snd_soc_dai_driver skl_platform_dai[] = {
-{
-	.name = "TraceBuffer0 Pin",
-	.compress_new = snd_soc_new_compress,
-	.cops = &skl_trace_compr_ops,
-	.capture = {
-		.stream_name = "TraceBuffer0 Capture",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_MONO,
-	},
-},
-{
-	.name = "TraceBuffer1 Pin",
-	.compress_new = snd_soc_new_compress,
-	.cops = &skl_trace_compr_ops,
-	.capture = {
-		.stream_name = "TraceBuffer1 Capture",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_MONO,
-	},
-},
-{
-	.name = "TraceBuffer2 Pin",
-	.compress_new = snd_soc_new_compress,
-	.cops = &skl_trace_compr_ops,
-	.capture = {
-		.stream_name = "TraceBuffer2 Capture",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_MONO,
-	},
-},
-{
-	.name = "TraceBuffer3 Pin",
-	.compress_new = snd_soc_new_compress,
-	.cops = &skl_trace_compr_ops,
-	.capture = {
-		.stream_name = "TraceBuffer3 Capture",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_MONO,
-	},
-},
+static struct snd_soc_dai_driver skl_fe_dai[] = {
 {
 	.name = "System Pin",
 	.ops = &skl_pcm_dai_ops,
@@ -1031,24 +991,6 @@ static struct snd_soc_dai_driver skl_platform_dai[] = {
 	},
 },
 {
-	.name = "Compress Probe0 Pin",
-	.compress_new = snd_soc_new_compress,
-	.cops = &skl_probe_compr_ops,
-	.playback = {
-		.stream_name = "Probe Playback",
-		.channels_min = HDA_MONO,
-	},
-},
-{
-	.name = "Compress Probe1 Pin",
-	.compress_new = snd_soc_new_compress,
-	.cops = &skl_probe_compr_ops,
-	.capture = {
-			.stream_name = "Probe Capture",
-			.channels_min = HDA_MONO,
-	},
-},
-{
 	.name = "LowLatency Pin",
 	.ops = &skl_pcm_dai_ops,
 	.playback = {
@@ -1120,8 +1062,10 @@ static struct snd_soc_dai_driver skl_platform_dai[] = {
 		.sig_bits = 32,
 	},
 },
+};
 
-/* BE CPU  Dais */
+/* BE cpu dais and compress dais*/
+static struct snd_soc_dai_driver skl_platform_dai[] = {
 {
 	.name = "SSP0 Pin",
 	.ops = &skl_be_ssp_dai_ops,
@@ -1421,6 +1365,64 @@ static struct snd_soc_dai_driver skl_platform_dai[] = {
 	},
 
 },
+{
+	.name = "TraceBuffer0 Pin",
+	.compress_new = snd_soc_new_compress,
+	.cops = &skl_trace_compr_ops,
+	.capture = {
+		.stream_name = "TraceBuffer0 Capture",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_MONO,
+	},
+},
+{
+	.name = "TraceBuffer1 Pin",
+	.compress_new = snd_soc_new_compress,
+	.cops = &skl_trace_compr_ops,
+	.capture = {
+		.stream_name = "TraceBuffer1 Capture",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_MONO,
+	},
+},
+{
+	.name = "TraceBuffer2 Pin",
+	.compress_new = snd_soc_new_compress,
+	.cops = &skl_trace_compr_ops,
+	.capture = {
+		.stream_name = "TraceBuffer2 Capture",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_MONO,
+	},
+},
+{
+	.name = "TraceBuffer3 Pin",
+	.compress_new = snd_soc_new_compress,
+	.cops = &skl_trace_compr_ops,
+	.capture = {
+		.stream_name = "TraceBuffer3 Capture",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_MONO,
+	},
+},
+{
+	.name = "Compress Probe0 Pin",
+	.compress_new = snd_soc_new_compress,
+	.cops = &skl_probe_compr_ops,
+	.playback = {
+		.stream_name = "Probe Playback",
+		.channels_min = HDA_MONO,
+	},
+},
+{
+	.name = "Compress Probe1 Pin",
+	.compress_new = snd_soc_new_compress,
+	.cops = &skl_probe_compr_ops,
+	.capture = {
+			.stream_name = "Probe Capture",
+			.channels_min = HDA_MONO,
+	},
+},
 };
 
 static int skl_platform_open(struct snd_pcm_substream *substream)
@@ -1860,11 +1862,22 @@ static const struct snd_soc_component_driver skl_component = {
 	.name           = "pcm",
 };
 
+/*
+ * mod param to decide during platform registration whether
+ * if FE dai and FE dai links will come from topology or not.
+ * By default, it takes the fe dais defined above i.e. skl_fe_dai[].
+ */
+static int dynamic_dai;
+module_param(dynamic_dai, int, 0644);
+
 int skl_platform_register(struct device *dev)
 {
-	int ret;
+	int ret, skl_total_dai;
 	struct hdac_ext_bus *ebus = dev_get_drvdata(dev);
 	struct skl *skl = ebus_to_skl(ebus);
+	int skl_num_fe_dai = ARRAY_SIZE(skl_fe_dai);
+	int skl_num_dai = ARRAY_SIZE(skl_platform_dai);
+	struct snd_soc_dai_driver *skl_dais;
 
 	INIT_LIST_HEAD(&skl->ppl_list);
 	INIT_LIST_HEAD(&skl->bind_list);
@@ -1874,9 +1887,22 @@ int skl_platform_register(struct device *dev)
 		dev_err(dev, "soc platform registration failed %d\n", ret);
 		return ret;
 	}
-	ret = snd_soc_register_component(dev, &skl_component,
-				skl_platform_dai,
-				ARRAY_SIZE(skl_platform_dai));
+
+	skl_total_dai = (dynamic_dai ? skl_num_dai : skl_num_fe_dai +
+			 skl_num_dai);
+	skl_dais = devm_kcalloc(dev, skl_total_dai, sizeof(*skl_dais),
+				GFP_KERNEL);
+	if (!skl_dais)
+		return -ENOMEM;
+
+	memcpy(skl_dais, skl_platform_dai, sizeof(skl_platform_dai));
+
+	if (!dynamic_dai)
+		memcpy(&skl_dais[skl_num_dai], skl_fe_dai,
+						sizeof(skl_fe_dai));
+
+	ret = snd_soc_register_component(dev, &skl_component, skl_dais,
+					 skl_total_dai);
 	if (ret) {
 		dev_err(dev, "soc component registration failed %d\n", ret);
 		snd_soc_unregister_platform(dev);
-- 
1.7.5.4

