From b78e2e5bedd1b21406c3d473e8b2bcdb971a8c9f Mon Sep 17 00:00:00 2001
From: Ryan Metcalfe <ryan.d.metcalfe@intel.com>
Date: Mon, 12 Jun 2017 12:44:30 -0400
Subject: [PATCH 4289/4301] more dma_attr warning / error fixes

[Kevin: The original patch is taken from a tarball from Ryan]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/media/pci/intel-ipu4/intel-ipu4-fw-com.c  |    4 ++--
 drivers/media/pci/intel-ipu4/intel-ipu4-psys.c    |    7 +++----
 drivers/media/pci/intel-ipu4/intel-ipu4-wrapper.c |    8 ++++----
 3 files changed, 9 insertions(+), 10 deletions(-)

diff --git a/drivers/media/pci/intel-ipu4/intel-ipu4-fw-com.c b/drivers/media/pci/intel-ipu4/intel-ipu4-fw-com.c
index ff115c5..88dc9de 100644
--- a/drivers/media/pci/intel-ipu4/intel-ipu4-fw-com.c
+++ b/drivers/media/pci/intel-ipu4/intel-ipu4-fw-com.c
@@ -230,7 +230,7 @@ void *intel_ipu4_fw_com_prepare(struct intel_ipu4_fw_com_cfg *cfg,
 
 	ctx->dma_buffer = dma_alloc_attrs(&ctx->adev->dev, sizeall,
 					  &ctx->dma_addr,
-					  GFP_KERNEL, NULL);
+					  GFP_KERNEL, 0);
 	ctx->dma_size = sizeall;
 
 	/* This is the address where FW starts to parse allocations */
@@ -347,7 +347,7 @@ int intel_ipu4_fw_com_release(struct intel_ipu4_fw_com_context *ctx,
 		return -EBUSY;
 
 	dma_free_attrs(&ctx->adev->dev, ctx->dma_size,
-		       ctx->dma_buffer, ctx->dma_addr, NULL);
+		       ctx->dma_buffer, ctx->dma_addr, 0);
 	kfree(ctx);
 	return 0;
 }
diff --git a/drivers/media/pci/intel-ipu4/intel-ipu4-psys.c b/drivers/media/pci/intel-ipu4/intel-ipu4-psys.c
index 47a30d9..f63df80 100644
--- a/drivers/media/pci/intel-ipu4/intel-ipu4-psys.c
+++ b/drivers/media/pci/intel-ipu4/intel-ipu4-psys.c
@@ -28,7 +28,6 @@
 #include <linux/sched.h>
 #include <linux/uaccess.h>
 #include <linux/vmalloc.h>
-#include <linux/dma-attrs.h>
 
 #include <uapi/linux/intel-ipu4-psys.h>
 
@@ -419,16 +418,16 @@ static struct sg_table *intel_ipu4_dma_buf_map(
 					enum dma_data_direction dir)
 {
 	struct intel_ipu4_psys_kbuffer *kbuf = attach->priv;
-	DEFINE_DMA_ATTRS(attrs);
+	unsigned long attrs = 0;
 	int ret;
 
 	ret = intel_ipu4_psys_get_userpages(kbuf);
 	if (ret)
 		return NULL;
 
-	dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+	attrs = DMA_ATTR_SKIP_CPU_SYNC;
 	ret = dma_map_sg_attrs(attach->dev, kbuf->sgt->sgl,
-				kbuf->sgt->orig_nents, dir, &attrs);
+				kbuf->sgt->orig_nents, dir, attrs);
 	if (ret < kbuf->sgt->orig_nents) {
 		intel_ipu4_psys_put_userpages(kbuf);
 		dev_dbg(&kbuf->psys->adev->dev, "buf map failed\n");
diff --git a/drivers/media/pci/intel-ipu4/intel-ipu4-wrapper.c b/drivers/media/pci/intel-ipu4/intel-ipu4-wrapper.c
index a83dd80..e3ccc52 100644
--- a/drivers/media/pci/intel-ipu4/intel-ipu4-wrapper.c
+++ b/drivers/media/pci/intel-ipu4/intel-ipu4-wrapper.c
@@ -44,7 +44,7 @@ struct my_css_memory_buffer_item {
 	dma_addr_t iova;
 	unsigned long *addr;
 	size_t bytes;
-	struct dma_attrs attrs;
+	unsigned long attrs;
 };
 
 /*
@@ -327,14 +327,14 @@ u64 shared_memory_alloc(int mmid, size_t bytes)
 	/*alloc using intel_ipu4 dma driver*/
 	size = PAGE_ALIGN(bytes);
 
-	addr = dma_alloc_attrs(mine->dev, size, &dma_addr, GFP_KERNEL, NULL);
+	addr = dma_alloc_attrs(mine->dev, size, &dma_addr, GFP_KERNEL, 0);
 	if (!addr)
 		return 0;
 
 	rval = intel_ipu4_wrapper_add_shared_memory_buffer(mmid, addr,
 							   dma_addr, size);
 	if (rval) {
-		dma_free_attrs(mine->dev, size, addr, dma_addr, NULL);
+		dma_free_attrs(mine->dev, size, addr, dma_addr, 0);
 		return 0;
 	}
 
@@ -368,7 +368,7 @@ void shared_memory_free(int mmid, u64 addr)
 		list_del(&buf->list);
 		spin_unlock_irqrestore(&mine->lock, flags);
 		dma_free_attrs(mine->dev, buf->bytes, buf->addr,
-			       buf->iova, &buf->attrs);
+			       buf->iova, buf->attrs);
 		kfree(buf);
 		return;
 	}
-- 
1.7.5.4

