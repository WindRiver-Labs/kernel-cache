From b9aefb8e614f95ca48fb814874eb8c06de6e790c Mon Sep 17 00:00:00 2001
From: Sanyog Kale <sanyog.r.kale@intel.com>
Date: Thu, 10 Mar 2016 12:35:54 +0530
Subject: [PATCH 3847/4301] SoundWire: Added code in bandwidth calculation
 API's

commit 155e2f8630568ab621a789734e2471ae132bcdf4 from
git://git@github.com:01org/linux-intel-4.9.git

All the functionality needed to done by
sdw_bus_calc_bw & sdw_bus_calc_bw_dis
API's are added.

Change-Id: Ie833244aea09b30483d9755ec39be5cb35244256
Signed-off-by: Sanyog Kale <sanyog.r.kale@intel.com>
---
 drivers/sdw/sdw_bwcalc.c |  443 ++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 443 insertions(+), 0 deletions(-)

diff --git a/drivers/sdw/sdw_bwcalc.c b/drivers/sdw/sdw_bwcalc.c
index 01b0849..5e0b150 100644
--- a/drivers/sdw/sdw_bwcalc.c
+++ b/drivers/sdw/sdw_bwcalc.c
@@ -408,6 +408,231 @@ int sdw_prep_unprep_mstr_slv(struct sdw_bus *sdw_mstr_bs,
 int sdw_bus_calc_bw(struct sdw_stream_tag *stream_tag, bool enable)
 {
 
+	struct sdw_runtime *sdw_rt = stream_tag->sdw_rt;
+	struct sdw_stream_params *stream_params = &sdw_rt->stream_params;
+	struct sdw_mstr_runtime *sdw_mstr_rt = NULL, *sdw_mstr_bs_rt = NULL;
+	struct sdw_bus *sdw_mstr_bs = NULL;
+	struct sdw_master *sdw_mstr = NULL;
+	struct sdw_master_capabilities *sdw_mstr_cap = NULL;
+	struct sdw_stream_params *mstr_params;
+	int stream_frame_size;
+	int frame_interval = 0, sel_row = 0, sel_col = 0;
+	int ret = 0;
+
+	/* TBD: Add PCM/PDM flag in sdw_config_stream */
+
+	/*
+	 * TBD: check for mstr_rt is in configured state or not
+	 * If yes, then configure masters as well
+	 * If no, then do not configure/enable master related parameters
+	 */
+
+	/* BW calulation for active master controller for given stream tag */
+	list_for_each_entry(sdw_mstr_rt, &sdw_rt->mstr_rt_list, mstr_sdw_node) {
+
+		if (sdw_mstr_rt->mstr == NULL)
+			break;
+
+		/* Get bus structure for master */
+		list_for_each_entry(sdw_mstr_bs, &sdw_core.bus_list, bus_node) {
+
+			/* Match master structure pointer */
+			if (sdw_mstr_bs->mstr != sdw_mstr_rt->mstr)
+				continue;
+
+
+			sdw_mstr = sdw_mstr_bs->mstr;
+			break;
+		}
+
+		/*
+		 * All data structures required available,
+		 * lets calculate BW for master controller
+		 */
+
+		/* Check for isochronous mode plus other checks if required */
+		sdw_mstr_cap = &sdw_mstr_bs->mstr->mstr_capabilities;
+		mstr_params = &sdw_mstr_rt->stream_params;
+
+		if ((sdw_rt->stream_state == SDW_STATE_CONFIG_STREAM) ||
+				(sdw_rt->stream_state ==
+					SDW_STATE_UNPREPARE_STREAM)) {
+
+			/* we do not support asynchronous mode Return Error */
+			if ((sdw_mstr_cap->base_clk_freq % mstr_params->rate)
+					!= 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Asynchronous mode not supported\n");
+				return -EINVAL;
+			}
+
+			/* Check for sampling frequency */
+			if (stream_params->rate != mstr_params->rate) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Sampling frequency mismatch\n");
+				return -EINVAL;
+			}
+
+			/*
+			 * Calculate stream bandwidth, frame size and
+			 * total BW required for master controller
+			 */
+			sdw_mstr_rt->stream_bw = mstr_params->rate *
+				mstr_params->channel_count * mstr_params->bps;
+			stream_frame_size = mstr_params->channel_count *
+				mstr_params->bps;
+
+			sdw_mstr_bs->bandwidth += sdw_mstr_rt->stream_bw;
+
+			ret = sdw_get_clock_frmshp(sdw_mstr_bs,
+					&frame_interval, &sel_col, &sel_row);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev, "clock/frameshape config failed\n");
+				return ret;
+			}
+
+
+			/*
+			 * TBD: find right place to run sorting on
+			 * master rt_list. Below sorting is done based on
+			 * bps from low to high, that means PDM streams
+			 * will be placed before PCM.
+			 */
+
+			/*
+			 * TBD Should we also perform sorting based on rate
+			 * for PCM stream check. if yes then how??
+			 * creating two different list.
+			 */
+
+			/* Compute system interval */
+			ret = sdw_compute_sys_interval(sdw_mstr_bs,
+					sdw_mstr_cap, frame_interval);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev, "compute system interval failed\n");
+				return ret;
+			}
+
+			/* Compute hstart/hstop */
+			ret = sdw_compute_hstart_hstop(sdw_mstr_bs, sel_col);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"compute hstart/hstop failed\n");
+				return ret;
+			}
+
+			/* Compute block offset */
+			ret = sdw_compute_blk_subblk_offset(sdw_mstr_bs);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(
+						&sdw_mstr_bs->mstr->dev,
+						"compute block offset failed\n");
+				return ret;
+			}
+
+			/* Change Stream State */
+			sdw_rt->stream_state = SDW_STATE_COMPUTE_STREAM;
+
+			/* Configure bus parameters */
+			ret = sdw_cfg_bs_params(sdw_mstr_bs,
+					sdw_mstr_bs_rt, true);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"xport params config failed\n");
+				return ret;
+			}
+
+			sel_col = sdw_mstr_bs->col;
+			sel_row = sdw_mstr_bs->row;
+
+			/* Configure Frame Shape/Switch Bank */
+			ret = sdw_configure_frmshp_bnkswtch(sdw_mstr_bs,
+					sel_col, sel_row);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"bank switch failed\n");
+				return ret;
+			}
+
+			/* Disable all channels enabled on previous bank */
+			ret = sdw_dis_chan(sdw_mstr_bs, sdw_mstr_bs_rt);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Channel disabled failed\n");
+				return ret;
+			}
+
+			/* Prepare new port for master and slave */
+			ret = sdw_prep_unprep_mstr_slv(sdw_mstr_bs,
+					sdw_rt, true);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Channel prepare failed\n");
+				return ret;
+			}
+
+			/* change stream state to prepare */
+			sdw_rt->stream_state = SDW_STATE_PREPARE_STREAM;
+		}
+
+		if ((enable) && (SDW_STATE_PREPARE_STREAM
+					== sdw_rt->stream_state)) {
+
+			ret = sdw_cfg_bs_params(sdw_mstr_bs,
+					sdw_mstr_bs_rt, false);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"xport params config failed\n");
+				return ret;
+			}
+
+			/* Enable new port for master and slave */
+			ret = sdw_en_dis_mstr_slv(sdw_mstr_bs, sdw_rt, true);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Channel enable failed\n");
+				return ret;
+			}
+
+			/* change stream state to enable */
+			sdw_rt->stream_state = SDW_STATE_ENABLE_STREAM;
+
+			sel_col = sdw_mstr_bs->col;
+			sel_row = sdw_mstr_bs->row;
+
+			/* Configure Frame Shape/Switch Bank */
+			ret = sdw_configure_frmshp_bnkswtch(sdw_mstr_bs,
+					sel_col, sel_row);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"bank switch failed\n");
+				return ret;
+			}
+
+			/* Disable all channels enabled on previous bank */
+			ret = sdw_dis_chan(sdw_mstr_bs, sdw_mstr_bs_rt);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Channel disabled faile\n");
+				return ret;
+			}
+		}
+	}
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(sdw_bus_calc_bw);
@@ -428,6 +653,224 @@ EXPORT_SYMBOL_GPL(sdw_bus_calc_bw);
  */
 int sdw_bus_calc_bw_dis(struct sdw_stream_tag *stream_tag, bool unprepare)
 {
+	struct sdw_runtime *sdw_rt = stream_tag->sdw_rt;
+	struct sdw_mstr_runtime *sdw_mstr_rt = NULL, *sdw_mstr_bs_rt = NULL;
+	struct sdw_bus *sdw_mstr_bs = NULL;
+	struct sdw_master *sdw_mstr = NULL;
+	struct sdw_master_capabilities *sdw_mstr_cap = NULL;
+	struct sdw_stream_params *mstr_params;
+	int stream_frame_size;
+	int frame_interval = 0, sel_row = 0, sel_col = 0;
+	int ret = 0;
+
+
+	/* BW calulation for active master controller for given stream tag */
+	list_for_each_entry(sdw_mstr_rt, &sdw_rt->mstr_rt_list, mstr_sdw_node) {
+
+		if (sdw_mstr_rt->mstr == NULL)
+			break;
+
+		/* Get bus structure for master */
+		list_for_each_entry(sdw_mstr_bs, &sdw_core.bus_list, bus_node) {
+
+			/* Match master structure pointer */
+			if (sdw_mstr_bs->mstr != sdw_mstr_rt->mstr)
+				continue;
+
+
+			sdw_mstr = sdw_mstr_bs->mstr;
+			break;
+		}
+
+
+		sdw_mstr_cap = &sdw_mstr_bs->mstr->mstr_capabilities;
+		mstr_params = &sdw_mstr_rt->stream_params;
+
+		if (sdw_rt->stream_state == SDW_STATE_ENABLE_STREAM) {
+
+			/* Lets do disabling of port for stream to be freed */
+			list_for_each_entry(sdw_mstr_bs_rt,
+					&sdw_mstr->mstr_rt_list, mstr_node) {
+
+				if (sdw_mstr_bs_rt->mstr == NULL)
+					continue;
+
+				/*
+				 * Disable channel for slave and
+				 * master on current bank
+				 */
+				ret = sdw_en_dis_mstr_slv(sdw_mstr_bs,
+						sdw_rt, false);
+				if (ret < 0) {
+					/* TBD: Undo all the computation */
+					dev_err(&sdw_mstr_bs->mstr->dev,
+							"Channel dis failed\n");
+					return ret;
+				}
+
+				/* Change stream state to disable */
+				sdw_rt->stream_state = SDW_STATE_DISABLE_STREAM;
+			}
+
+			ret = sdw_cfg_bs_params(sdw_mstr_bs,
+					sdw_mstr_bs_rt, false);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"xport params config failed\n");
+				return ret;
+			}
+
+			sel_col = sdw_mstr_bs->col;
+			sel_row = sdw_mstr_bs->row;
+
+			/* Configure frame shape/Switch Bank  */
+			ret = sdw_configure_frmshp_bnkswtch(sdw_mstr_bs,
+					sel_col, sel_row);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"bank switch failed\n");
+				return ret;
+			}
+
+			/* Disable all channels enabled on previous bank */
+			ret = sdw_dis_chan(sdw_mstr_bs, sdw_mstr_bs_rt);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Channel disabled failed\n");
+				return ret;
+			}
+		}
+
+		if ((unprepare) &&
+				(SDW_STATE_DISABLE_STREAM ==
+				 sdw_rt->stream_state)) {
+
+			/* 1. Un-prepare master and slave port */
+			list_for_each_entry(sdw_mstr_bs_rt,
+					&sdw_mstr->mstr_rt_list, mstr_node) {
+
+				if (sdw_mstr_bs_rt->mstr == NULL)
+					continue;
+
+				ret = sdw_prep_unprep_mstr_slv(sdw_mstr_bs,
+						sdw_rt, false);
+				if (ret < 0) {
+					/* TBD: Undo all the computation */
+					dev_err(&sdw_mstr_bs->mstr->dev,
+							"Chan unprep failed\n");
+					return ret;
+				}
+
+				/* change stream state to unprepare */
+				sdw_rt->stream_state =
+					SDW_STATE_UNPREPARE_STREAM;
+			}
+
+			/*
+			 * Calculate new bandwidth, frame size
+			 * and total BW required for master controller
+			 */
+			sdw_mstr_rt->stream_bw = mstr_params->rate *
+				mstr_params->channel_count * mstr_params->bps;
+			stream_frame_size = mstr_params->channel_count *
+				mstr_params->bps;
+
+			sdw_mstr_bs->bandwidth -= sdw_mstr_rt->stream_bw;
+
+			/* Something went wrong in bandwidth calulation */
+			if (sdw_mstr_bs->bandwidth < 0) {
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"BW calculation failed\n");
+				return -EINVAL;
+			}
+
+			if (!sdw_mstr_bs->bandwidth) {
+				/*
+				 * Last stream on master should
+				 * return successfully
+				 */
+				sdw_rt->stream_state =
+					SDW_STATE_UNCOMPUTE_STREAM;
+				return 0;
+			}
+
+			ret = sdw_get_clock_frmshp(sdw_mstr_bs,
+					&frame_interval, &sel_col, &sel_row);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"clock/frameshape failed\n");
+				return ret;
+			}
+
+			/* Compute new transport params for running streams */
+			/* No sorting required here */
+
+			/* Compute system interval */
+			ret = sdw_compute_sys_interval(sdw_mstr_bs,
+					sdw_mstr_cap, frame_interval);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"compute SI failed\n");
+				return ret;
+			}
+
+			/* Compute hstart/hstop */
+			ret = sdw_compute_hstart_hstop(sdw_mstr_bs, sel_col);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"compute hstart/hstop fail\n");
+				return ret;
+			}
+
+			/* Compute block offset */
+			ret = sdw_compute_blk_subblk_offset(sdw_mstr_bs);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"compute block offset failed\n");
+				return ret;
+			}
+
+			/* Configure bus params */
+			ret = sdw_cfg_bs_params(sdw_mstr_bs,
+					sdw_mstr_bs_rt, true);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"xport params config failed\n");
+				return ret;
+			}
+
+			/* Configure Frame Shape/Switch Bank */
+			ret = sdw_configure_frmshp_bnkswtch(sdw_mstr_bs,
+					sel_col, sel_row);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"bank switch failed\n");
+				return ret;
+			}
+
+			/* Change stream state to uncompute */
+			sdw_rt->stream_state = SDW_STATE_UNCOMPUTE_STREAM;
+
+			/* Disable all channels enabled on previous bank */
+			ret = sdw_dis_chan(sdw_mstr_bs, sdw_mstr_bs_rt);
+			if (ret < 0) {
+				/* TBD: Undo all the computation */
+				dev_err(&sdw_mstr_bs->mstr->dev,
+						"Channel disabled failed\n");
+				return ret;
+			}
+		}
+
+	}
 
 	return 0;
 }
-- 
1.7.5.4

