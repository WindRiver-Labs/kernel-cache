From f9c6d33425dd4196d67c816bb2dd71328af3d08f Mon Sep 17 00:00:00 2001
From: Hardik T Shah <hardik.t.shah@intel.com>
Date: Fri, 11 Mar 2016 08:56:36 +0530
Subject: [PATCH 3869/4301] SoundWire:Intel: Add API to allocate port

commit 22c5956e106cd48a63e11b55f70963bf943561f7 from
git://git@github.com:01org/linux-intel-4.9.git

Intel master controller supports bi-directional port
which can be configured either as Source or Sink ports.
This API provides funtionality to dynamically allocate
ports for audio streaming. It picks up the free port
attaches the ALH stream to it and returns. This is called
by ASoC platform driver for port allocation for streaming.

Change-Id: Id3747f35b0c476ebe3900115f66daad11adb0d10
Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
---
 drivers/sdw/sdw_cnl.c |   78 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 78 insertions(+), 0 deletions(-)

diff --git a/drivers/sdw/sdw_cnl.c b/drivers/sdw/sdw_cnl.c
index 9b49b10..ffa384d 100644
--- a/drivers/sdw/sdw_cnl.c
+++ b/drivers/sdw/sdw_cnl.c
@@ -471,6 +471,84 @@ static int sdw_init(struct cnl_sdw *sdw)
 	return sdw_config_update(sdw);
 }
 
+static int sdw_alloc_pcm_stream(struct cnl_sdw *sdw,
+			struct cnl_sdw_port *port, int ch_cnt,
+			enum sdw_data_direction direction)
+{
+	return 0;
+}
+
+static int sdw_alloc_pdm_stream(struct cnl_sdw *sdw,
+			struct cnl_sdw_port *port, int ch_cnt, int direction)
+{
+	return 0;
+}
+
+struct cnl_sdw_port *cnl_sdw_alloc_port(struct sdw_master *mstr, int ch_count,
+				enum sdw_data_direction direction,
+				enum cnl_sdw_pdi_stream_type stream_type)
+{
+	struct cnl_sdw *sdw;
+	struct cnl_sdw_port *port = NULL;
+	int i, ret = 0;
+	struct num_pdi_streams;
+
+	sdw = sdw_master_get_drvdata(mstr);
+
+	mutex_lock(&sdw->stream_lock);
+	for (i = 1; i <= CNL_SDW_MAX_PORTS; i++) {
+		if (sdw->port[i].allocated == false) {
+			port = &sdw->port[i];
+			port->allocated = true;
+			port->direction = direction;
+			port->ch_cnt = ch_count;
+			break;
+		}
+	}
+	mutex_unlock(&sdw->stream_lock);
+	if (!port) {
+		dev_err(&mstr->dev, "Unable to allocate port\n");
+		return NULL;
+	}
+	port->pdi_stream = NULL;
+	if (stream_type == CNL_SDW_PDI_TYPE_PDM)
+		ret = sdw_alloc_pdm_stream(sdw, port, ch_count, direction);
+	else
+		ret = sdw_alloc_pcm_stream(sdw, port, ch_count, direction);
+	if (!ret)
+		return port;
+
+	dev_err(&mstr->dev, "Unable to allocate stream\n");
+	mutex_lock(&sdw->stream_lock);
+	port->allocated = false;
+	mutex_unlock(&sdw->stream_lock);
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(cnl_sdw_alloc_port);
+
+void cnl_sdw_free_port(struct sdw_master *mstr, int port_num)
+{
+	int i;
+	struct cnl_sdw *sdw;
+	struct cnl_sdw_port *port = NULL;
+
+	sdw = sdw_master_get_drvdata(mstr);
+	for (i = 1; i < CNL_SDW_MAX_PORTS; i++) {
+		if (sdw->port[i].port_num == port_num) {
+			port = &sdw->port[i];
+			break;
+		}
+	}
+	if (!port)
+		return;
+	mutex_lock(&sdw->stream_lock);
+	port->pdi_stream->allocated = false;
+	port->pdi_stream = NULL;
+	port->allocated = false;
+	mutex_unlock(&sdw->stream_lock);
+}
+EXPORT_SYMBOL_GPL(cnl_sdw_free_port);
+
 irqreturn_t cnl_sdw_irq_handler(int irq, void *context)
 {
 	return IRQ_HANDLED;
-- 
1.7.5.4

