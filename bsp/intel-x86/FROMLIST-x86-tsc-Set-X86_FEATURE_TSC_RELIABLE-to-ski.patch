From 25956ceaab34c43642079d281c701db25f8a7f63 Mon Sep 17 00:00:00 2001
From: Nilesh Bacchewar <nilesh.bacchewar@intel.com>
Date: Wed, 17 Aug 2016 15:47:54 -0700
Subject: [PATCH 1173/4301] FROMLIST: x86/tsc: Set X86_FEATURE_TSC_RELIABLE to
 skip refined calibration

commit 729d760f684bf7e2b7fda3f9a07bc506505a5945 from
git://git@github.com:01org/linux-intel-4.9.git

Backport: Submitted upstream [v2].
		[https://patchwork.kernel.org/patch/9284339/]

On some newer Intel x86 processors/SoCs the TSC frequency can be directly
calculated by factors read from specific MSR registers or from a cpuid
leaf (0x15). TSC frequency calculated by native msr/cpuid is absolutely
accurate so we should always skip calibrating TSC aginst another clock,
e.g. PIT, HPET, etc. So we want to skip the refined calibration by setting
the X86_FEATURE_TSC_RELIABLE flag. Existing code setting the flag by
set_cpu_cap() doesn't work as the flag is cleared later in identify_cpu().
A cpu caps flag is not cleared only if it's set by setup_force_cpu_cap().
This patch converted set_cpu_cap() to setup_force_cpu_cap() to ensure
refined calibration is skipped.

We had a test on Intel CherryTrail platform: the 24 hours time drift is
3.6 seconds if refined calibration was not skipped while the drift is less
than 0.6 second when refined calibration was skipped.

Correctly setting the X86_FEATURE_TSC_RELIABLE flag also guarantees TSC is
not monitored by timekeeping watchdog because on most of these system TSC
is the only reliable clocksource. HPET, for instance, works but may not
be reliable. So kernel may report a physically reliable TSC is not reliable
just because a physically not reliable HPET is acting as timekeeping
watchdog.

Change-Id: I22985ddcdae4b3158d71f11ff81f8543a3bc20a4
Signed-off-by: Bin Gao <bin.gao@intel.com>
Signed-off-by: Nilesh Bacchewar <nilesh.bacchewar@intel.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
---
 arch/x86/kernel/tsc.c |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/arch/x86/kernel/tsc.c b/arch/x86/kernel/tsc.c
index 6e57edf..53eec44 100644
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@ -703,6 +703,7 @@ unsigned long native_calibrate_tsc(void)
 		}
 	}
 
+	setup_force_cpu_cap(X86_FEATURE_TSC_RELIABLE);
 	return crystal_khz * ebx_numerator / eax_denominator;
 }
 
-- 
1.7.5.4

