From b13f28c1f2d1ae7d31af1ee0f784b5c072ceba41 Mon Sep 17 00:00:00 2001
From: Jayachandran B <jayachandran.b@intel.com>
Date: Wed, 27 Jan 2016 09:30:16 +0530
Subject: [PATCH 4123/4301] ASoC: Intel: Skylake: Debugfs for core power
 handling

commit 4dec7b18227bedf28edbebf2d52617f6d9c484e9 from
git://git@github.com:01org/linux-intel-4.9.git

This Debugfs allows to test core power handling.

To turn on a core:
echo wake n > core_power
To turn off a core:
echo sleep n > core_power

where, n is the core id (0 ... num cores on audio IP - 1)
Note that when core 0 is turned on/off using this debug i/f,
pm_runtime_get_sync/pm_runtime_put is called. Hence this
debug i/f can be used for runtime PM unit tests without
having to run usecases to invoke runtime PM.

Change-Id: Id63fc95d99ed6ed78eccfba134f204fdd2f07629
Signed-off-by: Jayachandran B <jayachandran.b@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/8072
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/14043
Reviewed-by: Kale, Sanyog R <sanyog.r.kale@intel.com>
Reviewed-by: Avati, Santosh Kumar <santosh.kumar.avati@intel.com>
Tested-by: Avati, Santosh Kumar <santosh.kumar.avati@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c |   74 +++++++++++++++++++++++++++++++++++
 1 files changed, 74 insertions(+), 0 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index 9ac0e6d..4779561 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -15,6 +15,7 @@
 
 #include <linux/pci.h>
 #include <linux/debugfs.h>
+#include <linux/pm_runtime.h>
 #include <sound/soc.h>
 #include "skl.h"
 #include "skl-nhlt.h"
@@ -732,6 +733,73 @@ static const struct file_operations soft_regs_ctrl_fops = {
 	.llseek = default_llseek,
 };
 
+static ssize_t core_power_write(struct file *file,
+		const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	struct skl_debug *d = file->private_data;
+	struct skl_sst *skl_ctx = d->skl->skl_sst;
+	struct sst_dsp *ctx = skl_ctx->dsp;
+	char buf[16];
+	int len = min(count, (sizeof(buf) - 1));
+	unsigned int core_id;
+	char *ptr;
+	int wake;
+	int err;
+
+
+	if (copy_from_user(buf, user_buf, len))
+		return -EFAULT;
+	buf[len] = 0;
+
+	/*
+	 * The buffer content should be "wake n" or "sleep n",
+	 * where n is the core id
+	 */
+	ptr = strnstr(buf, "wake", len);
+	if (ptr) {
+		ptr = ptr + 5;
+		wake = 1;
+	} else {
+		ptr = strnstr(buf, "sleep", len);
+		if (ptr) {
+			ptr = ptr + 6;
+			wake = 0;
+		} else
+			return -EINVAL;
+	}
+
+	err = kstrtouint(ptr, 10, &core_id);
+	if (err) {
+		dev_err(d->dev, "%s: Debugfs kstrtouint returned error = %d\n",
+				__func__, err);
+		return err;
+	}
+
+	dev_info(d->dev, "Debugfs: %s %d\n", wake ? "wake" : "sleep", core_id);
+
+	if (wake) {
+		if (core_id == SKL_DSP_CORE0_ID)
+			pm_runtime_get_sync(d->dev);
+		else
+			skl_dsp_get_core(ctx, core_id);
+	} else {
+		if (core_id == SKL_DSP_CORE0_ID)
+			pm_runtime_put_sync(d->dev);
+		else
+			skl_dsp_put_core(ctx, core_id);
+	}
+
+	/* Userspace has been fiddling around behind the kernel's back */
+	add_taint(TAINT_USER, LOCKDEP_NOW_UNRELIABLE);
+
+	return len;
+}
+static const struct file_operations core_power_fops = {
+	.open = simple_open,
+	.write = core_power_write,
+	.llseek = default_llseek,
+};
+
 void skl_update_dsp_debug_info(struct skl_debug *d,
 				struct platform_info *dbg_info)
 {
@@ -780,6 +848,12 @@ struct skl_debug *skl_debugfs_init(struct skl *skl)
 		goto err;
 	}
 
+	if (!debugfs_create_file("core_power", 0644, d->fs, d,
+				 &core_power_fops)) {
+		dev_err(d->dev, "core power debugfs init failed\n");
+		goto err;
+	}
+
 	skl_init_nhlt(d);
 	skl_init_adsp(d);
 	skl_init_mod_set_get(d);
-- 
1.7.5.4

