From 5aa35d3f0d2ded8b7f70e005490fd24908b0edbd Mon Sep 17 00:00:00 2001
From: Sanyog Kale <sanyog.r.kale@intel.com>
Date: Wed, 9 Mar 2016 19:25:57 +0530
Subject: [PATCH 3843/4301] SoundWire: Added sdw_bwcalc.c file

commit 46e4cfebdb1b0384304bf20093de6f30f0a8edd1 from
git://git@github.com:01org/linux-intel-4.9.git

sdw_bwcalc.c file is added in drivers/sdw/
directory.
This file will contain APIs which calculates
required bandwidth, clock, frameshape, computes
all transport params for a given port, enable channel
perform bankswitch operations.

Change-Id: Ie954bdff81e0faf5ee711c9c33503c4a4d3d39ec
Signed-off-by: Sanyog Kale <sanyog.r.kale@intel.com>
---
 drivers/sdw/Makefile     |    2 +-
 drivers/sdw/sdw.c        |   31 ++++++++++++---
 drivers/sdw/sdw_bwcalc.c |   96 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 122 insertions(+), 7 deletions(-)
 create mode 100644 drivers/sdw/sdw_bwcalc.c

diff --git a/drivers/sdw/Makefile b/drivers/sdw/Makefile
index 2a3ebea..2a94e7f 100644
--- a/drivers/sdw/Makefile
+++ b/drivers/sdw/Makefile
@@ -1,2 +1,2 @@
 
-obj-$(CONFIG_SDW)			+= sdw.o
+obj-$(CONFIG_SDW)			+= sdw.o sdw_bwcalc.o
diff --git a/drivers/sdw/sdw.c b/drivers/sdw/sdw.c
index 4a3e111..43cfff2 100644
--- a/drivers/sdw/sdw.c
+++ b/drivers/sdw/sdw.c
@@ -1089,9 +1089,16 @@ static int sdw_register_master(struct sdw_master *mstr)
 	kthread_init_work(&sdw_bus->kwork, handle_slave_status);
 	INIT_LIST_HEAD(&sdw_bus->status_list);
 	spin_lock_init(&sdw_bus->spinlock);
+	ret = sdw_mstr_bw_init(sdw_bus);
+	if (ret) {
+		dev_err(&mstr->dev, "error: Failed to init mstr bw\n");
+		goto mstr_bw_init_failed;
+	}
 	dev_dbg(&mstr->dev, "master [%s] registered\n", mstr->name);
 
 	return 0;
+
+mstr_bw_init_failed:
 task_failed:
 	device_unregister(&mstr->dev);
 out_list:
@@ -1957,7 +1964,7 @@ EXPORT_SYMBOL_GPL(sdw_config_port);
 int sdw_prepare_and_enable(int stream_tag, bool enable)
 {
 
-	int i;
+	int i, ret = 0;
 	struct sdw_stream_tag *stream_tags = sdw_core.stream_tags;
 	struct sdw_stream_tag *stream = NULL;
 
@@ -1978,16 +1985,19 @@ int sdw_prepare_and_enable(int stream_tag, bool enable)
 		return -EINVAL;
 	}
 	mutex_lock(&stream->stream_lock);
-	/* Next patch adds real function here */
+	ret = sdw_bus_calc_bw(&stream_tags[i], enable);
+	if (ret)
+		pr_err("Bandwidth allocation failed\n");
+
 	mutex_unlock(&stream->stream_lock);
 	mutex_unlock(&sdw_core.core_lock);
-	return 0;
+	return ret;
 }
 EXPORT_SYMBOL_GPL(sdw_prepare_and_enable);
 
 int sdw_disable_and_unprepare(int stream_tag, bool unprepare)
 {
-	int i;
+	int i, ret = 0;
 	struct sdw_stream_tag *stream_tags = sdw_core.stream_tags;
 	struct sdw_stream_tag *stream = NULL;
 
@@ -2005,11 +2015,14 @@ int sdw_disable_and_unprepare(int stream_tag, bool unprepare)
 		return -EINVAL;
 	}
 	mutex_lock(&stream->stream_lock);
-	/* Next patch adds real function here */
+	ret = sdw_bus_calc_bw_dis(&stream_tags[i], unprepare);
+	if (ret)
+		pr_err("Bandwidth de-allocation failed\n");
+
 	mutex_unlock(&stream->stream_lock);
 
 	mutex_unlock(&sdw_core.core_lock);
-	return 0;
+	return ret;
 }
 EXPORT_SYMBOL_GPL(sdw_disable_and_unprepare);
 
@@ -2038,6 +2051,12 @@ static int sdw_init(void)
 	if (retval)
 		bus_unregister(&sdw_bus_type);
 
+	retval = sdw_bus_bw_init();
+	if (retval) {
+		device_unregister(&sdw_slv);
+		bus_unregister(&sdw_bus_type);
+	}
+
 	return retval;
 }
 postcore_initcall(sdw_init);
diff --git a/drivers/sdw/sdw_bwcalc.c b/drivers/sdw/sdw_bwcalc.c
new file mode 100644
index 0000000..b0be250
--- /dev/null
+++ b/drivers/sdw/sdw_bwcalc.c
@@ -0,0 +1,96 @@
+/*
+ *  sdw_bwcalc.c - SoundWire Bus BW calculation & CHN Enabling implementation
+ *
+ *  Copyright (C) 2015-2016 Intel Corp
+ *  Author:  Sanyog Kale <sanyog.r.kale@intel.com>
+ *
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ */
+
+#include <linux/kernel.h>
+#include <linux/sdw_bus.h>
+#include "sdw_priv.h"
+
+
+/**
+ * sdw_bus_bw_init - returns Success
+ *
+ *
+ * This function is called from sdw_init function when bus driver
+ * gets intitalized. This function performs all the generic
+ * intializations required for BW control.
+ */
+int sdw_bus_bw_init(void)
+{
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sdw_bus_bw_init);
+
+
+/**
+ * sdw_mstr_bw_init - returns Success
+ *
+ *
+ * This function is called from sdw_register_master function
+ * for each master controller gets register. This function performs
+ * all the intializations per master controller required for BW control.
+ */
+int sdw_mstr_bw_init(struct sdw_bus *sdw_bs)
+{
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sdw_mstr_bw_init);
+
+
+/**
+ * sdw_bus_calc_bw - returns Success
+ * -EINVAL - In case of error.
+ *
+ *
+ * This function is called from sdw_prepare_and_enable
+ * whenever new stream is processed. The function based
+ * on the stream associated with controller calculates
+ * required bandwidth, clock, frameshape, computes
+ * all transport params for a given port, enable channel
+ * & perform bankswitch.
+ */
+int sdw_bus_calc_bw(struct sdw_stream_tag *stream_tag, bool enable)
+{
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sdw_bus_calc_bw);
+
+
+/**
+ * sdw_bus_calc_bw_dis - returns Success
+ * -EINVAL - In case of error.
+ *
+ *
+ * This function is called from sdw_disable_and_unprepare
+ * whenever stream is ended. The function based disables/
+ * unprepare port/channel of associated stream and computes
+ * required bandwidth, clock, frameshape, computes
+ * all transport params for a given port, enable channel
+ * & perform bankswitch for remaining streams on given
+ * controller.
+ */
+int sdw_bus_calc_bw_dis(struct sdw_stream_tag *stream_tag, bool unprepare)
+{
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sdw_bus_calc_bw_dis);
-- 
1.7.5.4

