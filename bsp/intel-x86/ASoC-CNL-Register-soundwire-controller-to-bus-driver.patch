From 242028aea5867d52071a687d20dcafedb5a8290c Mon Sep 17 00:00:00 2001
From: Hardik T Shah <hardik.t.shah@intel.com>
Date: Thu, 10 Mar 2016 10:33:33 +0530
Subject: [PATCH 3875/4301] ASoC: CNL: Register soundwire controller to bus
 driver.

commit be7039df86ce921f381b7e1d3170d234ab8ed47e from
git://git@github.com:01org/linux-intel-4.9.git

This patch registers the SoundWire controller to the
SoundWire bus driver.

Change-Id: Iefc4a7cd30d2f5ad043fe63e82f519ebc488bf65
Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
---
 sound/soc/intel/skylake/cnl-sst-dsp.h |   11 +++
 sound/soc/intel/skylake/cnl-sst.c     |  126 +++++++++++++++++++++++++++++++++
 sound/soc/intel/skylake/skl-sst-ipc.h |    5 ++
 3 files changed, 142 insertions(+), 0 deletions(-)

diff --git a/sound/soc/intel/skylake/cnl-sst-dsp.h b/sound/soc/intel/skylake/cnl-sst-dsp.h
index 1ac5bee..e637cb9 100644
--- a/sound/soc/intel/skylake/cnl-sst-dsp.h
+++ b/sound/soc/intel/skylake/cnl-sst-dsp.h
@@ -28,6 +28,8 @@ struct sst_dsp_device;
 #define CNL_ADSP_REG_ADSPCS		(CNL_ADSP_GEN_BASE + 0x04)
 #define CNL_ADSP_REG_ADSPIC		(CNL_ADSP_GEN_BASE + 0x08)
 #define CNL_ADSP_REG_ADSPIS		(CNL_ADSP_GEN_BASE + 0x0C)
+#define CNL_ADSP_REG_ADSPIC2		(CNL_ADSP_GEN_BASE + 0x10)
+#define CNL_ADSP_REG_ADSPIS2		(CNL_ADSP_GEN_BASE + 0x14)
 
 /* Intel HD Audio Inter-Processor Communication Registers */
 #define CNL_ADSP_IPC_BASE               0xC0
@@ -79,6 +81,15 @@ struct sst_dsp_device;
 #define CNL_ADSPIC_IPC			1
 #define CNL_ADSPIS_IPC			1
 
+#define CNL_ADSPIC2_SNDW		0x20
+
+#define CNL_SDW_SHIM_BASE		0x2C000
+#define CNL_SDW_LINK_0_BASE		0x30000
+#define CNL_SDW_LINK_1_BASE		0x40000
+#define CNL_SDW_LINK_2_BASE		0x50000
+#define CNL_SDW_LINK_3_BASE		0x60000
+#define CNL_ALH_BASE			0x2C800
+
 /* ADSPCS - Audio DSP Control & Status */
 #define CNL_DSP_CORES		4
 #define CNL_DSP_CORES_MASK	((1 << CNL_DSP_CORES) - 1)
diff --git a/sound/soc/intel/skylake/cnl-sst.c b/sound/soc/intel/skylake/cnl-sst.c
index 29ec5de..1a4460f 100644
--- a/sound/soc/intel/skylake/cnl-sst.c
+++ b/sound/soc/intel/skylake/cnl-sst.c
@@ -29,6 +29,8 @@
 #include <linux/firmware.h>
 #include <linux/kernel.h>
 #include <linux/device.h>
+#include <linux/sdw_bus.h>
+#include <linux/sdw/sdw_cnl.h>
 #include <asm/set_memory.h>
 
 #include "../common/sst-dsp.h"
@@ -67,6 +69,11 @@ void cnl_ipc_int_disable(struct sst_dsp *ctx)
 	sst_dsp_shim_update_bits_unlocked(ctx, CNL_ADSP_REG_ADSPIC,
 		CNL_ADSPIC_IPC, 0);
 }
+void cnl_sdw_int_enable(struct sst_dsp *ctx, bool enable)
+{
+	sst_dsp_shim_update_bits(ctx, CNL_ADSP_REG_ADSPIC2,
+		CNL_ADSPIC2_SNDW, CNL_ADSPIC2_SNDW);
+}
 
 void cnl_ipc_op_int_enable(struct sst_dsp *ctx)
 {
@@ -530,6 +537,118 @@ static int cnl_ipc_init(struct device *dev, struct skl_sst *cnl)
 	return 0;
 }
 
+static int skl_register_sdw_masters(struct device *dev, struct skl_sst *dsp,
+			void __iomem *mmio_base, int irq)
+{
+	struct sdw_master_capabilities *m_cap;
+	struct sdw_mstr_dp0_capabilities *dp0_cap;
+	struct sdw_mstr_dpn_capabilities *dpn_cap;
+	struct sdw_master *master;
+	struct cnl_sdw_data *p_data;
+	int ret = 0, i, j;
+	/* TODO: This number 4 should come from ACPI */
+	dsp->num_sdw_controllers = 1;
+	master = devm_kzalloc(dev,
+			(sizeof(*master) * dsp->num_sdw_controllers),
+			GFP_KERNEL);
+	if (!master) {
+			return -ENOMEM;
+			dsp->num_sdw_controllers = 0;
+	}
+	dsp->mstr = master;
+	/* TODO This should come from ACPI */
+	for (i = 0; i < dsp->num_sdw_controllers; i++) {
+		p_data = devm_kzalloc(dev, sizeof(*p_data), GFP_KERNEL);
+		if (!p_data)
+			return -ENOMEM;
+		/* PCI Device is parent of the SoundWire master device */
+		/* TODO: All these hardcoding should come from ACPI */
+		master[i].dev.parent = dev;
+		master[i].dev.platform_data = p_data;
+		m_cap = &master[i].mstr_capabilities;
+		dp0_cap = &m_cap->sdw_dp0_cap;
+		master[i].nr = i;
+		master[i].timeout = -1;
+		master[i].retries = CNL_SDW_MAX_CMD_RETRIES;
+		m_cap->base_clk_freq = 9.6 * 1000 * 1000;
+		strcpy(master[i].name, "cnl_sdw_mstr");
+		m_cap->highphy_capable = 0;
+		m_cap->sdw_dp0_supported = 1;
+		m_cap->num_data_ports = CNL_SDW_MAX_PORTS;
+		dp0_cap->max_word_length = 32;
+		dp0_cap->min_word_length = 1;
+		dp0_cap->num_word_length = 0;
+		dp0_cap->word_length_buffer = NULL;
+		dp0_cap->bra_max_data_per_frame = 0;
+		m_cap->sdw_dpn_cap = kzalloc(((sizeof(*dpn_cap)) *
+					CNL_SDW_MAX_PORTS), GFP_KERNEL);
+		if (!m_cap->sdw_dpn_cap)
+			return -ENOMEM;
+		for (j = 0; j < m_cap->num_data_ports; j++) {
+			dpn_cap = &m_cap->sdw_dpn_cap[i];
+			/* Both Tx and Rx */
+			dpn_cap->port_direction = 0x3;
+			dpn_cap->port_number = i;
+			dpn_cap->max_word_length = 32;
+			dpn_cap->min_word_length = 1;
+			dpn_cap->num_word_length = 0;
+			dpn_cap->word_length_buffer = NULL;
+			dpn_cap->dpn_type = SDW_FULL_DP;
+			dpn_cap->min_ch_num = 1;
+			dpn_cap->max_ch_num = 8;
+			dpn_cap->num_ch_supported = 0;
+			dpn_cap->ch_supported =  NULL;
+			/* IP supports all, but we are going to support only
+			 * isochronous
+			 */
+			dpn_cap->port_mode_mask =
+				SDW_PORT_FLOW_MODE_ISOCHRONOUS;
+			dpn_cap->block_packing_mode_mask =
+				SDW_PORT_BLK_PKG_MODE_BLK_PER_PORT |
+				SDW_PORT_BLK_PKG_MODE_BLK_PER_CH;
+		}
+		switch (i) {
+		case 0:
+			p_data->sdw_regs = mmio_base + CNL_SDW_LINK_0_BASE;
+			break;
+		case 1:
+			p_data->sdw_regs = mmio_base + CNL_SDW_LINK_1_BASE;
+			break;
+		case 2:
+			p_data->sdw_regs = mmio_base + CNL_SDW_LINK_2_BASE;
+			break;
+		case 3:
+			p_data->sdw_regs = mmio_base + CNL_SDW_LINK_3_BASE;
+			break;
+		default:
+			return -EINVAL;
+		}
+		p_data->sdw_shim = mmio_base + CNL_SDW_SHIM_BASE;
+		p_data->alh_base = mmio_base + CNL_ALH_BASE;
+		p_data->inst_id = i;
+		p_data->irq = irq;
+		ret = sdw_add_master_controller(&master[i]);
+		if (ret) {
+			dev_err(dev, "Failed to register soundwire master\n");
+			return ret;
+		}
+	}
+	/* Enable the global soundwire interrupts */
+	cnl_sdw_int_enable(dsp->dsp, 1);
+	return 0;
+}
+
+static void skl_unregister_sdw_masters(struct skl_sst *ctx)
+{
+	int i;
+
+	/* Disable global soundwire interrupts */
+	cnl_sdw_int_enable(ctx->dsp, 0);
+	for (i = 0; i < ctx->num_sdw_controllers; i++)
+		sdw_del_master_controller(&ctx->mstr[i]);
+
+}
+
 int cnl_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
 			const char *fw_name, struct skl_dsp_loader_ops dsp_ops,
 			struct skl_sst **dsp)
@@ -581,6 +700,12 @@ int cnl_sst_dsp_init(struct device *dev, void __iomem *mmio_base, int irq,
 		return ret;
 	}
 
+	ret = skl_register_sdw_masters(dev, cnl, mmio_base, irq);
+	if (ret) {
+		dev_err(cnl->dev, "%s SoundWire masters registration failed\n", __func__);
+		return ret;
+	}
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(cnl_sst_dsp_init);
@@ -601,6 +726,7 @@ EXPORT_SYMBOL_GPL(cnl_sst_init_fw);
 void cnl_sst_dsp_cleanup(struct device *dev, struct skl_sst *ctx)
 {
 	skl_freeup_uuid_list(ctx);
+	skl_unregister_sdw_masters(ctx);
 	cnl_ipc_free(&ctx->ipc);
 	ctx->dsp->cl_dev.ops.cl_cleanup_controller(ctx->dsp);
 	if (ctx->dsp->addr.lpe)
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index edb73db..011832a 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -120,6 +120,11 @@ struct skl_sst {
 	struct skl_d0i3_data d0i3;
 
 	const struct skl_dsp_ops *dsp_ops;
+
+	/* SDW Devices in DSP Space */
+	int num_sdw_controllers;
+	/* Array of sdw masters */
+	struct sdw_master *mstr;
 };
 
 struct skl_ipc_init_instance_msg {
-- 
1.7.5.4

