From 73754b3248d6b9fe8581e794f61483087d09349f Mon Sep 17 00:00:00 2001
From: Guneshwor Singh <guneshwor.o.singh@intel.com>
Date: Tue, 15 Nov 2016 13:05:13 +0530
Subject: [PATCH 4028/4301] ASoC: Intel: Skylake: Make debug prints consistent
 across

commit f5b493b2d8c9c4d9be9fa8f69db8ebf58c9e6c26 from
git://git@github.com:01org/linux-intel-4.9.git

Since debug prints were inconsistent across the IPCs and
firmware response, make it consistent so that it will be
easier to read and analyse too.

Change-Id: Ia2013cf93592c2aff287e0c4554a0a5be280d29c
Signed-off-by: Guneshwor Singh <guneshwor.o.singh@intel.com>
---
 sound/soc/intel/skylake/cnl-sst.c     |    6 ++----
 sound/soc/intel/skylake/skl-sst-ipc.c |   31 ++++++++++++++++++-------------
 2 files changed, 20 insertions(+), 17 deletions(-)

diff --git a/sound/soc/intel/skylake/cnl-sst.c b/sound/soc/intel/skylake/cnl-sst.c
index 16d751f..2b800ee 100644
--- a/sound/soc/intel/skylake/cnl-sst.c
+++ b/sound/soc/intel/skylake/cnl-sst.c
@@ -465,10 +465,8 @@ static irqreturn_t cnl_dsp_irq_thread_handler(int irq, void *context)
 		hipctdd = sst_dsp_shim_read_unlocked(dsp, CNL_ADSP_REG_HIPCTDD);
 		header.primary = hipctdr;
 		header.extension = hipctdd;
-		dev_dbg(dsp->dev, "IPC irq: Firmware respond primary:%x",
-						header.primary);
-		dev_dbg(dsp->dev, "IPC irq: Firmware respond extension:%x",
-						header.extension);
+		dev_dbg(dsp->dev, "IPC irq: Firmware respond primary:%#x ext:%#x",
+					header.primary, header.extension);
 
 		if (IPC_GLB_NOTIFY_RSP_TYPE(header.primary)) {
 			/* Handle Immediate reply from DSP Core */
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index ef626e4..df6a9ca 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -670,7 +670,8 @@ int skl_ipc_create_pipeline(struct sst_generic_ipc *ipc,
 
 	header.extension = IPC_PPL_LP_MODE(lp_mode);
 
-	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, 0);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: create pipeline fail, err: %d\n", ret);
@@ -692,7 +693,8 @@ int skl_ipc_delete_pipeline(struct sst_generic_ipc *ipc, u8 instance_id)
 	header.primary |= IPC_GLB_TYPE(IPC_GLB_DELETE_PPL);
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 
-	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, 0);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: delete pipeline failed, err %d\n", ret);
@@ -716,7 +718,8 @@ int skl_ipc_set_pipeline_state(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 	header.primary |= IPC_PPL_STATE(state);
 
-	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, 0);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: set pipeline state failed, err: %d\n", ret);
@@ -739,7 +742,8 @@ skl_ipc_save_pipeline(struct sst_generic_ipc *ipc, u8 instance_id, int dma_id)
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 
 	header.extension = IPC_DMA_ID(dma_id);
-	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, 0);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: save pipeline failed, err: %d\n", ret);
@@ -761,7 +765,8 @@ int skl_ipc_restore_pipeline(struct sst_generic_ipc *ipc, u8 instance_id)
 	header.primary |= IPC_GLB_TYPE(IPC_GLB_RESTORE_PPL);
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 
-	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, 0);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: restore  pipeline failed, err: %d\n", ret);
@@ -785,8 +790,8 @@ int skl_ipc_set_dx(struct sst_generic_ipc *ipc, u8 instance_id,
 	header.primary |= IPC_MOD_INSTANCE_ID(instance_id);
 	header.primary |= IPC_MOD_ID(module_id);
 
-	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
-			 header.primary, header.extension);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
 				dx, sizeof(*dx), NULL, 0);
 	if (ret < 0) {
@@ -811,8 +816,8 @@ int skl_ipc_delete_instance(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_MOD_INSTANCE_ID(msg->instance_id);
 	header.primary |= IPC_MOD_ID(msg->module_id);
 
-	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
-			 header.primary, header.extension);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL,
 			msg->param_data_size, NULL, 0);
 
@@ -848,8 +853,8 @@ int skl_ipc_init_instance(struct sst_generic_ipc *ipc,
 	header.extension |= IPC_PPL_INSTANCE_ID(msg->ppl_instance_id);
 	header.extension |= IPC_PARAM_BLOCK_SIZE(param_block_size);
 
-	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
-			 header.primary, header.extension);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, param_data,
 			msg->param_data_size, NULL, 0);
 
@@ -881,8 +886,8 @@ int skl_ipc_bind_unbind(struct sst_generic_ipc *ipc,
 	header.extension |= IPC_DST_QUEUE(msg->dst_queue);
 	header.extension |= IPC_SRC_QUEUE(msg->src_queue);
 
-	dev_dbg(ipc->dev, "In %s hdr=%x ext=%x\n", __func__, header.primary,
-			 header.extension);
+	dev_dbg(ipc->dev, "In %s primary=%#x ext=%#x\n", __func__,
+		header.primary, header.extension);
 	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, 0);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: bind/unbind faileden");
-- 
1.7.5.4

