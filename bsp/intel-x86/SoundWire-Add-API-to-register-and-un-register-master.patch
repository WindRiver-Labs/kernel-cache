From c791ca5de351cbae1d179c79a089eba2f805a948 Mon Sep 17 00:00:00 2001
From: Hardik T Shah <hardik.t.shah@intel.com>
Date: Wed, 9 Mar 2016 18:41:00 +0530
Subject: [PATCH 3834/4301] SoundWire: Add API to register and un-register
 master driver

commit 46484d021fb092bc94e2a52cc3465e0b7d59282b from
git://git@github.com:01org/linux-intel-4.9.git

This patch adds API to register and un-register the master
controller driver controlling the master controller device.

Change-Id: I65ffd42c7bd073b0fbb771cb948e24c31f5fa658
Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
---
 drivers/sdw/sdw.c |   36 ++++++++++++++++++++++++++++++++++++
 1 files changed, 36 insertions(+), 0 deletions(-)

diff --git a/drivers/sdw/sdw.c b/drivers/sdw/sdw.c
index d0b435a..638d273 100644
--- a/drivers/sdw/sdw.c
+++ b/drivers/sdw/sdw.c
@@ -981,6 +981,42 @@ void sdw_del_master_controller(struct sdw_master *mstr)
 }
 EXPORT_SYMBOL_GPL(sdw_del_master_controller);
 
+/*
+ * An sdw_driver is used with one or more sdw_slave (slave) nodes to access
+ * sdw slave chips, on a bus instance associated with some sdw_master.
+ */
+int __sdw_mstr_driver_register(struct module *owner,
+					struct sdw_mstr_driver *driver)
+{
+	int res;
+
+	/* Can't register until after driver model init */
+	if (unlikely(WARN_ON(!sdw_bus_type.p)))
+		return -EAGAIN;
+
+	/* add the driver to the list of sdw drivers in the driver core */
+	driver->driver.owner = owner;
+	driver->driver.bus = &sdw_bus_type;
+
+	/* When registration returns, the driver core
+	 * will have called probe() for all matching-but-unbound slaves.
+	 */
+	res = driver_register(&driver->driver);
+	if (res)
+		return res;
+
+	pr_debug("sdw-core: driver [%s] registered\n", driver->driver.name);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(__sdw_mstr_driver_register);
+
+void sdw_mstr_driver_unregister(struct sdw_mstr_driver *driver)
+{
+	driver_unregister(&driver->driver);
+}
+EXPORT_SYMBOL_GPL(sdw_mstr_driver_unregister);
+
 static void sdw_exit(void)
 {
 	device_unregister(&sdw_slv);
-- 
1.7.5.4

