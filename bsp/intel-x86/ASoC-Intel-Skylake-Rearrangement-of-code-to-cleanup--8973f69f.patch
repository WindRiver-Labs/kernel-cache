From d17c3d3d40e7eaa86c2633f6c35a266a5fa639b7 Mon Sep 17 00:00:00 2001
From: Jaikrishna Nemallapudi <jaikrishnax.nemallapudi@intel.com>
Date: Tue, 18 Apr 2017 18:45:05 +0530
Subject: [PATCH 4118/4301] ASoC: Intel: Skylake: Rearrangement of code to
 cleanup dependency

commit 0ff2b52558f4cbb01488b3205446ab8bc8cb75b9 from
git://git@github.com:01org/linux-intel-4.9.git

Topology structures are used in skylake driver. So rearranged all the
structures.

Signed-off-by: Jaikrishna Nemallapudi <jaikrishnax.nemallapudi@intel.com>
---
 sound/soc/intel/skylake/skl-pcm.c       |    6 +--
 sound/soc/intel/skylake/skl-sst-dsp.h   |    1 -
 sound/soc/intel/skylake/skl-sst-ipc.h   |   18 +++++++
 sound/soc/intel/skylake/skl-sst-utils.c |   35 -------------
 sound/soc/intel/skylake/skl-topology.c  |   25 +++++++---
 sound/soc/intel/skylake/skl-topology.h  |   83 ++++++++++++++++++++++++-------
 sound/soc/intel/skylake/skl.h           |   67 +------------------------
 7 files changed, 103 insertions(+), 132 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 92e4967..662a3d2 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1759,7 +1759,7 @@ static int skl_get_module_info(struct skl *skl, struct skl_module_cfg *mconfig)
 		
 	uuid_bin_fw = &module->uuid;
 	for (i = 0; i < skl->nr_modules; i++) {
-		skl_module = &skl->modules[i];
+		skl_module = skl->modules[i];
 		uuid_bin_tplg = &skl_module->uuid;
 		if (uuid_le_cmp(*uuid_bin_fw, *uuid_bin_tplg) == 0) {
 			mconfig->module = skl_module;
@@ -1797,10 +1797,6 @@ static int skl_populate_modules(struct skl *skl)
 	struct skl_module_cfg *mconfig;
 	int ret = 0;
 
-	ret = snd_skl_add_mod_data(skl->skl_sst);
-	if (ret < 0)
-		return ret;
-
 	list_for_each_entry(p, &skl->ppl_list, node) {
 		list_for_each_entry(m, &p->pipe->w_list, node) {
 			w = m->w;
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index a4f52cf..ef7bdf1 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -296,7 +296,6 @@ int skl_prepare_lib_load(struct skl_sst *skl, struct skl_lib_info *linfo,
 			unsigned int hdr_offset, int index);
 void skl_release_library(struct skl_lib_info *linfo, int lib_count);
 
-int snd_skl_add_mod_data(struct skl_sst *ctx);
 int skl_get_firmware_configuration(struct sst_dsp *ctx);
 
 int bxt_set_dsp_D0i0(struct sst_dsp *ctx);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 83aa21f..6fd9d82 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -39,6 +39,24 @@ enum skl_ipc_pipeline_state {
 	PPL_RESTORED =		7
 };
 
+enum base_fw_run_time_param {
+        ADSP_PROPERTIES = 0,
+        ADSP_RESOURCE_STATE = 1,
+        NOTIFICATION_MASK = 3,
+        ASTATE_TABLE = 4,
+        DMA_CONTROL = 5,
+        ENABLE_LOGS = 6,
+        FIRMWARE_CONFIG = 7,
+        HARDWARE_CONFIG = 8,
+        MODULES_INFO = 9,
+        PIPELINE_LIST_INFO = 10,
+        PIPELINE_PROPS = 11,
+        SCHEDULERS_INFO = 12,
+        GATEWAYS_INFO = 13,
+        MEMORY_STATE_INFO = 14,
+        POWER_STATE_INFO = 15
+};
+
 struct skl_ipc_dxstate_info {
 	u32 core_mask;
 	u32 dx_mask;
diff --git a/sound/soc/intel/skylake/skl-sst-utils.c b/sound/soc/intel/skylake/skl-sst-utils.c
index 308c782..ece4c54 100644
--- a/sound/soc/intel/skylake/skl-sst-utils.c
+++ b/sound/soc/intel/skylake/skl-sst-utils.c
@@ -131,41 +131,6 @@ struct skl_ext_manifest_hdr {
 	u32 entries;
 };
 
-/**
- * Add manifest module data to the module list by
- * comparing the UUID of module to be added with the
- * already added UUID in the last
- */
-int snd_skl_add_mod_data(struct skl_sst *ctx)
-{
-	struct uuid_module *module;
-	uuid_le *uuid_mod;
-	int j, num_modules;
-	struct skl_module *mod_data;
-	struct skl *skl = get_skl_ctx(ctx->dev);
-
-	if (list_empty(&ctx->uuid_list)) {
-		dev_err(ctx->dev, "Module list is empty\n");
-		return -EINVAL;
-	}
-
-	num_modules = skl->nr_modules;
-	for (j = 0; j < num_modules; j++) {
-		/* copy the module data in the parsed module uuid list */
-		mod_data = &skl->modules[j];
-		uuid_mod = &mod_data->uuid;
-		list_for_each_entry(module, &ctx->uuid_list, list) {
-			if (uuid_le_cmp(module->uuid, *uuid_mod) == 0) {
-				module->mod_data = mod_data;
-				break;
-			}
-		}
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(snd_skl_add_mod_data);
-
 static int skl_get_pvtid_map(struct uuid_module *module, int instance_id)
 {
 	int pvt_id;
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index a750d8a..c08f713 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -3359,6 +3359,7 @@ static int skl_tplg_fill_str_mfest_tkn(struct device *dev,
 {
 	int tkn_count = 0;
 	static int ref_count, mod_count;
+	struct skl_module *mod;
 
 	switch (str_elem->token) {
 	case SKL_TKN_STR_LIB_NAME:
@@ -3379,9 +3380,9 @@ static int skl_tplg_fill_str_mfest_tkn(struct device *dev,
 			return -EINVAL;
 		}
 
-		strncpy(skl->modules[mod_count].library_name,
-					str_elem->string,
-					ARRAY_SIZE(skl->skl_sst->lib_info[mod_count].name));
+		mod = skl->modules[mod_count];
+		strncpy(mod->library_name, str_elem->string,
+			ARRAY_SIZE(skl->skl_sst->lib_info[mod_count].name));
 		mod_count++;
 		break;
 
@@ -3521,11 +3522,12 @@ static int skl_tplg_get_int_tkn(struct device *dev,
 	struct skl_module_res *res = NULL;
 	struct skl_module_intf *fmt = NULL;
 	struct skl_module *mod = NULL;
+	int i;
 
 	if (skl->modules) {
-		res = &skl->modules[mod_idx].resources[res_val_idx];
-		fmt = &skl->modules[mod_idx].formats[intf_val_idx];
-		mod = &skl->modules[mod_idx];
+		mod = skl->modules[mod_idx];
+		res = &mod->resources[res_val_idx];
+		fmt = &mod->formats[intf_val_idx];
 	}
 
 	switch (tkn_elem->token) {
@@ -3549,6 +3551,13 @@ static int skl_tplg_get_int_tkn(struct device *dev,
 		if (!skl->modules)
 			return -ENOMEM;
 
+		for (i = 0; i < skl->nr_modules; i++) {
+			skl->modules[i] = devm_kzalloc(dev,
+			sizeof(struct skl_module), GFP_KERNEL);
+
+			if (!skl->modules[i])
+				return -EINVAL;
+		}
 		break;
 
 	case SKL_TKN_U8_PRE_LOAD_PGS:
@@ -3686,9 +3695,11 @@ static int skl_tplg_get_mfest_uuid(struct device *dev,
 				struct snd_soc_tplg_vendor_uuid_elem *uuid_tkn)
 {
 	static int ref_count;
+	struct skl_module *mod;
 
 	if (uuid_tkn->token == SKL_TKN_UUID) {
-		memcpy(&skl->modules[ref_count].uuid,
+		mod = skl->modules[ref_count];
+		memcpy(&mod->uuid,
 				&uuid_tkn->uuid, sizeof(uuid_tkn->uuid));
 		ref_count++;
 	} else {
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 8cf70df..5fe9e60 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -350,6 +350,71 @@ struct skl_sdw_aggregation {
 	struct skl_sdw_agg_data agg_data[4];
 };
 
+struct skl_module_fmt {
+	u32 channels;
+	u32 s_freq;
+	u32 bit_depth;
+	u32 valid_bit_depth;
+	u32 ch_cfg;
+	u32 interleaving_style;
+	u32 sample_type;
+	u32 ch_map;
+};
+
+struct skl_module_pin_fmt {
+	u8 pin_id;
+	struct skl_module_fmt pin_fmt;
+};
+
+struct skl_module_intf {
+	u8 fmt_idx;
+	u8 nr_input_fmt;
+	u8 nr_output_fmt;
+	struct skl_module_pin_fmt input[SKL_MAX_IN_QUEUE];
+	struct	skl_module_pin_fmt output[SKL_MAX_OUT_QUEUE];
+};
+
+struct skl_module_pin_resources {
+	u8 pin_index;
+	u32 buf_size;
+};
+
+struct skl_module_res {
+	u8 res_idx;
+	u32 is_pages;
+	u32 cps;
+	u32 ibs;
+	u32 obs;
+	u32 dma_buffer_size;
+	u32 cpc;
+	u32 mod_flags;
+	u32 obls;
+	u8 nr_input_pins;
+	u8 nr_output_pins;
+	struct skl_module_pin_resources input[SKL_MAX_IN_QUEUE];
+	struct skl_module_pin_resources output[SKL_MAX_OUT_QUEUE];
+};
+
+struct skl_module {
+	u16 major_version;
+	u16 minor_version;
+	u16 hotfix_version;
+	u16 build_version;
+	uuid_le uuid;
+	u8 loadable;
+	u8 input_pin_type;
+	u8 output_pin_type;
+	u8 auto_start;
+	u8 max_input_pins;
+	u8 max_output_pins;
+	u8 max_instance_count;
+	char library_name[SKL_LIB_NAME_LENGTH];
+	u8 nr_resources;
+	u8 nr_interfaces;
+	struct skl_module_res resources[SKL_MAX_MODULE_RESOURCES];
+	struct skl_module_intf formats[SKL_MAX_MODULE_FORMATS];
+};
+
 struct skl_module_cfg {
 	u8 guid[16];
 	struct skl_module_inst_id id;
@@ -440,24 +505,6 @@ struct mod_set_get {
 	u32 mailbx[1024];
 };
 
-enum base_fw_run_time_param {
-	ADSP_PROPERTIES = 0,
-	ADSP_RESOURCE_STATE = 1,
-	NOTIFICATION_MASK = 3,
-	ASTATE_TABLE = 4,
-	DMA_CONTROL = 5,
-	ENABLE_LOGS = 6,
-	FIRMWARE_CONFIG = 7,
-	HARDWARE_CONFIG = 8,
-	MODULES_INFO = 9,
-	PIPELINE_LIST_INFO = 10,
-	PIPELINE_PROPS = 11,
-	SCHEDULERS_INFO = 12,
-	GATEWAYS_INFO = 13,
-	MEMORY_STATE_INFO = 14,
-	POWER_STATE_INFO = 15
-};
-
 struct fw_ipc_data {
 	u32 replysz;
 	u32 adsp_id;
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index cd88b9c..dd0a0fa 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -54,71 +54,6 @@ struct skl_dsp_resource {
 struct skl_debug;
 struct snd_soc_dapm_widget;
 
-struct skl_module_fmt {
-	u32 channels;
-	u32 s_freq;
-	u32 bit_depth;
-	u32 valid_bit_depth;
-	u32 ch_cfg;
-	u32 interleaving_style;
-	u32 sample_type;
-	u32 ch_map;
-};
-
-struct skl_module_pin_fmt {
-	u8 pin_id;
-	struct skl_module_fmt pin_fmt;
-};
-
-struct skl_module_intf {
-	u8 fmt_idx;
-	u8 nr_input_fmt;
-	u8 nr_output_fmt;
-	struct skl_module_pin_fmt input[SKL_MAX_IN_QUEUE];
-	struct	skl_module_pin_fmt output[SKL_MAX_OUT_QUEUE];
-};
-
-struct skl_module_pin_resources {
-	u8 pin_index;
-	u32 buf_size;
-};
-
-struct skl_module_res {
-	u8 res_idx;
-	u32 is_pages;
-	u32 cps;
-	u32 ibs;
-	u32 obs;
-	u32 dma_buffer_size;
-	u32 cpc;
-	u32 mod_flags;
-	u32 obls;
-	u8 nr_input_pins;
-	u8 nr_output_pins;
-	struct skl_module_pin_resources input[SKL_MAX_IN_QUEUE];
-	struct skl_module_pin_resources output[SKL_MAX_OUT_QUEUE];
-};
-
-struct skl_module {
-	u16 major_version;
-	u16 minor_version;
-	u16 hotfix_version;
-	u16 build_version;
-	uuid_le uuid;
-	u8 loadable;
-	u8 input_pin_type;
-	u8 output_pin_type;
-	u8 auto_start;
-	u8 max_input_pins;
-	u8 max_output_pins;
-	u8 max_instance_count;
-	char library_name[SKL_LIB_NAME_LENGTH];
-	u8 nr_resources;
-	u8 nr_interfaces;
-	struct skl_module_res resources[SKL_MAX_MODULE_RESOURCES];
-	struct skl_module_intf formats[SKL_MAX_MODULE_FORMATS];
-};
-
 struct skl_dma_config {
 	u32 min_size;
 	u32 max_size;
@@ -190,7 +125,7 @@ struct skl {
 	struct skl_fw_cfg_info cfg;
 	u8 nr_modules;
 	u8 conf_version;
-	struct skl_module *modules;
+	struct skl_module **modules;
 };
 
 #define skl_to_ebus(s)	(&(s)->ebus)
-- 
1.7.5.4

