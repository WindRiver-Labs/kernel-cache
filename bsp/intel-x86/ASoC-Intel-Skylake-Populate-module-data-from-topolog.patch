From 45089421b0d45dc536c821dce89d05a6543bbaaa Mon Sep 17 00:00:00 2001
From: Shreyas NC <shreyas.nc@intel.com>
Date: Fri, 6 Jan 2017 09:08:38 +0530
Subject: [PATCH 4085/4301] ASoC: Intel: Skylake: Populate module data from
 topology manifest

commit 9677f305103a04bf5e61e0ba28e86137c954d304 from
git://git@github.com:01org/linux-intel-4.9.git

All the module common data will now be populated in the topology
manifest. This includes the resource and interface list supported
by the module.

So, add the relevant changes in the manifest structure and parse
the tokens to populate the corresponding structure.

Change-Id: I85aa824eba52660bd58264b87af88a100e106fd4
Signed-off-by: Shreyas NC <shreyas.nc@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/13457
Reviewed-by: Kale, Sanyog R <sanyog.r.kale@intel.com>
Reviewed-by: Singh, Guneshwor O <guneshwor.o.singh@intel.com>
Reviewed-by: Diwakar, Praveen <praveen.diwakar@intel.com>
Tested-by: Sm, Bhadur A <bhadur.a.sm@intel.com>
[Kevin: Just some minor context mods in order to port to wrlinux]
Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 sound/soc/intel/skylake/skl-topology.c |  405 +++++++++++++++++++++++++++++++-
 1 files changed, 400 insertions(+), 5 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index cbf78fd..8f94176 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -2366,6 +2366,115 @@ static void skl_tplg_fill_pin_dynamic_val(
 }
 
 /*
+ * Resource table in the manifest has pin specific resources
+ * like pin and pin buffer size
+ */
+static int skl_tplg_mfest_pin_res_tkn(struct device *dev,
+		struct snd_soc_tplg_vendor_value_elem *tkn_elem,
+		struct skl_module_res *res, int pin_idx, int dir)
+{
+	struct skl_module_pin_resources *m_pin;
+
+	switch (dir) {
+	case SKL_DIR_IN:
+		m_pin = &res->input[pin_idx];
+		break;
+
+	case SKL_DIR_OUT:
+		m_pin = &res->output[pin_idx];
+		break;
+
+	default:
+		dev_err(dev, "Invalid pin direction value\n");
+		return -EINVAL;
+	}
+
+	switch (tkn_elem->token) {
+	case SKL_TKN_MM_U32_RES_PIN_ID:
+		m_pin->pin_index = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_PIN_BUF:
+		m_pin->buf_size = tkn_elem->value;
+		break;
+
+	default:
+		dev_err(dev, "Invalid token\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+/*
+ * Fill module specific resources from the manifest's resource
+ * table like CPS, DMA size, mem_pages.
+ */
+static int skl_tplg_fill_res_tkn(struct device *dev,
+		struct snd_soc_tplg_vendor_value_elem *tkn_elem,
+		struct skl_module_res *res,
+		int pin_idx, int dir)
+{
+	int ret, tkn_count = 0;
+
+	if (!res)
+		return -ENOMEM;
+
+	switch (tkn_elem->token) {
+	case SKL_TKN_MM_U32_CPS:
+		res->cps = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_DMA_SIZE:
+		res->dma_buffer_size = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_CPC:
+		res->cpc = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_MOD_FLAGS:
+		res->mod_flags = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_OBLS:
+		res->obls = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_MEM_PAGES:
+		res->is_pages = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_OBS:
+		res->obs = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_IBS:
+		res->ibs = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_RES_PIN_ID:
+	case SKL_TKN_MM_U32_PIN_BUF:
+		ret = skl_tplg_mfest_pin_res_tkn(dev,
+				tkn_elem, res, pin_idx, dir);
+		if (ret < 0)
+			return ret;
+		break;
+
+	case SKL_TKN_MM_U32_NUM_PIN:
+		break;
+
+	default:
+		dev_err(dev, "Not a res type token");
+		return -EINVAL;
+
+	}
+
+	tkn_count++;
+	return tkn_count;
+}
+
+/*
  * Parse tokens to fill up the module private data
  */
 static int skl_tplg_get_token(struct device *dev,
@@ -2934,7 +3043,7 @@ static int skl_tplg_fill_str_mfest_tkn(struct device *dev,
 		struct skl *skl)
 {
 	int tkn_count = 0;
-	static int ref_count;
+	static int ref_count, mod_count;
 
 	switch (str_elem->token) {
 	case SKL_TKN_STR_LIB_NAME:
@@ -2947,7 +3056,18 @@ static int skl_tplg_fill_str_mfest_tkn(struct device *dev,
 			str_elem->string,
 			ARRAY_SIZE(skl->skl_sst->lib_info[ref_count].name));
 		ref_count++;
-		tkn_count++;
+		break;
+
+	case SKL_TKN_STR_MOD_LIB_NAME:
+		if (mod_count > skl->nr_modules - 1) {
+			mod_count = 0;
+			return -EINVAL;
+		}
+
+		strncpy(skl->modules[mod_count].library_name,
+					str_elem->string,
+					ARRAY_SIZE(skl->skl_sst->lib_info[mod_count].name));
+		mod_count++;
 		break;
 
 	default:
@@ -2955,6 +3075,7 @@ static int skl_tplg_fill_str_mfest_tkn(struct device *dev,
 		break;
 	}
 
+	tkn_count++;
 	return tkn_count;
 }
 
@@ -2979,16 +3100,261 @@ static int skl_tplg_get_str_tkn(struct device *dev,
 	return tkn_count;
 }
 
+static int skl_tplg_mfest_fill_fmt(struct device *dev,
+		struct skl_module_intf *fmt,
+		struct snd_soc_tplg_vendor_value_elem *tkn_elem,
+		u32 dir, int fmt_idx)
+{
+	struct skl_module_pin_fmt *dst_fmt;
+	struct skl_module_fmt *mod_fmt;
+	int ret;
+
+	if (!fmt)
+		return -EINVAL;
+
+	switch (dir) {
+	case SKL_DIR_IN:
+		dst_fmt = &fmt->input[fmt_idx];
+		break;
+
+	case SKL_DIR_OUT:
+		dst_fmt = &fmt->output[fmt_idx];
+		break;
+
+	default:
+		dev_err(dev, "Invalid direction value\n");
+		return -EINVAL;
+	}
+
+	mod_fmt = &dst_fmt->pin_fmt;
+
+	switch (tkn_elem->token) {
+	case SKL_TKN_MM_U32_INTF_PIN_ID:
+		dst_fmt->pin_id = tkn_elem->value;
+		break;
+
+	default:
+		ret = skl_tplg_fill_fmt(dev, mod_fmt, tkn_elem->token,
+					tkn_elem->value);
+		if (ret < 0)
+			return ret;
+		break;
+	}
+
+	return 0;
+}
+
+static int skl_tplg_fill_mod_info(struct device *dev,
+		struct snd_soc_tplg_vendor_value_elem *tkn_elem,
+		struct skl_module *mod)
+{
+
+	if (!mod)
+		return -EINVAL;
+
+	switch (tkn_elem->token) {
+	case SKL_TKN_U8_IN_PIN_TYPE:
+		mod->input_pin_type = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_OUT_PIN_TYPE:
+		mod->output_pin_type = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_IN_QUEUE_COUNT:
+		mod->max_input_pins = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_OUT_QUEUE_COUNT:
+		mod->max_output_pins = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U8_AUTO_START:
+		mod->auto_start = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U8_MAX_INST_COUNT:
+		mod->max_instance_count = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U8_MAX_PINS:
+		break;
+
+	case SKL_TKN_MM_U8_NUM_RES:
+		mod->nr_resources = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U8_NUM_INTF:
+		mod->nr_interfaces = tkn_elem->value;
+		break;
+
+	default:
+		dev_err(dev, "Invalid mod info token %d", tkn_elem->token);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+
 static int skl_tplg_get_int_tkn(struct device *dev,
 		struct snd_soc_tplg_vendor_value_elem *tkn_elem,
 		struct skl *skl)
 {
-	int tkn_count = 0;
+	int tkn_count = 0, ret;
+	static int mod_idx, res_val_idx, intf_val_idx, dir, lib_idx, pin_idx;
+	struct skl_module_res *res = NULL;
+	struct skl_module_intf *fmt = NULL;
+	struct skl_module *mod = NULL;
+
+	if (skl->modules) {
+		res = &skl->modules[mod_idx].resources[res_val_idx];
+		fmt = &skl->modules[mod_idx].formats[intf_val_idx];
+		mod = &skl->modules[mod_idx];
+	}
 
 	switch (tkn_elem->token) {
 	case SKL_TKN_U32_LIB_COUNT:
 		skl->skl_sst->lib_count = tkn_elem->value;
-		tkn_count++;
+		break;
+
+	case SKL_TKN_U8_CONF_VERSION:
+		skl->conf_version = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_LIB_IDX:
+		lib_idx = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_NUM_MOD:
+		skl->nr_modules = tkn_elem->value;
+		skl->modules = devm_kcalloc(dev, skl->nr_modules,
+				sizeof(*skl->modules), GFP_KERNEL);
+
+		if (!skl->modules)
+			return -ENOMEM;
+
+		break;
+
+	case SKL_TKN_U8_PRE_LOAD_PGS:
+		skl->skl_sst->lib_info[lib_idx].pre_load_pgs = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_NR_MODS:
+		skl->skl_sst->lib_info[lib_idx].man_nr_modules = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U8_BINARY_TYPE:
+		skl->skl_sst->lib_info[lib_idx].binary_type = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_SCH_TYPE:
+	case SKL_TKN_U32_SCH_TICK_MUL:
+	case SKL_TKN_U32_SCH_TICK_DIV:
+	case SKL_TKN_U32_SCH_LL_SRC:
+	case SKL_TKN_U32_SCH_NUM_CONF:
+	case SKL_TKN_U32_SCH_NODE_INFO:
+	case SKL_TKN_U32_MEM_STAT_RECLAIM:
+	case SKL_TKN_U32_MAN_CFG_IDX:
+	case SKL_TKN_U32_DMA_MIN_SIZE:
+	case SKL_TKN_U32_DMA_MAX_SIZE:
+		break;
+
+	case SKL_TKN_U8_MAJOR_VER:
+	case SKL_TKN_U8_HOTFIX_VER:
+	case SKL_TKN_U8_MINOR_VER:
+	case SKL_TKN_MM_U8_MAJOR_VER:
+	case SKL_TKN_MM_U8_HOTFIX_VER:
+	case SKL_TKN_MM_U8_MINOR_VER:
+	case SKL_TKN_MM_U8_BUILD_VER:
+		break;
+
+	case SKL_TKN_MM_U8_MOD_IDX:
+		mod_idx = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U8_IN_PIN_TYPE:
+	case SKL_TKN_U8_OUT_PIN_TYPE:
+	case SKL_TKN_U8_IN_QUEUE_COUNT:
+	case SKL_TKN_U8_OUT_QUEUE_COUNT:
+	case SKL_TKN_MM_U8_AUTO_START:
+	case SKL_TKN_MM_U8_MAX_INST_COUNT:
+	case SKL_TKN_MM_U8_MAX_PINS:
+	case SKL_TKN_MM_U8_NUM_RES:
+	case SKL_TKN_MM_U8_NUM_INTF:
+		ret = skl_tplg_fill_mod_info(dev, tkn_elem, mod);
+		if (ret < 0)
+			return ret;
+		break;
+
+	case SKL_TKN_U32_DIR_PIN_COUNT:
+		dir = tkn_elem->value & SKL_IN_DIR_BIT_MASK;
+		pin_idx = (tkn_elem->value & SKL_PIN_COUNT_MASK) >> 4;
+		break;
+
+	case SKL_TKN_MM_U32_RES_ID:
+		if (!res)
+			return -EINVAL;
+
+		res->res_idx = tkn_elem->value;
+		res_val_idx = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_FMT_ID:
+		if (!fmt)
+			return -EINVAL;
+
+		fmt->fmt_idx = tkn_elem->value;
+		intf_val_idx = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_CPS:
+	case SKL_TKN_MM_U32_DMA_SIZE:
+	case SKL_TKN_MM_U32_CPC:
+	case SKL_TKN_MM_U32_MOD_FLAGS:
+	case SKL_TKN_MM_U32_OBLS:
+	case SKL_TKN_U32_MEM_PAGES:
+	case SKL_TKN_U32_OBS:
+	case SKL_TKN_U32_IBS:
+	case SKL_TKN_MM_U32_RES_PIN_ID:
+	case SKL_TKN_MM_U32_PIN_BUF:
+	case SKL_TKN_MM_U32_NUM_PIN:
+		ret = skl_tplg_fill_res_tkn(dev, tkn_elem, res,
+				pin_idx, dir);
+		if (ret < 0)
+			return ret;
+
+		break;
+
+	case SKL_TKN_MM_U32_NUM_IN_FMT:
+		if (!fmt)
+			return -EINVAL;
+
+		res->nr_input_pins = tkn_elem->value;
+		break;
+
+	case SKL_TKN_MM_U32_NUM_OUT_FMT:
+		if (!fmt)
+			return -EINVAL;
+
+		res->nr_output_pins = tkn_elem->value;
+		break;
+
+	case SKL_TKN_U32_FMT_CH:
+	case SKL_TKN_U32_FMT_FREQ:
+	case SKL_TKN_U32_FMT_BIT_DEPTH:
+	case SKL_TKN_U32_FMT_SAMPLE_SIZE:
+	case SKL_TKN_U32_FMT_CH_CONFIG:
+	case SKL_TKN_U32_FMT_INTERLEAVE:
+	case SKL_TKN_U32_FMT_SAMPLE_TYPE:
+	case SKL_TKN_U32_FMT_CH_MAP:
+	case SKL_TKN_MM_U32_INTF_PIN_ID:
+		ret = skl_tplg_mfest_fill_fmt(dev, fmt, tkn_elem, dir,
+				pin_idx);
+
+		if (ret < 0)
+			return ret;
+
 		break;
 
 	default:
@@ -2996,9 +3362,28 @@ static int skl_tplg_get_int_tkn(struct device *dev,
 		return -EINVAL;
 	}
 
+	tkn_count++;
 	return tkn_count;
 }
 
+static int skl_tplg_get_mfest_uuid(struct device *dev,
+				struct skl *skl,
+				struct snd_soc_tplg_vendor_uuid_elem *uuid_tkn)
+{
+	static int ref_count;
+
+	if (uuid_tkn->token == SKL_TKN_UUID) {
+		memcpy(&skl->modules[ref_count].uuid,
+				&uuid_tkn->uuid, sizeof(uuid_tkn->uuid));
+		ref_count++;
+	} else {
+		dev_err(dev, "Not an UUID token tkn %d\n", uuid_tkn->token);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 /*
  * Fill the manifest structure by parsing the tokens based on the
  * type.
@@ -3031,7 +3416,12 @@ static int skl_tplg_get_manifest_tkn(struct device *dev,
 			continue;
 
 		case SND_SOC_TPLG_TUPLE_TYPE_UUID:
-			dev_warn(dev, "no uuid tokens for skl tplf manifest");
+			ret = skl_tplg_get_mfest_uuid(dev, skl, array->uuid);
+			if (ret < 0)
+				return ret;
+
+			tuple_size += sizeof(*array->uuid);
+
 			continue;
 
 		default:
@@ -3130,6 +3520,11 @@ static int skl_manifest_load(struct snd_soc_component *cmpnt,
 	if (manifest->priv.size == 0)
 		return 0;
 
+	/* Initialize the conf version to legacy */
+	skl->conf_version = 1;
+	skl->nr_modules = 0;
+	skl->modules = NULL;
+
 	skl_tplg_get_manifest_data(manifest, bus->dev, skl);
 
 	if (skl->skl_sst->lib_count > SKL_MAX_LIB) {
-- 
1.7.5.4

