From 84f483679e617391ba0953c726155b1cf07f3e72 Mon Sep 17 00:00:00 2001
From: Hardik T Shah <hardik.t.shah@intel.com>
Date: Thu, 10 Mar 2016 00:17:30 +0530
Subject: [PATCH 3873/4301] SoundWire: regmap: Add regmap support for
 SoundWire bus.

commit dd697b37dfbad68f114b24520f8cc0075a3c64f3 from
git://git@github.com:01org/linux-intel-4.9.git

This patch adds support for the SoundWire regmap.

Change-Id: I0d892f2526c8eb4231f6436e1a539f50911fcd5b
Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
---
 drivers/base/regmap/Kconfig      |    8 ++
 drivers/base/regmap/Makefile     |    1 +
 drivers/base/regmap/regmap-sdw.c |  252 ++++++++++++++++++++++++++++++++++++++
 include/linux/regmap.h           |   36 ++++++
 4 files changed, 297 insertions(+), 0 deletions(-)
 create mode 100644 drivers/base/regmap/regmap-sdw.c

diff --git a/drivers/base/regmap/Kconfig b/drivers/base/regmap/Kconfig
index db9d00c3..9b5cbd0 100644
--- a/drivers/base/regmap/Kconfig
+++ b/drivers/base/regmap/Kconfig
@@ -29,3 +29,11 @@ config REGMAP_MMIO
 
 config REGMAP_IRQ
 	bool
+
+config REGMAP_SDW
+	default n
+	tristate "Regmap support for soundwire"
+	depends on SDW
+	help
+	  Enable this if regmap support is required for
+	  soundwire slave devices.
diff --git a/drivers/base/regmap/Makefile b/drivers/base/regmap/Makefile
index 609e4c8..ee041e0 100644
--- a/drivers/base/regmap/Makefile
+++ b/drivers/base/regmap/Makefile
@@ -10,3 +10,4 @@ obj-$(CONFIG_REGMAP_SPI) += regmap-spi.o
 obj-$(CONFIG_REGMAP_SPMI) += regmap-spmi.o
 obj-$(CONFIG_REGMAP_MMIO) += regmap-mmio.o
 obj-$(CONFIG_REGMAP_IRQ) += regmap-irq.o
+obj-$(CONFIG_REGMAP_SDW) += regmap-sdw.o
diff --git a/drivers/base/regmap/regmap-sdw.c b/drivers/base/regmap/regmap-sdw.c
new file mode 100644
index 0000000..3eacebf
--- /dev/null
+++ b/drivers/base/regmap/regmap-sdw.c
@@ -0,0 +1,252 @@
+/*
+ *  regmap-sdw.c - Register map access API - SoundWire support
+ *
+ *  Copyright (C) 2015-2016 Intel Corp
+ *  Author:  Hardik T Shah <hardik.t.shah@intel.com>
+ *
+ *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ *
+ */
+#include <linux/regmap.h>
+#include <linux/sdw_bus.h>
+#include <linux/module.h>
+
+#include "internal.h"
+
+#define SDW_SCP_ADDRPAGE1_MASK  0xFF
+#define SDW_SCP_ADDRPAGE1_SHIFT 15
+
+#define SDW_SCP_ADDRPAGE2_MASK  0xFF
+#define SDW_SCP_ADDRPAGE2_SHIFT 22
+
+#define SDW_REGADDR_SHIFT	0x0
+#define SDW_REGADDR_MASK	0xFFFF
+
+#define SDW_MAX_REG_ADDR	65536
+
+static int regmap_sdw_read(void *context,
+			   const void *reg, size_t reg_size,
+			   void *val, size_t val_size)
+{
+	struct device *dev = context;
+	struct sdw_slave *sdw = to_sdw_slave(dev);
+	struct sdw_msg xfer;
+	int ret, scp_addr1, scp_addr2;
+	int reg_command;
+	int reg_addr = *(u32 *)reg;
+	size_t t_val_size = 0, t_size;
+	int offset;
+	u8 *t_val;
+
+	/* All registers are 4 byte on SoundWire bus */
+	if (reg_size != 4)
+		return -ENOTSUPP;
+
+	xfer.slave_addr = sdw->slv_number;
+	xfer.ssp_tag = 0;
+	xfer.flag = SDW_MSG_FLAG_READ;
+	xfer.len = 0;
+	t_val = val;
+
+	offset = 0;
+	reg_command = (reg_addr  >> SDW_REGADDR_SHIFT) &
+					SDW_REGADDR_MASK;
+	if (val_size > SDW_MAX_REG_ADDR)
+		t_size = SDW_MAX_REG_ADDR - reg_command;
+	else
+		t_size = val_size;
+	while (t_val_size < val_size) {
+
+		scp_addr1 = (reg_addr >> SDW_SCP_ADDRPAGE1_SHIFT) &
+				SDW_SCP_ADDRPAGE1_MASK;
+		scp_addr2 = (reg_addr >> SDW_SCP_ADDRPAGE2_SHIFT) &
+				SDW_SCP_ADDRPAGE2_MASK;
+		xfer.addr_page1 = scp_addr1;
+		xfer.addr_page2 = scp_addr2;
+		xfer.addr = reg_command;
+		xfer.len += t_size;
+		xfer.buf = &t_val[offset];
+		ret = sdw_slave_transfer(sdw->mstr, &xfer, 1);
+		if (ret < 0)
+			return ret;
+		else if (ret != 1)
+			return -EIO;
+
+		t_val_size += t_size;
+		offset += t_size;
+		if (val_size -  t_val_size > 65535)
+			t_size = 65535;
+		else
+			t_size = val_size - t_val_size;
+		reg_addr += t_size;
+		reg_command = (reg_addr  >> SDW_REGADDR_SHIFT) &
+					SDW_REGADDR_MASK;
+	}
+	return 0;
+}
+
+static int regmap_sdw_gather_write(void *context,
+			   const void *reg, size_t reg_size,
+			   const void *val, size_t val_size)
+{
+	struct device *dev = context;
+	struct sdw_slave *sdw = to_sdw_slave(dev);
+	struct sdw_msg xfer;
+	int ret, scp_addr1, scp_addr2;
+	int reg_command;
+	int reg_addr = *(u32 *)reg;
+	size_t t_val_size = 0, t_size;
+	int offset;
+	u8 *t_val;
+
+	/* All registers are 4 byte on SoundWire bus */
+	if (reg_size != 4)
+		return -ENOTSUPP;
+
+	if (!sdw)
+		return 0;
+
+	xfer.slave_addr = sdw->slv_number;
+	xfer.ssp_tag = 0;
+	xfer.flag = SDW_MSG_FLAG_WRITE;
+	xfer.len = 0;
+	t_val = (u8 *)val;
+
+	offset = 0;
+	reg_command = (reg_addr  >> SDW_REGADDR_SHIFT) &
+					SDW_REGADDR_MASK;
+	if (val_size > SDW_MAX_REG_ADDR)
+		t_size = SDW_MAX_REG_ADDR - reg_command;
+	else
+		t_size = val_size;
+	while (t_val_size < val_size) {
+
+		scp_addr1 = (reg_addr >> SDW_SCP_ADDRPAGE1_SHIFT) &
+				SDW_SCP_ADDRPAGE1_MASK;
+		scp_addr2 = (reg_addr >> SDW_SCP_ADDRPAGE2_SHIFT) &
+				SDW_SCP_ADDRPAGE2_MASK;
+		xfer.addr_page1 = scp_addr1;
+		xfer.addr_page2 = scp_addr2;
+		xfer.addr = reg_command;
+		xfer.len += t_size;
+		xfer.buf = &t_val[offset];
+		ret = sdw_slave_transfer(sdw->mstr, &xfer, 1);
+		if (ret < 0)
+			return ret;
+		else if (ret != 1)
+			return -EIO;
+
+		t_val_size += t_size;
+		offset += t_size;
+		if (val_size -  t_val_size > 65535)
+			t_size = 65535;
+		else
+			t_size = val_size - t_val_size;
+		reg_addr += t_size;
+		reg_command = (reg_addr  >> SDW_REGADDR_SHIFT) &
+					SDW_REGADDR_MASK;
+	}
+	return 0;
+}
+
+static inline void regmap_sdw_count_check(size_t count, u32 offset)
+{
+	BUG_ON(count <= offset);
+}
+
+static int regmap_sdw_write(void *context, const void *data, size_t count)
+{
+	/* 4-byte register address for the soundwire */
+	unsigned int offset = 4;
+
+	regmap_sdw_count_check(count, offset);
+	return regmap_sdw_gather_write(context, data, 4,
+					data + offset, count - offset);
+}
+
+static struct regmap_bus regmap_sdw = {
+	.write = regmap_sdw_write,
+	.gather_write = regmap_sdw_gather_write,
+	.read = regmap_sdw_read,
+	.reg_format_endian_default = REGMAP_ENDIAN_LITTLE,
+	.val_format_endian_default = REGMAP_ENDIAN_LITTLE,
+};
+
+static int regmap_sdw_config_check(const struct regmap_config *config)
+{
+	/* All register are 8-bits wide as per MIPI Soundwire 1.0 Spec */
+	if (config->val_bits != 8)
+		return -ENOTSUPP;
+	/* Registers are 32 bit in size, based on SCP_ADDR1 and SCP_ADDR2
+	 * implementation address range may vary in slave.
+	 */
+	if (config->reg_bits != 32)
+		return -ENOTSUPP;
+	/* SoundWire register address are contiguous. */
+	if (config->reg_stride != 0)
+		return -ENOTSUPP;
+	if (config->pad_bits != 0)
+		return -ENOTSUPP;
+
+
+	return 0;
+}
+
+/**
+ * regmap_init_sdw(): Initialise register map
+ *
+ * @sdw: Device that will be interacted with
+ * @config: Configuration for register map
+ *
+ * The return value will be an ERR_PTR() on error or a valid pointer to
+ * a struct regmap.
+ */
+struct regmap *regmap_init_sdw(struct sdw_slave *sdw,
+			       const struct regmap_config *config)
+{
+	int ret;
+
+	ret = regmap_sdw_config_check(config);
+	if (ret)
+		return ERR_PTR(ret);
+
+	return regmap_init(&sdw->dev, &regmap_sdw, &sdw->dev, config);
+}
+EXPORT_SYMBOL_GPL(regmap_init_sdw);
+
+
+/**
+ * devm_regmap_init_sdw(): Initialise managed register map
+ *
+ * @sdw Device that will be interacted with
+ * @config: Configuration for register map
+ *
+ * The return value will be an ERR_PTR() on error or a valid pointer
+ * to a struct regmap.  The regmap will be automatically freed by the
+ * device management code.
+ */
+struct regmap *devm_regmap_init_sdw(struct sdw_slave *sdw,
+				    const struct regmap_config *config)
+{
+	int ret;
+
+	ret = regmap_sdw_config_check(config);
+	if (ret)
+		return ERR_PTR(ret);
+
+	return devm_regmap_init(&sdw->dev, &regmap_sdw, &sdw->dev, config);
+}
+EXPORT_SYMBOL_GPL(devm_regmap_init_sdw);
+
+MODULE_LICENSE("GPL v2");
diff --git a/include/linux/regmap.h b/include/linux/regmap.h
index 2c12cc5..c00a5f4 100644
--- a/include/linux/regmap.h
+++ b/include/linux/regmap.h
@@ -29,6 +29,7 @@ struct regmap;
 struct regmap_range_cfg;
 struct regmap_field;
 struct snd_ac97;
+struct sdw_slave;
 
 /* An enum of all the supported cache types */
 enum regcache_type {
@@ -529,6 +530,41 @@ struct regmap *__devm_regmap_init_ac97(struct snd_ac97 *ac97,
 				dev, bus, bus_context, config)
 int regmap_attach_dev(struct device *dev, struct regmap *map,
 		      const struct regmap_config *config);
+struct regmap *regmap_init_i2c(struct i2c_client *i2c,
+			       const struct regmap_config *config);
+struct regmap *regmap_init_slave(struct sdw_slave *sdw,
+			       const struct regmap_config *config);
+struct regmap *regmap_init_spi(struct spi_device *dev,
+			       const struct regmap_config *config);
+struct regmap *regmap_init_spmi_base(struct spmi_device *dev,
+				     const struct regmap_config *config);
+struct regmap *regmap_init_spmi_ext(struct spmi_device *dev,
+				    const struct regmap_config *config);
+struct regmap *regmap_init_mmio_clk(struct device *dev, const char *clk_id,
+				    void __iomem *regs,
+				    const struct regmap_config *config);
+struct regmap *regmap_init_ac97(struct snd_ac97 *ac97,
+				const struct regmap_config *config);
+
+struct regmap *devm_regmap_init(struct device *dev,
+				const struct regmap_bus *bus,
+				void *bus_context,
+				const struct regmap_config *config);
+struct regmap *devm_regmap_init_i2c(struct i2c_client *i2c,
+				    const struct regmap_config *config);
+struct regmap *devm_regmap_init_sdw(struct sdw_slave *sdw,
+				    const struct regmap_config *config);
+struct regmap *devm_regmap_init_spi(struct spi_device *dev,
+				    const struct regmap_config *config);
+struct regmap *devm_regmap_init_spmi_base(struct spmi_device *dev,
+					  const struct regmap_config *config);
+struct regmap *devm_regmap_init_spmi_ext(struct spmi_device *dev,
+					 const struct regmap_config *config);
+struct regmap *devm_regmap_init_mmio_clk(struct device *dev, const char *clk_id,
+					 void __iomem *regs,
+					 const struct regmap_config *config);
+struct regmap *devm_regmap_init_ac97(struct snd_ac97 *ac97,
+				     const struct regmap_config *config);
 
 /**
  * regmap_init_i2c(): Initialise register map
-- 
1.7.5.4

