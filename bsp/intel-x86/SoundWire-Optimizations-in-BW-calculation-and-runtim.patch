From 4513c54efc4f6dc6da34d57a45fb2672234c93ba Mon Sep 17 00:00:00 2001
From: Sanyog Kale <sanyog.r.kale@intel.com>
Date: Sun, 20 Nov 2016 20:25:37 +0530
Subject: [PATCH 3986/4301] SoundWire: Optimizations in BW calculation and
 runtime ops

commit 6c7c29a597ec811f6f350f0ee6574af4f93aade8 from
git://git@github.com:01org/linux-intel-4.9.git

Includes:
	- Removed multiple ifdefs from code.
	- Clock frequency divider changes.
	- clock divider added for clock scaling
	- cleanup in row column definition
	- block offset adjusted for loopback test

Change-Id: I6e9344d7c44681d696ffc5baa61f33ae5f3ac436
Signed-off-by: Sanyog Kale <sanyog.r.kale@intel.com>
---
 drivers/sdw/sdw_bwcalc.c |   72 ++++++++++++++++++---------------------------
 drivers/sdw/sdw_cnl.c    |    8 +----
 drivers/sdw/sdw_priv.h   |    1 +
 3 files changed, 32 insertions(+), 49 deletions(-)

diff --git a/drivers/sdw/sdw_bwcalc.c b/drivers/sdw/sdw_bwcalc.c
index efcd106..d580552 100644
--- a/drivers/sdw/sdw_bwcalc.c
+++ b/drivers/sdw/sdw_bwcalc.c
@@ -25,37 +25,29 @@
 #include <linux/sdw/sdw_registers.h>
 
 
-#define MAXCLOCKFREQ		6
 
-#ifdef CONFIG_SND_SOC_SVFPGA
-/* For PDM Capture, frameshape used is 50x10 */
-int rows[MAX_NUM_ROWS] = {50, 100, 48, 60, 64, 72, 75, 80, 90,
-		     96, 125, 144, 147, 120, 128, 150,
+#ifndef CONFIG_SND_SOC_SVFPGA /* Original */
+int rows[MAX_NUM_ROWS] = {48, 50, 60, 64, 72, 75, 80, 90,
+		     96, 125, 144, 147, 100, 120, 128, 150,
 		     160, 180, 192, 200, 240, 250, 256};
 
-int cols[MAX_NUM_COLS] = {10, 2, 4, 6, 8, 12, 14, 16};
-
-int clock_freq[MAXCLOCKFREQ] = {19200000, 19200000,
-				19200000, 19200000,
-				19200000, 19200000};
+int cols[MAX_NUM_COLS] = {2, 4, 6, 8, 10, 12, 14, 16};
 
 #else
-/* TBD: Currently we are using 100x2 as frame shape. to be removed later */
-int rows[MAX_NUM_ROWS] = {100, 48, 50, 60, 64, 72, 75, 80, 90,
+/* For PDM Capture, frameshape used is 50x10 */
+int rows[MAX_NUM_ROWS] = {50, 100, 48, 60, 64, 72, 75, 80, 90,
 		     96, 125, 144, 147, 120, 128, 150,
 		     160, 180, 192, 200, 240, 250, 256};
 
-int cols[MAX_NUM_COLS] = {2, 4, 6, 8, 10, 12, 14, 16};
+int cols[MAX_NUM_COLS] = {10, 2, 4, 6, 8, 12, 14, 16};
+#endif
 
 /*
  * TBD: Get supported clock frequency from ACPI and store
  * it in master data structure.
  */
-/* Currently only 9.6MHz clock frequency used */
-int clock_freq[MAXCLOCKFREQ] = {9600000, 9600000,
-				9600000, 9600000,
-				9600000, 9600000};
-#endif
+#define MAXCLOCKDIVS		1
+int clock_div[MAXCLOCKDIVS] = {1};
 
 struct sdw_num_to_col sdw_num_col_mapping[MAX_NUM_COLS] = {
 	{0, 2}, {1, 4}, {2, 6}, {3, 8}, {4, 10}, {5, 12}, {6, 14}, {7, 16},
@@ -117,19 +109,13 @@ int sdw_mstr_bw_init(struct sdw_bus *sdw_bs)
 	sdw_bs->frame_freq = 0;
 	sdw_bs->clk_state = SDW_CLK_STATE_ON;
 	sdw_mstr_cap = &sdw_bs->mstr->mstr_capabilities;
-#ifdef CONFIG_SND_SOC_SVFPGA
-	/* TBD: For PDM capture to be removed later */
-	sdw_bs->clk_freq = 9.6 * 1000 * 1000 * 2;
-	sdw_mstr_cap->base_clk_freq = 9.6 * 1000 * 1000 * 2;
-#else
 	/* TBD: Base Clock frequency should be read from
 	 * master capabilities
-	 * Currenly hardcoding to 9.6MHz
+	 * Currenly hardcoding to 19.2MHz
 	 */
-	sdw_bs->clk_freq = 9.6 * 1000 * 1000;
-	sdw_mstr_cap->base_clk_freq = 9.6 * 1000 * 1000;
+	sdw_bs->clk_freq = 9.6 * 1000 * 1000 * 2;
+	sdw_mstr_cap->base_clk_freq = 9.6 * 1000 * 1000 * 2;
 
-#endif
 	return 0;
 }
 EXPORT_SYMBOL_GPL(sdw_mstr_bw_init);
@@ -904,10 +890,13 @@ int sdw_en_dis_mstr_slv_state(struct sdw_bus *sdw_mstr_bs,
 int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int,
 		int *col, int *row)
 {
+	struct sdw_master_capabilities *sdw_mstr_cap = NULL;
 	int i, rc, clock_reqd = 0, frame_interval = 0, frame_frequency = 0;
 	int sel_row = 0, sel_col = 0;
 	bool clock_ok = false;
 
+	sdw_mstr_cap = &sdw_mstr_bs->mstr->mstr_capabilities;
+
 	/*
 	 * Find nearest clock frequency needed by master for
 	 * given bandwidth
@@ -917,13 +906,15 @@ int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int,
 	 * TBD: Need to run efficient algorithm to make sure we have
 	 * only 1 to 10 percent of control bandwidth usage
 	 */
-	for (i = 0; i < MAXCLOCKFREQ; i++) {
+	for (i = 0; i < MAXCLOCKDIVS; i++) {
 
 		/* TBD: Check why 3000 */
-		if ((clock_freq[i] <= sdw_mstr_bs->bandwidth) ||
-				((clock_freq[i] % 3000) != 0))
+		if ((((sdw_mstr_cap->base_clk_freq * 2) / clock_div[i]) <=
+			sdw_mstr_bs->bandwidth) ||
+			((((sdw_mstr_cap->base_clk_freq * 2) / clock_div[i])
+			% 3000) != 0))
 			continue;
-		clock_reqd = clock_freq[i];
+		clock_reqd = ((sdw_mstr_cap->base_clk_freq * 2) / clock_div[i]);
 
 		/*
 		 * TBD: Check all the slave device capabilities
@@ -956,6 +947,7 @@ int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int,
 		sel_col = sdw_core.rowcolcomb[rc].col;
 		sdw_mstr_bs->frame_freq = frame_frequency;
 		sdw_mstr_bs->clk_freq = clock_reqd;
+		sdw_mstr_bs->clk_div = clock_div[i];
 		clock_ok = false;
 		*frame_int = frame_interval;
 		*col = sel_col;
@@ -1012,16 +1004,10 @@ int sdw_compute_sys_interval(struct sdw_bus *sdw_mstr_bs,
 			 * One port per bus runtime structure
 			 */
 			/* Calculate sample interval */
-#ifdef CONFIG_SND_SOC_SVFPGA
-			t_params->sample_interval =
-				((sdw_mstr_bs->clk_freq/
-				  sdw_mstr_bs_rt->stream_params.rate));
-#else
 			t_params->sample_interval =
-				((sdw_mstr_bs->clk_freq/
-				  sdw_mstr_bs_rt->stream_params.rate) * 2);
+				(sdw_mstr_bs->clk_freq/
+				  sdw_mstr_bs_rt->stream_params.rate);
 
-#endif
 			/* Only BlockPerPort supported */
 			t_params->blockpackingmode = 0;
 			t_params->lanecontrol = 0;
@@ -1278,7 +1264,7 @@ int sdw_compute_blk_subblk_offset(struct sdw_bus *sdw_mstr_bs)
 #ifdef CONFIG_SND_SOC_SVFPGA
 				block_offset = 1;
 #else
-				block_offset = 0;
+				block_offset = 1;
 #endif
 			} else {
 
@@ -1290,10 +1276,10 @@ int sdw_compute_blk_subblk_offset(struct sdw_bus *sdw_mstr_bs)
 				if ((hstart1 != hstart2) &&
 					(hstop1 != hstop2)) {
 					/* TBD: Harcoding to 0, to be removed*/
-					block_offset = 0;
+					block_offset = 1;
 				} else {
 					/* TBD: Harcoding to 0, to be removed*/
-					block_offset = 0;
+					block_offset = 1;
 				}
 #else
 				if ((hstart1 != hstart2) &&
@@ -1646,7 +1632,7 @@ int sdw_cfg_bs_params(struct sdw_bus *sdw_mstr_bs,
 		 */
 		if (ops->mstr_ops->set_clock_freq)
 			ops->mstr_ops->set_clock_freq(sdw_mstr_bs->mstr,
-					sdw_mstr_bs->clk_freq, banktouse);
+					sdw_mstr_bs->clk_div, banktouse);
 
 		/* Enable channel on alternate bank for running streams */
 		chn_en.is_activate = true;
diff --git a/drivers/sdw/sdw_cnl.c b/drivers/sdw/sdw_cnl.c
index d30cdfa..fc5281b 100644
--- a/drivers/sdw/sdw_cnl.c
+++ b/drivers/sdw/sdw_cnl.c
@@ -1179,7 +1179,7 @@ static int cnl_sdw_set_ssp_interval(struct sdw_master *mstr,
 }
 
 static int cnl_sdw_set_clock_freq(struct sdw_master *mstr,
-			int cur_clk_freq, int bank)
+			int cur_clk_div, int bank)
 {
 	struct cnl_sdw *sdw = sdw_master_get_drvdata(mstr);
 	struct cnl_sdw_data *data = &sdw->data;
@@ -1189,11 +1189,7 @@ static int cnl_sdw_set_clock_freq(struct sdw_master *mstr,
 	/* TODO: Retrieve divider value or get value directly from calling
 	 * function
 	 */
-#ifdef CONFIG_SND_SOC_SVFPGA
-	int divider = ((9600000 * 2/cur_clk_freq) - 1);
-#else
-	int divider = ((9600000/cur_clk_freq) - 1);
-#endif
+	int divider = (cur_clk_div - 1);
 
 	if (bank) {
 		mcp_clockctrl_offset = SDW_CNL_MCP_CLOCKCTRL1;
diff --git a/drivers/sdw/sdw_priv.h b/drivers/sdw/sdw_priv.h
index 63f5462..ce79e11 100644
--- a/drivers/sdw/sdw_priv.h
+++ b/drivers/sdw/sdw_priv.h
@@ -185,6 +185,7 @@ struct sdw_bus {
 	unsigned int	clk_state;
 	unsigned int	active_bank;
 	unsigned int	clk_freq;
+	unsigned int	clk_div;
 	/* Bus total Bandwidth. Initialize and reset to zero */
 	unsigned int	bandwidth;
 	unsigned int	system_interval; /* Bus System Interval */
-- 
1.7.5.4

