From 889ed966bde390a3093fc0894dd0a2411bb85a69 Mon Sep 17 00:00:00 2001
From: "Kareem,Shaik" <kareem.m.shaik@intel.com>
Date: Thu, 15 Jun 2017 13:40:04 +0530
Subject: [PATCH 4246/4301] ASoC: Intel: Skylake: Add support for always on
 CLK configuration

commit d8006d1b8ce4f03e96ea7e87b200d3bb7111d577 from
git://git@github.com:01org/linux-intel-4.9.git

For some platforms it is required that ADSP generate BCLK, Frame_sync
and MCLK regardless of whether audio stream is active or not. Clock
generation is controlled by ADSP Firmware, so driver can configure that
by sending DMA control IPC. The configuration for clock is prepared
using DMA control manifest data.

This patch prepares DMA control IPC by extracting specific ACPI NHLT
blob using DMA control manifest data and appending Firmware gateway
configuration to NHLT blob. Firmware Gateway configuration is available
in DMA control manifest data.

Finally DMA control IPC is sent to ADSP after firmware download is
completed and ADSP enters D0 state.

Change-Id: I65b090931c5ccaf1189c700975a1da6a772a44d8
Signed-off-by: Kareem,Shaik <kareem.m.shaik@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c |  118 +++++++++++++++++++++++++++++---
 sound/soc/intel/skylake/skl-nhlt.c     |   20 ++++++
 sound/soc/intel/skylake/skl-pcm.c      |    4 +
 sound/soc/intel/skylake/skl-topology.c |   11 +--
 sound/soc/intel/skylake/skl-topology.h |    5 +-
 sound/soc/intel/skylake/skl.h          |    3 +
 6 files changed, 141 insertions(+), 20 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 79cb617..35be594 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -1179,6 +1179,11 @@ int skl_init_dsp(struct skl *skl)
 	skl_dsp_enable_notification(skl->skl_sst, false);
 	dev_dbg(bus->dev, "dsp registration status=%d\n", ret);
 
+	/* Set DMA clock controls */
+	ret = skl_dsp_set_dma_clk_controls(skl->skl_sst);
+	if (ret < 0)
+		return ret;
+
 	return ret;
 }
 
@@ -1279,7 +1284,9 @@ int skl_resume_dsp(struct skl *skl)
 		return ret;
 
 	skl_dsp_enable_notification(skl->skl_sst, false);
-	return ret;
+
+	/* Set DMA clock controls */
+	return skl_dsp_set_dma_clk_controls(skl->skl_sst);
 }
 
 enum skl_bitdepth skl_get_bit_depth(int params)
@@ -1508,8 +1515,10 @@ skip_buf_size_calc:
 }
 
 #define DMA_CONTROL_ID 5
+#define DMA_I2S_BLOB_SIZE 21
 
-int skl_dsp_set_dma_control(struct skl_sst *ctx, struct skl_module_cfg *mconfig)
+int skl_dsp_set_dma_control(struct skl_sst *ctx, u32 *caps,
+				u32 caps_size, u32 node_id)
 {
 	struct skl_dma_control *dma_ctrl;
 	struct skl_ipc_large_config_msg msg = {0};
@@ -1519,31 +1528,120 @@ int skl_dsp_set_dma_control(struct skl_sst *ctx, struct skl_module_cfg *mconfig)
 	/*
 	 * if blob size zero, then return
 	 */
-	if (mconfig->formats_config.caps_size == 0)
+	if (caps_size == 0)
 		return 0;
 
 	msg.large_param_id = DMA_CONTROL_ID;
-	msg.param_data_size = sizeof(struct skl_dma_control) +
-				mconfig->formats_config.caps_size;
+	msg.param_data_size = sizeof(struct skl_dma_control) + caps_size;
 
 	dma_ctrl = kzalloc(msg.param_data_size, GFP_KERNEL);
 	if (dma_ctrl == NULL)
 		return -ENOMEM;
 
-	dma_ctrl->node_id = skl_get_node_id(ctx, mconfig);
+	dma_ctrl->node_id = node_id;
 
-	/* size in dwords */
-	dma_ctrl->config_length = mconfig->formats_config.caps_size / 4;
+	/*
+	 * NHLT blob may contain additional configs along with i2s blob.
+	 * firmware expects only the I2S blob size as the config_length. So fix to i2s
+	 * blob size.
+	 *
+	 * size in dwords.
+	 */
+	dma_ctrl->config_length = DMA_I2S_BLOB_SIZE;
 
-	memcpy(dma_ctrl->config_data, mconfig->formats_config.caps,
-				mconfig->formats_config.caps_size);
+	memcpy(dma_ctrl->config_data, caps, caps_size);
 
 	err = skl_ipc_set_large_config(&ctx->ipc, &msg, (u32 *)dma_ctrl);
 
 	kfree(dma_ctrl);
+
 	return err;
 }
 
+static u32 skl_prepare_i2s_node_id(u32 instance, u8 dev_type,
+				u32 dir, u32 time_slot)
+{
+	union skl_connector_node_id node_id = {0};
+	union skl_ssp_dma_node ssp_node  = {0};
+
+	node_id.node.dma_type = (dir == SNDRV_PCM_STREAM_PLAYBACK) ?
+					SKL_DMA_I2S_LINK_OUTPUT_CLASS :
+					SKL_DMA_I2S_LINK_INPUT_CLASS;
+	ssp_node.dma_node.time_slot_index = time_slot;
+	ssp_node.dma_node.i2s_instance = instance;
+	node_id.node.vindex = ssp_node.val;
+
+	return node_id.val;
+}
+
+int skl_dsp_set_dma_clk_controls(struct skl_sst *ctx)
+{
+	struct nhlt_specific_cfg *cfg = NULL;
+	struct skl *skl = get_skl_ctx(ctx->dev);
+	struct skl_dmactrl_config *dmactrl_cfg = &skl->cfg.dmactrl_cfg;
+	struct skl_dmctrl_hdr *hdr;
+	u8 *dma_ctrl_config;
+	void *i2s_config = NULL;
+	u32 i2s_config_size, node_id;
+	int i, ret = 0;
+
+	if (!skl->cfg.dmactrl_cfg.size)
+		return 0;
+
+	for (i = 0; i < SKL_MAX_DMACTRL_CFG; i++) {
+		hdr = &dmactrl_cfg->hdr[i];
+
+		/* get nhlt specific config info */
+		cfg = skl_get_nhlt_specific_cfg(skl, hdr->vbus_id,
+					NHLT_LINK_SSP, hdr->fmt,
+					hdr->ch, hdr->freq,
+					hdr->direction, NHLT_DEVICE_I2S);
+
+		if (cfg && hdr->data_size) {
+			print_hex_dump(KERN_DEBUG, "NHLT blob Info:",
+					DUMP_PREFIX_OFFSET, 8, 4,
+					cfg->caps, cfg->size, false);
+
+			i2s_config_size = cfg->size + hdr->data_size;
+			i2s_config = kzalloc(i2s_config_size, GFP_KERNEL);
+			if (!i2s_config)
+				return -ENOMEM;
+
+			/* copy blob */
+			memcpy(i2s_config, cfg->caps, cfg->size);
+
+			/* copy additional dma controls informatioin */
+			dma_ctrl_config = (u8 *)i2s_config + cfg->size;
+			memcpy(dma_ctrl_config, hdr->data, hdr->data_size);
+
+			print_hex_dump(KERN_DEBUG, "Blob + DMA Control Info:",
+					DUMP_PREFIX_OFFSET, 8, 4,
+					i2s_config, i2s_config_size, false);
+
+			/* get node id */
+			node_id = skl_prepare_i2s_node_id(hdr->vbus_id,
+							SKL_DEVICE_I2S,
+							hdr->direction,
+							hdr->tdm_slot);
+
+			ret = skl_dsp_set_dma_control(ctx, (u32 *)i2s_config,
+							i2s_config_size, node_id);
+
+			kfree(i2s_config);
+
+			if (ret < 0)
+				return ret;
+
+		} else {
+			dev_err(ctx->dev, "Failed to get NHLT config: vbusi_id=%d ch=%d fmt=%d s_rate=%d\n",
+				hdr->vbus_id, hdr->ch, hdr->fmt, hdr->freq);
+			return -EIO;
+		}
+	}
+
+	return 0;
+}
+
 static void skl_setup_out_format(struct skl_sst *ctx,
 			struct skl_module_cfg *mconfig,
 			struct skl_audio_data_format *out_fmt)
diff --git a/sound/soc/intel/skylake/skl-nhlt.c b/sound/soc/intel/skylake/skl-nhlt.c
index 730ff06..087f91d 100644
--- a/sound/soc/intel/skylake/skl-nhlt.c
+++ b/sound/soc/intel/skylake/skl-nhlt.c
@@ -134,6 +134,26 @@ static bool skl_check_ep_match(struct device *dev, struct nhlt_endpoint *epnt,
 		return false;
 }
 
+struct nhlt_specific_cfg *
+skl_get_nhlt_specific_cfg(struct skl *skl, u32 instance, u8 link_type,
+		u8 s_fmt, u8 num_ch, u32 s_rate, u8 dir, u8 dev_type)
+{
+	struct nhlt_specific_cfg *cfg = NULL;
+	struct hdac_ext_bus *ebus = &skl->ebus;
+
+	/* update the blob based on virtual bus_id*/
+	if (!skl->nhlt_override) {
+		dev_warn(ebus_to_hbus(ebus)->dev, "Querying NHLT blob from ACPI NHLT table !!\n");
+		cfg = skl_get_ep_blob(skl, instance, link_type, s_fmt,
+				num_ch, s_rate, dir, dev_type);
+	} else {
+		dev_warn(ebus_to_hbus(ebus)->dev, "Querying NHLT blob from Debugfs!!\n");
+		cfg = skl_nhlt_get_debugfs_blob(skl->debugfs, link_type, instance, dir);
+	}
+
+	return cfg;
+}
+
 struct nhlt_specific_cfg
 *skl_get_ep_blob(struct skl *skl, u32 instance, u8 link_type,
 			u8 s_fmt, u8 num_ch, u32 s_rate,
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 6028ed5..f352a8c 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -2057,6 +2057,10 @@ static int skl_platform_soc_probe(struct snd_soc_platform *platform)
 			dev_err(platform->dev, "Failed to boot first fw: %d\n", ret);
 			return ret;
 		}
+
+		/* Set DMA clock controls */
+		skl_dsp_set_dma_clk_controls(skl->skl_sst);
+
 		ret = skl_populate_modules(skl);
 		if (ret < 0)
 			return ret;
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index dd9da0a..a7973a2 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -2542,18 +2542,13 @@ static int skl_tplg_be_fill_pipe_params(struct snd_soc_dai *dai,
 		mconfig->formats_config.caps = (u32 *) sdw_cfg;
 		return 0;
 	}
+
 	/* update the blob based on virtual bus_id*/
-	if (!skl->nhlt_override) {
-		cfg = skl_get_ep_blob(skl, mconfig->vbus_id, link_type,
+	cfg = skl_get_nhlt_specific_cfg(skl, mconfig->vbus_id, link_type,
 					params->s_fmt, params->ch,
 					params->s_freq, params->stream,
 					dev_type);
-	} else {
-		dev_warn(dai->dev, "Querying NHLT blob from Debugfs!!!!\n");
-		cfg = skl_nhlt_get_debugfs_blob(skl->debugfs,
-					link_type, mconfig->vbus_id,
-					params->stream);
-	}
+
 	if (cfg) {
 		mconfig->formats_config.caps_size = cfg->size;
 		mconfig->formats_config.caps = (u32 *) &cfg->caps;
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index d09b4e6..59b867e 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -522,8 +522,9 @@ struct fw_ipc_data {
 
 int skl_tplg_be_update_params(struct snd_soc_dai *dai,
 	struct skl_pipe_params *params);
-int skl_dsp_set_dma_control(struct skl_sst *ctx,
-		struct skl_module_cfg *mconfig);
+int skl_dsp_set_dma_clk_controls(struct skl_sst *ctx);
+int skl_dsp_set_dma_control(struct skl_sst *ctx, u32 *caps,
+			u32 caps_size, u32 node_id);
 void skl_tplg_set_be_dmic_config(struct snd_soc_dai *dai,
 	struct skl_pipe_params *params, int stream);
 int skl_tplg_init(struct snd_soc_platform *platform,
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index df2ee44..e8fb358 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -197,6 +197,9 @@ void skl_nhlt_free(struct nhlt_acpi_table *addr);
 struct nhlt_specific_cfg *skl_get_ep_blob(struct skl *skl, u32 instance,
 					u8 link_type, u8 s_fmt, u8 no_ch,
 					u32 s_rate, u8 dirn, u8 dev_type);
+struct nhlt_specific_cfg *
+skl_get_nhlt_specific_cfg(struct skl *skl, u32 instance, u8 link_type,
+		u8 s_fmt, u8 num_ch, u32 s_rate, u8 dir, u8 dev_type);
 
 int skl_get_dmic_geo(struct skl *skl);
 int skl_nhlt_update_topology_bin(struct skl *skl);
-- 
1.7.5.4

