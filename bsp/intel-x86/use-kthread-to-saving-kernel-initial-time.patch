From afde2c85d42623c39ad5a45afdf755bd60aa2029 Mon Sep 17 00:00:00 2001
From: Zhang Ning <ning.a.zhang@intel.com>
Date: Wed, 7 Jun 2017 14:43:29 +0800
Subject: [PATCH 4262/4301] use kthread to saving kernel initial time

commit 76d20a74196a57ca7b6b776371c275549395131e from
git://git@github.com:01org/linux-intel-4.9.git

kernel will wait async rootfs populate finish.
preload_module is time consuming.

so put it into a kthread, that can make kernel initial earlier
thus same cold boot time, init process starts 100ms early than before.

v2. remove __init flag, because kernel will free __init memory,
but preload module threads is still running, and this will crash kernel
v3. add a proc file for sync between kernel and userspace.
v4, proc file is useless, due to thread exists before modules initial
finished. just let user space retry.

Change-Id: I319e9af92a0cc8ab299cbb23b257b0879ad2ace1
Signed-off-by: Zhang Ning <ning.a.zhang@intel.com>
Tracked-On:
---
 init/initramfs.c      |    3 ++-
 init/preload_module.c |    6 +++---
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/init/initramfs.c b/init/initramfs.c
index 9aae8841..4e037e1 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -19,6 +19,7 @@
 #include <linux/syscalls.h>
 #include <linux/utime.h>
 #include <linux/async.h>
+#include <linux/kthread.h>
 #include "preload_module.c"
 
 
@@ -657,7 +658,7 @@ static void __init async_populate_rootfs(void *data, async_cookie_t cookie)
 		 * us a chance to load before device_initcalls.
 		 */
 		load_default_modules();
-		load_preload_modules();
+		kthread_run(load_preload_modules, NULL, "preload modules");
 	}
 	return;
 }
diff --git a/init/preload_module.c b/init/preload_module.c
index ae54d82..530aea1 100644
--- a/init/preload_module.c
+++ b/init/preload_module.c
@@ -5,7 +5,7 @@
 #define MODULE_LIST_CONF "/preload_module"
 #define CONFIG_SIZE (1024 * 4)
 
-static int __init load_module(const char *filename, const char *options)
+static int load_module(const char *filename, const char *options)
 {
 	int fd, ret;
 
@@ -17,7 +17,7 @@ static int __init load_module(const char *filename, const char *options)
 	return ret;
 }
 
-static int __init find_pos(char *s, char c)
+static int find_pos(char *s, char c)
 {
 	char *t;
 
@@ -32,7 +32,7 @@ static int __init find_pos(char *s, char c)
 	return t-s;
 }
 
-static int __init load_preload_modules(void)
+static int load_preload_modules(void *args)
 {
 	int fd, count, pos0, pos1;
 	char *cache, *line, *name, *options;
-- 
1.7.5.4

