From b58e9d8cb1305d714bde4a38bfab5b4e6110671d Mon Sep 17 00:00:00 2001
From: Ramesh Babu <ramesh.babu@intel.com>
Date: Thu, 14 Jul 2016 11:12:11 +0530
Subject: [PATCH 4086/4301] ASoC: Intel: Skylake: Add module data to module
 list

commit ab9ad4e4470f73a63739d6dd0d6724de4af99ea4 from
git://git@github.com:01org/linux-intel-4.9.git

Some module data is common to all instances of a module
which is kept inside manifest structure. Add a reference to
module data in module list.

Change-Id: I7f1cfd810f2e398e18cdaf7ac54848a6ea507cef
Signed-off-by: Ramesh Babu <ramesh.babu@intel.com>
Signed-off-by: Shreyas NC <shreyas.nc@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/13458
Reviewed-by: Kale, Sanyog R <sanyog.r.kale@intel.com>
Reviewed-by: Singh, Guneshwor O <guneshwor.o.singh@intel.com>
Reviewed-by: Diwakar, Praveen <praveen.diwakar@intel.com>
Tested-by: Sm, Bhadur A <bhadur.a.sm@intel.com>

Conflicts:
	sound/soc/intel/skylake/skl-sst-utils.c
---
 sound/soc/intel/skylake/skl-pcm.c       |    4 +++
 sound/soc/intel/skylake/skl-sst-dsp.h   |    3 ++
 sound/soc/intel/skylake/skl-sst-utils.c |   37 ++++++++++++++++++++++++++++++-
 3 files changed, 43 insertions(+), 1 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 8aa7ef3..4bf8069 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1723,6 +1723,10 @@ static int skl_populate_modules(struct skl *skl)
 	struct skl_module_cfg *mconfig;
 	int ret = 0;
 
+	ret = snd_skl_add_mod_data(skl->skl_sst);
+	if (ret < 0)
+		return ret;
+
 	list_for_each_entry(p, &skl->ppl_list, node) {
 		list_for_each_entry(m, &p->pipe->w_list, node) {
 			w = m->w;
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index 774b22d..e39cc37 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -185,6 +185,7 @@ struct uuid_module {
 	u64 pvt_id[MAX_INSTANCE_BUFF];
 	int *instance_id;
 
+	struct skl_module *mod_data;
 	struct list_head list;
 };
 
@@ -260,4 +261,6 @@ int skl_prepare_lib_load(struct skl_sst *skl, struct skl_lib_info *linfo,
 			unsigned int hdr_offset, int index);
 void skl_release_library(struct skl_lib_info *linfo, int lib_count);
 
+int snd_skl_add_mod_data(struct skl_sst *ctx);
+
 #endif /*__SKL_SST_DSP_H__*/
diff --git a/sound/soc/intel/skylake/skl-sst-utils.c b/sound/soc/intel/skylake/skl-sst-utils.c
index 74a0919..f617d70 100644
--- a/sound/soc/intel/skylake/skl-sst-utils.c
+++ b/sound/soc/intel/skylake/skl-sst-utils.c
@@ -20,7 +20,7 @@
 #include "../common/sst-dsp.h"
 #include "../common/sst-dsp-priv.h"
 #include "skl-sst-ipc.h"
-
+#include "skl.h"
 
 #define UUID_STR_SIZE 37
 #define DEFAULT_HASH_SHA256_LEN 32
@@ -107,6 +107,41 @@ struct skl_ext_manifest_hdr {
 	u32 entries;
 };
 
+/**
+ * Add manifest module data to the module list by
+ * comparing the UUID of module to be added with the
+ * already added UUID in the last
+ */
+int snd_skl_add_mod_data(struct skl_sst *ctx)
+{
+	struct uuid_module *module;
+	uuid_le *uuid_mod;
+	int j, num_modules;
+	struct skl_module *mod_data;
+	struct skl *skl = get_skl_ctx(ctx->dev);
+
+	if (list_empty(&ctx->uuid_list)) {
+		dev_err(ctx->dev, "Module list is empty\n");
+		return -EINVAL;
+	}
+
+	num_modules = skl->nr_modules;
+	for (j = 0; j < num_modules; j++) {
+		/* copy the module data in the parsed module uuid list */
+		mod_data = &skl->modules[j];
+		uuid_mod = &mod_data->uuid;
+		list_for_each_entry(module, &ctx->uuid_list, list) {
+			if (uuid_le_cmp(module->uuid, *uuid_mod) == 0) {
+				module->mod_data = mod_data;
+				break;
+			}
+		}
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snd_skl_add_mod_data);
+
 static int skl_get_pvtid_map(struct uuid_module *module, int instance_id)
 {
 	int pvt_id;
-- 
1.7.5.4

