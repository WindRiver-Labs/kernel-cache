From 50a42c3c8cf99bc5e6118e5dd5e6e7cd73b9f0de Mon Sep 17 00:00:00 2001
From: Jaikrishna Nemallapudi <jaikrishnax.nemallapudi@intel.com>
Date: Sun, 2 Jul 2017 12:10:15 +0530
Subject: [PATCH 3990/4301] SoundWire: Fix for assigning port capabilities for
 all the

commit 121eb5d97a9e09bae75d010df124be1387edaf74 from
git://git@github.com:01org/linux-intel-4.9.git
master ports while registering2

Also adds check for Master and Slave capabilities
---
 drivers/sdw/sdw.c        |  196 ++++++++++++++++++++++++++++++++++++++++++++--
 drivers/sdw/sdw_bwcalc.c |  104 +++++++++++++++++++++----
 2 files changed, 276 insertions(+), 24 deletions(-)

diff --git a/drivers/sdw/sdw.c b/drivers/sdw/sdw.c
index 4e5a37e..27612a6 100644
--- a/drivers/sdw/sdw.c
+++ b/drivers/sdw/sdw.c
@@ -1911,7 +1911,6 @@ int sdw_config_stream(struct sdw_master *mstr,
 	} else
 		sdw_rt->rx_ref_count++;
 
-	/* SRK: check with hardik */
 	sdw_rt->type = stream_config->type;
 	sdw_rt->stream_state  = SDW_STATE_CONFIG_STREAM;
 
@@ -1941,6 +1940,142 @@ out:
 }
 EXPORT_SYMBOL_GPL(sdw_config_stream);
 
+/**
+ * sdw_chk_slv_dpn_caps - Return success
+ * -EINVAL - In case of error
+ *
+ * This function checks all slave port capabilities
+ * for given stream parameters. If any of parameters
+ * is not supported in port capabilities, it returns
+ * error.
+ */
+int sdw_chk_slv_dpn_caps(struct sdw_slv_dpn_capabilities *dpn_cap,
+		struct sdw_stream_params *strm_prms)
+{
+	struct port_audio_mode_properties *mode_prop =
+		dpn_cap->mode_properties;
+	int ret = 0, i, value;
+
+	/* Check Sampling frequency */
+	if (mode_prop->num_sampling_freq_configs) {
+		for (i = 0; i < mode_prop->num_sampling_freq_configs; i++) {
+
+			value = mode_prop->sampling_freq_config[i];
+			if (strm_prms->rate == value)
+				break;
+		}
+
+		if (i == mode_prop->num_sampling_freq_configs)
+			return -EINVAL;
+
+	} else {
+
+		if ((strm_prms->rate < mode_prop->min_sampling_frequency)
+				|| (strm_prms->rate >
+				mode_prop->max_sampling_frequency))
+			return -EINVAL;
+	}
+
+	/* check for bit rate */
+	if (dpn_cap->num_word_length) {
+		for (i = 0; i < dpn_cap->num_word_length; i++) {
+
+			value = dpn_cap->word_length_buffer[i];
+			if (strm_prms->bps == value)
+				break;
+		}
+
+		if (i == dpn_cap->num_word_length)
+			return -EINVAL;
+
+	} else {
+
+		if ((strm_prms->bps < dpn_cap->min_word_length)
+				|| (strm_prms->bps > dpn_cap->max_word_length))
+			return -EINVAL;
+	}
+
+	/* check for number of channels */
+	if (dpn_cap->num_ch_supported) {
+		for (i = 0; i < dpn_cap->num_ch_supported; i++) {
+
+			value = dpn_cap->ch_supported[i];
+			if (strm_prms->bps == value)
+				break;
+		}
+
+		if (i == dpn_cap->num_ch_supported)
+			return -EINVAL;
+
+	} else {
+
+		if ((strm_prms->channel_count < dpn_cap->min_ch_num)
+			|| (strm_prms->channel_count > dpn_cap->max_ch_num))
+			return -EINVAL;
+	}
+
+	return ret;
+}
+
+/**
+ * sdw_chk_mstr_dpn_caps - Return success
+ * -EINVAL - In case of error
+ *
+ * This function checks all master port capabilities
+ * for given stream parameters. If any of parameters
+ * is not supported in port capabilities, it returns
+ * error.
+ */
+int sdw_chk_mstr_dpn_caps(struct sdw_mstr_dpn_capabilities *dpn_cap,
+		struct sdw_stream_params *strm_prms)
+{
+
+	int ret = 0, i, value;
+
+	/* check for bit rate */
+	if (dpn_cap->num_word_length) {
+		for (i = 0; i < dpn_cap->num_word_length; i++) {
+
+			value = dpn_cap->word_length_buffer[i];
+			if (strm_prms->bps == value)
+				break;
+		}
+
+		if (i == dpn_cap->num_word_length)
+			return -EINVAL;
+
+	} else {
+
+		if ((strm_prms->bps < dpn_cap->min_word_length)
+			|| (strm_prms->bps > dpn_cap->max_word_length)) {
+			return -EINVAL;
+		}
+
+
+	}
+
+	/* check for number of channels */
+	if (dpn_cap->num_ch_supported) {
+		for (i = 0; i < dpn_cap->num_ch_supported; i++) {
+
+			value = dpn_cap->ch_supported[i];
+			if (strm_prms->bps == value)
+				break;
+		}
+
+		if (i == dpn_cap->num_ch_supported)
+			return -EINVAL;
+
+	} else {
+
+		if ((strm_prms->channel_count < dpn_cap->min_ch_num)
+			|| (strm_prms->channel_count > dpn_cap->max_ch_num))
+			return -EINVAL;
+	}
+
+	return ret;
+}
+
 static int sdw_mstr_port_configuration(struct sdw_master *mstr,
 			struct sdw_runtime *sdw_rt,
 			struct sdw_port_config *port_config)
@@ -1949,6 +2084,9 @@ static int sdw_mstr_port_configuration(struct sdw_master *mstr,
 	struct sdw_port_runtime *port_rt;
 	int found = 0;
 	int i;
+	int ret = 0, pn = 0;
+	struct sdw_mstr_dpn_capabilities *dpn_cap =
+		mstr->mstr_capabilities.sdw_dpn_cap;
 
 	list_for_each_entry(mstr_rt, &sdw_rt->mstr_rt_list, mstr_sdw_node) {
 		if (mstr_rt->mstr == mstr) {
@@ -1960,16 +2098,35 @@ static int sdw_mstr_port_configuration(struct sdw_master *mstr,
 		dev_err(&mstr->dev, "Master not found for this port\n");
 		return -EINVAL;
 	}
+
 	port_rt = kzalloc((sizeof(struct sdw_port_runtime)) *
 			port_config->num_ports, GFP_KERNEL);
 	if (!port_rt)
 		return -EINVAL;
+
+	if (!dpn_cap)
+		return -EINVAL;
+	/*
+	 * Note: Here the assumption the configuration is not
+	 * received for 0th port.
+	 */
 	for (i = 0; i < port_config->num_ports; i++) {
 		port_rt[i].channel_mask = port_config->port_cfg[i].ch_mask;
-		port_rt[i].port_num = port_config->port_cfg[i].port_num;
+		port_rt[i].port_num = pn = port_config->port_cfg[i].port_num;
+
+		/* Perform capability check for master port */
+		ret = sdw_chk_mstr_dpn_caps(&dpn_cap[pn],
+				&mstr_rt->stream_params);
+		if (ret < 0) {
+			dev_err(&mstr->dev,
+				"Master capabilities check failed\n");
+			return -EINVAL;
+		}
+
 		list_add_tail(&port_rt[i].port_node, &mstr_rt->port_rt_list);
 	}
-	return 0;
+
+	return ret;
 }
 
 static int sdw_slv_port_configuration(struct sdw_slave *slave,
@@ -1978,8 +2135,10 @@ static int sdw_slv_port_configuration(struct sdw_slave *slave,
 {
 	struct sdw_slave_runtime *slv_rt;
 	struct sdw_port_runtime *port_rt;
-	int found = 0;
-	int i;
+	struct sdw_slv_dpn_capabilities *dpn_cap =
+		slave->sdw_slv_cap.sdw_dpn_cap;
+	int found = 0, ret = 0;
+	int i, pn;
 
 	list_for_each_entry(slv_rt, &sdw_rt->slv_rt_list, slave_sdw_node) {
 		if (slv_rt->slave == slave) {
@@ -1991,6 +2150,12 @@ static int sdw_slv_port_configuration(struct sdw_slave *slave,
 		dev_err(&slave->mstr->dev, "Slave not found for this port\n");
 		return -EINVAL;
 	}
+
+	if (!slave->slave_cap_updated) {
+		dev_err(&slave->mstr->dev, "Slave capabilities not updated\n");
+		return -EINVAL;
+	}
+
 	port_rt = kzalloc((sizeof(struct sdw_port_runtime)) *
 			port_config->num_ports, GFP_KERNEL);
 	if (!port_rt)
@@ -1998,10 +2163,21 @@ static int sdw_slv_port_configuration(struct sdw_slave *slave,
 
 	for (i = 0; i < port_config->num_ports; i++) {
 		port_rt[i].channel_mask = port_config->port_cfg[i].ch_mask;
-		port_rt[i].port_num = port_config->port_cfg[i].port_num;
+		port_rt[i].port_num = pn = port_config->port_cfg[i].port_num;
+
+		/* Perform capability check for master port */
+		ret = sdw_chk_slv_dpn_caps(&dpn_cap[pn],
+				&slv_rt->stream_params);
+		if (ret < 0) {
+			dev_err(&slave->mstr->dev,
+				"Slave capabilities check failed\n");
+			return -EINVAL;
+		}
+
 		list_add_tail(&port_rt[i].port_node, &slv_rt->port_rt_list);
 	}
-	return 0;
+
+	return ret;
 }
 
 /**
@@ -2034,7 +2210,6 @@ int sdw_config_port(struct sdw_master *mstr,
 	struct sdw_runtime *sdw_rt = NULL;
 	struct sdw_stream_tag *stream = NULL;
 
-
 	for (i = 0; i < SDW_NUM_STREAM_TAGS; i++) {
 		if (stream_tags[i].stream_tag == stream_tag) {
 			sdw_rt = stream_tags[i].sdw_rt;
@@ -2042,10 +2217,12 @@ int sdw_config_port(struct sdw_master *mstr,
 			break;
 		}
 	}
+
 	if (!sdw_rt) {
 		dev_err(&mstr->dev, "Invalid stream tag\n");
 		return -EINVAL;
 	}
+
 	if (static_key_false(&sdw_trace_msg)) {
 		int i;
 
@@ -2054,13 +2231,16 @@ int sdw_config_port(struct sdw_master *mstr,
 				&port_config->port_cfg[i], stream_tag);
 		}
 	}
+
 	mutex_lock(&stream->stream_lock);
+
 	if (!slave)
 		ret = sdw_mstr_port_configuration(mstr, sdw_rt, port_config);
 	else
 		ret = sdw_slv_port_configuration(slave, sdw_rt, port_config);
 
 	mutex_unlock(&stream->stream_lock);
+
 	return ret;
 }
 EXPORT_SYMBOL_GPL(sdw_config_port);
diff --git a/drivers/sdw/sdw_bwcalc.c b/drivers/sdw/sdw_bwcalc.c
index b4cb27d..27d1524 100644
--- a/drivers/sdw/sdw_bwcalc.c
+++ b/drivers/sdw/sdw_bwcalc.c
@@ -787,11 +787,18 @@ int sdw_en_dis_mstr_slv_state(struct sdw_bus *sdw_mstr_bs,
  * This function computes clock and frame shape based on
  * clock frequency.
  */
-int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int)
+int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int,
+		struct sdw_mstr_runtime *sdw_mstr_rt)
 {
 	struct sdw_master_capabilities *sdw_mstr_cap = NULL;
-	int i, rc, clock_reqd = 0, frame_interval = 0, frame_frequency = 0;
-	int sel_row = 0, sel_col = 0;
+	struct sdw_slv_dpn_capabilities *sdw_slv_dpn_cap = NULL;
+	struct port_audio_mode_properties *mode_prop = NULL;
+	struct sdw_slave_runtime *slv_rt = NULL;
+	struct sdw_port_runtime *port_slv_rt = NULL;
+	int i, j, rc;
+	int clock_reqd = 0, frame_interval = 0, frame_frequency = 0;
+	int sel_row = 0, sel_col = 0, pn = 0;
+	int value;
 	bool clock_ok = false;
 
 	sdw_mstr_cap = &sdw_mstr_bs->mstr->mstr_capabilities;
@@ -800,11 +807,6 @@ int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int)
 	 * Find nearest clock frequency needed by master for
 	 * given bandwidth
 	 */
-
-	/*
-	 * TBD: Need to run efficient algorithm to make sure we have
-	 * only 1 to 10 percent of control bandwidth usage
-	 */
 	for (i = 0; i < MAXCLOCKDIVS; i++) {
 
 		/* TBD: Check why 3000 */
@@ -813,20 +815,86 @@ int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int)
 			((((sdw_mstr_cap->base_clk_freq * 2) / clock_div[i])
 			% 3000) != 0))
 			continue;
+
 		clock_reqd = ((sdw_mstr_cap->base_clk_freq * 2) / clock_div[i]);
 
 		/*
-		 * TBD: Check all the slave device capabilities
+		 * Check all the slave device capabilities
 		 * here and find whether given frequency is
 		 * supported by all slaves
 		 */
+		list_for_each_entry(slv_rt, &sdw_mstr_rt->slv_rt_list,
+								slave_node) {
+
+			/* check for valid slave */
+			if (slv_rt->slave == NULL)
+				break;
+
+			/* check clock req for each port */
+			list_for_each_entry(port_slv_rt,
+					&slv_rt->port_rt_list, port_node) {
+
+				pn = port_slv_rt->port_num;
+
+
+				sdw_slv_dpn_cap =
+				&slv_rt->slave->sdw_slv_cap.sdw_dpn_cap[pn];
+				mode_prop = sdw_slv_dpn_cap->mode_properties;
+
+				/*
+				 * TBD: Indentation to be fixed,
+				 * code refactoring to be considered.
+				 */
+				if (mode_prop->num_freq_configs) {
+					for (j = 0; j <
+					mode_prop->num_freq_configs; j++) {
+						value =
+						mode_prop->freq_supported[j];
+						if (clock_reqd == value) {
+							clock_ok = true;
+							break;
+						}
+						if (j ==
+						mode_prop->num_freq_configs) {
+							clock_ok = false;
+							break;
+						}
+
+					}
+
+				} else {
+					if ((clock_reqd <
+						mode_prop->min_frequency) ||
+						(clock_reqd >
+						 mode_prop->max_frequency)) {
+						clock_ok = false;
+					} else
+						clock_ok = true;
+				}
+
+				/* Go for next clock frequency */
+				if (!clock_ok)
+					break;
+			}
+
+			/*
+			 * Dont check next slave, go for next clock
+			 * frequency
+			 */
+			if (!clock_ok)
+				break;
+		}
+
+		/* None of clock frequency matches, return error */
+		if (i == MAXCLOCKDIVS)
+			return -EINVAL;
+
+		/* check for next clock divider */
+		if (!clock_ok)
+			continue;
 
 		/* Find frame shape based on bandwidth per controller */
-		/*
-		 * TBD: Need to run efficient algorithm to make sure we have
-		 * only 1 to 10 percent of control bandwidth usage
-		 */
-		for (rc = 0; rc <= MAX_NUM_ROW_COLS; rc++) {
+		for (rc = 0; rc < MAX_NUM_ROW_COLS; rc++) {
 			frame_interval =
 				sdw_core.rowcolcomb[rc].row *
 				sdw_core.rowcolcomb[rc].col;
@@ -842,6 +910,10 @@ int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int)
 			break;
 		}
 
+		/* Valid frameshape not found, check for next clock freq */
+		if (rc == MAX_NUM_ROW_COLS)
+			continue;
+
 		sel_row = sdw_core.rowcolcomb[rc].row;
 		sel_col = sdw_core.rowcolcomb[rc].col;
 		sdw_mstr_bs->frame_freq = frame_frequency;
@@ -853,7 +925,6 @@ int sdw_get_clock_frmshp(struct sdw_bus *sdw_mstr_bs, int *frame_int)
 		sdw_mstr_bs->row = sel_row;
 
 		break;
-
 	}
 
 	return 0;
@@ -1931,7 +2002,8 @@ int sdw_compute_bs_prms(struct sdw_bus *sdw_mstr_bs,
 
 	sdw_mstr_cap = &sdw_mstr->mstr_capabilities;
 
-	ret = sdw_get_clock_frmshp(sdw_mstr_bs, &frame_interval);
+	ret = sdw_get_clock_frmshp(sdw_mstr_bs, &frame_interval,
+			sdw_mstr_rt);
 	if (ret < 0) {
 		/* TBD: Undo all the computation */
 		dev_err(&sdw_mstr->dev, "clock/frameshape config failed\n");
-- 
1.7.5.4

