From fee829115dcd5b3cc7e966271143bf9becdab716 Mon Sep 17 00:00:00 2001
From: "Shi, Zhongjie" <zhongjie.shi@intel.com>
Date: Fri, 4 Aug 2017 08:14:05 +0000
Subject: [PATCH 4259/4301] Add TX limit for SocketCAN.

commit 1feecc55fcc6ce2827134978c2a6d013fd37a3a4 from
git://git@github.com:01org/linux-intel-4.9.git

This will be used to prevent malicious or unintentional
flooding of messages via SocketCAN.

Change-Id: I6c2e122e12a594d9ad7dc4bdeebe15a1929eb893
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-48496
Signed-off-by: Shi, Zhongjie <zhongjie.shi@intel.com>
Reviewed-by: Zhang, Baoli <baoli.zhang@intel.com>
---
 net/can/Kconfig  |    4 ++++
 net/can/af_can.c |   14 ++++++++++++++
 net/can/af_can.h |    5 +++++
 net/can/proc.c   |   13 +++++++++++++
 4 files changed, 36 insertions(+), 0 deletions(-)

diff --git a/net/can/Kconfig b/net/can/Kconfig
index a15c0e0..9f37a11 100644
--- a/net/can/Kconfig
+++ b/net/can/Kconfig
@@ -51,6 +51,10 @@ config CAN_GW
 	  They can be modified with AND/OR/XOR/SET operations as configured
 	  by the netlink configuration interface known e.g. from iptables.
 
+config CAN_TX_ATTEMPT_RATE_LIMIT
+	int "Tx attempt rate limit"
+	default "5"
+
 source "drivers/net/can/Kconfig"
 
 endif
diff --git a/net/can/af_can.c b/net/can/af_can.c
index 5488e4a..e137159 100644
--- a/net/can/af_can.c
+++ b/net/can/af_can.c
@@ -91,6 +91,9 @@ struct s_pstats   can_pstats;      /* receive list statistics */
 
 static atomic_t skbcounter = ATOMIC_INIT(0);
 
+#define SOCK_TX_ATTEMPT_RATE_LIMIT    (CONFIG_CAN_TX_ATTEMPT_RATE_LIMIT)
+
+
 /*
  * af_can socket functions
  */
@@ -223,6 +226,7 @@ static int can_create(struct net *net, struct socket *sock, int protocol,
  *  -EPERM when trying to send on a non-CAN interface
  *  -EMSGSIZE CAN frame size is bigger than CAN interface MTU
  *  -EINVAL when the skb->data does not contain a valid CAN frame
+ *  -EDQUOT when current tx rate reach its limit
  */
 int can_send(struct sk_buff *skb, int loop)
 {
@@ -261,6 +265,16 @@ int can_send(struct sk_buff *skb, int loop)
 		goto inval_skb;
 	}
 
+	/* update statistics */
+	can_stats.tx_attempt_frames++;
+	can_stats.tx_frames_attempt_delta++;
+
+	/* throttle if needed */
+	if (can_stats.current_tx_attempt_rate > SOCK_TX_ATTEMPT_RATE_LIMIT) {
+		printk(KERN_ERR "can: inhibit tx due to attempt rate: %d\n", can_stats.current_tx_attempt_rate);
+		return EDQUOT;
+	}
+
 	skb->ip_summed = CHECKSUM_UNNECESSARY;
 
 	skb_reset_mac_header(skb);
diff --git a/net/can/af_can.h b/net/can/af_can.h
index b86f512..6b822c0 100644
--- a/net/can/af_can.h
+++ b/net/can/af_can.h
@@ -83,22 +83,27 @@ struct s_stats {
 
 	unsigned long rx_frames;
 	unsigned long tx_frames;
+	unsigned long tx_attempt_frames;
 	unsigned long matches;
 
 	unsigned long total_rx_rate;
 	unsigned long total_tx_rate;
+	unsigned long total_tx_attempt_rate;
 	unsigned long total_rx_match_ratio;
 
 	unsigned long current_rx_rate;
 	unsigned long current_tx_rate;
+	unsigned long current_tx_attempt_rate;
 	unsigned long current_rx_match_ratio;
 
 	unsigned long max_rx_rate;
 	unsigned long max_tx_rate;
+	unsigned long max_tx_attempt_rate;
 	unsigned long max_rx_match_ratio;
 
 	unsigned long rx_frames_delta;
 	unsigned long tx_frames_delta;
+	unsigned long tx_frames_attempt_delta;
 	unsigned long matches_delta;
 };
 
diff --git a/net/can/proc.c b/net/can/proc.c
index 85ef7bb..11023cf 100644
--- a/net/can/proc.c
+++ b/net/can/proc.c
@@ -155,6 +155,8 @@ void can_stat_update(unsigned long data)
 
 	can_stats.total_tx_rate = calc_rate(can_stats.jiffies_init, j,
 					    can_stats.tx_frames);
+	can_stats.total_tx_attempt_rate = calc_rate(can_stats.jiffies_init, j,
+					    can_stats.tx_attempt_frames);
 	can_stats.total_rx_rate = calc_rate(can_stats.jiffies_init, j,
 					    can_stats.rx_frames);
 
@@ -165,12 +167,16 @@ void can_stat_update(unsigned long data)
 			can_stats.rx_frames_delta;
 
 	can_stats.current_tx_rate = calc_rate(0, HZ, can_stats.tx_frames_delta);
+	can_stats.current_tx_attempt_rate = calc_rate(0, HZ, can_stats.tx_frames_attempt_delta);
 	can_stats.current_rx_rate = calc_rate(0, HZ, can_stats.rx_frames_delta);
 
 	/* check / update maximum values */
 	if (can_stats.max_tx_rate < can_stats.current_tx_rate)
 		can_stats.max_tx_rate = can_stats.current_tx_rate;
 
+	if (can_stats.max_tx_attempt_rate < can_stats.current_tx_attempt_rate)
+		can_stats.max_tx_attempt_rate = can_stats.current_tx_attempt_rate;
+
 	if (can_stats.max_rx_rate < can_stats.current_rx_rate)
 		can_stats.max_rx_rate = can_stats.current_rx_rate;
 
@@ -179,6 +185,7 @@ void can_stat_update(unsigned long data)
 
 	/* clear values for 'current rate' calculation */
 	can_stats.tx_frames_delta = 0;
+	can_stats.tx_frames_attempt_delta = 0;
 	can_stats.rx_frames_delta = 0;
 	can_stats.matches_delta   = 0;
 
@@ -230,6 +237,8 @@ static int can_stats_proc_show(struct seq_file *m, void *v)
 
 		seq_printf(m, " %8ld frames/s total tx rate (TXR)\n",
 				can_stats.total_tx_rate);
+		seq_printf(m, " %8ld frames/s total attempt tx rate (ATXR)\n",
+				can_stats.total_tx_attempt_rate);
 		seq_printf(m, " %8ld frames/s total rx rate (RXR)\n",
 				can_stats.total_rx_rate);
 
@@ -240,6 +249,8 @@ static int can_stats_proc_show(struct seq_file *m, void *v)
 
 		seq_printf(m, " %8ld frames/s current tx rate (CTXR)\n",
 				can_stats.current_tx_rate);
+		seq_printf(m, " %8ld frames/s current attempt tx rate (CATXR)\n",
+				can_stats.current_tx_attempt_rate);
 		seq_printf(m, " %8ld frames/s current rx rate (CRXR)\n",
 				can_stats.current_rx_rate);
 
@@ -250,6 +261,8 @@ static int can_stats_proc_show(struct seq_file *m, void *v)
 
 		seq_printf(m, " %8ld frames/s max tx rate (MTXR)\n",
 				can_stats.max_tx_rate);
+		seq_printf(m, " %8ld frames/s max attempt tx rate (MATXR)\n",
+				can_stats.max_tx_attempt_rate);
 		seq_printf(m, " %8ld frames/s max rx rate (MRXR)\n",
 				can_stats.max_rx_rate);
 
-- 
1.7.5.4

