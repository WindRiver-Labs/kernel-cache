From 573c4c5fb82c537a2fbbfbe98ed0a43f67faecb9 Mon Sep 17 00:00:00 2001
From: Vinod Koul <vinod.koul@intel.com>
Date: Mon, 31 Aug 2015 14:12:14 +0530
Subject: [PATCH 3934/4301] ASoC: Intel: Skylake: Add debugfs NHLT ssp
 override

commit 42b49966948e455a8f49b56180e6d53775257c9f from
git://git@github.com:01org/linux-intel-4.9.git

Add debugfs entries for reading and writing SSP blobs which
driver can use to program DSP

Signed-off-by: Vinod Koul <vinod.koul@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c |   81 +++++++++++++++++++++++++++++++++++
 1 files changed, 81 insertions(+), 0 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index 03b16421..8a7268c 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -16,6 +16,14 @@
 #include <linux/pci.h>
 #include <linux/debugfs.h>
 #include "skl.h"
+#include "skl-nhlt.h"
+
+#define MAX_SSP 4
+
+struct nhlt_blob {
+	size_t size;
+	struct nhlt_specific_cfg *cfg;
+};
 
 struct skl_debug {
 	struct skl *skl;
@@ -23,6 +31,62 @@ struct skl_debug {
 
 	struct dentry *fs;
 	struct dentry *nhlt;
+	struct nhlt_blob ssp_blob[MAX_SSP];
+};
+
+static ssize_t nhlt_read(struct file *file, char __user *user_buf,
+					   size_t count, loff_t *ppos)
+{
+	struct nhlt_blob *blob = file->private_data;
+
+	if (!blob->cfg)
+		return -EIO;
+
+	return simple_read_from_buffer(user_buf, count, ppos,
+			blob->cfg, blob->size);
+}
+
+static ssize_t nhlt_write(struct file *file,
+		const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	struct nhlt_blob *blob = file->private_data;
+	struct nhlt_specific_cfg *new_cfg;
+	ssize_t written;
+	size_t size = blob->size;
+
+	if (!blob->cfg) {
+		/* allocate mem for blob */
+		blob->cfg = kzalloc(count, GFP_KERNEL);
+		if (!blob->cfg)
+			return -ENOMEM;
+		size = count;
+	} else if (blob->size < count) {
+		/* size if different, so relloc */
+		new_cfg = krealloc(blob->cfg, count, GFP_KERNEL);
+		if (!new_cfg)
+			return -ENOMEM;
+		size = count;
+		blob->cfg = new_cfg;
+	}
+
+	written = simple_write_to_buffer(blob->cfg, size, ppos,
+						user_buf, count);
+	blob->size = written;
+
+	/* Userspace has been fiddling around behind the kernel's back */
+	add_taint(TAINT_USER, LOCKDEP_NOW_UNRELIABLE);
+
+	print_hex_dump(KERN_DEBUG, "Debugfs Blob:", DUMP_PREFIX_OFFSET, 8, 4,
+			blob->cfg, blob->size, false);
+
+	return written;
+}
+
+static const struct file_operations nhlt_fops = {
+	.open = simple_open,
+	.read = nhlt_read,
+	.write = nhlt_write,
+	.llseek = default_llseek,
 };
 
 static ssize_t nhlt_control_read(struct file *file,
@@ -70,6 +134,9 @@ static const struct file_operations ssp_cntrl_nhlt_fops = {
 
 static int skl_init_nhlt(struct skl_debug *d)
 {
+	int i;
+	char name[12];
+
 	if (!debugfs_create_file("control",
 				0644, d->nhlt,
 				d, &ssp_cntrl_nhlt_fops)) {
@@ -77,6 +144,14 @@ static int skl_init_nhlt(struct skl_debug *d)
 		return -EIO;
 	}
 
+	for (i = 0; i < MAX_SSP; i++) {
+		snprintf(name, (sizeof(name)-1), "ssp%d", i);
+		if (!debugfs_create_file(name,
+					0644, d->nhlt,
+					&d->ssp_blob[i], &nhlt_fops))
+			dev_err(d->dev, "%s: debugfs init failed\n", name);
+	}
+
 	return 0;
 }
 
@@ -112,8 +187,14 @@ struct skl_debug *skl_debugfs_init(struct skl *skl)
 
 void skl_debugfs_exit(struct skl_debug *d)
 {
+	int i;
+
 	debugfs_remove_recursive(d->fs);
 
+	/* free blob memory, if allocated */
+	for (i = 0; i < MAX_SSP; i++)
+		kfree(d->ssp_blob[i].cfg);
+
 	kfree(d);
 
 }
-- 
1.7.5.4

