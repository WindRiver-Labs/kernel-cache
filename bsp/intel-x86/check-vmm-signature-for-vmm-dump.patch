From 0a0b17df26e1b32ae0e118dd8ecafe3f06ab2726 Mon Sep 17 00:00:00 2001
From: "Zhang, Qi" <qi1.zhang@intel.com>
Date: Wed, 28 Jun 2017 06:26:15 +0000
Subject: [PATCH 3674/4301] check vmm signature for vmm dump

commit ff333e38518b17844ae5aa274618edb50c8469d0 from
git://git@github.com:01org/linux-intel-4.9.git

Change-Id: Iae8ff7da65de3d80f4d69f7e905bc13d3115b383
Signed-off-by: Zhang, Qi <qi1.zhang@intel.com>
---
 drivers/trusty/trusty-ipc.c    |    2 +-
 drivers/trusty/trusty-irq.c    |    2 +-
 drivers/trusty/trusty-log.c    |   55 +++++++++++++++++++++-------------------
 drivers/trusty/trusty-virtio.c |    2 +-
 drivers/trusty/trusty.c        |    2 +-
 include/linux/trusty/trusty.h  |   14 ++++++---
 6 files changed, 42 insertions(+), 35 deletions(-)

diff --git a/drivers/trusty/trusty-ipc.c b/drivers/trusty/trusty-ipc.c
index 2cf7bfc..128be7c 100644
--- a/drivers/trusty/trusty-ipc.c
+++ b/drivers/trusty/trusty-ipc.c
@@ -1524,7 +1524,7 @@ static int tipc_virtio_probe(struct virtio_device *vdev)
 	vq_callback_t *vq_cbs[] = {_rxvq_cb, _txvq_cb};
 	const char *vq_names[] = { "rx", "tx" };
 
-	err = trusty_check_cpuid();
+	err = trusty_check_cpuid(NULL);
 	if (err < 0) {
 		dev_err(&vdev->dev, "CPUID Error: Cannot find eVmm in trusty driver initialization!");
 		return -EINVAL;
diff --git a/drivers/trusty/trusty-irq.c b/drivers/trusty/trusty-irq.c
index 4c4d2be..d28fec1 100644
--- a/drivers/trusty/trusty-irq.c
+++ b/drivers/trusty/trusty-irq.c
@@ -589,7 +589,7 @@ static int trusty_irq_probe(struct platform_device *pdev)
 	struct trusty_irq_state *is;
 	work_func_t work_func;
 
-	ret = trusty_check_cpuid();
+	ret = trusty_check_cpuid(NULL);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "CPUID Error: Cannot find eVmm in trusty driver initialization!");
 		return -EINVAL;
diff --git a/drivers/trusty/trusty-log.c b/drivers/trusty/trusty-log.c
index c977d33..1659179 100644
--- a/drivers/trusty/trusty-log.c
+++ b/drivers/trusty/trusty-log.c
@@ -251,10 +251,11 @@ static int trusty_log_probe(struct platform_device *pdev)
 {
 	struct trusty_log_state *s;
 	int result;
+	u32 vmm_signature;
 	phys_addr_t pa;
 	struct deadloop_dump *dump;
 
-	result = trusty_check_cpuid();
+	result = trusty_check_cpuid(&vmm_signature);
 	if (result < 0) {
 		dev_err(&pdev->dev, "CPUID Error: Cannot find eVmm in trusty driver initialization!");
 		return -EINVAL;
@@ -312,33 +313,35 @@ static int trusty_log_probe(struct platform_device *pdev)
 		goto error_panic_notifier;
 	}
 
-	/* allocate debug buffer for vmm panic dump */
-	g_vmm_debug_buf = __get_free_pages(GFP_KERNEL | __GFP_ZERO, 2);
-	if (!g_vmm_debug_buf) {
-		result = -ENOMEM;
-		goto error_alloc_vmm;
-	}
-
-	dump = (struct deadloop_dump *)g_vmm_debug_buf;
-	dump->version_of_this_struct = VMM_DUMP_VERSION;
-	dump->size_of_this_struct = sizeof(struct deadloop_dump);
-	dump->is_valid = false;
+	if(vmm_signature == EVMM_SIGNATURE_VMM) {
+		/* allocate debug buffer for vmm panic dump */
+		g_vmm_debug_buf = __get_free_pages(GFP_KERNEL | __GFP_ZERO, 2);
+		if (!g_vmm_debug_buf) {
+			result = -ENOMEM;
+			goto error_alloc_vmm;
+		}
 
-	/* shared the buffer to vmm by VMCALL */
-	result = trusty_vmm_dump_init(dump);
-	if (result < 0) {
-		dev_err(&pdev->dev,
-			"failed to share the dump buffer to VMM\n");
-		goto error_vmm_panic_notifier;
-	}
+		dump = (struct deadloop_dump *)g_vmm_debug_buf;
+		dump->version_of_this_struct = VMM_DUMP_VERSION;
+		dump->size_of_this_struct = sizeof(struct deadloop_dump);
+		dump->is_valid = false;
+
+		/* shared the buffer to vmm by VMCALL */
+		result = trusty_vmm_dump_init(dump);
+		if (result < 0) {
+			dev_err(&pdev->dev,
+				"failed to share the dump buffer to VMM\n");
+			goto error_vmm_panic_notifier;
+		}
 
-	/* register the panic notifier for vmm */
-	result = atomic_notifier_chain_register(&panic_notifier_list,
-				&trusty_vmm_panic_nb);
-	if (result < 0) {
-		dev_err(&pdev->dev,
-			"failed to register vmm panic notifier\n");
-		goto error_vmm_panic_notifier;
+		/* register the panic notifier for vmm */
+		result = atomic_notifier_chain_register(&panic_notifier_list,
+					&trusty_vmm_panic_nb);
+		if (result < 0) {
+			dev_err(&pdev->dev,
+				"failed to register vmm panic notifier\n");
+			goto error_vmm_panic_notifier;
+		}
 	}
 
 	platform_set_drvdata(pdev, s);
diff --git a/drivers/trusty/trusty-virtio.c b/drivers/trusty/trusty-virtio.c
index 65c3b9c..fc82ecc9 100644
--- a/drivers/trusty/trusty-virtio.c
+++ b/drivers/trusty/trusty-virtio.c
@@ -627,7 +627,7 @@ static int trusty_virtio_probe(struct platform_device *pdev)
 	int ret;
 	struct trusty_ctx *tctx;
 
-	ret = trusty_check_cpuid();
+	ret = trusty_check_cpuid(NULL);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "CPUID Error: Cannot find eVmm in trusty driver initialization!");
 		return -EINVAL;
diff --git a/drivers/trusty/trusty.c b/drivers/trusty/trusty.c
index 647031d..8e7e715 100644
--- a/drivers/trusty/trusty.c
+++ b/drivers/trusty/trusty.c
@@ -524,7 +524,7 @@ static int trusty_probe(struct platform_device *pdev)
 	struct trusty_state *s;
 	struct device_node *node = pdev->dev.of_node;
 
-	ret = trusty_check_cpuid();
+	ret = trusty_check_cpuid(NULL);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "CPUID Error: Cannot find eVmm in trusty driver initialization!");
 		return -EINVAL;
diff --git a/include/linux/trusty/trusty.h b/include/linux/trusty/trusty.h
index 7dc2dad..4c9beaf 100644
--- a/include/linux/trusty/trusty.h
+++ b/include/linux/trusty/trusty.h
@@ -70,19 +70,23 @@ int trusty_call32_mem_buf(struct device *dev, u32 smcnr,
 			  pgprot_t pgprot);
 
 /* CPUID leaf 0x3 is used because eVMM will trap this leaf.*/
-#define EVMM_RUNNING_SIGNATURE_CORP 0x43544E49  /* "INTC", edx */
-#define EVMM_RUNNING_SIGNATURE_MON  0x4D4D5645  /* "XMON", ecx */
+#define EVMM_SIGNATURE_CORP 0x43544E49  /* "INTC", edx */
+#define EVMM_SIGNATURE_VMM  0x4D4D5645  /* "EVMM", ecx */
 
-static inline int trusty_check_cpuid(void)
+static inline int trusty_check_cpuid(u32 *vmm_signature)
 {
 	u32 eax, ebx, ecx, edx;
 
 	cpuid(3, &eax, &ebx, &ecx, &edx);
-	if ((ecx != EVMM_RUNNING_SIGNATURE_MON) ||
-	    (edx != EVMM_RUNNING_SIGNATURE_CORP)) {
+	if ((ecx != EVMM_SIGNATURE_VMM) ||
+	    (edx != EVMM_SIGNATURE_CORP)) {
 		return -EINVAL;
 	}
 
+	if(vmm_signature) {
+		*vmm_signature = ecx;
+	}
+
 	return 0;
 }
 #endif
-- 
1.7.5.4

