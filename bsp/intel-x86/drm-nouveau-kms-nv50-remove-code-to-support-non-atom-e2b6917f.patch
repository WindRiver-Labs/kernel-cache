From 5936c0a4e5e2d187195e17f59f67e225d9f8743a Mon Sep 17 00:00:00 2001
From: Ben Skeggs <bskeggs@redhat.com>
Date: Fri, 4 Nov 2016 17:20:36 +1000
Subject: [PATCH 1854/4301] drm/nouveau/kms/nv50: remove code to support
 non-atomic connector properties

commit c2d926aacc7eeaf39edbd0ab8d5fba33acbb168d upstream

Made completely unreachable by atomic commits.

Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
---
 drivers/gpu/drm/nouveau/nouveau_connector.c |   27 +++++++++------------------
 drivers/gpu/drm/nouveau/nouveau_connector.h |    5 -----
 drivers/gpu/drm/nouveau/nouveau_crtc.h      |    2 --
 drivers/gpu/drm/nouveau/nv50_display.c      |    2 --
 4 files changed, 9 insertions(+), 27 deletions(-)

diff --git a/drivers/gpu/drm/nouveau/nouveau_connector.c b/drivers/gpu/drm/nouveau/nouveau_connector.c
index 790a9ac2..5df3908 100644
--- a/drivers/gpu/drm/nouveau/nouveau_connector.c
+++ b/drivers/gpu/drm/nouveau/nouveau_connector.c
@@ -767,7 +767,6 @@ nouveau_connector_set_property(struct drm_connector *connector,
 	struct nouveau_connector *nv_connector = nouveau_connector(connector);
 	struct nouveau_encoder *nv_encoder = nv_connector->detected_encoder;
 	struct drm_encoder *encoder = to_drm_encoder(nv_encoder);
-	struct nouveau_crtc *nv_crtc = NULL;
 	int ret;
 
 	if (connector->dev->mode_config.funcs->atomic_commit)
@@ -784,24 +783,17 @@ nouveau_connector_set_property(struct drm_connector *connector,
 	}
 
 	nv_connector->scaling_mode = asyc->scaler.mode;
-	nv_connector->underscan = asyc->scaler.underscan.mode;
-	nv_connector->underscan_hborder = asyc->scaler.underscan.hborder;
-	nv_connector->underscan_vborder = asyc->scaler.underscan.vborder;
 	nv_connector->dithering_mode = asyc->dither.mode;
-	nv_connector->dithering_depth = asyc->dither.depth;
 
-	if (connector->encoder && connector->encoder->crtc)
-		nv_crtc = nouveau_crtc(connector->encoder->crtc);
-	if (!nv_crtc)
-		return 0;
-
-	nv_crtc->vibrant_hue = asyc->procamp.vibrant_hue - 90;
-	nv_crtc->color_vibrance = asyc->procamp.color_vibrance - 100;
-
-	ret = drm_crtc_helper_set_mode(&nv_crtc->base, &nv_crtc->base.mode,
-				       nv_crtc->base.x, nv_crtc->base.y, NULL);
-	if (!ret)
-		return -EINVAL;
+	if (connector->encoder && connector->encoder->crtc) {
+		ret = drm_crtc_helper_set_mode(connector->encoder->crtc,
+					      &connector->encoder->crtc->mode,
+					       connector->encoder->crtc->x,
+					       connector->encoder->crtc->y,
+					       NULL);
+		if (!ret)
+			return -EINVAL;
+	}
 
 	return 0;
 }
@@ -1354,7 +1346,6 @@ nouveau_connector_create(struct drm_device *dev, int index)
 		break;
 	default:
 		nv_connector->dithering_mode = DITHERING_MODE_AUTO;
-		nv_connector->dithering_depth = DITHERING_DEPTH_AUTO;
 		break;
 	}
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_connector.h b/drivers/gpu/drm/nouveau/nouveau_connector.h
index 77bb69ec..096983c 100644
--- a/drivers/gpu/drm/nouveau/nouveau_connector.h
+++ b/drivers/gpu/drm/nouveau/nouveau_connector.h
@@ -46,12 +46,7 @@ struct nouveau_connector {
 	struct drm_dp_aux aux;
 
 	int dithering_mode;
-	int dithering_depth;
 	int scaling_mode;
-	bool scaling_full;
-	int underscan;
-	u32 underscan_hborder;
-	u32 underscan_vborder;
 
 	struct nouveau_encoder *detected_encoder;
 	struct edid *edid;
diff --git a/drivers/gpu/drm/nouveau/nouveau_crtc.h b/drivers/gpu/drm/nouveau/nouveau_crtc.h
index e4e3857..050fcf3 100644
--- a/drivers/gpu/drm/nouveau/nouveau_crtc.h
+++ b/drivers/gpu/drm/nouveau/nouveau_crtc.h
@@ -38,8 +38,6 @@ struct nouveau_crtc {
 	uint32_t dpms_saved_fp_control;
 	uint32_t fp_users;
 	int saturation;
-	int color_vibrance;
-	int vibrant_hue;
 	int sharpness;
 	int last_dpms;
 
diff --git a/drivers/gpu/drm/nouveau/nv50_display.c b/drivers/gpu/drm/nouveau/nv50_display.c
index c605348..8d48ee4 100644
--- a/drivers/gpu/drm/nouveau/nv50_display.c
+++ b/drivers/gpu/drm/nouveau/nv50_display.c
@@ -2595,8 +2595,6 @@ nv50_crtc_create(struct drm_device *dev, int index)
 		return -ENOMEM;
 
 	head->base.index = index;
-	head->base.color_vibrance = 50;
-	head->base.vibrant_hue = 0;
 	for (i = 0; i < 256; i++) {
 		head->base.lut.r[i] = i << 8;
 		head->base.lut.g[i] = i << 8;
-- 
1.7.5.4

