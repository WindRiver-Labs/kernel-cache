From b76d60cf3619fd119d2bc3c2545cc9e4ae52a408 Mon Sep 17 00:00:00 2001
From: Hardik T Shah <hardik.t.shah@intel.com>
Date: Wed, 9 Mar 2016 22:17:19 +0530
Subject: [PATCH 3837/4301] SoundWire: Add API to alloc and release stream
 tag.

commit 127e21a1a472abcef6892aad29ac03de898d03e0 from
git://git@github.com:01org/linux-intel-4.9.git

This patch add the bus driver API to allocate and de-allocate
stream tag. Stream tag is a unique stream identifier for each
audio stream between master and slave. Ports of the masters
and slaves part of the same stream has unique and same stream
tag. All ports of master and slaves belonging to same stream tag
get enabled and disabled together.

Change-Id: Ia59ce7f8bfb4e81125cc5334ba4529b78b8afdd4
Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
---
 drivers/sdw/sdw.c |   99 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 99 insertions(+), 0 deletions(-)

diff --git a/drivers/sdw/sdw.c b/drivers/sdw/sdw.c
index 0997e65..884d60e 100644
--- a/drivers/sdw/sdw.c
+++ b/drivers/sdw/sdw.c
@@ -1185,6 +1185,105 @@ int sdw_register_slave_capabilities(struct sdw_slave *sdw,
 }
 EXPORT_SYMBOL_GPL(sdw_register_slave_capabilities);
 
+static int sdw_get_stream_tag(char *key, int *stream_tag)
+{
+	int i;
+	int ret = -EINVAL;
+	struct sdw_runtime *sdw_rt;
+	struct sdw_stream_tag *stream_tags = sdw_core.stream_tags;
+
+	/* If stream tag is already allocated return that after incrementing
+	 * reference count. This is only possible if key is provided.
+	 */
+	mutex_lock(&sdw_core.core_lock);
+	if (!key)
+		goto key_check_not_required;
+	for (i = 0; i < SDW_NUM_STREAM_TAGS; i++) {
+		if (!(strcmp(stream_tags[i].key, key))) {
+			stream_tags[i].ref_count++;
+			*stream_tag = stream_tags[i].stream_tag;
+			mutex_unlock(&sdw_core.core_lock);
+			return 0;
+		}
+	}
+key_check_not_required:
+	for (i = 0; i < SDW_NUM_STREAM_TAGS; i++) {
+		if (!stream_tags[i].ref_count) {
+			stream_tags[i].ref_count++;
+			*stream_tag = stream_tags[i].stream_tag;
+			mutex_init(&stream_tags[i].stream_lock);
+			sdw_rt = kzalloc(sizeof(struct sdw_runtime),
+					GFP_KERNEL);
+			INIT_LIST_HEAD(&sdw_rt->slv_rt_list);
+			INIT_LIST_HEAD(&sdw_rt->mstr_rt_list);
+			sdw_rt->stream_state = SDW_STATE_INIT_STREAM_TAG;
+			stream_tags[i].sdw_rt = sdw_rt;
+			if (!stream_tags[i].sdw_rt) {
+				stream_tags[i].ref_count--;
+				ret = -ENOMEM;
+				goto out;
+			}
+			if (key)
+				strlcpy(stream_tags[i].key, key,
+					SDW_MAX_STREAM_TAG_KEY_SIZE);
+			mutex_unlock(&sdw_core.core_lock);
+			return 0;
+		}
+	}
+	mutex_unlock(&sdw_core.core_lock);
+out:
+	return ret;
+}
+
+void sdw_release_stream_tag(int stream_tag)
+{
+	int i;
+	struct sdw_stream_tag *stream_tags = sdw_core.stream_tags;
+
+	mutex_lock(&sdw_core.core_lock);
+	for (i = 0; i < SDW_NUM_STREAM_TAGS; i++) {
+		if (stream_tag == stream_tags[i].stream_tag) {
+			stream_tags[i].ref_count--;
+			if (stream_tags[i].ref_count == 0) {
+				kfree(stream_tags[i].sdw_rt);
+				memset(stream_tags[i].key, 0x0,
+					SDW_MAX_STREAM_TAG_KEY_SIZE);
+			}
+		}
+	}
+	mutex_unlock(&sdw_core.core_lock);
+}
+EXPORT_SYMBOL_GPL(sdw_release_stream_tag);
+
+/**
+ * sdw_alloc_stream_tag: Assign the stream tag for the unique streams
+ *			between master and slave device.
+ *			Normally master master will request for the
+ *			stream tag for the stream between master
+ *			and slave device. It programs the same stream
+ *			tag to the slave device. Stream tag is unique
+ *			for all the streams between masters and slave
+ *			across SoCs.
+ * @guid: Group of the device port. All the ports of the device with
+ *			part of same stream will have same guid.
+ *
+ * @stream:tag: Stream tag returned by bus driver.
+ */
+int sdw_alloc_stream_tag(char *guid, int *stream_tag)
+{
+	int ret = 0;
+
+	ret = sdw_get_stream_tag(guid, stream_tag);
+	if (ret) {
+		pr_err("Stream tag assignment failed\n");
+		goto out;
+	}
+
+out:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(sdw_alloc_stream_tag);
+
 static void sdw_exit(void)
 {
 	device_unregister(&sdw_slv);
-- 
1.7.5.4

