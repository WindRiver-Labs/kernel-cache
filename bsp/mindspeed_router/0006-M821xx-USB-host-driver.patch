From 3c98d1c76e377d6b5a808da84b32406efbe04c78 Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 30 Oct 2008 20:59:22 +0800
Subject: [PATCH] M821xx USB host driver.

USB host driver on mindspeed router board.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 drivers/usb/Kconfig            |    1 +
 drivers/usb/host/ehci-hcd.c    |    7 +-
 drivers/usb/host/ehci-m821xx.c |  273 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 280 insertions(+), 1 deletions(-)
 create mode 100644 drivers/usb/host/ehci-m821xx.c

diff --git a/drivers/usb/Kconfig b/drivers/usb/Kconfig
index 3265afe..cbbf163 100644
--- a/drivers/usb/Kconfig
+++ b/drivers/usb/Kconfig
@@ -56,6 +56,7 @@ config USB_ARCH_HAS_EHCI
 	default y if SOC_AU1200
 	default y if ARCH_IXP4XX
 	default y if ARCH_OMAP34XX
+	default y if ARCH_M821XX
 	default PCI
 
 # ARM SA1111 chips have a non-PCI based "OHCI-compatible" USB host interface.
diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index 0740359..3275124 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -1000,7 +1000,7 @@ MODULE_DESCRIPTION (DRIVER_INFO);
 MODULE_AUTHOR (DRIVER_AUTHOR);
 MODULE_LICENSE ("GPL");
 
-#ifdef CONFIG_PCI
+#if defined(CONFIG_PCI) && !defined(CONFIG_ARCH_M821XX)
 #include "ehci-pci.c"
 #define	PCI_DRIVER		ehci_pci_driver
 #endif
@@ -1020,6 +1020,11 @@ MODULE_LICENSE ("GPL");
 #define	PLATFORM_DRIVER		ehci_hcd_omap_driver
 #endif
 
+#if defined(CONFIG_ARCH_M821XX)
+#include "ehci-m821xx.c"
+#define	PLATFORM_DRIVER		ehci_hcd_m821xx_driver
+#endif
+
 #ifdef CONFIG_PPC_PS3
 #include "ehci-ps3.c"
 #define	PS3_SYSTEM_BUS_DRIVER	ps3_ehci_driver
diff --git a/drivers/usb/host/ehci-m821xx.c b/drivers/usb/host/ehci-m821xx.c
new file mode 100644
index 0000000..c3ccd25
--- /dev/null
+++ b/drivers/usb/host/ehci-m821xx.c
@@ -0,0 +1,273 @@
+/*
+ *  linux/drivers/usb/host/ehci-m821xx.c
+ *
+ *  Copyright (C) Mindspeed Technologies
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/platform_device.h>
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+#include <linux/usb.h>
+
+#include <asm/irq.h>
+#include <asm/sizes.h>
+
+/*-------------------------------------------------------------------------*/
+
+static void m821xx_start_ehc(struct platform_device *pdev)
+{
+	dev_dbg(&pdev->dev, "Starting M821xx EHCI USB Controller\n");
+
+	/* Enable Clock to USB Controller */
+	if (pdev->id == 1) {
+		/* Enable Clock to USB Port 0 */
+		writel(readl(COMCERTO_CLK_CLK_PWR_DWN) & ~USB0_AHBCLK_PD,
+				COMCERTO_CLK_CLK_PWR_DWN);
+		/* de-activate USB port 0 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) | USB0_RST,
+				COMCERTO_BLOCK_RESET_REG);
+		/* de-activate USB phy 0 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) | USB0_PHY_RST,
+				COMCERTO_BLOCK_RESET_REG);
+		/* taking usb phy out of suspend */
+		/* writel(readl(COMCERTO_GPIO_GENERAL_CONTOL_REG) & 0x2,
+			COMCERTO_GPIO_GENERAL_CONTOL_REG);
+		*/
+
+	} else if (pdev->id == 2) {
+		/* Enable Clock to USB Port 1 */
+		writel(readl(COMCERTO_CLK_CLK_PWR_DWN) & ~USB1_AHBCLK_PD,
+				COMCERTO_CLK_CLK_PWR_DWN);
+		/* de-activate USB port 1 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) | USB1_RST,
+				COMCERTO_BLOCK_RESET_REG);
+		/* de-activate USB phy 1 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) | USB1_PHY_RST,
+				COMCERTO_BLOCK_RESET_REG);
+		/* taking usb phy out of suspend */
+		/* writel(readl(COMCERTO_GPIO_GENERAL_CONTOL_REG) & ~0x8,
+			COMCERTO_GPIO_GENERAL_CONTOL_REG);
+		*/
+	}
+}
+
+static void m821xx_stop_ehc(struct platform_device *pdev)
+{
+	dev_dbg(&pdev->dev, "Stopping M821xx EHCI USB Controller\n");
+
+	/* Disable Clock to USB Controller */
+	if (pdev->id == 1) {
+		/* disable Clock to USB Port 0 */
+		writel(readl(COMCERTO_CLK_CLK_PWR_DWN) | USB0_AHBCLK_PD,
+				COMCERTO_CLK_CLK_PWR_DWN);
+		/* activate USB port 0 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) & ~USB0_RST,
+				COMCERTO_BLOCK_RESET_REG);
+		/* activate USB phy 0 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) & ~USB0_PHY_RST,
+				COMCERTO_BLOCK_RESET_REG);
+	} else if (pdev->id == 2) {
+		/* disable Clock to USB Port 1 */
+		writel(readl(COMCERTO_CLK_CLK_PWR_DWN) | USB1_AHBCLK_PD,
+				COMCERTO_CLK_CLK_PWR_DWN);
+		/* activate USB port 1 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) & ~USB1_RST,
+				COMCERTO_BLOCK_RESET_REG);
+		/* activate USB phy 1 reset */
+		writel(readl(COMCERTO_BLOCK_RESET_REG) & ~USB1_PHY_RST,
+				COMCERTO_BLOCK_RESET_REG);
+	}
+}
+
+/*-------------------------------------------------------------------------*/
+
+/* configure so an HC device and id are always provided */
+/* always called with process context; sleeping is OK */
+
+/**
+ * usb_ehci_m821xx_probe - initialize M821xx HCDs
+ * Context: !in_interrupt()
+ *
+ * Allocates basic resources for this USB host controller, and
+ * then invokes the start() method for the HCD associated with it
+ * through the hotplug entry's driver_data.
+ *
+ */
+int usb_ehci_m821xx_probe(const struct hc_driver *driver,
+		struct platform_device *pdev)
+{
+	int retval;
+	struct usb_hcd *hcd;
+	struct ehci_hcd *ehci;
+
+	if (pdev->num_resources != 2) {
+		dev_err(&pdev->dev, "HCD %s probe: invalid num_resources: %i\n",
+				dev_name(&pdev->dev), pdev->num_resources);
+		return -ENODEV;
+	}
+
+	if (pdev->resource[0].flags != IORESOURCE_MEM
+			|| pdev->resource[1].flags != IORESOURCE_IRQ) {
+		dev_err(&pdev->dev, "HCD %s probe: invalid resource type\n",
+				dev_name(&pdev->dev));
+		return -ENODEV;
+	}
+
+	m821xx_start_ehc(pdev);
+
+	hcd = usb_create_hcd(driver, &pdev->dev, dev_name(&pdev->dev));
+	if (!hcd)
+		return -ENOMEM;
+
+	hcd->rsrc_start = pdev->resource[0].start;
+	hcd->rsrc_len = pdev->resource[0].end - pdev->resource[0].start + 1;
+
+	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len,
+				driver->description)) {
+		dev_dbg(&pdev->dev, "request_mem_region failed");
+		retval = -EBUSY;
+		goto err1;
+	}
+
+	hcd->regs = ioremap(hcd->rsrc_start, hcd->rsrc_len);
+	if (!hcd->regs) {
+		dev_dbg(&pdev->dev, "ioremap failed");
+		retval = -ENOMEM;
+		goto err2;
+	}
+
+	ehci = hcd_to_ehci(hcd);
+	ehci->caps = hcd->regs + 0x100;
+	ehci->regs = hcd->regs + 0x100 + \
+		     HC_LENGTH(readl(&ehci->caps->hc_capbase));
+	/* cache this readonly data; minimize chip reads */
+	ehci->hcs_params = readl(&ehci->caps->hcs_params);
+
+	hcd->has_tt = 1;
+
+	tdi_reset(ehci);
+	ehci_reset(ehci);
+	ehci->sbrn = 0x20;
+
+	retval = usb_add_hcd(hcd, pdev->resource[1].start, IRQF_SHARED);
+	if (retval == 0) {
+		platform_set_drvdata(pdev, hcd);
+		return retval;
+	}
+
+	m821xx_stop_ehc(pdev);
+	iounmap(hcd->regs);
+err2:
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+err1:
+	usb_put_hcd(hcd);
+	return retval;
+}
+
+/* may be called without controller electrically present */
+/* may be called with controller, bus, and devices active */
+
+/**
+ * usb_ehci_hcd_m821xx_remove - shutdown processing for M821xx-based HCDs
+ * @dev: USB Host Controller being removed
+ * Context: !in_interrupt()
+ *
+ * Reverses the effect of usb_ehci_hcd_m821xx_probe(), first invoking
+ * the HCD's stop() method.  It is always called from a thread
+ * context, normally "rmmod", "apmd", or something similar.
+ *
+ */
+void usb_ehci_m821xx_remove(struct usb_hcd *hcd, struct platform_device *pdev)
+{
+	usb_remove_hcd(hcd);
+	iounmap(hcd->regs);
+	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
+	usb_put_hcd(hcd);
+	m821xx_stop_ehc(pdev);
+	platform_set_drvdata(pdev, NULL);
+}
+
+/*-------------------------------------------------------------------------*/
+
+static const struct hc_driver ehci_m821xx_hc_driver = {
+	.description = hcd_name,
+	.product_desc = "M821xx EHCI",
+	.hcd_priv_size = sizeof(struct ehci_hcd),
+
+	/*
+	 * generic hardware linkage
+	 */
+	.irq = ehci_irq,
+	.flags = HCD_MEMORY | HCD_USB2,
+
+	/*
+	 * basic lifecycle operations
+	 */
+	.reset = ehci_init,
+	.start = ehci_run,
+	.stop = ehci_stop,
+
+	/*
+	 * managing i/o requests and associated device resources
+	 */
+	.urb_enqueue = ehci_urb_enqueue,
+	.urb_dequeue = ehci_urb_dequeue,
+	.endpoint_disable = ehci_endpoint_disable,
+
+	/*
+	 * scheduling support
+	 */
+	.get_frame_number = ehci_get_frame,
+
+	/*
+	 * root hub support
+	 */
+	.hub_status_data = ehci_hub_status_data,
+	.hub_control = ehci_hub_control,
+	.bus_suspend = ehci_bus_suspend,
+	.bus_resume  = ehci_bus_resume,
+	.relinquish_port  = ehci_relinquish_port,
+	.port_handed_over = ehci_port_handed_over,
+};
+
+/*-------------------------------------------------------------------------*/
+
+static int ehci_hcd_m821xx_drv_probe(struct platform_device *dev)
+{
+	pr_debug("In ehci_hcd_m821xx_drv_probe\n");
+
+	if (usb_disabled())
+		return -ENODEV;
+
+	return usb_ehci_m821xx_probe(&ehci_m821xx_hc_driver, dev);
+
+}
+
+static int ehci_hcd_m821xx_drv_remove(struct platform_device *dev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(dev);
+
+	usb_ehci_m821xx_remove(hcd, dev);
+
+	return 0;
+
+}
+
+static struct platform_driver ehci_hcd_m821xx_driver = {
+	.probe = ehci_hcd_m821xx_drv_probe,
+	.remove = ehci_hcd_m821xx_drv_remove,
+	.shutdown = usb_hcd_platform_shutdown,
+	/*.suspend      = ehci_hcd_m821xx_drv_suspend, */
+	/*.resume       = ehci_hcd_m821xx_drv_resume, */
+	.driver = {
+		.name = "m821xx-ehci",
+		.owner  = THIS_MODULE,
+	}
+};
+
+MODULE_ALIAS("platform:m821xx-ehci");
-- 
1.6.0.90.g436ed

