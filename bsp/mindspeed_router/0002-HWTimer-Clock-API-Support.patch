From a0b56c8ca5ba2cb044e8bb76ef90f91c2e5b368a Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 30 Oct 2008 20:59:17 +0800
Subject: [PATCH] HWTimer Clock API Support.

Implement a hwtimer hook to allow the clock API to function properly. The
hardware clock API is a simple API allowing hardware clocks capable of
generating periodic interrupts to register themselves with the kerenl, so
that other drivers can make use of these interrupts. This API is required
by Run-Time Analysis Tools.

Signed-off-by: Stanley Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-comcerto/comcerto-100.c              |   94 ++++++++++++++++++++
 arch/arm/mach-comcerto/comcerto-common.c           |    4 +-
 .../mach-comcerto/include/mach/comcerto-devices.h  |    1 +
 3 files changed, 98 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-comcerto/comcerto-100.c b/arch/arm/mach-comcerto/comcerto-100.c
index 3311a57..b722e77 100644
--- a/arch/arm/mach-comcerto/comcerto-100.c
+++ b/arch/arm/mach-comcerto/comcerto-100.c
@@ -38,6 +38,98 @@
 #include <asm/hardware/cache-l2x0.h>
 #endif
 
+#ifdef CONFIG_HWTIMER_HOOKS
+#include <linux/hwtimer.h>
+
+#define COMCERTO_HWTIMER_MIN_FREQ 10
+#define COMCERTO_HWTIMER_MAX_FREQ 8192
+#define COMCERTO_HWTIMER_DEF_FREQ 100
+
+static int comcerto_hwtimer_get_freq(void);
+static int comcerto_hwtimer_set_freq(int freq);
+static int comcerto_hwtimer_start(void);
+static int comcerto_hwtimer_stop(void);
+
+static DECLARE_HWTIMER_LOCK(comcerto_hwtimer_lock);
+
+static int comcerto_freq = COMCERTO_HWTIMER_DEF_FREQ;
+
+static struct hwtimer_data comcerto_hwtimer_data = {
+	.name       = "Comcerto hwtimer",
+	.desc       = "Comcerto on-chip timer2",
+	.def_freq   = COMCERTO_HWTIMER_DEF_FREQ,
+	.min_freq   = COMCERTO_HWTIMER_MIN_FREQ,
+	.max_freq   = COMCERTO_HWTIMER_MAX_FREQ
+};
+
+static struct hwtimer comcerto_hwtimer = {
+	.data       = &comcerto_hwtimer_data,
+	.set_freq   = comcerto_hwtimer_set_freq,
+	.get_freq   = comcerto_hwtimer_get_freq,
+	.start      = comcerto_hwtimer_start,
+	.stop       = comcerto_hwtimer_stop,
+	.lock       = &comcerto_hwtimer_lock,
+	.hook       = NULL,
+	.hook_data  = NULL
+};
+
+struct comcerto_timer comcerto_hwt = {
+	.timeout = 1000000/COMCERTO_HWTIMER_DEF_FREQ,		/* 10ms */
+	.thw = 0,
+	.hwt_p = &comcerto_hwtimer
+};
+
+static int comcerto_hwtimer_get_freq(void)
+{
+	return comcerto_freq;
+}
+
+static int comcerto_hwtimer_set_freq(int freq)
+{
+	unsigned long flags;
+
+	if ((freq < COMCERTO_HWTIMER_MIN_FREQ) || (freq > COMCERTO_HWTIMER_MAX_FREQ))
+		return -EINVAL;
+
+	spin_lock_irqsave(&comcerto_hwtimer_lock, flags);
+
+	comcerto_timer_stop(&comcerto_hwt);
+	comcerto_hwt.timeout = 1000000/freq;
+	comcerto_timer_start(&comcerto_hwt);
+
+	comcerto_freq = freq;
+
+	spin_unlock_irqrestore(&comcerto_hwtimer_lock, flags);
+	return 0;
+}
+
+static int comcerto_hwtimer_start(void)
+{
+	unsigned long flags;
+
+	/* Start timer */
+	spin_lock_irqsave(&comcerto_hwtimer_lock, flags);
+	comcerto_timer_start(&comcerto_hwt);
+	spin_unlock_irqrestore(&comcerto_hwtimer_lock, flags);
+
+	return 0;
+}
+
+static int comcerto_hwtimer_stop(void)
+{
+	unsigned long flags;
+
+	/* Stop timer */
+	spin_lock_irqsave(&comcerto_hwtimer_lock, flags);
+	comcerto_timer_stop(&comcerto_hwt);
+	spin_unlock_irqrestore(&comcerto_hwtimer_lock, flags);
+
+	return 0;
+}
+
+
+#endif
+
 struct irq_table {
 	unsigned int irq;
 	irq_flow_handler_t handle;
@@ -420,6 +512,8 @@ static void __init comcerto_timer_init(void)
 	/* Set and enable the system timer */
 	comcerto_timer1_set(COMCERTO_KERNEL_TIMER_VALUE);
 	comcerto_timer_enable(1);
+
+	register_hwtimer(&comcerto_hwtimer);
 }
 
 unsigned long comcerto_gettimeoffset(void)
diff --git a/arch/arm/mach-comcerto/comcerto-common.c b/arch/arm/mach-comcerto/comcerto-common.c
index 7f446c1..0522d1f 100644
--- a/arch/arm/mach-comcerto/comcerto-common.c
+++ b/arch/arm/mach-comcerto/comcerto-common.c
@@ -21,6 +21,7 @@
 #include <mach/hardware.h>
 #include <linux/io.h>
 #include <linux/spinlock.h>
+#include <linux/hwtimer.h>
 #include <mach/comcerto-devices.h>
 /*
  * HARDWARE TIMER
@@ -258,7 +259,8 @@ int timer_hw_handler(u8 id)
 
 		spin_unlock_irqrestore(&timer_lock, flags);
 
-		thw->t->func(thw->t->data);
+		if (thw->t->hwt_p->hook != NULL)
+			(thw->t->hwt_p->hook) (thw->t->hwt_p->hook_data);
 
 	} else {
 		spin_unlock_irqrestore(&timer_lock, flags);
diff --git a/arch/arm/mach-comcerto/include/mach/comcerto-devices.h b/arch/arm/mach-comcerto/include/mach/comcerto-devices.h
index f0a8de6..84eb4bf 100644
--- a/arch/arm/mach-comcerto/include/mach/comcerto-devices.h
+++ b/arch/arm/mach-comcerto/include/mach/comcerto-devices.h
@@ -76,6 +76,7 @@ struct comcerto_timer {
 	unsigned long data;
 	u8 flags;
 	unsigned long thw;
+	struct hwtimer *hwt_p;
 };
 
 
-- 
1.6.0.90.g436ed

