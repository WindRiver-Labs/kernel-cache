From a0ab7890414209da1a3466d61707a0b558cda92b Mon Sep 17 00:00:00 2001
From: Yang Wei <Wei.Yang@windriver.com>
Date: Thu, 29 May 2014 18:48:02 +0800
Subject: [PATCH 2/6] pci:drivers:altera: use GFP_ATOMIC instead of GFP_KERNEL

While executing lspci -x to read PCIE configuration space,
the following call trace is triggered.

BUG: sleeping function called from invalid context at
in_atomic(): 1, irqs_disabled(): 128, pid: 1014, name: lspci
3 locks held by lspci/1014:
(unwind_backtrace+0x0/0x104) from [<8068fb98>] (dump_stack+0x20/0x24)
(dump_stack+0x20/0x24) from [<80059fac>] (__might_sleep+0x130/0x134)
(__might_sleep+0x130/0x134) from [<80130104>] (kmem_cache_alloc_trace+0x158/0x268)
(kmem_cache_alloc_trace+0x158/0x268) from [<803bb644>] (tlp_cfg_dword_read+0x70/0x164)
(tlp_cfg_dword_read+0x70/0x164) from [<803bb9ac>] (altera_pcie_cfg_read+0x74/0xa0)
(altera_pcie_cfg_read+0x74/0xa0) from [<803a70c4>] (pci_user_read_config_dword+0x7c/0xb4)
(pci_user_read_config_dword+0x7c/0xb4) from [<803b12c0>] (pci_read_config+0x108/0x3ec)
(pci_read_config+0x108/0x3ec) from [<801a52dc>] (read+0xe0/0x1ec)
(read+0xe0/0x1ec) from [<8013dca4>] (vfs_read+0xb4/0x144)
(vfs_read+0xb4/0x144) from [<8013e000>] (sys_pread64+0x84/0x14c)
(sys_pread64+0x84/0x14c) from [<8000e7e0>] (ret_fast_syscall+0x0/0x48)

tlp_cfg_dword_read() invokes kzalloc with GFP_KERNEL flag,
it probably results in sleep, but this function is called
with irq disabled and in atomic like this.

sys_read()
       |
       + pci_read_config()
                 |
                 + pci_user_read_config_dword()
                 |
                 + raw_spin_lock_irq()
                 |
                 + dev->bus->ops->read() == tlp_cfg_dword_read()
                 |
                 + raw_spin_unlock_irq()

So we should use GFP_ATOMIC instead of GFP_KERNEL.

Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/pci/host/pci-altera.c |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/pci/host/pci-altera.c b/drivers/pci/host/pci-altera.c
index 5fd0cc7..843de5c 100644
--- a/drivers/pci/host/pci-altera.c
+++ b/drivers/pci/host/pci-altera.c
@@ -115,7 +115,7 @@ static int tlp_read_packet(struct altera_pcie *pcie, u32 *value)
 	struct tlp_rp_regpair_t *tlp_rp_regdata;
 
 	/* allocate tlp_rp_regdata */
-	tlp_rp_regdata = kzalloc(sizeof(struct tlp_rp_regpair_t), GFP_KERNEL);
+	tlp_rp_regdata = kzalloc(sizeof(struct tlp_rp_regpair_t), GFP_ATOMIC);
 	if (!tlp_rp_regdata) {
 		dev_err(pcie->dev, "out of memory !!!\n");
 		err = -ENOMEM;
@@ -180,7 +180,7 @@ static int tlp_cfg_dword_read(struct altera_pcie *pcie, u8 bus, u32 devfn,
 	}
 
 	/* allocate tlp_rp_regdata */
-	tlp_rp_regdata = kzalloc(sizeof(struct tlp_rp_regpair_t), GFP_KERNEL);
+	tlp_rp_regdata = kzalloc(sizeof(struct tlp_rp_regpair_t), GFP_ATOMIC);
 	if (!tlp_rp_regdata) {
 		dev_err(pcie->dev, "out of memory !!!\n");
 		return -ENOMEM;
@@ -236,7 +236,7 @@ static int tlp_cfg_dword_write(struct altera_pcie *pcie, u8 bus, u32 devfn,
 		return PCIBIOS_SET_FAILED;
 
 	/* allocate tlp_rp_regdata */
-	tlp_rp_regdata = kzalloc(sizeof(struct tlp_rp_regpair_t), GFP_KERNEL);
+	tlp_rp_regdata = kzalloc(sizeof(struct tlp_rp_regpair_t), GFP_ATOMIC);
 	if (!tlp_rp_regdata) {
 		dev_err(pcie->dev, "out of memory !!!\n");
 		return -ENOMEM;
-- 
1.7.5.4

