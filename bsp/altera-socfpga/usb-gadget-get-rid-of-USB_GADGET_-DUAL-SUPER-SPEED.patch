From b9b3cd4b72b66d22b56002b7ef7c4fe1f1bf66c8 Mon Sep 17 00:00:00 2001
From: Michal Nazarewicz <mina86@mina86.com>
Date: Fri, 24 Aug 2012 20:46:18 +0200
Subject: [PATCH 24/24] usb: gadget: get rid of USB_GADGET_{DUAL,SUPER}SPEED

commit 85b8614d722389202af298e1bf8a599c431fef19 upstream

This commit removes USB_GADGET_DUALSPEED and USB_GADGET_SUPERSPEED
Kconfig options.  Since now kernel allows many UDC drivers to be
compiled, those options may turn to no longer be valid.  For
instance, if someone decides to build UDC that supports super
speed and UDC that supports high speed only, the latter will be
"assumed" to support super speed since USB_GADGET_SUPERSPEED will
be selected by the former.

The test of whether CONFIG_USB_GADGET_*SPEED was defined was just
an optimisation which removed otherwise dead code (ie. if UDC is
not dual speed, there is no need to handle cases that can happen
if speed is high).  This commit removes those checks.
[
Intergrating this patch is to fix the following calltrace

Unable to handle kernel NULL pointer dereference at virtual address
00000000
pgd = 80004000
[00000000] *pgd=00000000
Internal error: Oops: 17 [#1] PREEMPT SMP ARM
Modules linked in: g_mass_storage
CPU: 0    Not tainted  (3.4.43-WR5.0.1.0_standard #1)
PC is at composite_setup+0x5c8/0xc04 [g_mass_storage]
LR is at console_unlock+0x264/0x284
pc : [<7f005630>]    lr : [<80025e8c>]    psr: 60030193
sp : 8081fcc8  ip : 60030193  fp : 8081fd24
r10: be981900  r9 : 00000000  r8 : 00000000
r7 : 00000000  r6 : bfa53878  r5 : be981f00  r4 : 7f007450
r3 : 00000003  r2 : 008f2000  r1 : 20030193  r0 : 0000003f
Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment
kernel
Control: 10c5387d  Table: 3e93004a  DAC: 00000015
Process swapper/0 (pid: 0, stack limit = 0x8081e2f0)
Stack: (0x8081fcc8 to 0x80820000)
fcc0:                   7f006ba0 bfa13824 bfa53878 00000000 beef9c00 be981f3c
fce0: 7f007420 bfa53878 bfa53aa0 8081e000 8081fd14 8081fd00 805e6714 bfa53810
fd00: bfa53aa0 bfa13800 bf15ec00 7f005068 413fc090 00000009 8081fd64 8081fd28
fd20: 8043a28c 7f005074 bfa53aa0 8081e000 8081fd54 8081fd40 805e6714 bf15ec00
fd40: bfa13800 bfa53810 00000000 bfa53aa0 413fc090 8082641c 8081fd8c 8081fd68
fd60: 804393f0 8043a1d8 00000000 bfa53810 bf15ec00 bfa13800 00000000 00000000
fd80: 8081fdac 8081fd90 80439938 8043937c 00a80000 bfa53810 00000010 000000a0
fda0: 8081fdbc 8081fdb0 80439a30 8043988c 8081fe34 8081fdc0 8042e4bc 804399b4
fdc0: 805e6714 4f543009 808409f4 808200c0 8070eb48 00000000 00000000 00000000
fde0: 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000
fe00: bfa53aa0 00000008 0015aad9 bf15f4c0 bf811a10 000000a0 00000000 00000000
fe20: 413fc090 8081e000 8081fe84 8081fe38 8009a000 8042ddb0 00022b77 80072770
fe40: 80856a0c bf8119c0 808572a4 80857290 00000000 00000000 8110b978 bf8119c0
fe60: bf811a10 bf15f4c0 000000a0 00000000 413fc090 808269e0 8081fea4 8081fe88
fe80: 8009a3c0 80099f54 80819938 bf8119c0 bf811a10 8081e000 8081febc 8081fea8
fea0: 8009d508 8009a380 000000a0 8081c11c 8081fed4 8081fec0 80099830 8009d440
fec0: 00000101 80827350 8081fefc 8081fed8 8000f7e4 8009980c 00000000 80826440
fee0: fee00100 8081ff20 8081ff54 8082b410 8081ff1c 8081ff00 80008508 8000f788
ff00: 8000fb58 8000fb5c 60030013 ffffffff 8081ff74 8081ff20 805e6e80 800084dc
ff20: ffffffed 8000fb20 008f2000 00000000 8081e000 80859248 8082641c 805ef4cc
ff40: 8082b410 413fc090 808269e0 8081ff74 8081ff78 8081ff68 8000fb58 8000fb5c
ff60: 60030013 ffffffff 8081ff9c 8081ff78 8000fed8 8000fb2c 00000002 ffffffff
ff80: 80859180 807fda94 81108580 00000000 8081ffb4 8081ffa0 805d24f8 8000fdd0
ffa0: 807fe164 80827168 8081fff4 8081ffb8 807d589c 805d2474 ffffffff ffffffff
ffc0: 807d532c 00000000 00000000 807fda94 00000000 10c5387d 80826418 807fda90
ffe0: 8082b404 0000406a 00000000 8081fff8 00008044 807d5598 00000000 00000000
[<7f005630>] (composite_setup+0x5c8/0xc04 [g_mass_storage]) from
[<8043a28c>] (s3c_hsotg_complete_setup+0xc0/0x3dc)
[<8043a28c>] (s3c_hsotg_complete_setup+0xc0/0x3dc) from
[<804393f0>] (s3c_hsotg_complete_request+0x80/0xc0)
[<804393f0>] (s3c_hsotg_complete_request+0x80/0xc0) from
[<80439938>] (s3c_hsotg_handle_outdone+0xb8/0xd0)
[<80439938>] (s3c_hsotg_handle_outdone+0xb8/0xd0) from
[<80439a30>] (s3c_hsotg_handle_rx+0x88/0x90)
[<80439a30>] (s3c_hsotg_handle_rx+0x88/0x90) from [<8042e4bc>]
(dwc2_handle_common_intr+0x718/0xacc)
[<8042e4bc>] (dwc2_handle_common_intr+0x718/0xacc) from
[<8009a000>] (handle_irq_event_percpu+0xb8/0x42c)
[<8009a000>] (handle_irq_event_percpu+0xb8/0x42c) from
[<8009a3c0>] (handle_irq_event+0x4c/0x6c)
[<8009a3c0>] (handle_irq_event+0x4c/0x6c) from [<8009d508>]
(handle_fasteoi_irq+0xd4/0x164)
[<8009d508>] (handle_fasteoi_irq+0xd4/0x164) from [<80099830>]
(generic_handle_irq+0x30/0x40)
[<80099830>] (generic_handle_irq+0x30/0x40) from [<8000f7e4>]
(handle_IRQ+0x68/0xbc)
[<8000f7e4>] (handle_IRQ+0x68/0xbc) from [<80008508>]
(gic_handle_irq+0x38/0x68)
[<80008508>] (gic_handle_irq+0x38/0x68) from [<805e6e80>]
(__irq_svc+0x40/0x70)
Exception stack(0x8081ff20 to 0x8081ff68)
ff20: ffffffed 8000fb20 008f2000 00000000 8081e000 80859248
8082641c 805ef4cc
ff40: 8082b410 413fc090 808269e0 8081ff74 8081ff78 8081ff68
8000fb58 8000fb5c
ff60: 60030013 ffffffff
[<805e6e80>] (__irq_svc+0x40/0x70) from [<8000fb5c>]
(default_idle+0x3c/0x40)
[<8000fb5c>] (default_idle+0x3c/0x40) from [<8000fed8>]
(cpu_idle+0x114/0x12c)
[<8000fed8>] (cpu_idle+0x114/0x12c) from [<805d24f8>]
(rest_init+0x90/0x94)
[<805d24f8>] (rest_init+0x90/0x94) from [<807d589c>]
(start_kernel+0x310/0x31c)
Code: 0a000002 e3530005 059a7010 159a7008 (e5973000)
]

Signed-off-by: Michal Nazarewicz <mina86@mina86.com>
Signed-off-by: Felipe Balbi <balbi@ti.com>
[Just a minor modification to rebase to current context]
Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
---
 drivers/usb/dwc3/Kconfig       |    2 --
 drivers/usb/gadget/Kconfig     |   29 -----------------------------
 drivers/usb/gadget/composite.c |    9 +--------
 drivers/usb/gadget/inode.c     |   15 ++++-----------
 drivers/usb/gadget/u_ether.c   |    7 -------
 drivers/usb/musb/Kconfig       |    1 -
 include/linux/usb/gadget.h     |   19 ++-----------------
 7 files changed, 7 insertions(+), 75 deletions(-)

diff --git a/drivers/usb/dwc3/Kconfig b/drivers/usb/dwc3/Kconfig
index d8f741f..2b994a6 100644
--- a/drivers/usb/dwc3/Kconfig
+++ b/drivers/usb/dwc3/Kconfig
@@ -2,8 +2,6 @@ config USB_DWC3
 	tristate "DesignWare USB3 DRD Core Support"
 	depends on (USB && USB_GADGET)
 	select USB_OTG_UTILS
-	select USB_GADGET_DUALSPEED
-	select USB_GADGET_SUPERSPEED
 	select USB_XHCI_PLATFORM
 	help
 	  Say Y or M here if your system has a Dual Role SuperSpeed
diff --git a/drivers/usb/gadget/Kconfig b/drivers/usb/gadget/Kconfig
index cbadaa5..1eed4f9 100644
--- a/drivers/usb/gadget/Kconfig
+++ b/drivers/usb/gadget/Kconfig
@@ -149,7 +149,6 @@ config USB_AT91
 
 config USB_ATMEL_USBA
 	tristate "Atmel USBA"
-	select USB_GADGET_DUALSPEED
 	depends on AVR32 || ARCH_AT91
 	help
 	  USBA is the integrated high-speed USB Device controller on
@@ -158,7 +157,6 @@ config USB_ATMEL_USBA
 config USB_GADGET_ARC
 	boolean "Freescale USB Device Controller"
 	depends on ARCH_MXC || ARCH_STMP3XXX || ARCH_MXS
-	select USB_GADGET_DUALSPEED
 	select USB_OTG_UTILS
 	help
 	   Some Freescale processors have a USBOTG controller,
@@ -183,7 +181,6 @@ config USB_ARC
 config USB_FSL_USB2
 	tristate "Freescale Highspeed USB DR Peripheral Controller"
 	depends on FSL_SOC || ARCH_MXC
-	select USB_GADGET_DUALSPEED
 	select USB_FSL_MPH_DR_OF if OF
 	help
 	   Some of Freescale PowerPC processors have a High Speed
@@ -199,7 +196,6 @@ config USB_FSL_USB2
 config USB_FUSB300
 	tristate "Faraday FUSB300 USB Peripheral Controller"
 	depends on !PHYS_ADDR_T_64BIT
-	select USB_GADGET_DUALSPEED
 	help
 	   Faraday usb device controller FUSB300 driver
 
@@ -247,7 +243,6 @@ config USB_PXA25X_SMALL
 
 config USB_R8A66597
 	tristate "Renesas R8A66597 USB Peripheral Controller"
-	select USB_GADGET_DUALSPEED
 	help
 	   R8A66597 is a discrete USB host and peripheral controller chip that
 	   supports both full and high speed USB 2.0 data transfers.
@@ -260,7 +255,6 @@ config USB_R8A66597
 config USB_RENESAS_USBHS_UDC
 	tristate 'Renesas USBHS controller'
 	depends on USB_RENESAS_USBHS
-	select USB_GADGET_DUALSPEED
 	help
 	   Renesas USBHS is a discrete USB host and peripheral controller chip
 	   that supports both full and high speed USB 2.0 data transfers.
@@ -317,7 +311,6 @@ config USB_S3C2410_DEBUG
 config USB_S3C_HSUDC
 	tristate "S3C2416, S3C2443 and S3C2450 USB Device Controller"
 	depends on ARCH_S3C24XX
-	select USB_GADGET_DUALSPEED
 	help
 	  Samsung's S3C2416, S3C2443 and S3C2450 is an ARM9 based SoC
 	  integrated with dual speed USB 2.0 device controller. It has
@@ -327,7 +320,6 @@ config USB_S3C_HSUDC
 
 config USB_MV_UDC
 	tristate "Marvell USB2.0 Device Controller"
-	select USB_GADGET_DUALSPEED
 	help
 	  Marvell Socs (including PXA and MMP series) include a high speed
 	  USB2.0 OTG controller, which can be configured as high speed or
@@ -341,7 +333,6 @@ config USB_MV_UDC
 config USB_GADGET_MUSB_HDRC
 	tristate "Inventra HDRC USB Peripheral (TI, ADI, ...)"
 	depends on USB_MUSB_HDRC
-	select USB_GADGET_DUALSPEED
 	help
 	  This OTG-capable silicon IP is used in dual designs including
 	  the TI DaVinci, OMAP 243x, OMAP 343x, TUSB 6010, and ADI Blackfin
@@ -350,7 +341,6 @@ config USB_GADGET_MUSB_HDRC
 	config USB_GADGET_DWC_HDRC
 	boolean "DesignWare USB Peripheral"
 	depends on DWC_OTG_MODE || DWC_DEVICE_ONLY
-	select USB_GADGET_DUALSPEED
 	select USB_GADGET_SELECTED
 	select USB_GADGET_DWC_OTG
 	help
@@ -368,7 +358,6 @@ config USB_GADGET_MUSB_HDRC
 
 config USB_M66592
 	tristate "Renesas M66592 USB Peripheral Controller"
-	select USB_GADGET_DUALSPEED
 	help
 	   M66592 is a discrete USB peripheral controller chip that
 	   supports both full and high speed USB 2.0 data transfers.
@@ -385,7 +374,6 @@ config USB_M66592
 config USB_AMD5536UDC
 	tristate "AMD5536 UDC"
 	depends on PCI
-	select USB_GADGET_DUALSPEED
 	help
 	   The AMD5536 UDC is part of the AMD Geode CS5536, an x86 southbridge.
 	   It is a USB Highspeed DMA capable USB device controller. Beside ep0
@@ -413,7 +401,6 @@ config USB_FSL_QE
 config USB_CI13XXX_PCI
 	tristate "MIPS USB CI13xxx PCI UDC"
 	depends on PCI
-	select USB_GADGET_DUALSPEED
 	help
 	  MIPS USB IP core family device controller
 	  Currently it only supports IP part number CI13412
@@ -424,7 +411,6 @@ config USB_CI13XXX_PCI
 
 config USB_NET2272
 	tristate "PLX NET2272"
-	select USB_GADGET_DUALSPEED
 	help
 	  PLX NET2272 is a USB peripheral controller which supports
 	  both full and high speed USB 2.0 data transfers.
@@ -448,7 +434,6 @@ config USB_NET2272_DMA
 config USB_NET2280
 	tristate "NetChip 228x"
 	depends on PCI
-	select USB_GADGET_DUALSPEED
 	help
 	   NetChip 2280 / 2282 is a PCI based USB peripheral controller which
 	   supports both full and high speed USB 2.0 data transfers.
@@ -479,7 +464,6 @@ config USB_LANGWELL
 	tristate "Intel Langwell USB Device Controller"
 	depends on PCI
 	depends on !PHYS_ADDR_T_64BIT
-	select USB_GADGET_DUALSPEED
 	help
 	   Intel Langwell USB Device Controller is a High-Speed USB
 	   On-The-Go device controller.
@@ -494,7 +478,6 @@ config USB_LANGWELL
 config USB_EG20T
 	tristate "Intel EG20T PCH/LAPIS Semiconductor IOH(ML7213/ML7831) UDC"
 	depends on PCI
-	select USB_GADGET_DUALSPEED
 	help
 	  This is a USB device driver for EG20T PCH.
 	  EG20T PCH is the platform controller hub that is used in Intel's
@@ -517,7 +500,6 @@ config USB_EG20T
 config USB_CI13XXX_MSM
 	tristate "MIPS USB CI13xxx for MSM"
 	depends on ARCH_MSM
-	select USB_GADGET_DUALSPEED
 	select USB_MSM_OTG
 	help
 	  MSM SoC has chipidea USB controller.  This driver uses
@@ -538,8 +520,6 @@ config USB_CI13XXX_MSM
 config USB_DUMMY_HCD
 	tristate "Dummy HCD (DEVELOPMENT)"
 	depends on USB=y || (USB=m && USB_GADGET=m)
-	select USB_GADGET_DUALSPEED
-	select USB_GADGET_SUPERSPEED
 	help
 	  This host controller driver emulates USB, looping all data transfer
 	  requests back to a USB "gadget driver" in the same host.  The host
@@ -564,15 +544,6 @@ config USB_DUMMY_HCD
 
 endchoice
 
-# Selected by UDC drivers that support high-speed operation.
-config USB_GADGET_DUALSPEED
-	bool
-
-# Selected by UDC drivers that support super-speed opperation
-config USB_GADGET_SUPERSPEED
-	bool
-	depends on USB_GADGET_DUALSPEED
-
 #
 # USB Gadget Drivers
 #
diff --git a/drivers/usb/gadget/composite.c b/drivers/usb/gadget/composite.c
index ccc99a2..90d33d6 100644
--- a/drivers/usb/gadget/composite.c
+++ b/drivers/usb/gadget/composite.c
@@ -1536,12 +1536,6 @@ composite_resume(struct usb_gadget *gadget)
 /*-------------------------------------------------------------------------*/
 
 static struct usb_gadget_driver composite_driver = {
-#ifdef CONFIG_USB_GADGET_SUPERSPEED
-	.max_speed	= USB_SPEED_SUPER,
-#else
-	.max_speed	= USB_SPEED_HIGH,
-#endif
-
 	.unbind		= composite_unbind,
 
 	.setup		= composite_setup,
@@ -1586,8 +1580,7 @@ int usb_composite_probe(struct usb_composite_driver *driver,
 		driver->iProduct = driver->name;
 	composite_driver.function =  (char *) driver->name;
 	composite_driver.driver.name = driver->name;
-	composite_driver.max_speed =
-		min_t(u8, composite_driver.max_speed, driver->max_speed);
+	composite_driver.max_speed = driver->max_speed;
 	composite = driver;
 	composite_gadget_bind = bind;
 
diff --git a/drivers/usb/gadget/inode.c b/drivers/usb/gadget/inode.c
index e58b164..ae13a10 100644
--- a/drivers/usb/gadget/inode.c
+++ b/drivers/usb/gadget/inode.c
@@ -828,7 +828,6 @@ ep_config (struct file *fd, const char __user *buf, size_t len, loff_t *ptr)
 		if (value == 0)
 			data->state = STATE_EP_ENABLED;
 		break;
-#ifdef	CONFIG_USB_GADGET_DUALSPEED
 	case USB_SPEED_HIGH:
 		/* fails if caller didn't provide that descriptor... */
 		ep->desc = &data->hs_desc;
@@ -836,7 +835,6 @@ ep_config (struct file *fd, const char __user *buf, size_t len, loff_t *ptr)
 		if (value == 0)
 			data->state = STATE_EP_ENABLED;
 		break;
-#endif
 	default:
 		DBG(data->dev, "unconnected, %s init abandoned\n",
 				data->name);
@@ -1324,7 +1322,6 @@ static const struct file_operations ep0_io_operations = {
  * Unrecognized ep0 requests may be handled in user space.
  */
 
-#ifdef	CONFIG_USB_GADGET_DUALSPEED
 static void make_qualifier (struct dev_data *dev)
 {
 	struct usb_qualifier_descriptor		qual;
@@ -1347,7 +1344,6 @@ static void make_qualifier (struct dev_data *dev)
 
 	memcpy (dev->rbuf, &qual, sizeof qual);
 }
-#endif
 
 static int
 config_buf (struct dev_data *dev, u8 type, unsigned index)
@@ -1427,7 +1423,6 @@ gadgetfs_setup (struct usb_gadget *gadget, const struct usb_ctrlrequest *ctrl)
 			dev->dev->bMaxPacketSize0 = dev->gadget->ep0->maxpacket;
 			req->buf = dev->dev;
 			break;
-#ifdef	CONFIG_USB_GADGET_DUALSPEED
 		case USB_DT_DEVICE_QUALIFIER:
 			if (!dev->hs_config)
 				break;
@@ -1437,7 +1432,6 @@ gadgetfs_setup (struct usb_gadget *gadget, const struct usb_ctrlrequest *ctrl)
 			break;
 		case USB_DT_OTHER_SPEED_CONFIG:
 			// FALLTHROUGH
-#endif
 		case USB_DT_CONFIG:
 			value = config_buf (dev,
 					w_value >> 8,
@@ -1763,11 +1757,6 @@ gadgetfs_suspend (struct usb_gadget *gadget)
 }
 
 static struct usb_gadget_driver gadgetfs_driver = {
-#ifdef	CONFIG_USB_GADGET_DUALSPEED
-	.max_speed	= USB_SPEED_HIGH,
-#else
-	.max_speed	= USB_SPEED_FULL,
-#endif
 	.function	= (char *) driver_desc,
 	.unbind		= gadgetfs_unbind,
 	.setup		= gadgetfs_setup,
@@ -1900,6 +1889,10 @@ dev_config (struct file *fd, const char __user *buf, size_t len, loff_t *ptr)
 
 	/* triggers gadgetfs_bind(); then we can enumerate. */
 	spin_unlock_irq (&dev->lock);
+	if (dev->hs_config)
+		gadgetfs_driver.max_speed = USB_SPEED_HIGH;
+	else
+		gadgetfs_driver.max_speed = USB_SPEED_FULL;
 	value = usb_gadget_probe_driver(&gadgetfs_driver, gadgetfs_bind);
 	if (value != 0) {
 		kfree (dev->buf);
diff --git a/drivers/usb/gadget/u_ether.c b/drivers/usb/gadget/u_ether.c
index 9a2a1ae..1de8ec0 100644
--- a/drivers/usb/gadget/u_ether.c
+++ b/drivers/usb/gadget/u_ether.c
@@ -83,17 +83,10 @@ struct eth_dev {
 
 #define DEFAULT_QLEN	2	/* double buffering by default */
 
-
-#ifdef CONFIG_USB_GADGET_DUALSPEED
-
 static unsigned qmult = 5;
 module_param(qmult, uint, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(qmult, "queue length multiplier at high/super speed");
 
-#else	/* full speed (low speed doesn't do bulk) */
-#define qmult		1
-#endif
-
 /* for dual-speed hardware, use deeper queues at high/super speed */
 static inline int qlen(struct usb_gadget *gadget)
 {
diff --git a/drivers/usb/musb/Kconfig b/drivers/usb/musb/Kconfig
index f70cab3..5d35287 100644
--- a/drivers/usb/musb/Kconfig
+++ b/drivers/usb/musb/Kconfig
@@ -11,7 +11,6 @@ config USB_MUSB_HDRC
 	select TWL4030_USB if MACH_OMAP_3430SDP
 	select TWL6030_USB if MACH_OMAP_4430SDP || MACH_OMAP4_PANDA
 	select USB_OTG_UTILS
-	select USB_GADGET_DUALSPEED
 	help
 	  Say Y here if your system has a dual role high speed USB
 	  controller based on the Mentor Graphics silicon IP.  Then
diff --git a/include/linux/usb/gadget.h b/include/linux/usb/gadget.h
index 9517466..d05b220 100644
--- a/include/linux/usb/gadget.h
+++ b/include/linux/usb/gadget.h
@@ -558,14 +558,7 @@ static inline struct usb_gadget *dev_to_usb_gadget(struct device *dev)
  */
 static inline int gadget_is_dualspeed(struct usb_gadget *g)
 {
-#ifdef CONFIG_USB_GADGET_DUALSPEED
-	/* runtime test would check "g->max_speed" ... that might be
-	 * useful to work around hardware bugs, but is mostly pointless
-	 */
-	return 1;
-#else
-	return 0;
-#endif
+	return g->max_speed >= USB_SPEED_HIGH;
 }
 
 /**
@@ -575,15 +568,7 @@ static inline int gadget_is_dualspeed(struct usb_gadget *g)
  */
 static inline int gadget_is_superspeed(struct usb_gadget *g)
 {
-#ifdef CONFIG_USB_GADGET_SUPERSPEED
-	/*
-	 * runtime test would check "g->max_speed" ... that might be
-	 * useful to work around hardware bugs, but is mostly pointless
-	 */
-	return 1;
-#else
-	return 0;
-#endif
+	return g->max_speed >= USB_SPEED_SUPER;
 }
 
 /**
-- 
1.7.5.4

