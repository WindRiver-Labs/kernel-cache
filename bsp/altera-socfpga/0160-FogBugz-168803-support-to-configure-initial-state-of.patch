From 31f7a25a534be4658be94f261f9b55c8deecba1c Mon Sep 17 00:00:00 2001
From: Matthew Gerlach <mgerlach@altera.com>
Date: Mon, 18 Nov 2013 13:21:13 -0800
Subject: [PATCH 160/248] FogBugz #168803: support to configure initial state
 of bridges

This change adds support to the Altera fpga2sdram and hps2fgpa bridge
drivers for a new optional device tree property, init-val. This property
configures the driver to enable or disable the bridge when instantiated.
If the property does not exist, the driver will leave the bridge in
its current state.

[Original patch taken from
git://git.rocketboards.org/linux-socfpga.git socfpga-3.14]

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
Signed-off-by: Matthew Gerlach <mgerlach@altera.com>
---
 .../bindings/fpga/altera-fpga2sdram-bridge.txt     |  6 +++++
 .../bindings/fpga/altera-hps2fpga-bridge.txt       |  6 +++++
 drivers/misc/fpga-bridge/altera-fpga2sdram.c       | 29 +++++++++++++++++++---
 drivers/misc/fpga-bridge/altera-hps2fpga.c         | 28 ++++++++++++++++++---
 4 files changed, 63 insertions(+), 6 deletions(-)

diff --git a/Documentation/devicetree/bindings/fpga/altera-fpga2sdram-bridge.txt b/Documentation/devicetree/bindings/fpga/altera-fpga2sdram-bridge.txt
index ce7184b0..2b6c37b 100644
--- a/Documentation/devicetree/bindings/fpga/altera-fpga2sdram-bridge.txt
+++ b/Documentation/devicetree/bindings/fpga/altera-fpga2sdram-bridge.txt
@@ -37,6 +37,11 @@ Optional properties:
 	/sys/class/fpga-bridge.
 	Default is br<device#> if this is not specified
 
+    - init-val :0 if driver should disable bridge at startup
+		1 if driver should enable bridge at startup
+		driver leaves bridge in current state if property not specified
+
+
 Example:
 	fpga2sdram_br: fpgabridge@3 {
 		compatible = "altr,socfpga-fpga2sdram-bridge";
@@ -44,4 +49,5 @@ Example:
 		read-ports-mask = <3>;
 		write-ports-mask = <3>;
 		cmd-ports-mask = <0xd>;
+		init-val = <0>;
 	};
diff --git a/Documentation/devicetree/bindings/fpga/altera-hps2fpga-bridge.txt b/Documentation/devicetree/bindings/fpga/altera-hps2fpga-bridge.txt
index 6b365ef..d9eb0a7 100644
--- a/Documentation/devicetree/bindings/fpga/altera-hps2fpga-bridge.txt
+++ b/Documentation/devicetree/bindings/fpga/altera-hps2fpga-bridge.txt
@@ -19,17 +19,23 @@ Optional properties:
   - label : name that you want this bridge to show up as under
 	/sys/class/fpga-bridge.  Default is br<device#> if this is not specified
 
+  - init-val : 	0 if driver should disable bridge at startup
+		1 if driver should enable bridge at startup
+		driver leaves bridge in current state if property not specified
+
 Example:
 	hps_fpgabridge0: fpgabridge@0 {
 		compatible = "altr,socfpga-hps2fpga-bridge";
 		label = "hps2fpga";
 		clocks = <&l4_main_clk>;
+		init-val = <1>;
 	};
 
 	hps_fpgabridge1: fpgabridge@1 {
 		compatible = "altr,socfpga-lwhps2fpga-bridge";
 		label = "lwhps2fpga";
 		clocks = <&l4_main_clk>;
+		init-val = <0>;
 	};
 
 	hps_fpgabridge2: fpgabridge@2 {
diff --git a/drivers/misc/fpga-bridge/altera-fpga2sdram.c b/drivers/misc/fpga-bridge/altera-fpga2sdram.c
index 11a7184..d12c363 100644
--- a/drivers/misc/fpga-bridge/altera-fpga2sdram.c
+++ b/drivers/misc/fpga-bridge/altera-fpga2sdram.c
@@ -59,9 +59,9 @@ static int alt_fpga2sdram_enable_show(struct fpga_bridge *bridge)
 	return ((value & priv->mask) == priv->mask);
 }
 
-static void alt_fpga2sdram_enable_set(struct fpga_bridge *bridge, bool enable)
+static inline void _alt_fpga2sdram_enable_set(struct alt_fpga2sdram_data *priv,
+	bool enable)
 {
-	struct alt_fpga2sdram_data *priv = bridge->priv;
 	int value;
 
 	if (enable)
@@ -72,6 +72,10 @@ static void alt_fpga2sdram_enable_set(struct fpga_bridge *bridge, bool enable)
 	regmap_update_bits(priv->sdrctl, ALT_SDR_CTL_FPGAPORTRST_OFST,
 			   priv->mask, value);
 }
+static void alt_fpga2sdram_enable_set(struct fpga_bridge *bridge, bool enable)
+{
+	_alt_fpga2sdram_enable_set(bridge->priv, enable);
+}
 
 struct prop_map {
 	char *prop_name;
@@ -125,6 +129,7 @@ static int alt_fpga_bridge_probe(struct platform_device *pdev)
 {
 	struct alt_fpga2sdram_data *priv;
 	struct alt_fpga2sdram_data *data;
+	uint32_t init_val;
 	const struct of_device_id *of_id = of_match_device(altera_fpga_of_match,
 						     &pdev->dev);
 	int ret = 0;
@@ -162,8 +167,26 @@ static int alt_fpga_bridge_probe(struct platform_device *pdev)
 		return ret;
 	}
 
-	return register_fpga_bridge(pdev, &altera_fpga2sdram_br_ops,
+	ret = register_fpga_bridge(pdev, &altera_fpga2sdram_br_ops,
 				    priv->name, priv);
+
+	if (!ret)
+		return ret;
+
+	if (of_property_read_u32(priv->np, "init-val", &init_val))
+		dev_info(&priv->pdev->dev, "init-val not specified\n");
+	else if (init_val > 1)
+		dev_warn(&priv->pdev->dev, "invalid init-val %u > 1\n",
+			init_val);
+	else {
+		dev_info(&priv->pdev->dev,
+			"%s bridge\n",
+			(init_val ? "enabling" : "disabling"));
+
+		_alt_fpga2sdram_enable_set(priv, init_val);
+	}
+
+	return ret;
 }
 
 static int alt_fpga_bridge_remove(struct platform_device *pdev)
diff --git a/drivers/misc/fpga-bridge/altera-hps2fpga.c b/drivers/misc/fpga-bridge/altera-hps2fpga.c
index 5fce8a1..072a3a5 100644
--- a/drivers/misc/fpga-bridge/altera-hps2fpga.c
+++ b/drivers/misc/fpga-bridge/altera-hps2fpga.c
@@ -63,9 +63,9 @@ static int alt_hps2fpga_enable_show(struct fpga_bridge *bridge)
 	return ((value & priv->reset_mask) == 0);
 }
 
-static void alt_hps2fpga_enable_set(struct fpga_bridge *bridge, bool enable)
+static inline void _alt_hps2fpga_enable_set(struct altera_hps2fpga_data *priv,
+	 bool enable)
 {
-	struct altera_hps2fpga_data *priv = bridge->priv;
 	unsigned int value;
 
 	/* bring bridge out of reset */
@@ -90,6 +90,11 @@ static void alt_hps2fpga_enable_set(struct fpga_bridge *bridge, bool enable)
 	}
 }
 
+static void alt_hps2fpga_enable_set(struct fpga_bridge *bridge, bool enable)
+{
+	_alt_hps2fpga_enable_set(bridge->priv, enable);
+}
+
 struct fpga_bridge_ops altera_hps2fpga_br_ops = {
 	.enable_set = alt_hps2fpga_enable_set,
 	.enable_show = alt_hps2fpga_enable_show,
@@ -116,6 +121,7 @@ static int alt_fpga_bridge_probe(struct platform_device *pdev)
 {
 	struct altera_hps2fpga_data *priv;
 	const struct of_device_id *of_id;
+	uint32_t init_val;
 	int rc;
 	struct clk *clk;
 
@@ -152,8 +158,24 @@ static int alt_fpga_bridge_probe(struct platform_device *pdev)
 		return -EBUSY;
 	}
 
-	return register_fpga_bridge(pdev, &altera_hps2fpga_br_ops,
+	rc = register_fpga_bridge(pdev, &altera_hps2fpga_br_ops,
 				    priv->name, priv);
+	if (rc)
+		return rc;
+
+	if (of_property_read_u32(priv->np, "init-val", &init_val))
+		dev_info(&priv->pdev->dev, "init-val not specified\n");
+	else if (init_val > 1)
+		dev_warn(&priv->pdev->dev, "invalid init-val %u > 1\n",
+			init_val);
+	else {
+		dev_info(&priv->pdev->dev, "%s bridge\n",
+			(init_val ? "enabling" : "disabling"));
+
+		_alt_hps2fpga_enable_set(priv, init_val);
+	}
+
+	return rc;
 }
 
 static int alt_fpga_bridge_remove(struct platform_device *pdev)
-- 
1.9.1

