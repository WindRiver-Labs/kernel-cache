From 4a5dc1bf82fc64d2ceacc453f54cfeb865a5092a Mon Sep 17 00:00:00 2001
From: Thor Thayer <tthayer@opensource.altera.com>
Date: Mon, 29 Dec 2014 11:54:27 -0600
Subject: [PATCH 102/172] reset: Altera Arria10 System Controller - Reset
 Controller

This patch adds the reset controller functionality to the Arria10
System Controller. The appropriate resets will be called when
opening a peripheral.

Signed-off-by: Thor Thayer <tthayer@opensource.altera.com>
[czou:Original patch taken from
https://github.com/altera-opensource/linux-socfpga.git socfpga-4.1]
Signed-off-by: czou <cao.zou@windriver.com>
---
 drivers/reset/Kconfig          |   8 +++
 drivers/reset/Makefile         |   2 +
 drivers/reset/reset-a10sycon.c | 147 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 157 insertions(+)
 create mode 100644 drivers/reset/reset-a10sycon.c

diff --git a/drivers/reset/Kconfig b/drivers/reset/Kconfig
index 0615f50..5457101 100644
--- a/drivers/reset/Kconfig
+++ b/drivers/reset/Kconfig
@@ -13,3 +13,11 @@ menuconfig RESET_CONTROLLER
 	  If unsure, say no.
 
 source "drivers/reset/sti/Kconfig"
+
+config A10SYCON_RESET
+	tristate "Altera Arria10 System Control Reset"
+	depends on ARCH_SOCFPGA && RESET_CONTROLLER
+	select MFD_A10SYCON
+	help
+	  This option enables support for the external reset functions
+	  on the Altera Arria10 System Controller.
diff --git a/drivers/reset/Makefile b/drivers/reset/Makefile
index 157d421..58f2e46 100644
--- a/drivers/reset/Makefile
+++ b/drivers/reset/Makefile
@@ -3,3 +3,5 @@ obj-$(CONFIG_ARCH_SOCFPGA) += reset-socfpga.o
 obj-$(CONFIG_ARCH_BERLIN) += reset-berlin.o
 obj-$(CONFIG_ARCH_SUNXI) += reset-sunxi.o
 obj-$(CONFIG_ARCH_STI) += sti/
+
+obj-$(CONFIG_A10SYCON_RESET) += reset-a10sycon.o
diff --git a/drivers/reset/reset-a10sycon.c b/drivers/reset/reset-a10sycon.c
new file mode 100644
index 0000000..73e1ec8
--- /dev/null
+++ b/drivers/reset/reset-a10sycon.c
@@ -0,0 +1,147 @@
+/*
+ *  Copyright (C) 2014 Altera Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Reset control for Altera MAX5 Arria10 System Control
+ * Adapted from reset-socfpga.c.
+ */
+
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/mfd/a10sycon.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/reset-controller.h>
+#include <linux/types.h>
+
+/* Number of A10 System Controller Resets */
+#define A10_RESETS		1
+
+struct a10sycon_reset {
+	struct reset_controller_dev     rcdev;
+	struct work_struct              work;
+	struct a10sycon                 *a10sc;
+};
+
+static inline struct a10sycon_reset *to_a10sc_rst(struct reset_controller_dev
+						  *rc)
+{
+	return container_of(rc, struct a10sycon_reset, rcdev);
+}
+
+static int a10sycon_reset_assert(struct reset_controller_dev *rcdev,
+				 unsigned long id)
+{
+	struct a10sycon_reset *a10r = to_a10sc_rst(rcdev);
+
+	int reg_offset = A10SYCON_REG_OFFSET(id);
+	u8 value = A10SYCON_REG_BIT_MASK(id);
+	int error;
+
+	error = a10sycon_reg_update(a10r->a10sc,
+				    A10SYCON_HPS_RST_WR_REG + reg_offset,
+				    value, value);
+	if (error < 0)
+		dev_err(a10r->a10sc->dev, "Failed reset update, %d\n",
+			error);
+	return error;
+}
+
+static int a10sycon_reset_deassert(struct reset_controller_dev *rcdev,
+				   unsigned long id)
+{
+	struct a10sycon_reset *a10r = to_a10sc_rst(rcdev);
+
+	int reg_offset = A10SYCON_REG_OFFSET(id);
+	u8 mask = A10SYCON_REG_BIT_MASK(id);
+	int error;
+
+	error = a10sycon_reg_update(a10r->a10sc,
+				    A10SYCON_HPS_RST_WR_REG + reg_offset,
+				    mask, 0);
+	if (error < 0)
+		dev_err(a10r->a10sc->dev, "Failed reset update, %d\n",
+			error);
+	return error;
+}
+
+static struct reset_control_ops a10sycon_reset_ops = {
+	.assert		= a10sycon_reset_assert,
+	.deassert	= a10sycon_reset_deassert,
+};
+
+static const struct of_device_id a10sycon_reset_of_match[];
+static int a10sycon_reset_probe(struct platform_device *pdev)
+{
+	struct a10sycon_reset *a10r;
+	struct device_node *np;
+
+	/* Ensure we have a valid DT entry. */
+	np = of_find_matching_node(NULL, a10sycon_reset_of_match);
+	if (!np) {
+		dev_err(&pdev->dev, "A10 Reset DT Entry not found\n");
+		return -EINVAL;
+	}
+
+	if (!of_find_property(np, "#reset-cells", NULL)) {
+		dev_err(&pdev->dev, "%s missing #reset-cells property\n",
+			np->full_name);
+		return -EINVAL;
+	}
+
+	a10r = devm_kzalloc(&pdev->dev, sizeof(struct a10sycon_reset),
+			    GFP_KERNEL);
+	if (!a10r)
+		return -ENOMEM;
+
+	a10r->rcdev.owner = THIS_MODULE;
+	a10r->rcdev.nr_resets = A10_RESETS;
+	a10r->rcdev.ops = &a10sycon_reset_ops;
+	a10r->rcdev.of_node = np;
+	reset_controller_register(&a10r->rcdev);
+
+	platform_set_drvdata(pdev, a10r);
+
+	return 0;
+}
+
+static int a10sycon_reset_remove(struct platform_device *pdev)
+{
+	struct a10sycon_reset *a10r = platform_get_drvdata(pdev);
+
+	reset_controller_unregister(&a10r->rcdev);
+
+	return 0;
+}
+
+static const struct of_device_id a10sycon_reset_of_match[] = {
+	{ .compatible = "altr,a10sycon-reset" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, a10sycon_reset_of_match);
+
+static struct platform_driver a10sycon_reset_driver = {
+	.probe	= a10sycon_reset_probe,
+	.remove	= a10sycon_reset_remove,
+	.driver = {
+		.name		= "a10sycon-reset",
+		.owner		= THIS_MODULE,
+	},
+};
+module_platform_driver(a10sycon_reset_driver);
+
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Thor Thayer");
+MODULE_DESCRIPTION("Altera Arria10 System Control Chip Reset");
-- 
1.9.1

