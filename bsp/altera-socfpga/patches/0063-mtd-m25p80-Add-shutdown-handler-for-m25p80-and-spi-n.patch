From 69196b4d9b3e44dc6f36c38b26976a42b62ae835 Mon Sep 17 00:00:00 2001
From: Graham Moore <grmoore@opensource.altera.com>
Date: Tue, 12 Aug 2014 16:56:43 -0500
Subject: [PATCH 063/172] mtd: m25p80: Add shutdown handler for m25p80 and
 spi-nor

Add shutdown handler for m25p80 and spi-nor so that 3-byte addressing mode
is set before reboot.

Signed-off-by: Graham Moore <grmoore@opensource.altera.com>
[dinguyen] Cleaned up commit message
Signed-off-by: Dinh Nguyen <dinguyen@opensource.altera.com>
[czou:Original patch taken from
https://github.com/altera-opensource/linux-socfpga.git socfpga-4.1]
Signed-off-by: czou <cao.zou@windriver.com>
---
 drivers/mtd/devices/m25p80.c  |  7 +++++++
 drivers/mtd/spi-nor/spi-nor.c | 10 ++++++++++
 include/linux/mtd/spi-nor.h   |  3 +++
 3 files changed, 20 insertions(+)

diff --git a/drivers/mtd/devices/m25p80.c b/drivers/mtd/devices/m25p80.c
index d13cce8..ad36be1 100644
--- a/drivers/mtd/devices/m25p80.c
+++ b/drivers/mtd/devices/m25p80.c
@@ -251,6 +251,12 @@ static int m25p_remove(struct spi_device *spi)
 	return mtd_device_unregister(&flash->mtd);
 }
 
+static void m25p_shutdown(struct spi_device *spi)
+{
+	struct m25p	*flash = spi_get_drvdata(spi);
+	flash->spi_nor.shutdown(&flash->spi_nor);
+}
+
 /*
  * Do NOT add to this array without reading the following:
  *
@@ -321,6 +327,7 @@ static struct spi_driver m25p80_driver = {
 	.id_table	= m25p_ids,
 	.probe	= m25p_probe,
 	.remove	= m25p_remove,
+	.shutdown = m25p_shutdown,
 
 	/* REVISIT: many of these chips have deep power-down modes, which
 	 * should clearly be entered on suspend() to minimize power use.
diff --git a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
index 14a5d23..8402c99 100644
--- a/drivers/mtd/spi-nor/spi-nor.c
+++ b/drivers/mtd/spi-nor/spi-nor.c
@@ -946,6 +946,9 @@ static int micron_quad_enable(struct spi_nor *nor)
 		return -EINVAL;
 	}
 
+	if (!nor->shutdown)
+		nor->shutdown = spi_nor_shutdown;
+
 	return 0;
 }
 
@@ -978,6 +981,11 @@ static int set_quad_mode(struct spi_nor *nor, struct flash_info *info)
 	}
 }
 
+static void spi_nor_shutdown(struct spi_nor *nor)
+{
+	set_4byte(nor, nor->jedec_id, 0);
+}
+
 static int spi_nor_check(struct spi_nor *nor)
 {
 	if (!nor->dev || !nor->read || !nor->write ||
@@ -1040,6 +1048,8 @@ int spi_nor_scan(struct spi_nor *nor, const char *name, enum read_mode mode)
 
 	mutex_init(&nor->lock);
 
+	nor->jedec_id = info->jedec_id;
+
 	/*
 	 * Atmel, SST and Intel/Numonyx serial nor tend to power
 	 * up with the software protection bits set
diff --git a/include/linux/mtd/spi-nor.h b/include/linux/mtd/spi-nor.h
index e540952..b21a862 100644
--- a/include/linux/mtd/spi-nor.h
+++ b/include/linux/mtd/spi-nor.h
@@ -169,6 +169,8 @@ struct spi_nor {
 	u8			read_opcode;
 	u8			read_dummy;
 	u8			program_opcode;
+	u32			jedec_id;
+
 	enum read_mode		flash_read;
 	bool			sst_write_second;
 	u32			flags;
@@ -184,6 +186,7 @@ struct spi_nor {
 	int (*read_reg)(struct spi_nor *nor, u8 opcode, u8 *buf, int len);
 	int (*write_reg)(struct spi_nor *nor, u8 opcode, u8 *buf, int len,
 			int write_enable);
+	void (*shutdown)(struct spi_nor *nor);
 
 	int (*read)(struct spi_nor *nor, loff_t from,
 			size_t len, size_t *retlen, u_char *read_buf);
-- 
1.9.1

