From 88b58f7e559e62167142b403868b960a8a2ee16e Mon Sep 17 00:00:00 2001
From: Dinh Nguyen <dinguyen@opensource.altera.com>
Date: Mon, 3 Aug 2015 17:17:26 -0500
Subject: [PATCH 160/172] FogBugz #315701-7: update ECC driver to support
 Arria10

The Arria10 ECC manager is a bit different from the C5/A5. This patch
updates the ECC driver to add support the Arria10 platform. The patch adds
new defines, and the new dts binding to the driver.

Signed-off-by: Roman Bulgakov <roman.bulgakov@globallogic.com>
Signed-off-by: Dinh Nguyen <dinguyen@opensource.altera.com>
[czou:Original patch taken from
https://github.com/altera-opensource/linux-socfpga.git socfpga-4.1]
Signed-off-by: czou <cao.zou@windriver.com>
---
 drivers/edac/altera_ecc_mgr_edac.c |  2 +
 drivers/edac/altera_ecc_ocram.c    | 77 +++++++++++++++++++++++++++++++++++++-
 drivers/edac/altera_edac.h         |  1 +
 3 files changed, 79 insertions(+), 1 deletion(-)

diff --git a/drivers/edac/altera_ecc_mgr_edac.c b/drivers/edac/altera_ecc_mgr_edac.c
index 548801d..070aad6 100644
--- a/drivers/edac/altera_ecc_mgr_edac.c
+++ b/drivers/edac/altera_ecc_mgr_edac.c
@@ -164,6 +164,8 @@ static const struct of_device_id altr_ecc_mgr_of_match[] = {
 #endif
 #ifdef CONFIG_EDAC_ALTERA_OCRAM_ECC
 	{ .compatible = "altr,ocram-edac", .data = (void *)&ocramecc_data },
+	{ .compatible = "altr,a10-ocram-edac",
+	  .data = (void *)&a10_ocramecc_data },
 #endif
 	{},
 };
diff --git a/drivers/edac/altera_ecc_ocram.c b/drivers/edac/altera_ecc_ocram.c
index 26e31e0..1ad3a50 100644
--- a/drivers/edac/altera_ecc_ocram.c
+++ b/drivers/edac/altera_ecc_ocram.c
@@ -28,14 +28,34 @@
 #define ALTR_OCR_ECC_SERR_MASK		0x00000008
 #define ALTR_OCR_ECC_DERR_MASK		0x00000010
 
+/* Arria 10 OCRAM ECC Management Group Defines */
+#define ALTR_A10_OCR_ECC_CTL_OFFSET	0x08
+#define ALTR_A10_OCR_ECC_EN_CTL_MASK	0x00000001
+
+#define ALTR_A10_OCR_ECC_STAT_OFFSET	0x20
+#define ALTR_A10_OCR_ECC_CE_STAT_MASK	0x00000001
+#define ALTR_A10_OCR_ECC_UE_STAT_MASK	0x00000100
+
+#define ALTR_A10_OCR_ECC_CLR_OFFSET	0x20
+#define ALTR_A10_OCR_ECC_CE_CLR_MASK	0x00000001
+#define ALTR_A10_OCR_ECC_UE_CLR_MASK	0x00000100
+
+#define ALTR_A10_OCR_ECC_INJ_OFFSET	0x24
+#define ALTR_A10_OCR_ECC_CE_INJ_MASK	0x00000001
+#define ALTR_A10_OCR_ECC_UE_INJ_MASK	0x00000100
+
 #ifdef CONFIG_EDAC_DEBUG
 static void *ocram_init_mem(size_t size, void **other)
 {
 	struct device_node *np;
 	struct gen_pool *gp;
 	void *sram_addr;
+	const char *compat = "altr,ocram-edac";
+
+	if (of_machine_is_compatible("altr,socfpga-arria10"))
+		compat = "altr,a10-ocram-edac";
 
-	np = of_find_compatible_node(NULL, NULL, "altr,ocram-edac");
+	np = of_find_compatible_node(NULL, NULL, compat);
 	if (!np)
 		return NULL;
 
@@ -72,6 +92,40 @@ static struct edac_dev_sysfs_attribute altr_ocr_sysfs_attributes[] = {
 };
 #endif	/* #ifdef CONFIG_EDAC_DEBUG */
 
+/*
+ * altr_ocram_dependencies()
+ *	Test for OCRAM ECC dependencies upon entry because
+ *	the kernel startup code should have initialized the OCRAM
+ *	memory and enabled the ECC.
+ *	Fail if ECC is not on.
+ *	Test for OCRAM ECC is enabled.
+ */
+static int altr_ocram_dependencies(struct platform_device *pdev,
+				   void __iomem *base)
+{
+	u32 control;
+	void __iomem *en_addr;
+	u32 en_mask;
+
+	if (of_machine_is_compatible("altr,socfpga-arria10")) {
+		en_addr = (void __iomem *)((uintptr_t)base +
+					   ALTR_A10_OCR_ECC_CTL_OFFSET);
+		en_mask = ALTR_A10_OCR_ECC_EN_CTL_MASK;
+	} else {
+		en_addr = (void __iomem *)((uintptr_t)base +
+					   ALTR_MAN_GRP_OCRAM_ECC_OFFSET);
+		en_mask = ALTR_OCR_ECC_EN_MASK;
+	}
+
+	control = readl(en_addr) & en_mask;
+	if (!control) {
+		dev_err(&pdev->dev, "OCRAM: No ECC present, or ECC disabled\n");
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
 const struct ecc_mgr_prv_data ocramecc_data = {
 	.ce_clear_mask = (ALTR_OCR_ECC_EN_MASK | ALTR_OCR_ECC_SERR_MASK),
 	.ue_clear_mask = (ALTR_OCR_ECC_EN_MASK | ALTR_OCR_ECC_DERR_MASK),
@@ -85,3 +139,24 @@ const struct ecc_mgr_prv_data ocramecc_data = {
 	.trig_alloc_sz = (32 * sizeof(u32)),
 #endif
 };
+
+const struct ecc_mgr_prv_data a10_ocramecc_data = {
+	.setup = altr_ocram_dependencies,
+	.ce_clear_mask = ALTR_A10_OCR_ECC_CE_CLR_MASK,
+	.ue_clear_mask = ALTR_A10_OCR_ECC_UE_CLR_MASK,
+	.clear_mask_offs = ALTR_A10_OCR_ECC_CLR_OFFSET,
+	.ce_status_mask = ALTR_A10_OCR_ECC_CE_STAT_MASK,
+	.ue_status_mask = ALTR_A10_OCR_ECC_UE_STAT_MASK,
+	.status_mask_offs = ALTR_A10_OCR_ECC_STAT_OFFSET,
+#ifdef CONFIG_EDAC_DEBUG
+	.eccmgr_sysfs_attr = altr_ocr_sysfs_attributes,
+	.init_mem = ocram_init_mem,
+	.free_mem = ocram_free_mem,
+	.ecc_enable_mask = ALTR_A10_OCR_ECC_EN_CTL_MASK,
+	.enable_mask_offs = ALTR_A10_OCR_ECC_CTL_OFFSET,
+	.ce_set_mask = ALTR_A10_OCR_ECC_CE_INJ_MASK,
+	.ue_set_mask = ALTR_A10_OCR_ECC_UE_INJ_MASK,
+	.set_mask_offs = ALTR_A10_OCR_ECC_INJ_OFFSET,
+	.trig_alloc_sz = (32 * sizeof(u32)),
+#endif
+};
diff --git a/drivers/edac/altera_edac.h b/drivers/edac/altera_edac.h
index beef15e..412ef7b 100644
--- a/drivers/edac/altera_edac.h
+++ b/drivers/edac/altera_edac.h
@@ -232,6 +232,7 @@ struct altr_ecc_mgr_dev {
 extern const struct ecc_mgr_prv_data l2ecc_data;
 extern const struct ecc_mgr_prv_data a10_l2ecc_data;
 extern const struct ecc_mgr_prv_data ocramecc_data;
+extern const struct ecc_mgr_prv_data a10_ocramecc_data;
 
 ssize_t altr_ecc_mgr_trig(struct edac_device_ctl_info *edac_dci,
 			  const char *buffer, size_t count);
-- 
1.9.1

