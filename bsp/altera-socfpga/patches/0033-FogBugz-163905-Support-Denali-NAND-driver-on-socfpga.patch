From cb96829c40152fe3417888a64bf28b2b62d80c51 Mon Sep 17 00:00:00 2001
From: Graham Moore <grmoore@altera.com>
Date: Mon, 28 Oct 2013 11:01:37 -0500
Subject: [PATCH 033/172] FogBugz #163905: Support Denali NAND driver on
 socfpga platform

This patch addresses a few bugs and features in the Denali NAND driver on the socfpga platform.

First the bugs:

- Reading ONFI parameters would cause a timeout, because the code sent the wrong
commands to the controller/device.  That was fixed, and in the process, code was
added to wait for the appropriate interrupt.

- When using the JFFS2 file system, a bug was discovered in the write OOB
data function, whereby the controller was left in SPARE mode causing
subsequent page reads to fail.  The write OOB function was modified
so that the controller is left in MAIN access mode.

Now the features:

- The Denali NAND controller in the socfpga platform has hardware ECC, and several
status bits are different because of that.  A patch from Jamie Iles <jamie at jamieiles.com>
was used as the basis for supporting hardware ECC in the code.

- The device tree and documentation were modified to support hardware ECC.

- One of our test socfpga boards had a NAND chip which was locked by default.  To support
writing to the chip, the UNLOCK1 and UNLOCK2 commands were implemented.  The nand_unlock
calls were added as well.  (Note, the mtd layer has _lock, _unlock, and is probably a
better place to implement this functionality than the nand driver).

- The mtd_device_register call was replaced with mtd_device_parse_register so that
device tree partitions are setup by the mtd layer.  Example partitions were added
to the device tree.

- In the process of supporting our specific controller configuration, duplicate
definitions of bad block table descriptions were removed from the denali code.  They
also exist in the nand driver code.

Signed-off-by: Graham Moore <grmoore@altera.com>
[czou:Original patch taken from
https://github.com/altera-opensource/linux-socfpga.git socfpga-4.1]
Signed-off-by: czou <cao.zou@windriver.com>
---
 .../devicetree/bindings/mtd/denali-nand.txt        |   3 +
 drivers/mtd/nand/denali.c                          | 173 ++++++++++++++++-----
 drivers/mtd/nand/denali.h                          |  18 ++-
 drivers/mtd/nand/nand_base.c                       |   6 +
 4 files changed, 156 insertions(+), 44 deletions(-)

diff --git a/Documentation/devicetree/bindings/mtd/denali-nand.txt b/Documentation/devicetree/bindings/mtd/denali-nand.txt
index b04d03a..1352220 100644
--- a/Documentation/devicetree/bindings/mtd/denali-nand.txt
+++ b/Documentation/devicetree/bindings/mtd/denali-nand.txt
@@ -6,6 +6,8 @@ Required properties:
   - reg-names: Should contain the reg names "nand_data" and "denali_reg"
   - interrupts : The interrupt number.
   - dm-mask : DMA bit mask
+  - have-hw-ecc-fixup : boolean indicating controller has ECC correction
+    in hardware, and also has slightly diffrent interrupt status bits.
 
 The device tree may optionally contain sub-nodes describing partitions of the
 address space. See partition.txt for more detail.
@@ -20,4 +22,5 @@ nand: nand@ff900000 {
 	reg-names = "nand_data", "denali_reg";
 	interrupts = <0 144 4>;
 	dma-mask = <0xffffffff>;
+	have-hw-ecc-fixup;
 };
diff --git a/drivers/mtd/nand/denali.c b/drivers/mtd/nand/denali.c
index 870c7fc..e58e644 100644
--- a/drivers/mtd/nand/denali.c
+++ b/drivers/mtd/nand/denali.c
@@ -24,6 +24,7 @@
 #include <linux/slab.h>
 #include <linux/mtd/mtd.h>
 #include <linux/module.h>
+#include <linux/mtd/partitions.h>
 
 #include "denali.h"
 
@@ -55,7 +56,12 @@ MODULE_PARM_DESC(onfi_timing_mode,
 			INTR_STATUS__TIME_OUT | \
 			INTR_STATUS__ERASE_FAIL | \
 			INTR_STATUS__RST_COMP | \
-			INTR_STATUS__ERASE_COMP)
+			INTR_STATUS__ERASE_COMP | \
+			INTR_STATUS__ECC_UNCOR_ERR)
+/* And here we use a variable for interrupt mask, bcs we want to
+ * change the irq mask during init.  That is, we want to enable R/B
+ * interrupt during init, but not at other times */
+static uint32_t denali_irq_mask = DENALI_IRQ_ALL;
 
 /*
  * indicates whether or not the internal value for the flash bank is
@@ -581,7 +587,7 @@ static void denali_irq_init(struct denali_nand_info *denali)
 	/* Disable global interrupts */
 	denali_set_intr_modes(denali, false);
 
-	int_mask = DENALI_IRQ_ALL;
+	int_mask = denali_irq_mask;
 
 	/* Clear all status bits */
 	for (i = 0; i < denali->max_banks; ++i)
@@ -611,7 +617,7 @@ static void denali_irq_enable(struct denali_nand_info *denali,
  */
 static inline uint32_t denali_irq_detected(struct denali_nand_info *denali)
 {
-	return read_interrupt_status(denali) & DENALI_IRQ_ALL;
+	return read_interrupt_status(denali) & denali_irq_mask;
 }
 
 /* Interrupts are cleared by writing a 1 to the appropriate status bit */
@@ -877,6 +883,16 @@ static int write_oob_data(struct mtd_info *mtd, uint8_t *buf, int page)
 			dev_err(denali->dev, "OOB write failed\n");
 			status = -EIO;
 		}
+
+		/* set the device back to MAIN_ACCESS */
+		{
+			uint32_t addr;
+			uint32_t cmd;
+			addr = BANK(denali->flash_bank) | denali->page;
+			cmd = MODE_10 | addr;
+			index_addr(denali, (uint32_t)cmd, MAIN_ACCESS);
+		}
+
 	} else {
 		dev_err(denali->dev, "unable to send pipeline command\n");
 		status = -EIO;
@@ -949,7 +965,12 @@ static bool handle_ecc(struct denali_nand_info *denali, uint8_t *buf,
 	bool check_erased_page = false;
 	unsigned int bitflips = 0;
 
-	if (irq_status & INTR_STATUS__ECC_ERR) {
+	if (denali->have_hw_ecc_fixup &&
+	    (irq_status & INTR_STATUS__ECC_UNCOR_ERR)) {
+		clear_interrupts(denali);
+		denali_set_intr_modes(denali, true);
+		check_erased_page = true;
+	} else if (irq_status & INTR_STATUS__ECC_ERR) {
 		/* read the ECC errors. we'll ignore them for now */
 		uint32_t err_address, err_correction_info, err_byte,
 			 err_sector, err_device, err_correction_value;
@@ -1146,15 +1167,16 @@ static int denali_read_oob(struct mtd_info *mtd, struct nand_chip *chip,
 static int denali_read_page(struct mtd_info *mtd, struct nand_chip *chip,
 			    uint8_t *buf, int oob_required, int page)
 {
-	unsigned int max_bitflips;
+	unsigned int max_bitflips = 0;
 	struct denali_nand_info *denali = mtd_to_denali(mtd);
 
 	dma_addr_t addr = denali->buf.dma_buf;
 	size_t size = denali->mtd.writesize + denali->mtd.oobsize;
 
 	uint32_t irq_status;
-	uint32_t irq_mask = INTR_STATUS__ECC_TRANSACTION_DONE |
-			    INTR_STATUS__ECC_ERR;
+	uint32_t irq_mask = denali->have_hw_ecc_fixup ?
+		(INTR_STATUS__DMA_CMD_COMP) :
+		(INTR_STATUS__ECC_TRANSACTION_DONE | INTR_STATUS__ECC_ERR);
 	bool check_erased_page = false;
 
 	if (page != denali->page) {
@@ -1183,14 +1205,24 @@ static int denali_read_page(struct mtd_info *mtd, struct nand_chip *chip,
 	denali_enable_dma(denali, false);
 
 	if (check_erased_page) {
-		read_oob_data(&denali->mtd, chip->oob_poi, denali->page);
-
-		/* check ECC failures that may have occurred on erased pages */
-		if (check_erased_page) {
+		if (denali->have_hw_ecc_fixup) {
+			/* When we have hw ecc fixup, don't check oob.
+			 * That code below looks jacked up anyway.  I mean,
+			 * look at it, wtf? */
 			if (!is_erased(buf, denali->mtd.writesize))
 				denali->mtd.ecc_stats.failed++;
-			if (!is_erased(buf, denali->mtd.oobsize))
-				denali->mtd.ecc_stats.failed++;
+		} else {
+			read_oob_data(&denali->mtd, chip->oob_poi,
+				denali->page);
+
+			/* check ECC failures that may have occurred on
+			 * erased pages */
+			if (check_erased_page) {
+				if (!is_erased(buf, denali->mtd.writesize))
+					denali->mtd.ecc_stats.failed++;
+				if (!is_erased(buf, denali->mtd.oobsize))
+					denali->mtd.ecc_stats.failed++;
+			}
 		}
 	}
 	return max_bitflips;
@@ -1243,6 +1275,13 @@ static uint8_t denali_read_byte(struct mtd_info *mtd)
 	return result;
 }
 
+static void denali_read_buf(struct mtd_info *mtd, uint8_t *buf, int len)
+{
+	int i;
+	for (i = 0; i < len; i++)
+		buf[i] = denali_read_byte(mtd);
+}
+
 static void denali_select_chip(struct mtd_info *mtd, int chip)
 {
 	struct denali_nand_info *denali = mtd_to_denali(mtd);
@@ -1286,6 +1325,8 @@ static void denali_cmdfunc(struct mtd_info *mtd, unsigned int cmd, int col,
 {
 	struct denali_nand_info *denali = mtd_to_denali(mtd);
 	uint32_t addr, id;
+	uint32_t pages_per_block;
+	uint32_t block;
 	int i;
 
 	switch (cmd) {
@@ -1295,7 +1336,6 @@ static void denali_cmdfunc(struct mtd_info *mtd, unsigned int cmd, int col,
 		read_status(denali);
 		break;
 	case NAND_CMD_READID:
-	case NAND_CMD_PARAM:
 		reset_buf(denali);
 		/*
 		 * sometimes ManufactureId read from register is not right
@@ -1310,6 +1350,37 @@ static void denali_cmdfunc(struct mtd_info *mtd, unsigned int cmd, int col,
 			write_byte_to_buf(denali, id);
 		}
 		break;
+	case NAND_CMD_PARAM:
+		reset_buf(denali);
+
+		/* turn on R/B interrupt */
+		denali_set_intr_modes(denali, false);
+		denali_irq_mask = DENALI_IRQ_ALL | INTR_STATUS__INT_ACT;
+		clear_interrupts(denali);
+		denali_irq_enable(denali, denali_irq_mask);
+		denali_set_intr_modes(denali, true);
+
+		addr = (uint32_t)MODE_11 | BANK(denali->flash_bank);
+		index_addr(denali, (uint32_t)addr | 0, cmd);
+		index_addr(denali, (uint32_t)addr | 1, col & 0xFF);
+		/* Wait tR time... */
+		udelay(25);
+		/* And then wait for R/B interrupt */
+		wait_for_irq(denali, INTR_STATUS__INT_ACT);
+
+		/* turn off R/B interrupt now */
+		denali_irq_mask = DENALI_IRQ_ALL;
+		denali_set_intr_modes(denali, false);
+		denali_irq_enable(denali, denali_irq_mask);
+		denali_set_intr_modes(denali, true);
+
+		for (i = 0; i < 256; i++) {
+			index_addr_read_data(denali,
+						(uint32_t)addr | 2,
+						&id);
+			write_byte_to_buf(denali, id);
+		}
+		break;
 	case NAND_CMD_READ0:
 	case NAND_CMD_SEQIN:
 		denali->page = page;
@@ -1320,6 +1391,18 @@ static void denali_cmdfunc(struct mtd_info *mtd, unsigned int cmd, int col,
 	case NAND_CMD_READOOB:
 		/* TODO: Read OOB data */
 		break;
+	case NAND_CMD_UNLOCK1:
+		pages_per_block = mtd->erasesize / mtd->writesize;
+		block = page / pages_per_block;
+		addr = (uint32_t)MODE_10 | (block * pages_per_block);
+		index_addr(denali, addr, 0x10);
+		break;
+	case NAND_CMD_UNLOCK2:
+		pages_per_block = mtd->erasesize / mtd->writesize;
+		block = (page+pages_per_block-1) / pages_per_block;
+		addr = (uint32_t)MODE_10 | (block * pages_per_block);
+		index_addr(denali, addr, 0x11);
+		break;
 	default:
 		pr_err(": unsupported command received 0x%x\n", cmd);
 		break;
@@ -1368,29 +1451,6 @@ static struct nand_ecclayout nand_15bit_oob = {
 	.eccbytes = 26,
 };
 
-static uint8_t bbt_pattern[] = {'B', 'b', 't', '0' };
-static uint8_t mirror_pattern[] = {'1', 't', 'b', 'B' };
-
-static struct nand_bbt_descr bbt_main_descr = {
-	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
-		| NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
-	.offs =	8,
-	.len = 4,
-	.veroffs = 12,
-	.maxblocks = 4,
-	.pattern = bbt_pattern,
-};
-
-static struct nand_bbt_descr bbt_mirror_descr = {
-	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
-		| NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
-	.offs =	8,
-	.len = 4,
-	.veroffs = 12,
-	.maxblocks = 4,
-	.pattern = mirror_pattern,
-};
-
 /* initialize driver data structures */
 static void denali_drv_init(struct denali_nand_info *denali)
 {
@@ -1419,6 +1479,7 @@ static void denali_drv_init(struct denali_nand_info *denali)
 int denali_init(struct denali_nand_info *denali)
 {
 	int ret;
+	uint32_t val;
 
 	if (denali->platform == INTEL_CE4100) {
 		/*
@@ -1458,6 +1519,7 @@ int denali_init(struct denali_nand_info *denali)
 	denali->mtd.priv = &denali->nand;
 
 	/* register the driver with the NAND core subsystem */
+	denali->nand.read_buf = denali_read_buf;
 	denali->nand.select_chip = denali_select_chip;
 	denali->nand.cmdfunc = denali_cmdfunc;
 	denali->nand.read_byte = denali_read_byte;
@@ -1524,14 +1586,19 @@ int denali_init(struct denali_nand_info *denali)
 	 * bad block management.
 	 */
 
-	/* Bad block management */
-	denali->nand.bbt_td = &bbt_main_descr;
-	denali->nand.bbt_md = &bbt_mirror_descr;
+	/* Bad block table description is set by nand framework,
+	   see nand_bbt.c */
 
-	/* skip the scan for now until we have OOB read and write support */
 	denali->nand.bbt_options |= NAND_BBT_USE_FLASH;
-	denali->nand.options |= NAND_SKIP_BBTSCAN;
 	denali->nand.ecc.mode = NAND_ECC_HW_SYNDROME;
+	if (denali->have_hw_ecc_fixup) {
+		/* We have OOB support, so allow scan of BBT
+			and leave the OOB alone */
+		denali->nand.bbt_options |= NAND_BBT_NO_OOB;
+	} else {
+	/* skip the scan for now until we have OOB read and write support */
+		denali->nand.options |= NAND_SKIP_BBTSCAN;
+	}
 
 	/* no subpage writes on denali */
 	denali->nand.options |= NAND_NO_SUBPAGE_WRITE;
@@ -1590,12 +1657,32 @@ int denali_init(struct denali_nand_info *denali)
 	denali->nand.ecc.write_oob = denali_write_oob;
 	denali->nand.erase = denali_erase;
 
+	/* Occasionally the controller is in SPARE or MAIN+SPARE
+	   mode upon startup, and we want it to be MAIN only */
+	val = ioread32(denali->flash_reg + TRANSFER_MODE);
+	if (val != 0) {
+		int i;
+		dev_dbg(denali->dev,
+		"setting TRANSFER_MODE (%08x) back to MAIN only\n", val);
+		/* put all banks in MAIN mode, no SPARE */
+		iowrite32(0, denali->flash_reg + TRANSFER_SPARE_REG);
+		for (i = 0; i < 4; i++)
+			index_addr(denali, MODE_10 | BANK(i) | 1,
+				MAIN_ACCESS);
+	}
+
 	if (nand_scan_tail(&denali->mtd)) {
 		ret = -ENXIO;
 		goto failed_req_irq;
 	}
 
-	ret = mtd_device_register(&denali->mtd, NULL, 0);
+	/* We use the parse function and pass the of_node bcs
+	   we want to pick up partitions from device tree */
+	ret = mtd_device_parse_register(&denali->mtd, NULL,
+			&(struct mtd_part_parser_data){
+				.of_node = denali->dev->of_node,
+			},
+			0, 0);
 	if (ret) {
 		dev_err(denali->dev, "Spectra: Failed to register MTD: %d\n",
 				ret);
diff --git a/drivers/mtd/nand/denali.h b/drivers/mtd/nand/denali.h
index 145bf88..9bf3755 100644
--- a/drivers/mtd/nand/denali.h
+++ b/drivers/mtd/nand/denali.h
@@ -217,6 +217,16 @@
 #define INTR_STATUS(__bank)	(0x410 + ((__bank) * 0x50))
 #define INTR_EN(__bank)		(0x420 + ((__bank) * 0x50))
 
+/*
+ * Some versions of the IP have the ECC fixup handled in hardware.  In this
+ * configuration we only get interrupted when the error is uncorrectable.
+ * Unfortunately this bit replaces INTR_STATUS__ECC_TRANSACTION_DONE from the
+ * old IP.
+ * taken from patch by Jamie Iles <jamie at jamieiles.com>
+ *  support hardware with internal ECC fixup
+ */
+#define     INTR_STATUS__ECC_UNCOR_ERR			0x0001
+
 #define     INTR_STATUS__ECC_TRANSACTION_DONE		0x0001
 #define     INTR_STATUS__ECC_ERR			0x0002
 #define     INTR_STATUS__DMA_CMD_COMP			0x0004
@@ -329,6 +339,11 @@
 #define     CHNL_ACTIVE__CHANNEL2			0x0004
 #define     CHNL_ACTIVE__CHANNEL3			0x0008
 
+#define FLASH_BURST_LENGTH		0x770
+#define CHIP_INTERLEAVE_ENABLE_AND_ALLOW_INT_READS		0X780
+#define NO_OF_BLOCKS_PER_LUN		0X790
+#define LUN_STATUS_CMD		0X7A0
+
 #define ACTIVE_SRC_ID				0x800
 #define     ACTIVE_SRC_ID__VALUE			0x00ff
 
@@ -457,7 +472,7 @@ struct denali_nand_info {
 	struct device *dev;
 	int total_used_banks;
 	uint32_t block;  /* stored for future use */
-	uint16_t page;
+	uint32_t page;
 	void __iomem *flash_reg;  /* Mapped io reg base address */
 	void __iomem *flash_mem;  /* Mapped io reg base address */
 
@@ -475,6 +490,7 @@ struct denali_nand_info {
 	uint32_t blksperchip;
 	uint32_t bbtskipbytes;
 	uint32_t max_banks;
+	bool have_hw_ecc_fixup;
 };
 
 extern int denali_init(struct denali_nand_info *denali);
diff --git a/drivers/mtd/nand/nand_base.c b/drivers/mtd/nand/nand_base.c
index c2e1232..6e7caab 100644
--- a/drivers/mtd/nand/nand_base.c
+++ b/drivers/mtd/nand/nand_base.c
@@ -2554,6 +2554,8 @@ static int nand_write(struct mtd_info *mtd, loff_t to, size_t len,
 	struct mtd_oob_ops ops;
 	int ret;
 
+	nand_unlock(mtd, to, len);
+
 	nand_get_device(mtd, FL_WRITING);
 	memset(&ops, 0, sizeof(ops));
 	ops.len = len;
@@ -2671,6 +2673,8 @@ static int nand_write_oob(struct mtd_info *mtd, loff_t to,
 		return -EINVAL;
 	}
 
+	nand_unlock(mtd, to, ops->len);
+
 	nand_get_device(mtd, FL_WRITING);
 
 	switch (ops->mode) {
@@ -2744,6 +2748,8 @@ int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
 	if (check_offs_len(mtd, instr->addr, instr->len))
 		return -EINVAL;
 
+	nand_unlock(mtd, instr->addr, instr->len);
+
 	/* Grab the lock and see if the device is available */
 	nand_get_device(mtd, FL_ERASING);
 
-- 
1.9.1

