From 877dc605de61f4dda016ef7bf78072a573dd7dcb Mon Sep 17 00:00:00 2001
From: Graham Moore <grmoore@altera.com>
Date: Thu, 1 May 2014 14:11:21 -0500
Subject: [PATCH 240/248] FogBugz #201449: Fix bug found by sparse tool.

The sparse code analysis tools identified a locking problem
in the Cadence QSPI driver.  This patch is the fix.

In the process, I removed a continue, renamed a variable, and
reversed the logic of an if-block.

[Original patch taken from
git://git.rocketboards.org/linux-socfpga.git socfpga-3.14]

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
Signed-off-by: Graham Moore <grmoore@altera.com>
---
 drivers/spi/spi-cadence-qspi.c | 27 +++++++++++++--------------
 1 file changed, 13 insertions(+), 14 deletions(-)

diff --git a/drivers/spi/spi-cadence-qspi.c b/drivers/spi/spi-cadence-qspi.c
index 97d92ee..e7c9b6b 100644
--- a/drivers/spi/spi-cadence-qspi.c
+++ b/drivers/spi/spi-cadence-qspi.c
@@ -76,7 +76,7 @@ static void cadence_qspi_work(struct work_struct *work)
 		struct spi_transfer *xfer[CQSPI_MAX_TRANS];
 		int status = 0;
 		int n_trans = 0;
-		int next_in_queue = 0;
+		int skip_xfer = 0;
 
 		spi_msg = container_of(cadence_qspi->msg_queue.next,
 			struct spi_message, queue);
@@ -91,27 +91,26 @@ static void cadence_qspi_work(struct work_struct *work)
 					CQSPI_MAX_TRANS);
 				/* Skip process the queue if number of
 				 * transaction is greater than max 2. */
-				next_in_queue = 1;
+				skip_xfer = 1;
 				break;
 			}
 			xfer[n_trans++] = spi_xfer;
 		}
 
-		/* Continue to next queue if next_in_queue is set. */
-		if (next_in_queue)
-			continue;
+		if (!skip_xfer) {
 
-		status = cadence_qspi_apb_process_queue(cadence_qspi, spi,
-					n_trans, xfer);
+			status = cadence_qspi_apb_process_queue(cadence_qspi,
+						spi, n_trans, xfer);
 
-		if (!status) {
-			spi_msg->actual_length += xfer[0]->len;
-			if (n_trans > 1)
-				spi_msg->actual_length += xfer[1]->len;
-		}
+			if (!status) {
+				spi_msg->actual_length += xfer[0]->len;
+				if (n_trans > 1)
+					spi_msg->actual_length += xfer[1]->len;
+			}
 
-		spi_msg->status = status;
-		spi_msg->complete(spi_msg->context);
+			spi_msg->status = status;
+			spi_msg->complete(spi_msg->context);
+		}
 		spin_lock_irqsave(&cadence_qspi->lock, flags);
 	}
 	spin_unlock_irqrestore(&cadence_qspi->lock, flags);
-- 
1.9.1

