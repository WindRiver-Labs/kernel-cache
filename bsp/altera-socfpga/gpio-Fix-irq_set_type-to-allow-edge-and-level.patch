From 8eec79cd8a79f597102f8c6e63293f4a76936768 Mon Sep 17 00:00:00 2001
From: Tien Hock Loh <thloh@altera.com>
Date: Mon, 27 May 2013 14:36:57 +0800
Subject: [PATCH 245/254] gpio: Fix irq_set_type to allow edge and level

Upstream: git://git.rocketboards.org/linux-socfpga.git
 correctly

This fixes irq_set_type to GPIO Altera to allow edge and level trigger
correctly. Previously irq_set_type will fail when user request anything
other than IRQ_TYPE_NONE.

Signed-off-by: Tien Hock Loh <thloh@altera.com>
(cherry picked from commit 58320e57844cc3868a9299b10b7d85e46e1fbcf6)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/gpio/gpio-altera.txt       |    2 +
 drivers/gpio/gpio-altera.c                         |   34 ++++++++++++++++++++
 2 files changed, 36 insertions(+), 0 deletions(-)

diff --git a/Documentation/devicetree/bindings/gpio/gpio-altera.txt b/Documentation/devicetree/bindings/gpio/gpio-altera.txt
index 3bdb8b6..0c23996 100644
--- a/Documentation/devicetree/bindings/gpio/gpio-altera.txt
+++ b/Documentation/devicetree/bindings/gpio/gpio-altera.txt
@@ -17,6 +17,8 @@ Altera GPIO specific properties:
 - width: Width of the GPIO bank, range from 1-32
 - level_trigger: Specifies whether the GPIO interrupt is level trigger.
   This field is required if the Altera GPIO controller used has IRQ enabled.
+- edge_type: Specifies the GPIO edge trigger type. This field will only exist
+  if IRQ is enabled in the core and level_trigger is 0
 
 Note: If the Altera GPIO is set to be built as a module, peripherals that uses
 Altera GPIO as interrupt-parent should be a module so that the peripheral
diff --git a/drivers/gpio/gpio-altera.c b/drivers/gpio/gpio-altera.c
index baed2d4..0b0787e 100644
--- a/drivers/gpio/gpio-altera.c
+++ b/drivers/gpio/gpio-altera.c
@@ -34,12 +34,16 @@
 #define ALTERA_GPIO_EDGE_CAP		0xc
 #define ALTERA_GPIO_OUTSET		0x10
 #define ALTERA_GPIO_OUTCLEAR		0x14
+#define ALTERA_IRQ_RISING		0
+#define ALTERA_IRQ_FALLING		1
+#define ALTERA_IRQ_BOTH			2
 
 struct altera_gpio_chip {
 	struct of_mm_gpio_chip mmchip;
 	struct irq_domain *irq;	/* GPIO controller IRQ number */
 	spinlock_t gpio_lock;	/* Lock used for synchronization */
 	int level_trigger;
+	int edge_type;
 	int hwirq;
 };
 
@@ -76,8 +80,26 @@ static void altera_gpio_irq_mask(struct irq_data *d)
 static int altera_gpio_irq_set_type(struct irq_data *d,
 				unsigned int type)
 {
+	struct altera_gpio_chip *altera_gc = irq_data_get_irq_chip_data(d);
+
 	if (type == IRQ_TYPE_NONE)
 		return 0;
+
+	if (altera_gc->level_trigger) {
+		if (type == IRQ_TYPE_LEVEL_HIGH)
+			return 0;
+	} else {
+		if (type == IRQ_TYPE_EDGE_RISING &&
+			altera_gc->edge_type == ALTERA_IRQ_RISING)
+			return 0;
+		else if (type == IRQ_TYPE_EDGE_FALLING &&
+			altera_gc->edge_type == ALTERA_IRQ_FALLING)
+			return 0;
+		else if (type == IRQ_TYPE_EDGE_BOTH &&
+			altera_gc->edge_type == ALTERA_IRQ_BOTH)
+			return 0;
+	}
+
 	return -EINVAL;
 }
 
@@ -276,6 +298,18 @@ int __devinit altera_gpio_probe(struct platform_device *pdev)
 	}
 	altera_gc->level_trigger = reg;
 
+	/* If it is not level triggered PIO
+	   Check what edge type it is */
+	if (!altera_gc->level_trigger) {
+		if (of_property_read_u32(node, "edge_type", &reg)) {
+			ret = -EINVAL;
+			pr_err("%s: edge_type value not set in device tree\n"
+				, node->full_name);
+			goto teardown;
+		}
+	}
+	altera_gc->edge_type = reg;
+
 	irq_set_handler_data(altera_gc->hwirq, altera_gc);
 	irq_set_chained_handler(altera_gc->hwirq, altera_gpio_irq_handler);
 
-- 
1.7.5.4

