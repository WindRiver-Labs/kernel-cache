From b2fd99beb71148761e49110ed8d62bd132c0a822 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Mon, 1 Jul 2013 16:30:02 +0800
Subject: [PATCH 4/4] tty: newhaven_lcd: set brightness by proc

This patch is to provide a function to adjust the brightness
of ttyLCD by proc.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/tty/newhaven_lcd.c |   71 ++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 71 insertions(+), 0 deletions(-)

diff --git a/drivers/tty/newhaven_lcd.c b/drivers/tty/newhaven_lcd.c
index 4507e4f..2fb2ab8 100644
--- a/drivers/tty/newhaven_lcd.c
+++ b/drivers/tty/newhaven_lcd.c
@@ -25,7 +25,10 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/slab.h>
+#include <linux/stat.h>
 #include <linux/tty.h>
+#include <linux/uaccess.h>
+#include <linux/proc_fs.h>
 
 #define LCD_COMMAND             0xfe
 #define LCD_DISPLAY_ON          0x41
@@ -75,6 +78,7 @@ struct lcd {
 	unsigned int top_line;
 	unsigned int cursor_line;
 	unsigned int cursor_col;
+	unsigned char brightness;
 };
 
 #define MAX_LCDS 1
@@ -111,6 +115,71 @@ static int lcd_cmd_backlight_brightness(struct lcd *lcd_data, u8 brightness)
 	return lcd_cmd_one_param(lcd_data, LCD_BRIGHTNESS, brightness);
 }
 
+#ifdef CONFIG_PROC_FS
+/*
+ * writing brightness for ttyLCD
+ */
+static ssize_t write_ttyLCD_brightness(struct file *file, const char __user *buf,
+				   size_t count, loff_t *ppos)
+{
+	if (count) {
+		char c;
+		struct lcd *lcd_data;
+
+		if (get_user(c, buf))
+			return -EFAULT;
+
+		if (c > 0x38 || c < 0x31)
+			return -EINVAL;
+
+		lcd_data = &lcd_data_static[0];
+		if (lcd_data == NULL)
+			return -ENODEV;
+
+		lcd_data->brightness = c - 0x30;
+		lcd_cmd_backlight_brightness(lcd_data, lcd_data->brightness);
+	}
+
+	return count;
+}
+
+/*
+ * reading brightness for ttyLCD
+ */
+static ssize_t read_ttyLCD_brightness(struct file *file, char __user *buf, size_t size, loff_t *ppos)
+{
+	struct lcd *lcd_data;
+
+	lcd_data = &lcd_data_static[0];
+
+	if (lcd_data == NULL)
+		return -ENODEV;
+
+	printk("%c\n", lcd_data->brightness + 0x30);
+
+	return 0;
+}
+
+static const struct file_operations proc_brightness_trigger_operations = {
+	.write		= write_ttyLCD_brightness,
+	.read		= read_ttyLCD_brightness,
+	.llseek		= noop_llseek,
+};
+
+static void ttyLCD_init_procfs(void)
+{
+	if (!proc_create("driver/lcd-brightness", S_IWUSR, NULL,
+			 &proc_brightness_trigger_operations))
+		pr_err("Failed to register proc interface\n");
+}
+
+#else
+
+static inline void ttyLCD_init_procfs(void)
+{
+}
+#endif /* CONFIG_PROC_FS */
+
 static int lcd_cmd_display_on(struct lcd *lcd_data)
 {
 	return lcd_cmd_no_params(lcd_data, LCD_DISPLAY_ON);
@@ -498,6 +567,7 @@ static int __devinit lcd_probe(struct i2c_client *client,
 	lcd_data->height  = height;
 	lcd_data->width   = width;
 	lcd_data->buffer  = buffer;
+	lcd_data->brightness = brightness;
 
 	dev_set_drvdata(&client->dev, lcd_data);
 	tty_port_init(&lcd_data->port);
@@ -524,6 +594,7 @@ static int __devinit lcd_probe(struct i2c_client *client,
 	lcd_cmd_backlight_brightness(lcd_data, brightness);
 	lcd_cmd_clear_screen(lcd_data);
 
+	ttyLCD_init_procfs();
 	dev_info(&client->dev, "LCD driver initialized\n");
 
 	return 0;
-- 
1.7.6

