From fa35f40ff87e5b759e30efa7ba49c0654446c757 Mon Sep 17 00:00:00 2001
From: Graham Moore <grmoore@altera.com>
Date: Thu, 5 Sep 2013 14:14:14 -0500
Subject: [PATCH 135/248] FogBugz #128180: Fix emac reset and phy-select
 sequence.

Change platform code so that emacs are left in reset until initialized.

[Original patch taken from
git://git.rocketboards.org/linux-socfpga.git socfpga-3.14]

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
Signed-off-by: Graham Moore <grmoore@altera.com>
---
 arch/arm/mach-socfpga/core.h    |  4 ++++
 arch/arm/mach-socfpga/socfpga.c | 19 ++++++++++++++-----
 2 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-socfpga/core.h b/arch/arm/mach-socfpga/core.h
index 15ba46e..c11614d 100644
--- a/arch/arm/mach-socfpga/core.h
+++ b/arch/arm/mach-socfpga/core.h
@@ -46,6 +46,10 @@ extern void socfpga_secondary_startup(void);
  #define RSTMGR_MPUMODRST_SCUPER	0x8	/*SCU and periphs reset*/
  #define RSTMGR_MPUMODRST_L2		0x10	/*L2 Cache reset*/
 
+/* Peripheral Module Reset Register bits */
+#define RSTMGR_PERMODRST_EMAC0	0x1
+#define RSTMGR_PERMODRST_EMAC1	0x2
+
 #define SYSMGR_SILICON_ID1_OFFSET 0x0
 #define SYSMGR_SILICON_ID1_REV_SHIFT 0
 #define SYSMGR_SILICON_ID1_REV_MASK 0x0000FFFF
diff --git a/arch/arm/mach-socfpga/socfpga.c b/arch/arm/mach-socfpga/socfpga.c
index 6e99749..32359a6 100644
--- a/arch/arm/mach-socfpga/socfpga.c
+++ b/arch/arm/mach-socfpga/socfpga.c
@@ -156,8 +156,10 @@ static void __init socfpga_scu_map_io(void)
 
 static void __init enable_periphs(void)
 {
-	/* Release all peripherals from reset.*/
-	writel(0, rst_manager_base_addr + SOCFPGA_RSTMGR_MODPERRST);
+	/* Release all peripherals, except for emacs, from reset.*/
+	u32 rstval;
+	rstval = RSTMGR_PERMODRST_EMAC0 | RSTMGR_PERMODRST_EMAC1;
+	writel(rstval, rst_manager_base_addr + SOCFPGA_RSTMGR_MODPERRST);
 }
 
 #define MICREL_KSZ9021_EXTREG_CTRL 11
@@ -186,6 +188,7 @@ static int ksz9021rlrn_phy_fixup(struct phy_device *phydev)
 static int stmmac_plat_init(struct platform_device *pdev)
 {
 	u32 ctrl, val, shift;
+	u32 rstmask;
 	int phymode;
 
 	if (of_machine_is_compatible("altr,socfpga-vt"))
@@ -206,11 +209,13 @@ static int stmmac_plat_init(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	if (&stmmacenet1_data == pdev->dev.platform_data)
+	if (&stmmacenet1_data == pdev->dev.platform_data) {
 		shift = SYSMGR_EMACGRP_CTRL_PHYSEL_WIDTH;
-	else if (&stmmacenet0_data == pdev->dev.platform_data)
+		rstmask = RSTMGR_PERMODRST_EMAC1;
+	} else if (&stmmacenet0_data == pdev->dev.platform_data) {
 		shift = 0;
-	else {
+		rstmask = RSTMGR_PERMODRST_EMAC0;
+	} else {
 		pr_err("%s unexpected platform data pointer\n", __func__);
 		return -EINVAL;
 	}
@@ -221,6 +226,10 @@ static int stmmac_plat_init(struct platform_device *pdev)
 
 	writel(ctrl, (sys_manager_base_addr + SYSMGR_EMACGRP_CTRL_OFFSET));
 
+	ctrl = readl(rst_manager_base_addr + SOCFPGA_RSTMGR_MODPERRST);
+	ctrl &= ~(rstmask);
+	writel(ctrl, rst_manager_base_addr + SOCFPGA_RSTMGR_MODPERRST);
+
 	return 0;
 }
 
-- 
1.9.1

