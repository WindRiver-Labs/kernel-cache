From 77d8627db59258043f6c0a220166d6d985f101f9 Mon Sep 17 00:00:00 2001
From: Thor Thayer <tthayer@altera.com>
Date: Mon, 10 Feb 2014 10:00:44 -0600
Subject: [PATCH 189/248] FogBugz #173188: Add OCRAM ECC Error Injection for
 testing.

OCRAM ECC error injection was added for testing the OCRAM EDAC
functionality. The OCRAM testing function allocates memory from
the general purpose allocation pool, sets the error injection
bits, writes data out (corrupted by error injection logic),
then reads the data back out (which triggers the EDAC handler)
before releasing the gen_pool.
The gen_pool free function differs from the standard
memory free prototype(requires a size parameter) which necessitated
changing the generic free function pointer in altera_edac.h and
the prototypes for the memory free function in altera_ecc_l2.c.

V2:
Fix warnings when debugging is disabled.

V3:
Remove stray newlines in altera_ecc_mgr_edac.c & altera_ecc_ocram.c

[Original patch taken from
git://git.rocketboards.org/linux-socfpga.git socfpga-3.14]

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
Signed-off-by: Thor Thayer <tthayer@altera.com>
---
 drivers/edac/altera_ecc_l2.c       |  2 +-
 drivers/edac/altera_ecc_mgr_edac.c |  9 +++---
 drivers/edac/altera_ecc_ocram.c    | 59 ++++++++++++++++++++++++++++++++++++--
 drivers/edac/altera_edac.h         |  2 +-
 4 files changed, 64 insertions(+), 8 deletions(-)

diff --git a/drivers/edac/altera_ecc_l2.c b/drivers/edac/altera_ecc_l2.c
index 1f4f5b7..05ea3c1 100644
--- a/drivers/edac/altera_ecc_l2.c
+++ b/drivers/edac/altera_ecc_l2.c
@@ -54,7 +54,7 @@ static void *l2_init_mem(size_t size, void **other)
 	return ptemp;
 }
 
-static void l2_free_mem(void *p, void *other)
+static void l2_free_mem(void *p, size_t size, void *other)
 {
 	struct device *dev = other;
 	if (dev && p)
diff --git a/drivers/edac/altera_ecc_mgr_edac.c b/drivers/edac/altera_ecc_mgr_edac.c
index c57b1e9..ce03dc6 100644
--- a/drivers/edac/altera_ecc_mgr_edac.c
+++ b/drivers/edac/altera_ecc_mgr_edac.c
@@ -110,7 +110,7 @@ ssize_t altr_ecc_mgr_trig(struct edac_device_ctl_info *edac_dci,
 	rmb();
 
 	if (priv->free_mem)
-		priv->free_mem(ptemp, generic_ptr);
+		priv->free_mem(ptemp, priv->trig_alloc_sz, generic_ptr);
 
 	if (result)
 		dev_alert(edac_dci->dev, "%s: Trigger Match Error (%d)\n",
@@ -120,14 +120,15 @@ ssize_t altr_ecc_mgr_trig(struct edac_device_ctl_info *edac_dci,
 }
 
 static void altr_set_sysfs_attr(struct edac_device_ctl_info *edac_dci,
-				struct edac_dev_sysfs_attribute *ecc_attr)
+				const struct ecc_mgr_prv_data *priv)
 {
+	struct edac_dev_sysfs_attribute *ecc_attr = priv->eccmgr_sysfs_attr;
 	if (ecc_attr)
 		edac_dci->sysfs_attributes =  ecc_attr;
 }
 #else
 static void altr_set_sysfs_attr(struct edac_device_ctl_info *edac_dci,
-				struct edac_dev_sysfs_attribute *ecc_attr)
+				const struct ecc_mgr_prv_data *priv)
 {}
 #endif	/* #ifdef CONFIG_EDAC_DEBUG */
 
@@ -222,7 +223,7 @@ static int altr_ecc_mgr_probe(struct platform_device *pdev)
 	dci->mod_name = "ECC_MGR";
 	dci->dev_name = drvdata->edac_dev_name;
 
-	altr_set_sysfs_attr(dci, priv->eccmgr_sysfs_attr);
+	altr_set_sysfs_attr(dci, priv);
 
 	if (edac_device_add_device(dci))
 		goto err;
diff --git a/drivers/edac/altera_ecc_ocram.c b/drivers/edac/altera_ecc_ocram.c
index fdd1486..26e31e0 100644
--- a/drivers/edac/altera_ecc_ocram.c
+++ b/drivers/edac/altera_ecc_ocram.c
@@ -14,7 +14,10 @@
  * this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-
+#include <linux/ctype.h>
+#include <linux/edac.h>
+#include <linux/genalloc.h>
+#include <linux/of.h>
 #include "altera_edac.h"
 
 /* OCRAM ECC Management Group Defines */
@@ -25,8 +28,60 @@
 #define ALTR_OCR_ECC_SERR_MASK		0x00000008
 #define ALTR_OCR_ECC_DERR_MASK		0x00000010
 
+#ifdef CONFIG_EDAC_DEBUG
+static void *ocram_init_mem(size_t size, void **other)
+{
+	struct device_node *np;
+	struct gen_pool *gp;
+	void *sram_addr;
+
+	np = of_find_compatible_node(NULL, NULL, "altr,ocram-edac");
+	if (!np)
+		return NULL;
+
+	gp = of_get_named_gen_pool(np, "iram", 0);
+	if (!gp)
+		return NULL;
+	*other = gp;
+
+	sram_addr = (void *)gen_pool_alloc(gp, size);
+	if (!sram_addr)
+		return NULL;
+
+	memset(sram_addr, 0, size);
+	wmb();	/* Ensure data is written out */
+
+	return sram_addr;
+}
+
+static void ocram_free_mem(void *p, size_t size, void *other)
+{
+	gen_pool_free((struct gen_pool *)other, (u32)p, size);
+}
+
+static struct edac_dev_sysfs_attribute altr_ocr_sysfs_attributes[] = {
+	{
+		.attr = { .name = "altr_ocram_trigger",
+			  .mode = (S_IRUGO | S_IWUSR) },
+		.show = NULL,
+		.store = altr_ecc_mgr_trig
+	},
+	{
+		.attr = {.name = NULL }
+	}
+};
+#endif	/* #ifdef CONFIG_EDAC_DEBUG */
+
 const struct ecc_mgr_prv_data ocramecc_data = {
 	.ce_clear_mask = (ALTR_OCR_ECC_EN_MASK | ALTR_OCR_ECC_SERR_MASK),
 	.ue_clear_mask = (ALTR_OCR_ECC_EN_MASK | ALTR_OCR_ECC_DERR_MASK),
+#ifdef CONFIG_EDAC_DEBUG
+	.eccmgr_sysfs_attr = altr_ocr_sysfs_attributes,
+	.init_mem = ocram_init_mem,
+	.free_mem = ocram_free_mem,
+	.ecc_enable_mask = ALTR_OCR_ECC_EN_MASK,
+	.ce_set_mask = (ALTR_OCR_ECC_EN_MASK | ALTR_OCR_ECC_INJS_MASK),
+	.ue_set_mask = (ALTR_OCR_ECC_EN_MASK | ALTR_OCR_ECC_INJD_MASK),
+	.trig_alloc_sz = (32 * sizeof(u32)),
+#endif
 };
-
diff --git a/drivers/edac/altera_edac.h b/drivers/edac/altera_edac.h
index 2fe20c0..48d726f 100644
--- a/drivers/edac/altera_edac.h
+++ b/drivers/edac/altera_edac.h
@@ -30,7 +30,7 @@ struct ecc_mgr_prv_data {
 #ifdef CONFIG_EDAC_DEBUG
 	struct edac_dev_sysfs_attribute *eccmgr_sysfs_attr;
 	void * (*init_mem)(size_t size, void **other);
-	void (*free_mem)(void *p, void *other);
+	void (*free_mem)(void *p, size_t size, void *other);
 	int ecc_enable_mask;
 	int ce_set_mask;
 	int ue_set_mask;
-- 
1.9.1

