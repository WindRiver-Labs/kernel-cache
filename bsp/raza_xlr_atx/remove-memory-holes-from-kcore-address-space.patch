From a7c7ca6d5c63c96294e999d7ca8b2f53eec647b6 Mon Sep 17 00:00:00 2001
From: Bi Junxiao <Junxiao.Bi@windriver.com>
Date: Wed, 28 Apr 2010 09:46:08 +0800
Subject: [PATCH] remove memory holes from kcore address space

There are memory holes in RMI ref board's memory address space.
Kernel adds address from page 0 to page max_low_pfn into kcore
address space including holes. Reading memory through kcore will
fall into these holes and make a bus/cache error.
Add available memory regions from boot_mem_map into kcore address
space to avoid memory holes.

Signed-off-by: Bi Junxiao <junxiao.bi@windriver.com>
---
 arch/mips/mm/init.c       |   11 +++++++++++
 arch/mips/rmi/ptr/setup.c |   16 ++++++++++++++++
 2 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/arch/mips/mm/init.c b/arch/mips/mm/init.c
index 2612fa6..37bd3f0 100644
--- a/arch/mips/mm/init.c
+++ b/arch/mips/mm/init.c
@@ -366,10 +366,17 @@ void __init paging_init(void)
 	free_area_init_nodes(max_zone_pfns);
 }
 
+
+#ifndef CONFIG_RMI_PHOENIX
 static struct kcore_list kcore_mem, kcore_vmalloc;
 #ifdef CONFIG_64BIT
 static struct kcore_list kcore_kseg0;
 #endif
+#endif
+
+#ifdef CONFIG_RMI_PHOENIX
+extern void rmi_kclist_add_init(void);
+#endif
 
 void __init mem_init(void)
 {
@@ -423,6 +430,7 @@ void __init mem_init(void)
 	datasize =  (unsigned long) &_edata - (unsigned long) &_etext;
 	initsize =  (unsigned long) &__init_end - (unsigned long) &__init_begin;
 
+#ifndef CONFIG_RMI_PHOENIX
 #ifdef CONFIG_64BIT
 	if ((unsigned long) &_text > (unsigned long) CKSEG0)
 		/* The -4 is a hack so that user tools don't have to handle
@@ -432,6 +440,9 @@ void __init mem_init(void)
 	kclist_add(&kcore_mem, __va(0), max_low_pfn << PAGE_SHIFT);
 	kclist_add(&kcore_vmalloc, (void *)VMALLOC_START,
 		   VMALLOC_END-VMALLOC_START);
+#else
+	rmi_kclist_add_init();
+#endif
 
 	printk(KERN_INFO "Memory: %luk/%luk available (%ldk kernel code, "
 	       "%ldk reserved, %ldk data, %ldk init, %ldk highmem)\n",
diff --git a/arch/mips/rmi/ptr/setup.c b/arch/mips/rmi/ptr/setup.c
index d26723f..658be33 100644
--- a/arch/mips/rmi/ptr/setup.c
+++ b/arch/mips/rmi/ptr/setup.c
@@ -37,6 +37,7 @@
 #include <linux/bootmem.h>
 #include <linux/init.h>
 #include <linux/pm.h>
+#include <linux/proc_fs.h>
 
 #include <asm/irq.h>
 #include <asm/io.h>
@@ -190,6 +191,21 @@ static struct boot_mem_map_exclude_region dynamic_exclude_regions[] = {
 	[8] = {0, 0}, /* END of the list - MUST be the last entry always */
 };
 
+static struct kcore_list kcore_mem_seg[BOOT_MEM_MAP_MAX];
+
+void __init rmi_kclist_add_init(void)
+{
+	int i;
+	int mem_index = 0;
+
+	for (i = 0; i < boot_mem_map.nr_map; i++) {
+		if (boot_mem_map.map[i].type != BOOT_MEM_RAM) {
+			continue;
+		}
+		kclist_add(&kcore_mem_seg[mem_index++], __va(boot_mem_map.map[i].addr), boot_mem_map.map[i].size);
+	}
+}
+
 static char *get_psb_physmap_name(int type)
 {
 	int i = 0;
-- 
1.6.0.4

