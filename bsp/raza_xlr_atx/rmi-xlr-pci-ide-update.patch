From 4447839f989ebd42a1ef367493fcad7122b1a074 Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Wed, 16 Dec 2009 17:06:47 +0800
Subject: [PATCH] rmi xlr pci ide update

Refresh the pci IDE driver. The main difference is dropping
the use of MMIO.

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/pci/pci-phoenix.c    |    4 +-
 drivers/ide/ide-dma.c          |   66 ++++----
 drivers/ide/ide-iops.c         |   73 ++++++++
 drivers/ide/pci/pdc202xx_new.c |  385 +++++++---------------------------------
 4 files changed, 170 insertions(+), 358 deletions(-)

diff --git a/arch/mips/pci/pci-phoenix.c b/arch/mips/pci/pci-phoenix.c
index eec2039..a52f792 100644
--- a/arch/mips/pci/pci-phoenix.c
+++ b/arch/mips/pci/pci-phoenix.c
@@ -465,7 +465,7 @@ u8 rmi_ide_mm_inb (unsigned long port)
 	return((u8)__raw_readb(pci_ide_phys_to_virt(port)));
 }
 
-static u16 rmi_ide_mm_inw (unsigned long port)
+u16 rmi_ide_mm_inw (unsigned long port)
 {
 	return ((u16) swab16(__raw_readw(pci_ide_phys_to_virt(port))));
 }
@@ -487,7 +487,7 @@ rmi_ide_mm_outbsync (ide_drive_t *drive, u8 value, unsigned long port)
 	__raw_writeb(value, pci_ide_phys_to_virt(port));
 }
 
-static void rmi_ide_mm_outw (u16 value, unsigned long port)
+void rmi_ide_mm_outw (u16 value, unsigned long port)
 {
 	__raw_writew(swab16(value), pci_ide_phys_to_virt(port));
 }
diff --git a/drivers/ide/ide-dma.c b/drivers/ide/ide-dma.c
index b0e6263..046bd63 100644
--- a/drivers/ide/ide-dma.c
+++ b/drivers/ide/ide-dma.c
@@ -47,6 +47,7 @@
 #ifdef CONFIG_RMI_PHOENIX
 extern void rmi_ide_mm_outl (u32 value, unsigned long port);
 extern void rmi_ide_mm_outb (u8 value, unsigned long port);
+extern u8 rmi_ide_mm_inb (unsigned long port);
 #endif
 
 static const struct drive_list_entry drive_whitelist [] = {
@@ -383,14 +384,14 @@ void ide_dma_host_set(ide_drive_t *drive, int on)
 		dma_stat &= ~(1 << (5 + unit));
 
 	if (hwif->host_flags & IDE_HFLAG_MMIO)
-#ifdef CONFIG_RMI_PHOENIX
-		rmi_ide_mm_outb(dma_stat, hwif->dma_base + ATA_DMA_STATUS);
-#else
 		writeb(dma_stat,
 		       (void __iomem *)(hwif->dma_base + ATA_DMA_STATUS));
-#endif
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outb(dma_stat, (hwif->dma_base + ATA_DMA_STATUS));
+#else
 		outb(dma_stat, hwif->dma_base + ATA_DMA_STATUS);
+#endif
 }
 
 EXPORT_SYMBOL_GPL(ide_dma_host_set);
@@ -479,39 +480,38 @@ int ide_dma_setup(ide_drive_t *drive)
 
 	/* PRD table */
 	if (hwif->host_flags & IDE_HFLAG_MMIO)
-#ifdef CONFIG_RMI_PHOENIX
-		rmi_ide_mm_outl(hwif->dmatable_dma, 
-				(void __iomem *)(hwif->dma_base + ATA_DMA_TABLE_OFS));
-#else
 		writel(hwif->dmatable_dma,
-				(void __iomem *)(hwif->dma_base + ATA_DMA_TABLE_OFS));
-#endif
+		       (void __iomem *)(hwif->dma_base + ATA_DMA_TABLE_OFS));
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outl(hwif->dmatable_dma, (hwif->dma_base + ATA_DMA_TABLE_OFS));
+#else
 		outl(hwif->dmatable_dma, hwif->dma_base + ATA_DMA_TABLE_OFS);
+#endif
 
 	/* specify r/w */
 	if (mmio)
-#ifdef CONFIG_RMI_PHOENIX
-		rmi_ide_mm_outb(reading, hwif->dma_base + ATA_DMA_CMD);
-#else
 		writeb(reading, (void __iomem *)(hwif->dma_base + ATA_DMA_CMD));
-#endif
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outb(reading, (hwif->dma_base + ATA_DMA_CMD));
+#else
 		outb(reading, hwif->dma_base + ATA_DMA_CMD);
+#endif
 
 	/* read DMA status for INTR & ERROR flags */
 	dma_stat = hwif->tp_ops->read_sff_dma_status(hwif);
 
 	/* clear INTR & ERROR flags */
 	if (mmio)
-#ifdef CONFIG_RMI_PHOENIX
-		rmi_ide_mm_outb(dma_stat | 6, hwif->dma_base + ATA_DMA_STATUS);
-#else
 		writeb(dma_stat | 6,
 		       (void __iomem *)(hwif->dma_base + ATA_DMA_STATUS));
-#endif
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outb(dma_stat | 6,(hwif->dma_base + ATA_DMA_STATUS));
+#else
 		outb(dma_stat | 6, hwif->dma_base + ATA_DMA_STATUS);
+#endif
 
 	drive->waiting_for_dma = 1;
 	return 0;
@@ -537,17 +537,18 @@ void ide_dma_start(ide_drive_t *drive)
 	 * we do this part before issuing the drive cmd.
 	 */
 	if (hwif->host_flags & IDE_HFLAG_MMIO) {
-		dma_cmd = readb((void __iomem *)(hwif->dma_base + ATA_DMA_CMD));
 		/* start DMA */
-#ifdef CONFIG_RMI_PHOENIX
-		rmi_ide_mm_outb(dma_cmd | 1, hwif->dma_base + ATA_DMA_CMD);
-#else
+		dma_cmd = readb((void __iomem *)(hwif->dma_base + ATA_DMA_CMD));
 		writeb(dma_cmd | 1,
 		       (void __iomem *)(hwif->dma_base + ATA_DMA_CMD));
-#endif
 	} else {
+#ifdef CONFIG_RMI_PHOENIX
+		dma_cmd = rmi_ide_mm_inb((hwif->dma_base + ATA_DMA_CMD));
+		rmi_ide_mm_outb(dma_cmd | 1, (hwif->dma_base + ATA_DMA_CMD));
+#else
 		dma_cmd = inb(hwif->dma_base + ATA_DMA_CMD);
 		outb(dma_cmd | 1, hwif->dma_base + ATA_DMA_CMD);
+#endif
 	}
 
 	hwif->dma = 1;
@@ -567,17 +568,18 @@ int __ide_dma_end (ide_drive_t *drive)
 
 	if (mmio) {
 		/* get DMA command mode */
-		dma_cmd = readb((void __iomem *)(hwif->dma_base + ATA_DMA_CMD));
 		/* stop DMA */
-#ifdef CONFIG_RMI_PHOENIX
-		rmi_ide_mm_outb(dma_cmd & ~1, hwif->dma_base + ATA_DMA_CMD);
-#else
+		dma_cmd = readb((void __iomem *)(hwif->dma_base + ATA_DMA_CMD));
 		writeb(dma_cmd & ~1,
 		       (void __iomem *)(hwif->dma_base + ATA_DMA_CMD));
-#endif
 	} else {
+#ifdef CONFIG_RMI_PHOENIX
+		dma_cmd = rmi_ide_mm_inb((hwif->dma_base + ATA_DMA_CMD));
+		rmi_ide_mm_outb(dma_cmd & ~1, (hwif->dma_base + ATA_DMA_CMD));
+#else
 		dma_cmd = inb(hwif->dma_base + ATA_DMA_CMD);
 		outb(dma_cmd & ~1, hwif->dma_base + ATA_DMA_CMD);
+#endif
 	}
 
 	/* get DMA status */
@@ -585,14 +587,14 @@ int __ide_dma_end (ide_drive_t *drive)
 
 	if (mmio)
 		/* clear the INTR & ERROR bits */
-#ifdef CONFIG_RMI_PHOENIX
-		rmi_ide_mm_outb(dma_stat | 6, hwif->dma_base + ATA_DMA_STATUS);
-#else
 		writeb(dma_stat | 6,
 		       (void __iomem *)(hwif->dma_base + ATA_DMA_STATUS));
-#endif
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outb(dma_stat | 6,(hwif->dma_base + ATA_DMA_STATUS));
+#else
 		outb(dma_stat | 6, hwif->dma_base + ATA_DMA_STATUS);
+#endif
 
 	/* purge DMA mappings */
 	ide_destroy_dmatable(drive);
diff --git a/drivers/ide/ide-iops.c b/drivers/ide/ide-iops.c
index 40fbf42..846b8b4 100644
--- a/drivers/ide/ide-iops.c
+++ b/drivers/ide/ide-iops.c
@@ -32,14 +32,33 @@
  *	Conventional PIO operations for ATA devices
  */
 
+#ifdef CONFIG_RMI_PHOENIX
+extern u8 rmi_ide_mm_inb (unsigned long port);              /* readb  */
+extern void rmi_ide_mm_outb (u8 value, unsigned long port); /* writeb */
+extern void rmi_ide_mm_insl(unsigned long port, void *addr, unsigned int count);
+extern void rmi_ide_mm_outsl(unsigned long port, void *addr,unsigned int count);
+extern void rmi_ide_mm_insw(unsigned long port, void *addr, u32 count);
+extern void rmi_ide_mm_outsw(unsigned long port, void *addr,unsigned int count);
+extern u16 rmi_ide_mm_inw (unsigned long port);
+extern void rmi_ide_mm_outw (u16 value, unsigned long port);
+#endif
+
 static u8 ide_inb (unsigned long port)
 {
+#ifdef CONFIG_RMI_PHOENIX
+	return (u8) rmi_ide_mm_inb(port);
+#else
 	return (u8) inb(port);
+#endif
 }
 
 static void ide_outb (u8 val, unsigned long port)
 {
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(val, port);
+#else
 	outb(val, port);
+#endif
 }
 
 /*
@@ -84,7 +103,11 @@ void ide_exec_command(ide_hwif_t *hwif, u8 cmd)
 	if (hwif->host_flags & IDE_HFLAG_MMIO)
 		writeb(cmd, (void __iomem *)hwif->io_ports.command_addr);
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outb(cmd, hwif->io_ports.command_addr);
+#else
 		outb(cmd, hwif->io_ports.command_addr);
+#endif
 }
 EXPORT_SYMBOL_GPL(ide_exec_command);
 
@@ -93,7 +116,11 @@ u8 ide_read_status(ide_hwif_t *hwif)
 	if (hwif->host_flags & IDE_HFLAG_MMIO)
 		return readb((void __iomem *)hwif->io_ports.status_addr);
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		return rmi_ide_mm_inb(hwif->io_ports.status_addr);
+#else
 		return inb(hwif->io_ports.status_addr);
+#endif
 }
 EXPORT_SYMBOL_GPL(ide_read_status);
 
@@ -102,7 +129,11 @@ u8 ide_read_altstatus(ide_hwif_t *hwif)
 	if (hwif->host_flags & IDE_HFLAG_MMIO)
 		return readb((void __iomem *)hwif->io_ports.ctl_addr);
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		return rmi_ide_mm_inb(hwif->io_ports.ctl_addr);
+#else
 		return inb(hwif->io_ports.ctl_addr);
+#endif
 }
 EXPORT_SYMBOL_GPL(ide_read_altstatus);
 
@@ -111,7 +142,11 @@ u8 ide_read_sff_dma_status(ide_hwif_t *hwif)
 	if (hwif->host_flags & IDE_HFLAG_MMIO)
 		return readb((void __iomem *)(hwif->dma_base + ATA_DMA_STATUS));
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		return rmi_ide_mm_inb((hwif->dma_base + ATA_DMA_STATUS));
+#else
 		return inb(hwif->dma_base + ATA_DMA_STATUS);
+#endif
 }
 EXPORT_SYMBOL_GPL(ide_read_sff_dma_status);
 
@@ -129,7 +164,11 @@ void ide_set_irq(ide_hwif_t *hwif, int on)
 	if (hwif->host_flags & IDE_HFLAG_MMIO)
 		writeb(ctl, (void __iomem *)hwif->io_ports.ctl_addr);
 	else
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outb(ctl, hwif->io_ports.ctl_addr);
+#else
 		outb(ctl, hwif->io_ports.ctl_addr);
+#endif
 }
 EXPORT_SYMBOL_GPL(ide_set_irq);
 
@@ -156,7 +195,11 @@ void ide_tf_load(ide_drive_t *drive, ide_task_t *task)
 		if (mmio)
 			writew(data, (void __iomem *)io_ports->data_addr);
 		else
+#ifdef CONFIG_RMI_PHOENIX
+			rmi_ide_mm_outw(data, io_ports->data_addr);
+#else
 			outw(data, io_ports->data_addr);
+#endif
 	}
 
 	if (task->tf_flags & IDE_TFLAG_OUT_HOB_FEATURE)
@@ -210,7 +253,11 @@ void ide_tf_read(ide_drive_t *drive, ide_task_t *task)
 		if (mmio)
 			data = readw((void __iomem *)io_ports->data_addr);
 		else
+#ifdef CONFIG_RMI_PHOENIX
+			data = rmi_ide_mm_inw(io_ports->data_addr);
+#else
 			data = inw(io_ports->data_addr);
+#endif
 
 		tf->data = data & 0xff;
 		tf->hob_data = (data >> 8) & 0xff;
@@ -292,7 +339,11 @@ void ide_input_data(ide_drive_t *drive, struct request *rq, void *buf,
 		if (mmio)
 			__ide_mm_insl((void __iomem *)data_addr, buf, len / 4);
 		else
+#ifdef CONFIG_RMI_PHOENIX
+			rmi_ide_mm_insl(data_addr, buf, len / 4);
+#else
 			insl(data_addr, buf, len / 4);
+#endif
 
 		if ((io_32bit & 2) && !mmio)
 			local_irq_restore(flags);
@@ -302,13 +353,22 @@ void ide_input_data(ide_drive_t *drive, struct request *rq, void *buf,
 				__ide_mm_insw((void __iomem *)data_addr,
 						(u8 *)buf + (len & ~3), 1);
 			else
+#ifdef CONFIG_RMI_PHOENIX
+				rmi_ide_mm_insw(data_addr,
+						(u8 *)buf + (len & ~3), 1);
+#else
 				insw(data_addr, (u8 *)buf + (len & ~3), 1);
+#endif
 		}
 	} else {
 		if (mmio)
 			__ide_mm_insw((void __iomem *)data_addr, buf, len / 2);
 		else
+#ifdef CONFIG_RMI_PHOENIX
+			rmi_ide_mm_insw(data_addr, buf, len / 2);
+#else
 			insw(data_addr, buf, len / 2);
+#endif
 	}
 }
 EXPORT_SYMBOL_GPL(ide_input_data);
@@ -338,7 +398,11 @@ void ide_output_data(ide_drive_t *drive, struct request *rq, void *buf,
 		if (mmio)
 			__ide_mm_outsl((void __iomem *)data_addr, buf, len / 4);
 		else
+#ifdef CONFIG_RMI_PHOENIX
+			rmi_ide_mm_outsl(data_addr, buf, len / 4);
+#else
 			outsl(data_addr, buf, len / 4);
+#endif
 
 		if ((io_32bit & 2) && !mmio)
 			local_irq_restore(flags);
@@ -348,13 +412,22 @@ void ide_output_data(ide_drive_t *drive, struct request *rq, void *buf,
 				__ide_mm_outsw((void __iomem *)data_addr,
 						 (u8 *)buf + (len & ~3), 1);
 			else
+#ifdef CONFIG_RMI_PHOENIX
+				rmi_ide_mm_outsw(data_addr,
+						 (u8 *)buf + (len & ~3), 1);
+#else
 				outsw(data_addr, (u8 *)buf + (len & ~3), 1);
+#endif
 		}
 	} else {
 		if (mmio)
 			__ide_mm_outsw((void __iomem *)data_addr, buf, len / 2);
 		else
+#ifdef CONFIG_RMI_PHOENIX
+			rmi_ide_mm_outsw(data_addr, buf, len / 2);
+#else
 			outsw(data_addr, buf, len / 2);
+#endif
 	}
 }
 EXPORT_SYMBOL_GPL(ide_output_data);
diff --git a/drivers/ide/pci/pdc202xx_new.c b/drivers/ide/pci/pdc202xx_new.c
index efffded..3f1e5d9 100644
--- a/drivers/ide/pci/pdc202xx_new.c
+++ b/drivers/ide/pci/pdc202xx_new.c
@@ -41,310 +41,6 @@
 #define DBG(fmt, args...)
 #endif
 
-#ifdef CONFIG_RMI_PHOENIX
-extern void rmi_ide_mm_outb (u8 value, unsigned long port);
-extern u8 rmi_ide_mm_inb (unsigned long port);
-extern void rmi_ide_mm_insw(unsigned long port, void *addr, u32 count);
-extern void rmi_ide_mm_insl(unsigned long port, void *addr, unsigned int count);
-extern void rmi_ide_mm_outsw(unsigned long port, void *addr, unsigned int count);
-extern void rmi_ide_mm_outsl(unsigned long port, void *addr, unsigned int count);
-#undef inb
-#define inb rmi_ide_mm_inb
-#undef outb
-#define outb rmi_ide_mm_outb
-
-void rmi_ata_vlb_sync(unsigned long port)
-{
-	(void)inb(port);
-	(void)inb(port);
-	(void)inb(port);
-}   
-
-void phnx_exec_command(ide_hwif_t *hwif, u8 cmd)
-{
-	if (hwif->host_flags & IDE_HFLAG_MMIO)
-		rmi_ide_mm_outb(cmd, hwif->io_ports.command_addr);
-	else
-		outb(cmd, hwif->io_ports.command_addr);
-}
-
-u8 phnx_read_status(ide_hwif_t *hwif)
-{
-	if (hwif->host_flags & IDE_HFLAG_MMIO)
-		return rmi_ide_mm_inb(hwif->io_ports.status_addr);
-	else
-		return inb(hwif->io_ports.status_addr);
-}
-
-u8 phnx_read_altstatus(ide_hwif_t *hwif)
-{
-	if (hwif->host_flags & IDE_HFLAG_MMIO)
-		return rmi_ide_mm_inb(hwif->io_ports.ctl_addr);
-	else
-		return inb(hwif->io_ports.ctl_addr);
-}
-
-u8 phnx_read_sff_dma_status(ide_hwif_t *hwif)
-{
-	if (hwif->host_flags & IDE_HFLAG_MMIO)
-		return rmi_ide_mm_inb(hwif->dma_base + ATA_DMA_STATUS);
-	else
-		return inb(hwif->dma_base + ATA_DMA_STATUS);
-}
-
-void phnx_set_irq(ide_hwif_t *hwif, int on)
-{
-	u8 ctl = ATA_DEVCTL_OBS;
-
-	if (on == 4) { /* hack for SRST */
-		ctl |= 4;
-		on &= ~4;
-	}
-
-	ctl |= on ? 0 : 2;
-
-	if (hwif->host_flags & IDE_HFLAG_MMIO)
-		rmi_ide_mm_outb(ctl, hwif->io_ports.ctl_addr);
-	else
-		outb(ctl, hwif->io_ports.ctl_addr);
-}
-
-void phnx_tf_load(ide_drive_t *drive, ide_task_t *task)
-{
-	ide_hwif_t *hwif = drive->hwif;
-	struct ide_io_ports *io_ports = &hwif->io_ports;
-	struct ide_taskfile *tf = &task->tf;
-	void (*tf_outb)(u8 addr, unsigned long port);
-	u8 mmio = (hwif->host_flags & IDE_HFLAG_MMIO) ? 1 : 0;
-	u8 HIHI = (task->tf_flags & IDE_TFLAG_LBA48) ? 0xE0 : 0xEF;
-
-	if (mmio)
-		tf_outb = rmi_ide_mm_outb;
-
-	if (task->tf_flags & IDE_TFLAG_FLAGGED)
-		HIHI = 0xFF;
-
-	if (task->tf_flags & IDE_TFLAG_OUT_DATA) {
-		u16 data = (tf->hob_data << 8) | tf->data;
-
-		if (mmio)
-			writew(data, (void __iomem *)io_ports->data_addr);
-	}
-
-	if (task->tf_flags & IDE_TFLAG_OUT_HOB_FEATURE)
-		tf_outb(tf->hob_feature, io_ports->feature_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_HOB_NSECT)
-		tf_outb(tf->hob_nsect, io_ports->nsect_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_HOB_LBAL)
-		tf_outb(tf->hob_lbal, io_ports->lbal_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_HOB_LBAM)
-		tf_outb(tf->hob_lbam, io_ports->lbam_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_HOB_LBAH)
-		tf_outb(tf->hob_lbah, io_ports->lbah_addr);
-
-	if (task->tf_flags & IDE_TFLAG_OUT_FEATURE)
-		tf_outb(tf->feature, io_ports->feature_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_NSECT)
-		tf_outb(tf->nsect, io_ports->nsect_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_LBAL)
-		tf_outb(tf->lbal, io_ports->lbal_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_LBAM)
-		tf_outb(tf->lbam, io_ports->lbam_addr);
-	if (task->tf_flags & IDE_TFLAG_OUT_LBAH)
-		tf_outb(tf->lbah, io_ports->lbah_addr);
-
-	if (task->tf_flags & IDE_TFLAG_OUT_DEVICE)
-		tf_outb((tf->device & HIHI) | drive->select.all,
-			 io_ports->device_addr);
-}
-
-void phnx_tf_read(ide_drive_t *drive, ide_task_t *task)
-{
-	ide_hwif_t *hwif = drive->hwif;
-	struct ide_io_ports *io_ports = &hwif->io_ports;
-	struct ide_taskfile *tf = &task->tf;
-	void (*tf_outb)(u8 addr, unsigned long port);
-	u8 (*tf_inb)(unsigned long port);
-	u8 mmio = (hwif->host_flags & IDE_HFLAG_MMIO) ? 1 : 0;
-
-	if (mmio)
-		tf_outb = rmi_ide_mm_outb;
-		tf_inb  = rmi_ide_mm_inb;
-
-	if (task->tf_flags & IDE_TFLAG_IN_DATA) {
-		u16 data;
-
-		if (mmio)
-			data = readw((void __iomem *)io_ports->data_addr);
-
-		tf->data = data & 0xff;
-		tf->hob_data = (data >> 8) & 0xff;
-	}
-
-	/* be sure we're looking at the low order bits */
-	tf_outb(ATA_DEVCTL_OBS & ~0x80, io_ports->ctl_addr);
-
-	if (task->tf_flags & IDE_TFLAG_IN_FEATURE)
-		tf->feature = tf_inb(io_ports->feature_addr);
-	if (task->tf_flags & IDE_TFLAG_IN_NSECT)
-		tf->nsect  = tf_inb(io_ports->nsect_addr);
-	if (task->tf_flags & IDE_TFLAG_IN_LBAL)
-		tf->lbal   = tf_inb(io_ports->lbal_addr);
-	if (task->tf_flags & IDE_TFLAG_IN_LBAM)
-		tf->lbam   = tf_inb(io_ports->lbam_addr);
-	if (task->tf_flags & IDE_TFLAG_IN_LBAH)
-		tf->lbah   = tf_inb(io_ports->lbah_addr);
-	if (task->tf_flags & IDE_TFLAG_IN_DEVICE)
-		tf->device = tf_inb(io_ports->device_addr);
-
-	if (task->tf_flags & IDE_TFLAG_LBA48) {
-		tf_outb(ATA_DEVCTL_OBS | 0x80, io_ports->ctl_addr);
-
-		if (task->tf_flags & IDE_TFLAG_IN_HOB_FEATURE)
-			tf->hob_feature = tf_inb(io_ports->feature_addr);
-		if (task->tf_flags & IDE_TFLAG_IN_HOB_NSECT)
-			tf->hob_nsect   = tf_inb(io_ports->nsect_addr);
-		if (task->tf_flags & IDE_TFLAG_IN_HOB_LBAL)
-			tf->hob_lbal    = tf_inb(io_ports->lbal_addr);
-		if (task->tf_flags & IDE_TFLAG_IN_HOB_LBAM)
-			tf->hob_lbam    = tf_inb(io_ports->lbam_addr);
-		if (task->tf_flags & IDE_TFLAG_IN_HOB_LBAH)
-			tf->hob_lbah    = tf_inb(io_ports->lbah_addr);
-	}
-}
-
-static inline void __phnx_mm_insw(void __iomem *port, void *addr, u32 count)
-{
-	__ide_flush_prologue();
-	rmi_ide_mm_insw((unsigned long)port, addr, count);
-	__ide_flush_dcache_range((unsigned long)addr, count * 2);
-	__ide_flush_epilogue();
-}
-
-static inline void __phnx_mm_insl(void __iomem *port, void *addr, u32 count)
-{
-	__ide_flush_prologue();
-	rmi_ide_mm_insl((unsigned long)port, addr, count);
-	__ide_flush_dcache_range((unsigned long)addr, count * 4);
-	__ide_flush_epilogue();
-}
-
-static inline void __phnx_mm_outsw(void __iomem *port, void *addr, u32 count)
-{
-	__ide_flush_prologue();
-	rmi_ide_mm_outsw((unsigned long)port, addr, count);
-	__ide_flush_dcache_range((unsigned long)addr, count * 2);
-	__ide_flush_epilogue();
-}
-
-static inline void __phnx_mm_outsl(void __iomem * port, void *addr, u32 count)
-{
-	__ide_flush_prologue();
-	rmi_ide_mm_outsl((unsigned long)port, addr, count);
-	__ide_flush_dcache_range((unsigned long)addr, count * 4);
-	__ide_flush_epilogue();
-}
-
-void phnx_input_data(ide_drive_t *drive, struct request *rq, void *buf,
-		    unsigned int len)
-{
-	ide_hwif_t *hwif = drive->hwif;
-	struct ide_io_ports *io_ports = &hwif->io_ports;
-	unsigned long data_addr = io_ports->data_addr;
-	u8 io_32bit = drive->io_32bit;
-	u8 mmio = (hwif->host_flags & IDE_HFLAG_MMIO) ? 1 : 0;
-
-	len++;
-
-	if (io_32bit) {
-		unsigned long uninitialized_var(flags);
-
-		if ((io_32bit & 2) && !mmio) {
-			local_irq_save(flags);
-			rmi_ata_vlb_sync(io_ports->nsect_addr);
-		}
-
-		if (mmio)
-			__phnx_mm_insl((void __iomem *)data_addr, buf, len / 4);
-		else
-			insl(data_addr, buf, len / 4);
-
-		if ((io_32bit & 2) && !mmio)
-			local_irq_restore(flags);
-
-		if ((len & 3) >= 2) {
-			if (mmio)
-				__phnx_mm_insw((void __iomem *)data_addr,
-						(u8 *)buf + (len & ~3), 1);
-			else
-				insw(data_addr, (u8 *)buf + (len & ~3), 1);
-		}
-	} else {
-		if (mmio)
-			__phnx_mm_insw((void __iomem *)data_addr, buf, len / 2);
-		else
-			insw(data_addr, buf, len / 2);
-	}
-}
-
-void phnx_output_data(ide_drive_t *drive, struct request *rq, void *buf,
-		     unsigned int len)
-{
-	ide_hwif_t *hwif = drive->hwif;
-	struct ide_io_ports *io_ports = &hwif->io_ports;
-	unsigned long data_addr = io_ports->data_addr;
-	u8 io_32bit = drive->io_32bit;
-	u8 mmio = (hwif->host_flags & IDE_HFLAG_MMIO) ? 1 : 0;
-
-	if (io_32bit) {
-		unsigned long uninitialized_var(flags);
-
-		if ((io_32bit & 2) && !mmio) {
-			local_irq_save(flags);
-			rmi_ata_vlb_sync(io_ports->nsect_addr);
-		}
-
-		if (mmio)
-			__phnx_mm_outsl((void __iomem *)data_addr, buf, len / 4);
-		else
-			outsl(data_addr, buf, len / 4);
-
-		if ((io_32bit & 2) && !mmio)
-			local_irq_restore(flags);
-
-		if ((len & 3) >= 2) {
-			if (mmio)
-				__phnx_mm_outsw((void __iomem *)data_addr,
-						 (u8 *)buf + (len & ~3), 1);
-			else
-				outsw(data_addr, (u8 *)buf + (len & ~3), 1);
-		}
-	} else {
-		if (mmio)
-			__phnx_mm_outsw((void __iomem *)data_addr, buf, len / 2);
-		else
-			outsw(data_addr, buf, len / 2);
-	}
-}
-
-static const struct ide_tp_ops phnx_tp_ops = {
-	.exec_command		= phnx_exec_command,
-	.read_status		= phnx_read_status,
-	.read_altstatus		= phnx_read_altstatus,
-	.read_sff_dma_status	= phnx_read_sff_dma_status,
-
-	.set_irq		= phnx_set_irq,
-
-	.tf_load		= phnx_tf_load,
-	.tf_read		= phnx_tf_read,
-
-	.input_data		= phnx_input_data,
-	.output_data		= phnx_output_data,
-};
-#endif
-
-
-
 static const char *pdc_quirk_drives[] = {
 	"QUANTUM FIREBALLlct08 08",
 	"QUANTUM FIREBALLP KA6.4",
@@ -380,6 +76,11 @@ static u8 max_dma_rate(struct pci_dev *pdev)
 	return mode;
 }
 
+#ifdef CONFIG_RMI_PHOENIX
+extern void rmi_ide_mm_outb (u8 value, unsigned long port);
+extern u8 rmi_ide_mm_inb (unsigned long port);
+#endif
+
 /**
  * get_indexed_reg - Get indexed register
  * @hwif: for the port address
@@ -389,8 +90,13 @@ static u8 get_indexed_reg(ide_hwif_t *hwif, u8 index)
 {
 	u8 value;
 
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(index, hwif->dma_base + 1);
+	value = rmi_ide_mm_inb(hwif->dma_base + 3);
+#else
 	outb(index, hwif->dma_base + 1);
 	value = inb(hwif->dma_base + 3);
+#endif
 
 	DBG("index[%02X] value[%02X]\n", index, value);
 	return value;
@@ -403,8 +109,13 @@ static u8 get_indexed_reg(ide_hwif_t *hwif, u8 index)
  */
 static void set_indexed_reg(ide_hwif_t *hwif, u8 index, u8 value)
 {
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(index, hwif->dma_base + 1);
+	rmi_ide_mm_outb(value, hwif->dma_base + 3);
+#else
 	outb(index, hwif->dma_base + 1);
 	outb(value, hwif->dma_base + 3);
+#endif
 	DBG("index[%02X] value[%02X]\n", index, value);
 }
 
@@ -542,6 +253,16 @@ static long __devinit read_counter(u32 dma_base)
 		last = count;
 
 		/* Read the current count */
+#ifdef CONFIG_RMI_PHOENIX
+		rmi_ide_mm_outb(0x20, pri_dma_base + 0x01);
+		cnt0 = rmi_ide_mm_inb(pri_dma_base + 0x03);
+		rmi_ide_mm_outb(0x21, pri_dma_base + 0x01);
+		cnt1 = rmi_ide_mm_inb(pri_dma_base + 0x03);
+		rmi_ide_mm_outb(0x20, sec_dma_base + 0x01);
+		cnt2 = rmi_ide_mm_inb(sec_dma_base + 0x03);
+		rmi_ide_mm_outb(0x21, sec_dma_base + 0x01);
+		cnt3 = rmi_ide_mm_inb(sec_dma_base + 0x03);
+#else
 		outb(0x20, pri_dma_base + 0x01);
 		cnt0 = inb(pri_dma_base + 0x03);
 		outb(0x21, pri_dma_base + 0x01);
@@ -550,6 +271,7 @@ static long __devinit read_counter(u32 dma_base)
 		cnt2 = inb(sec_dma_base + 0x03);
 		outb(0x21, sec_dma_base + 0x01);
 		cnt3 = inb(sec_dma_base + 0x03);
+#endif
 
 		count = (cnt3 << 23) | (cnt2 << 15) | (cnt1 << 8) | cnt0;
 
@@ -582,10 +304,17 @@ static long __devinit detect_pll_input_clock(unsigned long dma_base)
 	do_gettimeofday(&start_time);
 
 	/* Start the test mode */
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(0x01, dma_base + 0x01);
+	scr1 = rmi_ide_mm_inb(dma_base + 0x03);
+	DBG("scr1[%02X]\n", scr1);
+	rmi_ide_mm_outb(scr1 | 0x40, dma_base + 0x03);
+#else
 	outb(0x01, dma_base + 0x01);
 	scr1 = inb(dma_base + 0x03);
 	DBG("scr1[%02X]\n", scr1);
 	outb(scr1 | 0x40, dma_base + 0x03);
+#endif
 
 	/* Let the counter run for 10 ms. */
 	mdelay(10);
@@ -594,10 +323,17 @@ static long __devinit detect_pll_input_clock(unsigned long dma_base)
 	do_gettimeofday(&end_time);
 
 	/* Stop the test mode */
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(0x01, dma_base + 0x01);
+	scr1 = rmi_ide_mm_inb(dma_base + 0x03);
+	DBG("scr1[%02X]\n", scr1);
+	rmi_ide_mm_outb(scr1 & ~0x40, dma_base + 0x03);
+#else
 	outb(0x01, dma_base + 0x01);
 	scr1 = inb(dma_base + 0x03);
 	DBG("scr1[%02X]\n", scr1);
 	outb(scr1 & ~0x40, dma_base + 0x03);
+#endif
 
 	/*
 	 * Calculate the input clock in Hz
@@ -681,10 +417,17 @@ static unsigned int __devinit init_chipset_pdcnew(struct pci_dev *dev)
 	/* Show the current clock value of PLL control register
 	 * (maybe already configured by the BIOS)
 	 */
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(0x02, sec_dma_base + 0x01);
+	pll_ctl0 = rmi_ide_mm_inb(sec_dma_base + 0x03);
+	rmi_ide_mm_outb(0x03, sec_dma_base + 0x01);
+	pll_ctl1 = rmi_ide_mm_inb(sec_dma_base + 0x03);
+#else
 	outb(0x02, sec_dma_base + 0x01);
 	pll_ctl0 = inb(sec_dma_base + 0x03);
 	outb(0x03, sec_dma_base + 0x01);
 	pll_ctl1 = inb(sec_dma_base + 0x03);
+#endif
 
 	DBG("pll_ctl[%02X][%02X]\n", pll_ctl0, pll_ctl1);
 #endif
@@ -728,10 +471,17 @@ static unsigned int __devinit init_chipset_pdcnew(struct pci_dev *dev)
 
 	DBG("Writing pll_ctl[%02X][%02X]\n", pll_ctl0, pll_ctl1);
 
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(0x02,     sec_dma_base + 0x01);
+	rmi_ide_mm_outb(pll_ctl0, sec_dma_base + 0x03);
+	rmi_ide_mm_outb(0x03,     sec_dma_base + 0x01);
+	rmi_ide_mm_outb(pll_ctl1, sec_dma_base + 0x03);
+#else
 	outb(0x02,     sec_dma_base + 0x01);
 	outb(pll_ctl0, sec_dma_base + 0x03);
 	outb(0x03,     sec_dma_base + 0x01);
 	outb(pll_ctl1, sec_dma_base + 0x03);
+#endif
 
 	/* Wait the PLL circuit to be stable */
 	mdelay(30);
@@ -740,10 +490,17 @@ static unsigned int __devinit init_chipset_pdcnew(struct pci_dev *dev)
 	/*
 	 *  Show the current clock value of PLL control register
 	 */
+#ifdef CONFIG_RMI_PHOENIX
+	rmi_ide_mm_outb(0x02, sec_dma_base + 0x01);
+	pll_ctl0 = rmi_ide_mm_inb(sec_dma_base + 0x03);
+	rmi_ide_mm_outb(0x03, sec_dma_base + 0x01);
+	pll_ctl1 = rmi_ide_mm_inb(sec_dma_base + 0x03);
+#else
 	outb(0x02, sec_dma_base + 0x01);
 	pll_ctl0 = inb(sec_dma_base + 0x03);
 	outb(0x03, sec_dma_base + 0x01);
 	pll_ctl1 = inb(sec_dma_base + 0x03);
+#endif
 
 	DBG("pll_ctl[%02X][%02X]\n", pll_ctl0, pll_ctl1);
 #endif
@@ -783,24 +540,6 @@ static const struct ide_port_ops pdcnew_port_ops = {
 	.cable_detect		= pdcnew_cable_detect,
 };
 
-#ifdef CONFIG_RMI_PHOENIX
-
-#define DECLARE_PDCNEW_DEV(udma) \
-	{ \
-		.name		= DRV_NAME, \
-		.init_chipset	= init_chipset_pdcnew, \
-		.port_ops	= &pdcnew_port_ops, \
-		.tp_ops     = &phnx_tp_ops, \
-		.host_flags	= IDE_HFLAG_POST_SET_MODE | \
-				  IDE_HFLAG_ERROR_STOPS_FIFO | \
-				  IDE_HFLAG_OFF_BOARD | IDE_HFLAG_MMIO, \
-		.pio_mask	= ATA_PIO4, \
-		.mwdma_mask	= ATA_MWDMA2, \
-		.udma_mask	= udma, \
-	}
-
-#else
-
 #define DECLARE_PDCNEW_DEV(udma) \
 	{ \
 		.name		= DRV_NAME, \
@@ -814,8 +553,6 @@ static const struct ide_port_ops pdcnew_port_ops = {
 		.udma_mask	= udma, \
 	}
 
-#endif
-
 static const struct ide_port_info pdcnew_chipsets[] __devinitdata = {
 	/* 0: PDC202{68,70} */		DECLARE_PDCNEW_DEV(ATA_UDMA5),
 	/* 1: PDC202{69,71,75,76,77} */	DECLARE_PDCNEW_DEV(ATA_UDMA6),
-- 
1.6.0.4

