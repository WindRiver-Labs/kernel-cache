From 90332ee7aac99cc500e3a39f31e6e37c7dfa78fe Mon Sep 17 00:00:00 2001
From: Tonyliu <Bo.Liu@windriver.com>
Date: Thu, 15 Jan 2009 13:43:33 +0800
Subject: [PATCH] imx31lite: add board specific definitions

Add and defines/resources that are only for the imx31lite
and cannot be defined by the common code.

Signed-off-by: Tonyliu <Bo.Liu@windriver.com>
---
 arch/arm/plat-mxc/include/mach/board-mx31lite.h |  205 ++++++++++++++++++++++-
 1 files changed, 203 insertions(+), 2 deletions(-)

diff --git a/arch/arm/plat-mxc/include/mach/board-mx31lite.h b/arch/arm/plat-mxc/include/mach/board-mx31lite.h
index e4e5cf5..d2fd4ed 100644
--- a/arch/arm/plat-mxc/include/mach/board-mx31lite.h
+++ b/arch/arm/plat-mxc/include/mach/board-mx31lite.h
@@ -13,6 +13,20 @@
 
 #define MXC_MAX_EXP_IO_LINES	16
 
+/* Size of contiguous memory for DMA and other h/w blocks */
+#define CONSISTENT_DMA_SIZE SZ_32M
+
+/* I2C configuration */
+/*!
+ * This defines the number of I2C modules in the MXC platform
+ * Defined as 1, as MC13783 on ADS uses the other pins
+ */
+#define I2C_NR                  1
+/*!
+ * This define specifies the frequency divider value to be written into
+ * the I2C \b IFDR register.
+ */
+#define I2C1_FRQ_DIV            0x17
 
 /*
  * Memory Size parameters
@@ -29,10 +43,197 @@
 /*
  * Size of memory available to kernel
  */
-#define MEM_SIZE		(SDRAM_MEM_SIZE - MXC_MBX_MEM_SIZE)
+#define MEM_SIZE		SDRAM_MEM_SIZE
 
 #define MXC_LL_UART_PADDR	UART1_BASE_ADDR
 #define MXC_LL_UART_VADDR	AIPS1_IO_ADDRESS(UART1_BASE_ADDR)
 
-#endif /* __ASM_ARCH_MXC_BOARD_MX31ADS_H__ */
+/*!
+ * Base address of PBC controller
+ */
+#define PBC_BASE_ADDRESS        IO_ADDRESS(CS4_BASE_ADDR)
+/* Offsets for the PBC Controller register */
+/*!
+ * PBC Board status register offset
+ */
+#define PBC_BSTAT               0x000002
+/*!
+ * PBC Board control register 1 set address.
+ */
+#define PBC_BCTRL1_SET          0x000004
+
+/*!
+ * PBC Board control register 1 clear address.
+ */
+#define PBC_BCTRL1_CLEAR        0x000006
+/*!
+ * PBC Board control register 2 set address.
+ */
+#define PBC_BCTRL2_SET          0x000008
+/*!
+ * PBC Board control register 2 clear address.
+ */
+#define PBC_BCTRL2_CLEAR        0x00000A
+
+/*!
+ * PBC Board control register 3 set address.
+ */
+#define PBC_BCTRL3_SET          0x00000C
+/*!
+ * PBC Board control register 3 clear address.
+ */
+#define PBC_BCTRL3_CLEAR        0x00000E
+/*!
+ * PBC Board control register 4 set address.
+ */
+#define PBC_BCTRL4_SET          0x000010
+/*!
+ * PBC Board control register 4 clear address.
+ */
+#define PBC_BCTRL4_CLEAR        0x000012
+/*!
+ * PBC Board status register 1.
+ */
+#define PBC_BSTAT1              0x000014
+
+/*!
+ * PBC Board interrupt status register.
+ */
+#define PBC_INTSTATUS           0x000016
+
+/*!
+ * PBC Board interrupt current status register.
+ */
+#define PBC_INTCURR_STATUS      0x000018
+/*!
+ * PBC Interrupt mask register set address.
+ */
+#define PBC_INTMASK_SET         0x00001A
+/*!
+ * PBC Interrupt mask register clear address.
+ */
+#define PBC_INTMASK_CLEAR       0x00001C
+
+/* PBC Board Status Register 1 bit definitions */
+#define PBC_BSTAT1_NF_DET       0x0001  /* NAND flash card. 0 = connected */
+#define PBC_BSTAT1_KP_ON        0x0002  /* KPP board. 0 = connected */
+#define PBC_BSTAT1_LS           0x0004  /* KPP:LightSense signal */
+#define PBC_BSTAT1_ATA_IOCS16   0x0008  /* ATA_IOCS16 signal */
+#define PBC_BSTAT1_ATA_CBLID    0x0010  /* ATA_CBLID signal */
+#define PBC_BSTAT1_ATA_DASP     0x0020  /* ATA_DASP signal */
+#define PBC_BSTAT1_PWR_RDY      0x0040  /* MC13783 power. 1 = ready */
+#define PBC_BSTAT1_SD1_WP       0x0080  /* 0 = SD1 card is write protected */
+#define PBC_BSTAT1_SD2_WP       0x0100  /* 0 = SD2 card is write protected */
+#define PBC_BSTAT1_FS1          0x0200  /* KPP:FlipSense1 signal */
+#define PBC_BSTAT1_FS2          0x0400  /* KPP:FlipSense2 signal */
+#define PBC_BSTAT1_PTT          0x0800  /* KPP:PTT signal */
+#define PBC_BSTAT1_MC13783_IN   0x1000  /* MC13783 board. 0 = connected. */
+
+/* PBC Board Control Register 1 bit definitions */
+#define PBC_BCTRL1_ERST         0x0001  /* Ethernet Reset */
+#define PBC_BCTRL1_URST         0x0002  /* Reset External UART controller */
+#define PBC_BCTRL1_UENA         0x0004  /* Enable UART A transceiver */
+#define PBC_BCTRL1_UENB         0x0008  /* Enable UART B transceiver */
+#define PBC_BCTRL1_UENCE        0x0010  /* Enable UART CE transceiver */
+#define PBC_BCTRL1_IREN         0x0020  /* Enable the IRDA transmitter */
+#define PBC_BCTRL1_LED0         0x0040  /* Used to control LED 0 (green) */
+#define PBC_BCTRL1_LED1         0x0080  /* Used to control LED 1 (yellow) */
+#define PBC_BCTRL1_SENSOR1_ON   0x0600  /* Enable Sensor 1 */
+#define PBC_BCTRL1_SENSOR2_ON   0x3000  /* Enable Sensor 2 */
+#define PBC_BCTRL1_BEND         0x4000  /* Big Endian Select */
+#define PBC_BCTRL1_LCDON        0x8000  /* Enable the LCD */
+
+/* PBC Board Control Register 2 bit definitions */
+#define PBC_BCTRL2_USELA    0x0001  /* UART A Select, */
+/* 0 = UART1, 1 = UART5 */
+#define PBC_BCTRL2_USELB    0x0002  /* UART B Select, */
+/* 0 = UART3, 1 = UART5 */
+#define PBC_BCTRL2_USELC    0x0004  /* UART C Select, */
+/* 0 = UART2, 1 = UART1 */
+#define PBC_BCTRL2_UMODENA  0x0008  /* UART A Modem */
+/* Signals Enable, 0 = enabled */
+#define PBC_BCTRL2_UMODENC  0x0008  /* UART C Modem Signals */
+/* Enable, 0 = enabled */
+#define PBC_BCTRL2_CSI_EN   0x0020  /* Enable the CSI */
+/* interface, 0 = enabled */
+#define PBC_BCTRL2_ATA_EN   0x0040  /* Enable the ATA */
+/* interface, 0 = enabled */
+#define PBC_BCTRL2_ATA_SEL  0x0080  /* ATA Select, */
+/* 0 = group A, 1 = group B */
+#define PBC_BCTRL2_IRDA_MOD 0x0100  /* IRDA Mode (see CPLD spec) */
+#define PBC_BCTRL2_LDC_RST0 0x0200  /* LCD 0 Reset, 1 = reset signal asserted */
+#define PBC_BCTRL2_LDC_RST1 0x0400  /* LCD 1 Reset, 1 = reset signal asserted */
+#define PBC_BCTRL2_LDC_RST2 0x0800  /* LCD 2 Reset, 1 = reset signal asserted */
+#define PBC_BCTRL2_LDCIO_EN 0x1000  /* LCD GPIO Enable, 0 = enabled */
+#define PBC_BCTRL2_CT_CS    0x2000  /* Code Test Chip Select, */
+/* = Code Test selected */
+#define PBC_BCTRL2_VPP_EN   0x4000  /* PCMCIA VPP Enable, 1 = power on */
+#define PBC_BCTRL2_VCC_EN   0x8000  /* PCMCIA VCC Enable, 1 = power on */
+
+/* PBC Board Control Register 3 bit definitions */
+#define PBC_BCTRL3_OTG_FS_SEL   0x0001  /* USB OTG Full Speed Select, */
+/* 0 = PMIC, 1 = CPU */
+#define PBC_BCTRL3_OTG_FS_EN    0x0002  /* USB OTG Full Speed Enable, */
+/* 0 = enabled */
+#define PBC_BCTRL3_FSH_SEL  0x0004  /* USB Full Speed Host Select, */
+/* 0 = Group A, 1 = Group B */
+#define PBC_BCTRL3_FSH_EN   0x0008  /* USB Full Speed Host Enable, */
+/* 0 = enabled */
+#define PBC_BCTRL3_HSH_SEL  0x0010  /* USB High Speed Host Select, */
+/* 0 = Group A, 1 = Group B */
+#define PBC_BCTRL3_HSH_EN   0x0020  /* USB High Speed Host Enable, */
+/* 0 = enabled */
+#define PBC_BCTRL3_FSH_MOD  0x0040  /* USB Full Speed Host Mode, */
+/* 0 = Differential, 1 = Single ended */
+#define PBC_BCTRL3_OTG_HS_EN    0x0080  /* USB OTG High Speed Enable, */
+/* 0 = enabled */
+#define PBC_BCTRL3_OTG_VBUS_EN  0x0100  /* USB OTG VBUS Regulator Enable,*/
+/* 0 = enabled */
+#define PBC_BCTRL3_FSH_VBUS_EN  0x0200  /* USB Full Speed Host VBUS */
+/* Regulator Enable, 0 = enabled */
+#define PBC_BCTRL3_CARD1_SEL    0x0400  /* Card1 Select, 0 = SD1, 1 = MS1 */
+#define PBC_BCTRL3_CARD2_SEL    0x0800  /* Card2 Select, */
+/* 0 = PCMCIA & SD2, 1 = MS2 */
+#define PBC_BCTRL3_SYNTH_RST    0x1000  /* Audio Synthesizer Reset,*/
+/* 0 = reset asserted */
+#define PBC_BCTRL3_VSIM_EN  0x2000  /* VSIM Regulator Enable, */
+/* 1 = enabled */
+#define PBC_BCTRL3_VESIM_EN 0x4000  /* VESIM Regulator Enable, */
+/* 1 = enabled */
+#define PBC_BCTRL3_SPI3_RESET   0x8000  /* CSPI3 Connector Reset, */
+/* 0 = reset asserted */
+
+/* PBC Board Control Register 4 bit definitions */
+#define PBC_BCTRL4_CSI_MSB_EN   0x0001  /* CSI MSB Enable, */
+/* 0 = CSI_Data[3:0] enabled */
+#define PBC_BCTRL4_REGEN_SEL    0x0002  /* Regulator Enable */
+/* Select, 0 = enabled */
+#define PBC_BCTRL4_USER_OFF 0x0004  /* User Off Indication, */
+/* 1 = user off confirmation */
+#define PBC_BCTRL4_VIB_EN   0x0008  /* Vibrator Enable, 1 = enabled */
+#define PBC_BCTRL4_PCMCIA_EN    0x0010  /* PCMCIA Enable, */
+/* 0 = buffer enabled */
+
+/*! This is used to active or inactive ata signal in CPLD .
+ *  It is dependent with hardware
+ */
+#define PBC_ATA_SIGNAL_ACTIVE() \
+    do { \
+        __raw_writew(PBC_BCTRL2_ATA_SEL, \
+                PBC_BASE_ADDRESS + PBC_BCTRL2_SET);\
+        __raw_writew(PBC_BCTRL2_ATA_EN, \
+                PBC_BASE_ADDRESS + PBC_BCTRL2_CLEAR); \
+    } \
+while (0)
+
+#define PBC_ATA_SIGNAL_INACTIVE() \
+    do { \
+        __raw_writew(PBC_BCTRL2_ATA_EN, \
+                PBC_BASE_ADDRESS + PBC_BCTRL2_SET); \
+    } \
+while (0)
+
+#define MX31LITE_LAN_INT    IOMUX_TO_IRQ(MX31_PIN_SFS6)
+
+#endif /* __ASM_ARCH_MXC_BOARD_MX31LITE_H__ */
 
-- 
1.6.0.3

