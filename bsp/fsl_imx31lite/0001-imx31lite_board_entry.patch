From 46ccf2b73e08c00a7a2609219d58f9d90ed2043b Mon Sep 17 00:00:00 2001
From: TonyLiu <Bo.Liu@windriver.com>
Date: Mon, 27 Oct 2008 17:31:28 +0800
Subject: [PATCH] imx31lite_board_entry

MX31lite board dependent files.
Move board dependent devices init routine from device.c into
mx31lite.c

Signed-off-by: Tonyliu <Bo.Liu@windriver.com>
---
 arch/arm/mach-mx3/Kconfig    |   12 +++
 arch/arm/mach-mx3/mx31lite.c |  216 ++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 222 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-mx3/Kconfig b/arch/arm/mach-mx3/Kconfig
index db9431d..a5ba92a 100644
--- a/arch/arm/mach-mx3/Kconfig
+++ b/arch/arm/mach-mx3/Kconfig
@@ -21,5 +21,17 @@ config MACH_MX31LITE
 	  Include support for MX31 LITEKIT platform. This includes specific
 	  configurations for the board and its peripherals.
 
+config ISP1504_MXC
+    tristate "ISP1540 transceiver support"
+    help
+      Support for the ISP1504 USB transceiver on MXC platforms.
+
+config MXC_SDMA_API
+        bool "Use SDMA API"
+        default y
+        help
+           This selects the Freescale MXC SDMA API.
+           If unsure, say N.
+
 endmenu
 
diff --git a/arch/arm/mach-mx3/mx31lite.c b/arch/arm/mach-mx3/mx31lite.c
index d363a6e..79ddb15 100644
--- a/arch/arm/mach-mx3/mx31lite.c
+++ b/arch/arm/mach-mx3/mx31lite.c
@@ -2,6 +2,7 @@
  *  Copyright (C) 2000 Deep Blue Solutions Ltd
  *  Copyright (C) 2002 Shane Nay (shane@minirl.com)
  *  Copyright 2005-2007 Freescale Semiconductor, Inc. All Rights Reserved.
+ *  Copyright 2008 WindRiver System, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -22,16 +23,37 @@
 #include <linux/init.h>
 #include <linux/kernel.h>
 #include <linux/memory.h>
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/nodemask.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+#include <linux/spi/spi.h>
+
+#include <asm/irq.h>
+#include <asm/page.h>
+#include <asm/setup.h>
 
-#include <mach/hardware.h>
 #include <asm/mach-types.h>
 #include <asm/mach/arch.h>
+#include <asm/mach/irq.h>
 #include <asm/mach/time.h>
+#include <asm/mach/flash.h>
 #include <asm/mach/map.h>
+
+#include <mach/hardware.h>
 #include <mach/common.h>
-#include <asm/page.h>
-#include <asm/setup.h>
 #include <mach/board-mx31lite.h>
+#include <mach/clock.h>
+#include <mach/memory.h>
+#include <mach/gpio.h>
+#include <mach/imx-uart.h>
+#include <mach/iomux-mx3.h>
+#include <mach/spba.h>
+
+#include "crm_regs.h"
 
 /*
  * This file contains the board-specific initialization routines.
@@ -73,11 +95,193 @@ void __init mx31lite_map_io(void)
 	iotable_init(mx31lite_io_desc, ARRAY_SIZE(mx31lite_io_desc));
 }
 
+static struct resource smc911x_resources[] = {
+	[0] = {
+		.start  = CS4_BASE_ADDR,
+		.end    = CS4_BASE_ADDR + 0xffff,
+		.flags  = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start  = MX31LITE_LAN_INT,
+		.end    = MX31LITE_LAN_INT,
+		.flags  = IORESOURCE_IRQ,
+	}
+};
+
+static struct platform_device smc911x_device = {
+	.name   = "smc911x",
+	.id     = 0,
+	.num_resources  = ARRAY_SIZE(smc911x_resources),
+	.resource   = smc911x_resources,
+};
+
+#if defined(CONFIG_MTD_MXC)
+/* MX31 LITE has small (2M) NOR flash */
+static struct mtd_partition mxc_nor_partitions[] = {
+	{
+		.name       = "Bootloader",
+		.size       = 0x20000,
+		.offset     = 0,
+		.mask_flags = MTD_WRITEABLE | MTD_POWERUP_LOCK,
+	}, {
+		.name       = "Kernel",
+		.size       = MTDPART_SIZ_FULL,
+		.offset     = MTDPART_OFS_APPEND,
+		.mask_flags = MTD_POWERUP_LOCK,
+	},
+};
+
+static struct flash_platform_data mxc_flash_data = {
+	.map_name = "cfi_probe",
+	.width = 2,
+	.parts = mxc_nor_partitions,
+	.nr_parts = ARRAY_SIZE(mxc_nor_partitions),
+};
+
+static struct resource mxc_flash_resource = {
+	.start = 0xa0000000,
+	.end = 0xa0000000 + 0x00200000 - 1,
+	.flags = IORESOURCE_MEM,
+
+};
+
+static struct platform_device mxc_nor_mtd_device = {
+	.name = "mxc_nor_flash",
+	.id = 0,
+	.dev = {
+		.platform_data = &mxc_flash_data,
+	},
+	.num_resources = 1,
+	.resource = &mxc_flash_resource,
+};
+
+static void mxc_init_nor_mtd(void)
+{
+	(void)platform_device_register(&mxc_nor_mtd_device);
+}
+
+#else
+static void mxc_init_nor_mtd(void)
+{
+}
+#endif /*CONFIG_MTD_MXC*/
+
+#if defined(CONFIG_MTD_NAND_MXC) || defined(CONFIG_MTD_NAND_MXC_MODULE)
+/* MTD NAND flash */
+static struct mtd_partition mxc_nand_partitions[4] = {
+	{
+		.name = "IPL-SPL",
+		.offset = 0,
+		.size = 0x4000},
+	{
+		.name = "nand.kernel",
+		.offset = MTDPART_OFS_APPEND,
+		.size = 4 * 1024 * 1024},
+	{
+		.name = "nand.rootfs",
+		.offset = MTDPART_OFS_APPEND,
+		.size = 20 * 1024 * 1024},
+	{
+		.name = "nand.userfs",
+		.offset = MTDPART_OFS_APPEND,
+		.size = MTDPART_SIZ_FULL},
+};
+
+static struct flash_platform_data mxc_nand_data = {
+	.parts = mxc_nand_partitions,
+	.nr_parts = ARRAY_SIZE(mxc_nand_partitions),
+	.width = 1,
+};
+
+static struct platform_device mxc_nand_mtd_device = {
+	.name = "mxc_nand_flash",
+	.id = 0,
+	.dev = {
+		.platform_data = &mxc_nand_data,
+	},
+};
+
+static void mxc_init_nand_mtd(void)
+{
+	if (__raw_readl(MXC_CCM_RCSR) & MXC_CCM_RCSR_NF16B)
+		mxc_nand_data.width = 2;
+
+	(void)platform_device_register(&mxc_nand_mtd_device);
+}
+#else
+static void mxc_init_nand_mtd(void)
+{
+}
+#endif /*CONFIG_MTD_NAND_MXC*/
+
+#if defined(CONFIG_SPI_MXC) || defined(CONFIG_SPI_MXC_MODULE)
+static struct spi_board_info mxc_spi_board_info[] __initdata = {
+	{
+		.modalias = "pmic_spi",
+		.irq = IOMUX_TO_IRQ(MX31_PIN_GPIO1_3),
+		.max_speed_hz = 4000000,
+		.bus_num = 2,
+		.chip_select = 0,
+	},
+};
+#endif
+
+static struct imxuart_platform_data uart_pdata;
+
+static int __init mx31lite_init_devices(void)
+{
+	imx_init_uart(0, &uart_pdata);
+
+#if defined(CONFIG_RTC_DRV_MXC) || \
+	defined(CONFIG_RTC_DRV_MXC_MODULE)
+	mxc_init_rtc();
+#endif
+#if defined(CONFIG_MXC_WATCHDOG) || \
+	defined(CONFIG_MXC_WATCHDOG_MODULE)
+    mxc_init_wdt();
+#endif
+#if defined(CONFIG_MMC_MXC) || \
+	defined(CONFIG_MMC_MXC_MODULE)
+    mxc_init_mmc();
+#endif
+#if defined(CONFIG_SPI_MXC) || \
+	defined(CONFIG_SPI_MXC_MODULE)
+    mxc_init_spi();
+#endif
+#if defined(CONFIG_PCMCIA_MX3) || \
+	defined(CONFIG_PCMCIA_MX3_MODULE)
+    mxc_init_pcmcia();
+#endif
+#if defined(CONFIG_BLK_DEV_IDE_MXC) || \
+	defined(CONFIG_BLK_DEV_IDE_MXC_MODULE)
+    mxc_init_ide();
+#endif
+
+    /* SPBA configuration for SSI2 - SDMA and MCU are set */
+    spba_take_ownership(SPBA_SSI2, SPBA_MASTER_C | SPBA_MASTER_A);
+    return 0;
+}
+arch_initcall(mx31lite_init_devices);
+
+
 /*
  * Board specific initialization.
  */
-static void __init mxc_board_init(void)
+static void __init mxc31lite_board_init(void)
 {
+	mxc_cpu_common_init();
+
+	/* Enable 26 mhz clock on CKO1 for MC13783 audio */
+	mxc_ccm_modify_reg(MXC_CCM_COSR, 0x00000fff, 0x00000208);
+	mxc_gpio_init();
+	mx31lite_gpio_init();
+	mxc_init_nor_mtd();
+	mxc_init_nand_mtd();
+	platform_device_register(&smc911x_device);
+#if defined(CONFIG_SPI_MXC) || defined(CONFIG_SPI_MXC_MODULE)
+	spi_register_board_info(mxc_spi_board_info,
+			ARRAY_SIZE(mxc_spi_board_info));
+#endif
 }
 
 static void __init mx31lite_timer_init(void)
@@ -96,12 +300,12 @@ struct sys_timer mx31lite_timer = {
  */
 
 MACHINE_START(MX31LITE, "LogicPD MX31 LITEKIT")
-	/* Maintainer: Freescale Semiconductor, Inc. */
+/* Maintainer: Freescale Semiconductor, Inc. */
 	.phys_io        = AIPS1_BASE_ADDR,
 	.io_pg_offst    = ((AIPS1_BASE_ADDR_VIRT) >> 18) & 0xfffc,
 	.boot_params    = PHYS_OFFSET + 0x100,
 	.map_io         = mx31lite_map_io,
 	.init_irq       = mxc_init_irq,
-	.init_machine   = mxc_board_init,
+	.init_machine   = mxc31lite_board_init,
 	.timer          = &mx31lite_timer,
 MACHINE_END
-- 
1.6.0.3

