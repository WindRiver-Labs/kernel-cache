From 0e9158bdcf2a4df46bad9f562dc64259d9d7a850 Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Mon, 5 Nov 2012 17:28:57 +0800
Subject: [PATCH] drivers: net/nae: refill message ring buffer synchronously

Refill the message ring buffer synchronously with respect to NET_RX_SOFTIRQ
handler according to the synchronous processing changes in SDK v2.2.4.1.

The original code refills the message ring buffer asynchronously by a work item
which is scheduled by NET_RX_SOFTIRQ handler with respect to the handler. There
is a race condition because interrupt/process contexts share message ring
buffer without protection and below kernel panic can be triggered under heavy
network traffic.

Unhandled kernel unaligned access[#2]:
Kernel panic - not syncing: Fatal exception in interrupt
Rebooting in 5 seconds..Cpu 6
$ 0   : 0000000000000000 0000000000000008 0000000000000000 0000000000000000
$ 4   : 0000000000000010 ffffffffc195cac0 0000000000000040 0000000000000001
$ 8   : 0000000000000040 00000000000005ea c0000000bc864800 aaaaaaaaaaaaaaaa
$12   : 000000005410b8e1 000000001000001e c0000000bc864822 c0000000b38d4800
$16   : c0000000902538b0 0000000000000000 ffffffffdd6a0000 aaaaaaaaaaaaaaaa
$20   : c0000000bc864880 ffffffffc1b48470 0000000000000000 0000000000000000
$24   : 0000000000000000 ffffffffc1376670
$28   : c000000090250000 c000000090253880 0000000000000005 ffffffffc10008a4
Hi    : 0000000000000000
Lo    : 003d2fab024f1400
epc   : ffffffffc1048b5c do_ade+0x2cc/0x5b0
     Tainted: G      D W
ra    : ffffffffc10008a4 ret_from_exception+0x0/0x10
Status: 5410b8e3    KX SX UX KERNEL EXL IE
Cause : 00800010
BadVA : aaaaaaaaaaaaaaaa
PrId  : 000c1003 (XLP832 Rev B0)
Modules linked in:
Process softirq-net-rx/ (pid: 79, threadinfo=c000000090250000, task=c0000000901e3000, tls=0000000000000000)
Stack : c000000083078540 c0000000b28655c0 a800000000000000 c000000090253ac0
	c000000090253a78 ffffffffc10008a4 0000000000000000 0000000000000008
	a8000000a104f480 00000000000006c2 0000000000000022 ffffffffc195cac0
	0000000000000040 0000000000000001 0000000000000040 00000000000005ea
	c0000000bc864800 aaaaaaaaaaaaaaaa 00000000aaaaaaaa ffffffffc10062f4
	c0000000bc864822 c0000000b38d4800 c0000000b28655c0 a800000000000000
	c000000090253ac0 c000000090253a78 c0000000bc864880 ffffffffc1b48470
	0000000000000000 0000000000000000 0000000000000000 ffffffffc1376670
	ffffffffc1150360 0000000000000000 c000000090250000 c000000090253a38
	0000000000000005 ffffffffc14d38fc 000000005410b8e3 0000000000000000
	...
Call Trace:
[<ffffffffc1048b5c>] do_ade+0x2cc/0x5b0
[<ffffffffc10008a4>] ret_from_exception+0x0/0x10
[<ffffffffc14d33ec>] build_skb+0x74/0x1a8
[<ffffffffc14d38fc>] nlm_xlp_nae_msgring_handler+0x3dc/0x768
[<ffffffffc103edc8>] xlp_fmn_poll+0x258/0x358
[<ffffffffc158d4dc>] net_rx_action+0x1e4/0x440
[<ffffffffc10849c8>] run_ksoftirqd+0x200/0x400
[<ffffffffc109e6f8>] kthread+0x88/0x90
Code: 00431024  1440ffcb  00000000 <6a630000> 6e630007 24020000  1040ffdd  0060982d  0c415ac0

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 drivers/net/nae/xlp_nae.c |   10 +++-------
 1 files changed, 3 insertions(+), 7 deletions(-)

diff --git a/drivers/net/nae/xlp_nae.c b/drivers/net/nae/xlp_nae.c
index 0b3c833..901cf4e 100644
--- a/drivers/net/nae/xlp_nae.c
+++ b/drivers/net/nae/xlp_nae.c
@@ -163,7 +163,6 @@ struct jumbo_rx_cookie {
 
 jumbo_rx_info_t  jumbo_rx_buff[NR_CPUS];
 //static struct tasklet_struct mac_frin_replenish_task[MAC_FRIN_WORK_NUM];
-static struct work_struct mac_frin_replenish_work[MAC_FRIN_WORK_NUM];
 static void mac_frin_replenish(unsigned long arg /* ignored */);
 static void tx_free_buffer(unsigned long arg /* ignored */);
 
@@ -647,7 +646,7 @@ static int mac_frin_replenish_one_normal_msg(struct net_device *dev)
 		pg = rx->page;
 	} else {
 		/* alloc a new page */
-		pg = alloc_pages_exact_node(priv->node, GFP_KERNEL, 0); //alloc_pages(GFP_KERNEL, 0);
+		pg = alloc_pages_exact_node(priv->node, GFP_ATOMIC, 0);
 		if(pg == NULL) {
 			panic("alloc_pages failure\n");
 		}
@@ -690,8 +689,8 @@ static int mac_frin_replenish_msgs(struct net_device *dev, int num)
 
 	rx = &jumbo_rx_buff[cpu];
 	atomic_add(num, &rx->alloc_fails[priv->node][priv->port]);
-	schedule_work(&mac_frin_replenish_work[cpu]);
 	//tasklet_schedule(&mac_frin_replenish_task[cpu]);
+	mac_frin_replenish(0);
 	return 0;
 }
 
@@ -918,10 +917,6 @@ static void nlm_xlp_nae_init(void)
 		return;
 	p2p_desc_mem_init();
 
-	for (i = 0; i < ((node+1) * 32); i++) {
-		INIT_WORK(&mac_frin_replenish_work[i], mac_frin_replenish);
-	}
-
 	gen_mac_address();
 
 	maxnae = nlm_node_cfg.num_nodes;	
@@ -1277,6 +1272,7 @@ static int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
 
 	create_last_p2p_desc(p2pdesc, skb, idx);
 	msg = nae_tx_desc(P2P, 0, cpu, idx, virt_to_bus(p2pdesc));
+	__sync();
 
 retry_send:
 	msgrng_access_enable(mflags);
-- 
1.7.0

