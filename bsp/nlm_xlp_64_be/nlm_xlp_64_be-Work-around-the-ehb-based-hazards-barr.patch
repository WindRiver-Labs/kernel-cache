From 89bc12413ab5caee3020a1d1934417df16e0ea81 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Fri, 13 May 2011 20:58:12 +0800
Subject: [PATCH 29/37] nlm_xlp_64_be: Work around the ehb based hazards barriers

Add nop protection into critical routines in order to eliminate NLM XLP
specific harzards.

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/mips/include/asm/hazards.h          |   21 +++++++++++++++++++++
 arch/mips/include/asm/mipsregs.h         |    2 ++
 arch/mips/mm/tlbex.c                     |    4 ++++
 arch/mips/netlogic/xlp/cpu_control_asm.S |    4 ++++
 arch/mips/netlogic/xlp/smp.c             |    2 ++
 5 files changed, 33 insertions(+), 0 deletions(-)

diff --git a/arch/mips/include/asm/hazards.h b/arch/mips/include/asm/hazards.h
index 0eaf77f..e337ba7 100644
--- a/arch/mips/include/asm/hazards.h
+++ b/arch/mips/include/asm/hazards.h
@@ -48,6 +48,7 @@ ASMMACRO(_ehb,
  * MIPSR2 defines ehb for hazard avoidance
  */
 
+#ifndef CONFIG_CPU_XLP
 ASMMACRO(mtc0_tlbw_hazard,
 	 _ehb
 	)
@@ -66,6 +67,26 @@ ASMMACRO(irq_disable_hazard,
 ASMMACRO(back_to_back_c0_hazard,
 	 _ehb
 	)
+#else
+ASMMACRO(mtc0_tlbw_hazard,
+	 nop; nop; _ehb
+	)
+ASMMACRO(tlbw_use_hazard,
+	 nop; nop; nop; _ehb
+	)
+ASMMACRO(tlb_probe_hazard,
+	 nop; nop; nop; _ehb
+	)
+ASMMACRO(irq_enable_hazard,
+	 _ssnop; _ssnop; _ssnop; _ehb
+	)
+ASMMACRO(irq_disable_hazard,
+	 nop; nop; nop; _ehb
+	)
+ASMMACRO(back_to_back_c0_hazard,
+	 _ssnop; _ssnop; _ssnop; _ehb
+	)
+#endif
 /*
  * gcc has a tradition of misscompiling the previous construct using the
  * address of a label as argument to inline assembler.  Gas otoh has the
diff --git a/arch/mips/include/asm/mipsregs.h b/arch/mips/include/asm/mipsregs.h
index c3ce069..1a1422e 100644
--- a/arch/mips/include/asm/mipsregs.h
+++ b/arch/mips/include/asm/mipsregs.h
@@ -1467,6 +1467,8 @@ static inline void __ehb(void)
 {
 	__asm__ __volatile__(
 	"	.set	mips32r2				\n"
+	"	nop						\n"
+	"	nop						\n"
 	"	ehb						\n"
 	"	.set	mips0					\n");
 }
diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index c66fb9c..c117644 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -289,6 +289,10 @@ static void __cpuinit build_tlb_write_entry(u32 **p, struct uasm_label **l,
 	}
 
 	if (cpu_has_mips_r2) {
+#ifdef CONFIG_CPU_XLP
+		uasm_i_nop(p);
+		uasm_i_nop(p);
+#endif
 		if (cpu_has_mips_r2_exec_hazard)
 			uasm_i_ehb(p);
 		tlbw(p);
diff --git a/arch/mips/netlogic/xlp/cpu_control_asm.S b/arch/mips/netlogic/xlp/cpu_control_asm.S
index eafdb54..f6d63f5 100644
--- a/arch/mips/netlogic/xlp/cpu_control_asm.S
+++ b/arch/mips/netlogic/xlp/cpu_control_asm.S
@@ -16,6 +16,8 @@
 	xor 	t0, 0x1f|\clr
 	mtc0    t0, CP0_STATUS
 	.set    noreorder
+	nop
+	nop
 	sll 	zero,3              # ehb
 	.set    pop
 	.endm
@@ -166,6 +168,8 @@ END(ptr_smp_boot)
 	xor	t0, 0x1f|\clr
 	mtc0	t0, CP0_STATUS
 	.set	noreorder
+	nop
+	nop
 	sll	zero,3				# ehb
 	.set	pop
 	.endm
diff --git a/arch/mips/netlogic/xlp/smp.c b/arch/mips/netlogic/xlp/smp.c
index 0576a61..39ac939 100644
--- a/arch/mips/netlogic/xlp/smp.c
+++ b/arch/mips/netlogic/xlp/smp.c
@@ -246,6 +246,8 @@ static inline void config_mmu(void)
 		".set noreorder\n"
 		"li      %0, "STR(MMU_SETUP)"\n"
 		"mtcr    $0, %0\n"
+		"nop\n"
+		"nop\n"
 		"ehb\n"
 		".set pop\n"
 		: "=r" (tmp0)
-- 
1.7.0.2

