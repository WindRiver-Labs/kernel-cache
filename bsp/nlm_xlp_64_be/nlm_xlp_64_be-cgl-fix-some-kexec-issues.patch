From 090acb4f651c427cfc206dd627a3b7622850dc1f Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Thu, 24 Jan 2013 15:22:51 +0800
Subject: [PATCH] nlm_xlp_64_be: fix some kexec issues

1. The size of the newest DTB has increased to 32k, reserve more space for it;
2. Remove some invalid restrictions;
3. Some codes about CONFIG_NLM_16G_MEM_SUPPORT depend on CONFIG_MAPPED_KERNEL,
   add this dependence into Kconfig.

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/Kconfig                               |    2 +-
 arch/mips/include/asm/mach-netlogic/nlm_kexec.h |    9 ++----
 arch/mips/netlogic/common/nlm_hal_nae.c         |    4 +--
 arch/mips/netlogic/common/nlm_kexec.c           |    5 ---
 arch/mips/netlogic/xlp/irq.c                    |    2 +-
 arch/mips/netlogic/xlp/on_chip.c                |    2 +-
 arch/mips/netlogic/xlp/setup.c                  |   37 +++++-----------------
 7 files changed, 16 insertions(+), 45 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 95d243c..df3a2ce 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -1612,7 +1612,7 @@ config 64BIT
 
 config NLM_16G_MEM_SUPPORT
 	bool "more than 16GB memory support"
-	depends on 64BIT
+	depends on 64BIT && MAPPED_KERNEL
 	help
 	  Support more than 16GB memory
 
diff --git a/arch/mips/include/asm/mach-netlogic/nlm_kexec.h b/arch/mips/include/asm/mach-netlogic/nlm_kexec.h
index 4e3e7c0..cb12a34 100644
--- a/arch/mips/include/asm/mach-netlogic/nlm_kexec.h
+++ b/arch/mips/include/asm/mach-netlogic/nlm_kexec.h
@@ -25,15 +25,12 @@
 #include <asm/netlogic/hal/nlm_hal_nae.h>
 #include <linux/bootmem.h>
 #include <asm/setup.h>
+#include "../../../netlogic/boot/ops.h"
 
-/* DTB is about 9kb */
-#define DTB_SIZE	(1 << 14)	/* 16kb */
+/* DTB is about 32kb */
+#define DTB_SIZE	(1 << 16)	/* 64kb */
 #define DTB_ORDER	((DTB_SIZE >> PAGE_SHIFT) - 1)
 
-#ifndef MAX_PROP_LEN
-#define MAX_PROP_LEN 256
-#endif
-
 #define KEXEC_CMDLINE_OFFSET (DTB_SIZE - MAX_PROP_LEN - 1)
 #define kexec_cmdline_addr(base) (base + KEXEC_CMDLINE_OFFSET)
 
diff --git a/arch/mips/netlogic/common/nlm_hal_nae.c b/arch/mips/netlogic/common/nlm_hal_nae.c
index d898a94..472307b 100644
--- a/arch/mips/netlogic/common/nlm_hal_nae.c
+++ b/arch/mips/netlogic/common/nlm_hal_nae.c
@@ -31,7 +31,6 @@
 #ifdef NLM_HAL_LINUX_KERNEL
 #include <linux/netdevice.h>
 #endif
-#include <asm/mach-netlogic/nlm_kexec.h>
 #include "nlm_hal_fmn.h"
 #include "nlm_hal_nae.h"
 #include "nlm_hal_sys.h"
@@ -3496,8 +3495,7 @@ static void parse_fdt_nae_config(void *fdt, int node, nlm_nae_config_ptr nae_cfg
 	start_port = num_nae_regs = num_intf_regs = 0;
 
 	frequency = nlm_hal_get_fdt_freq(fdt, NLM_NAE);
-	if (!is_kexec_boot())
-		set_nae_frequency(node, frequency);
+	set_nae_frequency(node, frequency);
 
 	parse_vfbid_config(fdt, node);
 
diff --git a/arch/mips/netlogic/common/nlm_kexec.c b/arch/mips/netlogic/common/nlm_kexec.c
index 0cd580e..05ce2cb 100644
--- a/arch/mips/netlogic/common/nlm_kexec.c
+++ b/arch/mips/netlogic/common/nlm_kexec.c
@@ -135,8 +135,6 @@ static void shutdown_secondary_cpus(void *crash)
 	/* NOTREACHED */
 }
 
-extern void fixup_irqs(unsigned int cpu, int flag);
-
 static void prepare_cpus(const unsigned long crash)
 {
 	int cpu;
@@ -144,9 +142,6 @@ static void prepare_cpus(const unsigned long crash)
 	smp_call_function(shutdown_secondary_cpus, (void *)crash, 0);
 	smp_wmb();
 	local_irq_disable();
-	/* Reset some devices for rebooting */
-	for_each_online_cpu(cpu)
-		fixup_irqs(cpu, 0);
 }
 
 static void wait_for_cpus(void)
diff --git a/arch/mips/netlogic/xlp/irq.c b/arch/mips/netlogic/xlp/irq.c
index 096bfa3..4a9b546 100644
--- a/arch/mips/netlogic/xlp/irq.c
+++ b/arch/mips/netlogic/xlp/irq.c
@@ -1796,7 +1796,7 @@ void __init arch_init_irq(void)
 
 }
 
-#if defined(CONFIG_HOTPLUG_CPU) || defined(CONFIG_KEXEC)
+#if defined(CONFIG_HOTPLUG_CPU)
 
 extern void nlm_enable_vc_intr(void);
 extern void enable_msgconfig_int(void);
diff --git a/arch/mips/netlogic/xlp/on_chip.c b/arch/mips/netlogic/xlp/on_chip.c
index 85e6724..4ff8ad1 100644
--- a/arch/mips/netlogic/xlp/on_chip.c
+++ b/arch/mips/netlogic/xlp/on_chip.c
@@ -738,7 +738,7 @@ void xlp_pic_ite_init(const struct cpumask *tgt_mask)
 #endif
 
 #ifndef CONFIG_NUMA
-	pr_warn("Setting ITE entries only for 0-31 (Node 0) CPUs!\n");
+	pr_warning("Setting ITE entries only for 0-31 (Node 0) CPUs!\n");
 #endif
 	cpumask_clear(&m);
 	/* We manipulate only NODE0 ITE entries here */
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index 0feae14..4c813e1 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -531,16 +531,11 @@ static void parse_fdt_sae_vc_config(void)
 		if (getprop(node, "ipsec-sync-vc", &ipsec_sync_vc, 4) > 0)
 			ipsec_sync_vc = fdt32_to_cpu(ipsec_sync_vc);
 
-		if (is_kexec_boot()) {
-			/* only supports single node in kexec now*/
-			num_nodes = 1;
-		} else {
-			valid_node  = finddevice("/soc/nodes");
+		valid_node  = finddevice("/soc/nodes");
 
-			if (getprop(valid_node, "num-nodes",
-				&num_nodes, 4) > 0)
-				num_nodes = fdt32_to_cpu(num_nodes);
-		}
+		if (getprop(valid_node, "num-nodes",
+			&num_nodes, 4) > 0)
+			num_nodes = fdt32_to_cpu(num_nodes);
 
 		for(i =0 ; i < num_nodes*NLM_MAX_CPU_PER_NODE; i++) {
 			if(nlm_cpu_vc_mask[i] & (1 << ipsec_sync_vc)) {
@@ -734,24 +729,6 @@ static int fdt_process(void)
 		}
 	}
 
-	if (is_kexec_boot()) {
-		/* Copy out the cmdline from the kexec control page reserved by parent kernel */
-		memset(prop_buf, '\0', MAX_PROP_LEN);
-		pr_debug("%s: copy cmdline from %p\n", __func__, kexec_cmdline_addr(blob));
-		memcpy(prop_buf, kexec_cmdline_addr(blob), MAX_PROP_LEN);
-		pr_debug("%s: cmdline = \n%s\n", __func__, prop_buf);
-		if (strncmp(prop_buf, "kexec ", 6) == 0) {
-			have_kexec_cmdline = 1;
-			/* elfcorehdr= is passed by kexec-tools when
-			 * booting from kernel panic.
-			 */
-			if ((strstr(prop_buf, "elfcorehdr=")) != NULL) {
-				pr_debug("%s: Boot from kernel panic\n", __func__);
-				boot_for_kdump = 1;
-			}
-		}
-	}
-
 	cpumask_clear(&fdt_cpumask);
 	cpumask_clear(&fdt_loadermask);
 
@@ -1204,6 +1181,10 @@ void __init prom_init(void)
 
 	xen_init();
 
+#ifndef CONFIG_MAPPED_KERNEL
+	write_c0_ebase(read_c0_ebase() | 0x10000);
+#endif
+
 	nlm_common_ebase = read_c0_ebase() & (~((1 << 12) - 1));
 
 	/* FIXME: we should also remove it for xlp8xx a2, but we do not have interface function
-- 
1.7.4

