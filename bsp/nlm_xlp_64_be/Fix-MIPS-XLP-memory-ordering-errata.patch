From 86f2b1ce40b26ed8e0d0214fab4586532ebbe805 Mon Sep 17 00:00:00 2001
From: Lei Liu <lei.liu2@windriver.com>
Date: Mon, 22 Oct 2012 09:34:58 +0800
Subject: [PATCH] Fix MIPS XLP memory ordering errata

Add ehb after memory ordering instructions (ldadd*/sc*/sync)
to fix XLP errata E47.

Signed-off-by: Lei Liu <lei.liu2@windriver.com>
---
 arch/mips/include/asm/bitops.h                   |   51 ++++++++++++++++++++++
 arch/mips/include/asm/netlogic/hal/nlm_hal_fmn.h |    3 +
 arch/mips/include/asm/netlogic/mips-exts.h       |   15 ++++++
 arch/mips/include/asm/spinlock.h                 |   42 ++++++++++++++++++
 arch/mips/kernel/nlm_fs_handler.S                |    6 +++
 arch/mips/netlogic/xlp/cpu_control_asm.S         |    6 +++
 6 files changed, 123 insertions(+), 0 deletions(-)

diff --git a/arch/mips/include/asm/bitops.h b/arch/mips/include/asm/bitops.h
index 8cf672e..5d47627 100644
--- a/arch/mips/include/asm/bitops.h
+++ b/arch/mips/include/asm/bitops.h
@@ -67,6 +67,9 @@ static inline void set_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1			# set_bit	\n"
 		"	or	%0, %2					\n"
 		"	" __SC	"%0, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%0, 1b					\n"
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (*m)
@@ -77,6 +80,9 @@ static inline void set_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1			# set_bit	\n"
 		"	" __INS "%0, %4, %2, 1				\n"
 		"	" __SC "%0, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%0, 2f					\n"
 		"	.subsection 2					\n"
 		"2:	b	1b					\n"
@@ -90,6 +96,9 @@ static inline void set_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1			# set_bit	\n"
 		"	or	%0, %2					\n"
 		"	" __SC	"%0, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%0, 2f					\n"
 		"	.subsection 2					\n"
 		"2:	b	1b					\n"
@@ -132,6 +141,9 @@ static inline void clear_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1			# clear_bit	\n"
 		"	and	%0, %2					\n"
 		"	" __SC "%0, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%0, 1b					\n"
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (*m)
@@ -142,6 +154,9 @@ static inline void clear_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1			# clear_bit	\n"
 		"	" __INS "%0, $0, %2, 1				\n"
 		"	" __SC "%0, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%0, 2f					\n"
 		"	.subsection 2					\n"
 		"2:	b	1b					\n"
@@ -155,6 +170,9 @@ static inline void clear_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1			# clear_bit	\n"
 		"	and	%0, %2					\n"
 		"	" __SC "%0, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%0, 2f					\n"
 		"	.subsection 2					\n"
 		"2:	b	1b					\n"
@@ -211,6 +229,9 @@ static inline void change_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1		# change_bit	\n"
 		"	xor	%0, %2				\n"
 		"	" __SC	"%0, %1				\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%0, 1b				\n"
 		"	.set	mips0				\n"
 		: "=&r" (temp), "=m" (*m)
@@ -224,6 +245,9 @@ static inline void change_bit(unsigned long nr, volatile unsigned long *addr)
 		"1:	" __LL "%0, %1		# change_bit	\n"
 		"	xor	%0, %2				\n"
 		"	" __SC	"%0, %1				\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%0, 2f				\n"
 		"	.subsection 2				\n"
 		"2:	b	1b				\n"
@@ -269,6 +293,9 @@ static inline int test_and_set_bit(unsigned long nr,
 		"1:	" __LL "%0, %1		# test_and_set_bit	\n"
 		"	or	%2, %0, %3				\n"
 		"	" __SC	"%2, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%2, 1b					\n"
 		"	and	%2, %0, %3				\n"
 		"	.set	mips0					\n"
@@ -286,6 +313,9 @@ static inline int test_and_set_bit(unsigned long nr,
 		"1:	" __LL "%0, %1		# test_and_set_bit	\n"
 		"	or	%2, %0, %3				\n"
 		"	" __SC	"%2, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%2, 2f					\n"
 		"	 and	%2, %0, %3				\n"
 		"	.subsection 2					\n"
@@ -337,6 +367,9 @@ static inline int test_and_set_bit_lock(unsigned long nr,
 		"1:	" __LL "%0, %1		# test_and_set_bit	\n"
 		"	or	%2, %0, %3				\n"
 		"	" __SC	"%2, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%2, 1b					\n"
 		"	and	%2, %0, %3				\n"
 		"	.set	mips0					\n"
@@ -354,6 +387,9 @@ static inline int test_and_set_bit_lock(unsigned long nr,
 		"1:	" __LL "%0, %1		# test_and_set_bit	\n"
 		"	or	%2, %0, %3				\n"
 		"	" __SC	"%2, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%2, 2f					\n"
 		"	 and	%2, %0, %3				\n"
 		"	.subsection 2					\n"
@@ -407,6 +443,9 @@ static inline int test_and_clear_bit(unsigned long nr,
 		"	or	%2, %0, %3				\n"
 		"	xor	%2, %3					\n"
 		"	" __SC 	"%2, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%2, 1b					\n"
 		"	and	%2, %0, %3				\n"
 		"	.set	mips0					\n"
@@ -423,6 +462,9 @@ static inline int test_and_clear_bit(unsigned long nr,
 		"	" __EXT "%2, %0, %3, 1				\n"
 		"	" __INS	"%0, $0, %3, 1				\n"
 		"	" __SC 	"%0, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%0, 2f					\n"
 		"	.subsection 2					\n"
 		"2:	b	1b					\n"
@@ -443,6 +485,9 @@ static inline int test_and_clear_bit(unsigned long nr,
 		"	or	%2, %0, %3				\n"
 		"	xor	%2, %3					\n"
 		"	" __SC 	"%2, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%2, 2f					\n"
 		"	 and	%2, %0, %3				\n"
 		"	.subsection 2					\n"
@@ -496,6 +541,9 @@ static inline int test_and_change_bit(unsigned long nr,
 		"1:	" __LL	"%0, %1		# test_and_change_bit	\n"
 		"	xor	%2, %0, %3				\n"
 		"	" __SC	"%2, %1					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%2, 1b					\n"
 		"	and	%2, %0, %3				\n"
 		"	.set	mips0					\n"
@@ -513,6 +561,9 @@ static inline int test_and_change_bit(unsigned long nr,
 		"1:	" __LL	"%0, %1		# test_and_change_bit	\n"
 		"	xor	%2, %0, %3				\n"
 		"	" __SC	"\t%2, %1				\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%2, 2f					\n"
 		"	 and	%2, %0, %3				\n"
 		"	.subsection 2					\n"
diff --git a/arch/mips/include/asm/netlogic/hal/nlm_hal_fmn.h b/arch/mips/include/asm/netlogic/hal/nlm_hal_fmn.h
index 602e1eb..25d1a0b 100644
--- a/arch/mips/include/asm/netlogic/hal/nlm_hal_fmn.h
+++ b/arch/mips/include/asm/netlogic/hal/nlm_hal_fmn.h
@@ -197,6 +197,7 @@ static inline int xlp_send(unsigned int dest)
                           ".set noreorder\n"
                           ".set arch=xlp\n"
                           "sync\n"
+                          "ehb\n"
                           "msgsnds %0, %1\n"
                           ".set pop\n"
                           : "=&r" (success)
@@ -468,6 +469,7 @@ static inline void xlp_message_send_block_fast_1(unsigned int code,
 			".set arch=xlp\n"
 			"dmtc2 %1, "STR(XLP_TX_BUF_REG)", 0\n"
 			"sync\n"
+			"ehb\n"
 			"1: \n"
 			"msgsnds  $8, %0\n"    /* msgsnds rD, rt */
 			"andi $8, $8, 0x1\n"
@@ -550,6 +552,7 @@ static inline void xlp_message_send_block_fast_3(unsigned int code,
 			"dmtc2 %2, "STR(XLP_TX_BUF_REG)", 1\n"
 			"dmtc2 %3, "STR(XLP_TX_BUF_REG)", 2\n"
 			"sync\n"
+			"ehb\n"
 			"1: \n"
 			"msgsnds  $8, %0\n"    /* msgsnds rD, rt */
 			"andi $8, $8, 0x1\n"
diff --git a/arch/mips/include/asm/netlogic/mips-exts.h b/arch/mips/include/asm/netlogic/mips-exts.h
index 247fe39..bfef082 100644
--- a/arch/mips/include/asm/netlogic/mips-exts.h
+++ b/arch/mips/include/asm/netlogic/mips-exts.h
@@ -197,6 +197,9 @@ static inline int ldadd_w(unsigned int value, volatile int *addr)
 			".set noreorder\n"
 			"move $8, %2\n"
 			"ldaddw $8, %3\n"
+#ifdef CONFIG_NLM_XLP
+			"ehb\n"
+#endif
 			"move %0, $8\n"
 			".set pop\n"
 			: "=r"(res), "+m"(*addr)
@@ -214,6 +217,9 @@ static inline int ldadd_w_ret(unsigned int value, volatile int *addr)
 			".set noreorder\n"
 			"move $8, %2\n"
 			"ldaddw $8, %3\n"
+#ifdef CONFIG_NLM_XLP
+			"ehb\n"
+#endif
 			STR(PTR_ADDU) " %0, $8, %2\n"
 			".set pop\n"
 			: "=r"(res), "+m"(*addr)
@@ -230,6 +236,9 @@ static inline void ldadd_w_no_read(int value, volatile int *addr)
 			".set noreorder\n"
 			"move $8, %1\n"
 			"ldaddw $8, %2\n"
+#ifdef CONFIG_NLM_XLP
+			"ehb\n"
+#endif
 			".set pop\n"
 			: "+m"(*addr)
 			: "r" (value), "r"((unsigned long)addr)
@@ -245,6 +254,9 @@ static inline unsigned int ldadd_wu(unsigned int value, volatile unsigned int *a
 			".set noreorder\n"
 			"move $8, %2\n"
 			"ldaddwu $8, %3\n"
+#ifdef CONFIG_NLM_XLP
+			"ehb\n"
+#endif
 			"move %0, $8\n"
 			".set pop\n"
 			: "=r"(res), "+m"(*addr)
@@ -261,6 +273,9 @@ static inline void ldadd_wu_no_read(unsigned int value,
 			".set push\n"
 			".set noreorder\n"
 			"ldaddwu %1, %2\n"
+#ifdef CONFIG_NLM_XLP
+			"ehb\n"
+#endif
 			".set pop\n"
 			: "+m"(*addr)
 			: "r"(value), "r"((unsigned long)addr)
diff --git a/arch/mips/include/asm/spinlock.h b/arch/mips/include/asm/spinlock.h
index 396e402..910383b 100644
--- a/arch/mips/include/asm/spinlock.h
+++ b/arch/mips/include/asm/spinlock.h
@@ -67,6 +67,9 @@ static inline void arch_spin_lock(arch_spinlock_t *lock)
 		"1:	ll	%[ticket], %[ticket_ptr]		\n"
 		"	addu	%[my_ticket], %[ticket], %[inc]		\n"
 		"	sc	%[my_ticket], %[ticket_ptr]		\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%[my_ticket], 1b			\n"
 		"	 nop						\n"
 		"	srl	%[my_ticket], %[ticket], 16		\n"
@@ -102,6 +105,9 @@ static inline void arch_spin_lock(arch_spinlock_t *lock)
 		"1:	ll	%[ticket], %[ticket_ptr]		\n"
 		"	addu	%[my_ticket], %[ticket], %[inc]		\n"
 		"	sc	%[my_ticket], %[ticket_ptr]		\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%[my_ticket], 1b			\n"
 		"	 srl	%[my_ticket], %[ticket], 16		\n"
 		"	andi	%[ticket], %[ticket], 0xffff		\n"
@@ -158,6 +164,9 @@ static inline unsigned int arch_spin_trylock(arch_spinlock_t *lock)
 		"	bne	%[my_ticket], %[now_serving], 3f	\n"
 		"	 addu	%[ticket], %[ticket], %[inc]		\n"
 		"	sc	%[ticket], %[ticket_ptr]		\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%[ticket], 1b				\n"
 		"	 li	%[ticket], 1				\n"
 		"2:							\n"
@@ -183,6 +192,9 @@ static inline unsigned int arch_spin_trylock(arch_spinlock_t *lock)
 		"	bne	%[my_ticket], %[now_serving], 3f	\n"
 		"	 addu	%[ticket], %[ticket], %[inc]		\n"
 		"	sc	%[ticket], %[ticket_ptr]		\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%[ticket], 1b				\n"
 		"	 li	%[ticket], 1				\n"
 		"2:							\n"
@@ -235,6 +247,9 @@ static inline void arch_read_lock(arch_rwlock_t *rw)
 		"	bltz	%1, 1b					\n"
 		"	 addu	%1, 1					\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%1, 1b					\n"
 		"	 nop						\n"
 		"	.set	reorder					\n"
@@ -248,6 +263,9 @@ static inline void arch_read_lock(arch_rwlock_t *rw)
 		"	bltz	%1, 2f					\n"
 		"	 addu	%1, 1					\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%1, 1b					\n"
 		"	 nop						\n"
 		"	.subsection 2					\n"
@@ -280,6 +298,9 @@ static inline void arch_read_unlock(arch_rwlock_t *rw)
 		"1:	ll	%1, %2		# arch_read_unlock	\n"
 		"	sub	%1, 1					\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%1, 1b					\n"
 		: "=m" (rw->lock), "=&r" (tmp)
 		: "m" (rw->lock)
@@ -290,6 +311,9 @@ static inline void arch_read_unlock(arch_rwlock_t *rw)
 		"1:	ll	%1, %2					\n"
 		"	sub	%1, 1					\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%1, 2f					\n"
 		"	 nop						\n"
 		"	.subsection 2					\n"
@@ -314,6 +338,9 @@ static inline void arch_write_lock(arch_rwlock_t *rw)
 		"	bnez	%1, 1b					\n"
 		"	 lui	%1, 0x8000				\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%1, 1b					\n"
 		"	 nop						\n"
 		"	.set	reorder					\n"
@@ -327,6 +354,9 @@ static inline void arch_write_lock(arch_rwlock_t *rw)
 		"	bnez	%1, 2f					\n"
 		"	 lui	%1, 0x8000				\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%1, 2f					\n"
 		"	 nop						\n"
 		"	.subsection 2					\n"
@@ -370,6 +400,9 @@ static inline int arch_read_trylock(arch_rwlock_t *rw)
 		"	bltz	%1, 2f					\n"
 		"	 addu	%1, 1					\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	.set	reorder					\n"
 		"	beqzl	%1, 1b					\n"
 		"	 nop						\n"
@@ -387,6 +420,9 @@ static inline int arch_read_trylock(arch_rwlock_t *rw)
 		"	bltz	%1, 2f					\n"
 		"	 addu	%1, 1					\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%1, 1b					\n"
 		"	 nop						\n"
 		"	.set	reorder					\n"
@@ -414,6 +450,9 @@ static inline int arch_write_trylock(arch_rwlock_t *rw)
 		"	bnez	%1, 2f					\n"
 		"	 lui	%1, 0x8000				\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqzl	%1, 1b					\n"
 		"	 nop						\n"
 		__WEAK_LLSC_MB
@@ -431,6 +470,9 @@ static inline int arch_write_trylock(arch_rwlock_t *rw)
 		"	bnez	%1, 2f					\n"
 		"	lui	%1, 0x8000				\n"
 		"	sc	%1, %0					\n"
+#ifdef CONFIG_NLM_XLP
+		"       ehb                                             \n"
+#endif
 		"	beqz	%1, 3f					\n"
 		"	 li	%2, 1					\n"
 		"2:							\n"
diff --git a/arch/mips/kernel/nlm_fs_handler.S b/arch/mips/kernel/nlm_fs_handler.S
index e5f1454..108e8a7 100644
--- a/arch/mips/kernel/nlm_fs_handler.S
+++ b/arch/mips/kernel/nlm_fs_handler.S
@@ -95,6 +95,9 @@ NESTED(nlm_fs_msgsnd3, PT_SIZE, sp)
 	dmtc2   T5, XLP_TX_BUF_REG, 2
 
 	sync
+#ifdef CONFIG_NLM_XLP
+	ehb
+#endif
 
 	/* msgsnd dst is in t0, status returned in t1 */
 1:	msgsnds	T1, T0
@@ -120,6 +123,9 @@ NESTED(nlm_fs_msgsnd, PT_SIZE, sp)
 	dmtc2   T3, XLP_TX_BUF_REG, 1
 
 	sync
+#ifdef CONFIG_NLM_XLP
+	ehb
+#endif
 
 	/* msgsnd dst is in t0, status returned in t1 */
 1:	msgsnds	T1, T0
diff --git a/arch/mips/netlogic/xlp/cpu_control_asm.S b/arch/mips/netlogic/xlp/cpu_control_asm.S
index 8e933e4..7c755cc 100644
--- a/arch/mips/netlogic/xlp/cpu_control_asm.S
+++ b/arch/mips/netlogic/xlp/cpu_control_asm.S
@@ -169,6 +169,9 @@ EXPORT(reset_entry)
 	/* read back to ensure complete */
 	lw      t1, (SYS_CPUNONCOHERENTMODE_REG << 2)(t2)
 	sync
+#ifdef CONFIG_NLM_XLP
+	ehb
+#endif
 
 #ifdef CONFIG_64BIT
 	dla     t1, boot_siblings_start
@@ -201,6 +204,9 @@ EXPORT(boot_siblings_start)			/* "Master" (n0c0t0) cpu starts from here */
 	LONG_S  sp, linuxsp($0)
 	SAVE_ALL
 	sync
+#ifdef CONFIG_NLM_XLP
+	ehb
+#endif
 
 EXPORT(__boot_siblings)				/* T0 of every core in every node starts from here */
 
-- 
1.7.0.2

