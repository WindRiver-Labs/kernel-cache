From 54cb29bb8c3e591e55b063067b343c4c5c59de19 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Thu, 16 Jun 2011 15:14:57 +0800
Subject: [PATCH 11/37] nlm_xlp_64_be: add tlb support

[ Based on netlogic SDK 20110329 ]

Add XLP specific tlb support, including ebase, tlb refill handler, tlb
dumping and tlb refill exception statistics.

Signed-off-by: Venu Vadapalli <vvadapalli@netlogicmicro.com>
[ add a kernel option to statistic the tlb refill exceptions, for the
tlb refill handler is critical to the performance, save several
instructions cycles to improve the performance ]
Integrated-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 arch/mips/kernel/traps.c   |   16 +++++++++++++++-
 arch/mips/lib/Makefile     |    1 +
 arch/mips/lib/dump_tlb.c   |   26 +++++++++++++++++++++++---
 arch/mips/mm/tlb-r4k.c     |   15 +++++++++++++++
 arch/mips/mm/tlbex.c       |   16 ++++++++++++++++
 arch/mips/netlogic/Kconfig |    7 +++++++
 6 files changed, 77 insertions(+), 4 deletions(-)

diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index 1f5c4aa..2b4cdf5 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -10,6 +10,7 @@
  * Kevin D. Kissell, kevink@mips.com and Carsten Langgaard, carstenl@mips.com
  * Copyright (C) 2000, 01 MIPS Technologies, Inc.
  * Copyright (C) 2002, 2003, 2004, 2005, 2007  Maciej W. Rozycki
+ * Copyright (C) 2003-2010 Netlogic Microsystems Inc.
  */
 #include <linux/bug.h>
 #include <linux/compiler.h>
@@ -60,6 +61,10 @@
 DEFINE_TRACE(trap_entry);
 DEFINE_TRACE(trap_exit);
 
+#ifdef CONFIG_NLM_COMMON
+extern unsigned long nlm_common_ebase;
+#endif
+
 extern void check_wait(void);
 extern asmlinkage void r4k_wait(void);
 extern asmlinkage void rollback_handle_int(void);
@@ -1633,7 +1638,10 @@ __setup("rdhwr_noopt", set_rdhwr_noopt);
 
 void __init trap_init(void)
 {
-	extern char except_vec3_generic, except_vec3_r4000;
+	extern char except_vec3_generic;
+#ifndef CONFIG_NLM_COMMON
+	extern char except_vec3_r4000;
+#endif
 	extern char except_vec4;
 	unsigned long i;
 	int rollback;
@@ -1656,6 +1664,10 @@ void __init trap_init(void)
 			ebase += (read_c0_ebase() & 0x3ffff000);
 	}
 
+#ifdef CONFIG_NLM_COMMON
+	ebase = nlm_common_ebase;
+#endif
+
 	per_cpu_trap_init();
 
 	/*
@@ -1760,6 +1772,7 @@ void __init trap_init(void)
 
 	set_except_vector(26, handle_dsp);
 
+#ifndef CONFIG_NLM_COMMON
 	if (cpu_has_vce)
 		/* Special exception: R4[04]00 uses also the divec space. */
 		memcpy((void *)(ebase + 0x180), &except_vec3_r4000, 0x100);
@@ -1767,6 +1780,7 @@ void __init trap_init(void)
 		memcpy((void *)(ebase + 0x180), &except_vec3_generic, 0x80);
 	else
 		memcpy((void *)(ebase + 0x080), &except_vec3_generic, 0x80);
+#endif
 
 	local_flush_icache_range(ebase, ebase + 0x400);
 	flush_tlb_handlers();
diff --git a/arch/mips/lib/Makefile b/arch/mips/lib/Makefile
index 2adead5..3ebcc66 100644
--- a/arch/mips/lib/Makefile
+++ b/arch/mips/lib/Makefile
@@ -27,6 +27,7 @@ obj-$(CONFIG_CPU_SB1)		+= dump_tlb.o
 obj-$(CONFIG_CPU_TX39XX)	+= r3k_dump_tlb.o
 obj-$(CONFIG_CPU_TX49XX)	+= dump_tlb.o
 obj-$(CONFIG_CPU_VR41XX)	+= dump_tlb.o
+obj-$(CONFIG_CPU_XLP)		+= dump_tlb.o
 obj-$(CONFIG_CPU_CAVIUM_OCTEON)	+= dump_tlb.o
 
 # libgcc-style stuff needed in the kernel
diff --git a/arch/mips/lib/dump_tlb.c b/arch/mips/lib/dump_tlb.c
index 3f69725..6d24322 100644
--- a/arch/mips/lib/dump_tlb.c
+++ b/arch/mips/lib/dump_tlb.c
@@ -46,11 +46,20 @@ static inline const char *msk2str(unsigned int mask)
 		"nop;nop;nop;nop;nop;nop;nop\n\t"	\
 		".set\treorder");
 
+#ifdef CONFIG_NLM_XLP
+#define DEFAULT_ASID_MASK 0x3ff
+#else
+#define DEFAULT_ASID_MASK 0xff
+#endif
+
 static void dump_tlb(int first, int last)
 {
 	unsigned long s_entryhi, entryhi, asid;
 	unsigned long long entrylo0, entrylo1;
 	unsigned int s_index, pagemask, c0, c1, i;
+	unsigned int asid_mask = DEFAULT_ASID_MASK;
+	int wired = read_c0_wired();
+	int print_tlb = 0;
 
 	s_entryhi = read_c0_entryhi();
 	s_index = read_c0_index();
@@ -66,9 +75,17 @@ static void dump_tlb(int first, int last)
 		entrylo0 = read_c0_entrylo0();
 		entrylo1 = read_c0_entrylo1();
 
+		print_tlb = 0;
+		if ((i >= 0) && (i < wired))
+			print_tlb = 1;
+		else {
+			if (((entryhi & ~0x1ffffUL) != CKSEG0)
+			     && ((entryhi & asid_mask) == asid))
+				print_tlb = 1;
+		}
+
 		/* Unused entries have a virtual address of CKSEG0.  */
-		if ((entryhi & ~0x1ffffUL) != CKSEG0
-		    && (entryhi & 0xff) == asid) {
+		if (print_tlb) {
 #ifdef CONFIG_32BIT
 			int width = 8;
 #else
@@ -107,5 +124,8 @@ static void dump_tlb(int first, int last)
 
 void dump_tlb_all(void)
 {
-	dump_tlb(0, current_cpu_data.tlbsize - 1);
+	int ntlbs = current_cpu_data.tlbsize - 1;
+
+	pr_info("Dumping TLBS (0 --> %d): nwired = %d\n", ntlbs, read_c0_wired());
+	dump_tlb(0, ntlbs);
 }
diff --git a/arch/mips/mm/tlb-r4k.c b/arch/mips/mm/tlb-r4k.c
index c618eed..234e69d 100644
--- a/arch/mips/mm/tlb-r4k.c
+++ b/arch/mips/mm/tlb-r4k.c
@@ -20,6 +20,12 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 
+#ifdef CONFIG_NLM_TLB_STAT
+#include <asm/netlogic/mips-exts.h>
+#include <asm/mach-netlogic/mmu.h>
+#endif
+
+
 extern void build_tlb_refill_handler(void);
 
 /*
@@ -422,6 +428,13 @@ static int __init set_ntlb(char *str)
 
 __setup("ntlb=", set_ntlb);
 
+static inline void nlm_tlb_stats_init(void)
+{
+#ifdef CONFIG_NLM_TLB_STAT
+	nlm_write_os_scratch_2(0ULL);
+#endif
+}
+
 void __cpuinit tlb_init(void)
 {
 	/*
@@ -467,5 +480,7 @@ void __cpuinit tlb_init(void)
 			printk("Ignoring invalid argument ntlb=%d\n", ntlb);
 	}
 
+	nlm_tlb_stats_init();
+
 	build_tlb_refill_handler();
 }
diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index bdb39c3..c66fb9c 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -869,6 +869,12 @@ static void __cpuinit build_r4000_tlb_refill_handler(void)
 		/* No need for uasm_i_nop */
 	}
 
+#ifdef CONFIG_NLM_TLB_STAT
+	uasm_i_dmfc0(&p, K0, OS_SCRATCH_REG2);
+	uasm_i_daddiu(&p, K0, K0, 1);
+	uasm_i_dmtc0(&p, K0, OS_SCRATCH_REG2);
+#endif
+
 #ifdef CONFIG_64BIT
 	build_get_pmde64(&p, &l, &r, K0, K1); /* get pmd in K1 */
 #else
@@ -883,6 +889,16 @@ static void __cpuinit build_r4000_tlb_refill_handler(void)
 	build_update_entries(&p, K0, K1);
 	build_tlb_write_entry(&p, &l, &r, tlb_random);
 	uasm_l_leave(&l, p);
+	/*
+	 * FIXME: Do we need the following ifdef functionality
+	 */
+#ifdef CONFIG_NLM_TLB_STAT
+	/* this is to avoid split of the table at eret instruction
+	 * The code below does a split at 30th instruction.
+	 */
+	if ((p - tlb_handler) == 30)
+		uasm_i_nop(&p);
+#endif
 	uasm_i_eret(&p); /* return from trap */
 
 #ifdef CONFIG_HUGETLB_PAGE
diff --git a/arch/mips/netlogic/Kconfig b/arch/mips/netlogic/Kconfig
index 1747edb..7bc8786 100644
--- a/arch/mips/netlogic/Kconfig
+++ b/arch/mips/netlogic/Kconfig
@@ -11,6 +11,13 @@ config NLM_ENABLE_COP2
 	help
 	  This option enables cop2 access for both user and kernel space.
 
+config NLM_TLB_STAT
+	bool "Count tlb refill exceptions"
+	depends on NLM_COMMON
+	help
+	  This counts tlb refill exceptions and the results can be accessed
+	  from /proc/netlogic/xlp_cpu
+
 config NLM_COMMON_LOAD_ADDRESS
 	hex "Netlogic Linux kernel start address"
 	depends on NLM_COMMON
-- 
1.7.0.2

