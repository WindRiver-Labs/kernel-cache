From cf7dbdc5dafc177fea97dbb4c72c8964f43376e3 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Mon, 27 Aug 2012 14:34:42 +0800
Subject: [PATCH 2/3] nlm_xlp_64_be: USB controller endianness fix

errata: Shadow BARs Are Always Big Endian

Fix for USB controller changing endianness with CPU.

This can be checked by doing a __raw_read() on the start of pci memspace, which
has USB capabilities. Offset zero reads the same value in both big and little
endian mode. If the controller kept an endianness (little according to spec),
 __raw_read() value should have been different.

Signed-off-by: Om Narasimhan <onarasimhan@netlogicmicro.com>
Integrated-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/usb/host/ehci.h | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index 372e3dd..597fc2b 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -620,7 +620,13 @@ ehci_port_speed(struct ehci_hcd *ehci, unsigned int portsc)
  * Big-endian read/write functions are arch-specific.
  * Other arches can be added if/when they're needed.
  */
-#if defined(CONFIG_ARM) && defined(CONFIG_ARCH_IXP4XX)
+
+/*
+ * In NLM_XLP, USB controller apparently changes endianness : it has the same
+ * endianness as the CPU. That explains the following, I hope.
+ */
+#if defined(CONFIG_ARM) && defined(CONFIG_ARCH_IXP4XX) ||\
+(defined(CONFIG_NLM_XLP) && defined(CONFIG_USB_EHCI_BIG_ENDIAN_MMIO))
 #define readl_be(addr)		__raw_readl((__force unsigned *)addr)
 #define writel_be(val, addr)	__raw_writel(val, (__force unsigned *)addr)
 #endif
-- 
1.7.11

