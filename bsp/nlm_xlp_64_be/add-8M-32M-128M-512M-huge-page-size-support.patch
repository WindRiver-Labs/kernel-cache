From fb2819e463b999d1b0f1125a81510f7d29d065dd Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Mon, 26 Mar 2012 16:25:20 +0800
Subject: [PATCH 13/46] add 8M 32M 128M 512M huge page size support

We need the 8M, 32M, 128M, 512M huge page size support
when page size is 4KB

Signed-off-by: Jack Tan <jack.tan@windriver.com>
Integrated-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/Kconfig                |   45 ++++++++++++++++++++++++++++++++++++++
 arch/mips/include/asm/mipsregs.h |   10 ++++----
 arch/mips/include/asm/page.h     |   14 +++++++++++-
 3 files changed, 63 insertions(+), 6 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index aadf12d..2689746 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -1651,6 +1651,51 @@ config PAGE_SIZE_64KB
 
 endchoice
 
+choice
+	prompt "Hugetlb Page Size"
+	depends on HUGETLB_PAGE
+	default HUGETLB_PAGE_SIZE_2MB
+
+config HUGETLB_PAGE_SIZE_2MB
+	bool "2MB"
+	depends on !PAGE_SIZE_16KB || !PAGE_SIZE_64KB
+
+config HUGETLB_PAGE_SIZE_8MB
+	bool "8MB"
+	depends on !PAGE_SIZE_16KB || !PAGE_SIZE_64KB
+
+config HUGETLB_PAGE_SIZE_32MB
+	bool "32MB"
+	depends on !PAGE_SIZE_64KB
+
+config HUGETLB_PAGE_SIZE_128MB
+	bool "128MB"
+	depends on !PAGE_SIZE_64KB
+
+config HUGETLB_PAGE_SIZE_512MB
+	bool "512MB"
+    
+endchoice
+
+config FORCE_MAX_ZONEORDER
+        int "Maximum zone order"
+        range 11 64
+        default "18"
+        help
+          The kernel memory allocator divides physically contiguous memory
+          blocks into "zones", where each zone is a power of two number of
+          pages.  This option selects the largest power of two that the kernel
+          keeps in the memory allocator.  If you need to allocate very large
+          blocks of physically contiguous memory, then you may need to
+          increase this value.
+
+          This config option is actually maximum order plus one. For example,
+          a value of 11 means that the largest free memory block is 2^10 pages.
+
+          The page size is not necessarily 4KB.  For example, on 64-bit
+          systems, 64KB pages can be enabled via CONFIG_PAGE_SIZE_64K.  Keep
+          this in mind when choosing a value for this option.
+
 config BOARD_SCACHE
 	bool
 
diff --git a/arch/mips/include/asm/mipsregs.h b/arch/mips/include/asm/mipsregs.h
index 2077fa4..ddfd3ce 100644
--- a/arch/mips/include/asm/mipsregs.h
+++ b/arch/mips/include/asm/mipsregs.h
@@ -230,15 +230,15 @@
 /*
  * Default huge tlb size for a given kernel configuration
  */
-#ifdef CONFIG_PAGE_SIZE_4KB
+#if defined(CONFIG_HUGETLB_PAGE_SIZE_2MB)
 #define PM_HUGE_MASK	PM_1M
-#elif defined(CONFIG_PAGE_SIZE_8KB)
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_8MB)
 #define PM_HUGE_MASK	PM_4M
-#elif defined(CONFIG_PAGE_SIZE_16KB)
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_32MB)
 #define PM_HUGE_MASK	PM_16M
-#elif defined(CONFIG_PAGE_SIZE_32KB)
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_128MB)
 #define PM_HUGE_MASK	PM_64M
-#elif defined(CONFIG_PAGE_SIZE_64KB)
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_512MB)
 #define PM_HUGE_MASK	PM_256M
 #elif defined(CONFIG_HUGETLB_PAGE)
 #error Bad page size configuration for hugetlbfs!
diff --git a/arch/mips/include/asm/page.h b/arch/mips/include/asm/page.h
index fc6476b..8833bd9 100644
--- a/arch/mips/include/asm/page.h
+++ b/arch/mips/include/asm/page.h
@@ -35,7 +35,19 @@
 #define PAGE_MASK       (~((1 << PAGE_SHIFT) - 1))
 
 #ifdef CONFIG_HUGETLB_PAGE
-#define HPAGE_SHIFT	(PAGE_SHIFT + PAGE_SHIFT - 3)
+
+#if defined(CONFIG_HUGETLB_PAGE_SIZE_2MB)
+#define HPAGE_SHIFT     21
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_8MB)
+#define HPAGE_SHIFT     23
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_32MB)
+#define HPAGE_SHIFT     25
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_128MB)
+#define HPAGE_SHIFT     27
+#elif defined(CONFIG_HUGETLB_PAGE_SIZE_512MB)
+#define HPAGE_SHIFT     29
+#endif
+
 #define HPAGE_SIZE	(_AC(1,UL) << HPAGE_SHIFT)
 #define HPAGE_MASK	(~(HPAGE_SIZE - 1))
 #define HUGETLB_PAGE_ORDER	(HPAGE_SHIFT - PAGE_SHIFT)
-- 
1.7.0

