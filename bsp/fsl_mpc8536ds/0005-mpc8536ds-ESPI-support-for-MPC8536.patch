From 14e325c8c0eabeaea00a28feaac212487bd54e2d Mon Sep 17 00:00:00 2001
From: Thomas Tai <thomas.tai@windriver.com>
Date: Wed, 29 Apr 2009 10:30:14 -0400
Subject: [PATCH] mpc8536ds: ESPI support for MPC8536

Original patch taken from rev B.1 board support ISO image for MPC8536E.
http://www.freescale.com/webapp/sps/site/prod_summary.jsp?code=MPC8536E

Add kernel config option and source file to support
Freescale Enhanced SPI Controller in MPC8536DS.

[
>>From 8efc81a3931e3550e6e9fcbe46dbb48473e63116 Mon Sep 17 00:00:00 2001
From: Chen Gong <g.chen@freescale.com>
Date: Mon, 14 Jul 2008 16:32:43 +0800
Subject: [PATCH] ESPI support for MPC8536

Signed-off-by: Chen Gong <g.chen@freescale.com>
]

Integrated-by: Thomas Tai <thomas.tai@windriver.com>
---
 drivers/spi/Kconfig    |    6 +
 drivers/spi/Makefile   |    1 +
 drivers/spi/fsl_espi.c |  606 ++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 613 insertions(+), 0 deletions(-)
 create mode 100644 drivers/spi/fsl_espi.c

diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index c04029a..63a55d9 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -135,6 +135,12 @@ config SPI_MPC83xx
 	  technology. This driver uses a simple set of shift registers for data
 	  (opposed to the CPM based descriptor model).
 
+config FSL_ESPI
+	tristate "Freescale eSPI controller"
+	depends on SPI_MASTER && FSL_SOC && EXPERIMENTAL
+	help
+	  This enables using the Freescale eSPI controllers in master mode.
+
 config SPI_OMAP_UWIRE
 	tristate "OMAP1 MicroWire"
 	depends on ARCH_OMAP1
diff --git a/drivers/spi/Makefile b/drivers/spi/Makefile
index 1c2e7fc..fed2796 100644
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -24,6 +24,7 @@ obj-$(CONFIG_SPI_OMAP24XX)		+= omap2_mcspi.o
 obj-$(CONFIG_SPI_ORION)			+= orion_spi.o
 obj-$(CONFIG_SPI_MPC52xx_PSC)		+= mpc52xx_psc_spi.o
 obj-$(CONFIG_SPI_MPC83xx)		+= spi_mpc83xx.o
+obj-$(CONFIG_FSL_ESPI)			+= fsl_espi.o
 obj-$(CONFIG_SPI_S3C24XX_GPIO)		+= spi_s3c24xx_gpio.o
 obj-$(CONFIG_SPI_S3C24XX)		+= spi_s3c24xx.o
 obj-$(CONFIG_SPI_TXX9)			+= spi_txx9.o
diff --git a/drivers/spi/fsl_espi.c b/drivers/spi/fsl_espi.c
new file mode 100644
index 0000000..1c1874d
--- /dev/null
+++ b/drivers/spi/fsl_espi.c
@@ -0,0 +1,606 @@
+/*
+ * Freescale eSPI controller driver.
+ *
+ * Copyright (C) 2008 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Chen Gong <g.chen@freescale.com>
+ * this driver is based on spi_mpc83xx.c
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/completion.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+#include <linux/irq.h>
+#include <linux/device.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_bitbang.h>
+#include <linux/platform_device.h>
+#include <linux/fsl_devices.h>
+
+#include <asm/irq.h>
+#include <linux/io.h>
+
+/* SPI Controller registers */
+struct fsl_espi_reg {
+	__be32 mode;
+	__be32 event;
+	__be32 mask;
+	__be32 command;
+	__be32 transmit;
+	__be32 receive;
+	__be32 res[2];
+	__be32 csmode[4];
+};
+
+#define MAX_CS_NUM		4
+
+/* SPI Controller mode register definitions */
+#define CSMODE_CI_INACTIVEHIGH	(1 << 31)
+#define CSMODE_CP_BEGIN_EDGECLK	(1 << 30)
+#define CSMODE_REV		(1 << 29)
+#define CSMODE_DIV16		(1 << 28)
+#define CSMODE_PM(x)		((x) << 24)
+#define CSMODE_POL_1		(1 << 20)
+#define CSMODE_LEN(x)		((x) << 16)
+#define CS_BEF(x)		((x) << 12)
+#define CS_AFT(x)		((x) << 8)
+#define CS_CG(x)		((x) << 3)
+
+#define SPMODE_ENABLE		(1 << 31)
+#define SPMODE_LOOP		(1 << 30)
+#define SPIMODE_TXTHR(x)	((x) << 8)
+#define SPIMODE_RXTHR(x)	((x) << 0)
+
+/*
+ * Default for SPI Mode:
+ * 	SPI MODE 0 (inactive low, phase middle, MSB, 8-bit length, slow clk
+ */
+#define CSMODE_INIT_VAL (CSMODE_POL_1 | CS_BEF(0) | CS_AFT(0) | CS_CG(1))
+
+#define SPMODE_INIT_VAL (SPIMODE_TXTHR(4) | SPIMODE_RXTHR(3))
+
+/* SPIE register values */
+#define SPIE_RXT	0x00002000	/* RX Over Threshold */
+#define SPIE_NE		0x00000200	/* Not empty */
+#define SPIE_NF		0x00000100	/* Not full */
+
+/* SPIM register values */
+#define SPIM_NE		0x00000200	/* Not empty */
+#define SPIM_NF		0x00000100	/* Not full */
+
+/* SPI Controller driver's private data. */
+struct fsl_espi {
+	struct fsl_espi_reg __iomem *base;
+
+	/* rx & tx bufs from the spi_transfer */
+	const void *tx;
+	void *rx;
+
+	/* functions to deal with different sized buffers */
+	void (*get_rx) (u32 rx_data, struct fsl_espi *);
+	u32 (*get_tx) (struct fsl_espi *);
+
+	int count;
+	int irq;
+
+	unsigned nsecs;		/* (clock cycle time)/2 */
+
+	u32 spibrg;		/* SPIBRG input clock */
+	u32 rx_shift;		/* RX data reg shift when in qe mode */
+	u32 tx_shift;		/* TX data reg shift when in qe mode */
+
+	void (*activate_cs) (u8 cs, u8 polarity);
+	void (*deactivate_cs) (u8 cs, u8 polarity);
+
+	struct workqueue_struct *workqueue;
+	struct work_struct work;
+
+	struct list_head queue;
+	spinlock_t lock;
+
+	struct completion done;
+};
+
+struct fsl_espi_cs {
+	/* functions to deal with different sized buffers */
+	void (*get_rx) (u32 rx_data, struct fsl_espi *);
+	u32 (*get_tx) (struct fsl_espi *);
+	u32 rx_shift;		/* RX data reg shift when in qe mode */
+	u32 tx_shift;		/* TX data reg shift when in qe mode */
+	u32 hw_mode;		/* Holds HW mode register settings */
+};
+
+static inline void fsl_espi_write_reg(__be32 __iomem *reg, u32 val)
+{
+	out_be32(reg, val);
+}
+
+static inline u32 fsl_espi_read_reg(__be32 __iomem *reg)
+{
+	return in_be32(reg);
+}
+
+#define FSL_ESPI_RX_BUF(type) 						\
+static void fsl_espi_rx_buf_##type(u32 data, struct fsl_espi *fsl_espi)	\
+{									\
+	type *rx = fsl_espi->rx;					\
+	*rx++ = (type)(data >> fsl_espi->rx_shift);			\
+	fsl_espi->rx = rx;						\
+}
+
+#define FSL_ESPI_TX_BUF(type)						\
+static u32 fsl_espi_tx_buf_##type(struct fsl_espi *fsl_espi)		\
+{									\
+	u32 data;							\
+	const type *tx = fsl_espi->tx;					\
+	if (!tx)							\
+		return 0;						\
+	data = *tx++ << fsl_espi->tx_shift;				\
+	fsl_espi->tx = tx;						\
+	return data;							\
+}
+
+FSL_ESPI_RX_BUF(u32)
+FSL_ESPI_TX_BUF(u32)
+
+static
+int fsl_espi_setup_transfer(struct spi_device *spi, struct spi_transfer *t)
+{
+	struct fsl_espi *fsl_espi;
+	u32 regval;
+	u8 bits_per_word, pm, cs_sel = spi->chip_select;
+	u32 hz;
+	struct fsl_espi_cs *cs = spi->controller_state;
+
+	fsl_espi = spi_master_get_devdata(spi->master);
+
+	if (t) {
+		bits_per_word = t->bits_per_word;
+		hz = t->speed_hz;
+	} else {
+		bits_per_word = 0;
+		hz = 0;
+	}
+
+	/* spi_transfer level calls that work per-word */
+	if (!bits_per_word)
+		bits_per_word = spi->bits_per_word;
+
+	/* Make sure its a bit width we support [4..16] */
+	if (bits_per_word < 4 || bits_per_word > 16)
+		return -EINVAL;
+	bits_per_word -= 1;
+
+	if (!hz)
+		hz = spi->max_speed_hz;
+
+	cs->rx_shift = 0;
+	cs->tx_shift = 0;
+	cs->get_rx = fsl_espi_rx_buf_u32;
+	cs->get_tx = fsl_espi_tx_buf_u32;
+
+	fsl_espi->rx_shift = cs->rx_shift;
+	fsl_espi->tx_shift = cs->tx_shift;
+	fsl_espi->get_rx = cs->get_rx;
+	fsl_espi->get_tx = cs->get_tx;
+
+	/* mask out bits we are going to set */
+	cs->hw_mode &= ~(CSMODE_LEN(0xF) | CSMODE_DIV16 | CSMODE_PM(0xF));
+
+	cs->hw_mode |= CSMODE_LEN(bits_per_word) | CSMODE_INIT_VAL;
+
+	if ((fsl_espi->spibrg / hz) >= 32) {
+		pm = fsl_espi->spibrg / (hz * 32);
+		if (pm > 16) {
+			cs->hw_mode |= CSMODE_DIV16;
+			pm = pm / 16;
+			if (pm > 16) {
+				dev_err(&spi->dev, "Requested speed is too "
+					"low: %d Hz. Will use %d Hz instead.\n",
+					hz, fsl_espi->spibrg / 1024);
+				pm = 16;
+			}
+		}
+	} else
+		pm = fsl_espi->spibrg / (hz * 2);
+	if (pm)
+		pm--;
+	cs->hw_mode |= CSMODE_PM(pm);
+	regval = fsl_espi_read_reg(&fsl_espi->base->csmode[cs_sel]);
+	if (cs->hw_mode != regval) {
+		/* If not set, transmission will be stuck */
+		printk(KERN_INFO
+			"Freescale eSPI Controller transmission stuck.\n");
+	}
+	{
+		unsigned long flags;
+		void *csmode_ptr = &fsl_espi->base->csmode[cs_sel];
+		void *mode_ptr = &fsl_espi->base->mode;
+
+		regval = fsl_espi_read_reg(mode_ptr);
+		/* Turn off IRQs locally to minimize time
+		 * that SPI is disabled. To avoid clock glitch
+		 * see the commit c9bfcb3151040cff6
+		 */
+		local_irq_save(flags);
+		/* Turn off SPI unit prior changing mode */
+		fsl_espi_write_reg(mode_ptr, regval & ~SPMODE_ENABLE);
+		fsl_espi_write_reg(csmode_ptr, cs->hw_mode);
+		fsl_espi_write_reg(mode_ptr, regval);
+		local_irq_restore(flags);
+	}
+	return 0;
+}
+
+static int fsl_espi_bufs(struct spi_device *spi, struct spi_transfer *t)
+{
+	struct fsl_espi *fsl_espi;
+	u32 word, len, bits_per_word;
+
+	fsl_espi = spi_master_get_devdata(spi->master);
+
+	fsl_espi->tx = t->tx_buf;
+	fsl_espi->rx = t->rx_buf;
+	bits_per_word = spi->bits_per_word;
+	if (t->bits_per_word)
+		bits_per_word = t->bits_per_word;
+	len = t->len;
+	fsl_espi->count = len;
+
+	/* every frame owns one byte */
+	fsl_espi_write_reg(&fsl_espi->base->command,
+			(spi->chip_select << 30) | (len - 1));
+	INIT_COMPLETION(fsl_espi->done);
+
+	/* enable rx ints */
+	fsl_espi_write_reg(&fsl_espi->base->mask, SPIM_NE);
+
+	/* transmit word */
+	word = fsl_espi->get_tx(fsl_espi);
+	fsl_espi_write_reg(&fsl_espi->base->transmit, word);
+
+	wait_for_completion(&fsl_espi->done);
+
+	return fsl_espi->count;
+}
+
+static void fsl_espi_work(struct work_struct *work)
+{
+	struct fsl_espi *fsl_espi =
+		container_of(work, struct fsl_espi, work);
+
+	spin_lock_irq(&fsl_espi->lock);
+	while (!list_empty(&fsl_espi->queue)) {
+		struct spi_message *m;
+		struct spi_device *spi;
+		struct spi_transfer *t = NULL;
+		int status;
+
+		m = container_of(fsl_espi->queue.next,
+				struct spi_message, queue);
+		list_del_init(&m->queue);
+		spin_unlock_irq(&fsl_espi->lock);
+
+		spi = m->spi;
+		status = 0;
+		list_for_each_entry(t, &m->transfers, transfer_list) {
+			/*
+			 * if not been setup before every transmission,
+			 * it will be stuck !
+			 */
+			fsl_espi_setup_transfer(spi, t);
+			if (t->len)
+				status = fsl_espi_bufs(spi, t);
+			if (status) {
+				status = -EMSGSIZE;
+				break;
+			}
+			m->actual_length += t->len;
+
+			if (t->delay_usecs)
+				udelay(t->delay_usecs);
+		}
+
+		m->status = status;
+		m->complete(m->context);
+
+		fsl_espi_setup_transfer(spi, NULL);
+
+		spin_lock_irq(&fsl_espi->lock);
+	}
+	spin_unlock_irq(&fsl_espi->lock);
+}
+
+/* the spi->mode bits understood by this driver: */
+#define MODEBITS	(SPI_CPOL | SPI_CPHA | SPI_CS_HIGH \
+			| SPI_LSB_FIRST | SPI_LOOP)
+
+static int fsl_espi_setup(struct spi_device *spi)
+{
+	struct fsl_espi *fsl_espi;
+	int retval;
+	u32 hw_mode;
+	struct fsl_espi_cs	*cs = spi->controller_state;
+
+	if (spi->mode & ~MODEBITS) {
+		dev_dbg(&spi->dev, "setup: unsupported mode bits %x\n",
+			spi->mode & ~MODEBITS);
+		return -EINVAL;
+	}
+
+	if (!spi->max_speed_hz)
+		return -EINVAL;
+
+	if (!cs) {
+		cs = kzalloc(sizeof(*cs), GFP_KERNEL);
+		if (!cs)
+			return -ENOMEM;
+		spi->controller_state = cs;
+	}
+
+	fsl_espi = spi_master_get_devdata(spi->master);
+
+	if (!spi->bits_per_word)
+		spi->bits_per_word = 8;
+
+	hw_mode = cs->hw_mode; /* Save orginal settings */
+	cs->hw_mode =
+		fsl_espi_read_reg(&fsl_espi->base->csmode[spi->chip_select]);
+	/* mask out bits we are going to set */
+	cs->hw_mode &= ~(CSMODE_CP_BEGIN_EDGECLK | CSMODE_CI_INACTIVEHIGH
+			 | CSMODE_REV);
+
+	if (spi->mode & SPI_CPHA)
+		cs->hw_mode |= CSMODE_CP_BEGIN_EDGECLK;
+	if (spi->mode & SPI_CPOL)
+		cs->hw_mode |= CSMODE_CI_INACTIVEHIGH;
+	if (!(spi->mode & SPI_LSB_FIRST))
+		cs->hw_mode |= CSMODE_REV;
+
+	retval = fsl_espi_setup_transfer(spi, NULL);
+	if (retval < 0) {
+		cs->hw_mode = hw_mode; /* Restore settings */
+		return retval;
+	}
+
+	dev_dbg(&spi->dev, "%s, mode %d, %u bits/w, %u Hz\n",
+		__func__, spi->mode & (SPI_CPOL | SPI_CPHA),
+		spi->bits_per_word, spi->max_speed_hz);
+	return 0;
+}
+
+irqreturn_t fsl_espi_irq(s32 irq, void *context_data)
+{
+	struct fsl_espi *fsl_espi = context_data;
+	u32 event, rx_data, word;
+
+	/* Get interrupt events(tx/rx) */
+	event = fsl_espi_read_reg(&fsl_espi->base->event);
+
+	/* We need handle RX first */
+	if (event & SPIE_RXT || (fsl_espi->count < 4 && (event & SPIE_NE))) {
+		rx_data = fsl_espi_read_reg(&fsl_espi->base->receive);
+
+		if (fsl_espi->rx)
+			fsl_espi->get_rx(rx_data, fsl_espi);
+	} else {
+		/* Clear the events */
+		fsl_espi_write_reg(&fsl_espi->base->event, event);
+		return IRQ_HANDLED;
+	}
+
+	fsl_espi->count -= 4;
+	if (fsl_espi->count > 0) {
+		if ((event & SPIE_NF) == 0)
+			/* spin until TX is done */
+			while (((event =
+				fsl_espi_read_reg(&fsl_espi->base->event)) &
+					SPIE_NF) == 0) {
+				cpu_relax();
+			}
+
+		word = fsl_espi->get_tx(fsl_espi);
+		fsl_espi_write_reg(&fsl_espi->base->transmit, word);
+	} else {
+		fsl_espi->count = 0;
+		/* disable rx ints */
+		fsl_espi_write_reg(&fsl_espi->base->mask, 0);
+		complete(&fsl_espi->done);
+	}
+
+	/* Clear the events */
+	fsl_espi_write_reg(&fsl_espi->base->event, event);
+
+	return IRQ_HANDLED;
+}
+
+static int fsl_espi_transfer(struct spi_device *spi,
+				struct spi_message *m)
+{
+	struct fsl_espi *fsl_espi = spi_master_get_devdata(spi->master);
+	unsigned long flags;
+
+	m->actual_length = 0;
+	m->status = -EINPROGRESS;
+
+	spin_lock_irqsave(&fsl_espi->lock, flags);
+	list_add_tail(&m->queue, &fsl_espi->queue);
+	queue_work(fsl_espi->workqueue, &fsl_espi->work);
+	spin_unlock_irqrestore(&fsl_espi->lock, flags);
+
+	return 0;
+}
+
+
+static void fsl_espi_cleanup(struct spi_device *spi)
+{
+	kfree(spi->controller_state);
+}
+
+static int __init fsl_espi_probe(struct platform_device *dev)
+{
+	struct spi_master *master;
+	struct fsl_espi *fsl_espi;
+	struct fsl_spi_platform_data *pdata;
+	struct resource *r;
+	u32 regval;
+	int ret = 0;
+
+	/* Get resources(memory, IRQ) associated with the device */
+	master = spi_alloc_master(&dev->dev, sizeof(struct fsl_espi));
+
+	if (master == NULL) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	platform_set_drvdata(dev, master);
+	pdata = dev->dev.platform_data;
+
+	if (pdata == NULL) {
+		ret = -ENODEV;
+		goto free_master;
+	}
+
+	r = platform_get_resource(dev, IORESOURCE_MEM, 0);
+	if (r == NULL) {
+		ret = -ENODEV;
+		goto free_master;
+	}
+	master->setup = fsl_espi_setup;
+	master->transfer = fsl_espi_transfer;
+	master->cleanup = fsl_espi_cleanup;
+
+	fsl_espi = spi_master_get_devdata(master);
+	fsl_espi->activate_cs = pdata->activate_cs;
+	fsl_espi->deactivate_cs = pdata->deactivate_cs;
+	fsl_espi->get_rx = fsl_espi_rx_buf_u32;
+	fsl_espi->get_tx = fsl_espi_tx_buf_u32;
+	fsl_espi->spibrg = pdata->sysclk;
+
+	fsl_espi->rx_shift = 0;
+	fsl_espi->tx_shift = 0;
+
+	init_completion(&fsl_espi->done);
+
+	fsl_espi->base = ioremap(r->start, r->end - r->start + 1);
+	if (fsl_espi->base == NULL) {
+		ret = -ENOMEM;
+		goto put_master;
+	}
+
+	fsl_espi->irq = platform_get_irq(dev, 0);
+
+	if (fsl_espi->irq < 0) {
+		ret = -ENXIO;
+		goto unmap_io;
+	}
+
+	/* Register for SPI Interrupt */
+	ret = request_irq(fsl_espi->irq, fsl_espi_irq,
+			  0, "fsl_espi", fsl_espi);
+
+	if (ret != 0)
+		goto unmap_io;
+
+	master->bus_num = pdata->bus_num;
+	master->num_chipselect = pdata->max_chipselect;
+
+	/* SPI controller initializations */
+	fsl_espi_write_reg(&fsl_espi->base->mode, 0);
+	fsl_espi_write_reg(&fsl_espi->base->mask, 0);
+	fsl_espi_write_reg(&fsl_espi->base->command, 0);
+	fsl_espi_write_reg(&fsl_espi->base->event, 0xffffffff);
+
+	/* Enable SPI interface */
+	regval = pdata->initial_spmode | SPMODE_INIT_VAL | SPMODE_ENABLE;
+	fsl_espi_write_reg(&fsl_espi->base->mode, regval);
+	/* init CS mode interface */
+	for (ret = 0; ret < MAX_CS_NUM; ret++)
+		fsl_espi_write_reg(&fsl_espi->base->csmode[ret],
+				CSMODE_INIT_VAL);
+
+	spin_lock_init(&fsl_espi->lock);
+	init_completion(&fsl_espi->done);
+	INIT_WORK(&fsl_espi->work, fsl_espi_work);
+	INIT_LIST_HEAD(&fsl_espi->queue);
+
+	fsl_espi->workqueue = create_singlethread_workqueue(
+		master->dev.parent->bus_id);
+	if (fsl_espi->workqueue == NULL) {
+		ret = -EBUSY;
+		goto free_irq;
+	}
+
+	ret = spi_register_master(master);
+	if (ret < 0)
+		goto unreg_master;
+
+	printk(KERN_INFO
+	       "%s: Freescale eSPI Controller driver at 0x%p (irq = %d)\n",
+	       dev->dev.bus_id, fsl_espi->base, fsl_espi->irq);
+
+	return ret;
+
+unreg_master:
+	destroy_workqueue(fsl_espi->workqueue);
+free_irq:
+	free_irq(fsl_espi->irq, fsl_espi);
+unmap_io:
+	iounmap(fsl_espi->base);
+put_master:
+	spi_master_put(master);
+free_master:
+	kfree(master);
+err:
+	return ret;
+}
+
+static int __exit fsl_espi_remove(struct platform_device *dev)
+{
+	struct fsl_espi *fsl_espi;
+	struct spi_master *master;
+
+	master = platform_get_drvdata(dev);
+	fsl_espi = spi_master_get_devdata(master);
+
+	flush_workqueue(fsl_espi->workqueue);
+	destroy_workqueue(fsl_espi->workqueue);
+	spi_unregister_master(master);
+
+	free_irq(fsl_espi->irq, fsl_espi);
+	iounmap(fsl_espi->base);
+
+	return 0;
+}
+
+MODULE_ALIAS("platform:fsl-espi");
+static struct platform_driver fsl_espi_driver = {
+	.remove = __exit_p(fsl_espi_remove),
+	.driver = {
+		.name = "fsl_espi",
+		.owner = THIS_MODULE,
+	},
+};
+
+static int __init fsl_espi_init(void)
+{
+	return platform_driver_probe(&fsl_espi_driver, fsl_espi_probe);
+}
+
+static void __exit fsl_espi_exit(void)
+{
+	platform_driver_unregister(&fsl_espi_driver);
+}
+
+module_init(fsl_espi_init);
+module_exit(fsl_espi_exit);
+
-- 
1.6.0.4

