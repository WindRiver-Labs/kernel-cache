From 4a3ffe28072a944ca35b24252dc7b748a4bf1f07 Mon Sep 17 00:00:00 2001
From: Li Liang <Liang.Li@windriver.com>
Date: Wed, 10 Sep 2008 10:21:52 -0400
Subject: [PATCH] Fix serial problem for SC16C2550 on sbc8560 board

The UART chip on the sb8560 board is a sc16c2550.  It needs to
wait for the transmit holding register to become empty before writing
data into the register.  Treat this as a generic UART bug so that it
can also be used by other problematic UARTs, as required.

Signed-off-by: Li Liang <Liang.Li@windriver.com>
Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
diff --git a/drivers/serial/8250.c b/drivers/serial/8250.c
index ddb6bcd..4e69d0a 100644
--- a/drivers/serial/8250.c
+++ b/drivers/serial/8250.c
@@ -151,6 +151,8 @@ struct irq_info {
 
 static struct irq_info irq_lists[NR_IRQS];
 
+static inline void wait_for_xmitr(struct uart_8250_port *up, int bits);
+
 /*
  * Here we define the default xmit fifo size used for each type of UART.
  */
@@ -1382,6 +1384,8 @@ static void transmit_chars(struct uart_8250_port *up)
 
 	count = up->tx_loadsz;
 	do {
+		if(up->bugs & UART_BUG_TXW)
+			wait_for_xmitr(up, UART_LSR_THRE);
 		serial_out(up, UART_TX, xmit->buf[xmit->tail]);
 		xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
 		up->port.icount.tx++;
diff --git a/drivers/serial/8250.h b/drivers/serial/8250.h
index 5202603..253d95b 100644
--- a/drivers/serial/8250.h
+++ b/drivers/serial/8250.h
@@ -50,6 +50,7 @@ struct serial8250_config {
 #define UART_BUG_NOMSR	(1 << 2)	/* UART has buggy MSR status bits (Au1x00) */
 #define UART_BUG_THRE	(1 << 3)	/* UART has buggy THRE reassertion */
 #define UART_BUG_PPC	(1 << 4)	/* UART has buggy PPC break IRQ storm */
+#define UART_BUG_TXW 	(1 << 5)	/* UART needs extra wait_for_xmitr() */
 
 #define PROBE_RSA	(1 << 0)
 #define PROBE_ANY	(~0)
@@ -74,8 +75,12 @@ struct serial8250_config {
  * WindRiver did something similarly broken on their SBC8560 board. The
  * UART tristates its IRQ output while OUT2 is clear, but they pulled
  * the interrupt line _up_ instead of down, so if we register the IRQ
- * while the UART is in that state, we die in an IRQ storm. */
+ * while the UART is in that state, we die in an IRQ storm.
+ * It seems that the SC16C2550 also needs a wait for the transmit
+ * holding register to become empty before writing data into it.
+ */
 #define ALPHA_KLUDGE_MCR (UART_MCR_OUT2)
+#define UART_KNOWN_BUGS (UART_BUG_TXW)
 #else
 #define ALPHA_KLUDGE_MCR 0
 #endif
