From 27b60bf12efce74c2a6f580976af2c37948f4691 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Thu, 12 May 2011 11:23:51 +0800
Subject: [PATCH] fsl_mpc8572_ds/pci: clean/fixup some PCIe resources

For PPC we should set PPC_PCI_REASSIGN_ALL_RSRC in machine ds probe
before PPC PCI subsystem is called, then PCI IO/Mem resources can be
re-allocated.

Then We provide two fixup to modify sata/pata devices resources like
the original. Here we get these values from when the guest OS run the
BootROM without PCI initialization.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/kernel/vbi/wrhv.c            |    3 --
 arch/powerpc/platforms/85xx/wrhv_8572ds.c |   34 +++++++++++++++++++++++++++++
 2 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index ac93256..86a9fd8 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -2231,9 +2231,6 @@ void wrhv_init(void)
 #ifdef CONFIG_WRHV_DUART
 	pv_serial_ops.udbg_init_uart = wrhv_udbg_init_uart;
 #endif
-#ifdef CONFIG_PCI
-	ppc_pci_set_flags(PPC_PCI_REASSIGN_ALL_RSRC);
-#endif
 }
 
 __weak void wrhv_setup_msr_for_ap(VBI_HREG_SET_CMPLX_QUALIFIED *regs)
diff --git a/arch/powerpc/platforms/85xx/wrhv_8572ds.c b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
index 2add723..a89f058 100644
--- a/arch/powerpc/platforms/85xx/wrhv_8572ds.c
+++ b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
@@ -256,6 +256,36 @@ static int __init mpc8572_ds_probe(void)
 	return 0;
 }
 
+#ifdef CONFIG_PCI
+/* We have to restore appropriate BAR resources to ensure the kernel
+ *  can allocate device resources.
+ */
+/* SATA */
+static void __devinit quirk_uli5288(struct pci_dev *dev)
+{
+	/* Reset IO BARs as we expect to be reassigned */
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_0, 0x01e0);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_1, 0x03e8);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_2, 0x0160);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_3, 0x0368);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_4, 0xe000);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_5, 0x0000);
+}
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_AL, 0x5288, quirk_uli5288);
+
+/* PATA */
+static void __devinit quirk_uli5229(struct pci_dev *dev)
+{
+	/* Reset IO BARs as we expect to be reassigned */
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_0, 0x01f0);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_1, 0x03f4);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_2, 0x0170);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_3, 0x0374);
+	pci_write_config_dword(dev, PCI_BASE_ADDRESS_4, 0xf000);
+}
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_AL, 0x5229, quirk_uli5229);
+#endif
+
 /*
  * Called very early, device-tree isn't unflattened
  */
@@ -270,6 +300,10 @@ static int __init p2020_ds_probe(void)
 		return 1;
 	}
 
+#ifdef CONFIG_PCI
+	ppc_pci_set_flags(PPC_PCI_REASSIGN_ALL_RSRC);
+#endif
+
 	return 0;
 }
 
-- 
1.7.0.2

