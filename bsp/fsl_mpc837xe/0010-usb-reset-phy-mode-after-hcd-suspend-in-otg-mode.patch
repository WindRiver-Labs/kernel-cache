From b05759156bc81f8696e436bc637e4b94c8d19b66 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Fri, 28 Aug 2009 16:36:14 +0800
Subject: [PATCH 10/38] usb: reset phy mode after hcd suspend in otg mode

The Freescale DR uses 31-30 bit of portsc to select the phy mode.
But these bits are not defined in EHCI specification. And the hcd
driver will clear these bits after usb_remove_hcd. This will leave
the usb controller in the wrong phy mode and cause OTG to fail to work.
So reset the phy mode after we remove hcd device.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/usb/host/ehci-fsl.c |  103 +++++++++++++++++++++++--------------------
 1 files changed, 55 insertions(+), 48 deletions(-)

diff --git a/drivers/usb/host/ehci-fsl.c b/drivers/usb/host/ehci-fsl.c
index 4e08799..619b07b 100644
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@ -27,6 +27,59 @@
 /* FIXME: Power Management is un-ported so temporarily disable it */
 #undef CONFIG_PM
 
+static void mpc83xx_setup_phy(struct usb_hcd *hcd)
+{
+	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
+	struct fsl_usb2_platform_data *pdata;
+	enum fsl_usb2_phy_modes phy_mode;
+	u32 portsc = 0;
+
+
+	pdata =
+	   (struct fsl_usb2_platform_data *)hcd->self.controller->platform_data;
+
+	phy_mode = pdata->phy_mode;
+
+	switch (phy_mode) {
+	case FSL_USB2_PHY_ULPI:
+		portsc |= PORT_PTS_ULPI;
+		break;
+	case FSL_USB2_PHY_SERIAL:
+		portsc |= PORT_PTS_SERIAL;
+		break;
+	case FSL_USB2_PHY_UTMI_WIDE:
+		portsc |= PORT_PTS_PTW;
+		/* fall through */
+	case FSL_USB2_PHY_UTMI:
+		portsc |= PORT_PTS_UTMI;
+		break;
+	case FSL_USB2_PHY_NONE:
+		break;
+	}
+
+	if ((pdata->operating_mode == FSL_USB2_DR_HOST) ||
+			(pdata->operating_mode == FSL_USB2_DR_OTG))
+		ehci_writel(ehci, portsc, &ehci->regs->port_status[0]);
+
+	if (pdata->operating_mode == FSL_USB2_MPH_HOST) {
+		unsigned int chip, rev, svr;
+
+		svr = mfspr(SPRN_SVR);
+		chip = svr >> 16;
+		rev = (svr >> 4) & 0xf;
+
+		/* Deal with USB Erratum #14 on MPC834x Rev 1.0 & 1.1 chips */
+		if ((rev == 1) && (chip >= 0x8050) && (chip <= 0x8055))
+			ehci->has_fsl_port_bug = 1;
+
+		if (pdata->port_enables & FSL_USB2_PORT0_ENABLED)
+			ehci_writel(ehci, portsc, &ehci->regs->port_status[0]);
+		if (pdata->port_enables & FSL_USB2_PORT1_ENABLED)
+			ehci_writel(ehci, portsc, &ehci->regs->port_status[1]);
+	}
+
+	return;
+}
 
 #if defined(CONFIG_FSL_USB_OTG) || defined(CONFIG_FSL_USB_OTG_MODULE)
 /* backup of ehci registers */
@@ -51,6 +104,7 @@ static void do_change_hcd(struct work_struct *work)
 			have_hcd = 1;
 	} else if (!hcd_add && have_hcd) {
 		usb_remove_hcd(hcd);
+		mpc83xx_setup_phy(hcd);
 		have_hcd = 0;
 	}
 }
@@ -231,40 +285,12 @@ void usb_hcd_fsl_remove(struct usb_hcd *hcd, struct platform_device *pdev)
 	usb_put_hcd(hcd);
 }
 
-static void mpc83xx_setup_phy(struct ehci_hcd *ehci,
-			      enum fsl_usb2_phy_modes phy_mode,
-			      unsigned int port_offset)
-{
-	u32 portsc = 0;
-	switch (phy_mode) {
-	case FSL_USB2_PHY_ULPI:
-		portsc |= PORT_PTS_ULPI;
-		break;
-	case FSL_USB2_PHY_SERIAL:
-		portsc |= PORT_PTS_SERIAL;
-		break;
-	case FSL_USB2_PHY_UTMI_WIDE:
-		portsc |= PORT_PTS_PTW;
-		/* fall through */
-	case FSL_USB2_PHY_UTMI:
-		portsc |= PORT_PTS_UTMI;
-		break;
-	case FSL_USB2_PHY_NONE:
-		break;
-	}
-	ehci_writel(ehci, portsc, &ehci->regs->port_status[port_offset]);
-}
-
 static void mpc83xx_usb_setup(struct usb_hcd *hcd)
 {
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
-	struct fsl_usb2_platform_data *pdata;
 	void __iomem *non_ehci = hcd->regs;
 	u32 temp;
 
-	pdata =
-	    (struct fsl_usb2_platform_data *)hcd->self.controller->
-	    platform_data;
 	/* Enable PHY interface in the control reg. */
 	temp = in_be32(non_ehci + FSL_SOC_USB_CTRL);
 	out_be32(non_ehci + FSL_SOC_USB_CTRL, temp | 0x00000004);
@@ -283,26 +309,7 @@ static void mpc83xx_usb_setup(struct usb_hcd *hcd)
 	out_be32(non_ehci + FSL_SOC_USB_SNOOP2, 0x80000000 | SNOOP_SIZE_2GB);
 #endif
 
-	if ((pdata->operating_mode == FSL_USB2_DR_HOST) ||
-			(pdata->operating_mode == FSL_USB2_DR_OTG))
-		mpc83xx_setup_phy(ehci, pdata->phy_mode, 0);
-
-	if (pdata->operating_mode == FSL_USB2_MPH_HOST) {
-		unsigned int chip, rev, svr;
-
-		svr = mfspr(SPRN_SVR);
-		chip = svr >> 16;
-		rev = (svr >> 4) & 0xf;
-
-		/* Deal with USB Erratum #14 on MPC834x Rev 1.0 & 1.1 chips */
-		if ((rev == 1) && (chip >= 0x8050) && (chip <= 0x8055))
-			ehci->has_fsl_port_bug = 1;
-
-		if (pdata->port_enables & FSL_USB2_PORT0_ENABLED)
-			mpc83xx_setup_phy(ehci, pdata->phy_mode, 0);
-		if (pdata->port_enables & FSL_USB2_PORT1_ENABLED)
-			mpc83xx_setup_phy(ehci, pdata->phy_mode, 1);
-	}
+	mpc83xx_setup_phy(hcd);
 
 	/* put controller in host mode. */
 	ehci_writel(ehci, 0x00000003, non_ehci + FSL_SOC_USB_USBMODE);
-- 
1.6.3.3

