From 42fc1f2eb9fa23db0630d8a80a98a86b20ac7ea0 Mon Sep 17 00:00:00 2001
From: Roy Zang <tie-fei.zang@freescale.com>
Date: Wed, 10 Feb 2010 17:54:13 +0800
Subject: [PATCH] esdhc: Add ESDHC errata 1, 9, 11, 12 workaround

Signed-off-by: Roy Zang <tie-fei.zang@freescale.com>
[Kevin: Original patch taken from Freescale p4080 SDK 2.0.3 tar
package, apply cleanly to kernel 2.6.27]
Integrated-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/mmc/host/sdhci-of.c |    6 ++++++
 drivers/mmc/host/sdhci.c    |   33 +++++++++++++++++++++++++++++++++
 drivers/mmc/host/sdhci.h    |    4 ++++
 3 files changed, 43 insertions(+), 0 deletions(-)

diff --git a/drivers/mmc/host/sdhci-of.c b/drivers/mmc/host/sdhci-of.c
index a12473a..c82bf98 100644
--- a/drivers/mmc/host/sdhci-of.c
+++ b/drivers/mmc/host/sdhci-of.c
@@ -251,6 +251,12 @@ static int __devinit sdhci_of_probe(struct of_device *ofdev,
 	if (of_get_property(np, "fsl,sdhci-auto-cmd12", NULL))
 		host->quirks |= SDHCI_QUIRK_MULTIBLOCK_READ_ACMD12;
 
+	if (of_device_is_compatible(np, "fsl,p4080-esdhc")) {
+		host->quirks |= SDHCI_QUIRK_QORIQ_REG_WEIRD |
+			SDHCI_QUIRK_QORIQ_TIMEOUT_WEIRD;
+		host->quirks &= ~SDHCI_QUIRK_INVERTED_WRITE_PROTECT;
+	}
+
 	clk = of_get_property(np, "clock-frequency", &size);
 	if (clk && size == sizeof(*clk) && *clk)
 		of_host->clock = *clk;
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 4237965..ac25d7f 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -163,6 +163,16 @@ static void sdhci_reset(struct sdhci_host *host, u8 mask)
 
 	if (host->quirks & SDHCI_QUIRK_RESTORE_IRQS_AFTER_RESET)
 		sdhci_clear_set_irqs(host, SDHCI_INT_ALL_MASK, ier);
+
+	/* Add P4080 ESDHC9 errata workaround.
+	 * Reset value of WML register should be 0x02100210
+	 * Only need on Rev1 silicon
+	 */
+#define ESDHC_WML	0x44
+	if (host->quirks & SDHCI_QUIRK_QORIQ_REG_WEIRD)
+		if ((mfspr(SPRN_SVR) & 0xff) == 0x10)
+			sdhci_writel(host, 0x02100210, ESDHC_WML);
+
 }
 
 static void sdhci_init(struct sdhci_host *host)
@@ -607,6 +617,17 @@ static u8 sdhci_calc_timeout(struct sdhci_host *host, struct mmc_data *data)
 		count = 0xE;
 	}
 
+	/* Add p4080 ESDHC11 workaround. Only need on Rev1 silicon */
+	if (host->quirks & SDHCI_QUIRK_QORIQ_TIMEOUT_WEIRD)
+		if ((mfspr(SPRN_SVR) & 0xff) == 0x10) {
+			if (count == 4)
+				count = 5;
+			if (count == 8)
+				count = 9;
+			if (count == 12)
+				count = 13;
+		}
+
 	return count;
 }
 
@@ -763,6 +784,15 @@ static void sdhci_prepare_data(struct sdhci_host *host, struct mmc_data *data)
 		sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
 	}
 
+	/* The default value of DMAS bits of Protocol Control Register is not
+	 * correct. clear these two bits to use simple DMA */
+#define  ESDHCI_CTRL_DMAS_MASK		0xFFFFFCFF
+	if (host->quirks & SDHCI_QUIRK_QORIQ_REG_WEIRD) {
+		ctrl = sdhci_readl(host, SDHCI_HOST_CONTROL);
+		ctrl = ctrl & ESDHCI_CTRL_DMAS_MASK;
+		sdhci_writel(host, ctrl, SDHCI_HOST_CONTROL);
+	}
+
 	if (!(host->flags & SDHCI_REQ_USE_DMA)) {
 		sg_miter_start(&host->sg_miter,
 			data->sg, data->sg_len, SG_MITER_ATOMIC);
@@ -1602,6 +1632,9 @@ int sdhci_add_host(struct sdhci_host *host)
 
 	caps = sdhci_readl(host, SDHCI_CAPABILITIES);
 
+	 /* Workaround for P4080 ESDHC12 errata */
+	caps &= ~(SDHCI_CAN_VDD_180 | SDHCI_CAN_VDD_330);
+
 	if (host->quirks & SDHCI_QUIRK_FORCE_DMA)
 		host->flags |= SDHCI_USE_DMA;
 	else if (!(caps & SDHCI_CAN_DO_DMA))
diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
index 20618a4..6a15469 100644
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@ -230,6 +230,10 @@ struct sdhci_host {
 #define SDHCI_QUIRK_FORCE_BLK_SZ_2048			(1<<20)
 /* Controller uses Auto CMD12 command to stop the transfer */
 #define SDHCI_QUIRK_MULTIBLOCK_READ_ACMD12		(1<<25)
+/* Controller has weird bit setting for some registers due to errata */
+#define SDHCI_QUIRK_QORIQ_REG_WEIRD			(1<<26)
+/* Controller has time out errata */
+#define SDHCI_QUIRK_QORIQ_TIMEOUT_WEIRD			(1<<27)
 
 	int			irq;		/* Device IRQ */
 	void __iomem *		ioaddr;		/* Mapped address */
-- 
1.6.0.4

