From a82e34a8df1397be0d04d92f112f9925e9ddfe4d Mon Sep 17 00:00:00 2001
From: Roy Zang <tie-fei.zang@freescale.com>
Date: Thu, 24 Sep 2009 10:07:56 +0800
Subject: [PATCH 34/52] dpa: bug fix for 4144

This was found by WRS.
WD TRACE report B0029 is described as:
We have a process which performs ETHTOOL_GSET ioctls on all network interfaces.
When it gets to the macless ethernet devices, the kernel panics. This is due to
a missing check for NULL in dpa-ethtool.c, function dpa_get_settings.  On a
macless device, priv->mac_dev is NULL, which results in a panic. It is a simple
fix, several functions in this file should check for NULL.  A patch which fixes
the problem is attached.

Signed-off-by: Roy Zang <tie-fei.zang@freescale.com>
[KevinHao: Original Patch taken from Freescale
P4080_WRlinux-rc2_20090915 tarball vendor drop.]
Integrated-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/dpa/dpa-ethtool.c |   30 ++++++++++++++++++++++++++++++
 1 files changed, 30 insertions(+), 0 deletions(-)

diff --git a/drivers/net/dpa/dpa-ethtool.c b/drivers/net/dpa/dpa-ethtool.c
index b8a2ac5..598a738 100644
--- a/drivers/net/dpa/dpa-ethtool.c
+++ b/drivers/net/dpa/dpa-ethtool.c
@@ -43,6 +43,12 @@ static int __cold dpa_get_settings(struct net_device *net_dev, struct ethtool_cm
 
 	priv = (typeof(priv))netdev_priv(net_dev);
 
+    if (unlikely(priv->mac_dev == NULL)) {
+       cpu_netdev_err(net_dev, "%s:%hu:%s(): called on a macless device\n",
+			       __file__, __LINE__, __func__);
+		return -ENODEV;
+    }
+
 	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): phy device not initialized\n",
 			       __file__, __LINE__, __func__);
@@ -68,6 +74,12 @@ static int __cold dpa_set_settings(struct net_device *net_dev, struct ethtool_cm
 
 	priv = (typeof(priv))netdev_priv(net_dev);
 
+    if (unlikely(priv->mac_dev == NULL)) {
+       cpu_netdev_err(net_dev, "%s:%hu:%s(): called on a macless device\n",
+			       __file__, __LINE__, __func__);
+		return -ENODEV;
+    }
+
 	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): phy device not initialized\n",
 			       __file__, __LINE__, __func__);
@@ -141,6 +153,12 @@ int __cold dpa_nway_reset(struct net_device *net_dev)
 
 	priv = (typeof(priv))netdev_priv(net_dev);
 
+    if (unlikely(priv->mac_dev == NULL)) {
+       cpu_netdev_err(net_dev, "%s:%hu:%s(): called on a macless device\n",
+			       __file__, __LINE__, __func__);
+		return -ENODEV;
+    }
+
 	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): phy device not initialized\n",
 			       __file__, __LINE__, __func__);
@@ -185,6 +203,12 @@ void __cold dpa_get_pauseparam(struct net_device *net_dev, struct ethtool_pausep
 
 	priv = (typeof(priv))netdev_priv(net_dev);
 
+    if (unlikely(priv->mac_dev == NULL)) {
+       cpu_netdev_err(net_dev, "%s:%hu:%s(): called on a macless device\n",
+			       __file__, __LINE__, __func__);
+       return;
+    }
+
 	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): phy device not initialized\n",
 			       __file__, __LINE__, __func__);
@@ -204,6 +228,12 @@ int __cold dpa_set_pauseparam(struct net_device *net_dev, struct ethtool_pausepa
 
 	priv = (typeof(priv))netdev_priv(net_dev);
 
+    if (unlikely(priv->mac_dev == NULL)) {
+       cpu_netdev_err(net_dev, "%s:%hu:%s(): called on a macless device\n",
+			       __file__, __LINE__, __func__);
+       return -ENODEV;
+    }
+
 	if (unlikely(priv->mac_dev->phy_dev == NULL)) {
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): phy device not initialized\n",
 			       __file__, __LINE__, __func__);
-- 
1.6.3.3

