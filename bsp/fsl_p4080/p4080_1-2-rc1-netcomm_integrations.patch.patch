From 1ad61d447e626323e2dc0fba0ea8931e1c9fb2d0 Mon Sep 17 00:00:00 2001
From: Shlomi Gridish <gridish@freescale.com>
Date: Fri, 16 Apr 2010 11:51:31 -0400
Subject: [PATCH 010/148] p4080_1-2-rc1-netcomm_integrations.patch

drivers/net/dpa/NetCommSw/integrations/P4080/Makefile
drivers/net/dpa/NetCommSw/integrations/P4080/module_strings.c
drivers/net/dpa/NetCommSw/integrations/P4080/P4080.c
drivers/net/dpa/NetCommSw/integrations/P4080/P4080.h
drivers/net/dpa/NetCommSw/integrations/P4080/P4080_mng.c

Signed-off-by: Donio Ron <rdonio@freescale.com>
Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
Signed-off-by: Shlomi Gridish <gridish@freescale.com>

[Cleanly applied FSL SDK 2.0.3 patch:
"p4080_1-2-rc1-netcomm_integrations.patch", original
had no commit log text]

Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 .../net/dpa/NetCommSw/integrations/P4080/Makefile  |   11 ++
 .../net/dpa/NetCommSw/integrations/P4080/P4080.c   |  157 ++++++++++++++++++
 .../net/dpa/NetCommSw/integrations/P4080/P4080.h   |  166 ++++++++++++++++++++
 .../dpa/NetCommSw/integrations/P4080/P4080_mng.c   |  150 ++++++++++++++++++
 .../NetCommSw/integrations/P4080/module_strings.c  |   48 ++++++
 5 files changed, 532 insertions(+), 0 deletions(-)
 create mode 100644 drivers/net/dpa/NetCommSw/integrations/P4080/Makefile
 create mode 100644 drivers/net/dpa/NetCommSw/integrations/P4080/P4080.c
 create mode 100644 drivers/net/dpa/NetCommSw/integrations/P4080/P4080.h
 create mode 100644 drivers/net/dpa/NetCommSw/integrations/P4080/P4080_mng.c
 create mode 100644 drivers/net/dpa/NetCommSw/integrations/P4080/module_strings.c

diff --git a/drivers/net/dpa/NetCommSw/integrations/P4080/Makefile b/drivers/net/dpa/NetCommSw/integrations/P4080/Makefile
new file mode 100644
index 0000000..4932179
--- /dev/null
+++ b/drivers/net/dpa/NetCommSw/integrations/P4080/Makefile
@@ -0,0 +1,11 @@
+#
+# Makefile for the Freescale Ethernet controllers
+#
+EXTRA_CFLAGS           += -DVERSION=\"\"
+#
+#Include netcomm SW specific definitions
+include $(srctree)/drivers/net/dpa/NetCommSw/ncsw_config.mk
+
+obj-y		+= module_strings.o
+
+
diff --git a/drivers/net/dpa/NetCommSw/integrations/P4080/P4080.c b/drivers/net/dpa/NetCommSw/integrations/P4080/P4080.c
new file mode 100644
index 0000000..d2474ff
--- /dev/null
+++ b/drivers/net/dpa/NetCommSw/integrations/P4080/P4080.c
@@ -0,0 +1,157 @@
+/* Copyright (c) 2008-2009 Freescale Semiconductor, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "error_ext.h"
+#include "std_ext.h"
+#include "string_ext.h"
+#include "part_ext.h"
+#include "xx_ext.h"
+
+#include "P4080.h"
+
+
+/*****************************************************************************/
+static e_ModuleId GetModuleIdByBase(t_Handle h_P4080, uint32_t baseAddress)
+{
+    t_P4080   *p_P4080 = (t_P4080 *)h_P4080;
+    e_ModuleId  moduleId;
+
+    SANITY_CHECK_RETURN_VALUE(p_P4080, E_INVALID_HANDLE, e_MODULE_ID_DUMMY_LAST);
+
+    for (moduleId = (e_ModuleId)0; moduleId < e_MODULE_ID_DUMMY_LAST; moduleId++)
+    {
+        if (baseAddress == p_P4080->baseAddresses[moduleId])
+        {
+            return moduleId;
+        }
+    }
+
+    return e_MODULE_ID_DUMMY_LAST;
+}
+
+
+/*****************************************************************************/
+t_Handle P4080_ConfigAndInit(uint32_t baseAddress)
+{
+    t_P4080   *p_P4080;
+    t_Error     errCode;
+
+    p_P4080 = (t_P4080 *)XX_Malloc(sizeof(t_P4080));
+    if (!p_P4080)
+    {
+        REPORT_ERROR(MAJOR, E_NO_MEMORY, ("P4080 driver structure"));
+        return NULL;
+    }
+
+    memset(p_P4080, 0, sizeof(t_P4080));
+
+    /* Initialize 'part' parameters with P4080 parameters and service routines. */
+    ((t_Part *)p_P4080)->f_GetModuleBase = P4080_GetModuleBase;
+    ((t_Part *)p_P4080)->f_GetModuleIdByBase = GetModuleIdByBase;
+    ((t_Part *)p_P4080)->f_GetRevInfo = (t_RevInfoCallback *)P4080_GetRevInfo;
+
+    errCode = P4080_MngInit(p_P4080, baseAddress);
+    if (errCode != E_OK)
+    {
+        P4080_Free(p_P4080);
+        REPORT_ERROR(MAJOR, errCode, NO_MSG);
+        return NULL;
+    }
+
+    return p_P4080;
+}
+
+/*****************************************************************************/
+t_Error P4080_Free(t_Handle h_P4080)
+{
+    t_P4080 *p_P4080 = (t_P4080 *)h_P4080;
+
+    SANITY_CHECK_RETURN_ERROR(p_P4080, E_INVALID_HANDLE);
+
+    P4080_MngFree(p_P4080);
+
+    XX_Free(p_P4080);
+
+    return E_OK;
+}
+
+/*****************************************************************************/
+uint32_t P4080_GetModuleBase(t_Handle h_P4080, e_ModuleId module)
+{
+    t_P4080 *p_P4080 = (t_P4080 *)h_P4080;
+
+    SANITY_CHECK_RETURN_VALUE(p_P4080, E_INVALID_HANDLE, 0);
+
+    return p_P4080->baseAddresses[module];
+}
+
+/*****************************************************************************/
+uint32_t P4080_GetPramSize(t_Handle h_P4080)
+{
+    SANITY_CHECK_RETURN_VALUE(h_P4080, E_INVALID_HANDLE, 0);
+
+    UNUSED(h_P4080);
+    return FM_MURAM_SIZE;
+}
+
+/*****************************************************************************/
+e_P4080DeviceName P4080_GetRevInfo(t_Handle h_P4080)
+{
+    t_P4080  *p_P4080 = (t_P4080 *)h_P4080;
+
+    SANITY_CHECK_RETURN_VALUE(p_P4080, E_INVALID_HANDLE, e_P4080_REV_INVALID);
+
+    REPORT_ERROR(MINOR, E_NOT_SUPPORTED, NO_MSG);
+    return e_P4080_REV_INVALID;
+}
+
+/*****************************************************************************/
+t_Error P4080_GetE500Factor(t_Handle h_P4080, uint32_t *p_E500MulFactor, uint32_t *p_E500DivFactor)
+{
+    t_P4080   *p_P4080 = (t_P4080 *)h_P4080;
+
+    SANITY_CHECK_RETURN_ERROR(p_P4080, E_INVALID_HANDLE);
+
+    *p_E500MulFactor = 8;
+    *p_E500DivFactor = 3;
+    return E_OK;
+}
+
+/*****************************************************************************/
+uint32_t P4080_GetCcbFactor(t_Handle h_P4080)
+{
+    t_P4080   *p_P4080 = (t_P4080 *)h_P4080;
+
+    SANITY_CHECK_RETURN_VALUE(p_P4080, E_INVALID_HANDLE, 0);
+
+    return 8;
+}
diff --git a/drivers/net/dpa/NetCommSw/integrations/P4080/P4080.h b/drivers/net/dpa/NetCommSw/integrations/P4080/P4080.h
new file mode 100644
index 0000000..0e00dc1
--- /dev/null
+++ b/drivers/net/dpa/NetCommSw/integrations/P4080/P4080.h
@@ -0,0 +1,166 @@
+/* Copyright (c) 2008-2009 Freescale Semiconductor, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+ /**************************************************************************//**
+
+ @File          P4080.h
+
+ @Description   P4080 object data structure declaration, definitions and internal prototypes.
+*//***************************************************************************/
+
+#ifndef __P4080_H
+#define __P4080_H
+
+#include "std_ext.h"
+#include "part_ext.h"
+
+
+#define __ERR_MODULE__  MODULE_P4080
+
+#ifdef __MWERKS__
+#pragma pack(push,1)
+#endif /* __MWERKS__ */
+#define MEM_MAP_START
+
+typedef _Packed struct
+{
+    /* system configuration module */
+    volatile uint32_t tbd;    /**< tbd */
+} _PackedType t_P4080SysCfgMemMap;
+
+#define MEM_MAP_END
+#ifdef __MWERKS__
+#pragma pack(pop)
+#endif /* __MWERKS__ */
+
+
+/* Offsets relative to larger memory map, with base IMMRBAR */
+#define DUART0_OFFSET           0x0011c500
+#define DUART1_OFFSET           0x0011c600
+#define DUART2_OFFSET           0x0011d500
+#define DUART3_OFFSET           0x0011d600
+#define QM_OFFSET               0x00318000
+#define BM_OFFSET               0x0031a000
+#define FM1_OFFSET              0x00400000
+#define FM2_OFFSET              0x00500000
+#define MPIC_OFFSET             0x00040000
+
+/* Offsets relative to FM_BASE_OFFSET off of base IMMRBAR */
+#define FM_MURAM_OFFSET         0x00000000
+#define FM_BMI_OFFSET           0x00080000
+#define FM_QMI_OFFSET           0x00080400
+#define FM_PRS_OFFSET           0x00080800
+#define FM_PORT_HO0_OFFSET      0x00081000
+#define FM_PORT_HO1_OFFSET      0x00082000
+#define FM_PORT_HO2_OFFSET      0x00083000
+#define FM_PORT_HO3_OFFSET      0x00084000
+#define FM_PORT_HO4_OFFSET      0x00085000
+#define FM_PORT_HO5_OFFSET      0x00086000
+#define FM_PORT_HO6_OFFSET      0x00087000
+#define FM_PORT_1GRX0_OFFSET    0x00088000
+#define FM_PORT_1GRX1_OFFSET    0x00089000
+#define FM_PORT_1GRX2_OFFSET    0x0008a000
+#define FM_PORT_1GRX3_OFFSET    0x0008b000
+#define FM_PORT_10GRX0_OFFSET   0x00090000
+#define FM_PORT_1GTX0_OFFSET    0x000a8000
+#define FM_PORT_1GTX1_OFFSET    0x000a9000
+#define FM_PORT_1GTX2_OFFSET    0x000aa000
+#define FM_PORT_1GTX3_OFFSET    0x000ab000
+#define FM_PORT_10GTX0_OFFSET   0x000b0000
+#define FM_PLCR_OFFSET          0x000c0000
+#define FM_KG_OFFSET            0x000c1000
+#define FM_DMA_OFFSET           0x000c2000
+#define FM_FPM_OFFSET           0x000c3000
+#define FM_IRAM_OFFSET          0x000c4000
+#define FM_PRS_IRAM_OFFSET      0x000c7000
+#define FM_RISC0_OFFSET         0x000d0000
+#define FM_RISC1_OFFSET         0x000d1000
+#define FM_1GMAC0_OFFSET        0x000e0000
+#define FM_1GMDIO0_OFFSET       0x000e1000
+#define FM_1GMAC1_OFFSET        0x000e2000
+#define FM_1GMDIO1_OFFSET       0x000e3000
+#define FM_1GMAC2_OFFSET        0x000e4000
+#define FM_1GMDIO2_OFFSET       0x000e5000
+#define FM_1GMAC3_OFFSET        0x000e6000
+#define FM_1GMDIO3_OFFSET       0x000e7000
+#define FM_10GMAC0_OFFSET       0x000f0000
+#define FM_10GMDIO_OFFSET       0x000f1000
+
+//#define FM_MURAM_SIZE 0x40000
+
+#define BM_PORTALS_CE_OFFSET    0x000000
+#define BM_PORTALS_CI_OFFSET    0x100000
+#define QM_PORTALS_CE_OFFSET    0x200000
+#define QM_PORTALS_CI_OFFSET    0x300000
+
+#define QM_PORTALS_OFFSET_CE(portal)    (0x4000 * portal)
+#define QM_PORTALS_OFFSET_CI(portal)    (0x1000 * portal)
+#define BM_PORTALS_OFFSET_CE(portal)    (0x4000 * portal)
+#define BM_PORTALS_OFFSET_CI(portal)    (0x1000 * portal)
+
+
+/*--------------------------------------*/
+/* Structure for the P4080 object.    */
+/*--------------------------------------*/
+typedef struct
+{
+    t_Part                  part;               /**< Common parameters for all parts */
+    uint32_t                baseAddresses[NUM_OF_MODULES];
+                                                /**< Modules offsets in memory map */
+} t_P4080;
+
+
+/**************************************************************************//**
+ @Function      P4080_MngInit
+
+ @Description   Initializes the P4080 module's managment unit.
+
+ @Param         p_P4080   - (in) Pointer to the P4080 control structure.
+ @Param         baseAddress - (in) Base address of the memory-map.
+
+ @Return        E_OK on success, other value otherwise.
+*//***************************************************************************/
+t_Error P4080_MngInit(t_P4080 *p_P4080, uint32_t baseAddress);
+
+/**************************************************************************//**
+ @Function      P4080_MngFree
+
+ @Description   Free the P4080 module's managment unit.
+
+ @Param         p_P4080 - (in) Pointer to the P4080 control structure.
+
+ @Return        E_OK on success, other value otherwise.
+*//***************************************************************************/
+t_Error P4080_MngFree(t_P4080 *p_P4080);
+
+
+#endif /* __P4080_H */
diff --git a/drivers/net/dpa/NetCommSw/integrations/P4080/P4080_mng.c b/drivers/net/dpa/NetCommSw/integrations/P4080/P4080_mng.c
new file mode 100644
index 0000000..b686e4c
--- /dev/null
+++ b/drivers/net/dpa/NetCommSw/integrations/P4080/P4080_mng.c
@@ -0,0 +1,150 @@
+/* Copyright (c) 2008-2009 Freescale Semiconductor, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "string_ext.h"
+#include "error_ext.h"
+#include "std_ext.h"
+#include "xx_ext.h"
+
+#include "P4080.h"
+
+
+/*****************************************************************************/
+t_Error P4080_MngInit(t_P4080 *p_P4080, uint32_t baseAddress)
+{
+    uint32_t tmpBaseAddr = baseAddress;
+
+    /* Initialize base addresses to ILLEGAL_BASE */
+    memset(p_P4080->baseAddresses, (~0), NUM_OF_MODULES * sizeof(uint32_t));
+
+    /* init base addresses for all part's modules */
+    p_P4080->baseAddresses[e_MODULE_ID_DUART_1]   = tmpBaseAddr + DUART0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_DUART_2]   = tmpBaseAddr + DUART1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_DUART_3]   = tmpBaseAddr + DUART2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_DUART_4]   = tmpBaseAddr + DUART3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_QM]        = tmpBaseAddr + QM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_BM]        = tmpBaseAddr + BM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_MPIC]      = tmpBaseAddr + MPIC_OFFSET;
+
+    tmpBaseAddr = baseAddress + FM1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1]               = tmpBaseAddr;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_MURAM]         = tmpBaseAddr + FM_MURAM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_BMI]           = tmpBaseAddr + FM_BMI_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_QMI]           = tmpBaseAddr + FM_QMI_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PRS]           = tmpBaseAddr + FM_PRS_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_HO0]      = tmpBaseAddr + FM_PORT_HO0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_HO1]      = tmpBaseAddr + FM_PORT_HO1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_HO2]      = tmpBaseAddr + FM_PORT_HO2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_HO3]      = tmpBaseAddr + FM_PORT_HO3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_HO4]      = tmpBaseAddr + FM_PORT_HO4_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_HO5]      = tmpBaseAddr + FM_PORT_HO5_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_HO6]      = tmpBaseAddr + FM_PORT_HO6_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GRx0]    = tmpBaseAddr + FM_PORT_1GRX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GRx1]    = tmpBaseAddr + FM_PORT_1GRX1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GRx2]    = tmpBaseAddr + FM_PORT_1GRX2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GRx3]    = tmpBaseAddr + FM_PORT_1GRX3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_10GRx0]   = tmpBaseAddr + FM_PORT_10GRX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GTx0]    = tmpBaseAddr + FM_PORT_1GTX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GTx1]    = tmpBaseAddr + FM_PORT_1GTX1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GTx2]    = tmpBaseAddr + FM_PORT_1GTX2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_1GTx3]    = tmpBaseAddr + FM_PORT_1GTX3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PORT_10GTx0]   = tmpBaseAddr + FM_PORT_10GTX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PLCR]          = tmpBaseAddr + FM_PLCR_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_KG]            = tmpBaseAddr + FM_KG_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_DMA]           = tmpBaseAddr + FM_DMA_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_FPM]           = tmpBaseAddr + FM_FPM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_IRAM]          = tmpBaseAddr + FM_IRAM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMDIO0]       = tmpBaseAddr + FM_1GMDIO0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMDIO1]       = tmpBaseAddr + FM_1GMDIO1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMDIO2]       = tmpBaseAddr + FM_1GMDIO2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMDIO3]       = tmpBaseAddr + FM_1GMDIO3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_10GMDIO]       = tmpBaseAddr + FM_10GMDIO_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_PRS_IRAM]      = tmpBaseAddr + FM_PRS_IRAM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_RISC0]         = tmpBaseAddr + FM_RISC0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_RISC1]         = tmpBaseAddr + FM_RISC1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMAC0]        = tmpBaseAddr + FM_1GMAC0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMAC1]        = tmpBaseAddr + FM_1GMAC1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMAC2]        = tmpBaseAddr + FM_1GMAC2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_1GMAC3]        = tmpBaseAddr + FM_1GMAC3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM1_10GMAC0]       = tmpBaseAddr + FM_10GMAC0_OFFSET;
+
+    tmpBaseAddr = baseAddress + FM2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2]               = tmpBaseAddr;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_MURAM]         = tmpBaseAddr + FM_MURAM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_BMI]           = tmpBaseAddr + FM_BMI_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_QMI]           = tmpBaseAddr + FM_QMI_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PRS]           = tmpBaseAddr + FM_PRS_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_HO0]      = tmpBaseAddr + FM_PORT_HO0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_HO1]      = tmpBaseAddr + FM_PORT_HO1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_HO2]      = tmpBaseAddr + FM_PORT_HO2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_HO3]      = tmpBaseAddr + FM_PORT_HO3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_HO4]      = tmpBaseAddr + FM_PORT_HO4_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_HO5]      = tmpBaseAddr + FM_PORT_HO5_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_HO6]      = tmpBaseAddr + FM_PORT_HO6_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GRx0]    = tmpBaseAddr + FM_PORT_1GRX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GRx1]    = tmpBaseAddr + FM_PORT_1GRX1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GRx2]    = tmpBaseAddr + FM_PORT_1GRX2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GRx3]    = tmpBaseAddr + FM_PORT_1GRX3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_10GRx0]   = tmpBaseAddr + FM_PORT_10GRX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GTx0]    = tmpBaseAddr + FM_PORT_1GTX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GTx1]    = tmpBaseAddr + FM_PORT_1GTX1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GTx2]    = tmpBaseAddr + FM_PORT_1GTX2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_1GTx3]    = tmpBaseAddr + FM_PORT_1GTX3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PORT_10GTx0]   = tmpBaseAddr + FM_PORT_10GTX0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PLCR]          = tmpBaseAddr + FM_PLCR_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_KG]            = tmpBaseAddr + FM_KG_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_DMA]           = tmpBaseAddr + FM_DMA_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_FPM]           = tmpBaseAddr + FM_FPM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_IRAM]          = tmpBaseAddr + FM_IRAM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMDIO0]       = tmpBaseAddr + FM_1GMDIO0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMDIO1]       = tmpBaseAddr + FM_1GMDIO1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMDIO2]       = tmpBaseAddr + FM_1GMDIO2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMDIO3]       = tmpBaseAddr + FM_1GMDIO3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_10GMDIO]       = tmpBaseAddr + FM_10GMDIO_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_PRS_IRAM]      = tmpBaseAddr + FM_PRS_IRAM_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_RISC0]         = tmpBaseAddr + FM_RISC0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_RISC1]         = tmpBaseAddr + FM_RISC1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMAC0]        = tmpBaseAddr + FM_1GMAC0_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMAC1]        = tmpBaseAddr + FM_1GMAC1_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMAC2]        = tmpBaseAddr + FM_1GMAC2_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_1GMAC3]        = tmpBaseAddr + FM_1GMAC3_OFFSET;
+    p_P4080->baseAddresses[e_MODULE_ID_FM2_10GMAC0]       = tmpBaseAddr + FM_10GMAC0_OFFSET;
+
+    return E_OK;
+}
+
+/*****************************************************************************/
+t_Error P4080_MngFree(t_P4080 *p_P4080)
+{
+    UNUSED(p_P4080);
+    return E_OK;
+}
diff --git a/drivers/net/dpa/NetCommSw/integrations/P4080/module_strings.c b/drivers/net/dpa/NetCommSw/integrations/P4080/module_strings.c
new file mode 100644
index 0000000..16d0429
--- /dev/null
+++ b/drivers/net/dpa/NetCommSw/integrations/P4080/module_strings.c
@@ -0,0 +1,48 @@
+/* Copyright (c) 2008-2009 Freescale Semiconductor, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Freescale Semiconductor nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *
+ * ALTERNATIVELY, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") as published by the Free Software
+ * Foundation, either version 2 of that License or (at your option) any
+ * later version.
+ *
+ * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/* Module names for debug messages */
+const char *moduleStrings[] =
+{
+     "???"                      /* MODULE_UNKNOWN */
+    ,"MEM"                      /* MODULE_ */
+    ,"MM"                       /* MODULE_MM */
+    ,"CORE"                     /* MODULE_CORE */
+    ,"PM"                       /* MODULE_PM */
+    ,"P4080"                    /* MODULE_P4080 */
+    ,"P4080-Pltaform"           /* MODULE_P4080_PLTFRM */
+    ,"MMU"                      /* MODULE_MMU */
+    ,"MPIC"                     /* MODULE_MPIC */
+    ,"FM"                       /* MODULE_FM */
+    ,"QM"                       /* MODULE_QM */
+    ,"BM"                       /* MODULE_BM */
+};
-- 
1.6.5.2

