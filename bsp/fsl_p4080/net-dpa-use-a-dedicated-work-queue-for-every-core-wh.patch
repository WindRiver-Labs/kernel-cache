From 0ab12cbefbe91a9bcd46e73ba8447006604542b7 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 18 Nov 2009 00:07:51 -0800
Subject: [PATCH 1/2] net/dpa: use a dedicated work queue for every core when receive packets

When a Ethernet is bound to a pool channel, the rx packets
may distribute to several cores, and the cores may schedule the
fd_work work queue at the same time. But the work queue can only run
sequentially on multi cpus. This will cause the rx packets on some
cores don't be processed.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/dpa/dpa.c |   10 +++++-----
 drivers/net/dpa/dpa.h |    4 +++-
 2 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index 2156152..36cac7a 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -870,7 +870,7 @@ ingress_rx_default_dqrr(struct qman_portal		*portal,
 	fd_list->count++;
 	fd_list->max = max(fd_list->max, fd_list->count);
 
-	schedule_work(&priv->fd_work);
+	schedule_work(&fd_list->fd_work);
 
 _return:
 	if (netif_msg_intr(priv))
@@ -1338,13 +1338,13 @@ static void __hot dpa_rx(struct work_struct *fd_work)
 	unsigned long flags;
 #endif
 
-	priv = (typeof(priv))container_of(fd_work, struct dpa_priv_s, fd_work);
+	fd_list = (typeof(fd_list))container_of(fd_work, struct fd_list_head, fd_work);
+	priv = fd_list->priv;
 	net_dev = priv->net_dev;
 
 	if (netif_msg_rx_status(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
-	fd_list = per_cpu_ptr(priv->fd_list, smp_processor_id());
 	list_for_each_entry_safe(dpa_fd, tmp, &fd_list->list, list) {
 		skb = NULL;
 
@@ -2223,8 +2223,6 @@ static int __devinit __cold __attribute__((nonnull)) dpa_probe(struct of_device
 	for (i = 0; i < ARRAY_SIZE(priv->dpa_fq_list); i++)
 		INIT_LIST_HEAD(priv->dpa_fq_list + i);
 
-	INIT_WORK(&priv->fd_work, dpa_rx);
-
 	priv->fd_list = (typeof(priv->fd_list))__alloc_percpu(sizeof(*priv->fd_list));
 	if (unlikely(priv->fd_list == NULL)) {
 		if (netif_msg_probe(priv))
@@ -2238,8 +2236,10 @@ static int __devinit __cold __attribute__((nonnull)) dpa_probe(struct of_device
 		fd_list = per_cpu_ptr(priv->fd_list, i);
 
 		INIT_LIST_HEAD(&fd_list->list);
+		INIT_WORK(&fd_list->fd_work, dpa_rx);
 		fd_list->count	= 0;
 		fd_list->max	= 0;
+		fd_list->priv = priv;
 	}
 
 	/* FM */
diff --git a/drivers/net/dpa/dpa.h b/drivers/net/dpa/dpa.h
index ae4ab95..a95f462 100644
--- a/drivers/net/dpa/dpa.h
+++ b/drivers/net/dpa/dpa.h
@@ -44,8 +44,11 @@
 
 #include "mac.h"		/* struct mac_device */
 
+struct dpa_priv_s;
 struct fd_list_head {
 	struct list_head	list;
+	struct work_struct	fd_work;
+	struct dpa_priv_s	*priv;
 	size_t			count, max;
 };
 
@@ -70,7 +73,6 @@ struct dpa_priv_s {
 
 	struct mac_device	*mac_dev;
 
-	struct work_struct	 fd_work;
 	struct fd_list_head	*fd_list;
 
 	uint32_t		 msg_enable;	/* net_device message level */
-- 
1.6.5.2

