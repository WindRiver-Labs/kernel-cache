From 387c77ceaefda32f585b9d8892a49c6600b0236e Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@Freescale.com>
Date: Tue, 23 Feb 2010 15:00:03 -0600
Subject: [PATCH] P4080/DPA: Add more netif_msg_*() tests

Also fixed the type/level of some existing ones. This helps better control the verbosity of the
driver

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
[Kevin: Original patch taken from Freescale moto-patches-3.tgz
tar package, just some minor context change in order to port
to kernel 2.6.27]
Integrated-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/dpa/dpa.c |  373 +++++++++++++++++++++++++++----------------------
 1 files changed, 209 insertions(+), 164 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index 62d6717..1c24ddf 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -270,9 +270,9 @@ static void dpa_bp_refill(const struct net_device *net_dev, struct dpa_bp *bp,
 		spin_unlock_irqrestore(&bp->lock, flags);
 
 		/*
- 		 * Fill the release buffer to release as many at a time as
- 		 * is possible.
- 		 */
+		 * Fill the release buffer to release as many at a time as
+		 * is possible.
+		 */
 		bmb[i % 8].hi = 0;
 		bmb[i % 8].lo = addr;
 
@@ -346,6 +346,7 @@ _dpa_bp_alloc(struct net_device *net_dev, struct list_head *list,
 {
 	int			 _errno;
 	struct bman_pool_params	 bp_params;
+	const struct dpa_priv_s	*priv;
 
 	BUG_ON(dpa_bp->size == 0);
 	BUG_ON(dpa_bp->count == 0);
@@ -359,11 +360,14 @@ _dpa_bp_alloc(struct net_device *net_dev, struct list_head *list,
 	else
 		bp_params.bpid = dpa_bp->bpid;
 
+	priv = (typeof(priv))netdev_priv(net_dev);
+
 	dpa_bp->pool = bman_new_pool(&bp_params);
 	if (unlikely(dpa_bp->pool == NULL)) {
-		cpu_dev_err(net_dev->dev.parent,
-				"%s:%hu:%s(): bman_new_pool() failed\n",
-				__file__, __LINE__, __func__);
+		if (netif_msg_drv(priv))
+			cpu_dev_err(net_dev->dev.parent, "%s:%hu:%s(): "
+				    "bman_new_pool() failed\n",
+				    __file__, __LINE__, __func__);
 		return -ENODEV;
 	}
 
@@ -431,9 +435,10 @@ _dpa_bp_alloc(struct net_device *net_dev, struct list_head *list,
 						  dpa_bp->size * dpa_bp->count,
 						  0);
 		if (unlikely(dpa_bp->vaddr == NULL)) {
-			cpu_dev_err(net_dev->dev.parent,
-					"%s:%hu:%s(): devm_ioremap() failed\n",
-					__file__, __LINE__, __func__);
+			if (netif_msg_drv(priv))
+				cpu_dev_err(net_dev->dev.parent, "%s:%hu:%s(): "
+					    "devm_ioremap() failed\n",
+					    __file__, __LINE__, __func__);
 			_errno = -EIO;
 			goto _return_bman_free_pool;
 		}
@@ -502,7 +507,7 @@ dpa_bp_free(struct device *dev, struct list_head *list)
 /* QM */
 
 struct dpa_fq {
-	struct qman_fq	 	 fq_base;
+	struct qman_fq		 fq_base;
 	struct list_head	 list;
 	struct net_device	*net_dev;
 	bool			 init;
@@ -536,7 +541,7 @@ _dpa_fq_alloc(struct list_head		*list,
 
 	_errno = qman_create_fq(fqid, flags, &dpa_fq->fq_base);
 	if (unlikely(_errno)) {
-		if (netif_msg_probe(priv))
+		if (netif_msg_drv(priv))
 			cpu_dev_err(dev,
 				"%s:%hu:%s(): qman_create_fq() failed\n",
 				__file__, __LINE__, __func__);
@@ -551,7 +556,7 @@ _dpa_fq_alloc(struct list_head		*list,
 
 		_errno = qman_init_fq(fq, QMAN_INITFQ_FLAG_SCHED, &initfq);
 		if (unlikely(_errno < 0)) {
-			if (netif_msg_probe(priv))
+			if (netif_msg_drv(priv))
 				cpu_dev_err(dev,
 					"%s:%hu:%s(): qman_init_fq(%u) = %d\n",
 					__file__, __LINE__, __func__,
@@ -569,22 +574,25 @@ _dpa_fq_alloc(struct list_head		*list,
 static int __cold __attribute__((nonnull))
 _dpa_fq_free(struct device *dev, struct qman_fq *fq)
 {
-	int		 _errno, __errno;
-	struct dpa_fq	*dpa_fq;
+	int			 _errno, __errno;
+	struct dpa_fq		*dpa_fq;
+	const struct dpa_priv_s	*priv;
 
 	_errno = 0;
 
-	dpa_fq = (struct dpa_fq *)fq;
+	dpa_fq = container_of(fq, struct dpa_fq, fq_base);
+	priv = (typeof(priv))netdev_priv(dpa_fq->net_dev);
+
 	if (dpa_fq->init) {
 		_errno = qman_retire_fq(fq, NULL);
-		if (unlikely(_errno < 0))
+		if (unlikely(_errno < 0) && netif_msg_drv(priv))
 			cpu_dev_err(dev,
 				"%s:%hu:%s(): qman_retire_fq(%u) = %d\n",
 				__file__, __LINE__, __func__, qman_fq_fqid(fq),
 				_errno);
 
 		__errno = qman_oos_fq(fq);
-		if (unlikely(__errno < 0)) {
+		if (unlikely(__errno < 0) && netif_msg_drv(priv)) {
 			cpu_dev_err(dev, "%s:%hu:%s(): qman_oos_fq(%u) = %d\n",
 					__file__, __LINE__, __func__,
 					qman_fq_fqid(fq), __errno);
@@ -687,11 +695,12 @@ dpa_fd_release(const struct net_device *net_dev, const struct qm_fd *fd)
 			__errno = bman_release(dpa_bp->pool, bmb, j,
 					BMAN_RELEASE_FLAG_WAIT_INT);
 			if (unlikely(__errno < 0)) {
-				cpu_netdev_err(net_dev,
-					"%s:%hu:%s(): bman_release(%hu) = %d\n",
-					__file__, __LINE__, __func__,
-					bman_get_params(dpa_bp->pool)->bpid,
-					_errno);
+				if (netif_msg_drv(priv))
+					cpu_netdev_err(net_dev,	"%s:%hu:%s(): "
+						       "bman_release(%hu) = %d\n",
+						       __file__, __LINE__, __func__,
+						       bman_get_params(dpa_bp->pool)->bpid,
+						       _errno);
 				if (_errno >= 0)
 					_errno = __errno;
 			}
@@ -707,11 +716,12 @@ dpa_fd_release(const struct net_device *net_dev, const struct qm_fd *fd)
 		__errno = bman_release(_dpa_bp->pool, &_bmb, 1,
 				BMAN_RELEASE_FLAG_WAIT_INT);
 		if (unlikely(__errno < 0)) {
-			cpu_netdev_err(net_dev,
-					"%s:%hu:%s(): bman_release(%hu) = %d\n",
-					__file__, __LINE__, __func__,
-					bman_get_params(_dpa_bp->pool)->bpid,
-					_errno);
+			if (netif_msg_drv(priv))
+				cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+					       "bman_release(%hu) = %d\n",
+					       __file__, __LINE__, __func__,
+					       bman_get_params(_dpa_bp->pool)->bpid,
+					       _errno);
 			if (_errno >= 0)
 				_errno = __errno;
 		}
@@ -758,9 +768,9 @@ ingress_dqrr(struct qman_portal		*portal,
 				sizeof(*dpa_fd), GFP_ATOMIC);
 		if (unlikely(dpa_fd == NULL)) {
 			if (netif_msg_rx_err(priv))
-				cpu_netdev_err(net_dev,
-					"%s:%hu:%s(): devm_kzalloc() failed\n",
-					__file__, __LINE__, __func__);
+				cpu_netdev_err(net_dev,	"%s:%hu:%s(): "
+					       "devm_kzalloc() failed\n",
+					       __file__, __LINE__, __func__);
 			goto _return;
 		}
 	} else {
@@ -831,12 +841,12 @@ static void ingress_rx_error_ern(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -850,12 +860,12 @@ static void ingress_rx_error_dc_ern(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -869,12 +879,12 @@ static void ingress_rx_error_fqs(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -924,14 +934,14 @@ ingress_rx_default_dqrr(struct qman_portal		*portal,
     /* No support yet for more than 32 bit address */
     BUG_ON(dq->fd.addr_hi);
     if (is_fman_test((void *)priv->mac_dev,
-                     fqid,
-                     virt,
-                     dq->fd.length20 + dq->fd.offset)) {
-        _errno = dpa_fd_release(net_dev, &dq->fd);
-        if (unlikely(_errno < 0)) {
-            dump_stack();
-            panic("Can't release buffer to the BM during RX\n");
-        }
+		     fqid,
+		     virt,
+		     dq->fd.length20 + dq->fd.offset)) {
+	_errno = dpa_fd_release(net_dev, &dq->fd);
+	if (unlikely(_errno < 0)) {
+	    dump_stack();
+	    panic("Can't release buffer to the BM during RX\n");
+	}
 	return qman_cb_dqrr_consume;
     }
 }
@@ -950,12 +960,12 @@ static void ingress_rx_default_ern(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -969,12 +979,12 @@ static void ingress_rx_default_dc_ern(struct qman_portal	*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -988,12 +998,12 @@ static void ingress_rx_default_fqs(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_rx_status(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1034,12 +1044,12 @@ static void ingress_tx_error_ern(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1053,12 +1063,12 @@ static void ingress_tx_error_dc_ern(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1072,12 +1082,12 @@ static void ingress_tx_error_fqs(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1118,12 +1128,12 @@ static void ingress_tx_default_ern(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1137,12 +1147,12 @@ static void ingress_tx_default_dc_ern(struct qman_portal	*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1156,12 +1166,12 @@ static void ingress_tx_default_fqs(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1175,12 +1185,12 @@ static enum qman_cb_dqrr_result egress_dqrr(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 
 	return qman_cb_dqrr_consume;
@@ -1198,7 +1208,7 @@ static void egress_ern(struct qman_portal	*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	if (priv->mac_dev) {
@@ -1221,7 +1231,7 @@ static void egress_ern(struct qman_portal	*portal,
 	net_dev->stats.tx_dropped++;
 	net_dev->stats.tx_fifo_errors++;
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1235,12 +1245,12 @@ static void egress_dc_ern(struct qman_portal		*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1254,12 +1264,12 @@ static void egress_fqs(struct qman_portal	*portal,
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG();
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1289,9 +1299,15 @@ static const struct qman_fq _egress_fqs __devinitconst = {
 static struct net_device_stats * __cold
 dpa_get_stats(struct net_device *net_dev)
 {
-	cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+	const struct dpa_priv_s	*priv;
+
+	priv = (typeof(priv))netdev_priv(net_dev);
+
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
-	cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 
 	return &net_dev->stats;
 }
@@ -1301,19 +1317,21 @@ static void __cold dpa_change_rx_flags(struct net_device *net_dev, int flags)
 	int			 _errno;
 	const struct dpa_priv_s	*priv;
 
-	cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
 	priv = (typeof(priv))netdev_priv(net_dev);
 
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+
 	if ((flags & IFF_PROMISC) != 0 && priv->mac_dev != NULL) {
 		_errno = priv->mac_dev->change_promisc(priv->mac_dev);
-		if (unlikely(_errno < 0))
-			cpu_netdev_err(net_dev,
-				"%s:%hu:%s(): mac_dev->change_promisc() = %d\n",
-				__file__, __LINE__, __func__, _errno);
+		if (unlikely(_errno < 0) && netif_msg_drv(priv))
+			cpu_netdev_err(net_dev,	"%s:%hu:%s(): "
+				       "mac_dev->change_promisc() = %d\n",
+				       __file__, __LINE__, __func__, _errno);
 	}
 
-	cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
 static void dpa_rx_skb_add_page(struct sk_buff *skb, struct page *page,
@@ -1353,9 +1371,11 @@ static int dpa_process_sg(struct net_device *net_dev, struct sk_buff *skb,
 			bpid = sgt[i].bpid;
 			dpa_bp = dpa_bpid2pool(bpid);
 			if (IS_ERR(dpa_bp)) {
-				cpu_netdev_err(net_dev, "%s:%hu:%s(): "
-					   "Could not find pool for BPID %hu\n",
-					   __file__, __LINE__, __func__, bpid);
+				if (netif_msg_rx_err(priv))
+					cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+						       "Could not find pool for BPID %hu\n",
+						       __file__, __LINE__, __func__,
+						       bpid);
 				err = -EINVAL;
 				goto err_bpid2pool_failed;
 			}
@@ -1372,11 +1392,12 @@ static int dpa_process_sg(struct net_device *net_dev, struct sk_buff *skb,
 	}
 
 	if (!__pskb_pull_tail(skb,
-				ETH_HLEN + NN_RESERVED_SPACE(net_dev) +
-				TT_RESERVED_SPACE(net_dev))) {
-		cpu_netdev_err(net_dev, "%s:%hu:%s(): "
-			       "__pskb_pull_tail() failed\n",
-			       __file__, __LINE__, __func__);
+			      ETH_HLEN + NN_RESERVED_SPACE(net_dev) +
+			      TT_RESERVED_SPACE(net_dev))) {
+		if (netif_msg_rx_err(priv))
+			cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+				       "__pskb_pull_tail() failed\n",
+				       __file__, __LINE__, __func__);
 
 		net_dev->stats.rx_dropped++;
 
@@ -1400,7 +1421,8 @@ err_bpid2pool_failed:
 static int dpa_process_one(struct net_device *net_dev, struct sk_buff *skb,
 				struct dpa_bp *dpa_bp, const struct qm_fd *fd)
 {
-	int err;
+	int			 err;
+	const struct dpa_priv_s	*priv;
 
 	if (dpa_bp->kernel_pool) {
 		struct page *page;
@@ -1417,17 +1439,19 @@ static int dpa_process_one(struct net_device *net_dev, struct sk_buff *skb,
 		if (!__pskb_pull_tail(skb, ETH_HLEN +
 					NN_RESERVED_SPACE(net_dev) +
 					TT_RESERVED_SPACE(net_dev))) {
-			cpu_netdev_err(net_dev, "%s:%hu:%s(): "
-				       "__pskb_pull_tail() failed\n",
-				       __file__, __LINE__, __func__);
+			priv = (typeof(priv))netdev_priv(net_dev);
+			if (netif_msg_rx_err(priv))
+				cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+					       "__pskb_pull_tail() failed\n",
+					       __file__, __LINE__, __func__);
 			net_dev->stats.rx_dropped++;
 			return -1;
 		}
 	} else {
 		memcpy(skb_put(skb, dpa_fd_length(fd)),
-			dpa_phys2virt(dpa_bp, (const struct bm_buffer *)fd) +
-				dpa_fd_offset(fd),
-			dpa_fd_length(fd));
+		       dpa_phys2virt(dpa_bp, (struct bm_buffer *)fd) +
+		       dpa_fd_offset(fd),
+		       dpa_fd_length(fd));
 
 		err = dpa_fd_release(net_dev, fd);
 		if (err < 0) {
@@ -1446,10 +1470,10 @@ static void _dpa_rx_error(struct net_device		*net_dev,
 {
 	int	_errno;
 
-	if (netif_msg_rx_err(priv))
-		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
-			       __file__, __LINE__, __func__,
-			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
+	if (netif_msg_hw(priv))
+		cpu_netdev_warn(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
+				__file__, __LINE__, __func__,
+				dpa_fd->fd.status & FM_FD_STAT_ERRORS);
 
 	BUG_ON((dpa_fd->fd.status & FM_FD_STAT_ERRORS) == 0);
 
@@ -1470,10 +1494,10 @@ static void _dpa_tx_error(struct net_device		*net_dev,
 			  struct dpa_percpu_priv_s	*percpu_priv,
 			  const struct dpa_fd		*dpa_fd)
 {
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
-			       __file__, __LINE__, __func__,
-			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
+	if (netif_msg_hw(priv))
+		cpu_netdev_warn(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
+				__file__, __LINE__, __func__,
+				dpa_fd->fd.status & FM_FD_STAT_ERRORS);
 
 	BUG_ON((dpa_fd->fd.status & FM_FD_STAT_ERRORS) == 0);
 
@@ -1493,9 +1517,9 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 	struct sk_buff *skb;
 
 	if (unlikely(dpa_fd->fd.status & FM_FD_STAT_ERRORS) != 0) {
-		if (netif_msg_rx_err(priv))
-			cpu_netdev_warn(net_dev,
-					"%s:%hu:%s(): FD status = 0x%08x\n",
+		if (netif_msg_hw(priv))
+			cpu_netdev_warn(net_dev, "%s:%hu:%s(): "
+					"FD status = 0x%08x\n",
 					__file__, __LINE__, __func__,
 					dpa_fd->fd.status & FM_FD_STAT_ERRORS);
 
@@ -1514,8 +1538,10 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 
 	if (dpa_fd->fd.format == qm_fd_sg && !dpa_bp->kernel_pool) {
 		net_dev->stats.rx_dropped++;
-		cpu_netdev_err(net_dev, "%s:%hu:%s(): Dropping a SG frame\n",
-			       __file__, __LINE__, __func__);
+		if (netif_msg_rx_status(priv))
+			cpu_netdev_warn(net_dev, "%s:%hu:%s(): "
+					"Dropping a SG frame\n",
+					__file__, __LINE__, __func__);
 		goto _return_dpa_fd_release;
 	}
 
@@ -1555,7 +1581,7 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 	skb->protocol = eth_type_trans(skb, net_dev);
 
 #ifdef CONFIG_FSL_FMAN_TEST
-        fman_test_ip_manip((void *)priv->mac_dev, skb->data);
+	fman_test_ip_manip((void *)priv->mac_dev, skb->data);
 #endif /* CONFIG_FSL_FMAN_TEST */
 
 	_errno = netif_rx_ni(skb);
@@ -1595,9 +1621,9 @@ static void __hot _dpa_tx(struct net_device		*net_dev,
 	struct sk_buff	*skb;
 
 	if (unlikely(dpa_fd->fd.status & FM_FD_STAT_ERRORS) != 0) {
-		if (netif_msg_tx_err(priv))
-			cpu_netdev_warn(net_dev,
-					"%s:%hu:%s(): FD status = 0x%08x\n",
+		if (netif_msg_hw(priv))
+			cpu_netdev_warn(net_dev, "%s:%hu:%s(): "
+					"FD status = 0x%08x\n",
 					__file__, __LINE__, __func__,
 					dpa_fd->fd.status & FM_FD_STAT_ERRORS);
 
@@ -1639,12 +1665,11 @@ static void __hot dpa_work(struct work_struct *fd_work)
 	unsigned int quota = 0;
 	unsigned int retry = 0;
 
-	percpu_priv = (typeof(percpu_priv))container_of(
-		fd_work, struct dpa_percpu_priv_s, fd_work);
+	percpu_priv = container_of(fd_work, struct dpa_percpu_priv_s, fd_work);
 	net_dev = percpu_priv->net_dev;
 	priv = netdev_priv(net_dev);
 
-	if (netif_msg_intr(priv))
+	if (netif_msg_drv(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG_ON(percpu_priv != per_cpu_ptr(priv->percpu_priv,
@@ -1692,7 +1717,7 @@ static void __hot dpa_work(struct work_struct *fd_work)
 						_errno);
 	}
 
-	if (netif_msg_intr(priv))
+	if (netif_msg_drv(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1742,9 +1767,10 @@ static int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		fd.addr_lo = dma_map_single(dev, skb->data, skb_headlen(skb),
 				DMA_TO_DEVICE);
 		if (unlikely(fd.addr_lo == 0)) {
-			cpu_netdev_err(net_dev,
-				"%s:%hu:%s(): dma_map_single() failed\n",
-				__file__, __LINE__, __func__);
+			if (netif_msg_tx_err(priv))
+				cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+					       "dma_map_single() failed\n",
+					       __file__, __LINE__, __func__);
 			_errno = -EIO;
 			goto _return_dev_kfree_skb;
 		}
@@ -1759,9 +1785,10 @@ static int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		_errno = bman_acquire(dpa_bp->pool, bmb, 1, 0);
 		if (unlikely(_errno <= 0)) {
 			if (netif_msg_tx_err(priv))
-				cpu_netdev_err(net_dev,
-					"%s:%hu:%s(): bman_acquire() = %d\n",
-					__file__, __LINE__, __func__, _errno);
+				cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+					       "bman_acquire() = %d\n",
+					       __file__, __LINE__, __func__,
+					       _errno);
 			net_dev->stats.tx_errors++;
 			goto _return_dev_kfree_skb;
 		}
@@ -1779,9 +1806,10 @@ static int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 			&fd, 0);
 	if (unlikely(_errno < 0)) {
 		if (netif_msg_tx_err(priv))
-			cpu_netdev_err(net_dev,
-				"%s:%hu:%s(): qman_enqueue() = %d\n",
-				__file__, __LINE__, __func__, _errno);
+			cpu_netdev_err(net_dev,	"%s:%hu:%s(): "
+				       "qman_enqueue() = %d\n",
+				       __file__, __LINE__, __func__,
+				       _errno);
 		net_dev->stats.tx_errors++;
 		net_dev->stats.tx_fifo_errors++;
 		goto _return_buffer;
@@ -2136,7 +2164,7 @@ static int __devinit __cold dpa_alloc_pcd_fqids(struct device	*dev,
 	}
 
 	BUG_ON(priv->num >= (sizeof(priv->ranges)/sizeof(struct pcd_range)));
-	priv->ranges[priv->num].base    = *base_fqid;
+	priv->ranges[priv->num].base	= *base_fqid;
 	priv->ranges[priv->num++].count = num;
 
 	_errno = 0;
@@ -2204,7 +2232,7 @@ static int __devinit __cold dpa_alloc_pcd_fqids(struct device	*dev,
 	BUG_ON((total_num_fqs-padding)<num);
 
 	BUG_ON(priv->num >= (sizeof(priv->ranges)/sizeof(struct pcd_range)));
-	priv->ranges[priv->num].base    = *base_fqid;
+	priv->ranges[priv->num].base	= *base_fqid;
 	priv->ranges[priv->num++].count = num;
 
 	cpu_dev_dbg(dev, "%s:%s(): pcd_fqs base %u\n", __file__, __func__,
@@ -2352,8 +2380,8 @@ static int __cold dpa_debugfs_show(struct seq_file *file, void *offset)
 
 	memset(&total, 0, sizeof(total));
 
-	seq_printf(file, "      hwi[RX]    hwi[TX]    swi        "
-		   "total[RX]  max[RX]    total[TX]  max[TX]\n");
+	seq_printf(file, "	hwi[RX]	   hwi[TX]    swi	 "
+		   "total[RX]  max[RX]	  total[TX]  max[TX]\n");
 	for_each_online_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 
@@ -2384,13 +2412,18 @@ static int __cold dpa_debugfs_show(struct seq_file *file, void *offset)
 
 static int __cold dpa_debugfs_open(struct inode *inode, struct file *file)
 {
-	int	_errno;
+	int			 _errno;
+	const struct net_device	*net_dev;
 
 	_errno = single_open(file, dpa_debugfs_show, inode->i_private);
-	if (unlikely(_errno < 0))
-		cpu_netdev_err((struct net_device *)inode->i_private,
-			       "%s:%hu:%s(): single_open() = %d\n",
-			       __file__, __LINE__, __func__, _errno);
+	if (unlikely(_errno < 0)) {
+		net_dev = (struct net_device *)inode->i_private;
+
+		if (netif_msg_drv((struct dpa_priv_s *)netdev_priv(net_dev)))
+			cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+				       "single_open() = %d\n",
+				       __file__, __LINE__, __func__, _errno);
+	}
 	return _errno;
 }
 
@@ -2475,8 +2508,10 @@ dpa_probe(struct of_device *_of_dev)
 		count = ARRAY_SIZE(dpa_bp_size);
 		dpa_bp = devm_kzalloc(dev, count * sizeof(*dpa_bp), GFP_KERNEL);
 		if (unlikely(dpa_bp == NULL)) {
-			cpu_dev_err(dev, "%s:%hu:%s(): devm_kzalloc() failed\n",
-					__file__, __LINE__, __func__);
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev, "%s:%hu:%s(): "
+					    "devm_kzalloc() failed\n",
+					    __file__, __LINE__, __func__);
 			_errno = -ENOMEM;
 			goto _return_free_netdev;
 		}
@@ -2510,9 +2545,9 @@ dpa_probe(struct of_device *_of_dev)
 	dev_node = of_parse_phandle(dpa_node, "fsl,qman-channel", 0);
 	if (unlikely(dev_node == NULL)) {
 		if (netif_msg_probe(priv))
-			cpu_dev_err(dev,
-		       "%s:%hu:%s: of_parse_phandle(fsl,qman-channel) failed\n",
-				__file__, __LINE__, __func__);
+			cpu_dev_err(dev, "%s:%hu:%s: "
+				    "of_parse_phandle(fsl,qman-channel) failed\n",
+				    __file__, __LINE__, __func__);
 		_errno = -EFAULT;
 		goto _return_dpa_bp_free;
 	}
@@ -2521,7 +2556,8 @@ dpa_probe(struct of_device *_of_dev)
 			"fsl,qman-channel-id", &lenp);
 	if (unlikely(uint32_prop == NULL)) {
 		if (netif_msg_probe(priv))
-			cpu_dev_err(dev, "%s:%hu:%s(): of_get_property(%s, fsl,qman-channel-id) failed\n",
+			cpu_dev_err(dev, "%s:%hu:%s(): "
+				    "of_get_property(%s, fsl,qman-channel-id) failed\n",
 				    __file__, __LINE__, __func__, dpa_node->full_name);
 		of_node_put(dev_node);
 		_errno = -EINVAL;
@@ -2538,9 +2574,9 @@ dpa_probe(struct of_device *_of_dev)
 		sizeof(*priv->percpu_priv));
 	if (unlikely(priv->percpu_priv == NULL)) {
 		if (netif_msg_probe(priv))
-			cpu_dev_err(dev,
-				"%s:%hu:%s(): __alloc_percpu() failed\n",
-				__file__, __LINE__, __func__);
+			cpu_dev_err(dev, "%s:%hu:%s(): "
+				    "__alloc_percpu() failed\n",
+				    __file__, __LINE__, __func__);
 		_errno = -ENOMEM;
 		goto _return_dpa_bp_free;
 	}
@@ -2570,8 +2606,10 @@ dpa_probe(struct of_device *_of_dev)
 		fqids[i] = (typeof(fqids[i]))of_get_property(dpa_node,
 				fsl_qman_frame_queues[i], &lenp);
 		if (unlikely(fqids[i] == NULL)) {
-			cpu_dev_info(dev, "Using dynamic %s QM frame queues\n",
-				     rtx[i]);
+			if (netif_msg_probe(priv))
+				cpu_dev_info(dev,
+					     "Using dynamic %s QM frame queues\n",
+					     rtx[i]);
 			num_fqids[i] = 0;
 		} else
 			num_fqids[i] = lenp / (sizeof(*fqids[i]) * 2);
@@ -2587,10 +2625,11 @@ dpa_probe(struct of_device *_of_dev)
 		/* Get the MAC address */
 		mac_addr = of_get_mac_address(dpa_node);
 		if (unlikely(mac_addr == NULL)) {
-			cpu_dev_err(dev,
-				"%s:%hu:%s(): of_get_mac_address(%s) failed\n",
-				__file__, __LINE__, __func__,
-				dpa_node->full_name);
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev, "%s:%hu:%s(): "
+					    "of_get_mac_address(%s) failed\n",
+					    __file__, __LINE__, __func__,
+					    dpa_node->full_name);
 			_errno = -EINVAL;
 			goto _return_free_percpu;
 		}
@@ -2604,9 +2643,10 @@ dpa_probe(struct of_device *_of_dev)
 		 * static declarations on MAC-less devices */
 		for (i = 0; i < ARRAY_SIZE(fqids); i++)
 			if (unlikely(fqids[i] == NULL)) {
-				cpu_dev_err(dev, "%s:%hu:%s(): "
-			     "MAC-less interfaces require %s FQ declarations\n",
-			      __file__, __LINE__, __func__, rtx[i]);
+				if (netif_msg_probe(priv))
+					cpu_dev_err(dev, "%s:%hu:%s(): "
+						    "MAC-less interfaces require %s FQ declarations\n",
+						    __file__, __LINE__, __func__, rtx[i]);
 				_errno = -EINVAL;
 				goto _return_free_percpu;
 			}
@@ -2614,8 +2654,9 @@ dpa_probe(struct of_device *_of_dev)
 		dpa_fq = devm_kzalloc(dev, sizeof(*dpa_fq) * num_fqs[RX],
 					GFP_KERNEL);
 		if (unlikely(dpa_fq == NULL)) {
+		if (netif_msg_probe(priv))
 			cpu_dev_err(dev, "%s:%hu:%s(): devm_kzalloc() failed\n",
-					__file__, __LINE__, __func__);
+				    __file__, __LINE__, __func__);
 			_errno = -ENOMEM;
 			goto _return_free_percpu;
 		}
@@ -2646,11 +2687,10 @@ dpa_probe(struct of_device *_of_dev)
 					goto _return_dpa_fq_free;
 				}
 
-
-				cpu_dev_dbg(dev,
-					"%s:%s(): ingress_fqs[%d] = %u\n",
-					__file__, __func__, j,
-					qman_fq_fqid(ingress_fq));
+				cpu_dev_dbg(dev, "%s:%s(): "
+					    "ingress_fqs[%d] = %u\n",
+					    __file__, __func__, j,
+					    qman_fq_fqid(ingress_fq));
 			}
 		}
 
@@ -2660,8 +2700,10 @@ dpa_probe(struct of_device *_of_dev)
 		dpa_fq = devm_kzalloc(dev, sizeof(*dpa_fq) * num_fqs[TX],
 					GFP_KERNEL);
 		if (unlikely(dpa_fq == NULL)) {
-			cpu_dev_err(dev, "%s:%hu:%s(): devm_kzalloc() failed\n",
-					__file__, __LINE__, __func__);
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev, "%s:%hu:%s(): "
+					    "devm_kzalloc() failed\n",
+					    __file__, __LINE__, __func__);
 			_errno = -ENOMEM;
 			goto _return_free_percpu;
 		}
@@ -2728,8 +2770,10 @@ dpa_probe(struct of_device *_of_dev)
 				sizeof(*dpa_fq) * (num_fqs[TX] + num_fqs[RX]),
 				GFP_KERNEL);
 		if (unlikely(dpa_fq == NULL)) {
-			cpu_dev_err(dev, "%s:%hu:%s(): devm_kzalloc() failed\n",
-					__file__, __LINE__, __func__);
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev, "%s:%hu:%s(): "
+					    "devm_kzalloc() failed\n",
+					    __file__, __LINE__, __func__);
 			_errno = -ENOMEM;
 			goto _return_free_percpu;
 		}
@@ -2936,14 +2980,15 @@ static int __devexit __cold dpa_remove(struct of_device *of_dev)
 
 	dev = &of_dev->dev;
 	net_dev = (typeof(net_dev))dev_get_drvdata(dev);
+	priv = (typeof(priv))netdev_priv(net_dev);
 
-	cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+
+	if (netif_msg_probe(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	dev_set_drvdata(dev, NULL);
 	unregister_netdev(net_dev);
 
-	priv = (typeof(priv))netdev_priv(net_dev);
-
 	for (i = 0, _errno = 0; i < ARRAY_SIZE(priv->dpa_fq_list); i++) {
 		__errno = dpa_fq_free(dev, priv->dpa_fq_list + i);
 		if (unlikely(__errno < 0) && _errno >= 0)
-- 
1.6.0.4

