From a5cb428cb7607f8f3ff29dd52f0a0dc7b207c7ef Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Wed, 4 Aug 2010 14:12:04 +0800
Subject: [PATCH 05/22] P4080/DPA: Add more netif_msg_*() tests

It is from FSL vendor SDK 2.x.

Also fixed the type/level of some existing ones.
This helps better control the verbosity of the driver.

signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/net/dpa/dpa.c |  132 +++++++++++++++++++++++++++++-------------------
 1 files changed, 80 insertions(+), 52 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index c8b694f..fa01a6f 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -186,6 +186,7 @@ _dpa_bp_alloc(struct net_device *net_dev, struct list_head *list,
 {
 	int			 _errno;
 	struct bman_pool_params	 bp_params;
+	const struct dpa_priv_s	*priv;
 
 	BUG_ON(dpa_bp->size == 0);
 	BUG_ON(dpa_bp->count == 0);
@@ -199,11 +200,14 @@ _dpa_bp_alloc(struct net_device *net_dev, struct list_head *list,
 	else
 		bp_params.bpid = dpa_bp->bpid;
 
+	priv = (typeof(priv))netdev_priv(net_dev);
+
 	dpa_bp->pool = bman_new_pool(&bp_params);
 	if (unlikely(dpa_bp->pool == NULL)) {
-		cpu_dev_err(net_dev->dev.parent,
-				"%s:%hu:%s(): bman_new_pool() failed\n",
-				__file__, __LINE__, __func__);
+		if (netif_msg_drv(priv))
+			cpu_dev_err(net_dev->dev.parent, "%s:%hu:%s(): "
+				    "bman_new_pool() failed\n",
+				    __file__, __LINE__, __func__);
 		return -ENODEV;
 	}
 
@@ -248,9 +252,10 @@ _dpa_bp_alloc(struct net_device *net_dev, struct list_head *list,
 						  dpa_bp->size * dpa_bp->count,
 						  0);
 		if (unlikely(dpa_bp->vaddr == NULL)) {
-			cpu_dev_err(net_dev->dev.parent,
-					"%s:%hu:%s(): devm_ioremap() failed\n",
-					__file__, __LINE__, __func__);
+			if (netif_msg_drv(priv))
+				cpu_dev_err(net_dev->dev.parent, "%s:%hu:%s(): "
+					    "devm_ioremap() failed\n",
+					    __file__, __LINE__, __func__);
 			_errno = -EIO;
 			goto _return_bman_free_pool;
 		}
@@ -339,7 +344,7 @@ _dpa_fq_alloc(struct list_head		*list,
 
 	_errno = qman_create_fq(fqid, flags, &dpa_fq->fq_base);
 	if (unlikely(_errno)) {
-		if (netif_msg_probe(priv))
+		if (netif_msg_drv(priv))
 			cpu_dev_err(dev,
 				"%s:%hu:%s(): qman_create_fq() failed\n",
 				__file__, __LINE__, __func__);
@@ -354,7 +359,7 @@ _dpa_fq_alloc(struct list_head		*list,
 
 		_errno = qman_init_fq(fq, QMAN_INITFQ_FLAG_SCHED, &initfq);
 		if (unlikely(_errno < 0)) {
-			if (netif_msg_probe(priv))
+			if (netif_msg_drv(priv))
 				cpu_dev_err(dev,
 					"%s:%hu:%s(): qman_init_fq(%u) = %d\n",
 					__file__, __LINE__, __func__,
@@ -372,22 +377,25 @@ _dpa_fq_alloc(struct list_head		*list,
 static int __cold __attribute__((nonnull))
 _dpa_fq_free(struct device *dev, struct qman_fq *fq)
 {
-	int		 _errno, __errno;
-	struct dpa_fq	*dpa_fq;
+	int			 _errno, __errno;
+	struct dpa_fq		*dpa_fq;
+	const struct dpa_priv_s	*priv;
 
 	_errno = 0;
 
-	dpa_fq = (struct dpa_fq *)fq;
+	dpa_fq = container_of(fq, struct dpa_fq, fq_base);
+	priv = (typeof(priv))netdev_priv(dpa_fq->net_dev);
+
 	if (dpa_fq->init) {
 		_errno = qman_retire_fq(fq, NULL);
-		if (unlikely(_errno < 0))
+		if (unlikely(_errno < 0) && netif_msg_drv(priv))
 			cpu_dev_err(dev,
 				"%s:%hu:%s(): qman_retire_fq(%u) = %d\n",
 				__file__, __LINE__, __func__, qman_fq_fqid(fq),
 				_errno);
 
 		__errno = qman_oos_fq(fq);
-		if (unlikely(__errno < 0)) {
+		if (unlikely(__errno < 0) && netif_msg_drv(priv)) {
 			cpu_dev_err(dev, "%s:%hu:%s(): qman_oos_fq(%u) = %d\n",
 					__file__, __LINE__, __func__,
 					qman_fq_fqid(fq), __errno);
@@ -481,11 +489,12 @@ dpa_fd_release(const struct net_device *net_dev, const struct qm_fd *fd)
 			__errno = bman_release(dpa_bp->pool, bmb, j,
 					BMAN_RELEASE_FLAG_WAIT_INT);
 			if (unlikely(__errno < 0)) {
-				cpu_netdev_err(net_dev,
-					"%s:%hu:%s(): bman_release(%hu) = %d\n",
-					__file__, __LINE__, __func__,
-					bman_get_params(dpa_bp->pool)->bpid,
-					_errno);
+				if (netif_msg_drv(priv))
+					cpu_netdev_err(net_dev,	"%s:%hu:%s(): "
+					       "bman_release(%hu) = %d\n",
+					       __file__, __LINE__, __func__,
+					       bman_get_params(dpa_bp->pool)->bpid,
+					       _errno);
 				if (_errno >= 0)
   					_errno = __errno;
   			}
@@ -738,7 +747,7 @@ static void egress_ern(struct qman_portal	*portal,
 	priv = (typeof(priv))netdev_priv(net_dev);
 	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	if (priv->mac_dev) {
@@ -761,7 +770,7 @@ static void egress_ern(struct qman_portal	*portal,
 	percpu_priv->stats.tx_dropped++;
 	percpu_priv->stats.tx_fifo_errors++;
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_intr(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -794,7 +803,8 @@ dpa_get_stats(struct net_device *net_dev)
 	struct dpa_percpu_priv_s	*percpu_priv;
 	int numstats = sizeof(net_dev->stats) / sizeof(unsigned long);
 
-	cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	netstats = (unsigned long *)&net_dev->stats;
 
@@ -809,7 +819,8 @@ dpa_get_stats(struct net_device *net_dev)
 			netstats[j] += cpustats[j];
 	}
 
-	cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 
 	return &net_dev->stats;
 }
@@ -819,25 +830,27 @@ static void __cold dpa_change_rx_flags(struct net_device *net_dev, int flags)
 	int			 _errno;
 	const struct dpa_priv_s	*priv;
 
-	cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
 	priv = (typeof(priv))netdev_priv(net_dev);
 
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+
 	if ((flags & IFF_PROMISC) != 0 && priv->mac_dev != NULL) {
 		_errno = priv->mac_dev->change_promisc(priv->mac_dev);
-		if (unlikely(_errno < 0))
+		if (unlikely(_errno < 0) && netif_msg_drv(priv))
 			cpu_netdev_err(net_dev,
 				"%s:%hu:%s(): mac_dev->change_promisc() = %d\n",
 				__file__, __LINE__, __func__, _errno);
 	}
-
-	cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
 static int dpa_process_one(struct net_device *net_dev, struct sk_buff *skb,
 				struct dpa_bp *dpa_bp, const struct qm_fd *fd)
 {
 	int err;
+	const struct dpa_priv_s	*priv;
 
  	memcpy(skb_put(skb, dpa_fd_length(fd)),
  			dpa_phys2virt(dpa_bp, (struct bm_buffer *)fd) +
@@ -860,7 +873,7 @@ static void _dpa_rx_error(struct net_device		*net_dev,
 {
 	int _errno;
 
-	if (netif_msg_rx_err(priv))
+	if (netif_msg_hw(priv))
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
 			       __file__, __LINE__, __func__,
 			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
@@ -883,7 +896,7 @@ static void _dpa_tx_error(struct net_device		*net_dev,
 {
 	struct sk_buff *skb;
 
-	if (netif_msg_tx_err(priv))
+	if (netif_msg_hw(priv))
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
 			       __file__, __LINE__, __func__,
 			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
@@ -915,7 +928,7 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 	struct sk_buff *skb;
 
 	if (unlikely(dpa_fd->fd.status & FM_FD_STAT_ERRORS) != 0) {
-		if (netif_msg_rx_err(priv))
+		if (netif_msg_hw(priv))
 			cpu_netdev_warn(net_dev,
 					"%s:%hu:%s(): FD status = 0x%08x\n",
 					__file__, __LINE__, __func__,
@@ -934,7 +947,8 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 
 	if (dpa_fd->fd.format == qm_fd_sg) {
 		percpu_priv->stats.rx_dropped++;
-		cpu_netdev_err(net_dev, "%s:%hu:%s(): Dropping a SG frame\n",
+		if (netif_msg_rx_status(priv))
+			cpu_netdev_err(net_dev, "%s:%hu:%s(): Dropping a SG frame\n",
 			       __file__, __LINE__, __func__);
 		goto _return_dpa_fd_release;
 	}
@@ -969,7 +983,7 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 	skb->protocol = eth_type_trans(skb, net_dev);
 
 #ifdef CONFIG_FSL_FMAN_TEST
-        fman_test_ip_manip((void *)priv->mac_dev, skb->data);
+	fman_test_ip_manip((void *)priv->mac_dev, skb->data);
 #endif /* CONFIG_FSL_FMAN_TEST */
 
 	if (unlikely(netif_receive_skb(skb) != NET_RX_SUCCESS))
@@ -997,7 +1011,7 @@ static void __hot _dpa_tx(struct net_device		*net_dev,
 	struct sk_buff	*skb;
 
 	if (unlikely(dpa_fd->fd.status & FM_FD_STAT_ERRORS) != 0) {
-		if (netif_msg_tx_err(priv))
+		if (netif_msg_hw(priv))
 			cpu_netdev_warn(net_dev,
 					"%s:%hu:%s(): FD status = 0x%08x\n",
 					__file__, __LINE__, __func__,
@@ -1041,12 +1055,11 @@ static void __hot dpa_work(struct work_struct *fd_work)
 	unsigned int quota = 0;
 	unsigned int retry = 0;
 
-	percpu_priv = (typeof(percpu_priv))container_of(
-		fd_work, struct dpa_percpu_priv_s, fd_work);
+	percpu_priv = container_of(fd_work, struct dpa_percpu_priv_s, fd_work);
 	net_dev = percpu_priv->net_dev;
 	priv = netdev_priv(net_dev);
 
-	if (netif_msg_intr(priv))
+	if (netif_msg_drv(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	BUG_ON(percpu_priv != per_cpu_ptr(priv->percpu_priv,
@@ -1094,7 +1107,7 @@ static void __hot dpa_work(struct work_struct *fd_work)
 						_errno);
 	}
 
-	if (netif_msg_intr(priv))
+	if (netif_msg_drv(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
@@ -1146,7 +1159,8 @@ static int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		fd.addr_lo = dma_map_single(dev, skb->data, skb_headlen(skb),
 				DMA_TO_DEVICE);
 		if (unlikely(fd.addr_lo == 0)) {
-			cpu_netdev_err(net_dev,
+			if (netif_msg_tx_err(priv))
+				cpu_netdev_err(net_dev,
 				"%s:%hu:%s(): dma_map_single() failed\n",
 				__file__, __LINE__, __func__);
 			_errno = -EIO;
@@ -1808,12 +1822,16 @@ static int __cold dpa_debugfs_show(struct seq_file *file, void *offset)
 static int __cold dpa_debugfs_open(struct inode *inode, struct file *file)
 {
 	int	_errno;
+	const struct net_device	*net_dev;
 
-	_errno = single_open(file, dpa_debugfs_show, inode->i_private);
-	if (unlikely(_errno < 0))
-		cpu_netdev_err((struct net_device *)inode->i_private,
-			       "%s:%hu:%s(): single_open() = %d\n",
-			       __file__, __LINE__, __func__, _errno);
+	if (unlikely(_errno < 0)) {
+		net_dev = (struct net_device *)inode->i_private;
+
+		if (netif_msg_drv((struct dpa_priv_s *)netdev_priv(net_dev)))
+			cpu_netdev_err(net_dev, "%s:%hu:%s(): "
+				       "single_open() = %d\n",
+				       __file__, __LINE__, __func__, _errno);
+	}
 	return _errno;
 }
 
@@ -1993,8 +2011,10 @@ dpa_probe(struct of_device *_of_dev)
 		fqids[i] = (typeof(fqids[i]))of_get_property(dpa_node,
 				fsl_qman_frame_queues[i], &lenp);
 		if (unlikely(fqids[i] == NULL)) {
-			cpu_dev_info(dev, "Using dynamic %s QM frame queues\n",
-				     rtx[i]);
+			if (netif_msg_probe(priv))
+				cpu_dev_info(dev,
+					"Using dynamic %s QM frame queues\n",
+					rtx[i]);
 			num_fqids[i] = 0;
 		} else
 			num_fqids[i] = lenp / (sizeof(*fqids[i]) * 2);
@@ -2010,7 +2030,8 @@ dpa_probe(struct of_device *_of_dev)
 		/* Get the MAC address */
 		mac_addr = of_get_mac_address(dpa_node);
 		if (unlikely(mac_addr == NULL)) {
-			cpu_dev_err(dev,
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev,
 				"%s:%hu:%s(): of_get_mac_address(%s) failed\n",
 				__file__, __LINE__, __func__,
 				dpa_node->full_name);
@@ -2027,6 +2048,7 @@ dpa_probe(struct of_device *_of_dev)
 		 * static declarations on MAC-less devices */
 		for (i = 0; i < ARRAY_SIZE(fqids); i++)
 			if (unlikely(fqids[i] == NULL)) {
+			     if (netif_msg_probe(priv))
 				cpu_dev_err(dev, "%s:%hu:%s(): "
 			     "MAC-less interfaces require %s FQ declarations\n",
 			      __file__, __LINE__, __func__, rtx[i]);
@@ -2037,7 +2059,9 @@ dpa_probe(struct of_device *_of_dev)
 		dpa_fq = devm_kzalloc(dev, sizeof(*dpa_fq) * num_fqs[RX],
 					GFP_KERNEL);
 		if (unlikely(dpa_fq == NULL)) {
-			cpu_dev_err(dev, "%s:%hu:%s(): devm_kzalloc() failed\n",
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev,
+					"%s:%hu:%s(): devm_kzalloc() failed\n",
 					__file__, __LINE__, __func__);
 			_errno = -ENOMEM;
 			goto _return_free_percpu;
@@ -2083,7 +2107,9 @@ dpa_probe(struct of_device *_of_dev)
 		dpa_fq = devm_kzalloc(dev, sizeof(*dpa_fq) * num_fqs[TX],
 					GFP_KERNEL);
 		if (unlikely(dpa_fq == NULL)) {
-			cpu_dev_err(dev, "%s:%hu:%s(): devm_kzalloc() failed\n",
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev,
+					"%s:%hu:%s(): devm_kzalloc() failed\n",
 					__file__, __LINE__, __func__);
 			_errno = -ENOMEM;
 			goto _return_free_percpu;
@@ -2151,7 +2177,9 @@ dpa_probe(struct of_device *_of_dev)
 				sizeof(*dpa_fq) * (num_fqs[TX] + num_fqs[RX]),
 				GFP_KERNEL);
 		if (unlikely(dpa_fq == NULL)) {
-			cpu_dev_err(dev, "%s:%hu:%s(): devm_kzalloc() failed\n",
+			if (netif_msg_probe(priv))
+				cpu_dev_err(dev,
+					"%s:%hu:%s(): devm_kzalloc() failed\n",
 					__file__, __LINE__, __func__);
 			_errno = -ENOMEM;
 			goto _return_free_percpu;
@@ -2356,14 +2384,14 @@ static int __devexit __cold dpa_remove(struct of_device *of_dev)
 
 	dev = &of_dev->dev;
 	net_dev = (typeof(net_dev))dev_get_drvdata(dev);
+	priv = (typeof(priv))netdev_priv(net_dev);
 
-	cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+	if (netif_msg_probe(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
 	dev_set_drvdata(dev, NULL);
 	unregister_netdev(net_dev);
 
-	priv = (typeof(priv))netdev_priv(net_dev);
-
 	for (i = 0, _errno = 0; i < ARRAY_SIZE(priv->dpa_fq_list); i++) {
 		__errno = dpa_fq_free(dev, priv->dpa_fq_list + i);
 		if (unlikely(__errno < 0) && _errno >= 0)
-- 
1.6.5.2

