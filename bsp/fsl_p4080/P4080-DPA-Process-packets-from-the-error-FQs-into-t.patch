From 2e0eb39c247457425cc5b994b075ecba2559fe1b Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@Freescale.com>
Date: Tue, 15 Dec 2009 16:11:34 -0600
Subject: [PATCH] P4080/DPA: Process packets from the error FQs into the workqueue(s)

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
[Kevin: Original patch taken from Freescale p4080 SDK 2.0.2 tar
package, apply cleanly to kernel 2.6.27]
Integrated-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/dpa/dpa.c |  213 +++++++++++++++++++++++++++----------------------
 drivers/net/dpa/dpa.h |    5 +-
 2 files changed, 120 insertions(+), 98 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index 83e6461..6a46874 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -709,7 +709,8 @@ static enum qman_cb_dqrr_result __hot
 ingress_dqrr(struct qman_portal		*portal,
 	     struct qman_fq		*fq,
 	     const struct qm_dqrr_entry	*dq,
-	     uint8_t			 _rtx)
+	     uint8_t			 _rtx,
+	     uint8_t			 ed)
 {
 	const struct net_device		*net_dev;
 	const struct dpa_priv_s		*priv;
@@ -720,12 +721,12 @@ ingress_dqrr(struct qman_portal		*portal,
 	priv = (typeof(priv))netdev_priv(net_dev);
 
 	if (netif_msg_intr(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s[%s]()\n",
-			       __file__, __func__, rtx[_rtx]);
+		cpu_netdev_dbg(net_dev, "-> %s:%s[%s][%hu]()\n",
+			       __file__, __func__, rtx[_rtx], ed);
 
 	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
 #ifdef CONFIG_DEBUG_FS
-	percpu_priv->hwi[_rtx]++;
+	percpu_priv->hwi[_rtx][ed]++;
 #endif
 
 	if (list_empty(&percpu_priv->free_list)) {
@@ -746,70 +747,48 @@ ingress_dqrr(struct qman_portal		*portal,
 
 	dpa_fd->fd = dq->fd;
 
-	list_add_tail(&dpa_fd->list, &percpu_priv->fd_list[_rtx]);
+	list_add_tail(&dpa_fd->list, &percpu_priv->fd_list[_rtx][ed]);
 #ifdef CONFIG_DEBUG_FS
-	percpu_priv->count[_rtx]++;
-	percpu_priv->max[_rtx] = max(percpu_priv->max[_rtx],
-				    percpu_priv->count[_rtx]);
+	percpu_priv->count[_rtx][ed]++;
+	percpu_priv->max[_rtx][ed] = max(percpu_priv->max[_rtx][ed],
+					 percpu_priv->count[_rtx][ed]);
 #endif
 
 	schedule_work(&percpu_priv->fd_work);
 
 _return:
 	if (netif_msg_intr(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s[%s]() ->\n",
-			       __file__, __func__, rtx[_rtx]);
+		cpu_netdev_dbg(net_dev, "%s:%s[%s][%hu]() ->\n",
+			       __file__, __func__, rtx[_rtx], ed);
 
 	return qman_cb_dqrr_consume;
 }
 
 static enum qman_cb_dqrr_result
-ingress_rx_error_dqrr(struct qman_portal *portal, struct qman_fq *fq,
-		const struct qm_dqrr_entry *dq)
+ingress_rx_error_dqrr(struct qman_portal		*portal,
+		      struct qman_fq			*fq,
+		      const struct qm_dqrr_entry	*dq)
+{
+#ifdef CONFIG_FSL_FMAN_TEST
 {
-	int			 _errno;
 	struct net_device	*net_dev;
 	const struct dpa_priv_s	*priv;
+	void			*virt = bus_to_virt(dq->fd.addr_lo);
 
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	net_dev->stats.rx_errors++;
-	net_dev->stats.rx_packets++;
-	net_dev->stats.rx_bytes += dpa_fd_length(&dq->fd);
-
-	BUG_ON((dq->fd.status & FM_FD_STAT_ERRORS) == 0);
-
-	cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
-			__file__, __LINE__, __func__,
-			dq->fd.status & FM_FD_STAT_ERRORS);
-
-#ifdef CONFIG_FSL_FMAN_TEST
-{
-    void	*virt = bus_to_virt(dq->fd.addr_lo);
-    /* No support yet for more than 32 bit address */
-    BUG_ON(dq->fd.addr_hi);
-    if (is_fman_test((void *)priv->mac_dev,
-                     FMT_RX_ERR_Q,
-                     virt,
-                     dq->fd.length20 + dq->fd.offset))
-        return qman_cb_dqrr_consume;
+	/* No support yet for more than 32 bit address */
+	BUG_ON(dq->fd.addr_hi);
+	if (is_fman_test((void *)priv->mac_dev,
+			 FMT_RX_ERR_Q,
+			 virt,
+			 dq->fd.length20 + dq->fd.offset))
+		return qman_cb_dqrr_consume;
 }
 #endif	/* CONFIG_FSL_FMAN_TEST */
 
-        _errno = dpa_fd_release(net_dev, &dq->fd);
-        if (unlikely(_errno < 0)) {
-            dump_stack();
-            panic("Can't release buffer to the BM during RX\n");
-        }
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-
-	return qman_cb_dqrr_consume;
+	return ingress_dqrr(portal, fq, dq, RX, 0);
 }
 
 static void ingress_rx_error_ern(struct qman_portal		*portal,
@@ -928,7 +907,7 @@ ingress_rx_default_dqrr(struct qman_portal		*portal,
 }
 #endif /* CONFIG_FSL_FMAN_TEST */
 
-	return ingress_dqrr(portal, fq, dq, RX);
+	return ingress_dqrr(portal, fq, dq, RX, 1);
 }
 
 static void ingress_rx_default_ern(struct qman_portal		*portal,
@@ -989,37 +968,30 @@ static void ingress_rx_default_fqs(struct qman_portal		*portal,
 }
 
 static enum qman_cb_dqrr_result
-ingress_tx_error_dqrr(struct qman_portal *portal, struct qman_fq *fq,
-		const struct qm_dqrr_entry *dq)
+ingress_tx_error_dqrr(struct qman_portal		*portal,
+		      struct qman_fq			*fq,
+		      const struct qm_dqrr_entry	*dq)
+{
+#ifdef CONFIG_FSL_FMAN_TEST
 {
 	const struct net_device	*net_dev;
 	const struct dpa_priv_s	*priv;
+	void   *virt = bus_to_virt(dq->fd.addr_lo);
 
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
 
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-#ifdef CONFIG_FSL_FMAN_TEST
-{
-    void   *virt = bus_to_virt(dq->fd.addr_lo);
-    /* No support yet for more than 32 bit address */
-    BUG_ON(dq->fd.addr_hi);
-    if (is_fman_test((void *)priv->mac_dev,
-                     FMT_TX_ERR_Q,
-                     virt,
-                     dq->fd.length20 + dq->fd.offset))
-        return qman_cb_dqrr_consume;
+	/* No support yet for more than 32 bit address */
+	BUG_ON(dq->fd.addr_hi);
+	if (is_fman_test((void *)priv->mac_dev,
+			 FMT_TX_ERR_Q,
+			 virt,
+			 dq->fd.length20 + dq->fd.offset))
+		return qman_cb_dqrr_consume;
 }
 #endif /* CONFIG_FSL_FMAN_TEST */
 
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-
-	return qman_cb_dqrr_consume;
+	return ingress_dqrr(portal, fq, dq, TX, 0);
 }
 
 static void ingress_tx_error_ern(struct qman_portal		*portal,
@@ -1103,7 +1075,7 @@ ingress_tx_default_dqrr(struct qman_portal		*portal,
 }
 #endif /* CONFIG_FSL_FMAN_TEST */
 
-	return ingress_dqrr(portal, fq, dq, TX);
+	return ingress_dqrr(portal, fq, dq, TX, 1);
 }
 
 static void ingress_tx_default_ern(struct qman_portal		*portal,
@@ -1437,6 +1409,49 @@ static int dpa_process_one(struct net_device *net_dev, struct sk_buff *skb,
 	return 0;
 }
 
+static void _dpa_rx_error(struct net_device		*net_dev,
+			  const struct dpa_priv_s	*priv,
+			  struct dpa_percpu_priv_s	*percpu_priv,
+			  const struct dpa_fd		*dpa_fd)
+{
+	int	_errno;
+
+	if (netif_msg_rx_err(priv))
+		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
+			       __file__, __LINE__, __func__,
+			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
+
+	BUG_ON((dpa_fd->fd.status & FM_FD_STAT_ERRORS) == 0);
+
+	net_dev->stats.rx_errors++;
+	net_dev->stats.rx_packets++;
+	net_dev->stats.rx_bytes += dpa_fd_length(&dpa_fd->fd);
+
+	_errno = dpa_fd_release(net_dev, &dpa_fd->fd);
+	if (unlikely(_errno < 0)) {
+		dump_stack();
+		panic("Can't release buffer to the BM during RX\n");
+	}
+
+}
+
+static void _dpa_tx_error(struct net_device		*net_dev,
+			  const struct dpa_priv_s	*priv,
+			  struct dpa_percpu_priv_s	*percpu_priv,
+			  const struct dpa_fd		*dpa_fd)
+{
+	if (netif_msg_tx_err(priv))
+		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
+			       __file__, __LINE__, __func__,
+			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
+
+	BUG_ON((dpa_fd->fd.status & FM_FD_STAT_ERRORS) == 0);
+
+	net_dev->stats.tx_errors++;
+
+	BUG();
+}
+
 static void __hot _dpa_rx(struct net_device		*net_dev,
 			  const struct dpa_priv_s	*priv,
 			  struct dpa_percpu_priv_s	*percpu_priv,
@@ -1573,18 +1588,18 @@ static void __hot _dpa_tx(struct net_device		*net_dev,
 		dev_kfree_skb(skb);
 }
 
-static void (*const _dpa_work[])(struct net_device		*net_dev,
-				 const struct dpa_priv_s	*priv,
-				 struct dpa_percpu_priv_s	*percpu_priv,
-				 const struct dpa_fd		*dpa_fd) =
+static void (*const _dpa_work[][2])(struct net_device		*net_dev,
+				    const struct dpa_priv_s	*priv,
+				    struct dpa_percpu_priv_s	*percpu_priv,
+				    const struct dpa_fd		*dpa_fd) =
 {
-	[RX] = _dpa_rx,
-	[TX] = _dpa_tx
+	[RX] = {_dpa_rx_error, _dpa_rx},
+	[TX] = {_dpa_tx_error, _dpa_tx}
 };
 
 static void __hot dpa_work(struct work_struct *fd_work)
 {
-	int				 i;
+	int				 i, j;
 	struct net_device		*net_dev;
 	const struct dpa_priv_s		*priv;
 	struct dpa_percpu_priv_s	*percpu_priv;
@@ -1607,15 +1622,18 @@ static void __hot dpa_work(struct work_struct *fd_work)
 
 	/* RX, TX */
 	for (i = 0; i < ARRAY_SIZE(percpu_priv->fd_list); i++)
-		list_for_each_entry_safe(dpa_fd, tmp,
-					 &percpu_priv->fd_list[i], list) {
-			_dpa_work[i](net_dev, priv, percpu_priv, dpa_fd);
+		/* Error, default*/
+		for (j = 0; j < ARRAY_SIZE(percpu_priv->fd_list[i]); j++)
+			list_for_each_entry_safe(dpa_fd, tmp,
+						 &percpu_priv->fd_list[i][j],
+						 list) {
+			_dpa_work[i][j](net_dev, priv, percpu_priv, dpa_fd);
 
 			local_irq_disable();
 			list_del(&dpa_fd->list);
 #ifdef CONFIG_DEBUG_FS
-			percpu_priv->count[i]--;
-			percpu_priv->total[i]++;
+			percpu_priv->count[i][j]--;
+			percpu_priv->total[i][j]++;
 #endif
 			list_add_tail(&dpa_fd->list, &percpu_priv->free_list);
 			local_irq_enable();
@@ -2266,7 +2284,7 @@ _return:
 #ifdef CONFIG_DEBUG_FS
 static int __cold dpa_debugfs_show(struct seq_file *file, void *offset)
 {
-	int				 i, j;
+	int				 i, j, k;
 	struct dpa_priv_s		*priv;
 	struct dpa_percpu_priv_s	*percpu_priv, total;
 
@@ -2281,26 +2299,27 @@ static int __cold dpa_debugfs_show(struct seq_file *file, void *offset)
 	for_each_online_cpu(i) {
 		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 
-		for (j = 0; j < ARRAY_SIZE(total.total); j++) {
-			total.total[j]	+= percpu_priv->total[j];
-			total.max[j]	+= percpu_priv->max[j];
-			total.hwi[j]	+= percpu_priv->hwi[j];
-		}
-		total.swi	+= percpu_priv->swi;
+		for (j = 0; j < ARRAY_SIZE(total.total); j++)
+			for (k = 0; k < ARRAY_SIZE(total.total[j]); k++) {
+				total.total[j][k] += percpu_priv->total[j][k];
+				total.max[j][k]	  += percpu_priv->max[j][k];
+				total.hwi[j][k]	  += percpu_priv->hwi[j][k];
+			}
+		total.swi += percpu_priv->swi;
 
 		seq_printf(file, "%hu/%hu   0x%08x 0x%08x 0x%08x "
 			   "0x%08x 0x%08x 0x%08x 0x%08x\n",
 			   get_hard_smp_processor_id(i), i,
-			   percpu_priv->hwi[RX], percpu_priv->hwi[TX],
+			   percpu_priv->hwi[RX][1], percpu_priv->hwi[TX][1],
 			   percpu_priv->swi,
-			   percpu_priv->total[RX], percpu_priv->max[RX],
-			   percpu_priv->total[TX], percpu_priv->max[TX]);
+			   percpu_priv->total[RX][1], percpu_priv->max[RX][1],
+			   percpu_priv->total[TX][1], percpu_priv->max[TX][1]);
 	}
 	seq_printf(file, "Total 0x%08x 0x%08x 0x%08x "
 		   "0x%08x 0x%08x 0x%08x 0x%08x\n",
-		   total.hwi[RX], total.hwi[TX], total.swi,
-		   total.total[RX], total.max[RX],
-		   total.total[TX], total.max[TX]);
+		   total.hwi[RX][1], total.hwi[TX][1], total.swi,
+		   total.total[RX][1], total.max[RX][1],
+		   total.total[TX][1], total.max[TX][1]);
 
 	return 0;
 }
@@ -2333,7 +2352,7 @@ static const uint32_t default_fqids[][6] __devinitconst = {
 static int __devinit __cold __attribute__((nonnull))
 dpa_probe(struct of_device *_of_dev)
 {
-	int				 _errno, i, j, lenp;
+	int				 _errno, i, j, k, lenp;
 	struct device			*dev;
 	struct device_node		*dpa_node, *dev_node;
 	struct net_device		*net_dev;
@@ -2474,7 +2493,9 @@ dpa_probe(struct of_device *_of_dev)
 		percpu_priv->net_dev = net_dev;
 		INIT_WORK(&percpu_priv->fd_work, dpa_work);
 		for (j = 0; j < ARRAY_SIZE(percpu_priv->fd_list); j++)
-			INIT_LIST_HEAD(&percpu_priv->fd_list[j]);
+			for (k = 0; k < ARRAY_SIZE(percpu_priv->fd_list[j]);
+			     k++)
+				INIT_LIST_HEAD(&percpu_priv->fd_list[j][k]);
 		INIT_LIST_HEAD(&percpu_priv->free_list);
 		skb_queue_head_init(&percpu_priv->rx_recycle);
 	}
diff --git a/drivers/net/dpa/dpa.h b/drivers/net/dpa/dpa.h
index 70faacb..e252009 100644
--- a/drivers/net/dpa/dpa.h
+++ b/drivers/net/dpa/dpa.h
@@ -56,11 +56,12 @@ struct pcd_range {
 struct dpa_percpu_priv_s {
 	struct net_device	*net_dev;
 	struct work_struct	 fd_work;
-	struct list_head	 fd_list[2];
+	struct list_head	 fd_list[2][2];
 	struct list_head	 free_list;
 	struct sk_buff_head	 rx_recycle;
 #ifdef CONFIG_DEBUG_FS
-	size_t			 count[2], total[2], max[2], hwi[2], swi;
+	size_t			 count[2][2], total[2][2], max[2][2], hwi[2][2];
+	size_t			 swi;
 #endif
 };
 
-- 
1.6.0.4

