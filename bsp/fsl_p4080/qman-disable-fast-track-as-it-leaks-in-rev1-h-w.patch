From 1a904df61237d690cf6b77b0081aa6cfeb522b2f Mon Sep 17 00:00:00 2001
From: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Date: Wed, 11 Nov 2009 21:27:00 -0500
Subject: [PATCH] qman: disable "fast-track", as it leaks in rev1 h/w.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
[Kevin: Original patch taken from Freescale p4080 SDK 2.0.1 ISO
image. Apply cleanly to kernel 2.6.27]
Integrated-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/hwqueue/Kconfig       |    6 ++++++
 drivers/hwqueue/qman_config.c |   12 ++++++++++++
 2 files changed, 18 insertions(+), 0 deletions(-)

diff --git a/drivers/hwqueue/Kconfig b/drivers/hwqueue/Kconfig
index e2593a3..ed80ced 100644
--- a/drivers/hwqueue/Kconfig
+++ b/drivers/hwqueue/Kconfig
@@ -164,6 +164,12 @@ config FSL_QMAN_CI_SCHED_CFG_BMAN_W
 	depends on FSL_QMAN_CONFIG
 	default 2
 
+# Workaround for rev1 h/w bug with respect to "fast-track", disable it.
+config FSL_QMAN_BUG_FASTTRACK
+	bool
+	depends on FSL_QMAN_CONFIG
+	default y
+
 endif # FSL_QMAN
 
 endmenu
diff --git a/drivers/hwqueue/qman_config.c b/drivers/hwqueue/qman_config.c
index b0e446a..0284a64 100644
--- a/drivers/hwqueue/qman_config.c
+++ b/drivers/hwqueue/qman_config.c
@@ -61,6 +61,7 @@
 #define REG_CM_CFG		0x0800
 #define REG_MCR			0x0b00
 #define REG_MCP(n)		(0x0b04 + ((n) * 0x04))
+#define REG_HID_CFG		0x0bf0
 #define REG_IP_REV_1		0x0bf8
 #define REG_IP_REV_2		0x0bfc
 #define REG_FQD_BARE		0x0c00
@@ -297,6 +298,15 @@ static void qm_set_congestion_config(struct qman *qm, u16 pres)
 
 #endif
 
+static void qm_set_hid(struct qman *qm)
+{
+#ifdef CONFIG_FSL_QMAN_BUG_FASTTRACK
+	qm_out(HID_CFG, 3);
+#else
+	qm_out(HID_CFG, 0);
+#endif
+}
+
 static void qm_set_corenet_initiator(struct qman *qm)
 {
 	qm_out(CI_SCHED_CFG,
@@ -472,6 +482,8 @@ static int __init fsl_qman_init(struct device_node *node)
 	qm_set_sfdr_threshold(qm, 128);
 	/* corenet initiator settings */
 	qm_set_corenet_initiator(qm);
+	/* HID settings */
+	qm_set_hid(qm);
 	/* Workaround for bug 3594: "PAMU Address translation exception during
 	 * qman dqrr stashing". */
 	if (sizeof(dma_addr_t) <= sizeof(u32))
-- 
1.6.0.4

