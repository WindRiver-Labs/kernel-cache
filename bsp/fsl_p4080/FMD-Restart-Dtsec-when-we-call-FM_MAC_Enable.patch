From 6a7ed7e863287ec3a151d6c10cb69faa8c21c468 Mon Sep 17 00:00:00 2001
From: Andy Fleming <afleming@freescale.com>
Date: Wed, 4 Nov 2009 17:26:04 -0600
Subject: [PATCH] FMD: Restart Dtsec when we call FM_MAC_Enable()

DtsecDisable() gracefully stops RX/TX (if requested), but
DtsecEnable() does not restart RX/TX.  So we modify DtsecEnable() to
call DtsecRestart().  Also, we move DtsecRestart above DtsecEnable.

Signed-off-by: Andy Fleming <afleming@freescale.com>
[Kevin: Original patch taken from Freescale p4080 SDK 2.0 ISO image.
Apply cleanly to kernel 2.6.27]
Integrated-by: Kevin Hao <kexin.hao@windriver.com>
---
 .../net/dpa/NetCommSw/Peripherals/FM/MAC/dtsec.c   |   48 ++++++++++---------
 1 files changed, 25 insertions(+), 23 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/MAC/dtsec.c b/drivers/net/dpa/NetCommSw/Peripherals/FM/MAC/dtsec.c
index 7ffb3a1..11a6abe 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/MAC/dtsec.c
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/MAC/dtsec.c
@@ -851,6 +851,29 @@ static t_Error DtsecConfigException(t_Handle h_Dtsec, e_FmMacExceptions exceptio
 /*                      dTSEC Run Time API functions                         */
 /*****************************************************************************/
 
+/* .......................................................................... */
+
+static t_Error DtsecRestart(t_Handle h_Dtsec, e_CommMode mode)
+{
+    t_Dtsec *p_Dtsec = (t_Dtsec *)h_Dtsec;
+    t_DtsecMemMap *p_MemMap ;
+    SANITY_CHECK_RETURN_ERROR(p_Dtsec, E_INVALID_HANDLE);
+    SANITY_CHECK_RETURN_ERROR(p_Dtsec->p_MemMap, E_INVALID_HANDLE);
+
+    p_MemMap= (t_DtsecMemMap*)(p_Dtsec->p_MemMap);
+    if(mode & e_COMM_MODE_TX)
+        /* clear the graceful receive stop bit */
+        WRITE_UINT32(p_MemMap->tctrl,
+                      GET_UINT32(p_MemMap->tctrl) & ~TCTRL_GTS);
+
+    if(mode & e_COMM_MODE_RX)
+        /* clear the graceful receive stop bit */
+        WRITE_UINT32(p_MemMap->rctrl,
+                      GET_UINT32(p_MemMap->rctrl) & ~RCTRL_GRS);
+
+    return E_OK;
+}
+
 /* .............................................................................. */
 
 static t_Error DtsecEnable(t_Handle h_Dtsec,  e_CommMode mode)
@@ -886,6 +909,8 @@ static t_Error DtsecEnable(t_Handle h_Dtsec,  e_CommMode mode)
 
     WRITE_UINT32(p_MemMap->maccfg1, tmpReg32);
 
+	DtsecRestart(h_Dtsec, mode);
+
     return E_OK;
 }
 
@@ -930,29 +955,6 @@ static t_Error DtsecDisable (t_Handle h_Dtsec, e_CommMode mode)
 
 /* .............................................................................. */
 
-static t_Error DtsecRestart(t_Handle h_Dtsec, e_CommMode mode)
-{
-    t_Dtsec *p_Dtsec = (t_Dtsec *)h_Dtsec;
-    t_DtsecMemMap *p_MemMap ;
-    SANITY_CHECK_RETURN_ERROR(p_Dtsec, E_INVALID_HANDLE);
-    SANITY_CHECK_RETURN_ERROR(p_Dtsec->p_MemMap, E_INVALID_HANDLE);
-
-    p_MemMap= (t_DtsecMemMap*)(p_Dtsec->p_MemMap);
-    if(mode & e_COMM_MODE_TX)
-        /* clear the graceful receive stop bit */
-        WRITE_UINT32(p_MemMap->tctrl,
-                      GET_UINT32(p_MemMap->tctrl) & ~TCTRL_GTS);
-
-    if(mode & e_COMM_MODE_RX)
-        /* clear the graceful receive stop bit */
-        WRITE_UINT32(p_MemMap->rctrl,
-                      GET_UINT32(p_MemMap->rctrl) & ~RCTRL_GRS);
-
-    return E_OK;
-}
-
-/* .............................................................................. */
-
 static t_Error DtsecTxMacPause(t_Handle h_Dtsec, uint16_t pauseTime, uint16_t exPauseTime )
 {
     t_Dtsec      *p_Dtsec = (t_Dtsec *)h_Dtsec;
-- 
1.6.0.4

