From e4595ae705e272d28adcfca8b173e066e300ecc0 Mon Sep 17 00:00:00 2001
From: Thomas Tai <thomas.tai@windriver.com>
Date: Tue, 21 Sep 2010 11:57:06 -0700
Subject: [PATCH 2/3] relocate define and paravirtualize prime_debug_regs

In order to access debug register, the mtspr and mfspr machine code
is needed to put into R3 before execute those instructions. Moved those
machine code define from a source file into a header file. Expand macro
to read/write IAC1, IAC2, DAC1, DAC2, DBCR1, DBCR2. Add macros to
encode difference register number into the machine code. The actual format
is documented in "Book E Arch Reference Manual".

paravirtualize prime_debug_regs instead of using mtspr macro in
regs.h so that p4080 can use mtspr to access other special purpose
registers.

Signed-off-by: Thomas Tai <thomas.tai@windriver.com>
---
 arch/powerpc/include/asm/paravirt.h |    2 +
 arch/powerpc/include/asm/reg.h      |   36 ++++++-
 arch/powerpc/kernel/paravirt.c      |    7 ++
 arch/powerpc/kernel/process.c       |    9 ++-
 arch/powerpc/kernel/vbi/wrhv.c      |  195 ++++++++++++++++++++++++++++++++---
 5 files changed, 226 insertions(+), 23 deletions(-)

diff --git a/arch/powerpc/include/asm/paravirt.h b/arch/powerpc/include/asm/paravirt.h
index 046db30..d0f2af3 100644
--- a/arch/powerpc/include/asm/paravirt.h
+++ b/arch/powerpc/include/asm/paravirt.h
@@ -27,6 +27,7 @@ extern int native_kgdb_arch_handle_exception(int vector, int signo,
 				struct pt_regs *linux_regs);
 extern void __kprobes native_DebugException(struct pt_regs *regs,
 				unsigned long debug_status);
+extern void native_prime_debug_regs(struct thread_struct *thread);
 extern int __init native_early_init_dt_scan_memory_ppc(unsigned long node, 
 			const char *uname, int depth, void *data);
 extern void __init native_time_init_cont(void);
@@ -51,6 +52,7 @@ struct pv_cpu_ops {
 	unsigned int (*get_pvr)(void);
 	unsigned int (*get_svr)(void);
 	void (*DebugException)(struct pt_regs *regs, unsigned long debug_status);
+	void (*prime_debug_regs)(struct thread_struct *thread);
 	int (*kgdb_arch_handle_exception)(int vector, int signo, int err_code,
                                char *remcom_in_buffer, char *remcom_out_buffer,
                                struct pt_regs *linux_regs);
diff --git a/arch/powerpc/include/asm/reg.h b/arch/powerpc/include/asm/reg.h
index ce6bbf0..db6a00e 100644
--- a/arch/powerpc/include/asm/reg.h
+++ b/arch/powerpc/include/asm/reg.h
@@ -877,6 +877,36 @@
 #define PV_BE		0x0070
 #define PV_PA6T		0x0090
 
+/* machine code for accessing SPRN_DBSR and SPRN_DBCR0 */
+#define SPRN_DBSR_W 0x7c904ba6  /* mtspr SPRN_DBSR,r4 */
+#define SPRN_DBSR_R 0x7c904aa6  /* mfspr r4,SPRN_DBSR */
+#define SPRN_DBCR0_W 0x7c944ba6 /* mtspr SPRN_DBCR0,r4 */
+#define SPRN_DBCR0_R 0x7c944aa6 /* mfspr r4,SPRN_DBCR0 */
+
+/* machine code for acessing IAC1, IAC2 */
+#define SPRN_IAC1_W 0x7c984ba6 /* mtspr SPRN_IAC1,r4 */
+#define SPRN_IAC1_R 0x7c984aa6 /* mfspr r4,SPRN_IAC1 */
+#define SPRN_IAC2_W 0x7c994ba6 /* mtspr SPRN_IAC2,r4 */
+#define SPRN_IAC2_R 0x7c994aa6 /* mfspr r4,SPRN_IAC2 */
+
+/* machine code for accessing DAC1, DAC2 */
+#define SPRN_DAC1_W 0x7c9c4ba6 /* mtspr SPRN_DAC1,r4 */
+#define SPRN_DAC1_R 0x7c9c4aa6 /* mfspr r4,SPRN_DAC1 */
+#define SPRN_DAC2_W 0x7c9d4ba6 /* mtspr SPRN_DAC2,r4 */
+#define SPRN_DAC2_R 0x7c9d4aa6 /* mfspr r4,SPRN_DAC2 */
+
+/* machine code for accessing DBCR1 and DBCR2 */
+#define SPRN_DBCR1_W 0x7c954ba6 /* mtspr SPRN_DBCR1,r4 */
+#define SPRN_DBCR1_R 0x7c954aa6 /* mfspr r4,SPRN_DBCR1 */
+#define SPRN_DBCR2_W 0x7c964ba6 /* mtspr SPRN_DBCR2,r4 */
+#define SPRN_DBCR2_R 0x7c964aa6 /* mfspr r4,SPRN_DBCR2 */
+
+/* macros to encode register number into the machine code */
+#define SPRN_DBSR_W_RN(rn) (SPRN_DBSR_W & ~(0x1F<<21) | (rn<<21))
+#define SPRN_DBSR_R_RN(rn) (SPRN_DBSR_R & ~(0x1F<<21) | (rn<<21))
+#define SPRN_DBCR0_W_RN(rn) (SPRN_DBCR0_W & ~(0x1F<<21) | (rn<<21))
+#define SPRN_DBCR0_R_RN(rn) (SPRN_DBCR0_R & ~(0x1F<<21) | (rn<<21))
+
 /* Macros for setting and retrieving special purpose registers */
 #ifndef __ASSEMBLY__
 #define mfmsr()		({unsigned long rval; \
@@ -894,14 +924,8 @@
 			asm volatile("mfspr %0," __stringify(rn) \
 				: "=r" (rval)); rval;})
 
-#if defined(CONFIG_WRHV) && !defined(CONFIG_PPC85xx_VT_MODE)
-extern void wrhv_mtspr(unsigned int, unsigned int);
-#define mtspr(rn, v)	wrhv_mtspr(rn, v)
-#else
 #define mtspr(rn, v)	asm volatile("mtspr " __stringify(rn) ",%0" : : "r" (v)\
 				     : "memory")
-#endif
-
 #ifdef __powerpc64__
 #ifdef CONFIG_PPC_CELL
 #define mftb()		({unsigned long rval;				\
diff --git a/arch/powerpc/kernel/paravirt.c b/arch/powerpc/kernel/paravirt.c
index 862c6be..b3e3755 100644
--- a/arch/powerpc/kernel/paravirt.c
+++ b/arch/powerpc/kernel/paravirt.c
@@ -125,6 +125,7 @@ struct pv_cpu_ops pv_cpu_ops = {
 	.get_pvr = native_get_pvr,
 	.get_svr = native_get_svr,
 	.DebugException = native_DebugException,
+	.prime_debug_regs = native_prime_debug_regs,
 #ifdef CONFIG_KGDB
 	.kgdb_arch_handle_exception = native_kgdb_arch_handle_exception,
 #endif
@@ -216,6 +217,12 @@ void __kprobes paravirt_DebugException(struct pt_regs *regs, unsigned long debug
 	pv_cpu_ops.DebugException(regs, debug_status);
 
 }
+
+void  paravirt_prime_debug_regs(struct thread_struct *thread)
+{
+	pv_cpu_ops.prime_debug_regs(thread);
+}
+
 int paravirt_kgdb_arch_handle_exception(int vector, int signo, int err_code,
 			char *remcom_in_buffer, char *remcom_out_buffer,
 			struct pt_regs *linux_regs)
diff --git a/arch/powerpc/kernel/process.c b/arch/powerpc/kernel/process.c
index 7944551..041affb 100644
--- a/arch/powerpc/kernel/process.c
+++ b/arch/powerpc/kernel/process.c
@@ -342,8 +342,10 @@ static void set_debug_reg_defaults(struct thread_struct *thread)
 	thread->dbcr1 = 0;
 #endif
 }
+void paravirt_prime_debug_regs(struct thread_struct *thread)
+	__attribute__((weak, alias("native_prime_debug_regs")));
 
-static void prime_debug_regs(struct thread_struct *thread)
+void native_prime_debug_regs(struct thread_struct *thread)
 {
 	mtspr(SPRN_IAC1, thread->iac1);
 	mtspr(SPRN_IAC2, thread->iac2);
@@ -363,6 +365,11 @@ static void prime_debug_regs(struct thread_struct *thread)
 	mtspr(SPRN_DBCR2, thread->dbcr2);
 #endif
 }
+
+static void prime_debug_regs(struct thread_struct *thread)
+{
+	paravirt_prime_debug_regs(thread);
+}
 /*
  * Unless neither the old or new thread are making use of the
  * debug registers, set the debug registers from the values
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 3c11ba6..cffb900 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -1346,17 +1346,13 @@ static void wrhv_handle_debug(struct pt_regs *regs, unsigned long debug_status)
 		mtspr(SPRN_DBCR0, current->thread.dbcr0);
 }
 
-#define SPRN_DBSR_W 0x7c904ba6	/* mtspr SPRN_DBSR,r4 */
-#define SPRN_DBSR_R 0x7c904aa6  /* mfspr r4,SPRN_DBSR */
-#define SPRN_DBCR0_W 0x7c944ba6 /* mtspr SPRN_DBCR0,r4 */
-#define SPRN_DBCR0_R 0x7c944aa6 /* mfspr r4,SPRN_DBCR0 */
 /* arch/powerpc/include/asm/reg.h */
+#ifdef CONFIG_PPC85xx_VT_MODE
 void wrhv_mtspr(unsigned int sprn, unsigned int value)
 {
 
 	switch(sprn){
 		case SPRN_DBCR0:
-#ifdef CONFIG_PPC85xx_VT_MODE
 			__asm__ __volatile__(
 			"lis    3,%0@h\n"
 			"ori    3,3,%0@l\n"
@@ -1364,13 +1360,9 @@ void wrhv_mtspr(unsigned int sprn, unsigned int value)
 			"mtspr	0x134,4\n"
 			::"i" (SPRN_DBCR0_W), "r" (value)
 			);
-#else
-			wr_control->vb_control_regs.dbcr0 = value;
-#endif
 			break;
 
 		case SPRN_DBSR:
-#ifdef CONFIG_PPC85xx_VT_MODE
 			__asm__ __volatile__(
 			"lis    3,%0@h\n"
 			"ori    3,3,%0@l\n"
@@ -1378,19 +1370,90 @@ void wrhv_mtspr(unsigned int sprn, unsigned int value)
 			"mtspr	0x130,4\n"
 			::"i" (SPRN_DBSR_W), "r" (value)
 			);
+			break;
+
+		case SPRN_IAC1:
+			__asm__ __volatile__(
+			"lis    3,%0@h\n"
+			"ori    3,3,%0@l\n"
+			"mr	4,%1\n"
+			"mtspr	0x138,4\n"
+			::"i" (SPRN_IAC1_W), "r" (value)
+			);
+			break;
+
+		case SPRN_IAC2:
+			__asm__ __volatile__(
+			"lis    3,%0@h\n"
+			"ori    3,3,%0@l\n"
+			"mr	4,%1\n"
+			"mtspr	0x139,4\n"
+			::"i" (SPRN_IAC2_W), "r" (value)
+			);
+			break;
+
+		case SPRN_DAC1:
+			__asm__ __volatile__(
+			"lis    3,%0@h\n"
+			"ori    3,3,%0@l\n"
+			"mr	4,%1\n"
+			"mtspr	0x13C,4\n"
+			::"i" (SPRN_DAC1_W), "r" (value)
+			);
+			break;
+
+		case SPRN_DAC2:
+			__asm__ __volatile__(
+			"lis    3,%0@h\n"
+			"ori    3,3,%0@l\n"
+			"mr	4,%1\n"
+			"mtspr	0x13D,4\n"
+			::"i" (SPRN_DAC2_W), "r" (value)
+			);
+			break;
+
+		case SPRN_DBCR1:
+			__asm__ __volatile__(
+			"lis    3,%0@h\n"
+			"ori    3,3,%0@l\n"
+			"mr	4,%1\n"
+			"mtspr	0x135,4\n"
+			::"i" (SPRN_DBCR1_W), "r" (value)
+			);
+			break;
+
+		case SPRN_DBCR2:
+			__asm__ __volatile__(
+			"lis    3,%0@h\n"
+			"ori    3,3,%0@l\n"
+			"mr	4,%1\n"
+			"mtspr	0x136,4\n"
+			::"i" (SPRN_DBCR2_W), "r" (value)
+			);
+			break;
+	}
+}
 #else
+void wrhv_mtspr(unsigned int sprn, unsigned int value)
+{
+	switch(sprn){
+		case SPRN_DBCR0:
+			wr_control->vb_control_regs.dbcr0 = value;
+			break;
+
+		case SPRN_DBSR:
 			wr_control->vb_control_regs.dbsr = value;
-#endif
 			break;
 	}
 }
+#endif
 
+#ifdef CONFIG_PPC85xx_VT_MODE
 unsigned int wrhv_mfspr(unsigned int sprn)
 {
 	unsigned int value = 0;
 	switch(sprn){
 		case SPRN_DBCR0:
-#ifdef CONFIG_PPC85xx_VT_MODE
 			__asm__ __volatile__(
 			"lis    3,%1@h\n"
 			"ori    3,3,%1@l\n"
@@ -1399,13 +1462,9 @@ unsigned int wrhv_mfspr(unsigned int sprn)
 			:"=r" (value)
 			:"i" (SPRN_DBCR0_R)
 			);
-#else
-			value = wr_control->vb_control_regs.dbcr0;
-#endif
 			break;
 
 		case SPRN_DBSR:
-#ifdef CONFIG_PPC85xx_VT_MODE
 			__asm__ __volatile__(
 			"lis    3,%1@h\n"
 			"ori    3,3,%1@l\n"
@@ -1414,14 +1473,117 @@ unsigned int wrhv_mfspr(unsigned int sprn)
 			:"=r" (value)
 			:"i" (SPRN_DBSR_R)
 			);
+			break;
+
+		case SPRN_IAC1:
+			__asm__ __volatile__(
+			"lis    3,%1@h\n"
+			"ori    3,3,%1@l\n"
+			"mfspr	4,0x138\n"
+			"mr	%0,4\n"
+			:"=r" (value)
+			:"i" (SPRN_IAC1_R)
+			);
+			break;
+
+		case SPRN_IAC2:
+			__asm__ __volatile__(
+			"lis    3,%1@h\n"
+			"ori    3,3,%1@l\n"
+			"mfspr	4,0x139\n"
+			"mr	%0,4\n"
+			:"=r" (value)
+			:"i" (SPRN_IAC2_R)
+			);
+			break;
+
+		case SPRN_DAC1:
+			__asm__ __volatile__(
+			"lis    3,%1@h\n"
+			"ori    3,3,%1@l\n"
+			"mfspr	4,0x13C\n"
+			"mr	%0,4\n"
+			:"=r" (value)
+			:"i" (SPRN_DAC1_R)
+			);
+			break;
+
+		case SPRN_DAC2:
+			__asm__ __volatile__(
+			"lis    3,%1@h\n"
+			"ori    3,3,%1@l\n"
+			"mfspr	4,0x13D\n"
+			"mr	%0,4\n"
+			:"=r" (value)
+			:"i" (SPRN_DAC2_R)
+			);
+			break;
+
+		case SPRN_DBCR1:
+			__asm__ __volatile__(
+			"lis    3,%1@h\n"
+			"ori    3,3,%1@l\n"
+			"mfspr	4,0x135\n"
+			"mr	%0,4\n"
+			:"=r" (value)
+			:"i" (SPRN_DBCR1_R)
+			);
+			break;
+
+		case SPRN_DBCR2:
+			__asm__ __volatile__(
+			"lis    3,%1@h\n"
+			"ori    3,3,%1@l\n"
+			"mfspr	4,0x136\n"
+			"mr	%0,4\n"
+			:"=r" (value)
+			:"i" (SPRN_DBCR2_R)
+			);
+			break;
+	}
+
+	return value;
+}
 #else
+unsigned int wrhv_mfspr(unsigned int sprn)
+{
+	unsigned int value = 0;
+	switch(sprn){
+		case SPRN_DBCR0:
+			value = wr_control->vb_control_regs.dbcr0;
+			break;
+
+		case SPRN_DBSR:
 			value = wr_control->vb_control_regs.dbsr;
-#endif
 			break;
 	}
 
 	return value;
 }
+#endif
+
+/* arch/powerpc/kernel/process.c */
+extern void wrhv_mtspr(unsigned int, unsigned int);
+void wrhv_prime_debug_regs(struct thread_struct *thread)
+{
+	wrhv_mtspr(SPRN_IAC1, thread->iac1);
+	wrhv_mtspr(SPRN_IAC2, thread->iac2);
+#if CONFIG_PPC_ADV_DEBUG_IACS > 2
+	wrhv_mtspr(SPRN_IAC3, thread->iac3);
+	wrhv_mtspr(SPRN_IAC4, thread->iac4);
+#endif
+	wrhv_mtspr(SPRN_DAC1, thread->dac1);
+	wrhv_mtspr(SPRN_DAC2, thread->dac2);
+#if CONFIG_PPC_ADV_DEBUG_DVCS > 0
+	wrhv_mtspr(SPRN_DVC1, thread->dvc1);
+	wrhv_mtspr(SPRN_DVC2, thread->dvc2);
+#endif
+	wrhv_mtspr(SPRN_DBCR0, thread->dbcr0);
+	wrhv_mtspr(SPRN_DBCR1, thread->dbcr1);
+#ifdef CONFIG_BOOKE
+	wrhv_mtspr(SPRN_DBCR2, thread->dbcr2);
+#endif
+}
 
 /* arch/powerpc/kernel/traps.c */
 void __kprobes wrhv_DebugException(struct pt_regs *regs, unsigned long debug_status)
@@ -1624,6 +1786,7 @@ void wrhv_init(void)
 #endif
 
 	pv_cpu_ops.DebugException = wrhv_DebugException;
+	pv_cpu_ops.prime_debug_regs = wrhv_prime_debug_regs;
 	pv_cpu_ops.kgdb_arch_handle_exception =
 		wrhv_kgdb_arch_handle_exception;
 	pv_cpu_ops.ppc_proc_freq =
-- 
1.6.5.2

