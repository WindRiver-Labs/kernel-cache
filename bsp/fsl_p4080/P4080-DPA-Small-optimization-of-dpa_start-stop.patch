From dd02028656db4c78ff645533253856cf756e2586 Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@Freescale.com>
Date: Sun, 29 Nov 2009 14:24:55 -0600
Subject: [PATCH] P4080/DPA: Small optimization of dpa_start/stop()

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
[Kevin: Original patch taken from Freescale p4080 SDK 2.0.2 tar
package, apply cleanly to kernel 2.6.27]
Integrated-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/net/dpa/dpa.c |   34 ++++++++++++++++++----------------
 1 files changed, 18 insertions(+), 16 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index acdcb3e..ffabbde 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -1740,9 +1740,9 @@ _return:
 
 static int __cold dpa_start(struct net_device *net_dev)
 {
-	int			 _errno, i=0, j;
+	int			 _errno, i;
 	const struct dpa_priv_s	*priv;
-	struct mac_device *mac_dev;
+	struct mac_device	*mac_dev;
 
 	priv = netdev_priv(net_dev);
 	mac_dev = priv->mac_dev;
@@ -1752,18 +1752,18 @@ static int __cold dpa_start(struct net_device *net_dev)
 
 	if (mac_dev) {
 		_errno = mac_dev->init_phy(net_dev);
-		if(_errno) {
+		if (unlikely(_errno < 0)) {
 			if (netif_msg_ifup(priv))
 				cpu_netdev_err(net_dev,
 					"%s:%hu:%s(): init_phy() = %d\n",
 					__file__, __LINE__, __func__, _errno);
-			goto _return_port_dev_stop;
+			goto _return;
 		}
 
-		for (; i < ARRAY_SIZE(priv->mac_dev->port_dev); i++)
-			fm_port_enable(priv->mac_dev->port_dev[i]);
+		for (i = 0; i < ARRAY_SIZE(mac_dev->port_dev); i++)
+			fm_port_enable(mac_dev->port_dev[i]);
 
-		_errno = priv->mac_dev->start(priv->mac_dev);
+		_errno = priv->mac_dev->start(mac_dev);
 		if (unlikely(_errno < 0)) {
 			if (netif_msg_ifup(priv))
 				cpu_netdev_err(net_dev,
@@ -1779,8 +1779,8 @@ static int __cold dpa_start(struct net_device *net_dev)
 	goto _return;
 
 _return_port_dev_stop:
-	for (j = 0; j < i; j++)
-		fm_port_disable(priv->mac_dev->port_dev[j]);
+	for (i = 0; i < ARRAY_SIZE(mac_dev->port_dev); i++)
+		fm_port_disable(mac_dev->port_dev[i]);
 _return:
 	if (netif_msg_ifup(priv))
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
@@ -1792,8 +1792,10 @@ static int __cold dpa_stop(struct net_device *net_dev)
 {
 	int			 _errno, __errno, i;
 	const struct dpa_priv_s	*priv;
+	struct mac_device	*mac_dev;
 
 	priv = (typeof(priv))netdev_priv(net_dev);
+	mac_dev = priv->mac_dev;
 
 	if (netif_msg_ifdown(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
@@ -1801,8 +1803,8 @@ static int __cold dpa_stop(struct net_device *net_dev)
 	netif_tx_stop_all_queues(net_dev);
 
 	_errno = 0;
-	if (priv->mac_dev) {
-		__errno = priv->mac_dev->stop(priv->mac_dev);
+	if (mac_dev) {
+		__errno = mac_dev->stop(mac_dev);
 		if (unlikely(__errno < 0)) {
 			if (netif_msg_ifdown(priv))
 				cpu_netdev_err(net_dev,
@@ -1812,12 +1814,12 @@ static int __cold dpa_stop(struct net_device *net_dev)
 				_errno = __errno;
 		}
 
-		for (i = 0; i < ARRAY_SIZE(priv->mac_dev->port_dev); i++)
-			fm_port_disable(priv->mac_dev->port_dev[i]);
+		for (i = 0; i < ARRAY_SIZE(mac_dev->port_dev); i++)
+			fm_port_disable(mac_dev->port_dev[i]);
 
-		if (priv->mac_dev->phy_dev)
-			phy_disconnect(priv->mac_dev->phy_dev);
-		priv->mac_dev->phy_dev = NULL;
+		if (mac_dev->phy_dev)
+			phy_disconnect(mac_dev->phy_dev);
+		mac_dev->phy_dev = NULL;
 	}
 
 	if (netif_msg_ifdown(priv))
-- 
1.6.0.4

