From dd32aa0e05f3aabb61c4f06ca9d98a03d56010bd Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@freescale.com>
Date: Tue, 13 Oct 2009 14:31:52 -0500
Subject: [PATCH 057/148] P4080/DPA: Rename the per-CPU data to a better name

This change allows for cleaner extension of the per-CPU data

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
[Applied FSL SDK 2.0.3 patch
"kernel-2.6.30-P4080-DPA-Rename-the-per-CPU-data-to-a-bette.patch"]
Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 drivers/net/dpa/dpa.c |   38 +++++++++++++++++++-------------------
 drivers/net/dpa/dpa.h |   12 ++++++------
 2 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index 7bc7eb7..75b2ae2 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -817,7 +817,7 @@ ingress_rx_default_dqrr(struct qman_portal		*portal,
 	const struct net_device	*net_dev;
 	struct dpa_priv_s	*priv;
 	struct dpa_fd		*dpa_fd;
-	struct fd_list_head	*fd_list;
+	struct dpa_percpu_priv_s	*percpu_priv;
 
 	net_dev = ((struct dpa_fq *)fq)->net_dev;
 	priv = (typeof(priv))netdev_priv(net_dev);
@@ -891,10 +891,10 @@ ingress_rx_default_dqrr(struct qman_portal		*portal,
 
 	dpa_fd->fd = dq->fd;
 
-	fd_list = per_cpu_ptr(priv->fd_list, smp_processor_id());
-	list_add_tail(&dpa_fd->list, &fd_list->list);
-	fd_list->count++;
-	fd_list->max = max(fd_list->max, fd_list->count);
+	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	list_add_tail(&dpa_fd->list, &percpu_priv->fd_list);
+	percpu_priv->count++;
+	percpu_priv->max = max(percpu_priv->max, percpu_priv->count);
 
 	schedule_work(&priv->fd_work);
 
@@ -1307,7 +1307,7 @@ static void __hot dpa_rx(struct work_struct *fd_work)
 	int			 _errno;
 	struct net_device	*net_dev;
 	const struct dpa_priv_s	*priv;
-	struct fd_list_head	*fd_list;
+	struct dpa_percpu_priv_s	 *percpu_priv;
 	struct dpa_fd		*dpa_fd, *tmp;
 	const struct bm_buffer	*bmb;
 	struct dpa_bp	*dpa_bp;
@@ -1325,8 +1325,8 @@ static void __hot dpa_rx(struct work_struct *fd_work)
 	if (netif_msg_rx_status(priv))
 		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
 
-	fd_list = per_cpu_ptr(priv->fd_list, smp_processor_id());
-	list_for_each_entry_safe(dpa_fd, tmp, &fd_list->list, list) {
+	percpu_priv = per_cpu_ptr(priv->percpu_priv, smp_processor_id());
+	list_for_each_entry_safe(dpa_fd, tmp, &percpu_priv->fd_list, list) {
 		skb = NULL;
 
 		if (unlikely(dpa_fd->fd.status & FM_FD_STAT_ERRORS) != 0) {
@@ -1545,7 +1545,7 @@ _continue:
 
 		local_irq_disable();
 		list_del(&dpa_fd->list);
-		fd_list->count--;
+		percpu_priv->count--;
 		local_irq_enable();
 
 		devm_kfree(net_dev->dev.parent, dpa_fd);
@@ -2148,7 +2148,7 @@ dpa_probe(struct of_device *_of_dev)
 	struct dpa_priv_s		*priv;
 	struct dpa_bp			*dpa_bp;
 	struct dpa_fq			*dpa_fq;
-	struct fd_list_head		*fd_list;
+	struct dpa_percpu_priv_s	*percpu_priv;
 	struct fm_port_rx_params	 rx_port_param;
 	struct fm_port_non_rx_params	 tx_port_param;
 	struct fm_port_pcd_param	 rx_port_pcd_param;
@@ -2283,9 +2283,9 @@ dpa_probe(struct of_device *_of_dev)
 
 	INIT_WORK(&priv->fd_work, dpa_rx);
 
-	priv->fd_list = __alloc_percpu(sizeof(*priv->fd_list),
-				__alignof__(*priv->fd_list));
-	if (unlikely(priv->fd_list == NULL)) {
+	priv->percpu_priv = (typeof(priv->percpu_priv))__alloc_percpu(
+		sizeof(*priv->percpu_priv), __alignof__(*priv->percpu_priv));
+	if (unlikely(priv->percpu_priv == NULL)) {
 		if (netif_msg_probe(priv))
 			cpu_dev_err(dev,
 				"%s:%hu:%s(): __alloc_percpu() failed\n",
@@ -2295,11 +2295,11 @@ dpa_probe(struct of_device *_of_dev)
 	}
 
 	for_each_online_cpu(i) {
-		fd_list = per_cpu_ptr(priv->fd_list, i);
+		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
 
-		INIT_LIST_HEAD(&fd_list->list);
-		fd_list->count	= 0;
-		fd_list->max	= 0;
+		INIT_LIST_HEAD(&percpu_priv->fd_list);
+		percpu_priv->count	= 0;
+		percpu_priv->max	= 0;
 	}
 
 	/* FM */
@@ -2617,7 +2617,7 @@ _return_dpa_fq_free:
 	for (i = 0; i < ARRAY_SIZE(priv->dpa_fq_list); i++)
 		dpa_fq_free(dev, priv->dpa_fq_list + i);
 _return_free_percpu:
-	free_percpu(priv->fd_list);
+	free_percpu(priv->percpu_priv);
 _return_dpa_bp_free:
 	dpa_bp_free(dev, &priv->dpa_bp_list);
 _return_free_netdev:
@@ -2670,7 +2670,7 @@ static int __devexit __cold dpa_remove(struct of_device *of_dev)
 			_errno = __errno;
 	}
 
-	free_percpu(priv->fd_list);
+	free_percpu(priv->percpu_priv);
 
 	dpa_bp_free(dev, &priv->dpa_bp_list);
 
diff --git a/drivers/net/dpa/dpa.h b/drivers/net/dpa/dpa.h
index ae4ab95..b7c5f16 100644
--- a/drivers/net/dpa/dpa.h
+++ b/drivers/net/dpa/dpa.h
@@ -44,11 +44,6 @@
 
 #include "mac.h"		/* struct mac_device */
 
-struct fd_list_head {
-	struct list_head	list;
-	size_t			count, max;
-};
-
 #ifdef CONFIG_FSL_FMAN_TEST
 struct pcd_range {
 	uint32_t			 base;
@@ -56,6 +51,11 @@ struct pcd_range {
 };
 #endif /* CONFIG_FSL_FMAN_TEST */
 
+struct dpa_percpu_priv_s {
+	struct list_head	fd_list;
+	size_t			count, max;
+};
+
 struct dpa_priv_s {
 	struct net_device	*net_dev;
 	struct list_head	 dpa_bp_list;
@@ -71,7 +71,7 @@ struct dpa_priv_s {
 	struct mac_device	*mac_dev;
 
 	struct work_struct	 fd_work;
-	struct fd_list_head	*fd_list;
+	struct dpa_percpu_priv_s	*percpu_priv;
 
 	uint32_t		 msg_enable;	/* net_device message level */
 };
-- 
1.6.5.2

