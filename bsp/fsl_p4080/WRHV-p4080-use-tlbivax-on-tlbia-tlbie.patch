From 75b471252039f5d14dce88fb22e75d171898548e Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Wed, 20 Jan 2010 03:00:30 -0800
Subject: [PATCH 2/3] WRHV/p4080: use tlbivax on tlbia/tlbie

Since we cannot access the LPID in the guest OS, we must modify the way
that the tlb is managed. The current approach is to always invalidate all
entries regardless of LPID.

Note: there are some issues about IPI implemnentation on the hypervisor
so this commit also drops IPI + tlbix.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/kernel/wrhv_misc_32.S |   46 +++++++++++++++++++++++++----------
 1 files changed, 33 insertions(+), 13 deletions(-)

diff --git a/arch/powerpc/kernel/wrhv_misc_32.S b/arch/powerpc/kernel/wrhv_misc_32.S
index b9aeaa0..3e13033 100644
--- a/arch/powerpc/kernel/wrhv_misc_32.S
+++ b/arch/powerpc/kernel/wrhv_misc_32.S
@@ -43,6 +43,7 @@ _GLOBAL(wrhv_int_unlock)
 /*
  * Flush MMU TLB
  */
+#define TLBIVAX_CODE 0x7c002624
 _GLOBAL(paravirt_tlbia)
 #ifndef	CONFIG_PPC85xx_VT_MODE
 	lis	r0, VBI_SYS_tlb_flush@h
@@ -63,10 +64,21 @@ _GLOBAL(paravirt_tlbia)
         bne     11b
 #endif  /* CONFIG_SMP */
 
-	/* tlbilx with T = 0 */
-	.long   0x7c001824
-        msync
-	isync
+	/* FIXME: Currently we cannot get our LPID so let's assume the hypervisor 
+	 * will update this for us.
+	 */
+	/*  The HY will check which privileged instruction trap privileged 
+	 *  exception via r3. 
+	 */
+	lis     r3, TLBIVAX_CODE@h
+	ori     r3, r3, TLBIVAX_CODE@l
+	/* Invalidate all entries in TLB0 */
+	li      r4, 0x04
+	tlbivax 0,4
+	/* Invalidate all entries in TLB1 */
+	li      r4, 0x0c
+	tlbivax 0,4
+
 #ifdef CONFIG_SMP
         li      r0, 0
         stw     r0, 0(r8)
@@ -97,16 +109,24 @@ _GLOBAL(paravirt_tlbie)
 	stwcx.	r5, 0, r8
 	bne	11b
 #endif	/* CONFIG_SMP */
+	
+	/* FIXME: Use tlbia as tlbie temporarily since there are some issue on IPIs.
+	 */
+	/* FIXME: Currently we cannot get our LPID so let's assume the hypervisor 
+	 * will update this for us.
+	 */
+	/*  The HY will check which privileged instruction trap privileged 
+	 *  exception via r3. 
+	 */
+	lis     r3, TLBIVAX_CODE@h
+	ori     r3, r3, TLBIVAX_CODE@l
+	/* Invalidate all entries in TLB0 */
+	li      r4, 0x04
+	tlbivax 0,4
+	/* Invalidate all entries in TLB1 */
+	li      r4, 0x0c
+	tlbivax 0,4
 
-	mfspr   r0,SPRN_MAS6
-	rlwimi  r0,r4,16,8,15
-	mtspr   SPRN_MAS6,r0
-
-	li	r0,0
-	/* tlbilx with T = 3 */
-        .long	0x7c601824
-	msync
-	isync
 #if defined(CONFIG_SMP)
 	li	r0, 0
 	stw	r0, 0(r8)
-- 
1.6.5.2

