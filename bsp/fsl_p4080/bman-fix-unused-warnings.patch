From 12664b4c58b3e39819b5998c376ed39b6723f1d6 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Mon, 9 Aug 2010 18:47:53 +0800
Subject: [PATCH] bman: fix "unused" warnings.

From FSL vendor SDK 2.x.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/hwalloc/bman_low.c |   57 +++++++++++++++++++------------------------
 1 files changed, 25 insertions(+), 32 deletions(-)

diff --git a/drivers/hwalloc/bman_low.c b/drivers/hwalloc/bman_low.c
index cd12eea..42171ef 100644
--- a/drivers/hwalloc/bman_low.c
+++ b/drivers/hwalloc/bman_low.c
@@ -118,11 +118,6 @@ static inline u8 cyc_diff(u8 ringsize, u8 first, u8 last)
 /* --------------- */
 /* --- RCR API --- */
 
-/* It's safer to code in terms of the 'rcr' object than the 'portal' object,
- * because the latter runs the risk of copy-n-paste errors from other code where
- * we could manipulate some other structure within 'portal'. */
-#define RCR_API_START()		register struct bm_rcr *rcr = &portal->rcr
-
 /* Bit-wise logic to wrap a ring pointer by clearing the "carry bit" */
 #define RCR_CARRYCLEAR(p) \
 	(void *)((unsigned long)(p) & (~(unsigned long)(BM_RCR_SIZE << 6)))
@@ -148,7 +143,10 @@ static inline void RCR_INC(struct bm_rcr *rcr)
 int bm_rcr_init(struct bm_portal *portal, enum bm_rcr_pmode pmode,
 		enum bm_rcr_cmode cmode)
 {
-	RCR_API_START();
+	/* This use of 'register', as well as all other occurances, is because
+	 * it has been observed to generate much faster code with gcc than is
+	* otherwise the case. */
+	register struct bm_rcr *rcr = &portal->rcr;
 	u32 cfg;
 	u8 pi;
 
@@ -174,7 +172,7 @@ EXPORT_SYMBOL(bm_rcr_init);
 
 void bm_rcr_finish(struct bm_portal *portal)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	u8 pi = bm_in(RCR_PI_CINH) & (BM_RCR_SIZE - 1);
 	u8 ci = bm_in(RCR_CI_CINH) & (BM_RCR_SIZE - 1);
 	BM_ASSERT(!rcr->busy);
@@ -190,7 +188,7 @@ EXPORT_SYMBOL(bm_rcr_finish);
 
 struct bm_rcr_entry *bm_rcr_start(struct bm_portal *portal)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	BM_ASSERT(!rcr->busy);
 	if (!rcr->available)
 		return NULL;
@@ -204,7 +202,7 @@ EXPORT_SYMBOL(bm_rcr_start);
 
 void bm_rcr_abort(struct bm_portal *portal)
 {
-	RCR_API_START();
+	__maybe_unused register struct bm_rcr *rcr = &portal->rcr;
 	BM_ASSERT(rcr->busy);
 #ifdef CONFIG_FSL_BMAN_CHECKING
 	rcr->busy = 0;
@@ -214,7 +212,7 @@ EXPORT_SYMBOL(bm_rcr_abort);
 
 struct bm_rcr_entry *bm_rcr_pend_and_next(struct bm_portal *portal, u8 myverb)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	BM_ASSERT(rcr->busy);
 	BM_ASSERT(rcr->pmode != bm_rcr_pvb);
 	if (rcr->available == 1)
@@ -230,7 +228,7 @@ EXPORT_SYMBOL(bm_rcr_pend_and_next);
 
 void bm_rcr_pci_commit(struct bm_portal *portal, u8 myverb)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	BM_ASSERT(rcr->busy);
 	BM_ASSERT(rcr->pmode == bm_rcr_pci);
 	rcr->cursor->__dont_write_directly__verb = myverb | rcr->vbit;
@@ -246,7 +244,7 @@ EXPORT_SYMBOL(bm_rcr_pci_commit);
 
 void bm_rcr_pce_prefetch(struct bm_portal *portal)
 {
-	RCR_API_START();
+	 __maybe_unused register struct bm_rcr *rcr = &portal->rcr;
 	BM_ASSERT(rcr->pmode == bm_rcr_pce);
 	bm_cl_invalidate(RCR_PI);
 	bm_cl_touch_rw(RCR_PI);
@@ -255,7 +253,7 @@ EXPORT_SYMBOL(bm_rcr_pce_prefetch);
 
 void bm_rcr_pce_commit(struct bm_portal *portal, u8 myverb)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	BM_ASSERT(rcr->busy);
 	BM_ASSERT(rcr->pmode == bm_rcr_pce);
 	rcr->cursor->__dont_write_directly__verb = myverb | rcr->vbit;
@@ -271,7 +269,7 @@ EXPORT_SYMBOL(bm_rcr_pce_commit);
 
 void bm_rcr_pvb_commit(struct bm_portal *portal, u8 myverb)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	struct bm_rcr_entry *rcursor;
 	BM_ASSERT(rcr->busy);
 	BM_ASSERT(rcr->pmode == bm_rcr_pvb);
@@ -289,7 +287,7 @@ EXPORT_SYMBOL(bm_rcr_pvb_commit);
 
 u8 bm_rcr_cci_update(struct bm_portal *portal)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	u8 diff, old_ci = rcr->ci;
 	BM_ASSERT(rcr->cmode == bm_rcr_cci);
 	rcr->ci = bm_in(RCR_CI_CINH) & (BM_RCR_SIZE - 1);
@@ -301,7 +299,7 @@ EXPORT_SYMBOL(bm_rcr_cci_update);
 
 void bm_rcr_cce_prefetch(struct bm_portal *portal)
 {
-	RCR_API_START();
+	__maybe_unused register struct bm_rcr *rcr = &portal->rcr;
 	BM_ASSERT(rcr->cmode == bm_rcr_cce);
 	bm_cl_touch_ro(RCR_CI);
 }
@@ -309,7 +307,7 @@ EXPORT_SYMBOL(bm_rcr_cce_prefetch);
 
 u8 bm_rcr_cce_update(struct bm_portal *portal)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	u8 diff, old_ci = rcr->ci;
 	BM_ASSERT(rcr->cmode == bm_rcr_cce);
 	rcr->ci = bm_cl_in(RCR_CI) & (BM_RCR_SIZE - 1);
@@ -322,14 +320,14 @@ EXPORT_SYMBOL(bm_rcr_cce_update);
 
 u8 bm_rcr_get_ithresh(struct bm_portal *portal)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	return rcr->ithresh;
 }
 EXPORT_SYMBOL(bm_rcr_get_ithresh);
 
 void bm_rcr_set_ithresh(struct bm_portal *portal, u8 ithresh)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	rcr->ithresh = ithresh;
 	bm_out(RCR_ITR, ithresh);
 }
@@ -337,14 +335,14 @@ EXPORT_SYMBOL(bm_rcr_set_ithresh);
 
 u8 bm_rcr_get_avail(struct bm_portal *portal)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	return rcr->available;
 }
 EXPORT_SYMBOL(bm_rcr_get_avail);
 
 u8 bm_rcr_get_fill(struct bm_portal *portal)
 {
-	RCR_API_START();
+	register struct bm_rcr *rcr = &portal->rcr;
 	return BM_RCR_SIZE - 1 - rcr->available;
 }
 EXPORT_SYMBOL(bm_rcr_get_fill);
@@ -353,14 +351,9 @@ EXPORT_SYMBOL(bm_rcr_get_fill);
 /* ------------------------------ */
 /* --- Management command API --- */
 
-/* It's safer to code in terms of the 'mc' object than the 'portal' object,
- * because the latter runs the risk of copy-n-paste errors from other code where
- * we could manipulate some other structure within 'portal'. */
-#define MC_API_START()		register struct bm_mc *mc = &portal->mc
-
 int bm_mc_init(struct bm_portal *portal)
 {
-	MC_API_START();
+	register struct bm_mc *mc = &portal->mc;
 	if (__bm_portal_bind(portal, BM_BIND_MC))
 		return -EBUSY;
 	mc->cr = ptr_OR(portal->addr.addr_ce, CL_CR);
@@ -377,7 +370,7 @@ EXPORT_SYMBOL(bm_mc_init);
 
 void bm_mc_finish(struct bm_portal *portal)
 {
-	MC_API_START();
+	__maybe_unused register struct bm_mc *mc = &portal->mc;
 	BM_ASSERT(mc->state == mc_idle);
 #ifdef CONFIG_FSL_BMAN_CHECKING
 	if (mc->state != mc_idle)
@@ -389,7 +382,7 @@ EXPORT_SYMBOL(bm_mc_finish);
 
 struct bm_mc_command *bm_mc_start(struct bm_portal *portal)
 {
-	MC_API_START();
+	register struct bm_mc *mc = &portal->mc;
 	BM_ASSERT(mc->state == mc_idle);
 #ifdef CONFIG_FSL_BMAN_CHECKING
 	mc->state = mc_user;
@@ -401,7 +394,7 @@ EXPORT_SYMBOL(bm_mc_start);
 
 void bm_mc_abort(struct bm_portal *portal)
 {
-	MC_API_START();
+	__maybe_unused register struct bm_mc *mc = &portal->mc;
 	BM_ASSERT(mc->state == mc_user);
 #ifdef CONFIG_FSL_BMAN_CHECKING
 	mc->state = mc_idle;
@@ -411,7 +404,7 @@ EXPORT_SYMBOL(bm_mc_abort);
 
 void bm_mc_commit(struct bm_portal *portal, u8 myverb)
 {
-	MC_API_START();
+	register struct bm_mc *mc = &portal->mc;
 	BM_ASSERT(mc->state == mc_user);
 	dcbi(mc->rr + mc->rridx);
 	lwsync();
@@ -426,7 +419,7 @@ EXPORT_SYMBOL(bm_mc_commit);
 
 struct bm_mc_result *bm_mc_result(struct bm_portal *portal)
 {
-	MC_API_START();
+	register struct bm_mc *mc = &portal->mc;
 	struct bm_mc_result *rr = mc->rr + mc->rridx;
 	BM_ASSERT(mc->state == mc_hw);
 	/* The inactive response register's verb byte always returns zero until
-- 
1.6.0.3

