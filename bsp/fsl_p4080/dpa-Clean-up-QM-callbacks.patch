From 84772bacd93a75b09d89dd6fd5008bbcc57385ca Mon Sep 17 00:00:00 2001
From: Andy Fleming <afleming@freescale.com>
Date: Tue, 11 May 2010 19:35:05 -0400
Subject: [PATCH 07/11] dpa: Clean up QM callbacks

We registered a bunch of callbacks for conditions that can never occur,
and then noted that they should never occur by using BUG().  This
perturbed some people.  There's really no reason for us to catch most of
these errors, so for those (dc_ern, rx ern, tx dqrr), we just remove the
callbacks.  We also fix the tx error dqrr callback to actually free the
skb, and eliminate any BUG_ON() in the error handlers which aren't
important.

Signed-off-by: Andy Fleming <afleming@freescale.com>
[Original was taken from Freescale p4080 SDK 2.1 ISO image. Patch
"kernel-2.6.30-dpa-Clean-up-QM-callbacks.patch".
Apply manually to kernel 2.6.34]
Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 drivers/net/dpa/dpa.c |  323 +++----------------------------------------------
 1 files changed, 20 insertions(+), 303 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index 7b73ed6..3e9156c 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -618,63 +618,6 @@ ingress_rx_error_dqrr(struct qman_portal		*portal,
 	return ingress_dqrr(portal, fq, dq, RX, 0);
 }
 
-static void ingress_rx_error_ern(struct qman_portal		*portal,
-				 struct qman_fq			*fq,
-				 const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_rx_error_dc_ern(struct qman_portal		*portal,
-				    struct qman_fq		*fq,
-				    const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_rx_error_fqs(struct qman_portal		*portal,
-				 struct qman_fq			*fq,
-				 const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
 static enum qman_cb_dqrr_result __hot
 ingress_rx_default_dqrr(struct qman_portal		*portal,
 			struct qman_fq			*fq,
@@ -737,63 +680,6 @@ ingress_rx_default_dqrr(struct qman_portal		*portal,
 	return ingress_dqrr(portal, fq, dq, RX, 1);
 }
 
-static void ingress_rx_default_ern(struct qman_portal		*portal,
-				   struct qman_fq		*fq,
-				   const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_rx_default_dc_ern(struct qman_portal	*portal,
-			      struct qman_fq		*fq,
-			      const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_rx_default_fqs(struct qman_portal		*portal,
-				   struct qman_fq		*fq,
-				   const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_rx_status(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
 static enum qman_cb_dqrr_result
 ingress_tx_error_dqrr(struct qman_portal		*portal,
 		      struct qman_fq			*fq,
@@ -821,63 +707,6 @@ ingress_tx_error_dqrr(struct qman_portal		*portal,
 	return ingress_dqrr(portal, fq, dq, TX, 0);
 }
 
-static void ingress_tx_error_ern(struct qman_portal		*portal,
-				 struct qman_fq			*fq,
-				 const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_tx_error_dc_ern(struct qman_portal		*portal,
-				    struct qman_fq		*fq,
-				    const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_tx_error_fqs(struct qman_portal		*portal,
-				 struct qman_fq			*fq,
-				 const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
 static enum qman_cb_dqrr_result __hot
 ingress_tx_default_dqrr(struct qman_portal		*portal,
 			struct qman_fq			*fq,
@@ -905,84 +734,6 @@ ingress_tx_default_dqrr(struct qman_portal		*portal,
 	return ingress_dqrr(portal, fq, dq, TX, 1);
 }
 
-static void ingress_tx_default_ern(struct qman_portal		*portal,
-				   struct qman_fq		*fq,
-				   const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_tx_default_dc_ern(struct qman_portal	*portal,
-				      struct qman_fq		*fq,
-				      const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void ingress_tx_default_fqs(struct qman_portal		*portal,
-				   struct qman_fq		*fq,
-				   const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static enum qman_cb_dqrr_result egress_dqrr(struct qman_portal		*portal,
-					    struct qman_fq		*fq,
-					    const struct qm_dqrr_entry	*dq)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-
-	return qman_cb_dqrr_consume;
-}
-
 static void egress_ern(struct qman_portal	*portal,
 		       struct qman_fq		*fq,
 		       const struct qm_mr_entry	*msg)
@@ -1024,65 +775,23 @@ static void egress_ern(struct qman_portal	*portal,
 		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
 }
 
-static void egress_dc_ern(struct qman_portal		*portal,
-			  struct qman_fq		*fq,
-			  const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
-static void egress_fqs(struct qman_portal	*portal,
-		       struct qman_fq		*fq,
-		       const struct qm_mr_entry	*msg)
-{
-	const struct net_device	*net_dev;
-	const struct dpa_priv_s	*priv;
-
-	net_dev = ((struct dpa_fq *)fq)->net_dev;
-	priv = (typeof(priv))netdev_priv(net_dev);
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
-
-	BUG();
-
-	if (netif_msg_tx_err(priv))
-		cpu_netdev_dbg(net_dev, "%s:%s() ->\n", __file__, __func__);
-}
-
 static const struct qman_fq ingress_fqs[][2] __devinitconst = {
 	[RX] = {
 		/* Error */
-		{.cb = {ingress_rx_error_dqrr, ingress_rx_error_ern,
-			ingress_rx_error_dc_ern, ingress_rx_error_fqs} },
+		{.cb = {ingress_rx_error_dqrr, NULL, NULL, NULL} },
 		 /* Default */
-		{.cb = {ingress_rx_default_dqrr, ingress_rx_default_ern,
-			ingress_rx_default_dc_ern, ingress_rx_default_fqs} }
+		{.cb = {ingress_rx_default_dqrr, NULL, NULL, NULL} }
 	},
 	[TX] = {
 		/* Error */
-		{.cb = {ingress_tx_error_dqrr, ingress_tx_error_ern,
-			ingress_tx_error_dc_ern, ingress_tx_error_fqs} },
+		{.cb = {ingress_tx_error_dqrr, NULL, NULL, NULL} },
 		 /* Default */
-		{.cb = {ingress_tx_default_dqrr, ingress_tx_default_ern,
-			ingress_tx_default_dc_ern, ingress_tx_default_fqs} }
+		{.cb = {ingress_tx_default_dqrr, NULL, NULL, NULL} }
 	}
 };
 
 static const struct qman_fq _egress_fqs __devinitconst = {
-	.cb = {egress_dqrr, egress_ern, egress_dc_ern, egress_fqs}
+	.cb = {NULL, egress_ern, NULL, NULL}
 };
 
 static struct net_device_stats * __cold
@@ -1159,15 +868,13 @@ static void _dpa_rx_error(struct net_device		*net_dev,
 			  struct dpa_percpu_priv_s	*percpu_priv,
 			  const struct dpa_fd		*dpa_fd)
 {
-	int	_errno;
+	int _errno;
 
 	if (netif_msg_rx_err(priv))
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
 			       __file__, __LINE__, __func__,
 			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
 
-	BUG_ON((dpa_fd->fd.status & FM_FD_STAT_ERRORS) == 0);
-
 	percpu_priv->stats.rx_errors++;
 	percpu_priv->stats.rx_packets++;
 	percpu_priv->stats.rx_bytes += dpa_fd_length(&dpa_fd->fd);
@@ -1177,7 +884,6 @@ static void _dpa_rx_error(struct net_device		*net_dev,
 		dump_stack();
 		panic("Can't release buffer to the BM during RX\n");
 	}
-
 }
 
 static void _dpa_tx_error(struct net_device		*net_dev,
@@ -1185,16 +891,27 @@ static void _dpa_tx_error(struct net_device		*net_dev,
 			  struct dpa_percpu_priv_s	*percpu_priv,
 			  const struct dpa_fd		*dpa_fd)
 {
+	struct sk_buff *skb;
+
 	if (netif_msg_tx_err(priv))
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
 			       __file__, __LINE__, __func__,
 			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
 
-	BUG_ON((dpa_fd->fd.status & FM_FD_STAT_ERRORS) == 0);
-
 	percpu_priv->stats.tx_errors++;
 
-	BUG();
+	skb = *(typeof(&skb))bus_to_virt(dpa_fd->fd.addr_lo);
+
+	dma_unmap_single(net_dev->dev.parent, dpa_fd->fd.addr_lo,
+			 skb_headlen(skb), DMA_TO_DEVICE);
+
+	if (skb_queue_len(&percpu_priv->rx_recycle) < DEFAULT_COUNT &&
+	    skb_recycle_check(skb, NET_IP_ALIGN + ETH_HLEN +
+			      NN_ALLOCATED_SPACE(net_dev) +
+			      TT_ALLOCATED_SPACE(net_dev)))
+		__skb_queue_head(&percpu_priv->rx_recycle, skb);
+	else
+		dev_kfree_skb(skb);
 }
 
 static void __hot _dpa_rx(struct net_device		*net_dev,
-- 
1.6.5.2

