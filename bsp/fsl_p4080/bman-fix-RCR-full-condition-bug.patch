From c029a771cee79815119b5edf668af499327cb530 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Tue, 3 Aug 2010 16:16:37 +0800
Subject: [PATCH 22/22] bman: fix RCR-full condition bug.

It is from FSL vendor SDK 2.x.

The try_rel_start() and __try_rel() functions were the wrong
way round. The former is a wrapper for the latter, which
handles setting the interrupt threshold to capture when a
full RCR ceases to be full. Instead, the latter was being
used and the interrupt threshold was never being set, which
could lead to stalls.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/hwalloc/bman_high.c |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/hwalloc/bman_high.c b/drivers/hwalloc/bman_high.c
index 86b00fa..eed7cbd 100644
--- a/drivers/hwalloc/bman_high.c
+++ b/drivers/hwalloc/bman_high.c
@@ -490,7 +490,7 @@ static noinline void rel_set_thresh(struct bman_portal *p, int check)
 
 /* Used as a wait_event() expression. If it returns non-NULL, any lock will
  * remain held. */
-static struct bm_rcr_entry *try_rel_start(struct bman_portal **p)
+static struct bm_rcr_entry *__try_rel(struct bman_portal **p)
 {
 	struct bm_rcr_entry *r;
 	struct bm_portal *lowp;
@@ -512,9 +512,9 @@ static struct bm_rcr_entry *try_rel_start(struct bman_portal **p)
 	return r;
 }
 
-static inline struct bm_rcr_entry *__try_rel(struct bman_portal **p)
+static inline struct bm_rcr_entry *try_rel_start(struct bman_portal **p)
 {
-	struct bm_rcr_entry *rcr = try_rel_start(p);
+	struct bm_rcr_entry *rcr = __try_rel(p);
 	if (unlikely(!rcr))
 		rel_set_thresh(*p, 1);
 	return rcr;
-- 
1.6.5.2

