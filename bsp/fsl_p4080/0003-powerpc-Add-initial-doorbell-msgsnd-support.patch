From 962a85a8cafb1b8ea30410bc929923a646c29cfd Mon Sep 17 00:00:00 2001
From: Kumar Gala <galak@kernel.crashing.org>
Date: Fri, 9 Jan 2009 13:13:17 -0600
Subject: [PATCH 03/77] powerpc: Add initial doorbell/msgsnd support

Original patch taken from rev 1.1 board support ISO image for fsl_p4080.
[Known as P4080SW_01_01_00B-ltib.iso]

Add initial support for using doorbell's for IPI on e500mc.  Currently
this code is commented out, to emable change smp_ops in platforms/85xx/smp.c

This is based on the code from Becky done for Altair/e700.

Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
Integrated-by: Liang Li <liang.li@windriver.com>
---
 arch/powerpc/kernel/head_fsl_booke.S |   11 ++++++++++-
 arch/powerpc/kernel/traps.c          |   21 +++++++++++++++++++++
 arch/powerpc/platforms/85xx/smp.c    |   29 +++++++++++++++++++++++++++++
 3 files changed, 60 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/kernel/head_fsl_booke.S b/arch/powerpc/kernel/head_fsl_booke.S
index 26a4fe7..99ecccb 100644
--- a/arch/powerpc/kernel/head_fsl_booke.S
+++ b/arch/powerpc/kernel/head_fsl_booke.S
@@ -1036,7 +1036,7 @@ END_FTR_SECTION_IFSET(CPU_FTR_BIG_PHYS)
 	/* Performance Monitor */
 	EXCEPTION(0x2060, PerformanceMonitor, performance_monitor_exception, EXC_XFER_STD)
 
-	EXCEPTION(0x2070, Doorbell, unknown_exception, EXC_XFER_STD)
+	EXCEPTION(0x2070, Doorbell, doorbell_exception, EXC_XFER_STD)
 
 	/* Debug Interrupt */
 	DEBUG_DEBUG_EXCEPTION
@@ -1193,6 +1193,15 @@ _GLOBAL(__setup_e500mc_ivors)
 	sync
 	blr
 
+#define MSGSND(r) .long (0x7c00019c | (r & 0x1f) << 11)
+
+#ifdef CONFIG_SMP
+_GLOBAL(send_lowpri_doorbell)
+	/* r3 = target or BROADCAST */
+	MSGSND(r3)
+	blr
+#endif
+
 /*
  * extern void loadcam_entry(unsigned int index)
  *
diff --git a/arch/powerpc/kernel/traps.c b/arch/powerpc/kernel/traps.c
index 9c98eb0..f28a44b 100644
--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -1176,6 +1176,27 @@ void vsx_assist_exception(struct pt_regs *regs)
 }
 #endif /* CONFIG_VSX */
 
+#ifdef CONFIG_PPC_E500MC
+extern unsigned long mpc85xx_smp_message[NR_CPUS];
+
+void doorbell_exception(struct pt_regs *regs)
+{
+#ifdef CONFIG_SMP
+	int cpu = smp_processor_id();
+	int msg;
+
+	if (num_online_cpus() < 2)
+		return;
+
+	for (msg = 0; msg < 4; msg++)
+		if (test_and_clear_bit(msg, &mpc85xx_smp_message[cpu]))
+			smp_message_recv(msg);
+#else /* BGILL - figure out what to do here on single-core */
+	printk(KERN_WARNING "Received doorbell on non-smp system\n");
+#endif
+}
+#endif
+
 #ifdef CONFIG_FSL_BOOKE
 void CacheLockingException(struct pt_regs *regs, unsigned long address,
 			   unsigned long error_code)
diff --git a/arch/powerpc/platforms/85xx/smp.c b/arch/powerpc/platforms/85xx/smp.c
index 6167e03..f212dd2 100644
--- a/arch/powerpc/platforms/85xx/smp.c
+++ b/arch/powerpc/platforms/85xx/smp.c
@@ -131,6 +131,35 @@ smp_85xx_setup_cpu(int cpu_nr)
 	mtspr(SPRN_TCR, TCR_DIE);
 }
 
+#define DOORBELL_MSG_BROADCAST		(0x04000000)		/* broadcast msg */
+#define DOORBELL_MSG_CRITICAL		(0x08000000)		/* critical priority message */
+
+unsigned long mpc85xx_smp_message[NR_CPUS];
+extern void send_lowpri_doorbell(unsigned int x);
+
+static void smp_mpc85xx_message_pass(int target, int msg)
+{
+	int i;
+
+	if(target < NR_CPUS) {
+		set_bit(msg, &mpc85xx_smp_message[target]);
+		send_lowpri_doorbell(target);
+	}
+	else if(target == MSG_ALL_BUT_SELF) {
+		for_each_online_cpu(i) {
+			if (i == smp_processor_id())
+				continue;
+			set_bit(msg, &mpc85xx_smp_message[i]);
+			send_lowpri_doorbell(i);
+		}
+	}
+	else { /* target == MSG_ALL */
+		for_each_online_cpu(i)
+			set_bit(msg, &mpc85xx_smp_message[i]);
+		send_lowpri_doorbell(DOORBELL_MSG_BROADCAST);
+	}
+}
+
 struct smp_ops_t smp_85xx_ops = {
 	.message_pass = smp_mpic_message_pass,
 	.probe = smp_mpic_probe,
-- 
1.6.5.2

