From bba9bb64de819df5b5a24f9355f8e5105fdf3a1a Mon Sep 17 00:00:00 2001
From: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Date: Wed, 11 Nov 2009 21:27:01 -0500
Subject: [PATCH 100/148] qman: workaround rev1 bug (scheduling underflow).

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
[Applied FSL SDK 2.0.3 patch
"kernel-2.6.30-qman-workaround-rev1-bug-scheduling-underflo.patch"]
Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 drivers/hwqueue/Kconfig       |    6 ++++++
 drivers/hwqueue/qman_config.c |   40 +++++++++++++++++++++++++++++-----------
 2 files changed, 35 insertions(+), 11 deletions(-)

diff --git a/drivers/hwqueue/Kconfig b/drivers/hwqueue/Kconfig
index ed80ced..c5212ea 100644
--- a/drivers/hwqueue/Kconfig
+++ b/drivers/hwqueue/Kconfig
@@ -170,6 +170,12 @@ config FSL_QMAN_BUG_FASTTRACK
 	depends on FSL_QMAN_CONFIG
 	default y
 
+# Workaround for rev1 h/w bug with respect to class-scheduling weights.
+config FSL_QMAN_BUG_CSW
+	bool
+	depends on FSL_QMAN_CONFIG
+	default y
+
 endif # FSL_QMAN
 
 endmenu
diff --git a/drivers/hwqueue/qman_config.c b/drivers/hwqueue/qman_config.c
index e1fbf5a..9ad6cbd 100644
--- a/drivers/hwqueue/qman_config.c
+++ b/drivers/hwqueue/qman_config.c
@@ -92,7 +92,9 @@ enum qm_wq_class {
 	qm_wq_fman0 = 2,
 	qm_wq_fman1 = 3,
 	qm_wq_caam = 4,
-	qm_wq_pme = 5
+	qm_wq_pme = 5,
+	qm_wq_first = qm_wq_portal,
+	qm_wq_last = qm_wq_pme
 };
 
 /* Follows FQD_[BARE|BAR|AR] and PFDR_[BARE|BAR|AR] */
@@ -211,16 +213,6 @@ static void qm_get_pfdr_free_pool(struct qman *qm, u32 *head, u32 *tail)
 	*tail = qm_in(PFDR_FP_TAIL);
 }
 
-static void qm_set_wq_scheduling(struct qman *qm, enum qm_wq_class wq_class,
-			u8 cs_elev, u8 csw2, u8 csw3, u8 csw4, u8 csw5,
-			u8 csw6, u8 csw7)
-{
-	qm_out(WQ_CS_CFG(wq_class), ((cs_elev & 0xff) << 24) |
-		((csw2 & 0x7) << 20) | ((csw3 & 0x7) << 16) |
-		((csw4 & 0x7) << 12) | ((csw5 & 0x7) << 8) |
-		((csw6 & 0x7) << 4) | (csw7 & 0x7));
-}
-
 static void qm_set_default_wq(struct qman *qm, u16 wqid)
 {
 	qm_out(WQ_DEF_ENC_WQID, wqid);
@@ -298,6 +290,29 @@ static void qm_set_congestion_config(struct qman *qm, u16 pres)
 
 #endif
 
+static void qm_set_wq_scheduling(struct qman *qm, enum qm_wq_class wq_class,
+			u8 cs_elev, u8 csw2, u8 csw3, u8 csw4, u8 csw5,
+			u8 csw6, u8 csw7)
+{
+#ifdef CONFIG_FSL_QMAN_BUG_CSW
+#define csw(x) \
+do { \
+	if (++x == 8) \
+		x = 7; \
+} while (0)
+	csw(csw2);
+	csw(csw3);
+	csw(csw4);
+	csw(csw5);
+	csw(csw6);
+	csw(csw7);
+#endif
+	qm_out(WQ_CS_CFG(wq_class), ((cs_elev & 0xff) << 24) |
+		((csw2 & 0x7) << 20) | ((csw3 & 0x7) << 16) |
+		((csw4 & 0x7) << 12) | ((csw5 & 0x7) << 8) |
+		((csw6 & 0x7) << 4) | (csw7 & 0x7));
+}
+
 static void qm_set_hid(struct qman *qm)
 {
 #ifdef CONFIG_FSL_QMAN_BUG_FASTTRACK
@@ -486,6 +501,9 @@ static int __init fsl_qman_init(struct device_node *node)
 	qm_set_corenet_initiator(qm);
 	/* HID settings */
 	qm_set_hid(qm);
+	/* Set scheduling weights to defaults */
+	for (ret = qm_wq_first; ret <= qm_wq_last; ret++)
+		qm_set_wq_scheduling(qm, ret, 0, 0, 0, 0, 0, 0, 0);
 	/* Workaround for bug 3594: "PAMU Address translation exception during
 	 * qman dqrr stashing". */
 	if (sizeof(dma_addr_t) <= sizeof(u32))
-- 
1.6.5.2

