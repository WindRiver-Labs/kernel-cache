From 0ffdc3a02a0b1f747f781dee8addb609de11f94b Mon Sep 17 00:00:00 2001
From: Shlomi Gridish <gridish@freescale.com>
Date: Tue, 21 Jul 2009 19:02:30 +0300
Subject: [PATCH 018/148] FMD5.1

1. Fixing Bugzilla BUG #3698
2. Fixing BUGs in "clear PCD" functionality.
3. Updates for FM-test application

Signed-off-by: Shlomi Gridish <gridish@freescale.com>
[Cleanly applied the FSL SDK 2.0.3 patch:
"0001-FMD5.1.patch"]
Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 drivers/net/dpa/NetCommSw/Peripherals/FM/HC/hc.c   |   38 +++------
 .../net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_kg.c   |    4 +-
 .../net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c  |    4 +
 .../dpa/NetCommSw/Peripherals/FM/Port/fm_port.c    |   28 +-----
 .../dpa/NetCommSw/Peripherals/FM/inc/fm_common.h   |    2 +-
 .../kernel/2.6/wrappers/Peripherals/FM/fman_test.c |   88 +++++++++++++++++++-
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c |   34 +++-----
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h |    9 +-
 drivers/net/dpa/mac-api.c                          |   12 ---
 9 files changed, 125 insertions(+), 94 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/HC/hc.c b/drivers/net/dpa/NetCommSw/Peripherals/FM/HC/hc.c
index 523ff1f..f5214aa 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/HC/hc.c
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/HC/hc.c
@@ -190,7 +190,7 @@ t_Error     FmHcPortDeletePCD(t_Handle h_FmHc, t_Handle h_FmPort);
 
 t_Error     FmHcPortPcdKgModifyClsPlanGrp (t_Handle h_FmHc, t_Handle h_FmPort, bool useClsPlan, t_Handle h_NewClsPlanGrp);
 t_Error     FmHcPortPcdKgBindSchemes(t_Handle h_FmHc , t_Handle h_FmPort, t_FmPcdPortSchemesParams *p_PortScheme);
-t_Error     FmHcPortPcdKgUnbindSchemes(t_Handle h_FmHc , t_Handle h_FmPort, t_FmPcdPortSchemesParams *p_PortScheme);
+t_Error     FmHcPortPcdKgUnbindSchemes(t_Handle h_FmHc , t_Handle h_FmPort);
 
 
 static t_Error KgHcSetClsPlan(t_FmHc *p_FmHc, t_FmPcdKgInterModuleClsPlanSet *p_Set)
@@ -357,7 +357,7 @@ static t_Error HcPortPcdKgBindSchemes(t_FmHc *p_FmHc , t_Handle h_FmPort,t_FmPcd
     int                                     i;
 
     /* we use this routine just to get the port parameters such as HW id, netEnv etc. */
-    FmPortGetPortSchemeBindParams(h_FmPort, &schemeBind);
+    FmPortGetPortSchemeBindParams(h_FmPort, &schemeBind, FALSE);
 
     /* overwrite port params with the schemes we want removed */
     schemeBind.numOfSchemes = p_PortScheme->numOfSchemes;
@@ -1235,21 +1235,15 @@ t_Error FmHcPortPcdKgBindSchemes(t_Handle h_FmHc , t_Handle h_FmPort,t_FmPcdPort
     return HcPortPcdKgBindSchemes(h_FmHc, h_FmPort, p_PortScheme);
 }
 
-t_Error FmHcPortPcdKgUnbindSchemes(t_Handle h_FmHc , t_Handle h_FmPort,t_FmPcdPortSchemesParams *p_PortScheme)
+t_Error FmHcPortPcdKgUnbindSchemes(t_Handle h_FmHc , t_Handle h_FmPort)
 {
     t_FmHc                                  *p_FmHc = (t_FmHc*)h_FmHc;
     uint32_t                                spReg;
     t_Error                                 err;
     t_FmPcdKgInterModuleBindPortToSchemes   schemeBind;
-    int                                     i;
 
     /* we use this routine just to get the port parameters such as HW id, netEnv etc. */
-    FmPortGetPortSchemeBindParams(h_FmPort, &schemeBind);
-
-    /* overwrite port params with the schemes we want removed */
-    schemeBind.numOfSchemes = p_PortScheme->numOfSchemes;
-    for (i=0; i<schemeBind.numOfSchemes; i++)
-        schemeBind.schemesIds[i] = (uint8_t)(CAST_POINTER_TO_UINT32(p_PortScheme->h_Schemes[i])-1);
+    FmPortGetPortSchemeBindParams(h_FmPort, &schemeBind, TRUE);
 
     err = FmPcdKgBuildBindPortToSchemes(p_FmHc->h_FmPcd, &schemeBind, &spReg, FALSE);
     if(err)
@@ -1268,7 +1262,7 @@ t_Error FmHcPortSetPCD(t_Handle h_FmHc, t_Handle h_FmPort, t_FmPortPcdParams *p_
 {
     t_FmHc                                  *p_FmHc = (t_FmHc*)h_FmHc;
     t_Error                                 err = E_OK;
-    t_FmPcdPortSchemesParams                schemeBind;
+    t_FmPcdPortSchemesParams                currentSchemes;
     uint32_t                                cppReg;
     uint8_t                                 i;
 
@@ -1278,10 +1272,10 @@ t_Error FmHcPortSetPCD(t_Handle h_FmHc, t_Handle h_FmPort, t_FmPortPcdParams *p_
 
     if(FmPortGetPcdEngines(h_FmPort) & FM_PCD_KG)
     {
-        schemeBind.numOfSchemes = p_PcdParams->p_KgParams->numOfSchemes;
-        for(i = 0;i<schemeBind.numOfSchemes;i++)
-            schemeBind.h_Schemes[i] = p_PcdParams->p_KgParams->h_Schemes[i];
-        err = HcPortPcdKgBindSchemes(h_FmHc ,h_FmPort, &schemeBind);
+        currentSchemes.numOfSchemes = p_PcdParams->p_KgParams->numOfSchemes;
+        for(i = 0;i<currentSchemes.numOfSchemes;i++)
+            currentSchemes.h_Schemes[i] = p_PcdParams->p_KgParams->h_Schemes[i];
+        err = HcPortPcdKgBindSchemes(h_FmHc ,h_FmPort, &currentSchemes);
         if(err)
         {
             FmPortDeletePcd(h_FmPort);
@@ -1293,8 +1287,8 @@ t_Error FmHcPortSetPCD(t_Handle h_FmHc, t_Handle h_FmPort, t_FmPortPcdParams *p_
         err = KgHcWriteCpp(p_FmHc, FmPortGetHardwarePortId(h_FmPort), cppReg);
         if(err)
         {
+            FmHcPortPcdKgUnbindSchemes(p_FmHc->h_FmPcd, h_FmPort);
             FmPortDeletePcd(h_FmPort);
-            FmHcPortPcdKgUnbindSchemes(p_FmHc->h_FmPcd, h_FmPort, &schemeBind);
             RETURN_ERROR(MINOR, err, NO_MSG);
         }
     }
@@ -1308,20 +1302,10 @@ t_Error FmHcPortDeletePCD(t_Handle h_FmHc, t_Handle h_FmPort)
 {
     t_FmHc                                  *p_FmHc = (t_FmHc*)h_FmHc;
     t_Error                                 err = E_OK;
-    t_FmPcdKgInterModuleBindPortToSchemes   schemeBind;
-    t_FmPcdPortSchemesParams                currentSchemes;
-    int                                     i;
 
     if(FmPortGetPcdEngines(h_FmPort) & FM_PCD_KG)
     {
-        /* read port schemes params - we will use here only the schemes */
-        FmPortGetPortSchemeBindParams(h_FmPort, &schemeBind);
-
-        currentSchemes.numOfSchemes = schemeBind.numOfSchemes;
-        for (i=0; i<schemeBind.numOfSchemes; i++)
-            currentSchemes.h_Schemes[i] = CAST_UINT32_TO_POINTER(schemeBind.schemesIds[i]+1);
-
-        err = FmHcPortPcdKgUnbindSchemes(h_FmHc , h_FmPort, &currentSchemes);
+        err = FmHcPortPcdKgUnbindSchemes(h_FmHc , h_FmPort);
         if(err)
             RETURN_ERROR(MAJOR, err, NO_MSG);
 
diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_kg.c b/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_kg.c
index 7a31cfd..f9847f4 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_kg.c
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_kg.c
@@ -941,7 +941,6 @@ void FmPcdKgIncSchemeOwners(t_Handle h_FmPcd , t_FmPcdKgInterModuleBindPortToSch
     }
 }
 
-
 void FmPcdKgDecSchemeOwners(t_Handle h_FmPcd , t_FmPcdKgInterModuleBindPortToSchemes *p_BindPort)
 {
     t_FmPcd             *p_FmPcd = (t_FmPcd*)h_FmPcd;
@@ -959,7 +958,6 @@ void FmPcdKgDecSchemeOwners(t_Handle h_FmPcd , t_FmPcdKgInterModuleBindPortToSch
     }
 }
 
-
 #ifdef FM_MASTER_PARTITION
 t_Error  FmPcdKgAllocSchemes(t_Handle h_FmPcd, uint8_t numOfSchemes, uint8_t partitionId, uint8_t *p_SchemesIds)
 {
@@ -2407,7 +2405,7 @@ t_Error FM_PCD_KgDeleteEmptyClsPlanGrp(t_Handle h_FmPcd)
    t_Error  err;
 
     SANITY_CHECK_RETURN_ERROR(p_FmPcd, E_INVALID_HANDLE);
-    SANITY_CHECK_RETURN_ERROR(p_FmPcd->p_FmPcdDriverParam, E_INVALID_HANDLE);
+    SANITY_CHECK_RETURN_ERROR(!p_FmPcd->p_FmPcdDriverParam, E_INVALID_HANDLE);
     SANITY_CHECK_RETURN_ERROR(p_FmPcd->p_FmPcdKg, E_INVALID_HANDLE);
 
     p_FmPcd->p_FmPcdKg->isDriverEmptyClsPlanGrp = FALSE;
diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c b/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c
index 7ac9d59..5530abc 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c
@@ -773,6 +773,10 @@ t_Error FM_PCD_DeleteNetEnvCharacteristics(t_Handle h_FmPcd, t_Handle h_NetEnv)
 
     p_FmPcd->netEnvs[netEnvId].used= FALSE;
 
+    memset(p_FmPcd->netEnvs[netEnvId].units, 0, sizeof(t_FmPcdIntDistinctionUnit)*FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
+    memset(p_FmPcd->netEnvs[netEnvId].unitsVectors, 0, sizeof(uint32_t)*FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS);
+    memset(p_FmPcd->netEnvs[netEnvId].lcvs, 0, sizeof(uint32_t)*FM_PCD_PRS_NUM_OF_HDRS);
+
     RELEASE_LOCK(p_FmPcd->netEnvs[netEnvId].lock);
 
     return E_OK;
diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/Port/fm_port.c b/drivers/net/dpa/NetCommSw/Peripherals/FM/Port/fm_port.c
index 129314f..f19531c 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/Port/fm_port.c
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/Port/fm_port.c
@@ -1652,7 +1652,7 @@ t_Error          FmPortPcdKgSwBindClsPlanGrp (t_Handle h_FmPort, bool useClsPlan
     return E_OK;
 }
 
-void FmPortGetPortSchemeBindParams(t_Handle h_FmPort, t_FmPcdKgInterModuleBindPortToSchemes *p_SchemeBind)
+void FmPortGetPortSchemeBindParams(t_Handle h_FmPort, t_FmPcdKgInterModuleBindPortToSchemes *p_SchemeBind, bool clear)
 {
     t_FmPort                    *p_FmPort = (t_FmPort*)h_FmPort;
     uint32_t                    walking1Mask = 0x80000000, tmp;
@@ -1677,6 +1677,9 @@ void FmPortGetPortSchemeBindParams(t_Handle h_FmPort, t_FmPcdKgInterModuleBindPo
             idx++;
         }
     }
+
+    if (clear)
+        p_FmPort->schemesPerPortVector = tmp;
 }
 
 uint8_t FmPortGetNetEnvId(t_Handle h_FmPort)
@@ -3447,8 +3450,6 @@ t_Error FM_PORT_DeletePCD(t_Handle h_FmPort)
     t_FmPort                                *p_FmPort = (t_FmPort*)h_FmPort;
 #ifndef CONFIG_MULTI_PARTITION_SUPPORT
     t_Error                                 err = E_OK;
-    uint32_t                                walking1Mask = 0x80000000;
-    uint8_t                                 idx = 0;
     t_FmPcdKgInterModuleBindPortToSchemes   schemeBind;
 #endif /* !CONFIG_MULTI_PARTITION_SUPPORT */
 
@@ -3461,27 +3462,8 @@ t_Error FM_PORT_DeletePCD(t_Handle h_FmPort)
 #else
     if(p_FmPort->pcdEngines & FM_PCD_KG)
     {
-        schemeBind.netEnvId = p_FmPort->netEnvId;
-        schemeBind.hardwarePortId = p_FmPort->hardwarePortId;
-
         /* unbind all schemes */
-        schemeBind.numOfSchemes =0;
-        if(p_FmPort->schemesPerPortVector)
-        {
-            while (p_FmPort->schemesPerPortVector)
-            {
-                if(p_FmPort->schemesPerPortVector & walking1Mask)
-                {
-                    schemeBind.schemesIds[schemeBind.numOfSchemes] = idx;
-                    schemeBind.numOfSchemes++;
-                    p_FmPort->schemesPerPortVector &= ~walking1Mask;
-                }
-                walking1Mask >>= 1;
-                idx++;
-            }
-        }
-
-        ASSERT_COND(!p_FmPort->schemesPerPortVector);
+        FmPortGetPortSchemeBindParams(p_FmPort, &schemeBind, TRUE);
 
         err = FmPcdKgUnbindPortToSchemes(p_FmPort->h_FmPcd, &schemeBind);
         if(err)
diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/inc/fm_common.h b/drivers/net/dpa/NetCommSw/Peripherals/FM/inc/fm_common.h
index c0ebba4..f9b06eb 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/inc/fm_common.h
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/inc/fm_common.h
@@ -598,7 +598,7 @@ t_Error     FmPortDeletePcd(t_Handle h_FmPort);
 uint8_t     FmPortGetNetEnvId(t_Handle h_FmPort);
 uint8_t     FmPortGetHardwarePortId(t_Handle h_FmPort);
 uint32_t    FmPortGetPcdEngines(t_Handle h_FmPort);
-void        FmPortGetPortSchemeBindParams(t_Handle h_FmPort, t_FmPcdKgInterModuleBindPortToSchemes *p_SchemeBind);
+void        FmPortGetPortSchemeBindParams(t_Handle h_FmPort, t_FmPcdKgInterModuleBindPortToSchemes *p_SchemeBind, bool clear);
 uint8_t     FmPortGetClsPlanId(t_Handle h_FmPort);
 t_Error     FmPortPcdKgSwBindClsPlanGrp (t_Handle h_FmPort, bool useClsPlan, uint8_t newClsPlanGrpId);
 void        FmPortPcdKgSwUnbindClsPlanGrp (t_Handle h_FmPort);
diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/fman_test.c b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/fman_test.c
index 0c1665f..fb35312 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/fman_test.c
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/fman_test.c
@@ -100,6 +100,7 @@ typedef struct {
     struct fm_port      *p_RxPort;
     t_Handle            h_RxFmPortDev;
     t_Handle            h_Mac;
+    uint64_t            fmPhysBaseAddr;
     t_List              rxFrmsQ;
 
     int                 numOfTxQs;
@@ -115,6 +116,79 @@ typedef struct {
 static t_FmTest fmTest;
 
 
+static t_Error SetMacLoopback(t_FmTestPort *p_FmTestPort, bool en)
+{
+#define FM_1GMAC0_OFFSET                0x000e0000
+#define FM_1GMAC1_OFFSET                0x000e2000
+#define FM_1GMAC2_OFFSET                0x000e4000
+#define FM_1GMAC3_OFFSET                0x000e6000
+#define FM_10GMAC0_OFFSET               0x000f0000
+
+#define FM_1GMAC_CMD_CONF_CTRL_OFFSET   0x100
+#define FM_10GMAC_CMD_CONF_CTRL_OFFSET  0x8
+
+#define MACCFG1_LOOPBACK                0x00000100
+#define CMD_CFG_LOOPBACK_EN             0x00000400
+
+    uint64_t    tmpAddr = p_FmTestPort->fmPhysBaseAddr;
+    uint32_t    tmpVal;
+
+    if (p_FmTestPort->portType == e_IOC_FMT_PORT_T_RXTX)
+    switch (p_FmTestPort->id)
+    {
+        case 0:
+            tmpAddr += FM_1GMAC0_OFFSET;
+            break;
+        case 1:
+            tmpAddr += FM_1GMAC1_OFFSET;
+            break;
+        case 2:
+            tmpAddr += FM_1GMAC2_OFFSET;
+            break;
+        case 3:
+            tmpAddr += FM_1GMAC3_OFFSET;
+            break;
+        case 4:
+            tmpAddr += FM_10GMAC0_OFFSET;
+            break;
+        default:
+            RETURN_ERROR(MINOR, E_INVALID_VALUE, ("fm-port-test id!"));
+    }
+
+    tmpAddr = CAST_POINTER_TO_UINT64(ioremap(tmpAddr, 0x1000));
+
+    switch (p_FmTestPort->id)
+    {
+        case 0:
+        case 1:
+        case 2:
+        case 3:
+            tmpAddr += FM_1GMAC_CMD_CONF_CTRL_OFFSET;
+            tmpVal = GET_UINT32(*CAST_UINT64_TO_POINTER_TYPE(uint32_t,tmpAddr));
+            if (en)
+                tmpVal |= MACCFG1_LOOPBACK;
+            else
+                tmpVal &= ~MACCFG1_LOOPBACK;
+            WRITE_UINT32(*CAST_UINT64_TO_POINTER_TYPE(uint32_t,tmpAddr), tmpVal);
+            break;
+        case 4:
+            tmpAddr += FM_10GMAC_CMD_CONF_CTRL_OFFSET;
+            tmpVal = GET_UINT32(*CAST_UINT64_TO_POINTER_TYPE(uint32_t,tmpAddr));
+            if (en)
+                tmpVal |= CMD_CFG_LOOPBACK_EN;
+            else
+                tmpVal &= ~CMD_CFG_LOOPBACK_EN;
+            WRITE_UINT32(*CAST_UINT64_TO_POINTER_TYPE(uint32_t,tmpAddr), tmpVal);
+            break;
+        default:
+            break;
+    }
+
+    iounmap(CAST_UINT64_TO_POINTER(tmpAddr));
+
+    return E_OK;
+}
+
 static void EnqueueFrameToRxQ(t_FmTestPort *p_FmTestPort, t_FmTestFrame *p_FmTestFrame)
 {
     uint32_t   intFlags;
@@ -216,7 +290,7 @@ static t_Error PortInit (t_FmTestPort *p_FmTestPort, ioc_fmt_port_param_t *p_Par
     struct of_device_id name;
     struct device_node  *fm_node, *fm_port_node;
     const uint32_t      *uint32_prop;
-    int                 lenp;
+    int                 _errno=0, lenp;
     uint32_t            i;
 
     INIT_LIST(&p_FmTestPort->rxFrmsQ);
@@ -235,6 +309,14 @@ static t_Error PortInit (t_FmTestPort *p_FmTestPort, ioc_fmt_port_param_t *p_Par
         }
         BUG_ON(lenp != sizeof(uint32_t));
         if (*uint32_prop == p_Params->fm_id) {
+            struct resource     res;
+            /* Get the FM address */
+            _errno = of_address_to_resource(fm_node, 0, &res);
+            if (unlikely(_errno < 0))
+                RETURN_ERROR(MAJOR, E_INVALID_VALUE, ("of_address_to_resource() = %d", _errno));
+
+            p_FmTestPort->fmPhysBaseAddr = res.start;
+
             for_each_child_of_node(fm_node, fm_port_node) {
                 struct of_device    *of_dev;
                 uint32_prop = (uint32_t *)of_get_property(fm_port_node, "cell-index", &lenp);
@@ -318,6 +400,8 @@ static t_Error PortInit (t_FmTestPort *p_FmTestPort, ioc_fmt_port_param_t *p_Par
             RETURN_ERROR(MAJOR, E_INVALID_HANDLE, ("Tx FQs!"));
     }
 
+    SetMacLoopback(p_FmTestPort, TRUE);
+
     p_FmTestPort->valid     = TRUE;
 
     return E_OK;
@@ -435,6 +519,8 @@ static int fm_test_close(struct inode *inode, struct file *file)
 
     p_FmTestPort->valid = FALSE;
 
+    SetMacLoopback(p_FmTestPort, FALSE);
+
     /* Complete!!! */
     return err;
 }
diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
index c4d53d9..3115961 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
@@ -377,7 +377,7 @@ typedef _Packed struct {
     int     i;
     uint8_t physPortId[] = {0x8,0x9,0xa,0xb,0x10};
 
-    p_Plr = (t_Plr *)(p_LnxWrpFmDev->fmBaseAddr+FM_DMA_PLR_OFFSET);
+    p_Plr = CAST_UINT64_TO_POINTER_TYPE(t_Plr, (p_LnxWrpFmDev->fmBaseAddr+FM_DMA_PLR_OFFSET));
 #ifdef MODULE
     for (i=0;i<FM_MAX_NUM_OF_PARTITIONS/2;i++)
         p_Plr->plr[i] = 0;
@@ -388,7 +388,7 @@ typedef _Packed struct {
             (p_Plr->plr[i/2] & DMA_LOW_LIODN_MASK) :
             ((p_Plr->plr[i/2] & DMA_HIGH_LIODN_MASK) >> DMA_LIODN_SHIFT);
 
-    p_Ppids = (t_Ppids *)(p_LnxWrpFmDev->fmBaseAddr+FM_BMI_PPIDS_OFFSET);
+    p_Ppids = CAST_UINT64_TO_POINTER_TYPE(t_Ppids, (p_LnxWrpFmDev->fmBaseAddr+FM_BMI_PPIDS_OFFSET));
 
     for (i=0; i<FM_MAX_NUM_OF_RX_PORTS; i++)
         p_LnxWrpFmDev->rxPorts[i].settings.param.specificParams.rxParams.rxPartitionId =
@@ -474,7 +474,7 @@ static struct qe_firmware *FindFmanMicrocode(void)
 static t_LnxWrpFmDev * ReadFmDevTreeNode (struct of_device *of_dev)
 {
     t_LnxWrpFmDev       *p_LnxWrpFmDev;
-    struct device_node  *fm_node, *dev_node, *dpaa_node;
+    struct device_node  *fm_node, *dev_node;
     struct of_device_id name;
     struct resource     res;
     const uint32_t      *uint32_prop;
@@ -581,19 +581,6 @@ static t_LnxWrpFmDev * ReadFmDevTreeNode (struct of_device *of_dev)
         if (likely(of_match_node(&name, dev_node) != NULL))
             p_LnxWrpFmDev->plcrActive = TRUE;
 
-    memset(&name, 0, sizeof(struct of_device_id));
-    BUG_ON(strlen("fsl,dpaa") >= sizeof(name.compatible));
-    strcpy(name.compatible, "fsl,dpaa");
-    for_each_matching_node(dpaa_node, &name) {
-        struct of_device    *of_dev = of_find_device_by_node(dpaa_node);
-        if (unlikely(of_dev == NULL)) {
-            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_address_to_resource() = %d", _errno));
-            return NULL;
-        }
-        p_LnxWrpFmDev->dpaa_dev = &of_dev->dev;
-        break;
-    }
-
     if (p_LnxWrpFmDev->prsActive || p_LnxWrpFmDev->kgActive ||
         p_LnxWrpFmDev->ccActive || p_LnxWrpFmDev->plcrActive)
         p_LnxWrpFmDev->pcdActive = TRUE;
@@ -834,7 +821,7 @@ static t_Error ConfigureFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
     if (unlikely(p_LnxWrpFmDev->res == NULL))
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("request_mem_region() failed"));
 
-    p_LnxWrpFmDev->fmBaseAddr = (uint32_t)devm_ioremap(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->fmBaseAddr, p_LnxWrpFmDev->fmMemSize);
+    p_LnxWrpFmDev->fmBaseAddr = CAST_POINTER_TO_UINT64(devm_ioremap(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->fmBaseAddr, p_LnxWrpFmDev->fmMemSize));
     if (unlikely(p_LnxWrpFmDev->fmBaseAddr == 0))
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("devm_ioremap() failed"));
 
@@ -843,7 +830,7 @@ static t_Error ConfigureFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
     if (unlikely(dev_res == NULL))
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("__devm_request_region() failed"));
 
-    p_LnxWrpFmDev->fmMuramBaseAddr = (uint32_t)devm_ioremap(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->fmMuramBaseAddr, p_LnxWrpFmDev->fmMuramMemSize);
+    p_LnxWrpFmDev->fmMuramBaseAddr = CAST_POINTER_TO_UINT64(devm_ioremap(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->fmMuramBaseAddr, p_LnxWrpFmDev->fmMuramMemSize));
     if (unlikely(p_LnxWrpFmDev->fmMuramBaseAddr == 0))
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("devm_ioremap() failed"));
 
@@ -875,7 +862,7 @@ static t_Error ConfigureFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
     dev_res = __devm_request_region(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->res, p_LnxWrpFmPortDev->baseAddr, p_LnxWrpFmPortDev->memSize, "fman-port-hc");
     if (unlikely(dev_res == NULL))
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("__devm_request_region() failed"));
-    p_LnxWrpFmPortDev->baseAddr = (uint32_t)devm_ioremap(p_LnxWrpFmDev->dev, p_LnxWrpFmPortDev->baseAddr, p_LnxWrpFmPortDev->memSize);
+    p_LnxWrpFmPortDev->baseAddr = CAST_POINTER_TO_UINT64(devm_ioremap(p_LnxWrpFmDev->dev, p_LnxWrpFmPortDev->baseAddr, p_LnxWrpFmPortDev->memSize));
     if (unlikely(p_LnxWrpFmPortDev->baseAddr == 0))
         REPORT_ERROR(MAJOR, E_INVALID_STATE, ("devm_ioremap() failed"));
 
@@ -969,6 +956,9 @@ static t_Error InitFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
     if ((p_LnxWrpFmDev->h_Dev = FM_Config(&p_LnxWrpFmDev->fmDevSettings.param)) == NULL)
         RETURN_ERROR(MAJOR, E_INVALID_HANDLE, ("FM"));
 
+    if (FM_ConfigResetOnInit(p_LnxWrpFmDev->h_Dev, TRUE) != E_OK)
+        RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
+
     if (FM_Init(p_LnxWrpFmDev->h_Dev) != E_OK)
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
 
@@ -1154,10 +1144,10 @@ static void FreeFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
         FM_MURAM_Free(p_LnxWrpFmDev->h_MuramDev);
 
     SYS_UnregisterIoMap((uint64_t)p_LnxWrpFmDev->fmMuramBaseAddr);
-    devm_iounmap(p_LnxWrpFmDev->dev, (void*)p_LnxWrpFmDev->fmMuramBaseAddr);
+    devm_iounmap(p_LnxWrpFmDev->dev, CAST_UINT64_TO_POINTER(p_LnxWrpFmDev->fmMuramBaseAddr));
     __devm_release_region(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->res, p_LnxWrpFmDev->fmMuramBaseAddr, p_LnxWrpFmDev->fmMuramMemSize);
     SYS_UnregisterIoMap((uint64_t)p_LnxWrpFmDev->fmBaseAddr);
-    devm_iounmap(p_LnxWrpFmDev->dev, (void*)p_LnxWrpFmDev->fmBaseAddr);
+    devm_iounmap(p_LnxWrpFmDev->dev, CAST_UINT64_TO_POINTER(p_LnxWrpFmDev->fmBaseAddr));
     release_mem_region(p_LnxWrpFmDev->fmBaseAddr, p_LnxWrpFmDev->fmMemSize);
 //    devm_release_mem_region(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->fmBaseAddr, p_LnxWrpFmDev->fmMemSize);
 }
@@ -1171,7 +1161,7 @@ static void FreeFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
 
     if (p_LnxWrpFmPortDev->h_Dev)
         FM_PORT_Free(p_LnxWrpFmPortDev->h_Dev);
-    devm_iounmap(p_LnxWrpFmDev->dev, (void*)p_LnxWrpFmPortDev->baseAddr);
+    devm_iounmap(p_LnxWrpFmDev->dev, CAST_UINT64_TO_POINTER(p_LnxWrpFmPortDev->baseAddr));
     __devm_release_region(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->res, p_LnxWrpFmPortDev->baseAddr, p_LnxWrpFmPortDev->memSize);
 }
 
diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
index 8191b05..4742d75 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
@@ -73,7 +73,7 @@ typedef struct {
     uint8_t                     id;
     bool                        active;
     bool                        initialized;
-    uint32_t                    baseAddr;
+    uint64_t                    baseAddr;
     uint32_t                    memSize;
     t_WrpFmPortDevSettings      settings;
     uint8_t                     totalNumOfSchemes;
@@ -95,7 +95,7 @@ typedef struct {
 typedef struct {
     uint8_t                     id;
     bool                        active;
-    uint32_t                    baseAddr;
+    uint64_t                    baseAddr;
     uint32_t                    memSize;
     t_WrpFmMacDevSettings       settings;
     t_Handle                    h_Dev;
@@ -116,9 +116,9 @@ typedef struct {
     uint8_t                     sharedSchemesBase;
     uint8_t                     numOfSchemesUsed;
     uint8_t                     defNetEnvId;
-    uint32_t                    fmBaseAddr;
+    uint64_t                    fmBaseAddr;
     uint32_t                    fmMemSize;
-    uint32_t                    fmMuramBaseAddr;
+    uint64_t                    fmMuramBaseAddr;
     uint32_t                    fmMuramMemSize;
     int                         irq1;
     int                         irq2;
@@ -141,7 +141,6 @@ typedef struct {
     struct proc_dir_entry       *proc_fm;
     struct proc_dir_entry       *proc_fm_regs;
     struct proc_dir_entry       *proc_fm_stats;
-    struct device               *dpaa_dev;
     struct qman_fq              *hc_tx_conf_fq, *hc_tx_err_fq, *hc_tx_fq;
 } t_LnxWrpFmDev;
 
diff --git a/drivers/net/dpa/mac-api.c b/drivers/net/dpa/mac-api.c
index 7971a95..3868dfa 100644
--- a/drivers/net/dpa/mac-api.c
+++ b/drivers/net/dpa/mac-api.c
@@ -145,18 +145,6 @@ static int __devinit __cold init(struct mac_device *mac_dev)
 		}
 	}
 
-#ifdef CONFIG_FSL_FMAN_TEST
-	if ((param.enetMode == e_ENET_MODE_XGMII_10000) || param.macId) {
-		err = FM_MAC_ConfigLoopback(priv->mac, true);
-		_errno = -GET_ERROR_TYPE(err);
-		if (unlikely(_errno < 0)) {
-			cpu_dev_err(mac_dev->dev, "%s:%hu:%s(): FM_MAC_ConfigLoopback() = 0x%08x\n",
-				    __file__, __LINE__, __func__, err);
-			goto _return_fm_mac_free;
-		}
-	}
-#endif /* CONFIG_FSL_FMAN_TEST */
-
 	err = FM_MAC_Init(priv->mac);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0)) {
-- 
1.6.5.2

