From f8d6deabbf00c4a831ee5a968964de7df30b0a9d Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Fri, 4 Dec 2009 22:58:29 -0800
Subject: [PATCH 71/77] WRHV/fsl_p4080: Restore BOOKE PTE

Restore BOOKE PTE since it's not necessary to use VMMU/64bit-PTE for
fsl_p4080.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/include/asm/page_32.h          |    2 +-
 arch/powerpc/include/asm/pgalloc-32.h       |    2 +-
 arch/powerpc/include/asm/pgtable-ppc32.h    |    4 ++--
 arch/powerpc/include/asm/pv_pgtable-ppc32.h |    2 +-
 4 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/arch/powerpc/include/asm/page_32.h b/arch/powerpc/include/asm/page_32.h
index eef1d35..c995f3a 100644
--- a/arch/powerpc/include/asm/page_32.h
+++ b/arch/powerpc/include/asm/page_32.h
@@ -18,7 +18,7 @@
  * The basic type of a PTE - 64 bits for those CPUs with > 32 bit
  * physical addressing.  For now this just the IBM PPC440.
  */
-#if defined(CONFIG_PTE_64BIT) || defined(CONFIG_PARAVIRT)
+#if (defined(CONFIG_PTE_64BIT) || defined(CONFIG_PARAVIRT)) && !defined(CONFIG_PPC85xx_VT_MODE)
 typedef unsigned long long pte_basic_t;
 #define PTE_SHIFT	(PAGE_SHIFT - 3)	/* 512 ptes per page */
 #else
diff --git a/arch/powerpc/include/asm/pgalloc-32.h b/arch/powerpc/include/asm/pgalloc-32.h
index f579541..eaa187b 100644
--- a/arch/powerpc/include/asm/pgalloc-32.h
+++ b/arch/powerpc/include/asm/pgalloc-32.h
@@ -17,7 +17,7 @@ extern void pgd_free(struct mm_struct *mm, pgd_t *pgd);
 #define __pmd_free_tlb(tlb,x)		do { } while (0)
 /* #define pgd_populate(mm, pmd, pte)      BUG() */
 
-#if !defined(CONFIG_BOOKE) || defined (CONFIG_PARAVIRT)
+#if (!defined(CONFIG_BOOKE) || defined (CONFIG_PARAVIRT)) && !defined(CONFIG_PPC85xx_VT_MODE)
 #define pmd_populate_kernel(mm, pmd, pte)	\
 		(pmd_val(*(pmd)) = __pa(pte) | _PMD_PRESENT)
 #define pmd_populate(mm, pmd, pte)	\
diff --git a/arch/powerpc/include/asm/pgtable-ppc32.h b/arch/powerpc/include/asm/pgtable-ppc32.h
index bef47c3..e6c520d 100644
--- a/arch/powerpc/include/asm/pgtable-ppc32.h
+++ b/arch/powerpc/include/asm/pgtable-ppc32.h
@@ -602,7 +602,7 @@ extern void add_hash_page(unsigned context, unsigned long va,
  * the old pte value.  In the 64-bit PTE case we lock around the
  * low PTE word since we expect ALL flag bits to be there
  */
-#if !defined(CONFIG_PTE_64BIT) && !defined(CONFIG_PARAVIRT)
+#if (!defined(CONFIG_PTE_64BIT) && !defined(CONFIG_PARAVIRT)) || defined(CONFIG_PPC85xx_VT_MODE)
 static inline unsigned long pte_update(pte_t *p,
 				       unsigned long clr,
 				       unsigned long set)
@@ -790,7 +790,7 @@ extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
  * handler).  On everything else the pmd contains the physical address
  * of the pte page.  -- paulus
  */
-#if !defined(CONFIG_BOOKE) || defined(CONFIG_PARAVIRT)
+#if (!defined(CONFIG_BOOKE) || defined(CONFIG_PARAVIRT)) && !defined(CONFIG_PPC85xx_VT_MODE)
 #define pmd_page_vaddr(pmd)	\
 	((unsigned long) __va(pmd_val(pmd) & PAGE_MASK))
 #define pmd_page(pmd)		\
diff --git a/arch/powerpc/include/asm/pv_pgtable-ppc32.h b/arch/powerpc/include/asm/pv_pgtable-ppc32.h
index 850cdf5..ed21da2 100644
--- a/arch/powerpc/include/asm/pv_pgtable-ppc32.h
+++ b/arch/powerpc/include/asm/pv_pgtable-ppc32.h
@@ -6,7 +6,7 @@
 /* define native inline functions */
 #define set_pte_at native_set_pte_at
 
-#if defined(CONFIG_WRHV)
+#if defined(CONFIG_WRHV) && !defined(CONFIG_PPC85xx_VT_MODE)
 #include <vbi/vmmu.h>
 #include <vbi/interface.h>
 
-- 
1.6.5.2

