From 0a7178d479b316c8d1b67b3570e28b42d11f8264 Mon Sep 17 00:00:00 2001
From: Emil Medve <Emilian.Medve@Freescale.com>
Date: Wed, 2 Dec 2009 16:14:57 -0600
Subject: [PATCH 117/148] P4080/DPA: Cleanup some hardwired assumptions about the number of queues

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
[Cleanly applied the FSL SDK 2.0.3 patch:
"kernel-2.6.30-P4080-DPA-Cleanup-some-hardwired-assumptions.patch"]
Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 drivers/net/dpa/dpa.c |   21 ++++++++++++---------
 1 files changed, 12 insertions(+), 9 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index 996e407..6f63bed 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -2375,8 +2375,9 @@ dpa_probe(struct of_device *_of_dev)
 	const uint8_t			*mac_addr;
 	struct qman_fq			*ingress_fq;
 	uint32_t		ingress_fqids[ARRAY_SIZE(ingress_fqs)][2];
-	const uint32_t		default_tx_fqids[6] = {0, 1, 0, 1, 0, 8};
-	const uint32_t		default_rx_fqids[6] = {0, 1, 0, 1, 0, 8};
+	const uint32_t		default_tx_fqids[] =
+				  {0, 1, 0, 1, 0, ARRAY_SIZE(priv->egress_fqs)};
+	const uint32_t		default_rx_fqids[] = {0, 1, 0, 1};
 	const uint32_t		*tx_fqids;
 	const uint32_t		*rx_fqids;
 	int			num_tx_fqids, num_tx_fqs;
@@ -2571,7 +2572,9 @@ dpa_probe(struct of_device *_of_dev)
 				 * of the frame queue by statically
 				 * assigning the fqid
 				 */
-				int wq = fqid ? fqid % 8 : 7;
+				int wq = fqid ?
+					fqid % net_dev->num_tx_queues :
+					net_dev->num_tx_queues - 1;
 
 				dpa_fq->fq_base = ingress_fqs[RX][1];
 				dpa_fq->net_dev	= net_dev;
@@ -2593,8 +2596,7 @@ dpa_probe(struct of_device *_of_dev)
 			}
 		}
 
-		/* Right now, we maintain the requirement that we have 8 */
-		BUG_ON(num_tx_fqs != 8);
+		BUG_ON(num_tx_fqs != net_dev->num_tx_queues);
 
 		/* FIXME: Horribly leaky */
 		dpa_fq = devm_kzalloc(dev, sizeof(*dpa_fq) * num_tx_fqs,
@@ -2715,7 +2717,9 @@ dpa_probe(struct of_device *_of_dev)
 				uint32_t fqid =
 					rx_fqids[2 * i] ?
 					rx_fqids[2 * i] + j : 0;
-				int wq = fqid ? fqid % 8 : 7;
+				int wq = fqid ?
+					fqid % net_dev->num_tx_queues :
+					net_dev->num_tx_queues - 1;
 
 				dpa_fq->fq_base = ingress_fqs[RX][1];
 				dpa_fq->net_dev	= net_dev;
@@ -2736,10 +2740,9 @@ dpa_probe(struct of_device *_of_dev)
 			}
 		}
 
-		/* We only support 8 for now */
-		BUG_ON(tx_fqids[5] != 8);
+		BUG_ON(tx_fqids[5] != net_dev->num_tx_queues);
 
-		for (i = 0; i < ARRAY_SIZE(priv->egress_fqs); i++, dpa_fq++) {
+		for (i = 0; i < net_dev->num_tx_queues; i++, dpa_fq++) {
 			uint32_t fqid = tx_fqids[4] ? tx_fqids[4] + i : 0;
 
 			dpa_fq->fq_base	= _egress_fqs;
-- 
1.6.5.2

