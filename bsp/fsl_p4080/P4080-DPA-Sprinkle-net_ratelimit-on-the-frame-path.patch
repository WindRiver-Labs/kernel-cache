From c125b851e79b8a0163c6624735d1222ed4e53eb8 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Wed, 4 Aug 2010 14:14:24 +0800
Subject: [PATCH 06/22] P4080/DPA: Sprinkle net_ratelimit() on the frame path

It is from FSL vendor SDK 2.x.

Add net_ratelimit() check to make sure net warning
printk()s are guarded by it.

Signed-off-by: Emil Medve <Emilian.Medve@Freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/net/dpa/dpa.c |   22 +++++++++++-----------
 1 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index fa01a6f..e9fc9d4 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -489,7 +489,7 @@ dpa_fd_release(const struct net_device *net_dev, const struct qm_fd *fd)
 			__errno = bman_release(dpa_bp->pool, bmb, j,
 					BMAN_RELEASE_FLAG_WAIT_INT);
 			if (unlikely(__errno < 0)) {
-				if (netif_msg_drv(priv))
+				if (netif_msg_drv(priv) && net_ratelimit())
 					cpu_netdev_err(net_dev,	"%s:%hu:%s(): "
 					       "bman_release(%hu) = %d\n",
 					       __file__, __LINE__, __func__,
@@ -553,7 +553,7 @@ ingress_dqrr(struct qman_portal		*portal,
 		dpa_fd = devm_kzalloc(net_dev->dev.parent,
 				sizeof(*dpa_fd), GFP_ATOMIC);
 		if (unlikely(dpa_fd == NULL)) {
-			if (netif_msg_rx_err(priv))
+			if (netif_msg_rx_err(priv) && net_ratelimit())
 				cpu_netdev_err(net_dev,
 					"%s:%hu:%s(): devm_kzalloc() failed\n",
 					__file__, __LINE__, __func__);
@@ -873,7 +873,7 @@ static void _dpa_rx_error(struct net_device		*net_dev,
 {
 	int _errno;
 
-	if (netif_msg_hw(priv))
+	if (netif_msg_hw(priv) && net_ratelimit())
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
 			       __file__, __LINE__, __func__,
 			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
@@ -896,7 +896,7 @@ static void _dpa_tx_error(struct net_device		*net_dev,
 {
 	struct sk_buff *skb;
 
-	if (netif_msg_hw(priv))
+	if (netif_msg_hw(priv) && net_ratelimit())
 		cpu_netdev_err(net_dev, "%s:%hu:%s(): FD status = 0x%08x\n",
 			       __file__, __LINE__, __func__,
 			       dpa_fd->fd.status & FM_FD_STAT_ERRORS);
@@ -928,7 +928,7 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 	struct sk_buff *skb;
 
 	if (unlikely(dpa_fd->fd.status & FM_FD_STAT_ERRORS) != 0) {
-		if (netif_msg_hw(priv))
+		if (netif_msg_hw(priv) && net_ratelimit())
 			cpu_netdev_warn(net_dev,
 					"%s:%hu:%s(): FD status = 0x%08x\n",
 					__file__, __LINE__, __func__,
@@ -947,7 +947,7 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 
 	if (dpa_fd->fd.format == qm_fd_sg) {
 		percpu_priv->stats.rx_dropped++;
-		if (netif_msg_rx_status(priv))
+		if (netif_msg_rx_status(priv) && net_ratelimit())
 			cpu_netdev_err(net_dev, "%s:%hu:%s(): Dropping a SG frame\n",
 			       __file__, __LINE__, __func__);
 		goto _return_dpa_fd_release;
@@ -959,7 +959,7 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 	if (skb == NULL) {
 		skb = __netdev_alloc_skb(net_dev, DPA_BP_HEAD + NET_IP_ALIGN + size, GFP_DPA);
 		if (unlikely(skb == NULL)) {
-			if (netif_msg_rx_err(priv))
+			if (netif_msg_rx_err(priv) && net_ratelimit())
 				cpu_netdev_err(net_dev, "%s:%hu:%s(): "
 					       "__netdev_alloc_skb() failed\n",
 					       __file__, __LINE__, __func__);
@@ -1011,7 +1011,7 @@ static void __hot _dpa_tx(struct net_device		*net_dev,
 	struct sk_buff	*skb;
 
 	if (unlikely(dpa_fd->fd.status & FM_FD_STAT_ERRORS) != 0) {
-		if (netif_msg_hw(priv))
+		if (netif_msg_hw(priv) && net_ratelimit())
 			cpu_netdev_warn(net_dev,
 					"%s:%hu:%s(): FD status = 0x%08x\n",
 					__file__, __LINE__, __func__,
@@ -1159,7 +1159,7 @@ static int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 		fd.addr_lo = dma_map_single(dev, skb->data, skb_headlen(skb),
 				DMA_TO_DEVICE);
 		if (unlikely(fd.addr_lo == 0)) {
-			if (netif_msg_tx_err(priv))
+			if (netif_msg_tx_err(priv)  && net_ratelimit())
 				cpu_netdev_err(net_dev,
 				"%s:%hu:%s(): dma_map_single() failed\n",
 				__file__, __LINE__, __func__);
@@ -1176,7 +1176,7 @@ static int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 
 		_errno = bman_acquire(dpa_bp->pool, bmb, 1, 0);
 		if (unlikely(_errno <= 0)) {
-			if (netif_msg_tx_err(priv))
+			if (netif_msg_tx_err(priv) && net_ratelimit())
 				cpu_netdev_err(net_dev,
 					"%s:%hu:%s(): bman_acquire() = %d\n",
 					__file__, __LINE__, __func__, _errno);
@@ -1196,7 +1196,7 @@ static int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 	_errno = qman_enqueue(priv->egress_fqs[skb_get_queue_mapping(skb)],
 			&fd, 0);
 	if (unlikely(_errno < 0)) {
-		if (netif_msg_tx_err(priv))
+		if (netif_msg_tx_err(priv) && net_ratelimit())
 			cpu_netdev_err(net_dev,
 				"%s:%hu:%s(): qman_enqueue() = %d\n",
 				__file__, __LINE__, __func__, _errno);
-- 
1.6.5.2

