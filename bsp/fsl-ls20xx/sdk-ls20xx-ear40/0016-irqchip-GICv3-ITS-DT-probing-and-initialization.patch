From 904f687c1882a8856aedd81f926e576802cb9614 Mon Sep 17 00:00:00 2001
From: Marc Zyngier <marc.zyngier@arm.com>
Date: Mon, 24 Nov 2014 14:35:17 +0000
Subject: [PATCH 16/19] irqchip: GICv3: ITS: DT probing and initialization

commit 4c21f3c26ecc25c5520628eef8e900a36e6c6ab4 upstream

Add the code that probes the ITS from the device tree,
and initialize it.

Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
Link: https://lkml.kernel.org/r/1416839720-18400-11-git-send-email-marc.zyngier@arm.com
Signed-off-by: Jason Cooper <jason@lakedaemon.net>
[irq-gic files are different from mainline, so this patch
 is not same as upstream.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/irqchip/irq-gic-v3-its.c | 65 +++++++++++++++++++++++++++++-----------
 1 file changed, 47 insertions(+), 18 deletions(-)

diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index 368eb28..25b1ee6 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -65,6 +65,7 @@ struct its_node {
 	struct list_head	entry;
 	struct msi_chip		msi_chip;
 	void __iomem		*base;
+	struct irq_domain       *domain;
 	unsigned long		phys_base;
 	struct its_cmd_block	*cmd_base;
 	struct its_cmd_block	*cmd_write;
@@ -1400,7 +1401,7 @@ static int its_msi_setup_irq(struct msi_chip *chip,
 	return 0;
 }
 
-static int its_probe(struct device_node *node)
+static int its_probe(struct device_node *node, struct irq_domain *parent)
 {
 	struct resource res;
 	struct its_node *its;
@@ -1475,20 +1476,39 @@ static int its_probe(struct device_node *node)
 		its->flags |= ITS_FLAGS_CMDQ_NEEDS_FLUSHING;
 	}
 
-	spin_lock(&its_lock);
-	list_add(&its->entry, &its_nodes);
-	spin_unlock(&its_lock);
+	if (of_property_read_bool(its->msi_chip.of_node, "msi-controller")) {
+		its->domain = irq_domain_add_tree(NULL, &its_domain_ops, its);
+		if (!its->domain) {
+			err = -ENOMEM;
+			goto out_free_tables;
+		}
 
-	if (IS_ENABLED(CONFIG_PCI_MSI) && /* Remove this once we have PCI... */
-	    of_property_read_bool(its->msi_chip.of_node, "msi-controller")) {
-		its->msi_chip.setup_irq		= its_msi_setup_irq;
-		its->msi_chip.teardown_irq	= its_msi_teardown_irq;
+		its->domain->parent = parent;
+
+		its->msi_chip.domain = pci_msi_create_irq_domain(node,
+								 &its_pci_msi_domain_info,
+								 its->domain);
+		if (!its->msi_chip.domain) {
+			err = -ENOMEM;
+			goto out_free_domains;
+		}
 
 		err = of_pci_msi_chip_add(&its->msi_chip);
+		if (err)
+			goto out_free_domains;
 	}
 
-	return err;
+	spin_lock(&its_lock);
+	list_add(&its->entry, &its_nodes);
+	spin_unlock(&its_lock);
 
+	return 0;
+
+out_free_domains:
+	if (its->msi_chip.domain)
+		irq_domain_remove(its->msi_chip.domain);
+	if (its->domain)
+		irq_domain_remove(its->domain);
 out_free_tables:
 	its_free_tables(its);
 out_free_cmd:
@@ -1501,8 +1521,18 @@ out_unmap:
 	return err;
 }
 
+static bool gic_rdists_supports_plpis(void)
+{
+	return !!(readl_relaxed(gic_data_rdist_rd_base() + GICR_TYPER) & GICR_TYPER_PLPIS);
+}
+
 int its_cpu_init(void)
 {
+	if (!gic_rdists_supports_plpis()) {
+		pr_info("CPU%d: LPIs not supported\n", smp_processor_id());
+		return -ENXIO;
+	}
+
 	if (!list_empty(&its_nodes)) {
 		its_cpu_init_lpis();
 		its_cpu_init_collection();
@@ -1516,27 +1546,26 @@ static struct of_device_id its_device_id[] = {
 	{},
 };
 
-struct irq_chip *its_init(struct device_node *node, struct rdist *rdist,
-			  struct irq_domain *domain)
+int its_init(struct device_node *node, struct rdist *rdists,
+	     struct irq_domain *parent_domain)
 {
 	struct device_node *np;
 
 	for (np = of_find_matching_node(node, its_device_id); np;
 	     np = of_find_matching_node(np, its_device_id)) {
-		its_probe(np);
+		its_probe(np, parent_domain);
 	}
 
 	if (list_empty(&its_nodes)) {
-		pr_info("ITS: No ITS available, not enabling LPIs\n");
-		return NULL;
+		pr_warn("ITS: No ITS available, not enabling LPIs\n");
+		return -ENXIO;
 	}
 
-	gic_rdist = rdist;
+	gic_rdist = rdists;
 	gic_root_node = node;
-	lpi_domain = domain;
 
 	its_alloc_lpi_tables();
-	its_lpi_init(rdist->id_bits);
+	its_lpi_init(rdists->id_bits);
 
-	return &its_irq_chip;
+	return 0;
 }
-- 
1.9.1

