From 1ef2f660cfdf82d8560a786a8ebb78d96b61a69a Mon Sep 17 00:00:00 2001
From: "J. German Rivera" <German.Rivera@freescale.com>
Date: Mon, 27 Apr 2015 19:00:15 -0500
Subject: [PATCH 219/237] staging: fsl-mc: Relax rules for
 FSL_MC_IO_ATOMIC_CONTEXT_PORTAL

Some drivers (e.g., DPNI) need to send MC commands with the same
mc_io object, from both atomic and non-atomic context. So, we
need to relax the rules to use mc_io objects created with the
FSL_MC_IO_ATOMIC_CONTEXT_PORTAL flag on, to allow this.

Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
Change-Id: I7ccf7889edf569f8e38defa8115079214a02acc1
Reviewed-on: http://git.am.freescale.net:8181/35643
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch from FSL LS2085 SDK EAR4.0]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/mc-sys.c     | 32 +++++++++++++++-----------------
 drivers/staging/fsl-mc/include/mc-sys.h |  2 +-
 2 files changed, 16 insertions(+), 18 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index 4628746..453ce9b 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -544,6 +544,12 @@ static int mc_completion_wait(struct fsl_mc_io *mc_io, struct mc_command *cmd,
 	if (WARN_ON(!mc_io->dpmcp_dev))
 		return -EINVAL;
 
+	if (WARN_ON(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL))
+		return -EINVAL;
+
+	if (WARN_ON(!preemptible()))
+		return -EINVAL;
+
 	for (;;) {
 		status = mc_read_response(mc_io->portal_virt_addr, cmd);
 		if (status != MC_CMD_STATUS_READY)
@@ -608,21 +614,13 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	int error;
 	enum mc_cmd_status status;
 
-	/*
-	 * NOTE: This function may be invoked from atomic context
-	 */
-
-	if (preemptible()) {
-		if (WARN_ON(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL))
-			return -EINVAL;
-
-		mutex_lock(&mc_io->mutex);
-	} else {
-		if (WARN_ON(!(mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)))
-			return -EINVAL;
+	if (WARN_ON(in_irq()))
+		return -EINVAL;
 
+	if (mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)
 		spin_lock(&mc_io->spinlock);
-	}
+	else
+		mutex_lock(&mc_io->mutex);
 
 	/*
 	 * Send command to the MC hardware:
@@ -632,7 +630,7 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	/*
 	 * Wait for response from the MC hardware:
 	 */
-	if (mc_io->mc_command_done_irq_armed && preemptible())
+	if (mc_io->mc_command_done_irq_armed)
 		error = mc_completion_wait(mc_io, cmd, &status);
 	else
 		error = mc_polling_wait(mc_io, cmd, &status);
@@ -655,10 +653,10 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 	error = 0;
 
 common_exit:
-	if (preemptible())
-		mutex_unlock(&mc_io->mutex);
-	else
+	if (mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)
 		spin_unlock(&mc_io->spinlock);
+	else
+		mutex_unlock(&mc_io->mutex);
 
 	return error;
 }
diff --git a/drivers/staging/fsl-mc/include/mc-sys.h b/drivers/staging/fsl-mc/include/mc-sys.h
index 6234425..fbf4b73 100644
--- a/drivers/staging/fsl-mc/include/mc-sys.h
+++ b/drivers/staging/fsl-mc/include/mc-sys.h
@@ -70,7 +70,7 @@ struct mc_command;
  * @spinlock: Spinlock to serialize mc_send_command() calls that use the same MC
  * portal, if the fsl_mc_io object was created with the
  * FSL_MC_IO_ATOMIC_CONTEXT_PORTAL flag on. mc_send_command() calls for this
- * fsl_mc_io object must be made only from atomic context.
+ * fsl_mc_io object can be made from atomic or non-atomic context.
  */
 struct fsl_mc_io {
 	struct device *dev;
-- 
1.9.1

