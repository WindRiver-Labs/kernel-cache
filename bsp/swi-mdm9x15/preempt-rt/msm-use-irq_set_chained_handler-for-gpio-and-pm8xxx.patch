From 9f4dc07135ece9f449b252e51fe19c8e9d3ebbae Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Fri, 30 Aug 2013 17:13:44 +0800
Subject: [PATCH 61/70] msm: use irq_set_chained_handler for gpio and pm8xxx

TLMM_MSM_SUMMARY_IRQ and pm8xxx_irq handler are the
general entry for parsing next irq, so irq_set_chained_handler
should be used instead of request_irq

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
Signed-off-by: Catalin Enache <catalin.enache@windriver.com>
---
 arch/arm/mach-msm/gpio-v2.c |   14 ++++----------
 drivers/mfd/pm8xxx-irq.c    |   21 ++++++++-------------
 2 files changed, 12 insertions(+), 23 deletions(-)

diff --git a/arch/arm/mach-msm/gpio-v2.c b/arch/arm/mach-msm/gpio-v2.c
index 5013649..5d0a552 100644
--- a/arch/arm/mach-msm/gpio-v2.c
+++ b/arch/arm/mach-msm/gpio-v2.c
@@ -484,10 +484,9 @@ static int msm_gpio_irq_set_type(struct irq_data *d, unsigned int flow_type)
  * which have been set as summary IRQ lines and which are triggered,
  * and to call their interrupt handlers.
  */
-static irqreturn_t msm_summary_irq_handler(int irq, void *data)
+static void msm_summary_irq_handler(unsigned int irq, struct irq_desc *desc)
 {
 	unsigned long i;
-	struct irq_desc *desc = irq_to_desc(irq);
 	struct irq_chip *chip = irq_desc_get_chip(desc);
 
 	chained_irq_enter(chip, desc);
@@ -501,7 +500,6 @@ static irqreturn_t msm_summary_irq_handler(int irq, void *data)
 	}
 
 	chained_irq_exit(chip, desc);
-	return IRQ_HANDLED;
 }
 
 static int msm_gpio_irq_set_wake(struct irq_data *d, unsigned int on)
@@ -560,13 +558,9 @@ static int __devinit msm_gpio_probe(void)
 		set_irq_flags(irq, IRQF_VALID);
 	}
 
-	ret = request_irq(TLMM_MSM_SUMMARY_IRQ, msm_summary_irq_handler,
-			IRQF_TRIGGER_HIGH, "msmgpio", NULL);
-	if (ret) {
-		pr_err("Request_irq failed for TLMM_MSM_SUMMARY_IRQ - %d\n",
-				ret);
-		return ret;
-	}
+	irq_set_chained_handler(TLMM_MSM_SUMMARY_IRQ,
+				msm_summary_irq_handler);
+
 	return 0;
 }
 
diff --git a/drivers/mfd/pm8xxx-irq.c b/drivers/mfd/pm8xxx-irq.c
index 999b53f..74f8514 100644
--- a/drivers/mfd/pm8xxx-irq.c
+++ b/drivers/mfd/pm8xxx-irq.c
@@ -192,16 +192,17 @@ static int pm8xxx_irq_master_handler(struct pm_irq_chip *chip, int master)
 	return ret;
 }
 
-static irqreturn_t pm8xxx_irq_handler(int irq, void *data)
+static void pm8xxx_irq_handler(unsigned int irq, struct irq_desc *desc)
 {
-	struct pm_irq_chip *chip = data;
+	struct pm_irq_chip *chip = irq_desc_get_handler_data(desc);
+	struct irq_chip *irq_chip = irq_desc_get_chip(desc);
 	u8	root;
 	int	i, ret, masters = 0;
 
 	ret = pm8xxx_read_root_irq(chip, &root);
 	if (ret) {
 		pr_err("Can't read root status ret=%d\n", ret);
-		return IRQ_HANDLED;
+		return;
 	}
 
 	/* on pm8xxx series masters start from bit 1 of the root */
@@ -212,7 +213,7 @@ static irqreturn_t pm8xxx_irq_handler(int irq, void *data)
 		if (masters & (1 << i))
 			pm8xxx_irq_master_handler(chip, i);
 
-	return IRQ_HANDLED;
+	irq_chip->irq_ack(&desc->irq_data);
 }
 
 static void pm8xxx_irq_mask(struct irq_data *d)
@@ -436,15 +437,9 @@ struct pm_irq_chip *  __devinit pm8xxx_irq_init(struct device *dev,
 	}
 
 	if (devirq != 0) {
-		rc = request_irq(devirq, pm8xxx_irq_handler,
-				pdata->irq_trigger_flag,
-				"pm8xxx_usr_irq", chip);
-		if (rc) {
-			pr_err("failed to request_irq for %d rc=%d\n",
-								devirq, rc);
-		} else {
-			irq_set_irq_wake(devirq, 1);
-		}
+		irq_set_handler_data(devirq, chip);
+		irq_set_chained_handler(devirq, pm8xxx_irq_handler);
+		irq_set_irq_wake(devirq, 1);
 	}
 
 	return chip;
-- 
1.7.5.4

