From c823cc021864a9450c7626c402be32e77a76493a Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Fri, 30 Aug 2013 17:07:51 +0800
Subject: [PATCH 60/70] msm rpm: change msm_rpmrs_lock to raw_spinlock

There are some gic operating functions inside msm_rpmrs_lock,
so irq needs to be disabled. Here use raw spinlock functions
to fix it.

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
Signed-off-by: Catalin Enache <catalin.enache@windriver.com>
---
 arch/arm/mach-msm/rpm_resources.c |   26 +++++++++++++-------------
 1 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/arch/arm/mach-msm/rpm_resources.c b/arch/arm/mach-msm/rpm_resources.c
index 0cc544c..82ef119 100644
--- a/arch/arm/mach-msm/rpm_resources.c
+++ b/arch/arm/mach-msm/rpm_resources.c
@@ -145,7 +145,7 @@ static struct msm_rpmrs_resource *msm_rpmrs_resources[] = {
 static uint32_t msm_rpmrs_buffer[MSM_RPM_ID_LAST];
 static DECLARE_BITMAP(msm_rpmrs_buffered, MSM_RPM_ID_LAST);
 static DECLARE_BITMAP(msm_rpmrs_listed, MSM_RPM_ID_LAST);
-static DEFINE_SPINLOCK(msm_rpmrs_lock);
+static DEFINE_RAW_SPINLOCK(msm_rpmrs_lock);
 
 #define MSM_RPMRS_VDD(v)  ((v) & (vdd_mask))
 
@@ -606,13 +606,13 @@ static int msm_rpmrs_set_common(
 		unsigned long flags;
 		int rc;
 
-		spin_lock_irqsave(&msm_rpmrs_lock, flags);
+		raw_spin_lock_irqsave(&msm_rpmrs_lock, flags);
 		rc = msm_rpmrs_buffer_request(req, count);
 		if (rc > 0) {
 			msm_rpmrs_update_levels();
 			rc = 0;
 		}
-		spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
+		raw_spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
 
 		return rc;
 	}
@@ -630,13 +630,13 @@ static int msm_rpmrs_clear_common(
 		unsigned long flags;
 		int rc;
 
-		spin_lock_irqsave(&msm_rpmrs_lock, flags);
+		raw_spin_lock_irqsave(&msm_rpmrs_lock, flags);
 		rc = msm_rpmrs_clear_buffer(req, count);
 		if (rc > 0) {
 			msm_rpmrs_update_levels();
 			rc = 0;
 		}
-		spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
+		raw_spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
 
 		if (rc < 0)
 			return rc;
@@ -660,14 +660,14 @@ static ssize_t msm_rpmrs_resource_attr_show(
 	unsigned int temp;
 	int rc;
 
-	spin_lock_irqsave(&msm_rpmrs_lock, flags);
+	raw_spin_lock_irqsave(&msm_rpmrs_lock, flags);
 	/* special case active-set signal for MSM_RPMRS_ID_RPM_CTL */
 	if (GET_RS_FROM_ATTR(attr)->rs[0].id ==
 			msm_rpmrs_rpm_ctl.rs[0].id)
 		temp = GET_RS_FROM_ATTR(attr)->rs[0].value;
 	else
 		temp = GET_RS_FROM_ATTR(attr)->enable_low_power;
-	spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
+	raw_spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
 
 	kp.arg = &temp;
 	rc = param_get_uint(buf, &kp);
@@ -693,7 +693,7 @@ static ssize_t msm_rpmrs_resource_attr_store(struct kobject *kobj,
 	if (rc)
 		return rc;
 
-	spin_lock_irqsave(&msm_rpmrs_lock, flags);
+	raw_spin_lock_irqsave(&msm_rpmrs_lock, flags);
 	GET_RS_FROM_ATTR(attr)->enable_low_power = temp;
 
 	/* special case active-set signal for MSM_RPMRS_ID_RPM_CTL */
@@ -712,7 +712,7 @@ static ssize_t msm_rpmrs_resource_attr_store(struct kobject *kobj,
 	}
 
 	msm_rpmrs_update_levels();
-	spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
+	raw_spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
 
 	return count;
 }
@@ -805,7 +805,7 @@ int msm_rpmrs_set_bits_noirq(int ctx, struct msm_rpm_iv_pair *req, int count,
 	if (ctx != MSM_RPM_CTX_SET_0)
 		return -ENOSYS;
 
-	spin_lock_irqsave(&msm_rpmrs_lock, flags);
+	raw_spin_lock_irqsave(&msm_rpmrs_lock, flags);
 	for (i = 0; i < ARRAY_SIZE(msm_rpmrs_resources); i++) {
 		rs = msm_rpmrs_resources[i];
 		if (rs->rs[0].id == req[0].id && rs->size == count) {
@@ -827,7 +827,7 @@ int msm_rpmrs_set_bits_noirq(int ctx, struct msm_rpm_iv_pair *req, int count,
 			}
 		}
 	}
-	spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
+	raw_spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
 
 	return rc;
 
@@ -852,7 +852,7 @@ void msm_rpmrs_show_resources(void)
 	unsigned long flags;
 	int i;
 
-	spin_lock_irqsave(&msm_rpmrs_lock, flags);
+	raw_spin_lock_irqsave(&msm_rpmrs_lock, flags);
 	for (i = 0; i < ARRAY_SIZE(msm_rpmrs_resources); i++) {
 		rs = msm_rpmrs_resources[i];
 		if (rs->rs[0].id < MSM_RPM_ID_LAST)
@@ -864,7 +864,7 @@ void msm_rpmrs_show_resources(void)
 			pr_info("%s: resource %s: value %d\n",
 				__func__, rs->name, rs->rs[0].value);
 	}
-	spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
+	raw_spin_unlock_irqrestore(&msm_rpmrs_lock, flags);
 }
 
 struct msm_rpmrs_limits *msm_rpmrs_lowest_limits(
-- 
1.7.5.4

