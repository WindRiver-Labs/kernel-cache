From ef06cd48ae89f30489ba3d8917eb6b9e2e361695 Mon Sep 17 00:00:00 2001
From: David Daney <ddaney@caviumnetworks.com>
Date: Tue, 7 Sep 2010 16:37:35 -0700
Subject: [PATCH 16/97] MIPS: Handle bit holes in sparse mem.

Source: Cavium SDK 2.1.0-407

Initialize all the regions, and don't probe pages that are not
present.

Register the init memory as present otherwise, SPARSE_MEM can crash
when the init memory is released.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Integrated-by: Phil Staub <Phil.Staub@windriver.com>
---
 arch/mips/kernel/setup.c |   35 +++++++++++++++++++++++------------
 arch/mips/mm/init.c      |    2 +-
 2 files changed, 24 insertions(+), 13 deletions(-)

diff --git a/arch/mips/kernel/setup.c b/arch/mips/kernel/setup.c
index b2fb161..821172e 100644
--- a/arch/mips/kernel/setup.c
+++ b/arch/mips/kernel/setup.c
@@ -396,22 +396,32 @@ static void __init bootmem_init(void)
 		/*
 		 * Reserve usable memory.
 		 */
-		if (boot_mem_map.map[i].type != BOOT_MEM_RAM)
+		switch (boot_mem_map.map[i].type) {
+		case BOOT_MEM_RAM:
+		case BOOT_MEM_INIT_RAM:
+			break;
+		default:
+			/* Not usable memory */
 			continue;
+		}
 
 		start = PFN_UP(boot_mem_map.map[i].addr);
 		end   = PFN_DOWN(boot_mem_map.map[i].addr
 				    + boot_mem_map.map[i].size);
-		/*
-		 * We are rounding up the start address of usable memory
-		 * and at the end of the usable range downwards.
-		 */
-		if (start >= max_low_pfn)
-			continue;
-		if (start < reserved_end)
-			start = reserved_end;
-		if (end > max_low_pfn)
-			end = max_low_pfn;
+
+		if (boot_mem_map.map[i].type == BOOT_MEM_RAM) {
+			/*
+			 * We are rounding up the start address of
+			 * usable memory and at the end of the usable
+			 * range downwards.
+			 */
+			if (start >= max_low_pfn)
+				continue;
+			if (start < reserved_end)
+				start = reserved_end;
+			if (end > max_low_pfn)
+				end = max_low_pfn;
+		}
 
 		/*
 		 * ... finally, is the area going away?
@@ -421,7 +431,8 @@ static void __init bootmem_init(void)
 		size = end - start;
 
 		/* Register lowmem ranges */
-		free_bootmem(PFN_PHYS(start), size << PAGE_SHIFT);
+		if (boot_mem_map.map[i].type == BOOT_MEM_RAM)
+			free_bootmem(PFN_PHYS(start), size << PAGE_SHIFT);
 		memory_present(0, start, end);
 	}
 
diff --git a/arch/mips/mm/init.c b/arch/mips/mm/init.c
index 564c1b2..dc206b2 100644
--- a/arch/mips/mm/init.c
+++ b/arch/mips/mm/init.c
@@ -389,7 +389,7 @@ void __init native_mem_init(void)
 
 	reservedpages = ram = 0;
 	for (tmp = 0; tmp < max_low_pfn; tmp++)
-		if (page_is_ram(tmp)) {
+		if (page_is_ram(tmp) && pfn_valid(tmp)) {
 			ram++;
 			if (PageReserved(pfn_to_page(tmp)))
 				reservedpages++;
-- 
1.7.0

