From d07c023d1677361951b112750274acc70a7a1257 Mon Sep 17 00:00:00 2001
From: David Daney <ddaney@caviumnetworks.com>
Date: Mon, 13 Jun 2011 18:33:34 -0700
Subject: [PATCH 55/97] usb: octeon-hcd: Fix driver broken registration.

Source: Cavium SDK 2.1.0-407

Platform drivers must be registered with the
platform_driver_register() function.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Integrated-by: Phil Staub <Phil.Staub@windriver.com>
---
 drivers/usb/host/octeon-hcd.c |   25 ++++++++++++++-----------
 1 files changed, 14 insertions(+), 11 deletions(-)

diff --git a/drivers/usb/host/octeon-hcd.c b/drivers/usb/host/octeon-hcd.c
index 5d975e6..76a20e5 100644
--- a/drivers/usb/host/octeon-hcd.c
+++ b/drivers/usb/host/octeon-hcd.c
@@ -10,7 +10,6 @@
 #include <linux/pci.h>
 #include <linux/interrupt.h>
 #include <linux/platform_device.h>
-#include <linux/platform_device.h>
 #include <linux/usb.h>
 
 #include <asm/time.h>
@@ -658,12 +657,13 @@ static const struct hc_driver octeon_hc_driver = {
 };
 
 
-static int octeon_usb_driver_probe(struct device *dev)
+static int octeon_usb_driver_probe(struct platform_device *pdev)
 {
 	int status;
 	int initialize_flags;
-	int usb_num = to_platform_device(dev)->id;
-	int irq = platform_get_irq(to_platform_device(dev), 0);
+	int usb_num = pdev->id;
+	int irq = platform_get_irq(pdev, 0);
+	struct device *dev = &pdev->dev;
 	struct octeon_hcd *priv;
 	struct usb_hcd *hcd;
 	unsigned long flags;
@@ -721,9 +721,10 @@ static int octeon_usb_driver_probe(struct device *dev)
 	return 0;
 }
 
-static int octeon_usb_driver_remove(struct device *dev)
+static int octeon_usb_driver_remove(struct platform_device *pdev)
 {
 	int status;
+	struct device *dev = &pdev->dev;
 	struct usb_hcd *hcd = dev_get_drvdata(dev);
 	struct octeon_hcd *priv = hcd_to_octeon(hcd);
 	unsigned long flags;
@@ -764,9 +765,11 @@ static int octeon_usb_driver_remove_phy(struct device *dev)
 }
 #endif
 
-static struct device_driver octeon_usb_driver = {
-	.name       = "OcteonUSB",
-	.bus        = &platform_bus_type,
+static struct platform_driver octeon_usb_driver = {
+	.driver = {
+		.name	= "OcteonUSB",
+		.owner	= THIS_MODULE,
+	},
 	.probe      = octeon_usb_driver_probe,
 	.remove     = octeon_usb_driver_remove,
 };
@@ -826,7 +829,7 @@ static int __init octeon_usb_module_init(void)
 	if (usb_disabled() || num_devices == 0)
 		return -ENODEV;
 
-	if (driver_register(&octeon_usb_driver)) {
+	if (platform_driver_register(&octeon_usb_driver)) {
 		DEBUG_FATAL("OcteonUSB: Failed to register driver\n");
 		return -ENOMEM;
 	}
@@ -863,7 +866,7 @@ static int __init octeon_usb_module_init(void)
 		irq_resource.start = (device == 0) ? OCTEON_IRQ_USB0 : OCTEON_IRQ_USB1;
 		irq_resource.end = irq_resource.start;
 		irq_resource.flags = IORESOURCE_IRQ;
-		pdev = platform_device_register_simple((char *)octeon_usb_driver.name, device, &irq_resource, 1);
+		pdev = platform_device_register_simple((char *)octeon_usb_driver.driver.name, device, &irq_resource, 1);
 		if (!pdev) {
 			DEBUG_FATAL("OcteonUSB: Failed to allocate platform device for USB%d\n", device);
 			return -ENOMEM;
@@ -881,7 +884,7 @@ static void __exit octeon_usb_module_cleanup(void)
 	__unregister_for_kexec_shutdown();
 	__shutdown_usb_ports();
 	if (octeon_usb_registered)
-		driver_unregister(&octeon_usb_driver);
+		platform_driver_unregister(&octeon_usb_driver);
 }
 
 MODULE_LICENSE("GPL");
-- 
1.7.0

