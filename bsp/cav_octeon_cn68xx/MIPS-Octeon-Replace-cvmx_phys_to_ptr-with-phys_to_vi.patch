From 49eadd01f34036c0cfcb8245270f4a349036318f Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 8 Jul 2011 16:16:59 -0700
Subject: [PATCH 70/97] MIPS: Octeon: Replace cvmx_phys_to_ptr() with phys_to_virt(), and vice versa.

Source: Cavium SDK 2.1.0-407

Internally the kernel uses phys_to_virt() and virt_to_phys(), so use
them instead.  Also implement cvmx_phys_to_ptr() with phys_to_virt().

Signed-off-by: David Daney <david.daney@cavium.com>
Integrated-by: Phil Staub <Phil.Staub@windriver.com>
---
 arch/mips/cavium-octeon/smp.c       |    3 +--
 arch/mips/include/asm/octeon/cvmx.h |   30 ++++--------------------------
 drivers/net/octeon/ethernet-mem.c   |    1 -
 drivers/net/octeon/ethernet-napi.c  |    6 +++---
 drivers/net/octeon/ethernet-rx.c    |    2 +-
 drivers/net/octeon/ethernet-util.h  |    7 +++----
 drivers/net/octeon/ethernet-xmit.c  |    2 +-
 drivers/net/octeon/ethernet.c       |    2 +-
 8 files changed, 14 insertions(+), 39 deletions(-)

diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index 4029520..1ea2b75 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -427,8 +427,7 @@ static int octeon_update_boot_vector(unsigned int cpu)
 	unsigned int avail_coremask;
 	const struct cvmx_bootmem_named_block_desc *block_desc;
 	boot_init_vector_t *boot_vect =
-		(boot_init_vector_t *) cvmx_phys_to_ptr(0x0 +
-						  BOOTLOADER_BOOT_VECTOR);
+		(boot_init_vector_t *) phys_to_virt(BOOTLOADER_BOOT_VECTOR);
 
 	block_desc = cvmx_bootmem_find_named_block(LINUX_APP_BOOT_BLOCK_NAME);
 
diff --git a/arch/mips/include/asm/octeon/cvmx.h b/arch/mips/include/asm/octeon/cvmx.h
index 39a3a1b..417c957 100644
--- a/arch/mips/include/asm/octeon/cvmx.h
+++ b/arch/mips/include/asm/octeon/cvmx.h
@@ -31,6 +31,8 @@
 #include <linux/kernel.h>
 #include <linux/string.h>
 #include <linux/delay.h>
+#include <linux/io.h>
+
 #include <asm/byteorder.h>
 #ifdef CONFIG_WRHV
 #include <asm/cpu.h>
@@ -167,22 +169,7 @@ static inline uint64_t cvmx_build_bits(uint64_t high_bit,
  */
 static inline uint64_t cvmx_ptr_to_phys(void *ptr)
 {
-	if (sizeof(void *) == 8) {
-		/*
-		 * We're running in 64 bit mode. Normally this means
-		 * that we can use 40 bits of address space (the
-		 * hardware limit). Unfortunately there is one case
-		 * were we need to limit this to 30 bits, sign
-		 * extended 32 bit. Although these are 64 bits wide,
-		 * only 30 bits can be used.
-		 */
-		if ((CAST64(ptr) >> 62) == 3)
-			return CAST64(ptr) & cvmx_build_mask(30);
-		else
-			return CAST64(ptr) & cvmx_build_mask(40);
-	} else {
-		return (long)(ptr) & 0x1fffffff;
-	}
+	return virt_to_phys(ptr);
 }
 
 /**
@@ -195,16 +182,7 @@ static inline uint64_t cvmx_ptr_to_phys(void *ptr)
  */
 static inline void *cvmx_phys_to_ptr(uint64_t physical_address)
 {
-	if (sizeof(void *) == 8) {
-		/* Just set the top bit, avoiding any TLB uglyness */
-		return CASTPTR(void,
-			       CVMX_ADD_SEG(CVMX_MIPS_SPACE_XKPHYS,
-					    physical_address));
-	} else {
-		return CASTPTR(void,
-			       CVMX_ADD_SEG32(CVMX_MIPS32_SPACE_KSEG0,
-					      physical_address));
-	}
+	return phys_to_virt(physical_address);
 }
 
 /* The following #if controls the definition of the macro
diff --git a/drivers/net/octeon/ethernet-mem.c b/drivers/net/octeon/ethernet-mem.c
index 0073a24..71cf15d 100644
--- a/drivers/net/octeon/ethernet-mem.c
+++ b/drivers/net/octeon/ethernet-mem.c
@@ -165,7 +165,6 @@ static void cvm_oct_free_hw_memory(int pool, int size, int elements)
 		fpa = cvmx_fpa_alloc(pool);
 		if (fpa) {
 			elements--;
-			fpa = (char *)phys_to_virt(cvmx_ptr_to_phys(fpa));
 			memory = *((char **)fpa - 1);
 			kfree(memory);
 		}
diff --git a/drivers/net/octeon/ethernet-napi.c b/drivers/net/octeon/ethernet-napi.c
index 789f088..d97c3d8 100644
--- a/drivers/net/octeon/ethernet-napi.c
+++ b/drivers/net/octeon/ethernet-napi.c
@@ -201,7 +201,7 @@ static int CVM_OCT_NAPI_POLL(struct napi_struct *napi, int budget)
 		 * buffer.
 		 */
 		if (likely(skb_in_hw)) {
-			skb->data = skb->head + work->packet_ptr.s.addr - cvmx_ptr_to_phys(skb->head);
+			skb->data = phys_to_virt(work->packet_ptr.s.addr);
 			prefetch(skb->data);
 			skb->len = work->word1.len;
 			skb_set_tail_pointer(skb, skb->len);
@@ -247,7 +247,7 @@ static int CVM_OCT_NAPI_POLL(struct napi_struct *napi, int budget)
 					union cvmx_buf_ptr  next_ptr;
 					int segment_size;
 
-					next_ptr = *(union cvmx_buf_ptr *)cvmx_phys_to_ptr(segment_ptr.s.addr - 8);
+					next_ptr = *(union cvmx_buf_ptr *)phys_to_virt(segment_ptr.s.addr - 8);
 
 			/*
 			 * Octeon Errata PKI-100: The segment size is
@@ -268,7 +268,7 @@ static int CVM_OCT_NAPI_POLL(struct napi_struct *napi, int budget)
 						segment_size = len;
 					/* Copy the data into the packet */
 					memcpy(skb_put(skb, segment_size),
-					       cvmx_phys_to_ptr(segment_ptr.s.addr),
+					       phys_to_virt(segment_ptr.s.addr),
 					       segment_size);
 					len -= segment_size;
 					segment_ptr = next_ptr;
diff --git a/drivers/net/octeon/ethernet-rx.c b/drivers/net/octeon/ethernet-rx.c
index 1b8ac8a..de92656 100644
--- a/drivers/net/octeon/ethernet-rx.c
+++ b/drivers/net/octeon/ethernet-rx.c
@@ -248,7 +248,7 @@ static inline int cvm_oct_check_rcv_error(cvmx_wqe_t *work)
 		gmxx_rxx_frm_ctl.u64 = cvmx_read_csr(CVMX_GMXX_RXX_FRM_CTL(index, interface));
 		if (gmxx_rxx_frm_ctl.s.pre_chk == 0) {
 
-			uint8_t *ptr = cvmx_phys_to_ptr(work->packet_ptr.s.addr);
+			uint8_t *ptr = phys_to_virt(work->packet_ptr.s.addr);
 			int i = 0;
 
 			while (i < work->word1.len - 1) {
diff --git a/drivers/net/octeon/ethernet-util.h b/drivers/net/octeon/ethernet-util.h
index f489611..22244ca 100644
--- a/drivers/net/octeon/ethernet-util.h
+++ b/drivers/net/octeon/ethernet-util.h
@@ -33,12 +33,11 @@
 
 /**
  * cvm_oct_get_buffer_ptr - convert packet data address to pointer
- * @packet_ptr: Packet data hardware address
+ * @pd: Packet data hardware address
  *
  * Returns Packet buffer pointer
  */
-static inline void *cvm_oct_get_buffer_ptr(union cvmx_buf_ptr packet_ptr)
+static inline void *cvm_oct_get_buffer_ptr(union cvmx_buf_ptr pd)
 {
-	return cvmx_phys_to_ptr(((packet_ptr.s.addr >> 7) - packet_ptr.s.back)
-				<< 7);
+	return phys_to_virt(((pd.s.addr >> 7) - pd.s.back) << 7);
 }
diff --git a/drivers/net/octeon/ethernet-xmit.c b/drivers/net/octeon/ethernet-xmit.c
index a247d3e..e7282e0 100644
--- a/drivers/net/octeon/ethernet-xmit.c
+++ b/drivers/net/octeon/ethernet-xmit.c
@@ -358,7 +358,7 @@ dont_put_skbuff_in_hw:
 
 	/* Send the packet to the output queue */
 	if (queue_type == QUEUE_WQE) {
-		uint64_t word2 = cvmx_ptr_to_phys(work);
+		uint64_t word2 = virt_to_phys(work);
 		if (priv->tx_timestamp_sw) {
 			/* The first 8 bytes work->packet_data will get the timestamp */
 			*(uint64_t *)work->packet_data = ktime_to_ns(ktime_get_real());
diff --git a/drivers/net/octeon/ethernet.c b/drivers/net/octeon/ethernet.c
index c70562e..8413376 100644
--- a/drivers/net/octeon/ethernet.c
+++ b/drivers/net/octeon/ethernet.c
@@ -231,7 +231,7 @@ int cvm_oct_free_work(void *work_queue_entry)
 	union cvmx_buf_ptr segment_ptr = work->packet_ptr;
 
 	while (segments--) {
-		union cvmx_buf_ptr next_ptr = *(union cvmx_buf_ptr *)cvmx_phys_to_ptr(segment_ptr.s.addr - 8);
+		union cvmx_buf_ptr next_ptr = *(union cvmx_buf_ptr *)phys_to_virt(segment_ptr.s.addr - 8);
 		if (unlikely(!segment_ptr.s.i))
 			cvmx_fpa_free(cvm_oct_get_buffer_ptr(segment_ptr),
 				      segment_ptr.s.pool,
-- 
1.7.0

