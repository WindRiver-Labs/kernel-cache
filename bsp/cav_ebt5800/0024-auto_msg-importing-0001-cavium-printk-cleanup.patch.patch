From 34a6ad328d162dc02ede3703eb4479164af97ff7 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:22:38 -0700
Subject: [PATCH] auto_msg: importing 0001-cavium-printk-cleanup.patch

This is an automatic import of patch 0001-cavium-printk-cleanup.patch, no headers were
detected and a default message was constructed
---
 arch/mips/cavium-octeon/dma-octeon.c    |    8 ++++----
 arch/mips/cavium-octeon/hal.c           |   14 +++++++-------
 arch/mips/cavium-octeon/i8259.c         |   14 +++++++-------
 arch/mips/cavium-octeon/perf_counters.c |    4 ++--
 arch/mips/cavium-octeon/setup.c         |    2 +-
 arch/mips/cavium-octeon/smp.c           |   10 +++++-----
 arch/mips/cavium-octeon/userio.c        |    6 +++---
 arch/mips/kernel/irq-octeon.c           |    2 +-
 arch/mips/mm/c-octeon.c                 |   26 +++++++++++++++-----------
 9 files changed, 45 insertions(+), 41 deletions(-)

diff --git a/arch/mips/cavium-octeon/dma-octeon.c b/arch/mips/cavium-octeon/dma-octeon.c
index eec62d7..f52fe9b 100644
--- a/arch/mips/cavium-octeon/dma-octeon.c
+++ b/arch/mips/cavium-octeon/dma-octeon.c
@@ -132,7 +132,7 @@ dma_addr_t dma_map_single(struct device *dev, void *ptr, size_t size,
 			panic("dma_map_single: Attempt to map illegal memory address 0x%lx\n", physical);
 		else if ((physical + size >= (4ull<<30) - (OCTEON_PCI_BAR1_HOLE_SIZE<<20)) &&
 			 physical < (4ull<<30))
-			printk("dma_map_single: Warning: Maping memory address that might conflict with devices 0x%lx-0x%lx\n", physical, physical+size-1);
+			pr_warning("dma_map_single: Warning: Mapping memory address that might conflict with devices 0x%lx-0x%lx\n", physical, physical+size-1);
 		/* The 2nd 256MB is mapped at 256<<20 instead of 0x410000000 */
 		if ((physical >= 0x410000000ull) && physical < 0x420000000ull)
 			result = physical - 0x400000000ull;
@@ -264,12 +264,12 @@ dma_addr_t dma_map_single(struct device *dev, void *ptr, size_t size,
 		}
 	}
 
-	printk("dma_map_single: Can't find empty BAR1 index for physical mapping 0x%llx\n", (unsigned long long) physical);
+	pr_err("dma_map_single: Can't find empty BAR1 index for physical mapping 0x%llx\n", (unsigned long long) physical);
 
       done_unlock:
 	spin_unlock_irqrestore(&bar1_lock, flags);
       done:
-	/* printk("dma_map_single 0x%lx->0x%lx\n", physical, result); */
+	/* pr_debug("dma_map_single 0x%lx->0x%lx\n", physical, result); */
 	return result;
 #endif
 }
@@ -351,7 +351,7 @@ void dma_unmap_single(struct device *dev, dma_addr_t dma_addr, size_t size,
 		      (int) index);
 	spin_unlock_irqrestore(&bar1_lock, flags);
       done:
-	/* printk("dma_unmap_single 0x%lx\n", dma_addr); */
+	/* pr_debug("dma_unmap_single 0x%lx\n", dma_addr); */
 	return;
 #endif
 }
diff --git a/arch/mips/cavium-octeon/hal.c b/arch/mips/cavium-octeon/hal.c
index a87dcca..e666621 100644
--- a/arch/mips/cavium-octeon/hal.c
+++ b/arch/mips/cavium-octeon/hal.c
@@ -79,17 +79,17 @@ void octeon_check_cpu_bist(void)
 	mask = 0x1f00000000ull;
 	bist_val = __read_64bit_c0_register($27, 0);
 	if (bist_val & mask)
-		printk("Core%d BIST Failure: CacheErr(icache) = 0x%llx\n",
+		pr_err("Core%d BIST Failure: CacheErr(icache) = 0x%llx\n",
 		       coreid, bist_val);
 
 	bist_val = __read_64bit_c0_register($27, 1);
 	if (bist_val & 1)
-		printk("Core%d L1 Dcache parity error: CacheErr(dcache) = 0x%llx\n", coreid, bist_val);
+		pr_err("Core%d L1 Dcache parity error: CacheErr(dcache) = 0x%llx\n", coreid, bist_val);
 
 	mask = 0xfc00000000000000ull;
 	bist_val = __read_64bit_c0_register($11, 7);
 	if (bist_val & mask)
-		printk("Core%d BIST Failure: COP0_CVM_MEM_CTL = 0x%llx\n",
+		pr_err("Core%d BIST Failure: COP0_CVM_MEM_CTL = 0x%llx\n",
 		       coreid, bist_val);
 
 	__write_64bit_c0_register($27, 1, 0);
@@ -338,7 +338,7 @@ void octeon_hal_init(void)
 		   will be freed */
 #ifdef CONFIG_CAVIUM_RESERVE32_USE_WIRED_TLB
 		if (CONFIG_CAVIUM_RESERVE32 & 0x1ff)
-			printk("CAVIUM_RESERVE32 isn't a multiple of 512MB. This is required if CAVIUM_RESERVE32_USE_WIRED_TLB is set\n");
+			pr_err("CAVIUM_RESERVE32 isn't a multiple of 512MB. This is required if CAVIUM_RESERVE32_USE_WIRED_TLB is set\n");
 		else
 			addr = cvmx_bootmem_phy_named_block_alloc
 				(CONFIG_CAVIUM_RESERVE32 << 20, 0, 0, 512 << 20,
@@ -351,7 +351,7 @@ void octeon_hal_init(void)
 			 "CAVIUM_RESERVE32", 0);
 #endif
 		if (addr < 0)
-			printk("Failed to allocate CAVIUM_RESERVE32 memory area\n");
+			pr_err("Failed to allocate CAVIUM_RESERVE32 memory area\n");
 		else
 			octeon_reserve32_memory = addr;
 
@@ -360,7 +360,7 @@ void octeon_hal_init(void)
 
 #ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2
 	if (cvmx_read_csr(CVMX_L2D_FUS3) & (3ull << 34)) {
-		printk("Skipping L2 locking due to reduced L2 cache size\n");
+		pr_info("Skipping L2 locking due to reduced L2 cache size\n");
 	} else {
 		uint32_t ebase = read_c0_ebase() & 0x3ffff000;
 #ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_TLB
@@ -432,7 +432,7 @@ static void octeon_hal_setup_per_cpu_reserved32(void *unused)
 	uint32_t entryhi = (0x80000000UL - (CONFIG_CAVIUM_RESERVE32 << 20));
 	while (size >= 512) {
 		/*
-		printk("CPU%d: Adding double wired TLB entry for 0x%lx\n",
+		pr_info("CPU%d: Adding double wired TLB entry for 0x%lx\n",
 		       smp_processor_id(), entryhi);
 		*/
 		add_wired_entry(entrylo0, entrylo1, entryhi, PM_256M);
diff --git a/arch/mips/cavium-octeon/i8259.c b/arch/mips/cavium-octeon/i8259.c
index 8723975..1b01b96 100644
--- a/arch/mips/cavium-octeon/i8259.c
+++ b/arch/mips/cavium-octeon/i8259.c
@@ -98,7 +98,7 @@ static irqreturn_t octeon_i8259_interrupt(int cpl, void *dev_id)
 						   requested the interrupt */
 				int irq = (slave_isr & 7) + OCTEON_IRQ_I8259S0;
 				/*
-				printk("8259: Interrupt %d from slave\n", irq);
+				pr_debug("8259: Interrupt %d from slave\n", irq);
 				*/
 				if (irq_desc[irq].action)
 					do_IRQ(irq);
@@ -107,11 +107,11 @@ static irqreturn_t octeon_i8259_interrupt(int cpl, void *dev_id)
 				outb(OCW2 | OCW2_SPECIFIC_EOI | (slave_isr & 7),
 				     OCW2_ADDRESS + SLAVE);
 			} else
-				printk("8259: Spurious interrupt from master for slave\n");
+				pr_err("8259: Spurious interrupt from master for slave\n");
 		} else {
 			int irq = (master_isr & 7) + OCTEON_IRQ_I8259M0;
 			/*
-			printk("8259: Interrupt %d from master\n", irq);
+			pr_debug("8259: Interrupt %d from master\n", irq);
 			*/
 			if (irq_desc[irq].action)
 				do_IRQ(irq);
@@ -122,7 +122,7 @@ static irqreturn_t octeon_i8259_interrupt(int cpl, void *dev_id)
 
 		return IRQ_HANDLED;
 	} else {
-		printk("8259: Spurious interrupt from master\n");
+		pr_err("8259: Spurious interrupt from master\n");
 		return IRQ_NONE;
 	}
 }
@@ -157,14 +157,14 @@ void octeon_i8259_setup(int irq_line)
 
 	/* Setup the GPIO pin if the interrupt is hooked to it */
 	if ((irq_line >= 24) && (irq_line <= 39)) {
-		printk("8259: Setting GPIO %d for the interrupt\n",
-		       irq_line - 24);
+		pr_notice("8259: Setting GPIO %d for the interrupt\n",
+			  irq_line - 24);
 		cvmx_write_csr(CVMX_GPIO_BIT_CFGX(irq_line - 24), 0x114);
 		if (request_irq(irq_line, octeon_i8259_interrupt, IRQF_SHARED,
 				"8259", octeon_i8259_interrupt)) {
 		}
 	} else if ((irq_line >= 44) && (irq_line <= 47)) {
-		printk("8259: Using PCI INT-%c\n", irq_line - 44 + 'A');
+		pr_notice("8259: Using PCI INT-%c\n", irq_line - 44 + 'A');
 		if (request_irq(irq_line, octeon_i8259_interrupt, IRQF_SHARED,
 				"8259", octeon_i8259_interrupt)) {
 		}
diff --git a/arch/mips/cavium-octeon/perf_counters.c b/arch/mips/cavium-octeon/perf_counters.c
index 1273544..8ccff64 100644
--- a/arch/mips/cavium-octeon/perf_counters.c
+++ b/arch/mips/cavium-octeon/perf_counters.c
@@ -534,7 +534,7 @@ static int proc_perf_ioctl(struct inode *inode, struct file *file,
 			   unsigned int cmd, unsigned long arg)
 {
 	/*
-	printk("proc_perf_ioctl(cmd=0x%x(%u), arg=0x%lx)\n", cmd, cmd, arg);
+	pr_debug("proc_perf_ioctl(cmd=0x%x(%u), arg=0x%lx)\n", cmd, cmd, arg);
 	*/
 	switch (cmd) {
 	case PROC_PERF_IOCTL_SETUP_COUNTER0:
@@ -633,7 +633,7 @@ static struct file_operations proc_perf_operations = {
  */
 static int __init proc_perf_init(void)
 {
-	printk("/proc/octeon_perf: Octeon performace counter interface loaded\n");
+	pr_notice("/proc/octeon_perf: Octeon performace counter interface loaded\n");
 
 	memset(proc_perf_label, 0, sizeof(proc_perf_label));
 	memset(proc_perf_l2label, 0, sizeof(proc_perf_l2label));
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 52c6edd..2e49ee7 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -213,7 +213,7 @@ void __init prom_init(void)
 				MAX_MEMORY = 32ull << 30;
 		} else if (strcmp(arg, "ecc_verbose") == 0) {
 			__cvmx_interrupt_ecc_report_single_bit_errors = 1;
-			printk("Reporting of single bit ECC errors is turned on\n");
+			pr_notice("Reporting of single bit ECC errors is turned on\n");
 		} else if (strlen(arcs_cmdline) + strlen(arg) + 1 <
 			   sizeof(arcs_cmdline) - 1) {
 			strcat(arcs_cmdline, " ");
diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index b7b0eb4..836a20f 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -58,7 +58,7 @@ static void octeon_send_ipi_single(int cpu, unsigned int action)
 {
 	int coreid = cpu_logical_map(cpu);
 	/*
-	printk("SMP: Mailbox send cpu=%d, coreid=%d, action=%u\n", cpu,
+	pr_info("SMP: Mailbox send cpu=%d, coreid=%d, action=%u\n", cpu,
 	       coreid, action);
 	*/
 	cvmx_write_csr(CVMX_CIU_MBOX_SETX(coreid), action);
@@ -110,8 +110,8 @@ static void octeon_boot_secondary(int cpu, struct task_struct *idle)
 {
 	int count;
 
-	printk("SMP: Booting CPU%02d (CoreId %2d)...", cpu,
-	       cpu_logical_map(cpu));
+	pr_info("SMP: Booting CPU%02d (CoreId %2d)...", cpu,
+		cpu_logical_map(cpu));
 
 	octeon_processor_sp = __KSTK_TOS(idle);
 	octeon_processor_gp = (unsigned long)(task_thread_info(idle));
@@ -129,7 +129,7 @@ static void octeon_boot_secondary(int cpu, struct task_struct *idle)
 		count--;
 	}
 	if (count == 0)
-		printk("Timeout\n");
+		pr_err("Secondary boot timeout\n");
 }
 
 
@@ -145,7 +145,7 @@ static void octeon_init_secondary(void)
 	octeon_check_cpu_bist();
 
 	/*
-	printk("SMP: CPU%d (CoreId %lu) started\n", cpu, coreid);
+	pr_info("SMP: CPU%d (CoreId %lu) started\n", cpu, coreid);
 	*/
 	/* Enable Mailbox interrupts to this core. These are the only
 	   interrupts allowed on line 3 */
diff --git a/arch/mips/cavium-octeon/userio.c b/arch/mips/cavium-octeon/userio.c
index 6e0ece7..993cb0a 100644
--- a/arch/mips/cavium-octeon/userio.c
+++ b/arch/mips/cavium-octeon/userio.c
@@ -133,9 +133,9 @@ void octeon_user_io_init(void)
 	   legal value. */
 
 	if (smp_processor_id() == 0)
-		printk("CVMSEG size: %d cache lines (%d bytes)\n",
-		       CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE,
-		       CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE * 128);
+		pr_notice("CVMSEG size: %d cache lines (%d bytes)\n",
+			  CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE,
+			  CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE * 128);
 
 	__write_64bit_c0_register($11, 7, cvmmemctl.u64);
 
diff --git a/arch/mips/kernel/irq-octeon.c b/arch/mips/kernel/irq-octeon.c
index 5ab001b..399c637 100644
--- a/arch/mips/kernel/irq-octeon.c
+++ b/arch/mips/kernel/irq-octeon.c
@@ -424,7 +424,7 @@ void __init arch_init_irq(void)
 	int irq;
 
 	if (NR_IRQS < OCTEON_IRQ_LAST)
-		printk("octeon_irq_init: NR_IRQS is set too low\n");
+		pr_err("octeon_irq_init: NR_IRQS is set too low\n");
 
 	/* 0-7 Mips internal */
 	for (irq = OCTEON_IRQ_SW0; irq <= OCTEON_IRQ_TIMER; irq++) {
diff --git a/arch/mips/mm/c-octeon.c b/arch/mips/mm/c-octeon.c
index 80c121e..2bab411 100644
--- a/arch/mips/mm/c-octeon.c
+++ b/arch/mips/mm/c-octeon.c
@@ -205,13 +205,17 @@ static void __init probe_octeon(void)
 	c->dcache.sets = dcache_size / (c->dcache.linesz * c->dcache.ways);
 
 	if (smp_processor_id() == 0) {
-		printk("Primary instruction cache %ldkB, %s, %d way, %d sets, linesize %d bytes.\n",
-		icache_size >> 10,
-		cpu_has_vtag_icache ? "virtually tagged" : "physically tagged",
-		c->icache.ways, c->icache.sets, c->icache.linesz);
-
-		printk("Primary data cache %ldkB, %d-way, %d sets, linesize %d bytes.\n",
-		dcache_size >> 10, c->dcache.ways, c->dcache.sets, c->dcache.linesz);
+		pr_notice("Primary instruction cache %ldkB, %s, %d way, "
+			  "%d sets, linesize %d bytes.\n",
+			  icache_size >> 10,
+			  cpu_has_vtag_icache ?
+			  	"virtually tagged" : "physically tagged",
+			  c->icache.ways, c->icache.sets, c->icache.linesz);
+
+		pr_notice("Primary data cache %ldkB, %d-way, %d sets, "
+			  "linesize %d bytes.\n",
+			  dcache_size >> 10, c->dcache.ways,
+			  c->dcache.sets, c->dcache.linesz);
 	}
 }
 
@@ -253,14 +257,14 @@ static void  cache_parity_error_octeon(int non_recoverable)
 	unsigned long coreid = cvmx_get_core_num();
 	uint64_t icache_err = read_c0_cacheerr();
 
-	printk("Cache error exception:\n");
-	printk("cp0_errorepc == %lx\n", read_c0_errorepc());
+	pr_err("Cache error exception:\n");
+	pr_err("cp0_errorepc == %lx\n", read_c0_errorepc());
 	if (icache_err & 1) {
-		printk("CacheErr (Icache) == %llx\n", (unsigned long long)icache_err);
+		pr_err("CacheErr (Icache) == %llx\n", (unsigned long long)icache_err);
 		write_c0_cacheerr(0);
 	}
 	if (cache_err_dcache[coreid] & 1) {
-		printk("CacheErr (Dcache) == %llx\n", (unsigned long long)cache_err_dcache[coreid]);
+		pr_err("CacheErr (Dcache) == %llx\n", (unsigned long long)cache_err_dcache[coreid]);
 		cache_err_dcache[coreid] = 0;
 	}
 
-- 
1.6.0.3

