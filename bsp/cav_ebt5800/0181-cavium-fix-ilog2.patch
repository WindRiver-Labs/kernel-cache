From a5f6bf8dcb071d50aebe27bd39977095d1958de7 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:23:18 -0700
Subject: [PATCH] cavium: fix ilog2

Switch from using MIPS-specific __ilog2 to the generic ilog2 version.

Signed-off-by: Tomaso Paoletti <tpaoletti@caviumnetworks.com>
---
 arch/mips/mm/tlbex.c |   30 +++++++++++++++---------------
 1 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index e7842f8..d4d0ee3 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -867,8 +867,8 @@ static void __cpuinit __maybe_unused build_get_ptep(u32 **p, unsigned int tmp, u
 static __init __maybe_unused void build_convert_pte_to_entrylo(u32 **p, unsigned int reg)
 {
 #if defined(CONFIG_USE_RI_XI_PAGE_BITS)
-	uasm_i_dsrl(p, reg, reg, __ilog2(_PAGE_NO_EXEC));
-	uasm_i_drotr(p, reg, reg, __ilog2(_PAGE_GLOBAL) - __ilog2(_PAGE_NO_EXEC));
+	uasm_i_dsrl(p, reg, reg, ilog2(_PAGE_NO_EXEC));
+	uasm_i_drotr(p, reg, reg, ilog2(_PAGE_GLOBAL) - ilog2(_PAGE_NO_EXEC));
 #elif defined(CONFIG_64BIT_PHYS_ADDR)
 	uasm_i_dsrl(p, reg, reg, 6);
 #else
@@ -879,10 +879,10 @@ static __init __maybe_unused void build_convert_pte_to_entrylo(u32 **p, unsigned
 static __cpuinit void build_convert_pte_to_entrylo2(u32 **p, unsigned int e0, unsigned int e1)
 {
 #if defined(CONFIG_USE_RI_XI_PAGE_BITS)
-	uasm_i_dsrl(p, e0, e0, __ilog2(_PAGE_NO_EXEC));
-	uasm_i_dsrl(p, e1, e1, __ilog2(_PAGE_NO_EXEC));
-	uasm_i_drotr(p, e0, e0, __ilog2(_PAGE_GLOBAL) - __ilog2(_PAGE_NO_EXEC));
-	uasm_i_drotr(p, e1, e1, __ilog2(_PAGE_GLOBAL) - __ilog2(_PAGE_NO_EXEC));
+	uasm_i_dsrl(p, e0, e0, ilog2(_PAGE_NO_EXEC));
+	uasm_i_dsrl(p, e1, e1, ilog2(_PAGE_NO_EXEC));
+	uasm_i_drotr(p, e0, e0, ilog2(_PAGE_GLOBAL) - ilog2(_PAGE_NO_EXEC));
+	uasm_i_drotr(p, e1, e1, ilog2(_PAGE_GLOBAL) - ilog2(_PAGE_NO_EXEC));
 #elif defined(CONFIG_64BIT_PHYS_ADDR)
 	uasm_i_dsrl(p, e0, e0, 6);
 	uasm_i_dsrl(p, e1, e1, 6);
@@ -944,7 +944,7 @@ build_is_huge_pte(u32 **p, struct reloc **r, unsigned int tmp,
 {
 	UASM_i_LW(p, tmp, 0, pmd);
 #ifdef CONFIG_CPU_CAVIUM_OCTEON
-	uasm_il_bbit1(p, r, tmp, __ilog2(_PAGE_HUGE), lid);
+	uasm_il_bbit1(p, r, tmp, ilog2(_PAGE_HUGE), lid);
 #else
 	uasm_i_andi(p, tmp, tmp, _PAGE_HUGE);
 	uasm_il_bnez(p, r, tmp, lid);
@@ -1390,7 +1390,7 @@ build_pte_present(u32 **p, struct uasm_label **l, struct uasm_reloc **r,
 	/* FIXME: We need to check if the read or execute failed because of
 		an inhibit bit or the valid bit being off. Right now we assume
 		it was because of the valid bit, so might do the wrong thing */
-	uasm_il_bbit0(p, r, pte, __ilog2(_PAGE_PRESENT), lid);
+	uasm_il_bbit0(p, r, pte, ilog2(_PAGE_PRESENT), lid);
 	uasm_i_nop(p);
 #else
 	uasm_i_andi(p, pte, pte, _PAGE_PRESENT | _PAGE_READ);
@@ -1446,7 +1446,7 @@ build_pte_modifiable(u32 **p, struct uasm_label **l, struct uasm_reloc **r,
 		     unsigned int pte, unsigned int ptr, enum label_id lid)
 {
 #ifdef CONFIG_CPU_CAVIUM_OCTEON
-	uasm_il_bbit0(p, r, pte, __ilog2(_PAGE_WRITE), lid);
+	uasm_il_bbit0(p, r, pte, ilog2(_PAGE_WRITE), lid);
 	uasm_i_nop(p);
 #else
 	uasm_i_andi(p, pte, pte, _PAGE_WRITE);
@@ -1626,7 +1626,7 @@ build_r4000_tlbchange_handler_head(u32 **p, struct uasm_label **l,
 		instead contains the tlb pte. Check the PAGE_HUGE bit
 		and see if we need to jump to huge tlb processing */
 	UASM_i_LW(p, pte, 0, ptr);
-	uasm_il_bbit1(p, r, pte, __ilog2(_PAGE_HUGE), label_tlb_huge_update);
+	uasm_il_bbit1(p, r, pte, ilog2(_PAGE_HUGE), label_tlb_huge_update);
 	uasm_i_nop(p); /* delay slot */
 #endif
 
@@ -1699,7 +1699,7 @@ static void __cpuinit build_r4000_tlb_load_handler(void)
 		spots a huge page */
 	uasm_l_tlb_huge_update(&l, p);
 	iPTE_LW(&p, &l, PTE, PTR);
-	uasm_il_bbit0(&p, &r, PTE, __ilog2(_PAGE_PRESENT), label_nopage_tlbl);
+	uasm_il_bbit0(&p, &r, PTE, ilog2(_PAGE_PRESENT), label_nopage_tlbl);
 	build_tlb_probe_entry(&p);
 #if defined(_PAGE_NO_READ) || defined(_PAGE_NO_EXEC)
 	/* FIXME: We need to check if the read or execute failed because of
@@ -1707,7 +1707,7 @@ static void __cpuinit build_r4000_tlb_load_handler(void)
 		it was because of the valid bit, so might do the wrong thing */
 	// Nothing for now?
 #else
-	uasm_il_bbit0(&p, &r, PTE, __ilog2(_PAGE_READ), label_nopage_tlbl);
+	uasm_il_bbit0(&p, &r, PTE, ilog2(_PAGE_READ), label_nopage_tlbl);
 #endif
 	uasm_i_ori(&p, PTE, PTE, (_PAGE_ACCESSED | _PAGE_VALID));
 #ifdef CONFIG_SMP
@@ -1771,9 +1771,9 @@ static void __cpuinit build_r4000_tlb_store_handler(void)
 		spots a huge page */
 	uasm_l_tlb_huge_update(&l, p);
 	uasm_iPTE_LW(&p, &l, PTE, PTR);
-	uasm_il_bbit0(&p, &r, PTE, __ilog2(_PAGE_PRESENT), label_nopage_tlbs);
+	uasm_il_bbit0(&p, &r, PTE, ilog2(_PAGE_PRESENT), label_nopage_tlbs);
 	build_tlb_probe_entry(&p);
-	uasm_il_bbit0(&p, &r, PTE, __ilog2(_PAGE_WRITE), label_nopage_tlbs);
+	uasm_il_bbit0(&p, &r, PTE, ilog2(_PAGE_WRITE), label_nopage_tlbs);
 	uasm_i_ori(&p, PTE, PTE, (_PAGE_ACCESSED | _PAGE_MODIFIED | _PAGE_VALID | _PAGE_DIRTY));
 #ifdef CONFIG_SMP
 	uasm_i_SC(&p, PTE, 0, PTR);
@@ -1837,7 +1837,7 @@ static void __cpuinit build_r4000_tlb_modify_handler(void)
 		spots a huge page */
 	uasm_l_tlb_huge_update(&l, p);
 	uasm_iPTE_LW(&p, &l, PTE, PTR);
-	uasm_il_bbit0(&p, &r, PTE, __ilog2(_PAGE_WRITE), label_nopage_tlbm);
+	uasm_il_bbit0(&p, &r, PTE, ilog2(_PAGE_WRITE), label_nopage_tlbm);
 	build_tlb_probe_entry(&p);
 	uasm_i_ori(&p, PTE, PTE, (_PAGE_ACCESSED | _PAGE_MODIFIED | _PAGE_VALID | _PAGE_DIRTY));
 #ifdef CONFIG_SMP
-- 
1.5.5.1

