From c3fbfcc842cae32b88c24f0a870111216cfa65bd Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Mon, 16 Mar 2009 10:49:08 +0800
Subject: [PATCH] I2C: reformat i2c bus driver

Fix formatting issues of i2c bus driver.

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 drivers/i2c/busses/i2c-octeon.c |  272 +++++++++++++++++++--------------------
 1 files changed, 134 insertions(+), 138 deletions(-)

diff --git a/drivers/i2c/busses/i2c-octeon.c b/drivers/i2c/busses/i2c-octeon.c
index eaa05ff..2f58a8f 100644
--- a/drivers/i2c/busses/i2c-octeon.c
+++ b/drivers/i2c/busses/i2c-octeon.c
@@ -17,7 +17,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  */
 
-/* 
+/*
  *  This file was modified by Cavium Networks Inc to:
  *   1) Move direct HW calls to arch directory
  *   2) Support multiple on-chip i2c controllers
@@ -32,9 +32,9 @@
 #include <linux/version.h>
 #include <linux/i2c.h>
 #include <asm/irq.h>
-#include <asm/io.h>
+#include <linux/io.h>
 
-#include <asm/uaccess.h>
+#include <linux/uaccess.h>
 #include <linux/errno.h>
 #include <linux/sched.h>
 #include <linux/interrupt.h>
@@ -42,30 +42,30 @@
 #include <linux/err.h>
 #include <linux/platform_device.h>
 
-#include "i2c-octeon.h" /* HW specific calls */
-
+#include "i2c-octeon.h"		/* HW specific calls */
 
-//#define	I2C_OCTEON_DEBUG
+/* #define       I2C_OCTEON_DEBUG */
 
 #ifdef I2C_OCTEON_DEBUG
-static int i2c_debug = 0;
-#define DEB0(format, arg...)	printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg )
+static int i2c_debug;
+#define DEB0(format, arg...)	\
+	printk(KERN_DEBUG MODULE_NAME "DEBUG: " format "\n", ## arg)
 #define DEB1(format, arg...)	\
-	if (i2c_debug>=1) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	if (i2c_debug >= 1) {	\
+		printk(KERN_DEBUG MODULE_NAME "DEBUG: " format "\n", ## arg);\
 	}
 #define DEB2(format, arg...)	\
-	if (i2c_debug>=2) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	if (i2c_debug >= 2) {	\
+		printk(KERN_DEBUG MODULE_NAME "DEBUG: " format "\n", ## arg);\
 	}
 #define DEB3(format, arg...)	\
-	if (i2c_debug>=3) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	if (i2c_debug >= 3) {	\
+		printk(KERN_DEBUG MODULE_NAME "DEBUG: " format "\n", ## arg);\
 	}
 #define DEB9(format, arg...)	\
 /* debug the protocol by showing transferred bits */	\
-	if (i2c_debug>=9) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	if (i2c_debug >= 9) {	\
+		printk(KERN_DEBUG MODULE_NAME "DEBUG: " format "\n", ## arg);\
 	}
 #else
 #define DEB0(fmt, args...)
@@ -75,210 +75,206 @@ static int i2c_debug = 0;
 #define DEB9(fmt, args...)
 #endif
 
-
 #define MODULE_NAME "OCTEON I2C"
 
 static int i2c_scan = 1;
 
 /* invalid address will return 1; TEN bit addr is valid */
-static inline int i2c_invalid_address(const struct i2c_msg* p)
+static inline int i2c_invalid_address(const struct i2c_msg *p)
 {
-    return (p->addr > 0x3ff) || (!(p->flags & I2C_M_TEN) && (p->addr > 0x7f));
+	return (p->addr > 0x3ff) || (!(p->flags & I2C_M_TEN)
+				     && (p->addr > 0x7f));
 }
 
-static int octeon_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
+static int octeon_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
+			   int num)
 {
-    int i;
-    int r = 0;
+	int i;
+	int r = 0;
 
-    DEB1("msgs: %d\n", num);
+	DEB1("msgs: %d\n", num);
 
-    if(unlikely(!num)){
-	printk("num is zero!!\n");
-	return 0;
-    }
+	if (unlikely(!num)) {
+		printk(KERN_INFO "num is zero!!\n");
+		return 0;
+	}
 
-    if (unlikely(i2c_invalid_address(&msgs[0]))){
-	printk("invalid address 0x%03x (%d-bit)\n", msgs[0].addr, msgs[0].flags & I2C_M_TEN ? 10 : 7);
-	return -EINVAL;
-    }
+	if (unlikely(i2c_invalid_address(&msgs[0]))) {
+		printk(KERN_INFO "invalid address 0x%03x (%d-bit)\n",
+		       msgs[0].addr, msgs[0].flags & I2C_M_TEN ? 10 : 7);
+		return -EINVAL;
+	}
 
-    for (i = 0; i < num; ++i){
-	DEB2("msg: %d, addr: 0x%04x, len: %d, flags: 0x%x\n", i, msgs[i].addr, msgs[i].len, msgs[i].flags);
+	for (i = 0; i < num; ++i) {
+		DEB2("msg: %d, addr: 0x%04x, len: %d, flags: 0x%x\n", i,
+		     msgs[i].addr, msgs[i].len, msgs[i].flags);
 
-	r = octeon_i2c_xfer_msg(adap, &msgs[i], 0);
+		r = octeon_i2c_xfer_msg(adap, &msgs[i], 0);
 
-	DEB2("r: %d\n", r);
+		DEB2("r: %d\n", r);
 
-	if(r != msgs[i].len)
-	    break;
+		if (r != msgs[i].len)
+			break;
 
-    }
+	}
 
-    DEB1("r: %d msgs: %d", r, num);
+	DEB1("r: %d msgs: %d", r, num);
 
-    return (r < 0) ? r : num;
+	return (r < 0) ? r : num;
 }
 
-
-
 static int octeon_i2c_remove(struct device *dev)
 {
-    /* Nothing */
-    return 0;
+	/* Nothing */
+	return 0;
 }
 
 static void octeon_i2c_device_release(struct device *dev)
 {
-    /* Nothing */
+	/* Nothing */
 }
 
-
-
 /* should contain I2C_FUNC_SMBUS_BYTE_DATA */
-static u32 octeon_i2c_func(struct i2c_adapter * adap)
+static u32 octeon_i2c_func(struct i2c_adapter *adap)
 {
-    /* should be check */
-    return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
+	/* should be check */
+	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
 }
 
 static struct i2c_algorithm octeon_i2c_algo = {
-    .master_xfer = octeon_i2c_xfer,
-    .smbus_xfer	= NULL,//emulate by master_xfer
-    .functionality = octeon_i2c_func,
+	.master_xfer = octeon_i2c_xfer,
+	.smbus_xfer = NULL,	/* emulate by master_xfer */
+	.functionality = octeon_i2c_func,
 };
 
-
-#if (OCT_MAX_IFACES >2) 
- #error "OCT_MAX_IFACES increased, need to fix a driver interface"
+#if (OCT_MAX_IFACES > 2)
+#error "OCT_MAX_IFACES increased, need to fix a driver interface"
 #endif
 static struct i2c_adapter octeon_i2c_adap0 = {
-    .owner	= THIS_MODULE,
-    .class	= I2C_CLASS_HWMON,//I2C_CLASS_ALL
-    .name	= "octeon twsi",
-    .algo	= &octeon_i2c_algo,
-    .algo_data	= NULL,
-    .client_register = NULL,
-    .client_unregister	= NULL,
+	.owner = THIS_MODULE,
+	.class = I2C_CLASS_HWMON,
+	.name = "octeon twsi",
+	.algo = &octeon_i2c_algo,
+	.algo_data = NULL,
+	.client_register = NULL,
+	.client_unregister = NULL,
 };
 
 static struct i2c_adapter octeon_i2c_adap1 = {
-    .owner      = THIS_MODULE,
-    .class      = I2C_CLASS_HWMON,//I2C_CLASS_ALL
-    .name       = "octeon twsi",
-    .algo       = &octeon_i2c_algo,
-    .algo_data  = NULL,
-    .client_register = NULL,
-    .client_unregister  = NULL,
+	.owner = THIS_MODULE,
+	.class = I2C_CLASS_HWMON,
+	.name = "octeon twsi",
+	.algo = &octeon_i2c_algo,
+	.algo_data = NULL,
+	.client_register = NULL,
+	.client_unregister = NULL,
 };
 
-static struct i2c_adapter* octeon_i2c_adap[OCT_MAX_IFACES] = {
+static struct i2c_adapter *octeon_i2c_adap[OCT_MAX_IFACES] = {
 	&octeon_i2c_adap0,
-	&octeon_i2c_adap1, };
+	&octeon_i2c_adap1,
+};
 
 static struct device_driver octeon_i2c_driver = {
-    .name	= "octeon_i2c",
-    .bus	= &platform_bus_type,
-    .remove	= octeon_i2c_remove,
+	.name = "octeon_i2c",
+	.bus = &platform_bus_type,
+	.remove = octeon_i2c_remove,
 };
 
 static struct platform_device octeon_i2c_device = {
-    .name	= "i2c",
-    .id		= -1,
-    .dev	={
-	.driver	= &octeon_i2c_driver,
-	.release = octeon_i2c_device_release,
-    },
+	.name = "i2c",
+	.id = -1,
+	.dev = {
+		.driver = &octeon_i2c_driver,
+		.release = octeon_i2c_device_release,
+		},
 };
 
 static void __init octeon_i2c_chip_init(void)
 {
-    /* Nothing */
+	/* Nothing */
 }
 
-
-static int
-octeon_i2c_scan_bus(struct i2c_adapter *adap)
+static int octeon_i2c_scan_bus(struct i2c_adapter *adap)
 {
-    int found = 0;
-    int i;
-    struct i2c_msg msg;
-    char data[1];
+	int found = 0;
+	int i;
+	struct i2c_msg msg;
+	char data[1];
 
-    printk(" ** scanning for active I2C devices on the bus...");
+	printk(KERN_INFO " ** scanning for active I2C devices on the bus...");
 
-    for (i = 1; i < 0x7f; i++) {
+	for (i = 1; i < 0x7f; i++) {
 
-	msg.addr = i;
-	msg.buf = data;
-	msg.len = 0;
-	msg.flags = I2C_M_RD;
+		msg.addr = i;
+		msg.buf = data;
+		msg.len = 0;
+		msg.flags = I2C_M_RD;
 
-	if (octeon_i2c_xfer(adap, &msg, 1) > 0) {
-	    printk("I2C device 0x%02x found\n", i);
-	    found++;
+		if (octeon_i2c_xfer(adap, &msg, 1) > 0) {
+			printk(KERN_INFO "I2C device 0x%02x found\n", i);
+			found++;
+		}
 	}
-    }
 
-    if (!found)
-	printk("found nothing\n");
+	if (!found)
+		printk(KERN_INFO "found nothing\n");
 
-    return found;
+	return found;
 }
 
 static int __init octeon_i2c_init(void)
 {
-    int r, i;
-
-   for (i=0; i<octeon_i2c_num_ifaces(); i++)
-   {
-	/* init algo data first  then add adapter */
-	octeon_i2c_adap[i]->algo_data = octeon_i2c_get_algo_data(i);  
-	r = i2c_add_adapter(octeon_i2c_adap[i]);
-
-	if(r){
-	printk(KERN_ERR "failed to add adapter %d", i);
-	if( i == 0) goto do_release_region; //do_free_irq;
-	else break;
+	int r, i;
+
+	for (i = 0; i < octeon_i2c_num_ifaces(); i++) {
+		/* init algo data first  then add adapter */
+		octeon_i2c_adap[i]->algo_data = octeon_i2c_get_algo_data(i);
+		r = i2c_add_adapter(octeon_i2c_adap[i]);
+
+		if (r) {
+			printk(KERN_ERR "failed to add adapter %d", i);
+			if (i == 0)
+				goto do_release_region;	/*do_free_irq;*/
+			else
+				break;
+		}
 	}
-    }
 
-    octeon_i2c_chip_init();
+	octeon_i2c_chip_init();
 
-    if(i2c_scan)
-	for (i=0; i<octeon_i2c_num_ifaces(); i++) {
-	    printk("scanning bus %d\n", i);	
-            octeon_i2c_scan_bus(octeon_i2c_adap[i]);
-        }
+	if (i2c_scan)
+		for (i = 0; i < octeon_i2c_num_ifaces(); i++) {
+			printk(KERN_INFO "scanning bus %d\n", i);
+			octeon_i2c_scan_bus(octeon_i2c_adap[i]);
+		}
 
-    if(driver_register(&octeon_i2c_driver)!=0)
-	printk(KERN_ERR "Driver register failed for octeon_i2c\n");
+	if (driver_register(&octeon_i2c_driver) != 0)
+		printk(KERN_ERR "Driver register failed for octeon_i2c\n");
 
-    if(platform_device_register(&octeon_i2c_device)!=0){
-	printk(KERN_ERR "Device register failed for i2c\n");
-	driver_unregister(&octeon_i2c_driver);
-    }
+	if (platform_device_register(&octeon_i2c_device) != 0) {
+		printk(KERN_ERR "Device register failed for i2c\n");
+		driver_unregister(&octeon_i2c_driver);
+	}
 
-    return 0;
+	return 0;
 
 do_release_region:
-//    release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE);
-    return 0;
+/*	release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE); */
+	return 0;
 
 }
 
-
 static void __exit octeon_i2c_exit(void)
 {
-    int i;
-    for (i=0; i<octeon_i2c_num_ifaces(); i++)
-	i2c_del_adapter(octeon_i2c_adap[i]);
-//    release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE);
-    driver_unregister(&octeon_i2c_driver);
-    platform_device_unregister(&octeon_i2c_device);
+	int i;
+	for (i = 0; i < octeon_i2c_num_ifaces(); i++)
+		i2c_del_adapter(octeon_i2c_adap[i]);
+/*	release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE); */
+	driver_unregister(&octeon_i2c_driver);
+	platform_device_unregister(&octeon_i2c_device);
 }
 
-
 MODULE_AUTHOR("RichardXY_huang@asus.com.cn");
 MODULE_DESCRIPTION("Cavium Octeon I2C bus adapter");
 MODULE_DESCRIPTION("Octeon i2c driver");
-- 
1.6.0.4

