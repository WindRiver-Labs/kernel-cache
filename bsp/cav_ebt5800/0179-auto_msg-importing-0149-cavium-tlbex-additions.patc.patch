From 2f8de519ea00c5078653a1992ad19ef165a1223a Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:23:17 -0700
Subject: [PATCH] auto_msg: importing 0149-cavium-tlbex-additions.patch

This is an automatic import of patch 0149-cavium-tlbex-additions.patch, no headers were
detected and a default message was constructed
---
 arch/mips/mm/tlbex.c |   30 +++++++++++++++---------------
 arch/mips/mm/uasm.c  |    8 ++++----
 arch/mips/mm/uasm.h  |    1 +
 3 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index 10114cd..e7842f8 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -432,8 +432,8 @@ static void __cpuinit build_tlb_write_entry(u32 **p, struct uasm_label **l,
 
 #ifdef CONFIG_HUGETLB_PAGE
 
-static __init void build_huge_tlb_write_entry(u32 **p, struct label **l,
-					 struct reloc **r,
+static __init void build_huge_tlb_write_entry(u32 **p, struct uasm_label **l,
+					 struct uasm_reloc **r,
 					 unsigned int tmp,
 					 enum tlb_write_entry wmode)
 {
@@ -755,7 +755,7 @@ build_get_pgd_vmalloc64(u32 **p, struct uasm_label **l, struct uasm_reloc **r,
 	}
 #ifdef CHECK_FOR_HIGH_SEGBITS_ADDRESSES
         if(is_refill) {
-           l_large_segbits_fault(l, *p);
+           uasm_l_large_segbits_fault(l, *p);
            //
            // We get here if we are an xsseg address, or if we are
            // an xuseg address above (PGDIR_SHIFT+PGDIR_BITS) boundary.
@@ -839,7 +839,7 @@ static void __cpuinit build_adjust_context(u32 **p, unsigned int ctx)
 	uasm_i_andi(p, ctx, ctx, mask);
 }
 
-static void __cpuinit build_get_ptep(u32 **p, unsigned int tmp, unsigned int ptr)
+static void __cpuinit __maybe_unused build_get_ptep(u32 **p, unsigned int tmp, unsigned int ptr)
 {
 	/*
 	 * Bug workaround for the Nevada. It seems as if under certain
@@ -864,7 +864,7 @@ static void __cpuinit build_get_ptep(u32 **p, unsigned int tmp, unsigned int ptr
 	UASM_i_ADDU(p, ptr, ptr, tmp); /* add in offset */
 }
 
-static __init void build_convert_pte_to_entrylo(u32 **p, unsigned int reg)
+static __init __maybe_unused void build_convert_pte_to_entrylo(u32 **p, unsigned int reg)
 {
 #if defined(CONFIG_USE_RI_XI_PAGE_BITS)
 	uasm_i_dsrl(p, reg, reg, __ilog2(_PAGE_NO_EXEC));
@@ -876,7 +876,7 @@ static __init void build_convert_pte_to_entrylo(u32 **p, unsigned int reg)
 #endif
 }
 
-static __init void build_convert_pte_to_entrylo2(u32 **p, unsigned int e0, unsigned int e1)
+static __cpuinit void build_convert_pte_to_entrylo2(u32 **p, unsigned int e0, unsigned int e1)
 {
 #if defined(CONFIG_USE_RI_XI_PAGE_BITS)
 	uasm_i_dsrl(p, e0, e0, __ilog2(_PAGE_NO_EXEC));
@@ -983,9 +983,9 @@ static __init void build_huge_update_entries(u32 **p, struct label **l,
 
 #ifdef OCTEON_FAST_PATH_TLB_REFILL_HANDLER
 
-static void __init build_octeon_fast_tlb_refill_handler (u32 **p,
-                 struct label **l,
-                 struct reloc **r,
+static void __cpuinit build_octeon_fast_tlb_refill_handler (u32 **p,
+                 struct uasm_label **l,
+                 struct uasm_reloc **r,
 		 unsigned int tmp, // K0
                  unsigned int ptr // K1
                  )
@@ -1007,7 +1007,7 @@ static void __init build_octeon_fast_tlb_refill_handler (u32 **p,
 //	build_get_ptep(&p, K0, K1);
 //	build_update_entries(&p, K0, K1);
 //	build_tlb_write_entry(&p, &l, &r, tlb_random);
-//	l_leave(&l, p);
+//	uasm_l_leave(&l, p);
 //#ifdef CONFIG_FAST_ACCESS_TO_THREAD_POINTER
 //	UASM_i_LW(&p, K0, FAST_ACCESS_THREAD_OFFSET, 0);  /* K0 = thread pointer */
 //#endif
@@ -1058,7 +1058,7 @@ static void __init build_octeon_fast_tlb_refill_handler (u32 **p,
 	uasm_i_daddu(p, ptr, ptr, USER_REGISTER_TO_USE);                                            // build_get_pmde64
 
 	// uasm_i_dmfc0(p, tmp, C0_BADVADDR);                                                       // build_get_pmde64
-	uasm_i_ld(p, ptr, rel_lo(pgdc), ptr);                                                       // build_get_pmde64
+	uasm_i_ld(p, ptr, uasm_rel_lo(pgdc), ptr);                                                       // build_get_pmde64
 
 #ifdef OCTEON_FAST_PATH_TLB_REFILL_HANDLER_SAVEK0
         // the module_alloc and/or vmalloc routines may mangle K0/tmp, so need to copy K0 to USER_REGISTER_TO_USE
@@ -1070,7 +1070,7 @@ static void __init build_octeon_fast_tlb_refill_handler (u32 **p,
 #define LOC_REG_USER USER_REGISTER_TO_USE
 #endif
 
-	l_vmalloc_done(l, *p);                                                                 // build_get_pmde64
+	uasm_l_vmalloc_done(l, *p);                                                                 // build_get_pmde64
 
         // fall-through case =   K0 has badvaddr                K1 has *pgd_current       USER may have badvaddr
         // vmalloc case      =   K0 has badvaddr-VMALLOC_START  K1 has swapper_pg_dir     USER may have badvaddr
@@ -1107,7 +1107,7 @@ static void __init build_octeon_fast_tlb_refill_handler (u32 **p,
 
 	build_update_entries(p, LOC_REG_TMP, ptr);
 	build_tlb_write_entry(p, l, r, tlb_random);
-	l_leave(l, *p);
+	uasm_l_leave(l, *p);
 
 	UASM_i_LW(p, USER_REGISTER_TO_USE, TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET(0), 0);           // NEW
 
@@ -1117,7 +1117,7 @@ static void __init build_octeon_fast_tlb_refill_handler (u32 **p,
 
 	uasm_i_eret(p); /* return from trap */
 
-        while(*p - initial_p < 31) i_nop(p); // make the total instruction count be 31 or more
+        while(*p - initial_p < 31) uasm_i_nop(p); // make the total instruction count be 31 or more
 }
 #undef LOC_REG_TMP
 #undef LOC_REG_USER
@@ -1232,7 +1232,7 @@ static void __cpuinit build_r4000_tlb_refill_handler(void)
 			split++;
 		}
 		else {
-			if (uasm_insn_is_eret(split[1])) {
+			if (insn_is_eret(split[1])) {
 				// the instruction following the original split choice is an eret
 				// no need to insert a branch in this case, code does not flow past an eret
 				// existing eret instruction will be the 32nd
diff --git a/arch/mips/mm/uasm.c b/arch/mips/mm/uasm.c
index 688e994..49b2fa4 100644
--- a/arch/mips/mm/uasm.c
+++ b/arch/mips/mm/uasm.c
@@ -636,7 +636,7 @@ uasm_il_bgez(u32 **p, struct uasm_reloc **r, unsigned int reg, int lid)
 }
 
 #ifdef CONFIG_CPU_CAVIUM_OCTEON
-void __init
+void __cpuinit
 uasm_il_bbit1(u32 **p, struct uasm_reloc **r, unsigned int reg,
 				unsigned int bit, int lid)
 {
@@ -644,7 +644,7 @@ uasm_il_bbit1(u32 **p, struct uasm_reloc **r, unsigned int reg,
 	uasm_i_bbit1(p, reg, bit, 0);
 }
 
-void __init
+void __cpuinit
 uasm_il_bbit132(u32 **p, struct uasm_reloc **r, unsigned int reg,
 				unsigned int bit, int lid)
 {
@@ -652,7 +652,7 @@ uasm_il_bbit132(u32 **p, struct uasm_reloc **r, unsigned int reg,
 	uasm_i_bbit132(p, reg, bit-32, 0);
 }
 
-void __init
+void __cpuinit
 uasm_il_bbit032(u32 **p, struct uasm_reloc **r, unsigned int reg,
 				unsigned int bit, int lid)
 {
@@ -660,7 +660,7 @@ uasm_il_bbit032(u32 **p, struct uasm_reloc **r, unsigned int reg,
 	uasm_i_bbit032(p, reg, bit-32, 0);
 }
 
-void __init
+void __cpuinit
 uasm_il_bbit0(u32 **p, struct uasm_reloc **r, unsigned int reg,
 				unsigned int bit, int lid)
 {
diff --git a/arch/mips/mm/uasm.h b/arch/mips/mm/uasm.h
index 9b75b9e..68d6ba5 100644
--- a/arch/mips/mm/uasm.h
+++ b/arch/mips/mm/uasm.h
@@ -77,6 +77,7 @@ Ip_u2u1u3(_dsll);
 Ip_u2u1u3(_dsll32);
 Ip_u2u1u3(_dsra);
 Ip_u2u1u3(_dsrl);
+Ip_u2u1u3(_drotr);
 Ip_u2u1u3(_dsrl32);
 Ip_u3u1u2(_dsubu);
 Ip_0(_eret);
-- 
1.5.5.1

