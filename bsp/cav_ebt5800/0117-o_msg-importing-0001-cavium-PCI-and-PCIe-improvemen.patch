From 2ba7d2318b5758c4a8ca73379e3d8a694928a4e8 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:23:06 -0700
Subject: [PATCH] o_msg: importing 0001-cavium-PCI-and-PCIe-improvements.patch

This is an automatic import of patch 0001-cavium-PCI-and-PCIe-improvements.patch, no headers were
detected and a default message was constructed
---
 arch/mips/cavium-octeon/msi.c       |    4 ++--
 arch/mips/cavium-octeon/pci.c       |   33 ++++++++++++++++-----------------
 arch/mips/cavium-octeon/pci_chips.c |    2 +-
 arch/mips/cavium-octeon/pcie.c      |   20 ++++++++++----------
 4 files changed, 29 insertions(+), 30 deletions(-)

diff --git a/arch/mips/cavium-octeon/msi.c b/arch/mips/cavium-octeon/msi.c
index dcc3e6f..764c3a5 100644
--- a/arch/mips/cavium-octeon/msi.c
+++ b/arch/mips/cavium-octeon/msi.c
@@ -96,7 +96,7 @@ try_only_one:
 	/* Make sure the search for available interrupts didn't fail */
 	if (irq >= 64) {
 		if (request_private_bits) {
-			printk("arch_setup_msi_irq: Unable to find %d free "
+			pr_err("arch_setup_msi_irq: Unable to find %d free "
 			       "interrupts, trying just one",
 			       1 << request_private_bits);
 			request_private_bits = 0;
@@ -208,7 +208,7 @@ static irqreturn_t octeon_msi_interrupt(int cpl, void *dev_id)
 			do_IRQ(irq);
 			return IRQ_HANDLED;
 		} else {
-			printk("Spurious MSI interrupt %d\n", irq);
+			pr_err("Spurious MSI interrupt %d\n", irq);
 			if (octeon_has_feature(OCTEON_FEATURE_PCIE)) {
 				/* These chips have PCIe */
 				cvmx_write_csr(CVMX_PEXP_NPEI_MSI_RCV0,
diff --git a/arch/mips/cavium-octeon/pci.c b/arch/mips/cavium-octeon/pci.c
index 193885a..200e72f 100644
--- a/arch/mips/cavium-octeon/pci.c
+++ b/arch/mips/cavium-octeon/pci.c
@@ -257,24 +257,23 @@ static void octeon_pci_initialize(void)
 	udelay(2000);		/* Wait 2 ms before doing PCI reads */
 
 	ctl_status_2.u32 = octeon_npi_read32(CVMX_NPI_PCI_CTL_STATUS_2);
-	printk("PCI Status: %s %s-bit\n",
-	       ctl_status_2.s.ap_pcix ? "PCI-X" : "PCI",
-	       ctl_status_2.s.ap_64ad ? "64" : "32");
+	pr_notice("PCI Status: %s %s-bit\n",
+		  ctl_status_2.s.ap_pcix ? "PCI-X" : "PCI",
+		  ctl_status_2.s.ap_64ad ? "64" : "32");
 
 	if (OCTEON_IS_MODEL(OCTEON_CN58XX) || OCTEON_IS_MODEL(OCTEON_CN50XX)) {
-		cvmx_pci_cnt_reg_t pci_cnt_reg_start;
-		cvmx_pci_cnt_reg_t pci_cnt_reg_end;
-		unsigned long cycles;
-		pci_cnt_reg_start.u64 = cvmx_read_csr(CVMX_NPI_PCI_CNT_REG);
+		cvmx_pci_cnt_reg_t cnt_reg_start;
+		cvmx_pci_cnt_reg_t cnt_reg_end;
+		unsigned long cycles, pci_clock;
+
+		cnt_reg_start.u64 = cvmx_read_csr(CVMX_NPI_PCI_CNT_REG);
 		cycles = octeon_get_cycles();
 		udelay(1000);
-		pci_cnt_reg_end.u64 = cvmx_read_csr(CVMX_NPI_PCI_CNT_REG);
+		cnt_reg_end.u64 = cvmx_read_csr(CVMX_NPI_PCI_CNT_REG);
 		cycles = octeon_get_cycles() - cycles;
-		printk("PCI Clock: %lu MHz\n",
-		       (pci_cnt_reg_end.s.pcicnt -
-			pci_cnt_reg_start.s.pcicnt) / (cycles /
-						       (mips_hpt_frequency /
-							1000000)));
+		pci_clock = (cnt_reg_end.s.pcicnt - cnt_reg_start.s.pcicnt) /
+			    (cycles / (mips_hpt_frequency / 1000000));
+		pr_notice("PCI Clock: %lu MHz\n", pci_clock);
 	}
 
 	/*
@@ -440,13 +439,13 @@ static int __init octeon_pci_setup(void)
 	iomem_resource.end = (2ull << 48) - 1;
 
 	if (!octeon_is_pci_host()) {
-		printk("Not in host mode, PCI Controller not initialized\n");
+		pr_notice("Not in host mode, PCI Controller not initialized\n");
 		return 0;
 	}
 
-	printk("%s Octeon big bar support\n",
-	       (octeon_dma_bar_type ==
-		OCTEON_DMA_BAR_TYPE_BIG) ? "Enabling" : "Disabling");
+	pr_notice("%s Octeon big bar support\n",
+		  (octeon_dma_bar_type ==
+		  OCTEON_DMA_BAR_TYPE_BIG) ? "Enabling" : "Disabling");
 
 	octeon_pci_initialize();
 
diff --git a/arch/mips/cavium-octeon/pci_chips.c b/arch/mips/cavium-octeon/pci_chips.c
index 38aab18..71c1005 100644
--- a/arch/mips/cavium-octeon/pci_chips.c
+++ b/arch/mips/cavium-octeon/pci_chips.c
@@ -307,7 +307,7 @@ static void chip_vt82c686b_setup(struct pci_dev *dev)
 	   3Ch */
 	outb(0xe0, 0x3f0);
 	if (inb(0x3f1) != 0x3c)
-		printk("    ERROR: Super-I/O Device ID not found (read 0x%x, expected 0x3c)\n", inb(0x3f1));
+		pr_err("Super-I/O Device ID not found (read 0x%x, expected 0x3c)\n", inb(0x3f1));
 
 	/*
 	   Index E2 - Super-I/O Function Select (03h)...................RW 7-5
diff --git a/arch/mips/cavium-octeon/pcie.c b/arch/mips/cavium-octeon/pcie.c
index 18d754c..88f7b53 100644
--- a/arch/mips/cavium-octeon/pcie.c
+++ b/arch/mips/cavium-octeon/pcie.c
@@ -153,9 +153,9 @@ static inline int octeon_pcie_read_config(int pcie_port, struct pci_bus *bus,
 	}
 
 	/*
-	printk("octeon_pcie_read_config(pcie_port=%d, bus=%d, devfn=0x%x,
-	       reg=0x%x, size=%d, val=%p)\n",
-	       pcie_port, bus_number, devfn, reg, size, val);
+	pr_debug("octeon_pcie_read_config(pcie_port=%d, bus=%d, devfn=0x%x,
+		 reg=0x%x, size=%d, val=%p)\n",
+		 pcie_port, bus_number, devfn, reg, size, val);
 	*/
 
 	switch (size) {
@@ -175,7 +175,7 @@ static inline int octeon_pcie_read_config(int pcie_port, struct pci_bus *bus,
 		return PCIBIOS_FUNC_NOT_SUPPORTED;
 	}
 	/*
-	printk("octeon_pcie_read_config val=0x%x\n", *val);
+	pr_debug("octeon_pcie_read_config val=0x%x\n", *val);
 	*/
 	if (OCTEON_IS_MODEL(OCTEON_CN56XX_PASS1) ||
 	    OCTEON_IS_MODEL(OCTEON_CN56XX_PASS1_1))
@@ -218,9 +218,9 @@ static inline int octeon_pcie_write_config(int pcie_port, struct pci_bus *bus,
 		bus_number = 0;
 
 	/*
-	printk("octeon_pcie_write_config(pcie_port=%d, bus=%d, devfn=0x%x,
-	       reg=0x%x, size=%d, val=0x%x)\n",
-	       pcie_port, bus_number, devfn, reg, size, val);
+	pr_debug("octeon_pcie_write_config(pcie_port=%d, bus=%d, devfn=0x%x,
+		 reg=0x%x, size=%d, val=0x%x)\n",
+		 pcie_port, bus_number, devfn, reg, size, val);
 	*/
 	switch (size) {
 	case 4:
@@ -331,7 +331,7 @@ static int __init octeon_pcie_setup(void)
 
 	npei_ctl_status.u64 = cvmx_read_csr(CVMX_PEXP_NPEI_CTL_STATUS);
 	if (npei_ctl_status.s.host_mode) {
-		printk("PCIe: Initializing port 0\n");
+		pr_notice("PCIe: Initializing port 0\n");
 		result = cvmx_pcie_rc_initialize(0);
 		if (result == 0) {
 			/* Memory offsets are physical addresses */
@@ -360,7 +360,7 @@ static int __init octeon_pcie_setup(void)
 			register_pci_controller(&octeon_pcie0_controller);
 		}
 	} else
-		printk("PCIe: Port 0 in endpoint mode, skipping.\n");
+		pr_notice("PCIe: Port 0 in endpoint mode, skipping.\n");
 
 	/* Skip the 2nd port on CN52XX if port 0 is in 4 lane mode */
 	if (OCTEON_IS_MODEL(OCTEON_CN52XX)) {
@@ -370,7 +370,7 @@ static int __init octeon_pcie_setup(void)
 			return 0;
 	}
 
-	printk("PCIe: Initializing port 1\n");
+	pr_notice("PCIe: Initializing port 1\n");
 	result = cvmx_pcie_rc_initialize(1);
 	if (result == 0) {
 		/* Memory offsets are physical addresses */
-- 
1.5.5.1

