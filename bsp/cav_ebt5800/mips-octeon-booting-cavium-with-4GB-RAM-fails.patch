From a03257216d956c079b7deac440a2d20da3ecc687 Mon Sep 17 00:00:00 2001
From: Greg Moffatt <greg.moffatt@windriver.com>
Date: Mon, 10 Aug 2009 11:28:09 -0400
Subject: [PATCH 2/2] mips/octeon: booting cavium with 4GB+ RAM fails

When booting a cavium board that has 4GB or more of ram the board will
die silently and the boot fail.  The root cause is due to the way the
bootloader passes the DRAM size to the kernel.  The bootloader passes
the DRAM size in MB as a uint32_t.  When the kernel starts up, it
converts it to bytes by bitshifting 20.  Because the bootloader is uint32_t
bitshifting 20 causes the result to be zero.  The solution is to cast the
bootloader DRAM size into a uint64_t before bitshifting.

Signed-off-by: Greg Moffatt <greg.moffatt@windriver.com>
---
 arch/mips/cavium-octeon/hal.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/arch/mips/cavium-octeon/hal.c b/arch/mips/cavium-octeon/hal.c
index e6895c0..0eba62c 100644
--- a/arch/mips/cavium-octeon/hal.c
+++ b/arch/mips/cavium-octeon/hal.c
@@ -408,7 +408,7 @@ void octeon_hal_init(void)
 
 	sysinfo = cvmx_sysinfo_get();
 	memset(sysinfo, 0, sizeof(*sysinfo));
-	sysinfo->system_dram_size = octeon_bootinfo->dram_size << 20;
+	sysinfo->system_dram_size = (uint64_t)octeon_bootinfo->dram_size << 20;
 	sysinfo->phy_mem_desc_ptr =
 		cvmx_phys_to_ptr(octeon_bootinfo->phy_mem_desc_addr);
 	sysinfo->core_mask = octeon_bootinfo->core_mask;
-- 
1.6.3.3

