From 9d7294fa5728acc4edfc6ed1a4bbb8a7c7c75f46 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:23:09 -0700
Subject: [PATCH] auto_msg: importing 1000-1.8.0-cleanup-ethernet-mgmt.patch

This is an automatic import of patch 1000-1.8.0-cleanup-ethernet-mgmt.patch, no headers were
detected and a default message was constructed
---
 arch/mips/cavium-octeon/ethernet-mgmt-port.c |   43 ++++++++++++++------------
 1 files changed, 23 insertions(+), 20 deletions(-)

diff --git a/arch/mips/cavium-octeon/ethernet-mgmt-port.c b/arch/mips/cavium-octeon/ethernet-mgmt-port.c
index f6ad76f..afa6586 100644
--- a/arch/mips/cavium-octeon/ethernet-mgmt-port.c
+++ b/arch/mips/cavium-octeon/ethernet-mgmt-port.c
@@ -22,16 +22,18 @@
 
 static struct net_device *global_dev[2] = { NULL, NULL };
 
-#define DEBUGPRINT(format, ...) do{if (__printk_ratelimit(HZ, 10)) printk(format, ##__VA_ARGS__);} while (0)
+#define DEBUGPRINT(format, ...) do {if (printk_ratelimit())		\
+					printk(format, ##__VA_ARGS__);	\
+				} while (0)
 
 /**
  * This is the definition of the Ethernet driver's private
  * driver state stored in dev->priv.
  */
-typedef struct {
+struct device_private {
 	int port;
 	struct net_device_stats stats;	/* Device statistics */
-} device_private_t;
+};
 
 
 /**
@@ -44,7 +46,7 @@ typedef struct {
 static int packet_transmit(struct sk_buff *skb, struct net_device *dev)
 {
 	uint64_t flags;
-	device_private_t *priv = (device_private_t *) dev->priv;
+	struct device_private *priv = (struct device_private *) dev->priv;
 	cvmx_mgmt_port_result_t result;
 	local_irq_save(flags);
 	result = cvmx_mgmt_port_send(priv->port, skb->len, skb->data);
@@ -53,8 +55,9 @@ static int packet_transmit(struct sk_buff *skb, struct net_device *dev)
 		priv->stats.tx_packets++;
 		priv->stats.tx_bytes += skb->len;
 	} else {
-		// DEBUGPRINT("ERROR: cvmx_mgmt_port_send() failed with %d\n",
-		// result);
+		/* DEBUGPRINT("ERROR: cvmx_mgmt_port_send() failed with %d\n",
+				result);
+		*/
 		priv->stats.tx_dropped++;
 	}
 	dev_kfree_skb(skb);
@@ -78,7 +81,7 @@ static irqreturn_t do_interrupt(int cpl, void *dev_id)
 	int result;
 	char packet[2048];
 	struct net_device *dev = (struct net_device *) dev_id;
-	device_private_t *priv = (device_private_t *) dev->priv;
+	struct device_private *priv = (struct device_private *) dev->priv;
 
 	do {
 		local_irq_save(flags);
@@ -149,7 +152,7 @@ static void device_poll_controller(struct net_device *dev)
 static int device_open(struct net_device *dev)
 {
 	/* Clear the statistics whenever the interface is brought up */
-	device_private_t *priv = (device_private_t *) dev->priv;
+	struct device_private *priv = (struct device_private *) dev->priv;
 	memset(&priv->stats, 0, sizeof(priv->stats));
 	cvmx_mgmt_port_enable(priv->port);
 	return 0;
@@ -165,7 +168,7 @@ static int device_open(struct net_device *dev)
  */
 static int device_close(struct net_device *dev)
 {
-	device_private_t *priv = (device_private_t *) dev->priv;
+	struct device_private *priv = (struct device_private *) dev->priv;
 	cvmx_mgmt_port_disable(priv->port);
 	return 0;
 }
@@ -179,7 +182,7 @@ static int device_close(struct net_device *dev)
  */
 static struct net_device_stats *device_get_stats(struct net_device *dev)
 {
-	device_private_t *priv = (device_private_t *) dev->priv;
+	struct device_private *priv = (struct device_private *) dev->priv;
 	return &priv->stats;
 }
 
@@ -190,7 +193,7 @@ static struct net_device_stats *device_get_stats(struct net_device *dev)
  */
 static void ethernet_mgmt_port_set_multicast_list(struct net_device *dev)
 {
-	device_private_t* priv = (device_private_t *)dev->priv;
+	struct device_private *priv = (struct device_private *)dev->priv;
 	int port = priv->port;
 	int num_ports;
 	if (OCTEON_IS_MODEL(OCTEON_CN52XX))
@@ -210,7 +213,7 @@ static void ethernet_mgmt_port_set_multicast_list(struct net_device *dev)
  */
 static int ethernet_mgmt_port_set_mac_address(struct net_device *dev, void *addr)
 {
-	device_private_t *priv = (device_private_t *) dev->priv;
+	struct device_private *priv = (struct device_private *) dev->priv;
 	cvmx_agl_gmx_prtx_cfg_t agl_gmx_cfg;
 	int port = priv->port;
 	int num_ports;
@@ -226,7 +229,7 @@ static int ethernet_mgmt_port_set_mac_address(struct net_device *dev, void *addr
 		int i;
 		uint8_t *ptr = addr;
 		uint64_t mac = 0;
-		for (i=0; i<6; i++)
+		for (i = 0; i < 6; i++)
 			mac = (mac<<8) | (uint64_t)(ptr[i+2]);
 
 		agl_gmx_cfg.u64 = cvmx_read_csr(CVMX_AGL_GMX_PRTX_CFG(port));
@@ -245,7 +248,7 @@ static int ethernet_mgmt_port_set_mac_address(struct net_device *dev, void *addr
  */
 static int device_init(struct net_device *dev)
 {
-	device_private_t *priv = (device_private_t *) dev->priv;
+	struct device_private *priv = (struct device_private *) dev->priv;
 	uint64_t mac = cvmx_mgmt_port_get_mac(priv->port);
 
 	dev->hard_start_xmit = packet_transmit;
@@ -275,7 +278,7 @@ static int device_init(struct net_device *dev)
 static int __init ethernet_mgmt_port_init(void)
 {
 	struct net_device *dev;
-	device_private_t *priv;
+	struct device_private *priv;
 	cvmx_mixx_irhwm_t mix_irhwm;
 	cvmx_mixx_intena_t mix_intena;
 	int num_ports;
@@ -298,7 +301,7 @@ static int __init ethernet_mgmt_port_init(void)
 		}
 
 		/* Setup is complete, create the virtual ethernet devices */
-		dev = alloc_etherdev(sizeof(device_private_t));
+		dev = alloc_etherdev(sizeof(struct device_private));
 		if (dev == NULL) {
 			printk("\n\nERROR: Failed to allocate ethernet device\n");
 			return -1;
@@ -309,8 +312,8 @@ static int __init ethernet_mgmt_port_init(void)
 		strcpy(dev->name, "mgmt%d");
 
 		/* Initialize the device private structure. */
-		priv = (device_private_t *) dev->priv;
-		memset(priv, 0, sizeof(device_private_t));
+		priv = (struct device_private *) dev->priv;
+		memset(priv, 0, sizeof(struct device_private));
 		priv->port = port;
 
 		if (register_netdev(dev) < 0) {
@@ -359,8 +362,8 @@ static void __exit ethernet_mgmt_port_cleanup(void)
 	int port;
 	for (port = 0; port < 2; port++) {
 		if (global_dev[port]) {
-			device_private_t *priv =
-				(device_private_t *) global_dev[port]->priv;
+			struct device_private *priv =
+				(struct device_private *) global_dev[port]->priv;
 			/* Disable interrupt */
 			cvmx_write_csr(CVMX_MIXX_IRHWM(priv->port), 0);
 			cvmx_write_csr(CVMX_MIXX_INTENA(priv->port), 0);
-- 
1.5.5.1

