From 24f184139f6c4a0b8d0da57ae68ef3be4ae207d8 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:23:11 -0700
Subject: [PATCH] cavium: fix compile failure

Legacy items like SA_SHIRQ and SET_MODULE_OWNER are now fully removed
from the kernel and hence can't be in drivers anymore.

Signed-off-by: Tomaso Paoletti <tpaoletti@caviumnetworks.com>
Signed-off-by: Paul Gortmaker <Paul.Gortmaker@windriver.com>
---
 drivers/net/cavium-ethernet/ethernet-common.c |    1 -
 drivers/net/cavium-ethernet/ethernet-rgmii.c  |    2 +-
 drivers/net/cavium-ethernet/ethernet-spi.c    |    3 ++-
 drivers/net/cavium-ethernet/ethernet-tx.c     |   19 +++++++++++++------
 drivers/net/cavium-ethernet/ethernet.c        |    6 ++----
 5 files changed, 18 insertions(+), 13 deletions(-)

diff --git a/drivers/net/cavium-ethernet/ethernet-common.c b/drivers/net/cavium-ethernet/ethernet-common.c
index 3c24684..25b9ed0 100644
--- a/drivers/net/cavium-ethernet/ethernet-common.c
+++ b/drivers/net/cavium-ethernet/ethernet-common.c
@@ -274,7 +274,6 @@ int cvm_oct_common_init(struct net_device *dev)
     }
 
     dev->get_stats          = cvm_oct_common_get_stats;
-    dev->weight             = 16;
     dev->set_mac_address    = cvm_oct_common_set_mac_address;
     dev->set_multicast_list = cvm_oct_common_set_multicast_list;
     dev->change_mtu         = cvm_oct_common_change_mtu;
diff --git a/drivers/net/cavium-ethernet/ethernet-rgmii.c b/drivers/net/cavium-ethernet/ethernet-rgmii.c
index 44831d5..ea53a1c 100644
--- a/drivers/net/cavium-ethernet/ethernet-rgmii.c
+++ b/drivers/net/cavium-ethernet/ethernet-rgmii.c
@@ -265,7 +265,7 @@ int cvm_oct_rgmii_init(struct net_device *dev)
         properly */
     if (number_rgmii_ports == 0)
     {
-        request_irq(OCTEON_IRQ_RML, cvm_oct_rgmii_rml_interrupt, SA_SHIRQ, "RGMII", &number_rgmii_ports);
+        request_irq(OCTEON_IRQ_RML, cvm_oct_rgmii_rml_interrupt, IRQF_SHARED, "RGMII", &number_rgmii_ports);
     }
     number_rgmii_ports++;
 
diff --git a/drivers/net/cavium-ethernet/ethernet-spi.c b/drivers/net/cavium-ethernet/ethernet-spi.c
index 78652c2..e60b94f 100644
--- a/drivers/net/cavium-ethernet/ethernet-spi.c
+++ b/drivers/net/cavium-ethernet/ethernet-spi.c
@@ -220,11 +220,12 @@ static void cvm_oct_spi_poll(struct net_device *dev)
 
 int cvm_oct_spi_init(struct net_device *dev)
 {
+    int r;
     cvm_oct_private_t* priv = (cvm_oct_private_t*)netdev_priv(dev);
 
     if (number_spi_ports == 0)
     {
-        request_irq(8 + 46, cvm_oct_spi_rml_interrupt, SA_SHIRQ, "SPI", &number_spi_ports);
+        r = request_irq(8 + 46, cvm_oct_spi_rml_interrupt, IRQF_SHARED, "SPI", &number_spi_ports);
     }
     number_spi_ports++;
 
diff --git a/drivers/net/cavium-ethernet/ethernet-tx.c b/drivers/net/cavium-ethernet/ethernet-tx.c
index 988f4dd..7a7ea4e 100644
--- a/drivers/net/cavium-ethernet/ethernet-tx.c
+++ b/drivers/net/cavium-ethernet/ethernet-tx.c
@@ -182,7 +182,10 @@ int cvm_oct_xmit(struct sk_buff *skb, struct net_device *dev)
         //printk("TX buffer beginning can't meet FPA alignment constraints\n");
         goto dont_put_skbuff_in_hw;
     }
-    if (unlikely(skb->end - fpa_head < CVMX_FPA_PACKET_POOL_SIZE))
+#ifdef NET_SKBUFF_DATA_USES_OFFSET
+#warning math on skb->* is not recommended
+#endif
+    if (unlikely(skb->end >=  fpa_head + CVMX_FPA_PACKET_POOL_SIZE))
     {
         //printk("TX buffer isn't large enough for the FPA\n");
         goto dont_put_skbuff_in_hw;
@@ -212,11 +215,15 @@ int cvm_oct_xmit(struct sk_buff *skb, struct net_device *dev)
         //printk("TX buffer has fragments\n");
         goto dont_put_skbuff_in_hw;
     }
+#ifdef NET_SKBUFF_DATA_USES_OFFSET
+#warning math on skb->* is not recommended
+#else
     if (unlikely(skb->truesize != sizeof(*skb) + skb->end - skb->head))
     {
         //printk("TX buffer truesize has been changed\n");
         goto dont_put_skbuff_in_hw;
     }
+#endif
 
     /* We can use this buffer in the FPA. We don't need the FAU update anymore */
     pko_command.s.reg0 = 0;
@@ -254,9 +261,9 @@ dont_put_skbuff_in_hw:
 
     /* Check if we can use the hardware checksumming */
     if (USE_HW_TCPUDP_CHECKSUM && (skb->protocol == htons(ETH_P_IP)) &&
-        (skb->nh.iph->version == 4) && (skb->nh.iph->ihl == 5) &&
-        ((skb->nh.iph->frag_off == 0) || (skb->nh.iph->frag_off == 1<<14)) &&
-        ((skb->nh.iph->protocol == IP_PROTOCOL_TCP) || (skb->nh.iph->protocol == IP_PROTOCOL_UDP)))
+        (ip_hdr(skb)->version == 4) && (ip_hdr(skb)->ihl == 5) &&
+        ((ip_hdr(skb)->frag_off == 0) || (ip_hdr(skb)->frag_off == 1<<14)) &&
+        ((ip_hdr(skb)->protocol == IP_PROTOCOL_TCP) || (ip_hdr(skb)->protocol == IP_PROTOCOL_UDP)))
     {
         /* Use hardware checksum calc */
         pko_command.s.ipoffp1 = sizeof(struct ethhdr) + 1;
@@ -419,12 +426,12 @@ int cvm_oct_xmit_pow(struct sk_buff *skb, struct net_device *dev)
         //work->word2.s.vlan_cfi    = 0; /* FIXME */
         //work->word2.s.vlan_id     = 0; /* FIXME */
         //work->word2.s.dec_ipcomp  = 0; /* FIXME */
-        work->word2.s.tcp_or_udp    = (skb->nh.iph->protocol == IP_PROTOCOL_TCP) || (skb->nh.iph->protocol == IP_PROTOCOL_UDP);
+        work->word2.s.tcp_or_udp    = (ip_hdr(skb)->protocol == IP_PROTOCOL_TCP) || (ip_hdr(skb)->protocol == IP_PROTOCOL_UDP);
         //work->word2.s.dec_ipsec   = 0; /* FIXME */
         //work->word2.s.is_v6       = 0; /* We only support IPv4 right now */
         //work->word2.s.software    = 0; /* Hardware would set to zero */
         //work->word2.s.L4_error    = 0; /* No error, packet is internal */
-        work->word2.s.is_frag       = !((skb->nh.iph->frag_off == 0) || (skb->nh.iph->frag_off == 1<<14));
+        work->word2.s.is_frag       = !((ip_hdr(skb)->frag_off == 0) || (ip_hdr(skb)->frag_off == 1<<14));
         //work->word2.s.IP_exc      = 0;  /* Assume Linux is sending a good packet */
         work->word2.s.is_bcast      = (skb->pkt_type==PACKET_BROADCAST);
         work->word2.s.is_mcast      = (skb->pkt_type==PACKET_MULTICAST);
diff --git a/drivers/net/cavium-ethernet/ethernet.c b/drivers/net/cavium-ethernet/ethernet.c
index 4c731a7..eca27f9 100644
--- a/drivers/net/cavium-ethernet/ethernet.c
+++ b/drivers/net/cavium-ethernet/ethernet.c
@@ -160,6 +160,7 @@ static void cvm_do_timer(unsigned long arg)
  */
 static __init void cvm_oct_configure_common_hw(void)
 {
+    int r;
     /* Setup the FPA */
     cvmx_fpa_enable();
     cvm_oct_mem_fill_fpa(CVMX_FPA_PACKET_POOL, CVMX_FPA_PACKET_POOL_SIZE, NUM_PACKET_BUFFERS);
@@ -175,7 +176,7 @@ static __init void cvm_oct_configure_common_hw(void)
         cvmx_write_csr(CVMX_SMI_EN, 1);
 
     /* Register an IRQ hander for to receive POW interrupts */
-    request_irq(8 + pow_receive_group, cvm_oct_do_interrupt, SA_SHIRQ, "Ethernet", cvm_oct_device);
+    r = request_irq(8 + pow_receive_group, cvm_oct_do_interrupt, IRQF_SHARED, "Ethernet", cvm_oct_device);
 
 #ifdef CONFIG_SMP
     if (USE_MULTICORE_RECEIVE)
@@ -326,7 +327,6 @@ static int __init cvm_oct_init_module(void)
             cvm_oct_private_t* priv = (cvm_oct_private_t*)netdev_priv(dev);
             memset(priv, 0, sizeof(cvm_oct_private_t));
 
-            SET_MODULE_OWNER(dev);
             dev->init = cvm_oct_common_init;
             priv->imode = CVMX_HELPER_INTERFACE_MODE_DISABLED;
             priv->port = CVMX_PIP_NUM_INPUT_PORTS;
@@ -374,8 +374,6 @@ static int __init cvm_oct_init_module(void)
             priv = (cvm_oct_private_t*)netdev_priv(dev);
             memset(priv, 0, sizeof(cvm_oct_private_t));
 
-            SET_MODULE_OWNER(dev);
-
             priv->imode = imode;
             priv->port = port;
             priv->queue = cvmx_pko_get_base_queue(priv->port);
-- 
1.5.5.1

