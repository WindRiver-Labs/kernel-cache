From 79be037f704637423e8a25e4f471aaeea47d9174 Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Fri, 24 Oct 2008 12:23:12 -0700
Subject: [PATCH] cavium: replace octeon_write_csr with cvmx_write_csr

New code base that uses updated SDK has cvmx_write_csr instead
of the older octeon_write_csr.

Signed-off-by: Tomaso Paoletti <tpaoletti@caviumnetworks.com>
Signed-off-by: Paul Gortmaker <Paul.Gortmaker@windriver.com>
---
 drivers/i2c/busses/i2c-octeon_twsi.c |   11 ++++++-----
 drivers/i2c/busses/i2c-octeon_twsi.h |   22 +++-------------------
 2 files changed, 9 insertions(+), 24 deletions(-)

diff --git a/drivers/i2c/busses/i2c-octeon_twsi.c b/drivers/i2c/busses/i2c-octeon_twsi.c
index 381f34f..c5ddded 100644
--- a/drivers/i2c/busses/i2c-octeon_twsi.c
+++ b/drivers/i2c/busses/i2c-octeon_twsi.c
@@ -33,6 +33,7 @@
 #include <linux/moduleparam.h>
 #include <linux/err.h>
 #include <linux/platform_device.h>
+#include <octeon-hal-read-write.h>
 #include "i2c-octeon_twsi.h"
 
 #define	I2C_MAX_TIMEOUT	10000	// 10ms
@@ -132,17 +133,17 @@ static int octeon_i2c_xfer_msg(struct i2c_adapter *adap, struct i2c_msg *msg, in
         printk("twsi-write op: data=%llx %llx len=%d\n", mio_tws_sw_twsi.u64, mio_tws_sw_twsi_ext.u64, msg->len);
 #endif
 
-    octeon_write_csr(OCTEON_MIO_TWS_SW_TWSI_EXT, mio_tws_sw_twsi_ext.u64);
-    octeon_write_csr(OCTEON_MIO_TWS_SW_TWSI, mio_tws_sw_twsi.u64);
+    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI_EXT, mio_tws_sw_twsi_ext.u64);
+    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI, mio_tws_sw_twsi.u64);
 
 
     /* Poll! wait the transfer complete and timeout (10ms). */
     do{
-	temp.u64 = octeon_read_csr(OCTEON_MIO_TWS_SW_TWSI);
+	temp.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI);
 	udelay(1);
     }while (temp.s.v && (timeout++ < I2C_MAX_TIMEOUT));
 
-    mio_tws_sw_twsi.u64 = octeon_read_csr(OCTEON_MIO_TWS_SW_TWSI);
+    mio_tws_sw_twsi.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI);
 
     if (timeout >= I2C_MAX_TIMEOUT) {
 	printk("Octeon twsi I2C Timeout!\n");
@@ -158,7 +159,7 @@ static int octeon_i2c_xfer_msg(struct i2c_adapter *adap, struct i2c_msg *msg, in
 
     if (msg->flags & I2C_M_RD){
 
-	mio_tws_sw_twsi_ext.u64 = octeon_read_csr(OCTEON_MIO_TWS_SW_TWSI_EXT);
+	mio_tws_sw_twsi_ext.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI_EXT);
 	data = ((uint64_t) mio_tws_sw_twsi_ext.s.d << 32) | mio_tws_sw_twsi.s.d;
 
 #ifdef I2C_OCTEON_DEBUG
diff --git a/drivers/i2c/busses/i2c-octeon_twsi.h b/drivers/i2c/busses/i2c-octeon_twsi.h
index 4e15cda..66e3ec2 100644
--- a/drivers/i2c/busses/i2c-octeon_twsi.h
+++ b/drivers/i2c/busses/i2c-octeon_twsi.h
@@ -15,11 +15,11 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  */
-#define IO_ADDRESS(x) (0x8000000000000000 + x)
+
 
 #define OCTEON_I2C_IOSIZE (0x20)
 
-#define OCTEON_I2C_BASE IO_ADDRESS(0x0001180000001000)
+#define OCTEON_I2C_BASE 0x8001180000001000ull
 
 
 
@@ -39,7 +39,7 @@ typedef union
 	uint64_t sovr	: 1;// size override.
 	uint64_t size	: 3;//size. sovr = 1.
 	uint64_t scr	: 2;//scratch. Unused, but retain state.
-	uint64_t a	: 10;//address fied.
+	uint64_t a	: 10;//address field.
 	uint64_t ia	: 5;//internal address.
 	uint64_t eop_ia	: 3;// extra opcode.
 	uint64_t d	: 32;//data field.
@@ -87,19 +87,3 @@ typedef union{
 
     }s;
 } octeon_mio_tws_sw_twsi_ext_t;
-
-
-
-
-
-static inline void octeon_write_csr(uint64_t csr_addr, uint64_t val)
-{
-            *(volatile uint64_t *)csr_addr = val;
-}
-
-static inline uint64_t octeon_read_csr(uint64_t csr_addr)
-{
-            return *(volatile uint64_t *)csr_addr;
-}
-
-
-- 
1.5.5.1

