From 19108816154f4508bfa4399214da365c27861ee5 Mon Sep 17 00:00:00 2001
From: Vlad Malov <vlad.malov@caviumnetworks.com>
Date: Tue, 27 Jan 2009 14:31:06 -0800
Subject: [PATCH] add TWSI 32-byte transaction support.

Plus support for the second twsi interface.
Export some symbols so twsi can be built as a module.

Signed-off-by: Vlad Malov <vlad.malov@caviumnetworks.com>
Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Signed-off-by: Phil Staub <Phil.Staub@windriver.com>
---
 arch/mips/cavium-octeon/Makefile                 |    4 +-
 arch/mips/cavium-octeon/i2c-octeon_twsi.c        |  168 ++++++++
 arch/mips/cavium-octeon/i2c-octeon_twsi_raw.c    |  463 ++++++++++++++++++++++
 arch/mips/cavium-octeon/i2c-octeon_twsi_raw.h    |  317 +++++++++++++++
 drivers/i2c/busses/Kconfig                       |    8 +
 drivers/i2c/busses/Makefile                      |    9 +-
 drivers/i2c/busses/i2c-octeon.c                  |  288 ++++++++++++++
 drivers/i2c/busses/i2c-octeon_twsi.c             |  354 -----------------
 drivers/i2c/busses/i2c-octeon_twsi.h             |   89 -----
 include/asm-mips/mach-cavium-octeon/i2c-octeon.h |   20 +
 10 files changed, 1268 insertions(+), 452 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/i2c-octeon_twsi.c
 create mode 100644 arch/mips/cavium-octeon/i2c-octeon_twsi_raw.c
 create mode 100644 arch/mips/cavium-octeon/i2c-octeon_twsi_raw.h
 create mode 100644 drivers/i2c/busses/i2c-octeon.c
 delete mode 100644 drivers/i2c/busses/i2c-octeon_twsi.c
 delete mode 100644 drivers/i2c/busses/i2c-octeon_twsi.h
 create mode 100644 include/asm-mips/mach-cavium-octeon/i2c-octeon.h

diff --git a/arch/mips/cavium-octeon/Makefile b/arch/mips/cavium-octeon/Makefile
index e33aa5c..9c93406 100644
--- a/arch/mips/cavium-octeon/Makefile
+++ b/arch/mips/cavium-octeon/Makefile
@@ -34,7 +34,9 @@ obj-$(CONFIG_CAVIUM_OCTEON_WATCHDOG)  += watchdog.o watchdog_nmi.o
 obj-$(CONFIG_CAVIUM_OCTEON_TRA)       += octeon-tra.o
 obj-$(CONFIG_CAVIUM_OCTEON_MGMT_PORT_ETHERNET) += ethernet-mgmt-port.o
 obj-$(CONFIG_CAVIUM_OCTEON_POW_ONLY_ETHERNET) += ethernet-pow.o
-obj-$(CONFIG_CAVIUM_OCTEON_SYNC)       += sync-octeon.o
+obj-$(CONFIG_CAVIUM_OCTEON_SYNC)      += sync-octeon.o
+obj-$(CONFIG_I2C_OCTEON_TWSI)         += i2c-octeon_twsi.o
+obj-$(CONFIG_I2C_OCTEON_TWSI_RAW)     += i2c-octeon_twsi_raw.o
 
 clean:
 	rm -f *.o
diff --git a/arch/mips/cavium-octeon/i2c-octeon_twsi.c b/arch/mips/cavium-octeon/i2c-octeon_twsi.c
new file mode 100644
index 0000000..3a47ed2
--- /dev/null
+++ b/arch/mips/cavium-octeon/i2c-octeon_twsi.c
@@ -0,0 +1,168 @@
+/*
+ * Portions Copyright (C) 2004-2009 Cavium Networks, Inc.
+ * Portions Copyright (c) 2006-2007 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+/* 
+ *  This file was modified by Cavium Networks Inc to:
+ *   1) Move all HW specific code here 
+ *   2) Support multiple on-chip i2c controllers
+ */
+
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/errno.h>
+#include <linux/platform_device.h>
+#include <octeon-hal-read-write.h>
+
+#include "cvmx.h" 
+#include "i2c-octeon.h"
+
+#ifdef CONFIG_I2C_OCTEON_TWSI_RAW
+ #include "i2c-octeon_twsi_raw.h"
+#endif
+
+
+typedef struct twsi_regs_s {
+ uint64_t twsx_sw_twsi_addr;
+ uint64_t twsx_sw_twsi_ext_addr;
+}twsi_regs_t;
+
+static twsi_regs_t twsi_regs[OCT_MAX_IFACES]; 
+
+
+int octeon_i2c_num_ifaces(void)
+{
+    /* list chips with 2 twsi interfaces here */
+    if( OCTEON_IS_MODEL(OCTEON_CN56XX) || 
+	OCTEON_IS_MODEL(OCTEON_CN52XX) )
+	 return 2;
+
+    /* all others have 1 iface as of today */
+    return 1;
+}
+EXPORT_SYMBOL(octeon_i2c_num_ifaces);
+
+void* octeon_i2c_get_algo_data(int iface)
+{
+    if(iface >= OCT_MAX_IFACES) return NULL;
+
+    twsi_regs[iface].twsx_sw_twsi_addr = CVMX_MIO_TWSX_SW_TWSI(iface);
+    twsi_regs[iface].twsx_sw_twsi_ext_addr = CVMX_MIO_TWSX_SW_TWSI_EXT(iface);
+
+    return &twsi_regs[iface];
+}
+EXPORT_SYMBOL(octeon_i2c_get_algo_data);
+
+int octeon_i2c_xfer_msg(struct i2c_adapter *adap, struct i2c_msg *msg, int combined)
+{
+    uint64_t data = 0;
+    int i;
+    int timeout = 0;
+    cvmx_mio_twsx_sw_twsi_t temp, mio_tws_sw_twsi;
+    cvmx_mio_twsx_sw_twsi_ext_t mio_tws_sw_twsi_ext;
+
+#define OCTEON_MIO_TWS_SW_TWSI_EXT (((twsi_regs_t*)(adap->algo_data))->twsx_sw_twsi_ext_addr)
+#define OCTEON_MIO_TWS_SW_TWSI (((twsi_regs_t*)(adap->algo_data))->twsx_sw_twsi_addr)
+
+#ifdef I2C_OCTEON_DEBUG
+    printk("addr: 0x%04x, len: %d, flags: 0x%x, buf[0] = %x\n", msg->addr, msg->len, msg->flags, msg->buf[0]);
+#endif
+
+#ifdef CONFIG_I2C_OCTEON_TWSI_RAW
+        if((msg->len > 8) && (msg->flags & I2C_M_TEN))
+            return octeon_i2c_xfer_msg_raw(adap, msg);
+#endif
+
+    mio_tws_sw_twsi.u64 = 0x0;
+
+    mio_tws_sw_twsi.s.v = 1;
+
+    /* ten bit address op<1> = 1 */
+    if( msg->flags & I2C_M_TEN) mio_tws_sw_twsi.s.op |= 0x2;
+    mio_tws_sw_twsi.s.a = msg->addr & 0x3ff;
+
+    /* check the msg->len  0<=len <8 */
+    if( msg->len > 8 ){
+	printk("%s %d Error len msg->len %d\n", __FILE__, __LINE__, msg->len);
+	return (-1);
+    }
+    mio_tws_sw_twsi.s.sovr = 1;			// size override.
+    if ( msg->len == 0 )
+       mio_tws_sw_twsi.s.size = 0;
+    else
+       mio_tws_sw_twsi.s.size = msg->len-1;	// Size: 0 = 1 byte, 1 = 2 bytes, ..., 7 = 8 bytes
+
+    if( msg->flags & I2C_M_RD ){
+	mio_tws_sw_twsi.s.r = 1;		// Enable Read bit
+    }else{
+	for(i =0; i <= mio_tws_sw_twsi.s.size; i++){
+	    data = data << 8;
+	    data |= msg->buf[i];
+	}
+
+	mio_tws_sw_twsi.s.d = data;
+	mio_tws_sw_twsi_ext.s.d = data >> 32;
+    }
+
+#ifdef I2C_OCTEON_DEBUG
+    if ( mio_tws_sw_twsi.s.r == 1 )
+	printk("twsi-read  op: data=%llx %llx len=%d\n", mio_tws_sw_twsi.u64, mio_tws_sw_twsi_ext.u64, msg->len);
+    else
+        printk("twsi-write op: data=%llx %llx len=%d\n", mio_tws_sw_twsi.u64, mio_tws_sw_twsi_ext.u64, msg->len);
+#endif
+
+    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI_EXT, mio_tws_sw_twsi_ext.u64);
+    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI, mio_tws_sw_twsi.u64);
+
+
+    /* Poll! wait the transfer complete and timeout (10ms). */
+    do{
+	temp.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI);
+	udelay(1);
+    }while (temp.s.v && (timeout++ < I2C_MAX_TIMEOUT));
+
+    mio_tws_sw_twsi.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI);
+
+    if (timeout >= I2C_MAX_TIMEOUT) {
+	printk("Octeon twsi I2C Timeout!\n");
+	return -EIO;
+    }
+
+    /* transfer ERROR */
+    if (!mio_tws_sw_twsi.s.r){
+	return -EIO;
+    }
+
+    if (msg->flags & I2C_M_RD){
+
+	mio_tws_sw_twsi_ext.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI_EXT);
+	data = ((uint64_t) mio_tws_sw_twsi_ext.s.d << 32) | mio_tws_sw_twsi.s.d;
+
+#ifdef I2C_OCTEON_DEBUG
+	printk("twsi-read result: data=%llx %llx len=%d\n", mio_tws_sw_twsi.u64, mio_tws_sw_twsi_ext.u64, msg->len);
+#endif
+
+	for(i = mio_tws_sw_twsi.s.size; i >= 0; i--){
+		msg->buf[i] = data;
+		data = data >> 8;
+	}
+    }
+
+    return msg->len;
+}
+EXPORT_SYMBOL(octeon_i2c_xfer_msg);
diff --git a/arch/mips/cavium-octeon/i2c-octeon_twsi_raw.c b/arch/mips/cavium-octeon/i2c-octeon_twsi_raw.c
new file mode 100644
index 0000000..45a8b9d
--- /dev/null
+++ b/arch/mips/cavium-octeon/i2c-octeon_twsi_raw.c
@@ -0,0 +1,463 @@
+/***********************license start***************
+ * Copyright (c) 2003-2008, Cavium Networks. All rights reserved.
+ *
+ * This software file (the "File") is owned and distributed by Cavium
+ * Networks ("Cavium") under the following dual licensing option: The dual
+ * licensing option gives you, the licensee, the choice between the following
+ * alternative licensing terms.  Once you have made an election to use the
+ * File under one of the following alternative licensing terms (license
+ * types) you are bound by the respective terms and you may distribute the
+ * file (or any derivative thereof), to the extent allowed by the respective
+ * licensing term, only if you (i) delete this introductory statement
+ * regarding the dual licensing option from the file you will distribute,
+ * (ii) delete the licensing term that you have elected NOT to use from the
+ * file you will distribute and (iii) follow the respective licensing term
+ * that you have elected to use with respect to the correct attribution or
+ * licensing term that you have to include with your distribution.
+ *
+ * ***
+ * OCTEON SDK License Type 2:
+ *
+ * IMPORTANT: Read this Agreement carefully before clicking on the "I accept"
+ * button to download the Software and/or before using the Software.  This
+ * License Agreement (the "Agreement") is a legal agreement between you,
+ * either an individual or a single legal entity ("You" or "you"), and Cavium
+ * Networks ("Cavium").  This Agreement governs your use of the Cavium
+ * software that can be downloaded after accepting this Agreement and/or that
+ * is accompanied by this Agreement (the "Software").  You must accept the
+ * terms of this Agreement before downloading and/or using the Software.  By
+ * clicking on the "I accept" button to download and/or by using the
+ * Software, you are indicating that you have read and understood, and assent
+ * to be bound by, the terms of this Agreement.  If you do not agree to the
+ * terms of the Agreement, you are not granted any rights whatsoever in the
+ * Software.  If you are not willing to be bound by these terms and
+ * conditions, you should not use or cease all use of the Software.  This
+ * Software is the property of Cavium Networks and constitutes the
+ * proprietary information of Cavium Networks.  You agree to take reasonable
+ * steps to prevent the disclosure, unauthorized use or unauthorized
+ * distribution of the Software to any third party.
+ *
+ * License Grant.  Subject to the terms and conditions of this Agreement,
+ * Cavium grants you a nonexclusive, non-transferable, worldwide, fully-paid
+ * and royalty-free license to
+ *
+ * (a) install, reproduce, and execute the executable version of the Software
+ * solely for your internal use and only (a) on hardware manufactured by
+ * Cavium, or (b) software of Cavium that simulates Cavium hardware;
+ *
+ * (b) create derivative works of any portions of the Software provided to
+ * you by Cavium in source code form, which portions enable features of the
+ * Cavium hardware products you or your licensees are entitled to use,
+ * provided that any such derivative works must be used only (a) on hardware
+ * manufactured by Cavium, or (b) software of Cavium that simulates Cavium
+ * hardware; and
+ *
+ * (c) distribute derivative works you created in accordance with clause (b)
+ * above, only in executable form and only if such distribution (i)
+ * reproduces the copyright notice that can be found at the very end of this
+ * Agreement and (ii) is pursuant to a binding license agreement that
+ * contains terms no less restrictive and no less protective of Cavium than
+ * this Agreement.  You will immediately notify Cavium if you become aware of
+ * any breach of any such license agreement.
+ *
+ * Restrictions.  The rights granted to you in this Agreement are subject to
+ * the following restrictions: Except as expressly set forth in this
+ * Agreement (a) you will not license, sell, rent, lease, transfer, assign,
+ * display, host, outsource, disclose or otherwise commercially exploit or
+ * make the Software, or any derivatives you create under this Agreement,
+ * available to any third party; (b) you will not modify or create derivative
+ * works of any part of the Software; (c) you will not access or use the
+ * Software in order to create similar or competitive products, components,
+ * or services; and (d), no part of the Software may be copied (except for
+ * the making of a single archival copy), reproduced, distributed,
+ * republished, downloaded, displayed, posted or transmitted in any form or
+ * by any means.
+ *
+ * Ownership.  You acknowledge and agree that, subject to the license grant
+ * contained in this Agreement and as between you and Cavium (a) Cavium owns
+ * all copies of and intellectual property rights to the Software, however
+ * made, and retains all rights in and to the Software, including all
+ * intellectual property rights therein, and (b) you own all the derivate
+ * works of the Software created by you under this Agreement, subject to
+ * Cavium's rights in the Software.  There are no implied licenses under this
+ * Agreement, and any rights not expressly granted to your hereunder are
+ * reserved by Cavium.  You will not, at any time, contest anywhere in the
+ * world Cavium's ownership of the intellectual property rights in and to the
+ * Software.
+ *
+ * Disclaimer of Warranties.  The Software is provided to you free of charge,
+ * and on an "As-Is" basis.  Cavium provides no technical support, warranties
+ * or remedies for the Software.  Cavium and its suppliers disclaim all
+ * express, implied or statutory warranties relating to the Software,
+ * including but not limited to, merchantability, fitness for a particular
+ * purpose, title, and non-infringement.  Cavium does not warrant that the
+ * Software and the use thereof will be error-free, that defects will be
+ * corrected, or that the Software is free of viruses or other harmful
+ * components.  If applicable law requires any warranties with respect to the
+ * Software, all such warranties are limited in duration to thirty (30) days
+ * from the date of download or first use, whichever comes first.
+ *
+ * Limitation of Liability.  Neither Cavium nor its suppliers shall be
+ * responsible or liable with respect to any subject matter of this Agreement
+ * or terms or conditions related thereto under any contract, negligence,
+ * strict liability or other theory (a) for loss or inaccuracy of data or
+ * cost of procurement of substitute goods, services or technology, or (b)
+ * for any indirect, incidental or consequential damages including, but not
+ * limited to loss of revenues and loss of profits.  Cavium's aggregate
+ * cumulative liability hereunder shall not exceed the greater of Fifty U.S.
+ * Dollars (U.S.$50.00) or the amount paid by you for the Software that
+ * caused the damage.  Certain states and/or jurisdictions do not allow the
+ * exclusion of implied warranties or limitation of liability for incidental
+ * or consequential damages, so the exclusions set forth above may not apply
+ * to you.
+ *
+ * Basis of Bargain.  The warranty disclaimer and limitation of liability set
+ * forth above are fundamental elements of the basis of the agreement between
+ * Cavium and you.  Cavium would not provide the Software without such
+ * limitations.  The warranty disclaimer and limitation of liability inure to
+ * the benefit of Cavium and Cavium's suppliers.
+ *
+ * Term and Termination.  This Agreement and the licenses granted hereunder
+ * are effective on the date you accept the terms of this Agreement, download
+ * the Software, or use the Software, whichever comes first, and shall
+ * continue unless this Agreement is terminated pursuant to this section.
+ * This Agreement immediately terminates in the event that you materially
+ * breach any of the terms hereof.  You may terminate this Agreement at any
+ * time, with or without cause, by destroying any copies of the Software in
+ * your possession.  Upon termination, the license granted hereunder shall
+ * terminate but the Sections titled "Restrictions", "Ownership", "Disclaimer
+ * of Warranties", "Limitation of Liability", "Basis of Bargain", "Term and
+ * Termination", "Export", and "Miscellaneous" will remain in effect.
+ *
+ * Export.  The Software and related technology are subject to U.S.  export
+ * control laws and may be subject to export or import regulations in other
+ * countries.  You agree to strictly comply with all such laws and
+ * regulations and acknowledges that you have the responsibility to obtain
+ * authorization to export, re-export, or import the Software and related
+ * technology, as may be required.  You will indemnify and hold Cavium
+ * harmless from any and all claims, losses, liabilities, damages, fines,
+ * penalties, costs and expenses (including attorney's fees) arising from or
+ * relating to any breach by you of your obligations under this section.
+ * Your obligations under this section shall survive the expiration or
+ * termination of this Agreement.
+ *
+ * Miscellaneous.  Neither the rights nor the obligations arising under this
+ * Agreement are assignable by you, and any such attempted assignment or
+ * transfer shall be void and without effect.  This Agreement shall be
+ * governed by and construed in accordance with the laws of the State of
+ * California without regard to any conflicts of laws provisions that would
+ * require application of the laws of another jurisdiction.  Any action under
+ * or relating to this Agreement shall be brought in the state and federal
+ * courts located in California, with venue in the courts located in Santa
+ * Clara County and each party hereby submits to the personal jurisdiction of
+ * such courts; provided, however, that nothing herein will operate to
+ * prohibit or restrict Cavium from filing for and obtaining injunctive
+ * relief from any court of competent jurisdiction.  The United Nations
+ * Convention on Contracts for the International Sale of Goods shall not
+ * apply to this Agreement.  In the event that any provision of this
+ * Agreement is found to be contrary to law, then such provision shall be
+ * construed as nearly as possible to reflect the intention of the parties,
+ * with the other provisions remaining in full force and effect.  Any notice
+ * to you may be provided by email.  This Agreement constitutes the entire
+ * agreement between the parties and supersedes all prior or contemporaneous,
+ * agreements, understandings and communications between the parties, whether
+ * written or oral, pertaining to the subject matter hereof.  Any
+ * modifications of this Agreement must be in writing and agreed to by both
+ * parties.
+ *
+ * Copyright (c) 2003-2008, Cavium Networks. All rights reserved.
+ *
+ * ***
+ *
+ * OCTEON SDK License Type 4:
+ *
+ * Author: Cavium Networks
+ *
+ * Contact: support@caviumnetworks.com
+ * This file is part of the OCTEON SDK
+ *
+ * Copyright (c) 2008 Cavium Networks
+ *
+ * This file is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License, Version 2, as published by
+ * the Free Software Foundation.
+ *
+ * This file is distributed in the hope that it will be useful,
+ * but AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or NONINFRINGEMENT.
+ * See the GNU General Public License for more details.
+ * it under the terms of the GNU General Public License, Version 2, as published by
+ * the Free Software Foundation.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this file; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ * or visit http://www.gnu.org/licenses/.
+ *
+ * This file may also be available under a different license from Cavium.
+ * Contact Cavium Networks for more information
+ ***********************license end**************************************/
+
+/* 
+ * octeon TWSI low lewel controller interface. 7-bit addressing implementation 
+ */
+
+#include <linux/i2c.h>
+#include <octeon-hal-read-write.h>
+#include "cvmx.h"
+#include "i2c-octeon_twsi_raw.h"
+
+/*
+ * uint8_t cvmx_twsix_read_ctr(int twsi_id, uint8_t reg)
+ * twsi core register read
+ * twsi_id - twsi core index
+ * reg 0 - 8-bit register
+ * returns 8-bit register contetn
+ */
+typedef struct twsi_regs_s {
+ uint64_t twsx_sw_twsi_addr;
+ uint64_t twsx_sw_twsi_ext_addr;
+}twsi_regs_t;
+
+#define OCTEON_MIO_TWS_SW_TWSI (((twsi_regs_t*)(adap->algo_data))->twsx_sw_twsi_addr)
+uint8_t cvmx_twsix_read_ctr(struct i2c_adapter *adap, uint8_t reg)
+{
+    cvmx_mio_twsx_sw_twsi_t sw_twsi_val;
+
+    sw_twsi_val.u64 = 0;
+    sw_twsi_val.s.v = 1;
+    sw_twsi_val.s.op = 6;
+    sw_twsi_val.s.eop_ia = reg;
+    sw_twsi_val.s.r = 1;
+    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI, sw_twsi_val.u64);
+    while (((cvmx_mio_twsx_sw_twsi_t)(sw_twsi_val.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI))).s.v)
+        ;
+    return sw_twsi_val.s.d ;
+}
+
+/*
+ * uint8_t cvmx_twsix_write_ctr(int twsi_id, uint8_t reg, uint8_t data)
+ *
+ * twsi core register write
+ * twsi_id - twsi core index
+ * reg 0 - 8-bit register
+ * data - data to write
+ * returns 0;
+ */
+
+int cvmx_twsix_write_ctr(struct i2c_adapter *adap, uint8_t reg, uint8_t data)
+{
+    cvmx_mio_twsx_sw_twsi_t sw_twsi_val;
+
+    sw_twsi_val.u64 = 0;
+    sw_twsi_val.s.v = 1;
+    sw_twsi_val.s.op = 6;
+    sw_twsi_val.s.eop_ia = reg;
+    sw_twsi_val.s.d = data;
+    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI, sw_twsi_val.u64);
+    while (((cvmx_mio_twsx_sw_twsi_t)(sw_twsi_val.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI))).s.v)
+        ;
+
+    return 0;
+}
+
+/*
+ * cvmx_twsi_wait_iflg(int twsi_id)
+ * cvmx_twsi_wait_stop(int twsi_id)
+ *
+ * Helper functions - wait for event flag.
+ *
+ * TWSI_WAIT loop count must be defined large enough to allow on-wire transaction to finish - that is 
+ * about 20 twsi clocks
+ */
+#define TWSI_WAIT 10000000
+static inline int cvmx_twsi_wait_iflg(struct i2c_adapter *adap)
+{
+    octeon_twsi_ctl_t ctl_reg;
+    int wait = TWSI_WAIT;
+    do{
+        ctl_reg.u8 = cvmx_twsix_read_ctr(adap, TWSI_CTL_REG);
+    } while((ctl_reg.s.iflg ==0) && (wait-- >0));
+    if(wait == 0) return -1;
+    return 0;
+}
+
+static inline int cvmx_twsi_wait_stop(struct i2c_adapter *adap)
+{
+    octeon_twsi_ctl_t ctl_reg;
+    int wait = TWSI_WAIT;
+    do{
+        ctl_reg.u8 = cvmx_twsix_read_ctr(adap, TWSI_CTL_REG);
+    } while((ctl_reg.s.stp ==1) && (wait-- >0));
+    if(wait == 0) return -1;
+    return 0;
+}
+
+
+/*
+ * uint8_t octeon_twsi_read_byte(int twsi_id, uint8_t* byte, int ack) 
+ * uint8_t octeon_twsi_write_byte(int twsi_id, uint8_t byte)
+ *
+ * helper functions - read or write byte to data reg and reads the TWSI core status
+ */
+static uint8_t octeon_twsi_read_byte(struct i2c_adapter *adap, uint8_t* byte, int ack)
+{
+    octeon_twsi_ctl_t ctl_reg;
+    octeon_twsi_data_t data;
+    octeon_twsi_stat_t stat;
+
+    /* clear interrupt flag, set aak for requested ACK signal level */
+    ctl_reg.u8 =0;
+    ctl_reg.s.aak = (ack==0) ?0:1;
+    ctl_reg.s.enab =1;
+    cvmx_twsix_write_ctr(adap, TWSI_CTL_REG, ctl_reg.u8);
+
+    /* wait for  twsi_ctl[iflg] to be set */
+    if(cvmx_twsi_wait_iflg(adap)) goto error;
+
+    /* read the byte */
+    data.u8 =cvmx_twsix_read_ctr(adap, TWSI_DATA_REG);
+    *byte = data.s.data;
+error:
+    /* read the status */
+    stat.u8 = cvmx_twsix_read_ctr(adap, TWSI_STAT_REG);
+    return stat.s.stat;
+}
+
+static uint8_t octeon_twsi_write_byte(struct i2c_adapter *adap, uint8_t byte)
+{
+    octeon_twsi_ctl_t ctl_reg;
+    octeon_twsi_data_t data;
+    octeon_twsi_stat_t stat;
+
+    /* tx data byte - write to twsi_data reg, then clear twsi_ctl[iflg] */
+    data.s.data = byte;
+    cvmx_twsix_write_ctr(adap, TWSI_DATA_REG, data.u8);
+
+    ctl_reg.u8 = cvmx_twsix_read_ctr(adap, TWSI_CTL_REG);
+    ctl_reg.s.iflg =0;
+    cvmx_twsix_write_ctr(adap, TWSI_CTL_REG, ctl_reg.u8);
+
+    /* wait for  twsi_ctl[iflg] to be set */
+    if(cvmx_twsi_wait_iflg(adap)) goto error;
+error:
+     /* read the status */
+     stat.u8 = cvmx_twsix_read_ctr(adap, TWSI_STAT_REG);
+     return stat.s.stat;
+}
+
+/*
+ * int octeon_i2c_xfer_msg_raw(struct i2c_msg *msg)
+ *
+ * Send (read or write) a message with 7-bit address device over direct control of 
+ * TWSI core, bypassind HLC. Will try to finish the transaction on failure, so core state
+ * expected to be idle with HLC enabled on exit.
+ * 10-bit addressing not implemented at that time.
+ *
+ * adap - i2c adapter
+ * msg - message to transfer
+ * returns 0 on success, TWSI core state on error. Will try to finish the transaction on failure, so core state expected to be idle
+ */
+int octeon_i2c_xfer_msg_raw(struct i2c_adapter *adap, struct i2c_msg *msg)
+{
+    int i =0;
+    octeon_twsi_ctl_t ctl_reg;
+    octeon_twsi_addr_t addr;
+    octeon_twsi_stat_t stat;
+    int is_read = msg->flags & I2C_M_RD;
+    int ret =0;
+
+    /* fail if 10-bit address transaction requested */
+    if(msg->flags & I2C_M_TEN) return -EINVAL;
+
+    /* check the core state, quit if not idle */
+    stat.u8 =cvmx_twsix_read_ctr(adap, TWSI_STAT_REG);
+    if(stat.s.stat != TWSI_IDLE) {
+       msg->len =0; return stat.s.stat;
+    }
+
+    /* first send start - set twsi_ctl[sta] to 1 */
+    ctl_reg.u8 =0;
+    ctl_reg.s.enab =1;
+    ctl_reg.s.sta =1;
+    ctl_reg.s.iflg =0;
+    cvmx_twsix_write_ctr(adap, TWSI_CTL_REG, ctl_reg.u8);
+    /* wait for  twsi_ctl[iflg] to be set */
+    if(cvmx_twsi_wait_iflg(adap)) goto stop;
+
+    /* Write 7-bit addr to twsi_data; set read bit */
+    addr.s.slave_addr7 = msg->addr;
+    if(is_read) addr.s.r =1;
+    else addr.s.r =0;
+    stat.s.stat =octeon_twsi_write_byte(adap, addr.u8);
+
+    /* Data read loop */
+    if( is_read) {
+    /* any status but ACK_RXED means failure - we try to send stop and go idle */
+      if(!(stat.s.stat == TWSI_ADDR_R_TX_ACK_RXED)) {
+      ret = stat.s.stat;
+      msg->len =0;
+      goto stop;
+     }
+     /* We read data from the buffer and send ACK back.
+       The last byte we read with negative ACK */
+      for(i =0; i<msg->len-1; i++)
+      {
+        stat.s.stat =octeon_twsi_read_byte(adap, &(msg->buf[i]), 1);
+        if(stat.s.stat != TWSI_DATA_RX_ACK_TXED)
+           goto stop;
+      }
+      /* last read we send negACK */
+      stat.s.stat =octeon_twsi_read_byte(adap, &(msg->buf[i]), 0);
+        if(stat.s.stat != TWSI_DATA_RX_NACK_TXED)
+             return stat.s.stat;
+    } /* read loop */
+
+    /* Data write loop */
+    else {
+    /* any status but ACK_RXED means failure - we try to send stop and go idle */
+      if(stat.s.stat != TWSI_ADDR_W_TX_ACK_RXED) {
+          ret = stat.s.stat;
+          msg->len =0;
+          goto stop;
+      }
+      /* We write data to the buffer and check for ACK. */
+      for(i =0; i<msg->len; i++)
+      {
+          stat.s.stat =octeon_twsi_write_byte(adap, msg->buf[i]);
+          if(stat.s.stat == TWSI_DATA_TX_NACK_RXED) {
+              /* Negative ACK means slave can not RX more */
+              msg->len =i-1;
+              goto stop;
+          }
+          else if(stat.s.stat != TWSI_DATA_TX_ACK_RXED) {
+              /* lost arbitration? try to send stop and go idle. This byte likely was not written */
+              msg->len = (i-2) >0? (i-2):0;
+              goto stop;
+          }
+      }
+    }  /* write loop */
+
+stop:
+    ctl_reg.u8 =cvmx_twsix_read_ctr(adap, TWSI_CTL_REG);
+    ctl_reg.s.stp =1;
+    ctl_reg.s.iflg =0;
+    cvmx_twsix_write_ctr(adap, TWSI_CTL_REG, ctl_reg.u8);
+    /* wait for  twsi_ctl[stp] to clear */
+    cvmx_twsi_wait_stop(adap);
+
+    /* Leave TWSI core with HLC eabled */
+    {
+       ctl_reg.u8 =0;
+       ctl_reg.s.ce =1;
+       ctl_reg.s.enab =1;
+       ctl_reg.s.aak =1;
+       cvmx_twsix_write_ctr(adap, TWSI_CTL_REG, ctl_reg.u8);
+    }
+#ifdef TWSI_DEBUG
+    if(ret) printk("failed low level TWSI xfer, controller state %02x\n", ret);
+#endif
+    if(ret) ret = -EIO;
+    return ret;
+}
+
diff --git a/arch/mips/cavium-octeon/i2c-octeon_twsi_raw.h b/arch/mips/cavium-octeon/i2c-octeon_twsi_raw.h
new file mode 100644
index 0000000..98717fa
--- /dev/null
+++ b/arch/mips/cavium-octeon/i2c-octeon_twsi_raw.h
@@ -0,0 +1,317 @@
+/***********************license start***************
+ * Copyright (c) 2003-2008, Cavium Networks. All rights reserved.
+ *
+ * This software file (the "File") is owned and distributed by Cavium
+ * Networks ("Cavium") under the following dual licensing option: The dual
+ * licensing option gives you, the licensee, the choice between the following
+ * alternative licensing terms.  Once you have made an election to use the
+ * File under one of the following alternative licensing terms (license
+ * types) you are bound by the respective terms and you may distribute the
+ * file (or any derivative thereof), to the extent allowed by the respective
+ * licensing term, only if you (i) delete this introductory statement
+ * regarding the dual licensing option from the file you will distribute,
+ * (ii) delete the licensing term that you have elected NOT to use from the
+ * file you will distribute and (iii) follow the respective licensing term
+ * that you have elected to use with respect to the correct attribution or
+ * licensing term that you have to include with your distribution.
+ *
+ * ***
+ * OCTEON SDK License Type 2:
+ *
+ * IMPORTANT: Read this Agreement carefully before clicking on the "I accept"
+ * button to download the Software and/or before using the Software.  This
+ * License Agreement (the "Agreement") is a legal agreement between you,
+ * either an individual or a single legal entity ("You" or "you"), and Cavium
+ * Networks ("Cavium").  This Agreement governs your use of the Cavium
+ * software that can be downloaded after accepting this Agreement and/or that
+ * is accompanied by this Agreement (the "Software").  You must accept the
+ * terms of this Agreement before downloading and/or using the Software.  By
+ * clicking on the "I accept" button to download and/or by using the
+ * Software, you are indicating that you have read and understood, and assent
+ * to be bound by, the terms of this Agreement.  If you do not agree to the
+ * terms of the Agreement, you are not granted any rights whatsoever in the
+ * Software.  If you are not willing to be bound by these terms and
+ * conditions, you should not use or cease all use of the Software.  This
+ * Software is the property of Cavium Networks and constitutes the
+ * proprietary information of Cavium Networks.  You agree to take reasonable
+ * steps to prevent the disclosure, unauthorized use or unauthorized
+ * distribution of the Software to any third party.
+ *
+ * License Grant.  Subject to the terms and conditions of this Agreement,
+ * Cavium grants you a nonexclusive, non-transferable, worldwide, fully-paid
+ * and royalty-free license to
+ *
+ * (a) install, reproduce, and execute the executable version of the Software
+ * solely for your internal use and only (a) on hardware manufactured by
+ * Cavium, or (b) software of Cavium that simulates Cavium hardware;
+*
+ * (b) create derivative works of any portions of the Software provided to
+ * you by Cavium in source code form, which portions enable features of the
+ * Cavium hardware products you or your licensees are entitled to use,
+ * provided that any such derivative works must be used only (a) on hardware
+ * manufactured by Cavium, or (b) software of Cavium that simulates Cavium
+ * hardware; and
+ *
+ * (c) distribute derivative works you created in accordance with clause (b)
+ * above, only in executable form and only if such distribution (i)
+ * reproduces the copyright notice that can be found at the very end of this
+ * Agreement and (ii) is pursuant to a binding license agreement that
+ * contains terms no less restrictive and no less protective of Cavium than
+ * this Agreement.  You will immediately notify Cavium if you become aware of
+ * any breach of any such license agreement.
+ *
+ * Restrictions.  The rights granted to you in this Agreement are subject to
+ * the following restrictions: Except as expressly set forth in this
+ * Agreement (a) you will not license, sell, rent, lease, transfer, assign,
+ * display, host, outsource, disclose or otherwise commercially exploit or
+ * make the Software, or any derivatives you create under this Agreement,
+ * available to any third party; (b) you will not modify or create derivative
+ * works of any part of the Software; (c) you will not access or use the
+ * Software in order to create similar or competitive products, components,
+ * or services; and (d), no part of the Software may be copied (except for
+ * the making of a single archival copy), reproduced, distributed,
+ * republished, downloaded, displayed, posted or transmitted in any form or
+ * by any means.
+ *
+ * Ownership.  You acknowledge and agree that, subject to the license grant
+ * contained in this Agreement and as between you and Cavium (a) Cavium owns
+ * all copies of and intellectual property rights to the Software, however
+ * made, and retains all rights in and to the Software, including all
+ * intellectual property rights therein, and (b) you own all the derivate
+ * works of the Software created by you under this Agreement, subject to
+ * Cavium's rights in the Software.  There are no implied licenses under this
+ * Agreement, and any rights not expressly granted to your hereunder are
+ * reserved by Cavium.  You will not, at any time, contest anywhere in the
+ * world Cavium's ownership of the intellectual property rights in and to the
+ * Software.
+ *
+ * Disclaimer of Warranties.  The Software is provided to you free of charge,
+ * and on an "As-Is" basis.  Cavium provides no technical support, warranties
+ * or remedies for the Software.  Cavium and its suppliers disclaim all
+* express, implied or statutory warranties relating to the Software,
+ * including but not limited to, merchantability, fitness for a particular
+ * purpose, title, and non-infringement.  Cavium does not warrant that the
+ * Software and the use thereof will be error-free, that defects will be
+ * corrected, or that the Software is free of viruses or other harmful
+ * components.  If applicable law requires any warranties with respect to the
+ * Software, all such warranties are limited in duration to thirty (30) days
+ * from the date of download or first use, whichever comes first.
+ *
+ * Limitation of Liability.  Neither Cavium nor its suppliers shall be
+ * responsible or liable with respect to any subject matter of this Agreement
+ * or terms or conditions related thereto under any contract, negligence,
+ * strict liability or other theory (a) for loss or inaccuracy of data or
+ * cost of procurement of substitute goods, services or technology, or (b)
+ * for any indirect, incidental or consequential damages including, but not
+ * limited to loss of revenues and loss of profits.  Cavium's aggregate
+ * cumulative liability hereunder shall not exceed the greater of Fifty U.S.
+ * Dollars (U.S.$50.00) or the amount paid by you for the Software that
+ * caused the damage.  Certain states and/or jurisdictions do not allow the
+ * exclusion of implied warranties or limitation of liability for incidental
+ * or consequential damages, so the exclusions set forth above may not apply
+ * to you.
+ *
+ * Basis of Bargain.  The warranty disclaimer and limitation of liability set
+ * forth above are fundamental elements of the basis of the agreement between
+ * Cavium and you.  Cavium would not provide the Software without such
+ * limitations.  The warranty disclaimer and limitation of liability inure to
+ * the benefit of Cavium and Cavium's suppliers.
+ *
+ * Term and Termination.  This Agreement and the licenses granted hereunder
+ * are effective on the date you accept the terms of this Agreement, download
+ * the Software, or use the Software, whichever comes first, and shall
+ * continue unless this Agreement is terminated pursuant to this section.
+ * This Agreement immediately terminates in the event that you materially
+ * breach any of the terms hereof.  You may terminate this Agreement at any
+ * time, with or without cause, by destroying any copies of the Software in
+ * your possession.  Upon termination, the license granted hereunder shall
+ * terminate but the Sections titled "Restrictions", "Ownership", "Disclaimer
+ * of Warranties", "Limitation of Liability", "Basis of Bargain", "Term and
+ * Termination", "Export", and "Miscellaneous" will remain in effect.
+ *
+ * Export.  The Software and related technology are subject to U.S.  export
+ * control laws and may be subject to export or import regulations in other
+ * countries.  You agree to strictly comply with all such laws and
+ * regulations and acknowledges that you have the responsibility to obtain
+ * authorization to export, re-export, or import the Software and related
+ * technology, as may be required.  You will indemnify and hold Cavium
+ * harmless from any and all claims, losses, liabilities, damages, fines,
+ * penalties, costs and expenses (including attorney's fees) arising from or
+ * relating to any breach by you of your obligations under this section.
+ * Your obligations under this section shall survive the expiration or
+ * termination of this Agreement.
+ *
+ * Miscellaneous.  Neither the rights nor the obligations arising under this
+ * Agreement are assignable by you, and any such attempted assignment or
+ * transfer shall be void and without effect.  This Agreement shall be
+ * governed by and construed in accordance with the laws of the State of
+ * California without regard to any conflicts of laws provisions that would
+ * require application of the laws of another jurisdiction.  Any action under
+ * or relating to this Agreement shall be brought in the state and federal
+ * courts located in California, with venue in the courts located in Santa
+ * Clara County and each party hereby submits to the personal jurisdiction of
+ * such courts; provided, however, that nothing herein will operate to
+ * prohibit or restrict Cavium from filing for and obtaining injunctive
+ * relief from any court of competent jurisdiction.  The United Nations
+ * Convention on Contracts for the International Sale of Goods shall not
+ * apply to this Agreement.  In the event that any provision of this
+ * Agreement is found to be contrary to law, then such provision shall be
+ * construed as nearly as possible to reflect the intention of the parties,
+ * with the other provisions remaining in full force and effect.  Any notice
+ * to you may be provided by email.  This Agreement constitutes the entire
+ * agreement between the parties and supersedes all prior or contemporaneous,
+ * agreements, understandings and communications between the parties, whether
+ * written or oral, pertaining to the subject matter hereof.  Any
+ * modifications of this Agreement must be in writing and agreed to by both
+ * parties.
+ *
+ * Copyright (c) 2003-2008, Cavium Networks. All rights reserved.
+ *
+ * ***
+ *
+ * OCTEON SDK License Type 4:
+ *
+ * Author: Cavium Networks
+ *
+ * Contact: support@caviumnetworks.com
+ * This file is part of the OCTEON SDK
+ *
+ * Copyright (c) 2008 Cavium Networks
+ *
+ * This file is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License, Version 2, as published by
+ * the Free Software Foundation.
+ *
+ * This file is distributed in the hope that it will be useful,
+ * but AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or NONINFRINGEMENT.
+ * See the GNU General Public License for more details.
+ * it under the terms of the GNU General Public License, Version 2, as published by
+ * the Free Software Foundation.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this file; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+ * or visit http://www.gnu.org/licenses/.
+ *
+ * This file may also be available under a different license from Cavium.
+ * Contact Cavium Networks for more information
+ ***********************license end**************************************/
+
+#ifndef __CVMX_TWSI_RAW_H__
+#define __CVMX_TWSI_RAW_H__
+
+/* Addresses for twsi 8-bit registers. Gets written to EOP_IA field of MIO_TWS_SW_TWSI reg when OP = 6 and SLONLY =0 */
+#define TWSI_SLAVE_ADD_REG      0
+#define TWSI_DATA_REG           1
+#define TWSI_CTL_REG            2
+#define TWSI_STAT_REG	        3 /* read only */
+#define TWSI_CLKCTL_REG 	3 /* write only */
+#define TWSI_SLAVE_EXTADD_REG   4       
+#define TWSI_RST_REG            7
+
+/* twsi core slave address reg */
+typedef union{
+    uint8_t u8;
+    struct{
+        uint8_t slave_addr7     : 7;
+        uint8_t gce    : 1;
+
+    }s;
+} octeon_twsi_slave_add_t;
+
+/* twsi core 10-bit slave address reg */
+typedef union{
+    uint8_t u8;
+    struct{
+        uint8_t slave_addr8     : 8;
+    }s;
+} octeon_twsi_slave_extadd_t;
+
+/* twsi core control register */
+typedef union{
+    uint8_t u8;
+    struct{
+        uint8_t ce     : 1;  /* enable HLC*/
+        uint8_t enab   : 1;  /* bus enable */
+        uint8_t sta    : 1;  /* start request */
+        uint8_t stp    : 1;  /* stop request */
+        uint8_t iflg   : 1;  /* interrupt flag - request completed (1) start new (0) */
+        uint8_t aak    : 1;  /* assert ack (1) -neg ack at end of Rx sequence */ 
+        uint8_t rsv    : 2;  /* not used */
+    }s;
+} octeon_twsi_ctl_t;
+
+/* clock dividers register */
+typedef union{
+    uint8_t u8;
+    struct{
+        uint8_t m_divider   : 4;
+        uint8_t n_divider   : 3;
+    }s;
+} octeon_twsi_clkctl_t;
+
+/* address of the remote slave + r/w bit */
+typedef union{
+    uint8_t u8;
+    struct{
+        uint8_t slave_addr7     : 7; 
+	uint8_t r		: 1; /* read (1) write (0) bit */
+    }s;
+} octeon_twsi_addr_t;
+
+/* core state reg */
+typedef union{
+    uint8_t u8;
+    struct{
+        uint8_t stat    : 8;
+    }s;
+} octeon_twsi_stat_t;
+
+ /* data byte reg */
+typedef union{
+    uint8_t u8;
+    struct{
+        uint8_t data    : 8;
+    }s;
+} octeon_twsi_data_t;
+
+/* twsi core states as reported in twsi core stat register */
+#define TWSI_BUS_ERROR 			0x00
+#define TWSI_START_TXED 		0x08
+#define TWSI_ADDR_W_TX_ACK_RXED 	0x18
+#define TWSI_ADDR_W_TX_NACK_RXED 	0x20
+
+#define TWSI_DATA_TX_ACK_RXED 		0x28
+#define TWSI_DATA_TX_NACK_RXED 	0x30
+#define TWSI_ARB_LOST			0x38
+#define TWSI_ADDR_R_TX_ACK_RXED		0x40
+
+#define TWSI_ADDR_R_TX_NACK_RXED	0x48
+#define TWSI_DATA_RX_ACK_TXED		0x50
+#define TWSI_DATA_RX_NACK_TXED		0x58
+#define TWSI_SLAVE_ADDR_RX_ACK_TXED	0x60
+
+#define TWSI_ARB_LOST_SLAVE_ADDR_RX	0x68
+#define TWSI_GEN_ADDR_RXED_ACK_TXED	0x70
+#define TWSI_ARB_LOST_GEN_ADDR_RXED	0x78
+#define TWSI_SLAVE_DATA_RX_ACK_TXED	0x80
+
+#define TWSI_SLAVE_DATA_RX_NACK_TXED	0x88
+#define TWSI_GEN_DATA_RX_ACK_TXED	0x90
+#define TWSI_GEN_DATA_RX_NACK_TXED	0x98
+#define TWSI_SLAVE_STOP_OR_START_RXED	0xa0
+
+#define TWSI_SLAVE_ADDR_R_RX_ACK_TXED	0xa8
+#define TWSI_ARB_LOST_SLAVE_ADDR_R_RX_ACK_TXED 0xb0
+#define TWSI_SLAVE_DATA_TX_ACK_RXED	0xb8
+#define TWSI_SLAVE_DATA_TX_NACK_RXED	0xc0
+
+#define TWSI_SLAVE_LAST_DATA_TX_ACK_RXED 0xc8
+#define TWSI_SECOND_ADDR_W_TX_ACK_RXED	0xd0
+#define TWSI_SECOND_ADDR_W_TX_NACK_RXED	0xd8
+#define TWSI_IDLE			0xf8
+
+int octeon_i2c_xfer_msg_raw(struct i2c_adapter *adap, struct i2c_msg *msg);
+
+#endif
diff --git a/drivers/i2c/busses/Kconfig b/drivers/i2c/busses/Kconfig
index 77d17fd..dcae2ee 100644
--- a/drivers/i2c/busses/Kconfig
+++ b/drivers/i2c/busses/Kconfig
@@ -725,4 +725,12 @@ config I2C_OCTEON_TWSI
 	  This driver can also be built as a module.  If so, the module
 	  will be called i2c-octeon-twsi.
 
+config I2C_OCTEON_TWSI_RAW
+	tristate "Octeon TWSI-I2C-RAW"
+	depends on I2C_OCTEON_TWSI
+	help
+	  Octeon TWSI-I2C low-lewel interface
+
+	  This is additional low-lewel interface to Octeon twsi controller. Do not build it
+	  unless i2c transactions longer than 8 data bytes will be required. 
 endmenu
diff --git a/drivers/i2c/busses/Makefile b/drivers/i2c/busses/Makefile
index 6c364e0..b4f10c0 100644
--- a/drivers/i2c/busses/Makefile
+++ b/drivers/i2c/busses/Makefile
@@ -46,7 +46,7 @@ obj-$(CONFIG_I2C_SH7760)	+= i2c-sh7760.o
 obj-$(CONFIG_I2C_SH_MOBILE)	+= i2c-sh_mobile.o
 obj-$(CONFIG_I2C_SIMTEC)	+= i2c-simtec.o
 obj-$(CONFIG_I2C_VERSATILE)	+= i2c-versatile.o
-obj-$(CONFIG_I2C_OCTEON_TWSI)	+= i2c-octeon_twsi.o
+obj-$(CONFIG_I2C_OCTEON_TWSI)	+= i2c-octeon.o
 
 # External I2C/SMBus adapter drivers
 obj-$(CONFIG_I2C_PARPORT)	+= i2c-parport.o
@@ -73,10 +73,3 @@ ifeq ($(CONFIG_I2C_DEBUG_BUS),y)
 EXTRA_CFLAGS += -DDEBUG
 endif
 
-ifdef CONFIG_I2C_OCTEON_TWSI
-OCTEON_ROOT_IN_KERNEL = $(srctree)/arch/mips/cavium-octeon
-OCTEON_ROOT = $(srctree)/../../host-cross/mips-wrs-linux-gnu/sysroot/usr/include/simple_exec_open
-
-CFLAGS_i2c-octeon_twsi.o	= -I$(OCTEON_ROOT)/target/include \
-				  -I$(OCTEON_ROOT_IN_KERNEL)/executive
-endif
diff --git a/drivers/i2c/busses/i2c-octeon.c b/drivers/i2c/busses/i2c-octeon.c
new file mode 100644
index 0000000..eaa05ff
--- /dev/null
+++ b/drivers/i2c/busses/i2c-octeon.c
@@ -0,0 +1,288 @@
+/*
+ * Portions Copyright (C) 2004-2009 Cavium Networks, Inc.
+ * Portions Copyright (c) 2006-2007 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+/* 
+ *  This file was modified by Cavium Networks Inc to:
+ *   1) Move direct HW calls to arch directory
+ *   2) Support multiple on-chip i2c controllers
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/ioport.h>
+#include <linux/version.h>
+#include <linux/i2c.h>
+#include <asm/irq.h>
+#include <asm/io.h>
+
+#include <asm/uaccess.h>
+#include <linux/errno.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/moduleparam.h>
+#include <linux/err.h>
+#include <linux/platform_device.h>
+
+#include "i2c-octeon.h" /* HW specific calls */
+
+
+//#define	I2C_OCTEON_DEBUG
+
+#ifdef I2C_OCTEON_DEBUG
+static int i2c_debug = 0;
+#define DEB0(format, arg...)	printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg )
+#define DEB1(format, arg...)	\
+	if (i2c_debug>=1) {	\
+		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	}
+#define DEB2(format, arg...)	\
+	if (i2c_debug>=2) {	\
+		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	}
+#define DEB3(format, arg...)	\
+	if (i2c_debug>=3) {	\
+		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	}
+#define DEB9(format, arg...)	\
+/* debug the protocol by showing transferred bits */	\
+	if (i2c_debug>=9) {	\
+		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
+	}
+#else
+#define DEB0(fmt, args...)
+#define DEB1(fmt, args...)
+#define DEB2(fmt, args...)
+#define DEB3(fmt, args...)
+#define DEB9(fmt, args...)
+#endif
+
+
+#define MODULE_NAME "OCTEON I2C"
+
+static int i2c_scan = 1;
+
+/* invalid address will return 1; TEN bit addr is valid */
+static inline int i2c_invalid_address(const struct i2c_msg* p)
+{
+    return (p->addr > 0x3ff) || (!(p->flags & I2C_M_TEN) && (p->addr > 0x7f));
+}
+
+static int octeon_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
+{
+    int i;
+    int r = 0;
+
+    DEB1("msgs: %d\n", num);
+
+    if(unlikely(!num)){
+	printk("num is zero!!\n");
+	return 0;
+    }
+
+    if (unlikely(i2c_invalid_address(&msgs[0]))){
+	printk("invalid address 0x%03x (%d-bit)\n", msgs[0].addr, msgs[0].flags & I2C_M_TEN ? 10 : 7);
+	return -EINVAL;
+    }
+
+    for (i = 0; i < num; ++i){
+	DEB2("msg: %d, addr: 0x%04x, len: %d, flags: 0x%x\n", i, msgs[i].addr, msgs[i].len, msgs[i].flags);
+
+	r = octeon_i2c_xfer_msg(adap, &msgs[i], 0);
+
+	DEB2("r: %d\n", r);
+
+	if(r != msgs[i].len)
+	    break;
+
+    }
+
+    DEB1("r: %d msgs: %d", r, num);
+
+    return (r < 0) ? r : num;
+}
+
+
+
+static int octeon_i2c_remove(struct device *dev)
+{
+    /* Nothing */
+    return 0;
+}
+
+static void octeon_i2c_device_release(struct device *dev)
+{
+    /* Nothing */
+}
+
+
+
+/* should contain I2C_FUNC_SMBUS_BYTE_DATA */
+static u32 octeon_i2c_func(struct i2c_adapter * adap)
+{
+    /* should be check */
+    return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
+}
+
+static struct i2c_algorithm octeon_i2c_algo = {
+    .master_xfer = octeon_i2c_xfer,
+    .smbus_xfer	= NULL,//emulate by master_xfer
+    .functionality = octeon_i2c_func,
+};
+
+
+#if (OCT_MAX_IFACES >2) 
+ #error "OCT_MAX_IFACES increased, need to fix a driver interface"
+#endif
+static struct i2c_adapter octeon_i2c_adap0 = {
+    .owner	= THIS_MODULE,
+    .class	= I2C_CLASS_HWMON,//I2C_CLASS_ALL
+    .name	= "octeon twsi",
+    .algo	= &octeon_i2c_algo,
+    .algo_data	= NULL,
+    .client_register = NULL,
+    .client_unregister	= NULL,
+};
+
+static struct i2c_adapter octeon_i2c_adap1 = {
+    .owner      = THIS_MODULE,
+    .class      = I2C_CLASS_HWMON,//I2C_CLASS_ALL
+    .name       = "octeon twsi",
+    .algo       = &octeon_i2c_algo,
+    .algo_data  = NULL,
+    .client_register = NULL,
+    .client_unregister  = NULL,
+};
+
+static struct i2c_adapter* octeon_i2c_adap[OCT_MAX_IFACES] = {
+	&octeon_i2c_adap0,
+	&octeon_i2c_adap1, };
+
+static struct device_driver octeon_i2c_driver = {
+    .name	= "octeon_i2c",
+    .bus	= &platform_bus_type,
+    .remove	= octeon_i2c_remove,
+};
+
+static struct platform_device octeon_i2c_device = {
+    .name	= "i2c",
+    .id		= -1,
+    .dev	={
+	.driver	= &octeon_i2c_driver,
+	.release = octeon_i2c_device_release,
+    },
+};
+
+static void __init octeon_i2c_chip_init(void)
+{
+    /* Nothing */
+}
+
+
+static int
+octeon_i2c_scan_bus(struct i2c_adapter *adap)
+{
+    int found = 0;
+    int i;
+    struct i2c_msg msg;
+    char data[1];
+
+    printk(" ** scanning for active I2C devices on the bus...");
+
+    for (i = 1; i < 0x7f; i++) {
+
+	msg.addr = i;
+	msg.buf = data;
+	msg.len = 0;
+	msg.flags = I2C_M_RD;
+
+	if (octeon_i2c_xfer(adap, &msg, 1) > 0) {
+	    printk("I2C device 0x%02x found\n", i);
+	    found++;
+	}
+    }
+
+    if (!found)
+	printk("found nothing\n");
+
+    return found;
+}
+
+static int __init octeon_i2c_init(void)
+{
+    int r, i;
+
+   for (i=0; i<octeon_i2c_num_ifaces(); i++)
+   {
+	/* init algo data first  then add adapter */
+	octeon_i2c_adap[i]->algo_data = octeon_i2c_get_algo_data(i);  
+	r = i2c_add_adapter(octeon_i2c_adap[i]);
+
+	if(r){
+	printk(KERN_ERR "failed to add adapter %d", i);
+	if( i == 0) goto do_release_region; //do_free_irq;
+	else break;
+	}
+    }
+
+    octeon_i2c_chip_init();
+
+    if(i2c_scan)
+	for (i=0; i<octeon_i2c_num_ifaces(); i++) {
+	    printk("scanning bus %d\n", i);	
+            octeon_i2c_scan_bus(octeon_i2c_adap[i]);
+        }
+
+    if(driver_register(&octeon_i2c_driver)!=0)
+	printk(KERN_ERR "Driver register failed for octeon_i2c\n");
+
+    if(platform_device_register(&octeon_i2c_device)!=0){
+	printk(KERN_ERR "Device register failed for i2c\n");
+	driver_unregister(&octeon_i2c_driver);
+    }
+
+    return 0;
+
+do_release_region:
+//    release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE);
+    return 0;
+
+}
+
+
+static void __exit octeon_i2c_exit(void)
+{
+    int i;
+    for (i=0; i<octeon_i2c_num_ifaces(); i++)
+	i2c_del_adapter(octeon_i2c_adap[i]);
+//    release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE);
+    driver_unregister(&octeon_i2c_driver);
+    platform_device_unregister(&octeon_i2c_device);
+}
+
+
+MODULE_AUTHOR("RichardXY_huang@asus.com.cn");
+MODULE_DESCRIPTION("Cavium Octeon I2C bus adapter");
+MODULE_DESCRIPTION("Octeon i2c driver");
+MODULE_LICENSE("GPL");
+
+module_init(octeon_i2c_init);
+module_exit(octeon_i2c_exit);
diff --git a/drivers/i2c/busses/i2c-octeon_twsi.c b/drivers/i2c/busses/i2c-octeon_twsi.c
deleted file mode 100644
index 04fdff1..0000000
--- a/drivers/i2c/busses/i2c-octeon_twsi.c
+++ /dev/null
@@ -1,354 +0,0 @@
-/*
- * Copyright (c) 2006-2007 Wind River Systems, Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
- * See the GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- */
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/slab.h>
-#include <linux/delay.h>
-#include <linux/ioport.h>
-#include <linux/version.h>
-#include <linux/i2c.h>
-#include <asm/irq.h>
-#include <asm/io.h>
-
-#include <asm/uaccess.h>
-#include <linux/errno.h>
-#include <linux/sched.h>
-#include <linux/interrupt.h>
-#include <linux/moduleparam.h>
-#include <linux/err.h>
-#include <linux/platform_device.h>
-#include <octeon-hal-read-write.h>
-#include "i2c-octeon_twsi.h"
-
-#define	I2C_MAX_TIMEOUT	10000	// 10ms
-
-//#define	I2C_OCTEON_DEBUG
-
-#ifdef I2C_OCTEON_DEBUG
-static int i2c_debug = 0;
-#define DEB0(format, arg...)	printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg )
-#define DEB1(format, arg...)	\
-	if (i2c_debug>=1) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
-	}
-#define DEB2(format, arg...)	\
-	if (i2c_debug>=2) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
-	}
-#define DEB3(format, arg...)	\
-	if (i2c_debug>=3) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
-	}
-#define DEB9(format, arg...)	\
-/* debug the protocol by showing transferred bits */	\
-	if (i2c_debug>=9) {	\
-		printk(KERN_DEBUG MODULE_NAME " DEBUG: " format "\n",  ## arg ); \
-	}
-#else
-#define DEB0(fmt, args...)
-#define DEB1(fmt, args...)
-#define DEB2(fmt, args...)
-#define DEB3(fmt, args...)
-#define DEB9(fmt, args...)
-#endif
-
-
-#define MODULE_NAME "OCTEON I2C"
-
-static int i2c_scan = 0;
-
-/* invalid address will return 1; TEN bit addr is valid */
-static inline int i2c_invalid_address(const struct i2c_msg* p)
-{
-    return (p->addr > 0x3ff) || (!(p->flags & I2C_M_TEN) && (p->addr > 0x7f));
-}
-
-static void octeon_i2c_reset(void)
-{
-    /* Nothing */
-}
-
-static int octeon_i2c_xfer_msg(struct i2c_adapter *adap, struct i2c_msg *msg, int combined)
-{
-    uint64_t data = 0;
-    int i;
-    int timeout = 0;
-    octeon_mio_tws_sw_twsi_t temp, mio_tws_sw_twsi;
-    octeon_mio_tws_sw_twsi_ext_t mio_tws_sw_twsi_ext;
-
-    DEB2("addr: 0x%04x, len: %d, flags: 0x%x, buf[0] = %x\n", msg->addr, msg->len, msg->flags, msg->buf[0]);
-
-
-    mio_tws_sw_twsi.u64 = 0x0;
-
-    mio_tws_sw_twsi.s.v = 1;
-
-    /* ten bit address op<1> = 1 */
-    if( msg->flags & I2C_M_TEN) mio_tws_sw_twsi.s.op |= 0x2;
-    mio_tws_sw_twsi.s.a = msg->addr & 0x3ff;
-
-    /* check the msg->len  0<=len <8 */
-    if( msg->len > 8 ){
-	printk("%s %d Error len msg->len %d\n", __FILE__, __LINE__, msg->len);
-	return (-1);
-    }
-    mio_tws_sw_twsi.s.sovr = 1;			// size override.
-    if ( msg->len == 0 )
-       mio_tws_sw_twsi.s.size = 0;
-    else
-       mio_tws_sw_twsi.s.size = msg->len-1;	// Size: 0 = 1 byte, 1 = 2 bytes, ..., 7 = 8 bytes
-
-    if( msg->flags & I2C_M_RD ){
-	mio_tws_sw_twsi.s.r = 1;		// Enable Read bit
-    }else{
-	for(i =0; i <= mio_tws_sw_twsi.s.size; i++){
-	    data = data << 8;
-	    data |= msg->buf[i];
-	}
-
-	mio_tws_sw_twsi.s.d = data;
-	mio_tws_sw_twsi_ext.s.d = data >> 32;
-    }
-
-#ifdef I2C_OCTEON_DEBUG
-    if ( mio_tws_sw_twsi.s.r == 1 )
-	printk("twsi-read  op: data=%llx %llx len=%d\n", mio_tws_sw_twsi.u64, mio_tws_sw_twsi_ext.u64, msg->len);
-    else
-        printk("twsi-write op: data=%llx %llx len=%d\n", mio_tws_sw_twsi.u64, mio_tws_sw_twsi_ext.u64, msg->len);
-#endif
-
-    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI_EXT, mio_tws_sw_twsi_ext.u64);
-    cvmx_write_csr(OCTEON_MIO_TWS_SW_TWSI, mio_tws_sw_twsi.u64);
-
-
-    /* Poll! wait the transfer complete and timeout (10ms). */
-    do{
-	temp.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI);
-	udelay(1);
-    }while (temp.s.v && (timeout++ < I2C_MAX_TIMEOUT));
-
-    mio_tws_sw_twsi.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI);
-
-    if (timeout >= I2C_MAX_TIMEOUT) {
-	printk("Octeon twsi I2C Timeout!\n");
-	octeon_i2c_reset();
-	return -EIO;
-    }
-
-    /* transfer ERROR */
-    if (!mio_tws_sw_twsi.s.r){
-	octeon_i2c_reset();
-	return -EIO;
-    }
-
-    if (msg->flags & I2C_M_RD){
-
-	mio_tws_sw_twsi_ext.u64 = cvmx_read_csr(OCTEON_MIO_TWS_SW_TWSI_EXT);
-	data = ((uint64_t) mio_tws_sw_twsi_ext.s.d << 32) | mio_tws_sw_twsi.s.d;
-
-#ifdef I2C_OCTEON_DEBUG
-	printk("twsi-read result: data=%llx %llx len=%d\n", mio_tws_sw_twsi.u64, mio_tws_sw_twsi_ext.u64, msg->len);
-#endif
-
-	for(i = mio_tws_sw_twsi.s.size; i >= 0; i--){
-		msg->buf[i] = data;
-		data = data >> 8;
-	}
-    }
-
-    return msg->len;
-}
-
-static int octeon_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
-{
-    int i;
-    int r = 0;
-
-    DEB1("msgs: %d\n", num);
-
-    if(unlikely(!num)){
-	printk("num is zero!!\n");
-	return 0;
-    }
-
-    if (unlikely(i2c_invalid_address(&msgs[0]))){
-	printk("invalid address 0x%03x (%d-bit)\n", msgs[0].addr, msgs[0].flags & I2C_M_TEN ? 10 : 7);
-	return -EINVAL;
-    }
-
-    for (i = 0; i < num; ++i){
-	DEB2("msg: %d, addr: 0x%04x, len: %d, flags: 0x%x\n", i, msgs[i].addr, msgs[i].len, msgs[i].flags);
-
-	r = octeon_i2c_xfer_msg(adap, &msgs[i], 0);
-
-	DEB2("r: %d\n", r);
-
-	if(r != msgs[i].len)
-	    break;
-
-    }
-
-    DEB1("r: %d msgs: %d", r, num);
-
-    return (r < 0) ? r : num;
-}
-
-
-
-static int octeon_i2c_remove(struct device *dev)
-{
-    /* Nothing */
-    return 0;
-}
-
-static void octeon_i2c_device_release(struct device *dev)
-{
-    /* Nothing */
-}
-
-
-
-/* should contain I2C_FUNC_SMBUS_BYTE_DATA */
-static u32 octeon_i2c_func(struct i2c_adapter * adap)
-{
-    /* should be check */
-    return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
-}
-
-static struct i2c_algorithm octeon_i2c_algo = {
-    .master_xfer = octeon_i2c_xfer,
-    .smbus_xfer	= NULL,//emulate by master_xfer
-    .functionality = octeon_i2c_func,
-};
-
-
-
-static struct i2c_adapter octeon_i2c_adap = {
-    .owner	= THIS_MODULE,
-    .class	= I2C_CLASS_HWMON,//I2C_CLASS_ALL
-    .name	= "octeon twsi",
-    .algo	= &octeon_i2c_algo,
-    .algo_data	=NULL,
-    .client_register = NULL,
-    .client_unregister	= NULL,
-};
-
-static struct device_driver octeon_i2c_driver = {
-    .name	= "octeon_i2c",
-    .bus	= &platform_bus_type,
-    .remove	= octeon_i2c_remove,
-};
-
-static struct platform_device octeon_i2c_device = {
-    .name	= "i2c",
-    .id		= -1,
-    .dev	={
-	.driver	= &octeon_i2c_driver,
-	.release = octeon_i2c_device_release,
-    },
-};
-
-static void __init octeon_i2c_chip_init(void)
-{
-    /* Nothing */
-}
-
-
-static int
-octeon_i2c_scan_bus(struct i2c_adapter *adap)
-{
-    int found = 0;
-    int i;
-    struct i2c_msg msg;
-    char data[1];
-
-    printk("scanning for active I2C devices on the bus...");
-
-    for (i = 1; i < 0x7f; i++) {
-
-	msg.addr = i;
-	msg.buf = data;
-	msg.len = 0;
-	msg.flags = I2C_M_RD;
-
-	if (octeon_i2c_xfer(adap, &msg, 1) == 0) {
-	    printk("I2C device 0x%02x found", i);
-	    found++;
-	}
-    }
-
-    if (!found)
-	printk("found nothing");
-
-    return found;
-}
-
-static int __init octeon_i2c_init(void)
-{
-    int r;
-
-   r = i2c_add_adapter(&octeon_i2c_adap);
-
-   if(r){
-	printk(KERN_ERR "failed to add adapter");
-	goto do_release_region; //do_free_irq;
-	return r;
-    }
-
-
-    octeon_i2c_chip_init();
-
-    if(i2c_scan)
-	octeon_i2c_scan_bus(&octeon_i2c_adap);
-
-    if(driver_register(&octeon_i2c_driver)!=0)
-	printk(KERN_ERR "Driver register failed for octeon_i2c\n");
-
-    if(platform_device_register(&octeon_i2c_device)!=0){
-	printk(KERN_ERR "Device register failed for i2c\n");
-	driver_unregister(&octeon_i2c_driver);
-    }
-
-
-
-    return 0;
-
-do_release_region:
-    release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE);
-    return 0;
-
-}
-
-
-static void __exit octeon_i2c_exit(void)
-{
-    i2c_del_adapter(&octeon_i2c_adap);
-    release_region(OCTEON_I2C_BASE, OCTEON_I2C_IOSIZE);
-    driver_unregister(&octeon_i2c_driver);
-    platform_device_unregister(&octeon_i2c_device);
-}
-
-
-MODULE_AUTHOR("RichardXY_huang@asus.com.cn");
-MODULE_DESCRIPTION("Cavium Octeon I2C bus adapter");
-MODULE_DESCRIPTION("Octeon i2c driver");
-MODULE_LICENSE("GPL");
-
-module_init(octeon_i2c_init);
-module_exit(octeon_i2c_exit);
diff --git a/drivers/i2c/busses/i2c-octeon_twsi.h b/drivers/i2c/busses/i2c-octeon_twsi.h
deleted file mode 100644
index 66e3ec2..0000000
--- a/drivers/i2c/busses/i2c-octeon_twsi.h
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Copyright (c) 2006-2007 Wind River Systems, Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
- * See the GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- */
-
-
-#define OCTEON_I2C_IOSIZE (0x20)
-
-#define OCTEON_I2C_BASE 0x8001180000001000ull
-
-
-
-#define OCTEON_MIO_TWS_SW_TWSI (OCTEON_I2C_BASE + 0x00)
-
-
-typedef union
-{
-    uint64_t u64;
-    struct
-    {
-	uint64_t v	: 1;//valid bit : set on a write operation.
-	uint64_t slonly	: 1;//slave-only mode.
-	uint64_t eia	: 1;//extended internal address.
-	uint64_t op	: 4;//opcode field.
-	uint64_t r	: 1;//read bit or result.
-	uint64_t sovr	: 1;// size override.
-	uint64_t size	: 3;//size. sovr = 1.
-	uint64_t scr	: 2;//scratch. Unused, but retain state.
-	uint64_t a	: 10;//address field.
-	uint64_t ia	: 5;//internal address.
-	uint64_t eop_ia	: 3;// extra opcode.
-	uint64_t d	: 32;//data field.
-
-    }s;
-} octeon_mio_tws_sw_twsi_t;
-
-
-#define OCTEON_MIO_TWS_TWSI_SW	(OCTEON_I2C_BASE + 0x08)
-
-typedef union{
-    uint64_t u64;
-    struct{
-	uint64_t v	: 2;
-	uint64_t rsvd	: 30;
-	uint64_t d	: 32;
-    }s;
-} octeon_mio_tws_twsi_sw_t;
-
-
-#define OCTEON_MIO_INT	(OCTEON_I2C_BASE + 0x10)
-
-typedef union{
-    uint64_t u64;
-    struct{
-	uint64_t rsvd1	: 55;
-	uint64_t core_en : 1;
-	uint64_t ts_en	: 1;
-	uint64_t st_en	: 1;
-	uint64_t resvd	: 1;
-	uint64_t core_int : 1;
-	uint64_t ts_int	:1;
-	uint64_t st_int	:1;
-    }s;
-} octeon_mio_tws_int_t;
-
-#define OCTEON_MIO_TWS_SW_TWSI_EXT (OCTEON_I2C_BASE + 0x18)
-
-typedef union{
-    uint64_t u64;
-    struct{
-	uint64_t rsvd	: 24;
-	uint64_t ia	: 8;
-	uint64_t d	: 32;
-
-    }s;
-} octeon_mio_tws_sw_twsi_ext_t;
diff --git a/include/asm-mips/mach-cavium-octeon/i2c-octeon.h b/include/asm-mips/mach-cavium-octeon/i2c-octeon.h
new file mode 100644
index 0000000..5b04aa0
--- /dev/null
+++ b/include/asm-mips/mach-cavium-octeon/i2c-octeon.h
@@ -0,0 +1,20 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2009 Cavium Networks <support@caviumnetworks.com>
+ */
+
+#ifndef _I2C_OCTEON_H_
+#define _I2C_OCTEON_H_
+
+#define I2C_MAX_TIMEOUT 10000   // 10ms
+
+#define OCT_MAX_IFACES 2        /* up to two twsi interfaces as of today */
+
+int octeon_i2c_num_ifaces(void);
+void* octeon_i2c_get_algo_data(int iface);
+int octeon_i2c_xfer_msg(struct i2c_adapter *adap, struct i2c_msg *msg, int combined);
+
+#endif /*_I2C_OCTEON_H_ */
-- 
1.6.0.4

