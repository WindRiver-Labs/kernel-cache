From ca9c657381d4bc3eff185b459d03852006f47120 Mon Sep 17 00:00:00 2001
From: David Daney <ddaney@caviumnetworks.com>
Date: Tue, 27 Jan 2009 14:31:03 -0800
Subject: [PATCH] bitops.h: Missing memory barriers

Missing memory barriers in bitops.h and barrier.h were causing
incorrect bit_spinlock semantics.  The ext3 filesystem journeling
relies on bit_spinlocks to protect internal state which was becoming
corrupt.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Signed-off-by: Phil Staub <Phil.Staub@windriver.com>
---
 include/asm-mips/barrier.h |    4 ++++
 include/asm-mips/bitops.h  |    2 ++
 2 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/include/asm-mips/barrier.h b/include/asm-mips/barrier.h
index 3f2e1b7..2ed6c93 100644
--- a/include/asm-mips/barrier.h
+++ b/include/asm-mips/barrier.h
@@ -151,6 +151,7 @@
    conditions. Even if it is rare, better safe than sorry */
 #define __WEAK_ORDERING_MB	".set push\n.set arch=octeon\nsyncw\nsyncw\n.set pop\n"
 #define OCTEON_SYNCW_STR	__WEAK_ORDERING_MB
+#define __WEAK_LLSC_MB __WEAK_ORDERING_MB
 #else /* !CONFIG_CPU_CAVIUM_OCTEON */
 #define __WEAK_ORDERING_MB	"       sync	\n"
 #define OCTEON_SYNCW_STR	"		\n"
@@ -159,11 +160,14 @@
 #define __WEAK_ORDERING_MB	"		\n"
 #define OCTEON_SYNCW_STR	"		\n"
 #endif
+
+#ifndef __WEAK_LLSC_MB
 #if defined(CONFIG_WEAK_REORDERING_BEYOND_LLSC) && defined(CONFIG_SMP)
 #define __WEAK_LLSC_MB		"       sync	\n"
 #else
 #define __WEAK_LLSC_MB		"		\n"
 #endif
+#endif
 
 #define smp_mb()	__asm__ __volatile__(__WEAK_ORDERING_MB : : :"memory")
 #ifdef CONFIG_CPU_CAVIUM_OCTEON
diff --git a/include/asm-mips/bitops.h b/include/asm-mips/bitops.h
index 77667fb..36cee80 100644
--- a/include/asm-mips/bitops.h
+++ b/include/asm-mips/bitops.h
@@ -351,6 +351,7 @@ static inline int test_and_set_bit_lock(unsigned long nr,
 		__asm__ __volatile__(
 		"	.set	push					\n"
 		"	.set	noreorder				\n"
+		OCTEON_SYNCW_STR
 		"	.set	mips3					\n"
 		"1:	" __LL "%0, %1		# test_and_set_bit	\n"
 		"	or	%2, %0, %3				\n"
@@ -420,6 +421,7 @@ static inline int test_and_clear_bit(unsigned long nr,
 		unsigned long temp;
 
 		__asm__ __volatile__(
+		OCTEON_SYNCW_STR
 		"1:	" __LL	"%0, %1		# test_and_clear_bit	\n"
 		"	" __EXT "%2, %0, %3, 1				\n"
 		"	" __INS	"%0, $0, %3, 1				\n"
-- 
1.6.0.3

