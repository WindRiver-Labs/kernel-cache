From 0f39a051c281ea0db870ca5dc963eed6f6bc89b8 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Thu, 17 Apr 2014 13:59:56 +0800
Subject: [PATCH] rt, MIPS: avoid to run the irq work in irq context

For rt kernel, most of the irq handlers run in thread context, so
we also need to make sure that the irq work also run in thread context
in order to fix the call trace like the following. The patch
(x86-no-perf-irq-work-rt.patch) has made corresponding changes for
the x86 and common parts. This is just for the MIPS part.

  BUG: sleeping function called from invalid context at kernel/rtmutex.c:659
  in_atomic(): 1, irqs_disabled(): 1, pid: 625, name: ftrace_current_
  Preemption disabled at:[<  (null)>]   (null)

  CPU: 0 PID: 625 Comm: ftrace_current_ Not tainted 3.10.15-rt11+ #21
  Call Trace:
  [c7a9fcf0] [c0008d1c] show_stack+0xfc/0x1c0 (unreliable)
  [c7a9fd40] [c06ffe14] rt_spin_lock+0x34/0x90
  [c7a9fd50] [c0080498] __wake_up+0x38/0x70
  [c7a9fd70] [c0109268] __irq_work_run+0xc8/0x110

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/kernel/perf_event_mipsxx.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/arch/mips/kernel/perf_event_mipsxx.c b/arch/mips/kernel/perf_event_mipsxx.c
index f0aeb48..72080fe 100644
--- a/arch/mips/kernel/perf_event_mipsxx.c
+++ b/arch/mips/kernel/perf_event_mipsxx.c
@@ -1361,8 +1361,10 @@ static int mipsxx_pmu_handle_shared_irq(void)
 	 * in here because the performance counter interrupt is a regular
 	 * interrupt, not NMI.
 	 */
+#ifndef CONFIG_PREEMPT_RT_FULL
 	if (handled == IRQ_HANDLED)
 		irq_work_run();
+#endif
 
 #ifdef CONFIG_MIPS_PERF_SHARED_TC_COUNTERS
 	read_unlock(&pmuint_rwlock);
-- 
1.7.5.4

