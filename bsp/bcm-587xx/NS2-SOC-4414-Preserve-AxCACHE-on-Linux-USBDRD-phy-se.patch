From bbdd8f473d90e192239a7d144e616b2749c84e6b Mon Sep 17 00:00:00 2001
From: Zac Schroff <zschroff@broadcom.com>
Date: Tue, 13 Dec 2016 21:53:48 -0500
Subject: [PATCH 50/51] NS2 SOC-4414 Preserve AxCACHE on Linux USBDRD phy
 setup

Preserve the AxCACHE values for the USB DRD (both host and
device modes) on the appropriate phy init sequence.

Bug: SOC-4414
Change-Id: I86091d54b6a7bd0f76d5e4e68b833abc7d6cd4da
Reviewed-on: http://gerrit-ccxsw.rtp.broadcom.com:8080/34321
Reviewed-by: vpx_checkpatch status <vpx_checkpatch@broadcom.com>
Reviewed-by: CCXSW <ccxswbuild@broadcom.com>
Tested-by: CCXSW <ccxswbuild@broadcom.com>
Reviewed-by: Jon Mason <jon.mason@broadcom.com>
Reviewed-by: Colin Winegarden <Colin.Winegarden@broadcom.com>
Tested-by: Colin Winegarden <Colin.Winegarden@broadcom.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 arch/arm64/boot/dts/broadcom/ns2-svk.dts |  113 +++++++++++++-----------------
 arch/arm64/boot/dts/broadcom/ns2.dtsi    |   44 ++++++++++--
 drivers/extcon/extcon.c                  |   20 -----
 drivers/phy/phy-bcm-ns2-usbdrd.c         |   11 +++-
 drivers/usb/core/hcd.c                   |   76 +++++++++++++-------
 drivers/usb/host/xhci-plat.c             |   13 +++-
 include/linux/extcon.h                   |   51 +++++++++++++
 include/linux/usb/hcd.h                  |    2 +
 8 files changed, 209 insertions(+), 121 deletions(-)

diff --git a/arch/arm64/boot/dts/broadcom/ns2-svk.dts b/arch/arm64/boot/dts/broadcom/ns2-svk.dts
index 702bafb..c134d0d 100644
--- a/arch/arm64/boot/dts/broadcom/ns2-svk.dts
+++ b/arch/arm64/boot/dts/broadcom/ns2-svk.dts
@@ -56,6 +56,18 @@
 	};
 };
 
+&ehci0 {
+	status = "ok";
+};
+
+&ehci1 {
+	status = "ok";
+};
+
+&ehci2 {
+	status = "ok";
+};
+
 &enet {
 	status = "ok";
 };
@@ -137,25 +149,11 @@
 	status = "ok";
 };
 
+&udc_dwc {
+	status = "ok";
+};
 &ssp0 {
 	status = "ok";
-
-	slic@0 {
-		compatible = "silabs,si3226x";
-		reg = <0>;
-		spi-max-frequency = <5000000>;
-		spi-cpha = <1>;
-		spi-cpol = <1>;
-		pl022,hierarchy = <0>;
-		pl022,interface = <0>;
-		pl022,slave-tx-disable = <0>;
-		pl022,com-mode = <0>;
-		pl022,rx-level-trig = <1>;
-		pl022,tx-level-trig = <1>;
-		pl022,ctrl-len = <11>;
-		pl022,wait-state = <0>;
-		pl022,duplex = <0>;
-	};
 };
 
 &ssp1 {
@@ -184,35 +182,30 @@
 
 &pinctrl {
 	pinctrl-names = "default";
-	pinctrl-0 = <&nand_sel &uart0_sel &uart1_sel &uart2_sel &usb2_sel>;
+	pinctrl-0 = <&nand_sel &usb2_sel>;
 	nand_sel: nand_sel {
 		function = "nand";
 		groups = "nand_grp";
 	};
 
-	uart0_sel: uart0_sel {
-		function = "uart0";
-		groups = "uart0_rts_cts_grp", "uart0_in_out_grp",
-			 "uart0_modem_grp";
-	};
-
-	uart1_sel: uart1_sel {
-		function = "uart1";
-		groups = "uart1_dcd_dsr_grp", "uart1_ri_dtr_grp",
-			 "uart1_rts_cts_grp", "uart1_in_out_grp";
-	};
-
-	uart2_sel: uart2_sel {
-		function = "uart2";
-		groups = "uart2_rts_cts_grp";
-	};
-
 	usb2_sel: usb2_sel {
 		pins = "usb2_presence_indication";
 		bias-pull-up;
 	};
 };
 
+&ohci0 {
+	status = "ok";
+};
+
+&ohci1 {
+	status = "ok";
+};
+
+&ohci2 {
+	status = "ok";
+};
+
 &sata_phy0 {
 	status = "ok";
 };
@@ -327,36 +320,30 @@
 	};
 };
 
-&qspi {
-	bspi-sel = <0>;
-	flash: m25p80@0 {
-		#address-cells = <1>;
-		#size-cells = <1>;
-		compatible = "m25p80";
-		reg = <0x0>;
-		spi-max-frequency = <12500000>;
-		m25p,fast-read;
-		spi-cpol;
-		spi-cpha;
+&usbphy0 {
+	status = "ok";
+};
 
-		partition@0 {
-			label = "boot";
-			reg = <0x00000000 0x000a0000>;
-		};
+&usbphy1 {
+	status = "ok";
+};
 
-		partition@a0000 {
-			label = "env";
-			reg = <0x000a0000 0x00060000>;
-		};
+&usbdrd_phy {
+	status = "ok";
+};
 
-		partition@100000 {
-			label = "system";
-			reg = <0x00100000 0x00600000>;
-		};
+&usb3_phy0 {
+	status = "ok";
+};
 
-		partition@700000 {
-			label = "rootfs";
-			reg = <0x00700000 0x01900000>;
-		};
-	};
+&usb3_phy1 {
+	status = "ok";
+};
+
+&xhci0 {
+	status = "ok";
+};
+
+&xhci1 {
+	status = "ok";
 };
diff --git a/arch/arm64/boot/dts/broadcom/ns2.dtsi b/arch/arm64/boot/dts/broadcom/ns2.dtsi
index e6b2d5a..d8de7c7 100644
--- a/arch/arm64/boot/dts/broadcom/ns2.dtsi
+++ b/arch/arm64/boot/dts/broadcom/ns2.dtsi
@@ -30,6 +30,8 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+/memreserve/ 0x81000000 0x00200000;
+
 #include <dt-bindings/interrupt-controller/arm-gic.h>
 #include <dt-bindings/clock/bcm-ns2.h>
 
@@ -234,6 +236,7 @@
 			#dma-cells = <1>;
 			#dma-channels = <8>;
 			#dma-requests = <32>;
+			dma-coherent;
 			clocks = <&iprocslow>;
 			clock-names = "apb_pclk";
 		};
@@ -276,7 +279,31 @@
 				     <GIC_SPI 260 IRQ_TYPE_LEVEL_HIGH>,
 				     <GIC_SPI 261 IRQ_TYPE_LEVEL_HIGH>,
 				     <GIC_SPI 262 IRQ_TYPE_LEVEL_HIGH>;
-			#iommu-cells = <1>;
+			mmu-masters = <&dma1 0x408>;
+			#iommu-cells = <0>;
+		};
+
+		dma1: dma@66330000 {
+			compatible = "arm,pl330", "arm,primecell";
+			reg = <0x66330000 0x1000>;
+			interrupts = <GIC_SPI 410 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 411 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 412 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 413 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 414 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 415 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 416 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 417 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 418 IRQ_TYPE_LEVEL_HIGH>;
+			#dma-cells = <1>;
+			#dma-channels = <8>;
+			#dma-requests = <32>;
+			dma-coherent;
+			copy_align = <7>;
+			clocks = <&iprocslow>;
+			clock-names = "apb_pclk";
+			#stream-id-cells = <1>;
+			iommus = <&smmu>;
 		};
 
 		pinctrl: pinctrl@6501d130 {
@@ -654,7 +681,7 @@
 			reg = <0x66300000 0xcf0>;
 			interrupts = <GIC_SPI 429 IRQ_TYPE_LEVEL_HIGH>;
 			phys = <&usb3_phy0>;
-			phy-names = "usb3-phy";
+			phy-names = "usb";
 			dma-coherent;
 			needs-reset-on-resume;
 			status = "disabled";
@@ -671,7 +698,7 @@
 			reg = <0x66310000 0xcf0>;
 			interrupts = <GIC_SPI 433 IRQ_TYPE_LEVEL_HIGH>;
 			phys = <&usb3_phy1>;
-			phy-names = "usb3-phy";
+			phy-names = "usb";
 			dma-coherent;
 			needs-reset-on-resume;
 			status = "disabled";
@@ -683,11 +710,11 @@
 			reg = <0x66310e00 0x1ac>;
 		};
 
-		sata_phy: sata_phy@663f0100 {
-			compatible = "brcm,iproc-ns2-sata-phy";
-			reg = <0x663f0100 0x1f00>,
-			      <0x663f004c 0x10>;
-			reg-names = "phy", "phy-ctrl";
+               sata_phy: sata_phy@663f0100 {
+                       compatible = "brcm,iproc-ns2-sata-phy";
+                       reg = <0x663f0100 0x1f00>,
+                             <0x663f004c 0x10>;
+                       reg-names = "phy", "phy-ctrl";
 			#address-cells = <1>;
 			#size-cells = <0>;
 
@@ -845,6 +872,7 @@
 			phys = <&usbdrd_phy>;
 			phy-names = "usb2drd";
 			extcon = <&usbdrd_phy>;
+			dma-coherent;
 			status = "disabled";
 		};
 
diff --git a/drivers/extcon/extcon.c b/drivers/extcon/extcon.c
index 8682efc..bc93cc0 100644
--- a/drivers/extcon/extcon.c
+++ b/drivers/extcon/extcon.c
@@ -77,26 +77,6 @@ static const char *extcon_name[] =  {
 	NULL,
 };
 
-/**
- * struct extcon_cable - An internal data for each cable of extcon device.
- * @edev:		The extcon device
- * @cable_index:	Index of this cable in the edev
- * @attr_g:		Attribute group for the cable
- * @attr_name:		"name" sysfs entry
- * @attr_state:		"state" sysfs entry
- * @attrs:		Array pointing to attr_name and attr_state for attr_g
- */
-struct extcon_cable {
-	struct extcon_dev *edev;
-	int cable_index;
-
-	struct attribute_group attr_g;
-	struct device_attribute attr_name;
-	struct device_attribute attr_state;
-
-	struct attribute *attrs[3]; /* to be fed to attr_g.attrs */
-};
-
 static struct class *extcon_class;
 #if defined(CONFIG_ANDROID)
 static struct class_compat *switch_class;
diff --git a/drivers/phy/phy-bcm-ns2-usbdrd.c b/drivers/phy/phy-bcm-ns2-usbdrd.c
index 83044f8..c455793 100644
--- a/drivers/phy/phy-bcm-ns2-usbdrd.c
+++ b/drivers/phy/phy-bcm-ns2-usbdrd.c
@@ -55,7 +55,12 @@
 #define DRD_HOST_VAL		0x803
 #define DRD_DEV_VAL		0x807
 #define DRD_AFE_VAL		0xc0000001
+/* DRD_IOTCTRL_VAL does not include AxCACHE, which is preserved */
 #define DRD_IOCTRL_VAL		0x3dee001
+#define DRD_IOCTL_ARCACHE_W	4
+#define DRD_IOCTL_ARCACHE_R	6
+#define DRD_IOCTL_AWCACHE_W	4
+#define DRD_IOCTL_AWCACHE_R	2
 #define STRAP_CTRL_VAL		0x7ff0001
 #define GPIO_DELAY		20
 #define PHY_WQ_DELAY		msecs_to_jiffies(550)
@@ -139,7 +144,11 @@ static int ns2_drd_phy_init(struct phy *phy)
 	writel(DRD_AFE_VAL, driver->icfgdrd_regs + ICFG_DRD_AFE);
 
 	/* Configure IDM IO control register*/
-	writel(DRD_IOCTRL_VAL, driver->idmdrd_io_ctrl);
+	/* preserve AxCACHE settings */
+	val = readl(driver->idmdrd_io_ctrl);
+	val &= ((((1 << DRD_IOCTL_ARCACHE_W) - 1) << DRD_IOCTL_ARCACHE_R) |
+		(((1 << DRD_IOCTL_AWCACHE_W) - 1) << DRD_IOCTL_AWCACHE_R));
+	writel(DRD_IOCTRL_VAL | val, driver->idmdrd_io_ctrl);
 
 	val = readl(driver->icfgdrd_regs + ICFG_FSM_CTRL);
 
diff --git a/drivers/usb/core/hcd.c b/drivers/usb/core/hcd.c
index 2a2728f..52d7b4b 100644
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@ -2715,21 +2715,9 @@ static void usb_put_invalidate_rhdev(struct usb_hcd *hcd)
 	usb_put_dev(rhdev);
 }
 
-/**
- * usb_add_hcd - finish generic HCD structure initialization and register
- * @hcd: the usb_hcd structure to initialize
- * @irqnum: Interrupt line to allocate
- * @irqflags: Interrupt type flags
- *
- * Finish the remaining parts of generic HCD initialization: allocate the
- * buffers of consistent memory, register the bus, request the IRQ line,
- * and call the driver's reset() and start() routines.
- */
-int usb_add_hcd(struct usb_hcd *hcd,
-		unsigned int irqnum, unsigned long irqflags)
+int usb_hcd_phy_init(struct usb_hcd *hcd)
 {
-	int retval;
-	struct usb_device *rhdev;
+	int retval = 0;
 
 	if (IS_ENABLED(CONFIG_USB_PHY) && !hcd->usb_phy) {
 		struct usb_phy *phy = usb_get_phy_dev(hcd->self.controller, 0);
@@ -2755,23 +2743,65 @@ int usb_add_hcd(struct usb_hcd *hcd,
 		if (IS_ERR(phy)) {
 			retval = PTR_ERR(phy);
 			if (retval == -EPROBE_DEFER)
-				goto err_phy;
+				return retval;
 		} else {
 			retval = phy_init(phy);
 			if (retval) {
 				phy_put(phy);
-				goto err_phy;
+				return retval;
 			}
 			retval = phy_power_on(phy);
 			if (retval) {
 				phy_exit(phy);
 				phy_put(phy);
-				goto err_phy;
+				return retval;
 			}
 			hcd->phy = phy;
 			hcd->remove_phy = 1;
 		}
 	}
+	return 0;
+}
+EXPORT_SYMBOL_GPL(usb_hcd_phy_init);
+
+void usb_hcd_phy_exit(struct usb_hcd *hcd)
+{
+	if (IS_ENABLED(CONFIG_GENERIC_PHY) && hcd->remove_phy && hcd->phy) {
+		phy_power_off(hcd->phy);
+		phy_exit(hcd->phy);
+		phy_put(hcd->phy);
+		hcd->phy = NULL;
+	}
+	if (hcd->remove_phy && hcd->usb_phy) {
+		usb_phy_shutdown(hcd->usb_phy);
+		usb_put_phy(hcd->usb_phy);
+		hcd->usb_phy = NULL;
+	}
+}
+EXPORT_SYMBOL_GPL(usb_hcd_phy_exit);
+
+/**
+ * usb_add_hcd - finish generic HCD structure initialization and register
+ * @hcd: the usb_hcd structure to initialize
+ * @irqnum: Interrupt line to allocate
+ * @irqflags: Interrupt type flags
+ *
+ * Finish the remaining parts of generic HCD initialization: allocate the
+ * buffers of consistent memory, register the bus, request the IRQ line,
+ * and call the driver's reset() and start() routines.
+ */
+int usb_add_hcd(struct usb_hcd *hcd,
+		unsigned int irqnum, unsigned long irqflags)
+{
+	int retval;
+	struct usb_device *rhdev;
+
+	retval = usb_hcd_phy_init(hcd);
+	if (retval != 0) {
+		dev_err(hcd->self.controller,
+			"%s: phy init failed\n", __func__);
+		goto err_phy;
+	}
 
 	dev_info(hcd->self.controller, "%s\n", hcd->product_desc);
 
@@ -3021,17 +3051,7 @@ void usb_remove_hcd(struct usb_hcd *hcd)
 	usb_deregister_bus(&hcd->self);
 	hcd_buffer_destroy(hcd);
 
-	if (IS_ENABLED(CONFIG_GENERIC_PHY) && hcd->remove_phy && hcd->phy) {
-		phy_power_off(hcd->phy);
-		phy_exit(hcd->phy);
-		phy_put(hcd->phy);
-		hcd->phy = NULL;
-	}
-	if (hcd->remove_phy && hcd->usb_phy) {
-		usb_phy_shutdown(hcd->usb_phy);
-		usb_put_phy(hcd->usb_phy);
-		hcd->usb_phy = NULL;
-	}
+	usb_hcd_phy_exit(hcd);
 
 	usb_put_invalidate_rhdev(hcd);
 }
diff --git a/drivers/usb/host/xhci-plat.c b/drivers/usb/host/xhci-plat.c
index a66f6e2..229e036 100644
--- a/drivers/usb/host/xhci-plat.c
+++ b/drivers/usb/host/xhci-plat.c
@@ -303,6 +303,7 @@ static int xhci_plat_suspend(struct device *dev)
 {
 	struct usb_hcd	*hcd = dev_get_drvdata(dev);
 	struct xhci_hcd	*xhci = hcd_to_xhci(hcd);
+	int retval;
 
 	/*
 	 * xhci_suspend() needs `do_wakeup` to know whether host is allowed
@@ -312,7 +313,14 @@ static int xhci_plat_suspend(struct device *dev)
 	 * reconsider this when xhci_plat_suspend enlarges its scope, e.g.,
 	 * also applies to runtime suspend.
 	 */
-	return xhci_suspend(xhci, device_may_wakeup(dev));
+       retval = xhci_suspend(xhci, device_may_wakeup(dev));
+       if (retval)
+               return retval;
+
+       usb_hcd_phy_exit(xhci->shared_hcd);
+       usb_hcd_phy_exit(hcd);
+
+       return 0;
 }
 
 static int xhci_plat_resume(struct device *dev)
@@ -320,6 +328,9 @@ static int xhci_plat_resume(struct device *dev)
 	struct usb_hcd	*hcd = dev_get_drvdata(dev);
 	struct xhci_hcd	*xhci = hcd_to_xhci(hcd);
 
+        usb_hcd_phy_init(hcd);
+        usb_hcd_phy_init(xhci->shared_hcd);
+
 	return xhci_resume(xhci, 0);
 }
 
diff --git a/include/linux/extcon.h b/include/linux/extcon.h
index 6100441..ff2add9 100644
--- a/include/linux/extcon.h
+++ b/include/linux/extcon.h
@@ -126,6 +126,26 @@ struct extcon_dev {
 	struct device_attribute *d_attrs_muex;
 };
 
+/**
+ * struct extcon_cable - An internal data for each cable of extcon device.
+ * @edev:		The extcon device
+ * @cable_index:	Index of this cable in the edev
+ * @attr_g:		Attribute group for the cable
+ * @attr_name:		"name" sysfs entry
+ * @attr_state:		"state" sysfs entry
+ * @attrs:		Array pointing to attr_name and attr_state for attr_g
+ */
+struct extcon_cable {
+	struct extcon_dev *edev;
+	int cable_index;
+
+	struct attribute_group attr_g;
+	struct device_attribute attr_name;
+	struct device_attribute attr_state;
+
+	struct attribute *attrs[3]; /* to be fed to attr_g.attrs */
+};
+
 #if IS_ENABLED(CONFIG_EXTCON)
 
 /*
@@ -171,6 +191,11 @@ extern int extcon_get_cable_state_(struct extcon_dev *edev, unsigned int id);
 extern int extcon_set_cable_state_(struct extcon_dev *edev, unsigned int id,
 				   bool cable_state);
 
+extern int extcon_get_cable_state(struct extcon_dev *edev,
+				  const char *cable_name);
+extern int extcon_set_cable_state(struct extcon_dev *edev,
+				  const char *cable_name, bool cable_state);
+
 /*
  * Following APIs are to monitor every action of a notifier.
  * Registrar gets notified for every external port of a connection device.
@@ -260,6 +285,18 @@ static inline int extcon_set_cable_state_(struct extcon_dev *edev,
 	return 0;
 }
 
+static inline int extcon_get_cable_state(struct extcon_dev *edev,
+			const char *cable_name)
+{
+	return 0;
+}
+
+static inline int extcon_set_cable_state(struct extcon_dev *edev,
+			const char *cable_name, int state)
+{
+	return 0;
+}
+
 static inline struct extcon_dev *extcon_get_extcon_dev(const char *extcon_name)
 {
 	return NULL;
@@ -290,6 +327,20 @@ static inline  void devm_extcon_unregister_notifier(struct device *dev,
 				struct extcon_dev *edev, unsigned int id,
 				struct notifier_block *nb) { }
 
+static inline int extcon_register_interest(struct extcon_specific_cable_nb *obj,
+					   const char *extcon_name,
+					   const char *cable_name,
+					   struct notifier_block *nb)
+{
+	return 0;
+}
+
+static inline int extcon_unregister_interest(struct extcon_specific_cable_nb
+						    *obj)
+{
+	return 0;
+}
+
 static inline struct extcon_dev *extcon_get_edev_by_phandle(struct device *dev,
 							    int index)
 {
diff --git a/include/linux/usb/hcd.h b/include/linux/usb/hcd.h
index 66fc137..311dede 100644
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@ -445,6 +445,8 @@ extern struct usb_hcd *usb_create_shared_hcd(const struct hc_driver *driver,
 extern struct usb_hcd *usb_get_hcd(struct usb_hcd *hcd);
 extern void usb_put_hcd(struct usb_hcd *hcd);
 extern int usb_hcd_is_primary_hcd(struct usb_hcd *hcd);
+int usb_hcd_phy_init(struct usb_hcd *hcd);
+void usb_hcd_phy_exit(struct usb_hcd *hcd);
 extern int usb_add_hcd(struct usb_hcd *hcd,
 		unsigned int irqnum, unsigned long irqflags);
 extern void usb_remove_hcd(struct usb_hcd *hcd);
-- 
1.7.5.4

