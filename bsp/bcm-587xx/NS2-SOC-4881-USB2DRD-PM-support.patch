From 6e5dafee860530f2ce18c41783a5e2a18cf07f0a Mon Sep 17 00:00:00 2001
From: Shahaji Bhosle <sbhosle@broadcom.com>
Date: Mon, 12 Dec 2016 03:43:04 +0000
Subject: [PATCH 48/51] NS2:SOC-4881 USB2DRD PM support

Add usb2drd phy initialization to
support suspend/resume from controllers
Needed to add delay for hardware to settle
to avoid over-current.

Bug: SOC-4881
Change-Id: I20b4b067a02ed2d3afc94ee6360aecb98babc551
Reviewed-on: http://gerrit-ccxsw.rtp.broadcom.com:8080/34274
Reviewed-by: vpx_checkpatch status <vpx_checkpatch@broadcom.com>
Reviewed-by: Jon Mason <jon.mason@broadcom.com>
Reviewed-by: CCXSW <ccxswbuild@broadcom.com>
Tested-by: CCXSW <ccxswbuild@broadcom.com>
Reviewed-by: Colin Winegarden <Colin.Winegarden@broadcom.com>
Tested-by: Colin Winegarden <Colin.Winegarden@broadcom.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/phy/phy-bcm-ns2-usbdrd.c |   40 +++++++++++++++++--------------------
 1 files changed, 18 insertions(+), 22 deletions(-)

diff --git a/drivers/phy/phy-bcm-ns2-usbdrd.c b/drivers/phy/phy-bcm-ns2-usbdrd.c
index e91a31f..83044f8 100644
--- a/drivers/phy/phy-bcm-ns2-usbdrd.c
+++ b/drivers/phy/phy-bcm-ns2-usbdrd.c
@@ -126,6 +126,21 @@ static int ns2_drd_phy_init(struct phy *phy)
 
 	spin_lock_irqsave(&driver->lock, flags);
 
+	/* Enable VBUS and ID Pins */
+	val = readl(driver->apbx_idm_io_ctrl);
+	val |= (VBUS_TO_GPIO_31 | USB_ID_TO_GPIO_30);
+	writel(val, driver->apbx_idm_io_ctrl);
+
+	/* Configure ICFG registers */
+	val = readl(driver->icfgdrd_regs + ICFG_STRAP_CTRL);
+	val |= STRAP_CTRL_VAL;
+	writel(val, driver->icfgdrd_regs + ICFG_STRAP_CTRL);
+
+	writel(DRD_AFE_VAL, driver->icfgdrd_regs + ICFG_DRD_AFE);
+
+	/* Configure IDM IO control register*/
+	writel(DRD_IOCTRL_VAL, driver->idmdrd_io_ctrl);
+
 	val = readl(driver->icfgdrd_regs + ICFG_FSM_CTRL);
 
 	if (data->new_state == EVT_HOST) {
@@ -236,6 +251,9 @@ static int ns2_drd_phy_poweron(struct phy *phy)
 		val &= ~IDM_RST_BIT;
 		writel(val, driver->idmdrd_rst_ctrl);
 
+		/* Give hardware time to settle */
+		usleep_range(150, 300);
+
 		/* port over current Polarity */
 		val = readl(driver->usb2h_strap_reg);
 		val |= OHCI_OVRCUR_POL;
@@ -418,7 +436,6 @@ static int ns2_drd_phy_probe(struct platform_device *pdev)
 	struct ns2_phy_data *data;
 	struct resource *res;
 	int ret;
-	u32 val;
 
 	driver = devm_kzalloc(dev, sizeof(struct ns2_phy_driver),
 			      GFP_KERNEL);
@@ -462,21 +479,6 @@ static int ns2_drd_phy_probe(struct platform_device *pdev)
 	if (IS_ERR(driver->apbx_idm_io_ctrl))
 		return PTR_ERR(driver->apbx_idm_io_ctrl);
 
-	/* Enable VBUS and ID Pins */
-	val = readl(driver->apbx_idm_io_ctrl);
-	val |= (VBUS_TO_GPIO_31 | USB_ID_TO_GPIO_30);
-	writel(val, driver->apbx_idm_io_ctrl);
-
-	/* Configure ICFG registers */
-	val = readl(driver->icfgdrd_regs + ICFG_STRAP_CTRL);
-	val |= STRAP_CTRL_VAL;
-	writel(val, driver->icfgdrd_regs + ICFG_STRAP_CTRL);
-
-	writel(DRD_AFE_VAL, driver->icfgdrd_regs + ICFG_DRD_AFE);
-
-	/* Configure IDM IO control register*/
-	writel(DRD_IOCTRL_VAL, driver->idmdrd_io_ctrl);
-
 	 /* create extcon */
 	driver->id_gpiod = devm_gpiod_get(&pdev->dev, "id", GPIOD_IN);
 	if (IS_ERR(driver->id_gpiod)) {
@@ -541,12 +543,6 @@ static int ns2_drd_phy_probe(struct platform_device *pdev)
 
 	dev_set_drvdata(dev, driver);
 	driver->host_mode = 0;
-
-	/* Shutdown all ports. They can be powered up as required */
-	val = readl(driver->crmu_usb2_ctrl);
-	val &= ~(AFE_CORERDY_VDDC | PHY_RESETB);
-	writel(val, driver->crmu_usb2_ctrl);
-
 	data = driver->data;
 	data->phy = devm_phy_create(dev, dev->of_node, &ops);
 	if (IS_ERR(data->phy)) {
-- 
1.7.5.4

