From b11641e717958c69045f395b3615ac72ca90646b Mon Sep 17 00:00:00 2001
From: Shahaji Bhosle <sbhosle@broadcom.com>
Date: Wed, 7 Dec 2016 03:26:48 +0000
Subject: [PATCH 49/51] SOC-4461: NS2 USB3 PM Support

1. Fix xHCI crash because of USB3 PHY has
dual port and when the second port was
being initialized it would reset common
PHY register that would cause 1st
controller would cause SError.
2. Enable CONFIG_PM in default and debug
config.
3. xHCI resume requires reset because of
power being removed during the deep
sleep, using quirks and device tree
to enable XHCI_RESET_ON_RESUME quirk,
for upstreaming have to use the quirk
infrastructure.

Bug: SOC-4461
Change-Id: Ifd96624041b8db544fa932172e057cf9acd20142
Reviewed-on: http://gerrit-ccxsw.rtp.broadcom.com:8080/34051
Reviewed-by: vpx_checkpatch status <vpx_checkpatch@broadcom.com>
Reviewed-by: CCXSW <ccxswbuild@broadcom.com>
Tested-by: CCXSW <ccxswbuild@broadcom.com>
Reviewed-by: Randy Schacher <stuart.schacher@broadcom.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 arch/arm64/boot/dts/broadcom/ns2.dtsi |    2 +
 drivers/phy/phy-bcm-ns2-usb3.c        |  105 +++++++++++++++++++++++---------
 drivers/usb/host/xhci-plat.c          |   11 ++++
 3 files changed, 88 insertions(+), 30 deletions(-)

diff --git a/arch/arm64/boot/dts/broadcom/ns2.dtsi b/arch/arm64/boot/dts/broadcom/ns2.dtsi
index ad3c8ee..e6b2d5a 100644
--- a/arch/arm64/boot/dts/broadcom/ns2.dtsi
+++ b/arch/arm64/boot/dts/broadcom/ns2.dtsi
@@ -656,6 +656,7 @@
 			phys = <&usb3_phy0>;
 			phy-names = "usb3-phy";
 			dma-coherent;
+			needs-reset-on-resume;
 			status = "disabled";
 		};
 
@@ -672,6 +673,7 @@
 			phys = <&usb3_phy1>;
 			phy-names = "usb3-phy";
 			dma-coherent;
+			needs-reset-on-resume;
 			status = "disabled";
 		};
 
diff --git a/drivers/phy/phy-bcm-ns2-usb3.c b/drivers/phy/phy-bcm-ns2-usb3.c
index cb8a874..727a8d2 100644
--- a/drivers/phy/phy-bcm-ns2-usb3.c
+++ b/drivers/phy/phy-bcm-ns2-usb3.c
@@ -95,6 +95,7 @@ struct ns2_usb3_phy_master {
 	struct ns2_usb3_phy iphys[NS2_USB3_PHY_MAX];
 	struct mdio_device *mdiodev;
 	struct mutex phy_mutex;
+	int init_count; /* PHY is dual port phy, so init once*/
 };
 
 static int iproc_ns2_phy_action(struct ns2_usb3_phy *iphy,
@@ -105,6 +106,9 @@ static int iproc_ns2_phy_action(struct ns2_usb3_phy *iphy,
 	u32 offset = 0;
 	int ret = 0;
 
+	if (iphy->mphy->init_count)
+		return 0;
+
 	switch (block) {
 	case PHY_RESET:
 		addr = iphy->reg_base[NS2_USB3_CTRL];
@@ -138,19 +142,22 @@ static int iproc_ns2_phy_action(struct ns2_usb3_phy *iphy,
 
 	case PHY_SOFT_RESET:
 		addr = iphy->reg_base[NS2_USB3_PHY_CFG];
+		offset = NS2_USB3_PHY_P0CTL_REG;
 
-		switch (iphy->port_no) {
-		case 0:
-			offset = NS2_USB3_PHY_P0CTL_REG;
-			break;
+		ret = regmap_read(addr, offset, &data);
+		if (ret != 0)
+			return ret;
 
-		case 1:
-			offset = NS2_USB3_PHY_P1CTL_REG;
-			break;
+		if (assert)
+			data &= ~NS2_USB3_PHY_PXCTL_I_BIT;
+		else
+			data |= NS2_USB3_PHY_PXCTL_I_BIT;
 
-		default:
-			return -EINVAL;
-		}
+		ret = regmap_write(addr, offset, data);
+		if (ret != 0)
+			return ret;
+
+		offset = NS2_USB3_PHY_P1CTL_REG;
 
 		ret = regmap_read(addr, offset, &data);
 		if (ret != 0)
@@ -166,20 +173,22 @@ static int iproc_ns2_phy_action(struct ns2_usb3_phy *iphy,
 
 	case PHY_PIPE_RESET:
 		addr = iphy->reg_base[NS2_USB3_RST_CTRL];
+		offset = NS2_IDM_RST_CTRL_P0_OFFSET;
 
-		switch (iphy->port_no) {
-		case 0:
-			offset = NS2_IDM_RST_CTRL_P0_OFFSET;
-		break;
+		ret = regmap_read(addr, offset, &data);
+		if (ret != 0)
+			return ret;
 
-		case 1:
-			offset = NS2_IDM_RST_CTRL_P1_OFFSET;
-		break;
+		if (assert)
+			data |= NS2_IDM_RESET_CONTROL_BIT;
+		else
+			data &= ~NS2_IDM_RESET_CONTROL_BIT;
 
-		default:
-			return -EINVAL;
-		}
+		ret = regmap_write(addr, offset, data);
+		if (ret != 0)
+			return ret;
 
+		offset = NS2_IDM_RST_CTRL_P1_OFFSET;
 		ret = regmap_read(addr, offset, &data);
 		if (ret != 0)
 			return ret;
@@ -194,20 +203,22 @@ static int iproc_ns2_phy_action(struct ns2_usb3_phy *iphy,
 
 	case PHY_VBUS_PPC:
 		addr = iphy->reg_base[NS2_USB3_RST_CTRL];
+		offset = NS2_IDM_IO_CTRL_P0_OFFSET;
 
-		switch (iphy->port_no) {
-		case 0:
-			offset = NS2_IDM_IO_CTRL_P0_OFFSET;
-		break;
+		ret = regmap_read(addr, offset, &data);
+		if (ret != 0)
+			return ret;
 
-		case 1:
-			offset = NS2_IDM_IO_CTRL_P1_OFFSET;
-		break;
+		if (assert)
+			data |= NS2_IDM_IO_CTRL_PPC_CFG;
+		else
+			data &= ~NS2_IDM_IO_CTRL_PPC_CFG;
 
-		default:
-			return -EINVAL;
-		}
+		ret = regmap_write(addr, offset, data);
+		if (ret != 0)
+			return ret;
 
+		offset = NS2_IDM_IO_CTRL_P1_OFFSET;
 		ret = regmap_read(addr, offset, &data);
 		if (ret != 0)
 			return ret;
@@ -296,6 +307,36 @@ static int iproc_ns2_phy_action(struct ns2_usb3_phy *iphy,
 	return ret;
 }
 
+static int ns2_usb3_phy_exit(struct phy *phy)
+{
+	struct ns2_usb3_phy *iphy = phy_get_drvdata(phy);
+	int rc = 0;
+
+	mutex_lock(&iphy->mphy->phy_mutex);
+
+	rc = iproc_ns2_phy_action(iphy, PHY_PLL_RESET, true);
+	if (rc)
+		goto out;
+
+	rc = iproc_ns2_phy_action(iphy, PHY_SOFT_RESET, true);
+	if (rc)
+		goto out;
+
+	rc = iproc_ns2_phy_action(iphy, PHY_RESET, true);
+	if (rc)
+		goto out;
+
+	rc = iproc_ns2_phy_action(iphy, PHY_PIPE_RESET, true);
+	if (rc)
+		goto out;
+	mdelay(10);
+out:
+	iphy->mphy->init_count--;
+	mutex_unlock(&iphy->mphy->phy_mutex);
+
+	return rc;
+}
+
 static int ns2_usb3_phy_init(struct phy *phy)
 {
 	struct ns2_usb3_phy *iphy = phy_get_drvdata(phy);
@@ -403,7 +444,9 @@ static int ns2_usb3_phy_init(struct phy *phy)
 
 	/* Set USB3H VBUS PPC Polarity and NandNor select */
 	rc = iproc_ns2_phy_action(iphy, PHY_VBUS_PPC, true);
+
 out:
+	iphy->mphy->init_count++;
 	mutex_unlock(&iphy->mphy->phy_mutex);
 
 	return rc;
@@ -411,6 +454,7 @@ out:
 
 static struct phy_ops ns2_usb3_phy_ops = {
 	.init = ns2_usb3_phy_init,
+	.exit = ns2_usb3_phy_exit,
 	.owner = THIS_MODULE,
 };
 
@@ -427,6 +471,7 @@ static int ns2_usb3_phy_probe(struct mdio_device *mdiodev)
 		return -ENOMEM;
 	mphy->mdiodev = mdiodev;
 	mutex_init(&mphy->phy_mutex);
+	mphy->init_count = 0;
 
 	cnt = 0;
 	for_each_available_child_of_node(dn, child) {
diff --git a/drivers/usb/host/xhci-plat.c b/drivers/usb/host/xhci-plat.c
index ed56bf9..a66f6e2 100644
--- a/drivers/usb/host/xhci-plat.c
+++ b/drivers/usb/host/xhci-plat.c
@@ -56,12 +56,23 @@ static int xhci_priv_init_quirk(struct usb_hcd *hcd)
 
 static void xhci_plat_quirks(struct device *dev, struct xhci_hcd *xhci)
 {
+	struct device_node *of_node = dev->of_node;
 	/*
 	 * As of now platform drivers don't provide MSI support so we ensure
 	 * here that the generic code does not try to make a pci_dev from our
 	 * dev struct in order to setup MSI
 	 */
 	xhci->quirks |= XHCI_PLAT;
+
+	/*
+	 * For upstreaming this will have to move to xhci-brcm.c kind of
+	 * file for quirks. Adding it here for the current release for
+	 * Power Management Support.
+	 */
+	if (of_node &&
+	    of_property_read_bool(of_node, "needs-reset-on-resume")) {
+		xhci->quirks |= XHCI_RESET_ON_RESUME;
+	}
 }
 
 /* called during probe() after chip reset completes */
-- 
1.7.5.4

