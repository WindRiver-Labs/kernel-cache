From 9ea1155a65585d7f0193fa98ed48e169e072e47b Mon Sep 17 00:00:00 2001
From: Andy Gospodarek <gospo@broadcom.com>
Date: Thu, 22 Dec 2016 00:49:19 -0500
Subject: [PATCH 33/51] NS2: fixes not yet pushed upstream

Including at least fixes 25341a280, 6e3a249ab, and b911343db.

Signed-off-by: Andy Gospodarek <gospo@broadcom.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 arch/arm64/boot/dts/broadcom/ns2-clock.dtsi |    7 ++
 arch/arm64/boot/dts/broadcom/ns2-svk.dts    |    4 +
 arch/arm64/boot/dts/broadcom/ns2.dtsi       |  143 +++++++++++++++++++++-----
 drivers/pci/host/pcie-iproc.c               |  108 ++++++++++++++++++++-
 drivers/pci/quirks.c                        |   92 +++++++++++++++++
 5 files changed, 325 insertions(+), 29 deletions(-)

diff --git a/arch/arm64/boot/dts/broadcom/ns2-clock.dtsi b/arch/arm64/boot/dts/broadcom/ns2-clock.dtsi
index 99009fd..2c8074a 100644
--- a/arch/arm64/boot/dts/broadcom/ns2-clock.dtsi
+++ b/arch/arm64/boot/dts/broadcom/ns2-clock.dtsi
@@ -38,6 +38,13 @@
 		clock-frequency = <25000000>;
 	};
 
+	/* FIXME: dummy clock to allow SDIO to work */
+	sdio_clk: fixed_216mhz {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency = <216000000>;
+	};
+
 	lcpll_ddr: lcpll_ddr@6501d058 {
 		#clock-cells = <1>;
 		compatible = "brcm,ns2-lcpll-ddr";
diff --git a/arch/arm64/boot/dts/broadcom/ns2-svk.dts b/arch/arm64/boot/dts/broadcom/ns2-svk.dts
index de8d379..5ae0816 100644
--- a/arch/arm64/boot/dts/broadcom/ns2-svk.dts
+++ b/arch/arm64/boot/dts/broadcom/ns2-svk.dts
@@ -76,6 +76,10 @@
 	status = "ok";
 };
 
+&pcie8 {
+	status = "ok";
+};
+
 &i2c0 {
 	status = "ok";
 };
diff --git a/arch/arm64/boot/dts/broadcom/ns2.dtsi b/arch/arm64/boot/dts/broadcom/ns2.dtsi
index 044427e..eb97e7c 100644
--- a/arch/arm64/boot/dts/broadcom/ns2.dtsi
+++ b/arch/arm64/boot/dts/broadcom/ns2.dtsi
@@ -113,9 +113,15 @@
 		compatible = "brcm,iproc-pcie";
 		reg = <0 0x20020000 0 0x1000>;
 
+		interrupt-controller;
 		#interrupt-cells = <1>;
-		interrupt-map-mask = <0 0 0 0>;
-		interrupt-map = <0 0 0 0 &gic GIC_SPI 281 IRQ_TYPE_NONE>;
+		interrupt-map-mask = <0 0 0 7>;
+		interrupt-map = <0 0 0 0 1 &pcie0 1>,
+				<0 0 0 0 2 &pcie0 2>,
+				<0 0 0 0 3 &pcie0 3>,
+				<0 0 0 0 4 &pcie0 4>;
+
+		interrupts = <GIC_SPI 281 IRQ_TYPE_NONE>;
 
 		linux,pci-domain = <0>;
 
@@ -136,27 +142,22 @@
 		phys = <&pci_phy0>;
 		phy-names = "pcie-phy";
 
-		msi-parent = <&msi0>;
-		msi0: msi@20020000 {
-			compatible = "brcm,iproc-msi";
-			msi-controller;
-			interrupt-parent = <&gic>;
-			interrupts = <GIC_SPI 277 IRQ_TYPE_NONE>,
-				     <GIC_SPI 278 IRQ_TYPE_NONE>,
-				     <GIC_SPI 279 IRQ_TYPE_NONE>,
-				     <GIC_SPI 280 IRQ_TYPE_NONE>;
-			brcm,num-eq-region = <1>;
-			brcm,num-msi-msg-region = <1>;
-		};
+		msi-parent = <&v2m0>;
 	};
 
 	pcie4: pcie@50020000 {
 		compatible = "brcm,iproc-pcie";
 		reg = <0 0x50020000 0 0x1000>;
 
+		interrupt-controller;
 		#interrupt-cells = <1>;
-		interrupt-map-mask = <0 0 0 0>;
-		interrupt-map = <0 0 0 0 &gic GIC_SPI 305 IRQ_TYPE_NONE>;
+		interrupt-map-mask = <0 0 0 7>;
+		interrupt-map = <0 0 0 1 &pcie4 1>,
+				<0 0 0 2 &pcie4 2>,
+				<0 0 0 3 &pcie4 3>,
+				<0 0 0 4 &pcie4 4>;
+
+		interrupts = <GIC_SPI 305 IRQ_TYPE_NONE>;
 
 		linux,pci-domain = <4>;
 
@@ -177,16 +178,25 @@
 		phys = <&pci_phy1>;
 		phy-names = "pcie-phy";
 
-		msi-parent = <&msi4>;
-		msi4: msi@50020000 {
-			compatible = "brcm,iproc-msi";
-			msi-controller;
-			interrupt-parent = <&gic>;
-			interrupts = <GIC_SPI 301 IRQ_TYPE_NONE>,
-				     <GIC_SPI 302 IRQ_TYPE_NONE>,
-				     <GIC_SPI 303 IRQ_TYPE_NONE>,
-				     <GIC_SPI 304 IRQ_TYPE_NONE>;
-		};
+		msi-parent = <&v2m0>;
+	};
+
+	pcie8: pcie@60c00000 {
+		compatible = "brcm,iproc-pcie-paxc";
+		reg = <0 0x60c00000 0 0x1000>;
+		dma-coherent;
+		linux,pci-domain = <8>;
+
+		bus-range = <0x0 0x1>;
+
+		#address-cells = <3>;
+		#size-cells = <2>;
+		device_type = "pci";
+		ranges = <0x83000000 0 0x00000000 0 0x60000000 0 0x00c00000>;
+
+		status = "disabled";
+
+		msi-parent = <&v2m0>;
 	};
 
 	soc: soc {
@@ -295,6 +305,82 @@
 			      <0x65260000 0x1000>;
 			interrupts = <GIC_PPI 9 (GIC_CPU_MASK_RAW(0xf) |
 				      IRQ_TYPE_LEVEL_HIGH)>;
+
+			#address-cells = <1>;
+			#size-cells = <1>;
+			ranges = <0 0x652e0000 0x80000>;
+
+			v2m0: v2m@00000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x00000 0x1000>;
+				arm,msi-base-spi = <72>;
+				arm,msi-num-spis = <16>;
+			};
+
+			v2m1: v2m@10000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x10000 0x1000>;
+				arm,msi-base-spi = <88>;
+				arm,msi-num-spis = <16>;
+			};
+
+			v2m2: v2m@20000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x20000 0x1000>;
+				arm,msi-base-spi = <104>;
+				arm,msi-num-spis = <16>;
+			};
+
+			v2m3: v2m@30000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x30000 0x1000>;
+				arm,msi-base-spi = <120>;
+				arm,msi-num-spis = <16>;
+			};
+
+			v2m4: v2m@40000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x40000 0x1000>;
+				arm,msi-base-spi = <136>;
+				arm,msi-num-spis = <16>;
+			};
+
+			v2m5: v2m@50000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x50000 0x1000>;
+				arm,msi-base-spi = <152>;
+				arm,msi-num-spis = <16>;
+			};
+
+			v2m6: v2m@60000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x60000 0x1000>;
+				arm,msi-base-spi = <168>;
+				arm,msi-num-spis = <16>;
+			};
+
+			v2m7: v2m@70000 {
+				compatible = "arm,gic-v2m-frame";
+				interrupt-parent = <&gic>;
+				msi-controller;
+				reg = <0x70000 0x1000>;
+				arm,msi-base-spi = <184>;
+				arm,msi-num-spis = <16>;
+			};
 		};
 
 		cci@65590000 {
@@ -557,7 +643,8 @@
 			reg = <0x66420000 0x100>;
 			interrupts = <GIC_SPI 421 IRQ_TYPE_LEVEL_HIGH>;
 			bus-width = <8>;
-			clocks = <&genpll_sw BCM_NS2_GENPLL_SW_SDIO_CLK>;
+			no-1-8-v;
+			clocks = <&sdio_clk>;
 			status = "disabled";
 		};
 
@@ -566,7 +653,7 @@
 			reg = <0x66430000 0x100>;
 			interrupts = <GIC_SPI 422 IRQ_TYPE_LEVEL_HIGH>;
 			bus-width = <8>;
-			clocks = <&genpll_sw BCM_NS2_GENPLL_SW_SDIO_CLK>;
+			clocks = <&sdio_clk>;
 			status = "disabled";
 		};
 
diff --git a/drivers/pci/host/pcie-iproc.c b/drivers/pci/host/pcie-iproc.c
index 3ebc025..2a49349 100644
--- a/drivers/pci/host/pcie-iproc.c
+++ b/drivers/pci/host/pcie-iproc.c
@@ -47,6 +47,8 @@
 
 #define CFG_IND_ADDR_MASK            0x00001ffc
 
+#define CFG_DATA_OFFSET              0x1FC
+#define CFG_ADDR_OFFSET              0x1F8
 #define CFG_ADDR_BUS_NUM_SHIFT       20
 #define CFG_ADDR_BUS_NUM_MASK        0x0ff00000
 #define CFG_ADDR_DEV_NUM_SHIFT       15
@@ -92,6 +94,7 @@
 
 #define PCI_EXP_CAP			0xac
 
+#define MAX_NUM_PAXC_PF			4
 #define IPROC_PCIE_REG_INVALID 0xffff
 
 /**
@@ -1205,7 +1208,7 @@ int iproc_pcie_setup(struct iproc_pcie *pcie, struct list_head *res)
 	struct device *dev;
 	int ret;
 	void *sysdata;
-	struct pci_bus *bus;
+	struct pci_bus *bus, *child;
 
 	dev = pcie->dev;
 
@@ -1278,6 +1281,9 @@ int iproc_pcie_setup(struct iproc_pcie *pcie, struct list_head *res)
 	if (pcie->map_irq)
 		pci_fixup_irqs(pci_common_swizzle, pcie->map_irq);
 
+	list_for_each_entry(child, &bus->children, node)
+		pcie_bus_configure_settings(child);
+
 	pci_bus_add_devices(bus);
 
 	return 0;
@@ -1308,6 +1314,106 @@ int iproc_pcie_remove(struct iproc_pcie *pcie)
 }
 EXPORT_SYMBOL(iproc_pcie_remove);
 
+/**
+ * FIXME
+ * Hacky code to work around the ASIC issue with PAXC and Nitro
+ *
+ * 1. The bridge header fix should eventually be moved to pci/quirks.c
+ * 2. The Nitro fix should be moved to either Chimp firmware or the Nitro
+ * kernel driver, which we have no control at this point. Or, hopefully this
+ * may be fixed in NS2 B0
+ */
+static void quirk_paxc_bridge(struct pci_dev *pdev)
+{
+	struct iproc_pcie *pcie = iproc_data(pdev->bus);
+	int pf;
+
+	/* MPSS is not being set properly (as it is currently 0).  Add this as
+	 * a workaround until a fix can be added to chimp fw.  The MPS is being
+	 * set to 512 bytes.  So, I'll assume that the MPSS can be at least 512
+	 * (or a MPSS value of 2).
+	 */
+	pdev->pcie_mpss = 2;
+
+	if (pdev->hdr_type == PCI_HEADER_TYPE_BRIDGE) {
+		pdev->class = PCI_CLASS_BRIDGE_PCI << 8;
+
+#define PAXC_RX_DEBUG_CONTROL	0x28
+#define PAXC_RX_WR_INRC_AWID	(1 << 13)
+#define PAXC_RX_IGNORE_RDCMD_ORDERING	(1 << 12)
+#define PAXC_RX_WR_BURST	(4 << 9)
+#define PAXC_RX_RD_BURST	(4 << 6)
+#define PAXC_RX_IGNORE_BRESP	(1 << 5)
+#define PAXC_RX_FREE_CMPL_BUF	(7 << 2)
+#define PAXC_RX_FREE_ARID_CNT	(3)
+
+		/* Tune the PAXC RX for increased performance */
+		writel(PAXC_RX_WR_INRC_AWID | PAXC_RX_WR_BURST |
+		       PAXC_RX_RD_BURST | PAXC_RX_IGNORE_BRESP |
+		       PAXC_RX_FREE_CMPL_BUF | PAXC_RX_FREE_ARID_CNT |
+		       PAXC_RX_IGNORE_RDCMD_ORDERING,
+		       pcie->base + PAXC_RX_DEBUG_CONTROL);
+
+#define PAXC_TRANSACTION_SIZE_128B_ADDR 0x1000b4
+#define PAXC_TRANSACTION_SIZE_128B_DATA 0x102c50
+
+		writel(PAXC_TRANSACTION_SIZE_128B_ADDR,
+		       pcie->base + CFG_ADDR_OFFSET);
+		writel(PAXC_TRANSACTION_SIZE_128B_DATA,
+		       pcie->base + CFG_DATA_OFFSET);
+		return;
+	}
+#define PAXC_CFG_ECM_ADDR_OFFSET     0x1e0
+#define PAXC_CFG_ECM_DBG_EN_SHIFT    31
+#define PAXC_CFG_ECM_DBG_EN          BIT(PAXC_CFG_ECM_DBG_EN_SHIFT)
+#define PAXC_CFG_FUNC_SHIFT          12
+#define PAXC_CFG_FUNC_MASK           0x7000
+#define PAXC_CFG_FUNC(pf)            (((pf) << PAXC_CFG_FUNC_SHIFT) & \
+				      PAXC_CFG_FUNC_MASK)
+#define PAXC_CFG_ECM_DATA_OFFSET     0x1e4
+
+#define NITRO_MSI_CFG_OFFSET         0x4c4
+#define NITRO_QSIZE_OFFSET           0x4c0
+	for (pf = 0; pf < MAX_NUM_PAXC_PF; pf++) {
+		u32 val;
+
+		/*
+		 * TODO:
+		 * Need to figure out what these hardcoded values mean.
+		 * It's unbelievable that after weeks of poking around and
+		 * digging, there's still no one who can point me to a proper
+		 * Nitro documentation
+		 */
+		val = PAXC_CFG_ECM_DBG_EN | PAXC_CFG_FUNC(pf) |
+			NITRO_MSI_CFG_OFFSET;
+		writel(val, pcie->base + PAXC_CFG_ECM_ADDR_OFFSET);
+		writel(0x4, pcie->base + PAXC_CFG_ECM_DATA_OFFSET);
+
+		val = PAXC_CFG_ECM_DBG_EN | PAXC_CFG_FUNC(pf) |
+			NITRO_QSIZE_OFFSET;
+		writel(val, pcie->base + PAXC_CFG_ECM_ADDR_OFFSET);
+		writel(0xba80b, pcie->base + PAXC_CFG_ECM_DATA_OFFSET);
+	}
+	writel(0, pcie->base + PAXC_CFG_ECM_ADDR_OFFSET);
+}
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_57810,
+			quirk_paxc_bridge);
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_BROADCOM, 0x16cd, quirk_paxc_bridge);
+
+static void northstar_ns2_perftune(struct pci_dev *pdev)
+{
+#define NS2_CREDIT_REPORTING		0xa14
+#define NS2_CREDIT_REPORTING_INTERVAL	0x03402020
+
+	pci_bus_write_config_dword(pdev->bus, 0, NS2_CREDIT_REPORTING,
+				   NS2_CREDIT_REPORTING_INTERVAL);
+}
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_BROADCOM, 0xd300, northstar_ns2_perftune);
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_BROADCOM, 0xe711, northstar_ns2_perftune);
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_BROADCOM, 0xd712, northstar_ns2_perftune);
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_BROADCOM, 0xd713, northstar_ns2_perftune);
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_BROADCOM, 0xd715, northstar_ns2_perftune);
+
 MODULE_AUTHOR("Ray Jui <rjui@broadcom.com>");
 MODULE_DESCRIPTION("Broadcom iPROC PCIe common driver");
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index 4bf1a88..174f6f6 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -4432,3 +4432,95 @@ static void quirk_intel_qat_vf_cap(struct pci_dev *pdev)
 	}
 }
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_INTEL, 0x443, quirk_intel_qat_vf_cap);
+
+
+/*
+ * The PCI capabilities list for Broadcom NS2 and Stingray PAXC root complexes
+ * is incorrectly terminated due to corrupted configuration space registers in
+ * the range of 0x50 - 0x5f
+ *
+ * As a result, the capability list becomes broken and prevent standard PCI SW
+ * stack from being able to traverse to the PCIe capability structure
+ */
+static void quirk_paxc_pcie_capability(struct pci_dev *pdev)
+{
+	int pos, i = 0;
+	u8 next_cap;
+	u16 reg16, *cap;
+	struct pci_cap_saved_state *state;
+
+	/* bail out if PCIe capability can be found */
+	if (pdev->pcie_cap || pci_find_capability(pdev, PCI_CAP_ID_EXP))
+		return;
+
+	/* locate the power management capability */
+	pos = pci_find_capability(pdev, PCI_CAP_ID_PM);
+	if (!pos)
+		return;
+
+	/* bail out if the next capability pointer is not 0x58 */
+	pci_read_config_byte(pdev, pos + 1, &next_cap);
+	if (next_cap != 0x58)
+		return;
+
+	/* bail out if we do not terminate at 0x58 */
+	pos = next_cap;
+	pci_read_config_byte(pdev, pos + 1, &next_cap);
+	if (next_cap != 0x00)
+		return;
+
+	/*
+	 * On these buggy HW, PCIe capability structure is expected to be at
+	 * 0xac and should terminate the list
+	 *
+	 * Borrow the similar logic from the above Intel DH895xCC VFs fixup
+	 * to save the PCIe capabilty list below
+	 */
+	pos = 0xac;
+	pci_read_config_word(pdev, pos, &reg16);
+	if (reg16 == (0x0000 | PCI_CAP_ID_EXP)) {
+		u32 status;
+
+#ifndef PCI_EXP_SAVE_REGS
+#define PCI_EXP_SAVE_REGS     7
+#endif
+		int size = PCI_EXP_SAVE_REGS * sizeof(u16);
+
+		pdev->pcie_cap = pos;
+		pci_read_config_word(pdev, pos + PCI_EXP_FLAGS, &reg16);
+		pdev->pcie_flags_reg = reg16;
+		pci_read_config_word(pdev, pos + PCI_EXP_DEVCAP, &reg16);
+		pdev->pcie_mpss = reg16 & PCI_EXP_DEVCAP_PAYLOAD;
+
+		pdev->cfg_size = PCI_CFG_SPACE_EXP_SIZE;
+		if (pci_read_config_dword(pdev, PCI_CFG_SPACE_SIZE, &status) !=
+		    PCIBIOS_SUCCESSFUL || (status == 0xffffffff))
+			pdev->cfg_size = PCI_CFG_SPACE_SIZE;
+
+		if (pci_find_saved_cap(pdev, PCI_CAP_ID_EXP))
+			return;
+
+		state = kzalloc(sizeof(*state) + size, GFP_KERNEL);
+		if (!state)
+			return;
+
+		state->cap.cap_nr = PCI_CAP_ID_EXP;
+		state->cap.cap_extended = 0;
+		state->cap.size = size;
+		cap = (u16 *)&state->cap.data[0];
+		pcie_capability_read_word(pdev, PCI_EXP_DEVCTL, &cap[i++]);
+		pcie_capability_read_word(pdev, PCI_EXP_LNKCTL, &cap[i++]);
+		pcie_capability_read_word(pdev, PCI_EXP_SLTCTL, &cap[i++]);
+		pcie_capability_read_word(pdev, PCI_EXP_RTCTL,  &cap[i++]);
+		pcie_capability_read_word(pdev, PCI_EXP_DEVCTL2, &cap[i++]);
+		pcie_capability_read_word(pdev, PCI_EXP_LNKCTL2, &cap[i++]);
+		pcie_capability_read_word(pdev, PCI_EXP_SLTCTL2, &cap[i++]);
+		hlist_add_head(&state->next, &pdev->saved_cap_space);
+	}
+}
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_BROADCOM, PCI_DEVICE_ID_NX2_57810,
+			quirk_paxc_pcie_capability);
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_BROADCOM, 0x16ca,
+			quirk_paxc_pcie_capability);
+DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_BROADCOM, 0x16cd,
+			quirk_paxc_pcie_capability);
-- 
1.7.5.4

