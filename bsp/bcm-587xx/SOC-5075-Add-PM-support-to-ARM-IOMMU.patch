From 32bd5d95e444b48e72a8c897d4aa3cd8e517ddc2 Mon Sep 17 00:00:00 2001
From: Peter Spreadborough <peter.spreadborough@broadcom.com>
Date: Wed, 1 Feb 2017 17:00:13 -0500
Subject: [PATCH 09/11] SOC-5075: Add PM support to ARM IOMMU

Added suspend and resume assuming no power during suspend. Tested
using DMATest (DMA 1 uses IOMMU).

- Checkpatch changes
- Remove unneeded reg save.
- Move unlock in error case at end of suspend to before freeing
  alocated buffers.

Bug: SOC-5075
Change-Id: I2de7696dc3361af483d35f5f8d2430ff9f998d4c
Reviewed-on: http://gerrit-ccxsw.broadcom.net/36410
Reviewed-by: vpx_checkpatch status <vpx_checkpatch@broadcom.com>
Tested-by: Peter Spreadborough <peter.spreadborough@broadcom.com>
Reviewed-by: CCXSW <ccxswbuild@broadcom.com>
Tested-by: CCXSW <ccxswbuild@broadcom.com>
Reviewed-by: Jon Mason <jon.mason@broadcom.com>
Reviewed-by: Randy Schacher <stuart.schacher@broadcom.com>
Reviewed-on: http://gerrit-ccxsw.broadcom.net/37928
Reviewed-by: Andrew Gospodarek <gospo@broadcom.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/iommu/arm-smmu.c |  225 +++++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 212 insertions(+), 13 deletions(-)

diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index 2db74eb..3c9d7a6 100644
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -36,9 +36,11 @@
 #include <linux/io.h>
 #include <linux/io-64-nonatomic-hi-lo.h>
 #include <linux/iommu.h>
+#include <linux/syscore_ops.h>
 #include <linux/iopoll.h>
 #include <linux/module.h>
 #include <linux/of.h>
+#include <linux/of_iommu.h>
 #include <linux/of_address.h>
 #include <linux/pci.h>
 #include <linux/platform_device.h>
@@ -314,6 +316,30 @@ struct arm_smmu_master {
 	struct arm_smmu_master_cfg	cfg;
 };
 
+#ifdef CONFIG_SUSPEND
+
+struct arm_smmu_cb_state {
+	u32 cbar;
+	u32 cba2r;
+	u32 sctlr;
+	u64 ttbr0;
+	u64 ttbr1;
+	u32 ttbcr;
+	u32 ttbcr2;
+	u32 mair0;
+	u32 mair1;
+};
+
+struct arm_smmu_state {
+	u32 scr0;
+	u32 scr1;
+	u32 smr[ARM_SMMU_MAX_SMRS];
+	u32 s2cr[ARM_SMMU_MAX_CBS];
+	struct arm_smmu_cb_state cb[ARM_SMMU_MAX_CBS];
+};
+#endif
+
+
 struct arm_smmu_device {
 	struct device			*dev;
 
@@ -357,6 +383,10 @@ struct arm_smmu_device {
 	u32				num_context_irqs;
 	unsigned int			*irqs;
 
+#ifdef CONFIG_SUSPEND
+	struct arm_smmu_state           *state;
+#endif
+
 	struct list_head		list;
 	struct rb_root			masters;
 
@@ -2033,6 +2063,179 @@ static int arm_smmu_device_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_SUSPEND
+
+static int iommu_suspend(void)
+{
+	struct arm_smmu_device *smmu = NULL;
+	int i;
+	void __iomem *cb_base, *gr0_base, *gr1_base;
+
+	spin_lock(&arm_smmu_devices_lock);
+
+	list_for_each_entry(smmu, &arm_smmu_devices, list) {
+		smmu->state = kzalloc(sizeof(struct arm_smmu_state),
+						 GFP_ATOMIC);
+		if (!smmu->state)
+			goto nomem;
+	}
+
+	list_for_each_entry(smmu, &arm_smmu_devices, list) {
+
+		__arm_smmu_tlb_sync(smmu);
+
+		gr0_base = ARM_SMMU_GR0(smmu);
+		gr1_base = ARM_SMMU_GR1(smmu);
+
+		/* Global regs */
+		smmu->state->scr0 = readl_relaxed(gr0_base +
+						  ARM_SMMU_GR0_sCR0);
+		smmu->state->scr1 = readl_relaxed(gr0_base +
+						  ARM_SMMU_GR0_sCR0 + 4);
+
+		/* Stream mapping and stream to context */
+		for (i = 0; i < smmu->num_mapping_groups; i++) {
+			smmu->state->smr[i] =
+				readl_relaxed(gr0_base +
+					      ARM_SMMU_GR0_SMR(i));
+			smmu->state->s2cr[i] =
+				readl_relaxed(gr0_base +
+					      ARM_SMMU_GR0_S2CR(i));
+		}
+
+		/* Context bank attribute registers */
+		for (i = 0; i < smmu->num_context_banks; i++) {
+			cb_base = ARM_SMMU_CB_BASE(smmu) +
+				ARM_SMMU_CB(smmu, i);
+			smmu->state->cb[i].cba2r =
+				readl_relaxed(gr1_base +
+					      ARM_SMMU_GR1_CBA2R(i));
+			smmu->state->cb[i].cbar =
+				readl_relaxed(gr1_base +
+					      ARM_SMMU_GR1_CBAR(i));
+			smmu->state->cb[i].ttbr0 =
+				(u64)(readl_relaxed(cb_base +
+						    ARM_SMMU_CB_TTBR0));
+			smmu->state->cb[i].ttbr0 +=
+				(u64)(readl_relaxed(cb_base +
+						    ARM_SMMU_CB_TTBR0 +
+						    4)) << 32;
+			smmu->state->cb[i].ttbr1 =
+				(u64)(readl_relaxed(cb_base +
+						    ARM_SMMU_CB_TTBR1));
+			smmu->state->cb[i].ttbr1 +=
+				(u64)(readl_relaxed(cb_base +
+						    ARM_SMMU_CB_TTBR1 +
+						    4)) << 32;
+			smmu->state->cb[i].ttbcr =
+				readl_relaxed(cb_base +
+					      ARM_SMMU_CB_TTBCR);
+			smmu->state->cb[i].ttbcr2 =
+				readl_relaxed(cb_base +
+					      ARM_SMMU_CB_TTBCR2);
+			smmu->state->cb[i].mair0 =
+				readl_relaxed(cb_base +
+					      ARM_SMMU_CB_S1_MAIR0);
+			smmu->state->cb[i].mair1 =
+				readl_relaxed(cb_base +
+					      ARM_SMMU_CB_S1_MAIR1);
+			smmu->state->cb[i].sctlr =
+				readl_relaxed(cb_base +
+					      ARM_SMMU_CB_SCTLR);
+		}
+	}
+
+	spin_unlock(&arm_smmu_devices_lock);
+
+	return 0;
+
+nomem:
+	spin_unlock(&arm_smmu_devices_lock);
+
+	list_for_each_entry(smmu, &arm_smmu_devices, list)
+		kfree(smmu->state);
+
+
+	return -ENOMEM;
+}
+
+static void iommu_resume(void)
+{
+	struct arm_smmu_device *smmu = NULL;
+	int i, err;
+	void __iomem *cb_base, *gr0_base, *gr1_base;
+
+	spin_lock(&arm_smmu_devices_lock);
+
+	list_for_each_entry(smmu, &arm_smmu_devices, list) {
+
+		arm_smmu_device_reset(smmu);
+
+		gr0_base = ARM_SMMU_GR0(smmu);
+		gr1_base = ARM_SMMU_GR1(smmu);
+
+		/* Stream ID */
+		for (i = 0; i < smmu->num_mapping_groups; i++) {
+			writel(smmu->state->smr[i],
+			       gr0_base + ARM_SMMU_GR0_SMR(i));
+			writel(smmu->state->s2cr[i],
+			       gr0_base + ARM_SMMU_GR0_S2CR(i));
+		}
+
+		/* Context bank attribute registers */
+		for (i = 0; i < smmu->num_context_banks; i++) {
+			cb_base = ARM_SMMU_CB_BASE(smmu) +
+				ARM_SMMU_CB(smmu, i);
+			writel(smmu->state->cb[i].cba2r,
+			       gr1_base + ARM_SMMU_GR1_CBA2R(i));
+			writel(smmu->state->cb[i].cbar,
+			       gr1_base + ARM_SMMU_GR1_CBAR(i));
+
+			writeq(smmu->state->cb[i].ttbr0,
+			       cb_base + ARM_SMMU_CB_TTBR0);
+			writeq(smmu->state->cb[i].ttbr1,
+			       cb_base + ARM_SMMU_CB_TTBR1);
+
+			writel(smmu->state->cb[i].ttbcr,
+			       cb_base + ARM_SMMU_CB_TTBCR);
+			writel(smmu->state->cb[i].ttbcr2,
+			       cb_base + ARM_SMMU_CB_TTBCR2);
+			writel(smmu->state->cb[i].mair0,
+			       cb_base + ARM_SMMU_CB_S1_MAIR0);
+			writel(smmu->state->cb[i].mair1,
+			       cb_base + ARM_SMMU_CB_S1_MAIR1);
+			writel(smmu->state->cb[i].sctlr,
+			       cb_base + ARM_SMMU_CB_SCTLR);
+		}
+
+		/* Global regs */
+		writel(smmu->state->scr0,
+		       gr0_base + ARM_SMMU_GR0_sCR0);
+		writel(smmu->state->scr1,
+		       gr0_base + ARM_SMMU_GR0_sCR0 + 4);
+	}
+
+	spin_unlock(&arm_smmu_devices_lock);
+
+	/* Free up config cache */
+	list_for_each_entry(smmu, &arm_smmu_devices, list)
+		kfree(smmu->state);
+}
+
+static struct syscore_ops iommu_syscore_ops = {
+	.resume		= iommu_resume,
+	.suspend	= iommu_suspend,
+};
+
+static void __init init_iommu_pm_ops(void)
+{
+	register_syscore_ops(&iommu_syscore_ops);
+}
+
+#else
+static inline void init_iommu_pm_ops(void) {}
+#endif	/* CONFIG_SUSPEND */
+
 static struct platform_driver arm_smmu_driver = {
 	.driver	= {
 		.name		= "arm-smmu",
@@ -2042,21 +2245,12 @@ static struct platform_driver arm_smmu_driver = {
 	.remove	= arm_smmu_device_remove,
 };
 
-static int __init arm_smmu_init(void)
+static int __init arm_smmu_init(struct device_node *np)
 {
-	struct device_node *np;
 	int ret;
 
-	/*
-	 * Play nice with systems that don't have an ARM SMMU by checking that
-	 * an ARM SMMU exists in the system before proceeding with the driver
-	 * and IOMMU bus operation registration.
-	 */
-	np = of_find_matching_node(NULL, arm_smmu_of_match);
-	if (!np)
-		return 0;
-
-	of_node_put(np);
+	of_iommu_set_ops(np, &arm_smmu_ops);
+	init_iommu_pm_ops();
 
 	ret = platform_driver_register(&arm_smmu_driver);
 	if (ret)
@@ -2080,13 +2274,18 @@ static int __init arm_smmu_init(void)
 
 	return 0;
 }
+IOMMU_OF_DECLARE(arm_smmu_v1, "arm,smmu-v1", arm_smmu_init);
+IOMMU_OF_DECLARE(arm_smmu_v2, "arm,smmu-v2", arm_smmu_init);
+IOMMU_OF_DECLARE(arm_mmu_400, "arm,mmu-400", arm_smmu_init);
+IOMMU_OF_DECLARE(arm_mmu_401, "arm,mmu-401", arm_smmu_init);
+IOMMU_OF_DECLARE(arm_mmu_500, "arm,mmu-500", arm_smmu_init);
 
 static void __exit arm_smmu_exit(void)
 {
 	return platform_driver_unregister(&arm_smmu_driver);
 }
 
-subsys_initcall(arm_smmu_init);
+//subsys_initcall(arm_smmu_init);
 module_exit(arm_smmu_exit);
 
 MODULE_DESCRIPTION("IOMMU API for ARM architected SMMU implementations");
-- 
1.7.5.4

