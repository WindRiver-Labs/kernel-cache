From 3df89fc18a8fd511d98b41e536883cfe2fb22dc6 Mon Sep 17 00:00:00 2001
From: Peter Spreadborough <peter.spreadborough@broadcom.com>
Date: Fri, 10 Mar 2017 11:05:52 -0500
Subject: [PATCH 10/11] SOC-5238 : USB PM support

- Added USB PM support from 5.x branch.
- Corrected SATA address in device tree.
- Checkpatch cleanup
- Add extern to function prototypes

Bug: SOC-5238
Change-Id: I8241bb6ddcf8c35dad40ca7c9ea7507bdb359a63
Reviewed-on: http://gerrit-ccxsw.broadcom.net/38238
Reviewed-by: vpx_checkpatch status <vpx_checkpatch@broadcom.com>
Reviewed-by: Randy Schacher <stuart.schacher@broadcom.com>
Tested-by: Randy Schacher <stuart.schacher@broadcom.com>
Reviewed-by: Andrew Gospodarek <gospo@broadcom.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/phy/phy-bcm-ns2-usb3.c   |    1 -
 drivers/phy/phy-bcm-ns2-usbdrd.c |   44 ++++++++++++++-----
 drivers/usb/core/hcd.c           |   84 +++++++++++++++++++++++---------------
 drivers/usb/host/xhci-plat.c     |   13 +++++-
 include/linux/usb/hcd.h          |    2 +
 5 files changed, 97 insertions(+), 47 deletions(-)

diff --git a/drivers/phy/phy-bcm-ns2-usb3.c b/drivers/phy/phy-bcm-ns2-usb3.c
index 727a8d2..3a05a72 100644
--- a/drivers/phy/phy-bcm-ns2-usb3.c
+++ b/drivers/phy/phy-bcm-ns2-usb3.c
@@ -516,7 +516,6 @@ static int ns2_usb3_phy_probe(struct mdio_device *mdiodev)
 		}
 
 		phy_set_drvdata(iphy->phy, iphy);
-		ns2_usb3_phy_init(iphy->phy);
 		cnt++;
 	}
 
diff --git a/drivers/phy/phy-bcm-ns2-usbdrd.c b/drivers/phy/phy-bcm-ns2-usbdrd.c
index aa6cdf1..05c55cd 100644
--- a/drivers/phy/phy-bcm-ns2-usbdrd.c
+++ b/drivers/phy/phy-bcm-ns2-usbdrd.c
@@ -384,14 +384,16 @@ static int register_extcon_notifier(struct ns2_phy_driver *phy_driver,
 	edev = phy_driver->edev;
 
 	/* Register for device change notification */
-	ret = extcon_register_notifier(edev, EXTCON_USB, &phy_driver->dev_nb);
+	ret = extcon_register_notifier(edev, EXTCON_USB,
+				       &phy_driver->dev_nb);
 	if (ret < 0) {
 		dev_err(dev, "can't register extcon_dev for %s\n", edev->name);
 		return ret;
 	}
 
 	/* Register for host change notification */
-	ret = extcon_register_notifier(edev, EXTCON_USB_HOST, &phy_driver->dev_nb);
+	ret = extcon_register_notifier(edev, EXTCON_USB_HOST,
+				       &phy_driver->host_nb);
 	if (ret < 0) {
 		dev_err(dev, "can't register extcon_dev for %s\n", edev->name);
 		goto err_dev;
@@ -418,9 +420,11 @@ static int register_extcon_notifier(struct ns2_phy_driver *phy_driver,
 	return 0;
 
 err_host:
-	extcon_unregister_notifier(edev, EXTCON_USB_HOST, &phy_driver->dev_nb);
+	ret = extcon_unregister_notifier(edev, EXTCON_USB_HOST,
+					&phy_driver->host_nb);
 err_dev:
-	extcon_unregister_notifier(edev, EXTCON_USB, &phy_driver->dev_nb);
+	ret = extcon_unregister_notifier(edev, EXTCON_USB,
+					&phy_driver->dev_nb);
 	return ret;
 }
 
@@ -428,6 +432,7 @@ static struct phy_ops ops = {
 	.init		= ns2_drd_phy_init,
 	.power_on	= ns2_drd_phy_poweron,
 	.power_off	= ns2_drd_phy_shutdown,
+	.owner		= THIS_MODULE,
 };
 
 static const struct of_device_id ns2_drd_phy_dt_ids[] = {
@@ -435,6 +440,20 @@ static const struct of_device_id ns2_drd_phy_dt_ids[] = {
 	{ }
 };
 
+static int ns2_drd_phy_remove(struct platform_device *pdev)
+{
+	struct ns2_phy_driver *driver = dev_get_drvdata(&pdev->dev);
+
+	if (driver->edev) {
+		extcon_unregister_notifier(driver->edev, EXTCON_USB_HOST,
+					  &driver->host_nb);
+		extcon_unregister_notifier(driver->edev, EXTCON_USB,
+					  &driver->dev_nb);
+	}
+
+	return 0;
+}
+
 static int ns2_drd_phy_probe(struct platform_device *pdev)
 {
 	struct phy_provider *phy_provider;
@@ -456,32 +475,32 @@ static int ns2_drd_phy_probe(struct platform_device *pdev)
 
 	spin_lock_init(&driver->lock);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "icfg");
 	driver->icfgdrd_regs = devm_ioremap_resource(dev, res);
 	if (IS_ERR(driver->icfgdrd_regs))
 		return PTR_ERR(driver->icfgdrd_regs);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "rst-ctrl");
 	driver->idmdrd_rst_ctrl = devm_ioremap_resource(dev, res);
 	if (IS_ERR(driver->idmdrd_rst_ctrl))
 		return PTR_ERR(driver->idmdrd_rst_ctrl);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 2);
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "crmu-ctrl");
 	driver->crmu_usb2_ctrl = devm_ioremap_resource(dev, res);
 	if (IS_ERR(driver->crmu_usb2_ctrl))
 		return PTR_ERR(driver->crmu_usb2_ctrl);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 3);
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "usb2-strap");
 	driver->usb2h_strap_reg = devm_ioremap_resource(dev, res);
 	if (IS_ERR(driver->usb2h_strap_reg))
 		return PTR_ERR(driver->usb2h_strap_reg);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 4);
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "idmdrd");
 	driver->idmdrd_io_ctrl = devm_ioremap_resource(dev, res);
 	if (IS_ERR(driver->idmdrd_io_ctrl))
 		return PTR_ERR(driver->idmdrd_io_ctrl);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 5);
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "apbx-idm");
 	driver->apbx_idm_io_ctrl = devm_ioremap_resource(dev, res);
 	if (IS_ERR(driver->apbx_idm_io_ctrl))
 		return PTR_ERR(driver->apbx_idm_io_ctrl);
@@ -494,8 +513,8 @@ static int ns2_drd_phy_probe(struct platform_device *pdev)
 	}
 	driver->vbus_gpiod = devm_gpiod_get(&pdev->dev, "vbus", GPIOD_IN);
 	if (IS_ERR(driver->vbus_gpiod)) {
-		dev_err(dev, "failed to get ID GPIO\n");
-		return PTR_ERR(driver->id_gpiod);
+		dev_err(dev, "failed to get VBUS GPIO\n");
+		return PTR_ERR(driver->vbus_gpiod);
 	}
 
 	driver->edev = devm_extcon_dev_allocate(dev, usb_extcon_cable);
@@ -594,6 +613,7 @@ MODULE_DEVICE_TABLE(of, ns2_drd_phy_dt_ids);
 
 static struct platform_driver ns2_drd_phy_driver = {
 	.probe = ns2_drd_phy_probe,
+	.remove = ns2_drd_phy_remove,
 	.driver = {
 		.name = "bcm-ns2-usbphy",
 		.of_match_table = of_match_ptr(ns2_drd_phy_dt_ids),
diff --git a/drivers/usb/core/hcd.c b/drivers/usb/core/hcd.c
index 7d2c292..751cedd 100644
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@ -581,8 +581,6 @@ static int rh_call_control (struct usb_hcd *hcd, struct urb *urb)
 		case USB_DT_DEVICE << 8:
 			switch (hcd->speed) {
 			case HCD_USB31:
-				bufp = usb31_rh_dev_descriptor;
-				break;
 			case HCD_USB3:
 				bufp = usb3_rh_dev_descriptor;
 				break;
@@ -2715,21 +2713,9 @@ static void usb_put_invalidate_rhdev(struct usb_hcd *hcd)
 	usb_put_dev(rhdev);
 }
 
-/**
- * usb_add_hcd - finish generic HCD structure initialization and register
- * @hcd: the usb_hcd structure to initialize
- * @irqnum: Interrupt line to allocate
- * @irqflags: Interrupt type flags
- *
- * Finish the remaining parts of generic HCD initialization: allocate the
- * buffers of consistent memory, register the bus, request the IRQ line,
- * and call the driver's reset() and start() routines.
- */
-int usb_add_hcd(struct usb_hcd *hcd,
-		unsigned int irqnum, unsigned long irqflags)
+int usb_hcd_phy_init(struct usb_hcd *hcd)
 {
-	int retval;
-	struct usb_device *rhdev;
+	int retval = 0;
 
 	if (IS_ENABLED(CONFIG_USB_PHY) && !hcd->usb_phy) {
 		struct usb_phy *phy = usb_get_phy_dev(hcd->self.controller, 0);
@@ -2755,23 +2741,67 @@ int usb_add_hcd(struct usb_hcd *hcd,
 		if (IS_ERR(phy)) {
 			retval = PTR_ERR(phy);
 			if (retval == -EPROBE_DEFER)
-				goto err_phy;
+				return retval;
 		} else {
 			retval = phy_init(phy);
 			if (retval) {
 				phy_put(phy);
-				goto err_phy;
+				return retval;
 			}
 			retval = phy_power_on(phy);
 			if (retval) {
 				phy_exit(phy);
 				phy_put(phy);
-				goto err_phy;
+				return retval;
 			}
 			hcd->phy = phy;
 			hcd->remove_phy = 1;
 		}
 	}
+	return 0;
+}
+EXPORT_SYMBOL_GPL(usb_hcd_phy_init);
+
+
+void usb_hcd_phy_exit(struct usb_hcd *hcd)
+{
+	if (IS_ENABLED(CONFIG_GENERIC_PHY) && hcd->remove_phy && hcd->phy) {
+		phy_power_off(hcd->phy);
+		phy_exit(hcd->phy);
+		phy_put(hcd->phy);
+		hcd->phy = NULL;
+	}
+	if (hcd->remove_phy && hcd->usb_phy) {
+		usb_phy_shutdown(hcd->usb_phy);
+		usb_put_phy(hcd->usb_phy);
+		hcd->usb_phy = NULL;
+	}
+}
+EXPORT_SYMBOL_GPL(usb_hcd_phy_exit);
+
+
+/**
+ * usb_add_hcd - finish generic HCD structure initialization and register
+ * @hcd: the usb_hcd structure to initialize
+ * @irqnum: Interrupt line to allocate
+ * @irqflags: Interrupt type flags
+ *
+ * Finish the remaining parts of generic HCD initialization: allocate the
+ * buffers of consistent memory, register the bus, request the IRQ line,
+ * and call the driver's reset() and start() routines.
+ */
+int usb_add_hcd(struct usb_hcd *hcd,
+		unsigned int irqnum, unsigned long irqflags)
+{
+	int retval;
+	struct usb_device *rhdev;
+
+	retval = usb_hcd_phy_init(hcd);
+	if (retval != 0) {
+		dev_err(hcd->self.controller,
+			"%s: phy init failed\n", __func__);
+		goto err_phy;
+	}
 
 	dev_info(hcd->self.controller, "%s\n", hcd->product_desc);
 
@@ -2827,10 +2857,8 @@ int usb_add_hcd(struct usb_hcd *hcd,
 		rhdev->speed = USB_SPEED_WIRELESS;
 		break;
 	case HCD_USB3:
-		rhdev->speed = USB_SPEED_SUPER;
-		break;
 	case HCD_USB31:
-		rhdev->speed = USB_SPEED_SUPER_PLUS;
+		rhdev->speed = USB_SPEED_SUPER;
 		break;
 	default:
 		retval = -EINVAL;
@@ -3021,17 +3049,7 @@ void usb_remove_hcd(struct usb_hcd *hcd)
 	usb_deregister_bus(&hcd->self);
 	hcd_buffer_destroy(hcd);
 
-	if (IS_ENABLED(CONFIG_GENERIC_PHY) && hcd->remove_phy && hcd->phy) {
-		phy_power_off(hcd->phy);
-		phy_exit(hcd->phy);
-		phy_put(hcd->phy);
-		hcd->phy = NULL;
-	}
-	if (hcd->remove_phy && hcd->usb_phy) {
-		usb_phy_shutdown(hcd->usb_phy);
-		usb_put_phy(hcd->usb_phy);
-		hcd->usb_phy = NULL;
-	}
+	usb_hcd_phy_exit(hcd);
 
 	usb_put_invalidate_rhdev(hcd);
 }
diff --git a/drivers/usb/host/xhci-plat.c b/drivers/usb/host/xhci-plat.c
index a66f6e2..84aaf5e 100644
--- a/drivers/usb/host/xhci-plat.c
+++ b/drivers/usb/host/xhci-plat.c
@@ -303,6 +303,7 @@ static int xhci_plat_suspend(struct device *dev)
 {
 	struct usb_hcd	*hcd = dev_get_drvdata(dev);
 	struct xhci_hcd	*xhci = hcd_to_xhci(hcd);
+	int retval;
 
 	/*
 	 * xhci_suspend() needs `do_wakeup` to know whether host is allowed
@@ -312,7 +313,14 @@ static int xhci_plat_suspend(struct device *dev)
 	 * reconsider this when xhci_plat_suspend enlarges its scope, e.g.,
 	 * also applies to runtime suspend.
 	 */
-	return xhci_suspend(xhci, device_may_wakeup(dev));
+	retval = xhci_suspend(xhci, device_may_wakeup(dev));
+	if (retval)
+		return retval;
+
+	usb_hcd_phy_exit(xhci->shared_hcd);
+	usb_hcd_phy_exit(hcd);
+
+	return 0;
 }
 
 static int xhci_plat_resume(struct device *dev)
@@ -320,6 +328,9 @@ static int xhci_plat_resume(struct device *dev)
 	struct usb_hcd	*hcd = dev_get_drvdata(dev);
 	struct xhci_hcd	*xhci = hcd_to_xhci(hcd);
 
+	usb_hcd_phy_init(hcd);
+	usb_hcd_phy_init(xhci->shared_hcd);
+
 	return xhci_resume(xhci, 0);
 }
 
diff --git a/include/linux/usb/hcd.h b/include/linux/usb/hcd.h
index 66fc137..e594e08 100644
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@ -445,6 +445,8 @@ extern struct usb_hcd *usb_create_shared_hcd(const struct hc_driver *driver,
 extern struct usb_hcd *usb_get_hcd(struct usb_hcd *hcd);
 extern void usb_put_hcd(struct usb_hcd *hcd);
 extern int usb_hcd_is_primary_hcd(struct usb_hcd *hcd);
+extern int usb_hcd_phy_init(struct usb_hcd *hcd);
+extern void usb_hcd_phy_exit(struct usb_hcd *hcd);
 extern int usb_add_hcd(struct usb_hcd *hcd,
 		unsigned int irqnum, unsigned long irqflags);
 extern void usb_remove_hcd(struct usb_hcd *hcd);
-- 
1.7.5.4

