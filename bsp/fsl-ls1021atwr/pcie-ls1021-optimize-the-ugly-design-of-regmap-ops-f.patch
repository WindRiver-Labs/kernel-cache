From 226a103c29bb6ca006572e4b5ad3522291c3bdff Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 15 Aug 2017 14:11:51 +0800
Subject: [PATCH 2/2] pcie: ls1021: optimize the ugly design of regmap ops for every pci r/w operations

In pci_bus_read_config_word, most arches take the simple registers r/w ops to
keep the high efficiency, and obviously we should not use raw_rt_spin_lock to
workaround the issue in this case. So this patch is to fix this issue by using
a link status register.

BUG: sleeping function called from invalid context at kernel/locking/rtmutex.c:917
in_atomic(): 1, irqs_disabled(): 128, pid: 302, name: systemd-udevd
Preemption disabled at:[<  (null)>]   (null)

CPU: 0 PID: 302 Comm: systemd-udevd Not tainted 4.1.21-rt13-WR8.0.0.0_preempt-rt #1
Hardware name: Freescale LS1021A
[<8001b420>] (unwind_backtrace) from [<8001476c>] (show_stack+0x20/0x24)
[<8001476c>] (show_stack) from [<807d3f30>] (dump_stack+0x94/0xac)
[<807d3f30>] (dump_stack) from [<80056540>] (___might_sleep+0x144/0x1c4)
[<80056540>] (___might_sleep) from [<807d96f0>] (rt_spin_lock+0x2c/0x78)
[<807d96f0>] (rt_spin_lock) from [<8047b228>] (regmap_lock_spinlock+0x24/0x30)
[<8047b228>] (regmap_lock_spinlock) from [<8047cc5c>] (regmap_read+0x40/0x70)
[<8047cc5c>] (regmap_read) from [<80404008>] (ls1021_pcie_link_up+0x40/0x5c)
[<80404008>] (ls1021_pcie_link_up) from [<80402a38>] (dw_pcie_rd_conf+0x58/0x1a4)
[<80402a38>] (dw_pcie_rd_conf) from [<803e472c>] (pci_bus_read_config_word+0x78/0xa0)
[<803e472c>] (pci_bus_read_config_word) from [<803ee480>] (pci_enable_device_flags+0x118/0x128)
[<803ee480>] (pci_enable_device_flags) from [<803ee4ec>] (pci_enable_device+0x1c/0x20)
[<803ee4ec>] (pci_enable_device) from [<7f0b7608>] (iwl_trans_pcie_alloc+0x11c/0x668 [iwlwifi])
[<7f0b7608>] (iwl_trans_pcie_alloc [iwlwifi]) from [<7f0aea28>] (iwl_pci_probe+0x24/0xfc [iwlwifi])
[<7f0aea28>] (iwl_pci_probe [iwlwifi]) from [<803f07b8>] (pci_device_probe+0x98/0xfc)
[<803f07b8>] (pci_device_probe) from [<8046609c>] (driver_probe_device+0x188/0x2c8)
[<8046609c>] (driver_probe_device) from [<804662cc>] (__driver_attach+0x9c/0xa0)
[<804662cc>] (__driver_attach) from [<8046420c>] (bus_for_each_dev+0x78/0xac)
[<8046420c>] (bus_for_each_dev) from [<80465aa8>] (driver_attach+0x2c/0x30)
[<80465aa8>] (driver_attach) from [<8046570c>] (bus_add_driver+0x15c/0x204)
[<8046570c>] (bus_add_driver) from [<80466d30>] (driver_register+0x88/0x108)
[<80466d30>] (driver_register) from [<803ef538>] (__pci_register_driver+0x7c/0x80)
[<803ef538>] (__pci_register_driver) from [<7f0aeb30>] (iwl_pci_register_driver+0x30/0x50 [iwlwifi])
[<7f0aeb30>] (iwl_pci_register_driver [iwlwifi]) from [<7f0c407c>] (iwl_drv_init+0x7c/0x80 [iwlwifi])
[<7f0c407c>] (iwl_drv_init [iwlwifi]) from [<80009780>] (do_one_initcall+0x9c/0x1e4)
[<80009780>] (do_one_initcall) from [<807d206c>] (do_init_module+0x70/0x1c0)
[<807d206c>] (do_init_module) from [<800b1174>] (load_module+0x1910/0x206c)
[<800b1174>] (load_module) from [<800b1acc>] (SyS_finit_module+0x90/0xa0)
[<800b1acc>] (SyS_finit_module) from [<8000fd00>] (ret_fast_syscall+0x0/0x3c)

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/pci/host/pci-layerscape.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/drivers/pci/host/pci-layerscape.c b/drivers/pci/host/pci-layerscape.c
index 7a51f53..8f02cd0 100644
--- a/drivers/pci/host/pci-layerscape.c
+++ b/drivers/pci/host/pci-layerscape.c
@@ -43,6 +43,8 @@
 #define PCIE_ENABLE_CS2		0x80000000 /* For PCIe with SR-IOV */
 
 /* PEX Internal Configuration Registers */
+#define PCIE_LINK_STATUS	0x82 /* PCI Express Link Status Register */
+#define AUTO_BW_STATUS		0xc000 /* Auto Bandwidth Management status */
 #define PCIE_STRFMR1		0x71c /* Symbol Timer & Filter Mask Register1 */
 #define PCIE_DBI_RO_WR_EN	0x8bc /* DBI Read-Only Write Enable Register */
 #define PCIE_ABSERR		0x8d0 /* Bridge Slave Error Response Register */
@@ -221,6 +223,12 @@ static int ls1021_pcie_link_up(struct pcie_port *pp)
 	if (!pcie->scfg)
 		return 0;
 
+#ifdef CONFIG_SOC_LS1021A
+	/* Avoid regmap ops for every pci r/w operation */
+	if (ioread16(pcie->dbi + PCIE_LINK_STATUS) & AUTO_BW_STATUS)
+		return 1;
+#endif
+
 	regmap_read(pcie->scfg, SCFG_PEXMSCPORTSR(pcie->index), &state);
 	state = (state >> LTSSM_STATE_SHIFT) & LTSSM_STATE_MASK;
 
-- 
2.9.3

