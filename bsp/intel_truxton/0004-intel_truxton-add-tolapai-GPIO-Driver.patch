From 4286934546a4eefc3e9dc75f4b514f15c7f0070f Mon Sep 17 00:00:00 2001
From: Li Wang <li.wang@windriver.com>
Date: Thu, 18 Dec 2008 16:11:59 +0800
Subject: [PATCH] intel_truxton: add tolapai GPIO Driver

This is a standard gpio driver structure used in linux2.6.27. Every GPIO[n]
has different property, such as only output, only input, etc. Please read the
tolapai datasheet in detail. Use the follow kernel function to operate the
driver:

int gpio_request(unsigned gpio, const char *label);
void gpio_free(unsigned gpio);
int gpio_direction_input(unsigned gpio);
int gpio_direction_output(unsigned gpio, int value);
int gpio_get_value(unsigned gpio);
void gpio_set_value(unsigned gpio, int value);

Signed-off-by: Li Wang <li.wang@windriver.com>
---
 drivers/gpio/Kconfig        |    7 ++
 drivers/gpio/Makefile       |    1 +
 drivers/gpio/tolapai_gpio.c |  158 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 166 insertions(+), 0 deletions(-)
 create mode 100644 drivers/gpio/tolapai_gpio.c

diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index 293b4a7..a10bbe2 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -167,4 +167,11 @@ config GPIO_MCP23S08
 	  SPI driver for Microchip MCP23S08 I/O expander.  This provides
 	  a GPIO interface supporting inputs and outputs.
 
+config TOLAPAI_GPIO
+	tristate "Tolapai GPIO Support"
+	depends on X86 && PCI
+	---help---
+	  The Tolapai GPIO driver provides a interface to access thg GPIO
+	  registers.
+
 endif
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index 6aafdeb..2a4d88c 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -11,3 +11,4 @@ obj-$(CONFIG_GPIO_PCA953X)	+= pca953x.o
 obj-$(CONFIG_GPIO_PCF857X)	+= pcf857x.o
 obj-$(CONFIG_GPIO_TWL4030)	+= twl4030-gpio.o
 obj-$(CONFIG_GPIO_BT8XX)	+= bt8xxgpio.o
+obj-$(CONFIG_TOLAPAI_GPIO)	+= tolapai_gpio.o
diff --git a/drivers/gpio/tolapai_gpio.c b/drivers/gpio/tolapai_gpio.c
new file mode 100644
index 0000000..97282de
--- /dev/null
+++ b/drivers/gpio/tolapai_gpio.c
@@ -0,0 +1,158 @@
+/*
+ * Author:      LiWang <li.wang@windriver.com>
+ *
+ * Abstract:    This module supports Intel Tolapai Driver.
+ *            All of the driver functions are provided in this file.
+ *
+ * Copyright(c) 2008 Windriver Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ * The full GNU General Public License is included in this distribution
+ * in the file called LICENSE.GPL.
+ *
+ * Contact Information:
+ * Windriver Corporation
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/gpio.h>
+
+#define DRVNAME "tolapai_gpio"
+#define GPIO_BAR_OFFSET	0x48
+
+#define GPIO_USE_SEL	0
+#define GP_IO_SEL	1
+#define GP_LVL		2
+static u8 gpio_reg[2][3] = {{0x00, 0x04, 0x0c}, {0x30, 0x34, 0x38} };
+static u32 tolapai_gpio_membase;
+int get_regbit(int regtype, unsigned offset)
+{
+	return !!(inl(tolapai_gpio_membase+gpio_reg[offset/32][regtype]) &
+		(1 << (offset%32)));
+}
+void set_regbit(int regtype, unsigned offset, int value)
+{
+	u32 tmp1, tmp2, tmp3;
+
+	tmp1 = tolapai_gpio_membase+gpio_reg[offset/32][regtype];
+	tmp2 = inl(tmp1);
+	tmp3 = 1<<(offset%32);
+	if (value)
+		outl((tmp2|tmp3), tmp1);
+	else
+		outl((tmp2&(~tmp3)), tmp1);
+}
+
+static DEFINE_MUTEX(tolapai_gpio_lock);
+
+static int tolapai_request(struct gpio_chip *chip, unsigned offset)
+{
+	mutex_lock(&tolapai_gpio_lock);
+	set_regbit(GPIO_USE_SEL, offset, 1);
+	mutex_unlock(&tolapai_gpio_lock);
+	return 0;
+}
+static void tolapai_free(struct gpio_chip *chip, unsigned offset)
+{
+	mutex_lock(&tolapai_gpio_lock);
+	set_regbit(GPIO_USE_SEL, offset, 0);
+	mutex_unlock(&tolapai_gpio_lock);
+}
+static int tolapai_gpio_direction_input(struct gpio_chip *chip,
+					unsigned offset)
+{
+	mutex_lock(&tolapai_gpio_lock);
+	set_regbit(GP_IO_SEL, offset, 1);
+	mutex_unlock(&tolapai_gpio_lock);
+	return 0;
+}
+static int tolapai_gpio_get(struct gpio_chip *chip, unsigned offset)
+{
+	int temp;
+	mutex_lock(&tolapai_gpio_lock);
+	temp = get_regbit(GP_LVL, offset);
+	mutex_unlock(&tolapai_gpio_lock);
+	return temp;
+}
+static int tolapai_gpio_direction_output(struct gpio_chip *chip,
+					unsigned offset, int value)
+{
+	mutex_lock(&tolapai_gpio_lock);
+	set_regbit(GP_IO_SEL, offset, 0);
+	set_regbit(GP_LVL, offset, value);
+	mutex_unlock(&tolapai_gpio_lock);
+	return 0;
+}
+static void tolapai_gpio_set(struct gpio_chip *chip, unsigned offset,
+				int value)
+{
+	mutex_lock(&tolapai_gpio_lock);
+	set_regbit(GP_LVL, offset, value);
+	mutex_unlock(&tolapai_gpio_lock);
+}
+
+static struct gpio_chip tolapai_gpio_chip = {
+	.label			 = DRVNAME,
+	.owner			= THIS_MODULE,
+	.request		= tolapai_request,
+	.free			= tolapai_free,
+	.direction_input	= tolapai_gpio_direction_input,
+	.get			= tolapai_gpio_get,
+	.direction_output	= tolapai_gpio_direction_output,
+	.set			= tolapai_gpio_set,
+	.base			= 0,
+	.ngpio			= 64,
+	.can_sleep		= 0,
+};
+
+static int __init tolapai_gpio_init(void)
+{
+	struct pci_dev *lpc_pci;
+	int err;
+
+	lpc_pci = pci_get_device(PCI_VENDOR_ID_INTEL,
+					PCI_DEVICE_ID_INTEL_TOLAPAI_0, NULL);
+	if (!lpc_pci) {
+		printk(KERN_ERR"Could not find pci device(%s)\n", DRVNAME);
+		return -ENODEV;
+	}
+
+	pci_read_config_dword(lpc_pci, GPIO_BAR_OFFSET, &tolapai_gpio_membase);
+	tolapai_gpio_membase -= 1;
+
+	pci_dev_put(lpc_pci);
+
+	err = gpiochip_add(&tolapai_gpio_chip);
+	if (err < 0)
+		return err;
+
+	printk(KERN_INFO"tolapai_gpio_init(%x)\n", tolapai_gpio_membase);
+	return 0;
+}
+
+static void __exit tolapai_gpio_exit(void)
+{
+	int err;
+	err = gpiochip_remove(&tolapai_gpio_chip);
+
+	printk(KERN_INFO"tolapai_gpio_exit(%d)\n", err);
+}
+
+module_init(tolapai_gpio_init);
+module_exit(tolapai_gpio_exit);
+
+MODULE_AUTHOR("LiWang");
+MODULE_DESCRIPTION("WINDRIVER: TOLAPAI GPIO DRIVER");
+MODULE_LICENSE("GPL");
-- 
1.6.0.2.GIT

