From 0bb9ece56316620104590d980418f5e38f91c4ec Mon Sep 17 00:00:00 2001
From: Mehul <vmehul@netlogicmicro.com>
Date: Tue, 5 Apr 2011 14:48:04 +0530
Subject: [PATCH 250/761] Added CONFIG_NLM_NET_OPTS config option to enable
 unaligned copy in fastpath (network) for small size
 data.

Based on Broadcom SDK 2.3.

Signed-off-by: Mehul <vmehul@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/Kconfig |    5 +++++
 include/net/neighbour.h    |    7 +++++++
 net/ipv4/ip_input.c        |    5 +++++
 3 files changed, 17 insertions(+)

diff --git a/arch/mips/netlogic/Kconfig b/arch/mips/netlogic/Kconfig
index 8f2a1d3..9881de1 100644
--- a/arch/mips/netlogic/Kconfig
+++ b/arch/mips/netlogic/Kconfig
@@ -225,3 +225,8 @@ config NLM_RIXI
        bool "Enable Read Inhibit/ Execute Inhibit support"
        depends on NLM_XLP && 64BIT
        default n
+
+config NLM_NET_OPTS
+       bool "Enable Network Optimization (memcpy/memset)"
+       depends on NLM_XLP && 64BIT
+       default n
diff --git a/include/net/neighbour.h b/include/net/neighbour.h
index 34c996f..35cb5f7 100644
--- a/include/net/neighbour.h
+++ b/include/net/neighbour.h
@@ -340,12 +340,19 @@ static inline int neigh_hh_output(struct hh_cache *hh, struct sk_buff *skb)
 	int hh_len;
 
 	do {
+#ifndef CONFIG_NLM_NET_OPTS
 		int hh_alen;
+#endif
 
 		seq = read_seqbegin(&hh->hh_lock);
 		hh_len = hh->hh_len;
+#ifdef CONFIG_NLM_NET_OPTS
+		*(uint64_t *)(unsigned long)(skb->data - 16) = *(uint64_t *)hh->hh_data;
+		*(uint64_t *)(unsigned long)(skb->data - 8) = *(uint64_t *)((unsigned long)hh->hh_data + 8);
+#else
 		hh_alen = HH_DATA_ALIGN(hh_len);
 		memcpy(skb->data - hh_alen, hh->hh_data, hh_alen);
+#endif
 	} while (read_seqretry(&hh->hh_lock, seq));
 
 	skb_push(skb, hh_len);
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index 26eccc5..cc75db9 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -435,8 +435,13 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 		goto drop;
 	}
 
+#ifdef CONFIG_NLM_NET_OPTS
+	*(uint64_t *)(unsigned long)IPCB(skb) = 0;
+	*(uint64_t *)((unsigned long)IPCB(skb)+8) = 0;
+#else
 	/* Remove any debris in the socket control block */
 	memset(IPCB(skb), 0, sizeof(struct inet_skb_parm));
+#endif
 
 	/* Must drop socket now because of tproxy. */
 	skb_orphan(skb);
-- 
1.7.10.4

