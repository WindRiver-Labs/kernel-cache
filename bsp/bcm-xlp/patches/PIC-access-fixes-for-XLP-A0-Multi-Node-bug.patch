From fbbafe1982c2ec1495c825cf7d0d98af22369760 Mon Sep 17 00:00:00 2001
From: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Date: Fri, 8 Oct 2010 20:21:43 -0700
Subject: [PATCH 156/565] PIC access fixes for XLP A0 Multi-Node bug

PIC access fixes for XLP A0 Multi-Node bug.

Based on Broadcom SDK 2.3.

Signed-off-by: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/irq.c  | 11 ++++++-----
 arch/mips/netlogic/xlp/smp.c  | 11 +++++++++++
 arch/mips/netlogic/xlp/time.c |  6 +++---
 3 files changed, 20 insertions(+), 8 deletions(-)

diff --git a/arch/mips/netlogic/xlp/irq.c b/arch/mips/netlogic/xlp/irq.c
index 7dd1fb4..11c689e 100644
--- a/arch/mips/netlogic/xlp/irq.c
+++ b/arch/mips/netlogic/xlp/irq.c
@@ -67,7 +67,7 @@ spinlock_t nlm_common_pic_lock = SPIN_LOCK_UNLOCKED;
 
 static unsigned int pic_startup(unsigned int irq)
 {
-	pic_reg_t *mmio = (pic_reg_t *) XLP_IO_PIC_OFFSET;
+	pic_reg_t *mmio = nlm_hal_pic_offset();
 	unsigned long flags;
 	nlm_reg_t reg;
 	unsigned long irt;
@@ -97,7 +97,7 @@ static unsigned int pic_startup(unsigned int irq)
 
 static void pic_unmask(unsigned int irq)
 {
-	pic_reg_t *mmio = (pic_reg_t *) XLP_IO_PIC_OFFSET;
+	pic_reg_t *mmio = nlm_hal_pic_offset();
 	unsigned long flags;
 	nlm_reg_t reg;
 	unsigned long irt;
@@ -178,7 +178,7 @@ static void pic_end(unsigned int irq)
 
 static void pic_shutdown(unsigned int irq)
 {
-	pic_reg_t *mmio = (pic_reg_t *) XLP_IO_PIC_OFFSET;
+	pic_reg_t *mmio = nlm_hal_pic_offset();
 	unsigned long flags;
 	nlm_reg_t reg;
 	unsigned long irt;
@@ -254,8 +254,9 @@ static int rsvd_pic_handler_2(unsigned int irq, const struct cpumask *mask)
 {
 	if(irq < PIC_IRQ_BASE)
 		return -1;
-  dbg_msg("handler called for a reserved irq (%d)\n", irq);
-  return 0;
+
+	dbg_msg("handler called for a reserved irq (%d)\n", irq);
+	return 0;
 }
 
 struct irq_chip nlm_common_rsvd_pic = {
diff --git a/arch/mips/netlogic/xlp/smp.c b/arch/mips/netlogic/xlp/smp.c
index acc3cf1..2acce0d 100644
--- a/arch/mips/netlogic/xlp/smp.c
+++ b/arch/mips/netlogic/xlp/smp.c
@@ -88,6 +88,7 @@ void nlm_send_ipi_mask(const struct cpumask * mask, unsigned int action)
 	}
 }
 
+extern void nlm_common_timer_setup(void);
 /*
  * Code to run on secondary just after probing the CPU
  */
@@ -97,6 +98,16 @@ static void __cpuinit nlm_init_secondary(void)
     nlm_smp_irq_init();
 
     enable_msgconfig_int();
+
+    /* Workaround for XLP A0 Multi-Node bug */
+    {
+	    int cpu = hard_smp_processor_id();
+
+	    if ( (cpu % 32) == 0) {
+		    /* If this cpu@0 of any of the nodes, initialize PIC */
+		    nlm_common_timer_setup();
+	    }
+    }
 }
 
 void nlm_smp_finish(void)
diff --git a/arch/mips/netlogic/xlp/time.c b/arch/mips/netlogic/xlp/time.c
index 762c134..1c60cf1 100644
--- a/arch/mips/netlogic/xlp/time.c
+++ b/arch/mips/netlogic/xlp/time.c
@@ -74,7 +74,7 @@ void nlm_common_timer_interrupt(struct pt_regs *regs, int irq)
 	int cpu = hard_smp_processor_id();
 
 #ifdef CONFIG_NLM_WATCHDOG
-        pic_reg_t *mmio = (pic_reg_t *) XLP_IO_PIC_OFFSET;
+        pic_reg_t *mmio = nlm_hal_pic_offset();
 
 	/* ack the watchdog */
 	/* Need to choose (?) the right heartbeat reg (0/1) and right chunk */
@@ -144,7 +144,7 @@ void nlm_common_timer_interrupt(struct pt_regs *regs, int irq)
 cycle_t xlr_hpt_read(void)
 {
 	uint32_t counter;
-	pic_reg_t *mmio = (pic_reg_t *) XLP_IO_PIC_OFFSET;
+	pic_reg_t *mmio = nlm_hal_pic_offset();
 	counter = (uint32_t) nlm_hal_read_pic_reg(mmio, PIC_TIMER_6_COUNTER);
 	return (cycle_t)(PIC_FREE_RUNNING_TIMER_MAX_VAL - counter);
 }
@@ -157,7 +157,7 @@ int read_current_timer(unsigned long *timer_val)
 
 void nlm_common_timer_setup(void)
 {
-        pic_reg_t *mmio = (pic_reg_t *) XLP_IO_PIC_OFFSET;
+        pic_reg_t *mmio = nlm_hal_pic_offset();
         unsigned long flags = 0;
 
         spin_lock_irqsave(&nlm_common_pic_lock, flags);
-- 
1.8.4.93.g57e4c17

