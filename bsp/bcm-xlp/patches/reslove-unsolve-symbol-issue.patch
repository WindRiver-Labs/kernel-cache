From d18e26f430a8e66e3fff5703d717331c735ef972 Mon Sep 17 00:00:00 2001
From: henry shao <hshao@netlogicmicro.com>
Date: Fri, 21 May 2010 16:23:53 -0700
Subject: [PATCH 018/565] reslove unsolve symbol issue

reslove unsolve symbol issue when compiled use nlm_xlr_defconfig.

Based on Broadcom SDK 2.3.

Signed-off-by: henry shao <hshao@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/common/cpu_proc.c | 10 +++++-----
 arch/mips/netlogic/xlp/on_chip.c     | 18 +++++++++---------
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/arch/mips/netlogic/common/cpu_proc.c b/arch/mips/netlogic/common/cpu_proc.c
index 6ef43ea..2e83e7d 100644
--- a/arch/mips/netlogic/common/cpu_proc.c
+++ b/arch/mips/netlogic/common/cpu_proc.c
@@ -57,7 +57,7 @@ __u64 xlr_cp2_exceptions[32];
 extern unsigned long long nlm_common_tlb_stats[];
 
 
-void netlogic_cpu_stat_update_rdhwr(void)
+void nlm_cpu_stat_update_rdhwr(void)
 {
 	int cpu = 0;
 
@@ -69,7 +69,7 @@ void netlogic_cpu_stat_update_rdhwr(void)
 	preempt_enable();
 }
 
-void netlogic_cpu_stat_update_fp(void)
+void nlm_cpu_stat_update_fp(void)
 {
 	int cpu = 0;
 
@@ -81,7 +81,7 @@ void netlogic_cpu_stat_update_fp(void)
 	preempt_enable();
 }
 
-void netlogic_cpu_stat_update_msgring_int(void)
+void nlm_cpu_stat_update_msgring_int(void)
 {
 	int cpu = 0;
 
@@ -93,7 +93,7 @@ void netlogic_cpu_stat_update_msgring_int(void)
 	preempt_enable();
 }
 
-void netlogic_cpu_stat_update_msgring_cycles(__u32 cycles)
+void nlm_cpu_stat_update_msgring_cycles(__u32 cycles)
 {
 	int cpu = 0;
 
@@ -105,7 +105,7 @@ void netlogic_cpu_stat_update_msgring_cycles(__u32 cycles)
 	preempt_enable();
 }
 
-void netlogic_cpu_stat_update_msgring_pic_int(void)
+void nlm_cpu_stat_update_msgring_pic_int(void)
 {
 	int cpu = 0;
 
diff --git a/arch/mips/netlogic/xlp/on_chip.c b/arch/mips/netlogic/xlp/on_chip.c
index f1823ed..ab6af26 100644
--- a/arch/mips/netlogic/xlp/on_chip.c
+++ b/arch/mips/netlogic/xlp/on_chip.c
@@ -470,9 +470,9 @@ __setup("xlr_msgring_thread_mask=", xlr_msgring_thread_mask_setup);
 __setup("xlr_complete_msgring_thread_mask=",
 	xlr_complete_msgring_thread_mask_setup);
 
-extern void netlogic_cpu_stat_update_msgring_int(void);
-extern void netlogic_cpu_stat_update_msgring_cycles(__u32 cycles);
-extern void netlogic_cpu_stat_update_msgring_pic_int(void);
+extern void nlm_cpu_stat_update_msgring_int(void);
+extern void nlm_cpu_stat_update_msgring_cycles(__u32 cycles);
+extern void nlm_cpu_stat_update_msgring_pic_int(void);
 
 void msgring_process_rx_msgs(int start_bucket, int end_bucket,
 			     __u32 pop_bucket_mask)
@@ -528,9 +528,9 @@ __u64 xlr_cp2_exceptions[32];
 struct user_mac_data *user_mac;
 struct user_mac_kernal_data user_mac_krnl_data;
 struct xlr_user_mac_config xlr_user_mac;
-void netlogic_cpu_stat_update_msgring_int(void) { }
-void netlogic_cpu_stat_update_msgring_cycles(__u32 cycles) { }
-void netlogic_cpu_stat_update_msgring_pic_int(void) { }
+void nlm_cpu_stat_update_msgring_int(void) { }
+void nlm_cpu_stat_update_msgring_cycles(__u32 cycles) { }
+void nlm_cpu_stat_update_msgring_pic_int(void) { }
 #endif /* CONFIG_NLMCOMMON_MAC */
 
 __u32 msgrng_msg_cycles = 0;
@@ -543,9 +543,9 @@ void nlm_common_msgring_int_handler(unsigned int irq, struct pt_regs *regs)
 	if (irq == IRQ_MSGRING) {
 		/* normal message ring interrupt */
 		xlr_inc_counter(MSGRNG_INT);
-		netlogic_cpu_stat_update_msgring_int();
+		nlm_cpu_stat_update_msgring_int();
 	} else {
-		netlogic_cpu_stat_update_msgring_pic_int();
+		nlm_cpu_stat_update_msgring_pic_int();
 	}
 
 	irq_enter();
@@ -561,7 +561,7 @@ void nlm_common_msgring_int_handler(unsigned int irq, struct pt_regs *regs)
 	core = 0;
 	msgring_process_rx_msgs(pop_bucket_start[core], pop_bucket_end[core], pop_bucket_mask[core]);
 
-	netlogic_cpu_stat_update_msgring_cycles(read_c0_count() - cycles);
+	nlm_cpu_stat_update_msgring_cycles(read_c0_count() - cycles);
 
 	msgrng_flags_restore(mflags);
 
-- 
1.8.4.93.g57e4c17

