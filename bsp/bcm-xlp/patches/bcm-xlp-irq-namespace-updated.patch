From bbfe5a532c59113fb0c1ded4470fb78da8c223d0 Mon Sep 17 00:00:00 2001
From: Zi Shen Lim <zlim@netlogicmicro.com>
Date: Fri, 30 Sep 2011 14:16:20 -0700
Subject: [PATCH 268/565] bcm-xlp: irq: namespace updated

irq: namespace updated in mainline

Based on Broadcom SDK 2.3.

Signed-off-by: Zi Shen Lim <zlim@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/irq.c | 65 ++++++++++++++++++++++----------------------
 1 file changed, 33 insertions(+), 32 deletions(-)

diff --git a/arch/mips/netlogic/xlp/irq.c b/arch/mips/netlogic/xlp/irq.c
index 1fa6dac..44943a0 100644
--- a/arch/mips/netlogic/xlp/irq.c
+++ b/arch/mips/netlogic/xlp/irq.c
@@ -500,8 +500,9 @@ static void __nlm_irq_mask(unsigned int irq)
  *
  * @irq : IRQ number
  */
-static void nlm_irq_mask(unsigned int irq)
+static void nlm_irq_mask(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	//unsigned long flags;
 
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
@@ -538,8 +539,9 @@ static void __nlm_irq_unmask(int irq)
  *
  * @irq : IRQ number
  */
-static void nlm_irq_unmask(unsigned int irq)
+static void nlm_irq_unmask(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	//unsigned long flags;
 
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
@@ -554,8 +556,9 @@ static void nlm_irq_unmask(unsigned int irq)
 	return;
 }
 
-static void nlm_irq_ack(unsigned int irq)
+static void nlm_irq_ack(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	unsigned long flags;
 
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
@@ -600,9 +603,10 @@ static void nlm_irq_end(unsigned int irq)
  * When an interrupt is started, we force it to be enabled only in cpu0, it can
  * be changed later by calling nlm_irq_set_affinity()
  */
-static unsigned int nlm_irq_startup(unsigned int irq)
+static unsigned int nlm_irq_startup(struct irq_data *d)
 {
 	__label__ __failure;
+	unsigned int irq = d->irq;
 	int ret = 0;
 	unsigned long flags;
 	int idx, rvec;
@@ -663,8 +667,9 @@ __failure:
  * chip->shutdown(). In this function, the rvec bit in every EIMR is cleared if
  * usage falls to zero (in case of shared interrupts)
  */
-static void nlm_irq_shutdown(unsigned int irq)
+static void nlm_irq_shutdown(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	unsigned long flags;
 	int idx, rvec;
 
@@ -714,8 +719,9 @@ static void nlm_irq_shutdown(unsigned int irq)
  * The actual bitmask can be different from the specified bitmask based
  * on the logic of xlp_closest_match_cpumask()
  */
-static int nlm_irq_set_affinity(unsigned int irq, const struct cpumask *mask)
+static int nlm_irq_set_affinity(struct irq_data *d, const struct cpumask *mask, bool force)
 {
+	unsigned int irq = d->irq;
 	unsigned long flags;
 	const struct cpumask *m;
 	struct cpumask n;
@@ -749,8 +755,9 @@ static struct irq_chip nlm_irq_pic = {
 	.irq_set_affinity = nlm_irq_set_affinity
 };
 
-static void rsvd_pic_handler_1_1(unsigned int irq)
+static void rsvd_pic_handler_1(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
 		return;
 	} else if(irq >= XLP_IRQ_MAX) {
@@ -761,20 +768,9 @@ static void rsvd_pic_handler_1_1(unsigned int irq)
 	return;
 }
 
-static void rsvd_pic_handler_1(unsigned int irq)
-{
-	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
-		return;
-	} else if(irq >= XLP_IRQ_MAX) {
-		pr_err("irq = %d. Invalid irq requested\n", irq);
-		return;
-	}
-	pr_err("Requesting a reserved irq (%d)??", irq);
-	return;
-}
-
-static int rsvd_pic_handler_2(unsigned int irq, const struct cpumask *mask)
+static int rsvd_pic_handler_2(struct irq_data *d, const struct cpumask *mask, bool force)
 {
+	unsigned int irq = d->irq;
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
 		return 0;
 	} else if(irq >= XLP_IRQ_MAX) {
@@ -787,7 +783,7 @@ static int rsvd_pic_handler_2(unsigned int irq, const struct cpumask *mask)
 
 struct irq_chip nlm_common_rsvd_pic = {
 	.name = "Netlogic-RSVD-PIC",
-	.irq_unmask = rsvd_pic_handler_1_1,
+	.irq_unmask = rsvd_pic_handler_1,
 	.irq_mask = rsvd_pic_handler_1,
 	.irq_ack = rsvd_pic_handler_1,
 	// .end = rsvd_pic_handler_1, /* deprecated */
@@ -1370,7 +1366,7 @@ int xlp_setup_msi_irq(struct pci_dev *dev, struct msi_desc *desc, int nvec)
 	if (ret < 0) {
 		return max;
 	}
-	set_irq_msi(base_msi, desc);
+	irq_set_msi_desc(base_msi, desc);
 	ret = xlp_msi_compose_msg(dev, desc, base_msi, &msg);
 	if (ret < 0) {
 		return ret;
@@ -1428,7 +1424,7 @@ int xlp_setup_msix_irq(struct pci_dev *dev, struct msi_desc *desc, int nvec)
 	if (idx == XLP_MSIX_PER_SLOT) {
 		return -ENOSPC;
 	}
-	set_irq_msi(base_msix + idx, desc);
+	irq_set_msi_desc(base_msix + idx, desc);
 	ret = xlp_msi_compose_msg(dev, desc, base_msix + idx, &msg);
 	if (ret < 0) {
 		return ret;
@@ -1470,38 +1466,43 @@ int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 EXPORT_SYMBOL(arch_setup_msi_irqs);
 #endif
 
+static inline void irq_desc_set_chip(struct irq_desc *desc, struct irq_chip *chip)
+{
+	irq_desc_get_irq_data(desc)->chip = chip;
+}
+
 void __init init_nlm_common_irqs(void)
 {
 	int i;
 
 	for (i = 0; i < XLP_IRQ_MAX; i++) {	// IRQ : 0 - 167
-		set_irq_chip(i, &nlm_irq_pic);
+		irq_set_chip(i, &nlm_irq_pic);
 	}
 #ifdef CONFIG_PCI_MSI_XLP
 	for (i = XLP_MSI_INDEX_START; i <= XLP_MSI_INDEX_END; i++) {
-		set_irq_chip(i, &nlm_msi_pic);
+		irq_set_chip(i, &nlm_msi_pic);
 	}
 	for (i = XLP_MSIX_INDEX_START; i <= XLP_MSIX_INDEX_END; i++) {
-		set_irq_chip(i, &nlm_msix_pic);
+		irq_set_chip(i, &nlm_msix_pic);
 	}
 #endif
 
 #ifdef CONFIG_REMOTE_DEBUG
-	irq_desc[XLP_IRQ_REMOTE_DEBUG].chip = &nlm_common_rsvd_pic;
-	irq_desc[XLP_IRQ_REMOTE_DEBUG].action = nlm_common_rsvd_action;
+	irq_desc_set_chip(&irq_desc[XLP_IRQ_REMOTE_DEBUG], &nlm_common_rsvd_pic);
+	irq_desc[XLP_IRQ_REMOTE_DEBUG].action = &nlm_common_rsvd_action;
 	xlp_irq_mask |= (1ULL << XLP_IRQ_REMOTE_DEBUG);
 #endif
 
 #ifdef CONFIG_SMP
-	irq_desc[XLP_IRQ_IPI_SMP_FUNCTION].chip = &nlm_common_rsvd_pic;
+	irq_desc_set_chip(&irq_desc[XLP_IRQ_IPI_SMP_FUNCTION], &nlm_common_rsvd_pic);
 	irq_desc[XLP_IRQ_IPI_SMP_FUNCTION].action = &nlm_common_rsvd_action;
 
-	irq_desc[XLP_IRQ_IPI_SMP_RESCHEDULE].chip = &nlm_common_rsvd_pic;
+	irq_desc_set_chip(&irq_desc[XLP_IRQ_IPI_SMP_RESCHEDULE], &nlm_common_rsvd_pic);
 	irq_desc[XLP_IRQ_IPI_SMP_RESCHEDULE].action = &nlm_common_rsvd_action;
 
 #ifdef CONFIG_NLMCOMMON_IP_FLOW_AFFINITY
 	/* PR: New IPI added here for netrx balancing */
-	irq_desc[XLP_IRQ_IPI_NETRX].chip = &nlm_common_rsvd_pic;
+	irq_desc_set_chip(&irq_desc[XLP_IRQ_IPI_NETRX], &nlm_common_rsvd_pic);
 	irq_desc[XLP_IRQ_IPI_NETRX].action = &nlm_common_rsvd_action;
 	xlp_irq_mask |= (1ULL << XLP_IRQ_IPI_NETRX);
 #endif				/* CONFIG_NLMCOMMON_IP_FLOW_AFFINITY */
@@ -1511,7 +1512,7 @@ void __init init_nlm_common_irqs(void)
 #endif
 
 	/* msgring interrupt */
-	irq_desc[XLP_IRQ_MSGRING].chip = &nlm_common_rsvd_pic;
+	irq_desc_set_chip(&irq_desc[XLP_IRQ_MSGRING], &nlm_common_rsvd_pic);
 	irq_desc[XLP_IRQ_MSGRING].action = &nlm_common_rsvd_action;
 	xlp_irq_mask |= (1ULL << XLP_IRQ_MSGRING);
 
-- 
1.8.4.93.g57e4c17

