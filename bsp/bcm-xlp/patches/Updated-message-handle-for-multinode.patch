From 803302e3a8e3d86943cc59fcebc043e0373e103f Mon Sep 17 00:00:00 2001
From: jayanthi <jayanthia@rmicorp.com>
Date: Tue, 24 Jan 2012 22:23:26 +0530
Subject: [PATCH 344/565] Updated message handle for multinode

Updated message handle for multinode

Based on Broadcom SDK 2.3.

Signed-off-by: jayanthi <jayanthia@rmicorp.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/on_chip.c | 136 ++++++++++++++++++++++++---------------
 1 file changed, 85 insertions(+), 51 deletions(-)

diff --git a/arch/mips/netlogic/xlp/on_chip.c b/arch/mips/netlogic/xlp/on_chip.c
index 6fe4b9b..bcc0612 100644
--- a/arch/mips/netlogic/xlp/on_chip.c
+++ b/arch/mips/netlogic/xlp/on_chip.c
@@ -108,45 +108,81 @@ static uint16_t vc_to_handle_map[MAX_VC] = {
 	[305 ... 383] = XLP_MSG_HANDLE_INVALID,
 	[384 ... 391] = XLP_MSG_HANDLE_NAE_0,
 	[392 ... 475] = XLP_MSG_HANDLE_INVALID,
-	[476] 	      = XLP_MSG_HANDLE_NAE_0,
-	[477] 	      = XLP_MSG_HANDLE_NAE_0,
-	[478] 	      = XLP_MSG_HANDLE_NAE_0,
-	[479] 	      = XLP_MSG_HANDLE_NAE_0,
-	[480] 	      = XLP_MSG_HANDLE_NAE_0,
-	[481] 	      = XLP_MSG_HANDLE_NAE_0,
-	[482] 	      = XLP_MSG_HANDLE_NAE_0,
-	[483] 	      = XLP_MSG_HANDLE_NAE_0,
-	[484] 	      = XLP_MSG_HANDLE_NAE_0,
-	[485] 	      = XLP_MSG_HANDLE_NAE_0,
-	[486] 	      = XLP_MSG_HANDLE_NAE_0,
-	[487] 	      = XLP_MSG_HANDLE_NAE_0,
-	[488] 	      = XLP_MSG_HANDLE_NAE_0,
-	[489] 	      = XLP_MSG_HANDLE_NAE_0,
-	[490] 	      = XLP_MSG_HANDLE_NAE_0,
-	[491] 	      = XLP_MSG_HANDLE_NAE_0,
-	[492] 	      = XLP_MSG_HANDLE_NAE_0,
-	[493] 	      = XLP_MSG_HANDLE_NAE_0,
-	[494 ... 999] = XLP_MSG_HANDLE_NAE_0,
-	[1000] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1001] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1002] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1003] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1004] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1005] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1006] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1007] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1008] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1009] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1010] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1011] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1012] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1013] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1014] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1015] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1016] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1017] 	      = XLP_MSG_HANDLE_NAE_0,
-	[1018 ... 1019] = XLP_MSG_HANDLE_NAE_0,
-	[1020 ... 4095] = XLP_MSG_HANDLE_INVALID
+	[476 ... 1019] = XLP_MSG_HANDLE_NAE_0,
+	[1020 ... 1023] = XLP_MSG_HANDLE_INVALID,
+	//NODE-1
+	[1024 ... 1039] = XLP_MSG_HANDLE_CPU0,
+	[1040 ... 1055] = XLP_MSG_HANDLE_CPU1,
+	[1056 ... 1071] = XLP_MSG_HANDLE_CPU2,
+	[1072 ... 1087] = XLP_MSG_HANDLE_CPU3,
+	[1088 ... 1103] = XLP_MSG_HANDLE_CPU4,
+	[1104 ... 1119] = XLP_MSG_HANDLE_CPU5,
+	[1120 ... 1135] = XLP_MSG_HANDLE_CPU6,
+	[1136 ... 1151] = XLP_MSG_HANDLE_CPU7,
+	[1158 ... 1279] = XLP_MSG_HANDLE_INVALID,
+	[1280 ... 1281] = XLP_MSG_HANDLE_PCIE0,
+	[1282 ... 1283] = XLP_MSG_HANDLE_PCIE1,
+	[1284 ... 1285] = XLP_MSG_HANDLE_PCIE2,
+	[1286 ... 1287] = XLP_MSG_HANDLE_PCIE3,
+	[1288 ... 1291] = XLP_MSG_HANDLE_DTRE,
+	[1292 ... 1295] = XLP_MSG_HANDLE_GDX,
+	[1296 ... 1304] = XLP_MSG_HANDLE_RSA_ECC,
+	[1305 ... 1320] = XLP_MSG_HANDLE_CRYPTO,
+	[1321 ... 1328] = XLP_MSG_HANDLE_CMP,
+	[1329 ... 1407] = XLP_MSG_HANDLE_INVALID,
+	[1408 ... 1415] = XLP_MSG_HANDLE_NAE_0,
+	[1416 ... 1499] = XLP_MSG_HANDLE_INVALID,
+	[1500 ... 2043] = XLP_MSG_HANDLE_NAE_0,
+	[2044 ... 2047] = XLP_MSG_HANDLE_INVALID,
+	// NODE-2	
+	[2048 ... 2063] = XLP_MSG_HANDLE_CPU0,
+	[2064 ... 2079] = XLP_MSG_HANDLE_CPU1,
+	[2080 ... 2095] = XLP_MSG_HANDLE_CPU2,
+	[2096 ... 2111] = XLP_MSG_HANDLE_CPU3,
+	[2112 ... 2127] = XLP_MSG_HANDLE_CPU4,
+	[2128 ... 2143] = XLP_MSG_HANDLE_CPU5,
+	[2144 ... 2159] = XLP_MSG_HANDLE_CPU6,
+	[2160 ... 2175] = XLP_MSG_HANDLE_CPU7,
+	[2176 ... 2303] = XLP_MSG_HANDLE_INVALID,
+	[2304 ... 2305] = XLP_MSG_HANDLE_PCIE0,
+	[2306 ... 2307] = XLP_MSG_HANDLE_PCIE1,
+	[2308 ... 2309] = XLP_MSG_HANDLE_PCIE2,
+	[2310 ... 2311] = XLP_MSG_HANDLE_PCIE3,
+	[2312 ... 2315] = XLP_MSG_HANDLE_DTRE,
+	[2316 ... 2319] = XLP_MSG_HANDLE_GDX,
+	[2320 ... 2328] = XLP_MSG_HANDLE_RSA_ECC,
+	[2329 ... 2344] = XLP_MSG_HANDLE_CRYPTO,
+	[2345 ... 2352] = XLP_MSG_HANDLE_CMP, 
+	[2353 ... 2431] = XLP_MSG_HANDLE_INVALID,
+	[2432 ... 2439] = XLP_MSG_HANDLE_NAE_0,
+	[2440 ... 2523] = XLP_MSG_HANDLE_INVALID,
+	[2524 ... 3067] = XLP_MSG_HANDLE_NAE_0,
+	[3068 ... 3071] = XLP_MSG_HANDLE_INVALID,
+
+	// NODE-3
+	[3072 ... 3087] = XLP_MSG_HANDLE_CPU0,
+	[3088 ... 3103] = XLP_MSG_HANDLE_CPU1,
+	[3104 ... 3119] = XLP_MSG_HANDLE_CPU2,
+	[3120 ... 3135] = XLP_MSG_HANDLE_CPU3,
+	[3136 ... 3151] = XLP_MSG_HANDLE_CPU4,
+	[3152 ... 3167] = XLP_MSG_HANDLE_CPU5,
+	[3168 ... 3183] = XLP_MSG_HANDLE_CPU6,
+	[3184 ... 3199] = XLP_MSG_HANDLE_CPU7,
+	[3200 ... 3327] = XLP_MSG_HANDLE_INVALID,
+	[3328 ... 3329] = XLP_MSG_HANDLE_PCIE0,
+	[3330 ... 3331] = XLP_MSG_HANDLE_PCIE1,
+	[3332 ... 3333] = XLP_MSG_HANDLE_PCIE2,
+	[3334 ... 3335] = XLP_MSG_HANDLE_PCIE3,
+	[3336 ... 3339] = XLP_MSG_HANDLE_DTRE,
+	[3340 ... 3343] = XLP_MSG_HANDLE_GDX,
+	[3344 ... 3352] = XLP_MSG_HANDLE_RSA_ECC,
+	[3353 ... 3368] = XLP_MSG_HANDLE_CRYPTO,
+	[3369 ... 3376] = XLP_MSG_HANDLE_CMP,
+	[3377 ... 3455] = XLP_MSG_HANDLE_INVALID,
+	[3456 ... 3463] = XLP_MSG_HANDLE_NAE_0,
+	[3464 ... 3547] = XLP_MSG_HANDLE_INVALID,
+	[3548 ... 4091] = XLP_MSG_HANDLE_NAE_0,
+	[4092 ... 4095] = XLP_MSG_HANDLE_INVALID,
 };
 
 static uint16_t xlp3xx_vc_to_handle_map[MAX_VC] = {
@@ -220,7 +256,7 @@ struct msgstn_handler msg_handler_map[XLP_MSG_HANDLE_MAX] = {
 
 int nlm_xlp_register_vc_handler(int vc, void (*handler)(int vc))
 {
-	int i;
+	int i, node = 0;
 	if(vc < 0 || vc >= NLM_MAX_VC_PER_THREAD) {
 		printk("Invalid VC Passed %d\n", vc);
 		return -1;
@@ -230,7 +266,8 @@ int nlm_xlp_register_vc_handler(int vc, void (*handler)(int vc))
 	for(i=0; i<NR_CPUS; i++){
 		if(!cpu_isset(i, cpu_present_map))
 			continue;
-		nlm_hal_enable_vc_intr(0, i*NLM_MAX_VC_PER_THREAD + vc);
+		node = i / 32;
+		nlm_hal_enable_vc_intr(node, i*NLM_MAX_VC_PER_THREAD + vc);
 	}
 
 	return 0;
@@ -488,25 +525,22 @@ atomic_t nlm_common_counters[NR_CPUS][NLM_MAX_COUNTERS] __cacheline_aligned;
  *********************************************************************/
 void nlm_enable_vc_intr(void)
 {
-	int cpu;
+	int cpu, node;
 	int vc_index = 0;
 	int i = 0;
-	uint32_t cpu_map;
-
-	cpu_map = cpumask_to_uint32(&cpu_present_map);
-
-	for(cpu = 0; cpu < 32; cpu++) {
-		if(!(cpu_map & (1 << cpu)))
-			continue;
 	
+	for(cpu=0; cpu<NR_CPUS; cpu++){
+                if(!cpu_isset(cpu, cpu_present_map))
+                        continue;
+		node = cpu / 32;
 		for(i=0; i<NLM_MAX_VC_PER_THREAD; i++)
 		{
 			vc_index = (i + cpu*NLM_MAX_VC_PER_THREAD) & 0x7f;
 			if(nlm_cpu_vc_mask[cpu] & (1<<i)){
 				/*enable interrupts*/
-				nlm_hal_enable_vc_intr(0, vc_index);
+				nlm_hal_enable_vc_intr(node, vc_index);
 			}else{
-				nlm_hal_disable_vc_intr(0, vc_index);
+				nlm_hal_disable_vc_intr(node, vc_index);
 			}
 		}
 	}
-- 
1.8.4.93.g57e4c17

