From 1b4d9857e56a44c66dce954363f17487e664a4b1 Mon Sep 17 00:00:00 2001
From: Mehul <vmehul@netlogicmicro.com>
Date: Tue, 5 Apr 2011 14:48:04 +0530
Subject: [PATCH 197/565] bcm-xlp: add CONFIG_NLM_NET_OPTS config option

Add CONFIG_NLM_NET_OPTS config option to enable unaligned copy in
fastpath(network) for small size data.
Based on Broadcom SDK 2.3.

Signed-off-by: Mehul <vmehul@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/Kconfig | 5 +++++
 include/net/neighbour.h    | 5 +++++
 net/ipv4/ip_input.c        | 5 +++++
 3 files changed, 15 insertions(+)

diff --git a/arch/mips/netlogic/Kconfig b/arch/mips/netlogic/Kconfig
index 8f2a1d3..9881de1 100644
--- a/arch/mips/netlogic/Kconfig
+++ b/arch/mips/netlogic/Kconfig
@@ -225,3 +225,8 @@ config NLM_RIXI
        bool "Enable Read Inhibit/ Execute Inhibit support"
        depends on NLM_XLP && 64BIT
        default n
+
+config NLM_NET_OPTS
+       bool "Enable Network Optimization (memcpy/memset)"
+       depends on NLM_XLP && 64BIT
+       default n
diff --git a/include/net/neighbour.h b/include/net/neighbour.h
index 7e748ad..faa3a24 100644
--- a/include/net/neighbour.h
+++ b/include/net/neighbour.h
@@ -343,6 +343,10 @@ static inline int neigh_hh_output(const struct hh_cache *hh, struct sk_buff *skb
 	do {
 		seq = read_seqbegin(&hh->hh_lock);
 		hh_len = hh->hh_len;
+#ifdef CONFIG_NLM_NET_OPTS
+		*(uint64_t *)(unsigned long)(skb->data - 16) = *(uint64_t *)hh->hh_data;
+		*(uint64_t *)(unsigned long)(skb->data - 8) = *(uint64_t *)((unsigned long)hh->hh_data + 8);
+#else
 		if (likely(hh_len <= HH_DATA_MOD)) {
 			/* this is inlined by gcc */
 			memcpy(skb->data - HH_DATA_MOD, hh->hh_data, HH_DATA_MOD);
@@ -351,6 +355,7 @@ static inline int neigh_hh_output(const struct hh_cache *hh, struct sk_buff *skb
 
 			memcpy(skb->data - hh_alen, hh->hh_data, hh_alen);
 		}
+#endif
 	} while (read_seqretry(&hh->hh_lock, seq));
 
 	skb_push(skb, hh_len);
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index 15e3e68..df53643 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -436,8 +436,13 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 
 	skb->transport_header = skb->network_header + iph->ihl*4;
 
+#ifdef CONFIG_NLM_NET_OPTS
+	*(uint64_t *)(unsigned long)IPCB(skb) = 0;
+	*(uint64_t *)((unsigned long)IPCB(skb)+8) = 0;
+#else
 	/* Remove any debris in the socket control block */
 	memset(IPCB(skb), 0, sizeof(struct inet_skb_parm));
+#endif
 
 	/* Must drop socket now because of tproxy. */
 	skb_orphan(skb);
-- 
1.8.4.93.g57e4c17

