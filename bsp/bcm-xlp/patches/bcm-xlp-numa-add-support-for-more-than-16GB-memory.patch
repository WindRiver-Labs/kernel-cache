From 87497946ab945df1e24b8bc90045d080b36f066e Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@broadcom.com>
Date: Thu, 31 May 2012 14:17:24 -0700
Subject: [PATCH 536/565] bcm-xlp: numa: add support for more than 16GB memory

numa: add support for more than 16GB memory

  o In case of NUMA, for each node, the first few physical memory
    page is used for numa bookkeeping. These memories must
    be wired as in early booting, no TLB refill handling exists.

Based on Broadcom SDK 2.3.

Signed-off-by: Yonghong Song <ysong@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/mach-netlogic/mmu.h |  1 +
 arch/mips/mm/init.c                       |  1 +
 arch/mips/netlogic/common/memory.c        | 23 ++++++++++++++++++++++-
 arch/mips/netlogic/xlp/numa.c             |  3 +++
 4 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/arch/mips/include/asm/mach-netlogic/mmu.h b/arch/mips/include/asm/mach-netlogic/mmu.h
index 2377955..fe0ed25 100644
--- a/arch/mips/include/asm/mach-netlogic/mmu.h
+++ b/arch/mips/include/asm/mach-netlogic/mmu.h
@@ -78,6 +78,7 @@ extern void __init nlm_numa_bootmem_init(unsigned long);
 #ifdef CONFIG_NLM_16G_MEM_SUPPORT
 extern int map_kernel_addrspace(unsigned long vaddr, unsigned long paddr,
 				unsigned long max_pfn);
+extern void setup_mapped_kernel_pgtable(void);
 
 #define KERNEL_PAGE_ATTR \
 	(_CACHE_CACHABLE_COW |_PAGE_DIRTY |  _PAGE_VALID | _PAGE_GLOBAL)
diff --git a/arch/mips/mm/init.c b/arch/mips/mm/init.c
index 440a9da..3e0eb5f 100644
--- a/arch/mips/mm/init.c
+++ b/arch/mips/mm/init.c
@@ -332,6 +332,7 @@ void __init paging_init(void)
 
 #ifdef CONFIG_NLM_16G_MEM_SUPPORT
 	setup_mapped_kernel_tlbs(FALSE, TRUE);
+	setup_mapped_kernel_pgtable();
 #endif
 
 #ifdef CONFIG_HIGHMEM
diff --git a/arch/mips/netlogic/common/memory.c b/arch/mips/netlogic/common/memory.c
index 385629a..60991d5 100644
--- a/arch/mips/netlogic/common/memory.c
+++ b/arch/mips/netlogic/common/memory.c
@@ -211,7 +211,12 @@ void setup_mapped_kernel_tlbs(int firstpage, int primary_cpu)
 		setup_tlb(&tlb, pagesize);
 	}
 	else {
-		int retval;
+#ifdef CONFIG_NUMA
+		int node;
+		extern struct nlm_node_mem_info node_mem_info[];
+#else
+		extern unsigned long non_dma_start_pfn;
+#endif
 		/*
 		 * the primary cpu reads the memory map and records
 		 * the highest page frame number. Secondary cpus
@@ -274,6 +279,22 @@ void setup_mapped_kernel_tlbs(int firstpage, int primary_cpu)
 			tlb.wired = TRUE;
 			setup_tlb(&tlb, pagesize);
 		}
+#else
+		/* Wire the first non-dma-region entry if it is above the MAX_WIRED_PFN.
+		 * Apparently, kernel tries to grab the memory from there.
+		 */
+		if (non_dma_start_pfn >= MAX_WIRED_PFN) {
+			paddr = PFN_PHYS(non_dma_start_pfn);
+			if (paddr % ( 2 * LARGEST_TLBPAGE_SZ))
+				paddr -= (paddr % (2 * LARGEST_TLBPAGE_SZ));
+
+			vaddr = KERNEL_SEG_START + paddr;
+			tlb.entryHi = vaddr;
+			tlb.entrylo0 = page_entrylo(paddr, attr);
+			tlb.entrylo1 = page_entrylo(paddr + pagesize, attr);
+			tlb.wired = TRUE;
+			setup_tlb(&tlb, pagesize);
+		}
 #endif
 	}
 }
diff --git a/arch/mips/netlogic/xlp/numa.c b/arch/mips/netlogic/xlp/numa.c
index 381974d..8963bf2 100644
--- a/arch/mips/netlogic/xlp/numa.c
+++ b/arch/mips/netlogic/xlp/numa.c
@@ -342,6 +342,9 @@ void __init paging_init(void)
 	unsigned node;
 
 	pagetable_init();
+#ifdef CONFIG_NLM_16G_MEM_SUPPORT
+	setup_mapped_kernel_pgtable();
+#endif
 
 #ifdef CONFIG_ZONE_DMA
 	zones_size[ZONE_DMA] = MAX_DMA_PFN;
-- 
1.8.4.93.g57e4c17

