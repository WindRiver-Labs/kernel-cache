From 110d3c96ec32a40e02f31280200d8ae711bdc834 Mon Sep 17 00:00:00 2001
From: Jayanthi A <jayanthi.annadurai@broadcom.com>
Date: Mon, 14 Jan 2013 17:24:40 -0800
Subject: [PATCH 454/565] SRIO: fixed rionet driver crash

Skipping duplicate data message from srio controller.

Based on Broadcom SDK 2.3.

Signed-off-by: Jayanthi A <jayanthi.annadurai@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/xlp_srio.c |  3 +--
 drivers/net/xlp_rionet.c          | 57 ++++++++++++++++++++++++++++-----------
 2 files changed, 42 insertions(+), 18 deletions(-)

diff --git a/arch/mips/netlogic/xlp/xlp_srio.c b/arch/mips/netlogic/xlp/xlp_srio.c
index d923337..95df27a 100644
--- a/arch/mips/netlogic/xlp/xlp_srio.c
+++ b/arch/mips/netlogic/xlp/xlp_srio.c
@@ -1732,8 +1732,7 @@ errout:
 }
 
 
-static int __devinit bcm_of_xlp_rio_probe(struct platform_device *dev,
-                                     const struct of_device_id *match)
+static int __devinit bcm_of_xlp_rio_probe(struct platform_device *dev)
 {
         return bcm_rio_module_init();
 };
diff --git a/drivers/net/xlp_rionet.c b/drivers/net/xlp_rionet.c
index 488cd3a..593f59b 100644
--- a/drivers/net/xlp_rionet.c
+++ b/drivers/net/xlp_rionet.c
@@ -102,19 +102,31 @@ static struct rio_dev *rionet_active[NLM_RIO_MAX_ROUTE_ENTRIES];
 #define RIONET_MAC_MATCH(x)	(!memcmp((x), "\00\01\00\01", 4))
 #define RIONET_GET_DESTID(x)	((*((u8 *)x + 4) << 8) | *((u8 *)x + 5))
 
+#define SKB_BACK_PTR_SIZE	64
 #define DATAMSG_BUF_SIZE        4096
-static __inline__ struct sk_buff *nlm_rio_alloc_skb(int size)
+
+static __inline__ struct sk_buff *rio_get_skb_ptr(uint64_t addr)
 {
-        int offset = 0;
-        struct sk_buff *skb = __dev_alloc_skb(size + DATAMSG_BUF_SIZE, GFP_ATOMIC);
+        uint64_t *back_ptr = (uint64_t *)(unsigned long)(addr - SKB_BACK_PTR_SIZE);
+        return (struct sk_buff *)(unsigned long)(*back_ptr);
+}
 
+
+static __inline__ struct sk_buff *nlm_rio_alloc_skb(int size)
+{
+        uint64_t offset = 0;
+        struct sk_buff *skb = __dev_alloc_skb(size + DATAMSG_BUF_SIZE + SKB_BACK_PTR_SIZE, GFP_ATOMIC);
+	uint64_t *back_ptr;
+	
         if (!skb) {
                 return NULL;
         }
 
         /* align the data to the next cache line */
-        offset = ((unsigned long)skb->data + DATAMSG_BUF_SIZE) &
+        offset = ((unsigned long)skb->data + SKB_BACK_PTR_SIZE+ DATAMSG_BUF_SIZE) &
                 ~(DATAMSG_BUF_SIZE - 1);
+	back_ptr = (uint64_t *)(offset - SKB_BACK_PTR_SIZE);
+	*back_ptr = (uint64_t)skb;
         skb_reserve(skb, (offset - (unsigned long)skb->data));
         return skb;
 }
@@ -133,23 +145,31 @@ static int rionet_rx_clean(struct net_device *ndev)
 	int error = 0;
 	struct rionet_private *rnet = netdev_priv(ndev);
 	void *data;
+	struct sk_buff *rcvskb;
 
 	i = rnet->rx_slot;
 
 	do {
-		if (!rnet->rx_skb[i])
+		rcvskb = rnet->rx_skb[i];
+		if (!rnet->rx_skb[i]) 
 			continue;
 
 		if (!(data = rio_get_inb_message(rnet->mport, RIONET_MAILBOX)))
 			break;
+		rcvskb = rio_get_skb_ptr((uint64_t)data);
+		if (rcvskb != rnet->rx_skb[i]) {
+			printk("Duplicate msg from SRIO...Skipping...\n");
+			//printk("data %p rnet->rx_skb[%d] %p \n", data, i , rio_get_skb_ptr(data));
+			continue;
+		}
 
-		rnet->rx_skb[i]->data = data;
-		skb_put(rnet->rx_skb[i], RIO_MAX_MSG_SIZE);
-		rnet->rx_skb[i]->dev = ndev;
-		rnet->rx_skb[i]->protocol =
-		    eth_type_trans(rnet->rx_skb[i], ndev);
+		rcvskb->data = data;
+		skb_put(rcvskb, RIO_MAX_MSG_SIZE);
+		rcvskb->dev = ndev;
+		rcvskb->protocol =
+		    eth_type_trans(rcvskb, ndev);
 		
-		error = netif_rx(rnet->rx_skb[i]);
+		error = netif_rx(rcvskb);
 
 		if (error == NET_RX_DROP) {
 			ndev->stats.rx_dropped++;
@@ -173,7 +193,7 @@ static void rionet_rx_fill(struct net_device *ndev, int end)
 
 		if (!rnet->rx_skb[i])
 			break;
-                rnet->rx_slot++;
+                //net->rx_slot++;
                 if(rio_add_inb_buffer(rnet->mport, RIONET_MAILBOX,
                                    rnet->rx_skb[i]->data))
                     break;
@@ -286,23 +306,25 @@ static void rionet_inb_msg_event(struct rio_mport *mport, void *dev_id, int mbox
 	int n;
 	struct net_device *ndev = dev_id;
 	struct rionet_private *rnet = netdev_priv(ndev);
+	unsigned long flags;
 
 	if (netif_msg_intr(rnet))
 		printk(KERN_INFO "%s: inbound message event, mbox %d slot %d\n",
 		       DRV_NAME, mbox, slot);
 
-	spin_lock(&rnet->lock);
+	spin_lock_irqsave(&rnet->lock, flags);
 	if ((n = rionet_rx_clean(ndev)) != rnet->rx_slot)
 		rionet_rx_fill(ndev, n);
-	spin_unlock(&rnet->lock);
+	spin_unlock_irqrestore(&rnet->lock, flags);
 }
 
 static void rionet_outb_msg_event(struct rio_mport *mport, void *dev_id, int mbox, int slot)
 {
 	struct net_device *ndev = dev_id;
 	struct rionet_private *rnet = netdev_priv(ndev);
+	unsigned long flags;
 
-	spin_lock(&rnet->lock);
+	spin_lock_irqsave(&rnet->lock,flags);
 
 	if (netif_msg_intr(rnet))
 		printk(KERN_INFO
@@ -324,7 +346,7 @@ static void rionet_outb_msg_event(struct rio_mport *mport, void *dev_id, int mbo
 		netif_wake_queue(ndev);
 	spin_unlock(&rnet->tx_cnt_lock);
 
-	spin_unlock(&rnet->lock);
+	spin_unlock_irqrestore(&rnet->lock, flags);
 }
 
 static int rionet_open(struct net_device *ndev)
@@ -332,6 +354,7 @@ static int rionet_open(struct net_device *ndev)
 	int i, rc = 0;
 	struct rionet_peer *peer, *tmp;
 	struct rionet_private *rnet = netdev_priv(ndev);
+	unsigned long flags;
 
 	if (netif_msg_ifup(rnet))
 		printk(KERN_INFO "%s: open\n", DRV_NAME);
@@ -361,7 +384,9 @@ static int rionet_open(struct net_device *ndev)
 	for (i = 0; i < RIONET_RX_RING_SIZE; i++)
 		rnet->rx_skb[i] = NULL;
 	rnet->rx_slot = 0;
+	spin_lock_irqsave(&rnet->lock, flags);
 	rionet_rx_fill(ndev, 0);
+	spin_unlock_irqrestore(&rnet->lock, flags);
 
 	rnet->tx_slot = 0;
 	rnet->tx_cnt = 0;
-- 
1.8.4.93.g57e4c17

