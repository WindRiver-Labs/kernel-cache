From 756b1a9a9ce101343378b6334d0bea2d57cb7a26 Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikas.gupta@broadcom.com>
Date: Fri, 23 Nov 2012 14:14:32 +0530
Subject: [PATCH 427/565] xmc: Add XMC Board support.

	1) XMC board support
		a)nand partition.
		b) Disable ATA/SATA drivers.
	2) Initrd support.

Based on Broadcom SDK 2.3.

Signed-off-by: Vikas Gupta <vikas.gupta@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/Kconfig             |  7 +++
 arch/mips/netlogic/xlp/setup.c         | 86 ++++++++++++++++++++++++++++++++++
 arch/mips/netlogic/xlp/xlp_plat_nand.c | 30 ++++++++++++
 3 files changed, 123 insertions(+)

diff --git a/arch/mips/netlogic/Kconfig b/arch/mips/netlogic/Kconfig
index da9bf45..f6b8bc4 100644
--- a/arch/mips/netlogic/Kconfig
+++ b/arch/mips/netlogic/Kconfig
@@ -173,3 +173,10 @@ config NLM_ENABLE_LOAD_BALANCING
 	bool "Enable load balancing in nae driver for TCP_PERF mode."
 	depends on NLM_XLP && 64BIT && !NUMA
 	default n
+
+config NLM_XMC_SUPPORT
+	bool "Enable XMC Board Support "
+	depends on NLM_XLP
+	default n
+	help
+	  This option enables XMC Card Support.
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index d886c20..b284411 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -133,6 +133,7 @@ const char *DEFAULT_INITRD_BOOT_PARAMS = "rdinit=/sbin/init ";
 atomic_t cpus_rebooted = ATOMIC_INIT(0);
 #endif
 
+void parse_cmdline(void);
 unsigned long long nlm_common_tlb_stats[NR_CPUS] __cacheline_aligned;
 DEFINE_SPINLOCK(atomic_lock);
 
@@ -1023,6 +1024,7 @@ void __init prom_init(void)
 #endif
 
 	fdt_process();
+    	parse_cmdline();
 
 #ifdef CONFIG_NUMA
 	build_node_cpu_map();
@@ -1135,3 +1137,87 @@ static int __init nlm_proc_setup(void)
 	return 0;
 }
 rootfs_initcall(nlm_proc_setup);
+
+extern unsigned long initrd_start, initrd_end;
+
+static int __init initrd_setup(char *str)
+{
+	char rdarg[64];
+	int idx;
+	char *tmp, *endptr;
+	unsigned long initrd_size;
+
+	/* Make a copy of the initrd argument so we can smash it up here */
+	for (idx = 0; idx < sizeof(rdarg)-1; idx++) {
+		if (!str[idx] || (str[idx] == ' ')) break;
+		rdarg[idx] = str[idx];
+	}
+
+	rdarg[idx] = 0;
+	str = rdarg;
+
+	/*
+	*Initrd location comes in the form "<hex size of ramdisk in bytes>@<location in memory>"
+	*  e.g. initrd=size@physaddr.
+	*/
+	for (tmp = str; *tmp != '@'; tmp++) {
+	       if (!*tmp) {
+			goto fail;
+		}
+	}
+	*tmp = 0;
+	tmp++;
+	if (!*tmp) {
+		goto fail;
+	}
+	initrd_size = simple_strtoul(str, &endptr, 16);
+	if (*endptr) {
+		 *(tmp-1) = '@';
+		 goto fail;
+	}
+	*(tmp-1) = '@';
+	initrd_start = simple_strtoul(tmp, &endptr, 16);
+
+#if defined(CONFIG_32BIT) && defined (CONFIG_MAPPED_KERNEL)
+	initrd_start = CKSEG2ADDR(initrd_start);
+#else
+	initrd_start = CKSEG1ADDR(initrd_start);
+#endif
+	
+	if (*endptr) {
+		goto fail;
+	}
+	initrd_end = initrd_start + initrd_size;
+	printk("Found initrd of %lx@%lx\n", initrd_size, initrd_start);
+	return 1;
+	fail:
+	printk("Bad initrd argument.  Disabling initrd\n");
+	initrd_start = 0;
+	initrd_end = 0;
+	return 1;
+}
+
+
+/*
+ * Init routine which accepts the variables from u-boot
+ */
+void parse_cmdline(void)
+{
+	char *ptr;
+	/* Need to find out early whether we've got an initrd.  So scan
+	the list looking now */
+	for (ptr = arcs_cmdline; *ptr; ptr++) {
+		while (*ptr == ' ') {
+			ptr++;
+		}
+		if (!strncmp(ptr, "initrd=", 7)) {
+			initrd_setup(ptr+7);
+			break;
+		} else {
+			while (*ptr && (*ptr != ' ')) {
+				ptr++;
+			}
+		}
+	}
+}
+
diff --git a/arch/mips/netlogic/xlp/xlp_plat_nand.c b/arch/mips/netlogic/xlp/xlp_plat_nand.c
index 9756648..04e62bb 100644
--- a/arch/mips/netlogic/xlp/xlp_plat_nand.c
+++ b/arch/mips/netlogic/xlp/xlp_plat_nand.c
@@ -816,6 +816,35 @@ static int __devinit xlp_plat_nand_probe(struct platform_device *pdev)
  * and the maximum observed block size in use is 512KB. Make the first partition
  * to be 16 blocks leaving some extra space in case bootloader needs more.
  */
+#if defined(CONFIG_NLM_XMC_SUPPORT)
+static struct mtd_partition xlp_nand_partitions[] = {
+        {
+        .name = "X-LOADER",
+        .offset = 0,
+        .size = 4 * 64 * 2048,
+        },
+        {
+        .name = "U-BOOT",
+        .offset = MTDPART_OFS_APPEND,
+        .size = 4 * 64 * 2048,
+        },
+        {
+        .name = "U-BOOT ENV",
+        .offset = MTDPART_OFS_APPEND,
+        .size = 4 * 64 * 2048,
+        },
+        {
+        .name = "U-BOOT ENV COPY",
+        .offset = MTDPART_OFS_APPEND,
+        .size = 4 * 64 * 2048,
+        },
+        {
+        .name = "USER",
+        .offset = MTDPART_OFS_APPEND ,
+        .size = MTDPART_SIZ_FULL ,
+        },
+};
+#else
 
 static struct mtd_partition xlp_nand_partitions[] = {
         {
@@ -829,6 +858,7 @@ static struct mtd_partition xlp_nand_partitions[] = {
         .size = MTDPART_SIZ_FULL ,
         },
 };
+#endif
 
 static struct resource xlp_nand_flash_resource = {
         .name   = "mem",
-- 
1.8.4.93.g57e4c17

