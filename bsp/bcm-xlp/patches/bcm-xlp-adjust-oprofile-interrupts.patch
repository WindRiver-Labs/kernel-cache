From ef43cfc36463810dd7f4d73a2f08f6cfffb63b90 Mon Sep 17 00:00:00 2001
From: Sreenidhi BR <sreenidhibr@netlogicmicro.com>
Date: Tue, 17 Jan 2012 14:59:42 +0530
Subject: [PATCH 331/565] bcm-xlp: adjust oprofile interrupts

OProfile interrupts conflict with msgring interrupts. Fix it.
Remove the conflict by:
1. using IP6 for oprofile;
2. using IP5 for msgring do some cleanup in xlp oprofile code also.

Based on Broadcom SDK 2.3.

Signed-off-by: Sreenidhi BR <sreenidhibr@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/mips-exts.h |   4 --
 arch/mips/include/asm/netlogic/msgring.h   | 103 +++++++++++++++++++++++++++++
 arch/mips/include/asm/netlogic/xlp_irq.h   |   2 -
 arch/mips/kernel/nlm_fs_handler.S          |  89 -------------------------
 arch/mips/kernel/setup.c                   |   1 -
 arch/mips/netlogic/common/Makefile         |   6 +-
 arch/mips/netlogic/xlp/platform.c          |   1 +
 arch/mips/netlogic/xlp/setup.c             |   2 +-
 arch/mips/netlogic/xlp/smp.c               |   2 -
 arch/mips/oprofile/op_model_mips_xlp.c     |   8 ---
 arch/mips/pci/pci-xlp.c                    |   2 -
 11 files changed, 106 insertions(+), 114 deletions(-)
 create mode 100644 arch/mips/include/asm/netlogic/msgring.h

diff --git a/arch/mips/include/asm/netlogic/mips-exts.h b/arch/mips/include/asm/netlogic/mips-exts.h
index 5b374e8..aed31a3 100644
--- a/arch/mips/include/asm/netlogic/mips-exts.h
+++ b/arch/mips/include/asm/netlogic/mips-exts.h
@@ -395,10 +395,6 @@ typedef struct { volatile int value; } nlm_common_atomic_t;
 #define nlm_write_os_scratch_2(val)	__write_64bit_c0_register($22, 2, val)
 #define nlm_read_os_scratch_2()	__read_64bit_c0_register($22, 2)
 
-#define nlm_write_os_scratch_3(val)	__write_64bit_c0_register($22, 3, val)
-#define nlm_read_os_scratch_3()	__read_64bit_c0_register($22, 3)
 #endif
 
-#define SET_MIPS64 .set mips64r2
-
 #endif /* _ASM_NLM_MIPS_EXTS_H */
diff --git a/arch/mips/include/asm/netlogic/msgring.h b/arch/mips/include/asm/netlogic/msgring.h
new file mode 100644
index 0000000..4e6e347
--- /dev/null
+++ b/arch/mips/include/asm/netlogic/msgring.h
@@ -0,0 +1,103 @@
+/***********************************************************************
+Copyright 2003-2010 Netlogic Microsystems (“Netlogic”). All rights
+reserved.
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+1. Redistributions of source code must retain the above copyright
+notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+notice, this list of conditions and the following disclaimer in
+the documentation and/or other materials provided with the
+distribution.
+THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGE.
+*****************************#NETL_2#********************************/
+
+#ifndef _ASM_NLM_MSG_RING_H
+#define _ASM_NLM_MSG_RING_H
+
+#ifdef CONFIG_NLM_ENABLE_COP2
+
+#define msgrng_enable(flags) 
+#define msgrng_disable(flags) 
+
+#else
+
+#define msgrng_enable(flags)                \
+do {                                        \
+  preempt_disable(); \
+  __asm__ volatile (                        \
+		    ".set push\n\t"                 \
+		    ".set reorder\n\t"              \
+		    ".set noat\n\t"                 \
+		    "mfc0 %0, $12\n\t"              \
+		    "li  $8, 0x40000001\n\t"        \
+		    "or  $1, %0, $8\n\t"            \
+		    "xori $1, 1\n\t"                \
+		    ".set noreorder\n\t"            \
+		    "mtc0 $1, $12\n\t"              \
+		    ".set\tpop\n\t"                 \
+		    : "=r" (flags)                  \
+		    :                               \
+		    : "$8"                          \
+		    );                              \
+  preempt_enable(); \
+} while (0)
+#define msgrng_disable(flags) __asm__ volatile (    \
+                 "mtc0 %0, $12" : : "r" (flags))
+
+#endif
+
+#define msgrng_flags_save(flags) msgrng_enable(flags)
+#define msgrng_flags_restore(flags) msgrng_disable(flags)
+
+#ifdef CONFIG_NLM_ENABLE_COP2
+
+#define msgrng_access_save(lock, iflags, mflags)
+#define msgrng_access_restore(lock, iflags, mflags)
+
+#define msgrng_access_enable(mflags) ((void)(mflags))
+#define msgrng_access_disable(mflags) ((void)(mflags))
+
+#else
+
+#define msgrng_access_save(lock, iflags, mflags) do {        \
+  spin_lock_irqsave(lock, iflags);                           \
+  msgrng_flags_save(mflags);                                 \
+ }while(0)
+
+#define msgrng_access_restore(lock, iflags, mflags) do {     \
+  msgrng_flags_restore(mflags);                              \
+  spin_unlock_irqrestore(lock, iflags);                      \
+ }while(0)
+
+#define msgrng_access_enable(mflags) do {   \
+  preempt_disable();                        \
+  msgrng_flags_save(mflags);                \
+} while(0)
+#define msgrng_access_disable(mflags) do {   \
+  msgrng_flags_restore(mflags);              \
+  preempt_enable();                          \
+} while(0)
+
+#endif
+
+#ifdef CONFIG_NLM_XLP
+extern int register_xlp_msgring_handler(int major,
+                             void (*action) (uint32_t, uint32_t, uint32_t, uint32_t,
+                                             uint64_t, uint64_t, uint64_t, uint64_t, void *),
+                             void *dev_id);
+extern int unregister_xlp_msgring_handler(int, void *);
+#endif
+
+#endif
diff --git a/arch/mips/include/asm/netlogic/xlp_irq.h b/arch/mips/include/asm/netlogic/xlp_irq.h
index fee3f41..1a299d6 100644
--- a/arch/mips/include/asm/netlogic/xlp_irq.h
+++ b/arch/mips/include/asm/netlogic/xlp_irq.h
@@ -29,8 +29,6 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef _ASM_NLM_XLP_IRQ_H
 #define _ASM_NLM_XLP_IRQ_H
 
-#include <asm/netlogic/pic.h>
-
 /* Defines for the IRQ numbers */
 /* We define NR_IRQs to be 254, but IRT entries are 160 in size
  * Effectively, we cannot use anything more than 159 */
diff --git a/arch/mips/kernel/nlm_fs_handler.S b/arch/mips/kernel/nlm_fs_handler.S
index 5c47f08..a22b0b9 100644
--- a/arch/mips/kernel/nlm_fs_handler.S
+++ b/arch/mips/kernel/nlm_fs_handler.S
@@ -67,86 +67,6 @@ THE POSSIBILITY OF SUCH DAMAGE.
 	eret
 .endm
 
-#if defined(CONFIG_NLM_XLR)
-
-NESTED(nlm_fs_msgsnd, PT_SIZE, sp)
-
-	/* msgsnd arg0 is in (t1, t2) */
-	dsll32  k0, T1, 0
-	dsll32	k1, T2, 0
-	dsrl32	T2, k1, 0
-	or      T1, k0, T2
-	dmtc2	T1, $0, 0
-
-	/* msgsnd arg1 is in (t3, t4) */
-	dsll32  k0, T3, 0
-	dsll32	k1, T4, 0
-	dsrl32	T4, k1, 0
-	or      T3, k0, T4
-	dmtc2   T3, $0, 1
-
-	/* msgsnd dst is in t0 */
-1:	c2	0x80001
-	mfc2	T1, $2
-	andi	T1, T1, 0x06
-	bnez	T1, 1b
-	nop
-
-	fs_eret
-END(nlm_fs_msgsnd)
-
-NESTED(nlm_fs_msgrcv, PT_SIZE, sp)
-	/* t0 has the bucket arg */
-	c2	0x80002
-1:	mfc2	T3, $2
-	andi	k0, T3, 0x08
-	bnez	k0, 1b
-	nop
-	andi    T0, T3, 0x30
-	bnez	T0, 2f
-	nop
-	dmfc2	T2, $1, 0
-	dmfc2   T5, $1, 1
-	nop
-	dsra32  T1, T2, 0
-	dsra32  T4, T5, 0
-2:
-
-	/* move    t0, k0 */
-
-	fs_eret
-END(nlm_fs_msgrcv)
-
-NESTED(nlm_fs_get_cpumasks, PT_SIZE, sp)
-
-	.word 0x40088007
-	move k0, T0
-	srl  T0, T0, 4
-	andi T0, T0, 0x3f
-	sll  T0, T0, 2
-	andi k0, k0, 0x0f
-	or T0, T0, k0
-
-	PTR_LA k0, fast_syscall_cpumask_phy		;
-	lw T1, (k0)
-
-	fs_eret
-END(nlm_fs_get_cpumasks)
-
-NESTED(nlm_fs_prominfo, PT_SIZE, sp)
-
-	PTR_LA	k0, prom_info_copy
-	move	k1, T0
-	sll	k1, k1, 3
-	addu	k0, k0, k1
-	lw	T1, (k0)
-	lw	T2, 4(k0)
-
-	fs_eret
-END(nlm_fs_prominfo)
-
-#else /* CONFIG_NLM_XLR */
-
 #include <asm/netlogic/hal/nlm_hal_xlp_dev.h>
 
 	.set	arch=xlp
@@ -244,8 +164,6 @@ NESTED(nlm_fs_msgrcv1, PT_SIZE, sp)
 	fs_eret
 END(nlm_fs_msgrcv1)
 
-#endif /* CONFIG_NLM_XLP */
-
 NESTED(nlm_fs_mem_read64, PT_SIZE, sp)
 	/* address is in (t0, t1) */
 	dsll32  k0, T0, 0
@@ -435,7 +353,6 @@ END(nlm_fs_processorId)
 
 NESTED(nlm_fs_read_timer, PT_SIZE, sp)
 
-#if defined(CONFIG_NLM_XLP)
 #include <asm/netlogic/xlp_hal_pic.h>
         MFC0    k0, CP0_PRID, 1
         andi    k0, k0, 0x3ff
@@ -447,12 +364,6 @@ NESTED(nlm_fs_read_timer, PT_SIZE, sp)
 	dsrl32	$9, k1, 0
 	dsll32  $8, k1, 0
 	dsrl32  $8, T0, 0
-#else
-	dli	k0, 0xffffffffbef00000 + NETLOGIC_IO_PIC_OFFSET + (PIC_TIMER_6_COUNTER_0 << 2)
-	lw	$8, 0(k0)
-	dli	k0, 0xffffffffbef00000 + NETLOGIC_IO_PIC_OFFSET + (PIC_TIMER_6_COUNTER_1 << 2)
-	lw	$9, 0(k0)
-#endif
 	fs_eret
 
 END(nlm_fs_read_timer)
diff --git a/arch/mips/kernel/setup.c b/arch/mips/kernel/setup.c
index fd6a633..a9029bf 100644
--- a/arch/mips/kernel/setup.c
+++ b/arch/mips/kernel/setup.c
@@ -42,7 +42,6 @@ the header of the original work apply to this derived work.
 #include <asm/prom.h>
 
 #ifdef CONFIG_NLM_XLP
-#include <asm/netlogic/sim.h>
 #include <asm/netlogic/debug.h>
 #include <asm/mach-netlogic/mmu.h>
 #endif /* CONFIG_NLM_XLP */
diff --git a/arch/mips/netlogic/common/Makefile b/arch/mips/netlogic/common/Makefile
index 53ffad1..dea4552 100644
--- a/arch/mips/netlogic/common/Makefile
+++ b/arch/mips/netlogic/common/Makefile
@@ -15,14 +15,10 @@ obj-y					+= cortina_cs34x7/nlm_cortina_cs34x7.o cortina_cs34x7/nlm_cortina_cs34
 EXTRA_CFLAGS += -DNLM_CORTINA_SUPPORT
 endif
 
-ifdef CONFIG_NLM_XLP
-obj-$(CONFIG_SMP)                 	+= smp.o
-endif
-
 EXTRA_AFLAGS := $(CFLAGS)
 
 clean-files += nlm_hal_fmn_config.o nlm_hal_cpu_info.o
 clean-files += nlm_hal.o
-clean-files += smp.o cpu_proc.o
+clean-files += cpu_proc.o
 clean-files += nlm_hal.c
 
diff --git a/arch/mips/netlogic/xlp/platform.c b/arch/mips/netlogic/xlp/platform.c
index fd2f427..44ef732 100644
--- a/arch/mips/netlogic/xlp/platform.c
+++ b/arch/mips/netlogic/xlp/platform.c
@@ -39,6 +39,7 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <asm/netlogic/xlp_hal_pic.h>
 #include <asm/netlogic/xlp.h>
 #include <asm/netlogic/xlp_usb.h>
+#include <asm/netlogic/iomap.h>
 
 #define XLP_SOC_PCI_DRIVER "XLP SoC Driver"
 #define DEV_IRT_INFO		0x3D
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index c6ed88e..304877b 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -50,7 +50,7 @@
 #include <asm/netlogic/haldefs.h>
 #include <asm/netlogic/common.h>
 
-#include <asm/netlogic/xlp-hal/iomap.h>
+#include <asm/netlogic/iomap.h>
 #include <asm/netlogic/xlp-hal/xlp.h>
 #include <asm/netlogic/xlp-hal/sys.h>
 
diff --git a/arch/mips/netlogic/xlp/smp.c b/arch/mips/netlogic/xlp/smp.c
index 4422e43..146046b 100644
--- a/arch/mips/netlogic/xlp/smp.c
+++ b/arch/mips/netlogic/xlp/smp.c
@@ -86,8 +86,6 @@ void nlm_send_ipi_single(int lcpu, unsigned int action)
                 ipi |= XLP_IRQ_IPI_SMP_KGDB;
 		/* for KGDB enable NMI also */
 		nmi = 1;
-	} else if (action & SMP_OPROFILE_IPI) {
-                ipi |= XLP_IRQ_IPI_OPROFILE;
         } else
 		return;
 
diff --git a/arch/mips/oprofile/op_model_mips_xlp.c b/arch/mips/oprofile/op_model_mips_xlp.c
index 56facc9..b62eac9 100644
--- a/arch/mips/oprofile/op_model_mips_xlp.c
+++ b/arch/mips/oprofile/op_model_mips_xlp.c
@@ -147,19 +147,11 @@ void nlm_common_oprofile_int_handler(int irq, void * dev_id,
 {
 	uint64_t counter1, counter2;
 	uint64_t counter3, counter4;
-	uint32_t control1, control2;
-	uint32_t control3, control4;
 	int h_id = hard_smp_processor_id();/* 0, 1, 2, 3, 4, .....31 */
 
 	if(g_stop_pmc[h_id])
 		return;
 
-	control1 = __read_32bit_c0_register ($25, 0);
-	control2 = __read_32bit_c0_register ($25, 2);
-	control3 = __read_32bit_c0_register ($25, 4);
-	control4 = __read_32bit_c0_register ($25, 6);
-
-
 	counter1 = __read_64bit_c0_register ($25, 1);
 	counter2 = __read_64bit_c0_register ($25, 3);
 	counter3 = __read_64bit_c0_register ($25, 5);
diff --git a/arch/mips/pci/pci-xlp.c b/arch/mips/pci/pci-xlp.c
index 8f589df..c58f165 100644
--- a/arch/mips/pci/pci-xlp.c
+++ b/arch/mips/pci/pci-xlp.c
@@ -37,10 +37,8 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <asm/io.h>
 
 #include <asm/netlogic/xlp_irq.h>
-#include <asm/netlogic/pci.h>
 #include <asm/netlogic/io.h>
 #include <asm/netlogic/iomap.h>
-#include <asm/netlogic/sim.h>
 #include <asm/netlogic/xlp_hal_pic.h>
 
 extern int pci_probe_only;
-- 
1.8.4.93.g57e4c17

