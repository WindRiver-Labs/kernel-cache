From 9034c6c528bd138f2ada669d84634f0f9d05929f Mon Sep 17 00:00:00 2001
From: Anurag <anurag.gopinath@broadcom.com>
Date: Thu, 11 Oct 2012 22:47:57 +0530
Subject: [PATCH 406/565] USB : Add USB driver for XLP

USB : Add USB driver for XLP.

Based on Broadcom SDK 2.3.

Signed-off-by: Anurag <anurag.gopinath@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/xlp_usb.h | 21 ++++++++++
 arch/mips/netlogic/xlp/Makefile          |  1 +
 arch/mips/netlogic/xlp/platform.c        | 43 --------------------
 drivers/usb/host/ehci-pci.c              | 67 +-------------------------------
 4 files changed, 23 insertions(+), 109 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/xlp_usb.h b/arch/mips/include/asm/netlogic/xlp_usb.h
index 49b5e13..004f891 100644
--- a/arch/mips/include/asm/netlogic/xlp_usb.h
+++ b/arch/mips/include/asm/netlogic/xlp_usb.h
@@ -28,6 +28,27 @@
 #ifndef __XLP_USB_H
 #define __XLP_USB_H
 
+#define USB_CTL_0                      0x41
+#define USB_PHY_0                      0x4A
+#define USB_PHY_RESET                  0x01
+#define USB_PHY_PORT_RESET_0           0x10
+#define USB_PHY_PORT_RESET_1           0x20
+#define USB_CONTROLLER_RESET           0x01
+#define USB_INT_STATUS                 0x4E
+#define USB_INT_EN                     0x4F
+#define USB_PHY_INTERRUPT_EN           0x01
+#define USB_OHCI_INTERRUPT_EN          0x02
+#define USB_OHCI_INTERRUPT1_EN         0x04
+#define USB_OHCI_INTERRUPT2_EN         0x08
+#define USB_CTRL_INTERRUPT_EN          0x10
+
+#define PIC_IRT_EHCI_0                  115
+#define PIC_IRT_OHCI_0                  116
+#define PIC_IRT_OHCI_1                  117
+#define PIC_IRT_EHCI_1                  118
+#define PIC_IRT_OHCI_2                  119
+#define PIC_IRT_OHCI_3                  120
+
 static __inline__ int32_t usb_reg_read(int node, int func, int regidx)
 {
 	volatile uint64_t mmio;
diff --git a/arch/mips/netlogic/xlp/Makefile b/arch/mips/netlogic/xlp/Makefile
index 7361f0e..efe6f18 100644
--- a/arch/mips/netlogic/xlp/Makefile
+++ b/arch/mips/netlogic/xlp/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_NLM_XLP) += cop2.o
 obj-$(CONFIG_XLP_CPUFREQ) += xlp-cpufreq.o
 obj-$(CONFIG_SATA_AHCI) += sata-init.o
 obj-$(CONFIG_RAPIDIO)  += xlp_srio.o
+obj-$(CONFIG_USB) += usb-init.o
 
 ifeq ($(CONFIG_XEN),y)
 obj-y += xenbootinfo.o
diff --git a/arch/mips/netlogic/xlp/platform.c b/arch/mips/netlogic/xlp/platform.c
index fcee2d8..45a87ad 100644
--- a/arch/mips/netlogic/xlp/platform.c
+++ b/arch/mips/netlogic/xlp/platform.c
@@ -112,46 +112,6 @@ static void xlp_init_uart(int port_id)
         xlp_uart_port[port_id].serial_out    = xlp_uart_out;
 }
 
-#ifdef CONFIG_USB
-static void xlp_usb_hw_start_controller(int node, int ctrl_no)
-{
-	int val;
-	/* Reset USB phy */
-	val = usb_reg_read( node, ctrl_no, XLP_USB_PHY0);
-
-	if(ctrl_no == 0)
-		val &= ~(USBPHYRESET | USBPHYPORTRESET0 | USBPHYPORTRESET1);
-	else if(ctrl_no == 3)
-		val &= ~(USBPHYPORTRESET0 | USBPHYPORTRESET1);
-	usb_reg_write(node, ctrl_no, XLP_USB_PHY0, val);
-
-	udelay(2000);
-	/* Bring usb controller out of reset
- *  	 */
-	val = usb_reg_read( node, ctrl_no, XLP_USB_CTL0);
-	val &= ~(USBCONTROLLERRESET );
-	val |= 0x4;
-	usb_reg_write(node, ctrl_no, XLP_USB_CTL0, val);
-
-	return;
-}
-
-static void xlp_usb_hw_start(void)
-{
-	int n, online;
-	int total=num_possible_nodes();
-
-	for(n=0; n<total; n++) {
-		online=node_online(n);
-		if(!online)	continue;
-
-		xlp_usb_hw_start_controller(n, 0);
-		xlp_usb_hw_start_controller(n, 3);
-	}
-}
-#endif
-
-
 struct dev2drv dev2drv_table[MAX_DEV2DRV] = {
 	{XLP_DEVID_UART, "serial8250",	11,	0,	PLAT_DRV},
 	{XLP_DEVID_I2C,	 "i2c-xlp",	8,	0, 	PLAT_DRV},
@@ -263,9 +223,6 @@ static int __init platform_devinit(void)
 {
 	xlp_find_pci_dev();
 	xlp_nor_flash_dev_init();
-#ifdef CONFIG_USB
-	xlp_usb_hw_start();
-#endif
 	return 0;
 }
 
diff --git a/drivers/usb/host/ehci-pci.c b/drivers/usb/host/ehci-pci.c
index 4cd8a41..98600b7 100644
--- a/drivers/usb/host/ehci-pci.c
+++ b/drivers/usb/host/ehci-pci.c
@@ -1,11 +1,3 @@
-/* **********************************************************************
- * Copyright 2003-2010 Netlogic Microsystems Inc. (“Netlogic”).
- * This is a derived work from software originally provided by the external
- * entity identified below. The licensing terms and warranties specified in
- * the header of the original work apply to this derived work.
- *
- * *****************************#NETL_1#********************************/
-
 /*
  * EHCI HCD (Host Controller Driver) PCI Bus Glue.
  *
@@ -42,48 +34,6 @@ static const char hcd_name[] = "ehci-pci";
 /* defined here to avoid adding to pci_ids.h for single instance use */
 #define PCI_DEVICE_ID_INTEL_CE4100_USB	0x2e70
 
-#if defined(CONFIG_NLM_XLP) && defined(CONFIG_USB)
-
-#include <asm/netlogic/hal/nlm_hal.h>
-#include <asm/netlogic/xlp_hal_pic.h>
-#include <asm/netlogic/xlp.h>
-#include <asm/netlogic/xlp_usb.h>
-volatile uint64_t *ehci_regs;
-
-static void xlp_usb_hw_start(int ctrl_no)
-{
-	int val;
-
-	/* enable USB interrupts
-	 */
-	val = USB_CTRL_INTERRUPT_EN  | USB_OHCI_INTERRUPT_EN | USB_OHCI_INTERRUPT1_EN;
-	usb_reg_write(0, ctrl_no, XLP_USB_INT_EN, val);
-
-	return;
-}
-
-int xlp_ehci_hcd_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)
-{
-	int irq, irt, ctrl_no;
-
-	ctrl_no = dev->devfn & 0xF;
-
-	irt = usb_reg_read(0, ctrl_no, 0x3D) & 0xFFFF;
-	irq = xlp_pic_irt_to_irq(irt);
-
-	if (!irq) {
-		printk("Found HC with no IRQ.  Check BIOS/PCI %s setup!\n", 
-				pci_name(dev));
-		return -ENODEV;
-	}
-
-	dev->irq = irq;
-	xlp_usb_hw_start(ctrl_no);
-
-	return usb_hcd_pci_probe(dev, id);
-}
-#endif
-
 /*-------------------------------------------------------------------------*/
 
 /* called after powerup, by probe or system-pm "wakeup" */
@@ -442,22 +392,10 @@ static const struct ehci_driver_overrides pci_overrides __initconst = {
 
 /* PCI driver selection metadata; PCI hotplugging uses this */
 static const struct pci_device_id pci_ids [] = { {
-#if defined(CONFIG_NLM_XLP) && defined(CONFIG_USB)
-	{
-		.vendor		 = PCI_VENDOR_ID_NETLOGIC,
-		.device		 = XLP_DEVID_EHCI,
-		.subvendor	 = 0,
-		.subdevice	 = 0,
-		.class		 = PCI_CLASS_SERIAL_USB_EHCI,
-		.class_mask	 = ~0,
-		.driver_data =	(unsigned long) &ehci_pci_hc_driver,
-	},
-#else
 	/* handle any USB 2.0 EHCI controller */
 	PCI_DEVICE_CLASS(PCI_CLASS_SERIAL_USB_EHCI, ~0),
 	.driver_data =	(unsigned long) &ehci_pci_hc_driver,
 	}, {
-#endif
 	PCI_VDEVICE(STMICRO, PCI_DEVICE_ID_STMICRO_USB_HOST),
 	.driver_data = (unsigned long) &ehci_pci_hc_driver,
 	},
@@ -469,11 +407,8 @@ MODULE_DEVICE_TABLE(pci, pci_ids);
 static struct pci_driver ehci_pci_driver = {
 	.name =		(char *) hcd_name,
 	.id_table =	pci_ids,
-#if defined(CONFIG_NLM_XLP) && defined(CONFIG_USB)
-	.probe =	xlp_ehci_hcd_pci_probe,
-#else
+
 	.probe =	usb_hcd_pci_probe,
-#endif
 	.remove =	usb_hcd_pci_remove,
 	.shutdown = 	usb_hcd_pci_shutdown,
 
-- 
1.8.4.93.g57e4c17

