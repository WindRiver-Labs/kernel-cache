From 2a1c316e9133af44c03e8d98de40fc1af96e7699 Mon Sep 17 00:00:00 2001
From: kopal <kopal@broadcom.com>
Date: Wed, 9 Jan 2013 15:51:21 +0530
Subject: [PATCH 449/565] i2c: Use i2c controller driver register values

i2c: Use i2c controller driver register values from HAL.

Based on Broadcom SDK 2.3.

Signed-off-by: kopal <kopal@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/i2c/busses/i2c-xlp.c | 124 ++++++++++++++++++++-----------------------
 1 file changed, 57 insertions(+), 67 deletions(-)

diff --git a/drivers/i2c/busses/i2c-xlp.c b/drivers/i2c/busses/i2c-xlp.c
index b3a240f..abceaf4 100644
--- a/drivers/i2c/busses/i2c-xlp.c
+++ b/drivers/i2c/busses/i2c-xlp.c
@@ -41,31 +41,7 @@
 #include <asm/netlogic/xlp.h>
 
 #define I2C_CLKFREQ_HZ			133333333 	/* 1.33MHz */
-#define DEFAULT_VIRT_BASE               0x9000000000000000ULL
 #define I2C_TIMEOUT                     500000
-#define XLP_I2C_DEFAULT_SPEED           1000
-#define I2C_PRESCALER_LO                 0
-#define I2C_PRESCALER_HI                 1
-#define I2C_CONTROL                      2
-        #define I2C_CONTROL_EN           0x80
-        #define I2C_CONTROL_IEN          0x40
-#define I2C_DATA                         3               /* Data TX & RX Reg */
-#define I2C_COMMAND                      4
-        #define I2C_COMMAND_START        0x90
-        #define I2C_COMMAND_STOP         0x40
-        #define I2C_COMMAND_READ         0x20
-        #define I2C_COMMAND_WRITE        0x10
-        #define I2C_COMMAND_RDACK        0x20
-        #define I2C_COMMAND_RDNACK       0x28
-        #define I2C_COMMAND_IACK         0x01    /* Not used */
-#define I2C_STATUS                       4               /* Same as 'command' */
-        #define I2C_STATUS_NACK          0x80    /* Did not get an ACK */
-        #define I2C_STATUS_BUSY          0x40
-        #define I2C_STATUS_AL            0x20    /* Arbitration Lost */
-        #define I2C_STATUS_TIP           0x02    /* Transfer in Progress  */
-        #define I2C_STATUS_IF            0x01    /* Intr. Pending Flag, not used */
-#define I2C_WRITE_BIT			0x00
-#define I2C_READ_BIT			0x01
 
 static int i2c_speed=100;
 module_param(i2c_speed,int,0);
@@ -85,15 +61,23 @@ struct i2c_xlp_data {
 static __inline__ int32_t i2c_reg_read(int node, int func, int regidx)
 {
         volatile uint64_t mmio;
-        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_GIO_DEV, func);
-        return nlm_hal_read_32bit_reg(mmio, regidx);
+        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_GIO_DEV, func)+0x100;
+        if(is_nlm_xlp2xx())
+		return nlm_hal_read_32bit_reg(mmio+0x20, regidx);
+	else
+		return nlm_hal_read_32bit_reg(mmio, regidx);
+		
 }
 
 static __inline__ void i2c_reg_write(int node, int func, int regidx, int32_t val)
 {
         volatile uint64_t mmio;
-        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_GIO_DEV, func);
-        nlm_hal_write_32bit_reg(mmio, regidx, val);
+        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_GIO_DEV, func)+0x100;
+        if(is_nlm_xlp2xx())
+		nlm_hal_write_32bit_reg(mmio+0x20, regidx, val);
+	else
+		nlm_hal_write_32bit_reg(mmio, regidx, val);
+		
 }
 
 #ifdef XLP_I2C_DEBUG
@@ -130,7 +114,7 @@ static int wait_xfer_done(struct i2c_xlp_data *adap) {
         volatile int timeout = I2C_TIMEOUT;
         int retval = 0;
 
-        while ((i2c_read_reg8(adap, I2C_STATUS) & I2C_STATUS_TIP) && timeout) {
+        while ((i2c_read_reg8(adap, XLP_I2C_STATUS) & XLP_I2C_STATUS_TIP) && timeout) {
                 timeout--;
         }
         if (timeout == 0) {
@@ -145,7 +129,7 @@ static int bus_idle(struct i2c_xlp_data *adap) {
         volatile int timeout = I2C_TIMEOUT;
         int retval = 0;
 
-        while ((i2c_read_reg8(adap, I2C_STATUS) & I2C_STATUS_BUSY) && timeout) {
+        while ((i2c_read_reg8(adap, XLP_I2C_STATUS) & XLP_I2C_STATUS_BUSY) && timeout) {
                 timeout--;
         }
         if (timeout == 0) {
@@ -157,7 +141,7 @@ static int bus_idle(struct i2c_xlp_data *adap) {
 
 static int wait_ack(struct i2c_xlp_data *adap) {
 
-        if (i2c_read_reg8(adap, I2C_STATUS) & I2C_STATUS_NACK) {
+        if (i2c_read_reg8(adap, XLP_I2C_STATUS) & XLP_I2C_STATUS_NACK) {
                return -1;
         }
         return 0;
@@ -168,13 +152,13 @@ int xlp_i2c_read(struct i2c_xlp_data *adap, uint8_t slave_addr, uint32_t slave_o
         int i ;
 
         /* Verify the bus is idle */
-        if (i2c_read_reg8(adap, I2C_STATUS) & I2C_STATUS_BUSY) {
+        if (i2c_read_reg8(adap, XLP_I2C_STATUS) & XLP_I2C_STATUS_BUSY) {
                 printk("I2C Bus BUSY (Not Available), Aborting.\n");
                 goto i2c_rx_error;
         }
 
-        i2c_write_reg8(adap, I2C_DATA, (slave_addr << 1) | I2C_WRITE_BIT);
-        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_START);
+        i2c_write_reg8(adap, XLP_I2C_DATA, (slave_addr << 1) | XLP_WRITE_BIT);
+        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_START);
         if (wait_xfer_done(adap) < 0) {
                 goto i2c_rx_error;
         }
@@ -183,13 +167,13 @@ int xlp_i2c_read(struct i2c_xlp_data *adap, uint8_t slave_addr, uint32_t slave_o
         }
 
         /* Verify Arbitration is not Lost */
-        if (i2c_read_reg8(adap, I2C_STATUS) & I2C_STATUS_AL) {
+        if (i2c_read_reg8(adap, XLP_I2C_STATUS) & XLP_I2C_STATUS_AL) {
                 printk("I2C Bus Arbitration Lost, Aborting.\n");
                 goto i2c_rx_error;
         }
         for (i = 0; i<=alen; i++) {
-                i2c_write_reg8(adap, I2C_DATA, ( (slave_offset >> (i*8) ) & 0xff) | I2C_WRITE_BIT);
-                i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_WRITE);
+                i2c_write_reg8(adap, XLP_I2C_DATA, ( (slave_offset >> (i*8) ) & 0xff) | XLP_WRITE_BIT);
+                i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_WRITE);
                 if (wait_xfer_done(adap) < 0) {
                         goto i2c_rx_error;
                 }
@@ -200,8 +184,8 @@ int xlp_i2c_read(struct i2c_xlp_data *adap, uint8_t slave_addr, uint32_t slave_o
 
         /* Address Phase Done, Data Phase begins
  	 */
-        i2c_write_reg8(adap, I2C_DATA, (slave_addr << 1) | I2C_READ_BIT);
-        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_START);
+        i2c_write_reg8(adap, XLP_I2C_DATA, (slave_addr << 1) | XLP_READ_BIT);
+        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_START);
         if (wait_xfer_done(adap) < 0) {
                 goto i2c_rx_error;
         }
@@ -213,12 +197,12 @@ int xlp_i2c_read(struct i2c_xlp_data *adap, uint8_t slave_addr, uint32_t slave_o
                 int bytenr = 0;
 
                 for (bytenr = 0; bytenr < len-1; bytenr++) {
-                        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_READ);
+                        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_READ);
                         if (wait_xfer_done(adap) < 0) {
                                 goto i2c_rx_error;
                         }
                         if (data != NULL) {
-                                *data = i2c_read_reg8(adap, I2C_DATA);
+                                *data = i2c_read_reg8(adap, XLP_I2C_DATA);
                                 data++;
                         }
                 }
@@ -227,17 +211,17 @@ int xlp_i2c_read(struct i2c_xlp_data *adap, uint8_t slave_addr, uint32_t slave_o
         /* Last (or only) Byte: -
          * Set RD, NACK, STOP Bits
          */
-        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_STOP | I2C_COMMAND_RDNACK);
+        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_STOP | XLP_I2C_CMD_RDNACK);
         if (wait_xfer_done(adap) < 0) {
                 goto i2c_rx_error;
         }
 	if(data != NULL)
-                *data = i2c_read_reg8(adap, I2C_DATA);
+                *data = i2c_read_reg8(adap, XLP_I2C_DATA);
         return bus_idle(adap);
 
 i2c_rx_error:
         /* Release Bus */
-        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_STOP);
+        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_STOP);
         bus_idle(adap);
         return -1;
 }
@@ -247,13 +231,13 @@ int xlp_i2c_write(struct i2c_xlp_data *adap, uint8_t slave_addr, uint16_t slave_
         int i ;
 
         /* Verify the bus is idle */
-        if (i2c_read_reg8(adap, I2C_STATUS) & I2C_STATUS_BUSY) {
+        if (i2c_read_reg8(adap, XLP_I2C_STATUS) & XLP_I2C_STATUS_BUSY) {
                 printk("I2C Bus BUSY (Not Available), Aborting.\n");
                 goto i2c_tx_error;
         }
 
-        i2c_write_reg8(adap, I2C_DATA, (slave_addr << 1) | I2C_WRITE_BIT);
-        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_START);
+        i2c_write_reg8(adap, XLP_I2C_DATA, (slave_addr << 1) | XLP_WRITE_BIT);
+        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_START);
         if (wait_xfer_done(adap) < 0) {
                 goto i2c_tx_error;
         }
@@ -262,14 +246,14 @@ int xlp_i2c_write(struct i2c_xlp_data *adap, uint8_t slave_addr, uint16_t slave_
         }
 
         /* Verify Arbitration is not Lost */
-        if (i2c_read_reg8(adap, I2C_STATUS) & I2C_STATUS_AL) {
+        if (i2c_read_reg8(adap, XLP_I2C_STATUS) & XLP_I2C_STATUS_AL) {
                 printk("I2C Bus Arbitration Lost, Aborting.\n");
                 goto i2c_tx_error;
         }
 
         for (i = 0; i<=alen; i++) {
-                i2c_write_reg8(adap, I2C_DATA, ( (slave_offset >> (i*8) ) & 0xff) | I2C_WRITE_BIT);
-                i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_WRITE);
+                i2c_write_reg8(adap, XLP_I2C_DATA, ( (slave_offset >> (i*8) ) & 0xff) | XLP_WRITE_BIT);
+                i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_WRITE);
                 if (wait_xfer_done(adap) < 0) {
                         goto i2c_tx_error;
                 }
@@ -283,16 +267,16 @@ int xlp_i2c_write(struct i2c_xlp_data *adap, uint8_t slave_addr, uint16_t slave_
                 int bytenr = 0;
 
                 for (bytenr = 0; bytenr < len-1; bytenr++) {
-                        i2c_write_reg8(adap, I2C_DATA, *data);
-                        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_WRITE);
+                        i2c_write_reg8(adap, XLP_I2C_DATA, *data);
+                        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_WRITE);
                         if (wait_xfer_done(adap) < 0) {
                                 goto i2c_tx_error;
                         }
                         data++;
                 }
         }
-        i2c_write_reg8(adap, I2C_DATA, *data);
-        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_STOP | I2C_COMMAND_WRITE);
+        i2c_write_reg8(adap, XLP_I2C_DATA, *data);
+        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_STOP | XLP_I2C_CMD_WRITE);
         if (wait_xfer_done(adap) < 0) {
                 goto i2c_tx_error;
         }
@@ -304,7 +288,7 @@ int xlp_i2c_write(struct i2c_xlp_data *adap, uint8_t slave_addr, uint16_t slave_
 
 i2c_tx_error:
         /* Release Bus */
-        i2c_write_reg8(adap, I2C_COMMAND, I2C_COMMAND_STOP);
+        i2c_write_reg8(adap, XLP_I2C_COMMAND, XLP_I2C_CMD_STOP);
         bus_idle(adap);
         return -1;
 }
@@ -421,17 +405,22 @@ static void i2c_xlp_setup(struct i2c_xlp_data *priv)
 {
 	uint32_t val, prescaler;
 
-	val = i2c_reg_read(priv->node, priv->func, XLP_I2C_CFG0);
-	val &= ~(XLP_I2C_EN | XLP_I2C_INT_EN);
-	i2c_reg_write(priv->node, priv->func, XLP_I2C_CFG0, val);
-
 	prescaler = (I2C_CLKFREQ_HZ/(5 * (priv->speed * 1000))) - 1;  /* (speed * 1000) - convert KHz to Hz */ 
-	val &= ~0xFFFF;
-	val |=  (prescaler & 0xFFFF);
-	i2c_reg_write(priv->node, priv->func, XLP_I2C_CFG0, val);
+	
+	/* disable I2C before setting the prescaler values */
+        val = i2c_reg_read(priv->node, priv->func, XLP_I2C_CONTROL);
+        val &= ~(XLP_I2C_CTRL_EN | XLP_I2C_CTRL_IEN);
+        i2c_reg_write(priv->node, priv->func, XLP_I2C_CONTROL, val);
+
+	/* set prescaler values*/
+        i2c_reg_write(priv->node, priv->func, XLP_PRESCALE0, prescaler & 0xff);
+        i2c_reg_write(priv->node, priv->func, XLP_PRESCALE1, prescaler >> 8);
 
-	val |= XLP_I2C_EN; 
-	i2c_reg_write(priv->node, priv->func, XLP_I2C_CFG0, val);	
+	/* re-enable I2C */
+        val &= ~0xFFFF;
+        val |= XLP_I2C_CTRL_EN;
+
+        i2c_reg_write(priv->node, priv->func, XLP_I2C_CONTROL, val);
 
 }
 
@@ -439,9 +428,9 @@ static void i2c_xlp_disable(struct i2c_xlp_data *priv)
 {
 	int32_t val;
 	
-	val = i2c_reg_read(priv->node, priv->func, XLP_I2C_CFG0);
-	val &= ~XLP_I2C_EN;
-	i2c_reg_write(priv->node, priv->func, XLP_I2C_CFG0, val);	
+	val = i2c_reg_read(priv->node, priv->func, XLP_I2C_CONTROL);
+	val &= ~XLP_I2C_CTRL_EN;
+	i2c_reg_write(priv->node, priv->func, XLP_I2C_CONTROL, val);	
 }
 
 static int __devinit
@@ -465,6 +454,7 @@ i2c_xlp_probe(struct platform_device *pdev)
 	priv->xfer_timeout = 200;
 	priv->ack_timeout = 200;
        	priv->speed	  =i2c_speed; 
+	
 	/* xlp2xx has different pcie function */
 	if(is_nlm_xlp2xx()) {
 		priv->func = 7;
-- 
1.8.4.93.g57e4c17

