From feb2aaacd5e8f9cb45dd3927fb48f3802629de33 Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@netlogicmicro.com>
Date: Mon, 19 Dec 2011 12:48:37 -0800
Subject: [PATCH 317/565] Export a few NUMA related symbols

Export a few NUMA related symbols so that nae modulo works in numa mode

Based on Broadcom SDK 2.3.

Signed-off-by: Yonghong Song <ysong@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/mach-netlogic/mmzone.h | 4 ++--
 arch/mips/netlogic/xlp/numa.c                | 8 ++++++--
 2 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/arch/mips/include/asm/mach-netlogic/mmzone.h b/arch/mips/include/asm/mach-netlogic/mmzone.h
index 1add4c8..c494729 100644
--- a/arch/mips/include/asm/mach-netlogic/mmzone.h
+++ b/arch/mips/include/asm/mach-netlogic/mmzone.h
@@ -44,7 +44,7 @@ extern struct nlm_node_data *__node_data[];
 #define NODE_CPU_MASK(nid)	(&__node_data[nid]->cpu.mask)
 #define NODE_MEM_DATA(nid)	(&__node_mem_data[nid])
 
-extern int get_node(unsigned long pfn);
+extern int nlm_get_node(unsigned long pfn);
 
 static inline unsigned int pa_to_nid(unsigned long addr)
 {
@@ -64,7 +64,7 @@ static inline unsigned int pa_to_nid(unsigned long addr)
 	/* special case: get node ID from dram_map info */
 	if (addr == 0)
 	{
-		i = get_node(pfn);
+		i = nlm_get_node(pfn);
 		// printk("** special case: returning node %d.\n", i);
 		return i;
 	}
diff --git a/arch/mips/netlogic/xlp/numa.c b/arch/mips/netlogic/xlp/numa.c
index ad45c20..37bc7aa 100644
--- a/arch/mips/netlogic/xlp/numa.c
+++ b/arch/mips/netlogic/xlp/numa.c
@@ -22,6 +22,8 @@ extern unsigned long setup_zero_pages(void);
 struct nlm_node_data *__node_data[NLM_MAX_CPU_NODE];
 struct nlm_node_data __node_data_holder[NLM_MAX_CPU_NODE];
 struct nlm_mem_info __node_mem_data[MAX_NUMNODES];
+EXPORT_SYMBOL(__node_data);
+EXPORT_SYMBOL(__node_mem_data);
 
 struct xlp_dram_mapping {
 	unsigned long low_pfn;
@@ -194,7 +196,7 @@ static int dram_get_node_id (unsigned long start_pfn, unsigned long end_pfn)
 }
 
 /* This is used very early in boot process to build the node mem regions */
-int get_node(unsigned long pfn)
+int nlm_get_node(unsigned long pfn)
 {
 	int i;
 	for(i=0; i < NLM_NODES_MAX_DRAM_REGION; i++) {
@@ -204,6 +206,8 @@ int get_node(unsigned long pfn)
 	}
 	panic("Invalid PFN Passed: Cannot get node id\n");
 }
+EXPORT_SYMBOL(nlm_get_node);
+
 /**
  * boot memory initialization for NUMA architecture.
  *
@@ -241,7 +245,7 @@ void __init nlm_numa_bootmem_init(unsigned long reserved_end)
 		end = PFN_DOWN(boot_mem_map.map[i].addr
 				+ boot_mem_map.map[i].size);
 
-		node = get_node(start);
+		node = nlm_get_node(start);
 		seg = node_mem_info[node].frags;
 		node_mem_info[node].mem[seg].start_pfn = start;
 		node_mem_info[node].mem[seg].end_pfn = end;
-- 
1.8.4.93.g57e4c17

