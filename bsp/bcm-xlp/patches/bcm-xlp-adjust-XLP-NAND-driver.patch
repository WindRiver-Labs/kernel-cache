From 9d7d54bc21771f2ed3440dda9c60ae855f3d5f72 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Mon, 9 Sep 2013 10:49:10 +0800
Subject: [PATCH 557/565] bcm-xlp: adjust XLP NAND driver

According to this on-board NAND chip's manual, set ecc.strength as 4,
set bbt_options as NAND_BBT_USE_FLASH.

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/xlp_plat_nand.c | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/arch/mips/netlogic/xlp/xlp_plat_nand.c b/arch/mips/netlogic/xlp/xlp_plat_nand.c
index 69df1aa..ecf228d 100644
--- a/arch/mips/netlogic/xlp/xlp_plat_nand.c
+++ b/arch/mips/netlogic/xlp/xlp_plat_nand.c
@@ -324,6 +324,7 @@ void onfi_init(struct nand_chip *chip)
 		nand_reg_write(node, NAND_CTRL, val);
 
 		chip->ecc.size   = 512;
+		chip->ecc.strength  = 4;
 		chip->ecc.bytes  = ecc_bytes;
 		chip->ecc.steps	 = state->page_size / 512;
 		chip->ecc.total	 = chip->ecc.steps * chip->ecc.bytes;
@@ -686,7 +687,7 @@ static void write_buf(struct mtd_info *mtd, const u8 *buf, int len)
 
 static int read_page(struct mtd_info *mtd,
                      struct nand_chip *chip,
-                     uint8_t *buf, int page)
+                     uint8_t *buf, int oob_required, int page)
 {
         struct nand_info *info = (struct nand_info *)chip->priv;
         struct nand_state *state = (struct nand_state *)info->nand_state;
@@ -700,17 +701,19 @@ static int read_page(struct mtd_info *mtd,
         return 0;
 }
 
-static void write_page(struct mtd_info *mtd,
+static int write_page(struct mtd_info *mtd,
                        struct nand_chip *chip,
-                       const uint8_t *buf)
+                       const uint8_t *buf, int oob_required)
 {
         struct nand_info *info = (struct nand_info *)chip->priv;
         struct nand_state *state = (struct nand_state *)info->nand_state;
 
         if (state->cs < 0)
-                return;
+                return state->cs;
         dbp_print ("Write page %p\n",buf);
         write_buf(mtd, buf, mtd->writesize);
+	
+	return 0;
 }
 
 static int waitfunc(struct mtd_info *mtd, struct nand_chip *chip)
@@ -741,7 +744,7 @@ static int waitfunc(struct mtd_info *mtd, struct nand_chip *chip)
 /*
  * Probe for the NAND device.
  */
-static int __devinit xlp_plat_nand_probe(struct platform_device *pdev)
+static int xlp_plat_nand_probe(struct platform_device *pdev)
 {
         struct plat_nand_data *data = NULL;
 	struct nand_info *info = NULL;
@@ -749,7 +752,6 @@ static int __devinit xlp_plat_nand_probe(struct platform_device *pdev)
         uint32_t val;
 	int node = pdev->id;
 
-
         data = (struct plat_nand_data *)(platform_get_drvdata(pdev));
         if (!data) {
                 dev_err(&pdev->dev, "failed to get device structure.\n");
@@ -881,7 +883,8 @@ static struct platform_nand_data xlp_nand_flash_data __refdata = {
 		.nr_chips = 1,
 		.partitions = &xlp_nand_partitions[0],
 	        .chip_delay = 15,
-		.options = NAND_NO_READRDY | NAND_NO_AUTOINCR,
+		.options = NAND_NEED_READRDY,
+		.bbt_options = NAND_BBT_USE_FLASH,
 	},
 	.ctrl={
 		.probe = xlp_plat_nand_probe,
-- 
1.8.4.93.g57e4c17

