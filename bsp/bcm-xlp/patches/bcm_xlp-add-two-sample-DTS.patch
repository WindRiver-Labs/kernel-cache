From cdb5cc48d9a94ada815775cd91c5150c7cc401af Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Wed, 17 Apr 2013 19:20:58 +0800
Subject: [PATCH 001/565] bcm_xlp: add two sample DTS

Add two sample DTS. Also adjust some kernel options for DTB analysis.

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/Kconfig                           |  47 +-
 arch/mips/boot/dts/xlp2xx-linux.dts         | 839 ++++++++++++++++++++++++++++
 arch/mips/boot/dts/xlp_evp.dts              | 726 ++++++++++++++++++++++++
 arch/mips/include/asm/netlogic/mips-extns.h | 289 ----------
 arch/mips/netlogic/Platform                 |   4 +-
 arch/mips/netlogic/common/smp.c             | 290 ----------
 arch/mips/netlogic/xlp/setup.c              | 111 +---
 7 files changed, 1626 insertions(+), 680 deletions(-)
 create mode 100755 arch/mips/boot/dts/xlp2xx-linux.dts
 create mode 100644 arch/mips/boot/dts/xlp_evp.dts
 delete mode 100644 arch/mips/include/asm/netlogic/mips-extns.h
 delete mode 100644 arch/mips/netlogic/common/smp.c

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index e53e2b4..d511215 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -812,11 +812,16 @@ config NLM_XLR_BOARD
 
 config NLM_XLP_BOARD
 	bool "Netlogic XLP based systems"
+	select SMP
 	select BOOT_ELF32
-	select NLM_COMMON
+	select NLMCOMMON
+	select NLM_XLP
 	select SYS_HAS_CPU_XLP
 	select SYS_SUPPORTS_SMP
+	select SYS_SUPPORTS_HOTPLUG_CPU
 	select HW_HAS_PCI
+	select ARCH_SUPPORTS_MSI
+	select SWAP_IO_SPACE
 	select SYS_SUPPORTS_32BIT_KERNEL
 	select SYS_SUPPORTS_64BIT_KERNEL
 	select 64BIT_PHYS_ADDR
@@ -828,10 +833,12 @@ config NLM_XLP_BOARD
 	select CEVT_R4K
 	select CSRC_R4K
 	select IRQ_CPU
-	select ZONE_DMA32 if 64BIT
+	select ZONE_DMA if 64BIT
 	select SYNC_R4K
 	select SYS_HAS_EARLY_PRINTK
-	select USE_OF
+	select SYS_SUPPORTS_NUMA
+	select SYS_SUPPORTS_HUGETLBFS
+	select ARCH_THREAD_INFO_ALLOCATOR
 	help
 	  This board is based on Netlogic XLP Processor.
 	  Say Y here if you have a XLP based board.
@@ -958,6 +965,19 @@ config DMA_NONCOHERENT
 config NEED_DMA_MAP_STATE
 	bool
 
+config FDT
+	bool "Flattened Device Tree Support"
+	depends on NLM_XLP
+	default y
+	help
+	  When using Bootloaders such as U-Boot, firmware
+	  configuration is passed through to Linux using 
+	  an FDT. Although similar in nature to the Open
+	  Firmware DeviceTree framework, the scope of FDT
+	  support for NetLogic Kernels is mostly limited
+	  to a model of passing/parsing firmware info. 
+	  Similar to the PowerPC port.
+
 config SYS_HAS_EARLY_PRINTK
 	bool
 
@@ -1145,8 +1165,8 @@ config BOOT_ELF32
 
 config MIPS_L1_CACHE_SHIFT
 	int
-	default "4" if MACH_DECSTATION || MIKROTIK_RB532 || PMC_MSP4200_EVAL || SOC_RT288X
-	default "6" if MIPS_CPU_SCACHE
+	default "4" if MACH_DECSTATION || MIKROTIK_RB532 || PMC_MSP4200_EVAL
+	default "6" if MIPS_CPU_SCACHE || CPU_XLP
 	default "7" if SGI_IP22 || SGI_IP27 || SGI_IP28 || SNI_RM || CPU_CAVIUM_OCTEON
 	default "5"
 
@@ -1487,10 +1507,16 @@ config CPU_XLP
 	select CPU_SUPPORTS_32BIT_KERNEL
 	select CPU_SUPPORTS_64BIT_KERNEL
 	select CPU_SUPPORTS_HIGHMEM
+	select CPU_HAS_LLSC
 	select WEAK_ORDERING
 	select WEAK_REORDERING_BEYOND_LLSC
 	select CPU_HAS_PREFETCH
 	select CPU_MIPSR2
+	select HAVE_EFFICIENT_UNALIGNED_ACCESS
+        select GENERIC_GPIO
+        select GPIO_SYSFS
+        select ARCH_REQUIRE_GPIOLIB
+	select CPU_SUPPORTS_HUGEPAGES
 	help
 	  Netlogic Microsystems XLP processors.
 endchoice
@@ -1682,7 +1708,7 @@ config CPU_MIPSR1
 
 config CPU_MIPSR2
 	bool
-	default y if CPU_MIPS32_R2 || CPU_MIPS64_R2 || CPU_CAVIUM_OCTEON
+	default y if CPU_MIPS32_R2 || CPU_MIPS64_R2 || CPU_CAVIUM_OCTEON || CPU_XLP
 
 config SYS_SUPPORTS_32BIT_KERNEL
 	bool
@@ -1872,11 +1898,11 @@ config CPU_GENERIC_DUMP_TLB
 
 config CPU_R4K_FPU
 	bool
-	default y if !(CPU_R3000 || CPU_R6000 || CPU_TX39XX || CPU_CAVIUM_OCTEON)
+	default y if !(CPU_R3000 || CPU_R6000 || CPU_TX39XX || CPU_CAVIUM_OCTEON || CPU_XLP)
 
 config CPU_R4K_CACHE_TLB
 	bool
-	default y if !(CPU_R3000 || CPU_R8000 || CPU_SB1 || CPU_TX39XX || CPU_CAVIUM_OCTEON)
+	default y if !(CPU_R3000 || CPU_R8000 || CPU_SB1 || CPU_TX39XX || CPU_CAVIUM_OCTEON || CPU_XLP)
 
 choice
 	prompt "MIPS MT options"
@@ -2161,6 +2187,7 @@ config SYS_SUPPORTS_NUMA
 
 config NODES_SHIFT
 	int
+	default "2" if NLM_XLP_BOARD
 	default "6"
 	depends on NEED_MULTIPLE_NODES
 
@@ -2487,7 +2514,7 @@ source "drivers/pci/hotplug/Kconfig"
 
 config RAPIDIO
 	bool "RapidIO support"
-	depends on PCI
+	depends on PCI || NLM_XLP
 	default n
 	help
 	  If you say Y here, the kernel will include drivers and
@@ -2558,7 +2585,7 @@ config ARCH_HIBERNATION_POSSIBLE
 
 config ARCH_SUSPEND_POSSIBLE
 	def_bool y
-	depends on SYS_SUPPORTS_HOTPLUG_CPU || !SMP
+	depends on (SYS_SUPPORTS_HOTPLUG_CPU || !SMP) && !NLM_XLP
 
 source "kernel/power/Kconfig"
 
diff --git a/arch/mips/boot/dts/xlp2xx-linux.dts b/arch/mips/boot/dts/xlp2xx-linux.dts
new file mode 100755
index 0000000..aef1a23
--- /dev/null
+++ b/arch/mips/boot/dts/xlp2xx-linux.dts
@@ -0,0 +1,839 @@
+/*
+ * XLP2XX Device Tree Source
+ */
+
+/dts-v1/;
+
+/ {
+	model = "netlogic,XLP-FVP";
+	compatible = "netlogic,xlp";
+	#address-cells = <0x2>;
+	#size-cells = <0x2>;
+
+	memory {
+		device_type = "memory";
+		reg = <0x0 0x1000000 0x0 0xb000000 0x0 0x20000000 0x0 0xa0000000 0x0 0xe0000000 0x0 0x20000000>;
+	};
+
+	hypervisor {
+		hypervisor-name = "Xen";
+		alloc_dom0_memory = <0x0>;
+		bootargs = "ncores=4 dom0_loadaddr=0x72000000 dom0_size=0x1c000000 dom0_cpumask=0xffff -- ";
+		domain_heap = <0x80000000 0x20000000>;
+	};
+
+	doms {
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+
+		dom@0 {
+			device_type = "domain";
+			os = "linux";
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+
+			cpu {
+				onlinemask = <0xff>;
+				nae-rx-vc = <0x0>;
+				nae-fb-vc = <0x1>;
+				napi-vc-mask = <0xb>;
+				sae-rx-vc = <0x0>;
+				sae-rx-sync-vc = <0x3>;
+				ipsec-async-vc = <0x3>;
+				ipsec-sync-vc = <0x2>;
+			};
+
+			uart {
+				id = <0x0>;
+				owner = <0x1>;
+				sharedcfg = <0x1f000000>;
+			};
+
+			fmn {
+				node_0_vc_mask = <0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb>;
+			};
+
+			nae {
+				freein-fifo-mask = <0xff 0x0 0x0 0x0>;
+				vfbtbl-sw-offset = <0x0 0x0 0x0 0x0>;
+				vfbtbl-sw-nentries = <0x20 0x20 0x20 0x20>;
+				vfbtbl-hw-offset = <0x20 0x20 0x20 0x20>;
+				vfbtbl-hw-nentries = <0x14 0x14 0x14 0x14>;
+			};
+
+			owner-config {
+				nae = <0x1>;
+				sae = <0x1>;
+				rsa = <0x1>;
+				fmn = <0x1>;
+			};
+		};
+	};
+
+	chosen {
+/*
+		bootargs = " console=ttyS0,115200  rhash_entries=1048576";
+		bootargs = "ramdisk=204800 rd_start=0xffffffff88000000 rd_size=0x01000000 root=/dev/ram rw console=ttyS0,115200";
+*/
+		bootargs = "root=/dev/nfs rw nfsroot=192.168.0.1:/nfsroot/rootfs,nfsvers=3 ip=192.168.0.2:192.168.0.1:192.168.0.1:255.255.254.0:xlp:eth0:off console=ttyS0,115200";
+	};
+
+	firmware-download {
+		u-boot = <0xc100000 0x3f00000>;
+		sysconfig = <0x100000 0x100000>;
+		hypervisor = <0x8800000 0x800000>;
+		dom0 = <0x9000000 0x3000000>;
+		domU-ramdisk = <0x60000000 0x60800000>;
+	};
+
+	soc {
+		#address-cells = <0x2>;
+		#size-cells = <0x1>;
+		compatible = "simple-bus";
+		ranges = <0x0 0x0 0x0 0x18000000 0x4000000 0x1 0x0 0x0 0x16000000 0x1000000>;
+
+		serial@30000 {
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x0 0x30100 0xa00>;
+			reg-shift = <0x2>;
+			reg-io-width = <0x4>;
+			clock-frequency = <0x7f28155>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x11>;
+		};
+
+		serial@31000 {
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x0 0x31100 0xa00>;
+			reg-shift = <0x2>;
+			reg-io-width = <0x4>;
+			clock-frequency = <0x7f28155>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x12>;
+		};
+
+		ocores@37100 {
+			compatible = "opencores,i2c-ocores";
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			reg = <0x0 0x37100 0x20>;
+			reg-shift = <0x2>;
+			reg-io-width = <0x4>;
+			clock-frequency = <0x1e84800>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x1e>;
+		};
+
+		ocores@37120 {
+			compatible = "opencores,i2c-ocores";
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			reg = <0x0 0x37120 0x20>;
+			reg-shift = <0x2>;
+			reg-io-width = <0x4>;
+			clock-frequency = <0x1e84800>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x1f>;
+
+			rtc@68 {
+				compatible = "dallas,ds1374";
+				reg = <0x68>;
+			};
+
+			dtt@4c {
+				compatible = "national,lm90";
+				reg = <0x4c>;
+			};
+		};
+
+		pic@4000 {
+			interrupt-controller;
+			#address-cells = <0x0>;
+			#interrupt-cells = <0x1>;
+			reg = <0x0 0x4000 0x200>;
+			linux,phandle = <0x1>;
+		};
+
+		nor_flash@1,0 {
+			compatible = "cfi-flash";
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			bank-width = <0x2>;
+			reg = <0x1 0x0 0x1000000>;
+
+			partition@0 {
+				label = "x-loader";
+				reg = <0x0 0x100000>;
+				read-only;
+			};
+
+			partition@100000 {
+				label = "u-boot";
+				reg = <0x100000 0x100000>;
+			};
+
+			partition@200000 {
+				label = "kernel";
+				reg = <0x200000 0x500000>;
+			};
+
+			partition@700000 {
+				label = "rootfs";
+				reg = <0x700000 0x800000>;
+			};
+
+			partition@f00000 {
+				label = "env";
+				reg = <0xf00000 0x100000>;
+				read-only;
+			};
+		};
+
+		fmn@node-0 {
+			default-credits = <0x32>;
+			default-queue-size = <0x4000>;
+			fmn-spill-mem-base = <0x0 0x10000000>;
+			fmn-spill-mem-size = <0x0 0x2000000>;
+
+			q-config {
+
+				cpu {
+					queue-size = <0x8000>;
+
+					credits-from {
+						node-0 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x1f4 0x0 0x0 0x96>;
+					};
+				};
+
+				nae {
+
+					credits-from {
+						node-0 = <0x64 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					};
+				};
+
+				srio {
+
+					credits-from {
+						node-0 = <0x96 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					};
+				};
+			};
+		};
+
+		fmn@node-1 {
+			default-credits = <0x32>;
+			default-queue-size = <0x4000>;
+			fmn-spill-mem-base = <0x0 0x0>;
+			fmn-spill-mem-size = <0x0 0x2000000>;
+
+			q-config {
+			};
+		};
+
+		fmn@node-2 {
+		};
+
+		fmn@node-3 {
+		};
+
+		nae@node-0 {
+			model = "MIPS,XLP8XX NAE CFG";
+			compatible = "NETL,XLP8XX_A0";
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			frequency = <0x1f4>;
+
+			ucore {
+
+				src@1 {
+					num-opcodes = <0x240>;
+					path = "/home/yjin-local/bcm-sdk/sdk-base/sysconfig/nae/ucore/linux-ucore.c";
+					timestamp = "Tue Apr 23 13:07:50 2013\n";
+					mask = <0xff>;
+					opcodes = <0x3c1c0010 0x279cf808 0x3c020010 0x2442f808 0x3c030010 0x2463f808 0xac400000 0x43082b 0x1420fffd 0x24420004 0x3c1d0010 0x27bdf9c0 0x27a50020 0x27a60028 0xaca00000 0xacc00000 0xc000029 0x2021 0x1000ffff 0x0 0x3c020000 0x8c420934 0x27bdffe0 0x2403ffff 0xafbf001c 0xafb10018 0x10430009 0xafb00014 0x3c100000 0x26100934 0x2411ffff 0x40f809 0x2610fffc 0x8e020000 0x1451fffc 0x0 0x8fbf001c 0x8fb10018 0x8fb00014 0x3e00008 0x27bd0020 0x27bdfea8 0xafa00030 0xafa0002c 0xafa00028 0xafa00024 0xafa00020 0xafa0001c 0xafa00018 0xafa00014 0xafa00010 0xafa0000c 0xafa00008 0xafa00004 0x8fa30004 0x2c620048 0x10400012 0x3c040001 0x34848000 0x8fb80004 0x8fad0004 0x187080 0xd6080 0x1845821 0x8d6a0000 0x27af0034 0x1ee4821 0xad2a0000 0x8fa80004 0x25070001 0xafa70004 0x8fa60004 0x2cc50048 0x14a0fff1 0x0 0x8fa20040 0x30590002 0x13200050 0x3c020010 0x3c1f2aaa 0x37e3aaab 0x24060800 0x3c050178 0x3c040170 0x34088004 0x8d070000 0x8c4ffe4c 0xf3c02 0xafa70008 0x8c4dfe50 0xd7402 0xafae002c 0x904cfe61 0x318b001f 0xafab0000 0x8fab0008 0x8fac002c 0x8fb80000 0x3030018 0x184fc3 0x4010 0x1094023 0x85040 0x8f8c0 0x250d0006 0x3eac823 0xd7080 0x3193823 0x3ae4821 0x8d2a0034 0x77880 0x8fb90048 0x1e73821 0xeaf806 0x33ef001f 0x19c200 0x8fae0038 0x1f86821 0x8faa0044 0xd4880 0x1140001d 0x12e4821 0x299805dd 0x13000020 0x0 0x250a000c 0xa6080 0x3ac5021 0x8d5f0034 0xffc806 0x11660007 0x332a001f 0x25080012 0x86880 0x3ad7021 0x8dcb0034 0xeb4006 0x310a001f 0x31390fff 0x19c200 0x370f0001 0x34088030 0xad0f0000 0x8fa70040 0x30e90008 0x11200006 0xa5380 0x34088000 0x8000054 0xad040000 0x8000085 0x2508000c 0x145f825 0x34088000 0x8000054 0xad1f0000 0x800007e 0x250a0012 0x8fa40040 0x30830001 0x146000e2 0x3c020010 0x8fa60040 0x30c50004 0x10a00198 0x3c02dead 0x3c030002 0x80000ae 0x3442beef 0xafa00004 0x8fa70004 0x2ce90064 0x1520017f 0x0 0x8c6fbffc 0x15e2fff9 0x3c0d0001 0x3c03dead 0x3463beff 0x3c192aaa 0x3c1f0178 0x3c080170 0x3c020010 0x2466fff0 0x35a5c000 0x3724aaab 0x240a0800 0x27e90018 0x25070018 0x34088004 0x8d0c0000 0x8c59fe4c 0x194402 0xafa80008 0x8c58fe50 0x185c02 0xafab002c 0x8c4ffe54 0x31ed00ff 0xafad0018 0x8c4efe00 0xafae0010 0x8c5ffe04 0xafbf000c 0x8c59fe08 0xafb90020 0x9058fe01 0x904bfe02 0x186a00 0xb7c00 0x8fa80018 0x904bfe05 0x1aff821 0x904efe00 0x904ffe06 0x9059fe03 0xac48fe0c 0x3eec021 0x1834021 0x905ffe04 0x196600 0xb7200 0xf6c00 0x1cdc821 0x30cc021 0x904cfe07 0x33f7821 0x904efe09 0x905ffe0a 0xc5e00 0x1eb6821 0xe6200 0x904bfe08 0x904efe0b 0x1fcc00 0x1997821 0x1ebc821 0xefe00 0x33f6021 0x188c821 0x195f02 0x197900 0x30cf823 0x16f7025 0x3ee7826 0x1a86821 0xfc180 0xf4682 0x1af6023 0x1185825 0x16cc026 0x32df821 0x18ce02 0x186a00 0x3f84023 0x32d7025 0x1c8c826 0x1ff6021 0x197c02 0x19fc00 0x30cc021 0x1ff5825 0x1996023 0x16cf826 0x1f4342 0x1f6cc0 0x10d7025 0x31f7823 0x1cf7826 0x904dfe0f 0x904efe0e 0x338c821 0xf5f02 0xf6100 0x16cc025 0x3f9f821 0x904cfe0c 0x32f4023 0xe5c00 0xdce00 0x904dfe0d 0x1ff7821 0x3084026 0x32bc021 0x30cc821 0xd7200 0xf6482 0xfc380 0x32e5821 0x1986825 0x10fc826 0x32dc823 0x17ff821 0x197542 0x195ac0 0x1cb4025 0x33f6026 0x1886023 0xcc1c2 0xcfe40 0x31f6825 0x18f5826 0x16d5823 0xb7402 0xb4400 0x1c87825 0x179c026 0x30fc023 0x18ff02 0x18c900 0x30c4026 0x3f96825 0x10d7023 0xe7c82 0xe6380 0x1cbc826 0x1ecf825 0x33f6823 0x1b84026 0xd7202 0x10e5823 0x316f0fff 0xafaf0014 0x8fac0014 0xac4cfe04 0xac46fe00 0x8fbf0014 0x1fc880 0x325c021 0x8f0d0000 0x31ae001f 0xafae0000 0x8fad0008 0x8fae002c 0x8fb90000 0x3240018 0x1947c3 0x5810 0x1685823 0xb6040 0xb78c0 0x1ecf823 0x256f0006 0xf6080 0x33f4023 0x3acf821 0x8ff90034 0x8c080 0x8faf0048 0x3084021 0x119c006 0x330c001f 0xfca00 0x1997821 0x8fbf0038 0x8fac0044 0xfc080 0x118000cf 0x31f7821 0x29cc05dd 0x118000d2 0x0 0x256c000c 0xcc880 0x3b9c021 0x8f0e0034 0x10ef806 0x11aa0007 0x33ec001f 0x256b0012 0xbf880 0x3bf6021 0x8d8b0034 0x10b6806 0x31ac001f 0x31f90fff 0x19c200 0x370e0001 0x34088030 0xad0e0000 0x8fa80040 0x310f0008 0x11e000b8 0xc5b80 0x34088000 0x80000bd 0xad070000 0x3c089e37 0x3c0c2aaa 0x2446fe4c 0x24050006 0x250379b9 0x3584aaab 0x240a0800 0x3c090178 0x3c070170 0x34088004 0x8d0b0000 0x8c4cfe4c 0xcfc02 0xafbf0008 0x8c59fe4c 0x19c202 0x330f000f 0xafaf0030 0x8c4dfe50 0xd7402 0xafae002c 0x8c4bfe54 0x316800ff 0xafa80018 0x8fac0030 0xcf880 0x3e64021 0x8d19000c 0x19c302 0x330f000f 0xafaf0028 0x8d0d000c 0x31ae003f 0xafae0024 0x8fab0018 0x11650071 0x0 0x8c4ffe00 0xafaf0010 0x8c4cfe04 0xafac000c 0x8c48fe08 0xafa80020 0x8fae0010 0x8fab000c 0x8fa80020 0x1c3f821 0x1637821 0x3e86823 0x1afc823 0x8c342 0x338c826 0x1e86023 0x1995823 0x197200 0x1cb7026 0x119f823 0x3eec023 0xe6b42 0x1b8c026 0x32e7823 0x1f84023 0x186302 0x1886026 0x1d85823 0x16cc823 0xcfc00 0x3f9c826 0x30c6823 0x1b97023 0x197942 0x1ee7026 0x1994023 0x10ef823 0xe58c2 0x17f6026 0x32ec023 0x30c7823 0xc6a80 0x1af5826 0x1cc4023 0x10bf823 0xbcbc2 0x33fc026 0xafb80014 0x8fad0014 0x31af001f 0xafaf0000 0x8fad0008 0x8fae002c 0x8fbf0000 0x3e40018 0x1f47c3 0x5810 0x1685823 0xbc840 0xb60c0 0x1997823 0x256c0006 0xcc880 0x3ef4023 0x3b9f821 0x8fef0034 0x8c080 0x8fac0048 0x3084021 0x10fc006 0x3319001f 0xc7a00 0x32f6021 0x8fbf0038 0x8fb90044 0xcc080 0x1320001d 0x31f7821 0x29ce05dd 0x11c00032 0x0 0x256c000c 0xc6080 0x3acc821 0x8f3f0034 0x11fc006 0x11aa0007 0x330c001f 0x256b0012 0xbc080 0x3b87021 0x8dcb0034 0x10b6806 0x31ac001f 0x31ed0fff 0xdca00 0x373f0001 0x34088030 0xad1f0000 0x8fa80040 0x310f0008 0x11e00006 0xc5b80 0x34088000 0x800018c 0xad070000 0x8000201 0x256b000c 0x1696025 0x34088000 0x800018c 0xad0c0000 0x8fae0024 0x31cb0010 0x1160ff8d 0x0 0x8fb90028 0x8fbf0030 0x8faf002c 0x3f9c021 0x186880 0x15afff86 0x0 0x8d0e0004 0xe5c02 0xafab001c 0x8fac001c 0x3188001f 0x80001db 0xafa80000 0x80001fa 0x256c0012 0x8fb80004 0x270e0001 0xafae0004 0x8fa40004 0x2c8a0064 0x1140fe7c 0x0 0x800022c 0x0 0x8000172 0x256b000c 0x1696825 0x34088000 0x80000bd 0xad0d0000 0x800016b 0x256c0012 0x1021 0x3e00008 0x27bd0158>;
+				};
+			};
+
+			freein-fifo-config {
+				freein-fifo-spill-mem-range = <0x0 0x0 0x0 0x200000>;
+				freein-fifo-onchip-num-descs = <0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38>;
+				freein-fifo-spill-num-descs = <0x4b0>;
+				port-fifo-en = <0x1>;
+			};
+
+			vfbid-config {
+			};
+
+			poe {
+				mode = "bypass";
+				distribution-enable = <0x1>;
+				dist-drop-enable = <0x0>;
+				class-drop-enable = <0x0>;
+				drop-timer = <0x0>;
+				dest-threshold = <0xa>;
+				dist-threshold = <0xa 0xa 0xa 0xa>;
+				statistics-enable = <0x0>;
+				poe-spill-address = <0x0>;
+				poe-spill-length = <0x0>;
+
+				distribution_vectors {
+					dv0 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x1>;
+					dv1 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv2 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv3 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv4 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv5 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv6 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv7 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv8 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv9 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv10 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv11 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv12 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv13 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv14 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv15 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+				};
+			};
+
+			complex@0 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+					msec-port-enable = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					msec-port-enable = <0x0>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					mgmt-port = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x4 0x7 0x6 0x5>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+					msec-port-enable = <0x0>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+			};
+
+			complex@1 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+					msec-port-enable = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					msec-port-enable = <0x0>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x8 0xb 0xa 0x9>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+					msec-port-enable = <0x0>;
+				};
+			};
+
+			complex@2 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x0 0x3 0x2 0x1>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@3 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0xc 0xf 0xe 0xd>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@4 {
+				device_type = "nae-complex";
+				mode = "sgmii";
+
+				sgmii {
+					loopback = <0x0 0x0>;
+					mgmt-port = <0x1 0x0>;
+					iface-fifo-size = <0xd 0xd>;
+					ext-phy-addr = <0x10 0x11>;
+					ext-phy-bus = <0x0 0x0>;
+					num-channels = <0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80>;
+					num-free-descs = <0x34 0x34>;
+					free-desc-size = <0x800 0x800>;
+					ucore-mask = <0xffff 0xffff>;
+				};
+			};
+		};
+
+		nae@node-1 {
+			model = "MIPS,XLP8XX NAE CFG";
+			compatible = "NETL,XLP8XX_A0";
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			frequency = <0x1f4>;
+
+			ucore {
+
+				src@1 {
+					num-opcodes = <0x240>;
+					path = "/home/yjin-local/bcm-sdk/sdk-base/sysconfig/nae/ucore/linux-ucore.c";
+					timestamp = "Tue Apr 23 13:07:50 2013\n";
+					mask = <0xff>;
+					opcodes = <0x3c1c0010 0x279cf808 0x3c020010 0x2442f808 0x3c030010 0x2463f808 0xac400000 0x43082b 0x1420fffd 0x24420004 0x3c1d0010 0x27bdf9c0 0x27a50020 0x27a60028 0xaca00000 0xacc00000 0xc000029 0x2021 0x1000ffff 0x0 0x3c020000 0x8c420934 0x27bdffe0 0x2403ffff 0xafbf001c 0xafb10018 0x10430009 0xafb00014 0x3c100000 0x26100934 0x2411ffff 0x40f809 0x2610fffc 0x8e020000 0x1451fffc 0x0 0x8fbf001c 0x8fb10018 0x8fb00014 0x3e00008 0x27bd0020 0x27bdfea8 0xafa00030 0xafa0002c 0xafa00028 0xafa00024 0xafa00020 0xafa0001c 0xafa00018 0xafa00014 0xafa00010 0xafa0000c 0xafa00008 0xafa00004 0x8fa30004 0x2c620048 0x10400012 0x3c040001 0x34848000 0x8fb80004 0x8fad0004 0x187080 0xd6080 0x1845821 0x8d6a0000 0x27af0034 0x1ee4821 0xad2a0000 0x8fa80004 0x25070001 0xafa70004 0x8fa60004 0x2cc50048 0x14a0fff1 0x0 0x8fa20040 0x30590002 0x13200050 0x3c020010 0x3c1f2aaa 0x37e3aaab 0x24060800 0x3c050178 0x3c040170 0x34088004 0x8d070000 0x8c4ffe4c 0xf3c02 0xafa70008 0x8c4dfe50 0xd7402 0xafae002c 0x904cfe61 0x318b001f 0xafab0000 0x8fab0008 0x8fac002c 0x8fb80000 0x3030018 0x184fc3 0x4010 0x1094023 0x85040 0x8f8c0 0x250d0006 0x3eac823 0xd7080 0x3193823 0x3ae4821 0x8d2a0034 0x77880 0x8fb90048 0x1e73821 0xeaf806 0x33ef001f 0x19c200 0x8fae0038 0x1f86821 0x8faa0044 0xd4880 0x1140001d 0x12e4821 0x299805dd 0x13000020 0x0 0x250a000c 0xa6080 0x3ac5021 0x8d5f0034 0xffc806 0x11660007 0x332a001f 0x25080012 0x86880 0x3ad7021 0x8dcb0034 0xeb4006 0x310a001f 0x31390fff 0x19c200 0x370f0001 0x34088030 0xad0f0000 0x8fa70040 0x30e90008 0x11200006 0xa5380 0x34088000 0x8000054 0xad040000 0x8000085 0x2508000c 0x145f825 0x34088000 0x8000054 0xad1f0000 0x800007e 0x250a0012 0x8fa40040 0x30830001 0x146000e2 0x3c020010 0x8fa60040 0x30c50004 0x10a00198 0x3c02dead 0x3c030002 0x80000ae 0x3442beef 0xafa00004 0x8fa70004 0x2ce90064 0x1520017f 0x0 0x8c6fbffc 0x15e2fff9 0x3c0d0001 0x3c03dead 0x3463beff 0x3c192aaa 0x3c1f0178 0x3c080170 0x3c020010 0x2466fff0 0x35a5c000 0x3724aaab 0x240a0800 0x27e90018 0x25070018 0x34088004 0x8d0c0000 0x8c59fe4c 0x194402 0xafa80008 0x8c58fe50 0x185c02 0xafab002c 0x8c4ffe54 0x31ed00ff 0xafad0018 0x8c4efe00 0xafae0010 0x8c5ffe04 0xafbf000c 0x8c59fe08 0xafb90020 0x9058fe01 0x904bfe02 0x186a00 0xb7c00 0x8fa80018 0x904bfe05 0x1aff821 0x904efe00 0x904ffe06 0x9059fe03 0xac48fe0c 0x3eec021 0x1834021 0x905ffe04 0x196600 0xb7200 0xf6c00 0x1cdc821 0x30cc021 0x904cfe07 0x33f7821 0x904efe09 0x905ffe0a 0xc5e00 0x1eb6821 0xe6200 0x904bfe08 0x904efe0b 0x1fcc00 0x1997821 0x1ebc821 0xefe00 0x33f6021 0x188c821 0x195f02 0x197900 0x30cf823 0x16f7025 0x3ee7826 0x1a86821 0xfc180 0xf4682 0x1af6023 0x1185825 0x16cc026 0x32df821 0x18ce02 0x186a00 0x3f84023 0x32d7025 0x1c8c826 0x1ff6021 0x197c02 0x19fc00 0x30cc021 0x1ff5825 0x1996023 0x16cf826 0x1f4342 0x1f6cc0 0x10d7025 0x31f7823 0x1cf7826 0x904dfe0f 0x904efe0e 0x338c821 0xf5f02 0xf6100 0x16cc025 0x3f9f821 0x904cfe0c 0x32f4023 0xe5c00 0xdce00 0x904dfe0d 0x1ff7821 0x3084026 0x32bc021 0x30cc821 0xd7200 0xf6482 0xfc380 0x32e5821 0x1986825 0x10fc826 0x32dc823 0x17ff821 0x197542 0x195ac0 0x1cb4025 0x33f6026 0x1886023 0xcc1c2 0xcfe40 0x31f6825 0x18f5826 0x16d5823 0xb7402 0xb4400 0x1c87825 0x179c026 0x30fc023 0x18ff02 0x18c900 0x30c4026 0x3f96825 0x10d7023 0xe7c82 0xe6380 0x1cbc826 0x1ecf825 0x33f6823 0x1b84026 0xd7202 0x10e5823 0x316f0fff 0xafaf0014 0x8fac0014 0xac4cfe04 0xac46fe00 0x8fbf0014 0x1fc880 0x325c021 0x8f0d0000 0x31ae001f 0xafae0000 0x8fad0008 0x8fae002c 0x8fb90000 0x3240018 0x1947c3 0x5810 0x1685823 0xb6040 0xb78c0 0x1ecf823 0x256f0006 0xf6080 0x33f4023 0x3acf821 0x8ff90034 0x8c080 0x8faf0048 0x3084021 0x119c006 0x330c001f 0xfca00 0x1997821 0x8fbf0038 0x8fac0044 0xfc080 0x118000cf 0x31f7821 0x29cc05dd 0x118000d2 0x0 0x256c000c 0xcc880 0x3b9c021 0x8f0e0034 0x10ef806 0x11aa0007 0x33ec001f 0x256b0012 0xbf880 0x3bf6021 0x8d8b0034 0x10b6806 0x31ac001f 0x31f90fff 0x19c200 0x370e0001 0x34088030 0xad0e0000 0x8fa80040 0x310f0008 0x11e000b8 0xc5b80 0x34088000 0x80000bd 0xad070000 0x3c089e37 0x3c0c2aaa 0x2446fe4c 0x24050006 0x250379b9 0x3584aaab 0x240a0800 0x3c090178 0x3c070170 0x34088004 0x8d0b0000 0x8c4cfe4c 0xcfc02 0xafbf0008 0x8c59fe4c 0x19c202 0x330f000f 0xafaf0030 0x8c4dfe50 0xd7402 0xafae002c 0x8c4bfe54 0x316800ff 0xafa80018 0x8fac0030 0xcf880 0x3e64021 0x8d19000c 0x19c302 0x330f000f 0xafaf0028 0x8d0d000c 0x31ae003f 0xafae0024 0x8fab0018 0x11650071 0x0 0x8c4ffe00 0xafaf0010 0x8c4cfe04 0xafac000c 0x8c48fe08 0xafa80020 0x8fae0010 0x8fab000c 0x8fa80020 0x1c3f821 0x1637821 0x3e86823 0x1afc823 0x8c342 0x338c826 0x1e86023 0x1995823 0x197200 0x1cb7026 0x119f823 0x3eec023 0xe6b42 0x1b8c026 0x32e7823 0x1f84023 0x186302 0x1886026 0x1d85823 0x16cc823 0xcfc00 0x3f9c826 0x30c6823 0x1b97023 0x197942 0x1ee7026 0x1994023 0x10ef823 0xe58c2 0x17f6026 0x32ec023 0x30c7823 0xc6a80 0x1af5826 0x1cc4023 0x10bf823 0xbcbc2 0x33fc026 0xafb80014 0x8fad0014 0x31af001f 0xafaf0000 0x8fad0008 0x8fae002c 0x8fbf0000 0x3e40018 0x1f47c3 0x5810 0x1685823 0xbc840 0xb60c0 0x1997823 0x256c0006 0xcc880 0x3ef4023 0x3b9f821 0x8fef0034 0x8c080 0x8fac0048 0x3084021 0x10fc006 0x3319001f 0xc7a00 0x32f6021 0x8fbf0038 0x8fb90044 0xcc080 0x1320001d 0x31f7821 0x29ce05dd 0x11c00032 0x0 0x256c000c 0xc6080 0x3acc821 0x8f3f0034 0x11fc006 0x11aa0007 0x330c001f 0x256b0012 0xbc080 0x3b87021 0x8dcb0034 0x10b6806 0x31ac001f 0x31ed0fff 0xdca00 0x373f0001 0x34088030 0xad1f0000 0x8fa80040 0x310f0008 0x11e00006 0xc5b80 0x34088000 0x800018c 0xad070000 0x8000201 0x256b000c 0x1696025 0x34088000 0x800018c 0xad0c0000 0x8fae0024 0x31cb0010 0x1160ff8d 0x0 0x8fb90028 0x8fbf0030 0x8faf002c 0x3f9c021 0x186880 0x15afff86 0x0 0x8d0e0004 0xe5c02 0xafab001c 0x8fac001c 0x3188001f 0x80001db 0xafa80000 0x80001fa 0x256c0012 0x8fb80004 0x270e0001 0xafae0004 0x8fa40004 0x2c8a0064 0x1140fe7c 0x0 0x800022c 0x0 0x8000172 0x256b000c 0x1696825 0x34088000 0x80000bd 0xad0d0000 0x800016b 0x256c0012 0x1021 0x3e00008 0x27bd0158>;
+				};
+			};
+
+			freein-fifo-config {
+				freein-fifo-spill-mem-range = <0x0 0x0 0x0 0x200000>;
+				freein-fifo-onchip-num-descs = <0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38>;
+				freein-fifo-spill-num-descs = <0x4b0>;
+				port-fifo-en = <0x1>;
+			};
+
+			vfbid-config {
+			};
+
+			poe {
+				mode = "bypass";
+				distribution-enable = <0x1>;
+				dist-drop-enable = <0x0>;
+				class-drop-enable = <0x0>;
+				drop-timer = <0x0>;
+				dest-threshold = <0xa>;
+				dist-threshold = <0xa 0xa 0xa 0xa>;
+				statistics-enable = <0x0>;
+
+				distribution_vectors {
+					dv0 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x1>;
+					dv1 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv2 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv3 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv4 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv5 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv6 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv7 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv8 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv9 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv10 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv11 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv12 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv13 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv14 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv15 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+				};
+			};
+
+			complex@0 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x4 0x7 0x6 0x5>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+			};
+
+			complex@1 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x8 0xb 0xa 0x9>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@2 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x0 0x3 0x2 0x1>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@3 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					ucore-mask = <0xffff>;
+				};
+			};
+
+			complex@4 {
+				device_type = "nae-complex";
+				mode = "sgmii";
+
+				sgmii {
+					loopback = <0x0 0x0>;
+					mgmt-port = <0x1 0x0>;
+					iface-fifo-size = <0xd 0xd>;
+					ext-phy-addr = <0x10 0x11>;
+					ext-phy-bus = <0x0 0x0>;
+					num-channels = <0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80>;
+					num-free-descs = <0x34 0x34>;
+					free-desc-size = <0x800 0x800>;
+					ucore-mask = <0xffff 0xffff>;
+				};
+			};
+		};
+
+		nae@node-2 {
+		};
+
+		nae@node-3 {
+		};
+
+		nodes {
+			num-nodes = <0x1>;
+		};
+	};
+
+	frequency-config {
+		nae = <0xfa>;
+		sae = <0x1f4>;
+		rsa = <0x1f4>;
+		dtre = <0xfa>;
+		cde = <0xfa>;
+	};
+};
diff --git a/arch/mips/boot/dts/xlp_evp.dts b/arch/mips/boot/dts/xlp_evp.dts
new file mode 100644
index 0000000..ef04549
--- /dev/null
+++ b/arch/mips/boot/dts/xlp_evp.dts
@@ -0,0 +1,726 @@
+/*
+ * XLP8XX Device Tree Source for EVP boards
+ */
+
+/dts-v1/;
+/ {
+	model = "netlogic,XLP-EVP";
+	compatible = "netlogic,xlp";
+	#address-cells = <2>;
+	#size-cells = <2>;
+
+	memory {
+		device_type = "memory";
+		reg =  <0 0x00100000 0 0x0FF00000	// 255M at 1M
+			0 0x20000000 0 0xa0000000	// 2560M at 512M
+			0 0xe0000000 3 0x00000000>;	// 12288M at 3584M
+	};
+
+	doms {
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+
+		dom@0 {
+			device_type = "domain";
+			os = "linux";
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+
+			cpu {
+				onlinemask = <0xffffffff>;
+				nae-rx-vc = <0x0>;
+				nae-fb-vc = <0x1>;
+				napi-vc-mask = <0xb>;
+				sae-rx-vc = <0x0>;
+				sae-rx-sync-vc = <0x3>;
+				ipsec-async-vc = <0x3>;
+				ipsec-sync-vc = <0x2>;
+			};
+
+			uart {
+				id = <0x0>;
+				owner = <0x1>;
+				sharedcfg = <0x1f000000>;
+			};
+
+			fmn {
+				node_0_vc_mask = <0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb>;
+				node_1_vc_mask = <0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb>;
+				node_2_vc_mask = <0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb>;
+				node_3_vc_mask = <0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb>;
+			};
+
+			pic {
+			};
+
+			nae {
+				freein-fifo-mask = <0xffff 0x0 0x0 0x0>;
+				vfbtbl-sw-offset = <0x0 0x0 0x0 0x0>;
+				vfbtbl-sw-nentries = <0x20 0x20 0x20 0x20>;
+				vfbtbl-hw-offset = <0x20 0x20 0x20 0x20>;
+				vfbtbl-hw-nentries = <0x14 0x14 0x14 0x14>;
+			};
+
+			owner-config {
+				nae = <0x1>;
+				sae = <0x1>;
+				rsa = <0x1>;
+				fmn = <0x1>;
+			};
+		};
+	};
+
+	chosen {
+		bootargs = "ramdisk=204800 rd_start=0xffffffff88000000 rd_size=0x01000000 root=/dev/ram rw console=ttyS0,115200";
+	};
+
+	firmware-download {
+		u-boot = <0xc100000 0x3f00000>;
+		sysconfig = <0x100000 0x100000>;
+		hypervisor = <0x8800000 0x800000>;
+		dom0 = <0x9000000 0x3000000>;
+		domU-ramdisk = <0x60000000 0x60800000>;
+	};
+
+	soc {
+
+		fmn@node-0 {
+			default-credits = <0x32>;
+			default-queue-size = <0x4000>;
+			fmn-spill-mem-base = <0x0 0x10000000>;
+			fmn-spill-mem-size = <0x0 0x2000000>;
+
+			q-config {
+
+				cpu {
+					queue-size = <0x8000>;
+
+					credits-from {
+						node-0 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x1f4 0x0 0x0 0x96>;
+					};
+				};
+
+				nae {
+
+					credits-from {
+						node-0 = <0x64 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					};
+				};
+
+				srio {
+
+					credits-from {
+						node-0 = <0x96 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					};
+				};
+			};
+		};
+
+		fmn@node-1 {
+			default-credits = <0x32>;
+			default-queue-size = <0x4000>;
+			fmn-spill-mem-base = <0x0 0x0>;
+			fmn-spill-mem-size = <0x0 0x2000000>;
+
+			q-config {
+			};
+		};
+
+		fmn@node-2 {
+		};
+
+		fmn@node-3 {
+		};
+
+		nae@node-0 {
+			model = "MIPS,XLP8XX NAE CFG";
+			compatible = "NETL,XLP8XX_A0";
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			frequency = <0x1f4>;
+
+			ucore {
+
+				src@1 {
+					num-opcodes = <0x25c>;
+					mask = <0xffff>;
+					opcodes = <0x3c1c0010 0x279cf808 0x3c020010 0x2442f808 0x3c030010 0x2463f808 0xac400000 0x43082b 0x1420fffd 0x24420004 0x3c1d0010 0x27bdf9c0 0x27a50020 0x27a60028 0xaca00000 0xacc00000 0xc000029 0x2021 0x1000ffff 0x0 0x3c020000 0x8c4209a4 0x27bdffe0 0x2403ffff 0xafbf001c 0xafb10018 0x10430009 0xafb00014 0x3c100000 0x261009a4 0x2411ffff 0x40f809 0x2610fffc 0x8e020000 0x1451fffc 0x0 0x8fbf001c 0x8fb10018 0x8fb00014 0x3e00008 0x27bd0020 0x27bdfe78 0xafa00000 0xafa00004 0xafa00008 0xafa0000c 0xafa00010 0xafa00014 0xafa00018 0xafa0001c 0xafa00020 0xafa00024 0xafa00028 0xafa0002c 0x8fa3002c 0xafbf0184 0x2c620048 0xafbe0180 0xafb7017c 0xafb60178 0xafb50174 0xafb40170 0xafb3016c 0xafb20168 0xafb10164 0xafb00160 0x10400012 0x27a50034 0x3c040001 0x34848000 0x8fb0002c 0x8fae002c 0x107880 0xe6880 0x1a46021 0x8d8b0000 0xaf5021 0xad4b0000 0x8fa9002c 0x25280001 0xafa8002c 0x8fa7002c 0x2ce60048 0x14c0fff2 0x0 0x8fb10040 0x24050002 0x122501b9 0x3c13000f 0x8fa30040 0x24020001 0x1062010f 0x3669fe50 0x8fa70040 0x24060003 0x10e6000d 0x8fbf0184 0x1021 0x8fbe0180 0x8fb7017c 0x8fb60178 0x8fb50174 0x8fb40170 0x8fb3016c 0x8fb20168 0x8fb10164 0x8fb00160 0x3e00008 0x27bd0188 0x3c020001 0x3c0ddead 0x3443bffc 0x8000077 0x35a2beef 0xafa0002c 0x8fac002c 0x2d8b0064 0x156000f1 0x0 0x8c640000 0x1482fff9 0x3c08dead 0x3c02000f 0x3c1e0001 0x3c172aaa 0x3453fe4c 0x3452fe50 0x3451fe54 0x3444fe00 0x3443fe04 0x3446fe08 0x3445fe0c 0x3510beff 0x345ffe01 0x3459fe02 0x3458fe03 0x344ffe05 0x344efe06 0x344dfe07 0x344cfe09 0x350bbeef 0x37cac000 0x80000b3 0x36e9aaab 0x10e000d4 0x0 0x27d4000c 0x14a080 0x3b4b821 0x8ee70034 0x24170800 0x107a006 0x12d70007 0x3294001f 0x27de0012 0x1eb880 0x3b73821 0x8cf60034 0x116f006 0x33d4001f 0x8fa70158 0x8fbe015c 0x1074006 0x3117001f 0x1eb200 0x2f63821 0x74080 0x115f021 0x33d50fff 0x15ba00 0x36e70001 0x34088030 0xad070000 0x3c160178 0x144380 0x36de0018 0x11ea825 0x34088000 0xad150000 0x34088004 0x8d1e0000 0x8e750000 0x15bc02 0xafb70028 0x8e560000 0x164402 0xafa80004 0x8e340000 0x328700ff 0xafa70018 0x8c950000 0xafb50020 0x8c770000 0xafb70024 0x8cd60000 0xafb60010 0x8fa80018 0xaca80000 0x93f40000 0x93270000 0x90960000 0x7ac00 0x14ba00 0x3d04021 0x2f5a021 0x931e0000 0x296b821 0x91f60000 0x91d40000 0x1e3e00 0x90750000 0x2e7b821 0x16f200 0x91a70000 0x14b400 0x3d6a021 0x295f021 0x7ae00 0x3454fe0a 0x91870000 0x3d5b021 0x92950000 0x3454fe0b 0x90de0000 0x92940000 0x73a00 0x15ac00 0xf5a821 0xafa70158 0x14a600 0x2be3821 0xf4a821 0x2c8b021 0x2a84021 0x8f702 0x83900 0x3c7a025 0x2f5a823 0x2b4a826 0x15be82 0x15f180 0x2d53823 0x2fea025 0x287a026 0x1164021 0x14f200 0x14b602 0x2a8a821 0x2de3825 0x1144023 0xe84026 0x8bc02 0x8b400 0x2f6f025 0x2a83823 0x295a021 0x3c7a826 0x15bb42 0x15b4c0 0x1143821 0x2f6f025 0x295a023 0x3d4a026 0x2a7a821 0xf44023 0x14bf02 0x14b100 0x3447fe0f 0x2f6f025 0x90f60000 0x3c84026 0xafb60158 0x345efe0e 0x93d60000 0x8fa70158 0x3457fe0d 0x92f70000 0x90be0000 0x73e00 0x16b400 0xf6b021 0xafa70158 0x295a021 0x2de3821 0x17f200 0xfeb021 0x14bc82 0x14f380 0x2d53821 0x1144026 0x2feb025 0x1164023 0x8bd42 0x8f2c0 0x2feb025 0x107a826 0x2b6a823 0x1539c2 0x15f640 0x2b4a026 0xfeb025 0x296f023 0x1ebc02 0x1e3c00 0x2e7b025 0x3c84026 0x1164023 0x8bf02 0x83900 0x115a826 0x2e7b025 0x2b63823 0x7b482 0x7bb80 0x2d7a825 0xfea026 0x295f023 0x3c83826 0x1eba02 0xf7b023 0x32d40fff 0xafb4001c 0x8fbe001c 0xac7e0000 0xac8b0000 0x8fb5001c 0x154080 0x10a3821 0x8cf70000 0x32f6001f 0xafb60030 0x8fb60028 0x8fb70004 0x8fa70030 0xe90018 0x7f7c3 0xa010 0x29ef023 0x1e4040 0x1ea8c0 0x2a8a023 0xf44023 0x27c70006 0x7a880 0x8a080 0x2884021 0x3b5a021 0x8e870034 0x8fb50048 0xafa70158 0xafb5015c 0x8fb50038 0x8fb40044 0x1680ff2e 0x2ae705dd 0x800009b 0x27de000c 0x8000093 0x27d40012 0x8faa002c 0x25490001 0x8000073 0xafa9002c 0x3c059e37 0x3c042aaa 0x34a379b9 0x3662fe4c 0x3485aaab 0x3667fe54 0x24060006 0x366cfe00 0x366bfe04 0x366afe08 0x240d0800 0x8000197 0x3c040178 0x2b3905dd 0x13200095 0x0 0x27ee000c 0xeb080 0x3b6a821 0x8eb40034 0x1149806 0x130d0007 0x326e001f 0x27ff0012 0x1f7080 0x3aef021 0x8fd70034 0x117c006 0x330e001f 0x111b006 0xfa200 0x32d5001f 0x2b49821 0x13c880 0x3309021 0x325f0fff 0x1f7a00 0x35f10001 0x34088030 0xad110000 0xe4380 0x1048025 0x34088000 0xad100000 0x34088004 0x8d0e0000 0x8c550000 0x15a402 0xafb40028 0x8c530000 0x139202 0x3251000f 0xafb10000 0x8d300000 0x107c02 0xafaf0004 0x8cee0000 0x31c800ff 0xafa80018 0x8fbf0000 0x1ff080 0x3c24021 0x8d19000c 0x19c302 0x3317000f 0xafb70008 0x8d16000c 0x32d5003f 0xafb5000c 0x8fb40018 0x1286004b 0x0 0x8d930000 0xafb30020 0x8d720000 0xafb20024 0x8d4f0000 0xafaf0010 0x8fb10020 0x8fae0024 0x8fa80010 0x223c021 0x1c3c821 0x3088023 0x219f023 0x8fb42 0x3df7826 0x328b823 0x2efa823 0xfb200 0x2d57026 0x10fa023 0x28e9023 0xe9b42 0x272b826 0x1ee8823 0x2378023 0x17c302 0x310a026 0x1d7f823 0x3f4c823 0x14f400 0x3d98826 0x2f4b023 0x2d14023 0x11a942 0x2a8f826 0x2919823 0x27f7823 0x1f90c2 0x24ff026 0x23f8023 0x21e7023 0x1ec280 0x30eb826 0x3fec823 0x337b023 0x17abc2 0x2b6a026 0xafb4001c 0x8fb3001c 0x3272001f 0xafb20030 0x8fb80028 0x8fb90004 0x8fb00030 0x2050018 0x10ffc3 0x9010 0x25ff823 0x27f70006 0x1f78c0 0x1f7040 0x17b080 0x1ee8823 0x3b6a821 0x2114023 0x8eb10034 0x8faf0048 0x8fb00038 0x8fb40044 0x8f080 0x1680ff7e 0x3c84021 0x8000183 0x27ff000c 0x8fb7000c 0x32f60010 0x12c0ffb3 0x0 0x8fbf0008 0x8fae0000 0x8fb90004 0x1dff021 0x1ec080 0x1719ffac 0x0 0x8d110004 0x118402 0xafb00014 0x8faf0014 0x31e8001f 0x80001e6 0xafa80030 0x800017c 0x27ee0012 0x3c122aaa 0x3666fe4c 0x3665fe50 0x3664fe61 0x3643aaab 0x24070800 0x8000238 0x3c020178 0x299205dd 0x1240003f 0x0 0x25a9000c 0x9b080 0x3b6a821 0x8eb40034 0x1149806 0x11670007 0x3269001f 0x25ad0012 0xdf080 0x3bec821 0x8f380034 0x118b806 0x32e9001f 0x10a9006 0x3250001f 0xf8a00 0x2117821 0xf6880 0x1ae6021 0x318b0fff 0xb7200 0x35ca0001 0x34088030 0xad0a0000 0x94380 0x102f825 0x34088000 0xad1f0000 0x34088004 0x8d090000 0x8cd10000 0x118402 0xafb00028 0x8caf0000 0xf6c02 0xafad0004 0x908c0000 0x318b001f 0xafab0030 0x8fab0028 0x8fac0004 0x8fbe0030 0x3c30018 0x1e57c3 0x7010 0x1ca6823 0x25b70006 0xd4040 0xd48c0 0x17b080 0x128f823 0x3b6a821 0x8eaa0034 0x3dfc023 0x8faf0048 0x8fae0038 0x8fb40044 0x18c880 0x1680ffc2 0x3384021 0x8000224 0x25ad000c 0x800021d 0x25a90012>;
+				};
+			};
+
+			freein-fifo-config {
+				freein-fifo-spill-mem-range = <0x0 0x0 0x0 0x200000>;
+				freein-fifo-onchip-num-descs = <0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38>;
+				freein-fifo-spill-num-descs = <0x4b0>;
+			};
+
+			vfbid-config {
+			};
+
+			poe {
+				mode = "bypass";
+				distribution-enable = <0x1>;
+				dist-drop-enable = <0x0>;
+				class-drop-enable = <0x0>;
+				drop-timer = <0x0>;
+				dest-threshold = <0xa>;
+				dist-threshold = <0xa 0xa 0xa 0xa>;
+				statistics-enable = <0x0>;
+				poe-spill-address = <0x0>;
+				poe-spill-length = <0x0>;
+
+				distribution_vectors {
+					dv0 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x1>;
+					dv1 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv2 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv3 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv4 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv5 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv6 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv7 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv8 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv9 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv10 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv11 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv12 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv13 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv14 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv15 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+				};
+			};
+
+			complex@0 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+					msec-port-enable = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					msec-port-enable = <0x0>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					mgmt-port = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x4 0x7 0x6 0x5>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+					msec-port-enable = <0x0>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+			};
+
+			complex@1 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+					msec-port-enable = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					msec-port-enable = <0x0>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x8 0xb 0xa 0x9>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+					msec-port-enable = <0x0>;
+				};
+			};
+
+			complex@2 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x0 0x3 0x2 0x1>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@3 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+					vlan-pri-en = <0x0>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0xc 0xf 0xe 0xd>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@4 {
+				device_type = "nae-complex";
+				mode = "sgmii";
+
+				sgmii {
+					loopback = <0x0 0x0>;
+					mgmt-port = <0x1 0x0>;
+					iface-fifo-size = <0xd 0xd>;
+					ext-phy-addr = <0x10 0x11>;
+					ext-phy-bus = <0x0 0x0>;
+					num-channels = <0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80>;
+					num-free-descs = <0x34 0x34>;
+					free-desc-size = <0x800 0x800>;
+					ucore-mask = <0xffff 0xffff>;
+				};
+			};
+		};
+
+		nae@node-1 {
+			model = "MIPS,XLP8XX NAE CFG";
+			compatible = "NETL,XLP8XX_A0";
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			frequency = <0x1f4>;
+
+			ucore {
+
+				src@1 {
+					num-opcodes = <0x25c>;
+					mask = <0xffff>;
+					opcodes = <0x3c1c0010 0x279cf808 0x3c020010 0x2442f808 0x3c030010 0x2463f808 0xac400000 0x43082b 0x1420fffd 0x24420004 0x3c1d0010 0x27bdf9c0 0x27a50020 0x27a60028 0xaca00000 0xacc00000 0xc000029 0x2021 0x1000ffff 0x0 0x3c020000 0x8c4209a4 0x27bdffe0 0x2403ffff 0xafbf001c 0xafb10018 0x10430009 0xafb00014 0x3c100000 0x261009a4 0x2411ffff 0x40f809 0x2610fffc 0x8e020000 0x1451fffc 0x0 0x8fbf001c 0x8fb10018 0x8fb00014 0x3e00008 0x27bd0020 0x27bdfe78 0xafa00000 0xafa00004 0xafa00008 0xafa0000c 0xafa00010 0xafa00014 0xafa00018 0xafa0001c 0xafa00020 0xafa00024 0xafa00028 0xafa0002c 0x8fa3002c 0xafbf0184 0x2c620048 0xafbe0180 0xafb7017c 0xafb60178 0xafb50174 0xafb40170 0xafb3016c 0xafb20168 0xafb10164 0xafb00160 0x10400012 0x27a50034 0x3c040001 0x34848000 0x8fb0002c 0x8fae002c 0x107880 0xe6880 0x1a46021 0x8d8b0000 0xaf5021 0xad4b0000 0x8fa9002c 0x25280001 0xafa8002c 0x8fa7002c 0x2ce60048 0x14c0fff2 0x0 0x8fb10040 0x24050002 0x122501b9 0x3c13000f 0x8fa30040 0x24020001 0x1062010f 0x3669fe50 0x8fa70040 0x24060003 0x10e6000d 0x8fbf0184 0x1021 0x8fbe0180 0x8fb7017c 0x8fb60178 0x8fb50174 0x8fb40170 0x8fb3016c 0x8fb20168 0x8fb10164 0x8fb00160 0x3e00008 0x27bd0188 0x3c020001 0x3c0ddead 0x3443bffc 0x8000077 0x35a2beef 0xafa0002c 0x8fac002c 0x2d8b0064 0x156000f1 0x0 0x8c640000 0x1482fff9 0x3c08dead 0x3c02000f 0x3c1e0001 0x3c172aaa 0x3453fe4c 0x3452fe50 0x3451fe54 0x3444fe00 0x3443fe04 0x3446fe08 0x3445fe0c 0x3510beff 0x345ffe01 0x3459fe02 0x3458fe03 0x344ffe05 0x344efe06 0x344dfe07 0x344cfe09 0x350bbeef 0x37cac000 0x80000b3 0x36e9aaab 0x10e000d4 0x0 0x27d4000c 0x14a080 0x3b4b821 0x8ee70034 0x24170800 0x107a006 0x12d70007 0x3294001f 0x27de0012 0x1eb880 0x3b73821 0x8cf60034 0x116f006 0x33d4001f 0x8fa70158 0x8fbe015c 0x1074006 0x3117001f 0x1eb200 0x2f63821 0x74080 0x115f021 0x33d50fff 0x15ba00 0x36e70001 0x34088030 0xad070000 0x3c160178 0x144380 0x36de0018 0x11ea825 0x34088000 0xad150000 0x34088004 0x8d1e0000 0x8e750000 0x15bc02 0xafb70028 0x8e560000 0x164402 0xafa80004 0x8e340000 0x328700ff 0xafa70018 0x8c950000 0xafb50020 0x8c770000 0xafb70024 0x8cd60000 0xafb60010 0x8fa80018 0xaca80000 0x93f40000 0x93270000 0x90960000 0x7ac00 0x14ba00 0x3d04021 0x2f5a021 0x931e0000 0x296b821 0x91f60000 0x91d40000 0x1e3e00 0x90750000 0x2e7b821 0x16f200 0x91a70000 0x14b400 0x3d6a021 0x295f021 0x7ae00 0x3454fe0a 0x91870000 0x3d5b021 0x92950000 0x3454fe0b 0x90de0000 0x92940000 0x73a00 0x15ac00 0xf5a821 0xafa70158 0x14a600 0x2be3821 0xf4a821 0x2c8b021 0x2a84021 0x8f702 0x83900 0x3c7a025 0x2f5a823 0x2b4a826 0x15be82 0x15f180 0x2d53823 0x2fea025 0x287a026 0x1164021 0x14f200 0x14b602 0x2a8a821 0x2de3825 0x1144023 0xe84026 0x8bc02 0x8b400 0x2f6f025 0x2a83823 0x295a021 0x3c7a826 0x15bb42 0x15b4c0 0x1143821 0x2f6f025 0x295a023 0x3d4a026 0x2a7a821 0xf44023 0x14bf02 0x14b100 0x3447fe0f 0x2f6f025 0x90f60000 0x3c84026 0xafb60158 0x345efe0e 0x93d60000 0x8fa70158 0x3457fe0d 0x92f70000 0x90be0000 0x73e00 0x16b400 0xf6b021 0xafa70158 0x295a021 0x2de3821 0x17f200 0xfeb021 0x14bc82 0x14f380 0x2d53821 0x1144026 0x2feb025 0x1164023 0x8bd42 0x8f2c0 0x2feb025 0x107a826 0x2b6a823 0x1539c2 0x15f640 0x2b4a026 0xfeb025 0x296f023 0x1ebc02 0x1e3c00 0x2e7b025 0x3c84026 0x1164023 0x8bf02 0x83900 0x115a826 0x2e7b025 0x2b63823 0x7b482 0x7bb80 0x2d7a825 0xfea026 0x295f023 0x3c83826 0x1eba02 0xf7b023 0x32d40fff 0xafb4001c 0x8fbe001c 0xac7e0000 0xac8b0000 0x8fb5001c 0x154080 0x10a3821 0x8cf70000 0x32f6001f 0xafb60030 0x8fb60028 0x8fb70004 0x8fa70030 0xe90018 0x7f7c3 0xa010 0x29ef023 0x1e4040 0x1ea8c0 0x2a8a023 0xf44023 0x27c70006 0x7a880 0x8a080 0x2884021 0x3b5a021 0x8e870034 0x8fb50048 0xafa70158 0xafb5015c 0x8fb50038 0x8fb40044 0x1680ff2e 0x2ae705dd 0x800009b 0x27de000c 0x8000093 0x27d40012 0x8faa002c 0x25490001 0x8000073 0xafa9002c 0x3c059e37 0x3c042aaa 0x34a379b9 0x3662fe4c 0x3485aaab 0x3667fe54 0x24060006 0x366cfe00 0x366bfe04 0x366afe08 0x240d0800 0x8000197 0x3c040178 0x2b3905dd 0x13200095 0x0 0x27ee000c 0xeb080 0x3b6a821 0x8eb40034 0x1149806 0x130d0007 0x326e001f 0x27ff0012 0x1f7080 0x3aef021 0x8fd70034 0x117c006 0x330e001f 0x111b006 0xfa200 0x32d5001f 0x2b49821 0x13c880 0x3309021 0x325f0fff 0x1f7a00 0x35f10001 0x34088030 0xad110000 0xe4380 0x1048025 0x34088000 0xad100000 0x34088004 0x8d0e0000 0x8c550000 0x15a402 0xafb40028 0x8c530000 0x139202 0x3251000f 0xafb10000 0x8d300000 0x107c02 0xafaf0004 0x8cee0000 0x31c800ff 0xafa80018 0x8fbf0000 0x1ff080 0x3c24021 0x8d19000c 0x19c302 0x3317000f 0xafb70008 0x8d16000c 0x32d5003f 0xafb5000c 0x8fb40018 0x1286004b 0x0 0x8d930000 0xafb30020 0x8d720000 0xafb20024 0x8d4f0000 0xafaf0010 0x8fb10020 0x8fae0024 0x8fa80010 0x223c021 0x1c3c821 0x3088023 0x219f023 0x8fb42 0x3df7826 0x328b823 0x2efa823 0xfb200 0x2d57026 0x10fa023 0x28e9023 0xe9b42 0x272b826 0x1ee8823 0x2378023 0x17c302 0x310a026 0x1d7f823 0x3f4c823 0x14f400 0x3d98826 0x2f4b023 0x2d14023 0x11a942 0x2a8f826 0x2919823 0x27f7823 0x1f90c2 0x24ff026 0x23f8023 0x21e7023 0x1ec280 0x30eb826 0x3fec823 0x337b023 0x17abc2 0x2b6a026 0xafb4001c 0x8fb3001c 0x3272001f 0xafb20030 0x8fb80028 0x8fb90004 0x8fb00030 0x2050018 0x10ffc3 0x9010 0x25ff823 0x27f70006 0x1f78c0 0x1f7040 0x17b080 0x1ee8823 0x3b6a821 0x2114023 0x8eb10034 0x8faf0048 0x8fb00038 0x8fb40044 0x8f080 0x1680ff7e 0x3c84021 0x8000183 0x27ff000c 0x8fb7000c 0x32f60010 0x12c0ffb3 0x0 0x8fbf0008 0x8fae0000 0x8fb90004 0x1dff021 0x1ec080 0x1719ffac 0x0 0x8d110004 0x118402 0xafb00014 0x8faf0014 0x31e8001f 0x80001e6 0xafa80030 0x800017c 0x27ee0012 0x3c122aaa 0x3666fe4c 0x3665fe50 0x3664fe61 0x3643aaab 0x24070800 0x8000238 0x3c020178 0x299205dd 0x1240003f 0x0 0x25a9000c 0x9b080 0x3b6a821 0x8eb40034 0x1149806 0x11670007 0x3269001f 0x25ad0012 0xdf080 0x3bec821 0x8f380034 0x118b806 0x32e9001f 0x10a9006 0x3250001f 0xf8a00 0x2117821 0xf6880 0x1ae6021 0x318b0fff 0xb7200 0x35ca0001 0x34088030 0xad0a0000 0x94380 0x102f825 0x34088000 0xad1f0000 0x34088004 0x8d090000 0x8cd10000 0x118402 0xafb00028 0x8caf0000 0xf6c02 0xafad0004 0x908c0000 0x318b001f 0xafab0030 0x8fab0028 0x8fac0004 0x8fbe0030 0x3c30018 0x1e57c3 0x7010 0x1ca6823 0x25b70006 0xd4040 0xd48c0 0x17b080 0x128f823 0x3b6a821 0x8eaa0034 0x3dfc023 0x8faf0048 0x8fae0038 0x8fb40044 0x18c880 0x1680ffc2 0x3384021 0x8000224 0x25ad000c 0x800021d 0x25a90012>;
+				};
+			};
+
+			freein-fifo-config {
+				freein-fifo-spill-mem-range = <0x0 0x0 0x0 0x200000>;
+				freein-fifo-onchip-num-descs = <0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38>;
+				freein-fifo-spill-num-descs = <0x4b0>;
+			};
+
+			vfbid-config {
+			};
+
+			poe {
+				mode = "bypass";
+				distribution-enable = <0x1>;
+				dist-drop-enable = <0x0>;
+				class-drop-enable = <0x0>;
+				drop-timer = <0x0>;
+				dest-threshold = <0xa>;
+				dist-threshold = <0xa 0xa 0xa 0xa>;
+				statistics-enable = <0x0>;
+
+				distribution_vectors {
+					dv0 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x1>;
+					dv1 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv2 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv3 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv4 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv5 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv6 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv7 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv8 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv9 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv10 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv11 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv12 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv13 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv14 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+					dv15 = <0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0>;
+				};
+			};
+
+			complex@0 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x4 0x7 0x6 0x5>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+			};
+
+			complex@1 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x8 0xb 0xa 0x9>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@2 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				interlaken {
+					db = "cortina";
+					loopback = <0x0>;
+					num-lanes = <0x4>;
+					lane-rate = <0x0>;
+					iface-fifo-size = <0x6e>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x4>;
+					rx-buffer-size = <0x730>;
+					num-free-descs = <0x12c>;
+					free-desc-size = <0x800>;
+					ucore-mask = <0xffff>;
+				};
+
+				sgmii {
+					loopback = <0x0 0x0 0x0 0x0>;
+					iface-fifo-size = <0xd 0xd 0xd 0xd>;
+					ext-phy-addr = <0x0 0x3 0x2 0x1>;
+					ext-phy-bus = <0x1 0x1 0x1 0x1>;
+					num-channels = <0x1 0x1 0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e 0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80 0x80 0x80>;
+					num-free-descs = <0x34 0x34 0x34 0x34>;
+					free-desc-size = <0x800 0x800 0x800 0x800>;
+					ucore-mask = <0xffff 0xffff 0xffff 0xffff>;
+				};
+			};
+
+			complex@3 {
+				device_type = "nae-complex";
+				mode = "xaui";
+
+				xaui {
+					loopback = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					xgmii-speed = <0xa>;
+					ucore-mask = <0xffff>;
+				};
+
+				rxaui {
+					loopback = <0x0>;
+					submode = <0x2>;
+					scrambler = <0x0>;
+					iface-fifo-size = <0x37>;
+					parser-sequence-fifo-size = <0xe1>;
+					num-channels = <0x1>;
+					rx-buffer-size = <0x3b0>;
+					num-free-descs = <0x96>;
+					free-desc-size = <0x800>;
+					higig-mode = <0x0>;
+					ucore-mask = <0xffff>;
+				};
+			};
+
+			complex@4 {
+				device_type = "nae-complex";
+				mode = "sgmii";
+
+				sgmii {
+					loopback = <0x0 0x0>;
+					mgmt-port = <0x1 0x0>;
+					iface-fifo-size = <0xd 0xd>;
+					ext-phy-addr = <0x10 0x11>;
+					ext-phy-bus = <0x0 0x0>;
+					num-channels = <0x1 0x1>;
+					parser-sequence-fifo-size = <0x3e 0x3e>;
+					rx-buffer-size = <0x80 0x80>;
+					num-free-descs = <0x34 0x34>;
+					free-desc-size = <0x800 0x800>;
+					ucore-mask = <0xffff 0xffff>;
+				};
+			};
+		};
+
+		nae@node-2 {
+		};
+
+		nae@node-3 {
+		};
+
+		nodes {
+			num-nodes = <0x1>;
+		};
+	};
+
+	frequency-config {
+		nae = <0xfa>;
+		sae = <0xfa>;
+		rsa = <0xfa>;
+		dtre = <0xfa>;
+		cde = <0xfa>;
+	};
+};
diff --git a/arch/mips/include/asm/netlogic/mips-extns.h b/arch/mips/include/asm/netlogic/mips-extns.h
deleted file mode 100644
index f299d31..0000000
--- a/arch/mips/include/asm/netlogic/mips-extns.h
+++ /dev/null
@@ -1,289 +0,0 @@
-/*
- * Copyright 2003-2011 NetLogic Microsystems, Inc. (NetLogic). All rights
- * reserved.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the NetLogic
- * license below:
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY NETLOGIC ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef _ASM_NLM_MIPS_EXTS_H
-#define _ASM_NLM_MIPS_EXTS_H
-
-/*
- * XLR and XLP interrupt request and interrupt mask registers
- */
-/*
- * NOTE: Do not save/restore flags around write_c0_eimr().
- * On non-R2 platforms the flags has part of EIMR that is shadowed in STATUS
- * register. Restoring flags will overwrite the lower 8 bits of EIMR.
- *
- * Call with interrupts disabled.
- */
-#define write_c0_eimr(val)						\
-do {									\
-	if (sizeof(unsigned long) == 4) {				\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dsll\t%L0, %L0, 32\n\t"			\
-			"dsrl\t%L0, %L0, 32\n\t"			\
-			"dsll\t%M0, %M0, 32\n\t"			\
-			"or\t%L0, %L0, %M0\n\t"				\
-			"dmtc0\t%L0, $9, 7\n\t"				\
-			".set\tmips0"					\
-			: : "r" (val));					\
-	} else								\
-		__write_64bit_c0_register($9, 7, (val));		\
-} while (0)
-
-/*
- * Handling the 64 bit EIMR and EIRR registers in 32-bit mode with
- * standard functions will be very inefficient. This provides
- * optimized functions for the normal operations on the registers.
- *
- * Call with interrupts disabled.
- */
-static inline void ack_c0_eirr(int irq)
-{
-	__asm__ __volatile__(
-		".set	push\n\t"
-		".set	mips64\n\t"
-		".set	noat\n\t"
-		"li	$1, 1\n\t"
-		"dsllv	$1, $1, %0\n\t"
-		"dmtc0	$1, $9, 6\n\t"
-		".set	pop"
-		: : "r" (irq));
-}
-
-static inline void set_c0_eimr(int irq)
-{
-	__asm__ __volatile__(
-		".set	push\n\t"
-		".set	mips64\n\t"
-		".set	noat\n\t"
-		"li	$1, 1\n\t"
-		"dsllv	%0, $1, %0\n\t"
-		"dmfc0	$1, $9, 7\n\t"
-		"or	$1, %0\n\t"
-		"dmtc0	$1, $9, 7\n\t"
-		".set	pop"
-		: "+r" (irq));
-}
-
-static inline void clear_c0_eimr(int irq)
-{
-	__asm__ __volatile__(
-		".set	push\n\t"
-		".set	mips64\n\t"
-		".set	noat\n\t"
-		"li	$1, 1\n\t"
-		"dsllv	%0, $1, %0\n\t"
-		"dmfc0	$1, $9, 7\n\t"
-		"or	$1, %0\n\t"
-		"xor	$1, %0\n\t"
-		"dmtc0	$1, $9, 7\n\t"
-		".set	pop"
-		: "+r" (irq));
-}
-
-/*
- * Read c0 eimr and c0 eirr, do AND of the two values, the result is
- * the interrupts which are raised and are not masked.
- */
-static inline uint64_t read_c0_eirr_and_eimr(void)
-{
-	uint64_t val;
-
-#ifdef CONFIG_64BIT
-	val = __read_64bit_c0_register($9, 6) & __read_64bit_c0_register($9, 7);
-#else
-	__asm__ __volatile__(
-		".set	push\n\t"
-		".set	mips64\n\t"
-		".set	noat\n\t"
-		"dmfc0	%M0, $9, 6\n\t"
-		"dmfc0	%L0, $9, 7\n\t"
-		"and	%M0, %L0\n\t"
-		"dsll	%L0, %M0, 32\n\t"
-		"dsra	%M0, %M0, 32\n\t"
-		"dsra	%L0, %L0, 32\n\t"
-		".set	pop"
-		: "=r" (val));
-#endif
-	return val;
-}
-
-static inline int hard_smp_processor_id(void)
-{
-	return __read_32bit_c0_register($15, 1) & 0x3ff;
-}
-
-static inline int nlm_nodeid(void)
-{
-	return (__read_32bit_c0_register($15, 1) >> 5) & 0x3;
-}
-
-static inline unsigned int nlm_core_id(void)
-{
-	return (read_c0_ebase() & 0x1c) >> 2;
-}
-
-static inline unsigned int nlm_thread_id(void)
-{
-	return read_c0_ebase() & 0x3;
-}
-
-#define __read_64bit_c2_split(source, sel)				\
-({									\
-	unsigned long long __val;					\
-	unsigned long __flags;						\
-									\
-	local_irq_save(__flags);					\
-	if (sel == 0)							\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dmfc2\t%M0, " #source "\n\t"			\
-			"dsll\t%L0, %M0, 32\n\t"			\
-			"dsra\t%M0, %M0, 32\n\t"			\
-			"dsra\t%L0, %L0, 32\n\t"			\
-			".set\tmips0\n\t"				\
-			: "=r" (__val));				\
-	else								\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dmfc2\t%M0, " #source ", " #sel "\n\t"		\
-			"dsll\t%L0, %M0, 32\n\t"			\
-			"dsra\t%M0, %M0, 32\n\t"			\
-			"dsra\t%L0, %L0, 32\n\t"			\
-			".set\tmips0\n\t"				\
-			: "=r" (__val));				\
-	local_irq_restore(__flags);					\
-									\
-	__val;								\
-})
-
-#define __write_64bit_c2_split(source, sel, val)			\
-do {									\
-	unsigned long __flags;						\
-									\
-	local_irq_save(__flags);					\
-	if (sel == 0)							\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dsll\t%L0, %L0, 32\n\t"			\
-			"dsrl\t%L0, %L0, 32\n\t"			\
-			"dsll\t%M0, %M0, 32\n\t"			\
-			"or\t%L0, %L0, %M0\n\t"				\
-			"dmtc2\t%L0, " #source "\n\t"			\
-			".set\tmips0\n\t"				\
-			: : "r" (val));					\
-	else								\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dsll\t%L0, %L0, 32\n\t"			\
-			"dsrl\t%L0, %L0, 32\n\t"			\
-			"dsll\t%M0, %M0, 32\n\t"			\
-			"or\t%L0, %L0, %M0\n\t"				\
-			"dmtc2\t%L0, " #source ", " #sel "\n\t"		\
-			".set\tmips0\n\t"				\
-			: : "r" (val));					\
-	local_irq_restore(__flags);					\
-} while (0)
-
-#define __read_32bit_c2_register(source, sel)				\
-({ uint32_t __res;							\
-	if (sel == 0)							\
-		__asm__ __volatile__(					\
-			".set\tmips32\n\t"				\
-			"mfc2\t%0, " #source "\n\t"			\
-			".set\tmips0\n\t"				\
-			: "=r" (__res));				\
-	else								\
-		__asm__ __volatile__(					\
-			".set\tmips32\n\t"				\
-			"mfc2\t%0, " #source ", " #sel "\n\t"		\
-			".set\tmips0\n\t"				\
-			: "=r" (__res));				\
-	__res;								\
-})
-
-#define __read_64bit_c2_register(source, sel)				\
-({ unsigned long long __res;						\
-	if (sizeof(unsigned long) == 4)					\
-		__res = __read_64bit_c2_split(source, sel);		\
-	else if (sel == 0)						\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dmfc2\t%0, " #source "\n\t"			\
-			".set\tmips0\n\t"				\
-			: "=r" (__res));				\
-	else								\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dmfc2\t%0, " #source ", " #sel "\n\t"		\
-			".set\tmips0\n\t"				\
-			: "=r" (__res));				\
-	__res;								\
-})
-
-#define __write_64bit_c2_register(register, sel, value)			\
-do {									\
-	if (sizeof(unsigned long) == 4)					\
-		__write_64bit_c2_split(register, sel, value);		\
-	else if (sel == 0)						\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dmtc2\t%z0, " #register "\n\t"			\
-			".set\tmips0\n\t"				\
-			: : "Jr" (value));				\
-	else								\
-		__asm__ __volatile__(					\
-			".set\tmips64\n\t"				\
-			"dmtc2\t%z0, " #register ", " #sel "\n\t"	\
-			".set\tmips0\n\t"				\
-			: : "Jr" (value));				\
-} while (0)
-
-#define __write_32bit_c2_register(reg, sel, value)			\
-({									\
-	if (sel == 0)							\
-		__asm__ __volatile__(					\
-			".set\tmips32\n\t"				\
-			"mtc2\t%z0, " #reg "\n\t"			\
-			".set\tmips0\n\t"				\
-			: : "Jr" (value));				\
-	else								\
-		__asm__ __volatile__(					\
-			".set\tmips32\n\t"				\
-			"mtc2\t%z0, " #reg ", " #sel "\n\t"		\
-			".set\tmips0\n\t"				\
-			: : "Jr" (value));				\
-})
-
-#endif /*_ASM_NLM_MIPS_EXTS_H */
diff --git a/arch/mips/netlogic/Platform b/arch/mips/netlogic/Platform
index fb8eb4c..b1b54d6 100644
--- a/arch/mips/netlogic/Platform
+++ b/arch/mips/netlogic/Platform
@@ -13,5 +13,5 @@ cflags-$(CONFIG_CPU_XLP)	+= $(call cc-option,-march=xlp,-march=mips64r2)
 #
 # NETLOGIC processor support
 #
-platform-$(CONFIG_NLM_COMMON)	+= netlogic/
-load-$(CONFIG_NLM_COMMON)	+= 0xffffffff80100000
+platform-$(CONFIG_NLM_COMMON)  	+= netlogic/
+load-$(CONFIG_NLM_COMMON)  	+= 0xffffffff84000000
diff --git a/arch/mips/netlogic/common/smp.c b/arch/mips/netlogic/common/smp.c
deleted file mode 100644
index ffba524..0000000
--- a/arch/mips/netlogic/common/smp.c
+++ /dev/null
@@ -1,290 +0,0 @@
-/*
- * Copyright 2003-2011 NetLogic Microsystems, Inc. (NetLogic). All rights
- * reserved.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the NetLogic
- * license below:
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY NETLOGIC ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <linux/kernel.h>
-#include <linux/delay.h>
-#include <linux/init.h>
-#include <linux/smp.h>
-#include <linux/irq.h>
-
-#include <asm/mmu_context.h>
-
-#include <asm/netlogic/interrupt.h>
-#include <asm/netlogic/mips-extns.h>
-#include <asm/netlogic/haldefs.h>
-#include <asm/netlogic/common.h>
-
-#if defined(CONFIG_CPU_XLP)
-#include <asm/netlogic/xlp-hal/iomap.h>
-#include <asm/netlogic/xlp-hal/xlp.h>
-#include <asm/netlogic/xlp-hal/pic.h>
-#elif defined(CONFIG_CPU_XLR)
-#include <asm/netlogic/xlr/iomap.h>
-#include <asm/netlogic/xlr/pic.h>
-#include <asm/netlogic/xlr/xlr.h>
-#else
-#error "Unknown CPU"
-#endif
-
-void nlm_send_ipi_single(int logical_cpu, unsigned int action)
-{
-	int cpu, node;
-	uint64_t picbase;
-
-	cpu = cpu_logical_map(logical_cpu);
-	node = cpu / NLM_CPUS_PER_NODE;
-	picbase = nlm_get_node(node)->picbase;
-
-	if (action & SMP_CALL_FUNCTION)
-		nlm_pic_send_ipi(picbase, cpu, IRQ_IPI_SMP_FUNCTION, 0);
-	if (action & SMP_RESCHEDULE_YOURSELF)
-		nlm_pic_send_ipi(picbase, cpu, IRQ_IPI_SMP_RESCHEDULE, 0);
-}
-
-void nlm_send_ipi_mask(const struct cpumask *mask, unsigned int action)
-{
-	int cpu;
-
-	for_each_cpu(cpu, mask) {
-		nlm_send_ipi_single(cpu, action);
-	}
-}
-
-/* IRQ_IPI_SMP_FUNCTION Handler */
-void nlm_smp_function_ipi_handler(unsigned int irq, struct irq_desc *desc)
-{
-	clear_c0_eimr(irq);
-	ack_c0_eirr(irq);
-	smp_call_function_interrupt();
-	set_c0_eimr(irq);
-}
-
-/* IRQ_IPI_SMP_RESCHEDULE  handler */
-void nlm_smp_resched_ipi_handler(unsigned int irq, struct irq_desc *desc)
-{
-	clear_c0_eimr(irq);
-	ack_c0_eirr(irq);
-	scheduler_ipi();
-	set_c0_eimr(irq);
-}
-
-/*
- * Called before going into mips code, early cpu init
- */
-void nlm_early_init_secondary(int cpu)
-{
-	change_c0_config(CONF_CM_CMASK, 0x3);
-#ifdef CONFIG_CPU_XLP
-	/* mmu init, once per core */
-	if (cpu % NLM_THREADS_PER_CORE == 0)
-		xlp_mmu_init();
-#endif
-	write_c0_ebase(nlm_current_node()->ebase);
-}
-
-/*
- * Code to run on secondary just after probing the CPU
- */
-static void __cpuinit nlm_init_secondary(void)
-{
-	int hwtid;
-
-	hwtid = hard_smp_processor_id();
-	current_cpu_data.core = hwtid / NLM_THREADS_PER_CORE;
-	nlm_percpu_init(hwtid);
-	nlm_smp_irq_init(hwtid);
-}
-
-void nlm_prepare_cpus(unsigned int max_cpus)
-{
-	/* declare we are SMT capable */
-	smp_num_siblings = nlm_threads_per_core;
-}
-
-void nlm_smp_finish(void)
-{
-	local_irq_enable();
-}
-
-void nlm_cpus_done(void)
-{
-}
-
-/*
- * Boot all other cpus in the system, initialize them, and bring them into
- * the boot function
- */
-int nlm_cpu_ready[NR_CPUS];
-unsigned long nlm_next_gp;
-unsigned long nlm_next_sp;
-static cpumask_t phys_cpu_present_mask;
-
-void nlm_boot_secondary(int logical_cpu, struct task_struct *idle)
-{
-	int cpu, node;
-
-	cpu = cpu_logical_map(logical_cpu);
-	node = cpu / NLM_CPUS_PER_NODE;
-	nlm_next_sp = (unsigned long)__KSTK_TOS(idle);
-	nlm_next_gp = (unsigned long)task_thread_info(idle);
-
-	/* barrier for sp/gp store above */
-	__sync();
-	nlm_pic_send_ipi(nlm_get_node(node)->picbase, cpu, 1, 1);  /* NMI */
-}
-
-void __init nlm_smp_setup(void)
-{
-	unsigned int boot_cpu;
-	int num_cpus, i, ncore;
-	char buf[64];
-
-	boot_cpu = hard_smp_processor_id();
-	cpumask_clear(&phys_cpu_present_mask);
-
-	cpumask_set_cpu(boot_cpu, &phys_cpu_present_mask);
-	__cpu_number_map[boot_cpu] = 0;
-	__cpu_logical_map[0] = boot_cpu;
-	set_cpu_possible(0, true);
-
-	num_cpus = 1;
-	for (i = 0; i < NR_CPUS; i++) {
-		/*
-		 * nlm_cpu_ready array is not set for the boot_cpu,
-		 * it is only set for ASPs (see smpboot.S)
-		 */
-		if (nlm_cpu_ready[i]) {
-			cpumask_set_cpu(i, &phys_cpu_present_mask);
-			__cpu_number_map[i] = num_cpus;
-			__cpu_logical_map[num_cpus] = i;
-			set_cpu_possible(num_cpus, true);
-			++num_cpus;
-		}
-	}
-
-	cpumask_scnprintf(buf, ARRAY_SIZE(buf), &phys_cpu_present_mask);
-	pr_info("Physical CPU mask: %s\n", buf);
-	cpumask_scnprintf(buf, ARRAY_SIZE(buf), cpu_possible_mask);
-	pr_info("Possible CPU mask: %s\n", buf);
-
-	/* check with the cores we have worken up */
-	for (ncore = 0, i = 0; i < NLM_NR_NODES; i++)
-		ncore += hweight32(nlm_get_node(i)->coremask);
-
-	pr_info("Detected (%dc%dt) %d Slave CPU(s)\n", ncore,
-		nlm_threads_per_core, num_cpus);
-
-	/* switch NMI handler to boot CPUs */
-	nlm_set_nmi_handler(nlm_boot_secondary_cpus);
-}
-
-static int nlm_parse_cpumask(cpumask_t *wakeup_mask)
-{
-	uint32_t core0_thr_mask, core_thr_mask;
-	int threadmode, i, j;
-
-	core0_thr_mask = 0;
-	for (i = 0; i < NLM_THREADS_PER_CORE; i++)
-		if (cpumask_test_cpu(i, wakeup_mask))
-			core0_thr_mask |= (1 << i);
-	switch (core0_thr_mask) {
-	case 1:
-		nlm_threads_per_core = 1;
-		threadmode = 0;
-		break;
-	case 3:
-		nlm_threads_per_core = 2;
-		threadmode = 2;
-		break;
-	case 0xf:
-		nlm_threads_per_core = 4;
-		threadmode = 3;
-		break;
-	default:
-		goto unsupp;
-	}
-
-	/* Verify other cores CPU masks */
-	for (i = 0; i < NR_CPUS; i += NLM_THREADS_PER_CORE) {
-		core_thr_mask = 0;
-		for (j = 0; j < NLM_THREADS_PER_CORE; j++)
-			if (cpumask_test_cpu(i + j, wakeup_mask))
-				core_thr_mask |= (1 << j);
-		if (core_thr_mask != 0 && core_thr_mask != core0_thr_mask)
-				goto unsupp;
-	}
-	return threadmode;
-
-unsupp:
-	panic("Unsupported CPU mask %lx\n",
-		(unsigned long)cpumask_bits(wakeup_mask)[0]);
-	return 0;
-}
-
-int __cpuinit nlm_wakeup_secondary_cpus(void)
-{
-	unsigned long reset_vec;
-	char *reset_data;
-	int threadmode;
-
-	/* Update reset entry point with CPU init code */
-	reset_vec = CKSEG1ADDR(RESET_VEC_PHYS);
-	memcpy((void *)reset_vec, (void *)nlm_reset_entry,
-			(nlm_reset_entry_end - nlm_reset_entry));
-
-	/* verify the mask and setup core config variables */
-	threadmode = nlm_parse_cpumask(&nlm_cpumask);
-
-	/* Setup CPU init parameters */
-	reset_data = (char *)CKSEG1ADDR(RESET_DATA_PHYS);
-	*(int *)(reset_data + BOOT_THREAD_MODE) = threadmode;
-
-#ifdef CONFIG_CPU_XLP
-	xlp_wakeup_secondary_cpus();
-#else
-	xlr_wakeup_secondary_cpus();
-#endif
-	return 0;
-}
-
-struct plat_smp_ops nlm_smp_ops = {
-	.send_ipi_single	= nlm_send_ipi_single,
-	.send_ipi_mask		= nlm_send_ipi_mask,
-	.init_secondary		= nlm_init_secondary,
-	.smp_finish		= nlm_smp_finish,
-	.cpus_done		= nlm_cpus_done,
-	.boot_secondary		= nlm_boot_secondary,
-	.smp_setup		= nlm_smp_setup,
-	.prepare_cpus		= nlm_prepare_cpus,
-};
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index eaa99d2..1331b29 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -35,16 +35,12 @@
 #include <linux/kernel.h>
 #include <linux/serial_8250.h>
 #include <linux/pm.h>
-#include <linux/bootmem.h>
 
-#include <asm/idle.h>
 #include <asm/reboot.h>
 #include <asm/time.h>
 #include <asm/bootinfo.h>
 
 #include <linux/of_fdt.h>
-#include <linux/of_platform.h>
-#include <linux/of_device.h>
 
 #include <asm/netlogic/haldefs.h>
 #include <asm/netlogic/common.h>
@@ -53,56 +49,25 @@
 #include <asm/netlogic/xlp-hal/xlp.h>
 #include <asm/netlogic/xlp-hal/sys.h>
 
-uint64_t nlm_io_base;
-struct nlm_soc_info nlm_nodes[NLM_NR_NODES];
-cpumask_t nlm_cpumask = CPU_MASK_CPU0;
-unsigned int nlm_threads_per_core;
-extern u32 __dtb_xlp_evp_begin[], __dtb_xlp_svp_begin[], __dtb_start[];
+unsigned long nlm_common_ebase = 0x0;
+
+/* default to uniprocessor */
+uint32_t nlm_coremask = 1, nlm_cpumask  = 1;
+int  nlm_threads_per_core = 1;
 
 static void nlm_linux_exit(void)
 {
-	uint64_t sysbase = nlm_get_node(0)->sysbase;
-
-	nlm_write_sys_reg(sysbase, SYS_CHIP_RESET, 1);
+	nlm_write_sys_reg(nlm_sys_base, SYS_CHIP_RESET, 1);
 	for ( ; ; )
 		cpu_wait();
 }
 
 void __init plat_mem_setup(void)
 {
-	void *fdtp;
-
 	panic_timeout	= 5;
 	_machine_restart = (void (*)(char *))nlm_linux_exit;
 	_machine_halt	= nlm_linux_exit;
 	pm_power_off	= nlm_linux_exit;
-
-	/*
-	 * If no FDT pointer is passed in, use the built-in FDT.
-	 * device_tree_init() does not handle CKSEG0 pointers in
-	 * 64-bit, so convert pointer.
-	 */
-	fdtp = (void *)(long)fw_arg0;
-	if (!fdtp) {
-		switch (current_cpu_data.processor_id & 0xff00) {
-#ifdef CONFIG_DT_XLP_SVP
-		case PRID_IMP_NETLOGIC_XLP3XX:
-			fdtp = __dtb_xlp_svp_begin;
-			break;
-#endif
-#ifdef CONFIG_DT_XLP_EVP
-		case PRID_IMP_NETLOGIC_XLP8XX:
-			fdtp = __dtb_xlp_evp_begin;
-			break;
-#endif
-		default:
-			/* Pick a built-in if any, and hope for the best */
-			fdtp = __dtb_start;
-			break;
-		}
-	}
-	fdtp = phys_to_virt(__pa(fdtp));
-	early_init_devtree(fdtp);
 }
 
 const char *get_system_type(void)
@@ -117,64 +82,32 @@ void __init prom_free_prom_memory(void)
 
 void xlp_mmu_init(void)
 {
-	/* enable extended TLB and Large Fixed TLB */
 	write_c0_config6(read_c0_config6() | 0x24);
-
-	/* set page mask of Fixed TLB in config7 */
+	current_cpu_data.tlbsize = ((read_c0_config6() >> 16) & 0xffff) + 1;
 	write_c0_config7(PM_DEFAULT_MASK >>
 		(13 + (ffz(PM_DEFAULT_MASK >> 13) / 2)));
 }
 
-void nlm_percpu_init(int hwcpuid)
-{
-}
-
 void __init prom_init(void)
 {
-	nlm_io_base = CKSEG1ADDR(XLP_DEFAULT_IO_BASE);
+	void *fdtp;
+
+	/*
+	 * If no FDT pointer is passed in, use the built-in FDT.
+	 * device_tree_init() does not handle CKSEG0 pointers in
+	 * 64-bit, so convert pointer.
+	 */
+	fdtp = (void *)(long)fw_arg0;
+	if (!fdtp)
+		fdtp = __dtb_start;
+	fdtp = phys_to_virt(__pa(fdtp));
 	xlp_mmu_init();
-	nlm_node_init(0);
+	nlm_hal_init();
+	early_init_devtree(fdtp);
 
+	nlm_common_ebase = read_c0_ebase() & (~((1 << 12) - 1));
 #ifdef CONFIG_SMP
-	cpumask_setall(&nlm_cpumask);
-	nlm_wakeup_secondary_cpus();
-
-	/* update TLB size after waking up threads */
-	current_cpu_data.tlbsize = ((read_c0_config6() >> 16) & 0xffff) + 1;
-
+	nlm_wakeup_secondary_cpus(0xffffffff);
 	register_smp_ops(&nlm_smp_ops);
 #endif
 }
-
-void __init device_tree_init(void)
-{
-	unsigned long base, size;
-
-	if (!initial_boot_params)
-		return;
-
-	base = virt_to_phys((void *)initial_boot_params);
-	size = be32_to_cpu(initial_boot_params->totalsize);
-
-	/* Before we do anything, lets reserve the dt blob */
-	reserve_bootmem(base, size, BOOTMEM_DEFAULT);
-
-	unflatten_device_tree();
-
-	/* free the space reserved for the dt blob */
-	free_bootmem(base, size);
-}
-
-static struct of_device_id __initdata xlp_ids[] = {
-	{ .compatible = "simple-bus", },
-	{},
-};
-
-int __init xlp8xx_ds_publish_devices(void)
-{
-	if (!of_have_populated_dt())
-		return 0;
-	return of_platform_bus_probe(NULL, xlp_ids, NULL);
-}
-
-device_initcall(xlp8xx_ds_publish_devices);
-- 
1.8.4.93.g57e4c17

