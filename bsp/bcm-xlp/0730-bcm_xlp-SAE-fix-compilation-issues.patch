From 1a4537c234755bee5ef48dcfb93daaee9577d9d3 Mon Sep 17 00:00:00 2001
From: reshmic <reshmic@broadcom.com>
Date: Sun, 23 Sep 2012 10:28:28 +0530
Subject: [PATCH 730/762] bcm_xlp: SAE: fix : compilation issues

* Added ZUC algorithm support * Moved functions with 'crypto_virt_to_phys'
 inside #ifdef NLM_CRYPTO_EXCL_IFC
Based on Broadcom SDK 2.3.

Signed-off-by: reshmic <reshmic@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/sae/nlmcrypto.h |   81 +++++++++++++++++++++------------------
 1 files changed, 44 insertions(+), 37 deletions(-)

diff --git a/drivers/crypto/sae/nlmcrypto.h b/drivers/crypto/sae/nlmcrypto.h
index fcee9c3..88f41d1 100755
--- a/drivers/crypto/sae/nlmcrypto.h
+++ b/drivers/crypto/sae/nlmcrypto.h
@@ -294,7 +294,9 @@ enum nlm_cipher_algo {
 	NLM_CIPHER_CAMELLIA128 = 9, 
 	NLM_CIPHER_CAMELLIA192 = 0xA, 
 	NLM_CIPHER_CAMELLIA256 = 0xB, 
-	NLM_CIPHER_MAX = 0xC,
+	NLM_CIPHER_UNDEFINED1 = 0xC,
+	NLM_CIPHER_ZUC = 0xD,
+	NLM_CIPHER_MAX = 0xE,
 };
 
 /**
@@ -335,7 +337,8 @@ enum nlm_hash_algo {
 	NLM_HASH_CAMELLIA192 = 0xA,
 	NLM_HASH_CAMELLIA256 = 0xB,
 	NLM_HASH_GHASH = 0xC,
-	NLM_HASH_MAX = 0xD
+	NLM_HASH_ZUC = 0xD,
+	NLM_HASH_MAX = 0xE,
 };
 
 /**
@@ -438,6 +441,10 @@ static inline int nlm_crypto_get_taglen(enum nlm_hash_algo hashalg, enum nlm_has
 		return 128;
 	else if(hashmode == NLM_HASH_MODE_CCM )
 		return 128;
+	else if (hashmode == NLM_HASH_MODE_CMAC)
+		return 128;
+	else if (hashalg ==  NLM_HASH_ZUC)
+		return 32;
 	else if(hashalg == NLM_HASH_BYPASS)
 		return 0;
 	else
@@ -637,6 +644,41 @@ static inline unsigned int nlm_crypto_fill_src_dst_seg(struct nlm_crypto_pkt_par
 			1, 1,
 			sval, dval) + s_seg);
 }
+
+/**
+* @brief Top level function for modifying the packet hashlen and hashdstaddr in desc0 and desc1
+* @ingroup crypto
+* - param : pointer to the param structure
+* - hashlen : hash length in bytes
+* - hashdstaddr : hash destination physical address
+*/
+static inline void nlm_crypto_modify_auth_pkt_param(struct nlm_crypto_pkt_param *param, int hashlen, unsigned char * hashdstaddr)
+{
+	unsigned long long  desc;
+	desc =  ccpu_to_be64(param->desc0) & 0xffffff0000000000ULL;
+	param->desc0 = ccpu_to_be64((shift_lower_bits(crypto_virt_to_phys(hashdstaddr), 0, 40)|desc));
+	desc = ccpu_to_be64(param->desc1) & 0xffffffff00000000ULL;
+	param->desc1 = ccpu_to_be64( (shift_lower_bits_mask((hashlen - 1), 0, 32) | desc) );
+
+}
+
+/**
+* @brief Top level function for modifying the packet cipherlen, hashlen and hashdstaddr in desc0 and desc1
+* @ingroup crypto
+* - param : pointer to the param structure
+* - cipherlen : cipher length in bytes
+* - hashlen : hash length in bytes
+* - hashdstaddr : hash destination physical address
+*/
+static inline void nlm_crypto_modify_cipher_auth_pkt_param(struct nlm_crypto_pkt_param *param,
+		int cipherlen, int hashlen, unsigned char * hashdstaddr)
+{
+	unsigned long long  desc;
+	param->desc1 = ccpu_to_be64(nlm_crypto_form_pkt_desc1(cipherlen, hashlen));
+	desc =  ccpu_to_be64(param->desc0) & 0xFFFFFE0000000000ULL;
+	param->desc0 = ccpu_to_be64((shift_lower_bits(crypto_virt_to_phys(hashdstaddr), 0, 40)|desc));
+
+}
 #endif
 
 #ifndef MAX_CPUS
@@ -745,24 +787,6 @@ static inline int crypto_get_lbc64(unsigned long long x)
 }
 
 /**
-* @brief Top level function for modifying the packet cipherlen, hashlen and hashdstaddr in desc0 and desc1
-* @ingroup crypto
-* - param : pointer to the param structure
-* - cipherlen : cipher length in bytes
-* - hashlen : hash length in bytes
-* - hashdstaddr : hash destination physical address
-*/
-static inline void nlm_crypto_modify_cipher_auth_pkt_param(struct nlm_crypto_pkt_param *param,
-		int cipherlen, int hashlen, unsigned char * hashdstaddr)
-{
-	unsigned long long  desc;
-	param->desc1 = ccpu_to_be64(nlm_crypto_form_pkt_desc1(cipherlen, hashlen));
-	desc =  ccpu_to_be64(param->desc0) & 0xFFFFFE0000000000ULL;
-	param->desc0 = ccpu_to_be64((shift_lower_bits(crypto_virt_to_phys(hashdstaddr), 0, 40)|desc));
-
-}
-
-/**
 * @brief Top level function for modifying the packet cipherlen in desc1
 * @ingroup crypto
 * - param : pointer to the param structure
@@ -778,23 +802,6 @@ static inline void nlm_crypto_modify_cipher_pkt_param(struct nlm_crypto_pkt_para
 }
 
 /**
-* @brief Top level function for modifying the packet hashlen and hashdstaddr in desc0 and desc1
-* @ingroup crypto
-* - param : pointer to the param structure
-* - hashlen : hash length in bytes
-* - hashdstaddr : hash destination physical address
-*/
-static inline void nlm_crypto_modify_auth_pkt_param(struct nlm_crypto_pkt_param *param, int hashlen, unsigned char * hashdstaddr)
-{
-	unsigned long long  desc;
-	desc =  ccpu_to_be64(param->desc0) & 0xffffff0000000000ULL;
-	param->desc0 = ccpu_to_be64((shift_lower_bits(crypto_virt_to_phys(hashdstaddr), 0, 40)|desc));
-	desc = ccpu_to_be64(param->desc1) & 0xffffffff00000000ULL;
-	param->desc1 = ccpu_to_be64( (shift_lower_bits_mask((hashlen - 1), 0, 32) | desc) );
-
-}
-
-/**
 * @brief Top level function for adding designer descriptor at the end of src/dst fragments 
 * @ingroup crypto
 * - param : pointer to the param structure
-- 
1.7.0.4

