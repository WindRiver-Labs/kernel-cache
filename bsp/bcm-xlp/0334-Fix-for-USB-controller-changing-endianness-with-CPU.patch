From 835b44c62daaaaf9a3bf7045d51362562cc3d67b Mon Sep 17 00:00:00 2001
From: Om Narasimhan <onarasimhan@netlogicmicro.com>
Date: Wed, 21 Sep 2011 10:26:05 -0700
Subject: [PATCH 334/762] Fix for USB controller changing endianness with CPU.

This can be checked by doing a __raw_read() on the start of pci memspace, which
has USB capabilities. Offset zero reads the same value in both big and little
endian mode. If the controller kept an endianness (little according to spec),
 __raw_read() value should have been different.

Based on Broadcom SDK 2.3.

Signed-off-by: Om Narasimhan <onarasimhan@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/pci/probe.c         |    4 ++--
 drivers/usb/host/Kconfig    |   10 ++++++----
 drivers/usb/host/ehci-pci.c |    3 +--
 drivers/usb/host/ehci.h     |    8 +++++++-
 4 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index 6e9843b..445e2d0 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -218,7 +218,6 @@ static inline unsigned long decode_bar(struct pci_dev *dev, u32 bar)
 }
 
 #if defined (CONFIG_NLM_XLP) && defined (__LITTLE_ENDIAN)
-#define NLM_HAL_LINUX_KERNEL
 #include <asm/netlogic/hal/nlm_hal.h>
 #include <asm/netlogic/xlp.h>
 #define XLP_PCI_DEV_BASE 0x1000
@@ -230,8 +229,9 @@ static u32 nlm_xlp_membar_fixup(u32 l, struct pci_dev *dev,
 	u32 fixup;
 	int rev;
 
-	if (!is_nlm_xlp8xx())
+	if (!is_nlm_xlp8xx()) {
 		return l;
+	}
 
 	if (!l)
 		return l;
diff --git a/drivers/usb/host/Kconfig b/drivers/usb/host/Kconfig
index 1d1f0d3..e0f7b13 100644
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@ -151,14 +151,16 @@ config USB_EHCI_BIG_ENDIAN_MMIO
 	depends on USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || \
 				    ARCH_IXP4XX || XPS_USB_HCD_XILINX || \
 				    PPC_MPC512x || CPU_CAVIUM_OCTEON || \
-				    PMC_MSP || SPARC_LEON || NLM_XLP)
-	default y
+				    PMC_MSP || SPARC_LEON || (NLM_XLP && CPU_BIG_ENDIAN))
+	default y if NLM_XLP && CPU_BIG_ENDIAN
+	default n
 
 config USB_EHCI_BIG_ENDIAN_DESC
 	bool
 	depends on USB_EHCI_HCD && (440EPX || ARCH_IXP4XX || XPS_USB_HCD_XILINX || \
-				    PPC_MPC512x || PMC_MSP || SPARC_LEON || NLM_XLP)
-	default y
+				    PPC_MPC512x || PMC_MSP || SPARC_LEON || (NLM_XLP && CPU_BIG_ENDIAN))
+	default y if NLM_XLP && CPU_BIG_ENDIAN
+	default n
 
 config XPS_USB_HCD_XILINX
 	bool "Use Xilinx usb host EHCI controller core"
diff --git a/drivers/usb/host/ehci-pci.c b/drivers/usb/host/ehci-pci.c
index c5d1cc3..fc4874f 100644
--- a/drivers/usb/host/ehci-pci.c
+++ b/drivers/usb/host/ehci-pci.c
@@ -117,10 +117,9 @@ static int ehci_pci_setup(struct usb_hcd *hcd)
 #endif
 		}
 		break;
-
 	case PCI_VENDOR_ID_NETLOGIC:
 		if (pdev->device == 0x1007) {
-#ifdef CONFIG_USB_EHCI_BIG_ENDIAN_MMIO
+#if defined CONFIG_USB_EHCI_BIG_ENDIAN_MMIO
 			ehci->big_endian_mmio = 1;
 #else
 			ehci->big_endian_mmio = 0;
diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index 9bd7c82..0d7a5b1 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -639,7 +639,13 @@ ehci_port_speed(struct ehci_hcd *ehci, unsigned int portsc)
  * Big-endian read/write functions are arch-specific.
  * Other arches can be added if/when they're needed.
  */
-#if defined(CONFIG_ARM) && defined(CONFIG_ARCH_IXP4XX) || defined(CONFIG_NLM_XLP)
+
+/*
+ * In NLM_XLP, USB controller apparently changes endianness : it has the same
+ * endianness as the CPU. That explains the following, I hope.
+ */
+#if defined(CONFIG_ARM) && defined(CONFIG_ARCH_IXP4XX) ||\
+(defined(CONFIG_NLM_XLP) && defined(CONFIG_USB_EHCI_BIG_ENDIAN_MMIO))
 #define readl_be(addr)		__raw_readl((__force unsigned *)addr)
 #define writel_be(val, addr)	__raw_writel(val, (__force unsigned *)addr)
 #endif
-- 
1.7.0.4

