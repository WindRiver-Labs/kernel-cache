From 7cd45474ca6cef6bbf15d9e2cfb0eb958d4554b3 Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Thu, 6 Mar 2014 17:15:06 +0800
Subject: [PATCH] bcm-xlp2: update netl7driver according to new api

Replace the 'create_proc_entry' with 'proc_mkdir_mode'

Replace the PDE with PDE_DATA

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/netlogic/netl7driver/netl7driver.c |   41 ++++++++++++++--------------
 1 file changed, 21 insertions(+), 20 deletions(-)

diff --git a/drivers/netlogic/netl7driver/netl7driver.c b/drivers/netlogic/netl7driver/netl7driver.c
index 4282790..0b9b88d 100755
--- a/drivers/netlogic/netl7driver/netl7driver.c
+++ b/drivers/netlogic/netl7driver/netl7driver.c
@@ -32,7 +32,6 @@
 #include <linux/init.h>
 #include <linux/pci.h>
 #include <linux/types.h>
-#include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include <linux/spinlock.h>
 #include <linux/sched.h>
@@ -42,10 +41,12 @@
 #include <linux/sort.h>
 #include <linux/compat.h>
 #include <linux/module.h>
+#include <linux/proc_fs.h>
 
 #include <asm/uaccess.h>
 
 #include "netl7driver.h"
+#include "../../../fs/proc/internal.h"
 
 #define DRV_NAME "NetL7_V2.4"
 
@@ -69,7 +70,7 @@ module_param (fixed_phys_size, ulong, S_IRUGO);
 module_param (dmamem_size, ulong, S_IRUGO);
 module_param (verbose, int, S_IRUGO);
 
-#define NLM_INFO(f, args...) printk (KERN_INFO DRV_NAME " "f,##args)
+#define NLM_INFO(f, args...) printk (KERN_INFO DRV_NAME " "f, ##args)
 #define NLM_VERB(f, args...) do { if (verbose) printk (KERN_INFO DRV_NAME " "f, ##args); } while (0)
 
 #define NLM_PCI_VENDOR_ID (0x184e)
@@ -317,7 +318,7 @@ nlm_drv_module_init (void)
         NLM_VERB (": === Probed device no %d (%p) (%s) === \n",
                   i, &device_list[i], nlm_device_type_name[device_list[i].type]);
         NLM_VERB (":     proc_entry /proc/NetL7/%s\n",
-                  device_list[i].proc_entry->name);
+			device_list[i].proc_entry->name);
         NLM_VERB (":     register_map base = 0x%llx size = 0x%x\n",
                   device_list[i].regmap_base, device_list[i].regmap_size);
         NLM_VERB (":     system memory base = 0x%llx size = 0x%x\n",
@@ -414,7 +415,7 @@ nlm_device_info_show (struct seq_file *m, void *v)
 static int
 nlm_device_open (struct inode *inode, struct file *file)
 {
-  struct nlm_device *dev = PDE (inode)->data;
+  struct nlm_device *dev = PDE_DATA(inode);
   
   if (dev == NULL)
     return -EINVAL;
@@ -630,7 +631,7 @@ nlm_device_mmap (struct file *file_p, struct vm_area_struct *vm_p)
 static int
 nlm_device_close (struct inode *inode, struct file *file)
 {
-  struct nlm_device *dev = PDE (inode)->data;
+  struct nlm_device *dev = PDE_DATA(inode);
   
   if (dev == NULL)
     return -EINVAL;
@@ -700,7 +701,7 @@ create_proc_entries ()
               break;
             }
           mars1_id++;
-          entry = create_proc_entry (buf, S_IFREG | S_IRUGO | S_IWUGO, 
+          entry = proc_mkdir_mode (buf, S_IFREG | S_IRUGO | S_IWUGO, 
                                      nlm_proc_root);
           if (entry == NULL)
             {
@@ -708,8 +709,8 @@ create_proc_entries ()
               break;
             }
 
-          entry->proc_fops = &device_proc_fops;
-          entry->data = &device_list[i];
+          entry->proc_fops = (const struct file_operations *)&device_proc_fops;
+          entry->data = (void *)&device_list[i];
           device_list[i].proc_entry = entry;
           break;
           
@@ -720,7 +721,7 @@ create_proc_entries ()
               break;
             }
           mars2_id++;
-          entry = create_proc_entry (buf, S_IFREG | S_IRUGO | S_IWUGO, 
+          entry = proc_mkdir_mode (buf, S_IFREG | S_IRUGO | S_IWUGO, 
                                      nlm_proc_root);
           if (entry == NULL)
             {
@@ -728,8 +729,8 @@ create_proc_entries ()
               break;
             }
 
-          entry->proc_fops = &device_proc_fops;
-          entry->data = &device_list[i];
+          entry->proc_fops = (const struct file_operations *)&device_proc_fops;
+          entry->data = (void *)&device_list[i];
           device_list[i].proc_entry = entry;
           break;
 
@@ -743,7 +744,7 @@ create_proc_entries ()
                   failure = 1;
                   break;
                 }
-              entry = create_proc_entry (buf, S_IFREG | S_IRUGO | S_IWUGO, 
+              entry = proc_mkdir_mode (buf, S_IFREG | S_IRUGO | S_IWUGO, 
                                          nlm_proc_root);
               if (entry == NULL)
                 {
@@ -751,8 +752,8 @@ create_proc_entries ()
                   break;
                 }
 
-              entry->proc_fops = &device_proc_fops;
-              entry->data = &device_list[i];
+              entry->proc_fops = (const struct file_operations *)&device_proc_fops;
+              entry->data = (void *)&device_list[i];
               device_list[i].proc_entry = entry;
               i++;
             }
@@ -769,7 +770,7 @@ create_proc_entries ()
                   failure = 1;
                   break;
                 }
-              entry = create_proc_entry (buf, S_IFREG | S_IRUGO | S_IWUGO, 
+              entry = proc_mkdir_mode (buf, S_IFREG | S_IRUGO | S_IWUGO, 
                                          nlm_proc_root);
               if (entry == NULL)
                 {
@@ -777,8 +778,8 @@ create_proc_entries ()
                   break;
                 }
 
-              entry->proc_fops = &device_proc_fops;
-              entry->data = &device_list[i];
+              entry->proc_fops = (const struct file_operations *)&device_proc_fops;
+              entry->data = (void *)&device_list[i];
               device_list[i].proc_entry = entry;
               i++;
             }
@@ -793,7 +794,7 @@ create_proc_entries ()
               break;
             }
           mars3_id++;
-          entry = create_proc_entry (buf, S_IFREG | S_IRUGO | S_IWUGO, 
+          entry = proc_mkdir_mode (buf, S_IFREG | S_IRUGO | S_IWUGO, 
                                      nlm_proc_root);
           if (entry == NULL)
             {
@@ -801,8 +802,8 @@ create_proc_entries ()
               break;
             }
 
-          entry->proc_fops = &device_proc_fops;
-          entry->data = &device_list[i];
+          entry->proc_fops = (const struct file_operations *)&device_proc_fops;
+          entry->data = (void *)&device_list[i];
           device_list[i].proc_entry = entry;
           break;
         default:
-- 
1.7.9.5

