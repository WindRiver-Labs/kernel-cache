From 2e138d6346e8ac6d84c212d8da75d82802dcc02c Mon Sep 17 00:00:00 2001
From: kopal <kopal@broadcom.com>
Date: Mon, 30 Dec 2013 16:20:42 +0530
Subject: [PATCH 078/160] sensors: Added sysfs write support to MAX6653
 driver.

sysfs write enables the user to change the upper and the lower temperature
limits from the userspace.

Signed-off-by: Jack Tan <jack.tan@windriver.com>
Signed-off-by: Jack Tan <jiankemeng@gmail.com>
---
 drivers/hwmon/max6653.c |  214 ++++++++++++++++++++++++++++++++---------------
 1 file changed, 147 insertions(+), 67 deletions(-)

diff --git a/drivers/hwmon/max6653.c b/drivers/hwmon/max6653.c
index 551a1e4..590ab95 100644
--- a/drivers/hwmon/max6653.c
+++ b/drivers/hwmon/max6653.c
@@ -38,8 +38,8 @@
 #define MAX6653_REG_STAT1       0x02
 #define MAX6653_REG_STAT2       0x03
 #define MAX6653_REG_EXTTMP      0x06
-#define MAX6653_REG_LCLTMP      0x0A
-#define MAX6653_REG_REMTMP      0x0B
+#define MAX6653_REG_LCLTMP    	0x0A
+#define MAX6653_REG_REMTMP    	0x0B
 #define MAX6653_REG_LCLTMP_OFF  0x0D
 #define MAX6653_REG_REMTMP_OFF  0x0E
 #define MAX6653_REG_LCLTMP_HI   0x14
@@ -50,13 +50,12 @@
 #define MAX6653_REG_REMTMP_THRM 0x1A
 #define MAX6653_REG_LCLTMP_SD   0x1B
 #define MAX6653_REG_REMTMP_SD   0x1C
-#define MAX6653_REG_LCLTMP_RNG  0x24
-#define MAX6653_REG_REMTMP_RNG  0x25
 #define MAX6653_REG_DEVID       0x3D
 #define MAX6653_REG_MANID       0x3E
 #define MAX6653_REG_THRMREV     0x3F
 
 #define MAX6653_CFG1_MONITOR_ENABLE 0x01
+#define TEMP_LIMIT_TO_REG(val)  SENSORS_LIMIT((val) / 1000, 0, 255)
 /*
  * Config register 2 bits
  */
@@ -106,89 +105,168 @@ struct max6653_data {
 	u8 config1;
 	u8 config2;
 	u8 extbits;
-	u8 temp1_input;
-	u8 temp2_input;
-	u8 temp1_min;
-	u8 temp1_max;
-	u8 temp2_min;
-	u8 temp2_max;
-	u8 temp1_crit;
-	u8 temp2_crit;
+	u8 temp_input[2];
+	u8 temp_min[2];
+	u8 temp_max[2];
+	u8 temp_crit[2];
 	u8 alarm;
 };
 
-static ssize_t show_temp1_min(struct device *dev, struct device_attribute *devattr,
+static ssize_t show_temp_min(struct device *dev, struct device_attribute *devattr,
                           char *buf)
 {
+	long temp;
 	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp1_min)*1000);
-}
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	if (IS_ERR(data))
+		return PTR_ERR(data);
+
+	temp = data->temp_min[attr->index] * 1000;
+	return sprintf(buf, "%ld\n", temp);
 
-static ssize_t show_temp2_min(struct device *dev, struct device_attribute *devattr,
-                          char *buf)
-{
-	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp2_min)*1000);
 }
-static ssize_t show_temp1_max(struct device *dev, struct device_attribute *devattr,
+
+static ssize_t show_temp_max(struct device *dev, struct device_attribute *devattr,
                           char *buf)
 {
+	long temp;
 	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp1_max)*1000);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	if (IS_ERR(data))
+		return PTR_ERR(data);
+
+	temp = data->temp_max[attr->index] * 1000;
+	return sprintf(buf, "%ld\n", temp);
+
 }
-static ssize_t show_temp2_max(struct device *dev, struct device_attribute *devattr,
+
+static ssize_t show_temp_input(struct device *dev, struct device_attribute *devattr,
                           char *buf)
 {
+	long temp;
 	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp2_max)*1000);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+	if (IS_ERR(data))
+		return PTR_ERR(data);
+
+	temp = data->temp_input[attr->index] *1000 ;
+	return sprintf(buf, "%ld\n", temp);
+
 }
 
-static ssize_t show_temp1_input(struct device *dev, struct device_attribute *devattr,
+static ssize_t show_temp_crit(struct device *dev, struct device_attribute *devattr,
                           char *buf)
 {
+	long temp;
 	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp1_input)*1000);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	if (IS_ERR(data))
+		return PTR_ERR(data);
+
+	temp = data->temp_crit[attr->index] * 1000;
+	return sprintf(buf, "%ld\n", temp);
+
 }
 
-static ssize_t show_temp2_input(struct device *dev, struct device_attribute *devattr,
-                          char *buf)
+static ssize_t show_alarm(struct device *dev, struct device_attribute
+                          *devattr, char *buf)
 {
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
 	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp2_input)*1000);
+	int bitnr = attr->index;
+
+	return sprintf(buf, "%d\n", (data->alarm >> bitnr) & 1);
 }
 
-static ssize_t show_temp1_crit(struct device *dev, struct device_attribute *devattr,
-                          char *buf)
+static ssize_t set_temp_min(struct device *dev,
+                            struct device_attribute *devattr,
+                            const char *buf, size_t count)
 {
-	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp1_crit)*1000);
+	static const u8 reg[2] = {
+		MAX6653_REG_LCLTMP_LO,
+		MAX6653_REG_REMTMP_LO,
+	};
+	struct i2c_client *client = to_i2c_client(dev);
+	struct max6653_data *data = i2c_get_clientdata(client);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+	unsigned long val;
+	int res;
+	int nr = attr->index;
+	res = kstrtoul(buf, 10, &val);
+	if (res)
+	return res;
+
+	mutex_lock(&data->update_lock);
+	data->temp_min[nr] = TEMP_LIMIT_TO_REG(val);
+	max6653_write(client,reg[nr],
+	data->temp_min[nr]);
+	mutex_unlock(&data->update_lock);
+	return count;
 }
 
-static ssize_t show_temp2_crit(struct device *dev, struct device_attribute *devattr,
-                          char *buf)
+static ssize_t set_temp_max(struct device *dev,
+                            struct device_attribute *devattr,
+                            const char *buf, size_t count)
 {
-	struct max6653_data *data = max6653_update_device(dev);
-	return sprintf(buf, "%d\n",(data->temp2_crit)*1000);
+	static const u8 reg[2] = {
+		MAX6653_REG_LCLTMP_HI,
+		MAX6653_REG_REMTMP_HI,
+	};
+	struct i2c_client *client = to_i2c_client(dev);
+	struct max6653_data *data = i2c_get_clientdata(client);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+	unsigned long val;
+	int res;
+	int nr = attr->index;
+	res = kstrtoul(buf, 10, &val);
+	if (res)
+		return res;
+
+	mutex_lock(&data->update_lock);
+	data->temp_max[nr] = TEMP_LIMIT_TO_REG(val);
+	max6653_write(client,reg[nr],
+	data->temp_max[nr]);
+	mutex_unlock(&data->update_lock);
+	return count;
 }
 
-static ssize_t show_alarm(struct device *dev, struct device_attribute
-                          *devattr, char *buf)
+static ssize_t set_temp_crit(struct device *dev,
+                            struct device_attribute *devattr,
+                            const char *buf, size_t count)
 {
+	static const u8 reg[2] = {
+		MAX6653_REG_LCLTMP_THRM,
+		MAX6653_REG_REMTMP_THRM	,
+	};
+	struct i2c_client *client = to_i2c_client(dev);
+	struct max6653_data *data = i2c_get_clientdata(client);
 	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
-	struct max6653_data *data = max6653_update_device(dev);
-	int bitnr = attr->index;
+	unsigned long val;
+	int res;
+	int nr = attr->index;
+	res = kstrtoul(buf, 10, &val);
+	if (res)
+		return res;
 
-	return sprintf(buf, "%d\n", (data->alarm >> bitnr) & 1);
+	mutex_lock(&data->update_lock);
+	data->temp_crit[nr] = TEMP_LIMIT_TO_REG(val);
+	max6653_write(client,reg[nr],
+			data->temp_crit[nr]);
+	mutex_unlock(&data->update_lock);
+	return count;
 }
 
-static SENSOR_DEVICE_ATTR(temp1_input, S_IRUSR|S_IRUGO, show_temp1_input, NULL, 0);
-static SENSOR_DEVICE_ATTR(temp2_input, S_IRUSR|S_IRUGO, show_temp2_input, NULL, 0);
-static SENSOR_DEVICE_ATTR(temp1_min, S_IWUSR | S_IRUGO, show_temp1_min, NULL, 0);
-static SENSOR_DEVICE_ATTR(temp2_min, S_IWUSR | S_IRUGO, show_temp2_min, NULL, 0);
-static SENSOR_DEVICE_ATTR(temp1_max, S_IWUSR | S_IRUGO, show_temp1_max, NULL, 0);
-static SENSOR_DEVICE_ATTR(temp2_max, S_IWUSR | S_IRUGO, show_temp2_max, NULL, 0);
-static SENSOR_DEVICE_ATTR(temp1_crit, S_IWUSR | S_IRUGO, show_temp1_crit, NULL, 0);
-static SENSOR_DEVICE_ATTR(temp2_crit, S_IWUSR | S_IRUGO, show_temp2_crit, NULL, 0);
+static SENSOR_DEVICE_ATTR(temp1_input, S_IRUGO, show_temp_input, NULL, 0);
+static SENSOR_DEVICE_ATTR(temp2_input, S_IRUGO, show_temp_input, NULL, 1);
+static SENSOR_DEVICE_ATTR(temp1_min, S_IWUGO | S_IRUGO, show_temp_min, set_temp_min, 0);
+static SENSOR_DEVICE_ATTR(temp2_min, S_IWUGO | S_IRUGO, show_temp_min, set_temp_min, 1);
+static SENSOR_DEVICE_ATTR(temp1_max, S_IWUGO | S_IRUGO, show_temp_max, set_temp_max, 0);
+static SENSOR_DEVICE_ATTR(temp2_max, S_IWUGO | S_IRUGO, show_temp_max, set_temp_max, 1);
+static SENSOR_DEVICE_ATTR(temp1_crit, S_IWUGO | S_IRUGO, show_temp_crit, set_temp_crit, 0);
+static SENSOR_DEVICE_ATTR(temp2_crit, S_IWUGO | S_IRUGO, show_temp_crit, set_temp_crit, 1);
 /*ALARMS*/
 
 static SENSOR_DEVICE_ATTR(temp2_max_alarm, S_IRUGO, show_alarm, NULL, 2);
@@ -264,7 +342,7 @@ exit_remove:
 
 static int max6653_init_client(struct i2c_client *client)
 {
-	u8 cfg2;
+	u8 cfg2, cfg;
 
 	/* Reset the chip */
 	max6653_write(client, MAX6653_REG_CFG2, MAX6653_CFG2_RESET);
@@ -272,7 +350,9 @@ static int max6653_init_client(struct i2c_client *client)
 	/*ebnable the temperature monitoring*/
 	max6653_write(client, MAX6653_REG_CFG1,MAX6653_CFG1_MONITOR_ENABLE);
 	cfg2=max6653_read(client, MAX6653_REG_CFG2);
-
+	/* disable INT input function */
+	cfg2 &= ~(1<<4);
+	max6653_write(client, MAX6653_REG_CFG2, cfg);
 	max6653_write(client, MAX6653_REG_REMTMP_OFF,0x80);
 	return 0;
 }
@@ -305,21 +385,21 @@ static struct max6653_data *max6653_update_device(struct device *dev)
 	mutex_lock(&data->update_lock);
 
 	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
-		data->config1 = max6653_read (client, MAX6653_REG_CFG1);
-		data->config2 = max6653_read (client, MAX6653_REG_CFG2);
-		data->extbits  = max6653_read (client, MAX6653_REG_EXTTMP);
-		data->temp1_input = max6653_read (client, MAX6653_REG_LCLTMP);
-		data->temp2_input = max6653_read (client, MAX6653_REG_REMTMP);
-		data->temp1_max = max6653_read (client, MAX6653_REG_LCLTMP_HI);
-		data->temp1_min = max6653_read (client, MAX6653_REG_LCLTMP_LO);
-		data->temp2_max = max6653_read (client, MAX6653_REG_REMTMP_HI);
-		data->temp2_min = max6653_read (client, MAX6653_REG_REMTMP_LO);
-		data->temp1_crit = max6653_read (client, MAX6653_REG_LCLTMP_THRM);
-		data->temp2_crit = max6653_read (client, MAX6653_REG_REMTMP_THRM);
-		data->alarm= max6653_read (client, MAX6653_REG_STAT1);
-
-		data->last_updated = jiffies;
-		data->valid = 1;
+		data->config1 		= max6653_read (client, MAX6653_REG_CFG1);
+		data->config2 		= max6653_read (client, MAX6653_REG_CFG2);
+		data->extbits  		= max6653_read (client, MAX6653_REG_EXTTMP);
+		data->temp_input[0] 	= max6653_read (client, MAX6653_REG_LCLTMP);
+		data->temp_input[1]	= max6653_read (client, MAX6653_REG_REMTMP);
+		data->temp_max[0] 	= max6653_read (client, MAX6653_REG_LCLTMP_HI);
+		data->temp_min[0] 	= max6653_read (client, MAX6653_REG_LCLTMP_LO);
+		data->temp_max[1] 	= max6653_read (client, MAX6653_REG_REMTMP_HI);
+		data->temp_min[1] 	= max6653_read (client, MAX6653_REG_REMTMP_LO);
+		data->temp_crit[0] 	= max6653_read (client, MAX6653_REG_LCLTMP_THRM);
+		data->temp_crit[1] 	= max6653_read (client, MAX6653_REG_REMTMP_THRM);
+		data->alarm		= max6653_read (client, MAX6653_REG_STAT1);
+
+		data->last_updated 	= jiffies;
+		data->valid 		= 1;
 	}
 
 	mutex_unlock(&data->update_lock);
-- 
1.7.9.5

