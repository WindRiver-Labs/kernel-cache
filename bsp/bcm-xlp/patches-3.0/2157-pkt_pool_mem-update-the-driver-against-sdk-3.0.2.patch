From e4f05ef7de833745d3e24012779faf492f568268 Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Thu, 19 Jun 2014 11:19:40 +0800
Subject: [PATCH 157/160] pkt_pool_mem: update the driver against sdk 3.0.2

rebase the packet pool memory driver to sdk 3.0.2

Signed-off-by: Jack Tan <jack.tan@windriver.com>
Signed-off-by: Jack Tan <jiankemeng@gmail.com>
---
 .../netlogic/pkt_pool_mem/pkt_pool_kern_iface.h    |    1 +
 drivers/netlogic/pkt_pool_mem/pkt_pool_mem.c       |   45 +++++++++++++++++++-
 2 files changed, 44 insertions(+), 2 deletions(-)

diff --git a/drivers/netlogic/pkt_pool_mem/pkt_pool_kern_iface.h b/drivers/netlogic/pkt_pool_mem/pkt_pool_kern_iface.h
index 395ff01..5b869a4 100644
--- a/drivers/netlogic/pkt_pool_mem/pkt_pool_kern_iface.h
+++ b/drivers/netlogic/pkt_pool_mem/pkt_pool_kern_iface.h
@@ -12,6 +12,7 @@ enum pktmem_ops {
 	ALLOC_POOL = 0,
 	FREE_POOL,
 	PRINT_POOL,
+	CACHE_FLUSH
 };
 
 #endif
diff --git a/drivers/netlogic/pkt_pool_mem/pkt_pool_mem.c b/drivers/netlogic/pkt_pool_mem/pkt_pool_mem.c
index 08be5c1..bc018b6 100644
--- a/drivers/netlogic/pkt_pool_mem/pkt_pool_mem.c
+++ b/drivers/netlogic/pkt_pool_mem/pkt_pool_mem.c
@@ -5,6 +5,8 @@
 #include <linux/slab.h>
 #include <linux/fs.h>
 #include <linux/mm.h>
+#include <linux/delay.h>
+#include <asm/cacheops.h>
 #include "libfdt.h"
 #include "pkt_pool_kern_iface.h"
 
@@ -13,7 +15,24 @@
 #define MB(x) 		(x*1024*1024)
 #define PKTMEM_MAJOR 	123
 static DEFINE_SPINLOCK(ioctl_lock);
-
+static DEFINE_SPINLOCK(cache_lock);
+
+#define cache_op(op,addr)                                               \
+        __asm__ __volatile__(                                           \
+        "       .set    push                                    \n"     \
+        "       .set    noreorder                               \n"     \
+        "       cache   %0, %1                                  \n"     \
+        "       .set    pop                                     \n"     \
+        :                                                               \
+        : "i" (op), "R" (*(unsigned char *)(addr)))
+
+#ifdef __MIPSEL__
+#define swap32(x) ((uint32_t)(                                                           \
+				(((uint32_t)(x) & (uint32_t)0x000000ffUL) << 24) | \
+				(((uint32_t)(x) & (uint32_t)0x0000ff00UL) <<  8) | \
+				(((uint32_t)(x) & (uint32_t)0x00ff0000UL) >>  8) | \
+				(((uint32_t)(x) & (uint32_t)0xff000000UL) >> 24)))
+#endif
 
 typedef struct memory_pool 
 {
@@ -170,14 +189,29 @@ static int free_memory (brcm_devmem_ioctl_t * param)
 		return -1;
 }
 
+
 static long pktmem_ioctl (struct file *fptr, unsigned int cmd, unsigned long dp)
 {
+	
 	int rc;
 	brcm_devmem_ioctl_t *dptr, data;
-
+	
 #ifdef PKTMEM_DEBUG
 	printk("pktmem: icoctl enter, cmd %d.\n", cmd);
 #endif
+	/* Handling special cmd for cache flush operation */
+	if(cmd == CACHE_FLUSH) 
+	{
+		spin_lock(&cache_lock);
+		uint64_t paddr = dp;
+		cache_op(Hit_Writeback_Inv_D,paddr);
+		cache_op(Hit_Writeback_Inv_D,paddr+32);
+		udelay(30);
+		cache_op(Hit_Writeback_Inv_SD,paddr);	
+		spin_unlock(&cache_lock);
+		return 0;
+	}
+
 	raw_spin_lock(&ioctl_lock);
 	dptr = &data;
 	rc = 0;
@@ -272,6 +306,9 @@ static int __init brcm_xlp_ppm_init (void)
 	int i, node;
 	void *fdt;
 	uint32_t pktregs[MAX_NODES * 5];
+#ifdef __MIPSEL__
+	int j;
+#endif
 
 	i = register_chrdev(PKTMEM_MAJOR, "brcm_pktmem", &pktmem_ops);
 	if (i < 0)
@@ -292,6 +329,10 @@ static int __init brcm_xlp_ppm_init (void)
 			mem_pool_data[node].next = NULL;
 			memset(mem_pool_data[node].shr_id, '\0', 64);
 			mem_pool_data[node].in_use = 0;
+#ifdef __MIPSEL__
+			for (j=0; j < 5; j++)
+				pktregs[i+j]=swap32(pktregs[i+j]);
+#endif
 			mem_pool_data[node].start = ((((unsigned long long)pktregs[i+1])<<32) | (pktregs[i+2]));
 			mem_pool_data[node].size = ((((unsigned long long)pktregs[i+3])<<32) | (pktregs[i+4]));
 		}
-- 
1.7.9.5

