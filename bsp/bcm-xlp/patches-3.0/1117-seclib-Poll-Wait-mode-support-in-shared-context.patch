From ed7afdca4818a56a0f2955b5d2f9c1ac188de363 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Thu, 6 Feb 2014 18:15:35 +0530
Subject: [PATCH 117/163] seclib : Poll/Wait mode support in shared context

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h |   19 +++++++++++++++++++
 arch/mips/netlogic/lib/seclib/cryptosoc_lib.c |    8 +++++++-
 2 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h b/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h
index f26a670..326489d 100644
--- a/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h
@@ -87,10 +87,14 @@ enum cryptosoc_ctx_mode {
 * @CRYPTOSOC_CTX_ASYNC_RSP_POP_BY_APP: If this is set, the response from the 
 * engine is poped by the application instead of the interrupt handler. 
 * Interrupt on this vc should not be enabled if this is set.
+* @CRYPTOSOC_CTX_SYNC_SHRD_POLL_EN: If this is set, the response will be
+* polled continuously instead of sleeping for the response. Valid only
+* in sync shared mode.
 */
 /*!defines ctx_param_flags < */
 #define CRYPTOSOC_CTX_ASYNC_RSP_IN_ORDER 	0x1
 #define CRYPTOSOC_CTX_ASYNC_RSP_POP_BY_APP	0x2
+#define CRYPTOSOC_CTX_SYNC_SHRD_POLL_EN 	0x4
 /*!defines ctx_param_flags > */
 
 /**
@@ -186,6 +190,21 @@ struct cryptosoc_ctx {
 	int fd; 
 };
 
+/* Change the sync shared default sleep mode to poll mode or vice versa
+*  depending on whether the reponse should be polled or not. When the
+*  size of the packet is very low, the sae response comes much faster
+*  where the sleep & wakeup takes more number of cycles */
+static inline void cryptosoc_ctx_modify_sync_shrd_wait_mode(
+		struct cryptosoc_ctx *ctx, int poll)
+{
+	struct cryptosoc_ctx_priv_data *cpriv;
+	cpriv = (struct cryptosoc_ctx_priv_data *)(ctx->lib_priv);
+	if(poll)
+		cpriv->flags |= CRYPTOSOC_CTX_SYNC_SHRD_POLL_EN;
+	else
+		cpriv->flags &= (~CRYPTOSOC_CTX_SYNC_SHRD_POLL_EN);
+}
+
 extern int cryptosoc_new_context(
 		struct cryptosoc_ctx_params *cparam, 
 		struct cryptosoc_ctx **ctxt);
diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c
index b67554e..0bb5746 100644
--- a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c
@@ -149,6 +149,7 @@
 int cryptosoc_ptype_gen;
 static int cryptosoc_base_vc[CRYPTOSOC_TYPE_MAX];
 static int cryptosoc_lmt_vc[CRYPTOSOC_TYPE_MAX];
+#define relax() __asm__ __volatile__("sync": : :"memory")
 
 cryptosoc__mem_alloc *cryptosoc_mem_alloc;
 cryptosoc__mem_free *cryptosoc_mem_free;
@@ -806,6 +807,7 @@ try_again:
 
 	cryptosoc_dbg_print("Mode is shared-vc ,msg2 %llx\n", (unsigned long long)msg2);
 
+
 	while(retry_count > 0 ) {
 		if(gen_type2) {
 			if(rsp_msg)
@@ -824,7 +826,9 @@ try_again:
 	}
 
 retry:
-	if((rv = crypto_ctxt_shrd_wait_for_response(fd)) < 0)
+	if(cpriv->flags & CRYPTOSOC_CTX_SYNC_SHRD_POLL_EN)
+		relax();
+	else if((rv = crypto_ctxt_shrd_wait_for_response(fd)) < 0)
 		return rv;
 		
 	/* if no change in the response generator id */
@@ -835,6 +839,8 @@ retry:
 		*res_msg = cpriv->rsp->rsp_msg[req_id].res_val;
 	rv = CRYPTOSOC_OK;
 
+
+
 shrd_exit:
 	cryptosoc_lock(&cpriv->lock);
 	cpriv->free_req_index[cpriv->req_tail] = req_id;
-- 
1.7.9.5

