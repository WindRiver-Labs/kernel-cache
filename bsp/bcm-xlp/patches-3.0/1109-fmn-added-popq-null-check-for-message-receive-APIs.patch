From eca140f2581a73e5543b9f76fbc454d5f7cb37f3 Mon Sep 17 00:00:00 2001
From: Virendra Pathak <vpathak@broadcom.com>
Date: Mon, 20 Jan 2014 17:49:37 +0530
Subject: [PATCH 109/163] fmn: added popq null check for message receive APIs

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h |  154 ++++++++++++++++--------
 1 file changed, 105 insertions(+), 49 deletions(-)

diff --git a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h
index 6f4560a..214c6b1 100644
--- a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h
+++ b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_dp.h
@@ -57,6 +57,14 @@
 #define XLP_MSG_CONFIG1_REG     $6
 #define XLP_MSG_INT_REG         $8
 
+enum xlp_rcv_return_t {
+	EPOPQ_EMPTY = -2,
+	ELD_FAILURE,
+	MSG_SUCCESS
+};
+
+#define POP_CHECK_BIT	1
+
 
 #define _read_32bit_cp2_register(source)                        \
 ({ int __res;                                                   \
@@ -859,7 +867,7 @@ static inline int xlp_receive(unsigned int vc)
 * @param [out]  msg0 		:64b data value for the received message
 *
 * @return
-*  - "0" on receive success, "-1" on failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 * 
 * @ingroup hal_fmn
 *
@@ -867,17 +875,23 @@ static inline int xlp_receive(unsigned int vc)
 static inline int xlp_message_receive_1(uint32_t vc, uint32_t *src_id,
 	uint32_t *size, uint32_t *code,	uint64_t *msg0)
 {
-	unsigned int status;
+	volatile unsigned int status, rx;
+
+	rx = xlp_receive(vc);
+	status = xlp_read_rx_status();	
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
 
-	if (!xlp_receive(vc))
-		return -1;
-
-	status = xlp_read_rx_status();
 	*size = ((status >> 26) & 0x3) + 1;
 	*code = (status >> 18) & 0xff;
 	*src_id = (status >> 4) & 0xfff;
 	*msg0 = xlp_load_rx_msg0();
-	return 0;
+	return MSG_SUCCESS;
 }
 /**
 * @brief xlp_message_receive_2 function is used to receive a single entry message from a VC of the CPU. Size should be used to determine how many of msg0-msg1 have valid data and if there were more messages available.
@@ -890,7 +904,7 @@ static inline int xlp_message_receive_1(uint32_t vc, uint32_t *src_id,
 * @param [out]  msg1 		:64b data value for the second received message
 *
 * @return
-*  - "0" on receive success, "-1" on failure, "1" on load failure, "2" on pop failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 * 
 * @ingroup hal_fmn
 *
@@ -898,18 +912,24 @@ static inline int xlp_message_receive_1(uint32_t vc, uint32_t *src_id,
 static inline int xlp_message_receive_2(uint32_t vc, uint32_t *src_id,
 	uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1)
 {
-	unsigned int status;
-
-	if (!xlp_receive(vc))
-		return -1;
+	volatile unsigned int status, rx;
 
+	rx = xlp_receive(vc);
 	status = xlp_read_rx_status();
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
+
 	*size = ((status >> 26) & 0x3) + 1;
 	*code = (status >> 18) & 0xff;
 	*src_id = (status >> 4) & 0xfff;
 	*msg0 = xlp_load_rx_msg0();
 	*msg1 = xlp_load_rx_msg1();
-	return (status & 0x3);
+	return MSG_SUCCESS;
 }
 
 /**
@@ -924,7 +944,7 @@ static inline int xlp_message_receive_2(uint32_t vc, uint32_t *src_id,
 * @param [out]  msg2            :64b data value for the third received message
 *
 * @return
-*  - "0" on receive success, "-1" on failure, "1" on load failure, "2" on pop failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 *
 * @ingroup hal_fmn
 *
@@ -932,19 +952,25 @@ static inline int xlp_message_receive_2(uint32_t vc, uint32_t *src_id,
 static inline int xlp_message_receive_3(uint32_t vc, uint32_t *src_id,
         uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1, uint64_t *msg2)
 {
-        unsigned int status;
+        volatile unsigned int status, rx;
 
-        if (!xlp_receive(vc))
-                return -1;
+	rx = xlp_receive(vc);
+	status = xlp_read_rx_status();
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
 
-        status = xlp_read_rx_status();
         *size = ((status >> 26) & 0x3) + 1;
         *code = (status >> 18) & 0xff;
         *src_id = (status >> 4) & 0xfff;
         *msg0 = xlp_load_rx_msg0();
         *msg1 = xlp_load_rx_msg1();
         *msg2 = xlp_load_rx_msg2();
-        return (status & 0x3);
+        return MSG_SUCCESS;
 }
 
 /* */
@@ -961,7 +987,7 @@ static inline int xlp_message_receive_3(uint32_t vc, uint32_t *src_id,
 * @param [out]  msg3 		:64b data value for the fourth received message
 *
 * @return
-*  - "0" on receive success, "-1" on failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 * 
 * @ingroup hal_fmn
 *
@@ -970,12 +996,18 @@ static inline int xlp_message_receive(uint32_t vc, uint32_t *src_id,
 	uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1,
 	uint64_t *msg2, uint64_t *msg3)
 {
-	unsigned int status;
-
-	if (!xlp_receive(vc))
-		return -1;
+	volatile unsigned int status, rx;
 
+	rx = xlp_receive(vc);
 	status = xlp_read_rx_status();
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
+
 	*size = ((status >> 26) & 0x3) + 1;
 	*code = (status >> 18) & 0xff;
 	*src_id = (status >> 4) & 0xfff;
@@ -983,7 +1015,7 @@ static inline int xlp_message_receive(uint32_t vc, uint32_t *src_id,
 	*msg1 = xlp_load_rx_msg1();
 	*msg2 = xlp_load_rx_msg2();
 	*msg3 = xlp_load_rx_msg3();
-	return 0;
+	return MSG_SUCCESS;
 }
 
 /*
@@ -1019,7 +1051,7 @@ static inline int xlp_message_receive(uint32_t vc, uint32_t *src_id,
 * @param [out]  gid             :8b guest ID
 *
 * @return
-*  - "0" on receive success, "-1" on failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 *
 * @ingroup hal_fmn
 *
@@ -1027,18 +1059,24 @@ static inline int xlp_message_receive(uint32_t vc, uint32_t *src_id,
 static inline int xlp_message_receive_gid_1(uint32_t vc, uint32_t *src_id,
 	uint32_t *size, uint32_t *code,	uint64_t *msg0, uint64_t *gid)
 {
-	unsigned int status;
-
-	if (!xlp_receive(vc))
-		return -1;
+	volatile unsigned int status, rx;
 
+	rx = xlp_receive(vc);
 	status = xlp_read_rx_status();
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
+
 	*size = ((status >> 26) & 0x3) + 1;
 	*code = (status >> 18) & 0xff;
 	*src_id = (status >> 4) & 0xfff;
 	*msg0 = xlp_load_rx_msg0();
 	*gid = (xlp_read_rx_status2()) & 0xff;
-	return 0;
+	return MSG_SUCCESS;
 }
 /**
 * @brief xlp_message_receive_gid_2 function is used to receive a single entry message from a VC of the CPU. It also reads the 8b guest ID. Size should be used to determine how many of msg0-msg1 have valid data and if there were more messages available.
@@ -1052,7 +1090,7 @@ static inline int xlp_message_receive_gid_1(uint32_t vc, uint32_t *src_id,
 * @param [out]  gid             :8b guest ID
 *
 * @return
-*  - "0" on receive success, "-1" on failure, "1" on load failure, "2" on pop failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 *
 * @ingroup hal_fmn
 *
@@ -1060,19 +1098,25 @@ static inline int xlp_message_receive_gid_1(uint32_t vc, uint32_t *src_id,
 static inline int xlp_message_receive_gid_2(uint32_t vc, uint32_t *src_id,
 	uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1, uint64_t *gid)
 {
-	unsigned int status;
-
-	if (!xlp_receive(vc))
-		return -1;
+	volatile unsigned int status, rx;
 
+	rx = xlp_receive(vc);
 	status = xlp_read_rx_status();
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
+
 	*size = ((status >> 26) & 0x3) + 1;
 	*code = (status >> 18) & 0xff;
 	*src_id = (status >> 4) & 0xfff;
 	*msg0 = xlp_load_rx_msg0();
 	*msg1 = xlp_load_rx_msg1();
 	*gid = (xlp_read_rx_status2()) & 0xff;
-	return (status & 0x3);
+	return MSG_SUCCESS;
 }
 
 /**
@@ -1088,7 +1132,7 @@ static inline int xlp_message_receive_gid_2(uint32_t vc, uint32_t *src_id,
 * @param [out]  gid             :8b guest ID
 *
 * @return
-*  - "0" on receive success, "-1" on failure, "1" on load failure, "2" on pop failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 *
 * @ingroup hal_fmn
 *
@@ -1097,12 +1141,18 @@ static inline int xlp_message_receive_gid_3(uint32_t vc, uint32_t *src_id,
         uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1, uint64_t *msg2,
 	uint64_t *gid)
 {
-        unsigned int status;
+        volatile unsigned int status, rx;
 
-        if (!xlp_receive(vc))
-                return -1;
+	rx = xlp_receive(vc);
+	status = xlp_read_rx_status();
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
 
-        status = xlp_read_rx_status();
         *size = ((status >> 26) & 0x3) + 1;
         *code = (status >> 18) & 0xff;
         *src_id = (status >> 4) & 0xfff;
@@ -1110,7 +1160,7 @@ static inline int xlp_message_receive_gid_3(uint32_t vc, uint32_t *src_id,
         *msg1 = xlp_load_rx_msg1();
         *msg2 = xlp_load_rx_msg2();
 	*gid = (xlp_read_rx_status2()) & 0xff;
-        return (status & 0x3);
+        return MSG_SUCCESS;
 }
 
 /* */
@@ -1128,7 +1178,7 @@ static inline int xlp_message_receive_gid_3(uint32_t vc, uint32_t *src_id,
 * @param [out]  gid             :8b guest ID
 *
 * @return
-*  - "0" on receive success, "-1" on failure
+*  - "MSG_SUCCESS" on receive success, "ELD_FAILURE" on load failure, "EPOPQ_EMPTY" on popq empty (i.e null msg was popped)
 *
 * @ingroup hal_fmn
 *
@@ -1137,12 +1187,18 @@ static inline int xlp_message_receive_gid(uint32_t vc, uint32_t *src_id,
 	uint32_t *size, uint32_t *code, uint64_t *msg0, uint64_t *msg1,
 	uint64_t *msg2, uint64_t *msg3, uint64_t *gid)
 {
-	unsigned int status;
-
-	if (!xlp_receive(vc))
-		return -1;
+	volatile unsigned int status, rx;
 
+	rx = xlp_receive(vc);
 	status = xlp_read_rx_status();
+	if (!rx) {
+		if (status & (1 << POP_CHECK_BIT)) {
+			return EPOPQ_EMPTY;
+		} else {
+			return ELD_FAILURE;
+		}
+	}
+
 	*size = ((status >> 26) & 0x3) + 1;
 	*code = (status >> 18) & 0xff;
 	*src_id = (status >> 4) & 0xfff;
@@ -1151,7 +1207,7 @@ static inline int xlp_message_receive_gid(uint32_t vc, uint32_t *src_id,
 	*msg2 = xlp_load_rx_msg2();
 	*msg3 = xlp_load_rx_msg3();
 	*gid = (xlp_read_rx_status2()) & 0xff;
-	return 0;
+	return MSG_SUCCESS;
 }
 
 /* */
-- 
1.7.9.5

