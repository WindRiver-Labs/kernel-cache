From 9550171db5661d12dcd6360c2d950f95cfc9f6de Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Fri, 14 Feb 2014 18:27:53 +0800
Subject: [PATCH 45/58] bcm-xlp2: netlogic FMN Data Path driver

Based on SDK 3.0 (2013-10-29)

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/netlogic/Kconfig                   |    7 ++
 drivers/netlogic/fmn_dp/Makefile           |    6 ++
 drivers/netlogic/fmn_dp/fmn_kernel_iface.h |   61 +++++++++++++
 drivers/netlogic/fmn_dp/fmn_main.c         |  136 ++++++++++++++++++++++++++++
 4 files changed, 210 insertions(+)

diff --git a/drivers/netlogic/Kconfig b/drivers/netlogic/Kconfig
index 3812479..33527fb 100644
--- a/drivers/netlogic/Kconfig
+++ b/drivers/netlogic/Kconfig
@@ -52,3 +52,10 @@ config XLP_CMEM
         default y
         help
           This driver supports cmem.
+
+config XLP_FMN_DP
+        tristate "XLP FMN Data Path Driver"
+        depends on NLM_XLP_BOARD
+        default y
+        help
+          This driver supports fmn data path.
diff --git a/drivers/netlogic/fmn_dp/Makefile b/drivers/netlogic/fmn_dp/Makefile
new file mode 100644
index 0000000..d453ce8
--- /dev/null
+++ b/drivers/netlogic/fmn_dp/Makefile
@@ -0,0 +1,6 @@
+EXTRA_CFLAGS := -DCONFIG_XLP_FMN_SUPPORT -DNLM_HAL_LINUX_KERNEL
+EXTRA_CFLAGS += -Iarch/mips/netlogic/lib/libfdt
+
+obj-$(CONFIG_XLP_FMN_DP) 	+= fmn_dp.o
+
+fmn_dp-objs += fmn_main.o
diff --git a/drivers/netlogic/fmn_dp/fmn_kernel_iface.h b/drivers/netlogic/fmn_dp/fmn_kernel_iface.h
new file mode 100644
index 0000000..13d58a8
--- /dev/null
+++ b/drivers/netlogic/fmn_dp/fmn_kernel_iface.h
@@ -0,0 +1,61 @@
+/*-
+ * Copyright (c) 2003-2013 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#ifndef __FMN_KERNEL_IFACE__
+#define __FMN_KERNEL_IFACE__
+
+#define FMN_DP_MAJOR        125
+
+/* Supported values */
+enum processor_type {
+	PROC_XLP8XX = 0,
+	PROC_XLP3XX,
+	PROC_XLP2XX,
+	PROC_XLP9XX,
+};
+
+typedef struct fmn_dp_ioctl {
+	union {
+		struct {
+			enum processor_type type;
+		} pr_type;
+		struct {
+			int cpu_id;
+			int local_queue_id;
+			int queue_id;
+		} recv_q;
+	} u;
+} fmn_dp_ioctl_t;
+
+enum fmn_dp_ops {
+        GET_PROCESSOR_TYPE = 0,
+	GET_RECV_QUEUE,
+};
+
+#endif
diff --git a/drivers/netlogic/fmn_dp/fmn_main.c b/drivers/netlogic/fmn_dp/fmn_main.c
new file mode 100644
index 0000000..2666f5b
--- /dev/null
+++ b/drivers/netlogic/fmn_dp/fmn_main.c
@@ -0,0 +1,136 @@
+/*-
+ * Copyright (c) 2003-2013 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/fs.h>
+#include <linux/mm.h>
+
+#include <asm/cpu.h>
+#include <asm/mipsregs.h>
+#include <asm/netlogic/kvm_para.h>
+
+#include "libfdt.h"
+#include "fmn_kernel_iface.h"
+
+static long fmn_ioctl(struct file *filp, unsigned int cmd, unsigned long data)
+{
+	int rc;
+	fmn_dp_ioctl_t *param;
+
+	param = (fmn_dp_ioctl_t *)data;
+	rc = 0;
+
+	switch(cmd) {
+	case GET_PROCESSOR_TYPE:
+	{
+		int chip = read_c0_prid() & 0xff00;
+
+		switch(chip) {
+		case PRID_IMP_NETLOGIC_XLP8XX:
+			param->u.pr_type.type = PROC_XLP8XX;
+			break;
+		case PRID_IMP_NETLOGIC_XLP3XX:
+			param->u.pr_type.type = PROC_XLP3XX;
+			break;
+		case PRID_IMP_NETLOGIC_XLP2XX:
+			param->u.pr_type.type = PROC_XLP2XX;
+			break;
+		case PRID_IMP_NETLOGIC_XLP9XX:
+			param->u.pr_type.type = PROC_XLP9XX;
+			break;
+		default:
+			rc = -1;
+		}
+		break;
+	}
+	case GET_RECV_QUEUE:
+	{
+		uint64_t host_cpuid;
+		if (is_nlm_guest_os == 0) {
+			host_cpuid = __cpu_logical_map[param->u.recv_q.cpu_id];
+			param->u.recv_q.queue_id =
+				(host_cpuid << 2) + param->u.recv_q.local_queue_id;
+		} else {
+			/* make a hypercall to KVM */
+			if (do_hypcall_p1r1(KVM_HC_GET_HARD_CPUID, param->u.recv_q.cpu_id, &host_cpuid)) {
+				printk(KERN_ERR "fmn_dp: failure to get host cpuid\n");
+				rc = -1;
+			} else
+				param->u.recv_q.queue_id =
+					(host_cpuid << 2) + param->u.recv_q.local_queue_id;
+		}
+		break;
+	}
+	default:
+		rc = -1;
+		break;
+
+	}
+	
+	return rc;
+}
+
+static const struct file_operations fmn_ops = {
+	.owner  = THIS_MODULE,
+	.unlocked_ioctl = fmn_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl = fmn_ioctl,
+#endif
+};
+
+static int __init brcm_fmn_dp_init (void)
+{
+	int i;
+
+	i = register_chrdev(FMN_DP_MAJOR, "fmn_dp", &fmn_ops);
+	if (i < 0)
+	{
+		printk(KERN_ERR "fmn_dp: unable to register %d", FMN_DP_MAJOR);
+		return i;
+	}
+
+	return 0;
+}
+
+static void __exit brcm_fmn_dp_exit (void)
+{
+	printk ("brcm fmn datapath driver exit...\n");
+}
+
+module_init(brcm_fmn_dp_init);
+module_exit(brcm_fmn_dp_exit);
+
+MODULE_AUTHOR("Broadcom");
+MODULE_DESCRIPTION("FMN Data Path Driver");
+MODULE_LICENSE("Proprietary");
+MODULE_VERSION("0.1");
-- 
1.7.9.5

