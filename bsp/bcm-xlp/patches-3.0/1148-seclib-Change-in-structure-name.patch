From 6cb6d19b265d0dc04333e6c2072c7542e6072488 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Thu, 27 Mar 2014 19:40:25 +0530
Subject: [PATCH 148/163] seclib: Change in structure name

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h      |    8 +++
 arch/mips/netlogic/lib/seclib/cryptosoc_lib.c      |   74 ++++++++++++++++++--
 arch/mips/netlogic/lib/seclib/cryptosoc_lib.h      |    9 +--
 .../netlogic/lib/seclib/eccsoc_gen1_hal_defs.h     |    2 +
 arch/mips/netlogic/lib/seclib/eccsoc_lib.h         |    4 ++
 5 files changed, 88 insertions(+), 9 deletions(-)

diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h b/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h
index 326489d..1a2bc06 100644
--- a/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_ctx.h
@@ -211,11 +211,19 @@ extern int cryptosoc_new_context(
 extern int cryptosoc_close_ctx(struct cryptosoc_ctx *ctx);
 extern int cryptosoc_get_response(struct cryptosoc_ctx  *ctx, 
 		_uint64_t *rsp_usr_arg, struct cryptosoc_rsp_result *res);
+#ifndef __SECLIB_HALX
 extern int cryptosoc_process_response(
 		struct cryptosoc_ctx  *ctx, 
 		enum cryptosoc_soc_type soc, 
 		_uint64_t msg0, _uint64_t msg1,
 		_uint64_t *rsp_usr_arg, struct cryptosoc_rsp_result *res);
+#else
+extern int cryptosoc_process_response(
+		struct cryptosoc_ctx  *ctx, 
+		enum cryptosoc_soc_type soc, 
+		void *rx_msg, int rx_msg_sz,
+		_uint64_t *rsp_usr_arg, struct cryptosoc_rsp_result *res);
+#endif
 extern int cryptosoc_process_ctx_request(int gen1, 
 		struct cryptosoc_ctx *ctx, 
 		enum cryptosoc_soc_type soc,
diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c
index 6be6a4d..3ed55a7 100644
--- a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.c
@@ -159,6 +159,7 @@ int cryptosoc_ptype_gen;
 cryptosoc__mem_alloc *cryptosoc_mem_alloc;
 cryptosoc__mem_free *cryptosoc_mem_free;
 #else
+static struct cryptosoc_lib_funcs cryptosoc_lib_f;
 static cryptosoc_req_qhdl_t cryptosoc_req_qhdl_base[CRYPTOSOC_TYPE_MAX];
 static cryptosoc_req_qhdl_t cryptosoc_req_qhdl_lmt[CRYPTOSOC_TYPE_MAX];
 crypto_mem_alloc_t *cryptosoc_mem_alloc;
@@ -229,9 +230,7 @@ int cryptosoc_lib_init(struct cryptosoc_lib_params *params,
 * cryptosoc_lib_init - Initialize the sae/rsa/ecc soc library parameters 
 *  based on the processor type.
 * @params: Pointer to lib param structure(output) 
-* @mem_alloc: Function pointer to allocate physically contiguous memory
-*    This should return memory pointer in success.(input)
-* @mem_free: Function to free the memory.(input)
+* @func: Pointer to the various functions.(input)
 * @arg: For future use
 *
 * This should be called once from every application which is intended 
@@ -241,7 +240,7 @@ int cryptosoc_lib_init(struct cryptosoc_lib_params *params,
 * Return: CRYPTOSOC_OK, CRYPTOSOC_EINVAL
 */
 int cryptosoc_lib_init(struct cryptosoc_lib_params *params, 
-		struct cryptosoc_lib_func *func,
+		struct cryptosoc_lib_funcs *func,
 		void *arg)
 {
 	int i;
@@ -1234,7 +1233,7 @@ int cryptosoc_get_response(struct cryptosoc_ctx  *ctx,
 	}
 	return rv;
 }
-
+#ifndef __SECLIB_HALX
 /**
 * cryptosoc_process_response - Get the rsp arg and result from 
 * the received message. This will be called when the application receives
@@ -1292,3 +1291,68 @@ int cryptosoc_process_response(
 
 	return CRYPTOSOC_OK;
 }
+#else
+/**
+* cryptosoc_process_response - Get the rsp arg and result from 
+* the received message. This will be called when the application receives
+* the messages directly. Here the kernel driver component is not used 
+* in receiving the messages.
+*
+* @ctx: Pointer to the context(output)
+* @soc : Soc type, see cryptosoc_soc_type enum
+* @rx_msg: Pointer t o the received message data(input)
+* @rx_msg_sz: Received message size in bytes
+* @rsp_usr_arg: Value given as part of request send(output)
+* @res : Engine result response(output)
+*
+* Return: CRYPTOSOC_OK, CRYPTOSOC_EINVAL
+*
+* Note:
+* This can be called with a valid ctx or ctxt=null. When ctx is null
+* the rsp_usr_arg will be copied with the recieved arg. Otherwise
+* it will be copied with usr arg given during the request sent.
+*/
+
+int cryptosoc_process_response(
+		struct cryptosoc_ctx  *ctx, 
+		enum cryptosoc_soc_type soc, 
+		void *rx_msg, int rx_msg_sz,
+		_uint64_t *rsp_usr_arg, struct cryptosoc_rsp_result *res)
+{
+	struct cryptosoc_ctx_priv_data *cpriv;
+	int req_id;
+	_uint64_t res_msg, rsp_msg, msg0, msg1;
+
+	if(rx_msg_sz != 16)
+		return -CRYPTOSOC_EINVAL;
+
+	msg0 = *(_uint64_t *)(long)rx_msg;
+	msg1 = *(_uint64_t *)(long)(rx_msg + 8);
+
+
+	/* rsa result is at msg0 and crypto is at msg1 */
+	res_msg = soc == CRYPTOSOC_SAE ? msg1 : msg0;
+	rsp_msg = soc == CRYPTOSOC_SAE ? msg0 : msg1;
+	
+	if(res)
+		res->sae_res.result = res_msg;
+
+	if(rsp_usr_arg)
+		*rsp_usr_arg = rsp_msg;
+
+	/* override the rsp_usr_arg if context is supported */
+
+	if(ctx) {
+		cpriv = (struct cryptosoc_ctx_priv_data *)(ctx->lib_priv);
+
+		req_id = CRYPTOSOC_GET_ASYNC_MSG_OUT_ID(rsp_msg);
+		if(req_id >= cpriv->max_pending_reqs)
+			return  -CRYPTOSOC_EINVAL;
+
+		if(rsp_usr_arg)
+			*rsp_usr_arg = cpriv->req_msg[req_id].async_rsp_usr_arg;
+	}
+
+	return CRYPTOSOC_OK;
+}
+#endif
diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
index ff93621..30141ea 100644
--- a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
@@ -231,7 +231,7 @@ typedef int crypto_get_rsp_fwd_qhdl_t(
 
 
 /**
-* struct cryptosoc_lib_func - Crypto(sae,rsa,ecc) soc library functions which 
+* struct cryptosoc_lib_funcs - Crypto(sae,rsa,ecc) soc library functions which 
 *  has to be provided by the application/OS(callbacks).
 ** @mem_alloc: Function pointer to allocate physically contiguous memory
 *    This should return memory pointer in success.(input)
@@ -250,7 +250,7 @@ typedef int crypto_get_rsp_fwd_qhdl_t(
 *  the cryptosoc_ctx_free
 */
 
-struct cryptosoc_lib_func {
+struct cryptosoc_lib_funcs {
 	/* Application has to provide the below functions,
 	*  depending on the implementation */
 	void *(*mem_alloc)(size_t align, size_t size);
@@ -342,9 +342,10 @@ extern int cryptosoc_lib_init(struct cryptosoc_lib_params *params,
 		void *arg);
 #else
 extern int cryptosoc_lib_init(struct cryptosoc_lib_params *params, 
-		struct cryptosoc_lib_func *func,
+		struct cryptosoc_lib_funcs *funcs,
 		void *arg);
 #endif
+extern int cryptosoc_lib_finish(struct cryptosoc_lib_params *params);
 #ifndef __SECLIB_HALX
 extern int cryptosoc_get_basevc_limitvc(enum cryptosoc_soc_type soc, 
 		int *base_vc, int *lmt_vc);
@@ -410,7 +411,7 @@ static inline int cryptosoc_get_lbc64(unsigned long long x)
 
 static inline void cryptosoc_lock(cryptosoc_lock_t *lock)
 {
-	unsigned int tmp, pid;
+	unsigned int tmp, pid = 0;
 #ifndef NLM_HAL_LINUX_KERNEL 
 	pid = getpid();
 #else
diff --git a/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h b/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h
index 4989c0d..917227e 100644
--- a/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h
+++ b/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h
@@ -145,7 +145,9 @@ static inline char *eccsoc_get_op_func(int val, char *buf)
 
 static inline void eccsoc_gen1_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
 {
+	#ifdef CRYPTOSOC_DBG_EN
 	char buf[32], buf1[32];
+	#endif
 	cryptosoc_dbg_print("\nFmn Info entry0 %llx entry1 %llx\n",entry0, entry1);
 	cryptosoc_dbg_print("  %-16s %-16s %-16s %-16s\n",
 			"SrcL3Alloc","Type", "Func", "SrcAddr");
diff --git a/arch/mips/netlogic/lib/seclib/eccsoc_lib.h b/arch/mips/netlogic/lib/seclib/eccsoc_lib.h
index 2c6fd93..a636a1e 100644
--- a/arch/mips/netlogic/lib/seclib/eccsoc_lib.h
+++ b/arch/mips/netlogic/lib/seclib/eccsoc_lib.h
@@ -1379,6 +1379,7 @@ static inline void eccsoc_dump_request_data(
 	struct eccsoc_req_desc_priv_data *dpriv;
 	int blk, i, arg, max_args;
 	char *mem;
+	#ifdef CRYPTOSOC_DBG_EN
 	char (*tmp)[4];
 	/* names in the order of operation */
 	char names[][4]={
@@ -1393,6 +1394,7 @@ static inline void eccsoc_dump_request_data(
 		"x",   "n",  "",   "",   "",   "", /* mod-inv*/
 		"x",   "n",  "",   "",   "",   ""  /* mod-red */
 	};
+	#endif
 
 	if(!req_desc)
 		return;
@@ -1413,7 +1415,9 @@ static inline void eccsoc_dump_request_data(
 
 	mem = dpriv->req_info[req_num].eng_inp;
 	max_args =  eccsoc_max_req_args[dpriv->req_info[req_num].op];
+	#ifdef CRYPTOSOC_DBG_EN
 	tmp =  &names[dpriv->req_info[req_num].op * 6];
+	#endif
 
 	for(arg=0; arg < max_args; arg++) {
 		cryptosoc_dbg_print("%s\n", tmp[arg]);
-- 
1.7.9.5

