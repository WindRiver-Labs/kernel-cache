From 39c2d1d2e3d06526443124fb66a4d1056b2d7ddf Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Thu, 19 Jun 2014 11:18:33 +0800
Subject: [PATCH 159/163] cde: update the driver against sdk 3.0.2

rebase the compress/decompress driver to sdk 3.0.2

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 drivers/netlogic/nlm_cde/nlm_cde.c        |  155 ++++++++++++++++-------------
 drivers/netlogic/nlm_cde/nlm_cde.h        |   16 +--
 drivers/netlogic/nlm_cde/nlm_cde_api.h    |    5 +
 drivers/netlogic/nlm_cde/nlm_cde_common.h |   47 +++++++++
 4 files changed, 140 insertions(+), 83 deletions(-)

diff --git a/drivers/netlogic/nlm_cde/nlm_cde.c b/drivers/netlogic/nlm_cde/nlm_cde.c
index 95d1588..a7f294d 100644
--- a/drivers/netlogic/nlm_cde/nlm_cde.c
+++ b/drivers/netlogic/nlm_cde/nlm_cde.c
@@ -43,7 +43,7 @@
 #include <linux/poll.h>		/* for POLLIN, etc. */
 #include <nlm_msgring.h>
 #include <nlm_hal.h>
-#include <asm/mutex.h>
+#include <linux/mutex.h>
 
 #include <nlm_xlp.h>
 #include <nlm_hal_fmn.h>
@@ -54,6 +54,8 @@
 #include "nlm_cde.h"
 #include "nlm_cde_api.h"
 
+DEFINE_MUTEX(cde_lock);
+
 #define printf(a, b...) printk(KERN_ERR a, ##b)
 #define malloc(a) kmalloc(a, GFP_ATOMIC)
 #define free kfree
@@ -69,6 +71,9 @@ struct msgrng_msg {
 		__u64 msg3;
 };
 
+static int is_9xx;
+static int is_2xx;
+
 static int xlp_cde_major;
 int xlp_cde_open(struct inode *, struct file *);
 int xlp_cde_release(struct inode *, struct file *);
@@ -98,7 +103,7 @@ volatile fr_page page_array[MAX_NUM_PAGES]    __attribute__((aligned(32)));
 volatile char *(page_array_tmp_data_array[MAX_NUM_PAGES])__attribute__((aligned(32)));
 
 //#define CDE_DEBUG 1
-#ifdef CDE_DEBUG
+#ifdef CDE_DEBUG_DUMP_DATA
 static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
 {
 	int k = 0;
@@ -112,6 +117,11 @@ static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg
 	}
 	printk("\n");
 }
+#else
+static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
+{
+
+}
 #endif
 
 static void *
@@ -173,6 +183,7 @@ static const struct file_operations xlp_cde_fops = {
 	.read = xlp_cde_read,
 	.write = xlp_cde_write,
 	.compat_ioctl = xlp_cde_ioctl,
+	.unlocked_ioctl= xlp_cde_ioctl,
 	.mmap = xlp_cde_mmap,
 	.release = xlp_cde_release,
 };
@@ -188,21 +199,21 @@ static int config_cmp(void)
 	for(i = 0; i < num_cde_engine; i++)
 	{
 		unsigned int val;
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			val = nlm_hal_9xx_read_cde_reg(CMP_REG_CTRL_REG(i));
 		else
 			val = nlm_hal_read_cde_reg(CMP_REG_CTRL_REG(i));
 #ifdef CDE_DEBUG
 		printk("config_cmp i = %d cntrl_reg val = %x\n", i, val);
 #endif
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			val = nlm_hal_9xx_read_cde_reg(CMP_REG_SCRATCH_PAGE(i));
 		else
 			val = nlm_hal_read_cde_reg(CMP_REG_SCRATCH_PAGE(i));
 #ifdef CDE_DEBUG
 		printk("config_cmp i = %d scratch_reg val = %x\n", i, val);
 #endif
-		if(is_nlm_xlp9xx()){
+		if(is_9xx){
 			nlm_hal_9xx_write_cde_reg(CMP_REG_CTRL_REG(i), ((0x0012 << 16) | FD_CMP_PAGE_SIZE)); //16'h{CMP_PAGE_SIZE}
 			nlm_hal_9xx_write_cde_reg(CMP_REG_SCRATCH_PAGE(i), ((SCRATCH_SIZE/64 << 17) | (16 << 9)));
 		}
@@ -269,7 +280,7 @@ static int send_free_desc(void)
 
 		if(is_nlm_xlp2xx())
 			status = send_message_1(MSGRNG_2XX_STNID_CMP1, &fd_msg);
-		else if(is_nlm_xlp9xx())	
+		else if(is_9xx)
 			status = send_message_1(MSGRNG_9XX_STNID_CMP1, &fd_msg);
 		else
 			status = send_message_1(MSGRNG_STNID_CMP1, &fd_msg);
@@ -371,8 +382,8 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
 		}
 
 		//if (cpu_is_xlp9xx())
-		if (is_nlm_xlp9xx())
-		{	
+		if (is_9xx)
+		{
 			stid = nlm_hal_9xxcde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0, (uint64_t*)&cmp_msg[i].msg1, 0, cmp_data->op, rtn_bkt,
 					cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
 #ifdef CDE_DEBUG
@@ -391,7 +402,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
 	}
 
 
-	//    if (is_nlm_xlp9xx())
+	//    if (is_9xx)
 	//	num_messages = 2;
 	// returns the number of messages created
 	return (num_messages);
@@ -489,7 +500,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 		}
 
 		//if (cpu_is_xlp9xx())
-		if (is_nlm_xlp9xx())
+		if (is_9xx)
 		{
 			stid = nlm_hal_9xxcde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0,(uint64_t*)&cmp_msg[i].msg1, 0, cmp_data->op, rtn_bkt,
 					cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
@@ -510,7 +521,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 		desc_idx = desc_idx + cur_desc;
 	}
 
-	//if (is_nlm_xlp9xx())
+	//if (is_9xx)
 	//	num_messages = 2;
 	// returns the number of messages created
 	return (num_messages);
@@ -531,7 +542,7 @@ void return_free_descriptors(msg *msg_list, int msg_index)
 
 		memcpy ((void *) &return_msg, (void *)(msg_list+i), sizeof(msg));
 
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 		{
 			used_fd[used_fd_index++] = ((uint64_t) return_msg.msg0 & 0xffffffffffUll);
 			num_desc = (return_msg.msg0>>40 & 0xffff);
@@ -542,7 +553,7 @@ void return_free_descriptors(msg *msg_list, int msg_index)
 			num_desc = (return_msg.msg1>>40 & 0xffff);
 		}
 
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			temp_desc = (uint64_t *) phys_to_virt(return_msg.msg0 & 0xffffffffffUll);
 		else
 			temp_desc = (uint64_t *) phys_to_virt(return_msg.msg1 & 0xffffffffffUll);
@@ -558,7 +569,7 @@ void return_free_descriptors(msg *msg_list, int msg_index)
 				fd_msg.msg0 = ((uint64_t) used_fd[k]);
 				if(is_nlm_xlp2xx())
 					status = send_message_1(MSGRNG_2XX_STNID_CMP1, &fd_msg);
-				else if(is_nlm_xlp9xx())
+				else if(is_9xx)
 					status = send_message_1(MSGRNG_9XX_STNID_CMP1, &fd_msg);
 				else
 					status = send_message_1(MSGRNG_STNID_CMP1, &fd_msg);
@@ -592,9 +603,12 @@ static int nlm_hal_cde_read_cmp_msg(char *buffer, uint64_t payload)
 		printk("\n tmp_ptr = %llx\n",tmp_ptr);
 		dump_buffer(tmp_ptr, num_bytes, "output:");
 #endif
+#if 0
 		for (j = 0; j < num_bytes; j++) {
 			buffer[offset+j] = tmp_ptr[j]; //AGN: make it Memcpy, and need to check perf difference
 		}
+#endif
+                memcpy(buffer+offset, tmp_ptr, num_bytes);
 		offset = offset + num_bytes;
 	}
 	return offset;
@@ -648,6 +662,12 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
 
 cmp_data_t* nlm_cde_init()
 {
+	if(cmp_data != NULL && cmp_data->src != NULL)
+	{
+		printk("CDE already initialized. Returning\n");
+		return cmp_data;
+	}
+
 	cmp_data = (cmp_data_t *) kmalloc(sizeof(cmp_data_t), GFP_KERNEL);
 	if (!cmp_data)
 		return NULL;
@@ -744,49 +764,48 @@ cmp_data_t* nlm_cde_init()
 
 int xlp_cde_open(struct inode *inode, struct file *filp)
 {
-#ifdef CDE_DEBUG
-	printk("xlp_cde_open \n");
-#endif
-
-		return 0;
+	mutex_lock(&cde_lock);
+	return 0;
 }
 
 
-void nlm_cde_cleanup(cmp_data_t *cmp_data)
+void nlm_cde_cleanup(cmp_data_t *t_cmp_data)
 {
-	int i;
-	if (cmp_data->src)
-		free_pages ((ulong)cmp_data->src, get_order (MAX_INPUT_BUFFER_SIZE));
-	if (cmp_data->target)
-		free_pages ((ulong)cmp_data->target, get_order (MAX_BUFFER_SIZE));
-	if (cmp_data->src_desc)
-		kfree(cmp_data->src_desc);
-	if (cmp_data->scratch)
-		kfree(cmp_data->scratch);
-	if (cmp_data->scratch_inf)
-		kfree(cmp_data->scratch_inf);
-
-	free_pages((ulong)cde_mem_start_1, get_order(cde_mem_size_1));
-	free_pages((ulong)cde_mem_start_2, get_order(cde_mem_size_2));
-	free_pages((ulong)cde_mem_start_3, get_order(cde_mem_size_3));
-	free_pages((ulong)cde_mem_start_4, get_order(cde_mem_size_4));
-	free_pages((ulong)cde_mem_start_5, get_order(cde_mem_size_5));
-
-	cmp_data->src = NULL;
-	cmp_data->target = NULL;
-	cmp_data->src_desc = NULL;
-	cmp_data->scratch = NULL;
-	cmp_data->scratch_inf = NULL;
-
-	if (cmp_data)
-		kfree(cmp_data);
-
-	for (i = 0; i < NUM_FREE_DESCRIPTORS; i++) {
-		if (page_array[i].data_array)	{
-			free_cache_aligned_mem((void*)page_array[i].data_array);
-			page_array[i].data_array = NULL;
-		}
-	}
+        int i;
+        if (t_cmp_data->src)
+                free_pages ((ulong)t_cmp_data->src, get_order (MAX_INPUT_BUFFER_SIZE));
+        if (t_cmp_data->target)
+                free_pages ((ulong)t_cmp_data->target, get_order (MAX_BUFFER_SIZE));
+        if (t_cmp_data->src_desc)
+                kfree(t_cmp_data->src_desc);
+        if (t_cmp_data->scratch)
+                kfree(t_cmp_data->scratch);
+        if (t_cmp_data->scratch_inf)
+                kfree(t_cmp_data->scratch_inf);
+
+        free_pages((ulong)cde_mem_start_1, get_order(cde_mem_size_1));
+        free_pages((ulong)cde_mem_start_2, get_order(cde_mem_size_2));
+        free_pages((ulong)cde_mem_start_3, get_order(cde_mem_size_3));
+        free_pages((ulong)cde_mem_start_4, get_order(cde_mem_size_4));
+        free_pages((ulong)cde_mem_start_5, get_order(cde_mem_size_5));
+
+        t_cmp_data->src = NULL;
+        t_cmp_data->target = NULL;
+        t_cmp_data->src_desc = NULL;
+        t_cmp_data->scratch = NULL;
+        t_cmp_data->scratch_inf = NULL;
+
+        if (t_cmp_data)
+                kfree(t_cmp_data);
+
+        for (i = 0; i < NUM_FREE_DESCRIPTORS; i++) {
+                if (page_array[i].data_array)   {
+                        free_cache_aligned_mem((void*)page_array[i].data_array);
+                        page_array[i].data_array = NULL;
+                }
+        }
+
+	cmp_data = NULL;
 }
 
 
@@ -847,6 +866,7 @@ int xlp_cde_release(struct inode *inode, struct file *filp)
 	cmp_data->offset = 0;
 	memset(cmp_data->scratch, 0,  SCRATCH_SIZE);
 	memset(cmp_data->scratch_inf, 0, SCRATCH_SIZE);
+	mutex_unlock(&cde_lock);
 	return 0;
 }
 
@@ -923,7 +943,7 @@ unsigned int nlm_cde_send_request(cmp_data_t *cmp_data, unsigned int op,
 		if(is_nlm_xlp2xx())
 			status =  send_message_1(MSGRNG_2XX_STNID_CMP0, (struct msgrng_msg *) (cmp_msg + i));
 		else
-			if(is_nlm_xlp9xx())
+			if(is_9xx)
 				status =  send_message_2(MSGRNG_9XX_STNID_CMP0, (struct msgrng_msg *) (cmp_msg + i));
 			else
 				status =  send_message_1(MSGRNG_STNID_CMP0, (struct msgrng_msg *) (cmp_msg + i));
@@ -942,6 +962,7 @@ ssize_t xlp_cde_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	unsigned char temp_buf[count+1];
+
 	if (copy_from_user(temp_buf, buf, count)) {
 		printk("copy from user failed \n");
 		return -EFAULT;
@@ -1065,28 +1086,28 @@ static void test()
 
 }
 #endif
-void xlp_cde_dev_initialize(void) 
+void xlp_cde_dev_initialize(void)
 {
 	int i =0;
 	unsigned int ret;
 	int frequency = 0;
-	int __maybe_unused node = 0;
+	int node = 0;
 
 	for(i = 0; i < num_cde_engine; i++)
 	{
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			ret = nlm_hal_9xx_read_cde_reg(CMP_REG_RESET_REG(i));
-		else	
+		else
 			ret = nlm_hal_read_cde_reg(CMP_REG_RESET_REG(i));
 #ifdef CDE_DEBUG
 		printk("reset_reg = ret = %x\n", ret);
 #endif
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 			nlm_hal_9xx_write_cde_reg(CMP_REG_RESET_REG(i), 0x8);
 		else
 			nlm_hal_write_cde_reg(CMP_REG_RESET_REG(i), 0x8);
 		do {
-			if(is_nlm_xlp9xx())
+			if(is_9xx)
 				ret = nlm_hal_9xx_read_cde_reg(CMP_REG_RESET_REG(i));
 			else
 				ret = nlm_hal_read_cde_reg(CMP_REG_RESET_REG(i));
@@ -1102,7 +1123,7 @@ void xlp_cde_dev_initialize(void)
 		//printk("\n CDE Frequency = %d\n",frequency);
 		//nlm_hal_set_cde_freq(node, frequency);
 
-		if(is_nlm_xlp9xx())
+		if(is_9xx)
 		{
 			nlm_hal_9xx_write_cde_reg(CMP_REG_RESET_REG(i), 0x01);
 			nlm_hal_9xx_write_cde_reg(CMP_REG_RESET_REG(i), 0x00);
@@ -1119,14 +1140,11 @@ void xlp_cde_dev_initialize(void)
 //static struct class *dev_class;
 static int __init xlp_cde_init(void)
 {
-	printk(KERN_ERR ",\n XLP CDE Initialization \n");
-
 	xlp_cde_major = register_chrdev(0, "NLM_XLP_CDE", &xlp_cde_fops);
 	if (xlp_cde_major < 0) {
 		printk(KERN_ERR "XLP_CDE - cannot register device\n");
 		return xlp_cde_major;
 	}
-	printk (KERN_ERR "XLP CDE MAJOR NUMBER %d\n", xlp_cde_major);
 #if 0
 	if(0){
 		dev_t dev = MKDEV(xlp_cde_major, 0);
@@ -1142,12 +1160,13 @@ static int __init xlp_cde_init(void)
 			(XLP_MSG_HANDLE_CMP, nlm_xlp_cde_msgring_handler, NULL)) {
 		panic("can't register msgring handler for XLP_MSG_HANDLE_CMP");
 	}
-	printk("xlp_cde_init done\n\n");
-	if(is_nlm_xlp2xx())
+	if(is_nlm_xlp2xx()) {
+		is_2xx = 1;
 		num_cde_engine = NUM_CDE_ENGINE_XLP2XX;
-	else if (cpu_is_xlp9xx())
+	}else if (is_nlm_xlp9xx()) {
+		is_9xx = 1;
 		num_cde_engine = NUM_CDE_ENGINE_XLP9XX;
-	else
+	}else
 		num_cde_engine = NUM_CDE_ENGINE;
 
 	xlp_cde_dev_initialize();
diff --git a/drivers/netlogic/nlm_cde/nlm_cde.h b/drivers/netlogic/nlm_cde/nlm_cde.h
index a35a7b6..3a4369f 100644
--- a/drivers/netlogic/nlm_cde/nlm_cde.h
+++ b/drivers/netlogic/nlm_cde/nlm_cde.h
@@ -29,6 +29,7 @@
 
 #ifndef _NLM_CDE_H_
 #define _NLM_CDE_H_
+#include "nlm_cde_common.h"
 
 #define NUM_VC 8
 #define NLM_CDE_VC_BASE 297
@@ -72,21 +73,6 @@ extern void *fdt;
 
 unsigned char src_gz_data[] = {"edc13101000000c2a0f54f6d085fae03"};
 
-typedef struct cmp_data_structure {
-  char *src;    // source data
-  char *target; // inflated or deflated result
-  unsigned long long *src_desc;  // source descriptors
-  unsigned long long *scratch;    // scratch page
-  unsigned long long *scratch_inf;    // scratch page
-  unsigned long long src_size;    //size of source data
-  unsigned long long target_size; // size of result
-  unsigned long long num_desc;    // number of source descriptors including scratch desc
-  short op;                       // to deflate or inflate
-  unsigned int compression_type;
-  unsigned int sof;
-  unsigned int eof;
-  unsigned int offset;
-} cmp_data_t;
 
 typedef enum {
 	CDE_READ_DONE = 0,
diff --git a/drivers/netlogic/nlm_cde/nlm_cde_api.h b/drivers/netlogic/nlm_cde/nlm_cde_api.h
index 7467d7c..3acc4f2 100644
--- a/drivers/netlogic/nlm_cde/nlm_cde_api.h
+++ b/drivers/netlogic/nlm_cde/nlm_cde_api.h
@@ -64,4 +64,9 @@ unsigned int nlm_cde_receive_response(cmp_data_t *cmp_data,
 						unsigned int count);
 void nlm_cde_cleanup(cmp_data_t *cmp_data);
 
+
+EXPORT_SYMBOL (nlm_cde_init);
+EXPORT_SYMBOL (nlm_cde_send_request);
+EXPORT_SYMBOL (nlm_cde_receive_response);
+EXPORT_SYMBOL (nlm_cde_cleanup);
 #endif
diff --git a/drivers/netlogic/nlm_cde/nlm_cde_common.h b/drivers/netlogic/nlm_cde/nlm_cde_common.h
new file mode 100644
index 0000000..d6b5ecb
--- /dev/null
+++ b/drivers/netlogic/nlm_cde/nlm_cde_common.h
@@ -0,0 +1,47 @@
+/*-
+ ** Copyright (c) 2003-2013 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ ** #BRCM_2# */
+
+
+
+typedef struct cmp_data_structure {
+  char *src;    // source data
+  char *target; // inflated or deflated result
+  unsigned long long *src_desc;  // source descriptors
+  unsigned long long *scratch;    // scratch page
+  unsigned long long *scratch_inf;    // scratch page
+  unsigned long long src_size;    //size of source data
+  unsigned long long target_size; // size of result
+  unsigned long long num_desc;    // number of source descriptors including scratch desc
+  short op;                       // to deflate or inflate
+  unsigned int compression_type;
+  unsigned int sof;
+  unsigned int eof;
+  unsigned int offset;
+} cmp_data_t;
+
-- 
1.7.9.5

