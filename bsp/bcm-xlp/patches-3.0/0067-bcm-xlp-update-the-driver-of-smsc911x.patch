From b82126079eb8fab0e499563097907699d155746e Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Mon, 17 Mar 2014 21:50:32 +0800
Subject: [PATCH 5/7] bcm-xlp: update the driver of smsc911x

The interrupt entry of smsc911x is 13 in the IRT and the related IRQ
is 40 in XLP208.

Updating the function of read/write register otherwise the
function 'smsc911x_phy_check_loopbackpkt' would be failed.

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/include/asm/netlogic/xlp_smsc.h   |   40 +++++++++++++++
 arch/mips/netlogic/lib/syslib/src/nlm_hal.c |    4 +-
 arch/mips/netlogic/xlp/Makefile             |    5 ++
 arch/mips/netlogic/xlp/smsc-init.c          |   72 +++++++++++++++++++++++++++
 drivers/net/ethernet/smsc/smsc911x.c        |   13 +++--
 5 files changed, 127 insertions(+), 7 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/xlp_smsc.h b/arch/mips/include/asm/netlogic/xlp_smsc.h
new file mode 100644
index 0000000..0b6f6d0
--- /dev/null
+++ b/arch/mips/include/asm/netlogic/xlp_smsc.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the Broadcom
+ * license below:
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __XLP_SMSC_H__
+#define __XLP_SMSC_H__
+
+void xlp_smsc_gpio_setup(void);
+void xlp_smsc_gpio_reg_ack(int irq);
+
+#endif
diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
index 43cfbc5..4921fbf 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
@@ -69,7 +69,7 @@
 #include "xlp9xx_sys.h"
 
 /* These addresses are computed by the nlm_hal_init() */
-unsigned long xlp_io_base;
+unsigned long xlp_io_base = KSEG1 + 0x18000000;
 unsigned long xlp_fmn_base[NLM_MAX_NODES];
 unsigned long xlp_nae_base[NLM_MAX_NODES];
 unsigned long xlp_sae_base[NLM_MAX_NODES];
@@ -397,8 +397,6 @@ __inline__ void nlm_hal_init(void)
 		nlm_node_cfg.nae_cfg[node] = NULL;
 		nlm_node_cfg.fmn_cfg[node] = NULL;
 
-		xlp_io_base = KSEG1 + 0x18000000;
-
         	/* PCI enumeration of supported devices*/
 
 		if (is_nlm_xlp9xx()) {
diff --git a/arch/mips/netlogic/xlp/Makefile b/arch/mips/netlogic/xlp/Makefile
index 9d2dd42..a71e3fe 100644
--- a/arch/mips/netlogic/xlp/Makefile
+++ b/arch/mips/netlogic/xlp/Makefile
@@ -1,3 +1,6 @@
+EXTRA_CFLAGS := -DNLM_HAL_LINUX_KERNEL -DNLM_CORTINA_SUPPORT -Wno-maybe-uninitialized
+EXTRA_CFLAGS += -Iarch/mips/netlogic/lib/syslib/include
+
 obj-y				+= setup.o nlm_hal.o dt.o c-xlp.o
 obj-$(CONFIG_SMP)		+= wakeup.o
 obj-$(CONFIG_USB)		+= usb-init.o
@@ -6,3 +9,5 @@ obj-$(CONFIG_SATA_AHCI)		+= ahci_init.o
 obj-$(CONFIG_SATA_AHCI)		+= ahci-init-xlp2.o
 obj-$(CONFIG_NUMA)		+= numa.o
 obj-$(CONFIG_NLM_ENABLE_COP2)	+= cop2.o
+obj-$(CONFIG_SMSC911X)		+= smsc-init.o
+ 
diff --git a/arch/mips/netlogic/xlp/smsc-init.c b/arch/mips/netlogic/xlp/smsc-init.c
new file mode 100644
index 0000000..e526032
--- /dev/null
+++ b/arch/mips/netlogic/xlp/smsc-init.c
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the Broadcom
+ * license below:
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <asm/netlogic/xlp_smsc.h>
+#include <asm/netlogic/common.h>
+
+#include "nlm_hal_xlp_dev.h"
+#include "nlm_hal.h"
+
+static __inline__ int32_t gpio_reg_read(int node, int regidx)
+{
+        volatile uint64_t mmio;
+        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_GIO_DEV, XLP_GIO_GPIO_FUNC);
+        return nlm_hal_read_32bit_reg(mmio, regidx);
+}
+
+static __inline__ void gpio_reg_write(int node, int regidx, int32_t val)
+{
+        volatile uint64_t mmio;
+        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_GIO_DEV, XLP_GIO_GPIO_FUNC);
+        nlm_hal_write_32bit_reg(mmio, regidx, val);
+}
+
+void xlp_smsc_gpio_setup(void)
+{
+        gpio_reg_write(0, XLP_GPIO_INTEN11,
+                        gpio_reg_read(0, XLP_GPIO_INTEN11) | 0x80);
+        gpio_reg_write(0, XLP_GPIO_INT_POLAR1,
+                        gpio_reg_read(0, XLP_GPIO_INT_POLAR1) | 0x80);
+        gpio_reg_write(0, XLP_GPIO_INT_TYPE1,
+                        gpio_reg_read(0, XLP_GPIO_INT_TYPE1) & ~(0x80));
+
+        /* clear all interrupts */
+        gpio_reg_write(0, XLP_GPIO_INT_STAT1, 0xffffffff);
+}
+
+void xlp_smsc_gpio_reg_ack(int irq)
+{
+        gpio_reg_write(0, XLP_GPIO_INT_STAT1,
+                gpio_reg_read(0, XLP_GPIO_INT_STAT1) & 0x80 );
+}
diff --git a/drivers/net/ethernet/smsc/smsc911x.c b/drivers/net/ethernet/smsc/smsc911x.c
index 3663b9e..c4b7e07 100644
--- a/drivers/net/ethernet/smsc/smsc911x.c
+++ b/drivers/net/ethernet/smsc/smsc911x.c
@@ -61,6 +61,7 @@
 #include <linux/of_gpio.h>
 #include <linux/of_net.h>
 #include "smsc911x.h"
+#include <asm/netlogic/xlp_smsc.h>
 
 #define SMSC_CHIPNAME		"smsc911x"
 #define SMSC_MDIONAME		"smsc911x-mdio"
@@ -257,7 +258,7 @@ smsc911x_tx_writefifo(struct smsc911x_data *pdata, unsigned int *buf,
 	}
 
 	if (pdata->config.flags & SMSC911X_USE_32BIT) {
-		iowrite32_rep(pdata->ioaddr + TX_DATA_FIFO, buf, wordcount);
+		writesl(pdata->ioaddr + TX_DATA_FIFO, buf, wordcount);
 		goto out;
 	}
 
@@ -289,7 +290,7 @@ smsc911x_tx_writefifo_shift(struct smsc911x_data *pdata, unsigned int *buf,
 	}
 
 	if (pdata->config.flags & SMSC911X_USE_32BIT) {
-		iowrite32_rep(pdata->ioaddr + __smsc_shift(pdata,
+		writesl(pdata->ioaddr + __smsc_shift(pdata,
 						TX_DATA_FIFO), buf, wordcount);
 		goto out;
 	}
@@ -323,7 +324,7 @@ smsc911x_rx_readfifo(struct smsc911x_data *pdata, unsigned int *buf,
 	}
 
 	if (pdata->config.flags & SMSC911X_USE_32BIT) {
-		ioread32_rep(pdata->ioaddr + RX_DATA_FIFO, buf, wordcount);
+		readsl(pdata->ioaddr + RX_DATA_FIFO, buf, wordcount);
 		goto out;
 	}
 
@@ -355,7 +356,7 @@ smsc911x_rx_readfifo_shift(struct smsc911x_data *pdata, unsigned int *buf,
 	}
 
 	if (pdata->config.flags & SMSC911X_USE_32BIT) {
-		ioread32_rep(pdata->ioaddr + __smsc_shift(pdata,
+		readsl(pdata->ioaddr + __smsc_shift(pdata,
 						RX_DATA_FIFO), buf, wordcount);
 		goto out;
 	}
@@ -1782,6 +1783,8 @@ static irqreturn_t smsc911x_irqhandler(int irq, void *dev_id)
 	int serviced = IRQ_NONE;
 	u32 temp;
 
+	xlp_smsc_gpio_reg_ack(irq);
+
 	if (unlikely(intsts & inten & INT_STS_SW_INT_)) {
 		temp = smsc911x_reg_read(pdata, INT_EN);
 		temp &= (~INT_EN_SW_INT_EN_);
@@ -2472,6 +2475,8 @@ static int smsc911x_drv_probe(struct platform_device *pdev)
 	/* Ensure interrupts are globally disabled before connecting ISR */
 	smsc911x_disable_irq_chip(dev);
 
+	xlp_smsc_gpio_setup();
+
 	retval = request_irq(dev->irq, smsc911x_irqhandler,
 			     irq_flags | IRQF_SHARED, dev->name, dev);
 	if (retval) {
-- 
1.7.9.5

