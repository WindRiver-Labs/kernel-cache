From 7c740970d0684ade8168ae70c229bbbd24ef5731 Mon Sep 17 00:00:00 2001
From: Kamlakant Patel <kamlakant.patel@broadcom.com>
Date: Mon, 27 Jan 2014 19:12:30 +0530
Subject: [PATCH 085/160] spi: fix tx/rx buffer manipulation causing crash

* fix tx/rx buffer manipulation
* fix duplication of chip select assignment to priv->cs.
* clean unnecessary master and spi_device struct in priv.

Signed-off-by: Jack Tan <jack.tan@windriver.com>
Signed-off-by: Jack Tan <jiankemeng@gmail.com>
---
 drivers/spi/spi-xlp.c |   77 ++++++++++++++++++++++++-------------------------
 1 file changed, 38 insertions(+), 39 deletions(-)

diff --git a/drivers/spi/spi-xlp.c b/drivers/spi/spi-xlp.c
index e8b76b5..6077373 100644
--- a/drivers/spi/spi-xlp.c
+++ b/drivers/spi/spi-xlp.c
@@ -93,8 +93,6 @@
 #define XLP_SPI_MAX_CS			4
 
 struct xlp_spi_priv {
-	struct spi_master	*master;
-	struct spi_device	*spi_dev;
 	void __iomem		*base;
 	/* data buffers */
 	unsigned char		*rx_buf;
@@ -165,7 +163,7 @@ static int xlp_spi_check_transfer(struct spi_device *spi,
 static int xlp_spi_setup(struct spi_device *spi)
 {
 	struct xlp_spi_priv *xspi;
-	int cfg;
+	int cfg, cs;
 
 	if (!spi->bits_per_word)
 		spi->bits_per_word = 8;
@@ -174,16 +172,16 @@ static int xlp_spi_setup(struct spi_device *spi)
 		return -EINVAL;
 
 	xspi = spi_master_get_devdata(spi->master);
-	xspi->cs = spi->chip_select;
+	cs = spi->chip_select;
 
 	/* Enable pin muxing. In this mode, the GPIO[28:22] external pins
 	 * are configured for SPI operations.
 	 */
 	xlp_spi_reg_write(xspi, 0, XLP_SPI_SYSCTRL, XLP_SPI_SYS_PMEN);
-	xlp_spi_reg_write(xspi, xspi->cs, XLP_SPI_FDIV, DEFAULT_CS_FDIV);
-	xlp_spi_reg_write(xspi, xspi->cs, XLP_SPI_FIFO_THRESH, XLP_SPI_TXRXTH);
+	xlp_spi_reg_write(xspi, cs, XLP_SPI_FDIV, DEFAULT_CS_FDIV);
+	xlp_spi_reg_write(xspi, cs, XLP_SPI_FIFO_THRESH, XLP_SPI_TXRXTH);
 
-	cfg = xlp_spi_reg_read(xspi, xspi->cs, XLP_SPI_CONFIG);
+	cfg = xlp_spi_reg_read(xspi, cs, XLP_SPI_CONFIG);
 	if (spi->mode & XLP_SPI_CPHA)
 		cfg |= XLP_SPI_CPHA;
 	if (spi->mode & XLP_SPI_CPOL)
@@ -194,7 +192,7 @@ static int xlp_spi_setup(struct spi_device *spi)
 		cfg |= XLP_SPI_CS_LSBFE;
 
 	cfg |= XLP_SPI_TXMOSI_EN | XLP_SPI_RXMISO_EN | XLP_SPI_RXCAP_EN;
-	xlp_spi_reg_write(xspi, xspi->cs, XLP_SPI_CONFIG, cfg);
+	xlp_spi_reg_write(xspi, cs, XLP_SPI_CONFIG, cfg);
 
 	return 0;
 }
@@ -211,16 +209,16 @@ static void xlp_spi_read_rxfifo(struct xlp_spi_priv *xspi)
 	while (rxfifo_cnt) {
 		rx_data = xlp_spi_reg_read(xspi, xspi->cs,
 				XLP_SPI_RXDATA_FIFO);
-		rxfifo_cnt--;
 		j = 0;
-
 		limit = xspi->rx_len > 4 ? 4 : xspi->rx_len;
 		for (i = limit - 1; i >= 0; i--) {
 			xspi->rx_buf[i] = (rx_data >> (j * 8)) & 0xff;
 			j++;
 		}
+
 		xspi->rx_len -= limit;
 		xspi->rx_buf += limit;
+		rxfifo_cnt--;
 	}
 }
 
@@ -253,17 +251,19 @@ static void xlp_spi_fill_txfifo(struct xlp_spi_priv *xspi)
 
 static irqreturn_t xlp_spi_interrupt(int irq, void *dev_id)
 {
-	struct xlp_spi_priv *xspi;
-	struct spi_master *master = dev_id;
+	struct xlp_spi_priv *xspi = dev_id;
 	u32 stat;
 
-	xspi = spi_master_get_devdata(master);
-	xspi->cs = xspi->spi_dev->chip_select;
 	stat = xlp_spi_reg_read(xspi, xspi->cs, XLP_SPI_STATUS);
 
 	if (xspi->tx_len) {
-		if (stat & XLP_SPI_TX_TH_OV)
+		if (stat & XLP_SPI_TX_TH_OV) {
 			xlp_spi_fill_txfifo(xspi);
+			if (xspi->tx_len == 0) {
+				xlp_spi_reg_write(xspi, xspi->cs,
+						XLP_SPI_INTR_EN, 0x15);
+			}
+		}
 
 		if (stat & XLP_SPI_TX_UF)
 			xspi->txerrors++;
@@ -302,18 +302,14 @@ static void xlp_spi_send_cmd(struct xlp_spi_priv *xspi, int xfer_len,
 	}
 }
 
-static int xlp_spi_xfer_block(struct spi_device *spi, struct spi_transfer *t,
-		int xfer_len, int cmd_cont)
+static int xlp_spi_xfer_block(struct  xlp_spi_priv *xs,
+		const unsigned char *tx_buf,
+		unsigned char *rx_buf, int xfer_len, int cmd_cont)
 {
-	struct xlp_spi_priv *xs = spi_master_get_devdata(spi->master);
 	int timeout;
 
-	xs->rx_buf = NULL;
-	xs->tx_buf = NULL;
-
-	xs->tx_buf = t->tx_buf;
-	xs->rx_buf = t->rx_buf;
-	xs->spi_dev = spi;
+	xs->tx_buf = tx_buf;
+	xs->rx_buf = rx_buf;
 	xs->tx_len = (xs->tx_buf == NULL) ? 0 : xfer_len;
 	xs->rx_len = (xs->rx_buf == NULL) ? 0 : xfer_len;
 	xs->txerrors = xs->rxerrors = 0;
@@ -334,7 +330,7 @@ static int xlp_spi_xfer_block(struct spi_device *spi, struct spi_transfer *t,
 	timeout = wait_for_completion_timeout(&xs->done,
 			msecs_to_jiffies(1000));
 	if (!timeout) {
-		pr_info("%s: xfer timedout !!!\n", __func__);
+		pr_info("%s: cs %d xfer timedout !!!\n", __func__, xs->cs);
 		goto out;
 	}
 	if (xs->txerrors || xs->rxerrors)
@@ -349,29 +345,34 @@ out:
 	return -ETIMEDOUT;
 }
 
-static int xlp_spi_txrx_bufs(struct spi_device *spi, struct spi_transfer *t)
+static int xlp_spi_txrx_bufs(struct xlp_spi_priv *xs, struct spi_transfer *t)
 {
 	int ret, len, total_len;
-	struct xlp_spi_priv *xs = spi_master_get_devdata(spi->master);
+	unsigned char *rx_buf;
+	const unsigned char *tx_buf;
 
 	ret = 0;
 	total_len = 0;
 	len = t->len;
+	tx_buf = t->tx_buf;
+	rx_buf = t->rx_buf;
+
 	while (len > XLP_SPI_XFER_SIZE) {
-		ret = xlp_spi_xfer_block(spi, t, XLP_SPI_XFER_SIZE, 1);
+		ret = xlp_spi_xfer_block(xs, tx_buf, rx_buf,
+				XLP_SPI_XFER_SIZE, 1);
 		if (ret < 0)
 			return ret;
 		else
 			total_len += ret;
 
 		len = len - XLP_SPI_XFER_SIZE;
-		if (t->tx_buf)
-			t->tx_buf = t->tx_buf + XLP_SPI_XFER_SIZE;
-		if (t->rx_buf)
-			t->rx_buf = t->rx_buf + XLP_SPI_XFER_SIZE;
+		if (tx_buf)
+			tx_buf = tx_buf + XLP_SPI_XFER_SIZE;
+		if (rx_buf)
+			rx_buf = rx_buf + XLP_SPI_XFER_SIZE;
 	}
 	if (len) {
-		ret = xlp_spi_xfer_block(spi, t, len, xs->cmd_cont);
+		ret = xlp_spi_xfer_block(xs, tx_buf, rx_buf, len, xs->cmd_cont);
 		if (ret < 0)
 			return ret;
 		else
@@ -401,7 +402,7 @@ static int xlp_spi_transfer_one(struct spi_master *master,
 		if (t->len) {
 			if (!(t->transfer_list.next == &msg->transfers))
 				xspi->cmd_cont = 1;
-			r = xlp_spi_txrx_bufs(spi, t);
+			r = xlp_spi_txrx_bufs(xspi, t);
 		}
 
 		if (r != t->len || r < 0) {
@@ -412,7 +413,6 @@ static int xlp_spi_transfer_one(struct spi_master *master,
 		}
 	}
 err:
-
 	msg->status = status;
 	spi_finalize_current_message(master);
 
@@ -450,9 +450,7 @@ static int xlp_spi_probe(struct platform_device *pdev)
 	}
 
 	xspi = spi_master_get_devdata(master);
-	platform_set_drvdata(pdev, master);
-
-	xspi->master = master;
+	platform_set_drvdata(pdev, xspi);
 
 	master->bus_num = 0;
 	master->num_chipselect = XLP_SPI_MAX_CS;
@@ -468,12 +466,13 @@ static int xlp_spi_probe(struct platform_device *pdev)
 	}
 
 	ret = devm_request_irq(&pdev->dev, irq, xlp_spi_interrupt,
-			IRQF_NO_THREAD, pdev->name, master);
+			IRQF_NO_THREAD, pdev->name, xspi);
 	if (ret) {
 		dev_err(&pdev->dev, "unable to request irq %d\n", irq);
 		goto put_master;
 	}
 
+	spi_master_set_devdata(master, xspi);
 	xlp_spi_slave_reset(xspi);
 	/* register our spi controller */
 	ret = spi_register_master(master);
-- 
1.7.9.5

