From 8e07be7f84731c084692506efbbd280edf24eec7 Mon Sep 17 00:00:00 2001
From: Jayanthi A <jayanthi.annadurai@broadcom.com>
Date: Wed, 30 Oct 2013 11:47:06 -0700
Subject: [PATCH 027/163] netlib: Fixed POE free buffer pool configuration
 Fixed DRR active list configuration

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 .../netlogic/lib/netlib/include/netsoc_libiface.h  |   37 ++++++++++++++++++++
 arch/mips/netlogic/lib/netlib/src/netsoc_api.c     |    5 +++
 arch/mips/netlogic/lib/netlib/src/netsoc_nae.c     |   16 ++++++++-
 arch/mips/netlogic/lib/netlib/src/netsoc_poe.c     |    6 ++--
 4 files changed, 61 insertions(+), 3 deletions(-)

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
index dee7afa..b9af132 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
@@ -41,6 +41,8 @@ extern void *(*netsoc_lib_malloc)(uint32_t size);
 extern void (*netsoc_lib_free)(void *buf);
 extern uint32_t (*netsoc_lib_readl)(uint64_t base, uint32_t index);
 extern void (*netsoc_lib_writel)(uint64_t base, uint32_t index, uint32_t val);
+extern uint64_t (*netsoc_lib_readq)(uint64_t base, uint32_t index);
+extern void (*netsoc_lib_writeq)(uint64_t base, uint32_t index, uint64_t val);
 
 extern void *(*netsoc_lib_contig_malloc)(uint32_t align, uint32_t size);
 extern void (*netsoc_lib_contig_free)(void *buf);
@@ -230,6 +232,41 @@ static inline void netsoc_api_writel(uint64_t base, uint32_t index, uint32_t val
 	}
 }
 
+static inline uint64_t netsoc_api_readq(uint64_t base, uint32_t index)
+{
+        uint32_t ret = 0;
+
+        if (netsoc_lib_readq != NULL) {
+                ret = netsoc_lib_readq(base, index);
+        }
+        else
+        {
+#if defined(NLM_HAL_LINUX_USER)
+                ret = nlm_uaccess_mem_read64(NLH_XKPHYS_UNCACHED | (base + (index << 3)));
+#elif defined(NLM_HAL_LINUX_KERNEL)
+                ret = ld_40bit_phys_uncached(base + (index << 3));
+#endif  
+        }
+
+        return ret;
+}
+
+static inline void netsoc_api_writeq(uint64_t base, uint32_t index, uint64_t val )
+{
+        if (netsoc_lib_writeq != NULL) {
+                netsoc_lib_writeq(base, index, val);
+        }
+        else    
+        {
+#if defined(NLM_HAL_LINUX_USER)
+                nlm_uaccess_mem_write64(NLH_XKPHYS_UNCACHED | (base + (index << 3)), val);
+#elif defined(NLM_HAL_LINUX_KERNEL)
+                sd_40bit_phys_uncached(base + (index << 3), val); 
+#endif  
+        }
+}
+
+
 #if defined(NLM_HAL_LINUX_KERNEL) 
 #define netsoc_api_print(dbglvl, fmt, args...) \
 { \
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
index 000b471..3e6874d 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
@@ -47,6 +47,9 @@ void (*netsoc_lib_contig_free)(void *buf);
 uint64_t (*netsoc_lib_virttophys)(void *);
 void *(*netsoc_lib_phystovirt)(uint64_t);
 unsigned int netsoc_api_dbglvl = 0xff; // NETSOC_APIDBG_DEFAULT | NETSOC_APIDBG_GLOBAL;
+uint64_t (*netsoc_lib_readq)(uint64_t base, uint32_t index);
+void (*netsoc_lib_writeq)(uint64_t base, uint32_t index, uint64_t val);
+
 
 int (*const_func_list[])(void) = {
 register_marvell_phy,
@@ -1686,6 +1689,8 @@ void brcm_netsoc_lib_init(struct netsoc_lib_param *libparam)
 		netsoc_lib_free = libparam->free;
 		netsoc_lib_readl = libparam->readl;
 		netsoc_lib_writel = libparam->writel;
+		netsoc_lib_readq = libparam->readq;
+                netsoc_lib_writeq = libparam->writeq;
                 netsoc_lib_contig_malloc = libparam->contig_alloc;
                 netsoc_lib_contig_free = libparam->contig_free;
                 netsoc_lib_phystovirt = libparam->phys_to_virt;
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
index faf82ff..0004a8f 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
@@ -921,6 +921,7 @@ void __netsoc_config_egress(net_port_t *netport, int context_base)
 	nae_t *nae = netport->nae;
 	unsigned int offset =0, data = 0;
 	uint64_t nae_base = nae->nae_base;
+	int i=0;
 
 	data  = (TX_IF_BURST_MAX << 12) | (netport->hw_port_id << 4) | 1;
         netsoc_write_nae_reg(nae_base, TX_IFACE_BURSTMAX_CMD, data);
@@ -929,6 +930,15 @@ void __netsoc_config_egress(net_port_t *netport, int context_base)
 		 (netport->hw_port_id << 4) | 1 ;
 	netsoc_write_nae_reg(nae_base, TX_DRR_ACTVLIST_CMD, data);
 
+        if (netport->iftype != SGMII_IF) {
+                for(i=netport->hw_port_id+1; i < (netport->hw_port_id+4); i++) {
+                       data = ((context_base + netport->num_channels - 1) << 22) | ((context_base + netport->num_channels) << 12);
+                       data |= (i<<4) | 1;
+                       netsoc_write_nae_reg(nae_base, TX_DRR_ACTVLIST_CMD, data);
+                }
+        }
+
+
 	__netsoc_config_egress_fifo_carvings(nae, context_base, netport->num_channels);
 	__netsoc_config_egress_fifo_credits(nae, context_base, netport->num_channels, nae->num_contexts);
 
@@ -1460,6 +1470,8 @@ void __netsoc_config_ingress_fifo(nae_t *nae)
 		}
 		hw_port += offset;
 		port++;
+		if (port == nae->num_ports)
+			break;
 	    }
 	    else {
 		netsoc_api_print(NETSOC_APIDBG_CONFIG, "carving intf fifo;rx buffer: lane:%d n:%d port:%d\n", lane, nae->node, hw_port);
@@ -2127,7 +2139,7 @@ static void __netsoc_config_xaui(net_port_t *netport)
         netsoc_write_mac_reg(mac_base, XAUI_CONFIG_0, 0x0);
 
         /* Enable tx/rx frame */
-        val = 0xA00010A8;
+        val = 0xA00000A8;
         val |= (XAUI_CONFIG_LENCHK | XAUI_CONFIG_GENFCS | XAUI_CONFIG_PAD_64);
         netsoc_write_mac_reg(mac_base, XAUI_CONFIG_1, val );
         /* write max frame len*/
@@ -2161,6 +2173,7 @@ static void __netsoc_config_xaui(net_port_t *netport)
                 val |= 1 << NETIOR_XGMAC_TX_PAUSE_POS;
                 val |= 1 << NETIOR_XGMAC_VLAN_DC_POS;
         } else {
+		netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_PAUSE_OPC, 0x1);
                 val &= ~(1 << NETIOR_XGMAC_TX_PFC_EN_POS);
                 val &= ~(1<<NETIOR_XGMAC_RX_PFC_EN_POS);
                 val |= (1 << NETIOR_XGMAC_TX_PAUSE_POS);
@@ -2191,6 +2204,7 @@ static void __netsoc_config_xaui(net_port_t *netport)
 	else{
         	val |= (15 << 10);
 	}
+	val |= netport->context_base;
 
         netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_CTRL3, val); netsoc_api_print(NETSOC_APIDBG_PORT, "%s XAUI Config Complete block %d \n", __func__, netport->hw_port_id >> 2); return;
 }
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
index fb1dd5f..a1f6b01 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
@@ -107,14 +107,16 @@ int __netsoc_init_poe_ext_storage(poe_t *poe, uint64_t fbp_base_phys,
         /* initialize free buffer pool with 16-bit storage indexes */
         for (i = 0; i < (num_messages / 4); i++) {
                 ldata = ((a+3) << 48) | ((a+2) << 32) | ((a+1) << 16) | a;
-                *vaddr_fbp = ldata;
+        //        *vaddr_fbp = ldata;
+		netsoc_api_writeq(fbp_base_phys, i, ldata);
                 vaddr_fbp++;
                 a += 4;
         }
 
         /* initialize storage memory area with zero */
         for (i = 0; i < (num_messages * 8); i++) {
-                *vaddr_msg = mdata;
+        //        *vaddr_msg = mdata;
+		netsoc_api_writeq(msg_base_phys, i , mdata);
                 vaddr_msg++;
         }
 
-- 
1.7.9.5

