From 205f46d3b8154b67209f3ebe09f33e63eefc93d2 Mon Sep 17 00:00:00 2001
From: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Date: Wed, 6 Oct 2010 16:04:09 -0700
Subject: [PATCH 197/761] Enable msgring interrupt on all cpus, limit number
 of messages per interrupt, fixed warnings

Based on Broadcom SDK 2.3.

Signed-off-by: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/irq.c     |   45 ++++++++++++++------------------------
 arch/mips/netlogic/xlp/on_chip.c |   32 +++++++++++----------------
 arch/mips/netlogic/xlp/smp.c     |    4 ++++
 arch/mips/netlogic/xlp/time.c    |    3 ---
 net/ipv4/ip_input.c              |    1 -
 5 files changed, 34 insertions(+), 51 deletions(-)

diff --git a/arch/mips/netlogic/xlp/irq.c b/arch/mips/netlogic/xlp/irq.c
index 9eb894b..7dd1fb4 100644
--- a/arch/mips/netlogic/xlp/irq.c
+++ b/arch/mips/netlogic/xlp/irq.c
@@ -258,15 +258,6 @@ static int rsvd_pic_handler_2(unsigned int irq, const struct cpumask *mask)
   return 0;
 }
 
-struct irq_chip nlm_common_rsvd_pic_irq_timer = {
-  .name     =          "Count-Compare",
-  .unmask	=          rsvd_pic_handler_1_1,
-  .mask		=          rsvd_pic_handler_1,
-  .ack          =          rsvd_pic_handler_1,
-  .end          =          rsvd_pic_handler_1,
-  .set_affinity =          rsvd_pic_handler_2
-};
-
 struct irq_chip nlm_common_rsvd_pic = {
 	.name = "Netlogic-RSVD-PIC",
 	.unmask = rsvd_pic_handler_1_1,
@@ -352,8 +343,9 @@ void do_nlm_common_IRQ(unsigned int irq, struct pt_regs *regs)
 		nlm_common_ipi_handler(irq, regs);
 		return;
 	}
-	if (irq == IRQ_MSGRING) nlm_xlp_msgring_int_handler(irq, regs);
-
+	if (irq == IRQ_MSGRING) {
+		nlm_xlp_msgring_int_handler(irq, regs);
+	}
 	else if (irq == IRQ_IPI_SMP_KGDB) {
   	}
 	else if (irq == IRQ_IPI_OPROFILE) {
@@ -472,27 +464,24 @@ asmlinkage void plat_irq_dispatch(void)
 	uint64_t eirr;
 	struct pt_regs *pt_regs = current_thread_info()->regs;
 	int i = 0;
-	eirr = read_64bit_cp0_eirr() & read_64bit_cp0_eimr();
 
-	if (!eirr)
-		return;
+	eirr = read_64bit_cp0_eirr() & read_64bit_cp0_eimr();
 
-	if (eirr & (1 << IRQ_TIMER)) {
+	if (eirr & (1 << IRQ_TIMER))
 		nlm_common_timer_interrupt(pt_regs, IRQ_TIMER);
+
+	i = __ilog2_u64(eirr);
+	if (i == -1)
 		return;
-	}
-	
-	for (i = 63; i != -1; i--) {
-		if (eirr & (1ULL << i))
-			break;
-	}
-	if (i == -1) {
-		printk("no interrupt !!\n");
-		return;
-	}
-	
-	write_64bit_cp0_eirr(1ULL << i);
-	eirr = read_64bit_cp0_eirr() & read_64bit_cp0_eimr();
+
+	if (i  != IRQ_MSGRING)
+		write_64bit_cp0_eirr(1ULL << i);
+
 	do_nlm_common_IRQ(i, pt_regs);
+
+	if (i  == IRQ_MSGRING)
+		write_64bit_cp0_eirr(1ULL << i);
+
 	return;
 }
+
diff --git a/arch/mips/netlogic/xlp/on_chip.c b/arch/mips/netlogic/xlp/on_chip.c
index 8a8f8f7..ec73064 100644
--- a/arch/mips/netlogic/xlp/on_chip.c
+++ b/arch/mips/netlogic/xlp/on_chip.c
@@ -59,8 +59,6 @@ uint32_t msgring_global_thread_mask = 0;
 spinlock_t msgrng_lock;
 static nlm_common_atomic_t msgring_registered;
 
-static void enable_msgconfig_int(void);
-
 struct msgstn_handler {
         void (*action)(uint32_t, uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint64_t, void *);
         void *dev_id;
@@ -184,6 +182,7 @@ void nlm_xlp_msgring_int_handler(unsigned int irq, struct pt_regs *regs)
 	unsigned int status = 0;
 	uint64_t msg0, msg1, msg2, msg3;
 	unsigned int msg_status1 = 0, vc_empty_status = 0;
+	int loop = 0;
 
 	msg0 = msg1 = msg2 = msg3 = 0;
 
@@ -201,7 +200,9 @@ void nlm_xlp_msgring_int_handler(unsigned int irq, struct pt_regs *regs)
         msgrng_access_enable(mflags);
 	cycles = read_c0_count();
 
-	for (;;) {
+	/* Don't loop forever, it may increase interrupt latency */
+	for (loop = 0; loop < 16; loop++) {
+
 		/* Read latest VC empty mask */
 		msg_status1 = xlp_read_status1();
 
@@ -282,15 +283,15 @@ EXPORT_SYMBOL(register_xlp_msgring_handler);
  * enable_msgconfig_int 
  *
  ********************************************************************/
-static void enable_msgconfig_int()
+void enable_msgconfig_int(void)
 {
-        uint32_t val;
-        /* Need write interrupt vector to cp2 msgconfig register */
+	uint32_t flags;
 
-        val =  _read_32bit_cp2_register(XLP_MSG_CONFIG_REG);
-        val &= ~(0x1f << 16);
-        val |= 6 << 16;
-        _write_32bit_cp2_register(XLP_MSG_CONFIG_REG, val);
+	/* Need write interrupt vector to cp2 msgconfig register */
+	msgrng_access_enable(flags);
+	nlm_hal_set_fmn_interrupt(IRQ_MSGRING);
+	msgrng_access_disable(flags);
+	printk("[%s]: Enabled FMN interrupts on cpu@%d\n", __func__, hard_smp_processor_id());
 }
 
 
@@ -318,15 +319,8 @@ static void pic_init(void)
 		nlm_hal_pic_write_irt(i, 0, 0, 1, nlm_hal_irt_to_irq(i), 1, 0, thread_mask);
 	}
 
-	/* 
-	 each cpu core only has one set of cop2 register,
-	 only need enable msg int vector once 
-	*/
-
-	if( (vcpu % 4) == 0)
-	{
-		enable_msgconfig_int();
-	}
+	/* On XLP, MSGRING config register is per hw-thread */
+	enable_msgconfig_int();
 }
 
 atomic_t nlm_common_counters[NR_CPUS][NLM_MAX_COUNTERS] __cacheline_aligned;
diff --git a/arch/mips/netlogic/xlp/smp.c b/arch/mips/netlogic/xlp/smp.c
index bc3e651..af3d09f 100644
--- a/arch/mips/netlogic/xlp/smp.c
+++ b/arch/mips/netlogic/xlp/smp.c
@@ -57,6 +57,7 @@ extern unsigned long nlm_common_ebase;
 extern void enable_cpus(unsigned int node, unsigned online_mask);
 extern void nlm_smp_irq_init(void);
 extern void asmlinkage smp_bootstrap(void);
+extern void enable_msgconfig_int(void);
 
 void nlm_send_ipi_single(int cpu, unsigned int action)
 {
@@ -93,6 +94,8 @@ static void __cpuinit nlm_init_secondary(void)
 {
     /* Time init for this cpu is done in mips_clockevent_init() */
     nlm_smp_irq_init();
+
+    enable_msgconfig_int();
 }
 
 void nlm_smp_finish(void)
@@ -210,6 +213,7 @@ struct plat_smp_ops nlm_smp_ops = {
 void prom_boot_cpus_secondary(void *args)
 {
 	int cpu = hard_smp_processor_id();
+
 	write_c0_ebase((uint32_t)nlm_common_ebase);
 	atomic_add((1<<cpu), (atomic_t *)&smp_boot.online_map);
 	for(;;) {
diff --git a/arch/mips/netlogic/xlp/time.c b/arch/mips/netlogic/xlp/time.c
index 3253e74..66884db 100644
--- a/arch/mips/netlogic/xlp/time.c
+++ b/arch/mips/netlogic/xlp/time.c
@@ -57,9 +57,6 @@ extern void nlm_common_user_mac_update_time(void);
 extern void nlm_common_user_mac_update_ktime(void);
 #endif
  
-extern struct irq_chip nlm_common_rsvd_pic;
-extern struct irqaction nlm_common_rsvd_action;
-
 void save_epc(unsigned long *epc)
 {
 	__asm__ __volatile__(".set push\n"
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index e9e6713..26eccc5 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -447,7 +447,6 @@ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
 inhdr_error:
 	IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INHDRERRORS);
 drop:
-	printk("[%s]: dropping packet...\n", __func__);
 	kfree_skb(skb);
 out:
 	return NET_RX_DROP;
-- 
1.7.10.4

