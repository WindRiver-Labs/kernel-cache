From a779431457c058565e2e625ad80a05b358f37cf0 Mon Sep 17 00:00:00 2001
From: Jonathan Pui <jpui@netlogicmicro.com>
Date: Thu, 28 Apr 2011 17:02:13 -0700
Subject: [PATCH 310/762] Fix: Address errors (in the bus/cache error handler) are now reported on the node receiving the error.

Added more detailed error message for BAR Address Errors.

Based on Broadcom SDK 2.3.

Signed-off-by: Jonathan Pui <jpui@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/mm/Makefile   |    1 +
 arch/mips/mm/cerr-nlm.c |   58 +++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 55 insertions(+), 4 deletions(-)

diff --git a/arch/mips/mm/Makefile b/arch/mips/mm/Makefile
index 858750c..7b713a8 100644
--- a/arch/mips/mm/Makefile
+++ b/arch/mips/mm/Makefile
@@ -41,4 +41,5 @@ obj-$(CONFIG_MIPS_CPU_SCACHE)	+= sc-mips.o
 obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o 
 
 #EXTRA_CFLAGS += -Werror
+EXTRA_CFLAGS += -DNLM_HAL_LINUX_KERNEL
 
diff --git a/arch/mips/mm/cerr-nlm.c b/arch/mips/mm/cerr-nlm.c
index 9ee643d..5ac938c 100644
--- a/arch/mips/mm/cerr-nlm.c
+++ b/arch/mips/mm/cerr-nlm.c
@@ -27,6 +27,10 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <asm/system.h>
 
 #include <asm/netlogic/iomap.h>
+#include <asm/netlogic/hal/nlm_hal.h>
+//#include <asm/netlogic/hal/nlm_hal_pic.h>
+#include <asm/netlogic/xlp_hal_pic.h>
+#include <asm/netlogic/hal/nlm_hal_xlp_dev.h>
 
 unsigned char nlm_cerr_stack[8192];
 volatile int nlm_cerr_lock;
@@ -137,9 +141,50 @@ static void print_cerr_info(void)
 
 #else
 
+static char *nbu_reqsrc[] = {
+	[0] = "Core 0",
+	[1] = "Core 1",
+	[2] = "Core 2",
+	[3] = "Core 3",
+	[4] = "Core 4",
+	[5] = "Core 5",
+	[6] = "Core 6",
+	[7] = "Core 7",
+	[8] = "L3",
+	[9] = "DRAM",
+	[10] = "IO",
+	[11] = "GCU",
+	[12] = "NBU",
+	[13] = "Invalid",
+	[14] = "Invalid",
+	[15] = "Invalid",
+};
+
+static char *nbu_reqtype[] = {
+	[0] = "Invalidate",
+	[1] = "Read",
+	[2] = "Read Exclusive",
+	[3] = "Read Upgrade",
+	[4] = "Writeback",
+	[5] = "IO Read",
+	[6] = "IO Write",
+	[7] = "IO Read Exclusive",
+};
+
+
 static void print_cerr_info(void)
 {
-	nlm_reg_t *nbu_mmio = netlogic_io_mmio(NETLOGIC_IO_BRIDGE_OFFSET);
+	int node = CPU_TO_NODE(nlm_hal_cpu_id());
+	uint64_t nbu_mmio = nlm_hal_get_dev_base(node, 0, NLH_BRIDGE, 0);
+
+	uint32_t nbu_reg0 = nlm_hal_read_32bit_reg(nbu_mmio, 162);
+	uint32_t nbu_reg1 = nlm_hal_read_32bit_reg(nbu_mmio, 163);
+	uint32_t nbu_reg2 = nlm_hal_read_32bit_reg(nbu_mmio, 164);
+
+	uint8_t src = (nbu_reg0 >> 7) & 0xF;
+	uint8_t type = (nbu_reg0 >> 4) & 0x7;
+	uint8_t overflow = (nbu_reg0 >> 3) & 0x1;
+	uint8_t valid = (nbu_reg0 >> 2) & 0x1;
 
 	uint64_t icu_log0 = read_64bit_nlm_ctrl_reg(CPU_BLOCKID_ICU, ICU_CERRLOG0_REGID);
 	uint64_t icu_log1 = read_64bit_nlm_ctrl_reg(CPU_BLOCKID_ICU, ICU_CERRLOG1_REGID);
@@ -157,9 +202,14 @@ static void print_cerr_info(void)
 		    lsu_log0, lsu_log1,
 		    scu_log0, scu_log1, scu_log2);
 
-	cerr_printk("NBU: Bar Aerr reg0 = 0x%08x, reg1 = 0x%08x, reg2 = 0x%08x\n",
-		    netlogic_read_reg(nbu_mmio, 162), netlogic_read_reg(nbu_mmio, 163),
-		    netlogic_read_reg(nbu_mmio, 164) );
+	cerr_printk("NBU: BAR Address Error reg0 = 0x%08x, reg1 = 0x%08x, reg2 = 0x%08x\n"
+			"                    %s Error%s, %s request from %s on Node %d at 0x%02x%08x.\n",
+			nbu_reg0, nbu_reg1, nbu_reg2,
+			valid? "Valid":"Invalid",
+			overflow? " (Overflow)":"",
+			nbu_reqtype[type], nbu_reqsrc[src],
+			node,
+			nbu_reg2, nbu_reg1);
 }
 
 #endif
-- 
1.7.0.4

