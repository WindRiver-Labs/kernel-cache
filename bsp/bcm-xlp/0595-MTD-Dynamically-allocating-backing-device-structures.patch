From c1feb70c589b6e9f1d55fb5233aa250a1886865e Mon Sep 17 00:00:00 2001
From: Divya Sakthidharan <divyas@broadcom.com>
Date: Fri, 28 Sep 2012 16:24:33 +0530
Subject: [PATCH 595/762] MTD: Dynamically allocating backing device structures for mtd devices.

Statically allocated bdi structure have  kseg2 adresses.
However virt_to_page can not be called with a kseg2 address.
Replacing them with kmalloc dynamic allocation.

Also updated defconfigs and removed un-wanted files.

Based on Broadcom SDK 2.3.

Signed-off-by: Divya Sakthidharan <divyas@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/mtd/maps/Kconfig     |    6 -
 drivers/mtd/maps/Makefile    |    1 -
 drivers/mtd/maps/xlp-flash.c |  233 ------------------------------------------
 drivers/mtd/mtdcore.c        |  137 ++++++++++++++++++++-----
 4 files changed, 109 insertions(+), 268 deletions(-)
 delete mode 100644 drivers/mtd/maps/xlp-flash.c

diff --git a/drivers/mtd/maps/Kconfig b/drivers/mtd/maps/Kconfig
index 3a9bd22..8af67cf 100644
--- a/drivers/mtd/maps/Kconfig
+++ b/drivers/mtd/maps/Kconfig
@@ -249,12 +249,6 @@ config MTD_LANTIQ
 	help
 	  Support for NOR flash attached to the Lantiq SoC's External Bus Unit.
 
-config MTD_XLP
-	tristate "XLP Flash MTD support"
-	depends on NLM_XLP
-	help
-	  Flash memory access on XLP Reference Boards
-
 config MTD_DILNETPC
 	tristate "CFI Flash device mapped on DIL/Net PC"
 	depends on X86 && MTD_CFI_INTELEXT && BROKEN
diff --git a/drivers/mtd/maps/Makefile b/drivers/mtd/maps/Makefile
index f23a741..c9d39ac 100644
--- a/drivers/mtd/maps/Makefile
+++ b/drivers/mtd/maps/Makefile
@@ -57,7 +57,6 @@ obj-$(CONFIG_MTD_INTEL_VR_NOR)	+= intel_vr_nor.o
 obj-$(CONFIG_MTD_BFIN_ASYNC)	+= bfin-async-flash.o
 obj-$(CONFIG_MTD_RBTX4939)	+= rbtx4939-flash.o
 obj-$(CONFIG_MTD_VMU)		+= vmu-flash.o
-obj-$(CONFIG_MTD_XLP)           += xlp-flash.o
 obj-$(CONFIG_MTD_GPIO_ADDR)	+= gpio-addr-flash.o
 obj-$(CONFIG_MTD_LATCH_ADDR)	+= latch-addr-flash.o
 obj-$(CONFIG_MTD_LANTIQ)	+= lantiq-flash.o
diff --git a/drivers/mtd/maps/xlp-flash.c b/drivers/mtd/maps/xlp-flash.c
deleted file mode 100644
index 8137b49..0000000
--- a/drivers/mtd/maps/xlp-flash.c
+++ /dev/null
@@ -1,233 +0,0 @@
-/***********************************************************************
- * Copyright 2003-2010 Netlogic Microsystems (ï¿½"Netlogic" ). All rights
- * reserved.
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- * 1. Redistributions of source code must retain the above copyright
- * notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- * notice, this list of conditions and the following disclaimer in
- * the documentation and/or other materials provided with the
- * distribution.
- * THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
- * THE POSSIBILITY OF SUCH DAMAGE.
- * *****************************#NETL_2#********************************/
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/types.h>
-#include <linux/kernel.h>
-#include <linux/platform_device.h>
-
-#include <linux/mtd/mtd.h>
-#include <linux/mtd/map.h>
-#include <linux/mtd/partitions.h>
-
-#include <asm/io.h>
-#ifdef CONFIG_NLM_XLP
-#include <asm/netlogic/hal/nlm_hal.h>
-#include <asm/netlogic/xlp.h>
-#endif
-
-#undef NOR_DEBUG
-
-#define XLP_NOR_BASEADDR	0x40
-#define XLP_NOR_SIZE 		0x01000000 /* 16MB */
-#define XLP_NOR_WIDTH		2 /* 16-bits */
-
-struct xlp_nor_info {
-        struct mtd_partition    *parts;
-        struct mtd_info         *mtd;
-        struct map_info         map;
-};
-
-static struct mtd_partition xlp_nor_partitions[] = {
-        {
-                .name   = "X-Loader(RO)",
-                .offset = 0,
-                .size   = 0x100000,     /* 1M */
-                .mask_flags = MTD_WRITEABLE,
-        },
-        {
-                .name   = "U-boot(RW)",
-                .offset = 0x100000,
-                .size   = 0x60000,      /* 384k */
-        },
-        {
-                .name   = "DTB(RW)",
-                .offset = 0x160000,
-                .size   = 0x20000,      /* 128K */
-        },
-        {
-                .name   = "Kernel(RW)",
-                .offset = 0x180000,
-                .size   = 0x580000,     /* 5.5M */
-        },
-        {
-                .name   = "Rootfs(RW)",
-                .offset = 0x700000,
-                .size   = 0x800000,     /* 8M */
-        },
-        {
-                .name   = "Env(RO)",
-                .offset = 0xf00000,     /* 1M */
-                .size   = MTDPART_SIZ_FULL,
-                .mask_flags = MTD_WRITEABLE,
-        },
-};
-
-static __inline__ int32_t nor_reg_read(int node,  int regidx)
-{
-        volatile uint64_t mmio;
-        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_SPI_NOR_FLASH_DEV, XLP_PCIE_SPI_NOR);
-        return nlm_hal_read_32bit_reg(mmio, regidx);
-}
-static __inline__ void nor_reg_write(int node, int regidx, int32_t val)
-{
-        volatile uint64_t mmio;
-        mmio = nlm_hal_get_dev_base(node, 0, XLP_PCIE_SPI_NOR_FLASH_DEV, XLP_PCIE_SPI_NOR);
-        nlm_hal_write_32bit_reg(mmio, regidx, val);
-}
-
-#ifdef NOR_DEBUG
-static void nor_dump_reg(void)
-{
-        int i;
-
-	printk("\nNor Flash memory interface chip select:\n");
-        for(i = 0x0; i < 0x7; i++)
-        {
-                printk("nor flash:  0x%0x = 0x%8x\n", i, nor_reg_read(0, i));
-        }
-
-        for(i = 0x40; i < 0x47; i++)
-        {
-                printk("base addr for cs:%d  0x%0x = 0x%8x\n", i & 0x0f, i, nor_reg_read(0, i));
-        }
-
-        for(i = 0x48; i < 0x4f; i++)
-        {
-                printk("addr limit  cs:%d  0x%0x = 0x%8x\n", i & 0x0f, i, nor_reg_read(0, i));
-        }
-
-        for(i = 0x50; i < 0x57; i++)
-        {
-                printk("device parameter for cs:%d  0x%0x = 0x%8x\n", i & 0x0f, i, nor_reg_read(0, i));
-        }
-
-        printk("Nor flash system control 0x68= 0x%8x\n", nor_reg_read(0, 0x68));
-}
-#endif
-
-
-static int __devinit xlp_nor_probe(struct platform_device *pdev)
-{
-	struct xlp_nor_info *info;
-	int nb_parts, err;
-
-	info = kzalloc(sizeof(struct xlp_nor_info), GFP_KERNEL);
-	if (!info)
-		return -ENOMEM;
-
-	info->map.name		= dev_name(&pdev->dev);
-	info->map.bankwidth	= XLP_NOR_WIDTH;
-	info->map.phys		= nor_reg_read(0, XLP_NOR_BASEADDR) << 8;
-	info->map.size		= XLP_NOR_SIZE;
-	info->map.virt		= ioremap(info->map.phys, XLP_NOR_SIZE);
-	if(!info->map.virt) {
-		err = -ENOMEM;
-		goto out_info;
-	}
-	info->mtd 		= do_map_probe("cfi_probe", &info->map);
-	if (!info->mtd) {
-		err = -ENXIO;
-		goto out_unmap;
-	}
-	info->mtd->owner	= THIS_MODULE;
-	info->mtd->dev.parent	= &pdev->dev;
-	
-	if (mtd_has_cmdlinepart()) {
-		static const char *part_probes[] = { "cmdlinepart", NULL, };
-		nb_parts = parse_mtd_partitions(info->mtd, part_probes, &info->parts, 0);
-	}
-	if (nb_parts <= 0) {
-		nb_parts = ARRAY_SIZE(xlp_nor_partitions);
-		if (!info->parts)
-			info->parts = xlp_nor_partitions;
-	}
-	if (nb_parts > 0) {
-		err = mtd_device_register(info->mtd, info->parts, nb_parts);
-	}
-	else {
-		err = mtd_device_register(info->mtd, NULL, 0);
-	}
-
-	platform_set_drvdata(pdev, info);
-
-	/* XLP_MERGE_TODO: always return 0? */
-	return 0;
-out_unmap:
-	iounmap(info->map.virt);
-out_info:
-	kfree(info);
-	return err;
-}
-
-static int __exit xlp_nor_remove(struct platform_device *pdev)
-{
-	struct xlp_nor_info* info = platform_get_drvdata(pdev);
-
-	platform_set_drvdata(pdev, NULL);
-
-	if (info) {
-		if(info->parts) {
-			mtd_device_unregister(info->mtd);
-			kfree(info->parts);
-		}
-		else
-			mtd_device_unregister(info->mtd);
-		map_destroy(info->mtd);
-		iounmap(info->map.virt);
-		kfree(info);
-	}
-	return 0;
-}
-
-static struct platform_driver xlp_nor_driver = {
-        .probe          = xlp_nor_probe,
-        .remove         = xlp_nor_remove,
-        .driver         = {
-                .name   = "nor-xlp",
-                .owner  = THIS_MODULE,
-        },
-};
-
-static int __init xlp_nor_init(void)
-{
-        return platform_driver_register(&xlp_nor_driver);
-}
-
-static void __exit xlp_nor_exit(void)
-{
-        platform_driver_unregister(&xlp_nor_driver);
-}
-
-
-module_init(xlp_nor_init);
-module_exit(xlp_nor_exit);
-
-MODULE_AUTHOR("Netlogic Microsystems");
-MODULE_DESCRIPTION("Netlogic xlp NOR MTD driver");
-MODULE_LICENSE("GPL");
-MODULE_VERSION("0.1");
-MODULE_ALIAS("platform:xlp-nor");
diff --git a/drivers/mtd/mtdcore.c b/drivers/mtd/mtdcore.c
index c837507..e72b7af 100644
--- a/drivers/mtd/mtdcore.c
+++ b/drivers/mtd/mtdcore.c
@@ -45,6 +45,8 @@
  * backing device capabilities for non-mappable devices (such as NAND flash)
  * - permits private mappings, copies are taken of the data
  */
+
+#ifndef CONFIG_NLM_XLP
 static struct backing_dev_info mtd_bdi_unmappable = {
 	.capabilities	= BDI_CAP_MAP_COPY,
 };
@@ -69,6 +71,11 @@ static struct backing_dev_info mtd_bdi_rw_mappable = {
 			   BDI_CAP_EXEC_MAP | BDI_CAP_READ_MAP |
 			   BDI_CAP_WRITE_MAP),
 };
+#else
+static struct backing_dev_info *mtd_bdi_unmappable = NULL;
+static struct backing_dev_info *mtd_bdi_ro_mappable = NULL;
+static struct backing_dev_info *mtd_bdi_rw_mappable = NULL;
+#endif
 
 static int mtd_cls_suspend(struct device *dev, pm_message_t state);
 static int mtd_cls_resume(struct device *dev);
@@ -292,19 +299,32 @@ int add_mtd_device(struct mtd_info *mtd)
 {
 	struct mtd_notifier *not;
 	int i, error;
-
+	
 	if (!mtd->backing_dev_info) {
 		switch (mtd->type) {
-		case MTD_RAM:
-			mtd->backing_dev_info = &mtd_bdi_rw_mappable;
-			break;
-		case MTD_ROM:
-			mtd->backing_dev_info = &mtd_bdi_ro_mappable;
-			break;
-		default:
-			mtd->backing_dev_info = &mtd_bdi_unmappable;
-			break;
+		#ifdef CONFIG_NLM_XLP
+			case MTD_RAM:
+                	        mtd->backing_dev_info = mtd_bdi_rw_mappable;
+                        	break;
+                	case MTD_ROM:
+                        	mtd->backing_dev_info = mtd_bdi_ro_mappable;
+                        	break;
+			default:
+                        	mtd->backing_dev_info = mtd_bdi_unmappable;
+                      		break;
+		#else
+			case MTD_RAM:
+				mtd->backing_dev_info = &mtd_bdi_rw_mappable;
+				break;
+			case MTD_ROM:
+				mtd->backing_dev_info = &mtd_bdi_ro_mappable;
+				break;
+			default:
+				mtd->backing_dev_info = &mtd_bdi_unmappable;
+				break;
+		#endif
 		}
+
 	}
 
 	BUG_ON(mtd->writesize == 0);
@@ -1083,6 +1103,7 @@ static int __init mtd_bdi_init(struct backing_dev_info *bdi, const char *name)
 	int ret;
 
 	ret = bdi_init(bdi);
+
 	if (!ret)
 		ret = bdi_register(bdi, NULL, name);
 
@@ -1100,29 +1121,83 @@ static int __init init_mtd(void)
 	if (ret)
 		goto err_reg;
 
-	ret = mtd_bdi_init(&mtd_bdi_unmappable, "mtd-unmap");
-	if (ret)
-		goto err_bdi1;
+	#ifdef CONFIG_NLM_XLP
 
-	ret = mtd_bdi_init(&mtd_bdi_ro_mappable, "mtd-romap");
-	if (ret)
-		goto err_bdi2;
+		mtd_bdi_unmappable  = kmalloc(sizeof(struct backing_dev_info), GFP_KERNEL);
+		if(mtd_bdi_unmappable)	{
+			mtd_bdi_unmappable->capabilities = BDI_CAP_MAP_COPY;
+		}
+		else
+			goto err_kmalloc_1;
+		
+		mtd_bdi_ro_mappable = kmalloc(sizeof(struct backing_dev_info), GFP_KERNEL);
+		if(mtd_bdi_ro_mappable)	{
+			mtd_bdi_unmappable->capabilities = (BDI_CAP_MAP_COPY | BDI_CAP_MAP_DIRECT |
+							BDI_CAP_EXEC_MAP | BDI_CAP_READ_MAP);
+		}
+		else
+			goto err_kmalloc_2;
+	
+		mtd_bdi_rw_mappable = kmalloc(sizeof(struct backing_dev_info), GFP_KERNEL);
+		if(mtd_bdi_rw_mappable)        {
+			mtd_bdi_unmappable->capabilities = (BDI_CAP_MAP_COPY | BDI_CAP_MAP_DIRECT |
+							BDI_CAP_EXEC_MAP | BDI_CAP_READ_MAP |
+							BDI_CAP_WRITE_MAP);
+		}
+		else
+			goto err_kmalloc_3;
 
-	ret = mtd_bdi_init(&mtd_bdi_rw_mappable, "mtd-rwmap");
-	if (ret)
-		goto err_bdi3;
+		ret = mtd_bdi_init(mtd_bdi_unmappable, "mtd-unmap");
+                if (ret)
+                        goto err_bdi1;
+
+		ret = mtd_bdi_init(mtd_bdi_ro_mappable, "mtd-romap");
+                if (ret)
+                        goto err_bdi2;
+
+                ret = mtd_bdi_init(mtd_bdi_rw_mappable, "mtd-rwmap");
+                if (ret)
+                        goto err_bdi3;	
+	#else
+		ret = mtd_bdi_init(&mtd_bdi_unmappable, "mtd-unmap");
+		if (ret)
+			goto err_bdi1;
+
+		ret = mtd_bdi_init(&mtd_bdi_ro_mappable, "mtd-romap");
+		if (ret)
+			goto err_bdi2;
+
+		ret = mtd_bdi_init(&mtd_bdi_rw_mappable, "mtd-rwmap");
+		if (ret)
+			goto err_bdi3;
+	#endif
 
 #ifdef CONFIG_PROC_FS
 	proc_mtd = proc_create("mtd", 0, NULL, &mtd_proc_ops);
 #endif /* CONFIG_PROC_FS */
 	return 0;
 
-err_bdi3:
-	bdi_destroy(&mtd_bdi_ro_mappable);
-err_bdi2:
-	bdi_destroy(&mtd_bdi_unmappable);
-err_bdi1:
-	class_unregister(&mtd_class);
+#ifndef CONFIG_NLM_XLP
+	err_bdi3:
+		bdi_destroy(&mtd_bdi_ro_mappable);
+	err_bdi2:
+		bdi_destroy(&mtd_bdi_unmappable);
+	err_bdi1:
+		class_unregister(&mtd_class);
+#else
+	err_bdi3:
+        	bdi_destroy(mtd_bdi_ro_mappable);
+	err_bdi2:
+        	bdi_destroy(mtd_bdi_unmappable);
+	err_bdi1:
+		kfree(mtd_bdi_rw_mappable);
+	err_kmalloc_3:
+		kfree(mtd_bdi_ro_mappable);	
+	err_kmalloc_2:
+		kfree(mtd_bdi_unmappable);
+	err_kmalloc_1:
+		class_unregister(&mtd_class);	
+#endif
 err_reg:
 	pr_err("Error registering mtd class or bdi: %d\n", ret);
 	return ret;
@@ -1135,9 +1210,15 @@ static void __exit cleanup_mtd(void)
 		remove_proc_entry( "mtd", NULL);
 #endif /* CONFIG_PROC_FS */
 	class_unregister(&mtd_class);
-	bdi_destroy(&mtd_bdi_unmappable);
-	bdi_destroy(&mtd_bdi_ro_mappable);
-	bdi_destroy(&mtd_bdi_rw_mappable);
+	#ifndef CONFIG_NLM_XLP
+		bdi_destroy(&mtd_bdi_unmappable);
+		bdi_destroy(&mtd_bdi_ro_mappable);
+		bdi_destroy(&mtd_bdi_rw_mappable);
+	#else
+		bdi_destroy(mtd_bdi_unmappable);
+        	bdi_destroy(mtd_bdi_ro_mappable);
+        	bdi_destroy(mtd_bdi_rw_mappable);
+	#endif
 }
 
 module_init(init_mtd);
-- 
1.7.0.4

