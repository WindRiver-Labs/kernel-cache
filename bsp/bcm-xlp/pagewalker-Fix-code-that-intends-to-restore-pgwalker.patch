From 50420788f638a264c0c80687681295447cf8d392 Mon Sep 17 00:00:00 2001
From: Yongjun Zhang <yongjunz@broadcom.com>
Date: Mon, 14 Jan 2013 13:25:55 -0800
Subject: [PATCH 656/761] pagewalker: Fix code that intends to restore
 pgwalker setting but doesn't

Based on Broadcom SDK 2.3.

Signed-off-by: Yongjun Zhang <yongjunz@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/mach-netlogic/xlp-mmu.h |   81 ++++++++-----------------
 1 file changed, 25 insertions(+), 56 deletions(-)

diff --git a/arch/mips/include/asm/mach-netlogic/xlp-mmu.h b/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
index 3f51e05..f3367f4 100644
--- a/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
+++ b/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
@@ -1,32 +1,3 @@
-/*-
- * Copyright (c) 2003-2012 Broadcom Corporation
- * All Rights Reserved
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- * #BRCM_2# */
-
 #ifndef _ASM_MACH_NLM_XLP_MMU_H
 #define _ASM_MACH_NLM_XLP_MMU_H
 
@@ -43,6 +14,9 @@
 #define ENABLE_128_TLB     0x20
 #define ENABLE_PGWALKER    0x8
 
+#define LSU_DEBUG_VALID_ARRAY		0
+#define LSU_DEBUG_PROBE_VALID_ARRAY	1
+
 #define USER_SEG 0
 
 #ifdef CONFIG_64BIT
@@ -54,12 +28,11 @@
 #define VMALLOC_SEG 1
 #endif /* CONFIG_64BIT */
 
+extern int is_cpu_core_xlp_ii;
 extern DEFINE_PER_CPU(unsigned long [NR_ADDR_SEGMENTS], pgd_bases);
 
 extern uint32_t nlm_l1_lock[NR_CPUS/4];
 
-extern int is_nlm_xlp2xx_compat;
-
 static inline void setup_user_pgd(pgd_t *pgd)
 {
 	get_cpu_var(pgd_bases)[USER_SEG] = (unsigned long) pgd;
@@ -178,32 +151,28 @@ static __inline__ void pipeline_flush(void)
 		);
 }
 
-#ifdef CONFIG_32BIT
-#define disable_pgwalker(flags) (void)flags
-#define enable_pgwalker(flags) (void) flags
-#else
 #define disable_pgwalker(flags)						\
-	({ if (!is_nlm_xlp2xx_compat) {				\
-	        flags = read_c0_config6();				\
-		pipeline_flush();					\
-		write_c0_config6(read_c0_config6() & ~ENABLE_PGWALKER);	\
-		pipeline_flush();					\
-	   } else { 							\
-	        flags = read_c0_pwctl();				\
-		pipeline_flush();					\
-		write_c0_pwctl(flags & ~(1 <<  PWCTL_PW_EN_O));		\
-		pipeline_flush();					\
-	   }								\
-	  })
-
-#define enable_pgwalker(flags)								\
-	({ 										\
-	    if (!is_nlm_xlp2xx_compat) {						\
-		write_c0_config6(read_c0_config6() | (flags & ENABLE_PGWALKER));	\
-	    } else {									\
-		write_c0_pwctl(read_c0_pwctl() | (flags & (1 << PWCTL_PW_EN_O)));	\
-	    }										\
+	({                                                              \
+           if (!is_cpu_core_xlp_ii) {					\
+		flags = read_c0_config6();                              \
+		pipeline_flush();                                       \
+		write_c0_config6(flags & ~ENABLE_PGWALKER);             \
+		pipeline_flush();                                       \
+ 	   }else {                                                      \
+	   flags = read_c0_pwctl();                                     \
+                pipeline_flush();                                       \
+                write_c0_pwctl(flags & ~(1 <<  PWCTL_PW_EN_O));         \
+                pipeline_flush();                                       \
+	   }                                                            \
 	})
 
-#endif
+#define enable_pgwalker(flags)                                                	  	\
+        ({                                                                     		\
+            if (!is_cpu_core_xlp_ii) {                                         		\
+                write_c0_config6(read_c0_config6() | (flags & ENABLE_PGWALKER));	\
+            } else {                                                            	\
+                write_c0_pwctl(read_c0_pwctl() | (flags & (1 << PWCTL_PW_EN_O)));       \
+            }                                                 		                \
+        })
+
 #endif
-- 
1.7.10.4

