From 21b49ed8331f89b17d9d0191dba5efeca4c90684 Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@netlogicmicro.com>
Date: Sat, 21 Jan 2012 10:09:48 -0800
Subject: [PATCH 750/760] Fix a typo in previous push related __get_free_pages

  o Also change Kconfig to recognize the new config macro
    CONFIG_NLM_16G_MEM_SUPPORT

Based on Broadcom SDK 2.3.

Signed-off-by: Yonghong Song <ysong@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/Kconfig |    6 ++++++
 mm/page_alloc.c   |   22 +++++++++++++++++-----
 2 files changed, 23 insertions(+), 5 deletions(-)

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 2909dc7..6857fa8 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -1829,6 +1829,12 @@ config 64BIT
 	help
 	  Select this option if you want to build a 64-bit kernel.
 
+config NLM_16G_MEM_SUPPORT
+	bool "more than 16GB memory support"
+	depends on 64BIT
+	help
+	 Select this option if you want the kernel to support more than 16GB memory
+
 endchoice
 
 choice
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index aa4f05d..e87a1de 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -2599,10 +2599,7 @@ EXPORT_SYMBOL(__alloc_pages_nodemask);
  * Common helper functions.
  */
 #ifdef CONFIG_NLM_16G_MEM_SUPPORT
-unsigned long ___get_free_pages(gfp_t gfp_mask, unsigned int order)
-#else
-unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)
-#endif
+unsigned long ____get_free_pages(gfp_t gfp_mask, unsigned int order)
 {
 	struct page *page;
 
@@ -2617,9 +2614,24 @@ unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)
 		return 0;
 	return (unsigned long) page_address(page);
 }
-#ifdef CONFIG_NLM_16G_MEM_SUPPORT
 unsigned long (*__get_free_pages)(gfp_t gfp_mask, unsigned int order)
 	= ____get_free_pages;
+#else
+unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)
+{
+	struct page *page;
+
+	/*
+	 * __get_free_pages() returns a 32-bit address, which cannot represent
+	 * a highmem page
+	 */
+	VM_BUG_ON((gfp_mask & __GFP_HIGHMEM) != 0);
+
+	page = alloc_pages(gfp_mask, order);
+	if (!page)
+		return 0;
+	return (unsigned long) page_address(page);
+}
 #endif
 EXPORT_SYMBOL(__get_free_pages);
 
-- 
1.7.0.4

