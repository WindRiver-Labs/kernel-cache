From ae8066d76f95964ba254ee2b993d738d3a4bfa10 Mon Sep 17 00:00:00 2001
From: Krishnamurthy D V <kmurthy@netlogicmicro.com>
Date: Fri, 30 Jul 2010 13:17:17 +0530
Subject: [PATCH 122/762] Adding board dependent code in board.c which will fill the board dependent parameters from either FDT or EEPROM(for Netlogic XLR boards). Currently, following parameters are dynamically read from EEPROM - Board Major, minor - Board MAC address

CPU frequency is calculated dynamically using a GPIO register.
All the above parameters can be overwritten by FDT

Based on Broadcom SDK 2.3.

Signed-off-by: Krishnamurthy D V <kmurthy@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/i2c-algo-palm.h |   53 ++++++
 arch/mips/include/asm/netlogic/xlr_board.h     |   42 +++++
 arch/mips/netlogic/xlr/Makefile                |    2 +-
 arch/mips/netlogic/xlr/board.c                 |  212 ++++++++++++++++++++++++
 arch/mips/netlogic/xlr/setup.c                 |   54 ++++---
 drivers/i2c/algos/i2c-algo-palm.c              |    2 +-
 drivers/i2c/algos/i2c-algo-palm.h              |   53 ------
 drivers/i2c/busses/i2c-bk3220.c                |    2 -
 8 files changed, 342 insertions(+), 78 deletions(-)
 create mode 100644 arch/mips/include/asm/netlogic/i2c-algo-palm.h
 create mode 100644 arch/mips/include/asm/netlogic/xlr_board.h
 create mode 100644 arch/mips/netlogic/xlr/board.c
 delete mode 100644 drivers/i2c/algos/i2c-algo-palm.h

diff --git a/arch/mips/include/asm/netlogic/i2c-algo-palm.h b/arch/mips/include/asm/netlogic/i2c-algo-palm.h
new file mode 100644
index 0000000..7fafa4a
--- /dev/null
+++ b/arch/mips/include/asm/netlogic/i2c-algo-palm.h
@@ -0,0 +1,53 @@
+/***********************************************************************
+Copyright 2003-2010 Netlogic Microsystems (“Netlogic”). All rights
+reserved.
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+1. Redistributions of source code must retain the above copyright
+notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+notice, this list of conditions and the following disclaimer in
+the documentation and/or other materials provided with the
+distribution.
+THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGE.
+*****************************#NETL_2#********************************/
+/*
+ *  i2c-algo-palm.c i2c driver algorithms for the BK3220 I2C Host 
+ *  adapter on the RMI Phoenix System.
+ *  Derived from the PCA-ISA I2C-Algo/Bus files.
+ */
+
+#ifndef I2C_PALM_H
+#define I2C_PALM_H 			1
+
+#define I2C_PALM_CFG			0x00 
+#define I2C_PALM_CLKDIV			0x01 
+#define I2C_PALM_DEVADDR		0x02 
+#define I2C_PALM_ADDR			0x03
+#define I2C_PALM_DATAOUT		0x04 
+#define I2C_PALM_DATAIN			0x05 
+#define I2C_PALM_STATUS			0x06
+#define I2C_PALM_STARTXFR		0x07
+#define I2C_PALM_BYTECNT		0x08
+#define I2C_PALM_HDSTATIM		0x09
+
+/* TEST Values!! Change as required */
+#define I2C_PALM_CFG_DEF		0x000000F8	/* 8-Bit Addr + POR Values */
+#define I2C_PALM_CLKDIV_DEF		0x14A //0x00000052	
+#define I2C_PALM_HDSTATIM_DEF		0x107 //0x00000000
+
+#define I2C_PALM_STARTXFR_RD		0x00000001
+#define I2C_PALM_STARTXFR_WR		0x00000000
+
+#endif /* I2C_PALM_H */
diff --git a/arch/mips/include/asm/netlogic/xlr_board.h b/arch/mips/include/asm/netlogic/xlr_board.h
new file mode 100644
index 0000000..9226361
--- /dev/null
+++ b/arch/mips/include/asm/netlogic/xlr_board.h
@@ -0,0 +1,42 @@
+/***********************************************************************
+Copyright 2003-2010 Netlogic Microsystems (“Netlogic”). All rights
+reserved.
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+1. Redistributions of source code must retain the above copyright
+notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+notice, this list of conditions and the following disclaimer in
+the documentation and/or other materials provided with the
+distribution.
+THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGE.
+*****************************#NETL_2#********************************/
+#ifndef _NLM_XLR_BOARD_H
+#define _NLM_XLR_BOARD_H
+
+#include <linux/types.h>
+
+typedef struct xlr_board_info {
+	int major;
+	int minor;
+	uint32_t cpu_freq;
+	uint8_t mac_addr[6];
+}xlr_board_info_t;
+
+/* These functions should be defined by the board dependent code */
+int read_board_info(xlr_board_info_t *board);
+
+
+
+#endif
diff --git a/arch/mips/netlogic/xlr/Makefile b/arch/mips/netlogic/xlr/Makefile
index de43e9b..9a649bd 100644
--- a/arch/mips/netlogic/xlr/Makefile
+++ b/arch/mips/netlogic/xlr/Makefile
@@ -2,7 +2,7 @@ EXTRA_CFLAGS := -Werror
 EXTRA_CFLAGS := $(CFLAGS) -DNLM_HAL_LINUX_KERNEL -Iarch/mips/include/asm/netlogic/hal
 
 
-obj-y                   = setup.o config_net.o
+obj-y                   = setup.o config_net.o board.o
 obj-y += irq.o time.o on_chip.o mmu.o
 obj-$(CONFIG_NLM_XLR) += platform.o
 obj-$(CONFIG_SMP)      += smp.o smpboot.o
diff --git a/arch/mips/netlogic/xlr/board.c b/arch/mips/netlogic/xlr/board.c
new file mode 100644
index 0000000..b4c8395
--- /dev/null
+++ b/arch/mips/netlogic/xlr/board.c
@@ -0,0 +1,212 @@
+/***********************************************************************
+Copyright 2003-2010 Netlogic Microsystems (Netlogic). All rights
+reserved.
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+1. Redistributions of source code must retain the above copyright
+notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+notice, this list of conditions and the following disclaimer in
+the documentation and/or other materials provided with the
+distribution.
+THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGE.
+*****************************#NETL_2#********************************/
+
+/*
+ * Board dependent code for Netlogic's XLR-based boards
+ */
+
+#include <linux/spinlock.h>
+#include <linux/mm.h>
+#include <linux/bootmem.h>
+#include <linux/init.h>
+#include <linux/pm.h>
+
+#include <asm/irq.h>
+#include <asm/io.h>
+#include <asm/bootinfo.h>
+#include <asm/addrspace.h>
+#include <asm/reboot.h>
+#include <asm/time.h>
+#include <linux/interrupt.h>
+#include <asm/atomic.h>
+#include <asm/cacheflush.h>
+
+#include <asm/netlogic/sim.h>
+#include <asm/mipsregs.h>
+#include <asm/netlogic/mips-exts.h>
+#include <asm/netlogic/iomap.h>
+#include <asm/netlogic/debug.h>
+#include <asm/netlogic/xlr_user_mac.h>
+#include <asm/netlogic/msgring.h>
+
+#include <asm/netlogic/nlm_pcix_gen_dev.h>
+#include <asm/netlogic/bootinfo.h>
+#include <asm/netlogic/memory-exclusion.h>
+
+#include <linux/serial.h>
+#include <linux/serial_core.h>
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <asm/mach-netlogic/mmu.h>
+#include <asm/netlogic/i2c-algo-palm.h>
+#include <asm/netlogic/xlr_board.h>
+
+
+#define EEPROM_MAJOR_OFFSET 0x18
+#define EEPROM_MINOR_OFFSET 0x19
+#define EEPROM_ETH_MAC_OFFSET 0x20
+#define GPIO_RESET_CFG 			21
+
+int wait_i2c_idle(nlm_reg_t *mmio)
+{
+	int i;
+	nlm_reg_t regVal;
+
+	i=0x1000;
+	regVal = netlogic_read_reg(mmio, I2C_PALM_STATUS) & 0x0001;
+	while (regVal && i--) {
+		regVal = netlogic_read_reg(mmio, I2C_PALM_STATUS) & 0x0001;
+	}
+	if(i == 0) {
+		printk("Bus not idle\n");
+		return -1;
+	}
+	return 0;
+}
+
+
+static uint32_t xls_get_cpu_clk(uint32_t cfg)
+{
+	int adivq, adivf;
+	int ref = 6667;
+	int res;
+
+	/* REF/2 * DIVF / DIVQ = PLLOUT */
+	adivf = (cfg & 0xff) + 1;
+	adivq = (cfg >> 8) & 0x7 ;
+	adivq = (1 << adivq); /* adivq = 2 ^ divq */
+
+	/* multiply adivf by 1000 so that we get
+	 * better result with integer division.
+	 * Also divide the final result with 100 (from ref
+	 * earlier) and the 1000 we multiplied with adivf
+	 */
+	res = ((ref / 2) * (adivf*1000/adivq))/(100*1000);
+	printk("Determined CPU frequency = %dMhz\n", res);
+	return (uint32_t)res;
+}
+
+void get_cpu_clock(xlr_board_info_t *board)
+{
+	nlm_reg_t *mmio = netlogic_io_mmio(NETLOGIC_IO_GPIO_OFFSET);
+	uint32_t freq=0, cfg;
+
+	cfg = netlogic_read_reg(mmio, GPIO_RESET_CFG);
+
+	if(is_xls()) {
+		freq = xls_get_cpu_clk(cfg);
+	} else {
+
+		freq = (((((cfg >> 2) & 0x7f) + 1) * 16667)/1000);
+
+		if (cfg & 0x200)
+			freq = freq >> 1;
+	}
+	if(!freq) {
+		printk("Unable to determine CPU frequency from CFGREG [0x%x]\n", cfg);
+		board->cpu_freq = 1000 * 1000 * 1000;
+	} else {
+		board->cpu_freq = freq * 1000 * 1000;
+	}
+	
+}
+
+int  read_board_info(xlr_board_info_t *board) 
+{
+	uint8_t ebuf[48];
+	int len;
+	volatile uint32_t regVal, i, tmp;
+	nlm_reg_t *mmio = netlogic_io_mmio(NETLOGIC_IO_I2C_1_OFFSET);
+
+	get_cpu_clock(board);
+
+	/* Read other board dependent stuff */
+	/* EEPROM on Netlogic XLR/XLS boards are on BUS 1 */
+	/* read first 40 bytes of the EEPROM */
+	
+	len = 40;
+
+	for(tmp=0; tmp < len; tmp++) {
+
+		if(wait_i2c_idle(mmio) != 0)
+			return -1;
+
+		/* EEPROM is at address 0x50 on bus 1 */
+		netlogic_write_reg(mmio, I2C_PALM_DEVADDR, 0x50);
+		netlogic_write_reg(mmio, I2C_PALM_ADDR, tmp);
+		netlogic_write_reg(mmio, I2C_PALM_CFG,     0xf8);
+		netlogic_write_reg(mmio, I2C_PALM_BYTECNT, 0);
+		netlogic_write_reg(mmio, I2C_PALM_STARTXFR,0x2);
+
+
+		if(wait_i2c_idle(mmio) != 0)
+			return -1;
+
+		regVal = netlogic_read_reg(mmio, I2C_PALM_STATUS);
+		if (regVal & 0x0008) {
+			printk("start read: ACKERR. Aborting...\n");
+			return -1;
+		}
+
+
+		netlogic_write_reg(mmio, I2C_PALM_DEVADDR, 0x50);
+		netlogic_write_reg(mmio, I2C_PALM_CFG,     0xfa);
+		netlogic_write_reg(mmio, I2C_PALM_BYTECNT, 0);
+		netlogic_write_reg(mmio, I2C_PALM_STARTXFR,0x1);
+
+
+		if(wait_i2c_idle(mmio) != 0)
+			return -1;
+
+		regVal = netlogic_read_reg(mmio, I2C_PALM_STATUS);
+		if (regVal & 0x0008) {
+			printk("start read: ACKERR. Aborting...\n");
+			return -1;
+		}
+		i = 0;
+		while(1) {
+			regVal = netlogic_read_reg(mmio, I2C_PALM_STATUS);
+			if (regVal & 0x4) {
+				ebuf[tmp] = (__u8)netlogic_read_reg(mmio,
+						I2C_PALM_DATAIN);
+				break;
+
+			}
+			i++;
+			if (i >= 1000000) {
+				printk("* read Timed OUT byte %d.\n", tmp);
+				return -1;
+			}
+		}
+	}
+	
+	board->major = ebuf[EEPROM_MAJOR_OFFSET] - '0';
+	board->minor = ebuf[EEPROM_MINOR_OFFSET] - '0';
+
+	for(i=0; i < 6; i++) 
+		board->mac_addr[i] = ebuf[EEPROM_ETH_MAC_OFFSET + i];
+	return 0;
+
+}
diff --git a/arch/mips/netlogic/xlr/setup.c b/arch/mips/netlogic/xlr/setup.c
index 6a04f7d..75d34bb 100644
--- a/arch/mips/netlogic/xlr/setup.c
+++ b/arch/mips/netlogic/xlr/setup.c
@@ -60,6 +60,8 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <linux/module.h>
 #include <linux/proc_fs.h>
 #include <asm/mach-netlogic/mmu.h>
+#include <asm/netlogic/xlr_board.h>
+
 
 #ifdef NLM_BRIDGE_WKAROUND
 #include <asm/netlogic/nlm_rw_lock.h>
@@ -86,7 +88,6 @@ EXPORT_SYMBOL(nlm_enable_br_wrkaround);
 
 #define GPIO_SWRESET_REG 		8
 
-
 #define PER_CPU_THREAD_SIZE 	(THREAD_SIZE >> 2)
 #define TOTAL_THREAD_SIZE       (PER_CPU_THREAD_SIZE * (NR_CPUS - 1))
 
@@ -103,6 +104,9 @@ extern char _end;
 /* by default, do not assume u-boot */
 int loader_used = LOADER_OTHER; 
 
+/*  Board information filled by board dependent code */
+xlr_board_info_t nlm_xlr_board_info;
+
 /* Struct for temp. allocation
  * of sp/gp for secondary CPUs 
  */
@@ -526,23 +530,16 @@ unsigned int __cpuinit get_c0_compare_int(void)
     return IRQ_TIMER;
 }
 
+
 void plat_time_init(void)
 {
-    extern void nlm_common_timer_setup(void);
+	extern void nlm_common_timer_setup(void);
 
-	if (loader_used == LOADER_UBOOT) {
-		/* this is currently hardcoded from
-		 * the bootloader value, to be fixed
-		 */
-    	mips_hpt_frequency = (unsigned int)0x5f5e1000;
-	}
-	else {
-    	mips_hpt_frequency = (unsigned int)prom_info->cpu_frequency;
-	}
+	mips_hpt_frequency = nlm_xlr_board_info.cpu_freq;
 
-    printk("mips_hpt_frequency = %u\n", mips_hpt_frequency);
+	printk("mips_hpt_frequency = %u\n", mips_hpt_frequency);
 
-    nlm_common_timer_setup();
+	nlm_common_timer_setup();
 }
 
 #ifdef CONFIG_NLM_COMMON
@@ -1072,8 +1069,11 @@ static void process_prominfo(void (*(*wakeup))(void *, void *, __u32))
 			   sizeof(xlr_bldr_env));
 	}
 
-	xlr_board_major_version = prom_info->board_major_version;
-	xlr_board_minor_version = prom_info->board_minor_version;
+	xlr_board_major_version = nlm_xlr_board_info.major;
+	xlr_board_minor_version = nlm_xlr_board_info.minor;
+
+	printk("Board Major %d Minor %d \n", xlr_board_major_version, 
+			xlr_board_minor_version);
 
 	psb_print_physmap();
 
@@ -1082,12 +1082,12 @@ static void process_prominfo(void (*(*wakeup))(void *, void *, __u32))
 	*wakeup = ((void (*)(void *, void *, __u32))(unsigned long)(prom_info->wakeup));
 
 	/* update the nlm_common  mac addr */
-	xlr_base_mac_addr[0] = (prom_info->mac_addr >> 40) & 0xff;
-	xlr_base_mac_addr[1] = (prom_info->mac_addr >> 32) & 0xff;
-	xlr_base_mac_addr[2] = (prom_info->mac_addr >> 24) & 0xff;
-	xlr_base_mac_addr[3] = (prom_info->mac_addr >> 16) & 0xff;
-	xlr_base_mac_addr[4] = (prom_info->mac_addr >> 8) & 0xff;
-	xlr_base_mac_addr[5] = (prom_info->mac_addr >> 0) & 0xff;
+	xlr_base_mac_addr[0] = nlm_xlr_board_info.mac_addr[0];
+	xlr_base_mac_addr[1] = nlm_xlr_board_info.mac_addr[1];
+	xlr_base_mac_addr[2] = nlm_xlr_board_info.mac_addr[2];
+	xlr_base_mac_addr[3] = nlm_xlr_board_info.mac_addr[3];
+	xlr_base_mac_addr[4] = nlm_xlr_board_info.mac_addr[4];
+	xlr_base_mac_addr[5] = nlm_xlr_board_info.mac_addr[5];
 
 #ifdef DEBUG
 	printk("MAC ADDR BASE: %02x:%02x:%02x:%02x:%02x:%02x\n",
@@ -1169,6 +1169,8 @@ static int build_arcs_cmdline(char *arcs_cmdline, int argc, char *argv[])
 	return 0;
 }
 
+
+
 void __init prom_init(void)
 {
 	int argc, retval;
@@ -1194,6 +1196,15 @@ void __init prom_init(void)
 		goto rest_prom_int;
 	}
 
+	set_xls_chip_family_types();
+
+	/* Try to get the board major, minor, mac address etc if no FDT info is 
+	   passed - TODO 
+	   */
+	if(read_board_info(&nlm_xlr_board_info) != 0) {
+		printk("read board_info failed\n");
+	}
+
 	process_prominfo(&wakeup);
 
 setup_memory:
@@ -1203,6 +1214,7 @@ setup_memory:
 
 	prom_add_memory();
 
+
 	smp_boot.online_map = (1 << hard_smp_processor_id());
 
 	wakeup_secondary_cpus(prom_info);
diff --git a/drivers/i2c/algos/i2c-algo-palm.c b/drivers/i2c/algos/i2c-algo-palm.c
index 70f8534..89b23c6 100644
--- a/drivers/i2c/algos/i2c-algo-palm.c
+++ b/drivers/i2c/algos/i2c-algo-palm.c
@@ -44,7 +44,7 @@
 #include <linux/spinlock.h>
 #include <linux/i2c.h>
 #include <linux/i2c-algo-palm.h>
-#include "i2c-algo-palm.h"
+#include <asm/netlogic/i2c-algo-palm.h>
 
 #define DRIVER "i2c-algo-palm"
 
diff --git a/drivers/i2c/algos/i2c-algo-palm.h b/drivers/i2c/algos/i2c-algo-palm.h
deleted file mode 100644
index 7fafa4a..0000000
--- a/drivers/i2c/algos/i2c-algo-palm.h
+++ /dev/null
@@ -1,53 +0,0 @@
-/***********************************************************************
-Copyright 2003-2010 Netlogic Microsystems (“Netlogic”). All rights
-reserved.
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are
-met:
-1. Redistributions of source code must retain the above copyright
-notice, this list of conditions and the following disclaimer.
-2. Redistributions in binary form must reproduce the above copyright
-notice, this list of conditions and the following disclaimer in
-the documentation and/or other materials provided with the
-distribution.
-THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-THE POSSIBILITY OF SUCH DAMAGE.
-*****************************#NETL_2#********************************/
-/*
- *  i2c-algo-palm.c i2c driver algorithms for the BK3220 I2C Host 
- *  adapter on the RMI Phoenix System.
- *  Derived from the PCA-ISA I2C-Algo/Bus files.
- */
-
-#ifndef I2C_PALM_H
-#define I2C_PALM_H 			1
-
-#define I2C_PALM_CFG			0x00 
-#define I2C_PALM_CLKDIV			0x01 
-#define I2C_PALM_DEVADDR		0x02 
-#define I2C_PALM_ADDR			0x03
-#define I2C_PALM_DATAOUT		0x04 
-#define I2C_PALM_DATAIN			0x05 
-#define I2C_PALM_STATUS			0x06
-#define I2C_PALM_STARTXFR		0x07
-#define I2C_PALM_BYTECNT		0x08
-#define I2C_PALM_HDSTATIM		0x09
-
-/* TEST Values!! Change as required */
-#define I2C_PALM_CFG_DEF		0x000000F8	/* 8-Bit Addr + POR Values */
-#define I2C_PALM_CLKDIV_DEF		0x14A //0x00000052	
-#define I2C_PALM_HDSTATIM_DEF		0x107 //0x00000000
-
-#define I2C_PALM_STARTXFR_RD		0x00000001
-#define I2C_PALM_STARTXFR_WR		0x00000000
-
-#endif /* I2C_PALM_H */
diff --git a/drivers/i2c/busses/i2c-bk3220.c b/drivers/i2c/busses/i2c-bk3220.c
index 3eb962a..f6b6045 100644
--- a/drivers/i2c/busses/i2c-bk3220.c
+++ b/drivers/i2c/busses/i2c-bk3220.c
@@ -46,8 +46,6 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <asm/netlogic/sim.h>
 #include <asm/netlogic/i2c.h>
 
-#include "../algos/i2c-algo-palm.h"
-
 #undef 	DEBUG
 
 #define ARIZONA_RTC_BUS 1
-- 
1.7.0.4

