From 4e4ca0cb338e8ce64dfdce38fbdbb22e81c8c3d0 Mon Sep 17 00:00:00 2001
From: henry shao <hshao@netlogicmicro.com>
Date: Sun, 27 Jun 2010 01:02:16 -0700
Subject: [PATCH 066/761] add support for interrupt cpu when pushq is not
 empty

Based on Broadcom SDK 2.3.

Signed-off-by: henry shao <hshao@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/common/msgring_xlp.c |   70 +++++++++++++++++--------------
 1 file changed, 39 insertions(+), 31 deletions(-)

diff --git a/arch/mips/netlogic/common/msgring_xlp.c b/arch/mips/netlogic/common/msgring_xlp.c
index 01a2e0f..e0e71f2 100644
--- a/arch/mips/netlogic/common/msgring_xlp.c
+++ b/arch/mips/netlogic/common/msgring_xlp.c
@@ -30,7 +30,9 @@
 
 #include <linux/types.h>
 #include <linux/kernel.h>
+#include <asm/netlogic/interrupt.h>
 #include <asm/netlogic/hal/nlm_hal_fmn.h>
+#include <asm/netlogic/msgring.h>
 
 #define OUTQ_EN		0x8000000000000000ULL
 #define SPILL_EN 	0x4000000000000000ULL
@@ -41,9 +43,9 @@
 #define OQ_BASE_1K(x)    ( ( (x >> 10) & 0x1fULL) << 10)
 
 enum cpu_io_credit {
-	CPU_CREDIT		=4,
-	CPU_GMAC_TX_CREDIT	=4, 
-	CPU_GMAC_RX_CREDIT	= 4,
+	CPU_CREDIT		= 10,
+	CPU_GMAC_TX_CREDIT	= 8, 
+	CPU_GMAC_RX_CREDIT	= 8,
 	CPU_POE_CREDIT		= 4,
 	CPU_CMP_CREDIT		= 4,
 	CPU_CRYPTO_CREDIT 	= 4,
@@ -52,6 +54,7 @@ enum cpu_io_credit {
 	CPU_PCIE0_CREDIT 	= 2 
 };
 
+
 /*********************************************************************
  ********************************************************************/
 static void config_cpu_io_pushq_credit(uint8_t cpu)
@@ -67,6 +70,7 @@ static void config_cpu_io_pushq_credit(uint8_t cpu)
 	{
         	nlm_hal_write_credit( s_qid, XLP_NET_TX_VC_BASE+i,  CPU_GMAC_TX_CREDIT);
 	}
+       	nlm_hal_write_credit( s_qid, XLP_NET_TX_VC_BASE,  3*CPU_GMAC_TX_CREDIT);
 
 	// nae tx to cpu free out
 
@@ -158,7 +162,6 @@ static void config_io_io_outq_credit()
 static void config_io_cpu_pushq_credit(uint8_t cpu, uint8_t thread, uint8_t vc)
 {
 	uint8_t d_qid = cpu << 4 | thread << 2 | vc;
-	uint8_t i;
 
 	if(d_qid >=256)
 	{
@@ -199,7 +202,7 @@ void dump_outq()
 	int i;
         uint64_t val = 0;
 
-	printk("n\FMN output_q config: index	value\n");
+	printk("\nFMN output_q config: index	value\n");
         // 0 - 127 cpu push outputq , 8 cpu, each cpu has 4 threads, each thread has 4 vcs
         for( i = 0; i < 128; i++ ) { 
                 val = nlm_hal_read_outq_config( i );
@@ -292,16 +295,19 @@ static void setup_outq()
 
 	// 0 - 127 cpu push outputq , 8 cpu, each cpu has 4 threads, each thread has 4 vcs
 	q_base = 0;
-	val = OUTQ_EN|INT_EN|((uint64_t)HWM_NON_EMPTY<<55)|(((uint64_t)LVL_INT_HIGH_WM)<<53);
+	val = OUTQ_EN|INT_EN|(0ULL<<56)|(0x2ULL<<54);
+//	val = OUTQ_EN|((uint64_t)HWM_NON_EMPTY<<56)|(((uint64_t)LVL_INT_HIGH_WM)<<54);
 	for( i = 0; i < 128; i++ )
 	{
 		val |= OQ_BASE_START(q_base) |  OQ_BASE_END((q_base)) |OQ_BASE_1K(q_base) ;
 		nlm_hal_write_outq_config(i, val);
 		q_base += 32;
-//		printk("\t%d\t%d\t%llx\n", i, q_base, val);
+		if(i<4)
+		printk("\t%d\t%d\t%llx\n", i, q_base, val);
 	}
 	// 128-255 cpu pop queue 
-	val = OUTQ_EN|INT_EN|((uint64_t)HWM_NON_EMPTY<<55)|(((uint64_t)LVL_INT_HIGH_WM)<<53);
+	val = OUTQ_EN;
+//	val = OUTQ_EN|INT_EN|((uint64_t)HWM_NON_EMPTY<<56)|(((uint64_t)LVL_INT_HIGH_WM)<<54);
 	for( i = 128; i < 256; i++ ) 
 	{
 		val |= OQ_BASE_START(q_base) |  OQ_BASE_END((q_base)) |OQ_BASE_1K(q_base) ;
@@ -406,6 +412,27 @@ static void setup_outq()
 }
 
 /*********************************************************************
+ * set_msgring_interrupt 
+ *
+ * setup cp2 msgconfig register for msgring interrup vector as 6
+ * 
+ ********************************************************************/
+static void set_msgring_interrupt()
+{
+	uint32_t val;
+	/* Need write interrupt vector to cp2 msgconfig register */
+//	val = read_64bit_cp0_eimr();
+//	val |= (1 << 6);
+//        write_64bit_cp0_eimr(val);
+	
+	val =  read_32bit_cp2_register($5);
+	val &= ~(0x1f << 16);
+	val |= IRQ_MSGRING << 16;
+	write_32bit_cp2_register($5, val);
+
+}
+
+/*********************************************************************
  * nlm_hal_fmn_init
  *
  * setup 1024 outq, set credit from cpu to io,  io to io, and io to 
@@ -415,9 +442,11 @@ void nlm_hal_fmn_init( uint32_t cpu_mask)
 {
 	int thrid, i, j, k;
 	//setup outq
-	setup_outq();
-
+	
+//	set_msgring_interrupt();
+	
 	//verify out_q config
+	setup_outq();
 //	dump_outq();
 
 	//config cpu(0, 0, 0) to io credit
@@ -452,24 +481,3 @@ void nlm_hal_fmn_init( uint32_t cpu_mask)
 	config_io_io_outq_credit();
 }
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-- 
1.7.10.4

