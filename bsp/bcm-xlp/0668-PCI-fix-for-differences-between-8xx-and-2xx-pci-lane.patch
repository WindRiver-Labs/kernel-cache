From c8a9ea5c47fe94124beed91a1825858a06c0a835 Mon Sep 17 00:00:00 2001
From: Om Narasimhan <omn@broadcom.com>
Date: Mon, 28 Jan 2013 17:37:55 -0800
Subject: [PATCH 668/762] PCI : fix for differences between 8xx and 2xx pci lane configurations

A new data structure is introduced to handle the differences between
8xx and 2xx pci lane configurations

Based on Broadcom SDK 2.3.

Signed-off-by: Om Narasimhan <omn@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/pci/pci-xlp.c |   26 ++++++++++++++++++++++++--
 1 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/arch/mips/pci/pci-xlp.c b/arch/mips/pci/pci-xlp.c
index 26ce2c1..e68151f 100644
--- a/arch/mips/pci/pci-xlp.c
+++ b/arch/mips/pci/pci-xlp.c
@@ -123,8 +123,25 @@ struct xlp_plc_fn_struct {
 	struct xlp_link_struct farray[XLP_MAX_SLOTS];
 };
 
+/* We are wasting some space here. But we just cannot allocate a multi
+ * dimensional array pointer here.
+ * Also, this can be done at run time, but a static allocation is far
+ * more simple to comprehend (you can compare with PRM)
+ */
+static struct xlp_plc_fn_struct node_irqmap[NLM_MAX_CPU_NODE][XLP_PCI_LANE_CONFIG];
+static struct xlp_plc_fn_struct
+	node_irqmap_2xx[NLM_MAX_CPU_NODE][XLP_PCI_LANE_CONFIG] = {
+{
+	{0, {{XLP_PCIE_INTX_IRQ(0,0), 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}}},
+	{1, {{XLP_PCIE_INTX_IRQ(0,0), 0, 0}, {0, 0, 0},
+		{XLP_PCIE_INTX_IRQ(0,2), 0, 0}, {0, 0, 0}}},
+	{2, {{XLP_PCIE_INTX_IRQ(0,0), 0, 0}, {XLP_PCIE_INTX_IRQ(0,1), 0, 0},
+		{XLP_PCIE_INTX_IRQ(0,2), 0, 0}, {XLP_PCIE_INTX_IRQ(0,3),0,0}}},
+	{3, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}}},
+}, };
+
 static struct xlp_plc_fn_struct
-	node_irqmap[NLM_MAX_CPU_NODE][XLP_PCI_LANE_CONFIG] = {
+	node_irqmap_8xx[NLM_MAX_CPU_NODE][XLP_PCI_LANE_CONFIG] = {
 {
 	{0, {{XLP_PCIE_INTX_IRQ(0,0), 0, 0}, {0, 0, 0},
 		{XLP_PCIE_INTX_IRQ(0,2), 0, 0}, {0, 0, 0}}},
@@ -781,9 +798,14 @@ static int __init pcibios_init(void)
 	ioport_resource.start =  0;
 	ioport_resource.end   = ~0;
 
-	printk(KERN_DEBUG "Registering XLP PCIE Controller. \n");
 	/* Setting up controller specific data */
+	if (is_nlm_xlp2xx()) {
+		memcpy(node_irqmap, node_irqmap_2xx, sizeof(node_irqmap_2xx));
+	} else {
+		memcpy(node_irqmap, node_irqmap_8xx, sizeof(node_irqmap_8xx));
+	}
 	pcie_controller_init_done();
+	printk(KERN_DEBUG "Registering XLP PCIE Controller. \n");
 	register_pci_controller(&xlp_controller);
 
 	pci_bus_status = 1;
-- 
1.7.0.4

