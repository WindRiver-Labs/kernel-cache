From 99bb2eb5a6b41b327d0328ba69918937e6d944df Mon Sep 17 00:00:00 2001
From: henry shao <hshao@netlogicmicro.com>
Date: Tue, 31 Aug 2010 13:45:37 -0700
Subject: [PATCH 166/761] clean up unused psb_info struct and related files

Based on Broadcom SDK 2.3.

Signed-off-by: henry shao <hshao@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/nlm_uaccess_fs.h |    4 ++++
 arch/mips/include/asm/netlogic/xlp.h            |    3 ++-
 arch/mips/kernel/syscall.c                      |    4 ++++
 arch/mips/kernel/xlr_fast_sys_call_handler.S    |    6 ++++--
 arch/mips/netlogic/common/memory.c              |    2 ++
 arch/mips/netlogic/xlp/setup.c                  |    5 +++--
 6 files changed, 19 insertions(+), 5 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/nlm_uaccess_fs.h b/arch/mips/include/asm/netlogic/nlm_uaccess_fs.h
index 6cf9507..6b6c5aa 100644
--- a/arch/mips/include/asm/netlogic/nlm_uaccess_fs.h
+++ b/arch/mips/include/asm/netlogic/nlm_uaccess_fs.h
@@ -49,14 +49,18 @@ extern void xlr_fast_syscall_msg_read(void);
 extern void xlr_fast_syscall_perf_ctr_start(void);
 extern void xlr_fast_syscall_perf_ctr_stop(void);
 extern void xlr_fast_syscall_get_cpumasks(void);
+#if defined(CONFIG_NLM_XLR)
 extern void xlr_fast_syscall_prominfo(void);
+#endif
 extern void nlm_uaccess_fs_read_timer(void);
 extern void nlm_uaccess_fs_read_timer(void);
 extern void nlm_uaccess_fs_hard_cpuid(void);
 extern void nlm_uaccess_fs_is_big_endian(void);
 extern void nlm_uaccess_fs_is_endian_reversed(void);
 extern void nlm_uaccess_fs_uspace_64bit_ins_enabled(void);
+#if defined(CONFIG_NLM_XLR)
 extern void nlm_uaccess_fs_cpu_max_freq(void);
 #endif
+#endif
 
 #endif /* _ASM_NLM_XLR_UACCESS_H */
diff --git a/arch/mips/include/asm/netlogic/xlp.h b/arch/mips/include/asm/netlogic/xlp.h
index 0bdd580..010d43f 100644
--- a/arch/mips/include/asm/netlogic/xlp.h
+++ b/arch/mips/include/asm/netlogic/xlp.h
@@ -29,6 +29,7 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <linux/types.h>
 #include <asm/cpu.h>
 #include <asm/mipsregs.h>
+#if 0
 #define PSB_INFO_VERSION 0x0001
 
 struct psb_info {
@@ -72,7 +73,7 @@ struct psb_info {
         uint64_t bldr_envp;
         uint64_t avail_mem_map;
 };
-
+#endif
 enum {
         NETLOGIC_IO_SPACE = 0x10,
         PCIX_IO_SPACE,
diff --git a/arch/mips/kernel/syscall.c b/arch/mips/kernel/syscall.c
index 5a117c0..99f226b 100644
--- a/arch/mips/kernel/syscall.c
+++ b/arch/mips/kernel/syscall.c
@@ -74,13 +74,17 @@ unsigned long xlr_fast_sys_call_table[] = {
 	[NLM_UACCESS_FS_PERFCTR_STOP] = (unsigned long)xlr_fast_syscall_perf_ctr_stop,
 	[NLM_UACCESS_FS_READ_CPUMASKS] = (unsigned long)xlr_fast_syscall_get_cpumasks,
 	[NLM_UACCESS_FS_READ_PROCID] = (unsigned long)xlr_fast_syscall_processorId,
+#if defined(CONFIG_NLM_XLR)
 	[NLM_UACCESS_FS_PROMINFO] = (unsigned long)xlr_fast_syscall_prominfo,
+#endif
 	[NLM_UACCESS_FS_READ_TIMER] = (unsigned long)nlm_uaccess_fs_read_timer,
 	[NLM_UACCESS_FS_HARD_CPUID] = (unsigned long)nlm_uaccess_fs_hard_cpuid,
 	[NLM_UACCESS_FS_ENDIANESS] = (unsigned long)nlm_uaccess_fs_is_big_endian,
 	[NLM_UACCESS_FS_REVERSE_ENDIANESS] = (unsigned long)nlm_uaccess_fs_is_endian_reversed,
 	[NLM_UACCESS_FS_USPACE_64BIT_INS] = (unsigned long)nlm_uaccess_fs_uspace_64bit_ins_enabled,
+#if defined(CONFIG_NLM_XLR)
 	[NLM_UACCESS_FS_CPU_MAX_FREQ] = (unsigned long)nlm_uaccess_fs_cpu_max_freq,
+#endif
 #if defined(CONFIG_NLM_XLP)
 	[NLM_UACCESS_FS_MEM_READ64] = (unsigned long)nlm_uaccess_fs_mem_read64,
 	[NLM_UACCESS_FS_MEM_WRITE64] = (unsigned long)nlm_uaccess_fs_mem_write64,
diff --git a/arch/mips/kernel/xlr_fast_sys_call_handler.S b/arch/mips/kernel/xlr_fast_sys_call_handler.S
index f429454..0ff319c 100644
--- a/arch/mips/kernel/xlr_fast_sys_call_handler.S
+++ b/arch/mips/kernel/xlr_fast_sys_call_handler.S
@@ -429,6 +429,7 @@ END(nlm_uaccess_fs_mem_write32)
 
 	END(xlr_fast_syscall_processorId)
 
+#if defined(CONFIG_NLM_XLR)
 	NESTED(xlr_fast_syscall_prominfo, PT_SIZE, sp)
 
 	PTR_LA	k0, prom_info_copy
@@ -445,7 +446,7 @@ END(nlm_uaccess_fs_mem_write32)
 	eret
 
 	END(xlr_fast_syscall_prominfo)
-
+#endif
 	NESTED(nlm_uaccess_fs_read_timer, PT_SIZE, sp)
 
 #if defined(CONFIG_NLM_XLP)
@@ -496,7 +497,7 @@ END(nlm_uaccess_fs_mem_write32)
 
 	fs_eret
 	END(nlm_uaccess_fs_uspace_64bit_ins_enabled)
-
+#if defined(CONFIG_NLM_XLR)
 	/* {hi=T1, lo=T0} nlm_uaccess_fs_cpu_max_freq(void) */
 	NESTED(nlm_uaccess_fs_cpu_max_freq, PT_SIZE, sp)
 	PTR_LA k0, prom_info_copy
@@ -507,4 +508,5 @@ END(nlm_uaccess_fs_mem_write32)
 
 	fs_eret
 	END(nlm_uaccess_fs_cpu_max_freq)
+#endif
 	.set pop
diff --git a/arch/mips/netlogic/common/memory.c b/arch/mips/netlogic/common/memory.c
index 9c19b32..9e8669b 100644
--- a/arch/mips/netlogic/common/memory.c
+++ b/arch/mips/netlogic/common/memory.c
@@ -204,7 +204,9 @@ int __uncached_access(struct file *file, unsigned long addr)
 
 	/* check the address region, return uncached pages for IO space and
 	   cached page for memory space. */
+#if 0
 	return nlm_common_get_pgprot(addr);
+#endif
 }
 
 inline int valid_phys_addr_range(unsigned long addr, size_t count)
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index 2cabfc6..00f24e2 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -140,6 +140,7 @@ unsigned int nlm_shtlb = 1; /* by default shared TLB is enabled */
 #endif
 
 extern struct node_mask smp_node;
+#if 0
 extern struct psb_info *nlm_boot_info;
 struct psb_info *prom_info = NULL;
 struct psb_info prom_info_copy; /* Bootloader prom_info is saved here */
@@ -168,7 +169,6 @@ static struct physmap_info {
 	{ 0x1B , "PCIE Memory Space"},
 	{ 0xff , "Unknown type" }
 };
-struct boot_mem_map boot_physaddr_info;
 
 static char *get_psb_physmap_name(int type)
 {
@@ -202,7 +202,8 @@ int nlm_common_get_pgprot(unsigned long address)
 	}
 	return 1;
 }
-
+#endif
+struct boot_mem_map boot_physaddr_info;
 int valid_mmap_nlm_common_addr_range(unsigned long pfn)
 {
 	int i;
-- 
1.7.10.4

