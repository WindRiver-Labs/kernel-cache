From 669a5fca350881ba9d7988c8d8ff478e8afab294 Mon Sep 17 00:00:00 2001
From: Krishnamurthy D V <kmurthy@netlogicmicro.com>
Date: Mon, 26 Jul 2010 18:26:30 +0530
Subject: [PATCH 120/762] Deprecate use of "wakeup" function pointer for waking up secondary CPUs Use NMIs for now.

Based on Broadcom SDK 2.3.

Signed-off-by: Krishnamurthy D V <kmurthy@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../include/asm/mach-netlogic/kernel-entry-init.h  |    1 +
 arch/mips/netlogic/xlr/setup.c                     |   35 +++++++++++++++-
 arch/mips/netlogic/xlr/smpboot.S                   |   42 +++++++++++++++++++-
 3 files changed, 75 insertions(+), 3 deletions(-)

diff --git a/arch/mips/include/asm/mach-netlogic/kernel-entry-init.h b/arch/mips/include/asm/mach-netlogic/kernel-entry-init.h
index 9401f91..ea24e3f 100644
--- a/arch/mips/include/asm/mach-netlogic/kernel-entry-init.h
+++ b/arch/mips/include/asm/mach-netlogic/kernel-entry-init.h
@@ -48,6 +48,7 @@
 	EHB
     LA      v0, mapped_space
 	JRHB    v0
+	nop
 mapped_space:
 #else
 	mtc0	zero, CP0_WIRED
diff --git a/arch/mips/netlogic/xlr/setup.c b/arch/mips/netlogic/xlr/setup.c
index a7529c4..656039c 100644
--- a/arch/mips/netlogic/xlr/setup.c
+++ b/arch/mips/netlogic/xlr/setup.c
@@ -1517,10 +1517,40 @@ static void process_prominfo(void (*(*wakeup))(void *, void *, __u32))
 	}
 }
 
-static int wakeup_secondary_cpus(void (*wakeup)(void *, void *, __u32), struct psb_info *prom_info)
+unsigned long secondary_entry_point;
+static void prepare_wakeup(unsigned long wakeup_fun)
+{
+	void *base;
+	extern char nlm_boot_smp_nmi;
+
+	secondary_entry_point = wakeup_fun;
+
+	base = (void *)(unsigned long)0xffffffffbfc00000ULL;
+	memcpy(base, &nlm_boot_smp_nmi, 0x80);
+	
+}
+
+static int wakeup_secondary_cpus(struct psb_info *prom_info)
 {
 	__u32 wakeup_mask;
+	int i;
+	uint32_t tid, pid, ipi;
+
+	prepare_wakeup((unsigned long)secondary_cpus_bootup_func);
 
+	wakeup_mask = (__u32)prom_info->nlm_cpu_online_map & (~smp_boot.online_map);
+
+	for(i=0; i < NR_CPUS; i++) {
+		if(wakeup_mask & (1 << i)) {
+			tid = i & 0x3;
+			pid = (i >> 2) & 0x7;
+			/* Send NMI, IPI should not matter - setting to 0 here*/
+			ipi = (tid << 16) | (pid << 20) | (1 << 8);
+			pic_send_ipi(ipi);
+		}
+	}
+
+#if 0
 	if (xlr_loader_support) {
 		wakeup_mask = xlr_linux_cpu_mask | nlm_common_loader_mask;
 		if (wakeup != NULL)
@@ -1545,6 +1575,7 @@ static int wakeup_secondary_cpus(void (*wakeup)(void *, void *, __u32), struct p
 #endif
 		}
 	}
+#endif
 
 	return 0;
 }
@@ -1620,7 +1651,7 @@ setup_memory:
 
 	smp_boot.online_map = (1 << hard_smp_processor_id());
 
-	wakeup_secondary_cpus(wakeup, prom_info);
+	wakeup_secondary_cpus(prom_info);
 
 rest_prom_int:
 
diff --git a/arch/mips/netlogic/xlr/smpboot.S b/arch/mips/netlogic/xlr/smpboot.S
index 78b9ec2..8d3c5b5 100644
--- a/arch/mips/netlogic/xlr/smpboot.S
+++ b/arch/mips/netlogic/xlr/smpboot.S
@@ -46,7 +46,6 @@ END(ptr_smp_boot)
  */
 NESTED(prom_pre_boot_secondary_cpus, 16, sp)
 	SET_MIPS64
-	MAPPED_KERNEL_SETUP_TLB
 	mfc0 t0, $15, 1 #read ebase
 	andi t0, 0x1f #t0 has the processor_id()
 	PTR_LA	t1, xlr_stack_pages_temp
@@ -66,3 +65,44 @@ NESTED(prom_pre_boot_secondary_cpus, 16, sp)
 	jr t0
 	nop
 END(prom_pre_boot_secondary_cpus)
+
+NESTED(nlm_handle_boot_smp_nmi, 0, sp)
+	.set push
+	.set noat
+	.set mips64
+	.set noreorder
+
+	/* Clear the  NMI and BEV bits */
+	MFC0	k0, CP0_STATUS
+	li 	k1, 0xffb7ffff
+	and	k0, k0, k1
+	MTC0	k0, CP0_STATUS
+
+
+	PTR_LA  k1, secondary_entry_point
+	PTR_L	k0, 0(k1)
+	jr	k0
+	nop
+
+	.set pop
+END(nlm_handle_boot_smp_nmi)
+
+
+
+NESTED(nlm_boot_smp_nmi, 0, sp)
+	.set push
+	.set noat
+	.set mips64
+	.set noreorder
+	MTC0	k0, OS_KGDB_SCRATCH_REG6
+	MTC0	k1, OS_KGDB_SCRATCH_REG7
+	nop
+	nop
+
+	MAPPED_KERNEL_SETUP_TLB
+
+	PTR_LA	k0, nlm_handle_boot_smp_nmi
+	jr       k0
+	nop
+	.set pop
+END(nlm_boot_smp_nmi)
-- 
1.7.0.4

