From b3d91b0a5e1bb3e9e4577139d7b5220ceb400f5f Mon Sep 17 00:00:00 2001
From: "P. Sadik" <psadik@broadcom.com>
Date: Mon, 26 Nov 2012 18:30:27 +0530
Subject: [PATCH 756/761] bcm_xlp: CDE: Remove compilation warning.

cde: Remove compilation warning.

Based on Broadcom SDK 2.3.

Signed-off-by: P. Sadik <psadik@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/misc/nlm_cde/nlm_cde.c |  108 ++++++++++++++++++++--------------------
 1 file changed, 54 insertions(+), 54 deletions(-)

diff --git a/drivers/misc/nlm_cde/nlm_cde.c b/drivers/misc/nlm_cde/nlm_cde.c
index cdebb27..8475396 100644
--- a/drivers/misc/nlm_cde/nlm_cde.c
+++ b/drivers/misc/nlm_cde/nlm_cde.c
@@ -32,7 +32,7 @@
 #include <linux/ioport.h>	/* for request_region */
 #include <linux/delay.h>	/* for loops_per_jiffy */
 #include <linux/sched.h>
-#include <linux/ioctl.h>	
+#include <linux/ioctl.h>
 #include <asm/io.h>		/* for inb_p, outb_p, inb, outb, etc. */
 #include <asm/uaccess.h>	/* for get_user, etc. */
 #include <linux/init.h>		/* for __init, module_{init,exit} */
@@ -64,7 +64,7 @@ struct msgrng_msg {
 static int xlp_cde_major;
 int xlp_cde_open(struct inode *, struct file *);
 int xlp_cde_release(struct inode *, struct file *);
-int xlp_cde_ioctl(struct file *fptr, unsigned int type, unsigned long val);
+static long xlp_cde_ioctl(struct file *fptr, unsigned int type, unsigned long val);
 ssize_t xlp_cde_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos);
 ssize_t xlp_cde_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos);
 static int xlp_cde_mmap(struct file * filp, struct vm_area_struct * vma);
@@ -171,7 +171,7 @@ static const struct file_operations xlp_cde_fops = {
 static int config_cmp(void)
 {
   int i;
-   
+
 #ifdef CDE_DEBUG
 	printk("config_cmp \n");
 #endif
@@ -216,7 +216,7 @@ static int send_free_desc(void)
 
   // send free descriptors to cmp block
   for (i = 0; i < NUM_FREE_DESCRIPTORS; i++) {
-    if (!page_array[i].data_array)	  
+    if (!page_array[i].data_array)
 	page_array[i].data_array = get_cache_aligned_mem(FD_CMP_PAGE_SIZE);
     if (!page_array[i].data_array)	{
 	    printk("cacheline_aligned_kmalloc returmed error desc_num = %d\n", i);
@@ -271,7 +271,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
   int start = 0;
   int div;
 
- /* Number of block and number of messages are always 1. 
+ /* Number of block and number of messages are always 1.
     User is expected to send one block at a time */
   num_blk = num_desc = num_messages = 1;
   div = num_blk * num_desc;
@@ -292,8 +292,8 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
     cmp_data->src_desc[desc_idx] =
       cpu_to_be64(nlm_hal_cde_make_data_desc(0, 0, 0, 0, 0, restore, 0, length, (uint64_t)virt_to_phys(cmp_data->scratch_inf)));
 #ifdef CDE_DEBUG
-      printk("scratch=0x%p, v2p=0x%lx, scratch_desc = 0x%016llx &scratch_desc=0x%p\n", 
-	     cmp_data->scratch_inf, virt_to_phys(cmp_data->scratch_inf), cmp_data->src_desc[desc_idx], &(cmp_data->src_desc[0])); 
+      printk("scratch=0x%p, v2p=0x%lx, scratch_desc = 0x%016llx &scratch_desc=0x%p\n",
+	     cmp_data->scratch_inf, virt_to_phys(cmp_data->scratch_inf), cmp_data->src_desc[desc_idx], &(cmp_data->src_desc[0]));
 #endif
     cur_desc++;
 
@@ -316,7 +316,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
 #ifdef CDE_DEBUG
 	  printk("[%s@%d]: eof=%d, sod=%d, sob=%d, eob=%d, save=%d, restore=0, length=%d\n",
 		 __FUNCTION__, __LINE__, eof, sod, sob, eob, save, length);
-	  
+
 	  printk("[%s@%d]: cur_desc=%d, i=%d, j=%d, k=%d, &(cmp_data->src)=0x%p, src_desc[1]=0x%llx &(src_desc[1])=0x%p\n",
 		 __FUNCTION__, __LINE__,
 		 cur_desc, i, j, k, cmp_data->src, cmp_data->src_desc[cur_desc], &(cmp_data->src_desc[cur_desc]));
@@ -332,7 +332,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
     stid = nlm_hal_cde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0, 0, cmp_data->op, rtn_bkt,
 			cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
 #ifdef CDE_DEBUG
-      printk("[%s@%d]: desc_idx=%d, &(src_desc[0])=0x%p, v2p=0x%lx, i=%d, cmp_msg.msg0 = 0x%016llx\n", __FUNCTION__, __LINE__, desc_idx, cmp_data->src_desc+0, virt_to_phys(cmp_data->src_desc+0),i, cmp_msg[i].msg0); 
+      printk("[%s@%d]: desc_idx=%d, &(src_desc[0])=0x%p, v2p=0x%lx, i=%d, cmp_msg.msg0 = 0x%016llx\n", __FUNCTION__, __LINE__, desc_idx, cmp_data->src_desc+0, virt_to_phys(cmp_data->src_desc+0),i, cmp_msg[i].msg0);
 #endif
 
     desc_idx = desc_idx + cur_desc;
@@ -385,8 +385,8 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
       cpu_to_be64(nlm_hal_cde_make_data_desc(0, 0, 0, 0, 0, restore, 0, length, (uint64_t)virt_to_phys(cmp_data->scratch)));
 
 #ifdef CDE_DEBUG
-      printk("scratch=0x%p, v2p=0x%lx, scratch_desc = 0x%016llx &scratch_desc=0x%p\n", 
-	     cmp_data->scratch, virt_to_phys(cmp_data->scratch), cmp_data->src_desc[desc_idx], &(cmp_data->src_desc[0])); 
+      printk("scratch=0x%p, v2p=0x%lx, scratch_desc = 0x%016llx &scratch_desc=0x%p\n",
+	     cmp_data->scratch, virt_to_phys(cmp_data->scratch), cmp_data->src_desc[desc_idx], &(cmp_data->src_desc[0]));
 #endif
 
     cur_desc++;
@@ -409,7 +409,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 		save = ( (eob == 1) & (eof == 0)) ;
 		cmp_data->src_desc[cur_desc+num_desc] = cpu_to_be64(nlm_hal_cde_make_data_desc ( eof, 3, 1/*sod*/, sob, save, 0, eob, length, (uint64_t)virt_to_phys(cmp_data->src + start)));
 #ifdef CDE_DEBUG
-	  printf("cur_desc = %0d, i = %0d, j = %0d, k = %0d, src_desc[%0d] = 0x%016llx \n", 
+	  printf("cur_desc = %0d, i = %0d, j = %0d, k = %0d, src_desc[%0d] = 0x%016llx \n",
 		cur_desc, i, j, k, cur_desc+num_desc, (long long unsigned int)cmp_data->src_desc[cur_desc+num_desc]);
 #endif
 	}
@@ -417,7 +417,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 #ifdef CDE_DEBUG
 	  printk("[%s@%d]: eof=%d, sod=%d, sob=%d, eob=%d, save=%d, restore=0, length=%d\n",
 		 __FUNCTION__, __LINE__, eof, sod, sob, eob, save, length);
-	  
+
 	  printk("[%s@%d]: cur_desc=%d, i=%d, j=%d, k=%d, &(cmp_data->src)=0x%p, src_desc[1]=0x%llx &(src_desc[1])=0x%p\n",
 		 __FUNCTION__, __LINE__,
 		 cur_desc, i, j, k, cmp_data->src, cmp_data->src_desc[cur_desc], &(cmp_data->src_desc[cur_desc]));
@@ -437,7 +437,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 			cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
 #ifdef CDE_DEBUG
     printk("[%s@%d]: desc_idx=%d, &(src_desc[0])=0x%p, v2p=0x%lx, i=%d, cmp_msg.msg0 = 0x%016llx\n",
-	 __FUNCTION__, __LINE__, desc_idx, cmp_data->src_desc+0, virt_to_phys(cmp_data->src_desc+0),i, cmp_msg[i].msg0); 
+	 __FUNCTION__, __LINE__, desc_idx, cmp_data->src_desc+0, virt_to_phys(cmp_data->src_desc+0),i, cmp_msg[i].msg0);
 #endif
 
     desc_idx = desc_idx + cur_desc;
@@ -514,7 +514,7 @@ static int nlm_hal_cde_read_cmp_msg(char *buffer, uint64_t payload)
 }
 
 /* Due compiler warning it is declraed globally */
-struct msgrng_msg msg_list_g[MAX_NUM_MESSAGES]; 
+struct msgrng_msg msg_list_g[MAX_NUM_MESSAGES];
 static void
 nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
         uint32_t size, uint32_t code,
@@ -522,8 +522,8 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
         uint64_t msg2, uint64_t msg3, void *data)
 {
   struct msgrng_msg *msg, temp_msg;
-  int last = 0; 
-  int msg_index = 0; 
+  int last = 0;
+  int msg_index = 0;
   int offset = cmp_data->target_size;
 
 #ifdef CDE_DEBUG
@@ -534,13 +534,13 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
   msg->msg0 = msg0;
   msg->msg1 = msg1;
 
-  last = ((msg->msg0 >> 63) & 0x1ULL); 
-  
+  last = ((msg->msg0 >> 63) & 0x1ULL);
+
 #ifdef CDE_DEBUG
-  printk("[%s@%d]: last = %d offset = %d target_size = %d\n", __FUNCTION__, __LINE__, last, offset, cmp_data->target_size); 
+  printk("[%s@%d]: last = %d offset = %d target_size = %d\n", __FUNCTION__, __LINE__, last, offset, cmp_data->target_size);
 #endif
-    
-  offset = cmp_data->target_size; 
+
+  offset = cmp_data->target_size;
   cmp_data->target_size += nlm_hal_cde_read_cmp_msg((char *) cmp_data->target + offset, msg->msg1);
 
 #ifdef CDE_DEBUG
@@ -550,7 +550,7 @@ nlm_xlp_cde_msgring_handler(uint32_t vc, uint32_t src_id,
 
   memcpy((void *)&msg_list_g[msg_index++],(void *)msg, sizeof(struct msgrng_msg));
 
-  return_free_descriptors(msg_list_g, msg_index); 
+  return_free_descriptors(msg_list_g, msg_index);
 #ifdef CDE_DEBUG
   printk("[\n%s@%d]:end of phnx_msgring_comp_int_handler\n", __FUNCTION__, __LINE__);
 #endif
@@ -567,10 +567,10 @@ cmp_data_t* nlm_cde_init()
   if (! cmp_data->src)	{
 	  printk("kmalloc returns Error : cmp_data->src\n");
 	  kfree(cmp_data);
-	  
+
 	  return NULL;
   }
-	  
+
   cmp_data->target = (unsigned char*)__get_free_pages(GFP_KERNEL, get_order(MAX_BUFFER_SIZE));
   if (! cmp_data->target)	{
 	  printk("kmalloc returns Error : cmp_data->target\n");
@@ -605,19 +605,19 @@ cmp_data_t* nlm_cde_init()
   if(cde_mem_size_5 < PAGE_SIZE) cde_mem_size_5 = PAGE_SIZE;
 
   cde_input_mem = cde_mem_start_1 = (unsigned char*)__get_free_pages(GFP_KERNEL, get_order(cde_mem_size_1));
-  if(cde_mem_start_1 == NULL) 
+  if(cde_mem_start_1 == NULL)
   {
     printk("ERROR: __get_free_pages failed for %d\n",cde_mem_size_1);
     return NULL;
   }
   cde_output_mem = cde_mem_start_2 = (unsigned char*)__get_free_pages(GFP_KERNEL, get_order(cde_mem_size_2));
-  if(cde_mem_start_2 == NULL) 
+  if(cde_mem_start_2 == NULL)
   {
     printk("ERROR: __get_free_pages failed for %d\n",cde_mem_size_2);
     return NULL;
   }
   cde_inf_input_mem = cde_mem_start_3 = (unsigned char*)__get_free_pages(GFP_KERNEL, get_order(cde_mem_size_3));
-  if(cde_mem_start_3 == NULL) 
+  if(cde_mem_start_3 == NULL)
   {
     printk("ERROR: __get_free_pages failed for %d\n",cde_mem_size_3);
     return NULL;
@@ -629,13 +629,13 @@ cmp_data_t* nlm_cde_init()
     return NULL;
   }
   cde_mem_start = cde_mem_start_5 = (unsigned char*)__get_free_pages(GFP_KERNEL, get_order(cde_mem_size_5));
-  if(cde_mem_start_5 == NULL) 
+  if(cde_mem_start_5 == NULL)
   {
     printk("ERROR: __get_free_pages failed for %d\n",cde_mem_size_5);
     return NULL;
   }
   cde_inf_mem_start = cde_mem_start + sizeof(struct nlm_cde_op) + 2 * sizeof(unsigned int);
-  
+
   memset(cmp_data->src, 0, MAX_INPUT_BUFFER_SIZE);
   memset(cmp_data->target, 0, MAX_BUFFER_SIZE);
 
@@ -665,15 +665,15 @@ int xlp_cde_open(struct inode *inode, struct file *filp)
 void nlm_cde_cleanup(cmp_data_t *cmp_data)
 {
   int i;
-  if (cmp_data->src)  
+  if (cmp_data->src)
 	free_pages ((ulong)cmp_data->src, get_order (MAX_INPUT_BUFFER_SIZE));
-  if (cmp_data->target)  
+  if (cmp_data->target)
 	free_pages ((ulong)cmp_data->target, get_order (MAX_BUFFER_SIZE));
-  if (cmp_data->src_desc)  
+  if (cmp_data->src_desc)
 	  kfree(cmp_data->src_desc);
-  if (cmp_data->scratch)  
+  if (cmp_data->scratch)
 	  kfree(cmp_data->scratch);
-  if (cmp_data->scratch_inf)  
+  if (cmp_data->scratch_inf)
 	  kfree(cmp_data->scratch_inf);
 
   free_pages((ulong)cde_mem_start_1, get_order(cde_mem_size_1));
@@ -684,7 +684,7 @@ void nlm_cde_cleanup(cmp_data_t *cmp_data)
 
   cmp_data->src = NULL;
   cmp_data->target = NULL;
-  cmp_data->src_desc = NULL; 
+  cmp_data->src_desc = NULL;
   cmp_data->scratch = NULL;
   cmp_data->scratch_inf = NULL;
 
@@ -695,7 +695,7 @@ void nlm_cde_cleanup(cmp_data_t *cmp_data)
     if (page_array[i].data_array)	{
 	free_cache_aligned_mem((void*)page_array[i].data_array);
 	page_array[i].data_array = NULL;
-    }	
+    }
   }
 }
 
@@ -716,28 +716,28 @@ static int xlp_cde_mmap(struct file * filp, struct vm_area_struct * vma)
 	pgprot_val (vma->vm_page_prot) &= ~_CACHE_MASK;
 	pgprot_val (vma->vm_page_prot) |= _CACHE_CACHABLE_COW;
 
-	
+
 	cde_pfn_addr = ((uint64_t)cde_mem_start_1 >> PAGE_SHIFT);
-	result = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_1, 
+	result = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_1,
 								vma->vm_page_prot);
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_1);
 
 	cde_pfn_addr = ((uint64_t)cde_mem_start_2 >> PAGE_SHIFT);
-	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_2, 
+	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_2,
 								vma->vm_page_prot);
 
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_2);
 	cde_pfn_addr = ((uint64_t)cde_mem_start_3 >> PAGE_SHIFT);
-	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_3, 
+	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_3,
 								vma->vm_page_prot);
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_3);
 	cde_pfn_addr = ((uint64_t)cde_mem_start_4 >> PAGE_SHIFT);
-	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_4, 
+	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_4,
 								vma->vm_page_prot);
 
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_4);
 	cde_pfn_addr = ((uint64_t)cde_mem_start_5 >> PAGE_SHIFT);
-	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_5, 
+	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_5,
 								vma->vm_page_prot);
 	vma->vm_start = vm_start;
 	if (result) return -EAGAIN;
@@ -746,7 +746,7 @@ static int xlp_cde_mmap(struct file * filp, struct vm_area_struct * vma)
 }
 
 int xlp_cde_release(struct inode *inode, struct file *filp)
-{ 
+{
   cmp_data->target_size = 0;
   cmp_data->offset = 0;
   memset(cmp_data->scratch, 0,  SCRATCH_SIZE);
@@ -797,10 +797,10 @@ ssize_t xlp_cde_read(struct file *filp, char __user *buf,
 }
 
 unsigned int nlm_cde_send_request(cmp_data_t *cmp_data, unsigned int op,
-			unsigned int type, 
-			unsigned int sof, 
-			unsigned int eof, 
-			unsigned char *src_buf, 
+			unsigned int type,
+			unsigned int sof,
+			unsigned int eof,
+			unsigned char *src_buf,
 			unsigned int size)
 {
   int i;
@@ -852,7 +852,7 @@ ssize_t xlp_cde_write(struct file *filp, const char __user *buf,
 }
 
 
-int xlp_cde_ioctl(struct file *filp,
+static long xlp_cde_ioctl(struct file *filp,
 	      unsigned int cmd, unsigned long arg)
 {
   int err = 0, i = 0;
@@ -898,7 +898,7 @@ int xlp_cde_ioctl(struct file *filp,
   do{
     size = nlm_cde_receive_response(cmp_data, (unsigned char*)output_mem, output_size);
     i++;
-  }while(size == 0 && i < 0xffffff); 
+  }while(size == 0 && i < 0xffffff);
   *(unsigned int*)(mem_start + sizeof(struct nlm_cde_op) + sizeof(unsigned int)) = size;
 //printk("Read %d byte of data\n", size);
 //dump_buffer(cmp_data->scratch_inf, SCRATCH_SIZE, "Inf Scratch:");
@@ -923,11 +923,11 @@ static void test()
   int i = 0;
   unsigned int input_size = 0, output_size = 0, size;
   unsigned char *input_mem, *output_mem, *mem_start;
-  
+
   input_mem = cde_inf_input_mem;
   output_mem = cde_inf_output_mem;
   mem_start = cde_inf_mem_start;
-  
+
   input_size = sizeof(src_gz_data)/2;//200;
   output_size = MAX_BUFFER_SIZE;
   for(i = 0; i < (input_size*2); i=i+2)
@@ -941,7 +941,7 @@ static void test()
   do{
     size = nlm_cde_receive_response(cmp_data, (unsigned char*)output_mem, output_size);
     i++;
-  }while(size == 0 && i < 0xffffff); 
+  }while(size == 0 && i < 0xffffff);
   printk("Read %d byte of data\n", size);
 //dump_buffer(output_mem, size, "output:");
 
@@ -995,7 +995,7 @@ static int __init xlp_cde_init(void)
 
     nlm_hal_write_cde_reg(CMP_REG_RESET_REG(i), 0x01);
     nlm_hal_write_cde_reg(CMP_REG_RESET_REG(i), 0x00);
-  }  
+  }
   /*TEMP*/
   nlm_cde_init();
 }
-- 
1.7.10.4

