From 55fd644eac67f77cd3952d8b7eb9f0f649c5af4e Mon Sep 17 00:00:00 2001
From: Anurag <anurag.gopinath@broadcom.com>
Date: Sun, 21 Oct 2012 00:19:36 +0530
Subject: [PATCH 607/761] CPU : Add support for XLP2XX

Add support for XLP2XX

Based on Broadcom SDK 2.3.

Signed-off-by: Anurag <anurag.gopinath@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/mach-netlogic/xlp-mmu.h |    2 +-
 arch/mips/netlogic/xlp/cpu_control_asm.S      |   72 +++++++++++++++++++++++++
 arch/mips/netlogic/xlp/pic/xlp_irq_map.c      |    4 +-
 3 files changed, 75 insertions(+), 3 deletions(-)

diff --git a/arch/mips/include/asm/mach-netlogic/xlp-mmu.h b/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
index f59507e..8b91aaf 100644
--- a/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
+++ b/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
@@ -119,7 +119,7 @@ static inline void nlm_flush_l1_dcache_line(uint32_t index, uint32_t maxindex, u
 		"       andi $11, 0x1                   \n"
 		"       bnez $11, 3b                    \n"
 		"	nop				\n"
-		"	addi %0, 1			\n"
+		"	addi %0, 0x20			\n"
 		"	bne  %1, %0, 1b			\n"
 		"	nop				\n"
                 "       .set pop                        \n"
diff --git a/arch/mips/netlogic/xlp/cpu_control_asm.S b/arch/mips/netlogic/xlp/cpu_control_asm.S
index 01f3b61..0d5dd7a 100644
--- a/arch/mips/netlogic/xlp/cpu_control_asm.S
+++ b/arch/mips/netlogic/xlp/cpu_control_asm.S
@@ -107,6 +107,76 @@
 	.set pop
 .endm
 
+.macro	if_xlp2xx_a0_then_disable_2way_l1_dcache
+	.set push
+	.set noreorder
+
+        mfc0    t0,$15,0
+        andi    t0,t0,0xffff
+        addiu   t0,t0,-0x1200
+        bne     t0,$0,12f
+        nop
+
+	li    t0, 0x80000000
+	li    t1, 0x80010000
+11:    cache 1 ,0(t0)
+	addiu t0, t0, 32
+	sub   t2, t1, t0
+	bnez  t2, 11b
+	nop
+
+/* LSU Defature 0x304: 0x7a406038
+ *------7
+ * 31:0 SEU Speculative Unmap Enable
+ * 30:1 EUL Enable Unaligned load/Store Operation
+ * 29:1 HLFR Hold LMQ Full Retry
+ * 28:1 HTR  Hold TLB Retry
+ *------A
+ * 27:1 HLR Hold LMQ Retry
+ * 26:0 HPP Hardware Prefretch hard Partition
+ * 25:1 L2HPT1 L2 Hardware Prefetch Threshold.
+ * 24:0 L2HPT0 00:no limit; 01:>=5; 10:>=9; 11:>=12
+ *------4
+ * 23:0 L2 Hardware Prefetch Enable
+ * 22:1 L1HPT1 L1 Hardware Prefetch Enable
+ * 21:0 L1HPT0 00:no limit; 01:>=5; 10:>=9; 11:>=12
+ * 20:0 L1HPE L1 Hardware Prefetch Enable
+ *------0
+ * 19:0 LIPD load instruction prefect disable
+ * 18:0 RZ_18 Always read as zero; writes have no effect.
+ * 17:0 RZ_17 Always read as zero; writes have no effect.
+ * 16:0 Way3 disable
+ *------6
+ * 15:0 Way2 disable
+ * 14:1 Way1 disable
+ * 13:1 Way0 disable
+ * 12:0 RZ_12
+ *------0
+ * 11:0 RZ_11
+ * 10:0 RZ_10
+ *  9:0 RZ_9
+ *  8:0 RZ_8
+ *------3
+ *  7:0 RZ_7
+ *  6:0 RZ_6
+ *  5:1 S1RCM Stage-1 Retry Count Mask
+ *  4:1 S1RCM
+ *------8
+ *  3:1 S1RCM
+ *  2:0 S1RCM
+ *  1:0 S1RCM
+ *  0:0 RZ_0
+ */
+	li      t0, 0x304
+	li      t1, 0x7a406038
+	mtcr    t1, t0
+	ehb
+12:
+	nop
+	.set pop
+.endm
+
+
 .macro	flush_l1_dcache
 	.set push
 	.set noreorder
@@ -205,6 +275,8 @@ EXPORT(__boot_siblings)				/* T0 of every core in every node starts from here */
 
 	flush_l1_dcache
 
+	if_xlp2xx_a0_then_disable_2way_l1_dcache
+
 	mfc0    t3, CP0_EBASE, 1
 	srl     t3, t3 , 2
 	and     t3, t3 , 0x7  			/* t3 contains the core number */
diff --git a/arch/mips/netlogic/xlp/pic/xlp_irq_map.c b/arch/mips/netlogic/xlp/pic/xlp_irq_map.c
index 98046e6..9b581ba 100644
--- a/arch/mips/netlogic/xlp/pic/xlp_irq_map.c
+++ b/arch/mips/netlogic/xlp/pic/xlp_irq_map.c
@@ -373,7 +373,7 @@ static struct irq_map_elem irq_map_3xx[XLP_IRQS_PER_NODE] = {
         {XLP_IRQ_RESERVED_MAX + 32, {0,0,0,0}}, /*XLP_TCB_IDX :159 */
 };
 
-#if 0
+#if 1
 static struct irq_map_elem irq_map_2xx[XLP_IRQS_PER_NODE] = {
         {XLP_IRQ_RESERVED_MAX + 1, {0,0,0,0}}, /*XLP_WD_IDX(0):	0 */
         {XLP_IRQ_RESERVED_MAX + 1, {0,0,0,0}}, /*XLP_WD_IDX(1):	1 */
@@ -624,7 +624,7 @@ static void xlp_setup_irqmap(struct irq_map_elem **map, struct rvec_map_elem *rv
 		*map = irq_map_8xx;
 	} else if (is_nlm_xlp3xx()) {
 		*map = irq_map_3xx;
-#if 0
+#if 1
 	} else if (is_nlm_xlp2xx()) {
 		*map = irq_map_2xx;
 #endif
-- 
1.7.10.4

