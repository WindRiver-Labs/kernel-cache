From d7c31e0a11bb48038ebda847ddbb27a95dd33c30 Mon Sep 17 00:00:00 2001
From: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Date: Thu, 21 Oct 2010 13:34:04 -0700
Subject: [PATCH 207/761] Disable PGW by default, moved utility cpumask to
 netlogic specific dir, memory fence before IPIs

Based on Broadcom SDK 2.3.

Signed-off-by: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/cpumask.h |   21 +++++++++++++++++++++
 arch/mips/netlogic/xlp/on_chip.c         |    1 -
 arch/mips/netlogic/xlp/setup.c           |    4 +++-
 arch/mips/netlogic/xlp/smp.c             |    2 ++
 init/main.c                              |   20 +-------------------
 5 files changed, 27 insertions(+), 21 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/cpumask.h b/arch/mips/include/asm/netlogic/cpumask.h
index 8643d44..b72ae27 100644
--- a/arch/mips/include/asm/netlogic/cpumask.h
+++ b/arch/mips/include/asm/netlogic/cpumask.h
@@ -2,6 +2,7 @@
 #define _ASM_NETLOGIC_CPUMASK_H
 
 #include <linux/cpumask.h>
+#include <linux/sched.h>
 
 #define CPUMASK_BUF 256
 
@@ -32,4 +33,24 @@ static __inline__ void uint32_to_cpumask(cpumask_t *cpumask, unsigned int mask)
 	}
 }
 
+static __inline__ void sched_bindto_save_affinity(int cpu, struct cpumask *mask)
+{
+	struct cpumask node0cpu0mask;
+
+	/* Save the current affinity mask */
+	sched_getaffinity(0, mask);
+
+	/* Force the process to run on the specified cpu */
+	cpumask_clear(&node0cpu0mask);
+	cpumask_set_cpu(cpu, &node0cpu0mask);
+
+	sched_setaffinity(0, &node0cpu0mask);
+}
+
+static __inline__ void sched_bindto_restore_affinity(struct cpumask *mask)
+{
+	sched_setaffinity(0, mask);
+}
+
+
 #endif /* _ASM_NETLOGIC_CPUMASK_H */
diff --git a/arch/mips/netlogic/xlp/on_chip.c b/arch/mips/netlogic/xlp/on_chip.c
index 5f7cb0d..69b0d99 100644
--- a/arch/mips/netlogic/xlp/on_chip.c
+++ b/arch/mips/netlogic/xlp/on_chip.c
@@ -52,7 +52,6 @@ extern void nlm_cpu_stat_update_msgring_int(void);
 extern void nlm_cpu_stat_update_msgring_cycles(__u32 cycles);
 extern void nlm_cpu_stat_update_msgring_pic_int(void);
 
-uint32_t hard_cpu_online_map = 0;
 uint32_t msgring_global_thread_mask = 0;
 
 /* make this a read/write spinlock */
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index bb044eb..31b61e8 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -210,7 +210,7 @@ int valid_mmap_nlm_common_addr_range(unsigned long pfn)
 
 const char *get_system_type(void)
 {
-	return "Netlogic XLP SIM";
+	return "Netlogic XLP SoC";
 }
 
 static void ptr_linux_exit(void)
@@ -589,6 +589,8 @@ void __init prom_init(void)
 {
 	setup_mapped_kernel_tlbs(TRUE, TRUE);
 
+        strcat(arcs_cmdline, " disable_pgwalker ");
+
 	fdt_process();
 
 	xen_init();
diff --git a/arch/mips/netlogic/xlp/smp.c b/arch/mips/netlogic/xlp/smp.c
index 2acce0d..e15e2c0 100644
--- a/arch/mips/netlogic/xlp/smp.c
+++ b/arch/mips/netlogic/xlp/smp.c
@@ -76,6 +76,8 @@ void nlm_send_ipi_single(int cpu, unsigned int action)
         } else
 		return;
 
+	smp_mb();
+
         nlm_hal_pic_send_ipi(0, (ipi & 0x3f), node, cpu);
 }
 
diff --git a/init/main.c b/init/main.c
index 5bdb0f6..9caced7 100644
--- a/init/main.c
+++ b/init/main.c
@@ -805,25 +805,7 @@ static void run_init_process(const char *init_filename)
 	kernel_execve(init_filename, argv_init, envp_init);
 }
 
-static __inline__ void sched_bindto_save_affinity(int cpu, struct cpumask *mask)
-{
-	struct cpumask node0cpu0mask;
-
-	/* Save the current affinity mask */
-	sched_getaffinity(0, mask);
-
-	/* Force the process to run on the specified cpu */
-	cpumask_clear(&node0cpu0mask);
-	cpumask_set_cpu(cpu, &node0cpu0mask);
-
-	sched_setaffinity(0, &node0cpu0mask);
-}
-
-static __inline__ void sched_restore_affinity(struct cpumask *mask)
-{
-	sched_setaffinity(0, mask);
-}
-
+#include <asm/netlogic/cpumask.h>
 /* This is a non __init function. Force it to be noinline otherwise gcc
  * makes it inline to init() and it becomes part of init.text section
  */
-- 
1.7.10.4

