From bd6927d331886910aae37d9e88aa83255750953b Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Fri, 9 Mar 2012 10:34:49 +0530
Subject: [PATCH 727/762] bcm_xlp: SAE: Cryptolib changes for tcmalloc library

Based on Broadcom SDK 2.3.

Signed-off-by: Hareesh R <hareeshr@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/sae/cryptoapi.c |   12 +++++-
 drivers/crypto/sae/nlmcrypto.h |   81 +++++++++++++++++++++++++---------------
 2 files changed, 62 insertions(+), 31 deletions(-)

diff --git a/drivers/crypto/sae/cryptoapi.c b/drivers/crypto/sae/cryptoapi.c
index fcb4d3a..19457bf 100644
--- a/drivers/crypto/sae/cryptoapi.c
+++ b/drivers/crypto/sae/cryptoapi.c
@@ -90,7 +90,9 @@ static inline int crypto_async_push_msg(struct nlm_crypto_ctx *ctx)
 	if(fifo_full(ctx->mtail, ctx->max_msgs, ctx->mhead))
 		return NLM_CRYPTO_EBUSY;
 	ctx->mtail = (ctx->mtail + 1) % ctx->max_msgs;
+#ifdef NLM_CRYPTO_LINUX_U
 	ctx->req[ctx->mtail].msg[NLM_CRYPTO_REQ_RSPIDX] = ctx->rsp->msg[ctx->mtail][NLM_CRYPTO_RSP_RSPIDX];
+#endif
 	ctx->rsp_pend++;
 	return ctx->mtail;
 }
@@ -101,8 +103,10 @@ static inline int crypto_async_pop_msg(struct nlm_crypto_ctx *ctx, void **ctrl,
 	if(fifo_empty(ctx->mtail, ctx->mhead))
 		return 0;
 	tmp = (ctx->mhead + 1) % ctx->max_msgs;
+#ifdef NLM_CRYPTO_LINUX_U
 	if(ctx->req[tmp].msg[NLM_CRYPTO_REQ_RSPIDX] == ctx->rsp->msg[tmp][NLM_CRYPTO_RSP_RSPIDX])
 	       return 0;	
+#endif
 	ctx->mhead = tmp;
 	ctx->rsp_pend--;
 	if(ctrl)
@@ -782,8 +786,12 @@ cont_poll:
 		ctx->req[rv].msg[1] = (uint64_t)param;
 		ctx->req[rv].msg[2] = (uint64_t)arg;
 
+#ifdef NLM_CRYPTO_LINUX_U
 		msg2 = gen_msg_2(ctx, rv);
-		nlm_dbg_print("Do op msg3 %llx\n", (unsigned long long)msg2);
+#else
+		msg2 = crypto_virt_to_phys(ctx) | ((uint64_t)rv << NLM_CRYPTO_ASYNC_MSG_OUT_OFF);
+#endif
+		nlm_dbg_print("Do op msg2 %llx\n", (unsigned long long)msg2);
 		xlp_message_send_block_fast_3(0, dstvc_base, msg0, msg1, msg2);
 	}
 
@@ -849,6 +857,8 @@ int nlm_crypto_aync_callback(enum nlm_crypto_op_type_t type, unsigned long long
 		ctx = crypto_phys_to_virt(msg1 & 0xffffffffffULL);
 	}
 
+	nlm_dbg_print("%s in type %d instance %d ctx %lx func %lx\n", 
+			__FUNCTION__, type, instance, (long)ctx, (long)ctx->async_callback);
 	ctrl = (void *)ctx->req[instance].msg[0];
 	param = (void *)ctx->req[instance].msg[1];
 	arg = (void *)ctx->req[instance].msg[2];
diff --git a/drivers/crypto/sae/nlmcrypto.h b/drivers/crypto/sae/nlmcrypto.h
index da75ddc..57e50ad 100644
--- a/drivers/crypto/sae/nlmcrypto.h
+++ b/drivers/crypto/sae/nlmcrypto.h
@@ -371,6 +371,13 @@ struct nlm_crypto_pkt_param {
 	unsigned long long segment[1][2];
 };
 
+#define NLM_CRYPTO_SEGS_ADDR_OFF 	0
+#define NLM_CRYPTO_SEGS_LEN_OFF 	48
+/* used internally */
+struct nlm_crypto_pkt_seg_desc {
+	unsigned long long src;
+	unsigned long long dst;
+};
 
 static inline int nlm_crypto_getnibble(unsigned char a) 
 { 
@@ -563,49 +570,63 @@ static inline void nlm_crypto_fill_auth_pkt_param(
 * @brief Top level function for generating packet desc4 from source segments
 * @ingroup crypto
 * - param : pointer to the param structure
-* - seg : starting segment
-* - input : segment start address
-* - inlen : segment length
+* - s_seg : starting segment
+* - max_seg : maximum segments
+* - input : data start address
+* - inlen : data length
 */
 static inline unsigned int nlm_crypto_fill_src_seg(struct nlm_crypto_pkt_param *param,  
-		int seg, unsigned char *input, unsigned int inlen)
+		unsigned int s_seg, unsigned int max_segs, unsigned char *input, unsigned int inlen)
 {
-	unsigned int off = 0, len = 0;
-	unsigned int remlen = inlen;
-
-	for(; remlen > 0;) {
-		len = remlen > NLM_CRYPTO_MAX_SEG_LEN ? NLM_CRYPTO_MAX_SEG_LEN : remlen;
+	unsigned long long sval = 0ULL;
+	
+	return (crypto_fill_pkt_seg_paddr_len(input, inlen,  (struct nlm_crypto_pkt_seg_desc *)&param->segment[s_seg],
+			0, max_segs - s_seg,
+			1, 0,
+			sval, 0x0ULL) + s_seg);
 
-		param->segment[seg][0] = ccpu_to_be64(nlm_crypto_form_pkt_desc4(len,  crypto_virt_to_phys((input + off))));
-		remlen -= len;
-		off += len;
-		seg++;
-	}
-	return seg;
 }
 
 /**
 * @brief Top level function for generating packet desc5 from cipher destination segments
 * @ingroup crypto
 * - param : pointer to the param structure
-* - seg : starting segment
-* - output : segment start address
-* - outlen : segment length
+* - s_seg : starting segment
+* - max_segs : maximum segments
+* - output : output start address
+* - outlen : output length
 */
 static inline unsigned int nlm_crypto_fill_dst_seg(struct nlm_crypto_pkt_param *param, 
-		int seg, unsigned char *output, unsigned int outlen)
+		unsigned int s_seg, unsigned int max_segs, unsigned char *output, unsigned int outlen)
 {
-	unsigned int off = 0, len = 0;
-	unsigned int remlen = outlen;
-
-	for(; remlen > 0;) {
-		len = remlen > NLM_CRYPTO_MAX_SEG_LEN ? NLM_CRYPTO_MAX_SEG_LEN : remlen;
-		param->segment[seg][1] = ccpu_to_be64(nlm_crypto_form_pkt_desc5(len, 1, 0, crypto_virt_to_phys(output + off)));
-		remlen -= len;
-		off += len;
-		seg++;
-	}
-	return seg;
+	/* By giving length 1, the length field will be cleared, Address and length gets modified in the below rtn */
+	unsigned long long dval = nlm_crypto_form_pkt_desc5(1, 1, 0, 0);
+	return (crypto_fill_pkt_seg_paddr_len(output, outlen,  (struct nlm_crypto_pkt_seg_desc *)&param->segment[s_seg],
+			0, max_segs - s_seg,
+			0, 1,
+			0x0ULL, dval) + s_seg);
+}
+
+/**
+* @brief Top level function for generating packet desc4 & desc5 from cipher destination segments
+* @ingroup crypto
+* - param : pointer to the param structure
+* - s_seg : starting segment
+* - max_segs : maximum segments
+* - output : output start address
+* - outlen : output length
+*/
+
+static inline unsigned int nlm_crypto_fill_src_dst_seg(struct nlm_crypto_pkt_param *param, 
+		unsigned int s_seg, unsigned int max_segs, unsigned char *output, unsigned int outlen)
+{
+	unsigned long long sval = 0ULL;
+	/* By giving length 1, the length field will be cleared, Address and length gets modified in the below rtn */
+	unsigned long long dval = nlm_crypto_form_pkt_desc5(1, 1, 0, 0);
+	return (crypto_fill_pkt_seg_paddr_len(output, outlen,  (struct nlm_crypto_pkt_seg_desc *)&param->segment[s_seg],
+			0, max_segs - s_seg,
+			1, 1,
+			sval, dval) + s_seg);
 }
 #endif
 
-- 
1.7.0.4

