From 084302a3d748ccc94df4a7333a4563216d43cb81 Mon Sep 17 00:00:00 2001
From: Om Narasimhan <onarasimhan@netlogicmicro.com>
Date: Fri, 9 Sep 2011 14:25:50 -0700
Subject: [PATCH 330/761] Common routine to get CPU frequency

Removed storm/xlp specific routines to get cpu frequency. Created a single
function to get running cpu frequency.

Based on Broadcom SDK 2.3.

Signed-off-by: Om Narasimhan <onarasimhan@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../asm/netlogic/xlp8xx/cpu_control_macros.h       |    4 ++-
 arch/mips/include/asm/netlogic/xlp8xx/xlp_sys.h    |    1 +
 arch/mips/kernel/proc.c                            |    4 +--
 arch/mips/netlogic/xlp/cpu_control.c               |   19 +++++++------
 arch/mips/netlogic/xlp/setup.c                     |   30 ++------------------
 arch/mips/netlogic/xlp/xlp-cpufreq.c               |    3 +-
 6 files changed, 19 insertions(+), 42 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/xlp8xx/cpu_control_macros.h b/arch/mips/include/asm/netlogic/xlp8xx/cpu_control_macros.h
index 24ec6f9..ea85462 100644
--- a/arch/mips/include/asm/netlogic/xlp8xx/cpu_control_macros.h
+++ b/arch/mips/include/asm/netlogic/xlp8xx/cpu_control_macros.h
@@ -20,6 +20,8 @@ void enable_cpus(unsigned int, unsigned int);
 u32 get_core_dfs(int);
 u32 change_cpu_freq(int, int);
 #define get_cpu_freq_masked(cpu_num, mask)\
-	(get_cpu_freq(cpu_num) & (mask))
+	((get_cpu_freq(cpu_num)/1000ULL) & (mask))
+#define XLP_FREQ_MASK	(0xfffffff0)
+#define XLP_CPU0	0
 #endif	// __ASSEMBLY__
 #endif /* __CPUCONTROL_MACROS_H__ */
diff --git a/arch/mips/include/asm/netlogic/xlp8xx/xlp_sys.h b/arch/mips/include/asm/netlogic/xlp8xx/xlp_sys.h
index 43ab668..a6453de 100644
--- a/arch/mips/include/asm/netlogic/xlp8xx/xlp_sys.h
+++ b/arch/mips/include/asm/netlogic/xlp8xx/xlp_sys.h
@@ -105,6 +105,7 @@
 #define SYS_PWRON_DIVF(x) ( (x >> 10) & 0x7f)
 #define SYS_PWRON_DIVR(x) ( (x >> 8) & 0x3)
 #define SYS_CORE_DFS(x,y) ( (x >> (y*4) ) & 0xf)
+#define SYS_PWRON_EXTDIV(x) ( (x >> 30) & 0x3)
 
 #define SYS_DMC_DISABLE_MASK 0x40
 #define SYS_DMC_PLL_RESET(x) (x << 16)
diff --git a/arch/mips/kernel/proc.c b/arch/mips/kernel/proc.c
index ce010ae..43000a2 100644
--- a/arch/mips/kernel/proc.c
+++ b/arch/mips/kernel/proc.c
@@ -53,9 +53,9 @@ static int show_cpuinfo(struct seq_file *m, void *v)
 	/* workaround for compiler warning */
 	version = fp_vers = 0;
 
-	seq_printf(m, "cpu model\t\t: %s %s @%dMHz\n", __cpu_name[n],
+	seq_printf(m, "cpu model\t\t: %s %s @%lldkHz\n", __cpu_name[n],
 		   (cpu_data[n].options & MIPS_CPU_FPU ? "  FPU " : ""),
-		   get_cpu_freq(n));
+		   get_cpu_freq_masked(n, XLP_FREQ_MASK));
 #else
 	sprintf(fmt, "cpu model\t\t: %%s V%%d.%%d%s\n",
 	        cpu_data[n].options & MIPS_CPU_FPU ? "  FPU V%d.%d" : "");
diff --git a/arch/mips/netlogic/xlp/cpu_control.c b/arch/mips/netlogic/xlp/cpu_control.c
index 529d793..9d44587 100644
--- a/arch/mips/netlogic/xlp/cpu_control.c
+++ b/arch/mips/netlogic/xlp/cpu_control.c
@@ -225,26 +225,26 @@ static u32 get_pll_period(int divf,int divr) {
 	return pll_period_fs;
 }
 
-/* Return frequency in KHz
+/* Return frequency in Hz
  */
 static u32 get_pll_freq(int divf,int divr)
 {
-	uint64_t khz_freq;
-	uint64_t khz_mult = (1000ULL * 1000ULL * 1000ULL * 1000ULL); /* 1e12 */
+	uint64_t hz_freq;
+	uint64_t hz_mult = (1000ULL * 1000ULL * 1000ULL * 1000ULL * 1000ULL); /* 1e15 */
 	u32 pll_period_fs = get_pll_period(divf,divr);
 
-	khz_freq   = khz_mult/((uint64_t) pll_period_fs);
+	hz_freq   = hz_mult/((uint64_t) pll_period_fs);
 
-	return (u32) khz_freq;
+	return (u32) hz_freq;
 }
 
-/* Return frequency in KHz
+/* Return frequency in Hz
  */
 u32 get_cpu_freq(int cpu_num)
 {
 	volatile u32* mmio;
 	u32 pwron_rst_reg;
-	u32 core_dfs, divf, divr, dfs, core;
+	u32 core_dfs, divf, divr, dfs, core, ext_div;
 	mmio = (volatile u32 *) cpu_io_mmio(cpu_num/32,SYS);
 
 	pwron_rst_reg = nlm_hal_read_32bit_reg((uint64_t)mmio, SYS_POWERONRESETCFG);
@@ -253,9 +253,10 @@ u32 get_cpu_freq(int cpu_num)
 
 	divf = SYS_PWRON_DIVF(pwron_rst_reg);
 	divr = SYS_PWRON_DIVR(pwron_rst_reg);
-	dfs  = SYS_CORE_DFS(core_dfs,core);
+	ext_div = SYS_PWRON_EXTDIV(pwron_rst_reg) + 1;
+	dfs  = SYS_CORE_DFS(core_dfs,core) + 1;
 
-	return (get_pll_freq(divf,divr)/(dfs + 1));
+	return (get_pll_freq(divf,divr)/(ext_div * dfs));
 }
 
 EXPORT_SYMBOL(get_cpu_freq);
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index 42197b3..69499e2 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -63,7 +63,7 @@
 #include <asm/netlogic/xlp_hal_pic.h>
 #include <asm/netlogic/phnx_loader.h>
 #include "../boot/ops.h"
-
+#include <asm/netlogic/xlp8xx/cpu_control_macros.h>
 /* Certain macros for this file
  */
 
@@ -319,37 +319,11 @@ unsigned int __cpuinit get_c0_compare_int(void)
     return XLP_IRQ_TIMER;
 }
 
-unsigned long long storm_cpu_freq(void)  //TODO After fixing nlm_hal_cpu_freq(), remove this function
-{
-        unsigned long long mips_counter_frequency;
-        unsigned int pwron_rst_reg = nlm_hal_read_sys_reg(POWER_ON_RESET_CFG);
-        int core = (read_c0_ebase() >> 2) & 0x7;
-
-        int pll_divf = (pwron_rst_reg >> 10) & 0x7f;
-        int pll_divr = (pwron_rst_reg >> 8)  & 0x3;
-        int dfs_div  = (pwron_rst_reg >> 17) & 0x3;
-        int ext_div  = ((pwron_rst_reg >> 30) & 0x3) + 1;
-
-        unsigned long long vco_fs         = (((7500 * 1000) * (pll_divr+1))/(4 * (pll_divf+1)));
-        unsigned long long pll_period_fs  = vco_fs * 2; /* pll output is divided by 2 */
-
-        mips_counter_frequency = 1000000000000000ULL/pll_period_fs;
-
-        dfs_div = ((nlm_hal_read_sys_reg(CORE_DFS_DIV_VALUE) >> (core * 4)) & 0xF) + 1;
-
-        mips_counter_frequency = mips_counter_frequency / (ext_div * dfs_div);
-
-        return mips_counter_frequency;
-}
-
 /* TODO: Get this from FDT */
 void plat_time_init(void)
 {
 	extern void nlm_common_timer_setup(void);
-        if (is_nlm_xlp3xx())
-                mips_hpt_frequency = (unsigned int) storm_cpu_freq();
-        else
-                mips_hpt_frequency = (unsigned int) nlm_hal_cpu_freq();
+	mips_hpt_frequency = (unsigned int) get_cpu_freq(XLP_CPU0);
 	printk("mips_hpt_frequency = %u\n", mips_hpt_frequency);
 	nlm_common_timer_setup();
 }
diff --git a/arch/mips/netlogic/xlp/xlp-cpufreq.c b/arch/mips/netlogic/xlp/xlp-cpufreq.c
index 393cc27..c689cdc 100644
--- a/arch/mips/netlogic/xlp/xlp-cpufreq.c
+++ b/arch/mips/netlogic/xlp/xlp-cpufreq.c
@@ -24,7 +24,6 @@ static struct cpumask xlp_affected_cpus[NR_CPUS];
  * Scaling range is limited to core_dfs@startup through xlp_divs[XLP_DIVS]
  */
 #define XLP_DIVS 11
-#define XLP_FREQ_MASK	(0xfffffff0)
 static int xlp_divs[XLP_DIVS] = {1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 15};
 static struct cpufreq_frequency_table xlp_freq_table[XLP_DIVS + 1];
 
@@ -58,13 +57,13 @@ static void setup_affected_cpus(struct cpumask map)
 	return;
 }
 
-#define XLP_CPU0	0
 __init static int build_cpufreq_table(struct cpufreq_frequency_table *t)
 {
 	unsigned long freq;
 	u32 divfs = get_core_dfs(XLP_CPU0);
 	int i, div_start = -1, j;
 
+	fdebug("XXXX : actual freq = %u\n", get_cpu_freq(XLP_CPU0));
 	freq = get_cpu_freq_masked(XLP_CPU0, XLP_FREQ_MASK);	// In KHz
 	divfs = (divfs >> ((XLP_CPU0 & 0x1f) >> 2)) & 0xf;
 	for (i = 0; i < XLP_DIVS; i++) {
-- 
1.7.10.4

