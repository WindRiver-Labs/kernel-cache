From 74bde969a660258bce54e4396ebe4e794c9851ca Mon Sep 17 00:00:00 2001
From: P. Sadik <psadik@netlogicmicro.com>
Date: Sun, 27 Mar 2011 18:16:03 -0700
Subject: [PATCH 244/762] support for different thread mask across cores while booting up

Based on Broadcom SDK 2.3.

Signed-off-by: P. Sadik <psadik@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/cpu_control.c     |   11 ++++++-----
 arch/mips/netlogic/xlp/cpu_control_asm.S |   10 ++++++++--
 2 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/arch/mips/netlogic/xlp/cpu_control.c b/arch/mips/netlogic/xlp/cpu_control.c
index 1fd9090..905c242 100644
--- a/arch/mips/netlogic/xlp/cpu_control.c
+++ b/arch/mips/netlogic/xlp/cpu_control.c
@@ -127,7 +127,7 @@ static void enable_cores(unsigned int node, unsigned int cores_bitmap)
 	}
 }
 
-int threads_to_enable = 1;
+int threads_to_enable = 0;
 /*
  * This function is called once for each node. However, it is executed
  * only on "master cpu", mostly on n0c0t0
@@ -166,13 +166,14 @@ void enable_cpus(unsigned int node, unsigned int node_cpumask)
 
 	cores_bitmap = 0;
 	for (t0_positions = 0, index = 0; t0_positions < 32; t0_positions += 4, index++) {
-		if (t0_bitmap & (1 << t0_positions))
+		 if (t0_bitmap & (1 << t0_positions)){
 			cores_bitmap |= (1 << index);
+			threads_to_enable |= (num_ones((node_cpumask >> t0_positions) & 0xf) << t0_positions);
+		 }
 	}
 
-	threads_to_enable = num_ones(node_cpumask & 0xf);
-
-	printk("node@%d: t0_bitmap = 0x%08x, cores_bitmap = 0x%08x\n", node, t0_bitmap, cores_bitmap);
+	printk("node@%d: t0_bitmap = 0x%08x, cores_bitmap = 0x%08x threads_to_enable 0x%x\n", 
+		node, t0_bitmap, cores_bitmap,threads_to_enable);
 
 	enable_cores(node, cores_bitmap);
 
diff --git a/arch/mips/netlogic/xlp/cpu_control_asm.S b/arch/mips/netlogic/xlp/cpu_control_asm.S
index 8a5909d..39da2e7 100644
--- a/arch/mips/netlogic/xlp/cpu_control_asm.S
+++ b/arch/mips/netlogic/xlp/cpu_control_asm.S
@@ -140,9 +140,15 @@ EXPORT(boot_siblings_start)			/* "Master" (n0c0t0) cpu starts from here */
 	sync
 
 EXPORT(__boot_siblings)				/* T0 of every core in every node starts from here */
+	mfc0    t3, CP0_EBASE, 1
+	srl     t3, t3 , 2
+	and     t3, t3 , 0x7  			/* t3 contains the core number */
+	mul	 t3, t3 , 4                        
 	dla     t0, threads_to_enable
-	subu	t0, t0, 0x40000000		/* kseg0 */
-	lw  	t1, 0(t0)
+	subu	 t0, t0, 0x40000000		/* t0 has the kseg0 address of threads_to_enable */
+	lw  	 t1, 0(t0)			/* t1 now has the entire threads_to_enable */
+	srl	 t1, t3                     
+	and	 t1, t1, 0xf 			/* t1 has the threads to enable for this core. */
 	beq     t1, 0x2, 2f
 	nop
 	addi    t1, -1
-- 
1.7.0.4

