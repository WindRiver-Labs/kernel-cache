From 5dc5978d5f6235a9d7e94c19e3e4d13d663918c7 Mon Sep 17 00:00:00 2001
From: Mehul <vmehul@netlogicmicro.com>
Date: Wed, 22 Sep 2010 11:33:23 +0530
Subject: [PATCH 226/761] Move cop2 save/restore functions from
 xlr_fast_sys_call_handler.S to new file cop2.S

Based on Broadcom SDK 2.3.

Signed-off-by: Mehul <vmehul@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/kernel/xlr_fast_sys_call_handler.S |   89 -------------------
 arch/mips/netlogic/xlp/Makefile              |    3 +
 arch/mips/netlogic/xlp/cop2.S                |  123 ++++++++++++++++++++++++++
 3 files changed, 126 insertions(+), 89 deletions(-)
 create mode 100644 arch/mips/netlogic/xlp/cop2.S

diff --git a/arch/mips/kernel/xlr_fast_sys_call_handler.S b/arch/mips/kernel/xlr_fast_sys_call_handler.S
index 1dad09c..1c35471 100644
--- a/arch/mips/kernel/xlr_fast_sys_call_handler.S
+++ b/arch/mips/kernel/xlr_fast_sys_call_handler.S
@@ -225,95 +225,6 @@ NESTED(nlm_uaccess_fs_mem_write32, PT_SIZE, sp)
 END(nlm_uaccess_fs_mem_write32)
 
 
-#ifdef CONFIG_NLM_ENABLE_COP2
-/*
- * void nlm_cop2_save()
- * sp is assumed to point to a struct pt_regs
- *
- * NOTE: This is called in SAVE_SOME in stackframe.h. It can only
- *       safely modify k0 and k1.
- */
-	.align	7
-	.set push
-	.set noreorder
-	LEAF(nlm_cop2_save)
-	/*msgring tx buf reg*/
-	dmfc2 k0, $0, 0
-	LONG_S  k0, NLM_COP2_TX_BUF(sp)
-	dmfc2 k0, $0, 1
-	LONG_S  k0, (NLM_COP2_TX_BUF+8)(sp)
-	dmfc2 k0, $0, 2
-	LONG_S k0, (NLM_COP2_TX_BUF+16)(sp)
-	dmfc2 k0, $0, 3
-	LONG_S k0, (NLM_COP2_TX_BUF+24)(sp)
-	
-	/*msgring rx buf reg*/
-	dmfc2 k0, $1, 0
-	LONG_S  k0, NLM_COP2_RX_BUF(sp)
-	dmfc2 k0, $1, 1
-	LONG_S  k0, (NLM_COP2_RX_BUF+8)(sp)
-	dmfc2 k0, $1, 2
-	LONG_S  k0, (NLM_COP2_RX_BUF+16)(sp)
-	dmfc2 k0, $1, 3
-	LONG_S  k0, (NLM_COP2_RX_BUF+24)(sp)
-
-	mfc2 k0, $2, 0
-	sw  k0, NLM_COP2_TX_MSG_STATUS(sp)
-	
-	mfc2 k0, $3, 0
-	jr	ra
-	sw k0, NLM_COP2_RX_MSG_STATUS(sp)
-
-	END(nlm_cop2_save)
-	.set pop
-
-/*
- * void nlm_cop2_restore()
- * sp is assumed to point to a struct pt_regs
- *
- * NOTE: This is called in RESTORE_SOME in stackframe.h.
- */
-	.align	7
-	.set push
-	.set noreorder
-	LEAF(nlm_cop2_restore)
-	/*msgring tx buf reg*/
-	LONG_L  v1, NLM_COP2_TX_BUF(sp)
-	dmtc2 v1, $0, 0
-	LONG_L  v1, (NLM_COP2_TX_BUF+8)(sp)
-	dmtc2 v1, $0, 1
-	LONG_L  v1, (NLM_COP2_TX_BUF+16)(sp)
-	dmtc2 v1, $0, 2
-	LONG_L  v1, (NLM_COP2_TX_BUF+24)(sp)
-	dmtc2 v1, $0, 3
-
-	/*msgring rx buf reg*/
-	LONG_L  v1, NLM_COP2_RX_BUF(sp)
-	dmtc2 v1, $1, 0
-	LONG_L  v1, (NLM_COP2_RX_BUF+8)(sp)
-	dmtc2 v1, $1, 1
-	LONG_L  v1, (NLM_COP2_RX_BUF+16)(sp)
-	dmtc2 v1, $1, 2
-	LONG_L  v1, (NLM_COP2_RX_BUF+24)(sp)
-	dmtc2 v1, $1, 3
-	lw  v1, NLM_COP2_TX_MSG_STATUS(sp)
-	mtc2 v1, $2, 0
-
-	/*leave bits 28-31 up to date*/
-	li k0, 0xf0000000
-	lw v1, NLM_COP2_RX_MSG_STATUS(sp)
-	or v1, k0, v1
-	xor v1, k0, v1
-	mfc2 k0, $3, 0
-	srl k0, k0, 28
-	sll k0, k0, 28
-	or v1, k0, v1
-	jr	ra
-	mtc2 v1, $3, 0
-	END(nlm_cop2_restore)
-	.set pop
-#endif
-
 #endif /* CONFIG_NLM_XLP */
 
 	NESTED(xlr_fast_syscall_msgsnd, PT_SIZE, sp)
diff --git a/arch/mips/netlogic/xlp/Makefile b/arch/mips/netlogic/xlp/Makefile
index b3ee2ec..4c66980 100644
--- a/arch/mips/netlogic/xlp/Makefile
+++ b/arch/mips/netlogic/xlp/Makefile
@@ -6,6 +6,9 @@ obj-y 				+= irq.o time.o on_chip.o mmu.o
 obj-$(CONFIG_NLM_XLP) 		+= platform.o
 obj-$(CONFIG_SMP)       	+= smp.o
 
+obj-$(CONFIG_KGDB)      += nmi.o
+obj-$(CONFIG_NLM_XLP) += cop2.o
+
 ifeq ($(CONFIG_XEN),y)
 obj-y += xenbootinfo.o
 endif
diff --git a/arch/mips/netlogic/xlp/cop2.S b/arch/mips/netlogic/xlp/cop2.S
new file mode 100644
index 0000000..1ab81b9
--- /dev/null
+++ b/arch/mips/netlogic/xlp/cop2.S
@@ -0,0 +1,123 @@
+/***********************************************************************
+Copyright 2003-2010 Netlogic Microsystems (“Netlogic”). All rights
+reserved.
+Redistribution and use in source and binary forms, with or without
+modification, are permited provided that the following conditions are
+met:
+1. Redistributions of source code must retain the above copyright
+notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+notice, this list of conditions and the following disclaimer in
+the documentation and/or other materials provided with the
+distribution.
+THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGE.
+*****************************#NETL_2#********************************/
+
+
+#include <asm/addrspace.h>
+#include <asm/asm.h>
+#include <asm/mipsregs.h>
+#include <asm/regdef.h>
+#include <asm/stackframe.h>
+#include <asm/netlogic/interrupt.h>
+#include <asm/asm-offsets.h>
+
+#ifdef CONFIG_NLM_ENABLE_COP2
+/*
+ * void nlm_cop2_save()
+ * sp is assumed to point to a struct pt_regs
+ *
+ * NOTE: This is called in SAVE_SOME in stackframe.h. It can only
+ *       safely modify k0 and k1.
+ */
+	.align	7
+	.set push
+	.set noreorder
+	LEAF(nlm_cop2_save)
+	/*msgring tx buf reg*/
+	dmfc2 k0, $0, 0
+	LONG_S  k0, NLM_COP2_TX_BUF(sp)
+	dmfc2 k0, $0, 1
+	LONG_S  k0, (NLM_COP2_TX_BUF+8)(sp)
+	dmfc2 k0, $0, 2
+	LONG_S k0, (NLM_COP2_TX_BUF+16)(sp)
+	dmfc2 k0, $0, 3
+	LONG_S k0, (NLM_COP2_TX_BUF+24)(sp)
+	
+	/*msgring rx buf reg*/
+	dmfc2 k0, $1, 0
+	LONG_S  k0, NLM_COP2_RX_BUF(sp)
+	dmfc2 k0, $1, 1
+	LONG_S  k0, (NLM_COP2_RX_BUF+8)(sp)
+	dmfc2 k0, $1, 2
+	LONG_S  k0, (NLM_COP2_RX_BUF+16)(sp)
+	dmfc2 k0, $1, 3
+	LONG_S  k0, (NLM_COP2_RX_BUF+24)(sp)
+
+	mfc2 k0, $2, 0
+	sw  k0, NLM_COP2_TX_MSG_STATUS(sp)
+	
+	mfc2 k0, $3, 0
+	jr	ra
+	sw k0, NLM_COP2_RX_MSG_STATUS(sp)
+
+	END(nlm_cop2_save)
+	.set pop
+
+/*
+ * void nlm_cop2_restore()
+ * sp is assumed to point to a struct pt_regs
+ *
+ * NOTE: This is called in RESTORE_SOME in stackframe.h.
+ */
+	.align	7
+	.set push
+	.set noreorder
+	LEAF(nlm_cop2_restore)
+	/*msgring tx buf reg*/
+	LONG_L  v1, NLM_COP2_TX_BUF(sp)
+	dmtc2 v1, $0, 0
+	LONG_L  v1, (NLM_COP2_TX_BUF+8)(sp)
+	dmtc2 v1, $0, 1
+	LONG_L  v1, (NLM_COP2_TX_BUF+16)(sp)
+	dmtc2 v1, $0, 2
+	LONG_L  v1, (NLM_COP2_TX_BUF+24)(sp)
+	dmtc2 v1, $0, 3
+
+	/*msgring rx buf reg*/
+	LONG_L  v1, NLM_COP2_RX_BUF(sp)
+	dmtc2 v1, $1, 0
+	LONG_L  v1, (NLM_COP2_RX_BUF+8)(sp)
+	dmtc2 v1, $1, 1
+	LONG_L  v1, (NLM_COP2_RX_BUF+16)(sp)
+	dmtc2 v1, $1, 2
+	LONG_L  v1, (NLM_COP2_RX_BUF+24)(sp)
+	dmtc2 v1, $1, 3
+	lw  v1, NLM_COP2_TX_MSG_STATUS(sp)
+	mtc2 v1, $2, 0
+
+	/*leave bits 28-31 up to date*/
+	li k0, 0xf0000000
+	lw v1, NLM_COP2_RX_MSG_STATUS(sp)
+	or v1, k0, v1
+	xor v1, k0, v1
+	mfc2 k0, $3, 0
+	srl k0, k0, 28
+	sll k0, k0, 28
+	or v1, k0, v1
+	jr	ra
+	mtc2 v1, $3, 0
+	END(nlm_cop2_restore)
+	.set pop
+#endif
+
-- 
1.7.10.4

