From 57ab3937c1045d3488bc4ab435a72d10304f91a4 Mon Sep 17 00:00:00 2001
From: Krishnamurthy D V <kmurthy@netlogicmicro.com>
Date: Thu, 9 Dec 2010 17:09:25 +0530
Subject: [PATCH 232/761] Fix for uart overrun error on XLR Compilation fixes
 caused in XLR due to XLP changes.

Based on Broadcom SDK 2.3.

Signed-off-by: Krishnamurthy D V <kmurthy@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/mach-netlogic/mmu.h     |    5 +++++
 arch/mips/include/asm/mach-netlogic/xlp-mmu.h |    8 --------
 arch/mips/mm/c-phoenix.c                      |    2 ++
 arch/mips/netlogic/xlr/platform.c             |    8 +++-----
 4 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/arch/mips/include/asm/mach-netlogic/mmu.h b/arch/mips/include/asm/mach-netlogic/mmu.h
index 92aace3..100df36 100644
--- a/arch/mips/include/asm/mach-netlogic/mmu.h
+++ b/arch/mips/include/asm/mach-netlogic/mmu.h
@@ -60,5 +60,10 @@ nlm_write_os_scratch_3(~(((1ULL << HUGETLB_PAGE_ORDER) - 1) << ENTRYLO_PFN_SHIFT
 extern void setup_mapped_kernel_tlbs(int index, int secondary_cpu);
 extern unsigned long recalculate_max_low_pfn(unsigned long max_low_pfn);
 
+#ifndef CONFIG_NLM_XLP
+#define disable_pgwalker(flags) (void)flags
+#define enable_pgwalker(flags) (void) flags
+#endif
+
 #endif /* __ASSEMBLY__ */
 #endif
diff --git a/arch/mips/include/asm/mach-netlogic/xlp-mmu.h b/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
index 4da9dfa..28ca984 100644
--- a/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
+++ b/arch/mips/include/asm/mach-netlogic/xlp-mmu.h
@@ -33,8 +33,6 @@ static inline void setup_user_pgd(pgd_t *pgd)
 	}
 };
 
-#ifdef CONFIG_NLM_XLP
-
 static __inline__ void pipeline_flush(void)
 {
 	__asm__ __volatile__ (
@@ -58,11 +56,5 @@ static __inline__ void pipeline_flush(void)
 #define enable_pgwalker(flags)						\
 	({ write_c0_config6(read_c0_config6() | (flags & ENABLE_PGWALKER)); })
 
-#else
-
-#define disable_pgwalker(flags) {}
-#define enable_pgwalker(flags) {}
-
-#endif
 
 #endif
diff --git a/arch/mips/mm/c-phoenix.c b/arch/mips/mm/c-phoenix.c
index 293f156..fd287ea 100644
--- a/arch/mips/mm/c-phoenix.c
+++ b/arch/mips/mm/c-phoenix.c
@@ -35,7 +35,9 @@ the header of the original work apply to this derived work.
 #include <linux/mm.h>
 #include <linux/module.h>
 
+#ifdef CONFIG_NLM_XLP
 #include <asm/mach-netlogic/xlp-mmu.h>
+#endif
 #include <asm/netlogic/debug.h>
 
 static unsigned int icache_linesz;
diff --git a/arch/mips/netlogic/xlr/platform.c b/arch/mips/netlogic/xlr/platform.c
index cdc69f0..7c914a3 100644
--- a/arch/mips/netlogic/xlr/platform.c
+++ b/arch/mips/netlogic/xlr/platform.c
@@ -155,8 +155,7 @@ unsigned int nlm_xlr_uart_in(struct uart_port *p, int offset)
 	unsigned int value;
 
 	/* XLR uart does not need any mapping of regs */
-	offset = offset << p->regshift;
-	mmio = (nlm_reg_t *)(p->membase + offset);
+	mmio = (nlm_reg_t *)(p->membase + (offset << p->regshift));
 	value = netlogic_read_reg(mmio, 0);
 
 	/* See XLR/XLS errata */
@@ -172,6 +171,8 @@ unsigned int nlm_xlr_uart_in(struct uart_port *p, int offset)
 void nlm_xlr_uart_out(struct uart_port *p, int offset, int value)
 {
 	nlm_reg_t *mmio;
+	/* XLR uart does not need any mapping of regs */
+	mmio = (nlm_reg_t *)(p->membase + (offset << p->regshift));
 
 	/* See XLR/XLS errata */
 	if (offset == UART_MSR)
@@ -179,9 +180,6 @@ void nlm_xlr_uart_out(struct uart_port *p, int offset, int value)
 	else if (offset == UART_MCR)
 		value ^= 0x3;
 
-	/* XLR uart does not need any mapping of regs */
-	offset = offset << p->regshift;
-	mmio = (nlm_reg_t *)(p->membase + offset);
 	netlogic_write_reg(mmio, 0, value);
 }
 
-- 
1.7.10.4

