From 5dbfd8667d51668f74d513166b6e5f2f6b15110b Mon Sep 17 00:00:00 2001
From: Om Narasimhan <onarasimhan@netlogicmicro.com>
Date: Fri, 6 May 2011 11:31:33 -0700
Subject: [PATCH 276/762] LE, PCI mem bar special handling for A0, A1 and A2 chip revisions

This works in tandem with bootloader configuration of PCI mem bar.

Based on Broadcom SDK 2.3.

Signed-off-by: Om Narasimhan <onarasimhan@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/pci/probe.c |   47 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 46 insertions(+), 1 deletions(-)

diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index dda01d7..252aab2 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -217,6 +217,51 @@ static inline unsigned long decode_bar(struct pci_dev *dev, u32 bar)
 	return flags;
 }
 
+#if defined (CONFIG_NLM_XLP) && defined (__LITTLE_ENDIAN)
+#define NLM_HAL_LINUX_KERNEL
+#include <asm/netlogic/hal/nlm_hal.h>
+#include <asm/netlogic/xlp.h>
+#define XLP_PCI_DEV_BASE 0x1000
+
+static u32 nlm_xlp_membar_fixup(u32 l, struct pci_dev *dev,
+	unsigned int pos, enum pci_bar_type type)
+{
+	unsigned char b;
+	u32 fixup;
+	int rev;
+
+	if (!l)
+		return l;
+	if (pci_calc_resource_flags(l) != IORESOURCE_MEM)
+		return l;
+	rev = read_c0_prid() & 0xff;
+	if (!((rev == XLP_REVISION_A0) || (rev == XLP_REVISION_A1) ||
+			(rev == XLP_REVISION_A2))){
+		return l;
+	}
+	if ((dev->vendor != PCI_VENDOR_ID_NETLOGIC) &&
+			(dev->device < XLP_PCI_DEV_BASE))
+		return l;
+	if (type == pci_bar_unknown) {
+		if ((l & PCI_BASE_ADDRESS_SPACE) == PCI_BASE_ADDRESS_SPACE_MEMORY) {
+			if ((l & ~PCI_BASE_ADDRESS_MEM_MASK) & PCI_BASE_ADDRESS_MEM_TYPE_64)
+				type = pci_bar_mem64;
+			else
+				type = pci_bar_mem32;
+		}
+	}
+	if ((type != pci_bar_mem32) && (type != pci_bar_mem64))
+		return l;
+
+	b = (l >> 24) & 0xff;
+	fixup = ((b << 24) | (b << 16) | (b << 8) | (b));
+	return fixup;
+}
+
+#else /* CONFIG_NLM_XLP */
+#define nlm_xlp_membar_fixup(x) (x)
+#endif /* CONFIG_NLM_XLP */
+
 /**
  * pci_read_base - read a PCI BAR
  * @dev: the PCI device
@@ -246,7 +291,7 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 	pci_read_config_dword(dev, pos, &l);
 	pci_write_config_dword(dev, pos, l | mask);
 	pci_read_config_dword(dev, pos, &sz);
-	pci_write_config_dword(dev, pos, l);
+	pci_write_config_dword(dev, pos, nlm_xlp_membar_fixup(l, dev, pos, type));
 
 	if (!dev->mmio_always_on)
 		pci_write_config_word(dev, PCI_COMMAND, orig_cmd);
-- 
1.7.0.4

