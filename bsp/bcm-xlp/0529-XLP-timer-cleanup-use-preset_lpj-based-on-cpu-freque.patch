From 75c45ec071b2e43575b9945fff882ab2137a4e85 Mon Sep 17 00:00:00 2001
From: Zi Shen Lim <zlim@netlogicmicro.com>
Date: Wed, 25 Jan 2012 11:21:13 -0800
Subject: [PATCH 529/762] XLP: timer cleanup, use preset_lpj based on cpu frequency

Based on Broadcom SDK 2.3.

Signed-off-by: Zi Shen Lim <zlim@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/timex.h  |    5 ---
 arch/mips/lib/delay.c          |   57 ----------------------------------------
 arch/mips/netlogic/xlp/setup.c |    4 ---
 arch/mips/netlogic/xlp/smp.c   |    4 +-
 arch/mips/netlogic/xlp/time.c  |   29 ++++++++++++++------
 5 files changed, 22 insertions(+), 77 deletions(-)

diff --git a/arch/mips/include/asm/timex.h b/arch/mips/include/asm/timex.h
index d2cddd9..6c15097 100644
--- a/arch/mips/include/asm/timex.h
+++ b/arch/mips/include/asm/timex.h
@@ -135,11 +135,6 @@ static inline int unsynchronized_tsc(void)
 	return !tsc_is_sync();
 }
 
-#ifdef CONFIG_NLM_XLP
-#define ARCH_HAS_READ_CURRENT_TIMER	1
-extern int read_current_timer(unsigned long *timer_val);
-#endif /* CONFIG_NLM_XLP */
-
 #endif /* __KERNEL__ */
 
 #endif /*  _ASM_TIMEX_H */
diff --git a/arch/mips/lib/delay.c b/arch/mips/lib/delay.c
index 131d720..5995969 100644
--- a/arch/mips/lib/delay.c
+++ b/arch/mips/lib/delay.c
@@ -15,62 +15,6 @@
 #include <asm/compiler.h>
 #include <asm/war.h>
 
-#ifdef CONFIG_NLM_XLP
-
-extern u64 xlp_hpt_read(void);
-inline void __delay(unsigned int loops)
-{
-	uint32_t initial_count,curr_count;
-	uint32_t delta;
-
-	delta = loops; 
-
-	initial_count = xlp_hpt_read();
-        while (1) {
-		curr_count = xlp_hpt_read();
-		if ((uint32_t)(curr_count - initial_count) > delta)
-			return;
-	}
-}
-EXPORT_SYMBOL(__delay);
-
-inline void __udelay(unsigned long us)
-{
-	uint32_t initial_count,curr_count;
-	uint32_t delta;
-
-	delta = us * 66; /* clock runs at 66.6MHz speed */
-			    /* cant do floating point ops here */
-
-	initial_count = xlp_hpt_read();
-        while (1) {
-		curr_count = xlp_hpt_read();
-		if ((uint32_t)(curr_count - initial_count) > delta)
-			return;
-	}
-}
-EXPORT_SYMBOL(__udelay);
-
-inline void __ndelay(unsigned long ns)
-{
-	uint32_t initial_count,curr_count;
-	uint32_t delta;
-
-	/* clock runs at 66.6MHz speed
-	the minimum delay we have have is 1/66.67 = ~15 nsec */
-	delta = (ns >> 4) +1;
-
-	initial_count = xlp_hpt_read();
-        while (1) {
-		curr_count = xlp_hpt_read();
-		if ((uint32_t)(curr_count - initial_count) > delta)
-			return;
-	}
-}
-EXPORT_SYMBOL(__ndelay);
-
-#else
-
 inline void __delay(unsigned int loops)
 {
 	__asm__ __volatile__ (
@@ -110,4 +54,3 @@ void __ndelay(unsigned long ns)
 	__delay((ns * 0x00000005ull * HZ * lpj) >> 32);
 }
 EXPORT_SYMBOL(__ndelay);
-#endif
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index 304877b..096e0e8 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -204,10 +204,6 @@ int nlm_common_get_pgprot(unsigned long address)
 	return 0;
 }
 
-void plat_time_init(void)
-{
-}
-
 int valid_mmap_nlm_common_addr_range(unsigned long pfn)
 {
 	return 0;
diff --git a/arch/mips/netlogic/xlp/smp.c b/arch/mips/netlogic/xlp/smp.c
index 38740b6..fd54eae 100644
--- a/arch/mips/netlogic/xlp/smp.c
+++ b/arch/mips/netlogic/xlp/smp.c
@@ -103,7 +103,7 @@ void nlm_send_ipi_mask(const struct cpumask * mask, unsigned int action)
 	}
 }
 
-extern void nlm_common_timer_setup(void);
+extern void xlp_timer_setup(void);
 /*
  * Code to run on secondary just after probing the CPU
  */
@@ -119,7 +119,7 @@ static void __cpuinit nlm_init_secondary(void)
 
 	    if ( (cpu % 32) == 0) {
 		    /* If this cpu@0 of any of the nodes, initialize PIC */
-		    nlm_common_timer_setup();
+		    xlp_timer_setup();
 	    }
     }
 
diff --git a/arch/mips/netlogic/xlp/time.c b/arch/mips/netlogic/xlp/time.c
index eac7f1b..acfffeb 100644
--- a/arch/mips/netlogic/xlp/time.c
+++ b/arch/mips/netlogic/xlp/time.c
@@ -28,7 +28,9 @@ THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <asm/time.h>
 
+#include <asm/netlogic/xlp_irq.h>
 #include <asm/netlogic/xlp_hal_pic.h>
+#include <asm/netlogic/xlp8xx/cpu_control_macros.h>
 
 extern spinlock_t xlp_pic_lock;
 
@@ -36,20 +38,14 @@ extern spinlock_t xlp_pic_lock;
 #define FRC        6
 #define FRC_MAXVAL PIC_SYSTIMER_MAXVAL
 
-cycle_t xlp_hpt_read(void)
+u64 xlp_hpt_read(void)
 {
-	cycle_t counter = nlm_hal_pic_read_timer(FRC);
+	u64 counter = nlm_hal_pic_read_timer(FRC);
 	return (FRC_MAXVAL - counter);
 }
 EXPORT_SYMBOL(xlp_hpt_read);
 
-int read_current_timer(unsigned long *timer_val)
-{
-	*timer_val = xlp_hpt_read();
-	return 0;
-}
-
-void nlm_common_timer_setup(void)
+void xlp_timer_setup(void)
 {
         unsigned long flags = 0;
 
@@ -61,6 +57,21 @@ void nlm_common_timer_setup(void)
         spin_unlock_irqrestore(&xlp_pic_lock, flags);
 }
 
+unsigned int __cpuinit get_c0_compare_int(void)
+{
+	return XLP_IRQ_TIMER;
+}
+
+void __init plat_time_init(void)
+{
+	mips_hpt_frequency = (unsigned int) get_cpu_freq(XLP_CPU0);
+	pr_info("mips_hpt_frequency = %u\n", mips_hpt_frequency);
+	xlp_timer_setup();
+
+	/* Preset lpj to skip lengthy delay calibration */
+	preset_lpj = mips_hpt_frequency / HZ;
+}
+
 static int nlm_timer_proc_read(char *page, char **start, off_t off, int count,
 			       int *eof, void *data)
 {
-- 
1.7.0.4

