From 361b11c28681c065162ef75f4803764cdcf61501 Mon Sep 17 00:00:00 2001
From: Divya Sakthidharan <divyas@broadcom.com>
Date: Wed, 7 Nov 2012 11:28:40 +0530
Subject: [PATCH 619/762] workqueue: back port to fix CPU binding of flush_delayed_work[_sync

    Back ported from linux-3.7

    workqueue: fix CPU binding of flush_delayed_work[_sync]()
    commit 1265057fa02c7bed3b6d9ddc8a2048065a370364

Based on Broadcom SDK 2.3.

Signed-off-by: Divya Sakthidharan <divyas@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 include/linux/workqueue.h |    3 +++
 kernel/workqueue.c        |   27 ++++++++++++++++++++++-----
 2 files changed, 25 insertions(+), 5 deletions(-)

diff --git a/include/linux/workqueue.h b/include/linux/workqueue.h
index af15545..c35fe62 100644
--- a/include/linux/workqueue.h
+++ b/include/linux/workqueue.h
@@ -92,6 +92,9 @@ struct work_struct {
 struct delayed_work {
 	struct work_struct work;
 	struct timer_list timer;
+#ifdef CONFIG_NLM_XLP
+	int cpu;
+#endif
 };
 
 static inline struct delayed_work *to_delayed_work(struct work_struct *work)
diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index a64b94e..b801dc3 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -1162,7 +1162,9 @@ int queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
 			lcpu = WORK_CPU_UNBOUND;
 
 		set_work_cwq(work, get_cwq(lcpu, wq), 0);
-
+		#ifdef CONFIG_NLM_XLP
+		dwork->cpu = lcpu;
+		#endif
 		timer->expires = jiffies + delay;
 		timer->data = (unsigned long)dwork;
 		timer->function = delayed_work_timer_fn;
@@ -2691,9 +2693,17 @@ EXPORT_SYMBOL_GPL(cancel_work_sync);
  */
 bool flush_delayed_work(struct delayed_work *dwork)
 {
-	if (del_timer_sync(&dwork->timer))
-		__queue_work(raw_smp_processor_id(),
+	if (del_timer_sync(&dwork->timer))	{
+
+	#if defined CONFIG_NLM_XLP
+		if(dwork->cpu != -1)
+			__queue_work(dwork->cpu,
+			     get_work_cwq(&dwork->work)->wq, &dwork->work);
+		else
+	#endif
+			__queue_work(raw_smp_processor_id(),
 			     get_work_cwq(&dwork->work)->wq, &dwork->work);
+	}
 	return flush_work(&dwork->work);
 }
 EXPORT_SYMBOL(flush_delayed_work);
@@ -2712,9 +2722,16 @@ EXPORT_SYMBOL(flush_delayed_work);
  */
 bool flush_delayed_work_sync(struct delayed_work *dwork)
 {
-	if (del_timer_sync(&dwork->timer))
-		__queue_work(raw_smp_processor_id(),
+	if (del_timer_sync(&dwork->timer))	{
+	#if defined CONFIG_NLM_XLP
+		if(dwork->cpu != -1)
+			__queue_work(dwork->cpu,
+			     get_work_cwq(&dwork->work)->wq, &dwork->work);
+		else
+	#endif
+			__queue_work(raw_smp_processor_id(),
 			     get_work_cwq(&dwork->work)->wq, &dwork->work);
+	}
 	return flush_work_sync(&dwork->work);
 }
 EXPORT_SYMBOL(flush_delayed_work_sync);
-- 
1.7.0.4

