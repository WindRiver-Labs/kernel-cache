From 0336eb3b0c0b86f41dbfb07d73c01ae3b277653f Mon Sep 17 00:00:00 2001
From: Ashok Kumar <ashoks@broadcom.com>
Date: Mon, 7 Apr 2014 07:00:52 -0700
Subject: [PATCH] kvm: emulate clk block in sys management.

Commit 653a0694340a043cd4a05d0feb826ed5b3224057 from Broadcom SDK 3.0.2

Emulate clock block in system management so that guest
cpufreq driver can read the correct cpu frequency.

Signed-off-by: Ashok Kumar <ashoks@broadcom.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/include/asm/kvm_host.h b/arch/mips/include/asm/kvm_host.h
index f25f934..dd2affa 100644
--- a/arch/mips/include/asm/kvm_host.h
+++ b/arch/mips/include/asm/kvm_host.h
@@ -108,6 +108,13 @@ struct kvm_arch {
 		unsigned int regs[MAX_XLP_SYSMGT_REG_NUM];
 	} sysmgt;
 	struct {
+		unsigned int reg_0;
+		unsigned int reg_c0;
+		unsigned int reg_c1;
+		unsigned int reg_c2;
+		unsigned int reg_188;
+	} clkmgt;
+	struct {
 		int32_t config[16]; /* 16 standard configuration register */
 		int32_t pcie_busnum[4];
 		int32_t pcie_membase[4];
diff --git a/arch/mips/include/asm/netlogic/xlp-hal/sys.h b/arch/mips/include/asm/netlogic/xlp-hal/sys.h
index 641d856..1209e31 100644
--- a/arch/mips/include/asm/netlogic/xlp-hal/sys.h
+++ b/arch/mips/include/asm/netlogic/xlp-hal/sys.h
@@ -178,6 +178,8 @@
 /* XLP 9XX fuse block registers */
 #define FUSE_9XX_DEVCFG6			0xc6
 
+#define XLP9XX_CLOCK_FUNC_OFFSET	(0x2 << 12)
+
 #ifndef __ASSEMBLY__
 #define nlm_read_sys_reg(b, r)		nlm_read_reg(b, r)
 #define nlm_write_sys_reg(b, r, v)	nlm_write_reg(b, r, v)
diff --git a/arch/mips/kvm/xlp.c b/arch/mips/kvm/xlp.c
index 4de3371..e75dce8 100644
--- a/arch/mips/kvm/xlp.c
+++ b/arch/mips/kvm/xlp.c
@@ -370,6 +370,20 @@ static void xlp_kvm_init_sysmgt(struct kvm_arch *arch)
 	arch->sysmgt.regs[0x43] = 0xffffe;
 }
 
+static void xlp_kvm_init_clkmgt(struct kvm_arch *arch)
+{
+	uint64_t clkbase;
+
+	clkbase = nlm_get_node(0)->sysbase + XLP9XX_CLOCK_FUNC_OFFSET;
+
+	arch->clkmgt.reg_0 = 0xffffffff;
+	arch->clkmgt.reg_c0 = nlm_read_sys_reg(clkbase, 0xc0);
+	arch->clkmgt.reg_c1 = nlm_read_sys_reg(clkbase, 0xc1);
+	arch->clkmgt.reg_c2 = nlm_read_sys_reg(clkbase, 0xc2);
+	arch->clkmgt.reg_188 = nlm_read_sys_reg(clkbase, 0x188);
+}
+
+
 static void xlp_kvm_init_bridge(struct kvm_arch *arch)
 {
 	int i;
@@ -406,6 +420,7 @@ void xlp_kvm_init_vm(struct kvm *kvm)
 	xlp_kvm_init_uart0(arch);
 	xlp_kvm_init_pic(arch);
 	xlp_kvm_init_sysmgt(arch);
+	xlp_kvm_init_clkmgt(arch);
 	xlp_kvm_init_bridge(arch);
 }
 
diff --git a/arch/mips/netlogic/kvm/kvm_clk.c b/arch/mips/netlogic/kvm/kvm_clk.c
index 461633b..9a3f989 100644
--- a/arch/mips/netlogic/kvm/kvm_clk.c
+++ b/arch/mips/netlogic/kvm/kvm_clk.c
@@ -55,6 +55,8 @@
 #include <asm/highmem.h>		/* For VMALLOC_END */
 
 #include <asm/netlogic/kvm_xlp.h>
+#include <asm/netlogic/haldefs.h>
+#include <asm/netlogic/xlp-hal/iomap.h>
 
 static inline void unhandled_exception(const char *func, unsigned long addr,
 	unsigned long epc, unsigned long write)
@@ -66,17 +68,33 @@ static inline void unhandled_exception(const char *func, unsigned long addr,
 void kvm_handle_pcie_clk(struct pt_regs *regs, unsigned long write,
 		unsigned long address, unsigned long reg_num)
 {
-	unsigned int rindex = address >> 2;
+	unsigned int rindex = (address - XLP_IO_PCI_HDRSZ) >> 2;
+	struct kvm_arch *arch = kvm_get_arch(regs);
 
-	if (rindex == 0x101) {
-		/* cpu pll control 1 */
-		return;
-	} else if (rindex == 0x1c8) {
-		/* cpu pll change control */
-		if (!write)
-			regs->regs[reg_num] = 0x0;
-		return;
+	if (!write) {
+		switch (rindex) {
+			case 0:
+				regs->regs[reg_num] = arch->clkmgt.reg_0;
+				break;
+			case 0xc0:
+				regs->regs[reg_num] = arch->clkmgt.reg_c0;
+				break;
+			case 0xc1:
+				regs->regs[reg_num] = arch->clkmgt.reg_c1;
+				break;
+			case 0xc2:
+				regs->regs[reg_num] = arch->clkmgt.reg_c2;
+				break;
+			case 0x188:
+				regs->regs[reg_num] = arch->clkmgt.reg_188;
+				break;
+			default:
+				unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
+				break;
+		}
 	}
+	else
+		unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
 
-	unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
+	return;
 }
-- 
1.9.1

