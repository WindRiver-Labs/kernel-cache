From d2bac03f3ce11d3b2967fca0fa7fe1ecffcb95ea Mon Sep 17 00:00:00 2001
From: Ashok Kumar <ashoks@broadcom.com>
Date: Fri, 27 Dec 2013 20:03:56 +0530
Subject: [PATCH] kvm: changes for "perf kvm top"

Commit 27ed582ccc613ff367da31fc1fbabc814d42dbc8 from Broadcom SDK 3.0.2

Add support to track guest statistic from host using
"perf kvm top" command.

Signed-off-by: Ashok Kumar <ashoks@broadcom.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/include/asm/perf_event.h b/arch/mips/include/asm/perf_event.h
index d0c7749..b08d075 100644
--- a/arch/mips/include/asm/perf_event.h
+++ b/arch/mips/include/asm/perf_event.h
@@ -11,5 +11,11 @@
 
 #ifndef __MIPS_PERF_EVENT_H__
 #define __MIPS_PERF_EVENT_H__
-/* Leave it empty here. The file is required by linux/perf_event.h */
+
+#include "asm/ptrace.h"
+
+extern unsigned long perf_misc_flags(struct pt_regs *regs);
+extern unsigned long perf_instruction_pointer(struct pt_regs *regs);
+#define perf_misc_flags(regs) perf_misc_flags(regs)
+
 #endif /* __MIPS_PERF_EVENT_H__ */
diff --git a/arch/mips/kernel/perf_event.c b/arch/mips/kernel/perf_event.c
index c1cf9c6..100fc1b 100644
--- a/arch/mips/kernel/perf_event.c
+++ b/arch/mips/kernel/perf_event.c
@@ -67,3 +67,32 @@ void perf_callchain_kernel(struct perf_callchain_entry *entry,
 	save_raw_perf_callchain(entry, sp);
 #endif
 }
+
+unsigned long perf_misc_flags(struct pt_regs *regs)
+{
+	int misc = 0;
+
+	if (perf_guest_cbs && perf_guest_cbs->is_in_guest()) {
+		if (perf_guest_cbs->is_user_mode())
+			misc |= PERF_RECORD_MISC_GUEST_USER;
+		else
+			misc |= PERF_RECORD_MISC_GUEST_KERNEL;
+	} else {
+		if (user_mode(regs))
+			misc |= PERF_RECORD_MISC_USER;
+		else
+			misc |= PERF_RECORD_MISC_KERNEL;
+	}
+
+	return misc;
+}
+
+unsigned long perf_instruction_pointer(struct pt_regs *regs)
+{
+	if (perf_guest_cbs && perf_guest_cbs->is_in_guest())
+		return perf_guest_cbs->get_guest_ip();
+
+	return instruction_pointer(regs);
+}
+
+
diff --git a/arch/mips/kvm/kvm.c b/arch/mips/kvm/kvm.c
index 82a3e88..f3b95b8 100644
--- a/arch/mips/kvm/kvm.c
+++ b/arch/mips/kvm/kvm.c
@@ -67,6 +67,7 @@
 #include <linux/swap.h>
 #include <linux/bitops.h>
 #include <linux/spinlock.h>
+#include <linux/perf_event.h>
 
 #include <asm/pgalloc.h>
 #include <asm/mmu_context.h>
@@ -962,13 +963,48 @@ long kvm_arch_vm_ioctl(struct file *filp, unsigned int ioctl, unsigned long arg)
 	return r;
 }
 
+int kvm_is_in_guest(void)
+{
+	return (get_irq_regs()->cp0_guestctl0 >> 31);
+}
+
+static int kvm_is_user_mode(void)
+{
+	int user_mode = 0;
+	uint32_t guest_cp0_status;
+
+	__asm__ __volatile__ ("mfgc0 %0, $12, 0": "=r" (guest_cp0_status));
+	user_mode = ((guest_cp0_status & KU_MASK) == KU_USER);
+
+	return user_mode != 0;
+}
+
+static unsigned long kvm_get_guest_ip(void)
+{
+	uint64_t guest_epc = 0x0;
+
+	guest_epc = get_irq_regs()->cp0_epc;
+
+	return guest_epc;
+}
+
+
+static struct perf_guest_info_callbacks kvm_guest_cbs = {
+	.is_in_guest		= kvm_is_in_guest,
+	.is_user_mode		= kvm_is_user_mode,
+	.get_guest_ip		= kvm_get_guest_ip,
+};
+
 int kvm_arch_init(void *opaque)
 {
+	perf_register_guest_info_callbacks(&kvm_guest_cbs);
+
 	return 0;
 }
 
 void kvm_arch_exit(void)
 {
+	perf_unregister_guest_info_callbacks(&kvm_guest_cbs);
 }
 
 static int __init kvm_mips_init(void)
-- 
1.9.1

