From a6a0af5efc9f0c6a6d6f8b14d09a3d419b7b59ec Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@broadcom.com>
Date: Tue, 13 Aug 2013 09:36:55 -0700
Subject: [PATCH] kvm: remove pcie virtualization hookup for nae/poe/nor/fmn

Commit d5cd315374e747b2d71d32f806156bb776f64cd3 from Broadcom SDK 3.0.2

o The virtualization of nae/poe/nor/fmn does not belong to kernel, and
  we will not virtualize the individual guest pcie register access
  for these blocks.

Signed-off-by: Yonghong Song <ysong@broadcom.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/kvm/kvm_fault.c b/arch/mips/netlogic/kvm/kvm_fault.c
index ab9c43d..59e3fe9 100644
--- a/arch/mips/netlogic/kvm/kvm_fault.c
+++ b/arch/mips/netlogic/kvm/kvm_fault.c
@@ -57,32 +57,18 @@
 #include <asm/netlogic/kvm_xlp.h>
 
 /*
- * This file contains the implementation to somehow virtualize
- * PCIe configuration space for various I/O blocks.
+ * This file contains the implementation to virtualize
+ * PCIe configuration space and PCIe memory mapped space
+ * for various I/O blocks.
  * 
  * 1. The physical memory region of 0x18000000 - 0x1c000000 (64MB) is reserved
  *    in guest for PCIe configuration space access.
- * 2. The physical memory region of 0xc0000000 - 0xc1000000 (16MB) is reserved
- *    for memory mapped configuration spaces for: fmn/nae/poe/usb/regex/srio.
- *
- * For #2, In XLP, the following PCIE devices require memory mapped space
- * for its internal registers:
- *
- *   . fmn   (0 - 0x2060)
- *   . nae   (0 - 0x1ffff)
- *   . poe   (0 - 0x12ff)
- *   . usb   (0 - 0x3ffff)
- *   . regex (0 - 0xffff)
- *   . srio  (0 - 0x1ffff)
+ * 2. The physical memory region of 0x1c000000 - 0x1d000000 (16MB) is reserved
+ *    in guest for PCI configuration space access.
+ * 2. The physical memory region of 0xd0000000 - 0xe0000000 (256MB) is reserved
+ *    for memory mapped device.
  */
 
-#define FMN_PCIE_MEM_BASE	0xc0000000
-#define NAE_PCIE_MEM_BASE	0xc0100000
-#define POE_PCIE_MEM_BASE	0xc0200000
-#define USB_PCIE_MEM_BASE	0xc0300000
-#define RGX_PCIE_MEM_BASE	0xc0400000
-#define RIO_PCIE_MEM_BASE	0xc0500000
-
 static inline void unhandled_exception(const char *func, unsigned long addr,
 	unsigned long epc, unsigned long write)
 {
@@ -90,72 +76,6 @@ static inline void unhandled_exception(const char *func, unsigned long addr,
 		func, addr, epc, write);
 }
 
-static void handle_pcie_fmn(struct pt_regs *regs, unsigned long write,
-		unsigned long address, unsigned long reg_num)
-{
-	if (address == 0x0) {
-		/* not supported during PCIe enumeration */
-		regs->regs[reg_num] = 0xffffffff;
-		return;
-	} else if (address == 0x10) {
-		/* base address 0 register. */
-		if (!write) {
-			regs->regs[reg_num] = FMN_PCIE_MEM_BASE;
-			return;
-		}
-	}
-
-	unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
-}
-
-static void handle_pcie_nae(struct pt_regs *regs, unsigned long write,
-		unsigned long address, unsigned long reg_num)
-{
-	if (address == 0x0) {
-		/* not supported during PCIe enumeration */
-		regs->regs[reg_num] = 0xffffffff;
-		return;
-	} else if (address == 0x10) {
-		/* base address 0 register. */
-		if (!write) {
-			regs->regs[reg_num] = NAE_PCIE_MEM_BASE;
-			return;
-		}
-	}
-
-	unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
-}
-
-static void handle_pcie_poe(struct pt_regs *regs, unsigned long write,
-		unsigned long address, unsigned long reg_num)
-{
-	if (address == 0x0) {
-		/* not supported during PCIe enumeration */
-		regs->regs[reg_num] = 0xffffffff;
-		return;
-	} else if (address == 0x10) {
-		/* base address 0 register. */
-		if (!write) {
-			regs->regs[reg_num] = POE_PCIE_MEM_BASE;
-			return;
-		}
-	}
-
-	unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
-}
-
-static void handle_pcie_nor(struct pt_regs *regs, unsigned long write,
-		unsigned long address, unsigned long reg_num)
-{
-	if (address == 0x0) {
-		/* not supported during PCIe enumeration */
-		regs->regs[reg_num] = 0xffffffff;
-		return;
-	}
-
-	unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
-}
-
 static void handle_pci_config_space(struct pt_regs *regs, unsigned long write,
 		unsigned long address, unsigned long reg_num)
 {
@@ -272,18 +192,6 @@ asmlinkage int do_guest_fault_check(struct pt_regs *regs, unsigned long write,
 			/* pic: dev 2, func 0 */
 			kvm_handle_pcie_pic(regs, write, address & 0xfff, reg_num);
 		}
-		else if ((address & 0xfffff000) == 0x18118000) {
-			/* nae: dev 3, func 0 */
-			handle_pcie_nae(regs, write, address & 0xfff, reg_num);
-		}
-		else if ((address & 0xfffff000) == 0x18119000) {
-			/* poe: dev 3, func 1 */
-			handle_pcie_poe(regs, write, address & 0xfff, reg_num);
-		}
-		else if ((address & 0xfffff000) == 0x18120000) {
-			/* fmn: dev 4, func 0 */
-			handle_pcie_fmn(regs, write, address & 0xfff, reg_num);
-		}
 		else if ((address & 0xfffff000) == 0x18112000) {
 			/* uart: dev 2, func 2 */
 			kvm_handle_pcie_uart(regs, write, address & 0xfff, reg_num);
@@ -296,10 +204,6 @@ asmlinkage int do_guest_fault_check(struct pt_regs *regs, unsigned long write,
 			/* fuse: dev 6, func 1 */
 			kvm_handle_pcie_fuse(regs, write, address & 0xfff, reg_num);
 		}
-		else if ((address & 0xfffff000) == 0x18138000) {
-			/* NOR flash: dev 7, func 0 */
-			handle_pcie_nor(regs, write, address & 0xfff, reg_num);
-		}
 		else {
 			/* disable the device */
 			if (!write && (address & 0xfff) == 0)
-- 
1.9.1

