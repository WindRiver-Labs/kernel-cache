From 7b8301d06575321f0acbe6c8bbed7a1026fe6c95 Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@broadcom.com>
Date: Wed, 19 Jun 2013 16:25:20 -0700
Subject: [PATCH] kvm: skip executing guest code if qemu already made an exit
 request

Commit debe617149285077945d52091d8eca518d05f27b from Broadcom SDK 3.0.2

o This could happen if guest has requested the qemu to exit, but
  qemu has not responded yet (because of qemu thread timer has not
  fired). In this case, the control will be back to
  kvm_arch_vcpu_ioctl_run. Make sure to skip to execute guest code
  as guest state may already be in an inconsistent state.

Signed-off-by: Yonghong Song <ysong@broadcom.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/kvm/kvm.c b/arch/mips/kvm/kvm.c
index 3749235..e52655d 100644
--- a/arch/mips/kvm/kvm.c
+++ b/arch/mips/kvm/kvm.c
@@ -297,13 +297,17 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)
 	if (vcpu->sigset_active)
 		sigprocmask(SIG_SETMASK, &vcpu->sigset, &sigsaved);
 
-	local_irq_disable();
-	kvm_guest_enter();
-	local_irq_enable();
-	ret = __kvm_vcpu_run_guest(vcpu);
-	local_irq_disable();
-	kvm_guest_exit();
-	local_irq_enable();
+	if (vcpu->kvm->arch.exit_request == 0) {
+		local_irq_disable();
+		kvm_guest_enter();
+		local_irq_enable();
+		ret = __kvm_vcpu_run_guest(vcpu);
+		local_irq_disable();
+		kvm_guest_exit();
+		local_irq_enable();
+	} else {
+		ret = KVM_EXIT_QUIT_KVM << 24;
+	}
 
 	/* The execution reaches here because QEMU needs to be involved:
 	 * . I/O
@@ -320,12 +324,14 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)
 		run->mips_spawn_thread.start_hw_cpuid = ret & 0xff;
 		break;
 	case KVM_EXIT_REQUEST_QUIT:
-		/* quit kvm */
+		/* request to quit kvm */
 		run->exit_reason = ret >> 24;
 		break;
 	case KVM_EXIT_QUIT_KVM:
 		/* quit kvm */
 		run->exit_reason = ret >> 24;
+		/* also clear guestctl1 */
+		__write_32bit_c0_register($10, 4, 0);
 		break;
 	case KVM_EXIT_CHAR_PRINT:
 		/* print out a char */
@@ -664,8 +670,6 @@ long kvm_arch_vm_ioctl(struct file *filp, unsigned int ioctl, unsigned long arg)
 	case KVM_MIPS_EXIT_REQUEST:
 	{
 		kvm->arch.exit_request = (int)(long)argp;
-		/* also clear guestctl1 */
-		__write_32bit_c0_register($10, 4, 0);
 		break;
 	}
 	case KVM_MIPS_INFO_REQUEST:
-- 
1.9.1

