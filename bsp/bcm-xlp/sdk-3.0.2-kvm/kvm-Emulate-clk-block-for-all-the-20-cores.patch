From a70e3d573ebcd392499b3e0fd71c890754e040ef Mon Sep 17 00:00:00 2001
From: Ashok Kumar <ashoks@broadcom.com>
Date: Tue, 8 Apr 2014 01:31:58 -0700
Subject: [PATCH] kvm: Emulate clk block for all the 20 cores

Commit c45c98bfa9e5b6afafe7d3b9b2d66bb68c65630c from Broadcom SDK 3.0.2

Signed-off-by: Ashok Kumar <ashoks@broadcom.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/include/asm/kvm_host.h b/arch/mips/include/asm/kvm_host.h
index dd2affa..d5fc873 100644
--- a/arch/mips/include/asm/kvm_host.h
+++ b/arch/mips/include/asm/kvm_host.h
@@ -109,10 +109,8 @@ struct kvm_arch {
 	} sysmgt;
 	struct {
 		unsigned int reg_0;
-		unsigned int reg_c0;
-		unsigned int reg_c1;
-		unsigned int reg_c2;
-		unsigned int reg_188;
+		unsigned int reg_cpupllctrl[20*4];
+		unsigned int reg_cpupllchgctrl;
 	} clkmgt;
 	struct {
 		int32_t config[16]; /* 16 standard configuration register */
diff --git a/arch/mips/kvm/xlp.c b/arch/mips/kvm/xlp.c
index e75dce8..a86a34d 100644
--- a/arch/mips/kvm/xlp.c
+++ b/arch/mips/kvm/xlp.c
@@ -373,14 +373,15 @@ static void xlp_kvm_init_sysmgt(struct kvm_arch *arch)
 static void xlp_kvm_init_clkmgt(struct kvm_arch *arch)
 {
 	uint64_t clkbase;
-
+	int ii = 0;
 	clkbase = nlm_get_node(0)->sysbase + XLP9XX_CLOCK_FUNC_OFFSET;
 
 	arch->clkmgt.reg_0 = 0xffffffff;
-	arch->clkmgt.reg_c0 = nlm_read_sys_reg(clkbase, 0xc0);
-	arch->clkmgt.reg_c1 = nlm_read_sys_reg(clkbase, 0xc1);
-	arch->clkmgt.reg_c2 = nlm_read_sys_reg(clkbase, 0xc2);
-	arch->clkmgt.reg_188 = nlm_read_sys_reg(clkbase, 0x188);
+
+	for (ii = 0;ii < sizeof(arch->clkmgt.reg_cpupllctrl)/4;ii++)
+		arch->clkmgt.reg_cpupllctrl[ii] = nlm_read_sys_reg(clkbase, 0xc0+ii);
+
+	arch->clkmgt.reg_cpupllchgctrl = nlm_read_sys_reg(clkbase, 0x188);
 }
 
 
diff --git a/arch/mips/netlogic/kvm/kvm_clk.c b/arch/mips/netlogic/kvm/kvm_clk.c
index 9a3f989..55273e8 100644
--- a/arch/mips/netlogic/kvm/kvm_clk.c
+++ b/arch/mips/netlogic/kvm/kvm_clk.c
@@ -76,17 +76,11 @@ void kvm_handle_pcie_clk(struct pt_regs *regs, unsigned long write,
 			case 0:
 				regs->regs[reg_num] = arch->clkmgt.reg_0;
 				break;
-			case 0xc0:
-				regs->regs[reg_num] = arch->clkmgt.reg_c0;
-				break;
-			case 0xc1:
-				regs->regs[reg_num] = arch->clkmgt.reg_c1;
-				break;
-			case 0xc2:
-				regs->regs[reg_num] = arch->clkmgt.reg_c2;
+			case 0xc0 ... 0x10f:
+				regs->regs[reg_num] = arch->clkmgt.reg_cpupllctrl[rindex-0xc0];
 				break;
 			case 0x188:
-				regs->regs[reg_num] = arch->clkmgt.reg_188;
+				regs->regs[reg_num] = arch->clkmgt.reg_cpupllchgctrl;
 				break;
 			default:
 				unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
-- 
1.9.1

