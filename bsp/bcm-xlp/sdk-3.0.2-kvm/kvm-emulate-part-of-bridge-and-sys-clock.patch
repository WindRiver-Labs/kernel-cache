From 96fab9c6de1c0180276cf9c5013c24bc99eb3666 Mon Sep 17 00:00:00 2001
From: Yonghong Song <ysong@broadcom.com>
Date: Mon, 16 Sep 2013 21:54:44 -0700
Subject: [PATCH] kvm: emulate part of bridge and sys/clock

Commit c1f5a0404d5b84ab0939dd9def7c149166150da7 from Broadcom SDK 3.0.2

o This is needed for new pci subsystem implementation, where
  a bunch of hacks are removed.

Signed-off-by: Yonghong Song <ysong@broadcom.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/include/asm/kvm_host.h b/arch/mips/include/asm/kvm_host.h
index 79ee561..c832837 100644
--- a/arch/mips/include/asm/kvm_host.h
+++ b/arch/mips/include/asm/kvm_host.h
@@ -105,7 +105,7 @@ struct kvm_arch {
 		unsigned int regs[MAX_XLP_SYSMGT_REG_NUM];
 	} sysmgt;
 	struct {
-		int32_t config0;
+		int32_t config[16]; /* 16 standard configuration register */
 		int32_t pcie_busnum[4];
 		int32_t pcie_membase[4];
 		int32_t pcie_memlimit[4];
diff --git a/arch/mips/include/asm/netlogic/kvm_xlp.h b/arch/mips/include/asm/netlogic/kvm_xlp.h
index 4d3d442..1c206bf 100644
--- a/arch/mips/include/asm/netlogic/kvm_xlp.h
+++ b/arch/mips/include/asm/netlogic/kvm_xlp.h
@@ -128,6 +128,10 @@ extern void kvm_handle_pcie_sysmgt(struct pt_regs *regs, unsigned long write,
 extern void kvm_handle_pcie_fuse(struct pt_regs *regs, unsigned long write,
 	unsigned long address, unsigned long reg_num);
 
+/* defined in arch/mips/netlogic/kvm/kvm_clk.c */
+extern void kvm_handle_pcie_clk(struct pt_regs *regs, unsigned long write,
+	unsigned long address, unsigned long reg_num);
+
 /* defined in arch/mips/netlogic/kvm/kvm_bridge.c */
 extern void kvm_handle_pcie_bridge(struct pt_regs *regs, unsigned long write,
 	unsigned long address, unsigned long reg_num);
diff --git a/arch/mips/kvm/xlp.c b/arch/mips/kvm/xlp.c
index 0ed8f70..f90a14f 100644
--- a/arch/mips/kvm/xlp.c
+++ b/arch/mips/kvm/xlp.c
@@ -374,7 +374,12 @@ static void xlp_kvm_init_bridge(struct kvm_arch *arch)
 {
 	int i;
 
-	arch->bridge.config0 = 0xffffffff;
+	memset(arch->bridge.config, 0, 16 * sizeof(uint32_t));
+	arch->bridge.config[0] = 0x900114e4;
+	arch->bridge.config[2] = 0x06800000;
+	arch->bridge.config[3] = 0x00810000;
+	arch->bridge.config[6] = 0x10101; /* primary: 1, secondary 1, subordinate 1 */
+
 	for (i = 0; i < 4; i++) {
 		arch->bridge.pcie_busnum[i]   = 0x0;
 		arch->bridge.pcie_membase[i]  = 0x0;
diff --git a/arch/mips/netlogic/kvm/Makefile b/arch/mips/netlogic/kvm/Makefile
index b816d53..7289243 100644
--- a/arch/mips/netlogic/kvm/Makefile
+++ b/arch/mips/netlogic/kvm/Makefile
@@ -2,4 +2,4 @@ EXTRA_CFLAGS := -Werror
 EXTRA_CFLAGS := $(CFLAGS)
 
 obj-y = kvm_traps.o kvm_fault.o kvm_pic.o kvm_uart.o kvm_sysmgt.o kvm_fuse.o \
-	kvm_bridge.o kvm_pcie.o
+	kvm_bridge.o kvm_pcie.o kvm_clk.o
diff --git a/arch/mips/netlogic/kvm/kvm_bridge.c b/arch/mips/netlogic/kvm/kvm_bridge.c
index 38ee6e1..840c216 100644
--- a/arch/mips/netlogic/kvm/kvm_bridge.c
+++ b/arch/mips/netlogic/kvm/kvm_bridge.c
@@ -71,11 +71,13 @@ void kvm_handle_pcie_bridge(struct pt_regs *regs, unsigned long write,
 
 // printk("!!! bridge register: 0x%x, reg_num: %d, epc: 0x%lx\n", rindex, (int)reg_num, regs->cp0_epc);
 
-	if (rindex == 0x0) {
-		if (!write) {
-			regs->regs[reg_num] = arch->bridge.config0;
-			return;
+	if (rindex <= 0x0f) {
+		if (write) {
+			arch->bridge.config[rindex] = regs->regs[reg_num];
+		} else {
+			regs->regs[reg_num] = arch->bridge.config[rindex];
 		}
+		return;
 	}
 	else if (rindex == 0x99 || rindex == 0x9a || rindex == 0x9b
 		|| rindex == 0x9c) {
diff --git a/arch/mips/netlogic/kvm/kvm_clk.c b/arch/mips/netlogic/kvm/kvm_clk.c
new file mode 100644
index 0000000..461633b
--- /dev/null
+++ b/arch/mips/netlogic/kvm/kvm_clk.c
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2003-2013 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the Broadcom
+ * license below:
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/string.h>
+#include <linux/types.h>
+#include <linux/ptrace.h>
+#include <linux/mman.h>
+#include <linux/mm.h>
+#include <linux/smp.h>
+#include <linux/vt_kern.h>		/* For unblank_screen() */
+#include <linux/module.h>
+#include <linux/kvm.h>
+#include <linux/kvm_host.h>
+
+#include <asm/branch.h>
+#include <asm/mmu_context.h>
+#include <asm/uaccess.h>
+#include <asm/ptrace.h>
+#include <asm/highmem.h>		/* For VMALLOC_END */
+
+#include <asm/netlogic/kvm_xlp.h>
+
+static inline void unhandled_exception(const char *func, unsigned long addr,
+	unsigned long epc, unsigned long write)
+{
+	printk("%s: unhandled address %lx, epc %lx, is_write %lx\n",
+		func, addr, epc, write);
+}
+
+void kvm_handle_pcie_clk(struct pt_regs *regs, unsigned long write,
+		unsigned long address, unsigned long reg_num)
+{
+	unsigned int rindex = address >> 2;
+
+	if (rindex == 0x101) {
+		/* cpu pll control 1 */
+		return;
+	} else if (rindex == 0x1c8) {
+		/* cpu pll change control */
+		if (!write)
+			regs->regs[reg_num] = 0x0;
+		return;
+	}
+
+	unhandled_exception(__FUNCTION__, address, regs->cp0_epc, write);
+}
diff --git a/arch/mips/netlogic/kvm/kvm_fault.c b/arch/mips/netlogic/kvm/kvm_fault.c
index 159a791..5349c77 100644
--- a/arch/mips/netlogic/kvm/kvm_fault.c
+++ b/arch/mips/netlogic/kvm/kvm_fault.c
@@ -231,6 +231,10 @@ asmlinkage int do_guest_fault_check(struct pt_regs *regs, unsigned long write,
 			/* fuse: dev 6, func 1 */
 			kvm_handle_pcie_fuse(regs, write, address & 0xfff, reg_num);
 		}
+		else if ((address & 0xfffff000) == 0x18132000) {
+			/* fuse: dev 6, func 2 */
+			kvm_handle_pcie_clk(regs, write, address & 0xfff, reg_num);
+		}
 		else if (((address & 0xfff00000) != 0x18000000) && ((address & 0xfff00000) != 0x18100000)) {
 			/* not bus 0, bus 1, a real bridge */
 			kvm_handle_pcie_pcie(regs, write, address, reg_num, badinstr, epc_badinstr);
-- 
1.9.1

