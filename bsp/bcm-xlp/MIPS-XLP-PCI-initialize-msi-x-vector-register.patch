From bae4cdd9cb01dd71c1b48de9a009c37bfb1d0c93 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Tue, 29 Oct 2013 13:46:33 +0800
Subject: [PATCH] MIPS: XLP: PCI: initialize msi-x vector register
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Initialize msi-x vector register.

The XLP datasheet Chapter "MSI-X Control Register" points out:

Bits	Field Name	Field Description	Access Reset Value
26:16 MSIX_TBL_SIZE    MSI-X table size. This
                       field is encoded as
		       ¡®table size - 1¡¯.
                       For example, a value of
		       0x003 indicates the MSI-X
		       table size is 4.
                       0x000: table size = 1
                       0x001: table size = 2
                       0x002: table size = 3
                       ...........
                       0x7FF: table size = 2047
                                                   R/W Programmable

But due to realization of xlp irq in linux, each slot can only provide
XLP_MSIX_PER_SLOT(8) irq (say the table size is 8). So if we don't
initialize the register correctly we get MSIX_TBL_SIZE = 2048 by default
we can't satisfy this kind of request.

Signed-off-by: Yong Zhang <yong.zhang@windriver.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/pci/pci-xlp-msi.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/arch/mips/pci/pci-xlp-msi.c b/arch/mips/pci/pci-xlp-msi.c
index 0c34b5b..d5d4291 100644
--- a/arch/mips/pci/pci-xlp-msi.c
+++ b/arch/mips/pci/pci-xlp-msi.c
@@ -109,6 +109,9 @@ void xlp_msi_controller_init(u8 node, int fn)
 		(virt_to_phys(xlp_msix_addr_start(node, fn)) >> 8));
 	nlh_pci_w32r(node, fn, 0x250,
 		(virt_to_phys(xlp_msix_addr_start(node, fn) + XLP_MSIX_ADDR_SIZE) >> 8));
+	msi = nlh_pci_r32r(node, fn, 0x2c);
+	msi &= ~(0x7ff << 16);
+	nlh_pci_w32r(node, fn, 0x2c, msi | (XLP_MSIX_PER_SLOT - 1) << 16);
 }
 
 /*
-- 
1.8.4.93.g57e4c17

