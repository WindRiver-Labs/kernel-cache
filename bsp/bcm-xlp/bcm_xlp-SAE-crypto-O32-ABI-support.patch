From a1db60ba0017007023e54c9fe36f787af6aa2813 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Tue, 27 Nov 2012 09:29:57 +0530
Subject: [PATCH 736/761] bcm_xlp: SAE: crypto : O32 ABI support

Based on Broadcom SDK 2.3.

Signed-off-by: Hareesh R <hareeshr@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/sae/cryptoapi.c |   32 ++++++++++++++++----------------
 drivers/crypto/sae/cryptodev.h |   12 ++++++------
 drivers/crypto/sae/nlmcrypto.h |    2 +-
 3 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/drivers/crypto/sae/cryptoapi.c b/drivers/crypto/sae/cryptoapi.c
index 4157226..7722d5f 100644
--- a/drivers/crypto/sae/cryptoapi.c
+++ b/drivers/crypto/sae/cryptoapi.c
@@ -116,11 +116,11 @@ static inline int crypto_async_pop_msg(struct nlm_crypto_ctx *ctx, void **ctrl,
 	ctx->mhead = tmp;
 	ctx->rsp_pend--;
 	if(ctrl)
-		*ctrl = (void *)ctx->req[tmp].msg[0];
+		*ctrl = (void *)(long)ctx->req[tmp].msg[0];
 	if(param)
-		*param = (void *)ctx->req[tmp].msg[1];
+		*param = (void *)(long)ctx->req[tmp].msg[1];
 	if(arg)
-		*arg = (void *)ctx->req[tmp].msg[2];
+		*arg = (void *)(long)ctx->req[tmp].msg[2];
 	return 1;
 }
 
@@ -201,7 +201,7 @@ nlm_crypto_ctx_t *nlm_crypto_open_sync_session(int sync_mode, int cpu, void *arg
 	ctx->mode = sync_mode;
 	ctx->max_msgs = max_outstanding_reqs;
 	ctx->rsp_pend = 0;
-	ctx->arg = (uint64_t)arg;
+	ctx->arg = (uint64_t)(long)arg;
 	ctx->lock = 0;
 
 	if((sync_mode == NLM_CRYPTO_MODE_SYNC_EXLVC) && (iparam.sae_rx_sync_vc >= 0)) {
@@ -286,7 +286,7 @@ nlm_crypto_ctx_t *nlm_crypto_open_async_session(int max_outstanding_reqs,
 	ctx->rx_vc = iparam.sae_rx_vc;
 	ctx->max_msgs = max_outstanding_reqs;
 	ctx->rsp_pend = 0;
-	ctx->arg = (uint64_t)arg;
+	ctx->arg = (uint64_t)(long)arg;
 
 #ifdef NLM_CRYPTO_LINUX_U
 	ctx->fd = eventfd(0, 0);
@@ -299,7 +299,7 @@ nlm_crypto_ctx_t *nlm_crypto_open_async_session(int max_outstanding_reqs,
 	
 	
 #endif
-	ctx->async_callback = (uint64_t)callback;
+	ctx->async_callback = (uint64_t)(long)callback;
 	ctx->mhead = 0;
 	ctx->mtail = 0;
 	
@@ -412,7 +412,7 @@ struct nlm_crypto_rsa_param *nlm_crypto_rsa_param_alloc(nlm_crypto_ctx_t *ctxt,
 		return NULL;
 	}
 	pmem = (char *)((unsigned long)prsa + sizeof(struct nlm_crypto_rsa_param));
-	pmem = (char *)crypto_roundup((unsigned long long)pmem, (unsigned long long)XLP_CACHELINE_SIZE);
+	pmem = (char *)(long)crypto_roundup((unsigned long long)(long)pmem, (unsigned long long)XLP_CACHELINE_SIZE);
 	params = (char **)&prsa->modexp;
 	for(i = 0; i < NLM_CRYPTO_RSA_PARAMS_NELMNTS; i++)
 		*(params + i) = (char *)((unsigned long)pmem + (blksz_nbytes * i));
@@ -456,7 +456,7 @@ struct  nlm_crypto_ecc_param *nlm_crypto_ecc_param_alloc(nlm_crypto_ctx_t *ctxt,
 	}
 	
 	pmem = (char *)((unsigned long)pecc + sizeof(struct nlm_crypto_ecc_param));
-	pmem = (char *)crypto_roundup((unsigned long long)pmem, (unsigned long long)XLP_CACHELINE_SIZE);
+	pmem = (char *)(long)crypto_roundup((unsigned long long)(long)pmem, (unsigned long long)XLP_CACHELINE_SIZE);
 	params = (char **)&pecc->padd;
 	for(i = 0; i < NLM_CRYPTO_ECC_PARAMS_NELMNTS; i++)
 		*(params + i) = (char *)((unsigned long)pmem + (blksz_nbytes * i));
@@ -788,9 +788,9 @@ cont_poll:
 		}
 		crypto_unlock((cryptolock_t *)&ctx->lock);
 		/* save the param and result */
-		ctx->req[rv].msg[0] = (uint64_t)ctrl;
-		ctx->req[rv].msg[1] = (uint64_t)param;
-		ctx->req[rv].msg[2] = (uint64_t)arg;
+		ctx->req[rv].msg[0] = (uint64_t)(long)ctrl;
+		ctx->req[rv].msg[1] = (uint64_t)(long)param;
+		ctx->req[rv].msg[2] = (uint64_t)(long)arg;
 
 #ifdef NLM_CRYPTO_LINUX_U
 		msg2 = gen_msg_2(ctx, rv);
@@ -866,13 +866,13 @@ int nlm_crypto_aync_callback(enum nlm_crypto_op_type_t type, unsigned long long
 
 	nlm_dbg_print("%s in type %d instance %d ctx %lx func %lx\n", 
 			__FUNCTION__, type, instance, (long)ctx, (long)ctx->async_callback);
-	ctrl = (void *)ctx->req[instance].msg[0];
-	param = (void *)ctx->req[instance].msg[1];
-	arg = (void *)ctx->req[instance].msg[2];
+	ctrl = (void *)(long)ctx->req[instance].msg[0];
+	param = (void *)(long)ctx->req[instance].msg[1];
+	arg = (void *)(long)ctx->req[instance].msg[2];
 
-	func = (void *)ctx->async_callback;
+	func = (void *)(long)ctx->async_callback;
 
-	ctx->req[instance].msg[1] = (uint64_t)NULL;
+	ctx->req[instance].msg[1] = (uint64_t)(long)NULL;
 
 	crypto_lock((cryptolock_t *)&ctx->lock);
 	tmp = (ctx->mhead + 1) % ctx->max_msgs;
diff --git a/drivers/crypto/sae/cryptodev.h b/drivers/crypto/sae/cryptodev.h
index 30671fd..aefd48a 100644
--- a/drivers/crypto/sae/cryptodev.h
+++ b/drivers/crypto/sae/cryptodev.h
@@ -40,12 +40,12 @@
 
 #define NLM_CRYPTO_IOC 'C'
 
-#define NLM_CRYPTO_CTXT_ALLOC 			_IOWR(NLM_CRYPTO_IOC, 1, unsigned long long *)
-#define NLM_CRYPTO_CTXT_FREE			_IOWR(NLM_CRYPTO_IOC, 2, unsigned long long *)
-#define NLM_CRYPTO_GET_RX_VC_NUMS 		_IOWR(NLM_CRYPTO_IOC, 3, unsigned int *)
-#define NLM_CRYPTO_GET_COMMON_SHM_ADDR_SZ 	_IOWR(NLM_CRYPTO_IOC, 4, unsigned long long *)
-#define NLM_CRYPTO_GET_SAE_VC_NUMS		_IOWR(NLM_CRYPTO_IOC, 5, unsigned int *)
-#define NLM_CRYPTO_GET_CHIP_FEATURE		_IOWR(NLM_CRYPTO_IOC, 6, unsigned int *)
+#define NLM_CRYPTO_CTXT_ALLOC 			_IOWR(NLM_CRYPTO_IOC, 1, unsigned long long )
+#define NLM_CRYPTO_CTXT_FREE			_IOWR(NLM_CRYPTO_IOC, 2, unsigned long long )
+#define NLM_CRYPTO_GET_RX_VC_NUMS 		_IOWR(NLM_CRYPTO_IOC, 3, unsigned int )
+#define NLM_CRYPTO_GET_COMMON_SHM_ADDR_SZ 	_IOWR(NLM_CRYPTO_IOC, 4, unsigned long long )
+#define NLM_CRYPTO_GET_SAE_VC_NUMS		_IOWR(NLM_CRYPTO_IOC, 5, unsigned int )
+#define NLM_CRYPTO_GET_CHIP_FEATURE		_IOWR(NLM_CRYPTO_IOC, 6, unsigned int )
 
 
 #ifndef XLP_CACHELINE_SIZE
diff --git a/drivers/crypto/sae/nlmcrypto.h b/drivers/crypto/sae/nlmcrypto.h
index d087a6a..adcd5a8 100755
--- a/drivers/crypto/sae/nlmcrypto.h
+++ b/drivers/crypto/sae/nlmcrypto.h
@@ -914,7 +914,7 @@ static inline void nlm_crypto_modify_auth_clobber_l3_alloc(struct nlm_crypto_pkt
 	int hashout_l3alloc, int hashclobber )
 {
 	unsigned long long desc =  ccpu_to_be64(param->desc0);
-	desc = ( desc & 0xEFFFFFFFFFFFFFFF ) | shift_lower_bits(hashout_l3alloc, 60, 1);
+	desc = ( desc & 0xEFFFFFFFFFFFFFFFULL ) | shift_lower_bits(hashout_l3alloc, 60, 1);
 	param->desc0 = ccpu_to_be64(desc);
 	
 	desc = ccpu_to_be64(param->desc2);
-- 
1.7.10.4

