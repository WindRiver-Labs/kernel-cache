From 169362ea0dee7000026c575130d710f86ba319b5 Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikasg@netlogicmicro.com>
Date: Mon, 29 Aug 2011 13:12:25 +0530
Subject: [PATCH 320/761] Add support for 6 Core CPU.

1) CPU ID defines moved to hal headers.
2) 6 core version CPU-IDs included
3) Build fixes for above.

Based on Broadcom SDK 2.3.

Signed-off-by: Vikas Gupta <vikasg@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/xlp.h        |   21 +----
 arch/mips/include/asm/netlogic/xlp8xx/cpu.h |    1 +
 arch/mips/netlogic/xlp/setup.c              |  110 ++++++++++++++++++---------
 3 files changed, 76 insertions(+), 56 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/xlp.h b/arch/mips/include/asm/netlogic/xlp.h
index 997d856..f6cb03f 100644
--- a/arch/mips/include/asm/netlogic/xlp.h
+++ b/arch/mips/include/asm/netlogic/xlp.h
@@ -29,26 +29,7 @@ THE POSSIBILITY OF SUCH DAMAGE.
 #include <linux/types.h>
 #include <asm/cpu.h>
 #include <asm/mipsregs.h>
-
-#define CHIP_PROCESSOR_ID_XLP_8XX   0x00
-#define CHIP_PROCESSOR_ID_XLP_832   0x10
-#define CHIP_PROCESSOR_ID_XLP_816   0x14
-#define CHIP_PROCESSOR_ID_XLP_432   0x90
-#define CHIP_PROCESSOR_ID_XLP_416   0x94
-#define CHIP_PROCESSOR_ID_XLP_408   0x95
-
-/*3XX series*/
-#define CHIP_PROCESSOR_ID_XLP_3XX   0x11
-	#define CHIP_PROCESSOR_ID_XLP_316   0x00	
-	#define CHIP_PROCESSOR_ID_XLP_308   0x11
-	#define CHIP_PROCESSOR_ID_XLP_304   0x11
-#define CHIP_PROCESSOR_ID_XLP_208   0xB5
-#define CHIP_PROCESSOR_ID_XLP_204   0xB7
-#define CHIP_PROCESSOR_ID_XLP_104   0xF7
-
-#define XLP_REVISION_A0 	0x00
-#define XLP_REVISION_A1 	0x01
-#define XLP_REVISION_A2 	0x02
+#include <asm/netlogic/hal/nlm_hal_xlp_dev.h>
 
 #define MAX_CPU_REV_LEN		100
 #define NLM_MAX_CPU_NODE		4
diff --git a/arch/mips/include/asm/netlogic/xlp8xx/cpu.h b/arch/mips/include/asm/netlogic/xlp8xx/cpu.h
index e2bf0d3..cbde2c2 100644
--- a/arch/mips/include/asm/netlogic/xlp8xx/cpu.h
+++ b/arch/mips/include/asm/netlogic/xlp8xx/cpu.h
@@ -97,6 +97,7 @@
 #endif
 
 #ifdef NLM_HAL_LINUX_KERNEL		/* Hal requires phy add :-) */
+#define DEFAULT_XLP_IO_BASE_PHYS        0x18000000
 #define DEFAULT_CPU_IO_BASE		DEFAULT_XLP_IO_BASE_PHYS
 #else
 #define DEFAULT_CPU_IO_BASE		DEFAULT_XLP_IO_BASE_VIRT
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index 247d084..6deb993 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -708,59 +708,94 @@ noloadermask:
 	return 0;
 }
 
+
 static int get_xlp_proc_name(void)
 {
-	unsigned int cfg0;
-	int processor_id = ((read_c0_prid() & 0xff00) >> 8);
+	unsigned int processor_id = get_proc_id();
+	unsigned int cfg0 =  efuse_cfg0();
+	unsigned int cfg1 =  efuse_cfg1();
+	//printk("efuse_cfg6 =0x%x \n", get_proc_id());
+	//printk("efuse_cfg0 =0x%x \n", efuse_cfg0());
+        //printk("efuse_cfg1 =0x%x \n", efuse_cfg1());
+
 
+	
 	switch (processor_id) {
-	case CHIP_PROCESSOR_ID_XLP_8XX:
-	case CHIP_PROCESSOR_ID_XLP_832:
-		strcpy(cpu_model_info, "XLP832");
-		break;
-	case CHIP_PROCESSOR_ID_XLP_816:
-		strcpy(cpu_model_info, "XLP816");
+		case CHIP_PROCESSOR_ID_XLP_8XX:		/*defulet set to XLP8XX */
+		case CHIP_PROCESSOR_ID_XLP_8_4_XX:
+			switch((cfg0 & EFUSE_CFG0_MASK) | (cfg1<<EFUSE_CFG1_SHIFT)) {
+				case XLP_832:
+					strcpy(cpu_model_info, "XLP832");
+				break;
+				case XLP_824:
+					strcpy(cpu_model_info, "XLP824");
+				break;
+				case XLP_816:
+					strcpy(cpu_model_info, "XLP816");
+				break;
+				case XLP_432:
+					strcpy(cpu_model_info, "XLP432");
+				break;
+				case XLP_424:
+					strcpy(cpu_model_info, "XLP424");
+				break;
+				case XLP_416:
+					strcpy(cpu_model_info, "XLP416");
+				break;
+				case XLP_408:
+					strcpy(cpu_model_info, "XLP408");
+				break;
+				default:
+					printk("No category found in XLP 8XX/4XX. Default to XLP832\n");
+					strcpy(cpu_model_info, "XLP832");
+				return 0;
+						
+			}
+		break;   
+		/*Backward compatibility for XLP8XX/XLP4XX A0/A1/A2*/
+		case CHIP_PROCESSOR_ID_XLP_816:
+			strcpy(cpu_model_info, "XLP816");
 		break;
-	case CHIP_PROCESSOR_ID_XLP_432:
-		strcpy(cpu_model_info, "XLP432");
+		case CHIP_PROCESSOR_ID_XLP_432:
+			strcpy(cpu_model_info, "XLP432");
 		break;
-	case CHIP_PROCESSOR_ID_XLP_416:
-		strcpy(cpu_model_info, "XLP416");
+		case CHIP_PROCESSOR_ID_XLP_416:
+			strcpy(cpu_model_info, "XLP416");
 		break;
-	case CHIP_PROCESSOR_ID_XLP_408:
-		strcpy(cpu_model_info, "XLP408");
+		case CHIP_PROCESSOR_ID_XLP_408:
+			strcpy(cpu_model_info, "XLP408");
 		break;
-	case CHIP_PROCESSOR_ID_XLP_3XX:
-		strcpy(cpu_model_info, "XLP3");
-		cfg0 = nlm_hal_read_32bit_reg((((KSEG1 + 0x18000000 + 0x35000) & 0x1fffffff) + 0x100), (EFUSE_DEVICE_CFG0));
-		switch (cfg0 & 0xf){
-			case CPU_XLP_316:
-				strcat(cpu_model_info, "16");
+		/*XLP3XX series*/
+		case CHIP_PROCESSOR_ID_XLP_3XX:
+			strcpy(cpu_model_info, "XLP3");
+			switch (cfg0 & 0xf){
+				case CPU_XLP_316:
+					strcat(cpu_model_info, "16");
 				break;
-			case CPU_XLP_308:
-				strcat(cpu_model_info, "08");
+				case CPU_XLP_308:
+					strcat(cpu_model_info, "08");
 				break;
-			case CPU_XLP_304:
-				strcat(cpu_model_info, "04");
+				case CPU_XLP_304:
+					strcat(cpu_model_info, "04");
 				break;
-			default:
-				strcat(cpu_model_info, "??");
+				default:
+					strcat(cpu_model_info, "??");
 				break;
 
-		}
+			}
 		
 		break;
-	case CHIP_PROCESSOR_ID_XLP_208:
-		strcpy(cpu_model_info, "XLP208");
+		case CHIP_PROCESSOR_ID_XLP_208:
+			strcpy(cpu_model_info, "XLP208");
 		break;
-	case CHIP_PROCESSOR_ID_XLP_204:
-		strcpy(cpu_model_info, "XLP204");
+		case CHIP_PROCESSOR_ID_XLP_204:
+			strcpy(cpu_model_info, "XLP204");
 		break;
-	case CHIP_PROCESSOR_ID_XLP_104:
-		strcpy(cpu_model_info, "XLP104");
+		case CHIP_PROCESSOR_ID_XLP_104:
+			strcpy(cpu_model_info, "XLP104");
 		break;
-	default:
-		strcpy(cpu_model_info, "XLP???");
+		default:
+			strcpy(cpu_model_info, "XLP???");
 		return -1;
 	}
 
@@ -781,12 +816,15 @@ static int get_xlp_revision(void)
 	case XLP_REVISION_A2:
 		strcpy(cpu_model_info + PROCESSOR_ID_MAX_LEN, " Rev A2");
 		break;
+	case XLP_REVISION_B0:
+		strcpy(cpu_model_info + PROCESSOR_ID_MAX_LEN, " Rev B0");
+		break;
 	default:
 		strcpy(cpu_model_info + PROCESSOR_ID_MAX_LEN, " Rev ??");
 		return -1;
 	}
 
-	return 0;
+	return revision;
 }
 
 char* get_cpu_info(void)
-- 
1.7.10.4

