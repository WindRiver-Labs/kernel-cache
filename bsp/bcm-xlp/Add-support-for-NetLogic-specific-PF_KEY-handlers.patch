From 4ab77455196c8e1318ce227b2d6914db476efee0 Mon Sep 17 00:00:00 2001
From: Xiaoyi Liu <xliu@netlogicmicro.com>
Date: Tue, 29 Nov 2011 16:10:03 -0800
Subject: [PATCH 492/761] Add support for NetLogic specific PF_KEY handlers

This support needs to be enabled to work inconjuction
with NetLogic's IPSEC implementation.

Based on Broadcom SDK 2.3.

Signed-off-by: Xiaoyi Liu <xliu@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 include/linux/pfkeyv2.h |    3 ++-
 net/key/af_key.c        |   49 +++++++++++++++++++++++++++++++++++++++++++++++
 net/xfrm/Kconfig        |    7 +++++++
 3 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/include/linux/pfkeyv2.h b/include/linux/pfkeyv2.h
index 0b80c80..30ad6ef 100644
--- a/include/linux/pfkeyv2.h
+++ b/include/linux/pfkeyv2.h
@@ -261,7 +261,8 @@ struct sadb_x_kmaddress {
 #define SADB_X_SPDDELETE2	22
 #define SADB_X_NAT_T_NEW_MAPPING	23
 #define SADB_X_MIGRATE		24
-#define SADB_MAX		24
+#define SADB_X_NLMS_PRIVATE	25
+#define SADB_MAX		25
 
 /* Security Association flags */
 #define SADB_SAFLAGS_PFS	1
diff --git a/net/key/af_key.c b/net/key/af_key.c
index 7e5d927..705f9a6 100644
--- a/net/key/af_key.c
+++ b/net/key/af_key.c
@@ -2721,7 +2721,30 @@ static int pfkey_spdflush(struct sock *sk, struct sk_buff *skb, const struct sad
 
 typedef int (*pfkey_handler)(struct sock *sk, struct sk_buff *skb,
 			     const struct sadb_msg *hdr, void * const *ext_hdrs);
+
+/*
+ * PFKEY handlers specific to NetLogic IPSec implementation.
+ */
+static int pfkey_nlms_op(struct sock *sk, struct sk_buff *skb,
+			 struct sadb_msg *hdr, void **ext_hdrs)
+{
+	switch (hdr->sadb_msg_type) {
+	case SADB_X_NLMS_PRIVATE:
+		/* This is the msg send back by IPsec to indicate the previous
+		 * pfkey msg has been processed. Kernel should go ahead to
+		 * send back the response to the sender of the PFKEY command.
+		 */
+		pfkey_broadcast(skb_clone(skb, GFP_KERNEL),
+				GFP_ATOMIC, BROADCAST_ALL, NULL, sock_net(sk));
+		break;
+	default:
+		break;
+	}
+	return 0;
+}
+
 static pfkey_handler pfkey_funcs[SADB_MAX + 1] = {
+#ifndef CONFIG_NLM_NET_KEY
 	[SADB_RESERVED]		= pfkey_reserved,
 	[SADB_GETSPI]		= pfkey_getspi,
 	[SADB_UPDATE]		= pfkey_add,
@@ -2745,6 +2768,32 @@ static pfkey_handler pfkey_funcs[SADB_MAX + 1] = {
 	[SADB_X_SPDSETIDX]	= pfkey_spdadd,
 	[SADB_X_SPDDELETE2]	= pfkey_spdget,
 	[SADB_X_MIGRATE]	= pfkey_migrate,
+#else
+	[SADB_RESERVED]		= pfkey_nlms_op,
+	[SADB_GETSPI]		= pfkey_nlms_op,
+	[SADB_UPDATE]		= pfkey_nlms_op,
+	[SADB_ADD]		= pfkey_nlms_op,
+	[SADB_DELETE]		= pfkey_nlms_op,
+	[SADB_GET]		= pfkey_get,
+	[SADB_ACQUIRE]		= pfkey_acquire,
+	[SADB_REGISTER]		= pfkey_register,
+	[SADB_EXPIRE]		= NULL,
+	[SADB_FLUSH]		= pfkey_nlms_op,
+	[SADB_DUMP]		= pfkey_nlms_op,
+	[SADB_X_PROMISC]	= pfkey_promisc,
+	[SADB_X_PCHANGE]	= NULL,
+	[SADB_X_SPDUPDATE]      = pfkey_nlms_op,
+	[SADB_X_SPDADD]		= pfkey_nlms_op,
+	[SADB_X_SPDDELETE]      = pfkey_nlms_op,
+	[SADB_X_SPDGET]		= pfkey_spdget,
+	[SADB_X_SPDACQUIRE]     = NULL,
+	[SADB_X_SPDDUMP]	= pfkey_nlms_op,
+	[SADB_X_SPDFLUSH]       = pfkey_nlms_op,
+	[SADB_X_SPDSETIDX]      = pfkey_spdadd,
+	[SADB_X_SPDDELETE2]     = pfkey_spdget,
+	[SADB_X_MIGRATE]	= pfkey_migrate,
+	[SADB_X_NLMS_PRIVATE]   = pfkey_nlms_op,
+#endif
 };
 
 static int pfkey_process(struct sock *sk, struct sk_buff *skb, const struct sadb_msg *hdr)
diff --git a/net/xfrm/Kconfig b/net/xfrm/Kconfig
index 6d08167..f0adff0 100644
--- a/net/xfrm/Kconfig
+++ b/net/xfrm/Kconfig
@@ -78,3 +78,10 @@ config NET_KEY_MIGRATE
 
 	  If unsure, say N.
 
+config NLM_NET_KEY
+        bool "NetLogic PF_KEY"
+        depends on NET_KEY && EXPERIMENTAL
+        ---help---
+          Enable NetLogic specific PF_KEY handlers.
+
+          Say Y unless you know what you are doing.
-- 
1.7.10.4

