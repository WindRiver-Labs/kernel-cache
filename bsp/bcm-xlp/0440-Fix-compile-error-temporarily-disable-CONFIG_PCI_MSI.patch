From a49e10edd8e452e4274342be6c5a306298387e8e Mon Sep 17 00:00:00 2001
From: Zi Shen Lim <zlim@netlogicmicro.com>
Date: Mon, 3 Oct 2011 19:00:53 -0700
Subject: [PATCH 440/762] Fix compile error: temporarily disable CONFIG_PCI_MSI_XLP

Based on Broadcom SDK 2.3.

Signed-off-by: Zi Shen Lim <zlim@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/xlp_irq.h |    9 +++++++++
 arch/mips/netlogic/xlp/irq.c             |    7 +++++++
 arch/mips/pci/pci-xlp.c                  |    2 ++
 3 files changed, 18 insertions(+), 0 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/xlp_irq.h b/arch/mips/include/asm/netlogic/xlp_irq.h
index b65219a..9d851de 100644
--- a/arch/mips/include/asm/netlogic/xlp_irq.h
+++ b/arch/mips/include/asm/netlogic/xlp_irq.h
@@ -185,6 +185,15 @@ THE POSSIBILITY OF SUCH DAMAGE.
  * This is a kludge to keep NR_IRQS == 256 and can be expanded later
  * We are using IRQ 192 - 255 for MSI/MSI-X
  * */
+#if 1
+/* XLP_MERGE_TODO: to reenable MSI support
+ * after resolving irq namespace conflict caused by upstream changes */
+#undef CONFIG_PCI_MSI_XLP
+#undef CONFIG_PCI_MSIX_XLP
+#else
+#define CONFIG_PCI_MSI_XLP	1
+#define CONFIG_PCI_MSIX_XLP	1
+#endif
 
 #define XLP_PIC_IRTREG_START 0xB4
 #define XLP_ITE_ENTRIES		8
diff --git a/arch/mips/netlogic/xlp/irq.c b/arch/mips/netlogic/xlp/irq.c
index 44943a0..0495c04 100644
--- a/arch/mips/netlogic/xlp/irq.c
+++ b/arch/mips/netlogic/xlp/irq.c
@@ -1236,6 +1236,7 @@ asmlinkage void plat_irq_dispatch(void)
 		bitmap = rvec_map[rvec].bitmap;
 		spin_unlock_irqrestore(&xlp_pic_lock, flags);
 		switch(base_irq) {
+#ifdef CONFIG_PCI_MSI_XLP
 		/* These are not MSIs, but IRT #s */
 		case XLP_PCIE_LINK_IRQ(0) ... XLP_PCIE_LINK_IRQ(3):
 			/* Here fn # of controller is easily calculated
@@ -1257,6 +1258,7 @@ asmlinkage void plat_irq_dispatch(void)
 			base_irq = XLP_MSIX_IRQ_START(fn);
 			/* now handle it as any other interrupt */
 			break;
+#endif /* CONFIG_PCI_MSI_XLP */
 		default:
 			break;
 		}
@@ -1285,6 +1287,10 @@ int nlm_xlp_request_irq(int irq)
 }
 EXPORT_SYMBOL(nlm_xlp_request_irq);
 
+#ifndef CONFIG_PCI_MSI_XLP
+int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type) { return 0; }
+void arch_teardown_msi_irq(unsigned int msi) { }
+#else /* CONFIG_PCI_MSI_XLP */
 #ifdef arch_setup_msi_irqs
 /*
  * Arch specific setup functions and helpers
@@ -1465,6 +1471,7 @@ int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 }
 EXPORT_SYMBOL(arch_setup_msi_irqs);
 #endif
+#endif /* CONFIG_PCI_MSI_XLP */
 
 static inline void irq_desc_set_chip(struct irq_desc *desc, struct irq_chip *chip)
 {
diff --git a/arch/mips/pci/pci-xlp.c b/arch/mips/pci/pci-xlp.c
index e6ae989..72e8f5c 100644
--- a/arch/mips/pci/pci-xlp.c
+++ b/arch/mips/pci/pci-xlp.c
@@ -617,6 +617,7 @@ u32 calc_msi_vector_offset(int fn)
 	return msi_stat;
 }
 
+#ifdef CONFIG_PCI_MSI_XLP
 /*
  * Clears MSI-X status bits for a controller
  * @fn : controller number
@@ -640,6 +641,7 @@ u32 xlp_msix_status_clear(int fn)
 	//fdebug("Stat cleared %#x\n", nlm_hal_read_32bit_reg(xlp_pci_base, 0x25D));
 	return (msix_stat >> (fn * XLP_MSIX_PER_SLOT));
 }
+#endif /* CONFIG_PCI_MSI_XLP */
 
 #if 0
 /* required only if xlp_ctrl_fn_from_dev() is static */
-- 
1.7.0.4

