From c1e987080432641ef9913bc92f54a7f1319cbc81 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Tue, 23 Apr 2013 16:45:39 +0800
Subject: [PATCH 101/762] Cleanup of Netlogic specific changes in cache.c Implement a "stronger" version of __uncached_access()

Based on Broadcom SDK 2.3.

Signed-off-by: Krishnamurthy D V <kmurthy@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/mm/cache.c               |   34 +---------------------------------
 arch/mips/netlogic/common/memory.c |   14 ++++++++++++++
 2 files changed, 15 insertions(+), 33 deletions(-)

diff --git a/arch/mips/mm/cache.c b/arch/mips/mm/cache.c
index 56d67ec..3e77374 100644
--- a/arch/mips/mm/cache.c
+++ b/arch/mips/mm/cache.c
@@ -126,25 +126,10 @@ void __flush_anon_page(struct page *page, unsigned long vmaddr)
 
 EXPORT_SYMBOL(__flush_anon_page);
 
-extern void nlm_common_flush_icache_range_paddr(phys_t start);
 void __update_cache(struct vm_area_struct *vma, unsigned long address,
 	pte_t pte)
 {
 	struct page *page;
-
-#ifdef CONFIG_NLM_COMMON
-	phys_t start;
-	//printk("[%s]: address = %lx, pte = %lx\n", __FUNCTION__, address, pte_val(pte));
-	if (!(vma->vm_flags & VM_EXEC)) return;
-	page = pte_page(pte);
-	/*  addr = (unsigned long)page_address(page); */
-	if (TestPageDcacheDirty(page)) return;
-	/*  if (addr)  */
-	/*    flush_icache_range(addr, addr+PAGE_SIZE); */
-	start = (phys_t)pte_pfn(pte);
-	nlm_common_flush_icache_range_paddr(start << PAGE_SHIFT);
-	SetPageDcacheDirty(page);
-#else
 	unsigned long pfn, addr;
 	int exec = (vma->vm_flags & VM_EXEC) && !cpu_has_ic_fills_f_dc;
 
@@ -158,18 +143,10 @@ void __update_cache(struct vm_area_struct *vma, unsigned long address,
 			flush_data_cache_page(addr);
 		ClearPageDcacheDirty(page);
 	}
-#endif
 }
 
-#ifdef CONFIG_NLM_COMMON
-/* This variable needs to be initialized before setup_arch() if this is not
-   initialized like below
-   */
-unsigned long _page_cachable_default = (0x3 << _CACHE_SHIFT);
-#else
 unsigned long _page_cachable_default;
-#endif
-EXPORT_SYMBOL(_page_cachable_default);
+EXPORT_SYMBOL_GPL(_page_cachable_default);
 
 static inline void setup_protection_map(void)
 {
@@ -259,14 +236,5 @@ int __weak __uncached_access(struct file *file, unsigned long addr)
 	if (file->f_flags & O_DSYNC)
 		return 1;
 
-#ifdef CONFIG_NLM_COMMON
-	{
-		extern int nlm_common_get_pgprot(unsigned long address);
-	  	/* check the address region, return uncached pages for IO space and
-		   cached page for memory space. */
-		return nlm_common_get_pgprot(addr);
-	}
-#endif
-
 	return addr >= __pa(high_memory);
 }
diff --git a/arch/mips/netlogic/common/memory.c b/arch/mips/netlogic/common/memory.c
index a7d5812..654fa7f 100644
--- a/arch/mips/netlogic/common/memory.c
+++ b/arch/mips/netlogic/common/memory.c
@@ -23,6 +23,8 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  * *****************************#NETL_2#********************************/
 
+#include <linux/fs.h>
+#include <linux/fcntl.h>
 #include <linux/irqflags.h>
 #include <linux/module.h>
 #include <asm/mipsregs.h>
@@ -192,3 +194,15 @@ void setup_mapped_kernel_tlbs(int index, int secondary_cpu) { }
 unsigned long recalculate_max_low_pfn(unsigned long max_low_pfn) {return max_low_pfn;}
 
 #endif /* #if defined(CONFIG_KSEG2_LOWMEM) && defined(CONFIG_KSEG2_LOWMEM) */
+
+/* override of arch/mips/mm/cache.c: __uncached_access */
+extern int nlm_common_get_pgprot(unsigned long address);
+int __uncached_access(struct file *file, unsigned long addr)
+{
+	if (file->f_flags & O_SYNC)
+		return 1;
+
+	/* check the address region, return uncached pages for IO space and
+	   cached page for memory space. */
+	return nlm_common_get_pgprot(addr);
+}
-- 
1.7.0.4

