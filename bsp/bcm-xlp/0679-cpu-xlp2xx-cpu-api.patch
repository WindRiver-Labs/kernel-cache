From 6c1fd51cff4435535de5f560f7ab2a31c281f67d Mon Sep 17 00:00:00 2001
From: ShengLiang Song <shengliang.song@broadcom.com>
Date: Wed, 16 Jan 2013 17:03:34 -0800
Subject: [PATCH 679/762] cpu: xlp2xx cpu api

updated xlp cpu names
added xlp2xx cpu APIs

Based on Broadcom SDK 2.3.

Signed-off-by: ShengLiang Song <shengliang.song@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/hal/nlm_hal.h       |   11 +-
 .../include/asm/netlogic/hal/nlm_hal_xlp_dev.h     |   42 ++----
 arch/mips/netlogic/common/nlm_hal_cpu_info.c       |  177 +++++++++++++++++---
 3 files changed, 177 insertions(+), 53 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/hal/nlm_hal.h b/arch/mips/include/asm/netlogic/hal/nlm_hal.h
index 642fb7d..6a358f3 100644
--- a/arch/mips/include/asm/netlogic/hal/nlm_hal.h
+++ b/arch/mips/include/asm/netlogic/hal/nlm_hal.h
@@ -46,8 +46,9 @@
 
 struct nlm_netl_proc_info{
 	unsigned int proc_id;
-	unsigned int chipid;		/*example: 832, 316 etc */
+	unsigned int chipid;		/*example: xlp832=>0x8084, xlp316=>0x3044, xlp208=>0x2024 etc */
 	unsigned int revision;
+	unsigned int efuse_config[8];
 	char cpu_info_str[32];
 };
 
@@ -140,6 +141,14 @@ extern uint64_t nlm_hal_get_dev_base(int node, int bus, int dev, int func);
 
 extern int nlm_hal_get_cpuinfo(struct nlm_netl_proc_info *);
 
+extern int is_nlm_xlp208(void);
+extern int is_nlm_xlp108(void);
+extern int is_nlm_xlp204(void);
+extern int is_nlm_xlp104(void);
+extern int is_nlm_xlp202(void);
+extern int is_nlm_xlp201(void);
+extern int is_nlm_xlp101(void);
+
 extern uint32_t get_dom_owner_mask(void *fdt, int dom_id, char *module);
 
 struct nlm_sae_init_param {
diff --git a/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h b/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h
index f0d3e17..e5ee9a0 100644
--- a/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h
+++ b/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h
@@ -106,15 +106,6 @@
 #define CPU_EXTPID_XLP_3XX_L    0x01
 #define CPU_EXTPID_XLP_3XX_LP   0x02
 #define CPU_EXTPID_XLP_3XX_LP2  0x03
-#define CPU_EXTPID_XLP_208a     0x06
-#define CPU_EXTPID_XLP_108a     0x07
-#define CPU_EXTPID_XLP_204a     0x05
-#define CPU_EXTPID_XLP_104a     0x04
-#define CPU_EXTPID_XLP_202a     0x08
-#define CPU_EXTPID_XLP_201a     0x09
-#define CPU_EXTPID_XLP_101a     0x0A
-
-#define CPU_EXTPID_XLP_3XX_MAX   0x0F
 
 #define CPU_EXTPID_XLP_208a     0x06
 #define CPU_EXTPID_XLP_108a     0x07
@@ -124,13 +115,7 @@
 #define CPU_EXTPID_XLP_201a     0x09
 #define CPU_EXTPID_XLP_101a     0x0A
 
-#define CPU_EXTPID_XLP_208a     0x06
-#define CPU_EXTPID_XLP_108a     0x07
-#define CPU_EXTPID_XLP_204a     0x05
-#define CPU_EXTPID_XLP_104a     0x04
-#define CPU_EXTPID_XLP_202a     0x08
-#define CPU_EXTPID_XLP_201a     0x09
-#define CPU_EXTPID_XLP_101a     0x0A
+#define CPU_EXTPID_XLP_3XX_MAX   0x0F
 
 #define CPU_EXTPID_XLP_3XX_INV   0xFE  	 /* invalid */
 #define CPU_EXTPID_XLP_3XX_ANY   0xFF	 /* Any 3XX */
@@ -157,6 +142,15 @@ extern int is_nlm_xlp(unsigned int chipid, unsigned int rev,  unsigned int ext);
 #define is_nlm_xlp8xx_bx()   ( is_nlm_xlp(0x8000, XLP_REVISION_BX,  0) || is_nlm_xlp(0x4000, XLP_REVISION_BX, 0))
 #define is_nlm_xlp832_ax()   ( is_nlm_xlp(0x8084, XLP_REVISION_AX,  0))
 
+#define is_nlm_xlp8xx_832() is_nlm_xlp(0x8084, XLP_REVISION_ANY, 0)
+#define is_nlm_xlp8xx_824() is_nlm_xlp(0x8064, XLP_REVISION_ANY, 0)
+#define is_nlm_xlp8xx_816() is_nlm_xlp(0x8044, XLP_REVISION_ANY, 0)
+
+#define is_nlm_xlp8xx_432() is_nlm_xlp(0x4084, XLP_REVISION_ANY, 0)
+#define is_nlm_xlp8xx_424() is_nlm_xlp(0x4064, XLP_REVISION_ANY, 0)
+#define is_nlm_xlp8xx_416() is_nlm_xlp(0x4044, XLP_REVISION_ANY, 0)
+#define is_nlm_xlp8xx_408() is_nlm_xlp(0x8024, XLP_REVISION_ANY, 0)
+
 #define is_nlm_xlp3xx_B(rev)      ( is_nlm_xlp(0x3000, rev, CPU_EXTPID_XLP_3XX_BASE))
 #define is_nlm_xlp316_B(rev)      ( is_nlm_xlp(0x3044, rev, CPU_EXTPID_XLP_3XX_BASE))
 #define is_nlm_xlp312_B(rev)      ( is_nlm_xlp(0x3034, rev, CPU_EXTPID_XLP_3XX_BASE))
@@ -211,19 +205,6 @@ extern int is_nlm_xlp(unsigned int chipid, unsigned int rev,  unsigned int ext);
 
 #define is_nlm_xlp2xx()	    is_nlm_xlp(0x2000, XLP_REVISION_ANY,  0)
 
-#define is_nlm_xlp208()	    is_nlm_xlp(0x2024, XLP_REVISION_ANY,  0)
-#define is_nlm_xlp204()	    is_nlm_xlp(0x2014, XLP_REVISION_ANY,  0)
-
-#define is_nlm_xlp2xx_208a()      ( is_nlm_xlp(0x2024, XLP_REVISION_ANY, CPU_EXTPID_XLP_208a))
-#define is_nlm_xlp2xx_108a()      ( is_nlm_xlp(0x2024, XLP_REVISION_ANY, CPU_EXTPID_XLP_108a))
-
-#define is_nlm_xlp2xx_204a()      ( is_nlm_xlp(0x2014, XLP_REVISION_ANY, CPU_EXTPID_XLP_204a))
-#define is_nlm_xlp2xx_104a()      ( is_nlm_xlp(0x2014, XLP_REVISION_ANY, CPU_EXTPID_XLP_104a))
-
-#define is_nlm_xlp2xx_202a()      ( is_nlm_xlp(0x2021, XLP_REVISION_ANY, CPU_EXTPID_XLP_202a))
-#define is_nlm_xlp2xx_201a()      ( is_nlm_xlp(0x2011, XLP_REVISION_ANY, CPU_EXTPID_XLP_201a))
-#define is_nlm_xlp2xx_101a()      ( is_nlm_xlp(0x2011, XLP_REVISION_ANY, CPU_EXTPID_XLP_101a))
-
 #endif /*__XLP_CHIPID_MACROS__ */
 
 #endif /* __ASSEMBLY__ */
@@ -1443,8 +1424,11 @@ enum xlp2xx_sys_cfg_regs {
 	XLP2XX_RTC_REG_TEST             = 0x30f,
 };
 
+/* EFUSE Config2 Reg */
 #define XLP2XX_RSA_BLOCK_INDEX		0
 #define XLP2XX_REGX_BLOCK_INDEX		11
+
+/* EFUSE Config1 Reg */
 #define XLP2XX_CMP_BLOCK_INDEX		9
 #define XLP2XX_CRYPTO_BLOCK_INDEX	14
 
diff --git a/arch/mips/netlogic/common/nlm_hal_cpu_info.c b/arch/mips/netlogic/common/nlm_hal_cpu_info.c
index 246c50a..883b345 100644
--- a/arch/mips/netlogic/common/nlm_hal_cpu_info.c
+++ b/arch/mips/netlogic/common/nlm_hal_cpu_info.c
@@ -64,7 +64,6 @@ static inline int bitcount(unsigned int n)
 __inline__ uint32_t efuse_cfg0(void)
 {
         return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG0)));
-
 }
 
  __inline__ uint32_t efuse_cfg1(void)
@@ -72,12 +71,46 @@ __inline__ uint32_t efuse_cfg0(void)
         return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG1)));
 }
 
+ __inline__ uint32_t efuse_cfg2(void)
+{
+        return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG2)));
+}
+
+ __inline__ uint32_t efuse_cfg3(void)
+{
+        return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG3)));
+}
+
 __inline__ uint32_t efuse_cfg6(void)
 {
         return  nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG6)));
 }
 
 
+__inline__ int nlm_xlp2xx_has_cmp(void)
+{
+    unsigned int cfg1 = efuse_cfg1();
+    return !(cfg1 & (1 << XLP2XX_CMP_BLOCK_INDEX));
+}
+
+__inline__ int nlm_xlp2xx_has_crypto(void)
+{
+    unsigned int cfg1 = efuse_cfg1();
+    return !(cfg1 & (1 << XLP2XX_CRYPTO_BLOCK_INDEX));
+}
+
+__inline__ int nlm_xlp2xx_has_rsa(void)
+{
+    unsigned int cfg2 = efuse_cfg2();
+    return !(cfg2 & (1 << XLP2XX_RSA_BLOCK_INDEX));
+}
+
+__inline__ int nlm_xlp2xx_has_regx(void)
+{
+    unsigned int cfg2 = efuse_cfg2();
+    return !(cfg2 & (1 << XLP2XX_REGX_BLOCK_INDEX));
+}
+
 __inline uint32_t get_proc_id(void)
 {
 	unsigned int prid = nlm_read_prid();
@@ -257,20 +290,6 @@ inline int is_xlp4xx(uint8_t num_cpu, uint32_t rev)
  * xlp201a  1x1 trheads
  * xlp101a  1x1 trheads
  */
-#define CPU_EXTPID_XLP_3XX_NONE  0x00
-#define CPU_EXTPID_XLP_3XX_BASE  0x00
-
-#define CPU_EXTPID_XLP_3XX_L    0x01
-#define CPU_EXTPID_XLP_3XX_LP   0x02
-#define CPU_EXTPID_XLP_3XX_LP2  0x03
-#define CPU_EXTPID_XLP_208a     0x06
-#define CPU_EXTPID_XLP_108a     0x07
-#define CPU_EXTPID_XLP_204a     0x05
-#define CPU_EXTPID_XLP_104a     0x04
-#define CPU_EXTPID_XLP_202a     0x08
-#define CPU_EXTPID_XLP_201a     0x09
-#define CPU_EXTPID_XLP_101a     0x0A
-
 inline int xlp3xx_get_num_of_threads_per_core(uint32_t core_mask, uint32_t epid)
 {
 	int nthreads=1;
@@ -475,11 +494,50 @@ int  nlm_hal_get_chipid(void)
 	return chipid;
 }
 
+static const char*  nlm_hal_get_chipid_str(void)
+{
+	if(is_nlm_xlp8xx_832()) return "XLP832";
+	if(is_nlm_xlp8xx_824()) return "XLP824";
+	if(is_nlm_xlp8xx_816()) return "XLP816";
+
+	if(is_nlm_xlp8xx_432()) return "XLP432";
+	if(is_nlm_xlp8xx_424()) return "XLP424";
+	if(is_nlm_xlp8xx_416()) return "XLP416";
+
+	if(is_nlm_xlp316()) return "XLP316";
+	if(is_nlm_xlp312()) return "XLP312";
+	if(is_nlm_xlp308()) return "XLP308";
+	if(is_nlm_xlp304()) return "XLP304";
+
+	if(is_nlm_xlp3xx_208a()) return "XLP3XX_208a";
+	if(is_nlm_xlp3xx_108a()) return "XLP3XX_108a";
+
+	if(is_nlm_xlp3xx_204a()) return "XLP3XX_204a";
+	if(is_nlm_xlp3xx_104a()) return "XLP3XX_104a";
+
+	if(is_nlm_xlp3xx_202a()) return "XLP3XX_202a";
+	if(is_nlm_xlp3xx_201a()) return "XLP3XX_201a";
+	if(is_nlm_xlp3xx_101a()) return "XLP3XX_101a";
+
+	if(is_nlm_xlp208()) return "XLP208";
+	if(is_nlm_xlp108()) return "XLP108";
+
+	if(is_nlm_xlp204()) return "XLP204";
+	if(is_nlm_xlp104()) return "XLP104";
+
+	if(is_nlm_xlp202()) return "XLP202";
+	if(is_nlm_xlp201()) return "XLP201";
+	if(is_nlm_xlp101()) return "XLP101";
+
+	return "XLP???";
+}
+
 int  nlm_hal_get_cpuinfo(struct nlm_netl_proc_info* cpu_info)
 {
 	const static char c_typename[][8]={"\0", "Lite", "Lite+", "Lite+2", "Unknown"};
-	unsigned int sw_rev, chipid, type;
+	unsigned int sw_rev, chipid, type, i;
 	uint32_t cfg0, pid;
+	const char* chipid_str;
 
 	pid=get_proc_id();
 	chipid=nlm_hal_get_chipid();
@@ -488,19 +546,25 @@ int  nlm_hal_get_cpuinfo(struct nlm_netl_proc_info* cpu_info)
 	cpu_info->proc_id=pid;
 	cpu_info->chipid=chipid;
 
+	for(i=0; i<8; i++) {
+		cpu_info->efuse_config[i] =
+			nlm_hal_read_32bit_reg(SYS_REG_BASE , (SYS_REG_INDEX(EFUSE_DEVICE_CFG0+i)));
+	}
+	chipid_str = nlm_hal_get_chipid_str();
+
 	if( pid == CHIP_PROCESSOR_ID_XLP_2XX )
 	{
 		sw_rev = get_nlm_xlp2xx_rev();
 		cpu_info->revision= sw_rev;
-		sprintf(cpu_info->cpu_info_str, "XLP%4X Rev %c%1d",
-			chipid,(char)('A'+sw_rev/XLP_REVISION_B0), sw_rev%XLP_REVISION_B0);
+		sprintf(cpu_info->cpu_info_str, "%s Rev %c%1d",
+			chipid_str,(char)('A'+sw_rev/XLP_REVISION_B0), sw_rev%XLP_REVISION_B0);
 	}
 	else if( pid != CHIP_PROCESSOR_ID_XLP_3XX )
 	{
 		sw_rev = get_nlm_xlp8xx_rev();
 		cpu_info->revision= sw_rev;
-		sprintf(cpu_info->cpu_info_str, "XLP%4X Rev %c%1d",
-			chipid,(char)('A'+sw_rev/XLP_REVISION_B0), sw_rev%XLP_REVISION_B0);
+		sprintf(cpu_info->cpu_info_str, "%s Rev %c%1d",
+			chipid_str,(char)('A'+sw_rev/XLP_REVISION_B0), sw_rev%XLP_REVISION_B0);
 	}
 	else
 	{
@@ -509,13 +573,75 @@ int  nlm_hal_get_cpuinfo(struct nlm_netl_proc_info* cpu_info)
 		cfg0 =  efuse_cfg0();
 		type= (cfg0>>4) & 0xF;
 		if(CPU_EXTPID_XLP_3XX_LP2<type) type=CPU_EXTPID_XLP_3XX_LP2+1;
-		sprintf(cpu_info->cpu_info_str, "XLP%4X%s Rev %c%1d", chipid, c_typename[type],
+		sprintf(cpu_info->cpu_info_str, "%s%s Rev %c%1d", chipid_str, c_typename[type],
 			(char)('A'+sw_rev/XLP_REVISION_B0), sw_rev%XLP_REVISION_B0);
 	}
 
 	return 0;
 }
 
+int is_nlm_xlp208(void)
+{
+	return ( is_nlm_xlp(0x2024, XLP_REVISION_ANY, 0)
+			&& (nlm_xlp2xx_has_cmp())
+			&& (nlm_xlp2xx_has_crypto())
+			&& (nlm_xlp2xx_has_rsa())
+			&& (nlm_xlp2xx_has_regx()) );
+}
+
+int is_nlm_xlp108(void)
+{
+	return ( is_nlm_xlp(0x2024, XLP_REVISION_ANY, 0)
+			&& (!nlm_xlp2xx_has_cmp())
+			&& (nlm_xlp2xx_has_crypto())
+			&& (nlm_xlp2xx_has_rsa())
+			&& (nlm_xlp2xx_has_regx()) );
+}
+
+int is_nlm_xlp204(void)
+{
+	return ( is_nlm_xlp(0x2014, XLP_REVISION_ANY, 0)
+				&& (nlm_xlp2xx_has_cmp())
+				&& (nlm_xlp2xx_has_crypto())
+				&& (nlm_xlp2xx_has_rsa())
+				&& (nlm_xlp2xx_has_regx()) );
+}
+
+int is_nlm_xlp104(void)
+{
+	return ( is_nlm_xlp(0x2014, XLP_REVISION_ANY, 0)
+				&& (!nlm_xlp2xx_has_cmp())
+				&& (nlm_xlp2xx_has_crypto())
+				&& (nlm_xlp2xx_has_rsa())
+				&& (nlm_xlp2xx_has_regx()) );
+}
+
+int is_nlm_xlp202(void)
+{
+	return ( is_nlm_xlp(0x2021, XLP_REVISION_ANY, 0)
+				&& (!nlm_xlp2xx_has_cmp())
+				&& (!nlm_xlp2xx_has_crypto())
+				&& (!nlm_xlp2xx_has_rsa())
+				&& (!nlm_xlp2xx_has_regx()) );
+}
+
+int is_nlm_xlp201(void)
+{
+	return ( is_nlm_xlp(0x2011, XLP_REVISION_ANY, 0)
+				&& (!nlm_xlp2xx_has_cmp())
+				&& (!nlm_xlp2xx_has_crypto())
+				&& (!nlm_xlp2xx_has_rsa())
+				&& (nlm_xlp2xx_has_regx()) );
+}
+
+int is_nlm_xlp101(void)
+{
+	return ( is_nlm_xlp(0x2011, XLP_REVISION_ANY, 0) \
+				&& (!nlm_xlp2xx_has_cmp()) \
+				&& (!nlm_xlp2xx_has_crypto()) \
+				&& (!nlm_xlp2xx_has_rsa()) \
+				&& (!nlm_xlp2xx_has_regx()) );
+}
 
 #ifdef NLM_HAL_LINUX_KERNEL
 #include <linux/types.h>
@@ -527,6 +653,11 @@ EXPORT_SYMBOL(efuse_cfg6);
 EXPORT_SYMBOL(get_proc_id);
 EXPORT_SYMBOL(is_nlm_xlp);
 EXPORT_SYMBOL(nlm_hal_get_cpuinfo);
+EXPORT_SYMBOL(is_nlm_xlp208);
+EXPORT_SYMBOL(is_nlm_xlp108);
+EXPORT_SYMBOL(is_nlm_xlp204);
+EXPORT_SYMBOL(is_nlm_xlp104);
+EXPORT_SYMBOL(is_nlm_xlp202);
+EXPORT_SYMBOL(is_nlm_xlp201);
+EXPORT_SYMBOL(is_nlm_xlp101);
 #endif
-
-
-- 
1.7.0.4

