From e9c9c45cb38c6b5bb7bf633df578ecd6922d2235 Mon Sep 17 00:00:00 2001
From: Anurag <anuragn@rmicorp.com>
Date: Tue, 7 Feb 2012 18:32:14 +0530
Subject: [PATCH 539/762] SD/MMC card insertion/removal detection for storm board.

Based on Broadcom SDK 2.3.

Signed-off-by: Anurag <anuragn@rmicorp.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/mmc/host/xlpmmc.c |   60 +++++++++++++++++++++++++++++++++++++++------
 drivers/mmc/host/xlpmmc.h |    2 +
 2 files changed, 54 insertions(+), 8 deletions(-)

diff --git a/drivers/mmc/host/xlpmmc.c b/drivers/mmc/host/xlpmmc.c
index 642fd4d..3259382 100644
--- a/drivers/mmc/host/xlpmmc.c
+++ b/drivers/mmc/host/xlpmmc.c
@@ -73,6 +73,8 @@ struct xlpmmc_host {
 	} pio;
 
 	int irq;
+        struct timer_list       timer;
+        struct tasklet_struct   card_tasklet;   /* Tasklet structures */
 
 	struct xlpmmc_platform_data *platdata;
 	struct platform_device *pdev;
@@ -153,7 +155,7 @@ static void dump_hc_regs(struct xlpmmc_host *host)
 	printk ("MMC_PRESENT STATE = 0x%x\n", hc_rd32((host->base), HC_PRESENT_STATE_LO, 0));
 	printk ("MMC_POWER_CTL = 0x%x\n", hc_rd16((host->base), HC_PC_HC, 0));
 	printk ("MMC_CLOK_CTL = 0x%x\n", hc_rd16((host->base), HC_CLOCK_CTRL, 0));
-	printk ("MMC_CAP0 = 0x%x\n", hc_rd32((host->base), 0x204, 0));
+	printk ("MMC_CAP0 = 0x%x\n", hc_rd32((host->base), 0x40, 0));
 #endif
 }
 
@@ -177,6 +179,7 @@ static int xlpmmc_card_readonly(struct mmc_host *mmc)
 	//struct xlpmmc_host *host = mmc_priv(mmc);
 	return -ENOSYS;
 }
+
 static irqreturn_t xlpmmc_det_irq(int irq, void *dev_id)
 {
         struct xlpmmc_host *host = (struct xlpmmc_host *) dev_id;
@@ -198,6 +201,7 @@ static irqreturn_t xlpmmc_det_irq(int irq, void *dev_id)
                 host->present = present;
                 pr_debug("%s: card %s\n", mmc_hostname(host->mmc),
                         present ? "insert" : "remove");
+                //tasklet_schedule(&host->card_tasklet);
                 mmc_detect_change(host->mmc, msecs_to_jiffies(100));
         }
         return IRQ_HANDLED;
@@ -299,6 +303,7 @@ static int xlpmmc_send_command(struct xlpmmc_host *host, int wait,
 		/*Should never stuck here*/
 		hcstate = hc_rd32(host->base, 0x24, 0);
 	}while(hcstate & 0x1);
+        mod_timer(&host->timer, jiffies + 1 * HZ);
 
 	hc_wr32(host->base, HC_ARG1_LO, cmd->arg, 0);
 	hc_wr32(host->base, HC_COMMAND, mmccmd, 0);	
@@ -673,6 +678,31 @@ static void xlpmmc_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 	dump_hc_regs(host);
 }
 
+static void xlpmmc_timeout_timer(unsigned long data)
+{
+        struct xlpmmc_host *host = (struct xlpmmc_host *) data;
+        unsigned long flags;
+        volatile short interrsts;
+
+	spin_lock(&host->irq_lock);
+        if (host->mrq) {
+                    if(host->mrq->cmd) {
+                        if (host->mrq->cmd->data) {
+                                host->mrq->data->error = -ETIMEDOUT;
+                                xlpmmc_data_complete(host);
+                        } else {
+				/*Reset the CMD line*/
+				interrsts =  hc_rd16(host->base, HC_SWRST_TIMEOUT_CTRL, 0);
+				interrsts |= SW_RST_CMD;
+				hc_wr16(host->base, HC_SWRST_TIMEOUT_CTRL, interrsts, 0);
+				host->mrq->cmd->error = -ETIMEDOUT;
+                                xlpmmc_cmd_complete(host, 0);
+                        }
+                    }
+        }
+	spin_unlock(&host->irq_lock);
+}
+
 static irqreturn_t xlpmmc_irq(int irq, void *dev_id)
 {
 	struct xlpmmc_host *host = dev_id;
@@ -681,11 +711,11 @@ static irqreturn_t xlpmmc_irq(int irq, void *dev_id)
 
 	intstatus = hc_rd16(host->base, HC_NORMAL_INT_STS, 0);
 #ifdef XLP_MMC_DEBUG
-	printk("got xlpmmc_irq status = 0x%x\n", intstatus);	
+	printk("got xlpmmc_irq status = 0x%x\n", intstatus);
 #endif
-	hc_wr16(host->base, HC_NORMAL_INT_STS, intstatus, 0);	
+	hc_wr16(host->base, HC_NORMAL_INT_STS, intstatus, 0);
 
-/*	if (status & HNIS_CARD_INT )	
+/*	if (status & HNIS_CARD_INT )
 		mmc_signal_sdio_irq(host->mmc); */
 	/*Error Interrupt*/
 	if(intstatus & HNIS_ERR){
@@ -715,16 +745,19 @@ static irqreturn_t xlpmmc_irq(int irq, void *dev_id)
 			xlpmmc_cmd_complete(host, intstatus);
 
 	} 
-	 if (!(host->flags & HOST_F_DMA)) {
+
+        if(intstatus & (HNIS_CINS | HNIS_CREM)){
+                tasklet_schedule(&host->card_tasklet);
+        }
+	if (!(host->flags & HOST_F_DMA)) {
 		if ((host->flags & HOST_F_XMIT) && (intstatus & HNIS_BUFF_WR_RDY))
 			xlpmmc_send_pio(host);
 		else if ((host->flags & HOST_F_RECV) && (intstatus & HNIS_BUFF_RD_RDY))
 			xlpmmc_receive_pio(host);
 		else if( ((host->flags & HOST_F_RECV) || (host->flags & HOST_F_XMIT))&&(intstatus & HNIS_TC_CMPL))
 			xlpmmc_data_complete(host);
-			
-
 	}
+
 	if((host->flags & HOST_F_DMA) && (intstatus & HNIS_TC_CMPL)){
 		xlpmmc_data_complete(host);
 	}
@@ -738,7 +771,12 @@ static irqreturn_t xlpmmc_irq(int irq, void *dev_id)
 	spin_unlock(&host->irq_lock);
 	return IRQ_HANDLED;
 }
-
+static void xlpmmc_tasklet_card(unsigned long param)
+{
+        struct xlpmmc_host *host;
+        host = (struct xlpmmc_host*)param;
+        mmc_detect_change(host->mmc, msecs_to_jiffies(100));
+}
 
 static const struct mmc_host_ops xlpmmc_ops = {
 	.request	= xlpmmc_request,
@@ -839,6 +877,10 @@ static int __devinit xlpmmc_probe(struct platform_device *pdev)
 
 	host->status = HOST_S_IDLE;
 
+        tasklet_init(&host->card_tasklet,
+                xlpmmc_tasklet_card, (unsigned long)host);
+        setup_timer(&host->timer, xlpmmc_timeout_timer, (unsigned long)host);
+
 	xlpmmc_reset_controller(host);
 
 	ret = mmc_add_host(mmc);
@@ -887,6 +929,8 @@ static int __devexit xlpmmc_remove(struct platform_device *pdev)
                 if (gpio_is_valid(GPIO_MMC_DETECT)) {
                         gpio_free(GPIO_MMC_DETECT);
                 }
+                del_timer_sync(&host->timer);
+                tasklet_kill(&host->card_tasklet);
 		
 		free_irq(xlp_pic_irt_to_irq(XLP_GPIO_INT0_IRT), host);
 		free_irq(host->irq, host);
diff --git a/drivers/mmc/host/xlpmmc.h b/drivers/mmc/host/xlpmmc.h
index d985341..2d4c75c 100644
--- a/drivers/mmc/host/xlpmmc.h
+++ b/drivers/mmc/host/xlpmmc.h
@@ -119,6 +119,8 @@
 	#define HNIS_BUFF_RD_RDY			(1<<5) /* ready to read buffer intr. */
 	#define HNIS_BUFF_WR_RDY			(1<<4) /* write buffer ready  intr. */
 	#define HNIS_ERR 				(1<<15) /* An error Interrupt */
+	#define HNIS_CINS				(1<<6) /* Card inserted Interrupt */
+	#define HNIS_CREM				(1<<7) /* Card removed Interrupt */
 #define HC_ERROR_INT_STS 		0x0032
 	#define	CMD_TIMEOUT_ERR				(1<<0) 
 #define HC_NORMAL_INT_STS_EN 		0x0034
-- 
1.7.0.4

