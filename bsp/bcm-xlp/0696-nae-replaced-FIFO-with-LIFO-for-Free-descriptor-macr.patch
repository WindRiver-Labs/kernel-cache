From 38fc24ed9623f4447fa707d1e57f46aa527e2145 Mon Sep 17 00:00:00 2001
From: Virendra Pathak <vpathak@broadcom.com>
Date: Fri, 8 Mar 2013 17:55:43 +0530
Subject: [PATCH 696/762] nae: replaced FIFO with LIFO for Free descriptor macros

Based on Broadcom SDK 2.3.

Signed-off-by: Virendra Pathak <vpathak@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../include/asm/netlogic/hal/nlm_hal_xlp_dev.h     |    4 ++--
 arch/mips/netlogic/common/nlm_hal_nae.c            |   14 +++++++-------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h b/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h
index b2762c0..2d0ffd6 100644
--- a/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h
+++ b/arch/mips/include/asm/netlogic/hal/nlm_hal_xlp_dev.h
@@ -504,7 +504,7 @@ enum net_cfg_regs {
  CRC_POLY1_CFG                      = 0x2b,
  FREE_SPILL0_MEM_CFG                = 0x2c,
  FREE_SPILL1_MEM_CFG                = 0x2d,
- FREE_FIFO_THRESHOLD_CFG    	    = 0x2e,
+ FREE_LIFO_THRESHOLD_CFG    	    = 0x2e,
  RX_FREE_LIFO_THRESH                = 0x87,
  FLOW_CRC16_POLY_CFG                = 0x2f,
  DMA_TX_CREDIT_TH                   = 0x29,
@@ -547,7 +547,7 @@ enum net_cfg_regs {
  TX_SCHED_CTRL                      = 0x53,
  STR_PMEM_CMD                       = 0x58,
  TX_IORCRDT_INIT                    = 0x59,
- RX_FREE_FIFO_POP                   = 0x62,
+ RX_FREE_LIFO_POP                   = 0x62,
  FLOW_BASE_MASK_CFG                 = 0x80,
  POE_CLASS_SETUP_CFG                = 0x81,
  UCORE_IFACE_MASK_CFG               = 0x82,
diff --git a/arch/mips/netlogic/common/nlm_hal_nae.c b/arch/mips/netlogic/common/nlm_hal_nae.c
index da9d1f4..6588d45 100644
--- a/arch/mips/netlogic/common/nlm_hal_nae.c
+++ b/arch/mips/netlogic/common/nlm_hal_nae.c
@@ -2170,7 +2170,7 @@ static int nae_freein_fifo_cfg(void *fdt, int node, nlm_nae_config_ptr nae_cfg)
 		th_lo = 0xe; /* Default value */
 		/* spill credits [27:24] has to be 2 */
 		reg = (2 << 24) | th_lo | (th_hi << 12);
-		nlm_hal_write_nae_reg(node, FREE_FIFO_THRESHOLD_CFG, reg);
+		nlm_hal_write_nae_reg(node, FREE_LIFO_THRESHOLD_CFG, reg);
 
 		if((spill_addr << 6) > (spill_mem_addr + spill_mem_size)) {
 			nlm_print("ERROR : Spill address range overflow\n");
@@ -2817,13 +2817,13 @@ static void drain_nae_frin_fifo_descs(int node)
 
 	fifo_mask = nlm_get_max_ports();
 	fifo_mask = ((1 << fifo_mask)-1);
-	nlm_hal_write_nae_reg(node, RX_FREE_FIFO_POP, fifo_mask);
+	nlm_hal_write_nae_reg(node, RX_FREE_LIFO_POP, fifo_mask);
 	for (; timeout >= 0; timeout--) {
 		nlm_mdelay(1);
-		value = nlm_hal_read_nae_reg(node, RX_FREE_FIFO_POP);
+		value = nlm_hal_read_nae_reg(node, RX_FREE_LIFO_POP);
 		if (value == fifo_mask) break;
 	}
-	nlm_hal_write_nae_reg(node, RX_FREE_FIFO_POP, 0);
+	nlm_hal_write_nae_reg(node, RX_FREE_LIFO_POP, 0);
 
 	if (timeout) {
 		nlm_print("Successfully zapped free in fifo!\n");
@@ -2847,13 +2847,13 @@ int nlm_hal_nae_drain_frin_fifo_descs(int node, int inf)
 	uint32_t value, fifo_mask = 1 << inf;
 	int timeout = 10;
 
-	nlm_hal_write_nae_reg(node, RX_FREE_FIFO_POP, fifo_mask);
+	nlm_hal_write_nae_reg(node, RX_FREE_LIFO_POP, fifo_mask);
 	for (; timeout >= 0; timeout--) {
 		nlm_mdelay(1);
-		value = nlm_hal_read_nae_reg(node, RX_FREE_FIFO_POP);
+		value = nlm_hal_read_nae_reg(node, RX_FREE_LIFO_POP);
 		if (value == fifo_mask) break;
 	}
-	nlm_hal_write_nae_reg(node, RX_FREE_FIFO_POP, 0);
+	nlm_hal_write_nae_reg(node, RX_FREE_LIFO_POP, 0);
 	return timeout? 0 : -1;
 }
 
-- 
1.7.0.4

