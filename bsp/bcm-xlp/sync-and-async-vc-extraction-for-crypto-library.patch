From 6d4c97225a6ab52404d1deb04ebf0e3ffe379012 Mon Sep 17 00:00:00 2001
From: Hareesh Ramachandran <hareesh@london.(none)>
Date: Fri, 16 Sep 2011 08:19:03 -0700
Subject: [PATCH 461/761] sync and async vc extraction for crypto library

Based on Broadcom SDK 2.3.

Signed-off-by: Hareesh Ramachandran <hareesh@london.(none)>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/setup.c |   36 ++++++++++++++++++++++++++++++++----
 1 file changed, 32 insertions(+), 4 deletions(-)

diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index f8d786b..81870c7 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -136,7 +136,7 @@ atomic_t cpus_rebooted = ATOMIC_INIT(0);
 #endif
 
 unsigned long long nlm_common_tlb_stats[NR_CPUS] __cacheline_aligned;
-DEFINE_SPINLOCK(atomic_lock);
+spinlock_t atomic_lock = SPIN_LOCK_UNLOCKED;
 
 int hwemul = 0;
 EXPORT_SYMBOL(hwemul);
@@ -370,14 +370,14 @@ void __init nlm_nmi_setup (void)
 #ifdef CONFIG_SERIAL_8250
 #define UART_CLK 133333333
 
-static void __init nlm_early_serial_setup(int uart_id)
+static void nlm_early_serial_setup(int uart_id)
 {
 	struct uart_port s;
 	extern int __init early_serial_setup(struct uart_port *port);
 
 	memset(&s, 0, sizeof(s));
 	s.flags = ASYNC_BOOT_AUTOCONF | ASYNC_SKIP_TEST;
-	s.iotype = UPIO_MEM32;
+	s.iotype = UPIO_NLM;
 	s.regshift = 2; /* registers are 4 bytes wide */
 	/* hardware int 4 - the serial int, is CPU int 6
 	 but poll for now */
@@ -429,7 +429,25 @@ int nlm_get_fdt_app_param(const char *param, void *data, int size)
 }
 EXPORT_SYMBOL(nlm_get_fdt_app_param);
 
-static int __init fdt_process(void)
+int sae_rx_vc = -1, sae_rx_sync_vc = -1;
+static void parse_fdt_sae_vc_config()
+{
+	void *node;
+	node = finddevice("/doms/dom@0/cpu");
+	if(node) {
+		if (getprop(node, "sae-rx-vc", &sae_rx_vc, 4) > 0) 
+			sae_rx_vc = fdt32_to_cpu(sae_rx_vc);
+		
+		if (getprop(node, "sae-rx-sync-vc", &sae_rx_sync_vc, 4) > 0)
+			sae_rx_sync_vc = fdt32_to_cpu(sae_rx_sync_vc);
+	}
+	return;
+}
+EXPORT_SYMBOL(sae_rx_vc);
+EXPORT_SYMBOL(sae_rx_sync_vc);
+
+
+static int fdt_process(void)
 {
 	int  domain=0;
 	char domstr[32] = "";
@@ -694,6 +712,16 @@ noloadermask:
 		if (getprop(node, "id", &xlp_uart_portid, sizeof(xlp_uart_portid)) < 0)
 			return -1;
 	}
+	/* Parse the sae async/sync vcs for linux userspace model , 
+	   remove the sync vc from the int handler of linux */
+	parse_fdt_sae_vc_config();
+	if(sae_rx_sync_vc >= 0) {
+		for (i = 0; i < NLM_MAX_CPU_NODE * NLM_MAX_CPU_PER_NODE ; i++) {
+			if(nlm_cpu_vc_mask[i] & (1 << sae_rx_sync_vc)) {
+				nlm_cpu_vc_mask[i] = nlm_cpu_vc_mask[i] & (~(1 << sae_rx_sync_vc));
+			}
+		}
+	}
 
 	return 0;
 }
-- 
1.7.10.4

