From 00b1a2154545e2073d8d8d43a784f3a67f7dad55 Mon Sep 17 00:00:00 2001
From: Zi Shen Lim <zlim@netlogicmicro.com>
Date: Mon, 3 Oct 2011 18:38:18 -0700
Subject: [PATCH 439/761] irq: namespace updated in mainline

Based on Broadcom SDK 2.3.

Signed-off-by: Zi Shen Lim <zlim@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/netlogic/xlp/irq.c |   38 +++++++++++++++++---------------------
 1 file changed, 17 insertions(+), 21 deletions(-)

diff --git a/arch/mips/netlogic/xlp/irq.c b/arch/mips/netlogic/xlp/irq.c
index adaa86f..44943a0 100644
--- a/arch/mips/netlogic/xlp/irq.c
+++ b/arch/mips/netlogic/xlp/irq.c
@@ -500,8 +500,9 @@ static void __nlm_irq_mask(unsigned int irq)
  *
  * @irq : IRQ number
  */
-static void nlm_irq_mask(unsigned int irq)
+static void nlm_irq_mask(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	//unsigned long flags;
 
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
@@ -538,8 +539,9 @@ static void __nlm_irq_unmask(int irq)
  *
  * @irq : IRQ number
  */
-static void nlm_irq_unmask(unsigned int irq)
+static void nlm_irq_unmask(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	//unsigned long flags;
 
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
@@ -554,8 +556,9 @@ static void nlm_irq_unmask(unsigned int irq)
 	return;
 }
 
-static void nlm_irq_ack(unsigned int irq)
+static void nlm_irq_ack(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	unsigned long flags;
 
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
@@ -600,9 +603,10 @@ static void nlm_irq_end(unsigned int irq)
  * When an interrupt is started, we force it to be enabled only in cpu0, it can
  * be changed later by calling nlm_irq_set_affinity()
  */
-static unsigned int nlm_irq_startup(unsigned int irq)
+static unsigned int nlm_irq_startup(struct irq_data *d)
 {
 	__label__ __failure;
+	unsigned int irq = d->irq;
 	int ret = 0;
 	unsigned long flags;
 	int idx, rvec;
@@ -663,8 +667,9 @@ __failure:
  * chip->shutdown(). In this function, the rvec bit in every EIMR is cleared if
  * usage falls to zero (in case of shared interrupts)
  */
-static void nlm_irq_shutdown(unsigned int irq)
+static void nlm_irq_shutdown(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	unsigned long flags;
 	int idx, rvec;
 
@@ -714,8 +719,9 @@ static void nlm_irq_shutdown(unsigned int irq)
  * The actual bitmask can be different from the specified bitmask based
  * on the logic of xlp_closest_match_cpumask()
  */
-static int nlm_irq_set_affinity(unsigned int irq, const struct cpumask *mask)
+static int nlm_irq_set_affinity(struct irq_data *d, const struct cpumask *mask, bool force)
 {
+	unsigned int irq = d->irq;
 	unsigned long flags;
 	const struct cpumask *m;
 	struct cpumask n;
@@ -749,8 +755,9 @@ static struct irq_chip nlm_irq_pic = {
 	.irq_set_affinity = nlm_irq_set_affinity
 };
 
-static void rsvd_pic_handler_1_1(unsigned int irq)
+static void rsvd_pic_handler_1(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
 		return;
 	} else if(irq >= XLP_IRQ_MAX) {
@@ -761,20 +768,9 @@ static void rsvd_pic_handler_1_1(unsigned int irq)
 	return;
 }
 
-static void rsvd_pic_handler_1(unsigned int irq)
-{
-	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
-		return;
-	} else if(irq >= XLP_IRQ_MAX) {
-		pr_err("irq = %d. Invalid irq requested\n", irq);
-		return;
-	}
-	pr_err("Requesting a reserved irq (%d)??", irq);
-	return;
-}
-
-static int rsvd_pic_handler_2(unsigned int irq, const struct cpumask *mask)
+static int rsvd_pic_handler_2(struct irq_data *d, const struct cpumask *mask, bool force)
 {
+	unsigned int irq = d->irq;
 	if((irq < XLP_IRQ_RESERVED_MAX) && (irq >= 0)) {
 		return 0;
 	} else if(irq >= XLP_IRQ_MAX) {
@@ -787,7 +783,7 @@ static int rsvd_pic_handler_2(unsigned int irq, const struct cpumask *mask)
 
 struct irq_chip nlm_common_rsvd_pic = {
 	.name = "Netlogic-RSVD-PIC",
-	.irq_unmask = rsvd_pic_handler_1_1,
+	.irq_unmask = rsvd_pic_handler_1,
 	.irq_mask = rsvd_pic_handler_1,
 	.irq_ack = rsvd_pic_handler_1,
 	// .end = rsvd_pic_handler_1, /* deprecated */
-- 
1.7.10.4

