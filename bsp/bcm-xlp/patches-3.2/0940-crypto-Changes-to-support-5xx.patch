From ea597a9ecfe4517122c1531191f8f815d0189745 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Thu, 15 May 2014 14:09:56 +0530
Subject: crypto:Changes to support 5xx

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
index 30141ea..daea8cc 100644
--- a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
@@ -45,6 +45,8 @@
 typedef  unsigned long long   _uint64_t;
 #endif
 
+//#define CRYPTOSOC_DBG_EN
+
 #define CRYPTOSOC_CACHELINE_SZ		64ULL
 #define CRYPTOSOC_CACHELINE_SHIFT  6
 #define ___cryptosoc_cacheline_aligned __attribute__((__aligned__(CRYPTOSOC_CACHELINE_SZ)))
diff --git a/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h b/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h
index 600dce7..ba0173c 100644
--- a/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h
+++ b/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h
@@ -111,6 +111,10 @@
 #define SAESOC_GEN2_AAD_OFFSET_SHIFT 0
 
 /* Control descriptor 1 */
+
+#define SAESOC_GEN2_HMAC_EXT_KEY_LEN_MASK 0x1ULL
+#define SAESOC_GEN2_HMAC_EXT_KEY_LEN_SHIFT 57
+
 #define SAESOC_GEN2_CIPHER_PAD_ENABLE_MASK 0x1ULL
 #define SAESOC_GEN2_CIPHER_PAD_ENABLE_SHIFT 56
 
@@ -390,7 +394,8 @@ static void  saesoc_gen2_dump_cdesc(_uint64_t *cdescs, int ndescs)
 	cryptosoc_print("  %-16lld %-16lld %-16lld %-16lld\n",
 			SAESOC_GEN2_GET_BITS(cdesc0, ADDL_HASH_LEN),
 			SAESOC_GEN2_GET_BITS(cdesc0, HASH_SRC_SEL), 
-			SAESOC_GEN2_GET_BITS(cdesc0, HMAC_KEY_LEN),
+			SAESOC_GEN2_GET_BITS(cdesc0, HMAC_KEY_LEN) | 
+			(SAESOC_GEN2_GET_BITS(cdesc1, HMAC_EXT_KEY_LEN) << 7),
 			SAESOC_GEN2_GET_BITS(cdesc0, HMAC_HW_KEY_PAD_ENABLE));
 
 	cryptosoc_print("  %-16s %-16s\n", "HashL3Alloc", "HashClobber");
@@ -608,6 +613,14 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
 	SAESOC_GEN2_SET_BITS(hmac_key_pad_en, HMAC_HW_KEY_PAD_ENABLE)));	\
 	}
 
+
+#define saesoc_gen2_set_hmac_key_len(cdesc1, hmac_key_len) { \
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(HMAC_EXT_KEY_LEN))); \
+	cdesc1 = cdesc1 & ~mask; \
+	cdesc1 = cdesc1 | \
+		ccpu_to_be64((SAESOC_GEN2_SET_BITS((hmac_key_len >> 7), HMAC_EXT_KEY_LEN))); \
+	}
+
 /**
  * saesoc_gen2_set_cipher_type_mode_offset - Set the control descriptor with 
  * 	Cipher parameters
diff --git a/arch/mips/netlogic/lib/seclib/saesoc_lib.h b/arch/mips/netlogic/lib/seclib/saesoc_lib.h
index 2a417d4..a5e7568 100644
--- a/arch/mips/netlogic/lib/seclib/saesoc_lib.h
+++ b/arch/mips/netlogic/lib/seclib/saesoc_lib.h
@@ -527,6 +527,7 @@ static inline int saesoc_new_session(
 					initp->hash.aad_offset,
 					initp->hash.iv_mode,
 					(initp->hash.flags & SAESOC_HF_HMAC_KEY_PAD_EN)==0?0:1);
+			saesoc_gen2_set_hmac_key_len(sd->descs[1], initp->hash.key_len);
 			saesoc_gen2_set_hash_mutemask(sd->descs[0],
 					initp->hash.mute_mask_sel,
 					(initp->hash.flags & SAESOC_HF_HASH_MUTE_MASK_EN)==0?0:1);
@@ -2083,8 +2084,8 @@ static inline int saesoc_process_request(
 			saesoc_gen2_set_last_frag(ddesc->descs[dpriv->ldst_frag_idx]);
 
 
-		//saesoc_dump_desc_info(sdesc, ddesc);
-		//saesoc_gen2_dump_fmnentry(fmnentry0, fmnentry1);
+//		saesoc_dump_desc_info(sdesc, ddesc);
+//		saesoc_gen2_dump_fmnentry(fmnentry0, fmnentry1);
 		
 
 		goto send_req;
diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
index 68cc7b6..3f3d087 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
@@ -1054,7 +1054,7 @@ void nlm_hal_set_sae_freq(int node, int freq)
 	nlm_print("-- SAE Frequency set to %d\n", freq);
 	if(is_nlm_xlp2xx()) {
 		nlm_hal_xlp2xx_set_clkdev_frq(node, XLP2XX_CLKDEVICE_SAE, freq * mhz);
-	} else if (is_nlm_xlp9xx()) {
+	} else if (IS_NLM_XLP9XX_FAMILY) {
             xlp9xx_set_soc_frequency(node, XLP9XX_CLKDEV_SEC, freq * mhz);
         } else {
 		uint64_t set_freq = nlm_hal_set_soc_freq(node, DFS_DEVICE_SAE, freq * mhz);
@@ -1080,7 +1080,7 @@ void nlm_hal_set_rsa_freq(int node, int freq)
 	nlm_print("--RSA Frequency set to %d\n", freq);
 	if(is_nlm_xlp2xx()) {
 		nlm_hal_xlp2xx_set_clkdev_frq(node, XLP2XX_CLKDEVICE_RSA, freq * mhz);
-	} else if (is_nlm_xlp9xx()) {
+	} else if (IS_NLM_XLP9XX_FAMILY) {
             xlp9xx_set_soc_frequency(node, XLP9XX_CLKDEV_RSA, freq*mhz);
         } else {
 		uint64_t set_freq = nlm_hal_set_soc_freq(0, DFS_DEVICE_RSA, freq * mhz);
@@ -1242,7 +1242,7 @@ void nlm_hal_set_sae_engine_sel(int node)
 	if(is_nlm_xlp2xx()) {
 		return;
 	}
-	if (is_nlm_xlp9xx())  {
+	if (IS_NLM_XLP9XX_FAMILY)  {
                 /* SAE selection is fully mapped by default.*/
                 return;
 	} else if(is_nlm_xlp3xx()) {
@@ -1266,7 +1266,7 @@ void nlm_hal_set_rsa_engine_sel(int node)
 		return;
 	}
 
-	if (is_nlm_xlp9xx())  {
+	if (IS_NLM_XLP9XX_FAMILY)  {
             /* XLP9XX configure RSA engine selection as default value */
             return;
 	} else if(is_nlm_xlp3xx()) {
@@ -1287,6 +1287,9 @@ void nlm_hal_get_crypto_vc_nums(int *vcbase, int *vclimit)
 	if (is_nlm_xlp9xx())  {
 		*vcbase = XLP_9XX_SEC_VC_BASE;
 		*vclimit = XLP_9XX_SEC_VC_LIMIT;
+	} else if (is_nlm_xlp5xx())  {
+		*vcbase = XLP_5XX_SEC_VC_BASE;
+		*vclimit = XLP_5XX_SEC_VC_LIMIT;
 	} else if(is_nlm_xlp3xx()) {
 		*vcbase = XLP_3XX_CRYPTO_VC_BASE;
 		*vclimit = XLP_3XX_CRYPTO_VC_LIMIT;
@@ -1304,6 +1307,9 @@ void nlm_hal_get_rsa_vc_nums(int *vcbase, int *vclimit)
 	if (is_nlm_xlp9xx())  {
 		*vcbase = XLP_9XX_RSA_VC_BASE;
 		*vclimit = XLP_9XX_RSA_VC_LIMIT;
+	} else if (is_nlm_xlp5xx())  {
+		*vcbase = XLP_5XX_RSA_VC_BASE;
+		*vclimit = XLP_5XX_RSA_VC_LIMIT;
 	} else if(is_nlm_xlp3xx()) {
 		*vcbase  = XLP_3XX_RSA_ECC_VC_BASE;
 		*vclimit = XLP_3XX_RSA_ECC_VC_LIMIT;
@@ -1323,7 +1329,7 @@ void nlm_hal_config_hash_mute_mask(int node, int index, unsigned long long val[4
 	int reg = NLM_SAE_HASH_MUTE_MASK_REG_0 + index * 4;
 	int i;
 
-	if (!is_nlm_xlp9xx()) 
+	if (!(IS_NLM_XLP9XX_FAMILY)) 
 		return;
 
 	for(i = 0; i < 4; i++) {
-- 
1.7.1

