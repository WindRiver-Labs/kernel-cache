From 0d46e948639d782ca2ff2ed4e8607b1e61d5dea2 Mon Sep 17 00:00:00 2001
From: Hareesh Ramachandran <hareesh@salton.(none)>
Date: Tue, 13 Dec 2011 05:56:18 -0800
Subject: Enabled napi with exclusive vc support

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/misc/netlogic/nae-perf/xlp_nae.c b/drivers/misc/netlogic/nae-perf/xlp_nae.c
index 2a9fe01..9c51b15 100755
--- a/drivers/misc/netlogic/nae-perf/xlp_nae.c
+++ b/drivers/misc/netlogic/nae-perf/xlp_nae.c
@@ -117,19 +117,21 @@
 /*Enable sanity checks while receiving or transmitting buffer */
 #undef ENABLE_SANITY_CHECKS
 
-/* Module Parameters */
 static int debug = 0;
-module_param(debug, int, 0);
-
-static int drop_uboot_pkt = 1;
+/* Module Parameters */
 
 static int perf_mode= NLM_TCP_MODE;
 module_param(perf_mode, int, 0);
+
 static int enable_lro =  0;
 module_param(enable_lro, int, 0);
 
+static int enable_napi =  0;
+module_param(enable_napi, int, 0);
+
 static int num_descs_perq = 500;
 module_param(num_descs_perq, int, 0);
+
 /***************************************************************
  *
  * Below parameters are set during FDT file parsing
@@ -139,6 +141,7 @@ static uint32_t frin_queue_base = 1000;
 static uint32_t frin_total_queue = 18;
 static uint32_t nae_rx_vc = 0;
 static uint32_t nae_fb_vc = 0;
+static uint32_t napi_vc_mask;
 /***************************************************************/
 
 unsigned char eth_hw_addr[18][6] = {
@@ -213,6 +216,7 @@ enum msc_opcodes { IP_CHKSUM = 1,
 };
 
 
+#define napi_dbg(fmt, args...) { }
 
 extern void xlp_set_ethtool_ops(struct net_device *netdev);
 extern void xlp_get_mac_stats(struct net_device* dev, struct net_device_stats* stats);
@@ -544,7 +548,7 @@ static void nlm_enable_l3_l4_parser(void)
 
 	/* Configure flow table 1 to the num cpus as the modular */
 	for(i = 0; i < NR_CPUS; i++) {
-		if(cpu_isset(i, cpu_online_map)) 
+		if(cpu_isset(i, cpu_present_map)) 
 			num_cpus++;
 	}
 	for(i = 0; i < 20; i++) {
@@ -558,7 +562,7 @@ static void nlm_enable_l3_l4_parser(void)
 	dstvc = nae_rx_vc;
 	for(i = 0; i < 512;) {
 		cpu = dstvc / NUM_VC_PER_THREAD;
-		if(cpu_isset(cpu, cpu_online_map)) {
+		if(cpu_isset(cpu, cpu_present_map)) {
 			nlm_hal_write_nae_reg(FLOW_TABLE3_CFG, 0 << 31 | i);
 			nlm_hal_write_nae_reg(FLOW_TABLE3_CFG, dstvc << 12 | i);
 			i++;
@@ -683,12 +687,10 @@ static int mac_refill_frin_skb(uint64_t paddr, int qid)
 	ret = 0;
 
 	/* Assumption: SKB is all set to go */
-
 	/* Send the free Rx desc to the MAC */
 	code = 0;
 
 	/* Send the packet to nae rx  */
-//	__sync();
 	for(;;) {
 	  ret = nlm_hal_send_msg1(qid, code, (paddr & 0xffffffffffULL) );
 	  if (!ret) break;
@@ -732,6 +734,9 @@ static int nae_proc_read(char *page, char **start, off_t off,
 		total_slow += slow_replenish_count[LAST_RCVD_INDEX(i)];
 		dbg_tcp_rx_cons[CPU_INDEX(i)] = 0;
 		p2p_dynamic_alloc_cnt[CPU_INDEX(i)] = 0;
+		slow_replenish_count[LAST_RCVD_INDEX(i)] = 0;
+		fast_replenish_count[LAST_RCVD_INDEX(i)] = 0;
+		err_replenish_count[LAST_RCVD_INDEX(i)] = 0;
 	}
 	/*check how many hash are empty...*/
 	printk("TOTAL_FAST_REPL %ld, TOTAL_SLOW_REPL %ld, TOTAL_ERR_REPL %ld\n",(unsigned long)total_fast, (unsigned long)total_slow, (unsigned long)total_err);
@@ -740,19 +745,15 @@ static int nae_proc_read(char *page, char **start, off_t off,
 	return len;
 }
 
-#ifdef NAPI_MODEL
 static inline void nlm_enable_msgring_intr(void)
 {
 	uint32_t val;
 	/* Need write vc into the register */
 	val =  _read_32bit_cp2_register(XLP_MSG_STATUS1_REG);
-	//val |= ((1 << vc) << 16);
-	val |= (0xf << 16);
+	val |= (napi_vc_mask << 16);
 	_write_32bit_cp2_register(XLP_MSG_STATUS1_REG, val);
 
 }
-#endif
-
 
 
 /*
@@ -776,11 +777,10 @@ xlp_poll_upper(int cpu)
 			/* Process Transmit Complete, addr is the skb pointer */
 			addr = msg0 & 0xffffffffffULL;
 
-			if (drop_uboot_pkt) {
-				if ( (addr >= (192<<20)) && (addr < (256 << 20)) ){
-					printk("Dropping firmware TXC packet (addr=%llx)!\n", addr);
-					return;
-				}
+			/* drop u-boot packets */
+			if ( (addr >= (192<<20)) && (addr < (256 << 20)) ){
+				printk("Dropping firmware TXC packet (addr=%llx)!\n", addr);
+				return;
 			}
 
 			/* context field is currently unused */
@@ -820,7 +820,7 @@ static int xlp_poll_lower(int budget, int cpu)
 {
 	int err ;
 	int status;
-	uint64_t msg1;
+	uint64_t msg0, msg1;
 	int no_rx_pkt_rcvd = 0;
 	uint64_t addr;
 	uint32_t len, context;
@@ -829,7 +829,6 @@ static int xlp_poll_lower(int budget, int cpu)
 	struct dev_data *priv = NULL;
 	uint64_t vaddr;
 	struct sk_buff* skb;
-	uint64_t msg0;
 	uint32_t src_id, size, code;
 
 #ifdef CONFIG_INET_LRO		  
@@ -840,13 +839,12 @@ static int xlp_poll_lower(int budget, int cpu)
 	while (budget--) {
 
 		status = xlp_message_receive_2(nae_rx_vc, &src_id, &size, &code, &msg0, &msg1);
-#ifdef NAPI_MODEL
-		if(status)
-			break;
-#else
-		if (status)	
+
+		if(status) {
+			if(enable_napi) 
+				break;
 			continue;
-#endif
+		}
 
 		no_rx_pkt_rcvd++;
 #ifdef ENABLE_SANITY_CHECKS
@@ -963,8 +961,7 @@ static int xlp_poll_lower(int budget, int cpu)
  * Main NAE poll loop
 */
 
-#ifdef NAPI_MODEL
-static int xlp_nae_poll(struct napi_struct *napi, int budget)
+static int xlp_nae_napi_poll(struct napi_struct *napi, int budget)
 {
 	int rx_pkts = 0;
 	int cpu = hard_smp_processor_id();
@@ -984,7 +981,6 @@ static int xlp_nae_poll(struct napi_struct *napi, int budget)
 
 	return rx_pkts;
 }
-#else
 
 static int xlp_nae_poll(void *buf)
 {
@@ -1016,7 +1012,7 @@ void nlm_spawn_kthread(void)
     static struct task_struct *task[32];
     /*Spawn kthread*/
     for(i=0; i<nr_cpus; i++){
-	if(!cpu_isset(i, cpu_online_map))
+	if(!cpu_isset(i, cpu_present_map))
 		continue;
         sprintf(buf,"nae_task_%d",i);
         task[i] = kthread_create(xlp_nae_poll, (void *)(long)i, (void *)&buf);
@@ -1025,7 +1021,7 @@ void nlm_spawn_kthread(void)
     }
     if(i == nr_cpus){
         for(i=0; i<nr_cpus; i++){
-	    if(!cpu_isset(i, cpu_online_map))
+	    if(!cpu_isset(i, cpu_present_map))
 		    continue;
             kthread_bind(task[i], i);
             wake_up_process(task[i]);
@@ -1033,7 +1029,6 @@ void nlm_spawn_kthread(void)
     }
 
 }
-#endif
 
 static void nlm_update_ucore_shared_memory(void)
 {
@@ -1043,7 +1038,7 @@ static void nlm_update_ucore_shared_memory(void)
 
 	while(i < 32){
 		for(j=0; j<NR_CPUS && i<32; j++){
-			if(!cpu_isset(j, cpu_online_map))
+			if(!cpu_isset(j, cpu_present_map))
 				continue;
 			data[i] = j*4 + nae_cfg.rx_vc;
 			i++;
@@ -1101,7 +1096,6 @@ static void nlm_replenish_per_cpu_buffer(int qindex, int bufcnt)
 	printk("Send %d descriptors for queue %d(vc %d)\n", bufcnt, qindex, vc_index);
 }
 
-#ifdef NAPI_MODEL
 /*
  * Setup XLP NAPI subsystem
  */
@@ -1113,6 +1107,7 @@ DEFINE_PER_CPU(struct napi_struct, xlp_napi_poll_struct);
 /* XLR NAPI per CPU packet counter */
 DEFINE_PER_CPU(unsigned long long, xlp_napi_rx_count);
 
+
 static void napi_msgint_handler(int vc)
 {
 	struct napi_struct *napi;
@@ -1124,7 +1119,7 @@ static void napi_msgint_handler(int vc)
 	napi_schedule(napi);
 }
 
-extern int register_vc_handler(int nae_rx_vc, void (*napi_msgint_handler)(int));
+extern int nlm_xlp_register_vc_handler(int nae_rx_vc, void (*napi_msgint_handler)(int));
 
 static int nlm_xlp_napi_setup(void)
 {
@@ -1140,7 +1135,7 @@ static int nlm_xlp_napi_setup(void)
 	{
 		napi = &per_cpu(xlp_napi_poll_struct, cpu_count);
 		memset(napi, 0, sizeof(*napi));
-		netif_napi_add(&xlp_napi_dummy_dev, napi, xlp_nae_poll, weight_p);
+		netif_napi_add(&xlp_napi_dummy_dev, napi, xlp_nae_napi_poll, weight_p);
 		napi_enable(napi);
 	}
 
@@ -1148,13 +1143,13 @@ static int nlm_xlp_napi_setup(void)
 		per_cpu(xlp_napi_rx_count, i) = 0;
 	}
 
-	register_vc_handler(nae_rx_vc, napi_msgint_handler);
-	register_vc_handler(nae_fb_vc, napi_msgint_handler);
+	napi_vc_mask = (1 << nae_rx_vc) | (1 << nae_fb_vc);
+	nlm_xlp_register_vc_handler(nae_rx_vc, napi_msgint_handler);
+	nlm_xlp_register_vc_handler(nae_fb_vc, napi_msgint_handler);
 
 	return 0;
 }
 
-#endif
 
 
 
@@ -1179,18 +1174,21 @@ static void nlm_xlp_nae_init(void)
 		perf_mode = NLM_TCP_MODE;
 	}
 
-
 	printk("======= Module Parameters =========\n");
-	printk("debug = %d, num_descs_perq=%d perf_mode=%s\n",
-	       debug, num_descs_perq, mode_str[perf_mode]);
+	printk("num_descs_perq=%d perf_mode=%s enable_napi=%d enable_lro=%d\n",
+	       num_descs_perq, mode_str[perf_mode], enable_napi, enable_lro);
 
+	/* msgring intr may not work in 8xx, disabling the napi */
+	if(is_nlm_xlp8xx() || is_nlm_xlp832_ax() || is_nlm_xlp8xx_ax()) 
+		enable_napi = 0;
+	
 	for(i=0; i<NR_CPUS; i++)
 		nlm_mode[LAST_RCVD_INDEX(i)] = perf_mode;
 
 	/*Disable interrupts for VC - 0-127*/
 
 	for(i=0; i<NR_CPUS; i++){
-		if(!cpu_isset(i, cpu_online_map))
+		if(!cpu_isset(i, cpu_present_map))
 			continue;
 		for(vc=0; vc<4; vc++)
 			nlm_hal_disable_vc_intr(i*4 + vc);
@@ -1292,10 +1290,10 @@ static void nlm_xlp_nae_init(void)
 		       __FUNCTION__);
 	}
 
-#ifndef NAPI_MODEL
-	/*spawn percpu kthread*/
-	nlm_spawn_kthread();
-#endif
+	if(!enable_napi) {
+		/*spawn percpu kthread*/
+		nlm_spawn_kthread();
+	}
 
 	/* configure the descs */
 	if(nae_cfg.freein_fifo_shared) {
@@ -1976,9 +1974,8 @@ static int __init nlm_xlp_mac_init(void)
 
 	nlm_xlp_nae_init();
 
-#ifdef NAPI_MODEL
-	nlm_xlp_napi_setup();
-#endif
+	if(enable_napi)
+		nlm_xlp_napi_setup();
 
 	return pci_register_driver(&soc_driver);
 }
-- 
1.7.1

