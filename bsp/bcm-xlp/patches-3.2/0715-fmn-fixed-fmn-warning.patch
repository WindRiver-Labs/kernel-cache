From 70a7491dc3f00943eb2c928da7a195fc0e9911cf Mon Sep 17 00:00:00 2001
From: Virendra Pathak <vpathak@broadcom.com>
Date: Sun, 16 Jun 2013 23:42:36 +0530
Subject: fmn: fixed fmn warning

Increased the default fmn queue size value due to additon of new stations on xlp9xx.
set srio as invalid station on xlp9xx.
And fixed the fmn single entry message based on chip type.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn.h b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn.h
index 5dbe2d9..3463973 100644
--- a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn.h
+++ b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn.h
@@ -46,7 +46,7 @@
 
 #define FMN_INT_BIT_MASK 0x800000000000000ULL /* Bit 59 */
 
-#define XLP_FMN_DEFAULT_QUEUE_SIZE 	16384 /*16K */
+#define XLP_FMN_DEFAULT_QUEUE_SIZE	28672 /* 28K */
 #define XLP_FMN_DEFAULT_CREDITS    	50
 #define XLP_FMNQ_SPILL_DEFAULT_MEM_ADDR (256ULL << 20)
 #define XLP_FMNQ_SPILL_DEFAULT_MEM_SIZE (32ULL << 20)
diff --git a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c
index ece89b1..8d2b985 100644
--- a/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c
+++ b/arch/mips/netlogic/lib/fmnlib/nlm_hal_fmn_config.c
@@ -62,6 +62,9 @@
 #define LOW4KMASK       	0x00000000000003ffULL
 
 
+#define DEFAULT_SINGLE_ENTRY_MSG_SZ	12
+#define XLP9XX_SINGLE_ENTRY_MSG_SZ	16
+
 nlm_fmn_config_t xlp3xx_fmn_config[] = {
 [XLP_MSG_HANDLE_CPU0] = {XLP_STNID_CPU0, XLP_CPU0_VC_LIMIT},
 [XLP_MSG_HANDLE_CPU1] = {XLP_STNID_CPU1, XLP_CPU1_VC_LIMIT},
@@ -533,7 +536,7 @@ static int fmn_update_qsize(int node)
 
 static void fmn_validate_credit(int node, int max_nodes)
 {
-	unsigned int credits, qsize;
+	unsigned int credits, qsize, reqd_size;
 	unsigned int s_stn, d_stn, src_node;
 	struct fmn_qsize_credit_config *fmn_q_config = nlm_node_cfg.fmn_cfg[node]->fmn_q_config;
 
@@ -552,15 +555,20 @@ static void fmn_validate_credit(int node, int max_nodes)
                     }
 		}
 
+		/* considering single entry message only */
+		reqd_size = credits * DEFAULT_SINGLE_ENTRY_MSG_SZ;
+		if(is_nlm_xlp9xx()) {
+			reqd_size = credits * XLP9XX_SINGLE_ENTRY_MSG_SZ;
+		}
+
 #ifdef FMN_DEBUG
-		nlm_print("Credits check dst stn %s, reqd %d cfgrd %d\n", 
-					fmn_q_config[d_stn].q_name, (credits * 12), qsize);
+                nlm_print("Credits check dst stn %s, reqd %d cfgrd %d\n",
+                                        fmn_q_config[d_stn].q_name, reqd_size, qsize);
 #endif
 
-		/* considering single entry message only */
-		if((credits * 12) >= qsize) 
-			nlm_print("WARN ... Credits overflow.. dst stn %s, reqd %d cfgd %d\n", 
-					fmn_q_config[d_stn].q_name, (credits * 12), qsize);
+		if(reqd_size >= qsize)
+			nlm_print("WARN ... Credits overflow.. dst stn %s, reqd %d cfgd %d\n",
+					fmn_q_config[d_stn].q_name, reqd_size, qsize);
 	}
 }
 
@@ -743,6 +751,9 @@ static void nlm_hal_write_fmn_credit(int node, int max_nodes)
 	if (is_nlm_xlp9xx()) {
 		/* XLP9XX / XLP7XX */
 		nlm_print(" XLP9XX/XLP7XX FMN credit configuration \n");
+		
+		/* 9xx does not have SRIO engine */
+		fmn_invalidate_blocks(node, XLP_MSG_BLK_SRIO);
 
 		fmn_config = &xlp9xx_fmn_config[0];
 
-- 
1.7.1

