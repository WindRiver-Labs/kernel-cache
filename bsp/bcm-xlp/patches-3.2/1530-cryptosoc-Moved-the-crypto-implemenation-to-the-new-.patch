From 4134d3cc7520d06187d21676ec775bd4fa965af9 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Fri, 3 May 2013 16:31:00 +0530
Subject: cryptosoc: Moved the crypto implemenation to the new infrastructure

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/seclib/cryptodev.h b/arch/mips/netlogic/lib/seclib/cryptodev.h
new file mode 100644
index 0000000..b5ac10c
--- /dev/null
+++ b/arch/mips/netlogic/lib/seclib/cryptodev.h
@@ -0,0 +1,63 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * http://www.gnu.org/licenses/gpl-2.0.txt
+ * or the Broadcom license below:
+
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_4# */
+
+#ifndef _NLM_CRYPTO_DEV_H
+#define _NLM_CRYPTO_DEV_H
+
+#include <errno.h>
+#include <sys/eventfd.h>
+#include <poll.h>
+
+#define NLM_CRYPTO_DEV_NAME "nlmcrypto"
+
+#define NLM_CRYPTO_IOC 'C'
+
+#define NLM_CRYPTO_CTXT_ALLOC			_IOWR(NLM_CRYPTO_IOC, 1, unsigned long long)
+#define NLM_CRYPTO_CTXT_FREE			_IOWR(NLM_CRYPTO_IOC, 2, unsigned long long)
+#define NLM_CRYPTO_GET_RX_VC_NUMS 		_IOWR(NLM_CRYPTO_IOC, 3, unsigned int)
+#define NLM_CRYPTO_GET_COMMON_SHM_ADDR_SZ 	_IOWR(NLM_CRYPTO_IOC, 4, unsigned long long)
+#define NLM_CRYPTO_GET_SAE_VC_NUMS		_IOWR(NLM_CRYPTO_IOC, 5, unsigned int)
+#define NLM_CRYPTO_GET_RSA_VC_NUMS		_IOWR(NLM_CRYPTO_IOC, 6, unsigned int)
+#define NLM_CRYPTO_GET_CHIP_FEATURE		_IOWR(NLM_CRYPTO_IOC, 7, unsigned int)
+
+
+/* How many pages for the context response maintainance ,
+ Don't increast it as I am using a uint64_t variable to
+ find the empty vs non-empty status . Play with the page-order instead */
+#define NLM_CRYPTO_MAX_CTXT_PAGES 64
+
+
+
+#endif
diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_lib_ifc.h b/arch/mips/netlogic/lib/seclib/cryptosoc_lib_ifc.h
new file mode 100644
index 0000000..3bd54a2
--- /dev/null
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_lib_ifc.h
@@ -0,0 +1,73 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#ifndef _CRYPTOSOC_LIB_IFC_H
+#define _CRYPTOSOC_LIB_IFC_H
+
+#include "nlm_cmem.h"
+extern void **cmem_pgd;
+
+/* This app is going to support on all the processor varients */
+#define SAESOC_PTYPE_GEN_ALL_SUPPORT
+#define RSASOC_PTYPE_GEN_ALL_SUPPORT
+#define ECCSOC_PTYPE_GEN_ALL_SUPPORT
+
+#ifndef SAESOC_PTYPE_GEN_ALL_SUPPORT
+/* Otherwise declare the specific ones here */
+#define SAESOC_PTYPE_GEN2_SUPPORT
+#endif
+
+/* Application specific private size for lib-params,
+*  *  session & data descriptors */
+#define SAESOC_SESSION_DESC_APP_PRIV_SZ 64
+#define SAESOC_DATA_DESC_APP_PRIV_SZ    64
+#define RSASOC_REQ_DESC_APP_PRIV_SZ     64
+#define ECCSOC_REQ_DESC_APP_PRIV_SZ     64
+
+
+#define CRYPTOSOC_MAX_PENDING_REQS_PER_CTX 64
+#define CRYPTOSOC_CTX_APP_PRIV_SZ   64
+
+/* for control, packet descriptors and rsa request and result */
+static inline _uint64_t cryptosoc_virt_to_phys(unsigned long vaddr)
+{
+	struct nlm_cmem_seg sg[1];
+	int rv;
+	rv = nlm_cmem_va_to_pa(cmem_pgd, vaddr, 1, &sg[0], 1);
+	assert(rv == 1);
+	return (_uint64_t)sg[0].pa;
+}
+
+/* for control, packet descriptors and rsa request and result */
+static inline unsigned long cryptosoc_phys_to_virt(_uint64_t paddr)
+{
+	return nlm_cmem_pa_to_va(cmem_pgd, paddr);
+}
+
+#endif
diff --git a/arch/mips/netlogic/lib/seclib/nlmcrypto_ifc.h b/arch/mips/netlogic/lib/seclib/nlmcrypto_ifc.h
deleted file mode 100644
index 3f27f25..0000000
--- a/arch/mips/netlogic/lib/seclib/nlmcrypto_ifc.h
+++ /dev/null
@@ -1,98 +0,0 @@
-/*-
- * Copyright (c) 2003-2012 Broadcom Corporation
- * All Rights Reserved
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
- * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- * #BRCM_2# */
-
-#ifndef _NLM_CRYPTO_IFC_H
-#define _NLM_CRYPTO_IFC_H
-
-#include "nlm_cmem.h"
-extern void **cmem_pgd;
-extern void *nlm_cmem_alloc(size_t size);
-extern void *nlm_cmem_align(size_t align, size_t size);
-extern void nlm_cmem_free(void *ptr);
-
-/* for control, packet descriptors and rsa request and result */
-static inline unsigned long long crypto_virt_to_phys(void *vaddr)
-{
-	struct nlm_cmem_seg sg[1];
-	int rv;
-	rv = nlm_cmem_va_to_pa(cmem_pgd, (unsigned long)vaddr, 1, &sg[0], 1);
-	assert(rv == 1);
-	return sg[0].pa;
-}
-
-/* for control, packet descriptors and rsa request and result */
-static inline void *crypto_phys_to_virt(unsigned long long paddr)
-{
-	return (void *)nlm_cmem_pa_to_va(cmem_pgd, paddr);
-}
-
-/* for packet data, assert if the number of segs exceeds maximum segments ,
- The offsets are matching with the crypto pktdesc4 and pktdesc5 offsets */
-static inline int crypto_fill_pkt_seg_paddr_len(void *vaddr, unsigned int inlen,
-	       struct nlm_crypto_pkt_seg_desc *segs, unsigned int s_seg, unsigned int max_segs,
-	       int fillsrc, int filldst, unsigned long long sinitval, unsigned long long dinitval)
-{
-	unsigned int rv, len = 0, i;
-	unsigned int remlen = inlen;
-	unsigned long e = ((unsigned long)vaddr + inlen);
-	struct nlm_cmem_seg sg[16];
-
-	for (; remlen > 0;) {
-		rv = nlm_cmem_va_to_pa(cmem_pgd, (unsigned long)vaddr, e - (unsigned long)vaddr, &sg[0], 16);
-		for (i = 0; i < rv; ) {
-			len = sg[i].len > NLM_CRYPTO_MAX_SEG_LEN ? NLM_CRYPTO_MAX_SEG_LEN : sg[i].len;
-			/* fprintf(stderr, "i %d rv %d inlen %d remlen %d vaddr %lx s_seg %d max_segs %d len %d pa %llx\n",
-					i, rv, inlen, remlen, (long)vaddr, s_seg, max_segs, len, sg[i].pa);*/
-			assert(s_seg < max_segs);
-			if (fillsrc)
-				segs[s_seg].src = ccpu_to_be64(sg[i].pa |
-						(((unsigned long long)len - 1) << NLM_CRYPTO_SEGS_LEN_OFF) | sinitval);
-			if (filldst)
-				segs[s_seg].dst = ccpu_to_be64(sg[i].pa |
-						(((unsigned long long)len - 1) << NLM_CRYPTO_SEGS_LEN_OFF) | dinitval);
-			remlen -= len;
-			vaddr += len;
-			s_seg++;
-			sg[i].len   -= len;
-			if (!sg[i].len) {
-				i++;
-				continue;
-			}
-			sg[i].pa += len;
-		}
-	}
-	return s_seg;
-}
-
-
-#define crypto_malign(align, size) nlm_cmem_align(align, size)
-#define crypto_mfree(p) nlm_cmem_free(p)
-
-
-#endif
-- 
1.7.1

