From c0dcc0840fef6f35947791a243fbcc82e1331e9d Mon Sep 17 00:00:00 2001
From: Alok Agrawat <aagrawat@netlogicmicro.com>
Date: Fri, 8 Apr 2011 18:29:37 +0530
Subject: stable for auth aes and aead. working aes, des, 3des, sha1 and md5

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/crypto/sae/nlm_aead.c b/drivers/crypto/sae/nlm_aead.c
index ed471c6..7ccf458 100755
--- a/drivers/crypto/sae/nlm_aead.c
+++ b/drivers/crypto/sae/nlm_aead.c
@@ -233,7 +233,7 @@ aead_setkey(struct crypto_aead *tfm, const u8 * key, unsigned int keylen, uint32
 	return -EINVAL;
 }
 
-void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
+static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
 {
 	int k = 0;
 	unsigned char *temp_buf[len*2+1];
@@ -242,7 +242,7 @@ void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
         	printk("%.2x",buf[k]);
 
 }
-void dump_session(struct crypto_session *session)
+static void dump_session(struct crypto_session *session)
 {
 	printk("\n session = %x",(unsigned long)session);
 	printk("\n session->cntrl_desc = %x session->pkt_dec",(unsigned long)session->cntrl_desc, (unsigned long)session->pkt_desc);
diff --git a/drivers/crypto/sae/nlm_crypto.c b/drivers/crypto/sae/nlm_crypto.c
index 3f8460a..e54b5e3 100644
--- a/drivers/crypto/sae/nlm_crypto.c
+++ b/drivers/crypto/sae/nlm_crypto.c
@@ -577,7 +577,7 @@ dbg;
 dbg;
 	nlm_hal_crypto_preprocess_request((void *) tmp_cntrl_desc, tmp_cip,
 					  tmp_aip);
-	if (session->aip->auth_key) {
+	if (session->aip && session->aip->auth_key) {
 		free(aip.auth_key);
 		free(aip.auth_key->buf);
 	}
diff --git a/drivers/crypto/sae/nlm_enc.c b/drivers/crypto/sae/nlm_enc.c
index a3550c8..b5a0fa3 100755
--- a/drivers/crypto/sae/nlm_enc.c
+++ b/drivers/crypto/sae/nlm_enc.c
@@ -69,6 +69,27 @@ struct crypto_rfc3686_ctx {
 
 unsigned char nonce[4];
 
+static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
+{
+	int k = 0;
+	unsigned char *temp_buf[len*2+1];
+	printk("\n %s", msg);
+	for(k = 0; k < len; k++)
+        	printk("%.2x",buf[k]);
+
+}
+static void dump_session(struct crypto_session *session)
+{
+	printk("\n session = %x",(unsigned long)session);
+	printk("\n session->cntrl_desc = %x session->pkt_dec",(unsigned long)session->cntrl_desc, (unsigned long)session->pkt_desc);
+	printk("\n session->aip = %x session->cip = %x\n",(unsigned long)session->aip, (unsigned long)session->cip);
+
+	printk("\n session->cip->cipher_mode = %d session->cip->cipher_alg = %d",session->cip->cipher_mode, session->cip->cipher_alg);
+	dump_buffer(session->cip->cipher_key->buf, session->cip->cipher_key->iov_len, "Cipher_key:");
+	printk("\n session->cip->cipher_key->iov_len = %d session->cip->arc4_cipher_key_len = %d session->cip->arc4_key_init= %d session->cip->cfb_mask = %d\n",session->cip->cipher_key->iov_len,session->cip->arc4_cipher_key_len, session->cip->arc4_key_init, session->cip->cfb_mask);
+
+}
+
 static int
 xlp_setkey(struct crypto_tfm *tfm, const u8 * in_key, unsigned int len, uint32_t cipher_alg)
 {
@@ -123,6 +144,7 @@ xlp_setkey(struct crypto_tfm *tfm, const u8 * in_key, unsigned int len, uint32_t
 	session->cip->cfb_mask = 0;
 
 //printk(KERN_ERR "\n enc: xlp_setkey session = %x session->cip = %x ession->cip->cipher_alg=%d",(unsigned int)session, (unsigned int)session->cip, session->cip->cipher_alg);
+//dump_session(session);
 	return 0;
 }
 
@@ -132,7 +154,6 @@ xlp_des3_setkey(struct crypto_tfm *tfm, const u8 * in_key, unsigned int len)
 	uint32_t cipher_alg;
 	u32 *flags = &tfm->crt_flags;
 
-//printk(KERN_ERR "\n enc xlp_des3_setkey");
 	switch (len) {
 	case DES3_EDE_KEY_SIZE:
 	        cipher_alg = NLM_CIPHER_3DES;
@@ -143,6 +164,7 @@ xlp_des3_setkey(struct crypto_tfm *tfm, const u8 * in_key, unsigned int len)
 		*flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;
 		return -EINVAL;
 	}
+//printk(KERN_ERR "\n enc xlp_des3_setkey");
 	return xlp_setkey(tfm, in_key, len, cipher_alg);
 }
 
@@ -253,10 +275,11 @@ xlp_crypt(struct blkcipher_desc *desc,
 	struct crypto_session *session = crypto_blkcipher_ctx(desc->tfm);
 	struct crypto_param *sd;
 	struct blkcipher_walk walk;
-	int err, ret, i, j;
+	int err, ret, i = 0, j;
 	struct scatterlist *sg_src, *sg_dst;
 
 //printk(KERN_ERR "\n enc: xlp_crypt session = %x session->cip = %x ession->cip->cipher_alg=%d",(unsigned int)session, (unsigned int)session->cip, session->cip->cipher_alg);
+//dump_session(session);
 	sd = malloc(sizeof (struct crypto_param));
 	if (!sd) {
 		printk(KERN_ERR
@@ -294,7 +317,7 @@ xlp_crypt(struct blkcipher_desc *desc,
 	sd->iv_offset = 0;
 	sd->auth_offset = 0;
 	sd->cipher_offset = 0;
-#if 0
+#if 1
 	j = nbytes;
 	for (i = 0, sg_src = src, sg_dst = dst; j > 0;
 	     sg_src = scatterwalk_sg_next(sg_src), sg_dst =
@@ -304,6 +327,7 @@ xlp_crypt(struct blkcipher_desc *desc,
 
 	}
 #endif
+	/* i represents number of frags */
 	sd->src = malloc(sizeof (struct crypto_iovec) * (i + 1));	/* Extra 1 for IV */
 	sd->dst = malloc(sizeof (struct crypto_iovec) * (i + 1));
 	if (sd->src == NULL || sd->dst == NULL) {
@@ -346,24 +370,12 @@ xlp_crypt(struct blkcipher_desc *desc,
 		nbytes -= len;
 	}
 	sd->nr_frags = i;
-
-/*{int k = 0;
-i--;
-printk(KERN_ERR "\n plaintext:");
-for(k = 0; k < sd->src[i].iov_len; k++)
-        printk(KERN_ERR "%x",sd->src[i].buf[k]);
-}*/
-//printk(KERN_ERR "\n enc: xlp_crypt num_frags = %d", i); 
-//printk(KERN_ERR "\n enc: xlp_crypt 2"); 
-//printk(KERN_ERR "\n111111111111 enc: xlp_crypt session = %x session->cip = %x ession->cip->cipher_alg=%d",(unsigned int)session, (unsigned int)session->cip, session->cip->cipher_alg);
+	i--;
+//printk(KERN_ERR "\n src_len=%d cipher_len=%d iv_len=%d iv_offset=%d cipher_offset=%d",sd->src_len,sd->cipher_len, sd->iv_len,sd->iv_offset,sd->cipher_offset);
+//dump_buffer(sd->src[i].buf, sd->src[i].iov_len,"plaintext:");
 	ret = crypto_cipher_auth_op(session, sd);
-/*printk(KERN_ERR "\n222222222222 enc: xlp_crypt session = %x session->cip = %x ession->cip->cipher_alg=%d",(unsigned int)session, (unsigned int)session->cip, session->cip->cipher_alg);
-{int k = 0;
-printk(KERN_ERR "\n cipher_text:");
-for(k = 0; k < sd->dst[i].iov_len; k++)
-	printk(KERN_ERR "%x",sd->dst[i].buf[k]);
+//dump_buffer(sd->dst[i].buf, sd->dst[i].iov_len,"cipher_text:");
 
-}*/
 	if (ret) {
 		printk(KERN_ERR
 		       "\nError: Error in cipher auth operation ret = %x. Returning from %s",
@@ -371,17 +383,6 @@ for(k = 0; k < sd->dst[i].iov_len; k++)
 		return -EAGAIN;
 	}
 
-#if 0
-	if (session->cip) {
-		if (session->cip->cipher_key) {
-			if (session->cip->cipher_key->buf)
-				free(session->cip->cipher_key->buf);
-			free(session->cip->cipher_key);
-		}
-		free(session->cip);
-	}
-#endif
-//printk(KERN_ERR "\n enc: xlp_crypt 3"); 
 	crypto_cleanup_session(session);
 	if (sd->src)
 		free(sd->src);
@@ -391,6 +392,7 @@ for(k = 0; k < sd->dst[i].iov_len; k++)
 		free(sd);
 
 //printk(KERN_ERR "\n enc: xlp_crypt 4"); 
+//dump_session(session);
 	return 0;
 }
 
-- 
1.7.1

