From 1c18db63852c048427eb04d3fa18361dc0f383e5 Mon Sep 17 00:00:00 2001
From: Rahul Jain <rahulj@broadcom.com>
Date: Mon, 5 Mar 2012 15:10:20 +0530
Subject: Interlaken support added in nae-perf

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/misc/netlogic/nae-perf/xlp_hw.c b/drivers/misc/netlogic/nae-perf/xlp_hw.c
index a0fb6e2..cee8158 100755
--- a/drivers/misc/netlogic/nae-perf/xlp_hw.c
+++ b/drivers/misc/netlogic/nae-perf/xlp_hw.c
@@ -328,7 +328,10 @@ void xlp_get_mac_stats(struct net_device *dev, struct net_device_stats *stats)
 	struct dev_data *priv = netdev_priv(dev);
 	unsigned long long val;
 
-	stats->tx_packets = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, TX_PACKET_COUNTER);
+	if (priv->type == INTERLAKEN_IF)
+		return;
+
+	stats->tx_packets = nlm_hal_read_mac_reg(priv->node, priv->block, priv->index, TX_PACKET_COUNTER);
 #ifdef CONFIG_64BIT
 	val = nlm_hal_read_mac_reg(priv->node,  priv->block, priv->index, 0x1f);
 	stats->tx_packets |= ( val << 32);
diff --git a/drivers/misc/netlogic/nae-perf/xlp_nae.c b/drivers/misc/netlogic/nae-perf/xlp_nae.c
index ab2f61a..cb0d0d5 100755
--- a/drivers/misc/netlogic/nae-perf/xlp_nae.c
+++ b/drivers/misc/netlogic/nae-perf/xlp_nae.c
@@ -896,13 +896,17 @@ static int xlp_poll_lower(int budget, int cpu)
 		context = (msg1 >> 54) & 0x3ff;
 
 		if (err) {
+
 			vaddr = (uint64_t)bus_to_virt(addr);
 			skb = mac_get_skb_back_ptr(vaddr);
 #ifdef CONFIG_NLM_NET_OPTS
 			mac_refill_frin_skb(addr, skb->queue_id);
 #endif
+			/*
+			Commenting as priv is not available here
 			STATS_INC(priv->stats.rx_errors);
 			STATS_INC(priv->stats.rx_dropped);
+			*/
 			err_replenish_count[LAST_RCVD_INDEX(cpu)]++;
 			continue;
 		}
@@ -1355,6 +1359,15 @@ static void nlm_xlp_nae_init(void)
 				break;
 			case INTERLAKEN_IF:
 				priv->index = INTERLAKEN;
+				priv->phy.addr = nae_cfg->ports[i].ext_phy_addr;
+				if (nae_cfg->ports[i].hw_port_id == 0) {
+					if (dev_alloc_name(dev, "ilk0-%d") < 0)
+						printk("alloc name failed \n");
+				}
+				else {
+					if (dev_alloc_name(dev, "ilk8-%d") < 0)
+						printk("alloc name failed \n");
+				}
 				break;
 			default:
 				priv->index=0;
@@ -1856,10 +1869,6 @@ static int nlm_xlp_nae_change_mtu(struct net_device *dev, int new_mtu)
 		return -EINVAL;
 	}
 
-	if(priv->type==INTERLAKEN_IF){
-		return -EINVAL;
-	}
-
 	spin_lock_irqsave(&priv->lock, flags);
 
 	local_mtu = (new_mtu+ETH_HLEN+ETH_FCS_LEN+SMP_CACHE_BYTES) & ~(SMP_CACHE_BYTES - 1);
@@ -1878,9 +1887,16 @@ static int nlm_xlp_nae_change_mtu(struct net_device *dev, int new_mtu)
 	if(priv->type==SGMII_IF){
 		nlm_hal_set_sgmii_framesize(priv->node, priv->block, priv->index, local_mtu);
 	}
-	if(priv->type==XAUI_IF){
+	else if(priv->type==XAUI_IF){
 		nlm_hal_set_xaui_framesize(priv->node, priv->block, local_mtu, local_mtu);
 	}
+	else if(priv->type==INTERLAKEN_IF){
+		nlm_hal_set_ilk_framesize(priv->node, priv->block, priv->phy.addr, local_mtu);
+	}
+	else {
+		spin_unlock_irqrestore(&priv->lock, flags);
+		return -1;
+	}
 
 	dev->mtu = new_mtu;
 
-- 
1.7.1

