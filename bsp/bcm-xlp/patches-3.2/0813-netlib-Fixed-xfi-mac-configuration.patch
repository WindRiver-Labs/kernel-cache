From a3e629d89f5c9e3349a789c8a90624a7bc1f7019 Mon Sep 17 00:00:00 2001
From: Jayanthi A <jayanthi.annadurai@broadcom.com>
Date: Sat, 12 Oct 2013 01:18:15 -0700
Subject: netlib: Fixed xfi mac configuration

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h b/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
index 17f1d86..179549c 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
@@ -876,6 +876,7 @@ enum {
 	#define NETIOR_GMAC_RX_PFC_EN_POS	12
 	#define NETIOR_GMAC_TX_PAUSE_POS	10
 
+#define NETIOR_XGMAC_PAUSE_OPC		0x79
 	
 #define NETIOR_XGMAC_CTRL1              0x7F
     #define NETIOR_XGMAC_RXAUI_DC_POS        30 /* Rxaui Disparity calculation */
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
index 0330e35..aa8ffda 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
@@ -1148,13 +1148,21 @@ void __netsoc_config_context_xoff_thr(nae_t *nae, net_port_t *netport, int thgrp
          send xoff when rx_data_buffer_used >= xoff threshold */
         int xoff, xon, val, reaction_len, inflight_len;
 
-	if (netport->iftype == XLAUI_IF) {
+	if ((netport->iftype == XLAUI_IF) || (netport->iftype == XAUI_IF)){
 		maxbuf /= 4;
 		val = maxbuf / 4;
                 xoff = ((val * 3) << 2);
 		xon = ((val * 2) << 2);
 		val = (xoff << 3) | (xon << 17) | thgrp;
-	}else {
+	}
+        else if (netport->iftype == XFI_IF){
+		maxbuf /= 4;
+		val = maxbuf / 16;
+		xoff = ((val * 5) << 2);
+		xon = ((val * 1) << 2);
+		val = (xoff << 3) | (xon << 17) | thgrp;
+        }
+	else {
 
  
         if (netport->iftype == SGMII_IF)
@@ -1342,7 +1350,7 @@ void __netsoc_config_ingress_fifo(nae_t *nae)
 			break;
 		//TODO: Verify the values
 		   case XFI_IF:
-			fifo_xoff_thresh = 6;
+			fifo_xoff_thresh = 12;
 			//TODO: check thgrp
 			thrgrp = 3;
 			break;
@@ -2209,20 +2217,35 @@ static void __netsoc_config_xlgmac(net_port_t *netport)
 static void __netsoc_config_xfi(net_port_t *netport)
 {
 	/*Reset the XGMAC : reset all ports in quad */
-        uint32_t val = 0;
+        uint32_t val = 0, lane_cfg;
 	uint64_t mac_base = __netsoc_get_xgmac_base(netport);
+	uint64_t netior_base = netsoc_get_macreg_base_for_lanecfg(netport->nae->mac_base);
 
 	// Apply a soft reset.
 	__netsoc_xfi_softreset(mac_base, 0x2);
 	__netsoc_xfi_softreset(mac_base, 0x0);
 
-	netsoc_write_mac_reg(mac_base, XAUI_CONFIG_0, 0xFFFFFFFF);
+	val = netsoc_read_mac_reg(mac_base, NETIOR_XGMAC_CTRL3);
+	val &= ~(0x1f << 10);
+	val |= (5<<10);
+	netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_CTRL3, val);
+
+	lane_cfg = netsoc_read_mac_reg(netior_base, LANE_CFG_CPLX_4);
+	if ((netport->hw_port_id / 4) == 0) {
+		lane_cfg |= (1<<17);
+	}	
+	else if ((netport->hw_port_id / 4) == 1) {
+		lane_cfg |= (1<<19);
+	}
+	netsoc_write_mac_reg(netior_base, LANE_CFG_CPLX_4, lane_cfg);
+
+        netsoc_write_mac_reg(mac_base, XAUI_CONFIG_0, 0xFFFFFFFF);
         netsoc_write_mac_reg(mac_base, XAUI_CONFIG_0, 0x00000000);
 
 	/* Enable tx/rx frame */
         val = 0xA00010A8;
         val |= (XAUI_CONFIG_LENCHK | XAUI_CONFIG_GENFCS | XAUI_CONFIG_PAD_64);
-        netsoc_write_mac_reg(mac_base, XAUI_CONFIG_1, val );
+        netsoc_write_mac_reg(mac_base, XAUI_CONFIG_1, val);
         /* write max frame len*/
         netsoc_write_mac_reg(mac_base, XAUI_MAX_FRAME_LEN , 0x01800600);
 
@@ -2235,11 +2258,13 @@ static void __netsoc_config_xfi(net_port_t *netport)
                 val |= 1 << NETIOR_XGMAC_RX_PFC_EN_POS;
                 val |= 1 << NETIOR_XGMAC_TX_PAUSE_POS;
                 val |= 1 << NETIOR_XGMAC_VLAN_DC_POS;
+		netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_PAUSE_OPC, 0x101);
         } else {
                 val &= ~(1 << NETIOR_XGMAC_TX_PFC_EN_POS);
                 val &= ~(1<<NETIOR_XGMAC_RX_PFC_EN_POS);
                 val |= (1 << NETIOR_XGMAC_TX_PAUSE_POS);
                 val &= ~(1 << NETIOR_XGMAC_VLAN_DC_POS);
+		netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_PAUSE_OPC, 0x1);
         }
         netsoc_write_mac_reg(mac_base, NETIOR_XGMAC_CTRL1, val);
 
-- 
1.7.1

