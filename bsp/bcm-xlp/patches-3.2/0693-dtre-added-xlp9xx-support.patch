From ed075f861e827f48fcf46a42484e2d24fe3a5dda Mon Sep 17 00:00:00 2001
From: Virendra Pathak <vpathak@broadcom.com>
Date: Wed, 15 May 2013 10:59:19 +0530
Subject: dtre: added xlp9xx support

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
index e505503..fd90a7e 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_hal.c
@@ -869,9 +869,67 @@ void nlm_hal_set_dtre_freq(int node, int freq)
 		uint64_t set_freq = nlm_hal_set_soc_freq(node, DFS_DEVICE_DTRE, freq * mhz);
 		NLM_HAL_DO_DIV(set_freq, mhz);
 		nlm_print("DTRE Frequency set to %lluMHz\n", (unsigned long long)set_freq);
+
+/* This is only for experimetal reasons. 
+ * It will cleaned very soon. 
+ */
+#ifdef EXPERIMENTAL
+		/* TODO: xlp9xx
+		   check the device ID for DTRE1 - (DFS_DEVICE_DTRE1)
+		   */
+		/* for xlp9xx, set the frequency for the additional engine DTRE1 also */
+		if (is_nlm_xlp9xx()) {
+			uint64_t set_freq = nlm_hal_set_soc_freq(node, DFS_DEVICE_DTRE1, freq * mhz);
+			NLM_HAL_DO_DIV(set_freq, mhz);
+			nlm_print("DTRE Frequency set to %lluMHz\n", (unsigned long long)set_freq);
+		}
+#endif
+
 	}
 }
 
+/* TODO: xlp9xx
+    1. check B/D/F values for both engines
+   */
+static void nlm_hal_dtr_9xx_init(void *fdt)
+{
+	uint64_t base0 = nlm_hal_get_dev_base (XLP_DTR_NODE, XLP_DTR_BUS, XLP_DTR_DEVICE, XLP_DTR_FUNC);
+	uint64_t base1 = nlm_hal_get_dev_base (XLP_DTR_NODE, XLP_DTR_BUS, XLP_DTR_DEVICE, 6);
+	int frequency = 0, node = 0;
+
+	/* xlp9xx has two DTRE engines.  We need to initialize both */
+
+	/* for engine DTRE0 */
+
+	/* Enable Master Control register */
+	nlm_hal_write_32bit_reg (base0, XLP_DTR_MASTER_CONTROL_REG, 0x1);
+	/* Channel control registers */
+	nlm_hal_write_32bit_reg (base0, XLP_DTR_CHANNEL_CONTROL_REG_0, 0x3fe);
+	nlm_hal_write_32bit_reg (base0, XLP_DTR_CHANNEL_CONTROL_REG_1, 0x3fe);
+
+#ifdef DEBUG
+	nlm_print ("Base Register 0x%llx\n", (unsigned long long)base0);
+	nlm_print ("Master control 0x%x\n", nlm_hal_read_32bit_reg (base0, XLP_DTR_MASTER_CONTROL_REG));
+	nlm_print ("Channel control0 0x%x\n", nlm_hal_read_32bit_reg (base0, XLP_DTR_CHANNEL_CONTROL_REG_0));
+	nlm_print ("Channel control1 0x%x\n", nlm_hal_read_32bit_reg (base0, XLP_DTR_CHANNEL_CONTROL_REG_1));
+#endif
+
+	/* for engine DTRE1 */
+
+	/* Enable Master Control register */
+	nlm_hal_write_32bit_reg (base1, XLP_DTR_MASTER_CONTROL_REG, 0x1);
+	/* Channel control registers */
+	nlm_hal_write_32bit_reg (base1, XLP_DTR_CHANNEL_CONTROL_REG_0, 0x3fe);
+	nlm_hal_write_32bit_reg (base1, XLP_DTR_CHANNEL_CONTROL_REG_1, 0x3fe);
+
+#ifdef DEBUG
+	nlm_print ("Base Register 0x%llx\n", (unsigned long long)base1);
+	nlm_print ("Master control 0x%x\n", nlm_hal_read_32bit_reg (base1, XLP_DTR_MASTER_CONTROL_REG));
+	nlm_print ("Channel control0 0x%x\n", nlm_hal_read_32bit_reg (base1, XLP_DTR_CHANNEL_CONTROL_REG_0));
+	nlm_print ("Channel control1 0x%x\n", nlm_hal_read_32bit_reg (base1, XLP_DTR_CHANNEL_CONTROL_REG_1));
+#endif
+}
+
 /**
 * @brief nlm_hal_dtr_init function is used to enable DTR block on XLP.
 *
@@ -883,8 +941,14 @@ void nlm_hal_set_dtre_freq(int node, int freq)
 void nlm_hal_dtr_init(void *fdt)
 {
     uint64_t base = nlm_hal_get_dev_base (XLP_DTR_NODE, XLP_DTR_BUS, XLP_DTR_DEVICE, XLP_DTR_FUNC);
-    int frequency = 0;
-    int node = 0;
+    int frequency = 0, node = 0;
+
+    if (is_nlm_xlp9xx())
+    {
+	    nlm_hal_dtr_9xx_init(fdt);
+	    return;
+    }
+
     /* Enable Master Control register */
     nlm_hal_write_32bit_reg (base, XLP_DTR_MASTER_CONTROL_REG, 0x1);
     /* Channel control registers */
@@ -896,7 +960,7 @@ void nlm_hal_dtr_init(void *fdt)
     frequency = nlm_hal_get_fdt_freq(fdt, NLM_DTRE);
     nlm_hal_set_dtre_freq(node, frequency);
 
-#ifdef DUMP
+#ifdef DEBUG
     nlm_print ("Base Register 0x%llx\n", (unsigned long long)base);
     nlm_print ("Master control 0x%x\n", nlm_hal_read_32bit_reg (base, XLP_DTR_MASTER_CONTROL_REG));
     nlm_print ("Channel control0 0x%x\n", nlm_hal_read_32bit_reg (base, XLP_DTR_CHANNEL_CONTROL_REG_0));
-- 
1.7.1

