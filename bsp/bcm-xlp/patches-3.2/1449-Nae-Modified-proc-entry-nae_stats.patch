From de6e18d398df74b55a3511caad380a1ffb1879b3 Mon Sep 17 00:00:00 2001
From: Pavani Reddy <pavani@broadcom.com>
Date: Mon, 28 Apr 2014 15:57:14 +0530
Subject: Nae : Modified proc entry nae_stats

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge.h b/drivers/net/ethernet/broadcom/nae/xlpge.h
index 5cc0646..ec2cc46 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge.h
@@ -543,7 +543,7 @@ cycle_t nlm_1588_read_clock1(const struct cyclecounter *);
 cycle_t nlm_1588_read_clock2(const struct cyclecounter *);
 cycle_t nlm_1588_read_clock3(const struct cyclecounter *);
 int xlp_mac_proc_read(char *, char **, off_t , int , int *, void *);
-int nae_proc_read(char *, char **, off_t , int , int *, void *);
+int nae_proc_read(struct seq_file *, void *);
 int nlm_xlp_disable_napi(void);
 void nlm_spawn_kthread(void);
 //int mac_refill_frin_skb(nae_t* , int , uint64_t , uint32_t, int);
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index c303d29..8a00ac6 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -40,7 +40,7 @@
 //#include <nlm_msgring.h>
 //#include <nlm_hal_fmn.h>
 //#include <nlm_eeprom.h>
-
+#include <linux/seq_file.h>
 #include "xlpge.h"
 #include "xlpge_lro.h"
 #include "xlpge_tso.h"
@@ -51,7 +51,7 @@ int phys_cpu_to_log_map[NLM_MAX_NODES][MAX_NAE_PERNODE][NR_CPUS];
 int lcpu_2_pcpu[NR_CPUS];
 static unsigned int fmem[NR_CPUS];
 int num_cpus_per_node;
-
+  
 uint64_t nlm_mode[NR_CPUS*8] ____cacheline_aligned;
 static struct nlm_nae_linux_shinfo *lnx_shinfo[3];
 uint64_t p2p_dynamic_alloc_cnt[NR_CPUS * 8] __cacheline_aligned;
@@ -110,6 +110,20 @@ struct file_operations nlm_load_balance_proc_fops = {
 };
 #endif
 
+static const struct file_operations nae_proc_info_ops;
+static int nae_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, nae_proc_read, 0);
+}
+
+static const struct file_operations nae_proc_info_ops = {
+	.owner = THIS_MODULE,
+	.open = nae_proc_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
 #ifdef CONFIG_NLM_NET_OPTS
 struct sk_buff *last_rcvd_skb[NR_CPUS * 8] ____cacheline_aligned;
 uint32_t last_rcvd_len[NR_CPUS * 8] ____cacheline_aligned;
@@ -1570,19 +1584,17 @@ void nlm_xlp_nae_init(void)
 				       0,			/* def mode */
 				       nlm_root_proc,		/* parent */
 				       xlp_mac_proc_read,	/* proc fn */
-				       0	/* no client data */);
+					   0	/* no client data */);
 	if (!entry) {
 		nae_print(NAE_DBG_ERROR, "[%s]: Unable to create proc entry for xlp_mac!\n",
-		       __func__);
+				__func__);
 	}
-	entry = create_proc_read_entry("nae_stat",
-				       0,
-				       nlm_root_proc,
-				       nae_proc_read,
-				       0);
+	entry = proc_create_data("nae_stats", 
+						0, nlm_root_proc, 
+						&nae_proc_info_ops, 0);
 	if (!entry) {
-		nae_print(NAE_DBG_ERROR,"[%s]: Unable to create proc entry for nae_proc!\n",
-		       __func__);
+		nae_print(NAE_DBG_ERROR, "[%s]: Unable to create proc entry for nae_stats!\n",
+				__func__);
 	}
 #endif
 
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_proc.c b/drivers/net/ethernet/broadcom/nae/xlpge_proc.c
index 7d5c1e2..db7e462 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_proc.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_proc.c
@@ -33,7 +33,7 @@
 #include <linux/inet_lro.h>
 #include <linux/clocksource.h>
 #include <linux/proc_fs.h>
-
+#include <linux/seq_file.h>
 #include "xlpge.h"
 
 void nlm_nae_remove_procentries(void)
@@ -41,11 +41,9 @@ void nlm_nae_remove_procentries(void)
 	/* TODO XXX: revisit nlm_root_proc */
 	remove_proc_entry("mac_stats", nlm_root_proc);
 }
-
-int nae_proc_read(char *page, char **start, off_t off,
-			     int count, int *eof, void *data)
+int nae_proc_read(struct seq_file *sfile, void *not_used)
 {
-	int len = 0;
+
 	int i = 0;
 	uint64_t total_err = 0, total_fast = 0;
 	uint64_t total_slow = 0, total_recv = 0;
@@ -55,14 +53,13 @@ int nae_proc_read(char *page, char **start, off_t off,
 				(err_replenish_count[CPU_INDEX(i)] == 0))
 			continue;
 
-		nae_print(NAE_DBG_TRACE, "cpu%d, recv %ld fast_repl %ld, slow_repl %ld "
-			"err_repl %ld p2pdalloc %lld\n", i,
-			(ulong)receive_count[CPU_INDEX(i)],
-			(ulong)fast_replenish_count[CPU_INDEX(i)],
-			(ulong)slow_replenish_count[CPU_INDEX(i)],
-			(ulong)err_replenish_count[CPU_INDEX(i)],
-			p2p_dynamic_alloc_cnt[CPU_INDEX(i)]);
-
+		seq_printf(sfile, "cpu%d, recv %ld fast_repl %ld, slow_repl %ld "
+				"err_repl %ld p2pdalloc %lld\n", i,
+				(ulong)receive_count[CPU_INDEX(i)],
+				(ulong)fast_replenish_count[CPU_INDEX(i)],
+				(ulong)slow_replenish_count[CPU_INDEX(i)],
+				(ulong)err_replenish_count[CPU_INDEX(i)],
+				p2p_dynamic_alloc_cnt[CPU_INDEX(i)]);
 		total_err += err_replenish_count[CPU_INDEX(i)];
 		total_fast += fast_replenish_count[CPU_INDEX(i)];
 		total_slow += slow_replenish_count[CPU_INDEX(i)];
@@ -74,16 +71,15 @@ int nae_proc_read(char *page, char **start, off_t off,
 		err_replenish_count[CPU_INDEX(i)] = 0;
 		receive_count[CPU_INDEX(i)] = 0;
 	}
-	/*check how many hash are empty...*/
-	nae_print(NAE_DBG_CONFIG, "TOTAL_FAST_REPL %ld, TOTAL_SLOW_REPL %ld,"
-	       " TOTAL_ERR_REPL %ld TOTAL_RECV %ld\n",
+	seq_printf(sfile, "TOTAL_FAST_REPL %ld, TOTAL_SLOW_REPL %ld,"
+			" TOTAL_ERR_REPL %ld TOTAL_RECV %ld\n",
 			(ulong)total_fast,
 			(ulong)total_slow,
 			(ulong)total_err,
 			(ulong)total_recv);
 
-	*eof = 1;
-	return len;
+	return 0;
+
 }
 
 /**********************************************************************
-- 
1.7.1

