From 2b9222a2e43966bb8f31a9c60897748cd7ca36b6 Mon Sep 17 00:00:00 2001
From: Prabhath Raman <prabhath@broadcom.com>
Date: Fri, 10 Aug 2012 19:44:02 +0530
Subject: XLP Network Driver: Add the new driver framework for linux 3.0

Functional abstration done to support XLP network driver on 3.0.
Also made changes to linux-userspace build system to build only
nae as of now, since cryto and other drivers / modules are not
yet supported on linux 3.0. Further, XLP network driver does not
read eeprom to get the MAC address. It presently generates it
randomly. We will be adding a simple-bus based i2c driver in due
course to linux 3.0. This eeprom reading code to get mac address
will be revisted once that i2c driver is in place.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge.h b/drivers/net/ethernet/broadcom/nae/xlpge.h
new file mode 100644
index 0000000..71a3927
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge.h
@@ -0,0 +1,429 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#ifndef	__XLPGE_H__
+#define	__XLPGE_H__
+#include <asm/atomic.h>
+#include <nlm_hal_nae.h>
+
+#define	XLP_SOC_MAC_DRIVER		"mac-xlp"
+#define DRV_VERSION			"0.2"
+#define	PCI_VENDOR_NETLOGIC		0x184e
+#define	PCI_DEVICE_ID_NLM_ILK		0x1008
+#define	PCI_DEVICE_ID_NLM_NAE		0x1009
+#define	PCI_DEVICE_ID_NLM_POE		0x100a
+
+#define	MAX_TSO_SKB_PEND_REQS		200
+#define	MAX_PACKET_SZ_PER_MSG		16384
+#define	P2P_SKB_OFF			(MAX_SKB_FRAGS + P2P_EXTRA_DESCS - 1)
+#define	RX_IP_CSUM_VALID		(1 << 3)
+#define	RX_TCP_CSUM_VALID		(1 << 2)
+#define CPU_INDEX(cpu)			((cpu) * 8)
+#define	BYTE_OFFSET			2
+#define	NULL_VFBID			127
+#define	FACTOR				3
+#define	NLM_EEPROM_DUMP			16
+#define	NLM_EEPROM_LEN			(NLM_EEPROM_DUMP * FACTOR)
+#define	NLM_NUM_REG_DUMP		9	/* Register 0xa0 to 0xa8 */
+#define	NLM_ETHTOOL_REG_LEN		(NLM_NUM_REG_DUMP * 4)
+#define	RX_PARSER_EN			1
+#define	RX_PPAD_EN			0
+#define	RX_PPAD_SZ			3
+/* TODO XXX: default enable prepad */
+#ifdef	IEEE_1588_PTP_ENABLED
+#define	PREPAD_LEN			64
+#else
+#define	PREPAD_LEN			0
+#endif
+#define	ETH_JUMBO_DATA_LEN		16000
+#define	CACHELINE_SIZE			(1ULL << 6)
+#define	SKB_BACK_PTR_SIZE		CACHELINE_SIZE
+#define	LRO_MAX_DESCS			8
+#define MSG_DST_FC_FAIL			0x01
+#define	MSG_INFLIGHT_MSG_EX		0x02
+#define	MSG_TXQ_FULL			0x04
+#define	NLM_TCP_MODE			1
+#define	NLM_RT_MODE			2
+#define	R_TX_CONTROL			0x0a0
+#define	TX_PACKET_COUNTER		0x39
+#define	RX_PACKET_COUNTER		0x28
+#define	TX_BYTE_COUNTER			0x38
+#define	RX_BYTE_COUNTER			0x27
+#define	TX_FCS_ERROR_COUNTER		0x47
+#define	TX_JABBER_FRAME_COUNTER		0x46
+#define	RX_DROP_PACKET_COUNTER		0x37
+#define	TX_DROP_FRAME_COUNTER		0x45
+#define	RX_MULTICAST_PACKET_COUNTER	0x2a
+#define	TX_TOTAL_COLLISION_COUNTER	0x43
+#define	RX_FRAME_LENGTH_ERROR_COUNTER	0x30
+#define	RX_FCS_ERROR_COUNTER		0x29
+#define	RX_JABBER_COUNTER		0x36
+#define	RX_ALIGNMENT_ERROR_COUNTER	0x2f
+#define	RX_CARRIER_SENSE_ERROR_COUNTER	0x32
+#define	TX_EXCESSIVE_COLLISION_PACKET_COUNTER	0x42
+
+#define	NLM_RX_ETH_BUF_SIZE		(ETH_DATA_LEN + ETH_HLEN + 	\
+	ETH_FCS_LEN + BYTE_OFFSET + PREPAD_LEN + SKB_BACK_PTR_SIZE +	\
+	CACHELINE_SIZE)
+#define	NLM_RX_JUMBO_BUF_SIZE		(ETH_JUMBO_DATA_LEN +		\
+	ETH_HLEN + ETH_FCS_LEN + BYTE_OFFSET + PREPAD_LEN +		\
+	SKB_BACK_PTR_SIZE + CACHELINE_SIZE)
+
+#define	CACHELINE_ALIGNED_ADDR(addr)	\
+	(((ulong)(addr)) & ~(CACHELINE_SIZE - 1))
+#define	P2P_EXTRA_DESCS			\
+	((PAGE_SIZE / MAX_PACKET_SZ_PER_MSG) + 4)
+
+#ifndef __ASSEMBLY__
+/*
+ * This macro resets first 164 (offsetof(struct sk_buff, tail))bytes
+ *  of skb header
+ */
+#define fast_reset_skbptrs(skb) \
+		*(uint64_t *)(ulong)((uint64_t *)skb + 0) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 1) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 2) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 3) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 4) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 5) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 6) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 7) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 8) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 9) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 10) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 11) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 12) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 13) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 14) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 15) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 16) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 17) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 18) = 0;		\
+		*(uint64_t *)(ulong)((uint64_t *)skb + 19) = 0;		\
+		*(uint32_t *)(ulong)((uint64_t *)skb + 20) = 0;
+/*
+ * This helper macro resets SKB data pointers for reuse
+ * as free-in buffer
+*/
+#define skb_reset_ptrs(skb)						\
+do {									\
+	struct skb_shared_info *shinfo;					\
+									\
+	shinfo = skb_shinfo(skb);					\
+									\
+	/* Now reinitialize old skb, cut & paste from dev_alloc_skb */	\
+	/*memset(skb, 0, offsetof(struct sk_buff, tail));*/		\
+	fast_reset_skbptrs(skb);					\
+	skb->data = skb->head;						\
+	skb_reset_tail_pointer(skb);					\
+									\
+	atomic_set(&shinfo->dataref, 1);				\
+	shinfo->nr_frags  = 0;						\
+	shinfo->gso_size = 0;						\
+	shinfo->gso_segs = 0;						\
+	shinfo->gso_type = 0;						\
+	shinfo->ip6_frag_id = 0;					\
+	shinfo->frag_list = NULL;					\
+} while (0)
+
+#define Message(fmt, args...) { }
+
+enum msc_opcodes {
+	IP_CHKSUM = 1,
+	TCP_CHKSUM,
+	UDP_CHKSUM,
+	SCTP_CRC,
+	FCOE_CRC,
+	IP_TCP_CHKSUM,
+	TSO_IP_TCP_CHKSUM,
+	IP_UDP_CHKSUM,
+	IP_CHKSUM_SCTP_CRC
+};
+
+typedef enum {
+	xlp_mac_speed_10,
+	xlp_mac_speed_100,
+	xlp_mac_speed_1000,
+	xlp_mac_speed_rsvd
+} xlp_mac_speed_t;
+
+typedef enum {
+	xlp_mac_duplex_auto,
+	xlp_mac_duplex_half,
+	xlp_mac_duplex_full
+} xlp_mac_duplex_t;
+
+typedef enum {
+	xlp_mac_fc_auto,
+	xlp_mac_fc_disabled,
+	xlp_mac_fc_frame,
+	xlp_mac_fc_collision,
+	xlp_mac_fc_carrier
+} xlp_mac_fc_t;
+
+struct cpu_stat {
+	ulong tx_packets;
+	ulong txc_packets;
+	ulong rx_packets;
+	ulong interrupts;
+};
+
+struct phy_info {
+        int addr;
+        int mode;
+        uint32_t *mii_addr;
+        uint32_t *pcs_addr;
+        uint32_t *serdes_addr;
+};
+
+struct dev_data
+{
+	struct net_device *dev;
+	struct net_device_stats stats;
+	struct cpu_stat cpu_stats[NR_CPUS];
+	struct timer_list link_timer;
+	struct napi_struct napi;
+	spinlock_t lock;
+	unsigned short port;
+	unsigned short inited;
+	unsigned short node;
+	unsigned short block;
+	unsigned short index;
+	unsigned short type;
+	struct sk_buff* skb;
+	int phy_oldlinkstat;
+	__u8 hwaddr[6];
+
+	xlp_mac_speed_t speed;		/* current speed */
+	xlp_mac_duplex_t duplex;	/* current duplex */
+	xlp_mac_fc_t flow_ctrl;		/* current flow control setting */
+	int advertising;
+	struct phy_info phy;
+	int nae_rx_qid;
+	int nae_tx_qid;
+	int hw_port_id;
+	struct net_lro_mgr lro_mgr[NR_CPUS];
+	struct net_lro_desc lro_arr[NR_CPUS][LRO_MAX_DESCS];
+
+	/*1588 ptp timer*/
+	struct cyclecounter cycles;
+	struct timecounter clock;
+	struct timecompare compare;
+};
+
+
+/*
+ * This strucutre has been referenced in templates/hybrid_nae and
+ * ucore/hybrid_nae. So when you modify, modify the above places also.
+ */
+struct nlm_nae_linux_shinfo {
+	int valid;
+	int rxvc;
+	int domid;
+	int mode;
+	int jumbo_enabled;
+	int node;
+	/* logical cpu to physical cpu map */
+	unsigned int lcpu_2_pcpu_map[NLM_NAE_SH_LCPU_TO_MAP_SZ];
+	unsigned int cpu_2_freeinfifo_map[NLM_NAE_SH_LCPU_TO_MAP_SZ];
+	unsigned int cpu_2_jumbo_freeinfifo_map[NLM_NAE_SH_LCPU_TO_MAP_SZ];
+};
+
+struct p2p_desc_mem {
+	void *mem;
+	uint64_t dsize;
+	uint64_t pad[6];
+};
+
+extern void *fdt;
+
+static __inline__ uint64_t nae_tx_desc(uint32_t type, uint32_t rdex,
+                                       uint32_t fbid, uint32_t len,
+                                       uint64_t addr)
+{
+	return ((uint64_t)(type & 0x3) << 62)		|
+		((uint64_t)(rdex & 0x1) << 61)		|
+		((uint64_t)(fbid & 0x7f) << 54)		|
+		((uint64_t)(len & 0x3fff) << 40)	|
+		(addr & 0xffffffffffULL);
+}
+
+static __inline__ void cpu_halt(void)
+{
+	__asm__ volatile (
+			".set push		\n"
+			".set noreorder		\n"
+			"   wait		\n"
+			"1: b    1b		\n"
+			"   nop			\n"
+			".set pop		\n"
+			);
+}
+
+static __inline__ struct sk_buff *mac_get_skb_back_ptr(uint64_t addr)
+{
+	uint64_t *back_ptr = (uint64_t *)(ulong)(addr - SKB_BACK_PTR_SIZE);
+	return (struct sk_buff *)(ulong)(*back_ptr);
+}
+
+/**********************************************************************
+ * cacheline_aligned_kmalloc -  64 bits cache aligned kmalloc
+ * return -  buffer address
+ *
+ **********************************************************************/
+static __inline__ void *cacheline_aligned_kmalloc(int size, int gfp_mask)
+{
+	void *buf = kmalloc(size + CACHELINE_SIZE, gfp_mask);
+
+	if (buf == NULL)
+		return NULL;
+
+	buf =(void *)(ulong)(CACHELINE_ALIGNED_ADDR((ulong)buf +
+				CACHELINE_SIZE));
+	return buf;
+}
+
+/**********************************************************************
+ * nlm_xlp_alloc_skb_atomic -  Atomically allocates cache aligned skb buffer
+ * return - skb buffer address
+ *
+ **********************************************************************/
+static __inline__ struct sk_buff *nlm_xlp_alloc_skb_atomic(int length, int node)
+{
+	int offset = 0;
+	gfp_t gfp_mask = GFP_ATOMIC;
+	struct sk_buff *skb = __alloc_skb(length + NET_SKB_PAD, gfp_mask, 0,
+						node);
+
+	if (!skb) 
+		return NULL;
+
+	skb_reserve(skb, NET_SKB_PAD);
+
+	/* align the data to the next cache line */
+	offset = ((ulong)skb->data + CACHELINE_SIZE) & ~(CACHELINE_SIZE - 1);
+	skb_reserve(skb, (offset - (ulong)skb->data));
+#ifdef CONFIG_NLM_NET_OPTS
+	skb->netl_skb = skb;
+#endif
+	return skb;
+}
+
+static __inline__ void mac_put_skb_back_ptr(struct sk_buff *skb)
+{
+	uint64_t *back_ptr = (uint64_t *)skb->data;
+
+	skb_reserve(skb, SKB_BACK_PTR_SIZE);
+	*back_ptr = (uint64_t)(ulong)skb;
+}
+
+static __inline__ void print_fmn_send_error(const char *str,
+					    uint32_t send_result)
+{
+	if(send_result & MSG_DST_FC_FAIL)
+	{
+		printk("[%s] Msg Destination flow control credit fail "
+			"(send_result=%08x)\n",
+			str, send_result);
+	}
+	else if (send_result & MSG_INFLIGHT_MSG_EX)
+		printk("[%s] MSG_INFLIGHT_MSG_EX(send_result=%08x)\n",
+			__func__, send_result);
+	else if (send_result & MSG_TXQ_FULL)
+		printk("[%s] TX message Q full(send_result=%08x)\n",
+			__func__, send_result);
+	else
+		printk("[%s] Unknown send error type(send_result=%08x)\n",
+			__func__, send_result);
+}
+
+void nlm_xlp_nae_init(void);
+void nlm_xlp_nae_remove(void);
+inline void process_tx_complete(int , uint32_t , uint64_t);
+inline void napi_lro_flush(int);
+struct eeprom_data * get_nlm_eeprom(void);
+unsigned int nlm_xlp_mac_mii_read(struct dev_data *, int);
+void nlm_xlp_mac_mii_write(struct dev_data *, int , uint16_t);
+int xlp_enable_autoneg(struct net_device *, u32);
+int xlp_set_link_speed(struct net_device *, int , int);
+void nlm_nae_remove_procentries(void);
+void lro_init(struct net_device *);
+void xlp_get_mac_stats(struct net_device *, struct net_device_stats *);
+int eth_mac_addr(struct net_device *, void *);
+int nlm_xlp_nae_start_xmit(struct sk_buff *, struct net_device *);
+void xlp_set_ethtool_ops(struct net_device *);
+cycle_t nlm_1588_read_clock0(const struct cyclecounter *);
+cycle_t nlm_1588_read_clock1(const struct cyclecounter *);
+cycle_t nlm_1588_read_clock2(const struct cyclecounter *);
+cycle_t nlm_1588_read_clock3(const struct cyclecounter *);
+void gen_mac_address(void);
+int xlp_mac_proc_read(char *, char **, off_t , int , int *, void *);
+int nae_proc_read(char *, char **, off_t , int , int *, void *);
+int nlm_xlp_disable_napi(void);
+void nlm_spawn_kthread(void);
+int nlm_xlp_enable_napi(void);
+int mac_refill_frin_skb(int , int , uint64_t , uint32_t);
+int mac_refill_frin_one_buffer(struct net_device *, int , uint32_t);
+void xlp_napi_lro_flush(void *);
+void nlm_xlp_mac_set_enable(struct dev_data *priv, int flag);
+inline void *alloc_p2p_desc_mem(int);
+uint16_t pseuodo_chksum(uint16_t *, uint16_t);
+inline int create_p2p_desc(uint64_t , uint64_t , uint64_t *, int);
+inline void create_last_p2p_desc(uint64_t *, struct sk_buff *, int);
+void xlp_poll_upper(int);
+inline void free_p2p_desc_mem(int cpu, void *);
+inline int tso_xmit_skb(struct sk_buff *, struct net_device *);
+int xlp_config_msec_tx(struct net_device *, struct ethtool_cmd *);
+int xlp_config_msec_tx_mem(struct net_device *, struct ethtool_cmd *);
+int xlp_config_msec_rx(struct net_device *, struct ethtool_cmd *);
+int xlp_config_msec_rx_mem(struct net_device *, struct ethtool_cmd *);
+
+extern int enable_lro; 	
+extern unsigned char eth_hw_addr[NLM_MAX_NODES][MAX_GMAC_PORT][6];
+extern struct proc_dir_entry *nlm_root_proc;
+extern uint64_t receive_count[NR_CPUS * 8] __cacheline_aligned;
+extern uint64_t fast_replenish_count[NR_CPUS * 8] __cacheline_aligned;
+extern uint64_t slow_replenish_count[NR_CPUS * 8] __cacheline_aligned;
+extern uint64_t err_replenish_count[NR_CPUS * 8] __cacheline_aligned;
+extern uint64_t p2p_dynamic_alloc_cnt[NR_CPUS * 8] __cacheline_aligned;
+extern struct net_device *xlp_dev_mac[NLM_MAX_NODES][MAX_GMAC_PORT];
+extern uint64_t dummy_pktdata_addr[NLM_MAX_NODES];
+extern struct net_device *
+	per_cpu_netdev[NLM_MAX_NODES][NR_CPUS][24] __cacheline_aligned;
+extern int lro_flush_priv_cnt[NR_CPUS];
+extern int lro_flush_needed[NR_CPUS][20];
+extern struct dev_data *lro_flush_priv[NR_CPUS][20];
+extern uint32_t nae_rx_vc;
+extern uint32_t nae_fb_vc;
+extern int exclusive_vc;
+extern int enable_napi;
+extern int perf_mode;
+
+#endif /* __ASSEMBLY__ */
+#endif
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_board.c b/drivers/net/ethernet/broadcom/nae/xlpge_board.c
new file mode 100644
index 0000000..6f1aaea
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_board.c
@@ -0,0 +1,58 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+
+#include <asm/netlogic/hal/nlm_hal_nae.h>
+
+#include "xlpge.h"
+
+unsigned char eth_hw_addr[NLM_MAX_NODES][MAX_GMAC_PORT][6];
+
+void gen_mac_address(void)
+{
+	int i, j;
+	unsigned char mac_base[6];
+
+	memset(mac_base, '0', 6);
+	random_ether_addr(mac_base);
+
+	for (i = 0; i < NLM_MAX_NODES; i++) {
+		for (j = 0; j < 18; j++) {
+			memcpy(eth_hw_addr[i][j], mac_base, 6);
+			mac_base[5] += 1;
+		}
+	}
+}
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_ethtool.c b/drivers/net/ethernet/broadcom/nae/xlpge_ethtool.c
new file mode 100644
index 0000000..88289e9
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_ethtool.c
@@ -0,0 +1,455 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+#include <linux/ethtool.h>
+#include <linux/mii.h>
+
+#include <asm/netlogic/hal/nlm_hal_nae.h>
+
+#include "xlpge.h"
+
+#define	NLM_STATS_KEY_LEN	\
+	(sizeof(struct net_device_stats) / sizeof(ulong))
+
+static struct {
+	const char string[ETH_GSTRING_LEN];
+} xlp_ethtool_stats_keys[NLM_STATS_KEY_LEN] = {
+	{ "rx_packets" },
+	{ "tx_packets" },
+	{ "rx_bytes" },
+	{ "tx_bytes" },
+	{ "rx_errors" },
+	{ "tx_errors" },
+	{ "rx_dropped" },
+	{ "tx_dropped" },
+	{ "multicast" },
+	{ "collisions" },
+	{ "rx_length_errors" },
+	{ "rx_over_errors" },
+	{ "rx_crc_errors" },
+	{ "rx_frame_errors" },
+	{ "rx_fifo_errors" },
+	{ "rx_missed_errors" },
+	{ "tx_aborted_errors" },
+	{ "tx_carrier_errors" },
+	{ "tx_fifo_errors" },
+	{ "tx_heartbeat_errors" },
+	{ "tx_window_errors" },
+	{ "rx_compressed" },
+	{ "tx_compressed" }
+};
+
+static int xlp_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	int mii_status;
+
+	if (priv->type != SGMII_IF) {
+		cmd->supported = SUPPORTED_FIBRE | SUPPORTED_10000baseT_Full;
+		cmd->advertising = SUPPORTED_FIBRE | SUPPORTED_10000baseT_Full;
+		cmd->speed = SPEED_10000;
+		cmd->port = PORT_FIBRE;
+		cmd->duplex = DUPLEX_FULL;
+		cmd->phy_address = priv->port;
+		cmd->autoneg = AUTONEG_DISABLE;
+		cmd->maxtxpkt = 0;
+		cmd->maxrxpkt = 0;
+
+		return 0;
+	}
+
+	cmd->supported = SUPPORTED_10baseT_Full			|
+				SUPPORTED_10baseT_Half		|
+				SUPPORTED_100baseT_Full		|
+				SUPPORTED_100baseT_Half		|
+				SUPPORTED_1000baseT_Full	|
+				SUPPORTED_MII			|
+				SUPPORTED_Autoneg		|
+				SUPPORTED_TP;
+
+	cmd->advertising = priv->advertising;
+
+	mii_status = nlm_xlp_mac_mii_read(priv, MII_NCONFIG);
+	priv->speed = (mii_status >> 3) & 0x03;
+
+	cmd->speed = (priv->speed == xlp_mac_speed_1000) ? SPEED_1000 :
+			(priv->speed == xlp_mac_speed_100) ?
+				SPEED_100 : SPEED_10;
+
+	cmd->duplex = (mii_status >> 5) & 0x1;
+	cmd->port = PORT_TP;
+	cmd->phy_address = priv->port;
+	cmd->transceiver = XCVR_INTERNAL;
+	cmd->autoneg = (~(mii_status >> 14)) & 0x1;
+	cmd->maxtxpkt = 0;
+	cmd->maxrxpkt = 0;
+
+	return 0;
+}
+
+static int xlp_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	int ret;
+
+	if (priv->type != SGMII_IF)
+		return -EIO;
+
+	if (cmd->autoneg == AUTONEG_ENABLE)
+		ret = xlp_enable_autoneg(dev, cmd->advertising);
+	else
+		ret = xlp_set_link_speed(dev, cmd->speed, cmd->duplex);
+
+	return ret;
+}
+
+static void xlp_get_drvinfo(struct net_device *dev,
+			    struct ethtool_drvinfo *info)
+{
+	strcpy(info->driver, XLP_SOC_MAC_DRIVER);
+	strcpy(info->version, DRV_VERSION);
+}
+
+static int xlp_get_regs_len(struct net_device *dev)
+{
+	return NLM_ETHTOOL_REG_LEN;
+}
+
+static int xlp_get_eeprom_len(struct net_device *dev)
+{
+	return NLM_EEPROM_LEN;
+}
+
+static int xlp_get_eeprom(struct net_device *dev,
+			  struct ethtool_eeprom *eeprom, u8* temp)
+{
+#if 0
+	struct eeprom_data *nlm_eeprom;
+	struct dev_data *priv = netdev_priv(dev);
+	ulong flags;
+	u8 buff[50];
+	int i;
+
+	nlm_eeprom = get_nlm_eeprom();
+
+	spin_lock_irqsave(&priv->lock, flags);
+
+	eeprom_dump(nlm_eeprom, buff, eeprom->offset,eeprom->len);
+
+	for(i = 0; i < eeprom->len; i++)
+		temp[i] = buff[i];
+
+	spin_unlock_irqrestore(&priv->lock, flags);
+#endif
+
+	return 0;
+}
+
+static int xlp_set_eeprom(struct net_device *dev,
+			  struct ethtool_eeprom *eeprom, u8* temp)
+{
+#if 0
+	struct eeprom_data *nlm_eeprom;
+	struct dev_data *priv = netdev_priv(dev);
+	ulong flags;
+	u8 data[6];
+
+	nlm_eeprom = get_nlm_eeprom();
+
+	eeprom_get_mac_addr(nlm_eeprom, data, 0);
+
+	spin_lock_irqsave(&priv->lock, flags);
+
+	if (eeprom->magic == 0xAA) {
+		data[eeprom->offset] = *temp;
+		eeprom_set_mac_addr(nlm_eeprom, data, 0);
+	}
+
+	spin_unlock_irqrestore(&priv->lock, flags);
+#endif
+
+	return 0;
+}
+
+static void xlp_get_regs(struct net_device *dev,
+			 struct ethtool_regs *regs, void *p)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	ulong flags;
+	u32 *data = (u32 *)p;
+	int i;
+
+	memset((void *)data, 0, NLM_ETHTOOL_REG_LEN);
+
+	spin_lock_irqsave(&priv->lock, flags);
+
+	for(i=0; i <= NLM_NUM_REG_DUMP; i++)
+		*(data + i) = nlm_hal_read_mac_reg(priv->node, priv->block,
+					priv->index, R_TX_CONTROL + i);
+
+	spin_unlock_irqrestore(&priv->lock, flags);
+}
+
+static u32 xlp_get_msglevel(struct net_device *dev)
+{
+	return 0;
+}
+
+static void xlp_set_msglevel(struct net_device *dev, u32 value)
+{
+	//mac_debug = value;
+}
+
+static int xlp_nway_reset(struct net_device *dev)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	ulong flags;
+	int mii_status;
+	int ret = -EINVAL;
+
+	if (priv->type != SGMII_IF)
+		return -EIO;
+
+	spin_lock_irqsave(&priv->lock, flags);
+
+	mii_status = nlm_xlp_mac_mii_read(priv, MII_BMCR);
+	if (mii_status & BMCR_ANENABLE) {
+		nlm_xlp_mac_mii_write(priv, MII_BMCR,
+				BMCR_ANRESTART | mii_status);
+		ret = 0;
+	}
+
+	spin_unlock_irqrestore(&priv->lock, flags);
+
+	return ret;
+}
+
+static u32 xlp_get_link(struct net_device *dev)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	int mii_status;
+	ulong flags;
+	if (priv->type != SGMII_IF)
+		return -EIO;
+
+	spin_lock_irqsave(&priv->lock, flags);
+	mii_status = nlm_xlp_mac_mii_read(priv, MII_BMSR);
+
+	spin_unlock_irqrestore(&priv->lock, flags);
+
+	if(mii_status & BMSR_LSTATUS)
+		return 1;
+	return 0;
+}
+
+static void xlp_get_strings (struct net_device *dev, u32 stringset, u8 *buf)
+{
+	switch (stringset) {
+	case ETH_SS_STATS:
+		memcpy(buf, &xlp_ethtool_stats_keys,
+			sizeof(xlp_ethtool_stats_keys));
+		break;
+	default:
+		printk(KERN_WARNING "%s: Invalid stringset %d\n",
+			__func__, stringset);
+		break;
+	}
+}
+
+#define STATS_RD(x)		\
+	nlm_hal_read_mac_reg(priv->node, priv->block, priv->index, x)
+
+/**********************************************************************
+ * xlp_get_mac_stats -  collect stats info from Mac stats register
+ * @dev   -  this is per device based function
+ * @stats -  net device stats structure
+ **********************************************************************/
+void xlp_get_mac_stats(struct net_device *dev, struct net_device_stats *stats)
+{
+	struct dev_data *priv = netdev_priv(dev);
+#ifdef CONFIG_64BIT
+	uint64_t val;
+#endif
+
+	if (priv->type == INTERLAKEN_IF) {
+		nlm_hal_get_ilk_mac_stats(priv->node, priv->block,
+			priv->phy.addr, stats);
+		return;
+	}
+
+	stats->tx_packets = STATS_RD(TX_PACKET_COUNTER);
+#ifdef CONFIG_64BIT
+	val = STATS_RD(0x1f);
+	stats->tx_packets |= ( val << 32);
+#endif
+
+	stats->rx_packets = STATS_RD(RX_PACKET_COUNTER);
+#ifdef CONFIG_64BIT
+	val = STATS_RD(0x1f);
+	stats->rx_packets |= ( val << 32);
+#endif
+
+	stats->tx_bytes = STATS_RD(TX_BYTE_COUNTER);
+#ifdef CONFIG_64BIT
+	val = STATS_RD(0x1f);
+	stats->tx_bytes |= ( val << 32);
+#endif
+
+	stats->rx_bytes = STATS_RD(RX_BYTE_COUNTER);
+#ifdef CONFIG_64BIT
+	val = STATS_RD(0x1f);
+	stats->rx_bytes |= ( val << 32);
+#endif
+
+	stats->tx_errors = STATS_RD(TX_FCS_ERROR_COUNTER) +
+				STATS_RD(TX_JABBER_FRAME_COUNTER);
+	stats->rx_dropped = STATS_RD(RX_DROP_PACKET_COUNTER);
+	stats->tx_dropped = STATS_RD(TX_DROP_FRAME_COUNTER);
+
+	stats->multicast = STATS_RD(RX_MULTICAST_PACKET_COUNTER);
+#ifdef CONFIG_64BIT
+	val = STATS_RD(0x1f);
+	stats->multicast |= ( val << 32);
+#endif
+
+	stats->collisions = STATS_RD(TX_TOTAL_COLLISION_COUNTER);
+	stats->rx_length_errors = STATS_RD(RX_FRAME_LENGTH_ERROR_COUNTER);
+	stats->rx_over_errors = STATS_RD(RX_DROP_PACKET_COUNTER);
+	stats->rx_crc_errors = STATS_RD(RX_FCS_ERROR_COUNTER) +
+				STATS_RD(RX_JABBER_COUNTER);
+	stats->rx_frame_errors = STATS_RD(RX_ALIGNMENT_ERROR_COUNTER);
+	stats->rx_fifo_errors = STATS_RD(RX_DROP_PACKET_COUNTER);
+	stats->rx_missed_errors = STATS_RD(RX_CARRIER_SENSE_ERROR_COUNTER);
+	stats->rx_errors = (stats->rx_over_errors + stats->rx_crc_errors +
+				stats->rx_frame_errors + stats->rx_fifo_errors +
+				stats->rx_missed_errors);
+	stats->tx_aborted_errors = STATS_RD(TX_EXCESSIVE_COLLISION_PACKET_COUNTER);
+	/*
+	stats->tx_carrier_errors = STATS_RD(TX_DROP_FRAME_COUNTER);
+	stats->tx_fifo_errors = STATS_RD(TX_DROP_FRAME_COUNTER);
+	*/
+	return;
+}
+
+#undef STATS_RD
+
+/**********************************************************************
+ * xlp_get_ethtool_stats -  part of ethtool_ops member function
+ * @dev   -  this is per device based function
+ * @stats -  net device stats structure
+ **********************************************************************/
+static void xlp_get_ethtool_stats (struct net_device *dev,
+				   struct ethtool_stats *estats, u64 *stats)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	ulong flags;
+	ulong *tmp_stats;
+	int i;
+
+	spin_lock_irqsave(&priv->lock, flags);
+
+	xlp_get_mac_stats(dev, &priv->stats);
+
+	spin_unlock_irqrestore(&priv->lock, flags);
+
+	tmp_stats = (ulong *)&priv->stats;
+	for(i = 0; i < NLM_STATS_KEY_LEN; i++) {
+		*stats = (u64)*tmp_stats;
+		stats++;
+		tmp_stats++;
+	}
+}
+
+/**********************************************************************
+ *  nlm_xlp_mac_mii_read - Read mac mii phy register
+ *
+ *  Input parameters:
+ *  	   priv - priv structure
+ *  	   phyaddr - PHY's address
+ *  	   regidx = index of register to read
+ *
+ *  Return value:
+ *  	   value read (16 bits), or 0xffffffff if an error occurred.
+ ********************************************************************* */
+unsigned int nlm_xlp_mac_mii_read(struct dev_data *priv, int regidx)
+{
+	return nlm_hal_mdio_read(priv->node, NLM_HAL_EXT_MDIO, 0,
+		BLOCK_7, LANE_CFG, priv->phy.addr, regidx);
+}
+
+/**********************************************************************
+ *  nlm_xlp_mac_mii_write -Write mac mii PHY register.
+ *
+ *  Input parameters:
+ *  	   priv - priv structure
+ *  	   regidx - register within the PHY
+ *  	   regval - data to write to register
+ *
+ *  Return value:
+ *  	   nothing
+ ********************************************************************* */
+void nlm_xlp_mac_mii_write(struct dev_data *priv, int regidx,
+				  uint16_t regval)
+{
+	nlm_hal_mdio_write(priv->node, NLM_HAL_EXT_MDIO, 0, BLOCK_7,
+		LANE_CFG, priv->phy.addr, regidx, regval);
+}
+
+static struct ethtool_ops xlp_ethtool_ops = {
+	.get_settings		= xlp_get_settings,
+	.set_settings		= xlp_set_settings,
+	.get_drvinfo		= xlp_get_drvinfo,
+	.get_regs_len		= xlp_get_regs_len,
+	.get_regs		= xlp_get_regs,
+	.get_msglevel		= xlp_get_msglevel,
+	.set_msglevel		= xlp_set_msglevel,
+	.nway_reset		= xlp_nway_reset,
+	.get_link		= xlp_get_link,
+	.get_strings		= xlp_get_strings,
+	.get_ethtool_stats	= xlp_get_ethtool_stats,
+	.get_eeprom_len		= xlp_get_eeprom_len,
+	.get_eeprom		= xlp_get_eeprom,
+	.set_eeprom		= xlp_set_eeprom,
+	.msec_tx_config		= xlp_config_msec_tx,
+	.msec_tx_mem_config	= xlp_config_msec_tx_mem,
+	.msec_rx_config		= xlp_config_msec_rx,
+	.msec_rx_mem_config	= xlp_config_msec_rx_mem,
+};
+
+void xlp_set_ethtool_ops(struct net_device *netdev)
+{
+	SET_ETHTOOL_OPS(netdev, &xlp_ethtool_ops);
+}
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_lro.c b/drivers/net/ethernet/broadcom/nae/xlpge_lro.c
new file mode 100644
index 0000000..5f67a58
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_lro.c
@@ -0,0 +1,114 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+
+#include "xlpge.h"
+
+#ifdef CONFIG_INET_LRO
+
+int enable_lro = 0;
+module_param(enable_lro, int, 0);
+int lro_flush_priv_cnt[NR_CPUS];
+int lro_flush_needed[NR_CPUS][20];
+struct dev_data *lro_flush_priv[NR_CPUS][20];
+
+static int lro_get_skb_hdr(struct sk_buff *skb, void **iphdr, void **tcph,
+			   uint64_t *hdr_flags, void *priv)
+{
+	skb_reset_network_header(skb);
+	skb_set_transport_header(skb, ip_hdrlen(skb));
+
+	if (ip_hdr(skb)->protocol != 0x6)
+		return -1;
+
+	*iphdr = ip_hdr(skb);
+	*tcph = tcp_hdr(skb);
+
+	*hdr_flags = LRO_IPV4 | LRO_TCP;
+
+	return 0;
+}
+
+void lro_init(struct net_device *dev)
+{
+	struct dev_data* priv;
+	struct net_lro_mgr *lp;
+	int cpu;
+
+	priv = netdev_priv(dev);
+
+	if (enable_lro) {
+		printk("LRO is enabled \n");
+		dev->features |= NETIF_F_LRO;
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {
+			lp = &priv->lro_mgr[cpu];
+			memset(lp, 0, sizeof(struct net_lro_mgr));
+			lp->max_aggr = 48;
+			lp->max_desc = LRO_MAX_DESCS;
+			lp->get_skb_header = lro_get_skb_hdr;
+			lp->features = LRO_F_NAPI;
+			lp->dev = dev;
+			lp->ip_summed = CHECKSUM_UNNECESSARY;
+			lp->ip_summed_aggr = CHECKSUM_UNNECESSARY;
+			lp->lro_arr = cacheline_aligned_kmalloc(
+					sizeof(struct net_lro_desc) *
+						LRO_MAX_DESCS, GFP_KERNEL);
+			memset(lp->lro_arr, 0,
+				sizeof(struct net_lro_desc) * LRO_MAX_DESCS);
+		}
+	}
+}
+
+inline void napi_lro_flush(int cpu)
+{
+	struct dev_data *priv = NULL;
+	int i;
+
+	for (i = 0; i < lro_flush_priv_cnt[cpu]; i++) {
+		priv = lro_flush_priv[cpu][i];
+		lro_flush_all(&priv->lro_mgr[cpu]);
+		lro_flush_needed[cpu][priv->port] = 0;
+		Message("Lro flush cpu %d port %d\n", cpu, priv->port);
+	}
+
+	lro_flush_priv_cnt[cpu] = 0;
+}
+
+void xlp_napi_lro_flush(void *arg)
+{
+	int cpu = hard_smp_processor_id();
+	napi_lro_flush(cpu);
+}
+#endif
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_main.c b/drivers/net/ethernet/broadcom/nae/xlpge_main.c
new file mode 100644
index 0000000..3679bcf
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_main.c
@@ -0,0 +1,87 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+
+#include "xlpge.h"
+
+
+static const struct pci_device_id xlpnae_pci_table[] __devinitdata = {
+	{
+		.vendor		= PCI_VENDOR_NETLOGIC,
+		.device		= PCI_DEVICE_ID_NLM_NAE,
+		.subvendor	= PCI_ANY_ID,
+		.subdevice	= PCI_ANY_ID,
+	},
+};
+
+static int __devinit brcmxlp_nae_pci_probe(struct pci_dev *pdev,
+					   const struct pci_device_id *ent)
+{
+	return pci_enable_device(pdev);
+}
+
+static void __devexit brcmxlp_nae_pci_remove(struct pci_dev *pdev)
+{
+	pci_disable_device(pdev);
+}
+
+static struct pci_driver brcmxlp_nae_driver = {
+	.name		= XLP_SOC_MAC_DRIVER,
+	.id_table	= xlpnae_pci_table,
+	.probe		= brcmxlp_nae_pci_probe,
+	.remove		= brcmxlp_nae_pci_remove,
+};
+
+static int __init brcmxlp_nae_init(void)
+{
+	/* TODO:XXX Move to pci init? */
+	nlm_xlp_nae_init();
+
+	return pci_register_driver(&brcmxlp_nae_driver);
+}
+
+static void __init brcmxlp_nae_exit(void)
+{
+	nlm_xlp_nae_remove();
+	pci_unregister_driver(&brcmxlp_nae_driver);
+}
+
+module_init(brcmxlp_nae_init);
+module_exit(brcmxlp_nae_exit);
+
+MODULE_AUTHOR("Broadcom");
+MODULE_DESCRIPTION("Broadcom XLP SoC Network Driver");
+MODULE_LICENSE("GPL v2");
+MODULE_VERSION(DRV_VERSION);
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_msec.c b/drivers/net/ethernet/broadcom/nae/xlpge_msec.c
new file mode 100644
index 0000000..5eca3dc
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_msec.c
@@ -0,0 +1,77 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+
+#include "xlpge.h"
+
+int xlp_config_msec_tx(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	if(is_nlm_xlp2xx())
+		nlm_hal_msec_tx_config(cmd->node, cmd->port_enable,
+			cmd->preamble_len, cmd->packet_num,
+			cmd->win_size_thrshld);
+
+	return 0;
+}
+
+int xlp_config_msec_tx_mem(struct net_device *dev,
+				  struct ethtool_cmd *cmd)
+{
+	if(is_nlm_xlp2xx())
+		nlm_hal_msec_tx_mem_config(cmd->node, cmd->port, cmd->tci,
+			cmd->sci, cmd->key);
+
+	return 0;
+}
+
+int xlp_config_msec_rx(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	if(is_nlm_xlp2xx())
+		nlm_hal_msec_rx_config(cmd->node, cmd->port_enable,
+			cmd->preamble_len, cmd->packet_num,
+			cmd->win_size_thrshld);
+
+	return 0;
+}
+
+int xlp_config_msec_rx_mem(struct net_device *dev,
+				  struct ethtool_cmd *cmd)
+{
+	if(is_nlm_xlp2xx())
+		nlm_hal_msec_rx_mem_config(cmd->node, cmd->port, cmd->index,
+			cmd->sci, cmd->key, cmd->sci_mask);
+
+	return 0;
+}
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
new file mode 100644
index 0000000..62ad497
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -0,0 +1,1253 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+#include <linux/proc_fs.h>
+
+#include <asm/netlogic/xlp.h>
+#include <asm/netlogic/msgring.h>
+#include <asm/netlogic/hal/nlm_hal_fmn.h>
+
+#include "xlpge.h"
+
+uint32_t cpu_2_normal_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
+uint32_t cpu_2_jumbo_frfifo[NLM_MAX_NODES][NLM_NCPUS_PER_NODE];
+uint64_t nlm_mode[NR_CPUS*8] ____cacheline_aligned;
+struct nlm_nae_linux_shinfo lnx_shinfo[NLM_NAE_MAX_SHARED_DOMS + 1];
+uint64_t p2p_dynamic_alloc_cnt[NR_CPUS * 8] __cacheline_aligned;
+struct net_device *xlp_dev_mac[NLM_MAX_NODES][MAX_GMAC_PORT];
+uint64_t dummy_pktdata_addr[NLM_MAX_NODES];
+struct net_device *
+	per_cpu_netdev[NLM_MAX_NODES][NR_CPUS][24] __cacheline_aligned;
+int exclusive_vc = 0;
+module_param(exclusive_vc, int, 0);
+int enable_napi = 1;
+int perf_mode= NLM_TCP_MODE;
+module_param(perf_mode, int, 0);
+int num_descs_per_normalq = 64; 	
+module_param(num_descs_per_normalq, int, 0);
+int num_descs_per_jumboq = 32;
+module_param(num_descs_per_jumboq, int, 0);
+
+static uint32_t lnx_normal_mask;
+static uint32_t lnx_jumbo_mask;
+static int enable_jumbo = 0;
+module_param(enable_jumbo, int, 0);
+static struct p2p_desc_mem p2p_desc_mem[NR_CPUS] __cacheline_aligned;
+static unsigned int phys_cpu_map[NLM_MAX_NODES];
+
+static unsigned short nlm_select_queue(struct net_device *dev,
+				       struct sk_buff *skb)
+{
+	return (unsigned short)smp_processor_id();
+}
+
+/*
+ * As there is a port level fifo checkup done in NAE h/w, we need to fill up
+ * the port fifos ( 0, 4, 8, 12 & 16) with some dummy entries if it is not
+ * owned by linux.  If these are owned by an app, these dummy entries need to
+ * be cleared by the app before reinitializing it
+ */
+static int init_dummy_entries_for_port_fifos(int node,
+					     nlm_nae_config_ptr nae_cfg,
+					     int jumbo_enabled)
+{
+	static uint64_t msg;
+	uint32_t __attribute__ ((unused)) mflags;
+	int rv = 0, vc_index, i, j, ret, code = 0;
+
+	if (!nae_cfg->dummy_pktdata_addr)
+		return 0;
+
+	msg = (uint64_t)nae_cfg->dummy_pktdata_addr & 0xffffffffffULL;
+
+	msgrng_access_enable(mflags);
+
+	for (i = 0; i < nae_cfg->frin_total_queue; i++) {
+		/* nothing to do, if it is owned by linux */
+		if((1 << i) & nae_cfg->freein_fifo_dom_mask) 
+			continue;
+
+		vc_index = i + nae_cfg->frin_queue_base;
+
+		for (j = 0; j < 4; j++) {
+			if ((ret = nlm_hal_send_msg1(vc_index, code, msg))
+				& 0x7) {
+				print_fmn_send_error(__func__, ret);
+				printk("Unable to send configured free desc\n");
+				printk("check freein carving (qid=%d)\n",
+					vc_index);
+				rv = -1;
+				goto err;
+			}
+		}
+	}
+err:
+	msgrng_access_disable(mflags);
+	return rv;
+}
+
+
+static int nlm_initialize_vfbid(int node, nlm_nae_config_ptr nae_cfg)
+{
+	uint32_t vfbid_tbl[128];
+	int start = nae_cfg->vfbtbl_sw_offset;
+	int end = start + nae_cfg->vfbtbl_sw_nentries;
+	int frin_q_base = nlm_node_cfg.nae_cfg[0]->frin_queue_base;
+	int cpu, tblidx, i;
+	
+	/*
+	 * For s/w replenishment, each nodes tx completes can be send to his
+	 * own node cpus only
+	 */
+	for (tblidx = start, cpu = 0; tblidx < end ; tblidx++, cpu++)
+		vfbid_tbl[tblidx] = (cpu * 4) + nae_cfg->fb_vc +
+					(node * 1024);
+
+	nlm_config_vfbid_table(node, start, end - start,
+		&vfbid_tbl[start]);
+	/*
+	 * For h/w replenishment, each node fills up 20 entries for all other
+	 * nodes starting from node0's queue-id. Software should offset the
+	 * hw-offset + rx-node id to get the actual index 
+	 */
+	start = nae_cfg->vfbtbl_hw_offset;
+	end = start + nae_cfg->vfbtbl_hw_nentries;
+	for (tblidx = start, i = 0; tblidx < end; tblidx++, i++) {
+		if(i >= NLM_NAE_MAX_FREEIN_FIFOS_PER_NODE) {
+			i = 0;
+			frin_q_base = 1024 + frin_q_base;
+		}
+		vfbid_tbl[tblidx] = frin_q_base + i;
+	}
+	nlm_config_vfbid_table(node, start, end - start, &vfbid_tbl[start]);
+
+	/* NULL FBID Should map to cpu0 to detect NAE send message errors*/
+	vfbid_tbl[127] = 0;
+	nlm_config_vfbid_table(node, 127, 1, &vfbid_tbl[127]);
+
+	/*IEEE-1588 timestamp*/
+	vfbid_tbl[126] = 0;
+	nlm_config_vfbid_table(node, 126, 1, &vfbid_tbl[126]);
+
+	return 0;
+}
+
+static int initialize_nae_per_node(int node, uint32_t *phys_cpu_map, int mode,
+				   int *jumbo_enabled)
+{
+	nlm_nae_config_ptr nae_cfg;
+	int i, len, pos, bitoff;
+
+	nae_cfg = nlm_node_cfg.nae_cfg[node];
+
+	if (nae_cfg == NULL) 
+		return -1;
+
+	for (i = 0; i <= NLM_NAE_MAX_SHARED_DOMS; i++) {
+		lnx_shinfo[i].valid = nae_cfg->shinfo[i].valid;
+		lnx_shinfo[i].rxvc = nae_cfg->shinfo[i].rxvc;
+		lnx_shinfo[i].domid = nae_cfg->shinfo[i].domid;
+		memcpy(&lnx_shinfo[i].lcpu_2_pcpu_map,
+			nae_cfg->shinfo[i].lcpu_2_pcpu_map, 
+			sizeof(nae_cfg->shinfo[i].lcpu_2_pcpu_map));
+		memcpy(&lnx_shinfo[i].cpu_2_freeinfifo_map,
+			nae_cfg->shinfo[i].cpu_2_freeinfifo_map, 
+			sizeof(nae_cfg->shinfo[i].cpu_2_freeinfifo_map));
+	}
+
+	lnx_normal_mask = nae_cfg->freein_fifo_dom_mask;
+
+	/* if jumbo enabled , we use half of the linux owned freein fifos
+	 * for jumbo skbs */
+	if (*jumbo_enabled) {
+		int mine = 1;
+		for (i = 0; i < nae_cfg->frin_total_queue; i++) {
+			if ((1 << i) & nae_cfg->freein_fifo_dom_mask) {
+				if (mine) {
+					mine = 0;
+					continue;
+				}
+				lnx_normal_mask &= (~(1 << i));
+				lnx_jumbo_mask |= (1 << i);
+				mine = 1;
+			}
+		}
+
+		if (lnx_jumbo_mask) {
+			nlm_hal_derive_cpu_to_freein_fifo_map(node,
+				phys_cpu_map[node], lnx_normal_mask,
+				cpu_2_normal_frfifo[node]);
+			nlm_hal_derive_cpu_to_freein_fifo_map(node,
+				phys_cpu_map[node], lnx_jumbo_mask,
+				cpu_2_jumbo_frfifo[node]);
+			memset(lnx_shinfo[0].cpu_2_freeinfifo_map,
+				0, sizeof(lnx_shinfo[0].cpu_2_freeinfifo_map));
+
+			for (i = 0; i < NLM_NCPUS_PER_NODE; i++) {
+				pos = i / NLM_NAE_SH_LCPU_TO_MAP_SZ;
+				bitoff = (i % 
+					NLM_NAE_SH_LCPU_TO_MAP_NVALS_PER_ENTRY)
+					* NLM_NAE_SH_LCPU_TO_MAP_SNG_VAL_SZ;
+				lnx_shinfo[0].cpu_2_freeinfifo_map[pos] |=
+					(cpu_2_normal_frfifo[node][i] <<
+						bitoff);
+				lnx_shinfo[0].cpu_2_jumbo_freeinfifo_map[pos] |=
+					(cpu_2_jumbo_frfifo[node][i] << bitoff);
+			}
+		} else {
+			printk("freein-fifo unavailable: ");
+			printk("Disabling Jumbo\n");
+			*jumbo_enabled = 0;
+		}
+	} else if (*jumbo_enabled == 0) {
+		for (i = 0; i < NLM_NCPUS_PER_NODE; i++) {
+			pos = i / NLM_NAE_SH_LCPU_TO_MAP_SZ;
+			bitoff = (i % NLM_NAE_SH_LCPU_TO_MAP_NVALS_PER_ENTRY) *
+				NLM_NAE_SH_LCPU_TO_MAP_SNG_VAL_SZ;
+			cpu_2_normal_frfifo[node][i] = 
+				(lnx_shinfo[0].cpu_2_freeinfifo_map[pos] >>
+					bitoff) & 0x1f;
+		}
+	}
+
+	lnx_shinfo[0].mode = mode;
+	lnx_shinfo[0].jumbo_enabled = *jumbo_enabled;
+	lnx_shinfo[0].node = node;
+	if (nae_cfg->owned) {
+		nlm_hal_write_ucore_shared_mem(node,
+			(uint32_t *)lnx_shinfo,
+			sizeof(lnx_shinfo)/sizeof(uint32_t));
+		nlm_hal_restart_ucore(node, fdt);
+	}
+
+#ifdef IEEE_1588_PTP_ENABLED
+	nlm_hal_prepad_enable(node, 3);
+#endif
+
+	/* initialize my vfbid table */
+	if (!(nae_cfg->flags & VFBID_FROM_FDT))
+		nlm_initialize_vfbid(node, nae_cfg);
+	
+	if (nae_cfg->owned == 0)
+		return -1;
+
+	/* Update RX_CONFIG for desc size */
+	len = (ETH_HLEN + ETH_FCS_LEN + SMP_CACHE_BYTES);
+	if (*jumbo_enabled)
+		nlm_hal_init_ingress (node,
+			(len + ETH_JUMBO_DATA_LEN) & ~(SMP_CACHE_BYTES - 1));
+	else
+		nlm_hal_init_ingress (node,
+			(len + ETH_DATA_LEN) & ~(SMP_CACHE_BYTES - 1));
+
+	if (init_dummy_entries_for_port_fifos(node, nae_cfg,
+		*jumbo_enabled) != 0)
+		return -1;
+	
+	if (is_nlm_xlp2xx()) {
+		nlm_hal_msec_tx_default_config(node,
+			0xff,			/* port enable  */
+			0x5555,			/* preamble len */
+			0x0,			/* pkt num      */
+			0x7fffffff);		/* pn threshold */
+		nlm_hal_msec_rx_default_config(node,
+			0xff,			/* port enable  */
+			0xaaaa,			/* preamble len */
+			0x0,			/* packet num   */
+			0x0);			/* replay win size */
+	}
+
+	return 0;
+}
+
+int initialize_nae(uint32_t *phys_cpu_map, int mode, int *jumbo_enabled)
+{
+	ulong __attribute__ ((unused)) mflags;
+	int dom_id = 0;
+	int node, ret;
+
+	msgrng_access_enable(mflags);
+
+	nlm_hal_init_nae(fdt, dom_id);
+
+	for (node = 0; node < NLM_MAX_NODES; node++) {
+		ret = initialize_nae_per_node(node, phys_cpu_map,
+			mode, jumbo_enabled);
+	}
+
+	msgrng_access_disable(mflags);
+	return 0;
+}
+
+static int nlm_replenish_per_cpu_buffer(int node, nlm_nae_config_ptr nae_cfg,
+					int qindex, int bufcnt)
+{
+	int i, port;
+	int vc_index = 0;
+	int __attribute__ ((unused)) mflags, code;
+	uint64_t msg;
+	struct sk_buff * skb;
+	int ret = 0;
+	int size = NLM_RX_ETH_BUF_SIZE;
+
+	if ((1 << qindex) & lnx_jumbo_mask)
+		size = NLM_RX_JUMBO_BUF_SIZE;
+
+	/* For queue index 16 and 17, we still use  the port level descriptor info */
+	if (qindex >= 16) {
+		for (port = 0; port < nae_cfg->num_ports; port++) {
+			if(nae_cfg->ports[port].hw_port_id == qindex)
+				bufcnt = nae_cfg->ports[port].num_free_desc;
+	 	}
+	}
+
+	for (i = 0; i < bufcnt; i++) {
+		vc_index = qindex + nae_cfg->frin_queue_base;
+		skb = nlm_xlp_alloc_skb_atomic(size, node);
+		if (!skb) {
+			printk("[%s] alloc skb failed\n",__FUNCTION__);
+			break;
+		}
+
+		/* Store skb in back_ptr */
+		mac_put_skb_back_ptr(skb);
+		code = 0;
+
+		/* Send the free Rx desc to the MAC */
+		msgrng_access_enable(mflags);
+		msg = (uint64_t)virt_to_bus(skb->data) &
+			0xffffffffffULL;
+
+		/* Send the packet to nae rx  */
+		__sync();
+
+		if ((ret = nlm_hal_send_msg1(vc_index, code, msg)) & 0x7) {
+			print_fmn_send_error(__func__, ret);
+			printk("Unable to send configured free desc, ");
+			printk("check freein carving (qid=%d)\n", vc_index);
+
+			/* free the buffer and return! */
+			dev_kfree_skb_any(skb);
+
+			msgrng_access_disable(mflags);
+			ret = -EBUSY;
+			break;
+		}
+		msgrng_access_disable(mflags);
+	}
+
+	printk("Send %d descriptors for queue %d(vc %d) of length %d\n",
+		bufcnt, qindex, vc_index, size);
+
+	return ret;
+}
+
+
+int replenish_freein_fifos(void)
+{
+	int node, i, rv;
+	nlm_nae_config_ptr nae_cfg;
+	int max_descs_pqueue, num_descs;
+
+	for (node = 0; node < NLM_MAX_NODES; node++) {
+		nae_cfg = nlm_node_cfg.nae_cfg[node];
+		if (nae_cfg == NULL) 
+			continue;
+
+		/* configure the descs */
+		for (i = 0; i < nae_cfg->frin_total_queue; i++) {
+			max_descs_pqueue = 
+				nae_cfg->freein_fifo_onchip_num_descs[i] +
+					nae_cfg->freein_fifo_spill_num_descs;
+
+			if ((1 << i) & lnx_normal_mask)
+				num_descs = (num_descs_per_normalq <=
+					max_descs_pqueue) ?
+					num_descs_per_normalq :
+					max_descs_pqueue;
+			else if ((1 << i) & lnx_jumbo_mask)
+				num_descs = (num_descs_per_jumboq <=
+					max_descs_pqueue) ?
+					num_descs_per_jumboq :
+					max_descs_pqueue;
+			else 
+				continue;
+				
+			rv = nlm_replenish_per_cpu_buffer(node, nae_cfg,
+				i, num_descs);
+		}
+		if(rv != 0)
+			break;
+	}
+	return rv;
+}
+
+void nlm_xlp_nae_remove(void)
+{
+	struct net_device *dev = NULL;
+	struct dev_data *priv = NULL;
+	int node, i;
+
+	for (node = 0; node < NLM_MAX_NODES; node++) {
+		for(i = 0; i < MAX_GMAC_PORT; i++) {
+			dev = xlp_dev_mac[node][i];
+			if (dev == NULL) continue;
+
+			priv = netdev_priv(dev);
+			unregister_netdev(dev);
+			free_netdev(dev);
+		}
+	}
+
+	nlm_nae_remove_procentries();
+}
+
+void nlm_xlp_mac_set_enable(struct dev_data *priv, int flag)
+{
+	int inf;
+	uint32_t speed = 0, duplex = 0, ifmode = 0;
+	uint32_t netwk_inf = 0, mac_cfg2 = 0;
+
+
+	if ((priv->type != SGMII_IF) && (priv->type != XAUI_IF))
+		return;
+	switch (priv->type) {
+	case SGMII_IF:
+		inf = (priv->block * 4) + priv->index;
+		break;
+	case XAUI_IF:
+	case INTERLAKEN_IF:
+		inf = priv->block;
+		break;
+	default:
+		return;
+	}
+
+	if (flag) {
+		if (priv->type == SGMII_IF) {
+			if (nlm_hal_get_phy_status(priv->node, inf,
+				&speed, &duplex)) {
+				ifmode = ((speed == 2) ? 2: 1);
+				nlm_hal_mac_disable(priv->node, inf,
+					priv->type);
+			        netwk_inf  = read_gmac_reg(priv->node, inf,
+					NETWK_INF_CTRL_REG);
+				netwk_inf &= (~(0x3));
+				write_gmac_reg(priv->node, inf,
+					NETWK_INF_CTRL_REG, netwk_inf | speed);
+				mac_cfg2 = read_gmac_reg(priv->node, inf,
+						MAC_CONF2);
+				mac_cfg2 &= (~((0x3 << 8) | 1));
+				write_gmac_reg(priv->node, inf , MAC_CONF2,
+				      mac_cfg2 | (ifmode << 8) | duplex);
+			}
+		}
+		nlm_hal_mac_enable(priv->node, inf, priv->type);
+		/* disabling the flow control */
+		if (priv->type == XAUI_IF) {
+			uint32_t xaui_cfg;
+			xaui_cfg = nlm_hal_read_mac_reg(priv->node, inf,
+					XGMAC, XAUI_CONFIG_1);
+			xaui_cfg &= (~(XAUI_CONFIG_TCTLEN |
+					XAUI_CONFIG_RCTLEN));
+			nlm_hal_write_mac_reg(priv->node, inf, XGMAC,
+					XAUI_CONFIG_1, xaui_cfg);
+		}
+	} else
+		nlm_hal_mac_disable(priv->node, inf, priv->type);
+}
+
+int nlm_xlp_link_up(struct dev_data *priv, int phy)
+{
+        uint16_t extstatus;
+
+	if (priv->type != SGMII_IF)
+                return -EIO;
+        nlm_hal_mdio_write(priv->node, NLM_HAL_EXT_MDIO, 0, BLOCK_7, LANE_CFG,
+		priv->phy.addr, 22, 0);
+        extstatus = nlm_hal_mdio_read(priv->node, NLM_HAL_EXT_MDIO, 0, BLOCK_7,
+		LANE_CFG, priv->phy.addr, 17);
+        return ((extstatus & 0x0400) ? 1 : 0 );
+}
+
+static int p2p_desc_mem_init(void)
+{
+	int cpu, cnt;
+	int dsize, tsize;
+	void *buf;
+	/* MAX_SKB_FRAGS + 4.  Out of 4, 2 will be used for skb and
+	 * freeback storage
+	 */
+	dsize = ((((MAX_SKB_FRAGS + P2P_EXTRA_DESCS) * sizeof(uint64_t)) +
+			CACHELINE_SIZE - 1) & (~((CACHELINE_SIZE)-1)));
+	tsize = dsize * MAX_TSO_SKB_PEND_REQS;
+
+	printk("%s in, dsize %d tsize %d \n", __FUNCTION__, dsize, tsize);
+
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {
+		buf = cacheline_aligned_kmalloc(tsize, GFP_KERNEL);
+		if (!buf)
+			return -ENOMEM;
+
+		p2p_desc_mem[cpu].mem = buf;
+		for (cnt = 1; cnt < MAX_TSO_SKB_PEND_REQS; cnt++) {
+			*(ulong *)buf = (ulong)(buf + dsize);
+			buf += dsize;
+			*(ulong *)buf = 0;
+		}
+		p2p_desc_mem[cpu].dsize = dsize;
+	}
+	return 0;
+}
+
+inline void *alloc_p2p_desc_mem(int cpu)
+{
+	void *buf;
+	buf = p2p_desc_mem[cpu].mem;
+	if (buf)
+		p2p_desc_mem[cpu].mem = (void *)*(ulong *)(buf);
+	else {
+		buf = cacheline_aligned_kmalloc(p2p_desc_mem[cpu].dsize,
+			GFP_KERNEL);
+		p2p_dynamic_alloc_cnt[CPU_INDEX(cpu)]++;
+	}
+	return buf;
+}
+
+inline void free_p2p_desc_mem(int cpu, void *buf)
+{
+	*(ulong *)buf = (ulong)p2p_desc_mem[cpu].mem;
+	p2p_desc_mem[cpu].mem = buf;
+
+}
+
+inline int create_p2p_desc(uint64_t paddr, uint64_t len,
+				  uint64_t *p2pmsg, int idx)
+{
+	int plen;
+	do {
+		plen = len >= MAX_PACKET_SZ_PER_MSG ?
+				(MAX_PACKET_SZ_PER_MSG - 64): len;
+		p2pmsg[idx] = cpu_to_be64(nae_tx_desc(P2D_NEOP, 0, NULL_VFBID,
+				plen, paddr));
+		len -= plen;
+		paddr += plen;
+		idx++;
+	} while (len > 0);
+	return idx;
+}
+
+inline void create_last_p2p_desc(uint64_t *p2pmsg,
+					struct sk_buff *skb, int idx)
+{
+	p2pmsg[idx -1 ] = cpu_to_be64(be64_to_cpu(p2pmsg[idx - 1]) |
+				((uint64_t)P2D_EOP << 62));
+	p2pmsg[P2P_SKB_OFF] = (uint64_t)(ulong)skb;
+}
+
+uint16_t pseuodo_chksum(uint16_t *ipsrc, uint16_t proto)
+{
+	uint32_t sum = 0;
+	sum += cpu_to_be16(ipsrc[0]);
+	sum += cpu_to_be16(ipsrc[1]);
+	sum += cpu_to_be16(ipsrc[2]);
+	sum += cpu_to_be16(ipsrc[3]);
+	sum += proto;
+	while(sum >> 16)
+		sum = (sum & 0xffff)  + (sum >> 16);
+	//      sum = ~sum;
+	return (uint16_t)sum;
+}
+
+static void nlm_enable_l3_l4_parser(int node)
+{
+	int l2proto = 1; //ethernet
+	int port = 0, i, ipchk = 1;
+	uint32_t val = 0;
+	uint32_t naereg;
+
+	//enabling hardware parser
+	naereg = nlm_hal_read_nae_reg(node, RX_CONFIG);
+	nlm_hal_write_nae_reg(node, RX_CONFIG, (naereg | RX_PARSER_EN << 12 |
+		RX_PPAD_EN << 13 | RX_PPAD_SZ << 22));
+
+	/* enabling extraction of data */
+	for (i = 0; i < 16; i++)
+		nlm_hal_write_nae_reg(node, L2_TYPE_0 + i, l2proto);
+
+	/* l2proto and ethertype included */
+	nlm_hal_write_nae_reg(node, L3_CTABLE_MASK_0, port | 0 << 5 | 1 << 6);
+
+	val = ((0 << 26) | (9 << 20) | (ipchk << 18) | (1 << 16) | (0x800));
+	nlm_hal_write_nae_reg(node, L3_CTABLE_0_0, val);
+	/* extract src-ip and dst-ip */
+	val =   (12 << 26) | (4 << 21) | (16 << 15) | (4 << 10);
+	nlm_hal_write_nae_reg(node, L3_CTABLE_0_1, val);
+
+	/* ip proto = tcp */
+	nlm_hal_write_nae_reg(node, L4_CTABLE_0_0, 1 << 17 | 0x6);
+	/* extract source and dst port */
+	val = ((0 << 21) | (2 << 17) | (2 << 11) | (2 << 7));
+	nlm_hal_write_nae_reg(node, L4_CTABLE_0_1, val);
+
+}
+
+#ifdef CONFIG_NLM_NET_OPTS
+/* Get the hardware replenishment queue id */
+static int get_hw_frfifo_queue_id(int rxnode, nlm_nae_config_ptr nae_cfg,
+				  int cpu, uint32_t truesize)
+{
+	/*
+	 * We have to use the logical map here as the below arrays are
+	 * indexed by logical cpu id
+	 */
+	int qid;
+	int node_cpu = __cpu_number_map[cpu] % NLM_NCPUS_PER_NODE;
+
+	qid = cpu_2_normal_frfifo[rxnode][node_cpu];
+
+	if (enable_jumbo)
+		if(truesize > NLM_RX_JUMBO_BUF_SIZE) 
+			qid = cpu_2_jumbo_frfifo[rxnode][node_cpu];
+	/*
+	 * all the nodes vfbtable should be filled with starting node of
+	 * 0 to ending node with 20 entries each
+	 */
+	return nae_cfg->vfbtbl_hw_offset +
+		(rxnode * NLM_NAE_MAX_FREEIN_FIFOS_PER_NODE) + qid;
+}
+#endif
+
+int mac_refill_frin_skb(int node, int cpu, uint64_t paddr,
+			       uint32_t bufsize)
+{
+	/*
+	 * We have to use the logical map here as the below arrays are
+	 * indexed by logical cpu id
+	 */
+	int ret, code, qid;
+	nlm_nae_config_ptr nae_cfg;
+	int node_cpu = __cpu_number_map[cpu] % NLM_NCPUS_PER_NODE;
+	ulong __attribute__ ((unused)) mflags;
+
+
+	qid = (bufsize >= NLM_RX_JUMBO_BUF_SIZE) ?
+		cpu_2_jumbo_frfifo[node][node_cpu] :
+		cpu_2_normal_frfifo[node][node_cpu];
+	
+	nae_cfg = nlm_node_cfg.nae_cfg[node];
+	if (nae_cfg == NULL) {
+		printk("%s Error, Invalid node id %d\n", __FUNCTION__, node);
+		return -1;
+	}
+	Message("%s in cpu %d bufsize %d node %d qid %d qbase %d\n",
+		__FUNCTION__, cpu, bufsize, node, qid,
+		nae_cfg->frin_queue_base);
+
+	ret = 0;
+	qid = nae_cfg->frin_queue_base + qid;
+
+	/* Assumption: SKB is all set to go */
+	/* Send the free Rx desc to the MAC */
+	code = 0;
+
+	/* Send the packet to nae rx  */
+	msgrng_access_enable(mflags);
+	for (;;) {
+	  ret = nlm_hal_send_msg1(qid, code, (paddr & 0xffffffffffULL));
+	  if (!ret) break;
+	}
+	msgrng_access_disable(mflags);
+
+	return ret;
+}
+
+int mac_refill_frin_one_buffer(struct net_device *dev, int cpu,
+				      uint32_t truesize)
+{
+	struct dev_data* priv = netdev_priv(dev);
+	struct sk_buff * skb;
+	int buf_size = NLM_RX_ETH_BUF_SIZE;
+
+	if (enable_jumbo)
+		if(truesize > NLM_RX_JUMBO_BUF_SIZE) 
+			buf_size = NLM_RX_JUMBO_BUF_SIZE; 
+
+	skb = nlm_xlp_alloc_skb_atomic(buf_size, priv->node);
+	if (!skb) {
+		printk("[%s] alloc skb failed\n",__FUNCTION__);
+		panic("panic...");
+		return -ENOMEM;
+	}
+
+	skb->dev = dev;
+
+	mac_put_skb_back_ptr(skb);
+
+	return mac_refill_frin_skb(priv->node, cpu,
+		(uint64_t)virt_to_bus(skb->data), buf_size);
+}
+
+/**********************************************************************
+ * nlm_xlp_nae_open -  called when bring up a device interface
+ * @dev  -  this is per device based function
+ *
+ **********************************************************************/
+static int  nlm_xlp_nae_open (struct net_device *dev)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	int i;
+	int ret = 0;
+	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
+	static int done = 0;
+
+	if (perf_mode == NLM_TCP_MODE) {
+#ifdef TSO_ENABLED
+		tso_enable(dev, 1);
+#endif
+#ifdef CONFIG_INET_LRO
+		lro_init(dev);
+#endif
+		if (!done) {
+			done = 1;
+			nlm_enable_l3_l4_parser(priv->node);
+		}
+	}
+
+	if (priv->inited) {
+		spin_lock_irq(&priv->lock);
+		if(nae_cfg->owned)
+			nlm_xlp_mac_set_enable(priv, 1);
+		netif_tx_wake_all_queues(dev);
+		spin_unlock_irq(&priv->lock);
+		return 0;
+	}
+
+#ifdef ENABLE_NAE_PIC_INT
+	{
+		int port = priv->port;
+		irq  = irt_irq_table[PIC_IRT_NA_INDEX(port)][0];
+		if (request_irq( irq, nlm_xlp_nae_int_handler,
+			IRQF_SHARED, dev->name, dev)) {
+			ret = -EBUSY;
+			printk("can't get mac interrupt line (%d)\n",dev->irq);
+		}
+		dump_irt_entry(PIC_IRT_NA_INDEX(port));
+	}
+#endif
+
+	netif_tx_start_all_queues(dev);
+
+	for (i = 0; i < NR_CPUS; i++) {
+		priv->cpu_stats[i].tx_packets	= 0;
+		priv->cpu_stats[i].txc_packets	= 0;
+		priv->cpu_stats[i].rx_packets	= 0;
+		priv->cpu_stats[i].interrupts	= 0;
+
+	}
+
+	priv->inited = 1;
+
+	if(nae_cfg->owned)
+		nlm_xlp_mac_set_enable(priv, 1);
+
+	return ret;
+}
+
+/**********************************************************************
+ * nlm_xlp_nae_stop -  called when bring down the interface
+ * @dev  -  this is per device based function
+ *
+ **********************************************************************/
+static int  nlm_xlp_nae_stop (struct net_device *dev)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
+
+	spin_lock_irq(&priv->lock);
+
+	if (nae_cfg->owned)
+		nlm_xlp_mac_set_enable(priv, 0);
+	priv->inited = 0;
+	netif_tx_stop_all_queues(dev);
+
+	spin_unlock_irq(&priv->lock);
+	return 0;
+}
+
+/**********************************************************************
+ * nlm_xlp_set_multicast_list
+ *
+ **********************************************************************/
+static void  nlm_xlp_set_multicast_list (struct net_device *dev)
+{
+	if (dev->flags & IFF_ALLMULTI) {
+		/*
+		 * Enable ALL multicasts.  Do this by inverting the
+		 * multicast enable bit.
+		 */
+		return;
+	}
+	return;
+}
+
+static void xlp_mac_setup_hwaddr(struct dev_data *priv)
+{
+        struct net_device *dev = priv->dev;
+
+        nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				MAC_ADDR0_LO,
+				(dev->dev_addr[5] << 24) |
+				(dev->dev_addr[4] << 16) |
+				(dev->dev_addr[3] << 8)  |
+				(dev->dev_addr[2]));
+
+	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				MAC_ADDR0_HI,
+				(dev->dev_addr[1] << 24) |
+				(dev->dev_addr[0] << 16));
+
+	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				MAC_ADDR0_MASK_LO,
+				0xFFFFFFFF);
+	nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				MAC_ADDR0_MASK_HI,
+				0xFFFFFFFF);
+
+        nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				MAC_FILTER_CONFIG,
+				(1 << MAC_FILTER_BCAST_EN_POS) |
+				(1 << MAC_FILTER_MCAST_EN_POS) |
+				(1 << MAC_FILTER_ADDR0_VALID_POS));
+
+}
+
+
+/**********************************************************************
+ * nlm_xlp_nae_ioctl
+ *
+ **********************************************************************/
+static int  nlm_xlp_nae_ioctl (struct net_device *dev, struct ifreq *rq, int cmd)
+{
+	int rc = 0;
+	printk("nlm_xlp_nae_ioctl called \n");
+	switch (cmd) {
+	case SIOCSHWTSTAMP:
+		printk("HW time stamping supported by HW\n");
+		return 0;
+	default:
+		rc = -EOPNOTSUPP;
+		break;
+	}
+
+	return rc;
+}
+
+/**********************************************************************
+ * nlm_xlp_nae_change_mtu
+ * @dev   -  this is per device based function
+ * @new_mtu -  this is new mtu to be set for the device
+ **********************************************************************/
+static int nlm_xlp_nae_change_mtu(struct net_device *dev, int new_mtu)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	ulong flags;
+	ulong local_mtu, len;
+	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
+
+	if (enable_jumbo &&
+		(new_mtu > ETH_JUMBO_DATA_LEN || new_mtu < ETH_ZLEN)) {
+		printk ("MTU should be between %d and %d\n",
+			ETH_ZLEN, ETH_JUMBO_DATA_LEN);
+		return -EINVAL;
+	}
+
+	if (!enable_jumbo &&
+		(new_mtu > ETH_DATA_LEN || new_mtu < ETH_ZLEN)) {
+		printk ("MTU should be between %d and %d\n",
+			ETH_ZLEN, ETH_DATA_LEN);
+		return -EINVAL;
+	}
+
+	spin_lock_irqsave(&priv->lock, flags);
+
+	len = new_mtu + ETH_HLEN + ETH_FCS_LEN + SMP_CACHE_BYTES;
+	local_mtu = len & ~(SMP_CACHE_BYTES - 1);
+	if (netif_running(dev))
+	{
+		netif_tx_stop_all_queues (dev);
+		if(nae_cfg->owned)
+			nlm_xlp_mac_set_enable(priv, 0); /* Disable MAC TX/RX */
+	}
+
+	if (priv->type==SGMII_IF)
+		nlm_hal_set_sgmii_framesize(priv->node, priv->block,
+			priv->index, local_mtu);
+	else if (priv->type==XAUI_IF)
+		nlm_hal_set_xaui_framesize(priv->node, priv->block,
+			local_mtu, local_mtu);
+	else if (priv->type==INTERLAKEN_IF)
+		nlm_hal_set_ilk_framesize(priv->node, priv->block,
+			priv->phy.addr, local_mtu);
+	else {
+		spin_unlock_irqrestore(&priv->lock, flags);
+		return -1;
+	}
+
+	dev->mtu = new_mtu;
+
+	if (netif_running(dev))
+	{
+		netif_tx_start_all_queues (dev);
+		if(nae_cfg->owned)
+			nlm_xlp_mac_set_enable(priv, 1);
+	}
+
+	spin_unlock_irqrestore(&priv->lock, flags);
+	return 0;
+}
+
+/**********************************************************************
+ * nlm_xlp_mac_get_stats - wrap function for xlp_get_mac_stats
+ * @dev   -  this is per device based function
+ **********************************************************************/
+static struct net_device_stats *nlm_xlp_mac_get_stats(struct net_device *dev)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	ulong flags;
+
+	spin_lock_irqsave(&priv->lock, flags);
+
+	xlp_get_mac_stats(dev, &priv->stats);
+
+	/* XXX update other stats here */
+	spin_unlock_irqrestore(&priv->lock, flags);
+
+	return &priv->stats;
+}
+
+/**********************************************************************
+ * nlm_xlp_nae_tx_timeout -  called when transmiter timeout
+ * @dev  -  this is per device based function
+ *
+ **********************************************************************/
+static void  nlm_xlp_nae_tx_timeout (struct net_device *dev)
+{
+	struct dev_data *priv = netdev_priv(dev);
+
+	spin_lock_irq(&priv->lock);
+
+	priv->stats.tx_errors++;
+
+	spin_unlock_irq(&priv->lock);
+
+	netif_tx_wake_all_queues(dev);
+
+	printk(KERN_WARNING "%s: Transmit timed out\n", dev->name);
+	return;
+}
+
+static int nlm_xlp_nae_set_hwaddr(struct net_device *dev, void *p)
+{
+	struct sockaddr *addr = (struct sockaddr *)p;
+	struct dev_data *priv = netdev_priv(dev);
+	int rc = 0;
+
+	rc = eth_mac_addr(dev, p);
+
+	if (rc)
+		return rc;
+
+	if (priv->type == SGMII_IF) {
+	  nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				MAC_ADDR0_LO,
+				(addr->sa_data[5] << 24) |
+				(addr->sa_data[4] << 16) |
+				(addr->sa_data[3] << 8) |
+				(addr->sa_data[2]));
+
+	  nlm_hal_write_mac_reg(priv->node, priv->block, priv->index,
+				MAC_ADDR0_HI,
+				(addr->sa_data[1] << 24) |
+				(addr->sa_data[0] << 16));
+	}
+
+	return rc;
+}
+
+#ifdef ENABLE_NAE_PIC_INT
+/**********************************************************************
+ * nlm_xlp_nae_int_handler -  interrupt handler
+ * @irq     -  irq number
+ * @dev_id  -  this device
+ *
+ **********************************************************************/
+static irqreturn_t nlm_xlp_nae_int_handler(int irq, void *dev_id)
+{
+        struct net_device *dev;
+        struct dev_data *priv;
+	int i;
+	int cpu = 0;
+
+	cpu = hard_smp_processor_id();
+	priv->cpu_stats[cpu].interrupts++;
+
+	if(!dev_id) {
+		printk("[%s]: NULL dev_id \n", __FUNCTION__ );
+		return IRQ_HANDLED;
+	}
+	dev = (struct net_device*)dev_id;
+	priv = netdev_priv(dev);
+
+	i = find_irt_from_irq(irq);
+
+
+	return IRQ_HANDLED;
+}
+#endif
+
+static const struct net_device_ops nlm_xlp_nae_ops = {
+	.ndo_open			= nlm_xlp_nae_open,
+	.ndo_stop			= nlm_xlp_nae_stop,
+	.ndo_start_xmit			= nlm_xlp_nae_start_xmit,
+	.ndo_set_multicast_list		= nlm_xlp_set_multicast_list,
+	.ndo_do_ioctl			= nlm_xlp_nae_ioctl,
+	.ndo_tx_timeout 		= nlm_xlp_nae_tx_timeout,
+	.ndo_change_mtu			= nlm_xlp_nae_change_mtu,
+	.ndo_set_mac_address		= nlm_xlp_nae_set_hwaddr,
+	.ndo_get_stats 			= nlm_xlp_mac_get_stats,
+	.ndo_select_queue		= nlm_select_queue,
+};
+
+static int nlm_per_port_nae_init(int node, int port, 
+			  nlm_nae_config_ptr nae_cfg, int maxnae)
+{
+	struct net_device *dev;
+	struct dev_data *priv;
+	int cpu;
+
+	if (!nae_cfg->ports[port].valid)
+		return -1;
+
+	dev = alloc_etherdev_mq(sizeof(struct dev_data),
+		maxnae * NLM_NCPUS_PER_NODE);
+	if(!dev)
+		return -1;
+
+	ether_setup(dev);
+	/* routing gives good performance with tx_queue_len = 0 */
+	dev->tx_queue_len = 0;
+
+	priv = netdev_priv(dev);
+	spin_lock_init(&priv->lock);
+	priv->dev 	= dev;
+	dev->netdev_ops = &nlm_xlp_nae_ops;
+
+	/* set ethtool_ops which is inside xlp_ethtool.c file*/
+	xlp_set_ethtool_ops(dev);
+
+	dev->dev_addr 	= eth_hw_addr[node][port];
+	priv->port	= port;
+	priv->hw_port_id = nae_cfg->ports[port].hw_port_id;
+
+	priv->inited	= 0;
+	priv->node 	= node;
+	priv->block	= nae_cfg->ports[port].hw_port_id / 4;
+	priv->type	= nae_cfg->ports[port].iftype;
+
+	switch(nae_cfg->ports[port].iftype) {
+	case SGMII_IF:
+		priv->index = nae_cfg->ports[port].hw_port_id & 0x3;
+		priv->phy.addr = nae_cfg->ports[port].hw_port_id;
+		break;
+	case XAUI_IF:
+		nlm_hal_write_mac_reg(priv->node,
+			(nae_cfg->ports[port].hw_port_id / 4),
+			XGMAC, XAUI_MAX_FRAME_LEN , 0x01800600);
+		priv->index = XGMAC;
+		break;
+	case INTERLAKEN_IF:
+		priv->index = INTERLAKEN;
+		priv->phy.addr = nae_cfg->ports[port].ext_phy_addr;
+		if (nae_cfg->ports[port].hw_port_id == 0) {
+			if (dev_alloc_name(dev, "ilk0-%d") < 0)
+				printk("alloc name failed \n");
+		}
+		else {
+			if (dev_alloc_name(dev, "ilk8-%d") < 0)
+				printk("alloc name failed \n");
+		}
+		break;
+	default:
+		priv->index = 0;
+		break;
+	}
+
+	priv->nae_tx_qid = nae_cfg->ports[port].txq;
+	priv->nae_rx_qid = nae_cfg->ports[port].rxq;
+	dev->features |= NETIF_F_LLTX;
+
+	register_netdev(dev);
+
+	xlp_dev_mac[node][port] = dev;
+	xlp_mac_setup_hwaddr(priv);
+
+	dummy_pktdata_addr[node] = nae_cfg->dummy_pktdata_addr;
+
+	for (cpu = 0; cpu < NR_CPUS; cpu++)
+		per_cpu_netdev[node][cpu][port] = dev;
+
+	printk("configuring PTP realted params\n");
+
+	if(node==0)
+		 priv->cycles.read = nlm_1588_read_clock0;
+	if(node==1)
+		 priv->cycles.read = nlm_1588_read_clock1;
+	if(node==2)
+		 priv->cycles.read = nlm_1588_read_clock2;
+	if(node==3)
+		 priv->cycles.read = nlm_1588_read_clock3;
+
+	priv->cycles.mask = CLOCKSOURCE_MASK(64);
+	
+	if (is_nlm_xlp3xx())
+		priv->cycles.mult = 1000 / XLP3XX_MAX_NAE_FREQUENCY; /* Mhz */
+	else
+		priv->cycles.mult = 0x2; /*500 Mhz*/
+	
+	priv->cycles.shift = 0; 
+
+	timecounter_init(&priv->clock, &priv->cycles,
+		ktime_to_ns(ktime_get_real()));
+	
+	memset(&priv->compare, 0, sizeof(priv->compare)); 	 
+	priv->compare.source = &priv->clock;
+	priv->compare.target = ktime_get_real;
+	/* no cyclecounter registered: cannot afford more samples */
+	priv->compare.num_samples = 0;
+	timecompare_update(&priv->compare,0);
+
+	return 0;
+}
+
+/**********************************************************************
+ * nlm_xlp_nae_init -  xlp_nae device driver init function
+ * @dev  -  this is per device based function
+ *
+ **********************************************************************/
+void nlm_xlp_nae_init(void)
+{
+	int i, node = 0, maxnae;
+	struct proc_dir_entry *entry;
+	unsigned char *mode_str[3] = {"INVALID","TCP_PERF","ROUTE_PERF"};
+	nlm_nae_config_ptr nae_cfg;
+
+	if (!(perf_mode == NLM_TCP_MODE || perf_mode == NLM_RT_MODE)) {
+		printk("Invalid perf mode passed -- Using TCP_PERF mode\n");
+		perf_mode = NLM_TCP_MODE;
+	}
+
+	printk("======= Module Parameters =========\n");
+	printk("num_descs_per_normalq=%d num_descs_per_jumboq=%d ",
+	       num_descs_per_normalq, num_descs_per_jumboq);
+	printk("perf_mode=%s enable_lro=%d enable_jumbo=%d\n",
+	       mode_str[perf_mode], enable_lro, enable_jumbo);
+
+	for (i = 0; i < NR_CPUS; i++)
+		nlm_mode[CPU_INDEX(i)] = perf_mode;
+
+	for (i = 0; i < NR_CPUS; i++) {
+	        if(!cpu_isset(i, phys_cpu_present_map))
+                        continue;
+		phys_cpu_map[i / NLM_NCPUS_PER_NODE] |=
+			(1 << (i % NLM_NCPUS_PER_NODE));
+	}
+
+	if (perf_mode == NLM_TCP_MODE)
+		p2p_desc_mem_init();
+
+	gen_mac_address();
+
+	if (initialize_nae(phys_cpu_map, perf_mode, &enable_jumbo))
+		return;
+
+	maxnae = nlm_node_cfg.num_nodes;	
+	for (node = 0; node < maxnae; node++) {
+		nae_cfg = nlm_node_cfg.nae_cfg[node];
+		if (nae_cfg == NULL)
+			continue;
+
+		for(i = 0; i < nae_cfg->num_ports; i++)
+			nlm_per_port_nae_init(node, i, nae_cfg, maxnae);
+		
+		nlm_hal_1588_ptp_clk_sel(node, NET_SYS_CLK);
+		nlm_hal_reset_1588_accum(node);
+		nlm_hal_1588_ld_user_val(node, 0, 0);
+		nlm_hal_1588_ld_freq_mul(node, 0x1, 0x0, 0x1);
+	}
+
+	entry = create_proc_read_entry("mac_stats",
+				       0,			/* def mode */
+				       nlm_root_proc,		/* parent */
+				       xlp_mac_proc_read,	/* proc fn */
+				       0	/* no client data */);
+	if (!entry) {
+		printk("[%s]: Unable to create proc entry for xlp_mac!\n",
+		       __func__);
+	}
+	entry = create_proc_read_entry("nae_stat",
+				       0,
+				       nlm_root_proc,
+				       nae_proc_read,
+				       0);
+	if (!entry) {
+		printk("[%s]: Unable to create proc entry for nae_proc!\n",
+		       __func__);
+	}
+
+	if (!enable_napi) {
+		nlm_xlp_disable_napi();
+		exclusive_vc = 1;
+		/*spawn percpu kthread*/
+		nlm_spawn_kthread();
+	}
+
+	if (replenish_freein_fifos() != 0)
+		printk("Replenishmemt of freein fifos failed\n");
+
+	if (enable_napi)
+		nlm_xlp_enable_napi();
+}
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_proc.c b/drivers/net/ethernet/broadcom/nae/xlpge_proc.c
new file mode 100644
index 0000000..31233ca
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_proc.c
@@ -0,0 +1,137 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+#include <linux/proc_fs.h>
+
+#include "xlpge.h"
+
+void nlm_nae_remove_procentries(void)
+{
+	/* TODO XXX: revisit nlm_root_proc */
+	remove_proc_entry("mac_stats", nlm_root_proc);
+}
+
+int nae_proc_read(char *page, char **start, off_t off,
+			     int count, int *eof, void *data)
+{
+	int len = 0;
+	int i = 0;
+	uint64_t total_err = 0, total_fast = 0;
+	uint64_t total_slow = 0, total_recv = 0;
+
+	for (i = 0; i < NR_CPUS; i++) {
+		printk("cpu%d, recv %ld fast_repl %ld, slow_repl %ld "
+			"err_repl %ld p2pdalloc %lld\n", i,
+			(ulong)receive_count[CPU_INDEX(i)],
+			(ulong)fast_replenish_count[CPU_INDEX(i)],
+			(ulong)slow_replenish_count[CPU_INDEX(i)],
+			(ulong)err_replenish_count[CPU_INDEX(i)],
+			p2p_dynamic_alloc_cnt[CPU_INDEX(i)]);
+
+		total_err += err_replenish_count[CPU_INDEX(i)];
+		total_fast += fast_replenish_count[CPU_INDEX(i)];
+		total_slow += slow_replenish_count[CPU_INDEX(i)];
+		total_recv += receive_count[CPU_INDEX(i)];
+
+		p2p_dynamic_alloc_cnt[CPU_INDEX(i)] = 0;
+		slow_replenish_count[CPU_INDEX(i)] = 0;
+		fast_replenish_count[CPU_INDEX(i)] = 0;
+		err_replenish_count[CPU_INDEX(i)] = 0;
+		receive_count[CPU_INDEX(i)] = 0;
+	}
+	/*check how many hash are empty...*/
+	printk("TOTAL_FAST_REPL %ld, TOTAL_SLOW_REPL %ld,"
+	       " TOTAL_ERR_REPL %ld TOTAL_RECV %ld\n",
+			(ulong)total_fast,
+			(ulong)total_slow,
+			(ulong)total_err,
+			(ulong)total_recv);
+
+	*eof = 1;
+	return len;
+}
+
+/**********************************************************************
+ * xlp_mac_proc_read -  proc file system read routine
+ * @page     -  buffer address
+ * @dev_id  -  this device
+ *
+ **********************************************************************/
+int xlp_mac_proc_read(char *page, char **start, off_t off,
+			     int count, int *eof, void *data)
+{
+	int len = 0;
+	off_t begin = 0;
+	int i = 0, cpu = 0, node;
+	struct net_device *dev = 0;
+	struct dev_data *priv = 0;
+
+	for (node = 0; node < NLM_MAX_NODES; node++) {
+		for (i = 0; i < MAX_GMAC_PORT; i++) {
+
+			dev = xlp_dev_mac[node][i];
+
+			if(dev == 0) continue;
+
+			priv = netdev_priv(dev);
+
+			for (cpu = 0; cpu < NR_CPUS ; cpu++) {
+				ulong tx = priv->cpu_stats[cpu].tx_packets;
+				ulong txc = priv->cpu_stats[cpu].txc_packets;
+				ulong rx = priv->cpu_stats[cpu].rx_packets;
+				ulong ints = priv->cpu_stats[cpu].interrupts;
+
+				if (!tx && !txc && !rx && !ints) continue;
+
+				len += sprintf(page + len,
+					"per cpu@%d: %lu(txp) %lu(txcp) "
+					"%lu(rxp) %lu(int)\n",
+					cpu, tx, txc, rx, ints);
+			}
+		}
+	}
+
+	*eof = 1;
+
+	*start = page + (off - begin);
+	len -= (off - begin);
+	if (len > count)
+		len = count;
+	if (len < 0)
+		len = 0;
+
+	return len;
+}
+
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_ptp.c b/drivers/net/ethernet/broadcom/nae/xlpge_ptp.c
new file mode 100644
index 0000000..04ab077
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_ptp.c
@@ -0,0 +1,85 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+
+#include "xlpge.h"
+
+static uint64_t acc_1588[NLM_MAX_NODES];
+
+cycle_t nlm_1588_read_clock0(const struct cyclecounter *tc)
+{
+	return acc_1588[0];
+}
+
+cycle_t nlm_1588_read_clock1(const struct cyclecounter *tc)
+{
+	return acc_1588[1];
+}
+
+cycle_t nlm_1588_read_clock2(const struct cyclecounter *tc)
+{
+	return acc_1588[2];
+}
+
+cycle_t nlm_1588_read_clock3(const struct cyclecounter *tc)
+{
+	return acc_1588[3];
+}
+
+#ifdef IEEE_1588_PTP_ENABLED	
+static void nlm_1588_ptp_hwtstamp_tx(struct sk_buff *skb)
+{
+	struct skb_shared_hwtstamps shhwtstamps;
+	uint64_t regval;
+	uint64_t ns;
+	
+	
+	struct dev_data *priv = netdev_priv(skb->dev);
+	int if_num = priv->hw_port_id;
+	int node = priv->node;
+
+	memset(&shhwtstamps, 0, sizeof(shhwtstamps));
+	regval = nlm_hal_ptp_timer_lo(node, if_num);
+	regval |= (uint64_t)nlm_hal_ptp_timer_hi(node, if_num)<<32;
+	acc_1588[node] = regval;
+	ns = timecounter_cyc2time(&priv->clock, regval);
+	timecompare_update(&priv->compare, ns);
+	shhwtstamps.hwtstamp = ns_to_ktime(ns);
+	shhwtstamps.syststamp =	timecompare_transform(&priv->compare, ns);
+	skb_tstamp_tx(skb, &shhwtstamps);
+	Message("nlm_1588_ptp_hwtstamp_tx regval=0x%llx ns=0x%llx node=0x%x\n",
+		regval, ns, node);	
+}
+#endif 
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
new file mode 100644
index 0000000..b2c7be4
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
@@ -0,0 +1,417 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+#include <linux/kthread.h>
+
+#include <asm/netlogic/xlp.h>
+#include <asm/netlogic/msgring.h>
+#include <asm/netlogic/hal/nlm_hal_fmn.h>
+
+#include "xlpge.h"
+
+uint64_t receive_count[NR_CPUS * 8] __cacheline_aligned;
+
+static inline void process_rx_packets(int cpu, unsigned int src_id, 
+		unsigned long long msg0, unsigned long long msg1)
+{
+	uint64_t addr;
+	uint32_t len, context, truesize;
+	int port, node, err;
+	struct net_device *pdev;
+	struct dev_data *priv = NULL;
+	uint64_t vaddr;
+	struct sk_buff* skb;
+#ifdef IEEE_1588_PTP_ENABLED
+	char *prepad = NULL;
+	uint64_t ns;
+	struct skb_shared_hwtstamps *shhwtstamps;
+#endif
+
+	err = (msg1 >> 4) & 0x1;
+
+	/* Rx packet */
+	addr	= msg1 & 0xffffffffc0ULL;
+	len	= (msg1 >> 40) & 0x3fff;
+	context = (msg1 >> 54) & 0x3ff;
+	node = (src_id >> 10) & 0x3;
+
+	Message("%s in cpu %d src_id %d len %d context %d node %d err %d\n",
+		__func__, cpu, src_id, len, context, node, err);
+
+	if (err) {
+
+		vaddr = (uint64_t)(unsigned long)bus_to_virt(addr);
+		skb = mac_get_skb_back_ptr(vaddr);
+		mac_refill_frin_skb(node, cpu, addr, skb->truesize);
+		err_replenish_count[CPU_INDEX(cpu)]++;
+		return;
+	}
+
+	if (addr == dummy_pktdata_addr[node]) {
+		printk("Dropping firmware RX packet (addr=%llx)!\n", addr);
+		return;
+	}
+	port = *(cntx2port[node] + context);
+
+#ifdef ENABLE_SANITY_CHECKS
+	if (port >= MAX_GMAC_PORT) {
+		printk("[%s]: bad port=%d, context=%d\n", __func__,
+			port, context);
+		/*TODO: Where to replenish this packet ???? Context is out of range!*/
+		return;
+	}
+#endif
+	pdev = per_cpu_netdev[node][cpu][port];
+#ifdef ENABLE_SANITY_CHECKS
+	if (!pdev) {
+		printk("[%s]: [rx] wrong port=%d(context=%d)? pdev = NULL!\n",
+			__func__, port, context);
+		return;
+	}
+#endif
+	priv = netdev_priv(pdev);
+
+	vaddr = (uint64_t)(unsigned long)bus_to_virt(addr);
+	
+	len = len  - ETH_FCS_LEN - PREPAD_LEN;
+
+	skb = mac_get_skb_back_ptr(vaddr);
+
+#ifdef ENABLE_SANITY_CHECKS
+	if (!skb) {
+		printk("[%s] Null skb? addr=%llx, vaddr=%llx, "
+		       "dropping it and losing one buffer!\n",
+				__func__, addr, vaddr);
+		err_replenish_count[CPU_INDEX(cpu)]++;
+		return;
+	}
+#endif
+
+#ifdef IEEE_1588_PTP_ENABLED
+	prepad = (char *)skb->data + 56; /*ieee-1588 timestamp in prepad*/
+	shhwtstamps = skb_hwtstamps(skb);
+	ns = timecounter_cyc2time(&priv->clock,
+		be64_to_cpu (*(unsigned long*)prepad));
+	acc_1588[node] = (be64_to_cpu (*(unsigned long*)prepad));
+	timecompare_update(&priv->compare, ns);
+	memset(shhwtstamps, 0, sizeof(*shhwtstamps));
+	shhwtstamps->hwtstamp = ns_to_ktime(ns);
+	shhwtstamps->syststamp = timecompare_transform(&priv->compare, ns);
+	skb_reserve(skb, PREPAD_LEN);
+#endif
+
+	skb->dev = pdev;
+	skb_put(skb, len);
+	skb->protocol = eth_type_trans(skb, pdev);
+
+	truesize = skb->truesize;
+	if(skb->protocol != htons(ETH_P_IP))
+		truesize = NLM_RX_JUMBO_BUF_SIZE + sizeof(struct sk_buff);
+
+#ifdef CONFIG_NLM_NET_OPTS
+	/* Pass the packet to Network stack */
+	last_rcvd_skb[CPU_INDEX(cpu)] = skb;
+	last_rcvd_skb_phys[CPU_INDEX(cpu)] = addr;
+	last_rcvd_len[CPU_INDEX(cpu)] = len;
+	last_rcvd_node[CPU_INDEX(cpu)] = node;
+#endif
+
+#ifdef CONFIG_INET_LRO
+	if ((skb->dev->features & NETIF_F_LRO) &&
+			(msg1 & RX_IP_CSUM_VALID) && (msg1 & RX_TCP_CSUM_VALID)) {
+
+		skb->ip_summed = CHECKSUM_UNNECESSARY;
+		lro_receive_skb(&priv->lro_mgr[cpu], skb, NULL);
+		if(!lro_flush_needed[cpu][priv->port]) {
+			lro_flush_priv[cpu][lro_flush_priv_cnt[cpu]] = priv;
+			lro_flush_needed[cpu][priv->port] = 1;
+			lro_flush_priv_cnt[cpu]++;
+			Message("Adding to lro flush queue cpu %d port %d\n",
+				cpu, priv->port);
+		}
+	} else
+#endif
+	{
+		netif_receive_skb(skb);
+	}
+
+	/* Update Stats */
+	receive_count[CPU_INDEX(cpu)]++;
+
+#ifdef CONFIG_NLM_NET_OPTS
+	if (last_rcvd_skb[CPU_INDEX(cpu)]) {
+		slow_replenish_count[CPU_INDEX(cpu)]++;
+		mac_refill_frin_one_buffer(pdev, cpu, truesize);
+		last_rcvd_skb[CPU_INDEX(cpu)] = NULL;
+		last_rcvd_len[CPU_INDEX(cpu)] = 0;
+	}
+#else
+	slow_replenish_count[CPU_INDEX(cpu)]++;
+	mac_refill_frin_one_buffer(pdev, cpu, truesize);
+#endif
+}
+
+/*
+ * NAE poll function on freeback only if rx and freeback vcs are different
+*/
+void xlp_poll_upper(int cpu)
+{
+	unsigned int status;
+	uint64_t msg0 = 0;
+	uint32_t src_id = 0, size, code;
+	unsigned long __attribute__ ((unused)) mflags;
+
+	/* In non-exlusivevc , this vc can be shared with some other moduels */
+	if ((nae_rx_vc == nae_fb_vc) || (!exclusive_vc))
+		return;
+	
+	while (1) {
+			msgrng_access_enable(mflags);
+			status = xlp_message_receive_1(nae_fb_vc, &src_id,
+					&size, &code, &msg0);
+			msgrng_access_disable(mflags);
+
+			if(status) break;
+			__sync();
+
+			/* check ieee-1588 timestamp */
+			if(msg0 & (0x200000000000000ULL))
+				return;				
+
+			Message("poll upper cpu %d src_id %d size %d\n",
+				cpu, src_id, size);
+			process_tx_complete(cpu, src_id, msg0);
+
+	}
+}
+
+/*
+ * NAE poll function on lower four buckets
+ */
+static int xlp_poll_lower(int budget, int cpu)
+{
+	int status;
+	uint64_t msg0 = 0, msg1 = 0;
+	int no_rx_pkt_rcvd = 0;
+	uint32_t src_id = 0, size = 0, code;
+	unsigned long __attribute__ ((unused)) mflags;
+
+	while (budget--) {
+		msgrng_access_enable(mflags);
+		status = xlp_message_receive_2(nae_rx_vc, &src_id, &size,
+				&code, &msg0, &msg1);
+		msgrng_access_disable(mflags);
+
+		if (status) {
+			if (enable_napi)
+				break;
+			continue;
+		}
+
+		no_rx_pkt_rcvd++;
+#ifdef ENABLE_SANITY_CHECKS
+		if ((size != 2) && (size != 1)) {
+			printk("Unexpected single entry packet\n");
+			continue;
+		}
+#endif
+		if (msg0 & (0x200000000000000ULL))
+			continue;
+		else if (size == 2)
+			process_rx_packets(cpu, src_id, msg0, msg1);
+		else if (size == 1)
+			process_tx_complete(cpu, src_id, msg0);
+		else {
+			printk("%s , Error invalid message, size %d\n",
+				__func__, size);
+			continue;
+		}	
+	}
+#ifdef CONFIG_INET_LRO
+	if (enable_lro)
+		napi_lro_flush(cpu);
+#endif
+	return no_rx_pkt_rcvd;
+}
+
+
+
+/**********************************************************************
+ * nlm_xlp_nae_msgring_handler -  message ring interrupt handler
+ * @vc-  virtual channel number
+ * @dev_id  -  this device
+ *
+ **********************************************************************/
+static void nlm_xlp_nae_msgring_handler(uint32_t vc, uint32_t src_id,
+					uint32_t size, uint32_t code,
+					uint64_t msg0, uint64_t msg1,
+					uint64_t msg2, uint64_t msg3, void* data)
+{
+	int cpu = hard_smp_processor_id();
+
+	if (vc == nae_rx_vc && size == 2)
+		 process_rx_packets(cpu, src_id, msg0, msg1);
+	else if (vc == nae_fb_vc && size == 1)
+		process_tx_complete(cpu, src_id, msg0);
+	else if (msg0 & (0x200000000000000ULL)){
+		return;
+	}
+	else {
+		printk("%s , Error invalid message, vc %d size %d\n",
+			__func__, vc, size);
+	}
+}
+
+/*
+ * Main NAE napi poll loop for exclusive vc handler
+ */
+
+static int xlp_nae_napi_poll(int vc, int budget)
+{
+	int rx_pkts = 0;
+	int cpu = hard_smp_processor_id();
+
+	Message("%s in vc %d budget %d\n", __func__, vc, budget);
+
+	xlp_poll_upper(cpu);
+	rx_pkts = xlp_poll_lower(budget, cpu);
+
+	return rx_pkts;
+}
+
+/*
+ * Main NAE  poll loop for kthread model
+ */
+static int xlp_nae_poll(void *buf)
+{
+	//unsigned int count=0;
+	int rx_pkts = 0;
+	int cpu = hard_smp_processor_id();
+	int budget = 96;
+
+	if (perf_mode == NLM_RT_MODE)
+		budget = 300000;
+
+	while (1) {
+
+		local_bh_disable();
+		xlp_poll_upper(cpu);
+		rx_pkts = xlp_poll_lower(budget, cpu);
+		local_bh_enable();
+
+
+		schedule();
+	}
+	return 0;
+}
+
+void nlm_spawn_kthread(void)
+{
+    unsigned int i = 0, nr_cpus;
+    char buf[20];
+    static struct task_struct *task[NR_CPUS];
+
+    nr_cpus = nlm_node_cfg.num_nodes * NLM_NCPUS_PER_NODE;	
+    /*Spawn kthread*/
+    for (i = 0; i < nr_cpus; i++) {
+	if (!cpu_isset(i, cpu_present_map))
+		continue;
+        sprintf(buf,"nae_task_%d",i);
+        task[i] = kthread_create(xlp_nae_poll, (void *)(long)i, (void *)&buf);
+        if (!task[i])
+            break;
+    }
+    if (i == nr_cpus) {
+        for (i = 0; i < nr_cpus; i++) {
+	    if (!cpu_isset(i, cpu_present_map))
+		    continue;
+            kthread_bind(task[i], i);
+            wake_up_process(task[i]);
+        }
+    }
+
+}
+
+
+/*
+ * Setup XLP NAPI subsystem
+ */
+extern int nlm_xlp_register_napi_vc_handler(int nae_rx_vc,
+	int (*napi_msgint_handler)(int, int));
+extern int nlm_xlp_register_napi_final_handler(int major,
+	void (*napi_final)(void *arg), void *arg);
+
+int nlm_xlp_enable_napi(void)
+{
+	if (exclusive_vc) {
+		printk("Registering exclusive napi vc handler\n");
+		nlm_xlp_register_napi_vc_handler(nae_rx_vc, xlp_nae_napi_poll);
+		nlm_xlp_register_napi_vc_handler(nae_fb_vc, xlp_nae_napi_poll);
+
+		return 0;
+	}
+
+	printk("Registering nae msgring handler\n");
+	if (register_xlp_msgring_handler(XLP_MSG_HANDLE_NAE_0,
+		nlm_xlp_nae_msgring_handler, NULL)) {
+		printk("Fatal error! Can't register msgring handler "
+		       "for XLP_MSG_HANDLE_NAE_0\n");
+		return -1;
+	}
+#ifdef CONFIG_INET_LRO
+	if (enable_lro) {
+		printk("Registering napi final handler\n");
+		nlm_xlp_register_napi_final_handler(XLP_MSG_HANDLE_NAE_0,
+			xlp_napi_lro_flush, NULL);
+	}
+#endif
+
+	return 0;
+}
+
+int nlm_xlp_disable_napi(void)
+{
+	int node, i, coff;
+	for (i = 0; i < NR_CPUS; i++) {
+		if (!cpu_isset(i, phys_cpu_present_map))
+			continue;
+		node = i / 32;
+		coff = i * NLM_MAX_VC_PER_THREAD;
+		nlm_hal_disable_vc_intr(node, (coff + nae_rx_vc) & 0x7f);
+		nlm_hal_disable_vc_intr(node, (coff + nae_fb_vc) & 0x7f);
+	}
+	return 0;
+}
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_sgmii.c b/drivers/net/ethernet/broadcom/nae/xlpge_sgmii.c
new file mode 100644
index 0000000..e7d11d4
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_sgmii.c
@@ -0,0 +1,118 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+#include <linux/mii.h>
+
+#include "xlpge.h"
+
+int xlp_enable_autoneg(struct net_device *dev, u32 adv)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	int mii_status;
+	u32 adv1, adv2;
+	unsigned long flags;
+
+	spin_lock_irqsave(&priv->lock, flags);
+	nlm_xlp_mac_set_enable(priv, 0);
+	/* advertising for 10/100 Mbps */
+	adv1 = nlm_xlp_mac_mii_read(priv, MII_ADVERTISE);
+	adv1 &= ~(ADVERTISE_ALL | ADVERTISE_100BASE4);
+	/* advertising for 1000 Mbps */
+	adv2 = nlm_xlp_mac_mii_read(priv, 0x9);
+	adv2 &= ~(0x300);
+
+	if (adv & ADVERTISED_10baseT_Half)
+		adv1 |= ADVERTISE_10HALF;
+	if (adv & ADVERTISED_10baseT_Full)
+		adv1 |= ADVERTISE_10FULL;
+	if (adv & ADVERTISED_100baseT_Full)
+		adv1 |= ADVERTISE_100FULL;
+	if (adv & ADVERTISED_100baseT_Half)
+		adv1 |= ADVERTISE_100HALF;
+
+	if (adv & ADVERTISED_1000baseT_Full)
+		adv2 |= 0x200;
+	if (adv & ADVERTISED_1000baseT_Half)
+		adv2 |= 0x100;
+
+	/* Set the advertising parameters */
+	nlm_xlp_mac_mii_write(priv, MII_ADVERTISE, adv1);
+	nlm_xlp_mac_mii_write(priv, 0x9, adv2);
+
+	priv->advertising = adv1 | adv2;
+
+	mii_status = nlm_xlp_mac_mii_read(priv, MII_BMCR);
+	/* enable autoneg and force restart autoneg */
+	mii_status |= (BMCR_ANENABLE | BMCR_ANRESTART);
+	nlm_xlp_mac_mii_write(priv, MII_BMCR, mii_status);
+
+	nlm_xlp_mac_set_enable(priv, 1);
+	spin_unlock_irqrestore(&priv->lock, flags);
+
+	return 0;
+}
+
+int xlp_set_link_speed(struct net_device *dev, int speed, int duplex)
+{
+	u32 adv;
+	int ret =0;
+
+	switch(speed) {
+	case SPEED_10:
+		if ( duplex == DUPLEX_FULL )
+			adv = ADVERTISED_10baseT_Full;
+		else
+			adv = ADVERTISED_10baseT_Half;
+		break;
+	case SPEED_100:
+		if ( duplex == DUPLEX_FULL )
+			adv = ADVERTISED_100baseT_Full;
+		else
+			adv = ADVERTISED_100baseT_Half;
+		break;
+	case SPEED_1000:
+		if ( duplex == DUPLEX_FULL )
+			adv = ADVERTISED_1000baseT_Full;
+		else
+			adv = ADVERTISED_1000baseT_Half;
+		break;
+	default:
+		ret = -EINVAL;
+		return ret;
+	}
+	ret = xlp_enable_autoneg( dev,adv);
+	return ret;
+
+}
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_tso.c b/drivers/net/ethernet/broadcom/nae/xlpge_tso.c
new file mode 100644
index 0000000..945bbc6
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_tso.c
@@ -0,0 +1,235 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+
+#include <asm/netlogic/msgring.h>
+#include <asm/netlogic/hal/nlm_hal_fmn.h>
+
+#include "xlpge.h"
+
+static __inline__ uint64_t nae_tso_desc0(
+		unsigned int type,
+		unsigned int subtype,
+		unsigned int opcode,
+		unsigned int l3hdroff,
+		unsigned int l4hdroff,
+		unsigned int l3chksumoff,
+		unsigned int pseudohdrchksum,
+		unsigned int l4chksumoff,
+		unsigned int pyldoff)
+{
+
+	return ((uint64_t)(type & 0x3) << 62) |
+		((uint64_t)(subtype & 3) << 60) |
+		((uint64_t)(opcode & 0xf) << 56) |
+		((uint64_t)(l3hdroff & 0x3f) << 43) |
+		((uint64_t)(l4hdroff & 0x7f) << 36) |
+		((uint64_t)(l3chksumoff & 0x1f) << 31) |
+		((uint64_t)(pseudohdrchksum & 0xffff) << 15) |
+		((uint64_t)(l4chksumoff & 0x7f) << 8) |
+		((uint64_t)(pyldoff & 0xff));
+}
+
+static __inline__ uint64_t nae_tso_desc1(
+		unsigned int type,
+		unsigned int subtype,
+		unsigned int poly,
+		unsigned int mss,
+		unsigned int crcstopoff,
+		unsigned int crcinsoff)
+{
+	return ((uint64_t)(type & 0x3) << 62) |
+		((uint64_t)(subtype & 3) << 60) |
+		((uint64_t)(poly & 0x3) << 48) |
+		((uint64_t)(mss & 0xffff) << 32) |
+		((uint64_t)(crcstopoff & 0xffff) << 16) |
+		((uint64_t)(crcinsoff & 0xffff));
+
+}
+
+inline int tso_xmit_skb(struct sk_buff *skb, struct net_device *dev)
+{
+	int mss  = 0, idx = 0, len, i ;
+	struct skb_shared_info *sp = skb_shinfo(skb);
+	struct iphdr *iph;
+	struct dev_data *priv = netdev_priv(dev);
+	uint64_t msg, mscmsg0 = 0, mscmsg1 = 0;
+	uint64_t *p2pdesc = NULL;
+	int cpu = hard_smp_processor_id();
+	int  ret, retry_cnt = 0, qid;
+	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
+	unsigned long __attribute__ ((unused)) mflags;
+#ifdef IEEE_1588_PTP_ENABLED
+	uint64_t msg1;
+	union skb_shared_tx *shtx;
+	int is_skbts = skb->sk && sock_flag(skb->sk,
+		SOCK_TIMESTAMPING_TX_HARDWARE);
+#endif
+
+	p2pdesc = alloc_p2p_desc_mem(cpu);
+	if (p2pdesc == NULL) {
+		goto out_unlock;
+	}
+
+	if (((mss = sp->gso_size) != 0) ||
+		(skb->ip_summed == CHECKSUM_PARTIAL)) {
+		u32 iphdroff, tcphdroff, pyldoff, pcsum, tcp_packet = 1;
+
+		if (skb_header_cloned(skb) &&
+			pskb_expand_head(skb, 0, 0, GFP_ATOMIC)) {
+			goto out_unlock;
+		}
+
+		iph = ip_hdr(skb);
+		iphdroff = (char *)iph - (char *)skb->data;
+		tcphdroff = iphdroff + ip_hdrlen(skb);
+		if (ip_hdr(skb)->protocol == 0x6) {
+			pyldoff = iphdroff + ip_hdrlen(skb) +
+				sizeof(struct tcphdr) + tcp_optlen(skb);
+			pcsum = pseuodo_chksum((uint16_t *)((char *)iph + 12),
+					0x6);
+			tcp_hdr(skb)->check = 0;
+		} else if (ip_hdr(skb)->protocol == 0x11) {
+			pyldoff = iphdroff + ip_hdrlen(skb) + sizeof(struct udphdr);
+			pcsum = pseuodo_chksum((uint16_t *)((char *)iph + 12),
+					0x11);
+			udp_hdr(skb)->check = 0;
+			tcp_packet = 0;
+		} else {
+			printk("Invalid packet in %s\n", __FUNCTION__);
+			goto out_unlock;
+		}
+
+		if(mss) {
+			iph->check = 0;
+			iph->tot_len = 0;
+			mscmsg0 = nae_tso_desc0(MSC, 1, TSO_IP_TCP_CHKSUM,
+				iphdroff, tcphdroff, (iphdroff + 10),
+				pcsum, tcphdroff + 16, pyldoff);
+			mscmsg1 = nae_tso_desc1(MSC, 2, 0, mss, 0, 0);
+		} else if(tcp_packet) {
+			mscmsg0 = nae_tso_desc0(MSC, 0, TCP_CHKSUM,
+				iphdroff, tcphdroff, (iphdroff + 10),
+				pcsum, tcphdroff + 16, pyldoff);
+		} else {
+			mscmsg0 = nae_tso_desc0(MSC, 0, UDP_CHKSUM,
+				iphdroff, tcphdroff, (iphdroff + 10),
+				pcsum, tcphdroff + 6, pyldoff);
+		}
+
+	}
+
+	if(((len = skb_headlen(skb)) != 0)) {
+#ifdef IEEE_1588_PTP_ENABLED	
+		if(!is_skbts)
+#endif
+		idx = create_p2p_desc(virt_to_bus((char *)skb->data), len,
+			p2pdesc, idx);
+	}
+
+	for (i = 0; i < sp->nr_frags; i++)  {
+		skb_frag_t *fp = &sp->frags[i];
+		idx = create_p2p_desc(virt_to_bus(((char *)
+				page_address(fp->page)) + fp->page_offset),
+				fp->size, p2pdesc, idx);
+	}
+
+
+	qid = nae_cfg->vfbtbl_sw_offset + (cpu % NLM_NCPUS_PER_NODE);
+#ifdef IEEE_1588_PTP_ENABLED
+	if (is_skbts) {
+                p2pdesc[P2P_SKB_OFF] = (uint64_t)skb;
+                msg = nae_tx_desc (P2D_NEOP, 0, qid, 0, virt_to_bus(p2pdesc));
+                msg1 = nae_tx_desc (P2D_EOP, 0, 126, len,
+				virt_to_bus((char *)skb->data));
+		shtx = skb_tx(skb);
+		shtx->in_progress = 1;
+	}else
+#endif
+	{
+		create_last_p2p_desc(p2pdesc, skb, idx);
+		msg = nae_tx_desc(P2P, 0, qid, idx, virt_to_bus(p2pdesc));
+	}
+	
+
+	__sync();
+
+retry_send:
+	msgrng_access_enable(mflags);
+	if(mss)
+		ret = nlm_hal_send_msg3(priv->nae_tx_qid, 0, mscmsg0,
+				mscmsg1, msg);
+	else if(skb->ip_summed == CHECKSUM_PARTIAL)
+		ret = nlm_hal_send_msg2(priv->nae_tx_qid, 0, mscmsg0, msg);
+#ifdef IEEE_1588_PTP_ENABLED	
+	else if(is_skbts){
+		ret = nlm_hal_send_msg2(priv->nae_tx_qid, 0, msg, msg1);	
+	} 
+#endif
+	else
+		ret = nlm_hal_send_msg1(priv->nae_tx_qid, 0, msg);
+	msgrng_access_disable(mflags);
+	if(ret)	{
+		xlp_poll_upper(cpu);
+		retry_cnt++;
+		if(retry_cnt >= 128) {
+			goto out_unlock;
+		}
+		goto retry_send;
+	}
+
+	dev->trans_start = jiffies;
+	priv->cpu_stats[cpu].tx_packets += idx;
+
+	return NETDEV_TX_OK;
+out_unlock:
+
+	dev_kfree_skb_any(skb);
+	if(p2pdesc)
+		free_p2p_desc_mem(cpu, p2pdesc);
+	return NETDEV_TX_OK;
+}
+
+int tso_enable(struct net_device *dev, u32 data)
+{
+	int rv;
+	rv = ethtool_op_set_tso(dev, data);
+	if(rv == 0)
+		rv = ethtool_op_set_tx_csum(dev, data);
+	if(rv == 0)
+		rv = ethtool_op_set_sg(dev, data);
+	dev->features |= NETIF_F_FRAGLIST | NETIF_F_HIGHDMA;
+	return rv;
+}
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_tx.c b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
new file mode 100644
index 0000000..f03d6c6
--- /dev/null
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
@@ -0,0 +1,215 @@
+/*-
+ * Copyright (c) 2003-2012 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * #BRCM_2# */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/inet_lro.h>
+#include <linux/clocksource.h>
+#include <linux/timecompare.h>
+#include <linux/kthread.h>
+
+#include <asm/netlogic/msgring.h>
+#include <asm/netlogic/hal/nlm_hal_fmn.h>
+
+#include "xlpge.h"
+
+uint64_t fast_replenish_count[NR_CPUS * 8] __cacheline_aligned;
+uint64_t slow_replenish_count[NR_CPUS * 8] __cacheline_aligned;
+uint64_t err_replenish_count[NR_CPUS * 8] __cacheline_aligned;
+
+extern uint64_t dummy_pktdata_addr[NLM_MAX_NODES];
+
+inline void process_tx_complete(int cpu, uint32_t src_id, uint64_t msg0)
+{
+	struct sk_buff* skb;
+#ifdef TSO_ENABLED
+	uint64_t *p2pfbdesc;
+#endif
+	uint64_t addr;
+	uint32_t context, port, node;
+
+	Message("%s cpu %d src_id %d\n", __FUNCTION__, cpu, src_id);
+
+	/* Process Transmit Complete, addr is the skb pointer */
+	addr = msg0 & 0xffffffffffULL;
+
+	/* context field is currently unused */
+	context = (msg0 >> 40) & 0x3fff;
+	node = (src_id >> 10) & 0x3;
+	port = *(cntx2port[node] + context);
+
+	if (addr == dummy_pktdata_addr[node]){
+		printk("Dropping firmware RX packet (addr=%llx)!\n", addr);
+		return;
+	}
+
+#ifdef TSO_ENABLED
+	if(nlm_mode[CPU_INDEX(cpu)] == NLM_TCP_MODE){
+		p2pfbdesc = bus_to_virt(addr);
+		skb = (struct sk_buff *)(ulong)(p2pfbdesc[P2P_SKB_OFF]);
+		free_p2p_desc_mem(cpu, p2pfbdesc);
+	} else
+#endif
+		skb = (struct sk_buff *)bus_to_virt(addr);
+
+	if(skb)
+	{
+#ifdef IEEE_1588_PTP_ENABLED	
+		if(skb->sk &&
+			sock_flag(skb->sk, SOCK_TIMESTAMPING_TX_HARDWARE))
+			nlm_1588_ptp_hwtstamp_tx(skb);
+#endif
+		
+		dev_kfree_skb_any(skb);
+	}
+	else {
+		printk("[%s]: [txc] Null skb? "
+		       " paddr = %llx (halting cpu!)\n", __func__, addr);
+		cpu_halt();
+	}
+}
+
+/**********************************************************************
+ * nlm_xlp_nae_start_xmit -  transmit a packet from buffer
+ * @dev  -  this is per device based function
+ * @skb  -  data buffer to send
+ **********************************************************************/
+int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	struct dev_data *priv = netdev_priv(dev);
+	int cpu = hard_smp_processor_id(), ret = 0;
+	uint64_t msg0, msg1;
+	int retry_count = 128;
+	volatile int hw_repl = 0;
+	int  offset, qid;
+	unsigned long __attribute__ ((unused)) mflags;
+#ifdef IEEE_1588_PTP_ENABLED	
+	union skb_shared_tx *shtx;
+#endif
+
+	nlm_nae_config_ptr nae_cfg = nlm_node_cfg.nae_cfg[priv->node];
+
+
+#ifdef ENABLE_SANITY_CHECKS
+	if (!skb) {
+		printk("[%s] skb is NULL\n",__FUNCTION__);
+		return -1;
+	}
+	if (skb->len == 0) {
+		printk("[%s] skb empty packet\n",__FUNCTION__);
+		return -1;
+	}
+#endif
+#ifdef TSO_ENABLED
+	if(nlm_mode[CPU_INDEX(cpu)] == NLM_TCP_MODE)
+		return tso_xmit_skb(skb, dev);
+#endif
+
+#ifdef CONFIG_NLM_NET_OPTS
+	if (skb->netl_skb && (last_rcvd_skb[CPU_INDEX(cpu)] == skb->netl_skb)
+		&& !skb_shared(skb)
+		&& (last_rcvd_len[CPU_INDEX(cpu)] == skb->len)
+		&& !skb_cloned(skb) && nae_cfg->vfbtbl_hw_nentries) {
+		last_rcvd_skb[CPU_INDEX(cpu)] = NULL;
+		last_rcvd_len[CPU_INDEX(cpu)] = 0;
+
+		qid = get_hw_frfifo_queue_id(last_rcvd_node[CPU_INDEX(cpu)],
+			nae_cfg, cpu, skb->truesize);
+		msg0 = nae_tx_desc(P2D_NEOP, 0, qid,
+				0, last_rcvd_skb_phys[CPU_INDEX(cpu)]);
+		hw_repl = 1;
+
+		Message("Tx, tx complete to nae, cpu %d len %d qid %d\n",
+			cpu, skb->len, qid);
+
+		fast_replenish_count[CPU_INDEX(cpu)]++;
+	}
+	else 
+#endif
+	{
+		qid = nae_cfg->vfbtbl_sw_offset + (cpu % NLM_NCPUS_PER_NODE);
+		msg0 = nae_tx_desc(P2D_NEOP, 0, qid, 0, virt_to_bus(skb));
+
+		Message("Tx, tx complete to cpu, cpu %d len %d qid %d\n",
+			cpu, skb->len, qid);
+	}
+	
+#ifdef IEEE_1588_PTP_ENABLED
+	if(skb->sk && sock_flag(skb->sk, SOCK_TIMESTAMPING_TX_HARDWARE)) {
+		msg1 = nae_tx_desc (P2D_EOP, 0, 126, skb->len,
+				virt_to_bus((char *)skb->data));
+		shtx = skb_tx(skb);
+		shtx->in_progress = 1;
+		
+	}
+	else
+#endif
+	{
+		msg1 = nae_tx_desc(P2D_EOP, 0, NULL_VFBID, skb->len,
+			       virt_to_bus(skb->data));
+	}
+	if(hw_repl) {
+		/* reset the skb for next rx */
+
+		//dst_release((struct dst_entry *)skb->_skb_dst);
+		skb_dst_drop(skb);
+
+		/* Reset all fields to 0, reset data pointers */
+		skb_reset_ptrs(skb);
+
+		offset = (((unsigned long)skb->data + CACHELINE_SIZE) &
+				~(CACHELINE_SIZE - 1));
+		skb_reserve(skb, (offset - (unsigned long)skb->data));
+
+		/*this buffer already has backptr...
+		mac_put_skb_back_ptr(skb); */
+		skb_reserve(skb, SKB_BACK_PTR_SIZE);
+	}
+
+
+retry_send:
+	msgrng_access_enable(mflags);
+	ret = nlm_hal_send_msg2(priv->nae_tx_qid, 0, msg0, msg1);
+	msgrng_access_disable(mflags);
+	if (ret)
+	{
+		xlp_poll_upper(cpu);
+		retry_count--;
+		if(retry_count){
+			goto retry_send;
+		}
+		dev_kfree_skb_any(skb);
+        }
+
+	dev->trans_start = jiffies;
+
+	return NETDEV_TX_OK;
+}
-- 
1.7.1

