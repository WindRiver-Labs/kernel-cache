From b40a826cfc5632756c5ff329de927d5d9ca755cf Mon Sep 17 00:00:00 2001
From: kopal <kopal@broadcom.com>
Date: Sat, 13 Dec 2014 18:57:47 +0530
Subject: nae: Added support for promiscuous mode

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
index ad2082a..e7ebbb0 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
@@ -63,6 +63,8 @@ extern int __netsoc_config_flow_control(net_port_t *netport, uint32_t enable);
 extern int __netsoc_flow_control_status(nae_t *nae, uint32_t port);
 extern int __netsoc_config_frame_size(net_port_t *netport, uint32_t size);
 extern void __netsoc_mac_enable(net_port_t *netport);
+extern void __netsoc_promisc_enable(net_port_t *netport);
+extern void __netsoc_promisc_disable(net_port_t *netport);
 extern void __netsoc_setup_hwaddr(net_port_t *netport, unsigned char *dev_addr);
 extern void __netsoc_mac_disable(net_port_t *netport);
 extern int __netsoc_reset_and_load_ucore(nae_t *nae, uint32_t ucore_mask, unsigned int *opcodes, uint32_t num_opcodes);
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
index c47fb58..0d8071d 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
@@ -534,6 +534,8 @@ extern void netsoc_get_port_stats(net_port_t *netport, dev_stat_t* dev_stat);
 extern int netsoc_port_stats_clear(net_port_t *netport);
 extern int netsoc_mac_disable(net_port_t *netport);
 extern int netsoc_mac_enable(net_port_t *netport);
+extern int netsoc_promisc_enable(net_port_t *netport);
+extern int netsoc_promisc_disable(net_port_t *netport);
 extern int netsoc_setup_hwaddr(net_port_t *netport, unsigned char *dev_addr);
 extern int netsoc_close_port(net_port_t *netport);
 extern net_port_t *netsoc_open_port(nae_t *nae, uint32_t port);
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
index c44d30d..c99e42d 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
@@ -400,6 +400,47 @@ int netsoc_mac_enable(net_port_t *netport)
 }
 
 /**
+* @brief netsoc_promisc_enable function is used to enable promiscuous mode
+* 
+* @param [in] netport pointer to net_port_t 
+*
+* @return
+*       - NETSOC_API_SUCCESS on success
+*       - < 0 on error
+* 
+* @ingroup hal_nae
+*
+*/
+int netsoc_promisc_enable(net_port_t *netport)
+{
+       if (netport == NULL)
+               return -NAE_PORT_INSTANCE_INVALID;
+       __netsoc_promisc_enable(netport);
+       return NETSOC_API_SUCCESS;
+}
+
+/**
+* @brief netsoc_promisc_disable function is used to disable promiscuous mode
+* 
+* @param [in] netport pointer to net_port_t 
+*
+* @return
+*       - NETSOC_API_SUCCESS on success
+*       - < 0 on error
+* 
+* @ingroup hal_nae
+*
+*/
+int netsoc_promisc_disable(net_port_t *netport)
+{
+       if (netport == NULL)
+               return -NAE_PORT_INSTANCE_INVALID;
+       __netsoc_promisc_disable(netport);
+       return NETSOC_API_SUCCESS;
+
+}
+
+/**
 * @brief netsoc_mac_disable function is used to disable mac
 * 
 * @param [in] netport pointer to net_port_t
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
index 0b459b5..41e10f5 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
@@ -3174,7 +3174,7 @@ void __netsoc_setup_hwaddr(net_port_t *netport, unsigned char *dev_addr)
 
 /**
 * @brief nlm_hal_mac_enable function is used to enable an interface at the MAC level.
-*
+* 
 * @param [in] block (Interface number)
 * @param [in] intf_type SGMII_IF, XAUI_IF, INTERLAKEN_IF
 *
@@ -3227,6 +3227,110 @@ void __netsoc_mac_enable(net_port_t *netport)
         }
 }
 
+/**
+* @brief netsoc_promisc_enable function is used to configure interface in promiscuous mode.
+*
+* @param [in] intf_type SGMII_IF, XAUI_IF/RXAUI/XFI, XLAUI
+*
+* @return
+* 	- none
+*
+* @ingroup hal_nae
+*
+*/
+
+void __netsoc_promisc_enable(net_port_t *netport)
+{
+	nae_t *nae = netport->nae;
+	uint64_t mac_base;
+	int reg_val=0i, val=0;
+       
+	switch(netport->iftype) {
+        		case SGMII_IF:
+                        	mac_base = netsoc_get_macreg_base_for_gmac(nae->mac_base, netport->hw_port_id);
+                        	
+				reg_val = netsoc_read_mac_reg(mac_base, NETIOR_VLANTYPE_FILTER);
+                        	reg_val &= ~(1<<17);
+                        	break;
+
+			case XAUI_IF:
+			case XFI_IF:
+			case RXAUI_IF:
+                                mac_base = __netsoc_get_xgmac_base(netport);
+                                
+				reg_val = netsoc_read_mac_reg(mac_base, NETIOR_VLANTYPE_FILTER);
+                                reg_val |= (1<<16);
+                                netsoc_write_mac_reg(mac_base, NETIOR_VLANTYPE_FILTER, reg_val);
+                                break;
+
+                        case XLAUI_IF:
+                                reg_val = __netsoc_read_xlgmac_reg(netport, XLAUI_COMMNAD_CONFIG);
+                                reg_val |= (1<<4);
+                                __netsoc_write_xlgmac_reg(netport, XLAUI_COMMNAD_CONFIG, reg_val);
+                                break;
+
+                        case INTERLAKEN_IF:
+                                break;
+
+       }
+
+}
+
+/**
+* @brief netsoc_promisc_disable function is used to configure interface in non promiscuous mode.
+*
+* @param [in] intf_type SGMII_IF, XAUI_IF/RXAUI/XFI, XLAUI
+*
+* @return
+* 	- none
+*
+* @ingroup hal_nae
+*
+*/
+
+void __netsoc_promisc_disable(net_port_t *netport)
+{
+        nae_t *nae = netport->nae;
+        uint64_t mac_base;
+	int reg_val=0;
+
+        switch(netport->iftype) {
+                        case SGMII_IF:
+                                mac_base = netsoc_get_macreg_base_for_gmac(nae->mac_base, netport->hw_port_id);
+
+                                netsoc_write_mac_reg(mac_base, MAC_ADDR0_MASK_LO, 0xffffffff);
+                                netsoc_write_mac_reg(mac_base, MAC_ADDR0_MASK_HI, 0xffff0000);
+                                netsoc_write_mac_reg(mac_base, MAC_FILTER_CONFIG, 0x1); 	/* MAC0 Valid */
+                                reg_val = netsoc_read_mac_reg(mac_base, NETIOR_VLANTYPE_FILTER);
+                                reg_val |= (1<<17);
+                                netsoc_write_mac_reg(mac_base, NETIOR_VLANTYPE_FILTER, reg_val);
+                                break;
+
+                        case XAUI_IF:
+                        case XFI_IF:
+                        case RXAUI_IF:
+                                mac_base = __netsoc_get_xgmac_base(netport);
+
+                                netsoc_write_mac_reg(mac_base, MAC_ADDR0_MASK_LO, 0xffffffff);
+                                netsoc_write_mac_reg(mac_base, MAC_ADDR0_MASK_HI, 0xffff0000);
+                                netsoc_write_mac_reg(mac_base, MAC_FILTER_CONFIG, 0x1); 	/* MAC0 Valid */
+                                reg_val = netsoc_read_mac_reg(mac_base, NETIOR_VLANTYPE_FILTER);
+                                reg_val &= ~(1<<16);
+                                netsoc_write_mac_reg(mac_base, NETIOR_VLANTYPE_FILTER, reg_val);
+				break;
+	
+			case XLAUI_IF:
+                                reg_val = __netsoc_read_xlgmac_reg(netport, XLAUI_COMMNAD_CONFIG);
+                                reg_val &= ~(1<<4);
+				__netsoc_write_xlgmac_reg(netport, XLAUI_COMMNAD_CONFIG, reg_val);
+				break;
+
+                        case INTERLAKEN_IF:
+                                break;
+
+        }
+
+}
 
 void __netsoc_modify_nae_ucore_sram_mem(nae_t *nae, unsigned int *data, uint32_t off, uint32_t words)
 {
-- 
1.7.1

