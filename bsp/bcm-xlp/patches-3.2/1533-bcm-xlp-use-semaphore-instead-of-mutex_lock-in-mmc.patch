From 17821abc240b7cb650ff5cf5f931abbfa34a5de5 Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Wed, 4 Mar 2015 13:44:06 +0800
Subject: bcm-xlp: use semaphore instead of mutex_lock in mmc

XLP mmc driver has a software workground patch ("sd/mmc: fix simultaneous transfer issue"),
in this patch xlp use mutex_lock in function "sdhci_request" and use mutex_unlock in
function "sdhci_tasklet_finish" and both will use "spin_lock_mutex" to protect resources.
The spin_lock_mutex will check if in interrupt context and the function "sdhci_tasklet_finish"
is a tasklet and in a softirq context. So will occur the CallTrace as below.Use the semphore
up() and down() can resolve this issue.

Modules linked in:
CPU: 1 PID: 380 Comm: irq/29-mmc0 Tainted: G        W    3.10.62-ltsi-WR6.0.0.0_cgl #1
Stack : ffffffffc0f34970 ffffffffc0f34910 ffffffffc02b70a0 0000000000000004
  0000000000000001 0000000000000000 ffffffffc0f30000 0000000000000001
  c0000007eec7f998 ffffffffc032e448 ffffffffc0f30000 0000000000000004
  c0000007eec7f9b8 ffffffffc02b70a0 0000000000000000 0000000000000000
  0000000000000000 ffffffffc1340000 ffffffffc133ca08 ffffffffc1340000
  ffffffffc0d52890 ffffffffc0f2df57 ffffffffc133ca08 c0000007eebc6940
  000000000000017c 0000000000000001 ffffffffc0bb8ae0 0000000000000001
  c0000007eec7fa38 c0000007eec7f948 c0000007eec7fa60 ffffffffc02b40d4
  c0000007eec7fa98 ffffffffc02b8ec8 c0000007eebc65a0 ffffffffc0d52890
  0000000000000001 ffffffffc0288398 0000000000000000 0000000000000000
  ...
Call Trace:
[<ffffffffc0288398>] show_stack+0xd8/0xf8
[<ffffffffc02b40d4>] warn_slowpath_common+0x8c/0xc8
[<ffffffffc02b415c>] warn_slowpath_fmt+0x4c/0x60
[<ffffffffc0b9a0c0>] __mutex_unlock_slowpath+0x1f0/0x220
[<ffffffffc09935d0>] sdhci_tasklet_finish+0xd8/0x198
[<ffffffffc02c18a0>] tasklet_action+0x130/0x208
[<ffffffffc02c01f0>] __do_softirq+0x168/0x500
[<ffffffffc02c0758>] do_softirq+0xf8/0x100
[<ffffffffc02c0a14>] local_bh_enable+0x154/0x160
[<ffffffffc0374b20>] irq_forced_thread_fn+0x68/0x90
[<ffffffffc0374f10>] irq_thread+0x168/0x1b0
[<ffffffffc02eddbc>] kthread+0xcc/0xd8
[<ffffffffc028250c>] ret_from_kernel_thread+0x14/0x1c

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index fefba27..8d8ff0f 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -1317,7 +1317,7 @@ static int sdhci_set_power(struct sdhci_host *host, unsigned short power)
  */
 
 #ifdef CONFIG_CPU_XLP
-static DEFINE_MUTEX(sdhci_cmd_inprogress);
+static DEFINE_SEMAPHORE(sdhci_cmd_inprogress);
 #endif
 
 static void sdhci_request(struct mmc_host *mmc, struct mmc_request *mrq)
@@ -1328,7 +1328,7 @@ static void sdhci_request(struct mmc_host *mmc, struct mmc_request *mrq)
 	u32 tuning_opcode;
 
 #ifdef CONFIG_CPU_XLP
-	mutex_lock(&sdhci_cmd_inprogress);
+	down(&sdhci_cmd_inprogress);
 #endif
 
 	host = mmc_priv(mmc);
@@ -2170,7 +2170,7 @@ static void sdhci_tasklet_finish(unsigned long param)
 	spin_unlock_irqrestore(&host->lock, flags);
 
 #ifdef CONFIG_CPU_XLP
-	mutex_unlock(&sdhci_cmd_inprogress);
+	up(&sdhci_cmd_inprogress);
 #endif
 
 	mmc_request_done(host->mmc, mrq);
-- 
1.7.1

