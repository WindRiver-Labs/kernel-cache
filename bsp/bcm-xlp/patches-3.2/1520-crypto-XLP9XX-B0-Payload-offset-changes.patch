From e15d30b228add453e43362513cd1be750602a847 Mon Sep 17 00:00:00 2001
From: Pranav Bhalerao <pranavb@broadcom.com>
Date: Wed, 1 Oct 2014 16:18:08 +0530
Subject: crypto: XLP9XX B0 Payload offset changes

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/crypto/sae/nlm_aead.c b/drivers/crypto/sae/nlm_aead.c
index 5cdc085..edfd7d8 100755
--- a/drivers/crypto/sae/nlm_aead.c
+++ b/drivers/crypto/sae/nlm_aead.c
@@ -556,18 +556,18 @@ static int aead_gcm_rfc4106_setkey( struct crypto_aead *tfm, const u8 *key,
 	initp->cipher.iv_mode = 0;
 	initp->cipher.key = (char *)key;
 	initp->cipher.key_len = keylen;
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		initp->cipher.key_len = cipher_keylen;
 	initp->cipher.cfb_mask = 0;
 	initp->cipher.flags = SAESOC_CF_ENCRYPT;
 	initp->hash.type = auth_alg;
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		initp->hash.type = SAESOC_HASH_TYPE_GHASH;
 	initp->hash.mode = SAESOC_HASH_MODE_GCM;
 	initp->hash.iv_offset = 0;
 	initp->hash.key = (char *)key;
 	initp->hash.key_len = keylen;
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		initp->hash.key_len = cipher_keylen;
 	initp->hash.mute_mask_sel = 0;
 	initp->hash.tag_len = 128 / 8;
@@ -577,14 +577,14 @@ static int aead_gcm_rfc4106_setkey( struct crypto_aead *tfm, const u8 *key,
 	initp->hash.addl_hash_len = 0;
 	initp->hash.flags = SAESOC_HF_HASH_L3_ALLOC;
 	initp->payload_offset = 16 + assoc_len;
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		initp->payload_offset = 16 + 16;
 	initp->flags = SAESOC_IF_DATA_OUT_L3_ALLOC;
 
 	nsdescs = saesoc_calc_sdesc_cnt(&ctx->initp,NULL);
 	s_desc = &ctx->enc_s_desc;
 
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2) {
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2) {
 		initp->hash.flags |= SAESOC_HF_TAGOUT_EOP |
 			SAESOC_HF_HASHINP_IS_CIPHEROUT;
 	}
@@ -596,7 +596,7 @@ static int aead_gcm_rfc4106_setkey( struct crypto_aead *tfm, const u8 *key,
 	initp->cipher.flags = 0;
 	initp->hash.flags = SAESOC_HF_HASH_L3_ALLOC | SAESOC_HF_HASHINP_IS_CIPHEROUT;
 
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		initp->hash.flags = SAESOC_HF_TAGOUT_EOP | SAESOC_HF_HASH_L3_ALLOC;
 
 	s_desc = &ctx->dec_s_desc;
@@ -672,7 +672,7 @@ static int aead_ccm_rfc4309_setkey(struct crypto_aead *tfm, const u8 *key,
 	initp->flags = SAESOC_IF_DATA_OUT_L3_ALLOC;
 	
 	initp->hash.aad_offset = 16; /* auth offset */
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2) {
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2) {
 		initp->hash.flags |= SAESOC_HF_TAGOUT_EOP;
 		initp->hash.aad_offset = 34; /* auth offset */
 	}
@@ -686,10 +686,10 @@ static int aead_ccm_rfc4309_setkey(struct crypto_aead *tfm, const u8 *key,
 	initp->cipher.flags = 0;
 
 	initp->hash.flags = SAESOC_HF_HASH_L3_ALLOC;
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		initp->hash.flags = SAESOC_HF_HASH_L3_ALLOC | SAESOC_HF_HASHINP_IS_CIPHEROUT;
 
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		initp->hash.flags |= SAESOC_HF_TAGOUT_EOP;
 
 	s_desc = &ctx->dec_s_desc;
@@ -1093,7 +1093,7 @@ static int aead_crypt_gcm(struct aead_request *req, unsigned int op)
 	fill_aead_aad(d_desc, req, req->assoclen,0,max_frags);
 
 	//frag for aad padding
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2) {
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2) {
 		int rem;
 		rem = req->assoclen % 16;
 		
@@ -1108,7 +1108,7 @@ static int aead_crypt_gcm(struct aead_request *req, unsigned int op)
 	//1. cipher padding to block size
 	//2. (aadlen + payloadlen = 16 bytes)
 	//3. hash output = 16 bytes.
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2) {
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2) {
 		rem = cipher_len % 16;
 		if (rem)
 			rem = 16 - rem;
@@ -1122,7 +1122,7 @@ static int aead_crypt_gcm(struct aead_request *req, unsigned int op)
 	async->args = (void *)&req->base; 
 	async->op  = op;
 	async->hash_addr = hash_addr;
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2) {
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2) {
 		if (op)
 			async->hash_addr = iv + 48 + rem;
 		else
@@ -1276,13 +1276,13 @@ static int aead_crypt_ccm(struct aead_request *req, unsigned int op)
 		saesoc_add_frags(d_desc,(auth_iv+38),cipher_extralen,(auth_iv+38),cipher_extralen);
 	}
 
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		saesoc_add_frags(d_desc,hash_addr,16,hash_addr,16);
 
 	/* add all those extra bytes for auth excluding assoc */
 	
         saesoc_set_aad_len(d_desc, req->assoclen + auth_iv_frag_len + extralen);
-        if (cryptosoc_ptype_gen == CRYPTOSOC_PTYPE_IS_GEN2)
+        if (cryptosoc_ptype_gen & CRYPTOSOC_PTYPE_IS_GEN2)
 		saesoc_set_aad_len(d_desc,req->assoclen);
 
 	saesoc_set_payload_len(d_desc,cipher_len);
diff --git a/drivers/crypto/sae/nlm_crypto.c b/drivers/crypto/sae/nlm_crypto.c
index 60c15bb..94855db 100644
--- a/drivers/crypto/sae/nlm_crypto.c
+++ b/drivers/crypto/sae/nlm_crypto.c
@@ -39,9 +39,12 @@ extern int cryptosoc_ptype_gen;
 int cryptosoc_lib_priv_init(struct cryptosoc_lib_params *params)
 {
 	if (is_nlm_xlp9xx() || is_nlm_xlp5xx())
-                cryptosoc_ptype_gen = CRYPTOSOC_PTYPE_IS_GEN2;
+                cryptosoc_ptype_gen |= CRYPTOSOC_PTYPE_IS_GEN2;
         else
-                cryptosoc_ptype_gen = CRYPTOSOC_PTYPE_IS_GEN1;
+                cryptosoc_ptype_gen |= CRYPTOSOC_PTYPE_IS_GEN1;
+
+        if (is_nlm_xlp9xx_bx())
+                cryptosoc_ptype_gen |= CRYPTOSOC_PTYPE_IS_GEN2_BX;
 
         if(is_nlm_xlp2xx())
                 params->saesoc_feature_set |= (
@@ -436,10 +439,13 @@ xlp_sae_init(void)
     printk(KERN_ERR ",\n XLP SAE/Crypto Initialization \n");
     printk("ipsec_sync_vc %d ipsec_async_vc %d\n",ipsec_sync_vc,ipsec_async_vc);
     if (is_nlm_xlp9xx() || is_nlm_xlp5xx())
-        cryptosoc_ptype_gen = CRYPTOSOC_PTYPE_IS_GEN2;
+        cryptosoc_ptype_gen |= CRYPTOSOC_PTYPE_IS_GEN2;
     else
-        cryptosoc_ptype_gen = CRYPTOSOC_PTYPE_IS_GEN1;
+        cryptosoc_ptype_gen |= CRYPTOSOC_PTYPE_IS_GEN1;
 
+    if (is_nlm_xlp9xx_bx())
+        cryptosoc_ptype_gen |= CRYPTOSOC_PTYPE_IS_GEN2_BX;
+ 
     xlp_sae_major = register_chrdev(0, "NLM_XLP_SAE", &xlp_sae_fops);
     if (xlp_sae_major < 0) {
 	printk(KERN_ERR "XLP_SAE - cannot register device\n");
-- 
1.7.1

