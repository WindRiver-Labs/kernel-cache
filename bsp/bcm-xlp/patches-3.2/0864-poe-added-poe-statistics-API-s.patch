From 974695e645a99e90f741008263b2a576fc67e193 Mon Sep 17 00:00:00 2001
From: Virendra Pathak <vpathak@broadcom.com>
Date: Sun, 1 Dec 2013 20:38:30 +0530
Subject: poe: added poe statistics API's

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
index 1ae5968..09baa0b 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_haliface.h
@@ -98,6 +98,8 @@ extern int __netsoc_config_nae_l2parser(nae_t *nae, l2_parser_config_t *l2);
 extern int __netsoc_config_nae_l3parser(nae_t *nae, l3_parser_config_t *l3_cfg, int entry);
 extern int __netsoc_config_nae_l4parser(nae_t *nae, l4_parser_config_t *l4_cfg, int entry);
 extern int __netsoc_alloc_poe_enq_storage(poe_t *poe);
+extern void __netsoc_enable_poe_stats(poe_t *poe);
+extern void __netsoc_print_poe_stats(poe_t *poe);
 extern unsigned char pma2p0_mem_sgmii_4page [256];
 extern unsigned char pma2p0_mem_sgmii [256];
 
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
index bea5df3..a71b886 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
@@ -582,4 +582,6 @@ extern int netsoc_enable_wred_perclass(nae_t *nae, uint32_t class_num, uint32_t
 extern int netsoc_disable_wred_perclass(nae_t *nae, uint32_t class_num);
 extern int netsoc_print_nae_config(nae_t *);
 extern int netsoc_alloc_poe_enq_storage(poe_t *poe);
+extern void netsoc_enable_poe_stats(poe_t *poe);
+extern void netsoc_print_poe_stats(poe_t *poe);
 #endif
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
index ddd6eb8..661d863 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
@@ -1276,6 +1276,17 @@ int netsoc_alloc_poe_enq_storage(poe_t *poe)
 {
 	return __netsoc_alloc_poe_enq_storage(poe);
 }	
+
+void netsoc_enable_poe_stats(poe_t *poe)
+{
+	__netsoc_enable_poe_stats(poe);
+}
+
+void netsoc_print_poe_stats(poe_t *poe)
+{
+	__netsoc_print_poe_stats(poe);
+}
+
 /**
 * @brief netsoc_config_poe_distvec function is used to configure POE distribution vector
 * 
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
index 9a430fe..e9e00d1 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
@@ -52,6 +52,8 @@ int __netsoc_alloc_poe_enq_storage(poe_t *poe)
 	uint64_t fbp_base_phys, msg_base_phys;
         uint64_t *fbp_base_virt, *msg_base_virt;
         uint32_t mbase_hi, mbase_lo, fbp_hi, fbp_lo, fbp_sp_init;
+
+	netsoc_api_print(NETSOC_APIDBG_GLOBAL,"%s \n", __func__);
         
         poe_pcie_base = poe->pcie_base; 
 
@@ -128,6 +130,45 @@ int __netsoc_alloc_poe_enq_storage(poe_t *poe)
 
 }
 
+void __netsoc_enable_poe_stats (poe_t * poe)
+{
+	uint64_t poe_pcie_base = 0;
+
+	poe_pcie_base = poe->pcie_base;
+
+	netsoc_api_print (NETSOC_APIDBG_GLOBAL, "%s Enabling Poe Stats Registers\n", __func__);
+	netsoc_write_poe_pcie_reg (poe_pcie_base, POE_STATISTICS_EN, 1 << 1);
+}
+
+void __netsoc_print_poe_stats(poe_t *poe)
+{
+	int i;
+	uint32_t c_size[MAX_POE_CLASS] = {0};
+	uint32_t oo_msg_cnt[2] = {0};
+	uint32_t io_msg_cnt[2] = {0};
+	uint64_t poe_pcie_base = 0;
+
+	poe_pcie_base = poe->pcie_base;
+
+	netsoc_api_print(NETSOC_APIDBG_GLOBAL,"%s \n", __func__);
+	
+	netsoc_api_print(NETSOC_APIDBG_GLOBAL,"Reading Enqueue Message Count\n");
+	for (i = 0; i < MAX_POE_CLASS; i++) {
+		c_size[i] = netsoc_read_poe_pcie_reg(poe_pcie_base, (0x98+i));
+		netsoc_api_print(NETSOC_APIDBG_GLOBAL,"class: %d, count: 0x%x\n", i, c_size[i]);
+	}
+
+	netsoc_api_print(NETSOC_APIDBG_GLOBAL,"Reading Out of Order Message Count\n");
+	oo_msg_cnt[0] = netsoc_read_poe_pcie_reg(poe_pcie_base, OO_MSG_CNT_LO);
+	oo_msg_cnt[1] = netsoc_read_poe_pcie_reg(poe_pcie_base, OO_MSG_CNT_HI);
+	netsoc_api_print(NETSOC_APIDBG_GLOBAL,"High: 0x%x   Low: 0x%x\n", oo_msg_cnt[1], oo_msg_cnt[0]);
+
+	netsoc_api_print(NETSOC_APIDBG_GLOBAL,"Reading In Order Message Count\n");
+        io_msg_cnt[0] = netsoc_read_poe_pcie_reg(poe_pcie_base, IN_ORDER_MSG_CNT_LO);
+        io_msg_cnt[1] = netsoc_read_poe_pcie_reg(poe_pcie_base, IN_ORDER_MSG_CNT_HI);
+        netsoc_api_print(NETSOC_APIDBG_GLOBAL,"High: 0x%x   Low: 0x%x\n", io_msg_cnt[1], io_msg_cnt[0]);
+}
+
 /**
 * @brief nlm_hal_init_poe_distvec function can be used to set the POE distribution vectors.
 *
-- 
1.7.1

