From 9028d34caa377342ddd3eaec63421e308ec6a51e Mon Sep 17 00:00:00 2001
From: Subhendu Sekhar Behera <sbehera@broadcom.com>
Date: Tue, 15 Jul 2014 16:38:11 +0530
Subject: nae: hw mac address: Fix MAC address assignment.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_board.c b/drivers/net/ethernet/broadcom/nae/xlpge_board.c
index bf5c3ee..47278e6 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_board.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_board.c
@@ -39,18 +39,18 @@
 #include "xlpge.h"
 
 extern struct eeprom_data * get_nlm_eeprom(void);
-unsigned char eth_hw_addr[NLM_MAX_NODES][MAX_GMAC_PORT][6];
 
-void gen_mac_address(void)
+void get_mac_address(char * const mac_addr)
 {
 	struct eeprom_data *nlm_eeprom=NULL;
-        unsigned char mac_base[6],temp,buf_write[2],buf0_read[2],buf1_read[2];
+        unsigned char temp,buf_write[2],buf0_read[2],buf1_read[2];
         int if_mac_set=0,mac0_set=0, mac1_set=0;
         int i,j;
+
         buf_write[0]= MAC_MAGIC_BYTE0;
         buf_write[1]= MAC_MAGIC_BYTE1;
 
-        memset(mac_base, '0', 6);
+        memset(mac_addr, '0', 6);
         nlm_eeprom = get_nlm_eeprom();
 
         eeprom_get_magic_bytes(nlm_eeprom,buf0_read,0);/* signature*/
@@ -59,29 +59,22 @@ void gen_mac_address(void)
         if((buf0_read[0]==buf_write[0]) && (buf0_read[1]==buf_write[1]))/*match the signature*/
         {
                 mac0_set=1;
-                eeprom_get_mac_addr(nlm_eeprom, mac_base,0);/* get the mac address*/
+                eeprom_get_mac_addr(nlm_eeprom, mac_addr,0);/* get the mac address*/
         }
         else if((buf1_read[0]==buf_write[0]) && (buf1_read[1]==buf_write[1]))
         {
                 mac1_set=1;
-                eeprom_get_mac_addr(nlm_eeprom, mac_base,1);/* get the mac address*/
+                eeprom_get_mac_addr(nlm_eeprom, mac_addr,1);/* get the mac address*/
         }
 
         for(temp=0;temp<6;temp++)
         {
-                if(mac_base[temp]!=0)
+                if(mac_addr[temp]!=0)
                 {
                         if_mac_set=1;
                 }
         }
         if( ((mac0_set | mac1_set) && if_mac_set) == 0){
-                random_ether_addr(mac_base);
-        }
-	for(i=0 ; i<NLM_MAX_NODES; i++){ /*poppulate the eth_hw_add array according to the get mac address*/
-                for(j=0;j<18;j++){
-                        memcpy(eth_hw_addr[i][j], mac_base, 6);
-                        mac_base[5] += 1;
-                }
+                random_ether_addr(mac_addr);
         }
-
 }
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_init.h b/drivers/net/ethernet/broadcom/nae/xlpge_init.h
index efc6d6d..852eea0 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_init.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_init.h
@@ -42,9 +42,9 @@ extern int nae_family_9xx;
 extern int get_num_cpus_per_node(void);
 extern int replenish_freein_fifos(void);
 extern int nlm_xlp_enable_napi(void);
-extern void gen_mac_address(void);
+extern void  get_mac_address(char * const);
 extern int xlpge_eeprom_init(void);
-extern int nlm_per_port_nae_init(nae_t* nae_cfg, int port, int maxnae);
+extern int nlm_per_port_nae_init(nae_t* nae_cfg, int port, int maxnae, char * const);
 extern int initialize_nae_per_node(nae_t * nae_cfg, uint32_t *phys_cpu_map,
                                 int mode, int *jumbo_enabled);
 
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index b8ec618..30734cc 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -1424,7 +1424,7 @@ static const struct net_device_ops nlm_xlp_nae_ops = {
 	.ndo_select_queue		= nlm_select_queue,
 };
 
-int nlm_per_port_nae_init(nae_t* nae_cfg, int port, int maxnae)
+int nlm_per_port_nae_init(nae_t* nae_cfg, int port, int maxnae, char * const mac_addr)
 {
 	struct net_device *dev;
 	struct dev_data *priv;
@@ -1454,7 +1454,8 @@ int nlm_per_port_nae_init(nae_t* nae_cfg, int port, int maxnae)
 	/* set ethtool_ops which is inside xlp_ethtool.c file*/
 	xlp_set_ethtool_ops(dev);
 
-	dev->dev_addr 	= eth_hw_addr[node][(nae_cfg->nae_id)*MAX_GMAC_PORT + port];
+	memcpy(priv->hwaddr, mac_addr, 6);
+	dev->dev_addr 	= priv->hwaddr;
 	priv->port	= port;
 	priv->hw_port_id = nae_cfg->ports[port].hw_port_id;
 
@@ -1533,6 +1534,7 @@ void nlm_xlp_nae_init(void)
 	struct proc_dir_entry *entry;
 	unsigned char *mode_str[3] = {"INVALID","TCP_PERF","ROUTE_PERF"};
 	nae_t* nae_cfg;
+	unsigned char hw_mac_addr[6];
 
 	nae_debug_level = (1 << nae_debug_level) - 1;
 
@@ -1563,11 +1565,10 @@ void nlm_xlp_nae_init(void)
 	if (perf_mode == NLM_TCP_MODE)
 		p2p_desc_mem_init();
 
-	gen_mac_address();
-
 	if (initialize_nae(phys_cpu_map, perf_mode, &enable_jumbo))
 		return;
 
+	get_mac_address(hw_mac_addr);
 	maxnae = get_num_nae_pernode();
 	for (node = 0; node < NLM_MAX_NODES; node++) {
 		int num_nae;
@@ -1575,8 +1576,10 @@ void nlm_xlp_nae_init(void)
 			nae_cfg = get_nae(node, num_nae);
 			if (nae_cfg == NULL)
 				continue;
-				for(i = 0; i < nae_cfg->num_ports; i++)
-					nlm_per_port_nae_init(nae_cfg, i, maxnae);
+			for(i = 0; i < nae_cfg->num_ports; i++) {
+				nlm_per_port_nae_init(nae_cfg, i, maxnae, hw_mac_addr);
+				hw_mac_addr[5]++;
+			}
 		}
 	}
 
-- 
1.7.1

