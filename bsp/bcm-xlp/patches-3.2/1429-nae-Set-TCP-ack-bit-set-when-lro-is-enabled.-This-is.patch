From ab1a2d689a4b20547e4b6593f9f3fdad5bd38eb0 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Wed, 9 Oct 2013 02:42:38 -0700
Subject: nae: Set TCP ack bit set when lro is enabled. This is a temporary workaround while testing rx tcp performance 9xx connected back to back with 8xx. This will avoid lro_flush for every packet received.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_lro.h b/drivers/net/ethernet/broadcom/nae/xlpge_lro.h
index 8a247e4..11e1651 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_lro.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_lro.h
@@ -49,6 +49,7 @@ extern struct dev_data *lro_flush_priv[NR_CPUS][20];
 static int lro_get_skb_hdr(struct sk_buff *skb, void **iphdr, void **tcph,
 			   uint64_t *hdr_flags, void *priv)
 {
+	struct tcphdr *tcp_h;
 	skb_reset_network_header(skb);
 	skb_set_transport_header(skb, ip_hdrlen(skb));
 
@@ -61,6 +62,13 @@ static int lro_get_skb_hdr(struct sk_buff *skb, void **iphdr, void **tcph,
 	*hdr_flags = LRO_IPV4 | LRO_TCP;
 	skb->ip_summed = CHECKSUM_UNNECESSARY;
 
+	/* set the ackbit */
+	tcp_h = tcp_hdr(skb);
+	//if (!tcp_h->cwr && !tcp_h->ece && !tcp_h->urg &&
+	  //  !tcp_h->rst && !tcp_h->syn && !tcp_h->fin)
+	if((((uint32_t *)tcp_h)[3] & (0xf7 << 16)) == 0)
+		tcp_h->ack = 1;
+
 	return 0;
 }
 
-- 
1.7.1

