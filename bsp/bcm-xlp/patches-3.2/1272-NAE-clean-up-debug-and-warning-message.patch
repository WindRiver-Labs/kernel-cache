From bbf55595477ba1d7330b8d8003c1f190bac8d994 Mon Sep 17 00:00:00 2001
From: henry shao <hshao@netlogicmicro.com>
Date: Wed, 30 Jun 2010 16:27:01 -0700
Subject: NAE: clean up debug and warning message

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/ucore_loader.c b/drivers/net/ethernet/broadcom/nae/ucore_loader.c
index 3c26d47..ade9b73 100644
--- a/drivers/net/ethernet/broadcom/nae/ucore_loader.c
+++ b/drivers/net/ethernet/broadcom/nae/ucore_loader.c
@@ -5,16 +5,11 @@
 #include "ucore_apps.c"
 
 ucore_array_info_t ucore_array_info[MAX_UCORE];
-#if 0
-void WRITE_NAE_UCODE(int ucore, uint32_t offset, uint32_t code) {
-	xlp_write_nae_ucode(ucore, offset, code);
-}
-#endif
+
 static __inline__ void ucore_load_app(int ucore, uint32_t **array, uint32_t array_size) {
 	int k = 0, j;
 	uint32_t offset, size, code;
 	uint32_t *p = *array;
-//printk("array: %x, point2array %x\n",array,p);
 	if ((ucore < 0) || (ucore >= MAX_UCORE) ||
 	    (p == NULL) || (array_size == 0)) {
 		return;
@@ -23,18 +18,14 @@ static __inline__ void ucore_load_app(int ucore, uint32_t **array, uint32_t arra
 	while (k < array_size) {
 		offset = p[k];
 		size   = p[k + 1];
-//	printk("k: %d offset %d size %d\n",k, offset, size);
 
 	if(size >= array_size||size==0){
 
-//		printk("array_size wrong\n");
 		return;
 	}
 		for (j = 0; j < size; ++j) {
 			code = p[k + 2 + j];
 			nlm_hal_write_ucode(ucore, offset, code);
-//			WRITE_NAE_UCODE(ucore, offset, code);
-//			 printk("writeUcode idx: %d ucore:%d offset:%d code: %x\n", (k+2+j),ucore,offset, code);
 			offset += 4;
 		}
 		k += (2 + size);
@@ -43,9 +34,8 @@ static __inline__ void ucore_load_app(int ucore, uint32_t **array, uint32_t arra
 
 int ucore_load_apps(uint32_t mask)
 {
-	int i=0,j=0,k=0,t, count = 0;
-	uint32_t *array, asize, offset, size, code;
-	printk("ucore_load_apps\n");
+	int i=0,t, count = 0;
+	uint32_t *array, asize;
 	asize  = ucore_array_info[i].array_size;
 	array = kmalloc(sizeof(uint32_t)*asize, GFP_KERNEL);
 	if(!array)
@@ -57,19 +47,16 @@ int ucore_load_apps(uint32_t mask)
 		if (!(mask & (1 << i))) {
 			continue;
 		}
-//		array = ucore_array_info[i].array;
 		asize  = ucore_array_info[i].array_size;
 
 		for(t = 0; t < asize; t++)
 		{
 			array[t] = ucore_array_info[i].array[t];
-//			printk("%x ",array[t]);
 		}
 
 		if ((array == NULL) || (asize == 0)) {
 			continue;
 		}
-//	printk("\n\nucore_load_app( %d, %x, %x, %d)\n", i, &array,array, asize);
 		ucore_load_app(i, &array, asize);
 		count++;
 	}
-- 
1.7.1

