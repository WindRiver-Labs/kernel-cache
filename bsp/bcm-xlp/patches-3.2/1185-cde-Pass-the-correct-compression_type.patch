From 0f0be1c26fadb16ee897a6875714bfd2ee7bcb46 Mon Sep 17 00:00:00 2001
From: Alok Agrawat <alok@broadcom.com>
Date: Thu, 19 Sep 2013 06:21:57 -0700
Subject: cde: Pass the correct compression_type.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.c b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
index 6fbda52..2710a9b 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.c
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
@@ -102,6 +102,7 @@ volatile char *(page_array_tmp_data_array[MAX_NUM_PAGES])__attribute__((aligned(
 static void dump_buffer(unsigned char *buf, unsigned int len, unsigned char *msg)
 {
 	int k = 0;
+
 	//printk("\n %s", msg);
 	for(k = 0; k < len; k++)
 	{
@@ -802,38 +803,38 @@ static int xlp_cde_mmap(struct file * filp, struct vm_area_struct * vma)
 	if (vma->vm_flags & VM_LOCKED) return -EPERM;
 
 	size = vma->vm_end - vma->vm_start;
-	printk("\n %s size = %d cde_mem_size = %d", __FUNCTION__, size, cde_mem_size);
+//	printk("\n %s size = %d cde_mem_size = %d", __FUNCTION__, size, cde_mem_size);
 	pgprot_val (vma->vm_page_prot) &= ~_CACHE_MASK;
 	pgprot_val (vma->vm_page_prot) |= _CACHE_CACHABLE_COW;
 
-	printk("\n %s  %d", __FUNCTION__, __LINE__);
+//	printk("\n %s  %d", __FUNCTION__, __LINE__);
 	cde_pfn_addr = ((uint64_t)cde_mem_start_1 >> PAGE_SHIFT);
 	result = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_1,
 			vma->vm_page_prot);
-	printk("\n %s  %d", __FUNCTION__, __LINE__);
+//	printk("\n %s  %d", __FUNCTION__, __LINE__);
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_1);
 
 	cde_pfn_addr = ((uint64_t)cde_mem_start_2 >> PAGE_SHIFT);
 	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_2,
 			vma->vm_page_prot);
-	printk("\n %s  %d", __FUNCTION__, __LINE__);
+//	printk("\n %s  %d", __FUNCTION__, __LINE__);
 
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_2);
 	cde_pfn_addr = ((uint64_t)cde_mem_start_3 >> PAGE_SHIFT);
 	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_3,
 			vma->vm_page_prot);
-	printk("\n %s  %d", __FUNCTION__, __LINE__);
+//	printk("\n %s  %d", __FUNCTION__, __LINE__);
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_3);
 	cde_pfn_addr = ((uint64_t)cde_mem_start_4 >> PAGE_SHIFT);
 	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_4,
 			vma->vm_page_prot);
-	printk("\n %s  %d", __FUNCTION__, __LINE__);
+//	printk("\n %s  %d", __FUNCTION__, __LINE__);
 
 	vma->vm_start = (unsigned long)((unsigned char*)(vma->vm_start) + cde_mem_size_4);
 	cde_pfn_addr = ((uint64_t)cde_mem_start_5 >> PAGE_SHIFT);
 	result_t = remap_pfn_range(vma, vma->vm_start, cde_pfn_addr, cde_mem_size_5,
 			vma->vm_page_prot);
-	printk("\n %s  %d", __FUNCTION__, __LINE__);
+//	printk("\n %s  %d", __FUNCTION__, __LINE__);
 	vma->vm_start = vm_start;
 	if (result) return -EAGAIN;
 
@@ -989,7 +990,11 @@ static long xlp_cde_ioctl(struct file *filp,
 	input_size = *(unsigned int*)(mem_start + sizeof(struct nlm_cde_op));
 	output_size = *(unsigned int*)(mem_start + sizeof(struct nlm_cde_op) + sizeof(unsigned int));
 
-	cde = (struct nlmcde*)arg;
+#ifdef CDE_DEBUG
+	printk("cde.compression_type = %d cde.sof = %d, cde.eof = %d\n",cde->compression_type, cde->sof, cde->eof);
+#endif
+	if(sanity_test)
+		cde = (struct nlmcde*)arg;
 
 	cmp_data->compression_type = cde->compression_type;
 	cmp_data->sof = cde->sof;
@@ -1121,7 +1126,7 @@ static int __init xlp_cde_init(void)
 		printk(KERN_ERR "XLP_CDE - cannot register device\n");
 		return xlp_cde_major;
 	}
-	printk (KERN_ERR ",XLP CDE MAJOR %d\n", xlp_cde_major);
+	printk (KERN_ERR ",XLP CDE MAJOR NUMBER %d\n", xlp_cde_major);
 #if 0
 	if(0){
 		dev_t dev = MKDEV(xlp_cde_major, 0);
-- 
1.7.1

