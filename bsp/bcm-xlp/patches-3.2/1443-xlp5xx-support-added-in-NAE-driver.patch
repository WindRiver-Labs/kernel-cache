From dbf7fbbdb49b33fe7b3315f35532ac8cdffc6a33 Mon Sep 17 00:00:00 2001
From: Vikas Gupta <vikas.gupta@broadcom.com>
Date: Tue, 11 Feb 2014 12:22:14 +0530
Subject: xlp5xx: support added in NAE driver.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index 6ff6b0c..428fbf2 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -498,7 +498,7 @@ static int initialize_nae_per_node(nae_t * nae_cfg, uint32_t *phys_cpu_map, int
 #endif
 	lnx_shinfo[0]->mode |= mode;
 	lnx_shinfo[0]->flags |= (*jumbo_enabled) ? NLM_NAE_LNX_SHINFO_FL_JUMBO_EN : 0;
-	if(is_nlm_xlp9xx()) {
+	if(IS_NLM_XLP9XX_FAMILY) {
 		lnx_shinfo[0]->flags |= NLM_NAE_LNX_SHINFO_FL_VER_1 | NLM_NAE_LNX_SHINFO_FL_ALE_BYPASS;
 	}
 	if (nae_cfg->owned) {
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
index 7ce9628..68866a5 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
@@ -83,7 +83,7 @@ inline void process_tx_complete(int cpu, uint32_t src_id, uint64_t msg0)
         /* Process Transmit Complete, addr is the skb pointer */
         addr = msg0 & 0xffffffffffULL;
 
-	if((is_nlm_xlp3xx() || is_nlm_xlp2xx() ||is_nlm_xlp9xx())){ 
+	if((is_nlm_xlp3xx() || is_nlm_xlp2xx() ||IS_NLM_XLP9XX_FAMILY)){ 
         	context = (msg0 >> 40) & 0x3f;
 	}
 	else{
@@ -615,7 +615,7 @@ static int inline valid_buffer_lifo(int cpu, uint64_t msg1, uint32_t src_id)
 		int node = (src_id >> 10) & 0x3;
 		uint64_t addr = msg1 & 0xffffffffc0ULL;
 
-		if(is_nlm_xlp9xx()){
+		if(IS_NLM_XLP9XX_FAMILY){
 				nae = get_nae(node, nae_id);
 				if(!(nae->freein_fifo_dom_mask & (1<<lifo))){
 						nae_print(NAE_DBG_ERROR, "Error Packet: Cpu %d, msg1 %#lx, lifo %d, Owner fifo mask %#lx\n", 
@@ -647,7 +647,7 @@ static inline void process_rx_packets(void *arg, int cpu, unsigned int src_id,
 	uint32_t msec_port;
 	struct napi_struct *napi = (struct napi_struct *)arg;
 
-	if(is_nlm_xlp9xx()){
+	if(IS_NLM_XLP9XX_FAMILY){
 		msg1 = msg2;	
 	}
 	err = (msg1 >> 4) & 0x1;
@@ -659,7 +659,7 @@ static inline void process_rx_packets(void *arg, int cpu, unsigned int src_id,
 		return;
 
 	len	= (msg1 >> 40) & 0x3fff;
-	if((is_nlm_xlp3xx() || is_nlm_xlp2xx() ||is_nlm_xlp9xx())){ 
+	if((is_nlm_xlp3xx() || is_nlm_xlp2xx() ||IS_NLM_XLP9XX_FAMILY)){ 
 		context = (msg1 >> 54) & 0x3f;
 	}else{
 		context = (msg1 >> 54) & 0x3ff;
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_tso.h b/drivers/net/ethernet/broadcom/nae/xlpge_tso.h
index 8a9bdcf..c3d2028 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_tso.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_tso.h
@@ -356,7 +356,7 @@ static int tso_enable(struct net_device *dev, u32 data)
 	dev->hw_features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_TSO;
 	dev->features |= dev->hw_features;
 	dev->features |= NETIF_F_HIGHDMA;
-	if(!(is_nlm_xlp2xx_b0() || is_nlm_xlp9xx())) {
+	if(!(is_nlm_xlp2xx_b0() || IS_NLM_XLP9XX_FAMILY)) {
 		/* If force tso is not set, enable gso in that case */
 		if(!force_tso) {
 			nae_print(NAE_DBG_TRACE, "Disabling TSO & Enabling GSO \n");
-- 
1.7.1

