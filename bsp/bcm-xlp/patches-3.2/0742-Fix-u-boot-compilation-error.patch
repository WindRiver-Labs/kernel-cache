From 21b0b7bc4398096764901421e4002bbed8d8db48 Mon Sep 17 00:00:00 2001
From: P. Sadik <psadik@broadcom.com>
Date: Wed, 10 Jul 2013 15:35:00 +0530
Subject: Fix: u-boot compilation error.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/syslib/include/nlm_hal.h b/arch/mips/netlogic/lib/syslib/include/nlm_hal.h
index 2ee58f8..7509de6 100644
--- a/arch/mips/netlogic/lib/syslib/include/nlm_hal.h
+++ b/arch/mips/netlogic/lib/syslib/include/nlm_hal.h
@@ -6,7 +6,7 @@
  * This software is available to you under a choice of one of two
  * licenses.  You may choose to be licensed under the terms of the GNU
  * General Public License (GPL) Version 2, available from the file
- * http://www.gnu.org/licenses/gpl-2.0.txt  
+ * http://www.gnu.org/licenses/gpl-2.0.txt
  * or the Broadcom license below:
 
  * Redistribution and use in source and binary forms, with or without
@@ -37,7 +37,7 @@
 #ifndef _NLM_HAL_H_
 #define _NLM_HAL_H_
 
-#ifndef NLM_HAL_LINUX_KERNEL
+#if !defined(NLM_HAL_LINUX_KERNEL) && !defined(NLM_HAL_UBOOT)
 #include "types.h"
 #endif
 
@@ -231,8 +231,8 @@ inline static u32 xlp9xx_get_node_id(void)
 inline static volatile u32* xlp9xx_cpu_io_mmio(int node, u32 offset)
 {
 	volatile u32 * pcmu = NULL;
-	uint32_t busno;	
-        if(node <0 ) 
+	uint32_t busno;
+        if(node <0 )
 		node = xlp9xx_get_node_id();
 
         pcmu = (volatile u32*)(DEFAULT_CPU_IO_BASE + ( (node&0x7) << 12) );
@@ -248,11 +248,11 @@ inline static volatile u32* xlp9xx_cpu_mem_base(u32 node, u32 offset)
 {
 	uint64_t phy;
 	volatile u32* mmio = xlp9xx_cpu_io_mmio(node, offset);
-	
+
 	mmio -= HDR_OFFSET/sizeof(u32);
 	phy = mmio[4] ;
-	
-	if( phy&1 ) 
+
+	if( phy&1 )
 		phy &= ~((u64)3);	//io bar
 	else{
 		//64bits physical address
@@ -277,9 +277,9 @@ static inline uint64_t __get_nae_soc_phys_base(int node, int nae_id)
 			return 0;
 		else{
 			uint64_t mask = ~0xf;
-			uint64_t pcie_cfg = 0x18000000 + XLP_PCIE_DEV_BASE(node, XLP_NAE);	
-			return (mask & nlm_hal_read_32bit_reg(pcie_cfg,PCI_MEM_BAR_0));	
-		}	
+			uint64_t pcie_cfg = 0x18000000 + XLP_PCIE_DEV_BASE(node, XLP_NAE);
+			return (mask & nlm_hal_read_32bit_reg(pcie_cfg,PCI_MEM_BAR_0));
+		}
 	}
 }
 
-- 
1.7.1

