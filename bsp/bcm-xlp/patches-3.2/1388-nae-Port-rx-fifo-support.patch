From 1bebde2cf3774bc9ac522ea08a511e9d1406000a Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Wed, 2 Jan 2013 18:13:55 +0530
Subject: nae: Port rx fifo support

Changed the number of descriptors allocated when
port fifo is enabled
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/xlpge.h b/drivers/net/ethernet/broadcom/nae/xlpge.h
index d5c27ee..cc16373 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge.h
+++ b/drivers/net/ethernet/broadcom/nae/xlpge.h
@@ -412,16 +412,17 @@ static __inline__ void print_fmn_send_error(const char *str,
 static __inline__ void dump_buffer(unsigned char *buf, uint32_t len,
 				   unsigned char *msg)
 {
-	int k;
+	int k, olen = 0;
+	char out[512];
 
 	printk("\n%s\n", msg);
 
 	for (k = 0; k < len; k++) {
-		printk("%.2x ", buf[k]);
+		olen += snprintf(&out[olen], 512 - olen, "<%.2x> ", buf[k]);
 		if ((k + 1) % 16 == 0)
-			printk("\n");
+			olen += snprintf(&out[olen], 512 - olen, "\n");
 	}
-	printk("\n");
+	printk("%s\n", out);
 }
 
 void nlm_xlp_nae_init(void);
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
index dbab08e..25d079f 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_nae.c
@@ -61,8 +61,12 @@ int enable_napi = 1;
 int nlm_prepad_len = 0;
 int perf_mode= NLM_TCP_MODE;
 module_param(perf_mode, int, 0);
+/* Descriptors for each normal fifo. For xaui ports, if port fifo mode 
+   is enabled, this will be multiplied by 4 (3 fifos are unused) */
 int num_descs_per_normalq = 64;
 module_param(num_descs_per_normalq, int, 0);
+/* Descriptors for each jumbo fifo. For xaui ports, if port fifo mode 
+   is enabled, this will be multiplied by 4 (3 fifos are unused) */
 int num_descs_per_jumboq = 32;
 module_param(num_descs_per_jumboq, int, 0);
 
@@ -556,12 +560,18 @@ int replenish_freein_fifos(void)
 	int node, i, rv;
 	nlm_nae_config_ptr nae_cfg;
 	int max_descs_pqueue, num_descs;
+	unsigned int blk_cmplx_map, cmplx;
+	unsigned int ndescs_nq, ndescs_jq;
 
 	for (node = 0; node < NLM_MAX_NODES; node++) {
 		nae_cfg = nlm_node_cfg.nae_cfg[node];
 		if (nae_cfg == NULL)
 			continue;
 
+		/* Xaui/rxaui/interlaken uses only one fifo per complex */
+		blk_cmplx_map = nae_cfg->xaui_complex_map |  nae_cfg->rxaui_complex_map |
+			nae_cfg->ilk_complex_map;
+
 		/* configure the descs */
 		for (i = 0; i < nae_cfg->frin_total_queue; i++) {
 			/* if no onchip space. when port fifo is enabled, 
@@ -573,23 +583,33 @@ int replenish_freein_fifos(void)
 				nae_cfg->freein_fifo_onchip_num_descs[i] +
 					nae_cfg->freein_fifo_spill_num_descs;
 
+			ndescs_nq = num_descs_per_normalq;
+			ndescs_jq = num_descs_per_jumboq;
 			/* if jumbo enabled and port fifo is enabled, all the fifos
 			 will be filled with jumbo packets as the ucore cannot select
 			 the fifos */
-			if(lnx_jumbo_mask[node] && nae_cfg->port_fifo_en) {
-				lnx_jumbo_mask[node] |= lnx_normal_mask[node];
-				lnx_normal_mask[node] = 0;
+			if(nae_cfg->port_fifo_en) {
+				if(lnx_jumbo_mask[node]) {
+					lnx_jumbo_mask[node] |= lnx_normal_mask[node];
+					lnx_normal_mask[node] = 0;
+				}
+
+				cmplx = i / MAX_PORTS_PERBLOCK;
+				if((1 << cmplx) & blk_cmplx_map) {
+					ndescs_nq = num_descs_per_normalq * MAX_PORTS_PERBLOCK;
+					ndescs_jq = num_descs_per_jumboq * MAX_PORTS_PERBLOCK;
+				}
 			}
 
 			if ((1 << i) & lnx_normal_mask[node])
-				num_descs = (num_descs_per_normalq <=
+				num_descs = (ndescs_nq <=
 					max_descs_pqueue) ?
-					num_descs_per_normalq :
+					ndescs_nq :
 					max_descs_pqueue;
 			else if ((1 << i) & lnx_jumbo_mask[node])
-				num_descs = (num_descs_per_jumboq <=
+				num_descs = (ndescs_jq <=
 					max_descs_pqueue) ?
-					num_descs_per_jumboq :
+					ndescs_jq :
 					max_descs_pqueue;
 			else
 				continue;
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
index 346ad37..a233426 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_rx.c
@@ -695,6 +695,7 @@ static inline void process_rx_packets(int cpu, unsigned int src_id,
 	last_rcvd_skb_phys[CPU_INDEX(cpu)] = addr;
 	last_rcvd_len[CPU_INDEX(cpu)] = len;
 	last_rcvd_node[CPU_INDEX(cpu)] = node;
+	last_rcvd_priv[CPU_INDEX(cpu)] = priv;
 #endif
 
 #ifdef CONFIG_INET_LRO
diff --git a/drivers/net/ethernet/broadcom/nae/xlpge_tx.c b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
index 8a49647..55a74aa 100644
--- a/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
+++ b/drivers/net/ethernet/broadcom/nae/xlpge_tx.c
@@ -83,11 +83,12 @@ int nlm_xlp_nae_start_xmit(struct sk_buff *skb, struct net_device *dev)
 		&& !skb_shared(skb)
 		&& (last_rcvd_len[CPU_INDEX(cpu)] == skb->len)
 		&& !skb_cloned(skb) && nae_cfg->vfbtbl_hw_nentries) {
+		struct dev_data *rpriv = (struct dev_data *)last_rcvd_priv[CPU_INDEX(cpu)];
 		last_rcvd_skb[CPU_INDEX(cpu)] = NULL;
 		last_rcvd_len[CPU_INDEX(cpu)] = 0;
 
 		qid = get_hw_frfifo_queue_id(last_rcvd_node[CPU_INDEX(cpu)],
-			nae_cfg, cpu, skb->truesize, priv->hw_port_id);
+			nae_cfg, cpu, skb->truesize, rpriv->hw_port_id);
 		msg0 = nae_tx_desc(P2D_NEOP, 0, qid,
 				0, last_rcvd_skb_phys[CPU_INDEX(cpu)]);
 		hw_repl = 1;
-- 
1.7.1

