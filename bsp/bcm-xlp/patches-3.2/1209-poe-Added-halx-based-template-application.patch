From e1edacf456ff00187c0fe038e5714852d4ed5a70 Mon Sep 17 00:00:00 2001
From: Prasanna Mumabi <prasanna.mumbai@broadcom.com>
Date: Tue, 4 Mar 2014 00:06:03 -0800
Subject: poe: Added halx based template application

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/misc/netlogic/halx_netio/halx_netio_iface.h b/drivers/misc/netlogic/halx_netio/halx_netio_iface.h
index fa4fa1f..0dad715 100644
--- a/drivers/misc/netlogic/halx_netio/halx_netio_iface.h
+++ b/drivers/misc/netlogic/halx_netio/halx_netio_iface.h
@@ -44,5 +44,6 @@
 #define HALX_CMD_PKT_ENGINE		_IOWR(NETIF_IOC, 7, unsigned long long)
 #define HALX_CMD_PKT_PARSER		_IOWR(NETIF_IOC, 8, unsigned long long)
 #define HALX_CMD_MSG_INIT		_IOWR(NETIF_IOC, 9, unsigned long long) 
+#define HALX_CMD_POE_ENQ_STORAGE        _IOWR(NETIF_IOC, 11, unsigned long long)
 
 #endif
diff --git a/drivers/misc/netlogic/halx_netio/halx_netio_main.c b/drivers/misc/netlogic/halx_netio/halx_netio_main.c
index 9afa15b..a084557 100644
--- a/drivers/misc/netlogic/halx_netio/halx_netio_main.c
+++ b/drivers/misc/netlogic/halx_netio/halx_netio_main.c
@@ -338,6 +338,67 @@ static long halx_netio_ioctl(struct file *filp, unsigned int cmd, unsigned long
 		kfree(ctx_dom_data);
 		break;
 	}
+	case HALX_CMD_POE_ENQ_STORAGE:
+	{
+		uint64_t ret = 0;
+		unsigned long phy_ctx_dom_data = 0;
+
+		halx_alloc_poe_enq_storage_t *ctx_dom_data = (halx_conf_parser_t *)kmalloc(sizeof(halx_alloc_poe_enq_storage_t), GFP_KERNEL);
+		if (ctx_dom_data == NULL) {
+			printk(KERN_ERR "halx_netio: kmalloc returning NULL in HALX_CMD_POE_ENQ_STORAGE\n");
+			return -1;
+		}
+		retval = copy_from_user(ctx_dom_data, (halx_alloc_poe_enq_storage_t *)arg, sizeof(halx_alloc_poe_enq_storage_t));
+		if (retval) {
+			printk(KERN_ERR "%s %d: %d bytes not copied from userspace\n", __func__, __LINE__, retval);
+		}
+		phy_ctx_dom_data = virt_to_phys(ctx_dom_data);
+#ifdef HALX_NETIO_DEBUG
+                printk("halx_netio: HALX_CMD_POE_ENQ_STORAGE phy_ctx_dom_data : 0x%lx\n", phy_ctx_dom_data);
+#endif
+
+		if (do_hypcall_p2r1(KVM_HC_HALX_NETSOC, phy_ctx_dom_data, CMD_HALX_CMD_POE_ENQ_STORAGE, &ret)) {
+			printk(KERN_ERR "halx_netio: failure to HALX_CMD_POE_ENQ_STORAGE\n");
+			rc = -1;
+		} else {
+			retval = copy_to_user((halx_alloc_poe_enq_storage_t *)arg, ctx_dom_data, sizeof(halx_alloc_poe_enq_storage_t));
+ 			if (retval) {
+                                printk("halx_netio: halif %d bytes not copied to user space \n",retval);
+                        }
+		}
+		break;
+	}
+	case HALX_CMD_MSG_INIT:
+	{
+		uint64_t ret = 0;
+		unsigned long phy_ctx_dom_data = 0;
+		halx_domain_t *ctx_dom_data = (halx_domain_t *)kmalloc(sizeof(halx_domain_t), GFP_KERNEL);
+
+		if (ctx_dom_data == NULL) {
+			printk(KERN_ERR "halx_netio: kmalloc returning NULL in HALX_CMD_REGISTER\n");
+			return -1;
+		}
+
+		retval = copy_from_user(ctx_dom_data, (halx_domain_t *)arg, sizeof(halx_domain_t));
+		if (retval) {
+			printk(KERN_ERR "%s %d: %d bytes not copied from userspace\n", __func__, __LINE__, retval);
+		}
+		phy_ctx_dom_data = virt_to_phys(ctx_dom_data);
+#ifdef HALX_NETIO_DEBUG
+		printk("halx_netio: HALX_CMD_REGISTER phy_ctx_dom_data: 0x%lx\n", phy_ctx_dom_data);
+#endif
+
+		if (do_hypcall_p2r1(KVM_HC_HALX_NETSOC, phy_ctx_dom_data, CMD_HALX_MSG_INIT, &ret)) {
+			printk(KERN_ERR "halx_netio: failure to register halx\n");
+			rc = -1;
+		} else {
+			retval = copy_to_user((halx_domain_t *)arg, ctx_dom_data, sizeof(halx_domain_t));
+			if (retval) {
+				printk("halx_netio: halif %d bytes not copied to user space \n",retval);
+			}
+		}
+		break;
+	}
 	default:
 		rc = -1;
 		break;
-- 
1.7.1

