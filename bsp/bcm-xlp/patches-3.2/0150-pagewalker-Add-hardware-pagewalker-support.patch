From 69e9fc760847bc0b07ded0dcefd7476942a36bba Mon Sep 17 00:00:00 2001
From: Jayachandran C <jchandra@broadcom.com>
Date: Sat, 15 Feb 2014 21:19:30 +0530
Subject: pagewalker: Add hardware pagewalker support

Cleaned up version of earlier code
 - move code to pagewalker.c
 - minimize changes to mmu_context.h and setup.c
 - set NR_SEGMENTS to 2 in 64 bit
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/include/asm/mmu_context.h b/arch/mips/include/asm/mmu_context.h
index e277bba..c646959 100644
--- a/arch/mips/include/asm/mmu_context.h
+++ b/arch/mips/include/asm/mmu_context.h
@@ -24,10 +24,19 @@
 #endif /* SMTC */
 #include <asm-generic/mm_hooks.h>
 
+#ifdef CONFIG_CPU_XLP
+extern void setup_hwp_user_pgd(unsigned long pgd);
+extern void plat_pgwalker_init(void);
+#else
+static inline void setup_hwp_user_pgd(unsigned long pgd) {}
+static inline void plat_pgwalker_init(void) {}
+#endif
+
 #define TLBMISS_HANDLER_SETUP_PGD(pgd)					\
 do {									\
 	extern void tlbmiss_handler_setup_pgd(unsigned long);		\
 	tlbmiss_handler_setup_pgd((unsigned long)(pgd));		\
+	setup_hwp_user_pgd((unsigned long)pgd);				\
 } while (0)
 
 #ifdef CONFIG_MIPS_PGD_C0_CONTEXT
diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index c27187e..2bcba80 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -1750,6 +1750,8 @@ void __cpuinit per_cpu_trap_init(bool is_boot_cpu)
 	BUG_ON(current->mm);
 	enter_lazy_tlb(&init_mm, current);
 
+	plat_pgwalker_init();
+
 #ifdef CONFIG_MIPS_MT_SMTC
 	if (bootTC) {
 #endif /* CONFIG_MIPS_MT_SMTC */
diff --git a/arch/mips/netlogic/xlp/Makefile b/arch/mips/netlogic/xlp/Makefile
index 97d1af2..12b355e 100644
--- a/arch/mips/netlogic/xlp/Makefile
+++ b/arch/mips/netlogic/xlp/Makefile
@@ -1,5 +1,6 @@
 obj-y				+= setup.o nlm_hal.o dt.o c-xlp.o
 obj-y				+= cpld.o
+obj-y				+= pgwalker.o
 obj-$(CONFIG_SMP)		+= wakeup.o
 obj-$(subst m,y,$(CONFIG_USB))	+= usb-init.o
 obj-$(subst m,y,$(CONFIG_USB))	+= usb-init-xlp2.o
diff --git a/arch/mips/netlogic/xlp/pgwalker.c b/arch/mips/netlogic/xlp/pgwalker.c
new file mode 100644
index 0000000..fc49bda
--- /dev/null
+++ b/arch/mips/netlogic/xlp/pgwalker.c
@@ -0,0 +1,176 @@
+/*
+ * Copyright (c) 2003-2014 Broadcom Corporation
+ * All Rights Reserved
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the Broadcom
+ * license below:
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <linux/kernel.h>
+#include <linux/export.h>
+
+#include <asm/time.h>
+#include <asm/pgtable.h>
+#include <asm/asm-offsets.h>
+
+#include <asm/netlogic/haldefs.h>
+#include <asm/netlogic/common.h>
+#include <asm/netlogic/mips-extns.h>
+
+#include <asm/netlogic/xlp-hal/cpucontrol.h>
+#include <asm/netlogic/xlp-hal/iomap.h>
+#include <asm/netlogic/xlp-hal/xlp.h>
+
+/* Hardware Pagewalker related configuration parameters */
+#define USER_SEG	0
+#define KERNEL_SEG	1
+#define NR_SEGMENTS	2  /* MUST be a power of 2 */
+
+enum {
+	/* offset, width pair */
+	PWFIELD_BD_O  = 32, PWFIELD_BD_W  = 6,
+	PWFIELD_GD_O  = 24, PWFIELD_GD_W  = 6,
+	PWFIELD_UD_O  = 18, PWFIELD_UD_W  = 6,
+	PWFIELD_MD_O  = 12, PWFIELD_MD_W  = 6,
+	PWFIELD_PT_O  =  6, PWFIELD_PT_W  = 6,
+	PWFIELD_PTE_O =  0, PWFIELD_PTE_W = 6,
+
+	PWSIZE_BD_O  = 32, PWSIZE_BD_W  = 6,
+	PWSIZE_PS_O  = 30, PWSIZE_PS_W  = 1,
+	PWSIZE_GD_O  = 24, PWSIZE_GD_W  = 6,
+	PWSIZE_UD_O  = 18, PWSIZE_UD_W  = 6,
+	PWSIZE_MD_O  = 12, PWSIZE_MD_W  = 6,
+	PWSIZE_PT_O  =  6, PWSIZE_PT_W  = 6,
+	PWSIZE_PTE_O =  0, PWSIZE_PTE_W = 6,
+
+	PWCTL_PW_EN_O = 31, PWCTL_PW_EN_W = 1,
+	PWCTL_PW_EN_HUGETLB = 6,
+	PWCTL_PW_HUGEVLD_PSN = 0,
+};
+
+DEFINE_PER_CPU(unsigned long [NR_SEGMENTS], pgd_bases);
+static int enable_pgwalker;
+static int __init enable_pgwalker_cmdline(char *str)
+{
+	enable_pgwalker = 1;
+	return 1;
+}
+__setup("enable_pgwalker", enable_pgwalker_cmdline);
+
+static inline void setup_hwp_pgd(int seg, unsigned long pgd)
+{
+	get_cpu_var(pgd_bases)[seg] = pgd;
+	put_cpu_var(pgd_bases);
+}
+
+void setup_hwp_user_pgd(unsigned long pgd)
+{
+	setup_hwp_pgd(USER_SEG, pgd);
+}
+
+void plat_pgwalker_init(void)
+{
+	int i = 0;
+	uint64_t pwbase_val = 0, pwfield_val = 0, pwsize_val = 0, bd_shift = 0;
+	uint32_t pwctl_val = 0;
+
+	if (enable_pgwalker == 0) {
+		/* If the kernel is root, also disable nested page table walk. */
+		if (cpu_is_xlp9xx())
+			nlm_mtcr(MMU_SETUP, nlm_mfcr(MMU_SETUP) | ((0x1 << 5)));
+
+		return;
+	}
+	if (!cpu_is_xlpii()) {
+		printk("Hardware page walker is not supported for XLP8XX/XLP3XX\n");
+		return;
+	}
+#ifdef CONFIG_HUGETLB_PAGE
+	else if (!cpu_is_xlp9xx()) {
+		printk("Hardware page walker is not supported for XLP2XX HugeTLB Page\n");
+		return;
+	}
+#endif
+
+	/* Initialize pgd bases to default values */
+	for (i = 0; i < NR_SEGMENTS; i++)
+		setup_hwp_pgd(i, (unsigned long)swapper_pg_dir);
+
+	pwbase_val = (uint64_t)(long)&(__get_cpu_var(pgd_bases)[0]);
+
+	/* enable page walker */
+	pwctl_val |= ((uint32_t)1) << PWCTL_PW_EN_O;
+
+#ifdef CONFIG_HUGETLB_PAGE
+	pwctl_val |= ((uint32_t)1) << PWCTL_PW_EN_HUGETLB;
+	pwctl_val |= _PAGE_HUGE_SHIFT << PWCTL_PW_HUGEVLD_PSN;
+#endif
+
+	/* page table selector */
+#ifdef CONFIG_64BIT
+	bd_shift = 63;
+#else
+	bd_shift = _PGDIR_SHIFT + ffs(_PTRS_PER_PGD) - 1;
+#endif
+	pwfield_val |= bd_shift << PWFIELD_BD_O;
+	pwsize_val |= ((uint64_t)(ffs(NR_SEGMENTS) - 1)) << PWSIZE_BD_O;
+
+	/* global directory */
+	pwfield_val |= ((uint64_t)(_PGDIR_SHIFT)) << PWFIELD_GD_O;
+	pwsize_val |= ((uint64_t)(ffs(_PTRS_PER_PGD) - 1)) << PWSIZE_GD_O;
+
+	/* upper directory (was initialized to 0) */
+
+#ifndef __PAGETABLE_PMD_FOLDED
+	/* middle directory */
+	pwfield_val |= ((uint64_t)_PMD_SHIFT) << PWFIELD_MD_O;
+	pwsize_val |= ((uint64_t)(ffs(_PTRS_PER_PMD) - 1)) << PWSIZE_MD_O;
+#endif
+	/* page table index */
+	pwfield_val |= ((uint64_t)PAGE_SHIFT) << PWFIELD_PT_O;
+	pwsize_val |= ((uint64_t)(ffs(_PTRS_PER_PTE) - 1)) << PWSIZE_PT_O;
+
+#ifdef CONFIG_64BIT
+	pwsize_val |= ((uint64_t)1) << PWSIZE_PS_O;
+#else
+	/* PWSIZE_PS field was initialized to 0 */
+#endif
+
+	/* logical right rotate of PTE loaded from memory */
+	pwfield_val |= ((uint64_t)_PAGE_GLOBAL_SHIFT) << PWFIELD_PTE_O;
+	/* PWSIZE_PTE field was initialized to 0 (page table entry spacing) */
+
+	/* write registers*/
+	__write_64bit_c0_register($5, 5, pwbase_val);
+	__write_64bit_c0_register($5, 6, pwfield_val);
+	__write_64bit_c0_register($5, 7, pwsize_val);
+	__write_32bit_c0_register($6, 6, pwctl_val);
+
+	printk("Initialized Page Walker on cpu@%d\n", hard_smp_processor_id());
+}
diff --git a/arch/mips/netlogic/xlp/setup.c b/arch/mips/netlogic/xlp/setup.c
index 1af74d5..856310e 100644
--- a/arch/mips/netlogic/xlp/setup.c
+++ b/arch/mips/netlogic/xlp/setup.c
@@ -41,9 +41,11 @@
 #include <asm/bootinfo.h>
 
 #include <asm/netlogic/haldefs.h>
+#include <asm/netlogic/mips-extns.h>
 #include <asm/netlogic/common.h>
 
 #include <asm/netlogic/xlp-hal/iomap.h>
+#include <asm/netlogic/xlp-hal/cpucontrol.h>
 #include <asm/netlogic/xlp-hal/xlp.h>
 #include <asm/netlogic/xlp-hal/sys.h>
 
@@ -151,6 +153,11 @@ void xlp_mmu_init(void)
 		/* XLPII series has extended pagesize in config 4 */
 		conf4 = read_c0_config4() & ~0x1f00u;
 		write_c0_config4(conf4 | ((PAGE_SHIFT - 10) / 2 << 8));
+
+		/* XLP9xx Errata : turn off hardware page walker cache */
+		if (cpu_is_xlp9xx())
+			nlm_mtcr(MMU_SETUP, nlm_mfcr(MMU_SETUP) | ((0x1 << 14)));
+
 	} else {
 		/* enable extended TLB and Large Fixed TLB */
 		write_c0_config6(read_c0_config6() | 0x24);
-- 
1.7.1

