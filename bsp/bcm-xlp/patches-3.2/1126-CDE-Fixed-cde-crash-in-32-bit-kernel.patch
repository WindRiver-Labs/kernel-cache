From 18eec8fcb6a2dacaf561034340e182606d7ce44a Mon Sep 17 00:00:00 2001
From: Alok Agrawat <alok@broadcom.com>
Date: Tue, 9 Oct 2012 07:06:39 -0700
Subject: CDE: Fixed cde crash in 32 bit kernel.

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.c b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
index 0857042..9ea6bee 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.c
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.c
@@ -101,7 +101,7 @@ static void *
 get_cache_aligned_mem(size_t size)
 {
     void *addr, **tmp;
-    unsigned long loc;
+    uint64_t loc;
     addr = malloc(size + L3_CACHELINE_SIZE * 2);
 
     if (addr == NULL) {
@@ -109,7 +109,7 @@ get_cache_aligned_mem(size_t size)
 		"\n Malloc failed for cache aligned memory allocation");
 	return NULL;    //NLM_ERR_NO_MEM;
     }
-    loc = (unsigned long) addr;
+    loc = (uint64_t) addr;
     loc = (loc + L3_CACHELINE_SIZE - 1) & ~L3_CACHELINE_MASK;
 
     tmp = (void **) loc;
@@ -126,15 +126,15 @@ get_cache_aligned_mem(size_t size)
 static void
 free_cache_aligned_mem(void *addr)
 {
-    unsigned long loc;
+    uint64_t loc;
 
-    loc = (unsigned long) addr;
+    loc = (uint64_t) addr;
 
     loc -= 64;
 
     addr = (void *) loc;
 
-    addr = (void *) *(unsigned long *) addr;
+    addr = (void *) *(uint64_t*) addr;
 
     free(addr);
 }
@@ -187,11 +187,15 @@ static int config_cmp(void)
 static int send_message(int stid, struct msgrng_msg *msg)
 {
   int ret = 0;
+  unsigned long __attribute__ ((unused)) mflags;
 
 #ifdef CDE_DEBUG
 	printk("send_message = stid = %x msg = %llx\n",stid, msg->msg0);
 #endif
+  msgrng_access_enable(mflags);
   nlm_hal_cde_send_request(stid, msg->msg0);
+  msgrng_access_disable(mflags);
+
   return ret;
 }
 
@@ -208,11 +212,11 @@ static int send_free_desc(void)
     if (!page_array[i].data_array)	  
 	page_array[i].data_array = get_cache_aligned_mem(FD_CMP_PAGE_SIZE);
     if (!page_array[i].data_array)	{
-	    printk("cacheline_aligned_kmalloc returmed error\n");
+	    printk("cacheline_aligned_kmalloc returmed error desc_num = %d\n", i);
 	    return -1;
     }
 
-    stid = nlm_hal_cde_make_fd_msg((uint64_t*)&fd_msg.msg0, (unsigned long)virt_to_phys(page_array[i].data_array));
+    stid = nlm_hal_cde_make_fd_msg((uint64_t*)&fd_msg.msg0, (uint64_t)virt_to_phys(page_array[i].data_array));
 #ifdef CDE_DEBUG
     	printk("Free descriptor message [%0d] = 0x%016llx\n", i, fd_msg.msg0);
 #endif
@@ -279,7 +283,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
     restore = (start_of_file == 0);//((num_messages > 1) & (cur_blk != 0));
     length = SCRATCH_SIZE ;
     cmp_data->src_desc[desc_idx] =
-      cpu_to_be64(nlm_hal_cde_make_data_desc(0, 0, 0, 0, 0, restore, 0, length, (unsigned long)virt_to_phys(cmp_data->scratch_inf)));
+      cpu_to_be64(nlm_hal_cde_make_data_desc(0, 0, 0, 0, 0, restore, 0, length, (uint64_t)virt_to_phys(cmp_data->scratch_inf)));
 #ifdef CDE_DEBUG
       printk("scratch=0x%p, v2p=0x%lx, scratch_desc = 0x%016llx &scratch_desc=0x%p\n", 
 	     cmp_data->scratch_inf, virt_to_phys(cmp_data->scratch_inf), cmp_data->src_desc[desc_idx], &(cmp_data->src_desc[0])); 
@@ -299,7 +303,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
 	length = ((cmp_data->src_size - start)> CMP_PAGE_SIZE)?CMP_PAGE_SIZE:(cmp_data->src_size - start); //dliao: assume div == 1
 
 	cmp_data->src_desc[cur_desc] =
-	  cpu_to_be64(nlm_hal_cde_make_data_desc(eof, type, sod, sob, save, restore, eob, length, (unsigned long)virt_to_phys(cmp_data->src + start)));
+	  cpu_to_be64(nlm_hal_cde_make_data_desc(eof, type, sod, sob, save, restore, eob, length, (uint64_t)virt_to_phys(cmp_data->src + start)));
 //printk("data_desc_1 = %llx\n",cmp_data->src_desc[cur_desc]);
 
 #ifdef CDE_DEBUG
@@ -319,7 +323,7 @@ int create_inf_message(cmp_data_t *cmp_data, int type, int start_of_file, int en
     }
 
     stid = nlm_hal_cde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0, 0, cmp_data->op, rtn_bkt,
-			cur_desc, (unsigned long)virt_to_phys(cmp_data->src_desc + desc_idx));
+			cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
 #ifdef CDE_DEBUG
       printk("[%s@%d]: desc_idx=%d, &(src_desc[0])=0x%p, v2p=0x%lx, i=%d, cmp_msg.msg0 = 0x%016llx\n", __FUNCTION__, __LINE__, desc_idx, cmp_data->src_desc+0, virt_to_phys(cmp_data->src_desc+0),i, cmp_msg[i].msg0); 
 #endif
@@ -371,7 +375,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
     length = SCRATCH_SIZE ;
 
     cmp_data->src_desc[desc_idx] =
-      cpu_to_be64(nlm_hal_cde_make_data_desc(0, 0, 0, 0, 0, restore, 0, length, (unsigned long)virt_to_phys(cmp_data->scratch)));
+      cpu_to_be64(nlm_hal_cde_make_data_desc(0, 0, 0, 0, 0, restore, 0, length, (uint64_t)virt_to_phys(cmp_data->scratch)));
 
 #ifdef CDE_DEBUG
       printk("scratch=0x%p, v2p=0x%lx, scratch_desc = 0x%016llx &scratch_desc=0x%p\n", 
@@ -392,11 +396,11 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
 
 	length = ((cmp_data->src_size - start)> CMP_PAGE_SIZE)?CMP_PAGE_SIZE:(cmp_data->src_size - start); //dliao: assume div == 1
 	cmp_data->src_desc[cur_desc] =
-	  cpu_to_be64(nlm_hal_cde_make_data_desc(eof, type, sod, sob, save, restore, eob, length, (unsigned long)virt_to_phys(cmp_data->src + start)));
+	  cpu_to_be64(nlm_hal_cde_make_data_desc(eof, type, sod, sob, save, restore, eob, length, (uint64_t)virt_to_phys(cmp_data->src + start)));
 
 	if (type == CDE_DYNAMIC) {//for dynamic duplicate desc and set type to 3
 		save = ( (eob == 1) & (eof == 0)) ;
-		cmp_data->src_desc[cur_desc+num_desc] = cpu_to_be64(nlm_hal_cde_make_data_desc ( eof, 3, 1/*sod*/, sob, save, 0, eob, length, (unsigned long)virt_to_phys(cmp_data->src + start)));
+		cmp_data->src_desc[cur_desc+num_desc] = cpu_to_be64(nlm_hal_cde_make_data_desc ( eof, 3, 1/*sod*/, sob, save, 0, eob, length, (uint64_t)virt_to_phys(cmp_data->src + start)));
 #ifdef CDE_DEBUG
 	  printf("cur_desc = %0d, i = %0d, j = %0d, k = %0d, src_desc[%0d] = 0x%016llx \n", 
 		cur_desc, i, j, k, cur_desc+num_desc, (long long unsigned int)cmp_data->src_desc[cur_desc+num_desc]);
@@ -423,7 +427,7 @@ int create_message(cmp_data_t *cmp_data, int type, int start_of_file, int end_of
     }
 
     stid = nlm_hal_cde_make_cmp_msg((uint64_t*)&cmp_msg[i].msg0, 0, cmp_data->op, rtn_bkt,
-			cur_desc, (unsigned long)virt_to_phys(cmp_data->src_desc + desc_idx));
+			cur_desc, (uint64_t)virt_to_phys(cmp_data->src_desc + desc_idx));
 #ifdef CDE_DEBUG
     printk("[%s@%d]: desc_idx=%d, &(src_desc[0])=0x%p, v2p=0x%lx, i=%d, cmp_msg.msg0 = 0x%016llx\n",
 	 __FUNCTION__, __LINE__, desc_idx, cmp_data->src_desc+0, virt_to_phys(cmp_data->src_desc+0),i, cmp_msg[i].msg0); 
diff --git a/drivers/misc/netlogic/nlm_cde/nlm_cde.h b/drivers/misc/netlogic/nlm_cde/nlm_cde.h
index b9b4055..a60d582 100644
--- a/drivers/misc/netlogic/nlm_cde/nlm_cde.h
+++ b/drivers/misc/netlogic/nlm_cde/nlm_cde.h
@@ -50,8 +50,8 @@ THE POSSIBILITY OF SUCH DAMAGE.
 
 #define RTN_BKT 1
 #define FD_BURST_SIZE 1
-#define NUM_FREE_DESCRIPTORS 2048 //must be less or equal to MAX_NUM_PAGES
-#define MAX_NUM_PAGES 2048
+#define NUM_FREE_DESCRIPTORS 256 //must be less or equal to MAX_NUM_PAGES
+#define MAX_NUM_PAGES 256
 #define MAX_BUFFER_SIZE (1024*2048)
 #define MAX_INPUT_BUFFER_SIZE (1024*64)
 #define CMP_PAGE_SIZE   (2*1024)
-- 
1.7.1

