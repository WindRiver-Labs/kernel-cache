From 50f7aba2c0123d6cb77b547488f378cdbd619707 Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Thu, 6 Feb 2014 18:17:15 +0530
Subject: cryptodrv : Using rcu instead of lock in page free

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/misc/netlogic/nlmcrypto/cryptodrv.c b/drivers/misc/netlogic/nlmcrypto/cryptodrv.c
index e3911db..a49fc99 100644
--- a/drivers/misc/netlogic/nlmcrypto/cryptodrv.c
+++ b/drivers/misc/netlogic/nlmcrypto/cryptodrv.c
@@ -95,7 +95,7 @@ static inline struct cryptosoc_rsp *get_rsp_from_index(unsigned int index, int f
 	struct page *page;
 	int page_idx;
 	struct cryptosoc_rsp *rsp = NULL;
-	unsigned long flags;
+//	unsigned long flags;
 
 	page_idx = GET_PAGE_INDEX(index);
 
@@ -105,7 +105,8 @@ static inline struct cryptosoc_rsp *get_rsp_from_index(unsigned int index, int f
 	Message("%s in, index %d pidx %d page %lx\n", __FUNCTION__,
 			index, page_idx, (unsigned long)page_address(page_ptr[page_idx]));
 
-	spin_lock_irqsave(&plock, flags);
+//	spin_lock_irqsave(&plock, flags);
+	rcu_read_lock();
 	if((page = page_ptr[page_idx])) {
 		index = index % num_rsp_descs_per_page;
 		rsp = (struct cryptosoc_rsp *)((unsigned long)page_address(page) + 
@@ -114,7 +115,8 @@ static inline struct cryptosoc_rsp *get_rsp_from_index(unsigned int index, int f
 		if(from_intr) 
 			atomic_inc(&rsp->used_by_intr);
 	}
-	spin_unlock_irqrestore(&plock, flags);
+	//spin_unlock_irqrestore(&plock, flags);
+	rcu_read_unlock();
 	return rsp;
 }
 
@@ -326,6 +328,15 @@ check_again:
 	spin_unlock_irqrestore(&plock, flags);
 
 	if(page) {
+		barrier();
+		/* interrupt handler does not take the lock. This rcu make sure the interrupt handler
+		*  does not use this page while the deletion is going on */
+		synchronize_rcu();
+recheck:
+		if(atomic_read(&rsp->used_by_intr)) {
+			schedule_timeout(1);
+			goto recheck;
+		}
 		free_pages((unsigned long)page_address(page), rsp_desc_page_order); 
 		DBG_NALLOCS_DEC(&nallocs);
 	}
-- 
1.7.1

