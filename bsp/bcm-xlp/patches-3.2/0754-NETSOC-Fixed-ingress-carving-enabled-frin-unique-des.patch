From 19122bf7debd88036abb535701abc44b2425158b Mon Sep 17 00:00:00 2001
From: Jayanthi A <jayanthi.annadurai@broadcom.com>
Date: Mon, 22 Jul 2013 17:34:55 -0700
Subject: NETSOC: Fixed ingress carving, enabled frin unique desc size by default

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/netlib/include/export_sym.h b/arch/mips/netlogic/lib/netlib/include/export_sym.h
index ce00a55..acfe777 100644
--- a/arch/mips/netlogic/lib/netlib/include/export_sym.h
+++ b/arch/mips/netlogic/lib/netlib/include/export_sym.h
@@ -52,7 +52,7 @@ EXPORT_SYMBOL(get_poe);
 EXPORT_SYMBOL(get_num_poe_pernode);
 EXPORT_SYMBOL(get_netsoc_features);
 EXPORT_SYMBOL(netsoc_get_port_stats);
-
+EXPORT_SYMBOL(netsoc_get_frame_size);
 EXPORT_SYMBOL(netsoc_get_flowid);
 EXPORT_SYMBOL(netsoc_build_crc32_table);
 EXPORT_SYMBOL(netsoc_crc16);
@@ -65,4 +65,5 @@ EXPORT_SYMBOL(netsoc_config_nae_l3parser);
 EXPORT_SYMBOL(netsoc_lib_writel);
 EXPORT_SYMBOL(netsoc_lib_readl);
 
+EXPORT_SYMBOL(netsoc_print_nae_config);
 #endif
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
index a4637bd..b302c74 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_common.h
@@ -66,13 +66,14 @@
 
 #define DEFAULT_SGMII_CAL_SLOTS         3
 #define DEFAULT_XAUI_CAL_SLOTS          13
-//#define DEFAULT_XAUI_CAL_SLOTS          8
 #define DEFAULT_ILK_CAL_SLOTS           26
-#define DEFAULT_XFI_CAL_SLOTS          7
-#define DEFAULT_XLAUI_CAL_SLOTS        13
-
-#define DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ   480
+#define DEFAULT_XFI_CAL_SLOTS           7
+#define DEFAULT_XLAUI_CAL_SLOTS         13
 
+#define DEFAULT_XLP9XX_XAUI_IFACEFIFO_SZ	110
+#define DEFAULT_XLP9XX_XAUI_RXFIFO_SZ         	1888
+#define DEFAULT_XLP9XX_XAUI_PARSERSEQFIFO_SZ	480
+#define DEFAULT_XLP9XX_XAUI_NUM_FREEDESC	300
 
 
 
@@ -240,6 +241,9 @@ static inline uint32_t get_numfree_desc(uint32_t intf_type)
 	case XAUI_IF:
         case XLAUI_IF:
 	case RXAUI_IF:
+		if (is_nlm_xlp9xx())
+			return DEFAULT_XLP9XX_XAUI_NUM_FREEDESC;
+
 		return DEFAULT_XAUI_NUM_FREEDESC;
 	case INTERLAKEN_IF:
 		return DEFAULT_ILK_NUM_FREEDESC;
@@ -340,6 +344,8 @@ static inline uint32_t get_rx_buf_size(uint32_t intf_type)
                 return DEFAULT_SGMII_RXFIFO_SZ;
         case XAUI_IF:
         case XLAUI_IF:
+ 		if (is_nlm_xlp9xx())
+ 			return DEFAULT_XLP9XX_XAUI_RXFIFO_SZ;
                 return DEFAULT_XAUI_RXFIFO_SZ;
         case RXAUI_IF:
 		if(is_nlm_xlp9xx())
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_dbg.h b/arch/mips/netlogic/lib/netlib/include/netsoc_dbg.h
index 792f051..690069c 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_dbg.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_dbg.h
@@ -83,7 +83,7 @@ static inline const char* get_poe_statistic_reg_name(uint32_t idx)
 * @ingroup hal_nae
 *
 */
-static int netsoc_get_num_naerxcounters(nae_t *nae)
+static inline int netsoc_get_num_naerxcounters(nae_t *nae)
 {
     /* how to get naerxcounters? */
     return 8;
@@ -98,17 +98,17 @@ static inline uint32_t get_poe_drop_cnt_reg_num(void)
     return 16;
 }
 
-static uint32_t get_poe_err_cnt_reg_base(void)
+static inline uint32_t get_poe_err_cnt_reg_base(void)
 {
     return 0x186;
 }
 
-static uint32_t get_poe_err_cnt_reg_num(void)
+static inline uint32_t get_poe_err_cnt_reg_num(void)
 {
     return 0x191 - get_poe_err_cnt_reg_base();
 }
 
-static const char* get_poe_err_cnt_reg_name(uint32_t idx)
+static inline const char* get_poe_err_cnt_reg_name(uint32_t idx)
 {
     static const char* poe_err_cnt_regs[] =
     {
@@ -144,7 +144,7 @@ typedef uint32_t (*nae_reg_read)(nae_t* nae, int idx);
 * @ingroup hal_nae
 *
 */
-static int netsoc_get_naerx_counter(nae_t *nae, uint32_t counter_num, uint32_t *val)
+static inline int netsoc_get_naerx_counter(nae_t *nae, uint32_t counter_num, uint32_t *val)
 {
     /* 64 or 32 bit result? */
     netsoc_write_nae_reg(nae->nae_base, RX_PERF_CTR_CFG, ((1 << 31) | (counter_num << 1)));
@@ -152,7 +152,7 @@ static int netsoc_get_naerx_counter(nae_t *nae, uint32_t counter_num, uint32_t *
     return NETSOC_API_SUCCESS;
 }
 
-static int netsoc_get_naerx_counter_setting(nae_t *nae, uint32_t counter_num, uint32_t *val)
+static inline int netsoc_get_naerx_counter_setting(nae_t *nae, uint32_t counter_num, uint32_t *val)
 {
     /* 64 or 32 bit result? */
     netsoc_write_nae_reg(nae->nae_base, RX_PERF_CTR_CFG, ((1 << 31) | (counter_num << 1) | 1));
@@ -163,7 +163,7 @@ static int netsoc_get_naerx_counter_setting(nae_t *nae, uint32_t counter_num, ui
 /*
  * Generic routine to read NAE config and print to designated buf
  */
-static int netsoc_printbuf_config(nae_t *nae, 
+static inline int netsoc_printbuf_config(nae_t *nae, 
                                   uint32_t ix_bgn,
                                   uint32_t ix_end,
                                   nae_reg_read read_op,
@@ -194,7 +194,7 @@ static int netsoc_printbuf_config(nae_t *nae,
 /*
  * Generic routine to read NAE config and print to stdout
  */
-static int netsoc_print_config(nae_t *nae, 
+static inline int netsoc_print_config(nae_t *nae, 
                                uint32_t ix_bgn,
                                uint32_t ix_end,
                                nae_reg_read read_op, char *config_str)
@@ -212,7 +212,7 @@ static int netsoc_print_config(nae_t *nae,
 /*
  * Routines to read NAE registers
  */
-static uint32_t vfbid_read(nae_t *nae, int vfbid)
+static inline uint32_t vfbid_read(nae_t *nae, int vfbid)
 {
     uint32_t rval, i = 1000;
     netsoc_write_nae_reg(nae->nae_base, VFBID_TO_DEST_MAP_CMD, (vfbid << 4)); 
@@ -230,7 +230,7 @@ static uint32_t vfbid_read(nae_t *nae, int vfbid)
 }
 
 
-static uint32_t rx_if_slot_cal_read(nae_t *nae, int slot)
+static inline uint32_t rx_if_slot_cal_read(nae_t *nae, int slot)
 {
     uint32_t val;
 
@@ -240,7 +240,7 @@ static uint32_t rx_if_slot_cal_read(nae_t *nae, int slot)
 }
 
 
-static uint32_t tx_if_slot_cal_read(nae_t *nae, int slot)
+static inline uint32_t tx_if_slot_cal_read(nae_t *nae, int slot)
 {
     uint32_t rval, i = 1000;
     netsoc_write_nae_reg(nae->nae_base, EGR_NIOR_CRDT_CAL_PROG,  (slot << 1) | 0x0);
@@ -259,17 +259,17 @@ static uint32_t tx_if_slot_cal_read(nae_t *nae, int slot)
     return ((rval >>1) & 0x1f);
 }
 
-static uint32_t freein_lifo_onchip_read(nae_t *nae, int lifo_num)
+static inline uint32_t freein_lifo_onchip_read(nae_t *nae, int lifo_num)
 {
-	return __netsoc_get_free_desc(nae, lifo_num/2);
+	return __netsoc_get_free_desc(nae, lifo_num);
 }
 
-static uint32_t freein_lifo_spill_read(nae_t *nae, int lifo_num)
+static inline uint32_t freein_lifo_spill_read(nae_t *nae, int lifo_num)
 {
 	return __netsoc_get_free_spill_desc(nae, lifo_num);
 }
 
-static int netsoc_set_naerx_counter_util(nae_t *nae, uint32_t counter_num, uint32_t event, uint32_t index, uint32_t ena)
+static inline int netsoc_set_naerx_counter_util(nae_t *nae, uint32_t counter_num, uint32_t event, uint32_t index, uint32_t ena)
 {
     /* TODO: add 0xa0, 0xa1 definition to "netsoc_dev.h" */
     uint32_t val = 0;
@@ -284,7 +284,7 @@ static int netsoc_set_naerx_counter_util(nae_t *nae, uint32_t counter_num, uint3
 /*
  * given event_num and index, find the corresponding counter_num 
  */
-static int get_naerx_counter_num(nae_t* nae, uint32_t event_num, uint32_t index, uint32_t* counter_num)
+static inline int get_naerx_counter_num(nae_t* nae, uint32_t event_num, uint32_t index, uint32_t* counter_num)
 {
     int ret = -1;
     uint32_t ix, num = netsoc_get_num_naerxcounters(nae);
@@ -302,7 +302,7 @@ static int get_naerx_counter_num(nae_t* nae, uint32_t event_num, uint32_t index,
     return ret;
 }
 
-static int netsoc_set_naetx_counter_util(nae_t *nae, uint32_t counter, uint32_t event, uint32_t index, uint32_t ena)
+static inline int netsoc_set_naetx_counter_util(nae_t *nae, uint32_t counter, uint32_t event, uint32_t index, uint32_t ena)
 {
     uint32_t val = ena; 
 
@@ -330,7 +330,7 @@ static int netsoc_set_naetx_counter_util(nae_t *nae, uint32_t counter, uint32_t
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_vfbid_config(nae_t *nae, char *buf, unsigned int len)
+static inline int netsoc_printbuf_vfbid_config(nae_t *nae, char *buf, unsigned int len)
 {
     return netsoc_printbuf_config(nae,  0, MAX_VFBID_ENTRIES, vfbid_read, buf, len ,"VFBID entry ");
 }
@@ -348,7 +348,7 @@ static int netsoc_printbuf_vfbid_config(nae_t *nae, char *buf, unsigned int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_rxcal_config(nae_t *nae, char *buf, unsigned int len)
+static inline int netsoc_printbuf_rxcal_config(nae_t *nae, char *buf, unsigned int len)
 {
     return netsoc_printbuf_config(nae, 0, nae->rx_cal_slots, rx_if_slot_cal_read, buf, len, "Rxcal mapping for slot ");
 }
@@ -367,7 +367,7 @@ static int netsoc_printbuf_rxcal_config(nae_t *nae, char *buf, unsigned int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_txcal_config(nae_t *nae, char *buf, unsigned int len)
+static inline int netsoc_printbuf_txcal_config(nae_t *nae, char *buf, unsigned int len)
 {
     uint32_t val = netsoc_read_nae_reg(nae->nae_base, EGR_NIOR_CAL_LEN_REG);
     uint32_t cal_len = (val & 0x3f) + 1;
@@ -387,7 +387,7 @@ static int netsoc_printbuf_txcal_config(nae_t *nae, char *buf, unsigned int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_freein_lifostatus(nae_t *nae, char *buf, unsigned int len)
+static inline int netsoc_printbuf_freein_lifostatus(nae_t *nae, char *buf, unsigned int len)
 {
     int total_printed;
 
@@ -410,7 +410,7 @@ static int netsoc_printbuf_freein_lifostatus(nae_t *nae, char *buf, unsigned int
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_vfbid_config(nae_t *nae)
+static inline int netsoc_print_vfbid_config(nae_t *nae)
 {
     return netsoc_print_config(nae,  0, MAX_VFBID_ENTRIES, vfbid_read, "VFBID entry ");
 }
@@ -426,7 +426,7 @@ static int netsoc_print_vfbid_config(nae_t *nae)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_rxcal_config(nae_t *nae)
+static inline int netsoc_print_rxcal_config(nae_t *nae)
 {
     return netsoc_print_config(nae, 0, nae->rx_cal_slots, rx_if_slot_cal_read, "Rxcal mapping for slot ");
 }
@@ -442,7 +442,7 @@ static int netsoc_print_rxcal_config(nae_t *nae)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_txcal_config(nae_t *nae)
+static inline int netsoc_print_txcal_config(nae_t *nae)
 {
     uint32_t val = netsoc_read_nae_reg(nae->nae_base, EGR_NIOR_CAL_LEN_REG);
     uint32_t cal_len = (val & 0x3f) + 1;
@@ -460,7 +460,7 @@ static int netsoc_print_txcal_config(nae_t *nae)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_freein_lifostatus(nae_t *nae)
+static inline int netsoc_print_freein_lifostatus(nae_t *nae)
 {
     netsoc_print_config(nae, 0, nae->frin_total_queue, freein_lifo_onchip_read, "onchip descs count-LIFO");
     netsoc_print_config(nae, 0, nae->frin_total_queue, freein_lifo_spill_read, "spill desc count-LIFO");
@@ -483,7 +483,7 @@ static int netsoc_print_freein_lifostatus(nae_t *nae)
 * @ingroup hal_nae
 *
 */
-static int netsoc_set_naerx_counter(nae_t *nae, uint32_t counter_num, uint32_t event, uint32_t index)
+static inline int netsoc_set_naerx_counter(nae_t *nae, uint32_t counter_num, uint32_t event, uint32_t index)
 {
     return netsoc_set_naerx_counter_util(nae, counter_num, event, index, 1);
 }
@@ -504,7 +504,7 @@ static int netsoc_set_naerx_counter(nae_t *nae, uint32_t counter_num, uint32_t e
 * @ingroup hal_nae
 *
 */
-static int netsoc_config_naerx_dbgpath(nae_t *nae, uint32_t *event_num, uint32_t max_events)
+static inline int netsoc_config_naerx_dbgpath(nae_t *nae, uint32_t *event_num, uint32_t max_events)
 {
     uint32_t event, max_counter = netsoc_get_num_naerxcounters(nae);
     
@@ -531,7 +531,7 @@ static int netsoc_config_naerx_dbgpath(nae_t *nae, uint32_t *event_num, uint32_t
 * @ingroup hal_nae
 *
 */
-static int netsoc_enable_naerx_dbgpath(nae_t *nae, uint32_t index)
+static inline int netsoc_enable_naerx_dbgpath(nae_t *nae, uint32_t index)
 {
     uint32_t cnt_setting, event;
     int ix;
@@ -558,7 +558,7 @@ static int netsoc_enable_naerx_dbgpath(nae_t *nae, uint32_t index)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_naerx_dbgpath(nae_t *nae, char *buf, int len)
+static inline int netsoc_printbuf_naerx_dbgpath(nae_t *nae, char *buf, int len)
 {
     char loc_buf[128];
     int num_printed = 0;
@@ -602,7 +602,7 @@ static int netsoc_printbuf_naerx_dbgpath(nae_t *nae, char *buf, int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_naerx_dbgpath(nae_t *nae)
+static inline int netsoc_print_naerx_dbgpath(nae_t *nae)
 {
     char loc_buf[512];
     int ret = netsoc_printbuf_naerx_dbgpath(nae, loc_buf, sizeof(loc_buf));
@@ -622,7 +622,7 @@ static int netsoc_print_naerx_dbgpath(nae_t *nae)
 * @ingroup hal_nae
 *
 */
-static int netsoc_disable_naerx_counter(nae_t *nae, uint32_t counter_num)
+static inline int netsoc_disable_naerx_counter(nae_t *nae, uint32_t counter_num)
 {
     uint32_t val, event, index;
     netsoc_get_naerx_counter_setting(nae, counter_num, &val);
@@ -644,7 +644,7 @@ static int netsoc_disable_naerx_counter(nae_t *nae, uint32_t counter_num)
 * @ingroup hal_nae
 *
 */
-static int netsoc_get_num_naetxcounters(nae_t *nae)
+static inline int netsoc_get_num_naetxcounters(nae_t *nae)
 {
     return 5;
 }
@@ -664,7 +664,7 @@ static int netsoc_get_num_naetxcounters(nae_t *nae)
 * @ingroup hal_nae
 *
 */
-static int netsoc_set_naetx_counter(nae_t *nae, uint32_t counter, uint32_t event, uint32_t index)
+static inline int netsoc_set_naetx_counter(nae_t *nae, uint32_t counter, uint32_t event, uint32_t index)
 {
     return netsoc_set_naetx_counter_util(nae, counter, event, index, 1);
 }
@@ -682,7 +682,7 @@ static int netsoc_set_naetx_counter(nae_t *nae, uint32_t counter, uint32_t event
 * @ingroup hal_nae
 *
 */
-static int netsoc_get_naetx_counter(nae_t *nae, uint32_t counter_num, uint64_t *val)
+static inline int netsoc_get_naetx_counter(nae_t *nae, uint32_t counter_num, uint64_t *val)
 {
     uint32_t counter_ix = TX_PERF_CNTR_0 + counter_num * 2;
     *val = netsoc_read_nae_reg(nae->nae_base, counter_ix);
@@ -705,7 +705,7 @@ static int netsoc_get_naetx_counter(nae_t *nae, uint32_t counter_num, uint64_t *
 * @ingroup hal_nae
 *
 */
-static int netsoc_config_naetx_dbgpath(nae_t *nae, uint32_t *event_num, uint32_t max_events)
+static inline int netsoc_config_naetx_dbgpath(nae_t *nae, uint32_t *event_num, uint32_t max_events)
 {
     uint32_t ix, ret = NETSOC_API_SUCCESS, tmpret;
 
@@ -736,7 +736,7 @@ static int netsoc_config_naetx_dbgpath(nae_t *nae, uint32_t *event_num, uint32_t
 * @ingroup hal_nae
 *
 */
-static int netsoc_enable_naetx_dbgpath(nae_t *nae, uint32_t index)
+static inline int netsoc_enable_naetx_dbgpath(nae_t *nae, uint32_t index)
 {
     uint32_t counter_ix =  TX_PERF_CTRL_0;    
     uint32_t val;
@@ -767,7 +767,7 @@ static int netsoc_enable_naetx_dbgpath(nae_t *nae, uint32_t index)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_naetx_dbgpath(nae_t *nae, char *buf, int len)
+static inline int netsoc_printbuf_naetx_dbgpath(nae_t *nae, char *buf, int len)
 {
     char loc_buf[80];
     int num_printed = 0, event;
@@ -806,7 +806,7 @@ static int netsoc_printbuf_naetx_dbgpath(nae_t *nae, char *buf, int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_naetx_dbgpath(nae_t *nae)
+static inline int netsoc_print_naetx_dbgpath(nae_t *nae)
 {
     char loc_buf[256];
     int ret = netsoc_printbuf_naetx_dbgpath(nae, loc_buf, sizeof(loc_buf));
@@ -826,7 +826,7 @@ static int netsoc_print_naetx_dbgpath(nae_t *nae)
 * @ingroup hal_nae
 *
 */
-static int netsoc_disable_naetx_counter(nae_t *nae, uint32_t counter_num)
+static inline int netsoc_disable_naetx_counter(nae_t *nae, uint32_t counter_num)
 {
     uint32_t counter_ix = TX_PERF_CTRL_0 + (counter_num * 2);
     uint32_t val = netsoc_read_nae_reg(nae->nae_base, counter_ix);
@@ -850,7 +850,7 @@ static int netsoc_disable_naetx_counter(nae_t *nae, uint32_t counter_num)
 *
 */
 
-static int netsoc_print_port_stats(net_port_t *netport)
+static inline int netsoc_print_port_stats(net_port_t *netport)
 {
     /* TODO */
     return NETSOC_API_SUCCESS;
@@ -896,7 +896,7 @@ static inline int netsoc_disable_poe_statistics(poe_t *poe)
 * @ingroup hal_nae
 *
 */
-static int netsoc_enable_poe_drop(poe_t *poe, poe_drop_type_t drop_mode, int index)
+static inline int netsoc_enable_poe_drop(poe_t *poe, poe_drop_type_t drop_mode, int index)
 {
     uint64_t poebase = poe->pcie_base;
     uint32_t val;
@@ -947,7 +947,7 @@ static int netsoc_enable_poe_drop(poe_t *poe, poe_drop_type_t drop_mode, int ind
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_poe_statistics(poe_t *poe, char *buf, int len)
+static inline int netsoc_printbuf_poe_statistics(poe_t *poe, char *buf, int len)
 {
     char loc_buf[64];
     int num_printed = 0;
@@ -982,7 +982,7 @@ static int netsoc_printbuf_poe_statistics(poe_t *poe, char *buf, int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_poe_statistics(poe_t *poe)
+static inline int netsoc_print_poe_statistics(poe_t *poe)
 {
     char loc_buf[1024];
     int ret = netsoc_printbuf_poe_statistics(poe, loc_buf, sizeof(loc_buf));
@@ -1003,7 +1003,7 @@ static int netsoc_print_poe_statistics(poe_t *poe)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_poe_dropcounters(poe_t *poe, char *buf, int len)
+static inline int netsoc_printbuf_poe_dropcounters(poe_t *poe, char *buf, int len)
 {
     char loc_buf[64];
     int num_printed = 0;
@@ -1038,7 +1038,7 @@ static int netsoc_printbuf_poe_dropcounters(poe_t *poe, char *buf, int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_poe_dropcounters(poe_t *poe)
+static inline int netsoc_print_poe_dropcounters(poe_t *poe)
 {
     char loc_buf[1024];
     int ret = netsoc_printbuf_poe_dropcounters(poe, loc_buf, sizeof(loc_buf));
@@ -1058,7 +1058,7 @@ static int netsoc_print_poe_dropcounters(poe_t *poe)
 * @ingroup hal_nae
 *
 */
-static int netsoc_clear_poe_statistics(poe_t *poe, poe_stats_t counter)
+static inline int netsoc_clear_poe_statistics(poe_t *poe, poe_stats_t counter)
 {
     uint64_t poebase = poe->pcie_base;
     uint32_t reg;
@@ -1112,7 +1112,7 @@ static int netsoc_clear_poe_statistics(poe_t *poe, poe_stats_t counter)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_poe_msgcount(poe_t *poe, char *buf, int len)
+static inline int netsoc_printbuf_poe_msgcount(poe_t *poe, char *buf, int len)
 {
     char loc_buf[64];
     int num_printed = 0;
@@ -1152,7 +1152,7 @@ static int netsoc_printbuf_poe_msgcount(poe_t *poe, char *buf, int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_printbuf_poe_errcount(poe_t *poe, char *buf, int len)
+static inline int netsoc_printbuf_poe_errcount(poe_t *poe, char *buf, int len)
 {
     char loc_buf[64];
     int num_printed = 0;
@@ -1184,7 +1184,7 @@ static int netsoc_printbuf_poe_errcount(poe_t *poe, char *buf, int len)
 * @ingroup hal_nae
 *
 */
-static int netsoc_print_poe_errcount(poe_t *poe)
+static inline int netsoc_print_poe_errcount(poe_t *poe)
 {
     char loc_buf[1024];
     int ret = netsoc_printbuf_poe_errcount(poe, loc_buf, sizeof(loc_buf));
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h b/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
index daebded..add0ea8 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_dev.h
@@ -112,6 +112,7 @@ enum net_cfg_regs {
  EGR_NIOR_CRDT_CAL_PROG     	    = 0x52,
  TX_SCHED_MAP_STATUS0               = 0x387,
  TX_SCHED_MAP_STATUS1               = 0x388,
+ EGR_NIOR_CRDT_STATUS		    = 0x38B,
  TX_PKT_PMEM_CMD0                   = 0x50,
  TX_PKT_PMEM_CMD1                   = 0x51,
  TX_PKT_PMEM_STATUS                 = 0x389,
@@ -129,6 +130,10 @@ enum net_cfg_regs {
  IFACE_FIFO_CFG             	    = 0x8a,
  PARSER_SEQ_FIFOTH_CFG		    = 0x8b,
  RX_ERRINJ_CTRL1		    = 0x8d,
+
+RX_PERF_CTR_CFG			    = 0xA0,
+RX_PERF_CTR_VAL			    = 0xA1,
+
  L2_TYPE_0                          = 0x210,
  L3_CTABLE_MASK_0                   = 0x22c,
  L3_CTABLE_0_0                      = 0x230,
@@ -144,6 +149,9 @@ NET_COMMON0_INTR_MASK		    = 0x2A9,
 IF_1588_TMSMP_HI		    = 0x300,
 IF_1588_TMSMP_LO		    = 0x301,   
 
+TX_PERF_CNTR_0			    = 0x332,
+TX_PERF_CTRL_0			    = 0x333,
+
 PTP_OFFSET_HI		    	    = 0x784,
 PTP_OFFSET_LO		            = 0x785,
 PTP_INC_DEN		            = 0x786,
@@ -439,6 +447,8 @@ enum poe_stats_reg {
 #define POE_EXT_ALLOC_EN 0xbb
 #define POE_LOCAL_FBP_BASE 0x400
 
+#define POE_FID_RDATA		0x192
+#define POE_FID_WDATA		0x193
 #define POE_ENQ_SPILL_THOLD	0x208
 #define POE_DEQ_SPILL_THOLD	0x209
 #define POE_DEQ_SPILL_TIMER	0x20A
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
index 077ab10..12c5f8f 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_libiface.h
@@ -32,6 +32,7 @@
 #define __BRCM_NETSOC_LIBIFACE_H
 
 #include "nlm_nae.h"
+#include "netsoc_dev.h"
 
 #define NLH_XKPHYS_UNCACHED             0x9000000000000000ULL
 
@@ -70,6 +71,21 @@ enum netsoc_api_error {
 	NETSOC_API_NOT_SUPPORTED,
 };
 
+typedef enum {
+	POE_LOCBUF_STATS,
+	POE_EXTBUF_STATS,
+	POE_INORD_MSGCNT_STATS,
+	POE_OUTORD_MSGCNT_STATS,
+	POE_ALL_STATS,
+}poe_stats_t;
+
+typedef enum {
+    POE_DISTR_DROP,
+    POE_CLASS_DROP,
+    POE_CPU_DROP,
+    POE_MAXFLOW_SZ_DROP,
+} poe_drop_type_t;
+
 struct __netsoc_dev_stat{
 	unsigned long	rx_packets;
 	unsigned long	tx_packets;
@@ -312,6 +328,150 @@ static inline void netsoc_api_writel(uint64_t base, uint32_t index, uint32_t val
 
 
 
+
+static inline int netsoc_port_stats_enable(net_port_t *netport)
+{
+	unsigned int netwk_inf = 0;
+        nae_t *nae = netport->nae;
+        uint64_t mac_base;
+
+        switch(netport->iftype) {
+                case SGMII_IF:
+                        mac_base = netsoc_get_macreg_base_for_gmac(nae->mac_base, netport->hw_port_id);
+                        netwk_inf  = netsoc_read_mac_reg(mac_base, NETWK_INF_CTRL_REG);
+			netsoc_write_mac_reg(mac_base , NETWK_INF_CTRL_REG, (netwk_inf | (1<<16)));
+			break;
+		case XAUI_IF:
+		case RXAUI_IF:
+			mac_base = netsoc_get_macreg_base_for_xgmac0(nae->mac_base, netport->hw_port_id);
+			netwk_inf  = netsoc_read_mac_reg(mac_base, NETWK_INF_CTRL_REG);
+                        netsoc_write_mac_reg(mac_base , NETWK_INF_CTRL_REG, (netwk_inf | (1<<17)));
+			break;
+		default:
+			return -1;
+	}
+	return 0;
+}
+
+
+
+static inline int netsoc_port_stats_disable(net_port_t *netport)
+{
+        unsigned int netwk_inf = 0;
+        nae_t *nae = netport->nae;
+        uint64_t mac_base;
+
+        switch(netport->iftype) {
+                case SGMII_IF:
+                        mac_base = netsoc_get_macreg_base_for_gmac(nae->mac_base, netport->hw_port_id);
+                        netwk_inf  = netsoc_read_mac_reg(mac_base, NETWK_INF_CTRL_REG);
+                        netsoc_write_mac_reg(mac_base , NETWK_INF_CTRL_REG, (netwk_inf & (~(1<<16))));
+                        break;
+                case XAUI_IF:
+                case RXAUI_IF:
+                        mac_base = netsoc_get_macreg_base_for_xgmac0(nae->mac_base, netport->hw_port_id);
+                        netwk_inf  = netsoc_read_mac_reg(mac_base, NETWK_INF_CTRL_REG);
+                        netsoc_write_mac_reg(mac_base , NETWK_INF_CTRL_REG, (netwk_inf & (~(1<<17))));
+                        break;
+                default:
+                        return -1;
+        }
+        return 0;
+}
+
+static inline int netsoc_port_stats_clear(net_port_t *netport)
+{
+        unsigned int netwk_inf = 0;
+        nae_t *nae = netport->nae;
+        uint64_t mac_base;
+
+        switch(netport->iftype) {
+                case SGMII_IF:
+                        mac_base = netsoc_get_macreg_base_for_gmac(nae->mac_base, netport->hw_port_id);
+                        netwk_inf  = netsoc_read_mac_reg(mac_base, NETWK_INF_CTRL_REG);
+                        netsoc_write_mac_reg(mac_base , NETWK_INF_CTRL_REG, (netwk_inf | (1<<15)));
+                        break;
+                case XAUI_IF:
+                case RXAUI_IF:
+                        mac_base = netsoc_get_macreg_base_for_xgmac0(nae->mac_base, netport->hw_port_id);
+                        netwk_inf  = netsoc_read_mac_reg(mac_base, NETWK_INF_CTRL_REG);
+                        netsoc_write_mac_reg(mac_base , NETWK_INF_CTRL_REG, (netwk_inf | (1<<16)));
+                        break;
+                default:
+                        return -1;
+        }
+        return 0;
+}
+
+static inline uint32_t netsoc_read_ucore_sprayvec(nae_t *nae, int hw_port_id)
+{
+	uint32_t vec;
+
+	netsoc_write_nae_reg(nae->nae_base, UCORE_IFACE_MASK_CFG, (hw_port_id & 0x1f));
+	vec = netsoc_read_nae_reg(nae->nae_base, UCORE_IFACE_MASK_CFG);
+	return vec;
+}
+
+static inline void netsoc_set_ucore_sprayvec(nae_t *nae, int hw_port_id, int ucore)
+{
+	uint32_t vec;
+	vec = netsoc_read_ucore_sprayvec(nae, hw_port_id);
+
+	vec |= (1<<ucore);
+	netsoc_write_nae_reg(nae->nae_base, UCORE_IFACE_MASK_CFG, ( 0x1ULL << 31) | ((vec & 0xffff)  << 8) |
+                                     (hw_port_id & 0x1f));
+}
+
+static inline void netsoc_clear_ucore_sprayvec(nae_t *nae, int hw_port_id, int ucore)
+{
+        uint32_t vec;
+        vec = netsoc_read_ucore_sprayvec(nae, hw_port_id);
+
+        vec &= ~(1<<ucore);
+        netsoc_write_nae_reg(nae->nae_base, UCORE_IFACE_MASK_CFG, ( 0x1ULL << 31) | ((vec & 0xffff)  << 8) |
+                                     (hw_port_id & 0x1f));
+}
+
+static inline int netsoc_set_loopback(net_port_t *netport)
+{
+	nae_t *nae = netport->nae;
+        uint64_t mac_base;
+	uint32_t val;
+
+        switch(netport->iftype) {
+                case SGMII_IF:
+                        mac_base = netsoc_get_macreg_base_for_gmac(nae->mac_base, netport->hw_port_id);
+			val = netsoc_read_mac_reg(mac_base, MAC_CONF1);
+			val |= (1<<8);
+			netsoc_write_mac_reg(mac_base, MAC_CONF1, val);
+			break;
+		default:
+			return -1;	
+	}
+	return 0;
+}
+
+
+static inline int netsoc_clear_loopback(net_port_t *netport)
+{
+        nae_t *nae = netport->nae;
+        uint64_t mac_base;
+        uint32_t val;
+
+        switch(netport->iftype) {
+                case SGMII_IF:
+                        mac_base = netsoc_get_macreg_base_for_gmac(nae->mac_base, netport->hw_port_id);
+                        val = netsoc_read_mac_reg(mac_base, MAC_CONF1);
+                        val &= ~(1<<8);
+                        netsoc_write_mac_reg(mac_base, MAC_CONF1, val);
+                        break;
+                default:
+                        return -1;
+        }
+        return 0;
+}
+
+
 extern int init_netsoc(void *fdt, uint32_t dom_id);
 extern void brcm_netsoc_lib_init(struct netsoc_lib_param *libparam);
 extern uint32_t get_netsoc_features(void);
@@ -364,11 +524,12 @@ extern uint32_t netsoc_get_flowid(nae_t *nae, uint32_t index, uint32_t context,
 extern int netsoc_get_phy_status(net_port_t *port, uint32_t *duplex, uint32_t *speed);
 extern int netsoc_start_autoneg(net_port_t *port);
 extern int netsoc_init_ext_phy(net_port_t *port);
+extern int netsoc_get_frame_size(net_port_t *netport);
 
 extern int netsoc_stop_ucore(nae_t *nae);
 extern int netsoc_start_ucore(nae_t *nae);
 extern int netsoc_config_ucore_memtype(nae_t *nae, uint32_t type);
 extern int netsoc_enable_wred_perclass(nae_t *nae, uint32_t class_num, uint32_t thres_lo, uint32_t thres_hi);
 extern int netsoc_disable_wred_perclass(nae_t *nae, uint32_t class_num);
-
+extern int netsoc_print_nae_config(nae_t *);
 #endif
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h b/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h
index c3566c9..8d4a323 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_nae.h
@@ -34,6 +34,8 @@
 #include "netsoc_haliface.h"
 #include "netsoc_libiface.h"
 
+#define CONTEXT_NUMBER_INSEQ	1
+
 extern struct netsoc_info *current_netsoc;
 
 enum netv1_nae_reg{
@@ -55,7 +57,7 @@ enum net_path{
 	INGRESS_PATH,
 };
 
-#define DEFAULT_PARSER_THR		384
+#define DEFAULT_PARSER_THR		384 //448 //384
 #define VAL_UCORE_RESET(x) 		(((x) &0xffff) << 8)
 #define NLM_NAE_MAX_XONOFF_THR_GRPS 	8
 
@@ -317,6 +319,7 @@ static inline void __netsoc_write_fifo_size(nae_t *nae, int hw_port_id, uint32_t
 {
 	uint32_t moddescsz, desc_size = (size/XLP_CACHELINE_SIZE) & 0xff;
 	
+	netsoc_api_print(NETSOC_APIDBG_TRACE, "Writing LIFO %d descsize %d\n",hw_port_id, desc_size);
 	if ((desc_size == 0) || (desc_size > (DEFAULT_PARSER_THR / XLP_CACHELINE_SIZE)))
 		moddescsz = (DEFAULT_PARSER_THR / XLP_CACHELINE_SIZE) & 0xff;
 	else
diff --git a/arch/mips/netlogic/lib/netlib/include/netsoc_poe.h b/arch/mips/netlogic/lib/netlib/include/netsoc_poe.h
index f193f46..c58e7ea 100644
--- a/arch/mips/netlogic/lib/netlib/include/netsoc_poe.h
+++ b/arch/mips/netlogic/lib/netlib/include/netsoc_poe.h
@@ -33,6 +33,9 @@
 #include "netsoc_haliface.h"
 #include "netsoc_libiface.h"
 
+#define MAX_DIST_VEC 	16
+#define MAX_POE_CLASS	8
+
 #define POE_MAX_LOC_32BIT_CHUNKS 192
 #define NETVER1_NUM_NODES        8
 #define NETVER1_MAX_CORES        20
diff --git a/arch/mips/netlogic/lib/netlib/include/nlm_nae.h b/arch/mips/netlogic/lib/netlib/include/nlm_nae.h
index 574547a..c0cd9d3 100644
--- a/arch/mips/netlogic/lib/netlib/include/nlm_nae.h
+++ b/arch/mips/netlogic/lib/netlib/include/nlm_nae.h
@@ -72,6 +72,9 @@
 #define NLM_NAE_SH_LCPU_TO_MAP_SNG_VAL_SZ  	5 /* in bits, can cover 6 cpus in single entry */
 #define NLM_NAE_SH_LCPU_TO_MAP_NVALS_PER_ENTRY 	6 /* with 5 bits, can occupy 6  */
 
+#define MAX_PORTS_PERBLOCK     4
+#define MAX_POE_DV             16
+
 struct nlm_nae_shinfo {
 	int valid;
 	int rxvc;
@@ -295,6 +298,8 @@ struct nlm_hal_nae_config {
 	uint32_t flags;
 	int rx_cal_slots;
 	int tx_cal_slots;
+	// desc size in shared lifo mode 
+	int frin_desc_size[MAX_NAE_FREEIN_DESCS_QUEUE];
 	/* onchip descs per queue: value is taken from array for all 
 	   queues upto 0-17 */
 	int freein_fifo_onchip_num_descs[MAX_NAE_FREEIN_DESCS_QUEUE];
diff --git a/arch/mips/netlogic/lib/netlib/include/xlp9xx_netsoc.h b/arch/mips/netlogic/lib/netlib/include/xlp9xx_netsoc.h
index 1091f33..cb6a8fc 100644
--- a/arch/mips/netlogic/lib/netlib/include/xlp9xx_netsoc.h
+++ b/arch/mips/netlogic/lib/netlib/include/xlp9xx_netsoc.h
@@ -34,7 +34,7 @@
 #define XLP9XX_NETSOC_FEATURES          \
         (NETSOC_NAE | NETSOC_NAE_HWPARSER | NETSOC_NAE_PKTDIST | NETSOC_POE | NETSOC_NAE_CPUBYPASS | NETSOC_MACSEC | NETSOC_ALE | NETSOC_IOVIRT)
 
-#define XLP9XX_MAX_PORTS                8
+#define XLP9XX_MAX_PORTS                9
 #define XLP9XX_MAX_FREEIN_LIFOS         16
 #define XLP9XX_MAX_UCORE                16
 #define XLP9XX_MAX_CONTEXTS             64
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
index b89e8de..204a635 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_api.c
@@ -46,7 +46,7 @@ void *(*netsoc_lib_contig_malloc)(uint32_t align, uint32_t size);
 void (*netsoc_lib_contig_free)(void *buf);
 uint64_t (*netsoc_lib_virttophys)(void *);
 void *(*netsoc_lib_phystovirt)(uint64_t);
-unsigned int netsoc_api_dbglvl = NETSOC_APIDBG_DEFAULT | NETSOC_APIDBG_GLOBAL;
+unsigned int netsoc_api_dbglvl = 0xff; // NETSOC_APIDBG_DEFAULT | NETSOC_APIDBG_GLOBAL;
 
 int (*const_func_list[])(void) = {
 register_marvell_phy,
@@ -62,7 +62,7 @@ register_broadcom_phy,
 *
 * @return
 *       - duplex and speed status from PHY, returns NETSOC_API_SUCCESS
-*       - <0 on error        
+*       - 1 - Link up, 0 - Link Down       
 * 
 * @ingroup hal_nae
 *
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_config.c b/arch/mips/netlogic/lib/netlib/src/netsoc_config.c
index fbd15b5..6ebafae 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_config.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_config.c
@@ -218,6 +218,12 @@ static struct netsoc_info xlp9xx_netsoc = {
 };
 
 struct netsoc_info *current_netsoc;
+#ifdef NLM_HAL_LINUX_KERNEL
+#include <linux/types.h>
+#include <linux/module.h>
+
+EXPORT_SYMBOL(current_netsoc);
+#endif
 
 nae_t *xlp_nae[NLM_MAX_NODES][MAX_NAE_BLOCKS];
 poe_t *xlp_poe[NLM_MAX_NODES][MAX_POE_BLOCKS];
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c b/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
index 8a278d4..e7a434c 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_fdt.c
@@ -312,6 +312,9 @@ void fdt_extract_dom_nae_node_freein_fifo_info(void *fdt, int dom_id, nae_t *nae
                sprintf(dom_node_str, "/soc/net@node-%d/nae-%d/freein-fifo-config", node, nae_cfg->nae_id);
         }
 
+	copy_fdt_prop(fdt, dom_node_str, "freein-desc-size", PROP_CELL,
+                        &nae_cfg->frin_desc_size[0], 4*MAX_NAE_FREEIN_DESCS_QUEUE);
+
         copy_fdt_prop(fdt, dom_node_str, "freein-fifo-onchip-num-descs", PROP_CELL,
                         freein_fifo_onchip_num_descs, 4*MAX_NAE_FREEIN_DESCS_QUEUE);
         copy_fdt_prop(fdt, dom_node_str, "freein-fifo-spill-num-descs", PROP_CELL,
@@ -319,6 +322,7 @@ void fdt_extract_dom_nae_node_freein_fifo_info(void *fdt, int dom_id, nae_t *nae
         copy_fdt_prop(fdt, dom_node_str, "port-fifo-en", PROP_CELL,
                         &nae_cfg->port_fifo_en, 4);
 
+
         nae_cfg->freein_fifo_spill_num_descs = freein_fifo_spill_num_descs;
 
         for (i=0; i<MAX_NAE_FREEIN_DESCS_QUEUE; i++) {
@@ -1196,6 +1200,7 @@ static int fdt_parse_port_config(void *fdt, nae_t *nae_cfg)
                                 return -1;
                         rx_slots += nae_port->rx_slots_reqd;
                         txq += nae_port->num_channels;
+			netsoc_api_print(NETSOC_APIDBG_FDT,"intf_fifo %d prsr_seq_ %d rx_buf %d\n",nae_port->intf_fifo_size, nae_port->prsr_seq_fifo_size, nae_port->rx_buf_size);
                 }
                 if (intf_type == INTERLAKEN_IF)
                         block++;
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
index 215d14c..3491efd 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_nae.c
@@ -1518,6 +1518,7 @@ void __netsoc_deflate_frin_fifo_carving(nae_t *nae)
 		start = minimum_size * intf;
 		value = (minimum_size << 20) | (start << 8) | (intf);
 		netsoc_write_nae_reg(nae->nae_base, FREE_IN_FIFO_CFG, value);
+		__netsoc_write_fifo_size(nae, intf, 0);
 	}
 }
 
@@ -2413,26 +2414,50 @@ void __netsoc_init_ingress(nae_t *nae, uint32_t desc_size)
                                PARSER_THRESHOLD(parser_threshold) |
                                PARSER_THRESHOLD_DIV_DESCSIZE(divdescsz) |
                                PARSER_THRESHOLD_MOD_DESCSIZE_CL(moddescsz));
-		rx_cfg = netsoc_read_nae_reg(nae_base, RX_CONFIG);
+		rx_cfg = netsoc_read_nae_reg(nae_base, XLP_PARSER_CONFIG);
 		netsoc_api_print(NETSOC_APIDBG_GLOBAL,"Parser thr %d devdescSz %d moddescSz %d \n", 
 			(rx_cfg & 0x3ff), ((rx_cfg>>12) & 0xff), ((rx_cfg>>20) & 0xff));
 	}
 	else {
+               netsoc_write_nae_reg(nae_base,  RX_CONFIG,(rx_cfg &
+                                          RESET_MAX_MESSAGE_SIZE &
+                                          RESET_FRINDESCCLSIZE &
+                                          RESET_RX_STATUS_MASK
+                                       ) |
+                               NAE_RX_ENABLE|
+                               NAE_MAX_MESSAGE_SIZE(0x0)|
+                               NAE_RX_STATUS_MASK(0x43)|
+                               (1<<31)
+                        );
+
 		for(i=0; i<current_netsoc->max_freeinqs;i++) {
 			netsoc_write_nae_reg(nae_base, FREE_IN_FIFO_UNIQ_SZ_CFG, (1<<31) | (i & 0x1f));
 			val = netsoc_read_nae_reg(nae_base, FREE_IN_FIFO_UNIQ_SZ_CFG);
-			desc_size = (val & 0x1f) * XLP_CACHE_LINE_SIZE;
+			desc_size = ((val>>8) & 0xff) * XLP_CACHE_LINE_SIZE;
+			netsoc_api_print(NETSOC_APIDBG_GLOBAL,"LIFO %d descsize %d\n",i, desc_size);
 			if (desc_size == 0)
 				desc_size = 16*1024; 
+			if (i==0)
+				frin_descsz = desc_size;
 			if (desc_size < frin_descsz)
 				frin_descsz = desc_size;
 		}
 		divdescsz = (parser_threshold / frin_descsz) + 1;
-		netsoc_write_nae_reg(nae_base, XLP_PARSER_CONFIG,
+		frin_descsz = (frin_descsz/64) & 0xff;
+                if ((frin_descsz == 0) || (frin_descsz > (parser_threshold/64)))
+                        moddescsz = (parser_threshold / XLP_CACHE_LINE_SIZE);
+                else
+                        moddescsz = (parser_threshold / XLP_CACHE_LINE_SIZE) % frin_descsz;
+
+		netsoc_api_print(NETSOC_APIDBG_GLOBAL,"parthr %d moddescsz %d frin_descsz %d \n",parser_threshold, moddescsz, frin_descsz);
+		netsoc_write_nae_reg(nae_base, XLP_PARSER_CONFIG, 
                                PARSER_THRESHOLD(parser_threshold) |
-                               PARSER_THRESHOLD_DIV_DESCSIZE(divdescsz));
-		netsoc_api_print(NETSOC_APIDBG_GLOBAL,"Parser thr %d devdescSz %d moddescSz is configured in FREE_IN_FIFO_UNIQ_SZ_CFG\n",
-			(rx_cfg & 0x3ff), ((rx_cfg>>12) & 0xff)); 
+                               PARSER_THRESHOLD_DIV_DESCSIZE(divdescsz) |
+			       PARSER_THRESHOLD_MOD_DESCSIZE_CL(moddescsz));
+		val = netsoc_read_nae_reg(nae_base, XLP_PARSER_CONFIG);
+                netsoc_api_print(NETSOC_APIDBG_GLOBAL,"PARSER CONFIG 0x%x Parser thr %d devdescSz %d moddescSz is configured in FREE_IN_FIFO_UNIQ_SZ_CFG\n",val,
+                        (val & 0x3ff), ((val>>12) & 0xff));
+
 	}
 }
 
@@ -3879,7 +3904,7 @@ int __netsoc_init_nae(nae_t *nae)
         	/* Disable RX enable bit in RX_CONFIG */
 	        rx_config = netsoc_read_nae_reg(nae->nae_base, RX_CONFIG);
         	rx_config &= 0xfffffffe;
-	        netsoc_write_nae_reg(nae->nae_base, RX_CONFIG, rx_config);
+	        netsoc_write_nae_reg(nae->nae_base, RX_CONFIG, rx_config | (1<<31));
 
         	if (is_nlm_xlp8xx_ax() == 0) {
                 	tx_config = netsoc_read_nae_reg(nae->nae_base, TX_CONFIG);
diff --git a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
index 60161f6..643d3b3 100644
--- a/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
+++ b/arch/mips/netlogic/lib/netlib/src/netsoc_poe.c
@@ -38,7 +38,6 @@
 
 #define NUM_DISTVEC_CELLS       16
 #define MIN_DIST_VEC 0
-#define MAX_DIST_VEC 16
 
 #define NUM_DISTVEC_CPUMASKS 4
 
-- 
1.7.1

