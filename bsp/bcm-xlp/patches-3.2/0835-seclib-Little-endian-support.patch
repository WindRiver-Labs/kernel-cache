From 4460aa7f607f195a7fc39890a4ecaecbbb052f5d Mon Sep 17 00:00:00 2001
From: Hareesh R <hareeshr@broadcom.com>
Date: Wed, 6 Nov 2013 10:44:22 +0530
Subject: seclib:Little endian support

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
index 8a20f1a..786dd6a 100644
--- a/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
+++ b/arch/mips/netlogic/lib/seclib/cryptosoc_lib.h
@@ -94,10 +94,16 @@ typedef  unsigned long long   _uint64_t;
 #define ccpu_to_be64(x) crypto_swap64(x)
 #define ccpu_to_be32(x) crypto_swap32(x)
 #define ccpu_to_be16(x) crypto_swap16(x)
+#define be64_to_ccpu(x) crypto_swap64(x)
+#define be32_to_ccpu(x) crypto_swap32(x)
+#define be16_to_ccpu(x) crypto_swap16(x)
 #else
 #define ccpu_to_be64(x) (x)
 #define ccpu_to_be32(x) (x)
 #define ccpu_to_be16(x) (x)
+#define be64_to_ccpu(x) (x)
+#define be32_to_ccpu(x) (x)
+#define be16_to_ccpu(x) (x)
 #endif
 
 
diff --git a/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h b/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h
index 3ebadaf..4989c0d 100644
--- a/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h
+++ b/arch/mips/netlogic/lib/seclib/eccsoc_gen1_hal_defs.h
@@ -145,6 +145,7 @@ static inline char *eccsoc_get_op_func(int val, char *buf)
 
 static inline void eccsoc_gen1_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
 {
+	char buf[32], buf1[32];
 	cryptosoc_dbg_print("\nFmn Info entry0 %llx entry1 %llx\n",entry0, entry1);
 	cryptosoc_dbg_print("  %-16s %-16s %-16s %-16s\n",
 			"SrcL3Alloc","Type", "Func", "SrcAddr");
diff --git a/arch/mips/netlogic/lib/seclib/eccsoc_lib.h b/arch/mips/netlogic/lib/seclib/eccsoc_lib.h
index e06dc0c..e51dc7e 100644
--- a/arch/mips/netlogic/lib/seclib/eccsoc_lib.h
+++ b/arch/mips/netlogic/lib/seclib/eccsoc_lib.h
@@ -863,8 +863,9 @@ static inline int eccsoc_create_point_dbl_request(
 
 	desc = eccsoc_create_new_desc(desc, req_num, 
 			max_reqs, inp_size, res_size);
-	if(!desc)
+	if(!desc) {
 		return -CRYPTOSOC_ENOMEM;
+	}
 	dpriv = (struct eccsoc_req_desc_priv_data *)desc->lib_priv;
 
 	if(inp_size) {
@@ -1349,6 +1350,70 @@ static inline int eccsoc_create_mod_red_request(
 }
 
 /**
+* eccsoc_dump_request_data - Dump the input data in the engine format
+* @req_desc: Pointer to the request data descriptor
+* @req_num: Request index
+*
+*/
+static inline void eccsoc_dump_request_data(
+		struct eccsoc_request_desc *req_desc, int req_num)
+{
+	struct eccsoc_req_desc_priv_data *dpriv;
+	int blk, i, arg, max_args;
+	char *mem;
+	char (*tmp)[4];
+	/* names in the order of operation */
+	char names[][4]={
+		"px", "py", "a",  "k",  "n",  "",  /* pmul*/
+		"px", "py", "qx", "qy",  "a", "n",  /* padd */
+		"px", "py", "a",  "n",   "",   "", /* pdbl */
+		"px", "py", "a",   "b",  "n",  "", /* pver */
+		"x",   "y",  "n",  "",   "",   "", /* madd */
+		"x",   "y",  "n",  "",   "",   "", /* msub */
+		"x",   "y",  "n",  "",   "",   "", /* mmul */
+		"x",   "y",  "n",  "",   "",   "", /* mdiv */
+		"x",   "n",  "",   "",   "",   "", /* mod-inv*/
+		"x",   "n",  "",   "",   "",   ""  /* mod-red */
+	};
+
+	if(!req_desc)
+		return;
+
+	dpriv = (struct eccsoc_req_desc_priv_data *)req_desc->lib_priv;
+
+	req_num--;
+	if(req_num >= dpriv->num_reqs)
+		return;
+
+	blk = dpriv->req_info[req_num].blksz_in_bits / 8;
+
+	cryptosoc_dbg_print("BlkszInBits %d  MaxReqs %d NumReqs %d InpSize %d ResSize %d\n", 
+			dpriv->req_info[req_num].blksz_in_bits,
+			dpriv->max_reqs, dpriv->num_reqs, 
+			dpriv->req_info[req_num].inp_size, 
+			dpriv->req_info[req_num].res_size);
+
+	mem = dpriv->req_info[req_num].eng_inp;
+	max_args =  eccsoc_max_req_args[dpriv->req_info[req_num].op];
+	tmp =  &names[dpriv->req_info[req_num].op * 6];
+
+	for(arg=0; arg < max_args; arg++) {
+		cryptosoc_dbg_print("%s\n", tmp[arg]);
+		for(i = 0; i < blk; ) {
+			cryptosoc_dbg_print(" <%016llx>", *(_uint64_t *)(mem + i));
+			i += 8;
+			if((i % 32) == 0)
+				cryptosoc_dbg_print("\n");
+		}
+		cryptosoc_dbg_print("\n");
+		mem = mem + blk;
+	}
+	return;
+}
+
+
+
+/**
 * eccsoc_process_request - Send/Receive the descriptor info to/from 
 * the engine
 * @ctx : Pointer to the context(input). 
@@ -1425,8 +1490,8 @@ static inline int eccsoc_process_request(
 				rsp_vc, 
 				cryptosoc_virt_to_phys((unsigned long)rmem));
 
-		cryptosoc_dbg_print("ECC process req, req_num %d type %d func %d\n",
-			idx, dpriv->req_info[idx].type, dpriv->req_info[idx].op);
+		cryptosoc_dbg_print("ECC process req, req_num %d type %d func %d numreqs %d\n",
+			idx, dpriv->req_info[idx].type, dpriv->req_info[idx].op, dpriv->num_reqs);
 
 		if(!ctx) {
 			rv = cryptosoc_process_request(gen_type2, CRYPTOSOC_ECC, 
@@ -1581,67 +1646,5 @@ static inline void eccsoc_free_request_desc(struct eccsoc_request_desc *req_desc
 	cryptosoc_mem_free(req_desc);
 }
 
-/**
-* eccsoc_dump_request_data - Dump the input data in the engine format
-* @req_desc: Pointer to the request data descriptor
-* @req_num: Request index
-*
-*/
-static inline void eccsoc_dump_request_data(
-		struct eccsoc_request_desc *req_desc, int req_num)
-{
-	struct eccsoc_req_desc_priv_data *dpriv;
-	int blk, i, arg, max_args;
-	char *mem;
-	char (*tmp)[4];
-	/* names in the order of operation */
-	char names[][4]={
-		"px", "py", "a",  "k",  "n",  "",  /* pmul*/
-		"px", "py", "qx", "qy",  "a", "n",  /* padd */
-		"px", "py", "a",  "n",   "",   "", /* pdbl */
-		"px", "py", "a",   "b",  "n",  "", /* pver */
-		"x",   "y",  "n",  "",   "",   "", /* madd */
-		"x",   "y",  "n",  "",   "",   "", /* msub */
-		"x",   "y",  "n",  "",   "",   "", /* mmul */
-		"x",   "y",  "n",  "",   "",   "", /* mdiv */
-		"x",   "n",  "",   "",   "",   "", /* mod-inv*/
-		"x",   "n",  "",   "",   "",   ""  /* mod-red */
-	};
-
-	if(!req_desc)
-		return;
-
-	dpriv = (struct eccsoc_req_desc_priv_data *)req_desc->lib_priv;
-
-	req_num--;
-	if(req_num >= dpriv->num_reqs)
-		return;
-
-	blk = dpriv->req_info[req_num].blksz_in_bits / 8;
-
-	cryptosoc_dbg_print("BlkszInBits %d  MaxReqs %d NumReqs %d InpSize %d ResSize %d\n", 
-			dpriv->req_info[req_num].blksz_in_bits,
-			dpriv->max_reqs, dpriv->num_reqs, 
-			dpriv->req_info[req_num].inp_size, 
-			dpriv->req_info[req_num].res_size);
-
-	mem = dpriv->req_info[req_num].eng_inp;
-	max_args =  eccsoc_max_req_args[dpriv->req_info[req_num].op];
-	tmp =  &names[dpriv->req_info[req_num].op * 6];
-
-	for(arg=0; arg < max_args; arg++) {
-		cryptosoc_dbg_print("%s\n", tmp[arg]);
-		for(i = 0; i < blk; ) {
-			cryptosoc_dbg_print(" <%016llx>", *(_uint64_t *)(mem + i));
-			i += 8;
-			if((i % 32) == 0)
-				cryptosoc_dbg_print("\n");
-		}
-		cryptosoc_dbg_print("\n");
-		mem = mem + blk;
-	}
-	return;
-}
-
 #endif
 
diff --git a/arch/mips/netlogic/lib/seclib/rsaecc_soc_common.h b/arch/mips/netlogic/lib/seclib/rsaecc_soc_common.h
index fe9ba34..7908980 100644
--- a/arch/mips/netlogic/lib/seclib/rsaecc_soc_common.h
+++ b/arch/mips/netlogic/lib/seclib/rsaecc_soc_common.h
@@ -40,6 +40,52 @@
 /* engine request and result data format conversion routine */
 typedef int (*rsa_ecc_soc_data_copy)(int,  unsigned char *, int, unsigned char *, int);
 
+static inline _uint64_t rsa_to_be64(int src_be, _uint64_t val)
+{
+	if(src_be) 
+		return val;
+	else
+		return crypto_swap64(val);
+}
+
+static inline _uint64_t be64_to_rsa(int dst_be, _uint64_t val) 
+{
+	if(dst_be)
+		return val; 
+	else
+		return crypto_swap64(val);
+}
+
+static inline unsigned int rsa_to_ccpu32(int src_be, unsigned int val)
+{
+#ifdef __MIPSEL__
+	if(src_be)
+		return crypto_swap32(val);
+	else
+		return val;
+#else
+	if(src_be)
+		return val;
+	else
+		return crypto_swap32(val);
+#endif
+}
+
+static inline unsigned int ccpu_to_rsa32(int dst_be, unsigned int val)
+{   
+#ifdef __MIPSEL__
+	if(dst_be)
+		return crypto_swap32(val);
+	else
+		return val;
+#else
+	if(dst_be)
+		return val;
+	else
+		return  crypto_swap32(val);
+#endif
+}
+
 /* input copy : src format is dword and most significant dword first */
 static int rsa_ecc_soc_input_copy_fmt_dword_msdwf(int src_big_endian, 
 		unsigned char *dst, int d_nbits, unsigned char *src, int s_nbits)
@@ -72,7 +118,7 @@ static int rsa_ecc_soc_input_copy_fmt_dword_msdwf(int src_big_endian,
 	slen = cryptosoc_roundup(slen, 8);
 	src += (slen - 8);
 	for(i = 0; i < slen; i+=8)  {
-		*(_uint64_t *)(dst + i) = *(_uint64_t *)src;
+		*(_uint64_t *)(dst + i) = rsa_to_be64(src_big_endian, *(_uint64_t *)src);
 		src -= 8;
 	}
 end:
@@ -116,7 +162,7 @@ static int rsa_ecc_soc_result_copy_fmt_dword_msdwf(int dst_big_endian,
 	dst += (dlen - 8);
 
 	for(i = 0; i < min; i+=8) {
-		*(_uint64_t *)(dst) =  *(_uint64_t *)(src);
+		*(_uint64_t *)(dst) =  be64_to_rsa(dst_big_endian,*(_uint64_t *)(src));
 		src += 8;
 		dst -= 8;
 	}
@@ -151,7 +197,7 @@ static int rsa_ecc_soc_input_copy_fmt_dword_lsdwf(int src_big_endian,
 		return -CRYPTOSOC_EINVAL;
 
 	for(i = 0; i < slen; i+=8)  {
-		*(_uint64_t *)(dst + i) = *(_uint64_t *)(src + i);
+		*(_uint64_t *)(dst + i) = rsa_to_be64(src_big_endian, *(_uint64_t *)(src + i));
 	}
 	/* clear the extra memory in the last */
 	if(i < dlen)
@@ -190,7 +236,7 @@ static int rsa_ecc_soc_result_copy_fmt_dword_lsdwf(int dst_big_endian,
 		memset(dst + min, 0, dlen - min);
 
 	for(i = 0; i < min; i+=8) {
-		*(_uint64_t *)(dst + i) =  *(_uint64_t *)(src + i);
+		*(_uint64_t *)(dst + i) =  be64_to_rsa(dst_big_endian, *(_uint64_t *)(src + i));
 	}
 
 	return CRYPTOSOC_OK;
@@ -229,15 +275,15 @@ static int rsa_ecc_soc_input_copy_fmt_word_mswf(int src_big_endian,
 	slen = cryptosoc_roundup(slen, 4);
 	src += (slen - 4);
 	for(i = 0; i < slen; i+=8)  {
-		val =  *(unsigned int *)src;
+		val =  rsa_to_ccpu32(src_big_endian, *(unsigned int *)src);
 		src -= 4;
-		val |=  (((_uint64_t)(*(unsigned int *)src)) << 32);
+		val |=  (((_uint64_t)(rsa_to_ccpu32(src_big_endian, *(unsigned int *)src))) << 32);
 		src -= 4;
-		*(_uint64_t *)(dst + i) = val;
+		*(_uint64_t *)(dst + i) = ccpu_to_be64(val);
 	}
 	/* if slen is not dword, make last msb 0 */
 	if(slen & 7)
-		*(_uint64_t *)(dst + i - 8) = val & 0xffffffffULL;
+		*(_uint64_t *)(dst + i - 8) = ccpu_to_be64(val & 0xffffffffULL);
 
 end:
 	/* clear the extra memory in the last */
@@ -283,15 +329,17 @@ static int rsa_ecc_soc_result_copy_fmt_word_mswf(int dst_big_endian,
 	/* if min is not dword aligned */
 
 	for(i = 0; i < (min & ~0x7); i+=8) {
-		val = *(_uint64_t *)(src);
-		*(unsigned int *)dst = (unsigned int)val;
+		val = be64_to_ccpu(*(_uint64_t *)(src));
+		*(unsigned int *)dst = ccpu_to_rsa32(dst_big_endian, (unsigned int)val);
 		dst -= 4;
-		*(unsigned int *)dst = (unsigned int)(val >> 32);
+		*(unsigned int *)dst = ccpu_to_rsa32(dst_big_endian, (unsigned int)(val >> 32));
 		dst -= 4;
 		src += 8;
 	}
-	if(min & 0x7)
-		*(unsigned int *)dst = (*(_uint64_t *)(src)) & 0xffffffffULL;
+	if(min & 0x7) {
+		val = be64_to_ccpu(*(_uint64_t *)(src));
+		*(unsigned int *)dst = ccpu_to_rsa32(dst_big_endian, (unsigned int) val);
+	}
 
 	return CRYPTOSOC_OK;
 }
@@ -325,16 +373,16 @@ static int rsa_ecc_soc_input_copy_fmt_word_lswf(int src_big_endian,
 		return -CRYPTOSOC_EINVAL;
 
 	for(i = 0; i < slen; i+=8)  {
-		val =  *(unsigned int *)src;
+		val =  rsa_to_ccpu32(src_big_endian, *(unsigned int *)src);
 		src += 4;
-		val |=  (((_uint64_t)(*(unsigned int *)src)) << 32);
+		val |=  (((_uint64_t)(rsa_to_ccpu32(src_big_endian, *(unsigned int *)src))) << 32);
 		src += 4;
-		*(_uint64_t *)(dst + i) = val;
+		*(_uint64_t *)(dst + i) = ccpu_to_be64(val);
 	}
 
 	/* if slen is not dword, make last msb 0 */
 	if(slen & 7)
-		*(_uint64_t *)(dst + i - 8) = val & 0xffffffffULL;
+		*(_uint64_t *)(dst + i - 8) = ccpu_to_be64(val & 0xffffffffULL);
 
 	/* clear the extra memory in the last */
 	if(i < dlen)
@@ -375,15 +423,17 @@ static int rsa_ecc_soc_result_copy_fmt_word_lswf(int dst_big_endian,
 		memset(dst + min, 0, dlen - min);
 
 	for(i = 0; i < (min & ~0x7); i+=8) {
-		val = *(_uint64_t *)(src);
-		*(unsigned int *)(dst) = (unsigned int)val;
+		val = be64_to_ccpu(*(_uint64_t *)(src));
+		*(unsigned int *)(dst) = ccpu_to_rsa32(dst_big_endian, (unsigned int)val);
 		dst += 4;
-		*(unsigned int *)(dst) = (unsigned int)(val >> 32);
+		*(unsigned int *)(dst) = ccpu_to_rsa32(dst_big_endian, (unsigned int)(val >> 32));
 		dst += 4;
 		src += 8;
 	}
-	if(min & 0x7)
-		*(unsigned int *)dst = (*(_uint64_t *)(src)) & 0xffffffffULL;
+	if(min & 0x7) {
+		val = be64_to_ccpu(*(_uint64_t *)(src));
+		*(unsigned int *)dst = ccpu_to_rsa32(dst_big_endian, (unsigned int)val);
+	}
 
 	return CRYPTOSOC_OK;
 }
@@ -430,7 +480,7 @@ static int rsa_ecc_soc_input_copy_fmt_msbf(int src_big_endian,
 			val |= (((_uint64_t)(*src)) << ((j % 8) * 8));
 			src -= 1;
 		}
-		*(_uint64_t *)(dst + i) = val;
+		*(_uint64_t *)(dst + i) = ccpu_to_be64(val);
 	}
 end:
 	/* clear the extra memory in the last */
@@ -476,7 +526,7 @@ static int rsa_ecc_soc_result_copy_fmt_msbf(int dst_big_endian,
 
 	for(i = 0; i < min; i+=8)  {
 		max = (min - i) > 8 ? 8 : (min - i);
-		val = *(_uint64_t *)(src + i);
+		val = be64_to_ccpu(*(_uint64_t *)(src + i));
 		for(j=0; j<max; j++) {
 			/* input is bigendian format, end address contains lsb */
 			*dst = (val >> ((j % 8) * 8)) & 0xffUL;
@@ -523,7 +573,7 @@ static int rsa_ecc_soc_input_copy_fmt_lsbf(int src_big_endian,
 			val |= (((_uint64_t)(*src)) << ((j % 8) * 8));
 			src += 1;
 		}
-		*(_uint64_t *)(dst + i) = val;
+		*(_uint64_t *)(dst + i) = ccpu_to_be64(val);
 	}
 	/* clear the extra memory in the last */
 	if(i < dlen)
@@ -565,7 +615,7 @@ static int rsa_ecc_soc_result_copy_fmt_lsbf(int dst_big_endian,
 	
 	for(i = 0; i < min; i+=8)  {
 		max = (min - i) > 8 ? 8 : (min - i);
-		val = *(_uint64_t *)(src + i);
+		val = be64_to_ccpu(*(_uint64_t *)(src + i));
 		for(j=0; j<max; j++) {
 			/* input is bigendian format, end address contains lsb */
 			*dst = val >> ((j % 8) * 8) & 0xff;
diff --git a/arch/mips/netlogic/lib/seclib/rsasoc_lib.h b/arch/mips/netlogic/lib/seclib/rsasoc_lib.h
index c9c942d..a3f6ea1 100644
--- a/arch/mips/netlogic/lib/seclib/rsasoc_lib.h
+++ b/arch/mips/netlogic/lib/seclib/rsasoc_lib.h
@@ -478,6 +478,53 @@ static inline int rsasoc_create_mod_mul_request(
 }
 
 /**
+* rsasoc_dump_request_data - Dump the input data in the engine format
+* @req_desc: Pointer to the request descriptor
+* @req_num: Request number
+*
+*/
+static inline void rsasoc_dump_request_data(
+		struct rsasoc_request_desc *req_desc, int req_num)
+{
+	struct rsasoc_req_desc_priv_data *dpriv;
+	int blk, i, arg;
+	char *mem;
+	char p[][4]={"x", "y", "n"};
+
+	if(!req_desc)
+		return;
+	dpriv = (struct rsasoc_req_desc_priv_data *)req_desc->lib_priv;
+
+	req_num--;
+	if(req_num >= dpriv->num_reqs)
+		return;
+
+	blk = dpriv->req_info[req_num].blksz_in_bits / 8;
+
+	cryptosoc_print("BlkszInBits %d  MaxReqs %d NumReqs %d InpSize %d ResSize %d\n", 
+			dpriv->req_info[req_num].blksz_in_bits,
+			dpriv->max_reqs, dpriv->num_reqs, 
+			dpriv->req_info[req_num].inp_size, 
+			dpriv->req_info[req_num].res_size);
+
+	mem = dpriv->req_info[req_num].eng_inp;
+
+	for(arg=0; arg < 3; arg++) {
+		cryptosoc_print("%s\n", p[arg]);
+		for(i = 0; i < blk; ) {
+			cryptosoc_print(" <%016llx>", *(_uint64_t *)(mem + i));
+			i += 8;
+			if((i % 32) == 0)
+				cryptosoc_print("\n");
+		}
+		cryptosoc_print("\n");
+		mem = mem + blk;
+	}
+	return;
+}
+
+
+/**
 * rsasoc_process_request - Send/Receive the descriptor info to/from 
 * the engine
 * @ctx : Pointer to the context(input). 
@@ -555,6 +602,7 @@ static inline int rsasoc_process_request(
 				rsp_vc, 
 				cryptosoc_virt_to_phys((unsigned long)rmem));
 
+		//rsasoc_dump_request_data(req_desc, 1);
 
 		if(!ctx) {
 			rv = cryptosoc_process_request(gen_type2, CRYPTOSOC_RSA, 
@@ -696,51 +744,5 @@ static inline void rsasoc_free_request_desc(struct rsasoc_request_desc *req_desc
 	cryptosoc_mem_free(req_desc);
 }
 
-/**
-* rsasoc_dump_request_data - Dump the input data in the engine format
-* @req_desc: Pointer to the request descriptor
-* @req_num: Request number
-*
-*/
-static inline void rsasoc_dump_request_data(
-		struct rsasoc_request_desc *req_desc, int req_num)
-{
-	struct rsasoc_req_desc_priv_data *dpriv;
-	int blk, i, arg;
-	char *mem;
-	char p[][4]={"x", "y", "n"};
-
-	if(!req_desc)
-		return;
-	dpriv = (struct rsasoc_req_desc_priv_data *)req_desc->lib_priv;
-
-	req_num--;
-	if(req_num >= dpriv->num_reqs)
-		return;
-
-	blk = dpriv->req_info[req_num].blksz_in_bits / 8;
-
-	cryptosoc_print("BlkszInBits %d  MaxReqs %d NumReqs %d InpSize %d ResSize %d\n", 
-			dpriv->req_info[req_num].blksz_in_bits,
-			dpriv->max_reqs, dpriv->num_reqs, 
-			dpriv->req_info[req_num].inp_size, 
-			dpriv->req_info[req_num].res_size);
-
-	mem = dpriv->req_info[req_num].eng_inp;
-
-	for(arg=0; arg < 3; arg++) {
-		cryptosoc_print("%s\n", p[arg]);
-		for(i = 0; i < blk; ) {
-			cryptosoc_print(" <%016llx>", *(_uint64_t *)(mem + i));
-			i += 8;
-			if((i % 32) == 0)
-				cryptosoc_print("\n");
-		}
-		cryptosoc_print("\n");
-		mem = mem + blk;
-	}
-	return;
-}
-
 #endif
 
diff --git a/arch/mips/netlogic/lib/seclib/saesoc_gen1_hal_defs.h b/arch/mips/netlogic/lib/seclib/saesoc_gen1_hal_defs.h
index f584123..7761111 100644
--- a/arch/mips/netlogic/lib/seclib/saesoc_gen1_hal_defs.h
+++ b/arch/mips/netlogic/lib/seclib/saesoc_gen1_hal_defs.h
@@ -323,7 +323,7 @@ static inline void saesoc_gen1_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
 static void saesoc_gen1_dump_cdesc(_uint64_t *cdescs, int ndescs)
 {
 	unsigned int type,mode;
-	_uint64_t cdesc = cdescs[0];
+	_uint64_t cdesc = be64_to_ccpu(cdescs[0]);
 
 	cryptosoc_print("\ncontrol description info:\n");
        	cryptosoc_print(" %-16s \n", "Desc");
@@ -355,7 +355,7 @@ static void saesoc_gen1_dump_cdesc(_uint64_t *cdescs, int ndescs)
 		int i;
 		cryptosoc_print("\nKey info:\n");
 		for(i = 1; i < ndescs; i++)
-			cryptosoc_print("  <%-16llx>", cdescs[i]);
+			cryptosoc_print("  <%-16llx>", be64_to_ccpu(cdescs[i]));
 		cryptosoc_print("\n");
 	}
 }
@@ -376,6 +376,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
 	desc1 = ddesc[nd++];
 	desc2 = ddesc[nd++];
 	desc3 = ddesc[nd++];
+	desc0 = be64_to_ccpu(desc0);
+	desc1 = be64_to_ccpu(desc1);
+	desc2 = be64_to_ccpu(desc2);
+	desc3 = be64_to_ccpu(desc3);
 
 	cryptosoc_print("\nData Descriptor info:\n");
 	cryptosoc_print(" %-16s %-16s %-16s %-16s\n",
@@ -431,6 +435,8 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
 	for (i=nd; i < ndescs - ndesfb_descs; ) {
 		desc0 = ddesc[i++];
 		desc1 = ddesc[i++];
+		desc0 = be64_to_ccpu(desc0);
+		desc1 = be64_to_ccpu(desc1);
 
 		cryptosoc_print(
 				"\nPacket Fragment info: Srcfrag %-16llx DstFrag %-16llx\n",
@@ -453,7 +459,7 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
 	if(ndesfb_descs) {
 		cryptosoc_print("\nDesigner Fb descs:\n");
 		for(; (i < ndescs); i++) 
-			cryptosoc_print("  %-16llx", ddesc[i]);
+			cryptosoc_print("  %-16llx", be64_to_ccpu(ddesc[i]));
 		cryptosoc_print("\n");
 	}
 	cryptosoc_print("\n");
@@ -472,13 +478,13 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
 
 #define saesoc_gen1_set_hash_type_mode( cdesc, hmac, type,	\
 		mode)				{		\
-	_uint64_t mask = (SAESOC_GEN1_SET_MASK(HASH_TYPE) | 		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(HASH_TYPE) | 		\
 			SAESOC_GEN1_SET_MASK(HASH_MODE) | 		\
-			SAESOC_GEN1_SET_MASK(HMAC) ); 		\
+			SAESOC_GEN1_SET_MASK(HMAC) )); 		\
 	cdesc = cdesc & ~mask; 						\
-	cdesc = cdesc | SAESOC_GEN1_SET_BITS(type,HASH_TYPE) | 	\
+	cdesc = cdesc | ccpu_to_be64((SAESOC_GEN1_SET_BITS(type,HASH_TYPE) | 	\
 		SAESOC_GEN1_SET_BITS(mode, HASH_MODE) |		\
-		SAESOC_GEN1_SET_BITS(hmac, HMAC);			\
+		SAESOC_GEN1_SET_BITS(hmac, HMAC)));			\
 	}
 
 /**
@@ -492,11 +498,11 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * are cleared and sets with the new values.
  */
 #define saesoc_gen1_set_cipher_type_mode( cdesc, type, mode) {	\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(CIPHER_TYPE) |		\
-			SAESOC_GEN1_SET_MASK(CIPHER_MODE) ; 		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(CIPHER_TYPE) |		\
+			SAESOC_GEN1_SET_MASK(CIPHER_MODE))) ; 		\
 	cdesc = cdesc & ~mask;						\
-	cdesc = cdesc | SAESOC_GEN1_SET_BITS(type, CIPHER_TYPE)|\
-	    SAESOC_GEN1_SET_BITS(mode, CIPHER_MODE) ;		\
+	cdesc = cdesc | ccpu_to_be64((SAESOC_GEN1_SET_BITS(type, CIPHER_TYPE)|\
+	    SAESOC_GEN1_SET_BITS(mode, CIPHER_MODE))) ;		\
 	}
 
 /**
@@ -505,9 +511,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * @cdesc        : ctrl Descriptor 
  */
 #define saesoc_gen1_set_hash_bypass(cdesc) {	\
-	 _uint64_t mask = SAESOC_GEN1_SET_MASK(HASH_TYPE); \
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(HASH_TYPE))); \
 	cdesc = cdesc & ~mask;					\
-	cdesc = cdesc | SAESOC_GEN1_SET_BITS(SAESOC_GEN1_HASH_BYPASS, HASH_TYPE); \
+	cdesc = cdesc | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS(SAESOC_GEN1_HASH_BYPASS, HASH_TYPE))); \
 }
 
 /**
@@ -516,9 +523,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * @cdesc        : ctrl Descriptor 
  */
 #define saesoc_gen1_set_cipher_bypass(cdesc) {	\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(CIPHER_TYPE); \
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(CIPHER_TYPE))); \
 	cdesc = cdesc & ~mask;					\
-	cdesc = cdesc | SAESOC_GEN1_SET_BITS(SAESOC_GEN1_CIPHER_BYPASS, CIPHER_TYPE); \
+	cdesc = cdesc | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS(SAESOC_GEN1_CIPHER_BYPASS, CIPHER_TYPE))); \
 }
 
 /**
@@ -532,12 +540,12 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * and arc4KeyLen are cleared and is set with the new values.
  */
 #define saesoc_gen1_set_arc4_param( cdesc, key_init, key_len){		\
-	_uint64_t mask = (SAESOC_GEN1_SET_MASK(ARC4_KEY_INIT) |	\
-			SAESOC_GEN1_SET_MASK(ARC4_KEY_LEN)); 		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(ARC4_KEY_INIT) |	\
+			SAESOC_GEN1_SET_MASK(ARC4_KEY_LEN))); 		\
 	cdesc = cdesc & ~mask;						\
-	cdesc = cdesc | 						\
+	cdesc = cdesc | ccpu_to_be64((						\
 	 SAESOC_GEN1_SET_BITS(key_init, ARC4_KEY_INIT) |		\
-		SAESOC_GEN1_SET_BITS(key_len, ARC4_KEY_LEN);	\
+		SAESOC_GEN1_SET_BITS(key_len, ARC4_KEY_LEN)));	\
 }
 
 /**
@@ -556,9 +564,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 
 #define saesoc_gen1_set_cfbmask( cdesc, cfbmask) {				\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(CFB_MASK);		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(CFB_MASK)));		\
 	cdesc = cdesc & ~mask;						\
-	cdesc = cdesc | SAESOC_GEN1_SET_BITS(cfbmask,CFB_MASK);	\
+	cdesc = cdesc | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS(cfbmask,CFB_MASK)));	\
 	}
 
 /**
@@ -570,10 +579,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * are cleared and is set with the new values.
  */
 #define saesoc_gen1_set_tls(ddesc0, tls_en) {			\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(TLS_ENABLE) | 		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(TLS_ENABLE)));  		\
 	ddesc0 = ddesc0 & ~mask;					\
-	ddesc0 = ddesc0 | 						\
-		SAESOC_GEN1_SET_BITS(tls_en, TLS_ENABLE);		\
+	ddesc0 = ddesc0 | ccpu_to_be64((						\
+		SAESOC_GEN1_SET_BITS(tls_en, TLS_ENABLE)));		\
 	}
 
 /**
@@ -585,11 +594,11 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * are cleared and is set with the new values.
  */
 #define saesoc_gen1_set_hash_srcsel(ddesc0, hash_src_sel) {			\
-	_uint64_t mask =  					\
-		SAESOC_GEN1_SET_MASK(HASH_SRC_SEL) ;			\
+	_uint64_t mask =  ccpu_to_be64((					\
+		SAESOC_GEN1_SET_MASK(HASH_SRC_SEL))) ;			\
 	ddesc0 = ddesc0 & ~mask;				\
-	ddesc0 =ddesc0 |					\
-		SAESOC_GEN1_SET_BITS(hash_src_sel,HASH_SRC_SEL);	\
+	ddesc0 =ddesc0 |	ccpu_to_be64((				\
+		SAESOC_GEN1_SET_BITS(hash_src_sel,HASH_SRC_SEL)));	\
 	}
 
 /**
@@ -601,11 +610,11 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * values.
  */
 #define saesoc_gen1_set_tag_dstaddr( ddesc0, tag_dst_addr){ 	\
-	_uint64_t mask =  					\
-		SAESOC_GEN1_SET_MASK(HASH_DEST_ADDR); \
+	_uint64_t mask = ccpu_to_be64(( 					\
+		SAESOC_GEN1_SET_MASK(HASH_DEST_ADDR))); \
 	ddesc0 = ddesc0 & ~mask;				\
-	ddesc0 =ddesc0 |					\
-		SAESOC_GEN1_SET_BITS(tag_dst_addr,HASH_DEST_ADDR); \
+	ddesc0 =ddesc0 | ccpu_to_be64((					\
+		SAESOC_GEN1_SET_BITS(tag_dst_addr,HASH_DEST_ADDR))); \
 	}	
 
 /**
@@ -617,9 +626,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * values.
  */
 #define saesoc_gen1_set_hash_l3allocate( ddesc0, hash_l3_allocate) {				\
-	_uint64_t mask =  SAESOC_GEN1_SET_MASK(HASH_L3_ALLOCATE);	\
+	_uint64_t mask =  ccpu_to_be64((SAESOC_GEN1_SET_MASK(HASH_L3_ALLOCATE)));	\
 	ddesc0 = ddesc0 & ~mask;					\
-	ddesc0 =ddesc0 | SAESOC_GEN1_SET_BITS(hash_l3_allocate,HASH_L3_ALLOCATE);\
+	ddesc0 =ddesc0 | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS(hash_l3_allocate,HASH_L3_ALLOCATE)));\
 	}	
 
 /**
@@ -632,16 +642,16 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * values.
  */
 #define saesoc_gen1_set_cipher_enc_ivlen( ddesc0, encrypt , iv_len){		\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(CIPHER_ENCRYPT)|        \
-		SAESOC_GEN1_SET_MASK(IVLEN);				\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(CIPHER_ENCRYPT)|        \
+		SAESOC_GEN1_SET_MASK(IVLEN)));				\
 	ddesc0 = ddesc0 & ~mask;					\
 	if( iv_len ) {							\
-		ddesc0 = ddesc0 |					\
+		ddesc0 = ddesc0 |ccpu_to_be64((					\
 			 SAESOC_GEN1_SET_BITS(encrypt,CIPHER_ENCRYPT) | \
-		SAESOC_GEN1_SET_BITS((iv_len-1),IVLEN);  		\
+		SAESOC_GEN1_SET_BITS((iv_len-1),IVLEN)));  		\
 	}else								\
-		ddesc0 = ddesc0 | 					\
-			 SAESOC_GEN1_SET_BITS(encrypt,CIPHER_ENCRYPT);  \
+		ddesc0 = ddesc0 | ccpu_to_be64((					\
+			 SAESOC_GEN1_SET_BITS(encrypt,CIPHER_ENCRYPT)));  \
 	}
 
 /**
@@ -653,9 +663,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 
 #define saesoc_gen1_set_cipher_len( ddesc1, cipher_len) {			\
-	 _uint64_t mask=SAESOC_GEN1_SET_MASK(CIPHER_LEN);		\
+	 _uint64_t mask= ccpu_to_be64((SAESOC_GEN1_SET_MASK(CIPHER_LEN)));		\
 	ddesc1 = ddesc1 & ~mask;					\
-	ddesc1 = ddesc1 | SAESOC_GEN1_SET_BITS((cipher_len-1),CIPHER_LEN);	\
+	ddesc1 = ddesc1 | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS((cipher_len-1),CIPHER_LEN)));	\
 	}
 
 /**
@@ -666,9 +677,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * sets the hash length in the data descriptor 1
  */
 #define saesoc_gen1_set_hash_len( ddesc1, hash_len) {				\
-	_uint64_t mask=SAESOC_GEN1_SET_MASK(HASH_LEN);		\
+	_uint64_t mask=ccpu_to_be64((SAESOC_GEN1_SET_MASK(HASH_LEN)));		\
 	ddesc1 = ddesc1 & ~mask;					\
-	ddesc1 = ddesc1 | SAESOC_GEN1_SET_BITS((hash_len-1),HASH_LEN);	\
+	ddesc1 = ddesc1 | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS((hash_len-1),HASH_LEN)));	\
 	}
 
 /**
@@ -682,17 +694,17 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 #define saesoc_gen1_set_hash_offset_clobber( ddesc2, 	 	\
 		hash_offset, hash_clobber) {				\
-	_uint64_t mask= SAESOC_GEN1_SET_MASK( HASH_OFFSET) |		\
-		SAESOC_GEN1_SET_MASK( HASH_CLOBBER );			\
+	_uint64_t mask= ccpu_to_be64((SAESOC_GEN1_SET_MASK( HASH_OFFSET) |		\
+		SAESOC_GEN1_SET_MASK( HASH_CLOBBER )));			\
 	ddesc2 = ddesc2 & ~mask;					\
-	ddesc2 = ddesc2 |						\
+	ddesc2 = ddesc2 |	ccpu_to_be64((					\
 		SAESOC_GEN1_SET_BITS( hash_offset,HASH_OFFSET) |	\
-       		SAESOC_GEN1_SET_BITS(hash_clobber, HASH_CLOBBER);	\
+       		SAESOC_GEN1_SET_BITS(hash_clobber, HASH_CLOBBER)));	\
 	}	
 
 
 #define saesoc_gen1_get_hash_clobber( ddesc2, clob) { \
-	_uint64_t mask = SAESOC_GEN1_SET_MASK( HASH_CLOBBER ); \
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK( HASH_CLOBBER ))); \
 	clob = ddesc2 & mask; \
 }
 
@@ -704,10 +716,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 
 #define saesoc_gen1_set_hash_bitcnt( ddesc2, hash_bitcnt){		\
-	_uint64_t mask= SAESOC_GEN1_SET_MASK( HASH_BIT_CNT);		\
+	_uint64_t mask= ccpu_to_be64((SAESOC_GEN1_SET_MASK( HASH_BIT_CNT)));		\
 	ddesc2 = ddesc2 & ~mask;					\
-	ddesc2 = ddesc2 |						\
-		SAESOC_GEN1_SET_BITS(hash_bitcnt,HASH_BIT_CNT)	;	\
+	ddesc2 = ddesc2 |	ccpu_to_be64((					\
+		SAESOC_GEN1_SET_BITS(hash_bitcnt,HASH_BIT_CNT)))	;	\
 }
 
 /**
@@ -720,10 +732,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 #define saesoc_gen1_set_cipher_ivoffset( ddesc2, 	\
 		cipher_iv_offset) {				\
-	_uint64_t mask= SAESOC_GEN1_SET_MASK( IV_OFFSET );			\
+	_uint64_t mask= ccpu_to_be64((SAESOC_GEN1_SET_MASK( IV_OFFSET )));			\
 	ddesc2 = ddesc2 & ~mask;					\
-	ddesc2 = ddesc2 |						\
-       		SAESOC_GEN1_SET_BITS(cipher_iv_offset, IV_OFFSET);	\
+	ddesc2 = ddesc2 |	ccpu_to_be64((					\
+       		SAESOC_GEN1_SET_BITS(cipher_iv_offset, IV_OFFSET)));	\
 	}	
 
 /**
@@ -735,10 +747,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 #define saesoc_gen1_set_cipher_offset( ddesc2, 	\
 		cipher_offset) {				\
-	_uint64_t mask= SAESOC_GEN1_SET_MASK( CIPHER_OFFSET) ;	\
+	_uint64_t mask= ccpu_to_be64((SAESOC_GEN1_SET_MASK( CIPHER_OFFSET))) ;	\
 	ddesc2 = ddesc2 & ~mask;					\
-	ddesc2 = ddesc2 |						\
-		SAESOC_GEN1_SET_BITS(cipher_offset,CIPHER_OFFSET) ;	\
+	ddesc2 = ddesc2 |	ccpu_to_be64((					\
+		SAESOC_GEN1_SET_BITS(cipher_offset,CIPHER_OFFSET))) ;	\
 	}	
 
 
@@ -751,10 +763,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 
 #define saesoc_gen1_set_cipher_bitcnt( ddesc2, cipher_bitcnt){		\
-	_uint64_t mask= SAESOC_GEN1_SET_MASK( CIPHER_BIT_CNT);		\
+	_uint64_t mask= ccpu_to_be64((SAESOC_GEN1_SET_MASK( CIPHER_BIT_CNT)));		\
 	ddesc2 = ddesc2 & ~mask;					\
-	ddesc2 = ddesc2 |						\
-		SAESOC_GEN1_SET_BITS(cipher_bitcnt,CIPHER_BIT_CNT);	\
+	ddesc2 = ddesc2 |	ccpu_to_be64((					\
+		SAESOC_GEN1_SET_BITS(cipher_bitcnt,CIPHER_BIT_CNT)));	\
 }
 
 /**
@@ -767,10 +779,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * freeback destination. 
  */
 #define saesoc_gen1_set_desfb( ddesc3, desfb_dst_id) {			\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(FB_DEST_ID);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(FB_DEST_ID)));	\
 	ddesc3 = ddesc3 & ~mask; 					\
-	ddesc3 = ddesc3 | 						\
-		SAESOC_GEN1_SET_BITS(desfb_dst_id, FB_DEST_ID);	\
+	ddesc3 = ddesc3 | ccpu_to_be64((						\
+		SAESOC_GEN1_SET_BITS(desfb_dst_id, FB_DEST_ID)));	\
 	}
 
 /**
@@ -783,9 +795,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * Sets the tag length.
  */
 #define saesoc_gen1_set_tag_len( ddesc3, tag_len) {				\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(TAGLEN);		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(TAGLEN)));		\
 	ddesc3 = ddesc3 & ~mask;					\
-	ddesc3 = ddesc3 | SAESOC_GEN1_SET_BITS(tag_len, TAGLEN);	\
+	ddesc3 = ddesc3 | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS(tag_len, TAGLEN)));	\
 	}
 		
 
@@ -798,11 +811,11 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * Applicable only for arc4.
  */
 #define saesoc_gen1_set_arc4_l3param(ddesc3, arc4_l3_alloc) {	\
-	 _uint64_t mask = 					\
-			SAESOC_GEN1_SET_MASK(ARC4_L3_ALLOC);		\
+	 _uint64_t mask = ccpu_to_be64((					\
+			SAESOC_GEN1_SET_MASK(ARC4_L3_ALLOC)));		\
 	ddesc3 = ddesc3 & ~mask;					\
-	ddesc3 = ddesc3 | 						\
-		SAESOC_GEN1_SET_BITS(arc4_l3_alloc,ARC4_L3_ALLOC);	\
+	ddesc3 = ddesc3 | ccpu_to_be64((						\
+		SAESOC_GEN1_SET_BITS(arc4_l3_alloc,ARC4_L3_ALLOC)));	\
 	}
 
 /**
@@ -814,10 +827,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * Applicable only for arc4.
  */
 #define saesoc_gen1_set_arc4_savestate(ddesc3, arc4_save_state) {	\
-	 _uint64_t mask = SAESOC_GEN1_SET_MASK(ARC4_SAVE_SATE_EN) ;	\
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(ARC4_SAVE_SATE_EN))) ;	\
 	ddesc3 = ddesc3 & ~mask;					\
-	ddesc3 = ddesc3 | 						\
-	SAESOC_GEN1_SET_BITS(arc4_save_state, ARC4_SAVE_SATE_EN);	\
+	ddesc3 = ddesc3 | ccpu_to_be64((						\
+	SAESOC_GEN1_SET_BITS(arc4_save_state, ARC4_SAVE_SATE_EN)));	\
 	}
 
 
@@ -831,10 +844,10 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * enables/disbales extended key pad for HMAC. 
  */
 #define saesoc_gen1_set_hmac_extkeypad( ddesc3, hmac_extpad_key) {	\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(HMAC_EXTPAD_KEY);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(HMAC_EXTPAD_KEY)));	\
 	ddesc3 = ddesc3 & ~mask;					\
-	ddesc3 = ddesc3 | 						\
-		SAESOC_GEN1_SET_BITS(hmac_extpad_key,HMAC_EXTPAD_KEY);	\
+	ddesc3 = ddesc3 | ccpu_to_be64((						\
+		SAESOC_GEN1_SET_BITS(hmac_extpad_key,HMAC_EXTPAD_KEY)));	\
 	}
 
 /**
@@ -847,8 +860,8 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * Sets the length and src address for payload.
  */
 #define saesoc_gen1_set_src_frag( ddesc4, frag_len, src_addr) {	\
-	ddesc4 = SAESOC_GEN1_SET_BITS( (frag_len-1), PAYLOEAD_LEN) |	\
-		SAESOC_GEN1_SET_BITS( src_addr, PAYLOEAD_SRC_ADDR);	\
+	ddesc4 = ccpu_to_be64((SAESOC_GEN1_SET_BITS( (frag_len-1), PAYLOEAD_LEN) |	\
+		SAESOC_GEN1_SET_BITS( src_addr, PAYLOEAD_SRC_ADDR)));	\
 	}
 
 
@@ -861,11 +874,12 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  * Clears and sets payload destination length and address 
  */
 #define saesoc_gen1_set_dst_frag(ddesc5, frag_len, dst_addr) { \
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(DEST_PAYLOAD_LEN) |	\
-			SAESOC_GEN1_SET_MASK(CIPHER_DEST_ADDR);		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(DEST_PAYLOAD_LEN) |	\
+			SAESOC_GEN1_SET_MASK(CIPHER_DEST_ADDR)));		\
 	ddesc5 = ddesc5 & ~mask;					\
-	ddesc5 = ddesc5 |SAESOC_GEN1_SET_BITS((frag_len-1),DEST_PAYLOAD_LEN) | \
-		SAESOC_GEN1_SET_BITS(dst_addr, CIPHER_DEST_ADDR);		\
+	ddesc5 = ddesc5 | ccpu_to_be64(( \
+			SAESOC_GEN1_SET_BITS((frag_len-1),DEST_PAYLOAD_LEN) | \
+		SAESOC_GEN1_SET_BITS(dst_addr, CIPHER_DEST_ADDR)));		\
 	}
 
 /**
@@ -878,11 +892,11 @@ static void saesoc_gen1_dump_ddesc(_uint64_t *ddesc, int ndescs, int ndesfb_desc
  */
 #define saesoc_gen1_set_cipher_l3param(ddesc5, cipher_l3_allocate,		\
 		cipher_clobber) {					\
-	_uint64_t mask = SAESOC_GEN1_SET_MASK(CIPHER_L3_ALLOC) |	\
-			SAESOC_GEN1_SET_MASK(CIPHER_CLOBBER);		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN1_SET_MASK(CIPHER_L3_ALLOC) |	\
+			SAESOC_GEN1_SET_MASK(CIPHER_CLOBBER)));		\
 	ddesc5 = ddesc5 & ~mask;					\
-	ddesc5 = SAESOC_GEN1_SET_BITS(cipher_l3_allocate,CIPHER_L3_ALLOC) |	\
-	   	SAESOC_GEN1_SET_BITS(cipher_clobber, CIPHER_CLOBBER);	\
+	ddesc5 = ccpu_to_be64((SAESOC_GEN1_SET_BITS(cipher_l3_allocate,CIPHER_L3_ALLOC) |	\
+	   	SAESOC_GEN1_SET_BITS(cipher_clobber, CIPHER_CLOBBER)));	\
 	}
 
 /**
diff --git a/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h b/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h
index 200c227..600dce7 100644
--- a/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h
+++ b/arch/mips/netlogic/lib/seclib/saesoc_gen2_hal_defs.h
@@ -356,8 +356,8 @@ enum saesoc_gen2_hash_type {
 static void  saesoc_gen2_dump_cdesc(_uint64_t *cdescs, int ndescs)
 {
 	unsigned int type, mode, ivmode;
-	_uint64_t cdesc0 = cdescs[0];
-	_uint64_t cdesc1 = cdescs[1];
+	_uint64_t cdesc0 = be64_to_ccpu((cdescs[0]));
+	_uint64_t cdesc1 = be64_to_ccpu((cdescs[1]));
 
 
 	cryptosoc_print("\nCtrl Descriptor info:\n");
@@ -450,7 +450,7 @@ static void  saesoc_gen2_dump_cdesc(_uint64_t *cdescs, int ndescs)
 		int i;
 		cryptosoc_print("\nKey info:\n");
 		for(i = 2; i < ndescs; i++)
-			cryptosoc_print("  <%-16llx>", cdescs[i]);
+			cryptosoc_print("  <%-16llx>", be64_to_ccpu((cdescs[i])));
 		cryptosoc_print("\n");
 	}
 }
@@ -473,6 +473,8 @@ static void saesoc_gen2_dump_ddesc(_uint64_t *ddesc, int ndescs,
 
 	desc0 = ddesc[nd++];
 	desc1 = ddesc[nd++];
+	desc0 = be64_to_ccpu(desc0);
+	desc1 = be64_to_ccpu(desc1);
 	cryptosoc_print("\nData Descriptor info:\n");
 	cryptosoc_print("  %-16s %-16s \n", "Desc0", "Desc1");
 	cryptosoc_print("  %-16llx %-16llx \n", desc0, desc1);
@@ -495,19 +497,21 @@ static void saesoc_gen2_dump_ddesc(_uint64_t *ddesc, int ndescs,
 	if(hash_iv_mode == 1) {
 		cryptosoc_print("\nHash IV info:\n");
 		cryptosoc_print("  %-16s %-16s \n", "Desc0", "Desc1");
-		cryptosoc_print("  %-16llx %-16llx \n", ddesc[nd], ddesc[nd + 1]);
+		cryptosoc_print("  %-16llx %-16llx \n", be64_to_ccpu((ddesc[nd])), 
+				be64_to_ccpu((ddesc[nd + 1])));
 		nd += 2;
 	}
 
 	if(cipher_iv_mode == 1)  {
 		cryptosoc_print("\nCipher IV info:\n");
 		cryptosoc_print("  %-16s %-16s \n", "Desc0", "Desc1");
-		cryptosoc_print("  %-16llx %-16llx \n", ddesc[nd], ddesc[nd + 1]);
+		cryptosoc_print("  %-16llx %-16llx \n", be64_to_ccpu((ddesc[nd])), 
+				be64_to_ccpu((ddesc[nd + 1])));
 		nd += 2;
 	}
 
 	for(i = nd; i<ndescs-ndesfb_descs; i++) {	
-		desc = ddesc[i];
+		desc = be64_to_ccpu((ddesc[i]));
 		cryptosoc_print("\nPacket Fragment info (ind %d Entry %llx):\n", i, desc);
 		cryptosoc_print("  %-16s %-16s %-16s %-16s %-16s\n", 
 				"DstFrag", "WriteFragDis", "LastFrag", "FragLen", "FragAddr");
@@ -521,7 +525,7 @@ static void saesoc_gen2_dump_ddesc(_uint64_t *ddesc, int ndescs,
 	if(ndesfb_descs) {
 		cryptosoc_print("\nDesigner Fb descs:\n");
 		for(; (i < ndescs); i++) 
-			cryptosoc_print("  %-16llx", ddesc[i]);
+			cryptosoc_print("  %-16llx", be64_to_ccpu((ddesc[i])));
 		cryptosoc_print("\n");
 	}
 	cryptosoc_print("\n");
@@ -585,23 +589,23 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
 #define saesoc_gen2_set_hash_type_mode_offset( cdesc0, type, mode,	\
 	hmac_key_len, src_sel, iv_offset, aad_offset, iv_mode,	\
 		hmac_key_pad_en){ 					\
-	_uint64_t mask = (SAESOC_GEN2_SET_MASK(HASH_TYPE) | 		\
+	_uint64_t mask = ccpu_to_be64(((SAESOC_GEN2_SET_MASK(HASH_TYPE) | 		\
 			SAESOC_GEN2_SET_MASK(HASH_MODE) | 		\
 			SAESOC_GEN2_SET_MASK(HMAC_KEY_LEN) | 		\
 			SAESOC_GEN2_SET_MASK(HASH_SRC_SEL) |		\
 			SAESOC_GEN2_SET_MASK(HASH_IV_OFFSET) | 	\
 			SAESOC_GEN2_SET_MASK(AAD_OFFSET) | 		\
 			SAESOC_GEN2_SET_MASK(HASH_IV_MODE) | 		\
-			SAESOC_GEN2_SET_MASK(HMAC_HW_KEY_PAD_ENABLE));\
+			SAESOC_GEN2_SET_MASK(HMAC_HW_KEY_PAD_ENABLE))));\
 	cdesc0 = cdesc0 & ~mask; 					\
-	cdesc0 = cdesc0 | SAESOC_GEN2_SET_BITS(type,HASH_TYPE) | 	\
+	cdesc0 = cdesc0 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(type,HASH_TYPE) | 	\
 		SAESOC_GEN2_SET_BITS(mode, HASH_MODE) |		\
 		SAESOC_GEN2_SET_BITS(hmac_key_len, HMAC_KEY_LEN)|	\
 		SAESOC_GEN2_SET_BITS(src_sel, HASH_SRC_SEL) | 	\
 		SAESOC_GEN2_SET_BITS(iv_offset, HASH_IV_OFFSET) | \
 		SAESOC_GEN2_SET_BITS(aad_offset, AAD_OFFSET) | 	\
 		SAESOC_GEN2_SET_BITS(iv_mode, HASH_IV_MODE) | 	\
-	SAESOC_GEN2_SET_BITS(hmac_key_pad_en, HMAC_HW_KEY_PAD_ENABLE);	\
+	SAESOC_GEN2_SET_BITS(hmac_key_pad_en, HMAC_HW_KEY_PAD_ENABLE)));	\
 	}
 
 /**
@@ -621,17 +625,17 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  */
 #define saesoc_gen2_set_cipher_type_mode_offset( cdesc1, encrypt, type,\
 		mode, iv_offset, iv_mode){		\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(CIPHER_ENCRYPT) | 	\
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(CIPHER_ENCRYPT) | 	\
 			SAESOC_GEN2_SET_MASK(CIPHER_TYPE) |		\
 			SAESOC_GEN2_SET_MASK(CIPHER_MODE) | 		\
 			SAESOC_GEN2_SET_MASK(CIPHER_IV_OFFSET) |  	\
-			SAESOC_GEN2_SET_MASK(CIPHER_IV_MODE);		\
+			SAESOC_GEN2_SET_MASK(CIPHER_IV_MODE)));		\
 	cdesc1 = cdesc1 & ~mask;					\
-	cdesc1 = cdesc1 |SAESOC_GEN2_SET_BITS(encrypt,CIPHER_ENCRYPT)|\
+	cdesc1 = cdesc1 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(encrypt,CIPHER_ENCRYPT)|\
 	    SAESOC_GEN2_SET_BITS(type, CIPHER_TYPE) | 		\
 	    SAESOC_GEN2_SET_BITS(mode, CIPHER_MODE) |		\
 	    SAESOC_GEN2_SET_BITS(iv_offset, CIPHER_IV_OFFSET) |	\
-	    SAESOC_GEN2_SET_BITS(iv_mode, CIPHER_IV_MODE);	\
+	    SAESOC_GEN2_SET_BITS(iv_mode, CIPHER_IV_MODE)));	\
 	}
 
 /**
@@ -640,9 +644,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * @cdesc0        : ctrl Descriptor 0 
  */
 #define saesoc_gen2_set_hash_bypass(cdesc0) {	\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(HASH_TYPE); \
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(HASH_TYPE))); \
 	cdesc0 = cdesc0 & ~mask;					\
-	cdesc0 = cdesc0 | SAESOC_GEN2_SET_BITS(SAESOC_GEN2_HASH_BYPASS, HASH_TYPE); \
+	cdesc0 = cdesc0 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(SAESOC_GEN2_HASH_BYPASS, HASH_TYPE))); \
 }
 
 /**
@@ -651,9 +655,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * @cdesc0        : ctrl Descriptor 0 
  */
 #define saesoc_gen2_set_cipher_bypass(cdesc1) {	\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(CIPHER_TYPE); \
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(CIPHER_TYPE))); \
 	cdesc1 = cdesc1 & ~mask;					\
-	cdesc1 = cdesc1 | SAESOC_GEN2_SET_BITS(SAESOC_GEN2_CIPHER_BYPASS, CIPHER_TYPE); \
+	cdesc1 = cdesc1 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(SAESOC_GEN2_CIPHER_BYPASS, CIPHER_TYPE))); \
 }
 
 /**
@@ -667,12 +671,12 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * and arc4KeyLen are cleared and is set with the new values.
  */
 #define saesoc_gen2_set_arc4_param( cdesc0, arc4_state_l3_allocate, key_len){\
-	_uint64_t mask = (SAESOC_GEN2_SET_MASK(ARC4_L3_ALLOCATE) |	\
-			SAESOC_GEN2_SET_MASK(ARC4_KEY_LEN)); 		\
+	_uint64_t mask = ccpu_to_be64(((SAESOC_GEN2_SET_MASK(ARC4_L3_ALLOCATE) |	\
+			SAESOC_GEN2_SET_MASK(ARC4_KEY_LEN)))); 		\
 	cdesc0 = cdesc0 & ~mask;					\
-	cdesc0 = cdesc0 | 						\
+	cdesc0 = cdesc0 | 	ccpu_to_be64((					\
 	 SAESOC_GEN2_SET_BITS(arc4_state_l3_allocate, ARC4_L3_ALLOCATE) |\
-		SAESOC_GEN2_SET_BITS(key_len, ARC4_KEY_LEN);	\
+		SAESOC_GEN2_SET_BITS(key_len, ARC4_KEY_LEN)));	\
 }
 
 /**
@@ -691,9 +695,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  */
 
 #define saesoc_gen2_set_cfbmask( cdesc1, cfbmask) {				\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(CFB_MASK);		\
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(CFB_MASK)));		\
 	cdesc1 = cdesc1 & ~mask;					\
-	cdesc1 = cdesc1 | SAESOC_GEN2_SET_BITS(cfbmask,CFB_MASK);		\
+	cdesc1 = cdesc1 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(cfbmask,CFB_MASK)));		\
 	}
 
 /**
@@ -705,9 +709,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * and is set with the new values.
  */
 #define saesoc_gen2_set_tls(cdesc0, tls_enable) {			\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(TLS_ENABLE);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(TLS_ENABLE)));	\
 	cdesc0 = cdesc0 & ~mask;					\
-	cdesc0 = cdesc0 | SAESOC_GEN2_SET_BITS(tls_enable,TLS_ENABLE);	\
+	cdesc0 = cdesc0 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(tls_enable,TLS_ENABLE)));	\
 	}
 
 /**
@@ -728,18 +732,18 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  */
 #define saesoc_gen2_set_l3param(cdesc0, data_out_l3_alloc, data_out_clobber,		\
 		wr_modify_only_en, hash_l3_allocate, hash_clobber) {	\
-	_uint64_t mask = (SAESOC_GEN2_SET_MASK(DATA_OUT_L3_ALLOCATE) | 	\
+	_uint64_t mask = ccpu_to_be64(((SAESOC_GEN2_SET_MASK(DATA_OUT_L3_ALLOCATE) | 	\
 			SAESOC_GEN2_SET_MASK(DATA_OUT_CLOBBER)	 |	\
 			SAESOC_GEN2_SET_MASK(WR_MODI_ONLY_EN) | 	\
 			SAESOC_GEN2_SET_MASK(HASH_L3_ALLOCATE) | 	\
-			SAESOC_GEN2_SET_MASK(HASH_CLOBBER));	\
+			SAESOC_GEN2_SET_MASK(HASH_CLOBBER))));	\
 	cdesc0 = cdesc0 & ~mask;					\
-	cdesc0 = cdesc0 | 						\
+	cdesc0 = cdesc0 | ccpu_to_be64((						\
 		SAESOC_GEN2_SET_BITS(data_out_l3_alloc, DATA_OUT_L3_ALLOCATE)|	\
 		SAESOC_GEN2_SET_BITS(data_out_clobber, DATA_OUT_CLOBBER) |	\
 		SAESOC_GEN2_SET_BITS(wr_modify_only_en, WR_MODI_ONLY_EN)|\
 		SAESOC_GEN2_SET_BITS(hash_l3_allocate, HASH_L3_ALLOCATE)|\
-		SAESOC_GEN2_SET_BITS(hash_clobber, HASH_CLOBBER); 	\
+		SAESOC_GEN2_SET_BITS(hash_clobber, HASH_CLOBBER))); 	\
 	}
 
 /**
@@ -755,12 +759,12 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  */
 #define saesoc_gen2_set_hash_mutemask( cdesc0, hash_mute_mask_sel, 		\
 			hash_mute_mask_en) {				\
-	_uint64_t mask = (SAESOC_GEN2_SET_MASK(HASH_MUTE_MASK_SEL) | 	\
-			 SAESOC_GEN2_SET_MASK(HASH_MUTE_MASK_ENABLE));\
+	_uint64_t mask = ccpu_to_be64(((SAESOC_GEN2_SET_MASK(HASH_MUTE_MASK_SEL) | 	\
+			 SAESOC_GEN2_SET_MASK(HASH_MUTE_MASK_ENABLE))));\
 	cdesc0 = cdesc0 & ~mask;					\
-	cdesc0 = cdesc0 | 						\
+	cdesc0 = cdesc0 | ccpu_to_be64((						\
 	  SAESOC_GEN2_SET_BITS(hash_mute_mask_sel, HASH_MUTE_MASK_SEL) |	\
-	  SAESOC_GEN2_SET_BITS(hash_mute_mask_en, HASH_MUTE_MASK_ENABLE);\
+	  SAESOC_GEN2_SET_BITS(hash_mute_mask_en, HASH_MUTE_MASK_ENABLE)));\
 	}
 
 
@@ -775,10 +779,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * bytes. 
  */
 #define saesoc_gen2_set_hash_addllen(cdesc0, addl_hash_len) {			\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(ADDL_HASH_LEN) ; 	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(ADDL_HASH_LEN))) ; 	\
 	cdesc0 = cdesc0 & ~mask;					\
-	cdesc0 = cdesc0 | 						\
-		SAESOC_GEN2_SET_BITS(addl_hash_len, ADDL_HASH_LEN) ;	\
+	cdesc0 = cdesc0 | ccpu_to_be64((						\
+		SAESOC_GEN2_SET_BITS(addl_hash_len, ADDL_HASH_LEN))) ;	\
 	}								
 	
 /**
@@ -792,10 +796,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * is cleared and is set with the new values. 
  */
 #define saesoc_gen2_set_rabinfnprint(cdesc0, rabin_fprint_out_en) {		\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(RABIN_FINGERPRINT);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(RABIN_FINGERPRINT)));	\
 	cdesc0 = cdesc0 & ~mask; 					\
-	cdesc0 = cdesc0 | 						\
-	SAESOC_GEN2_SET_BITS(rabin_fprint_out_en, RABIN_FINGERPRINT);	\
+	cdesc0 = cdesc0 | ccpu_to_be64((						\
+	SAESOC_GEN2_SET_BITS(rabin_fprint_out_en, RABIN_FINGERPRINT)));	\
 	}
 
 /**
@@ -808,10 +812,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * hash and cipher operations.
  */
 #define saesoc_gen2_set_payload_offset( cdesc1, payload_offset) {		\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(PAYLOAD_OFFSET);	\
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(PAYLOAD_OFFSET)));	\
 	cdesc1 = cdesc1 & ~mask;					\
-	cdesc1 = cdesc1 | 						\
-	SAESOC_GEN2_SET_BITS(payload_offset, PAYLOAD_OFFSET);		\
+	cdesc1 = cdesc1 | ccpu_to_be64((						\
+	SAESOC_GEN2_SET_BITS(payload_offset, PAYLOAD_OFFSET)));		\
 	}
 
 /** 
@@ -832,18 +836,18 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  */
 #define saesoc_gen2_set_tag_offset_len(cdesc1, chk_tag_en, tag_in_loc_sel,	\
 			tag_out_loc_sel, tag_in_offset, tag_len) {					\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(CHECK_TAG_ENABLE) | 	\
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(CHECK_TAG_ENABLE) | 	\
 			SAESOC_GEN2_SET_MASK(TAG_IN_LOC_SEL) | 	\
 			SAESOC_GEN2_SET_MASK(TAG_OUT_LOC_SEL) | 	\
 			SAESOC_GEN2_SET_MASK(TAGIN_OFFSET)	|	\
-			SAESOC_GEN2_SET_MASK(TAG_LEN);	\
+			SAESOC_GEN2_SET_MASK(TAG_LEN)));	\
 	cdesc1 = cdesc1 & ~mask;					\
-	cdesc1 = cdesc1 | 						\
+	cdesc1 = cdesc1 | ccpu_to_be64((						\
 		SAESOC_GEN2_SET_BITS(chk_tag_en, CHECK_TAG_ENABLE) |	\
 		SAESOC_GEN2_SET_BITS(tag_in_loc_sel, TAG_IN_LOC_SEL) |	\
 		SAESOC_GEN2_SET_BITS(tag_out_loc_sel, TAG_OUT_LOC_SEL) |	\
 		SAESOC_GEN2_SET_BITS(tag_in_offset, TAGIN_OFFSET) |		\
-		SAESOC_GEN2_SET_BITS(tag_len, TAG_LEN);	\
+		SAESOC_GEN2_SET_BITS(tag_len, TAG_LEN)));	\
 	}
 	
 /**
@@ -855,10 +859,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * This should only be set for TLS packets or IPsec packets.
  */
 #define saesoc_gen2_enable_cipher_pad( cdesc1, cipher_pad_en) {			\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(CIPHER_PAD_ENABLE);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(CIPHER_PAD_ENABLE)));	\
 	cdesc1 = cdesc1 & ~mask;					\
-	cdesc1 = cdesc1 | 						\
-		SAESOC_GEN2_SET_BITS(cipher_pad_en, CIPHER_PAD_ENABLE);	\
+	cdesc1 = cdesc1 | ccpu_to_be64((						\
+		SAESOC_GEN2_SET_BITS(cipher_pad_en, CIPHER_PAD_ENABLE)));	\
 	}
 
 /**
@@ -871,9 +875,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * sets the payload length in bytes.
  */
 #define saesoc_gen2_set_payload_len( ddesc0, payload_len) {			\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(PAYLOAD_LEN);		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(PAYLOAD_LEN)));		\
 	ddesc0 = ddesc0 & ~mask;					\
-	ddesc0 = ddesc0 |SAESOC_GEN2_SET_BITS(payload_len,PAYLOAD_LEN);\
+	ddesc0 = ddesc0 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(payload_len,PAYLOAD_LEN)));\
 	}
 
 /**
@@ -887,9 +891,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * sets the cipher pad value.
  */
 #define saesoc_gen2_set_cipher_padval( ddesc0, cipher_pad_val) {		\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(CIPHER_PAD_VAL);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(CIPHER_PAD_VAL)));	\
 	ddesc0 = ddesc0 & ~mask;					\
-	ddesc0=ddesc0|SAESOC_GEN2_SET_BITS(cipher_pad_val,CIPHER_PAD_VAL);\
+	ddesc0=ddesc0| ccpu_to_be64((SAESOC_GEN2_SET_BITS(cipher_pad_val,CIPHER_PAD_VAL)));\
 	}
 
 /**
@@ -901,9 +905,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * sets the dditionally authenticated data length in bytes.
  */
 #define saesoc_gen2_set_aadlen( ddesc0, aad_len) {				\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(AADLEN);		\
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(AADLEN)));		\
 	ddesc0 = ddesc0 & ~mask;					\
-	ddesc0 = ddesc0 | SAESOC_GEN2_SET_BITS(aad_len, AADLEN);	\
+	ddesc0 = ddesc0 | ccpu_to_be64((SAESOC_GEN2_SET_BITS(aad_len, AADLEN)));	\
 	}
 
 /**
@@ -916,10 +920,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * Applicable only for arc4.
  */
 #define saesoc_gen2_set_arc4_savestate(ddesc1, arc4_save_state) {			\
-	 _uint64_t mask = SAESOC_GEN2_SET_MASK(ARC4_SAVE_SATE_EN);	\
+	 _uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(ARC4_SAVE_SATE_EN)));	\
 	ddesc1 = ddesc1 & ~mask;					\
-	ddesc1 = ddesc1 | 						\
-	SAESOC_GEN2_SET_BITS(arc4_save_state, ARC4_SAVE_SATE_EN);	\
+	ddesc1 = ddesc1 | ccpu_to_be64((						\
+	SAESOC_GEN2_SET_BITS(arc4_save_state, ARC4_SAVE_SATE_EN)));	\
 	}
 
 
@@ -934,10 +938,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * full byte.
  */
 #define saesoc_gen2_set_payload_bitcnt( ddesc1, payload_bitcnt){		\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(PAY_LOAD_BIT_CNT);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(PAY_LOAD_BIT_CNT)));	\
 	ddesc1 = ddesc1 & ~mask; 					\
-	ddesc1 = ddesc1 | 						\
-		SAESOC_GEN2_SET_BITS(payload_bitcnt, PAY_LOAD_BIT_CNT);\
+	ddesc1 = ddesc1 | ccpu_to_be64((						\
+		SAESOC_GEN2_SET_BITS(payload_bitcnt, PAY_LOAD_BIT_CNT)));\
 	}
 
 /**
@@ -951,10 +955,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * freeback destination. 
  */
 #define saesoc_gen2_set_desfb( ddesc1, desfb_dst_id) {			\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(DESC_FB_DEST_ID);	\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(DESC_FB_DEST_ID)));	\
 	ddesc1 = ddesc1 & ~mask; 					\
-	ddesc1 = ddesc1 | 						\
-		SAESOC_GEN2_SET_BITS(desfb_dst_id, DESC_FB_DEST_ID);	\
+	ddesc1 = ddesc1 | ccpu_to_be64((						\
+		SAESOC_GEN2_SET_BITS(desfb_dst_id, DESC_FB_DEST_ID)));	\
 	}
 
 /**
@@ -967,10 +971,10 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  * Sets the byte aligned tag address.
  */
 #define saesoc_gen2_set_tag_dstaddr( ddesc1, tag_dst_addr) {			\
-	_uint64_t mask = SAESOC_GEN2_SET_MASK(TAG_DEST_ADDR);		\
+	_uint64_t mask = ccpu_to_be64((SAESOC_GEN2_SET_MASK(TAG_DEST_ADDR)));		\
 	ddesc1 = ddesc1 & ~mask; 					\
-	ddesc1 = ddesc1 | 						\
-		SAESOC_GEN2_SET_BITS(tag_dst_addr, TAG_DEST_ADDR);	\
+	ddesc1 = ddesc1 | ccpu_to_be64((						\
+		SAESOC_GEN2_SET_BITS(tag_dst_addr, TAG_DEST_ADDR)));	\
 	}
 
 /**
@@ -984,9 +988,9 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  */
 #define saesoc_gen2_set_src_frag(src_frag_desc, last_frag, frag_len , \
 		frag_addr) {	\
-	src_frag_desc = SAESOC_GEN2_SET_BITS(last_frag, LAST_SRC_DESC) |	\
+	src_frag_desc = ccpu_to_be64((SAESOC_GEN2_SET_BITS(last_frag, LAST_SRC_DESC) |	\
 		 SAESOC_GEN2_SET_BITS(frag_len, FRAG_LEN) | 		\
-		SAESOC_GEN2_SET_BITS(frag_addr, FRAG_ADDR);		\
+		SAESOC_GEN2_SET_BITS(frag_addr, FRAG_ADDR)));		\
 	}
 	
 /**
@@ -1001,11 +1005,11 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
  */
 #define saesoc_gen2_set_dst_frag(dst_frag_desc, last_frag, frag_len , 		\
 		frag_addr, wr_frag_dis) {					\
-	dst_frag_desc = SAESOC_GEN2_SET_BITS(1, FRAG_TYPE) | 			\
+	dst_frag_desc = ccpu_to_be64((SAESOC_GEN2_SET_BITS(1, FRAG_TYPE) | 			\
 		SAESOC_GEN2_SET_BITS(wr_frag_dis, WR_FRAG_DIS) |	\
 		SAESOC_GEN2_SET_BITS(last_frag, LAST_SRC_DESC) |	\
 		SAESOC_GEN2_SET_BITS(frag_len, FRAG_LEN) | 		\
-		SAESOC_GEN2_SET_BITS(frag_addr, FRAG_ADDR);		\
+		SAESOC_GEN2_SET_BITS(frag_addr, FRAG_ADDR)));		\
 	}
 
 /**
@@ -1013,14 +1017,14 @@ static inline void saesoc_gen2_dump_fmnentry(_uint64_t entry0, _uint64_t entry1)
 * @frag_desc : Source or Destination fragment descriptor
 */
 #define saesoc_gen2_set_last_frag(frag_desc) \
-		frag_desc |= SAESOC_GEN2_SET_BITS(1, LAST_SRC_DESC);
+		frag_desc |= ccpu_to_be64((SAESOC_GEN2_SET_BITS(1, LAST_SRC_DESC)));
 
 /**
 * saesoc_gen2_disble_wrfrag -  Set the fragment write disable bit
 * @dst_frag_desc : Data destination fragment descriptor
 */
 #define saesoc_gen2_disble_wrfrag(dst_frag_desc) \
-		dst_frag_desc |= SAESOC_GEN2_SET_BITS(1, WR_FRAG_DIS);
+		dst_frag_desc |= ccpu_to_be64((SAESOC_GEN2_SET_BITS(1, WR_FRAG_DIS)));
 
 
 /**
-- 
1.7.1

