From b128c1d2be9dc00fc55ed989fe704bf3a3e21705 Mon Sep 17 00:00:00 2001
From: Venu Vadapalli <vvadapalli@netlogicmicro.com>
Date: Thu, 7 Oct 2010 18:34:09 -0700
Subject: Bug fix for ucore reset sequence and zapping frin fifo

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/net/ethernet/broadcom/nae/init_nae.c b/drivers/net/ethernet/broadcom/nae/init_nae.c
index fd3725f..f9b05eb 100644
--- a/drivers/net/ethernet/broadcom/nae/init_nae.c
+++ b/drivers/net/ethernet/broadcom/nae/init_nae.c
@@ -1,6 +1,7 @@
 #include <linux/types.h>
 #include <linux/kernel.h>
 #include <linux/mm.h>
+#include <linux/delay.h>
 
 #include <asm/netlogic/msgring.h>
 
@@ -33,6 +34,8 @@ static int local_load_ucore(int ucore_mask, unsigned int *opcodes, int num_opcod
         ucore_cfg = nlm_hal_read_nae_reg(RX_UCORE_CFG);
 	nlm_hal_write_nae_reg(RX_UCORE_CFG, ucore_cfg | (1 << 24));
 
+	nlm_hal_write_nae_reg(UCORE_IFACE_MASK_CFG, ucore_spray_config(16, 0, CMD_WRITE));
+
 	/* poll for ucore to get in to a wait state */
 	for(;;) {
 		ucore_cfg = nlm_hal_read_nae_reg(RX_UCORE_CFG);
@@ -56,10 +59,15 @@ static int local_load_ucore(int ucore_mask, unsigned int *opcodes, int num_opcod
 
 	/* Enable per-domain ucores */
         ucore_cfg = nlm_hal_read_nae_reg(RX_UCORE_CFG);
+	/* write one to reset bits to put the ucores in reset */
+	ucore_cfg = ucore_cfg | (VAL_UCORE_RESET(ucore_mask));
+        nlm_hal_write_nae_reg(RX_UCORE_CFG, ucore_cfg);
+	/* write zero to reset bits to pull them out of reset */
 	ucore_cfg = ucore_cfg & (~VAL_UCORE_RESET(ucore_mask)) & ~(1 << 24);
-
         nlm_hal_write_nae_reg(RX_UCORE_CFG, ucore_cfg);
 
+	nlm_hal_write_nae_reg(UCORE_IFACE_MASK_CFG, ucore_spray_config(16, 0xffff, CMD_WRITE));
+
 	return 0;
 }
 
@@ -327,6 +335,26 @@ static void config_fmn(void)
 	msgrng_access_disable(mflags);
 }
 
+static void zap_nae_frin_fifo(void)
+{
+	int i = 0;
+	uint32_t value = 0;
+
+	nlm_hal_write_nae_reg(RX_FREE_FIFO_POP, 0xfffff);
+	for (i = 0; i < 10; i++) {
+		mdelay(1);
+		value = nlm_hal_read_nae_reg(RX_FREE_FIFO_POP);
+		if (value == 0xfffff) break;
+	}
+	if (i == 10) {
+		printk("Unable to zap free in fifo!(value=0x%08x)\n", value);
+	}
+	else {
+		printk("Successfully zapped free in fifo!\n");
+	}
+	nlm_hal_write_nae_reg(RX_FREE_FIFO_POP, 0);
+}
+
 void initialize_nae(void)
 {
 	if (check_header()) {
@@ -334,6 +362,8 @@ void initialize_nae(void)
 		return;
 	}
 
+	zap_nae_frin_fifo();
+
 	config_fmn();
 
 	printk("Configuring ucore...\n");
-- 
1.7.1

