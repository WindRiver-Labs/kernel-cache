From cb0d743c67d13923aa84751614876195287a7b02 Mon Sep 17 00:00:00 2001
From: Ashwin Sekhar T K <ashwin@broadcom.com>
Date: Tue, 25 Nov 2014 19:10:50 +0530
Subject: ale_lib: Little Endian Support

[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/alelib/ale_api.c b/arch/mips/netlogic/lib/alelib/ale_api.c
index 5faf335..5549aec 100644
--- a/arch/mips/netlogic/lib/alelib/ale_api.c
+++ b/arch/mips/netlogic/lib/alelib/ale_api.c
@@ -471,6 +471,27 @@ ale_get_prefix_index_from_ale_desc(uint64_t desc){
     return (ale_get_prefix_index(ale_index));
 }
 
+/**
+ * @brief ale_get_prefix_index_from_mem_ale_desc Get prefix index from ALE response
+ *        descriptor in memory. This is used in case of Memory ALE Search Responses.
+ *
+ * @param [in] desc ale descriptor
+ *
+ * @return
+ *  - prefix index if match
+ *  - -1 if no match
+ */
+int
+ale_get_prefix_index_from_mem_ale_desc(uint64_t desc){
+
+    uint32_t   ale_index;
+
+    desc = htobe64(desc);
+    ale_index = desc & 0x7FFFFF;
+
+    return (ale_get_prefix_index(ale_index));
+}
+
 
 /**
  * @brief ale_get_prefix_index_from_nae_desc Get prefix index from NAE descriptor
diff --git a/arch/mips/netlogic/lib/alelib/ale_api.h b/arch/mips/netlogic/lib/alelib/ale_api.h
index 801bf4a..e18371f 100644
--- a/arch/mips/netlogic/lib/alelib/ale_api.h
+++ b/arch/mips/netlogic/lib/alelib/ale_api.h
@@ -39,11 +39,18 @@
 #define _ALE_API_H_
 
 #ifdef NLM_HAL_LINUX_USER
+#include <endian.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <stdio.h>
 #include <errno.h>
 #else
+#ifdef __MIPSEL__
+#include <linux/byteorder/little_endian.h>
+#else
+#include <linux/byteorder/big_endian.h>
+#endif
+#define htobe64                __cpu_to_be64
 #include <linux/types.h>
 #include <linux/module.h>
 #endif
@@ -273,7 +280,9 @@ ale_memory_search_req(ale_t* ale,             //ale pointer
             continue;
         }
         
-        *req_ptr++ = (uint64_t)str_len;       
+        *req_ptr = (uint64_t)str_len;
+        *req_ptr = htobe64(*req_ptr);
+        req_ptr++;
         desc_cnt++; 
 
         str_ptr = prefix->prefix_string;
@@ -281,26 +290,34 @@ ale_memory_search_req(ale_t* ale,             //ale pointer
        ale_print(ALE_DBG_INFO, "%s: Prefix[%d]: %x %x %x %x\n",
                   __func__, i, str_ptr[0], str_ptr[1], str_ptr[2], str_ptr[3]);
 
-	if (is_nlm_xlp9xx_ax()) {
-        	*req_ptr++ = (uint64_t)reverse_32(str_ptr[1]) << 32 | (uint64_t)reverse_32(str_ptr[0]);  
-        	desc_cnt++;
-        	if(str_len > 64){
-            	*req_ptr++ = (uint64_t)reverse_32(str_ptr[3]) << 32 | (uint64_t)reverse_32(str_ptr[2]);
-            	desc_cnt++;
-        }  
-        req_cnt++;
-        prefix++;
-    } else {
-	*req_ptr++ = (uint64_t)(str_ptr[0]) << 32 | (uint64_t)(str_ptr[1]);
-	desc_cnt++;
-	if (str_len > 64) {
-		*req_ptr++ = (uint64_t)(str_ptr[2]) << 32 | (uint64_t)(str_ptr[3]);
-		desc_cnt++;
-	}
-	req_cnt++;
-	prefix++;
+        if (is_nlm_xlp9xx_ax()) {
+            *req_ptr = (uint64_t)reverse_32(str_ptr[1]) << 32 | (uint64_t)reverse_32(str_ptr[0]);
+            *req_ptr = htobe64(*req_ptr);
+            req_ptr++;
+            desc_cnt++;
+            if(str_len > 64){
+                *req_ptr = (uint64_t)reverse_32(str_ptr[3]) << 32 | (uint64_t)reverse_32(str_ptr[2]);
+                *req_ptr = htobe64(*req_ptr);
+                req_ptr++;
+                desc_cnt++;
+            }
+            req_cnt++;
+            prefix++;
+        } else {
+            *req_ptr = (uint64_t)(str_ptr[0]) << 32 | (uint64_t)(str_ptr[1]);
+            *req_ptr = htobe64(*req_ptr);
+            req_ptr++;
+            desc_cnt++;
+            if (str_len > 64) {
+                *req_ptr = (uint64_t)(str_ptr[2]) << 32 | (uint64_t)(str_ptr[3]);
+                *req_ptr = htobe64(*req_ptr);
+                req_ptr++;
+                desc_cnt++;
+            }
+            req_cnt++;
+            prefix++;
+        }
     }
-}
     ale_print(ALE_DBG_INFO, "%s: req_ptr %llx, rsp_ptr %llx\n",
               __func__, (long long unsigned int)req_ptr_phys,
               (long long unsigned int)ale_virt_to_phys(rsp_ptr));
@@ -491,6 +508,7 @@ extern void dump_ale_config(ale_t *ale);
 extern uint32_t ale_string_search(ale_prefix_t* prefix);
 extern int ale_get_prefix_index(uint32_t ale_index);
 extern int ale_get_prefix_index_from_ale_desc(uint64_t desc);
+extern int ale_get_prefix_index_from_mem_ale_desc(uint64_t desc);
 extern int ale_get_prefix_index_from_nae_desc(uint64_t desc);
 extern int ale_insert_prefix(ale_t* ale, uint16_t vc, ale_prefix_t* prefix, int update_num, int last_update);
 extern int ale_delete_prefix(ale_t* ale, uint16_t vc, ale_prefix_t* prefix, int update_num, int last_update);
diff --git a/arch/mips/netlogic/lib/alelib/ale_node_db.c b/arch/mips/netlogic/lib/alelib/ale_node_db.c
index bcb42a6..212cead 100644
--- a/arch/mips/netlogic/lib/alelib/ale_node_db.c
+++ b/arch/mips/netlogic/lib/alelib/ale_node_db.c
@@ -351,6 +351,11 @@ ale_create_node_db(ale_db_entry_t* ale_db_hw,
                       (unsigned long long)ale_db_hw[db_idx].db[1],
                       (unsigned long long)ale_db_hw[db_idx].db[2],
                       (unsigned long long)ale_db_hw[db_idx].db[3]);
+
+            ale_db_hw[db_idx].db[0] = htobe64(ale_db_hw[db_idx].db[0]);
+            ale_db_hw[db_idx].db[1] = htobe64(ale_db_hw[db_idx].db[1]);
+            ale_db_hw[db_idx].db[2] = htobe64(ale_db_hw[db_idx].db[2]);;
+            ale_db_hw[db_idx].db[3] = htobe64(ale_db_hw[db_idx].db[3]);;
         }
 
         db_idx++;
@@ -489,6 +494,11 @@ uint8_t ale_update_db(ale_db_entry_t* ale_db_hw,
                                       ((uint64_t)tmp_BM2 >> 62);
             ale_db_hw[db_idx].db[0] = 0;
             mask |= 1 << (db_idx/ALE_NODE_PER_BANK);
+
+            ale_db_hw[db_idx].db[0] = htobe64(ale_db_hw[db_idx].db[0]);
+            ale_db_hw[db_idx].db[1] = htobe64(ale_db_hw[db_idx].db[1]);
+            ale_db_hw[db_idx].db[2] = htobe64(ale_db_hw[db_idx].db[2]);;
+            ale_db_hw[db_idx].db[3] = htobe64(ale_db_hw[db_idx].db[3]);;
         }
         db_idx++;
         Dequeue(node_queue);
-- 
1.7.1

