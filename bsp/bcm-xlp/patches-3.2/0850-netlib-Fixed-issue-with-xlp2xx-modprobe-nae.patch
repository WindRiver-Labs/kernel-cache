From 6ae498b4e2c94f2e5b218e71a60c33d71f6860ae Mon Sep 17 00:00:00 2001
From: Alok Agrawat <alok@broadcom.com>
Date: Mon, 18 Nov 2013 03:45:05 -0800
Subject: netlib: Fixed issue with xlp2xx 'modprobe nae'

Also fixed issue with the crash in nae app.
[Based on SDK 3.2]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/arch/mips/netlogic/lib/syslib/include/nlm_evp_cpld.h b/arch/mips/netlogic/lib/syslib/include/nlm_evp_cpld.h
index 64f235b..ac5568f 100644
--- a/arch/mips/netlogic/lib/syslib/include/nlm_evp_cpld.h
+++ b/arch/mips/netlogic/lib/syslib/include/nlm_evp_cpld.h
@@ -48,6 +48,7 @@
 #define CORTINA_ILK2_BASE	0x17200000
 #define NLM_GBU_FREQ_DEFAULT	133
 #define NLM_GBU_FREQ_ILK	16
+#define NLM_GBU_FREQ_ILK_9XX	33	
 	
 #define NLM_XLP_MAX_CS  7
 
diff --git a/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h b/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h
index 8fc4459..412534a 100644
--- a/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h
+++ b/arch/mips/netlogic/lib/syslib/include/xlp9xx_sys.h
@@ -177,6 +177,70 @@ static inline uint64_t get_nae_frequency(int node)
     return (uint64_t) (clk_freq * 1000000);
 }
 
+static inline int xlp9xx_set_gbu_frequency(int node, uint64_t freq)
+{
+    int sel, div, dev_shift, i;
+    const uint64_t mhz = 1000000;
+    int dev_freq = freq / mhz;
+    uint32_t val, dev_id = XLP9XX_CLKDEV_GBU;
+    uint64_t sys_base = XLP9XX_SYS_CLKDEV_BASE(node);
+
+nlm_print("\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%s freq = %d\n",__FUNCTION__, freq);
+		
+    switch (dev_freq) {
+        case 133: sel = 0; div = 0; break;
+        case 66:  sel = 0; div = 1; break;
+        case 33:  sel = 0; div = 2; break;
+        case 17:  sel = 0; div = 3; break;
+        case 500: sel = 1; div = 0; break;
+        case 250: sel = 1; div = 1; break;
+        case 125: sel = 1; div = 2; break;
+        case 63:  sel = 1; div = 3; break;
+        case 667: sel = 2; div = 0; break;
+        case 333: sel = 2; div = 1; break;
+        case 167: sel = 2; div = 2; break;
+        case 83:  sel = 2; div = 3; break;
+        case 767: sel = 3; div = 0; break;
+        case 383: sel = 3; div = 1; break;
+        case 192: sel = 3; div = 2; break;
+        case 96:  sel = 3; div = 3; break;
+        default: // Set it to 333 MHz
+            nlm_print("Can't set freq to given MHz. Setting NAE Freq to 667 MHz instead.\n");
+            sel = 2; div = 0;
+        break;
+    }
+
+    dev_shift = dev_id * 2;	
+    // Write the div and select register	
+    val = ((sel & 0x3) << dev_shift);
+    syssoc_write_reg(sys_base, CLK_DEVSEL, val);
+	
+    val = ((div & 0x3) << dev_shift);  
+    syssoc_write_reg(sys_base, CLK_DEVDIV, val);
+	
+    // Poll Change register
+    syssoc_write_reg(sys_base, CLK_DEVCHG, 0x1 << dev_id);
+
+    i=0;
+    while (i++ < 10) {
+      val = syssoc_read_reg(sys_base, CLK_DEVCHG);
+
+      if ((i==10) || ((val & (1 << dev_id)) == 0)) {
+          // Check the status
+	  val = (syssoc_read_reg(sys_base, CLK_DEVSEL_STAT) >> dev_shift) & 0x3;
+          if (val != sel) {
+              nlm_print("NET CLKSELDEV val 0x%x select bit is not correct exp:%d got:%d\n", syssoc_read_reg(sys_base, CLK_DEVSEL_STAT), sel, val);
+          }
+          val = (syssoc_read_reg(sys_base, CLK_DEVDIV_STAT) >> dev_shift) & 0x3;
+          if (val != div) {
+              nlm_print("NET CLKSELDEV val 0x%x divide bit is not correct exp:%d got:%d\n", syssoc_read_reg(sys_base, CLK_DEVDIV_STAT), div, val);
+          }
+          break;
+      }
+    }
+    return 0;
+}
+
 
 static inline int xlp9xx_set_nae_frequency(int node, uint64_t freq)
 {
@@ -368,6 +432,10 @@ static inline int xlp9xx_set_soc_frequency(int node, int dev_id, uint64_t freq)
 		case XLP9XX_CLKDEV_NET:
 			xlp9xx_set_nae_frequency(node, freq);
 			break;
+		case XLP9XX_CLKDEV_GBU:
+nlm_print("\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%s freq = %d\n",__FUNCTION__, freq);
+			xlp9xx_set_gbu_frequency(node, freq);
+			break;
                 case XLP9XX_CLKDEV_SEC:
 		case XLP9XX_CLKDEV_RSA:
                         set_crypto_block_frequency(node, dev_id, freq);
diff --git a/arch/mips/netlogic/lib/syslib/src/nlm_evp_cpld.c b/arch/mips/netlogic/lib/syslib/src/nlm_evp_cpld.c
index 4de5204..4e6a939 100644
--- a/arch/mips/netlogic/lib/syslib/src/nlm_evp_cpld.c
+++ b/arch/mips/netlogic/lib/syslib/src/nlm_evp_cpld.c
@@ -44,6 +44,7 @@
 #endif
 #include "nlm_evp_cpld.h"
 #include "nlm_hal_sys.h"
+#include "xlp9xx_sys.h"
 
 
 static nlm_xlp_nor_t xlp_nor_dev[8] = {
@@ -220,34 +221,21 @@ int xlp_cpld_init(uint32_t cs)
 
 void set_gbu_frequency(int node, int frequency)
 {
-#if 1
-	uint32_t reg1, reg2, *addr;
-
-	reg1 = 0x0;
-	reg2 = 0x2000000;
-	*(volatile uint32_t*)(0x9000000000000000 + (0x18000000 + (1 << 20) + (6 << 15) + (2 << 12) + (0x1cb << 2)))= reg1;
-	*(volatile uint32_t*)(0x9000000000000000 + (0x18000000 + (1 << 20) + (6 << 15) + (2 << 12) + (0x1cd << 2)))= reg2;
-
-	*(uint32_t*)(0x9000000000000000 + (0x18000000 + (1 << 20) + (6 << 15) + (2 << 12) + (0x1cf << 2)))=0x1000;
-	addr = (uint32_t*)(0x9000000000000000 + (0x18000000 + (1 << 20) + (6 << 15) + (2 << 12) + (0x1cf << 2)));
-	while(*addr)
-	{
-		nlm_print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ addr = %x\n", *addr);
-	}
-
-#endif
-#if 0
 	const uint64_t mhz = 1000000;
 	uint64_t set_freq;
 	if(is_nlm_xlp2xx()) {
 		set_freq = nlm_hal_xlp2xx_set_clkdev_frq(node, XLP2XX_CLKDEVICE_GBU, frequency * mhz);
+		NLM_HAL_DO_DIV(set_freq,mhz);
+	}
+	else if(is_nlm_xlp9xx())
+	{
+		set_freq = xlp9xx_set_soc_frequency(node, XLP9XX_CLKDEV_GBU, 33/*frequency*/ * mhz);
 	}
 	else {
 		set_freq = nlm_hal_set_soc_freq(node, DFS_DEVICE_NOR, frequency * mhz);
+		NLM_HAL_DO_DIV(set_freq,mhz);
 	}
-	NLM_HAL_DO_DIV(set_freq,mhz);
 	nlm_print("GBU Frequency set to %lluMHz\n", set_freq);
-#endif
 }
 
 void nlm_hal_cpld_init(int node)
@@ -255,7 +243,10 @@ void nlm_hal_cpld_init(int node)
 #if !defined(XLP_SIM) || defined(NLM_BOARD)
 	int i;
 #if defined(NLM_CORTINA_SUPPORT)
-	set_gbu_frequency(node, NLM_GBU_FREQ_ILK);
+	if(is_nlm_xlp9xx())
+		set_gbu_frequency(node, NLM_GBU_FREQ_ILK_9XX);
+	else
+		set_gbu_frequency(node, NLM_GBU_FREQ_ILK);
 #else
 	set_gbu_frequency(node, NLM_GBU_FREQ_DEFAULT);
 #endif
-- 
1.7.1

