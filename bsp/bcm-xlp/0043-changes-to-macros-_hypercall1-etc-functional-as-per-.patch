From bcb8d77d9f40abee36e44b1c3286a53a7b1022a9 Mon Sep 17 00:00:00 2001
From: Prasad Boddupalli <pboddupalli@netlogicmicro.com>
Date: Fri, 25 Jun 2010 12:00:53 -0700
Subject: [PATCH 043/762] changes to macros _hypercall1() etc functional, as per mips assembly

Based on Broadcom SDK 2.3.

Signed-off-by: Prasad Boddupalli <pboddupalli@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/xen/hypercall.h |  139 ++++++++++++--------------------
 1 files changed, 52 insertions(+), 87 deletions(-)

diff --git a/arch/mips/include/asm/xen/hypercall.h b/arch/mips/include/asm/xen/hypercall.h
index 387ffec..7c26873 100644
--- a/arch/mips/include/asm/xen/hypercall.h
+++ b/arch/mips/include/asm/xen/hypercall.h
@@ -80,31 +80,42 @@
  * there aren't more than 5 arguments...)
  */
 
+/*
+ * Song and Dance to make a hypercall:
+ * 
+ * 1. Save gp
+ * 2. read contents of *xensp (start_info->shared_info->arch.xensp)
+ * 3. mask (2) with XEN_PAGE_MASK to get a reference to 'current'
+ * 4. store (3) in gp
+ * 5. invoke hypercall
+ * 6. restore gp
+ */
+
 DECLARE_PER_CPU(unsigned long, gpctx);
 
-extern struct { char _entry[32]; } hypercall_page[];
+extern struct { unsigned long _entry; } hypercall_page[];
 
 #define load_gp(var) \
 ({ \
-        __asm__ __volatile__ ( \
-                ".set push\n" \
-                ".set noreorder\n" \
-                "move %0, $28\n" \
-                ".set pop\n" \
-                :"=r"(var) \
-                ); \
+    __asm__ __volatile__ ( \
+        ".set push\n" \
+        ".set noreorder\n" \
+        "move %0, $28\n" \
+        ".set pop\n" \
+        :"=r"(var) \
+        ); \
 })
 
 #define store_gp(var) \
 ({ \
-        __asm__ __volatile__ ( \
-                ".set push\n" \
-                ".set noreorder\n" \
-                "move $28, %0\n" \
-                ".set pop\n" \
-                : \
-                : "r"(var) \
-                ); \
+    __asm__ __volatile__ ( \
+        ".set push\n" \
+        ".set noreorder\n" \
+        "move $28, %0\n" \
+        ".set pop\n" \
+        : \
+        : "r"(var) \
+        ); \
 })
 
 #define switch_xen_linux_stacks() \
@@ -115,25 +126,17 @@ extern struct { char _entry[32]; } hypercall_page[];
 
 #define restore_linux_stack() store_gp(__get_cpu_var(gpctx))
 
-#if 0
-#define __HYPERCALL		"call hypercall_page+%c[offset]"
-#define __HYPERCALL_ENTRY(x)						\
-	[offset] "i" (__HYPERVISOR_##x * sizeof(hypercall_page[0]))
-#endif
-
 #define __HYPERCALL                                                     \
         ".set\tpush\n.set\tnoreorder\njalr\t%[func]\nnop\n.set\tpop\n"
-
 #define __HYPERCALL_ENTRY(x)                                            \
-        [func] "r" ((unsigned long)hypercall_page +                     \
-                    (__HYPERVISOR_##x * sizeof(hypercall_page[0])))
+        [func] "r" ((unsigned long)(hypercall_page[__HYPERVISOR_##x])._entry)
 
-#define __HYPERCALL_RETREG	"$8"
-#define __HYPERCALL_ARG1REG	"$9"
-#define __HYPERCALL_ARG2REG	"$10"
-#define __HYPERCALL_ARG3REG	"$11"
-#define __HYPERCALL_ARG4REG	"$12"
-#define __HYPERCALL_ARG5REG	"$13"
+#define __HYPERCALL_RETREG	"$2"
+#define __HYPERCALL_ARG1REG	"$4"
+#define __HYPERCALL_ARG2REG	"$5"
+#define __HYPERCALL_ARG3REG	"$6"
+#define __HYPERCALL_ARG4REG	"$7"
+#define __HYPERCALL_ARG5REG	"$8"
 
 #define __HYPERCALL_DECLS						\
 	register unsigned long __res  asm(__HYPERCALL_RETREG);		\
@@ -173,10 +176,12 @@ extern struct { char _entry[32]; } hypercall_page[];
 ({									\
 	__HYPERCALL_DECLS;						\
 	__HYPERCALL_0ARG();						\
+	switch_xen_linux_stacks(); \
 	asm volatile (__HYPERCALL					\
 		      : __HYPERCALL_0PARAM				\
 		      : __HYPERCALL_ENTRY(name)				\
 		      : __HYPERCALL_CLOBBER0);				\
+	restore_linux_stack(); \
 	(type)__res;							\
 })
 
@@ -184,10 +189,12 @@ extern struct { char _entry[32]; } hypercall_page[];
 ({									\
 	__HYPERCALL_DECLS;						\
 	__HYPERCALL_1ARG(a1);						\
+	switch_xen_linux_stacks(); \
 	asm volatile (__HYPERCALL					\
 		      : __HYPERCALL_1PARAM				\
 		      : __HYPERCALL_ENTRY(name)				\
 		      : __HYPERCALL_CLOBBER1);				\
+	restore_linux_stack(); \
 	(type)__res;							\
 })
 
@@ -195,10 +202,12 @@ extern struct { char _entry[32]; } hypercall_page[];
 ({									\
 	__HYPERCALL_DECLS;						\
 	__HYPERCALL_2ARG(a1, a2);					\
+	switch_xen_linux_stacks(); \
 	asm volatile (__HYPERCALL					\
 		      : __HYPERCALL_2PARAM				\
 		      : __HYPERCALL_ENTRY(name)				\
 		      : __HYPERCALL_CLOBBER2);				\
+	restore_linux_stack(); \
 	(type)__res;							\
 })
 
@@ -206,10 +215,12 @@ extern struct { char _entry[32]; } hypercall_page[];
 ({									\
 	__HYPERCALL_DECLS;						\
 	__HYPERCALL_3ARG(a1, a2, a3);					\
+	switch_xen_linux_stacks(); \
 	asm volatile (__HYPERCALL					\
 		      : __HYPERCALL_3PARAM				\
 		      : __HYPERCALL_ENTRY(name)				\
 		      : __HYPERCALL_CLOBBER3);				\
+	restore_linux_stack(); \
 	(type)__res;							\
 })
 
@@ -217,10 +228,12 @@ extern struct { char _entry[32]; } hypercall_page[];
 ({									\
 	__HYPERCALL_DECLS;						\
 	__HYPERCALL_4ARG(a1, a2, a3, a4);				\
+	switch_xen_linux_stacks(); \
 	asm volatile (__HYPERCALL					\
 		      : __HYPERCALL_4PARAM				\
 		      : __HYPERCALL_ENTRY(name)				\
 		      : __HYPERCALL_CLOBBER4);				\
+	restore_linux_stack(); \
 	(type)__res;							\
 })
 
@@ -228,10 +241,12 @@ extern struct { char _entry[32]; } hypercall_page[];
 ({									\
 	__HYPERCALL_DECLS;						\
 	__HYPERCALL_5ARG(a1, a2, a3, a4, a5);				\
+	switch_xen_linux_stacks(); \
 	asm volatile (__HYPERCALL					\
 		      : __HYPERCALL_5PARAM				\
 		      : __HYPERCALL_ENTRY(name)				\
 		      : __HYPERCALL_CLOBBER5);				\
+	restore_linux_stack(); \
 	(type)__res;							\
 })
 
@@ -244,10 +259,12 @@ privcmd_call(unsigned call,
 	__HYPERCALL_DECLS;
 	__HYPERCALL_5ARG(a1, a2, a3, a4, a5);
 
-	asm volatile(".set\tpush\n.set\tnoreorder\njalr\t%[call]\nnop\n.set\tpop\n"
+	switch_xen_linux_stacks();
+	asm volatile(__HYPERCALL
 		     : __HYPERCALL_5PARAM
-		     : [call] "r" (&hypercall_page[call])
+		     : [func] "r" (hypercall_page[call]._entry)
 		     : __HYPERCALL_CLOBBER5);
+	restore_linux_stack();
 
 	return (long)__res;
 }
@@ -284,41 +301,11 @@ HYPERVISOR_stack_switch(unsigned long ss, unsigned long esp)
 	return _hypercall2(int, stack_switch, ss, esp);
 }
 
-#ifdef CONFIG_32BIT
-static inline int
-HYPERVISOR_set_callbacks(unsigned long event_selector,
-			 unsigned long event_address,
-			 unsigned long failsafe_selector,
-			 unsigned long failsafe_address)
-{
-	return _hypercall4(int, set_callbacks,
-			   event_selector, event_address,
-			   failsafe_selector, failsafe_address);
-}
-#else  /* CONFIG_64BIT */
 static inline int
 HYPERVISOR_set_callbacks(unsigned long event, unsigned long callback_address)
 {
-	int (*hc_set_callbacks)(unsigned long, unsigned long);
-	int retval = 0;
-	unsigned long *hc_offset = (unsigned long *)hypercall_page;
-	
-#if 0
-	unsigned long __gp;
-	unsigned long __current;
-#endif
-
-	hc_set_callbacks = (void *)(hc_offset[__HYPERVISOR_set_callbacks]);
-
-	switch_xen_linux_stacks();
-
-	retval = hc_set_callbacks(event, callback_address);
-
-	restore_linux_stack();
-
-	return retval;
+	return _hypercall2(int, set_callbacks, event, callback_address);
 }
-#endif  /* CONFIG_{32,64}BIT */
 
 static inline int
 HYPERVISOR_callback_op(int cmd, void *arg)
@@ -420,29 +407,7 @@ HYPERVISOR_xen_version(int cmd, void *arg)
 static inline int
 HYPERVISOR_console_io(int cmd, int count, char *str)
 {
-	int (*hc_console_io)(int cmd, int count, char *str);
-	unsigned long long *hc_offset = (unsigned long long *)hypercall_page;
-	int retval;
-
-	hc_console_io = (void *)(hc_offset[__HYPERVISOR_console_io]);
-
-	/*
-	 * Song and Dance to make a hypercall:
-	 * 
-	 * 1. Save gp
-	 * 2. read contents of *xensp (start_info->shared_info->arch.xensp)
-	 * 3. mask (2) with XEN_PAGE_MASK to get a reference to 'current'
-	 * 4. store (3) in gp
-	 * 5. invoke hypercall
-	 * 6. restore gp
-	 */
-	switch_xen_linux_stacks();
-
-	retval = hc_console_io(cmd, count, str);
-
-	restore_linux_stack();
-
-	return retval;
+	return _hypercall3(int, console_io, cmd, count, str);
 }
 
 static inline int
-- 
1.7.0.4

