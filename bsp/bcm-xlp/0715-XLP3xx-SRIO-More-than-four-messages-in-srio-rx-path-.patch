From 3b84f07b09eec14a7b462bf8d52e5bd806e78aff Mon Sep 17 00:00:00 2001
From: Jayanthi A <jayanthi.annadurai@broadcom.com>
Date: Tue, 12 Feb 2013 10:35:52 -0800
Subject: [PATCH 715/762] XLP3xx SRIO: More than four messages in srio rx path makes the srio controller to reuse the previously used buffer address.

Based on Broadcom SDK 2.3.

Signed-off-by: Jayanthi A <jayanthi.annadurai@broadcom.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/xlp_srio.h |    1 +
 arch/mips/netlogic/xlp/xlp_srio.c         |    7 +++++++
 2 files changed, 8 insertions(+), 0 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/xlp_srio.h b/arch/mips/include/asm/netlogic/xlp_srio.h
index 50d905b..ba1b795 100644
--- a/arch/mips/include/asm/netlogic/xlp_srio.h
+++ b/arch/mips/include/asm/netlogic/xlp_srio.h
@@ -12,6 +12,7 @@ typedef struct {
 	int used;
         int head;
         int tail;
+        atomic_t letter;
 }datamsg_transacion_tx_t, *pdatamsg_transacion_tx_t;
 
 /**
diff --git a/arch/mips/netlogic/xlp/xlp_srio.c b/arch/mips/netlogic/xlp/xlp_srio.c
index 95df27a..f382e97 100644
--- a/arch/mips/netlogic/xlp/xlp_srio.c
+++ b/arch/mips/netlogic/xlp/xlp_srio.c
@@ -208,6 +208,7 @@ static int bcm_xlp_rio_datamsg_resp_handler(struct bcm_rio_port *rio, uint32_t s
         srio_dbg(srio_debug_level, "%s: src %d mbox %d\n",__func__,src, mbox);
 
         dmsg_txq = &rio->dmsg_txq[mbox];
+        atomic_dec(&dmsg_txq->letter);
         spin_lock_irqsave(&dmsg_txq->dmsg_txlock, flags);
         if (dmsg_txq->used == 0) {
 	        //error
@@ -917,12 +918,16 @@ bcm_rio_add_outb_message(struct rio_mport *mport, struct rio_dev *rdev, int mbox
 	if (txq->status != NLM_QVALID)
 		return -EINVAL;
 
+        if (atomic_read(&txq->letter) == 4)
+            return -EINVAL;
+
 	spin_lock_irqsave(&txq->dmsg_txlock, flags);
 	letter = txq->used & 0x3;
 	*(uint64_t *)(txq->paddr + txq->head) = (uint64_t)buffer;
 	txq->used++;
 	if (++txq->head == txq->max_entries)
 		txq->head = 0;
+        atomic_inc(&txq->letter);
 	spin_unlock_irqrestore(&txq->dmsg_txlock, flags);
 
 	rio_add_outb_msg(port, mbox, virt_to_phys(buffer), len, dest_id, letter);
@@ -960,6 +965,7 @@ int bcm_rio_open_outb_mbox(struct rio_mport *mport, void *dev_id, int mbox, int
 	txq->head = txq->tail = txq->used  = 0;
 	txq->max_entries = entries;		
 	txq->dev_id = dev_id;
+        atomic_set(&txq->letter, 0);
 	txq->paddr = kmalloc(sizeof(uint64_t) * entries, GFP_KERNEL | GFP_DMA);
 	if (txq->paddr == NULL) {
 		spin_unlock_irqrestore(&txq->dmsg_txlock, flags);
@@ -1291,6 +1297,7 @@ void bcm_xlp3xx_ax_rio_msghandler(uint32_t vc, uint32_t src_id,
                         mbox = SRIO_MBOX(msg0);
                         status = SRIO_RESP_STATUS(msg0);
 			dmsg_txq = &rio->dmsg_txq[mbox];
+                        atomic_dec(&dmsg_txq->letter); 
 			srio_dbg(srio_debug_level,"FTYPE_RESPONSE mbox %d status 0x%x\n", mbox, status);
 			spin_lock_irqsave(&dmsg_txq->dmsg_txlock, flags);
 			if (dmsg_txq->used == 0) {
-- 
1.7.0.4

