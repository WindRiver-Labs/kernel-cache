From f751e69e4ea59af4100313fd2dc14f3592de4f67 Mon Sep 17 00:00:00 2001
From: Om Narasimhan <onarasimhan@netlogicmicro.com>
Date: Wed, 16 Mar 2011 15:48:54 -0700
Subject: [PATCH 280/762] Added unregister_xlp_msgring_handler

There was no provision of unregistering a registered handler for FMN DMA. This
commit adds it and drops a (seemingly) unused structure to indicate whether
registration already happened.

Based on Broadcom SDK 2.3.

Signed-off-by: Om Narasimhan <onarasimhan@netlogicmicro.com>
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/netlogic/msgring.h |    1 +
 arch/mips/netlogic/xlp/on_chip.c         |   25 ++++++++++++++++++++-----
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/arch/mips/include/asm/netlogic/msgring.h b/arch/mips/include/asm/netlogic/msgring.h
index cd0d775..5981436 100644
--- a/arch/mips/include/asm/netlogic/msgring.h
+++ b/arch/mips/include/asm/netlogic/msgring.h
@@ -664,6 +664,7 @@ extern int register_xlp_msgring_handler(int major,
                              void (*action) (uint32_t, uint32_t, uint32_t, uint32_t,
                                              uint64_t, uint64_t, uint64_t, uint64_t, void *),
                              void *dev_id);
+extern int unregister_xlp_msgring_handler(int, void *);
 #else
 extern int register_msgring_handler(int major,
 				    void (*action)(int, int,int,int,struct msgrng_msg *, void *),
diff --git a/arch/mips/netlogic/xlp/on_chip.c b/arch/mips/netlogic/xlp/on_chip.c
index f006731..9dd3cb0 100644
--- a/arch/mips/netlogic/xlp/on_chip.c
+++ b/arch/mips/netlogic/xlp/on_chip.c
@@ -57,7 +57,6 @@ uint32_t nlm_cpu_vc_mask[NLM_MAX_CPU_NODE*NLM_MAX_CPU_PER_NODE] = {0};
 
 /* make this a read/write spinlock */
 spinlock_t msgrng_lock;
-static nlm_common_atomic_t msgring_registered;
 
 struct msgstn_handler {
         void (*action)(uint32_t, uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint64_t, void *);
@@ -303,8 +302,6 @@ int register_xlp_msgring_handler(int major,
 	msg_handler_map[major].dev_id = dev_id;
 
 	ret = 0;
-	msgring_registered.value = 1;
-
 	spin_unlock_irqrestore(&msgrng_lock, flags);
 
 	return ret;
@@ -312,6 +309,26 @@ int register_xlp_msgring_handler(int major,
 
 EXPORT_SYMBOL(register_xlp_msgring_handler);
 
+int unregister_xlp_msgring_handler(int major, void *dev_id)
+{
+	unsigned long flags;
+
+	if(major >= XLP_MSG_HANDLE_MAX){
+		printk(KERN_ALERT "%s:%d  Invalid parameter: major=%d, "
+		       "XLP_MAX_TX_STN=%d", __FUNCTION__, __LINE__, major,
+		       XLP_MAX_TX_STNS);
+		return -1;
+	}
+	spin_lock_irqsave(&msgrng_lock, flags);
+	if(msg_handler_map[major].dev_id == dev_id){
+		msg_handler_map[major].action = dummy_handler;
+		msg_handler_map[major].dev_id = NULL;
+	}
+	spin_unlock_irqrestore(&msgrng_lock, flags);
+	return 0;
+}
+EXPORT_SYMBOL(unregister_xlp_msgring_handler);
+
 #include <asm/netlogic/cpumask.h>
 void nlm_nmi_cpus(unsigned int mask)
 {
@@ -442,8 +459,6 @@ void on_chip_init(void)
 	/* Set netlogic_io_base to the run time value */
 	spin_lock_init(&msgrng_lock);
 
-	msgring_registered.value = 0;
-
 	nlm_hal_init();
 
 	pic_init(); 
-- 
1.7.0.4

