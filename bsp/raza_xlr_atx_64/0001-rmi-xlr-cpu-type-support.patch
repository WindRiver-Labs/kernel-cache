From 45d8a8bd1e1b9f2feeba4fd676cf2a916e5bd5d1 Mon Sep 17 00:00:00 2001
From: Jack Tan <jack.tan@windriver.com>
Date: Tue, 16 Dec 2008 19:06:54 +0800
Subject: [PATCH] rmi xlr cpu type support

RMI XLR (aka: phoenix) support wait instruction, so add support for it.

XLR processor implements the MIPS64 R1 instruction set and has some
enhancements. (Atomic Swap, Atomic Load and Add, Message send etc ...)
So add a new cpu type CPU_PHOENIX not use the CPU_MIPS64.

XLR's cache is diffrent from the legency 4K processor's which is
marked as MIPS_CPU_4K_CACHE in linux kernel, so add a new cache
type MIPS_CPU_PHOENIX_CACHE.

Starting from 2.6.24 each platform need a dedicated workaround head file
war.h

Signed-off-by: Jack Tan <jack.tan@windriver.com>
---
 arch/mips/kernel/cpu-probe.c        |   41 +++++++++++++++++++++++++++++++++++
 include/asm-mips/cpu-features.h     |    3 ++
 include/asm-mips/cpu.h              |    3 ++
 include/asm-mips/mach-phoenix/war.h |   28 +++++++++++++++++++++++
 4 files changed, 75 insertions(+), 0 deletions(-)
 create mode 100644 include/asm-mips/mach-phoenix/war.h

diff --git a/arch/mips/kernel/cpu-probe.c b/arch/mips/kernel/cpu-probe.c
index ef7ed93..90899ec 100644
--- a/arch/mips/kernel/cpu-probe.c
+++ b/arch/mips/kernel/cpu-probe.c
@@ -112,6 +112,17 @@ static void au1k_wait(void)
 		: : "r" (au1k_wait));
 }
 
+static void phoenix_wait(void)
+{
+	__asm__(
+		".set push\n\t"
+		".set\tmips3\n\t"
+		".set noreorder\n\t"		
+		"c0 0x60\n\t"
+		".set pop\n\t"
+		);
+}
+
 static int __initdata nowait = 0;
 
 static int __init wait_disable(char *s)
@@ -179,6 +190,9 @@ void __init check_wait(void)
 	case CPU_TX49XX:
 		cpu_wait = r4k_wait_irqoff;
 		break;
+	case CPU_PHOENIX:
+		cpu_wait = phoenix_wait;
+		break;	  
 	case CPU_AU1000:
 	case CPU_AU1100:
 	case CPU_AU1500:
@@ -815,6 +829,29 @@ static inline void cpu_probe_broadcom(struct cpuinfo_mips *c)
 	}
 }
 
+static __inline__ void cpu_probe_rmi(struct cpuinfo_mips *c)
+{
+	decode_configs(c);
+
+	c->options &= ~MIPS_CPU_4K_CACHE;
+
+	switch (c->processor_id & 0xff00) {
+
+	default:
+		c->cputype = CPU_PHOENIX;
+		c->isa_level = MIPS_CPU_ISA_M64R1;
+		c->options = (MIPS_CPU_TLB		 | 
+			MIPS_CPU_4KEX		|
+			MIPS_CPU_COUNTER |
+			MIPS_CPU_DIVEC	 |
+			MIPS_CPU_WATCH	 |
+			MIPS_CPU_EJTAG	 |
+			MIPS_CPU_PHOENIX_CACHE |
+			MIPS_CPU_LLSC);
+		break;
+	}
+}
+
 const char *__cpu_name[NR_CPUS];
 
 /*
@@ -866,6 +903,7 @@ static __cpuinit const char *cpu_to_name(struct cpuinfo_mips *c)
 	case CPU_TX3912:	name = "TX3912"; break;
 	case CPU_TX3922:	name = "TX3922"; break;
 	case CPU_TX3927:	name = "TX3927"; break;
+	case CPU_PHOENIX:	name = "RMI Phoenix"; break;
 	case CPU_AU1000:	name = "Au1000"; break;
 	case CPU_AU1500:	name = "Au1500"; break;
 	case CPU_AU1100:	name = "Au1100"; break;
@@ -938,6 +976,9 @@ __cpuinit void cpu_probe(void)
 	case PRID_COMP_NXP:
 		cpu_probe_nxp(c);
 		break;
+	case PRID_COMP_RMI:
+		cpu_probe_rmi(c);
+		break;	  
 	default:
 		c->cputype = CPU_UNKNOWN;
 	}
diff --git a/include/asm-mips/cpu-features.h b/include/asm-mips/cpu-features.h
index 5ea701f..1c38a45 100644
--- a/include/asm-mips/cpu-features.h
+++ b/include/asm-mips/cpu-features.h
@@ -38,6 +38,9 @@
 #ifndef cpu_has_tx39_cache
 #define cpu_has_tx39_cache	(cpu_data[0].options & MIPS_CPU_TX39_CACHE)
 #endif
+#ifndef cpu_has_phoenix_cache
+#define cpu_has_phoenix_cache	(cpu_data[0].options & MIPS_CPU_PHOENIX_CACHE)
+#endif
 #ifndef cpu_has_fpu
 #define cpu_has_fpu		(current_cpu_data.options & MIPS_CPU_FPU)
 #define raw_cpu_has_fpu		(raw_current_cpu_data.options & MIPS_CPU_FPU)
diff --git a/include/asm-mips/cpu.h b/include/asm-mips/cpu.h
index 229a786..4747760 100644
--- a/include/asm-mips/cpu.h
+++ b/include/asm-mips/cpu.h
@@ -33,6 +33,7 @@
 #define PRID_COMP_TOSHIBA	0x070000
 #define PRID_COMP_LSI		0x080000
 #define PRID_COMP_LEXRA		0x0b0000
+#define PRID_COMP_RMI		0x0c0000
 
 
 /*
@@ -203,6 +204,7 @@ enum cpu_type_enum {
 	 * MIPS64 class processors
 	 */
 	CPU_5KC, CPU_20KC, CPU_25KF, CPU_SB1, CPU_SB1A, CPU_LOONGSON2,
+	CPU_PHOENIX,
 
 	CPU_LAST
 };
@@ -252,6 +254,7 @@ enum cpu_type_enum {
 #define MIPS_CPU_VINT		0x00080000 /* CPU supports MIPSR2 vectored interrupts */
 #define MIPS_CPU_VEIC		0x00100000 /* CPU supports MIPSR2 external interrupt controller mode */
 #define MIPS_CPU_ULRI		0x00200000 /* CPU has ULRI feature */
+#define MIPS_CPU_PHOENIX_CACHE  0x00800000
 
 /*
  * CPU ASE encodings
diff --git a/include/asm-mips/mach-phoenix/war.h b/include/asm-mips/mach-phoenix/war.h
new file mode 100644
index 0000000..29376ca
--- /dev/null
+++ b/include/asm-mips/mach-phoenix/war.h
@@ -0,0 +1,28 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright 2008 Wind River System, Inc.
+ *
+ * Author: Jack Tan <jack.tan@windriver.com>
+ *
+ */
+#ifndef __ASM_MIPS_MACH_PHOENIX_WAR_H
+#define __ASM_MIPS_MACH_PHOENIX_WAR_H
+
+#define R4600_V1_INDEX_ICACHEOP_WAR	0
+#define R4600_V1_HIT_CACHEOP_WAR	0
+#define R4600_V2_HIT_CACHEOP_WAR	0
+#define R5432_CP0_INTERRUPT_WAR		0
+#define BCM1250_M3_WAR			0
+#define SIBYTE_1956_WAR			0
+#define MIPS4K_ICACHE_REFILL_WAR	0
+#define MIPS_CACHE_SYNC_WAR		0
+#define TX49XX_ICACHE_INDEX_INV_WAR	0
+#define RM9000_CDEX_SMP_WAR		0
+#define ICACHE_REFILLS_WORKAROUND_WAR	0
+#define R10000_LLSC_WAR			0
+#define MIPS34K_MISSED_ITLB_WAR		0
+
+#endif /* __ASM_MIPS_MACH_PHOENIX_WAR_H */
-- 
1.6.0.2.GIT

