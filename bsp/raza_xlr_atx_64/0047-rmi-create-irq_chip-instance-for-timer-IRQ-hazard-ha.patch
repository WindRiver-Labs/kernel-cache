From 8ae911dcfe9fdbea6642eb9e2563f8bde7fe80c7 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Sun, 21 Jun 2009 19:04:27 -0400
Subject: [PATCH 47/49] rmi: create irq_chip instance for timer IRQ hazard handling

This is a carry forward of the the 2.0 work by Ralf Baechle;
it adds a separate irq_chip instance so that the mask and
unmask actions of that struct can be used to hook in the
required irq_enable/disable_hazard functions.  Without them,
would eventually get enabled a bit later and out of order.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/mips/rmi/phoenix/irq.c |   25 +++++++++++++++++++++++++
 1 files changed, 25 insertions(+), 0 deletions(-)

diff --git a/arch/mips/rmi/phoenix/irq.c b/arch/mips/rmi/phoenix/irq.c
index f353f16..032cb2b 100644
--- a/arch/mips/rmi/phoenix/irq.c
+++ b/arch/mips/rmi/phoenix/irq.c
@@ -308,6 +308,29 @@ static struct irqaction phnx_rsvd_action = {
 	.next = 0
 };
 
+#define MIPS_CPU_IRQ_BASE 0
+
+static inline void unmask_mips_irq(unsigned int irq)
+{
+	set_c0_status(0x100 << (irq - MIPS_CPU_IRQ_BASE));
+	irq_enable_hazard();
+}
+
+static inline void mask_mips_irq(unsigned int irq)
+{
+	clear_c0_status(0x100 << (irq - MIPS_CPU_IRQ_BASE));
+	irq_disable_hazard();
+}
+
+static struct irq_chip mips_cpu_irq_controller = {
+	.name		= "MIPS",
+	.ack		= mask_mips_irq,
+	.mask		= mask_mips_irq,
+	.mask_ack	= mask_mips_irq,
+	.unmask		= unmask_mips_irq,
+	.eoi		= unmask_mips_irq,
+};
+
 void __init init_phoenix_irqs(void)
 {
 	int i;
@@ -316,6 +339,8 @@ void __init init_phoenix_irqs(void)
 		set_irq_chip(i, &phnx_pic);
 	}
 
+	set_irq_chip_and_handler(7, &mips_cpu_irq_controller,handle_percpu_irq);
+
 #ifdef CONFIG_REMOTE_DEBUG
 	irq_desc[IRQ_REMOTE_DEBUG].chip = &phnx_rsvd_pic;
 	irq_desc[IRQ_REMOTE_DEBUG].action = phnx_rsvd_action;
-- 
1.6.3.2

