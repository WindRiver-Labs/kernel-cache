From 83f11789698235d34a4faf4f7eb8c3670625ebd8 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Tue, 16 Mar 2010 15:23:38 +0800
Subject: [PATCH 11/17] MIPS: Octeon: Enable Octeon specfic saa/saad instructions support
  for atomic add/sub

Octeon has specifc atomic add instructions, saa/saad. This patch
enable saa/saad instructions support.

Original patch taken from Cavium SDK 1.9.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/include/asm/atomic.h |   32 ++++++++++++++++++++++++++++++++
 1 files changed, 32 insertions(+), 0 deletions(-)

diff --git a/arch/mips/include/asm/atomic.h b/arch/mips/include/asm/atomic.h
index 519197e..3fbce82 100644
--- a/arch/mips/include/asm/atomic.h
+++ b/arch/mips/include/asm/atomic.h
@@ -76,6 +76,14 @@ static __inline__ void atomic_add(int i, atomic_t * v)
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
+	} else if (cpu_has_saa) {
+		__asm__ __volatile__(
+		".set	push						\n"
+		".set	arch=octeon					\n"
+		"saa	%1, (%2)		# atomic_add		\n"
+		".set	pop						\n"
+		: "+m" (v->counter)
+		: "r" (i), "r" (v));
 	} else {
 		unsigned long flags;
 
@@ -121,6 +129,14 @@ static __inline__ void atomic_sub(int i, atomic_t * v)
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
+	} else if (cpu_has_saa) {
+		__asm__ __volatile__(
+		".set	push						\n"
+		".set	arch=octeon					\n"
+		"saa	%1, (%2)		# atomic_sub		\n"
+		".set	pop						\n"
+		: "+m" (v->counter)
+		: "r" (i), "r" (v));
 	} else {
 		unsigned long flags;
 
@@ -455,6 +471,14 @@ static __inline__ void atomic64_add(long i, atomic64_t * v)
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
+	} else if (cpu_has_saa) {
+		__asm__ __volatile__(
+		".set	push						\n"
+		".set	arch=octeon		# atomic64_add		\n"
+		"saad	%1, (%2)					\n"
+		".set	pop						\n"
+		: "+m" (v->counter)
+		: "r" (i), "r" (v));
 	} else {
 		unsigned long flags;
 
@@ -500,6 +524,14 @@ static __inline__ void atomic64_sub(long i, atomic64_t * v)
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
+	} else if (cpu_has_saa) {
+		__asm__ __volatile__(
+		".set	push						\n"
+		".set	arch=octeon		# atomic64_sub		\n"
+		"saad	%1, (%2)					\n"
+		".set	pop						\n"
+		: "+m" (v->counter)
+		: "r" (i), "r" (v));
 	} else {
 		unsigned long flags;
 
-- 
1.6.5.2

