From 46624f4943fa2d5aa900cd6b56d3b64757964a3e Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Fri, 12 Nov 2010 15:11:29 +0800
Subject: [PATCH 040/132] MIPS: Octeon: Rearrange L2 cache locking code

It is unclear to me if locking the code into the L2 before the code is
even generated works, but I think it may.  However to avoid any doubt,
and to make the whole thing a little cleaner, we factor the cache
locking code out and invoke it after the TLB handlers are generated.

Also print some nice messages so people are aware that their L2 is
being consumed.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |   75 +++++++++++++++++++++++++--------------
 1 files changed, 48 insertions(+), 27 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index df8caa5..f2117d1 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -722,33 +722,6 @@ void __init prom_init(void)
 		octeon_reserve32_memory = addr;
 #endif
 
-#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2
-	if (cvmx_read_csr(CVMX_L2D_FUS3) & (3ull << 34)) {
-		pr_info("Skipping L2 locking due to reduced L2 cache size\n");
-	} else {
-		uint32_t ebase = read_c0_ebase() & 0x3ffff000;
-#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_TLB
-		/* TLB refill */
-		cvmx_l2c_lock_mem_region(ebase, 0x100);
-#endif
-#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_EXCEPTION
-		/* General exception */
-		cvmx_l2c_lock_mem_region(ebase + 0x180, 0x80);
-#endif
-#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_LOW_LEVEL_INTERRUPT
-		/* Interrupt handler */
-		cvmx_l2c_lock_mem_region(ebase + 0x200, 0x80);
-#endif
-#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_INTERRUPT
-		cvmx_l2c_lock_mem_region(__pa_symbol(handle_int), 0x100);
-		cvmx_l2c_lock_mem_region(__pa_symbol(plat_irq_dispatch), 0x80);
-#endif
-#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_MEMCPY
-		cvmx_l2c_lock_mem_region(__pa_symbol(memcpy), 0x480);
-#endif
-	}
-#endif
-
 	sysinfo = cvmx_sysinfo_get();
 	memset(sysinfo, 0, sizeof(*sysinfo));
 	sysinfo->system_dram_size = (uint64_t)octeon_bootinfo->dram_size << 20;
@@ -1014,6 +987,54 @@ void cleanup_phy_mem(void)
 }
 #endif /* CONFIG_CRASH_DUMP */
 
+#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2
+static int __init octeon_l2_cache_lock(void)
+{
+       int is_octeon2 = (current_cpu_type() == CPU_CAVIUM_OCTEON2);
+
+       if ((is_octeon2 && (cvmx_read_csr(CVMX_MIO_FUS_DAT3) & (3ull << 32)))
+           || (!is_octeon2 && (cvmx_read_csr(CVMX_L2D_FUS3) & (3ull << 34)))) {
+               pr_info("Skipping L2 locking due to reduced L2 cache size\n");
+       } else {
+               u32 __maybe_unused my_ebase = read_c0_ebase() & 0x3ffff000;
+               unsigned int __maybe_unused len = 0;
+               unsigned int __maybe_unused len2 = 0;
+#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_TLB
+               /* TLB refill */
+               len = 0x100;
+               pr_info("L2 lock: TLB refill %d bytes\n", len);
+               cvmx_l2c_lock_mem_region(my_ebase, len);
+#endif
+#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_EXCEPTION
+               /* General exception */
+               len = 0x80;
+               pr_info("L2 lock: General exception %d bytes\n", len);
+               cvmx_l2c_lock_mem_region(my_ebase + 0x180, len);
+#endif
+#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_LOW_LEVEL_INTERRUPT
+               /* Interrupt handler */
+               len = 0x80;
+               pr_info("L2 lock: low-level interrupt %d bytes\n", len);
+               cvmx_l2c_lock_mem_region(my_ebase + 0x200, len);
+#endif
+#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_INTERRUPT
+               len = 0x100;
+               len2 = 0x180;
+               pr_info("L2 lock: interrupt %d bytes\n", len + len2);
+               cvmx_l2c_lock_mem_region(__pa_symbol(handle_int), len);
+               cvmx_l2c_lock_mem_region(__pa_symbol(plat_irq_dispatch), len2);
+#endif
+#ifdef CONFIG_CAVIUM_OCTEON_LOCK_L2_MEMCPY
+               len = 0x480;
+               pr_info("L2 lock: memcpy %d bytes\n", len);
+               cvmx_l2c_lock_mem_region(__pa_symbol(memcpy), len);
+#endif
+       }
+       return 0;
+}
+late_initcall(octeon_l2_cache_lock);
+#endif
+
 void __init plat_mem_setup(void)
 {
 	uint64_t mem_alloc_size;
-- 
1.6.5.2

