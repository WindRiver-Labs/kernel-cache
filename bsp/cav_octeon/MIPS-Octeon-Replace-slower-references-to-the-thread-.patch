From dee3250d8960a72573686801c81ebee4753e6786 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Mon, 1 Mar 2010 22:07:51 -0800
Subject: [PATCH 07/17] MIPS: Octeon: Replace slower references to the thread pointer with fast accesses

With this optimization, the kernel can dynamically replace slower
references to the thread pointer with fast accesses. This involves
replacing userspace instructions at runtime, so it may not work with
all programs. It is advised to use a toolchain that creates code for
FAST_ACCESS_TO_THREAD_POINTER instead of this option. If you have
code compiled with a Cavium compiler prior to release 1.5, or are
using a non Cavium compiler, this option may allow you to receive
most of the benefit of direct access to the thread pointer. It may
also cause programs to fail.

Instruction replacement is disabled on boot. It can be controlled by
writing a mode to /sys/module/traps/parameters/thread_pointer_mode.
The supported modes are:

	0 - Use the normal kernel emulation without any changes.
	1 - Replace emulated instructions with direct accesses to the thread
		register.
	2 - Replace emulated instructions and log the replacement PC.
	3 - Replace emulated instructions with break instructions. This will
		cause programs to fail, but makes it easy to stop gdb on the
		instruction.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/cavium-octeon/Kconfig |   27 +++++++++++++++++++++++++
 arch/mips/kernel/traps.c        |   42 ++++++++++++++++++++++++++++++++++++++-
 2 files changed, 68 insertions(+), 1 deletions(-)

diff --git a/arch/mips/cavium-octeon/Kconfig b/arch/mips/cavium-octeon/Kconfig
index fa82974..55ac7b6 100644
--- a/arch/mips/cavium-octeon/Kconfig
+++ b/arch/mips/cavium-octeon/Kconfig
@@ -52,6 +52,33 @@ config FAST_ACCESS_TO_THREAD_POINTER
 	  the TLB fault handlers. This CVMSEG address isn't available to user
 	  applications.
 
+config REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+	bool "Support dynamically replacing emulated thread pointer accesses"
+	depends on FAST_ACCESS_TO_THREAD_POINTER
+	default "y"
+	help
+	  When this option is set, the kernel can dynamically replace slower
+	  references to the thread pointer with fast accesses. This involves
+	  replacing userspace instructions at runtime, so it may not work with
+	  all programs. It is advised to use a toolchain that creates code for
+	  FAST_ACCESS_TO_THREAD_POINTER instead of this option. If you have
+	  code compiled with a Cavium compiler prior to release 1.5, or are
+	  using a non Cavium compiler, this option may allow you to receive
+	  most of the benefit of direct access to the thread pointer. It may
+	  also cause programs to fail.
+
+	  Instruction replacement is disabled on boot. It can be controlled by
+	  writing a mode to /sys/module/traps/parameters/thread_pointer_mode.
+	  The supported modes are:
+
+	  0 - Use the normal kernel emulation without any changes.
+	  1 - Replace emulated instructions with direct accesses to the thread
+		register.
+	  2 - Replace emulated instructions and log the replacement PC.
+	  3 - Replace emulated instructions with break instructions. This will
+		cause programs to fail, but makes it easy to stop gdb on the
+		instruction.
+
 config CAVIUM_OCTEON_LOCK_L2
 	bool "Lock often used kernel code in the L2"
 	depends on CAVIUM_OCTEON_SPECIFIC_OPTIONS
diff --git a/arch/mips/kernel/traps.c b/arch/mips/kernel/traps.c
index 86a18db..8779330 100644
--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -89,6 +89,18 @@ void (*board_nmi_handler_setup)(void);
 void (*board_ejtag_handler_setup)(void);
 void (*board_bind_eic_interrupt)(int irq, int regset);
 
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+/* 0 - Use the normal kernel emulation without any changes.
+ * 1 - Replace emulated instructions with direct accesses to the thread
+ *	register.
+ * 2 - Replace emulated instructions and log the replacement PC.
+ * 3 - Replace emulated instructions with break instructions. This will
+ *	cause programs to fail, but makes it easy to stop gdb on the
+ *	instruction.
+ */
+static int thread_pointer_mode = 0;
+module_param(thread_pointer_mode, int, 0644);
+#endif
 
 static void show_raw_backtrace(unsigned long reg29)
 {
@@ -581,6 +593,10 @@ static int simulate_rdhwr(struct pt_regs *regs, unsigned int opcode)
 {
 	struct thread_info *ti = task_thread_info(current);
 
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+	unsigned int __user *epc = (unsigned int __user *)regs->cp0_epc + ((regs->cp0_cause & CAUSEF_BD) != 0);
+#endif
+
 	if ((opcode & OPCODE) == SPEC3 && (opcode & FUNC) == RDHWR) {
 		int rd = (opcode & RD) >> 11;
 		int rt = (opcode & RT) >> 16;
@@ -607,12 +623,36 @@ static int simulate_rdhwr(struct pt_regs *regs, unsigned int opcode)
 			return 0;
 		case 29:
 			regs->regs[rt] = ti->tp_value;
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+			if (thread_pointer_mode) {
+				unsigned int new_instruction = 0x00000025 | (26 << 21) | (rt << 11); /* move [rt], k0 */
+				if (thread_pointer_mode == 3)
+					new_instruction = 0x0000000d; /* break */
+				if (access_process_vm(current, (unsigned long)epc, &new_instruction, sizeof(new_instruction), 1) != sizeof(new_instruction))
+					printk(KERN_ERR "Failed to replaced emulated RDHWR at PC=%p\n", epc);
+				if (thread_pointer_mode == 2)
+					printk(KERN_INFO "Replaced emulated RDHWR at PC=%p with \"move $%d, k0\"\n", epc, rt);
+				else if (thread_pointer_mode == 3)
+					printk(KERN_INFO "Replaced emulated RDHWR at PC=%p with \"break\"\n", epc);
+                        }
+#endif
 			return 0;
 		default:
 			return -1;
 		}
 	}
-
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+	else if (opcode == (0x00000025 | (26 << 21) | (3 << 11)) /* move v1, k0 */)
+	{
+		/* We need to flush the icache, not emulate an instruction. The EPC is wrong,
+		 * so we need to put it back to the old instruction
+		 */
+		pr_debug(KERN_INFO "Already replaced emulated RDHWR at PC=%p\n", epc);
+		regs->cp0_epc = (unsigned long)epc;
+		flush_cache_sigtramp((unsigned long)epc);
+		return 0;
+        }
+#endif
 	/* Not ours.  */
 	return -1;
 }
-- 
1.6.5.2

