From 7db0ca20a01c2a67531b6e4aa18e3c160fd52560 Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Mon, 15 Nov 2010 14:47:05 +0800
Subject: [PATCH 113/132] MIPS: If huge pages are enabled align STACK_TOP to a huge page boundry.

Source: Cavium SDK 2.0.0-366

This allows us to remap the stack onto huge pages without clobbering
either the VDSO nor memory past the TASK_SIZE limit.

Signed-off-by: David Daney <ddaney@caviumnetworks.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/include/asm/processor.h |   20 +++++++++++++++++---
 arch/mips/kernel/vdso.c           |    2 +-
 2 files changed, 18 insertions(+), 4 deletions(-)

diff --git a/arch/mips/include/asm/processor.h b/arch/mips/include/asm/processor.h
index 9542440..f7ccc11 100644
--- a/arch/mips/include/asm/processor.h
+++ b/arch/mips/include/asm/processor.h
@@ -46,7 +46,7 @@ extern unsigned int vced_count, vcei_count;
  */
 #define TASK_SIZE	0x7fff8000UL
 #define STACK_TOP	((TASK_SIZE & PAGE_MASK) - SPECIAL_PAGES_SIZE)
-
+#define SPECIAL_PAGES_BASE STACK_TOP
 /*
  * This decides where the kernel will search for a free chunk of vm
  * space during mmap's.
@@ -64,10 +64,24 @@ extern unsigned int vced_count, vcei_count;
  */
 #define TASK_SIZE32	0x7fff8000UL
 #define TASK_SIZE	0x10000000000UL
-#define STACK_TOP	\
+
+#ifdef CONFIG_HUGETLB_PAGE
+/*
+ * Align the STACK_TOP on a HPAGE_SIZE boundry so the stack may be
+ * remapped to a huge page.
+ */
+#define STACK_TOP							\
+	((((test_thread_flag(TIF_32BIT_ADDR) ?				\
+	    TASK_SIZE32 : TASK_SIZE) & PAGE_MASK) - SPECIAL_PAGES_SIZE) & HPAGE_MASK)
+#define SPECIAL_PAGES_BASE						\
 	(((test_thread_flag(TIF_32BIT_ADDR) ?				\
 	   TASK_SIZE32 : TASK_SIZE) & PAGE_MASK) - SPECIAL_PAGES_SIZE)
-
+#else
+#define STACK_TOP							\
+	(((test_thread_flag(TIF_32BIT_ADDR) ?				\
+	   TASK_SIZE32 : TASK_SIZE) & PAGE_MASK) - SPECIAL_PAGES_SIZE)
+#define SPECIAL_PAGES_BASE STACK_TOP
+#endif
 /*
  * This decides where the kernel will search for a free chunk of vm
  * space during mmap's.
diff --git a/arch/mips/kernel/vdso.c b/arch/mips/kernel/vdso.c
index e5cdfd6..7baa0b5 100644
--- a/arch/mips/kernel/vdso.c
+++ b/arch/mips/kernel/vdso.c
@@ -67,7 +67,7 @@ subsys_initcall(init_vdso);
 
 static unsigned long vdso_addr(unsigned long start)
 {
-	return STACK_TOP;
+	return SPECIAL_PAGES_BASE;
 }
 
 int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)
-- 
1.6.5.2

