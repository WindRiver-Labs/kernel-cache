From 1dbbbb150bfb4444f98cf9fab5378ffab953d3e7 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Fri, 25 Feb 2011 11:45:00 +0800
Subject: [PATCH 35/38] WRHV: MIPS: Paravirtualize plat_time_init

Define WRHV specific clockevent and hook WRHV specific timer
interrupt handler.
Now, timer IRQ number is hardcoded, will be replaced by VIOAPIC
vector.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/include/asm/paravirt.h |    6 +++++
 arch/mips/kernel/paravirt.c      |   10 +++++++++
 arch/mips/kernel/vbi/wrhv.c      |   42 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 58 insertions(+), 0 deletions(-)

diff --git a/arch/mips/include/asm/paravirt.h b/arch/mips/include/asm/paravirt.h
index ce66b80..51da23c 100644
--- a/arch/mips/include/asm/paravirt.h
+++ b/arch/mips/include/asm/paravirt.h
@@ -14,6 +14,7 @@ struct pv_info {
 extern void __init native_per_cpu_trap_init(void);
 extern void __init native_tlb_init(void);
 extern void __init native_arch_init_irq(void);
+extern void __init native_plat_time_init(void);
 
 /*
  * paravirtual operations structure
@@ -30,9 +31,14 @@ struct pv_irq_ops {
  	void (*arch_init_irq)(void);
 };
  
+struct pv_time_ops {
+ 	void (*plat_time_init)(void);
+};
+ 
 extern struct pv_cpu_ops pv_cpu_ops;
 extern struct pv_mem_ops pv_mem_ops;
 extern struct pv_irq_ops pv_irq_ops;
+extern struct pv_time_ops pv_time_ops;
 
 #endif /* CONFIG_PARAVIRT */
 #endif	/* __ASM_PARAVIRT_H */
diff --git a/arch/mips/kernel/paravirt.c b/arch/mips/kernel/paravirt.c
index 905ad29..6d109c9 100644
--- a/arch/mips/kernel/paravirt.c
+++ b/arch/mips/kernel/paravirt.c
@@ -51,6 +51,10 @@ struct pv_irq_ops pv_irq_ops = {
  	.arch_init_irq = native_arch_init_irq,
 };
  
+struct pv_time_ops pv_time_ops = {
+ 	.plat_time_init = native_plat_time_init,
+};
+ 
 void __init paravirt_per_cpu_trap_init(void)
 {
 	pv_cpu_ops.per_cpu_trap_init();
@@ -66,6 +70,12 @@ void __init paravirt_arch_init_irq(void)
  	pv_irq_ops.arch_init_irq();
 }
  
+void __init paravirt_plat_time_init(void)
+{
+ 	pv_time_ops.plat_time_init();
+}
+ 
 EXPORT_SYMBOL(pv_cpu_ops);
 EXPORT_SYMBOL(pv_mem_ops);
 EXPORT_SYMBOL(pv_irq_ops);
+EXPORT_SYMBOL(pv_time_ops);
diff --git a/arch/mips/kernel/vbi/wrhv.c b/arch/mips/kernel/vbi/wrhv.c
index fb15b98..54162d9 100644
--- a/arch/mips/kernel/vbi/wrhv.c
+++ b/arch/mips/kernel/vbi/wrhv.c
@@ -17,6 +17,8 @@
 #include <linux/sched.h>
 #include <linux/irq.h>
 #include <linux/interrupt.h>
+#include <linux/clockchips.h>
+#include <linux/clocksource.h>
 
 #include <asm/mipsmtregs.h>
 #include <asm/mmu_context.h>
@@ -127,6 +129,44 @@ void __init wrhv_arch_init_irq(void)
 	}
 }
 
+static void wrhv_set_mode(enum clock_event_mode mode, struct clock_event_device *dev)
+{
+ 	return;
+}
+ 
+static int wrhv_set_next_event(unsigned long evt, struct clock_event_device *dev)
+{
+ 	return 0;
+}
+static struct clock_event_device wrhv_clockevent = {
+ 	.name		= "wrhv",
+ 	.shift		= 32,
+ 	.rating		= 1,
+ 	.irq		= 0, /* Need adjust IRQ number */
+ 	.mult		= 1,     /* To be filled in */
+ 	.set_mode	= wrhv_set_mode,
+ 	.set_next_event	= wrhv_set_next_event,
+ 	.features	= CLOCK_EVT_FEAT_ONESHOT,
+};
+ 
+static struct irqaction wrhv_timer_irqaction = {
+ 	.handler = wrhv_timer_interrupt,
+ 	.flags = IRQF_DISABLED | IRQF_PERCPU | IRQF_TIMER,
+ 	.name = "timer",
+};
+ 
+void __init wrhv_plat_time_init(void)
+{
+	int ret;
+
+	wrhv_clockevent.cpumask = get_cpu_mask(0);
+	clockevents_register_device(&wrhv_clockevent);
+
+	ret = setup_irq(wrhv_clockevent.irq, &wrhv_timer_irqaction);
+	if (ret)
+		printk("Setup Timer interrupt failed\n");
+}
+
 void __init wrhv_init(void)
 {
 	/* initialize wr_config so that we can access
@@ -142,6 +182,8 @@ void __init wrhv_init(void)
 	pv_mem_ops.tlb_init = wrhv_tlb_init;
 
 	pv_irq_ops.arch_init_irq = wrhv_arch_init_irq;
+
+	pv_time_ops.plat_time_init = wrhv_plat_time_init;
 }
 
 #ifdef CONFIG_PARAVIRT
-- 
1.6.5.2

