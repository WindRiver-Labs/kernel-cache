From e6b3fcd1b44fc20aab1a6872052da55b0f6dd9d3 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Thu, 3 Mar 2011 10:31:58 +0800
Subject: [PATCH 01/38] WRHV: VBI: Update common VBI from HYP 1.3

Add common VBI support update from HYP 1.3.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 include/vbi/compat.h    |    7 ++
 include/vbi/cpu_types.h |   12 +--
 include/vbi/stats.h     |    1 -
 include/vbi/types.h     |    4 +
 include/vbi/vbi.h       |    1 +
 include/vbi/vmmu64.h    |  200 +++++++++++++++++++++++++++++++++++++++++++++++
 kernel/vbi/lib.c        |    2 +
 kernel/vbi/msg.c        |    1 +
 kernel/vbi/ns.c         |    1 +
 9 files changed, 219 insertions(+), 10 deletions(-)
 create mode 100644 include/vbi/vmmu64.h

diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index 83f958c..803bea8 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -236,4 +236,11 @@
 #define vbiDeviceInterruptGet	vbi_get_dev_interrupt
 #define vbiDeviceRegisterSetGet	vbi_get_dev_registers
 
+#define vbiIntControllerDone	vbi_irq_controller_done
+#define vbiIntEnable		vbi_irq_enable
+
+#define vbiVmmuMaxAsid		vbi_get_max_asid_vmmu
+
+#define vbiCtxLoad		vbi_ctx_load
+
 #endif  /* _VBI_COMPAT_H */
diff --git a/include/vbi/cpu_types.h b/include/vbi/cpu_types.h
index 2d64f8f..cf31dd1 100644
--- a/include/vbi/cpu_types.h
+++ b/include/vbi/cpu_types.h
@@ -31,15 +31,9 @@
 /* MIPS64R2 specific types */
 #if (CPU == MIPSI64R2)
 
-#define CPU_MIPS_32BIT ((CPU==_VX_MIPS32) || \
-			    (CPU==MIPSI2) || \
-			    (CPU==MIPSI32) || \
-			    (CPU==MIPSI32R2))
-
-#define CPU_MIPS_64BIT ((CPU==MIPS64) || \
-			    (CPU==MIPSI3) || \
-			    (CPU==MIPSI64) || \
-			    (CPU==MIPSI64R2))
+#define CPU_MIPS_32BIT	0 
+
+#define CPU_MIPS_64BIT	1
 
 typedef unsigned long	INSTR;		/* 32 bit word-aligned instructions */
 
diff --git a/include/vbi/stats.h b/include/vbi/stats.h
index c5c0f74..0cd7676 100644
--- a/include/vbi/stats.h
+++ b/include/vbi/stats.h
@@ -3,7 +3,6 @@
 
 #ifndef _ASMLANGUAGE
 
-#include <linux/kernel.h>
 /* api statistic structure */
 struct vbi_api_stats{
 	/* functions implemented in vbi.h */
diff --git a/include/vbi/types.h b/include/vbi/types.h
index b367c43..df8e9f6 100644
--- a/include/vbi/types.h
+++ b/include/vbi/types.h
@@ -30,6 +30,10 @@
 #define CPU PPC85XX   /* Currently all PPC treated the same in vbi */
 #endif /* CONFIG_PPC */
 
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+#define CPU MIPSI64R2
+#endif /* CONFIG_CPU_CAVIUM_OCTEON */
+ 
 #include <vbi/cpu_types.h>	/* for PENTIUM, PPC85XX, etc */
 
 #endif  /* _VBI_TYPES_H */
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index ab99d6e..ef0ca93 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -520,6 +520,7 @@ struct vbi_clk_hook
 extern struct vb_config *wr_vb_config;
 extern struct vb_status *wr_vb_status;
 extern struct vb_control *wr_vb_control;
+extern int32_t vb_int_nested; /* wrhvVbIntNested */
 extern void vbi_init(struct vb_config *config);
 extern void vbi_exc_stub(void);
 extern void ASSERT_FN(const char *, const char *, int);
diff --git a/include/vbi/vmmu64.h b/include/vbi/vmmu64.h
new file mode 100644
index 0000000..c7aabe3
--- /dev/null
+++ b/include/vbi/vmmu64.h
@@ -0,0 +1,200 @@
+/*
+ * vmmu64.h - hypervisor 64 bit virtual MMU structure definitions
+ *
+ * Copyright 2010 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ */
+#ifndef __VBI_VMMU64_H
+#define __VBI_VMMU64_H
+
+/*
+
+The vmmu64 virtual address space is restricted to 40 bits and is decoded using
+a level-1/level-2/level-3 page table.  The virtual address is decoded as follows:
+
+
+                                          40-bit Virtual Address
+     +--------------------------------------------------------------------+
+     |      L1 offset       | L2 offset |  L3 offset |  Page offset       |
+     +--------------------------------------------------------------------+
+		10 bits       9 bits        9 bits        12 bits
+               |               |              |        
+               |               |              |
+ +-------------+               |              +---------+
+ |                             |                        |
+ |                             |                        |
+ |           L1 Table          |            L2 Table    |      L3 Table
+ |    1023 +----------+        |     511 +----------+   |  511 +----------+
+ |         |          |        |         |          |   |      |          |
+ |         |          |        |         |          |   |      |          |
+ |         |          |        |         |----------|   |      |----------|
+ |         |          |        |   +---->|   L3 ptr |---+----->|   PTE    | 8 
+ |         |          |        |   |     |----------| 28       |----------|byte
+ |         |          | 19     |   |     |          | bits     |          |PTE
+ |         |----------| bits   |   |     |          |          |          |
+ +-------->|  L2 ptr  |--------+---+     |          |          |          |
+           |----------|                  |          |          |          |
+           |          |                  |          |          |          |
+           |          |                  |          |          |          |
+         0 +----------+                0 +----------+        0 +----------+
+           2 page (8KB)                   1 page (4KB)          1 page (4KB) 
+          1024 L2 pointers               512 L3 pointers        512 PTE entries
+
+
+
+(VMMU64_PTE is arch specific, following describes the VMMU64_PTE for mips64)  
+
+Each page table entry is 8 bytes and uses the following format:
+
+
+word 0 (64-bits):
+
+  63                 43 42                                  6 5     3 2 1 0
+ +---------------------+-------------------------------------+-------+-----+
+ |FILL                 |PFN                                  | Cache |D|V|G|
+ +---------------------+-------------------------------------+-------+-+-+-+
+
+		PFN        - page frame number
+		C          - Cache Coherency bit
+		D	   - Dirty bit
+		V	   - Valid bit
+		G	   - Global bit
+
+*/
+
+#ifndef	_ASMLANGUAGE
+
+#if (CPU == MIPSI64R2) 
+/* Page Table Entry Definition */
+
+typedef union vmmu64_pte		/* vmmu64 pte format */
+    {
+	struct {
+	uint32_t fill:21;		/* could be used for pagemask */
+	uint64_t pfn:37;
+	uint32_t coherent:3;
+	uint32_t dirty:1;
+	uint32_t valid:1;
+	uint32_t global:1;
+	} field;
+	uint64_t data64;
+    } VMMU64_PTE;
+#else
+/* for all other arches, for now placeholder */
+typedef uint64_t VMMU64_PTE;
+#endif
+
+/* Effective Address Definition */
+
+typedef union vmmu64EffectiveAddr 	/* effective Address structure */
+    {
+    struct
+        {
+        uint64_t fill:24;			/* reserved */
+        uint64_t l1index:10;		/* Level 1 Index (1K) */
+        uint64_t l2index:9;		/* Level 2 Index (512) */
+        uint64_t l3index:9;		/* Level 3 Index (512) */
+        uint64_t po:12;			/* Page Offset (4K) */
+        } field;
+    uint64_t addr;
+    } VMMU64_EFFECTIVE_ADDR;
+
+typedef union vmmu64RealAddress		/* Real Address Structure */
+    {
+    struct                      	/* Bit field description */
+        {
+        uint64_t rpn:52;           	/* Real Page Number */
+        uint64_t po:12;            	/* Page Offset */
+        }field;
+    uint64_t realAddr;            	/* Real Address */
+    } VMMU64_REAL_ADDRESS;
+
+
+/* Level-1 descriptor definition */
+
+typedef union vmmu64_level_1_desc	/* Level 1 descriptor format */
+    {
+    struct                      	/* Bit field desciption */
+        {
+        uint64_t l2ba:52;          	/* Level 2 table Base Address */
+        uint64_t reserved:12;      	/* Reserved */
+        } field;
+    uint64_t l1desc;               	/* Level 1 descriptor */
+    } VMMU64_LEVEL_1_DESC;
+
+
+/* Level-2 descriptor definition */
+
+typedef union vmmu64_level_2_desc	/* Level 2 descriptor format */
+    {
+    struct                      	/* Bit field desciption */
+        {
+        uint64_t l3ba:52;          	/* Level 3 table Base Address */
+        uint64_t reserved:12;      	/* Reserved */
+        } field;
+    uint64_t l1desc;               	/* Level 3 descriptor */
+    } VMMU64_LEVEL_2_DESC;
+
+
+/* Level-3 descriptor definition */
+
+typedef union vmmu64_level_3_desc	/* Level 2 descriptor format */
+    {
+    VMMU64_PTE pte;			/* a full PTE entry */
+    } VMMU64_LEVEL_3_DESC;
+
+
+#endif /* _ASMLANGUAGE */
+
+
+/* VMMU page table structure */
+
+#define	VMMU64_L1_ENTRIES	1024	/* top 10 bits of address	*/
+#define	VMMU64_L1_SIZE	2	/* table size in pages (8KB)	*/
+#define	VMMU64_L2_ENTRIES	512	/* middle 9 bits of address	*/
+#define	VMMU64_L2_SIZE	1	/* table size in pages (4KB)	*/
+#define	VMMU64_L3_ENTRIES	512	/* middle 9 bits of address	*/
+#define	VMMU64_L3_SIZE	1	/* table size in pages (4KB)	*/
+
+#define VMMU64_TLB_FLUSH_ALL    0
+#define VMMU64_TLB_FLUSH_NONE   1
+#define VMMU64_TLB_FLUSH_ASID   2
+#define VMMU64_TLB_FLUSH_ADDR   3
+
+#ifndef	VMMU64_PAGE_SIZE
+#define	VMMU64_PAGE_SIZE	4096	/* always use a 4KB page size */
+#define	VMMU64_RPN_SHIFT	12
+#endif
+#define	NVPAGES(x)		((x)/VMMU64_PAGE_SIZE)
+
+/* address to level-1 table offset */
+
+#define	VMMU64_L1_INDEX(v)	((((uint64_t)(v)) >> 30) & 0x3ff)
+
+/* address to level-2 table offset */
+
+#define	VMMU64_L2_INDEX(v)	((((uint64_t)(v)) >> 21) & 0x1ff)
+
+/* address to level-3 table offset */
+
+#define	VMMU64_L3_INDEX(v)	((((uint64_t)(v)) >> 12) & 0x1ff)
+
+/* offset within page */
+
+#define	VMMU64_PAGE_OFFSET(v)	(((uint64_t)(v)) & 0xfff)
+
+/* address to logical block number */
+
+#define	VMMU64_ADDR_TO_LBA(v)	(((uint64_t)(v)) >> VMMU64_RPN_SHIFT)
+#define	VMMU64_LBA_TO_ADDR(v)	(((uint64_t)(v)) << VMMU64_RPN_SHIFT)
+
+#endif  /* __VBI_VMMU64_H */
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index a228f41..9cf2e15 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -113,6 +113,8 @@ struct vb_control *wr_vb_control;/* The address of the core's Control area */
 
 struct vb_status *wr_vb_status;	/* The address of the core's Status area */
 
+int32_t wr_irq_nested; /* Used by VBI interrupt/exception management */
+ 
 /*
  * vbi_init - Initialize support for vbi library functions
  *
diff --git a/kernel/vbi/msg.c b/kernel/vbi/msg.c
index 7882ebe..48fcd6d 100644
--- a/kernel/vbi/msg.c
+++ b/kernel/vbi/msg.c
@@ -15,6 +15,7 @@
  */
 
 #include <linux/types.h>
+#include <linux/kernel.h>
 #include <vbi/private.h>
 
 #define DEBUGM(fmt, args...)
diff --git a/kernel/vbi/ns.c b/kernel/vbi/ns.c
index 5577a33..051d5e3 100644
--- a/kernel/vbi/ns.c
+++ b/kernel/vbi/ns.c
@@ -26,6 +26,7 @@ for processing.
 */
 
 #include <linux/string.h>
+#include <linux/kernel.h>
 #include <vbi/vbi.h>
 #include <vbi/private.h>
 
-- 
1.6.5.2

