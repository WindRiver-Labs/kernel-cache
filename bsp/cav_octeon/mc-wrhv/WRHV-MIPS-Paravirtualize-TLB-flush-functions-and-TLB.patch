From b0321513b65f3992d92c305caad3d65051365252 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Wed, 23 Feb 2011 10:51:13 +0800
Subject: [PATCH 30/38] WRHV: MIPS: Paravirtualize TLB flush functions and TLB update

For GOS, the most TLB flush functions are not necessary, just
keep flush_tlb_mm. And, GOS doesn't need update TLB entries
really.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/mm/tlb-r4k.c |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/arch/mips/mm/tlb-r4k.c b/arch/mips/mm/tlb-r4k.c
index c618eed..61ed787 100644
--- a/arch/mips/mm/tlb-r4k.c
+++ b/arch/mips/mm/tlb-r4k.c
@@ -19,6 +19,9 @@
 #include <asm/mmu_context.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+#ifdef CONFIG_WRHV
+#include <vbi/vbi.h>
+#endif
 
 extern void build_tlb_refill_handler(void);
 
@@ -68,6 +71,7 @@ extern void build_tlb_refill_handler(void);
 
 void local_flush_tlb_all(void)
 {
+#ifndef CONFIG_WRHV 
 	unsigned long flags;
 	unsigned long old_ctx;
 	int entry;
@@ -93,6 +97,7 @@ void local_flush_tlb_all(void)
 	write_c0_entryhi(old_ctx);
 	FLUSH_ITLB;
 	EXIT_CRITICAL(flags);
+#endif
 }
 
 /* All entries common to a mm share an asid.  To effectively flush
@@ -115,6 +120,7 @@ void local_flush_tlb_mm(struct mm_struct *mm)
 void local_flush_tlb_range(struct vm_area_struct *vma, unsigned long start,
 	unsigned long end)
 {
+#ifndef CONFIG_WRHV 
 	struct mm_struct *mm = vma->vm_mm;
 	int cpu = smp_processor_id();
 
@@ -157,10 +163,12 @@ void local_flush_tlb_range(struct vm_area_struct *vma, unsigned long start,
 		FLUSH_ITLB;
 		EXIT_CRITICAL(flags);
 	}
+#endif
 }
 
 void local_flush_tlb_kernel_range(unsigned long start, unsigned long end)
 {
+#ifndef CONFIG_WRHV 
 	unsigned long size, flags;
 
 	ENTER_CRITICAL(flags);
@@ -198,10 +206,12 @@ void local_flush_tlb_kernel_range(unsigned long start, unsigned long end)
 	}
 	FLUSH_ITLB;
 	EXIT_CRITICAL(flags);
+#endif
 }
 
 void local_flush_tlb_page(struct vm_area_struct *vma, unsigned long page)
 {
+#ifndef CONFIG_WRHV
 	int cpu = smp_processor_id();
 
 	if (cpu_context(cpu, vma->vm_mm) != 0) {
@@ -232,6 +242,7 @@ void local_flush_tlb_page(struct vm_area_struct *vma, unsigned long page)
 		FLUSH_ITLB_VM(vma);
 		EXIT_CRITICAL(flags);
 	}
+#endif
 }
 
 /*
@@ -240,6 +251,7 @@ void local_flush_tlb_page(struct vm_area_struct *vma, unsigned long page)
  */
 void local_flush_tlb_one(unsigned long page)
 {
+#ifndef CONFIG_WRHV 
 	unsigned long flags;
 	int oldpid, idx;
 
@@ -263,6 +275,7 @@ void local_flush_tlb_one(unsigned long page)
 	write_c0_entryhi(oldpid);
 	FLUSH_ITLB;
 	EXIT_CRITICAL(flags);
+#endif
 }
 
 /*
@@ -273,11 +286,13 @@ void local_flush_tlb_one(unsigned long page)
 void __update_tlb(struct vm_area_struct * vma, unsigned long address, pte_t pte)
 {
 	unsigned long flags;
+#ifndef CONFIG_WRHV
 	pgd_t *pgdp;
 	pud_t *pudp;
 	pmd_t *pmdp;
 	pte_t *ptep;
 	int idx, pid;
+#endif
 
 	/*
 	 * Handle debugger faulting in for debugee.
@@ -287,6 +302,7 @@ void __update_tlb(struct vm_area_struct * vma, unsigned long address, pte_t pte)
 
 	ENTER_CRITICAL(flags);
 
+#ifndef CONFIG_WRHV
 	pid = read_c0_entryhi() & ASID_MASK;
 	address &= (PAGE_MASK << 1);
 	write_c0_entryhi(address | pid);
@@ -332,6 +348,7 @@ void __update_tlb(struct vm_area_struct * vma, unsigned long address, pte_t pte)
 		else
 			tlb_write_indexed();
 	}
+#endif
 	tlbw_use_hazard();
 	FLUSH_ITLB_VM(vma);
 	EXIT_CRITICAL(flags);
-- 
1.6.5.2

