From 66c89977f3e45db5ca7f627bae994e6188b6f37f Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Tue, 21 Dec 2010 16:28:01 +0800
Subject: [PATCH 19/38] WRHV: MIPS: Get syscall number from VB_STATUS

For GOS, v0 can be corrupted by Hypervisor before handling syscall
exception. So, get syscall number from VB_STATUS instead of physical
v0 register.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/kernel/scall64-64.S  |    4 ++++
 arch/mips/kernel/scall64-n32.S |    4 ++++
 arch/mips/kernel/scall64-o32.S |    6 +++++-
 3 files changed, 13 insertions(+), 1 deletions(-)

diff --git a/arch/mips/kernel/scall64-64.S b/arch/mips/kernel/scall64-64.S
index cf9582b..bf00e44 100644
--- a/arch/mips/kernel/scall64-64.S
+++ b/arch/mips/kernel/scall64-64.S
@@ -40,6 +40,10 @@ NESTED(handle_sys64, PT_SIZE, sp)
 	.set	at
 #endif
 
+#ifdef CONFIG_WRHV
+	PTR_L	v0, wr_vb_status
+	LONG_L	v0, VB_STATUS_V0(v0)	# Get syscall number
+#endif
 	dsubu	t0, v0, __NR_64_Linux	# check syscall number
 	sltiu	t0, t0,	__NR_64_Linux_syscalls + 1
 #if !defined(CONFIG_MIPS32_O32) && !defined(CONFIG_MIPS32_N32)
diff --git a/arch/mips/kernel/scall64-n32.S b/arch/mips/kernel/scall64-n32.S
index 0afa97b..515390a 100644
--- a/arch/mips/kernel/scall64-n32.S
+++ b/arch/mips/kernel/scall64-n32.S
@@ -39,6 +39,10 @@ NESTED(handle_sysn32, PT_SIZE, sp)
 	.set	at
 #endif
 
+#ifdef CONFIG_WRHV
+	PTR_L	v0, wr_vb_status
+	LONG_L	v0, VB_STATUS_V0(v0)
+#endif
 	dsubu	t0, v0, __NR_N32_Linux	# check syscall number
 	sltiu	t0, t0,	__NR_N32_Linux_syscalls + 1
 
diff --git a/arch/mips/kernel/scall64-o32.S b/arch/mips/kernel/scall64-o32.S
index 647d03b..4079891 100644
--- a/arch/mips/kernel/scall64-o32.S
+++ b/arch/mips/kernel/scall64-o32.S
@@ -33,12 +33,16 @@ NESTED(handle_sys, PT_SIZE, sp)
 	.set	at
 	ld	t1, PT_EPC(sp)		# skip syscall on return
 
+#ifdef CONFIG_WRHV
+	PTR_L	v0, wr_vb_status
+	LONG_L	v0, VB_STATUS_V0(v0)	# Get syscall number from VB_STATUS
+#endif
 	dsubu	t0, v0, __NR_O32_Linux	# check syscall number
 	sltiu	t0, t0, __NR_O32_Linux_syscalls + 1
 	daddiu	t1, 4			# skip to next instruction
 	sd	t1, PT_EPC(sp)
 	beqz	t0, not_o32_scall
-#if 0
+#if 0 
  SAVE_ALL
  move a1, v0
  PRINT("Scall %ld\n")
-- 
1.6.5.2

