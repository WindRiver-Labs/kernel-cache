From d86bf3940ef82f948d320be0b6a05231aec9aa25 Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Fri, 11 Mar 2011 11:09:22 +0800
Subject: [PATCH 1/2] WRHV: MIPS: enable kernel modules for GOS

Guest OS kernel working in Supervisor mode hence kernel threads should
be running in Supervisor mode as well, here just make sure about that
explicitly

Vmalloc doesn't functioning for now due to the fact that xsseg
addresses are not phased correctly between Guest OS and hypervisor,
here just switch vmalloc to kmalloc to enable kernel modules

Signed-off-by: Liang Li <liang.li@windriver.com>
---
 arch/mips/kernel/module.c   |    8 ++++++++
 arch/mips/kernel/vbi/wrhv.c |   11 +++++------
 kernel/module.c             |    6 +++---
 3 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/arch/mips/kernel/module.c b/arch/mips/kernel/module.c
index 6f51dda..d95070c 100644
--- a/arch/mips/kernel/module.c
+++ b/arch/mips/kernel/module.c
@@ -60,14 +60,22 @@ void *module_alloc(unsigned long size)
 #else
 	if (size == 0)
 		return NULL;
+#ifdef CONFIG_WRHV
+	return kmalloc(size, GFP_KERNEL);
+#else
 	return vmalloc(size);
+#endif /* CONFIG_WRHV */
 #endif
 }
 
 /* Free memory returned from module_alloc */
 void module_free(struct module *mod, void *module_region)
 {
+#ifdef CONFIG_WRHV
+	kfree(module_region);
+#else
 	vfree(module_region);
+#endif /* CONFIG_WRHV */
 }
 
 int module_frob_arch_sections(Elf_Ehdr *hdr, Elf_Shdr *sechdrs,
diff --git a/arch/mips/kernel/vbi/wrhv.c b/arch/mips/kernel/vbi/wrhv.c
index eb7d68c..dc7ec7f 100644
--- a/arch/mips/kernel/vbi/wrhv.c
+++ b/arch/mips/kernel/vbi/wrhv.c
@@ -284,12 +284,11 @@ long wrhv_kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)
 	regs.regs[5] = (unsigned long) fn;
 	regs.cp0_epc = (unsigned long) kernel_thread_helper;
 	regs.cp0_status = wr_vb_status->vb_status_regs.sr;
-#if defined(CONFIG_CPU_R3000) || defined(CONFIG_CPU_TX39XX)
-	regs.cp0_status = (regs.cp0_status & ~(ST0_KUP | ST0_IEP | ST0_IEC)) |
-			  ((regs.cp0_status & (ST0_KUC | ST0_IEC)) << 2);
-#else
-	regs.cp0_status |= ST0_EXL; /* Not sure if need set EXL on GOS */
-#endif
+	/*
+	 * make sure this is supervisor mode
+	 */
+	regs.cp0_status &= ~ST0_KSU;
+	regs.cp0_status |= KSU_SUPERVISOR;
 
 	/* Ok, create the new process.. */
 	pid = do_fork(flags | CLONE_VM | CLONE_UNTRACED,
diff --git a/kernel/module.c b/kernel/module.c
index 13170d5..7209110 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -2060,7 +2060,7 @@ static noinline struct module *load_module(void __user *umod,
 	/* Suck in entire file: we'll want most of it. */
 	/* vmalloc barfs on "unusual" numbers.  Check here */
 
-#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+#if defined(CONFIG_WRHV) && (defined(CONFIG_PPC) || defined(CONFIG_MIPS))
 	if (len > 64 * 1024 * 1024 || (hdr = kmalloc(len, GFP_KERNEL)) == NULL)
 #else
 	if (len > 64 * 1024 * 1024 || (hdr = vmalloc(len)) == NULL)
@@ -2513,7 +2513,7 @@ module_added:
 	add_notes_attrs(mod, hdr->e_shnum, secstrings, sechdrs);
 
 	/* Get rid of temporary copy */
-#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+#if defined(CONFIG_WRHV) && (defined(CONFIG_PPC) || defined(CONFIG_MIPS))
 	kfree(hdr);
 #else
 	vfree(hdr);
@@ -2551,7 +2551,7 @@ module_added:
 	kfree(args);
 	kfree(strmap);
  free_hdr:
-#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+#if defined(CONFIG_WRHV) && (defined(CONFIG_PPC) || defined(CONFIG_MIPS))
 	kfree(hdr);
 #else
 	vfree(hdr);
-- 
1.6.5.2

