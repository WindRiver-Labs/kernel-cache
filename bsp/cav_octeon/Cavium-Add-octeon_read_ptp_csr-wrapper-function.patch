From 89bafa7c0fc8c39addd31d967e6976be33a46912 Mon Sep 17 00:00:00 2001
From: Phil Staub <Phil.Staub@windriver.com>
Date: Thu, 10 Mar 2011 11:38:36 -0800
Subject: [PATCH 07/13] Cavium: Add octeon_read_ptp_csr wrapper function

Source: Cavium sdk_2.0.0_updates_p4.tgz

Add a wrapper function (octeon_read_ptp_csr()) to consolitate handling
of an errata into one place. (In cn63xx pass 1, the ptp clock hi
register must be read twice to get the right results.)

Signed-off-by: Phil Staub <Phil.Staub@windriver.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/cavium-octeon/csrc-octeon-ptp.c |   11 ++++-------
 arch/mips/include/asm/octeon/octeon.h     |   16 ++++++++++++++++
 drivers/net/octeon/ethernet-mdio.c        |    4 ++--
 drivers/net/octeon/ethernet-rx.c          |    4 +---
 4 files changed, 23 insertions(+), 12 deletions(-)

diff --git a/arch/mips/cavium-octeon/csrc-octeon-ptp.c b/arch/mips/cavium-octeon/csrc-octeon-ptp.c
index c033b31..6ddcfd9 100644
--- a/arch/mips/cavium-octeon/csrc-octeon-ptp.c
+++ b/arch/mips/cavium-octeon/csrc-octeon-ptp.c
@@ -14,11 +14,7 @@
 
 static cycle_t octeon_ptp_clock_read(struct clocksource *cs)
 {
-	/* CN63XX pass 1.x has an errata where you must read this register
-		twice to get the correct result */
-	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_X))
-		cvmx_read_csr(CVMX_MIO_PTP_CLOCK_HI);
-	return cvmx_read_csr(CVMX_MIO_PTP_CLOCK_HI);
+	return octeon_read_ptp_csr(CVMX_MIO_PTP_CLOCK_HI);
 }
 
 static struct clocksource clocksource_ptp_clock = {
@@ -41,7 +37,7 @@ int __init ptp_clock_init(void)
 		return 0;
 
 	/* Get the current state of the PTP clock */
-	ptp_clock_cfg.u64 = cvmx_read_csr(CVMX_MIO_PTP_CLOCK_CFG);
+	ptp_clock_cfg.u64 = octeon_read_ptp_csr(CVMX_MIO_PTP_CLOCK_CFG);
 	if (!ptp_clock_cfg.s.ext_clk_en) {
 		/*
 		 * The clock has not been configured to use an
@@ -54,7 +50,8 @@ int __init ptp_clock_init(void)
 			(NSEC_PER_SEC << 32) / clock_comp);
 	} else {
 		/* The clock is already programmed to use an external GPIO */
-		unsigned long long clock_comp = cvmx_read_csr(CVMX_MIO_PTP_CLOCK_COMP);
+		unsigned long long clock_comp =
+			octeon_read_ptp_csr(CVMX_MIO_PTP_CLOCK_COMP);
 		pr_info("PTP Clock: Using GPIO %d at %lld Hz\n",
 			ptp_clock_cfg.s.ext_clk_in,
 			(NSEC_PER_SEC << 32) / clock_comp);
diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index 5ccddfc..b147c80 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -277,4 +277,20 @@ extern struct mii_bus *octeon_mdiobuses[2];
 
 extern u64 octeon_bootloader_entry_addr;
 
+static inline uint64_t octeon_read_ptp_csr(uint64_t csr)
+{
+	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_X)) {
+		uint64_t result;
+		unsigned long flags;
+		/* CN63XX pass 1.x has an errata where you must read this
+			register twice to get the correct result */
+		local_irq_save(flags);
+		cvmx_read_csr(csr);
+		result = cvmx_read_csr(csr);
+		local_irq_restore(flags);
+		return result;
+	} else
+		return cvmx_read_csr(csr);
+}
+
 #endif /* __ASM_OCTEON_OCTEON_H */
diff --git a/drivers/net/octeon/ethernet-mdio.c b/drivers/net/octeon/ethernet-mdio.c
index f779efb..80608b5 100644
--- a/drivers/net/octeon/ethernet-mdio.c
+++ b/drivers/net/octeon/ethernet-mdio.c
@@ -127,7 +127,7 @@ static int cvm_oct_ioctl_hwtstamp(struct net_device *dev,
 		/* Write TX timestamp into word 4 */
 		cvmx_write_csr(CVMX_PKO_REG_TIMESTAMP, 4);
 		/* Get the current state of the PTP clock */
-		ptp.u64 = cvmx_read_csr(CVMX_MIO_PTP_CLOCK_CFG);
+		ptp.u64 = octeon_read_ptp_csr(CVMX_MIO_PTP_CLOCK_CFG);
 		if (!ptp.s.ext_clk_en) {
 			/*
 			 * The clock has not been configured to use an
@@ -141,7 +141,7 @@ static int cvm_oct_ioctl_hwtstamp(struct net_device *dev,
 				(NSEC_PER_SEC << 32) / clock_comp);
 		} else {
 			/* The clock is already programmed to use a GPIO */
-			unsigned long long clock_comp = cvmx_read_csr(
+			unsigned long long clock_comp = octeon_read_ptp_csr(
 				CVMX_MIO_PTP_CLOCK_COMP);
 			pr_info("PTP Clock: Using GPIO %d at %lld Hz\n",
 				ptp.s.ext_clk_in,
diff --git a/drivers/net/octeon/ethernet-rx.c b/drivers/net/octeon/ethernet-rx.c
index 375a0b7..825d8d3 100644
--- a/drivers/net/octeon/ethernet-rx.c
+++ b/drivers/net/octeon/ethernet-rx.c
@@ -240,9 +240,7 @@ static ktime_t cvm_oct_ptp_to_ktime(uint64_t ptptime)
 
 	local_irq_save(flags);
 	ktimebase = ktime_get_real();
-	/* FIXME: Needed for CN63XX errata */
-	cvmx_read_csr(CVMX_MIO_PTP_CLOCK_HI);
-	ptpbase = cvmx_read_csr(CVMX_MIO_PTP_CLOCK_HI);
+	ptpbase = octeon_read_ptp_csr(CVMX_MIO_PTP_CLOCK_HI);
 	local_irq_restore(flags);
 
 	return ktime_sub_ns(ktimebase, ptpbase - ptptime);
-- 
1.7.0.4

