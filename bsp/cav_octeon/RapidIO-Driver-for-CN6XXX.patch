From 4d2fd9443fbe0658e40e98d9aa48f7ccfb171d30 Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Mon, 15 Nov 2010 11:19:09 +0800
Subject: [PATCH 072/132] RapidIO: Driver for CN6XXX

Add drivers/rapidio/devices/cn6xxx.c and associated Makefile and
Kconfig hooks.

Signed-off-by: Chad Reese <kreese@caviumnetworks.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 drivers/rapidio/Kconfig          |    1 +
 drivers/rapidio/Makefile         |    1 +
 drivers/rapidio/devices/Kconfig  |   10 +++
 drivers/rapidio/devices/Makefile |    9 +++
 drivers/rapidio/devices/cn6xxx.c |  113 ++++++++++++++++++++++++++++++++++++++
 5 files changed, 134 insertions(+), 0 deletions(-)
 create mode 100644 drivers/rapidio/devices/Kconfig
 create mode 100644 drivers/rapidio/devices/Makefile
 create mode 100644 drivers/rapidio/devices/cn6xxx.c

diff --git a/drivers/rapidio/Kconfig b/drivers/rapidio/Kconfig
index 070211a..3d54bba 100644
--- a/drivers/rapidio/Kconfig
+++ b/drivers/rapidio/Kconfig
@@ -21,6 +21,7 @@ config RAPIDIO_ENABLE_RX_TX_PORTS
 	  than Maintenance transfers.
 
 source "drivers/rapidio/switches/Kconfig"
+source "drivers/rapidio/devices/Kconfig"
 
 config RAPIDIO_DEBUG
 	bool "RapidIO subsystem debug messages"
diff --git a/drivers/rapidio/Makefile b/drivers/rapidio/Makefile
index b6139fe..b146513 100644
--- a/drivers/rapidio/Makefile
+++ b/drivers/rapidio/Makefile
@@ -4,6 +4,7 @@
 obj-y += rio.o rio-access.o rio-driver.o rio-scan.o rio-sysfs.o
 
 obj-$(CONFIG_RAPIDIO)		+= switches/
+obj-$(CONFIG_RAPIDIO)		+= devices/
 
 ifeq ($(CONFIG_RAPIDIO_DEBUG),y)
 EXTRA_CFLAGS += -DDEBUG
diff --git a/drivers/rapidio/devices/Kconfig b/drivers/rapidio/devices/Kconfig
new file mode 100644
index 0000000..982ed00
--- /dev/null
+++ b/drivers/rapidio/devices/Kconfig
@@ -0,0 +1,10 @@
+#
+# RapidIO devices configuration
+#
+config RAPIDIO_CN6XXX
+	bool "Cavium Networks CN6XXX processors"
+	depends on RAPIDIO
+	---help---
+	  Includes support for Cavium Networks CN6XXX family of serial RapidIO
+	  devices.
+
diff --git a/drivers/rapidio/devices/Makefile b/drivers/rapidio/devices/Makefile
new file mode 100644
index 0000000..524051b
--- /dev/null
+++ b/drivers/rapidio/devices/Makefile
@@ -0,0 +1,9 @@
+#
+# Makefile for RIO devices
+#
+
+obj-$(CONFIG_RAPIDIO_CN6XXX)	+= cn6xxx.o
+
+ifeq ($(CONFIG_RAPIDIO_DEBUG),y)
+EXTRA_CFLAGS += -DDEBUG
+endif
diff --git a/drivers/rapidio/devices/cn6xxx.c b/drivers/rapidio/devices/cn6xxx.c
new file mode 100644
index 0000000..27bdd39
--- /dev/null
+++ b/drivers/rapidio/devices/cn6xxx.c
@@ -0,0 +1,113 @@
+/*
+ * Cavium Networks CN6XXX support over SRIO
+ *
+ * Copyright 2010 Cavium Networks, Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/rio.h>
+#include <linux/rio_drv.h>
+#include <linux/rio_ids.h>
+#include <asm/octeon/cvmx.h>
+#include <asm/octeon/cvmx-sriomaintx-defs.h>
+
+static int cn6xxx_probe(struct rio_dev *dev, const struct rio_device_id *id)
+{
+	u32 data;
+	const char *state;
+
+	if (rio_read_config_32(dev, CVMX_SRIOMAINTX_IR_PI_PHY_STAT(0), &data))
+		return -1;
+	switch (data & 0x3f)
+	{
+	case 0x0:
+		state = "Silent";
+		break;
+	case 0x2:
+		state = "Seek";
+		break;
+	case 0x4:
+		state = "Discovery";
+	case 0x8:
+		state = "1x Mode Lane 0";
+		break;
+	case 0x10:
+		state = "1x Mode Lane 1";
+		break;
+	case 0x20:
+		state = "1x Mode Lane 2";
+		break;
+	case 0x40:
+		state = "1x Recovery";
+		break;
+	case 0x80:
+		state = "2x Mode";
+		break;
+	case 0x100:
+		state = "2x Recovery";
+		break;
+	case 0x200:
+		state = "4x Mode";
+		break;
+	default:
+		state = "Reserved";
+		break;
+	}
+	printk(KERN_INFO "CN6XXX: Link state: %s\n", state);
+	return 0;
+}
+
+static void cn6xxx_remove(struct rio_dev *dev)
+{
+	printk(KERN_INFO "CN6XXX: Removed\n");
+}
+
+static int cn6xxx_suspend(struct rio_dev *dev, u32 state)
+{
+	return 0; /* Do nothing */
+}
+
+static int cn6xxx_resume(struct rio_dev *dev)
+{
+	return 0; /* Do nothing */
+}
+
+static int cn6xxx_enable_wake(struct rio_dev *dev, u32 state, int enable)
+{
+	return 0; /* Do nothing */
+}
+
+static const struct rio_device_id cn6xxx_id_table[] = {
+	{.did = 0x0090, .vid = 0x008c, .asm_did = 0x0000, .asm_vid = 0x008c },
+{.did = 0,}
+};
+
+static struct rio_driver cn6xxx_driver = {
+	.name = "CN6XXX",
+	.id_table = cn6xxx_id_table,
+	.probe = cn6xxx_probe,
+	.remove = cn6xxx_remove,
+	.suspend = cn6xxx_suspend,
+	.resume = cn6xxx_resume,
+	.enable_wake = cn6xxx_enable_wake,
+};
+
+static int __init m_load(void)
+{
+	return rio_register_driver(&cn6xxx_driver);
+}
+
+static void __exit m_unload(void)
+{
+	rio_unregister_driver(&cn6xxx_driver);
+}
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Cavium Networks <support@caviumnetworks.com>");
+MODULE_DESCRIPTION("Cavium Networks CN6XXX support over SRIO.");
+module_init(m_load);
+module_exit(m_unload);
-- 
1.6.5.2

