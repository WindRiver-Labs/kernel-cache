From 3d5142dd13afa371dae272a2cb13ea7c7f42d603 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Thu, 9 Dec 2010 14:19:42 +0800
Subject: [PATCH 18/30] WRHV: Cavium: Define WRHV specific thread pointer offset

For Cavium Linux, thread pointer is saved to CVMSEG to accelerate
access. But, on GOS, CVMSEG can't be accessed, so move thread
pointer offset to 0xffffffffc0000080 to save thread pointer.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/include/asm/mipsregs.h |    4 ++++
 arch/mips/mm/tlbex.c             |    9 ++++++++-
 2 files changed, 12 insertions(+), 1 deletions(-)

diff --git a/arch/mips/include/asm/mipsregs.h b/arch/mips/include/asm/mipsregs.h
index 745944c..d5cb54d 100644
--- a/arch/mips/include/asm/mipsregs.h
+++ b/arch/mips/include/asm/mipsregs.h
@@ -619,7 +619,11 @@
  * CVMSEG to store the thread pointer for quick access.
  */
 #ifdef CONFIG_FAST_ACCESS_TO_THREAD_POINTER
+#ifdef CONFIG_WRHV
+#define FAST_ACCESS_THREAD_OFFSET       (0xffffffffc0000080)
+#else
 #define FAST_ACCESS_THREAD_OFFSET       (CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE * 128 - 8 - 32768)
+#endif
 #define FAST_ACCESS_THREAD_REGISTER     (*(unsigned long *)(FAST_ACCESS_THREAD_OFFSET))
 #endif
 
diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index f0912fb..5238c75 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -1092,18 +1092,21 @@ build_fast_tlb_refill_handler (u32 **p, struct uasm_label **l,
 		build_tlb_write_entry(p, l, r, tlb_random);
 		uasm_l_leave(l, *p);
 		UASM_i_LW(p, scratch, TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET(0), 0);
-
+#ifndef CONFIG_WRHV
 #ifdef CONFIG_FAST_ACCESS_TO_THREAD_POINTER
 		UASM_i_LW(p, K0, FAST_ACCESS_THREAD_OFFSET, 0);  /* K0 = thread pointer */
 #endif
+#endif
 	} else {
 		UASM_i_LW(p, scratch, TEMPORARY_SCRATCHPAD_FOR_KERNEL_OFFSET(0), 0);
 		build_tlb_write_entry(p, l, r, tlb_random);
 		uasm_l_leave(l, *p);
 
+#ifndef CONFIG_WRHV
 #ifdef CONFIG_FAST_ACCESS_TO_THREAD_POINTER
 		UASM_i_LW(p, K0, FAST_ACCESS_THREAD_OFFSET, 0);  /* K0 = thread pointer */
 #endif
+#endif
 		rv.restore_scratch = 1;
 	}
 
@@ -1183,9 +1186,11 @@ static void __cpuinit build_r4000_tlb_refill_handler(void)
 		build_update_entries(&p, K0, K1);
 		build_tlb_write_entry(&p, &l, &r, tlb_random);
 		uasm_l_leave(&l, p);
+#ifndef CONFIG_WRHV
 #ifdef CONFIG_FAST_ACCESS_TO_THREAD_POINTER
 		UASM_i_LW(&p, K0, FAST_ACCESS_THREAD_OFFSET, 0);  /* K0 = thread ptr */
 #endif
+#endif
 		uasm_i_eret(&p); /* return from trap */
 	}
 
@@ -1735,9 +1740,11 @@ build_r4000_tlbchange_handler_tail(u32 **p, struct uasm_label **l,
 	build_update_entries(p, tmp, ptr);
 	build_tlb_write_entry(p, l, r, tlb_indexed);
 	uasm_l_leave(l, *p);
+#ifndef CONFIG_WRHV
 #ifdef CONFIG_FAST_ACCESS_TO_THREAD_POINTER
 	UASM_i_LW(p, K0, FAST_ACCESS_THREAD_OFFSET, 0);  /* K0 = thread ptr */
 #endif
+#endif
 	uasm_i_eret(p); /* return from trap */
 
 #ifdef CONFIG_64BIT
-- 
1.6.5.2

