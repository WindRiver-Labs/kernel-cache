From 417dfdc0f7a58293062445ba35bae9da267fed8c Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Mon, 28 Feb 2011 13:01:27 +0800
Subject: [PATCH 09/30] WRHV: Cavium: Paravirtualize memory setup to add memory region

On GOS, Cavium bootmem can be bypassed, so just need add memory
region for the whole guest physical memory (MAX_MEMORY) to Linux
bootmem in memory setup.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/mips/cavium-octeon/setup.c  |    9 ++++++++-
 arch/mips/include/asm/paravirt.h |    2 ++
 arch/mips/kernel/paravirt.c      |    6 ++++++
 arch/mips/kernel/vbi/wrhv.c      |   19 ++++++++++++++++++-
 4 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 34d5f3f..397627b 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -997,7 +997,10 @@ static __init void memory_exclude_page(u64 addr, u64 *mem, u64 *size)
 }
 #endif
 
-void __init plat_mem_setup(void)
+void paravirt_plat_mem_setup(void)
+	__attribute__((weak, alias("native_plat_mem_setup")));
+
+void __init native_plat_mem_setup(void)
 {
 	uint64_t mem_alloc_size;
 	uint64_t total = 0;
@@ -1108,6 +1111,10 @@ void __init plat_mem_setup(void)
 		      "cvmx_bootmem_phy_alloc\n");
 }
 
+void __init plat_mem_setup(void)
+{
+	paravirt_plat_mem_setup();
+}
 
 int prom_putchar(char c)
 {
diff --git a/arch/mips/include/asm/paravirt.h b/arch/mips/include/asm/paravirt.h
index ca9776b..fe76b25 100644
--- a/arch/mips/include/asm/paravirt.h
+++ b/arch/mips/include/asm/paravirt.h
@@ -13,6 +13,7 @@ struct pv_info {
  */
 extern __cpuinit void native_cpu_probe(void);
 extern void __init native_prom_init(void);
+extern void __init native_plat_mem_setup(void);
 extern void __init native_per_cpu_trap_init(void);
 extern void __init native_tlb_init(void);
 extern void __init native_arch_init_irq(void);
@@ -30,6 +31,7 @@ struct pv_cpu_ops {
 };
 
 struct pv_mem_ops {
+ 	void (*plat_mem_setup)(void);
 	void (*tlb_init)(void);
 	void (*mem_init)(void);
 };
diff --git a/arch/mips/kernel/paravirt.c b/arch/mips/kernel/paravirt.c
index fd72d55..9058004 100644
--- a/arch/mips/kernel/paravirt.c
+++ b/arch/mips/kernel/paravirt.c
@@ -47,6 +47,7 @@ struct pv_cpu_ops pv_cpu_ops = {
 };
 
 struct pv_mem_ops pv_mem_ops = {
+ 	.plat_mem_setup = native_plat_mem_setup,
 	.tlb_init = native_tlb_init,
 	.mem_init = native_mem_init,
 };
@@ -73,6 +74,11 @@ void __init paravirt_prom_init(void)
  	pv_cpu_ops.prom_init();
 }
  
+void __init paravirt_plat_mem_setup(void)
+{
+ 	pv_mem_ops.plat_mem_setup();
+}
+
 void __init paravirt_per_cpu_trap_init(void)
 {
 	pv_cpu_ops.per_cpu_trap_init();
diff --git a/arch/mips/kernel/vbi/wrhv.c b/arch/mips/kernel/vbi/wrhv.c
index 57c2c01..be67e4b 100644
--- a/arch/mips/kernel/vbi/wrhv.c
+++ b/arch/mips/kernel/vbi/wrhv.c
@@ -639,7 +639,7 @@ void __init wrhv_prom_init(void)
 	arcs_cmdline[0] = 0;
 	argc = octeon_boot_desc_ptr->argc;
 	for (i = 0; i < argc; i++) {
-		const char *arg = (char *)(octeon_boot_desc_ptr->argv[i]);
+		const char *arg = (char **)(octeon_boot_desc_ptr->argv[i]);
 #ifndef CONFIG_CRASH_DUMP
 		if ((strncmp(arg, "MEM=", 4) == 0) ||
 		    (strncmp(arg, "mem=", 4) == 0)) {
@@ -737,6 +737,22 @@ void __init wrhv_prom_init(void)
 
 }
 
+void __init wrhv_plat_mem_setup(void)
+{
+	/* Suppose physical RAM start address is 0x0 */
+	add_memory_region(0, MAX_MEMORY, BOOT_MEM_RAM);
+
+#if CONFIG_CAVIUM_RESERVE32
+	/*
+	 * Now that we've allocated the kernel memory it is safe to
+	 * free the reserved region. We free it here so that builtin
+	 * drivers can use the memory.
+	 */
+	if (octeon_reserve32_memory)
+		cvmx_bootmem_free_named("CAVIUM_RESERVE32");
+#endif /* CONFIG_CAVIUM_RESERVE32 */
+}
+
 void __init wrhv_init(void)
 {
 	/* initialize wr_config so that we can access
@@ -754,6 +770,7 @@ void __init wrhv_init(void)
  	pv_cpu_ops.prom_init = wrhv_prom_init;
 	pv_cpu_ops.per_cpu_trap_init = wrhv_per_cpu_trap_init;
 
+ 	pv_mem_ops.plat_mem_setup = wrhv_plat_mem_setup;
 	pv_mem_ops.tlb_init = wrhv_tlb_init;
 	pv_mem_ops.mem_init = wrhv_mem_init;
 
-- 
1.6.5.2

