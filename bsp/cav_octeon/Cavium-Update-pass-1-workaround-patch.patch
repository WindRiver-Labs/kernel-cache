From 962875329269a9b63424a4668e2080a3161f674e Mon Sep 17 00:00:00 2001
From: Phil Staub <Phil.Staub@windriver.com>
Date: Thu, 10 Mar 2011 11:36:36 -0800
Subject: [PATCH 04/13] Cavium: Update pass 1 workaround patch

Source: Cavium sdk_2.0.0_updates_p4.tgz

Remove CAVIUM_OCTEON_ENABLE_DEVELPER_OPTIONS option.

Add CAVIUM_CN63XXP1 option, which forces use of the pass 1 workaround
for all builds. This builds a kernel that will run on all targets.

Modify the code for uasm_i_pref so that it only generates the
Core-14449 workaround code for CN63XX_PASS1_X devices, instead of all
Octeon II passes.

Signed-off-by: Phil Staub <Phil.Staub@windriver.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/Makefile              |    2 +-
 arch/mips/cavium-octeon/Kconfig |   30 +++++++++++++++++-------------
 arch/mips/mm/uasm.c             |   24 ++++++++++++++----------
 3 files changed, 32 insertions(+), 24 deletions(-)

diff --git a/arch/mips/Makefile b/arch/mips/Makefile
index 9711580..ab6d5d4 100644
--- a/arch/mips/Makefile
+++ b/arch/mips/Makefile
@@ -188,7 +188,7 @@ endif
 endif
 endif
 
-cflags-$(CONFIG_CAVIUM_OCTEON_MAKE_MY_KERNEL_SLOW) += -Wa,-mfix-cn63xxp1
+cflags-$(CONFIG_CAVIUM_CN63XXP1) += -Wa,-mfix-cn63xxp1
 
 cflags-$(CONFIG_CPU_CAVIUM_OCTEON) += -DCVMX_BUILD_FOR_LINUX_KERNEL=1 -DUSE_RUNTIME_MODEL_CHECKS=1
 
diff --git a/arch/mips/cavium-octeon/Kconfig b/arch/mips/cavium-octeon/Kconfig
index e27bd12..0e6725e 100644
--- a/arch/mips/cavium-octeon/Kconfig
+++ b/arch/mips/cavium-octeon/Kconfig
@@ -13,6 +13,17 @@ config CAVIUM_OCTEON2
          more efficient, but that will not run on Octeon and
          OcteonPlus processor cores.
 
+config CAVIUM_CN63XXP1
+	bool "Enable CN63XXP1 errata workarounds"
+	depends on CPU_CAVIUM_OCTEON
+	default "n"
+	help
+	  The CN63XXP1 chip requires build time workarounds to
+	  function reliably, select this option to enable them.  These
+	  workarounds will cause a slight decrease in performance on
+	  non-CN63XXP1 hardware, so it is recommended to select "n"
+	  unless it is known the workarounds are needed.
+
 
 config CAVIUM_OCTEON_CHK_CVMX_PARAMETER
        bool "Build the kernel using -DCVMX_ENABLE_PARAMETER_CHECKING=1"
@@ -261,6 +272,12 @@ config CAVIUM_OCTEON_TRA
        tristate "Octeon trace buffer (TRA) driver"
        depends on CPU_CAVIUM_OCTEON && !CAVIUM_OCTEON2
        default n
+       help
+         This option enables a driver for the Octeon trace buffer. By default
+         it enables interrupts on some illegal memory accesses. See
+         octeon-tra.c for information on customizing this driver to find
+         specific problems.
+
 
 config CAVIUM_DECODE_RSL
        bool "Decode RSL interrupt conditions."
@@ -269,19 +286,6 @@ config CAVIUM_DECODE_RSL
        help
          Detect, decode and display on-chip error conditions.
 
-config CAVIUM_OCTEON_ENABLE_DEVELOPER_OPTIONS
-       bool "Enable options only useful for kernel development"
-       depends on CPU_CAVIUM_OCTEON
-       default n
-       help
-          Enable options useful only for kernel development.
-
-       help
-         This option enables a driver for the Octeon trace buffer. By default
-         it enables interrupts on some illegal memory accesses. See
-         octeon-tra.c for information on customizing this driver to find
-         specific problems.
-
 config CAVIUM_OCTEON_NAND
        tristate "Octeon NAND driver"
        depends on MTD_NAND && CPU_CAVIUM_OCTEON
diff --git a/arch/mips/mm/uasm.c b/arch/mips/mm/uasm.c
index 0b3dd09..811dba9 100644
--- a/arch/mips/mm/uasm.c
+++ b/arch/mips/mm/uasm.c
@@ -431,7 +431,6 @@ I_u1u2u3(_mfc0)
 I_u1u2u3(_mtc0)
 I_u2u1u3(_ori)
 I_u3u1u2(_or)
-/* I_u2s3u1(_pref) Octeon II workaround. */
 I_0(_rfe)
 I_u2s3u1(_sc)
 I_u2s3u1(_scd)
@@ -458,19 +457,24 @@ I_u1(_syscall);
 I_u1(_zcb);
 I_u1(_zcbt);
 
-
-void __uasminit uasm_i_pref(u32 **buf, unsigned int a, signed int b, unsigned int c)
-{
-	if (current_cpu_type() == CPU_CAVIUM_OCTEON2) {
-		/* As per erratum Core-14449, replace prefetches with 'pref 28'. */
-		if ((a >= 0) && (a <= 24) && (a != 5))
-			build_insn(buf, insn_pref, c, 28, b);
-		else
-			build_insn(buf, insn_pref, c, a, b);
-	} else
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+#include <asm/octeon/octeon.h>
+void __uasminit uasm_i_pref(u32 **buf, unsigned int a, signed int b,
+			    unsigned int c)
+{
+	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_X) && a <= 24 && a != 5)
+		/*
+		 * As per erratum Core-14449, replace prefetches 0-4,
+		 * 6-24 with 'pref 28'.
+		 */
+		build_insn(buf, insn_pref, c, 28, b);
+	else
 		build_insn(buf, insn_pref, c, a, b);
 }
 UASM_EXPORT_SYMBOL(uasm_i_pref);
+#else
+I_u2s3u1(_pref)
+#endif
 
 /* Handle labels. */
 void __uasminit uasm_build_label(struct uasm_label **lab, u32 *addr, int lid)
-- 
1.7.0.4

