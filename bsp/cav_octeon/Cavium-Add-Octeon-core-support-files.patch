From e43c8b24a4d3670a1fc6f719f9874e7f5807887b Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Thu, 11 Nov 2010 15:35:08 +0800
Subject: [PATCH 015/132] Cavium: Add Octeon core support files

Source: SDK 2.0.0-366

Add Octeon core support basic definitions.

Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/cavium-octeon/octeon-app-init.h          |  129 ++++++++++++
 arch/mips/include/asm/octeon/cvmx-config.h         |  217 ++++++++++++++++++++
 .../mips/include/asm/octeon/octeon-ethernet-user.h |  113 ++++++++++
 3 files changed, 459 insertions(+), 0 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/octeon-app-init.h
 create mode 100644 arch/mips/include/asm/octeon/cvmx-config.h
 create mode 100644 arch/mips/include/asm/octeon/octeon-ethernet-user.h

diff --git a/arch/mips/cavium-octeon/octeon-app-init.h b/arch/mips/cavium-octeon/octeon-app-init.h
new file mode 100644
index 0000000..71b2310
--- /dev/null
+++ b/arch/mips/cavium-octeon/octeon-app-init.h
@@ -0,0 +1,129 @@
+/***********************license start***************
+ *  Copyright (c) 2003-2008 Cavium Networks (support@cavium.com). All rights
+ *  reserved.
+ *
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions are
+ *  met:
+ *
+ *      * Redistributions of source code must retain the above copyright
+ *        notice, this list of conditions and the following disclaimer.
+ *
+ *      * Redistributions in binary form must reproduce the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer in the documentation and/or other materials provided
+ *        with the distribution.
+ *
+ *      * Neither the name of Cavium Networks nor the names of
+ *        its contributors may be used to endorse or promote products
+ *        derived from this software without specific prior written
+ *        permission.
+ *
+ *  TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ *  AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS
+ *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
+ *  RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY
+ *  REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT
+ *  DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES
+ *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR
+ *  PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET
+ *  POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT
+ *  OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+ *
+ *
+ *  For any questions regarding licensing please contact marketing@caviumnetworks.com
+ *
+ ***********************license end**************************************/
+
+/* Structures used to pass information from the bootloader to the application.
+   This should not be used by the application directly.  */
+
+#ifndef __OCTEON_APP_INIT_H__
+#define __OCTEON_APP_INIT_H__
+
+/* Define to allow conditional compilation in CVMX depending on
+   version of the stand-alone Octeon support in newlib.  */
+/* Version 2: added OCTEON_BL_FLAG_CONSOLE_PCI */
+/* Version 3: added OCTEON_BL_FLAG_BREAK */
+/* Version 4: added __octeon_uart_unlock */
+#define OCTEON_APP_INIT_H_VERSION   4
+
+/* Macro indicates that bootmem related structures are now in
+   cvmx-bootmem.h.  */
+#define OCTEON_APP_INIT_BOOTMEM_STRUCTS_MOVED
+
+typedef enum {
+  /* If set, core should do app-wide init, only one core per app will have
+     this flag set.  */
+  BOOT_FLAG_INIT_CORE     = 1,
+  OCTEON_BL_FLAG_DEBUG    = 1 << 1,
+  OCTEON_BL_FLAG_NO_MAGIC = 1 << 2,
+  OCTEON_BL_FLAG_CONSOLE_UART1 = 1 << 3,  /* If set, use uart1 for console */
+  OCTEON_BL_FLAG_CONSOLE_PCI = 1 << 4,  /* If set, use PCI console */
+  OCTEON_BL_FLAG_BREAK	  = 1 << 5, /* Call exit on break on serial port */
+  /* Be sure to update OCTEON_APP_INIT_H_VERSION when new fields are added
+  ** and to conditionalize the new flag's usage based on the version. */
+} octeon_boot_descriptor_flag_t;
+
+#define OCTEON_CURRENT_DESC_VERSION     7
+/* Version 7 changes: Change names of deprecated fields */
+#define OCTEON_ARGV_MAX_ARGS            (64)
+
+#define OCTOEN_SERIAL_LEN 20
+
+/* Bootloader structure used to pass info to Octeon executive startup code.
+   NOTE: all fields are deprecated except for:
+   * desc_version
+   * desc_size,
+   * heap_base
+   * heap_end
+   * eclock_hz
+   * flags
+   * argc
+   * argv
+   * cvmx_desc_vaddr
+   * debugger_flags_base_addr
+
+   All other fields have been moved to the cvmx_descriptor, and the new
+   fields should be added there. They are left as placeholders in this
+   structure for binary compatibility.  */
+typedef struct {
+  /* Start of block referenced by assembly code - do not change! */
+  uint32_t desc_version;
+  uint32_t desc_size;
+  uint64_t stack_top;
+  uint64_t heap_base;
+  uint64_t heap_end;
+  uint64_t deprecated17;
+  uint64_t deprecated16;
+  /* End of block referenced by assembly code - do not change! */
+  uint32_t deprecated18;
+  uint32_t deprecated15;
+  uint32_t deprecated14;
+  uint32_t argc;  /* argc for main() */
+  uint32_t argv[OCTEON_ARGV_MAX_ARGS];  /* argv for main() */
+  uint32_t flags;   /* Flags for application */
+  uint32_t core_mask;   /* Coremask running this image */
+  uint32_t dram_size;  /* DEPRECATED, DRAM size in megabyes. Used up to SDK 1.8.1 */
+  uint32_t phy_mem_desc_addr;
+  uint32_t debugger_flags_base_addr;  /* used to pass flags from app to debugger. */
+  uint32_t eclock_hz;  /* CPU clock speed, in hz. */
+  uint32_t deprecated10;
+  uint32_t deprecated9;
+  uint16_t deprecated8;
+  uint8_t deprecated7;
+  uint8_t deprecated6;
+  uint16_t deprecated5;
+  uint8_t deprecated4;
+  uint8_t deprecated3;
+  char deprecated2[OCTOEN_SERIAL_LEN];
+  uint8_t deprecated1[6];
+  uint8_t deprecated0;
+  uint64_t cvmx_desc_vaddr;  /* Address of cvmx descriptor */
+} octeon_boot_descriptor_t;
+
+/* Debug flags bit definitions.  */
+#define DEBUG_FLAG_CORE_DONE    0x1
+
+#endif /* __OCTEON_APP_INIT_H__ */
diff --git a/arch/mips/include/asm/octeon/cvmx-config.h b/arch/mips/include/asm/octeon/cvmx-config.h
new file mode 100644
index 0000000..59b0b3f
--- /dev/null
+++ b/arch/mips/include/asm/octeon/cvmx-config.h
@@ -0,0 +1,217 @@
+#ifndef __CVMX_CONFIG_H__
+#define __CVMX_CONFIG_H__
+
+extern int cvmx_helper_ports_on_interface(int);
+
+static inline int octeon_pko_get_total_queues(void)
+{
+	if (OCTEON_IS_MODEL(OCTEON_CN38XX))
+		return 128;
+	else if (OCTEON_IS_MODEL(OCTEON_CN3XXX))
+		return 32;
+	else if (OCTEON_IS_MODEL(OCTEON_CN50XX))
+		return 32;
+	else
+		return 256;
+}
+
+
+static inline int octeon_pko_lockless(void)
+{
+#ifdef CONFIG_OCTEON_ETHERNET_LOCKED
+	return 0;
+#else
+	int queues = 16 * (cvmx_helper_ports_on_interface(0) + cvmx_helper_ports_on_interface(1));
+
+	/* CN3XXX require workarounds in xmit.  Disable lockless for
+	 * CN3XXX to optimize the lockless case with out the workarounds. */
+	if (OCTEON_IS_MODEL(OCTEON_CN3XXX))
+		return 0;
+
+	queues += 4; /* For PCI/PCIe */
+
+	if ((OCTEON_IS_MODEL(OCTEON_CN56XX) || OCTEON_IS_MODEL(OCTEON_CN52XX) || OCTEON_IS_MODEL(OCTEON_CN6XXX)))
+		queues += 4; /* For loopback */
+
+	if (octeon_has_feature(OCTEON_FEATURE_SRIO))
+		queues += 4; /* For SRIO */
+
+	return queues <= octeon_pko_get_total_queues();
+#endif
+}
+
+/************************* Config Specific Defines ************************/
+#define CVMX_LLM_NUM_PORTS 1
+#define CVMX_NULL_POINTER_PROTECT 1
+#define CVMX_ENABLE_DEBUG_PRINTS 1
+/* PKO queues per port for interface 0 (ports 0-15) */
+#define CVMX_PKO_QUEUES_PER_PORT_INTERFACE0 (octeon_pko_lockless() ? 16 : 1)
+/* PKO queues per port for interface 1 (ports 16-31) */
+#define CVMX_PKO_QUEUES_PER_PORT_INTERFACE1 (octeon_pko_lockless() ? 16 : 1)
+#ifdef CONFIG_OCTEON_ETHERNET_LOCKED
+#define CVMX_PKO_MAX_PORTS_INTERFACE0 CVMX_HELPER_PKO_MAX_PORTS_INTERFACE0
+#define CVMX_PKO_MAX_PORTS_INTERFACE1 CVMX_HELPER_PKO_MAX_PORTS_INTERFACE1
+#else
+/* Limit on the number of PKO ports enabled for interface 0 */
+#define CVMX_PKO_MAX_PORTS_INTERFACE0 cvmx_helper_ports_on_interface(0)
+/* Limit on the number of PKO ports enabled for interface 1 */
+#define CVMX_PKO_MAX_PORTS_INTERFACE1 cvmx_helper_ports_on_interface(1)
+#endif
+/* PKO queues per port for PCI (ports 32-35) */
+#define CVMX_PKO_QUEUES_PER_PORT_PCI 1
+/* PKO queues per port for Loop devices (ports 36-39) */
+#define CVMX_PKO_QUEUES_PER_PORT_LOOP 1
+#define CVMX_PKO_QUEUES_PER_PORT_SRIO0 2
+#define CVMX_PKO_QUEUES_PER_PORT_SRIO1 2
+
+/************************* FPA allocation *********************************/
+/* Pool sizes in bytes, must be multiple of a cache line */
+#define CVMX_FPA_POOL_0_SIZE (16 * CVMX_CACHE_LINE_SIZE)
+#define CVMX_FPA_POOL_1_SIZE (1 * CVMX_CACHE_LINE_SIZE)
+#define CVMX_FPA_POOL_2_SIZE (8 * CVMX_CACHE_LINE_SIZE)
+#define CVMX_FPA_POOL_3_SIZE (1 * CVMX_CACHE_LINE_SIZE)
+#define CVMX_FPA_POOL_4_SIZE (0 * CVMX_CACHE_LINE_SIZE)
+#define CVMX_FPA_POOL_5_SIZE (0 * CVMX_CACHE_LINE_SIZE)
+#define CVMX_FPA_POOL_6_SIZE (0 * CVMX_CACHE_LINE_SIZE)
+#define CVMX_FPA_POOL_7_SIZE (0 * CVMX_CACHE_LINE_SIZE)
+
+/* Pools in use */
+/* Packet buffers */
+#define CVMX_FPA_PACKET_POOL                (0)
+#define CVMX_FPA_PACKET_POOL_SIZE           CVMX_FPA_POOL_0_SIZE
+/* Work queue entrys */
+#define CVMX_FPA_WQE_POOL                   (1)
+#define CVMX_FPA_WQE_POOL_SIZE              CVMX_FPA_POOL_1_SIZE
+/* PKO queue command buffers */
+#define CVMX_FPA_OUTPUT_BUFFER_POOL         (2)
+#define CVMX_FPA_OUTPUT_BUFFER_POOL_SIZE    CVMX_FPA_POOL_2_SIZE
+/* Work queue entrys for TX side */
+#define CVMX_FPA_TX_WQE_POOL			(3)
+#define CVMX_FPA_TX_WQE_POOL_SIZE		CVMX_FPA_POOL_3_SIZE
+
+
+/*************************  FAU allocation ********************************/
+/* The fetch and add registers are allocated here.  They are arranged
+ * in order of descending size so that all alignment constraints are
+ * automatically met.  The enums are linked so that the following enum
+ * continues allocating where the previous one left off, so the
+ * numbering within each enum always starts with zero.  The macros
+ * take care of the address increment size, so the values entered
+ * always increase by 1.  FAU registers are accessed with byte
+ * addresses.
+ */
+
+#define CVMX_FAU_REG_64_ADDR(x) ((x << 3) + CVMX_FAU_REG_64_START)
+typedef enum {
+	CVMX_FAU_REG_64_START	= 0,
+	CVMX_FAU_REG_64_END	= CVMX_FAU_REG_64_ADDR(0),
+} cvmx_fau_reg_64_t;
+
+#define CVMX_FAU_REG_32_ADDR(x) ((x << 2) + CVMX_FAU_REG_32_START)
+typedef enum {
+	CVMX_FAU_REG_32_START	= CVMX_FAU_REG_64_END,
+	CVMX_FAU_REG_32_END	= CVMX_FAU_REG_32_ADDR(0),
+} cvmx_fau_reg_32_t;
+
+#define CVMX_FAU_REG_16_ADDR(x) ((x << 1) + CVMX_FAU_REG_16_START)
+typedef enum {
+	CVMX_FAU_REG_16_START	= CVMX_FAU_REG_32_END,
+	CVMX_FAU_REG_16_END	= CVMX_FAU_REG_16_ADDR(0),
+} cvmx_fau_reg_16_t;
+
+#define CVMX_FAU_REG_8_ADDR(x) ((x) + CVMX_FAU_REG_8_START)
+typedef enum {
+	CVMX_FAU_REG_8_START	= CVMX_FAU_REG_16_END,
+	CVMX_FAU_REG_8_END	= CVMX_FAU_REG_8_ADDR(0),
+} cvmx_fau_reg_8_t;
+
+/*
+ * The name CVMX_FAU_REG_AVAIL_BASE is provided to indicate the first
+ * available FAU address that is not allocated in cvmx-config.h. This
+ * is 64 bit aligned.
+ */
+#define CVMX_FAU_REG_AVAIL_BASE ((CVMX_FAU_REG_8_END + 0x7) & (~0x7ULL))
+#define CVMX_FAU_REG_END (2048)
+
+/********************** scratch memory allocation *************************/
+/* Scratchpad memory allocation.  Note that these are byte memory
+ * addresses.  Some uses of scratchpad (IOBDMA for example) require
+ * the use of 8-byte aligned addresses, so proper alignment needs to
+ * be taken into account.
+ */
+/* Generic scratch iobdma area */
+#define CVMX_SCR_SCRATCH               (0)
+/* First location available after cvmx-config.h allocated region. */
+#define CVMX_SCR_REG_AVAIL_BASE        (8)
+
+/*
+ * CVMX_HELPER_FIRST_MBUFF_SKIP is the number of bytes to reserve
+ * before the beginning of the packet. If necessary, override the
+ * default here.  See the IPD section of the hardware manual for MBUFF
+ * SKIP details.
+ */
+#define CVMX_HELPER_FIRST_MBUFF_SKIP 184
+
+/*
+ * CVMX_HELPER_NOT_FIRST_MBUFF_SKIP is the number of bytes to reserve
+ * in each chained packet element. If necessary, override the default
+ * here.
+ */
+#define CVMX_HELPER_NOT_FIRST_MBUFF_SKIP 0
+
+/*
+ * CVMX_HELPER_ENABLE_BACK_PRESSURE controls whether back pressure is
+ * enabled for all input ports. This controls if IPD sends
+ * backpressure to all ports if Octeon's FPA pools don't have enough
+ * packet or work queue entries. Even when this is off, it is still
+ * possible to get backpressure from individual hardware ports. When
+ * configuring backpressure, also check
+ * CVMX_HELPER_DISABLE_*_BACKPRESSURE below. If necessary, override
+ * the default here.
+ */
+#define CVMX_HELPER_ENABLE_BACK_PRESSURE 1
+
+/*
+ * CVMX_HELPER_ENABLE_IPD controls if the IPD is enabled in the helper
+ * function. Once it is enabled the hardware starts accepting
+ * packets. You might want to skip the IPD enable if configuration
+ * changes are need from the default helper setup. If necessary,
+ * override the default here.
+ */
+#define CVMX_HELPER_ENABLE_IPD 0
+
+/*
+ * CVMX_HELPER_INPUT_TAG_TYPE selects the type of tag that the IPD assigns
+ * to incoming packets.
+ */
+#define CVMX_HELPER_INPUT_TAG_TYPE CVMX_POW_TAG_TYPE_ORDERED
+
+/*
+ * The following select which fields are used by the PIP to generate
+ * the tag on INPUT
+ * 0: don't include
+ * 1: include
+ */
+#define CVMX_HELPER_INPUT_TAG_IPV6_SRC_IP	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_DST_IP	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_SRC_PORT	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_DST_PORT	0
+#define CVMX_HELPER_INPUT_TAG_IPV6_NEXT_HEADER	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_SRC_IP	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_DST_IP	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_SRC_PORT	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_DST_PORT	0
+#define CVMX_HELPER_INPUT_TAG_IPV4_PROTOCOL	0
+#define CVMX_HELPER_INPUT_TAG_INPUT_PORT	1
+
+/* Select skip mode for input ports */
+#define CVMX_HELPER_INPUT_PORT_SKIP_MODE	CVMX_PIP_PORT_CFG_MODE_SKIPL2
+
+/*
+ * Force backpressure to be disabled.  This overrides all other
+ * backpressure configuration.
+ */
+#define CVMX_HELPER_DISABLE_RGMII_BACKPRESSURE 0
+
+#endif /* __CVMX_CONFIG_H__ */
+
diff --git a/arch/mips/include/asm/octeon/octeon-ethernet-user.h b/arch/mips/include/asm/octeon/octeon-ethernet-user.h
new file mode 100644
index 0000000..ac0493a
--- /dev/null
+++ b/arch/mips/include/asm/octeon/octeon-ethernet-user.h
@@ -0,0 +1,113 @@
+/*************************************************************************
+*
+* Author: Cavium Networks info@caviumnetworks.com
+*
+* Copyright (c) 2010  Cavium Networks (support@cavium.com). All rights
+* reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*
+*     * Redistributions of source code must retain the above copyright
+*       notice, this list of conditions and the following disclaimer.
+*
+*     * Redistributions in binary form must reproduce the above
+*       copyright notice, this list of conditions and the following
+*       disclaimer in the documentation and/or other materials provided
+*       with the distribution.
+*
+*     * Neither the name of Cavium Networks nor the names of
+*       its contributors may be used to endorse or promote products
+*       derived from this software without specific prior written
+*       permission.
+*
+* TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+* AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS
+* OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
+* RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY
+* REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT
+* DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES
+* OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR
+* PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET
+* POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT
+* OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
+*************************************************************************/
+
+/*
+ * Device specific IOCTL interface for the Cavium Octeon ethernet driver.
+ *
+ */
+#ifndef OCTEON_ETHERNET_USER_H
+#define OCTEON_ETHERNET_USER_H
+
+/*
+ * Each of these IOCTLs use the field "ifr_ifru.ifru_ivalue" inside
+ * "struct ifreq" to move data. When calling these IOCTLS, supply a
+ * "struct ifreq" as the third parameter. The second parameter will be
+ * one of the IOCTL numbers defined below.
+ */
+
+#define CAVIUM_NET_IOCTL_SETPRIO   (SIOCDEVPRIVATE + 0) /* Priority 0-3. Default is 0 */
+#define CAVIUM_NET_IOCTL_GETPRIO   (SIOCDEVPRIVATE + 1) /* Priority 0-3 */
+#define CAVIUM_NET_IOCTL_SETIDSIZE (SIOCDEVPRIVATE + 2) /* 0 = 8 bit, 1 = 16 bit IDs. Default is 1 */
+#define CAVIUM_NET_IOCTL_GETIDSIZE (SIOCDEVPRIVATE + 3) /* 0 = 8 bit, 1 = 16 bit IDs */
+#define CAVIUM_NET_IOCTL_SETSRCID  (SIOCDEVPRIVATE + 4) /* 0 = primary ID, 1 = secondary ID. Default is 0 */
+#define CAVIUM_NET_IOCTL_GETSRCID  (SIOCDEVPRIVATE + 5) /* 0 = primary ID, 1 = secondary ID */
+#define CAVIUM_NET_IOCTL_SETLETTER (SIOCDEVPRIVATE + 6) /* Letter code 0-3, or -1 for auto. Default is -1 */
+#define CAVIUM_NET_IOCTL_GETLETTER (SIOCDEVPRIVATE + 7) /* Letter code 0-3, or -1 for auto */
+
+#ifdef __KERNEL__
+
+/**
+ * enum cvm_oct_callback_result -  Return codes for the Ethernet* driver intercept callback.
+ *
+ * Depending on the return code, the ethernet driver will continue
+ * processing in different ways.
+ */
+enum cvm_oct_callback_result {
+	CVM_OCT_PASS,               /**< The ethernet driver will pass the packet
+					to the kernel, just as if the intercept
+					callback didn't exist */
+	CVM_OCT_DROP,               /**< The ethernet driver will drop the packet,
+					cleaning of the work queue entry and the
+					skbuff */
+	CVM_OCT_TAKE_OWNERSHIP_WORK,/**< The intercept callback takes over
+					ownership of the work queue entry. It is
+					the responsibility of the callback to free
+					the work queue entry and all associated
+					packet buffers. The ethernet driver will
+					dispose of the skbuff without affecting the
+					work queue entry */
+	CVM_OCT_TAKE_OWNERSHIP_SKB  /**< The intercept callback takes over
+					ownership of the skbuff. The work queue
+					entry and packet buffer will be disposed of
+					in a way keeping the skbuff valid */
+};
+typedef enum cvm_oct_callback_result cvm_oct_callback_result_t;
+
+/**
+ * cvm_oct_callback_result_t -  Ethernet driver intercept callback hook type.
+ *
+ * The callback receives three parameters and returns a struct
+ * cvm_oct_callback_result code.
+ *
+ * The first parameter is the linux device for the ethernet port the
+ * packet came in on.
+ *
+ * The second parameter is the raw work queue entry from the hardware.
+ *
+ * The third parameter is the packet converted into a Linux skbuff.
+ */
+typedef cvm_oct_callback_result_t (*cvm_oct_callback_t)(struct net_device *dev,
+							void *work_queue_entry,
+							struct sk_buff *skb);
+
+extern struct net_device *cvm_oct_register_callback(const char *, cvm_oct_callback_t);
+
+extern int cvm_oct_transmit_qos(struct net_device *dev, void *work_queue_entry,
+			 int do_free, int qos);
+
+#endif /* __KERNEL__ */
+
+#endif
-- 
1.6.5.2

