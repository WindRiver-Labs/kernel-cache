From 01f092c68558c5bd82c6ab12581194fcd1931cc0 Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Mon, 6 Aug 2012 10:16:11 +0800
Subject: [PATCH] Cavium: remove memory holes from kcore address space

In usual, kernel registers its physical memory space from page 0
to max_low_pfn into kcore. Once there are memory holes, reading /proc/kcore
may cause bus/cache error. Get detailed memory info from bootmem and register
them separately to avoid this issue.

Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 arch/mips/cavium-octeon/setup.c |   17 +++++++++++++++++
 arch/mips/mm/init.c             |   14 +++++++++++++-
 2 files changed, 30 insertions(+), 1 deletions(-)

diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index bc69f3c..810813a 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -23,6 +23,7 @@
 #include <linux/serial_core.h>
 #include <linux/serial_8250.h>
 #include <linux/string.h>
+#include <linux/proc_fs.h>
 
 #include <asm/reboot.h>
 #include <asm/io.h>
@@ -492,6 +493,22 @@ void __init plat_mem_setup(void)
 		panic("Unable to allocate memory from cvmx_bootmem_phy_alloc\n");
 }
 
+static struct kcore_list kcore_mem_seg[BOOT_MEM_MAP_MAX];
+
+void __init cavium_cklist_init(void)
+{
+	int i;
+	int mem_index = 0;
+
+	for (i = 0; i < boot_mem_map.nr_map; i++) {
+		if (boot_mem_map.map[i].type != BOOT_MEM_RAM)
+			continue;
+
+		kclist_add(&kcore_mem_seg[mem_index++],
+			   __va(boot_mem_map.map[i].addr),
+			   boot_mem_map.map[i].size);
+	}
+}
 
 void prom_free_prom_memory(void)
 {
diff --git a/arch/mips/mm/init.c b/arch/mips/mm/init.c
index 529de8f..c680f13 100644
--- a/arch/mips/mm/init.c
+++ b/arch/mips/mm/init.c
@@ -356,7 +356,14 @@ void __init paging_init(void)
 	free_area_init_nodes(max_zone_pfns);
 }
 
-static struct kcore_list kcore_mem, kcore_vmalloc;
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+extern void cavium_cklist_init(void);
+#else
+static struct kcore_list kcore_mem;
+#endif
+
+static struct kcore_list kcore_vmalloc;
+
 #ifdef CONFIG_64BIT
 static struct kcore_list kcore_kseg0;
 #endif
@@ -415,7 +422,12 @@ void __init mem_init(void)
 		   the overflow.  */
 		kclist_add(&kcore_kseg0, (void *) CKSEG0, 0x80000000 - 4);
 #endif
+
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+	cavium_cklist_init();
+#else
 	kclist_add(&kcore_mem, __va(0), max_low_pfn << PAGE_SHIFT);
+#endif
 	kclist_add(&kcore_vmalloc, (void *)VMALLOC_START,
 		   VMALLOC_END-VMALLOC_START);
 
-- 
1.7.0.2

