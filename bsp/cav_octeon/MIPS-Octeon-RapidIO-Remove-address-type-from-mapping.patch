From 49b671c274b572e067c34a4d75aac1b42f9d5f2d Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Mon, 15 Nov 2010 11:16:48 +0800
Subject: [PATCH 071/132] MIPS: Octeon: RapidIO: Remove address type from mapping calls.

The Octeon srio low level driver can determine the proper SLI
addressing mode based on the address and doesn't require extra
params. Also remove stale debug output.

Signed-off-by: Chad Reese <kreese@caviumnetworks.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/cavium-octeon/octeon-rapidio.c |   32 ++++-------------------------
 1 files changed, 5 insertions(+), 27 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-rapidio.c b/arch/mips/cavium-octeon/octeon-rapidio.c
index cad5e10..71d1ce6 100644
--- a/arch/mips/cavium-octeon/octeon-rapidio.c
+++ b/arch/mips/cavium-octeon/octeon-rapidio.c
@@ -20,8 +20,6 @@
 
 #define RIO_PRINTK(mport, fmt, ...) \
 	printk(KERN_INFO "SRIO%d: " fmt, (mport)->id, ##__VA_ARGS__)
-#define DEBUG_CONFIG(mport, fmt, ...) \
-	RIO_PRINTK(mport, fmt, ##__VA_ARGS__)
 #define DEBUG_DOORBELL(mport, fmt, ...) \
 	RIO_PRINTK(mport, fmt, ##__VA_ARGS__)
 #define DEBUG_MAP(mport, fmt, ...) \
@@ -58,7 +56,7 @@ static int octeon_rio_lcread(struct rio_mport *mport, int mport_id, u32 offset,
 	if (len != 4) {
 		/* The kernel's RapidIO system defines 8 and 16 bit accesses,
 			but the RapidIO spec says these are illegal */
-		DEBUG_CONFIG(mport, "ERROR: local config read with illegal"
+		RIO_PRINTK(mport, "ERROR: local config read with illegal"
 			     " length (offset=0x%x, len=%d)\n", offset, len);
 		return -EINVAL;
 	}
@@ -66,8 +64,6 @@ static int octeon_rio_lcread(struct rio_mport *mport, int mport_id, u32 offset,
 	if (cvmx_srio_config_read32(mport_id, OCTEON_RIO_ID, -1, 0, 0,
 		offset, data))
 		return -EIO;
-	DEBUG_CONFIG(mport, "local config read"
-		     "(offset=0x%x, len=%d, data=0x%x)\n", offset, len, *data);
 	return 0;
 }
 
@@ -88,12 +84,10 @@ static int octeon_rio_lcwrite(struct rio_mport *mport, int mport_id, u32 offset,
 	if (len != 4) {
 		/* The kernel's RapidIO system defines 8 and 16 bit accesses,
 			but the RapidIO spec says these are illegal */
-		DEBUG_CONFIG(mport, "ERROR: local config write with illegal"
+		RIO_PRINTK(mport, "ERROR: local config write with illegal"
 			     " length (offset=0x%x, len=%d)\n", offset, len);
 		return -EINVAL;
 	}
-	DEBUG_CONFIG(mport, "local config write"
-		     "(offset=0x%x, len=%d, data=0x%x)\n", offset, len, data);
 	if (cvmx_srio_config_write32(mport_id, OCTEON_RIO_ID, -1, 0, 0, offset,
 		data))
 		return -EIO;
@@ -119,7 +113,7 @@ static int octeon_rio_cread(struct rio_mport *mport, int mport_id, u16 destid,
 	if (len != 4) {
 		/* The kernel's RapidIO system defines 8 and 16 bit accesses,
 			but the RapidIO spec says these are illegal */
-		DEBUG_CONFIG(mport,
+		RIO_PRINTK(mport,
 			     "ERROR: config read with illegal length"
 			     " (destid=0x%x, hopcount=%d, "
 			     "offset=0x%x, len=%d)\n",
@@ -130,9 +124,6 @@ static int octeon_rio_cread(struct rio_mport *mport, int mport_id, u16 destid,
 	if (cvmx_srio_config_read32(mport_id, OCTEON_RIO_ID, destid, 1,
 		hopcount, offset, data))
 		return -EIO;
-	DEBUG_CONFIG(mport, "config read(destid=0x%x, hopcount=%d, "
-		     "offset=0x%x, len=%d, data=0x%x)\n",
-		     0xffff & destid, 0xff & hopcount, offset, len, *data);
 	return 0;
 }
 
@@ -155,14 +146,11 @@ static int octeon_rio_cwrite(struct rio_mport *mport, int mport_id, u16 destid,
 	if (len != 4) {
 		/* The kernel's RapidIO system defines 8 and 16 bit accesses,
 			but the RapidIO spec says these are illegal */
-		DEBUG_CONFIG(mport, "ERROR: config write with illegal length("
+		RIO_PRINTK(mport, "ERROR: config write with illegal length("
 			     "destid=0x%x, hopcount=%d, offset=0x%x, len=%d)\n",
 			     0xffff & destid, 0xff & hopcount, offset, len);
 		return -EINVAL;
 	}
-	DEBUG_CONFIG(mport, "config write(destid=0x%x, hopcount=%d,"
-		     " offset=0x%x, len=%d, data=0x%x)\n",
-		     0xffff & destid, 0xff & hopcount, offset, len, data);
 	if (cvmx_srio_config_write32(mport_id, OCTEON_RIO_ID, destid,
 		1 /* FIXME: rdev->pef & RIO_PEF_CTLS */, hopcount, offset,
 		data))
@@ -206,21 +194,13 @@ static phys_t octeon_rio_mem_map(struct rio_mport *mport, struct rio_dev *rdev,
 	u64 offset, u64 length)
 {
 	int priority = 0;
-	cvmx_srio_addressing_mode_t address_mode;
 
 	DEBUG_MAP(mport, "map(destid=0x%x, res=0x%llx-0x%llx)\n",
 		0xffff & rdev->destid, offset, offset + length - 1);
 
-	if (rdev->pef & RIO_PEF_ADDR_50)
-		address_mode = CVMX_SRIO_ADDRESSING_MODE_50;
-	else if (rdev->pef & RIO_PEF_ADDR_66)
-		address_mode = CVMX_SRIO_ADDRESSING_MODE_66;
-	else
-		address_mode = CVMX_SRIO_ADDRESSING_MODE_34;
-
 	return cvmx_srio_physical_map(mport->id, CVMX_SRIO_WRITE_MODE_AUTO,
 		priority, CVMX_SRIO_READ_MODE_NORMAL, priority,
-		OCTEON_RIO_ID, address_mode, rdev->destid,
+		OCTEON_RIO_ID, rdev->destid,
 		rdev->pef & RIO_PEF_CTLS, offset, length);
 }
 
@@ -476,8 +456,6 @@ static void octeon_rio_work(struct work_struct *work)
 	struct rio_mport *mport = &my_port->mport;
 	cvmx_sriox_int_reg_t srio_int_reg;
 
-	DEBUG_IRQ(mport, "Work\n");
-
 	/* Get which interrupt fired. Ignore disabled interrupts */
 	srio_int_reg.u64 = cvmx_read_csr(CVMX_SRIOX_INT_REG(mport->id));
 	srio_int_reg.u64 &= cvmx_read_csr(CVMX_SRIOX_INT_ENABLE(mport->id));
-- 
1.6.5.2

