From 60d24bb411853ca442616e6910e7cf311c278394 Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Mon, 15 Nov 2010 11:31:14 +0800
Subject: [PATCH 077/132] MIPS: Octeon: Fix zeroing of extra error enables for SRIO.

Also remove some debug code.

Signed-off-by: Chad Reese <kreese@caviumnetworks.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/cavium-octeon/octeon-rapidio.c |   16 ++++------------
 1 files changed, 4 insertions(+), 12 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-rapidio.c b/arch/mips/cavium-octeon/octeon-rapidio.c
index 62b81f2..4e8d428 100644
--- a/arch/mips/cavium-octeon/octeon-rapidio.c
+++ b/arch/mips/cavium-octeon/octeon-rapidio.c
@@ -21,8 +21,6 @@
 
 #define RIO_PRINTK(mport, fmt, ...) \
 	printk(KERN_INFO "SRIO%d: " fmt, (mport)->id, ##__VA_ARGS__)
-#define DEBUG_DOORBELL(mport, fmt, ...) \
-	RIO_PRINTK(mport, fmt, ##__VA_ARGS__)
 #define DEBUG_MAP(mport, fmt, ...) \
 	RIO_PRINTK(mport, fmt, ##__VA_ARGS__)
 #define DEBUG_MBOX(mport, dir, mbox, fmt, ...) \
@@ -172,8 +170,6 @@ static int octeon_rio_cwrite(struct rio_mport *mport, int mport_id, u16 destid,
 static int octeon_rio_dsend(struct rio_mport *mport, int mport_id, u16 destid,
 			    u16 data)
 {
-	DEBUG_DOORBELL(mport, "doorbell(destid=0x%x, data=0x%x)\n",
-		       0xffff & destid, 0xffff & data);
 	return cvmx_srio_send_doorbell(mport_id, OCTEON_RIO_ID, destid,
 		1 /* FIXME: rdev->pef & RIO_PEF_CTLS */,
 		OCTEON_RIO_DOORBELL_PRIORITY, data);
@@ -359,8 +355,6 @@ static void octeon_rio_rx_doorbell(struct rio_mport *mport)
 	uint16_t data;
 	struct rio_dbell *dbell;
 
-	DEBUG_IRQ(mport, "RX doorbell\n");
-
 	while (1) {
 		status = cvmx_srio_receive_doorbell(mport->id, &destid_index,
 			&sequence_num, &srcid, &priority, &is16bit, &data);
@@ -566,11 +560,8 @@ static int __init octeon_rio_init(void)
 		RIO_PRINTK(&srio_ports[srio_port].mport, "Registering port\n");
 		if (cvmx_srio_initialize(srio_port,
 			CVMX_SRIO_INITIALIZE_DEBUG) == 0) {
-			rio_register_mport(&srio_ports[srio_port].mport);
-			/* Clear all SRIO interrupts and enables */
-			cvmx_write_csr(CVMX_SRIOX_INT_ENABLE(srio_port), 0);
-			cvmx_write_csr(CVMX_SRIOX_INT_REG(srio_port),
-				cvmx_read_csr(CVMX_SRIOX_INT_REG(srio_port)));
+			if (!srio_port)
+				rio_register_mport(&srio_ports[srio_port].mport);
 			if (request_irq(OCTEON_IRQ_SRIO0 + srio_port,
 				octeon_rio_irq, IRQF_SHARED, "SRIO",
 				&srio_ports[srio_port].mport)) {
@@ -578,7 +569,8 @@ static int __init octeon_rio_init(void)
 					"Failed to register IRQ handler\n");
 			} else {
 				/* Enable the interrupts we care about */
-				int_enable.u64 = 0;
+				int_enable.u64 = cvmx_read_csr(
+					CVMX_SRIOX_INT_ENABLE(srio_port));
 				int_enable.s.link_dwn = 1;
 				int_enable.s.link_up = 1;
 				int_enable.s.rxbell = 1;
-- 
1.6.5.2

