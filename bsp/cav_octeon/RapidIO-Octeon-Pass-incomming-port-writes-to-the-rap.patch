From 1814ceea926a5a5a9393fb8f52364618f06c856f Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Mon, 15 Nov 2010 14:23:01 +0800
Subject: [PATCH 089/132] RapidIO: Octeon: Pass incomming port writes to the rapidio subsystem.

Signed-off-by: Chad Reese <kreese@caviumnetworks.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 arch/mips/cavium-octeon/octeon-rapidio.c |   18 +++++++++++++++++-
 1 files changed, 17 insertions(+), 1 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-rapidio.c b/arch/mips/cavium-octeon/octeon-rapidio.c
index 1c267f3..8cdf4bd 100644
--- a/arch/mips/cavium-octeon/octeon-rapidio.c
+++ b/arch/mips/cavium-octeon/octeon-rapidio.c
@@ -471,9 +471,25 @@ static void octeon_rio_rx_soft_fifo(struct rio_mport *mport)
 	octeon_rio_unlock(mport, flags);
 
 	if (length > 0) {
+		int ftype;
+		int transaction;
+		int tt;
+		/* Update the SKB to match the length of data in it */
 		__skb_put(skb, length);
 		DEBUG_PACKET(mport, "RX", "%d byte packet\n", skb->len);
-		/* FIXME: Do something with the packet */
+		/* Figure out if this packet is a port write. The contents
+		    of the skb is the raw SRIO packet without the first ackID
+		    and CRF byte */
+		tt = (skb->data[0]>>4) & 3; /* 0=8bit, 1=16bit IDs */
+		ftype = skb->data[0] & 0xf; /* Port write is type 8 */
+		/* The transaction type is after the IDs, so it moves based
+		    on their size */
+		transaction = skb->data[(tt) ? 5 : 3] >> 4;
+		/* Call the port write handler if this is a port write */
+		if ((ftype == 0x8) && (transaction == 0x4)) {
+			rio_inb_pwrite_handler((union rio_pw_msg *)
+				(skb->data + ((tt) ? 10 : 8)));
+		}
 	}
 	dev_kfree_skb_any(skb);
 }
-- 
1.6.5.2

