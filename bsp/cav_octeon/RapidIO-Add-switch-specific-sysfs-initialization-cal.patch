From 2edfe96234f8487a511aa70862dffd0a818d52d6 Mon Sep 17 00:00:00 2001
From: ltian <le.tian@windriver.com>
Date: Mon, 15 Nov 2010 14:28:37 +0800
Subject: [PATCH 095/132] RapidIO: Add switch-specific sysfs initialization callback

Adds callback that allows to create/remove switch-specific sysfs
attributes to support additional functionality.

Signed-off-by: Alexandre Bounine <alexandre.bounine@idt.com>
Signed-off-by: ltian <le.tian@windriver.com>
---
 drivers/rapidio/rio-sysfs.c |   32 ++++++++++++++++++++++----------
 include/linux/rio.h         |    2 ++
 2 files changed, 24 insertions(+), 10 deletions(-)

diff --git a/drivers/rapidio/rio-sysfs.c b/drivers/rapidio/rio-sysfs.c
index c5b0d89..c53fffd 100644
--- a/drivers/rapidio/rio-sysfs.c
+++ b/drivers/rapidio/rio-sysfs.c
@@ -41,9 +41,6 @@ static ssize_t routes_show(struct device *dev, struct device_attribute *attr, ch
 	char *str = buf;
 	int i;
 
-	if (!rdev->rswitch)
-		goto out;
-
 	for (i = 0; i < RIO_MAX_ROUTE_ENTRIES(rdev->net->hport->sys_size);
 			i++) {
 		if (rdev->rswitch->route_table[i] == RIO_INVALID_ROUTE)
@@ -53,7 +50,6 @@ static ssize_t routes_show(struct device *dev, struct device_attribute *attr, ch
 			    rdev->rswitch->route_table[i]);
 	}
 
-      out:
 	return (str - buf);
 }
 
@@ -64,10 +60,11 @@ struct device_attribute rio_dev_attrs[] = {
 	__ATTR_RO(asm_did),
 	__ATTR_RO(asm_vid),
 	__ATTR_RO(asm_rev),
-	__ATTR_RO(routes),
 	__ATTR_NULL,
 };
 
+static DEVICE_ATTR(routes, S_IRUGO, routes_show, NULL);
+
 static ssize_t
 rio_read_config(struct kobject *kobj, struct bin_attribute *bin_attr,
 		char *buf, loff_t off, size_t count)
@@ -263,9 +260,19 @@ int rio_create_sysfs_dev_files(struct rio_dev *rdev)
 {
 	int err = 0;
 
-	err = sysfs_create_bin_file(&rdev->dev.kobj, &rio_config_attr);
-	if (err)
+	err = device_create_bin_file(&rdev->dev, &rio_config_attr);
+
+	if (!err && rdev->rswitch) {
+		err = device_create_file(&rdev->dev, &dev_attr_routes);
+		if (!err && rdev->rswitch->sw_sysfs)
+			err = rdev->rswitch->sw_sysfs(rdev, 1);
+	}
+
+	if (err) {
+		pr_warning("RIO: Failed to create some of the atribute" \
+			" files for %s\n", rio_name(rdev));
 		return err;
+	}
 
 	rdev->memory.attr.name = "memory";
 	rdev->memory.attr.mode = S_IRUGO | S_IWUSR;
@@ -286,7 +293,7 @@ int rio_create_sysfs_dev_files(struct rio_dev *rdev)
 		rdev->memory.size = 0;
 
 	if (rdev->memory.size) {
-		err = sysfs_create_bin_file(&rdev->dev.kobj, &rdev->memory);
+		err = device_create_bin_file(&rdev->dev, &rdev->memory);
 		if (err)
 			rdev->memory.size = 0;
 	}
@@ -301,10 +308,15 @@ int rio_create_sysfs_dev_files(struct rio_dev *rdev)
  */
 void rio_remove_sysfs_dev_files(struct rio_dev *rdev)
 {
-	sysfs_remove_bin_file(&rdev->dev.kobj, &rio_config_attr);
+	device_remove_bin_file(&rdev->dev, &rio_config_attr);
+	if (rdev->rswitch) {
+		device_remove_file(&rdev->dev, &dev_attr_routes);
+		if (rdev->rswitch->sw_sysfs)
+			rdev->rswitch->sw_sysfs(rdev, 0);
+	}
 
 	if (rdev->memory.size) {
-		sysfs_remove_bin_file(&rdev->dev.kobj, &rdev->memory);
+		device_remove_bin_file(&rdev->dev, &rdev->memory);
 		rdev->memory.size = 0;
 	}
 }
diff --git a/include/linux/rio.h b/include/linux/rio.h
index 54535ad..aba51de 100644
--- a/include/linux/rio.h
+++ b/include/linux/rio.h
@@ -232,6 +232,7 @@ struct rio_net {
  * @clr_table: Callback for switch-specific clear route table function
  * @em_init: Callback for switch-specific error management initialization function
  * @em_handle: Callback for switch-specific error management handler function
+ * @sw_sysfs: Callback that initializes switch-specific sysfs attributes
  * @nextdev: Array of per-port pointers to the next attached device
  */
 struct rio_switch {
@@ -255,6 +256,7 @@ struct rio_switch {
 			   u8 *sw_domain);
 	int (*em_init) (struct rio_dev *dev);
 	int (*em_handle) (struct rio_dev *dev, u8 swport);
+	int (*sw_sysfs) (struct rio_dev *dev, int create);
 	struct rio_dev *nextdev[0];
 };
 
-- 
1.6.5.2

