From 15337f0adee26e0379cbeac3c4fd6d4a367d0dcd Mon Sep 17 00:00:00 2001
From: Geert Uytterhoeven <geert+renesas@glider.be>
Date: Thu, 27 Aug 2015 22:07:23 +0200
Subject: [PATCH 0566/2066] pinctrl: sh-pfc: Get rid of
 CONFIG_ARCH_SHMOBILE_LEGACY

upstream 90d066130f69533fb16b395be3de613903575e69 commit

Shmobile is all multiplatform these days, so get rid of the reference to
CONFIG_ARCH_SHMOBILE_LEGACY.

Move the legacy code to do the non-DT mapping between GPIOs and pins
inside the existing #ifdef CONFIG_SUPERH section.

Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Acked-by: Linus Walleij <linus.walleij@linaro.org>
---
 drivers/pinctrl/sh-pfc/gpio.c |   41 +++++++++++++++++++----------------------
 1 files changed, 19 insertions(+), 22 deletions(-)

diff --git a/drivers/pinctrl/sh-pfc/gpio.c b/drivers/pinctrl/sh-pfc/gpio.c
index 982e170..db3f09a 100644
--- a/drivers/pinctrl/sh-pfc/gpio.c
+++ b/drivers/pinctrl/sh-pfc/gpio.c
@@ -338,7 +338,6 @@ int sh_pfc_register_gpiochip(struct sh_pfc *pfc)
 	struct sh_pfc_chip *chip;
 	phys_addr_t address;
 	unsigned int i;
-	int ret;
 
 	if (pfc->info->data_regs == NULL)
 		return 0;
@@ -376,29 +375,27 @@ int sh_pfc_register_gpiochip(struct sh_pfc *pfc)
 	if (IS_ENABLED(CONFIG_OF) && pfc->dev->of_node)
 		return 0;
 
-	if (IS_ENABLED(CONFIG_SUPERH) ||
-	    IS_ENABLED(CONFIG_ARCH_SHMOBILE_LEGACY)) {
-		/*
-		 * Register the GPIO to pin mappings. As pins with GPIO ports
-		 * must come first in the ranges, skip the pins without GPIO
-		 * ports by stopping at the first range that contains such a
-		 * pin.
-		 */
-		for (i = 0; i < pfc->nr_ranges; ++i) {
-			const struct sh_pfc_pin_range *range = &pfc->ranges[i];
-
-			if (range->start >= pfc->nr_gpio_pins)
-				break;
-
-			ret = gpiochip_add_pin_range(&chip->gpio_chip,
-				dev_name(pfc->dev), range->start, range->start,
-				range->end - range->start + 1);
-			if (ret < 0)
-				return ret;
-		}
+#ifdef CONFIG_SUPERH
+	/*
+	 * Register the GPIO to pin mappings. As pins with GPIO ports
+	 * must come first in the ranges, skip the pins without GPIO
+	 * ports by stopping at the first range that contains such a
+	 * pin.
+	 */
+	for (i = 0; i < pfc->nr_ranges; ++i) {
+		const struct sh_pfc_pin_range *range = &pfc->ranges[i];
+		int ret;
+
+		if (range->start >= pfc->nr_gpio_pins)
+			break;
+
+		ret = gpiochip_add_pin_range(&chip->gpio_chip,
+			dev_name(pfc->dev), range->start, range->start,
+			range->end - range->start + 1);
+		if (ret < 0)
+			return ret;
 	}
 
-#ifdef CONFIG_SUPERH
 	/* Register the function GPIOs chip. */
 	if (pfc->info->nr_func_gpios == 0)
 		return 0;
-- 
1.7.5.4

