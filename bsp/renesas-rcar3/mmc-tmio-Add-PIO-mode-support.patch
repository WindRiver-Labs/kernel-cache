From 30eab48f38b97708b5b2e819104ecbe3d945d7ba Mon Sep 17 00:00:00 2001
From: Ai Kyuse <ai.kyuse.uw@renesas.com>
Date: Wed, 27 Jul 2016 09:29:13 +0900
Subject: [PATCH 1389/2066] mmc: tmio: Add PIO mode support

This patch adds switching function of the transfer mode of PIO and DMA.

Signed-off-by: Ai Kyuse <ai.kyuse.uw@renesas.com>
Signed-off-by: Masaharu Hayakawa <masaharu.hayakawa.ry@renesas.com>
[zou:Original patch taken from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git
 v4.9/rcar-3.5.1]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/mmc/host/Kconfig             |   10 ++++++++++
 drivers/mmc/host/tmio_mmc_dma_gen3.c |    7 +++++++
 2 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index aba8697..ab63adb 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -556,6 +556,16 @@ config MMC_SDHI
 	  This provides support for the SDHI SD/SDIO controller found in
 	  SuperH and ARM SH-Mobile SoCs
 
+config MMC_SDHI_PIO
+	bool "SH-Mobile SDHI PIO transfer mode setting"
+	depends on MMC_SDHI
+	help
+	  This setting switches the transfer mode of the PIO and DMA.
+
+	  Select Yes or No according to the following.
+	  When switching the transfer mode from DMA to PIO, say Y here.
+	  When switching the transfer mode from PIO to DMA, say N here.
+
 config MMC_CB710
 	tristate "ENE CB710 MMC/SD Interface support"
 	depends on PCI
diff --git a/drivers/mmc/host/tmio_mmc_dma_gen3.c b/drivers/mmc/host/tmio_mmc_dma_gen3.c
index 61c0daf..0af3d3c 100644
--- a/drivers/mmc/host/tmio_mmc_dma_gen3.c
+++ b/drivers/mmc/host/tmio_mmc_dma_gen3.c
@@ -119,6 +119,9 @@ void tmio_mmc_start_dma(struct tmio_mmc_host *host, struct mmc_data *data)
 	int ret;
 	u32 irq_mask;
 
+	if (!host->chan_rx || !host->chan_tx)
+		return;
+
 	/* This DMAC cannot handle if sg_len is not 1 */
 	WARN_ON(host->sg_len > 1);
 
@@ -159,6 +162,7 @@ void tmio_mmc_start_dma(struct tmio_mmc_host *host, struct mmc_data *data)
 	tmio_dm_write(host, DM_DTRAN_ADDR, sg->dma_address);
 }
 
+#ifndef CONFIG_MMC_SDHI_PIO
 static void tmio_mmc_issue_tasklet_fn(unsigned long arg)
 {
 	struct tmio_mmc_host *host = (struct tmio_mmc_host *)arg;
@@ -190,6 +194,7 @@ static void tmio_mmc_complete_tasklet_fn(unsigned long arg)
 	dma_unmap_sg(&host->pdev->dev, host->sg_ptr, host->sg_len, dir);
 	tmio_mmc_do_data_irq(host);
 }
+#endif
 
 bool __tmio_mmc_dma_irq(struct tmio_mmc_host *host)
 {
@@ -215,6 +220,7 @@ bool __tmio_mmc_dma_irq(struct tmio_mmc_host *host)
 void tmio_mmc_request_dma(struct tmio_mmc_host *host,
 			  struct tmio_mmc_data *pdata)
 {
+#ifndef CONFIG_MMC_SDHI_PIO
 	/* Each value is set to non-zero to assume "enabling" each DMA */
 	host->chan_rx = host->chan_tx = (void *)0xdeadbeaf;
 
@@ -227,6 +233,7 @@ void tmio_mmc_request_dma(struct tmio_mmc_host *host,
 		     (unsigned long)host);
 	tasklet_init(&host->dma_issue, tmio_mmc_issue_tasklet_fn,
 		     (unsigned long)host);
+#endif
 }
 
 void tmio_mmc_release_dma(struct tmio_mmc_host *host)
-- 
1.7.5.4

