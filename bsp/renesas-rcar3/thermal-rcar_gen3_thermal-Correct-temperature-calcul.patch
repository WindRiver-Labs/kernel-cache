From 10f60352a92e126fe16e0c07ff08ff79eb4b5c84 Mon Sep 17 00:00:00 2001
From: Thao Nguyen <thao.nguyen.yb@rvc.renesas.com>
Date: Wed, 16 Dec 2015 16:59:53 +0700
Subject: [PATCH 1271/2066] thermal: rcar_gen3_thermal: Correct temperature
 calculation formula

The previous implementation is only correct when temperature
is between 30 and 50 degree Celsius. It is the issue of
temperature calculation formula. This patch will fix it
and correct rounding function for negative number.

Old formula:
    temp(mC) = (TEMP_CODE * 1000000 - 2536700) / 7468
Corrected formula:
    temp(mC) = (1000 * (TEMP_CODE * 1000 - 2536700)) / 7468)

Signed-off-by: Thao Nguyen <thao.nguyen.yb@rvc.renesas.com>
Signed-off-by: Tri Vo <tri.vo.xb@rvc.renesas.com>
[zou:Original patch taken from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git
 v4.9/rcar-3.5.1]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/thermal/rcar_gen3_thermal.c |   20 +++++++++++++++-----
 1 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/drivers/thermal/rcar_gen3_thermal.c b/drivers/thermal/rcar_gen3_thermal.c
index 3832840..7dcb895 100644
--- a/drivers/thermal/rcar_gen3_thermal.c
+++ b/drivers/thermal/rcar_gen3_thermal.c
@@ -68,8 +68,17 @@ struct rcar_thermal_priv {
 #define rcar_priv_to_dev(priv)		((priv)->dev)
 #define rcar_has_irq_support(priv)	((priv)->irq)
 
-/* Temperature conversion  */
-#define TEMP_CONVERT(ctemp)	(((1000 * MCELSIUS(ctemp)) - 2536700) / 7468)
+/*
+ * Temperature conversion
+ *
+ * temp = (THCODE - 2536.7) / 7.468
+ *
+ * First, multiply each operand with 1000 to avoid float number.
+ * Then, to convert to Mili-Celsius and round up later,
+ * this formula will be multiplied with 10000 instead of 1000.
+ */
+#define TEMP_CONVERT(ctemp)    \
+	((10000L * ((1000L * ctemp) - 2536700L)) / 7468L)
 
 #define rcar_thermal_read(p, r) _rcar_thermal_read(p, r)
 static u32 _rcar_thermal_read(struct rcar_thermal_priv *priv, u32 reg)
@@ -89,13 +98,14 @@ static int round_temp(int i)
 	int tmp1, tmp2;
 	int result = 0;
 
-	tmp1 = i % 10;
-	tmp2 = i / 10;
+	tmp1 = abs(i) % 10;
+	tmp2 = abs(i) / 10;
 	if (tmp1 < 5)
 		result = tmp2;
 	else
 		result = tmp2 + 1;
-	return result;
+
+	return ((i < 0) ? (result * (-1)) : result);
 }
 
 /*
-- 
1.7.5.4

