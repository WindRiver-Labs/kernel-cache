From 1f21897b8c93d4778d6e3bc19c161a2f0734234e Mon Sep 17 00:00:00 2001
From: Gaku Inami <gaku.inami.xw@bp.renesas.com>
Date: Mon, 11 Jul 2016 11:56:52 +0900
Subject: [PATCH 1265/2066] ARM: cpuidle: Enable cpu idle for only Cortex-A57

This patch is the specific change for R-CAR Gen3 SoC.
In Cortex-A53 in R-CAR Gen3, the difference of power consumption
between WFI and Core-Standby is not found.
Also, Core-Standby is slightly disadvantage in performance than WFI.

Therefore, the support of CPU idle in R-CAR Gen3 is below.
 - Cortex-A57 : enabled
 - Cortex-A53 : disabled

Signed-off-by: Gaku Inami <gaku.inami.xw@bp.renesas.com>
Signed-off-by: Khiem Nguyen <khiem.nguyen.xt@rvc.renesas.com>
[zou:Original patch taken from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git
 v4.9/rcar-3.5.1]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/cpuidle/cpuidle-arm.c |   32 +++++++++++++++++++++++++++++++-
 1 files changed, 31 insertions(+), 1 deletions(-)

diff --git a/drivers/cpuidle/cpuidle-arm.c b/drivers/cpuidle/cpuidle-arm.c
index 545069d..1699b92 100644
--- a/drivers/cpuidle/cpuidle-arm.c
+++ b/drivers/cpuidle/cpuidle-arm.c
@@ -12,6 +12,7 @@
 #define pr_fmt(fmt) "CPUidle arm: " fmt
 
 #include <linux/cpuidle.h>
+#include <linux/cpufeature.h>
 #include <linux/cpumask.h>
 #include <linux/cpu_pm.h>
 #include <linux/kernel.h>
@@ -19,7 +20,9 @@
 #include <linux/of.h>
 #include <linux/slab.h>
 
+#include <asm/cpu.h>
 #include <asm/cpuidle.h>
+#include <asm/cputype.h>
 
 #include "dt_idle_states.h"
 
@@ -78,6 +81,28 @@ static struct cpuidle_driver arm_idle_driver = {
 	}
 };
 
+static int __init arm_idle_driver_init(struct cpuidle_driver *drv, int part_id)
+{
+	struct cpumask *cpumask;
+	int cpu;
+
+	cpumask = kzalloc(cpumask_size(), GFP_KERNEL);
+	if (!cpumask)
+		return -ENOMEM;
+
+	for_each_possible_cpu(cpu) {
+		struct cpuinfo_arm64 *cpuinfo = &per_cpu(cpu_data, cpu);
+		u32 midr = cpuinfo->reg_midr;
+
+		if (MIDR_PARTNUM(midr) == part_id)
+			cpumask_set_cpu(cpu, cpumask);
+	}
+
+	drv->cpumask = cpumask;
+
+	return 0;
+}
+
 static const struct of_device_id arm_idle_state_match[] __initconst = {
 	{ .compatible = "arm,idle-state",
 	  .data = arm_enter_idle_state },
@@ -97,6 +122,11 @@ static int __init arm_idle_init(void)
 	struct cpuidle_driver *drv = &arm_idle_driver;
 	struct cpuidle_device *dev;
 
+	/* Support CPUIdle for Cortex-A57 only */
+	ret = arm_idle_driver_init(drv, ARM_CPU_PART_CORTEX_A57);
+	if (ret)
+		return ret;
+
 	/*
 	 * Initialize idle states data, starting at index 1.
 	 * This driver is DT only, if no DT idle states are detected (ret == 0)
@@ -117,7 +147,7 @@ static int __init arm_idle_init(void)
 	 * Call arch CPU operations in order to initialize
 	 * idle states suspend back-end specific data
 	 */
-	for_each_possible_cpu(cpu) {
+	for_each_cpu(cpu, drv->cpumask) {
 		ret = arm_cpuidle_init(cpu);
 
 		/*
-- 
1.7.5.4

