From 78f04925c9ba9f964a5bc21117331935313eee71 Mon Sep 17 00:00:00 2001
From: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
Date: Wed, 14 Oct 2015 11:45:35 +0900
Subject: [PATCH 2053/2066] media: vsp1: Add FCPVD clock support

Signed-off-by: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
[zou:Original patch taken from
git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-bsp.git
 v4.9/rcar-3.5.]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/media/platform/vsp1/vsp1.h     |    2 ++
 drivers/media/platform/vsp1/vsp1_drv.c |   31 ++++++++++++++++++++++++++++---
 2 files changed, 30 insertions(+), 3 deletions(-)

diff --git a/drivers/media/platform/vsp1/vsp1.h b/drivers/media/platform/vsp1/vsp1.h
index 4a9939f..2a353d1 100644
--- a/drivers/media/platform/vsp1/vsp1.h
+++ b/drivers/media/platform/vsp1/vsp1.h
@@ -60,6 +60,7 @@ struct vsp1_platform_data {
 struct vsp1_device_info {
 	unsigned int num_bru_inputs;
 	bool uapi;
+	bool fcpvd;
 };
 
 struct vsp1_device {
@@ -69,6 +70,7 @@ struct vsp1_device {
 
 	void __iomem *mmio;
 	struct clk *clock;
+	struct clk *fcpvd_clock;
 
 	struct mutex lock;
 	int ref_count;
diff --git a/drivers/media/platform/vsp1/vsp1_drv.c b/drivers/media/platform/vsp1/vsp1_drv.c
index 3a011b1..976f224 100644
--- a/drivers/media/platform/vsp1/vsp1_drv.c
+++ b/drivers/media/platform/vsp1/vsp1_drv.c
@@ -477,9 +477,17 @@ int vsp1_device_get(struct vsp1_device *vsp1)
 	if (ret < 0)
 		goto done;
 
+	ret = clk_prepare_enable(vsp1->fcpvd_clock);
+	if (ret < 0) {
+		clk_disable_unprepare(vsp1->clock);
+		goto done;
+	}
+
 	ret = vsp1_device_init(vsp1);
 	if (ret < 0) {
 		clk_disable_unprepare(vsp1->clock);
+		if (vsp1->info->fcpvd)
+			clk_disable_unprepare(vsp1->fcpvd_clock);
 		goto done;
 	}
 
@@ -501,9 +509,11 @@ void vsp1_device_put(struct vsp1_device *vsp1)
 {
 	mutex_lock(&vsp1->lock);
 
-	if (--vsp1->ref_count == 0)
+	if (--vsp1->ref_count == 0) {
 		clk_disable_unprepare(vsp1->clock);
-
+		if (vsp1->info->fcpvd)
+			clk_disable_unprepare(vsp1->fcpvd_clock);
+	}
 	mutex_unlock(&vsp1->lock);
 }
 
@@ -524,6 +534,8 @@ static int vsp1_pm_suspend(struct device *dev)
 	vsp1_pipelines_suspend(vsp1);
 
 	clk_disable_unprepare(vsp1->clock);
+	if (vsp1->info->fcpvd)
+		clk_disable_unprepare(vsp1->fcpvd_clock);
 
 	return 0;
 }
@@ -538,6 +550,8 @@ static int vsp1_pm_resume(struct device *dev)
 		return 0;
 
 	clk_prepare_enable(vsp1->clock);
+	if (vsp1->info->fcpvd)
+		clk_prepare_enable(vsp1->fcpvd_clock);
 
 	vsp1_pipelines_resume(vsp1);
 
@@ -627,12 +641,20 @@ static int vsp1_probe(struct platform_device *pdev)
 	if (IS_ERR(vsp1->mmio))
 		return PTR_ERR(vsp1->mmio);
 
-	vsp1->clock = devm_clk_get(&pdev->dev, NULL);
+	vsp1->clock = of_clk_get(vsp1->dev->of_node, 0);
 	if (IS_ERR(vsp1->clock)) {
 		dev_err(&pdev->dev, "failed to get clock\n");
 		return PTR_ERR(vsp1->clock);
 	}
 
+	if (vsp1->info->fcpvd) {
+		vsp1->fcpvd_clock = of_clk_get(vsp1->dev->of_node, 1);
+		if (IS_ERR(vsp1->fcpvd_clock)) {
+			dev_err(&pdev->dev, "failed to get fcpvd clock\n");
+			return PTR_ERR(vsp1->fcpvd_clock);
+		}
+	}
+
 	irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
 	if (!irq) {
 		dev_err(&pdev->dev, "missing IRQ\n");
@@ -670,16 +692,19 @@ static int vsp1_remove(struct platform_device *pdev)
 static const struct vsp1_device_info vsp1_gen2_info = {
 	.num_bru_inputs = 4,
 	.uapi = true,
+	.fcpvd = false,
 };
 
 static const struct vsp1_device_info vsp1_gen2_vspd_info = {
 	.num_bru_inputs = 4,
 	.uapi = false,
+	.fcpvd = false,
 };
 
 static const struct vsp1_device_info vsp2_gen3_vspd_info = {
 	.num_bru_inputs = 5,
 	.uapi = false,
+	.fcpvd = true,
 };
 
 static const struct of_device_id vsp1_of_match[] = {
-- 
1.7.5.4

