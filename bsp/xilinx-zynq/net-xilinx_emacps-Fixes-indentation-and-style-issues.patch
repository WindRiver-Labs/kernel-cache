From dc6ad593ac8a113f7ae78b8fcb4dd3fc483432de Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Tue, 27 Nov 2012 20:55:05 +0530
Subject: [PATCH 065/793] net: xilinx_emacps: Fixes indentation and style
 issues

This patch fixes the indentation/style issues in the driver
that has been present from the beginning. This patch corrects
one wrong comment.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |  643 ++++++++++++++-------------
 1 files changed, 328 insertions(+), 315 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 78b4991..5faa14c 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -53,21 +53,21 @@
 /************************** Constant Definitions *****************************/
 
 /* Must be shorter than length of ethtool_drvinfo.driver field to fit */
-#define DRIVER_NAME		"xemacps"
-#define DRIVER_DESCRIPTION	"Xilinx Tri-Mode Ethernet MAC driver"
-#define DRIVER_VERSION		"1.00a"
+#define DRIVER_NAME			"xemacps"
+#define DRIVER_DESCRIPTION		"Xilinx Tri-Mode Ethernet MAC driver"
+#define DRIVER_VERSION			"1.00a"
 
 /* Transmission timeout is 3 seconds. */
-#define TX_TIMEOUT		(3*HZ)
+#define TX_TIMEOUT			(3*HZ)
 
 /* for RX skb IP header word-aligned */
-#define RX_IP_ALIGN_OFFSET	2
+#define RX_IP_ALIGN_OFFSET		2
 
 /* DMA buffer descriptors must be aligned on a 4-byte boundary. */
-#define ALIGNMENT_BD		8
+#define ALIGNMENT_BD			8
 
 /* Maximum value for hash bits. 2**6 */
-#define XEMACPS_MAX_HASH_BITS	64
+#define XEMACPS_MAX_HASH_BITS		64
 
 /* MDC clock division
  * currently supporting 8, 16, 32, 48, 64, 96, 128, 224.
@@ -75,11 +75,11 @@
 enum { MDC_DIV_8 = 0, MDC_DIV_16, MDC_DIV_32, MDC_DIV_48,
 MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
 
-/* Specify the receive buffer size in bytes, 64, 128, 192, ... 10240 */
-#define XEMACPS_RX_BUF_SIZE	1600
+/* Specify the receive buffer size in bytes, 64, 128, 192, 10240 */
+#define XEMACPS_RX_BUF_SIZE		1600
 
 /* Number of receive buffer bytes as a unit, this is HW setup */
-#define XEMACPS_RX_BUF_UNIT	64
+#define XEMACPS_RX_BUF_UNIT		64
 
 /* Default SEND and RECV buffer descriptors (BD) numbers.
  * BD Space needed is (XEMACPS_SEND_BD_CNT+XEMACPS_RECV_BD_CNT)*8
@@ -87,263 +87,264 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
 #undef  DEBUG
 #define DEBUG
 
-#define XEMACPS_SEND_BD_CNT	32
-#define XEMACPS_RECV_BD_CNT	32
+#define XEMACPS_SEND_BD_CNT		32
+#define XEMACPS_RECV_BD_CNT		32
 
-#define XEMACPS_NAPI_WEIGHT	64
+#define XEMACPS_NAPI_WEIGHT		64
 
 /* Register offset definitions. Unless otherwise noted, register access is
  * 32 bit. Names are self explained here.
  */
-#define XEMACPS_NWCTRL_OFFSET        0x00000000 /* Network Control reg */
-#define XEMACPS_NWCFG_OFFSET         0x00000004 /* Network Config reg */
-#define XEMACPS_NWSR_OFFSET          0x00000008 /* Network Status reg */
-#define XEMACPS_USERIO_OFFSET        0x0000000C /* User IO reg */
-#define XEMACPS_DMACR_OFFSET         0x00000010 /* DMA Control reg */
-#define XEMACPS_TXSR_OFFSET          0x00000014 /* TX Status reg */
-#define XEMACPS_RXQBASE_OFFSET       0x00000018 /* RX Q Base address reg */
-#define XEMACPS_TXQBASE_OFFSET       0x0000001C /* TX Q Base address reg */
-#define XEMACPS_RXSR_OFFSET          0x00000020 /* RX Status reg */
-#define XEMACPS_ISR_OFFSET           0x00000024 /* Interrupt Status reg */
-#define XEMACPS_IER_OFFSET           0x00000028 /* Interrupt Enable reg */
-#define XEMACPS_IDR_OFFSET           0x0000002C /* Interrupt Disable reg */
-#define XEMACPS_IMR_OFFSET           0x00000030 /* Interrupt Mask reg */
-#define XEMACPS_PHYMNTNC_OFFSET      0x00000034 /* Phy Maintaince reg */
-#define XEMACPS_RXPAUSE_OFFSET       0x00000038 /* RX Pause Time reg */
-#define XEMACPS_TXPAUSE_OFFSET       0x0000003C /* TX Pause Time reg */
-#define XEMACPS_HASHL_OFFSET         0x00000080 /* Hash Low address reg */
-#define XEMACPS_HASHH_OFFSET         0x00000084 /* Hash High address reg */
-#define XEMACPS_LADDR1L_OFFSET       0x00000088 /* Specific1 addr low reg */
-#define XEMACPS_LADDR1H_OFFSET       0x0000008C /* Specific1 addr high reg */
-#define XEMACPS_LADDR2L_OFFSET       0x00000090 /* Specific2 addr low reg */
-#define XEMACPS_LADDR2H_OFFSET       0x00000094 /* Specific2 addr high reg */
-#define XEMACPS_LADDR3L_OFFSET       0x00000098 /* Specific3 addr low reg */
-#define XEMACPS_LADDR3H_OFFSET       0x0000009C /* Specific3 addr high reg */
-#define XEMACPS_LADDR4L_OFFSET       0x000000A0 /* Specific4 addr low reg */
-#define XEMACPS_LADDR4H_OFFSET       0x000000A4 /* Specific4 addr high reg */
-#define XEMACPS_MATCH1_OFFSET        0x000000A8 /* Type ID1 Match reg */
-#define XEMACPS_MATCH2_OFFSET        0x000000AC /* Type ID2 Match reg */
-#define XEMACPS_MATCH3_OFFSET        0x000000B0 /* Type ID3 Match reg */
-#define XEMACPS_MATCH4_OFFSET        0x000000B4 /* Type ID4 Match reg */
-#define XEMACPS_WOL_OFFSET           0x000000B8 /* Wake on LAN reg */
-#define XEMACPS_STRETCH_OFFSET       0x000000BC /* IPG Stretch reg */
-#define XEMACPS_SVLAN_OFFSET         0x000000C0 /* Stacked VLAN reg */
-#define XEMACPS_MODID_OFFSET         0x000000FC /* Module ID reg */
-#define XEMACPS_OCTTXL_OFFSET        0x00000100 /* Octects transmitted Low
+#define XEMACPS_NWCTRL_OFFSET		0x00000000 /* Network Control reg */
+#define XEMACPS_NWCFG_OFFSET		0x00000004 /* Network Config reg */
+#define XEMACPS_NWSR_OFFSET		0x00000008 /* Network Status reg */
+#define XEMACPS_USERIO_OFFSET		0x0000000C /* User IO reg */
+#define XEMACPS_DMACR_OFFSET		0x00000010 /* DMA Control reg */
+#define XEMACPS_TXSR_OFFSET		0x00000014 /* TX Status reg */
+#define XEMACPS_RXQBASE_OFFSET		0x00000018 /* RX Q Base address reg */
+#define XEMACPS_TXQBASE_OFFSET		0x0000001C /* TX Q Base address reg */
+#define XEMACPS_RXSR_OFFSET		0x00000020 /* RX Status reg */
+#define XEMACPS_ISR_OFFSET		0x00000024 /* Interrupt Status reg */
+#define XEMACPS_IER_OFFSET		0x00000028 /* Interrupt Enable reg */
+#define XEMACPS_IDR_OFFSET		0x0000002C /* Interrupt Disable reg */
+#define XEMACPS_IMR_OFFSET		0x00000030 /* Interrupt Mask reg */
+#define XEMACPS_PHYMNTNC_OFFSET		0x00000034 /* Phy Maintaince reg */
+#define XEMACPS_RXPAUSE_OFFSET		0x00000038 /* RX Pause Time reg */
+#define XEMACPS_TXPAUSE_OFFSET		0x0000003C /* TX Pause Time reg */
+#define XEMACPS_HASHL_OFFSET		0x00000080 /* Hash Low address reg */
+#define XEMACPS_HASHH_OFFSET		0x00000084 /* Hash High address reg */
+#define XEMACPS_LADDR1L_OFFSET		0x00000088 /* Specific1 addr low */
+#define XEMACPS_LADDR1H_OFFSET		0x0000008C /* Specific1 addr high */
+#define XEMACPS_LADDR2L_OFFSET		0x00000090 /* Specific2 addr low */
+#define XEMACPS_LADDR2H_OFFSET		0x00000094 /* Specific2 addr high */
+#define XEMACPS_LADDR3L_OFFSET		0x00000098 /* Specific3 addr low */
+#define XEMACPS_LADDR3H_OFFSET		0x0000009C /* Specific3 addr high */
+#define XEMACPS_LADDR4L_OFFSET		0x000000A0 /* Specific4 addr low */
+#define XEMACPS_LADDR4H_OFFSET		0x000000A4 /* Specific4 addr high */
+#define XEMACPS_MATCH1_OFFSET		0x000000A8 /* Type ID1 Match reg */
+#define XEMACPS_MATCH2_OFFSET		0x000000AC /* Type ID2 Match reg */
+#define XEMACPS_MATCH3_OFFSET		0x000000B0 /* Type ID3 Match reg */
+#define XEMACPS_MATCH4_OFFSET		0x000000B4 /* Type ID4 Match reg */
+#define XEMACPS_WOL_OFFSET		0x000000B8 /* Wake on LAN reg */
+#define XEMACPS_STRETCH_OFFSET		0x000000BC /* IPG Stretch reg */
+#define XEMACPS_SVLAN_OFFSET		0x000000C0 /* Stacked VLAN reg */
+#define XEMACPS_MODID_OFFSET		0x000000FC /* Module ID reg */
+#define XEMACPS_OCTTXL_OFFSET		0x00000100 /* Octects transmitted Low
 						reg */
-#define XEMACPS_OCTTXH_OFFSET        0x00000104 /* Octects transmitted High
+#define XEMACPS_OCTTXH_OFFSET		0x00000104 /* Octects transmitted High
 						reg */
-#define XEMACPS_TXCNT_OFFSET         0x00000108 /* Error-free Frmaes
+#define XEMACPS_TXCNT_OFFSET		0x00000108 /* Error-free Frmaes
 						transmitted counter */
-#define XEMACPS_TXBCCNT_OFFSET       0x0000010C /* Error-free Broadcast
+#define XEMACPS_TXBCCNT_OFFSET		0x0000010C /* Error-free Broadcast
 						Frames counter*/
-#define XEMACPS_TXMCCNT_OFFSET       0x00000110 /* Error-free Multicast
+#define XEMACPS_TXMCCNT_OFFSET		0x00000110 /* Error-free Multicast
 						Frame counter */
-#define XEMACPS_TXPAUSECNT_OFFSET    0x00000114 /* Pause Frames Transmitted
+#define XEMACPS_TXPAUSECNT_OFFSET	0x00000114 /* Pause Frames Transmitted
 						Counter */
-#define XEMACPS_TX64CNT_OFFSET       0x00000118 /* Error-free 64 byte Frames
+#define XEMACPS_TX64CNT_OFFSET		0x00000118 /* Error-free 64 byte Frames
 						Transmitted counter */
-#define XEMACPS_TX65CNT_OFFSET       0x0000011C /* Error-free 65-127 byte
+#define XEMACPS_TX65CNT_OFFSET		0x0000011C /* Error-free 65-127 byte
 						Frames Transmitted counter */
-#define XEMACPS_TX128CNT_OFFSET      0x00000120 /* Error-free 128-255 byte
+#define XEMACPS_TX128CNT_OFFSET		0x00000120 /* Error-free 128-255 byte
 						Frames Transmitted counter */
-#define XEMACPS_TX256CNT_OFFSET      0x00000124 /* Error-free 256-511 byte
+#define XEMACPS_TX256CNT_OFFSET		0x00000124 /* Error-free 256-511 byte
 						Frames transmitted counter */
-#define XEMACPS_TX512CNT_OFFSET      0x00000128 /* Error-free 512-1023 byte
+#define XEMACPS_TX512CNT_OFFSET		0x00000128 /* Error-free 512-1023 byte
 						Frames transmitted counter */
-#define XEMACPS_TX1024CNT_OFFSET     0x0000012C /* Error-free 1024-1518 byte
+#define XEMACPS_TX1024CNT_OFFSET	0x0000012C /* Error-free 1024-1518 byte
 						Frames transmitted counter */
-#define XEMACPS_TX1519CNT_OFFSET     0x00000130 /* Error-free larger than 1519
-						byte Frames transmitted
-						   counter */
-#define XEMACPS_TXURUNCNT_OFFSET     0x00000134 /* TX under run error
-						    counter */
-#define XEMACPS_SNGLCOLLCNT_OFFSET   0x00000138 /* Single Collision Frame
+#define XEMACPS_TX1519CNT_OFFSET	0x00000130 /* Error-free larger than
+						1519 byte Frames transmitted
 						Counter */
-#define XEMACPS_MULTICOLLCNT_OFFSET  0x0000013C /* Multiple Collision Frame
+#define XEMACPS_TXURUNCNT_OFFSET	0x00000134 /* TX under run error
 						Counter */
-#define XEMACPS_EXCESSCOLLCNT_OFFSET 0x00000140 /* Excessive Collision Frame
+#define XEMACPS_SNGLCOLLCNT_OFFSET	0x00000138 /* Single Collision Frame
 						Counter */
-#define XEMACPS_LATECOLLCNT_OFFSET   0x00000144 /* Late Collision Frame
+#define XEMACPS_MULTICOLLCNT_OFFSET	0x0000013C /* Multiple Collision Frame
 						Counter */
-#define XEMACPS_TXDEFERCNT_OFFSET    0x00000148 /* Deferred Transmission
+#define XEMACPS_EXCESSCOLLCNT_OFFSET	0x00000140 /* Excessive Collision Frame
+						Counter */
+#define XEMACPS_LATECOLLCNT_OFFSET	0x00000144 /* Late Collision Frame
+						Counter */
+#define XEMACPS_TXDEFERCNT_OFFSET	0x00000148 /* Deferred Transmission
 						Frame Counter */
-#define XEMACPS_CSENSECNT_OFFSET     0x0000014C /* Carrier Sense Error
+#define XEMACPS_CSENSECNT_OFFSET	0x0000014C /* Carrier Sense Error
 						Counter */
-#define XEMACPS_OCTRXL_OFFSET        0x00000150 /* Octects Received register
+#define XEMACPS_OCTRXL_OFFSET		0x00000150 /* Octects Received register
 						Low */
-#define XEMACPS_OCTRXH_OFFSET        0x00000154 /* Octects Received register
+#define XEMACPS_OCTRXH_OFFSET		0x00000154 /* Octects Received register
 						High */
-#define XEMACPS_RXCNT_OFFSET         0x00000158 /* Error-free Frames
+#define XEMACPS_RXCNT_OFFSET		0x00000158 /* Error-free Frames
 						Received Counter */
-#define XEMACPS_RXBROADCNT_OFFSET    0x0000015C /* Error-free Broadcast
+#define XEMACPS_RXBROADCNT_OFFSET	0x0000015C /* Error-free Broadcast
 						Frames Received Counter */
-#define XEMACPS_RXMULTICNT_OFFSET    0x00000160 /* Error-free Multicast
+#define XEMACPS_RXMULTICNT_OFFSET	0x00000160 /* Error-free Multicast
 						Frames Received Counter */
-#define XEMACPS_RXPAUSECNT_OFFSET    0x00000164 /* Pause Frames
+#define XEMACPS_RXPAUSECNT_OFFSET	0x00000164 /* Pause Frames
 						Received Counter */
-#define XEMACPS_RX64CNT_OFFSET       0x00000168 /* Error-free 64 byte Frames
+#define XEMACPS_RX64CNT_OFFSET		0x00000168 /* Error-free 64 byte Frames
 						Received Counter */
-#define XEMACPS_RX65CNT_OFFSET       0x0000016C /* Error-free 65-127 byte
+#define XEMACPS_RX65CNT_OFFSET		0x0000016C /* Error-free 65-127 byte
 						Frames Received Counter */
-#define XEMACPS_RX128CNT_OFFSET      0x00000170 /* Error-free 128-255 byte
+#define XEMACPS_RX128CNT_OFFSET		0x00000170 /* Error-free 128-255 byte
 						Frames Received Counter */
-#define XEMACPS_RX256CNT_OFFSET      0x00000174 /* Error-free 256-512 byte
+#define XEMACPS_RX256CNT_OFFSET		0x00000174 /* Error-free 256-512 byte
 						Frames Received Counter */
-#define XEMACPS_RX512CNT_OFFSET      0x00000178 /* Error-free 512-1023 byte
+#define XEMACPS_RX512CNT_OFFSET		0x00000178 /* Error-free 512-1023 byte
 						Frames Received Counter */
-#define XEMACPS_RX1024CNT_OFFSET     0x0000017C /* Error-free 1024-1518 byte
+#define XEMACPS_RX1024CNT_OFFSET	0x0000017C /* Error-free 1024-1518 byte
 						Frames Received Counter */
-#define XEMACPS_RX1519CNT_OFFSET     0x00000180 /* Error-free 1519-max byte
+#define XEMACPS_RX1519CNT_OFFSET	0x00000180 /* Error-free 1519-max byte
 						Frames Received Counter */
-#define XEMACPS_RXUNDRCNT_OFFSET     0x00000184 /* Undersize Frames Received
+#define XEMACPS_RXUNDRCNT_OFFSET	0x00000184 /* Undersize Frames Received
 						Counter */
-#define XEMACPS_RXOVRCNT_OFFSET      0x00000188 /* Oversize Frames Received
+#define XEMACPS_RXOVRCNT_OFFSET		0x00000188 /* Oversize Frames Received
 						Counter */
-#define XEMACPS_RXJABCNT_OFFSET      0x0000018C /* Jabbers Received
+#define XEMACPS_RXJABCNT_OFFSET		0x0000018C /* Jabbers Received
 						Counter */
-#define XEMACPS_RXFCSCNT_OFFSET      0x00000190 /* Frame Check Sequence
+#define XEMACPS_RXFCSCNT_OFFSET		0x00000190 /* Frame Check Sequence
 						Error Counter */
-#define XEMACPS_RXLENGTHCNT_OFFSET   0x00000194 /* Length Field Error
+#define XEMACPS_RXLENGTHCNT_OFFSET	0x00000194 /* Length Field Error
+						Counter */
+#define XEMACPS_RXSYMBCNT_OFFSET	0x00000198 /* Symbol Error Counter */
+#define XEMACPS_RXALIGNCNT_OFFSET	0x0000019C /* Alignment Error
 						Counter */
-#define XEMACPS_RXSYMBCNT_OFFSET     0x00000198 /* Symbol Error Counter */
-#define XEMACPS_RXALIGNCNT_OFFSET    0x0000019C /* Alignment Error Counter */
-#define XEMACPS_RXRESERRCNT_OFFSET   0x000001A0 /* Receive Resource Error
+#define XEMACPS_RXRESERRCNT_OFFSET	0x000001A0 /* Receive Resource Error
 						Counter */
-#define XEMACPS_RXORCNT_OFFSET       0x000001A4 /* Receive Overrun Counter */
-#define XEMACPS_RXIPCCNT_OFFSET      0x000001A8 /* IP header Checksum Error
+#define XEMACPS_RXORCNT_OFFSET		0x000001A4 /* Receive Overrun */
+#define XEMACPS_RXIPCCNT_OFFSET		0x000001A8 /* IP header Checksum Error
 						Counter */
-#define XEMACPS_RXTCPCCNT_OFFSET     0x000001AC /* TCP Checksum Error
+#define XEMACPS_RXTCPCCNT_OFFSET	0x000001AC /* TCP Checksum Error
 						Counter */
-#define XEMACPS_RXUDPCCNT_OFFSET     0x000001B0 /* UDP Checksum Error
+#define XEMACPS_RXUDPCCNT_OFFSET	0x000001B0 /* UDP Checksum Error
 						Counter */
 
-#define XEMACPS_1588S_OFFSET         0x000001D0 /* 1588 Timer Seconds */
-#define XEMACPS_1588NS_OFFSET        0x000001D4 /* 1588 Timer Nanoseconds */
-#define XEMACPS_1588ADJ_OFFSET       0x000001D8 /* 1588 Timer Adjust */
-#define XEMACPS_1588INC_OFFSET       0x000001DC /* 1588 Timer Increment */
-#define XEMACPS_PTPETXS_OFFSET       0x000001E0 /* PTP Event Frame
+#define XEMACPS_1588S_OFFSET		0x000001D0 /* 1588 Timer Seconds */
+#define XEMACPS_1588NS_OFFSET		0x000001D4 /* 1588 Timer Nanoseconds */
+#define XEMACPS_1588ADJ_OFFSET		0x000001D8 /* 1588 Timer Adjust */
+#define XEMACPS_1588INC_OFFSET		0x000001DC /* 1588 Timer Increment */
+#define XEMACPS_PTPETXS_OFFSET		0x000001E0 /* PTP Event Frame
 						Transmitted Seconds */
-#define XEMACPS_PTPETXNS_OFFSET      0x000001E4 /* PTP Event Frame
+#define XEMACPS_PTPETXNS_OFFSET		0x000001E4 /* PTP Event Frame
 						Transmitted Nanoseconds */
-#define XEMACPS_PTPERXS_OFFSET       0x000001E8 /* PTP Event Frame Received
+#define XEMACPS_PTPERXS_OFFSET		0x000001E8 /* PTP Event Frame Received
 						Seconds */
-#define XEMACPS_PTPERXNS_OFFSET      0x000001EC /* PTP Event Frame Received
+#define XEMACPS_PTPERXNS_OFFSET		0x000001EC /* PTP Event Frame Received
 						Nanoseconds */
-#define XEMACPS_PTPPTXS_OFFSET       0x000001E0 /* PTP Peer Frame
+#define XEMACPS_PTPPTXS_OFFSET		0x000001E0 /* PTP Peer Frame
 						Transmitted Seconds */
-#define XEMACPS_PTPPTXNS_OFFSET      0x000001E4 /* PTP Peer Frame
+#define XEMACPS_PTPPTXNS_OFFSET		0x000001E4 /* PTP Peer Frame
 						Transmitted Nanoseconds */
-#define XEMACPS_PTPPRXS_OFFSET       0x000001E8 /* PTP Peer Frame Received
+#define XEMACPS_PTPPRXS_OFFSET		0x000001E8 /* PTP Peer Frame Received
 						Seconds */
-#define XEMACPS_PTPPRXNS_OFFSET      0x000001EC /* PTP Peer Frame Received
+#define XEMACPS_PTPPRXNS_OFFSET		0x000001EC /* PTP Peer Frame Received
 						Nanoseconds */
 
 /* network control register bit definitions */
-#define XEMACPS_NWCTRL_RXTSTAMP_MASK    0x00008000 /* RX Timestamp in CRC */
-#define XEMACPS_NWCTRL_ZEROPAUSETX_MASK 0x00001000 /* Transmit zero quantum
+#define XEMACPS_NWCTRL_RXTSTAMP_MASK	0x00008000 /* RX Timestamp in CRC */
+#define XEMACPS_NWCTRL_ZEROPAUSETX_MASK	0x00001000 /* Transmit zero quantum
 						pause frame */
-#define XEMACPS_NWCTRL_PAUSETX_MASK     0x00000800 /* Transmit pause frame */
-#define XEMACPS_NWCTRL_HALTTX_MASK      0x00000400 /* Halt transmission
+#define XEMACPS_NWCTRL_PAUSETX_MASK	0x00000800 /* Transmit pause frame */
+#define XEMACPS_NWCTRL_HALTTX_MASK	0x00000400 /* Halt transmission
 						after current frame */
-#define XEMACPS_NWCTRL_STARTTX_MASK     0x00000200 /* Start tx (tx_go) */
+#define XEMACPS_NWCTRL_STARTTX_MASK	0x00000200 /* Start tx (tx_go) */
 
-#define XEMACPS_NWCTRL_STATWEN_MASK     0x00000080 /* Enable writing to
+#define XEMACPS_NWCTRL_STATWEN_MASK	0x00000080 /* Enable writing to
 						stat counters */
-#define XEMACPS_NWCTRL_STATINC_MASK     0x00000040 /* Increment statistic
+#define XEMACPS_NWCTRL_STATINC_MASK	0x00000040 /* Increment statistic
 						registers */
-#define XEMACPS_NWCTRL_STATCLR_MASK     0x00000020 /* Clear statistic
+#define XEMACPS_NWCTRL_STATCLR_MASK	0x00000020 /* Clear statistic
 						registers */
-#define XEMACPS_NWCTRL_MDEN_MASK        0x00000010 /* Enable MDIO port */
-#define XEMACPS_NWCTRL_TXEN_MASK        0x00000008 /* Enable transmit */
-#define XEMACPS_NWCTRL_RXEN_MASK        0x00000004 /* Enable receive */
-#define XEMACPS_NWCTRL_LOOPEN_MASK      0x00000002 /* local loopback */
+#define XEMACPS_NWCTRL_MDEN_MASK	0x00000010 /* Enable MDIO port */
+#define XEMACPS_NWCTRL_TXEN_MASK	0x00000008 /* Enable transmit */
+#define XEMACPS_NWCTRL_RXEN_MASK	0x00000004 /* Enable receive */
+#define XEMACPS_NWCTRL_LOOPEN_MASK	0x00000002 /* local loopback */
 
 /* name network configuration register bit definitions */
-#define XEMACPS_NWCFG_BADPREAMBEN_MASK 0x20000000 /* disable rejection of
+#define XEMACPS_NWCFG_BADPREAMBEN_MASK	0x20000000 /* disable rejection of
 						non-standard preamble */
-#define XEMACPS_NWCFG_IPDSTRETCH_MASK  0x10000000 /* enable transmit IPG */
-#define XEMACPS_NWCFG_FCSIGNORE_MASK   0x04000000 /* disable rejection of
+#define XEMACPS_NWCFG_IPDSTRETCH_MASK	0x10000000 /* enable transmit IPG */
+#define XEMACPS_NWCFG_FCSIGNORE_MASK	0x04000000 /* disable rejection of
 						FCS error */
-#define XEMACPS_NWCFG_HDRXEN_MASK      0x02000000 /* RX half duplex */
-#define XEMACPS_NWCFG_RXCHKSUMEN_MASK  0x01000000 /* enable RX checksum
+#define XEMACPS_NWCFG_HDRXEN_MASK	0x02000000 /* RX half duplex */
+#define XEMACPS_NWCFG_RXCHKSUMEN_MASK	0x01000000 /* enable RX checksum
 						offload */
-#define XEMACPS_NWCFG_PAUSECOPYDI_MASK 0x00800000 /* Do not copy pause
+#define XEMACPS_NWCFG_PAUSECOPYDI_MASK	0x00800000 /* Do not copy pause
 						Frames to memory */
-#define XEMACPS_NWCFG_MDC_SHIFT_MASK   18         /* shift bits for MDC */
-#define XEMACPS_NWCFG_MDCCLKDIV_MASK   0x001C0000 /* MDC Mask PCLK divisor */
-#define XEMACPS_NWCFG_FCSREM_MASK      0x00020000 /* Discard FCS from
+#define XEMACPS_NWCFG_MDC_SHIFT_MASK	18 /* shift bits for MDC */
+#define XEMACPS_NWCFG_MDCCLKDIV_MASK	0x001C0000 /* MDC Mask PCLK divisor */
+#define XEMACPS_NWCFG_FCSREM_MASK	0x00020000 /* Discard FCS from
 						received frames */
 #define XEMACPS_NWCFG_LENGTHERRDSCRD_MASK 0x00010000
 /* RX length error discard */
-#define XEMACPS_NWCFG_RXOFFS_MASK      0x0000C000 /* RX buffer offset */
-#define XEMACPS_NWCFG_PAUSEEN_MASK     0x00002000 /* Enable pause TX */
-#define XEMACPS_NWCFG_RETRYTESTEN_MASK 0x00001000 /* Retry test */
-#define XEMACPS_NWCFG_1000_MASK        0x00000400 /* Gigbit mode */
-#define XEMACPS_NWCFG_EXTADDRMATCHEN_MASK 0x00000200
+#define XEMACPS_NWCFG_RXOFFS_MASK	0x0000C000 /* RX buffer offset */
+#define XEMACPS_NWCFG_PAUSEEN_MASK	0x00002000 /* Enable pause TX */
+#define XEMACPS_NWCFG_RETRYTESTEN_MASK	0x00001000 /* Retry test */
+#define XEMACPS_NWCFG_1000_MASK		0x00000400 /* Gigbit mode */
+#define XEMACPS_NWCFG_EXTADDRMATCHEN_MASK	0x00000200
 /* External address match enable */
-#define XEMACPS_NWCFG_UCASTHASHEN_MASK 0x00000080 /* Receive unicast hash
+#define XEMACPS_NWCFG_UCASTHASHEN_MASK	0x00000080 /* Receive unicast hash
 						frames */
-#define XEMACPS_NWCFG_MCASTHASHEN_MASK 0x00000040 /* Receive multicast hash
+#define XEMACPS_NWCFG_MCASTHASHEN_MASK	0x00000040 /* Receive multicast hash
 						frames */
-#define XEMACPS_NWCFG_BCASTDI_MASK     0x00000020 /* Do not receive
+#define XEMACPS_NWCFG_BCASTDI_MASK	0x00000020 /* Do not receive
 						broadcast frames */
-#define XEMACPS_NWCFG_COPYALLEN_MASK   0x00000010 /* Copy all frames */
+#define XEMACPS_NWCFG_COPYALLEN_MASK	0x00000010 /* Copy all frames */
 
-#define XEMACPS_NWCFG_NVLANDISC_MASK   0x00000004 /* Receive only VLAN
+#define XEMACPS_NWCFG_NVLANDISC_MASK	0x00000004 /* Receive only VLAN
 						frames */
-#define XEMACPS_NWCFG_FDEN_MASK        0x00000002 /* Full duplex */
-#define XEMACPS_NWCFG_100_MASK         0x00000001 /* 10 or 100 Mbs */
+#define XEMACPS_NWCFG_FDEN_MASK		0x00000002 /* Full duplex */
+#define XEMACPS_NWCFG_100_MASK		0x00000001 /* 10 or 100 Mbs */
 
 /* network status register bit definitaions */
-#define XEMACPS_NWSR_MDIOIDLE_MASK     0x00000004 /* PHY management idle */
-#define XEMACPS_NWSR_MDIO_MASK         0x00000002 /* Status of mdio_in */
+#define XEMACPS_NWSR_MDIOIDLE_MASK	0x00000004 /* PHY management idle */
+#define XEMACPS_NWSR_MDIO_MASK		0x00000002 /* Status of mdio_in */
 
 /* MAC address register word 1 mask */
-#define XEMACPS_LADDR_MACH_MASK        0x0000FFFF /* Address bits[47:32]
+#define XEMACPS_LADDR_MACH_MASK		0x0000FFFF /* Address bits[47:32]
 						bit[31:0] are in BOTTOM */
 
 /* DMA control register bit definitions */
-#define XEMACPS_DMACR_RXBUF_MASK     0x00FF0000 /* Mask bit for RX buffer
+#define XEMACPS_DMACR_RXBUF_MASK	0x00FF0000 /* Mask bit for RX buffer
 						size */
-#define XEMACPS_DMACR_RXBUF_SHIFT    16         /* Shift bit for RX buffer
+#define XEMACPS_DMACR_RXBUF_SHIFT	16 /* Shift bit for RX buffer
 						size */
-#define XEMACPS_DMACR_TCPCKSUM_MASK  0x00000800 /* enable/disable TX
+#define XEMACPS_DMACR_TCPCKSUM_MASK	0x00000800 /* enable/disable TX
 						checksum offload */
-#define XEMACPS_DMACR_TXSIZE_MASK    0x00000400 /* TX buffer memory size */
-#define XEMACPS_DMACR_RXSIZE_MASK    0x00000300 /* RX buffer memory size */
-#define XEMACPS_DMACR_ENDIAN_MASK    0x00000080 /* Endian configuration */
-#define XEMACPS_DMACR_BLENGTH_MASK   0x0000001F /* Buffer burst length */
-#define XEMACPS_DMACR_BLENGTH_INCR16 0x00000010 /* Buffer burst length */
-#define XEMACPS_DMACR_BLENGTH_INCR8  0x00000008 /* Buffer burst length */
-#define XEMACPS_DMACR_BLENGTH_INCR4  0x00000004 /* Buffer burst length */
-#define XEMACPS_DMACR_BLENGTH_SINGLE 0x00000002 /* Buffer burst length */
+#define XEMACPS_DMACR_TXSIZE_MASK	0x00000400 /* TX buffer memory size */
+#define XEMACPS_DMACR_RXSIZE_MASK	0x00000300 /* RX buffer memory size */
+#define XEMACPS_DMACR_ENDIAN_MASK	0x00000080 /* Endian configuration */
+#define XEMACPS_DMACR_BLENGTH_MASK	0x0000001F /* Buffer burst length */
+#define XEMACPS_DMACR_BLENGTH_INCR16	0x00000010 /* Buffer burst length */
+#define XEMACPS_DMACR_BLENGTH_INCR8	0x00000008 /* Buffer burst length */
+#define XEMACPS_DMACR_BLENGTH_INCR4	0x00000004 /* Buffer burst length */
+#define XEMACPS_DMACR_BLENGTH_SINGLE	0x00000002 /* Buffer burst length */
 
 /* transmit status register bit definitions */
-#define XEMACPS_TXSR_HRESPNOK_MASK   0x00000100 /* Transmit hresp not OK */
-#define XEMACPS_TXSR_COL1000_MASK    0x00000080 /* Collision Gbs mode */
-#define XEMACPS_TXSR_URUN_MASK       0x00000040 /* Transmit underrun */
-#define XEMACPS_TXSR_TXCOMPL_MASK    0x00000020 /* Transmit completed OK */
-#define XEMACPS_TXSR_BUFEXH_MASK     0x00000010 /* Transmit buffs exhausted
+#define XEMACPS_TXSR_HRESPNOK_MASK	0x00000100 /* Transmit hresp not OK */
+#define XEMACPS_TXSR_COL1000_MASK	0x00000080 /* Collision Gbs mode */
+#define XEMACPS_TXSR_URUN_MASK		0x00000040 /* Transmit underrun */
+#define XEMACPS_TXSR_TXCOMPL_MASK	0x00000020 /* Transmit completed OK */
+#define XEMACPS_TXSR_BUFEXH_MASK	0x00000010 /* Transmit buffs exhausted
 						mid frame */
-#define XEMACPS_TXSR_TXGO_MASK       0x00000008 /* Status of go flag */
-#define XEMACPS_TXSR_RXOVR_MASK      0x00000004 /* Retry limit exceeded */
-#define XEMACPS_TXSR_COL100_MASK     0x00000002 /* Collision 10/100  mode */
-#define XEMACPS_TXSR_USEDREAD_MASK   0x00000001 /* TX buffer used bit set */
-
-#define XEMACPS_TXSR_ERROR_MASK	(XEMACPS_TXSR_HRESPNOK_MASK | \
-					XEMACPS_TXSR_COL1000_MASK | \
-					XEMACPS_TXSR_URUN_MASK |   \
-					XEMACPS_TXSR_BUFEXH_MASK | \
-					XEMACPS_TXSR_RXOVR_MASK |  \
-					XEMACPS_TXSR_COL100_MASK | \
+#define XEMACPS_TXSR_TXGO_MASK		0x00000008 /* Status of go flag */
+#define XEMACPS_TXSR_RXOVR_MASK		0x00000004 /* Retry limit exceeded */
+#define XEMACPS_TXSR_COL100_MASK	0x00000002 /* Collision 10/100  mode */
+#define XEMACPS_TXSR_USEDREAD_MASK	0x00000001 /* TX buffer used bit set */
+
+#define XEMACPS_TXSR_ERROR_MASK	(XEMACPS_TXSR_HRESPNOK_MASK |		\
+					XEMACPS_TXSR_COL1000_MASK |	\
+					XEMACPS_TXSR_URUN_MASK |	\
+					XEMACPS_TXSR_BUFEXH_MASK |	\
+					XEMACPS_TXSR_RXOVR_MASK |	\
+					XEMACPS_TXSR_COL100_MASK |	\
 					XEMACPS_TXSR_USEDREAD_MASK)
 
 /* receive status register bit definitions */
-#define XEMACPS_RXSR_HRESPNOK_MASK   0x00000008 /* Receive hresp not OK */
-#define XEMACPS_RXSR_RXOVR_MASK      0x00000004 /* Receive overrun */
-#define XEMACPS_RXSR_FRAMERX_MASK    0x00000002 /* Frame received OK */
-#define XEMACPS_RXSR_BUFFNA_MASK     0x00000001 /* RX buffer used bit set */
+#define XEMACPS_RXSR_HRESPNOK_MASK	0x00000008 /* Receive hresp not OK */
+#define XEMACPS_RXSR_RXOVR_MASK		0x00000004 /* Receive overrun */
+#define XEMACPS_RXSR_FRAMERX_MASK	0x00000002 /* Frame received OK */
+#define XEMACPS_RXSR_BUFFNA_MASK	0x00000001 /* RX buffer used bit set */
 
 #define XEMACPS_RXSR_ERROR_MASK	(XEMACPS_RXSR_HRESPNOK_MASK | \
 					XEMACPS_RXSR_RXOVR_MASK | \
@@ -353,59 +354,64 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
  * Bits definitions are same in XEMACPS_ISR_OFFSET,
  * XEMACPS_IER_OFFSET, XEMACPS_IDR_OFFSET, and XEMACPS_IMR_OFFSET
  */
-#define XEMACPS_IXR_PTPPSTX_MASK    0x02000000	/* PTP Psync transmitted */
-#define XEMACPS_IXR_PTPPDRTX_MASK   0x01000000	/* PTP Pdelay_req transmitted */
-#define XEMACPS_IXR_PTPSTX_MASK     0x00800000	/* PTP Sync transmitted */
-#define XEMACPS_IXR_PTPDRTX_MASK    0x00400000	/* PTP Delay_req transmitted */
-#define XEMACPS_IXR_PTPPSRX_MASK    0x00200000	/* PTP Psync received */
-#define XEMACPS_IXR_PTPPDRRX_MASK   0x00100000	/* PTP Pdelay_req received */
-#define XEMACPS_IXR_PTPSRX_MASK     0x00080000	/* PTP Sync received */
-#define XEMACPS_IXR_PTPDRRX_MASK    0x00040000	/* PTP Delay_req received */
-#define XEMACPS_IXR_PAUSETX_MASK    0x00004000	/* Pause frame transmitted */
-#define XEMACPS_IXR_PAUSEZERO_MASK  0x00002000	/* Pause time has reached
-						zero */
-#define XEMACPS_IXR_PAUSENZERO_MASK 0x00001000	/* Pause frame received */
-#define XEMACPS_IXR_HRESPNOK_MASK   0x00000800	/* hresp not ok */
-#define XEMACPS_IXR_RXOVR_MASK      0x00000400	/* Receive overrun occurred */
-#define XEMACPS_IXR_TXCOMPL_MASK    0x00000080	/* Frame transmitted ok */
-#define XEMACPS_IXR_TXEXH_MASK      0x00000040	/* Transmit err occurred or
-						no buffers*/
-#define XEMACPS_IXR_RETRY_MASK      0x00000020	/* Retry limit exceeded */
-#define XEMACPS_IXR_URUN_MASK       0x00000010	/* Transmit underrun */
-#define XEMACPS_IXR_TXUSED_MASK     0x00000008	/* Tx buffer used bit read */
-#define XEMACPS_IXR_RXUSED_MASK     0x00000004	/* Rx buffer used bit read */
-#define XEMACPS_IXR_FRAMERX_MASK    0x00000002	/* Frame received ok */
-#define XEMACPS_IXR_MGMNT_MASK      0x00000001	/* PHY management complete */
-#define XEMACPS_IXR_ALL_MASK        0x03FC7FFF	/* Everything! */
-
-#define XEMACPS_IXR_TX_ERR_MASK	(XEMACPS_IXR_TXEXH_MASK |    \
-					XEMACPS_IXR_RETRY_MASK |    \
-					XEMACPS_IXR_URUN_MASK  |    \
+#define XEMACPS_IXR_PTPPSTX_MASK	0x02000000 /* PTP Psync transmitted */
+#define XEMACPS_IXR_PTPPDRTX_MASK	0x01000000 /* PTP Pdelay_req
+							transmitted */
+#define XEMACPS_IXR_PTPSTX_MASK		0x00800000 /* PTP Sync transmitted */
+#define XEMACPS_IXR_PTPDRTX_MASK	0x00400000 /* PTP Delay_req
+							transmitted */
+#define XEMACPS_IXR_PTPPSRX_MASK	0x00200000 /* PTP Psync received */
+#define XEMACPS_IXR_PTPPDRRX_MASK	0x00100000 /* PTP Pdelay_req
+							received */
+#define XEMACPS_IXR_PTPSRX_MASK		0x00080000 /* PTP Sync received */
+#define XEMACPS_IXR_PTPDRRX_MASK	0x00040000 /* PTP Delay_req received */
+#define XEMACPS_IXR_PAUSETX_MASK	0x00004000 /* Pause frame
+							transmitted */
+#define XEMACPS_IXR_PAUSEZERO_MASK	0x00002000 /* Pause time has reached
+							zero */
+#define XEMACPS_IXR_PAUSENZERO_MASK	0x00001000 /* Pause frame received */
+#define XEMACPS_IXR_HRESPNOK_MASK	0x00000800 /* hresp not ok */
+#define XEMACPS_IXR_RXOVR_MASK		0x00000400 /* Receive overrun
+							occurred */
+#define XEMACPS_IXR_TXCOMPL_MASK	0x00000080 /* Frame transmitted ok */
+#define XEMACPS_IXR_TXEXH_MASK		0x00000040 /* Transmit err occurred or
+							no buffers*/
+#define XEMACPS_IXR_RETRY_MASK		0x00000020 /* Retry limit exceeded */
+#define XEMACPS_IXR_URUN_MASK		0x00000010 /* Transmit underrun */
+#define XEMACPS_IXR_TXUSED_MASK		0x00000008 /* Tx buffer used bit read */
+#define XEMACPS_IXR_RXUSED_MASK		0x00000004 /* Rx buffer used bit read */
+#define XEMACPS_IXR_FRAMERX_MASK	0x00000002 /* Frame received ok */
+#define XEMACPS_IXR_MGMNT_MASK		0x00000001 /* PHY management complete */
+#define XEMACPS_IXR_ALL_MASK		0x03FC7FFF /* Everything! */
+
+#define XEMACPS_IXR_TX_ERR_MASK	(XEMACPS_IXR_TXEXH_MASK |		\
+					XEMACPS_IXR_RETRY_MASK |	\
+					XEMACPS_IXR_URUN_MASK |		\
 					XEMACPS_IXR_TXUSED_MASK)
 
-#define XEMACPS_IXR_RX_ERR_MASK	(XEMACPS_IXR_HRESPNOK_MASK | \
-					XEMACPS_IXR_RXUSED_MASK |  \
+#define XEMACPS_IXR_RX_ERR_MASK	(XEMACPS_IXR_HRESPNOK_MASK |		\
+					XEMACPS_IXR_RXUSED_MASK |	\
 					XEMACPS_IXR_RXOVR_MASK)
 /* PHY Maintenance bit definitions */
-#define XEMACPS_PHYMNTNC_OP_MASK    0x40020000	/* operation mask bits */
-#define XEMACPS_PHYMNTNC_OP_R_MASK  0x20000000	/* read operation */
-#define XEMACPS_PHYMNTNC_OP_W_MASK  0x10000000	/* write operation */
-#define XEMACPS_PHYMNTNC_ADDR_MASK  0x0F800000	/* Address bits */
-#define XEMACPS_PHYMNTNC_REG_MASK   0x007C0000	/* register bits */
-#define XEMACPS_PHYMNTNC_DATA_MASK  0x0000FFFF	/* data bits */
-#define XEMACPS_PHYMNTNC_PHYAD_SHIFT_MASK   23	/* Shift bits for PHYAD */
-#define XEMACPS_PHYMNTNC_PHREG_SHIFT_MASK   18	/* Shift bits for PHREG */
+#define XEMACPS_PHYMNTNC_OP_MASK	0x40020000 /* operation mask bits */
+#define XEMACPS_PHYMNTNC_OP_R_MASK	0x20000000 /* read operation */
+#define XEMACPS_PHYMNTNC_OP_W_MASK	0x10000000 /* write operation */
+#define XEMACPS_PHYMNTNC_ADDR_MASK	0x0F800000 /* Address bits */
+#define XEMACPS_PHYMNTNC_REG_MASK	0x007C0000 /* register bits */
+#define XEMACPS_PHYMNTNC_DATA_MASK	0x0000FFFF /* data bits */
+#define XEMACPS_PHYMNTNC_PHYAD_SHIFT_MASK	23 /* Shift bits for PHYAD */
+#define XEMACPS_PHYMNTNC_PHREG_SHIFT_MASK	18 /* Shift bits for PHREG */
 
 /* Wake on LAN bit definition */
-#define XEMACPS_WOL_MCAST_MASK      0x00080000
-#define XEMACPS_WOL_SPEREG1_MASK    0x00040000
-#define XEMACPS_WOL_ARP_MASK        0x00020000
-#define XEMACPS_WOL_MAGIC_MASK      0x00010000
-#define XEMACPS_WOL_ARP_ADDR_MASK   0x0000FFFF
+#define XEMACPS_WOL_MCAST_MASK		0x00080000
+#define XEMACPS_WOL_SPEREG1_MASK	0x00040000
+#define XEMACPS_WOL_ARP_MASK		0x00020000
+#define XEMACPS_WOL_MAGIC_MASK		0x00010000
+#define XEMACPS_WOL_ARP_ADDR_MASK	0x0000FFFF
 
 /* Buffer descriptor status words offset */
-#define XEMACPS_BD_ADDR_OFFSET     0x00000000 /**< word 0/addr of BDs */
-#define XEMACPS_BD_STAT_OFFSET     0x00000004 /**< word 1/status of BDs */
+#define XEMACPS_BD_ADDR_OFFSET		0x00000000 /**< word 0/addr of BDs */
+#define XEMACPS_BD_STAT_OFFSET		0x00000004 /**< word 1/status of BDs */
 
 /* Transmit buffer descriptor status words bit positions.
  * Transmit buffer descriptor consists of two 32-bit registers,
@@ -415,16 +421,17 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
  * control transmit process.  After transmit, this is updated with status
  * information, whether the frame was transmitted OK or why it had failed.
  */
-#define XEMACPS_TXBUF_USED_MASK  0x80000000 /* Used bit. */
-#define XEMACPS_TXBUF_WRAP_MASK  0x40000000 /* Wrap bit, last descriptor */
-#define XEMACPS_TXBUF_RETRY_MASK 0x20000000 /* Retry limit exceeded */
-#define XEMACPS_TXBUF_EXH_MASK   0x08000000 /* Buffers exhausted */
-#define XEMACPS_TXBUF_LAC_MASK   0x04000000 /* Late collision. */
-#define XEMACPS_TXBUF_NOCRC_MASK 0x00010000 /* No CRC */
-#define XEMACPS_TXBUF_LAST_MASK  0x00008000 /* Last buffer */
-#define XEMACPS_TXBUF_LEN_MASK   0x00003FFF /* Mask for length field */
-
-#define XEMACPS_TXBUF_ERR_MASK   0x3C000000 /* Mask for length field */
+#define XEMACPS_TXBUF_USED_MASK		0x80000000 /* Used bit. */
+#define XEMACPS_TXBUF_WRAP_MASK		0x40000000 /* Wrap bit, last
+							descriptor */
+#define XEMACPS_TXBUF_RETRY_MASK	0x20000000 /* Retry limit exceeded */
+#define XEMACPS_TXBUF_EXH_MASK		0x08000000 /* Buffers exhausted */
+#define XEMACPS_TXBUF_LAC_MASK		0x04000000 /* Late collision. */
+#define XEMACPS_TXBUF_NOCRC_MASK	0x00010000 /* No CRC */
+#define XEMACPS_TXBUF_LAST_MASK		0x00008000 /* Last buffer */
+#define XEMACPS_TXBUF_LEN_MASK		0x00003FFF /* Mask for length field */
+
+#define XEMACPS_TXBUF_ERR_MASK		0x3C000000 /* Mask for length field */
 
 /* Receive buffer descriptor status words bit positions.
  * Receive buffer descriptor consists of two 32-bit registers,
@@ -435,25 +442,25 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
  * the frame was received (the filter match condition) as well as other
  * useful info.
  */
-#define XEMACPS_RXBUF_BCAST_MASK     0x80000000 /* Broadcast frame */
-#define XEMACPS_RXBUF_MULTIHASH_MASK 0x40000000 /* Multicast hashed frame */
-#define XEMACPS_RXBUF_UNIHASH_MASK   0x20000000 /* Unicast hashed frame */
-#define XEMACPS_RXBUF_EXH_MASK       0x08000000 /* buffer exhausted */
-#define XEMACPS_RXBUF_AMATCH_MASK    0x06000000 /* Specific address
+#define XEMACPS_RXBUF_BCAST_MASK	0x80000000 /* Broadcast frame */
+#define XEMACPS_RXBUF_MULTIHASH_MASK	0x40000000 /* Multicast hashed frame */
+#define XEMACPS_RXBUF_UNIHASH_MASK	0x20000000 /* Unicast hashed frame */
+#define XEMACPS_RXBUF_EXH_MASK		0x08000000 /* buffer exhausted */
+#define XEMACPS_RXBUF_AMATCH_MASK	0x06000000 /* Specific address
 						matched */
-#define XEMACPS_RXBUF_IDFOUND_MASK   0x01000000 /* Type ID matched */
-#define XEMACPS_RXBUF_IDMATCH_MASK   0x00C00000 /* ID matched mask */
-#define XEMACPS_RXBUF_VLAN_MASK      0x00200000 /* VLAN tagged */
-#define XEMACPS_RXBUF_PRI_MASK       0x00100000 /* Priority tagged */
-#define XEMACPS_RXBUF_VPRI_MASK      0x000E0000 /* Vlan priority */
-#define XEMACPS_RXBUF_CFI_MASK       0x00010000 /* CFI frame */
-#define XEMACPS_RXBUF_EOF_MASK       0x00008000 /* End of frame. */
-#define XEMACPS_RXBUF_SOF_MASK       0x00004000 /* Start of frame. */
-#define XEMACPS_RXBUF_LEN_MASK       0x00003FFF /* Mask for length field */
+#define XEMACPS_RXBUF_IDFOUND_MASK	0x01000000 /* Type ID matched */
+#define XEMACPS_RXBUF_IDMATCH_MASK	0x00C00000 /* ID matched mask */
+#define XEMACPS_RXBUF_VLAN_MASK		0x00200000 /* VLAN tagged */
+#define XEMACPS_RXBUF_PRI_MASK		0x00100000 /* Priority tagged */
+#define XEMACPS_RXBUF_VPRI_MASK		0x000E0000 /* Vlan priority */
+#define XEMACPS_RXBUF_CFI_MASK		0x00010000 /* CFI frame */
+#define XEMACPS_RXBUF_EOF_MASK		0x00008000 /* End of frame. */
+#define XEMACPS_RXBUF_SOF_MASK		0x00004000 /* Start of frame. */
+#define XEMACPS_RXBUF_LEN_MASK		0x00003FFF /* Mask for length field */
 
-#define XEMACPS_RXBUF_WRAP_MASK      0x00000002 /* Wrap bit, last BD */
-#define XEMACPS_RXBUF_NEW_MASK       0x00000001 /* Used bit.. */
-#define XEMACPS_RXBUF_ADD_MASK       0xFFFFFFFC /* Mask for address */
+#define XEMACPS_RXBUF_WRAP_MASK		0x00000002 /* Wrap bit, last BD */
+#define XEMACPS_RXBUF_NEW_MASK		0x00000001 /* Used bit.. */
+#define XEMACPS_RXBUF_ADD_MASK		0xFFFFFFFC /* Mask for address */
 
 
 #define XSLCR_EMAC0_CLK_CTRL_OFFSET	0x140 /* EMAC0 Reference Clk Control */
@@ -470,13 +477,14 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
 #define XEMACPS_SLCR_DIV_MASK		0xFC0FC0FF
 
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
-#define NS_PER_SEC 	1000000000ULL	/* Nanoseconds per second */
-#define PEEP_TSU_CLK  	50000000ULL	/* PTP TSU CLOCK */
+#define NS_PER_SEC			1000000000ULL /* Nanoseconds per
+							second */
+#define PEEP_TSU_CLK			50000000ULL /* PTP TSU CLOCK */
 #endif
 
-#define xemacps_read(base, reg)	\
+#define xemacps_read(base, reg)						\
 	__raw_readl((u32)(base) + (u32)(reg))
-#define xemacps_write(base, reg, val)	\
+#define xemacps_write(base, reg, val)					\
 	__raw_writel((val), (u32)(base) + (u32)(reg))
 
 #define XEMACPS_RING_SEEKAHEAD(ringptr, bdptr, numbd)			\
@@ -519,7 +527,7 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
 
 struct ring_info {
 	struct sk_buff *skb;
-	dma_addr_t     mapping;
+	dma_addr_t mapping;
 };
 
 /* DMA buffer descriptor structure. Each BD is two words */
@@ -530,70 +538,70 @@ struct xemacps_bd {
 
 /* This is an internal structure used to maintain the DMA list */
 struct xemacps_bdring {
-	u32 physbaseaddr;    /* Physical address of 1st BD in list */
-	u32 firstbdaddr;     /* Virtual address of 1st BD in list */
-	u32 lastbdaddr;      /* Virtual address of last BD in the list */
-	u32 length;          /* size of ring in bytes */
-	u32 separation;      /* Number of bytes between the starting
+	u32 physbaseaddr; /* Physical address of 1st BD in list */
+	u32 firstbdaddr; /* Virtual address of 1st BD in list */
+	u32 lastbdaddr; /* Virtual address of last BD in the list */
+	u32 length; /* size of ring in bytes */
+	u32 separation; /* Number of bytes between the starting
 				address of adjacent BDs */
 	struct xemacps_bd *freehead; /* First BD in the free group */
-	struct xemacps_bd *prehead;  /* First BD in the pre-work group */
-	struct xemacps_bd *hwhead;   /* First BD in the work group */
-	struct xemacps_bd *hwtail;   /* Last BD in the work group */
+	struct xemacps_bd *prehead; /* First BD in the pre-work group */
+	struct xemacps_bd *hwhead; /* First BD in the work group */
+	struct xemacps_bd *hwtail; /* Last BD in the work group */
 	struct xemacps_bd *posthead; /* First BD in the post-work group */
-	unsigned freecnt;    /* Number of BDs in the free group */
-	unsigned hwcnt;      /* Number of BDs in work group */
-	unsigned precnt;     /* Number of BDs in pre-work group */
-	unsigned postcnt;    /* Number of BDs in post-work group */
-	unsigned allcnt;     /* Total Number of BDs for channel */
+	unsigned freecnt; /* Number of BDs in the free group */
+	unsigned hwcnt; /* Number of BDs in work group */
+	unsigned precnt; /* Number of BDs in pre-work group */
+	unsigned postcnt; /* Number of BDs in post-work group */
+	unsigned allcnt; /* Total Number of BDs for channel */
 
-	int is_rx;           /* Is this an RX or a TX ring? */
+	int is_rx; /* Is this an RX or a TX ring? */
 };
 
 /* Our private device data. */
 struct net_local {
-	void   __iomem         *baseaddr;
-	struct clk		*devclk;
-	struct clk		*aperclk;
-	struct notifier_block	clk_rate_change_nb;
+	void __iomem *baseaddr;
+	struct clk *devclk;
+	struct clk *aperclk;
+	struct notifier_block clk_rate_change_nb;
 
 	struct xemacps_bdring tx_ring;
 	struct xemacps_bdring rx_ring;
 	struct device_node *phy_node;
-	struct ring_info       *tx_skb;
-	struct ring_info       *rx_skb;
+	struct ring_info *tx_skb;
+	struct ring_info *rx_skb;
 
-	void                   *rx_bd;        /* virtual address */
-	void                   *tx_bd;        /* virtual address */
+	void *rx_bd; /* virtual address */
+	void *tx_bd; /* virtual address */
 
-	dma_addr_t             rx_bd_dma;     /* physical address */
-	dma_addr_t             tx_bd_dma;     /* physical address */
+	dma_addr_t rx_bd_dma; /* physical address */
+	dma_addr_t tx_bd_dma; /* physical address */
 
-	spinlock_t             lock;
+	spinlock_t lock;
 
 	struct platform_device *pdev;
-	struct net_device      *ndev;   /* this device */
+	struct net_device *ndev; /* this device */
 
-	struct napi_struct     napi;    /* napi information for device */
-	struct net_device_stats stats;  /* Statistics for this device */
+	struct napi_struct napi; /* napi information for device */
+	struct net_device_stats stats; /* Statistics for this device */
 
 	/* Manage internal timer for packet timestamping */
-	struct cyclecounter    cycles;
-	struct timecounter     clock;
-	struct timecompare     compare;
+	struct cyclecounter cycles;
+	struct timecounter clock;
+	struct timecompare compare;
 	struct hwtstamp_config hwtstamp_config;
 
-	struct mii_bus         *mii_bus;
-	struct phy_device      *phy_dev;
-	unsigned int           link;
-	unsigned int           speed;
-	unsigned int           duplex;
+	struct mii_bus *mii_bus;
+	struct phy_device *phy_dev;
+	unsigned int link;
+	unsigned int speed;
+	unsigned int duplex;
 	/* RX ip/tcp/udp checksum */
-	unsigned               ip_summed;
-	unsigned int	       enetnum;
-	unsigned int 	       board_type;
+	unsigned ip_summed;
+	unsigned int enetnum;
+	unsigned int board_type;
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
-	unsigned int 	       ptpenetclk;
+	unsigned int ptpenetclk;
 #endif
 };
 #define to_net_local(_nb)	container_of(_nb, struct net_local,\
@@ -741,7 +749,7 @@ static void xemacps_adjust_link(struct net_device *ndev)
 
 	if (phydev->link) {
 		if ((lp->speed != phydev->speed) ||
-		    (lp->duplex != phydev->duplex)) {
+			(lp->duplex != phydev->duplex)) {
 			regval = xemacps_read(lp->baseaddr,
 				XEMACPS_NWCFG_OFFSET);
 			if (phydev->duplex)
@@ -754,7 +762,8 @@ static void xemacps_adjust_link(struct net_device *ndev)
 				rate = clk_round_rate(lp->devclk, 125000000);
 				pr_info("Set GEM clk to %ld Hz\n", rate);
 				if (clk_set_rate(lp->devclk, rate))
-					pr_err("Unable to set new clock rate.\n");
+					dev_err(&lp->pdev->dev,
+					"Setting new clock rate failed.\n");
 			} else {
 				regval &= ~XEMACPS_NWCFG_1000_MASK;
 			}
@@ -764,7 +773,8 @@ static void xemacps_adjust_link(struct net_device *ndev)
 				rate = clk_round_rate(lp->devclk, 25000000);
 				pr_info("Set GEM clk to %ld Hz\n", rate);
 				if (clk_set_rate(lp->devclk, rate))
-					pr_err("Unable to set new clock rate.\n");
+					dev_err(&lp->pdev->dev,
+					"Setting new clock rate failed.\n");
 			} else {
 				regval &= ~XEMACPS_NWCFG_100_MASK;
 			}
@@ -1185,10 +1195,10 @@ u32 xemacps_bdringfromhwtx(struct xemacps_bdring *ringptr, unsigned bdlimit,
 		bdstr = xemacps_read(curbdptr, XEMACPS_BD_STAT_OFFSET);
 
 		if (sop == 0) {
-				if (bdstr & XEMACPS_TXBUF_USED_MASK)
-					sop = 1;
-				else
-					break;
+			if (bdstr & XEMACPS_TXBUF_USED_MASK)
+				sop = 1;
+			else
+				break;
 		}
 
 		if (sop == 1) {
@@ -1606,7 +1616,7 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 		return work_done;
 
 	napi_complete(napi);
-	/* We disabled TX/RX interrupts in interrupt service
+	/* We disabled RX interrupts in interrupt service
 	 * routine, now it is time to enable it back.
 	 */
 	xemacps_write(lp->baseaddr, XEMACPS_IER_OFFSET,
@@ -1854,9 +1864,11 @@ static int xemacps_descriptor_init(struct net_local *lp)
 	dev_dbg(&lp->pdev->dev, "TX ring %d bytes at 0x%x mapped %p\n",
 			size, lp->tx_bd_dma, lp->tx_bd);
 
-	dev_dbg(&lp->pdev->dev, "lp->tx_bd %p lp->tx_bd_dma %p lp->tx_skb %p\n",
+	dev_dbg(&lp->pdev->dev,
+		"lp->tx_bd %p lp->tx_bd_dma %p lp->tx_skb %p\n",
 		lp->tx_bd, (void *)lp->tx_bd_dma, lp->tx_skb);
-	dev_dbg(&lp->pdev->dev, "lp->rx_bd %p lp->rx_bd_dma %p lp->rx_skb %p\n",
+	dev_dbg(&lp->pdev->dev,
+		"lp->rx_bd %p lp->rx_bd_dma %p lp->rx_skb %p\n",
 		lp->rx_bd, (void *)lp->rx_bd_dma, lp->rx_skb);
 
 	return 0;
@@ -2087,7 +2099,7 @@ static int xemacps_open(struct net_device *ndev)
 	rc = xemacps_descriptor_init(lp);
 	if (rc) {
 		dev_err(&lp->pdev->dev,
-				"Unable to allocate DMA memory, rc %d\n", rc);
+			"Unable to allocate DMA memory, rc %d\n", rc);
 		return rc;
 	}
 
@@ -2099,8 +2111,8 @@ static int xemacps_open(struct net_device *ndev)
 
 	rc = xemacps_setup_ring(lp);
 	if (rc) {
-		dev_err(&lp->pdev->dev, "Unable to setup BD rings, rc %d\n",
-				rc);
+		dev_err(&lp->pdev->dev,
+			"Unable to setup BD rings, rc %d\n", rc);
 		goto err_pm_put;
 	}
 
@@ -2108,8 +2120,8 @@ static int xemacps_open(struct net_device *ndev)
 	napi_enable(&lp->napi);
 	rc = xemacps_mii_probe(ndev);
 	if (rc != 0) {
-		dev_err(&lp->pdev->dev, "%s mii_probe fail.\n",
-				lp->mii_bus->name);
+		dev_err(&lp->pdev->dev,
+			"%s mii_probe fail.\n", lp->mii_bus->name);
 		if (rc == (-2)) {
 			mdiobus_unregister(lp->mii_bus);
 			kfree(lp->mii_bus->irq);
@@ -2186,7 +2198,7 @@ static void xemacps_tx_timeout(struct net_device *ndev)
 	rc = xemacps_descriptor_init(lp);
 	if (rc) {
 		dev_err(&lp->pdev->dev,
-				"Unable to allocate DMA memory, rc %d\n", rc);
+			"Unable to allocate DMA memory, rc %d\n", rc);
 		spin_unlock(&lp->lock);
 		return;
 	}
@@ -2194,7 +2206,7 @@ static void xemacps_tx_timeout(struct net_device *ndev)
 	rc = xemacps_setup_ring(lp);
 	if (rc) {
 		dev_err(&lp->pdev->dev, "Unable to setup BD rings, rc %d\n",
-				rc);
+									rc);
 		spin_unlock(&lp->lock);
 		return;
 	}
@@ -2784,7 +2796,7 @@ static struct ethtool_ops xemacps_ethtool_ops = {
 	.get_settings   = xemacps_get_settings,
 	.set_settings   = xemacps_set_settings,
 	.get_drvinfo    = xemacps_get_drvinfo,
-	.get_link       = ethtool_op_get_link,       /* ethtool default */
+	.get_link       = ethtool_op_get_link, /* ethtool default */
 	.get_ringparam  = xemacps_get_ringparam,
 	.get_wol        = xemacps_get_wol,
 	.set_wol        = xemacps_set_wol,
@@ -2940,11 +2952,11 @@ static int __init xemacps_probe(struct platform_device *pdev)
 		goto err_out_iounmap;
 	}
 
-	ndev->netdev_ops	 = &netdev_ops;
-	ndev->watchdog_timeo     = TX_TIMEOUT;
-	ndev->ethtool_ops        = &xemacps_ethtool_ops;
-	ndev->base_addr          = r_mem->start;
-	ndev->features           = NETIF_F_IP_CSUM;
+	ndev->netdev_ops = &netdev_ops;
+	ndev->watchdog_timeo = TX_TIMEOUT;
+	ndev->ethtool_ops = &xemacps_ethtool_ops;
+	ndev->base_addr = r_mem->start;
+	ndev->features = NETIF_F_IP_CSUM;
 	netif_napi_add(ndev, &lp->napi, xemacps_rx_poll, XEMACPS_NAPI_WEIGHT);
 
 	lp->ip_summed = CHECKSUM_UNNECESSARY;
@@ -3007,7 +3019,8 @@ static int __init xemacps_probe(struct platform_device *pdev)
 		lp->clk_rate_change_nb.notifier_call = xemacps_clk_notifier_cb;
 		lp->clk_rate_change_nb.next = NULL;
 		if (clk_notifier_register(lp->devclk, &lp->clk_rate_change_nb))
-			pr_warn("Unable to register clock notifier.\n");
+			dev_warn(&pdev->dev,
+				"Unable to register clock notifier.\n");
 	}
 
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
-- 
1.7.5.4

