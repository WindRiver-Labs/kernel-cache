From 5623f36dd6568aebbae36619aea01941c6b49466 Mon Sep 17 00:00:00 2001
From: Liming Wang <liming.wang@windriver.com>
Date: Tue, 29 Jan 2013 14:19:57 +0800
Subject: [PATCH 49/50] Arm:Zynq: Clear reboot status register 0x0F000000 bit

git://git.xilinx.com/linux-xlnx.git master
commit 0b64df09a9033887b75a3cdcc52b12d4baaae58a

FSBL check the reboot status register 0x0F000000 bits to decide
which the partition it should work on. If the bitstream is presented in
the partition, it programs the bistream.

This commit is a temporary workaround to reload the bitstream after
linux reset.

Signed-off-by: Jason Wu <jason.wu@petalogix.com>
Signed-off-by: Michal Simek <monstr@monstr.eu>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 arch/arm/mach-zynq/include/mach/slcr.h |    2 ++
 arch/arm/mach-zynq/slcr.c              |   11 ++++++++++-
 2 files changed, 12 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-zynq/include/mach/slcr.h b/arch/arm/mach-zynq/include/mach/slcr.h
index bd4c7fb..71a54fb 100644
--- a/arch/arm/mach-zynq/include/mach/slcr.h
+++ b/arch/arm/mach-zynq/include/mach/slcr.h
@@ -54,6 +54,8 @@ extern void xslcr_init_postload_fpga(void);
 #define XSLCR_OCM_RST_CTRL_OFFSET	0x238 /* OCM Software Reset Control */
 #define XSLCR_DEVC_RST_CTRL_OFFSET	0x23C /* Dev Cfg SW Reset Control */
 #define XSLCR_FPGA_RST_CTRL_OFFSET	0x240 /* FPGA Software Reset Control */
+#define XSLCR_A9_CPU_RST_CTRL		0x244 /* CPU Software Reset Control */
+#define XSLCR_REBOOT_STATUS		0x258 /* PS Reboot Status */
 #define XSLCR_MIO_PIN_00_OFFSET		0x700 /* MIO PIN0 control register */
 #define XSLCR_LVL_SHFTR_EN_OFFSET	0x900 /* Level Shifters Enable */
 
diff --git a/arch/arm/mach-zynq/slcr.c b/arch/arm/mach-zynq/slcr.c
index 51fdfea..590c0f9 100644
--- a/arch/arm/mach-zynq/slcr.c
+++ b/arch/arm/mach-zynq/slcr.c
@@ -1416,11 +1416,20 @@ static const struct xslcr_periph_reset reset_info[] = {
  **/
 void xslcr_system_reset(void)
 {
+	u32 reboot;
+
 	/* Unlock the SLCR then reset the system.
 	 * Note that this seems to require raw i/o
 	 * functions or there's a lockup?
 	 */
-	xslcr_writereg(slcr->regs + 8, 0xDF0D);
+	xslcr_writereg(slcr->regs + XSLCR_UNLOCK, 0xDF0D);
+
+	/* Clear 0x0F000000 bits of reboot status register to workaround
+	 * the FSBL not loading the bitstream after soft-reboot
+	 * This is a temporary solution until we know more.
+	 */
+	reboot = xslcr_readreg(slcr->regs + XSLCR_REBOOT_STATUS);
+	xslcr_writereg(slcr->regs + XSLCR_REBOOT_STATUS, reboot & 0xF0FFFFFF);
 	xslcr_writereg(slcr->regs + XSLCR_PSS_RST_CTRL_OFFSET, 1);
 }
 
-- 
1.7.0

