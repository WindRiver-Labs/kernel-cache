From f73718d2faf6857ab21235fc0f819175d5a9a73e Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Wed, 30 Jul 2014 09:13:05 -0700
Subject: [PATCH 158/182] ARM: zynq: Have DDR self-refresh and clock stop
 always on

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Those features are controlled by HW and they can be always on. If the
DDR becomes idle it will leverage those low-power modes automatically
and also resume operation on new requests.
Latency penalties should be negligible.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit da18ede270876de61f74e26530fbeb1be6f22a63)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/mach-zynq/pm.c |   44 ++++++++++++++++++--------------------------
 1 files changed, 18 insertions(+), 26 deletions(-)

diff --git a/arch/arm/mach-zynq/pm.c b/arch/arm/mach-zynq/pm.c
index e6ea94f..4b416ea 100644
--- a/arch/arm/mach-zynq/pm.c
+++ b/arch/arm/mach-zynq/pm.c
@@ -65,19 +65,6 @@ static int zynq_pm_suspend(unsigned long arg)
 		(__force void *)ocm_base;
 	int do_ddrpll_bypass = 1;
 
-	/* Enable DDR self-refresh and clock stop */
-	if (ddrc_base) {
-		reg = readl(ddrc_base + DDRC_CTRL_REG1_OFFS);
-		reg |= DDRC_SELFREFRESH_MASK;
-		writel(reg, ddrc_base + DDRC_CTRL_REG1_OFFS);
-
-		reg = readl(ddrc_base + DDRC_DRAM_PARAM_REG3_OFFS);
-		reg |= DDRC_CLOCKSTOP_MASK;
-		writel(reg, ddrc_base + DDRC_DRAM_PARAM_REG3_OFFS);
-	} else {
-		do_ddrpll_bypass = 0;
-	}
-
 	/* SCU standby mode */
 	if (zynq_scu_base) {
 		reg = readl(zynq_scu_base + SCU_CTRL);
@@ -96,7 +83,7 @@ static int zynq_pm_suspend(unsigned long arg)
 		      : /* no inputs */
 		      : "r12");
 
-	if (!ocm_base)
+	if (!ocm_base || !ddrc_base)
 		do_ddrpll_bypass = 0;
 
 	if (do_ddrpll_bypass) {
@@ -132,17 +119,6 @@ static int zynq_pm_suspend(unsigned long arg)
 		      : /* no inputs */
 		      : "r12");
 
-	/* Disable DDR self-refresh and clock stop */
-	if (ddrc_base) {
-		reg = readl(ddrc_base + DDRC_CTRL_REG1_OFFS);
-		reg &= ~DDRC_SELFREFRESH_MASK;
-		writel(reg, ddrc_base + DDRC_CTRL_REG1_OFFS);
-
-		reg = readl(ddrc_base + DDRC_DRAM_PARAM_REG3_OFFS);
-		reg &= ~DDRC_CLOCKSTOP_MASK;
-		writel(reg, ddrc_base + DDRC_DRAM_PARAM_REG3_OFFS);
-	}
-
 	return 0;
 }
 
@@ -250,9 +226,25 @@ static void __iomem *zynq_pm_remap_ocm(void)
 
 int __init zynq_pm_late_init(void)
 {
+	u32 reg;
+
 	ddrc_base = zynq_pm_ioremap("xlnx,zynq-ddrc-1.0");
-	if (!ddrc_base)
+	if (!ddrc_base) {
 		pr_warn("%s: Unable to map DDRC IO memory.\n", __func__);
+	} else {
+		/*
+		 * Enable DDRC self-refresh and clock stop features. The HW
+		 * takes care of entering/exiting the correct modes depending
+		 * on activity state.
+		 */
+		reg = readl(ddrc_base + DDRC_CTRL_REG1_OFFS);
+		reg |= DDRC_SELFREFRESH_MASK;
+		writel(reg, ddrc_base + DDRC_CTRL_REG1_OFFS);
+
+		reg = readl(ddrc_base + DDRC_DRAM_PARAM_REG3_OFFS);
+		reg |= DDRC_CLOCKSTOP_MASK;
+		writel(reg, ddrc_base + DDRC_DRAM_PARAM_REG3_OFFS);
+	}
 
 	ocm_base = zynq_pm_remap_ocm();
 	if (!ocm_base) {
-- 
1.7.5.4

