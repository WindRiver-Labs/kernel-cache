From 3691eb683f4004ca2c78ed07255b5250fddacf05 Mon Sep 17 00:00:00 2001
From: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date: Wed, 22 May 2013 22:44:16 +0200
Subject: [PATCH 295/509] dma: xilinx: vdma: Device is always compatible with
 xlnx,axi-vdma

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit f627f72b8a113f509b398dfe33581808c17979f5

The xilinx-axivdma driver only supports VDMA devices. There is no need
to test for compatibility.

Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Acked-by: Srikanth Thokala <sthokal@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/dma/xilinx/xilinx_axivdma.c |   44 +++++++++++++++-------------------
 1 files changed, 19 insertions(+), 25 deletions(-)

diff --git a/drivers/dma/xilinx/xilinx_axivdma.c b/drivers/dma/xilinx/xilinx_axivdma.c
index 14cdf90..2e151b3 100644
--- a/drivers/dma/xilinx/xilinx_axivdma.c
+++ b/drivers/dma/xilinx/xilinx_axivdma.c
@@ -1120,9 +1120,9 @@ static int xilinx_vdma_chan_probe(struct xilinx_vdma_device *xdev,
 	 * Used by dmatest channel matching in slave transfers
 	 * Can change it to be a structure to have more matching information
 	 */
-	chan->private = (chan->direction & 0xFF) |
-		(chan->feature & XILINX_DMA_IP_MASK) |
-		(device_id << XILINX_DMA_DEVICE_ID_SHIFT);
+	chan->private = (chan->direction & 0xff)
+		      | XILINX_DMA_IP_VDMA
+		      | (device_id << XILINX_DMA_DEVICE_ID_SHIFT);
 	chan->common.private = (void *)&(chan->private);
 
 	if (!chan->has_dre)
@@ -1229,31 +1229,25 @@ static int xilinx_vdma_of_probe(struct platform_device *op)
 		return PTR_ERR(xdev->regs);
 
 	/* Axi VDMA only do slave transfers */
-	if (of_device_is_compatible(node, "xlnx,axi-vdma")) {
-		xdev->feature |= XILINX_DMA_IP_VDMA;
-
-		if (of_property_read_bool(node, "xlnx,include-sg"))
-			xdev->feature |= XILINX_VDMA_FTR_HAS_SG;
-
-		err = of_property_read_u32(node, "xlnx,num-fstores",
-					   &num_frames);
-		if (err < 0) {
-			dev_err(xdev->dev,
-				"missing xlnx,num-fstores property\n");
-			return err;
-		}
-
-		err = of_property_read_u32(node, "xlnx,flush-fsync", &value);
-		if (!err)
-			xdev->feature |= value << XILINX_VDMA_FTR_FLUSH_SHIFT;
+	if (of_property_read_bool(node, "xlnx,include-sg"))
+		xdev->feature |= XILINX_VDMA_FTR_HAS_SG;
 
-		dma_cap_set(DMA_SLAVE, xdev->common.cap_mask);
-		dma_cap_set(DMA_PRIVATE, xdev->common.cap_mask);
-		xdev->common.device_prep_slave_sg = xilinx_vdma_prep_slave_sg;
-		xdev->common.device_control = xilinx_vdma_device_control;
-		xdev->common.device_issue_pending = xilinx_vdma_issue_pending;
+	err = of_property_read_u32(node, "xlnx,num-fstores", &num_frames);
+	if (err < 0) {
+		dev_err(xdev->dev, "missing xlnx,num-fstores property\n");
+		return err;
 	}
 
+	err = of_property_read_u32(node, "xlnx,flush-fsync", &value);
+	if (!err)
+		xdev->feature |= value << XILINX_VDMA_FTR_FLUSH_SHIFT;
+
+	dma_cap_set(DMA_SLAVE, xdev->common.cap_mask);
+	dma_cap_set(DMA_PRIVATE, xdev->common.cap_mask);
+	xdev->common.device_prep_slave_sg = xilinx_vdma_prep_slave_sg;
+	xdev->common.device_control = xilinx_vdma_device_control;
+	xdev->common.device_issue_pending = xilinx_vdma_issue_pending;
+
 	xdev->common.device_alloc_chan_resources =
 				xilinx_vdma_alloc_chan_resources;
 	xdev->common.device_free_chan_resources =
-- 
1.7.5.4

