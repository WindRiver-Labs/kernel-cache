From 6adbecbe0a56cf326dd97f019981398cad74ae08 Mon Sep 17 00:00:00 2001
From: Zhixiong Chi <Zhixiong.Chi@windriver.com>
Date: Wed, 20 Apr 2016 14:09:15 +0800
Subject: [PATCH 2/2] i2c: xi2cps: fix the i2c driver hang up

Due to HW bug the controller might incorrectly transfers 16 bytes of
additional read data from the slave device. When this happens, the
transfer_size register gets corrupted and rolls over to 0xFF as well.
The interrupt handling routine will not be available, so we can't get
the done signal and the driver will hang up.

This commit prevents the rx buffer to overflow. It also prevents rx
counters to wrap leading to incorrect SW timeout.

Signed-off-by: Zhixiong Chi <Zhixiong.Chi@windriver.com>
---
 drivers/i2c/busses/i2c-xilinx_ps.c |   26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/drivers/i2c/busses/i2c-xilinx_ps.c b/drivers/i2c/busses/i2c-xilinx_ps.c
index 19cabf9..9d503da8 100644
--- a/drivers/i2c/busses/i2c-xilinx_ps.c
+++ b/drivers/i2c/busses/i2c-xilinx_ps.c
@@ -151,6 +151,7 @@ static irqreturn_t xi2cps_isr(int irq, void *ptr)
 	struct xi2cps *id = ptr;
 
 	isr_status = xi2cps_readreg(XI2CPS_ISR_OFFSET);
+	xi2cps_writereg(isr_status, XI2CPS_ISR_OFFSET);
 
 	/* Handling Nack interrupt */
 	if (isr_status & 0x00000004)
@@ -195,6 +196,31 @@ static irqreturn_t xi2cps_isr(int irq, void *ptr)
 					xi2cps_readreg(XI2CPS_DATA_OFFSET);
 				bytes_to_recv = bytes_to_recv - 1;
 			}
+		} else {
+			if (!(isr_status & 0x00000001)) {
+				/* Signal the completion of transaction and clear the
+				 * hold bus bit.
+				 */
+				while (xi2cps_readreg(XI2CPS_SR_OFFSET)
+					                        & 0x00000020) {
+					*(id->p_recv_buf)++ =
+					xi2cps_readreg(XI2CPS_DATA_OFFSET);
+					id->recv_count--;
+				}
+				complete(&id->xfer_done);
+
+				if (id->bus_hold_flag == 0) {
+				/* Clear the hold bus bit */
+					ctrl_reg =
+					xi2cps_readreg(XI2CPS_CR_OFFSET);
+					if ((ctrl_reg & XI2CPS_CR_HOLD_BUS_MASK)
+						== XI2CPS_CR_HOLD_BUS_MASK)
+						xi2cps_writereg(
+						(ctrl_reg &
+						(~XI2CPS_CR_HOLD_BUS_MASK)),
+						XI2CPS_CR_OFFSET);
+				}
+			}
 		}
 	}
 
-- 
1.7.5.4

