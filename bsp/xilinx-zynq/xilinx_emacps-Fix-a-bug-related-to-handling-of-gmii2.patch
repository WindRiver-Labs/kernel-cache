From fa1334a29d9e591457c23b8de0eaad099ffa49f3 Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudha.sarangi@xilinx.com>
Date: Wed, 24 Apr 2013 17:07:25 +0530
Subject: [PATCH 102/793] xilinx_emacps: Fix a bug related to handling of
 gmii2rgmii converter core

This patch fixes a bug related to handling of gmii2rgmii
converter core. In the existing code no check was being made
to confirm the presence of the converter core before writing
to the converter register. This is bug and the patch fixes it.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   51 ++++++++++++++++----------
 1 files changed, 31 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 187fc68..0242ea7 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -727,37 +727,48 @@ static void xemacps_adjust_link(struct net_device *ndev)
 			else
 				regval &= ~XEMACPS_NWCFG_FDEN_MASK;
 
-
-			regval &= ~(XEMACPS_NWCFG_1000_MASK |
-					XEMACPS_NWCFG_100_MASK);
 			if (phydev->speed == SPEED_1000) {
 				regval |= XEMACPS_NWCFG_1000_MASK;
 				xemacps_set_freq(lp->devclk, 125000000,
 						&lp->pdev->dev);
-				xemacps_mdio_write(lp->mii_bus,
-					gmii2rgmii_phydev->addr,
-					XEMACPS_GMII2RGMII_REG_NUM,
-					XEMACPS_GMII2RGMII_SPEED1000_FD);
-			} else if (phydev->speed == SPEED_100) {
+			} else {
+				regval &= ~XEMACPS_NWCFG_1000_MASK;
+			}
+
+			if (phydev->speed == SPEED_100) {
 				regval |= XEMACPS_NWCFG_100_MASK;
 				xemacps_set_freq(lp->devclk, 25000000,
 						&lp->pdev->dev);
-				xemacps_mdio_write(lp->mii_bus,
-						gmii2rgmii_phydev->addr,
-						XEMACPS_GMII2RGMII_REG_NUM,
-						XEMACPS_GMII2RGMII_SPEED100_FD);
-			} else if (phydev->speed == SPEED_10) {
+			} else {
+				regval &= ~XEMACPS_NWCFG_100_MASK;
+			}
+
+			if (phydev->speed == SPEED_10) {
 				xemacps_set_freq(lp->devclk, 2500000,
 						&lp->pdev->dev);
-				xemacps_mdio_write(lp->mii_bus,
-						gmii2rgmii_phydev->addr,
-						XEMACPS_GMII2RGMII_REG_NUM,
-						XEMACPS_GMII2RGMII_SPEED10_FD);
 			}
 
 			xemacps_write(lp->baseaddr, XEMACPS_NWCFG_OFFSET,
 			regval);
 
+			if (gmii2rgmii_phydev != NULL) {
+				if (regval & XEMACPS_NWCFG_1000_MASK) {
+					xemacps_mdio_write(lp->mii_bus,
+					gmii2rgmii_phydev->addr,
+					XEMACPS_GMII2RGMII_REG_NUM,
+					XEMACPS_GMII2RGMII_SPEED1000_FD);
+				} else if (regval & XEMACPS_NWCFG_100_MASK) {
+					xemacps_mdio_write(lp->mii_bus,
+					gmii2rgmii_phydev->addr,
+					XEMACPS_GMII2RGMII_REG_NUM,
+					XEMACPS_GMII2RGMII_SPEED100_FD);
+				} else {
+					xemacps_mdio_write(lp->mii_bus,
+					gmii2rgmii_phydev->addr,
+					XEMACPS_GMII2RGMII_REG_NUM,
+					XEMACPS_GMII2RGMII_SPEED10_FD);
+				}
+			}
 			lp->speed = phydev->speed;
 			lp->duplex = phydev->duplex;
 			status_change = 1;
@@ -868,9 +879,9 @@ static int xemacps_mii_probe(struct net_device *ndev)
 			ndev->name);
 			return -1;
 		}
-	}
-
-	lp->gmii2rgmii_phy_dev = phydev;
+		lp->gmii2rgmii_phy_dev = phydev;
+	} else
+		lp->gmii2rgmii_phy_dev = NULL;
 
 	return 0;
 }
-- 
1.7.5.4

