From a5936da262e39a21d3329415ded94deddf401b55 Mon Sep 17 00:00:00 2001
From: Andrei Simion <andreis@xilinx.com>
Date: Tue, 7 Feb 2012 18:07:43 -0800
Subject: [PATCH 007/793] Xilinx: ARM: Devcfg and SLCR drivers updated to
 support reconfiguration.

The devcfg and SLCR drivers have been updated to allow (multiple)
reconfigurations of the Programmable Logic.

The flow of reconfiguration is as follows:

1. (Preload): Called in the devcfg driver's open function via an SLCR
function exposed from the SLCR driver.

- Put the FPGA outputs (PS->PL) into reset (disable AXI interface).
- Disable the level shifters.
- Enable the output level shifters.

2. (Reset PROG_B - rising edge): Called in the devcfg driver's open function.

- Set PCFG_PROG_B to 1.
- Set PCFG_PROG_B to 0.
- Wait for PCFG_INIT_B to go low.
- Set PCFG_PROG_B to 1.
- Wait for PCFG_INIT_B to go high
- Clear the PCFG_DONE interrupt.

3. (Download the bitstream): The devcfg write function uses multiple DMA
transfers to send the bitstream to the PCAP.

4. (Postload): Called in the devcfg driver's release function via an SLCR
function exposed from the SLCR driver.

- Enable the input level shifters.
- Take the FPGA outputs (PS->PL) out of reset (enable AXI interface).

The user initiates a reconfiguration from Linux by redirecting a *byte-swapped
binary of the* bitstream into the devcfg device file:
	cat system_bs.bin > /dev/xdevcfg
---
 drivers/char/xilinx_devcfg.c |   41 +++++++++++++++++++++++++++++++++++++++++
 1 files changed, 41 insertions(+), 0 deletions(-)

diff --git a/drivers/char/xilinx_devcfg.c b/drivers/char/xilinx_devcfg.c
index 25e3a5d..645793c 100644
--- a/drivers/char/xilinx_devcfg.c
+++ b/drivers/char/xilinx_devcfg.c
@@ -32,6 +32,8 @@
 #include <linux/io.h>
 #include <linux/uaccess.h>
 
+#include <mach/slcr.h>
+
 #define DRIVER_NAME "xdevcfg"
 
 #define XDEVCFG_MAJOR 259
@@ -94,6 +96,10 @@ static DEFINE_MUTEX(xdevcfg_mutex);
 						    *  including: DAP_En,
 						    *  DBGEN,NIDEN, SPNIEN */
 
+/* Status register bit definitions */
+
+#define XDCFG_STATUS_PCFG_INIT_MASK	0x00000010 /* FPGA init status */
+
 /* Interrupt Status/Mask Register Bit definitions */
 #define XDCFG_IXR_DMA_DONE_MASK		0x00002000 /* DMA Command Done */
 #define XDCFG_IXR_PCFG_DONE_MASK	0x00000004 /* FPGA programmed */
@@ -139,6 +145,35 @@ struct xdevcfg_drvdata {
 #define xdevcfg_readreg(offset)		__raw_readl(offset)
 
 /**
+ * xdevcfg_reset_prog_b() - Create a rising edge on PROG_B.
+ * @base_address:	The base address of the device.
+ */
+static void xdevcfg_reset_prog_b(u32 base_address) {
+
+	// Setting PCFG_PROG_B signal to high
+	xdevcfg_writereg(base_address + XDCFG_CTRL_OFFSET,
+		(xdevcfg_readreg(base_address + XDCFG_CTRL_OFFSET) | XDCFG_CTRL_PCFG_PROG_B_MASK));
+
+	// Setting PCFG_PROG_B signal to low
+	xdevcfg_writereg(base_address + XDCFG_CTRL_OFFSET,
+		(xdevcfg_readreg(base_address + XDCFG_CTRL_OFFSET) & ~XDCFG_CTRL_PCFG_PROG_B_MASK));
+
+	// Polling the PCFG_INIT status for Reset
+	while(xdevcfg_readreg(base_address + XDCFG_STATUS_OFFSET) & XDCFG_STATUS_PCFG_INIT_MASK);
+
+	// Setting PCFG_PROG_B signal to high
+	xdevcfg_writereg(base_address + XDCFG_CTRL_OFFSET,
+		(xdevcfg_readreg(base_address + XDCFG_CTRL_OFFSET) | XDCFG_CTRL_PCFG_PROG_B_MASK));
+
+	// Polling the PCFG_INIT status for Set
+	while(!(xdevcfg_readreg(base_address + XDCFG_STATUS_OFFSET) & XDCFG_STATUS_PCFG_INIT_MASK));
+
+	// Reset PCFG_DONE
+	xdevcfg_writereg(base_address + XDCFG_INT_STS_OFFSET, XDCFG_IXR_PCFG_DONE_MASK);
+
+}
+
+/**
  * xdevcfg_irq() - The main interrupt handler.
  * @irq:	The interrupt number.
  * @data:	Pointer to the driver data structure.
@@ -414,6 +449,10 @@ static int xdevcfg_open(struct inode *inode, struct file *file)
 	file->private_data = drvdata;
 	drvdata->is_open = 1;
 
+	xslcr_init_preload_fpga();
+
+	xdevcfg_reset_prog_b((u32)drvdata->base_address);
+
  error:
 	mutex_unlock(&drvdata->sem);
  out:
@@ -432,6 +471,8 @@ static int xdevcfg_release(struct inode *inode, struct file *file)
 {
 	struct xdevcfg_drvdata *drvdata = file->private_data;
 
+	xslcr_init_postload_fpga();
+
 	drvdata->is_open = 0;
 
 	return 0;
-- 
1.7.5.4

