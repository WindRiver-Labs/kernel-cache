From 371ac67e9236c142027c2d2ae82eaa397a11fe18 Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaiah.choudary.kalluri@xilinx.com>
Date: Thu, 6 Mar 2014 10:23:59 +0530
Subject: [PATCH 016/509] ARM: zynq: Set bit 22 in the PL310 cache controller
 auxctlr register

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 1a85939af40acca2bf963407b497cc31c303ff3e

This patch is based on the below commit
"ARM: 6395/1: VExpress: Set bit 22 in the PL310 (cache controller) AuxCtlr
register"
(sha1:1a8e41cd672f894bbd74874eac601e6cedf838fb)

Clearing bit 22 in the PL310 Auxiliary Control register (shared
attribute override enable) has the side effect of transforming Normal
Shared Non-cacheable reads into Cacheable no-allocate reads.

Coherent DMA buffers in Linux always have a Cacheable alias via the
kernel linear mapping and the processor can speculatively load cache
lines into the PL310 controller. With bit 22 cleared, Non-cacheable
reads would unexpectedly hit such cache lines leading to buffer
corruption.

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/include/asm/hardware/cache-l2x0.h |    6 ++++++
 arch/arm/mach-zynq/common.c                |   20 ++++++++++++++------
 2 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/arch/arm/include/asm/hardware/cache-l2x0.h b/arch/arm/include/asm/hardware/cache-l2x0.h
index 3b2c40b..fd35de7 100644
--- a/arch/arm/include/asm/hardware/cache-l2x0.h
+++ b/arch/arm/include/asm/hardware/cache-l2x0.h
@@ -89,12 +89,18 @@
 #define L2X0_AUX_CTRL_ASSOCIATIVITY_SHIFT	16
 #define L2X0_AUX_CTRL_WAY_SIZE_SHIFT		17
 #define L2X0_AUX_CTRL_WAY_SIZE_MASK		(0x7 << 17)
+#define L2X0_AUX_CTRL_WAY_SIZE64K_MASK		(0x3 << 17)
 #define L2X0_AUX_CTRL_SHARE_OVERRIDE_SHIFT	22
+#define L2X0_AUX_CTRL_SHARE_OVERRIDE_EN_MASK	BIT(22)
+#define L2X0_AUX_CTRL_REPLACE_POLICY_RR_MASK	BIT(25)
 #define L2X0_AUX_CTRL_NS_LOCKDOWN_SHIFT		26
 #define L2X0_AUX_CTRL_NS_INT_CTRL_SHIFT		27
 #define L2X0_AUX_CTRL_DATA_PREFETCH_SHIFT	28
+#define L2X0_AUX_CTRL_DATA_PREFETCH_EN_MASK	BIT(28)
 #define L2X0_AUX_CTRL_INSTR_PREFETCH_SHIFT	29
+#define L2X0_AUX_CTRL_INSTR_PREFETCH_EN_MASK	BIT(29)
 #define L2X0_AUX_CTRL_EARLY_BRESP_SHIFT		30
+#define L2X0_AUX_CTRL_EARLY_BRESP_EN_MASK	BIT(30)
 
 #define L2X0_LATENCY_CTRL_SETUP_SHIFT	0
 #define L2X0_LATENCY_CTRL_RD_SHIFT	4
diff --git a/arch/arm/mach-zynq/common.c b/arch/arm/mach-zynq/common.c
index f9cce5a..4f42b57 100644
--- a/arch/arm/mach-zynq/common.c
+++ b/arch/arm/mach-zynq/common.c
@@ -68,13 +68,21 @@ static struct platform_device zynq_cpuidle_device = {
 #ifdef CONFIG_CACHE_L2X0
 static int __init zynq_l2c_init(void)
 {
-	/* 64KB way size, 8-way associativity, parity disabled,
-	 * prefetching option */
-#ifndef	CONFIG_XILINX_L2_PREFETCH
-	return l2x0_of_init(0x02060000, 0xF0F0FFFF);
-#else
-	return l2x0_of_init(0x72060000, 0xF0F0FFFF);
+	u32 auxctrl;
+
+	/*
+	 * 64KB way size, 8-way associativity, parity disabled,
+	 * prefetching option, shared attribute override enable
+	 */
+	auxctrl = L2X0_AUX_CTRL_SHARE_OVERRIDE_EN_MASK |
+			L2X0_AUX_CTRL_WAY_SIZE64K_MASK |
+			L2X0_AUX_CTRL_REPLACE_POLICY_RR_MASK;
+#ifdef CONFIG_XILINX_L2_PREFETCH
+	auxctrl |= L2X0_AUX_CTRL_EARLY_BRESP_EN_MASK |
+			L2X0_AUX_CTRL_INSTR_PREFETCH_EN_MASK |
+			L2X0_AUX_CTRL_DATA_PREFETCH_EN_MASK;
 #endif
+	return l2x0_of_init(auxctrl, 0xF0F0FFFF);
 }
 early_initcall(zynq_l2c_init);
 #endif
-- 
1.7.5.4

