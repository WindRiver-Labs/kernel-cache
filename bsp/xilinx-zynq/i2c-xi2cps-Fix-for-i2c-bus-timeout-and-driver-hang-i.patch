From 32448350ea4a11f05af5a978036f681576d918e1 Mon Sep 17 00:00:00 2001
From: Zhixiong Chi <Zhixiong.Chi@windriver.com>
Date: Wed, 22 Jun 2016 17:44:12 +0800
Subject: [PATCH 2/3] i2c: xi2cps: Fix for i2c bus timeout and driver hang
 issue

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit f0766942f32b554913d74e6bcc7a4244e341520b

This patch addresses the following issue

- Fix the i2c driver hang issue during i2c bus timeout and recover
  from error conditions.

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhixiong Chi <Zhixiong.Chi@windriver.com>
---
 drivers/i2c/busses/i2c-xilinx_ps.c |   34 ++++++++++++++++++++++++++++++++++
 1 files changed, 34 insertions(+), 0 deletions(-)

diff --git a/drivers/i2c/busses/i2c-xilinx_ps.c b/drivers/i2c/busses/i2c-xilinx_ps.c
index d388d53..ef36508 100644
--- a/drivers/i2c/busses/i2c-xilinx_ps.c
+++ b/drivers/i2c/busses/i2c-xilinx_ps.c
@@ -402,6 +402,37 @@ static void xi2cps_msend(struct xi2cps *id)
 }
 
 /**
+ * xi2cps_master_reset - Reset the interface
+ * @adap:	pointer to the i2c adapter driver instance
+ *
+ * Returns none
+ *
+ * This function cleanup the fifos, clear the hold bit and status
+ * and disable the interrupts.
+ */
+static void xi2cps_master_reset(struct i2c_adapter *adap)
+{
+	struct xi2cps *id = adap->algo_data;
+	u32 regval;
+
+	/* Disable the interrupts */
+	xi2cps_writereg(XI2CPS_IXR_ALL_INTR_MASK, XI2CPS_IDR_OFFSET);
+	/* Clear the hold bit and fifos */
+	regval = xi2cps_readreg(XI2CPS_CR_OFFSET);
+	regval &= ~XI2CPS_CR_HOLD_BUS_MASK;
+	regval |= XI2CPS_CR_CLR_FIFO_MASK;
+	xi2cps_writereg(regval, XI2CPS_CR_OFFSET);
+	/* Update the transfercount register to zero */
+	xi2cps_writereg(0x0, XI2CPS_XFER_SIZE_OFFSET);
+	/* Clear the interupt status register */
+	regval = xi2cps_readreg(XI2CPS_ISR_OFFSET);
+	xi2cps_writereg(regval, XI2CPS_ISR_OFFSET);
+	/* Clear the status register */
+	regval =  xi2cps_readreg(XI2CPS_SR_OFFSET);
+	xi2cps_writereg(regval, XI2CPS_SR_OFFSET);
+}
+
+/**
  * xi2cps_master_xfer - The main i2c transfer function
  * @adap:	pointer to the i2c adapter driver instance
  * @msgs:	pointer to the i2c message structure
@@ -427,6 +458,7 @@ static int xi2cps_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 		if (time_after(jiffies, timeout)) {
 			dev_warn(id->adap.dev.parent,
 					"timedout waiting for bus ready\n");
+			xi2cps_master_reset(adap);
 			return -ETIMEDOUT;
 		}
 		schedule_timeout(1);
@@ -500,6 +532,7 @@ retry:
 		if (ret == 0) {
 			dev_err(id->adap.dev.parent,
 				 "timeout waiting on completion\n");
+			xi2cps_master_reset(adap);
 			return -ETIMEDOUT;
 		}
 		xi2cps_writereg(XI2CPS_IXR_ALL_INTR_MASK, XI2CPS_IDR_OFFSET);
@@ -519,6 +552,7 @@ retry:
 		}
 		/* Report the other error interrupts to application as EIO */
 		if (id->err_status & 0x000000E4) {
+			xi2cps_master_reset(adap);
 			num = -EIO;
 			break;
 		}
-- 
1.7.5.4

