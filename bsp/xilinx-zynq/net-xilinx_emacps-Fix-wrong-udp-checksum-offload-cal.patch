From 35064f4b066b0bf2a35b3f77198abf0f79a43f5d Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Date: Thu, 17 Oct 2013 09:57:07 +0530
Subject: [PATCH 2/7] net: xilinx_emacps: Fix wrong udp checksum offload calculation

The patch based on commit:
https://github.com/Xilinx/linux-xlnx/commit/af2c4ebb7ac56cc5a55cbe55db05470d6e91cbe2

When the UDP checksum is offloaded, if the usb header checksum field is
non zero then the udp checksum calculated by the hw is wrong. So, the
driver should ensure that the checksum field should be zero.

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 038a8b7..8b1a450 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1985,6 +1985,26 @@ static int xemacps_set_mac_address(struct net_device *ndev, void *addr)
 }
 
 /**
+ * xemacps_clear_csum - Clear the csum field for  transport protocols
+ * @skb: socket buffer
+ * @ndev: network interface device structure
+ * return 0 on success, other value if error
+ **/
+static int xemacps_clear_csum(struct sk_buff *skb, struct net_device *ndev)
+{
+	/* Only run for packets requiring a checksum. */
+	if (skb->ip_summed != CHECKSUM_PARTIAL)
+		return 0;
+
+	if (unlikely(skb_cow_head(skb, 0)))
+		return -1;
+
+	*(__sum16 *)(skb->head + skb->csum_start + skb->csum_offset) = 0;
+
+	return 0;
+}
+
+/**
  * xemacps_start_xmit - transmit a packet (called by kernel)
  * @skb: socket buffer
  * @ndev: network interface device structure
@@ -2012,6 +2032,12 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 		return NETDEV_TX_BUSY;
 	}
 
+	if(xemacps_clear_csum(skb,ndev)) {
+		spin_unlock_bh(&lp->tx_lock);
+		kfree(skb);
+		return NETDEV_TX_OK;
+	}
+
 	bd_tail = lp->tx_bd_tail;
 	cur_p = &lp->tx_bd[bd_tail];
 	lp->tx_bd_freecnt -= nr_frags;
-- 
1.7.0

