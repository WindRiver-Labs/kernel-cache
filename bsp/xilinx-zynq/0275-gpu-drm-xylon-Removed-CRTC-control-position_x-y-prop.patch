From 0b2a691b8f68bf313fcc6e23775073a0b77bb3a7 Mon Sep 17 00:00:00 2001
From: Davor Joja <davorjoja@logicbricks.com>
Date: Wed, 10 Dec 2014 09:37:13 +0100
Subject: [PATCH 275/290] gpu: drm: xylon: Removed CRTC control, position_x,y
 properties

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Removed CRTC control, position_x,y properties.
Universal plane functionality exports CRTC primary plane in the same way as
overlay plane to userspace application, and this gives ability to control
primary plane enabling and position through standard DRM API.

Signed-off-by: Davor Joja <davorjoja@logicbricks.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Tested-by: Radhey Shyam Pandey <radheys@xilinx.com>
Tested-by: Christian Kohn <christian.kohn@xilinx.com>
(cherry picked from commit 89cccd3ed63454cef46277de7ecc6c32858f3a63)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/xylon/xylon_crtc.c  | 67 -------------------------------------
 drivers/gpu/drm/xylon/xylon_plane.c | 20 +----------
 2 files changed, 1 insertion(+), 86 deletions(-)

diff --git a/drivers/gpu/drm/xylon/xylon_crtc.c b/drivers/gpu/drm/xylon/xylon_crtc.c
index 3bd5106..5a58324 100644
--- a/drivers/gpu/drm/xylon/xylon_crtc.c
+++ b/drivers/gpu/drm/xylon/xylon_crtc.c
@@ -40,13 +40,10 @@ struct xylon_drm_crtc_properties {
 	struct drm_property *layer_update;
 	struct drm_property *pixel_data_polarity;
 	struct drm_property *pixel_data_trigger;
-	struct drm_property *control;
 	struct drm_property *color_transparency;
 	struct drm_property *interlace;
 	struct drm_property *transparency;
 	struct drm_property *transparent_color;
-	struct drm_property *position_x;
-	struct drm_property *position_y;
 };
 
 struct xylon_drm_crtc {
@@ -81,7 +78,6 @@ static int xylon_drm_crtc_clk_set(struct xylon_drm_crtc *crtc)
 
 static void xylon_drm_crtc_dpms(struct drm_crtc *base_crtc, int dpms)
 {
-	struct drm_mode_object *obj = &base_crtc->base;
 	struct xylon_drm_crtc *crtc = to_xylon_crtc(base_crtc);
 
 	if (crtc->dpms == dpms)
@@ -93,11 +89,9 @@ static void xylon_drm_crtc_dpms(struct drm_crtc *base_crtc, int dpms)
 	case DRM_MODE_DPMS_ON:
 	case DRM_MODE_DPMS_STANDBY:
 		xylon_drm_plane_dpms(base_crtc->primary, dpms);
-		drm_object_property_set_value(obj, crtc->properties.control, 1);
 		break;
 	default:
 		xylon_cvc_disable(crtc->cvc);
-		drm_object_property_set_value(obj, crtc->properties.control, 0);
 		break;
 	}
 }
@@ -118,39 +112,6 @@ static void xylon_drm_crtc_commit(struct drm_crtc *base_crtc)
 	xylon_cvc_enable(crtc->cvc, &crtc->vmode);
 
 	xylon_drm_crtc_dpms(base_crtc, DRM_MODE_DPMS_ON);
-
-	if (xylon_cvc_get_info(crtc->cvc, LOGICVC_INFO_SIZE_POSITION, 0)) {
-		struct xylon_drm_crtc_properties *p = &crtc->properties;
-
-		if (p->position_x) {
-			drm_object_property_set_value(&base_crtc->base,
-						      p->position_x,
-						      0);
-			p->position_x->values[1] = crtc->vmode.hactive;
-		} else {
-			xylon_drm_property_create_range(base_crtc->dev,
-							&base_crtc->base,
-							&p->position_x,
-							"position_x",
-							0,
-							crtc->vmode.hactive,
-							0);
-		}
-		if (p->position_y) {
-			drm_object_property_set_value(&base_crtc->base,
-						      p->position_y,
-						      0);
-			p->position_y->values[1] = crtc->vmode.vactive;
-		} else {
-			xylon_drm_property_create_range(base_crtc->dev,
-							&base_crtc->base,
-							&p->position_y,
-							"position_y",
-							0,
-							crtc->vmode.vactive,
-							0);
-		}
-	}
 }
 
 static bool xylon_drm_crtc_mode_fixup(struct drm_crtc *base_crtc,
@@ -314,8 +275,6 @@ static int xylon_drm_crtc_set_property(struct drm_crtc *base_crtc,
 				       struct drm_property *property,
 				       u64 value)
 {
-	struct drm_device *dev;
-	struct drm_mode_object *obj;
 	struct xylon_drm_crtc *crtc = to_xylon_crtc(base_crtc);
 	struct xylon_drm_crtc_properties *props = &crtc->properties;
 	struct xylon_drm_plane_op op;
@@ -335,11 +294,6 @@ static int xylon_drm_crtc_set_property(struct drm_crtc *base_crtc,
 	} else if (property == props->pixel_data_trigger) {
 		xylon_cvc_ctrl(crtc->cvc, LOGICVC_PIXEL_DATA_TRIGGER_INVERT,
 			       (bool)val);
-	} else if (property == props->control) {
-		if (val)
-			xylon_drm_crtc_dpms(base_crtc, DRM_MODE_DPMS_ON);
-		else
-			xylon_drm_crtc_dpms(base_crtc, DRM_MODE_DPMS_OFF);
 	} else if (property == props->color_transparency) {
 		op.id = XYLON_DRM_PLANE_OP_ID_COLOR_TRANSPARENCY;
 		op.param = (bool)val;
@@ -352,20 +306,6 @@ static int xylon_drm_crtc_set_property(struct drm_crtc *base_crtc,
 	} else if (property == props->transparent_color) {
 		op.id = XYLON_DRM_PLANE_OP_ID_TRANSPARENT_COLOR;
 		op.param = val;
-	} else if (property == props->position_x) {
-		dev = base_crtc->dev;
-		obj = &base_crtc->base;
-
-		x = val;
-		drm_object_property_get_value(obj, props->position_y,
-					      (u64 *)&y);
-	} else if (property == props->position_y) {
-		dev = base_crtc->dev;
-		obj = &base_crtc->base;
-
-		drm_object_property_get_value(obj, props->position_x,
-					      (u64 *)&x);
-		y = val;
 	} else {
 		return -EINVAL;
 	}
@@ -543,13 +483,6 @@ static int xylon_drm_crtc_create_properties(struct drm_crtc *base_crtc)
 					   "pixel_data_trigger",
 					   size))
 		return -EINVAL;
-	size = xylon_drm_property_size(property_control);
-	if (xylon_drm_property_create_list(dev, obj,
-					   &props->control,
-					   property_control,
-					   "control",
-					   size))
-		return -EINVAL;
 	size = xylon_drm_property_size(property_color_transparency);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->color_transparency,
diff --git a/drivers/gpu/drm/xylon/xylon_plane.c b/drivers/gpu/drm/xylon/xylon_plane.c
index a94dec6..d153100 100644
--- a/drivers/gpu/drm/xylon/xylon_plane.c
+++ b/drivers/gpu/drm/xylon/xylon_plane.c
@@ -32,7 +32,6 @@
 #include "xylon_property.h"
 
 struct xylon_drm_plane_properties {
-	struct drm_property *control;
 	struct drm_property *color_transparency;
 	struct drm_property *interlace;
 	struct drm_property *transparency;
@@ -73,20 +72,15 @@ xylon_drm_plane_set_parameters(struct xylon_drm_plane *plane,
 
 void xylon_drm_plane_dpms(struct drm_plane *base_plane, int dpms)
 {
-	struct drm_mode_object *obj = &base_plane->base;
 	struct xylon_drm_plane *plane = to_xylon_plane(base_plane);
 	struct xylon_drm_plane_manager *manager = plane->manager;
 
 	switch (dpms) {
 	case DRM_MODE_DPMS_ON:
 		xylon_cvc_layer_enable(manager->cvc, plane->id);
-		drm_object_property_set_value(obj, plane->properties.control,
-					      1);
 		break;
 	default:
 		xylon_cvc_layer_disable(manager->cvc, plane->id);
-		drm_object_property_set_value(obj, plane->properties.control,
-					      0);
 		break;
 	}
 }
@@ -203,12 +197,7 @@ static int xylon_drm_plane_set_property(struct drm_plane *base_plane,
 	struct xylon_drm_plane_op op;
 	unsigned int val = (unsigned int)value;
 
-	if (property == props->control) {
-		if (val)
-			xylon_drm_plane_dpms(base_plane, DRM_MODE_DPMS_ON);
-		else
-			xylon_drm_plane_dpms(base_plane, DRM_MODE_DPMS_OFF);
-	} else if (property == props->color_transparency) {
+	if (property == props->color_transparency) {
 		op.id = XYLON_DRM_PLANE_OP_ID_COLOR_TRANSPARENCY,
 		op.param = (bool)val;
 	} else if (property == props->interlace) {
@@ -247,13 +236,6 @@ static int xylon_drm_plane_create_properties(struct drm_plane *base_plane)
 					     LOGICVC_INFO_LAST_LAYER,
 					     plane->id);
 
-	size = xylon_drm_property_size(property_control);
-	if (xylon_drm_property_create_list(dev, obj,
-					   &props->control,
-					   property_control,
-					   "control",
-					   size))
-		return -EINVAL;
 	size = xylon_drm_property_size(property_color_transparency);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->color_transparency,
-- 
2.0.2

