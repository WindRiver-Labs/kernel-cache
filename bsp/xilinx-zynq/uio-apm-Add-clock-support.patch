From 8b107014ce52e1b833c84305dbef9d3b4180daed Mon Sep 17 00:00:00 2001
From: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Date: Wed, 13 Jul 2016 16:46:07 +0530
Subject: [PATCH 723/793] uio: apm: Add clock support

Adding clock support to the APM module.

Signed-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/uio/uio_xilinx_apm.c |   26 +++++++++++++++++++++++---
 1 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/drivers/uio/uio_xilinx_apm.c b/drivers/uio/uio_xilinx_apm.c
index 3eb11f5..5d5d1fe 100644
--- a/drivers/uio/uio_xilinx_apm.c
+++ b/drivers/uio/uio_xilinx_apm.c
@@ -23,6 +23,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
+#include <linux/clk.h>
 #include <linux/io.h>
 #include <linux/module.h>
 #include <linux/of.h>
@@ -51,6 +52,7 @@
  * @globalcntwidth: Global Clock counter width
  * @scalefactor: Scaling factor
  * @isr: Interrupts info shared to userspace
+ * @clk: Clock handle
  */
 struct xapm_param {
 	u32 mode;
@@ -64,6 +66,7 @@ struct xapm_param {
 	u32 globalcntwidth;
 	u32 scalefactor;
 	u32 isr;
+	struct clk *clk;
 };
 
 /**
@@ -215,13 +218,24 @@ static int xapm_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
+	xapm->param.clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(xapm->param.clk)) {
+			dev_err(&pdev->dev, "axi clock error\n");
+			return PTR_ERR(xapm->param.clk);
+	}
+
+	ret = clk_prepare_enable(xapm->param.clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable to enable clock.\n");
+		return ret;
+	}
 	/* Initialize mode as Advanced so that if no mode in dts, default
 	 * is Advanced
 	 */
 	xapm->param.mode = XAPM_MODE_ADVANCED;
 	ret = xapm_getprop(pdev, &xapm->param);
 	if (ret < 0)
-		return ret;
+		goto err_clk_dis;
 
 	xapm->info.mem[0].name = "xilinx_apm";
 	xapm->info.mem[0].addr = res->start;
@@ -240,7 +254,8 @@ static int xapm_probe(struct platform_device *pdev)
 	irq = platform_get_irq(pdev, 0);
 	if (irq < 0) {
 		dev_err(&pdev->dev, "unable to get irq\n");
-		return irq;
+		ret = irq;
+		goto err_clk_dis;
 	}
 
 	xapm->info.irq = irq;
@@ -252,7 +267,7 @@ static int xapm_probe(struct platform_device *pdev)
 	ret = uio_register_device(&pdev->dev, &xapm->info);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "unable to register to UIO\n");
-		return ret;
+		goto err_clk_dis;
 	}
 
 	platform_set_drvdata(pdev, xapm);
@@ -260,6 +275,10 @@ static int xapm_probe(struct platform_device *pdev)
 	dev_info(&pdev->dev, "Probed Xilinx APM\n");
 
 	return 0;
+
+err_clk_dis:
+	clk_disable_unprepare(&xapm->param.clk);
+	return ret;
 }
 
 /**
@@ -273,6 +292,7 @@ static int xapm_remove(struct platform_device *pdev)
 	struct xapm_dev *xapm = platform_get_drvdata(pdev);
 
 	uio_unregister_device(&xapm->info);
+	clk_disable_unprepare(&xapm->param.clk);
 
 	return 0;
 }
-- 
1.7.5.4

