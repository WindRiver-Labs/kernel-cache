From ec274882702e84f109dbcfaaaaf332c4855042ab Mon Sep 17 00:00:00 2001
From: Kedareswara rao Appana <appana.durga.rao@xilinx.com>
Date: Wed, 1 Jun 2016 18:12:17 +0530
Subject: [PATCH 718/793] irqchip: irq-xilinx-intc: Fix race condition in the
 irq flow handlers

This commit bd0b9ac405e1 ("genirq: Remove irq argument from irq flow handlers")
Modified the number of arguments of the irq flow handlers.

With the current driver we are seeing a kernel crash
because of the above commit.

Crash log:
Unable to handle kernel NULL pointer dereference at virtual address 0000002c
pgd = c0004000
[0000002c] *pgd=00000000
Internal error: Oops - BUG: 17 [#1] PREEMPT SMP ARM
Modules linked in: axi_timer
CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.4.0-xilinx #5
Hardware name: Xilinx Zynq Platform
task: c0923870 ti: c091e000 task.ti: c091e000
PC is at intc_handler+0x18/0x8c
LR is at 0x1
pc : [<c01e91cc>]    lr : [<00000001>]    psr: 60010193
sp : c091fee0  ip : 00000002  fp : 00000001
r10: 00000000  r9 : 00000008  r8 : 00000001
r7 : ef002600  r6 : c091a464  r5 : 00000010  r4 : 00000000
r3 : 00000000  r2 : 00000000  r1 : ef003c40  r0 : 00000000
Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment none
Control: 18c5387d  Table: 2f16c04a  DAC: 00000051
Process swapper/0 (pid: 0, stack limit = 0xc091e210)
Stack: (0xc091fee0 to 0xc0920000)
fee0: 00000000 00000000 c091a464 ef002600 00000001 c00576ec 00000000 c00579a8
ff00: f8f00100 c0920f7c c091ff30 c092ec00 f8f01100 c00093ac c0383918 60010013
ff20: ffffffff c091ff64 638ff226 c0013014 00000000 00000008 c091d000 ef7d7000
ff40: ef7d6618 00000001 7725eac9 00000008 638ff226 00000008 00000000 00000001
ff60: 00000008 c091ff80 c03838f4 c0383918 60010013 ffffffff 00000051 c03838e8
ff80: 3b993807 00000000 7725eac9 00000008 c091e000 ef7d6618 c091e000 c094d0e0
ffa0: c0919364 c091ffb8 c06aba30 00000000 00000000 c0050538 c0920400 c067ebdc
ffc0: ffffffff ffffffff 00000000 c067e66c 00000000 c06aba30 00000000 c0954b94
ffe0: c0920480 c06aba2c c0924984 0000406a 413fc090 0000807c 00000000 00000000
[<c01e91cc>] (intc_handler) from [<c00576ec>] (generic_handle_irq+0x18/0x28)
[<c00576ec>] (generic_handle_irq) from [<c00579a8>] (__handle_domain_irq+0x88/0xb0)
[<c00579a8>] (__handle_domain_irq) from [<c00093ac>] (gic_handle_irq+0x50/0x90)
[<c00093ac>] (gic_handle_irq) from [<c0013014>] (__irq_svc+0x54/0x90)
Exception stack(0xc091ff30 to 0xc091ff78)
ff20:                                     00000000 00000008 c091d000 ef7d7000
ff40: ef7d6618 00000001 7725eac9 00000008 638ff226 00000008 00000000 00000001
ff60: 00000008 c091ff80 c03838f4 c0383918 60010013 ffffffff
[<c0013014>] (__irq_svc) from [<c0383918>] (cpuidle_enter_state+0xe8/0x1bc)
[<c0383918>] (cpuidle_enter_state) from [<c0050538>] (cpu_startup_entry+0x19c/0x1ec)
[<c0050538>] (cpu_startup_entry) from [<c067ebdc>] (start_kernel+0x328/0x388)
Code: ebf9c52b e3500000 15904010 01a04000 (e595301c)
---[ end trace 1b82d42394b8ee22 ]---
Kernel panic - not syncing: Fatal exception in interrupt
CPU1: stopping
CPU: 1 PID: 0 Comm: swapper/1 Tainted: G      D         4.4.0-xilinx #5
Hardware name: Xilinx Zynq Platform
[<c00163b8>] (unwind_backtrace) from [<c0012620>] (show_stack+0x10/0x14)
[<c0012620>] (show_stack) from [<c01c824c>] (dump_stack+0x80/0xcc)
[<c01c824c>] (dump_stack) from [<c0014c2c>] (ipi_cpu_stop+0x3c/0x6c)
[<c0014c2c>] (ipi_cpu_stop) from [<c0015344>] (handle_IPI+0x64/0x84)
[<c0015344>] (handle_IPI) from [<c00093d0>] (gic_handle_irq+0x74/0x90)
[<c00093d0>] (gic_handle_irq) from [<c0013014>] (__irq_svc+0x54/0x90)
Exception stack(0xef06bf68 to 0xef06bfb0)
bf60:                   00000000 00000008 c091d000 ef7e3000 ef7e2618 00000001
bf80: 845530d3 00000008 668ca7c3 00000008 00000000 00000001 00000008 ef06bfb8
bfa0: c03838f4 c0383918 600d0013 ffffffff
[<c0013014>] (__irq_svc) from [<c0383918>] (cpuidle_enter_state+0xe8/0x1bc)
[<c0383918>] (cpuidle_enter_state) from [<c0050538>] (cpu_startup_entry+0x19c/0x1ec)
[<c0050538>] (cpu_startup_entry) from [<0000948c>] (0x948c)
---[ end Kernel panic - not syncing: Fatal exception in interrupt

This patch fixes this issue in the driver
--> By updating the number of arguments in the flow handler to one.
--> Use irq_desc_get_chip instead of irq_get_chip

Signed-off-by: Kedareswara rao Appana <appanad@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/irqchip/irq-xilinx-intc.c |    7 ++++---
 1 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/drivers/irqchip/irq-xilinx-intc.c b/drivers/irqchip/irq-xilinx-intc.c
index 56ab5c4..0daa678 100644
--- a/drivers/irqchip/irq-xilinx-intc.c
+++ b/drivers/irqchip/irq-xilinx-intc.c
@@ -123,7 +123,7 @@ static struct irq_chip intc_dev = {
 
 static unsigned int get_irq(struct intc *local_intc)
 {
-	unsigned int hwirq, irq = -1;
+	int hwirq, irq = -1;
 
 	hwirq = local_intc->read_fn(local_intc->baseaddr + IVR);
 	if (hwirq != -1U)
@@ -157,11 +157,12 @@ static const struct irq_domain_ops xintc_irq_domain_ops = {
 	.map = xintc_map,
 };
 
-static void intc_handler(u32 irq, struct irq_desc *desc)
+static void intc_handler(struct irq_desc *desc)
 {
-	struct irq_chip *chip = irq_get_chip(irq);
+	struct irq_chip *chip = irq_desc_get_chip(desc);
 	struct intc *local_intc =
 		irq_data_get_irq_handler_data(&desc->irq_data);
+	int irq;
 
 	pr_debug("intc_handler: input irq = %d\n", desc->irq_data.irq);
 	chained_irq_enter(chip, desc);
-- 
1.7.5.4

