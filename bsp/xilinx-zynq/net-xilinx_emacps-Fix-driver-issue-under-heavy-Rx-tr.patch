From e51cd565c19a0386cc494539a425d2868ba8296b Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Tue, 27 Nov 2012 16:02:18 +0530
Subject: [PATCH 062/793] net: xilinx_emacps: Fix driver issue under heavy Rx
 traffic

The existing driver misbehaves when subjected to heavy traffic
on the Rx path. Under heavy traffic (with a inter packet gap
in the range of 2-5 microseconds) the Rx path of the driver
becomes unresponsive. Under such heavy traffic load it is
natural for the driver to get overwhelmed on Rx path and drop
some packets (as per IEEE specs it is OK), but it should never
become completely unresponsive after the heavy Rx traffic is
taken off. The issue with the existing driver is, under heavy
Rx load, it starts getting lots of error interrupts (buffer not
available) and it does not process them properly. As a result,
at some point the driver consumes all BDs for Rx and does not
free any ensuring a complete lock up.
This patch fixes it by ensuring that even for error cases there
is a constant effort to free up any available BDs.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   38 ++++++++++++--------------
 1 files changed, 18 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 355aa20..642fe18 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1581,36 +1581,34 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 {
 	struct net_local *lp = container_of(napi, struct net_local, napi);
 	int work_done = 0;
+	int temp_work_done;
 	u32 regval;
 
 	regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
 	xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
 
 	while (work_done < budget) {
-
-		dev_dbg(&lp->pdev->dev, "poll RX status 0x%x weight 0x%x\n",
-			regval, budget);
-
-		if (!(regval & XEMACPS_RXSR_FRAMERX_MASK)) {
-			dev_dbg(&lp->pdev->dev, "No RX complete status 0x%x\n",
-				regval);
-			napi_complete(napi);
-
-			/* We disable RX interrupts in interrupt service
-			 * routine, now it is time to enable it back.
-			 */
-			regval = (XEMACPS_IXR_FRAMERX_MASK |
-					 XEMACPS_IXR_RX_ERR_MASK);
-			xemacps_write(lp->baseaddr, XEMACPS_IER_OFFSET, regval);
-			break;
-		}
-
-		work_done += xemacps_rx(lp, budget - work_done);
-
+		if (regval & XEMACPS_RXSR_ERROR_MASK)
+			lp->stats.rx_errors++;
+		temp_work_done = xemacps_rx(lp, budget - work_done);
+		work_done += temp_work_done;
 		regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
 		xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
+		if (temp_work_done <= 0)
+			break;
 	}
 
+	if (work_done >= budget)
+		return work_done;
+
+	napi_complete(napi);
+	/* We disabled TX/RX interrupts in interrupt service
+	 * routine, now it is time to enable it back.
+	 */
+	xemacps_write(lp->baseaddr, XEMACPS_IER_OFFSET,
+					(XEMACPS_IXR_FRAMERX_MASK |
+					XEMACPS_IXR_RX_ERR_MASK));
+
 	return work_done;
 }
 
-- 
1.7.5.4

