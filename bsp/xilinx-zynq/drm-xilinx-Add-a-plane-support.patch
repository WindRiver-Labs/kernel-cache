From e3de58b0e7e42849fdd31160f92a4d04a6f5012d Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyunk@xilinx.com>
Date: Thu, 19 Sep 2013 19:36:12 -0700
Subject: [PATCH 144/793] drm: xilinx: Add a plane support

This patch adds a plane support of Xilinx DRM KMS driver.
This enables the multi-plane rendering support of the hardware pipeline.
To enable multi-plane support, the hardware composer such as OSD should be
configured properly in the hardware pipeline, and additional dma IPs may
be needed. Otherwise, only the single plane is available,
and a single plane is not exposed to user.

For current implementation, this patch depends on VDMA through dmaengine API,
and an osd sub-driver(xilinx_osd.c/h).

Signed-off-by: Hyun Kwon <hyunk@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_plane.c |  554 +++++++++++++++++++++++++++++
 drivers/gpu/drm/xilinx/xilinx_drm_plane.h |   52 +++
 2 files changed, 606 insertions(+), 0 deletions(-)
 create mode 100644 drivers/gpu/drm/xilinx/xilinx_drm_plane.c
 create mode 100644 drivers/gpu/drm/xilinx/xilinx_drm_plane.h

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
new file mode 100644
index 0000000..e9b1025
--- /dev/null
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
@@ -0,0 +1,554 @@
+/*
+ * Xilinx DRM plane driver for Xilinx
+ *
+ *  Copyright (C) 2013 Xilinx, Inc.
+ *
+ *  Author: Hyun Woo Kwon <hyunk@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <drm/drmP.h>
+#include <drm/drm_crtc.h>
+#include <drm/drm_fb_cma_helper.h>
+#include <drm/drm_gem_cma_helper.h>
+
+#include <linux/amba/xilinx_dma.h>
+#include <linux/device.h>
+#include <linux/dmaengine.h>
+#include <linux/platform_device.h>
+
+#include "xilinx_drm_drv.h"
+
+#include "xilinx_osd.h"
+
+/**
+ * struct xilinx_drm_plane_vdma: Xilinx drm plane VDMA object
+ *
+ * @chan: dma channel
+ * @dma_config: vdma config
+ */
+struct xilinx_drm_plane_vdma {
+	struct dma_chan *chan;
+	struct xilinx_vdma_config dma_config;
+};
+
+/**
+ * struct xilinx_drm_plane: Xilinx drm plane object
+ *
+ * @base: base drm plane object
+ * @id: plane id
+ * @dpms: current dpms level
+ * @priv: flag for private plane
+ * @x: x position
+ * @y: y position
+ * @paddr: physical address of current plane buffer
+ * @bpp: bytes per pixel
+ * @format: pixel format
+ * @vdma: vdma object
+ * @osd_layer: osd layer
+ * @manager: plane manager
+ */
+struct xilinx_drm_plane {
+	struct drm_plane base;
+	int id;
+	int dpms;
+	bool priv;
+	uint32_t x;
+	uint32_t y;
+	dma_addr_t paddr;
+	int bpp;
+	uint32_t format;
+	struct xilinx_drm_plane_vdma vdma;
+	struct xilinx_osd_layer *osd_layer;
+	struct xilinx_drm_plane_manager *manager;
+};
+
+#define MAX_PLANES 8
+
+/**
+ * struct xilinx_drm_plane_manager: Xilinx drm plane manager object
+ *
+ * @drm: drm device
+ * @osd: osd instance
+ * @num_planes: number of available planes
+ * @format: video format
+ * @max_width: maximum width
+ * @planes: xilinx drm planes
+ */
+struct xilinx_drm_plane_manager {
+	struct drm_device *drm;
+	struct xilinx_osd *osd;
+	int num_planes;
+	uint32_t format;
+	int max_width;
+	struct xilinx_drm_plane *planes[MAX_PLANES];
+};
+
+/* supported plane formats */
+static const uint32_t xilinx_drm_plane_formats[] = {
+	DRM_FORMAT_XRGB8888,
+	DRM_FORMAT_YUYV,
+};
+
+#define to_xilinx_plane(x)	container_of(x, struct xilinx_drm_plane, base)
+
+/* set plane dpms */
+void xilinx_drm_plane_dpms(struct drm_plane *base_plane, int dpms)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+	struct xilinx_drm_plane_manager *manager = plane->manager;
+	struct xilinx_vdma_config dma_config;
+
+	DRM_DEBUG_KMS("plane->id: %d\n", plane->id);
+	DRM_DEBUG_KMS("dpms: %d -> %d\n", plane->dpms, dpms);
+
+	if (plane->dpms == dpms)
+		return;
+
+	plane->dpms = dpms;
+	switch (dpms) {
+	case DRM_MODE_DPMS_ON:
+		/* start vdma engine */
+		dma_async_issue_pending(plane->vdma.chan);
+
+		/* enable osd */
+		if (manager->osd) {
+			xilinx_osd_disable_rue(manager->osd);
+
+			/* set zorder(= id for now) */
+			xilinx_osd_layer_set_priority(plane->osd_layer,
+						      plane->id);
+			/* FIXME: use global alpha for now */
+			xilinx_osd_layer_set_alpha(plane->osd_layer, 1, 0xff);
+			xilinx_osd_layer_enable(plane->osd_layer);
+			if (plane->priv) {
+				/* set background color as black */
+				xilinx_osd_set_color(manager->osd, 0x0, 0x0,
+						     0x0);
+				xilinx_osd_enable(manager->osd);
+			}
+
+			xilinx_osd_enable_rue(manager->osd);
+		}
+
+		break;
+	default:
+		/* disable/reset osd */
+		if (manager->osd) {
+			xilinx_osd_disable_rue(manager->osd);
+
+			xilinx_osd_layer_set_dimension(plane->osd_layer,
+						       0, 0, 0, 0);
+			xilinx_osd_layer_disable(plane->osd_layer);
+			if (plane->priv)
+				xilinx_osd_reset(manager->osd);
+
+			xilinx_osd_enable_rue(manager->osd);
+		}
+
+		/* reset vdma */
+		dma_config.reset = 1;
+		dmaengine_device_control(plane->vdma.chan, DMA_SLAVE_CONFIG,
+					 (unsigned long)&dma_config);
+
+		/* stop vdma engine and release descriptors */
+		dmaengine_terminate_all(plane->vdma.chan);
+		break;
+	}
+}
+
+/* apply mode to plane pipe */
+void xilinx_drm_plane_commit(struct drm_plane *base_plane)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+	struct dma_async_tx_descriptor *desc;
+	uint32_t height = plane->vdma.dma_config.hsize;
+	int pitch = plane->vdma.dma_config.stride;
+	size_t offset;
+
+	DRM_DEBUG_KMS("plane->id: %d\n", plane->id);
+
+	offset = plane->x * plane->bpp + plane->y * pitch;
+	desc = dmaengine_prep_slave_single(plane->vdma.chan,
+					   plane->paddr + offset,
+					   height * pitch, DMA_MEM_TO_DEV, 0);
+	if (!desc) {
+		DRM_ERROR("failed to prepare DMA descriptor\n");
+		return;
+	}
+
+	/* submit vdma desc */
+	dmaengine_submit(desc);
+
+	/* start vdma with new mode */
+	dma_async_issue_pending(plane->vdma.chan);
+}
+
+/* mode set a plane */
+int xilinx_drm_plane_mode_set(struct drm_plane *base_plane,
+			      struct drm_crtc *crtc, struct drm_framebuffer *fb,
+			      int crtc_x, int crtc_y,
+			      unsigned int crtc_w, unsigned int crtc_h,
+			      uint32_t src_x, uint32_t src_y,
+			      uint32_t src_w, uint32_t src_h)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+	struct drm_gem_cma_object *obj;
+
+	DRM_DEBUG_KMS("plane->id: %d\n", plane->id);
+
+	obj = drm_fb_cma_get_gem_obj(fb, 0);
+	if (!obj) {
+		DRM_ERROR("failed to get a gem obj for fb\n");
+		return -EINVAL;
+	}
+
+	plane->x = src_x;
+	plane->y = src_y;
+	plane->bpp = fb->bits_per_pixel / 8;
+	plane->paddr = obj->paddr;
+
+	DRM_DEBUG_KMS("h: %d(%d), v: %d(%d), paddr: %p\n",
+		      src_w, crtc_x, src_h, crtc_y, (void *)obj->paddr);
+	DRM_DEBUG_KMS("bpp: %d\n", plane->bpp);
+
+	/* configure vdma desc */
+	plane->vdma.dma_config.hsize = src_w * plane->bpp;
+	plane->vdma.dma_config.vsize = src_h;
+	plane->vdma.dma_config.stride = fb->pitches[0];
+	plane->vdma.dma_config.park = 1;
+	plane->vdma.dma_config.park_frm = 0;
+
+	dmaengine_device_control(plane->vdma.chan, DMA_SLAVE_CONFIG,
+				 (unsigned long)&plane->vdma.dma_config);
+
+	/* set OSD dimensions */
+	if (plane->manager->osd) {
+		xilinx_osd_disable_rue(plane->manager->osd);
+
+		/* if a plane is private, it's for crtc */
+		if (plane->priv)
+			xilinx_osd_set_dimension(plane->manager->osd,
+						 crtc_w, crtc_h);
+
+		xilinx_osd_layer_set_dimension(plane->osd_layer, crtc_x, crtc_y,
+					       src_w, src_h);
+
+		xilinx_osd_enable_rue(plane->manager->osd);
+	}
+
+	return 0;
+}
+
+/* update a plane. just call mode_set() with bit-shifted values */
+static int xilinx_drm_plane_update(struct drm_plane *base_plane,
+				   struct drm_crtc *crtc,
+				   struct drm_framebuffer *fb,
+				   int crtc_x, int crtc_y,
+				   unsigned int crtc_w, unsigned int crtc_h,
+				   uint32_t src_x, uint32_t src_y,
+				   uint32_t src_w, uint32_t src_h)
+{
+	int ret;
+
+	ret = xilinx_drm_plane_mode_set(base_plane, crtc, fb,
+					crtc_x, crtc_y, crtc_w, crtc_h,
+					src_x >> 16, src_y >> 16,
+					src_w >> 16, src_h >> 16);
+	if (ret) {
+		DRM_ERROR("failed to mode-set a plane\n");
+		return ret;
+	}
+
+	/* make sure a plane is on */
+	xilinx_drm_plane_dpms(base_plane, DRM_MODE_DPMS_ON);
+	/* apply the new fb addr */
+	xilinx_drm_plane_commit(base_plane);
+
+	return 0;
+}
+
+/* disable a plane */
+static int xilinx_drm_plane_disable(struct drm_plane *base_plane)
+{
+	xilinx_drm_plane_dpms(base_plane, DRM_MODE_DPMS_OFF);
+
+	return 0;
+}
+
+/* destroy a plane */
+static void xilinx_drm_plane_destroy(struct drm_plane *base_plane)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+
+	xilinx_drm_plane_dpms(base_plane, DRM_MODE_DPMS_OFF);
+
+	plane->manager->planes[plane->id] = NULL;
+	drm_plane_cleanup(base_plane);
+	dma_release_channel(plane->vdma.chan);
+
+	if (plane->manager->osd) {
+		xilinx_osd_layer_disable(plane->osd_layer);
+		xilinx_osd_layer_put(plane->osd_layer);
+	}
+}
+
+/* set property of a plane */
+static int xilinx_drm_plane_set_property(struct drm_plane *base_plane,
+					 struct drm_property *property,
+					 uint64_t val)
+{
+	/* TODO: set zorder, etc */
+	return -EINVAL;
+}
+
+static struct drm_plane_funcs xilinx_drm_plane_funcs = {
+	.update_plane	= xilinx_drm_plane_update,
+	.disable_plane	= xilinx_drm_plane_disable,
+	.destroy	= xilinx_drm_plane_destroy,
+	.set_property	= xilinx_drm_plane_set_property,
+};
+
+/* get a plane max width */
+int xilinx_drm_plane_get_max_width(struct drm_plane *base_plane)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+
+	return plane->manager->max_width;
+}
+
+/* get a plane format */
+uint32_t xilinx_drm_plane_get_format(struct drm_plane *base_plane)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+
+	return plane->manager->format;
+}
+
+/* create a plane */
+static struct xilinx_drm_plane *
+xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
+			unsigned int possible_crtcs, bool priv)
+{
+	struct xilinx_drm_plane *plane;
+	struct device *dev = manager->drm->dev;
+	char dma_name[16];
+	int i;
+	int ret;
+
+	for (i = 0; i < manager->num_planes; i++)
+		if (!manager->planes[i])
+			break;
+
+	if (i >= manager->num_planes) {
+		DRM_ERROR("failed to allocate plane\n");
+		return ERR_PTR(-ENODEV);
+	}
+
+	plane = devm_kzalloc(dev, sizeof(*plane), GFP_KERNEL);
+	if (!plane)
+		return ERR_PTR(-ENOMEM);
+
+	plane->priv = priv;
+	plane->id = i;
+	plane->dpms = DRM_MODE_DPMS_OFF;
+	DRM_DEBUG_KMS("plane->id: %d\n", plane->id);
+
+	snprintf(dma_name, sizeof(dma_name), "vdma%d", i);
+	plane->vdma.chan = dma_request_slave_channel(dev, dma_name);
+	if (!plane->vdma.chan) {
+		DRM_ERROR("failed to request dma channel\n");
+		return ERR_PTR(-ENODEV);
+	}
+
+	/* create an OSD layer when OSD is available */
+	if (manager->osd) {
+		/* create an osd layer */
+		plane->osd_layer = xilinx_osd_layer_get(manager->osd);
+		if (IS_ERR(plane->osd_layer)) {
+			DRM_ERROR("failed to create a osd layer\n");
+			ret = PTR_ERR(plane->osd_layer);
+			plane->osd_layer = NULL;
+			goto err_osd_layer;
+		}
+	}
+
+	plane->format = manager->format;
+
+	/* initialize drm plane */
+	ret = drm_plane_init(manager->drm, &plane->base, possible_crtcs,
+			     &xilinx_drm_plane_funcs, &plane->format, 1, priv);
+	if (ret) {
+		DRM_ERROR("failed to initialize plane\n");
+		goto err_init;
+	}
+	plane->manager = manager;
+	manager->planes[i] = plane;
+
+	return plane;
+
+err_init:
+	if (manager->osd) {
+		xilinx_osd_layer_disable(plane->osd_layer);
+		xilinx_osd_layer_put(plane->osd_layer);
+	}
+err_osd_layer:
+	dma_release_channel(plane->vdma.chan);
+	return ERR_PTR(ret);
+}
+
+/* create a private plane */
+struct drm_plane *
+xilinx_drm_plane_create_private(struct xilinx_drm_plane_manager *manager,
+				unsigned int possible_crtcs)
+{
+	struct xilinx_drm_plane *plane;
+
+	plane = xilinx_drm_plane_create(manager, possible_crtcs, true);
+	if (IS_ERR(plane)) {
+		DRM_ERROR("failed to allocate a private plane\n");
+		return ERR_CAST(plane);
+	}
+
+	return &plane->base;
+}
+
+void xilinx_drm_plane_destroy_private(struct xilinx_drm_plane_manager *manager,
+				      struct drm_plane *base_plane)
+{
+	xilinx_drm_plane_destroy(base_plane);
+}
+
+/* destroy planes */
+void xilinx_drm_plane_destroy_planes(struct xilinx_drm_plane_manager *manager)
+{
+	struct xilinx_drm_plane *plane;
+	int i;
+
+	for (i = 0; i < manager->num_planes; i++) {
+		plane = manager->planes[i];
+		if (plane && !plane->priv) {
+			xilinx_drm_plane_destroy(&plane->base);
+			manager->planes[i] = NULL;
+		}
+	}
+}
+
+/* create extra planes */
+int xilinx_drm_plane_create_planes(struct xilinx_drm_plane_manager *manager,
+				   unsigned int possible_crtcs)
+{
+	int i;
+	int err_ret;
+
+	/* find if there any available plane, and create if available */
+	for (i = 0; i < manager->num_planes; i++) {
+		if (manager->planes[i])
+			continue;
+		manager->planes[i] = xilinx_drm_plane_create(manager,
+							     possible_crtcs,
+							     false);
+		if (IS_ERR(manager->planes[i])) {
+			DRM_ERROR("failed to allocate a plane\n");
+			err_ret = PTR_ERR(manager->planes[i]);
+			manager->planes[i] = NULL;
+			goto err_out;
+		}
+	}
+
+	return 0;
+
+err_out:
+	xilinx_drm_plane_destroy_planes(manager);
+	return err_ret;
+}
+
+/* initialize a plane manager: num_planes, format, max_width */
+static void
+xilinx_drm_plane_init_manager(struct xilinx_drm_plane_manager *manager)
+{
+	unsigned int format;
+
+	if (manager->osd) {
+		manager->num_planes = xilinx_osd_get_num_layers(manager->osd);
+		manager->max_width = xilinx_osd_get_max_width(manager->osd);
+		format = xilinx_osd_get_format(manager->osd);
+
+		switch (format) {
+		case OSD_VIDEO_FORMAT_YUV422:
+			manager->format = DRM_FORMAT_YUV422;
+			break;
+		case OSD_VIDEO_FORMAT_YUV444:
+			manager->format = DRM_FORMAT_YUV444;
+			break;
+		case OSD_VIDEO_FORMAT_RGB:
+			manager->format = DRM_FORMAT_XRGB8888;
+			break;
+		case OSD_VIDEO_FORMAT_YUV420:
+			manager->format = DRM_FORMAT_YUV420;
+			break;
+		}
+	} else {
+		/* without osd, only one plane is supported */
+		manager->num_planes = 1;
+		/* XRGB based on the current pipeline design without osd */
+		manager->format = DRM_FORMAT_XRGB8888;
+		manager->max_width = 4096;
+	}
+}
+
+struct xilinx_drm_plane_manager *
+xilinx_drm_plane_probe_manager(struct drm_device *drm)
+{
+	struct xilinx_drm_plane_manager *manager;
+	struct device *dev = drm->dev;
+	struct device_node *sub_node;
+
+	manager = devm_kzalloc(dev, sizeof(*manager), GFP_KERNEL);
+	if (!manager)
+		return ERR_PTR(-ENOMEM);
+
+	manager->drm = drm;
+
+	/* probe an OSD. proceed even if there's no OSD */
+	sub_node = of_parse_phandle(dev->of_node, "osd", 0);
+	if (sub_node) {
+		manager->osd = xilinx_osd_probe(dev, sub_node);
+		of_node_put(sub_node);
+		if (IS_ERR(manager->osd)) {
+			DRM_ERROR("failed to probe an osd\n");
+			return ERR_CAST(manager->osd);
+		}
+	}
+
+	xilinx_drm_plane_init_manager(manager);
+
+	return manager;
+}
+
+void xilinx_drm_plane_remove_manager(struct xilinx_drm_plane_manager *manager)
+{
+	int i;
+
+	for (i = 0; i < manager->num_planes; i++) {
+		if (manager->planes[i] && !manager->planes[i]->priv) {
+			xilinx_drm_plane_dpms(&manager->planes[i]->base,
+					      DRM_MODE_DPMS_OFF);
+			xilinx_drm_plane_destroy(&manager->planes[i]->base);
+			manager->planes[i] = NULL;
+		}
+	}
+
+	if (manager->osd) {
+		xilinx_osd_disable(manager->osd);
+		xilinx_osd_remove(manager->osd);
+	}
+}
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_plane.h b/drivers/gpu/drm/xilinx/xilinx_drm_plane.h
new file mode 100644
index 0000000..5966eb6
--- /dev/null
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_plane.h
@@ -0,0 +1,52 @@
+/*
+ * Xilinx DRM plane header for Xilinx
+ *
+ *  Copyright (C) 2013 Xilinx, Inc.
+ *
+ *  Author: Hyun Woo Kwon <hyunk@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _XILINX_DRM_PLANE_H_
+#define _XILINX_DRM_PLANE_H_
+
+struct drm_crtc;
+struct drm_plane;
+
+/* plane operations */
+void xilinx_drm_plane_dpms(struct drm_plane *base_plane, int dpms);
+void xilinx_drm_plane_commit(struct drm_plane *base_plane);
+int xilinx_drm_plane_mode_set(struct drm_plane *base_plane,
+			      struct drm_crtc *crtc, struct drm_framebuffer *fb,
+			      int crtc_x, int crtc_y,
+			      unsigned int crtc_w, unsigned int crtc_h,
+			      uint32_t src_x, uint32_t src_y,
+			      uint32_t src_w, uint32_t src_h);
+int xilinx_drm_plane_get_max_width(struct drm_plane *base_plane);
+int xilinx_drm_plane_get_format(struct drm_plane *base_plane);
+
+/* plane manager operations */
+struct xilinx_drm_plane_manager;
+
+struct drm_plane *
+xilinx_drm_plane_create_private(struct xilinx_drm_plane_manager *manager,
+				unsigned int possible_crtcs);
+void xilinx_drm_plane_destroy_private(struct xilinx_drm_plane_manager *manager,
+				      struct drm_plane *base_plane);
+int xilinx_drm_plane_create_planes(struct xilinx_drm_plane_manager *manager,
+				   unsigned int possible_crtcs);
+void xilinx_drm_plane_destroy_planes(struct xilinx_drm_plane_manager *manager);
+
+struct xilinx_drm_plane_manager *
+xilinx_drm_plane_probe_manager(struct drm_device *drm);
+void xilinx_drm_plane_remove_manager(struct xilinx_drm_plane_manager *manager);
+
+#endif /* _XILINX_DRM_PLANE_H_ */
-- 
1.7.5.4

