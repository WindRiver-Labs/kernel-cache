From 07db2e4ec8c988e3341678c0c4d03e21adfb5159 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Wed, 5 Feb 2014 11:04:07 -0800
Subject: [PATCH 181/509] I2C: zynq: Fix clock notifier documentation

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 8e18be3fe157ea70a90ce52d688efeb762ea4a07

Fixup the documentation regarding the driver's clock notifier callback.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/i2c/busses/i2c-zynq.c |   18 +++++++-----------
 1 files changed, 7 insertions(+), 11 deletions(-)

diff --git a/drivers/i2c/busses/i2c-zynq.c b/drivers/i2c/busses/i2c-zynq.c
index 5ecfe8e..61faf19 100644
--- a/drivers/i2c/busses/i2c-zynq.c
+++ b/drivers/i2c/busses/i2c-zynq.c
@@ -667,13 +667,15 @@ static int zynq_i2c_setclk(unsigned long clk_in, struct zynq_i2c *id)
  * @nb:		Pointer to notifier block
  * @event:	Notification reason
  * @data:	Pointer to notification data object
- * Return: NOTIFY_STOP if the rate change should be aborted, NOTIFY_OK
- * otherwise.
+ * Return:	NOTIFY_STOP if the rate change should be aborted, NOTIFY_OK
+ *		to acknowedge the change, NOTIFY_DONE if the notification is
+ *		considered irrelevant.
  *
  * This function is called when the zynq_i2c input clock frequency changes.
- * In the pre-rate change notification here it is determined if the rate change
- * may be allowed or not.
- * In th post-change case necessary adjustments are conducted.
+ * The callback checks whether a valid bus frequency can be generated after the
+ * change. If so, the change is acknowledged, otherwise the change is aborted.
+ * New dividers are written to the HW in the pre- or post change notification
+ * depending on the scaling direction.
  */
 static int zynq_i2c_clk_notifier_cb(struct notifier_block *nb, unsigned long
 		event, void *data)
@@ -687,12 +689,6 @@ static int zynq_i2c_clk_notifier_cb(struct notifier_block *nb, unsigned long
 	switch (event) {
 	case PRE_RATE_CHANGE:
 	{
-		/*
-		 * if a rate change is announced we need to check whether we can
-		 * maintain the current frequency by changing the clock
-		 * dividers. Probably we could also define an acceptable
-		 * frequency range.
-		 */
 		unsigned long input_clk = ndata->new_rate;
 		unsigned long fscl = id->i2c_clk;
 		unsigned int div_a, div_b, err = 0;
-- 
1.7.5.4

