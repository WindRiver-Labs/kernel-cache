From e91c2ce6962f62a74458e2d93d3d9f7adcd02277 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Mon, 26 Oct 2015 09:35:56 +0800
Subject: [PATCH 291/292] i2c: cadence: Prevent rx buffer overflow

Due to HW bug the controller might incorrectly transfers 16 bytes of
additional read data from the slave device. When this happens the rx
buffer gets overflown leading to random kernel crashes.

This commit prevents the rx buffer to overflow. It also prevents rx
counters to wrap leading to incorrect SW timeout.

Signed-off-by: Anders Hedlund <anders.hedlund@windriver.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/i2c/busses/i2c-cadence.c | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/drivers/i2c/busses/i2c-cadence.c b/drivers/i2c/busses/i2c-cadence.c
index bd950e3..6d35cad 100644
--- a/drivers/i2c/busses/i2c-cadence.c
+++ b/drivers/i2c/busses/i2c-cadence.c
@@ -235,6 +235,7 @@ static irqreturn_t cdns_i2c_isr(int irq, void *ptr)
 		/* Read data if receive data valid is set */
 		while (cdns_i2c_readreg(CDNS_I2C_SR_OFFSET) &
 		       CDNS_I2C_SR_RXDV) {
+			char fifo_byte;
 			/*
 			 * Clear hold bit that was set for FIFO control if
 			 * RX data left is less than FIFO depth, unless
@@ -244,10 +245,16 @@ static irqreturn_t cdns_i2c_isr(int irq, void *ptr)
 			    !id->bus_hold_flag)
 				cdns_i2c_clear_bus_hold(id);
 
-			*(id->p_recv_buf)++ =
-				cdns_i2c_readreg(CDNS_I2C_DATA_OFFSET);
-			id->recv_count--;
-			id->curr_recv_count--;
+			fifo_byte = cdns_i2c_readreg(CDNS_I2C_DATA_OFFSET);
+			/*
+			 * If the number of bytes still expected to receive has
+			 * already been zero, we should quit from here.
+			 */
+			if (id->recv_count) {
+				*(id->p_recv_buf)++ = fifo_byte;
+				id->recv_count--;
+				id->curr_recv_count--;
+			}
 
 			if (cdns_is_holdquirk(id, hold_quirk))
 				break;
-- 
2.0.2

