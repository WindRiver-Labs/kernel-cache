From 3d834209b25f7752933b4f95c9e48ef41141860a Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Date: Mon, 7 Apr 2014 19:46:53 +0530
Subject: [PATCH 065/182] spi: zynq-qspi: Remove unused macros and avoid magic
 numbers

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Remove unused macros and avoid magic numbers

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 708c869eeab0db80cfb9d91efac51586ef6f8a1f)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/spi/spi-zynq-qspi.c |   27 ++++++++++++++++-----------
 1 files changed, 16 insertions(+), 11 deletions(-)

diff --git a/drivers/spi/spi-zynq-qspi.c b/drivers/spi/spi-zynq-qspi.c
index 35a24bc..4906379 100644
--- a/drivers/spi/spi-zynq-qspi.c
+++ b/drivers/spi/spi-zynq-qspi.c
@@ -67,6 +67,16 @@
 #define ZYNQ_QSPI_CONFIG_MSTREN_MASK	0x00000001 /* Master Mode */
 
 /*
+ * QSPI Configuration Register - Baud rate and slave select
+ *
+ * These are the values used in the calculation of baud rate divisor and
+ * setting the slave select.
+ */
+#define ZYNQ_QSPI_BAUD_DIV_MAX		7 /* Baud rate divisor maximum */
+#define ZYNQ_QSPI_BAUD_DIV_SHIFT	3 /* Baud rate divisor shift in CR */
+#define ZYNQ_QSPI_SS_SHIFT		10 /* Slave Select field shift in CR */
+
+/*
  * QSPI Interrupt Registers bit Masks
  *
  * All the four interrupt registers (Status/Mask/Enable/Disable) have the same
@@ -108,12 +118,6 @@
 #define MODEBITS			(SPI_CPOL | SPI_CPHA)
 
 /*
- * Definitions for the status of queue
- */
-#define ZYNQ_QSPI_QUEUE_STOPPED		0
-#define ZYNQ_QSPI_QUEUE_RUNNING		1
-
-/*
  * Macros for the QSPI controller read/write
  */
 #define zynq_qspi_read(addr)		readl_relaxed(addr)
@@ -308,8 +312,9 @@ static void zynq_qspi_chipselect(struct spi_device *qspi, bool is_high)
 	} else {
 		/* Select the slave */
 		config_reg &= ~ZYNQ_QSPI_CONFIG_SSCTRL_MASK;
-		config_reg |= (((~(0x0001 << qspi->chip_select)) << 10) &
-				ZYNQ_QSPI_CONFIG_SSCTRL_MASK);
+		config_reg |= (((~(BIT(qspi->chip_select))) <<
+				 ZYNQ_QSPI_SS_SHIFT) &
+				 ZYNQ_QSPI_CONFIG_SSCTRL_MASK);
 	}
 
 	zynq_qspi_write(xqspi->regs + ZYNQ_QSPI_CONFIG_OFFSET, config_reg);
@@ -348,7 +353,7 @@ static int zynq_qspi_setup_transfer(struct spi_device *qspi,
 
 	/* Set the clock frequency */
 	/* If req_hz == 0, default to lowest speed */
-	while ((baud_rate_val < 7)  &&
+	while ((baud_rate_val < ZYNQ_QSPI_BAUD_DIV_MAX)  &&
 		(clk_get_rate(xqspi->devclk) / (2 << baud_rate_val)) > req_hz)
 		baud_rate_val++;
 
@@ -362,8 +367,8 @@ static int zynq_qspi_setup_transfer(struct spi_device *qspi,
 	if (qspi->mode & SPI_CPOL)
 		config_reg |= ZYNQ_QSPI_CONFIG_CPOL_MASK;
 
-	config_reg &= 0xFFFFFFC7;
-	config_reg |= (baud_rate_val << 3);
+	config_reg &= ~ZYNQ_QSPI_CONFIG_BDRATE_MASK;
+	config_reg |= (baud_rate_val << ZYNQ_QSPI_BAUD_DIV_SHIFT);
 
 	zynq_qspi_write(xqspi->regs + ZYNQ_QSPI_CONFIG_OFFSET, config_reg);
 
-- 
1.7.5.4

