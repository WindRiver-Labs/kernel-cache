From 651c4cd488f825626a76a928e587ddeb852e986e Mon Sep 17 00:00:00 2001
From: Bharat Kumar Gogada <bharat.kumar.gogada@xilinx.com>
Date: Mon, 15 Feb 2016 21:18:55 +0530
Subject: [PATCH 672/793] PCI: Xilinx NWL PCIe Bridge: Adding legacy support

Adding legacy interrupt support.

Signed-off-by: Bharat Kumar Gogada <bharatku@xilinx.com>
Signed-off-by: Ravi Kiran Gummaluri <rgummal@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/pci/host/pci-xilinx-nwl.c |   78 ++++++++++++++++++++++++++++++++-----
 1 files changed, 68 insertions(+), 10 deletions(-)

diff --git a/drivers/pci/host/pci-xilinx-nwl.c b/drivers/pci/host/pci-xilinx-nwl.c
index f2c031a..a2e0d21 100644
--- a/drivers/pci/host/pci-xilinx-nwl.c
+++ b/drivers/pci/host/pci-xilinx-nwl.c
@@ -174,6 +174,7 @@
 
 #define INT_PCI_MSI_NR			(2 * 32)
 
+#define INTX_NUM			4
 /* Readin the PS_LINKUP */
 #define PS_LINKUP_OFFSET			0x00000238
 #define PCIE_PHY_LINKUP_BIT			BIT(0)
@@ -259,6 +260,7 @@ struct nwl_pcie {
 	bool enable_msi_fifo;
 	struct pci_bus *bus;
 	struct nwl_msi msi;
+	struct irq_domain *legacy_irq_domain;
 };
 
 static inline struct nwl_msi *to_nwl_msi(struct msi_controller *chip)
@@ -572,29 +574,41 @@ static irqreturn_t nwl_pcie_misc_handler(int irq, void *data)
 static irqreturn_t nwl_pcie_leg_handler(int irq, void *data)
 {
 	struct nwl_pcie *pcie = (struct nwl_pcie *)data;
-	u32 leg_stat;
+	unsigned long leg_stat;
+	u32 bit;
+	u32 virq;
 
 	/* Checking for legacy interrupts */
 	leg_stat = nwl_bridge_readl(pcie, MSGF_LEG_STATUS) &
 				MSGF_LEG_SR_MASKALL;
+
 	if (!leg_stat)
 		return IRQ_NONE;
 
-	if (leg_stat & MSGF_LEG_SR_INTA)
-		dev_dbg(pcie->dev, "legacy interruptA\n");
+	for_each_set_bit(bit, &leg_stat, 4) {
 
-	if (leg_stat & MSGF_LEG_SR_INTB)
-		dev_dbg(pcie->dev, "legacy interruptB\n");
+		virq = irq_find_mapping(pcie->legacy_irq_domain,
+					bit + 1);
+		if (virq)
+			generic_handle_irq(virq);
+	}
 
-	if (leg_stat & MSGF_LEG_SR_INTC)
-		dev_dbg(pcie->dev, "legacy interruptC\n");
+	return IRQ_HANDLED;
+}
 
-	if (leg_stat & MSGF_LEG_SR_INTD)
-		dev_dbg(pcie->dev, "legacy interruptD\n");
+static int nwl_legacy_map(struct irq_domain *domain, unsigned int irq,
+				irq_hw_number_t hwirq)
+{
+	irq_set_chip_and_handler(irq, &dummy_irq_chip, handle_simple_irq);
+	irq_set_chip_data(irq, domain->host_data);
 
-	return IRQ_HANDLED;
+	return 0;
 }
 
+static const struct irq_domain_ops legacy_domain_ops = {
+	.map = nwl_legacy_map,
+};
+
 static void __nwl_pcie_msi_handler(struct nwl_pcie *pcie,
 					unsigned long reg, u32 val)
 {
@@ -837,6 +851,42 @@ err:
 	return ret;
 }
 
+static void nwl_pcie_free_irq_domain(struct nwl_pcie *pcie)
+{
+	int i;
+	u32 irq;
+
+	for (i = 0; i < INTX_NUM; i++) {
+		irq = irq_find_mapping(pcie->legacy_irq_domain, i + 1);
+		if (irq > 0)
+			irq_dispose_mapping(irq);
+	}
+	if (pcie->legacy_irq_domain)
+		irq_domain_remove(pcie->legacy_irq_domain);
+}
+
+static int nwl_pcie_init_irq_domain(struct nwl_pcie *pcie)
+{
+	struct device_node *node = pcie->dev->of_node;
+	struct device_node *legacy_intc_node;
+
+	legacy_intc_node = of_get_next_child(node, NULL);
+	if (!legacy_intc_node) {
+		dev_err(pcie->dev, "No legacy intc node found\n");
+		return PTR_ERR(legacy_intc_node);
+	}
+
+	pcie->legacy_irq_domain = irq_domain_add_linear(legacy_intc_node, 4,
+							&legacy_domain_ops,
+							pcie);
+
+	if (!pcie->legacy_irq_domain) {
+		dev_err(pcie->dev, "failed to create IRQ domain\n");
+		return -ENOMEM;
+	}
+	return 0;
+}
+
 static int nwl_pcie_bridge_init(struct nwl_pcie *pcie)
 {
 	struct platform_device *pdev = to_platform_device(pcie->dev);
@@ -1051,6 +1101,11 @@ static int nwl_pcie_probe(struct platform_device *pdev)
 		return err;
 	}
 
+	err = nwl_pcie_init_irq_domain(pcie);
+	if (err) {
+		dev_err(pcie->dev, "Failed creating IRQ Domain\n");
+		return err;
+	}
 	bus = pci_create_root_bus(&pdev->dev, pcie->root_busno,
 				  &nwl_pcie_ops, pcie, &res);
 	if (!bus)
@@ -1076,6 +1131,9 @@ static int nwl_pcie_probe(struct platform_device *pdev)
 
 static int nwl_pcie_remove(struct platform_device *pdev)
 {
+	struct nwl_pcie *pcie = platform_get_drvdata(pdev);
+
+	nwl_pcie_free_irq_domain(pcie);
 	platform_set_drvdata(pdev, NULL);
 
 	return 0;
-- 
1.7.5.4

