From 3bc1bd27f6e3a3ae1fa9a984553e1cf7925d1c88 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Thu, 27 Feb 2014 17:54:21 -0800
Subject: [PATCH 064/509] spi: zynq: Remove clock notifier

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 533b4caafa10649c66f2d94d5e2b07ebd50c811b

The clock notifier was just an emty placeholder. Remove this dead code.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/spi/spi-zynq.c |   34 +++-------------------------------
 1 files changed, 3 insertions(+), 31 deletions(-)

diff --git a/drivers/spi/spi-zynq.c b/drivers/spi/spi-zynq.c
index e868ded..2cb5eb8 100644
--- a/drivers/spi/spi-zynq.c
+++ b/drivers/spi/spi-zynq.c
@@ -98,7 +98,6 @@
  * @regs:		Virtual address of the SPI controller registers
  * @devclk:		Pointer to the peripheral clock
  * @aperclk:		Pointer to the APER clock
- * @clk_rate_change_nb:	Notifier block for clock frequency change callback
  * @irq:		IRQ number
  * @speed_hz:		Current SPI bus clock speed in Hz
  * @trans_queue_lock:	Lock used for accessing transfer queue
@@ -117,7 +116,6 @@ struct zynq_spi {
 	void __iomem *regs;
 	struct clk *devclk;
 	struct clk *aperclk;
-	struct notifier_block clk_rate_change_nb;
 	int irq;
 	u32 speed_hz;
 	spinlock_t trans_queue_lock;
@@ -630,25 +628,6 @@ static inline int zynq_spi_destroy_queue(struct zynq_spi *xspi)
 	return 0;
 }
 
-static int zynq_spi_clk_notifier_cb(struct notifier_block *nb,
-		unsigned long event, void *data)
-{
-	switch (event) {
-	case PRE_RATE_CHANGE:
-		/* if a rate change is announced we need to check whether we can
-		 * maintain the current frequency by changing the clock
-		 * dividers. And we may have to suspend operation and return
-		 * after the rate change or its abort
-		 */
-		return NOTIFY_OK;
-	case POST_RATE_CHANGE:
-		return NOTIFY_OK;
-	case ABORT_RATE_CHANGE:
-	default:
-		return NOTIFY_DONE;
-	}
-}
-
 /**
  * zynq_spi_probe - Probe method for the SPI driver
  * @pdev:	Pointer to the platform_device structure
@@ -721,11 +700,6 @@ static int zynq_spi_probe(struct platform_device *pdev)
 		goto clk_dis_aper;
 	}
 
-	xspi->clk_rate_change_nb.notifier_call = zynq_spi_clk_notifier_cb;
-	xspi->clk_rate_change_nb.next = NULL;
-	if (clk_notifier_register(xspi->devclk, &xspi->clk_rate_change_nb))
-		dev_warn(&pdev->dev, "Unable to register clock notifier.\n");
-
 	/* SPI controller initializations */
 	zynq_spi_init_hw(xspi->regs);
 
@@ -735,7 +709,7 @@ static int zynq_spi_probe(struct platform_device *pdev)
 				   (u32 *)&master->num_chipselect);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "couldn't determine num-chip-select\n");
-		goto clk_notif_unreg;
+		goto clk_dis_all;
 	}
 	master->setup = zynq_spi_setup;
 	master->transfer = zynq_spi_transfer;
@@ -758,7 +732,7 @@ static int zynq_spi_probe(struct platform_device *pdev)
 	if (!xspi->workqueue) {
 		ret = -ENOMEM;
 		dev_err(&pdev->dev, "problem initializing queue\n");
-		goto clk_notif_unreg;
+		goto clk_dis_all;
 	}
 
 	ret = zynq_spi_start_queue(xspi);
@@ -780,8 +754,7 @@ static int zynq_spi_probe(struct platform_device *pdev)
 
 remove_queue:
 	(void)zynq_spi_destroy_queue(xspi);
-clk_notif_unreg:
-	clk_notifier_unregister(xspi->devclk, &xspi->clk_rate_change_nb);
+clk_dis_all:
 	clk_disable_unprepare(xspi->devclk);
 clk_dis_aper:
 	clk_disable_unprepare(xspi->aperclk);
@@ -817,7 +790,6 @@ static int zynq_spi_remove(struct platform_device *pdev)
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_ER_OFFSET,
 		       ~ZYNQ_SPI_ER_ENABLE_MASK);
 
-	clk_notifier_unregister(xspi->devclk, &xspi->clk_rate_change_nb);
 	clk_disable_unprepare(xspi->devclk);
 	clk_disable_unprepare(xspi->aperclk);
 	clk_put(xspi->devclk);
-- 
1.7.5.4

