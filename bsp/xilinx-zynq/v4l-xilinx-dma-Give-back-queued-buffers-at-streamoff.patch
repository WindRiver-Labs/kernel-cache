From ff15a5991876533f5531612265708120b6138e32 Mon Sep 17 00:00:00 2001
From: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date: Sun, 28 Sep 2014 22:48:45 +0300
Subject: [PATCH 300/456] v4l: xilinx: dma: Give back queued buffers at
 streamoff time

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

When stopping the stream drivers must give back all queued buffers to
vb2, marking them with the error state.

Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
(cherry picked from commit f63617cea6861ba63388fd57e5316960b47d0214)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/media/platform/xilinx/xilinx-dma.c |   21 +++++++++++++++++++++
 drivers/media/platform/xilinx/xilinx-dma.h |    6 ++++++
 2 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-dma.c b/drivers/media/platform/xilinx/xilinx-dma.c
index f399b92..0b3a093 100644
--- a/drivers/media/platform/xilinx/xilinx-dma.c
+++ b/drivers/media/platform/xilinx/xilinx-dma.c
@@ -312,6 +312,7 @@ done:
 /**
  * struct xvip_dma_buffer - Video DMA buffer
  * @buf: vb2 buffer base object
+ * @queue: buffer list entry in the DMA engine queued buffers list
  * @dma: DMA channel that uses the buffer
  * @addr: DMA bus address for the buffer memory
  * @length: total length of the buffer in bytes
@@ -319,6 +320,7 @@ done:
  */
 struct xvip_dma_buffer {
 	struct vb2_buffer buf;
+	struct list_head queue;
 
 	struct xvip_dma *dma;
 
@@ -334,6 +336,10 @@ static void xvip_dma_complete(void *param)
 	struct xvip_dma_buffer *buf = param;
 	struct xvip_dma *dma = buf->dma;
 
+	spin_lock(&dma->queued_lock);
+	list_del(&buf->queue);
+	spin_unlock(&dma->queued_lock);
+
 	buf->buf.v4l2_buf.sequence = dma->sequence++;
 	v4l2_get_timestamp(&buf->buf.v4l2_buf.timestamp);
 	vb2_set_plane_payload(&buf->buf, 0, buf->length);
@@ -403,6 +409,10 @@ static void xvip_dma_buffer_queue(struct vb2_buffer *vb)
 	desc->callback = xvip_dma_complete;
 	desc->callback_param = buf;
 
+	spin_lock_irq(&dma->queued_lock);
+	list_add_tail(&buf->queue, &dma->queued_bufs);
+	spin_unlock_irq(&dma->queued_lock);
+
 	dmaengine_submit(desc);
 
 	if (vb2_is_streaming(&dma->queue))
@@ -475,6 +485,7 @@ static void xvip_dma_stop_streaming(struct vb2_queue *vq)
 {
 	struct xvip_dma *dma = vb2_get_drv_priv(vq);
 	struct xvip_pipeline *pipe = to_xvip_pipeline(&dma->video.entity);
+	struct xvip_dma_buffer *buf, *nbuf;
 	struct xilinx_vdma_config config;
 
 	/* Stop the pipeline. */
@@ -491,6 +502,14 @@ static void xvip_dma_stop_streaming(struct vb2_queue *vq)
 	/* Cleanup the pipeline and mark it as being stopped. */
 	xvip_pipeline_cleanup(pipe);
 	media_entity_pipeline_stop(&dma->video.entity);
+
+	/* Give back all queued buffers to videobuf2. */
+	spin_lock_irq(&dma->queued_lock);
+	list_for_each_entry_safe(buf, nbuf, &dma->queued_bufs, queue) {
+		vb2_buffer_done(&buf->buf, VB2_BUF_STATE_ERROR);
+		list_del(&buf->queue);
+	}
+	spin_unlock_irq(&dma->queued_lock);
 }
 
 static struct vb2_ops xvip_dma_queue_qops = {
@@ -912,6 +931,8 @@ int xvip_dma_init(struct xvip_composite_device *xdev, struct xvip_dma *dma,
 	dma->port = port;
 	mutex_init(&dma->lock);
 	mutex_init(&dma->pipe.lock);
+	INIT_LIST_HEAD(&dma->queued_bufs);
+	spin_lock_init(&dma->queued_lock);
 
 	dma->fmtinfo = xvip_get_format_by_fourcc(XVIP_DMA_DEF_FORMAT);
 	dma->format.pixelformat = dma->fmtinfo->fourcc;
diff --git a/drivers/media/platform/xilinx/xilinx-dma.h b/drivers/media/platform/xilinx/xilinx-dma.h
index 8eb4c8d..f395179 100644
--- a/drivers/media/platform/xilinx/xilinx-dma.h
+++ b/drivers/media/platform/xilinx/xilinx-dma.h
@@ -15,6 +15,7 @@
 
 #include <linux/dmaengine.h>
 #include <linux/mutex.h>
+#include <linux/spinlock.h>
 #include <linux/videodev2.h>
 
 #include <media/media-entity.h>
@@ -64,6 +65,8 @@ static inline struct xvip_pipeline *to_xvip_pipeline(struct media_entity *e)
  * @queue: vb2 buffers queue
  * @alloc_ctx: allocation context for the vb2 @queue
  * @sequence: V4L2 buffers sequence number
+ * @queued_bufs: list of queued buffers
+ * @queued_lock: protects the buf_queued list
  * @dma: DMA engine channel
  * @align: transfer alignment required by the DMA channel (in bytes)
  * @xt: dma interleaved template for dma configuration
@@ -86,6 +89,9 @@ struct xvip_dma {
 	void *alloc_ctx;
 	unsigned int sequence;
 
+	struct list_head queued_bufs;
+	spinlock_t queued_lock;
+
 	struct dma_chan *dma;
 	unsigned int align;
 	struct dma_interleaved_template xt;
-- 
1.7.5.4

