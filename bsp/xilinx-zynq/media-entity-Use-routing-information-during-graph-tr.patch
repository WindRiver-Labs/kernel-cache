From 3164ac0d009f10ae1c374bb89e4f19ea2c7d64ae Mon Sep 17 00:00:00 2001
From: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date: Wed, 26 Mar 2014 04:01:47 +0100
Subject: [PATCH 374/456] media: entity: Use routing information during graph
 traversal

Take internal routing information as reported by the entity has_route
operation into account during graph traversal to avoid following
unrelated links.

Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit af0712006dc6a5e207863c776e588e51a711d1b2)
---
 drivers/media/media-entity.c |   46 +++++++++++++++++++++++++++++------------
 include/media/media-entity.h |    1 +
 2 files changed, 33 insertions(+), 14 deletions(-)

diff --git a/drivers/media/media-entity.c b/drivers/media/media-entity.c
index ffda69f..b5460e1 100644
--- a/drivers/media/media-entity.c
+++ b/drivers/media/media-entity.c
@@ -119,18 +119,9 @@ bool media_entity_has_route(struct media_entity *entity, unsigned int pad0,
 }
 EXPORT_SYMBOL_GPL(media_entity_has_route);
 
-static struct media_entity *
-media_entity_other(struct media_entity *entity, struct media_link *link)
-{
-	if (link->source->entity == entity)
-		return link->sink->entity;
-	else
-		return link->source->entity;
-}
-
 /* push an entity to traversal stack */
 static void stack_push(struct media_entity_graph *graph,
-		       struct media_entity *entity)
+		       struct media_entity *entity, int pad)
 {
 	if (graph->top == MEDIA_ENTITY_ENUM_MAX_DEPTH - 1) {
 		WARN_ON(1);
@@ -138,6 +129,7 @@ static void stack_push(struct media_entity_graph *graph,
 	}
 	graph->top++;
 	graph->stack[graph->top].link = 0;
+	graph->stack[graph->top].pad = pad;
 	graph->stack[graph->top].entity = entity;
 }
 
@@ -152,6 +144,7 @@ static struct media_entity *stack_pop(struct media_entity_graph *graph)
 }
 
 #define link_top(en)	((en)->stack[(en)->top].link)
+#define pad_top(en)	((en)->stack[(en)->top].pad)
 #define stack_top(en)	((en)->stack[(en)->top].entity)
 
 /**
@@ -175,7 +168,7 @@ void media_entity_graph_walk_start(struct media_entity_graph *graph,
 		return;
 
 	__set_bit(entity->id, graph->entities);
-	stack_push(graph, entity);
+	stack_push(graph, entity, -1);
 }
 EXPORT_SYMBOL_GPL(media_entity_graph_walk_start);
 
@@ -205,7 +198,10 @@ media_entity_graph_walk_next(struct media_entity_graph *graph)
 	while (link_top(graph) < stack_top(graph)->num_links) {
 		struct media_entity *entity = stack_top(graph);
 		struct media_link *link = &entity->links[link_top(graph)];
+		unsigned int from_pad = pad_top(graph);
 		struct media_entity *next;
+		struct media_pad *remote;
+		struct media_pad *local;
 
 		/* The link is not enabled so we do not follow. */
 		if (!(link->flags & MEDIA_LNK_FL_ENABLED)) {
@@ -213,11 +209,33 @@ media_entity_graph_walk_next(struct media_entity_graph *graph)
 			continue;
 		}
 
-		/* Get the entity in the other end of the link . */
-		next = media_entity_other(entity, link);
+		/*
+		 * Get the local pad, the remote pad and the entity at the other
+		 * end of the link.
+		 */
+		if (link->source->entity == entity) {
+			remote = link->sink;
+			local = link->source;
+		} else {
+			remote = link->source;
+			local = link->sink;
+		}
+
+		next = remote->entity;
+
 		if (WARN_ON(next->id >= MEDIA_ENTITY_ENUM_MAX_ID))
 			return NULL;
 
+		/*
+		 * Are the local pad and the pad we came from connected
+		 * internally in the entity ?
+		 */
+		if (from_pad != -1 &&
+		    !media_entity_has_route(entity, from_pad, local->index)) {
+			link_top(graph)++;
+			continue;
+		}
+
 		/* Has the entity already been visited? */
 		if (__test_and_set_bit(next->id, graph->entities)) {
 			link_top(graph)++;
@@ -226,7 +244,7 @@ media_entity_graph_walk_next(struct media_entity_graph *graph)
 
 		/* Push the new entity to stack and start over. */
 		link_top(graph)++;
-		stack_push(graph, next);
+		stack_push(graph, next, remote->index);
 	}
 
 	return stack_pop(graph);
diff --git a/include/media/media-entity.h b/include/media/media-entity.h
index 3b9b720..68341cb 100644
--- a/include/media/media-entity.h
+++ b/include/media/media-entity.h
@@ -135,6 +135,7 @@ struct media_entity_graph {
 	struct {
 		struct media_entity *entity;
 		int link;
+		int pad;
 	} stack[MEDIA_ENTITY_ENUM_MAX_DEPTH];
 
 	DECLARE_BITMAP(entities, MEDIA_ENTITY_ENUM_MAX_ID);
-- 
1.7.5.4

