From 26e1c0bdab327c4eece6f07f60a8c235ae629f5e Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaiah.choudary.kalluri@xilinx.com>
Date: Sat, 21 Jun 2014 23:39:07 +0530
Subject: [PATCH 346/456] net: xemacps: Add support for the usecase where
 single MAC manages 2 PHYs

Added support for the use case where a single MAC manages 2 PHYs.
"has-mdio" dt property was used to decide whether to allocate the new
mdio bus or find the existing one

Reported-by: John Linn <linnj@xilinx.com>
Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 2c5f2b5845f143faeb6aafd06db745af25adedf4)
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   89 +++++++++++++++++++++------
 1 files changed, 70 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 0788c26..668efaa 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -467,6 +467,7 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
 #define XEMACPS_GMII2RGMII_SPEED1000		BMCR_SPEED1000
 #define XEMACPS_GMII2RGMII_SPEED100		BMCR_SPEED100
 #define XEMACPS_GMII2RGMII_REG_NUM			0x10
+#define XEMACPS_MDIO_BUSY_TIMEOUT		(1 * HZ)
 
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
 #define NS_PER_SEC			1000000000ULL /* Nanoseconds per
@@ -523,6 +524,7 @@ struct net_local {
 	spinlock_t tx_lock;
 	spinlock_t rx_lock;
 	spinlock_t nwctrlreg_lock;
+	spinlock_t mdio_lock;
 
 	struct platform_device *pdev;
 	struct net_device *ndev; /* this device */
@@ -546,6 +548,7 @@ struct net_local {
 	unsigned ip_summed;
 	unsigned int enetnum;
 	unsigned int lastrxfrmscntr;
+	unsigned int has_mdio;
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
 	struct hwtstamp_config hwtstamp_config;
 	struct ptp_clock *ptp_clock;
@@ -561,6 +564,35 @@ struct net_local {
 static struct net_device_ops netdev_ops;
 
 /**
+ * xemacps_mdio_wait - Wait for the MDIO to be ready to use
+ * @lp:		Pointer to the Emacps device private data
+ *
+ * This function waits till the device is ready to accept a new MDIO
+ * request.
+ *
+ * Return:	0 for success or ETIMEDOUT for a timeout
+ */
+static int xemacps_mdio_wait(struct net_local *lp)
+{
+	ulong timeout = jiffies + XEMACPS_MDIO_BUSY_TIMEOUT;
+	u32 regval;
+
+	/* Wait till the bus is free */
+	do {
+		regval = xemacps_read(lp->baseaddr, XEMACPS_NWSR_OFFSET);
+		if (regval & XEMACPS_NWSR_MDIOIDLE_MASK)
+			break;
+		else
+			cpu_relax();
+	} while (!time_after_eq(jiffies, timeout));
+
+	if (time_after_eq(jiffies, timeout))
+		return -ETIMEDOUT;
+
+	return 0;
+}
+
+/**
  * xemacps_mdio_read - Read current value of phy register indicated by
  * phyreg.
  * @bus: mdio bus
@@ -578,9 +610,11 @@ static int xemacps_mdio_read(struct mii_bus *bus, int mii_id, int phyreg)
 	struct net_local *lp = bus->priv;
 	u32 regval;
 	int value;
-	volatile u32 ipisr;
 
 	pm_runtime_get_sync(&lp->pdev->dev);
+	spin_lock(&lp->mdio_lock);
+	if (xemacps_mdio_wait(lp))
+		goto timeout;
 
 	regval  = XEMACPS_PHYMNTNC_OP_MASK;
 	regval |= XEMACPS_PHYMNTNC_OP_R_MASK;
@@ -590,17 +624,21 @@ static int xemacps_mdio_read(struct mii_bus *bus, int mii_id, int phyreg)
 	xemacps_write(lp->baseaddr, XEMACPS_PHYMNTNC_OFFSET, regval);
 
 	/* wait for end of transfer */
-	do {
-		cpu_relax();
-		ipisr = xemacps_read(lp->baseaddr, XEMACPS_NWSR_OFFSET);
-	} while ((ipisr & XEMACPS_NWSR_MDIOIDLE_MASK) == 0);
+	if (xemacps_mdio_wait(lp))
+		goto timeout;
 
 	value = xemacps_read(lp->baseaddr, XEMACPS_PHYMNTNC_OFFSET) &
 			XEMACPS_PHYMNTNC_DATA_MASK;
 
+	spin_unlock(&lp->mdio_lock);
 	pm_runtime_put(&lp->pdev->dev);
 
 	return value;
+
+timeout:
+	spin_unlock(&lp->mdio_lock);
+	pm_runtime_put(&lp->pdev->dev);
+	return -ETIMEDOUT;
 }
 
 /**
@@ -621,9 +659,11 @@ static int xemacps_mdio_write(struct mii_bus *bus, int mii_id, int phyreg,
 {
 	struct net_local *lp = bus->priv;
 	u32 regval;
-	volatile u32 ipisr;
 
 	pm_runtime_get_sync(&lp->pdev->dev);
+	spin_lock(&lp->mdio_lock);
+	if (xemacps_mdio_wait(lp))
+		goto timeout;
 
 	regval  = XEMACPS_PHYMNTNC_OP_MASK;
 	regval |= XEMACPS_PHYMNTNC_OP_W_MASK;
@@ -634,14 +674,17 @@ static int xemacps_mdio_write(struct mii_bus *bus, int mii_id, int phyreg,
 	xemacps_write(lp->baseaddr, XEMACPS_PHYMNTNC_OFFSET, regval);
 
 	/* wait for end of transfer */
-	do {
-		cpu_relax();
-		ipisr = xemacps_read(lp->baseaddr, XEMACPS_NWSR_OFFSET);
-	} while ((ipisr & XEMACPS_NWSR_MDIOIDLE_MASK) == 0);
-
+	if (xemacps_mdio_wait(lp))
+		goto timeout;
+	spin_unlock(&lp->mdio_lock);
 	pm_runtime_put(&lp->pdev->dev);
 
 	return 0;
+
+timeout:
+	spin_unlock(&lp->mdio_lock);
+	pm_runtime_put(&lp->pdev->dev);
+	return -ETIMEDOUT;
 }
 
 
@@ -832,6 +875,10 @@ static int xemacps_mii_init(struct net_local *lp)
 	struct device_node *np = of_get_parent(lp->phy_node);
 	struct device_node *npp;
 
+	lp->mii_bus = of_mdio_find_bus(np);
+	if (!lp->has_mdio && lp->mii_bus)
+		return 0;
+
 	lp->mii_bus = mdiobus_alloc();
 	if (lp->mii_bus == NULL) {
 		rc = -ENOMEM;
@@ -950,12 +997,11 @@ static void xemacps_reset_hw(struct net_local *lp)
 	/* make sure we have the buffer for ourselves */
 	wmb();
 
-	/* Have a clean start */
-	xemacps_write(lp->baseaddr, XEMACPS_NWCTRL_OFFSET, 0);
-
-	/* Clear statistic counters */
+	/* Clear statistic counters and keep mdio enabled as this mdio
+	 * interface might be being reused by the other MAC.
+	 */
 	xemacps_write(lp->baseaddr, XEMACPS_NWCTRL_OFFSET,
-		XEMACPS_NWCTRL_STATCLR_MASK);
+		XEMACPS_NWCTRL_STATCLR_MASK|XEMACPS_NWCTRL_MDEN_MASK);
 
 	/* Clear TX and RX status */
 	xemacps_write(lp->baseaddr, XEMACPS_TXSR_OFFSET, ~0UL);
@@ -2757,6 +2803,7 @@ static int xemacps_probe(struct platform_device *pdev)
 	spin_lock_init(&lp->tx_lock);
 	spin_lock_init(&lp->rx_lock);
 	spin_lock_init(&lp->nwctrlreg_lock);
+	spin_lock_init(&lp->mdio_lock);
 
 	lp->baseaddr = devm_ioremap_resource(&pdev->dev, r_mem);
 	if (IS_ERR(lp->baseaddr)) {
@@ -2813,6 +2860,8 @@ static int xemacps_probe(struct platform_device *pdev)
 		goto err_out_clk_dis_aper;
 	}
 
+	rc = of_property_read_u32(lp->pdev->dev.of_node, "xlnx,has-mdio",
+							&lp->has_mdio);
 	lp->phy_node = of_parse_phandle(lp->pdev->dev.of_node,
 						"phy-handle", 0);
 	lp->gmii2rgmii_phy_node = of_parse_phandle(lp->pdev->dev.of_node,
@@ -2890,9 +2939,11 @@ static int xemacps_remove(struct platform_device *pdev)
 	if (ndev) {
 		lp = netdev_priv(ndev);
 
-		mdiobus_unregister(lp->mii_bus);
-		kfree(lp->mii_bus->irq);
-		mdiobus_free(lp->mii_bus);
+		if (lp->has_mdio) {
+			mdiobus_unregister(lp->mii_bus);
+			kfree(lp->mii_bus->irq);
+			mdiobus_free(lp->mii_bus);
+		}
 		unregister_netdev(ndev);
 
 		if (!pm_runtime_suspended(&pdev->dev)) {
-- 
1.7.5.4

