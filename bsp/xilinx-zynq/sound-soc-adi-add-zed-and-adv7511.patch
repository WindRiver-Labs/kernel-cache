From 860ba2b96b28561c4b26ede73dab31f933d318a9 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Fri, 11 Dec 2015 08:55:25 +0800
Subject: [PATCH 08/10] sound: soc: adi: add zed and adv7511

The related reference commit:

https://github.com/analogdevicesinc/linux.git xcomm_zynq_3_10
commit 24a2e9859d1abcfd8bd971797750918333b96651

Now that the audio drivers use the generic dmaengine PCM driver there is nothing
Xilinx specific in here anymore.

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 sound/soc/adi/Kconfig        |   14 ++++
 sound/soc/adi/Makefile       |    5 ++
 sound/soc/adi/adv7511_hdmi.c |  105 +++++++++++++++++++++++++++
 sound/soc/adi/zed_adau1761.c |  164 ++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 288 insertions(+), 0 deletions(-)
 create mode 100644 sound/soc/adi/adv7511_hdmi.c
 create mode 100644 sound/soc/adi/zed_adau1761.c

diff --git a/sound/soc/adi/Kconfig b/sound/soc/adi/Kconfig
index dd763f5..2c9d1af 100644
--- a/sound/soc/adi/Kconfig
+++ b/sound/soc/adi/Kconfig
@@ -4,6 +4,10 @@ config SND_SOC_ADI
 	help
 	  Audio support for various reference designs by Analog Devices.
 
+config SND_SOC_AXI_SPDIF
+	select REGMAP_MMIO
+	tristate
+
 config SND_SOC_ADI_AXI_I2S
 	tristate "AXI-I2S support"
 	depends on SND_SOC_ADI
@@ -19,3 +23,13 @@ config SND_SOC_ADI_AXI_SPDIF
 	select REGMAP_MMIO
 	help
 	  ASoC driver for the Analog Devices AXI-SPDIF softcore peripheral.
+
+config SND_SOC_ADV7511_HDMI
+	tristate "ADV7511 HDMI transmitter sound support"
+	select SND_SOC_AXI_SPDIF
+
+config SND_SOC_ZED_ADAU1761
+	tristate "ZED board sound support"
+	depends on SND_SOC_ADI
+	select SND_SOC_ADI_AXI_I2S
+	select SND_SOC_ADAU1761
diff --git a/sound/soc/adi/Makefile b/sound/soc/adi/Makefile
index 64456c1..28b0a59 100644
--- a/sound/soc/adi/Makefile
+++ b/sound/soc/adi/Makefile
@@ -1,5 +1,10 @@
 snd-soc-adi-axi-i2s-objs := axi-i2s.o
 snd-soc-adi-axi-spdif-objs := axi-spdif.o
+snd-soc-adv7511-hdmi-objs := adv7511_hdmi.o
+snd-soc-zed-adau1761-objs := zed_adau1761.o
 
 obj-$(CONFIG_SND_SOC_ADI_AXI_I2S) += snd-soc-adi-axi-i2s.o
 obj-$(CONFIG_SND_SOC_ADI_AXI_SPDIF) += snd-soc-adi-axi-spdif.o
+
+obj-$(CONFIG_SND_SOC_ADV7511_HDMI) += snd-soc-adv7511-hdmi.o
+obj-$(CONFIG_SND_SOC_ZED_ADAU1761) += snd-soc-zed-adau1761.o
diff --git a/sound/soc/adi/adv7511_hdmi.c b/sound/soc/adi/adv7511_hdmi.c
new file mode 100644
index 0000000..7cc1228
--- /dev/null
+++ b/sound/soc/adi/adv7511_hdmi.c
@@ -0,0 +1,105 @@
+/*
+ *  Copyright (C) 2012, Analog Devices Inc.
+ *	Author: Lars-Peter Clausen <lars@metafoo.de>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under  the terms of the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the License, or (at your
+ *  option) any later version.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/timer.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+
+static const struct snd_soc_dapm_widget adv7511_hdmi_dapm_widgets[] = {
+	SND_SOC_DAPM_SPK("Speaker", NULL),
+};
+
+static const struct snd_soc_dapm_route adv7511_hdmi_dapm_routes[] = {
+	{ "Speaker", NULL, "TMDS" },
+};
+
+static struct snd_soc_dai_link hdmi_dai_link = {
+	.name = "HDMI",
+	.stream_name = "HDMI",
+/*	.cpu_dai_name = "75c00000.axi-spdif-tx",
+	.platform_name = "xilinx_pcm_audio.2",
+	.codec_name = adv7511_codec_name,*/
+	.codec_dai_name = "adv7511",
+	.dai_fmt = SND_SOC_DAIFMT_SPDIF |
+			SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+};
+
+static struct snd_soc_card hdmi_card = {
+	.name = "HDMI monitor",
+	.owner = THIS_MODULE,
+	.dai_link = &hdmi_dai_link,
+	.num_links = 1,
+	.dapm_widgets = adv7511_hdmi_dapm_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(adv7511_hdmi_dapm_widgets),
+	.dapm_routes = adv7511_hdmi_dapm_routes,
+	.num_dapm_routes = ARRAY_SIZE(adv7511_hdmi_dapm_routes),
+};
+
+static int adv7511_hdmi_probe(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = &hdmi_card;
+	struct device_node *of_node = pdev->dev.of_node;
+
+	if (!of_node)
+		return -ENXIO;
+
+	card->dev = &pdev->dev;
+
+	hdmi_dai_link.codec_of_node = of_parse_phandle(of_node, "audio-codec", 0);
+	hdmi_dai_link.cpu_of_node = of_parse_phandle(of_node, "cpu-dai", 0);
+	hdmi_dai_link.platform_of_node = hdmi_dai_link.cpu_of_node;
+
+	if (!hdmi_dai_link.codec_of_node || !hdmi_dai_link.cpu_of_node)
+		return -ENXIO;
+
+	return snd_soc_register_card(card);
+}
+
+static int adv7511_hdmi_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	snd_soc_unregister_card(card);
+
+	return 0;
+}
+
+static const struct of_device_id adv7511_hdmi_of_match[] = {
+	{ .compatible = "adv7511-hdmi-snd", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, adv7511_hdmi_of_match);
+
+static struct platform_driver hdmi_card_driver = {
+	.driver = {
+		.name = "adv7511-hdmi-snd",
+		.owner = THIS_MODULE,
+		.of_match_table = adv7511_hdmi_of_match,
+		.pm = &snd_soc_pm_ops,
+	},
+	.probe = adv7511_hdmi_probe,
+	.remove = adv7511_hdmi_remove,
+};
+module_platform_driver(hdmi_card_driver);
+
+MODULE_AUTHOR("Lars-Peter Clausen <lars@metafoo.de>");
+MODULE_DESCRIPTION("ADV7511 HDMI sound driver");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/adi/zed_adau1761.c b/sound/soc/adi/zed_adau1761.c
new file mode 100644
index 0000000..d64caf65
--- /dev/null
+++ b/sound/soc/adi/zed_adau1761.c
@@ -0,0 +1,164 @@
+/*
+ *  Copyright (C) 2012-2013, Analog Devices Inc.
+ *	Author: Lars-Peter Clausen <lars@metafoo.de>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under  the terms of the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the License, or (at your
+ *  option) any later version.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/timer.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include "../codecs/adau17x1.h"
+
+static const struct snd_soc_dapm_widget zed_adau1761_widgets[] = {
+	SND_SOC_DAPM_SPK("Line Out", NULL),
+	SND_SOC_DAPM_HP("Headphone Out", NULL),
+	SND_SOC_DAPM_MIC("Mic In", NULL),
+	SND_SOC_DAPM_MIC("Line In", NULL),
+};
+
+static const struct snd_soc_dapm_route zed_adau1761_routes[] = {
+	{ "Line Out", NULL, "LOUT" },
+	{ "Line Out", NULL, "ROUT" },
+	{ "Headphone Out", NULL, "LHP" },
+	{ "Headphone Out", NULL, "RHP" },
+	{ "Mic In", NULL, "MICBIAS" },
+	{ "LINN", NULL, "Mic In" },
+	{ "RINN", NULL, "Mic In" },
+	{ "LAUX", NULL, "Line In" },
+	{ "RAUX", NULL, "Line In" },
+};
+
+static int zed_adau1761_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	unsigned int pll_rate;
+	int ret;
+
+	switch (params_rate(params)) {
+	case 48000:
+	case 8000:
+	case 12000:
+	case 16000:
+	case 24000:
+	case 32000:
+	case 96000:
+		pll_rate = 48000 * 1024;
+		break;
+	case 44100:
+	case 7350:
+	case 11025:
+	case 14700:
+	case 22050:
+	case 29400:
+	case 88200:
+		pll_rate = 44100 * 1024;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	ret = snd_soc_dai_set_pll(codec_dai, ADAU17X1_PLL,
+			ADAU17X1_PLL_SRC_MCLK, 12288000, pll_rate);
+	if (ret)
+		return ret;
+
+	ret = snd_soc_dai_set_sysclk(codec_dai, ADAU17X1_CLK_SRC_PLL, pll_rate,
+			SND_SOC_CLOCK_IN);
+
+	return ret;
+}
+
+static struct snd_soc_ops zed_adau1761_ops = {
+	.hw_params = zed_adau1761_hw_params,
+};
+
+static struct snd_soc_dai_link zed_adau1761_dai_link = {
+	.name = "adau1761",
+	.stream_name = "adau1761",
+	.codec_dai_name = "adau-hifi",
+	.dai_fmt = SND_SOC_DAIFMT_I2S |
+			SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+	.ops = &zed_adau1761_ops,
+};
+
+static struct snd_soc_card zed_adau1761_card = {
+	.name = "ZED ADAU1761",
+	.owner = THIS_MODULE,
+	.dai_link = &zed_adau1761_dai_link,
+	.num_links = 1,
+	.dapm_widgets = zed_adau1761_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(zed_adau1761_widgets),
+	.dapm_routes = zed_adau1761_routes,
+	.num_dapm_routes = ARRAY_SIZE(zed_adau1761_routes),
+	.fully_routed = true,
+};
+
+static int zed_adau1761_probe(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = &zed_adau1761_card;
+	struct device_node *of_node = pdev->dev.of_node;
+
+	if (!of_node)
+		return -ENXIO;
+
+	card->dev = &pdev->dev;
+
+	zed_adau1761_dai_link.codec_of_node = of_parse_phandle(of_node, "audio-codec", 0);
+	zed_adau1761_dai_link.cpu_of_node = of_parse_phandle(of_node, "cpu-dai", 0);
+	zed_adau1761_dai_link.platform_of_node = zed_adau1761_dai_link.cpu_of_node;
+
+	if (!zed_adau1761_dai_link.codec_of_node ||
+		!zed_adau1761_dai_link.cpu_of_node)
+		return -ENXIO;
+
+	return snd_soc_register_card(card);
+}
+
+static int zed_adau1761_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	snd_soc_unregister_card(card);
+
+	return 0;
+}
+
+static const struct of_device_id zed_adau1761_of_match[] = {
+	{ .compatible = "digilent,zed-sound", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, zed_adau1761_of_match);
+
+static struct platform_driver zed_adau1761_card_driver = {
+	.driver = {
+		.name = "zed-adau1761-snd",
+		.owner = THIS_MODULE,
+		.of_match_table = zed_adau1761_of_match,
+		.pm = &snd_soc_pm_ops,
+	},
+	.probe = zed_adau1761_probe,
+	.remove = zed_adau1761_remove,
+};
+module_platform_driver(zed_adau1761_card_driver);
+
+MODULE_DESCRIPTION("ASoC ZED board ADAU1761 driver");
+MODULE_AUTHOR("Lars-Peter Clausen <lars@metafoo.de>");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:zed-adau1761-snd");
-- 
1.7.5.4

