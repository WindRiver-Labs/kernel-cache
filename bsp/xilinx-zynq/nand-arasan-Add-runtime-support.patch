From b04f269b423c63c808c3c5564c964499e59a6627 Mon Sep 17 00:00:00 2001
From: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Date: Tue, 16 Aug 2016 14:48:45 +0530
Subject: [PATCH 744/793] nand: arasan: Add runtime support

Clocks are enabled before transaction and disabled
at chip deselect. Also add the suspend and resume hooks.
Also adapt to runtime.

Signed-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Reviewed-by: Punnaiah Choudary Kalluri<punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/mtd/nand/arasan_nfc.c |   75 ++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 74 insertions(+), 1 deletions(-)

diff --git a/drivers/mtd/nand/arasan_nfc.c b/drivers/mtd/nand/arasan_nfc.c
index c781db9..167d50d 100644
--- a/drivers/mtd/nand/arasan_nfc.c
+++ b/drivers/mtd/nand/arasan_nfc.c
@@ -19,10 +19,12 @@
 #include <linux/of.h>
 #include <linux/of_mtd.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
 
 #define DRIVER_NAME			"arasan_nfc"
 #define EVNT_TIMEOUT			1000
 #define STATUS_TIMEOUT			2000
+#define ANFC_PM_TIMEOUT		1000	/* ms */
 
 #define PKT_OFST			0x00
 #define MEM_ADDR1_OFST			0x04
@@ -759,11 +761,20 @@ static void anfc_cmd_function(struct mtd_info *mtd,
 static void anfc_select_chip(struct mtd_info *mtd, int num)
 {
 	u32 val;
+	int ret;
 	struct anfc *nfc = container_of(mtd, struct anfc, mtd);
 
-	if (num == -1)
+	if (num == -1) {
+		pm_runtime_mark_last_busy(nfc->dev);
+		pm_runtime_put_autosuspend(nfc->dev);
 		return;
+	}
 
+	ret = pm_runtime_get_sync(nfc->dev);
+	if (ret < 0) {
+		dev_err(nfc->dev, "runtime_get_sync failed\n");
+		return;
+	}
 	val = readl(nfc->base + MEM_ADDR2_OFST);
 	val = (val & ~(CS_MASK)) | (num << CS_SHIFT);
 	writel(val, nfc->base + MEM_ADDR2_OFST);
@@ -943,6 +954,11 @@ static int anfc_probe(struct platform_device *pdev)
 		goto clk_dis_sys;
 	}
 
+	pm_runtime_set_autosuspend_delay(nfc->dev, ANFC_PM_TIMEOUT);
+	pm_runtime_use_autosuspend(nfc->dev);
+	pm_runtime_set_active(nfc->dev);
+	pm_runtime_enable(nfc->dev);
+
 	nfc->spktsize = SDR_MODE_PACKET_SIZE;
 	if (nand_scan_ident(mtd, nfc->num_cs, NULL)) {
 		err = -ENXIO;
@@ -981,9 +997,14 @@ static int anfc_probe(struct platform_device *pdev)
 	if (err)
 		goto clk_dis_all;
 
+	pm_runtime_mark_last_busy(nfc->dev);
+	pm_runtime_put_autosuspend(nfc->dev);
+
 	return err;
 
 clk_dis_all:
+	pm_runtime_disable(&pdev->dev);
+	pm_runtime_set_suspended(&pdev->dev);
 	clk_disable_unprepare(nfc->clk_flash);
 clk_dis_sys:
 	clk_disable_unprepare(nfc->clk_sys);
@@ -995,6 +1016,9 @@ static int anfc_remove(struct platform_device *pdev)
 {
 	struct anfc *nfc = platform_get_drvdata(pdev);
 
+	pm_runtime_disable(&pdev->dev);
+	pm_runtime_set_suspended(&pdev->dev);
+	pm_runtime_dont_use_autosuspend(&pdev->dev);
 	clk_disable_unprepare(nfc->clk_sys);
 	clk_disable_unprepare(nfc->clk_flash);
 
@@ -1008,11 +1032,60 @@ static const struct of_device_id anfc_ids[] = {
 	{  }
 };
 MODULE_DEVICE_TABLE(of, anfc_ids);
+static int anfc_suspend(struct device *dev)
+{
+	return pm_runtime_put_sync(dev);
+}
+
+static int anfc_resume(struct device *dev)
+{
+	return pm_runtime_get_sync(dev);
+}
+
+static int __maybe_unused anfc_runtime_suspend(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct anfc *nfc = platform_get_drvdata(pdev);
+
+	clk_disable(nfc->clk_sys);
+	clk_disable(nfc->clk_flash);
+
+	return 0;
+}
+
+static int __maybe_unused anfc_runtime_resume(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct anfc *nfc = platform_get_drvdata(pdev);
+	int ret;
+
+	ret = clk_enable(nfc->clk_sys);
+	if (ret) {
+		dev_err(dev, "Cannot enable sys clock.\n");
+		return ret;
+	}
+	ret = clk_enable(nfc->clk_flash);
+	if (ret) {
+		dev_err(dev, "Cannot enable flash clock.\n");
+		clk_disable(nfc->clk_sys);
+		return ret;
+	}
+
+	return 0;
+}
+
+static const struct dev_pm_ops anfc_pm_ops = {
+	.resume = anfc_resume,
+	.suspend = anfc_suspend,
+	.runtime_resume	= anfc_runtime_resume,
+	.runtime_suspend = anfc_runtime_suspend,
+};
 
 static struct platform_driver anfc_driver = {
 	.driver = {
 		.name = DRIVER_NAME,
 		.of_match_table = anfc_ids,
+		.pm	= &anfc_pm_ops,
 	},
 	.probe = anfc_probe,
 	.remove = anfc_remove,
-- 
1.7.5.4

