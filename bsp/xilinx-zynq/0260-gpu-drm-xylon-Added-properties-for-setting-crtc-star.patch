From d3009048aad0bbb27b8d4258051b86292e6c2610 Mon Sep 17 00:00:00 2001
From: Davor Joja <[davorjoja@logicbricks.com]>
Date: Fri, 11 Jul 2014 14:19:56 -0700
Subject: [PATCH 260/290] gpu: drm: xylon: Added properties for setting crtc
 start coordinates

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Added properties for setting crtc private plane screen start coordinates
position to any position (x,y) on the screen.
Till now only allowed screen start coordinates were at position (0,0).

Signed-off-by: Davor Joja <davorjoja@logicbricks.com>
(cherry picked from commit cb225630f4abe547bb8627d79c557aad2f18bf34)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/xylon/xylon_crtc.c           | 68 +++++++++++++++++++++++++++-
 drivers/gpu/drm/xylon/xylon_logicvc.c        |  4 ++
 drivers/gpu/drm/xylon/xylon_logicvc_helper.h |  3 +-
 3 files changed, 73 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/xylon/xylon_crtc.c b/drivers/gpu/drm/xylon/xylon_crtc.c
index 2a6e113..44ed315 100644
--- a/drivers/gpu/drm/xylon/xylon_crtc.c
+++ b/drivers/gpu/drm/xylon/xylon_crtc.c
@@ -46,6 +46,8 @@ struct xylon_drm_crtc_properties {
 	struct drm_property *pixel_format;
 	struct drm_property *transparency;
 	struct drm_property *transparent_color;
+	struct drm_property *position_x;
+	struct drm_property *position_y;
 };
 
 struct xylon_drm_crtc {
@@ -118,6 +120,39 @@ static void xylon_drm_crtc_commit(struct drm_crtc *base_crtc)
 	xylon_cvc_enable(crtc->cvc, &crtc->vmode);
 
 	xylon_drm_crtc_dpms(base_crtc, DRM_MODE_DPMS_ON);
+
+	if (xylon_cvc_get_info(crtc->cvc, LOGICVC_INFO_SIZE_POSITION, 0)) {
+		struct xylon_drm_crtc_properties *p = &crtc->properties;
+
+		if (p->position_x) {
+			drm_object_property_set_value(&base_crtc->base,
+						      p->position_x,
+						      0);
+			p->position_x->values[1] = crtc->vmode.hactive;
+		} else {
+			xylon_drm_property_create_range(base_crtc->dev,
+							&base_crtc->base,
+							&p->position_x,
+							"position_x",
+							0,
+							crtc->vmode.hactive,
+							0);
+		}
+		if (p->position_y) {
+			drm_object_property_set_value(&base_crtc->base,
+						      p->position_y,
+						      0);
+			p->position_y->values[1] = crtc->vmode.vactive;
+		} else {
+			xylon_drm_property_create_range(base_crtc->dev,
+							&base_crtc->base,
+							&p->position_y,
+							"position_y",
+							0,
+							crtc->vmode.vactive,
+							0);
+		}
+	}
 }
 
 static bool xylon_drm_crtc_mode_fixup(struct drm_crtc *base_crtc,
@@ -287,10 +322,14 @@ static int xylon_drm_crtc_set_property(struct drm_crtc *base_crtc,
 				       struct drm_property *property,
 				       u64 value)
 {
+	struct drm_device *dev;
+	struct drm_mode_object *obj;
 	struct xylon_drm_crtc *crtc = to_xylon_crtc(base_crtc);
 	struct xylon_drm_crtc_properties *props = &crtc->properties;
 	struct xylon_drm_plane_op op;
 	u32 val = (u32)value;
+	s64 x = -1;
+	s64 y = -1;
 
 	if (property == props->bg_color) {
 		op.id = XYLON_DRM_PLANE_OP_ID_BACKGROUND_COLOR;
@@ -324,11 +363,38 @@ static int xylon_drm_crtc_set_property(struct drm_crtc *base_crtc,
 	} else if (property == props->transparent_color) {
 		op.id = XYLON_DRM_PLANE_OP_ID_TRANSPARENT_COLOR;
 		op.param = val;
+	} else if (property == props->position_x) {
+		dev = base_crtc->dev;
+		obj = &base_crtc->base;
+
+		x = val;
+		drm_object_property_get_value(obj, props->position_y,
+					      (u64 *)&y);
+	} else if (property == props->position_y) {
+		dev = base_crtc->dev;
+		obj = &base_crtc->base;
+
+		drm_object_property_get_value(obj, props->position_x,
+					      (u64 *)&x);
+		y = val;
 	} else {
 		return -EINVAL;
 	}
 
-	xylon_drm_plane_op(crtc->private, &op);
+	if (x > -1 && y > -1) {
+		if (xylon_drm_plane_fb_set(crtc->private, base_crtc->fb,
+					   (u32)x, (u32)y,
+					   base_crtc->hwmode.hdisplay - x,
+					   base_crtc->hwmode.vdisplay - y,
+					   base_crtc->x, base_crtc->y,
+					   base_crtc->hwmode.hdisplay - x,
+					   base_crtc->hwmode.vdisplay - y))
+			DRM_ERROR("failed set position\n");
+		else
+			xylon_drm_plane_commit(crtc->private);
+	} else {
+		xylon_drm_plane_op(crtc->private, &op);
+	}
 
 	return 0;
 }
diff --git a/drivers/gpu/drm/xylon/xylon_logicvc.c b/drivers/gpu/drm/xylon/xylon_logicvc.c
index 5550a47..42d4b49 100644
--- a/drivers/gpu/drm/xylon/xylon_logicvc.c
+++ b/drivers/gpu/drm/xylon/xylon_logicvc.c
@@ -884,6 +884,10 @@ bool xylon_cvc_get_info(struct xylon_cvc *cvc, enum xylon_cvc_info info,
 		if (cvc->ctrl & LOGICVC_CTRL_PIXEL_DATA_TRIGGER_INVERT)
 			return true;
 		break;
+	case LOGICVC_INFO_SIZE_POSITION:
+		if (cvc->flags & LOGICVC_FLAGS_SIZE_POSITION)
+			return true;
+		break;
 	}
 
 	return false;
diff --git a/drivers/gpu/drm/xylon/xylon_logicvc_helper.h b/drivers/gpu/drm/xylon/xylon_logicvc_helper.h
index a050e35..7e9b724 100644
--- a/drivers/gpu/drm/xylon/xylon_logicvc_helper.h
+++ b/drivers/gpu/drm/xylon/xylon_logicvc_helper.h
@@ -25,7 +25,8 @@ enum xylon_cvc_info {
 	LOGICVC_INFO_LAYER_COLOR_TRANSPARENCY,
 	LOGICVC_INFO_LAYER_UPDATE,
 	LOGICVC_INFO_PIXEL_DATA_INVERT,
-	LOGICVC_INFO_PIXEL_DATA_TRIGGER_INVERT
+	LOGICVC_INFO_PIXEL_DATA_TRIGGER_INVERT,
+	LOGICVC_INFO_SIZE_POSITION
 };
 
 struct xylon_cvc;
-- 
2.0.2

