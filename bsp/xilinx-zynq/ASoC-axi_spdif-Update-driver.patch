From 4d745d924f232858de0549e87e4944dbd03147f3 Mon Sep 17 00:00:00 2001
From: Lars-Peter Clausen <lars@metafoo.de>
Date: Tue, 25 Jun 2013 15:01:36 +0200
Subject: [PATCH 267/509] ASoC: axi_spdif: Update driver

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 7ae678dea7d721b36eccb1c9f64b215c6248b037

  * Use regmap for IO access
  * Use the clock framework
  * Allow all sample rates that the design supports

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 sound/soc/xlnx/Kconfig     |    1 +
 sound/soc/xlnx/axi-spdif.c |  142 +++++++++++++++++++++++---------------------
 2 files changed, 75 insertions(+), 68 deletions(-)

diff --git a/sound/soc/xlnx/Kconfig b/sound/soc/xlnx/Kconfig
index 5ca89c0..a76ff7b 100644
--- a/sound/soc/xlnx/Kconfig
+++ b/sound/soc/xlnx/Kconfig
@@ -4,6 +4,7 @@ config SND_SOC_XILINX
 	select SND_SOC_GENERIC_DMAENGINE_PCM
 
 config SND_SOC_AXI_SPDIF
+	select REGMAP_MMIO
 	tristate
 
 config SND_SOC_ADI_AXI_I2S
diff --git a/sound/soc/xlnx/axi-spdif.c b/sound/soc/xlnx/axi-spdif.c
index 167e7b7..3014f30 100644
--- a/sound/soc/xlnx/axi-spdif.c
+++ b/sound/soc/xlnx/axi-spdif.c
@@ -20,9 +20,8 @@
 #include <linux/platform_device.h>
 #include <linux/slab.h>
 #include <linux/of.h>
-
-#include <linux/dma-mapping.h>
-#include <linux/debugfs.h>
+#include <linux/clk.h>
+#include <linux/regmap.h>
 
 #include <sound/core.h>
 #include <sound/pcm.h>
@@ -32,12 +31,14 @@
 #include <sound/dmaengine_pcm.h>
 
 struct axi_spdif {
-	void __iomem *base;
-
-	unsigned int clock;
+	struct regmap *regmap;
+	struct clk *clk;
+	struct clk *clk_spdif;
 
-	struct debugfs_regset32 regset;
 	struct snd_dmaengine_dai_dma_data dma_data;
+
+	struct snd_ratnum ratnum;
+	struct snd_pcm_hw_constraint_ratnums rate_constraints;
 };
 
 #define AXI_SPDIF_REG_CTRL	0x0
@@ -46,53 +47,37 @@ struct axi_spdif {
 
 #define AXI_SPDIF_CTRL_TXDATA BIT(1)
 #define AXI_SPDIF_CTRL_TXEN BIT(0)
-#define AXI_SPDIF_CTRL_RATIO_OFFSET 8
-#define AXI_SPDIF_CTRL_RATIO_MASK (0xff << 8)
+#define AXI_SPDIF_CTRL_CLKDIV_OFFSET 8
+#define AXI_SPDIF_CTRL_CLKDIV_MASK (0xff << 8)
 
 #define AXI_SPDIF_FREQ_44100	(0x0 << 6)
 #define AXI_SPDIF_FREQ_48000	(0x1 << 6)
 #define AXI_SPDIF_FREQ_32000	(0x2 << 6)
 #define AXI_SPDIF_FREQ_NA	(0x3 << 6)
 
-static struct debugfs_reg32 axi_spdif_debugfs_regs[] = {
-    { "Control", AXI_SPDIF_REG_CTRL },
-    { "Status", AXI_SPDIF_REG_STAT },
-};
-
-static inline uint32_t axi_spdif_read(const struct axi_spdif *spdif,
-	unsigned int reg)
-{
-	return readl(spdif->base + reg);
-}
-
-static inline void axi_spdif_write(const struct axi_spdif *spdif,
-	unsigned int reg, uint32_t value)
-{
-	writel(value, spdif->base + reg);
-}
-
 static int axi_spdif_trigger(struct snd_pcm_substream *substream, int cmd,
 	struct snd_soc_dai *dai)
 {
 	struct axi_spdif *spdif = snd_soc_dai_get_drvdata(dai);
-	uint32_t ctrl = axi_spdif_read(spdif, AXI_SPDIF_REG_CTRL);
+	unsigned int val;
 
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_RESUME:
 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-		ctrl |= AXI_SPDIF_CTRL_TXDATA;
+		val = AXI_SPDIF_CTRL_TXDATA;
 		break;
 	case SNDRV_PCM_TRIGGER_STOP:
 	case SNDRV_PCM_TRIGGER_SUSPEND:
 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
-		ctrl &= ~AXI_SPDIF_CTRL_TXDATA;
+		val = 0;
 		break;
 	default:
 		return -EINVAL;
 	}
 
-	axi_spdif_write(spdif, AXI_SPDIF_REG_CTRL, ctrl);
+	regmap_update_bits(spdif->regmap, AXI_SPDIF_REG_CTRL,
+		AXI_SPDIF_CTRL_TXDATA, val);
 
 	return 0;
 }
@@ -101,8 +86,8 @@ static int axi_spdif_hw_params(struct snd_pcm_substream *substream,
 	struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
 {
 	struct axi_spdif *spdif = snd_soc_dai_get_drvdata(dai);
-	uint32_t ctrl = axi_spdif_read(spdif, AXI_SPDIF_REG_CTRL);
-	unsigned int ratio, stat;
+	unsigned int rate = params_rate(params);
+	unsigned int clkdiv, stat;
 
 	switch (params_rate(params)) {
 	case 32000:
@@ -119,13 +104,12 @@ static int axi_spdif_hw_params(struct snd_pcm_substream *substream,
 		break;
 	}
 
-	ratio = DIV_ROUND_CLOSEST(spdif->clock, (params_rate(params) * 64 * 2)) - 1;
-
-	ctrl &= ~AXI_SPDIF_CTRL_RATIO_MASK;
-	ctrl |= ratio << AXI_SPDIF_CTRL_RATIO_OFFSET;
+	clkdiv = DIV_ROUND_CLOSEST(clk_get_rate(spdif->clk_spdif), rate * 64 * 2) - 1;
+	clkdiv <<= AXI_SPDIF_CTRL_CLKDIV_OFFSET;
 
-	axi_spdif_write(spdif, AXI_SPDIF_REG_STAT, stat);
-	axi_spdif_write(spdif, AXI_SPDIF_REG_CTRL, ctrl);
+	regmap_write(spdif->regmap, AXI_SPDIF_REG_STAT, stat);
+	regmap_update_bits(spdif->regmap, AXI_SPDIF_REG_CTRL,
+		AXI_SPDIF_CTRL_CLKDIV_MASK, clkdiv);
 
 	return 0;
 }
@@ -139,38 +123,38 @@ static int axi_spdif_dai_probe(struct snd_soc_dai *dai)
 	return 0;
 }
 
-/*
 static int axi_spdif_startup(struct snd_pcm_substream *substream,
 	struct snd_soc_dai *dai)
 {
 	struct axi_spdif *spdif = snd_soc_dai_get_drvdata(dai);
-	uint32_t ctrl;
+	int ret;
 
-	if (dai->active)
-		return 0;
+	regmap_update_bits(spdif->regmap, AXI_SPDIF_REG_CTRL,
+		AXI_SPDIF_CTRL_TXEN, AXI_SPDIF_CTRL_TXEN);
 
-	ctrl = axi_spdif_read(spdif, AXI_SPDIF_REG_CTRL);
-	ctrl |= AXI_SPDIF_CTRL_TXEN;
-	axi_spdif_write(spdif, AXI_SPDIF_REG_CTRL, ctrl);
+	ret = snd_pcm_hw_constraint_ratnums(substream->runtime, 0,
+			   SNDRV_PCM_HW_PARAM_RATE,
+			   &spdif->rate_constraints);
+	if (ret)
+		return ret;
 
-	return 0;
+	return clk_prepare_enable(spdif->clk_spdif);
 }
 
 static void axi_spdif_shutdown(struct snd_pcm_substream *substream,
 	struct snd_soc_dai *dai)
 {
 	struct axi_spdif *spdif = snd_soc_dai_get_drvdata(dai);
-	uint32_t ctrl;
 
-	if (dai->active)
-		return;
+	regmap_update_bits(spdif->regmap, AXI_SPDIF_REG_CTRL,
+		AXI_SPDIF_CTRL_TXEN, 0);
 
-	ctrl = axi_spdif_read(spdif, AXI_SPDIF_REG_CTRL);
-	ctrl &= ~AXI_SPDIF_CTRL_TXEN;
-	axi_spdif_write(spdif, AXI_SPDIF_REG_CTRL, ctrl);
+	clk_disable_unprepare(spdif->clk_spdif);
 }
-*/
+
 static const struct snd_soc_dai_ops axi_spdif_dai_ops = {
+	.startup = axi_spdif_startup,
+	.shutdown = axi_spdif_shutdown,
 	.trigger = axi_spdif_trigger,
 	.hw_params = axi_spdif_hw_params,
 };
@@ -180,51 +164,73 @@ static struct snd_soc_dai_driver axi_spdif_dai = {
 	.playback = {
 		.channels_min = 2,
 		.channels_max = 2,
-		.rates = SNDRV_PCM_RATE_48000,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
 		.formats = SNDRV_PCM_FMTBIT_S16_LE,
 	},
 	.ops = &axi_spdif_dai_ops,
 };
 
+static const struct regmap_config axi_spdif_regmap_config = {
+	.reg_bits = 32,
+	.reg_stride = 4,
+	.val_bits = 32,
+	.max_register = AXI_SPDIF_REG_STAT,
+};
+
 static int axi_spdif_probe(struct platform_device *pdev)
 {
 	struct axi_spdif *spdif;
 	struct resource *res;
+	void __iomem *base;
 	int ret;
 
 	spdif = devm_kzalloc(&pdev->dev, sizeof(*spdif), GFP_KERNEL);
-
 	if (!spdif)
 		return -ENOMEM;
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-
-	spdif->base = devm_request_and_ioremap(&pdev->dev, res);
-	if (!spdif->base)
+	base = devm_request_and_ioremap(&pdev->dev, res);
+	if (!base)
 		return -EBUSY;
 
+	spdif->regmap = devm_regmap_init_mmio(&pdev->dev, base,
+					    &axi_spdif_regmap_config);
+	if (IS_ERR(spdif->regmap))
+		return PTR_ERR(spdif->regmap);
+
+	spdif->clk = devm_clk_get(&pdev->dev, "axi");
+	if (IS_ERR(spdif->clk))
+		return PTR_ERR(spdif->clk);
+
+	spdif->clk_spdif = devm_clk_get(&pdev->dev, "spdif");
+	if (IS_ERR(spdif->clk_spdif))
+		return PTR_ERR(spdif->clk_spdif);
+
+	ret = clk_prepare_enable(spdif->clk);
+	if (ret)
+	    return ret;
+
 	spdif->dma_data.addr = res->start + AXI_SPDIF_REG_TX_FIFO;
 	spdif->dma_data.addr_width = 4;
 	spdif->dma_data.maxburst = 1;
 
-	platform_set_drvdata(pdev, spdif);
+	spdif->ratnum.num = clk_get_rate(spdif->clk_spdif) / 128;
+	spdif->ratnum.den_step = 1;
+	spdif->ratnum.den_min = 1;
+	spdif->ratnum.den_max = 64;
 
-	of_property_read_u32(pdev->dev.of_node, "clock-frequency", &spdif->clock);
+	spdif->rate_constraints.rats = &spdif->ratnum;
+	spdif->rate_constraints.nrats = 1;
 
-	ret = snd_soc_register_dai(&pdev->dev, &axi_spdif_dai);
+	platform_set_drvdata(pdev, spdif);
 
+	ret = snd_soc_register_dai(&pdev->dev, &axi_spdif_dai);
 	if (ret) {
 		dev_err(&pdev->dev, "Failed to register DAI\n");
 		return ret;
 	}
 
-	spdif->regset.base = spdif->base;
-	spdif->regset.regs = axi_spdif_debugfs_regs;
-	spdif->regset.nregs = ARRAY_SIZE(axi_spdif_debugfs_regs);
-
-	debugfs_create_regset32(dev_name(&pdev->dev), 0777, NULL, &spdif->regset);
-
-	axi_spdif_write(spdif, AXI_SPDIF_REG_CTRL, AXI_SPDIF_CTRL_TXEN);
+	regmap_write(spdif->regmap, AXI_SPDIF_REG_CTRL, AXI_SPDIF_CTRL_TXEN);
 
 	return snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
 }
-- 
1.7.5.4

