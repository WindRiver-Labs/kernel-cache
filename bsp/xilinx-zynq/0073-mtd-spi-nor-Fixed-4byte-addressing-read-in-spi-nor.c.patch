From 461e51c4757c32b04a5f2e0d1c8e7dba6b6784f1 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Thu, 15 Oct 2015 14:12:18 +0800
Subject: [PATCH 73/80] mtd: spi-nor: Fixed 4byte addressing read in spi-nor.c

This patch partly comes from:
  https://github.com/Xilinx/linux-xlnx.git

Added wait_till_ready before reading in spi_nor_read_ext to be in
sync with 3.19 merge and commit 03559b75.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/mtd/spi-nor/spi-nor.c | 32 ++++++++++++++++++++++++--------
 1 file changed, 24 insertions(+), 8 deletions(-)

diff --git a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
index ea0a4bc..bde1959 100644
--- a/drivers/mtd/spi-nor/spi-nor.c
+++ b/drivers/mtd/spi-nor/spi-nor.c
@@ -1016,6 +1016,7 @@ static int spi_nor_read_ext(struct mtd_info *mtd, loff_t from, size_t len,
 	u32 read_count = 0;
 	u32 rem_bank_len = 0;
 	u8 bank = 0;
+	u8 stack_shift = 0;
 	int ret;
 
 #define OFFSET_16_MB 0x1000000
@@ -1025,18 +1026,20 @@ static int spi_nor_read_ext(struct mtd_info *mtd, loff_t from, size_t len,
 	ret = spi_nor_lock_and_prep(nor, SPI_NOR_OPS_READ);
 	if (ret)
 		return ret;
-	if (nor->addr_width == 4) {
-		ret = nor->read(nor, from, len, retlen, buf);
-		goto read_err;
-	}
+	if (nor->isparallel)
+		nor->spi->master->flags |= SPI_DATA_STRIPE;
+
 	while (len) {
-		bank = addr / (OFFSET_16_MB << nor->shift);
-		rem_bank_len = ((OFFSET_16_MB << nor->shift) * (bank + 1)) -
-				addr;
+		if (nor->addr_width == 3) {
+			bank = addr / (OFFSET_16_MB << nor->shift);
+			rem_bank_len = ((OFFSET_16_MB << nor->shift) *
+							(bank + 1)) - addr;
+		}
 		offset = addr;
 		if (nor->isparallel == 1)
 			offset /= 2;
 		if (nor->isstacked == 1) {
+			stack_shift = 1;
 			if (offset >= (nor->mtd->size / 2)) {
 				offset = offset - (nor->mtd->size / 2);
 				nor->spi->master->flags |= SPI_MASTER_U_PAGE;
@@ -1044,12 +1047,23 @@ static int spi_nor_read_ext(struct mtd_info *mtd, loff_t from, size_t len,
 				nor->spi->master->flags &= ~SPI_MASTER_U_PAGE;
 			}
 		}
-		write_ear(nor, offset);
+		/* Die cross over issue is not handled */
+		if (nor->addr_width == 4) {
+			rem_bank_len = (nor->mtd->size >> stack_shift) -
+					(offset << nor->shift);
+		}
+		if (nor->addr_width == 3)
+			write_ear(nor, offset);
 		if (len < rem_bank_len)
 			read_len = len;
 		else
 			read_len = rem_bank_len;
 
+		/* Wait till previous write/erase is done. */
+		ret = spi_nor_wait_till_ready(nor);
+		if (ret)
+			goto read_err;
+
 		ret = spi_nor_read(mtd, offset, read_len, &actual_len, buf);
 		if (ret)
 			return ret;
@@ -1063,6 +1077,8 @@ static int spi_nor_read_ext(struct mtd_info *mtd, loff_t from, size_t len,
 	*retlen = read_count;
 
 read_err:
+	if (nor->isparallel)
+		nor->spi->master->flags &= ~SPI_DATA_STRIPE;
 	spi_nor_unlock_and_unprep(nor, SPI_NOR_OPS_READ);
 	return ret;
 }
-- 
2.0.2

