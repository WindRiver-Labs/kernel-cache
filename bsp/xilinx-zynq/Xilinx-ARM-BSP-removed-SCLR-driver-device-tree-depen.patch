From f80e27cec49a28e9e40a60143c11278514a41883 Mon Sep 17 00:00:00 2001
From: Liming Wang <liming.wang@windriver.com>
Date: Tue, 29 Jan 2013 14:13:08 +0800
Subject: [PATCH 48/50] Xilinx: ARM: BSP: removed SCLR driver device tree dependency

git://git.xilinx.com/linux-xlnx.git tag xilinx-14.3-build2-trd
commit 1d0591c894fa4139447a19db688977ec787a221d

This driver is part of the BSP and has no purpose in the
device tree. Now that other drivers are using it, the lack
of it in the device tree was causing kernel crashes.

Signed-off-by: John Linn <john.linn@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 arch/arm/mach-zynq/slcr.c |   43 ++++++++++++++++++-------------------------
 1 files changed, 18 insertions(+), 25 deletions(-)

diff --git a/arch/arm/mach-zynq/slcr.c b/arch/arm/mach-zynq/slcr.c
index 1d3291f..51fdfea 100644
--- a/arch/arm/mach-zynq/slcr.c
+++ b/arch/arm/mach-zynq/slcr.c
@@ -2207,25 +2207,23 @@ next_periph:
  **/
 static int __init xslcr_probe(struct platform_device *pdev)
 {
-	struct resource *res;
+	struct resource res;
 	int ret;
 
+	res.start = 0xF8000000;
+	res.end = 0xF8000FFF;
+
 	if (slcr) {
 		dev_err(&pdev->dev, "Device Busy, only 1 slcr instance "
 			"supported.\n");
 		return -EBUSY;
 	}
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (res == NULL) {
-		dev_err(&pdev->dev, "cannot find IO resource\n");
-		ret = -ENOENT;
-		goto err;
-	}
-
-	if (!request_mem_region(res->start, resource_size(res), pdev->name)) {
+	if (!request_mem_region(res.start,
+					res.end - res.start + 1,
+					DRIVER_NAME)) {
 		dev_err(&pdev->dev, "Couldn't lock memory region at %Lx\n",
-			(unsigned long long)res->start);
+			(unsigned long long)res.start);
 		return -EBUSY;
 	}
 
@@ -2237,7 +2235,7 @@ static int __init xslcr_probe(struct platform_device *pdev)
 		goto err_release;
 	}
 
-	slcr->regs = ioremap(res->start, resource_size(res));
+	slcr->regs = ioremap(res.start, (res.end - res.start + 1));
 	if (!slcr->regs) {
 		ret = -ENOMEM;
 		dev_err(&pdev->dev, "Unable to map I/O memory\n");
@@ -2276,7 +2274,7 @@ static int __init xslcr_probe(struct platform_device *pdev)
 	/* unlock the SLCR so that registers can be changed */
 	xslcr_writereg(slcr->regs + XSLCR_UNLOCK, 0xDF0D);
 
-	dev_info(&pdev->dev, "at 0x%08X mapped to 0x%08X\n", res->start,
+	dev_info(&pdev->dev, "at 0x%08X mapped to 0x%08X\n", res.start,
 		 (u32 __force)slcr->regs);
 	platform_set_drvdata(pdev, slcr);
 
@@ -2293,8 +2291,8 @@ err_iounmap:
 err_free:
 	kfree(slcr);
 err_release:
-	release_mem_region(res->start, resource_size(res));
-err:
+	release_mem_region(res.start, (res.end - res.start + 1));
+
 	return ret;
 }
 
@@ -2333,27 +2331,21 @@ static int __devexit xslcr_remove(struct platform_device *pdev)
 	return 0;
 }
 
-#ifdef CONFIG_OF
-static struct of_device_id xslcrps_of_match[] __devinitdata = {
-	{ .compatible = "xlnx,ps7-slcr-1.00.a", },
-	{ /* end of table */}
-};
-MODULE_DEVICE_TABLE(of, xgslcrps_of_match);
-#endif
-
 /* Driver Structure */
 static struct platform_driver xslcr_driver = {
 	.probe		= xslcr_probe,
 	.remove		= __devexit_p(xslcr_remove),
 	.driver		= {
-#ifdef CONFIG_OF
-		.of_match_table = xslcrps_of_match,
-#endif
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
 	},
 };
 
+struct platform_device xslcr_device = {
+	.name = "xslcr",
+	.dev.platform_data = NULL,
+};
+
 /**
  * xslcr_init -  Register the SLCR.
  *
@@ -2361,6 +2353,7 @@ static struct platform_driver xslcr_driver = {
  */
 static int __init xslcr_init(void)
 {
+	platform_device_register(&xslcr_device);
 	return platform_driver_register(&xslcr_driver);
 }
 arch_initcall(xslcr_init);
-- 
1.7.0

