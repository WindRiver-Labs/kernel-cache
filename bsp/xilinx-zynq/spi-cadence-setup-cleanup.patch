From 5c08aa2d5fdc1c58050bcc1e9c317a3efe2cd09d Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Tue, 6 May 2014 14:59:05 +0530
Subject: [PATCH 142/509] spi: cadence: setup cleanup

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 23950edf0ded60f2e09570f30482eeef7048c5b6

Make CPOL/CPHA configuration a separate function. Since these dont vary
between transfers and need to be set when preparing hw before enabling spi,
call from prep_transfer_hw.
Remove spi_setup as this is no longer required.

Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/spi/spi-cadence.c |   65 ++++++++++++++++++++++-----------------------
 1 files changed, 32 insertions(+), 33 deletions(-)

diff --git a/drivers/spi/spi-cadence.c b/drivers/spi/spi-cadence.c
index de6d0d5..e78ef64 100644
--- a/drivers/spi/spi-cadence.c
+++ b/drivers/spi/spi-cadence.c
@@ -200,12 +200,35 @@ static void cdns_spi_chipselect(struct spi_device *spi, bool is_high)
 }
 
 /**
- * cdns_spi_config_clock - Sets clock polarity, phase and frequency
+ * cdns_spi_config_clock_mode - Sets clock polarity and phase
+ * @spi:	Pointer to the spi_device structure
+ *
+ * Sets the requested clock polarity and phase.
+ */
+static void cdns_spi_config_clock_mode(struct spi_device *spi)
+{
+	struct cdns_spi *xspi = spi_master_get_devdata(spi->master);
+	u32 ctrl_reg;
+
+	ctrl_reg = cdns_spi_read(xspi, CDNS_SPI_CR_OFFSET);
+
+	/* Set the SPI clock phase and clock polarity */
+	ctrl_reg &= ~(CDNS_SPI_CR_CPHA_MASK | CDNS_SPI_CR_CPOL_MASK);
+	if (spi->mode & SPI_CPHA)
+		ctrl_reg |= CDNS_SPI_CR_CPHA_MASK;
+	if (spi->mode & SPI_CPOL)
+		ctrl_reg |= CDNS_SPI_CR_CPOL_MASK;
+
+	cdns_spi_write(xspi, CDNS_SPI_CR_OFFSET, ctrl_reg);
+}
+
+/**
+ * cdns_spi_config_clock_freq - Sets clock frequency
  * @spi:	Pointer to the spi_device structure
  * @transfer:	Pointer to the spi_transfer structure which provides
  *		information about next transfer setup parameters
  *
- * Sets the requested clock polarity, phase and frequency.
+ * Sets the requested clock frequency.
  * Note: If the requested frequency is not an exact match with what can be
  * obtained using the prescalar value the driver sets the clock frequency which
  * is lower than the requested frequency (maximum lower) for the transfer. If
@@ -213,8 +236,8 @@ static void cdns_spi_chipselect(struct spi_device *spi, bool is_high)
  * controller the driver will set the highest or lowest frequency supported by
  * controller.
  */
-static void cdns_spi_config_clock(struct spi_device *spi,
-		struct spi_transfer *transfer)
+static void cdns_spi_config_clock_freq(struct spi_device *spi,
+				       struct spi_transfer *transfer)
 {
 	struct cdns_spi *xspi = spi_master_get_devdata(spi->master);
 	u32 ctrl_reg, baud_rate_val;
@@ -222,17 +245,8 @@ static void cdns_spi_config_clock(struct spi_device *spi,
 
 	frequency = clk_get_rate(xspi->ref_clk);
 
-	cdns_spi_write(xspi, CDNS_SPI_ER_OFFSET,
-		       CDNS_SPI_ER_DISABLE_MASK);
 	ctrl_reg = cdns_spi_read(xspi, CDNS_SPI_CR_OFFSET);
 
-	/* Set the SPI clock phase and clock polarity */
-	ctrl_reg &= ~(CDNS_SPI_CR_CPHA_MASK | CDNS_SPI_CR_CPOL_MASK);
-	if (spi->mode & SPI_CPHA)
-		ctrl_reg |= CDNS_SPI_CR_CPHA_MASK;
-	if (spi->mode & SPI_CPOL)
-		ctrl_reg |= CDNS_SPI_CR_CPOL_MASK;
-
 	/* Set the clock frequency */
 	if (xspi->speed_hz != transfer->speed_hz) {
 		/* first valid value is 1 */
@@ -246,10 +260,7 @@ static void cdns_spi_config_clock(struct spi_device *spi,
 
 		xspi->speed_hz = frequency / (2 << baud_rate_val);
 	}
-
 	cdns_spi_write(xspi, CDNS_SPI_CR_OFFSET, ctrl_reg);
-	cdns_spi_write(xspi, CDNS_SPI_ER_OFFSET,
-		       CDNS_SPI_ER_ENABLE_MASK);
 }
 
 /**
@@ -264,11 +275,11 @@ static void cdns_spi_config_clock(struct spi_device *spi,
  * Return:	Always 0
  */
 static int cdns_spi_setup_transfer(struct spi_device *spi,
-		struct spi_transfer *transfer)
+				   struct spi_transfer *transfer)
 {
 	struct cdns_spi *xspi = spi_master_get_devdata(spi->master);
 
-	cdns_spi_config_clock(spi, transfer);
+	cdns_spi_config_clock_freq(spi, transfer);
 
 	dev_dbg(&spi->dev, "%s, mode %d, %u bits/w, %u clock speed\n",
 		__func__, spi->mode, spi->bits_per_word,
@@ -278,20 +289,6 @@ static int cdns_spi_setup_transfer(struct spi_device *spi,
 }
 
 /**
- * cdns_spi_setup - Configure the SPI controller
- * @spi:	Pointer to the spi_device structure
- *
- * Sets the operational mode of SPI controller for the next SPI transfer, sets
- * the baud rate and divisor value to setup the requested spi clock.
- *
- * Return:	0 on success and error value on error
- */
-static int cdns_spi_setup(struct spi_device *spi)
-{
-	return cdns_spi_setup_transfer(spi, NULL);
-}
-
-/**
  * cdns_spi_fill_tx_fifo - Fills the TX FIFO with as many bytes as possible
  * @xspi:	Pointer to the cdns_spi structure
  */
@@ -425,6 +422,8 @@ static int cdns_prepare_transfer_hardware(struct spi_master *master)
 	if (xspi->driver_state != CDNS_SPI_DRIVER_STATE_READY)
 		return -EINVAL;
 
+	cdns_spi_config_clock_mode(master->cur_msg->spi);
+
 	cdns_spi_write(xspi, CDNS_SPI_ER_OFFSET,
 		       CDNS_SPI_ER_ENABLE_MASK);
 
@@ -533,7 +532,7 @@ static int cdns_spi_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "couldn't determine num-chip-select\n");
 		goto clk_dis_all;
 	}
-	master->setup = cdns_spi_setup;
+
 	master->prepare_transfer_hardware = cdns_prepare_transfer_hardware;
 	master->transfer_one = cdns_transfer_one;
 	master->unprepare_transfer_hardware = cdns_unprepare_transfer_hardware;
-- 
1.7.5.4

