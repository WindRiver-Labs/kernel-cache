From 1a8cfde2291459fd3a030662352e975b471e625d Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Sat, 6 Apr 2013 11:56:40 +0200
Subject: [PATCH 094/793] xilinx_emacps: Fix handling of skb fragments (2/3)

In xemacps_start_xmit(), we cannot set tx_skb[].skb = NULL for a
fragment because xemacps_clean_rings() uses skb as a flag to call
dma_unmap_single().

Instead, we simply increment the skb's user count by skb_get() so that
dev_kfree_skb() can [and must] be called multiple times.

Note that the last dev_kfree_skb() in xemacps_clean_rings() will be
called after the last dma_unmap_single(), even if there is a wrap in
the middle of the packet; i.e., the socket buffer will be valid until
all DMA regions are unmapped.

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Tested-by: Anirudha Sarangi <anirudh@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   10 ++++------
 1 files changed, 4 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 0225e6d..d8d1e97 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1197,6 +1197,7 @@ static int xemacps_rx(struct net_local *lp, int budget)
 		new_skb = netdev_alloc_skb(lp->ndev, XEMACPS_RX_BUF_SIZE);
 		if (new_skb == NULL) {
 			dev_err(&lp->ndev->dev, "no memory for new sk_buff\n");
+			lp->rx_skb[lp->rx_bd_ci].skb = NULL;
 			return 0;
 		}
 		/* Get dma handle of skb->data */
@@ -1354,9 +1355,8 @@ static void xemacps_tx_poll(unsigned long data)
 
 		dma_unmap_single(&lp->pdev->dev, rp->mapping, rp->len,
 			DMA_TO_DEVICE);
-		if (skb != NULL)
-			dev_kfree_skb(skb);
 		rp->skb = NULL;
+		dev_kfree_skb(skb);
 		/* log tx completed packets and bytes, errors logs
 		 * are in other error counters.
 		 */
@@ -2055,12 +2055,10 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 			mapping = dma_map_single(&lp->pdev->dev, virt_addr,
 				len, DMA_TO_DEVICE);
 			frag++;
+			skb_get(skb);
 		}
 
-		if (i == 0)
-			lp->tx_skb[lp->tx_bd_tail].skb = skb;
-		else
-			lp->tx_skb[lp->tx_bd_tail].skb = NULL;
+		lp->tx_skb[lp->tx_bd_tail].skb = skb;
 		lp->tx_skb[lp->tx_bd_tail].mapping = mapping;
 		lp->tx_skb[lp->tx_bd_tail].len = len;
 		cur_p->addr = mapping;
-- 
1.7.5.4

