From 241bdb9fd95dac86f953de20529295612a484792 Mon Sep 17 00:00:00 2001
From: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
Date: Tue, 1 Dec 2015 15:50:10 +0530
Subject: [PATCH 303/793] media: xilinx: Create menu based control for
 foreground pattern

In TPG v7.0 cross-hair and moving box are mutually exclusive.
Menu based control allows the foreground pattern to have
exclusive states i.e  no overlay, moving box and cross-hair.

Signed-off-by: Radhey Shyam Pandey <radheys@xilinx.com>
Reviewed-by: Hyun Kwon <hyun.kwon@xilinx.com>
Tested-by: Christian Kohn <christian.kohn@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/media/platform/xilinx/xilinx-tpg.c |   63 +++++++++++----------------
 include/uapi/linux/xilinx-v4l2-controls.h  |    3 +
 2 files changed, 29 insertions(+), 37 deletions(-)

diff --git a/drivers/media/platform/xilinx/xilinx-tpg.c b/drivers/media/platform/xilinx/xilinx-tpg.c
index fe966b1..6dacaa7 100644
--- a/drivers/media/platform/xilinx/xilinx-tpg.c
+++ b/drivers/media/platform/xilinx/xilinx-tpg.c
@@ -136,8 +136,6 @@ struct xtpg_device {
 	struct v4l2_ctrl *hblank;
 	struct v4l2_ctrl *vblank;
 	struct v4l2_ctrl *pattern;
-	struct v4l2_ctrl *moving_box;
-	struct v4l2_ctrl *cross_hair;
 	bool streaming;
 	bool is_hls;
 
@@ -541,15 +539,7 @@ static int xtpg_hls_s_ctrl(struct v4l2_ctrl *ctrl)
 		xvip_clr_and_set(&xtpg->xvip, XTPG_HLS_BG_PATTERN,
 				 XTPG_PATTERN_MASK, ctrl->val);
 		return 0;
-	case V4L2_CID_XILINX_TPG_CROSS_HAIRS:
-		if (ctrl->val)
-			__v4l2_ctrl_s_ctrl(xtpg->moving_box, 0x0);
-		xvip_write(&xtpg->xvip, XTPG_HLS_FG_PATTERN,
-			   ctrl->val ? XTPG_HLS_FG_PATTERN_CROSS_HAIR : 0);
-		return 0;
-	case V4L2_CID_XILINX_TPG_MOVING_BOX:
-		if (ctrl->val)
-			__v4l2_ctrl_s_ctrl(xtpg->cross_hair, 0x0);
+	case V4L2_CID_XILINX_TPG_HLS_FG_PATTERN:
 		xvip_write(&xtpg->xvip, XTPG_HLS_FG_PATTERN, ctrl->val);
 		return 0;
 	case V4L2_CID_XILINX_TPG_COLOR_MASK:
@@ -671,6 +661,22 @@ static const char *const xtpg_hls_pattern_strings[] = {
 	"Black/White Checker Board",
 };
 
+static const char *const xtpg_hls_fg_strings[] = {
+	"No Overlay",
+	"Moving Box",
+	"Cross Hairs",
+};
+
+static const struct v4l2_ctrl_config xtpg_hls_fg_ctrl = {
+	.ops	= &xtpg_hls_ctrl_ops,
+	.id     = V4L2_CID_XILINX_TPG_HLS_FG_PATTERN,
+	.name   = "Test Pattern: Foreground Pattern",
+	.type   = V4L2_CTRL_TYPE_MENU,
+	.min	= 0,
+	.max	= ARRAY_SIZE(xtpg_hls_fg_strings) - 1,
+	.qmenu	= xtpg_hls_fg_strings,
+};
+
 static struct v4l2_ctrl_config xtpg_ctrls[] = {
 	{
 		.ops	= &xtpg_ctrl_ops,
@@ -840,24 +846,6 @@ static struct v4l2_ctrl_config xtpg_ctrls[] = {
 static struct v4l2_ctrl_config xtpg_hls_ctrls[] = {
 	{
 		.ops	= &xtpg_hls_ctrl_ops,
-		.id	= V4L2_CID_XILINX_TPG_CROSS_HAIRS,
-		.name	= "Test Pattern: Cross Hairs",
-		.type	= V4L2_CTRL_TYPE_BOOLEAN,
-		.min	= false,
-		.max	= true,
-		.step	= 1,
-		.def	= 0,
-	}, {
-		.ops	= &xtpg_hls_ctrl_ops,
-		.id	= V4L2_CID_XILINX_TPG_MOVING_BOX,
-		.name	= "Test Pattern: Moving Box",
-		.type	= V4L2_CTRL_TYPE_BOOLEAN,
-		.min	= false,
-		.max	= true,
-		.step	= 1,
-		.def	= 0,
-	}, {
-		.ops	= &xtpg_hls_ctrl_ops,
 		.id	= V4L2_CID_XILINX_TPG_COLOR_MASK,
 		.name	= "Test Pattern: Color Mask (RGB)",
 		.type	= V4L2_CTRL_TYPE_BITMASK,
@@ -1148,7 +1136,10 @@ static int xtpg_probe(struct platform_device *pdev)
 	if (ret < 0)
 		goto error;
 
-	v4l2_ctrl_handler_init(&xtpg->ctrl_handler, 3 + nctrls);
+	if (xtpg->is_hls)
+		v4l2_ctrl_handler_init(&xtpg->ctrl_handler, 4 + nctrls);
+	else
+		v4l2_ctrl_handler_init(&xtpg->ctrl_handler, 3 + nctrls);
 
 	xtpg->vblank = v4l2_ctrl_new_std(&xtpg->ctrl_handler, ctrl_ops,
 					 V4L2_CID_VBLANK, XTPG_MIN_VBLANK,
@@ -1157,7 +1148,7 @@ static int xtpg_probe(struct platform_device *pdev)
 					 V4L2_CID_HBLANK, XTPG_MIN_HBLANK,
 					 XTPG_MAX_HBLANK, 1, 100);
 
-	if (xtpg->is_hls)
+	if (xtpg->is_hls) {
 		xtpg->pattern =
 			v4l2_ctrl_new_std_menu_items(&xtpg->ctrl_handler,
 						     ctrl_ops,
@@ -1165,7 +1156,9 @@ static int xtpg_probe(struct platform_device *pdev)
 						     npatterns - 1,
 						     1, 9,
 						     xtpg_hls_pattern_strings);
-	else
+		v4l2_ctrl_new_custom(&xtpg->ctrl_handler,
+				     &xtpg_hls_fg_ctrl, NULL);
+	} else {
 		xtpg->pattern =
 			v4l2_ctrl_new_std_menu_items(&xtpg->ctrl_handler,
 						     ctrl_ops,
@@ -1173,6 +1166,7 @@ static int xtpg_probe(struct platform_device *pdev)
 						     npatterns - 1,
 						     1, 9,
 						     xtpg_pattern_strings);
+	}
 
 	for (i = 0; i < nctrls; i++)
 		v4l2_ctrl_new_custom(&xtpg->ctrl_handler,
@@ -1184,11 +1178,6 @@ static int xtpg_probe(struct platform_device *pdev)
 		goto error;
 	}
 
-	xtpg->moving_box = v4l2_ctrl_find(&xtpg->ctrl_handler,
-					  V4L2_CID_XILINX_TPG_MOVING_BOX);
-	xtpg->cross_hair = v4l2_ctrl_find(&xtpg->ctrl_handler,
-					  V4L2_CID_XILINX_TPG_CROSS_HAIRS);
-
 	subdev->ctrl_handler = &xtpg->ctrl_handler;
 
 	xtpg_update_pattern_control(xtpg, true, true);
diff --git a/include/uapi/linux/xilinx-v4l2-controls.h b/include/uapi/linux/xilinx-v4l2-controls.h
index fb495b9..0237d03 100644
--- a/include/uapi/linux/xilinx-v4l2-controls.h
+++ b/include/uapi/linux/xilinx-v4l2-controls.h
@@ -69,5 +69,8 @@
 #define V4L2_CID_XILINX_TPG_STUCK_PIXEL_THRESH	(V4L2_CID_XILINX_TPG + 16)
 /* Noise level */
 #define V4L2_CID_XILINX_TPG_NOISE_GAIN		(V4L2_CID_XILINX_TPG + 17)
+/* Foreground pattern (HLS)*/
+#define V4L2_CID_XILINX_TPG_HLS_FG_PATTERN     (V4L2_CID_XILINX_TPG + 18)
+
 
 #endif /* __UAPI_XILINX_V4L2_CONTROLS_H__ */
-- 
1.7.5.4

