From 4d05e0b385196bac098bc0129000e29a0b2d00ed Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Tue, 4 Mar 2014 11:55:37 -0800
Subject: [PATCH 074/456] drm: xilinx: crtc: Add properties for z-order and
 alpha values

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This patch adds z-order and alpha properties for CRTC. Those properties
are configured using the private plane of CRTC and the xilinx drm
plane functions. The properties are available when there are multiple
layers.

Signed-off-by: Hyun Kwon <hyunk@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit f34aa524476140988c1a7d79e8960bfdd36a8c21)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_crtc.c  |   77 +++++++++++++++++++++++++++++
 drivers/gpu/drm/xilinx/xilinx_drm_plane.c |   22 ++++++++
 drivers/gpu/drm/xilinx/xilinx_drm_plane.h |    3 +
 3 files changed, 102 insertions(+), 0 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
index 83e1a0a..eb5d895 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
@@ -45,6 +45,11 @@ struct xilinx_drm_crtc {
 	struct xilinx_vtc *vtc;
 	struct xilinx_drm_plane_manager *plane_manager;
 	int dpms;
+	unsigned int default_zpos;
+	unsigned int default_alpha;
+	unsigned int alpha;
+	struct drm_property *zpos_prop;
+	struct drm_property *alpha_prop;
 	struct drm_pending_vblank_event *event;
 };
 
@@ -318,6 +323,25 @@ static int xilinx_drm_crtc_page_flip(struct drm_crtc *base_crtc,
 	return 0;
 }
 
+/* set property of a plane */
+static int xilinx_drm_crtc_set_property(struct drm_crtc *base_crtc,
+					struct drm_property *property,
+					uint64_t val)
+{
+	struct xilinx_drm_crtc *crtc = to_xilinx_crtc(base_crtc);
+
+	if (property == crtc->zpos_prop)
+		xilinx_drm_plane_set_zpos(crtc->priv_plane, val);
+	else if (property == crtc->alpha_prop)
+		xilinx_drm_plane_set_alpha(crtc->priv_plane, val);
+	else
+		return -EINVAL;
+
+	drm_object_property_set_value(&base_crtc->base, property, val);
+
+	return 0;
+}
+
 /* vblank interrupt handler */
 static void xilinx_drm_crtc_vblank_handler(void *data)
 {
@@ -361,6 +385,24 @@ void xilinx_drm_crtc_restore(struct drm_crtc *base_crtc)
 {
 	struct xilinx_drm_crtc *crtc = to_xilinx_crtc(base_crtc);
 
+	/*
+	 * Reinitialize the property values, so correct values are read
+	 * for these properties.
+	 */
+	if (crtc->zpos_prop) {
+		xilinx_drm_plane_set_zpos(crtc->priv_plane, crtc->default_zpos);
+		drm_object_property_set_value(&base_crtc->base, crtc->zpos_prop,
+					      crtc->default_zpos);
+	}
+
+	if (crtc->alpha_prop) {
+		xilinx_drm_plane_set_alpha(crtc->priv_plane,
+					   crtc->default_alpha);
+		drm_object_property_set_value(&base_crtc->base,
+					      crtc->alpha_prop,
+					      crtc->default_alpha);
+	}
+
 	xilinx_drm_plane_restore(crtc->plane_manager);
 }
 
@@ -392,8 +434,41 @@ static struct drm_crtc_funcs xilinx_drm_crtc_funcs = {
 	.destroy	= xilinx_drm_crtc_destroy,
 	.set_config	= drm_crtc_helper_set_config,
 	.page_flip	= xilinx_drm_crtc_page_flip,
+	.set_property	= xilinx_drm_crtc_set_property,
 };
 
+/* attach crtc properties */
+static void xilinx_drm_crtc_attach_property(struct drm_crtc *base_crtc)
+{
+	struct xilinx_drm_crtc *crtc = to_xilinx_crtc(base_crtc);
+	int num_planes;
+
+	num_planes = xilinx_drm_plane_get_num_planes(crtc->plane_manager);
+	if (num_planes <= 1)
+		return;
+
+	crtc->zpos_prop = drm_property_create_range(base_crtc->dev, 0, "zpos",
+						    0, num_planes - 1);
+	if (crtc->zpos_prop) {
+		crtc->default_zpos =
+			xilinx_drm_plane_get_default_zpos(crtc->priv_plane);
+		drm_object_attach_property(&base_crtc->base, crtc->zpos_prop,
+					   crtc->default_zpos);
+		xilinx_drm_plane_set_zpos(crtc->priv_plane, crtc->default_zpos);
+	}
+
+	crtc->default_alpha = xilinx_drm_plane_get_max_alpha(crtc->priv_plane);
+	crtc->alpha_prop = drm_property_create_range(base_crtc->dev, 0,
+						      "alpha", 0,
+						      crtc->default_alpha);
+	if (crtc->alpha_prop) {
+		drm_object_attach_property(&base_crtc->base, crtc->alpha_prop,
+					   crtc->default_alpha);
+		xilinx_drm_plane_set_alpha(crtc->priv_plane,
+					   crtc->default_alpha);
+	}
+}
+
 /* create crtc */
 struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 {
@@ -485,6 +560,8 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 	}
 	drm_crtc_helper_add(&crtc->base, &xilinx_drm_crtc_helper_funcs);
 
+	xilinx_drm_crtc_attach_property(&crtc->base);
+
 	return &crtc->base;
 
 err_out:
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
index 4651ad1..0c371ff 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
@@ -467,6 +467,22 @@ int xilinx_drm_plane_get_max_width(struct drm_plane *base_plane)
 	return plane->manager->max_width;
 }
 
+/* get the max alpha value */
+unsigned int xilinx_drm_plane_get_max_alpha(struct drm_plane *base_plane)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+
+	return plane->manager->default_alpha;
+}
+
+/* get the default z-position value which is the plane id */
+unsigned int xilinx_drm_plane_get_default_zpos(struct drm_plane *base_plane)
+{
+	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+
+	return plane->id;
+}
+
 /* check if format is supported */
 bool xilinx_drm_plane_check_format(struct xilinx_drm_plane_manager *manager,
 				   uint32_t format)
@@ -481,6 +497,12 @@ bool xilinx_drm_plane_check_format(struct xilinx_drm_plane_manager *manager,
 	return false;
 }
 
+/* get the number of planes */
+int xilinx_drm_plane_get_num_planes(struct xilinx_drm_plane_manager *manager)
+{
+	return manager->num_planes;
+}
+
 /**
  * xilinx_drm_plane_restore - Restore the plane states
  * @manager: the plane manager
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_plane.h b/drivers/gpu/drm/xilinx/xilinx_drm_plane.h
index ca10d40..ec9301a 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_plane.h
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_plane.h
@@ -32,6 +32,8 @@ int xilinx_drm_plane_mode_set(struct drm_plane *base_plane,
 			      uint32_t src_w, uint32_t src_h);
 int xilinx_drm_plane_get_max_width(struct drm_plane *base_plane);
 uint32_t xilinx_drm_plane_get_format(struct drm_plane *base_plane);
+unsigned int xilinx_drm_plane_get_default_zpos(struct drm_plane *base_plane);
+unsigned int xilinx_drm_plane_get_max_alpha(struct drm_plane *base_plane);
 void xilinx_drm_plane_set_zpos(struct drm_plane *base_plane, unsigned int zpos);
 void xilinx_drm_plane_set_alpha(struct drm_plane *base_plane,
 				unsigned int alpha);
@@ -50,6 +52,7 @@ void xilinx_drm_plane_destroy_planes(struct xilinx_drm_plane_manager *manager);
 
 bool xilinx_drm_plane_check_format(struct xilinx_drm_plane_manager *manager,
 				   uint32_t format);
+int xilinx_drm_plane_get_num_planes(struct xilinx_drm_plane_manager *manager);
 
 void xilinx_drm_plane_restore(struct xilinx_drm_plane_manager *manager);
 
-- 
1.7.5.4

