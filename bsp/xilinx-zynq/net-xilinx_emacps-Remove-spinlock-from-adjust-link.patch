From 402e4220b0bfe3ce2799d09d3903660240fac954 Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Tue, 11 Dec 2012 10:50:07 +0100
Subject: [PATCH 067/793] net: xilinx_emacps: Remove spinlock from adjust link

Do not use spinlock in xemacps_adjust_link because
there are also mutexes in clk_round_rate function
which is causing deadlock.

Warning log:
======================================================
[ INFO: HARDIRQ-safe -> HARDIRQ-unsafe lock order detected ]
3.6.0-00023-g0988b6e #42 Tainted: G        W
------------------------------------------------------
kworker/0:1/10 [HC0[0]:SC0[0]:HE0:SE1] is trying to acquire:
 (prepare_lock){+.+.+.}, at: [<c02a5ed4>] clk_round_rate+0x1c/0x40

and this task is already holding:
 (&(&lp->lock)->rlock){-.....}, at: [<c023e5b0>] xemacps_adjust_link+0x1c/0x220
which would create a new lock dependency:
 (&(&lp->lock)->rlock){-.....} -> (prepare_lock){+.+.+.}

Also fix passing parameter to of_phy_connect.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |    7 +------
 1 files changed, 1 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index e64d660..07204f3 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -740,13 +740,10 @@ static void xemacps_adjust_link(struct net_device *ndev)
 {
 	struct net_local *lp = netdev_priv(ndev);
 	struct phy_device *phydev = lp->phy_dev;
-	unsigned long flags;
 	int status_change = 0;
 	u32 regval;
 	long rate;
 
-	spin_lock_irqsave(&lp->lock, flags);
-
 	if (phydev->link) {
 		if ((lp->speed != phydev->speed) ||
 			(lp->duplex != phydev->duplex)) {
@@ -800,8 +797,6 @@ static void xemacps_adjust_link(struct net_device *ndev)
 		status_change = 1;
 	}
 
-	spin_unlock_irqrestore(&lp->lock, flags);
-
 	if (status_change) {
 		if (phydev->link)
 			dev_info(&lp->pdev->dev, "link up (%d/%s)\n",
@@ -857,7 +852,7 @@ static int xemacps_mii_probe(struct net_device *ndev)
 	if (lp->phy_node) {
 		phydev = of_phy_connect(lp->ndev,
 					lp->phy_node,
-					xemacps_adjust_link,
+					&xemacps_adjust_link,
 					0,
 					PHY_INTERFACE_MODE_RGMII_ID);
 	}
-- 
1.7.5.4

