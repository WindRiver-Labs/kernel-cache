From e6d57ac93e98ae3fc3ba9852c7bb0e5a815ad1b2 Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Thu, 27 Mar 2014 15:10:32 +0530
Subject: [PATCH 056/182] GPIO: zynq: Remove all conditional compilations

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Remove #ifdef CONFIG_PM_RUNTIME and #ifdef CONFIG_PM_SLEEP.
Mark functions that may not be used __maybe_unused;
other functions defined by default.
Remove pm_runtime_init function and call pm_runtime_enable in probe.
Change the .pm accordingly.

Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 6a13a7e25ea474837e5e004f3d9f9e08b4720030)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpio/gpio-zynq.c |   31 +++++--------------------------
 1 files changed, 5 insertions(+), 26 deletions(-)

diff --git a/drivers/gpio/gpio-zynq.c b/drivers/gpio/gpio-zynq.c
index 1468754..37b6052 100644
--- a/drivers/gpio/gpio-zynq.c
+++ b/drivers/gpio/gpio-zynq.c
@@ -483,8 +483,7 @@ static int __maybe_unused zynq_gpio_resume(struct device *dev)
 	return 0;
 }
 
-#ifdef CONFIG_PM_RUNTIME
-static int zynq_gpio_runtime_suspend(struct device *dev)
+static int __maybe_unused zynq_gpio_runtime_suspend(struct device *dev)
 {
 	struct platform_device *pdev = to_platform_device(dev);
 	struct zynq_gpio *gpio = platform_get_drvdata(pdev);
@@ -494,7 +493,7 @@ static int zynq_gpio_runtime_suspend(struct device *dev)
 	return 0;
 }
 
-static int zynq_gpio_runtime_resume(struct device *dev)
+static int __maybe_unused zynq_gpio_runtime_resume(struct device *dev)
 {
 	struct platform_device *pdev = to_platform_device(dev);
 	struct zynq_gpio *gpio = platform_get_drvdata(pdev);
@@ -502,7 +501,7 @@ static int zynq_gpio_runtime_resume(struct device *dev)
 	return clk_enable(gpio->clk);
 }
 
-static int zynq_gpio_idle(struct device *dev)
+static int __maybe_unused zynq_gpio_idle(struct device *dev)
 {
 	return pm_schedule_suspend(dev, 1);
 }
@@ -525,31 +524,11 @@ static void zynq_gpio_free(struct gpio_chip *chip, unsigned offset)
 	pm_runtime_put_sync(chip->dev);
 }
 
-static void zynq_gpio_pm_runtime_init(struct platform_device *pdev)
-{
-	struct zynq_gpio *gpio = platform_get_drvdata(pdev);
-
-	clk_disable(gpio->clk);
-	pm_runtime_enable(&pdev->dev);
-}
-
-#else /* ! CONFIG_PM_RUNTIME */
-#define zynq_gpio_request	NULL
-#define zynq_gpio_free	NULL
-static void zynq_gpio_pm_runtime_init(struct platform_device *pdev) {}
-#endif /* ! CONFIG_PM_RUNTIME */
-
-#if defined(CONFIG_PM_RUNTIME) || defined(CONFIG_PM_SLEEP)
 static const struct dev_pm_ops zynq_gpio_dev_pm_ops = {
 	SET_SYSTEM_SLEEP_PM_OPS(zynq_gpio_suspend, zynq_gpio_resume)
 	SET_RUNTIME_PM_OPS(zynq_gpio_runtime_suspend, zynq_gpio_runtime_resume,
 			   zynq_gpio_idle)
 };
-#define ZYNQ_GPIO_PM	(&zynq_gpio_dev_pm_ops)
-
-#else /*! CONFIG_PM_RUNTIME || ! CONFIG_PM_SLEEP */
-#define ZYNQ_GPIO_PM	NULL
-#endif /*! CONFIG_PM_RUNTIME */
 
 /**
  * zynq_gpio_probe - Initialization method for a zynq_gpio device
@@ -655,7 +634,7 @@ static int zynq_gpio_probe(struct platform_device *pdev)
 	irq_set_handler_data(irq_num, (void *)gpio);
 	irq_set_chained_handler(irq_num, zynq_gpio_irqhandler);
 
-	zynq_gpio_pm_runtime_init(pdev);
+	pm_runtime_enable(&pdev->dev);
 
 	device_set_wakeup_capable(&pdev->dev, 1);
 
@@ -687,7 +666,7 @@ static struct platform_driver zynq_gpio_driver = {
 	.driver	= {
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
-		.pm	= ZYNQ_GPIO_PM,
+		.pm	= &zynq_gpio_dev_pm_ops,
 		.of_match_table = zynq_gpio_of_match,
 	},
 	.probe		= zynq_gpio_probe,
-- 
1.7.5.4

