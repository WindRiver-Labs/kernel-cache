From 3b42c21918a7d22aa4f6aac7f5493e8fe7ab616a Mon Sep 17 00:00:00 2001
From: Suneel <suneelg@xilinx.com>
Date: Thu, 12 Apr 2012 22:01:26 +0530
Subject: [PATCH 46/50] Xilinx: ARM: I2C: Add support for repeated start

git://git.xilinx.com/linux-xlnx.git tag xilinx-14.3-build2-trd
commit e3dc5ea35d7bffcfeb1b513529213e12fead5ba1

Implemented the bus hold flag logic which provides the repeated start
support for PS I2C controller. Bus hold flag is set if there are
more than one messages and also if the length requested is more than
fifo depth. It is cleared whenever it is last mesg or less than
fifo depth is being requested.

Signed-Off by: Suneel G <suneelg@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/i2c/busses/i2c-xilinx_ps.c |   56 +++++++++++++++++++++++++++++++----
 1 files changed, 49 insertions(+), 7 deletions(-)

diff --git a/drivers/i2c/busses/i2c-xilinx_ps.c b/drivers/i2c/busses/i2c-xilinx_ps.c
index 6803f11..8d73741 100644
--- a/drivers/i2c/busses/i2c-xilinx_ps.c
+++ b/drivers/i2c/busses/i2c-xilinx_ps.c
@@ -33,7 +33,7 @@
  *	instead of FIFO depth. This generated the second DATA interrupt as there
  *	are still outstanding bytes to be received.
  *
- *	This driver has no support for Repeated start.
+ *	The bus hold flag logic provides support for repeated start.
  *
  */
 
@@ -241,6 +241,17 @@ static irqreturn_t xi2cps_isr(int irq, void *ptr)
 				}
 			}
 		} else {
+			if (id->bus_hold_flag == 0) {
+				/* Clear the hold bus bit */
+				ctrl_reg =
+				xi2cps_readreg(XI2CPS_CR_OFFSET);
+				if ((ctrl_reg & XI2CPS_CR_HOLD_BUS_MASK)
+					== XI2CPS_CR_HOLD_BUS_MASK)
+					xi2cps_writereg(
+					(ctrl_reg &
+					(~XI2CPS_CR_HOLD_BUS_MASK)),
+					XI2CPS_CR_OFFSET);
+			}
 		/*
 		 * If the device is receiving data, then signal the completion
 		 * of transaction and read the data present in the FIFO.
@@ -270,6 +281,7 @@ static irqreturn_t xi2cps_isr(int irq, void *ptr)
 static void xi2cps_mrecv(struct xi2cps *id)
 {
 	unsigned int ctrl_reg;
+	unsigned int isr_status;
 
 	id->p_recv_buf = id->p_msg->buf;
 	id->recv_count = id->p_msg->len;
@@ -283,12 +295,14 @@ static void xi2cps_mrecv(struct xi2cps *id)
 	ctrl_reg = xi2cps_readreg(XI2CPS_CR_OFFSET);
 	ctrl_reg |= (XI2CPS_CR_RW_MASK | XI2CPS_CR_CLR_FIFO_MASK);
 
-	if (id->recv_count > XI2CPS_FIFO_DEPTH || id->bus_hold_flag)
+	if (id->recv_count > XI2CPS_FIFO_DEPTH)
 		ctrl_reg |= XI2CPS_CR_HOLD_BUS_MASK;
-	else
-		ctrl_reg &= ~XI2CPS_CR_HOLD_BUS_MASK;
 
 	xi2cps_writereg(ctrl_reg, XI2CPS_CR_OFFSET);
+
+	isr_status = xi2cps_readreg(XI2CPS_ISR_OFFSET);
+	xi2cps_writereg(isr_status, XI2CPS_ISR_OFFSET);
+
 	xi2cps_writereg((id->p_msg->addr & XI2CPS_ADDR_MASK),
 						XI2CPS_ADDR_OFFSET);
 	/*
@@ -300,9 +314,22 @@ static void xi2cps_mrecv(struct xi2cps *id)
 	if (id->recv_count > XI2CPS_FIFO_DEPTH)
 		xi2cps_writereg(XI2CPS_FIFO_DEPTH + 1,
 				XI2CPS_XFER_SIZE_OFFSET);
-	else
+	else {
 		xi2cps_writereg(id->recv_count, XI2CPS_XFER_SIZE_OFFSET);
 
+	/*
+	 * Clear the bus hold flag if bytes to receive is less than FIFO size.
+	 */
+		if (id->bus_hold_flag == 0) {
+			/* Clear the hold bus bit */
+			ctrl_reg = xi2cps_readreg(XI2CPS_CR_OFFSET);
+			if ((ctrl_reg & XI2CPS_CR_HOLD_BUS_MASK)
+				== XI2CPS_CR_HOLD_BUS_MASK)
+				xi2cps_writereg(
+				(ctrl_reg & (~XI2CPS_CR_HOLD_BUS_MASK)),
+				XI2CPS_CR_OFFSET);
+		}
+	}
 	xi2cps_writereg(XI2CPS_ENABLED_INTR, XI2CPS_IER_OFFSET);
 }
 
@@ -358,6 +385,19 @@ static void xi2cps_msend(struct xi2cps *id)
 	xi2cps_writereg((id->p_msg->addr & XI2CPS_ADDR_MASK),
 						XI2CPS_ADDR_OFFSET);
 
+	/*
+	 * Clear the bus hold flag if there is no more data
+	 * and if it is the last message.
+	 */
+	if (id->bus_hold_flag == 0 && id->send_count == 0) {
+		/* Clear the hold bus bit */
+		ctrl_reg = xi2cps_readreg(XI2CPS_CR_OFFSET);
+		if ((ctrl_reg & XI2CPS_CR_HOLD_BUS_MASK)
+			== XI2CPS_CR_HOLD_BUS_MASK)
+			xi2cps_writereg(
+			(ctrl_reg & (~XI2CPS_CR_HOLD_BUS_MASK)),
+			XI2CPS_CR_OFFSET);
+	}
 	xi2cps_writereg(XI2CPS_ENABLED_INTR, XI2CPS_IER_OFFSET);
 }
 
@@ -403,9 +443,11 @@ static int xi2cps_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 	 * Set the flag to one when multiple messages are to be
 	 * processed with a repeated start.
 	 */
-	if (num > 1)
+	if (num > 1) {
 		id->bus_hold_flag = 1;
-	else
+		xi2cps_writereg((xi2cps_readreg(XI2CPS_CR_OFFSET) |
+				XI2CPS_CR_HOLD_BUS_MASK), XI2CPS_CR_OFFSET);
+	} else
 		id->bus_hold_flag = 0;
 
 	/* Process the msg one by one */
-- 
1.7.0

