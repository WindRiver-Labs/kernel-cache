From d2a5bdba95e1010f1b5a5fd626db52dcbd419492 Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Fri, 7 Mar 2014 18:58:22 +0530
Subject: [PATCH 074/509] SPI: zynq: Removed spinlocks

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 6bfa6a29c43926fecf1643ba3fc9b162d67ea043

Removed spinlock on control register.

Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/spi/spi-zynq.c |   25 +------------------------
 1 files changed, 1 insertions(+), 24 deletions(-)

diff --git a/drivers/spi/spi-zynq.c b/drivers/spi/spi-zynq.c
index c22f895..b772fc2 100644
--- a/drivers/spi/spi-zynq.c
+++ b/drivers/spi/spi-zynq.c
@@ -24,7 +24,6 @@
 #include <linux/of_address.h>
 #include <linux/platform_device.h>
 #include <linux/spi/spi.h>
-#include <linux/spinlock.h>
 
 /*
  * Name of this driver
@@ -114,7 +113,6 @@
  * @aperclk:		Pointer to the APER clock
  * @irq:		IRQ number
  * @speed_hz:		Current SPI bus clock speed in Hz
- * @ctrl_reg_lock:	Lock used for accessing configuration register
  * @txbuf:		Pointer	to the TX buffer
  * @rxbuf:		Pointer to the RX buffer
  * @remaining_bytes:	Number of bytes left to transfer
@@ -127,7 +125,6 @@ struct zynq_spi {
 	struct clk *aperclk;
 	int irq;
 	u32 speed_hz;
-	spinlock_t ctrl_reg_lock;
 	const u8 *txbuf;
 	u8 *rxbuf;
 	int remaining_bytes;
@@ -173,9 +170,6 @@ static void zynq_spi_chipselect(struct spi_device *spi, int is_on)
 {
 	struct zynq_spi *xspi = spi_master_get_devdata(spi->master);
 	u32 ctrl_reg;
-	unsigned long flags;
-
-	spin_lock_irqsave(&xspi->ctrl_reg_lock, flags);
 
 	ctrl_reg = zynq_spi_read(xspi->regs + ZYNQ_SPI_CR_OFFSET);
 
@@ -190,8 +184,6 @@ static void zynq_spi_chipselect(struct spi_device *spi, int is_on)
 	}
 
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_CR_OFFSET, ctrl_reg);
-
-	spin_unlock_irqrestore(&xspi->ctrl_reg_lock, flags);
 }
 
 /**
@@ -215,7 +207,7 @@ static void zynq_spi_config_clock(struct spi_device *spi,
 	u32 ctrl_reg;
 	u32 req_hz;
 	u32 baud_rate_val;
-	unsigned long flags, frequency;
+	unsigned long frequency;
 
 	req_hz = (transfer) ? transfer->speed_hz : spi->max_speed_hz;
 
@@ -224,8 +216,6 @@ static void zynq_spi_config_clock(struct spi_device *spi,
 
 	frequency = clk_get_rate(xspi->devclk);
 
-	spin_lock_irqsave(&xspi->ctrl_reg_lock, flags);
-
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_ER_OFFSET,
 		       ZYNQ_SPI_ER_DISABLE_MASK);
 	ctrl_reg = zynq_spi_read(xspi->regs + ZYNQ_SPI_CR_OFFSET);
@@ -254,8 +244,6 @@ static void zynq_spi_config_clock(struct spi_device *spi,
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_CR_OFFSET, ctrl_reg);
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_ER_OFFSET,
 		       ZYNQ_SPI_ER_ENABLE_MASK);
-
-	spin_unlock_irqrestore(&xspi->ctrl_reg_lock, flags);
 }
 
 /**
@@ -387,15 +375,11 @@ static irqreturn_t zynq_spi_irq(int irq, void *dev_id)
 			/* There is more data to send */
 			zynq_spi_fill_tx_fifo(xspi);
 
-			spin_lock(&xspi->ctrl_reg_lock);
-
 			ctrl_reg = zynq_spi_read(xspi->regs +
 						 ZYNQ_SPI_CR_OFFSET);
 			ctrl_reg |= ZYNQ_SPI_CR_MANSTRT_MASK;
 			zynq_spi_write(xspi->regs + ZYNQ_SPI_CR_OFFSET,
 				       ctrl_reg);
-
-			spin_unlock(&xspi->ctrl_reg_lock);
 		} else {
 			/* Transfer is completed */
 			zynq_spi_write(xspi->regs + ZYNQ_SPI_IDR_OFFSET,
@@ -441,7 +425,6 @@ static int zynq_spi_start_transfer(struct spi_device *spi,
 {
 	struct zynq_spi *xspi = spi_master_get_devdata(spi->master);
 	u32 ctrl_reg;
-	unsigned long flags;
 	int ret;
 
 	xspi->txbuf = transfer->tx_buf;
@@ -454,15 +437,11 @@ static int zynq_spi_start_transfer(struct spi_device *spi,
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_IER_OFFSET,
 		ZYNQ_SPI_IXR_DEFAULT_MASK);
 
-	spin_lock_irqsave(&xspi->ctrl_reg_lock, flags);
-
 	/* Start the transfer by enabling manual start bit */
 	ctrl_reg = zynq_spi_read(xspi->regs + ZYNQ_SPI_CR_OFFSET);
 	ctrl_reg |= ZYNQ_SPI_CR_MANSTRT_MASK;
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_CR_OFFSET, ctrl_reg);
 
-	spin_unlock_irqrestore(&xspi->ctrl_reg_lock, flags);
-
 	ret = wait_for_completion_interruptible_timeout(&xspi->done,
 			ZYNQ_SPI_TIMEOUT);
 	if (ret < 1) {
@@ -677,8 +656,6 @@ static int zynq_spi_probe(struct platform_device *pdev)
 
 	xspi->speed_hz = clk_get_rate(xspi->devclk) / 2;
 
-	spin_lock_init(&xspi->ctrl_reg_lock);
-
 	ret = spi_register_master(master);
 	if (ret) {
 		dev_err(&pdev->dev, "spi_register_master failed\n");
-- 
1.7.5.4

