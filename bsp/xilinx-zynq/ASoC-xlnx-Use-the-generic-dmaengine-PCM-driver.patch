From feba038d34cd9eefcd485dd154fb69ce4d095a01 Mon Sep 17 00:00:00 2001
From: Lars-Peter Clausen <lars@metafoo.de>
Date: Fri, 19 Apr 2013 16:55:46 +0200
Subject: [PATCH 263/509] ASoC: xlnx: Use the generic dmaengine PCM driver

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 2c27c117ea58d5c16a04490905c79460abafafef

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 sound/soc/xlnx/Kconfig        |    2 +-
 sound/soc/xlnx/Makefile       |    2 -
 sound/soc/xlnx/adv7511_hdmi.c |    4 +-
 sound/soc/xlnx/axi-spdif.c    |   16 ++++-
 sound/soc/xlnx/xilinx-pcm.c   |  168 -----------------------------------------
 5 files changed, 18 insertions(+), 174 deletions(-)
 delete mode 100644 sound/soc/xlnx/xilinx-pcm.c

diff --git a/sound/soc/xlnx/Kconfig b/sound/soc/xlnx/Kconfig
index 69192fc..5c18162 100644
--- a/sound/soc/xlnx/Kconfig
+++ b/sound/soc/xlnx/Kconfig
@@ -1,7 +1,7 @@
 config SND_SOC_XILINX
 	tristate "SoC Audio for Xilinx based boards"
 	depends on SND_SOC && (MICROBLAZE || ARCH_ZYNQ)
-	select SND_SOC_DMAENGINE_PCM
+	select SND_SOC_GENERIC_DMAENGINE_PCM
 
 config SND_SOC_AXI_SPDIF
 	tristate
diff --git a/sound/soc/xlnx/Makefile b/sound/soc/xlnx/Makefile
index d758bbd..2e372e2 100644
--- a/sound/soc/xlnx/Makefile
+++ b/sound/soc/xlnx/Makefile
@@ -1,7 +1,5 @@
-snd-soc-xilinx-pcm-objs := xilinx-pcm.o
 snd-soc-axi-spdif-objs := axi-spdif.o
 snd-soc-adv7511-hdmi-objs := adv7511_hdmi.o
 
-obj-$(CONFIG_SND_SOC_XILINX) += snd-soc-xilinx-pcm.o
 obj-$(CONFIG_SND_SOC_AXI_SPDIF) += snd-soc-axi-spdif.o
 obj-$(CONFIG_SND_SOC_ADV7511_HDMI) += snd-soc-adv7511-hdmi.o
diff --git a/sound/soc/xlnx/adv7511_hdmi.c b/sound/soc/xlnx/adv7511_hdmi.c
index a8779e5..bc561a4 100644
--- a/sound/soc/xlnx/adv7511_hdmi.c
+++ b/sound/soc/xlnx/adv7511_hdmi.c
@@ -57,8 +57,8 @@ static int adv7511_hdmi_probe(struct platform_device *pdev)
 
 	card->dev = &pdev->dev;
 
-	hdmi_dai_link.cpu_dai_of_node = of_parse_phandle(of_node, "cpu-dai", 0);
-	hdmi_dai_link.platform_of_node = of_parse_phandle(of_node, "pcm", 0);
+	hdmi_dai_link.cpu_of_node = of_parse_phandle(of_node, "cpu-dai", 0);
+	hdmi_dai_link.platform_of_node = hdmi_dai_link.cpu_of_node;
 
 	adapter_node = of_parse_phandle(of_node, "audio-codec-adapter", 0);
 	adapter = of_find_i2c_adapter_by_node(adapter_node);
diff --git a/sound/soc/xlnx/axi-spdif.c b/sound/soc/xlnx/axi-spdif.c
index 2e06d70..8213e54 100644
--- a/sound/soc/xlnx/axi-spdif.c
+++ b/sound/soc/xlnx/axi-spdif.c
@@ -29,6 +29,7 @@
 #include <sound/pcm_params.h>
 #include <sound/soc.h>
 #include <sound/initval.h>
+#include <sound/dmaengine_pcm.h>
 
 struct axi_spdif {
 	void __iomem *base;
@@ -36,6 +37,7 @@ struct axi_spdif {
 	unsigned int clock;
 
 	struct debugfs_regset32 regset;
+	struct snd_dmaengine_dai_dma_data dma_data;
 };
 
 #define AXI_SPDIF_REG_CTRL 0x0
@@ -126,6 +128,16 @@ static int axi_spdif_hw_params(struct snd_pcm_substream *substream,
 
 	return 0;
 }
+
+static int axi_spdif_dai_probe(struct snd_soc_dai *dai)
+{
+	struct axi_spdif *spdif = snd_soc_dai_get_drvdata(dai);
+
+	dai->playback_dma_data = &spdif->dma_data;
+
+	return 0;
+}
+
 /*
 static int axi_spdif_startup(struct snd_pcm_substream *substream,
 	struct snd_soc_dai *dai)
@@ -163,6 +175,7 @@ static const struct snd_soc_dai_ops axi_spdif_dai_ops = {
 };
 
 static struct snd_soc_dai_driver axi_spdif_dai = {
+	.probe = axi_spdif_dai_probe,
 	.playback = {
 		.channels_min = 2,
 		.channels_max = 2,
@@ -208,11 +221,12 @@ static int axi_spdif_probe(struct platform_device *pdev)
 
 	axi_spdif_write(spdif, AXI_SPDIF_REG_CTRL, AXI_SPDIF_CTRL_TXEN);
 
-	return 0;
+	return snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
 }
 
 static int axi_spdif_dev_remove(struct platform_device *pdev)
 {
+	snd_dmaengine_pcm_unregister(&pdev->dev);
 	snd_soc_unregister_dai(&pdev->dev);
 
 	return 0;
diff --git a/sound/soc/xlnx/xilinx-pcm.c b/sound/soc/xlnx/xilinx-pcm.c
deleted file mode 100644
index c873050..0000000
--- a/sound/soc/xlnx/xilinx-pcm.c
+++ /dev/null
@@ -1,168 +0,0 @@
-/*
- *  Copyright (C) 2012, Analog Devices Inc.
- *	Author: Lars-Peter Clausen <lars@metafoo.de>
- *
- *  This program is free software; you can redistribute it and/or modify it
- *  under  the terms of the GNU General  Public License as published by the
- *  Free Software Foundation;  either version 2 of the License, or (at your
- *  option) any later version.
- *
- *  You should have received a copy of the GNU General Public License along
- *  with this program; if not, write to the Free Software Foundation, Inc.,
- *  675 Mass Ave, Cambridge, MA 02139, USA.
- *
- */
-
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/platform_device.h>
-#include <linux/scatterlist.h>
-#include <linux/slab.h>
-#include <sound/core.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-#include <sound/dmaengine_pcm.h>
-#include <linux/dma-mapping.h>
-
-#include <linux/dmaengine.h>
-#include <linux/of.h>
-
-static const struct snd_pcm_hardware xlnx_pcm_hardware = {
-	.info = SNDRV_PCM_INFO_MMAP |
-		SNDRV_PCM_INFO_MMAP_VALID |
-		SNDRV_PCM_INFO_INTERLEAVED |
-		SNDRV_PCM_INFO_BLOCK_TRANSFER,
-	.formats = SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_S16_LE |
-		SNDRV_PCM_FMTBIT_S8,
-	.channels_min = 1,
-	.channels_max = UINT_MAX,
-	.period_bytes_min = 1024,
-	.period_bytes_max = (1 << 20) - 1,
-	.periods_min	  = 2,
-	.periods_max	  = UINT_MAX,
-	.buffer_bytes_max = ULONG_MAX,
-};
-
-static int xlnx_pcm_hw_params(struct snd_pcm_substream *substream,
-				  struct snd_pcm_hw_params *params)
-{
-	return snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(params));
-}
-
-struct xlnx_pcm_dma_params {
-	struct device_node *of_node;
-	int chan_id;
-};
-
-static bool xlnx_pcm_filter(struct dma_chan *chan, void *param)
-{
-	struct xlnx_pcm_dma_params *p = param;
-
-	return chan->device->dev->of_node == p->of_node &&
-		chan->chan_id == p->chan_id;
-}
-
-static int xlnx_pcm_open(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct device *dev = rtd->platform->dev;
-	struct xlnx_pcm_dma_params *params = dev_get_drvdata(dev);
-	int ret;
-
-	ret = snd_soc_set_runtime_hwparams(substream, &xlnx_pcm_hardware);
-	if (ret)
-		return ret;
-
-	return snd_dmaengine_pcm_open(substream, xlnx_pcm_filter, params);
-}
-
-static int xlnx_pcm_new(struct snd_soc_pcm_runtime *rtd)
-{
-	struct snd_card *card = rtd->card->snd_card;
-
-	return snd_pcm_lib_preallocate_pages_for_all(rtd->pcm,
-		SNDRV_DMA_TYPE_DEV,
-		card->dev, 1 * 1024 * 1024,
-		xlnx_pcm_hardware.buffer_bytes_max);
-}
-
-static int xlnx_pcm_mmap(struct snd_pcm_substream *substream,
-	struct vm_area_struct *vma)
-{
-	struct snd_pcm_runtime *runtime = substream->runtime;
-	return dma_mmap_coherent(substream->pcm->card->dev, vma,
-				     runtime->dma_area,
-				     runtime->dma_addr,
-				     runtime->dma_bytes);
-	return remap_pfn_range(vma, vma->vm_start,
-			substream->dma_buffer.addr >> PAGE_SHIFT,
-			vma->vm_end - vma->vm_start, vma->vm_page_prot);
-}
-
-static struct snd_pcm_ops xlnx_pcm_ops = {
-	.open		= xlnx_pcm_open,
-	.close		= snd_dmaengine_pcm_close,
-	.ioctl		= snd_pcm_lib_ioctl,
-	.hw_params	= xlnx_pcm_hw_params,
-	.hw_free	= snd_pcm_lib_free_pages,
-	.trigger	= snd_dmaengine_pcm_trigger,
-	.pointer	= snd_dmaengine_pcm_pointer,
-	.mmap		= xlnx_pcm_mmap,
-};
-
-static struct snd_soc_platform_driver xlnx_pcm_soc_platform = {
-	.pcm_new	= xlnx_pcm_new,
-/*	.pcm_free	= snd_pcm_lib_preallocate_free_for_all,*/
-	.ops		= &xlnx_pcm_ops,
-};
-
-static int xlnx_pcm_soc_platform_probe(struct platform_device *pdev)
-{
-	struct xlnx_pcm_dma_params *params;
-	struct of_phandle_args dma_spec;
-	int ret;
-
-	params = devm_kzalloc(&pdev->dev, sizeof(*params), GFP_KERNEL);
-	if (!params)
-		return -ENOMEM;
-
-	ret = of_parse_phandle_with_args(pdev->dev.of_node, "dma-request",
-		    "#dma-cells", 0, &dma_spec);
-	if (ret)
-		return ret;
-
-	params->of_node = dma_spec.np;
-	params->chan_id = dma_spec.args[0];
-
-	dev_set_drvdata(&pdev->dev, params);
-
-	return snd_soc_register_platform(&pdev->dev, &xlnx_pcm_soc_platform);
-}
-
-static int xlnx_pcm_soc_platform_remove(struct platform_device *pdev)
-{
-	snd_soc_unregister_platform(&pdev->dev);
-	return 0;
-}
-
-static const struct of_device_id xilinx_pcm_of_match[] = {
-	{ .compatible = "xilinx-pcm-audio", },
-	{},
-};
-MODULE_DEVICE_TABLE(of, xilinx_pcm_of_match);
-
-static struct platform_driver xlnx_pcm_driver = {
-	.driver = {
-			.name = "xilinx-pcm-audio",
-			.owner = THIS_MODULE,
-			.of_match_table = xilinx_pcm_of_match,
-	},
-	.probe = xlnx_pcm_soc_platform_probe,
-	.remove = xlnx_pcm_soc_platform_remove,
-};
-module_platform_driver(xlnx_pcm_driver);
-
-MODULE_AUTHOR("Lars-Peter Clausen <lars@metafoo.de>");
-MODULE_DESCRIPTION("Xilinx DMA engine based audio DMA driver");
-MODULE_LICENSE("GPL");
-- 
1.7.5.4

