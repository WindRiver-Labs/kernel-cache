From 0ff1f8f069ad136ba08d209c6274fe524a6929da Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Sat, 19 Jan 2013 12:42:20 +0530
Subject: [PATCH 078/793] xilinx_emacps: Fix for Rx lockdown HW issue

Under heavy traffic of small UDP packets, the Rx path in GEM
locks up. This is because of a HW bug w.r.t handling of resource errors.
Under a heavy resource errors scenario one of the internal counters in
the HW misbehaves resulting in a overflow condition and reducing the
availabe Rx SRAM. This patch provides a SW workaround for the HW bug.
The SW workaround involves first trying to avoid hitting the issue and
if eventually we hit it, we come out of the issue gracefully.
For every resource error, we set the bit 18 in the net_ctrl register
to flush a packet out of Rx SRAM. This avoids hitting the issue.
The SW workaround also uses the existing general purpose timer (100 msec)
(used to update the stats) and reads the received frame counter stat
register on each call to timer handler. If in two consecutive
timer handler calls, the counter do not increment, the SW toggles
the rx_enable bit to do a SW reset of the Rx logic.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
Reviewed-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   51 +++++++++++++++++++++++----
 1 files changed, 44 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 0dbadc8..2368944 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -242,6 +242,7 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
 						Nanoseconds */
 
 /* network control register bit definitions */
+#define XEMACPS_NWCTRL_FLUSH_DPRAM_MASK	0x00040000
 #define XEMACPS_NWCTRL_RXTSTAMP_MASK	0x00008000 /* RX Timestamp in CRC */
 #define XEMACPS_NWCTRL_ZEROPAUSETX_MASK	0x00001000 /* Transmit zero quantum
 						pause frame */
@@ -604,6 +605,7 @@ struct net_local {
 	unsigned ip_summed;
 	unsigned int enetnum;
 	unsigned int board_type;
+	unsigned int lastrxfrmscntr;
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
 	unsigned int ptpenetclk;
 #endif
@@ -1623,8 +1625,7 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 	 * routine, now it is time to enable it back.
 	 */
 	xemacps_write(lp->baseaddr, XEMACPS_IER_OFFSET,
-					(XEMACPS_IXR_FRAMERX_MASK |
-					XEMACPS_IXR_RX_ERR_MASK));
+					XEMACPS_IXR_FRAMERX_MASK);
 
 	return work_done;
 }
@@ -1735,6 +1736,7 @@ static irqreturn_t xemacps_interrupt(int irq, void *dev_id)
 	struct net_device *ndev = dev_id;
 	struct net_local *lp = netdev_priv(ndev);
 	u32 regisr;
+	u32 regctrl;
 
 	spin_lock(&lp->lock);
 	regisr = xemacps_read(lp->baseaddr, XEMACPS_ISR_OFFSET);
@@ -1750,11 +1752,18 @@ static irqreturn_t xemacps_interrupt(int irq, void *dev_id)
 				XEMACPS_IXR_TX_ERR_MASK)) {
 			xemacps_tx_poll(ndev);
 		}
-		if (regisr & (XEMACPS_IXR_FRAMERX_MASK |
-			XEMACPS_IXR_RX_ERR_MASK)) {
-			xemacps_write(lp->baseaddr, XEMACPS_IDR_OFFSET,
-					(XEMACPS_IXR_FRAMERX_MASK |
-					XEMACPS_IXR_RX_ERR_MASK));
+
+		if (regisr & XEMACPS_IXR_RXUSED_MASK) {
+			regctrl = xemacps_read(lp->baseaddr,
+					XEMACPS_NWCTRL_OFFSET);
+			regctrl |= XEMACPS_NWCTRL_FLUSH_DPRAM_MASK;
+			xemacps_write(lp->baseaddr,
+					XEMACPS_NWCTRL_OFFSET, regctrl);
+		}
+
+		if (regisr & XEMACPS_IXR_FRAMERX_MASK) {
+			xemacps_write(lp->baseaddr,
+				XEMACPS_IDR_OFFSET, XEMACPS_IXR_FRAMERX_MASK);
 			napi_schedule(&lp->napi);
 		}
 
@@ -2075,6 +2084,33 @@ static void xemacps_init_hw(struct net_local *lp)
 }
 
 /**
+ * xemacps_resetrx_for_no_rxdata - Resets the Rx if there is no data
+ * for a while (presently 100 msecs)
+ * @data: Used for net_local instance pointer
+ **/
+static void xemacps_resetrx_for_no_rxdata(unsigned long data)
+{
+	struct net_local *lp = (struct net_local *)data;
+	unsigned long regctrl;
+	unsigned long tempcntr;
+
+	spin_lock(&lp->lock);
+	tempcntr = xemacps_read(lp->baseaddr, XEMACPS_RXCNT_OFFSET);
+	if ((!tempcntr) && (!(lp->lastrxfrmscntr))) {
+		regctrl = xemacps_read(lp->baseaddr,
+				XEMACPS_NWCTRL_OFFSET);
+		regctrl &= (~XEMACPS_NWCTRL_RXEN_MASK);
+		xemacps_write(lp->baseaddr,
+				XEMACPS_NWCTRL_OFFSET, regctrl);
+		regctrl = xemacps_read(lp->baseaddr, XEMACPS_NWCTRL_OFFSET);
+		regctrl |= (XEMACPS_NWCTRL_RXEN_MASK);
+		xemacps_write(lp->baseaddr, XEMACPS_NWCTRL_OFFSET, regctrl);
+	}
+	lp->lastrxfrmscntr = tempcntr;
+	spin_unlock(&lp->lock);
+}
+
+/**
  * xemacps_update_stats - Update the statistic structure entries from
  * the corresponding emacps hardware statistic registers
  * @data: Used for net_local instance pointer
@@ -2152,6 +2188,7 @@ static void xemacps_gen_purpose_timerhandler(unsigned long data)
 	struct net_local *lp = (struct net_local *)data;
 
 	xemacps_update_stats(data);
+	xemacps_resetrx_for_no_rxdata(data);
 	mod_timer(&(lp->gen_purpose_timer),
 		jiffies + msecs_to_jiffies(XEAMCPS_GEN_PURPOSE_TIMER_LOAD));
 }
-- 
1.7.5.4

