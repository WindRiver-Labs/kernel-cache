From f07221c58e136e92825cffe7769364355ab58a46 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Tue, 1 Jul 2014 17:25:38 -0700
Subject: [PATCH 497/793] drm: xilinx: crtc / plane: Support the ZynqMP
 DisplayPort subsystem

Add the ZynqMP DisplayPort subsystem support to Xilinx DRM crtc and plane.

Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_crtc.c  |   86 ++++++++++++++-------
 drivers/gpu/drm/xilinx/xilinx_drm_plane.c |  119 +++++++++++++++++++++++++---
 2 files changed, 164 insertions(+), 41 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
index 3c2a5d1..7a3c3c9 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_crtc.c
@@ -29,6 +29,7 @@
 #include <video/videomode.h>
 
 #include "xilinx_drm_crtc.h"
+#include "xilinx_drm_dp_sub.h"
 #include "xilinx_drm_drv.h"
 #include "xilinx_drm_plane.h"
 
@@ -46,6 +47,7 @@ struct xilinx_drm_crtc {
 	int dpms;
 	unsigned int alpha;
 	struct drm_pending_vblank_event *event;
+	struct xilinx_drm_dp_sub *dp_sub;
 };
 
 #define to_xilinx_crtc(x)	container_of(x, struct xilinx_drm_crtc, base)
@@ -70,11 +72,14 @@ static void xilinx_drm_crtc_dpms(struct drm_crtc *base_crtc, int dpms)
 			xilinx_rgb2yuv_enable(crtc->rgb2yuv);
 		if (crtc->cresample)
 			xilinx_cresample_enable(crtc->cresample);
-		xilinx_vtc_enable(crtc->vtc);
+		if (crtc->vtc)
+			xilinx_vtc_enable(crtc->vtc);
 		break;
 	default:
-		xilinx_vtc_disable(crtc->vtc);
-		xilinx_vtc_reset(crtc->vtc);
+		if (crtc->vtc) {
+			xilinx_vtc_disable(crtc->vtc);
+			xilinx_vtc_reset(crtc->vtc);
+		}
 		if (crtc->cresample) {
 			xilinx_cresample_disable(crtc->cresample);
 			xilinx_cresample_reset(crtc->cresample);
@@ -135,18 +140,26 @@ static int xilinx_drm_crtc_mode_set(struct drm_crtc *base_crtc,
 		DRM_INFO("actual pixel clock rate(%d) is off by %ld\n",
 				adjusted_mode->clock, diff);
 
-	/* set video timing */
-	vm.hactive = adjusted_mode->hdisplay;
-	vm.hfront_porch = adjusted_mode->hsync_start - adjusted_mode->hdisplay;
-	vm.hback_porch = adjusted_mode->htotal - adjusted_mode->hsync_end;
-	vm.hsync_len = adjusted_mode->hsync_end - adjusted_mode->hsync_start;
-
-	vm.vactive = adjusted_mode->vdisplay;
-	vm.vfront_porch = adjusted_mode->vsync_start - adjusted_mode->vdisplay;
-	vm.vback_porch = adjusted_mode->vtotal - adjusted_mode->vsync_end;
-	vm.vsync_len = adjusted_mode->vsync_end - adjusted_mode->vsync_start;
-
-	xilinx_vtc_config_sig(crtc->vtc, &vm);
+	if (crtc->vtc) {
+		/* set video timing */
+		vm.hactive = adjusted_mode->hdisplay;
+		vm.hfront_porch = adjusted_mode->hsync_start -
+				  adjusted_mode->hdisplay;
+		vm.hback_porch = adjusted_mode->htotal -
+				 adjusted_mode->hsync_end;
+		vm.hsync_len = adjusted_mode->hsync_end -
+			       adjusted_mode->hsync_start;
+
+		vm.vactive = adjusted_mode->vdisplay;
+		vm.vfront_porch = adjusted_mode->vsync_start -
+				  adjusted_mode->vdisplay;
+		vm.vback_porch = adjusted_mode->vtotal -
+				 adjusted_mode->vsync_end;
+		vm.vsync_len = adjusted_mode->vsync_end -
+			       adjusted_mode->vsync_start;
+
+		xilinx_vtc_config_sig(crtc->vtc, &vm);
+	}
 
 	/* configure cresample and rgb2yuv */
 	if (crtc->cresample)
@@ -241,6 +254,9 @@ void xilinx_drm_crtc_destroy(struct drm_crtc *base_crtc)
 
 	drm_crtc_cleanup(base_crtc);
 
+	if (crtc->dp_sub)
+		xilinx_drm_dp_sub_put(crtc->dp_sub);
+
 	clk_disable_unprepare(crtc->pixel_clock);
 
 	xilinx_drm_plane_remove_manager(crtc->plane_manager);
@@ -342,8 +358,14 @@ void xilinx_drm_crtc_enable_vblank(struct drm_crtc *base_crtc)
 {
 	struct xilinx_drm_crtc *crtc = to_xilinx_crtc(base_crtc);
 
-	xilinx_vtc_enable_vblank_intr(crtc->vtc, xilinx_drm_crtc_vblank_handler,
-				      base_crtc);
+	if (crtc->vtc)
+		xilinx_vtc_enable_vblank_intr(crtc->vtc,
+					      xilinx_drm_crtc_vblank_handler,
+					      base_crtc);
+	if (crtc->dp_sub)
+		xilinx_drm_dp_sub_enable_vblank(crtc->dp_sub,
+						xilinx_drm_crtc_vblank_handler,
+						base_crtc);
 }
 
 /* disable vblank interrupt */
@@ -351,7 +373,10 @@ void xilinx_drm_crtc_disable_vblank(struct drm_crtc *base_crtc)
 {
 	struct xilinx_drm_crtc *crtc = to_xilinx_crtc(base_crtc);
 
-	xilinx_vtc_disable_vblank_intr(crtc->vtc);
+	if (crtc->dp_sub)
+		xilinx_drm_dp_sub_disable_vblank(crtc->dp_sub);
+	if (crtc->vtc)
+		xilinx_vtc_disable_vblank_intr(crtc->vtc);
 }
 
 /**
@@ -445,7 +470,8 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 	/* probe a plane manager */
 	crtc->plane_manager = xilinx_drm_plane_probe_manager(drm);
 	if (IS_ERR(crtc->plane_manager)) {
-		DRM_ERROR("failed to probe a plane manager\n");
+		if ((int)crtc->plane_manager != -EPROBE_DEFER)
+			DRM_ERROR("failed to probe a plane manager\n");
 		return ERR_CAST(crtc->plane_manager);
 	}
 
@@ -475,17 +501,21 @@ struct drm_crtc *xilinx_drm_crtc_create(struct drm_device *drm)
 	}
 
 	sub_node = of_parse_phandle(drm->dev->of_node, "xlnx,vtc", 0);
-	if (!sub_node) {
-		DRM_ERROR("failed to get a video timing controller node\n");
-		ret = -ENODEV;
-		goto err_plane;
+	if (sub_node) {
+		crtc->vtc = xilinx_vtc_probe(drm->dev, sub_node);
+		of_node_put(sub_node);
+		if (IS_ERR(crtc->vtc)) {
+			DRM_ERROR("failed to probe video timing controller\n");
+			ret = PTR_ERR(crtc->vtc);
+			goto err_plane;
+		}
 	}
 
-	crtc->vtc = xilinx_vtc_probe(drm->dev, sub_node);
-	of_node_put(sub_node);
-	if (IS_ERR(crtc->vtc)) {
-		DRM_ERROR("failed to probe video timing controller\n");
-		ret = PTR_ERR(crtc->vtc);
+	crtc->dp_sub = xilinx_drm_dp_sub_of_get(drm->dev->of_node);
+	if (IS_ERR(crtc->dp_sub)) {
+		ret = PTR_ERR(crtc->dp_sub);
+		if (ret != -EPROBE_DEFER)
+			DRM_ERROR("failed to get a dp_sub\n");
 		goto err_plane;
 	}
 
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
index e005392..0b4876e 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_plane.c
@@ -25,6 +25,7 @@
 #include <linux/of_dma.h>
 #include <linux/platform_device.h>
 
+#include "xilinx_drm_dp_sub.h"
 #include "xilinx_drm_drv.h"
 #include "xilinx_drm_fb.h"
 #include "xilinx_drm_plane.h"
@@ -61,6 +62,7 @@ struct xilinx_drm_plane_dma {
  * @rgb2yuv: rgb2yuv instance
  * @cresample: cresample instance
  * @osd_layer: osd layer
+ * @dp_layer: DisplayPort subsystem layer
  * @manager: plane manager
  */
 struct xilinx_drm_plane {
@@ -76,6 +78,7 @@ struct xilinx_drm_plane {
 	struct xilinx_rgb2yuv *rgb2yuv;
 	struct xilinx_cresample *cresample;
 	struct xilinx_osd_layer *osd_layer;
+	struct xilinx_drm_dp_sub_layer *dp_layer;
 	struct xilinx_drm_plane_manager *manager;
 };
 
@@ -87,6 +90,7 @@ struct xilinx_drm_plane {
  * @drm: drm device
  * @node: plane device node
  * @osd: osd instance
+ * @dp_sub: DisplayPort subsystem instance
  * @num_planes: number of available planes
  * @format: video format
  * @max_width: maximum width
@@ -99,6 +103,7 @@ struct xilinx_drm_plane_manager {
 	struct drm_device *drm;
 	struct device_node *node;
 	struct xilinx_osd *osd;
+	struct xilinx_drm_dp_sub *dp_sub;
 	int num_planes;
 	uint32_t format;
 	int max_width;
@@ -125,6 +130,14 @@ void xilinx_drm_plane_dpms(struct drm_plane *base_plane, int dpms)
 	plane->dpms = dpms;
 	switch (dpms) {
 	case DRM_MODE_DPMS_ON:
+		if (manager->dp_sub) {
+			if (plane->primary)
+				xilinx_drm_dp_sub_set_alpha(manager->dp_sub,
+							    plane->alpha);
+			xilinx_drm_dp_sub_layer_enable(manager->dp_sub,
+						       plane->dp_layer);
+		}
+
 		/* start dma engine */
 		dma_async_issue_pending(plane->dma.chan);
 
@@ -172,6 +185,11 @@ void xilinx_drm_plane_dpms(struct drm_plane *base_plane, int dpms)
 
 		/* stop dma engine and release descriptors */
 		dmaengine_terminate_all(plane->dma.chan);
+
+		if (manager->dp_sub)
+			xilinx_drm_dp_sub_layer_disable(manager->dp_sub,
+							plane->dp_layer);
+
 		break;
 	}
 }
@@ -258,6 +276,16 @@ int xilinx_drm_plane_mode_set(struct drm_plane *base_plane,
 		xilinx_osd_enable_rue(plane->manager->osd);
 	}
 
+	if (plane->manager->dp_sub) {
+		int ret;
+
+		ret = xilinx_drm_dp_sub_layer_check_size(plane->manager->dp_sub,
+							 plane->dp_layer,
+							 src_w, src_h);
+		if (ret)
+			return ret;
+	}
+
 	return 0;
 }
 
@@ -314,6 +342,13 @@ static void xilinx_drm_plane_destroy(struct drm_plane *base_plane)
 		xilinx_osd_layer_disable(plane->osd_layer);
 		xilinx_osd_layer_put(plane->osd_layer);
 	}
+
+	if (plane->manager->dp_sub) {
+		xilinx_drm_dp_sub_layer_disable(plane->manager->dp_sub,
+						plane->dp_layer);
+		xilinx_drm_dp_sub_layer_put(plane->manager->dp_sub,
+					    plane->dp_layer);
+	}
 }
 
 /**
@@ -392,6 +427,7 @@ static void xilinx_drm_plane_set_alpha(struct drm_plane *base_plane,
 				       unsigned int alpha)
 {
 	struct xilinx_drm_plane *plane = to_xilinx_plane(base_plane);
+	struct xilinx_drm_plane_manager *manager = plane->manager;
 
 	if (plane->alpha == alpha)
 		return;
@@ -399,7 +435,10 @@ static void xilinx_drm_plane_set_alpha(struct drm_plane *base_plane,
 	plane->alpha = alpha;
 
 	/* FIXME: use global alpha for now */
-	xilinx_osd_layer_set_alpha(plane->osd_layer, 1, plane->alpha);
+	if (plane->osd_layer)
+		xilinx_osd_layer_set_alpha(plane->osd_layer, 1, plane->alpha);
+	else if (manager->dp_sub)
+		xilinx_drm_dp_sub_set_alpha(manager->dp_sub, plane->alpha);
 }
 
 /* set property of a plane */
@@ -519,16 +558,13 @@ unsigned int xilinx_drm_plane_get_align(struct drm_plane *base_plane)
 static void
 xilinx_drm_plane_create_property(struct xilinx_drm_plane_manager *manager)
 {
-	if (!manager->osd)
-		return;
-
-	manager->zpos_prop = drm_property_create_range(manager->drm, 0,
-						       "zpos", 0,
-						       manager->num_planes - 1);
+	if (manager->osd)
+		manager->zpos_prop = drm_property_create_range(manager->drm, 0,
+				"zpos", 0, manager->num_planes - 1);
 
-	manager->alpha_prop = drm_property_create_range(manager->drm, 0,
-							"alpha", 0,
-							manager->default_alpha);
+	if (manager->osd || manager->dp_sub)
+		manager->alpha_prop = drm_property_create_range(manager->drm, 0,
+				"alpha", 0, manager->default_alpha);
 }
 
 /* attach plane properties */
@@ -542,10 +578,14 @@ static void xilinx_drm_plane_attach_property(struct drm_plane *base_plane)
 					   manager->zpos_prop,
 					   plane->id);
 
-	if (manager->alpha_prop)
+	if (manager->alpha_prop) {
+		if (manager->dp_sub && !plane->primary)
+			return;
+
 		drm_object_attach_property(&base_plane->base,
 					   manager->alpha_prop,
 					   manager->default_alpha);
+	}
 }
 
 /**
@@ -561,16 +601,27 @@ void xilinx_drm_plane_manager_dpms(struct xilinx_drm_plane_manager *manager,
 {
 	switch (dpms) {
 	case DRM_MODE_DPMS_ON:
+		if (manager->dp_sub) {
+			xilinx_drm_dp_sub_set_bg_color(manager->dp_sub,
+						       0, 0, 0);
+			xilinx_drm_dp_sub_enable(manager->dp_sub);
+		}
+
 		if (manager->osd) {
 			xilinx_osd_disable_rue(manager->osd);
 			xilinx_osd_set_color(manager->osd, 0x0, 0x0, 0x0);
 			xilinx_osd_enable(manager->osd);
 			xilinx_osd_enable_rue(manager->osd);
 		}
+
 		break;
 	default:
 		if (manager->osd)
 			xilinx_osd_reset(manager->osd);
+
+		if (manager->dp_sub)
+			xilinx_drm_dp_sub_disable(manager->dp_sub);
+
 		break;
 	}
 }
@@ -720,6 +771,31 @@ xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
 			plane->format = manager->format;
 	}
 
+	if (manager->dp_sub) {
+		plane->dp_layer = xilinx_drm_dp_sub_layer_get(manager->dp_sub,
+							      primary);
+		if (IS_ERR(plane->dp_layer)) {
+			DRM_ERROR("failed to create a dp_sub layer\n");
+			ret = PTR_ERR(plane->dp_layer);
+			plane->dp_layer = NULL;
+			goto err_dma;
+		}
+
+		if (primary) {
+			ret = xilinx_drm_dp_sub_layer_set_fmt(manager->dp_sub,
+							      plane->dp_layer,
+							      manager->format);
+			if (ret) {
+				DRM_ERROR("failed to set dp_sub layer fmt\n");
+				goto err_dma;
+			}
+		}
+
+		plane->format =
+			xilinx_drm_dp_sub_layer_get_fmt(manager->dp_sub,
+							plane->dp_layer);
+	}
+
 	/* If there's no IP other than VDMA, pick the manager's format */
 	if (plane->format == -1)
 		plane->format = manager->format;
@@ -743,6 +819,12 @@ xilinx_drm_plane_create(struct xilinx_drm_plane_manager *manager,
 	return plane;
 
 err_init:
+	if (manager->dp_sub) {
+		xilinx_drm_dp_sub_layer_disable(manager->dp_sub,
+						plane->dp_layer);
+		xilinx_drm_dp_sub_layer_put(plane->manager->dp_sub,
+					    plane->dp_layer);
+	}
 	if (manager->osd) {
 		xilinx_osd_layer_disable(plane->osd_layer);
 		xilinx_osd_layer_put(plane->osd_layer);
@@ -810,6 +892,9 @@ xilinx_drm_plane_init_manager(struct xilinx_drm_plane_manager *manager)
 		ret = xilinx_drm_format_by_code(format, &drm_format);
 		if (drm_format != manager->format)
 			ret = -EINVAL;
+	} else if (manager->dp_sub) {
+		manager->num_planes = XILINX_DRM_DP_SUB_NUM_LAYERS;
+		manager->max_width = XILINX_DRM_DP_SUB_MAX_WIDTH;
 	} else {
 		/* without osd, only one plane is supported */
 		manager->num_planes = 1;
@@ -865,6 +950,15 @@ xilinx_drm_plane_probe_manager(struct drm_device *drm)
 			DRM_ERROR("failed to probe an osd\n");
 			return ERR_CAST(manager->osd);
 		}
+		manager->default_alpha = OSD_MAX_ALPHA;
+	}
+
+	manager->dp_sub = xilinx_drm_dp_sub_of_get(drm->dev->of_node);
+	if (IS_ERR(manager->dp_sub)) {
+		DRM_DEBUG_KMS("failed to get a dp_sub\n");
+		return ERR_CAST(manager->dp_sub);
+	} else if (manager->dp_sub != NULL) {
+		manager->default_alpha = XILINX_DRM_DP_SUB_MAX_ALPHA;
 	}
 
 	ret = xilinx_drm_plane_init_manager(manager);
@@ -873,8 +967,6 @@ xilinx_drm_plane_probe_manager(struct drm_device *drm)
 		return ERR_PTR(ret);
 	}
 
-	manager->default_alpha = OSD_MAX_ALPHA;
-
 	xilinx_drm_plane_create_property(manager);
 
 	return manager;
@@ -882,5 +974,6 @@ xilinx_drm_plane_probe_manager(struct drm_device *drm)
 
 void xilinx_drm_plane_remove_manager(struct xilinx_drm_plane_manager *manager)
 {
+	xilinx_drm_dp_sub_put(manager->dp_sub);
 	of_node_put(manager->node);
 }
-- 
1.7.5.4

