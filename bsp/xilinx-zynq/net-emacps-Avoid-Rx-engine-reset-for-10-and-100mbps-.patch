From 13a24608446333a188d61b01930116be6f8b0197 Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaiah.choudary.kalluri@xilinx.com>
Date: Fri, 20 Feb 2015 23:01:38 +0530
Subject: [PATCH 472/793] net: emacps: Avoid Rx engine reset for 10 and
 100mbps speeds

The Rx engine lock down issue, occurs when there is a heavy rx traffic
of smaller packets, is observed when the controller is operating at
1000 mbps speeds. But the driver workaround for this issue is added
for all the speeds. The recent series of tests (in house and customer level)
shows that the lock down issues was not observed for 10 and 100 speeds and
the existing workaround causes unpredictable results. so, restring the
workaround to 1000mbps speed only.

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   28 +++++++++++++++++---------
 1 files changed, 18 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 5458dd1..8dbe393 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -549,7 +549,7 @@ struct net_local {
 	unsigned int enetnum;
 	unsigned int lastrxfrmscntr;
 	unsigned int has_mdio;
-	unsigned int gen_timer_timeout;
+	bool timerready;
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
 	struct hwtstamp_config hwtstamp_config;
 	struct ptp_clock *ptp_clock;
@@ -763,14 +763,16 @@ static void xemacps_adjust_link(struct net_device *ndev)
 			} else if (phydev->speed == SPEED_10) {
 				xemacps_set_freq(lp->devclk, 2500000,
 						&lp->pdev->dev);
-				lp->gen_timer_timeout =
-					XEAMCPS_GEN_PURPOSE_TIMER_LOAD * 5;
 			} else {
 				dev_err(&lp->pdev->dev,
 					"%s: unknown PHY speed %d\n",
 					__func__, phydev->speed);
 				return;
 			}
+			if (lp->timerready && (phydev->speed != SPEED_1000)) {
+				del_timer_sync(&(lp->gen_purpose_timer));
+				lp->timerready = false;
+			}
 
 			xemacps_write(lp->baseaddr, XEMACPS_NWCFG_OFFSET,
 			regval);
@@ -2006,7 +2008,7 @@ static void xemacps_gen_purpose_timerhandler(unsigned long data)
 	xemacps_update_stats(data);
 	xemacps_resetrx_for_no_rxdata(data);
 	mod_timer(&(lp->gen_purpose_timer),
-		jiffies + msecs_to_jiffies(lp->gen_timer_timeout));
+		jiffies + msecs_to_jiffies(XEAMCPS_GEN_PURPOSE_TIMER_LOAD));
 }
 
 /**
@@ -2048,6 +2050,11 @@ static int xemacps_open(struct net_device *ndev)
 
 	napi_enable(&lp->napi);
 	xemacps_init_hw(lp);
+
+	setup_timer(&(lp->gen_purpose_timer), xemacps_gen_purpose_timerhandler,
+							(unsigned long)lp);
+	lp->timerready = true;
+
 	rc = xemacps_mii_probe(ndev);
 	if (rc != 0) {
 		dev_err(&lp->pdev->dev,
@@ -2061,12 +2068,8 @@ static int xemacps_open(struct net_device *ndev)
 		goto err_pm_put;
 	}
 
-	lp->gen_timer_timeout = XEAMCPS_GEN_PURPOSE_TIMER_LOAD;
-	setup_timer(&(lp->gen_purpose_timer), xemacps_gen_purpose_timerhandler,
-							(unsigned long)lp);
 	mod_timer(&(lp->gen_purpose_timer),
-		jiffies + msecs_to_jiffies(lp->gen_timer_timeout));
-
+		jiffies + msecs_to_jiffies(XEAMCPS_GEN_PURPOSE_TIMER_LOAD));
 	netif_carrier_on(ndev);
 	netif_start_queue(ndev);
 	tasklet_enable(&lp->tx_bdreclaim_tasklet);
@@ -2076,6 +2079,10 @@ static int xemacps_open(struct net_device *ndev)
 err_pm_put:
 	napi_disable(&lp->napi);
 	xemacps_reset_hw(lp);
+	if (lp->timerready) {
+		del_timer_sync(&(lp->gen_purpose_timer));
+		lp->timerready = false;
+	}
 	pm_runtime_put(&lp->pdev->dev);
 err_free_rings:
 	xemacps_descriptor_free(lp);
@@ -2097,7 +2104,8 @@ static int xemacps_close(struct net_device *ndev)
 {
 	struct net_local *lp = netdev_priv(ndev);
 
-	del_timer_sync(&(lp->gen_purpose_timer));
+	if (lp->timerready)
+		del_timer_sync(&(lp->gen_purpose_timer));
 	netif_stop_queue(ndev);
 	napi_disable(&lp->napi);
 	tasklet_disable(&lp->tx_bdreclaim_tasklet);
-- 
1.7.5.4

