From 664c754980ca46f087214926913571ffc0152557 Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaiah.choudary.kalluri@xilinx.com>
Date: Mon, 3 Nov 2014 20:58:35 +0530
Subject: [PATCH 443/793] net: emacps: Reset the controller if HRESP error
 occurs on rx path

Reset the controller if HRESP error occurs on rx path.

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   25 +++++++++++++++++++------
 1 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 3226c4b..0aea5ed 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1361,6 +1361,14 @@ static int xemacps_rx(struct net_local *lp, int budget)
 		if (!(regval & XEMACPS_RXBUF_NEW_MASK))
 			break;
 
+		regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
+		xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
+		if (regval & XEMACPS_RXSR_HRESPNOK_MASK) {
+			dev_err(&lp->pdev->dev, "RX error 0x%x\n", regval);
+			numbdfree = 0xFFFFFFFF;
+			break;
+		}
+
 		new_skb = netdev_alloc_skb(lp->ndev, XEMACPS_RX_BUF_SIZE);
 		if (new_skb == NULL) {
 			dev_err(&lp->ndev->dev, "no memory for new sk_buff\n");
@@ -1457,16 +1465,18 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 {
 	struct net_local *lp = container_of(napi, struct net_local, napi);
 	int work_done = 0;
-	u32 regval;
+	u32 count;
 
 	spin_lock(&lp->rx_lock);
 	while (1) {
-		regval = xemacps_read(lp->baseaddr, XEMACPS_RXSR_OFFSET);
-		xemacps_write(lp->baseaddr, XEMACPS_RXSR_OFFSET, regval);
-		if (regval & XEMACPS_RXSR_HRESPNOK_MASK)
-			dev_err(&lp->pdev->dev, "RX error 0x%x\n", regval);
 
-		work_done += xemacps_rx(lp, budget - work_done);
+		count = xemacps_rx(lp, budget - work_done);
+		if (count == 0xFFFFFFFF) {
+			napi_complete(napi);
+			spin_unlock(&lp->rx_lock);
+			goto reset_hw;
+		}
+		work_done += count;
 		if (work_done >= budget)
 			break;
 
@@ -1491,6 +1501,9 @@ static int xemacps_rx_poll(struct napi_struct *napi, int budget)
 	}
 	spin_unlock(&lp->rx_lock);
 	return work_done;
+reset_hw:
+	queue_work(lp->txtimeout_handler_wq, &lp->txtimeout_reinit);
+	return 0;
 }
 
 /**
-- 
1.7.5.4

