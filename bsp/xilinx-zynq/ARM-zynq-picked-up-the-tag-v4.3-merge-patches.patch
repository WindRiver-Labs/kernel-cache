From bb19c5f896cbfa66cd35e28a1112bfb213d3e1ce Mon Sep 17 00:00:00 2001
From: zou cao <cao.zou@windriver.com>
Date: Wed, 4 Jan 2017 12:41:49 +0800
Subject: [PATCH 762/793] ARM: zynq: picked up the tag 'v4.3' merge patches

(cherry picked from commit 4638c72e
     https://github.com/Xilinx/linux-xlnx.git)

Signed-off-by: zou cao <cao.zou@windriver.com>
---
 arch/arm/mach-zynq/pm.c |   54 +++++++++++++++++++++++++++++++++-------------
 1 files changed, 39 insertions(+), 15 deletions(-)

diff --git a/arch/arm/mach-zynq/pm.c b/arch/arm/mach-zynq/pm.c
index b283a35..4ece87b 100644
--- a/arch/arm/mach-zynq/pm.c
+++ b/arch/arm/mach-zynq/pm.c
@@ -26,6 +26,9 @@
 #include <asm/hardware/cache-l2x0.h>
 #include <asm/mach/map.h>
 #include <asm/suspend.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
 #include "common.h"
 
 /* register offsets */
@@ -82,14 +85,7 @@ static int zynq_pm_suspend(unsigned long arg)
 			pr_warn("DDR self refresh failed.\n");
 	} else {
 		WARN_ONCE(1, "DRAM self-refresh not available\n");
-		wfi();
-	}
-
-	/* Restore original OCM contents */
-	if (do_ddrpll_bypass) {
-		memcpy((__force void *)ocm_base, ocm_swap_area,
-			zynq_sys_suspend_sz);
-		kfree(ocm_swap_area);
+		cpu_do_idle();
 	}
 
 	/* disable DDRC self-refresh mode */
@@ -135,18 +131,46 @@ static const struct platform_suspend_ops zynq_pm_ops = {
 static void __iomem *zynq_pm_remap_ocm(void)
 {
 	struct device_node *np;
-	struct resource res;
-	const char *comp = "xlnx,ps7-ocm";
+	const char *comp = "xlnx,zynq-ocmc-1.0";
 	void __iomem *base = NULL;
 
 	np = of_find_compatible_node(NULL, NULL, comp);
 	if (np) {
-		if (of_address_to_resource(np, 0, &res))
-			return NULL;
-		WARN_ON(!request_mem_region(res.start, resource_size(&res),
-					"OCM"));
-		base = __arm_ioremap(res.start, resource_size(&res), MT_MEMORY);
+		struct device *dev;
+		unsigned long pool_addr;
+		unsigned long pool_addr_virt;
+		struct gen_pool *pool;
+
 		of_node_put(np);
+
+		dev = &(of_find_device_by_node(np)->dev);
+
+		/* Get OCM pool from device tree or platform data */
+		pool = gen_pool_get(dev, NULL);
+		if (!pool) {
+			pr_warn("%s: OCM pool is not available\n", __func__);
+			return NULL;
+		}
+
+		pool_addr_virt = gen_pool_alloc(pool, zynq_sys_suspend_sz);
+		if (!pool_addr_virt) {
+			pr_warn("%s: Can't get OCM poll\n", __func__);
+			return NULL;
+		}
+		pool_addr = gen_pool_virt_to_phys(pool, pool_addr_virt);
+		if (!pool_addr) {
+			pr_warn("%s: Can't get physical address of OCM pool\n",
+				__func__);
+			return NULL;
+		}
+		base = __arm_ioremap_exec(pool_addr, zynq_sys_suspend_sz,
+				     MT_MEMORY_RWX);
+		if (!base) {
+			pr_warn("%s: IOremap OCM pool failed\n", __func__);
+			return NULL;
+		}
+		pr_debug("%s: Remap OCM %s from %lx to %lx\n", __func__, comp,
+			 pool_addr_virt, (unsigned long)base);
 	} else {
 		pr_warn("%s: no compatible node found for '%s'\n", __func__,
 				comp);
-- 
1.7.5.4

