From b1cbfc5d61adc159275195bcaa1f3ae9f7e57039 Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaiah.choudary.kalluri@xilinx.com>
Date: Wed, 19 Mar 2014 09:47:54 +0530
Subject: [PATCH 404/509] net: xilinx_emacps: Add dma_mapping_error checking

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 294d7bd9e97f5d862a41ce167ede063aac80bf22

CONFIG_DMA_API_DEBUG enabled kernel showed backtraces indicating that
"DMA-API: device driver failed to check map error [device
address=0x000000002e997802] [size=322 bytes] [mapped as single]"

Add the check, unwind the mappings if it is a fragmented frame and if the
check is failed then free the skb

Reported-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   38 +++++++++++++++++++++++++++
 1 files changed, 38 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 8d925f6..ba3863d 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1242,6 +1242,10 @@ static int xemacps_rx(struct net_local *lp, int budget)
 					new_skb->data,
 					XEMACPS_RX_BUF_SIZE,
 					DMA_FROM_DEVICE);
+		if (dma_mapping_error(lp->ndev->dev.parent, new_skb_baddr)) {
+			dev_kfree_skb(new_skb);
+			break;
+		}
 
 		/* the packet length */
 		len = cur_p->ctrl & XEMACPS_RXBUF_LEN_MASK;
@@ -1623,6 +1627,8 @@ static int xemacps_descriptor_init(struct net_local *lp)
 							new_skb->data,
 							XEMACPS_RX_BUF_SIZE,
 							DMA_FROM_DEVICE);
+		if (dma_mapping_error(lp->ndev->dev.parent, new_skb_baddr))
+			goto err_out;
 
 		/* set wrap bit for last BD */
 		regval = (new_skb_baddr & XEMACPS_RXBUF_ADD_MASK);
@@ -2071,6 +2077,28 @@ static int xemacps_clear_csum(struct sk_buff *skb, struct net_device *ndev)
 }
 
 /**
+ * unwind_tx_frag_mapping - unwind the tx fragment mapping
+ * @lp: driver control structure
+ * @fragcnt: fragment count
+ */
+static void unwind_tx_frag_mapping(struct net_local *lp, int fragcnt)
+{
+	struct xemacps_bd *cur_p;
+
+	for (; fragcnt > 0; fragcnt--) {
+		cur_p = &lp->tx_bd[lp->tx_bd_freecnt];
+		dma_unmap_single(&lp->pdev->dev, cur_p->addr,
+				 (cur_p->ctrl & XEMACPS_TXBUF_LEN_MASK),
+				 DMA_TO_DEVICE);
+		cur_p->ctrl |= XEMACPS_TXBUF_USED_MASK;
+		if (lp->tx_bd_freecnt)
+			lp->tx_bd_freecnt--;
+		else
+			lp->tx_bd_freecnt = XEMACPS_SEND_BD_CNT - 1;
+	}
+}
+
+/**
  * xemacps_start_xmit - transmit a packet (called by kernel)
  * @skb: socket buffer
  * @ndev: network interface device structure
@@ -2118,6 +2146,12 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 			skb_get(skb);
 		}
 
+		if (dma_mapping_error(&lp->pdev->dev, mapping)) {
+			if (i)
+				unwind_tx_frag_mapping(lp, i);
+			goto dma_err;
+		}
+
 		lp->tx_skb[lp->tx_bd_tail].skb = skb;
 		lp->tx_skb[lp->tx_bd_tail].mapping = mapping;
 		lp->tx_skb[lp->tx_bd_tail].len = len;
@@ -2160,6 +2194,10 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 
 	ndev->trans_start = jiffies;
 	return 0;
+
+dma_err:
+	kfree_skb(skb);
+	return NETDEV_TX_OK;
 }
 
 /*
-- 
1.7.5.4

