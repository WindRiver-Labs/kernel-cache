From ad574a0b5e5a0737b68481f893132aeb08da2798 Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyunk@xilinx.com>
Date: Thu, 19 Sep 2013 19:41:16 -0700
Subject: [PATCH 164/793] drm: xilinx: Add a Xilinx DRM KMS driver

This patch adds a Xilixn DRM driver which uses Xilinx crtc/encoder/connector
supports. This patch completes the DRM KMS framework interfaces with
Xilinx DRM driver specific functions / other helper functions(CMA).

Now CMA helper functions are used to allocate framebuffers,
and CONFIG_CMA_SIZE_MBYTES must be configured properly to ensure
the enough amount of configure memory for framebuffers.

Signed-off-by: Hyun Kwon <hyunk@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
---
 .../devicetree/bindings/drm/xilinx/xilinx_drm.txt  |   34 ++
 drivers/gpu/drm/xilinx/xilinx_drm_drv.c            |  355 ++++++++++++++++++++
 2 files changed, 389 insertions(+), 0 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
 create mode 100644 drivers/gpu/drm/xilinx/xilinx_drm_drv.c

diff --git a/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt b/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
new file mode 100644
index 0000000..5313873
--- /dev/null
+++ b/Documentation/devicetree/bindings/drm/xilinx/xilinx_drm.txt
@@ -0,0 +1,34 @@
+Device-Tree bindings for Xilinx DRM
+
+Xilinx DRM supports the display pipelines with Xilinx soft IPs on FPGA and
+IPs on Xilinx boards.
+
+The example hardware pipeline is depicted below
+(*IPs in parentheses() are optional. IPs in brackets[] don't require drivers).
+vdma --> [remapper] -> (osd) -> (rgb2yuv) -> (cresample) -> [axi2vid] -> adv7511
+(vdma --> [remapper]-|)                                         |
+                                                      si570 -> vtc
+
+Required properties:
+ - compatible: value should be "xlnx,drm".
+ - dmas: the phandle list of DMA specifiers
+ - dma-names: the indentifier strings for DMAs
+ - osd: the phandle for on screen display IP if used in the hardware design
+ - rgb2yuv: the phandle for rgb2ycrcb IP if used in the hardware design
+ - cresample: the phandle for chroma resampler IP if used in the hardware design
+ - vtc: the phandle for video timing controller IP
+ - encoder-slave: the phandle for the encoder slave.
+
+Example:
+
+	xilinx_drm {
+		compatible = "xlnx,drm";
+		dmas = <&axi_vdma_0 0
+			&axi_vdma_1 0>;
+		dma-names = "vdma0", "vdma1";
+		osd = <&v_osd_0>;
+		rgb2yuv = <&v_rgb2ycrcb_0>;
+		cresample = <&v_cresample_0>;
+		vtc = <&v_tc_0>;
+		encoder-slave = <&adv7511>;
+	};
diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_drv.c b/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
new file mode 100644
index 0000000..c2946b4
--- /dev/null
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_drv.c
@@ -0,0 +1,355 @@
+/*
+ * Xilinx DRM KMS support for Xilinx
+ *
+ *  Copyright (C) 2013 Xilinx, Inc.
+ *
+ *  Author: Hyun Woo Kwon <hyunk@xilinx.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <drm/drmP.h>
+#include <drm/drm_crtc_helper.h>
+#include <drm/drm_fb_cma_helper.h>
+#include <drm/drm_gem_cma_helper.h>
+
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include "xilinx_drm_connector.h"
+#include "xilinx_drm_crtc.h"
+#include "xilinx_drm_drv.h"
+#include "xilinx_drm_encoder.h"
+
+#define DRIVER_NAME	"xilinx_drm"
+#define DRIVER_DESC	"Xilinx DRM KMS support for Xilinx"
+#define DRIVER_DATE	"20130509"
+#define DRIVER_MAJOR	1
+#define DRIVER_MINOR	0
+
+/*
+ * TODO: The possible pipeline configurations are numerous with Xilinx soft IPs.
+ * It's not too bad for now, but the more proper way(Common Display Framework,
+ * or some internal abstraction) should be considered, when it reaches a point
+ * that such thing is required.
+ */
+
+struct xilinx_drm_private {
+	struct drm_device *drm;
+	struct drm_crtc *crtc;
+	struct drm_encoder *encoder;
+	struct drm_connector *connector;
+	struct drm_fbdev_cma *fbdev;
+	struct platform_device *pdev;
+};
+
+/* create a fb */
+static struct drm_framebuffer *
+xilinx_drm_fb_create(struct drm_device *drm, struct drm_file *file_priv,
+		     struct drm_mode_fb_cmd2 *mode_cmd)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+	bool res;
+
+	res = xilinx_drm_crtc_check_format(private->crtc,
+					   mode_cmd->pixel_format);
+	if (!res) {
+		DRM_ERROR("unsupported pixel format %08x\n",
+			  mode_cmd->pixel_format);
+		return ERR_PTR(-EINVAL);
+	}
+
+	return drm_fb_cma_create(drm, file_priv, mode_cmd);
+}
+
+/* poll changed handler */
+static void xilinx_drm_output_poll_changed(struct drm_device *drm)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+
+	drm_fbdev_cma_hotplug_event(private->fbdev);
+}
+
+static const struct drm_mode_config_funcs xilinx_drm_mode_config_funcs = {
+	.fb_create		= xilinx_drm_fb_create,
+	.output_poll_changed	= xilinx_drm_output_poll_changed,
+};
+
+/* enable vblank */
+static int xilinx_drm_enable_vblank(struct drm_device *drm, int crtc)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+
+	xilinx_drm_crtc_enable_vblank(private->crtc);
+
+	return 0;
+}
+
+/* disable vblank */
+static void xilinx_drm_disable_vblank(struct drm_device *drm, int crtc)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+
+	xilinx_drm_crtc_disable_vblank(private->crtc);
+}
+
+/* initialize mode config */
+static void xilinx_drm_mode_config_init(struct drm_device *drm)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+
+	drm->mode_config.min_width = 0;
+	drm->mode_config.min_height = 0;
+
+	drm->mode_config.max_width =
+		xilinx_drm_crtc_get_max_width(private->crtc);
+	drm->mode_config.max_height = 4096;
+
+	drm->mode_config.funcs = &xilinx_drm_mode_config_funcs;
+}
+
+/* load xilinx drm */
+static int xilinx_drm_load(struct drm_device *drm, unsigned long flags)
+{
+	struct xilinx_drm_private *private;
+	struct platform_device *pdev = drm->platformdev;
+	int ret;
+
+	private = devm_kzalloc(drm->dev, sizeof(*private), GFP_KERNEL);
+	if (!private)
+		return -ENOMEM;
+
+	drm_mode_config_init(drm);
+
+	/* create a xilinx crtc */
+	private->crtc = xilinx_drm_crtc_create(drm);
+	if (IS_ERR(private->crtc)) {
+		DRM_DEBUG_DRIVER("failed to create xilinx crtc\n");
+		ret = PTR_ERR(private->crtc);
+		goto err_crtc;
+	}
+
+	/* create a xilinx encoder */
+	private->encoder = xilinx_drm_encoder_create(drm);
+	if (IS_ERR(private->encoder)) {
+		DRM_DEBUG_DRIVER("failed to create xilinx encoder\n");
+		ret = PTR_ERR(private->encoder);
+		goto err_encoder;
+	}
+
+	/* create a xilinx connector */
+	private->connector = xilinx_drm_connector_create(drm, private->encoder);
+	if (IS_ERR(private->connector)) {
+		DRM_DEBUG_DRIVER("failed to create xilinx connector\n");
+		ret = PTR_ERR(private->connector);
+		goto err_connector;
+	}
+
+	ret = drm_vblank_init(drm, 1);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to initialize vblank\n");
+		goto err_vblank;
+	}
+
+	/* enable irq to enable vblank feature */
+	drm->irq_enabled = 1;
+
+	/* allow disable vblank */
+	drm->vblank[0].enabled = 1;
+
+	/* initialize xilinx cma framebuffer */
+	private->fbdev = drm_fbdev_cma_init(drm, 32, 1, 1);
+	if (IS_ERR(private->fbdev)) {
+		DRM_ERROR("failed to initialize drm cma fbdev\n");
+		ret = PTR_ERR(private->fbdev);
+		goto err_fbdev;
+	}
+
+	drm->dev_private = private;
+	private->drm = drm;
+
+	drm_kms_helper_poll_init(drm);
+
+	/* set up mode config for xilinx */
+	xilinx_drm_mode_config_init(drm);
+
+	drm_helper_disable_unused_functions(drm);
+
+	platform_set_drvdata(pdev, private);
+
+	return 0;
+
+err_fbdev:
+	drm_vblank_cleanup(drm);
+err_vblank:
+	xilinx_drm_connector_destroy(private->connector);
+err_connector:
+	xilinx_drm_encoder_destroy(private->encoder);
+err_encoder:
+	xilinx_drm_crtc_destroy(private->crtc);
+err_crtc:
+	drm_mode_config_cleanup(drm);
+	if (ret == -EPROBE_DEFER)
+		DRM_INFO("load() is defered & will be called again\n");
+	return ret;
+}
+
+/* unload xilinx drm */
+static int xilinx_drm_unload(struct drm_device *drm)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+
+	drm_vblank_cleanup(drm);
+
+	drm_kms_helper_poll_fini(drm);
+
+	drm_fbdev_cma_fini(private->fbdev);
+
+	drm_mode_config_cleanup(drm);
+
+	return 0;
+}
+
+/* preclose */
+static void xilinx_drm_preclose(struct drm_device *drm, struct drm_file *file)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+
+	/* cancel pending page flip request */
+	xilinx_drm_crtc_cancel_page_flip(private->crtc, file);
+}
+
+/* restore the default mode when xilinx drm is released */
+static void xilinx_drm_lastclose(struct drm_device *drm)
+{
+	struct xilinx_drm_private *private = drm->dev_private;
+
+	drm_fbdev_cma_restore_mode(private->fbdev);
+}
+
+static const struct file_operations xilinx_drm_fops = {
+	.owner		= THIS_MODULE,
+	.open		= drm_open,
+	.release	= drm_release,
+	.unlocked_ioctl	= drm_ioctl,
+	.mmap		= drm_gem_cma_mmap,
+	.poll		= drm_poll,
+	.fasync		= drm_fasync,
+	.read		= drm_read,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl	= drm_compat_ioctl,
+#endif
+	.llseek		= noop_llseek,
+};
+
+static struct drm_driver xilinx_drm_driver = {
+	.driver_features		= DRIVER_MODESET | DRIVER_GEM |
+					  DRIVER_PRIME,
+	.load				= xilinx_drm_load,
+	.unload				= xilinx_drm_unload,
+	.preclose			= xilinx_drm_preclose,
+	.lastclose			= xilinx_drm_lastclose,
+
+	.get_vblank_counter		= drm_vblank_count,
+	.enable_vblank			= xilinx_drm_enable_vblank,
+	.disable_vblank			= xilinx_drm_disable_vblank,
+
+	.prime_handle_to_fd		= drm_gem_prime_handle_to_fd,
+	.prime_fd_to_handle		= drm_gem_prime_fd_to_handle,
+	.gem_prime_export		= drm_gem_prime_export,
+	.gem_prime_import		= drm_gem_prime_import,
+	.gem_prime_get_sg_table		= drm_gem_cma_prime_get_sg_table,
+	.gem_prime_import_sg_table	= drm_gem_cma_prime_import_sg_table,
+	.gem_prime_vmap			= drm_gem_cma_prime_vmap,
+	.gem_prime_vunmap		= drm_gem_cma_prime_vunmap,
+	.gem_prime_mmap			= drm_gem_cma_prime_mmap,
+	.gem_free_object		= drm_gem_cma_free_object,
+	.gem_vm_ops			= &drm_gem_cma_vm_ops,
+	.dumb_create			= drm_gem_cma_dumb_create,
+	.dumb_map_offset		= drm_gem_cma_dumb_map_offset,
+	.dumb_destroy			= drm_gem_cma_dumb_destroy,
+
+	.fops				= &xilinx_drm_fops,
+
+	.name				= DRIVER_NAME,
+	.desc				= DRIVER_DESC,
+	.date				= DRIVER_DATE,
+	.major				= DRIVER_MAJOR,
+	.minor				= DRIVER_MINOR,
+};
+
+#if defined(CONFIG_PM_SLEEP) || defined(CONFIG_PM_RUNTIME)
+/* suspend xilinx drm */
+static int xilinx_drm_pm_suspend(struct device *dev)
+{
+	struct xilinx_drm_private *private = dev_get_drvdata(dev);
+
+	drm_kms_helper_poll_disable(private->drm);
+	drm_helper_connector_dpms(private->connector, DRM_MODE_DPMS_SUSPEND);
+
+	return 0;
+}
+
+/* resume xilinx drm */
+static int xilinx_drm_pm_resume(struct device *dev)
+{
+	struct xilinx_drm_private *private = dev_get_drvdata(dev);
+
+	drm_helper_connector_dpms(private->connector, DRM_MODE_DPMS_ON);
+	drm_kms_helper_poll_enable(private->drm);
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops xilinx_drm_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(xilinx_drm_pm_suspend, xilinx_drm_pm_resume)
+	SET_RUNTIME_PM_OPS(xilinx_drm_pm_suspend, xilinx_drm_pm_resume, NULL)
+};
+
+/* init xilinx drm platform */
+static int xilinx_drm_platform_probe(struct platform_device *pdev)
+{
+	return drm_platform_init(&xilinx_drm_driver, pdev);
+}
+
+/* exit xilinx drm platform */
+static int xilinx_drm_platform_remove(struct platform_device *pdev)
+{
+	struct xilinx_drm_private *private = platform_get_drvdata(pdev);
+
+	drm_put_dev(private->drm);
+
+	return 0;
+}
+
+static const struct of_device_id xilinx_drm_of_match[] = {
+	{ .compatible = "xlnx,drm", },
+	{ /* end of table */ },
+};
+MODULE_DEVICE_TABLE(of, xilinx_drm_of_match);
+
+static struct platform_driver xilinx_drm_private_driver = {
+	.probe			= xilinx_drm_platform_probe,
+	.remove			= xilinx_drm_platform_remove,
+	.driver			= {
+		.owner		= THIS_MODULE,
+		.name		= "xilinx-drm",
+		.pm		= &xilinx_drm_pm_ops,
+		.of_match_table	= xilinx_drm_of_match,
+	},
+};
+
+module_platform_driver(xilinx_drm_private_driver);
+
+MODULE_AUTHOR("Xilinx, Inc.");
+MODULE_DESCRIPTION("Xilinx DRM KMS Driver");
+MODULE_LICENSE("GPL v2");
-- 
1.7.5.4

