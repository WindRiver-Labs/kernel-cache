From 7b0976fb32c14bd88c798b667d9f308432d07ac0 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Wed, 5 Feb 2014 11:04:09 -0800
Subject: [PATCH 183/509] I2C: zynq: Simplify control flow

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 76646719d978a492f58a6f92f3ef63ab714b7882

Combine loops and if-statements where possible to improve code
readability.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/i2c/busses/i2c-zynq.c |   84 +++++++++++++++++------------------------
 1 files changed, 35 insertions(+), 49 deletions(-)

diff --git a/drivers/i2c/busses/i2c-zynq.c b/drivers/i2c/busses/i2c-zynq.c
index de92323..13a7778 100644
--- a/drivers/i2c/busses/i2c-zynq.c
+++ b/drivers/i2c/busses/i2c-zynq.c
@@ -166,53 +166,42 @@ static irqreturn_t zynq_i2c_isr(int irq, void *ptr)
 
 	isr_status = zynq_i2c_readreg(ZYNQ_I2C_ISR_OFFSET);
 
-	/* Handling Nack interrupt */
-	if (isr_status & ZYNQ_I2C_IXR_NACK)
-		complete(&id->xfer_done);
-
-	/* Handling Arbitration lost interrupt */
-	if (isr_status & ZYNQ_I2C_IXR_ARB_LOST)
+	/* Handling nack and arbitration lost interrupt */
+	if (isr_status & (ZYNQ_I2C_IXR_NACK | ZYNQ_I2C_IXR_ARB_LOST))
 		complete(&id->xfer_done);
 
 	/* Handling Data interrupt */
-	if (isr_status & ZYNQ_I2C_IXR_DATA) {
-		if (id->recv_count >= ZYNQ_I2C_DATA_INTR_DEPTH) {
-			/* Always read data interrupt threshold bytes */
-			bytes_to_recv = ZYNQ_I2C_DATA_INTR_DEPTH;
-			id->recv_count = id->recv_count -
-						ZYNQ_I2C_DATA_INTR_DEPTH;
-			avail_bytes = zynq_i2c_readreg(
-						ZYNQ_I2C_XFER_SIZE_OFFSET);
-			/*
-			 * if the tranfer size register value is zero, then
-			 * check for the remaining bytes and update the
-			 * transfer size register.
-			 */
-			if (!avail_bytes) {
-				if (id->recv_count > ZYNQ_I2C_TRANSFER_SIZE)
-					zynq_i2c_writereg(
-						ZYNQ_I2C_TRANSFER_SIZE,
+	if ((isr_status & ZYNQ_I2C_IXR_DATA) &&
+			(id->recv_count >= ZYNQ_I2C_DATA_INTR_DEPTH)) {
+		/* Always read data interrupt threshold bytes */
+		bytes_to_recv = ZYNQ_I2C_DATA_INTR_DEPTH;
+		id->recv_count = id->recv_count - ZYNQ_I2C_DATA_INTR_DEPTH;
+		avail_bytes = zynq_i2c_readreg(ZYNQ_I2C_XFER_SIZE_OFFSET);
+
+		/*
+		 * if the tranfer size register value is zero, then
+		 * check for the remaining bytes and update the
+		 * transfer size register.
+		 */
+		if (!avail_bytes) {
+			if (id->recv_count > ZYNQ_I2C_TRANSFER_SIZE)
+				zynq_i2c_writereg(ZYNQ_I2C_TRANSFER_SIZE,
 						ZYNQ_I2C_XFER_SIZE_OFFSET);
-				else
-					zynq_i2c_writereg(id->recv_count,
+			else
+				zynq_i2c_writereg(id->recv_count,
 						ZYNQ_I2C_XFER_SIZE_OFFSET);
-			}
-			/* Process the data received */
-			while (bytes_to_recv) {
-				*(id->p_recv_buf)++ =
-					zynq_i2c_readreg(ZYNQ_I2C_DATA_OFFSET);
-				bytes_to_recv = bytes_to_recv - 1;
-			}
-
-			if (!id->bus_hold_flag &&
-				(id->recv_count <= ZYNQ_I2C_FIFO_DEPTH)) {
-				/* Clear the hold bus bit */
-				zynq_i2c_writereg(
-					zynq_i2c_readreg(ZYNQ_I2C_CR_OFFSET) &
-					~ZYNQ_I2C_CR_HOLD,
-					ZYNQ_I2C_CR_OFFSET);
-			}
 		}
+
+		/* Process the data received */
+		while (bytes_to_recv--)
+			*(id->p_recv_buf)++ =
+				zynq_i2c_readreg(ZYNQ_I2C_DATA_OFFSET);
+
+		if (!id->bus_hold_flag &&
+				(id->recv_count <= ZYNQ_I2C_FIFO_DEPTH))
+			/* Clear the hold bus bit */
+			zynq_i2c_writereg(zynq_i2c_readreg(ZYNQ_I2C_CR_OFFSET) &
+					~ZYNQ_I2C_CR_HOLD, ZYNQ_I2C_CR_OFFSET);
 	}
 
 	/* Handling Transfer Complete interrupt */
@@ -245,16 +234,13 @@ static irqreturn_t zynq_i2c_isr(int irq, void *ptr)
 				 */
 				complete(&id->xfer_done);
 			}
-			if (!id->send_count) {
-				if (!id->bus_hold_flag) {
-					/* Clear the hold bus bit */
-					ctrl_reg =
-					zynq_i2c_readreg(ZYNQ_I2C_CR_OFFSET);
-					if (ctrl_reg & ZYNQ_I2C_CR_HOLD)
-						zynq_i2c_writereg(ctrl_reg &
+			if (!id->send_count && !id->bus_hold_flag) {
+				/* Clear the hold bus bit */
+				ctrl_reg = zynq_i2c_readreg(ZYNQ_I2C_CR_OFFSET);
+				if (ctrl_reg & ZYNQ_I2C_CR_HOLD)
+					zynq_i2c_writereg(ctrl_reg &
 							~ZYNQ_I2C_CR_HOLD,
 							ZYNQ_I2C_CR_OFFSET);
-				}
 			}
 		} else {
 			if (!id->bus_hold_flag) {
-- 
1.7.5.4

