From 5be1441bf2117d5ccebc628bac9e92c2d13a6a60 Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Mon, 6 Jan 2014 14:52:02 +0100
Subject: [PATCH 021/509] ARM: zynq: Move zynq_slcr_read/write() helper
 functions

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 53869956a9aa5eb84cf774307ecb21d27391e6d7

Use zynq_slcr_read/write helper functions for reg access
instead of readl/writel.
Also use regmap when it is ready.

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-zynq/common.h |    3 -
 arch/arm/mach-zynq/slcr.c   |   86 ++++++++++++++++++++++++++-----------------
 2 files changed, 52 insertions(+), 37 deletions(-)

diff --git a/arch/arm/mach-zynq/common.h b/arch/arm/mach-zynq/common.h
index ddb730b..9fdf529 100644
--- a/arch/arm/mach-zynq/common.h
+++ b/arch/arm/mach-zynq/common.h
@@ -35,9 +35,6 @@ extern int __cpuinit zynq_cpun_start(u32 address, int cpu);
 extern struct smp_operations zynq_smp_ops __initdata;
 #endif
 
-extern void zynq_slcr_write(u32 val, u32 offset);
-extern u32 zynq_slcr_read(u32 offset);
-
 extern void zynq_slcr_init_preload_fpga(void);
 extern void zynq_slcr_init_postload_fpga(void);
 
diff --git a/arch/arm/mach-zynq/slcr.c b/arch/arm/mach-zynq/slcr.c
index 86d0308..5cfd6bd 100644
--- a/arch/arm/mach-zynq/slcr.c
+++ b/arch/arm/mach-zynq/slcr.c
@@ -39,6 +39,42 @@ void __iomem *zynq_slcr_base;
 static struct regmap *zynq_slcr_regmap;
 
 /**
+ * zynq_slcr_write - Write to a register in SLCR block
+ *
+ * @val:	Value to write to the register
+ * @offset:	Register offset in SLCR block
+ *
+ * Return:	a negative value on error, 0 on success
+ */
+static int zynq_slcr_write(u32 val, u32 offset)
+{
+	if (!zynq_slcr_regmap) {
+		writel(val, zynq_slcr_base + offset);
+		return 0;
+	}
+
+	return regmap_write(zynq_slcr_regmap, offset, val);
+}
+
+/**
+ * zynq_slcr_read - Read a register in SLCR block
+ *
+ * @val:	Pointer to value to be read from SLCR
+ * @offset:	Register offset in SLCR block
+ *
+ * Return:	a negative value on error, 0 on success
+ */
+static int zynq_slcr_read(u32 *val, u32 offset)
+{
+	if (zynq_slcr_regmap)
+		return regmap_read(zynq_slcr_regmap, offset, val);
+
+	*val = readl(zynq_slcr_base + offset);
+
+	return 0;
+}
+
+/**
  * zynq_slcr_system_reset - Reset the entire system.
  */
 void zynq_slcr_system_reset(void)
@@ -57,35 +93,10 @@ void zynq_slcr_system_reset(void)
 	 * the FSBL not loading the bitstream after soft-reboot
 	 * This is a temporary solution until we know more.
 	 */
-	reboot = readl(zynq_slcr_base + SLCR_REBOOT_STATUS_OFFSET);
-	writel(reboot & 0xF0FFFFFF, zynq_slcr_base + SLCR_REBOOT_STATUS_OFFSET);
-	writel(1, zynq_slcr_base + SLCR_PS_RST_CTRL_OFFSET);
-}
-
-/**
- * zynq_slcr_write - Write to a register in SLCR block
- *
- * @val:	Value to write to the register
- * @offset:	Register offset in SLCR block
- */
-void zynq_slcr_write(u32 val, u32 offset)
-{
-	writel(val, zynq_slcr_base + offset);
-}
-EXPORT_SYMBOL(zynq_slcr_write);
-
-/**
- * zynq_slcr_read - Read a register in SLCR block
- *
- * @offset:	Register offset in SLCR block
- *
- * return:	Value read from the SLCR register
- */
-u32 zynq_slcr_read(u32 offset)
-{
-	return readl(zynq_slcr_base + offset);
+	zynq_slcr_read(&reboot, SLCR_REBOOT_STATUS_OFFSET);
+	zynq_slcr_write(reboot & 0xF0FFFFFF, SLCR_REBOOT_STATUS_OFFSET);
+	zynq_slcr_write(1, SLCR_PS_RST_CTRL_OFFSET);
 }
-EXPORT_SYMBOL(zynq_slcr_read);
 
 /**
  * zynq_slcr_get_ocm_config - Get SLCR OCM config
@@ -94,7 +105,10 @@ EXPORT_SYMBOL(zynq_slcr_read);
  */
 u32 zynq_slcr_get_ocm_config(void)
 {
-	return zynq_slcr_read(SLCR_OCM_CFG_OFFSET);
+	u32 ret;
+
+	zynq_slcr_read(&ret, SLCR_OCM_CFG_OFFSET);
+	return ret;
 }
 
 /**
@@ -134,11 +148,13 @@ EXPORT_SYMBOL(zynq_slcr_init_postload_fpga);
  */
 void zynq_slcr_cpu_start(int cpu)
 {
-	u32 reg = readl(zynq_slcr_base + SLCR_A9_CPU_RST_CTRL_OFFSET);
+	u32 reg;
+
+	zynq_slcr_read(&reg, SLCR_A9_CPU_RST_CTRL_OFFSET);
 	reg &= ~(SLCR_A9_CPU_RST << cpu);
-	writel(reg, zynq_slcr_base + SLCR_A9_CPU_RST_CTRL_OFFSET);
+	zynq_slcr_write(reg, SLCR_A9_CPU_RST_CTRL_OFFSET);
 	reg &= ~(SLCR_A9_CPU_CLKSTOP << cpu);
-	writel(reg, zynq_slcr_base + SLCR_A9_CPU_RST_CTRL_OFFSET);
+	zynq_slcr_write(reg, SLCR_A9_CPU_RST_CTRL_OFFSET);
 }
 
 /**
@@ -147,9 +163,11 @@ void zynq_slcr_cpu_start(int cpu)
  */
 void zynq_slcr_cpu_stop(int cpu)
 {
-	u32 reg = readl(zynq_slcr_base + SLCR_A9_CPU_RST_CTRL_OFFSET);
+	u32 reg;
+
+	zynq_slcr_read(&reg, SLCR_A9_CPU_RST_CTRL_OFFSET);
 	reg |= (SLCR_A9_CPU_CLKSTOP | SLCR_A9_CPU_RST) << cpu;
-	writel(reg, zynq_slcr_base + SLCR_A9_CPU_RST_CTRL_OFFSET);
+	zynq_slcr_write(reg, SLCR_A9_CPU_RST_CTRL_OFFSET);
 }
 
 /**
-- 
1.7.5.4

