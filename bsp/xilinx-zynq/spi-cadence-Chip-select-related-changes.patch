From 585050813b921c3935e8f1761987999e7f6b9f82 Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Tue, 6 May 2014 14:59:07 +0530
Subject: [PATCH 144/509] spi: cadence: Chip select related changes

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 2d1b699fea7a441a24960426d396b778f23fd158

Change chip select property name to "num-cs". Use a default value
instead of giving error when num-cs is not found.
Add "is-decoded-cs" property for using extended slave select; make
necessary changes in cdns_spi_chipselect function.

Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/spi/spi-cadence.c |   34 ++++++++++++++++++++++++----------
 1 files changed, 24 insertions(+), 10 deletions(-)

diff --git a/drivers/spi/spi-cadence.c b/drivers/spi/spi-cadence.c
index bbfe719..7c4bdea 100644
--- a/drivers/spi/spi-cadence.c
+++ b/drivers/spi/spi-cadence.c
@@ -99,6 +99,9 @@
 /* SPI FIFO depth in bytes */
 #define CDNS_SPI_FIFO_DEPTH	128
 
+/* Default number of chip select lines */
+#define CDNS_SPI_DEFAULT_NUM_CS		4
+
 /**
  * struct cdns_spi - This definition defines spi driver instance
  * @regs:		Virtual address of the SPI controller registers
@@ -110,6 +113,7 @@
  * @remaining_bytes:	Number of bytes left to transfer
  * @requested_bytes:	Number of bytes requested
  * @dev_busy:		Device busy flag
+ * @is_decoded_cs:	Flag for decoder property set or not
  */
 struct cdns_spi {
 	void __iomem *regs;
@@ -121,6 +125,7 @@ struct cdns_spi {
 	int remaining_bytes;
 	int requested_bytes;
 	u8 dev_busy;
+	u32 is_decoded_cs;
 };
 
 /* Macros for the SPI controller read/write */
@@ -183,9 +188,13 @@ static void cdns_spi_chipselect(struct spi_device *spi, bool is_high)
 	} else {
 		/* Select the slave */
 		ctrl_reg &= ~CDNS_SPI_CR_SSCTRL_MASK;
-		ctrl_reg |= ((~(CDNS_SPI_SS0 << spi->chip_select)) <<
-			     CDNS_SPI_SS_SHIFT) &
-			     CDNS_SPI_CR_SSCTRL_MASK;
+		if (!(xspi->is_decoded_cs))
+			ctrl_reg |= ((~(CDNS_SPI_SS0 << spi->chip_select)) <<
+				     CDNS_SPI_SS_SHIFT) &
+				     CDNS_SPI_CR_SSCTRL_MASK;
+		else
+			ctrl_reg |= (spi->chip_select << CDNS_SPI_SS_SHIFT) &
+				     CDNS_SPI_CR_SSCTRL_MASK;
 	}
 
 	cdns_spi_write(xspi, CDNS_SPI_CR_OFFSET, ctrl_reg);
@@ -514,13 +523,18 @@ static int cdns_spi_probe(struct platform_device *pdev)
 		goto remove_master;
 	}
 
-	ret = of_property_read_u32(pdev->dev.of_node, "num-chip-select",
-				   &num_cs);
-	master->num_chipselect = num_cs;
-	if (ret < 0) {
-		dev_err(&pdev->dev, "couldn't determine num-chip-select\n");
-		goto clk_dis_all;
-	}
+	ret = of_property_read_u32(pdev->dev.of_node, "num-cs", &num_cs);
+
+	if (ret < 0)
+		master->num_chipselect = CDNS_SPI_DEFAULT_NUM_CS;
+	else
+		master->num_chipselect = num_cs;
+
+	ret = of_property_read_u32(pdev->dev.of_node, "is-decoded-cs",
+				   &xspi->is_decoded_cs);
+
+	if (ret < 0)
+		xspi->is_decoded_cs = 0;
 
 	master->prepare_transfer_hardware = cdns_prepare_transfer_hardware;
 	master->transfer_one = cdns_transfer_one;
-- 
1.7.5.4

