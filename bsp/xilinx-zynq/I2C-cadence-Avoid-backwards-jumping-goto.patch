From 53b55d7b2a91214746d4d50098ba4c31de001829 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Fri, 14 Feb 2014 09:59:23 -0800
Subject: [PATCH 193/509] I2C: cadence: Avoid backwards jumping goto

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 6ea1aebbc3f8b87700b9c8b599c1d92d381ae020

Refactor the code to avoid a backwards jumping goto instruction.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/i2c/busses/i2c-cadence.c |   97 ++++++++++++++++++++------------------
 1 files changed, 51 insertions(+), 46 deletions(-)

diff --git a/drivers/i2c/busses/i2c-cadence.c b/drivers/i2c/busses/i2c-cadence.c
index edfdc48..1b8f964 100644
--- a/drivers/i2c/busses/i2c-cadence.c
+++ b/drivers/i2c/busses/i2c-cadence.c
@@ -431,7 +431,6 @@ static int cdns_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 				int num)
 {
 	struct cdns_i2c *id = adap->algo_data;
-	unsigned int retries;
 	unsigned long timeout;
 	int ret, count;
 	u32 reg;
@@ -470,56 +469,62 @@ static int cdns_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 
 	/* Process the msg one by one */
 	for (count = 0; count < num; count++, msgs++) {
+		bool retry = false;
+		unsigned retries = adap->retries;
+
 		if (count == (num - 1))
 			id->bus_hold_flag = 0;
-		retries = adap->retries;
-		id->p_msg = msgs;
-retry:
-		id->err_status = 0;
-		init_completion(&id->xfer_done);
 
-		/* Check for the TEN Bit mode on each msg */
-		reg = cdns_i2c_readreg(CDNS_I2C_CR_OFFSET);
-		if (msgs->flags & I2C_M_TEN) {
-			if (reg & CDNS_I2C_CR_NEA)
-				cdns_i2c_writereg(reg & ~CDNS_I2C_CR_NEA,
-						CDNS_I2C_CR_OFFSET);
-		} else {
-			if (!(reg & CDNS_I2C_CR_NEA))
-				cdns_i2c_writereg(reg | CDNS_I2C_CR_NEA,
-						CDNS_I2C_CR_OFFSET);
-		}
+		id->p_msg = msgs;
+		do {
+			id->err_status = 0;
+			init_completion(&id->xfer_done);
+
+			/* Check for the TEN Bit mode on each msg */
+			reg = cdns_i2c_readreg(CDNS_I2C_CR_OFFSET);
+			if (msgs->flags & I2C_M_TEN) {
+				if (reg & CDNS_I2C_CR_NEA)
+					cdns_i2c_writereg(reg & ~CDNS_I2C_CR_NEA,
+							CDNS_I2C_CR_OFFSET);
+			} else {
+				if (!(reg & CDNS_I2C_CR_NEA))
+					cdns_i2c_writereg(reg | CDNS_I2C_CR_NEA,
+							CDNS_I2C_CR_OFFSET);
+			}
 
-		/* Check for the R/W flag on each msg */
-		if (msgs->flags & I2C_M_RD)
-			cdns_i2c_mrecv(id);
-		else
-			cdns_i2c_msend(id);
-
-		/* Wait for the signal of completion */
-		ret = wait_for_completion_interruptible_timeout(
-							&id->xfer_done, HZ);
-		if (!ret) {
-			dev_err(id->adap.dev.parent,
-				 "timeout waiting on completion\n");
-			cdns_i2c_master_reset(adap);
-			return -ETIMEDOUT;
-		}
-		cdns_i2c_writereg(CDNS_I2C_IXR_ALL_INTR_MASK,
-				  CDNS_I2C_IDR_OFFSET);
-
-		/* If it is bus arbitration error, try again */
-		if (id->err_status & CDNS_I2C_IXR_ARB_LOST) {
-			dev_dbg(id->adap.dev.parent,
-				 "Lost ownership on bus, trying again\n");
-			if (retries--) {
-				mdelay(2);
-				goto retry;
+			/* Check for the R/W flag on each msg */
+			if (msgs->flags & I2C_M_RD)
+				cdns_i2c_mrecv(id);
+			else
+				cdns_i2c_msend(id);
+
+			/* Wait for the signal of completion */
+			ret = wait_for_completion_interruptible_timeout(
+								&id->xfer_done, HZ);
+			if (!ret) {
+				dev_err(id->adap.dev.parent,
+					 "timeout waiting on completion\n");
+				cdns_i2c_master_reset(adap);
+				return -ETIMEDOUT;
 			}
-			dev_err(id->adap.dev.parent,
-					 "Retries completed, exit\n");
-			return -EREMOTEIO;
-		}
+			cdns_i2c_writereg(CDNS_I2C_IXR_ALL_INTR_MASK,
+					  CDNS_I2C_IDR_OFFSET);
+
+			/* If it is bus arbitration error, try again */
+			if (id->err_status & CDNS_I2C_IXR_ARB_LOST) {
+				dev_dbg(id->adap.dev.parent,
+					 "Lost ownership on bus, trying again\n");
+				if (retries--) {
+					mdelay(2);
+					retry = true;
+				} else {
+					dev_err(id->adap.dev.parent,
+						 "Retries completed, exit\n");
+					return -EREMOTEIO;
+				}
+			}
+		} while (retry);
+
 		/* Report the other error interrupts to application as EIO */
 		if (id->err_status & 0xE4) {
 			cdns_i2c_master_reset(adap);
-- 
1.7.5.4

