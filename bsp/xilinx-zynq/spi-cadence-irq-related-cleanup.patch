From f229eef78189af49cee762bb9dd493b3cabeb23c Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Tue, 6 May 2014 14:59:02 +0530
Subject: [PATCH 139/509] spi: cadence: irq related cleanup

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 5dc63f08071ef4db5e02affe71cbacf6c2770865

Request irq after init_hw in probe.
Check for irq<=0 as 0 is also considered error condition.
Return IRQ_HANDLED only when interrupt is handled, otherwise return IRQ_NONE.

Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/spi/spi-cadence.c |   39 +++++++++++++++++++++------------------
 1 files changed, 21 insertions(+), 18 deletions(-)

diff --git a/drivers/spi/spi-cadence.c b/drivers/spi/spi-cadence.c
index 1369fa5..eead17d 100644
--- a/drivers/spi/spi-cadence.c
+++ b/drivers/spi/spi-cadence.c
@@ -319,13 +319,14 @@ static void cdns_spi_fill_tx_fifo(struct cdns_spi *xspi)
  * the SPI subsystem will identify the error as the remaining bytes to be
  * transferred is non-zero.
  *
- * Return:	IRQ_HANDLED always
+ * Return:	IRQ_HANDLED when handled; IRQ_NONE otherwise.
  */
 static irqreturn_t cdns_spi_irq(int irq, void *dev_id)
 {
 	struct cdns_spi *xspi = dev_id;
-	u32 intr_status;
+	u32 intr_status, status;
 
+	status = IRQ_NONE;
 	intr_status = cdns_spi_read(xspi->regs + CDNS_SPI_ISR_OFFSET);
 	cdns_spi_write(xspi->regs + CDNS_SPI_ISR_OFFSET, intr_status);
 
@@ -337,6 +338,7 @@ static irqreturn_t cdns_spi_irq(int irq, void *dev_id)
 		cdns_spi_write(xspi->regs + CDNS_SPI_IDR_OFFSET,
 			       CDNS_SPI_IXR_DEFAULT_MASK);
 		complete(&xspi->done);
+		status = IRQ_HANDLED;
 	} else if (intr_status & CDNS_SPI_IXR_TXOW_MASK) {
 		unsigned long trans_cnt;
 
@@ -363,9 +365,10 @@ static irqreturn_t cdns_spi_irq(int irq, void *dev_id)
 				       CDNS_SPI_IXR_DEFAULT_MASK);
 			complete(&xspi->done);
 		}
+		status = IRQ_HANDLED;
 	}
 
-	return IRQ_HANDLED;
+	return status;
 }
 
 /**
@@ -575,21 +578,6 @@ static int cdns_spi_probe(struct platform_device *pdev)
 		goto remove_master;
 	}
 
-	irq = platform_get_irq(pdev, 0);
-	if (irq < 0) {
-		ret = -ENXIO;
-		dev_err(&pdev->dev, "irq number is negative\n");
-		goto remove_master;
-	}
-
-	ret = devm_request_irq(&pdev->dev, irq, cdns_spi_irq,
-			       0, pdev->name, xspi);
-	if (ret != 0) {
-		ret = -ENXIO;
-		dev_err(&pdev->dev, "request_irq failed\n");
-		goto remove_master;
-	}
-
 	xspi->pclk = devm_clk_get(&pdev->dev, "pclk");
 	if (IS_ERR(xspi->pclk)) {
 		dev_err(&pdev->dev, "pclk clock not found.\n");
@@ -621,6 +609,21 @@ static int cdns_spi_probe(struct platform_device *pdev)
 
 	init_completion(&xspi->done);
 
+	irq = platform_get_irq(pdev, 0);
+	if (irq <= 0) {
+		ret = -ENXIO;
+		dev_err(&pdev->dev, "irq number is invalid\n");
+		goto remove_master;
+	}
+
+	ret = devm_request_irq(&pdev->dev, irq, cdns_spi_irq,
+			       0, pdev->name, xspi);
+	if (ret != 0) {
+		ret = -ENXIO;
+		dev_err(&pdev->dev, "request_irq failed\n");
+		goto remove_master;
+	}
+
 	ret = of_property_read_u32(pdev->dev.of_node, "num-chip-select",
 				   &num_cs);
 	master->num_chipselect = num_cs;
-- 
1.7.5.4

