From 5dd8f68665a404e3710f7e0e51762c3f3e2fd54b Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xhdrdevl6.(none)>
Date: Tue, 17 Jul 2012 13:05:14 +0530
Subject: [PATCH 040/793] Xilinx: ARM: EmacPs: Fix interrupt handler issues

This patch makes changes in the EmacPs interrupt handler to
clear the EmacPs interrupt status after processing a queued packet.
The status was getting cleared earlier immediately after entering
the interrupt handler. But since we try to process all available
BDs during processing of Txed/Rxed packets, it is better to clear
the interrupt status only after the BD processing is over. This
patch also puts appropriate barriers for reading/writing to registers.

Signed-off-by: Anirudha <anirudh@xilinx.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |    5 +++++
 1 files changed, 5 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 1e12942..9805fc4 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1748,6 +1748,7 @@ static irqreturn_t xemacps_interrupt(int irq, void *dev_id)
 	u32 regisr;
 
 	regisr = xemacps_read(lp->baseaddr, XEMACPS_ISR_OFFSET);
+	rmb();
 
 	if (unlikely(!regisr))
 		return IRQ_NONE;
@@ -1786,7 +1787,11 @@ static irqreturn_t xemacps_interrupt(int irq, void *dev_id)
 		(XEMACPS_IXR_TXCOMPL_MASK | XEMACPS_IXR_TX_ERR_MASK))
 			xemacps_tx_poll(ndev);
 
+		/* acknowledge interrupt and clear it */
+		xemacps_write(lp->baseaddr, XEMACPS_ISR_OFFSET, regisr);
+		wmb();
 		regisr = xemacps_read(lp->baseaddr, XEMACPS_ISR_OFFSET);
+		rmb();
 	}
 	spin_unlock(&lp->lock);
 
-- 
1.7.5.4

