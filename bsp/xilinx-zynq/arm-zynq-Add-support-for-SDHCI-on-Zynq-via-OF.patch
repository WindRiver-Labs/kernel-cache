From b591c55ad026b8c6cd714b0174e24595d57480ab Mon Sep 17 00:00:00 2001
From: Zhong Hongbo <hongbo.zhong@windriver.com>
Date: Fri, 13 Jul 2012 13:00:07 +0800
Subject: [PATCH 12/36] arm/zynq: Add support for SDHCI on Zynq via OF

SDK: yocto-1.2(http://git.yoctoproject.org/cgit.cgi/meta-zynq/)

Signed-off-by: Vlad Lungu <vlad.lungu@windriver.com>
Integrated-by: Hongbo Zhong <hongbo.zhong@windriver.com>
---
 arch/arm/boot/dts/zc702.dtsi         |    8 +++
 drivers/mmc/host/Kconfig             |   13 +++++
 drivers/mmc/host/Makefile            |    1 +
 drivers/mmc/host/sdhci-of-xilinxps.c |  102 ++++++++++++++++++++++++++++++++++
 4 files changed, 124 insertions(+)
 create mode 100644 drivers/mmc/host/sdhci-of-xilinxps.c

diff --git a/arch/arm/boot/dts/zc702.dtsi b/arch/arm/boot/dts/zc702.dtsi
index f9d9c59..aeb8905 100644
--- a/arch/arm/boot/dts/zc702.dtsi
+++ b/arch/arm/boot/dts/zc702.dtsi
@@ -76,4 +76,12 @@
 				phandle = <0x2>;
 			};
 		};
+
+		sdhci@e0100000 {
+			compatible = "xlnx,ps7-sdhci-1.00.a";
+			reg = <0xe0100000 0x1000>;
+			xlnx,has-cd = <0x1>;
+			interrupts = <0x0 0x18 0x4>;
+			clock-frequency = <33333000>;
+			};
 	};
diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index 2bc06e7..e8013cc 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -118,6 +118,19 @@ config MMC_SDHCI_OF_HLWD
 
 	  If unsure, say N.
 
+config MMC_SDHCI_OF_XILINX_PS
+	tristate "SDHCI OF support for the Xilinx Zynq SDHCI controllers"
+	depends on MMC_SDHCI_PLTFM
+	depends on OF
+	depends on ARCH_ZYNQ
+	help
+	  This selects the Secure Digital Host Controller Interface (SDHCI)
+	  found in the Xilinx Zynq EPP.
+
+	  If you have a controller with this interface, say Y or M here.
+
+	  If unsure, say N.
+
 config MMC_SDHCI_CNS3XXX
 	tristate "SDHCI support on the Cavium Networks CNS3xxx SoC"
 	depends on ARCH_CNS3XXX
diff --git a/drivers/mmc/host/Makefile b/drivers/mmc/host/Makefile
index 3e7e26d..750c605 100644
--- a/drivers/mmc/host/Makefile
+++ b/drivers/mmc/host/Makefile
@@ -53,6 +53,7 @@ obj-$(CONFIG_MMC_SDHCI_DOVE)		+= sdhci-dove.o
 obj-$(CONFIG_MMC_SDHCI_TEGRA)		+= sdhci-tegra.o
 obj-$(CONFIG_MMC_SDHCI_OF_ESDHC)	+= sdhci-of-esdhc.o
 obj-$(CONFIG_MMC_SDHCI_OF_HLWD)		+= sdhci-of-hlwd.o
+obj-$(CONFIG_MMC_SDHCI_OF_XILINX_PS)	+= sdhci-of-xilinxps.o
 
 ifeq ($(CONFIG_CB710_DEBUG),y)
 	CFLAGS-cb710-mmc	+= -DDEBUG
diff --git a/drivers/mmc/host/sdhci-of-xilinxps.c b/drivers/mmc/host/sdhci-of-xilinxps.c
new file mode 100644
index 0000000..7b7b7dc
--- /dev/null
+++ b/drivers/mmc/host/sdhci-of-xilinxps.c
@@ -0,0 +1,102 @@
+/*
+ * drivers/mmc/host/sdhci-of-zynq.c
+ *
+ * Xilinx Zynq Host Controller Interface.
+ * Copyright (c) 2012 Wind River Systems, Inc.
+ *
+ * Based on sdhci-of-esdhc.c
+ *
+ * Copyright (c) 2007 Freescale Semiconductor, Inc.
+ * Copyright (c) 2009 MontaVista Software, Inc.
+ *
+ * Authors: Xiaobo Xie <X.Xie@freescale.com>
+ *          Anton Vorontsov <avorontsov@ru.mvista.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or (at
+ * your option) any later version.
+ */
+#include <linux/of.h>
+#include <linux/io.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/mmc/host.h>
+#include "sdhci-pltfm.h"
+
+static unsigned int zynq_of_get_max_clock(struct sdhci_host *host)
+{
+	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
+
+	return pltfm_host->clock;
+}
+
+static struct sdhci_ops sdhci_zynq_ops = {
+	.get_max_clock = zynq_of_get_max_clock,
+};
+
+static struct sdhci_pltfm_data sdhci_zynq_pdata = {
+	.quirks = SDHCI_QUIRK_CAP_CLOCK_BASE_BROKEN,
+	.ops = &sdhci_zynq_ops,
+};
+
+static int __devinit sdhci_zynq_probe(struct platform_device *pdev)
+{
+	int ret;
+	const void *prop = NULL;
+	struct device_node *np = pdev->dev.of_node;
+	struct sdhci_host *host = NULL;
+
+	ret = sdhci_pltfm_register(pdev, &sdhci_zynq_pdata);
+	if (ret == 0) {
+		prop = of_get_property(np, "xlnx,has-cd", NULL);
+		if (prop == NULL) {
+			host = platform_get_drvdata(pdev);
+			host->quirks |= SDHCI_QUIRK_BROKEN_CARD_DETECTION;
+		} else if (!(u32) be32_to_cpup(prop))  {
+			host = platform_get_drvdata(pdev);
+			host->quirks |= SDHCI_QUIRK_BROKEN_CARD_DETECTION;
+		}
+	} else
+		printk("sdhci platform registration failed\n");
+
+	return ret;
+}
+
+static int __devexit sdhci_zynq_remove(struct platform_device *pdev)
+{
+	return sdhci_pltfm_unregister(pdev);
+}
+
+static const struct of_device_id sdhci_zynq_of_match[] = {
+	{ .compatible = "xlnx,ps7-sdhci-1.00.a" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, sdhci_zynq_of_match);
+
+static struct platform_driver sdhci_zynq_driver = {
+	.driver = {
+		.name = "sdhci-zynq",
+		.owner = THIS_MODULE,
+		.of_match_table = sdhci_zynq_of_match,
+		.pm = SDHCI_PLTFM_PMOPS,
+	},
+	.probe = sdhci_zynq_probe,
+	.remove = __devexit_p(sdhci_zynq_remove),
+};
+
+static int __init sdhci_zynq_init(void)
+{
+	return platform_driver_register(&sdhci_zynq_driver);
+}
+module_init(sdhci_zynq_init);
+
+static void __exit sdhci_zynq_exit(void)
+{
+	platform_driver_unregister(&sdhci_zynq_driver);
+}
+module_exit(sdhci_zynq_exit);
+
+MODULE_DESCRIPTION("SDHCI OF driver for Xilinx Zynq");
+MODULE_AUTHOR("Vlad Lungu <vlad.lungu@windriver.com>");
+MODULE_LICENSE("GPL v2");
-- 
1.7.9.7

