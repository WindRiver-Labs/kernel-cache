From efd57f0ea78c78cd441a66be137cc58b8a0b6dba Mon Sep 17 00:00:00 2001
From: Hyun Kwon <hyun.kwon@xilinx.com>
Date: Tue, 10 Jun 2014 17:40:33 -0700
Subject: [PATCH 148/290] drm: xilinx: dp: Replace spinlock with mutex for aux
 communication

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

Use mutex for aux communication synchronization. User thread and
the threaded interrupt context can call aux functions, and calling
thread may sleep and wait after acquiring the lock. This patch
replaces spinlock with mutex for such synchronization process.

Signed-off-by: Hyun Kwon <hyunk@xilinx.com>
Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 8028aff0fce64a830ee9e5e09c3100acf8be259e)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/gpu/drm/xilinx/xilinx_drm_dp.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/xilinx/xilinx_drm_dp.c b/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
index 639532f..3096654 100644
--- a/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
+++ b/drivers/gpu/drm/xilinx/xilinx_drm_dp.c
@@ -24,9 +24,9 @@
 #include <linux/clk.h>
 #include <linux/device.h>
 #include <linux/module.h>
+#include <linux/mutex.h>
 #include <linux/platform_device.h>
 #include <linux/pm.h>
-#include <linux/spinlock.h>
 
 #include "xilinx_drm_drv.h"
 
@@ -279,7 +279,7 @@ struct xilinx_drm_dp_i2c {
  * @link_config: common link configuration between IP core and sink device
  * @mode: current mode between IP core and sink device
  * @train_set: set of training data
- * @aux_lock: spinlock for aux communication
+ * @aux_lock: mutex for aux communication
  */
 struct xilinx_drm_dp {
 	struct drm_encoder *encoder;
@@ -296,7 +296,7 @@ struct xilinx_drm_dp {
 	struct xilinx_drm_dp_mode mode;
 	u8 train_set[4];
 
-	spinlock_t aux_lock;
+	struct mutex aux_lock;
 };
 
 static inline struct xilinx_drm_dp *to_dp(struct drm_encoder *encoder)
@@ -398,9 +398,9 @@ static int xilinx_drm_dp_aux_cmd(struct xilinx_drm_dp *dp, u32 cmd, u16 addr,
 
 	/* Retry at least 3 times per DP spec */
 	for (tries = 0; tries < 5; tries++) {
-		spin_lock(&dp->aux_lock);
+		mutex_lock(&dp->aux_lock);
 		ret = xilinx_drm_dp_aux_cmd_submit(dp, cmd, addr, buf, bytes);
-		spin_unlock(&dp->aux_lock);
+		mutex_unlock(&dp->aux_lock);
 		if (!ret || ret == -EIO)
 			break;
 
@@ -1373,7 +1373,7 @@ static int xilinx_drm_dp_probe(struct platform_device *pdev)
 	if (IS_ERR(dp->iomem))
 		return PTR_ERR(dp->iomem);
 
-	spin_lock_init(&dp->aux_lock);
+	mutex_init(&dp->aux_lock);
 
 	platform_set_drvdata(pdev, dp);
 
-- 
2.0.2

