From 7cbe6bd21f60620b6f9c510d0d71b87d6d72ca21 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Thu, 27 Feb 2014 17:54:23 -0800
Subject: [PATCH 241/793] spi: zynq-qspi: Remove clock notifier

The clock notifier was just an emty placeholder. Remove this dead code.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 drivers/spi/spi-zynq-qspi.c |   34 +++-------------------------------
 1 files changed, 3 insertions(+), 31 deletions(-)

diff --git a/drivers/spi/spi-zynq-qspi.c b/drivers/spi/spi-zynq-qspi.c
index 8d984d6..68a4a43 100644
--- a/drivers/spi/spi-zynq-qspi.c
+++ b/drivers/spi/spi-zynq-qspi.c
@@ -183,7 +183,6 @@
  * @regs:		Virtual address of the QSPI controller registers
  * @devclk:		Pointer to the peripheral clock
  * @aperclk:		Pointer to the APER clock
- * @clk_rate_change_nb:	Notifier block for clock frequency change callback
  * @irq:		IRQ number
  * @speed_hz:		Current QSPI bus clock speed in Hz
  * @trans_queue_lock:	Lock used for accessing transfer queue
@@ -205,7 +204,6 @@ struct zynq_qspi {
 	void __iomem *regs;
 	struct clk *devclk;
 	struct clk *aperclk;
-	struct notifier_block clk_rate_change_nb;
 	int irq;
 	u32 speed_hz;
 	spinlock_t trans_queue_lock;
@@ -962,25 +960,6 @@ static inline int zynq_qspi_destroy_queue(struct zynq_qspi *xqspi)
 	return 0;
 }
 
-static int zynq_qspi_clk_notifier_cb(struct notifier_block *nb,
-		unsigned long event, void *data)
-{
-	switch (event) {
-	case PRE_RATE_CHANGE:
-		/* if a rate change is announced we need to check whether we can
-		 * maintain the current frequency by changing the clock
-		 * dividers. And we may have to suspend operation and return
-		 * after the rate change or its abort
-		 */
-		return NOTIFY_OK;
-	case POST_RATE_CHANGE:
-		return NOTIFY_OK;
-	case ABORT_RATE_CHANGE:
-	default:
-		return NOTIFY_DONE;
-	}
-}
-
 #ifdef CONFIG_PM_SLEEP
 /**
  * zynq_qspi_suspend - Suspend method for the QSPI driver
@@ -1131,11 +1110,6 @@ static int zynq_qspi_probe(struct platform_device *pdev)
 		goto clk_dis_aper;
 	}
 
-	xqspi->clk_rate_change_nb.notifier_call = zynq_qspi_clk_notifier_cb;
-	xqspi->clk_rate_change_nb.next = NULL;
-	if (clk_notifier_register(xqspi->devclk, &xqspi->clk_rate_change_nb))
-		dev_warn(&pdev->dev, "Unable to register clock notifier.\n");
-
 	/* QSPI controller initializations */
 	zynq_qspi_init_hw(xqspi->regs, xqspi->is_dual);
 
@@ -1145,7 +1119,7 @@ static int zynq_qspi_probe(struct platform_device *pdev)
 				   (u32 *)&master->num_chipselect);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "couldn't determine num-chip-select\n");
-		goto clk_unreg_notif;
+		goto clk_dis_all;
 	}
 
 	master->setup = zynq_qspi_setup;
@@ -1169,7 +1143,7 @@ static int zynq_qspi_probe(struct platform_device *pdev)
 	if (!xqspi->workqueue) {
 		ret = -ENOMEM;
 		dev_err(&pdev->dev, "problem initializing queue\n");
-		goto clk_unreg_notif;
+		goto clk_dis_all;
 	}
 
 	ret = zynq_qspi_start_queue(xqspi);
@@ -1191,8 +1165,7 @@ static int zynq_qspi_probe(struct platform_device *pdev)
 
 remove_queue:
 	(void)zynq_qspi_destroy_queue(xqspi);
-clk_unreg_notif:
-	clk_notifier_unregister(xqspi->devclk, &xqspi->clk_rate_change_nb);
+clk_dis_all:
 	clk_disable_unprepare(xqspi->devclk);
 clk_dis_aper:
 	clk_disable_unprepare(xqspi->aperclk);
@@ -1224,7 +1197,6 @@ static int zynq_qspi_remove(struct platform_device *pdev)
 	zynq_qspi_write(xqspi->regs + ZYNQ_QSPI_ENABLE_OFFSET,
 			~ZYNQ_QSPI_ENABLE_ENABLE_MASK);
 
-	clk_notifier_unregister(xqspi->devclk, &xqspi->clk_rate_change_nb);
 	clk_disable_unprepare(xqspi->devclk);
 	clk_disable_unprepare(xqspi->aperclk);
 
-- 
1.7.5.4

