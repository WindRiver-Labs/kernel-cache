From af0dbe73788a8d4ac2a367a0ce6c92dfba2b169a Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Thu, 10 Apr 2014 08:04:02 -0700
Subject: [PATCH 211/509] i2c: cadence: Let core handle retries

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 57e74b7092f4356b498712f63af3104d29573e3e

Let the core handle retries in case arbitration is lost.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/i2c/busses/i2c-cadence.c |   81 ++++++++++++++++----------------------
 1 files changed, 34 insertions(+), 47 deletions(-)

diff --git a/drivers/i2c/busses/i2c-cadence.c b/drivers/i2c/busses/i2c-cadence.c
index e6935f8..7a96ae0 100644
--- a/drivers/i2c/busses/i2c-cadence.c
+++ b/drivers/i2c/busses/i2c-cadence.c
@@ -437,57 +437,44 @@ static int cdns_i2c_process_msg(struct cdns_i2c *id, struct i2c_msg *msg,
 {
 	int ret;
 	u32 reg;
-	bool retry = false;
-	unsigned retries = adap->retries;
 
 	id->p_msg = msg;
-	do {
-		id->err_status = 0;
-		reinit_completion(&id->xfer_done);
+	id->err_status = 0;
+	INIT_COMPLETION(id->xfer_done);
+
+	/* Check for the TEN Bit mode on each msg */
+	reg = cdns_i2c_readreg(CDNS_I2C_CR_OFFSET);
+	if (msg->flags & I2C_M_TEN) {
+		if (reg & CDNS_I2C_CR_NEA)
+			cdns_i2c_writereg(reg & ~CDNS_I2C_CR_NEA,
+					CDNS_I2C_CR_OFFSET);
+	} else {
+		if (!(reg & CDNS_I2C_CR_NEA))
+			cdns_i2c_writereg(reg | CDNS_I2C_CR_NEA,
+					CDNS_I2C_CR_OFFSET);
+	}
 
-		/* Check for the TEN Bit mode on each msg */
-		reg = cdns_i2c_readreg(CDNS_I2C_CR_OFFSET);
-		if (msg->flags & I2C_M_TEN) {
-			if (reg & CDNS_I2C_CR_NEA)
-				cdns_i2c_writereg(reg & ~CDNS_I2C_CR_NEA,
-						CDNS_I2C_CR_OFFSET);
-		} else {
-			if (!(reg & CDNS_I2C_CR_NEA))
-				cdns_i2c_writereg(reg | CDNS_I2C_CR_NEA,
-						CDNS_I2C_CR_OFFSET);
-		}
+	/* Check for the R/W flag on each msg */
+	if (msg->flags & I2C_M_RD)
+		cdns_i2c_mrecv(id);
+	else
+		cdns_i2c_msend(id);
+
+	/* Wait for the signal of completion */
+	ret = wait_for_completion_timeout(&id->xfer_done, HZ);
+	if (!ret) {
+		cdns_i2c_master_reset(adap);
+		dev_err(id->adap.dev.parent,
+				"timeout waiting on completion\n");
+		return -ETIMEDOUT;
+	}
 
-		/* Check for the R/W flag on each msg */
-		if (msg->flags & I2C_M_RD)
-			cdns_i2c_mrecv(id);
-		else
-			cdns_i2c_msend(id);
+	cdns_i2c_writereg(CDNS_I2C_IXR_ALL_INTR_MASK,
+			  CDNS_I2C_IDR_OFFSET);
 
-		/* Wait for the signal of completion */
-		ret = wait_for_completion_timeout(&id->xfer_done, HZ);
-		if (!ret) {
-			cdns_i2c_master_reset(adap);
-			dev_err(id->adap.dev.parent,
-					"timeout waiting on completion\n");
-			return -ETIMEDOUT;
-		}
-		cdns_i2c_writereg(CDNS_I2C_IXR_ALL_INTR_MASK,
-				  CDNS_I2C_IDR_OFFSET);
-
-		/* If it is bus arbitration error, try again */
-		if (id->err_status & CDNS_I2C_IXR_ARB_LOST) {
-			dev_dbg(id->adap.dev.parent,
-				 "Lost ownership on bus, trying again\n");
-			if (retries--) {
-				mdelay(2);
-				retry = true;
-			} else {
-				dev_err(id->adap.dev.parent,
-					 "Retries completed, exit\n");
-				return -EREMOTEIO;
-			}
-		}
-	} while (retry);
+	/* If it is bus arbitration error, try again */
+	if (id->err_status & CDNS_I2C_IXR_ARB_LOST)
+		return -EAGAIN;
 
 	return 0;
 }
-- 
1.7.5.4

