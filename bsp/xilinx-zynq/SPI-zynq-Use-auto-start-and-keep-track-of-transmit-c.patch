From b95d32cc0db48c09e96ce6fdb9d73f184294dc87 Mon Sep 17 00:00:00 2001
From: Harini Katakam <harini.katakam@xilinx.com>
Date: Fri, 7 Mar 2014 18:58:24 +0530
Subject: [PATCH 076/509] SPI: zynq: Use auto start and keep track of transmit
 count

https://github.com/analogdevicesinc/linux.git xcomm_zynq
commit 4759cb1da4a7e43c8eac1e58d0bb466909ccf003

Use auto start instead of manual start.
Use a variable "trans_cnt" to keep track of number of bytes
transmitted and rely on this instead of TXFULL and RXNEMPTY
status bits. This is a solution for the clock domain crossing
issue.

Signed-off-by: Harini Katakam <harinik@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/spi/spi-zynq.c |   39 +++++++++++++++++++--------------------
 1 files changed, 19 insertions(+), 20 deletions(-)

diff --git a/drivers/spi/spi-zynq.c b/drivers/spi/spi-zynq.c
index 80706ae..4c3620d 100644
--- a/drivers/spi/spi-zynq.c
+++ b/drivers/spi/spi-zynq.c
@@ -61,7 +61,6 @@
 #define ZYNQ_SPI_CR_SSFORCE_MASK	0x00004000 /* Manual SS Enable Mask */
 #define ZYNQ_SPI_CR_DEFAULT_MASK	(ZYNQ_SPI_CR_MSTREN_MASK | \
 					ZYNQ_SPI_CR_SSCTRL_MASK | \
-					ZYNQ_SPI_CR_MANSTRTEN_MASK | \
 					ZYNQ_SPI_CR_SSFORCE_MASK)
 
 /*
@@ -102,6 +101,9 @@
 /* SPI timeout value */
 #define ZYNQ_SPI_TIMEOUT	(5 * HZ)
 
+/* SPI FIFO depth in bytes */
+#define ZYNQ_SPI_FIFO_DEPTH	128
+
 /* Macros for the SPI controller read/write */
 #define zynq_spi_read(addr)	__raw_readl(addr)
 #define zynq_spi_write(addr, val)	__raw_writel((val), (addr))
@@ -122,6 +124,7 @@ enum driver_state_val {
  * @txbuf:		Pointer	to the TX buffer
  * @rxbuf:		Pointer to the RX buffer
  * @remaining_bytes:	Number of bytes left to transfer
+ * @requested_bytes:	Number of bytes requested
  * @dev_busy:		Device busy flag
  * @done:		Transfer complete status
  * @driver_state:	Describes driver state - ready/suspended
@@ -135,6 +138,7 @@ struct zynq_spi {
 	const u8 *txbuf;
 	u8 *rxbuf;
 	int remaining_bytes;
+	int requested_bytes;
 	u8 dev_busy;
 	struct completion done;
 	enum driver_state_val driver_state;
@@ -315,9 +319,10 @@ static int zynq_spi_setup(struct spi_device *spi)
  */
 static void zynq_spi_fill_tx_fifo(struct zynq_spi *xspi)
 {
-	while ((zynq_spi_read(xspi->regs + ZYNQ_SPI_ISR_OFFSET) &
-		ZYNQ_SPI_IXR_TXFULL_MASK) == 0
-		&& (xspi->remaining_bytes > 0)) {
+	unsigned long trans_cnt = 0;
+
+	while ((trans_cnt < ZYNQ_SPI_FIFO_DEPTH) &&
+		(xspi->remaining_bytes > 0)) {
 		if (xspi->txbuf)
 			zynq_spi_write(xspi->regs + ZYNQ_SPI_TXD_OFFSET,
 					*xspi->txbuf++);
@@ -325,6 +330,7 @@ static void zynq_spi_fill_tx_fifo(struct zynq_spi *xspi)
 			zynq_spi_write(xspi->regs + ZYNQ_SPI_TXD_OFFSET, 0);
 
 		xspi->remaining_bytes--;
+		trans_cnt++;
 	}
 }
 
@@ -358,11 +364,12 @@ static irqreturn_t zynq_spi_irq(int irq, void *dev_id)
 				ZYNQ_SPI_IXR_DEFAULT_MASK);
 		complete(&xspi->done);
 	} else if (intr_status & ZYNQ_SPI_IXR_TXOW_MASK) {
-		u32 ctrl_reg;
+		unsigned long trans_cnt;
+
+		trans_cnt = (xspi->requested_bytes) - (xspi->remaining_bytes);
 
 		/* Read out the data from the RX FIFO */
-		while (zynq_spi_read(xspi->regs + ZYNQ_SPI_ISR_OFFSET) &
-				ZYNQ_SPI_IXR_RXNEMTY_MASK) {
+		while (trans_cnt) {
 			u8 data;
 
 			data = zynq_spi_read(xspi->regs + ZYNQ_SPI_RXD_OFFSET);
@@ -377,17 +384,14 @@ static irqreturn_t zynq_spi_irq(int irq, void *dev_id)
 			 * incorrect status read.
 			 */
 			dmb();
+
+			xspi->requested_bytes--;
+			trans_cnt--;
 		}
 
 		if (xspi->remaining_bytes) {
 			/* There is more data to send */
 			zynq_spi_fill_tx_fifo(xspi);
-
-			ctrl_reg = zynq_spi_read(xspi->regs +
-						 ZYNQ_SPI_CR_OFFSET);
-			ctrl_reg |= ZYNQ_SPI_CR_MANSTRT_MASK;
-			zynq_spi_write(xspi->regs + ZYNQ_SPI_CR_OFFSET,
-				       ctrl_reg);
 		} else {
 			/* Transfer is completed */
 			zynq_spi_write(xspi->regs + ZYNQ_SPI_IDR_OFFSET,
@@ -432,24 +436,19 @@ static int zynq_spi_start_transfer(struct spi_device *spi,
 			struct spi_transfer *transfer)
 {
 	struct zynq_spi *xspi = spi_master_get_devdata(spi->master);
-	u32 ctrl_reg;
 	int ret;
 
 	xspi->txbuf = transfer->tx_buf;
 	xspi->rxbuf = transfer->rx_buf;
 	xspi->remaining_bytes = transfer->len;
-	INIT_COMPLETION(xspi->done);
+	xspi->requested_bytes = transfer->len;
+	reinit_completion(&xspi->done);
 
 	zynq_spi_fill_tx_fifo(xspi);
 
 	zynq_spi_write(xspi->regs + ZYNQ_SPI_IER_OFFSET,
 		ZYNQ_SPI_IXR_DEFAULT_MASK);
 
-	/* Start the transfer by enabling manual start bit */
-	ctrl_reg = zynq_spi_read(xspi->regs + ZYNQ_SPI_CR_OFFSET);
-	ctrl_reg |= ZYNQ_SPI_CR_MANSTRT_MASK;
-	zynq_spi_write(xspi->regs + ZYNQ_SPI_CR_OFFSET, ctrl_reg);
-
 	ret = wait_for_completion_interruptible_timeout(&xspi->done,
 			ZYNQ_SPI_TIMEOUT);
 	if (ret < 1) {
-- 
1.7.5.4

