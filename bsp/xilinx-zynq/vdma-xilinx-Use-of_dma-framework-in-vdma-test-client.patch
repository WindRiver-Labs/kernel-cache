From f26bef2a3163c1a798cd8974bde9c4ff1477ca5d Mon Sep 17 00:00:00 2001
From: Srikanth Thokala <srikanth.thokala@xilinx.com>
Date: Fri, 13 Dec 2013 14:37:34 +0530
Subject: [PATCH 019/182] vdma: xilinx: Use of_dma framework in vdma test
 client

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This patch does following things:
- Uses of_dma framework in vdma test client
- Document the device node for vdma test client
- Add the above node as an example to existing vdma
  device binding documentation

Signed-off-by: Srikanth Thokala <sthokal@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 0c8387bd30385623170321c04a8fdbae70f9e316)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 .../devicetree/bindings/dma/xilinx/axi-vdma.txt    |   21 ++++
 .../devicetree/bindings/dma/xilinx/vdmatest.txt    |   32 +++++++
 drivers/dma/xilinx/vdmatest.c                      |   99 +++++++++-----------
 drivers/dma/xilinx/xilinx_axivdma.c                |    4 +-
 4 files changed, 100 insertions(+), 56 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/dma/xilinx/vdmatest.txt

diff --git a/Documentation/devicetree/bindings/dma/xilinx/axi-vdma.txt b/Documentation/devicetree/bindings/dma/xilinx/axi-vdma.txt
index a9cccf1..94213bf 100644
--- a/Documentation/devicetree/bindings/dma/xilinx/axi-vdma.txt
+++ b/Documentation/devicetree/bindings/dma/xilinx/axi-vdma.txt
@@ -5,6 +5,7 @@ to receive from the video device.
 
 Required properties:
 - compatible: Should be "xlnx,axi-vdma"
+- #dma-cells: Should be <1>, see "dmas" property below
 - reg: Should contain VDMA registers location and length.
 - interrupts: Should contain per channel VDMA interrupts.
 - compatible (child node): It should be either "xlnx,axi-vdma-mm2s-channel" or
@@ -16,6 +17,7 @@ Example:
 
 axi_vdma_0: axivdma@40030000 {
 	compatible = "xlnx,axi-vdma";
+	#dma_cells = <1>;
 	reg = < 0x40030000 0x10000 >;
 	dma-channel@40030000 {
 		compatible = "xlnx,axi-vdma-mm2s-channel";
@@ -26,3 +28,22 @@ axi_vdma_0: axivdma@40030000 {
 		interrupts = < 0 53 4 >;
 	} ;
 } ;
+
+
+* Xilinx Video DMA client
+
+Required properties:
+- dmas: a list of <[Video DMA device phandle] [Channel ID]> pairs,
+	where Channel ID is '0' for write/tx and '1' for read/rx
+	channel.
+- dma-names: a list of DMA channel names, one per "dmas" entry
+
+VDMA Test Client Example:
++++++++++++++++++++++++++
+
+vdmatest_0: vdmatest@0 {
+	compatible ="xlnx,axi-vdma-test";
+	dmas = <&axi_vdma_0 0
+		&axi_vdma_0 1>;
+	dma-names = "vdma0", "vdma1";
+} ;
diff --git a/Documentation/devicetree/bindings/dma/xilinx/vdmatest.txt b/Documentation/devicetree/bindings/dma/xilinx/vdmatest.txt
new file mode 100644
index 0000000..56acce1
--- /dev/null
+++ b/Documentation/devicetree/bindings/dma/xilinx/vdmatest.txt
@@ -0,0 +1,32 @@
+* Xilinx Video DMA Test client
+
+Required properties:
+- compatible: Should be "xlnx,axi-vdma-test"
+- dmas: a list of <[Video DMA device phandle] [Channel ID]> pairs,
+	where Channel ID is '0' for write/tx and '1' for read/rx
+	channel.
+- dma-names: a list of DMA channel names, one per "dmas" entry
+
+Example:
+++++++++
+
+vdmatest_0: vdmatest@0 {
+	compatible ="xlnx,axi-vdma-test";
+	dmas = <&axi_vdma_0 0
+		&axi_vdma_0 1>;
+	dma-names = "vdma0", "vdma1";
+} ;
+
+
+Xilinx Video DMA Device Node Example
+++++++++++++++++++++++++++++++++++++
+axi_vdma_0: axivdma@44A40000 {
+	compatible = "xlnx,axi-vdma";
+	...
+	dma-channel@44A40000 {
+		...
+	} ;
+	dma-channel@44A40030 {
+		...
+	} ;
+} ;
diff --git a/drivers/dma/xilinx/vdmatest.c b/drivers/dma/xilinx/vdmatest.c
index 9376ab3..c504cc3 100644
--- a/drivers/dma/xilinx/vdmatest.c
+++ b/drivers/dma/xilinx/vdmatest.c
@@ -10,10 +10,11 @@
  * published by the Free Software Foundation.
  */
 #include <linux/delay.h>
-#include <linux/dmaengine.h>
+#include <linux/of_dma.h>
 #include <linux/init.h>
 #include <linux/kthread.h>
 #include <linux/module.h>
+#include <linux/platform_device.h>
 #include <linux/random.h>
 #include <linux/slab.h>
 #include <linux/wait.h>
@@ -540,67 +541,40 @@ static int vdmatest_add_slave_channels(struct dma_chan *tx_chan,
 	return 0;
 }
 
-static bool xdma_filter(struct dma_chan *chan, void *param)
+static int vdmatest_of_probe(struct platform_device *pdev)
 {
-	if (*((int *)chan->private) == *(int *)param)
-		return true;
+	struct dma_chan *chan, *rx_chan;
+	int err;
 
-	return false;
-}
+	chan = dma_request_slave_channel(&pdev->dev, "vdma0");
+	if (IS_ERR(chan)) {
+		pr_err("vdmatest: No Tx channel\n");
+		return PTR_ERR(chan);
+	}
 
-static int __init vdmatest_init(void)
-{
-	dma_cap_mask_t mask;
-	struct dma_chan *chan;
-	int err = 0;
+	rx_chan = dma_request_slave_channel(&pdev->dev, "vdma1");
+	if (IS_ERR(rx_chan)) {
+		err = PTR_ERR(rx_chan);
+		pr_err("vdmatest: No Rx channel\n");
+		goto free_tx;
+	}
 
-	enum dma_data_direction direction;
-	u32 match, device_id = 0;
-	struct dma_chan *rx_chan;
+	err = vdmatest_add_slave_channels(chan, rx_chan);
+	if (err) {
+		pr_err("vdmatest: Unable to add channels\n");
+		goto free_rx;
+	}
+	return 0;
 
-	dma_cap_zero(mask);
-	dma_cap_set(DMA_SLAVE | DMA_PRIVATE, mask);
-
-	for (;;) {
-		direction = DMA_MEM_TO_DEV;
-		match = (direction & 0xFF) | XILINX_DMA_IP_VDMA |
-				device_id << XILINX_DMA_DEVICE_ID_SHIFT;
-		pr_debug("vdmatest: match is %x\n", match);
-
-		chan = dma_request_channel(mask, xdma_filter, (void *)&match);
-
-		if (chan)
-			pr_debug("vdmatest: Found tx device\n");
-		else
-			pr_debug("vdmatest: No more tx channels available\n");
-
-		direction = DMA_DEV_TO_MEM;
-		match = (direction & 0xFF) | XILINX_DMA_IP_VDMA |
-				device_id << XILINX_DMA_DEVICE_ID_SHIFT;
-		rx_chan = dma_request_channel(mask, xdma_filter, &match);
-
-		if (rx_chan)
-			pr_debug("vdmatest: Found rx device\n");
-		else
-			pr_debug("vdmatest: No more rx channels available\n");
-
-		if (chan && rx_chan) {
-			err = vdmatest_add_slave_channels(chan, rx_chan);
-			if (err) {
-				dma_release_channel(chan);
-				dma_release_channel(rx_chan);
-			}
-		} else
-			break;
+free_rx:
+	dma_release_channel(rx_chan);
+free_tx:
+	dma_release_channel(chan);
 
-		device_id++;
-	}
 	return err;
 }
-/* when compiled-in wait for drivers to load first */
-late_initcall(vdmatest_init);
 
-static void __exit vdmatest_exit(void)
+static int vdmatest_of_remove(struct platform_device *pdev)
 {
 	struct vdmatest_chan *dtc, *_dtc;
 	struct dma_chan *chan;
@@ -613,8 +587,25 @@ static void __exit vdmatest_exit(void)
 			dma_chan_name(chan));
 		dma_release_channel(chan);
 	}
+	return 0;
 }
-module_exit(vdmatest_exit);
+
+static const struct of_device_id vdmatest_of_ids[] = {
+	{ .compatible = "xlnx,axi-vdma-test",},
+	{}
+};
+
+static struct platform_driver vdmatest_of_driver = {
+	.driver = {
+		.name = "vdmatest",
+		.owner = THIS_MODULE,
+		.of_match_table = vdmatest_of_ids,
+	},
+	.probe = vdmatest_of_probe,
+	.remove = vdmatest_of_remove,
+};
+
+module_platform_driver(vdmatest_of_driver);
 
 MODULE_AUTHOR("Xilinx, Inc.");
 MODULE_DESCRIPTION("Xilinx AXI VDMA Test Client");
diff --git a/drivers/dma/xilinx/xilinx_axivdma.c b/drivers/dma/xilinx/xilinx_axivdma.c
index 8f30734..435fa486 100644
--- a/drivers/dma/xilinx/xilinx_axivdma.c
+++ b/drivers/dma/xilinx/xilinx_axivdma.c
@@ -1272,8 +1272,8 @@ static int xilinx_vdma_chan_probe(struct xilinx_vdma_device *xdev,
 	}
 
 	/*
-	 * Used by dmatest channel matching in slave transfers
-	 * Can change it to be a structure to have more matching information
+	 * Used by DMA clients who doesnt have a device node and can request
+	 * the channel by passing this as a filter to 'dma_request_channel()'.
 	 */
 	chan->private = (chan->direction & 0xff) |
 			XILINX_DMA_IP_VDMA |
-- 
1.7.5.4

