From 76b58059a8ed3cdad790170471d9892397d1a96b Mon Sep 17 00:00:00 2001
From: Davor Joja <davorjoja@logicbricks.com>
Date: Mon, 23 Jun 2014 19:58:26 +0200
Subject: [PATCH 405/793] gpu: drm: xylon: Updated crtc and plane drivers

Removed list and range property parameters and functions from crtc
driver.
Added property functionality to the plane driver.

Signed-off-by: Davor Joja <davorjoja@logicbricks.com>
---
 drivers/gpu/drm/xylon/xylon_crtc.c  |   93 +++---------------------------
 drivers/gpu/drm/xylon/xylon_plane.c |  107 ++++++++++++++++++++++++++++++++++-
 2 files changed, 113 insertions(+), 87 deletions(-)

diff --git a/drivers/gpu/drm/xylon/xylon_crtc.c b/drivers/gpu/drm/xylon/xylon_crtc.c
index 81c53fb..9a03d30 100644
--- a/drivers/gpu/drm/xylon/xylon_crtc.c
+++ b/drivers/gpu/drm/xylon/xylon_crtc.c
@@ -32,13 +32,8 @@
 #include "xylon_drv.h"
 #include "xylon_logicvc_helper.h"
 #include "xylon_logicvc_hw.h"
-#include "xylon_logicvc_layer.h"
 #include "xylon_plane.h"
-
-#define XYLON_DRM_PROPERTY_ALPHA_MIN 0
-#define XYLON_DRM_PROPERTY_ALPHA_MAX 255
-#define XYLON_DRM_PROPERTY_COLOR_MIN 0
-#define XYLON_DRM_PROPERTY_COLOR_MAX 0xFFFFFFFF
+#include "xylon_property.h"
 
 struct xylon_drm_crtc_properties {
 	struct drm_property *bg_color;
@@ -69,41 +64,6 @@ struct xylon_drm_crtc {
 
 #define to_xylon_crtc(x) container_of(x, struct xylon_drm_crtc, base)
 
-static const struct drm_prop_enum_list property_layer_update[] = {
-	{ 0, "Layer Update Enable" },
-	{ 1, "Layer Update Disable" }
-};
-
-static const struct drm_prop_enum_list property_pixel_data_polarity[] = {
-	{ 0, "Pixel Data Polarity Normal" },
-	{ 1, "Pixel Data Polarity Invert" }
-};
-
-static const struct drm_prop_enum_list property_pixel_data_trigger[] = {
-	{ 0, "Pixel Data Trigger Falling" },
-	{ 1, "Pixel Data Trigger Rising" }
-};
-
-static const struct drm_prop_enum_list property_control[] = {
-	{ 0, "Plane Disable" },
-	{ 1, "Plane Enable" }
-};
-
-static const struct drm_prop_enum_list property_color_transparency[] = {
-	{ 0, "Plane Color Transparency Disable" },
-	{ 1, "Plane Color Transparency Enable" }
-};
-
-static const struct drm_prop_enum_list property_interlace[] = {
-	{ 0, "Plane Interlace Disable" },
-	{ 1, "Plane Interlace Enable" }
-};
-
-static const struct drm_prop_enum_list property_pixel_format[] = {
-	{ 0, "Plane ABGR Format Disable" },
-	{ 1, "Plane ABGR Format Enable" }
-};
-
 static int xylon_drm_crtc_clk_set(struct xylon_drm_crtc *crtc)
 {
 	int ret;
@@ -489,43 +449,6 @@ int xylon_drm_crtc_get_param(struct drm_crtc *base_crtc, unsigned int *p,
 	return 0;
 }
 
-static int xylon_drm_property_create_list(struct drm_device *dev,
-					  struct drm_mode_object *obj,
-					  struct drm_property **prop,
-					  const struct drm_prop_enum_list *list,
-					  const char *name,
-					  int size)
-{
-	if (*prop)
-		return 0;
-
-	*prop = drm_property_create_enum(dev, 0, name, list, size);
-	if (*prop == NULL)
-		return -EINVAL;
-
-	drm_object_attach_property(obj, *prop, 0);
-
-	return 0;
-}
-
-static int xylon_drm_property_create_range(struct drm_device *dev,
-					   struct drm_mode_object *obj,
-					   struct drm_property **prop,
-					   const char *name,
-					   u64 min, u64 max, u64 init)
-{
-	if (*prop)
-		return 0;
-
-	*prop = drm_property_create_range(dev, 0, name, min, max);
-	if (*prop == NULL)
-		return -EINVAL;
-
-	drm_object_attach_property(obj, *prop, init);
-
-	return 0;
-}
-
 static int xylon_drm_crtc_create_properties(struct drm_crtc *base_crtc)
 {
 	struct drm_device *dev = base_crtc->dev;
@@ -540,49 +463,49 @@ static int xylon_drm_crtc_create_properties(struct drm_crtc *base_crtc)
 					  0);
 	int size;
 
-	size = ARRAY_SIZE(property_layer_update);
+	size = xylon_drm_property_size(property_layer_update);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->layer_update,
 					   property_layer_update,
 					   "layer_update",
 					   size))
 		return -EINVAL;
-	size = ARRAY_SIZE(property_pixel_data_polarity);
+	size = xylon_drm_property_size(property_pixel_data_polarity);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->pixel_data_polarity,
 					   property_pixel_data_polarity,
 					   "pixel_data_polarity",
 					   size))
 		return -EINVAL;
-	size = ARRAY_SIZE(property_pixel_data_trigger);
+	size = xylon_drm_property_size(property_pixel_data_trigger);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->pixel_data_trigger,
 					   property_pixel_data_trigger,
 					   "pixel_data_trigger",
 					   size))
 		return -EINVAL;
-	size = ARRAY_SIZE(property_control);
+	size = xylon_drm_property_size(property_control);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->control,
 					   property_control,
 					   "control",
 					   size))
 		return -EINVAL;
-	size = ARRAY_SIZE(property_color_transparency);
+	size = xylon_drm_property_size(property_color_transparency);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->color_transparency,
 					   property_color_transparency,
 					   "color_transparency",
 					   size))
 		return -EINVAL;
-	size = ARRAY_SIZE(property_interlace);
+	size = xylon_drm_property_size(property_interlace);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->interlace,
 					   property_interlace,
 					   "interlace",
 					   size))
 		return -EINVAL;
-	size = ARRAY_SIZE(property_pixel_format);
+	size = xylon_drm_property_size(property_pixel_format);
 	if (xylon_drm_property_create_list(dev, obj,
 					   &props->pixel_format,
 					   property_pixel_format,
diff --git a/drivers/gpu/drm/xylon/xylon_plane.c b/drivers/gpu/drm/xylon/xylon_plane.c
index a8f43b0..dd650f6 100644
--- a/drivers/gpu/drm/xylon/xylon_plane.c
+++ b/drivers/gpu/drm/xylon/xylon_plane.c
@@ -29,10 +29,21 @@
 #include "xylon_logicvc_helper.h"
 #include "xylon_logicvc_layer.h"
 #include "xylon_plane.h"
+#include "xylon_property.h"
+
+struct xylon_drm_plane_properties {
+	struct drm_property *control;
+	struct drm_property *color_transparency;
+	struct drm_property *interlace;
+	struct drm_property *pixel_format;
+	struct drm_property *transparency;
+	struct drm_property *transparent_color;
+};
 
 struct xylon_drm_plane {
 	struct drm_plane base;
 	struct xylon_drm_plane_manager *manager;
+	struct xylon_drm_plane_properties properties;
 	dma_addr_t paddr;
 	u32 format;
 	u32 x;
@@ -185,9 +196,40 @@ void xylon_drm_plane_destroy(struct drm_plane *base_plane)
 
 static int xylon_drm_plane_set_property(struct drm_plane *base_plane,
 					struct drm_property *property,
-					u64 val)
+					u64 value)
 {
-	return -EINVAL;
+	struct xylon_drm_plane *plane = to_xylon_plane(base_plane);
+	struct xylon_drm_plane_properties *props = &plane->properties;
+	struct xylon_drm_plane_op op;
+	unsigned int val = (unsigned int)value;
+
+	if (property == props->control) {
+		if (val)
+			xylon_drm_plane_dpms(base_plane, DRM_MODE_DPMS_ON);
+		else
+			xylon_drm_plane_dpms(base_plane, DRM_MODE_DPMS_OFF);
+	} else if (property == props->color_transparency) {
+		op.id = XYLON_DRM_PLANE_OP_ID_COLOR_TRANSPARENCY,
+		op.param = (bool)val;
+	} else if (property == props->interlace) {
+		op.id = XYLON_DRM_PLANE_OP_ID_INTERLACE;
+		op.param = (bool)val;
+	} else if (property == props->pixel_format) {
+		op.id = XYLON_DRM_PLANE_OP_ID_PIXEL_FORMAT;
+		op.param = (bool)val;
+	} else if (property == props->transparency) {
+		op.id = XYLON_DRM_PLANE_OP_ID_TRANSPARENCY;
+		op.param = (u32)val;
+	} else if (property == props->transparent_color) {
+		op.id = XYLON_DRM_PLANE_OP_ID_TRANSPARENT_COLOR;
+		op.param = (u32)val;
+	} else {
+		return -EINVAL;
+	}
+
+	xylon_drm_plane_op(base_plane, &op);
+
+	return 0;
 }
 
 static struct drm_plane_funcs xylon_drm_plane_funcs = {
@@ -197,6 +239,65 @@ static struct drm_plane_funcs xylon_drm_plane_funcs = {
 	.set_property = xylon_drm_plane_set_property,
 };
 
+static int xylon_drm_plane_create_properties(struct drm_plane *base_plane)
+{
+	struct drm_device *dev = base_plane->dev;
+	struct drm_mode_object *obj = &base_plane->base;
+	struct xylon_drm_plane *plane = to_xylon_plane(base_plane);
+	struct xylon_drm_plane_properties *props = &plane->properties;
+	int size;
+	bool last_plane = xylon_cvc_get_info(plane->manager->cvc,
+					     LOGICVC_INFO_LAST_LAYER,
+					     plane->id);
+
+	size = xylon_drm_property_size(property_control);
+	if (xylon_drm_property_create_list(dev, obj,
+					   &props->control,
+					   property_control,
+					   "control",
+					   size))
+		return -EINVAL;
+	size = xylon_drm_property_size(property_color_transparency);
+	if (xylon_drm_property_create_list(dev, obj,
+					   &props->color_transparency,
+					   property_color_transparency,
+					   "color_transparency",
+					   size))
+		return -EINVAL;
+	size = xylon_drm_property_size(property_interlace);
+	if (xylon_drm_property_create_list(dev, obj,
+					   &props->interlace,
+					   property_interlace,
+					   "interlace",
+					   size))
+		return -EINVAL;
+	size = xylon_drm_property_size(property_pixel_format);
+	if (xylon_drm_property_create_list(dev, obj,
+					   &props->pixel_format,
+					   property_pixel_format,
+					   "pixel_format",
+					   size))
+		return -EINVAL;
+	if (!last_plane &&
+	    xylon_drm_property_create_range(dev, obj,
+					    &props->transparency,
+					    "transparency",
+					    XYLON_DRM_PROPERTY_ALPHA_MIN,
+					    XYLON_DRM_PROPERTY_ALPHA_MAX,
+					    XYLON_DRM_PROPERTY_ALPHA_MAX))
+		return -EINVAL;
+	if (!last_plane &&
+	    xylon_drm_property_create_range(dev, obj,
+					    &props->transparent_color,
+					    "transparent_color",
+					    XYLON_DRM_PROPERTY_COLOR_MIN,
+					    XYLON_DRM_PROPERTY_COLOR_MAX,
+					    XYLON_DRM_PROPERTY_COLOR_MIN))
+		return -EINVAL;
+
+	return 0;
+}
+
 struct drm_plane *
 xylon_drm_plane_create(struct xylon_drm_plane_manager *manager,
 		       unsigned int possible_crtcs, bool priv, int priv_id)
@@ -239,6 +340,8 @@ xylon_drm_plane_create(struct xylon_drm_plane_manager *manager,
 	plane->manager = manager;
 	manager->plane[i] = plane;
 
+	xylon_drm_plane_create_properties(&plane->base);
+
 	return &plane->base;
 
 err_init:
-- 
1.7.5.4

