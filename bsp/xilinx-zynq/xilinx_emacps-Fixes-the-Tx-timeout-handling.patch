From 4e07671260a57d29247691820137556b0778bbe3 Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Thu, 12 Dec 2013 11:03:53 +0800
Subject: [PATCH 1/2] xilinx_emacps: Fixes the Tx timeout handling

The patch based on commit:
https://github.com/Xilinx/linux-xlnx/commit/2c27a1c2a0980f6a0209944ba53475617bfe8ba0

The existing tx timeout handler was resulting a kernel crash when
invoked for tx timeout case. The tx timeout handler was trying to
allocate coherent memory for the BDs which was resulting in an error
case for scheduling while atomic.
This patch fixes it by using work queues for Tx timeout handling.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>

[ Because the code of wrlinux5.0.1 isn't synchronous with the code of xilinx,So
  the patch have a tiny different with original patch,The difference is in the
  spinlock aspect. ]

Signed-off-by: Baogen Shang <baogen.shang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   52 +++++++++++++++++---------
 drivers/net/ethernet/xilinx/xilinx_emacps.h |    2 +
 2 files changed, 36 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index a9e028d..d1aa2e0 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1647,38 +1647,39 @@ static int xemacps_close(struct net_device *ndev)
 }
 
 /**
- * xemacps_tx_timeout - callback uses when the transmitter has not made
- * any progress for dev->watchdog ticks.
- * @ndev: network interface device structure
+ * xemacps_reinit_for_txtimeout - work queue scheduled for the tx timeout
+ * handling.
+ * @data: queue work structure
  **/
-static void xemacps_tx_timeout(struct net_device *ndev)
+static void xemacps_reinit_for_txtimeout(struct work_struct *data)
 {
-	struct net_local *lp = netdev_priv(ndev);
+	struct net_local *lp = container_of(data, struct net_local,
+		txtimeout_reinit);
 	int rc;
 
-	printk(KERN_ERR "%s transmit timeout %lu ms, reseting...\n",
-		ndev->name, TX_TIMEOUT * 1000UL / HZ);
-	netif_stop_queue(ndev);
-
-	spin_lock(&lp->lock);
+	netif_stop_queue(lp->ndev);
+	spin_lock_bh(&lp->lock);
 	napi_disable(&lp->napi);
 	xemacps_reset_hw(lp);
+	spin_unlock_bh(&lp->lock);
+	if (lp->phy_dev){
+		if (lp->board_type == BOARD_TYPE_ZYNQ)
+			phy_stop(lp->phy_dev);
+	}
+
 	xemacps_descriptor_free(lp);
-	if (lp->phy_dev)
-		phy_stop(lp->phy_dev);
+
 	rc = xemacps_descriptor_init(lp);
 	if (rc) {
 		printk(KERN_ERR "%s Unable to allocate DMA memory, rc %d\n",
-		ndev->name, rc);
-		spin_unlock(&lp->lock);
+		lp->ndev->name, rc);
 		return;
 	}
 
 	rc = xemacps_setup_ring(lp);
 	if (rc) {
 		printk(KERN_ERR "%s Unable to setup BD rings, rc %d\n",
-		ndev->name, rc);
-		spin_unlock(&lp->lock);
+		lp->ndev->name, rc);
 		return;
 	}
 	xemacps_init_hw(lp);
@@ -1689,11 +1690,24 @@ static void xemacps_tx_timeout(struct net_device *ndev)
 	if (lp->phy_dev)
 		phy_start(lp->phy_dev);
 	napi_enable(&lp->napi);
+	netif_start_queue(lp->ndev);
+}
 
-	spin_unlock(&lp->lock);
-	netif_start_queue(ndev);
+/**
+ * xemacps_tx_timeout - callback uses when the transmitter has not made
+ * any progress for dev->watchdog ticks.
+ * @ndev: network interface device structure
+ **/
+static void xemacps_tx_timeout(struct net_device *ndev)
+{
+	struct net_local *lp = netdev_priv(ndev);
+
+	dev_err(&lp->pdev->dev, "transmit timeout %lu ms, reseting...\n",
+		TX_TIMEOUT * 1000UL / HZ);
+	queue_work(lp->txtimeout_handler_wq, &lp->txtimeout_reinit);
 }
 
+
 /**
  * xemacps_set_mac_address - set network interface mac address
  * @ndev: network interface device structure
@@ -2545,6 +2559,8 @@ static int __init xemacps_probe(struct platform_device *pdev)
 
 	xemacps_update_hwaddr(lp);
 
+	lp->txtimeout_handler_wq = create_singlethread_workqueue(DRIVER_NAME);
+	INIT_WORK(&lp->txtimeout_reinit, xemacps_reinit_for_txtimeout);
 	platform_set_drvdata(pdev, ndev);
 
 	printk(KERN_INFO "%s, pdev->id %d, baseaddr 0x%08lx, irq %d\n",
diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.h b/drivers/net/ethernet/xilinx/xilinx_emacps.h
index e2bf733..d75d11d 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.h
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.h
@@ -538,6 +538,8 @@ struct net_local {
 
 	struct napi_struct     napi;    /* napi information for device */
 	struct net_device_stats stats;  /* Statistics for this device */
+	struct workqueue_struct *txtimeout_handler_wq;
+	struct work_struct txtimeout_reinit;
 
 	/* Manage internal timer for packet timestamping */
 	struct cyclecounter    cycles;
-- 
1.7.5.4

