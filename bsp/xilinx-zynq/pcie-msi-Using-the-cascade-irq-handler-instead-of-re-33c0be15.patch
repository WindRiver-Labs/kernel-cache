From 82e125fa6ed8e7933a1a076cf214528d36ef8ce0 Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Thu, 27 Aug 2015 09:38:09 +0000
Subject: [PATCH 2/2] pcie: msi: Using the cascade irq handler instead of
 registering irq action

I think the hardware specification for the ZYNQ'S pci interrupt as the
following

1. Disable CONFIG_PCI_MSI
All the pci device will share the pci host irq.

2. Enable CONFIG_PCI_MSI.

In the arm enviroment, all the msi interrupt just only
chain to the pci host irq.

Up to now, The kernel implement the first enviroment. But in the second
conditions, at first the PCI host will register irq using the request_irq
method. If some msi generate the irq request, there will be called for
the request_irq handle. The handle will read the msi register and call
generic_handle_irq to deal with the relatively msi irq.

In preempt-rt, The handle is threaded thought request_irq to register
handle in the no NO_THREAD flags. So It is unsafe in the thread to deal
with msi interrupt.

So using the chain interrupt method, when the msi irq is triggered,
the system will call the handle with no thread. So that is safe.

WARNING: at kernel/irq/handle.c:148 handle_irq_event_percpu+0x1cc/0x450()
irq 214 handler irq_default_primary_handler+0x0/0x1c enabled interrupts
Modules linked in:
CPU: 1 PID: 29 Comm: irq/91-zynqpcie Not tainted 3.10.38-ltsi-rt34-WR6.0.0.0_preempt-rt #11
hub 1-1:1.0: USB hub found
hub 1-1:1.0: 4 ports detected
[<80017628>] (unwind_backtrace+0x0/0xec) from [<8001264c>] (show_stack+0x20/0x24)
[<8001264c>] (show_stack+0x20/0x24) from [<806e6eec>] (dump_stack+0x20/0x28)
[<806e6eec>] (dump_stack+0x20/0x28) from [<8002976c>] (warn_slowpath_common+0x5c/0x7c)
[<8002976c>] (warn_slowpath_common+0x5c/0x7c) from [<800297cc>] (warn_slowpath_fmt+0x40/0x48)
[<800297cc>] (warn_slowpath_fmt+0x40/0x48) from [<800b3ea4>] (handle_irq_event_percpu+0x1cc/0x450)
[<800b3ea4>] (handle_irq_event_percpu+0x1cc/0x450) from [<800b4174>] (handle_irq_event+0x4c/0x6c)
[<800b4174>] (handle_irq_event+0x4c/0x6c) from [<800b6ce4>] (handle_simple_irq+0xac/0xbc)
[<800b6ce4>] (handle_simple_irq+0xac/0xbc) from [<800b3484>] (generic_handle_irq+0x30/0x40)
[<800b3484>] (generic_handle_irq+0x30/0x40) from [<80020dd0>] (xaxi_pcie_intr_handler+0x21c/0x32c)
[<80020dd0>] (xaxi_pcie_intr_handler+0x21c/0x32c) from [<800b4d1c>] (irq_forced_thread_fn+0x30/0x60)
[<800b4d1c>] (irq_forced_thread_fn+0x30/0x60) from [<800b4fb0>] (irq_thread+0xec/0x180)
[<800b4fb0>] (irq_thread+0xec/0x180) from [<800558a0>] (kthread+0xb4/0xbc)
[<800558a0>] (kthread+0xb4/0xbc) from [<8000dee8>] (ret_from_fork+0x14/0x20)
---[ end trace 0000000000000002 ]---

Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/pci/host/pcie-xilinx.c |   16 +++++++++++++++-
 1 files changed, 15 insertions(+), 1 deletions(-)

diff --git a/drivers/pci/host/pcie-xilinx.c b/drivers/pci/host/pcie-xilinx.c
index 5728b8a..07f980a 100644
--- a/drivers/pci/host/pcie-xilinx.c
+++ b/drivers/pci/host/pcie-xilinx.c
@@ -26,6 +26,7 @@
 #include <linux/of_irq.h>
 #include <linux/pci.h>
 #include <linux/platform_device.h>
+#include <linux/irqchip/chained_irq.h>
 
 /* Register definitions */
 #define XILINX_PCIE_REG_BIR		0x00000130
@@ -599,6 +600,15 @@ static irqreturn_t xilinx_pcie_intr_handler(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
+static void xilinx_pcie_intr_chain_handler(unsigned int irq, struct irq_desc *desc)
+{
+	struct irq_chip *chip = irq_get_chip(irq);
+
+	chained_irq_enter(chip, desc);
+	xilinx_pcie_intr_handler(irq, irq_get_handler_data(irq));
+	chained_irq_exit(chip, desc);
+}
+
 /**
  * xilinx_pcie_free_irq_domain - Free IRQ domain
  * @port: PCIe port information
@@ -858,13 +868,17 @@ static int xilinx_pcie_parse_dt(struct xilinx_pcie_port *port)
 		return PTR_ERR(port->reg_base);
 
 	port->irq = irq_of_parse_and_map(node, 0);
+#ifdef CONFIG_PCI_MSI
+	irq_set_handler_data(port->irq, port);
+	irq_set_chained_handler(port->irq, xilinx_pcie_intr_chain_handler);
+#else
 	err = devm_request_irq(dev, port->irq, xilinx_pcie_intr_handler,
 			       IRQF_SHARED, "xilinx-pcie", port);
 	if (err) {
 		dev_err(dev, "unable to request irq %d\n", port->irq);
 		return err;
 	}
-
+#endif
 	return 0;
 }
 
-- 
1.7.5.4

