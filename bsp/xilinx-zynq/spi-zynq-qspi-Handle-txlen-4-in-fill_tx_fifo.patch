From 8cb25be4013b7a8a0ad11a51df6ad58fa5335da4 Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Tue, 19 May 2015 07:25:48 +0200
Subject: [PATCH 531/793] spi: zynq-qspi: Handle txlen < 4 in fill_tx_fifo

Merge the code for handling bytes_to_transfer < 4 into
zynq_qspi_fill_tx_fifo(), removing some duplicate code.

Add a parameter 'txempty' for this. Rename the parameter 'size' to
'txcount' as it is a number of words, not a number of bytes.

This is just a cleanup; the control flow is not affected, except that
zynq_qspi_start_transfer() now handles the case transfer->len == 0
correctly.

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Reviewed-by: Harini Katakam <harinik@xilinx.com>
---
 drivers/spi/spi-zynq-qspi.c |   48 +++++++++++++++++++++++++-----------------
 1 files changed, 28 insertions(+), 20 deletions(-)

diff --git a/drivers/spi/spi-zynq-qspi.c b/drivers/spi/spi-zynq-qspi.c
index 8ecbe04..1c6d716 100644
--- a/drivers/spi/spi-zynq-qspi.c
+++ b/drivers/spi/spi-zynq-qspi.c
@@ -453,14 +453,30 @@ static int zynq_qspi_setup(struct spi_device *qspi)
 /**
  * zynq_qspi_fill_tx_fifo - Fills the TX FIFO with as many bytes as possible
  * @xqspi:	Pointer to the zynq_qspi structure
- * @size:	Size of the fifo to be filled
+ * @txcount:	Maximum number of words to write
+ * @txempty:	Indicates that TxFIFO is empty
  */
-static void zynq_qspi_fill_tx_fifo(struct zynq_qspi *xqspi, u32 size)
+static void zynq_qspi_fill_tx_fifo(struct zynq_qspi *xqspi, int txcount,
+				   bool txempty)
 {
-	u32 fifocount;
+	int count, len, k;
 
-	for (fifocount = 0; (fifocount < size) &&
-	     (xqspi->bytes_to_transfer >= 4); fifocount++) {
+	len = xqspi->bytes_to_transfer;
+	if (len && len < 4) {
+		/*
+		 * We must empty the TxFIFO between accesses to TXD0,
+		 * TXD1, TXD2, TXD3.
+		 */
+		if (txempty)
+			zynq_qspi_write_tx_fifo(xqspi, len);
+		return;
+	}
+
+	count = len/4;
+	if (count > txcount)
+		count = txcount;
+
+	for (k = 0; k < count; k++) {
 		if (xqspi->txbuf) {
 			zynq_qspi_write(xqspi,
 					ZYNQ_QSPI_TXD_00_00_OFFSET,
@@ -490,6 +506,8 @@ static irqreturn_t zynq_qspi_irq(int irq, void *dev_id)
 	struct spi_master *master = dev_id;
 	struct zynq_qspi *xqspi = spi_master_get_devdata(master);
 	u32 intr_status, rxcount, rxindex = 0;
+	bool txempty;
+	u32 data;
 
 	intr_status = zynq_qspi_read(xqspi, ZYNQ_QSPI_STATUS_OFFSET);
 	zynq_qspi_write(xqspi, ZYNQ_QSPI_STATUS_OFFSET , intr_status);
@@ -501,7 +519,7 @@ static irqreturn_t zynq_qspi_irq(int irq, void *dev_id)
 		 * We have the THRESHOLD value set to 1,
 		 * so this bit indicates Tx FIFO is empty.
 		 */
-		u32 data;
+		txempty = !!(intr_status & ZYNQ_QSPI_IXR_TXNFULL_MASK);
 
 		rxcount = xqspi->bytes_to_receive - xqspi->bytes_to_transfer;
 		rxcount = (rxcount % 4) ? ((rxcount/4) + 1) : (rxcount/4);
@@ -530,15 +548,9 @@ static irqreturn_t zynq_qspi_irq(int irq, void *dev_id)
 		}
 
 		if (xqspi->bytes_to_transfer) {
-			if (xqspi->bytes_to_transfer >= 4) {
-				/* There is more data to send */
-				zynq_qspi_fill_tx_fifo(xqspi,
-						       ZYNQ_QSPI_RX_THRESHOLD);
-			} else if (intr_status & ZYNQ_QSPI_IXR_TXNFULL_MASK) {
-				int tmp;
-				tmp = xqspi->bytes_to_transfer;
-				zynq_qspi_write_tx_fifo(xqspi, tmp);
-			}
+			/* There is more data to send */
+			zynq_qspi_fill_tx_fifo(xqspi, ZYNQ_QSPI_RX_THRESHOLD,
+					       txempty);
 		} else {
 			/*
 			 * If transfer and receive is completed then only send
@@ -584,11 +596,7 @@ static int zynq_qspi_start_transfer(struct spi_master *master,
 
 	zynq_qspi_setup_transfer(qspi, transfer);
 
-	if (transfer->len >= 4) {
-		zynq_qspi_fill_tx_fifo(xqspi, ZYNQ_QSPI_FIFO_DEPTH);
-	} else {
-		zynq_qspi_write_tx_fifo(xqspi, transfer->len);
-	}
+	zynq_qspi_fill_tx_fifo(xqspi, ZYNQ_QSPI_FIFO_DEPTH, true);
 
 	zynq_qspi_write(xqspi, ZYNQ_QSPI_IEN_OFFSET,
 			ZYNQ_QSPI_IXR_ALL_MASK);
-- 
1.7.5.4

