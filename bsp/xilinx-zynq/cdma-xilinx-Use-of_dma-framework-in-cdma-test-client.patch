From de0540e68d58b131fa59a18ae89225ee5ce3c5a0 Mon Sep 17 00:00:00 2001
From: Kedareswara rao Appana <appana.durga.rao@xilinx.com>
Date: Sun, 5 Jul 2015 21:29:59 +0530
Subject: [PATCH 175/793] cdma: xilinx: Use of_dma framework in cdma test
 client

This patch does following things:
- Uses of_dma framework in cdma test client.
- Document the device node for cdma test client.

Signed-off-by: Kedareswara rao Appana <appanad@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
---
 .../devicetree/bindings/dma/xilinx/axi-cdma.txt    |   33 ++++++---
 drivers/dma/xilinx/cdmatest.c                      |   83 ++++++++++++--------
 2 files changed, 73 insertions(+), 43 deletions(-)

diff --git a/Documentation/devicetree/bindings/dma/xilinx/axi-cdma.txt b/Documentation/devicetree/bindings/dma/xilinx/axi-cdma.txt
index 9035626..bd4462e 100644
--- a/Documentation/devicetree/bindings/dma/xilinx/axi-cdma.txt
+++ b/Documentation/devicetree/bindings/dma/xilinx/axi-cdma.txt
@@ -1,18 +1,31 @@
-Xilinx AXI CDMA engine, it does transfers between memory and memory
+* Xilinx AXI CDMA Test client
 
 Required properties:
-- compatible: Should be "xlnx,axi-cdma"
-- reg: Should contain CDMA registers location and length.
-- interrupts: Should contain channel CDMA interrupts.
+- compatible: Should be "xlnx,axi-cdma-test-1.00.a"
+- dmas: a list of <[CDMA device phandle] [Channel ID]> pairs,
+	where Channel ID is '0' for write/tx and '1' for read/rx
+	channel.
+- dma-names: a list of CDMA channel names, one per "dmas" entry
 
 Example:
 ++++++++
 
-axi_cdma_0: axicdma@40030000 {
-	compatible = "xlnx,axi-cdma";
-	reg = < 0x40030000 0x10000 >;
-	dma-channel@40030000 {
-		interrupts = < 0 59 4 >;
-	} ;
+cdmatest_0: cdmatest@0 {
+       compatible ="xlnx,axi-cdma-test-1.00.a";
+       dmas = <&axi_cdma_0 0>;
+       dma-names = "cdma";
 } ;
 
+Xilinx AXI CDMA Device Node Example
+++++++++++++++++++++++++++++++++++++
+
+axi_cdma_0: axicdma@7e200000 {
+       compatible = "xlnx,axi-cdma-1.00.a";
+       #dma_cells = <1>;
+       reg = < 0x7e200000 0x10000 >;
+       dma-channel@7e200000 {
+               compatible = "xlnx,axi-cdma-channel";
+               interrupts = < 0 55 4 >;
+               xlnx,datawidth = <0x40>;
+       } ;
+};
diff --git a/drivers/dma/xilinx/cdmatest.c b/drivers/dma/xilinx/cdmatest.c
index bdddd23..5d8b9f3 100644
--- a/drivers/dma/xilinx/cdmatest.c
+++ b/drivers/dma/xilinx/cdmatest.c
@@ -16,6 +16,8 @@
 #include <linux/module.h>
 #include <linux/random.h>
 #include <linux/slab.h>
+#include <linux/of_dma.h>
+#include <linux/platform_device.h>
 #include <linux/wait.h>
 #include <linux/amba/xilinx_dma.h>
 
@@ -599,44 +601,31 @@ static int cdmatest_add_channel(struct dma_chan *chan)
 	return 0;
 }
 
-static bool filter(struct dma_chan *chan, void *param)
+static int xilinx_cdmatest_probe(struct platform_device *pdev)
 {
-	if (!cdmatest_match_channel(chan) ||
-			!cdmatest_match_device(chan->device))
-		return false;
+	struct dma_chan *chan;
+	int err;
 
-	return true;
-}
+	chan = dma_request_slave_channel(&pdev->dev, "cdma");
+	if (IS_ERR(chan)) {
+		pr_err("xilinx_cdmatest: No channel\n");
+		return PTR_ERR(chan);
+	}
 
-static int __init cdmatest_init(void)
-{
-	dma_cap_mask_t mask;
-	struct dma_chan *chan;
-	int err = 0;
-
-	dma_cap_zero(mask);
-	dma_cap_set(DMA_MEMCPY, mask);
-	for (;;) {
-		chan = dma_request_channel(mask, filter, NULL);
-
-		if (chan) {
-			err = cdmatest_add_channel(chan);
-			if (err) {
-				dma_release_channel(chan);
-				break; /* add_channel failed, punt */
-			}
-		} else
-			break; /* no more channels available */
-		if (max_channels && nr_channels >= max_channels)
-			break; /* we have all we need */
+	err = cdmatest_add_channel(chan);
+	if (err) {
+		pr_err("xilinx_cdmatest: Unable to add channel\n");
+		goto free_tx;
 	}
+	return 0;
+
+free_tx:
+	dma_release_channel(chan);
 
 	return err;
 }
-/* when compiled-in wait for drivers to load first */
-late_initcall(cdmatest_init);
 
-static void __exit cdmatest_exit(void)
+static int xilinx_cdmatest_remove(struct platform_device *pdev)
 {
 	struct cdmatest_chan *dtc, *_dtc;
 	struct dma_chan *chan;
@@ -645,12 +634,40 @@ static void __exit cdmatest_exit(void)
 		list_del(&dtc->node);
 		chan = dtc->chan;
 		cdmatest_cleanup_channel(dtc);
-		pr_debug("cdmatest: dropped channel %s\n",
-			 dma_chan_name(chan));
+		pr_info("xilinx_cdmatest: dropped channel %s\n",
+			dma_chan_name(chan));
 		dma_release_channel(chan);
 	}
+	return 0;
+}
+
+static const struct of_device_id xilinx_cdmatest_of_ids[] = {
+	{ .compatible = "xlnx,axi-cdma-test-1.00.a", },
+	{}
+};
+
+static struct platform_driver xilinx_cdmatest_driver = {
+	.driver = {
+		.name = "xilinx_cdmatest",
+		.owner = THIS_MODULE,
+		.of_match_table = xilinx_cdmatest_of_ids,
+	},
+	.probe = xilinx_cdmatest_probe,
+	.remove = xilinx_cdmatest_remove,
+};
+
+static int __init cdma_init(void)
+{
+	return platform_driver_register(&xilinx_cdmatest_driver);
+
+}
+late_initcall(cdma_init);
+
+static void __exit cdma_exit(void)
+{
+	platform_driver_unregister(&xilinx_cdmatest_driver);
 }
-module_exit(cdmatest_exit);
+module_exit(cdma_exit)
 
 MODULE_AUTHOR("Xilinx, Inc.");
 MODULE_DESCRIPTION("Xilinx AXI CDMA Test Client");
-- 
1.7.5.4

