From d25c8ea2b697c5394d070e36d8b59fbe4905e660 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Fri, 20 Jun 2014 09:51:43 -0700
Subject: [PATCH 155/182] ARM: zynq: Unconditionally shutdown ARMPLL during
 suspend

This patch comes from:
  https://github.com/Xilinx/linux-xlnx.git

This moves the ARMPLL shutdown from the early suspend stage to very
late.
Originally the bypass/shutdown was tried to be graceful using the CCF.
But that resulted in problems with Zynq timers that all depend on the
CPU clock.
The new approach moves the shutdown to very late hoping to avoid all the
timer related troubles, but also implies some - now mandatory -
assumptions:
 - peripherals - especially the wake up source - are clocked by the
   IOPLL
 - Nothing else in the chip relies on the ARMPLL to stay stable

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
(cherry picked from commit 7cdf3ce1ac6386a8069d42f7bb15349d22886f32)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/mach-zynq/suspend.S |   29 ++++++++++++++++++++++++++++-
 drivers/clk/zynq/clkc.c      |    7 -------
 2 files changed, 28 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-zynq/suspend.S b/arch/arm/mach-zynq/suspend.S
index ab0e8c8..30705c7 100644
--- a/arch/arm/mach-zynq/suspend.S
+++ b/arch/arm/mach-zynq/suspend.S
@@ -17,6 +17,7 @@
 
 #include <linux/linkage.h>
 
+#define ARMPLL_CTRL_OFFS	0x100
 #define DDRPLL_CTRL_OFFS	0x104
 #define PLLSTATUS_OFFS		0x10c
 #define DDR_CLK_CTRL_OFFS	0x124
@@ -28,6 +29,7 @@
 #define PLL_BYPASS_MASK		(1 << 4)
 #define DCICLK_ENABLE_MASK	1
 #define DDRCLK_ENABLE_MASK	3
+#define ARM_LOCK_MASK		(1 << 0)
 #define DDR_LOCK_MASK		(1 << 1)
 #define DDRC_STATUS_MASK	7
 
@@ -108,6 +110,13 @@ ENTRY(zynq_sys_suspend)
 	orr	r2, #(PLL_PWRDWN_MASK | PLL_RESET_MASK)
 	str	r2, [r1, #DDRPLL_CTRL_OFFS]
 
+	/* Bypass and powerdown ARM PLL */
+	ldr	r2, [r1, #ARMPLL_CTRL_OFFS]
+	orr	r2, #PLL_BYPASS_MASK
+	str	r2, [r1, #ARMPLL_CTRL_OFFS]
+	orr	r2, #(PLL_PWRDWN_MASK | PLL_RESET_MASK)
+	str	r2, [r1, #ARMPLL_CTRL_OFFS]
+
 suspend:
 	dsb	sy
 	wfi
@@ -116,6 +125,24 @@ suspend:
 	moveq	r0, #-1
 	beq	exit
 
+	/* Power up ARM PLL */
+	ldr	r2, [r1, #ARMPLL_CTRL_OFFS]
+	bic	r2, #(PLL_PWRDWN_MASK | PLL_RESET_MASK)
+	str	r2, [r1, #ARMPLL_CTRL_OFFS]
+	/* wait for lock */
+1:	ldr	r2, [r1, #PLLSTATUS_OFFS]
+	ands	r2, #ARM_LOCK_MASK
+	beq	1b
+
+	dsb	sy
+
+	/* Disable ARM PLL bypass */
+	ldr	r2, [r1, #ARMPLL_CTRL_OFFS]
+	bic	r2, #PLL_BYPASS_MASK
+	str	r2, [r1, #ARMPLL_CTRL_OFFS]
+
+	dmb	st
+
 	/* Power up DDR PLL */
 	ldr	r2, [r1, #DDRPLL_CTRL_OFFS]
 	bic	r2, #(PLL_PWRDWN_MASK | PLL_RESET_MASK)
@@ -127,7 +154,7 @@ suspend:
 
 	dsb	sy
 
-	/* Disable PLL bypass */
+	/* Disable DDR PLL bypass */
 	ldr	r2, [r1, #DDRPLL_CTRL_OFFS]
 	bic	r2, #PLL_BYPASS_MASK
 	str	r2, [r1, #DDRPLL_CTRL_OFFS]
diff --git a/drivers/clk/zynq/clkc.c b/drivers/clk/zynq/clkc.c
index 0debba8..1a504b1 100644
--- a/drivers/clk/zynq/clkc.c
+++ b/drivers/clk/zynq/clkc.c
@@ -106,7 +106,6 @@ static const char *gem1_emio_input_names[] __initdata = {"gem1_emio_clk"};
 static const char *swdt_ext_clk_input_names[] __initdata = {"swdt_ext_clk"};
 
 #ifdef CONFIG_SUSPEND
-static struct clk *armpll_save_parent;
 static struct clk *iopll_save_parent;
 
 #define TOPSW_CLK_CTRL_DIS_MASK	BIT(0)
@@ -116,22 +115,16 @@ int zynq_clk_suspend_early(void)
 	int ret;
 
 	iopll_save_parent = clk_get_parent(clks[iopll]);
-	armpll_save_parent = clk_get_parent(clks[armpll]);
 
 	ret = clk_set_parent(clks[iopll], ps_clk);
 	if (ret)
 		pr_info("%s: reparent iopll failed %d\n", __func__, ret);
 
-	ret = clk_set_parent(clks[armpll], ps_clk);
-	if (ret)
-		pr_info("%s: reparent armpll failed %d\n", __func__, ret);
-
 	return 0;
 }
 
 void zynq_clk_resume_late(void)
 {
-	clk_set_parent(clks[armpll], armpll_save_parent);
 	clk_set_parent(clks[iopll], iopll_save_parent);
 }
 
-- 
1.7.5.4

