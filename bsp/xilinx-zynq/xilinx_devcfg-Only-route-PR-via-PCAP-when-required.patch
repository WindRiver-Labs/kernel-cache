From 56fb48e0c96c0f7979897073f11e6cadebd5ebca Mon Sep 17 00:00:00 2001
From: Mike Looijmans <mike.looijmans@topic.nl>
Date: Mon, 25 Jan 2016 10:13:41 +0100
Subject: [PATCH 6/6] xilinx_devcfg: Only route PR via PCAP when required

The xilinx_devcfg driver takes ownership of the PR interface, making
it impossible to use the ICAP interface for partial reconfiguration.

This patch changes the driver to only activate PR over PCAP while the
device is open for partial reconfiguration.

This allows both PCAP and ICAP interfaces to be used for PR.

Signed-off-by: Mike Looijmans <mike.looijmans@topic.nl>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
[zou:Original patch taken from
https://github.com/Xilinx/linux-xlnx.git xilinx-v2016.3]
Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/char/xilinx_devcfg.c |   32 +++++++++++++++++++++++++++-----
 1 files changed, 27 insertions(+), 5 deletions(-)

diff --git a/drivers/char/xilinx_devcfg.c b/drivers/char/xilinx_devcfg.c
index a142a7d..c712c54 100644
--- a/drivers/char/xilinx_devcfg.c
+++ b/drivers/char/xilinx_devcfg.c
@@ -29,6 +29,9 @@
 #include <linux/types.h>
 #include <linux/uaccess.h>
 
+extern void zynq_slcr_init_preload_fpga(void);
+extern void zynq_slcr_init_postload_fpga(void);
+
 #define DRIVER_NAME "xdevcfg"
 #define XDEVCFG_DEVICES 1
 
@@ -476,6 +479,22 @@ err_clk:
 	return status;
 }
 
+static void xdevcfg_enable_partial(struct xdevcfg_drvdata *drvdata)
+{
+	u32 reg = xdevcfg_readreg(drvdata->base_address + XDCFG_CTRL_OFFSET);
+
+	xdevcfg_writereg(drvdata->base_address + XDCFG_CTRL_OFFSET,
+			 reg | XDCFG_CTRL_PCAP_PR_MASK);
+}
+
+static void xdevcfg_disable_partial(struct xdevcfg_drvdata *drvdata)
+{
+	u32 reg = xdevcfg_readreg(drvdata->base_address + XDCFG_CTRL_OFFSET);
+
+	xdevcfg_writereg(drvdata->base_address + XDCFG_CTRL_OFFSET,
+			 reg & ~XDCFG_CTRL_PCAP_PR_MASK);
+}
+
 /**
  * xdevcfg_open() - The is the driver open function.
  * @inode:	Pointer to the inode structure of this device.
@@ -512,8 +531,10 @@ static int xdevcfg_open(struct inode *inode, struct file *file)
 	 * (xdevcfg_reset_pl function) and also xslcr_init_preload_fpga and
 	 * xslcr_init_postload_fpga functions are not invoked.
 	 */
-	if (!drvdata->is_partial_bitstream)
-		xslcr_init_preload_fpga();
+	if (drvdata->is_partial_bitstream)
+		xdevcfg_enable_partial(drvdata);
+	else
+		zynq_slcr_init_preload_fpga();
 
 	/*
 	 * Only do the reset of the PL for Zynq as it causes problems on the
@@ -545,8 +566,10 @@ static int xdevcfg_release(struct inode *inode, struct file *file)
 {
 	struct xdevcfg_drvdata *drvdata = file->private_data;
 
-	if (!drvdata->is_partial_bitstream)
-		xslcr_init_postload_fpga();
+	if (drvdata->is_partial_bitstream)
+		xdevcfg_disable_partial(drvdata);
+	else
+		zynq_slcr_init_postload_fpga();
 
 	if (drvdata->residue_len)
 		printk("Did not transfer last %d bytes\n",
@@ -1957,7 +1980,6 @@ static int xdevcfg_drv_probe(struct platform_device *pdev)
 	/*
 	 * Set the configuration register with the following options
 	 *  - Reset FPGA
-	 *  - Enable PCAP interface for Partial reconfiguration
 	 *  - Enable the PCAP interface
 	 *  - Set the throughput rate for maximum speed
 	 *  - Set the CPU in user mode
-- 
1.7.5.4

