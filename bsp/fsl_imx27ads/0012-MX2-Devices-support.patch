From dbf6bd70769829849dc12ca5f5beeb165ff29dbc Mon Sep 17 00:00:00 2001
From: Alexander Smirnov <asmirnov@embeddedalley.com>
Date: Mon, 29 Dec 2008 18:26:11 +0300
Subject: [PATCH] MX2: Devices support

This patch expands the known devices on i.MX21/i.MX27 procesors.

New devices are:

 - spi
 - i2c
 - ssi
 - watchdog
 - framebuffer
 - camera

Note: This is for development. Not for mainline yet.

Signed-off-by: Juergen Beisert <j.beisert@pengutronix.de>
Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
Signed-off-by: Alexander Smirnov <asmirnov@embeddedalley.com>

Merged from pengutronix.de
---
 arch/arm/mach-mx2/devices.c |  288 +++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-mx2/devices.h |   12 ++
 2 files changed, 300 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-mx2/devices.c b/arch/arm/mach-mx2/devices.c
index a0ee8d2..0207be3 100644
--- a/arch/arm/mach-mx2/devices.c
+++ b/arch/arm/mach-mx2/devices.c
@@ -58,6 +58,112 @@ struct platform_device mxc_irda_device = {
 	.resource = mxc_irda_resources,
 };
 
+/* Platform Data for MXC VPU */
+struct platform_device mxc_vpu_device = {
+	.name = "mxc_vpu",
+	.id = 0,
+};
+
+#ifdef CONFIG_MACH_MX27
+static struct resource mx27_camera_resources[] = {
+	{
+	       .start = CSI_BASE_ADDR,
+	       .end = CSI_BASE_ADDR + 0x1f,
+	       .flags = IORESOURCE_MEM,
+	}, {
+	       .start = EMMA_PRP_BASE_ADDR,
+	       .end = EMMA_PRP_BASE_ADDR + 0x1f,
+	       .flags = IORESOURCE_MEM,
+	}, {
+	       .start = MXC_INT_CSI,
+	       .end = MXC_INT_CSI,
+	       .flags = IORESOURCE_IRQ,
+	},{
+	       .start = MXC_INT_EMMAPRP,
+	       .end = MXC_INT_EMMAPRP,
+	       .flags = IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device mx27_camera_device = {
+	.name = "mx27-camera",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mx27_camera_resources),
+	.resource = mx27_camera_resources,
+};
+#endif
+
+/*
+ * SPI master controller
+ *
+ * - i.MX1: 2 channel (slighly different register setting)
+ * - i.MX21: 2 channel
+ * - i.MX27: 3 channel
+ */
+static struct resource mxc_spi_resources0[] = {
+	[0] = {
+	       .start = CSPI1_BASE_ADDR,
+	       .end = CSPI1_BASE_ADDR + 0x1F,
+	       .flags = IORESOURCE_MEM,
+	},
+	[1] = {
+	       .start = MXC_INT_CSPI1,
+	       .end = MXC_INT_CSPI1,
+	       .flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct resource mxc_spi_resources1[] = {
+	[0] = {
+		.start = CSPI2_BASE_ADDR,
+		.end = CSPI2_BASE_ADDR + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = MXC_INT_CSPI2,
+		.end = MXC_INT_CSPI2,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+#ifdef CONFIG_MACH_MX27
+static struct resource mxc_spi_resources2[] = {
+	[0] = {
+		.start = CSPI3_BASE_ADDR,
+		.end = CSPI3_BASE_ADDR + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = MXC_INT_CSPI3,
+		.end = MXC_INT_CSPI3,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+#endif
+
+struct platform_device mxc_spi_device0 = {
+	.name = "mxc_spi",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mxc_spi_resources0),
+	.resource = mxc_spi_resources0,
+};
+
+struct platform_device mxc_spi_device1 = {
+	.name = "mxc_spi",
+	.id = 1,
+	.num_resources = ARRAY_SIZE(mxc_spi_resources1),
+	.resource = mxc_spi_resources1,
+};
+
+#ifdef CONFIG_MACH_MX27
+struct platform_device mxc_spi_device2 = {
+	.name = "mxc_spi",
+	.id = 2,
+	.num_resources = ARRAY_SIZE(mxc_spi_resources2),
+	.resource = mxc_spi_resources2,
+};
+#endif
+
 /*
  * General Purpose Timer
  * - i.MX1: 2 timer (slighly different register handling)
@@ -169,6 +275,51 @@ struct platform_device mxc_gpt5 = {
 };
 #endif
 
+/* I2C channel #1 */
+static struct resource imx_i2c_1_resources[] = {
+	[0] = {
+		.start	= I2C_BASE_ADDR,
+		.end	= I2C_BASE_ADDR + 0x0F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_I2C,
+		.end	= MXC_INT_I2C,
+		.flags	= IORESOURCE_IRQ
+	}
+};
+
+#ifdef CONFIG_MACH_MX27
+static struct resource imx_i2c_2_resources[] = {
+	[0] = {
+		.start	= I2C2_BASE_ADDR,
+		.end	= I2C2_BASE_ADDR + 0x0F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_I2C2,
+		.end	= MXC_INT_I2C2,
+		.flags	= IORESOURCE_IRQ
+	}
+};
+#endif
+
+struct platform_device imx_i2c_device0 = {
+	.name = "imx_i2c",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(imx_i2c_1_resources),
+	.resource = imx_i2c_1_resources
+};
+
+#ifdef CONFIG_MACH_MX27
+struct platform_device imx_i2c_device1 = {
+	.name = "imx_i2c",
+	.id = 1,
+	.num_resources = ARRAY_SIZE(imx_i2c_2_resources),
+	.resource = imx_i2c_2_resources
+};
+#endif
+
 /*
  * Watchdog:
  * - i.MX1
@@ -209,6 +360,143 @@ struct platform_device mxc_nand_device = {
 	.resource = mxc_nand_resources,
 };
 
+/*
+ * lcdc:
+ * - i.MX1: the basic controller
+ * - i.MX21: to be checked
+ * - i.MX27: like i.MX1, with slightly variations
+ */
+static struct resource mxc_fb[] = {
+	{
+		.start = LCDC_BASE_ADDR,
+		.end   = LCDC_BASE_ADDR + 0xFFF,
+		.flags = IORESOURCE_MEM,
+	},
+	{
+		.start = MXC_INT_LCDC,
+		.end   = MXC_INT_LCDC,
+		.flags = IORESOURCE_IRQ,
+	}
+};
+
+/* mxc lcd driver */
+struct platform_device mxc_fb_device = {
+	.name = "imx-fb",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mxc_fb),
+	.resource = mxc_fb,
+	.dev = {
+		.coherent_dma_mask = 0xFFFFFFFF,
+	},
+};
+
+/*
+ * SSI bus:
+ * - i.MX1: 2 channels
+ * - i.MX21: 2 channels
+ * - i.MX27: 2 channels
+ */
+static struct resource imx_ssi_resources0[] = {
+	[0] = {
+		.start	= SSI1_BASE_ADDR,
+		.end	= SSI1_BASE_ADDR + 0x6F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_SSI1,
+		.end	= MXC_INT_SSI1,
+		.flags	= IORESOURCE_IRQ
+	},
+	[2] = {
+		.name	= "tx0",
+		.start	= DMA_REQ_SSI1_TX0,
+		.end	= DMA_REQ_SSI1_TX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[3] = {
+		.name	= "rx0",
+		.start	= DMA_REQ_SSI1_RX0,
+		.end	= DMA_REQ_SSI1_RX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[4] = {
+		.name	= "tx1",
+		.start	= DMA_REQ_SSI1_TX1,
+		.end	= DMA_REQ_SSI1_TX1,
+		.flags	= IORESOURCE_DMA
+	},
+	[5] = {
+		.name	= "rx1",
+		.start	= DMA_REQ_SSI1_RX1,
+		.end	= DMA_REQ_SSI1_RX1,
+		.flags	= IORESOURCE_DMA
+	}
+};
+
+static struct resource imx_ssi_resources1[] = {
+	[0] = {
+		.start	= SSI2_BASE_ADDR,
+		.end	= SSI2_BASE_ADDR + 0x6F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_SSI2,
+		.end	= MXC_INT_SSI2,
+		.flags	= IORESOURCE_IRQ
+	},
+	[2] = {
+		.name	= "tx0",
+		.start	= DMA_REQ_SSI2_TX0,
+		.end	= DMA_REQ_SSI2_TX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[3] = {
+		.name	= "rx0",
+		.start	= DMA_REQ_SSI2_RX0,
+		.end	= DMA_REQ_SSI2_RX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[4] = {
+		.name	= "tx1",
+		.start	= DMA_REQ_SSI2_TX1,
+		.end	= DMA_REQ_SSI2_TX1,
+		.flags	= IORESOURCE_DMA
+	},
+	[5] = {
+		.name	= "rx1",
+		.start	= DMA_REQ_SSI2_RX1,
+		.end	= DMA_REQ_SSI2_RX1,
+		.flags	= IORESOURCE_DMA
+	}
+};
+
+struct platform_device imx_ssi_device0 = {
+	.name = "mxc-ssi",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(imx_ssi_resources0),
+	.resource = imx_ssi_resources0
+};
+
+struct platform_device imx_ssi_device1 = {
+	.name = "mxc-ssi",
+	.id = 1,
+	.num_resources = ARRAY_SIZE(imx_ssi_resources1),
+	.resource = imx_ssi_resources1
+};
+
+static struct resource mxc_dam_resources = {
+	.start	= AUDMUX_BASE_ADDR,
+	.end	= AUDMUX_BASE_ADDR + 0x1F,
+	.flags	= IORESOURCE_MEM
+};
+
+struct platform_device mxc_dam_device = {
+	.name = "mxc-dam",
+	.id = 0,
+	.num_resources = 1,
+	.resource = &mxc_dam_resources
+};
+
 /* GPIO port description */
 static struct mxc_gpio_port imx_gpio_ports[] = {
 	[0] = {
diff --git a/arch/arm/mach-mx2/devices.h b/arch/arm/mach-mx2/devices.h
index 6ab616e..07b7cd5 100644
--- a/arch/arm/mach-mx2/devices.h
+++ b/arch/arm/mach-mx2/devices.h
@@ -13,3 +13,15 @@ extern struct platform_device mxc_uart_device3;
 extern struct platform_device mxc_uart_device4;
 extern struct platform_device mxc_uart_device5;
 extern struct platform_device mxc_nand_device;
+extern struct platform_device mxc_vpu_device;
+extern struct platform_device mx27_camera_device;
+extern struct platform_device mxc_spi_device0;
+extern struct platform_device mxc_spi_device1;
+extern struct platform_device mxc_spi_device2;
+extern struct platform_device imx_i2c_device0;
+extern struct platform_device imx_i2c_device1;
+extern struct platform_device mxc_fb_device;
+extern struct platform_device imx_ssi_device0;
+extern struct platform_device imx_ssi_device1;
+extern struct platform_device mxc_dam_device;
+
-- 
1.6.0.3

