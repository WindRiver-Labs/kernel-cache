From 586c1ec12c2908803d851b190c0194684b8f4956 Mon Sep 17 00:00:00 2001
From: Sascha Hauer <s.hauer@pengutronix.de>
Date: Fri, 6 Feb 2009 18:10:47 +0300
Subject: [PATCH 52/77] soc-camera: Support multiple camera chips per host

soc-camera already supports more than one camera chip per host
which can be used exclusively. This patch adds a hook for the
board code to switch between different cameras.

Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
Signed-off-by: Vladimir Barinov <vbarinov@embeddedlley.com>
---
 drivers/media/video/mt9m001.c    |    4 ++--
 drivers/media/video/mt9v022.c    |    4 ++--
 drivers/media/video/soc_camera.c |   28 +++++++++++++++++++++++-----
 include/media/soc_camera.h       |    7 ++++++-
 4 files changed, 33 insertions(+), 10 deletions(-)

diff --git a/drivers/media/video/mt9m001.c b/drivers/media/video/mt9m001.c
index 554d229..056b069 100644
--- a/drivers/media/video/mt9m001.c
+++ b/drivers/media/video/mt9m001.c
@@ -557,7 +557,7 @@ static int mt9m001_video_probe(struct soc_camera_device *icd)
 	/* We must have a parent by now. And it cannot be a wrong one.
 	 * So this entire test is completely redundant. */
 	if (!icd->dev.parent ||
-	    to_soc_camera_host(icd->dev.parent)->nr != icd->iface)
+	    to_soc_camera_host(icd->dev.parent)->nr != icd->link->bus_id)
 		return -ENODEV;
 
 	/* Enable the chip */
@@ -657,7 +657,7 @@ static int mt9m001_probe(struct i2c_client *client,
 	icd->height_min	= 32;
 	icd->height_max	= 1024;
 	icd->y_skip_top	= 1;
-	icd->iface	= icl->bus_id;
+	icd->link	= icl;
 	/* Default datawidth - this is the only width this camera (normally)
 	 * supports. It is only with extra logic that it can support
 	 * other widths. Therefore it seems to be a sensible default. */
diff --git a/drivers/media/video/mt9v022.c b/drivers/media/video/mt9v022.c
index 56808cd..f8578b6 100644
--- a/drivers/media/video/mt9v022.c
+++ b/drivers/media/video/mt9v022.c
@@ -672,7 +672,7 @@ static int mt9v022_video_probe(struct soc_camera_device *icd)
 	int ret;
 
 	if (!icd->dev.parent ||
-	    to_soc_camera_host(icd->dev.parent)->nr != icd->iface)
+	    to_soc_camera_host(icd->dev.parent)->nr != icd->link->bus_id)
 		return -ENODEV;
 
 	/* Read out the chip version register */
@@ -782,7 +782,7 @@ static int mt9v022_probe(struct i2c_client *client,
 	icd->height_min	= 32;
 	icd->height_max	= 480;
 	icd->y_skip_top	= 1;
-	icd->iface	= icl->bus_id;
+	icd->link	= icl;
 	/* Default datawidth - this is the only width this camera (normally)
 	 * supports. It is only with extra logic that it can support
 	 * other widths. Therefore it seems to be a sensible default. */
diff --git a/drivers/media/video/soc_camera.c b/drivers/media/video/soc_camera.c
index 66ebe59..9730c07 100644
--- a/drivers/media/video/soc_camera.c
+++ b/drivers/media/video/soc_camera.c
@@ -212,6 +212,9 @@ static int soc_camera_open(struct inode *inode, struct file *file)
 	icf->icd = icd;
 	icd->use_count++;
 
+	if (icd->link->activate)
+		icd->link->activate(icd->link, 1);
+
 	/* Now we really have to activate the camera */
 	if (icd->use_count == 1) {
 		ret = ici->ops->add(icd);
@@ -253,6 +256,8 @@ static int soc_camera_close(struct inode *inode, struct file *file)
 	icd->use_count--;
 	if (!icd->use_count)
 		ici->ops->remove(icd);
+	if (icd->link->activate)
+		icd->link->activate(icd->link, 0);
 	module_put(icd->ops->owner);
 	module_put(ici->ops->owner);
 	mutex_unlock(&video_lock);
@@ -651,7 +656,7 @@ static void scan_add_host(struct soc_camera_host *ici)
 	mutex_lock(&list_lock);
 
 	list_for_each_entry(icd, &devices, list) {
-		if (icd->iface == ici->nr) {
+		if (icd->link->bus_id == ici->nr) {
 			icd->dev.parent = &ici->dev;
 			device_register_link(icd);
 		}
@@ -674,7 +679,7 @@ static int scan_add_device(struct soc_camera_device *icd)
 	/* Watch out for class_for_each_device / class_find_device API by
 	 * Dave Young <hidave.darkstar@gmail.com> */
 	list_for_each_entry(ici, &hosts, list) {
-		if (icd->iface == ici->nr) {
+		if (icd->link->bus_id == ici->nr) {
 			ret = 1;
 			icd->dev.parent = &ici->dev;
 			break;
@@ -699,13 +704,22 @@ static int soc_camera_probe(struct device *dev)
 	if (!icd->ops->probe)
 		return -ENODEV;
 
+	if (icd->link->activate)
+		icd->link->activate(icd->link, 1);
+
 	/* We only call ->add() here to activate and probe the camera.
 	 * We shall ->remove() and deactivate it immediately afterwards. */
+	printk("ADD\n");
 	ret = ici->ops->add(icd);
-	if (ret < 0)
+	if (ret < 0) {
+		printk("add failed\n");
 		return ret;
+	}
 
+	printk("probe\n");
 	ret = icd->ops->probe(icd);
+	if (ret < 0)
+		printk("probe failed\n");
 	if (ret >= 0) {
 		const struct v4l2_queryctrl *qctrl;
 
@@ -717,6 +731,9 @@ static int soc_camera_probe(struct device *dev)
 	}
 	ici->ops->remove(icd);
 
+	if (icd->link->activate)
+		icd->link->activate(icd->link, 0);
+
 	return ret;
 }
 
@@ -853,7 +870,8 @@ int soc_camera_device_register(struct soc_camera_device *icd)
 	for (i = 0; i < 256 && num < 0; i++) {
 		num = i;
 		list_for_each_entry(ix, &devices, list) {
-			if (ix->iface == icd->iface && ix->devnum == i) {
+			if (ix->link->bus_id == icd->link->bus_id &&
+					ix->devnum == i) {
 				num = -1;
 				break;
 			}
@@ -868,7 +886,7 @@ int soc_camera_device_register(struct soc_camera_device *icd)
 	icd->devnum = num;
 	icd->dev.bus = &soc_camera_bus_type;
 	snprintf(icd->dev.bus_id, sizeof(icd->dev.bus_id),
-		 "%u-%u", icd->iface, icd->devnum);
+		 "%u-%u", icd->link->bus_id, icd->devnum);
 
 	icd->dev.release = dummy_release;
 
diff --git a/include/media/soc_camera.h b/include/media/soc_camera.h
index d548de3..9e811f3 100644
--- a/include/media/soc_camera.h
+++ b/include/media/soc_camera.h
@@ -16,6 +16,8 @@
 #include <media/videobuf-core.h>
 #include <linux/pm.h>
 
+struct soc_camera_link;
+
 struct soc_camera_device {
 	struct list_head list;
 	struct device dev;
@@ -33,7 +35,7 @@ struct soc_camera_device {
 	unsigned short y_skip_top;	/* Lines to skip at the top */
 	unsigned short gain;
 	unsigned short exposure;
-	unsigned char iface;		/* Host number */
+	struct soc_camera_link *link;	/* Link to this camera */
 	unsigned char devnum;		/* Device number per host */
 	unsigned char buswidth;		/* See comment in .c */
 	struct soc_camera_ops *ops;
@@ -83,6 +85,9 @@ struct soc_camera_link {
 	int bus_id;
 	/* GPIO number to switch between 8 and 10 bit modes */
 	unsigned int gpio;
+	/* (de-)activate this camera. Can be left empty if only one camera is
+	 * connected to this bus. */
+	void (*activate)(struct soc_camera_link *, int);
 };
 
 static inline struct soc_camera_device *to_soc_camera_dev(struct device *dev)
-- 
1.6.3.1

