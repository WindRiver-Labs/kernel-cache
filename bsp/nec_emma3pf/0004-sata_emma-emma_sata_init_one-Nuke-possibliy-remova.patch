From a4605d075c02cd71c13b473f63dd0219f6d4fdb3 Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Tue, 28 Apr 2009 14:31:20 +0900
Subject: [PATCH] sata_emma: emma_sata_init_one: Nuke possibliy removable casts

Change emma_sata_{deactivate_device,clear_serr} function prototypes
to have 'void __iomem *base' as an argument, then we can remove many
(void *) or (void __iomem *) casts.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 drivers/ata/sata_emma.c |   30 ++++++++++++++----------------
 1 files changed, 14 insertions(+), 16 deletions(-)

diff --git a/drivers/ata/sata_emma.c b/drivers/ata/sata_emma.c
index 8e843af..0665a23 100644
--- a/drivers/ata/sata_emma.c
+++ b/drivers/ata/sata_emma.c
@@ -398,24 +398,24 @@ static const struct ata_port_info emma_sata_port_info = {
 	.port_ops	= &emma_sata_ops,
 };
 
-static void emma_sata_deactivate_device(unsigned long base)
+static void emma_sata_deactivate_device(void __iomem *base)
 {
 	u32 scr;
 
 	/* Disable the Serial ATA interface and put Phy in offline mode. */
-	scr = readl((void __iomem *)(base + EMMA_SATA_SCR_CONTROL_OFFSET));
+	scr = readl(base + EMMA_SATA_SCR_CONTROL_OFFSET);
 	scr &= ~0x0000000fUL;
 	scr |=  0x00000004UL;
-	writel(scr, (void __iomem *)(base + EMMA_SATA_SCR_CONTROL_OFFSET));
+	writel(scr, base + EMMA_SATA_SCR_CONTROL_OFFSET);
 }
 
-static void emma_sata_clear_serr(unsigned long base)
+static void emma_sata_clear_serr(void __iomem *base)
 {
 	u32 serror;
 
-	serror = readl((void __iomem *)(base + EMMA_SATA_SCR_ERROR_OFFSET));
-	writel(serror, (void __iomem *)(base + EMMA_SATA_SCR_ERROR_OFFSET));
-	writel(0x0000ffffUL, (void __iomem *)base + EMMA_SATA_SCR_ERRCNT_OFFSET);
+	serror = readl(base + EMMA_SATA_SCR_ERROR_OFFSET);
+	writel(serror, base + EMMA_SATA_SCR_ERROR_OFFSET);
+	writel(0x0000ffffUL, base + EMMA_SATA_SCR_ERRCNT_OFFSET);
 }
 
 static int emma_sata_init_one(struct platform_device *pdev)
@@ -423,7 +423,6 @@ static int emma_sata_init_one(struct platform_device *pdev)
 	static int printed_version;
 	const struct ata_port_info *ppi[] = { &emma_sata_port_info, NULL };
 	struct ata_host *host;
-	unsigned long base;
 	void __iomem *mmio_base;
 	struct resource *r;
 
@@ -439,9 +438,8 @@ static int emma_sata_init_one(struct platform_device *pdev)
 	}
 
 	mmio_base = (void *)r->start;
-	base = (unsigned long)mmio_base;
 
-	DPRINTK("mmio_base = 0x%x\n", base);
+	DPRINTK("mmio_base = 0x%x\n", (unsigned long)mmio_base);
 
 	/* allocate host */
 	host = ata_host_alloc_pinfo(&pdev->dev, ppi, 1);
@@ -453,22 +451,22 @@ static int emma_sata_init_one(struct platform_device *pdev)
 	DPRINTK("emma initialize start\n");
 
 	/* endian/swap ctl */
-	writel(0x2, (void *)(base + EMMA_SATA_BM_CTL_OFFSET));
+	writel(0x2, mmio_base + EMMA_SATA_BM_CTL_OFFSET);
 
 	/* staggered spin up for channel1-2 */
-	writel(0x10000, (void *)(base + EMMA_SATA_SCR_MISC_OFFSET));
+	writel(0x10000, mmio_base + EMMA_SATA_SCR_MISC_OFFSET);
 
 	emma_sata_setup_port(&host->ports[0]->ioaddr, mmio_base);
 
 	/* deactivate port */
-	emma_sata_deactivate_device(base);
+	emma_sata_deactivate_device(mmio_base);
 
 	/* clear sata error */
-	emma_sata_clear_serr(base);
+	emma_sata_clear_serr(mmio_base);
 
 	/* interrupt enable */
-	writel(0x2, (void *)(base + EMMA_SATA_IF_CTL_ALT_OFFSET));
-	writel(0x1, (void *)(base + EMMA_SATA_INT_EN_OFFSET));
+	writel(0x2, mmio_base + EMMA_SATA_IF_CTL_ALT_OFFSET);
+	writel(0x1, mmio_base + EMMA_SATA_INT_EN_OFFSET);
 
 	return ata_host_activate(host, platform_get_irq(pdev, 0),
 				 emma_sata_interrupt, IRQF_SHARED,
-- 
1.6.0.4

