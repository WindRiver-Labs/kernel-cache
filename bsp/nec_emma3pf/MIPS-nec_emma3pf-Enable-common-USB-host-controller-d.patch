From 178d42ceca28af53552cddf79ceb68d11cf049ff Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Tue, 10 Nov 2009 02:42:40 -0800
Subject: [PATCH 4/4] MIPS: nec_emma3pf: Enable common USB host controller driver

In the previous patches, we've added common USB EHCI / OHCI drivers that
any EMMA SoCs can use.  This patch fixes old USB platform resources, and
adapts et10121 port to the common USB HC drivers.

* Use DMA_BIT_MASK(n) for DMA masks.
* Kill KSEG1ADDR() usages.
* Add (pseudo) PCI config resources required by common USB HC driver.
* Add flip_init() which will set up FLIP bus settings for USB HCs.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 arch/mips/emma/et10121/platform.c |   83 ++++++++++++++++++++++---------------
 arch/mips/emma/et10121/setup.c    |   18 ++++++++
 include/asm-mips/emma/emma3pf.h   |    2 +
 3 files changed, 70 insertions(+), 33 deletions(-)

diff --git a/arch/mips/emma/et10121/platform.c b/arch/mips/emma/et10121/platform.c
index daaf02b..416dc6f 100644
--- a/arch/mips/emma/et10121/platform.c
+++ b/arch/mips/emma/et10121/platform.c
@@ -25,6 +25,7 @@
 #include <linux/types.h>
 #include <linux/ioport.h>
 #include <linux/serial_8250.h>
+#include <linux/dma-mapping.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
 
@@ -133,54 +134,70 @@ static struct platform_device nec_candy_device = {
 	},
 };
 
-static u64 ohci_dmamask = ~(u32)0;
+/* Built-in USB Host Controller (OHCI) */
+
+static struct resource ohci_resources[] = {
+	{
+		.start	= EMMA_OHCI_BASE,
+		.end	= EMMA_OHCI_BASE + 0xff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.start	= EMMA_IRQ_USB,
+		.end	= EMMA_IRQ_USB,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.start	= EMMA_OHCI_CONFIG_BASE,
+		.end	= EMMA_OHCI_CONFIG_BASE + 0xff,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static u64 ohci_dmamask = DMA_BIT_MASK(32);
+
 static struct platform_device emma_ohci = {
 	.name = "emma-ohci",
 	.id = 0,
 	.dev = {
 		.dma_mask		= &ohci_dmamask,
-		.coherent_dma_mask	= 0xffffffff,
+		.coherent_dma_mask	= DMA_BIT_MASK(32),
 	},
-	.num_resources = 2,
-	.resource = (struct resource[]) {
-		{
-			.name	= "ohci_mem",
-			.start	= KSEG1ADDR(EMMA_OHCI_BASE),
-			.end	= KSEG1ADDR(EMMA_OHCI_BASE + 0xff),
-			.flags	= IORESOURCE_MEM,
-		},
-		{
-			.name	= "ohci_irq",
-			.start	= EMMA_IRQ_USB,
-			.end	= EMMA_IRQ_USB,
-			.flags	= IORESOURCE_IRQ,
-		},
+	.num_resources = ARRAY_SIZE(ohci_resources),
+	.resource = ohci_resources,
+};
+
+/* Built-in USB Host Controller (EHCI) */
+
+static struct resource ehci_resources[] = {
+	{
+		.start	= EMMA_EHCI_BASE,
+		.end	= EMMA_EHCI_BASE + 0xff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.start	= EMMA_IRQ_USB,
+		.end	= EMMA_IRQ_USB,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.start	= EMMA_EHCI_CONFIG_BASE,
+		.end	= EMMA_EHCI_CONFIG_BASE + 0xff,
+		.flags	= IORESOURCE_MEM,
 	},
 };
 
-static u64 ehci_dmamask = ~(u32)0;
+static u64 ehci_dmamask = DMA_BIT_MASK(32);
+
 static struct platform_device emma_ehci = {
 	.name = "emma-ehci",
 	.id = 0,
 	.dev = {
 		.dma_mask		= &ehci_dmamask,
-		.coherent_dma_mask	= 0xffffffff,
-	},
-	.num_resources = 2,
-	.resource = (struct resource[]) {
-		{
-			.name	= "ehci_mem",
-			.start	= KSEG1ADDR(EMMA_EHCI_BASE),
-			.end	= KSEG1ADDR(EMMA_EHCI_BASE + 0xff),
-			.flags	= IORESOURCE_MEM,
-		},
-		{
-			.name	= "ehci_irq",
-			.start	= EMMA_IRQ_USB,
-			.end	= EMMA_IRQ_USB,
-			.flags	= IORESOURCE_IRQ,
-		},
+		.coherent_dma_mask	= DMA_BIT_MASK(32),
 	},
+	.num_resources = ARRAY_SIZE(ehci_resources),
+	.resource = ehci_resources,
 };
 
 static struct platform_device *devices[] = {
diff --git a/arch/mips/emma/et10121/setup.c b/arch/mips/emma/et10121/setup.c
index 09ba7b9..fd8a70a 100644
--- a/arch/mips/emma/et10121/setup.c
+++ b/arch/mips/emma/et10121/setup.c
@@ -37,6 +37,7 @@
 #include <asm/time.h>
 #include <asm/reboot.h>
 #include <asm/emma/emmaxxx.h>
+#include <asm/emma/flip.h>
 
 extern void et10121_led(const char *);
 static int bus_frequency;
@@ -133,6 +134,22 @@ static inline void __init et10121_sio_setup(void)
 #endif
 }
 
+static void __init flip_init(void)
+{
+	struct flip_regs *flip;
+
+	flip = ioremap(EMMA_FLIP_BASE, sizeof(struct flip_regs));
+
+	/* For USB HCs */
+	emma_out(flip->m_ctr[0], SWAP1_BYTE);
+	emma_out(flip->usb_ctr,
+		 PPON2_EN | PPON1_EN | OCI2_EN | OCI1_EN |
+		 PPON2 | PPON1 | OCI2 | OCI1 | INTB_EN | INTA_EN);
+	emma_sync();
+
+	iounmap((void __iomem *)flip);
+}
+
 void __init plat_mem_setup(void)
 {
 	set_io_port_base(KSEG1);
@@ -148,4 +165,5 @@ void __init plat_mem_setup(void)
 	panic_timeout = 50;
 
 	et10121_sio_setup();
+	flip_init();
 }
diff --git a/include/asm-mips/emma/emma3pf.h b/include/asm-mips/emma/emma3pf.h
index db48040..d2f3f9a 100644
--- a/include/asm-mips/emma/emma3pf.h
+++ b/include/asm-mips/emma/emma3pf.h
@@ -112,6 +112,8 @@
 #define EMMA_IDEP_CONFIG_BASE	(EMMA_FLIP_BASE + 0x0200) /* 0x1020.0300 */
 #define EMMA_IDEP_BASE		(EMMA_FLIP_BASE + 0x0500) /* 0x1020.0600 */
 
+#define EMMA_OHCI_CONFIG_BASE	(EMMA_FLIP_BASE + 0x0100) /* 0x1020.0200 */
+#define EMMA_EHCI_CONFIG_BASE	(EMMA_FLIP_BASE + 0x0400) /* 0x1020.0500 */
 #define EMMA_EHCI_BASE		(EMMA_FLIP_BASE + 0x0e00) /* 0x1020.0F00 */
 #define EMMA_OHCI_BASE		(EMMA_FLIP_BASE + 0x0f00) /* 0x1020.1000 */
 
-- 
1.6.5.2

