From aea325647a77a9491ab660fb827031c39f6bf6f0 Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Tue, 28 Apr 2009 14:30:27 +0900
Subject: [PATCH] sata_emma: CodingStyle cleanup

No logical change.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 drivers/ata/sata_emma.c |   86 +++++++++++++++++++++++-----------------------
 1 files changed, 43 insertions(+), 43 deletions(-)

diff --git a/drivers/ata/sata_emma.c b/drivers/ata/sata_emma.c
index f1411ce..9a362d1 100644
--- a/drivers/ata/sata_emma.c
+++ b/drivers/ata/sata_emma.c
@@ -13,8 +13,8 @@
  * linux/drivers/scsi/libata-core.c
  *
  * History:
- * Version 0.02	   Support DMA mode
- * Version 0.01	   Support only PIO mode0.
+ * Version 0.02     Support DMA mode
+ * Version 0.01     Support only PIO mode0.
  *
  * Changes:
  * Wind River Systems, Inc.
@@ -46,7 +46,7 @@
 #define EMMA_SATA_TF_LBAM_OFFSET	0x13
 #define EMMA_SATA_TF_LBAH_OFFSET	0x17
 #define EMMA_SATA_TF_DEVICE_OFFSET	0x1b
-#define EMMA_SATA_TF_CMDSTAT_OFFSET    	0x1f
+#define EMMA_SATA_TF_CMDSTAT_OFFSET	0x1f
 #define EMMA_SATA_IF_CTL_ALT_OFFSET	0x28
 #define EMMA_SATA_TF_CTL_OFFSET		0x2b
 
@@ -66,7 +66,7 @@
 #define EMMA_SATA_INT_EN_OFFSET		0xb4
 
 /* emma specific registers */
-#define	EMMA_SATA_BM_CTL_OFFSET		0x48
+#define EMMA_SATA_BM_CTL_OFFSET		0x48
 #define EMMA_SATA_SCR_MISC_OFFSET	0xe0
 
 /* sata common register */
@@ -74,13 +74,13 @@
 
 static int emma_sata_get_scr_offset(unsigned int sc_reg)
 {
-	return 	(sc_reg == SCR_STATUS) 	? 0:
-		(sc_reg == SCR_ERROR) 	? 4:
-		(sc_reg == SCR_CONTROL)	? 8:-1;
+	return	(sc_reg == SCR_STATUS)	? 0 :
+		(sc_reg == SCR_ERROR)	? 4 :
+		(sc_reg == SCR_CONTROL)	? 8 : -1;
 }
 
-static int emma_sata_scr_read (struct ata_port *ap, unsigned int sc_reg,
-			       u32 *val)
+static int emma_sata_scr_read(struct ata_port *ap, unsigned int sc_reg,
+			      u32 *val)
 {
 	int	offset = emma_sata_get_scr_offset(sc_reg);
 
@@ -94,8 +94,8 @@ static int emma_sata_scr_read (struct ata_port *ap, unsigned int sc_reg,
 	return 0;
 }
 
-static int emma_sata_scr_write (struct ata_port *ap, unsigned int sc_reg,
-			        u32 val)
+static int emma_sata_scr_write(struct ata_port *ap, unsigned int sc_reg,
+			       u32 val)
 {
 	int	offset = emma_sata_get_scr_offset(sc_reg);
 
@@ -115,7 +115,7 @@ static int emma_sata_scr_write (struct ata_port *ap, unsigned int sc_reg,
  *	LOCKING:
  *	spin_lock_irqsave(host_set lock)
  */
-static void emma_bmdma_setup_mmio (struct ata_queued_cmd *qc)
+static void emma_bmdma_setup_mmio(struct ata_queued_cmd *qc)
 {
 	struct ata_port *ap = qc->ap;
 	unsigned int rw = (qc->tf.flags & ATA_TFLAG_WRITE);
@@ -149,7 +149,7 @@ static void emma_bmdma_setup_mmio (struct ata_queued_cmd *qc)
  *	LOCKING:
  *	spin_lock_irqsave(host_set lock)
  */
-static void emma_bmdma_start_mmio (struct ata_queued_cmd *qc)
+static void emma_bmdma_start_mmio(struct ata_queued_cmd *qc)
 {
 	struct ata_port *ap = qc->ap;
 	void __iomem *mmio = ap->ioaddr.bmdma_addr;
@@ -158,7 +158,7 @@ static void emma_bmdma_start_mmio (struct ata_queued_cmd *qc)
 	/* start host DMA transaction */
 	dmactl = readw(mmio + EMMA_SATA_DMA_CMD_OFFSET);
 	writew(dmactl | ATA_DMA_START, mmio + EMMA_SATA_DMA_CMD_OFFSET);
-	DPRINTK("0x%x, 0x%x\n",	dmactl | ATA_DMA_START,
+	DPRINTK("0x%x, 0x%x\n", dmactl | ATA_DMA_START,
 		(unsigned int)(mmio + EMMA_SATA_DMA_CMD_OFFSET));
 	/* There is a race condition in certain SATA controllers that can
 	   be seen when the r/w command is given to the controller before
@@ -195,17 +195,18 @@ static inline void emma_sata_bmdma_stop(struct ata_port *ap)
 
 	/* clear start/stop bit */
 	writew(readw(mmio + EMMA_SATA_DMA_CMD_OFFSET) & ~ATA_DMA_START,
-			mmio + EMMA_SATA_DMA_CMD_OFFSET);
+	       mmio + EMMA_SATA_DMA_CMD_OFFSET);
 }
 
 static inline void emma_sata_bmdma_ack_irq(struct ata_port *ap)
 {
-	void __iomem *mmio = ap->ioaddr.bmdma_addr + EMMA_SATA_DMA_STATUS_OFFSET;
+	void __iomem *mmio;
+
+	mmio = ap->ioaddr.bmdma_addr + EMMA_SATA_DMA_STATUS_OFFSET;
 	writew(readw(mmio), mmio);
 }
 
-unsigned int emma_sata_host_intr (struct ata_port *ap,
-				  struct ata_queued_cmd *qc)
+unsigned int emma_sata_host_intr(struct ata_port *ap, struct ata_queued_cmd *qc)
 {
 	u8 status, host_stat;
 
@@ -230,9 +231,9 @@ unsigned int emma_sata_host_intr (struct ata_port *ap,
 	case ATAPI_PROT_NODATA:
 	case ATA_PROT_NODATA:
 		/* check altstatus */
-		if(ap->ops->sff_check_altstatus)
+		if (ap->ops->sff_check_altstatus)
 			status = ap->ops->sff_check_altstatus(ap);
-		else if(ap->ioaddr.altstatus_addr)
+		else if (ap->ioaddr.altstatus_addr)
 			status = ioread8(ap->ioaddr.altstatus_addr);
 		else
 			status = 0;
@@ -273,7 +274,7 @@ idle_irq:
 	return 0;	/* irq not handled */
 }
 
-irqreturn_t emma_sata_interrupt (int irq, void *dev_instance)
+irqreturn_t emma_sata_interrupt(int irq, void *dev_instance)
 {
 	struct ata_host *host_set = dev_instance;
 	unsigned int i;
@@ -303,8 +304,9 @@ irqreturn_t emma_sata_interrupt (int irq, void *dev_instance)
 static void emma_bmdma_irq_clear(struct ata_port *ap)
 {
 	u16	dmasts;
-	void __iomem *mmio = ap->ioaddr.bmdma_addr + EMMA_SATA_DMA_STATUS_OFFSET;
+	void __iomem *mmio;
 
+	mmio = ap->ioaddr.bmdma_addr + EMMA_SATA_DMA_STATUS_OFFSET;
 	dmasts = readw(mmio);
 	dmasts |= 0x4;
 	writew(dmasts, mmio);
@@ -312,8 +314,9 @@ static void emma_bmdma_irq_clear(struct ata_port *ap)
 }
 
 static unsigned int emma_mmio_data_xfer(struct ata_device *adev,
-					unsigned char *buf,unsigned int buflen,
-				       	int write_data)
+					unsigned char *buf,
+					unsigned int buflen,
+					int write_data)
 {
 	struct ata_port *ap = adev->link->ap;
 	unsigned int i;
@@ -331,7 +334,7 @@ static unsigned int emma_mmio_data_xfer(struct ata_device *adev,
 	} else {
 		for (i = 0; i < words; i++)
 			buf16[i] = cpu_to_le16(readw(mmio +
-						EMMA_SATA_TF_DATA_OFFSET));
+						     EMMA_SATA_TF_DATA_OFFSET));
 	}
 
 	/* Transfer trailing 1 byte, if any. */
@@ -345,7 +348,7 @@ static unsigned int emma_mmio_data_xfer(struct ata_device *adev,
 			       mmio + EMMA_SATA_TF_DATA_OFFSET);
 		} else {
 			align_buf[0] = cpu_to_le16(readw(mmio +
-						EMMA_SATA_TF_DATA_OFFSET));
+							 EMMA_SATA_TF_DATA_OFFSET));
 			memcpy(trailing_buf, align_buf, 1);
 		}
 		words++;
@@ -390,9 +393,9 @@ static void emma_sata_setup_port(struct ata_ioports *port, void __iomem *base)
 }
 
 static const struct ata_port_info emma_sata_port_info = {
-	.flags		= ATA_FLAG_SATA | ATA_FLAG_NO_LEGACY
-			| ATA_FLAG_MMIO | ATA_FLAG_PIO_POLLING
-			| ATA_FLAG_SATA_RESET,
+	.flags		= ATA_FLAG_SATA | ATA_FLAG_NO_LEGACY |
+			  ATA_FLAG_MMIO | ATA_FLAG_PIO_POLLING |
+			  ATA_FLAG_SATA_RESET,
 	.pio_mask	= 0x1f,
 	.mwdma_mask	= 0x07,
 	.udma_mask	= 0x7f,
@@ -416,14 +419,13 @@ static void emma_sata_clear_serr(unsigned long base)
 
 	serror = readl((void __iomem *)(base + EMMA_SATA_SCR_ERROR_OFFSET));
 	writel(serror, (void __iomem *)(base + EMMA_SATA_SCR_ERROR_OFFSET));
-	writel(0x0000ffffUL,(void __iomem *)base + EMMA_SATA_SCR_ERRCNT_OFFSET);
+	writel(0x0000ffffUL, (void __iomem *)base + EMMA_SATA_SCR_ERRCNT_OFFSET);
 }
 
 static int emma_sata_init_one(struct platform_device *pdev)
 {
 	static int printed_version;
-	const struct ata_port_info *ppi[] =
-		{ &emma_sata_port_info,NULL };
+	const struct ata_port_info *ppi[] = { &emma_sata_port_info, NULL };
 	struct ata_host *host;
 	unsigned long base;
 	void __iomem *mmio_base;
@@ -435,20 +437,18 @@ static int emma_sata_init_one(struct platform_device *pdev)
 		printk(KERN_DEBUG DRV_NAME " version " DRV_VERSION "\n");
 
 	r = platform_get_resource(pdev, 0, /*IORESOURCE_MEM,*/ 0);
-	if (!r)
-	{
+	if (!r) {
 		DPRINTK(KERN_ERR ":%d\n", __LINE__);
 		return -EINVAL;
 	}
 
-	mmio_base = (void*)r->start;
+	mmio_base = (void *)r->start;
 	base = (unsigned long)mmio_base;
 
 	DPRINTK("mmio_base = 0x%x\n", base);
 
 	/* allocate host */
-	host = ata_host_alloc_pinfo(&pdev->dev,ppi,1);
-
+	host = ata_host_alloc_pinfo(&pdev->dev, ppi, 1);
 	if (!host)
 		return -ENOMEM;
 
@@ -474,8 +474,8 @@ static int emma_sata_init_one(struct platform_device *pdev)
 	writel(0x2, (void *)(base + EMMA_SATA_IF_CTL_ALT_OFFSET));
 	writel(0x1, (void *)(base + EMMA_SATA_INT_EN_OFFSET));
 
-	return ata_host_activate(host, platform_get_irq(pdev,0),
-				 emma_sata_interrupt,IRQF_SHARED,
+	return ata_host_activate(host, platform_get_irq(pdev, 0),
+				 emma_sata_interrupt, IRQF_SHARED,
 				 &emma_sata_sht);
 }
 
@@ -492,12 +492,12 @@ static struct platform_driver emma_sata_driver = {
 	.probe		= emma_sata_init_one,
 	.remove		= __devexit_p(emma_sata_remove),
 	.driver		= {
-			   .name = DRV_NAME,
-			   .owner = THIS_MODULE,
+				.name	= DRV_NAME,
+				.owner	= THIS_MODULE,
 			  },
 };
 
-static int __init emma_sata_init (void)
+static int __init emma_sata_init(void)
 {
 	int	rc;
 
@@ -505,7 +505,7 @@ static int __init emma_sata_init (void)
 	return rc;
 }
 
-static void __exit emma_sata_exit (void)
+static void __exit emma_sata_exit(void)
 {
 	platform_driver_unregister(&emma_sata_driver);
 }
-- 
1.6.0.4

