From a266ffb1ec29c23055af9b59913d4a05a1eab699 Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <Guoqing.Jiang@windriver.com>
Date: Mon, 1 Apr 2013 11:34:13 +0800
Subject: [PATCH] ARM/smp: fix CPU hotplug calltrace in the rt kernel

CPU hotplug will bring following call trace in the RT kernel:
BUG: sleeping function called from invalid context at kernel/rtmutex.c:707
[<800413a0>] (unwind_backtrace+0x0/0xe4) from [<804ff214>] (rt_spin_lock+0x30/0x5c)
[<804ff214>] (rt_spin_lock+0x30/0x5c) from [<8005a848>] (complete+0x1c/0x54)
[<8005a848>] (complete+0x1c/0x54) from [<804f59f8>] (cpu_die+0x34/0x70)
[<804f59f8>] (cpu_die+0x34/0x70) from [<8003b840>] (cpu_idle+0x54/0xd8)
[<8003b840>] (cpu_idle+0x54/0xd8) from [<104f9ecc>] (0x104f9ecc)

To avoid this call trace, we use per cpu variable to replace
completion, and it is safe for this modification since all reference
of per cpu_state variable is in the preempt disabled context.

Signed-off-by: Hui Wang <hui.wang@windriver.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
Signed-off-by: Guoqing Jiang <Guoqing.Jiang@windriver.com>
---
 arch/arm/kernel/smp.c |   42 ++++++++++++++++++++++++++++++++++++++----
 1 files changed, 38 insertions(+), 4 deletions(-)

diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index 7abe2e4..dbcb4d8 100644
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -43,6 +43,11 @@
 #include <asm/localtimer.h>
 #include <asm/smp_plat.h>
 
+#ifdef CONFIG_HOTPLUG_CPU
+/* State of each CPU during hotplug phases */
+DEFINE_PER_CPU(int, cpu_state) = { 0 };
+#endif
+
 /*
  * as from 2.5, kernels no longer have an init_tasks structure
  * so we need some other way of telling a new secondary core
@@ -58,12 +63,17 @@ enum ipi_msg_type {
 	IPI_CPU_STOP,
 };
 
+#ifndef CONFIG_HOTPLUG_CPU
 static DECLARE_COMPLETION(cpu_running);
+#endif
 
 int __cpuinit __cpu_up(unsigned int cpu)
 {
 	struct cpuinfo_arm *ci = &per_cpu(cpu_data, cpu);
 	struct task_struct *idle = ci->idle;
+#ifdef CONFIG_HOTPLUG_CPU
+	unsigned long timeout;
+#endif
 	int ret;
 
 	/*
@@ -104,6 +114,17 @@ int __cpuinit __cpu_up(unsigned int cpu)
 		 * CPU was successfully started, wait for it
 		 * to come online or time out.
 		 */
+#ifdef CONFIG_HOTPLUG_CPU
+		 timeout = jiffies + msecs_to_jiffies(1000);
+
+		 while (per_cpu(cpu_state, cpu) != CPU_ONLINE) {
+			 if (time_after(jiffies, timeout)) {
+				 pr_crit("CPU%u: failed to come online\n", cpu);
+				 ret = -EIO;
+			 }
+			 cpu_relax();
+		 }
+#else
 		wait_for_completion_timeout(&cpu_running,
 						 msecs_to_jiffies(1000));
 
@@ -111,6 +132,7 @@ int __cpuinit __cpu_up(unsigned int cpu)
 			pr_crit("CPU%u: failed to come online\n", cpu);
 			ret = -EIO;
 		}
+#endif
 	} else {
 		pr_err("CPU%u: failed to boot: %d\n", cpu, ret);
 	}
@@ -178,10 +200,18 @@ static DECLARE_COMPLETION(cpu_died);
  */
 void __cpu_die(unsigned int cpu)
 {
-	if (!wait_for_completion_timeout(&cpu_died, msecs_to_jiffies(5000))) {
-		pr_err("CPU%u: cpu didn't die\n", cpu);
-		return;
+	unsigned long timeout;
+
+	timeout = jiffies + msecs_to_jiffies(5000);
+
+	while (per_cpu(cpu_state, cpu) != CPU_DEAD) {
+		if (time_after(jiffies, timeout)) {
+			pr_err("CPU%u: cpu didn't die\n", cpu);
+			return;
+		}
+		cpu_relax();
 	}
+
 	printk(KERN_NOTICE "CPU%u: shutdown\n", cpu);
 
 	if (!platform_cpu_kill(cpu))
@@ -206,7 +236,7 @@ void __ref cpu_die(void)
 	mb();
 
 	/* Tell __cpu_die() that this CPU is now safe to dispose of */
-	complete(&cpu_died);
+	per_cpu(cpu_state, cpu) = CPU_DEAD;
 
 	/*
 	 * actual CPU shutdown procedure is at least platform (if not
@@ -291,7 +321,11 @@ asmlinkage void __cpuinit secondary_start_kernel(void)
 	 * before we continue - which happens after __cpu_up returns.
 	 */
 	set_cpu_online(cpu, true);
+#ifdef CONFIG_HOTPLUG_CPU
+	per_cpu(cpu_state, cpu) = CPU_ONLINE;
+#else
 	complete(&cpu_running);
+#endif
 
 	/*
 	 * Setup the percpu timer for this CPU.
-- 
1.7.5.4

