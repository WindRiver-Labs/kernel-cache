From 1c783f86420ac7b6411b5d78cfc5203008991c0a Mon Sep 17 00:00:00 2001
From: Tero Kristo <t-kristo@ti.com>
Date: Thu, 31 Jul 2014 11:13:42 +0800
Subject: [PATCH 2/4] CLK/DTS: dra7-atl clock driver architecture change

The commit b7056f56 comes from:
  git://git.ti.com/ti-linux-kernel/ti-linux-kernel.git

To be able to integrate the ATL provided clocks to the clock tree we need
to change the driver architecture.
For seamless integration two types of DT binding will be needed:
- DT clock nodes to represent the ATL clocks
- binding for the ATL IP itself which is going to handle the hw configuration

With this change pm_runtime can handle the ATL clock on demand of it's use
and all the IP which needs ATL clock can be sure that it is enabled for
them.

Signed-off-by: Tero Kristo <t-kristo@ti.com>
Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
---
 .../devicetree/bindings/clock/ti/dra7-atl.txt      |   64 ++++++++++++++++---
 drivers/clk/ti/clk-7xx.c                           |   13 ++++
 2 files changed, 67 insertions(+), 10 deletions(-)

diff --git a/Documentation/devicetree/bindings/clock/ti/dra7-atl.txt b/Documentation/devicetree/bindings/clock/ti/dra7-atl.txt
index 0ac9c91..585e8c1 100644
--- a/Documentation/devicetree/bindings/clock/ti/dra7-atl.txt
+++ b/Documentation/devicetree/bindings/clock/ti/dra7-atl.txt
@@ -1,24 +1,42 @@
 Device Tree Clock bindings for ATL (Audio Tracking Logic) of DRA7 SoC.
 
-This binding uses the common clock binding[1].
 The ATL IP is used to generate clock to be used to synchronize baseband and
-audio codec.
+audio codec. A single ATL IP provides four ATL clock instances sharing the same
+functional clock but can be configured to provide different clocks.
 ATL can maintain a clock averages to some desired frequency based on the bws/aws
 signals - can compensate the drift between the two ws signal.
 
+In order to provide the support for ATL and it's output clocks (which can be used
+internally within the SoC or external components) two sets of bindings is needed:
+
+Clock tree binding:
+This binding uses the common clock binding[1].
+To be able to integrate the ATL clocks with DT clock tree.
+Provides ccf level representation of the ATL clocks to be used by drivers.
+Since the clock instances are part of a single IP this binding is used as a node
+for the DT clock tree, the IP driver is needed to handle the actual configuration
+of the IP.
+
 [1] Documentation/devicetree/bindings/clock/clock-bindings.txt
 
 Required properties:
 - compatible : shall be "ti,dra7-atl-clock"
-- #clock-cells : from common clock binding; shall be set to 1.
+- #clock-cells : from common clock binding; shall be set to 0.
 - clocks : link phandles to functional clock of ATL
-- clock-names : Shall be set to "fck"
+
+Binding for the IP driver:
+This binding is used to configure the IP driver which is going to handle the
+configuration of the IP for the ATL clock instances.
+
+Required properties:
+- compatible : shall be "ti,dra7-atl"
 - reg : base address for the ATL IP
+- ti,provided-clocks : List of phandles to the clocks associated with the ATL
+- clocks : link phandles to functional clock of ATL
+- clock-names : Shall be set to "fck"
 - ti,hwmods : Shall be set to "atl"
 
 Optional properties:
-- fck_parent : Should contain a valid clock name which will be used as parent
-	       for the ATL fck
 Configuration of ATL instances:
 - atl{0/1/2/3} {
 	- bws : Baseband word select signal selection
@@ -29,11 +47,38 @@ For valid word select signals, see the dt-bindings/clk/ti-dra7-atl.h include
 file.
 
 Examples:
-atl_clkin: atl@0x4843c000 {
+/* clock bindings for atl provided clocks */
+atl_clkin0_ck: atl_clkin0_ck {
+	#clock-cells = <0>;
 	compatible = "ti,dra7-atl-clock";
+	clocks = <&atl_gfclk_mux>;
+};
+
+atl_clkin1_ck: atl_clkin1_ck {
+	#clock-cells = <0>;
+	compatible = "ti,dra7-atl-clock";
+	clocks = <&atl_gfclk_mux>;
+};
+
+atl_clkin2_ck: atl_clkin2_ck {
+	#clock-cells = <0>;
+	compatible = "ti,dra7-atl-clock";
+	clocks = <&atl_gfclk_mux>;
+};
+
+atl_clkin3_ck: atl_clkin3_ck {
+	#clock-cells = <0>;
+	compatible = "ti,dra7-atl-clock";
+	clocks = <&atl_gfclk_mux>;
+};
+
+/* binding for the IP */
+atl: atl@4843c000 {
+	compatible = "ti,dra7-atl";
 	reg = <0x4843c000 0x3ff>;
 	ti,hwmods = "atl";
-	#clock-cells = <1>;
+	ti,provided-clocks = <&atl_clkin0_ck>, <&atl_clkin1_ck>,
+				<&atl_clkin2_ck>, <&atl_clkin3_ck>;
 	clocks = <&atl_gfclk_mux>;
 	clock-names = "fck";
 	status = "disabled";
@@ -41,8 +86,7 @@ atl_clkin: atl@0x4843c000 {
 
 #include <dt-bindings/clk/ti-dra7-atl.h>
 
-&atl_clkin {
-	fck_parent = "dpll_abe_m2_ck";
+&atl {
 	status = "okay";
 
 	atl2 {
diff --git a/drivers/clk/ti/clk-7xx.c b/drivers/clk/ti/clk-7xx.c
index e616252..a7224b9 100644
--- a/drivers/clk/ti/clk-7xx.c
+++ b/drivers/clk/ti/clk-7xx.c
@@ -22,6 +22,7 @@
 #define DRA7_DPLL_DSP_DEFFREQ				600000000
 #define DRA7_DPLL_DSP_GFCLK_NOMFREQ			600000000
 #define DRA7_DPLL_EVE_GCLK_NOMFREQ			400000000
+#define DRA7_ATL2_DEFFREQ				5644800
 
 
 static struct omap_dt_clk dra7xx_clks[] = {
@@ -277,6 +278,7 @@ int __init dra7xx_clk_init(void)
 	int rc;
 	struct clk *abe_dpll_mux, *sys_clkin2, *dpll_ck, *deshdcp_clk;
 	struct clk *dsp_dpll, *dsp_m2_dpll, *dsp_m3x2_dpll;
+	struct clk *atl_fck, *atl_parent;
 
 	of_clk_init(NULL);
 
@@ -337,5 +339,16 @@ int __init dra7xx_clk_init(void)
 		pr_err("%s: failed to configure DSP DPLL!\n", __func__);
 	}
 
+	atl_fck = clk_get_sys(NULL, "atl_gfclk_mux");
+	atl_parent = clk_get_sys(NULL, "dpll_abe_m2_ck");
+	rc = clk_set_parent(atl_fck, atl_parent);
+	if (rc)
+		pr_err("%s: failed to reparent atl_gfclk_mux\n", __func__);
+
+	atl_fck = clk_get_sys(NULL, "atl_clkin2_ck");
+	rc = clk_set_rate(atl_fck, DRA7_ATL2_DEFFREQ);
+	if (rc)
+		pr_err("%s: failed to set atl_clkin2_ck\n", __func__);
+
 	return rc;
 }
-- 
1.7.5.4

