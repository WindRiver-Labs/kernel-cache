From d945b48bf612b7038788a8463ff27a0f50f197fe Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 5 Aug 2014 07:42:12 +0800
Subject: [PATCH 140/263] arm: omap2+: dra7-evm: add vpe/vip support for hwmod

This patch comes from:

  git://git.omapzoom.org/kernel/omap.git

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/mach-omap2/omap_hwmod_7xx_data.c |  541 ++++++++++++++++++++++++++---
 1 files changed, 487 insertions(+), 54 deletions(-)

diff --git a/arch/arm/mach-omap2/omap_hwmod_7xx_data.c b/arch/arm/mach-omap2/omap_hwmod_7xx_data.c
index f01a150..cef5b70 100644
--- a/arch/arm/mach-omap2/omap_hwmod_7xx_data.c
+++ b/arch/arm/mach-omap2/omap_hwmod_7xx_data.c
@@ -36,6 +36,7 @@
 #include "i2c.h"
 #include "mmc.h"
 #include "wd_timer.h"
+#include "soc.h"
 
 /* Base offset for all DRA7XX interrupts external to MPUSS */
 #define DRA7XX_IRQ_GIC_START	32
@@ -49,6 +50,54 @@
  */
 
 /*
+ * 'dmm' class
+ * instance(s): dmm
+ */
+static struct omap_hwmod_class dra7xx_dmm_hwmod_class = {
+	.name	= "dmm",
+};
+
+/* dmm */
+static struct omap_hwmod_irq_info dra7xx_dmm_irqs[] = {
+	{ .irq = 113 + DRA7XX_IRQ_GIC_START },
+	{ .irq = -1 }
+};
+
+static struct omap_hwmod dra7xx_dmm_hwmod = {
+	.name		= "dmm",
+	.class		= &dra7xx_dmm_hwmod_class,
+	.clkdm_name	= "emif_clkdm",
+	.mpu_irqs	= dra7xx_dmm_irqs,
+	.prcm = {
+		.omap4 = {
+			.clkctrl_offs = DRA7XX_CM_EMIF_DMM_CLKCTRL_OFFSET,
+			.context_offs = DRA7XX_RM_EMIF_DMM_CONTEXT_OFFSET,
+		},
+	},
+};
+
+/*
+ * 'emif_ocp_fw' class
+ * instance(s): emif_ocp_fw
+ */
+static struct omap_hwmod_class dra7xx_emif_ocp_fw_hwmod_class = {
+	.name	= "emif_ocp_fw",
+};
+
+/* emif_ocp_fw */
+static struct omap_hwmod dra7xx_emif_ocp_fw_hwmod = {
+	.name		= "emif_ocp_fw",
+	.class		= &dra7xx_emif_ocp_fw_hwmod_class,
+	.clkdm_name	= "emif_clkdm",
+	.prcm = {
+		.omap4 = {
+			.clkctrl_offs = DRA7XX_CM_EMIF_EMIF_OCP_FW_CLKCTRL_OFFSET,
+			.context_offs = DRA7XX_RM_EMIF_EMIF_OCP_FW_CONTEXT_OFFSET,
+		},
+	},
+};
+
+/*
  * 'l3' class
  * instance(s): l3_instr, l3_main_1, l3_main_2
  */
@@ -319,7 +368,6 @@ static struct omap_hwmod dra7xx_mdio_hwmod = {
 	.name		= "davinci_mdio",
 	.class		= &dra7xx_mdio_hwmod_class,
 	.clkdm_name	= "gmac_clkdm",
-	.main_clk	= "dpll_gmac_ck",
 };
 
 /*
@@ -487,22 +535,12 @@ static struct omap_hwmod_dma_info dra7xx_dss_sdma_reqs[] = {
 	{ .dma_req = -1 }
 };
 
-static struct omap_hwmod_opt_clk dss_opt_clks[] = {
-	{ .role = "dss_clk", .clk = "dss_dss_clk" },
-	{ .role = "hdmi_phy_clk", .clk = "dss_48mhz_clk" },
-	{ .role = "32khz_clk", .clk = "dss_32khz_clk" },
-	{ .role = "video2_clk", .clk = "dss_video2_clk" },
-	{ .role = "video1_clk", .clk = "dss_video1_clk" },
-	{ .role = "hdmi_clk", .clk = "dss_hdmi_clk" },
-};
-
 static struct omap_hwmod dra7xx_dss_hwmod = {
 	.name		= "dss_core",
 	.class		= &dra7xx_dss_hwmod_class,
 	.clkdm_name	= "dss_clkdm",
 	.flags		= HWMOD_CONTROL_OPT_CLKS_IN_RESET,
 	.sdma_reqs	= dra7xx_dss_sdma_reqs,
-	.main_clk	= "dss_dss_clk",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_DSS_DSS_CLKCTRL_OFFSET,
@@ -510,8 +548,6 @@ static struct omap_hwmod dra7xx_dss_hwmod = {
 			.modulemode   = MODULEMODE_SWCTRL,
 		},
 	},
-	.opt_clks	= dss_opt_clks,
-	.opt_clks_cnt	= ARRAY_SIZE(dss_opt_clks),
 };
 
 /*
@@ -548,7 +584,6 @@ static struct omap_hwmod dra7xx_dss_dispc_hwmod = {
 	.name		= "dss_dispc",
 	.class		= &dra7xx_dispc_hwmod_class,
 	.clkdm_name	= "dss_clkdm",
-	.main_clk	= "dss_dss_clk",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_DSS_DSS_CLKCTRL_OFFSET,
@@ -580,23 +615,16 @@ static struct omap_hwmod_class dra7xx_hdmi_hwmod_class = {
 
 /* dss_hdmi */
 
-static struct omap_hwmod_opt_clk dss_hdmi_opt_clks[] = {
-	{ .role = "sys_clk", .clk = "dss_hdmi_clk" },
-};
-
 static struct omap_hwmod dra7xx_dss_hdmi_hwmod = {
 	.name		= "dss_hdmi",
 	.class		= &dra7xx_hdmi_hwmod_class,
 	.clkdm_name	= "dss_clkdm",
-	.main_clk	= "dss_48mhz_clk",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_DSS_DSS_CLKCTRL_OFFSET,
 			.flags = HWMOD_OMAP4_NO_CONTEXT_LOSS_BIT,
 		},
 	},
-	.opt_clks	= dss_hdmi_opt_clks,
-	.opt_clks_cnt	= ARRAY_SIZE(dss_hdmi_opt_clks),
 };
 
 /*
@@ -627,7 +655,6 @@ static struct omap_hwmod dra7xx_elm_hwmod = {
 	.name		= "elm",
 	.class		= &dra7xx_elm_hwmod_class,
 	.clkdm_name	= "l4per_clkdm",
-	.main_clk	= "l3_iclk_div",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L4PER_ELM_CLKCTRL_OFFSET,
@@ -637,6 +664,64 @@ static struct omap_hwmod dra7xx_elm_hwmod = {
 };
 
 /*
+ * 'emif' class
+ *
+ */
+
+static struct omap_hwmod_class_sysconfig dra7xx_emif_sysc = {
+	.rev_offs	= 0x0000,
+};
+
+static struct omap_hwmod_class dra7xx_emif_hwmod_class = {
+	.name	= "emif",
+	.sysc	= &dra7xx_emif_sysc,
+};
+
+/* emif1 */
+static struct omap_hwmod_irq_info dra7xx_emif1_irqs[] = {
+	{ .irq = 110 + DRA7XX_IRQ_GIC_START },
+	{ .irq = -1 }
+};
+
+static struct omap_hwmod dra7xx_emif1_hwmod = {
+	.name		= "emif1",
+	.class		= &dra7xx_emif_hwmod_class,
+	.clkdm_name	= "emif_clkdm",
+	.flags		= HWMOD_INIT_NO_IDLE | HWMOD_INIT_NO_RESET,
+	.mpu_irqs	= dra7xx_emif1_irqs,
+	.main_clk	= "dpll_ddr_h11x2_ck",
+	.prcm = {
+		.omap4 = {
+			.clkctrl_offs = DRA7XX_CM_EMIF_EMIF1_CLKCTRL_OFFSET,
+			.context_offs = DRA7XX_RM_EMIF_EMIF1_CONTEXT_OFFSET,
+			.modulemode   = MODULEMODE_HWCTRL,
+		},
+	},
+};
+
+/* emif2 */
+static struct omap_hwmod_irq_info dra7xx_emif2_irqs[] = {
+	{ .irq = 111 + DRA7XX_IRQ_GIC_START },
+	{ .irq = -1 }
+};
+
+static struct omap_hwmod dra7xx_emif2_hwmod = {
+	.name		= "emif2",
+	.class		= &dra7xx_emif_hwmod_class,
+	.clkdm_name	= "emif_clkdm",
+	.flags		= HWMOD_INIT_NO_IDLE | HWMOD_INIT_NO_RESET,
+	.mpu_irqs	= dra7xx_emif2_irqs,
+	.main_clk	= "dpll_ddr_h11x2_ck",
+	.prcm = {
+		.omap4 = {
+			.clkctrl_offs = DRA7XX_CM_EMIF_EMIF2_CLKCTRL_OFFSET,
+			.context_offs = DRA7XX_RM_EMIF_EMIF2_CONTEXT_OFFSET,
+			.modulemode   = MODULEMODE_HWCTRL,
+		},
+	},
+};
+
+/*
  * 'gpio' class
  *
  */
@@ -888,7 +973,6 @@ static struct omap_hwmod dra7xx_gpmc_hwmod = {
 	.class		= &dra7xx_gpmc_hwmod_class,
 	.clkdm_name	= "l3main1_clkdm",
 	.flags		= HWMOD_INIT_NO_IDLE | HWMOD_INIT_NO_RESET,
-	.main_clk	= "l3_iclk_div",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3MAIN1_GPMC_CLKCTRL_OFFSET,
@@ -1715,7 +1799,6 @@ static struct omap_hwmod dra7xx_mpu_hwmod = {
 	.class		= &dra7xx_mpu_hwmod_class,
 	.clkdm_name	= "mpu_clkdm",
 	.flags		= HWMOD_INIT_NO_IDLE | HWMOD_INIT_NO_RESET,
-	.main_clk	= "dpll_mpu_m2_ck",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_MPU_MPU_CLKCTRL_OFFSET,
@@ -1750,7 +1833,6 @@ static struct omap_hwmod dra7xx_ocp2scp1_hwmod = {
 	.name		= "ocp2scp1",
 	.class		= &dra7xx_ocp2scp_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
-	.main_clk	= "l4_root_clk_div",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3INIT_OCP2SCP1_CLKCTRL_OFFSET,
@@ -1798,7 +1880,6 @@ static struct omap_hwmod dra7xx_pcie1_hwmod = {
 	.name		= "pcie1",
 	.class		= &dra7xx_pcie_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
-	.main_clk	= "l4_root_clk_div",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs	= DRA7XX_CM_PCIE_CLKSTCTRL_OFFSET,
@@ -1835,7 +1916,6 @@ static struct omap_hwmod dra7xx_pcie1_phy_hwmod = {
 	.name		= "pcie1-phy",
 	.class		= &dra7xx_pcie_phy_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
-	.main_clk	= "l4_root_clk_div",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3INIT_PCIESS1_CLKCTRL_OFFSET,
@@ -1883,7 +1963,6 @@ static struct omap_hwmod dra7xx_qspi_hwmod = {
 	.name		= "qspi",
 	.class		= &dra7xx_qspi_hwmod_class,
 	.clkdm_name	= "l4per2_clkdm",
-	.main_clk	= "qspi_gfclk_div",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L4PER2_QSPI_CLKCTRL_OFFSET,
@@ -1951,7 +2030,6 @@ static struct omap_hwmod dra7xx_sata_hwmod = {
 	.class		= &dra7xx_sata_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
 	.flags		= HWMOD_SWSUP_SIDLE | HWMOD_SWSUP_MSTANDBY,
-	.main_clk	= "func_48m_fclk",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3INIT_SATA_CLKCTRL_OFFSET,
@@ -2269,7 +2347,8 @@ static struct omap_hwmod dra7xx_uart1_hwmod = {
 	.name		= "uart1",
 	.class		= &dra7xx_uart_hwmod_class,
 	.clkdm_name	= "l4per_clkdm",
-	.flags		= DEBUG_OMAP2UART1_FLAGS | HWMOD_SWSUP_SIDLE_ACT,
+	.main_clk	= "uart1_gfclk_mux",
+	.flags		= HWMOD_SWSUP_SIDLE_ACT | DEBUG_OMAP2UART1_FLAGS,
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L4PER_UART1_CLKCTRL_OFFSET,
@@ -2375,16 +2454,10 @@ static struct omap_hwmod_class dra7xx_usb_otg_ss_hwmod_class = {
 	.sysc	= &dra7xx_usb_otg_ss_sysc,
 };
 
-/* usb_otg_ss1 */
-static struct omap_hwmod_opt_clk usb_otg_ss1_opt_clks[] = {
-	{ .role = "refclk960m", .clk = "usb_otg_ss1_refclk960m" },
-};
-
 static struct omap_hwmod dra7xx_usb_otg_ss1_hwmod = {
 	.name		= "usb_otg_ss1",
 	.class		= &dra7xx_usb_otg_ss_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
-	.main_clk	= "dpll_core_h13x2_ck",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3INIT_USB_OTG_SS1_CLKCTRL_OFFSET,
@@ -2392,20 +2465,12 @@ static struct omap_hwmod dra7xx_usb_otg_ss1_hwmod = {
 			.modulemode   = MODULEMODE_HWCTRL,
 		},
 	},
-	.opt_clks	= usb_otg_ss1_opt_clks,
-	.opt_clks_cnt	= ARRAY_SIZE(usb_otg_ss1_opt_clks),
-};
-
-/* usb_otg_ss2 */
-static struct omap_hwmod_opt_clk usb_otg_ss2_opt_clks[] = {
-	{ .role = "refclk960m", .clk = "usb_otg_ss2_refclk960m" },
 };
 
 static struct omap_hwmod dra7xx_usb_otg_ss2_hwmod = {
 	.name		= "usb_otg_ss2",
 	.class		= &dra7xx_usb_otg_ss_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
-	.main_clk	= "dpll_core_h13x2_ck",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3INIT_USB_OTG_SS2_CLKCTRL_OFFSET,
@@ -2413,8 +2478,6 @@ static struct omap_hwmod dra7xx_usb_otg_ss2_hwmod = {
 			.modulemode   = MODULEMODE_HWCTRL,
 		},
 	},
-	.opt_clks	= usb_otg_ss2_opt_clks,
-	.opt_clks_cnt	= ARRAY_SIZE(usb_otg_ss2_opt_clks),
 };
 
 /* usb_otg_ss3 */
@@ -2422,7 +2485,6 @@ static struct omap_hwmod dra7xx_usb_otg_ss3_hwmod = {
 	.name		= "usb_otg_ss3",
 	.class		= &dra7xx_usb_otg_ss_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
-	.main_clk	= "dpll_core_h13x2_ck",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3INIT_USB_OTG_SS3_CLKCTRL_OFFSET,
@@ -2437,7 +2499,6 @@ static struct omap_hwmod dra7xx_usb_otg_ss4_hwmod = {
 	.name		= "usb_otg_ss4",
 	.class		= &dra7xx_usb_otg_ss_hwmod_class,
 	.clkdm_name	= "l3init_clkdm",
-	.main_clk	= "dpll_core_h13x2_ck",
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_L3INIT_USB_OTG_SS4_CLKCTRL_OFFSET,
@@ -2522,6 +2583,73 @@ static struct omap_hwmod dra7xx_wd_timer2_hwmod = {
 };
 
 /*
+ * 'vip' class
+ *
+ */
+
+static struct omap_hwmod_class_sysconfig dra7xx_vip_sysc = {
+	.sysc_offs	= 0x0010,
+	.sysc_flags	= (SYSC_HAS_MIDLEMODE | SYSC_HAS_SIDLEMODE),
+	.idlemodes	= (SIDLE_FORCE | SIDLE_NO | SIDLE_SMART |
+			   SIDLE_SMART_WKUP | MSTANDBY_FORCE | MSTANDBY_NO |
+			   MSTANDBY_SMART | MSTANDBY_SMART_WKUP),
+	.sysc_fields	= &omap_hwmod_sysc_type2,
+};
+
+static struct omap_hwmod_class dra7xx_vip_hwmod_class = {
+	.name	= "vip",
+	.sysc	= &dra7xx_vip_sysc,
+};
+
+/* vip1 */
+static struct omap_hwmod dra7xx_vip1_hwmod = {
+	.name		= "vip1",
+	.class		= &dra7xx_vip_hwmod_class,
+	.clkdm_name	= "cam_clkdm",
+	.main_clk	= "vip1_gclk_mux",
+	.prcm = {
+		.omap4 = {
+			.clkctrl_offs = DRA7XX_CM_CAM_VIP1_CLKCTRL_OFFSET,
+			.context_offs = DRA7XX_RM_CAM_VIP1_CONTEXT_OFFSET,
+			.modulemode   = MODULEMODE_HWCTRL,
+		},
+	},
+#ifdef CONFIG_EARLYCAMERA_IPU
+	.flags		= HWMOD_INIT_NO_IDLE | HWMOD_INIT_NO_RESET,
+#endif
+};
+
+/* vip2 */
+static struct omap_hwmod dra7xx_vip2_hwmod = {
+	.name		= "vip2",
+	.class		= &dra7xx_vip_hwmod_class,
+	.clkdm_name	= "cam_clkdm",
+	.main_clk	= "vip2_gclk_mux",
+	.prcm = {
+		.omap4 = {
+			.clkctrl_offs = DRA7XX_CM_CAM_VIP2_CLKCTRL_OFFSET,
+			.context_offs = DRA7XX_RM_CAM_VIP2_CONTEXT_OFFSET,
+			.modulemode   = MODULEMODE_HWCTRL,
+		},
+	},
+};
+
+/* vip3 */
+static struct omap_hwmod dra7xx_vip3_hwmod = {
+	.name		= "vip3",
+	.class		= &dra7xx_vip_hwmod_class,
+	.clkdm_name	= "cam_clkdm",
+	.main_clk	= "vip3_gclk_mux",
+	.prcm = {
+		.omap4 = {
+			.clkctrl_offs = DRA7XX_CM_CAM_VIP3_CLKCTRL_OFFSET,
+			.context_offs = DRA7XX_RM_CAM_VIP3_CONTEXT_OFFSET,
+			.modulemode   = MODULEMODE_HWCTRL,
+		},
+	},
+};
+
+/*
  * 'vpe' class
  *
  */
@@ -2540,12 +2668,22 @@ static struct omap_hwmod_class dra7xx_vpe_hwmod_class = {
 	.sysc	= &dra7xx_vpe_sysc,
 };
 
+static struct omap_hwmod_irq_info dra7xx_vpe_irqs[] = {
+	/*
+	 * Using a reserved interrupt line, mapping crossbar 354 to the irq line
+	 * in the driver
+	 */
+	{ .irq = 158 + DRA7XX_IRQ_GIC_START },
+	{ .irq = -1 }
+};
+
 /* vpe */
 static struct omap_hwmod dra7xx_vpe_hwmod = {
 	.name		= "vpe",
 	.class		= &dra7xx_vpe_hwmod_class,
 	.clkdm_name	= "vpe_clkdm",
 	.main_clk	= "dpll_core_h23x2_ck",
+	.mpu_irqs	= dra7xx_vpe_irqs,
 	.prcm = {
 		.omap4 = {
 			.clkctrl_offs = DRA7XX_CM_VPE_VPE_CLKCTRL_OFFSET,
@@ -2559,6 +2697,40 @@ static struct omap_hwmod dra7xx_vpe_hwmod = {
  * Interfaces
  */
 
+static struct omap_hwmod_addr_space dra7xx_dmm_addrs[] = {
+	{
+		.pa_start	= 0x4e000000,
+		.pa_end		= 0x4e0007ff,
+		.flags		= ADDR_TYPE_RT
+	},
+	{ }
+};
+
+/* l3_main_1 -> dmm */
+static struct omap_hwmod_ocp_if dra7xx_l3_main_1__dmm = {
+	.master		= &dra7xx_l3_main_1_hwmod,
+	.slave		= &dra7xx_dmm_hwmod,
+	.clk		= "l3_iclk_div",
+	.addr		= dra7xx_dmm_addrs,
+	.user		= OCP_USER_SDMA,
+};
+
+/* dmm -> emif_ocp_fw */
+static struct omap_hwmod_ocp_if dra7xx_dmm__emif_ocp_fw = {
+	.master		= &dra7xx_dmm_hwmod,
+	.slave		= &dra7xx_emif_ocp_fw_hwmod,
+	.clk		= "l3_iclk_div",
+	.user		= OCP_USER_MPU | OCP_USER_SDMA,
+};
+
+/* l4_cfg -> emif_ocp_fw */
+static struct omap_hwmod_ocp_if dra7xx_l4_cfg__emif_ocp_fw = {
+	.master		= &dra7xx_l4_cfg_hwmod,
+	.slave		= &dra7xx_emif_ocp_fw_hwmod,
+	.clk		= "l3_iclk_div",
+	.user		= OCP_USER_MPU | OCP_USER_SDMA,
+};
+
 /* l3_main_2 -> l3_instr */
 static struct omap_hwmod_ocp_if dra7xx_l3_main_2__l3_instr = {
 	.master		= &dra7xx_l3_main_2_hwmod,
@@ -2950,9 +3122,9 @@ static struct omap_hwmod_addr_space dra7xx_mcasp3_addrs[] = {
 	{ }
 };
 
-/* l3_main_1 -> mcasp3 */
-static struct omap_hwmod_ocp_if dra7xx_l3_main_1__mcasp3 = {
-	.master		= &dra7xx_l3_main_1_hwmod,
+/* l4_per2 -> mcasp3 */
+static struct omap_hwmod_ocp_if dra7xx_l4_per2__mcasp3 = {
+	.master		= &dra7xx_l4_per2_hwmod,
 	.slave		= &dra7xx_mcasp3_hwmod,
 	.clk		= "l3_iclk_div",
 	.addr		= dra7xx_mcasp3_addrs,
@@ -2977,6 +3149,58 @@ static struct omap_hwmod_ocp_if dra7xx_l4_per1__elm = {
 	.user		= OCP_USER_MPU | OCP_USER_SDMA,
 };
 
+/* emif_ocp_fw -> emif1 */
+static struct omap_hwmod_ocp_if dra7xx_emif_ocp_fw__emif1 = {
+	.master		= &dra7xx_emif_ocp_fw_hwmod,
+	.slave		= &dra7xx_emif1_hwmod,
+	.clk		= "dpll_ddr_h11x2_ck",
+	.user		= OCP_USER_MPU | OCP_USER_SDMA,
+};
+
+static struct omap_hwmod_addr_space dra7xx_emif1_addrs[] = {
+	{
+		.pa_start	= 0x4c000000,
+		.pa_end		= 0x4c0003ff,
+		.flags		= ADDR_TYPE_RT
+	},
+	{ }
+};
+
+/* mpu -> emif1 */
+static struct omap_hwmod_ocp_if dra7xx_mpu__emif1 = {
+	.master		= &dra7xx_mpu_hwmod,
+	.slave		= &dra7xx_emif1_hwmod,
+	.clk		= "dpll_ddr_h11x2_ck",
+	.addr		= dra7xx_emif1_addrs,
+	.user		= OCP_USER_MPU,
+};
+
+/* emif_ocp_fw -> emif2 */
+static struct omap_hwmod_ocp_if dra7xx_emif_ocp_fw__emif2 = {
+	.master		= &dra7xx_emif_ocp_fw_hwmod,
+	.slave		= &dra7xx_emif2_hwmod,
+	.clk		= "dpll_ddr_h11x2_ck",
+	.user		= OCP_USER_MPU | OCP_USER_SDMA,
+};
+
+static struct omap_hwmod_addr_space dra7xx_emif2_addrs[] = {
+	{
+		.pa_start	= 0x4d000000,
+		.pa_end		= 0x4d0003ff,
+		.flags		= ADDR_TYPE_RT
+	},
+	{ }
+};
+
+/* mpu -> emif2 */
+static struct omap_hwmod_ocp_if dra7xx_mpu__emif2 = {
+	.master		= &dra7xx_mpu_hwmod,
+	.slave		= &dra7xx_emif2_hwmod,
+	.clk		= "dpll_ddr_h11x2_ck",
+	.addr		= dra7xx_emif2_addrs,
+	.user		= OCP_USER_MPU,
+};
+
 /* l4_wkup -> gpio1 */
 static struct omap_hwmod_ocp_if dra7xx_l4_wkup__gpio1 = {
 	.master		= &dra7xx_l4_wkup_hwmod,
@@ -3664,15 +3888,206 @@ static struct omap_hwmod_ocp_if dra7xx_l4_wkup__wd_timer2 = {
 	.user		= OCP_USER_MPU | OCP_USER_SDMA,
 };
 
+static struct omap_hwmod_addr_space dra7xx_vip1_addrs[] = {
+	{
+		.name		= "vip_top_level",
+		.pa_start	= 0x48970000,
+		.pa_end		= 0x489701ff,
+		.flags		= ADDR_TYPE_RT
+	},
+	{
+		.name		= "vip_slice0_parser",
+		.pa_start	= 0x48975500,
+		.pa_end		= 0x489755ff,
+	},
+	{
+		.name		= "vip_slice0_csc",
+		.pa_start	= 0x48975700,
+		.pa_end		= 0x4897571f,
+	},
+	{
+		.name		= "vip_slice0_sc",
+		.pa_start	= 0x48975800,
+		.pa_end		= 0x4897587f,
+	},
+	{
+		.name		= "vip_slice1_parser",
+		.pa_start	= 0x48975a00,
+		.pa_end		= 0x48975aff,
+	},
+	{
+		.name		= "vip_slice1_csc",
+		.pa_start	= 0x48975c00,
+		.pa_end		= 0x48975c1f,
+	},
+	{
+		.name		= "vip_slice1_sc",
+		.pa_start	= 0x48975d00,
+		.pa_end		= 0x48975d7f,
+	},
+	{
+		.name		= "vip_vpdma",
+		.pa_start	= 0x4897d000,
+		.pa_end		= 0x4897d3ff,
+	},
+	{ }
+};
+
+/* l4_per3 -> vip1 */
+static struct omap_hwmod_ocp_if dra7xx_l4_per3__vip1 = {
+	.master		= &dra7xx_l4_per3_hwmod,
+	.slave		= &dra7xx_vip1_hwmod,
+	.clk		= "l3_iclk_div",
+	.addr		= dra7xx_vip1_addrs,
+	.user		= OCP_USER_MPU | OCP_USER_SDMA,
+};
+
+static struct omap_hwmod_addr_space dra7xx_vip2_addrs[] = {
+	{
+		.name		= "vip_top_level",
+		.pa_start	= 0x48990000,
+		.pa_end		= 0x489901ff,
+		.flags		= ADDR_TYPE_RT
+	},
+	{
+		.name		= "vip_slice0_parser",
+		.pa_start	= 0x48995500,
+		.pa_end		= 0x489955ff,
+	},
+	{
+		.name		= "vip_slice0_csc",
+		.pa_start	= 0x48995700,
+		.pa_end		= 0x4899571f,
+	},
+	{
+		.name		= "vip_slice0_sc",
+		.pa_start	= 0x48995800,
+		.pa_end		= 0x4899587f,
+	},
+	{
+		.name		= "vip_slice1_parser",
+		.pa_start	= 0x48995a00,
+		.pa_end		= 0x48995aff,
+	},
+	{
+		.name		= "vip_slice1_csc",
+		.pa_start	= 0x48995c00,
+		.pa_end		= 0x48995c1f,
+	},
+	{
+		.name		= "vip_slice1_sc",
+		.pa_start	= 0x48995d00,
+		.pa_end		= 0x48995d7f,
+	},
+	{
+		.name		= "vip_vpdma",
+		.pa_start	= 0x4899d000,
+		.pa_end		= 0x4899d3ff,
+	},
+	{ }
+};
+
+/* l4_per3 -> vip2 */
+static struct omap_hwmod_ocp_if dra7xx_l4_per3__vip2 = {
+	.master		= &dra7xx_l4_per3_hwmod,
+	.slave		= &dra7xx_vip2_hwmod,
+	.clk		= "l3_iclk_div",
+	.addr		= dra7xx_vip2_addrs,
+	.user		= OCP_USER_MPU | OCP_USER_SDMA,
+};
+
+static struct omap_hwmod_addr_space dra7xx_vip3_addrs[] = {
+	{
+		.name		= "vip_top_level",
+		.pa_start	= 0x489b0000,
+		.pa_end		= 0x489b01ff,
+		.flags		= ADDR_TYPE_RT
+	},
+	{
+		.name		= "vip_slice0_parser",
+		.pa_start	= 0x489b5500,
+		.pa_end		= 0x489b55ff,
+	},
+	{
+		.name		= "vip_slice0_csc",
+		.pa_start	= 0x489b5700,
+		.pa_end		= 0x489b571f,
+	},
+	{
+		.name		= "vip_slice0_sc",
+		.pa_start	= 0x489b5800,
+		.pa_end		= 0x489b587f,
+	},
+	{
+		.name		= "vip_slice1_parser",
+		.pa_start	= 0x489b5a00,
+		.pa_end		= 0x489b5aff,
+	},
+	{
+		.name		= "vip_slice1_csc",
+		.pa_start	= 0x489b5c00,
+		.pa_end		= 0x489b5c1f,
+	},
+	{
+		.name		= "vip_slice1_sc",
+		.pa_start	= 0x489b5d00,
+		.pa_end		= 0x489b5d7f,
+	},
+	{
+		.name		= "vip_vpdma",
+		.pa_start	= 0x489bd000,
+		.pa_end		= 0x489bd3ff,
+	},
+	{ }
+};
+
+/* l4_per3 -> vip3 */
+static struct omap_hwmod_ocp_if dra7xx_l4_per3__vip3 = {
+	.master		= &dra7xx_l4_per3_hwmod,
+	.slave		= &dra7xx_vip3_hwmod,
+	.clk		= "l3_iclk_div",
+	.addr		= dra7xx_vip3_addrs,
+	.user		= OCP_USER_MPU | OCP_USER_SDMA,
+};
+
+static struct omap_hwmod_addr_space dra7xx_vpe_addrs[] = {
+	{
+		.name		= "vpe",
+		.pa_start	= 0x489d0000,
+		.pa_end		= 0x489d06ff,
+		.flags		= ADDR_TYPE_RT
+	},
+	{
+		.name           = "vpe_sc",
+		.pa_start       = 0x489d0700,
+		.pa_end         = 0x489d56ff,
+	},
+	{
+		.name           = "vpe_csc",
+		.pa_start       = 0x489d5700,
+		.pa_end         = 0x489dcfff,
+	},
+	{
+		.name		= "vpdma",
+		.pa_start	= 0x489dd000,
+		.pa_end		= 0x489dd3ff,
+	},
+	{ }
+};
+
 /* l4_per3 -> vpe */
 static struct omap_hwmod_ocp_if dra7xx_l4_per3__vpe = {
 	.master		= &dra7xx_l4_per3_hwmod,
 	.slave		= &dra7xx_vpe_hwmod,
 	.clk		= "l3_iclk_div",
+	.addr		= dra7xx_vpe_addrs,
 	.user		= OCP_USER_MPU | OCP_USER_SDMA,
 };
 
 static struct omap_hwmod_ocp_if *dra7xx_hwmod_ocp_ifs[] __initdata = {
+	&dra7xx_l3_main_1__dmm,
+	&dra7xx_dmm__emif_ocp_fw,
+	&dra7xx_l4_cfg__emif_ocp_fw,
 	&dra7xx_l3_main_2__l3_instr,
 	&dra7xx_l4_cfg__l3_main_1,
 	&dra7xx_mpu__l3_main_1,
@@ -3698,8 +4113,10 @@ static struct omap_hwmod_ocp_if *dra7xx_hwmod_ocp_ifs[] __initdata = {
 	&dra7xx_dsp2__l3_main_1,
 	&dra7xx_l3_main_1__hdmi,
 	&dra7xx_l3_main_1__aes,
-	&dra7xx_l3_main_1__mcasp3,
+	&dra7xx_l4_per2__mcasp3,
 	&dra7xx_l4_per1__elm,
+	&dra7xx_emif_ocp_fw__emif1,
+	&dra7xx_mpu__emif1,
 	&dra7xx_l4_wkup__gpio1,
 	&dra7xx_l4_per1__gpio2,
 	&dra7xx_l4_per1__gpio3,
@@ -3783,13 +4200,29 @@ static struct omap_hwmod_ocp_if *dra7xx_hwmod_ocp_ifs[] __initdata = {
 	&dra7xx_l4_per2__vcp1,
 	&dra7xx_l3_main_1__vcp2,
 	&dra7xx_l4_per2__vcp2,
-	&dra7xx_l4_wkup__wd_timer2,
+	&dra7xx_l4_per3__vip1,
 	&dra7xx_l4_per3__vpe,
+	&dra7xx_l4_wkup__wd_timer2,
+	NULL,
+};
+
+static struct omap_hwmod_ocp_if *dra74x_hwmod_ocp_ifs[] __initdata = {
+	&dra7xx_emif_ocp_fw__emif2,
+	&dra7xx_mpu__emif2,
+	&dra7xx_l4_per3__vip2,
+	&dra7xx_l4_per3__vip3,
 	NULL,
 };
 
 int __init dra7xx_hwmod_init(void)
 {
+	int ret;
+
 	omap_hwmod_init();
-	return omap_hwmod_register_links(dra7xx_hwmod_ocp_ifs);
+	ret = omap_hwmod_register_links(dra7xx_hwmod_ocp_ifs);
+
+	if (!ret && soc_is_dra7xx())
+		return omap_hwmod_register_links(dra74x_hwmod_ocp_ifs);
+
+	return ret;
 }
-- 
1.7.5.4

