From d762cde9182c6c2f6eaa3d1f29090092e404f4df Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Fri, 15 Aug 2014 10:47:21 +0800
Subject: [PATCH 1/5] clk: fix memory leak in of_mux_clk_setup() and
 of_omap_dpll_setup()

The variable 'parent_names' in these two functions is just a temporary
array which holds the pointers to the dt strings. After init the
corresponding struct with the pointers to the dt strings, we should
free this temporary array. The following is the call trace reported
by kmemleak:

unreferenced object 0xee802d40 (size 64):
  comm "swapper", pid 0, jiffies 4294937345 (age 6687.840s)
  hex dump (first 32 bytes):
    48 fc 95 c1 44 fd 95 c1 40 fe 95 c1 3c ff 95 c1  H...D...@...<...
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  backtrace:
    [<c0a0f740>] log_early+0xa8/0xe4
    [<c06ebe88>] kmemleak_alloc+0x74/0x78
    [<c014a9ac>] __kmalloc+0x190/0x400
    [<c0550bd8>] of_mux_clk_setup+0x5c/0x27c
    [<c0a228a0>] of_clk_init+0x48/0x68
    [<c0a241b0>] am43xx_clk_init+0x20/0x9c
    [<c09f6be4>] omap3_gptimer_timer_init+0x24/0x58
    [<c09f0024>] time_init+0x28/0x30
    [<c09ebb68>] start_kernel+0x210/0x358
    [<80008070>] 0x80008070
    [<ffffffff>] 0xffffffff
unreferenced object 0xee817500 (size 64):
  comm "swapper", pid 0, jiffies 4294937345 (age 6687.840s)
  hex dump (first 32 bytes):
    24 03 96 c1 24 03 96 c1 00 00 00 00 00 00 00 00  $...$...........
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  backtrace:
    [<c0a0f740>] log_early+0xa8/0xe4
    [<c06ebe88>] kmemleak_alloc+0x74/0x78
    [<c014a9ac>] __kmalloc+0x190/0x400
    [<c0a22cec>] of_omap_dpll_setup.constprop.0+0xb8/0x314
    [<c0a231f0>] of_omap4_core_dpll_setup+0x78/0x84
    [<c0a228a0>] of_clk_init+0x48/0x68
    [<c0a241b0>] am43xx_clk_init+0x20/0x9c
    [<c09f6be4>] omap3_gptimer_timer_init+0x24/0x58
    [<c09f0024>] time_init+0x28/0x30
    [<c09ebb68>] start_kernel+0x210/0x358
    [<80008070>] 0x80008070
    [<ffffffff>] 0xffffffff

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Tested-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/clk/clk-mux.c |   12 ++++++++++--
 drivers/clk/ti/dpll.c |    6 ++++++
 2 files changed, 16 insertions(+), 2 deletions(-)

diff --git a/drivers/clk/clk-mux.c b/drivers/clk/clk-mux.c
index 3189bd8..8579dd5 100644
--- a/drivers/clk/clk-mux.c
+++ b/drivers/clk/clk-mux.c
@@ -209,18 +209,23 @@ void of_mux_clk_setup(struct device_node *node)
 	parent_names = kzalloc((sizeof(char*) * num_parents),
 			GFP_KERNEL);
 
+	if (!parent_names) {
+		pr_err("%s: allocate memory failure\n", __func__);
+		return;
+	}
+
 	for (i = 0; i < num_parents; i++)
 		parent_names[i] = of_clk_get_parent_name(node, i);
 
 	reg = of_iomap(node, 0);
 	if (!reg) {
 		pr_err("%s: no memory mapped for property reg\n", __func__);
-		return;
+		goto cleanup;
 	}
 
 	if (of_property_read_u32(node, "bit-mask", &mask)) {
 		pr_err("%s: missing bit-mask property for %s\n", __func__, node->name);
-		return;
+		goto cleanup;
 	}
 
 	if (of_property_read_u32(node, "bit-shift", &shift)) {
@@ -243,6 +248,9 @@ void of_mux_clk_setup(struct device_node *node)
 
 	if (!IS_ERR(clk))
 		of_clk_add_provider(node, of_clk_src_simple_get, clk);
+
+cleanup:
+	kfree(parent_names);
 }
 EXPORT_SYMBOL_GPL(of_mux_clk_setup);
 CLK_OF_DECLARE(mux_clk, "mux-clock", of_mux_clk_setup);
diff --git a/drivers/clk/ti/dpll.c b/drivers/clk/ti/dpll.c
index 3f4236d..59f7142 100644
--- a/drivers/clk/ti/dpll.c
+++ b/drivers/clk/ti/dpll.c
@@ -200,6 +200,10 @@ static void __init of_omap_dpll_setup(struct device_node *node,
 	}
 
 	parent_names = kzalloc(sizeof(char *) * num_parents, GFP_KERNEL);
+	if (!parent_names) {
+		pr_err("%s: allocate memory failure\n", __func__);
+		goto cleanup;
+	}
 
 	for (i = 0; i < num_parents; i++)
 		parent_names[i] = of_clk_get_parent_name(node, i);
@@ -246,6 +250,8 @@ static void __init of_omap_dpll_setup(struct device_node *node,
 
 	if (!IS_ERR(clk))
 		of_clk_add_provider(node, of_clk_src_simple_get, clk);
+
+	kfree(parent_names);
 	return;
 
 cleanup:
-- 
1.7.5.4

