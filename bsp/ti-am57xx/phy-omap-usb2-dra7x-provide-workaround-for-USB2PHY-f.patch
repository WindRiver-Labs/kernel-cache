From bf4b84b1a530ab6bf3ca7012bfb54c8a394975d0 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Mon, 7 Jul 2014 15:27:52 +0800
Subject: [PATCH 204/263] phy: omap-usb2: dra7x: provide workaround for
 USB2PHY false disconnect

The f40c8f3e comes from the following git repo:

  git://git.ti.com/ti-linux-kernel/ti-linux-kernel.git

Enable the dra7x errata workaround for false disconnect problem
with USB2PHY. False disconnects were detected with some of the
devices.
Reduce the sensitivity of the disconnect logic within the USB2PHY
subsystem to ensure these false disconnects are not registered.

False disconnect workaround is applicable for dra7x only.

This patch is backported from mainline kernel patch:

ref: https://lkml.org/lkml/2014/3/3/115

http://git.kernel.org/cgit/linux/kernel/git/gregkh/usb.git/
commit/?h=usb-next&id=7e472402ca308287a2474d4c9011f69f33fa19cb

Change-Id: Ic1c87cca9594dff91e3b9de322a1917d049a5715
Signed-off-by: Ravi Babu <ravibabu@ti.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/usb/phy/phy-omap-usb2.c |   72 ++++++++++++++++++++++++++++++++++----
 include/linux/usb/omap_usb.h    |   12 ++++++
 2 files changed, 76 insertions(+), 8 deletions(-)

diff --git a/drivers/usb/phy/phy-omap-usb2.c b/drivers/usb/phy/phy-omap-usb2.c
index 844ab68..9c3b6ef 100644
--- a/drivers/usb/phy/phy-omap-usb2.c
+++ b/drivers/usb/phy/phy-omap-usb2.c
@@ -29,6 +29,42 @@
 #include <linux/delay.h>
 #include <linux/usb/omap_control_usb.h>
 
+#define USB2PHY_DISCON_BYP_LATCH (1 << 31)
+#define	USB2PHY_ANA_CONFIG1	0x4c
+
+static int omap_usb_init(struct usb_phy *x)
+{
+	struct omap_usb *phy = phy_to_omapusb(x);
+	struct resource *res;
+	struct platform_device *pdev = to_platform_device(phy->dev);
+	u32 val;
+
+	if (phy->flags & OMAP_USB2_CALIBRATE_FALSE_DISCONNECT) {
+		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+		if (!res) {
+			dev_err(&pdev->dev, "memory resource not available\n");
+			return -ENODEV;
+		}
+		phy->phy_base = devm_request_and_ioremap(&pdev->dev, res);
+		if (!phy->phy_base)
+			return -ENOMEM;
+		/*
+		 *
+		 * Reduce the sensitivity of internal PHY by enabling the
+		 * DISCON_BYP_LATCH of the USB2PHY_ANA_CONFIG1 register. This
+		 * resolves issues with certain devices which can otherwise
+		 * be prone to false disconnects.
+		 *
+		 */
+		val = omap_usb_readl(phy->phy_base, USB2PHY_ANA_CONFIG1);
+		val |= USB2PHY_DISCON_BYP_LATCH;
+		omap_usb_writel(phy->phy_base, USB2PHY_ANA_CONFIG1, val);
+	}
+
+	return 0;
+}
+
+
 /**
  * omap_usb2_set_comparator - links the comparator present in the sytem with
  *	this phy
@@ -119,10 +155,34 @@ static int omap_usb2_suspend(struct usb_phy *x, int suspend)
 	return 0;
 }
 
+static const struct usb_phy_data dra7x_usb2_data = {
+	.label = "dra7x-usb2",
+	.flags = OMAP_USB2_CALIBRATE_FALSE_DISCONNECT,
+};
+
+static const struct of_device_id omap_usb2_id_table[] = {
+	{ .compatible = "ti,omap-usb2" },
+	{
+		.compatible = "ti,dra7x-usb2",
+		.data = &dra7x_usb2_data,
+	},
+	{}
+};
+MODULE_DEVICE_TABLE(of, omap_usb2_id_table);
+
 static int omap_usb2_probe(struct platform_device *pdev)
 {
 	struct omap_usb			*phy;
 	struct usb_otg			*otg;
+	const struct of_device_id *of_id;
+	struct usb_phy_data *phy_data;
+
+	of_id = of_match_device(of_match_ptr(omap_usb2_id_table), &pdev->dev);
+
+	if (!of_id)
+		return -EINVAL;
+
+	phy_data = (struct usb_phy_data *)of_id->data;
 
 	phy = devm_kzalloc(&pdev->dev, sizeof(*phy), GFP_KERNEL);
 	if (!phy) {
@@ -143,6 +203,10 @@ static int omap_usb2_probe(struct platform_device *pdev)
 	phy->phy.set_suspend	= omap_usb2_suspend;
 	phy->phy.otg		= otg;
 	phy->phy.type		= USB_PHY_TYPE_USB2;
+	phy->phy.init		= omap_usb_init;
+
+	if (phy_data->flags & OMAP_USB2_CALIBRATE_FALSE_DISCONNECT)
+		phy->flags |= OMAP_USB2_CALIBRATE_FALSE_DISCONNECT;
 
 	phy->control_dev = omap_get_control_dev();
 	if (IS_ERR(phy->control_dev)) {
@@ -246,14 +310,6 @@ static const struct dev_pm_ops omap_usb2_pm_ops = {
 #define DEV_PM_OPS     NULL
 #endif
 
-#ifdef CONFIG_OF
-static const struct of_device_id omap_usb2_id_table[] = {
-	{ .compatible = "ti,omap-usb2" },
-	{}
-};
-MODULE_DEVICE_TABLE(of, omap_usb2_id_table);
-#endif
-
 static struct platform_driver omap_usb2_driver = {
 	.probe		= omap_usb2_probe,
 	.remove		= omap_usb2_remove,
diff --git a/include/linux/usb/omap_usb.h b/include/linux/usb/omap_usb.h
index 6ae2936..656bfd0 100644
--- a/include/linux/usb/omap_usb.h
+++ b/include/linux/usb/omap_usb.h
@@ -30,6 +30,11 @@ struct usb_dpll_params {
 	u32	mf;
 };
 
+struct usb_phy_data {
+	const char *label;
+	u32 flags;
+};
+
 struct omap_usb {
 	struct usb_phy		phy;
 	struct phy_companion	*comparator;
@@ -40,8 +45,15 @@ struct omap_usb {
 	struct clk		*sys_clk;
 	struct clk		*optclk;
 	u8			is_suspended:1;
+	void __iomem		*phy_base;
+	u32			flags;
 };
 
+/* Driver Flags */
+#define OMAP_USB2_HAS_START_SRP (1 << 0)
+#define OMAP_USB2_HAS_SET_VBUS (1 << 1)
+#define OMAP_USB2_CALIBRATE_FALSE_DISCONNECT (1 << 2)
+
 #define	phy_to_omapusb(x)	container_of((x), struct omap_usb, phy)
 
 #if defined(CONFIG_OMAP_USB2) || defined(CONFIG_OMAP_USB2_MODULE)
-- 
1.7.5.4

