From 8de02a129cbabf473c1ce240390cf35a2643ab97 Mon Sep 17 00:00:00 2001
From: Nikhil Devshatwar <nikhil.nd@ti.com>
Date: Thu, 28 Nov 2013 15:41:35 +0530
Subject: [PATCH 225/263] i2c: dra7xx: dummy driver for i2c expander

This commit comes from branch ti-linux-3.12.y:
  git://git.ti.com/ti-linux-kernel/ti-linux-kernel.git

Dummy Driver for enabling i2c expanders on vision board
I2C expander addresses conflict with HDMI receiver, so
Parse HDMI receiver node and resolve conflict

Change-Id: I932ae7b725c80a8a467382a636f565ac4c5f935c
Signed-off-by: Nikhil Devshatwar <nikhil.nd@ti.com>
(cherry picked from commit 93732343fb336b0a7ceb50ee734177cac686c913)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/i2c/busses/Makefile       |    3 +
 drivers/i2c/busses/i2c-expander.c |  161 +++++++++++++++++++++++++++++++++++++
 2 files changed, 164 insertions(+), 0 deletions(-)
 create mode 100644 drivers/i2c/busses/i2c-expander.c

diff --git a/drivers/i2c/busses/Makefile b/drivers/i2c/busses/Makefile
index 5bbf680..cea992d 100644
--- a/drivers/i2c/busses/Makefile
+++ b/drivers/i2c/busses/Makefile
@@ -5,6 +5,9 @@
 # ACPI drivers
 obj-$(CONFIG_I2C_SCMI)		+= i2c-scmi.o
 
+#i2c expander driver
+obj-y += i2c-expander.o
+
 # PC SMBus host controller drivers
 obj-$(CONFIG_I2C_ALI1535)	+= i2c-ali1535.o
 obj-$(CONFIG_I2C_ALI1563)	+= i2c-ali1563.o
diff --git a/drivers/i2c/busses/i2c-expander.c b/drivers/i2c/busses/i2c-expander.c
new file mode 100644
index 0000000..cb71006
--- /dev/null
+++ b/drivers/i2c/busses/i2c-expander.c
@@ -0,0 +1,161 @@
+/*
+ * i2c-expander.c
+ *
+ * i2c expander driver.
+ * Copyright (C) 2010-2011 Texas Instruments Incorporated - http://www.ti.com/
+ * Authors: Nikhil Devshatwar <nikhil.nd@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/kernel.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_i2c.h>
+#include <linux/delay.h>
+
+static const struct i2c_device_id i2c_expander_id[] = {
+	{ "expander", 8 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, i2c_expander_id);
+
+/*-------------------------------------------------------------------------*/
+
+/* Talk to 8-bit link */
+
+static int i2c_write_le8(struct i2c_client *client, unsigned addr,
+							unsigned data)
+{
+	int ret;
+
+	dev_err(&client->dev, "Writing addr = %x, data = %x", addr, data);
+	ret = i2c_smbus_write_byte_data(client, addr, data);
+	if (ret)
+		dev_err(&client->dev, "Failed to write addr = %x, data = %x",
+			addr, data);
+	return ret;
+}
+
+static int i2c_expander_command(struct i2c_client *client,
+					unsigned int cmd, void *arg)
+{
+	return 0;
+}
+
+static int i2c_expander_probe(struct i2c_client *client,
+			 const struct i2c_device_id *id)
+{
+	struct device_node *node = NULL;
+	struct i2c_client *hdmirec_i2c_client = NULL;
+	int ret;
+
+	node = of_parse_phandle(client->dev.of_node, "hdmirec", 0);
+	if (node)
+		hdmirec_i2c_client = of_find_i2c_device_by_node(node);
+	else
+		return dev_err(&client->dev, "HDMI receiver node not found");
+
+	/* Write HDMI SIL 9127 registers to remove conflict with i2c expander */
+	ret = i2c_write_le8(hdmirec_i2c_client, 0x14, 0xf4);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(hdmirec_i2c_client, 0x15, 0xf6);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(hdmirec_i2c_client, 0x16, 0xf8);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(hdmirec_i2c_client, 0x17, 0xfa);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(hdmirec_i2c_client, 0x18, 0xfc);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(hdmirec_i2c_client, 0x19, 0xfe);
+	if (ret)
+		return ret;
+	mdelay(1);
+
+	/* Write to i2c expander */
+	ret = i2c_write_le8(client, 0x00, 0x00);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(client, 0x0c, 0x00);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(client, 0x12, 0x63);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(client, 0x12, 0xe3);
+	if (ret)
+		return ret;
+
+	ret = i2c_write_le8(client, 0x01, 0x00);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(client, 0x0d, 0x00);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(client, 0x13, 0x63);
+	if (ret)
+		return ret;
+	ret = i2c_write_le8(client, 0x13, 0xe3);
+	if (ret)
+		return ret;
+	mdelay(1);
+
+	dev_err(&client->dev, "i2c expander initialized");
+	return 0;
+}
+
+static int i2c_expander_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
+
+static const struct of_device_id i2c_expander_dt_ids[] = {
+	{.compatible = "ti,i2cexp", },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(of, i2c_expander_dt_ids);
+
+static struct i2c_driver i2c_expander_driver = {
+	.driver = {
+		.name = "i2c_expander",
+		.owner = THIS_MODULE,
+		.of_match_table	= i2c_expander_dt_ids,
+	},
+	.probe = i2c_expander_probe,
+	.remove = i2c_expander_remove,
+	.command = i2c_expander_command,
+	.id_table = i2c_expander_id,
+};
+
+static int __init i2c_expander_init(void)
+{
+	return i2c_add_driver(&i2c_expander_driver);
+}
+module_init(i2c_expander_init);
+
+static void __exit i2c_expander_exit(void)
+{
+	i2c_del_driver(&i2c_expander_driver);
+}
+module_exit(i2c_expander_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Nikhil Devshatwar");
-- 
1.7.5.4

