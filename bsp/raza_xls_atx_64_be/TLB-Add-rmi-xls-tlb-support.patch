From b28ca51fbb79a19d291dfb9be451fe8e594c62a7 Mon Sep 17 00:00:00 2001
From: Liu Changhui <changhui.liu@windriver.com>
Date: Fri, 29 Jan 2010 13:27:42 +0800
Subject: [PATCH] TLB: Add rmi xls tlb support

Add XLS's TLB refill, TLB load, TLB store and TLB modify handler support.
 XLR TLS's coherency attribute bit has a little difference so add its private
defination.

source: from RMI SDK1.7

Signed-off-by: shuo.kang <shuo.kang@windriver.com>
---
 arch/mips/lib/Makefile          |    1 +
 arch/mips/mm/tlb-r4k.c          |   31 ++++++++++++++++++++++++++++++-
 arch/mips/mm/tlbex.c            |   33 +++++++++++++++++++++++++++++++++
 include/asm-mips/pgtable-bits.h |    6 ++++++
 include/asm-mips/pgtable.h      |    2 ++
 5 files changed, 72 insertions(+), 1 deletions(-)

diff --git a/arch/mips/lib/Makefile b/arch/mips/lib/Makefile
index b9efb3e..e9340ed 100644
--- a/arch/mips/lib/Makefile
+++ b/arch/mips/lib/Makefile
@@ -28,6 +28,7 @@ obj-$(CONFIG_CPU_SB1)		+= dump_tlb.o
 obj-$(CONFIG_CPU_TX39XX)	+= r3k_dump_tlb.o
 obj-$(CONFIG_CPU_TX49XX)	+= dump_tlb.o
 obj-$(CONFIG_CPU_VR41XX)	+= dump_tlb.o
+obj-$(CONFIG_CPU_PHOENIX)	+= dump_tlb.o
 
 # libgcc-style stuff needed in the kernel
 obj-y += ashldi3.o ashrdi3.o cmpdi2.o lshrdi3.o ucmpdi2.o
diff --git a/arch/mips/mm/tlb-r4k.c b/arch/mips/mm/tlb-r4k.c
index 5ce2fa7..2df68ff 100644
--- a/arch/mips/mm/tlb-r4k.c
+++ b/arch/mips/mm/tlb-r4k.c
@@ -17,6 +17,10 @@
 #include <asm/mmu_context.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+#ifdef CONFIG_RMI_PHOENIX
+#include <asm/rmi/mips-exts.h>
+#endif
+
 
 extern void build_tlb_refill_handler(void);
 
@@ -464,6 +468,26 @@ static int __init set_ntlb(char *str)
 
 __setup("ntlb=", set_ntlb);
 
+#ifdef CONFIG_RMI_PHOENIX
+extern void phoenix_tlb_init(void);
+
+void rmi_tlb_stats_init(void)
+{
+	rmi_write_os_scratch_2(0ULL);
+}
+
+
+/* This is called from smp_call_function (IPI) context */
+extern unsigned long long phnx_tlb_stats[];
+void rmi_update_tlb_stats(void *ignored)
+{
+	int cpu = smp_processor_id();
+
+	phnx_tlb_stats[cpu] = rmi_read_os_scratch_2();
+}
+
+#endif
+
 void __cpuinit tlb_init(void)
 {
 	unsigned int config = read_c0_config();
@@ -496,5 +520,10 @@ void __cpuinit tlb_init(void)
 			printk("Ignoring invalid argument ntlb=%d\n", ntlb);
 	}
 
-	build_tlb_refill_handler();
+#ifdef CONFIG_RMI_PHOENIX
+    rmi_tlb_stats_init();
+#endif
+    build_tlb_refill_handler();
+
+
 }
diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index 0ff0deb..ffd7c39 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -26,6 +26,9 @@
 
 #include <asm/mmu_context.h>
 #include <asm/war.h>
+#ifdef CONFIG_RMI_PHOENIX
+#include <asm/rmi/mips-exts.h>
+#endif
 
 #include "uasm.h"
 
@@ -51,6 +54,11 @@ static inline int __maybe_unused r10000_llsc_war(void)
 	return R10000_LLSC_WAR;
 }
 
+static inline int __maybe_unused rmi_xls_war(void)
+{
+        return RMI_XLS_WAR;
+}
+
 /*
  * Found by experiment: At least some revisions of the 4kc throw under
  * some circumstances a machine check exception, triggered by invalid
@@ -82,6 +90,8 @@ enum label_id {
 	label_nopage_tlbm,
 	label_smp_pgtable_change,
 	label_r3000_write_probe_fail,
+	label_nohpage_tlbs,
+	label_hpage_tlb_leave,
 };
 
 UASM_L_LA(_second_part)
@@ -98,6 +108,8 @@ UASM_L_LA(_nopage_tlbs)
 UASM_L_LA(_nopage_tlbm)
 UASM_L_LA(_smp_pgtable_change)
 UASM_L_LA(_r3000_write_probe_fail)
+UASM_L_LA(_nohpage_tlbs)
+UASM_L_LA(_hpage_tlb_leave)
 
 /*
  * For debug purposes.
@@ -118,6 +130,7 @@ static inline void dump_handler(const u32 *handler, int count)
 /* The only general purpose registers allowed in TLB handlers. */
 #define K0		26
 #define K1		27
+#define ZERO    0
 
 /* Some CP0 registers */
 #define C0_INDEX	0, 0
@@ -125,6 +138,7 @@ static inline void dump_handler(const u32 *handler, int count)
 #define C0_TCBIND	2, 2
 #define C0_ENTRYLO1	3, 0
 #define C0_CONTEXT	4, 0
+#define C0_PAGEMASK 5, 0
 #define C0_BADVADDR	8, 0
 #define C0_ENTRYHI	10, 0
 #define C0_EPC		14, 0
@@ -339,6 +353,9 @@ static void __cpuinit build_tlb_write_entry(u32 **p, struct uasm_label **l,
 			uasm_i_nop(p);
 		tlbw(p);
 		break;
+	case CPU_PHOENIX:
+		tlbw(p);
+		break;
 
 	case CPU_NEVADA:
 		uasm_i_nop(p); /* QED specifies 2 nops hazard */
@@ -690,6 +707,12 @@ static void __cpuinit build_r4000_tlb_refill_handler(void)
 	if (bcm1250_m3_war())
 		build_bcm1250_m3_war(&p, &r);
 
+	if (rmi_xls_war()){
+		uasm_i_dmfc0(&p, K0, OS_SCRATCH_REG2);
+		uasm_i_daddiu(&p, K0, K0, 1);
+		uasm_i_dmtc0(&p, K0, OS_SCRATCH_REG2);
+	}
+
 #ifdef CONFIG_64BIT
 	build_get_pmde64(&p, &l, &r, K0, K1); /* get pmd in K1 */
 #else
@@ -700,6 +723,16 @@ static void __cpuinit build_r4000_tlb_refill_handler(void)
 	build_update_entries(&p, K0, K1);
 	build_tlb_write_entry(&p, &l, &r, tlb_random);
 	uasm_l_leave(&l, p);
+
+	if (rmi_xls_war()){
+	/* this is to avoid split of the table at eret instruction
+	   The code below does a split at 30th instruction.
+	   */
+		if ((p - tlb_handler) == 30){
+			uasm_i_nop(&p);
+		}
+	}
+
 	uasm_i_eret(&p); /* return from trap */
 
 #ifdef CONFIG_64BIT
diff --git a/include/asm-mips/pgtable-bits.h b/include/asm-mips/pgtable-bits.h
index 51b34a4..1efa42b 100644
--- a/include/asm-mips/pgtable-bits.h
+++ b/include/asm-mips/pgtable-bits.h
@@ -101,6 +101,12 @@
 #define _CACHE_CACHABLE_NONCOHERENT (5<<_CACHE_SHIFT)
 #define _CACHE_UNCACHED_ACCELERATED (7<<_CACHE_SHIFT)
 
+#elif defined(CONFIG_CPU_PHOENIX)
+
+#define _CACHE_UNCACHED             (2<<9)
+#define _CACHE_CACHABLE_COW         (3<<9)
+#define _CACHE_CACHABLE_NONCOHERENT (3<<9)
+
 #elif defined(CONFIG_CPU_RM9000)
 
 #define _CACHE_WT		    (0<<_CACHE_SHIFT)
diff --git a/include/asm-mips/pgtable.h b/include/asm-mips/pgtable.h
index 6a0edf7..48aa104 100644
--- a/include/asm-mips/pgtable.h
+++ b/include/asm-mips/pgtable.h
@@ -126,6 +126,8 @@ static inline void pte_clear(struct mm_struct *mm, unsigned long addr, pte_t *pt
 
 #define pte_none(pte)		(!(pte_val(pte) & ~_PAGE_GLOBAL))
 #define pte_present(pte)	(pte_val(pte) & _PAGE_PRESENT)
+/* Just for compilation! */
+#define pte_user(pte)           (pte_val(pte) & _PAGE_PRESENT)
 
 /*
  * Certain architectures need to do special things when pte's
-- 
1.6.0.4

