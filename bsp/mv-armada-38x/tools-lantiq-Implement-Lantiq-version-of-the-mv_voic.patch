From 22fa3c29ea04be573b33bab03a28d4301249c7a1 Mon Sep 17 00:00:00 2001
From: Eran Ben-Avi <benavi@marvell.com>
Date: Thu, 11 Jul 2013 16:31:02 +0300
Subject: [PATCH 0785/1825] tools/lantiq: Implement Lantiq version of the
 mv_voice_tool:

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit cae475082b08207d17d1940bedafe5eadf3d7b07

	Tests Implemented:
        - Start ring
        - Stop ring
        - SW dial tone
        - Self echo
        - Loopback two local phones
        - Multiple local phone pairs loopback

	Other test was abandoned as the required functionality was missing
	in the Lantiq DuSLIC-xT driver.

Change-Id: I8153502bfde4a93d3df36c7aa5d63453ee31ac28
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 tools/voice/lantiq/kernel/Makefile        |   47 +-
 tools/voice/lantiq/kernel/libtapi.c       |  618 ++++++++
 tools/voice/lantiq/kernel/libtapi.h       |  333 ++++
 tools/voice/lantiq/kernel/mv_voice_tool.c | 1002 +++----------
 tools/voice/lantiq/kernel/mv_voice_tool.h |   84 -
 tools/voice/lantiq/kernel/profile_79238.c | 1248 ---------------
 tools/voice/lantiq/kernel/profile_79238.h |   82 -
 tools/voice/lantiq/kernel/profile_88266.c |  644 --------
 tools/voice/lantiq/kernel/profile_88266.h |   97 --
 tools/voice/lantiq/kernel/profile_89116.c | 2412 -----------------------------
 tools/voice/lantiq/kernel/profile_89116.h |  267 ----
 tools/voice/lantiq/kernel/vpapi_lib.c     |  432 ------
 tools/voice/lantiq/kernel/vpapi_lib.h     |  102 --
 13 files changed, 1147 insertions(+), 6221 deletions(-)
 create mode 100644 tools/voice/lantiq/kernel/libtapi.c
 create mode 100644 tools/voice/lantiq/kernel/libtapi.h
 delete mode 100644 tools/voice/lantiq/kernel/mv_voice_tool.h
 delete mode 100644 tools/voice/lantiq/kernel/profile_79238.c
 delete mode 100644 tools/voice/lantiq/kernel/profile_79238.h
 delete mode 100644 tools/voice/lantiq/kernel/profile_88266.c
 delete mode 100644 tools/voice/lantiq/kernel/profile_88266.h
 delete mode 100644 tools/voice/lantiq/kernel/profile_89116.c
 delete mode 100644 tools/voice/lantiq/kernel/profile_89116.h
 delete mode 100644 tools/voice/lantiq/kernel/vpapi_lib.c
 delete mode 100644 tools/voice/lantiq/kernel/vpapi_lib.h

diff --git a/tools/voice/lantiq/kernel/Makefile b/tools/voice/lantiq/kernel/Makefile
index 1b500f5..ad65549 100644
--- a/tools/voice/lantiq/kernel/Makefile
+++ b/tools/voice/lantiq/kernel/Makefile
@@ -7,7 +7,8 @@ endif
 
 include $(KSRC)/.config
 
-CFLAGS  := $(EXTRA_CFLAGS)
+CFLAGS := $(EXTRA_CFLAGS)
+CFLAGS += -I$(KSRC)/arch/arm/plat-feroceon/mv_drivers_lsp/mv_phone
 
 ifdef CONFIG_CPU_BIG_ENDIAN
 CFLAGS  += -DCONFIG_CPU_BIG_ENDIAN
@@ -17,39 +18,21 @@ CC := $(CROSS_COMPILE)gcc
 LD := $(CROSS_COMPILE)ld
 AR := $(CROSS_COMPILE)ar
 
-#CFLAGS += -I$(KSRC)/tools/voice/
-
-ifeq ($(CONFIG_ZARLINK_SLIC_SUPPORT),y)
-TARGETS += vpapi_lib.o
-LIBS := libvpapi.a
-TOOL := mv_voice_tool.c
-CFLAGS += -I$(KSRC)/arch/arm/plat-feroceon/mv_hal/voiceband/slic/zarlink/arch_marvell/
-CFLAGS += -I$(KSRC)/arch/arm/plat-feroceon/mv_drivers_lsp/mv_phone/
-ifeq ($(CONFIG_ZARLINK_SLIC_VE792),y)
- CFLAGS += -I$(KSRC)/arch/arm/plat-feroceon/mv_hal/voiceband/slic/zarlink/vp792_api_lib/includes/
- CFLAGS += -DZARLINK_SLIC_VE792
- PROFILE = profile_79238.c
-endif
-ifeq ($(CONFIG_ZARLINK_SLIC_VE880),y)
- CFLAGS += -I$(KSRC)/arch/arm/plat-feroceon/mv_hal/voiceband/slic/zarlink/api_lib/includes/
- CFLAGS += -DZARLINK_SLIC_VE880
- PROFILE = profile_88266.c
-endif
-ifeq ($(CONFIG_ZARLINK_SLIC_VE890),y)
- CFLAGS += -I$(KSRC)/arch/arm/plat-feroceon/mv_hal/voiceband/slic/zarlink/api_lib/includes/
- CFLAGS += -DZARLINK_SLIC_VE890
- PROFILE = profile_89116.c
-endif
+ifeq ($(CONFIG_LANTIQ_SLIC_SUPPORT),y)
+LIBTAPI := libtapi.o
+LIBS := libtapi.a
+TOOL := mv_voice_tool
+
+all:	$(TOOL)
 
-CFLAGS += -I$(KSRC)/arch/arm/plat-feroceon/mv_drivers_lsp/mv_phone/test/
+$(TOOL): $(TOOL).c $(LIBS)
+	$(CC) $(CFLAGS) -static -o mv_voice_tool $^
 
-all:
-	$(CC) $(CFLAGS) -static -c vpapi_lib.c -o $(TARGETS)
-	$(AR) rcs $(LIBS) $(TARGETS)
-	$(CC) $(CFLAGS) -static $(PROFILE) $(TOOL) -L. $(LIBS) -o mv_voice_tool
+libtapi.o: libtapi.c
+	$(CC) $(CFLAGS) -static -c -o $@ $<
 
-mv_voice_tool: $(PROFILE) $(TOOL)
-	$(CC) $(CFLAGS) -static $(PROFILE) $(TOOL) -L. $(LIBS) -o mv_voice_tool
+libtapi.a: $(LIBTAPI)
+	$(AR) rcs $@ $^
 
 clean:
 	rm -f *.o *.a mv_voice_tool
@@ -57,4 +40,4 @@ clean:
                 (cd $$subdir && $(MAKE) $@) || exit 1; \
         done
 
-endif #CONFIG_ZARLINK_SLIC_SUPPORT
+endif #CONFIG_LANTIQ_SLIC_SUPPORT
diff --git a/tools/voice/lantiq/kernel/libtapi.c b/tools/voice/lantiq/kernel/libtapi.c
new file mode 100644
index 0000000..d74d526
--- /dev/null
+++ b/tools/voice/lantiq/kernel/libtapi.c
@@ -0,0 +1,618 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+	    this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+	notice, this list of conditions and the following disclaimer in the
+	documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+	used to endorse or promote products derived from this software without
+	specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+#include <stdio.h>
+#include <malloc.h>
+#include <fcntl.h>
+#include <poll.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
+#include <ifx_types.h>
+#include <drv_dxt_io.h>
+#include <drv_tapi_io.h>
+
+#include "libtapi.h"
+
+#define ARRAY_SIZE(array)	(sizeof(array) / sizeof((array)[0]))
+
+struct tapi_handle {
+	int	fd;
+};
+
+static const IFX_TAPI_EVENT_ID_t tapi_event_tanslation_table[] = {
+	[TAPI_EVENT_NONE]		= IFX_TAPI_EVENT_NONE,
+	[TAPI_EVENT_IO_GENERAL_NONE]	= IFX_TAPI_EVENT_IO_GENERAL_NONE,
+	[TAPI_EVENT_IO_INTERRUPT_NONE]	= IFX_TAPI_EVENT_IO_INTERRUPT_NONE,
+	[TAPI_EVENT_FXS_NONE]		= IFX_TAPI_EVENT_FXS_NONE,
+	[TAPI_EVENT_FXS_RING]		= IFX_TAPI_EVENT_FXS_RING,
+	[TAPI_EVENT_FXS_RINGBURST_END]	= IFX_TAPI_EVENT_FXS_RINGBURST_END,
+	[TAPI_EVENT_FXS_RINGING_END]	= IFX_TAPI_EVENT_FXS_RINGING_END,
+	[TAPI_EVENT_FXS_ONHOOK]		= IFX_TAPI_EVENT_FXS_ONHOOK,
+	[TAPI_EVENT_FXS_OFFHOOK]	= IFX_TAPI_EVENT_FXS_OFFHOOK,
+	[TAPI_EVENT_FXS_FLASH]		= IFX_TAPI_EVENT_FXS_FLASH,
+	[TAPI_EVENT_FXS_ONHOOK_INT]	= IFX_TAPI_EVENT_FXS_ONHOOK_INT,
+	[TAPI_EVENT_FXS_OFFHOOK_INT]	= IFX_TAPI_EVENT_FXS_OFFHOOK_INT,
+	[TAPI_EVENT_CONTMEASUREMENT]	= IFX_TAPI_EVENT_CONTMEASUREMENT,
+	[TAPI_EVENT_FXS_RAW_ONHOOK]	= IFX_TAPI_EVENT_FXS_RAW_ONHOOK,
+	[TAPI_EVENT_FXS_RAW_OFFHOOK]	= IFX_TAPI_EVENT_FXS_RAW_OFFHOOK,
+	[TAPI_EVENT_FXS_LINE_MODE]	= IFX_TAPI_EVENT_FXS_LINE_MODE,
+	[TAPI_EVENT_FXS_COMTEL_END]	= IFX_TAPI_EVENT_FXS_COMTEL_END,
+	[TAPI_EVENT_FXO_NONE]		= IFX_TAPI_EVENT_FXO_NONE,
+	[TAPI_EVENT_FXO_BAT_FEEDED]	= IFX_TAPI_EVENT_FXO_BAT_FEEDED,
+	[TAPI_EVENT_FXO_BAT_DROPPED]	= IFX_TAPI_EVENT_FXO_BAT_DROPPED,
+	[TAPI_EVENT_FXO_POLARITY]	= IFX_TAPI_EVENT_FXO_POLARITY,
+	[TAPI_EVENT_FXO_RING_START]	= IFX_TAPI_EVENT_FXO_RING_START,
+	[TAPI_EVENT_FXO_RING_STOP]	= IFX_TAPI_EVENT_FXO_RING_STOP,
+	[TAPI_EVENT_FXO_OSI]		= IFX_TAPI_EVENT_FXO_OSI,
+	[TAPI_EVENT_FXO_APOH]		= IFX_TAPI_EVENT_FXO_APOH,
+	[TAPI_EVENT_FXO_NOPOH]		= IFX_TAPI_EVENT_FXO_NOPOH,
+	[TAPI_EVENT_LT_GR909_RDY]	= IFX_TAPI_EVENT_LT_GR909_RDY,
+	[TAPI_EVENT_NLT_END]		= IFX_TAPI_EVENT_NLT_END,
+	[TAPI_EVENT_LINE_MEASURE_CAPACITANCE_RDY] =
+			IFX_TAPI_EVENT_LINE_MEASURE_CAPACITANCE_RDY,
+	[TAPI_EVENT_LINE_MEASURE_CAPACITANCE_RDY_INT] =
+			IFX_TAPI_EVENT_LINE_MEASURE_CAPACITANCE_RDY_INT,
+	[TAPI_EVENT_LINE_MEASURE_CAPACITANCE_START_INT] =
+			IFX_TAPI_EVENT_LINE_MEASURE_CAPACITANCE_START_INT,
+	[TAPI_EVENT_LINE_MEASURE_CAPACITANCE_GND_RDY] =
+			IFX_TAPI_EVENT_LINE_MEASURE_CAPACITANCE_GND_RDY,
+	[TAPI_EVENT_PULSE_NONE]	= IFX_TAPI_EVENT_PULSE_NONE,
+	[TAPI_EVENT_PULSE_DIGIT]	= IFX_TAPI_EVENT_PULSE_DIGIT,
+	[TAPI_EVENT_PULSE_START]	= IFX_TAPI_EVENT_PULSE_START,
+	[TAPI_EVENT_DTMF_NONE]		= IFX_TAPI_EVENT_DTMF_NONE,
+	[TAPI_EVENT_DTMF_DIGIT]		= IFX_TAPI_EVENT_DTMF_DIGIT,
+	[TAPI_EVENT_DTMF_END]		= IFX_TAPI_EVENT_DTMF_END,
+	[TAPI_EVENT_CALIBRATION_NONE]	= IFX_TAPI_EVENT_CALIBRATION_NONE,
+	[TAPI_EVENT_CALIBRATION_END]	= IFX_TAPI_EVENT_CALIBRATION_END,
+	[TAPI_EVENT_CALIBRATION_END_INT] =
+			IFX_TAPI_EVENT_CALIBRATION_END_INT,
+	[TAPI_EVENT_CALIBRATION_END_SINT] =
+			IFX_TAPI_EVENT_CALIBRATION_END_SINT,
+	[TAPI_EVENT_METERING_NONE]	= IFX_TAPI_EVENT_METERING_NONE,
+	[TAPI_EVENT_METERING_END]	= IFX_TAPI_EVENT_METERING_END,
+	[TAPI_EVENT_CID_TX_NONE]	= IFX_TAPI_EVENT_CID_TX_NONE,
+	[TAPI_EVENT_CID_TX_SEQ_START]	= IFX_TAPI_EVENT_CID_TX_SEQ_START,
+	[TAPI_EVENT_CID_TX_SEQ_END]	= IFX_TAPI_EVENT_CID_TX_SEQ_END,
+	[TAPI_EVENT_CID_TX_INFO_START]	= IFX_TAPI_EVENT_CID_TX_INFO_START,
+	[TAPI_EVENT_CID_TX_INFO_END]	= IFX_TAPI_EVENT_CID_TX_INFO_END,
+	[TAPI_EVENT_CID_TX_NOACK_ERR]	= IFX_TAPI_EVENT_CID_TX_NOACK_ERR,
+	[TAPI_EVENT_CID_TX_RINGCAD_ERR]	= IFX_TAPI_EVENT_CID_TX_RINGCAD_ERR,
+	[TAPI_EVENT_CID_TX_UNDERRUN_ERR] =
+			IFX_TAPI_EVENT_CID_TX_UNDERRUN_ERR,
+	[TAPI_EVENT_CID_TX_NOACK2_ERR]	= IFX_TAPI_EVENT_CID_TX_NOACK2_ERR,
+	[TAPI_EVENT_CIDSM_END]		= IFX_TAPI_EVENT_CIDSM_END,
+	[TAPI_EVENT_CID_TX_END]		= IFX_TAPI_EVENT_CID_TX_END,
+	[TAPI_EVENT_CID_RX_NONE]	= IFX_TAPI_EVENT_CID_RX_NONE,
+	[TAPI_EVENT_CID_RX_CAS]		= IFX_TAPI_EVENT_CID_RX_CAS,
+	[TAPI_EVENT_CID_RX_END]		= IFX_TAPI_EVENT_CID_RX_END,
+	[TAPI_EVENT_CID_RX_CD]		= IFX_TAPI_EVENT_CID_RX_CD,
+	[TAPI_EVENT_CID_RX_ERROR_READ]	= IFX_TAPI_EVENT_CID_RX_ERROR_READ,
+	[TAPI_EVENT_CID_RX_ERROR1]	= IFX_TAPI_EVENT_CID_RX_ERROR1,
+	[TAPI_EVENT_CID_RX_ERROR2]	= IFX_TAPI_EVENT_CID_RX_ERROR2,
+	[TAPI_EVENT_TONE_GEN_NONE]	= IFX_TAPI_EVENT_TONE_GEN_NONE,
+	[TAPI_EVENT_TONE_GEN_BUSY]	= IFX_TAPI_EVENT_TONE_GEN_BUSY,
+	[TAPI_EVENT_TONE_GEN_END]	= IFX_TAPI_EVENT_TONE_GEN_END,
+	[TAPI_EVENT_TONE_GEN_END_RAW]	= IFX_TAPI_EVENT_TONE_GEN_END_RAW,
+	[TAPI_EVENT_TONE_DET_NONE]	= IFX_TAPI_EVENT_TONE_DET_NONE,
+	[TAPI_EVENT_TONE_DET_RECEIVE]	= IFX_TAPI_EVENT_TONE_DET_RECEIVE,
+	[TAPI_EVENT_TONE_DET_TRANSMIT]	= IFX_TAPI_EVENT_TONE_DET_TRANSMIT,
+	[TAPI_EVENT_TONE_DET_CPT]	= IFX_TAPI_EVENT_TONE_DET_CPT,
+	[TAPI_EVENT_TONE_DET_CPT_END]	= IFX_TAPI_EVENT_TONE_DET_CPT_END,
+	[TAPI_EVENT_TONE_DET_MF_R2_START] =
+			IFX_TAPI_EVENT_TONE_DET_MF_R2_START,
+	[TAPI_EVENT_TONE_DET_MF_R2_END]	= IFX_TAPI_EVENT_TONE_DET_MF_R2_END,
+	[TAPI_EVENT_FAXMODEM_NONE]	= IFX_TAPI_EVENT_FAXMODEM_NONE,
+	[TAPI_EVENT_FAXMODEM_DIS]	= IFX_TAPI_EVENT_FAXMODEM_DIS,
+	[TAPI_EVENT_FAXMODEM_CED]	= IFX_TAPI_EVENT_FAXMODEM_CED,
+	[TAPI_EVENT_FAXMODEM_PR]	= IFX_TAPI_EVENT_FAXMODEM_PR,
+	[TAPI_EVENT_FAXMODEM_AM]	= IFX_TAPI_EVENT_FAXMODEM_AM,
+	[TAPI_EVENT_FAXMODEM_CNGFAX]	= IFX_TAPI_EVENT_FAXMODEM_CNGFAX,
+	[TAPI_EVENT_FAXMODEM_CNGMOD]	= IFX_TAPI_EVENT_FAXMODEM_CNGMOD,
+	[TAPI_EVENT_FAXMODEM_V21L]	= IFX_TAPI_EVENT_FAXMODEM_V21L,
+	[TAPI_EVENT_FAXMODEM_V18A]	= IFX_TAPI_EVENT_FAXMODEM_V18A,
+	[TAPI_EVENT_FAXMODEM_V27]	= IFX_TAPI_EVENT_FAXMODEM_V27,
+	[TAPI_EVENT_FAXMODEM_BELL]	= IFX_TAPI_EVENT_FAXMODEM_BELL,
+	[TAPI_EVENT_FAXMODEM_V22]	= IFX_TAPI_EVENT_FAXMODEM_V22,
+	[TAPI_EVENT_FAXMODEM_V22ORBELL]	= IFX_TAPI_EVENT_FAXMODEM_V22ORBELL,
+	[TAPI_EVENT_FAXMODEM_V32AC]	= IFX_TAPI_EVENT_FAXMODEM_V32AC,
+	[TAPI_EVENT_FAXMODEM_V8BIS]	= IFX_TAPI_EVENT_FAXMODEM_V8BIS,
+	[TAPI_EVENT_FAXMODEM_HOLDEND]	= IFX_TAPI_EVENT_FAXMODEM_HOLDEND,
+	[TAPI_EVENT_FAXMODEM_CEDEND]	= IFX_TAPI_EVENT_FAXMODEM_CEDEND,
+	[TAPI_EVENT_FAXMODEM_CAS_BELL]	= IFX_TAPI_EVENT_FAXMODEM_CAS_BELL,
+	[TAPI_EVENT_FAXMODEM_V21H]	= IFX_TAPI_EVENT_FAXMODEM_V21H,
+	[TAPI_EVENT_FAXMODEM_VMD]	= IFX_TAPI_EVENT_FAXMODEM_VMD,
+	[TAPI_EVENT_LIN_NONE]		= IFX_TAPI_EVENT_LIN_NONE,
+	[TAPI_EVENT_LIN_UNDERFLOW]	= IFX_TAPI_EVENT_LIN_UNDERFLOW,
+	[TAPI_EVENT_COD_NONE]		= IFX_TAPI_EVENT_COD_NONE,
+	[TAPI_EVENT_COD_DEC_CHG]	= IFX_TAPI_EVENT_COD_DEC_CHG,
+	[TAPI_EVENT_COD_ROOM_NOISE]	= IFX_TAPI_EVENT_COD_ROOM_NOISE,
+	[TAPI_EVENT_COD_ROOM_SILENCE]	= IFX_TAPI_EVENT_COD_ROOM_SILENCE,
+	[TAPI_EVENT_COD_ANNOUNCE_END]	= IFX_TAPI_EVENT_COD_ANNOUNCE_END,
+	[TAPI_EVENT_COD_MOS]		= IFX_TAPI_EVENT_COD_MOS,
+	[TAPI_EVENT_RTP_NONE]		= IFX_TAPI_EVENT_RTP_NONE,
+	[TAPI_EVENT_RTP_FIRST]		= IFX_TAPI_EVENT_RTP_FIRST,
+	[TAPI_EVENT_RTP_EXT_BROKEN]	= IFX_TAPI_EVENT_RTP_EXT_BROKEN,
+	[TAPI_EVENT_RTP_EXT_SSRC_CHANGED] =
+			IFX_TAPI_EVENT_RTP_EXT_SSRC_CHANGED,
+	[TAPI_EVENT_AAL_NONE]		= IFX_TAPI_EVENT_AAL_NONE,
+	[TAPI_EVENT_RFC2833_NONE]	= IFX_TAPI_EVENT_RFC2833_NONE,
+	[TAPI_EVENT_RFC2833_EVENT]	= IFX_TAPI_EVENT_RFC2833_EVENT,
+	[TAPI_EVENT_KPI_NONE]		= IFX_TAPI_EVENT_KPI_NONE,
+	[TAPI_EVENT_KPI_INGRESS_FIFO_FULL] =
+			IFX_TAPI_EVENT_KPI_INGRESS_FIFO_FULL,
+	[TAPI_EVENT_KPI_SOCKET_FAILURE]	= IFX_TAPI_EVENT_KPI_SOCKET_FAILURE,
+	[TAPI_EVENT_T38_NONE]		= IFX_TAPI_EVENT_T38_NONE,
+	[TAPI_EVENT_T38_ERROR_GEN]	= IFX_TAPI_EVENT_T38_ERROR_GEN,
+	[TAPI_EVENT_T38_ERROR_OVLD]	= IFX_TAPI_EVENT_T38_ERROR_OVLD,
+	[TAPI_EVENT_T38_ERROR_READ]	= IFX_TAPI_EVENT_T38_ERROR_READ,
+	[TAPI_EVENT_T38_ERROR_WRITE]	= IFX_TAPI_EVENT_T38_ERROR_WRITE,
+	[TAPI_EVENT_T38_ERROR_DATA]	= IFX_TAPI_EVENT_T38_ERROR_DATA,
+	[TAPI_EVENT_T38_ERROR_SETUP]	= IFX_TAPI_EVENT_T38_ERROR_SETUP,
+	[TAPI_EVENT_T38_FDP_REQ]	= IFX_TAPI_EVENT_T38_FDP_REQ,
+	[TAPI_EVENT_T38_STATE_CHANGE]	= IFX_TAPI_EVENT_T38_STATE_CHANGE,
+	[TAPI_EVENT_JB_NONE]		= IFX_TAPI_EVENT_JB_NONE,
+	[TAPI_EVENT_DOWNLOAD_NONE]	= IFX_TAPI_EVENT_DOWNLOAD_NONE,
+	[TAPI_EVENT_INFO_NONE]		= IFX_TAPI_EVENT_INFO_NONE,
+	[TAPI_EVENT_INFO_MBX_CONGESTION] =
+			IFX_TAPI_EVENT_INFO_MBX_CONGESTION,
+	[TAPI_EVENT_DEBUG_NONE]		= IFX_TAPI_EVENT_DEBUG_NONE,
+	[TAPI_EVENT_DEBUG_CERR]		= IFX_TAPI_EVENT_DEBUG_CERR,
+	[TAPI_EVENT_GPIO_HL]		= IFX_TAPI_EVENT_GPIO_HL,
+	[TAPI_EVENT_GPIO_LH]		= IFX_TAPI_EVENT_GPIO_LH,
+	[TAPI_EVENT_LL_DRIVER_NONE]	= IFX_TAPI_EVENT_LL_DRIVER_NONE,
+	[TAPI_EVENT_LL_DRIVER_WD_FAIL]	= IFX_TAPI_EVENT_LL_DRIVER_WD_FAIL,
+	[TAPI_EVENT_FAULT_GENERAL_NONE]	= IFX_TAPI_EVENT_FAULT_GENERAL_NONE,
+	[TAPI_EVENT_FAULT_GENERAL]	= IFX_TAPI_EVENT_FAULT_GENERAL,
+	[TAPI_EVENT_FAULT_GENERAL_CHINFO] =
+			IFX_TAPI_EVENT_FAULT_GENERAL_CHINFO,
+	[TAPI_EVENT_FAULT_GENERAL_DEVINFO] =
+			IFX_TAPI_EVENT_FAULT_GENERAL_DEVINFO,
+	[TAPI_EVENT_TYPE_FAULT_GENERAL]	= IFX_TAPI_EVENT_TYPE_FAULT_GENERAL,
+	[TAPI_EVENT_FAULT_LINE_NONE]	= IFX_TAPI_EVENT_FAULT_LINE_NONE,
+	[TAPI_EVENT_FAULT_LINE_GK_POS]	= IFX_TAPI_EVENT_FAULT_LINE_GK_POS,
+	[TAPI_EVENT_FAULT_LINE_GK_NEG]	= IFX_TAPI_EVENT_FAULT_LINE_GK_NEG,
+	[TAPI_EVENT_FAULT_LINE_GK_LOW]	= IFX_TAPI_EVENT_FAULT_LINE_GK_LOW,
+	[TAPI_EVENT_FAULT_LINE_GK_HIGH]	= IFX_TAPI_EVENT_FAULT_LINE_GK_HIGH,
+	[TAPI_EVENT_FAULT_LINE_OVERTEMP] =
+			IFX_TAPI_EVENT_FAULT_LINE_OVERTEMP,
+	[TAPI_EVENT_FAULT_LINE_OVERCURRENT] =
+			IFX_TAPI_EVENT_FAULT_LINE_OVERCURRENT,
+	[TAPI_EVENT_FAULT_LINE_GK_LOW_INT] =
+			IFX_TAPI_EVENT_FAULT_LINE_GK_LOW_INT,
+	[TAPI_EVENT_FAULT_LINE_GK_HIGH_INT] =
+			IFX_TAPI_EVENT_FAULT_LINE_GK_HIGH_INT,
+	[TAPI_EVENT_FAULT_LINE_GK_LOW_END] =
+			IFX_TAPI_EVENT_FAULT_LINE_GK_LOW_END,
+	[TAPI_EVENT_FAULT_LINE_GK_HIGH_END] =
+			IFX_TAPI_EVENT_FAULT_LINE_GK_HIGH_END,
+	[TAPI_EVENT_FAULT_LINE_OVERTEMP_END] =
+			IFX_TAPI_EVENT_FAULT_LINE_OVERTEMP_END,
+	[TAPI_EVENT_FAULT_HW_NONE]	= IFX_TAPI_EVENT_FAULT_HW_NONE,
+	[TAPI_EVENT_FAULT_HW_SPI_ACCESS] =
+			IFX_TAPI_EVENT_FAULT_HW_SPI_ACCESS,
+	[TAPI_EVENT_FAULT_HW_CLOCK_FAIL] =
+			IFX_TAPI_EVENT_FAULT_HW_CLOCK_FAIL,
+	[TAPI_EVENT_FAULT_HW_CLOCK_FAIL_END] =
+			IFX_TAPI_EVENT_FAULT_HW_CLOCK_FAIL_END,
+	[TAPI_EVENT_FAULT_HW_FAULT]	= IFX_TAPI_EVENT_FAULT_HW_FAULT,
+	[TAPI_EVENT_FAULT_HW_SYNC]	= IFX_TAPI_EVENT_FAULT_HW_SYNC,
+	[TAPI_EVENT_FAULT_HW_RESET]	= IFX_TAPI_EVENT_FAULT_HW_RESET,
+	[TAPI_EVENT_FAULT_HW_SSI_ERR]	= IFX_TAPI_EVENT_FAULT_HW_SSI_ERR,
+	[TAPI_EVENT_FAULT_HW_SSI_ERR_END] =
+			IFX_TAPI_EVENT_FAULT_HW_SSI_ERR_END,
+	[TAPI_EVENT_FAULT_FW_NONE]	= IFX_TAPI_EVENT_FAULT_FW_NONE,
+	[TAPI_EVENT_FAULT_FW_EBO_UF]	= IFX_TAPI_EVENT_FAULT_FW_EBO_UF,
+	[TAPI_EVENT_FAULT_FW_EBO_OF]	= IFX_TAPI_EVENT_FAULT_FW_EBO_OF,
+	[TAPI_EVENT_FAULT_FW_CBO_UF]	= IFX_TAPI_EVENT_FAULT_FW_CBO_UF,
+	[TAPI_EVENT_FAULT_FW_CBO_OF]	= IFX_TAPI_EVENT_FAULT_FW_CBO_OF,
+	[TAPI_EVENT_FAULT_FW_CBI_OF]	= IFX_TAPI_EVENT_FAULT_FW_CBI_OF,
+	[TAPI_EVENT_FAULT_FW_WATCHDOG]	= IFX_TAPI_EVENT_FAULT_FW_WATCHDOG,
+	[TAPI_EVENT_FAULT_SW_NONE]	= IFX_TAPI_EVENT_FAULT_SW_NONE,
+	[TAPI_EVENT_FAULT_HDLC_NONE]	= IFX_TAPI_EVENT_FAULT_HDLC_NONE,
+	[TAPI_EVENT_FAULT_HDLC_FRAME_LENGTH] =
+			IFX_TAPI_EVENT_FAULT_HDLC_FRAME_LENGTH,
+	[TAPI_EVENT_FAULT_HDLC_NO_KPI_PATH] =
+			IFX_TAPI_EVENT_FAULT_HDLC_NO_KPI_PATH,
+	[TAPI_EVENT_FAULT_HDLC_TX_OVERFLOW] =
+			IFX_TAPI_EVENT_FAULT_HDLC_TX_OVERFLOW,
+	[TAPI_EVENT_FAULT_HDLC_DISABLED] =
+			IFX_TAPI_EVENT_FAULT_HDLC_DISABLED,
+};
+
+tapi_handle_t
+tapi_open(const char *tapidev)
+{
+	tapi_handle_t th;
+
+	th = malloc(sizeof(tapi_handle_t));
+	if (th == NULL)
+		return (NULL);
+
+	th->fd = open(tapidev, O_RDWR);
+	if (th->fd < 0) {
+		free(th);
+		return (NULL);
+	}
+
+	return (th);
+}
+
+void
+tapi_close(tapi_handle_t th)
+{
+	close(th->fd);
+	free(th);
+}
+
+int
+tapi_basic_init(tapi_handle_t th, unsigned int device, unsigned int irq)
+{
+	DXT_BasicDeviceInit_t binit;
+
+	binit.dev	= device;
+	binit.nIrqNum	= irq;
+	binit.nCfIrqNum	= 0;
+
+	return (ioctl(th->fd, FIO_DXT_BASICDEV_INIT, &binit));
+}
+
+int
+tapi_fw_download(tapi_handle_t th, unsigned int device, const char *fwfile)
+{
+	DXT_FW_Download_t fwdl;
+	off_t fwsize;
+	int fwh, r;
+	void *fw;
+
+	fwh = open(fwfile, O_RDONLY);
+	if (fwh < 0)
+		return (-1);
+
+	fwsize = lseek(fwh, 0, SEEK_END);
+	if (fwsize == -1) {
+		close(fwh);
+		return (-1);
+	}
+
+	fw = mmap(NULL, fwsize, PROT_READ, MAP_SHARED, fwh, 0);
+	if (fw == MAP_FAILED) {
+		close(fwh);
+		return (-1);
+	}
+
+	fwdl.dev	= device;
+	fwdl.nEdspFlags	= DXT_NO_ASDSP_DWLD;
+	fwdl.pPRAMfw	= fw;
+	fwdl.pram_size	= fwsize;
+	r = ioctl(th->fd, FIO_DXT_FW_DOWNLOAD, &fwdl);
+
+	munmap(fw, fwsize);
+	close(fwh);
+
+	return (r);
+}
+
+int
+tapi_dev_start(tapi_handle_t th, unsigned int device)
+{
+	IFX_TAPI_DEV_START_CFG_t devstart;
+
+	devstart.dev	= device;
+	devstart.nMode	= IFX_TAPI_INIT_MODE_DEFAULT;
+
+	return (ioctl(th->fd, IFX_TAPI_DEV_START, &devstart));
+}
+
+int
+tapi_bbd_download(tapi_handle_t th, unsigned int device, unsigned int channel,
+							const char *bbdfile)
+{
+	DXT_BBD_Download_t bbddl;
+	off_t bbdsize;
+	int bbdh, r;
+	void *bbd;
+
+	bbdh = open(bbdfile, O_RDONLY);
+	if (bbdh < 0)
+		return (-1);
+
+	bbdsize = lseek(bbdh, 0, SEEK_END);
+	if (bbdsize == -1) {
+		close(bbdh);
+		return (-1);
+	}
+
+	bbd = mmap(NULL, bbdsize, PROT_READ, MAP_SHARED, bbdh, 0);
+	if (bbd == MAP_FAILED) {
+		close(bbdh);
+		return (-1);
+	}
+
+	bbddl.dev	= device;
+	bbddl.buf	= bbd;
+	bbddl.size	= bbdsize;
+	if (channel == -1) {
+		bbddl.ch = 0;
+		bbddl.bBroadcast= 1;
+	} else {
+		bbddl.ch = channel;
+		bbddl.bBroadcast= 0;
+	}
+	r = ioctl(th->fd, FIO_DXT_BBD_DOWNLOAD, &bbddl);
+
+	munmap(bbd, bbdsize);
+	close(bbdh);
+
+	return (r);
+}
+
+int
+tapi_line_type_set(tapi_handle_t th, unsigned int device, unsigned int channel,
+						     tapi_line_type_t linetype)
+{
+	IFX_TAPI_LINE_TYPE_CFG_t lt;
+	const IFX_TAPI_LINE_TYPE_t ltmap[] = {
+		[TAPI_LINE_TYPE_FXS_NB]		= IFX_TAPI_LINE_TYPE_FXS_NB,
+		[TAPI_LINE_TYPE_FXS_WB]		= IFX_TAPI_LINE_TYPE_FXS_WB,
+		[TAPI_LINE_TYPE_FXS_AUTO]	= IFX_TAPI_LINE_TYPE_FXS_AUTO,
+		[TAPI_LINE_TYPE_FXO_NB]		= IFX_TAPI_LINE_TYPE_FXO_NB,
+	};
+
+	lt.dev		= device;
+	lt.ch		= channel;
+	lt.lineType	= ltmap[linetype];
+	lt.nDaaCh	= 0;
+
+	return (ioctl(th->fd, IFX_TAPI_LINE_TYPE_SET, &lt));
+}
+
+int
+tapi_line_feed_set(tapi_handle_t th, unsigned int device, unsigned int channel,
+						     tapi_line_feed_t linefeed)
+{
+	IFX_TAPI_LINE_FEED_t lf;
+	const lfmap[] = {
+		[TAPI_LINE_FEED_ACTIVE]		= IFX_TAPI_LINE_FEED_ACTIVE,
+		[TAPI_LINE_FEED_ACTIVE_REV]	= IFX_TAPI_LINE_FEED_ACTIVE_REV,
+		[TAPI_LINE_FEED_STANDBY]	= IFX_TAPI_LINE_FEED_STANDBY,
+		[TAPI_LINE_FEED_HIGH_IMPEDANCE]	= IFX_TAPI_LINE_FEED_HIGH_IMPEDANCE,
+		[TAPI_LINE_FEED_DISABLED]	= IFX_TAPI_LINE_FEED_DISABLED,
+	};
+
+	lf.dev		= device;
+	lf.ch		= channel;
+	lf.lineMode	= lfmap[linefeed];
+
+	return (ioctl(th->fd, IFX_TAPI_LINE_FEED_SET, &lf));
+}
+
+int
+tapi_line_calibrate(tapi_handle_t th, unsigned int device, unsigned int channel)
+{
+	IFX_TAPI_CALIBRATION_t cal;
+
+	cal.dev		= device;
+	cal.ch		= channel;
+
+	return (ioctl(th->fd, IFX_TAPI_CALIBRATION_START, &cal));
+}
+
+int
+tapi_ring_start(tapi_handle_t th, unsigned int device, unsigned int channel)
+{
+	IFX_TAPI_RING_t ring;
+
+	ring.dev	= device;
+	ring.ch		= channel;
+
+	return (ioctl(th->fd, IFX_TAPI_RING_START, &ring));
+}
+
+int
+tapi_ring_stop(tapi_handle_t th, unsigned int device, unsigned int channel)
+{
+	IFX_TAPI_RING_t ring;
+
+	ring.dev	= device;
+	ring.ch		= channel;
+
+	return (ioctl(th->fd, IFX_TAPI_RING_STOP, &ring));
+}
+
+tapi_line_hook_t
+tapi_hook_status_get(tapi_handle_t th, unsigned int device, unsigned int channel)
+{
+	IFX_TAPI_LINE_HOOK_STATUS_GET_t hook;
+	const IFX_TAPI_LINE_HOOK_t hmap[] = {
+		[IFX_TAPI_LINE_ONHOOK]	= TAPI_LINE_ONHOOK,
+		[IFX_TAPI_LINE_OFFHOOK]	= TAPI_LINE_OFFHOOK,
+	};
+	int r;
+
+	hook.dev	= device;
+	hook.ch		= channel;
+	r = ioctl(th->fd, IFX_TAPI_LINE_HOOK_STATUS_GET, &hook);
+	if (r < 0)
+		return (r);
+
+	return (hmap[hook.hookMode]);
+}
+
+static tapi_event_id_t
+tapi_translate_event_id(IFX_TAPI_EVENT_ID_t ifx_id)
+{
+	tapi_event_id_t id;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(tapi_event_tanslation_table); i++) {
+		if (ifx_id == tapi_event_tanslation_table[i])
+			return (i);
+	}
+
+	return (-1);
+}
+
+int
+tapi_get_event(tapi_handle_t th, int timeout, tapi_event_t *event)
+{
+	IFX_TAPI_EVENT_t ifx_event;
+	struct pollfd fds;
+	int r;
+
+	fds.fd		= th->fd;
+	fds.events	= POLLIN | POLLERR;
+	fds.revents	= 0;
+
+	r = poll(&fds, 1, timeout);
+	if (r <= 0)
+		return (r);
+
+	if (ioctl(th->fd, IFX_TAPI_EVENT_GET, &ifx_event) < 0)
+		return (-1);
+
+	event->device	= ifx_event.dev;
+	event->channel	= ifx_event.ch;
+	event->event	= tapi_translate_event_id(ifx_event.id);
+
+	return (r);
+}
+
+int
+tapi_pcm_if_config(tapi_handle_t th, unsigned int device,
+		tapi_pcm_if_mode_t mode, tapi_pcm_if_freq_t freq,
+		tapi_pcm_if_slope_t rxslope, tapi_pcm_if_slope_t txslope)
+{
+	IFX_TAPI_PCM_IF_CFG_t pcmifcfg;
+	const IFX_TAPI_PCM_IF_MODE_t modemap[] = {
+		[TAPI_PCM_IF_MODE_SLAVE_AUTOFREQ] =
+					IFX_TAPI_PCM_IF_MODE_SLAVE_AUTOFREQ,
+		[TAPI_PCM_IF_MODE_SLAVE]	= IFX_TAPI_PCM_IF_MODE_SLAVE,
+		[TAPI_PCM_IF_MODE_MASTER]	= IFX_TAPI_PCM_IF_MODE_MASTER,
+	};
+	const IFX_TAPI_PCM_IF_DCLFREQ_t freqmap[] = {
+		[TAPI_PCM_IF_FREQ_512KHZ]	= IFX_TAPI_PCM_IF_DCLFREQ_512,
+		[TAPI_PCM_IF_FREQ_1024KHZ]	= IFX_TAPI_PCM_IF_DCLFREQ_1024,
+		[TAPI_PCM_IF_FREQ_1536KHZ]	= IFX_TAPI_PCM_IF_DCLFREQ_1536,
+		[TAPI_PCM_IF_FREQ_2048KHZ]	= IFX_TAPI_PCM_IF_DCLFREQ_2048,
+		[TAPI_PCM_IF_FREQ_4096KHZ]	= IFX_TAPI_PCM_IF_DCLFREQ_4096,
+		[TAPI_PCM_IF_FREQ_8192KHZ]	= IFX_TAPI_PCM_IF_DCLFREQ_8192,
+		[TAPI_PCM_IF_FREQ_16384KHZ]	= IFX_TAPI_PCM_IF_DCLFREQ_16384,
+	};
+	const IFX_TAPI_PCM_IF_SLOPE_t slopemap[] = {
+		[TAPI_PCM_IF_SLOPE_RISE]	= IFX_TAPI_PCM_IF_SLOPE_RISE,
+		[TAPI_PCM_IF_SLOPE_FALL]	= IFX_TAPI_PCM_IF_SLOPE_FALL,
+	};
+
+	pcmifcfg.dev		= device;
+	pcmifcfg.nHighway	= 0;
+	pcmifcfg.nOpMode	= modemap[mode];
+	pcmifcfg.nDCLFreq	= freqmap[freq];
+	pcmifcfg.nDoubleClk	= IFX_DISABLE;
+	pcmifcfg.nSlopeRX	= slopemap[rxslope];
+	pcmifcfg.nSlopeTX	= slopemap[txslope];
+	pcmifcfg.nOffsetRX	= IFX_TAPI_PCM_IF_OFFSET_NONE;
+	pcmifcfg.nOffsetTX	= IFX_TAPI_PCM_IF_OFFSET_NONE;
+	pcmifcfg.nDrive		= IFX_TAPI_PCM_IF_DRIVE_ENTIRE;
+	pcmifcfg.nShift		= IFX_DISABLE;
+	pcmifcfg.nMCTS		= 0x00;
+
+	return (ioctl(th->fd, IFX_TAPI_PCM_IF_CFG_SET, &pcmifcfg));
+}
+
+int
+tapi_pcm_channel_config(tapi_handle_t th, unsigned int device,
+		unsigned int channel, unsigned int slotrx, unsigned int slottx,
+		tapi_pcm_coding_t coding)
+{
+	IFX_TAPI_PCM_CFG_t pcmcfg;
+	const IFX_TAPI_PCM_RES_t codingmap[] = {
+		[TAPI_PCM_CODING_NB_ALAW_8BIT]	= IFX_TAPI_PCM_RES_NB_ALAW_8BIT,
+		[TAPI_PCM_CODING_NB_ULAW_8BIT]	= IFX_TAPI_PCM_RES_NB_ULAW_8BIT,
+		[TAPI_PCM_CODING_NB_LINEAR_16BIT] =
+			IFX_TAPI_PCM_RES_NB_LINEAR_16BIT,
+		[TAPI_PCM_CODING_WB_ALAW_8BIT]	= IFX_TAPI_PCM_RES_WB_ALAW_8BIT,
+		[TAPI_PCM_CODING_WB_ULAW_8BIT]	= IFX_TAPI_PCM_RES_WB_ULAW_8BIT,
+		[TAPI_PCM_CODING_WB_LINEAR_16BIT] =
+			IFX_TAPI_PCM_RES_WB_LINEAR_16BIT,
+		[TAPI_PCM_CODING_WB_G722]	= IFX_TAPI_PCM_RES_WB_G722,
+		[TAPI_PCM_CODING_NB_G726_16]	= IFX_TAPI_PCM_RES_NB_G726_16,
+		[TAPI_PCM_CODING_NB_G726_24]	= IFX_TAPI_PCM_RES_NB_G726_24,
+		[TAPI_PCM_CODING_NB_G726_32]	= IFX_TAPI_PCM_RES_NB_G726_32,
+		[TAPI_PCM_COFING_NB_G726_40]	= IFX_TAPI_PCM_RES_NB_G726_40,
+	};
+
+	pcmcfg.dev		= device;
+	pcmcfg.ch		= channel;
+	pcmcfg.nTimeslotRX	= slotrx;
+	pcmcfg.nTimeslotTX	= slottx;
+	pcmcfg.nHighway		= 0;
+	pcmcfg.nResolution	= codingmap[coding];
+	pcmcfg.nSampleSwap	= IFX_TAPI_PCM_SAMPLE_SWAP_DISABLED;
+	pcmcfg.nBitPacking	= IFX_TAPI_PCM_BITPACK_LSB;
+
+	return (ioctl(th->fd, IFX_TAPI_PCM_CFG_SET, &pcmcfg));
+}
diff --git a/tools/voice/lantiq/kernel/libtapi.h b/tools/voice/lantiq/kernel/libtapi.h
new file mode 100644
index 0000000..9920418
--- /dev/null
+++ b/tools/voice/lantiq/kernel/libtapi.h
@@ -0,0 +1,333 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+	    this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+	notice, this list of conditions and the following disclaimer in the
+	documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+	used to endorse or promote products derived from this software without
+	specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+#ifndef _LIBTAPI_H
+#define _LIBTAPI_H
+
+struct tapi_handle;
+typedef struct tapi_handle * tapi_handle_t;
+
+typedef enum {
+	TAPI_LINE_TYPE_FXS_NB,
+	TAPI_LINE_TYPE_FXS_WB,
+	TAPI_LINE_TYPE_FXS_AUTO,
+	TAPI_LINE_TYPE_FXO_NB,
+} tapi_line_type_t;
+
+typedef enum {
+	TAPI_LINE_FEED_ACTIVE,
+	TAPI_LINE_FEED_ACTIVE_REV,
+	TAPI_LINE_FEED_STANDBY,
+	TAPI_LINE_FEED_HIGH_IMPEDANCE,
+	TAPI_LINE_FEED_DISABLED,
+} tapi_line_feed_t;
+
+typedef enum {
+	TAPI_LINE_ONHOOK,
+	TAPI_LINE_OFFHOOK,
+} tapi_line_hook_t;
+
+typedef enum {
+	TAPI_EVENT_NONE,
+	TAPI_EVENT_IO_GENERAL_NONE,
+	TAPI_EVENT_IO_INTERRUPT_NONE,
+	TAPI_EVENT_FXS_NONE,
+	TAPI_EVENT_FXS_RING,
+	TAPI_EVENT_FXS_RINGBURST_END,
+	TAPI_EVENT_FXS_RINGING_END,
+	TAPI_EVENT_FXS_ONHOOK,
+	TAPI_EVENT_FXS_OFFHOOK,
+	TAPI_EVENT_FXS_FLASH,
+	TAPI_EVENT_FXS_ONHOOK_INT,
+	TAPI_EVENT_FXS_OFFHOOK_INT,
+	TAPI_EVENT_CONTMEASUREMENT,
+	TAPI_EVENT_FXS_RAW_ONHOOK,
+	TAPI_EVENT_FXS_RAW_OFFHOOK,
+	TAPI_EVENT_FXS_LINE_MODE,
+	TAPI_EVENT_FXS_COMTEL_END,
+	TAPI_EVENT_FXO_NONE,
+	TAPI_EVENT_FXO_BAT_FEEDED,
+	TAPI_EVENT_FXO_BAT_DROPPED,
+	TAPI_EVENT_FXO_POLARITY,
+	TAPI_EVENT_FXO_RING_START,
+	TAPI_EVENT_FXO_RING_STOP,
+	TAPI_EVENT_FXO_OSI,
+	TAPI_EVENT_FXO_APOH,
+	TAPI_EVENT_FXO_NOPOH,
+	TAPI_EVENT_LT_GR909_RDY,
+	TAPI_EVENT_NLT_END,
+	TAPI_EVENT_LINE_MEASURE_CAPACITANCE_RDY,
+	TAPI_EVENT_LINE_MEASURE_CAPACITANCE_RDY_INT,
+	TAPI_EVENT_LINE_MEASURE_CAPACITANCE_START_INT,
+	TAPI_EVENT_LINE_MEASURE_CAPACITANCE_GND_RDY,
+	TAPI_EVENT_PULSE_NONE,
+	TAPI_EVENT_PULSE_DIGIT,
+	TAPI_EVENT_PULSE_START,
+	TAPI_EVENT_DTMF_NONE,
+	TAPI_EVENT_DTMF_DIGIT,
+	TAPI_EVENT_DTMF_END,
+	TAPI_EVENT_CALIBRATION_NONE,
+	TAPI_EVENT_CALIBRATION_END,
+	TAPI_EVENT_CALIBRATION_END_INT,
+	TAPI_EVENT_CALIBRATION_END_SINT,
+	TAPI_EVENT_METERING_NONE,
+	TAPI_EVENT_METERING_END,
+	TAPI_EVENT_CID_TX_NONE,
+	TAPI_EVENT_CID_TX_SEQ_START,
+	TAPI_EVENT_CID_TX_SEQ_END,
+	TAPI_EVENT_CID_TX_INFO_START,
+	TAPI_EVENT_CID_TX_INFO_END,
+	TAPI_EVENT_CID_TX_NOACK_ERR,
+	TAPI_EVENT_CID_TX_RINGCAD_ERR,
+	TAPI_EVENT_CID_TX_UNDERRUN_ERR,
+	TAPI_EVENT_CID_TX_NOACK2_ERR,
+	TAPI_EVENT_CIDSM_END,
+	TAPI_EVENT_CID_TX_END,
+	TAPI_EVENT_CID_RX_NONE,
+	TAPI_EVENT_CID_RX_CAS,
+	TAPI_EVENT_CID_RX_END,
+	TAPI_EVENT_CID_RX_CD,
+	TAPI_EVENT_CID_RX_ERROR_READ,
+	TAPI_EVENT_CID_RX_ERROR1,
+	TAPI_EVENT_CID_RX_ERROR2,
+	TAPI_EVENT_TONE_GEN_NONE,
+	TAPI_EVENT_TONE_GEN_BUSY,
+	TAPI_EVENT_TONE_GEN_END,
+	TAPI_EVENT_TONE_GEN_END_RAW,
+	TAPI_EVENT_TONE_DET_NONE,
+	TAPI_EVENT_TONE_DET_RECEIVE,
+	TAPI_EVENT_TONE_DET_TRANSMIT,
+	TAPI_EVENT_TONE_DET_CPT,
+	TAPI_EVENT_TONE_DET_CPT_END,
+	TAPI_EVENT_TONE_DET_MF_R2_START,
+	TAPI_EVENT_TONE_DET_MF_R2_END,
+	TAPI_EVENT_FAXMODEM_NONE,
+	TAPI_EVENT_FAXMODEM_DIS,
+	TAPI_EVENT_FAXMODEM_CED,
+	TAPI_EVENT_FAXMODEM_PR,
+	TAPI_EVENT_FAXMODEM_AM,
+	TAPI_EVENT_FAXMODEM_CNGFAX,
+	TAPI_EVENT_FAXMODEM_CNGMOD,
+	TAPI_EVENT_FAXMODEM_V21L,
+	TAPI_EVENT_FAXMODEM_V18A,
+	TAPI_EVENT_FAXMODEM_V27,
+	TAPI_EVENT_FAXMODEM_BELL,
+	TAPI_EVENT_FAXMODEM_V22,
+	TAPI_EVENT_FAXMODEM_V22ORBELL,
+	TAPI_EVENT_FAXMODEM_V32AC,
+	TAPI_EVENT_FAXMODEM_V8BIS,
+	TAPI_EVENT_FAXMODEM_HOLDEND,
+	TAPI_EVENT_FAXMODEM_CEDEND,
+	TAPI_EVENT_FAXMODEM_CAS_BELL,
+	TAPI_EVENT_FAXMODEM_V21H,
+	TAPI_EVENT_FAXMODEM_VMD,
+	TAPI_EVENT_LIN_NONE,
+	TAPI_EVENT_LIN_UNDERFLOW,
+	TAPI_EVENT_COD_NONE,
+	TAPI_EVENT_COD_DEC_CHG,
+	TAPI_EVENT_COD_ROOM_NOISE,
+	TAPI_EVENT_COD_ROOM_SILENCE,
+	TAPI_EVENT_COD_ANNOUNCE_END,
+	TAPI_EVENT_COD_MOS,
+	TAPI_EVENT_RTP_NONE,
+	TAPI_EVENT_RTP_FIRST,
+	TAPI_EVENT_RTP_EXT_BROKEN,
+	TAPI_EVENT_RTP_EXT_SSRC_CHANGED,
+	TAPI_EVENT_AAL_NONE,
+	TAPI_EVENT_RFC2833_NONE,
+	TAPI_EVENT_RFC2833_EVENT,
+	TAPI_EVENT_KPI_NONE,
+	TAPI_EVENT_KPI_INGRESS_FIFO_FULL,
+	TAPI_EVENT_KPI_SOCKET_FAILURE,
+	TAPI_EVENT_T38_NONE,
+	TAPI_EVENT_T38_ERROR_GEN,
+	TAPI_EVENT_T38_ERROR_OVLD,
+	TAPI_EVENT_T38_ERROR_READ,
+	TAPI_EVENT_T38_ERROR_WRITE,
+	TAPI_EVENT_T38_ERROR_DATA,
+	TAPI_EVENT_T38_ERROR_SETUP,
+	TAPI_EVENT_T38_FDP_REQ,
+	TAPI_EVENT_T38_STATE_CHANGE,
+	TAPI_EVENT_JB_NONE,
+	TAPI_EVENT_DOWNLOAD_NONE,
+	TAPI_EVENT_INFO_NONE,
+	TAPI_EVENT_INFO_MBX_CONGESTION,
+	TAPI_EVENT_DEBUG_NONE,
+	TAPI_EVENT_DEBUG_CERR,
+	TAPI_EVENT_GPIO_HL,
+	TAPI_EVENT_GPIO_LH,
+	TAPI_EVENT_LL_DRIVER_NONE,
+	TAPI_EVENT_LL_DRIVER_WD_FAIL,
+	TAPI_EVENT_FAULT_GENERAL_NONE,
+	TAPI_EVENT_FAULT_GENERAL,
+	TAPI_EVENT_FAULT_GENERAL_CHINFO,
+	TAPI_EVENT_FAULT_GENERAL_DEVINFO,
+	TAPI_EVENT_TYPE_FAULT_GENERAL,
+	TAPI_EVENT_FAULT_LINE_NONE,
+	TAPI_EVENT_FAULT_LINE_GK_POS,
+	TAPI_EVENT_FAULT_LINE_GK_NEG,
+	TAPI_EVENT_FAULT_LINE_GK_LOW,
+	TAPI_EVENT_FAULT_LINE_GK_HIGH,
+	TAPI_EVENT_FAULT_LINE_OVERTEMP,
+	TAPI_EVENT_FAULT_LINE_OVERCURRENT,
+	TAPI_EVENT_FAULT_LINE_GK_LOW_INT,
+	TAPI_EVENT_FAULT_LINE_GK_HIGH_INT,
+	TAPI_EVENT_FAULT_LINE_GK_LOW_END,
+	TAPI_EVENT_FAULT_LINE_GK_HIGH_END,
+	TAPI_EVENT_FAULT_LINE_OVERTEMP_END,
+	TAPI_EVENT_FAULT_HW_NONE,
+	TAPI_EVENT_FAULT_HW_SPI_ACCESS,
+	TAPI_EVENT_FAULT_HW_CLOCK_FAIL,
+	TAPI_EVENT_FAULT_HW_CLOCK_FAIL_END,
+	TAPI_EVENT_FAULT_HW_FAULT,
+	TAPI_EVENT_FAULT_HW_SYNC,
+	TAPI_EVENT_FAULT_HW_RESET,
+	TAPI_EVENT_FAULT_HW_SSI_ERR,
+	TAPI_EVENT_FAULT_HW_SSI_ERR_END,
+	TAPI_EVENT_FAULT_FW_NONE,
+	TAPI_EVENT_FAULT_FW_EBO_UF,
+	TAPI_EVENT_FAULT_FW_EBO_OF,
+	TAPI_EVENT_FAULT_FW_CBO_UF,
+	TAPI_EVENT_FAULT_FW_CBO_OF,
+	TAPI_EVENT_FAULT_FW_CBI_OF,
+	TAPI_EVENT_FAULT_FW_WATCHDOG,
+	TAPI_EVENT_FAULT_SW_NONE,
+	TAPI_EVENT_FAULT_HDLC_NONE,
+	TAPI_EVENT_FAULT_HDLC_FRAME_LENGTH,
+	TAPI_EVENT_FAULT_HDLC_NO_KPI_PATH,
+	TAPI_EVENT_FAULT_HDLC_TX_OVERFLOW,
+	TAPI_EVENT_FAULT_HDLC_DISABLED,
+} tapi_event_id_t;
+
+typedef struct {
+	unsigned int	device;
+	unsigned int	channel;
+	tapi_event_id_t	event;
+} tapi_event_t;
+
+typedef enum {
+	TAPI_PCM_IF_MODE_SLAVE_AUTOFREQ,
+	TAPI_PCM_IF_MODE_SLAVE,
+	TAPI_PCM_IF_MODE_MASTER,
+} tapi_pcm_if_mode_t;
+
+typedef enum {
+	TAPI_PCM_IF_FREQ_512KHZ,
+	TAPI_PCM_IF_FREQ_1024KHZ,
+	TAPI_PCM_IF_FREQ_1536KHZ,
+	TAPI_PCM_IF_FREQ_2048KHZ,
+	TAPI_PCM_IF_FREQ_4096KHZ,
+	TAPI_PCM_IF_FREQ_8192KHZ,
+	TAPI_PCM_IF_FREQ_16384KHZ,
+} tapi_pcm_if_freq_t;
+
+typedef enum {
+	TAPI_PCM_IF_SLOPE_RISE,
+	TAPI_PCM_IF_SLOPE_FALL,
+} tapi_pcm_if_slope_t;
+
+typedef enum {
+	TAPI_PCM_CODING_NB_ALAW_8BIT,
+	TAPI_PCM_CODING_NB_ULAW_8BIT,
+	TAPI_PCM_CODING_NB_LINEAR_16BIT,
+	TAPI_PCM_CODING_WB_ALAW_8BIT,
+	TAPI_PCM_CODING_WB_ULAW_8BIT,
+	TAPI_PCM_CODING_WB_LINEAR_16BIT,
+	TAPI_PCM_CODING_WB_G722,
+	TAPI_PCM_CODING_NB_G726_16,
+	TAPI_PCM_CODING_NB_G726_24,
+	TAPI_PCM_CODING_NB_G726_32,
+	TAPI_PCM_COFING_NB_G726_40,
+} tapi_pcm_coding_t;
+
+extern tapi_handle_t tapi_open(const char *tapidev);
+extern void tapi_close(tapi_handle_t th);
+extern int tapi_basic_init(tapi_handle_t th, unsigned int device,
+							      unsigned int irq);
+extern int tapi_fw_download(tapi_handle_t th, unsigned int device,
+							    const char *fwfile);
+extern int tapi_dev_start(tapi_handle_t th, unsigned int device);
+extern int tapi_bbd_download(tapi_handle_t th, unsigned int device,
+				     unsigned int channel, const char *bbdfile);
+extern int tapi_line_calibrate(tapi_handle_t th, unsigned int device,
+							  unsigned int channel);
+extern int tapi_line_type_set(tapi_handle_t th, unsigned int device,
+			       unsigned int channel, tapi_line_type_t linetype);
+extern int tapi_line_feed_set(tapi_handle_t th, unsigned int device,
+			       unsigned int channel, tapi_line_feed_t linefeed);
+extern int tapi_ring_start(tapi_handle_t th, unsigned int device,
+							  unsigned int channel);
+extern int tapi_ring_stop(tapi_handle_t th, unsigned int device,
+							  unsigned int channel);
+extern tapi_line_hook_t tapi_hook_status_get(tapi_handle_t th,
+				     unsigned int device, unsigned int channel);
+extern int tapi_get_event(tapi_handle_t th, int timeout, tapi_event_t *event);
+
+extern int tapi_pcm_if_config(tapi_handle_t th, unsigned int device,
+		tapi_pcm_if_mode_t mode, tapi_pcm_if_freq_t freq,
+		tapi_pcm_if_slope_t rxslope, tapi_pcm_if_slope_t txslope);
+extern int tapi_pcm_channel_config(tapi_handle_t th, unsigned int device,
+		unsigned int channel, unsigned int slotrx, unsigned int slottx,
+		tapi_pcm_coding_t coding);
+
+#endif /* _LIBTAPI_H */
diff --git a/tools/voice/lantiq/kernel/mv_voice_tool.c b/tools/voice/lantiq/kernel/mv_voice_tool.c
index bc40847..ef09fd7 100644
--- a/tools/voice/lantiq/kernel/mv_voice_tool.c
+++ b/tools/voice/lantiq/kernel/mv_voice_tool.c
@@ -67,87 +67,35 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <fcntl.h>
 #include <sys/ioctl.h>
 #include <signal.h>
+
 #include "tdm/test/tdm_dev.h"
+#include "libtapi.h"
 
-#include "vpapi_lib.h"
-
-#if defined(ZARLINK_SLIC_VE880)
-/* Zarlink VE880 */
-#include "profile_88266.h"
-#define MAX_DEVICES		2
-#define MAX_DEVICE_LINES	2
-#define MAX_LINES		4
-#define VP_DEV_SERIES		VP_DEV_880_SERIES
-#define DEV_PROFILE		ABS_VBL_FLYBACK
-#define DC_COEFF		DC_22MA_CC
-#define AC_COEFF		AC_FXS_RF14_DEF
-#define WB_AC_COEFF		AC_FXS_RF14_WB_US
-#define RING_PROFILE		RING_DEF
-
-#elif defined(ZARLINK_SLIC_VE890)
-/* Zarlink VE890 */
-#include "profile_89116.h"
-#define MAX_DEVICES		1
-#define MAX_DEVICE_LINES	1
-#define MAX_LINES		1
-#define VP_DEV_SERIES		VP_DEV_890_SERIES
-#define DEV_PROFILE		DEV_PROFILE_VE890_BB100V
-#define DC_COEFF		DC_FXS_VE890_BB100V_DEF
-#define AC_COEFF		AC_FXS_RF50_600R_DEF
-#define WB_AC_COEFF		NULL
-#define RING_PROFILE		RING_25HZ_VE890_BB100V_DEF
-
-#elif defined(ZARLINK_SLIC_VE792)
-/* Zarlink VE792 */
-#include "profile_79238.h"
-#define MAX_DEVICES		4
-#define MAX_DEVICE_LINES	8
-#define MAX_LINES		32
-#define VP_DEV_SERIES		VP_DEV_792_SERIES
-#define DEV_PROFILE		VE792_DEV_PROFILE
-#define DC_COEFF		VE792_DC_COEFF
-#define AC_COEFF		VE792_AC_COEFF_600
-#define WB_AC_COEFF		TBD /* TBD: AC profile for WideBand support */
-#define RING_PROFILE		RING_20HZ_SINE
-
-/* Power-supply related parameters */
-#define VBH			-50
-#define VBL			-25
-#define VBP			50
-#endif
+#define	TAPI_DEVICE			0
+#define TAPI_CHANNELS			2
+#define TAPI_IRQ			20
+
+#define MAX_LINES			TAPI_CHANNELS
+#define	MAX_DEVICE_LINES		TAPI_CHANNELS
+
+#define TIMEOUT				11000 /* usec */
+#define TOOL_PREFIX			">> "
 
-#define TOOL_PREFIX		">> "
-#define TIMEOUT			11000 /* usec */
-/* Line calibration increases init time significantly */
-#define LINE_CALIBRATION_SUPPORT
-
-/* Defines */
-#define GET_DEVICE(line_id)	(line_id/MAX_DEVICE_LINES)
-#define GET_LINE(line_id)	(line_id % MAX_DEVICE_LINES)
-#define N_A			0
-#define ON_HOOK			0
-#define OFF_HOOK		1
-#define CH_BUFF_SIZE		(80 * pcm_bytes)
-#define BUFF_ADDR(buff, line)	((unsigned char*)buff + (line*80*pcm_bytes))
-
-/* Extern */
-extern int dev_profile_size;
-extern int dc_profile_size;
-extern int ac_profile_size;
-extern int ring_profile_size;
+#define MAX_SLIC_RDWR_BUFF_SIZE         128
+#define CH_BUFF_SIZE			(80 * pcm_bytes)
+#define BUFF_ADDR(buff, line)		((unsigned char*)buff + (line*80*pcm_bytes))
 
 /* GLobals */
 static unsigned short total_lines = 0;
 static unsigned short total_devs = 0;
 static unsigned char pcm_bytes = 0;
-static unsigned char cal_devs = 0;
-#ifdef LINE_CALIBRATION_SUPPORT
 static unsigned short cal_lines = 0;
-#endif
-static VpOptionCodecType codec = VP_OPTION_ALAW;
 static unsigned char time_slot_table[MAX_LINES];
 static unsigned char hook_state[MAX_LINES];
 static char dev_name[] = "/dev/tdm";
+static char tapi_name[] = "/dev/tapi";
+static char tapi_fw_name[] = "dxt_fw_V5.25.04.bin";
+static char tapi_bbd_name[] = "ETSI_T3R10.BIN";
 static int buff_size = 0;
 static unsigned char aud_buf[2][320 * MAX_LINES];
 static unsigned short f1Mem = 0;
@@ -157,6 +105,7 @@ static unsigned int event_count = 0;
 static int tdm_fd = 0;
 static unsigned char data_buff[MAX_SLIC_RDWR_BUFF_SIZE];
 static int slic_init = 0;
+static tapi_handle_t th;
 
 /* sin table, 256 points */
 static short sinTbl[] = {0,402,804,1205,1606,2005,2404,2801,3196,3590,3981,4370,4756,
@@ -179,26 +128,14 @@ static short sinTbl[] = {0,402,804,1205,1606,2005,2404,2801,3196,3590,3981,4370,
 -8765,-8423,-8075,-7723,-7366,-7005,-6639,-6270,-5896,-5519,-5139,-4756,-4370,-3981,
 -3590,-3196,-2801,-2404,-2005,-1606,-1205,-804,-402,0};
 
-/* Static APIs */
-static void vpapi_dev_init(VpDeviceIdType dev_id);
-static inline void wait_for_vpapi_event(void);
-static int vpapi_init(void);
-static void vpapi_init_done(void);
-static void vpapi_release(void);
-static void release(int signum);
+/* Function declarations */
 static void sw_tone_test(int tdm_fd, unsigned char line_id);
-static void gen_tone(unsigned short freq, unsigned char line_id, unsigned char* tx_buff);
 static void sw_loopback(int tdm_fd, unsigned char line_id);
 static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigned char line1);
-static void slic_digital_loopback(int tdm_fd, unsigned long int iterations);
 static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line, unsigned char end_line);
-static void channel_balancing_test(int tdm_fd, unsigned long int iterations);
-static inline int slic_dl_data_compare(int offset);
-#if defined(MV_TDM_USE_DCO)
-static void set_tdm_clk_config(void);
-static int get_tdm_clk_correction(void);
-static void set_tdm_clk_correction(int correction);
-#endif
+static void slic_digital_loopback(int tdm_fd, unsigned long int iterations);
+static void wait_for_event(void);
+static void release(int signum);
 
 int main(void)
 {
@@ -208,6 +145,7 @@ int main(void)
 	unsigned char line0_id, line1_id;
 	tdm_dev_params_t tdm_params;
 	unsigned long int iterations;
+	tapi_pcm_coding_t codec;
 
 	event_count = 0;
 	slic_init = 0;
@@ -251,17 +189,13 @@ int main(void)
 
 	/* Issue main menu */
 	while(1) {
-		printf("\n  Marvell Voice Tool (Zarlink/Ligerity Edition):\n");
-		printf("  0. Read from SLIC register (VE880 only)\n");
-		printf("  1. Write to SLIC register (VE880 only)\n");
+		printf("\n  Marvell Voice Tool (Lantiq Edition):\n");
 		printf("  2. Start ring\n");
 		printf("  3. Stop ring\n");
 		printf("  4. Start SW Dial tone\n");
 		printf("  5. Self echo on local phone\n");
 		printf("  6. Loopback two local phones\n");
 		printf("  7. Multiple local phone pairs loopback\n");
-		printf("  8. Digital Loopback (incremental pattern)\n");
-		printf("  9. Channel balancing\n");
 		printf("  a. Start Phone devices\n");
 		printf("  b. Stop Phone devices\n");
 #if defined(MV_TDM_USE_DCO)
@@ -276,57 +210,12 @@ int main(void)
 		memset(aud_buf[1], 0, buff_size);
 		gets(str);
 		switch(str[0]) {
-			case '0':
-#if defined(ZARLINK_SLIC_VE880)
-				printf("%s Enter line id: ",TOOL_PREFIX);
-				gets(str);
-				line0_id = atoi(str);
-				printf("%s Enter SLIC register command(decimal): ",TOOL_PREFIX);
-				gets(str);
-				cmd = atoi(str);
-				printf("%s Enter SLIC register command size: ",TOOL_PREFIX);
-				gets(str);
-				cmd_len = atoi(str);
-				vpapi_slic_reg_read(line0_id, cmd, cmd_len, data_buff);
-				printf("\n%s Sent command 0x%x to line(%d)\n", TOOL_PREFIX, cmd, line0_id);
-				printf("%s Return value: ",TOOL_PREFIX);
-				for(i = 0; i < cmd_len; i++)
-					printf("0x%x ", data_buff[i]);
-				printf("\n");
-#else
-				printf("%s operation not supported\n",TOOL_PREFIX);
-#endif
-				break;
-
-			case '1':
-#if defined(ZARLINK_SLIC_VE880)
-				printf("%s Enter line id: ",TOOL_PREFIX);
-				gets(str);
-				line0_id = atoi(str);
-				printf("%s Enter SLIC register command(decimal): ",TOOL_PREFIX);
-				gets(str);
-				cmd = atoi(str);
-				printf("%s Enter SLIC register command size: ",TOOL_PREFIX);
-				gets(str);
-				cmd_len = atoi(str);
-				printf("%s Enter data(press Enter after each byte): ",TOOL_PREFIX);
-				for(i = 0; i < cmd_len; i++) {
-					gets(str);
-					data_buff[i] = atoi(str);
-				}
-				vpapi_slic_reg_write(line0_id, cmd, cmd_len, data_buff);
-				printf("\n%s Sent command 0x%x to line(%d)\n", TOOL_PREFIX, cmd, line0_id);
-#else
-				printf("%s operation not supported\n",TOOL_PREFIX);
-#endif
-				break;
-
 			case '2':
 				printf("%s Enter line id: ", TOOL_PREFIX);
 				gets(str);
 				line0_id = atoi(str);
 				printf("Start ringing on line %d\n", line0_id);
-				vpapi_set_line_state(line0_id, VP_LINE_RINGING);
+				tapi_ring_start(th, TAPI_DEVICE, line0_id);
 				break;
 
 			case '3':
@@ -334,7 +223,7 @@ int main(void)
 				gets(str);
 				line0_id = atoi(str);
 				printf("Stop ringing on line %d\n", line0_id);
-				vpapi_set_line_state(line0_id, VP_LINE_STANDBY);
+				tapi_ring_stop(th, TAPI_DEVICE, line0_id);
 				break;
 
 			case '4':
@@ -387,51 +276,90 @@ int main(void)
 				sw_loopback_multi_phones_test(tdm_fd, line0_id, line1_id);
 				break;
 
-			case '8':
-				printf("%s Enter number of iterations(must be greater than 3): ", TOOL_PREFIX);
-				gets(str);
-				iterations = (unsigned long int)atoi(str);
-				if(iterations < 4) {
-					printf("Requires at least 4 iterations  - try again\n");
-					break;
-				}
-				slic_digital_loopback(tdm_fd, iterations);
-				break;
-
-			case '9':
-				printf("%s Enter number of iterations('0' - for infinite loop): ", TOOL_PREFIX);
-				gets(str);
-				iterations = (unsigned long int)atoi(str);
-				channel_balancing_test(tdm_fd, iterations);
-				break;
-
 			case 'a':
 				/* Start Telephony */
 				if(ioctl(tdm_fd, TDM_DEV_TDM_START, &tdm_params)) {
-					printf("%s Error, unable to init TDM\n", TOOL_PREFIX);
+					printf("%s Error, unable to init TDM.\n", TOOL_PREFIX);
+					return 1;
+				}
+
+				th = tapi_open(tapi_name);
+				if (th == NULL) {
+					printf("%s Error, could not open tapi device.\n", TOOL_PREFIX);
+					return 1;
+				}
+
+				if (tapi_basic_init(th, TAPI_DEVICE, TAPI_IRQ) < 0) {
+					printf("%s Error, could not initialize tapi device.\n", TOOL_PREFIX);
+					return 1;
+				}
+
+				if (tapi_fw_download(th, TAPI_DEVICE, tapi_fw_name) < 0) {
+					printf("%s Error, could not load tapi firmware.\n", TOOL_PREFIX);
+					return 1;
+				}
+
+				if (tapi_dev_start(th, TAPI_DEVICE) < 0) {
+					printf("%s Error, could not start tapi device.\n", TOOL_PREFIX);
+					return 1;
+				}
+
+				if (tapi_bbd_download(th, TAPI_DEVICE, -1, tapi_bbd_name) < 0) {
+					printf("%s Error, could not load tapi configuration.\n", TOOL_PREFIX);
 					return 1;
 				}
 
-				if(vpapi_open_device()) {
-					printf("%s Error, could not open vpapi device\n", TOOL_PREFIX);
+				if (tapi_pcm_if_config(th, TAPI_DEVICE,
+				    TAPI_PCM_IF_MODE_SLAVE, TAPI_PCM_IF_FREQ_8192KHZ,
+				    TAPI_PCM_IF_SLOPE_FALL, TAPI_PCM_IF_SLOPE_RISE) < 0) {
+					printf("%s Error, could not configure PCM interface.\n", TOOL_PREFIX);
 					return 1;
 				}
 
-				if(vpapi_init()) {
-					printf("%s Error, init failed\n", TOOL_PREFIX);
-					ret = 1;
-					goto voice_out;
+				switch(pcm_bytes) {
+				case 1:
+					codec = TAPI_PCM_CODING_NB_ALAW_8BIT;
+					break;
+				case 2:
+					codec = TAPI_PCM_CODING_NB_LINEAR_16BIT;
+					break;
+				case 4:
+					codec = TAPI_PCM_CODING_WB_LINEAR_16BIT;
+					break;
+				default:
+					codec = TAPI_PCM_CODING_NB_ALAW_8BIT;
+					printf("## Warning, wrong PCM size - set to default(ALAW) ##\n");
+					break;
+				}
+
+				for (i = 0; i < TAPI_CHANNELS; i++) {
+					if (tapi_line_type_set(th, TAPI_DEVICE, i, TAPI_LINE_TYPE_FXS_AUTO) < 0) {
+						printf("%s Error, could not set line type.\n", TOOL_PREFIX);
+						return 1;
+					}
+
+					if (tapi_line_feed_set(th, TAPI_DEVICE, i, TAPI_LINE_FEED_STANDBY) < 0) {
+						printf("%s Error, could not set line feed.\n", TOOL_PREFIX);
+						return 1;
+					}
+
+					if (tapi_pcm_channel_config(th, TAPI_DEVICE, i, i, i, codec) < 0) {
+						printf("%s Error, could not configure PCM channel.\n", TOOL_PREFIX);
+						return 1;
+					}
+
+					if (tapi_line_calibrate(th, TAPI_DEVICE, i) < 0) {
+						printf("%s Error, could not calibrate line.\n", TOOL_PREFIX);
+						return 1;
+					}
+
 				}
+
 				slic_init = 1;
 
 				/* Wait to device/s and line/s calibration to finish */
-#ifdef LINE_CALIBRATION_SUPPORT
-				while((cal_devs < total_devs) || (cal_lines < total_lines)) {
-#else
-				while(cal_devs < total_devs) {
-#endif
-					wait_for_vpapi_event();
-				}
+				while((cal_lines < total_lines))
+					wait_for_event();
 				break;
 
 			case 'b':
@@ -470,7 +398,7 @@ voice_out:
 	return ret;
 }
 
-void release(int signum)
+static void release(int signum)
 {
 	if (signum) {
 		printf("\n%s Stopping Phone devices and exit\n", TOOL_PREFIX);
@@ -482,7 +410,7 @@ void release(int signum)
 	/* Stop SLIC/s */
 	if(slic_init) {
 		printf("\n%s Stopping SLIC\n", TOOL_PREFIX);
-		vpapi_release();
+		tapi_close(th);
 		printf("\n%s Stopped SLIC\n", TOOL_PREFIX);
 		slic_init = 0;
 	} else {
@@ -499,339 +427,6 @@ void release(int signum)
 
 	if (signum)
 		close(tdm_fd);
-
-	if(vpapi_close_device()) {
-		printf("\n%s Error, could not close SLIC device ##\n", TOOL_PREFIX);
-		return;
-	} else {
-		printf("\n%s SLIC device closed\n", TOOL_PREFIX);
-	}
-
-	if (signum)
-		exit(signum);
-}
-
-static void channel_balancing_test(int tdm_fd, unsigned long int iterations)
-{
-	fd_set rd_fds, wr_fds;
-	struct timeval timeout = {0, TIMEOUT};
-	int msg_len, cmp_status = 0, ch, cb_loop = 0, i;
-	unsigned long int loops = 0, index;
-	VpOptionLoopbackType lp = VP_OPTION_LB_TIMESLOT;
-
-	if (tdm_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return;
-	}
-
-	/* Fill Tx buffer with incremental pattern */
-	for(ch = 0; ch < total_lines; ch++) {
-		for(index = 0; index < (80 * pcm_bytes); index+=2)
-			*((unsigned short*)&aud_buf[1][(80 * pcm_bytes * ch) + index]) = (((index+3) << 8)+ (index+1));
-	}
-
-	/* Put SLIC/s in loopback mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_option(1, ch, GET_DEVICE(ch), VP_OPTION_ID_LOOPBACK, &lp);
-
-	/* Wait a bit */
-	sleep(1);
-
-	/* Put SLIC/s in TALK mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_line_state(ch, VP_LINE_TALK);
-
-	/* Wait a bit */
-	sleep(1);
-
-	if (iterations == 0)
-		iterations = (unsigned long int)(-1); /* Assume infinite */
-
-	while (loops < iterations) {
-		cb_loop = 0;
-		i = 0;
-
-		if (ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
-			printf("Error, unable to start pcm bus\n");
-			return;
-		}
-
-		while (cb_loop == 0) {
-			FD_ZERO(&rd_fds);
-			FD_ZERO(&wr_fds);
-			FD_SET(tdm_fd, &rd_fds);
-			FD_SET(tdm_fd, &wr_fds);
-
-			/* Wait for event  */
-			if (select(tdm_fd+1, &rd_fds, &wr_fds, NULL, &timeout) == 0) {
-				printf("Error, timeout while polling(%dusec)\n", TIMEOUT);
-				goto cb_out;
-			}
-
-			/* Write */
-			if (FD_ISSET(tdm_fd, &wr_fds)) {
-				msg_len = write(tdm_fd, aud_buf[1], buff_size);
-				if (msg_len < buff_size) {
-					printf("write() failed\n");
-					goto cb_out;
-				}
-			}
-
-			/* Read */
-			if (FD_ISSET(tdm_fd, &rd_fds)) {
-				memset(aud_buf[0], 0, buff_size);
-				msg_len = read(tdm_fd, aud_buf[0], buff_size);
-				if (msg_len < buff_size) {
-					printf("read() failed\n");
-					goto cb_out;
-				}
-
-				if(i > 3) {
-					for(ch = 1; ch < total_lines; ch++) {
-						if(memcmp(aud_buf[0], &aud_buf[0][(ch * pcm_bytes * 80)], (pcm_bytes * 80))) {
-							printf("\nERROR - data miscompare(ch=%d) !!!\n", ch);
-							cmp_status = 1;
-							goto cb_out;
-						}
-					}
-
-					cb_loop = 1;
-				}
-				i++;
-			}
-
-			/* Reload timeout */
-			timeout.tv_usec = TIMEOUT;
-		}
-
-		loops++;
-		if (ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
-			printf("Error, unable to stop pcm bus\n");
-			return;
-		}
-		printf("loop #%u\n", loops);
-		sleep(1);
-	}
-
-cb_out:
-	if(cmp_status == 0) {
-		printf("\nChannel balancing test PASSED !!!\n");
-	} else {
-		printf("Dump Rx buffer:\n");
-		for(ch = 0; ch < total_lines; ch++) {
-			printf("Buffer #%d: ", ch);
-			for(i = 0; i < (pcm_bytes * 80); i++) {
-				printf("0x%x ", aud_buf[0][(ch * pcm_bytes * 80) + i]);
-			}
-			printf("\n\n");
-			sleep(1);
-		}
-	}
-
-	if (ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
-		printf("Error, unable to stop pcm bus\n");
-		return;
-	}
-
-	lp = VP_OPTION_LB_OFF;
-
-	/* Disable loopback mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_option(1, ch, GET_DEVICE(ch), VP_OPTION_ID_LOOPBACK, &lp);
-
-	/* Put SLIC/s in STANDBY mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_line_state(ch, VP_LINE_STANDBY);
-}
-
-static void slic_digital_loopback(int tdm_fd, unsigned long int iterations)
-{
-	fd_set rd_fds, wr_fds;
-	struct timeval timeout = {0, TIMEOUT};
-	int msg_len, cmp_status = 0, ch;
-	unsigned long int loops = 0, index;
-	VpOptionLoopbackType lp = VP_OPTION_LB_TIMESLOT;
-
-	if (tdm_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return;
-	}
-
-	/* Put SLIC/s in loopback mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_option(1, ch, GET_DEVICE(ch), VP_OPTION_ID_LOOPBACK, &lp);
-
-	/* Wait a bit */
-	sleep(1);
-
-	/* Put SLIC/s in TALK mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_line_state(ch, VP_LINE_TALK);
-
-	/* Fill Tx buffer with incremental pattern */
-	for(ch = 0; ch < total_lines; ch++) {
-		for(index = 0; index < (80 * pcm_bytes); index++)
-			aud_buf[1][index + (80 * pcm_bytes * ch)] = (index+ch+2);
-	}
-
-	if (ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
-		printf("Error, unable to start pcm bus\n");
-		return;
-	}
-
-	while (loops < iterations) {
-		FD_ZERO(&rd_fds);
-		FD_ZERO(&wr_fds);
-		FD_SET(tdm_fd, &rd_fds);
-		FD_SET(tdm_fd, &wr_fds);
-
-		/* Wait for event  */
-		if (select(tdm_fd+1, &rd_fds, &wr_fds, NULL, &timeout) == 0) {
-			printf("Error, timeout while polling(%dusec)\n", TIMEOUT);
-			goto slic_dl_out;
-		}
-
-		/* Write */
-		if (FD_ISSET(tdm_fd, &wr_fds)) {
-			msg_len = write(tdm_fd, aud_buf[1], buff_size);
-			if (msg_len < buff_size) {
-				printf("write() failed\n");
-				goto slic_dl_out;
-			}
-		}
-
-		/* Read */
-		if (FD_ISSET(tdm_fd, &rd_fds)) {
-			memset(aud_buf[0], 0, buff_size);
-			msg_len = read(tdm_fd, aud_buf[0], buff_size);
-			if (msg_len < buff_size) {
-				printf("read() failed\n");
-				goto slic_dl_out;
-			}
-
-			if(loops++ > 3) {
-				for(ch = 0; ch < total_lines; ch++) {
-					if(slic_dl_data_compare(ch)) {
-						printf("\nERROR - data miscompare(loops=%d) !!!\n",loops);
-						cmp_status = 1;
-						goto slic_dl_out;
-					}
-				}
-			}
-		}
-
-		/* Reload timeout */
-		timeout.tv_usec = TIMEOUT;
-	}
-
-slic_dl_out:
-	if(cmp_status == 0)
-		printf("\nDigital loopback test(%d lines) - PASS !!!\n",total_lines);
-
-	if (ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
-		printf("Error, unable to stop pcm bus\n");
-		return;
-	}
-
-	lp = VP_OPTION_LB_OFF;
-
-	/* Disable loopback mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_option(1, ch, GET_DEVICE(ch), VP_OPTION_ID_LOOPBACK, &lp);
-
-	/* Put SLIC/s in STANDBY mode */
-	for(ch = 0; ch < total_lines; ch++)
-		vpapi_set_line_state(ch, VP_LINE_STANDBY);
-}
-
-static inline int slic_dl_data_compare(int ch)
-{
-	int i = 0, offset = (ch * pcm_bytes * 80);
-
-	/* Align Tx & Rx data start */
-	while((aud_buf[1][offset] != aud_buf[0][offset+i]) && (i < (pcm_bytes * 80)))
-		i++;
-
-	if(i >= (offset + (pcm_bytes * 80))) {
-		printf("\nError, first Tx byte not found inside Rx buffer\n");
-		return -1;
-	}
-
-	if(memcmp(&aud_buf[0][offset+i], &aud_buf[1][offset], ((pcm_bytes * 80) - i))) {
-		printf("\nDump buffers:\n");
-		for(i = offset; i < (offset +(pcm_bytes * 80)); i++)
-			printf("write[%d] = 0x%x, read[%d] = 0x%x\n", i, aud_buf[1][i], i, aud_buf[0][i]);
-		return -1;
-	} else {
-		return 0;
-	}
-}
-
-static void sw_loopback(int tdm_fd, unsigned char line_id)
-{
-	fd_set rd_fds, wr_fds;
-	struct timeval timeout = {0, TIMEOUT};
-	int msg_len;
-
-	if (tdm_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return;
-	}
-
-	/* Wait until line goes off-hook */
-	while(hook_state[line_id] == 0) {
-		wait_for_vpapi_event();
-	}
-
-	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
-		printf("Error, unable to start pcm bus\n");
-		return;
-	}
-
-	while(hook_state[line_id] == 1) {
-		FD_ZERO(&rd_fds);
-		FD_ZERO(&wr_fds);
-		FD_SET(tdm_fd, &rd_fds);
-		FD_SET(tdm_fd, &wr_fds);
-
-		/* Wait for event  */
-		if (select(tdm_fd+1, &rd_fds, &wr_fds, NULL, &timeout) == 0) {
-			printf("Error, timeout while polling(%dusec)\n", TIMEOUT);
-			return;
-		}
-
-		/* Read */
-		if (FD_ISSET(tdm_fd, &rd_fds)) {
-			printf("Rd\n");
-			msg_len = read(tdm_fd, aud_buf[0], buff_size);
-			if (msg_len <= 0) {
-				printf("read() failed\n");
-				return;
-			}
-			memcpy(BUFF_ADDR(aud_buf[1], line_id), BUFF_ADDR(aud_buf[0], line_id), CH_BUFF_SIZE);
-		}
-
-		/* Write */
-		if (FD_ISSET(tdm_fd, &wr_fds)) {
-			printf("Wr\n");
-			msg_len = write(tdm_fd, aud_buf[1], buff_size);
-			if (msg_len <= 0) {
-				printf("write() failed\n");
-				return;
-			}
-		}
-
-		/* Check hook state */
-		wait_for_vpapi_event();
-
-		/* Reload timeout */
-		timeout.tv_usec = TIMEOUT;
-	}
-
-	if(ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
-		printf("Error, unable to stop pcm bus\n");
-		return;
-	}
 }
 
 static void gen_tone(unsigned short freq, unsigned char line_id, unsigned char* tx_buff)
@@ -892,7 +487,7 @@ static void sw_tone_test(int tdm_fd, unsigned char line_id)
 
 		/* Wait until both lines go off-hook */
 		while(hook_state[line_id] == 0) {
-			wait_for_vpapi_event();
+			wait_for_event();
 		}
 
 		if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
@@ -926,7 +521,7 @@ static void sw_tone_test(int tdm_fd, unsigned char line_id)
 			}
 
 			/* Check hook state */
-			wait_for_vpapi_event();
+			wait_for_event();
 
 			/* Reload timeout */
 			timeout.tv_usec = TIMEOUT;
@@ -934,21 +529,20 @@ static void sw_tone_test(int tdm_fd, unsigned char line_id)
 	}
 }
 
-static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line, unsigned char end_line)
+static void sw_loopback(int tdm_fd, unsigned char line_id)
 {
 	fd_set rd_fds, wr_fds;
 	struct timeval timeout = {0, TIMEOUT};
 	int msg_len;
-	unsigned char line_id;
 
 	if (tdm_fd <= 0) {
 		printf("Device %s is not accessible\n", dev_name);
 		return;
 	}
 
-	/* Wait until at least one line goes off-hook */
-	while(offhook_count == 0) {
-		wait_for_vpapi_event();
+	/* Wait until line goes off-hook */
+	while(hook_state[line_id] == 0) {
+		wait_for_event();
 	}
 
 	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
@@ -956,7 +550,7 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 		return;
 	}
 
-	while(offhook_count) {
+	while(hook_state[line_id] == 1) {
 		FD_ZERO(&rd_fds);
 		FD_ZERO(&wr_fds);
 		FD_SET(tdm_fd, &rd_fds);
@@ -970,20 +564,18 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 
 		/* Read */
 		if (FD_ISSET(tdm_fd, &rd_fds)) {
+			printf("Rd\n");
 			msg_len = read(tdm_fd, aud_buf[0], buff_size);
 			if (msg_len <= 0) {
 				printf("read() failed\n");
 				return;
 			}
-
-			for(line_id = start_line; line_id < end_line; line_id+=2) {
-				memcpy(BUFF_ADDR(aud_buf[1], line_id), BUFF_ADDR(aud_buf[0], (line_id+1)), CH_BUFF_SIZE);
-				memcpy(BUFF_ADDR(aud_buf[1], (line_id+1)), BUFF_ADDR(aud_buf[0], line_id), CH_BUFF_SIZE);
-			}
+			memcpy(BUFF_ADDR(aud_buf[1], line_id), BUFF_ADDR(aud_buf[0], line_id), CH_BUFF_SIZE);
 		}
 
 		/* Write */
 		if (FD_ISSET(tdm_fd, &wr_fds)) {
+			printf("Wr\n");
 			msg_len = write(tdm_fd, aud_buf[1], buff_size);
 			if (msg_len <= 0) {
 				printf("write() failed\n");
@@ -992,7 +584,7 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 		}
 
 		/* Check hook state */
-		wait_for_vpapi_event();
+		wait_for_event();
 
 		/* Reload timeout */
 		timeout.tv_usec = TIMEOUT;
@@ -1017,7 +609,7 @@ static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigne
 
 	/* Wait until both lines go off-hook */
 	while((hook_state[line0] == 0) || (hook_state[line1] == 0)) {
-		wait_for_vpapi_event();
+		wait_for_event();
 	}
 
 	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
@@ -1058,7 +650,7 @@ static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigne
 		}
 
 		/* Check hook state */
-		wait_for_vpapi_event();
+		wait_for_event();
 
 		/* Reload timeout */
 		timeout.tv_usec = TIMEOUT;
@@ -1070,332 +662,100 @@ static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigne
 	}
 }
 
-static int vpapi_init(void)
-{
-	int i = 0;
-	VpDeviceIdType dev_id = 0;
-	VpLineIdType line_id = 0;
-	VpStatusType status;
-	vpapi_init_device_params_t params;
-
-	/* Check params */
-	if(total_lines > MAX_LINES) {
-		printf("## Error, total number of lines(%d) exceeded maximum(%d) ##\n", total_lines, MAX_LINES);
-		return -1;
-	}
-
-	/* Set lines status to on-hook */
-	memset(hook_state, 0, MAX_LINES);
-
-	cal_devs = 0;
-#ifdef LINE_CALIBRATION_SUPPORT
-	cal_lines = 0;
-#endif
-	/* Fill time slot table */
-	memset(time_slot_table, 0, MAX_LINES);
-	for(i = 0; i < total_lines; i++)
-		time_slot_table[i] = ((i+1) * pcm_bytes); /* skip slot #0 */
-
-	/* Extract PCM format */
-	switch(pcm_bytes) {
-		case 1:
-			codec = VP_OPTION_ALAW;
-			break;
-		case 2:
-			codec = VP_OPTION_LINEAR;
-			break;
-		case 4:
-			codec = VP_OPTION_WIDEBAND;
-			break;
-		default:
-			codec = VP_OPTION_ALAW;
-			printf("## Warning, wrong PCM size - set to default(ALAW) ##\n");
-			break;
-	}
-
-#if defined(ZARLINK_SLIC_VE792)
-	/* Bring up the power supply */
-	if(vpapi_battary_on(VBH, VBL, VBP)) {
-		printf("## Error, VE792 power supply could not initialized properly ##\n");
-		return -1;
-	}
-#endif
-	/* Create max device objects */
-	for(dev_id = 0; dev_id < total_devs; dev_id++) {
-		status = vpapi_make_dev_object(VP_DEV_SERIES, dev_id);
-		if (status != VP_STATUS_SUCCESS) {
-			printf("## Error, device %d could not initialized properly(status=%d) ##\n", dev_id, status);
-			return -1;
-		}
-
-#if defined(ZARLINK_SLIC_VE792)
-		status = vpapi_map_slac_id(dev_id, 0);
-		if (status != VP_STATUS_SUCCESS) {
-			printf("## Error, SLAC %d could not be mapped(status=%d) ##\n", dev_id, status);
-			return -1;
-		}
-#endif
-		/* Create requested channels for each device */
-		while((line_id < ((dev_id+1)*MAX_DEVICE_LINES)) && (line_id < total_lines)) {
-			status = vpapi_make_line_object(VP_TERM_FXS_GENERIC, line_id);
-			if (status != VP_STATUS_SUCCESS) {
-				printf("## Error, line %d of device %d could not initialized \
-					roperly(status=%d) ##\n", line_id, dev_id, status);
-				return -1;
-			}
-
-			/* Map unique LineId to LineCtx */
-			status = vpapi_map_line_id(line_id);
-
-			if (status != VP_STATUS_SUCCESS) {
-				printf("## Error, line %d for device %d could not \
-					mapped(status=%d) ##\n", line_id, dev_id, status);
-				return -1;
-			}
-			line_id++;
-		}
-
-		params.dev_size = dev_profile_size;
-		params.ac_size = ac_profile_size;
-		params.dc_size = dc_profile_size;
-		params.ring_size = ring_profile_size;
-		params.fxo_ac_size = 0;
-		params.fxo_cfg_size = 0;
-
-		if (pcm_bytes < 4)
-			status = vpapi_init_device(dev_id, DEV_PROFILE, AC_COEFF, DC_COEFF, RING_PROFILE, NULL, NULL, &params);
-		else
-			status = vpapi_init_device(dev_id, DEV_PROFILE, WB_AC_COEFF, DC_COEFF, RING_PROFILE, NULL, NULL, &params);
-
-		if (status != VP_STATUS_SUCCESS) {
-			printf("## Error, device(%d) init failed(status=%d)\n", dev_id, status);
-			return -1;
-		}
-	}
-
-	return 0;
-}
-
-static inline void wait_for_vpapi_event(void)
+static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line, unsigned char end_line)
 {
-	bool status;
-	VpEventType event;
-	VpDeviceIdType dev_id;
-
-	for(dev_id = 0; dev_id < total_devs ; dev_id++) {
-		while(vpapi_get_event(dev_id, &event) == true) {
-			switch(event.eventCategory) {
-				case VP_EVCAT_SIGNALING:
-					switch(event.eventId) {
-						case VP_LINE_EVID_HOOK_OFF:
-							if(cal_devs == total_devs) {
-								printf("off-hook(%d)\n", event.lineId);
-								hook_state[event.lineId] = 1;
-								offhook_count++;
-								vpapi_set_line_state(event.lineId, VP_LINE_TALK);
-							}
-							break;
-
-						case VP_LINE_EVID_HOOK_ON:
-							if(cal_devs == total_devs) {
-								printf("on-hook(%d)\n", event.lineId);
-								hook_state[event.lineId] = 0;
-								offhook_count--;
-								vpapi_set_line_state(event.lineId, VP_LINE_STANDBY);
-							}
-							break;
-
-						default:
-							/*printf("Unknown SIGNALING event[id-0x%x][lineId-%d]\n",event.eventId, event.lineId);*/
-							break;
-					}
-					break;
-
-				case VP_EVCAT_RESPONSE:
-					switch(event.eventId) {
-						case VP_DEV_EVID_DEV_INIT_CMP:
-							printf("Zarlink telephony device(%d) initialized successfully\n", event.deviceId);
-							vpapi_dev_init(event.deviceId);
-							cal_devs++;
-							break;
-
-						case VP_EVID_CAL_CMP:
-#ifdef LINE_CALIBRATION_SUPPORT
-							cal_lines++;
-							if(cal_lines == total_lines) {
-								/*VpOptionLoopbackType lp = VP_OPTION_LB_TIMESLOT;
-								vpapi_set_option(1, 0, 0, VP_OPTION_ID_LOOPBACK, &lp); */
-								printf("Zarlink telephony lines(%d) calibrated successfully\n", total_lines);
-								vpapi_init_done();
-							}
-#endif
-							break;
-
-						default:
-							/*printf("Unknown RESPONSE event[id-0x%x][lineId-%d]\n",event.eventId, event.lineId);*/
-							break;
-					}
-					break;
-
-				case VP_EVCAT_FAULT:
-					printf("Got FAULT event[id-0x%x][lineId-%d]\n",event.eventId, event.lineId);
-					break;
+	fd_set rd_fds, wr_fds;
+	struct timeval timeout = {0, TIMEOUT};
+	int msg_len;
+	unsigned char line_id;
 
-				default:
-					printf("Got event[category-0x%x][id-%d]\n",event.eventCategory,event.eventId);
-					break;
-			}
-		}
+	if (tdm_fd <= 0) {
+		printf("Device %s is not accessible\n", dev_name);
+		return;
 	}
-}
 
-static void vpapi_init_done(void)
-{
-	VpStatusType status;
-	VpDeviceIdType dev_id;
-	VpLineIdType line_id, base_line_id;
-
-	for (dev_id = 0; dev_id < total_devs; dev_id++) {
-		base_line_id = (dev_id * MAX_DEVICE_LINES);
-		for (line_id = base_line_id; line_id < (base_line_id + MAX_DEVICE_LINES); line_id++) {
-			/* Set CODEC options */
-			status = vpapi_set_option(1, line_id, dev_id, VP_OPTION_ID_CODEC, &codec);
-			if(status != VP_STATUS_SUCCESS) {
-				printf("## Error setting VP_OPTION_ID_CODEC (%d) ##\n", status);
-				return;
-			}
-		}
+	/* Wait until at least one line goes off-hook */
+	while(offhook_count == 0) {
+		wait_for_event();
 	}
 
-	return;
-}
-
-static void vpapi_dev_init(VpDeviceIdType dev_id)
-{
-	VpOptionEventMaskType event_mask;
-	VpStatusType status;
-	VpOptionTimeslotType time_slot;
-	VpLineIdType line_id;
-
-	/* Clear all events */
-	memset(&event_mask, 0xff, sizeof(VpOptionEventMaskType));
-
-	event_mask.faults = (unsigned short)VP_EVCAT_FAULT_UNMASK_ALL;
-	event_mask.signaling = (unsigned short)(~(VP_LINE_EVID_HOOK_OFF | VP_LINE_EVID_HOOK_ON));
-#ifdef LINE_CALIBRATION_SUPPORT
-	event_mask.response = (unsigned short)(~VP_EVID_CAL_CMP);
-#endif
-	status = vpapi_set_option(0, N_A, dev_id, VP_OPTION_ID_EVENT_MASK, &event_mask);
-	if(status != VP_STATUS_SUCCESS) {
-		printf("## Error while setting VP_OPTION_ID_EVENT_MASK (%d) ##\n", status);
+	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
+		printf("Error, unable to start pcm bus\n");
 		return;
 	}
 
-	line_id = (dev_id * MAX_DEVICE_LINES);
-	while((line_id < ((dev_id+1)*MAX_DEVICE_LINES)) && (line_id < total_lines)) {
-		vpapi_set_line_state(line_id, VP_LINE_STANDBY);
-
-		/* Configure PCM timeslots */
-		time_slot.tx = time_slot.rx = time_slot_table[line_id];
-
-		/*printf("## INFO: line(%d): rx-slot(%d) , tx-slot(%d) ##\n", line_id, time_slot.rx, time_slot.tx);*/
+	while(offhook_count) {
+		FD_ZERO(&rd_fds);
+		FD_ZERO(&wr_fds);
+		FD_SET(tdm_fd, &rd_fds);
+		FD_SET(tdm_fd, &wr_fds);
 
-		status = vpapi_set_option(1, line_id, dev_id, VP_OPTION_ID_TIMESLOT, &time_slot);
-		if(status != VP_STATUS_SUCCESS) {
-			printf("## Error setting VP_OPTION_ID_TIMESLOT (%d) ##\n", status);
-			return;
-		}
-#if 0
-		/* Set CODEC options */
-		status = vpapi_set_option(1, line_id, dev_id, VP_OPTION_ID_CODEC, &codec);
-		if(status != VP_STATUS_SUCCESS) {
-			printf("## Error setting VP_OPTION_ID_CODEC (%d) ##\n", status);
+		/* Wait for event  */
+		if (select(tdm_fd+1, &rd_fds, &wr_fds, NULL, &timeout) == 0) {
+			printf("Error, timeout while polling(%dusec)\n", TIMEOUT);
 			return;
 		}
-#endif
-#ifdef LINE_CALIBRATION_SUPPORT
-		/* Start line calibration */
-		vpapi_cal_line(line_id);
-#endif
-		line_id++;
-	}
-}
 
-static void vpapi_release(void)
-{
-	VpDeviceIdType dev_id = 0;
-	VpLineIdType line_id = 0;
-	VpOptionEventMaskType event_mask;
-	VpStatusType status;
-
-
-	/* Clear all events */
-	memset(&event_mask, 0xff, sizeof(VpOptionEventMaskType));
-
-	for(dev_id = 0; dev_id < total_devs; dev_id++) {
-		/* Mask all interrupts */
-		status = vpapi_set_option(0, N_A, dev_id, VP_OPTION_ID_EVENT_MASK, &event_mask);
+		/* Read */
+		if (FD_ISSET(tdm_fd, &rd_fds)) {
+			msg_len = read(tdm_fd, aud_buf[0], buff_size);
+			if (msg_len <= 0) {
+				printf("read() failed\n");
+				return;
+			}
 
-		if(status != VP_STATUS_SUCCESS) {
-			printf("Error while setting VP_OPTION_ID_EVENT_MASK (%d)\n", status);
-			continue;
+			for(line_id = start_line; line_id < end_line; line_id+=2) {
+				memcpy(BUFF_ADDR(aud_buf[1], line_id), BUFF_ADDR(aud_buf[0], (line_id+1)), CH_BUFF_SIZE);
+				memcpy(BUFF_ADDR(aud_buf[1], (line_id+1)), BUFF_ADDR(aud_buf[0], line_id), CH_BUFF_SIZE);
+			}
 		}
 
-		while((line_id < ((dev_id+1)*MAX_DEVICE_LINES)) && (line_id < total_lines)) {
-			/* Place each line in DISCONNECT state */
-			vpapi_set_line_state(line_id, VP_LINE_DISCONNECT);
-
-			/* Free line context */
-			status = vpapi_free_line_context(line_id);
-			if(status != VP_STATUS_SUCCESS) {
-				printf("Error while free line %d context\n", line_id);
-				continue;
+		/* Write */
+		if (FD_ISSET(tdm_fd, &wr_fds)) {
+			msg_len = write(tdm_fd, aud_buf[1], buff_size);
+			if (msg_len <= 0) {
+				printf("write() failed\n");
+				return;
 			}
-			line_id++;
 		}
-	}
-#if defined(ZARLINK_SLIC_VE792)
-	/* Shut down the power supply */
-	if(vpapi_battery_off()) {
-		printf("## Error while shutting down VE792 power supply ##\n");
-		sleep(1);
-	}
-#endif
-}
 
-#if defined(MV_TDM_USE_DCO)
-static void set_tdm_clk_config(void)
-{
-	tdm_dev_clk_t tdm_dev_clk;
+		/* Check hook state */
+		wait_for_event();
 
-	/* Config TDM clock */
-	if(ioctl(tdm_fd, TDM_DEV_TDM_CLK_CONFIG, &tdm_dev_clk)) {
-		printf("%s Error, unable to config TDM clock.\n", TOOL_PREFIX);
+		/* Reload timeout */
+		timeout.tv_usec = TIMEOUT;
 	}
-}
 
-static int get_tdm_clk_correction(void)
-{
-	tdm_dev_clk_t tdm_dev_clk;
-
-	/* Get TDM clock */
-	if(ioctl(tdm_fd, TDM_DEV_TDM_CLK_GET, &tdm_dev_clk)) {
-		printf("%s Error, unable to get TDM clock.\n", TOOL_PREFIX);
-		return 0;
+	if(ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+		printf("Error, unable to stop pcm bus\n");
+		return;
 	}
-
-	return tdm_dev_clk.correction;
 }
 
-static void set_tdm_clk_correction(int correction)
+static void wait_for_event(void)
 {
-	tdm_dev_clk_t tdm_dev_clk;
-
-	tdm_dev_clk.correction=correction;
-
-	/* Set TDM clock */
-	if(ioctl(tdm_fd, TDM_DEV_TDM_CLK_SET, &tdm_dev_clk)) {
-		printf("%s Error, unable to set TDM clock.\n", TOOL_PREFIX);
+	tapi_event_t event;
+
+	tapi_get_event(th, -1, &event);
+	switch (event.event) {
+	case TAPI_EVENT_FXS_ONHOOK:
+		printf("on-hook(%d)\n", event.channel);
+		hook_state[event.channel] = 0;
+		offhook_count--;
+		tapi_line_feed_set(th, event.device, event.channel,
+							TAPI_LINE_FEED_STANDBY);
+		break;
+	case TAPI_EVENT_FXS_OFFHOOK:
+		printf("off-hook(%d)\n", event.channel);
+		hook_state[event.channel] = 1;
+		offhook_count++;
+		tapi_line_feed_set(th, event.device, event.channel,
+							TAPI_LINE_FEED_ACTIVE);
+		break;
+	case TAPI_EVENT_CALIBRATION_END:
+		cal_lines += 1;
+		break;
+	default:
+		break;
 	}
 }
-#endif
diff --git a/tools/voice/lantiq/kernel/mv_voice_tool.h b/tools/voice/lantiq/kernel/mv_voice_tool.h
deleted file mode 100644
index 82473d3..0000000
--- a/tools/voice/lantiq/kernel/mv_voice_tool.h
+++ /dev/null
@@ -1,84 +0,0 @@
-/*******************************************************************************
-Copyright (C) Marvell International Ltd. and its affiliates
-
-This software file (the "File") is owned and distributed by Marvell
-International Ltd. and/or its affiliates ("Marvell") under the following
-alternative licensing terms.  Once you have made an election to distribute the
-File under one of the following license alternatives, please (i) delete this
-introductory statement regarding license alternatives, (ii) delete the two
-license alternatives that you have not elected to use and (iii) preserve the
-Marvell copyright notice above.
-
-********************************************************************************
-Marvell Commercial License Option
-
-If you received this File from Marvell and you have entered into a commercial
-license agreement (a "Commercial License") with Marvell, the File is licensed
-to you under the terms of the applicable Commercial License.
-
-********************************************************************************
-Marvell GPL License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File in accordance with the terms and conditions of the General
-Public License Version 2, June 1991 (the "GPL License"), a copy of which is
-available along with the File in the license.txt file or by writing to the Free
-Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
-on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
-
-THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
-WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
-DISCLAIMED.  The GPL License provides additional details about this warranty
-disclaimer.
-********************************************************************************
-Marvell BSD License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File under the following licensing terms.
-Redistribution and use in source and binary forms, with or without modification,
-are permitted provided that the following conditions are met:
-
-    *   Redistributions of source code must retain the above copyright notice,
-	    this list of conditions and the following disclaimer.
-
-    *   Redistributions in binary form must reproduce the above copyright
-        notice, this list of conditions and the following disclaimer in the
-        documentation and/or other materials provided with the distribution.
-
-    *   Neither the name of Marvell nor the names of its contributors may be
-        used to endorse or promote products derived from this software without
-        specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-******************************************************************************/
-
-#ifndef _MVZARLINKIF_H_
-#define _MVZARLINKIF_H_
-
-#include "mvSysTdmConfig.h"
-#include "voiceband/mvSysTdmSpi.h"
-
-MV_STATUS mvZarlinkIfInit(MV_U16 totalSLICs, MV_U16 pSlotInfo[][2],
-				MV_BAND_MODE bandMode, MV_PCM_FORMAT pcmFormat);
-MV_STATUS mvZarlinkIfTimerTick(MV_SLIC_EVENT_INFO* slic_event_info);
-MV_VOID mvZarlinkIfISR(MV_U8 deviceId);
-MV_VOID mvZarlinkIfActivateRinging(MV_U16 lineId);
-MV_VOID mvZarlinkIfStopRinging(MV_U16 lineId);
-MV_VOID mvZarlinkIfHookStateGet(MV_U16 lineId, MV_U8* hookstate);
-MV_VOID mvZarlinkIfLinefeedControlSet(MV_U16 lineId, MV_LINEFEED_STATE lfState);
-MV_VOID mvZarlinkIfLinefeedControlGet(MV_U16 lineId, MV_LINEFEED_STATE* lfState);
-MV_VOID mvZarlinkIfReverseDcPolarity(MV_U16 lineId);
-MV_VOID mvZarlinkIfRelease(MV_VOID);
-MV_VOID mvZarlinkIfRegRead(MV_U8 lineId, MV_U8 cmd, MV_U8 cmdLen,MV_U8* dataBuff);
-
-#endif /* _MVZARLINKIF_H_ */
diff --git a/tools/voice/lantiq/kernel/profile_79238.c b/tools/voice/lantiq/kernel/profile_79238.c
deleted file mode 100644
index 4483f39..0000000
--- a/tools/voice/lantiq/kernel/profile_79238.c
+++ /dev/null
@@ -1,1248 +0,0 @@
-/*
- * profile_79238.c --
- *
- * This file contains profile data in byte format
- *
- * Project Info --
- *   File:  C:\Documents and Settings\benavi\Desktop\profile_792\792.vpw
- *   Type:  VCP2-792 Project (Line Module Le51HR0128)
- *   Date:  Wednesday, June 30, 2010 14:29:56
- *
- *   This file was generated with Profile Wizard Version: P1.14.1
- */
-
-#include "profile_79238.h"
-
-/*** Device_Parameters for VE792 Device Family ***/
-const VpProfileDataType VE792_DEV_PROFILE[] =
-{
-    /* Device Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0xFF,       /* 0xFF = device profile */
-        /* number of sections */    0x02,
-        /* content length */        0x24,        /* (2 + 5) + (2 + 27)      */
-    /* Section 0 ----------------------------------------------(PRE-BOOT)-- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x05,
-        /* Access 0 */
-            /* access type */       0x00,       /* 0x00 = direct page write */
-            /* page offset */       0x0B,       /* CLK_CFG register */
-            /* length */            0x01,
-            /* data */              0x00, 0x0A, /* PCLK = 8192 KHz */
-    /* Section 1 ---------------------------------------------(POST-BOOT)-- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x1B,       /* 5 + 11 + 11 */
-        /* Access 0 */
-            /* access type */       0x00,       /* 0x00 = direct page write */
-            /* page offset */       0x09,       /* PCM_CFG register */
-            /* length */            0x01,
-            /* data */              0x00, 0x40, /* Pos. edge, RCS 0, TCS 0 */
-        /* Access 1 */
-            /* access type */       0x00,       /* 0x00 = direct page write */
-            /* page offset */       0x32,       /* HBAT_ADJ + TBAT register */
-            /* length */            0x04,
-            /* data */              0x00, 0x00, /* HBAT_ADJ = 0 V */
-            /* data */              0xEC, 0xCD, /* THBAT = -30 V */
-            /* data */              0xF6, 0x66, /* TLBAT = -15 V */
-            /* data */              0x13, 0x33, /* TPBAT = 30 V */
-        /* Access 2 */
-            /* access type */       0x00,       /* 0x00 = direct page write */
-            /* page offset */       0x38,
-            /* length */            0x04,
-            /* data */              0x7F, 0xFF,
-            /* data */              0x7F, 0xFF,
-            /* data */              0x7F, 0xFF,
-            /* data */              0x00, 0x00
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/************** AC_Coefficients **************/
-
-/* AC Parameters (600) */
-const VpProfileDataType VE792_AC_COEFF_600[] =
-{
-    /* AC Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x01,
-        /* type */                  0x00,       /* 0x00 = AC profile */
-        /* number of sections */    0x01,
-        /* content length */        0x74,     /* (2 + 81) + 1 + 32 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x01,       /* 0x01 = mailbox command */
-        /* content length */        0x51,       /* 81 */
-        /* command ID */            0x2A,       /* 0x2A = WR_AC_PARAM */
-        /* data */
-            /* AC_MASK */           0x01, 0xFF,
-            /* Z FIR */             0x00, 0x22, 0xBA, 0x74, 0x45, 0x3E, 0x33,
-                                    0x5A, 0x24, 0xDC, 0x4B,
-            /* Z IIR */             0x22, 0x22, 0x97, 0x9F, 0x01,
-            /* GR */                0xA2, 0xA0,
-            /* R IIR */             0xDC, 0x01,
-            /* R FIR */             0x2A, 0x10, 0xAD, 0xC9, 0x22, 0x27, 0x22,
-                                    0x52, 0x3F, 0xBA, 0xC3, 0xB4,
-            /* B FIR */             0x00, 0x3C, 0x7A, 0x4B, 0xAF, 0x9A, 0xA9,
-                                    0xC6, 0xBA, 0x37, 0x24, 0x6B, 0x8F, 0x3B,
-                                    0x70,
-            /* B IIR */             0x2E, 0x01,
-            /* GX */                0x3A, 0x30,
-            /* X FIR */             0x3D, 0x20, 0x9F, 0x2A, 0xA3, 0x4E, 0x4B,
-                                    0x23, 0x52, 0xAB, 0xBB, 0x97, 0x00,
-            /* AISN */              0x00, 0x05,
-            /* DISN */              0x00, 0x01, 0x00, 0x07, 0x00, 0x6F, 0x00,
-                                    0x1C, 0x00, 0x80,
-            /* MTR_CFG */           0x00, 0x00,
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00,         /* VP_CFG2 bit LRG = 0 */
-        /* Meter LUT */             0x11, 0x5F,   /* Shadow Register 1 12KHz 2/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x11, 0x2F,   /* Shadow Register 1 12KHz 4/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x11, 0x77,   /* Shadow Register 1 12KHz 6/8 */
-                                    0x08, 0x0C,   /* Shadow Register 2 */
-        /* Meter LUT */             0x11, 0x77,   /* Shadow Register 1 12KHz 8/8 */
-                                    0x0C, 0x12,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x9F,   /* Shadow Register 1 16KHz 2/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x67,   /* Shadow Register 1 16KHz 4/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x2F,   /* Shadow Register 1 16KHz 6/8 */
-                                    0x08, 0x0C,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x2F,   /* Shadow Register 1 16KHz 8/8 */
-                                    0x0C, 0x12    /* Shadow Register 2 */
-
-};
-
-/* AC Parameters (900) */
-const VpProfileDataType AC_COEFF_900[] =
-{
-    /* AC Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x01,
-        /* type */                  0x00,       /* 0x00 = AC profile */
-        /* number of sections */    0x01,
-        /* content length */        0x74,     /* (2 + 81) + 1 + 32 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x01,       /* 0x01 = mailbox command */
-        /* content length */        0x51,       /* 81 */
-        /* command ID */            0x2A,       /* 0x2A = WR_AC_PARAM */
-        /* data */
-            /* AC_MASK */           0x01, 0xFF,
-            /* Z FIR */             0x00, 0x4A, 0xCA, 0xBD, 0xA5, 0x43, 0x23,
-                                    0x2B, 0xA3, 0xC2, 0x3B,
-            /* Z IIR */             0xA3, 0xA1, 0x97, 0x9F, 0x01,
-            /* GR */                0xA2, 0xB0,
-            /* R IIR */             0xDC, 0x01,
-            /* R FIR */             0x3A, 0x10, 0xAD, 0xD9, 0xC3, 0xA7, 0x42,
-                                    0x42, 0xA3, 0xBA, 0x2B, 0xA4,
-            /* B FIR */             0x00, 0xAA, 0x73, 0x4B, 0x2F, 0x9B, 0xA9,
-                                    0xA5, 0xB3, 0xA6, 0x2A, 0x5C, 0x87, 0xCA,
-                                    0x70,
-            /* B IIR */             0x2E, 0x01,
-            /* GX */                0xA3, 0xA0,
-            /* X FIR */             0x27, 0x20, 0xC2, 0x2A, 0x4A, 0x2E, 0x23,
-                                    0x23, 0x22, 0x2C, 0x2A, 0x87, 0x00,
-            /* AISN */              0x00, 0x0A,
-            /* DISN */              0x00, 0x01, 0x00, 0x07, 0x00, 0x72, 0x00,
-                                    0x35, 0x00, 0x80,
-            /* MTR_CFG */           0x00, 0x00,
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00,         /* VP_CFG2 bit LRG = 0 */
-        /* Meter LUT */             0x11, 0x5F,   /* Shadow Register 1 12KHz 2/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x11, 0x2F,   /* Shadow Register 1 12KHz 4/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x11, 0x77,   /* Shadow Register 1 12KHz 6/8 */
-                                    0x08, 0x0C,   /* Shadow Register 2 */
-        /* Meter LUT */             0x11, 0x77,   /* Shadow Register 1 12KHz 8/8 */
-                                    0x0C, 0x12,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x9F,   /* Shadow Register 1 16KHz 2/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x67,   /* Shadow Register 1 16KHz 4/8 */
-                                    0x06, 0x09,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x2F,   /* Shadow Register 1 16KHz 6/8 */
-                                    0x08, 0x0C,   /* Shadow Register 2 */
-        /* Meter LUT */             0x01, 0x2F,   /* Shadow Register 1 16KHz 8/8 */
-                                    0x0C, 0x12    /* Shadow Register 2 */
-
-};
-
-/************** DC_Parameters **************/
-
-/* DC Parameters */
-const VpProfileDataType VE792_DC_COEFF[] =
-{
-    /* DC Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x01,       /* 0x01 = DC profile */
-        /* number of sections */    0x02,
-        /* content length */        0x25,       /* (2 + 13) + (2 + 20) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x01,       /* 0x01 = mailbox command */
-        /* content length */        0x0D,       /* 13 */
-        /* command ID */            0x2C,       /* 0x2C = WR_DC_PARAM */
-        /* data */                  0x11, 0x11, /* V1 */
-        /* data */                  0x11, 0xEC, /* VAS */
-        /* data */                  0x01, 0x1C, /* VAS_OFFSET */
-        /* data */                  0x55, 0x55, /* RFD */
-        /* data */                  0x80, 0x00, /* RPTC */
-        /* data */                  0x49, 0x25, /* ILA */
-    /* Section 1 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x14,       /* 20 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x33,       /* LOOP_SUP register */
-            /* length */            0x06,
-            /* data */              0xF3, 0x33, /* TGK */
-            /* data */              0x00, 0xC8, /* PGK */
-            /* data */              0x0B, 0xB8, /* TSH */
-            /* data */              0x00, 0x1E, /* DSH */
-            /* data */              0x40, 0x00, /* IFTA */
-            /* data */              0x0C, 0xCD, /* IFTD */
-        /* Access 1 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x3C,       /* LOOP_SUP register, HSH */
-            /* length */            0x01,
-            /* data */              0x03, 0xE8  /* HSH */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/************** Ring_Parameters **************/
-
-/* Ringing 20Hz, Sine Wave, 40Vrms */
-const VpProfileDataType RING_20HZ_SINE[] =
-{
-    /* Ring Profile */
-    /* Balanced, Sinusoidal, Crest Factor 1.4142 */
-    /* 20 Hz, 82.86 Vpk, 15.33 V Tip Bias, 4.67 V Ring Bias */
-    /* Ring Trip: Short Loop 41.9 mA, Long Loop 8 mA */
-    /*            Current Spike Threshold 100 mA */
-    /*            Averaging Period 50 ms */
-    /* Ring Exit Hook Switch Debounce: Threshold 0 ms, Duration 0 ms */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x04,       /* 0x04 = ringing profile */
-        /* number of sections */    0x01,
-        /* content length */        0x22,       /* (2 + 32) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x20,       /* 32 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x22,       /* RING register */
-            /* length */            0x0B,       /* 11 */
-            /* data */              0x30, 0x00, /* R control / FRQR[23:16] */
-            /* data */              0xA3, 0xD7, /* FRQR[15:0] */
-            /* data */              0x46, 0xB6, /* AMPR */
-            /* data */              0x0D, 0x15, /* RBA */
-            /* data */              0x03, 0xFC, /* RBB */
-            /* data */              0x04, 0x05, /* EBR */
-            /* data */              0x35, 0xAB, /* RTSL */
-            /* data */              0x0A, 0x3D, /* RTLL */
-            /* data */              0x00, 0x19, /* RTAP */
-            /* data */              0x00, 0x00, /* RSVD */
-            /* data */              0x7F, 0xFF, /* IST */
-        /* Access 1 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x3A,       /* REDSH, REDD */
-            /* length */            0x02,
-            /* data */              0x00, 0x00, /* REDSH */
-            /* data */              0x00, 0x00  /* REDD */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Ringing 25Hz, Sine Wave, 40Vrms */
-const VpProfileDataType RING_25HZ_SINE[] =
-{
-    /* Ring Profile */
-    /* Balanced, Sinusoidal, Crest Factor 1.4142 */
-    /* 25 Hz, 66.31 Vpk, 15.33 V Tip Bias, 4.67 V Ring Bias */
-    /* Ring Trip: Short Loop 19 mA, Long Loop 8 mA */
-    /*            Current Spike Threshold 100 mA */
-    /*            Averaging Period 40 ms */
-    /* Ring Exit Hook Switch Debounce: Threshold 0 ms, Duration 0 ms */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x04,       /* 0x04 = ringing profile */
-        /* number of sections */    0x01,
-        /* content length */        0x22,       /* (2 + 32) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x20,       /* 32 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x22,       /* RING register */
-            /* length */            0x0B,       /* 11 */
-            /* data */              0x30, 0x00, /* R control / FRQR[23:16] */
-            /* data */              0xCC, 0xCD, /* FRQR[15:0] */
-            /* data */              0x38, 0x97, /* AMPR */
-            /* data */              0x0D, 0x15, /* RBA */
-            /* data */              0x03, 0xFC, /* RBB */
-            /* data */              0x04, 0x05, /* EBR */
-            /* data */              0x18, 0x49, /* RTSL */
-            /* data */              0x0A, 0x3D, /* RTLL */
-            /* data */              0x00, 0x14, /* RTAP */
-            /* data */              0x00, 0x00, /* RSVD */
-            /* data */              0x7F, 0xFF, /* IST */
-        /* Access 1 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x3A,       /* REDSH, REDD */
-            /* length */            0x02,
-            /* data */              0x00, 0x00, /* REDSH */
-            /* data */              0x00, 0x00  /* REDD */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/************** Call_Progress_Tones **************/
-
-/* US Dial Tone */
-const VpProfileDataType TONE_DIAL[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x0B,
-            /* data */              0x33, 0x33, /* FreqA = 350Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x0E, 0x14, /* FreqB = 440Hz */
-            /* data */              0x13, 0xE3, /* AmpB  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x03  /* Generator control = AB */
-};
-
-/* US Ringback Tone */
-const VpProfileDataType TONE_RINGBACK[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x0E,
-            /* data */              0x14, 0x7B, /* FreqA = 440Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x0F, 0x5C, /* FreqB = 480Hz */
-            /* data */              0x13, 0xE3, /* AmpB  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x03  /* Generator control = AB */
-};
-
-/* US Busy Tone */
-const VpProfileDataType TONE_BUSY[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x0F,
-            /* data */              0x5C, 0x29, /* FreqA = 480Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x13, 0xD7, /* FreqB = 620Hz */
-            /* data */              0x13, 0xE3, /* AmpB  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x03  /* Generator control = AB */
-};
-
-/* US Reorder Tone */
-const VpProfileDataType TONE_REORDER[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x0F,
-            /* data */              0x5C, 0x29, /* FreqA = 480Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x13, 0xD7, /* FreqB = 620Hz */
-            /* data */              0x13, 0xE3, /* AmpB  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x03  /* Generator control = AB */
-};
-
-/* US Howler Tone (ROH) */
-const VpProfileDataType TONE_US_HOWLER[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x2C,
-            /* data */              0xCC, 0xCD, /* FreqA = 1400Hz */
-            /* data */              0x58, 0xD6, /* AmpA  = 0dBm0 */
-            /* data */              0x41, 0xEC, /* FreqB = 2060Hz */
-            /* data */              0x58, 0xD6, /* AmpB  = 0dBm0 */
-            /* data */              0x4E, 0x66, /* FreqC = 2450Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x53, 0x33, /* FreqD = 2600Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x0F  /* Generator control = ABCD */
-};
-
-/* UK Howler Tone */
-const VpProfileDataType TONE_UK_HOWLER[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x13,       /* (2 + 15) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x0F,       /* 15 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x02,       /* SIG_GEN register */
-            /* length */            0x06,
-            /* data */              0x34, 0xCD, /* 1650Hz Offset */
-            /* data */              0x20, 0x00, /* Periodic, Linear */
-            /* data */              0x08, 0x31, /* FreqA = 1Hz */
-            /* data */              0x1B, 0x33, /* AmpA = 850Hz */
-            /* data */              0x80, 0x00, /* FreqB = Freq Modulated */
-            /* data */              0x00, 0x00, /* AmpB = Sequence control */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x13  /* Generators = Bias+AB */
-};
-
-/* Australia Howler Tone */
-const VpProfileDataType TONE_AUS_HOWLER[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x13,       /* (2 + 15) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x0F,       /* 15 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x02,       /* SIG_GEN register */
-            /* length */            0x06,
-            /* data */              0x4B, 0x33, /* 2350Hz Offset */
-            /* data */              0x20, 0x00, /* Periodic, Linear */
-            /* data */              0x08, 0x31, /* FreqA = 1Hz */
-            /* data */              0x1B, 0x33, /* AmpA = 850Hz */
-            /* data */              0x80, 0x00, /* FreqB = Freq Modulated */
-            /* data */              0x00, 0x00, /* AmpB = Sequence control */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x13  /* Generators = Bias+AB */
-};
-
-/* Japan Howler Tone */
-const VpProfileDataType TONE_NTT_HOWLER[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x11,       /* (2 + 13) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x0D,       /* 13 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x05,
-            /* data */              0x00, 0x00, /* One-shot, Linear */
-            /* data */              0x00, 0x23, /* FreqA = 15s Ramp */
-            /* data */              0x7F, 0xFF, /* AmpA = Maximum */
-            /* data */              0x0C, 0xCD, /* FreqB = 400Hz */
-            /* data */              0x80, 0x00, /* AmpB = Ampl Modulated */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x03  /* Generator control = AB */
-};
-
-/* Special Information Tone (Called Number Not Connected) */
-const VpProfileDataType TONE_SIT[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x1E,
-            /* data */              0x66, 0x66, /* FreqA = 950Hz */
-            /* data */              0x23, 0x5D, /* AmpA  = -8dBm0 */
-            /* data */              0x2C, 0xCD, /* FreqB = 1400Hz */
-            /* data */              0x23, 0x5D, /* AmpB  = -8dBm0 */
-            /* data */              0x39, 0x9A, /* FreqC = 1800Hz */
-            /* data */              0x23, 0x5D, /* AmpC  = -8dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x07  /* Generator control = ABC */
-};
-
-/* A 1kHz tone at -10dBm0 */
-const VpProfileDataType TONE_ONEKHZ_L[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x20,
-            /* data */              0x00, 0x00, /* FreqA = 1000Hz */
-            /* data */              0x1C, 0x17, /* AmpA  = -10dBm0 */
-            /* data */              0x00, 0x00, /* FreqB = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpB  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x01  /* Generator control = A */
-};
-
-/* A 1kHz tone at 0dBm0 */
-const VpProfileDataType TONE_ONEKHZ_H[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x20,
-            /* data */              0x00, 0x00, /* FreqA = 1000Hz */
-            /* data */              0x58, 0xD6, /* AmpA  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqB = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpB  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x01  /* Generator control = A */
-};
-
-/* Call Waiting Beep */
-const VpProfileDataType TONE_CALLWAIT[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x0E,
-            /* data */              0x14, 0x7B, /* FreqA = 440Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqB = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpB  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x01  /* Generator control = A */
-};
-
-/* Caller ID Alert Tone */
-const VpProfileDataType TONE_CLI[] =
-{
-    /* Tone Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x02,       /* 0x02 = tone prof */
-        /* number of sections */    0x01,
-        /* content length */        0x19,       /* (2 + 21) + 2 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x15,       /* 21 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x09,
-            /* data */              0x30, 0x44,
-            /* data */              0x28, 0xF6, /* FreqA = 2130Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x58, 0x00, /* FreqB = 2750Hz */
-            /* data */              0x13, 0xE3, /* AmpB  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x03  /* Generator control = AB */
-};
-
-/************** Cadence_Definitions **************/
-
-/* US Dial Tone Cadence */
-const VpProfileDataType TONE_CAD_DIAL[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x06,       /* (2 + 4) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x04,       /* 4 */
-        /* data */                  0x00, 0x00, /* sequence length = 1 */
-        /* data */                  0x05, 0x03, /* 00 - Generator Ctrl */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Stutter Dial Tone Cadence */
-const VpProfileDataType TONE_CAD_STUTTER[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x10,       /* (2 + 14) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x0E,       /* 14 */
-        /* data */                  0x00, 0x05, /* sequence length = 6 */
-        /* data */                  0x05, 0x03, /* 00 - Generator Ctrl */
-        /* data */                  0x40, 0x64, /* 01 - Sequential Delay */
-        /* data */                  0x05, 0x00, /* 02 - Generator Ctrl */
-        /* data */                  0x40, 0x64, /* 03 - Sequential Delay */
-        /* data */                  0x10, 0x60, /* 04 - Branch to 00 */
-        /* data */                  0x05, 0x03, /* 05 - Generator Ctrl */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* US Ringback Tone Cadence */
-const VpProfileDataType TONE_CAD_RINGBACK[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x0E,       /* (2 + 12) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x0C,       /* 12 */
-        /* data */                  0x00, 0x04, /* sequence length = 5 */
-        /* data */                  0x05, 0x03, /* 00 - Generator Ctrl */
-        /* data */                  0x47, 0xD0, /* 01 - Sequential Delay */
-        /* data */                  0x05, 0x00, /* 02 - Generator Ctrl */
-        /* data */                  0x4F, 0xA0, /* 03 - Sequential Delay */
-        /* data */                  0x10, 0x00, /* 04 - Branch to 00 */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* US Busy Tone Cadence */
-const VpProfileDataType TONE_CAD_BUSY[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x0E,       /* (2 + 12) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x0C,       /* 12 */
-        /* data */                  0x00, 0x04, /* sequence length = 5 */
-        /* data */                  0x05, 0x03, /* 00 - Generator Ctrl */
-        /* data */                  0x41, 0xF4, /* 01 - Sequential Delay */
-        /* data */                  0x05, 0x00, /* 02 - Generator Ctrl */
-        /* data */                  0x41, 0xF4, /* 03 - Sequential Delay */
-        /* data */                  0x10, 0x00, /* 04 - Branch to 00 */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* US Reorder Tone Cadence */
-const VpProfileDataType TONE_CAD_REORDER[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x0E,       /* (2 + 12) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x0C,       /* 12 */
-        /* data */                  0x00, 0x04, /* sequence length = 5 */
-        /* data */                  0x05, 0x03, /* 00 - Generator Ctrl */
-        /* data */                  0x40, 0xFA, /* 01 - Sequential Delay */
-        /* data */                  0x05, 0x00, /* 02 - Generator Ctrl */
-        /* data */                  0x40, 0xFA, /* 03 - Sequential Delay */
-        /* data */                  0x10, 0x00, /* 04 - Branch to 00 */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* US Howler Tone Cadence (ROH) */
-const VpProfileDataType TONE_CAD_US_HOWLER[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x0E,       /* (2 + 12) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x0C,       /* 12 */
-        /* data */                  0x00, 0x04, /* sequence length = 5 */
-        /* data */                  0x05, 0x0F, /* 00 - Generator Ctrl */
-        /* data */                  0x40, 0x64, /* 01 - Sequential Delay */
-        /* data */                  0x05, 0x00, /* 02 - Generator Ctrl */
-        /* data */                  0x40, 0x64, /* 03 - Sequential Delay */
-        /* data */                  0x10, 0x00, /* 04 - Branch to 00 */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* UK Howler Tone Cadence */
-const VpProfileDataType TONE_CAD_UK_HOWLER[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = Tone cadence prof */
-        /* number of sections */    0x01,
-        /* content length */        0x38,       /* (2 + 54) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x36,       /* 54 */
-        /* data */                  0x00, 0x19, /* sequence length = 26 */
-        /* data */                  0x05, 0x13,
-        /* data */                  0x82, 0x04,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x82, 0x8A,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x83, 0x33,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x84, 0x07,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x85, 0x12,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x86, 0x62,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x88, 0x09,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x8A, 0x1E,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x8C, 0xBD,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x90, 0x09,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x94, 0x30,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x99, 0x6A,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x9F, 0xFF
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Australia Howler Tone Cadence */
-const VpProfileDataType TONE_CAD_AUS_HOWLER[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = Tone cadence prof */
-        /* number of sections */    0x01,
-        /* content length */        0x44,       /* (2 + 66) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x42,       /* 66 */
-        /* data */                  0x00, 0x1F, /* sequence length = 32 */
-        /* data */                  0x05, 0x13,
-        /* data */                  0x81, 0x03,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x81, 0x46,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x81, 0x9B,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x82, 0x05,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x82, 0x8B,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x83, 0x33,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x84, 0x07,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x85, 0x12,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x86, 0x62,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x88, 0x0A,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x8A, 0x1E,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x8C, 0xBD,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x90, 0x0A,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x94, 0x31,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x99, 0x6B,
-        /* data */                  0x43, 0xE8,
-        /* data */                  0x9F, 0xFF
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Japan Howler Tone Cadence */
-const VpProfileDataType TONE_CAD_NTT_HOWLER[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x06,       /* (2 + 4) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x04,       /* 4 */
-        /* data */                  0x00, 0x00, /* sequence length = 1 */
-        /* data */                  0x05, 0x03, /* 00 - Generator Ctrl */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Special Information Tone Cadence */
-const VpProfileDataType TONE_CAD_SIT[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x03,       /* 0x03 = tone cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x12,       /* (2 + 16) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x10,       /* 16 */
-        /* data */                  0x00, 0x06, /* sequence length = 7 */
-        /* data */                  0x05, 0x01, /* 00 - Generator Ctrl */
-        /* data */                  0x41, 0x2C, /* 01 - Sequential Delay */
-        /* data */                  0x05, 0x02, /* 02 - Generator Ctrl */
-        /* data */                  0x41, 0x2C, /* 03 - Sequential Delay */
-        /* data */                  0x05, 0x04, /* 04 - Generator Ctrl */
-        /* data */                  0x41, 0x2C, /* 05 - Sequential Delay */
-        /* data */                  0x05, 0x00, /* 06 - Generator Ctrl */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Standard Ringing Cadence */
-const VpProfileDataType RING_CAD_STD[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x08,       /* 0x08 = ring cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x12,       /* (2 + 16) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x10,       /* 16 */
-        /* data */                  0x00, 0x06, /* sequence length = 7 */
-        /* data */                  0x02, 0x86, /* 00 - Line State */
-        /* data */                  0x01, 0x3B,
-        /* data */                  0x47, 0xD0, /* 01 - Sequential Delay */
-        /* data */                  0x02, 0x83, /* 02 - Line State */
-        /* data */                  0x01, 0x3B,
-        /* data */                  0x4F, 0xA0, /* 03 - Sequential Delay */
-        /* data */                  0x10, 0x00, /* 04 - Branch to 00 */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Ringing Cadence with CallerID */
-const VpProfileDataType RING_CAD_CID[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x08,       /* 0x08 = ring cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x28,       /* (2 + 38) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x26,       /* 38 */
-        /* data */                  0x00, 0x11, /* sequence length = 18 */
-        /* data */                  0x02, 0x86, /* 00 - Line State */
-        /* data */                  0x01, 0x3B,
-        /* data */                  0x47, 0xD0, /* 01 - Sequential Delay */
-        /* data */                  0x02, 0x83, /* 02 - Line State */
-        /* data */                  0x01, 0x3B,
-        /* data */                  0x0A, 0x00, /* 03 - Relative Time Marker */
-        /* data */                  0x40, 0xC8, /* 04 - Sequential Delay */
-        /* data */                  0x02, 0x85, /* 05 - Line State */
-        /* data */                  0x01, 0x3A,
-        /* data */                  0x01, 0x22, /* 06 - Start CallerID */
-        /* data */                  0x6F, 0xA0, /* 07 - Relative Delay */
-        /* data */                  0x02, 0x86, /* 08 - Line State */
-        /* data */                  0x01, 0x3B,
-        /* data */                  0x47, 0xD0, /* 09 - Sequential Delay */
-        /* data */                  0x02, 0x83, /* 10 - Line State */
-        /* data */                  0x01, 0x3B,
-        /* data */                  0x4F, 0xA0, /* 11 - Sequential Delay */
-        /* data */                  0x10, 0x0B, /* 12 - Branch to 08 */
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/* Ringing Always On */
-const VpProfileDataType RING_CAD_ON[] =
-{
-    /* Cadence Profile */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x08,       /* 0x08 = ring cadence */
-        /* number of sections */    0x01,
-        /* content length */        0x08,       /* (2 + 6) */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequence */
-        /* content length */        0x06,       /* 6 */
-        /* data */                  0x00, 0x01, /* sequence length = 2 */
-        /* data */                  0x02, 0x86, /* 00 - Line State */
-        /* data */                  0x01, 0x3B,
-    /* Unstructured data -------------------------------------------------- */
-        /* none */
-};
-
-/************** Caller_ID **************/
-
-/* US Caller ID Type II */
-const VpProfileDataType CID_TYPE2_US[] =
-{
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x01,
-        /* type */                  0x05,       /* 0x05 = caller ID profile */
-        /* number of sections */    0x04,
-        /* content length */        0x70,       /* 112 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequencer program */
-        /* content length */        0x24,       /* 36 */
-        /* data */                  0x00, 0x10, /* sequence length = 17 */
-        /* data */                  0x01, 0x3B, /* Mute on */
-        /* data */                  0x01, 0x3D, /* Alert tone 300ms */
-        /* data */                  0x41, 0x2C, /* - TONE_CALLWAIT */
-        /* data */                  0x05, 0x00,
-        /* data */                  0x40, 0x0A, /* Silence 10ms */
-        /* data */                  0x01, 0x3E, /* Alert tone 80ms */
-        /* data */                  0x40, 0x50, /* - TONE_CLI */
-        /* data */                  0x05, 0x00,
-        /* data */                  0x01, 0x32, /* Detect interval 160ms */
-        /* data */                  0x40, 0xA0, /* - Tones: A, D */
-        /* data */                  0x09, 0xB2,
-        /* data */                  0x40, 0x64, /* Silence 100ms */
-        /* data */                  0x01, 0x26, /* Send FSK */
-        /* data */                  0x0B, 0x01,
-        /* data */                  0x09, 0x00,
-        /* data */                  0x01, 0x27,
-        /* data */                  0x01, 0x3A, /* Mute off */
-    /* Section 1 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x0E,       /* 14 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x1F,       /* FSK_GEN register */
-            /* length */            0x01,
-            /* data */              0x00, 0x04, /* stop = 1, start = 0 */
-        /* Access 1 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x10,       /* FSK_GEN register */
-            /* length */            0x03,
-            /* data */              0x29, 0x9A, /* mark freq. 1300Hz  */
-                                    0x43, 0x33, /* space freq. 2100Hz */
-                                    0x12, 0xC6, /* amplitude = -13.5dBm0 */
-    /* Section 2 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x17,       /* 23 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x0A,       /* 10 */
-            /* data */              0x30, 0x0E,
-            /* data */              0x14, 0x7B, /* FreqA = 440Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqB = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpB  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-            /* data */              0x00, 0x01, /* Generator control = A */
-    /* Section 3 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x17,       /* 23 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x0A,       /* 10 */
-            /* data */              0x30, 0x44,
-            /* data */              0x28, 0xF6, /* FreqA = 2130Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x58, 0x00, /* FreqB = 2750Hz */
-            /* data */              0x13, 0xE3, /* AmpB  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-            /* data */              0x00, 0x03, /* Generator control = AB */
-    /* Unstructured data -------------------------------------------------- */
-                                    0x00, 0x00, /* 0-bit channel seizure */
-                                    0x00, 0x58, /* 88-bit mark period */
-                                    0x00, 0x0D, /* Detect Tones A, D */
-                                    0x01,       /* API checksum */
-                                    0x00        /* FSK Message Data */
-};
-
-/* UK Caller ID Type I */
-const VpProfileDataType CID_TYPE1_UK[] =
-{
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x01,
-        /* type */                  0x05,       /* 0x05 = caller ID profile */
-        /* number of sections */    0x03,
-        /* content length */        0x55,       /* 85 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequencer program */
-        /* content length */        0x22,       /* 34 */
-        /* data */                  0x00, 0x0F, /* sequence length = 16 */
-        /* data */                  0x40, 0x32, /* Silence 50ms */
-        /* data */                  0x03, 0x00, /* Line Reversal */
-        /* data */                  0x40, 0x64, /* Silence 100ms */
-        /* data */                  0x01, 0x3D, /* Alert tone 100ms */
-        /* data */                  0x40, 0x64, /* - TONE_CLI */
-        /* data */                  0x05, 0x00,
-        /* data */                  0x01, 0x2F, /* Mask hooks 20ms, */
-        /* data */                  0x40, 0x14, /*    Silence 100ms */
-        /* data */                  0x01, 0x2F,
-        /* data */                  0x40, 0x50,
-        /* data */                  0x01, 0x26, /* Send FSK */
-        /* data */                  0x0B, 0x01,
-        /* data */                  0x09, 0x00,
-        /* data */                  0x01, 0x27,
-        /* data */                  0x40, 0xC8, /* Silence 200ms */
-        /* data */                  0x03, 0x00, /* Line Reversal */
-    /* Section 1 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x0E,       /* 14 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x1F,       /* FSK_GEN register */
-            /* length */            0x01,
-            /* data */              0x00, 0x04, /* stop = 1, start = 0 */
-        /* Access 1 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x10,       /* FSK_GEN register */
-            /* length */            0x03,
-            /* data */              0x29, 0x9A, /* mark freq. 1300Hz  */
-                                    0x43, 0x33, /* space freq. 2100Hz */
-                                    0x27, 0xAE, /* amplitude = -7dBm0 */
-    /* Section 2 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x17,       /* 23 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x03,       /* SIG_GEN register */
-            /* length */            0x0A,       /* 10 */
-            /* data */              0x30, 0x44,
-            /* data */              0x28, 0xF6, /* FreqA = 2130Hz */
-            /* data */              0x13, 0xE3, /* AmpA  = -13dBm0 */
-            /* data */              0x58, 0x00, /* FreqB = 2750Hz */
-            /* data */              0x13, 0xE3, /* AmpB  = -13dBm0 */
-            /* data */              0x00, 0x00, /* FreqC = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpC  = 0dBm0 */
-            /* data */              0x00, 0x00, /* FreqD = 0Hz */
-            /* data */              0x58, 0xD6, /* AmpD  = 0dBm0 */
-            /* data */              0x00, 0x03, /* Generator control = AB */
-    /* Unstructured data -------------------------------------------------- */
-                                    0x00, 0x78, /* 120-bit channel seizure */
-                                    0x00, 0x40, /* 64-bit mark period */
-                                    0x00, 0x00,
-                                    0x01,       /* API checksum */
-                                    0x00        /* FSK Message Data */
-};
-
-/* US Caller ID (Type 1 - On-Hook) */
-const VpProfileDataType CLI_TYPE1_US[] =
-{
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x01,
-        /* type */                  0x05,       /* 0x05 = caller ID profile */
-        /* number of sections */    0x02,
-        /* content length */        0x26,       /* 38 */
-    /* Section 0 ---------------------------------------------------------- */
-        /* section type */          0x02,       /* 0x02 = sequencer program */
-        /* content length */        0x0C,       /* 12 */
-        /* data */                  0x00, 0x04, /* sequence length = 5 */
-        /* data */                  0x42, 0x08, /* Silence 520ms */
-        /* data */                  0x01, 0x26, /* Send FSK */
-        /* data */                  0x0B, 0x01,
-        /* data */                  0x09, 0x00,
-        /* data */                  0x01, 0x27,
-    /* Section 1 ---------------------------------------------------------- */
-        /* section type */          0x00,       /* 0x00 = register list */
-        /* content length */        0x0E,       /* 14 */
-        /* Access 0 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x1F,       /* FSK_GEN register */
-            /* length */            0x01,
-            /* data */              0x00, 0x04, /* stop = 1, start = 0 */
-        /* Access 1 */
-            /* access type */       0x01,       /* 0x01 = chan. page write */
-            /* page offset */       0x10,       /* FSK_GEN register */
-            /* length */            0x03,
-            /* data */              0x26, 0x66, /* mark freq. 1200Hz  */
-                                    0x46, 0x66, /* space freq. 2200Hz */
-                                    0x27, 0xAE, /* amplitude = -7dBm0 */
-    /* Unstructured data -------------------------------------------------- */
-                                    0x01, 0x30, /* 304-bit channel seizure */
-                                    0x00, 0xB8, /* 184-bit mark period */
-                                    0x00, 0x00,
-                                    0x01,       /* API checksum */
-                                    0x00        /* FSK Message Data */
-};
-
-/************** Metering_Profile **************/
-
-/* Metering Profile 12 kHz Tone */
-const VpProfileDataType METER_12KHZ[] =
-{
-    /* Metering Profile */
-    /* 12KHz Tone Metering */
-    /* Ramp Time: 10ms, Amplitude: 2000mVrms (Normal Gain) */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x07,       /* 0x07 = Metering profile */
-        /* number of sections */    0x00,
-        /* content length */        0x06,
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x02, /* MTR_TYPE */
-        /* data */                  0x00, 0x0A, /* RAMP_TIME */
-        /* data */                  0x09, 0x94  /* RAMP_STEP */
-};
-
-/* Metering Profile Polarity Reversal */
-const VpProfileDataType METER_POLREV[] =
-{
-    /* Metering Profile */
-    /* Polrev Pulse Metering */
-    /* Profile header ----------------------------------------------------- */
-        /* version */               0x00,
-        /* type */                  0x07,       /* 0x07 = Metering profile */
-        /* number of sections */    0x00,
-        /* content length */        0x02,
-    /* Unstructured data -------------------------------------------------- */
-        /* data */                  0x00, 0x00  /* MTR_TYPE */
-};
-
-int dev_profile_size = sizeof(VE792_DEV_PROFILE);
-int dc_profile_size = sizeof(VE792_DC_COEFF);
-int ac_profile_size = sizeof(VE792_AC_COEFF_600);
-int ring_profile_size = sizeof(RING_20HZ_SINE);
-
-/* end of file profile_79238.c */
diff --git a/tools/voice/lantiq/kernel/profile_79238.h b/tools/voice/lantiq/kernel/profile_79238.h
deleted file mode 100644
index 1e27ce3..0000000
--- a/tools/voice/lantiq/kernel/profile_79238.h
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * profile_79238.h --
- *
- * This header file exports the Profile data types
- *
- * Project Info --
- *   File:  C:\Documents and Settings\benavi\Desktop\profile_792\792.vpw
- *   Type:  VCP2-792 Project (Line Module Le51HR0128)
- *   Date:  Thursday, June 03, 2010 13:40:38
- *
- *   This file was generated with Profile Wizard Version: P1.14.1
- */
-
-#ifndef PROFILE_79238_H
-#define PROFILE_79238_H
-
-#ifdef VP_API_TYPES_H
-#include "vp_api_types.h"
-#else
-typedef unsigned char VpProfileDataType;
-#endif
-
-extern int dev_profile_size;
-extern int dc_profile_size;
-extern int ac_profile_size;
-extern int ring_profile_size;
-
-/************** Device_Parameters **************/
-/* Device Profile */
-extern const VpProfileDataType VE792_DEV_PROFILE[];
-
-/************** AC_Coefficients **************/
-extern const VpProfileDataType VE792_AC_COEFF_600[]; /* AC Parameters (600) */
-extern const VpProfileDataType AC_COEFF_900[];       /* AC Parameters (900) */
-
-/************** DC_Parameters **************/
-extern const VpProfileDataType VE792_DC_COEFF[];     /* DC Parameters */
-
-/************** Ring_Parameters **************/
-extern const VpProfileDataType RING_20HZ_SINE[];     /* Ringing 20Hz, Sine Wave, 40Vrms */
-extern const VpProfileDataType RING_25HZ_SINE[];     /* Ringing 25Hz, Sine Wave, 40Vrms */
-
-/************** Call_Progress_Tones **************/
-extern const VpProfileDataType TONE_DIAL[];          /* US Dial Tone */
-extern const VpProfileDataType TONE_RINGBACK[];      /* US Ringback Tone */
-extern const VpProfileDataType TONE_BUSY[];          /* US Busy Tone */
-extern const VpProfileDataType TONE_REORDER[];       /* US Reorder Tone */
-extern const VpProfileDataType TONE_US_HOWLER[];     /* US Howler Tone (ROH) */
-extern const VpProfileDataType TONE_UK_HOWLER[];     /* UK Howler Tone */
-extern const VpProfileDataType TONE_AUS_HOWLER[];    /* Australia Howler Tone */
-extern const VpProfileDataType TONE_NTT_HOWLER[];    /* Japan Howler Tone */
-extern const VpProfileDataType TONE_SIT[];           /* Special Information Tone (Called Number Not Connected) */
-extern const VpProfileDataType TONE_ONEKHZ_L[];      /* A 1kHz tone at -10dBm0 */
-extern const VpProfileDataType TONE_ONEKHZ_H[];      /* A 1kHz tone at 0dBm0 */
-extern const VpProfileDataType TONE_CALLWAIT[];      /* Call Waiting Beep */
-extern const VpProfileDataType TONE_CLI[];           /* Caller ID Alert Tone */
-
-/************** Cadence_Definitions **************/
-extern const VpProfileDataType TONE_CAD_DIAL[];      /* US Dial Tone Cadence */
-extern const VpProfileDataType TONE_CAD_STUTTER[];   /* Stutter Dial Tone Cadence */
-extern const VpProfileDataType TONE_CAD_RINGBACK[];  /* US Ringback Tone Cadence */
-extern const VpProfileDataType TONE_CAD_BUSY[];      /* US Busy Tone Cadence */
-extern const VpProfileDataType TONE_CAD_REORDER[];   /* US Reorder Tone Cadence */
-extern const VpProfileDataType TONE_CAD_US_HOWLER[]; /* US Howler Tone Cadence (ROH) */
-extern const VpProfileDataType TONE_CAD_UK_HOWLER[]; /* UK Howler Tone Cadence */
-extern const VpProfileDataType TONE_CAD_AUS_HOWLER[];/* Australia Howler Tone Cadence */
-extern const VpProfileDataType TONE_CAD_NTT_HOWLER[];/* Japan Howler Tone Cadence */
-extern const VpProfileDataType TONE_CAD_SIT[];       /* Special Information Tone Cadence */
-extern const VpProfileDataType RING_CAD_STD[];       /* Standard Ringing Cadence */
-extern const VpProfileDataType RING_CAD_CID[];       /* Ringing Cadence with CallerID */
-extern const VpProfileDataType RING_CAD_ON[];        /* Ringing Always On */
-
-/************** Caller_ID **************/
-extern const VpProfileDataType CID_TYPE2_US[];       /* US Caller ID Type II */
-extern const VpProfileDataType CID_TYPE1_UK[];       /* UK Caller ID Type I */
-extern const VpProfileDataType CLI_TYPE1_US[];       /* US Caller ID (Type 1 - On-Hook) */
-
-/************** Metering_Profile **************/
-extern const VpProfileDataType METER_12KHZ[];        /* Metering Profile 12 kHz Tone */
-extern const VpProfileDataType METER_POLREV[];       /* Metering Profile Polarity Reversal */
-
-#endif /* PROFILE_79238_H */
diff --git a/tools/voice/lantiq/kernel/profile_88266.c b/tools/voice/lantiq/kernel/profile_88266.c
deleted file mode 100644
index e9ab45c..0000000
--- a/tools/voice/lantiq/kernel/profile_88266.c
+++ /dev/null
@@ -1,644 +0,0 @@
-/*
- * profile_8266.c --
- *
- * This file contains profile data in byte format
- *
- *   This file was generated with Profile Wizard Version: P1.12.3
- */
-
-#include "profile_88266.h"
-
-
-/*** Device Parameters for VoicePort Device Family ***/
-const VpProfileDataType ABS_VBL_FLYBACK[] =
-{
-  /* Device Profile */
- 0x00, 0xFF, 0x00, 0x1A, /* Profile Index and Length */
- 0x04, 0x00, /* Version and MPI Command */
- 0x20, 0x00, /* PCLK Frequency */
- 0x8A, 0x00, /* Device Config 1 and MCLK Correction */
- 0x40, 0x02, /* Clock Slot and Max Events */
- 0x0A, 0x00, /* Device Tickrate */
- 0xE4, 0x00, 0x05, 0x00, /* Switching Regulator Parameters */
- 0x00, 0x00, /* RSVD */
- 0x22, 0x00, 0x55, 0x55, /* Linecard Parameters */
- 0xB2, 0x00, 0xB1, 0x00, 0xB0, 0x40  /* Regulator Timing Parameters */
-};
-
-/************** AC Filter Coefficients **************/
-
-/* AC FXS RF14 600 Ohm Coefficients [Default} */
-const VpProfileDataType AC_FXS_RF14_DEF[] =
-{
-  /* AC Profile */
- 0xA4, 0x00, 0xF4, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x2A, 0xAA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x1D, 0x01, 0xA3, 0xA0, 0x2E, 0xB2, 0xB2, 0xBA, 0xAC, 0xA2,
- 0xA6, 0xCB, 0x3B, 0x45, 0x88, 0x2A, 0x20, 0x3C, 0xBC, 0x4E, 0xA6, 0x2B,
- 0xA5, 0x2B, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0xA1, 0xCB, 0x1B, 0xA3, 0xA8, 0xFB, 0x87, 0xAA,
- 0xFB, 0x9F, 0xA9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 900 Ohm Coefficients */
-const VpProfileDataType AC_FXS_RF14_900[] =
-{
-  /* AC Profile */
- 0xE4, 0x00, 0xF7, 0x4C, 0x01, 0x49, 0xCA, 0x0B, 0x98, 0x34, 0x3B, 0xB2,
- 0x2C, 0x9F, 0xA4, 0xD2, 0xA3, 0x22, 0xAC, 0x9A, 0xA4, 0xAA, 0x67, 0x9F,
- 0x01, 0x8A, 0xB3, 0xD0, 0xA6, 0x21, 0xAA, 0x34, 0x2B, 0x2F, 0x4A, 0xA6,
- 0xAB, 0x2F, 0x4A, 0x37, 0x88, 0x2A, 0xC0, 0x23, 0xAC, 0x2A, 0x26, 0x32,
- 0xA5, 0x3C, 0xAD, 0xA4, 0xA7, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xAB, 0x49, 0xF1, 0x2A, 0x0A, 0x43, 0xC9, 0xF3, 0x27, 0xBC,
- 0xE2, 0xAF, 0xAD, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Australia 220+820//220nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_AU[] =
-{
-  /* AC Profile */
- 0xBF, 0x00, 0xAF, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0xBA, 0x41, 0x54,
- 0xA2, 0x2A, 0x5B, 0xA4, 0xAA, 0x3A, 0xB3, 0x9A, 0x87, 0xA2, 0x97, 0x9F,
- 0x01, 0x8A, 0x2E, 0x01, 0x23, 0x20, 0x3E, 0xA8, 0x2A, 0x57, 0xCB, 0x34,
- 0xBA, 0xAC, 0xBB, 0xA6, 0x88, 0xAA, 0xB0, 0x49, 0xF6, 0x3B, 0x2E, 0x49,
- 0xFF, 0xBC, 0xA5, 0x3A, 0xBE, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x34, 0x5C, 0x32, 0x25, 0x1A, 0xA1, 0x3B, 0x23, 0xB3, 0x5B,
- 0x4D, 0xB5, 0xDC, 0x60, 0x96, 0x3B, 0xA1, 0x00
-};
-
-/* AC FXS RF14 Austria 220+820//115nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_AT[] =
-{
-  /* AC Profile */
- 0x6D, 0x00, 0xA7, 0x4C, 0x01, 0x49, 0xCA, 0xEA, 0x98, 0xFA, 0xE1, 0x23,
- 0xA2, 0xEA, 0xCB, 0xB3, 0xAA, 0xA3, 0xB3, 0x9A, 0x98, 0x92, 0x97, 0x9F,
- 0x01, 0x8A, 0x2E, 0x01, 0xB3, 0x20, 0xAB, 0xA8, 0xCC, 0x24, 0x22, 0x97,
- 0xAF, 0x8F, 0xD3, 0xBF, 0x88, 0x3B, 0xB0, 0x33, 0x46, 0x2A, 0x2E, 0x33,
- 0x4F, 0xAE, 0xA5, 0xB3, 0xBE, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0x22, 0x98, 0x02, 0x42, 0xA2, 0x43, 0xA6, 0xD8,
- 0xFA, 0x8F, 0x29, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Belgium 150+830//72 Coefficients */
-const VpProfileDataType AC_FXS_RF14_BE[] =
-{
-  /* AC Profile */
- 0x8F, 0x00, 0x2E, 0x4C, 0x01, 0x49, 0xCA, 0xF3, 0x98, 0x2C, 0xA1, 0xB4,
- 0xE3, 0x34, 0xCB, 0x2C, 0x2B, 0xA3, 0xA3, 0x9A, 0x87, 0xA6, 0x97, 0x9F,
- 0x01, 0x8A, 0x42, 0xD0, 0xBA, 0x30, 0xC2, 0x49, 0xA3, 0x4C, 0xDC, 0xC2,
- 0x22, 0x2B, 0xBA, 0xA4, 0x88, 0xB3, 0xB0, 0xA3, 0xA4, 0x4A, 0xDD, 0xCA,
- 0xAD, 0x43, 0xA4, 0x22, 0xAD, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x3A, 0x42, 0xA1, 0xA4, 0x19, 0x81, 0x5A, 0x4B, 0x2F, 0xA2,
- 0xFB, 0xAF, 0xBA, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Brazil 900 Coefficients */
-const VpProfileDataType AC_FXS_RF14_BR[] =
-{
-  /* AC Profile */
- 0xE4, 0x00, 0xF7, 0x4C, 0x01, 0x49, 0xCA, 0x0B, 0x98, 0x34, 0x3B, 0xB2,
- 0x2C, 0x9F, 0xA4, 0xD2, 0xA3, 0x22, 0xAC, 0x9A, 0xA4, 0xAA, 0x67, 0x9F,
- 0x01, 0x8A, 0xB3, 0xD0, 0xA6, 0x21, 0xAA, 0x34, 0x2B, 0x2F, 0x4A, 0xA6,
- 0xAB, 0x2F, 0x4A, 0x37, 0x88, 0x2A, 0xC0, 0xA2, 0xAC, 0x2A, 0x26, 0x32,
- 0xA5, 0x4C, 0xAD, 0xA4, 0xA7, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x3D, 0x53, 0x22, 0x52, 0x1A, 0x22, 0x2B, 0x6A, 0x87, 0x29,
- 0xFB, 0x2F, 0xFC, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXA RF14 China 200+680//100nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_CN[] =
-{
-  /* AC Profile */
- 0xB9, 0x00, 0x1F, 0x4C, 0x01, 0x49, 0xCA, 0xE9, 0x98, 0x5C, 0xB1, 0xAA,
- 0x23, 0x43, 0xEB, 0x32, 0xAA, 0x23, 0xB3, 0x9A, 0x98, 0x94, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x30, 0x6A, 0x59, 0x2A, 0xCB, 0xB4, 0xB2,
- 0xBF, 0x3B, 0xA3, 0x25, 0x88, 0x43, 0xC0, 0x3A, 0x45, 0x2B, 0xBD, 0x4C,
- 0x2E, 0x4C, 0x25, 0x42, 0xAD, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xA4, 0x5A, 0x32, 0xB5, 0x12, 0xA1, 0xA2, 0x3A, 0xA4, 0xB5,
- 0x64, 0x97, 0xAA, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Czech Republic 600 Coefficients */
-const VpProfileDataType AC_FXS_RF14_CZ[] =
-{
-  /* AC Profile */
- 0x1A, 0x00, 0x03, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x22, 0xBA, 0xA6, 0x9F,
- 0x01, 0x8A, 0xAA, 0xC0, 0x97, 0xA0, 0xAA, 0x33, 0xD2, 0xDB, 0x7C, 0x23,
- 0x2A, 0xEB, 0x32, 0xB4, 0x88, 0x2A, 0x20, 0x6C, 0xBC, 0xCE, 0xA6, 0x2B,
- 0xA5, 0xAA, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xC3, 0x5A, 0x22, 0xC7, 0x16, 0xE2, 0x2B, 0x42, 0xC6, 0xC8,
- 0xFA, 0x9F, 0x2B, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Denmark 300+1000//220nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_DK[] =
-{
-  /* AC Profile */
- 0x7D, 0x00, 0x9A, 0x4C, 0x01, 0x49, 0xCA, 0xE6, 0x98, 0x22, 0xA1, 0x52,
- 0xD2, 0xE7, 0x24, 0xF4, 0xCD, 0xAA, 0x97, 0x9A, 0xCA, 0xB3, 0xA5, 0x6E,
- 0x01, 0x8A, 0x32, 0xD0, 0xAB, 0x20, 0xAA, 0x49, 0x29, 0x7A, 0x32, 0xD6,
- 0xA2, 0xED, 0xC5, 0x97, 0x88, 0xBA, 0xC0, 0x22, 0xA7, 0x2C, 0xFE, 0x42,
- 0xDE, 0x22, 0xB6, 0xB3, 0x9F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x23, 0x53, 0x32, 0x2C, 0x1B, 0x22, 0xCA, 0x23, 0x63, 0x2A,
- 0x33, 0xD4, 0x2A, 0x40, 0x96, 0xA2, 0xA0, 0x00
-};
-
-/* AC FXS RF14 ETSI 270+750//150nF Harmonized Coefficients */
-const VpProfileDataType AC_FXS_RF14_EU[] =
-{
-  /* AC Profile */
- 0xD5, 0x00, 0xEC, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0x4A, 0xA1, 0x34,
- 0xA2, 0xA2, 0xAC, 0x2C, 0xBB, 0x2B, 0xA4, 0x9A, 0x98, 0x92, 0x97, 0x9F,
- 0x01, 0x8A, 0x9C, 0xD0, 0x2B, 0x20, 0x8F, 0x39, 0x2A, 0xBB, 0xA4, 0x24,
- 0xB2, 0xBC, 0x4B, 0x26, 0x88, 0xA3, 0xC0, 0xC2, 0x27, 0xBA, 0x3E, 0xAC,
- 0xAF, 0xB4, 0x26, 0x24, 0x3F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xC3, 0x5F, 0x32, 0x98, 0x03, 0xA1, 0xAA, 0x23, 0xB3, 0x2C,
- 0x4B, 0x55, 0x25, 0x60, 0x96, 0xF2, 0xC1, 0x00
-};
-
-/* AC FXS RF14 Finland 270+910//120 Coefficients */
-const VpProfileDataType AC_FXS_RF14_FI[] =
-{
-  /* AC Profile */
- 0xFF, 0x00, 0x8D, 0x4C, 0x01, 0x49, 0xCA, 0xEF, 0x98, 0x2A, 0xB1, 0x23,
- 0x33, 0xB2, 0xAB, 0x44, 0xEB, 0xA4, 0x44, 0x9A, 0x98, 0x92, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x24, 0x20, 0x25, 0xB8, 0x2D, 0x42, 0xDB, 0xBA,
- 0xE3, 0x43, 0xF2, 0xAC, 0x88, 0xC4, 0xB0, 0xA2, 0xA7, 0x42, 0x3E, 0xA2,
- 0x9F, 0x32, 0x26, 0xBE, 0x2F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xA2, 0x5C, 0x22, 0xA2, 0x13, 0xC1, 0xB3, 0x22, 0x23, 0x7A,
- 0x3D, 0xB4, 0xD4, 0x50, 0x96, 0x3C, 0x41, 0x00
-};
-
-/* AC FXS RF14 France 215+1000//137nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_FR[] =
-{
-  /* AC Profile */
- 0xFC, 0x00, 0xA4, 0x4C, 0x01, 0x49, 0xCA, 0xE7, 0x98, 0xBA, 0x31, 0xA5,
- 0x62, 0x35, 0xAB, 0xAA, 0xAA, 0xAC, 0xA3, 0x9A, 0xAA, 0xA2, 0xC7, 0x6F,
- 0x01, 0x8A, 0x2D, 0x01, 0xBB, 0x10, 0xC2, 0x38, 0x2A, 0xA1, 0xC2, 0xA9,
- 0x23, 0xA2, 0x22, 0x2D, 0x88, 0xA3, 0xB0, 0x53, 0x55, 0x4A, 0xAD, 0xB2,
- 0xAD, 0x5A, 0x25, 0x72, 0x5E, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x43, 0x22, 0x9F, 0x1A, 0x22, 0x4B, 0x33, 0xD5, 0x2C,
- 0x7A, 0x87, 0xA8, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 German 220+820//115nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_DE[] =
-{
-  /* AC Profile */
- 0xEB, 0x00, 0xDC, 0x4C, 0x01, 0x49, 0xCA, 0xEA, 0x98, 0xA2, 0xE1, 0x24,
- 0xA2, 0x2A, 0xCB, 0xB3, 0xAA, 0xD3, 0xB3, 0x9A, 0x98, 0x92, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x24, 0x20, 0x2C, 0xA8, 0xAB, 0x24, 0x22, 0x97,
- 0xAF, 0x8F, 0x23, 0xBF, 0x88, 0x3B, 0xB0, 0x33, 0x46, 0x2A, 0x2E, 0x33,
- 0x4F, 0xAE, 0xA5, 0xB3, 0xBE, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x53, 0x54, 0x32, 0xC4, 0x1A, 0xA1, 0x2B, 0x2A, 0xA3, 0xAA,
- 0x4A, 0xA5, 0xBA, 0x60, 0x96, 0xD2, 0xA1, 0x00
-};
-
-/* AC FXS RF14 Greece 400+500//50nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_GR[] =
-{
-  /* AC Profile */
- 0x63, 0x00, 0x7D, 0x4C, 0x01, 0x49, 0xCA, 0x03, 0x98, 0x22, 0xA6, 0x2C,
- 0x3E, 0x2B, 0x87, 0x44, 0x36, 0x2A, 0x9F, 0x9A, 0x22, 0xBA, 0xA7, 0x9F,
- 0x01, 0x8A, 0x7D, 0xD0, 0xAA, 0xA0, 0x22, 0xAA, 0x98, 0xB4, 0x23, 0xBE,
- 0xAB, 0xBF, 0xAA, 0x97, 0x88, 0x3C, 0xC0, 0x3A, 0xBD, 0xED, 0x8F, 0xEB,
- 0xA6, 0x3A, 0x8F, 0x2B, 0x6F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xD2, 0x52, 0x22, 0xA2, 0x13, 0xA1, 0x97, 0x32, 0x25, 0xCA,
- 0x6B, 0x87, 0x2B, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Hungary 600 Coefficients */
-const VpProfileDataType AC_FXS_RF14_HU[] =
-{
-  /* AC Profile */
- 0xA4, 0x00, 0xF4, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x2A, 0xAA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x1D, 0x01, 0xA3, 0xA0, 0x2E, 0xB2, 0xB2, 0xBA, 0xAC, 0xA2,
- 0xA6, 0xCB, 0x3B, 0x45, 0x88, 0x2A, 0x20, 0x3C, 0xBC, 0x4E, 0xA6, 0x2B,
- 0xA5, 0x2B, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0xA1, 0xCB, 0x1B, 0xA3, 0xA8, 0xFB, 0x87, 0xAA,
- 0xFB, 0x9F, 0xA9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 India 600 Coefficients */
-const VpProfileDataType AC_FXS_RF14_IN[] =
-{
-  /* AC Profile */
- 0xA4, 0x00, 0xF4, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x2A, 0xAA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x1D, 0x01, 0xA3, 0xA0, 0x2E, 0xB2, 0xB2, 0xBA, 0xAC, 0xA2,
- 0xA6, 0xCB, 0x3B, 0x45, 0x88, 0x2A, 0x20, 0x3C, 0xBC, 0x4E, 0xA6, 0x2B,
- 0xA5, 0x2B, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0xA1, 0xCB, 0x1B, 0xA3, 0xA8, 0xFB, 0x87, 0xAA,
- 0xFB, 0x9F, 0xA9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Italy 180+630//60nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_IT[] =
-{
-  /* AC Profile */
- 0xEE, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xF3, 0x98, 0x22, 0xD2, 0xBA,
- 0x34, 0x22, 0x3C, 0x53, 0xAB, 0xAA, 0xB4, 0x9A, 0x98, 0x1B, 0x97, 0x9F,
- 0x01, 0x8A, 0x9C, 0xD0, 0xBC, 0xD0, 0x2A, 0x2A, 0x3C, 0x4C, 0x4E, 0x23,
- 0xD2, 0xBB, 0xDB, 0x55, 0x88, 0xAA, 0xC0, 0x2C, 0xB5, 0x23, 0xAD, 0x4A,
- 0x5E, 0xAD, 0xB5, 0x2B, 0x2E, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xA2, 0x52, 0xA1, 0xA3, 0x1A, 0x32, 0xAA, 0x4A, 0xAF, 0x3B,
- 0xF4, 0x9F, 0x3A, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Japan 600+1uF Coefficients */
-const VpProfileDataType AC_FXS_RF14_JP[] =
-{
-  /* AC Profile */
- 0x0C, 0x00, 0x79, 0x4C, 0x01, 0x49, 0xCA, 0xF9, 0x98, 0xAC, 0xEE, 0x2A,
- 0x87, 0x2A, 0x3F, 0xA3, 0x97, 0xE5, 0xC3, 0x9A, 0xAB, 0xA2, 0x24, 0xA6,
- 0xD0, 0x8A, 0x42, 0xB0, 0x2A, 0xA0, 0x34, 0xAA, 0x3B, 0xA2, 0xCA, 0xAA,
- 0xA4, 0x24, 0x3B, 0x4D, 0x88, 0xBA, 0x30, 0xAC, 0x2D, 0xAA, 0xCE, 0xAA,
- 0x25, 0x22, 0x2C, 0xB2, 0x65, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x3B, 0x52, 0xA1, 0xA5, 0x14, 0xA2, 0x23, 0x44, 0x24, 0xA5,
- 0x4B, 0xA4, 0xAC, 0x40, 0x96, 0x32, 0xD0, 0x00
-};
-
-/* AC FXS RF14 S. Korea 600 Coefficients */
-const VpProfileDataType AC_FXS_RF14_KR[] =
-{
-  /* AC Profile */
- 0xA4, 0x00, 0xF4, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x2A, 0xAA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x1D, 0x01, 0xA3, 0xA0, 0x2E, 0xB2, 0xB2, 0xBA, 0xAC, 0xA2,
- 0xA6, 0xCB, 0x3B, 0x45, 0x88, 0x2A, 0x20, 0x3C, 0xBC, 0x4E, 0xA6, 0x2B,
- 0xA5, 0x2B, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0xA1, 0xCB, 0x1B, 0xA3, 0xA8, 0xFB, 0x87, 0xAA,
- 0xFB, 0x9F, 0xA9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Mexico 600 Coefficients */
-const VpProfileDataType AC_FXS_RF14_MX[] =
-{
-  /* AC Profile */
- 0xA4, 0x00, 0xF4, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x2A, 0xAA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x1D, 0x01, 0xA3, 0xA0, 0x2E, 0xB2, 0xB2, 0xBA, 0xAC, 0xA2,
- 0xA6, 0xCB, 0x3B, 0x45, 0x88, 0x2A, 0x20, 0x3C, 0xBC, 0x4E, 0xA6, 0x2B,
- 0xA5, 0x2B, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0xA1, 0xCB, 0x1B, 0xA3, 0xA8, 0xFB, 0x87, 0xAA,
- 0xFB, 0x9F, 0xA9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Netherlands 600/340+422//100 Coefficients */
-const VpProfileDataType AC_FXS_RF14_NL[] =
-{
-  /* AC Profile */
- 0x7D, 0x00, 0x38, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x22, 0xBA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x34, 0xD0, 0xCD, 0xA0, 0xAB, 0xD3, 0x22, 0xAB, 0x4A, 0xA3,
- 0xA2, 0x2C, 0xAB, 0x45, 0x88, 0x2A, 0x20, 0x6C, 0xBC, 0xCE, 0xA6, 0x2B,
- 0xA5, 0xAA, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x62, 0x52, 0x22, 0xCD, 0x12, 0x23, 0x44, 0x7A, 0x87, 0x3B,
- 0xFC, 0xBF, 0xBA, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 New Zealand 370+620//310nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_NZ[] =
-{
-  /* AC Profile */
- 0x14, 0x00, 0x00, 0x4C, 0x01, 0x49, 0xCA, 0xE9, 0x98, 0xAA, 0xB3, 0xB2,
- 0xA2, 0xDA, 0xA3, 0x2B, 0x36, 0xAA, 0x25, 0x9A, 0x2B, 0xA2, 0x27, 0x6F,
- 0x01, 0x8A, 0x1D, 0x01, 0x52, 0x50, 0x2A, 0x3B, 0x45, 0xA9, 0xCA, 0xA3,
- 0x2C, 0xAB, 0xAA, 0x27, 0x88, 0xC3, 0x50, 0xBA, 0x8F, 0x37, 0x2F, 0xC2,
- 0xBE, 0xEA, 0x87, 0xAA, 0x87, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x53, 0x53, 0x32, 0xCB, 0x1C, 0x42, 0x32, 0x3B, 0xB3, 0xA2,
- 0x42, 0xB4, 0x23, 0x50, 0x96, 0x42, 0xA0, 0x00
-};
-
-/* AC FXS RF14 Norway 120+820//110nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_NO[] =
-{
-  /* AC Profile */
- 0x04, 0x00, 0xA8, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0xAA, 0x41, 0x22,
- 0xA1, 0xAA, 0x3B, 0x23, 0x2A, 0xD4, 0x23, 0x9A, 0x98, 0x92, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0xEA, 0x10, 0x22, 0xB8, 0x22, 0x3B, 0x23, 0xA1,
- 0xAA, 0xBA, 0x32, 0xC4, 0x88, 0x25, 0xB0, 0x3B, 0x24, 0x2C, 0x2D, 0xA3,
- 0xAC, 0xF4, 0xC4, 0xAB, 0xAD, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xBB, 0x52, 0xE2, 0xBD, 0x1B, 0xA1, 0x3B, 0x2A, 0xA3, 0x3A,
- 0x4A, 0x26, 0x29, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Portugal 600 Coefficients */
-const VpProfileDataType AC_FXS_RF14_PT[] =
-{
-  /* AC Profile */
- 0xA4, 0x00, 0xF4, 0x4C, 0x01, 0x49, 0xCA, 0xF5, 0x98, 0xAA, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x2A, 0xAA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x1D, 0x01, 0xA3, 0xA0, 0x2E, 0xB2, 0xB2, 0xBA, 0xAC, 0xA2,
- 0xA6, 0xCB, 0x3B, 0x45, 0x88, 0x2A, 0x20, 0x3C, 0xBC, 0x4E, 0xA6, 0x2B,
- 0xA5, 0x2B, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0xA1, 0xCB, 0x1B, 0xA3, 0xA8, 0xFB, 0x87, 0xAA,
- 0xFB, 0x9F, 0xA9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Slovenia 600/220+820//115 Coefficients */
-const VpProfileDataType AC_FXS_RF14_SI[] =
-{
-  /* AC Profile */
- 0x00, 0x00, 0x00, 0x4C, 0x00, 0x49, 0xCA, 0xF5, 0x98, 0x2A, 0x7B, 0xAB,
- 0x2C, 0xA3, 0x25, 0xA5, 0x24, 0xB2, 0x3D, 0x9A, 0x2B, 0xAA, 0xA6, 0x9F,
- 0x01, 0x8A, 0x1D, 0x01, 0x55, 0xA0, 0xA2, 0xA2, 0x57, 0x2B, 0xC6, 0x23,
- 0x34, 0xBB, 0x6A, 0xC5, 0x88, 0x2A, 0x20, 0x6C, 0xBC, 0xCE, 0xA6, 0x2B,
- 0xA5, 0xAA, 0x3E, 0xBA, 0x8F, 0x82, 0xA8, 0x71, 0x80, 0xC8, 0xF0, 0x50,
- 0x00, 0x86, 0xC3, 0x5A, 0x22, 0xC7, 0x16, 0xE2, 0x2B, 0x42, 0xC6, 0xC8,
- 0xFA, 0x9F, 0x2B, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 Spain 220+820//120nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_ES[] =
-{
-  /* AC Profile */
- 0xBF, 0x00, 0xAF, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0xBA, 0x41, 0x54,
- 0xA2, 0x2A, 0x5B, 0xA4, 0xAA, 0x3A, 0xB3, 0x9A, 0x87, 0xA2, 0x97, 0x9F,
- 0x01, 0x8A, 0x2E, 0x01, 0x23, 0x20, 0x3E, 0xA8, 0x2A, 0x57, 0xCB, 0x34,
- 0xBA, 0xAC, 0xBB, 0xA6, 0x88, 0xAA, 0xB0, 0x49, 0xF6, 0x3B, 0x2E, 0x49,
- 0xFF, 0xBC, 0xA5, 0x3A, 0xBE, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x34, 0x5C, 0x32, 0x25, 0x1A, 0xA1, 0x3B, 0x23, 0xB3, 0x5B,
- 0x4D, 0xB5, 0xDC, 0x60, 0x96, 0x3B, 0xA1, 0x00
-};
-
-/* AC FXS RF14 Sweden 200+1000//100nF_900//30nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_SE[] =
-{
-  /* AC Profile */
- 0x0E, 0x00, 0x42, 0x4C, 0x01, 0x49, 0xCA, 0xF0, 0x98, 0x24, 0xF1, 0xB4,
- 0xA2, 0xAB, 0x4B, 0x4B, 0xAA, 0xA7, 0xC3, 0x9A, 0x98, 0x92, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0xB3, 0x20, 0x5B, 0xB8, 0x24, 0xA2, 0x3C, 0xAC,
- 0xAA, 0x27, 0x32, 0x9F, 0x88, 0x3A, 0xA0, 0x3A, 0x25, 0x3A, 0xAD, 0x22,
- 0xAD, 0xBE, 0x25, 0xA5, 0x2E, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x73, 0x52, 0x22, 0xD2, 0x12, 0xB1, 0x4A, 0x23, 0xC4, 0xC3,
- 0x6A, 0x97, 0xA8, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 U.K. 300+1000//220_370+620//310nF Coefficients */
-const VpProfileDataType AC_FXS_RF14_GB[] =
-{
-  /* AC Profile */
- 0x24, 0x00, 0x0A, 0x4C, 0x01, 0x49, 0xCA, 0xE6, 0x98, 0x22, 0xA1, 0x52,
- 0xD2, 0xE7, 0x24, 0xF4, 0xCD, 0xAA, 0x97, 0x9A, 0x2B, 0xA2, 0x27, 0x6E,
- 0x01, 0x8A, 0x32, 0xD0, 0xCB, 0x20, 0xBB, 0x59, 0x5A, 0x4A, 0xAA, 0xB5,
- 0x2C, 0x2D, 0x42, 0xC7, 0x88, 0xAA, 0xC0, 0xA3, 0xA7, 0xBA, 0xDE, 0x5C,
- 0xCE, 0xAA, 0xA6, 0xA2, 0x9F, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x43, 0x5B, 0x32, 0x2C, 0x1D, 0x22, 0xAA, 0x2B, 0x33, 0xBA,
- 0x3C, 0x34, 0xBA, 0x40, 0x96, 0xA2, 0xA0, 0x00
-};
-
-/* AC FXS RF14 US 900//2.16uF_1650//(100+5nF) Coefficients */
-const VpProfileDataType AC_FXS_RF14_US_loaded[] =
-{
-  /* AC Profile */
- 0x01, 0x00, 0x90, 0x4C, 0x01, 0x49, 0xCA, 0x0E, 0x98, 0x32, 0x2B, 0x24,
- 0x7C, 0x4A, 0x24, 0x55, 0xA3, 0x3A, 0xBC, 0x9A, 0xBA, 0xB3, 0xF4, 0x2D,
- 0x01, 0x8A, 0xEB, 0xC0, 0x26, 0x21, 0xB2, 0x35, 0xB3, 0xA6, 0x2A, 0xAD,
- 0xD4, 0xA6, 0x52, 0x4F, 0x88, 0xA3, 0xD0, 0x23, 0xAA, 0xAF, 0x62, 0xEA,
- 0xBA, 0x2A, 0xB3, 0x4A, 0x3D, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2B, 0x4C, 0x21, 0xAC, 0x03, 0xB2, 0xA5, 0x5A, 0xE4, 0x74,
- 0xF3, 0xA5, 0xBE, 0x60, 0x96, 0xAA, 0xC0, 0x00
-};
-
-/* AC FXS RF14 US 900//2,16uF_800//(100+50nF) Coefficients */
-const VpProfileDataType AC_FXS_RF14_US_Nonloaded[] =
-{
-  /* AC Profile */
- 0x01, 0x00, 0x90, 0x4C, 0x01, 0x49, 0xCA, 0x0E, 0x98, 0x32, 0x2B, 0x24,
- 0x7C, 0x4A, 0x24, 0x55, 0xA3, 0x3A, 0xBC, 0x9A, 0xBA, 0xB3, 0xF4, 0x2D,
- 0x01, 0x8A, 0xEB, 0xC0, 0x26, 0x21, 0xB2, 0x35, 0xB3, 0xA6, 0x2A, 0xAD,
- 0xD4, 0xA6, 0x52, 0x4F, 0x88, 0xA3, 0xD0, 0x23, 0xAA, 0xAF, 0x62, 0xEA,
- 0xBA, 0x2A, 0xB3, 0x4A, 0x3D, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xBD, 0x52, 0xA1, 0x62, 0x1B, 0x22, 0x3A, 0x4B, 0xB5, 0x2A,
- 0x65, 0xA7, 0xB6, 0x70, 0x96, 0x23, 0xC0, 0x00
-};
-
-/* AC FXS RF14 US 900//2.16uF Coefficients */
-const VpProfileDataType AC_FXS_RF14_US_SS[] =
-{
-  /* AC Profile */
- 0x01, 0x00, 0x90, 0x4C, 0x01, 0x49, 0xCA, 0x0E, 0x98, 0x32, 0x2B, 0x24,
- 0x7C, 0x4A, 0x24, 0x55, 0xA3, 0x3A, 0xBC, 0x9A, 0xBA, 0xB3, 0xF4, 0x2D,
- 0x01, 0x8A, 0xEB, 0xC0, 0x26, 0x21, 0xB2, 0x35, 0xB3, 0xA6, 0x2A, 0xAD,
- 0xD4, 0xA6, 0x52, 0x4F, 0x88, 0xA3, 0xD0, 0x23, 0xAA, 0xAF, 0x62, 0xEA,
- 0xBA, 0x2A, 0xB3, 0x4A, 0x3D, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xDA, 0x4A, 0x41, 0x3A, 0x02, 0x23, 0x3A, 0x42, 0x25, 0xAA,
- 0x72, 0xA5, 0x2B, 0x50, 0x96, 0x1D, 0x01, 0x00
-};
-
-/************** WideBand AC Filter Coefficients **************/
-/* AC FXS RF14 600 Ohm Wideband Coefficients */
-const VpProfileDataType AC_FXS_RF14_WB_US[] =
-{
-  /* AC Profile */
- 0xED, 0x00, 0xA9, 0x4C, 0x01, 0x49, 0xCA, 0xFC, 0x98, 0xCC, 0x2A, 0xA2,
- 0x3B, 0x98, 0xB3, 0x43, 0xA2, 0x3A, 0xAB, 0x9A, 0x2D, 0xAA, 0xB6, 0x9F,
- 0x01, 0x8A, 0x2E, 0x01, 0xC4, 0xA0, 0x2E, 0x23, 0x3A, 0x2E, 0x9F, 0x87,
- 0x4C, 0xCE, 0xB2, 0x27, 0x88, 0xDE, 0x20, 0xAA, 0xCA, 0x22, 0x32, 0x23,
- 0xAA, 0xA2, 0xB4, 0x2A, 0x87, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xCB, 0x5E, 0x22, 0xBC, 0x12, 0xA3, 0xA9, 0xFA, 0xC6, 0x34,
- 0xE2, 0x9F, 0xBA, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 European Union Wideband Coefficients */
-const VpProfileDataType AC_FXS_RF14_WB_EU[] =
-{
-  /* AC Profile */
- 0xAA, 0x00, 0x9C, 0x4C, 0x01, 0x49, 0xCA, 0xE0, 0x98, 0xAA, 0xA3, 0x6B,
- 0x22, 0x43, 0xA2, 0xAC, 0xBF, 0x22, 0xA6, 0x9A, 0x01, 0x90, 0x01, 0x01,
- 0x90, 0x8A, 0x2E, 0x01, 0xBA, 0x10, 0xA2, 0x3A, 0xBA, 0xE9, 0xAA, 0xB5,
- 0x2A, 0xBC, 0xAF, 0x97, 0x88, 0xAB, 0xC0, 0x4A, 0xBE, 0xBA, 0x9F, 0xC3,
- 0xAF, 0x3A, 0x3F, 0xCD, 0xA7, 0x82, 0xC8, 0x71, 0x80, 0x69, 0xF0, 0x50,
- 0x00, 0x86, 0xBA, 0x52, 0xB2, 0xBA, 0x12, 0x42, 0x4A, 0x2A, 0x33, 0xBA,
- 0x33, 0x34, 0x4B, 0x40, 0x96, 0xB2, 0xA0, 0x00
-};
-
-/* AC FXS RF14 France Wideband Coefficients */
-const VpProfileDataType AC_FXS_RF14_WB_FR[] =
-{
-  /* AC Profile */
- 0x98, 0x00, 0x26, 0x4C, 0x01, 0x49, 0xCA, 0xD7, 0x98, 0x4F, 0x22, 0xB5,
- 0xB1, 0xC6, 0x23, 0x3A, 0xAB, 0x24, 0xB5, 0x9A, 0x01, 0x90, 0x01, 0x01,
- 0x90, 0x8A, 0x01, 0x11, 0x22, 0x10, 0x3A, 0x29, 0x3C, 0x29, 0x32, 0xB3,
- 0x4A, 0x2C, 0x2E, 0xB6, 0x88, 0xAC, 0xB0, 0x43, 0x37, 0xAB, 0x3E, 0xB4,
- 0x3E, 0x22, 0x37, 0x22, 0xAF, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xAA, 0x52, 0xE2, 0x2B, 0x12, 0x62, 0x63, 0x3A, 0x24, 0xA2,
- 0x5C, 0x36, 0x39, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF14 German Wideband Coefficients */
-const VpProfileDataType AC_FXS_RF14_WB_DE[] =
-{
-  /* AC Profile */
- 0x27, 0x00, 0xD7, 0x4C, 0x01, 0x49, 0xCA, 0xDB, 0x98, 0xBA, 0xA1, 0xBA,
- 0x22, 0x2A, 0xF4, 0xAA, 0xAB, 0x22, 0x65, 0x9A, 0x01, 0x90, 0x01, 0x01,
- 0x90, 0x8A, 0x2E, 0x01, 0xA3, 0x10, 0x2B, 0x29, 0x53, 0xB9, 0xBD, 0xB3,
- 0x7B, 0xCC, 0xDB, 0xA6, 0x88, 0x2A, 0xB0, 0x2B, 0x9F, 0x2E, 0x3E, 0x22,
- 0xBE, 0xC3, 0x26, 0x35, 0x2F, 0x82, 0xB8, 0x71, 0x80, 0xAB, 0xF0, 0x50,
- 0x00, 0x86, 0xCA, 0x5A, 0xA2, 0xBA, 0x1F, 0x22, 0x3B, 0x2A, 0x23, 0x2B,
- 0x3A, 0x24, 0x4B, 0x40, 0x96, 0x22, 0x21, 0x00
-};
-
-/* AC FXS RF14 China Wideband Coefficients */
-const VpProfileDataType AC_FXS_RF14_WB_CN[] =
-{
-  /* AC Profile */
- 0xEF, 0x00, 0x46, 0x4C, 0x01, 0x49, 0xCA, 0xDA, 0x98, 0xB3, 0xB1, 0x23,
- 0x32, 0x64, 0x97, 0xAA, 0x2B, 0x4A, 0xA4, 0x9A, 0x01, 0x90, 0x01, 0x01,
- 0x90, 0x8A, 0x2E, 0x01, 0xCD, 0x10, 0x2B, 0x29, 0x22, 0x2A, 0xA2, 0x33,
- 0x4B, 0x4C, 0xBD, 0xF6, 0x88, 0x2A, 0xC0, 0x52, 0x97, 0xF2, 0x2E, 0xAA,
- 0x4E, 0xAC, 0xB5, 0x5B, 0xBE, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x5A, 0xA2, 0xBA, 0x1B, 0x22, 0xCA, 0x24, 0xC3, 0x43,
- 0x42, 0xA4, 0x4B, 0x50, 0x96, 0x3C, 0x41, 0x00
-};
-
-/* AC FXS RF14 Australia Wideband Coefficients */
-const VpProfileDataType AC_FXS_RF14_WB_AU[] =
-{
-  /* AC Profile */
- 0xC2, 0x00, 0x2E, 0x4C, 0x01, 0x49, 0xCA, 0xF0, 0x98, 0xBA, 0xA1, 0xAD,
- 0xA3, 0xA2, 0x2C, 0x2D, 0xAB, 0x22, 0xD4, 0x9A, 0xCC, 0xA2, 0x97, 0x9F,
- 0x01, 0x8A, 0x2E, 0x01, 0x7A, 0x10, 0xBA, 0x29, 0x2A, 0x3A, 0xA2, 0x32,
- 0xB2, 0xAA, 0xF2, 0xA4, 0x88, 0xBA, 0xA0, 0x5C, 0x3F, 0x2C, 0xCE, 0xAA,
- 0x87, 0xC2, 0x66, 0xDB, 0x7E, 0x82, 0xA8, 0x71, 0x80, 0x39, 0x70, 0x50,
- 0x00, 0x86, 0xAA, 0x59, 0x81, 0x25, 0x1A, 0xA1, 0xBB, 0x2B, 0xB3, 0x2C,
- 0x46, 0xD5, 0xBC, 0x60, 0x96, 0xAA, 0xB1, 0x00
-};
-
-/************** DC Feed Parameters **************/
-
-/* 22mA  current feed */
-const VpProfileDataType DC_22MA_CC[] =
-{
- /* DC Profile */
- 0x00, 0x01, 0x01, 0x0B, 0x01, 0x08, 0xC2, 0x1A, 0x88, 0xD0, 0x05, 0xC6,
- 0x11, 0x04, 0x01
-};
-
-/************** Ring Signal Parameters **************/
-
-/* Default Rnging, 25Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_DEF[] =
-{
-  /* Sine, 25 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x44,
- 0x3A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* US Ringing, 20Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_US[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x36,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* Canada Ringing 20Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_CA[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x36,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* France Ringing 50Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_FR[] =
-{
-  /* Sine, 50 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x88,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* Japan Ringing 16Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_JP[] =
-{
-  /* Sine, 16 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x2B,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* S. Korea Ringing 20Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_KR[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x36,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* Taiwan Ringing 20Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_TW[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x36,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* Hong Kong Ringing 20Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_HK[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x36,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* Singapore Rnging, 24Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_SG[] =
-{
-  /* Sine, 24 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x41,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* Austria Ringing 50Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_AT[] =
-{
-  /* Sine, 50 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x88,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-/* Australia Ringing 20Hz, Sinewave, 80Vpk */
-const VpProfileDataType RING_AU[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 80.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x00, 0x0E, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x36,
- 0x42, 0x55, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00
-};
-
-
-/************** Call Progress Tones **************/
-
-/************** Cadence Definitions **************/
-/* RING Cadence Profile */
-const VpProfileDataType RING_CAD_STD[] =
-{
-  /* Cadence Profile */
- 0x00, 0x08, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0A, 0x01, 0x07, 0x21, 0x90,
- 0x01, 0x00, 0x23, 0x20, 0x40, 0x00
-};
-
-/************** Caller ID **************/
-
-/************** Metering Profile **************/
-
-int dev_profile_size = sizeof(ABS_VBL_FLYBACK);
-int dc_profile_size = sizeof(DC_22MA_CC);
-int ac_profile_size = sizeof(AC_FXS_RF14_DEF);
-int ring_profile_size = sizeof(RING_DEF);
-
-/* end of file profile_8266.c */
diff --git a/tools/voice/lantiq/kernel/profile_88266.h b/tools/voice/lantiq/kernel/profile_88266.h
deleted file mode 100644
index 1b14d76..0000000
--- a/tools/voice/lantiq/kernel/profile_88266.h
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * profile_8266.h --
- *
- * This header file exports the Profile data types
- *
- * Project Info --
- *   File:  C:\Documents and Settings\benavi\Desktop\tmp\NewProject.vpw
- *   Type:  Le71HR0865G Line Module Project - VBL Reg ABS Power Supply and 8.192MHz PCLK
- *   Date:  Thursday, February 25, 2010 16:58:41
- *
- *   This file was generated with Profile Wizard Version: P1.12.3
- */
-
-#ifndef PROFILE_8266_H
-#define PROFILE_8266_H
-
-#ifdef VP_API_TYPES_H
-#include "vp_api_types.h"
-#else
-typedef unsigned char VpProfileDataType;
-#endif
-
-extern int dev_profile_size;
-extern int dc_profile_size;
-extern int ac_profile_size;
-extern int ring_profile_size;
-
-/************** Device Parameters **************/
-/* Device Profile */
-extern const VpProfileDataType ABS_VBL_FLYBACK[];
-
-/************** AC Filter Coefficients **************/
-extern const VpProfileDataType AC_FXS_RF14_DEF[];    /* AC FXS RF14 600 Ohm Coefficients [Default} */
-extern const VpProfileDataType AC_FXS_RF14_900[];    /* AC FXS RF14 900 Ohm Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_AU[];     /* AC FXS RF14 Australia 220+820//220nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_AT[];     /* AC FXS RF14 Austria 220+820//115nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_BE[];     /* AC FXS RF14 Belgium 150+830//72 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_BR[];     /* AC FXS RF14 Brazil 900 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_CN[];     /* AC FXA RF14 China 200+680//100nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_CZ[];     /* AC FXS RF14 Czech Republic 600 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_DK[];     /* AC FXS RF14 Denmark 300+1000//220nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_EU[];     /* AC FXS RF14 ETSI 270+750//150nF Harmonized Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_FI[];     /* AC FXS RF14 Finland 270+910//120 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_FR[];     /* AC FXS RF14 France 215+1000//137nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_DE[];     /* AC FXS RF14 German 220+820//115nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_GR[];     /* AC FXS RF14 Greece 400+500//50nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_HU[];     /* AC FXS RF14 Hungary 600 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_IN[];     /* AC FXS RF14 India 600 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_IT[];     /* AC FXS RF14 Italy 180+630//60nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_JP[];     /* AC FXS RF14 Japan 600+1uF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_KR[];     /* AC FXS RF14 S. Korea 600 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_MX[];     /* AC FXS RF14 Mexico 600 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_NL[];     /* AC FXS RF14 Netherlands 600/340+422//100 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_NZ[];     /* AC FXS RF14 New Zealand 370+620//310nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_NO[];     /* AC FXS RF14 Norway 120+820//110nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_PT[];     /* AC FXS RF14 Portugal 600 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_SI[];     /* AC FXS RF14 Slovenia 600/220+820//115 Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_ES[];     /* AC FXS RF14 Spain 220+820//120nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_SE[];     /* AC FXS RF14 Sweden 200+1000//100nF_900//30nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_GB[];     /* AC FXS RF14 U.K. 300+1000//220_370+620//310nF Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_US_loaded[];/* AC FXS RF14 US 900//2.16uF_1650//(100+5nF) Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_US_Nonloaded[];/* AC FXS RF14 US 900//2,16uF_800//(100+50nF) Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_US_SS[];  /* AC FXS RF14 US 900//2.16uF Coefficients */
-
-/************** WideBand AC Filter Coefficients **************/
-extern const VpProfileDataType AC_FXS_RF14_WB_US[];  /* AC FXS RF14 600 Ohm Wideband Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_WB_EU[];  /* AC FXS RF14 European Union Wideband Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_WB_FR[];  /* AC FXS RF14 France Wideband Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_WB_DE[];  /* AC FXS RF14 German Wideband Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_WB_CN[];  /* AC FXS RF14 China Wideband Coefficients */
-extern const VpProfileDataType AC_FXS_RF14_WB_AU[];  /* AC FXS RF14 Australia Wideband Coefficients */
-
-/************** DC Feed Parameters **************/
-extern const VpProfileDataType DC_22MA_CC[];         /* 22mA  current feed */
-
-/************** Ring Signal Parameters **************/
-extern const VpProfileDataType RING_DEF[];           /* Default Rnging, 25Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_US[];            /* US Ringing, 20Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_CA[];            /* Canada Ringing 20Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_FR[];            /* France Ringing 50Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_JP[];            /* Japan Ringing 16Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_KR[];            /* S. Korea Ringing 20Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_TW[];            /* Taiwan Ringing 20Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_HK[];            /* Hong Kong Ringing 20Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_SG[];            /* Singapore Rnging, 24Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_AT[];            /* Austria Ringing 50Hz, Sinewave, 80Vpk */
-extern const VpProfileDataType RING_AU[];            /* Australia Ringing 20Hz, Sinewave, 80Vpk */
-
-/************** Call Progress Tones **************/
-
-/************** Cadence Definitions **************/
-extern const VpProfileDataType RING_CAD_STD[];
-/************** Caller ID **************/
-
-/************** Metering Profile **************/
-
-#endif /* PROFILE_8266_H */
diff --git a/tools/voice/lantiq/kernel/profile_89116.c b/tools/voice/lantiq/kernel/profile_89116.c
deleted file mode 100644
index d69e91a..0000000
--- a/tools/voice/lantiq/kernel/profile_89116.c
+++ /dev/null
@@ -1,2412 +0,0 @@
-/*
- * profile_89116.c --
- *
- * This file contains profile data in byte format
- *
- * Project Info --
- *   File:   C:\Microsemi\Profile_Wizard_P2.1.2\890\NewProject116_new.vpw
- *   Type:   VE890 Configuration for 100V Buck-Boost Power Supply, Lite Narrowband FXS Coefficients, and 8.192MHz PCLK
- *   Date:   Wednesday, May 02, 2012 12:15:05
- *   Device: VE890 Le89316
- *
- *   This file was generated with Profile Wizard Version: P2.1.2
- *
- * Project Comments --
- *  --------------------------------------------
- *  Profile Wizard Coefficient Release 2.8 Notes:
- *  --------------------------------------------
- *  Added FXS AC Profile for Brazil (900R) and Russia (150R + (510R//47nF))
- *  Updated FXS AC Profiles for Australia, China, GR-57 (US non-loaded), Japan, New Zealand, and the UK
- *  --------------------------------------------
- *  Profile Wizard Coefficient Release 2.7 Notes:
- *  --------------------------------------------
- *  Replaced incorrect FXS AC Profiles for GR-57, China, Finland, and Japan
- *  --------------------------------------------
- *  Profile Wizard Coefficient Release 2.6 Notes:
- *  --------------------------------------------
- *  I. General:
- *  1. This release adds support for Mexico, Turkey, Thailand, Malaysia, Indonesia, and Ecuador, bringing
- *  the total number of supported countries to 44.  They are:
- *  Argentina (AR), Austria (AT), Australia (AU), Belgium (BE), Bulgaria (BG), Brazil (BR), Canada (CA), Switzerland (CH),
- *  Chile (CL), China (CN), Czech Republic (CZ), Germany (DE), Denmark (DK), Ecuador (EC), Spain (ES), Finland (FI),
- *  France (FR), UK (GB), Greece (GR), Hong Kong SAR China (HK), Hungary (HU), Indonesia (ID), Ireland (IE), Israel (IL),
- *  India (IN), Iceland (IS), Italy (IT), Japan (JP), S. Korea (KR), Mexico (MX), Malaysia (MY), Netherlands (NL),
- *  Norway (NO), New Zealand (NZ), Poland (PL), Portugal (PT), Russian Federation (RU), Sweden (SE), Singapore (SG),
- *  Thailand (TH), Turkey (TK), Taiwan (TW), USA (US), and South Africa (ZA).
- *  2. This release also corrects some Caller ID implementations and signal levels that were incorrect in release 2.3.
- *  3. The coefficients in this and all releases are provided for use only with the Microsemi VoicePath API-II (VP-API-II).
- *  Please refer to the terms and conditions for licensing the software regarding terms and conditions of usage. These profiles
- *  are provided for reference only with no guarantee whatsoever by Microsemi Corporation.
- *  4. This release is for the VE8911 chipset and includes coefficients required for FXS and FXO operation.
- *
- *  II. Device Profile:
- *  1. The default settings for the Device Profile are:
- *         PCLK = 8192 kHz
- *         PCM Transmit Edge = Positive
- *         Transmit Time Slot = 0
- *         Receive Time Slot = 0
- *         Interrupt Mode = Open Drain
- *         Switcher = Buck-Boost
- *         Driver Tick Rate = 5 ms
- *         Maximum Events / Tick = 2
- *  2. The settings may be changed by the user as necessary.  Please refer to the VE890 and API documentation for information about
- *  the supported settings.
- *
- *  II. AC Profiles:
- *  1. FXS Coefficients assume -6dBr RX (Output from chipset) and 0dB TX relative gain levels.
- *  2. Supported countries not individually listed should use the default 600R profile AC_FXS_RF50_600R_DEF.
- *  4. AC FXS Coefficients assume the use of two 25 ohm series resistors or PTCs. Customers using other PTC resistance values (such as
- *  7 ohms or 50 ohms) should not use these AC coefficients and can request alternate ones from Microsemi.
- *  5. This release includes Normal (or narrowband) coefficients for the FXS port. Wideband coefficients are available upon request.
- *  6. AC FXO Coefficients assume the use of the LC Filter on VE890 DAA Circuit consisting of CIMM and LIMM as shown
- *  in the datasheet.
- *  7. AC FXO Coefficients include the coefficient sets for the VE890 echo free adaptive balance.
- *
- *  III. DC Profile:
- *  1. The DC_FXS_VE890_BB100V_DEF is the default used for all countries.  Additional profiles may be created by the user if necessary.
- *
- *  IV. Ring Profiles:
- *  1. RING_25HZ_VE890_BB100V_DEF is the default ringing profile and should be used for all countries which do not have a listed Ringing Profile.  The default
- *  ringing profile is set for a sine wave ringing with an amplitude of 50 Vrms and a frequency of 25 Hz.
- *  2. All ringing profiles on the list have a 50 Vrms ringing level.
- *  3. DC biasing is set to 0 in the sample ringing profiles.
- *
- *  V. Tone Profiles:
- *  1. These profiles are available only in the full version of the API.
- *  2. The shown levels assume a 6dB attenuation in the chipset before being outputed to line.
- *  3. Call progress tone levels may be arbitrary as they are not always specified in national standards, or the standards may not be available to Microsemi.
- *  4. ITU-T Recommendation E.180 (03/1998) revised on 02/2003 and ETSI TR 101 041-2 V.1.1.1 (05/1997) were used if national standards were not
- *  available.
- *  5. Recommended ETSI ES 201 970 call progress tones are provided for reference.
- *  6. Modulated tones f1 x f2 are approximated as the sum of f1 + (f1+f2)/2 + (f1-f2)/2.
- *  7. The data in these profiles may be changed by the user as necessary.
- *   8. T_CAS_DEF is not a country-specific tone and is used by several national Caller ID profiles.
- *
- *  VI. Cadence Profiles:
- *  1. These profiles are available only in the full version of the API.
- *  2.  ITU-T Recommendation E.180 (03/1998) revised on 02/2003 and ETSI TR 101 041-2 V.1.1.1 (05/1997) were used if national standards were not
- *  available.
- *  3. Recommended ETSI ES 201 970 call progress cadences are provided for reference.
- *  4. Some countries support multiple call progress tone cadences.  The ones used are believed to be representative and most common.  The user may
- *  wish to edit some of the cadence definitions or add additional cadences.
- *  5. Ringing signal cadences include the alerting signal(s) and necessary delays for Type 1 Caller ID, if it is supported below in the Caller ID Profiles.
- *
- *  VII. Caller ID Profiles:
- *  1. These profiles are available only in the full version of the API.
- *  2. The option to calculate the checksum in the API is selected for all countries except Japan, which requires that the CRC checksum be calculated by
- *  host application.
- *
- *  VIII. FXO/Dialing Profiles:
- *  1. 44 country-specific profiles are provided.  They take into account such variations in national standards as pulse dialing, DTMF dialing, and line
- *  event detection parameters.
- *  2. They may be edited as necessary to meet regulatory requirements.
- *  3. ETSI 203 021 defaults are also provided for reference.
- *
- *  IX. Metering Profiles:
- *  1. Not supported by VE890 Series.
- *
- *  (c) Copyright 2011 Microsemi Corporation. All rights reserved.
- *
- *  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- */
-
-#include "profile_89116.h"
-
-
-/************** Device_Parameters **************/
-
-/* Device Configuration Data - VE890 100V Buck-Boost */
-const VpProfileDataType DEV_PROFILE_VE890_BB100V[] =
-{
-  /* Device Profile for VE890 Device Family */
- 0x00, 0xFF, 0x02, 0x1A, /* Profile Type and Length */
- 0x06, 0x00, /* Version and MPI Command */
- 0x20, 0x00, /* PCLK Frequency */
- 0x8A, 0x00, /* Device Config 1 and MCLK Correction */
- 0x40, 0x02, /* Clock Slot and Max Events */
- 0x0A, 0x00, /* Device Tickrate */
- 0xE4, 0x02, 0x44, 0x0A, /* Buck-Boost Switching Regulator Parameters */
- 0x75, 0x00, 0x98, 0x40, 0xC0, 0x40, /* Regulator Timing Parameters */
- 0x28, 0x40, 0x30, 0x40, 0x30, 0x40  /* FreeRun Timing Parameters */
-};
-
-/************** AC_Coefficients **************/
-
-/* AC FXS RF50 600R Normal Coefficients (Default)  */
-const VpProfileDataType AC_FXS_RF50_600R_DEF[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBC, 0x4C, 0x01, 0x49, 0xCA, 0xF1, 0x98, 0xAA, 0x5B, 0xEB,
- 0x2C, 0x72, 0xA4, 0x26, 0x24, 0xEB, 0x2D, 0x9A, 0x2B, 0xBA, 0x27, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x2B, 0xA0, 0xD2, 0xA2, 0xAC, 0xCB, 0xE5, 0xA3,
- 0x2B, 0xBC, 0xAD, 0x46, 0x88, 0x3C, 0x20, 0x33, 0x4D, 0xAA, 0xB7, 0x45,
- 0xE6, 0x24, 0x5F, 0x22, 0x9F, 0x82, 0xAA, 0x71, 0x80, 0xC8, 0xF0, 0x50,
- 0x00, 0x86, 0x2A, 0x42, 0xA1, 0xDB, 0x1C, 0xA3, 0xA8, 0xFE, 0x87, 0xAA,
- 0xFA, 0x9F, 0xB9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF50 ETSI ES201 970 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_ETSI[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Telcordia GR-57 900R+2.16uF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_GR57[] =
-{
-  /* AC Profile */
- 0xE4, 0x00, 0xE1, 0x4C, 0x01, 0x49, 0xCA, 0x0E, 0x98, 0x7B, 0xCA, 0x64,
- 0x5D, 0x2A, 0xB3, 0xBA, 0xA3, 0xC2, 0x2C, 0x9A, 0x6B, 0xA2, 0x25, 0x2D,
- 0x01, 0x8A, 0xC3, 0xC0, 0xA2, 0x21, 0x24, 0x25, 0x22, 0x37, 0x22, 0xAD,
- 0x2A, 0x87, 0x23, 0xA7, 0x88, 0x2A, 0xC0, 0x32, 0x2D, 0x53, 0xB4, 0x2A,
- 0xAC, 0xA4, 0x36, 0x22, 0x6F, 0x82, 0x29, 0x71, 0x80, 0xB9, 0xF0, 0x50,
- 0x00, 0x86, 0xA4, 0x53, 0xA1, 0x42, 0x12, 0x32, 0xAA, 0x47, 0x35, 0xAB,
- 0x7A, 0x97, 0xB2, 0x70, 0x96, 0x25, 0xC0, 0x00
-};
-
-/* AC FXS RF50 Austria 220R+820R//115nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_AT[] =
-{
-  /* AC Profile */
- 0x55, 0x00, 0xC7, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0x3C, 0x41, 0xB4,
- 0xB2, 0x3B, 0x3B, 0xEA, 0xBA, 0xF4, 0x53, 0x9A, 0x2E, 0xA2, 0x97, 0x9F,
- 0x01, 0x8A, 0x9C, 0xD0, 0x2A, 0x10, 0x97, 0xB8, 0xDA, 0x33, 0xA3, 0x3E,
- 0xBA, 0x8F, 0xAB, 0x8F, 0x88, 0xB3, 0xC0, 0x22, 0xB6, 0xD2, 0x2D, 0xBB,
- 0x4E, 0x22, 0x25, 0xC2, 0xAD, 0x82, 0xA8, 0xF1, 0x80, 0xA8, 0xF0, 0x50,
- 0x00, 0x86, 0xB4, 0x5B, 0x32, 0x24, 0x1A, 0xA1, 0x2C, 0x2D, 0xB3, 0x6B,
- 0x4C, 0xC5, 0xBC, 0x60, 0x96, 0x23, 0xA1, 0x00
-};
-
-/* AC FXS RF50 Australia 220R+820R//120nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_AU[] =
-{
-  /* AC Profile */
- 0xF5, 0x00, 0x1A, 0x4C, 0x01, 0x49, 0xCA, 0xE6, 0x98, 0xB3, 0x51, 0x3A,
- 0x62, 0xBC, 0xCB, 0xA3, 0xCA, 0x3A, 0xC3, 0x9A, 0x42, 0xC2, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0xEA, 0x10, 0x3B, 0xB8, 0x2B, 0x24, 0x22, 0xA3,
- 0x24, 0xAB, 0xC3, 0x35, 0x88, 0x25, 0xC0, 0xBD, 0x37, 0x3B, 0x3D, 0x3B,
- 0x3E, 0x2A, 0x35, 0xC2, 0x2E, 0x82, 0x29, 0x71, 0x80, 0x29, 0xF0, 0x50,
- 0x00, 0x86, 0x53, 0x53, 0x32, 0xA4, 0x1A, 0xA1, 0xCB, 0x2D, 0xB3, 0xBB,
- 0x4A, 0xB5, 0x2B, 0x60, 0x96, 0xAA, 0xA1, 0x00
-};
-
-/* AC FXS RF50 Belgium 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_BE[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Bulgaria 220R+820R//115nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_BG[] =
-{
-  /* AC Profile */
- 0x55, 0x00, 0xC7, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0x3C, 0x41, 0xB4,
- 0xB2, 0x3B, 0x3B, 0xEA, 0xBA, 0xF4, 0x53, 0x9A, 0x2E, 0xA2, 0x97, 0x9F,
- 0x01, 0x8A, 0x9C, 0xD0, 0x2A, 0x10, 0x97, 0xB8, 0xDA, 0x33, 0xA3, 0x3E,
- 0xBA, 0x8F, 0xAB, 0x8F, 0x88, 0xB3, 0xC0, 0x22, 0xB6, 0xD2, 0x2D, 0xBB,
- 0x4E, 0x22, 0x25, 0xC2, 0xAD, 0x82, 0xA8, 0xF1, 0x80, 0xA8, 0xF0, 0x50,
- 0x00, 0x86, 0xB4, 0x5B, 0x32, 0x24, 0x1A, 0xA1, 0x2C, 0x2D, 0xB3, 0x6B,
- 0x4C, 0xC5, 0xBC, 0x60, 0x96, 0x23, 0xA1, 0x00
-};
-
-/* AC FXS RF50 Brazil 900R Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_BR[] =
-{
-  /* AC Profile */
- 0x33, 0x00, 0x7D, 0x4C, 0x01, 0x49, 0xCA, 0x09, 0x98, 0x22, 0x3B, 0xBB,
- 0x2C, 0x5A, 0xA4, 0x23, 0xA3, 0x75, 0xAC, 0x9A, 0x3A, 0xAA, 0xF7, 0x9F,
- 0x01, 0x8A, 0x2E, 0x01, 0xAD, 0xA0, 0xAA, 0xAB, 0xC2, 0x53, 0xB2, 0xAB,
- 0xAA, 0xC5, 0xC3, 0x9F, 0x88, 0x22, 0x60, 0x42, 0xAB, 0xB2, 0x35, 0xF4,
- 0xB5, 0x24, 0x4D, 0xC2, 0x27, 0x82, 0xA8, 0x71, 0x80, 0x29, 0xF0, 0x50,
- 0x00, 0x86, 0xAB, 0x44, 0xE1, 0x2A, 0x0B, 0x43, 0xC8, 0x7F, 0x27, 0x3C,
- 0xE3, 0x9F, 0x5D, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF50 Switzerland 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_CH[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 China 200R+680R//100nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_CN[] =
-{
-  /* AC Profile */
- 0x02, 0x00, 0xD1, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0xCC, 0xA1, 0xB2,
- 0xD2, 0x24, 0xAB, 0xAA, 0xBA, 0xA6, 0xB3, 0x9A, 0xE2, 0x34, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0xB4, 0x20, 0x43, 0xA8, 0xA8, 0xF3, 0xAD, 0x2F,
- 0x22, 0xAF, 0x3A, 0x87, 0x88, 0x3C, 0xD0, 0x2A, 0xA5, 0xAA, 0x2D, 0xA3,
- 0xAD, 0xAB, 0x25, 0x33, 0xAD, 0x82, 0xA9, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xA3, 0x53, 0x32, 0x55, 0x12, 0xA1, 0x72, 0x3C, 0xB4, 0x26,
- 0x6B, 0x87, 0xB9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF50 Germany 220R+820R//115nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_DE[] =
-{
-  /* AC Profile */
- 0x55, 0x00, 0xC7, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0x3C, 0x41, 0xB4,
- 0xB2, 0x3B, 0x3B, 0xEA, 0xBA, 0xF4, 0x53, 0x9A, 0x2E, 0xA2, 0x97, 0x9F,
- 0x01, 0x8A, 0x9C, 0xD0, 0x2A, 0x10, 0x97, 0xB8, 0xDA, 0x33, 0xA3, 0x3E,
- 0xBA, 0x8F, 0xAB, 0x8F, 0x88, 0xB3, 0xC0, 0x22, 0xB6, 0xD2, 0x2D, 0xBB,
- 0x4E, 0x22, 0x25, 0xC2, 0xAD, 0x82, 0xA8, 0xF1, 0x80, 0xA8, 0xF0, 0x50,
- 0x00, 0x86, 0xB4, 0x5B, 0x32, 0x24, 0x1A, 0xA1, 0x2C, 0x2D, 0xB3, 0x6B,
- 0x4C, 0xC5, 0xBC, 0x60, 0x96, 0x23, 0xA1, 0x00
-};
-
-/* AC FXS RF50 Denmark 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_DK[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Spain 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_ES[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Finland 270R+910R//120nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_FI[] =
-{
-  /* AC Profile */
- 0x1F, 0x00, 0xAA, 0x4C, 0x01, 0x49, 0xCA, 0xEC, 0x98, 0x2B, 0x41, 0x52,
- 0x23, 0xAB, 0x6B, 0x22, 0x2B, 0xCA, 0xA3, 0x9A, 0x62, 0xB2, 0x97, 0x9F,
- 0x01, 0x8A, 0x2E, 0x01, 0xBC, 0x00, 0x23, 0x58, 0x2D, 0x3A, 0xB5, 0xA1,
- 0x23, 0xEA, 0xAA, 0x24, 0x88, 0xCB, 0x50, 0xA2, 0xAF, 0x3E, 0x2D, 0x22,
- 0xDF, 0x3A, 0x25, 0xB3, 0x2E, 0x82, 0x32, 0x22, 0x80, 0x3C, 0xA0, 0x50,
- 0x00, 0x86, 0xB4, 0x5A, 0x22, 0x23, 0x1A, 0xC1, 0x23, 0x22, 0x23, 0xBA,
- 0x32, 0xC4, 0xB3, 0x50, 0x96, 0x3A, 0x31, 0x00
-};
-
-/* AC FXS RF50 France 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_FR[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 UK 370R+620R//310nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_GB[] =
-{
-  /* AC Profile */
- 0x07, 0x00, 0xE7, 0x4C, 0x01, 0x49, 0xCA, 0xE0, 0x98, 0xDB, 0xA1, 0x2B,
- 0x22, 0x2A, 0x24, 0xC2, 0x3C, 0xF4, 0xA6, 0x9A, 0x4B, 0xA2, 0xB6, 0x2E,
- 0x01, 0x8A, 0xD3, 0xD0, 0x2A, 0x10, 0x23, 0x29, 0xA2, 0xDA, 0x4D, 0x26,
- 0x43, 0xAD, 0x23, 0x97, 0x88, 0x2A, 0x50, 0x3C, 0x2E, 0x4B, 0x4D, 0x23,
- 0x4E, 0xBB, 0x26, 0x72, 0xBF, 0x82, 0xF8, 0x71, 0x80, 0xF9, 0xF0, 0x50,
- 0x00, 0x86, 0x73, 0x5C, 0x32, 0x2C, 0x13, 0x22, 0xAA, 0x24, 0x33, 0xAA,
- 0x32, 0x34, 0xAA, 0x40, 0x96, 0xA3, 0xA0, 0x00
-};
-
-/* AC FXS RF50 Greece 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_GR[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Hungary 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_HU[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Ireland 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_IE[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Israel 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_IL[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Iceland 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_IS[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Italy 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_IT[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Japan 600R+1uF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_JP[] =
-{
-  /* AC Profile */
- 0x90, 0x00, 0xD7, 0x4C, 0x01, 0x49, 0xCA, 0xF6, 0x98, 0x22, 0x2C, 0xA2,
- 0x37, 0x34, 0x25, 0x53, 0xE5, 0x9F, 0x45, 0x9A, 0xBA, 0xA2, 0x23, 0x4B,
- 0xC0, 0x8A, 0xAA, 0xA0, 0xC6, 0xB0, 0xAE, 0x4B, 0x2A, 0xB3, 0xAC, 0x2C,
- 0xDF, 0xA6, 0xB3, 0x97, 0x88, 0x3A, 0x20, 0x23, 0xBE, 0x42, 0xAD, 0x32,
- 0x9F, 0x34, 0xAD, 0x3B, 0x8F, 0x82, 0xB8, 0x71, 0x80, 0xAA, 0xF0, 0x50,
- 0x00, 0x86, 0xBA, 0x52, 0xA1, 0xAF, 0x12, 0xA2, 0xB2, 0x4B, 0x24, 0x2D,
- 0x43, 0xB4, 0x3D, 0x40, 0x96, 0xF2, 0xD0, 0x00
-};
-
-/* AC FXS RF50 Netherlands 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_NL[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Norway 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_NO[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 New Zealand 370R+620R//310nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_NZ[] =
-{
-  /* AC Profile */
- 0xA9, 0x00, 0x06, 0x4C, 0x01, 0x49, 0xCA, 0xF9, 0x98, 0x4A, 0xA9, 0xBA,
- 0xA1, 0xA2, 0xA1, 0x33, 0xBB, 0x33, 0x2D, 0x9A, 0xB4, 0xB2, 0x27, 0x1F,
- 0x01, 0x8A, 0xBC, 0x01, 0x79, 0x70, 0x2C, 0xAB, 0x32, 0xA9, 0x24, 0xB5,
- 0x3B, 0xCD, 0x3C, 0x8F, 0x88, 0x43, 0xD0, 0x3E, 0xA2, 0xAA, 0x2A, 0xAB,
- 0x22, 0x2A, 0xAA, 0x3B, 0xA3, 0x82, 0xA8, 0x71, 0x80, 0xB9, 0xF0, 0x50,
- 0x00, 0x86, 0xD2, 0x54, 0x22, 0x5C, 0x1D, 0x52, 0x2A, 0x2B, 0xA3, 0xA3,
- 0x42, 0xA4, 0xCC, 0x50, 0x96, 0x22, 0xA0, 0x00
-};
-
-/* AC FXS RF50 Portugal 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_PT[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 Russia 150R+510R//47nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_RU[] =
-{
-  /* AC Profile */
- 0x81, 0x00, 0x5A, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0x2C, 0xA2, 0x2A,
- 0x44, 0x62, 0x6C, 0x22, 0xAB, 0x7A, 0xA4, 0x9A, 0xAB, 0x3A, 0x97, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x33, 0x40, 0xA2, 0xA9, 0xA2, 0x53, 0x2B, 0x2D,
- 0x97, 0xB7, 0xAD, 0x87, 0x88, 0xDE, 0x30, 0xB2, 0x36, 0xAA, 0xCD, 0xAA,
- 0x2F, 0x42, 0xB5, 0x42, 0x2E, 0x82, 0xBA, 0x71, 0x80, 0xA9, 0xF0, 0x50,
- 0x00, 0x86, 0xD3, 0x5A, 0x22, 0xBC, 0x14, 0xB2, 0xA3, 0x53, 0xBF, 0xBA,
- 0xFA, 0x9F, 0xA9, 0xF0, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXS RF50 Sweden 270R+750R//150nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_SE[] =
-{
-  /* AC Profile */
- 0xC0, 0x00, 0xBD, 0x4C, 0x01, 0x49, 0xCA, 0xE4, 0x98, 0x7B, 0xB1, 0xAC,
- 0xE2, 0xAA, 0xAC, 0x22, 0x2B, 0x4A, 0x34, 0x9A, 0xC4, 0xA2, 0xA7, 0x9F,
- 0x01, 0x8A, 0x2D, 0x01, 0x22, 0x20, 0x23, 0xA8, 0xBB, 0xAC, 0x4A, 0xA4,
- 0x2C, 0x5D, 0x6A, 0x27, 0x88, 0xAA, 0xE0, 0x2A, 0x8F, 0x22, 0x2D, 0xAA,
- 0xAE, 0x23, 0x25, 0x52, 0xAD, 0x82, 0x2A, 0xF1, 0x80, 0xBA, 0xE0, 0x50,
- 0x00, 0x86, 0xD3, 0x54, 0x32, 0x97, 0x14, 0xA1, 0xAA, 0x2B, 0xB3, 0xAD,
- 0x42, 0x45, 0xB3, 0x60, 0x96, 0xA5, 0xE1, 0x00
-};
-
-/* AC FXS RF50 South Africa 220R+820R//115nF Normal Coefficients */
-const VpProfileDataType AC_FXS_RF50_ZA[] =
-{
-  /* AC Profile */
- 0x55, 0x00, 0xC7, 0x4C, 0x01, 0x49, 0xCA, 0xE8, 0x98, 0x3C, 0x41, 0xB4,
- 0xB2, 0x3B, 0x3B, 0xEA, 0xBA, 0xF4, 0x53, 0x9A, 0x2E, 0xA2, 0x97, 0x9F,
- 0x01, 0x8A, 0x9C, 0xD0, 0x2A, 0x10, 0x97, 0xB8, 0xDA, 0x33, 0xA3, 0x3E,
- 0xBA, 0x8F, 0xAB, 0x8F, 0x88, 0xB3, 0xC0, 0x22, 0xB6, 0xD2, 0x2D, 0xBB,
- 0x4E, 0x22, 0x25, 0xC2, 0xAD, 0x82, 0xA8, 0xF1, 0x80, 0xA8, 0xF0, 0x50,
- 0x00, 0x86, 0xB4, 0x5B, 0x32, 0x24, 0x1A, 0xA1, 0x2C, 0x2D, 0xB3, 0x6B,
- 0x4C, 0xC5, 0xBC, 0x60, 0x96, 0x23, 0xA1, 0x00
-};
-
-/* AC FXO LC Filter 600R Normal ABF Coefficients (Default) */
-const VpProfileDataType AC_FXO_LC_600R_DEF[] =
-{
-  /* AC Profile */
- 0xF6, 0x00, 0x42, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0xAA, 0x42, 0x2E,
- 0xAC, 0xA2, 0xAA, 0xC2, 0x2C, 0x42, 0x33, 0x9A, 0xCA, 0x87, 0x01, 0x6E,
- 0x01, 0x8A, 0xB3, 0xD0, 0x24, 0x20, 0xAC, 0xA9, 0x32, 0xB3, 0xA2, 0xD5,
- 0x23, 0xBC, 0x2B, 0x26, 0x88, 0xA4, 0x10, 0xBC, 0x58, 0x3A, 0xA0, 0xEA,
- 0xB9, 0xAC, 0x23, 0xAC, 0x6D, 0x82, 0x24, 0xA0, 0x80, 0x32, 0x20, 0x50,
- 0x01, 0x76, 0x20, 0x86, 0xBD, 0xEC, 0xD4, 0x2D, 0x43, 0xC2, 0x3A, 0xDB,
- 0x3E, 0x32, 0x6E, 0xA6, 0x87, 0x60, 0x96, 0xBD, 0x01, 0x09, 0x12, 0x86,
- 0xC4, 0xD1, 0xB3, 0x2B, 0x42, 0xB2, 0x3A, 0xA7, 0x3B, 0x3A, 0x5B, 0x97,
- 0x57, 0x61, 0x96, 0x22, 0xE0, 0x86, 0x34, 0xEB, 0x24, 0x22, 0x4D, 0xC2,
- 0x33, 0xA4, 0xBA, 0x29, 0xF4, 0x87, 0xB3, 0x61, 0x96, 0x49, 0xE0, 0x86,
- 0x16, 0xD1, 0xB3, 0xD3, 0x42, 0xE2, 0xD2, 0xAB, 0x2A, 0x3A, 0xC1, 0xCE,
- 0x30, 0x71, 0x96, 0x13, 0xE0, 0x86, 0x4F, 0xE9, 0xF4, 0x1B, 0x31, 0x42,
- 0x3A, 0x94, 0x1A, 0x32, 0xC2, 0xBB, 0x17, 0x61, 0x96, 0x32, 0xE0, 0x86,
- 0x12, 0x71, 0xA7, 0x15, 0x33, 0x22, 0x1B, 0x96, 0xB9, 0x23, 0xF2, 0x5A,
- 0x51, 0x73, 0x96, 0x1A, 0xE0, 0x86, 0x2D, 0xD4, 0x14, 0x22, 0x44, 0xC2,
- 0x1C, 0xB1, 0x2B, 0xC4, 0x5B, 0xAF, 0x36, 0x61, 0x96, 0x07, 0xE0, 0x86,
- 0x12, 0xF1, 0x8B, 0x1B, 0x32, 0x42, 0x23, 0xB1, 0xBA, 0x41, 0xC3, 0xAC,
- 0x14, 0x61, 0x96, 0x29, 0xE0, 0x86, 0x3C, 0xCC, 0x43, 0x1B, 0x52, 0x42,
- 0x4A, 0xC2, 0x2A, 0x2C, 0xAB, 0x3A, 0x3A, 0xB2, 0x96, 0x3A, 0x80, 0x86,
- 0x18, 0x51, 0xE4, 0xB3, 0xF1, 0x23, 0x13, 0xC3, 0xAA, 0x3A, 0xBB, 0x3E,
- 0x24, 0x61, 0x96, 0x24, 0xE0, 0x00
-};
-
-/* AC FXO LC Filter ETSI ES203 021 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_ETSI[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter TBR21 with Current Limit 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_TBR21_CR[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x38, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Telcordia GR-57 600R Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_GR57[] =
-{
-  /* AC Profile */
- 0xF6, 0x00, 0x42, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0xAA, 0x42, 0x2E,
- 0xAC, 0xA2, 0xAA, 0xC2, 0x2C, 0x42, 0x33, 0x9A, 0xCA, 0x87, 0x01, 0x6E,
- 0x01, 0x8A, 0xB3, 0xD0, 0x24, 0x20, 0xAC, 0xA9, 0x32, 0xB3, 0xA2, 0xD5,
- 0x23, 0xBC, 0x2B, 0x26, 0x88, 0xA4, 0x10, 0xBC, 0x58, 0x3A, 0xA0, 0xEA,
- 0xB9, 0xAC, 0x23, 0xAC, 0x6D, 0x82, 0x24, 0xA0, 0x80, 0x32, 0x20, 0x50,
- 0x01, 0x76, 0x20, 0x86, 0xBD, 0xEC, 0xD4, 0x2D, 0x43, 0xC2, 0x3A, 0xDB,
- 0x3E, 0x32, 0x6E, 0xA6, 0x87, 0x60, 0x96, 0xBD, 0x01, 0x09, 0x12, 0x86,
- 0xC4, 0xD1, 0xB3, 0x2B, 0x42, 0xB2, 0x3A, 0xA7, 0x3B, 0x3A, 0x5B, 0x97,
- 0x57, 0x61, 0x96, 0x22, 0xE0, 0x86, 0x34, 0xEB, 0x24, 0x22, 0x4D, 0xC2,
- 0x33, 0xA4, 0xBA, 0x29, 0xF4, 0x87, 0xB3, 0x61, 0x96, 0x49, 0xE0, 0x86,
- 0x16, 0xD1, 0xB3, 0xD3, 0x42, 0xE2, 0xD2, 0xAB, 0x2A, 0x3A, 0xC1, 0xCE,
- 0x30, 0x71, 0x96, 0x13, 0xE0, 0x86, 0x4F, 0xE9, 0xF4, 0x1B, 0x31, 0x42,
- 0x3A, 0x94, 0x1A, 0x32, 0xC2, 0xBB, 0x17, 0x61, 0x96, 0x32, 0xE0, 0x86,
- 0x12, 0x71, 0xA7, 0x15, 0x33, 0x22, 0x1B, 0x96, 0xB9, 0x23, 0xF2, 0x5A,
- 0x51, 0x73, 0x96, 0x1A, 0xE0, 0x86, 0x2D, 0xD4, 0x14, 0x22, 0x44, 0xC2,
- 0x1C, 0xB1, 0x2B, 0xC4, 0x5B, 0xAF, 0x36, 0x61, 0x96, 0x07, 0xE0, 0x86,
- 0x12, 0xF1, 0x8B, 0x1B, 0x32, 0x42, 0x23, 0xB1, 0xBA, 0x41, 0xC3, 0xAC,
- 0x14, 0x61, 0x96, 0x29, 0xE0, 0x86, 0x3C, 0xCC, 0x43, 0x1B, 0x52, 0x42,
- 0x4A, 0xC2, 0x2A, 0x2C, 0xAB, 0x3A, 0x3A, 0xB2, 0x96, 0x3A, 0x80, 0x86,
- 0x18, 0x51, 0xE4, 0xB3, 0xF1, 0x23, 0x13, 0xC3, 0xAA, 0x3A, 0xBB, 0x3E,
- 0x24, 0x61, 0x96, 0x24, 0xE0, 0x00
-};
-
-/* AC FXO LC Filter Austria 220R+820R//115nF Normal Coefficients */
-const VpProfileDataType AC_FXO_LC_AT[] =
-{
-  /* AC Profile */
- 0x10, 0x00, 0xB6, 0xF2, 0x01, 0x4B, 0xCA, 0xFD, 0x98, 0xB2, 0x33, 0x2A,
- 0x97, 0xAA, 0x2C, 0x5A, 0xAC, 0xAA, 0x34, 0x9A, 0x01, 0x90, 0x08, 0x9F,
- 0x01, 0x8A, 0x3B, 0xC0, 0x22, 0x10, 0xDA, 0xA9, 0x2B, 0xA8, 0x32, 0x21,
- 0xA2, 0xA9, 0x52, 0xB3, 0x88, 0xE2, 0x50, 0x52, 0x3A, 0x2A, 0x22, 0x22,
- 0xA3, 0x32, 0xAB, 0x2D, 0xB4, 0x82, 0xC2, 0x31, 0x80, 0xAA, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0xBA, 0xEC, 0x97, 0x2B, 0x34, 0x27, 0x3A, 0xA2,
- 0xAA, 0xAA, 0xB2, 0xAC, 0x36, 0x60, 0x96, 0x2E, 0x01, 0x09, 0x12, 0x86,
- 0x23, 0xFA, 0x97, 0xAA, 0x3A, 0x97, 0xAA, 0xAA, 0xAA, 0xF4, 0xBB, 0x2C,
- 0x2B, 0x60, 0x96, 0x2E, 0x01, 0x86, 0x3A, 0xDA, 0x5F, 0xAA, 0x33, 0xAE,
- 0xC7, 0xAD, 0x4A, 0xFA, 0xAA, 0xCB, 0x42, 0xC0, 0x96, 0xB4, 0x41, 0x86,
- 0xBA, 0xDA, 0x3F, 0xAA, 0x3A, 0xAF, 0x98, 0x9A, 0x3A, 0xAA, 0xAA, 0x3B,
- 0x2B, 0xB0, 0x96, 0xBC, 0x31, 0x86, 0x97, 0xF2, 0xAD, 0xBA, 0x42, 0xA3,
- 0xCB, 0xB3, 0xCA, 0x2C, 0xA3, 0xAA, 0xD2, 0xB0, 0x96, 0x32, 0xA0, 0x86,
- 0x3A, 0x6B, 0xA2, 0x2A, 0x02, 0xA4, 0xA3, 0x8A, 0x18, 0x23, 0x8E, 0xB8,
- 0xBA, 0x80, 0x96, 0xA2, 0xA0, 0x86, 0xE8, 0xF2, 0x2F, 0x2B, 0x44, 0xA3,
- 0xC6, 0xCA, 0x2B, 0x2E, 0xBA, 0x2C, 0x33, 0x70, 0x96, 0x2E, 0x01, 0x86,
- 0xF8, 0x72, 0xBE, 0x3C, 0x43, 0xA3, 0x22, 0xC2, 0xAA, 0xA2, 0xB2, 0xAB,
- 0xA3, 0x70, 0x96, 0x2E, 0x01, 0x86, 0xCC, 0xE2, 0xBD, 0x3A, 0x43, 0x24,
- 0xBB, 0xBA, 0xBA, 0x4B, 0xA2, 0x2B, 0xA6, 0xB0, 0x96, 0x5D, 0x21, 0x86,
- 0xBA, 0xEA, 0x87, 0xAB, 0x3C, 0x75, 0x2A, 0xA2, 0xAA, 0x5A, 0xB2, 0xED,
- 0x52, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXO LC Filter Australia 220R+820R//120nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_AU[] =
-{
-  /* AC Profile */
- 0x10, 0x00, 0xB6, 0xF2, 0x01, 0x4B, 0xCA, 0xFD, 0x98, 0xB2, 0x33, 0x2A,
- 0x97, 0xAA, 0x2C, 0x5A, 0xAC, 0xAA, 0x34, 0x9A, 0x01, 0x90, 0x08, 0x9F,
- 0x01, 0x8A, 0x3B, 0xC0, 0x22, 0x10, 0xDA, 0xA9, 0x2B, 0xA8, 0x32, 0x21,
- 0xA2, 0xA9, 0x52, 0xB3, 0x88, 0xE2, 0x50, 0x52, 0x3A, 0x2A, 0x22, 0x22,
- 0xA3, 0x32, 0xAB, 0x2D, 0xB4, 0x82, 0xC2, 0x31, 0x80, 0xAA, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0xBA, 0xEC, 0x97, 0x2B, 0x34, 0x27, 0x3A, 0xA2,
- 0xAA, 0xAA, 0xB2, 0xAC, 0x36, 0x60, 0x96, 0x2E, 0x01, 0x09, 0x12, 0x86,
- 0x23, 0xFA, 0x97, 0xAA, 0x3A, 0x97, 0xAA, 0xAA, 0xAA, 0xF4, 0xBB, 0x2C,
- 0x2B, 0x60, 0x96, 0x2E, 0x01, 0x86, 0x3A, 0xDA, 0x5F, 0xAA, 0x33, 0xAE,
- 0xC7, 0xAD, 0x4A, 0xFA, 0xAA, 0xCB, 0x42, 0xC0, 0x96, 0xB4, 0x41, 0x86,
- 0xBA, 0xDA, 0x3F, 0xAA, 0x3A, 0xAF, 0x98, 0x9A, 0x3A, 0xAA, 0xAA, 0x3B,
- 0x2B, 0xB0, 0x96, 0xBC, 0x31, 0x86, 0x97, 0xF2, 0xAD, 0xBA, 0x42, 0xA3,
- 0xCB, 0xB3, 0xCA, 0x2C, 0xA3, 0xAA, 0xD2, 0xB0, 0x96, 0x32, 0xA0, 0x86,
- 0x3A, 0x6B, 0xA2, 0x2A, 0x02, 0xA4, 0xA3, 0x8A, 0x18, 0x23, 0x8E, 0xB8,
- 0xBA, 0x80, 0x96, 0xA2, 0xA0, 0x86, 0xE8, 0xF2, 0x2F, 0x2B, 0x44, 0xA3,
- 0xC6, 0xCA, 0x2B, 0x2E, 0xBA, 0x2C, 0x33, 0x70, 0x96, 0x2E, 0x01, 0x86,
- 0xF8, 0x72, 0xBE, 0x3C, 0x43, 0xA3, 0x22, 0xC2, 0xAA, 0xA2, 0xB2, 0xAB,
- 0xA3, 0x70, 0x96, 0x2E, 0x01, 0x86, 0xCC, 0xE2, 0xBD, 0x3A, 0x43, 0x24,
- 0xBB, 0xBA, 0xBA, 0x4B, 0xA2, 0x2B, 0xA6, 0xB0, 0x96, 0x5D, 0x21, 0x86,
- 0xBA, 0xEA, 0x87, 0xAB, 0x3C, 0x75, 0x2A, 0xA2, 0xAA, 0x5A, 0xB2, 0xED,
- 0x52, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXO LC Filter Belgium 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_BE[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Bulgaria 220R+820R//115nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_BG[] =
-{
-  /* AC Profile */
- 0x10, 0x00, 0xB6, 0xF2, 0x01, 0x4B, 0xCA, 0xFD, 0x98, 0xB2, 0x33, 0x2A,
- 0x97, 0xAA, 0x2C, 0x5A, 0xAC, 0xAA, 0x34, 0x9A, 0x01, 0x90, 0x08, 0x9F,
- 0x01, 0x8A, 0x3B, 0xC0, 0x22, 0x10, 0xDA, 0xA9, 0x2B, 0xA8, 0x32, 0x21,
- 0xA2, 0xA9, 0x52, 0xB3, 0x88, 0xE2, 0x50, 0x52, 0x3A, 0x2A, 0x22, 0x22,
- 0xA3, 0x32, 0xAB, 0x2D, 0xB4, 0x82, 0xC2, 0x31, 0x80, 0xAA, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0xBA, 0xEC, 0x97, 0x2B, 0x34, 0x27, 0x3A, 0xA2,
- 0xAA, 0xAA, 0xB2, 0xAC, 0x36, 0x60, 0x96, 0x2E, 0x01, 0x09, 0x12, 0x86,
- 0x23, 0xFA, 0x97, 0xAA, 0x3A, 0x97, 0xAA, 0xAA, 0xAA, 0xF4, 0xBB, 0x2C,
- 0x2B, 0x60, 0x96, 0x2E, 0x01, 0x86, 0x3A, 0xDA, 0x5F, 0xAA, 0x33, 0xAE,
- 0xC7, 0xAD, 0x4A, 0xFA, 0xAA, 0xCB, 0x42, 0xC0, 0x96, 0xB4, 0x41, 0x86,
- 0xBA, 0xDA, 0x3F, 0xAA, 0x3A, 0xAF, 0x98, 0x9A, 0x3A, 0xAA, 0xAA, 0x3B,
- 0x2B, 0xB0, 0x96, 0xBC, 0x31, 0x86, 0x97, 0xF2, 0xAD, 0xBA, 0x42, 0xA3,
- 0xCB, 0xB3, 0xCA, 0x2C, 0xA3, 0xAA, 0xD2, 0xB0, 0x96, 0x32, 0xA0, 0x86,
- 0x3A, 0x6B, 0xA2, 0x2A, 0x02, 0xA4, 0xA3, 0x8A, 0x18, 0x23, 0x8E, 0xB8,
- 0xBA, 0x80, 0x96, 0xA2, 0xA0, 0x86, 0xE8, 0xF2, 0x2F, 0x2B, 0x44, 0xA3,
- 0xC6, 0xCA, 0x2B, 0x2E, 0xBA, 0x2C, 0x33, 0x70, 0x96, 0x2E, 0x01, 0x86,
- 0xF8, 0x72, 0xBE, 0x3C, 0x43, 0xA3, 0x22, 0xC2, 0xAA, 0xA2, 0xB2, 0xAB,
- 0xA3, 0x70, 0x96, 0x2E, 0x01, 0x86, 0xCC, 0xE2, 0xBD, 0x3A, 0x43, 0x24,
- 0xBB, 0xBA, 0xBA, 0x4B, 0xA2, 0x2B, 0xA6, 0xB0, 0x96, 0x5D, 0x21, 0x86,
- 0xBA, 0xEA, 0x87, 0xAB, 0x3C, 0x75, 0x2A, 0xA2, 0xAA, 0x5A, 0xB2, 0xED,
- 0x52, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXO LC Filter Brazil 900R Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_BR[] =
-{
-  /* AC Profile */
- 0x2A, 0x00, 0x95, 0xF2, 0x01, 0x4B, 0xCA, 0x02, 0x98, 0xCC, 0x24, 0xE2,
- 0xCD, 0xFB, 0x2C, 0x2B, 0xDD, 0xC2, 0x34, 0x9A, 0x01, 0x90, 0x08, 0x6F,
- 0x01, 0x8A, 0x2D, 0xD0, 0x35, 0xA0, 0x2A, 0xA2, 0x2A, 0x2A, 0xC4, 0xB2,
- 0x9F, 0xBB, 0x9F, 0xB5, 0x88, 0xA2, 0x70, 0x01, 0x90, 0x01, 0x90, 0x01,
- 0x90, 0x01, 0x90, 0x01, 0x90, 0x82, 0x23, 0xA0, 0x80, 0xB9, 0xF0, 0x50,
- 0x01, 0x76, 0x28, 0x86, 0x2A, 0xDD, 0xA5, 0xA3, 0x35, 0xBC, 0xBA, 0xA2,
- 0xAB, 0xAC, 0x6A, 0x35, 0xBA, 0x50, 0x96, 0x1D, 0x01, 0x09, 0x12, 0x86,
- 0x4B, 0xEC, 0xA5, 0xAB, 0x23, 0xB2, 0x2A, 0x6B, 0xBD, 0xA8, 0x72, 0xA5,
- 0xC2, 0x60, 0x96, 0x5F, 0xD0, 0x86, 0x39, 0x7A, 0xCE, 0xAA, 0x3F, 0xA2,
- 0x22, 0xB3, 0xB9, 0xBB, 0x9B, 0x2A, 0xD2, 0xB0, 0x96, 0xA3, 0xC1, 0x86,
- 0x2A, 0xDC, 0xA5, 0xA3, 0x32, 0xDC, 0xAA, 0xA3, 0xAB, 0xBC, 0x6C, 0x35,
- 0xBA, 0x50, 0x96, 0x1D, 0x01, 0x86, 0x4A, 0xDC, 0xB5, 0xAA, 0x23, 0xBC,
- 0x32, 0xAC, 0xAA, 0x4B, 0xEE, 0xA4, 0xDA, 0x50, 0x96, 0x2D, 0x01, 0x86,
- 0xAA, 0xDA, 0xA5, 0xB5, 0x2B, 0xEC, 0xBB, 0x9A, 0x2A, 0xBA, 0xCC, 0xE4,
- 0xCC, 0x50, 0x96, 0x2D, 0x01, 0x86, 0x2A, 0xDC, 0xA6, 0x22, 0x24, 0xA4,
- 0xAD, 0x93, 0xB9, 0xA2, 0xB2, 0xA4, 0xAA, 0x50, 0x96, 0x1D, 0x01, 0x86,
- 0xA3, 0xFD, 0x36, 0x2A, 0x1A, 0xA3, 0x2D, 0x93, 0x59, 0xA5, 0xA2, 0xAE,
- 0x55, 0x50, 0x96, 0x2D, 0x01, 0x86, 0x2B, 0xEA, 0xA7, 0x22, 0x22, 0xA3,
- 0xB3, 0x9B, 0x29, 0x2A, 0x9A, 0x3C, 0xDA, 0x50, 0x96, 0x2E, 0x01, 0x86,
- 0xCB, 0xFA, 0xB6, 0x2A, 0x12, 0xA2, 0x7B, 0x92, 0x39, 0x4A, 0x9A, 0x6B,
- 0xD5, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXO LC Filter Switzerland 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_CH[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter China 200R+680R//100nF Coefficients (Voice Applications) */
-const VpProfileDataType AC_FXO_LC_CN[] =
-{
-  /* AC Profile */
- 0x7C, 0x00, 0xCA, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0xAD, 0xB3, 0x25,
- 0xA7, 0xCA, 0xBC, 0xB2, 0x3D, 0xBA, 0xA4, 0x9A, 0x01, 0x90, 0x08, 0x9F,
- 0x01, 0x8A, 0x5B, 0xC0, 0xAB, 0x10, 0x2B, 0x2C, 0xCC, 0xE8, 0xAB, 0xA0,
- 0xA4, 0xA9, 0xC2, 0xA3, 0x88, 0x2A, 0x20, 0xB3, 0x39, 0xA3, 0x21, 0x33,
- 0xFA, 0xB2, 0x24, 0xC2, 0x97, 0x82, 0x42, 0x31, 0x80, 0x2B, 0x60, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0xAB, 0xF2, 0xAD, 0xAA, 0x43, 0xA3, 0x2B, 0xB2,
- 0xBA, 0x7A, 0xAA, 0xCB, 0x74, 0xC0, 0x96, 0xD3, 0x41, 0x09, 0x12, 0x86,
- 0xA8, 0xF3, 0x3E, 0x9F, 0xB4, 0xA6, 0xE2, 0x6A, 0xAA, 0x63, 0xAB, 0xBA,
- 0x23, 0xB0, 0x96, 0xAA, 0x21, 0x86, 0xFB, 0xEB, 0x87, 0x3B, 0x3A, 0xB5,
- 0x73, 0xBA, 0xBB, 0x23, 0xD2, 0xB7, 0x2A, 0x50, 0x96, 0x3D, 0x01, 0x86,
- 0xBA, 0xEA, 0x87, 0xBA, 0x3A, 0x2F, 0x3A, 0xA2, 0x3B, 0xDB, 0xCB, 0x9F,
- 0x22, 0x60, 0x96, 0x1E, 0x01, 0x86, 0xBA, 0xEB, 0x87, 0x3B, 0x34, 0x27,
- 0xAA, 0xA4, 0xAA, 0xAA, 0xBA, 0x2D, 0xB3, 0x60, 0x96, 0x2E, 0x01, 0x86,
- 0x22, 0xE2, 0xAF, 0xAB, 0x32, 0xAE, 0x97, 0xAA, 0x5A, 0x2A, 0xAC, 0xAB,
- 0xC8, 0xF0, 0x96, 0x2E, 0x01, 0x86, 0x2B, 0xD3, 0xAE, 0xAA, 0x3C, 0xCF,
- 0xB4, 0xAA, 0x2A, 0x2B, 0xA2, 0x3B, 0x3B, 0xB0, 0x96, 0xAB, 0x41, 0x86,
- 0x23, 0xEA, 0x4F, 0xAA, 0x3C, 0x9F, 0xA5, 0xA2, 0x3A, 0xBB, 0xAF, 0x2B,
- 0xAC, 0xB0, 0x96, 0x5D, 0x21, 0x86, 0xAB, 0xF2, 0xAD, 0xAA, 0x43, 0xA3,
- 0x2B, 0xB2, 0xBA, 0x7A, 0xAA, 0xCB, 0x74, 0xC0, 0x96, 0xD3, 0x41, 0x86,
- 0xA8, 0xF2, 0xAD, 0xAC, 0xB9, 0xF7, 0xA8, 0xFB, 0xAA, 0xAD, 0xA2, 0xAA,
- 0x52, 0xC0, 0x96, 0xAB, 0xA1, 0x00
-};
-
-/* AC FXO LC Filter China 600R Normal ABF Coefficients (Modem Applications) */
-const VpProfileDataType AC_FXO_LC_CN2[] =
-{
-  /* AC Profile */
- 0xF6, 0x00, 0x42, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0xAA, 0x42, 0x2E,
- 0xAC, 0xA2, 0xAA, 0xC2, 0x2C, 0x42, 0x33, 0x9A, 0xCA, 0x87, 0x01, 0x6E,
- 0x01, 0x8A, 0xB3, 0xD0, 0x24, 0x20, 0xAC, 0xA9, 0x32, 0xB3, 0xA2, 0xD5,
- 0x23, 0xBC, 0x2B, 0x26, 0x88, 0xA4, 0x10, 0xBC, 0x58, 0x3A, 0xA0, 0xEA,
- 0xB9, 0xAC, 0x23, 0xAC, 0x6D, 0x82, 0x24, 0xA0, 0x80, 0x32, 0x20, 0x50,
- 0x01, 0x76, 0x20, 0x86, 0xBD, 0xEC, 0xD4, 0x2D, 0x43, 0xC2, 0x3A, 0xDB,
- 0x3E, 0x32, 0x6E, 0xA6, 0x87, 0x60, 0x96, 0xBD, 0x01, 0x09, 0x12, 0x86,
- 0xC4, 0xD1, 0xB3, 0x2B, 0x42, 0xB2, 0x3A, 0xA7, 0x3B, 0x3A, 0x5B, 0x97,
- 0x57, 0x61, 0x96, 0x22, 0xE0, 0x86, 0x34, 0xEB, 0x24, 0x22, 0x4D, 0xC2,
- 0x33, 0xA4, 0xBA, 0x29, 0xF4, 0x87, 0xB3, 0x61, 0x96, 0x49, 0xE0, 0x86,
- 0x16, 0xD1, 0xB3, 0xD3, 0x42, 0xE2, 0xD2, 0xAB, 0x2A, 0x3A, 0xC1, 0xCE,
- 0x30, 0x71, 0x96, 0x13, 0xE0, 0x86, 0x4F, 0xE9, 0xF4, 0x1B, 0x31, 0x42,
- 0x3A, 0x94, 0x1A, 0x32, 0xC2, 0xBB, 0x17, 0x61, 0x96, 0x32, 0xE0, 0x86,
- 0x12, 0x71, 0xA7, 0x15, 0x33, 0x22, 0x1B, 0x96, 0xB9, 0x23, 0xF2, 0x5A,
- 0x51, 0x73, 0x96, 0x1A, 0xE0, 0x86, 0x2D, 0xD4, 0x14, 0x22, 0x44, 0xC2,
- 0x1C, 0xB1, 0x2B, 0xC4, 0x5B, 0xAF, 0x36, 0x61, 0x96, 0x07, 0xE0, 0x86,
- 0x12, 0xF1, 0x8B, 0x1B, 0x32, 0x42, 0x23, 0xB1, 0xBA, 0x41, 0xC3, 0xAC,
- 0x14, 0x61, 0x96, 0x29, 0xE0, 0x86, 0x3C, 0xCC, 0x43, 0x1B, 0x52, 0x42,
- 0x4A, 0xC2, 0x2A, 0x2C, 0xAB, 0x3A, 0x3A, 0xB2, 0x96, 0x3A, 0x80, 0x86,
- 0x18, 0x51, 0xE4, 0xB3, 0xF1, 0x23, 0x13, 0xC3, 0xAA, 0x3A, 0xBB, 0x3E,
- 0x24, 0x61, 0x96, 0x24, 0xE0, 0x00
-};
-
-/* AC FXO LC Filter Germany 220R+820R//115nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_DE[] =
-{
-  /* AC Profile */
- 0x10, 0x00, 0xB6, 0xF2, 0x01, 0x4B, 0xCA, 0xFD, 0x98, 0xB2, 0x33, 0x2A,
- 0x97, 0xAA, 0x2C, 0x5A, 0xAC, 0xAA, 0x34, 0x9A, 0x01, 0x90, 0x08, 0x9F,
- 0x01, 0x8A, 0x3B, 0xC0, 0x22, 0x10, 0xDA, 0xA9, 0x2B, 0xA8, 0x32, 0x21,
- 0xA2, 0xA9, 0x52, 0xB3, 0x88, 0xE2, 0x50, 0x52, 0x3A, 0x2A, 0x22, 0x22,
- 0xA3, 0x32, 0xAB, 0x2D, 0xB4, 0x82, 0xC2, 0x31, 0x80, 0xAA, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0xBA, 0xEC, 0x97, 0x2B, 0x34, 0x27, 0x3A, 0xA2,
- 0xAA, 0xAA, 0xB2, 0xAC, 0x36, 0x60, 0x96, 0x2E, 0x01, 0x09, 0x12, 0x86,
- 0x23, 0xFA, 0x97, 0xAA, 0x3A, 0x97, 0xAA, 0xAA, 0xAA, 0xF4, 0xBB, 0x2C,
- 0x2B, 0x60, 0x96, 0x2E, 0x01, 0x86, 0x3A, 0xDA, 0x5F, 0xAA, 0x33, 0xAE,
- 0xC7, 0xAD, 0x4A, 0xFA, 0xAA, 0xCB, 0x42, 0xC0, 0x96, 0xB4, 0x41, 0x86,
- 0xBA, 0xDA, 0x3F, 0xAA, 0x3A, 0xAF, 0x98, 0x9A, 0x3A, 0xAA, 0xAA, 0x3B,
- 0x2B, 0xB0, 0x96, 0xBC, 0x31, 0x86, 0x97, 0xF2, 0xAD, 0xBA, 0x42, 0xA3,
- 0xCB, 0xB3, 0xCA, 0x2C, 0xA3, 0xAA, 0xD2, 0xB0, 0x96, 0x32, 0xA0, 0x86,
- 0x3A, 0x6B, 0xA2, 0x2A, 0x02, 0xA4, 0xA3, 0x8A, 0x18, 0x23, 0x8E, 0xB8,
- 0xBA, 0x80, 0x96, 0xA2, 0xA0, 0x86, 0xE8, 0xF2, 0x2F, 0x2B, 0x44, 0xA3,
- 0xC6, 0xCA, 0x2B, 0x2E, 0xBA, 0x2C, 0x33, 0x70, 0x96, 0x2E, 0x01, 0x86,
- 0xF8, 0x72, 0xBE, 0x3C, 0x43, 0xA3, 0x22, 0xC2, 0xAA, 0xA2, 0xB2, 0xAB,
- 0xA3, 0x70, 0x96, 0x2E, 0x01, 0x86, 0xCC, 0xE2, 0xBD, 0x3A, 0x43, 0x24,
- 0xBB, 0xBA, 0xBA, 0x4B, 0xA2, 0x2B, 0xA6, 0xB0, 0x96, 0x5D, 0x21, 0x86,
- 0xBA, 0xEA, 0x87, 0xAB, 0x3C, 0x75, 0x2A, 0xA2, 0xAA, 0x5A, 0xB2, 0xED,
- 0x52, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXO LC Filter Denmark 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_DK[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Spain 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_ES[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Finland 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_FI[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter France 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_FR[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter UK 370R+620R//310nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_GB[] =
-{
-  /* AC Profile */
- 0xE4, 0x00, 0x71, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0x23, 0xA2, 0xA4,
- 0x3E, 0x3C, 0x4B, 0xC2, 0xAB, 0x3C, 0xA3, 0x9A, 0x01, 0x90, 0x08, 0x2E,
- 0x01, 0x8A, 0xFA, 0xB0, 0xAA, 0x10, 0x2A, 0xAA, 0x3C, 0xA9, 0xA5, 0x2C,
- 0x2C, 0xA3, 0x33, 0xBC, 0x88, 0xAA, 0xB0, 0x2D, 0xB4, 0xCF, 0xAA, 0xB4,
- 0x21, 0xAE, 0xB9, 0xB2, 0xC2, 0x82, 0x3B, 0x21, 0x80, 0xAC, 0x20, 0x50,
- 0x01, 0x76, 0x34, 0x86, 0xBD, 0xFB, 0x37, 0x3E, 0x62, 0xA6, 0x2A, 0xD2,
- 0xAC, 0x5A, 0xC2, 0xAC, 0xBA, 0x60, 0x96, 0x2E, 0x01, 0x09, 0x12, 0x86,
- 0xD8, 0x72, 0xAE, 0x23, 0xB3, 0x2C, 0x3A, 0xD2, 0xAA, 0xAA, 0xAB, 0x2B,
- 0xAA, 0xB0, 0x96, 0x2B, 0x21, 0x86, 0x2A, 0xEA, 0x97, 0xAA, 0x5C, 0xAC,
- 0x22, 0xCA, 0xCC, 0x6A, 0xCB, 0x2D, 0xA2, 0x70, 0x96, 0x2E, 0x01, 0x86,
- 0xAA, 0xE7, 0xB7, 0x5A, 0x5C, 0xAB, 0xA3, 0xB2, 0x3C, 0xB2, 0xD4, 0xCD,
- 0x2C, 0x60, 0x96, 0x2E, 0x01, 0x86, 0x3A, 0xE2, 0x27, 0x22, 0x5C, 0xAB,
- 0x3A, 0xAA, 0xBB, 0x3B, 0xC3, 0x3D, 0x3B, 0x60, 0x96, 0x2E, 0x01, 0x86,
- 0xB2, 0xEB, 0xAF, 0x6A, 0x4A, 0xBB, 0xA3, 0xA4, 0xBA, 0xA6, 0xBA, 0x2C,
- 0x3C, 0xC0, 0x96, 0x3B, 0x41, 0x86, 0xA2, 0xE2, 0xCF, 0x32, 0x5A, 0xAB,
- 0x25, 0xAA, 0xBA, 0xB2, 0xBA, 0xAB, 0x22, 0xC0, 0x96, 0x5D, 0x21, 0x86,
- 0xD8, 0x7B, 0x8F, 0xAC, 0x7B, 0xAC, 0x6A, 0xBD, 0x2C, 0xAA, 0xC2, 0x5D,
- 0x3B, 0x70, 0x96, 0x2E, 0x01, 0x86, 0xAA, 0xED, 0xAD, 0xB9, 0xFB, 0x3D,
- 0xD3, 0xB2, 0xAA, 0x3D, 0xBD, 0x2C, 0xBD, 0xC0, 0x96, 0xAD, 0x21, 0x86,
- 0xA8, 0xFA, 0x87, 0x98, 0xA4, 0xCB, 0xB5, 0x5C, 0xAE, 0xA2, 0xC2, 0x3C,
- 0x4A, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXO LC Filter Greece 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_GR[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Hong Kong SAR 600R ABF Coefficients - 4 KHz Return Loss */
-const VpProfileDataType AC_FXO_LC_HK[] =
-{
-  /* AC Profile */
- 0xD0, 0x00, 0x7E, 0xF2, 0x01, 0x4B, 0xCA, 0x05, 0x98, 0xCD, 0x2C, 0x23,
- 0xA5, 0x3B, 0xAD, 0x3A, 0xAC, 0xEA, 0x24, 0x9A, 0x01, 0x90, 0x08, 0x2E,
- 0x01, 0x8A, 0xB3, 0xD0, 0x56, 0x20, 0xA2, 0xA9, 0x25, 0xA3, 0xAE, 0x35,
- 0x22, 0x6C, 0xA7, 0xA5, 0x88, 0xB4, 0x10, 0x42, 0x58, 0xA2, 0xB0, 0xCA,
- 0xD9, 0xA2, 0xA2, 0x23, 0xED, 0x82, 0xB3, 0xA0, 0x80, 0x98, 0x10, 0x50,
- 0x01, 0x76, 0x20, 0x86, 0x23, 0xFB, 0xC7, 0x24, 0x33, 0x23, 0xB2, 0x72,
- 0xAD, 0xB8, 0x7B, 0xA6, 0xBA, 0x60, 0x96, 0xCC, 0x01, 0x09, 0x12, 0x86,
- 0xA2, 0x6C, 0x3C, 0x23, 0x36, 0xA8, 0x10, 0x84, 0x08, 0x2D, 0x8C, 0xCA,
- 0xBD, 0xF0, 0x96, 0x2E, 0x01, 0x86, 0xAA, 0x22, 0x3D, 0x33, 0x5D, 0xA8,
- 0x00, 0x80, 0x08, 0xDB, 0x1D, 0x10, 0x52, 0x30, 0x96, 0x5B, 0x87, 0x86,
- 0xB3, 0xCA, 0xA8, 0x20, 0x8B, 0x28, 0xCC, 0xAA, 0x3D, 0xB2, 0x3A, 0xA4,
- 0xA3, 0xE0, 0x96, 0xBC, 0x01, 0x86, 0xC4, 0xD1, 0xB3, 0x2B, 0x42, 0xB2,
- 0x3A, 0xA7, 0x3B, 0x3A, 0x5B, 0x97, 0x57, 0x61, 0x96, 0x22, 0xE0, 0x86,
- 0x34, 0xEB, 0x24, 0x22, 0x4D, 0xC2, 0x33, 0xA4, 0xBA, 0x29, 0xF4, 0x87,
- 0xB3, 0x61, 0x96, 0x49, 0xE0, 0x86, 0x16, 0xD1, 0xB3, 0xD3, 0x42, 0xE2,
- 0xD2, 0xAB, 0x2A, 0x3A, 0xC1, 0xCE, 0x30, 0x71, 0x96, 0x13, 0xE0, 0x86,
- 0x4F, 0xE9, 0xF4, 0x1B, 0x31, 0x42, 0x3A, 0x94, 0x1A, 0x32, 0xC2, 0xBB,
- 0x17, 0x61, 0x96, 0x32, 0xE0, 0x86, 0x3C, 0xCC, 0x43, 0x1B, 0x52, 0x42,
- 0x4A, 0xC2, 0x2A, 0x2C, 0xAB, 0x3A, 0x3A, 0xB2, 0x96, 0x3A, 0x80, 0x86,
- 0x18, 0x51, 0xE4, 0xB3, 0xF1, 0x23, 0x13, 0xC3, 0xAA, 0x3A, 0xBB, 0x3E,
- 0x24, 0x61, 0x96, 0x24, 0xE0, 0x00
-};
-
-/* AC FXO LC Filter Hungary 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_HU[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Ireland 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_IE[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Israel 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_IL[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Iceland 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_IS[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Italy 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_IT[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Japan 600R Lowest ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_JP[] =
-{
-  /* AC Profile */
- 0xF6, 0x00, 0x42, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0xAA, 0x42, 0x2E,
- 0xAC, 0xA2, 0xAA, 0xC2, 0x2C, 0x42, 0x33, 0x9A, 0xCA, 0x87, 0x01, 0x6E,
- 0x01, 0x8A, 0xB3, 0xD0, 0x24, 0x20, 0xAC, 0xA9, 0x32, 0xB3, 0xA2, 0xD5,
- 0x23, 0xBC, 0x2B, 0x26, 0x88, 0xA4, 0x10, 0xBC, 0x58, 0x3A, 0xA0, 0xEA,
- 0xB9, 0xAC, 0x23, 0xAC, 0x6D, 0x82, 0x24, 0xA0, 0x80, 0x32, 0x20, 0x50,
- 0x01, 0x76, 0x60, 0x86, 0xBD, 0xEC, 0xD4, 0x2D, 0x43, 0xC2, 0x3A, 0xDB,
- 0x3E, 0x32, 0x6E, 0xA6, 0x87, 0x60, 0x96, 0xBD, 0x01, 0x09, 0x12, 0x86,
- 0xC4, 0xD1, 0xB3, 0x2B, 0x42, 0xB2, 0x3A, 0xA7, 0x3B, 0x3A, 0x5B, 0x97,
- 0x57, 0x61, 0x96, 0x22, 0xE0, 0x86, 0x34, 0xEB, 0x24, 0x22, 0x4D, 0xC2,
- 0x33, 0xA4, 0xBA, 0x29, 0xF4, 0x87, 0xB3, 0x61, 0x96, 0x49, 0xE0, 0x86,
- 0x16, 0xD1, 0xB3, 0xD3, 0x42, 0xE2, 0xD2, 0xAB, 0x2A, 0x3A, 0xC1, 0xCE,
- 0x30, 0x71, 0x96, 0x13, 0xE0, 0x86, 0x4F, 0xE9, 0xF4, 0x1B, 0x31, 0x42,
- 0x3A, 0x94, 0x1A, 0x32, 0xC2, 0xBB, 0x17, 0x61, 0x96, 0x32, 0xE0, 0x86,
- 0x12, 0x71, 0xA7, 0x15, 0x33, 0x22, 0x1B, 0x96, 0xB9, 0x23, 0xF2, 0x5A,
- 0x51, 0x73, 0x96, 0x1A, 0xE0, 0x86, 0x2D, 0xD4, 0x14, 0x22, 0x44, 0xC2,
- 0x1C, 0xB1, 0x2B, 0xC4, 0x5B, 0xAF, 0x36, 0x61, 0x96, 0x07, 0xE0, 0x86,
- 0x12, 0xF1, 0x8B, 0x1B, 0x32, 0x42, 0x23, 0xB1, 0xBA, 0x41, 0xC3, 0xAC,
- 0x14, 0x61, 0x96, 0x29, 0xE0, 0x86, 0x3C, 0xCC, 0x43, 0x1B, 0x52, 0x42,
- 0x4A, 0xC2, 0x2A, 0x2C, 0xAB, 0x3A, 0x3A, 0xB2, 0x96, 0x3A, 0x80, 0x86,
- 0x18, 0x51, 0xE4, 0xB3, 0xF1, 0x23, 0x13, 0xC3, 0xAA, 0x3A, 0xBB, 0x3E,
- 0x24, 0x61, 0x96, 0x24, 0xE0, 0x00
-};
-
-/* AC FXO LC Filter Malaysia 600R Low ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_MY[] =
-{
-  /* AC Profile */
- 0xF6, 0x00, 0x42, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0xAA, 0x42, 0x2E,
- 0xAC, 0xA2, 0xAA, 0xC2, 0x2C, 0x42, 0x33, 0x9A, 0xCA, 0x87, 0x01, 0x6E,
- 0x01, 0x8A, 0xB3, 0xD0, 0x24, 0x20, 0xAC, 0xA9, 0x32, 0xB3, 0xA2, 0xD5,
- 0x23, 0xBC, 0x2B, 0x26, 0x88, 0xA4, 0x10, 0xBC, 0x58, 0x3A, 0xA0, 0xEA,
- 0xB9, 0xAC, 0x23, 0xAC, 0x6D, 0x82, 0x24, 0xA0, 0x80, 0x32, 0x20, 0x50,
- 0x01, 0x76, 0x40, 0x86, 0xBD, 0xEC, 0xD4, 0x2D, 0x43, 0xC2, 0x3A, 0xDB,
- 0x3E, 0x32, 0x6E, 0xA6, 0x87, 0x60, 0x96, 0xBD, 0x01, 0x09, 0x12, 0x86,
- 0xC4, 0xD1, 0xB3, 0x2B, 0x42, 0xB2, 0x3A, 0xA7, 0x3B, 0x3A, 0x5B, 0x97,
- 0x57, 0x61, 0x96, 0x22, 0xE0, 0x86, 0x34, 0xEB, 0x24, 0x22, 0x4D, 0xC2,
- 0x33, 0xA4, 0xBA, 0x29, 0xF4, 0x87, 0xB3, 0x61, 0x96, 0x49, 0xE0, 0x86,
- 0x16, 0xD1, 0xB3, 0xD3, 0x42, 0xE2, 0xD2, 0xAB, 0x2A, 0x3A, 0xC1, 0xCE,
- 0x30, 0x71, 0x96, 0x13, 0xE0, 0x86, 0x4F, 0xE9, 0xF4, 0x1B, 0x31, 0x42,
- 0x3A, 0x94, 0x1A, 0x32, 0xC2, 0xBB, 0x17, 0x61, 0x96, 0x32, 0xE0, 0x86,
- 0x12, 0x71, 0xA7, 0x15, 0x33, 0x22, 0x1B, 0x96, 0xB9, 0x23, 0xF2, 0x5A,
- 0x51, 0x73, 0x96, 0x1A, 0xE0, 0x86, 0x2D, 0xD4, 0x14, 0x22, 0x44, 0xC2,
- 0x1C, 0xB1, 0x2B, 0xC4, 0x5B, 0xAF, 0x36, 0x61, 0x96, 0x07, 0xE0, 0x86,
- 0x12, 0xF1, 0x8B, 0x1B, 0x32, 0x42, 0x23, 0xB1, 0xBA, 0x41, 0xC3, 0xAC,
- 0x14, 0x61, 0x96, 0x29, 0xE0, 0x86, 0x3C, 0xCC, 0x43, 0x1B, 0x52, 0x42,
- 0x4A, 0xC2, 0x2A, 0x2C, 0xAB, 0x3A, 0x3A, 0xB2, 0x96, 0x3A, 0x80, 0x86,
- 0x18, 0x51, 0xE4, 0xB3, 0xF1, 0x23, 0x13, 0xC3, 0xAA, 0x3A, 0xBB, 0x3E,
- 0x24, 0x61, 0x96, 0x24, 0xE0, 0x00
-};
-
-/* AC FXO LC Filter Netherlands 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_NL[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Norway 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_NO[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter New Zealand 370R+620R//310nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_NZ[] =
-{
-  /* AC Profile */
- 0x11, 0x00, 0xF1, 0xF2, 0x01, 0x4B, 0xCA, 0x05, 0x98, 0x32, 0x2B, 0x32,
- 0xA5, 0x2D, 0xA4, 0xFA, 0x27, 0xB4, 0x5D, 0x9A, 0xD3, 0x26, 0x26, 0x2D,
- 0x01, 0x8A, 0xD3, 0xC0, 0x97, 0x30, 0x2C, 0xA3, 0x32, 0xA8, 0x4A, 0xA2,
- 0xD3, 0xAC, 0xCB, 0x4E, 0x88, 0xFA, 0x10, 0x2B, 0xA8, 0xAA, 0xA0, 0x32,
- 0x4B, 0x3A, 0xAC, 0xAA, 0x33, 0x82, 0x23, 0xA0, 0x80, 0xB8, 0xF0, 0x50,
- 0x01, 0x76, 0x34, 0x86, 0xB5, 0xF2, 0xA6, 0xB2, 0x64, 0x37, 0xBB, 0xDB,
- 0xAC, 0x2B, 0xCC, 0xAC, 0xFA, 0x70, 0x96, 0x2E, 0x01, 0x09, 0x12, 0x86,
- 0xD8, 0x72, 0xAE, 0x23, 0xB3, 0x2C, 0x3A, 0xD2, 0xAA, 0xAA, 0xAB, 0x2B,
- 0xAA, 0xB0, 0x96, 0x2B, 0x21, 0x86, 0x2A, 0xEA, 0x97, 0xAA, 0x5C, 0xAC,
- 0x22, 0xCA, 0xCC, 0x6A, 0xCB, 0x2D, 0xA2, 0x70, 0x96, 0x2E, 0x01, 0x86,
- 0xAA, 0xE7, 0xB7, 0x5A, 0x5C, 0xAB, 0xA3, 0xB2, 0x3C, 0xB2, 0xD4, 0xCD,
- 0x2C, 0x60, 0x96, 0x2E, 0x01, 0x86, 0x3A, 0xE2, 0x27, 0x22, 0x5C, 0xAB,
- 0x3A, 0xAA, 0xBB, 0x3B, 0xC3, 0x3D, 0x3B, 0x60, 0x96, 0x2E, 0x01, 0x86,
- 0xB2, 0xEB, 0xAF, 0x6A, 0x4A, 0xBB, 0xA3, 0xA4, 0xBA, 0xA6, 0xBA, 0x2C,
- 0x3C, 0xC0, 0x96, 0x3B, 0x41, 0x86, 0xA2, 0xE2, 0xCF, 0x32, 0x5A, 0xAB,
- 0x25, 0xAA, 0xBA, 0xB2, 0xBA, 0xAB, 0x22, 0xC0, 0x96, 0x5D, 0x21, 0x86,
- 0xD8, 0x7B, 0x8F, 0xAC, 0x7B, 0xAC, 0x6A, 0xBD, 0x2C, 0xAA, 0xC2, 0x5D,
- 0x3B, 0x70, 0x96, 0x2E, 0x01, 0x86, 0xAA, 0xED, 0xAD, 0xB9, 0xFB, 0x3D,
- 0xD3, 0xB2, 0xAA, 0x3D, 0xBD, 0x2C, 0xBD, 0xC0, 0x96, 0xAD, 0x21, 0x86,
- 0xA8, 0xFA, 0x87, 0x98, 0xA4, 0xCB, 0xB5, 0x5C, 0xAE, 0xA2, 0xC2, 0x3C,
- 0x4A, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/* AC FXO LC Filter Portugal 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_PT[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Sweden 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_SE[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Turkey 270R+750R//150nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_TK[] =
-{
-  /* AC Profile */
- 0x3B, 0x00, 0xC2, 0xF2, 0x01, 0x4B, 0xCA, 0x00, 0x98, 0x2B, 0x45, 0x42,
- 0xBF, 0xAB, 0x3D, 0x42, 0xAD, 0xBA, 0x25, 0x9A, 0xDC, 0x87, 0x01, 0x9F,
- 0x01, 0x8A, 0xF3, 0xD0, 0xA2, 0x10, 0x2C, 0x2A, 0xBB, 0xA8, 0xA9, 0xF1,
- 0xBB, 0xBA, 0xCA, 0xA4, 0x88, 0x3B, 0x30, 0x2A, 0xC9, 0xAC, 0x41, 0xBA,
- 0x2C, 0xBA, 0xBD, 0x32, 0xC4, 0x82, 0x22, 0x31, 0x80, 0x4C, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0x44, 0xC2, 0xE2, 0xD6, 0xA2, 0x22, 0xB2, 0x5B,
- 0x39, 0x3A, 0x1C, 0xBA, 0xAC, 0x50, 0x96, 0x9F, 0x01, 0x09, 0x12, 0x86,
- 0xBC, 0xB1, 0xB1, 0x3F, 0x93, 0x12, 0x2B, 0x32, 0xC8, 0x32, 0x14, 0x1A,
- 0x3C, 0x53, 0x96, 0x09, 0x60, 0x86, 0x12, 0xB2, 0x31, 0x4A, 0x82, 0x51,
- 0x2B, 0x22, 0x28, 0x4C, 0x0B, 0x39, 0x4B, 0x53, 0x96, 0x09, 0x60, 0x86,
- 0x43, 0xA1, 0xC0, 0xB2, 0x84, 0x11, 0x1B, 0x1F, 0x08, 0xC1, 0x03, 0xB8,
- 0x20, 0x70, 0x96, 0xA9, 0xE0, 0x86, 0x35, 0xB6, 0xB2, 0x22, 0xC3, 0x17,
- 0x42, 0xBC, 0x2A, 0x23, 0xA2, 0x0E, 0x23, 0xB4, 0x96, 0x39, 0x80, 0x86,
- 0x61, 0xBC, 0x21, 0x5B, 0x83, 0x21, 0x3A, 0x12, 0x28, 0xD7, 0x0B, 0x29,
- 0x32, 0x63, 0x96, 0xA9, 0xE0, 0x86, 0xBC, 0xB1, 0xB2, 0xB3, 0xBB, 0x63,
- 0x41, 0xD6, 0x1B, 0x42, 0xA1, 0x97, 0x53, 0xBB, 0x96, 0x49, 0x80, 0x86,
- 0x35, 0xBC, 0xB2, 0x52, 0xBC, 0x73, 0x2B, 0xC1, 0xBA, 0x3A, 0x94, 0x87,
- 0x32, 0xB3, 0x96, 0x39, 0x80, 0x86, 0x18, 0x22, 0xB2, 0x13, 0xB2, 0x43,
- 0x53, 0xC1, 0x2B, 0x41, 0xA3, 0xAE, 0x12, 0xBD, 0x96, 0x41, 0xA0, 0x86,
- 0xCE, 0xB1, 0xB2, 0x17, 0xB1, 0xB3, 0xC2, 0xD1, 0xBA, 0x41, 0xA1, 0x2D,
- 0x61, 0xB2, 0x96, 0xC2, 0xA0, 0x00
-};
-
-/* AC FXO LC Filter Taiwan 600R Low ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_TW[] =
-{
-  /* AC Profile */
- 0xF6, 0x00, 0x42, 0xF2, 0x01, 0x4B, 0xCA, 0xFF, 0x98, 0xAA, 0x42, 0x2E,
- 0xAC, 0xA2, 0xAA, 0xC2, 0x2C, 0x42, 0x33, 0x9A, 0xCA, 0x87, 0x01, 0x6E,
- 0x01, 0x8A, 0xB3, 0xD0, 0x24, 0x20, 0xAC, 0xA9, 0x32, 0xB3, 0xA2, 0xD5,
- 0x23, 0xBC, 0x2B, 0x26, 0x88, 0xA4, 0x10, 0xBC, 0x58, 0x3A, 0xA0, 0xEA,
- 0xB9, 0xAC, 0x23, 0xAC, 0x6D, 0x82, 0x24, 0xA0, 0x80, 0x32, 0x20, 0x50,
- 0x01, 0x76, 0x40, 0x86, 0xBD, 0xEC, 0xD4, 0x2D, 0x43, 0xC2, 0x3A, 0xDB,
- 0x3E, 0x32, 0x6E, 0xA6, 0x87, 0x60, 0x96, 0xBD, 0x01, 0x09, 0x12, 0x86,
- 0xC4, 0xD1, 0xB3, 0x2B, 0x42, 0xB2, 0x3A, 0xA7, 0x3B, 0x3A, 0x5B, 0x97,
- 0x57, 0x61, 0x96, 0x22, 0xE0, 0x86, 0x34, 0xEB, 0x24, 0x22, 0x4D, 0xC2,
- 0x33, 0xA4, 0xBA, 0x29, 0xF4, 0x87, 0xB3, 0x61, 0x96, 0x49, 0xE0, 0x86,
- 0x16, 0xD1, 0xB3, 0xD3, 0x42, 0xE2, 0xD2, 0xAB, 0x2A, 0x3A, 0xC1, 0xCE,
- 0x30, 0x71, 0x96, 0x13, 0xE0, 0x86, 0x4F, 0xE9, 0xF4, 0x1B, 0x31, 0x42,
- 0x3A, 0x94, 0x1A, 0x32, 0xC2, 0xBB, 0x17, 0x61, 0x96, 0x32, 0xE0, 0x86,
- 0x12, 0x71, 0xA7, 0x15, 0x33, 0x22, 0x1B, 0x96, 0xB9, 0x23, 0xF2, 0x5A,
- 0x51, 0x73, 0x96, 0x1A, 0xE0, 0x86, 0x2D, 0xD4, 0x14, 0x22, 0x44, 0xC2,
- 0x1C, 0xB1, 0x2B, 0xC4, 0x5B, 0xAF, 0x36, 0x61, 0x96, 0x07, 0xE0, 0x86,
- 0x12, 0xF1, 0x8B, 0x1B, 0x32, 0x42, 0x23, 0xB1, 0xBA, 0x41, 0xC3, 0xAC,
- 0x14, 0x61, 0x96, 0x29, 0xE0, 0x86, 0x3C, 0xCC, 0x43, 0x1B, 0x52, 0x42,
- 0x4A, 0xC2, 0x2A, 0x2C, 0xAB, 0x3A, 0x3A, 0xB2, 0x96, 0x3A, 0x80, 0x86,
- 0x18, 0x51, 0xE4, 0xB3, 0xF1, 0x23, 0x13, 0xC3, 0xAA, 0x3A, 0xBB, 0x3E,
- 0x24, 0x61, 0x96, 0x24, 0xE0, 0x00
-};
-
-/* AC FXO LC Filter South Africa 220R+820R//115nF Normal ABF Coefficients */
-const VpProfileDataType AC_FXO_LC_ZA[] =
-{
-  /* AC Profile */
- 0x10, 0x00, 0xB6, 0xF2, 0x01, 0x4B, 0xCA, 0xFD, 0x98, 0xB2, 0x33, 0x2A,
- 0x97, 0xAA, 0x2C, 0x5A, 0xAC, 0xAA, 0x34, 0x9A, 0x01, 0x90, 0x08, 0x9F,
- 0x01, 0x8A, 0x3B, 0xC0, 0x22, 0x10, 0xDA, 0xA9, 0x2B, 0xA8, 0x32, 0x21,
- 0xA2, 0xA9, 0x52, 0xB3, 0x88, 0xE2, 0x50, 0x52, 0x3A, 0x2A, 0x22, 0x22,
- 0xA3, 0x32, 0xAB, 0x2D, 0xB4, 0x82, 0xC2, 0x31, 0x80, 0xAA, 0x50, 0x50,
- 0x01, 0x76, 0x30, 0x86, 0xBA, 0xEC, 0x97, 0x2B, 0x34, 0x27, 0x3A, 0xA2,
- 0xAA, 0xAA, 0xB2, 0xAC, 0x36, 0x60, 0x96, 0x2E, 0x01, 0x09, 0x12, 0x86,
- 0x23, 0xFA, 0x97, 0xAA, 0x3A, 0x97, 0xAA, 0xAA, 0xAA, 0xF4, 0xBB, 0x2C,
- 0x2B, 0x60, 0x96, 0x2E, 0x01, 0x86, 0x3A, 0xDA, 0x5F, 0xAA, 0x33, 0xAE,
- 0xC7, 0xAD, 0x4A, 0xFA, 0xAA, 0xCB, 0x42, 0xC0, 0x96, 0xB4, 0x41, 0x86,
- 0xBA, 0xDA, 0x3F, 0xAA, 0x3A, 0xAF, 0x98, 0x9A, 0x3A, 0xAA, 0xAA, 0x3B,
- 0x2B, 0xB0, 0x96, 0xBC, 0x31, 0x86, 0x97, 0xF2, 0xAD, 0xBA, 0x42, 0xA3,
- 0xCB, 0xB3, 0xCA, 0x2C, 0xA3, 0xAA, 0xD2, 0xB0, 0x96, 0x32, 0xA0, 0x86,
- 0x3A, 0x6B, 0xA2, 0x2A, 0x02, 0xA4, 0xA3, 0x8A, 0x18, 0x23, 0x8E, 0xB8,
- 0xBA, 0x80, 0x96, 0xA2, 0xA0, 0x86, 0xE8, 0xF2, 0x2F, 0x2B, 0x44, 0xA3,
- 0xC6, 0xCA, 0x2B, 0x2E, 0xBA, 0x2C, 0x33, 0x70, 0x96, 0x2E, 0x01, 0x86,
- 0xF8, 0x72, 0xBE, 0x3C, 0x43, 0xA3, 0x22, 0xC2, 0xAA, 0xA2, 0xB2, 0xAB,
- 0xA3, 0x70, 0x96, 0x2E, 0x01, 0x86, 0xCC, 0xE2, 0xBD, 0x3A, 0x43, 0x24,
- 0xBB, 0xBA, 0xBA, 0x4B, 0xA2, 0x2B, 0xA6, 0xB0, 0x96, 0x5D, 0x21, 0x86,
- 0xBA, 0xEA, 0x87, 0xAB, 0x3C, 0x75, 0x2A, 0xA2, 0xAA, 0x5A, 0xB2, 0xED,
- 0x52, 0x60, 0x96, 0x2E, 0x01, 0x00
-};
-
-/************** DC_Parameters **************/
-
-/* DC FXS Default -- Use for for all countries unless country file exists */
-const VpProfileDataType DC_FXS_VE890_BB100V_DEF[] =
-{
- /* DC Profile */
- 0x00, 0x01, 0x00, 0x09, 0x02, 0x03, /* Header Information */
- 0xC6, 0x13, 0xC4, /* Feed Parameters */
- 0x18, 0x84, /* Loop Supervision Parameters */
- 0x04, /* Min Floor Voltage 25V */
- 0x00  /* Hook Threshold Hysteresis */
-};
-
-/************** Ring_Parameters **************/
-
-/* Default Ringing 25 Hz 50 Vrms - Use for all countries unless country file exists */
-const VpProfileDataType RING_25HZ_VE890_BB100V_DEF[] =
-{
-  /* Sine, 25 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x44,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* Austria Ringing 50 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_AT[] =
-{
-  /* Sine, 50 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x89,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* Canada Ringing 20 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_CA[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x37,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* Finland Ringing 50 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_FI[] =
-{
-  /* Sine, 50 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x89,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* France Ringing 50 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_FR[] =
-{
-  /* Sine, 50 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x89,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* Hong Kong SAR Ringing 20 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_HK[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x37,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* Japan Ringing 16 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_JP[] =
-{
-  /* Sine, 16 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x2C,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* S. Korea Ringing 20 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_KR[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x37,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* Singapore Ringing 24 Hz 50 Vrms  */
-const VpProfileDataType RING_VE890_BB100V_SG[] =
-{
-  /* Sine, 24 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x42,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* Taiwan Ringing 20 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_TW[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x37,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/* USA Ringing 20 Hz 50 Vrms */
-const VpProfileDataType RING_VE890_BB100V_US[] =
-{
-  /* Sine, 20 Hz, 1.41 CF, 70.00 Vpk, 0.00 Bias */
-  /* Ringing Profile */
- 0x00, 0x04, 0x00, 0x12, 0x01, 0x0C, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x37,
- 0x39, 0xCE, 0x00, 0x00, 0x00, 0x00,
- 0xB0, 0x02,  /* Ring Trip Threshold (24mA) and Current Limit (54mA)*/
- 0x0D, /* Max Supply Ringing Voltage 70V */
- 0x02  /* Ringing Tracking Mode */
-};
-
-/************** Call_Progress_Tones **************/
-
-/************** Cadence_Definitions **************/
-
-/************** Caller_ID **************/
-
-/************** FXO_Dialing_Profile **************/
-
-/* Default FXO/Dialing */
-const VpProfileDataType FXO_DIALING_DEF[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x8F, 0x1B, /* Device Ring Period Max (71mS), Min (13mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x47, /* Ring Period Max (71mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* ETSI ES203 021 FXO/Dialing */
-const VpProfileDataType FXO_DIALING_ETSI[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x24, /* Device Ring Period Max (45mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Argentina FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_AR[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0x8C, /* Interdigit Min (700mS) */
- 0x7E, 0x24, /* Device Ring Period Max (63mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x3E, /* Ring Period Max (62mS) */
- 0x2A, 0x30, 0x21, 0x83  /* DTMF High/Low Freq Level (-6.5dBm0/-8.5dBm0) */
-};
-
-/* Austria FXO/Dialing */
-const VpProfileDataType FXO_DIALING_AT[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Australia FXO/Dialing */
-const VpProfileDataType FXO_DIALING_AU[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x86, 0x27, /* Device Ring Period Max (67mS), Min (19mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x42, /* Ring Period Max (66mS) */
- 0x1C, 0x32, 0x16, 0x65  /* DTMF High/Low Freq Level (-10.0dBm0/-12.0dBm0) */
-};
-
-/* Belgium FXO/Dialing */
-const VpProfileDataType FXO_DIALING_BE[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x24, /* Device Ring Period Max (45mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Bulgaria FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_BG[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Brazil FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_BR[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x76, 0x24, /* Device Ring Period Max (59mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x3A, /* Ring Period Max (58mS) */
- 0x23, 0x7F, 0x1C, 0x32  /* DTMF High/Low Freq Level (-8.0dBm0/-10.0dBm0) */
-};
-
-/* Canada FXO/Dialing */
-const VpProfileDataType FXO_DIALING_CA[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x86, 0x1B, /* Device Ring Period Max (67mS), Min (13mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x42, /* Ring Period Max (66mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Switzerland FXO/Dialing */
-const VpProfileDataType FXO_DIALING_CH[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Chile FXO/Dialing */
-const VpProfileDataType FXO_DIALING_CL[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x28, /* Flash Hook Timing (200mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* China FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_CN[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x5A, /* Flash Hook Timing (450mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x86, 0x1C, /* Device Ring Period Max (67mS), Min (14mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x42, /* Ring Period Max (66mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Czech Republic FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_CZ[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Germany FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_DE[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x24, /* Device Ring Period Max (45mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Denmark FXO/Dialing */
-const VpProfileDataType FXO_DIALING_DK[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Ecuador FXO/Dialing */
-const VpProfileDataType FXO_DIALING_EC[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Spain FXO/Dialing */
-const VpProfileDataType FXO_DIALING_ES[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x65, 0x41, /* Device Ring Period Max (50mS), Min (32mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x32, /* Ring Period Max (50mS) */
- 0x27, 0xD4, 0x1F, 0xA3  /* DTMF High/Low Freq Level (-7.0dBm0/-9.0dBm0) */
-};
-
-/* Finland FXO/Dialing */
-const VpProfileDataType FXO_DIALING_FI[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* France FXO/Dialing */
-const VpProfileDataType FXO_DIALING_FR[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x24, /* Device Ring Period Max (45mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* UK FXO/Dialing */
-const VpProfileDataType FXO_DIALING_GB[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x0F, /* Flash Hook Timing (75mS) */
- 0x0D, 0x06, /* Pulse Break (67mS), Pulse Make (33ms) */
- 0x00, 0x78, /* Interdigit Min (600mS) */
- 0x76, 0x24, /* Device Ring Period Max (59mS), Min (18mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x3A, /* Ring Period Max (58mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Greece FXO/Dialing */
-const VpProfileDataType FXO_DIALING_GR[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Hong Kong SAR FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_HK[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x64, /* Flash Hook Timing (500mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x70, 0x41, /* Device Ring Period Max (56mS), Min (32mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x37, /* Ring Period Max (55mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Hungary FXO/Dialing */
-const VpProfileDataType FXO_DIALING_HU[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Indonesia FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_ID[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Ireland FXO/Dialing */
-const VpProfileDataType FXO_DIALING_IE[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x1E, /* Flash Hook Timing (150mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Israel FXO/Dialing */
-const VpProfileDataType FXO_DIALING_IL[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x57, 0x23, /* Device Ring Period Max (43mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2B, /* Ring Period Max (43mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* India FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_IN[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x28, /* Flash Hook Timing (200mS) */
- 0x0D, 0x06, /* Pulse Break (67mS), Pulse Make (33ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x7E, 0x20, /* Device Ring Period Max (63mS), Min (16mS) */
- 0x02, /* Ring Detect Min (20Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x3E, /* Ring Period Max (62mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Iceland FXO/Dialing */
-const VpProfileDataType FXO_DIALING_IS[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Italy FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_IT[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x10, /* Flash Hook Timing (80mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0x64, /* Interdigit Min (500mS) */
- 0x7E, 0x1C, /* Device Ring Period Max (63mS), Min (14mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x3E, /* Ring Period Max (62mS) */
- 0x23, 0x7F, 0x1C, 0x32  /* DTMF High/Low Freq Level (-8.0dBm0/-10.0dBm0) */
-};
-
-/* Japan FXO/Dialing */
-const VpProfileDataType FXO_DIALING_JP[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x9A, 0x24, /* Device Ring Period Max (77mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x4C, /* Ring Period Max (76mS) */
- 0x23, 0x7F, 0x1C, 0x32  /* DTMF High/Low Freq Level (-8.0dBm0/-10.0dBm0) */
-};
-
-/* S. Korea FXO/Dialing */
-const VpProfileDataType FXO_DIALING_KR[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x86, 0x1C, /* Device Ring Period Max (67mS), Min (14mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x42, /* Ring Period Max (66mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Mexico FXO/Dialing */
-const VpProfileDataType FXO_DIALING_MX[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Malaysia FXO/Dialing */
-const VpProfileDataType FXO_DIALING_MY[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Netherlands FXO/Dialing */
-const VpProfileDataType FXO_DIALING_NL[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x16, /* Flash Hook Timing (110mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Norway FXO/Dialing */
-const VpProfileDataType FXO_DIALING_NO[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* New Zealand FXO/Dialing  */
-const VpProfileDataType FXO_DIALING_NZ[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x82, /* Flash Hook Timing (650mS) */
- 0x0D, 0x06, /* Pulse Break (67mS), Pulse Make (33ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x86, 0x24, /* Device Ring Period Max (67mS), Min (18mS) */
- 0x01, /* Ring Detect Min (16Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x42, /* Ring Period Max (66mS) */
- 0x1F, 0xA3, 0x1C, 0x32  /* DTMF High/Low Freq Level (-9.0dBm0/-10.0dBm0) */
-};
-
-/* Poland FXO/Dialing */
-const VpProfileDataType FXO_DIALING_PL[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Portugal FXO/Dialing */
-const VpProfileDataType FXO_DIALING_PT[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Russia FXO/Dialing */
-const VpProfileDataType FXO_DIALING_RU[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x28, /* Flash Hook Timing (200mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xB4, /* Interdigit Min (900mS) */
- 0x7E, 0x27, /* Device Ring Period Max (63mS), Min (19mS) */
- 0x01, /* Ring Detect Min (16Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x3E, /* Ring Period Max (62mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Sweden FXO/Dialing */
-const VpProfileDataType FXO_DIALING_SE[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Singapore FXO/Dialing */
-const VpProfileDataType FXO_DIALING_SG[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x65, 0x24, /* Device Ring Period Max (50mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x32, /* Ring Period Max (50mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Thailand FXO/Dialing */
-const VpProfileDataType FXO_DIALING_TH[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Turkey FXO/Dialing */
-const VpProfileDataType FXO_DIALING_TK[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x14, /* Flash Hook Timing (100mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x5B, 0x23, /* Device Ring Period Max (45mS), Min (17mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x2D, /* Ring Period Max (45mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* Taiwan FXO/Dialing */
-const VpProfileDataType FXO_DIALING_TW[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x64, /* Flash Hook Timing (500mS) */
- 0x0D, 0x06, /* Pulse Break (67mS), Pulse Make (33ms) */
- 0x00, 0xA0, /* Interdigit Min (800mS) */
- 0x76, 0x24, /* Device Ring Period Max (59mS), Min (18mS) */
- 0x03, /* Ring Detect Min (23Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x3A, /* Ring Period Max (58mS) */
- 0x2A, 0x30, 0x21, 0x83  /* DTMF High/Low Freq Level (-6.5dBm0/-8.5dBm0) */
-};
-
-/* USA FXO/Dialing */
-const VpProfileDataType FXO_DIALING_US[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x78, /* Flash Hook Timing (600mS) */
- 0x0C, 0x08, /* Pulse Break (60mS), Pulse Make (40ms) */
- 0x00, 0xB4, /* Interdigit Min (900mS) */
- 0x8F, 0x1B, /* Device Ring Period Max (71mS), Min (13mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x47, /* Ring Period Max (71mS) */
- 0x2C, 0xB0, 0x23, 0x7F  /* DTMF High/Low Freq Level (-6.0dBm0/-8.0dBm0) */
-};
-
-/* South Africa FXO/Dialing */
-const VpProfileDataType FXO_DIALING_ZA[] =
-{
- /* FXO/Dialing Profile */
- 0x00, 0xFE, 0x00, 0x16, 0x01, 0x00, /* Header Information */
- 0x00, 0x14, 0x00, 0x14, /* DTMF On (100mS), DTMF Off (100ms) */
- 0x00, 0x12, /* Flash Hook Timing (90mS) */
- 0x0D, 0x07, /* Pulse Break (65mS), Pulse Make (35ms) */
- 0x00, 0x50, /* Interdigit Min (400mS) */
- 0x86, 0x27, /* Device Ring Period Max (67mS), Min (19mS) */
- 0x04, /* Ring Detect Min (26Vrms) */
- 0x00, /* Disconnect Threshold (2.56V) */
- 0x02, /* LIU Threshold (20.48V) */
- 0x42, /* Ring Period Max (66mS) */
- 0x1F, 0xA3, 0x19, 0x21  /* DTMF High/Low Freq Level (-9.0dBm0/-11.0dBm0) */
-};
-
-int dev_profile_size = sizeof(DEV_PROFILE_VE890_BB100V);
-int dc_profile_size = sizeof(DC_FXS_VE890_BB100V_DEF);
-int ac_profile_size = sizeof(AC_FXS_RF50_600R_DEF);
-int ring_profile_size = sizeof(RING_25HZ_VE890_BB100V_DEF);
-
-/* end of file profile_89116.c */
diff --git a/tools/voice/lantiq/kernel/profile_89116.h b/tools/voice/lantiq/kernel/profile_89116.h
deleted file mode 100644
index b17ea1e..0000000
--- a/tools/voice/lantiq/kernel/profile_89116.h
+++ /dev/null
@@ -1,267 +0,0 @@
-/*
- * profile_89116.h --
- *
- * This header file exports the Profile data types
- *
- * Project Info --
- *   File:   C:\Microsemi\Profile_Wizard_P2.1.2\890\NewProject116_new.vpw
- *   Type:   VE890 Configuration for 100V Buck-Boost Power Supply, Lite Narrowband FXS Coefficients, and 8.192MHz PCLK
- *   Date:   Wednesday, May 02, 2012 12:15:05
- *   Device: VE890 Le89316
- *
- *   This file was generated with Profile Wizard Version: P2.1.2
- *
- * Project Comments --
- *  --------------------------------------------
- *  Profile Wizard Coefficient Release 2.8 Notes:
- *  --------------------------------------------
- *  Added FXS AC Profile for Brazil (900R) and Russia (150R + (510R//47nF))
- *  Updated FXS AC Profiles for Australia, China, GR-57 (US non-loaded), Japan, New Zealand, and the UK
- *  --------------------------------------------
- *  Profile Wizard Coefficient Release 2.7 Notes:
- *  --------------------------------------------
- *  Replaced incorrect FXS AC Profiles for GR-57, China, Finland, and Japan
- *  --------------------------------------------
- *  Profile Wizard Coefficient Release 2.6 Notes:
- *  --------------------------------------------
- *  I. General:
- *  1. This release adds support for Mexico, Turkey, Thailand, Malaysia, Indonesia, and Ecuador, bringing
- *  the total number of supported countries to 44.  They are:
- *  Argentina (AR), Austria (AT), Australia (AU), Belgium (BE), Bulgaria (BG), Brazil (BR), Canada (CA), Switzerland (CH),
- *  Chile (CL), China (CN), Czech Republic (CZ), Germany (DE), Denmark (DK), Ecuador (EC), Spain (ES), Finland (FI),
- *  France (FR), UK (GB), Greece (GR), Hong Kong SAR China (HK), Hungary (HU), Indonesia (ID), Ireland (IE), Israel (IL),
- *  India (IN), Iceland (IS), Italy (IT), Japan (JP), S. Korea (KR), Mexico (MX), Malaysia (MY), Netherlands (NL),
- *  Norway (NO), New Zealand (NZ), Poland (PL), Portugal (PT), Russian Federation (RU), Sweden (SE), Singapore (SG),
- *  Thailand (TH), Turkey (TK), Taiwan (TW), USA (US), and South Africa (ZA).
- *  2. This release also corrects some Caller ID implementations and signal levels that were incorrect in release 2.3.
- *  3. The coefficients in this and all releases are provided for use only with the Microsemi VoicePath API-II (VP-API-II).
- *  Please refer to the terms and conditions for licensing the software regarding terms and conditions of usage. These profiles
- *  are provided for reference only with no guarantee whatsoever by Microsemi Corporation.
- *  4. This release is for the VE8911 chipset and includes coefficients required for FXS and FXO operation.
- *
- *  II. Device Profile:
- *  1. The default settings for the Device Profile are:
- *         PCLK = 8192 kHz
- *         PCM Transmit Edge = Positive
- *         Transmit Time Slot = 0
- *         Receive Time Slot = 0
- *         Interrupt Mode = Open Drain
- *         Switcher = Buck-Boost
- *         Driver Tick Rate = 5 ms
- *         Maximum Events / Tick = 2
- *  2. The settings may be changed by the user as necessary.  Please refer to the VE890 and API documentation for information about
- *  the supported settings.
- *
- *  II. AC Profiles:
- *  1. FXS Coefficients assume -6dBr RX (Output from chipset) and 0dB TX relative gain levels.
- *  2. Supported countries not individually listed should use the default 600R profile AC_FXS_RF50_600R_DEF.
- *  4. AC FXS Coefficients assume the use of two 25 ohm series resistors or PTCs. Customers using other PTC resistance values (such as
- *  7 ohms or 50 ohms) should not use these AC coefficients and can request alternate ones from Microsemi.
- *  5. This release includes Normal (or narrowband) coefficients for the FXS port. Wideband coefficients are available upon request.
- *  6. AC FXO Coefficients assume the use of the LC Filter on VE890 DAA Circuit consisting of CIMM and LIMM as shown
- *  in the datasheet.
- *  7. AC FXO Coefficients include the coefficient sets for the VE890 echo free adaptive balance.
- *
- *  III. DC Profile:
- *  1. The DC_FXS_VE890_BB100V_DEF is the default used for all countries.  Additional profiles may be created by the user if necessary.
- *
- *  IV. Ring Profiles:
- *  1. RING_25HZ_VE890_BB100V_DEF is the default ringing profile and should be used for all countries which do not have a listed Ringing Profile.  The default
- *  ringing profile is set for a sine wave ringing with an amplitude of 50 Vrms and a frequency of 25 Hz.
- *  2. All ringing profiles on the list have a 50 Vrms ringing level.
- *  3. DC biasing is set to 0 in the sample ringing profiles.
- *
- *  V. Tone Profiles:
- *  1. These profiles are available only in the full version of the API.
- *  2. The shown levels assume a 6dB attenuation in the chipset before being outputed to line.
- *  3. Call progress tone levels may be arbitrary as they are not always specified in national standards, or the standards may not be available to Microsemi.
- *  4. ITU-T Recommendation E.180 (03/1998) revised on 02/2003 and ETSI TR 101 041-2 V.1.1.1 (05/1997) were used if national standards were not
- *  available.
- *  5. Recommended ETSI ES 201 970 call progress tones are provided for reference.
- *  6. Modulated tones f1 x f2 are approximated as the sum of f1 + (f1+f2)/2 + (f1-f2)/2.
- *  7. The data in these profiles may be changed by the user as necessary.
- *   8. T_CAS_DEF is not a country-specific tone and is used by several national Caller ID profiles.
- *
- *  VI. Cadence Profiles:
- *  1. These profiles are available only in the full version of the API.
- *  2.  ITU-T Recommendation E.180 (03/1998) revised on 02/2003 and ETSI TR 101 041-2 V.1.1.1 (05/1997) were used if national standards were not
- *  available.
- *  3. Recommended ETSI ES 201 970 call progress cadences are provided for reference.
- *  4. Some countries support multiple call progress tone cadences.  The ones used are believed to be representative and most common.  The user may
- *  wish to edit some of the cadence definitions or add additional cadences.
- *  5. Ringing signal cadences include the alerting signal(s) and necessary delays for Type 1 Caller ID, if it is supported below in the Caller ID Profiles.
- *
- *  VII. Caller ID Profiles:
- *  1. These profiles are available only in the full version of the API.
- *  2. The option to calculate the checksum in the API is selected for all countries except Japan, which requires that the CRC checksum be calculated by
- *  host application.
- *
- *  VIII. FXO/Dialing Profiles:
- *  1. 44 country-specific profiles are provided.  They take into account such variations in national standards as pulse dialing, DTMF dialing, and line
- *  event detection parameters.
- *  2. They may be edited as necessary to meet regulatory requirements.
- *  3. ETSI 203 021 defaults are also provided for reference.
- *
- *  IX. Metering Profiles:
- *  1. Not supported by VE890 Series.
- *
- *  (c) Copyright 2011 Microsemi Corporation. All rights reserved.
- *
- *  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- */
-
-#ifndef PROFILE_89116_H
-#define PROFILE_89116_H
-
-#ifdef VP_API_TYPES_H
-#include "vp_api_types.h"
-#else
-typedef unsigned char VpProfileDataType;
-#endif
-
-extern int dev_profile_size;
-extern int dc_profile_size;
-extern int ac_profile_size;
-extern int ring_profile_size;
-
-/************** Device_Parameters **************/
-extern const VpProfileDataType DEV_PROFILE_VE890_BB100V[];/* Device Configuration Data - VE890 100V Buck-Boost */
-
-/************** AC_Coefficients **************/
-extern const VpProfileDataType AC_FXS_RF50_600R_DEF[];/* AC FXS RF50 600R Normal Coefficients (Default)  */
-extern const VpProfileDataType AC_FXS_RF50_ETSI[];   /* AC FXS RF50 ETSI ES201 970 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_GR57[];   /* AC FXS RF50 Telcordia GR-57 900R+2.16uF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_AT[];     /* AC FXS RF50 Austria 220R+820R//115nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_AU[];     /* AC FXS RF50 Australia 220R+820R//120nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_BE[];     /* AC FXS RF50 Belgium 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_BG[];     /* AC FXS RF50 Bulgaria 220R+820R//115nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_BR[];     /* AC FXS RF50 Brazil 900R Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_CH[];     /* AC FXS RF50 Switzerland 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_CN[];     /* AC FXS RF50 China 200R+680R//100nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_DE[];     /* AC FXS RF50 Germany 220R+820R//115nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_DK[];     /* AC FXS RF50 Denmark 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_ES[];     /* AC FXS RF50 Spain 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_FI[];     /* AC FXS RF50 Finland 270R+910R//120nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_FR[];     /* AC FXS RF50 France 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_GB[];     /* AC FXS RF50 UK 370R+620R//310nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_GR[];     /* AC FXS RF50 Greece 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_HU[];     /* AC FXS RF50 Hungary 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_IE[];     /* AC FXS RF50 Ireland 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_IL[];     /* AC FXS RF50 Israel 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_IS[];     /* AC FXS RF50 Iceland 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_IT[];     /* AC FXS RF50 Italy 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_JP[];     /* AC FXS RF50 Japan 600R+1uF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_NL[];     /* AC FXS RF50 Netherlands 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_NO[];     /* AC FXS RF50 Norway 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_NZ[];     /* AC FXS RF50 New Zealand 370R+620R//310nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_PT[];     /* AC FXS RF50 Portugal 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_RU[];     /* AC FXS RF50 Russia 150R+510R//47nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_SE[];     /* AC FXS RF50 Sweden 270R+750R//150nF Normal Coefficients */
-extern const VpProfileDataType AC_FXS_RF50_ZA[];     /* AC FXS RF50 South Africa 220R+820R//115nF Normal Coefficients */
-extern const VpProfileDataType AC_FXO_LC_600R_DEF[]; /* AC FXO LC Filter 600R Normal ABF Coefficients (Default) */
-extern const VpProfileDataType AC_FXO_LC_ETSI[];     /* AC FXO LC Filter ETSI ES203 021 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_TBR21_CR[]; /* AC FXO LC Filter TBR21 with Current Limit 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_GR57[];     /* AC FXO LC Filter Telcordia GR-57 600R Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_AT[];       /* AC FXO LC Filter Austria 220R+820R//115nF Normal Coefficients */
-extern const VpProfileDataType AC_FXO_LC_AU[];       /* AC FXO LC Filter Australia 220R+820R//120nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_BE[];       /* AC FXO LC Filter Belgium 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_BG[];       /* AC FXO LC Filter Bulgaria 220R+820R//115nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_BR[];       /* AC FXO LC Filter Brazil 900R Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_CH[];       /* AC FXO LC Filter Switzerland 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_CN[];       /* AC FXO LC Filter China 200R+680R//100nF Coefficients (Voice Applications) */
-extern const VpProfileDataType AC_FXO_LC_CN2[];      /* AC FXO LC Filter China 600R Normal ABF Coefficients (Modem Applications) */
-extern const VpProfileDataType AC_FXO_LC_DE[];       /* AC FXO LC Filter Germany 220R+820R//115nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_DK[];       /* AC FXO LC Filter Denmark 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_ES[];       /* AC FXO LC Filter Spain 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_FI[];       /* AC FXO LC Filter Finland 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_FR[];       /* AC FXO LC Filter France 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_GB[];       /* AC FXO LC Filter UK 370R+620R//310nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_GR[];       /* AC FXO LC Filter Greece 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_HK[];       /* AC FXO LC Filter Hong Kong SAR 600R ABF Coefficients - 4 KHz Return Loss */
-extern const VpProfileDataType AC_FXO_LC_HU[];       /* AC FXO LC Filter Hungary 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_IE[];       /* AC FXO LC Filter Ireland 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_IL[];       /* AC FXO LC Filter Israel 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_IS[];       /* AC FXO LC Filter Iceland 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_IT[];       /* AC FXO LC Filter Italy 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_JP[];       /* AC FXO LC Filter Japan 600R Lowest ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_MY[];       /* AC FXO LC Filter Malaysia 600R Low ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_NL[];       /* AC FXO LC Filter Netherlands 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_NO[];       /* AC FXO LC Filter Norway 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_NZ[];       /* AC FXO LC Filter New Zealand 370R+620R//310nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_PT[];       /* AC FXO LC Filter Portugal 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_SE[];       /* AC FXO LC Filter Sweden 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_TK[];       /* AC FXO LC Filter Turkey 270R+750R//150nF Normal ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_TW[];       /* AC FXO LC Filter Taiwan 600R Low ABF Coefficients */
-extern const VpProfileDataType AC_FXO_LC_ZA[];       /* AC FXO LC Filter South Africa 220R+820R//115nF Normal ABF Coefficients */
-
-/************** DC_Parameters **************/
-extern const VpProfileDataType DC_FXS_VE890_BB100V_DEF[];/* DC FXS Default -- Use for for all countries unless country file exists */
-
-/************** Ring_Parameters **************/
-extern const VpProfileDataType RING_25HZ_VE890_BB100V_DEF[];/* Default Ringing 25 Hz 50 Vrms - Use for all countries unless country file exists */
-extern const VpProfileDataType RING_VE890_BB100V_AT[];/* Austria Ringing 50 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_CA[];/* Canada Ringing 20 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_FI[];/* Finland Ringing 50 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_FR[];/* France Ringing 50 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_HK[];/* Hong Kong SAR Ringing 20 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_JP[];/* Japan Ringing 16 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_KR[];/* S. Korea Ringing 20 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_SG[];/* Singapore Ringing 24 Hz 50 Vrms  */
-extern const VpProfileDataType RING_VE890_BB100V_TW[];/* Taiwan Ringing 20 Hz 50 Vrms */
-extern const VpProfileDataType RING_VE890_BB100V_US[];/* USA Ringing 20 Hz 50 Vrms */
-
-/************** Call_Progress_Tones **************/
-
-/************** Cadence_Definitions **************/
-
-/************** Caller_ID **************/
-
-/************** FXO_Dialing_Profile **************/
-extern const VpProfileDataType FXO_DIALING_DEF[];    /* Default FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_ETSI[];   /* ETSI ES203 021 FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_AR[];     /* Argentina FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_AT[];     /* Austria FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_AU[];     /* Australia FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_BE[];     /* Belgium FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_BG[];     /* Bulgaria FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_BR[];     /* Brazil FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_CA[];     /* Canada FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_CH[];     /* Switzerland FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_CL[];     /* Chile FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_CN[];     /* China FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_CZ[];     /* Czech Republic FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_DE[];     /* Germany FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_DK[];     /* Denmark FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_EC[];     /* Ecuador FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_ES[];     /* Spain FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_FI[];     /* Finland FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_FR[];     /* France FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_GB[];     /* UK FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_GR[];     /* Greece FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_HK[];     /* Hong Kong SAR FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_HU[];     /* Hungary FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_ID[];     /* Indonesia FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_IE[];     /* Ireland FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_IL[];     /* Israel FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_IN[];     /* India FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_IS[];     /* Iceland FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_IT[];     /* Italy FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_JP[];     /* Japan FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_KR[];     /* S. Korea FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_MX[];     /* Mexico FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_MY[];     /* Malaysia FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_NL[];     /* Netherlands FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_NO[];     /* Norway FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_NZ[];     /* New Zealand FXO/Dialing  */
-extern const VpProfileDataType FXO_DIALING_PL[];     /* Poland FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_PT[];     /* Portugal FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_RU[];     /* Russia FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_SE[];     /* Sweden FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_SG[];     /* Singapore FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_TH[];     /* Thailand FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_TK[];     /* Turkey FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_TW[];     /* Taiwan FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_US[];     /* USA FXO/Dialing */
-extern const VpProfileDataType FXO_DIALING_ZA[];     /* South Africa FXO/Dialing */
-
-#endif /* PROFILE_89116_H */
diff --git a/tools/voice/lantiq/kernel/vpapi_lib.c b/tools/voice/lantiq/kernel/vpapi_lib.c
deleted file mode 100644
index 27e5c6b..0000000
--- a/tools/voice/lantiq/kernel/vpapi_lib.c
+++ /dev/null
@@ -1,432 +0,0 @@
-/*******************************************************************************
-Copyright (C) Marvell International Ltd. and its affiliates
-
-This software file (the "File") is owned and distributed by Marvell
-International Ltd. and/or its affiliates ("Marvell") under the following
-alternative licensing terms.  Once you have made an election to distribute the
-File under one of the following license alternatives, please (i) delete this
-introductory statement regarding license alternatives, (ii) delete the two
-license alternatives that you have not elected to use and (iii) preserve the
-Marvell copyright notice above.
-
-********************************************************************************
-Marvell Commercial License Option
-
-If you received this File from Marvell and you have entered into a commercial
-license agreement (a "Commercial License") with Marvell, the File is licensed
-to you under the terms of the applicable Commercial License.
-
-********************************************************************************
-Marvell GPL License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File in accordance with the terms and conditions of the General
-Public License Version 2, June 1991 (the "GPL License"), a copy of which is
-available along with the File in the license.txt file or by writing to the Free
-Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
-on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
-
-THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
-WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
-DISCLAIMED.  The GPL License provides additional details about this warranty
-disclaimer.
-********************************************************************************
-Marvell BSD License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File under the following licensing terms.
-Redistribution and use in source and binary forms, with or without modification,
-are permitted provided that the following conditions are met:
-
-    *   Redistributions of source code must retain the above copyright notice,
-	    this list of conditions and the following disclaimer.
-
-    *   Redistributions in binary form must reproduce the above copyright
-	notice, this list of conditions and the following disclaimer in the
-	documentation and/or other materials provided with the distribution.
-
-    *   Neither the name of Marvell nor the names of its contributors may be
-	used to endorse or promote products derived from this software without
-	specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-*******************************************************************************/
-
-#include <stdio.h>
-#include <fcntl.h>
-#include <string.h>
-#include <sys/ioctl.h>
-#include "vpapi_lib.h"
-
-/* Locals */
-static char dev_name[] = "/dev/vpapi";
-static int dev_fd = 0;
-static char lib_str[] = "[vpapi_lib]:";
-
-int vpapi_open_device(void)
-{
-	int fdflags;
-
-	/* open the device */
-	dev_fd = open(dev_name, O_RDWR);
-	if (dev_fd <= 0) {
-		printf("Cannot open %s device\n", dev_name);
-		return -1;
-	}
-
-	/* set some flags */
-	fdflags = fcntl(dev_fd, F_GETFL, 0);
-	fdflags |= O_NONBLOCK;
-	fcntl(dev_fd, F_SETFL, fdflags);
-
-	return 0;
-}
-
-int vpapi_close_device(void)
-{
-	if(dev_fd > 0)
-		close(dev_fd);
-
-	return 0;
-}
-
-VpStatusType vpapi_make_dev_object(VpDeviceType dev_type, VpDeviceIdType dev_id)
-{
-	VpApiModMkDevObjType data;
-
-	data.deviceType = dev_type;
-	data.deviceId = dev_id;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_MK_DEV_OBJ, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_MK_DEV_OBJ) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_make_line_object(VpTermType term_type, VpLineIdType line_id)
-{
-	VpApiModMkLnObjType data;
-
-	data.termType = term_type;
-	data.lineId = line_id;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_MK_LN_OBJ, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_MK_LN_OBJ) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_map_line_id(VpLineIdType line_id)
-{
-	VpApiModMapLnIdType data;
-
-	data.lineId = line_id;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_MAP_LN_ID, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_MAP_LN_ID) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_map_slac_id(VpDeviceIdType dev_id, unsigned char slac_id)
-{
-	VpApiModMapSlacIdType data;
-
-	data.deviceId = dev_id;
-	data.slacId = slac_id;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_MAP_SLAC_ID, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_MAP_SLAC_ID) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_free_line_context(VpLineIdType line_id)
-{
-	VpApiModFreeLnCtxType data;
-
-	data.lineId = line_id;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_FREE_LN_CTX, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_FREE_LN_CTX) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_init_device(VpDeviceIdType dev_id, VpProfilePtrType dev_profile_ptr,
-				VpProfilePtrType ac_profile_ptr, VpProfilePtrType dc_profile_ptr,
-				VpProfilePtrType ring_profile_ptr, VpProfilePtrType fxo_ac_profile_ptr,
-				VpProfilePtrType fxo_cfg_profile_ptr, vpapi_init_device_params_t *params_ptr)
-{
-	VpApiModInitDeviceType data;
-
-	data.deviceId = dev_id;
-	data.pDevProfile = dev_profile_ptr;
-	data.pAcProfile = ac_profile_ptr;
-	data.pDcProfile = dc_profile_ptr;
-	data.pRingProfile = ring_profile_ptr;
-	data.pFxoAcProfile = fxo_ac_profile_ptr;
-	data.pFxoCfgProfile = fxo_cfg_profile_ptr;
-	data.devProfileSize = params_ptr->dev_size;
-	data.acProfileSize = params_ptr->ac_size;
-	data.dcProfileSize = params_ptr->dc_size;
-	data.ringProfileSize = params_ptr->ring_size;
-	data.fxoAcProfileSize = params_ptr->fxo_ac_size;
-	data.fxoCfgProfileSize = params_ptr->fxo_cfg_size;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_INIT_DEV, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_INIT_DEV) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_cal_line(VpLineIdType line_id)
-{
-	VpApiModCalLnType data;
-
-	data.lineId = line_id;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_CAL_LN, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_CAL_LN) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_set_line_state(VpLineIdType line_id, VpLineStateType state)
-{
-	VpApiModSetLnStType data;
-
-	data.lineId = line_id;
-	data.state = state;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_SET_LN_ST, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_SET_LN_ST) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-VpStatusType vpapi_set_option(unsigned char line_request, VpLineIdType line_id,
-				VpDeviceIdType dev_id, VpOptionIdType option, void *value_p)
-{
-	VpApiModSetOptionType data;
-
-	data.lineRequest = line_request;
-	data.lineId = line_id;
-	data.deviceId = dev_id;
-	data.option = option;
-	data.pValue = value_p;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return VP_STATUS_FAILURE;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_SET_OPTION, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_SET_OPTION) failed\n");
-		return VP_STATUS_FAILURE;
-	}
-
-	return data.status;
-}
-
-bool vpapi_get_event(VpDeviceIdType dev_id, VpEventType *event_p)
-{
-	VpApiModGetEventType data;
-
-	data.deviceId = dev_id;
-	data.pEvent = event_p;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return false;
-	}
-
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_GET_EVENT, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_GET_EVENT) failed\n");
-		return false;
-	}
-
-	return data.newEvent;
-}
-
-int vpapi_check_event(void)
-{
-	fd_set ex_fds;
-	struct timeval timeout = {0, 1};
-	int ret;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return 1;
-	}
-
-	FD_ZERO(&ex_fds);
-	FD_SET(dev_fd, &ex_fds);
-
-	/* Wait for event  */
-	ret = select(dev_fd+1, NULL, NULL, &ex_fds, &timeout);
-
-	if(FD_ISSET(dev_fd, &ex_fds))
-		return 0;
-	else
-		return 1;
-}
-
-int vpapi_battary_on(int vbh, int vbl, int vbp)
-{
-	VpModBatteryOnType data;
-
-	data.vbh = vbh;
-	data.vbl = vbl;
-	data.vbp = vbp;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return -1;
-	}
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_BATT_ON, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_BATT_ON) failed\n");
-		return -1;
-	}
-
-	return data.status;
-}
-
-int vpapi_battery_off(void)
-{
-	VpModBatteryOffType data;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return -1;
-	}
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_BATT_OFF, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_BATT_OFF) failed\n");
-		return -1;
-	}
-
-	return data.status;
-}
-
-int vpapi_slic_reg_read(VpLineIdType line_id, unsigned char cmd, unsigned char cmd_len, unsigned char *buff)
-{
-	VpModRegOpType data;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return -1;
-	}
-
-	data.lineId = line_id;
-	data.cmd = cmd;
-	data.cmdLen = cmd_len;
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_REG_READ, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_REG_READ) failed\n");
-		return -1;
-	}
-
-	memcpy(buff, data.buff, cmd_len);
-
-	return 0;
-}
-
-int vpapi_slic_reg_write(VpLineIdType line_id, unsigned char cmd, unsigned char cmd_len, unsigned char *buff)
-{
-	VpModRegOpType data;
-
-	if (dev_fd <= 0) {
-		printf("Device %s is not accessible\n", dev_name);
-		return -1;
-	}
-
-	data.lineId = line_id;
-	data.cmd = cmd;
-	data.cmdLen = cmd_len;
-	memcpy(data.buff, buff, cmd_len);
-
-	if (ioctl(dev_fd, VPAPI_MOD_IOX_REG_WRITE, &data) < 0) {
-		printf("ioctl(VPAPI_MOD_IOX_REG_WRITE) failed\n");
-		return -1;
-	}
-
-	return 0;
-}
diff --git a/tools/voice/lantiq/kernel/vpapi_lib.h b/tools/voice/lantiq/kernel/vpapi_lib.h
deleted file mode 100644
index da4ab0b..0000000
--- a/tools/voice/lantiq/kernel/vpapi_lib.h
+++ /dev/null
@@ -1,102 +0,0 @@
-/*******************************************************************************
-Copyright (C) Marvell International Ltd. and its affiliates
-
-This software file (the "File") is owned and distributed by Marvell
-International Ltd. and/or its affiliates ("Marvell") under the following
-alternative licensing terms.  Once you have made an election to distribute the
-File under one of the following license alternatives, please (i) delete this
-introductory statement regarding license alternatives, (ii) delete the two
-license alternatives that you have not elected to use and (iii) preserve the
-Marvell copyright notice above.
-
-********************************************************************************
-Marvell Commercial License Option
-
-If you received this File from Marvell and you have entered into a commercial
-license agreement (a "Commercial License") with Marvell, the File is licensed
-to you under the terms of the applicable Commercial License.
-
-********************************************************************************
-Marvell GPL License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File in accordance with the terms and conditions of the General
-Public License Version 2, June 1991 (the "GPL License"), a copy of which is
-available along with the File in the license.txt file or by writing to the Free
-Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
-on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
-
-THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
-WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
-DISCLAIMED.  The GPL License provides additional details about this warranty
-disclaimer.
-********************************************************************************
-Marvell BSD License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File under the following licensing terms.
-Redistribution and use in source and binary forms, with or without modification,
-are permitted provided that the following conditions are met:
-
-    *   Redistributions of source code must retain the above copyright notice,
-	    this list of conditions and the following disclaimer.
-
-    *   Redistributions in binary form must reproduce the above copyright
-	notice, this list of conditions and the following disclaimer in the
-	documentation and/or other materials provided with the distribution.
-
-    *   Neither the name of Marvell nor the names of its contributors may be
-	used to endorse or promote products derived from this software without
-	specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-*******************************************************************************/
-
-#ifndef _VPAPI_LIB_H
-#define _VPAPI_LIB_H
-
-#include <stdbool.h>
-#include <slic/vpapi_dev.h>
-
-typedef struct vpapi_init_device_params {
-	unsigned short dev_size;
-	unsigned short ac_size;
-	unsigned short dc_size;
-	unsigned short ring_size;
-	unsigned short fxo_ac_size;
-	unsigned short fxo_cfg_size;
-} vpapi_init_device_params_t;
-
-int vpapi_open_device(void);
-int vpapi_close_device(void);
-int vpapi_check_event(void);
-VpStatusType vpapi_make_dev_object(VpDeviceType dev_type, VpDeviceIdType dev_id);
-VpStatusType vpapi_make_line_object(VpTermType term_type, VpLineIdType line_id);
-VpStatusType vpapi_map_line_id(VpLineIdType line_id);
-VpStatusType vpapi_map_slac_id(VpDeviceIdType dev_id, unsigned char slac_id);
-VpStatusType vpapi_free_line_context(VpLineIdType line_id);
-VpStatusType vpapi_init_device(VpDeviceIdType dev_id, VpProfilePtrType dev_profile_ptr,
-				VpProfilePtrType ac_profile_ptr, VpProfilePtrType dc_profile_ptr,
-				VpProfilePtrType ring_profile_ptr, VpProfilePtrType fxo_ac_profile_ptr,
-				VpProfilePtrType fxo_cfg_profile_ptr, vpapi_init_device_params_t *params_ptr);
-VpStatusType vpapi_cal_line(VpLineIdType line_id);
-VpStatusType vpapi_set_line_state(VpLineIdType line_id, VpLineStateType state);
-VpStatusType vpapi_set_option(unsigned char line_request, VpLineIdType line_id, VpDeviceIdType dev_id,
-				VpOptionIdType option, void *value_p);
-bool vpapi_get_event(VpDeviceIdType dev_id, VpEventType *event_p);
-int vpapi_battary_on(int vbh, int vbl, int vbp);
-int vpapi_battery_off(void);
-int vpapi_slic_reg_read(VpLineIdType line_id, unsigned char cmd, unsigned char cmd_len, unsigned char *buff);
-int vpapi_slic_reg_write(VpLineIdType line_id, unsigned char cmd, unsigned char cmd_len, unsigned char *buff);
-
-#endif /* _VPAPI_LIB_H */
-- 
1.7.5.4

