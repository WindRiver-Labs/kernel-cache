From 765282dc44f805fed6722060ab5bc15ea7e204c5 Mon Sep 17 00:00:00 2001
From: Eran Ben-Avi <benavi@marvell.com>
Date: Thu, 11 Jul 2013 16:50:40 +0300
Subject: [PATCH 0786/1825] tools/lantiq: Apply bugfixes after bring-up.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit e464d550fcb27c2c6f21c723c2e1fa2df8dd1bff

	- Enable events before waiting for them.
	- Activate PCM channels before using them.
	- Fix event handling.

Change-Id: Ic9a8e48ab47948ba41a3976aeb35da3d3dc8b220
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 tools/voice/lantiq/kernel/libtapi.c       |   39 +++++++++++++++-
 tools/voice/lantiq/kernel/libtapi.h       |   11 +++-
 tools/voice/lantiq/kernel/mv_voice_tool.c |   72 +++++++++++++++++++---------
 3 files changed, 94 insertions(+), 28 deletions(-)

diff --git a/tools/voice/lantiq/kernel/libtapi.c b/tools/voice/lantiq/kernel/libtapi.c
index d74d526..aebd84d 100644
--- a/tools/voice/lantiq/kernel/libtapi.c
+++ b/tools/voice/lantiq/kernel/libtapi.c
@@ -62,6 +62,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 *******************************************************************************/
 #include <stdio.h>
+#include <string.h>
 #include <malloc.h>
 #include <fcntl.h>
 #include <poll.h>
@@ -517,7 +518,22 @@ tapi_translate_event_id(IFX_TAPI_EVENT_ID_t ifx_id)
 }
 
 int
-tapi_get_event(tapi_handle_t th, int timeout, tapi_event_t *event)
+tapi_event_enable(tapi_handle_t th, unsigned int device, unsigned int channel,
+							tapi_event_id_t event)
+{
+	IFX_TAPI_EVENT_t ifx_event;
+
+	memset(&ifx_event, 0, sizeof(ifx_event));
+	ifx_event.dev		= device;
+	ifx_event.ch		= channel;
+	ifx_event.id		= tapi_event_tanslation_table[event];
+
+	return (ioctl(th->fd, IFX_TAPI_EVENT_ENABLE, &ifx_event));
+}
+
+int
+tapi_event_get(tapi_handle_t th, unsigned int device, int timeout,
+							tapi_event_t *event)
 {
 	IFX_TAPI_EVENT_t ifx_event;
 	struct pollfd fds;
@@ -531,6 +547,10 @@ tapi_get_event(tapi_handle_t th, int timeout, tapi_event_t *event)
 	if (r <= 0)
 		return (r);
 
+	memset(&ifx_event, 0, sizeof(ifx_event));
+	ifx_event.dev	= device;
+	ifx_event.ch	= IFX_TAPI_EVENT_ALL_CHANNELS;
+
 	if (ioctl(th->fd, IFX_TAPI_EVENT_GET, &ifx_event) < 0)
 		return (-1);
 
@@ -602,7 +622,9 @@ tapi_pcm_channel_config(tapi_handle_t th, unsigned int device,
 		[TAPI_PCM_CODING_NB_G726_16]	= IFX_TAPI_PCM_RES_NB_G726_16,
 		[TAPI_PCM_CODING_NB_G726_24]	= IFX_TAPI_PCM_RES_NB_G726_24,
 		[TAPI_PCM_CODING_NB_G726_32]	= IFX_TAPI_PCM_RES_NB_G726_32,
-		[TAPI_PCM_COFING_NB_G726_40]	= IFX_TAPI_PCM_RES_NB_G726_40,
+		[TAPI_PCM_CODING_NB_G726_40]	= IFX_TAPI_PCM_RES_NB_G726_40,
+		[TAPI_PCM_CODING_WB_LINEAR_SPLIT_16BIT] =
+			IFX_TAPI_PCM_RES_WB_LINEAR_SPLIT_16BIT,
 	};
 
 	pcmcfg.dev		= device;
@@ -616,3 +638,16 @@ tapi_pcm_channel_config(tapi_handle_t th, unsigned int device,
 
 	return (ioctl(th->fd, IFX_TAPI_PCM_CFG_SET, &pcmcfg));
 }
+
+int
+tapi_pcm_channel_activate(tapi_handle_t th, unsigned int device,
+							unsigned int channel)
+{
+	IFX_TAPI_PCM_ACTIVATION_t pcmact;
+
+	pcmact.dev	= device;
+	pcmact.ch	= channel;
+	pcmact.mode	= IFX_ENABLE;
+
+	return(ioctl(th->fd, IFX_TAPI_PCM_ACTIVATION_SET, &pcmact));
+}
diff --git a/tools/voice/lantiq/kernel/libtapi.h b/tools/voice/lantiq/kernel/libtapi.h
index 9920418..1b774cd 100644
--- a/tools/voice/lantiq/kernel/libtapi.h
+++ b/tools/voice/lantiq/kernel/libtapi.h
@@ -297,7 +297,8 @@ typedef enum {
 	TAPI_PCM_CODING_NB_G726_16,
 	TAPI_PCM_CODING_NB_G726_24,
 	TAPI_PCM_CODING_NB_G726_32,
-	TAPI_PCM_COFING_NB_G726_40,
+	TAPI_PCM_CODING_NB_G726_40,
+	TAPI_PCM_CODING_WB_LINEAR_SPLIT_16BIT,
 } tapi_pcm_coding_t;
 
 extern tapi_handle_t tapi_open(const char *tapidev);
@@ -321,13 +322,17 @@ extern int tapi_ring_stop(tapi_handle_t th, unsigned int device,
 							  unsigned int channel);
 extern tapi_line_hook_t tapi_hook_status_get(tapi_handle_t th,
 				     unsigned int device, unsigned int channel);
-extern int tapi_get_event(tapi_handle_t th, int timeout, tapi_event_t *event);
-
+extern int tapi_event_get(tapi_handle_t th, unsigned int device, int timeout,
+							   tapi_event_t *event);
+extern int tapi_event_enable(tapi_handle_t th, unsigned int device,
+				   unsigned int channel, tapi_event_id_t event);
 extern int tapi_pcm_if_config(tapi_handle_t th, unsigned int device,
 		tapi_pcm_if_mode_t mode, tapi_pcm_if_freq_t freq,
 		tapi_pcm_if_slope_t rxslope, tapi_pcm_if_slope_t txslope);
 extern int tapi_pcm_channel_config(tapi_handle_t th, unsigned int device,
 		unsigned int channel, unsigned int slotrx, unsigned int slottx,
 		tapi_pcm_coding_t coding);
+extern int tapi_pcm_channel_activate(tapi_handle_t th, unsigned int device,
+							  unsigned int channel);
 
 #endif /* _LIBTAPI_H */
diff --git a/tools/voice/lantiq/kernel/mv_voice_tool.c b/tools/voice/lantiq/kernel/mv_voice_tool.c
index ef09fd7..24c29af 100644
--- a/tools/voice/lantiq/kernel/mv_voice_tool.c
+++ b/tools/voice/lantiq/kernel/mv_voice_tool.c
@@ -73,7 +73,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #define	TAPI_DEVICE			0
 #define TAPI_CHANNELS			2
-#define TAPI_IRQ			20
+#define TAPI_IRQ			0	/* Polling mode */
 
 #define MAX_LINES			TAPI_CHANNELS
 #define	MAX_DEVICE_LINES		TAPI_CHANNELS
@@ -94,7 +94,7 @@ static unsigned char time_slot_table[MAX_LINES];
 static unsigned char hook_state[MAX_LINES];
 static char dev_name[] = "/dev/tdm";
 static char tapi_name[] = "/dev/tapi";
-static char tapi_fw_name[] = "dxt_fw_V5.25.04.bin";
+static char tapi_fw_name[] = "dxt_fw_V5.25.11.bin";
 static char tapi_bbd_name[] = "ETSI_T3R10.BIN";
 static int buff_size = 0;
 static unsigned char aud_buf[2][320 * MAX_LINES];
@@ -134,7 +134,7 @@ static void sw_loopback(int tdm_fd, unsigned char line_id);
 static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigned char line1);
 static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line, unsigned char end_line);
 static void slic_digital_loopback(int tdm_fd, unsigned long int iterations);
-static void wait_for_event(void);
+static void wait_for_event(int block);
 static void release(int signum);
 
 int main(void)
@@ -311,7 +311,7 @@ int main(void)
 
 				if (tapi_pcm_if_config(th, TAPI_DEVICE,
 				    TAPI_PCM_IF_MODE_SLAVE, TAPI_PCM_IF_FREQ_8192KHZ,
-				    TAPI_PCM_IF_SLOPE_FALL, TAPI_PCM_IF_SLOPE_RISE) < 0) {
+				    TAPI_PCM_IF_SLOPE_FALL, TAPI_PCM_IF_SLOPE_FALL) < 0) {
 					printf("%s Error, could not configure PCM interface.\n", TOOL_PREFIX);
 					return 1;
 				}
@@ -324,7 +324,7 @@ int main(void)
 					codec = TAPI_PCM_CODING_NB_LINEAR_16BIT;
 					break;
 				case 4:
-					codec = TAPI_PCM_CODING_WB_LINEAR_16BIT;
+					codec = TAPI_PCM_CODING_WB_LINEAR_SPLIT_16BIT;
 					break;
 				default:
 					codec = TAPI_PCM_CODING_NB_ALAW_8BIT;
@@ -338,28 +338,52 @@ int main(void)
 						return 1;
 					}
 
+					if (tapi_event_enable(th, TAPI_DEVICE, i, TAPI_EVENT_FXS_ONHOOK) < 0) {
+						printf("%s Error, could enable event reporting.\n", TOOL_PREFIX);
+						return 1;
+					}
+
+					if (tapi_event_enable(th, TAPI_DEVICE, i, TAPI_EVENT_FXS_OFFHOOK) < 0) {
+						printf("%s Error, could enable event reporting.\n", TOOL_PREFIX);
+						return 1;
+					}
+
+					if (tapi_event_enable(th, TAPI_DEVICE, i, TAPI_EVENT_CALIBRATION_END) < 0) {
+						printf("%s Error, could enable event reporting.\n", TOOL_PREFIX);
+						return 1;
+					}
+				}
+
+				/* Wait to device/s and line/s calibration to finish */
+				while((cal_lines < total_lines)) {
+					printf("SLIC: Calibrating line %u ...\n", cal_lines);
+
+					if (tapi_line_calibrate(th, TAPI_DEVICE, cal_lines) < 0) {
+						printf("%s Error, could not calibrate line.\n", TOOL_PREFIX);
+						return 1;
+					}
+
+					wait_for_event(1);
+				}
+
+				for (i = 0; i < TAPI_CHANNELS; i++) {
 					if (tapi_line_feed_set(th, TAPI_DEVICE, i, TAPI_LINE_FEED_STANDBY) < 0) {
 						printf("%s Error, could not set line feed.\n", TOOL_PREFIX);
 						return 1;
 					}
 
-					if (tapi_pcm_channel_config(th, TAPI_DEVICE, i, i, i, codec) < 0) {
+					if (tapi_pcm_channel_config(th, TAPI_DEVICE, i, ((i+1)*pcm_bytes), ((i+1)*pcm_bytes), codec) < 0) {
 						printf("%s Error, could not configure PCM channel.\n", TOOL_PREFIX);
 						return 1;
 					}
 
-					if (tapi_line_calibrate(th, TAPI_DEVICE, i) < 0) {
-						printf("%s Error, could not calibrate line.\n", TOOL_PREFIX);
+					if (tapi_pcm_channel_activate(th, TAPI_DEVICE, i) < 0) {
+						printf("%s Error, could not activate PCM channel.\n", TOOL_PREFIX);
 						return 1;
 					}
-
 				}
 
 				slic_init = 1;
-
-				/* Wait to device/s and line/s calibration to finish */
-				while((cal_lines < total_lines))
-					wait_for_event();
 				break;
 
 			case 'b':
@@ -487,7 +511,7 @@ static void sw_tone_test(int tdm_fd, unsigned char line_id)
 
 		/* Wait until both lines go off-hook */
 		while(hook_state[line_id] == 0) {
-			wait_for_event();
+			wait_for_event(1);
 		}
 
 		if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
@@ -521,7 +545,7 @@ static void sw_tone_test(int tdm_fd, unsigned char line_id)
 			}
 
 			/* Check hook state */
-			wait_for_event();
+			wait_for_event(0);
 
 			/* Reload timeout */
 			timeout.tv_usec = TIMEOUT;
@@ -542,7 +566,7 @@ static void sw_loopback(int tdm_fd, unsigned char line_id)
 
 	/* Wait until line goes off-hook */
 	while(hook_state[line_id] == 0) {
-		wait_for_event();
+		wait_for_event(1);
 	}
 
 	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
@@ -584,7 +608,7 @@ static void sw_loopback(int tdm_fd, unsigned char line_id)
 		}
 
 		/* Check hook state */
-		wait_for_event();
+		wait_for_event(0);
 
 		/* Reload timeout */
 		timeout.tv_usec = TIMEOUT;
@@ -609,7 +633,7 @@ static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigne
 
 	/* Wait until both lines go off-hook */
 	while((hook_state[line0] == 0) || (hook_state[line1] == 0)) {
-		wait_for_event();
+		wait_for_event(1);
 	}
 
 	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
@@ -650,7 +674,7 @@ static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigne
 		}
 
 		/* Check hook state */
-		wait_for_event();
+		wait_for_event(0);
 
 		/* Reload timeout */
 		timeout.tv_usec = TIMEOUT;
@@ -676,7 +700,7 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 
 	/* Wait until at least one line goes off-hook */
 	while(offhook_count == 0) {
-		wait_for_event();
+		wait_for_event(1);
 	}
 
 	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
@@ -720,7 +744,7 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 		}
 
 		/* Check hook state */
-		wait_for_event();
+		wait_for_event(0);
 
 		/* Reload timeout */
 		timeout.tv_usec = TIMEOUT;
@@ -732,11 +756,13 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 	}
 }
 
-static void wait_for_event(void)
+static void wait_for_event(int block)
 {
 	tapi_event_t event;
 
-	tapi_get_event(th, -1, &event);
+	if (tapi_event_get(th, TAPI_DEVICE, (block) ? -1 : 0, &event) <= 0)
+		return;
+
 	switch (event.event) {
 	case TAPI_EVENT_FXS_ONHOOK:
 		printf("on-hook(%d)\n", event.channel);
-- 
1.7.5.4

