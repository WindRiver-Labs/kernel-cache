From fd7a417e105dfbcb5a061759a875044925794b21 Mon Sep 17 00:00:00 2001
From: Joe Zhou <shjzhou@marvell.com>
Date: Mon, 24 Mar 2014 15:34:36 +0800
Subject: [PATCH 1500/1825] fix: alp: SMP big endian mode doesn't work on A0

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit b0cce68d92aaf0f2431bbe2f80c69fdfd454908b

	Problem:
	CPU1 fails to boot in SMP+BE mode.
	Neither LK3.4 or LK2.6 cannot work on A0, but both of them can work well
	on Z version.

	Root Cause:
	In headsmp.S, there is a piece of code(see below) copied into
	SRAM (mapped from CPU1 window) for Z version, in A0, it is skipped.
	So CPU1 is not set to big endian mode for A0.

	In headsmp.S

	ENTRY(alp_smp_cpu1_enable_code_start)
	alp_smp_cpu1_enable_code_start:
	#ifdef CONFIG_BE8_ON_LE
    	setend  be
        ldr    r0, [pc, #8]
	#else
        ldr    r0, [pc, #4]
	#endif
        ldr    r1, [r0]
	#ifdef CONFIG_BE8_ON_LE
        rev r1, r1
	#endif
        mov pc, r1
        .word  CPU_RESUME_ADDR_REG
	alp_smp_cpu1_enable_code_end:
    ENDPROC(alp_smp_cpu1_enable_code_end)
	#endif /* CONFIG_ALP_CPU1_ENABLE_WA */

	In core.c

	if (mvCtrlRevGet() <= MV_88F66X0_Z3_ID) {
	    sram_virt_base = ioremap(win_phys_base, SZ_64K);
        code_len = 4 * (&alp_smp_cpu1_enable_code_end - &alp_smp_cpu1_enable_code_start);
        memcpy(sram_virt_base, &alp_smp_cpu1_enable_code_start, code_len);
    }

Change-Id: I9d6550d174858fc4c07468e789a037aab03fb51c
Signed-off-by: Joe Zhou <shjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6642
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/headsmp.S |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-avantalp/headsmp.S b/arch/arm/mach-avantalp/headsmp.S
index faa3347..94f8727a 100644
--- a/arch/arm/mach-avantalp/headsmp.S
+++ b/arch/arm/mach-avantalp/headsmp.S
@@ -72,5 +72,8 @@ ENTRY(v7_invalidate_l1)
 ENDPROC(v7_invalidate_l1)
 
 ENTRY(alp_secondary_startup)
+#ifdef CONFIG_BE8_ON_LE
+	setend  be
+#endif
 	bl	v7_invalidate_l1
 	b	secondary_startup
-- 
1.7.5.4

