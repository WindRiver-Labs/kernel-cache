From b261527202f24abc6a8a68cd343778da39647d2e Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Thu, 20 Jun 2013 17:26:56 -0400
Subject: [PATCH 0726/1825] PPv2: Improve driver probe based on plat_data
 structure.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit a5ebf1af8fdf22af3b6bc482fc42399d93735027

	- Take phy_addr from plat_data instead of mvBoardPhyAddrGet() function
	- Use new function mvEthSpeedStrGet() to print port speed
	- Print more plat_data parameters on probe

Change-Id: I0d47676af9e1f36290ed76c5c8a4515d9c96863b
Reviewed-on: http://vgitil04.il.marvell.com:8080/2306
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Jonatan Farhadian <yonif@marvell.com>
Reviewed-by: Star_Automation <star@marvell.com>
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   63 ++++++++++---------
 1 files changed, 33 insertions(+), 30 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 5fa558b..03cffc6 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -44,7 +44,6 @@ disclaimer.
 #include "mvDebug.h"
 #include "dbg-trace.h"
 #include "mvSysHwConfig.h"
-#include "boardEnv/mvBoardEnvLib.h"
 #include "ctrlEnv/mvCtrlEnvLib.h"
 #include "eth-phy/mvEthPhy.h"
 #include "mvSysEthPhyApi.h"
@@ -963,12 +962,7 @@ void mv_eth_link_status_print(int port)
 		printk(KERN_CONT ", %s duplex", (link.duplex == MV_ETH_DUPLEX_FULL) ? "full" : "half");
 		printk(KERN_CONT ", speed ");
 
-		if (link.speed == MV_ETH_SPEED_1000)
-			printk(KERN_CONT "1 Gbps\n");
-		else if (link.speed == MV_ETH_SPEED_100)
-			printk(KERN_CONT "100 Mbps\n");
-		else
-			printk(KERN_CONT "10 Mbps\n");
+		printk(KERN_CONT "%s\n", mvEthSpeedStrGet(link.speed));
 	} else
 		printk(KERN_CONT "link down\n");
 
@@ -2829,7 +2823,7 @@ static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 {
 	u32 port;
 	struct eth_port *pp;
-	int mtu, err, txp, phys_port;
+	int mtu, err, txp, phys_port, speed, force_link = 0;
 	struct mv_pp2_pdata *plat_data = (struct mv_pp2_pdata *)pdev->dev.platform_data;
 	u8 mac[MV_MAC_ADDR_SIZE];
 
@@ -2850,33 +2844,40 @@ static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 		return err;
 
 	pp->cpuMask = plat_data->cpu_mask;
+
+	switch (plat_data->speed) {
+	case SPEED_10:
+		speed = MV_ETH_SPEED_10;
+		force_link = 1;
+		break;
+	case SPEED_100:
+		speed = MV_ETH_SPEED_100;
+		force_link = 1;
+		break;
+	case SPEED_1000:
+		speed = MV_ETH_SPEED_1000;
+		force_link = 1;
+		break;
+	case 0:
+		speed = MV_ETH_SPEED_AN;
+		force_link = 0;
+		break;
+	default:
+		pr_err("gbe #%d: unknown speed = %d\n", pp->port, plat_data->speed);
+		return -EIO;
+	}
 	/* set port's speed, duplex, fc */
 	if (!MV_PON_PORT(pp->port)) {
-		/* force link, speed and duplex if necessary (e.g. Switch is connected) based on board information */
-		switch (plat_data->speed) {
-		case SPEED_10:
-			err = mv_eth_port_link_speed_fc(pp->port, MV_ETH_SPEED_10, 1);
-			break;
-		case SPEED_100:
-			err = mv_eth_port_link_speed_fc(pp->port, MV_ETH_SPEED_100, 1);
-			break;
-		case SPEED_1000:
-			err = mv_eth_port_link_speed_fc(pp->port, MV_ETH_SPEED_1000, 1);
-			break;
-		case 0:
-			err = mv_eth_port_link_speed_fc(pp->port, MV_ETH_SPEED_AN, 0);
-			break;
-		default:
-			/* do nothing */
-			break;
-		}
+		/* force link, speed and duplex if necessary based on board information */
+		err = mv_eth_port_link_speed_fc(pp->port, speed, force_link);
 		if (err)
 			return err;
 	}
-
 	mtu = mv_eth_config_get(pdev, mac);
 
-	printk(KERN_ERR "\t%s p=%d: mtu=%d, mac=%p\n", MV_PON_PORT(port) ? "pon" : "giga", port, mtu, mac);
+	pr_info("\t%s p=%d: phy=%d,  mtu=%d, mac="MV_MACQUAD_FMT", speed=%s %s\n",
+		MV_PON_PORT(port) ? "pon" : "giga", port, plat_data->phy_addr, mtu,
+		MV_MACQUAD(mac), mvEthSpeedStrGet(speed), force_link ? "(force)" : "");
 
 	if (mv_eth_hal_init(pp)) {
 		printk(KERN_ERR "%s: can't init eth hal\n", __func__);
@@ -3085,12 +3086,14 @@ static int mv_eth_probe(struct platform_device *pdev)
 	if (!MV_PON_PORT(pdev->id)) {
 		if (!plat_data->lb_enable) {
 			/* Set the board information regarding PHY address */
-			phyAddr = mvBoardPhyAddrGet(pdev->id);
-			mvEthPhyAddrSet(pdev->id, phyAddr);
+			phyAddr = plat_data->phy_addr;
+			if (phyAddr != -1)
+				mvEthPhyAddrSet(pdev->id, phyAddr);
 		}
 
 		if (plat_data->lb_enable)
 			mvEthPortLbSet(port, (plat_data->speed == SPEED_1000), plat_data->is_sgmii);
+
 		mvEthPortPowerUp(port, plat_data->is_sgmii, plat_data->is_rgmii);
 	}
 
-- 
1.7.5.4

