From c39689d0ce812d2a18134c263dd83d2bd3ccd5fe Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Sun, 21 Apr 2013 20:17:55 -0400
Subject: [PATCH 0603/1825] PPv2: Delete-unused-mv_net_devs-structures

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 72cbabbb9122b01f713e9a84ec159647606527f9

Change-Id: I1372ee4d34b9332e3af08cf6d8bab7145cac4336
Reviewed-on: http://vgitil04.il.marvell.com:8080/1626
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   49 ++++---------------
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h      |    1 -
 2 files changed, 11 insertions(+), 39 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index bed1d1b..67d55eb 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -84,10 +84,8 @@ int mv_eth_ctrl_recycle(int en)
 
 struct bm_pool mv_eth_pool[MV_ETH_BM_POOLS];
 struct eth_port **mv_eth_ports;
-struct net_device **mv_net_devs;
 struct aggr_tx_queue *aggr_txqs;
 
-int mv_net_devs_num = 0;
 int mv_ctrl_txdone = CONFIG_MV_ETH_TXDONE_COAL_PKTS;
 EXPORT_SYMBOL(mv_ctrl_txdone);
 
@@ -97,7 +95,6 @@ unsigned int mv_eth_pnc_ctrl_en = 1;
  * Static declarations
  */
 static int mv_eth_ports_num = 0;
-static int mv_net_devs_max = 0;
 
 static int mv_eth_initialized = 0;
 
@@ -437,20 +434,12 @@ static int mv_eth_port_config_parse(struct eth_port *pp)
 
 struct eth_port *mv_eth_port_by_id(unsigned int port)
 {
-	if (port < mv_eth_ports_num)
+	if (mv_eth_ports && (port < mv_eth_ports_num))
 		return mv_eth_ports[port];
 
 	return NULL;
 }
 
-struct net_device *mv_eth_netdev_by_id(unsigned int idx)
-{
-	if (idx < mv_net_devs_num)
-		return mv_net_devs[idx];
-
-	return NULL;
-}
-
 static inline int mv_eth_skb_mh_add(struct sk_buff *skb, u16 mh)
 {
        /* sanity: Check that there is place for MH in the buffer */
@@ -2793,7 +2782,7 @@ static int mv_eth_port_link_speed_fc(int port, MV_ETH_PORT_SPEED port_speed, int
 
 static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 {
-	u32 port, dev_i = 0;
+	u32 port;
 	struct eth_port *pp;
 	int mtu, err, txp, phys_port;
 	struct mv_pp2_pdata *plat_data = (struct mv_pp2_pdata *)pdev->dev.platform_data;
@@ -2850,13 +2839,12 @@ static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 		return -EIO;
 	}
 
-	mv_net_devs[dev_i] = mv_eth_netdev_init(pp, mtu, mac, pdev);
-	if (!mv_net_devs[dev_i]) {
+	pp->dev = mv_eth_netdev_init(pp, mtu, mac, pdev);
+	if (pp->dev == NULL) {
 		printk(KERN_ERR "%s: can't create netdevice\n", __func__);
 		mv_eth_priv_cleanup(pp);
 		return -EIO;
 	}
-	pp->dev = mv_net_devs[dev_i];
 	/* Default NAPI initialization */
 	/* Create one group for this port, that contains all RXQs and all CPUs - every cpu can process all RXQs */
 	if (pp->flags & MV_ETH_F_CONNECT_LINUX) {
@@ -2866,9 +2854,6 @@ static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 				mv_eth_napi_set_rxq_affinity(pp->port, 0, (1 << MV_ETH_MAX_RXQ) - 1))
 			return -EIO;
 	}
-	dev_i++;
-
-	mv_net_devs_num = dev_i;
 
 	if (mv_eth_pnc_ctrl_en) {
 		/* Init classifer MTU */
@@ -2980,14 +2965,6 @@ static int	mv_eth_shared_probe(void)
 
 	memset(mv_eth_ports, 0, size);
 
-	/* Allocate array of pointers to struct net_device */
-	size = mv_net_devs_max * sizeof(struct net_device *);
-	mv_net_devs = mvOsMalloc(size);
-	if (!mv_net_devs)
-		goto oom;
-
-	memset(mv_net_devs, 0, size);
-
 	/* Allocate aggregated TXQs control */
 	size = CONFIG_NR_CPUS * sizeof(struct aggr_tx_queue);
 	aggr_txqs = mvOsMalloc(size);
@@ -3024,9 +3001,6 @@ oom:
 	if (mv_eth_ports)
 		mvOsFree(mv_eth_ports);
 
-	if (mv_net_devs)
-		mvOsFree(mv_net_devs);
-
 	if (aggr_txqs)
 		mvOsFree(aggr_txqs);
 
@@ -3046,10 +3020,6 @@ static int mv_eth_probe(struct platform_device *pdev)
 	if (!mv_eth_initialized) {
 
 		mv_eth_ports_num = mvCtrlEthMaxPortGet();
-		mv_net_devs_max = mv_eth_ports_num;
-#ifdef CONFIG_MV_ETH_SWITCH
-		mv_net_devs_max += (CONFIG_MV_ETH_SWITCH_NETDEV_NUM - 1);
-#endif /* CONFIG_MV_ETH_SWITCH */
 
 		if (mv_eth_shared_probe())
 			return -ENODEV;
@@ -3167,10 +3137,12 @@ TODO:change
 
 bool mv_eth_netdev_find(unsigned int dev_idx)
 {
-	int i;
+	int port;
+
+	for (port = 0; port < mv_eth_ports_num; port++) {
+		struct eth_port *pp = mv_eth_port_by_id(port);
 
-	for (i = 0; i < mv_net_devs_num; i++) {
-		if (mv_net_devs && mv_net_devs[i] && (mv_net_devs[i]->ifindex == dev_idx))
+		if (pp && pp->dev && (pp->dev->ifindex == dev_idx))
 			return true;
 	}
 	return false;
@@ -4318,6 +4290,7 @@ void mv_eth_netdev_print(struct net_device *dev)
 
 	printk(KERN_ERR "flags=0x%x, gflags=0x%x: running=%d, oper_up=%d\n",
 			(unsigned int)(dev->flags), (unsigned int)(dev->flags), netif_running(dev), netif_oper_up(dev));
+
 	if (mv_eth_netdev_find(dev->ifindex)) {
 		struct eth_netdev *pdev = MV_DEV_PRIV(dev);
 
@@ -4352,7 +4325,7 @@ void mv_eth_netdev_print(struct net_device *dev)
 
 void mv_eth_status_print(void)
 {
-	printk(KERN_ERR "totals: ports=%d, devs=%d\n", mv_eth_ports_num, mv_net_devs_num);
+	printk(KERN_ERR "totals: ports=%d\n", mv_eth_ports_num);
 
 #ifdef CONFIG_NET_SKB_RECYCLE
 	printk(KERN_ERR "SKB recycle = %s\n", mv_ctrl_recycle ? "Enabled" : "Disabled");
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
index bfbbcf3..c3d430c 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
@@ -751,7 +751,6 @@ MV_STATUS   mv_eth_rx_time_coal_set(int port, int rxq, MV_U32 value);
 MV_STATUS   mv_eth_tx_done_ptks_coal_set(int port, int txp, int txq, MV_U32 value);
 
 struct eth_port     *mv_eth_port_by_id(unsigned int port);
-struct net_device   *mv_eth_netdev_by_id(unsigned int idx);
 bool                 mv_eth_netdev_find(unsigned int if_index);
 void                 mv_eth_netdev_set_features(struct net_device *dev);
 
-- 
1.7.5.4

