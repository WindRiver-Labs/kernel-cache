From ba58b6bc4254f39bc7e61cd29ceb126fc83b7be6 Mon Sep 17 00:00:00 2001
From: Uri Eliyahu <uriel@marvell.com>
Date: Wed, 29 Jan 2014 17:54:10 +0200
Subject: [PATCH 1323/1825] pp3: compile linux driver with new structures

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 2903f1a738a4f3874d951b6297089fb756941132

Change-Id: Id1c46a835df542e99d3747a199c3846da2f21812
Signed-off-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5375
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.c   |  134 ++++++----------
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.h   |  177 +-------------------
 .../marvell/pp3/net_dev/mv_netdev_structs.h        |   63 ++++++--
 3 files changed, 102 insertions(+), 272 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
index 4119982..f978163 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
@@ -17,42 +17,36 @@
 #include "hmac/mv_hmac.h"
 #include "hmac/mv_hmac_bm.h"
 #include "mv_netdev.h"
+#include "mv_netdev_structs.h"
 
 /* global data */
-static int mv_eth_initialized;
-static int mv_eth_ports_num;
+struct pp3_dev_priv **pp3_ports;
+struct pp3_group_stats **pp3_groups;
+struct pp3_cpu *pp3_cpus;
+static int pp3_ports_num;
+static int pp3_initialized;
 
-struct eth_port **mv_eth_ports;
 
-static int mv_eth_config_get(struct platform_device *pdev, u8 *mac_addr)
-{
-	struct mv_pp3_port_data *plat_data = (struct mv_pp3_port_data *)pdev->dev.platform_data;
-
-	if (mac_addr)
-		memcpy(mac_addr, plat_data->mac_addr, MV_MAC_ADDR_SIZE);
-
-	return plat_data->mtu;
-}
-
-/***************************************************************
- * mv_eth_netdev_init -- Allocate and initialize net_device    *
- *                   structure                                 *
+/****************************************************************
+ * mv_pp3_netdev_init						*
+ *	Allocate and initialize net_device structures		*
  ***************************************************************/
-struct net_device *mv_eth_netdev_init(int mtu, u8 *mac, struct platform_device *pdev)
+
+struct net_device *mv_pp3_netdev_init(int mtu, u8 *mac, struct platform_device *pdev)
 {
 	struct net_device *dev;
-	struct eth_port *dev_priv;
+	struct pp3_dev_priv *dev_priv;
 	struct resource *res;
 
-	dev = alloc_etherdev_mq(sizeof(struct eth_port), CONFIG_MV_ETH_TXQ);
+	dev = alloc_etherdev_mq(sizeof(struct pp3_dev_priv), CONFIG_MV_ETH_TXQ);
 	if (!dev)
 		return NULL;
 
-	dev_priv = (struct eth_port *)netdev_priv(dev);
+	dev_priv = (struct pp3_dev_priv *)netdev_priv(dev);
 	if (!dev_priv)
 		return NULL;
 
-	memset(dev_priv, 0, sizeof(struct eth_port));
+	memset(dev_priv, 0, sizeof(struct pp3_dev_priv));
 
 	dev_priv->dev = dev;
 
@@ -62,12 +56,11 @@ struct net_device *mv_eth_netdev_init(int mtu, u8 *mac, struct platform_device *
 
 	dev->mtu = mtu;
 	memcpy(dev->dev_addr, mac, MV_MAC_ADDR_SIZE);
+
 	dev->tx_queue_len = CONFIG_MV_ETH_TXQ_DESC;
 	dev->watchdog_timeo = 5 * HZ;
 
-	/*dev->netdev_ops = &mv_eth_netdev_ops;*/
-
-	/*SET_ETHTOOL_OPS(dev, &mv_eth_tool_ops);*/
+	/* TODO: init eth_tools */
 
 	SET_NETDEV_DEV(dev, &pdev->dev);
 
@@ -75,32 +68,38 @@ struct net_device *mv_eth_netdev_init(int mtu, u8 *mac, struct platform_device *
 
 }
 
-static int mv_eth_load_network_interfaces(struct platform_device *pdev)
+static int mv_pp3_config_get(struct platform_device *pdev, unsigned char *mac_addr)
+{
+	struct mv_pp3_port_data *plat_data = (struct mv_pp3_port_data *)pdev->dev.platform_data;
+
+	if (mac_addr)
+		memcpy(mac_addr, plat_data->mac_addr, MV_MAC_ADDR_SIZE);
+
+	return plat_data->mtu;
+}
+
+static int mv_pp3_load_network_interfaces(struct platform_device *pdev)
 {
-	u32 port, phys_port;
 	int mtu;
-	struct eth_port *pp;
+	struct pp3_dev_priv *priv;
 	struct net_device *dev;
-	struct mv_pp3_port_data *plat_data = (struct mv_pp3_port_data *)pdev->dev.platform_data;
 	u8 mac[MV_MAC_ADDR_SIZE];
 
-	port = pdev->id;
-	phys_port = port; /*MV_PPV3_PORT_PHYS(port);*/
-	pr_info("  o Loading network interface(s) for port #%d: mtu=%d\n", port, plat_data->mtu);
+	mtu = mv_pp3_config_get(pdev, mac);
 
-	mtu = mv_eth_config_get(pdev, mac);
+	pr_info("  o Loading network interface(s) for port #%d: mtu=%d\n", pdev->id, mtu);
 
-	dev = mv_eth_netdev_init(mtu, mac, pdev);
+	dev = mv_pp3_netdev_init(mtu, mac, pdev);
 
 	if (dev == NULL) {
 		pr_err("\to %s: can't create netdevice\n", __func__);
 		return -EIO;
 	}
 
-	pp = (struct eth_port *)netdev_priv(dev);
-	pp->plat_data = plat_data;
+	priv = MV_PP3_PRIV(dev);
+	priv->plat_data = (struct mv_pp3_port_data *)pdev->dev.platform_data;
 
-	mv_eth_ports[port] = pp;
+	pp3_ports[pdev->id] = priv;
 
 	return 0;
 }
@@ -108,9 +107,7 @@ static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 /* Support per port for platform driver */
 static int mv_pp3_probe(struct platform_device *pdev)
 {
-	struct mv_pp3_port_data *plat_data = (struct mv_pp3_port_data *)pdev->dev.platform_data;
-
-	if (mv_eth_load_network_interfaces(pdev))
+	if (mv_pp3_load_network_interfaces(pdev))
 		return -ENODEV;
 
 	pr_info("Probing Marvell PPv3 Network Driver\n");
@@ -161,62 +158,29 @@ static struct platform_driver mv_pp3_driver = {
 */
 static int mv_pp3_shared_probe(struct platform_device *pdev)
 {
+	int size, ret;
 	struct mv_pp3_plat_data *plat_data = (struct mv_pp3_plat_data *)pdev->dev.platform_data;
-	struct resource *res;
-	int size;
 
-	int ret;
+	pp3_ports_num = plat_data->max_port;
 
-	ret = -EINVAL;
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (res == NULL)
-		goto out;
-/*
-	ret = -ENOMEM;
-	msp = kzalloc(sizeof(*msp), GFP_KERNEL);
-	if (msp == NULL)
-		goto out;
-*/
-	/*
-	 * Check whether the error interrupt is hooked up.
-	 */
-	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
-/*	if (res != NULL) {
-		int err;
-
-		err = request_irq(res->start, mv643xx_eth_err_irq,
-				  IRQF_SHARED, "mv643xx_eth", msp);
-		if (!err) {
-			writel(ERR_INT_SMI_DONE, msp->base + ERR_INT_MASK);
-			msp->err_interrupt = res->start;
-		}
-	}*/
-
-	mv_eth_ports_num = plat_data->max_port;
-	/*mv_eth_sysfs_init();*/
-	/*mv_eth_win_init();*/
-	/*mv_eth_config_show();*/
-
-	size = mv_eth_ports_num * sizeof(struct eth_port *);
-	mv_eth_ports = kzalloc(size, GFP_KERNEL);
-	if (!mv_eth_ports)
+	/* TODO:
+		init sysfs
+		init window */
+
+	size = pp3_ports_num * sizeof(struct pp3_dev_priv *);
+	pp3_ports = kzalloc(size, GFP_KERNEL);
+	if (!pp3_ports)
 		goto out;
 
-	memset(mv_eth_ports, 0, size);
+	memset(pp3_ports, 0, size);
 
-	/*if (mv_eth_bm_pools_init())
+	/* if (mv_eth_bm_pools_init())
 		goto oom;*/
 
-	/* Initialize tasklet for handle link events */
-	/*tasklet_init(&link_tasklet, mv_eth_link_tasklet, 0);*/
-
-	/* request IRQ for link interrupts from GOP */
-	/*if (request_irq(IRQ_GLOBAL_GOP, mv_eth_link_isr, (IRQF_DISABLED|IRQF_SAMPLE_RANDOM), "mv_eth_link", NULL))
-		printk(KERN_ERR "%s: Could not request IRQ for GOP interrupts\n", __func__);*/
+	/* TODO: set links interrupt */
 
-	mv_eth_initialized = 1;
+	pp3_initialized = 1;
 
-	/*platform_set_drvdata(pdev, msp);*/
 
 	return 0;
 
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
index 77c7fcb..3d95885 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
@@ -34,17 +34,6 @@ disclaimer.
 #include <linux/mv_pp3.h>
 #include <net/ip.h>
 
-/*
-#include "mvCommon.h"
-#include "mvOs.h"
-#include "mv802_3.h"
-#include "mvStack.h"*/
-/*
-#include "gbe/mvPp2Gbe.h"
-#include "bm/mvBmRegs.h"
-#include "bm/mvBm.h"
-*/
-
 /******************************************************
  * driver statistics control --                       *
  ******************************************************/
@@ -101,169 +90,5 @@ int mv_eth_skb_recycle(struct sk_buff *skb);
 #define mv_eth_is_recycle()     0
 #endif /* CONFIG_NET_SKB_RECYCLE */
 
-/******************************************************
- * rx / tx queues --                                  *
- ******************************************************/
-/*
- * Debug statistics
- */
-
-struct txq_stats {
-#ifdef CONFIG_MV_ETH_STAT_ERR
-	u32 txq_err;
-#endif /* CONFIG_MV_ETH_STAT_ERR */
-#ifdef CONFIG_MV_ETH_STAT_DBG
-	u32 txq_tx;
-	u32 txq_txreq; /*request reserved tx descriptors*/
-	u32 txq_txdone;
-#endif /* CONFIG_MV_ETH_STAT_DBG */
-};
-
-struct port_stats {
-
-#ifdef CONFIG_MV_ETH_STAT_ERR
-	u32 rx_error;
-	u32 tx_timeout;
-	u32 ext_stack_empty;
-	u32 ext_stack_full;
-	u32 state_err;
-#endif /* CONFIG_MV_ETH_STAT_ERR */
-
-#ifdef CONFIG_MV_ETH_STAT_INF
-	u32 irq[CONFIG_NR_CPUS];
-	u32 irq_err[CONFIG_NR_CPUS];
-	u32 poll[CONFIG_NR_CPUS];
-	u32 poll_exit[CONFIG_NR_CPUS];
-	u32 tx_done_timer_event[CONFIG_NR_CPUS];
-	u32 tx_done_timer_add[CONFIG_NR_CPUS];
-	u32 tx_done;
-	u32 link;
-	u32 netdev_stop;
-	u32 rx_buf_hdr;
-
-#ifdef CONFIG_MV_ETH_RX_SPECIAL
-	u32 rx_special;
-#endif /* CONFIG_MV_ETH_RX_SPECIAL */
-
-#ifdef CONFIG_MV_ETH_TX_SPECIAL
-	u32 tx_special;
-#endif /* CONFIG_MV_ETH_TX_SPECIAL */
-
-#endif /* CONFIG_MV_ETH_STAT_INF */
-
-#ifdef CONFIG_MV_ETH_STAT_DBG
-	u32 rxq[CONFIG_MV_ETH_RXQ];
-	u32 rx_tagged;
-	u32 rx_netif;
-	u32 rx_gro;
-	u32 rx_gro_bytes;
-	u32 rx_drop_sw;
-	u32 rx_csum_hw;
-	u32 rx_csum_sw;
-	u32 tx_csum_hw;
-	u32 tx_csum_sw;
-	u32 tx_skb_free;
-	u32 tx_sg;
-	u32 tx_tso;
-	u32 tx_tso_no_resource;
-	u32 tx_tso_bytes;
-	u32 ext_stack_put;
-	u32 ext_stack_get;
-#endif /* CONFIG_MV_ETH_STAT_DBG */
-};
-
-#define MV_ETH_TX_DESC_ALIGN		0x1f
-
-/* Masks used for pp->flags */
-#define MV_ETH_F_STARTED_BIT            0
-#define MV_ETH_F_RX_DESC_PREFETCH_BIT   1
-#define MV_ETH_F_RX_PKT_PREFETCH_BIT    2
-#define MV_ETH_F_CONNECT_LINUX_BIT      5 /* port is connected to Linux netdevice */
-#define MV_ETH_F_LINK_UP_BIT            6
-#define MV_ETH_F_IFCAP_NETMAP_BIT       15
-
-#define MV_ETH_F_STARTED                (1 << MV_ETH_F_STARTED_BIT)
-#define MV_ETH_F_RX_DESC_PREFETCH       (1 << MV_ETH_F_RX_DESC_PREFETCH_BIT)
-#define MV_ETH_F_RX_PKT_PREFETCH        (1 << MV_ETH_F_RX_PKT_PREFETCH_BIT)
-#define MV_ETH_F_CONNECT_LINUX          (1 << MV_ETH_F_CONNECT_LINUX_BIT)
-#define MV_ETH_F_LINK_UP                (1 << MV_ETH_F_LINK_UP_BIT)
-#define MV_ETH_F_IFCAP_NETMAP           (1 << MV_ETH_F_IFCAP_NETMAP_BIT)
-
-#ifdef CONFIG_MV_ETH_DEBUG_CODE
-/* Masks used for pp->dbg_flags */
-#define MV_ETH_F_DBG_RX_BIT         0
-#define MV_ETH_F_DBG_TX_BIT         1
-#define MV_ETH_F_DBG_DUMP_BIT       2
-#define MV_ETH_F_DBG_ISR_BIT        3
-#define MV_ETH_F_DBG_POLL_BIT       4
-#define MV_ETH_F_DBG_BUFF_HDR_BIT   5
-
-#define MV_ETH_F_DBG_RX            (1 << MV_ETH_F_DBG_RX_BIT)
-#define MV_ETH_F_DBG_TX            (1 << MV_ETH_F_DBG_TX_BIT)
-#define MV_ETH_F_DBG_DUMP          (1 << MV_ETH_F_DBG_DUMP_BIT)
-#define MV_ETH_F_DBG_ISR           (1 << MV_ETH_F_DBG_ISR_BIT)
-#define MV_ETH_F_DBG_POLL          (1 << MV_ETH_F_DBG_POLL_BIT)
-#define MV_ETH_F_DBG_BUFF_HDR      (1 << MV_ETH_F_DBG_BUFF_HDR_BIT)
-#endif /* CONFIG_MV_ETH_DEBUG_CODE */
-
-/* Masks used for cpu_ctrl->flags */
-#define MV_ETH_F_TX_DONE_TIMER_BIT  0
-
-#define MV_ETH_F_TX_DONE_TIMER		(1 << MV_ETH_F_TX_DONE_TIMER_BIT)	/* 0x01 */
-
-struct tx_queue {
-	struct mv_pp3_queue_ctrl	queue_ctrl;
-	int			port;
-	u8			txp;
-	u8			txq;
-	int			txq_size;
-	int			hwf_size;
-/*	struct txq_cpu_ctrl	txq_cpu[CONFIG_NR_CPUS];
-	spinlock_t		queue_lock;
-	MV_U32			txq_done_pkts_coal;
-	unsigned long		flags;*/
-};
-
-struct rx_queue {
-	struct mv_pp3_queue_ctrl	queue_ctrl;
-	int					port;
-	int					logic_queue;
-	int					frame_num;
-	int					queue_num;
-	int                 rxq_size;
-	unsigned int        rxq_pkts_coal;
-	unsigned int        rxq_time_coal;
-};
-
-struct eth_port {
-	int                      port;
-	struct mv_pp3_port_data *plat_data;
-	bool                     tagged; /* NONE/MH/DSA/EDSA/VLAN */
-	/*MV_PP3_PORT_CTRL    *port_ctrl;*/
-	struct rx_queue          *rxq_ctrl; /* array of logical queues */
-	int                       rxq_num;
-	struct tx_queue          *txq_ctrl;
-	/*int                       txp_num;*/
-	struct net_device      *dev;
-};
-
-struct napi_group_ctrl {
-	int			id;
-	u8			cpu_mask;
-	u16			rxq_mask;
-	u32			cause_rx_tx;
-	struct napi_struct	*napi;
-};
-
-struct cpu_ctrl {
-	struct eth_port		*pp;
-	struct napi_group_ctrl	*napi_group;
-	int			txq;
-	int			cpu;
-	struct timer_list	tx_done_timer;
-	unsigned long		flags;
-};
-
-#define MV_ETH_PRIV(dev)	((struct eth_port *)(netdev_priv(dev)))
-
 #endif /* __mv_netdev_h__ */
+
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h
index 51eedf6..5829d7e 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h
@@ -32,16 +32,48 @@ disclaimer.
 /* according to num of emac units */
 #define MAX_ETH_DEVICES	4
 
+#define MV_PP3_PRIV(dev)	((struct pp3_dev_priv *)(netdev_priv(dev)))
+
 struct pp3_dev_priv {
 	int			index;
-	struct pp3_port_data *plat_data;
+	struct mv_pp3_port_data *plat_data;
 	struct pp3_group	*group_ctrl[CONFIG_NR_CPUS];
-	struct net_device      *dev;
+	struct net_device	*dev;
 	unsigned long		flags;
 	unsigned char		emac_map;
 };
 
-#define MV_PP3_PRIV(dev)	((struct mv_pp3_dev_priv *)(netdev_priv(dev)))
+/* Masks used for pp3_dev_priv flags */
+#define MV_ETH_F_STARTED_BIT		0
+#define MV_ETH_F_LINK_UP_BIT		1
+#define MV_ETH_F_CONNECT_LINUX_BIT	2
+#define MV_ETH_F_DBG_RX_BIT		3
+#define MV_ETH_F_DBG_TX_BIT		4
+#define MV_ETH_F_DBG_DUMP_BIT		5
+#define MV_ETH_F_DBG_ISR_BIT		6
+#define MV_ETH_F_DBG_POLL_BIT		7
+#define MV_ETH_F_DBG_BUFF_HDR_BIT	8
+
+
+#define MV_ETH_F_STARTED                (1 << MV_ETH_F_STARTED_BIT)
+#define MV_ETH_F_LINK_UP                (1 << MV_ETH_F_LINK_UP_BIT)
+#define MV_ETH_F_CONNECT_LINUX          (1 << MV_ETH_F_CONNECT_LINUX_BIT)
+#define MV_ETH_F_DBG_RX			(1 << MV_ETH_F_DBG_RX_BIT)
+#define MV_ETH_F_DBG_TX			(1 << MV_ETH_F_DBG_TX_BIT)
+#define MV_ETH_F_DBG_DUMP		(1 << MV_ETH_F_DBG_DUMP_BIT)
+#define MV_ETH_F_DBG_ISR		(1 << MV_ETH_F_DBG_ISR_BIT)
+#define MV_ETH_F_DBG_POLL		(1 << MV_ETH_F_DBG_POLL_BIT)
+#define MV_ETH_F_DBG_BUFF_HDR		(1 << MV_ETH_F_DBG_BUFF_HDR_BIT)
+
+
+
+struct pp3_group_stats {
+	unsigned int irq;
+	unsigned int irq_err;
+	unsigned int rx_err;
+	unsigned int rx_netif;
+	unsigned int rx_drop;
+};
 
 struct pp3_group {
 	int	rxqs_num;
@@ -54,9 +86,11 @@ struct pp3_group {
 	struct	pp3_bm_pool	*long_pool;
 	struct	pp3_bm_pool	*short_pool;
 	struct	pp3_bm_pool	*lro_pool;
+	struct	pp3_group_stats	stats;
 };
 
 struct pp3_cpu {
+	int	cpu;
 	int	frames_num;
 /*
 	not sure that pp3_frame is necessary
@@ -69,27 +103,27 @@ struct pp3_cpu {
 	struct	pp3_queue	*fw_msg_queue;
 };
 
-struct pp3_queue {
-	int frame;
-	struct pp3_rx_queue rxq;
-	struct pp3_tx_queue txq;
+struct pp3_xq_stats {
+	u32 success;
+	u32 err;
 };
 
 
-
 enum  pp3_q_type {
 	PP3_Q_TYPE_BM = 0,
 	PP3_Q_TYPE_QM = 1
-}
+};
 
 struct pp3_rxq {
+	int	frame_num;
 	int	logic_q;
 	int	phys_q;
 	enum	pp3_q_type		type;
 	struct	mv_pp3_queue_ctrl	*queue;
-	struct	pp3_dev_priv		*dev_priv
+	struct	pp3_dev_priv		*dev_priv;
 	int	pkt_coal;
 	int	time_coal;
+	struct	pp3_xq_stats		stats;
 	/*
 	not sure yet about this
 	struct	pp3_frame	*frame_ctrl;
@@ -97,17 +131,24 @@ struct pp3_rxq {
 };
 
 struct pp3_txq {
+	int	frame_num;
 	int	logic_q;
 	int	phys_q;
 	enum	pp3_q_type		type;
 	struct	mv_pp3_queue_ctrl	*queue;
-	struct	pp3_dev_priv		*dev_priv
+	struct	pp3_dev_priv		*dev_priv;
+	struct	pp3_xq_stats		stats;
 	/*
 	not sure yet about this
 	struct	pp3_frame	*frame_ctrl;
 	*/
 };
 
+struct pp3_queue {
+	int frame;
+	struct pp3_rxq rxq;
+	struct pp3_txq txq;
+};
 /* TODO define bm_pool */
 
 #endif /* __mv_netdev_structs_h__ */
-- 
1.7.5.4

