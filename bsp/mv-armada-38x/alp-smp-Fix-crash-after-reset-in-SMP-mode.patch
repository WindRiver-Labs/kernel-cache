From f69ff72ddcff6157c52f010f23a6b622d0247641 Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Wed, 3 Jul 2013 11:37:16 +0300
Subject: [PATCH 0820/1825] alp: smp: Fix crash after reset in SMP mode

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 7eeff1038d239ed7aee5a53c56f52f930d6657ca

	The secondary kernel init calls v7_flush_dcache_all before it enables
	the L1; however, the L1 comes out of reset in an undefined state, so
	the clean + invalidate performed by v7_flush_dcache_all causes a bunch
	of cache lines with uninitialized data and uninitialized tags to get
	written out to memory, which does really unpleasant things to the main
	processor.  We fix this by performing an invalidate, rather than a
	clean + invalidate, before jumping into the kernel.

Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Change-Id: Ieda25231d720e94b3b32b05638c04ef7172c4f3b
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2605
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/headsmp.S |   43 ++++++++++++++++++++++++++++++++++++++
 1 files changed, 43 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-avantalp/headsmp.S b/arch/arm/mach-avantalp/headsmp.S
index 52ee3a0..36797e0 100644
--- a/arch/arm/mach-avantalp/headsmp.S
+++ b/arch/arm/mach-avantalp/headsmp.S
@@ -22,10 +22,53 @@ ENDPROC(alp_smp_cpu1_enable_code_end)
 #endif /* CONFIG_ALP_CPU1_ENABLE_WA */
 
 /*
+ *   The secondary kernel init calls v7_flush_dcache_all before it enables
+ *   the L1; however, the L1 comes out of reset in an undefined state, so
+ *   the clean + invalidate performed by v7_flush_dcache_all causes a bunch
+ *   of cache lines with uninitialized data and uninitialized tags to get
+ *   written out to memory, which does really unpleasant things to the main
+ *   processor.  We fix this by performing an invalidate, rather than a
+ *   clean + invalidate, before jumping into the kernel.
+ */
+ENTRY(v7_invalidate_l1)
+	mov	r0, #0
+	mcr	p15, 2, r0, c0, c0, 0
+	mrc	p15, 1, r0, c0, c0, 0
+
+	ldr	r1, =0x7fff
+	and	r2, r1, r0, lsr #13
+
+	ldr	r1, =0x3ff
+
+	and	r3, r1, r0, lsr #3  @ NumWays - 1
+	add	r2, r2, #1          @ NumSets
+
+	and	r0, r0, #0x7
+	add	r0, r0, #4          @ SetShift
+
+	clz	r1, r3              @ WayShift
+	add	r4, r3, #1          @ NumWays
+1:	sub	r2, r2, #1          @ NumSets--
+	mov	r3, r4              @ Temp = NumWays
+2:	subs	r3, r3, #1          @ Temp--
+	mov	r5, r3, lsl r1
+	mov	r6, r2, lsl r0
+	orr	r5, r5, r6          @ Reg = (Temp<<WayShift)|(NumSets<<SetShift)
+	mcr	p15, 0, r5, c7, c6, 2
+	bgt	2b
+	cmp	r2, #0
+	bgt	1b
+	dsb
+	isb
+	mov	pc, lr
+ENDPROC(v7_invalidate_l1)
+
+/*
  * This provides a "holding pen" into which all secondary cores are held
  * until we're ready for them to initialise.
  */
 ENTRY(alp_secondary_startup)
+	bl	v7_invalidate_l1
 	mrc	p15, 0, r0, c0, c0, 5
 	and	r0, r0, #15
 	adr	r4, 1f
-- 
1.7.5.4

