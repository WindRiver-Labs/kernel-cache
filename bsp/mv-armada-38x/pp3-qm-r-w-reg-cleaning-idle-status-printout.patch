From 10f9df622ce1d8329643699e8d7b1b375bf45598 Mon Sep 17 00:00:00 2001
From: Dovrat <dovrat@marvell.com>
Date: Wed, 23 Apr 2014 09:07:24 +0300
Subject: [PATCH 1567/1825] pp3: qm: r/w reg cleaning, idle status printout

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit f9ce67451d3c438eee69abe7e7e17f61295ee14f

Change-Id: I0eb1946a4de9d970709382fc91dffddd0f1d2cb1
Signed-off-by: Dovrat <dovrat@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7163
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/qm/mv_qm.c |  172 +++++++++------------------
 1 files changed, 57 insertions(+), 115 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
index 650f444..05954b9 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
@@ -1821,50 +1821,45 @@ int qm_idle_status_get(u32 *status)
 
 	pr_info("\n");
 
-	pr_info("\t idle_status.gpm_pl_cache_is_empty  = 0x%08X\n",
-				reg_idle_status.gpm_pl_cache_is_empty);
-	pr_info("\t idle_status.gpm_pl_cache_is_full  = 0x%08X\n",
-				reg_idle_status.gpm_pl_cache_is_full);
-	pr_info("\t idle_status.gpm_qe_cache_is_empty  = 0x%08X\n",
-				reg_idle_status.gpm_qe_cache_is_empty);
-	pr_info("\t idle_status.gpm_qe_cache_is_full  = 0x%08X\n",
-				reg_idle_status.gpm_qe_cache_is_full);
-	pr_info("\t idle_status.dram_pl_cache_is_empty  = 0x%08X\n",
-				reg_idle_status.dram_pl_cache_is_empty);
-	pr_info("\t idle_status.dram_pl_cache_is_full  = 0x%08X\n",
-				reg_idle_status.dram_pl_cache_is_full);
-	pr_info("\t idle_status.dram_qe_cache_is_empty  = 0x%08X\n",
-				reg_idle_status.dram_qe_cache_is_empty);
-	pr_info("\t idle_status.dram_qe_cache_is_full  = 0x%08X\n",
-				reg_idle_status.dram_qe_cache_is_full);
-	pr_info("\t idle_status.dram_fifo_is_empty  = 0x%08X\n",
-				reg_idle_status.dram_fifo_is_empty);
-	pr_info("\t idle_status.mac_axi_enq_channel_is_empty  = 0x%08X\n",
-				reg_idle_status.mac_axi_enq_channel_is_empty);
-	pr_info("\t idle_status.NSS_axi_enq_channel_is_empty  = 0x%08X\n",
-				reg_idle_status.NSS_axi_enq_channel_is_empty);
-	pr_info("\t idle_status.gpm_ppe_read_fifo_is_empty  = 0x%08X\n",
-				reg_idle_status.gpm_ppe_read_fifo_is_empty);
-	pr_info("\t idle_status.ppe_gpm_pl_write_fifo_is_empty  = 0x%08X\n",
-				reg_idle_status.ppe_gpm_pl_write_fifo_is_empty);
-	pr_info("\t idle_status.ppe_gpm_qe_write_fifo_is_empty  = 0x%08X\n",
-				reg_idle_status.ppe_gpm_qe_write_fifo_is_empty);
-	pr_info("\t idle_status.ppe_ru_read_fifo_is_empty  = 0x%08X\n",
-				reg_idle_status.ppe_ru_read_fifo_is_empty);
-	pr_info("\t idle_status.ppe_ru_write_fifo_is_empty  = 0x%08X\n",
-				reg_idle_status.ppe_ru_write_fifo_is_empty);
-	pr_info("\t idle_status.ru_ppe_read_fifo_is_empty  = 0x%08X\n",
-				reg_idle_status.ru_ppe_read_fifo_is_empty);
-	pr_info("\t idle_status.dram_fifo_fsm_state_is_idle  = 0x%08X\n",
-				reg_idle_status.dram_fifo_fsm_state_is_idle);
-	pr_info("\t idle_status.qeram_init_fsm_state_is_idle  = 0x%08X\n",
-				reg_idle_status.qeram_init_fsm_state_is_idle);
+	pr_info("\t idle_status.gpm_pl_cache_is_empty  = %d\n",
+				((reg_idle_status.gpm_pl_cache_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.gpm_pl_cache_is_full  = %d\n",
+				((reg_idle_status.gpm_pl_cache_is_full == 0) ? 0 : 1));
+	pr_info("\t idle_status.gpm_qe_cache_is_empty  = %d\n",
+				((reg_idle_status.gpm_qe_cache_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.gpm_qe_cache_is_full  = %d\n",
+				((reg_idle_status.gpm_qe_cache_is_full == 0) ? 0 : 1));
+	pr_info("\t idle_status.dram_pl_cache_is_empty  = %d\n",
+				((reg_idle_status.dram_pl_cache_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.dram_pl_cache_is_full  = %d\n",
+				((reg_idle_status.dram_pl_cache_is_full == 0) ? 0 : 1));
+	pr_info("\t idle_status.dram_qe_cache_is_empty  = %d\n",
+				((reg_idle_status.dram_qe_cache_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.dram_qe_cache_is_full  = %d\n",
+				((reg_idle_status.dram_qe_cache_is_full == 0) ? 0 : 1));
+	pr_info("\t idle_status.dram_fifo_is_empty  = %d\n",
+				((reg_idle_status.dram_fifo_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.mac_axi_enq_channel_is_empty  = %d\n",
+				((reg_idle_status.mac_axi_enq_channel_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.NSS_axi_enq_channel_is_empty  = %d\n",
+				((reg_idle_status.NSS_axi_enq_channel_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.gpm_ppe_read_fifo_is_empty  = %d\n",
+				((reg_idle_status.gpm_ppe_read_fifo_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.ppe_gpm_pl_write_fifo_is_empty  = %d\n",
+				((reg_idle_status.ppe_gpm_pl_write_fifo_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.ppe_gpm_qe_write_fifo_is_empty  = %d\n",
+				((reg_idle_status.ppe_gpm_qe_write_fifo_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.ppe_ru_read_fifo_is_empty  = %d\n",
+				((reg_idle_status.ppe_ru_read_fifo_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.ppe_ru_write_fifo_is_empty  = %d\n",
+				((reg_idle_status.ppe_ru_write_fifo_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.ru_ppe_read_fifo_is_empty  = %d\n",
+				((reg_idle_status.ru_ppe_read_fifo_is_empty == 0) ? 0 : 1));
+	pr_info("\t idle_status.dram_fifo_fsm_state_is_idle  = %d\n",
+				((reg_idle_status.dram_fifo_fsm_state_is_idle == 0) ? 0 : 1));
+	pr_info("\t idle_status.qeram_init_fsm_state_is_idle  = %d\n",
+				((reg_idle_status.qeram_init_fsm_state_is_idle == 0) ? 0 : 1));
 
-/*
-	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)status);
-	if (rc != OK)
-		return rc;
-*/
 	return rc;
 }
 
@@ -1924,57 +1919,41 @@ int	qm_ru_class_cmd_set(u32 host, u32 host_class, u32 host_sid, u32 cmd)
 }
 
 
-
-/*	rc = qm_register_read(qm.ql.mem2mg_resp_data_ll, (u32 *)&reg_mem2mg_resp_data_ll); if (rc) return rc;*/
-
-
-#define	COMPLETE_HW_WRITE
-
-#ifdef my_RW_DEBUG_UNITEST
 int qm_register_read(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPtr)
 {
 	int rc = OK;
-	u32 *temp;
-	u32 i;
+	/*u32 *temp;
+	u32 i;*/
 
-/*	In the future we can also add printing of the fields of the register */
-/*	pr_info(" DUMMY_PRINT  read by function <%s>,  result = 0x%08X\n", __func__, *(u32 *)dataPtr);
+	mv_pp3_hw_read(base_address+offset, wordsNumber, dataPtr);
+	if (rc != OK)
+		return rc;
 
-	bm_register_name_get(base_address, offset, reg_name);
-	pr_info("[QM]  READ_REG add = 0x%08X : name = %s : value =", base_address, reg_name);
-*/
+	/*
+	qm_register_name_get(base_address, offset, reg_name);
+	pr_info("[QM] READ_REG add = 0x%08X : name = %s : value =", base_address, reg_name);
 	temp = dataPtr;
 	for (i = 0; i < wordsNumber; i++) {
-		/*
-		pr_info(" 0x%08X", *(u32 *)temp);*/
-		*(u32 *)temp = 0;
+		pr_info(" 0x%08X", *(u32 *)temp);
 		temp++;
 	}
 	pr_info("\n");
-/*	return OK;	 */
-/*
-	rc = mv_pp3_hw_read(base_address+offset, wordsNumber, dataPtr);
-	if (rc != OK) {
-		pr_info(" Not Available\n");
-		return rc;
-	}
-*/
-/*	if (rc != OK)
-		return rc;*/
-
-	COMPLETE_HW_WRITE
-	rc = OK;
+	*/
 	return rc;
 }
 
 int qm_register_write(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPtr)
 {
-	char reg_name[50];
 	int rc = OK;
-	u32 *temp;
-	u32 i;
+	/*u32 *temp;
+	u32 i;*/
 
-	bm_register_name_get(base_address, offset, reg_name);
+	mv_pp3_hw_write(base_address+offset, wordsNumber, dataPtr);
+	if (rc != OK)
+		return rc;
+
+	/*
+	qm_register_name_get(base_address, offset, reg_name);
 	pr_info("[QM] WROTE_REG add = 0x%08X : name = %s : value =", base_address, reg_name);
 	temp = dataPtr;
 	for (i = 0; i < wordsNumber; i++) {
@@ -1982,46 +1961,9 @@ int qm_register_write(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPt
 		temp++;
 	}
 	pr_info("\n");
-
-/*	pr_info(" DUMMY_PRINT, result=%d\n", *(u32 *)dataPtr);*/
-/*	pr_info(" DUMMY_PRINT, result = 0x%08X\n", *(u32 *)dataPtr);*/
-/*	pr_info(" DUMMY_PRINT write by function <%s>, result = 0x%08X\n", __func__, *(u32 *)dataPtr);*/
-
-/*	return OK;	 */
-/*
-	rc = mv_pp3_hw_write(base_address+offset, wordsNumber, dataPtr);
-	if (rc != OK)
-		return rc;
-*/
-
-	COMPLETE_HW_WRITE
-	return rc;
-}
-#else
-int qm_register_read(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPtr)
-{
-	int rc = OK;
-
-	mv_pp3_hw_read(base_address+offset, wordsNumber, dataPtr);
-	if (rc != OK)
-		return rc;
-
-	COMPLETE_HW_WRITE
-	return rc;
-}
-
-int qm_register_write(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPtr)
-{
-	int rc = OK;
-
-	mv_pp3_hw_write(base_address+offset, wordsNumber, dataPtr);
-	if (rc != OK)
-		return rc;
-
-	COMPLETE_HW_WRITE
+	*/
 	return rc;
 }
-#endif
 
 void qm_register_register_fields_print(u32 base_address, u32 value)
 {
-- 
1.7.5.4

