From d186432ab2919d5ba1e47a71a8084412b7607c43 Mon Sep 17 00:00:00 2001
From: Dovrat <dovrat@marvell.com>
Date: Tue, 8 Apr 2014 16:12:11 +0300
Subject: [PATCH 1542/1825] changed bm sysfs commands to be more readable uses
 scnprintf instead of sprintf

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 036eb29c956244ef7dadab75ec2fba5ac0393576

Change-Id: Ia0630f8c9e04e89358c8da5f0def4e3982a2b487
Signed-off-by: Dovrat <dovrat@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6997
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/bm/mv_bm_sysfs.c |  361 ++++++++++-----------
 1 files changed, 166 insertions(+), 195 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/bm/mv_bm_sysfs.c b/drivers/net/ethernet/marvell/pp3/bm/mv_bm_sysfs.c
index fbe6fdc..b47d162 100644
--- a/drivers/net/ethernet/marvell/pp3/bm/mv_bm_sysfs.c
+++ b/drivers/net/ethernet/marvell/pp3/bm/mv_bm_sysfs.c
@@ -67,8 +67,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "bm/mv_bm.h"
 #include "bm/mv_bm_regs.h"
 
-static struct  platform_device *neta_sysfs;
-
 /*
 #define PR_ERR_CODE(_rc, _func)	\
 {								\
@@ -78,7 +76,7 @@ static struct  platform_device *neta_sysfs;
 */
 #define PR_ERR_CODE(_rc)	\
 {							\
-	pr_err("%s: error code = 0x%08X on illegal operation in function <%s>\n", __func__, _rc, attr->attr.name);	\
+	pr_err("%s: error code = 0x%08X in function <%s>\n", __func__, _rc, attr->attr.name);	\
 }
 /*
 	pr_err("%s: illegal operation in function <%s> at line %05d in file <%s>, error code = 0x%08X\n", __func__, attr->attr.name, __LINE__, __FILE__, rc);	\
@@ -100,55 +98,63 @@ static struct  platform_device *neta_sysfs;
 #endif
 
 
-static ssize_t mv_bm_help(char *buf)
+static ssize_t mv_bm_help(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "cat  status                            - show BM status\n");
-	off += sprintf(buf+off, "echo > bm_open                         - Init BM registers\n");
-	off += sprintf(buf+off, "echo > bm_attr_all_pools_def_set             - configures BM read/write default attributes\n");
-	off += sprintf(buf+off, "echo rD wD rC wC rQ wQ > bm_attr_qm_pool_set - configures BM read/write attributes for qm pools\n");
-/*      : o += sprintf(b+o, "echo rD wD rC wC rQ wQ > bm_attr_gp_pool_set - configures BM read/write attributes for gp pools\n"); */
-	off += sprintf(buf+off, "echo rD wD rC wC rQ wQ > bm_attr_gp_pool_set - configures BM read/write attributes for gp pools\n");
-	off += sprintf(buf+off, "echo > bm_enable_status_get                  - Get BM enable status\n");
-	off += sprintf(buf+off, "echo nb > bm_qm_gpm_pools_def_quick_init     - Initiates of GPM pools with default values\n");
-	off += sprintf(buf+off, "echo nb > bm_qm_dram_pools_def_quick_init    - Initiates of DRAM pools with default values\n");
-	off += sprintf(buf+off, "echo nb et ft id ca cot cit, cnb > bm_qm_gpm_pools_quick_init  - Initiates QM GPM pools\n");
-	off += sprintf(buf+off, "echo nb et ft id ca cot cit, cnb > bm_qm_dram_pools_quick_init - Initiates QM DRAM pools\n");
-	off += sprintf(buf+off, "echo p > bm_pool_quick_init_status_get       - Get pool quick init status\n");
-	off += sprintf(buf+off, "echo p nb pm > bm_gp_pool_def_basic_init     - Basic init of gp pools with default values\n");
-	off += sprintf(buf+off, "echo p nb ps pp et ft id ca cot cit cnb > bm_gp_pool_basic_init - Basic init of gp pools\n");
-	off += sprintf(buf+off, "echo > bm_enable                            - Global enable BM\n");
-	off += sprintf(buf+off, "echo > bm_disable                           - Global disable BM\n");
-	off += sprintf(buf+off, "echo p > bm_pool_fill_level_get             - gives fill level of pool in DRAM\n");
-	off += sprintf(buf+off, "echo id > bm_vmid_set                       - Set BM VMID\n");
-	off += sprintf(buf+off, "echo p nb fl pm > bm_gp_pool_def_quick_init - Configure BM registers and allocate memory for pools with default values\n");
-	off += sprintf(buf+off, "echo p nb fl ps pp et at cid ca cot cit cnb > bm_gp_pool_quick_init - Configure BM registers and allocate memory for pools\n");
-	off += sprintf(buf+off, "echo > bm_global_registers_dump        - Print all global registers\n");
-	off += sprintf(buf+off, "echo > bm_pool_registers_dump pool     - Print values of all BM pool registers\n");
-	off += sprintf(buf+off, "echo > bm_bank_registers_dump bank     - Print values of all BM bank registers\n");
-	off += sprintf(buf+off, "echo > bm_cache_memory_dump bank       - Print all 512 lines of cache per input bank sram_b0...b4_cache_mem\n");
-	off += sprintf(buf+off, "echo > bm_idle_status_get              - Read BM idle status\n");
-	off += sprintf(buf+off, "echo p pn dpe dpf > bm_pool_status_get - Get status per pool: pool_nempty, dpool_ae, dpool_af\n");
-	off += sprintf(buf+off, "echo > bm_idle_debug                   - Print several registers status that gives indication why BM is busy\n");
-	off += sprintf(buf+off, "echo > bm_error_dump                   - Print several registers status that gives indication why BM is busy\n");
-	off += sprintf(buf+off, "echo p nb > bm_pool_memory_fill         - Fill memory of pool with PE index\n");
-	off += sprintf(buf+off, "echo p nb ps et ft > bm_pool_dram_set   - Configure BM with Fill level of pool in DRAM\n");
-	off += sprintf(buf+off, "echo p nb ps qi > bm_pool_fill_level_set      - Configure BM with Fill level of pool in DRAM\n");
-	off += sprintf(buf+off, "echo p qi > bm_pool_enable                    - Enables BM pool\n");
-	off += sprintf(buf+off, "echo p ps > bm_gp_pool_pe_size_set            - Set PE pointer size in general purpose pool\n");
-	off += sprintf(buf+off, "echo p pp > bm_gp_pool_pair_set               - Configure if pool is defined to work in pairs\n");
-	off += sprintf(buf+off, "echo p cid ca cot cit cnb > bm_pool_cache_set - Configure pool cache parameters\n");
-	off += sprintf(buf+off, "echo pool > bm_pool_disable                   - Set Pool to disable\n");
-/*
-	off += sprintf(buf+off, "echo > qm_gpm_init  b qah qal pah pal  - init QM QM GPM pools (0,1)\n");
-	off += sprintf(buf+off, "echo > qm_dram_init b qah qal pah pal  - init QM DRAM pools (2,3)\n");
-*/
-	off += sprintf(buf+off, "echo ba, ofs, wN, dP > bm_register_read  - Read register from BM units\n");
-	off += sprintf(buf+off, "echo ba, ofs, wN, dP > bm_register_write - Write register in BM units\n");
-	off += sprintf(buf+off, "\n");
-
-	return off;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+
+	o += scnprintf(b+o, s-o, "cat status                               - show BM status\n");
+	o += scnprintf(b+o, s-o, "echo      > open                         - Open session with BM\n");
+	o += scnprintf(b+o, s-o, "echo      > attr_all_pools_def_set       - Configures BM read/write def attr\n");
+	o += scnprintf(b+o, s-o, "echo      > enable_status_get            - Get BM enable status\n");
+	o += scnprintf(b+o, s-o, "echo      > enable                       - enable BM\n");
+	o += scnprintf(b+o, s-o, "echo      > disable                      - disable BM\n");
+	o += scnprintf(b+o, s-o, "echo      > global_registers_dump        - Print global registers\n");
+	o += scnprintf(b+o, s-o, "echo      > pool_registers_dump pool     - Print all BM pool registers\n");
+	o += scnprintf(b+o, s-o, "echo      > bank_registers_dump bank     - Print all BM bank registers\n");
+	o += scnprintf(b+o, s-o, "echo      > cache_memory_dump bank       - Print 512 cache lines per in bank\n");
+	o += scnprintf(b+o, s-o, "echo      > idle_status_get              - Read BM idle status\n");
+	o += scnprintf(b+o, s-o, "echo      > idle_debug                   - Print busy indication registers\n");
+	o += scnprintf(b+o, s-o, "echo      > error_dump                   - Print busy reason registers\n");
+	o += scnprintf(b+o, s-o, "echo nb   > qm_gpm_pools_def_quick_init  - Initiates GPM pools\n");
+	o += scnprintf(b+o, s-o, "echo nb   > qm_dram_pools_def_quick_init - Initiates DRAM pools\n");
+	o += scnprintf(b+o, s-o, "echo p    > pool_quick_init_status_get   - Get pool quick init status\n");
+	o += scnprintf(b+o, s-o, "echo p    > pool_fill_level_get          - Get pool fill level in DRAM\n");
+	o += scnprintf(b+o, s-o, "echo id   > vmid_set                     - Set BM VMID\n");
+	o += scnprintf(b+o, s-o, "echo pool > pool_disable                 - Set Pool to disable\n");
+	o += scnprintf(b+o, s-o, "echo p nb > pool_memory_fill             - Fill memory of pool with PE index\n");
+	o += scnprintf(b+o, s-o, "echo p qi > pool_enable                  - Enables BM pool\n");
+	o += scnprintf(b+o, s-o, "echo p ps > gp_pool_pe_size_set          - Set PE pointer size in GP pool\n");
+	o += scnprintf(b+o, s-o, "echo p pp > gp_pool_pair_set             - Configure pool works in pairs\n");
+	o += scnprintf(b+o, s-o, "echo p nb pm       > gp_pool_def_basic_init - Default basic init of gp pools\n");
+	o += scnprintf(b+o, s-o, "echo p nb ps qi    > pool_fill_level_set    - Conf Fill level of pool in DRAM\n");
+	o += scnprintf(b+o, s-o, "echo p pn dpe dpf  > pool_status_get        - not empty almost full/empty\n");
+	o += scnprintf(b+o, s-o, "echo p nb ps et ft > pool_dram_set          - Conf Fill level of pool in DRAM\n");
+	o += scnprintf(b+o, s-o, "echo ba, ofs, wN, dP      > register_read   - Read register from BM units\n");
+	o += scnprintf(b+o, s-o, "echo ba, ofs, wN, dP      > register_write  - Write register in BM units\n");
+	o += scnprintf(b+o, s-o, "echo rD wD rC wC rQ wQ    > attr_qm_pool_set                     - rw att QM\n");
+	o += scnprintf(b+o, s-o, "echo rD wD rC wC rQ wQ    > attr_gp_pool_set                     - rw att GP\n");
+	o += scnprintf(b+o, s-o, "echo p cid ca cot cit cnb > pool_cache_set                       - Conf cache\n");
+	o += scnprintf(b+o, s-o, "echo nb et ft id ca cot cit, cnb  > qm_gpm_pools_quick_init      - Ini QM GPM\n");
+	o += scnprintf(b+o, s-o, "echo p nb ps pp et ft id ca cot cit cnb > gp_pool_basic_init     - B initi GP\n");
+	o += scnprintf(b+o, s-o, "echo p nb fl pm > gp_pool_def_quick_init                         - Def GP ini\n");
+	o += scnprintf(b+o, s-o, "echo p nb fl ps pp et at cid ca cot cit cnb > gp_pool_quick_init - GP ini\n");
+	o += scnprintf(b+o, s-o, "echo nb et ft id ca cot cit, cnb > qm_dram_pools_quick_init      - Ini QM DRAM\n");
+
+
+	o += scnprintf(b+o, s-o, "parameters: [p]    pool number\n");
+	o += scnprintf(b+o, s-o, "            [nb]   number of buffers\n");
+	o += scnprintf(b+o, s-o, "            [id]   vmid\n");
+	o += scnprintf(b+o, s-o, "            [pool] pool number\n");
+	o += scnprintf(b+o, s-o, "            [qi]   quick init mode: 1 - quick init, 0 - not quick init\n");
+	o += scnprintf(b+o, s-o, "            [ps]   PE size: 1 - 32bits, 0 - 40 bits\n");
+	o += scnprintf(b+o, s-o, "            [pp]   pool pair: 1 - alloc in pairs, 0 - alloc not in pairs\n");
+	o += scnprintf(b+o, s-o, "            [fl]   fill level\n");
+	o += scnprintf(b+o, s-o, "            [pm]   partition model: 1 - small partition in cache, 0 - big\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	return o;
 }
 
 static ssize_t mv_bm_show(struct device *dev,
@@ -194,17 +200,17 @@ static ssize_t mv_bm_config(struct device *dev,
 
 	local_irq_save(flags);
 
-	if (!strcmp(name, "bm_open")) {
+	if (!strcmp(name, "open")) {
 		pr_info("bm_open is called\n");
 		rc = bm_open();
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_attr_all_pools_def_set")) {
+	} else if (!strcmp(name, "attr_all_pools_def_set")) {
 		PR_INFO_CALLED
 		rc = bm_attr_all_pools_def_set();
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_attr_qm_pool_set")) {
+	} else if (!strcmp(name, "attr_qm_pool_set")) {
 		u32 arDomain, awDomain, arCache, awCache, arQOS, awQOS;
 
 		/* Read input values */
@@ -214,7 +220,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_attr_qm_pool_set(arDomain, awDomain, arCache, awCache, arQOS, awQOS);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_attr_gp_pool_set")) {
+	} else if (!strcmp(name, "attr_gp_pool_set")) {
 		u32 arDomain, awDomain, arCache, awCache, arQOS, awQOS;
 
 		/* Read input values */
@@ -224,7 +230,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_attr_gp_pool_set(arDomain, awDomain, arCache, awCache, arQOS, awQOS);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_enable_status_get"))	{
+	} else if (!strcmp(name, "enable_status_get"))	{
 		u32 bm_req_rcv_en;
 
 		/* Read input values */
@@ -234,22 +240,22 @@ static ssize_t mv_bm_config(struct device *dev,
 		if (rc != OK)
 			PR_ERR_CODE(rc)
 		pr_info("\t bm_req_rcv_en = %d\n", bm_req_rcv_en);
-	} else if (!strcmp(name, "bm_qm_gpm_pools_def_quick_init")) {
+	} else if (!strcmp(name, "qm_gpm_pools_def_quick_init")) {
 		u32 num_of_buffers;
 		struct mv_word40 qece_base_address, pl_base_address;
 
 		/* Read input values */
 		PR_INFO_CALLED
 		num_of_buffers = qece_base_address.hi = qece_base_address.lo = pl_base_address.hi = pl_base_address.lo = 0xFFFFFFFF;
+		sscanf(buf, "%d", &num_of_buffers);
 		qece_base_address.hi = 0;
-		qece_base_address.lo = BM_MALLOC(BM_MALLOC_SIZE);
+		qece_base_address.lo = BM_MALLOC(num_of_buffers*4);
 		pl_base_address.hi = 0;
-		pl_base_address.lo = BM_MALLOC(BM_MALLOC_SIZE);
-		sscanf(buf, "%d", &num_of_buffers);
+		pl_base_address.lo = BM_MALLOC(num_of_buffers*4);
 		rc = bm_qm_gpm_pools_def_quick_init(num_of_buffers, (u32 *)&qece_base_address, (u32 *)&pl_base_address);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_qm_dram_pools_def_quick_init")) {
+	} else if (!strcmp(name, "qm_dram_pools_def_quick_init")) {
 		u32 num_of_buffers;
 		struct mv_word40 qece_base_address, pl_base_address;
 
@@ -264,7 +270,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_qm_dram_pools_def_quick_init(num_of_buffers, (u32 *)&qece_base_address, (u32 *)&pl_base_address);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_qm_gpm_pools_quick_init")) {
+	} else if (!strcmp(name, "qm_gpm_pools_quick_init")) {
 		u32 num_of_buffers, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers;
 		struct mv_word40 qece_base_address, pl_base_address;
 
@@ -279,7 +285,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_qm_gpm_pools_quick_init(num_of_buffers, (u32 *)&qece_base_address, (u32 *)&pl_base_address, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_qm_dram_pools_quick_init")) {
+	} else if (!strcmp(name, "qm_dram_pools_quick_init")) {
 		u32 num_of_buffers, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers;
 		struct mv_word40 qece_base_address, pl_base_address;
 
@@ -294,7 +300,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_qm_dram_pools_quick_init(num_of_buffers, (u32 *)&qece_base_address, (u32 *)&pl_base_address, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_quick_init_status_get")) {
+	} else if (!strcmp(name, "pool_quick_init_status_get")) {
 		u32 pool, completed;
 
 		/* Read input values */
@@ -305,7 +311,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		if (rc != OK)
 			PR_ERR_CODE(rc)
 		pr_info("\t completed = %d\n", completed);
-	} else if (!strcmp(name, "bm_gp_pool_def_basic_init")) {
+	} else if (!strcmp(name, "gp_pool_def_basic_init")) {
 		u32 pool, num_of_buffers, partition_model;
 		struct mv_word40 base_address;
 
@@ -318,7 +324,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_gp_pool_def_basic_init(pool, num_of_buffers, (u32 *)&base_address, partition_model);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_gp_pool_basic_init")) {
+	} else if (!strcmp(name, "gp_pool_basic_init")) {
 		u32 pool, num_of_buffers, pe_size, pool_pair, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers;
 		struct mv_word40 base_address;
 
@@ -331,17 +337,17 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_gp_pool_basic_init(pool, num_of_buffers, (u32 *)&base_address, pe_size, pool_pair, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_enable")) {
+	} else if (!strcmp(name, "enable")) {
 		PR_INFO_CALLED
 		rc = bm_enable();
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_disable")) {
+	} else if (!strcmp(name, "disable")) {
 		PR_INFO_CALLED
 		rc = bm_disable();
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_fill_level_get")) {
+	} else if (!strcmp(name, "pool_fill_level_get")) {
 		u32 pool, fill_level;
 
 		/* Read input values */
@@ -352,7 +358,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		if (rc != OK)
 			PR_ERR_CODE(rc)
 		pr_info("\t fill_level = %d\n", fill_level);
-	} else if (!strcmp(name, "bm_vmid_set")) {
+	} else if (!strcmp(name, "vmid_set")) {
 		u32 bm_vmid;
 
 		/* Read input values */
@@ -362,7 +368,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_vmid_set(bm_vmid);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_gp_pool_def_quick_init")) {
+	} else if (!strcmp(name, "gp_pool_def_quick_init")) {
 		u32 pool, num_of_buffers, fill_level, partition_model;
 		struct mv_word40 base_address;
 
@@ -375,7 +381,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_gp_pool_def_quick_init(pool, num_of_buffers, fill_level, (u32 *)&base_address, partition_model);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_gp_pool_quick_init")) {
+	} else if (!strcmp(name, "gp_pool_quick_init")) {
 		u32 pool, num_of_buffers, fill_level, pe_size, pool_pair, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers;
 		struct mv_word40 base_address;
 
@@ -388,12 +394,12 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_gp_pool_quick_init(pool, num_of_buffers, fill_level, (u32 *)&base_address, pe_size, pool_pair, ae_thr, af_thr, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_global_registers_dump")) {
+	} else if (!strcmp(name, "global_registers_dump")) {
 		PR_INFO_CALLED
 		rc = bm_global_registers_dump();
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_registers_dump")) {
+	} else if (!strcmp(name, "pool_registers_dump")) {
 		u32 pool;
 
 		/* Read input values */
@@ -403,7 +409,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_pool_registers_dump(pool);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_bank_registers_dump")) {
+	} else if (!strcmp(name, "bank_registers_dump")) {
 		u32 bank;
 
 		/* Read input values */
@@ -413,7 +419,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_bank_registers_dump(bank);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_cache_memory_dump")) {
+	} else if (!strcmp(name, "cache_memory_dump")) {
 		u32 bank;
 
 		/* Read input values */
@@ -423,7 +429,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_cache_memory_dump(bank);
 		if (rc != OK)
 			pr_err("%s: illegal operation in function <%s>, error code = 0x%08X\n", __func__, attr->attr.name, rc);
-	} else if (!strcmp(name, "bm_idle_status_get")) {
+	} else if (!strcmp(name, "idle_status_get")) {
 		u32 status;
 
 		/* Read input values */
@@ -433,7 +439,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		if (rc != OK)
 			PR_ERR_CODE(rc)
 		pr_info("\t status = %d\n", status);
-	} else if (!strcmp(name, "bm_pool_status_get")) {
+	} else if (!strcmp(name, "pool_status_get")) {
 		u32 pool, pool_nempty, dpool_ae, dpool_af;
 
 		PR_INFO_CALLED
@@ -443,17 +449,17 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_pool_status_get(pool, &pool_nempty, &dpool_ae, &dpool_af);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_idle_debug")) {
+	} else if (!strcmp(name, "idle_debug")) {
 		PR_INFO_CALLED
 		rc = bm_idle_debug();
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_error_dump")) {
+	} else if (!strcmp(name, "error_dump")) {
 		PR_INFO_CALLED
 		rc = bm_error_dump();
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_memory_fill")) {
+	} else if (!strcmp(name, "pool_memory_fill")) {
 		u32 pool,  num_of_buffers;
 		struct mv_word40 base_address;
 
@@ -466,7 +472,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_pool_memory_fill(pool, num_of_buffers, (u32 *)&base_address);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_dram_set"))	{
+	} else if (!strcmp(name, "pool_dram_set"))	{
 		u32 pool,  num_of_buffers, pe_size, ae_thr, af_thr;
 		struct mv_word40 base_address;
 
@@ -479,7 +485,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_pool_dram_set(pool,  num_of_buffers, pe_size,  (u32 *)&base_address, ae_thr, af_thr);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_fill_level_set")) {
+	} else if (!strcmp(name, "pool_fill_level_set")) {
 		u32 pool,  num_of_buffers, pe_size,  quick_init;
 
 		/* Read input values */
@@ -489,7 +495,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_pool_fill_level_set(pool, num_of_buffers, pe_size, quick_init);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_enable")) {
+	} else if (!strcmp(name, "pool_enable")) {
 		u32 pool, quick_init;
 
 		/* Read input values */
@@ -499,7 +505,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_pool_enable(pool, quick_init);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_gp_pool_pe_size_set")) {
+	} else if (!strcmp(name, "gp_pool_pe_size_set")) {
 		u32 pool, pe_size;
 
 		/* Read input values */
@@ -509,7 +515,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_gp_pool_pe_size_set(pool, pe_size);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_gp_pool_pair_set")) {
+	} else if (!strcmp(name, "gp_pool_pair_set")) {
 		u32 pool, pool_pair;
 
 		/* Read input values */
@@ -519,7 +525,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_gp_pool_pair_set(pool, pool_pair);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_cache_set")) {
+	} else if (!strcmp(name, "pool_cache_set")) {
 		u32 pool, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers;
 
 		/* Read input values */
@@ -529,7 +535,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_pool_cache_set(pool, cache_vmid, cache_attr, cache_so_thr, cache_si_thr, cache_num_of_buffers);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_pool_disable")) {
+	} else if (!strcmp(name, "pool_disable")) {
 		u32 pool;
 
 		/* Read input values */
@@ -540,7 +546,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		if (rc != OK)
 			PR_ERR_CODE(rc)
 /*not used*/
-	} else if (!strcmp(name, "bm_register_read")) {
+	} else if (!strcmp(name, "register_read")) {
 		u32 base_address, offset, wordsNumber, dataPtr;
 
 		PR_INFO_CALLED
@@ -550,7 +556,7 @@ static ssize_t mv_bm_config(struct device *dev,
 		rc = bm_register_read(base_address, offset, wordsNumber, (u32 *)&dataPtr);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-	} else if (!strcmp(name, "bm_register_write")) {
+	} else if (!strcmp(name, "register_write")) {
 		u32 base_address, offset, wordsNumber, dataPtr;
 
 		PR_INFO_CALLED
@@ -573,40 +579,40 @@ static ssize_t mv_bm_config(struct device *dev,
 
 static DEVICE_ATTR(help,                            S_IRUSR, mv_bm_show, NULL);
 static DEVICE_ATTR(status,                          S_IRUSR, mv_bm_show, NULL);
-static DEVICE_ATTR(bm_open,                         S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_attr_all_pools_def_set,       S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_attr_qm_pool_set,             S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_attr_gp_pool_set,             S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_enable_status_get,            S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_qm_gpm_pools_def_quick_init,  S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_qm_dram_pools_def_quick_init, S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_qm_gpm_pools_quick_init,      S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_qm_dram_pools_quick_init,     S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_quick_init_status_get,   S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_gp_pool_def_basic_init,       S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_gp_pool_basic_init,           S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_enable,                       S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_disable,                      S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_fill_level_get,          S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_vmid_set,                     S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_gp_pool_def_quick_init,       S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_gp_pool_quick_init,           S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_global_registers_dump,        S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_registers_dump,          S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_bank_registers_dump,          S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_cache_memory_dump,            S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_idle_status_get,              S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_status_get,              S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_idle_debug,                   S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_error_dump,                   S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_memory_fill,             S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_dram_set,                S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_fill_level_set,          S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_enable,                  S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_gp_pool_pe_size_set,          S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_gp_pool_pair_set,             S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_cache_set,               S_IWUSR, NULL,       mv_bm_config);
-static DEVICE_ATTR(bm_pool_disable,                 S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(open,                         S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(attr_all_pools_def_set,       S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(attr_qm_pool_set,             S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(attr_gp_pool_set,             S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(enable_status_get,            S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(qm_gpm_pools_def_quick_init,  S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(qm_dram_pools_def_quick_init, S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(qm_gpm_pools_quick_init,      S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(qm_dram_pools_quick_init,     S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_quick_init_status_get,   S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(gp_pool_def_basic_init,       S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(gp_pool_basic_init,           S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(enable,                       S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(disable,                      S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_fill_level_get,          S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(vmid_set,                     S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(gp_pool_def_quick_init,       S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(gp_pool_quick_init,           S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(global_registers_dump,        S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_registers_dump,          S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(bank_registers_dump,          S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(cache_memory_dump,            S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(idle_status_get,              S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_status_get,              S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(idle_debug,                   S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(error_dump,                   S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_memory_fill,             S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_dram_set,                S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_fill_level_set,          S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_enable,                  S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(gp_pool_pe_size_set,          S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(gp_pool_pair_set,             S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_cache_set,               S_IWUSR, NULL,       mv_bm_config);
+static DEVICE_ATTR(pool_disable,                 S_IWUSR, NULL,       mv_bm_config);
 /*
 static DEVICE_ATTR(qm_gpm_init,                     S_IWUSR, NULL,       mv_bm_config);
 static DEVICE_ATTR(qm_dram_init,                    S_IWUSR, NULL,       mv_bm_config);
@@ -618,40 +624,40 @@ static DEVICE_ATTR(bm_register_write,               S_IWUSR, NULL,       mv_bm_c
 static struct attribute *mv_bm_attrs[] = {
 	&dev_attr_help.attr,
 	&dev_attr_status.attr,
-	&dev_attr_bm_open.attr,
-	&dev_attr_bm_attr_all_pools_def_set.attr,
-	&dev_attr_bm_attr_qm_pool_set.attr,
-	&dev_attr_bm_attr_gp_pool_set.attr,
-	&dev_attr_bm_enable_status_get.attr,
-	&dev_attr_bm_qm_gpm_pools_def_quick_init.attr,
-	&dev_attr_bm_qm_dram_pools_def_quick_init.attr,
-	&dev_attr_bm_qm_gpm_pools_quick_init.attr,
-	&dev_attr_bm_qm_dram_pools_quick_init.attr,
-	&dev_attr_bm_pool_quick_init_status_get.attr,
-	&dev_attr_bm_gp_pool_def_basic_init.attr,
-	&dev_attr_bm_gp_pool_basic_init.attr,
-	&dev_attr_bm_enable.attr,
-	&dev_attr_bm_disable.attr,
-	&dev_attr_bm_pool_fill_level_get.attr,
-	&dev_attr_bm_vmid_set.attr,
-	&dev_attr_bm_gp_pool_def_quick_init.attr,
-	&dev_attr_bm_gp_pool_quick_init.attr,
-	&dev_attr_bm_global_registers_dump.attr,
-	&dev_attr_bm_pool_registers_dump.attr,
-	&dev_attr_bm_bank_registers_dump.attr,
-	&dev_attr_bm_cache_memory_dump.attr,
-	&dev_attr_bm_idle_status_get.attr,
-	&dev_attr_bm_pool_status_get.attr,
-	&dev_attr_bm_idle_debug.attr,
-	&dev_attr_bm_error_dump.attr,
-	&dev_attr_bm_pool_memory_fill.attr,
-	&dev_attr_bm_pool_dram_set.attr,
-	&dev_attr_bm_pool_fill_level_set.attr,
-	&dev_attr_bm_pool_enable.attr,
-	&dev_attr_bm_gp_pool_pe_size_set.attr,
-	&dev_attr_bm_gp_pool_pair_set.attr,
-	&dev_attr_bm_pool_cache_set.attr,
-	&dev_attr_bm_pool_disable.attr,
+	&dev_attr_open.attr,
+	&dev_attr_attr_all_pools_def_set.attr,
+	&dev_attr_attr_qm_pool_set.attr,
+	&dev_attr_attr_gp_pool_set.attr,
+	&dev_attr_enable_status_get.attr,
+	&dev_attr_qm_gpm_pools_def_quick_init.attr,
+	&dev_attr_qm_dram_pools_def_quick_init.attr,
+	&dev_attr_qm_gpm_pools_quick_init.attr,
+	&dev_attr_qm_dram_pools_quick_init.attr,
+	&dev_attr_pool_quick_init_status_get.attr,
+	&dev_attr_gp_pool_def_basic_init.attr,
+	&dev_attr_gp_pool_basic_init.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_disable.attr,
+	&dev_attr_pool_fill_level_get.attr,
+	&dev_attr_vmid_set.attr,
+	&dev_attr_gp_pool_def_quick_init.attr,
+	&dev_attr_gp_pool_quick_init.attr,
+	&dev_attr_global_registers_dump.attr,
+	&dev_attr_pool_registers_dump.attr,
+	&dev_attr_bank_registers_dump.attr,
+	&dev_attr_cache_memory_dump.attr,
+	&dev_attr_idle_status_get.attr,
+	&dev_attr_pool_status_get.attr,
+	&dev_attr_idle_debug.attr,
+	&dev_attr_error_dump.attr,
+	&dev_attr_pool_memory_fill.attr,
+	&dev_attr_pool_dram_set.attr,
+	&dev_attr_pool_fill_level_set.attr,
+	&dev_attr_pool_enable.attr,
+	&dev_attr_gp_pool_pe_size_set.attr,
+	&dev_attr_gp_pool_pair_set.attr,
+	&dev_attr_pool_cache_set.attr,
+	&dev_attr_pool_disable.attr,
 /*
 	&dev_attr_qm_gpm_init.attr,
 	&dev_attr_qm_dram_init.attr,
@@ -680,46 +686,11 @@ int mv_pp3_bm_sysfs_init(struct kobject *neta_kobj)
 	return err;
 }
 
-int mv_sysfs_exit(struct kobject *neta_kobj)
-{
-	sysfs_remove_group(neta_kobj, &mv_bm_group);
-
-	return 0;
-}
-
-
-int mv_pp3_bm_sysfs_init_main(void)
+int mv_pp3_bm_sysfs_exit(struct kobject *emac_kobj)
 {
-	struct device *pd;
-
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	if (!pd) {
-		neta_sysfs = platform_device_register_simple("neta", -1, NULL, 0);
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	}
-	if (!pd) {
-		pr_err(KERN_ERR"%s: cannot find neta device\n", __func__);
-		return -1;
-	}
-
-	mv_pp3_bm_sysfs_init(&pd->kobj);
-
+	/*TODO*/
 	return 0;
 }
-void mv_eth_sysfs_exit_main(void)
-{
-	struct device *pd;
-
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	if (!pd) {
-		pr_err(KERN_ERR"%s: cannot find pp2 device\n", __func__);
-		return;
-	}
-
-	platform_device_unregister(neta_sysfs);
-
-	return;
-}
 
 
 /*
-- 
1.7.5.4

