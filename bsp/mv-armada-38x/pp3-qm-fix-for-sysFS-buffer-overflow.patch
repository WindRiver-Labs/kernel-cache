From 74a679ce2369478a694f8773265a7edd47fc1fb0 Mon Sep 17 00:00:00 2001
From: Dovrat <dovrat@marvell.com>
Date: Thu, 10 Apr 2014 22:51:34 +0300
Subject: [PATCH 1552/1825] pp3: qm: fix for sysFS buffer overflow

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit d93f2bedd4f76b73c81291c352a8e642ecdbf483

Change-Id: Ic933948d293603ab4086d264f3456026575fa1eb
Signed-off-by: Dovrat <dovrat@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7102
Reviewed-by: Eliezer Ben Zeev <eliezerb@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/qm/mv_qm.h       |    7 ++
 drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c |   97 ++++++---------------
 2 files changed, 32 insertions(+), 72 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
index 3ee73c0..e277566 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
@@ -703,4 +703,11 @@ int qm_register_write(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPt
  */
 int qm_register_read(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPtr);
 
+/*
+ * QM sysfs functions
+ */
+int mv_pp3_qm_sysfs_init(struct kobject *neta_kobj);
+int mv_pp3_qm_sysfs_exit(struct kobject *emac_kobj);
+
 #endif /* MV_QM_H */
+
diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c
index 7d7315d..08fa7df 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c
@@ -67,22 +67,11 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "qm/mv_qm.h"
 #include "qm/mv_qm_regs.h"
 
-/*
-#define PR_ERR_CODE(_rc, _func)	\
-{								\
-	pr_err("error code = 0x%08X on illegal operation at line %05d in function <%s> in file <%s>\n", rc, __LINE__, __func__, __FILE__);			\
-	pr_err("%s: error code = 0x%08X on illegal operation at line %05d in function <%s> in file <%s>\n", _func, _rc, __LINE__, __func__, __FILE__);	\
-}
-*/
+
 #define PR_ERR_CODE(_rc)	\
 {							\
 	pr_err("%s: error code = 0x%08X in function <%s>\n", __func__, _rc, attr->attr.name);	\
 }
-/*
-	pr_err("%s: illegal operation in function <%s> at line %05d in file <%s>, error code = 0x%08X\n", __func__, attr->attr.name, __LINE__, __FILE__, rc);	\
-	pr_err("%s: illegal operation in function <%s>, error code = 0x%08X\n", __func__, attr->attr.name, rc);		\
-	pr_err("%s: error code = 0x%08X on illegal operation at line %05d in function <%s> in file <%s>\n", _func, _rc, __LINE__, __func__, __FILE__);	\
-*/
 
 #define PR_INFO_CALLED		\
 {							\
@@ -91,34 +80,21 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 
 
-static ssize_t mv_qm_help(char *buf)
+static ssize_t mv_qm_help(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "cat status                              - show QM status\n");
-/*
-	off += sprintf(buf+off, "echo      > open                        - Open session with BM\n");
-	off += sprintf(buf+off, "echo      > enable                      - enable BM\n");
-	off += sprintf(buf+off, "echo      > disable                     - disable BM\n");
-*/
-	off += sprintf(buf+off, "echo      > qm_dma_gpm_pools_def_enable - en QM, Conf DMA w/GPM p thrs w/def\n");
-/* QM */
-	off += sprintf(buf+off, "echo > default_set                  - Set default for QM units for mandatory parameters\n");
-	off += sprintf(buf+off, "echo > dma_gpm_pools_def_enable     - Enables QM for  GPM pools (0,1)\n");
-	off += sprintf(buf+off, "echo > dma_dram_pools_def_enable    - Enables QM for DRAM pools (2,3)\n");
-	off += sprintf(buf+off, "echo qth, qtl, pth, ptl > qm_dma_gpm_pools_enable - En QM, Conf DMA w/GPM p thrs\n");
-
-	off += sprintf(buf+off, "parameters: [p]    pool number\n");
-	off += sprintf(buf+off, "            [nb]   number of buffers\n");
-	off += sprintf(buf+off, "            [id]   vmid\n");
-	off += sprintf(buf+off, "            [pool] pool number\n");
-	off += sprintf(buf+off, "            [qi]   ???\n");
-	off += sprintf(buf+off, "            [ps]   ???\n");
-	off += sprintf(buf+off, "            [pp]   ???\n");
-	off += sprintf(buf+off, "            [pm]   ???\n");
-	off += sprintf(buf+off, "\n");
-
-	return off;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "echo > open                      - Open session with QM\n");
+	o += scnprintf(b+o, s-o, "echo > close                     - Close session with QM\n");
+	o += scnprintf(b+o, s-o, "echo > default_set               - Set default for QM units for mandatory parameters\n");
+	o += scnprintf(b+o, s-o, "echo > dma_gpm_pools_def_enable  - Enables QM for  GPM pools (0,1)\n");
+	o += scnprintf(b+o, s-o, "echo > dma_dram_pools_def_enable - Enables QM for DRAM pools (2,3)\n");
+	/* o += scnprintf(b+o, s-o, "echo qth, qtl, pth, ptl > qm_dma_gpm_pools_enable - En QM, Conf DMA w/GPM p thrs\n"); */
+	/* o += scnprintf(b+o, s-o, "parameters: [qth]\n"); */
+	o += scnprintf(b+o, s-o, "\n");
+
+	return o;
 }
 
 static ssize_t mv_qm_show(struct device *dev,
@@ -131,12 +107,7 @@ static ssize_t mv_qm_show(struct device *dev,
 		return -EPERM;
 
 	pr_info("mv_qm_show is called\n");
-	if (!strcmp(name, "status")) {
-		u32 status = 0;
-		pr_info("qm_enable_status_get: ");
-		/*qm_enable_status_get(&status);*/
-		pr_info("status is %d\n", status);
-	} else if (!strcmp(name, "help")) {
+	if (!strcmp(name, "help")) {
 		off = mv_qm_help(buf);
 	} else if (!strcmp(name, "debug")) {
 		pr_info("debug\n");
@@ -154,9 +125,6 @@ static ssize_t mv_qm_config(struct device *dev,
 	const char      *name = attr->attr.name;
 	int rc = -QM_INPUT_NOT_IN_RANGE;
 	int             err = 0;
-/*
-	u32 flags;
-*/
 	unsigned long flags;
 
 	if (!capable(CAP_NET_ADMIN))
@@ -204,7 +172,6 @@ static ssize_t mv_qm_config(struct device *dev,
 		rc = qm_dma_gpm_pools_enable(qece_thr_hi, qece_thr_lo, pl_thr_hi, pl_thr_lo);
 		if (rc != OK)
 			PR_ERR_CODE(rc)
-/*not used*/
 	} else if (!strcmp(name, "register_read")) {
 		u32 base_address, offset, wordsNumber, dataPtr;
 
@@ -227,7 +194,6 @@ static ssize_t mv_qm_config(struct device *dev,
 			PR_ERR_CODE(rc)
 	} else {
 		err = 1;
-/*		pr_err("%s: illegal operation <%s>\n", __func__, attr->attr.name);*/
 		pr_err("%s: wrong name of QM function <%s>\n", __func__, attr->attr.name);
 	}
 
@@ -237,24 +203,22 @@ static ssize_t mv_qm_config(struct device *dev,
 }
 
 static DEVICE_ATTR(help,                            S_IRUSR, mv_qm_show, NULL);
-static DEVICE_ATTR(status,                          S_IRUSR, mv_qm_show, NULL);
-static DEVICE_ATTR(open,                         S_IWUSR, NULL,       mv_qm_config);
-/*
-static DEVICE_ATTR(qm_gpm_init,                     S_IWUSR, NULL,       mv_qm_config);
-static DEVICE_ATTR(qm_dram_init,                    S_IWUSR, NULL,       mv_qm_config);
-*/
+static DEVICE_ATTR(open,                            S_IWUSR, NULL,       mv_qm_config);
+static DEVICE_ATTR(close,                           S_IWUSR, NULL,       mv_qm_config);
+static DEVICE_ATTR(default_set,                     S_IWUSR, NULL,       mv_qm_config);
+static DEVICE_ATTR(dma_gpm_pools_def_enable,        S_IWUSR, NULL,       mv_qm_config);
+static DEVICE_ATTR(dma_dram_pools_def_enable,       S_IWUSR, NULL,       mv_qm_config);
 static DEVICE_ATTR(qm_register_read,                S_IWUSR, NULL,       mv_qm_config);
 static DEVICE_ATTR(qm_register_write,               S_IWUSR, NULL,       mv_qm_config);
 
 
 static struct attribute *mv_qm_attrs[] = {
 	&dev_attr_help.attr,
-	&dev_attr_status.attr,
 	&dev_attr_open.attr,
-/*
-	&dev_attr_qm_gpm_init.attr,
-	&dev_attr_qm_dram_init.attr,
-*/
+	&dev_attr_close.attr,
+	&dev_attr_default_set.attr,
+	&dev_attr_dma_gpm_pools_def_enable.attr,
+	&dev_attr_dma_dram_pools_def_enable.attr,
 	&dev_attr_qm_register_read.attr,
 	&dev_attr_qm_register_write.attr,
 	NULL
@@ -284,14 +248,3 @@ int mv_pp3_qm_sysfs_exit(struct kobject *emac_kobj)
 	/*TODO*/
 	return 0;
 }
-
-
-/*
-
-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-echo > qm_open
-echo > qm_pool_disable 0
-
-
-
-*/
-- 
1.7.5.4

