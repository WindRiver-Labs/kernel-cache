From 03a24e851602b4d50eb19ff380bd2bf1b540ad47 Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Wed, 9 Apr 2014 12:42:03 +0300
Subject: [PATCH 1571/1825] a38x: improved support for customer board porting

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 2a264cab555e2c34fcf4379060be1828530a9304

	This patch introduces improved support for more intuitive costumer porting process.

	Main changes:
	- Customer boards will use board IDs 0:0x10, while Marvell boards IDs will be 0x10 and forward.
	- Added compilation chain for 2 customer boards and relevant needed structures
	usage: ./build.pl -f spi -v 14t1 -i spi -b armada_38x_customer[0/1] -c
	- Split general board configuration, DDR topology, & SerDes lanes structures, to Marvell boards structs, and Customer boards structs
	- Implemented new mvBoardIdGet for U-Boot, with pre-compiled differentiation between Marvell and Costumer boards,
	  while kernel detects board ID using U-Boot tags.
	  ** kernel must set gBoardId according to U-Boot tags, before any usage of mvBoardIdGet() **
	- Added mvBoardIdIndexGet for any usage of board id as index for arrays
	- Implemented 2 Customer boards with RD configuration

	** Tested on a38x_RD with U-Boot compiled for Costumer, with kernel 3.2 and kernel 3.10 **

Change-Id: I25f3a3dc592e3c8f4cc3e233f95eb1f2a579b5e6
Signed-off-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7121
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../armada_38x_family/boardEnv/mvBoardEnvLib.c     |   89 ++++++--
 .../armada_38x_family/boardEnv/mvBoardEnvLib.h     |    7 +-
 .../armada_38x_family/boardEnv/mvBoardEnvSpec.c    |  231 +++++++++++---------
 .../armada_38x_family/boardEnv/mvBoardEnvSpec.h    |   80 ++++---
 4 files changed, 243 insertions(+), 164 deletions(-)

diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c
index aaa3fa8..3dce703 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c
@@ -90,7 +90,8 @@
 #define DB(x)
 #endif
 
-extern MV_BOARD_INFO *boardInfoTbl[];
+extern MV_BOARD_INFO *marvellBoardInfoTbl[];
+extern MV_BOARD_INFO *customerBoardInfoTbl[];
 MV_BOARD_CONFIG_TYPE_INFO boardConfigTypesInfo[] = MV_BOARD_CONFIG_INFO;
 MV_BOARD_SATR_INFO boardSatrInfo[] = MV_SAR_INFO;
 MV_SATR_BOOT_TABLE satrBootSrcTable[] = MV_SATR_BOOT_SRC_TABLE_VAL;
@@ -99,6 +100,31 @@ MV_SATR_BOOT_TABLE satrBootSrcTable[] = MV_SATR_BOOT_SRC_TABLE_VAL;
 static MV_DEV_CS_INFO *boardGetDevEntry(MV_32 devNum, MV_BOARD_DEV_CLASS devClass);
 static MV_BOARD_INFO *board;
 static MV_VOID mvBoardModuleAutoDetect(MV_VOID);
+
+
+
+/*******************************************************************************
+* mvBoardIdIndexGet
+*
+* DESCRIPTION:
+*	returns an index for board arrays with direct memory access, according to board id
+*
+* INPUT:
+*       boardId.
+*
+* OUTPUT:
+*       direct access index for board arrays
+*
+* RETURN:
+*       None.
+*
+*******************************************************************************/
+MV_U32 mvBoardIdIndexGet(MV_U32 boardId)
+{
+/* Marvell Boards use 0x10 as base for Board ID: mask MSB to receive index for board ID*/
+	return boardId & (MARVELL_BOARD_ID_BASE - 1);
+}
+
 /*******************************************************************************
 * mvBoardEnvInit
 *
@@ -123,8 +149,7 @@ MV_VOID mvBoardEnvInit(MV_VOID)
 	MV_U32 syncCtrl	= 0;
 	MV_BOARD_BOOT_SRC bootSrc;
 
-	board = boardInfoTbl[DB_68XX_ID];	/* init for first time get the correct twsi address */
-	mvBoardIdSet(mvBoardIdGet());
+	mvBoardSet(mvBoardIdGet());
 	if (mvBoardConfigAutoDetectEnabled())
 		mvBoardModuleAutoDetect();
 	bootSrc = mvBoardBootDeviceGroupSet();
@@ -192,7 +217,7 @@ MV_VOID mvBoardEnvInit(MV_VOID)
 *******************************************************************************/
 MV_U16 mvBoardModelGet(MV_VOID)
 {
-	return mvBoardIdGet() >> 16;
+	return mvBoardIdIndexGet(mvBoardIdGet()) >> 16;
 }
 /*******************************************************************************
 * mbBoardRevlGet - Get Board revision
@@ -1115,12 +1140,16 @@ MV_STATUS mvBoardEthComplexInfoUpdate(MV_VOID)
 MV_STATUS mvBoardIoExpanderUpdate(MV_VOID)
 {
 	MV_U32 i = 0;
-	MV_U8 ioValue;
-	MV_U32 tmp;
+	MV_U8 ioValue, boardId = mvBoardIdGet();
+	MV_U32 tmp = MV_ERROR;
 
 	if (mvBoardIoExpanderGet(0, 2, &ioValue) == MV_ERROR)
 		return MV_OK; /* ignore for boards not supported IO expander */
-	tmp = mvBoardSatRRead(MV_SATR_RD_SERDES4_CFG);
+
+	/* if RD board: detect SerDes Lane #4 configuration*/
+	if (boardId == RD_NAS_68XX_ID || boardId == RD_AP_68XX_ID)
+		tmp = mvBoardSatRRead(MV_SATR_RD_SERDES4_CFG);
+
 	if (tmp != MV_ERROR) { /* ignore for none RD_NAS board */
 		if (tmp == 0) /* 0 = USB3.  1 = SGMII. */
 			ioValue |= 1 ;	/* Setting USB3.0 interface: configure IO as output '1' */
@@ -1779,7 +1808,7 @@ MV_VOID mvBoardEthComplexConfigSet(MV_U32 ethConfig)
 MV_STATUS mvBoardSatrInfoConfig(MV_SATR_TYPE_ID satrClass, MV_BOARD_SATR_INFO *satrInfo)
 {
 	int i;
-	MV_U32 boardId = mvBoardIdGet();
+	MV_U32 boardId = mvBoardIdIndexGet(mvBoardIdGet());
 
 	/* verify existence of requested SATR type, pull its data,
 	 * and check if field is relevant to current running board */
@@ -1814,7 +1843,7 @@ MV_STATUS mvBoardSatrInfoConfig(MV_SATR_TYPE_ID satrClass, MV_BOARD_SATR_INFO *s
 MV_BOOL mvBoardConfigTypeGet(MV_CONFIG_TYPE_ID configClass, MV_BOARD_CONFIG_TYPE_INFO *configInfo)
 {
 	int i;
-	MV_U32 boardId = mvBoardIdGet();
+	MV_U32 boardId = mvBoardIdIndexGet(mvBoardIdGet());
 
 	/* verify existence of requested config type, pull its data,
 	 * and check if field is relevant to current running board */
@@ -1898,12 +1927,18 @@ MV_32 mvBoardNandWidthGet(void)
 *       void
 *
 *******************************************************************************/
-MV_VOID mvBoardIdSet(MV_U32 boardId)
-{
-	if (boardId >= MV_MAX_BOARD_ID)
+static MV_U32 gBoardId = -1;
+MV_VOID mvBoardSet(MV_U32 boardId)
+{
+	/* board ID's >0x10 are for Marvell Boards */
+	if (boardId >= MARVELL_BOARD_ID_BASE && boardId < MV_MAX_MARVELL_BOARD_ID) { /* Marvell Board */
+		board = marvellBoardInfoTbl[mvBoardIdIndexGet(boardId)];
+		gBoardId = boardId;
+	} else if (boardId >= CUTOMER_BOARD_ID_BASE && boardId < MV_MAX_CUSTOMER_BOARD_ID) { /* Customer Board */
+		board = customerBoardInfoTbl[mvBoardIdIndexGet(boardId)];
+		gBoardId = boardId;
+	} else
 		mvOsPrintf("%s: Error: wrong boardId (%d)\n", __func__, boardId);
-
-	board = boardInfoTbl[boardId];
 }
 
 /*******************************************************************************
@@ -1924,24 +1959,36 @@ MV_VOID mvBoardIdSet(MV_U32 boardId)
 *       32bit board ID number, '-1' if board is undefined.
 *
 *******************************************************************************/
-static MV_U32 gBoardId = -1;
 MV_U32 mvBoardIdGet(MV_VOID)
 {
-	MV_U8 readValue;
 	if (gBoardId != -1)
 		return gBoardId;
 
+#ifdef CONFIG_CUSTOMER_BOARD_SUPPORT
+	#ifdef CONFIG_CUSTOMER_BOARD_0
+		gBoardId = ARMADA_38x_CUSTOMER_BOARD_ID0;
+	#elif CONFIG_CUSTOMER_BOARD_1
+		gBoardId = ARMADA_38x_CUSTOMER_BOARD_ID1;
+	#endif
+#else
+	/* For Marvell Boards: Set generic board struct pointer to use S@R TWSI address, and read board ID */
+	board = marvellBoardInfoTbl[mvBoardIdIndexGet(DB_68XX_ID)];
+	MV_U8 readValue;
 	if (mvBoardTwsiGet(BOARD_DEV_TWSI_SATR, 0, 0, &readValue) != MV_OK) {
 		mvOsPrintf("%s: Error: Read from TWSI failed\n", __func__);
-		mvOsPrintf("%s: Set default board ID to DB-88F6820-BP", __func__);
+		mvOsPrintf("%s: Set default board ID to DB-88F6820-BP\n", __func__);
 		readValue = DB_68XX_ID;
 	}
-	gBoardId = readValue & 0x07;
+	readValue = readValue & 0x07;
 
-	if (gBoardId >= MV_MAX_BOARD_ID) {
-		mvOsPrintf("%s: Error: read wrong board (%d)\n", __func__, gBoardId);
+	if (readValue < MV_MARVELL_BOARD_NUM && readValue >= 0) {
+		gBoardId = MARVELL_BOARD_ID_BASE + readValue;
+	} else {
+		mvOsPrintf("%s: Error: read wrong board (%d)\n", __func__, readValue);
 		return MV_INVALID_BOARD_ID;
 	}
+#endif
+
 	return gBoardId;
 }
 
@@ -2430,7 +2477,7 @@ MV_U32 mvBoardSatRRead(MV_SATR_TYPE_ID satrField)
 	}
 
 	if (mvBoardSatrInfoConfig(satrField, &satrInfo) != MV_OK) {
-		mvOsPrintf("%s: Error: Requested S@R field is not relevant for this board\n", __func__);
+		mvOsPrintf("%s: Error: Requested S@R field (%d) is not relevant for this board\n", __func__, satrField);
 		return MV_ERROR;
 	}
 
diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h
index 45eded9..682c5be 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h
@@ -230,7 +230,7 @@ typedef struct _boardSatrInfo {
 	MV_U32 bitOffset;
 	MV_U32 devClassId;
 	MV_U32 regOffset;
-	MV_U32 isActiveForBoard[MV_MAX_BOARD_ID];
+	MV_U32 isActiveForBoard[MV_MARVELL_BOARD_NUM];
 	MV_BOARD_SATR_STATUS status;
 } MV_BOARD_SATR_INFO;
 
@@ -239,7 +239,7 @@ typedef struct _boardConfigTypesInfo {
 	MV_U32 twsiAddr;
 	MV_U32 offset;
 	MV_U32 twsiId;
-	MV_U32 isActiveForBoard[MV_MAX_BOARD_ID];
+	MV_U32 isActiveForBoard[MV_MARVELL_BOARD_NUM];
 } MV_BOARD_CONFIG_TYPE_INFO;
 
 typedef enum _boardMacSpeed {
@@ -488,8 +488,9 @@ MV_U8 mvBoardTwsiAddrGet(MV_BOARD_TWSI_CLASS twsiClass, MV_U32 index);
 MV_U8 mvBoardTwsiIsMore256Get(MV_BOARD_TWSI_CLASS twsiClass, MV_U32 index);
 MV_U32 mvBoardEthComplexConfigGet(MV_VOID);
 MV_VOID mvBoardEthComplexConfigSet(MV_U32 ethConfig);
+MV_U32 mvBoardIdIndexGet(MV_U32 boardId);
 MV_U32 mvBoardIdGet(MV_VOID);
-MV_VOID mvBoardIdSet(MV_U32 boardId);
+MV_VOID mvBoardSet(MV_U32 boardId);
 MV_U32 mvBoardSledCpuNumGet(MV_VOID);
 MV_VOID mvBoardInfoUpdate(MV_VOID);
 MV_VOID mvBoardVerifySerdesCofig(MV_VOID);
diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c
index 46789c0..be23bca 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c
@@ -67,6 +67,132 @@
 #include "twsi/mvTwsi.h"
 #include "pex/mvPexRegs.h"
 
+/***************************************** Customer Boards *****************************************/
+/*******************************************************************************
+ * A38x Customer Board 0 - Based on RD-AP
+ *******************************************************************************/
+#define A38x_CUSTOMER_BOARD_0_NAND_READ_PARAMS		0x000C0282
+#define A38x_CUSTOMER_BOARD_0_NAND_WRITE_PARAMS		0x00010305
+/*NAND care support for small page chips*/
+#define A38x_CUSTOMER_BOARD_0_NAND_CONTROL		0x01c00543
+
+#define A38x_CUSTOMER_BOARD_0_NOR_READ_PARAMS		0x403E07CF
+#define A38x_CUSTOMER_BOARD_0_NOR_WRITE_PARAMS		0x000F0F0F
+
+MV_BOARD_TWSI_INFO armada_38x_customer_0_BoardTwsiDev[] = {
+	/* {{MV_BOARD_DEV_CLASS devClass, MV_U8 devClassId,  MV_U8 twsiDevAddr, MV_U8 twsiDevAddrType}} */
+	{ BOARD_DEV_TWSI_SATR,	0,	0x50, ADDR7_BIT, MV_TRUE},  /* read only for HW configuration */
+	{ BOARD_DEV_TWSI_SATR,	1,	0x4C, ADDR7_BIT, MV_FALSE},
+	{ BOARD_TWSI_IO_EXPANDER,	0,	0x20, ADDR7_BIT, MV_FALSE},
+	{ BOARD_TWSI_IO_EXPANDER,	1,	0x21, ADDR7_BIT, MV_FALSE},
+};
+MV_BOARD_MAC_INFO armada_38x_customer_0_BoardMacInfo[] = {
+	/* {{MV_BOARD_MAC_SPEED boardMacSpeed, MV_8 boardEthSmiAddr}} */
+	{ BOARD_MAC_SPEED_AUTO, 0x1},
+	{ BOARD_MAC_SPEED_AUTO, 0x0}
+};
+
+MV_DEV_CS_INFO armada_38x_customer_0_BoardDeCsInfo[] = {
+	/*{deviceCS, params, devType, devWidth, busWidth }*/
+#ifdef MV_NAND
+	{ DEVICE_CS0,	N_A, BOARD_DEV_NAND_FLASH,	8,	8},  /* NAND DEV */
+#endif
+#if defined(MV_INCLUDE_NOR)
+	{ DEV_BOOCS,	N_A, BOARD_DEV_NOR_FLASH,	16,	16}, /* NOR DEV */
+	{ SPI0_CS1,	N_A, BOARD_DEV_SPI_FLASH,	8,	8 } /* SPI DEV */
+#else
+	{ SPI0_CS0,	N_A, BOARD_DEV_SPI_FLASH,	8,	8 } /* SPI DEV */
+#endif
+};
+
+MV_BOARD_MPP_INFO armada_38x_customer_0_BoardMppConfigValue[] = {
+	{ {
+		A38x_CUSTOMER_BOARD_0_MPP0_7,
+		A38x_CUSTOMER_BOARD_0_MPP8_15,
+		A38x_CUSTOMER_BOARD_0_MPP16_23,
+		A38x_CUSTOMER_BOARD_0_MPP24_31,
+		A38x_CUSTOMER_BOARD_0_MPP32_39,
+		A38x_CUSTOMER_BOARD_0_MPP40_47,
+		A38x_CUSTOMER_BOARD_0_MPP48_55,
+		A38x_CUSTOMER_BOARD_0_MPP56_63,
+	} }
+};
+
+struct MV_BOARD_IO_EXPANDER armada_38x_customer_0_IoExpanderInfo[] = {
+	{0, 6, 0xF4},
+	{0, 7, 0xC3},
+	{0, 2, 0x0B},
+	{0, 3, 0x18},
+	{1, 6, 0xE7},
+	{1, 7, 0xF9},
+	{1, 2, 0x08},
+	{1, 3, 0x00}
+};
+
+MV_BOARD_INFO armada_38x_customer_board_0_info = {
+	.boardName			= "A38x-Customer-Board-0",
+	.numBoardMppTypeValue		= ARRSZ(armada_38x_customer_0_BoardMppConfigValue),
+	.pBoardModTypeValue		= NULL,
+	.pBoardMppConfigValue		= armada_38x_customer_0_BoardMppConfigValue,
+	.intsGppMaskLow			= 0,
+	.intsGppMaskMid			= 0,
+	.intsGppMaskHigh		= 0,
+	.numBoardDeviceIf		= ARRSZ(armada_38x_customer_0_BoardDeCsInfo),
+	.pDevCsInfo				= armada_38x_customer_0_BoardDeCsInfo,
+	.numBoardTwsiDev		= ARRSZ(armada_38x_customer_0_BoardTwsiDev),
+	.pBoardTwsiDev			= armada_38x_customer_0_BoardTwsiDev,
+	.numBoardMacInfo		= ARRSZ(armada_38x_customer_0_BoardMacInfo),
+	.pBoardMacInfo			= armada_38x_customer_0_BoardMacInfo,
+	.numBoardGppInfo		= 0,
+	.pBoardGppInfo			= 0,
+	.activeLedsNumber		= 0,
+	.pLedGppPin			= NULL,
+	.ledsPolarity			= 0,
+
+	/* PMU Power */
+	.pmuPwrUpPolarity		= 0,
+	.pmuPwrUpDelay			= 80000,
+
+	/* GPP values */
+	.gppOutEnValLow			= A38x_CUSTOMER_BOARD_0_GPP_OUT_ENA_LOW,
+	.gppOutEnValMid			= A38x_CUSTOMER_BOARD_0_GPP_OUT_ENA_MID,
+	.gppOutValLow			= A38x_CUSTOMER_BOARD_0_GPP_OUT_VAL_LOW,
+	.gppOutValMid			= A38x_CUSTOMER_BOARD_0_GPP_OUT_VAL_MID,
+	.gppPolarityValLow		= A38x_CUSTOMER_BOARD_0_GPP_POL_LOW,
+	.gppPolarityValMid		= A38x_CUSTOMER_BOARD_0_GPP_POL_MID,
+
+	/* TDM */
+	.numBoardTdmInfo		= {},
+	.pBoardTdmInt2CsInfo		= {},
+	.boardTdmInfoIndex		= -1,
+
+	.pBoardSpecInit			= NULL,
+
+	/* NAND init params */
+	.nandFlashReadParams		= A38x_CUSTOMER_BOARD_0_NAND_READ_PARAMS,
+	.nandFlashWriteParams		= A38x_CUSTOMER_BOARD_0_NAND_WRITE_PARAMS,
+	.nandFlashControl		= A38x_CUSTOMER_BOARD_0_NAND_CONTROL,
+	/* NOR init params */
+	.norFlashReadParams		= A38x_CUSTOMER_BOARD_0_NOR_READ_PARAMS,
+	.norFlashWriteParams		= A38x_CUSTOMER_BOARD_0_NOR_WRITE_PARAMS,
+	/* Enable modules auto-detection. */
+	.configAutoDetect		= MV_FALSE,
+	.numIoExp			= ARRSZ(armada_38x_customer_0_IoExpanderInfo),
+	.pIoExp				= armada_38x_customer_0_IoExpanderInfo,
+	.boardOptionsConfig		= MV_CONFIG_NO_MODULE
+};
+
+/*
+ * All supported A380 boards
+ */
+MV_BOARD_INFO *customerBoardInfoTbl[] = {
+	&armada_38x_customer_board_0_info,
+	&armada_38x_customer_board_0_info
+};
+
+
+/***************************************** Marvell Boards *****************************************/
+
 /*******************************************************************************
  * A380 DB-88F6660 board */
 /*******************************************************************************/
@@ -375,109 +501,8 @@ MV_BOARD_INFO rdWAP88f68XX_board_info = {
 };
 
 
-#define A380_CUSTOMER_BOARD_NAND_READ_PARAMS       0x000C0282
-#define A380_CUSTOMER_BOARD_NAND_WRITE_PARAMS      0x00010305
-/*NAND care support for small page chips*/
-#define A380_CUSTOMER_BOARD_NAND_CONTROL           0x01c00543
-
-#define A380_CUSTOMER_BOARD_NOR_READ_PARAMS        0x403E07CF
-#define A380_CUSTOMER_BOARD_NOR_WRITE_PARAMS       0x000F0F0F
-
-MV_BOARD_TWSI_INFO A380_customerInfoBoardTwsiDev[] = {
-	/* {{MV_BOARD_DEV_CLASS devClass, MV_U8 devClassId,  MV_U8 twsiDevAddr, MV_U8 twsiDevAddrType}} */
-	{ BOARD_DEV_TWSI_SATR,		0,	0x4C,	   ADDR7_BIT	},
-	{ BOARD_DEV_TWSI_SATR,		1,	0x4D,	   ADDR7_BIT	},
-	{ BOARD_DEV_TWSI_SATR,		0,	0x54,	   ADDR7_BIT	},
-};
-
-MV_BOARD_MAC_INFO A380_customerInfoBoardMacInfo[] = {
-	/* {{MV_BOARD_MAC_SPEED	boardMacSpeed, MV_U8 boardEthSmiAddr}} */
-	{ BOARD_MAC_SPEED_AUTO, 0x10},
-	{ BOARD_MAC_SPEED_AUTO, 0x11},
-	{ BOARD_MAC_SPEED_AUTO, 0x12},
-	{ BOARD_MAC_SPEED_AUTO, 0x13},
-};
-
-MV_DEV_CS_INFO A380_customerInfoBoardDeCsInfo[] = {
-	/*{deviceCS, params, devType, devWidth, busWidth }*/
-#if defined(MV_INCLUDE_SPI)
-	{ SPI0_CS0, N_A, BOARD_DEV_SPI_FLASH, 8, 8 } /* SPI DEV */
-#endif
-};
-
-MV_BOARD_TDM_INFO A380_customerTdm880[] = { {0} };
-
-MV_BOARD_TDM_SPI_INFO A380_customerTdmSpiInfo[] = { {1} };
-
-MV_BOARD_MPP_INFO A380_customerInfoBoardMppConfigValue[] = {
-	{ {
-		  A380_CUSTOMER_MPP0_7,
-		  A380_CUSTOMER_MPP8_15,
-		  A380_CUSTOMER_MPP16_23,
-		  A380_CUSTOMER_MPP24_31,
-		  A380_CUSTOMER_MPP32_39,
-		  A380_CUSTOMER_MPP40_47,
-		  A380_CUSTOMER_MPP48_55,
-		  A380_CUSTOMER_MPP56_63
-	 } }
-};
-
-MV_BOARD_INFO A380_customer_board_info = {
-	.boardName				= "A380-CUSTOMER",
-	.numBoardMppTypeValue	= 0,
-	.pBoardModTypeValue		= NULL,
-	.pBoardMppConfigValue	= A380_customerInfoBoardMppConfigValue,
-	.intsGppMaskLow			= 0,
-	.intsGppMaskMid			= 0,
-	.intsGppMaskHigh		= 0,
-	.numBoardDeviceIf		= ARRSZ(A380_customerInfoBoardDeCsInfo),
-	.pDevCsInfo				= A380_customerInfoBoardDeCsInfo,
-	.numBoardTwsiDev		= ARRSZ(A380_customerInfoBoardTwsiDev),
-	.pBoardTwsiDev			= A380_customerInfoBoardTwsiDev,
-	.numBoardMacInfo		= ARRSZ(A380_customerInfoBoardMacInfo),
-	.pBoardMacInfo			= A380_customerInfoBoardMacInfo,
-	.numBoardGppInfo		= 0,
-	.pBoardGppInfo			= NULL,
-	.activeLedsNumber		= 0,
-	.pLedGppPin				= NULL,
-	.ledsPolarity			= 0,
-
-	/* PMU Power */
-	.pmuPwrUpPolarity		= 0,
-	.pmuPwrUpDelay			= 80000,
-
-	/* GPP values */
-	.gppOutEnValLow			= A380_CUSTOMER_GPP_OUT_ENA_LOW,
-	.gppOutEnValMid			= A380_CUSTOMER_GPP_OUT_ENA_MID,
-	.gppOutValLow			= A380_CUSTOMER_GPP_OUT_VAL_LOW,
-	.gppOutValMid			= A380_CUSTOMER_GPP_OUT_VAL_MID,
-	.gppPolarityValLow		= A380_CUSTOMER_GPP_POL_LOW,
-	.gppPolarityValMid		= A380_CUSTOMER_GPP_POL_MID,
-
-	/* TDM */
-	.numBoardTdmInfo		= {1},
-	.pBoardTdmInt2CsInfo		= {A380_customerTdm880},
-	.boardTdmInfoIndex		= 0,
-
-	/* NAND init params */
-	.nandFlashReadParams		= A380_CUSTOMER_BOARD_NAND_READ_PARAMS,
-	.nandFlashWriteParams		= A380_CUSTOMER_BOARD_NAND_WRITE_PARAMS,
-	.nandFlashControl		= A380_CUSTOMER_BOARD_NAND_CONTROL,
-	/* NOR init params */
-	.norFlashReadParams		= A380_CUSTOMER_BOARD_NOR_READ_PARAMS,
-	.norFlashWriteParams		= A380_CUSTOMER_BOARD_NOR_WRITE_PARAMS,
-	.numIoExp			= 0,
-	.pIoExp				= NULL,
-	.boardOptionsConfig		= MV_CONFIG_NO_MODULE
-};
-
-/*
- * All supported A380 boards
- */
-MV_BOARD_INFO *boardInfoTbl[] = {
+MV_BOARD_INFO *marvellBoardInfoTbl[] = {
 	&rdNas88f68XX_board_info,
 	&db88f68xx_board_info,
-	&rdWAP88f68XX_board_info,
-	&A380_customer_board_info
+	&rdWAP88f68XX_board_info
 };
-
diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h
index 583139f..008f52d 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h
@@ -67,22 +67,55 @@
 
 #include "mvSysHwConfig.h"
 
-
 /* Board specific configuration */
 /* ============================ */
 #ifndef MV_ASMLANGUAGE
-/* New board ID numbers */
-
-/* boards ID numbers */
-#define BOARD_ID_BASE			0x0
+/* Board ID numbers */
+
+/* Customer boards */
+#define CUTOMER_BOARD_ID_BASE		0x0
+#define ARMADA_38x_CUSTOMER_BOARD_ID0	(CUTOMER_BOARD_ID_BASE + 0)
+#define ARMADA_38x_CUSTOMER_BOARD_ID1	(CUTOMER_BOARD_ID_BASE + 1)
+#define MV_MAX_CUSTOMER_BOARD_ID	(CUTOMER_BOARD_ID_BASE + 2)
+#define MV_CUSTOMER_BOARD_NUM		(MV_MAX_CUSTOMER_BOARD_ID - CUTOMER_BOARD_ID_BASE + 1)
+
+/* Marvell boards */
+#define MARVELL_BOARD_ID_BASE		0x10
+#define RD_NAS_68XX_ID			(MARVELL_BOARD_ID_BASE + 0)
+#define DB_68XX_ID			(MARVELL_BOARD_ID_BASE + 1)
+#define RD_AP_68XX_ID			(MARVELL_BOARD_ID_BASE + 2)
+#define MV_MAX_MARVELL_BOARD_ID		(MARVELL_BOARD_ID_BASE + 3)
+#define MV_MARVELL_BOARD_NUM		(MV_MAX_MARVELL_BOARD_ID - MARVELL_BOARD_ID_BASE + 1)
 
-#define RD_NAS_68XX_ID			(BOARD_ID_BASE)
-#define DB_68XX_ID			(BOARD_ID_BASE + 1)
-#define RD_AP_68XX_ID			(BOARD_ID_BASE + 2)
-#define A380_CUSTOMER_ID		(BOARD_ID_BASE + 3)
-#define MV_MAX_BOARD_ID			(A380_CUSTOMER_ID + 1)
 #define MV_INVALID_BOARD_ID		0xFFFFFFFF
 
+/****************************** Customer Boards *******************************/
+
+/*******************************************************************************
+ * A38x Customer Board 0 - Based on RD-AP
+ *******************************************************************************/
+#define A38x_CUSTOMER_BOARD_0_MPP0_7		0x11111111
+#define A38x_CUSTOMER_BOARD_0_MPP8_15		0x11111111
+#define A38x_CUSTOMER_BOARD_0_MPP16_23		0x11203011
+#define A38x_CUSTOMER_BOARD_0_MPP24_31		0x22222111
+#define A38x_CUSTOMER_BOARD_0_MPP32_39		0x22200002
+#define A38x_CUSTOMER_BOARD_0_MPP40_47		0x30042022
+#define A38x_CUSTOMER_BOARD_0_MPP48_55		0x55550555
+#define A38x_CUSTOMER_BOARD_0_MPP56_63		0x00005550
+
+#define A38x_CUSTOMER_BOARD_0_GPP_OUT_ENA_LOW	(~(BIT1  | BIT4  | BIT6  | BIT7  | BIT8  | BIT9  | BIT10 | \
+						   BIT11 | BIT19 | BIT20 | BIT22 | BIT23 | BIT25 | BIT26 | \
+						   BIT27 | BIT29 | BIT30 | BIT31))
+#define A38x_CUSTOMER_BOARD_0_GPP_OUT_ENA_MID	(~(BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT15 | BIT16 | BIT17 | BIT18))
+#define A38x_CUSTOMER_BOARD_0_GPP_OUT_VAL_LOW	(~(BIT1  | BIT4  | BIT6  | BIT7  | BIT8  | BIT9  | BIT10 | \
+						   BIT11 | BIT19 | BIT22 | BIT23 | BIT25 | BIT26 | \
+						   BIT27 | BIT29 | BIT30 | BIT31))
+#define A38x_CUSTOMER_BOARD_0_GPP_OUT_VAL_MID	0x0
+#define A38x_CUSTOMER_BOARD_0_GPP_POL_LOW	0x0
+#define A38x_CUSTOMER_BOARD_0_GPP_POL_MID	0x0
+
+/******************************* Marvell Boards *******************************/
+
 /*******************************************************************************
  * A380 DB-88F6810 board */
 /******************************************************************************
@@ -133,7 +166,6 @@
 #define DB_88F68XX_GPP_POL_MID          0x0
 #define DB_88F68XX_GPP_POL_HIGH         0x0
 
-
 /*******************************************************************************
 * A380 RD-68XX board
 *******************************************************************************/
@@ -187,32 +219,6 @@
 #define RD_88F68XX_GPP_POL_LOW		0x0
 #define RD_88F68XX_GPP_POL_MID		0x0
 
-
-/*******************************************************************************
-* A380_CUSTOMER_ID - customer board
-*******************************************************************************/
-#define A380_CUSTOMER_MPP0_7		0x11111111
-#define A380_CUSTOMER_MPP8_15		0x11111111
-#define A380_CUSTOMER_MPP16_23		0x11244011
-#define A380_CUSTOMER_MPP24_31		0x22222111
-#define A380_CUSTOMER_MPP32_39		0x22200002
-#define A380_CUSTOMER_MPP40_47		0x30042022
-#define A380_CUSTOMER_MPP48_55		0x55550555
-#define A380_CUSTOMER_MPP56_63		0x00005550
-
-/* GPPs
-MPP#	NAME			IN/OUT
---------------------------------------
-19	TDM_reset		OUT
-25	Ethernet Reset		OUT			   29	PCIe0_RSTOUTn		OUT
-*/
-#define A380_CUSTOMER_GPP_OUT_ENA_LOW      (~(BIT19 | BIT25 | BIT29))
-#define A380_CUSTOMER_GPP_OUT_ENA_MID      0xFFFFFFFF
-#define A380_CUSTOMER_GPP_OUT_VAL_LOW      0x0
-#define A380_CUSTOMER_GPP_OUT_VAL_MID      0x0
-#define A380_CUSTOMER_GPP_POL_LOW          0x0
-#define A380_CUSTOMER_GPP_POL_MID          0x0
-
 #endif  /* MV_ASMLANGUAGE */
 
 #endif  /* __INCmvBoardEnvSpech */
-- 
1.7.5.4

