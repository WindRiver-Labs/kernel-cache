From d42d16b02215bec12d2c223771394a90623a384a Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Mon, 29 Jul 2013 09:53:39 -0400
Subject: [PATCH 0902/1825] pp2: Improve TXQ statistics collection and display

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 05a3007b204c26b1dad4c7bc2ac55c09bbebc057

	- remove txq_stats from "struct tx_queue"
	- use txq_stats in "struct txq_cpu_ctrl"
	- fix update statistics for aggregated TXQs
	- show statistics for aggregated TXQs

Change-Id: I55b7290436d4eae1aa2bc3216109581fbaaa67dd
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2861
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
Tested-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   38 ++++++++++++++-----
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h      |    9 ++---
 2 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 1976f09..8e7d327 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -1402,7 +1402,7 @@ inline u32 mv_eth_txq_done(struct eth_port *pp, struct tx_queue *txq_ctrl)
 	mv_eth_txq_bufs_free(pp, txq_cpu_ptr, tx_done);
 
 	txq_cpu_ptr->txq_count -= tx_done;
-	STAT_DBG(txq_ctrl->stats.txq_txdone += tx_done);
+	STAT_DBG(txq_cpu_ptr->stats.txq_txdone += tx_done);
 
 	return tx_done;
 }
@@ -1869,8 +1869,7 @@ static int mv_eth_tx(struct sk_buff *skb, struct net_device *dev)
 	mvPp2AggrTxqPendDescAdd(frags);
 
 	STAT_DBG(aggr_txq_ctrl->stats.txq_tx += frags);
-	STAT_DBG(txq_ctrl->stats.txq_tx += frags);
-	STAT_DBG(txq_ctrl->txq_cpu[cpu].stats.txq_tx += frags);
+	STAT_DBG(txq_cpu_ptr->stats.txq_tx += frags);
 
 out:
 	if (frags > 0) {
@@ -2175,7 +2174,8 @@ int mv_eth_tx_tso(struct sk_buff *skb, struct net_device *dev, struct mv_eth_tx_
 		wmb();
 		mvPp2AggrTxqPendDescAdd(seg_desc_num);
 
-		STAT_DBG(txq_ctrl->stats.txq_tx += seg_desc_num);
+		STAT_DBG(aggr_txq_ctrl->stats.txq_tx += seg_desc_num);
+		STAT_DBG(txq_cpu_ptr->stats.txq_tx += seg_desc_num);
 	}
 
 	STAT_DBG(priv->stats.tx_tso_bytes += total_bytes);
@@ -2226,7 +2226,6 @@ static void mv_eth_txq_done_force(struct eth_port *pp, struct tx_queue *txq_ctrl
 		txq_cpu_ptr = &txq_ctrl->txq_cpu[cpu];
 		tx_done = txq_cpu_ptr->txq_count;
 		mv_eth_txq_bufs_free(pp, &txq_ctrl->txq_cpu[cpu], tx_done);
-		STAT_DBG(txq_ctrl->stats.txq_txdone += tx_done);
 		STAT_DBG(txq_cpu_ptr->stats.txq_txdone += tx_done);
 
 		/* reset txq */
@@ -4860,7 +4859,26 @@ void mv_eth_port_stats_print(unsigned int port)
 	}
 #endif /* CONFIG_MV_ETH_STAT_DBG */
 
-	printk(KERN_ERR "\n");
+	pr_info("\nAggregated TXQs statistics\n");
+	pr_info("CPU:  count        send       no_resource\n\n");
+	for_each_possible_cpu(cpu) {
+		struct aggr_tx_queue *aggr_txq_ctrl = &aggr_txqs[cpu];
+		u32 txq_tx = 0, txq_err = 0;
+
+#ifdef CONFIG_MV_ETH_STAT_DBG
+		txq_tx = aggr_txq_ctrl->stats.txq_tx;
+#endif /* CONFIG_MV_ETH_STAT_DBG */
+#ifdef CONFIG_MV_ETH_STAT_ERR
+		txq_err = aggr_txq_ctrl->stats.txq_err;
+#endif /* CONFIG_MV_ETH_STAT_ERR */
+
+		pr_info(" %d:    %3d   %10u    %10u\n",
+		       cpu, aggr_txq_ctrl->txq_count, txq_tx, txq_err);
+
+		memset(&aggr_txq_ctrl->stats, 0, sizeof(aggr_txq_ctrl->stats));
+	}
+
+	pr_info("\nPhysical TXQs statistics\n");
 	printk(KERN_ERR "TXP-TXQ-CPU:  count        send          done      no_resource\n\n");
 
 	for (txp = 0; txp < pp->txp_num; txp++) {
@@ -4871,18 +4889,18 @@ void mv_eth_port_stats_print(unsigned int port)
 				txq_ctrl = &pp->txq_ctrl[txp * CONFIG_MV_ETH_TXQ + queue];
 				txq_cpu_ptr = &txq_ctrl->txq_cpu[cpu];
 #ifdef CONFIG_MV_ETH_STAT_DBG
-				txq_tx = txq_ctrl->stats.txq_tx;
-				txq_txdone =  txq_ctrl->stats.txq_txdone;
+				txq_tx = txq_cpu_ptr->stats.txq_tx;
+				txq_txdone =  txq_cpu_ptr->stats.txq_txdone;
 #endif /* CONFIG_MV_ETH_STAT_DBG */
 #ifdef CONFIG_MV_ETH_STAT_ERR
-				txq_err = txq_ctrl->stats.txq_err;
+				txq_err = txq_cpu_ptr->stats.txq_err;
 #endif /* CONFIG_MV_ETH_STAT_ERR */
 
 				printk(KERN_ERR " %d - %d - %d:   %3d   %10u    %10u    %10u\n",
 				       txp, queue, cpu, txq_cpu_ptr->txq_count, txq_tx,
 				       txq_txdone, txq_err);
 
-				memset(&txq_ctrl->stats, 0, sizeof(txq_ctrl->stats));
+				memset(&txq_cpu_ptr->stats, 0, sizeof(txq_cpu_ptr->stats));
 			}
 	}
 	memset(stat, 0, sizeof(struct port_stats));
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
index 9dcace3..bad4eb1 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
@@ -284,18 +284,16 @@ struct tx_queue {
 	int                 	txq_size;
 	int                 	hwf_size;
 	struct txq_cpu_ctrl	txq_cpu[CONFIG_NR_CPUS];
-	struct txq_stats    	stats;
 	spinlock_t          	queue_lock;
 	MV_U32              	txq_done_pkts_coal;
-	unsigned long       flags;
+	unsigned long           flags;
 };
 
 struct aggr_tx_queue {
 	MV_PP2_AGGR_TXQ_CTRL	*q;
 	int                 	txq_size;
 	int                 	txq_count;
-	struct txq_stats    	stats;
-	MV_U32              	txq_done_pkts_coal;
+	struct txq_stats        stats;
 };
 
 struct rx_queue {
@@ -325,7 +323,7 @@ struct napi_group_ctrl {
 struct cpu_ctrl {
 	struct eth_port        *pp;
 	struct napi_group_ctrl *napi_group;
-	int	                   txq;
+	int	               txq;
 	int                    cpu;
 	struct timer_list      tx_done_timer;
 	unsigned long          flags;
@@ -637,7 +635,6 @@ static inline int mv_eth_aggr_desc_num_check(struct aggr_tx_queue *aggr_txq_ctrl
 		STAT_ERR(aggr_txq_ctrl->stats.txq_err++);
 		return 0;
 	}
-
 	return 1;
 }
 
-- 
1.7.5.4

