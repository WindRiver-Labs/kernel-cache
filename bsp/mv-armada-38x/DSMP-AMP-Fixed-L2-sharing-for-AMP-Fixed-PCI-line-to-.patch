From b7064277628a557fd3d9e0473de6eaf88ba4c65f Mon Sep 17 00:00:00 2001
From: Tawfik Bayouk <tawfik@marvell.com>
Date: Tue, 21 Aug 2012 17:35:21 +0300
Subject: [PATCH 0173/1825] DSMP:AMP - Fixed L2 sharing for AMP Fixed PCI line
 to unit mapping in UnitMap Fixed ctrlEnv AMP
 files to work on VxWorks

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 6db890bc7b5f3532e4b2948220d34fae28461c8d

Change-Id: Ibfb764173bfe35b9e7236325aee60c69e1b6e8a3
Signed-off-by: Tawfik Bayouk <tawfik@marvell.com>
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-armadaxp/core.c |    3 +-
 arch/arm/mm/cache-aurora-l2.c |   44 +----------------------------------------
 2 files changed, 3 insertions(+), 44 deletions(-)

diff --git a/arch/arm/mach-armadaxp/core.c b/arch/arm/mach-armadaxp/core.c
index 7a558f7..28b89ef 100644
--- a/arch/arm/mach-armadaxp/core.c
+++ b/arch/arm/mach-armadaxp/core.c
@@ -1077,7 +1077,7 @@ void print_board_info(void)
 	printk("  Detected Tclk %d, SysClk %d, FabricClk %d, PClk %d\n",mvTclk, mvSysclk, mvCpuL2ClkGet(), mvCpuPclkGet());
 	printk("  LSP version: %s\n", LSP_VERSION);
 #ifdef CONFIG_MV_AMP_ENABLE
-	mvSocUnitMapPrint();
+	mvUnitMapPrint();
 #endif
 	printk("\n");
 }
@@ -1405,6 +1405,7 @@ static void __init axp_db_init(void)
 	/* Call Aurora/cpu special configurations */
 	cpu_fabric_common_init();
 
+
 	/* Select appropriate Board ID for Machine */
 #ifdef CONFIG_ARMADA_XP_REV_A0
 	gBoardId = DB_88F78XX0_BP_REV2_ID;
diff --git a/arch/arm/mm/cache-aurora-l2.c b/arch/arm/mm/cache-aurora-l2.c
index b6297c0..3e4673d 100644
--- a/arch/arm/mm/cache-aurora-l2.c
+++ b/arch/arm/mm/cache-aurora-l2.c
@@ -529,34 +529,6 @@ static void __init enable_cache(u32 mask)
 	set_cr(cr1 | mask);
 }
 
-#ifdef CONFIG_MV_AMP_ENABLE
-static bool is_l2_enabled(void)
-{
-	u32  reg;
-	bool enabled;
-
-	/* Read and return enable bit */
-	reg 	= readl(auroraL2_base + L2_CONTROL);
-	enabled = (reg & 0x1);
-
-	return enabled;
-}
-
-static void wait_l2_enabled(void)
-{
-	u32 usec_timeout = 1000;
-
-	while((is_l2_enabled() == 0) && (usec_timeout > 0))
-	{
-		udelay(1);
-		usec_timeout--;
-	}
-
-	if(usec_timeout == 0)
-		printk(KERN_ERR "AMP: Waiting too long for L2 enable\n");
-}
-#endif /* CONFIG_MV_AMP_ENABLE */
-
 static void __init enable_l2(void)
 {
 	u32 u, mask;
@@ -572,25 +544,11 @@ static void __init enable_l2(void)
 	__asm__ __volatile__("mcr p15, 1, %0, c15, c2, 0\n" : : "r" (u));
 
 	u = readl(auroraL2_base+L2_CONTROL);
-#ifdef CONFIG_MV_AMP_ENABLE
-	if ((!(u & 1)) || (is_primary_amp() == 0)) {
-#else
 	if (!(u & 1)) {
-#endif
 		printk(KERN_INFO "Aurora L2 Cache Enabled\n");
 		u |= 1;
 		mask = invalidate_and_disable_cache();
-
-#ifdef CONFIG_MV_AMP_ENABLE
-		mvHwBarrier(2); // Wait for all AMP groups YY - why 2 CPUs ??
-
-		if(is_primary_amp())
-			writel(u, auroraL2_base + L2_CONTROL);
-		else
-			wait_l2_enabled();
-#else
 		writel(u, auroraL2_base+L2_CONTROL);
-#endif
 		enable_cache(mask);
 	}
 }
@@ -734,9 +692,9 @@ int __init aurora_l2_init(void __iomem *base)
 
 		/* 6. Enable L2 cache
 		*/
+		enable_l2();
 	}
 
-	enable_l2();
 	auroraL2_enable = 1;
 
 	return 0;
-- 
1.7.5.4

