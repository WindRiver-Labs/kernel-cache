From 39b329040721c626fc63287370a52b141240a7a9 Mon Sep 17 00:00:00 2001
From: Yoni Farhadian <yonif@marvell.com>
Date: Wed, 1 May 2013 13:01:17 +0300
Subject: [PATCH 0625/1825] PPv2 - bringup fixes

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 8655467cafdb33666014a3479be71f954de5d303

Signed-off-by: Yoni Farhadian <yonif@marvell.com>
Change-Id: I40b93c8195e82083ea3902d091224b9cd272eedf
Reviewed-on: http://vgitil04.il.marvell.com:8080/1699
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c        |    2 +-
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h       |    2 +-
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvSpec.h       |    8 +-
 arch/arm/mach-avantalp/core.c                      |   28 +++-
 arch/arm/mach-avantalp/include/mach/avantalp.h     |    8 +-
 arch/arm/mach-avantalp/sysmap.c                    |    3 +-
 arch/arm/plat-armada/linux_oss/mvOs.h              |    7 +
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c    |   18 +-
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_gw_mgr.c      |    3 +
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   31 +--
 arch/arm/plat-armada/mv_hal/pp2/bm/mvBm.c          |    4 +-
 arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.c  |   13 ++
 arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.h  |    4 +
 .../plat-armada/mv_hal/pp2/common/mvPp2Common.c    |   16 ++-
 .../plat-armada/mv_hal/pp2/common/mvPp2Common.h    |    1 +
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2AddrDec.c |   17 +-
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h     |    2 +
 .../arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeDebug.c |  202 ++++++++++----------
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h |    5 +-
 .../arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c |   26 ++-
 .../plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h    |   23 ++-
 arch/arm/plat-armada/mv_hal/pp2/pme/mvPp2PmeHw.c   |    4 +-
 arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2Prs.c     |    3 +
 arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.c   |   21 ++-
 arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.h   |   21 ++-
 25 files changed, 287 insertions(+), 185 deletions(-)

diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
index e5f19a7..8199207 100755
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
@@ -768,7 +768,7 @@ MV_U32 mvCtrlEthMaxPortGet(MV_VOID)
 #ifdef CONFIG_MACH_AVANTA_LP_FPGA
 	return MV_FPGA_ETH_MAX_PORT;
 #else
-	return 0;
+	return 4;
 	/* fixme : #error "ETH_MAX_PORT should be defined!" */
 #endif
 }
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
index 6f38a18..434d074 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
@@ -302,7 +302,7 @@ typedef enum _mvTargetId {
 				*	     GPIO, MPP, and Miscellaneous */
 	PEX_TARGET_ID    = 4,  /* Port 4  -> PCI Express 0 and 1        */
 	CRYPT_TARGET_ID  = 9,  /* Port 9  -> Crypto Engine SRAM         */
-	PNC_BM_TARGET_ID = 12, /* Port 12 -> PNC + BM Unit              */
+	PP2_TARGET_ID = 15,    /* Port 12 -> PP2 Unit                   */
 	MAX_TARGETS_ID
 } MV_TARGET_ID;
 
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvSpec.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvSpec.h
index 66b4808..042e579 100755
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvSpec.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvSpec.h
@@ -469,7 +469,7 @@ typedef enum _mvTarget {
 	BOOT_ROM_CS,    /* 38 BOOT_ROM_CS			*/
 	DEV_BOOCS,      /* 39 DEV_BOOCS				*/
 	CRYPT0_ENG,     /* 41 Crypto0 Engine			*/
-	PNC_BM,         /* 43 PNC + BM				*/
+	PP2,         	/* 43 PP2				*/
 	MAX_TARGETS
 } MV_TARGET;
 
@@ -519,8 +519,7 @@ typedef enum _mvTarget {
 	{ MAIN_BOOT_ATTR, DEV_TARGET_ID },      /* Main Boot device      */ \
 	{ SEC_BOOT_ATTR, DEV_TARGET_ID  },      /* Secondary Boot device */ \
 	{ 0x01, CRYPT_TARGET_ID  },             /* CRYPT_ENG0            */ \
-	{ 0x05, CRYPT_TARGET_ID  },             /* CRYPT_ENG1            */ \
-	{ 0x00, PNC_BM_TARGET_ID },             /* PNC_BM                */ \
+	{ 0x00, PP2_TARGET_ID },                /* PP2                   */ \
 }
 
 #define CESA_TARGET_NAME_DEF    ("CRYPT_ENG0", "CRYPT_ENG1")
@@ -550,8 +549,7 @@ typedef enum _mvTarget {
 	"BOOT_ROM_CS",          /* BOOT_ROM_CS */	\
 	"DEV_BOOTCS",           /* DEV_BOOCS */		\
 	"CRYPT1_ENG",           /* CRYPT1_ENG */	\
-	"CRYPT2_ENG",           /* CRYPT2_ENG */	\
-	"PNC_BM"                /* PNC_BM */		\
+	"PP2"                   /* PP2 */		\
 }
 
 #endif /* MV_ASMLANGUAGE */
diff --git a/arch/arm/mach-avantalp/core.c b/arch/arm/mach-avantalp/core.c
index a1e3306..9be618f 100644
--- a/arch/arm/mach-avantalp/core.c
+++ b/arch/arm/mach-avantalp/core.c
@@ -529,7 +529,7 @@ static void mv_pp2_giga_pdev_register(struct platform_device *pdev)
 	plat_data->cpu_mask  = group_cpu_mask;
 	plat_data->phy_addr = mvBoardPhyAddrGet(port);
 	plat_data->lb_enable = mvBoardIsPortLoopback(port);
-	plat_data->is_sgmii = mvBoardIsPortInSgmii(port);
+	plat_data->is_sgmii = MV_FALSE/*mvBoardIsPortInSgmii(port)*/;
 	plat_data->is_rgmii = MV_FALSE;
 	plat_data->duplex = DUPLEX_FULL;
 
@@ -584,7 +584,7 @@ static struct platform_device mv_pp2_ge0_plat = {
 	},
 };
 
-static struct resource mv_pp2_ge2_resources[] = {
+static struct resource mv_pp2_ge1_resources[] = {
 	{
 		.start          = IRQ_GLOBAL_PP_PORT1_RXTX,
 		.end            = IRQ_GLOBAL_PP_PORT1_RXTX,
@@ -592,6 +592,29 @@ static struct resource mv_pp2_ge2_resources[] = {
 	},
 };
 
+static struct mv_pp2_pdata mv_pp2_ge1_pdata = {
+	.mtu		= 1500,
+	.phy_addr	= 0,
+};
+
+static struct platform_device mv_pp2_ge1_plat = {
+	.name			= MV_PP2_PORT_NAME,
+	.id			= 1,
+	.num_resources		= ARRAY_SIZE(mv_pp2_ge1_resources),
+	.resource		= mv_pp2_ge1_resources,
+	.dev			= {
+		.platform_data	= &mv_pp2_ge1_pdata,
+	},
+};
+
+static struct resource mv_pp2_ge2_resources[] = {
+	{
+		.start          = IRQ_GLOBAL_PP_PORT2_RXTX,
+		.end            = IRQ_GLOBAL_PP_PORT2_RXTX,
+		.flags          = IORESOURCE_IRQ,
+	},
+};
+
 static struct mv_pp2_pdata mv_pp2_ge2_pdata = {
 	.mtu		= 1500,
 	.phy_addr	= -1,
@@ -670,6 +693,7 @@ static void __init eth_init(void)
 
 #elif defined (CONFIG_MV_ETH_PP2)
 	mv_pp2_giga_pdev_register(&mv_pp2_ge0_plat);
+	mv_pp2_giga_pdev_register(&mv_pp2_ge1_plat);
 	mv_pp2_giga_pdev_register(&mv_pp2_ge2_plat);
 	mv_pp2_giga_pdev_register(&mv_pp2_ge3_plat);
 #endif
diff --git a/arch/arm/mach-avantalp/include/mach/avantalp.h b/arch/arm/mach-avantalp/include/mach/avantalp.h
index e97c8d8..d12154f 100644
--- a/arch/arm/mach-avantalp/include/mach/avantalp.h
+++ b/arch/arm/mach-avantalp/include/mach/avantalp.h
@@ -69,8 +69,8 @@
 #define XOR0_HIGH_PHYS_BASE		(INTER_REGS_PHYS_BASE | 0x60A00)
 #define XOR1_HIGH_PHYS_BASE		(INTER_REGS_PHYS_BASE | 0xF0B00)
 
-#define PNC_BM_PHYS_BASE		0xF4500000
-#define PNC_BM_SIZE			_1M
+#define PP2_PHYS_BASE			0xF4500000
+#define PP2_SIZE			_1M
 
 #define BOOTROM_PHYS_BASE		0xFFF00000
 #define BOOTROM_SIZE			_1M
@@ -107,7 +107,7 @@
 #define DEVICE_CS3_VIRT_BASE		0xFED00000
 
 #define CRYPT_ENG_VIRT_BASE(chan)	((chan == 0) ? 0xFEE00000 : 0xFEE10000)
-#define PNC_BM_VIRT_BASE		0xFEF00000
+#define PP2_VIRT_BASE			0xFEF00000
 #define BOOTROM_VIRT_BASE		0xFF000000
 #define LEGACY_NAND_VIRT_BASE		0xFF200000
 
@@ -128,7 +128,7 @@
 #define DEVICE_CS3_VIRT_BASE		0xFEA00000
 
 #define CRYPT_ENG_VIRT_BASE(chan)	((chan == 0) ? 0xFEB00000 : 0xFEB10000)
-#define PNC_BM_VIRT_BASE		0xFEC00000
+#define PP2_VIRT_BASE			0xFEC00000
 #define BOOTROM_VIRT_BASE		0xFED00000
 #define LEGACY_NAND_VIRT_BASE		0xFEF00000
 
diff --git a/arch/arm/mach-avantalp/sysmap.c b/arch/arm/mach-avantalp/sysmap.c
index 0f9c151..2079fc9 100644
--- a/arch/arm/mach-avantalp/sysmap.c
+++ b/arch/arm/mach-avantalp/sysmap.c
@@ -24,6 +24,7 @@
 struct map_desc MEM_TABLE[] = {
 	/* no use for pex mem remap */
 	{ INTER_REGS_VIRT_BASE,		__phys_to_pfn(INTER_REGS_PHYS_BASE),	SZ_1M,		MT_DEVICE },
+	{ PP2_VIRT_BASE,		__phys_to_pfn(PP2_PHYS_BASE),		SZ_1M, 	     	MT_DEVICE },
 };
 
 MV_CPU_DEC_WIN SYSMAP_ALP[] = {
@@ -53,7 +54,7 @@ MV_CPU_DEC_WIN SYSMAP_ALP[] = {
 	{{BOOTROM_PHYS_BASE,		0,	BOOTROM_SIZE		},	0x9,			DIS},	/* BOOTROM */
 	{{DEVICE_BOOTCS_PHYS_BASE,	0,	DEVICE_BOOTCS_SIZE	},	0xa,			DIS},	/* DEV_BOOCS */
 	{{CRYPT_ENG_PHYS_BASE(0),	0,	CRYPT_ENG_SIZE		},	0xc,			DIS},	/* CRYPT_ENG */
-	{{PNC_BM_PHYS_BASE,		0,	PNC_BM_SIZE		},	0xd,			DIS},	/* PNC_BM */
+	{{PP2_PHYS_BASE,		0,	PP2_SIZE		},	0xd,			EN},	/* PP2 */
 	{{TBL_TERM,			TBL_TERM,	TBL_TERM	},	TBL_TERM,		TBL_TERM}
 };
 
diff --git a/arch/arm/plat-armada/linux_oss/mvOs.h b/arch/arm/plat-armada/linux_oss/mvOs.h
index 5ce30ac..6677cfa 100644
--- a/arch/arm/plat-armada/linux_oss/mvOs.h
+++ b/arch/arm/plat-armada/linux_oss/mvOs.h
@@ -520,6 +520,13 @@ extern int reg_arry_index;
 #define MV_REG_VALUE(offset)          \
 	(MV_MEMIO32_READ((INTER_REGS_VIRT_BASE | (offset))))
 
+/* PPv2 specific reg read/write */
+#define MV_PP2_REG_READ(offset)             \
+	(MV_MEMIO_LE32_READ(PP2_VIRT_BASE | (offset)))
+#define MV_PP2_REG_WRITE(offset, val)    \
+	MV_MEMIO_LE32_WRITE((PP2_VIRT_BASE | (offset)), (val))
+
+
 #define MV_REG_READ(offset)             \
 	(MV_MEMIO_LE32_READ(INTER_REGS_VIRT_BASE | (offset)))
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c
index a760fef..1fd90bd 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c
@@ -914,14 +914,14 @@ const struct ethtool_ops mv_eth_tool_ops = {
 	.set_ringparam 				= mv_eth_tool_set_ringparam,
 	.get_pauseparam				= mv_eth_tool_get_pauseparam,
 	.set_pauseparam				= mv_eth_tool_set_pauseparam,
-	.get_rx_csum				= mv_eth_tool_get_rx_csum,
-	.set_rx_csum				= mv_eth_tool_set_rx_csum,
-	.get_tx_csum				= ethtool_op_get_tx_csum,
-	.set_tx_csum				= mv_eth_tool_set_tx_csum,
-	.get_sg					= ethtool_op_get_sg,
-	.set_sg					= ethtool_op_set_sg,
-	.get_tso				= ethtool_op_get_tso,
-	.set_tso				= mv_eth_tool_set_tso,
+//	.get_rx_csum				= mv_eth_tool_get_rx_csum,
+//	.set_rx_csum				= mv_eth_tool_set_rx_csum,
+//	.get_tx_csum				= ethtool_op_get_tx_csum,
+//	.set_tx_csum				= mv_eth_tool_set_tx_csum,
+//	.get_sg					= ethtool_op_get_sg,
+//	.set_sg					= ethtool_op_set_sg,
+//	.get_tso				= ethtool_op_get_tso,
+//	.set_tso				= mv_eth_tool_set_tso,
 	.get_strings				= mv_eth_tool_get_strings,/*TODO: complete implementation */
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(2, 6, 32)
 	.get_stats_count			= mv_eth_tool_get_stats_count,/*TODO: complete implementation */
@@ -930,5 +930,5 @@ const struct ethtool_ops mv_eth_tool_ops = {
 	.get_rxfh_indir				= mv_eth_tool_get_rxfh_indir,
 	.set_rxfh_indir				= mv_eth_tool_set_rxfh_indir,
 	.get_rxnfc                  		= mv_eth_tool_get_rxnfc,/*TODO new implementation*/
-	.set_rx_ntuple				= mv_eth_tool_set_rx_ntuple,/*TODO new implementation*/
+//	.set_rx_ntuple				= mv_eth_tool_set_rx_ntuple,/*TODO new implementation*/
 };
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_gw_mgr.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_gw_mgr.c
index 4caacd4..d5240d2 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_gw_mgr.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_gw_mgr.c
@@ -25,6 +25,8 @@ DISCLAIMED.  The GPL License provides additional details about this warranty
 disclaimer.
 *******************************************************************************/
 
+#ifdef CONFIG_MV_ETH_SWITCH
+
 #include "mvCommon.h"
 #include "mvDebug.h"
 #include "mv_netdev.h"
@@ -117,3 +119,4 @@ static int __init mv_gw_mgr_init(void)
 }
 
 late_initcall(mv_gw_mgr_init);
+#endif /* CONFIG_MV_ETH_SWITCH */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 67d55eb..272af53 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -1427,7 +1427,7 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq)
 
 	/* Get number of received packets */
 	rx_done = mvPp2RxqBusyDescNumGet(pp->port, rxq);
-	mvOsCacheIoSync();
+//	mvOsCacheIoSync();
 
 	if ((rx_todo > rx_done) || (rx_todo < 0))
 		rx_todo = rx_done;
@@ -1557,7 +1557,7 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq)
 	}
 
 	/* Update RxQ management counters */
-	mvOsCacheIoSync();
+//	mvOsCacheIoSync();
 	mvPp2RxqDescNumUpdate(pp->port, rxq, rx_done, rx_filled);
 
 	return rx_done;
@@ -2432,7 +2432,7 @@ irqreturn_t mv_eth_isr(int irq, void *dev_id)
 	if (pp->dbg_flags & MV_ETH_F_DBG_ISR) {
 		printk(KERN_ERR "%s: port=%d, cpu=%d, mask=0x%x, cause=0x%x\n",
 			__func__, pp->port, smp_processor_id(),
-			MV_REG_READ(MV_PP2_ISR_RX_TX_MASK_REG(MV_PPV2_PORT_PHYS(pp->port))),
+			mvPp2RdReg(MV_PP2_ISR_RX_TX_MASK_REG(MV_PPV2_PORT_PHYS(pp->port))),
 			mvPp2GbeIsrCauseRxTxGet(pp->port));
 	}
 #endif /* CONFIG_MV_ETH_DEBUG_CODE */
@@ -2551,7 +2551,7 @@ int mv_eth_poll(struct napi_struct *napi, int budget)
 	if (pp->dbg_flags & MV_ETH_F_DBG_POLL) {
 		printk(KERN_ERR "%s ENTER: port=%d, cpu=%d, mask=0x%x, cause=0x%x\n",
 			__func__, pp->port, smp_processor_id(),
-			MV_REG_READ(MV_PP2_ISR_RX_TX_MASK_REG(MV_PPV2_PORT_PHYS(pp->port))),
+			mvPp2RdReg(MV_PP2_ISR_RX_TX_MASK_REG(MV_PPV2_PORT_PHYS(pp->port))),
 			mvPp2GbeIsrCauseRxTxGet(pp->port));
 	}
 #endif /* CONFIG_MV_ETH_DEBUG_CODE */
@@ -2586,11 +2586,11 @@ int mv_eth_poll(struct napi_struct *napi, int budget)
 
 		if (causeRxTx & MV_PP2_CAUSE_MISC_SUM_MASK) {
 			printk(KERN_ERR "%s: misc event\n", __func__);
-			MV_REG_WRITE(MV_PP2_ISR_MISC_CAUSE_REG, 0);
+			mvPp2WrReg(MV_PP2_ISR_MISC_CAUSE_REG, 0);
 		}
 
 		causeRxTx &= ~MV_PP2_CAUSE_MISC_SUM_MASK;
-		MV_REG_WRITE(MV_PP2_ISR_RX_TX_CAUSE_REG(MV_PPV2_PORT_PHYS(pp->port)), causeRxTx);
+		mvPp2WrReg(MV_PP2_ISR_RX_TX_CAUSE_REG(MV_PPV2_PORT_PHYS(pp->port)), causeRxTx);
 	}
 	group_id = pp->cpu_config[smp_processor_id()]->napi_group_id;
 	napi_group = pp->napi_group[group_id];
@@ -2982,7 +2982,6 @@ static int	mv_eth_shared_probe(void)
 
 	/* Parser default initialization */
 	if (mv_eth_pnc_ctrl_en) {
-
 		if (mvPrsDefaultInit())
 			printk(KERN_ERR "%s: Warning PARSER default init failed\n", __func__);
 
@@ -3082,6 +3081,7 @@ struct net_device *mv_eth_netdev_init(struct eth_port *pp, int mtu, u8 *mac,
 	struct net_device *dev;
 	struct eth_netdev *dev_priv;
 	struct cpu_ctrl	*cpuCtrl;
+	struct resource *res;
 
 	dev = alloc_etherdev_mq(sizeof(struct eth_netdev), CONFIG_MV_ETH_TXQ);
 	if (!dev)
@@ -3094,12 +3094,10 @@ struct net_device *mv_eth_netdev_init(struct eth_port *pp, int mtu, u8 *mac,
 	memset(dev_priv, 0, sizeof(struct eth_netdev));
 	dev_priv->pp = pp;
 	pp->dev = dev;
-/*
-TODO:change
-	dev->irq = NET_TH_RXTX_IRQ_NUM(pp->port);
-*/
-	dev->irq = 101 + pp->port;
-/* TODO	pp->link_irq = 104;*/
+
+	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	BUG_ON(!res);
+	dev->irq = res->start;
 
 	dev->mtu = mtu;
 	memcpy(dev->dev_addr, mac, MV_MAC_ADDR_SIZE);
@@ -3398,13 +3396,6 @@ static int mv_eth_txq_create(struct eth_port *pp, struct tx_queue *txq_ctrl)
 		txq_cpu_ptr->shadow_txq_get_i = 0;
 	}
 
-#ifdef CONFIG_MV_ETH_HWF
-/*
-	TBD
-	mvNetaHwfTxqInit(pp->port, txq_ctrl->txp, txq_ctrl->txq);
-*/
-#endif /* CONFIG_MV_ETH_HWF */
-
 	return 0;
 
 no_mem:
diff --git a/arch/arm/plat-armada/mv_hal/pp2/bm/mvBm.c b/arch/arm/plat-armada/mv_hal/pp2/bm/mvBm.c
index 003dfae..10de501 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/bm/mvBm.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/bm/mvBm.c
@@ -302,11 +302,11 @@ void mvBmPoolDump(int pool, int mode)
 	mvOsPrintf("poolBase=%p (0x%x), capacity=%d, buf_num=%d, buf_size=%d\n",
 		   pBmPool->pVirt, (unsigned)pBmPool->physAddr, pBmPool->capacity, pBmPool->bufNum, pBmPool->bufSize);
 
-	regVal = MV_REG_READ(MV_BM_POOL_READ_PTR_REG(pool));
+	regVal = mvPp2RdReg(MV_BM_POOL_READ_PTR_REG(pool));
 	setReadIdx = ((regVal & MV_BM_POOL_SET_READ_PTR_MASK) >> MV_BM_POOL_SET_READ_PTR_OFFS) / 4;
 	getReadIdx = ((regVal & MV_BM_POOL_GET_READ_PTR_MASK) >> MV_BM_POOL_GET_READ_PTR_OFFS) / 4;
 
-	regVal = MV_REG_READ(MV_BM_POOL_WRITE_PTR_REG(pool));
+	regVal = mvPp2RdReg(MV_BM_POOL_WRITE_PTR_REG(pool));
 	setWriteIdx = ((regVal & MV_BM_POOL_SET_WRITE_PTR_MASK) >> MV_BM_POOL_SET_WRITE_PTR_OFFS) / 4;
 	getWriteIdx = ((regVal & MV_BM_POOL_GET_WRITE_PTR_MASK) >> MV_BM_POOL_GET_WRITE_PTR_OFFS) / 4;
 	if (getWriteIdx >= getReadIdx)
diff --git a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.c b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.c
index fcf8a08..8cc6eaa 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.c
@@ -689,6 +689,18 @@ int 	mvPp2ClsC2HwDump()
 	}
 	return MV_OK;
 }
+
+/*-------------------------------------------------------------------------------*/
+
+int mvPp2ClsC2SwTcam(int enable)
+{
+	POS_RANGE_VALIDATE(enable, 1);
+
+	mvPp2WrReg(MV_PP2_CLS2_TCAM_CTRL_REG, enable);
+
+	return MV_OK;
+}
+
 /*-------------------------------------------------------------------------------*/
 int mvPp2ClsC2TcamByteSet(MV_PP2_CLS_C2_ENTRY *c2, unsigned int offs, unsigned char byte, unsigned char enable)
 {
@@ -1126,5 +1138,6 @@ int	mvPp2ClsC2Init(void)
 {
 	mvPp2ClsC2QosHwClearAll();
 	mvPp2ClsC2HwClearAll();
+	mvPp2ClsC2SwTcam(1);
 	return MV_OK;
 }
diff --git a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.h b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.h
index 6cba557..1eb5fce 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2Cls2Hw.h
@@ -135,6 +135,9 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define MV_PP2_CLS2_ACT_DUP_ATTR_REG			(MV_PP2_REG_BASE + 0x1B6C)
 
 /*-------------------------------------------------------------------------------*/
+#define MV_PP2_CLS2_TCAM_CTRL_REG			(MV_PP2_REG_BASE + 0x1B90)
+#define MV_PP2_CLS2_TCAM_CTRL_EN				0
+/*-------------------------------------------------------------------------------*/
 /*		Classifier C2 QOS Table	(DSCP/PRI Table)			 */
 /*-------------------------------------------------------------------------------*/
 #define QOS_TBL_LINE_NUM_PRI				(8)
@@ -230,6 +233,7 @@ typedef struct mvPp2ClsC2Entry {
 	} sram;
 } MV_PP2_CLS_C2_ENTRY;
 
+int 	mvPp2ClsC2SwTcam(int enable);
 int 	mvPp2ClsC2HwWrite(int index, MV_PP2_CLS_C2_ENTRY *c2);
 int 	mvPp2ClsC2HwRead(int index, MV_PP2_CLS_C2_ENTRY *c2);
 int 	mvPp2ClsC2SwDump(MV_PP2_CLS_C2_ENTRY *c2);
diff --git a/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.c b/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.c
index e6c3e17..f011594 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.c
@@ -68,7 +68,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 int mvPp2WrReg(unsigned int offset, unsigned int  val)
 {
-	MV_REG_WRITE(offset, val);
+	MV_PP2_REG_WRITE(offset, val);
 #if defined(PP2_REG_WRITE_TRACE)
 	mvOsPrintf("REG:0x%08X	W:0x%08X\n", offset, val);
 #endif
@@ -77,7 +77,7 @@ int mvPp2WrReg(unsigned int offset, unsigned int  val)
 
 int mvPp2RdReg(unsigned int offset)
 {
-	unsigned int val = MV_REG_READ(offset);
+	unsigned int val = MV_PP2_REG_READ(offset);
 
 #if defined(PP2_REG_READ_TRACE)
 	mvOsPrintf("REG:0x%08X	R:0x%08X\n", offset, val);
@@ -88,13 +88,21 @@ int mvPp2RdReg(unsigned int offset)
 int mvPp2SPrintReg(char *buf, unsigned int  reg_addr, char *reg_name)
 
 {
-	return mvOsSPrintf(buf, "  %-32s: 0x%x = 0x%08x\n", reg_name, reg_addr, MV_REG_READ(reg_addr));
+	return mvOsSPrintf(buf, "  %-32s: 0x%x = 0x%08x\n", reg_name, reg_addr, mvPp2RdReg(reg_addr));
 }
 
 int mvPp2PrintReg(unsigned int reg_addr, char *reg_name)
 
 {
-	return mvOsPrintf("  %-32s: 0x%x = 0x%08x\n", reg_name, reg_addr, MV_REG_READ(reg_addr));
+	return mvOsPrintf("  %-32s: 0x%x = 0x%08x\n", reg_name, reg_addr, mvPp2RdReg(reg_addr));
+}
+
+void mvPp2RegPrint2(MV_U32 reg_addr, char *reg_name, MV_U32 index)
+{
+	char buf[64];
+
+	mvOsSPrintf(buf, "%s[%d]", reg_name, index);
+	mvOsPrintf("  %-32s: 0x%x = 0x%08x\n", buf, reg_addr, mvPp2RdReg(reg_addr));
 }
 
 void mvEthRegPrint(MV_U32 reg_addr, char *reg_name)
diff --git a/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.h b/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.h
index 41a71ef..053d498 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/common/mvPp2Common.h
@@ -112,6 +112,7 @@ int mvPp2RdReg(unsigned int offset);
 int mvPp2WrReg(unsigned int offset, unsigned int  val);
 
 int mvPp2PrintReg(unsigned int  reg_addr, char *reg_name);
+void mvPp2RegPrint2(MV_U32 reg_addr, char *reg_name, MV_U32 index);
 
 int mvPp2SPrintReg(char *buf, unsigned int  reg_addr, char *reg_name);
 
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2AddrDec.c b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2AddrDec.c
index e709276..75676e7 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2AddrDec.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2AddrDec.c
@@ -105,15 +105,12 @@ static MV_STATUS ethWinOverlapDetect(MV_U32 winNum, MV_ADDR_WIN *pAddrWin);
 *******************************************************************************/
 MV_STATUS mvPp2WinInit(MV_U32 dummy/*backward compability*/, MV_UNIT_WIN_INFO *addrWinMap)
 {
-	MV_U32 winNum, winPrioIndex = 0, regVal = 0;
+	MV_U32 winNum, winPrioIndex = 0;
 	MV_UNIT_WIN_INFO *addrDecWin;
 
 	/* Initiate Ethernet address decode */
 	/* First disable all address decode windows */
-	for (winNum = 0; winNum < ETH_MAX_DECODE_WIN; winNum++)
-		regVal |= MV_BIT_MASK(winNum);
-
-	mvPp2WrReg(ETH_BASE_ADDR_ENABLE_REG, regVal);
+	mvPp2WrReg(ETH_BASE_ADDR_ENABLE_REG, 0);
 
 	/* Go through all windows in user table until table terminator      */
 	for (winNum = 0; ((ethAddrDecPrioTab[winPrioIndex] != TBL_TERM) && (winNum < ETH_MAX_DECODE_WIN));) {
@@ -187,7 +184,7 @@ MV_STATUS mvPp2WinWrite(MV_U32 dummy/*backward compability*/, MV_U32 winNum, MV_
 	}
 
 	baseReg = (pAddrDecWin->addrWin.baseLow & ETH_WIN_BASE_MASK);
-	sizeReg = MV_REG_READ(ETH_WIN_SIZE_REG(winNum));
+	sizeReg = mvPp2RdReg(ETH_WIN_SIZE_REG(winNum));
 
 	/* set size */
 	alignment = 1 << ETH_WIN_SIZE_OFFS;
@@ -247,7 +244,7 @@ static MV_STATUS ethWinOverlapDetect(MV_U32 winNum, MV_ADDR_WIN *pAddrWin)
 	MV_UNIT_WIN_INFO addrDecWin;
 
 	/* Read base address enable register. Do not check disabled windows     */
-	baseAddrEnableReg = MV_REG_READ(ETH_BASE_ADDR_ENABLE_REG);
+	baseAddrEnableReg = mvPp2RdReg(ETH_BASE_ADDR_ENABLE_REG);
 
 	for (winNumIndex = 0; winNumIndex < ETH_MAX_DECODE_WIN; winNumIndex++) {
 		/* Do not check window itself           */
@@ -298,8 +295,8 @@ MV_STATUS mvPp2WinRead(MV_U32 dummy/*backward compability*/, MV_U32 winNum, MV_U
 		return MV_NOT_SUPPORTED;
 	}
 
-	baseReg = MV_REG_READ(ETH_WIN_BASE_REG(winNum));
-	sizeReg = MV_REG_READ(ETH_WIN_SIZE_REG(winNum));
+	baseReg = mvPp2RdReg(ETH_WIN_BASE_REG(winNum));
+	sizeReg = mvPp2RdReg(ETH_WIN_SIZE_REG(winNum));
 
 	alignment = 1 << ETH_WIN_SIZE_OFFS;
 	size = (sizeReg & ETH_WIN_SIZE_MASK) >> ETH_WIN_SIZE_OFFS;
@@ -314,7 +311,7 @@ MV_STATUS mvPp2WinRead(MV_U32 dummy/*backward compability*/, MV_U32 winNum, MV_U
 	pAddrDecWin->targetId = (baseReg & ETH_WIN_TARGET_MASK) >> ETH_WIN_TARGET_OFFS;
 
 	/* Check if window is enabled   */
-	if (~(MV_REG_READ(ETH_BASE_ADDR_ENABLE_REG)) & (1 << winNum))
+	if (~(mvPp2RdReg(ETH_BASE_ADDR_ENABLE_REG)) & (1 << winNum))
 		pAddrDecWin->enable = MV_TRUE;
 	else
 		pAddrDecWin->enable = MV_FALSE;
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
index b9f3ee9..0ab0ec4 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
@@ -76,6 +76,8 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "pp2/common/mvPp2Common.h"
 #include "pp2/prs/mvPp2PrsHw.h"
 
+#define GBE_PORT(n)					(n)
+#define GE_PHY(n)					(n)
 
 #define PP2_CPU_CODE_IS_RX_SPECIAL(cpu_code)		((cpu_code) & RI_CPU_CODE_RX_SPEC_VAL)
 
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeDebug.c b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeDebug.c
index a0234ce..27d1c2b 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeDebug.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeDebug.c
@@ -80,18 +80,18 @@ MV_VOID mvPp2RxDmaRegsPrint(void)
 	mvOsPrintf("\n[RX DMA regs]\n");
 
 	for (i = 0; i < MV_BM_POOLS; i++)
-		mvEthRegPrint2(MV_PP2_POOL_BUF_SIZE_REG(i), "MV_PP2_POOL_BUF_SIZE_REG", i);
+		mvPp2RegPrint2(MV_PP2_POOL_BUF_SIZE_REG(i), "MV_PP2_POOL_BUF_SIZE_REG", i);
 
 	mvOsPrintf("\n");
 
 	for (i = 0; i < MV_ETH_RXQ_TOTAL_NUM; i++)
-		mvEthRegPrint2(MV_PP2_RXQ_CONFIG_REG(i), "MV_PP2_RXQ_CONFIG_REG", i);
+		mvPp2RegPrint2(MV_PP2_RXQ_CONFIG_REG(i), "MV_PP2_RXQ_CONFIG_REG", i);
 
 	mvOsPrintf("\n");
 
 	for (i = 0; i < MV_PP2_MAX_PORTS; i++) {
-		mvEthRegPrint2(MV_PP2_PORT_HWF_CONFIG_REG(i), "MV_PP2_PORT_HWF_CONFIG_REG", i);
-		mvEthRegPrint2(MV_PP2_RX_CTRL_REG(i), "MV_PP2_RX_CTRL_REG", i);
+		mvPp2RegPrint2(MV_PP2_PORT_HWF_CONFIG_REG(i), "MV_PP2_PORT_HWF_CONFIG_REG", i);
+		mvPp2RegPrint2(MV_PP2_RX_CTRL_REG(i), "MV_PP2_RX_CTRL_REG", i);
 	}
 	mvOsPrintf("\n");
 }
@@ -107,21 +107,21 @@ MV_VOID mvPp2DescMgrRegsRxPrint(void)
 
 	for (i = 0; i < MV_ETH_RXQ_TOTAL_NUM; i++) {
 		mvOsPrintf("RXQ %d:\n", i);
-		MV_REG_WRITE(MV_PP2_RXQ_NUM_REG, i);
-		val1 = MV_REG_READ(MV_PP2_RXQ_DESC_ADDR_REG);
-		val = MV_REG_READ(MV_PP2_RXQ_DESC_SIZE_REG);
+		mvPp2WrReg(MV_PP2_RXQ_NUM_REG, i);
+		val1 = mvPp2RdReg(MV_PP2_RXQ_DESC_ADDR_REG);
+		val = mvPp2RdReg(MV_PP2_RXQ_DESC_SIZE_REG);
 		mvOsPrintf("   addr reg: 0x%x,   size reg: 0x%x\n", val1, val);
 		mvOsPrintf("   * address: %d,  size: %d,  L2 deposit: %d\n", val1,
 				val & MV_PP2_RXQ_DESC_SIZE_MASK,
 				(val & MV_PP2_RXQ_L2_DEPOSIT_MASK) >> MV_PP2_RXQ_L2_DEPOSIT_OFFSET);
 
-		val = MV_REG_READ(MV_PP2_RXQ_STATUS_REG(i));
+		val = mvPp2RdReg(MV_PP2_RXQ_STATUS_REG(i));
 		mvOsPrintf("   status reg: 0x%x\n", val);
 		mvOsPrintf("   * occupied: %d,  non-occupied: %d\n",
 				(val & MV_PP2_RXQ_OCCUPIED_MASK) >> MV_PP2_RXQ_OCCUPIED_OFFSET,
 				(val & MV_PP2_RXQ_NON_OCCUPIED_MASK) >> MV_PP2_RXQ_NON_OCCUPIED_OFFSET);
 
-		val = MV_REG_READ(MV_PP2_RXQ_THRESH_REG);
+		val = mvPp2RdReg(MV_PP2_RXQ_THRESH_REG);
 		mvOsPrintf("   rx thresh reg: 0x%x\n", val);
 		mvOsPrintf("   * occupied thrsh: %d,  non-occupied thrsh: %d\n",
 				(val & MV_PP2_OCCUPIED_THRESH_MASK) >> MV_PP2_OCCUPIED_THRESH_OFFSET,
@@ -139,24 +139,24 @@ MV_VOID mvPp2DescMgrRegsTxPrint(void)
 
 	for (i = 0; i < MV_PP2_TXQ_TOTAL_NUM; i++) {
 		mvOsPrintf("TXQ %d:\n", i);
-		MV_REG_WRITE(MV_PP2_TXQ_NUM_REG, i);
-		val1 = MV_REG_READ(MV_PP2_TXQ_DESC_ADDR_REG);
-		val = MV_REG_READ(MV_PP2_TXQ_DESC_SIZE_REG);
-		val2 = MV_REG_READ(MV_PP2_TXQ_DESC_HWF_SIZE_REG);
+		mvPp2WrReg(MV_PP2_TXQ_NUM_REG, i);
+		val1 = mvPp2RdReg(MV_PP2_TXQ_DESC_ADDR_REG);
+		val = mvPp2RdReg(MV_PP2_TXQ_DESC_SIZE_REG);
+		val2 = mvPp2RdReg(MV_PP2_TXQ_DESC_HWF_SIZE_REG);
 		mvOsPrintf("   addr reg: 0x%x,   size reg: 0x%x,  hwf size reg: 0x%x\n", val1, val, val2);
 		mvOsPrintf("   * address: %d,  size: %d,   hwf size: %d\n", val1, val, val2);
 
-		val = MV_REG_READ(MV_PP2_TXQ_SENT_REG(i));
+		val = mvPp2RdReg(MV_PP2_TXQ_SENT_REG(i));
 		mvOsPrintf("   status reg: 0x%x\n", val);
 		mvOsPrintf("   * transmitted count: %d\n",
 				(val & MV_PP2_TRANSMITTED_COUNT_MASK) >> MV_PP2_TRANSMITTED_COUNT_OFFSET);
 
-		val = MV_REG_READ(MV_PP2_TXQ_THRESH_REG);
+		val = mvPp2RdReg(MV_PP2_TXQ_THRESH_REG);
 		mvOsPrintf("   tx thresh reg: 0x%x\n", val);
 		mvOsPrintf("   * transmitted thrsh: %d\n",
 				(val & MV_PP2_TRANSMITTED_THRESH_MASK) >> MV_PP2_TRANSMITTED_THRESH_OFFSET);
 
-		val = MV_REG_READ(MV_PP2_TXQ_PENDING_REG);
+		val = mvPp2RdReg(MV_PP2_TXQ_PENDING_REG);
 		mvOsPrintf("   desc status reg: 0x%x\n", val);
 		mvOsPrintf("   * pending: %d,  hwf pending: %d\n",
 				(val & MV_PP2_TXQ_PENDING_MASK) >> MV_PP2_TXQ_PENDING_OFFSET,
@@ -174,10 +174,10 @@ MV_VOID mvPp2DescMgrRegsAggrTxPrint(void)
 
 	for (i = 0; i < CONFIG_NR_CPUS; i++) {
 		mvOsPrintf("CPU %d:\n", i);
-		MV_REG_WRITE(MV_PP2_TXQ_NUM_REG, i);
-		val1 = MV_REG_READ(MV_PP2_AGGR_TXQ_DESC_ADDR_REG(i));
-		val = MV_REG_READ(MV_PP2_AGGR_TXQ_DESC_SIZE_REG(i));
-		val2 = MV_REG_READ(MV_PP2_AGGR_TXQ_STATUS_REG(i));
+		mvPp2WrReg(MV_PP2_TXQ_NUM_REG, i);
+		val1 = mvPp2RdReg(MV_PP2_AGGR_TXQ_DESC_ADDR_REG(i));
+		val = mvPp2RdReg(MV_PP2_AGGR_TXQ_DESC_SIZE_REG(i));
+		val2 = mvPp2RdReg(MV_PP2_AGGR_TXQ_STATUS_REG(i));
 		mvOsPrintf("   addr reg: 0x%x,   size reg: 0x%x,  status reg: 0x%x\n", val1, val, val2);
 		mvOsPrintf("   * address: %d,  size: %d,   pending: %d\n", val1, val, val2);
 	}
@@ -193,18 +193,18 @@ MV_VOID mvPp2AddressDecodeRegsPrint(void)
 
 	for (i = 0; i < ETH_MAX_DECODE_WIN; i++) {
 		mvOsPrintf("window %d:\n", i);
-		val = MV_REG_READ(ETH_WIN_BASE_REG(i));
+		val = mvPp2RdReg(ETH_WIN_BASE_REG(i));
 		mvOsPrintf("   win base reg: 0x%x\n", val);
 		mvOsPrintf("   * target :%d,  attr: %d,  base addr: %d\n", val & ETH_WIN_TARGET_MASK,
 			(val & ETH_WIN_ATTR_MASK) >> ETH_WIN_ATTR_OFFS, (val & ETH_WIN_BASE_MASK) >> ETH_WIN_BASE_OFFS);
 
-		val = MV_REG_READ(ETH_WIN_SIZE_REG(i));
+		val = mvPp2RdReg(ETH_WIN_SIZE_REG(i));
 		mvOsPrintf("   win size reg: 0x%x\n", val);
 		mvOsPrintf("   * size: %d\n", (val & ETH_WIN_SIZE_MASK) >> ETH_WIN_SIZE_OFFS);
-		val = MV_REG_READ(ETH_WIN_REMAP_REG(i));
+		val = mvPp2RdReg(ETH_WIN_REMAP_REG(i));
 	}
 
-	val = MV_REG_READ(ETH_BASE_ADDR_ENABLE_REG);
+	val = mvPp2RdReg(ETH_BASE_ADDR_ENABLE_REG);
 	mvOsPrintf("base addr enable reg: 0x%x\n", val);
 	mvOsPrintf("\n");
 }
@@ -343,23 +343,23 @@ void mvPp2IsrRegs(int port)
 	physPort = MV_PPV2_PORT_PHYS(port);
 
 	mvOsPrintf("\n[PPv2 ISR registers: port=%d - %s]\n", port, MV_PON_PORT(port) ? "PON" : "GMAC");
-	mvEthRegPrint(MV_PP2_ISR_RXQ_GROUP_REG(port), "MV_PP2_ISR_RXQ_GROUP_REG");
-	mvEthRegPrint(MV_PP2_ISR_ENABLE_REG(port), "MV_PP2_ISR_ENABLE_REG");
-	mvEthRegPrint(MV_PP2_ISR_RX_TX_CAUSE_REG(physPort), "MV_PP2_ISR_RX_TX_CAUSE_REG");
-	mvEthRegPrint(MV_PP2_ISR_RX_TX_MASK_REG(physPort), "MV_PP2_ISR_RX_TX_MASK_REG");
+	mvPp2PrintReg(MV_PP2_ISR_RXQ_GROUP_REG(port), "MV_PP2_ISR_RXQ_GROUP_REG");
+	mvPp2PrintReg(MV_PP2_ISR_ENABLE_REG(port), "MV_PP2_ISR_ENABLE_REG");
+	mvPp2PrintReg(MV_PP2_ISR_RX_TX_CAUSE_REG(physPort), "MV_PP2_ISR_RX_TX_CAUSE_REG");
+	mvPp2PrintReg(MV_PP2_ISR_RX_TX_MASK_REG(physPort), "MV_PP2_ISR_RX_TX_MASK_REG");
 
-	mvEthRegPrint(MV_PP2_ISR_RX_ERR_CAUSE_REG(physPort), "MV_PP2_ISR_RX_ERR_CAUSE_REG");
-	mvEthRegPrint(MV_PP2_ISR_RX_ERR_MASK_REG(physPort), "MV_PP2_ISR_RX_ERR_MASK_REG");
+	mvPp2PrintReg(MV_PP2_ISR_RX_ERR_CAUSE_REG(physPort), "MV_PP2_ISR_RX_ERR_CAUSE_REG");
+	mvPp2PrintReg(MV_PP2_ISR_RX_ERR_MASK_REG(physPort), "MV_PP2_ISR_RX_ERR_MASK_REG");
 
 	if (MV_PON_PORT(port)) {
-		mvEthRegPrint(MV_PP2_ISR_PON_TX_UNDR_CAUSE_REG, "MV_PP2_ISR_PON_TX_UNDR_CAUSE_REG");
-		mvEthRegPrint(MV_PP2_ISR_PON_TX_UNDR_MASK_REG, "MV_PP2_ISR_PON_TX_UNDR_MASK_REG");
+		mvPp2PrintReg(MV_PP2_ISR_PON_TX_UNDR_CAUSE_REG, "MV_PP2_ISR_PON_TX_UNDR_CAUSE_REG");
+		mvPp2PrintReg(MV_PP2_ISR_PON_TX_UNDR_MASK_REG, "MV_PP2_ISR_PON_TX_UNDR_MASK_REG");
 	} else {
-		mvEthRegPrint(MV_PP2_ISR_TX_ERR_CAUSE_REG(physPort), "MV_PP2_ISR_TX_ERR_CAUSE_REG");
-		mvEthRegPrint(MV_PP2_ISR_TX_ERR_MASK_REG(physPort), "MV_PP2_ISR_TX_ERR_MASK_REG");
+		mvPp2PrintReg(MV_PP2_ISR_TX_ERR_CAUSE_REG(physPort), "MV_PP2_ISR_TX_ERR_CAUSE_REG");
+		mvPp2PrintReg(MV_PP2_ISR_TX_ERR_MASK_REG(physPort), "MV_PP2_ISR_TX_ERR_MASK_REG");
 	}
-	mvEthRegPrint(MV_PP2_ISR_MISC_CAUSE_REG, "MV_PP2_ISR_MISC_CAUSE_REG");
-	mvEthRegPrint(MV_PP2_ISR_MISC_MASK_REG, "MV_PP2_ISR_MISC_MASK_REG");
+	mvPp2PrintReg(MV_PP2_ISR_MISC_CAUSE_REG, "MV_PP2_ISR_MISC_CAUSE_REG");
+	mvPp2PrintReg(MV_PP2_ISR_MISC_MASK_REG, "MV_PP2_ISR_MISC_MASK_REG");
 }
 
 void mvPp2PhysRxqRegs(int rxq)
@@ -369,17 +369,17 @@ void mvPp2PhysRxqRegs(int rxq)
 	if (mvPp2MaxCheck(rxq, MV_ETH_RXQ_TOTAL_NUM, "physical rxq"))
 		return;
 
-	MV_REG_WRITE(MV_PP2_RXQ_NUM_REG, rxq);
-	mvEthRegPrint(MV_PP2_RXQ_NUM_REG, "MV_PP2_RXQ_NUM_REG");
-	mvEthRegPrint(MV_PP2_RXQ_DESC_ADDR_REG, "MV_PP2_RXQ_DESC_ADDR_REG");
-	mvEthRegPrint(MV_PP2_RXQ_DESC_SIZE_REG, "MV_PP2_RXQ_DESC_SIZE_REG");
-	mvEthRegPrint(MV_PP2_RXQ_STATUS_REG(rxq), "MV_PP2_RXQ_STATUS_REG");
-	mvEthRegPrint(MV_PP2_RXQ_THRESH_REG, "MV_PP2_RXQ_THRESH_REG");
-	mvEthRegPrint(MV_PP2_RXQ_INDEX_REG, "MV_PP2_RXQ_INDEX_REG");
-	mvEthRegPrint(MV_PP2_RXQ_CONFIG_REG(rxq), "MV_PP2_RXQ_CONFIG_REG");
-	mvEthRegPrint(MV_PP2_RXQ_SNOOP_REG(rxq), "MV_PP2_RXQ_SNOOP_REG");
-	mvEthRegPrint(MV_PP2_RX_EARLY_DROP_REG(rxq), "MV_PP2_RX_EARLY_DROP_REG");
-	mvEthRegPrint(MV_PP2_RX_DESC_DROP_REG(rxq), "MV_PP2_RX_DESC_DROP_REG");
+	mvPp2WrReg(MV_PP2_RXQ_NUM_REG, rxq);
+	mvPp2PrintReg(MV_PP2_RXQ_NUM_REG, "MV_PP2_RXQ_NUM_REG");
+	mvPp2PrintReg(MV_PP2_RXQ_DESC_ADDR_REG, "MV_PP2_RXQ_DESC_ADDR_REG");
+	mvPp2PrintReg(MV_PP2_RXQ_DESC_SIZE_REG, "MV_PP2_RXQ_DESC_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_RXQ_STATUS_REG(rxq), "MV_PP2_RXQ_STATUS_REG");
+	mvPp2PrintReg(MV_PP2_RXQ_THRESH_REG, "MV_PP2_RXQ_THRESH_REG");
+	mvPp2PrintReg(MV_PP2_RXQ_INDEX_REG, "MV_PP2_RXQ_INDEX_REG");
+	mvPp2PrintReg(MV_PP2_RXQ_CONFIG_REG(rxq), "MV_PP2_RXQ_CONFIG_REG");
+	mvPp2PrintReg(MV_PP2_RXQ_SNOOP_REG(rxq), "MV_PP2_RXQ_SNOOP_REG");
+	mvPp2PrintReg(MV_PP2_RX_EARLY_DROP_REG(rxq), "MV_PP2_RX_EARLY_DROP_REG");
+	mvPp2PrintReg(MV_PP2_RX_DESC_DROP_REG(rxq), "MV_PP2_RX_DESC_DROP_REG");
 }
 
 void mvPp2PhysTxqRegs(int txq)
@@ -389,16 +389,16 @@ void mvPp2PhysTxqRegs(int txq)
 	if (mvPp2MaxCheck(txq, MV_PP2_TXQ_TOTAL_NUM, "physical txq"))
 		return;
 
-	MV_REG_WRITE(MV_PP2_TXQ_NUM_REG, txq);
-	mvEthRegPrint(MV_PP2_TXQ_NUM_REG, "MV_PP2_TXQ_NUM_REG");
-	mvEthRegPrint(MV_PP2_TXQ_DESC_ADDR_REG, "MV_PP2_TXQ_DESC_ADDR_REG");
-	mvEthRegPrint(MV_PP2_TXQ_DESC_SIZE_REG, "MV_PP2_TXQ_DESC_SIZE_REG");
-	mvEthRegPrint(MV_PP2_TXQ_DESC_HWF_SIZE_REG, "MV_PP2_TXQ_DESC_HWF_SIZE_REG");
-	mvEthRegPrint(MV_PP2_TXQ_INDEX_REG, "MV_PP2_TXQ_INDEX_REG");
-	mvEthRegPrint(MV_PP2_TXQ_PREF_BUF_REG, "MV_PP2_TXQ_PREF_BUF_REG");
-	mvEthRegPrint(MV_PP2_TXQ_PENDING_REG, "MV_PP2_TXQ_PENDING_REG");
-	mvEthRegPrint(MV_PP2_TXQ_SENT_REG(txq), "MV_PP2_TXQ_SENT_REG");
-	mvEthRegPrint(MV_PP2_TXQ_INT_STATUS_REG, "MV_PP2_TXQ_INT_STATUS_REG");
+	mvPp2WrReg(MV_PP2_TXQ_NUM_REG, txq);
+	mvPp2PrintReg(MV_PP2_TXQ_NUM_REG, "MV_PP2_TXQ_NUM_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_DESC_ADDR_REG, "MV_PP2_TXQ_DESC_ADDR_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_DESC_SIZE_REG, "MV_PP2_TXQ_DESC_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_DESC_HWF_SIZE_REG, "MV_PP2_TXQ_DESC_HWF_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_INDEX_REG, "MV_PP2_TXQ_INDEX_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_PREF_BUF_REG, "MV_PP2_TXQ_PREF_BUF_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_PENDING_REG, "MV_PP2_TXQ_PENDING_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_SENT_REG(txq), "MV_PP2_TXQ_SENT_REG");
+	mvPp2PrintReg(MV_PP2_TXQ_INT_STATUS_REG, "MV_PP2_TXQ_INT_STATUS_REG");
 }
 
 void mvPp2PortTxqRegs(int port, int txp, int txq)
@@ -421,10 +421,10 @@ void mvPp2AggrTxqRegs(int cpu)
 	if (mvPp2CpuCheck(cpu))
 		return;
 
-	mvEthRegPrint(MV_PP2_AGGR_TXQ_DESC_ADDR_REG(cpu), "MV_PP2_AGGR_TXQ_DESC_ADDR_REG");
-	mvEthRegPrint(MV_PP2_AGGR_TXQ_DESC_SIZE_REG(cpu), "MV_PP2_AGGR_TXQ_DESC_SIZE_REG");
-	mvEthRegPrint(MV_PP2_AGGR_TXQ_STATUS_REG(cpu), "MV_PP2_AGGR_TXQ_STATUS_REG");
-	mvEthRegPrint(MV_PP2_AGGR_TXQ_INDEX_REG(cpu), "MV_PP2_AGGR_TXQ_INDEX_REG");
+	mvPp2PrintReg(MV_PP2_AGGR_TXQ_DESC_ADDR_REG(cpu), "MV_PP2_AGGR_TXQ_DESC_ADDR_REG");
+	mvPp2PrintReg(MV_PP2_AGGR_TXQ_DESC_SIZE_REG(cpu), "MV_PP2_AGGR_TXQ_DESC_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_AGGR_TXQ_STATUS_REG(cpu), "MV_PP2_AGGR_TXQ_STATUS_REG");
+	mvPp2PrintReg(MV_PP2_AGGR_TXQ_INDEX_REG(cpu), "MV_PP2_AGGR_TXQ_INDEX_REG");
 }
 
 void mvPp2AddrDecodeRegs(void)
@@ -434,19 +434,19 @@ void mvPp2AddrDecodeRegs(void)
 
 	/* ToDo - print Misc interrupt Cause and Mask registers */
 
-	mvEthRegPrint(ETH_BASE_ADDR_ENABLE_REG, "ETH_BASE_ADDR_ENABLE_REG");
-	mvEthRegPrint(ETH_TARGET_DEF_ADDR_REG, "ETH_TARGET_DEF_ADDR_REG");
-	mvEthRegPrint(ETH_TARGET_DEF_ID_REG, "ETH_TARGET_DEF_ID_REG");
+	mvPp2PrintReg(ETH_BASE_ADDR_ENABLE_REG, "ETH_BASE_ADDR_ENABLE_REG");
+	mvPp2PrintReg(ETH_TARGET_DEF_ADDR_REG, "ETH_TARGET_DEF_ADDR_REG");
+	mvPp2PrintReg(ETH_TARGET_DEF_ID_REG, "ETH_TARGET_DEF_ID_REG");
 
-	regValue = MV_REG_READ(ETH_BASE_ADDR_ENABLE_REG);
+	regValue = mvPp2RdReg(ETH_BASE_ADDR_ENABLE_REG);
 	for (win = 0; win < ETH_MAX_DECODE_WIN; win++) {
 		if (regValue & (1 << win))
 			continue; /* window is disable */
 		mvOsPrintf("\t win[%d]\n", win);
-		mvEthRegPrint(ETH_WIN_BASE_REG(win), "\t ETH_WIN_BASE_REG");
-		mvEthRegPrint(ETH_WIN_SIZE_REG(win), "\t ETH_WIN_SIZE_REG");
+		mvPp2PrintReg(ETH_WIN_BASE_REG(win), "\t ETH_WIN_BASE_REG");
+		mvPp2PrintReg(ETH_WIN_SIZE_REG(win), "\t ETH_WIN_SIZE_REG");
 		if (win < ETH_MAX_HIGH_ADDR_REMAP_WIN)
-			mvEthRegPrint(ETH_WIN_REMAP_REG(win), "\t ETH_WIN_REMAP_REG");
+			mvPp2PrintReg(ETH_WIN_REMAP_REG(win), "\t ETH_WIN_REMAP_REG");
 	}
 }
 
@@ -459,37 +459,37 @@ void mvPp2TxSchedRegs(int port, int txp)
 
 	mvOsPrintf("\n[TXP Scheduler registers: port=%d, txp=%d, physPort=%d]\n", port, txp, physTxp);
 
-	MV_REG_WRITE(MV_PP2_TXP_SCHED_PORT_INDEX_REG, physTxp);
-	mvEthRegPrint(MV_PP2_TXP_SCHED_PORT_INDEX_REG, "MV_PP2_TXP_SCHED_PORT_INDEX_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_Q_CMD_REG, "MV_PP2_TXP_SCHED_Q_CMD_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_CMD_1_REG, "MV_PP2_TXP_SCHED_CMD_1_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_FIXED_PRIO_REG, "MV_PP2_TXP_SCHED_FIXED_PRIO_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_PERIOD_REG, "MV_PP2_TXP_SCHED_PERIOD_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_MTU_REG, "MV_PP2_TXP_SCHED_MTU_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_REFILL_REG, "MV_PP2_TXP_SCHED_REFILL_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_TOKEN_SIZE_REG, "MV_PP2_TXP_SCHED_TOKEN_SIZE_REG");
-	mvEthRegPrint(MV_PP2_TXP_SCHED_TOKEN_CNTR_REG, "MV_PP2_TXP_SCHED_TOKEN_CNTR_REG");
+	mvPp2WrReg(MV_PP2_TXP_SCHED_PORT_INDEX_REG, physTxp);
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_PORT_INDEX_REG, "MV_PP2_TXP_SCHED_PORT_INDEX_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_Q_CMD_REG, "MV_PP2_TXP_SCHED_Q_CMD_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_CMD_1_REG, "MV_PP2_TXP_SCHED_CMD_1_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_FIXED_PRIO_REG, "MV_PP2_TXP_SCHED_FIXED_PRIO_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_PERIOD_REG, "MV_PP2_TXP_SCHED_PERIOD_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_MTU_REG, "MV_PP2_TXP_SCHED_MTU_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_REFILL_REG, "MV_PP2_TXP_SCHED_REFILL_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_TOKEN_SIZE_REG, "MV_PP2_TXP_SCHED_TOKEN_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_TXP_SCHED_TOKEN_CNTR_REG, "MV_PP2_TXP_SCHED_TOKEN_CNTR_REG");
 
 	for (txq = 0; txq < MV_ETH_MAX_TXQ; txq++) {
 		mvOsPrintf("\n[TxQ Scheduler registers: port=%d, txp=%d, txq=%d]\n", port, txp, txq);
-		mvEthRegPrint(MV_PP2_TXQ_SCHED_REFILL_REG(txq), "MV_PP2_TXQ_SCHED_REFILL_REG");
-		mvEthRegPrint(MV_PP2_TXQ_SCHED_TOKEN_SIZE_REG(txq), "MV_PP2_TXQ_SCHED_TOKEN_SIZE_REG");
-		mvEthRegPrint(MV_PP2_TXQ_SCHED_TOKEN_CNTR_REG(txq), "MV_PP2_TXQ_SCHED_TOKEN_CNTR_REG");
+		mvPp2PrintReg(MV_PP2_TXQ_SCHED_REFILL_REG(txq), "MV_PP2_TXQ_SCHED_REFILL_REG");
+		mvPp2PrintReg(MV_PP2_TXQ_SCHED_TOKEN_SIZE_REG(txq), "MV_PP2_TXQ_SCHED_TOKEN_SIZE_REG");
+		mvPp2PrintReg(MV_PP2_TXQ_SCHED_TOKEN_CNTR_REG(txq), "MV_PP2_TXQ_SCHED_TOKEN_CNTR_REG");
 	}
 }
 
 void mvPp2BmPoolRegs(int pool)
 {
 	mvOsPrintf("\n[BM pool registers: pool=%d]\n", pool);
-	mvEthRegPrint(MV_BM_POOL_BASE_REG(pool), "MV_BM_POOL_BASE_REG");
-	mvEthRegPrint(MV_BM_POOL_SIZE_REG(pool), "MV_BM_POOL_SIZE_REG");
-	mvEthRegPrint(MV_BM_POOL_READ_PTR_REG(pool), "MV_BM_POOL_READ_PTR_REG");
-	mvEthRegPrint(MV_BM_POOL_PTRS_NUM_REG(pool), "MV_BM_POOL_PTRS_NUM_REG");
-	mvEthRegPrint(MV_BM_BPPI_READ_PTR_REG(pool), "MV_BM_BPPI_READ_PTR_REG");
-	mvEthRegPrint(MV_BM_BPPI_PTRS_NUM_REG(pool), "MV_BM_BPPI_PTRS_NUM_REG");
-	mvEthRegPrint(MV_BM_POOL_CTRL_REG(pool), "MV_BM_POOL_CTRL_REG");
-	mvEthRegPrint(MV_BM_INTR_CAUSE_REG(pool), "MV_BM_INTR_CAUSE_REG");
-	mvEthRegPrint(MV_BM_INTR_MASK_REG(pool), "MV_BM_INTR_MASK_REG");
+	mvPp2PrintReg(MV_BM_POOL_BASE_REG(pool), "MV_BM_POOL_BASE_REG");
+	mvPp2PrintReg(MV_BM_POOL_SIZE_REG(pool), "MV_BM_POOL_SIZE_REG");
+	mvPp2PrintReg(MV_BM_POOL_READ_PTR_REG(pool), "MV_BM_POOL_READ_PTR_REG");
+	mvPp2PrintReg(MV_BM_POOL_PTRS_NUM_REG(pool), "MV_BM_POOL_PTRS_NUM_REG");
+	mvPp2PrintReg(MV_BM_BPPI_READ_PTR_REG(pool), "MV_BM_BPPI_READ_PTR_REG");
+	mvPp2PrintReg(MV_BM_BPPI_PTRS_NUM_REG(pool), "MV_BM_BPPI_PTRS_NUM_REG");
+	mvPp2PrintReg(MV_BM_POOL_CTRL_REG(pool), "MV_BM_POOL_CTRL_REG");
+	mvPp2PrintReg(MV_BM_INTR_CAUSE_REG(pool), "MV_BM_INTR_CAUSE_REG");
+	mvPp2PrintReg(MV_BM_INTR_MASK_REG(pool), "MV_BM_INTR_MASK_REG");
 }
 
 void mvPp2DropCntrs(int port)
@@ -497,24 +497,24 @@ void mvPp2DropCntrs(int port)
 	int i;
 
 	mvOsPrintf("\n[Port #%d Drop counters]\n", port);
-	mvEthRegPrint(MV_PP2_OVERRUN_DROP_REG(MV_PPV2_PORT_PHYS(port)), "MV_PP2_OVERRUN_DROP_REG");
-	mvEthRegPrint(MV_PP2_CLS_DROP_REG(MV_PPV2_PORT_PHYS(port)), "MV_PP2_CLS_DROP_REG");
+	mvPp2PrintReg(MV_PP2_OVERRUN_DROP_REG(MV_PPV2_PORT_PHYS(port)), "MV_PP2_OVERRUN_DROP_REG");
+	mvPp2PrintReg(MV_PP2_CLS_DROP_REG(MV_PPV2_PORT_PHYS(port)), "MV_PP2_CLS_DROP_REG");
 
 	if (MV_PON_PORT(port)) {
 #ifdef CONFIG_MV_PON
 		for (i = 0; i < CONFIG_MV_PON_TCONTS; i++) {
-			mvEthRegPrint2(MV_PP2_TX_EARLY_DROP_REG(i), "MV_PP2_TX_EARLY_DROP_REG", i);
-			mvEthRegPrint2(MV_PP2_TX_DESC_DROP_REG(i), "MV_PP2_TX_DESC_DROP_REG", i);
+			mvPp2RegPrint2(MV_PP2_TX_EARLY_DROP_REG(i), "MV_PP2_TX_EARLY_DROP_REG", i);
+			mvPp2RegPrint2(MV_PP2_TX_DESC_DROP_REG(i), "MV_PP2_TX_DESC_DROP_REG", i);
 		}
 #endif
 	} else {
 		i = MV_ETH_MAX_TCONT + port;
-		mvEthRegPrint2(MV_PP2_TX_EARLY_DROP_REG(i), "MV_PP2_TX_EARLY_DROP_REG", i);
-		mvEthRegPrint2(MV_PP2_TX_DESC_DROP_REG(i), "MV_PP2_TX_DESC_DROP_REG", i);
+		mvPp2RegPrint2(MV_PP2_TX_EARLY_DROP_REG(i), "MV_PP2_TX_EARLY_DROP_REG", i);
+		mvPp2RegPrint2(MV_PP2_TX_DESC_DROP_REG(i), "MV_PP2_TX_DESC_DROP_REG", i);
 	}
 	for (i = port * CONFIG_MV_ETH_RXQ; i < (port * CONFIG_MV_ETH_RXQ + CONFIG_MV_ETH_RXQ); i++) {
-		mvEthRegPrint2(MV_PP2_RX_EARLY_DROP_REG(i), "MV_PP2_RX_EARLY_DROP_REG", i);
-		mvEthRegPrint2(MV_PP2_RX_DESC_DROP_REG(i), "MV_PP2_RX_DESC_DROP_REG", i);
+		mvPp2RegPrint2(MV_PP2_RX_EARLY_DROP_REG(i), "MV_PP2_RX_EARLY_DROP_REG", i);
+		mvPp2RegPrint2(MV_PP2_RX_DESC_DROP_REG(i), "MV_PP2_RX_DESC_DROP_REG", i);
 	}
 }
 
@@ -523,10 +523,10 @@ void mvPp2RxFifoRegs(int port)
 	int p = MV_PPV2_PORT_PHYS(port);
 
 	mvOsPrintf("\n[Port #%d RX Fifo]\n", p);
-	mvEthRegPrint(MV_PP2_RX_DATA_FIFO_SIZE_REG(p), "MV_PP2_RX_DATA_FIFO_SIZE_REG");
-	mvEthRegPrint(MV_PP2_RX_ATTR_FIFO_SIZE_REG(p), "MV_PP2_RX_ATTR_FIFO_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_RX_DATA_FIFO_SIZE_REG(p), "MV_PP2_RX_DATA_FIFO_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_RX_ATTR_FIFO_SIZE_REG(p), "MV_PP2_RX_ATTR_FIFO_SIZE_REG");
 	mvOsPrintf("\n[Global RX Fifo regs]\n");
-	mvEthRegPrint(MV_PP2_RX_MIN_PKT_SIZE_REG, "MV_PP2_RX_MIN_PKT_SIZE_REG");
+	mvPp2PrintReg(MV_PP2_RX_MIN_PKT_SIZE_REG, "MV_PP2_RX_MIN_PKT_SIZE_REG");
 }
 
 
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
index e0eeab7..b9e799e 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
@@ -780,7 +780,4 @@ typedef struct pp2_buff_hdr {
 #define ETH_TARGET_DEF_ID_REG      			(MV_PP2_REG_BASE + 0x4068)
 /*-----------------------------------------------------------------------------------------------*/
 
-#endif /* MV_PP2_GBE_REGS_H */
-
-
-
+#endif /* __MV_PP2_GBE_REGS_H__ */
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c
index d0f5b44..ee9c2f8 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c
@@ -71,7 +71,7 @@ void mvEthPortEnable(int port)
 	regVal = MV_REG_READ(ETH_GMAC_CTRL_0_REG(port));
 	regVal |= ETH_GMAC_PORT_EN_MASK;
 
-	mvPp2WrReg(ETH_GMAC_CTRL_0_REG(port), regVal);
+	MV_REG_WRITE(ETH_GMAC_CTRL_0_REG(port), regVal);
 }
 
 void mvEthPortDisable(int port)
@@ -80,7 +80,7 @@ void mvEthPortDisable(int port)
 
 	regVal = MV_REG_READ(ETH_GMAC_CTRL_0_REG(port));
 	regVal &= ~(ETH_GMAC_PORT_EN_MASK);
-	mvPp2WrReg(ETH_GMAC_CTRL_0_REG(port), regVal);
+	MV_REG_WRITE(ETH_GMAC_CTRL_0_REG(port), regVal);
 }
 
 static void mvEthPortRgmiiSet(int port, int enable)
@@ -93,7 +93,7 @@ static void mvEthPortRgmiiSet(int port, int enable)
 	else
 		regVal &= ~ETH_GMAC_PORT_RGMII_MASK;
 
-	mvPp2WrReg(ETH_GMAC_CTRL_2_REG(port), regVal);
+	MV_REG_WRITE(ETH_GMAC_CTRL_2_REG(port), regVal);
 }
 
 static void mvEthPortSgmiiSet(int port, int enable)
@@ -106,7 +106,7 @@ static void mvEthPortSgmiiSet(int port, int enable)
 	else
 		regVal &= ~ETH_GMAC_PCS_ENABLE_MASK;
 
-	mvPp2WrReg(ETH_GMAC_CTRL_2_REG(port), regVal);
+	MV_REG_WRITE(ETH_GMAC_CTRL_2_REG(port), regVal);
 }
 
 void mvEthPortLbSet(int port, int isGmii, int isPcsEn)
@@ -125,7 +125,7 @@ void mvEthPortLbSet(int port, int isGmii, int isPcsEn)
 	else
 		regVal &= ~ETH_GMAC_PCS_LB_EN_MASK;
 
-	mvPp2WrReg(ETH_GMAC_CTRL_1_REG(port), regVal);
+	MV_REG_WRITE(ETH_GMAC_CTRL_1_REG(port), regVal);
 }
 
 void mvEthPortPowerUp(int port, MV_BOOL isSgmii, MV_BOOL isRgmii)
@@ -135,10 +135,14 @@ void mvEthPortPowerUp(int port, MV_BOOL isSgmii, MV_BOOL isRgmii)
 	mvEthPortSgmiiSet(port, isSgmii);
 	mvEthPortRgmiiSet(port, isRgmii);
 
+	regVal = MV_REG_READ(ETH_GMAC_CTRL_1_REG(port));
+	regVal &= ~ETH_GMAC_PERIODIC_XON_EN_MASK;
+	MV_REG_WRITE(ETH_GMAC_CTRL_1_REG(port), regVal);
+
 	/* Cancel Port Reset */
 	regVal = MV_REG_READ(ETH_GMAC_CTRL_2_REG(port));
 	regVal &= (~ETH_GMAC_PORT_RESET_MASK);
-	mvPp2WrReg(ETH_GMAC_CTRL_2_REG(port), regVal);
+	MV_REG_WRITE(ETH_GMAC_CTRL_2_REG(port), regVal);
 	while ((MV_REG_READ(ETH_GMAC_CTRL_2_REG(port)) & ETH_GMAC_PORT_RESET_MASK) != 0)
 		continue;
 }
@@ -224,7 +228,7 @@ void mvEthMaxRxSizeSet(int port, int maxRxSize)
 		regVal =  MV_REG_READ(ETH_GMAC_CTRL_0_REG(port));
 		regVal &= ~ETH_GMAC_MAX_RX_SIZE_MASK;
 		regVal |= (((maxRxSize - MV_ETH_MH_SIZE) / 2) << ETH_GMAC_MAX_RX_SIZE_OFFS);
-		mvPp2WrReg(ETH_GMAC_CTRL_0_REG(port), regVal);
+		MV_REG_WRITE(ETH_GMAC_CTRL_0_REG(port), regVal);
 /*
 		mvOsPrintf("%s: port=%d, maxRxSize=%d, regAddr=0x%x, regVal=0x%x\n",
 			__func__, port, maxRxSize, ETH_GMAC_CTRL_0_REG(port), regVal);
@@ -268,7 +272,7 @@ MV_STATUS mvEthForceLinkModeSet(int portNo, MV_BOOL force_link_up, MV_BOOL force
 	else
 		regVal &= ~ETH_FORCE_LINK_FAIL_MASK;
 
-	mvPp2WrReg(ETH_GMAC_AN_CTRL_REG(portNo), regVal);
+	MV_REG_WRITE(ETH_GMAC_AN_CTRL_REG(portNo), regVal);
 
     return MV_OK;
 }
@@ -341,7 +345,7 @@ MV_STATUS mvEthSpeedDuplexSet(int portNo, MV_ETH_PORT_SPEED speed, MV_ETH_PORT_D
 		return MV_BAD_PARAM;
 	}
 
-	mvPp2WrReg(ETH_GMAC_AN_CTRL_REG(portNo), regVal);
+	MV_REG_WRITE(ETH_GMAC_AN_CTRL_REG(portNo), regVal);
 	return MV_OK;
 }
 
@@ -444,7 +448,7 @@ MV_STATUS mvEthFlowCtrlSet(int port, MV_ETH_PORT_FC flowControl)
 		return MV_BAD_VALUE;
 	}
 
-	mvPp2WrReg(ETH_GMAC_AN_CTRL_REG(port), regVal);
+	MV_REG_WRITE(ETH_GMAC_AN_CTRL_REG(port), regVal);
 
 	return MV_OK;
 }
@@ -503,7 +507,7 @@ void mvEthPhyAddrSet(int port, int phyAddr)
 	regData &= ~ETH_PHY_ADDR_MASK(port);
 	regData |= (phyAddr << ETH_PHY_ADDR_OFFS(port));
 
-	mvPp2WrReg(ETH_PHY_ADDR_REG, regData);
+	MV_REG_WRITE(ETH_PHY_ADDR_REG, regData);
 
 	return;
 }
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h
index 4404d28..c528be2 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h
@@ -91,6 +91,9 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #define ETH_GMAC_CTRL_1_REG(p)             (ETH_REG_BASE(p) + 0x4)
 
+#define ETH_GMAC_PERIODIC_XON_EN_BIT       1
+#define ETH_GMAC_PERIODIC_XON_EN_MASK      (0x1 << ETH_GMAC_PERIODIC_XON_EN_BIT)
+
 #define ETH_GMAC_GMII_LB_EN_BIT            5
 #define ETH_GMAC_GMII_LB_EN_MASK           (1 << ETH_GMAC_GMII_LB_EN_BIT)
 
@@ -190,11 +193,17 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 /****************************************/
 /*        LMS Unit Registers       	*/
 /****************************************/
+
+/*
+ * PHY Address Ports 0 through 5 Register
+ */
 #define ETH_PHY_ADDR_REG		(LMS_REG_BASE + 0x30)
 #define ETH_PHY_ADDR_OFFS(port)		(port * 5)
 #define ETH_PHY_ADDR_MASK(port)		(0x1F << ETH_PHY_ADDR_OFFS(port))
-/*-------------------------------------------------------------------------------*/
 
+/*------------------------------------------------------------------------------
+ * Interrupt Summary Cause Register
+ */
 #define ETH_ISR_SUM_CAUSE_REG		(LMS_REG_BASE + 0x10)
 #define ETH_ISR_SUM_LMS_BIT		0
 #define ETH_ISR_SUM_LMS_MASK		(1 << ETH_ISR_SUM_LMS_BIT)
@@ -226,10 +235,18 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define ETH_ISR_SUM_PORT_MASK(p)	(1 << (ETH_ISR_SUM_PORT0_BIT + p))
 
 #define ETH_ISR_SUM_MASK_REG		(LMS_REG_BASE + 0x220c)
-/*-------------------------------------------------------------------------------*/
 
-#define ETH_SMI_REG(port)		(LMS_REG_BASE + 0x54)
+/*------------------------------------------------------------------------------
+ * PHY Auto-Negotiation Configuration Register0
+ */
+#define ETH_PHY_AN_CFG0_REG(port)		(LMS_REG_BASE + 0x34 + (port * 0x2000))
+#define ETH_PHY_AN_CFG0_STOP_AN_SMI0_BIT	7
+#define ETH_PHY_AN_CFG0_STOP_AN_SMI0_MASK	(1 << ETH_PHY_AN_CFG0_STOP_AN_SMI0_BIT)
 
+/*------------------------------------------------------------------------------
+ * SMI Management Register
+ */
+#define ETH_SMI_REG(port)		(LMS_REG_BASE + 0x54)
 
 /****************************************/
 /*        MIB counters		       	*/
diff --git a/arch/arm/plat-armada/mv_hal/pp2/pme/mvPp2PmeHw.c b/arch/arm/plat-armada/mv_hal/pp2/pme/mvPp2PmeHw.c
index 75336f6..f58fee4 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/pme/mvPp2PmeHw.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/pme/mvPp2PmeHw.c
@@ -185,7 +185,7 @@ void        mvPp2PmeHwRegs(void)
 
 	mvOsPrintf("\nMV_PP2_PME_STATUS_2_REG[txp] registers that are not zero\n");
 	for (i = 0; i < MV_PP2_TOTAL_TXP_NUM; i++) {
-		regVal = MV_REG_READ(MV_PP2_PME_STATUS_2_REG(i));
+		regVal = mvPp2RdReg(MV_PP2_PME_STATUS_2_REG(i));
 		if (regVal != 0)
 			mvOsPrintf("%-32s[%2d]: 0x%x = 0x%08x\n",
 				"MV_PP2_PME_STATUS_2_REG", i, MV_PP2_PME_STATUS_2_REG(i), regVal);
@@ -193,7 +193,7 @@ void        mvPp2PmeHwRegs(void)
 
 	mvOsPrintf("\nMV_PP2_PME_STATUS_3_REG[txp] registers that are not zero\n");
 	for (i = 0; i < MV_PP2_TOTAL_TXP_NUM; i++) {
-		regVal = MV_REG_READ(MV_PP2_PME_STATUS_3_REG(i));
+		regVal = mvPp2RdReg(MV_PP2_PME_STATUS_3_REG(i));
 		if (regVal != 0)
 			mvOsPrintf("%-32s[%2d]: 0x%x = 0x%08x\n",
 				"MV_PP2_PME_STATUS_3_REG", i, MV_PP2_PME_STATUS_3_REG(i), regVal);
diff --git a/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2Prs.c b/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2Prs.c
index fe03f18..ef14834 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2Prs.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2Prs.c
@@ -2454,6 +2454,9 @@ int mvPrsDefaultInit(void)
 {
 	int    port, rc;
 
+	/*enable tcam table*/
+	mvPp2PrsSwTcam(1);
+
 	/*write zero to all the lines*/
 	mvPp2PrsHwClearAll();
 
diff --git a/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.c b/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.c
index 89cdd00..5b4417a 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.c
@@ -267,6 +267,9 @@ int mvPp2PrsHwRegsDump()
 		mvPp2PrintReg(MV_PP2_PRS_SRAM_DATA_REG(i), reg_name);
 	}
 
+	mvPp2PrintReg(MV_PP2_PRS_EXP_REG, "MV_PP2_PRS_EXP_REG");
+	mvPp2PrintReg(MV_PP2_PRS_TCAM_CTRL_REG, "MV_PP2_PRS_TCAM_CTRL_REG");
+
 	return MV_OK;
 }
 
@@ -276,7 +279,7 @@ int mvPrsHwLkpFirstSet(int port, int lu_first)
 	unsigned int regVal;
 
 	POS_RANGE_VALIDATE(lu_first, MV_PP2_PRS_PORT_LU_MAX);
-	regVal = MV_REG_READ(MV_PP2_PRS_INIT_LOOKUP_REG);
+	regVal = mvPp2RdReg(MV_PP2_PRS_INIT_LOOKUP_REG);
 	regVal &= ~MV_PP2_PRS_PORT_LU_MASK(port);
 	regVal |=  MV_PP2_PRS_PORT_LU_VAL(port, lu_first);
 	mvPp2WrReg(MV_PP2_PRS_INIT_LOOKUP_REG, regVal);
@@ -290,7 +293,7 @@ int mvPrsHwLkpMaxSet(int port, int lu_max)
 
 	RANGE_VALIDATE(lu_max, MV_PP2_PRS_MAX_LOOP_MIN, MV_PP2_PRS_PORT_LU_MAX);
 
-	regVal = MV_REG_READ(MV_PP2_PRS_MAX_LOOP_REG(port));
+	regVal = mvPp2RdReg(MV_PP2_PRS_MAX_LOOP_REG(port));
 	regVal &= ~MV_PP2_PRS_MAX_LOOP_MASK(port);
 	regVal |= MV_PP2_PRS_MAX_LOOP_VAL(port, lu_max);
 	mvPp2WrReg(MV_PP2_PRS_MAX_LOOP_REG(port), regVal);
@@ -305,7 +308,7 @@ int mvPrsHwLkpFirstOffsSet(int port, int off)
 
 	POS_RANGE_VALIDATE(off, MV_PP2_PRS_INIT_OFF_MAX);
 
-	regVal = MV_REG_READ(MV_PP2_PRS_INIT_OFFS_REG(port));
+	regVal = mvPp2RdReg(MV_PP2_PRS_INIT_OFFS_REG(port));
 	regVal &= ~MV_PP2_PRS_INIT_OFF_MASK(port);
 	regVal |= MV_PP2_PRS_INIT_OFF_VAL(port, off);
 	mvPp2WrReg(MV_PP2_PRS_INIT_OFFS_REG(port), regVal);
@@ -513,6 +516,18 @@ void mvPp2PrsSwClear(MV_PP2_PRS_ENTRY *pe)
 }
 
 /*
+	enable - Tcam Ebable/Disable
+*/
+
+int mvPp2PrsSwTcam(int enable)
+{
+	POS_RANGE_VALIDATE(enable, 1);
+
+	mvPp2WrReg(MV_PP2_PRS_TCAM_CTRL_REG, enable);
+
+	return MV_OK;
+}
+/*
 	byte - data to tcam entry
 	enable - data to tcam enable endtry
 */
diff --git a/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.h b/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.h
index d90db36..a8b6250 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/prs/mvPp2PrsHw.h
@@ -145,8 +145,19 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define MV_PP2_PRS_SRAM_DATA2_REG		(MV_PP2_REG_BASE + 0x120c)
 #define MV_PP2_PRS_SRAM_DATA3_REG		(MV_PP2_REG_BASE + 0x1210)
 /*-------------------------------------------------------------------------------*/
+/*TODO: Add API and sysfs commands for this reg */
+#define MV_PP2_PRS_EXP_REG			(MV_PP2_REG_BASE + 0x1214)
+#define MV_PP2_PRS_EXP_MISS			0
+#define MV_PP2_PRS_EXP_EXEED			1
+#define MV_PP2_PRS_EXP_OF			2
 
+/*-------------------------------------------------------------------------------*/
+#define MV_PP2_PRS_TCAM_CTRL_REG		(MV_PP2_REG_BASE + 0x1230)
+#define MV_PP2_PRS_TCAM_CTRL_EN			0
 
+/*-------------------------------------------------------------------------------*/
+/*				TCAM 						*/
+/*-------------------------------------------------------------------------------*/
 #define AI_BITS  				8
 #define AI_MASK					((1 << AI_BITS) - 1)
 #define AI_DONE_BIT				7
@@ -546,12 +557,18 @@ int mvPp2PrsSwDump(MV_PP2_PRS_ENTRY *pe);
  * mvPp2PrsSwClear - clear prs sw entry
  * @pe: sw prs entry
 */
+void mvPp2PrsSwClear(MV_PP2_PRS_ENTRY *pe);
+/*
+ * mvPp2PrsHwDump - dump all valid hw entries
+*/
+
 int mvPp2PrsHwDump(void);
 
 /*
- * mvPp2PrsHwDump - dump all valid hw entries
+	enable - Tcam Ebable/Disable
 */
-void mvPp2PrsSwClear(MV_PP2_PRS_ENTRY *pe);
+
+int mvPp2PrsSwTcam(int enable);
 
 /*
  * mvPp2PrsSwTcamWordGet - get byte form tcam data and tcam mask
-- 
1.7.5.4

