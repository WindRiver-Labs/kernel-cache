From dd582148c38818562842015ba4ab2d85bd7ca58d Mon Sep 17 00:00:00 2001
From: Eran Ben-Avi <benavi@marvell.com>
Date: Wed, 10 Jul 2013 19:28:56 +0300
Subject: [PATCH 0781/1825] mvSpi: Configure SPI controller for Lantiq SLIC.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 1d78a01ba70cb006ba6ffbdc89b93f6bd40ad065

	The Lantiq DuSLIC-xT uses SPI Mode 3 thus SPI have to be set into
	this mode when Lantiq SLIC is selected.

Change-Id: I804440a51c49a9fc6c5fad67db20942cafdde14c
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-feroceon/mv_hal/spi/mvSpi.c |   18 +++++++++++++++++-
 arch/arm/plat-feroceon/mv_hal/spi/mvSpi.h |    1 +
 2 files changed, 18 insertions(+), 1 deletions(-)

diff --git a/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.c b/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.c
index 97f6283..2267884 100644
--- a/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.c
+++ b/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.c
@@ -67,6 +67,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "mvSpiSpec.h"
 #include "mvSpi.h"
 #include "mvSysSpi.h"
+#include "mvSysTdmConfig.h"
 #include "ctrlEnv/mvCtrlEnvSpec.h"
 
 /* #define MV_DEBUG */
@@ -82,11 +83,18 @@ static MV_SPI_TYPE_INFO spiTypes[] = {
 	{
 		.en16Bit = MV_TRUE,
 		.byteCsAsrt = MV_FALSE,
+		.clockPolLow = MV_FALSE,
 		.baudRate = (20 << 20), /*  20M */
 	},
 	{
 		.en16Bit = MV_FALSE,
+#ifdef LANTIQ_SLIC_SUPPORT
+		.byteCsAsrt = MV_FALSE,
+		.clockPolLow = MV_TRUE,
+#else
 		.byteCsAsrt = MV_TRUE,
+		.clockPolLow = MV_FALSE,
+#endif
 		.baudRate = _8M,
 	}
 };
@@ -115,6 +123,8 @@ MV_SPI_TYPE_INFO *currSpiInfo = NULL;
 ********************************************************************************/
 MV_STATUS mvSpiParamsSet(MV_U8 spiId, MV_U8 csId, MV_SPI_TYPE type)
 {
+	MV_SPI_IF_PARAMS ifParams;
+
 	if (csId > (MV_SPI_MAX_CS - 1)) {
 		mvOsPrintf("Error, csId(%d) exceeded maximum(%d)\n", csId, (MV_SPI_MAX_CS - 1));
 		return MV_ERROR;
@@ -129,7 +139,13 @@ MV_STATUS mvSpiParamsSet(MV_U8 spiId, MV_U8 csId, MV_SPI_TYPE type)
 
 	if (currSpiInfo != (&(spiTypes[type]))) {
 		currSpiInfo = &(spiTypes[type]);
-		mvSpiBaudRateSet(0, currSpiInfo->baudRate);
+		mvSpiBaudRateSet(spiId, currSpiInfo->baudRate);
+
+		ifParams.clockPolLow = currSpiInfo->clockPolLow;
+		ifParams.clockPhase = SPI_CLK_BEGIN_CYC;
+		ifParams.txMsbFirst = MV_FALSE;
+		ifParams.rxMsbFirst = MV_FALSE;
+		mvSpiIfConfigSet(spiId, &ifParams);
 	}
 
 	return MV_OK;
diff --git a/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.h b/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.h
index d9948e4..76697d5 100644
--- a/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.h
+++ b/arch/arm/plat-feroceon/mv_hal/spi/mvSpi.h
@@ -105,6 +105,7 @@ typedef struct {
 	MV_BOOL	en16Bit;
 	/* should we assert / disassert CS for each byte we read / write */
 	MV_BOOL	byteCsAsrt;
+	MV_BOOL clockPolLow;
 	MV_U32	baudRate;
 } MV_SPI_TYPE_INFO;
 
-- 
1.7.5.4

