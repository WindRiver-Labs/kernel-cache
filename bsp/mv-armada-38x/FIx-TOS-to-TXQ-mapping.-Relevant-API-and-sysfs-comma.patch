From 262fe2fd0ce6e038bb7ced3e575e33af03ea79b4 Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Sun, 2 Dec 2012 03:40:41 -0500
Subject: [PATCH 0353/1825] FIx TOS to TXQ mapping. Relevant API and sysfs
 command changed TOS range validation added

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 95d5a4d492ad51b8a634893780f9c6392000b09e

Change-Id: I58cd25bf5209c37ea14131f004526803161e1cef

Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c  |   44 ++++++++++----------
 .../mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c     |    8 ++--
 .../mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h     |    2 +-
 3 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
index 2e92f51..a984470 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
@@ -40,9 +40,9 @@ static ssize_t mv_eth_help(char *buf)
 {
 	int off = 0;
 
-        off += mvOsSPrintf(buf+off, "p, txp, txq, rxq, cpu, gr, d, t, l, s - are dec numbers\n");
-        off += mvOsSPrintf(buf+off, "v, tos, mask                          - are hex numbers\n");
-        off += mvOsSPrintf(buf+off, "\n");
+	off += mvOsSPrintf(buf+off, "p, txp, txq, rxq, cpu, prio, gr, d, t, l, s - are dec numbers\n");
+	off += mvOsSPrintf(buf+off, "v, tos, mask                                - are hex numbers\n");
+	off += mvOsSPrintf(buf+off, "\n");
 
 	off += sprintf(buf+off, "cat                ports           - show all ports info\n");
 	off += sprintf(buf+off, "echo p             > port          - show a port info\n");
@@ -350,33 +350,33 @@ static ssize_t mv_eth_3_store(struct device *dev,
 }
 
 static ssize_t mv_eth_4_hex_store(struct device *dev,
-                                   struct device_attribute *attr, const char *buf, size_t len)
+				struct device_attribute *attr, const char *buf, size_t len)
 {
-        const char      *name = attr->attr.name;
-        int             err;
-        unsigned int    p, cpu, txq, v;
-        unsigned long   flags;
+	const char      *name = attr->attr.name;
+	int             err;
+	unsigned int    p, cpu, txq, v;
+	unsigned long   flags;
 
-        if (!capable(CAP_NET_ADMIN))
-                return -EPERM;
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
 
-        err = p = cpu = txq = v = 0;
-        sscanf(buf, "%d %d %d %x", &p, &txq, &cpu, &v);
+	err = p = cpu = txq = v = 0;
+	sscanf(buf, "%d %d %d %x", &p, &txq, &cpu, &v);
 
-        local_irq_save(flags);
+	local_irq_save(flags);
 
 	if (!strcmp(name, "txq_tos")) {
-		err = mv_eth_txq_tos_map_set(p, txq, v, cpu);
-        } else {
-                err = 1;
-                printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
-        }
-        local_irq_restore(flags);
+		err = mv_eth_txq_tos_map_set(p, txq, cpu, v);
+	} else {
+		err = 1;
+		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+	}
+	local_irq_restore(flags);
 
-        if (err)
-                printk(KERN_ERR "%s: error %d\n", __func__, err);
+	if (err)
+		printk(KERN_ERR "%s: error %d\n", __func__, err);
 
-        return err ? -EINVAL : len;
+	return err ? -EINVAL : len;
 }
 
 static ssize_t mv_eth_4_store(struct device *dev,
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
index 624b1fc..29c5327 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
@@ -5002,7 +5002,7 @@ int mv_eth_rxq_vlan_prio_set(int port, int rxq, unsigned char prio)
 }
 
 /* Set TXQ for special TOS value. txq=-1 - use default TXQ for this port */
-int mv_eth_txq_tos_map_set(int port, int txq, unsigned char tos, unsigned char cpu)
+int mv_eth_txq_tos_map_set(int port, int txq, int cpu, unsigned int tos)
 {
 	MV_U8 old_txq;
 	struct cpu_ctrl	*cpuCtrl;
@@ -5024,10 +5024,10 @@ int mv_eth_txq_tos_map_set(int port, int txq, unsigned char tos, unsigned char c
 		printk(KERN_ERR "%s:Error, cpu #%d is masked \n", __func__, cpu);
 		return -EINVAL;
 	}
-
-	if (mvNetaMaxCheck(tos, 256))
+	if ((tos > 0xFF) || (tos < 0)) {
+		printk(KERN_ERR "TOS 0x%x is out of range: from 0 to 0xFF\n", tos);
 		return -EINVAL;
-
+	}
 	cpuCtrl = pp->cpu_config[cpu];
 	old_txq = cpuCtrl->txq_tos_map[tos];
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h
index 1f9ed9f..955e9d1 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h
@@ -768,7 +768,7 @@ bool                 mv_eth_netdev_find(unsigned int if_index);
 void        mv_eth_mac_show(int port);
 void        mv_eth_tos_map_show(int port);
 int         mv_eth_rxq_tos_map_set(int port, int rxq, unsigned char tos);
-int         mv_eth_txq_tos_map_set(int port, int txq, unsigned char tos, unsigned char cpu);
+int         mv_eth_txq_tos_map_set(int port, int txq, int cpu, unsigned int tos);
 int         mv_eth_napi_set_cpu_affinity(int port, int group, int affinity);
 int         mv_eth_napi_set_rxq_affinity(int port, int group, int rxq);
 void        mv_eth_napi_group_show(int port);
-- 
1.7.5.4

