From 5f4f2cdf904c76799c9bf9ec6f837901d014f4e2 Mon Sep 17 00:00:00 2001
From: Kosta Zertsekel <konszert@marvell.com>
Date: Sun, 17 Mar 2013 15:02:03 +0200
Subject: [PATCH 0499/1825] Remove release notes

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 60ae4b7ec625e94ecc5a2216b916970223790604

Release notes and other documentation will be managed outside of source code.

Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Change-Id: Ic80e156bef80691251afc0e5564d955de0d8ce6b
Reviewed-on: http://vgitil04.il.marvell.com:8080/1337
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 LspReadme.txt               |  720 -------------------------------------------
 LspReleaseNotes.txt         |  337 --------------------
 LspReleaseNotes_v3.2_v1.txt |  264 ----------------
 3 files changed, 0 insertions(+), 1321 deletions(-)
 delete mode 100755 LspReadme.txt
 delete mode 100755 LspReleaseNotes.txt
 delete mode 100755 LspReleaseNotes_v3.2_v1.txt

diff --git a/LspReadme.txt b/LspReadme.txt
deleted file mode 100755
index 92b8c8c..0000000
--- a/LspReadme.txt
+++ /dev/null
@@ -1,720 +0,0 @@
-
-General Armada XP LSP information
-=================================
-
-Contents:
-=========
-1.  Default kernel configuration.
-	1.1 General feature:			
-	1.2 Configuring the kernel to work in a BE mode:
-2.  Marvell LSP File locations
-3.  Kernel command line parameters: 
-4.  MTD (Memory Technology Devices) Support
-	4.1 For NOR flash only:
-	4.2 For SPI flash only: 
-	4.3 NAND ECC:
-	4.4 Building a UBIFS root file system:
-	4.5 Burn the UBIFS image:
-	4.6 RootFS on UBIFS:
-5.  Network
-	5.1 Network driver	
-	5.2 ethtool support
-6.  SATA 
-7.  USB in HOST mode
-8.  USB in Device mode 
-9.  Real Time Clock
-10. CESA
-11. LCD & LVDS panel
-	11.1 enabling LCD
-	11.2 enabling LVDS
-12. Power managment.
-13. SDIO/MMC.
-14. AMP Setup.
-15. Procedure for Porting a new Customer Board 
-	
-
-1.  Default kernel configuration:
-	============================
-	The following are the kernel configuration file supported in this release:
-    make armada_xp_defconfig       ==> SMP  ARMv7 mode
-    make armada_xp_be8_defconfig   ==> BE8  SMP ARMv7 mode
-	make armada_xp_v6smp_defconfig ==> SMP  ARMv6 mode
-
-	1.1 General feature:
-	--------------------
-	1.	All  configuration files support DDR selfrefresh when entering deep Ideal, no user intervention needed, see CPU-Idle section for more info.
-		
-	1.2 Configuring the kernel to work in a BE mode:
-	------------------------------------------------
-	To create a BE image, start with a LE image configuration file that matches the desired architecture version ( V6 /V7), see the “Default kernel configuration” section:
-	 If the configuration file Is a V6 mode configuration, modify the following:
-
-	If the configuration file is a V6 mode configuration, enable the following options in the Kernel configuration file:
-	System Type -> Build Big-endian Kernel -> Support BE32 mode.
-
-	System Type -> Build Big-endian Kernel -> Enable S/W handling for Unaligned Access
-
-	If the configuration file is a V7 mode configuration, enable the following options in the Kernel configuration file:
-
-	System Type -> Build Big-endian Kernel -> Support BE8 mode.
-
-	System Type -> Build Big-endian Kernel -> Enable S/W handling for Unaligned Access
-
-		
-2.  Marvell LSP File locations:
-===============================
-	-Core directory (Amada XP specific sources): 
-       - /arch/arm/mach-armadaxp/...
-	-Armada Platform directory (drivers and sources shared across Armada platforms):  
-       - /arch/arm/plat-armada/...
-	-Location of the Armada XP drivers source:
-		-RTC: the driver located under /drivers/rtc/rtc-mv.c.
-		-SATA: the driver located under /drivers/ata/sata-mv.c.
-		-Temp monitor sensor: arch/arm/mach-armadaxp/hwmon.c.
-		-NAND driver: arch/arm/plat-armada/mv_drivers_lsp/mv_mtd/nand_nfc.c.
-		-XOR engine: drivers/dma/mv_xor.c.
-		-SDIO/MMC: drivers/mmc/host/mvsdio.c.
-		-CESA: under arch/arm/plat-armada/mv_drivers_lsp/mv_cesa/.
-
-3.  Kernel command line parameters: 
-===================================
-	The following kernel command line parameters has special use for Armada-XP, those parameters
-	can be added to the kernel's command line that prepared by the U-boot by adding it to
-	the U-boot "console" environment variable:
-
-	noL2: If this parameter is passed, the kernel will not initialize the Aurora L2 subsystem.
-	per_cpu_irq_enable: passing this paramater will enable affinity of the GE ports interrupt to be per CPU, by default interrupt are send to all CPUs.
-	l0_disable: This parameter will cause the L0 (inner cache) to be disabled if passed by the u-boot.
-	sp_enable: this parameter is responsible for enabling the speculative prefetching, if passed, default this feature is disabled.
-	nfcConfig: this option can be set to either “ganged”/“8bitecc“/“12bitecc”/“16bitecc”, is not passed, the ECC support will default to 4 bit ECC.
-	l0_disable: if this parameter is add to the command line, the kernel disables L0.
-	cachepolicy: This parameter changes the cache policy from write-back to write-allocate in v7up configuration only.
-	      If either SMP or I/O cache coherency is enabled then write-allocate mode is enabled by
-	      default and can not be changed. Available options are "writealloc" ==> Change cache policy from write-back to write-allocate.
-
-	Usb0Mod / Usb1Mode / Usb2Mode: each one of these environment variables can be a either a  “host” / “device”, which will initialize the appropriate port ( port 0, 1, and 2) to be a host / device.
-	Note: passing the USB initialization mode is not enough and Board design consideration need to be taken into account, please refer to the design guide for all USB requirements.
-
-4.  MTD (Memory Technology Devices) Support:
-============================================
-	The MTD driver automatically detects the existing Flash devices and maps it into the Linux MTD subsystem. 
-	This new driver affect NOR flashes (CFI device bus based o SPI). NAND flashes are supported separately and not part of this map driver.
-
-	The detection of MTD devices depends on the Linux kernel configuration options set (using the 
-	"make menuconfig" or "make xconfig" tools).
-	To have basic MTD Support the following options should be selected:
-		-> Device Drivers                                                                                                   
-			  -> Memory Technology Devices (MTD)                                                                                
-				-> Memory Technology Device (MTD) support (MTD [=y])                                                            
-
-	For CFI Flashes the following options should be selected
-		-> Device Drivers                                                                                                   
-			  -> Memory Technology Devices (MTD)                                                                                
-				-> Memory Technology Device (MTD) support (MTD [=y])                                                            
-				  -> RAM/ROM/Flash chip drivers 
-			-> Detect flash chips by Common Flash Interface (CFI) probe
-
-	For Intel (and Intel compatible) Flashes the following options should be selected
-		-> Device Drivers                                                                                                   
-			  -> Memory Technology Devices (MTD)                                                                                
-				-> Memory Technology Device (MTD) support (MTD [=y])                                                            
-				  -> RAM/ROM/Flash chip drivers 
-			-> Support for Intel/Sharp flash chips
-
-	For AMD (and AMD compatible) Flashes the following options should be selected
-		-> Device Drivers                                                                                                   
-			  -> Memory Technology Devices (MTD)                                                                                
-				-> Memory Technology Device (MTD) support (MTD [=y])                                                            
-				  -> RAM/ROM/Flash chip drivers 
-			->  Support for AMD/Fujitsu flash chips
-
-	In addition specific flash type kernel configuration is needed:
-
-	4.1 For NOR flash only: 
-	-----------------------
-	In order to enable the NOR flash in the Armada LSP make sure the “NOR Support “option is set, the “NOR Support” is located under:
-	System Type - > Armada SOC options -> Armada SOC Include Features -> NOR Support In the kernel configuration, or simply CONFIG_MV_INCLUDE_NOR=y, or to comment this line to disable the NOR support.
-	Note: Marvell Armada XP DB needs board modification to be able to work with NOR flash.
-
-	4.2 For SPI flash only: 
-	-----------------------
-	To enable SPI flash in the Armada LSP make sure the “SPI Support “option is set, the “SPI Support” option is located under:
-	System Type - > Armada SOC options -> Armada SOC Include Features -> SPI Support.
-	Or simply by editing the configuration file to  CONFIG_MV_INCLUDE_SPI=y, or to comment this line to disable the SPI support.
-
-
-	By default, the map driver maps the whole flash device as single mtd device (/dev/mtd0, /dev/mtd1, ..)
-	unless differently specified from the UBoot using the partitioning mechanism.
-	To use the flash partitioning you need to have this option selected in the kernel. To do this
-	you will need the following option selected:
-		-> Device Drivers                                                                                                   
-			  -> Memory Technology Devices (MTD)                                                                                
-				-> Memory Technology Device (MTD) support (MTD [=y])   
-			  -> MTD concatenating support
-
-	The exact partitioning is specified from the UBoot arguments passed to the kernel. The following 
-	is the syntax of the string to be added to the UBoot "booatargs" environment variable:
-
-		   'mtdparts=<mtd-id>:7m@0(rootfs),1m@7(uboot)ro' 
-		   Where <mtd-id> can be one of options: 
-		   1) SPI-Flash => "spi_flash"
-		   2) NOR-Flash => "cfi_flash"
-
-	4.3 NAND ECC:
-	-------------
-	The NAND ECC level is passed to the Kernel via the nfcConfig command line parameter from the U-boot,
-	the nfcConfig parameter can be set to either “ganged”/“8bitecc“/“12bitecc”/“16bitecc”, and default to 4 bit ECC if not passed.
-
-	4.4 Building a UBIFS root file system:
-	--------------------------------------
-	Important Note: In the following I assume that the root file system is situated in the directory rootfs.
-	Several of the parameters appearing in the following example need to be adjusted to the user's needs and only serve as examples:
-	Before we can burn a FS to the NAND device, an image file should be prepared first with
-	the FS content. This is done using the "mkfs.ubifs" and "ubinize" commands. If you 
-	don't have these commands refer to MTD utilities section.
-	The following is an example of how to create this FS image:
-	- mkfs.ubifs -r ../lucid/ -m 8192 -e 1032192 -c 7800 -o lucidfs.img -v
-	- ubinize -o lucid.img -m 8192 -p 1MiB ubinize.cfg -e 0 -v
-
-
-	The content of the ubinize.cfg file is:
-	[ubifs]
-	mode=ubi
-	image=lucidfs.img
-	vol_id=0
-	vol_size=7800MiB
-	vol_type=dynamic
-	vol_name=rootfs
-	vol_flags=autoresize
-	vol_alignment=1
-
-	Important parameters that should be considered in the "mkfs.ubifs":
-	 - "-m" option: specifies the page size ==> 8KiB in ganged mode, or 4KiB in all other options ( assuming using 4KiB NAND parts).
-	 - "-e" option: erase block size ==> 1MiB in ganged mode.
-	 - "-c" option: maximum LEB (logical erase blocks) count ==> This parameter specifies
-					the maximum size of the FS content. This count should be less than the
-			total count of LEBs.
-	For example: In the 8GiB, we have 8192 LEBs, each is 1MiB in size. Out of the 8192 LEBs, maximum 128 LEBs can be marked bad by the manufacturer, 8 LEBs
-			are marked bad for the BBT table (last 8 blocks in the flash), something
-			like 80-100 LEBs are reserved/spare blocks, to be used in BB replacement,
-			few LEBs are used by the FS to hold its tables.
-			Thus a total of 7800 out of the 8192 LEBs is a reasonable number for free
-			or user usable LEBs.
-
-	4.5 Burn the UBIFS image:
-	-------------------------
-	To burn the prepare FS image, you will need to use the following command on the 
-	Target board:
-		"ubiformat /dev/mtd0 -f lucid.img"
-
-	Note: it is preferable to erase the nand devices from the UBoot using
-	the command: " nand erase"
-	This command will erase the whole nand device while skipping bad blocks.
-
-	4.6 RootFS on UBIFS:
-	--------------------
-	To have the root FS on the NAND, you need to pass 3 parameters to the Linux from the
-	UBoot using the boot command. The following string should be added to the 
-	"bootargs_root" UBoot variable:
-	"root=ubi0:rootfs rw ubi.mtd=0 rootfstype=ubifs"
-
-	If the root FS is mounted on other device (sata or NFS) and you need to access the
-	UBIFS file for maintenance, you can mount the UBIFS using the commands:
-	"ubiattach /dev/ubi_ctrl -m 0"
-	"mount -t ubifs ubi0:rootfs /mnt/"
-
-	4.7 MTD utilities:
-	-----------------
-	Mtd utilities are needed to be able to interact with the MTD devices, the latest release of the mtd-utils can be downloaded from http://www.linux-mtd.infradead.org.
-	(The main page has a link to the latest release of the mtd-utils package).
-	This package provides a set of sources that can be compiled and used to manage and debug MTD devices. 
-	These tools can be used to erase, read and write MTD devices and to retrieve some basic information.
-
-	The mtd utils have to be compiled both for arm and for x86 since typically the
-	file system will be generated on a x86 system.o
-	The lzo and uuid libraries are needed for compiling and for running the ubi utilities.
-
-
-	The following utilities should be on the target system:
-	- ubiformat, ubinfo, ubimkvol, ubirmvol, ubiupdatevol, ubiattach, ubidetach
-
-
-	The following is a list of useful commands:
-	To see a list of MTD devices detect by the kernel: "cat /proc/mtd"
-	To erase the whole MTD device: "./flash_eraseall /dev/mtd0"
-	To erase the whole MTD device and format it with jffs2: "./flash_eraseall -j /dev/mtd1"
-	To get device info (sectors size and count): "./flash_info /dev/mtd1"
-	To create jffs2 image for NAND flash(with eraseblock size 0x20000): 
-			   ./mkfs.jffs2 -l -e 0x20000 -n -d <path_to_fs> -o <output_file>
-
-
-	To protect all sectors: "./flash_lock /dev/mtd1 0x0 -1"
-	To unprotect all sectors: "./flash_unlock /dev/mtd1"
-
-5.  Network:
-============
-  5.1 Network driver:
-  -------------------
-    The Network driver supports creating Linux network interfaces over
-    Marvell SoC GbE ports.
- 
-   
-    - Configure whether a GbE port is "connected" to Linux (a Linux network
-      interface eth<i> is created) or "disconnected" from Linux (a Linux network
-      interface eth<i> is not created) using kernel command line parameters
-      which can be appended to the console parameter in U-Boot:
-        - mv_port0_config=disconnected
-        - mv_port1_config=disconnected
-        - mv_port2_config=disconnected
-        - mv_port3_config=disconnected
-      The default (if no parameter is passed) is that the port is connected.
-	 Running "ifconfig -a" will show all available interfaces.
-
-	  
-	- Runtime driver configuration and debug is supported via
-      sysfs:
-        
-        - cd /sys/devices/platform/neta/gbe
-        - cat help to display options
-			
-  5.2 ethtool support:
-  --------------------
-  This release introduces support for a standard ethtool. 
-  The ethtool support should be enabled in kernel configuration:
-   CONFIG_MV_ETH_TOOL:                                                                                                        
-   -> System Type
-     -> Armada SoC options   
-       -> SoC Networking support 
-         -> Networking Support
-            -> Control and Statistics               
-
-    The following ethtool commands are supported in current release:
-
-	  - ethtool DEVNAME                               Display standard information about device
-
-	  - ethtool -s |--change DEVNAME             Change generic options
-				[ speed 10|100|1000 ]
-				[ duplex half|full ]
-				[ autoneg on|off ]
-
-	  - ethtool -c|--show-coalesce DEVNAME     Show coalesce options
-
-	  - ethtool -C|--coalesce DEVNAME             Set coalesce options
-				[rx-usecs N]
-				[tx-usecs N]
-
-	  - ethtool -i|--driver DEVNAME                    Show driver information
-
-	  - ethtool -d|--register-dump DEVNAME       Do a register dump
-				[ raw on|off ]
-
-	  - ethtool -r|--negotiate DEVNAME              Restart N-WAY negotiation
-
-	  - ethtool -p|--identify DEVNAME                Show visible port identification (e.g. blinking)
-				[ TIME-IN-SECONDS ]
-
-	  - ethtool -S|--statistics DEVNAME             Show adapter statistics
-	  - ethtool -k eth0      	                    Show offload parameters on eth0.
-	  - ethtool -K eth0 rx off						Turn off rx-checksum
-	  - ethtool -K eth0 rx on                       Turn on rx-checksum
-	  - ethtool -K eth0 tx off						Turn off tx-checksum
-	  - ethtool -K eth0 tx on                       Turn on tx-checksum
-	  - ethtool -K eth0 tso off						Turn off TSO
-	  - ethtool -K eth0 tso on                      Turn on TSO
-	  - ethtool -K eth0 gro off						Turn off GRO
-	  - ethtool -K eth0 gro on                      Turn on GRO
-
-6.  SATA:
-=========
-
-	The SATA functionality on the Armada XP can utilize two different underlying driver implementation, 
-	the standard libATA or the Marvell implementation. The standard libATA is enabled by default, to work 
-	with the MARVELL implementation follow these steps:
-	1)	Disable the “Serial ATA and Parallel ATA drivers” option under the “Device Drivers” in the menuconfig, 
-	or simply comment the “CONFIG_ATA=y” line in the configuration file.
-
-	2)	Enable the Marvell implementation that can be found:
-	System Type-> Armada SoC options -> Support for Marvell Sata Adapters -> Enable the “Support ATAPI (CR-ROM/DVD-ROM) devices” 
-	and the “Enable 1 MByte requests” options or  
-	CONFIG_SCSI_MVSATA=y 
-	CONFIG_MV_SATA_SUPPORT_ATAPI=y
-	CONFIG_MV_SATA_ENABLE_1MB_IOS=y
-
-	Recommendation is to keep the setting at default.
-
-7.  USB in HOST mode:
-=====================
-	The mode of the USB controller (device or host) is configured using the UBoot environment variables. 
-	To work in USB HOST mode, set the UBoot variable "usb0Mode"/"usb1Mode"/"usb2Mode" to "host".
-	The USB driver uses the standard Linux ehci driver.
-
-8. USB in Device mode:
-======================
-	The mode of the USB controller (device or host) is configured using the UBoot environment variables. 
-	To work in USB Device mode, set the UBoot variable "usb0Mode"/"usb1Mode"/"usb2Mode" to "device".
-	Marvell tests the mass storage functionality and the driver is located in: arch/arm/plat-armada/mv_drivers_lsp/mv_udc/mv_udc_main.c
-
-	Please refer to the arch/arm/plat-armada/mv_drivers_lsp/mv_udc/README for full step on the procedure used to test the usb mass storage gadget.
-	
-9.  Real Time Clock:
-====================
-
-	The driver is found under  /drivers/rtc/rtc-mv.c
-	To set the time in the RTC from the current Linux clock, use the “hwclock –set” command  for example:
-	hwclock --set --date="3/14/2007 21:00:00"
-	To read the date and time from the integrated RTC unit, use the command “hwclock”.
-	Trying to read clock before it was set for the first might return an error message.
-
-10.  CESA:
-==========
-	OpenSSL:
-	--------
-	  See  cesa/openssl/README
-
-	IPsec:
-	------
-	  see cesa/openswan/README
-
-11. LCD: 
-========
-	11.1 enabling LCD:
-	-------------------
-	To enable/ use a LCD screen, the u-boot must set the following parameters:
-	lcd0_params – the appropriate LCD parameters in the following format “480x272-24@60”
-	lcd0_enable: set to 1.
-	lcd_panel: set to 0.
-
-	11.2 enabling LVDS:
-	------------------
-	To enable/ use a LVDS panel, the u-boot must set the following parameters:
-	lcd0_params – the appropriate LCD parameters in the following format “480x272-24@60”
-	lcd0_enable: set to 1.
-	lcd_panel: set to 1.
-
-12. Power managment:
-=======================
-     12.1 power modes
-	 ============
-	AXP has support for power management using the OS governor in SMP and UP modes.
-	Power states supported: wfi, deep idle, snooze (deep deep idle – L2 shut down)
-	To enable Add “pm_level=X” to the console variable in the U-boot(X = wfi/idle/snooze/off).
-	For example:
-	console=console=ttyS0,115200 pm_level=snooze
-	if the parameter is not defined – power management is enabled with “snooze” support.
-	To manually disable the power management:
-	console=console=ttyS0,115200 pm_level=off
-
-
-	-To modify configurations during OS run-time:
-	See the menu: cat /proc/cpu_idle
-	Enable:                 echo "enable" > /proc/cpu_idle
-	Disable:                echo "disable" > /proc/cpu_idle
-
-	-For UP or when rest of the CPUs are unplugged:
-	Set X state for CPU0:      echo X > /proc/cpu_idle
-	(Where X = wfi/deep/snooze)
-
-	-For statistics regarding the power management states for each of the CPUs, use /sys/devices/system/cpu/cpu0/cpuidle/
-	For additional information see attached sysfstxt file from the kernel’s cpu_idle documentation.
-
-	-To enter standby mode:
-	echo “standby” > /sys/power/state
-	any Uart character will bring back the system
-
-	Hotplug CPU:
-	To hot plug a CPU use the following commands (X = cpu number != 0):
-	Unplug:                echo 0 > /sys/devices/system/cpu/cpuX/online                
-	Plug:                      echo 1 > /sys/devices/system/cpu/cpuX/online             
-		
-
-	12.2. WOL: 
-	==========
-	In order to operate this feature, the following instructions should be followed:
-		1. Compile the kernel with the WoL enabled (check next sub-section 12.1).
-		2. Enter the necessary wakeup rules (check sub-sections 12.3 and 12.4)	
-		3. Trigger the standby mode "echo standby > /sys/power/state"
-		4. The system halt all operation and enters Low Power mode
-		5. Generate a wakeup packet to the port specified in the WOL rule.
-		6. The system reusmes normal operations
-		
-	12.2.1. How to build the kernel
-	==========================
-		To enable this feature in the kernel, the following should be added on top of the defconfig:
-		   -> System Type
-			 -> Armada SoC options
-			   -> SoC Networking support
-				 -> PnC support
-				   -> Use PNC for Wake On LAN support: Should be selected.
-	
-
-	12.2.2. WoL APIs:
-	===============
-	The implementation for the Standby WoL Mode provides the following API:
-			File arch/arm/plat-armada/mv_hal/neta/pnc/mvPncWol.c
-			- Add new WoL rule
-			int mv_pnc_wol_rule_set(int port, char *data, char *mask, int size);
-
-			- Delete existing WoL rule - Not supported
-			int mv_pnc_wol_rule_del(int idx);
-
-			- Delete all existing WoL rule
-			int mv_pnc_wol_rule_del_all(int port);
-			Note: argument <port> is ignored and all WoL rules created for all ports are deleted
-
-			- Print out existing WoL rule accordingly with unique identifier returned by mv_pnc_wol_rule_set()
-			int mv_pnc_wol_rule_dump(int idx);
-
-			- Print out all existing WoL rules
-			void mv_pnc_wol_dump(void);
-
-		File arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
-			- Enter WoL filtering mode on specific port
-			int mv_eth_wol_sleep(int port);
-			Note: In this drop enter WoL filtering mode done by sysfs command "sleep" (see below)
-				  Later it will be done via standard "suspend" function of the driver
-
-			- Exit WoL filtering mode on specific port
-			void mv_eth_wol_wakeup(int port);
-			Note: In this drop exit WoL filtering mode and return to Active filtering mode done 
-				  by special callback function from Giga driver ISR routine. 
-				  Later it will be done via standard "resume" function of the driver
-
-	12.2.3. WoL sysfs commands
-	=====================
-	(under directory: /sys/devices/platform/neta/wol)
-		cat                  dump_all      - dump all wol rules
-		echo idx           > dump          - dump rule <idx>
-		echo port          > sleep         - enter WoL mode on <port>
-		echo port          > wakeup        - exit WoL mode on <port>
-		echo str           > data          - set data string
-		echo str           > mask          - set mask string
-		echo port          > add           - add new rule with <data> and <mask> on <port>
-		echo idx           > del           - delete existing WoL rule <idx> (Not supported)
-		echo port          > del_all       - delete all WoL rules added to <port>
-
-	Note: More useful sysfs commands can be found under "neta/pnc" and "neta/gbe" subdirectories.
-		For example:
-		- Print out all valid TCAM entires
-		=> cat                  pnc/hw_dump
-		- Print out PNC registers
-		=> cat                  pnc/hw_regs
-		- Print out Giga port MIB HW counters
-		=> echo port          > gbe/cntrs
-		- Print out Giga driver port statistics
-			=> echo port          > gbe/stats
-
-	12.2.4. WoL rule examples:
-	=====================
-
-			- Add first WoL rule 42 bytes size on giga port 1. Two TCAM entires created are used: 39 and 40.
-		=> echo 0000ffffffffffff00000000003908004500004E0000000000110000c0a801FA0000000000890089003A > wol/data
-		=> echo 0000ffffffffffffffffffffffffffffffffffff0000000000ff0000ffffffff00000000ffffffffffff > wol/mask
-		=> echo 1 > wol/add
-		=> cat wol/dump_all
-		=> cat wol/dump_all
-		WoL rules table
-		[  0]: id=0, port_mask=0x2, size=42, tids=[ 39 40]
-		 offs: 000102030405060708091011121314151617181920212223
-		 data: 0000ffffffffffff00000000003908004500004e00000000
-			   00110000c0a801fa0000000000890089003a
-		 mask: 0000ffffffffffffffffffffffffffffffffffff00000000
-			   00ff0000ffffffff00000000ffffffffffff
-
-			- Add second WoL rule of 42 byte size on giga port 1. The second rule is equal to first rule on first 
-			24 bytes, but different on byte #25. One TCAM entry (39) is reused from first rule and new TCAM entry
-			is used: 41.
-		=> echo 00000050434d702a00000000003908004500004E0000000000000000c0a801FA0000000000890089003A > wol/data
-		=> echo 0000ffffffffffffffffffffffffffffffffffff0000000000000000ffffffff00000000ffffffffffff > wol/mask
-		=> echo 1 > wol/add
-		=> cat wol/dump_all
-		WoL rules table
-		[  0]: id=0, port_mask=0x2, size=42, tids=[ 39 40]
-		 offs: 000102030405060708091011121314151617181920212223
-		 data: 0000ffffffffffff00000000003908004500004e00000000
-			   00110000c0a801fa0000000000890089003a
-		 mask: 0000ffffffffffffffffffffffffffffffffffff00000000
-			   00ff0000ffffffff00000000ffffffffffff
-
-		[  1]: id=1, port_mask=0x1, size=42, tids=[ 39 41]
-		 offs: 000102030405060708091011121314151617181920212223
-		 data: 0000ffffffffffff00000000003908004500004e00000000
-			   00000000c0a801fa0000000000890089003a
-		 mask: 0000ffffffffffffffffffffffffffffffffffff00000000
-			   00000000ffffffff00000000ffffffffffff
-
-			- Add third WoL rule of 42 byte size on giga port 1. The third rule is different from first and second rules
-				on first 24 bytes. Two new TCAM entries are used for third WoL rule (39) is reused from first rule and new TCAM entry
-				is used: 42 and 43.
-		=> echo 00000050434d702a00000000003908004500004E0000000000000000c0a801FA0000000000890089003A > wol/data
-		=> echo 0000ffffffffffffffffffffffffffffffffffff0000000000000000ffffffff00000000ffffffffffff > wol/mask
-		=> echo $1 > wol/add
-		=> cat wol/dump_all
-		WoL rules table
-		[  0]: id=0, port_mask=0x2, size=42, tids=[ 39 40]
-		 offs: 000102030405060708091011121314151617181920212223
-		 data: 0000ffffffffffff00000000003908004500004e00000000
-			   00110000c0a801fa0000000000890089003a
-		 mask: 0000ffffffffffffffffffffffffffffffffffff00000000
-			   00ff0000ffffffff00000000ffffffffffff
-
-		[  1]: id=1, port_mask=0x1, size=42, tids=[ 39 41]
-		 offs: 000102030405060708091011121314151617181920212223
-		 data: 0000ffffffffffff00000000003908004500004e00000000
-			   00000000c0a801fa0000000000890089003a
-		 mask: 0000ffffffffffffffffffffffffffffffffffff00000000
-			   00000000ffffffff00000000ffffffffffff
-
-		[  2]: id=2, port_mask=0x1, size=42, tids=[ 42 43]
-		 offs: 000102030405060708091011121314151617181920212223
-		 data: 00000050434d702a00000000003908004500004e00000000
-			   00000000c0a801fa0000000000890089003a
-		 mask: 0000ffffffffffffffffffffffffffffffffffff00000000
-			   00000000ffffffff00000000ffffffffffff
-
-13. SDIO/MMC:
-=============
-	To enable this subsystem, the “SDIO Support“ should be enabled in the LSP configuration file which can found under:
-	System Type-> Armada SoC options-> Armada SoC Included Features- SDIO Support.
-
-	Or by simply the configuration file to include the CONFIG_MV_INCLUDE_SDIO=y.
-	Once an image is compiled with the above configuration options, and loaded on the target, the SDIO/MMC is enabled / disabled ( as desired).
-
-	Interacting with the MMC/SDIO device is done via the device created dynamicly under the /dev directory (i.e. /dev/mmcblk01,  /dev/mmcblk02…).
-
-14. AMP Setup:
-==============
-This release includes AMP support for running 2 Linux OS on Armada-XP. to setup an AMP system, follow these steps:
- 
-    o Linux
-      -----
-	1. Setup a build environment as specified in section 5 "HowTo Build". 
-	2. enable SMP under "Kernel Features"->"Symmetric multi processing"
-	3. open menu config (make menuconfig) and set the following under "System Type"->"Armada Soc options"->"Armada AMP options"
-		3.1 Enable AMP support = enable
-		3.2 "Image 0 - base address ..."  = base address of Linux 0
-		3.3 "Image 1 - base address ..."  = base address of Linux 1
-		3.4 "Image 0 - UART port ..."     = uart port of of Linux 0 (0 or 1)
-		3.5 "Image 1 - UART port ..."     = uart port of of Linux 1 (0 or 1)
-	NOTE: please don't change the value of "Base address of physical memory" /" UART port for prints"
-	4. Disable the Buffer manager module at  "System Type"->"Armada Soc options"->Networking support"->"BM configuration"->Buffer Management 
-	   support (BM)"
-	5. build both images by calling tools\amp\amp_make.pl [output_dir]. the output 2 AMP images will be
-	   named uImage_g0 and uImage_g1.
-
-    o U-BOOT
-      ------
-	 NOTE: must use Uboot release >= 2.1.2.
-	1. At U-BOOT prompt type "setenv amp_enable yes; saveenv" 
-	2. Reset the board
-	3. Create boot group 0 and 1 using the command amp_config as follows
-	     amp_config <group_id>  <cpu_count>  <master_cpu> <mem_base> <mem_size> <resources> 
-        		<group_id>   - which AMP group to config
-	        	<cpu_count>  - how many cpus to use in the group. 
-		        <master_cpu> - cpu id of first cpu in the group. 
-		        <mem_base>   - base physical address of group's image - must match compile value !
-		        <mem_size>   - physical space size of group's image 
-	        	<resources>  - resource string 
-	4. The following boot parameters are duplicated to be used by the second group.
-		they are created when amp_config is called. 
-
-		must be different between groups
-		--------------------------------
-		* ipaddr_gX
-		* rootpath_gX
-		
-		Can be left to default
-		----------------------
-		* image_name_gX
-		* console_gX	    
-		* mtdparts_gX 
-		* serverip_gX
-		* bootargs_end_gX
-		* bootargs_root_gX
-		* rootpath_gX
-		* mvNetConfig_gX
-		* mvPhoneConfig_gX		
-		
-	5.  Example 0:  "amp_config 0 2 0 0x00000000 0x20000000 uart0:pex0:eth0"
-	    Example 1:  "amp_config 1 2 2 0x20000000 0x20000000 uart1:pex2:eth1:nand"
-		setenv image_name    uImage_g0
-		setenv image_name_g1 uImage_g1
-		setenv ipaddr		 X.X.X.X
-		setenv ipaddr_g1	 Y.Y.Y.Y
-		setenv rootpath          <root path to NFS>
-		setenv rootpath_gX       <root path to NFS for gX>
-		
-		
-	6. Keep the following constraints: 
-		6.1 cpu 0 must be part of group 0
-	 	6.2 No resource (e.g. eth0) can be allocated to both groups at the same time.
-	7. To view the derived env variables run "amp_printenv". you can change individul values using setenv
-	8. To verify that the amp configuration is valid run "amp_verify"
-	9. Save the env variables using saveenv
-	10. Boot both AMP groups run "amp_boot"
-	
-NOTE: power managment must be disabled when running in AMP mode on both groups.
-
-15.  Procedure for Porting a new Customer Board:
-================================================
-The following are the steps for porting a new customer board to the Marvell LSP:
-
-    o Add the Board Specific configuration definitions:
-	File location:
-	~/arch/arm/mach-armadaxp/armada_xp_family/boardEnv/mvBoardEnvSpec.h
-
-	- MPP pin configuration. Each pin is represented by a nibble. Refer the
-	  SoC Datasheet for detailed information about the options and values
-	  per pin.
-	    
-	- MPP pin level (default level, high or low) if the MPP pin is a GPIO
-	  and configured to output.
-
-    o Add the Board Specific configuration tables:
-	File location:
-	~/arch/arm/mach-armadaxp/armada_xp_family/boardEnv/mvBoardEnvSpec.c
-
-	The following configuration options are listed in the order they are
-	presented in the "MV_BOARD_INFO" structure.
-
-	- boardName: Set the board name string. This is displayed by both Uboot and Linux
-	  during the boot process.
-
-	- pBoardMppConfigValue (MV_BOARD_MPP_INFO): This structure arranges the MPP pins
-	  configuration. This is usually not modified.
-	  
-	- pBoardSerdesConfigValue: this structure reflect the value to be written to the
-  	   shared serdes 0-7 selectors register, and the shared serdes 8-15 selectors register
-	   in addition to the desired configuration mode of the PEX interfaces.
-	  refer to the serdes section of the functional specification for configuration
-	  options and consideration 
-	- intsGppMask: Select MPP pins that are supposed to operate as
-	  interrupt lines.	  
-	  intsGppMaskLow	- maps of the register that controls the interrupt to the lower 32 GPIO lines.
-	  intsGppMaskMid	- maps of the register that controls the interrupt to the mid 32 GPIO lines.
-	  intsGppMaskHigh	- maps of the register that controls the interrupt to the highest 32 GPIO lines.
-			
-	- pDevCsInfo (MV_DEV_CS_INFO):Specify the devices connected on the device bus 
-	  with the Chip select configuration.
-
-	- pBoardTwsiDev (): List of I2C devices connected on the TWSI
-	  interface with the device ID Addressing mode (10 or 7 bit).
-	  
-	- pBoardMacInfo (MV_BOARD_MAC_INFO): Specifies the MAC speed and the Phy address
-  	  per Ethernet interface.
-
-	- pBoardGppInfo (): List of MPP pins configured as GPIO pins with special functionality.
-
-	- pLedGppPin (MV_U8): array of the MPP pins connected to LEDs.
-
-	- ledsPolarity: Bitmap specifying the MPP pins to be configured with
-	  reverse polarity.
-
-	- gppOutEnVal: This is usually defined in the mvCustomerBoardEnv.h
-	  specifying the direction of all MPP pins.
-	  gppOutEnValMid  - this filed specifies the direction of the lowest 32 MPP pins directions.
-	  gppOutEnValHigh - this filed specifies the direction of the mid 32 MPP pins directions.
-	  gppOutEnValLow  - this filed specifies the direction of the rest of the MPP pins.
-	 
-
-    o Note: memory map is located in  /arch/arm/mach-armadaxp/sysmap.c  in the MEM_TABLE, this is a static mapping of the internal register to virtual address. No need to change this table for typical use.
-	
diff --git a/LspReleaseNotes.txt b/LspReleaseNotes.txt
deleted file mode 100755
index e0a4028..0000000
--- a/LspReleaseNotes.txt
+++ /dev/null
@@ -1,337 +0,0 @@
-
-Release notes for Armada XP/370/300/310 and xCAT LSP release 2013_Q1.0
-======================================================================
-Table of Contents
------------------
-
-1.	Requirements
-2.	Kernel pre-defined configurations (defconfig)
-3.	Supported Features and Device Interfaces
-4.	Unsupported Interfaces
-5.	Supported Boards
-6.	Changes List
-7.	How to Build
-8.	Known Issues
-
-1. Requirements 
-===============
-
-	Stable vanilla kernel base: v3.2.36 (referred to as kernel)
-	Supported SoCs:
-		ArmadaXP A0/B0
-		Armada370 A0/A1
-		Armada310/300
-		xCAT (Prestera switches with embedded CPU).
-	Required SDK: Marvell SDK 6.0-2013_Q1.0 (using Marvell GCC 4.6.4 - arm-marvell-linux-gnueabi-gcc-4.6.4)
-	Tested with U-Boot:
-		ArmadaXP: 2013_Q1.0 or higher
-		Armada370: 1.1.3 or higher
-		Armada310/300: 3.5.9 or higher
-		xCAT: 5.3.4_005 or higher
-
-2. Kernel pre-defined configurations (defconfig)
-================================================
-
-		ArmadaXP SoC:
-			xp_v7smp:			==> SMP V7 mode with hardware cache coherency.
-									    Optimized for routing (no Network filter).
-			xp_v7smp_nat:		==> SMP V7 mode with hardware cache coherency (with Network filter).
-			xp_v7smp_nas:		==> SMP V7 mode with hardware cache coherency.
-									    Optimized configuration for NAS platforms.
-			xp_v7smp_lpae:		==> SMP V7 with LPAE 40bit support (B0 only).
-			xp_v7smp_lpae_stat:	==> SMP V7 with LPAE 40bit support (B0 only) and network statistics.
-			xp_v8smp_stat:		==> SMP V7 mode with hardware cache coherency and network statistics.
-			xp_v7smp_be8:		==> SMP V7 BE8 mode with hardware cache coherency.
-			xp_amp_g0/g1:		==> AMP V7 mode, images for Group 0 & Group 1 (see README for further info).
-
-		Armada370 SoC:
-			370_v7up:			==> UP V7 mode with hardware cache coherency
-									    Optimized for routing (no Network filter).
-			370_v7up_nat:		==> UP V7 mode with hardware cache coherency (with Network filter).
-			370_v7up_nas:		==> UP V7 mode with hardware cache coherency.
-									    Optimized configuration for NAS platforms.
-			370_v7up_stat:		==> UP V7 mode with hardware cache coherency and network statistics.
-
-		Armada310/300 SoCs:
-			mv_kw_defconfig		==> UP V5 mode without Gateway and NAT support
-			mv_kw_gtw_defconfig	==> UP V5 mode for gateway applications
-			mv_kw_be_gtw_defconfig	==> UP V5 mode for gateway with Big Endian support
-
-		xCAT SoC:
-			mv_kw_xcat_defconfig	==> UP V5 mode for xCAT support
-
-3. Supported Features and Device Interfaces:
-==========================================
-- ARMv7 CPU Support (AXP and A370 only):
-    - V7 SMP (UP for A370)
-    - V7 architectural L2 cache
-    - Floating Point Unit (VFPv3)
-    - Thumb2 and ThumbEE instruction sets
-- ARMv5 CPU Support (A300/A310 and XCAT)
-    - V5 UP
-    - V5 non-architectural L2 cache
-- Giga ports using the HAL based driver
-- SATA using the mainline LIBATA kernel driver
-- USB Host interfaces
-- UART interfaces
-- SD/SDIO/MMC interface
-- PCIe interfaces
-- RTC
-- I2C interface
-- SPI flash
-- NAND flash
-- XOR DMA engines
-- BE support
-- Power Management (WFI, Idle, and Deep-Idle, CPU DFS)
-- Support for Marvell Vanir SAS/SATA3 controllers (provided separately on demand)
-- CESA
-
-AXP specific features:
-- I/O cache coherency
-- 2 OS groups AMP support
-- LCD
-
-A370 specific features:
-- I/O cache coherency
-- TDM
-
-A300/A310 and XCAT specific features:
-- Gateway network interface support (RD on board switch) with L2 IGMP Snooping.
-- Transport Stream unit (See known issues below).
-- Internal Prestera switch over RGMII (for xCAT only).
-- External warm reset support (for xCAT only).
-
-4. Unsupported / UNTESTED Features:
-===================================
-- IDMA engines (All SoCs)
-- TDM unit/telephony (AXP, A370, A310/300, xCAT)
-- USB device support (All SoCs)
-- AUDIO
-
-5. Supported Boards:
-====================
-	ArmadaXP:
-		1.	DB-78460-HE-BP Development Board for Armada-XP A0/B0 silicon
-		2.	RD-78460-SERVER-REV2 Board for Armada-XP A0/B0 silicon
-		3.	DB-784MP-GP General Purpose small form factor board for Armada-XP B0 silicon
-	Armada370:
-		1.	DB-88F6710-BP-DDR3 development board for Armada370 A0/A1 silicon
-		2.	DB-88F6710-PCAC PC adaptor card
-		3.	RD-A370 reference design board
-	Armada310:
-		1.	DB-88F6281-BP-A
-		2.	DB-88F6192-BP-A (6190)
-		3.	DB-88F6180-BP-A
-		4.	RD-88F6281-A
-		5.	RD-88F6192-A (6190)
-		6.	DB-88F6282-A-BP
-		7.	RD-88F6282-A
-		8.	DB-XCAT-24GE
-
-6. Changes List
-================
-
-For changes in patches applied to this base LSP please refer to the PatchesReleaseNotes.txt file
-provided with the patches.
-
-Changes from LSP 2012_Q4.1
----------------------------
-- A300: Added Armada300 support
-- AXP: Enable L2 Cache ECC by default
-- AXP: Fixed PHY init for DB and GP boards
-- SMP: Fixed failed boot of CPUs 1-3 on BE8 image
-- AMP: AMP Bug fixes
-	- Fixed GP board support
-	- Fixed AMP boot after change of regs base
-	- Fixed UART1 bug that caused AMP failures
-	- Fixed XOR resources
-- UP: Fixed errata for cache clean in UP mode
-- UP: Fixed data corruption bug in UP+IOCC mode
-- PM: Reorganization in the power management code
-	- Kernel code handles most of the low level suspend/resume flows
-	- proc-sheeva_pj4bv7.S and proc-sheeva_pj4bv7lpae.S files were updated
-	- Fixes for AXP PM operation with LPAE enabled
-	- Fixes for Armada370 PM support
-	- Major PM code cleanup
-	- Update CPU Hotplug support
-	- Fixed standby failures
-- PM: S2RAM: Fix suspend to RAM
-	- Fix S2RAM support with internal registers @ 0xF1000000
-	- Update S2RAM support to the new low level PM flow
-	- Fixed GP board Support
-	- Modified the saved space for the DDR3 Training patterns
-- BE: Fix bug in internal registers address switching mode
-- BE: PM: Fix a bug in BE8 PM due to missing byte swap in assembler
-- PCIe: Use secondary bus number for indexing instead of local bus number
-- I2C: Revert repeated START between messages patch
-- UART: Updated UART driver for ArmadaXP - solved the UART failures when PM is enabled
-- IRQ: Fix interrupt affinity function - Add test for online CPUs
-- HWMON: Bug fix for temperature sensor in hwmon for ArmadaXP
-- SATA: Fixed SATA-1 power interface in GP board
-- SATA: Added staggered spinup support
-- USB: Added USB init sequence for Armada370
-- CESA: Fixed CESA support for Armada370 and added CESA support for ArmadaXP
-- IPC: Fixed MAC address on IPC NET driver
-- NETA: PNC PM suspend/resume support
-- NETA: Fix TXQ TOS mapping
-- NETA: Fixed jumbo frames for 1545MA1 and 1540 phys
-- SFLASH: Fixed support for SPI Flash M25Q128
-- SATA: Added SATA AHCI support
-- MISC: Error Interrupts handler including DRAM ECC reporting to user agent via netlink socket.
-- MISC: Move SERDES initialization to binary header
-- MISC: Added warm reset support in kernel
-- MISC: Added Pixiu tool for code performance analysis
-- MISC: Removed L2_PT_WALK changes for PJ4B V7
-- MISC: Move Internal Registers offset for LSP to 0xF1000000
-- MISC: Rearrange IO address decode windows
-	- Make PEX MEM windows smaller.
-	- Remove unnecessary static mappings from sysmap.c
-	- Reserve the last 256MB of the first 4GB of address space to IO.
-
-Changes from LSP 5.1.1
-----------------------
-- SFLASH: Fixed support for SPI Flash M25Q128
-- SATA: Added SATA AHCI support
-- NETA: Fix TXQ TOS mapping
-- UP: Fixed errata for cache clean in UP mode
-- UP: Fixed data corruption bug in UP+IOCC mode
-- PM: Fixed save TTBRC on suspend/resume and bug in cpuidle.c
-- MISC: Rearrange IO address decode windows
-    - Make PEX MEM windows smaller.
-    - Remove unnecessary static mappings from sysmap.c
-    - Reserve the last 256MB of the first 4GB of address space to IO.
-- MISC: Move Internal Registers for LSP to 0xF1000000
-- MISC: Remove hardcoded register definitions in headsmp.S
-- MISC: Removed L2_PT_WALK changes for PJ4B V7
-- MISC: A370: Fixed LED in front panel for RD_88F6710
-- PM: Suspend to RAM: 
-	- Added L2 flush in power-down routine
-	- Enabled suspend to RAM with indirect interrupt mode
-	- Added routines to save and restore the content of the DDR3 training memory space
-	- Added suspend to RAM support for GP board
-- PM: Added/Fixed suspend/resume support for: SDIO, sflash, PCIe, GPIO, XOR, USB, SMP
-- PM: Fixed bug in LCD initialization routine Enabled LCD suspend to RAM
-- PM: PCIe: Fix PM support in PCI Express.
-- PM: A370: Resolved compilation errors
-- NETA: Fix mvNetaPowerUp call during resume operation
-- NETA: Fix Switch and Gateway mode support
-- NETA: fix NAPI groups configuration in Kconfig
-- QD-DSDT: update switch driver version to 3.0D
-- AMP: Fixed bug on IPC network driver
-- KERNEL: mutex: Place lock in contended state after fastpath_lock failure
-- LPAE: LPAE Fixes:
-	- set CP15 registers to the same value as non-LPAE
-	- cpu_pj4bv7_set_pte_ext did not flush pte if not using 64KB page
-	- march=armv6 is for AFLAGS_proc-sheeva_pj4bv6.o
-	- add AFLAGS_proc-sheeva_pj4bv7lpae.o
-- MISC: Fixed hwmon Kconfig to support A370 and AXP
-- MISC: Updated defconfigs for A370 and AXP, added the XOR support
-- MISC: Fixed compilation errors related to MV_INCLUDE_GIG_ETH and MV_INCLUDE_SPI
-- MISC: A370: Fixed SPI, NAND and CESA functionalities
-- NAS: A370: updating NAS defconfig 
-- Updated main defconfig file - removed XOR support and Vanir driver
-- Removed Vanir driver from LSP
-- NAS: updating nas_init to version 3.4
-- NAS: updating NAS defconfig (2g split, removing netdma for splice)
-- NETA: Fix bug in tx_done timer invocation in SMP environment
-- SDK 5.1.2 is also supported as it has the same toolchain as SDK 6.0
-
-Changes from LSP 5.1.0
-----------------------
-- Added Armada370 support
-
-Changes from LSP 5.0.2
-----------------------
-- PM: Suspend to RAM - Initial support - Disabled by default
-- Kernel memcpy performance - reverts the memcpy acceleration code that was added for AXP Z1
-- LPAE: Fix IO window config when using more than 4GB DRAM
-- LPAE: ARM: 7488/1: mm: use 5 bits for swapfile type encoding
-- LPAE: ARM: 7487/1: mm: avoid setting nG bit for user mappings that aren't present
-- cpufreq support for ArmadaXP SoC - Disabled by default
-- AMP: Modified the global register used for AMP synchronization
-- NETA: Fix skb_recycle for kernel 3.2.27
-- NETA: avoid build warning by adding include <linux/module.h>
-- NETA: pppoe fixes for NFPv2
-- NETA: Check CPU validity on TRC_OUTPUT function
-- NETA: Fix sysfs command to read/write from PHY registers. All arguments for all commands in hex format
-- NFP: add ppp_sync support for NFPv2
-
-Changes from LSP 5.0.1
-----------------------
-- Fix bug in L2 replacement algorithm decoding
-- PM: Deep idle - Fix and update for kernel 3.2.x
-- NETA: Return arguments "port_mask" and "cpu_mask" to mvSysNetaInit() prototype
-
-Changes from LSP 5.0.0
-----------------------
-- Updated defconfig files - added XOR support and Vanir driver
-- Add CONFIG_IKCONFIG_PROC to defconfigs - allow reading the .config file from /proc/config.gz at runtime
-- Fix DRAM windows for mainline drivers
-- Disable window overlap testing
-- Add some statistics for the mm bounce subsystem
-- GP Board - Fix sata power GPIO
-- LPAE: Fix mvOs APIs to use dma_addr_t instead of U32 variables for phys-addr
-- LPAE: Fix address decoding init for mainline drivers
-
-Changes from LSP 3.2.0
-----------------------
-- Added Armada-XP revision B0 support
-- Added support for the RD-78460-SERVER-REV2 and DB-784MP-GP boards
-- Added LPAE Initial support
-- Updated hwmon threshold interrupt handling
-- Updated the error handler
-- AMP: Changed Global timer of second AMP image from 1 to co-exist with vxWorks
-- NAS: Updated nas_init to v3.3
-- SATA: Setting PHY speed according to SControl speed
-- NETA: Fix settings RX filtering mode and Multicast addresses for kernel 3.2.22
-- NETA: Fix power management support: 
-	- Add support for WoL
-	- Fix power management for down interfaces
-- NETA: Add platform device as parent to our network device
-- NETA: Fix possible bug in locking mechanism used for shared TXQs
-- NETA: Fix bugs in TXQs usage in multi core environment
-	- Fix TOS to TXQ mapping
-	- Fix TX_DONE processing for TXQs shared between different CPUs
-	
-Changes from LSP 3.0.6
-----------------------
-- Align the 3.2.x kernel feature list to the 2.1.1 release (based on 3.0.x kernel).
-- Enabling AMP.
-- Enabling NAND flash.
-- Enabling Perf.
-
-7. How To build
-===============
-
-	- Download the vanilla <kernel> sources from kernel.org or using the GIT. Assume file is linux-<kernel>.tar.bz2.
-	- Extract the vanilla kernel tarball (for example "tar -xjf linux-3.2.27.tar.bz2")
-	- Rename the linux-<kernel> folder to linux-<kernel>-<rel> (for example linux-3.2.y-2013_Q1.0)
-	- Extract the linux-<kernel>-<rel>.zip (for example "unzip linux-3.2.y-2013_Q1.0.zip"). This will 
-	  override part of the kernel files and will add the extra added files.
-	- At this point you will be asked if you want to replace a certain file, choose A for all files that have such a conflict. 	
-	- Change directory 'cd' to the kernel directory.
-	- Under the shell, issue the commands to set the environment (example for ARMv7 SoCs):
-		'export ARCH=arm'
-		'export CROSS_COMPILE=./your/path/to/the/toolchain/on/your/disk/arm-mv7-linux-gnueabi-'
-		for ARMv5 based SoCs (A310/300 & xCAT) please use the appropriate armv5 compiler from the SDK.
-	- Cleanup any old residuals
-		'make mrproper'
-	- Configure the kernel (example using AXP config):
-		'make armada_xp_defconfig'
-	- Build the kernel
-		'make uImage'
-	- Once the compilation is completed, The kernel uImage should be located under arch/arm/boot/ directory.
-
-8. Known Issues
-===============
-
-This is an unqualified release. It is the release candidate for Q1 of 2013.
-
-- NETA: When BM is enabled, MTU change under traffic can cause instability. Jumbo packets may be dropped.
-- MISC: MSI/MSI-X is not working when enabling the indirect (atomic) IRQ mode. It can also fail to init in SMP mode.
-- PM: Standby fails when using FS from sd-card
-- NOR: NOR (CFI) flash is not recognized correctly in the BE image
-- A370: SW reboot fails on RD board
-- LCD: SW reboot fails when LCD is enabled
-- GPIO: GPIO IRQs are not supported
-- S2RAM: SD/USB/NAND might fail to resume
\ No newline at end of file
diff --git a/LspReleaseNotes_v3.2_v1.txt b/LspReleaseNotes_v3.2_v1.txt
deleted file mode 100755
index 7a2f5c0..0000000
--- a/LspReleaseNotes_v3.2_v1.txt
+++ /dev/null
@@ -1,264 +0,0 @@
-
-Release notes for Armada-XP and Armada 370 LSP v3.2.y release 2012_Q4.3
-========================================================================
-Table of Contents
------------------
-
-1.	Requirements
-2.	Contents of this Release
-3.	Supported Features and Device Interfaces
-4.	Unsupported Interfaces
-5.	Changes List
-6.	How to Build
-7.	Specific UBoot configuration, Kernel command line params and tools
-8.	Known Issues
-
-1. Requirements 
-===============
-
-	Stable vanilla kernel base: v3.2.27 (referred to as kernel)
-	Supported SoCs: ArmadaXP A0/B0 and Armada370 A0/A1
-	Required SDK: Marvell SDK 6.0 (release compiled with SDK 6.0; arm-marvell-linux-gnueabi-gcc-4.6.2)
-		SDK 5.1.2 is also supported because it has the same toolchain as SDK 6.0
-	Tested with U-Boot:
-	    ArmadaXP: 2012-Q4.4 or higher (based on DENX vanilla u-boot 2011.12).
-	    Armada370: 1.1.3 or higher.
-	
-	
-2. Contents of This Release
-===========================
-
-	src/linux-<kernel>-<release>.zip   ==> Files modified or added on top of the linux vanilla kernel.
-
-	binaries.zip ==> compressed file that contain the following precompiled images:
-	
-		ArmadaXP SoC:
-			xp_v7smp:		==> SMP V7 mode with hardware cache coherency.
-							Optimized for routing (no Network filter).
-			xp_v7smp_nat:		==> SMP V7 mode with hardware cache coherency (with Network filter).
-			xp_v7smp_nas:       	==> SMP V7 mode with hardware cache coherency.
-							Optimized configuration for NAS platforms.
-			xp_v7smp_lpae:		==> SMP V7 with LPAE 40bit support (B0 only).
-			xp_v7smp_stat:		==> SMP V7 mode with hardware cache coherency and network statistics.
-			xp_v7smp_be8:		==> SMP V7 BE8 mode with hardware cache coherency.
-			xp_amp_g0/g1:       	==> AMP V7 mode, images for Group 0 & Group 1 (see README for further info).
-			
-		Armada370 SoC:
-			370_v7up:		==> UP V7 mode with hardware cache coherency
-							Optimized for routing (no Network filter).
-			370_v7up_nat:		==> UP V7 mode with hardware cache coherency (with Network filter).
-			370_v7up_nas:		==> UP V7 mode with hardware cache coherency.
-                                        		Optimized configuration for NAS platforms.
-			370_v7up_stat:		==> UP V7 mode with hardware cache coherency and network statistics.
-
-
-			
-Supported boards:
-	ArmadaXP:
-		1.	DB-78460-HE-BP Development Board for Armada-XP A0/B0 silicon
-		2.	RD-78460-SERVER-REV2 Board for Armada-XP A0/B0 silicon
-		3.	DB-784MP-GP General Purpose small form factor board for Armada-XP B0 silicon
-	Armada370:
-		1.	DB-88F6710-BP-DDR3 development board for Armada370 A0/A1 silicon
-		2.	DB-88F6710-PCAC PC adaptor card
-		3.	RD-A370 reference design board
-
-    
-3. Supported Features and Device Interfaces:
-==========================================
-- CPU Features: 
-    - V7 SMP (UP for A370)
-    - V7 architectural L2 cache
-    - Floating Point Unit (VFPv3)
-    - Thumb2 and ThumbEE instruction sets
-- Giga ports using the HAL based driver
-- SATA using the mainline LIBATA kernel driver
-- UART interfaces
-- SDIO
-- PCIe interfaces
-- I/O cache coherency
-- RTC
-- I2C interface
-- SPI flash
-- NAND flash
-- XOR DMA engines
-- BE support
-- Power Management (WFI, Idle, and Deep-Idle, CPU DFS)
-- Support for Marvell Vanir SAS/SATA3 controllers (provided separately on demand)
-AXP only:
-- 2 groups AMP support
-- LCD
-A370 only:
-- CESA
-- TDM
-- AUDIO
-
-4. Unsupported / UNTESTED Features:
-===================================
-- IDMA engines
-AXP only:
-- Cryptographic (CESA) engine.
-- TDM unit.
-
-5. Changes List
-================
-
-Changes from LSP 2012_Q4.1
---------------------------
-- PM: Suspend to RAM: 
-	- Added L2 flush in power-down routine
-	- Enabled suspend to RAM with indirect interrupt mode
-	- Added routines to save and restore the content of the DDR3 training memory space
-	- Added suspend to RAM support for GP board
-- PM: Added/Fixed suspend/resume support for: SDIO, sflash, PCIe, GPIO, XOR, USB, SMP
-- PM: Fixed bug in LCD initialization routine Enabled LCD suspend to RAM
-- PM: PCIe: Fix PM support in PCI Express.
-- PM: A370: Resolved compilation errors
-- NETA: Fix mvNetaPowerUp call during resume operation
-- NETA: Fix Switch and Gateway mode support
-- NETA: fix NAPI groups configuration in Kconfig
-- QD-DSDT: update switch driver version to 3.0D
-- AMP: Fixed bug on IPC network driver
-- KERNEL: mutex: Place lock in contended state after fastpath_lock failure
-- LPAE: LPAE Fixes:
-	- set CP15 registers to the same value as non-LPAE
-	- cpu_pj4bv7_set_pte_ext did not flush pte if not using 64KB page
-	- march=armv6 is for AFLAGS_proc-sheeva_pj4bv6.o
-	- add AFLAGS_proc-sheeva_pj4bv7lpae.o
-- MISC: Fixed hwmon Kconfig to support A370 and AXP
-- MISC: Updated defconfigs for A370 and AXP, added the XOR support
-- MISC: Fixed compilation errors related to MV_INCLUDE_GIG_ETH and MV_INCLUDE_SPI
-- MISC: A370: Fixed SPI, NAND and CESA functionalities
-- NAS: A370: updating NAS defconfig 
- 
-Changes from LSP 2012_Q4.0
---------------------------
-- Updated main defconfig file - removed XOR support and Vanir driver
-
-Changes from LSP 5.1.1
-----------------------
-- Removed Vanir driver from LSP
-- NAS: updating nas_init to version 3.4
-- NAS: updating NAS defconfig (2g split, removing netdma for splice)
-- NETA: Fix bug in tx_done timer invocation in SMP environment
-- SDK 5.1.2 is also supported as it has the same toolchain as SDK 6.0
-
-Changes from LSP 5.1.0
-----------------------
-- Added Armada370 support
-
-Changes from LSP 5.0.2
-----------------------
-- PM: Suspend to RAM – Initial support – Disabled by default
-- Kernel memcpy performance - reverts the memcpy acceleration code that was added for AXP Z1
-- LPAE: Fix IO window config when using more than 4GB DRAM
-- LPAE: ARM: 7488/1: mm: use 5 bits for swapfile type encoding
-- LPAE: ARM: 7487/1: mm: avoid setting nG bit for user mappings that aren't present
-- cpufreq support for ArmadaXP SoC – Disabled by default
-- AMP: Modified the global register used for AMP synchronization
-- NETA: Fix skb_recycle for kernel 3.2.27
-- NETA: avoid build warning by adding include <linux/module.h>
-- NETA: pppoe fixes for NFPv2
-- NETA: Check CPU validity on TRC_OUTPUT function
-- NETA: Fix sysfs command to read/write from PHY registers. All arguments for all commands in hex format
-- NFP: add ppp_sync support for NFPv2
-
-Changes from LSP 5.0.1
-----------------------
-- Fix bug in L2 replacement algorithm decoding
-- PM: Deep idle - Fix and update for kernel 3.2.x
-- NETA: Return arguments "port_mask" and "cpu_mask" to mvSysNetaInit() prototype
-
-Changes from LSP 5.0.0
-----------------------
-- Updated defconfig files - added XOR support and Vanir driver
-- Add CONFIG_IKCONFIG_PROC to defconfigs - allow reading the .config file from /proc/config.gz at runtime
-- Fix DRAM windows for mainline drivers
-- Disable window overlap testing
-- Add some statistics for the mm bounce subsystem
-- GP Board - Fix sata power GPIO
-- LPAE: Fix mvOs APIs to use dma_addr_t instead of U32 variables for phys-addr
-- LPAE: Fix address decoding init for mainline drivers
-
-Changes from LSP 3.2.0
-----------------------
-- Added Armada-XP revision B0 support
-- Added support for the RD-78460-SERVER-REV2 and DB-784MP-GP boards
-- Added LPAE Initial support
-- Updated hwmon threshold interrupt handling
-- Updated the error handler
-- AMP: Changed Global timer of second AMP image from 1 to co-exist with vxWorks
-- NAS: Updated nas_init to v3.3
-- SATA: Setting PHY speed according to SControl speed
-- NETA: Fix settings RX filtering mode and Multicast addresses for kernel 3.2.22
-- NETA: Fix power management support: 
-	- Add support for WoL
-	- Fix power management for down interfaces
-- NETA: Add platform device as parent to our network device
-- NETA: Fix possible bug in locking mechanism used for shared TXQs
-- NETA: Fix bugs in TXQs usage in multi core environment
-	- Fix TOS to TXQ mapping
-	- Fix TX_DONE processing for TXQs shared between different CPUs
-	
-Changes from LSP 3.0.6
-----------------------
-- Align the 3.2.x kernel feature list to the 2.1.1 release (based on 3.0.x kernel).
-- Enabling AMP.
-- Enabling NAND flash.
-- Enabling Perf.
-
-6. How To build
-===============
-
-    - Download the vanilla <kernel> sources from kernel.org or using the GIT. Assume file is linux-<kernel>.tar.bz2.
-	- Extract the vanilla kernel tarball (for example "tar -xjf linux-3.2.27.tar.bz2")
-	- Rename the linux-<kernel> folder to linux-<kernel>-<rel> (for example linux-3.2.27-axp-2012_Q4.0)
-	- extract the linux-<kernel>-<rel>.zip (for example "unzip linux-3.2.27-axp-2.1.1.zip"). This will 
-	  overruide part of the kernel files and will add the extra added files.
-Note: at this point you will be asked if you want to replace a certain file, choose A for all files that have such a conflict. 	
-    - cd to the kernel directory.
-	- Under the shell, issue the commands to set the environment:
-    'export ARCH=arm'
-    'export CROSS_COMPILE=./your/path/to/the/toolchain/on/your/disk/arm-mv7-linux-gnueabi-'
-	- Cleanup and old residuals
-    'make mrproper'
-	- Configure the kernel
-    config the kernel (example):
-        'make armada_xp_defconfig' ==> SMP ARMv7 mode
-	- Build the kernel
-		'make uImage'	
-    once the compilation is completed, The kernel uImage should be located under arch/arm/boot/ directory.
-
-7. Armada-XP specific Uboot configuration and Kernel command line parameters:
-=============================================================================
-7.1 Uboot environment variables:
---------------------------------
-The following U-Boot env. variables have direct impact on the Linux kernel,
-those variables can be changed using the U-Boot "setenv" command.
-
-usb0Mode:
-	Type: string, default "host"
-	Desc: usb 0 mode ("host" or "device");
-
-usb1Mode:
-	Type: string, default "host"
-	Desc: usb 1 mode ("host" or "device");
-
-l2rep:
-        Type: string, default "WayRR"
-        Desc: L2 replacement algorithm.
-        options: "WayRR" ==> Way round robin
-                 "LFSR" ==> Pseudo Random using LFSR
-                 "pLRU" ==> semi PLRU
-
-8. Known Issues
-===============
- - MSI/ MSI-X is not working when enabling the indirect (atomic) IRQ mode. It can also fail to init in SMP mode.
-  - MTU change under traffic can cause instability. Jumbo packets may be dropped.
- - SPI flash partitioning is not supported. The SPI flash is nOt recognized on the DB-784MP-GP board.
- - AMP with dual Linux may fail to boot on DB-MV78460-GP board.
- - Some features were not verified:
-   - LCD Controller
-   - AMP support
-   - 64K page table support
-   - LPAE mode
-- 
1.7.5.4

