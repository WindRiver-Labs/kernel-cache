From 32b6e88d8af94c1d0cdeeef86afca2e5eb72c7de Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Wed, 7 Aug 2013 17:12:01 +0300
Subject: [PATCH 0932/1825] nfc: Introduce CORE_DIV_CLK_CTRL register where it
 is necessary.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 5fb08385cd8291848c6e1d474fcbcb9ce5bcf0ab

        Because Core Divider Clock Controls are at different addresses on AXP, A370 and
        A375, ALP the hard-coded addresses are changed to defines for each platform
        that is supporten on this kernel and did not have this register already defined.

Change-Id: I2407dfa0d85898c8087d53579764f7e42b9ed4e6
Signed-off-by: Zbigniew Bodek <zbb@semihalf.com>
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2972
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../armada_xp_family/ctrlEnv/mvCtrlEnvRegs.h       |    3 ++
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h       |    3 ++
 arch/arm/plat-armada/mv_hal/nfc/mvNfc.c            |   34 ++++++++++----------
 3 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvCtrlEnvRegs.h b/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvCtrlEnvRegs.h
index 67dd2de..ccd4326 100755
--- a/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvCtrlEnvRegs.h
+++ b/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvCtrlEnvRegs.h
@@ -356,6 +356,9 @@ extern "C" {
 /* Sample at Reset */
 #define MPP_SAMPLE_AT_RESET(id)			(0x18230 + (id * 4))
 
+/* Core Divider Clock Control */
+#define CORE_DIV_CLK_CTRL(num)			(0x18740 + ((num) * 0x8))
+
 /* SYSRSTn Length Counter */
 #define SYSRST_LENGTH_COUNTER_REG		0x18250
 #define SLCR_COUNT_OFFS				0
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
index 769ef8b..3492ef2 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
@@ -137,6 +137,9 @@ extern "C" {
 #define SATR_DEVICE_ID_2_0_OFFS		21
 #define SATR_DEVICE_ID_2_0_MASK		(3 << SATR_DEVICE_ID_2_0_OFFS)
 
+/* Core Divider Clock Control */
+#define CORE_DIV_CLK_CTRL(num)		(0xE8250 + ((num) * 0x4))
+
 #define DEV_ID_REG			0x18238
 #define VENDOR_ID_OFFS			0
 #define VENDOR_ID_MASK			0xFFFF
diff --git a/arch/arm/plat-armada/mv_hal/nfc/mvNfc.c b/arch/arm/plat-armada/mv_hal/nfc/mvNfc.c
index 194f5d5..51d84e5 100644
--- a/arch/arm/plat-armada/mv_hal/nfc/mvNfc.c
+++ b/arch/arm/plat-armada/mv_hal/nfc/mvNfc.c
@@ -596,23 +596,23 @@ static MV_STATUS mvNfcDeviceModeSet(MV_NFC_CTRL *nfcCtrl, MV_NFC_ONFI_MODE mode)
 
 MV_VOID setNANDClock(MV_U32 nClock)
 {
-    /* Set the division ratio of ECC Clock 0x00018748[13:8] (by default it's double of core clock) */
-    MV_U32 nVal = MV_REG_READ(0x18748);
-    nVal = nVal & ~(BIT8|BIT9|BIT10|BIT11|BIT12|BIT13);
-    nVal = nVal | (nClock<<8);
-    MV_REG_WRITE(0x18748, nVal);
-
-    /* Set reload force of ECC clock 0x00018740[7:0] to 0x2 (meaning you will force only the ECC clock) */
-    nVal = MV_REG_READ(0x18740);
-    nVal = nVal & ~(0xff);
-    nVal = nVal | 0x2;
-    MV_REG_WRITE(0x18740, nVal);
-
-    /* Set reload ratio bit 0x00018740[8] to 1'b1 */
-    MV_REG_BIT_SET(0x18740, BIT8);
-    mvOsDelay(1); /*  msec */
-    /* Set reload ratio bit 0x00018740[8] to 1'b1 */
-    MV_REG_BIT_RESET(0x18740, BIT8);
+	/* Set the division ratio of ECC Clock 0x00018748[13:8] (by default it's double of core clock) */
+	MV_U32 nVal = MV_REG_READ(CORE_DIV_CLK_CTRL(1));
+	nVal = nVal & ~(BIT8|BIT9|BIT10|BIT11|BIT12|BIT13);
+	nVal = nVal | (nClock<<8);
+	MV_REG_WRITE(CORE_DIV_CLK_CTRL(1), nVal);
+
+	/* Set reload force of ECC clock 0x00018740[7:0] to 0x2 (meaning you will force only the ECC clock) */
+	nVal = MV_REG_READ(CORE_DIV_CLK_CTRL(0));
+	nVal = nVal & ~(0xff);
+	nVal = nVal | 0x2;
+	MV_REG_WRITE(CORE_DIV_CLK_CTRL(0), nVal);
+
+	/* Set reload ratio bit 0x00018740[8] to 1'b1 */
+	MV_REG_BIT_SET(CORE_DIV_CLK_CTRL(0), BIT8);
+	mvOsDelay(1); /*  msec */
+	/* Set reload ratio bit 0x00018740[8] to 1'b1 */
+	MV_REG_BIT_RESET(CORE_DIV_CLK_CTRL(0), BIT8);
 }
 
 /*******************************************************************************
-- 
1.7.5.4

