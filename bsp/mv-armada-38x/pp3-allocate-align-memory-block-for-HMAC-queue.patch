From 64e2d80d2ca95c46abdd24b5f931fd7dab77a299 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Sun, 9 Mar 2014 11:56:46 +0200
Subject: [PATCH 1444/1825] pp3: allocate align memory block for HMAC queue

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 97047469eb926a6a9f8cea3175bfea5894d36a34

	Fixed get next TX CFH function

Change-Id: If92fae6d6334b7db355e7eea7e0381b03d0ca787
Signed-off-by: Yelena <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6244
Reviewed-by: Ernest Villion <ernestv@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Uri Eliyahu <uriel@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h |   13 +++++++++++++
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c    |    3 +--
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h    |    2 +-
 3 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
index c0de633..1b33f2b 100644
--- a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
+++ b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
@@ -73,6 +73,16 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define	MV_MAC_ADDR_SIZE	(6)
 #define MV_MAC_STR_SIZE		(20)
 
+/* Macro for testing aligment. Positive if number is NOT aligned   */
+#define MV_IS_NOT_ALIGN(number, align)      ((number) & ((align) - 1))
+
+/* Macro for alignment up. For example, MV_ALIGN_UP(0x0330, 0x20) = 0x0340   */
+#define MV_ALIGN_UP(number, align)                                          \
+(((number) & ((align) - 1)) ? (((number) + (align)) & ~((align)-1)) : (number))
+
+/* Macro for alignment down. For example, MV_ALIGN_UP(0x0330, 0x20) = 0x0320 */
+#define MV_ALIGN_DOWN(number, align) ((number) & ~((align)-1))
+
 /* Sets the field located at the specified in data.     */
 #define U32_SET_FIELD(data, mask, val)		((data) = (((data) & ~(mask)) | (val)))
 
@@ -122,6 +132,9 @@ static INLINE u32 mv_pp3_hw_reg_read(u32 access_addr)
  */
 static INLINE void mv_pp3_hw_reg_write(u32 access_addr, u32 data)
 {
+#ifdef PP3_DEBUG
+	pr_info("\nwrite reg 0x%x, data 0x%x", access_addr, data);
+#endif
 	writel(data, access_addr);
 }
 
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
index 752e8ca..c3c8a9f 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
@@ -317,8 +317,7 @@ static int mv_pp3_hmac_queue_create(struct mv_pp3_hmac_queue_ctrl *q_ctrl)
 	size = q_ctrl->size * MV_PP3_HMAC_DG_SIZE + MV_PP3_HMAC_Q_ALIGN; /* in bytes */
 	/* Allocate memory for queue */
 	q_ctrl->buf_ptr = (u32) mv_pp3_queue_mem_alloc(size);
-	q_ctrl->first = q_ctrl->buf_ptr;
-	/* TBD:(u8 *)MV_ALIGN_UP(q_ctrl->buf_ptr, MV_PP3_HMAC_Q_ALIGN);*/
+	q_ctrl->first = (u8 *)MV_ALIGN_UP(q_ctrl->buf_ptr, MV_PP3_HMAC_Q_ALIGN);
 
 	if (q_ctrl->first == NULL) {
 		pr_err("%s: Can't allocate %d bytes for HMAC queue.\n", __func__, size);
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
index 9771b3e..d1862f5 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
@@ -285,7 +285,7 @@ static inline u8 *mv_pp3_hmac_txq_next_cfh(int frame, int queue, int size)
 
 	/* calculate number of unused datagram in the queue end */
 	end_free_dg = (qctrl->end - qctrl->next_proc) / MV_PP3_HMAC_DG_SIZE;
-	if ((end_free_dg >= size) && (end_free_dg >= (MV_PP3_CFH_MAX_SIZE / MV_PP3_HMAC_DG_SIZE))) {
+	if ((end_free_dg >= size) && (end_free_dg <= (MV_PP3_CFH_MAX_SIZE / MV_PP3_HMAC_DG_SIZE))) {
 		cfh_ptr = qctrl->next_proc;
 		qctrl->next_proc += (size * MV_PP3_HMAC_DG_SIZE);
 		qctrl->occ_dg += size;
-- 
1.7.5.4

