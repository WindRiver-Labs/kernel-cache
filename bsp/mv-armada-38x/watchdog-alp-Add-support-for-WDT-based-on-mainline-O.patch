From e6a537a1df365dd2c6a4b258d2b45685dcfcb442 Mon Sep 17 00:00:00 2001
From: Joe Zhou <shjzhou@marvell.com>
Date: Tue, 21 Jan 2014 18:04:38 +0200
Subject: [PATCH 1293/1825] watchdog: alp: Add support for WDT based on
 mainline Orion WDT

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit d1bea5f9478149804a13f24a70e371d9e19b4077

	- Based on mainline Orion Watchdog (orion_wdt.c) driver.
	- Correct some register offsets

Change-Id: Idfa5fb99c0da0e29265283cf30eceacfaff66724
Signed-off-by: Joe Zhou <shjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5217
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/configs/avanta_lp_defconfig           |    2 +
 arch/arm/configs/avanta_lp_nat_defconfig       |    2 +
 arch/arm/mach-avantalp/core.c                  |   35 +++++++++++++++++-
 arch/arm/mach-avantalp/include/mach/avantalp.h |    2 +
 arch/arm/plat-armada/include/plat/orion_wdt.h  |   16 ++++++++
 drivers/watchdog/Kconfig                       |    3 +-
 drivers/watchdog/orion_wdt.c                   |   46 ++++++++++++++++++++++-
 7 files changed, 102 insertions(+), 4 deletions(-)
 create mode 100644 arch/arm/plat-armada/include/plat/orion_wdt.h

diff --git a/arch/arm/configs/avanta_lp_defconfig b/arch/arm/configs/avanta_lp_defconfig
index 999c440..78c6ac3 100644
--- a/arch/arm/configs/avanta_lp_defconfig
+++ b/arch/arm/configs/avanta_lp_defconfig
@@ -109,6 +109,8 @@ CONFIG_I2C_MV64XXX=y
 CONFIG_SPI=y
 CONFIG_GPIO_SYSFS=y
 # CONFIG_HWMON is not set
+CONFIG_WATCHDOG=y
+CONFIG_ORION_WATCHDOG=y
 CONFIG_SOUND=y
 CONFIG_SND=y
 CONFIG_SND_SOC=y
diff --git a/arch/arm/configs/avanta_lp_nat_defconfig b/arch/arm/configs/avanta_lp_nat_defconfig
index fc4b1eb..ee23abd 100644
--- a/arch/arm/configs/avanta_lp_nat_defconfig
+++ b/arch/arm/configs/avanta_lp_nat_defconfig
@@ -122,6 +122,8 @@ CONFIG_I2C_MV64XXX=y
 CONFIG_SPI=y
 CONFIG_GPIO_SYSFS=y
 # CONFIG_HWMON is not set
+CONFIG_WATCHDOG=y
+CONFIG_ORION_WATCHDOG=y
 CONFIG_SOUND=y
 CONFIG_SND=y
 CONFIG_SND_SOC=y
diff --git a/arch/arm/mach-avantalp/core.c b/arch/arm/mach-avantalp/core.c
index 6be01c5..2e46d06 100644
--- a/arch/arm/mach-avantalp/core.c
+++ b/arch/arm/mach-avantalp/core.c
@@ -40,6 +40,7 @@
 #include <linux/serial_reg.h>
 #include <asm/serial.h>
 #include <mach/serial.h>
+#include <plat/orion_wdt.h>
 
 #if defined(CONFIG_MV_INCLUDE_AUDIO)
 #include <plat/audio.h>
@@ -1078,6 +1079,38 @@ static void __init alp_sata_init(void)
 }
 
 /*******************************************************************************
+* SoC Watchdog
+*/
+#ifdef CONFIG_ORION_WATCHDOG
+
+static struct orion_wdt_platform_data alp_wdt_data;
+static struct resource alp_wdt_resource = {
+	.name = "wdt base",
+	.start = TIMER_PHYS_BASE,
+	.end = TIMER_PHYS_BASE + 0x30 - 1,
+	.flags = IORESOURCE_MEM,
+};
+
+static struct platform_device alp_wdt_device = {
+	.name = "orion_wdt",
+	.id = -1,
+	.dev = {
+			.platform_data = &alp_wdt_data,
+			},
+	.resource = &alp_wdt_resource,
+	.num_resources = 1,
+};
+#endif
+
+static void __init alp_wdt_init(void)
+{
+#ifdef CONFIG_ORION_WATCHDOG
+	alp_wdt_data.tclk = alp_soc_timer_rate_get();
+	platform_device_register(&alp_wdt_device);
+#endif
+}
+
+/*******************************************************************************
  * SoC hwmon Thermal Sensor
  */
 static void __init alp_hwmon_init(void)
@@ -1742,7 +1775,7 @@ static void __init alp_board_init(void)
 	alp_i2c_init();
 	alp_audio_init();
 	alp_gpio_init();
-
+	alp_wdt_init();
 #if 0
 	alp_hwmon_init();
 #endif
diff --git a/arch/arm/mach-avantalp/include/mach/avantalp.h b/arch/arm/mach-avantalp/include/mach/avantalp.h
index 5076023..a950729 100644
--- a/arch/arm/mach-avantalp/include/mach/avantalp.h
+++ b/arch/arm/mach-avantalp/include/mach/avantalp.h
@@ -89,6 +89,8 @@
 #define USB3_REGS_PHYS_BASE		0xFF100000
 #define USB3_REGS_SIZE			_128K
 
+#define TIMER_PHYS_BASE       (INTER_REGS_PHYS_BASE + MV_CNTMR_REGS_OFFSET)
+
 /*
  * Virtual address map
  */
diff --git a/arch/arm/plat-armada/include/plat/orion_wdt.h b/arch/arm/plat-armada/include/plat/orion_wdt.h
new file mode 100644
index 0000000..2ed4ede
--- /dev/null
+++ b/arch/arm/plat-armada/include/plat/orion_wdt.h
@@ -0,0 +1,16 @@
+/*
+* arch/arm/plat-orion/include/plat/orion_wdt.h
+*
+* This file is licensed under the terms of the GNU General Public
+* License version 2. This program is licensed "as is" without any
+* warranty of any kind, whether express or implied.
+*/
+
+#ifndef __PLAT_ORION_WDT_H
+#define __PLAT_ORION_WDT_H
+
+struct orion_wdt_platform_data {
+	u32 tclk; /* no <linux/clk.h> support yet */
+};
+
+#endif
diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index 026158b..301669e 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -277,7 +277,8 @@ config DAVINCI_WATCHDOG
 
 config ORION_WATCHDOG
 	tristate "Orion watchdog"
-	depends on ARCH_ORION5X || ARCH_KIRKWOOD || ARCH_FEROCEON
+	depends on ARCH_ORION5X || ARCH_KIRKWOOD || ARCH_FEROCEON || \
+				ARCH_AVANTA_LP
 	help
 	  Say Y here if to include support for the watchdog timer
 	  in the Marvell Orion5x and Kirkwood ARM SoCs.
diff --git a/drivers/watchdog/orion_wdt.c b/drivers/watchdog/orion_wdt.c
index 788aa15..78eb73c 100644
--- a/drivers/watchdog/orion_wdt.c
+++ b/drivers/watchdog/orion_wdt.c
@@ -24,15 +24,27 @@
 #include <linux/uaccess.h>
 #include <linux/io.h>
 #include <linux/spinlock.h>
-#include <mach/bridge-regs.h>
 #include <plat/orion_wdt.h>
 
+#ifdef CONFIG_ARCH_KIRKWOOD
+#include <mach/bridge-regs.h>
+#endif
+
 /*
  * Watchdog timer block registers.
  */
 #define TIMER_CTRL		0x0000
-#define  WDT_EN			0x0010
+#ifdef CONFIG_ARCH_KIRKWOOD
+#define WDT_EN          0x0010
 #define WDT_VAL			0x0024
+#else
+#define WDT_EN          0x0100
+#define WDT_VAL			0x0034
+#define WDT_RSTOUTn_MASK    (INTER_REGS_VIRT_BASE + 0x20704)
+#define GLOBAL_WDT_RSTOUTn_EN    (1 << 8)
+#define RSTOUT_MASK      (INTER_REGS_VIRT_BASE + 0x18254)
+#define RSTOUT_MASK_WDT     (1 << 10)
+#endif
 
 #define WDT_MAX_CYCLE_COUNT	0xffffffff
 #define WDT_IN_USE		0
@@ -65,20 +77,36 @@ static void orion_wdt_enable(void)
 	/* Set watchdog duration */
 	writel(wdt_tclk * heartbeat, wdt_reg + WDT_VAL);
 
+#ifdef CONFIG_ARCH_KIRKWOOD
 	/* Clear watchdog timer interrupt */
 	reg = readl(BRIDGE_CAUSE);
 	reg &= ~WDT_INT_REQ;
 	writel(reg, BRIDGE_CAUSE);
+#endif
 
 	/* Enable watchdog timer */
 	reg = readl(wdt_reg + TIMER_CTRL);
 	reg |= WDT_EN;
 	writel(reg, wdt_reg + TIMER_CTRL);
 
+#ifdef CONFIG_ARCH_KIRKWOOD
 	/* Enable reset on watchdog */
 	reg = readl(RSTOUTn_MASK);
 	reg |= WDT_RESET_OUT_EN;
 	writel(reg, RSTOUTn_MASK);
+#else
+	/* Enable reset on watchdog */
+	reg = readl(WDT_RSTOUTn_MASK);
+	reg |= GLOBAL_WDT_RSTOUTn_EN;
+	writel(reg, WDT_RSTOUTn_MASK);
+
+	/* Enable board reset when watchdog expires
+	* 0 (zero) - do not mask watchdog from influencing SYSRST_OUTn.
+	*/
+	reg = readl(RSTOUT_MASK);
+	reg &= ~RSTOUT_MASK_WDT;
+	writel(reg, RSTOUT_MASK);
+#endif
 
 	spin_unlock(&wdt_lock);
 }
@@ -89,10 +117,24 @@ static void orion_wdt_disable(void)
 
 	spin_lock(&wdt_lock);
 
+#ifdef CONFIG_ARCH_KIRKWOOD
 	/* Disable reset on watchdog */
 	reg = readl(RSTOUTn_MASK);
 	reg &= ~WDT_RESET_OUT_EN;
 	writel(reg, RSTOUTn_MASK);
+#else
+	/* Disable reset on watchdog */
+	reg = readl(WDT_RSTOUTn_MASK);
+	reg &= ~GLOBAL_WDT_RSTOUTn_EN;
+	writel(reg, WDT_RSTOUTn_MASK);
+
+	/* Disable board reset when watchdog expires
+	* 1 (one) - mask watchdog from influencing SYSRST_OUTn.
+	*/
+	reg = readl(RSTOUT_MASK);
+	reg |= RSTOUT_MASK_WDT;
+	writel(reg, RSTOUT_MASK);
+#endif
 
 	/* Disable watchdog timer */
 	reg = readl(wdt_reg + TIMER_CTRL);
-- 
1.7.5.4

