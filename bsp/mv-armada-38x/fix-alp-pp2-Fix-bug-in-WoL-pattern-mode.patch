From 510b6ad4b375d6658906271381c16d5974e2208a Mon Sep 17 00:00:00 2001
From: Evan <xswang@marvell.com>
Date: Thu, 3 Jul 2014 09:51:00 +0800
Subject: [PATCH 1762/1825] fix: alp: pp2: Fix bug in WoL pattern mode

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 35006a56488049cd2a28f7df8586d0ac47373127

	bug reason: the Marvell Header size is not taken into consideration.
	This patch solve the issue of WoL pattern mode not work normally.

Signed-off-by: Evan <xswang@marvell.com>

Change-Id: I02a0c109897f48802026fcfc046b0ba1c33fb333
Reviewed-on: http://vgitil04.il.marvell.com:8080/8923
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/pp2/wol/mvPp2Wol.c |   30 ++++++++++++------------
 1 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/arch/arm/plat-armada/mv_hal/pp2/wol/mvPp2Wol.c b/arch/arm/plat-armada/mv_hal/pp2/wol/mvPp2Wol.c
index 0be2185..12479bd 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/wol/mvPp2Wol.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/wol/mvPp2Wol.c
@@ -175,27 +175,26 @@ MV_STATUS mvPp2WolPtrnSet(int idx, int off, int size, MV_U8 *data, MV_U8 *mask)
 	int i, j, reg, new_size;
 	MV_U8 *new_data;
 	MV_U8 *new_mask;
-	int aligned_size = 0;
+	int aligned_size = 0, mh_off = 0;
+
+	/* Take Marvell Header offset into consideration  */
+	mh_off = off + MV_ETH_MH_SIZE;
 
 	if (mvPp2MaxCheck(idx, MV_PP2_WOL_PTRN_NUM, "PTRN index"))
 		return MV_BAD_PARAM;
 
-	if (mvPp2MaxCheck((off + size), MV_PP2_WOL_PTRN_BYTES, "PTRN size"))
+	if (mvPp2MaxCheck((mh_off + size), MV_PP2_WOL_PTRN_BYTES, "PTRN size"))
 		return MV_BAD_PARAM;
-/*
-	mvOsPrintf("WoL set pattern #%d: size=%d\n", idx, size);
-	mvDebugMemDump(data, size, 1);
-	mvDebugMemDump(mask, size, 1);
-*/
+
 	regVal = mvPp2RdReg(MV_PP2_WOL_PTRN_SIZE_REG);
 	regVal &= ~MV_PP2_WOL_PTRN_SIZE_MAX_MASK(idx);
-	regVal |= MV_PP2_WOL_PTRN_SIZE_MASK(idx, size);
+	regVal |= MV_PP2_WOL_PTRN_SIZE_MASK(idx, size + mh_off);
 
 	mvPp2WrReg(MV_PP2_WOL_PTRN_SIZE_REG, regVal);
 
 	mvPp2WrReg(MV_PP2_WOL_PTRN_IDX_REG, idx);
-	if (off % 4) {
-		aligned_size = size + 4 - (off % 4);
+	if (mh_off % 4) {
+		aligned_size = size + 4 - (mh_off % 4);
 		new_data = kmalloc(sizeof(MV_U8) * aligned_size, GFP_KERNEL);
 		if (!new_data) {
 			mvOsPrintf("CPU memory allocation fail\n");
@@ -212,15 +211,15 @@ MV_STATUS mvPp2WolPtrnSet(int idx, int off, int size, MV_U8 *data, MV_U8 *mask)
 		memset(new_data, 0, sizeof(MV_U8) * aligned_size);
 		memset(new_mask, 0, sizeof(MV_U8) * aligned_size);
 
-		memcpy(&new_data[off % 4], data, size);
-		memcpy(&new_mask[off % 4], mask, size);
+		memcpy(&new_data[mh_off % 4], data, size);
+		memcpy(&new_mask[mh_off % 4], mask, size);
 	} else {
 		new_data = data;
 		new_mask = mask;
 	}
-	new_size = size + (off % 4);
+	new_size = size + (mh_off % 4);
 	for (i = 0; i < new_size; i += 4) {
-		reg = (off + i) / 4;
+		reg = (mh_off + i) / 4;
 		regData = mvPp2RdReg(MV_PP2_WOL_PTRN_DATA_REG(reg));
 		regMask = mvPp2RdReg(MV_PP2_WOL_PTRN_MASK_REG(reg));
 		for (j = 0; j < 4; j++) {
@@ -239,10 +238,11 @@ MV_STATUS mvPp2WolPtrnSet(int idx, int off, int size, MV_U8 *data, MV_U8 *mask)
 		mvPp2WrReg(MV_PP2_WOL_PTRN_DATA_REG(reg), regData);
 		mvPp2WrReg(MV_PP2_WOL_PTRN_MASK_REG(reg), regMask);
 	}
-	if (off % 4) {
+	if (mh_off % 4) {
 		kfree(new_data);
 		kfree(new_mask);
 	}
+
 	return MV_OK;
 }
 
-- 
1.7.5.4

