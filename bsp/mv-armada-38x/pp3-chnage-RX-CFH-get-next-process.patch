From 422f7486dbd2c69d0dbdc15c1e3554a6b910fef3 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Sun, 23 Feb 2014 11:49:28 +0200
Subject: [PATCH 1390/1825] pp3: chnage RX CFH get next process

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 600a3609507e35118ea42fe42cdb8d2b9d9cf326

Change-Id: I2c05ed41da381aa638af8f70089344e18dde137b
Signed-off-by: Yelena <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5875
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h |   21 ++++++++++-----------
 1 files changed, 10 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
index a963566..1a10b47 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
@@ -182,8 +182,8 @@ static inline void mv_pp3_hmac_rxq_occ_set(int frame, int queue, int size)
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_REC_Q_OCC_STATUS_UPDATE_REG(queue), size);
 }
 
-/* Returns pointer to next CFH buffer and it size */
-/* size - number of datagram                      */
+/* Returns pointer to next recieved CFH buffer and it */
+/* size - number of datagram                          */
 static inline u8 *mv_pp3_hmac_rxq_next_cfh(int frame, int queue, int *size)
 {
 	struct cfh_common_format *cfh;
@@ -191,20 +191,19 @@ static inline u8 *mv_pp3_hmac_rxq_next_cfh(int frame, int queue, int *size)
 
 	/* Read 16 bytes of CFH pointed by "next_proc" field and calculate size of CFH in bytes */
 	cfh = (struct cfh_common_format *)qctrl->next_proc;
+	/* Move "next_proc" pointer to next CFH ("next_proc" + size) */
+	qctrl->next_proc += cfh->cfh_length;
+	*size = cfh->cfh_length / MV_PP3_HMAC_DG_SIZE;
+	/* check if there is an end of queue */
+	if (qctrl->next_proc >= qctrl->end)
+		qctrl->next_proc = qctrl->first;
 
-	/* if get NULL CFH with "W" bit set, do wraparound */
+	/* if get empty CFH with "W" bit set, return NULL */
 	if (cfh->qm_cntrl & MV_PP3_HMAC_CFH_DUMMY) {
-		qctrl->next_proc = qctrl->first;
-		/* return first CFH in queue */
-		cfh = (struct cfh_common_format *)qctrl->next_proc;
-		*size = cfh->cfh_length / MV_PP3_HMAC_DG_SIZE;
 		return NULL;
 	}
 
-	/* Move "next_proc" pointer to next CFH ("next_proc" + size) */
-	qctrl->next_proc += cfh->cfh_length;
-
-	*size = cfh->cfh_length / MV_PP3_HMAC_DG_SIZE;
+	/* return real CFH pointer */
 	return (u8 *)cfh;
 }
 
-- 
1.7.5.4

