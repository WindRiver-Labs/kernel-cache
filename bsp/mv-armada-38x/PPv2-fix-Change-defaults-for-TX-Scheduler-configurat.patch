From 45e629d932bfec04f77108762fc3d980d0e02e3c Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Tue, 2 Jul 2013 17:13:52 -0400
Subject: [PATCH 0754/1825] PPv2: fix: Change defaults for TX Scheduler
 configuration

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit b1d40d822682ff0cd4c06b7031b14495d0216e6d

	Set TXP refill token rate and bucket size to maximum
	Set TXQ refill token rate and bucket size to maximum
	Fix bug in the function mvPp2TxpMaxTxSizeSet().
	Enable to work in 2G and 2.5G modes

Change-Id: I77613434105fe026d1009268cb56abb565fe7b7d
Reviewed-on: http://vgitil04.il.marvell.com:8080/2392
Reviewed-by: Igor Patrik <igorp@marvell.com>
Tested-by: Igor Patrik <igorp@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c |   57 ++++++++++++++++++++----
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h |    9 +++-
 2 files changed, 55 insertions(+), 11 deletions(-)

diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
index 6384d00..6cb6157 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
@@ -219,7 +219,6 @@ function sets default values to the NETA port.
 *******************************************************************************/
 MV_STATUS mvPp2DefaultsSet(int port)
 {
-	MV_U32 regVal;
 	int txp, queue, txPortNum, i;
 	MV_PP2_PORT_CTRL *pPortCtrl = mvPp2PortHndlGet(port);
 
@@ -234,12 +233,9 @@ MV_STATUS mvPp2DefaultsSet(int port)
 		for (queue = 0; queue < MV_ETH_MAX_TXQ; queue++)
 			mvPp2WrReg(MV_PP2_TXQ_SCHED_TOKEN_CNTR_REG(MV_PPV2_TXQ_PHYS(port, txp, queue)), 0);
 
-		/* Set basic period to  1 usec */
-		regVal = mvPp2RdReg(MV_PP2_TXP_SCHED_REFILL_REG);
-		regVal &= ~MV_PP2_TXP_REFILL_PERIOD_ALL_MASK;
-		regVal |= MV_PP2_TXP_REFILL_PERIOD_MASK(1);
-		mvPp2WrReg(MV_PP2_TXP_SCHED_REFILL_REG, regVal);
+		/* Set refill period to 1 usec, refill tokens and bucket size to maximum */
 		mvPp2WrReg(MV_PP2_TXP_SCHED_PERIOD_REG, mvPp2HalData.tClk / 1000000);
+		mvPp2TxpMaxRateSet(port, txp);
 	}
 
 	/* Enable Rx cache snoop */
@@ -629,6 +625,8 @@ MV_PP2_PHYS_TXQ_CTRL *mvPp2TxqInit(int port, int txp, int txq, int descNum, int
 	mvPp2WrReg(MV_PP2_TXQ_PREF_BUF_REG, MV_PP2_PREF_BUF_PTR(ptxq*4) | MV_PP2_PREF_BUF_SIZE_4 |
 				MV_PP2_PREF_BUF_THRESH(4/2));
 
+	mvPp2TxqMaxRateSet(port, txp, txq);
+
 	return pTxq;
 }
 
@@ -658,7 +656,7 @@ MV_STATUS mvPp2TxqDelete(int port, int txp, int txq)
 
 /* Allocate and initialize all physical TXQs.
    This function must be called before any use of TXQ */
-MV_STATUS mvPp2PhysTxqsAlloc()
+MV_STATUS mvPp2PhysTxqsAlloc(void)
 {
 	int i;
 
@@ -1214,6 +1212,47 @@ MV_STATUS mvPp2GbeIsrRxqGroup(int port, int rxqNum)
 }
 /*-------------------------------------------------------------------------------*/
 /* WRR / EJP configuration routines */
+
+MV_STATUS mvPp2TxpMaxRateSet(int port, int txp)
+{
+	MV_U32 regVal;
+	int eport;
+
+	eport = mvPp2EgressPort(port, txp);
+	mvPp2WrReg(MV_PP2_TXP_SCHED_PORT_INDEX_REG, eport);
+
+	regVal = mvPp2RdReg(MV_PP2_TXP_SCHED_REFILL_REG);
+	regVal &= ~MV_PP2_TXP_REFILL_PERIOD_ALL_MASK;
+	regVal |= MV_PP2_TXP_REFILL_PERIOD_MASK(1);
+	regVal |= MV_PP2_TXP_REFILL_TOKENS_ALL_MASK;
+	mvPp2WrReg(MV_PP2_TXP_SCHED_REFILL_REG, regVal);
+
+	regVal = MV_PP2_TXP_TOKEN_CNTR_MAX;
+	mvPp2WrReg(MV_PP2_TXP_SCHED_TOKEN_SIZE_REG, regVal);
+
+	return MV_OK;
+}
+
+MV_STATUS mvPp2TxqMaxRateSet(int port, int txp, int txq)
+{
+	MV_U32 regVal;
+	int eport;
+
+	eport = mvPp2EgressPort(port, txp);
+	mvPp2WrReg(MV_PP2_TXP_SCHED_PORT_INDEX_REG, eport);
+
+	regVal = mvPp2RdReg(MV_PP2_TXQ_SCHED_REFILL_REG(txq));
+	regVal &= ~MV_PP2_TXQ_REFILL_PERIOD_ALL_MASK;
+	regVal |= MV_PP2_TXQ_REFILL_PERIOD_MASK(1);
+	regVal |= MV_PP2_TXQ_REFILL_TOKENS_ALL_MASK;
+	mvPp2WrReg(MV_PP2_TXQ_SCHED_REFILL_REG(txq), regVal);
+
+	regVal = MV_PP2_TXQ_TOKEN_CNTR_MAX;
+	mvPp2WrReg(MV_PP2_TXQ_SCHED_TOKEN_SIZE_REG(txq), regVal);
+
+	return MV_OK;
+}
+
 /* Calculate period and tokens accordingly with required rate and accuracy */
 MV_STATUS mvPp2RateCalc(int rate, unsigned int accuracy, unsigned int *pPeriod, unsigned int *pTokens)
 {
@@ -1508,13 +1547,13 @@ MV_STATUS   mvPp2TxpMaxTxSizeSet(int port, int txp, int maxTxSize)
 		mvPp2WrReg(MV_PP2_TXP_SCHED_TOKEN_SIZE_REG, regVal);
 	}
 	for (txq = 0; txq < CONFIG_MV_ETH_TXQ; txq++) {
-		regVal = mvPp2RdReg(MV_PP2_TXQ_SCHED_REFILL_REG(txq));
+		regVal = mvPp2RdReg(MV_PP2_TXQ_SCHED_TOKEN_SIZE_REG(txq));
 		size = regVal & MV_PP2_TXQ_TOKEN_SIZE_MAX;
 		if (size < mtu) {
 			size = mtu;
 			regVal &= ~MV_PP2_TXQ_TOKEN_SIZE_MAX;
 			regVal |= size;
-			mvPp2WrReg(MV_PP2_TXQ_SCHED_REFILL_REG(txq), regVal);
+			mvPp2WrReg(MV_PP2_TXQ_SCHED_TOKEN_SIZE_REG(txq), regVal);
 		}
 	}
 	return MV_OK;
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
index 7f3a81f..75ff2ff 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
@@ -68,8 +68,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "mvTypes.h"
 #include "mvCommon.h"
 #include "mvOs.h"
-#include "ctrlEnv/mvCtrlEnvSpec.h"
-#include "ctrlEnv/mvCtrlEnvLib.h"
 #include "mvSysEthConfig.h"
 #include "mvPp2GbeRegs.h"
 #include "pp2/gmac/mvEthGmacApi.h"
@@ -85,6 +83,11 @@ static inline int mvPp2IsRxSpecial(MV_U16 parser_info)
 	return PP2_CPU_CODE_IS_RX_SPECIAL(cpu_code);
 }
 
+static inline int mvPp2RxBmPoolId(PP2_RX_DESC *rxDesc)
+{
+	return (rxDesc->status & PP2_RX_BM_POOL_ALL_MASK) >> PP2_RX_BM_POOL_ID_OFFS;
+}
+
 /************************** PPv2 HW Configuration ***********************/
 typedef struct eth_pbuf {
 	void *osInfo;
@@ -581,6 +584,8 @@ MV_STATUS mvPp2MhSet(int port, MV_PP2_MH_MODE mh);
 MV_STATUS mvPp2RxFifoInit(int portNum);
 
 MV_STATUS mvPp2TxpMaxTxSizeSet(int port, int txp, int maxTxSize);
+MV_STATUS mvPp2TxpMaxRateSet(int port, int txp);
+MV_STATUS mvPp2TxqMaxRateSet(int port, int txp, int txq);
 MV_STATUS mvPp2TxpRateSet(int port, int txp, int rate);
 MV_STATUS mvPp2TxpBurstSet(int port, int txp, int burst);
 MV_STATUS mvPp2TxqRateSet(int port, int txp, int txq, int rate);
-- 
1.7.5.4

