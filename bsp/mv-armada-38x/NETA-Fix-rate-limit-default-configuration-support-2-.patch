From 912c41c7219c2a755543f6a84f8acc47b863a8de Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Sun, 23 Jun 2013 10:51:49 -0400
Subject: [PATCH 0728/1825] NETA: Fix rate limit default configuration -
 support 2 Gbps

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 99da6b72b9f710bc95591c4d7c5a815624fd1e78

	- Found by APPS
	- Set refill tokens value to maximum for TXP and all initialized TXQs
	- Remove code used for old WRR implementation for z1 (!MV_ETH_WRR_NEW)

Change-Id: I98c72eeaa2342faf21cd14d5513f0769589d4223
Reviewed-on: http://vgitil04.il.marvell.com:8080/2330
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
Tested-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/neta/gbe/mvEthRegs.h   |   79 --------
 arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.c      |  210 ++------------------
 arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.h      |    1 +
 arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaDebug.c |   16 --
 arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaRegs.h  |    3 -
 5 files changed, 15 insertions(+), 294 deletions(-)

diff --git a/arch/arm/plat-armada/mv_hal/neta/gbe/mvEthRegs.h b/arch/arm/plat-armada/mv_hal/neta/gbe/mvEthRegs.h
index dd2100b..855edcf 100644
--- a/arch/arm/plat-armada/mv_hal/neta/gbe/mvEthRegs.h
+++ b/arch/arm/plat-armada/mv_hal/neta/gbe/mvEthRegs.h
@@ -464,85 +464,6 @@ extern "C" {
 #define ETH_RXQ_DISABLE_MASK                (0x000000FF << ETH_RXQ_DISABLE_OFFSET)
 /*-----------------------------------------------------------------------------------------------*/
 
-/******************************** WRR Legacy rigisters ********************************************/
-
-#ifndef MV_ETH_WRR_NEW
-
-/* Transmit Queue Fixed Priority Configuration (TQFPC) */
-#define ETH_TX_FIXED_PRIO_CFG_REG(p, txp)   (NETA_TX_REG_BASE((p), (txp)) + 0x00dc)
-
-#define ETH_TX_FIXED_PRIO_OFFS              0
-#define ETH_TX_FIXED_PRIO_MASK              (0xFF << ETH_TX_FIXED_PRIO_OFFS)
-/*-----------------------------------------------------------------------------------------------*/
-
-/* Port Transmit Token-Bucket Rate Configuration (PTTBRC) */
-#define ETH_TXP_TOKEN_RATE_CFG_REG(p, txp)  (NETA_TX_REG_BASE((p), (txp)) + 0x00e0)
-
-#define ETH_TXP_TOKEN_RATE_OFFS             0
-#define ETH_TXP_TOKEN_RATE_MAX              0x7FFF
-#define ETH_TXP_TOKEN_RATE_ALL_MASK         (ETH_TXP_TOKEN_RATE_MAX << ETH_TXP_TOKEN_RATE_OFFS)
-#define ETH_TXP_TOKEN_RATE_MASK(rate)       ((rate) << ETH_TXP_TOKEN_RATE_OFFS)
-/*-----------------------------------------------------------------------------------------------*/
-
-/* Transmit Queue Command1 (TQC1) - reserved */
-#define ETH_TXQ_CMD_1_REG(p, txp)           (NETA_TX_REG_BASE((p), (txp)) + 0x00e4)
-/*-----------------------------------------------------------------------------------------------*/
-
-#define ETH_MAX_TRANSMIT_UNIT_REG(p, txp)   (NETA_TX_REG_BASE((p), (txp)) + 0x00e8)
-
-#define ETH_TX_MTU_OFFS                     0
-#define ETH_TX_MTU_MAX                      0x3F
-#define ETH_TX_MTU_ALL_MASK                 (ETH_TX_MTU_MAX << ETH_TX_MTU_OFFS)
-#define ETH_TX_MTU_MASK(mtu)                ((mtu) << ETH_TX_MTU_OFFS)
-/*-----------------------------------------------------------------------------------------------*/
-
-/* Port Maximum Token Bucket Size (PMTBS) */
-#define ETH_TXP_TOKEN_SIZE_REG(p, txp)      (NETA_TX_REG_BASE((p), (txp)) + 0x00ec)
-
-#define ETH_TXP_TOKEN_SIZE_OFFS             0
-#define ETH_TXP_TOKEN_SIZE_MAX              0xFFFF
-#define ETH_TXP_TOKEN_SIZE_ALL_MASK         (ETH_TXP_TOKEN_SIZE_MAX << ETH_TXP_TOKEN_SIZE_OFFS)
-#define ETH_TXP_TOKEN_SIZE_MASK(size)       ((size) << ETH_TXP_TOKEN_SIZE_OFFS)
-/*-----------------------------------------------------------------------------------------------*/
-
-#define ETH_TXQ_TOKEN_COUNT_REG(p, txp, q)  (NETA_TX_REG_BASE((p), (txp)) + 0x0300 + ((q) << 4))
-
-#define ETH_TXQ_TOKEN_COUNT_OFFS            0
-#define ETH_TXQ_TOKEN_COUNT_MASK            (0x3FFFFFFF << ETH_TXQ_TOKEN_COUNT_OFFS)
-/*-----------------------------------------------------------------------------------------------*/
-
-/* Transmit Queue Token Bucket Configuration (TQxTBC) */
-#define ETH_TXQ_TOKEN_CFG_REG(p, txp, q)    (NETA_TX_REG_BASE((p), (txp)) + 0x0304 + ((q) << 4))
-
-#define ETH_TXQ_TOKEN_RATE_OFFS             0
-#define ETH_TXQ_TOKEN_RATE_MAX              0x7FFF
-#define ETH_TXQ_TOKEN_RATE_ALL_MASK         (ETH_TXQ_TOKEN_RATE_MAX << ETH_TXQ_TOKEN_RATE_OFFS)
-#define ETH_TXQ_TOKEN_RATE_MASK(size)       ((size) << ETH_TXQ_TOKEN_RATE_OFFS)
-
-#define ETH_TXQ_TOKEN_SIZE_OFFS             16
-#define ETH_TXQ_TOKEN_SIZE_MAX              0xFFFF
-#define ETH_TXQ_TOKEN_SIZE_ALL_MASK         (ETH_TXQ_TOKEN_SIZE_MAX << ETH_TXQ_TOKEN_SIZE_OFFS)
-#define ETH_TXQ_TOKEN_SIZE_MASK(size)       ((size) << ETH_TXQ_TOKEN_SIZE_OFFS)
-/*-----------------------------------------------------------------------------------------------*/
-
-/* Transmit Queue Arbiter Configuration (TQxAC) register */
-#define ETH_TXQ_ARBITER_CFG_REG(p, txp, q)  (NETA_TX_REG_BASE((p), (txp)) + 0x0308 + ((q) << 4))
-
-#define ETH_TXQ_WRR_WEIGHT_OFFS             0
-#define ETH_TXQ_WRR_WEIGHT_MAX              0xFF
-#define ETH_TXQ_WRR_WEIGHT_ALL_MASK         (ETH_TXQ_WRR_WEIGHT_MAX << ETH_TXQ_WRR_WEIGHT_OFFS)
-#define ETH_TXQ_WRR_WEIGHT_MASK(weigth)     ((weigth) << ETH_TXQ_WRR_WEIGHT_OFFS)
-/*-----------------------------------------------------------------------------------------------*/
-
-/* Port Transmit Token-Bucket Counter (PTTBC) */
-#define ETH_TXP_TOKEN_COUNT_REG(p, txp)     (NETA_TX_REG_BASE((p), (txp)) + 0x0380)
-#define ETH_TXP_TOKEN_COUNT_OFFS            0
-#define ETH_TXP_TOKEN_COUNT_MASK            (0x3FFFFFFF << ETH_TXP_TOKEN_COUNT_OFFS)
-
-#endif /* MV_ETH_WRR_NEW */
-/**************************************************************************************************/
-
-
 #define ETH_MIB_COUNTERS_BASE(port, txp)    (ETH_REG_BASE(port) + 0x3000 + ((txp) * 0x80))
 #define ETH_DA_FILTER_SPEC_MCAST_BASE(port) (ETH_REG_BASE(port) + 0x3400)
 #define ETH_DA_FILTER_OTH_MCAST_BASE(port)  (ETH_REG_BASE(port) + 0x3500)
diff --git a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.c b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.c
index 6139bfa..9513748 100644
--- a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.c
+++ b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.c
@@ -347,21 +347,15 @@ MV_STATUS mvNetaDefaultsSet(int port)
 #endif /* CONFIG_MV_PON */
 
 		/* Disable Legacy WRR, Disable EJP, Release from reset */
-#ifdef MV_ETH_WRR_NEW
 		MV_REG_WRITE(NETA_TX_CMD_1_REG(port, txp), 0);
+
 		/* Close bandwidth for all queues */
 		for (queue = 0; queue < MV_ETH_MAX_TXQ; queue++)
 			MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, txp, queue),  0);
 
 		/* Set basic period to  1 usec */
 		MV_REG_WRITE(NETA_TX_REFILL_PERIOD_REG(port, txp),  mvNetaHalData.tClk / 1000000);
-#else
-		MV_REG_WRITE(ETH_TXQ_CMD_1_REG(port, txp), 0);
-		for (queue = 0; queue < MV_ETH_MAX_TXQ; queue++) {
-			MV_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(port, txp, queue), 0);
-			MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, txp, queue), 0);
-		}
-#endif /* MV_ETH_WRR_NEW */
+		mvNetaTxpRateMaxSet(port, txp);
 
 		MV_REG_WRITE(NETA_PORT_TX_RESET_REG(port, txp), 0);
 	}
@@ -2329,17 +2323,22 @@ void mvNetaTxqAddrSet(int port, int txp, int queue, int descrNum)
 	MV_REG_WRITE(NETA_TXQ_SIZE_REG(port, txp, queue), NETA_TXQ_DESC_NUM_MASK(descrNum));
 }
 
+/* Set maximum bandwidth for TX port */
+void mvNetaTxpRateMaxSet(int port, int txp)
+{
+	MV_U32 regVal = NETA_TXP_REFILL_TOKENS_ALL_MASK | NETA_TXP_REFILL_PERIOD_MASK(1);
+
+	MV_REG_WRITE(NETA_TXP_REFILL_REG(port, txp), regVal);
+	MV_REG_WRITE(NETA_TXP_TOKEN_CNTR_REG(port, txp), NETA_TXP_TOKEN_CNTR_MAX);
+}
 
 /* Set maximum bandwidth for enabled TXQs */
 void mvNetaTxqBandwidthSet(int port, int txp,  int queue)
 {
+	MV_U32 regVal = NETA_TXQ_REFILL_TOKENS_ALL_MASK | NETA_TXQ_REFILL_PERIOD_MASK(1);
 
-#ifdef MV_ETH_WRR_NEW
-    MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, txp, queue), NETA_TXQ_TOKEN_CNTR_MAX);
-#else
-	MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, txp, queue), 0x03ffffff);
-	MV_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(port, txp, queue), 0x3fffffff);
-#endif /* MV_ETH_WRR_NEW */
+	MV_REG_WRITE(NETA_TXQ_REFILL_REG(port, txp, queue), regVal);
+	MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, txp, queue), NETA_TXQ_TOKEN_CNTR_MAX);
 }
 
 
@@ -2395,13 +2394,8 @@ void mvNetaTxqDelete(int port, int txp, int queue)
 
 	memset(pQueueCtrl, 0, sizeof(*pQueueCtrl));
 
-    /* Set minimum bandwidth for disabled TXQs */
-#ifdef MV_ETH_WRR_NEW
+	/* Set minimum bandwidth for disabled TXQs */
 	MV_REG_WRITE(NETA_TXQ_TOKEN_CNTR_REG(port, txp, queue), 0);
-#else
-	MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, txp, queue), 0);
-	MV_REG_WRITE(ETH_TXQ_TOKEN_COUNT_REG(port, txp, queue), 0);
-#endif /* MV_ETH_WRR_NEW */
 
 	/* Set Tx descriptors queue starting address and size */
 	MV_REG_WRITE(NETA_TXQ_BASE_ADDR_REG(port, txp, queue), 0);
@@ -2854,7 +2848,6 @@ MV_STATUS mvNetaTxpEjpTxSpeedSet(int port, int txp, int type, int speed)
 	return MV_OK;
 }
 
-#ifdef MV_ETH_WRR_NEW
 /* Calculate period and tokens accordingly with required rate and accuracy */
 MV_STATUS mvNetaRateCalc(int rate, unsigned int accuracy, unsigned int *pPeriod, unsigned int *pTokens)
 {
@@ -3159,181 +3152,6 @@ MV_STATUS mvNetaTxqBurstSet(int port, int txp, int txq, int burst)
 	return MV_OK;
 }
 
-#else /* Old WRR/EJP module */
-
-MV_STATUS mvNetaTxpEjpSet(int port, int txp, int enable)
-{
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	mvOsPrintf("Not supported\n");
-
-	return MV_OK;
-}
-
-
-/* Set TXQ to work in FIX priority mode */
-MV_STATUS mvNetaTxqFixPrioSet(int port, int txp, int txq)
-{
-	MV_U32 regVal;
-
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	if (mvNetaMaxCheck(txq, MV_ETH_MAX_TXQ))
-		return MV_BAD_PARAM;
-
-	regVal = MV_REG_READ(ETH_TX_FIXED_PRIO_CFG_REG(port, txp));
-	regVal |= (1 << txq);
-	MV_REG_WRITE(ETH_TX_FIXED_PRIO_CFG_REG(port, txp), regVal);
-
-	return MV_OK;
-}
-
-/* Set TXQ to work in WRR mode and set relative weight. */
-/*   Weight range [1..N] */
-MV_STATUS mvNetaTxqWrrPrioSet(int port, int txp, int txq, int weight)
-{
-	MV_U32 regVal;
-
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	if (mvNetaMaxCheck(txq, MV_ETH_MAX_TXQ))
-		return MV_BAD_PARAM;
-
-	regVal = MV_REG_READ(ETH_TXQ_ARBITER_CFG_REG(port, txp, txq));
-	if (weight > ETH_TXQ_WRR_WEIGHT_MAX)
-		weight = ETH_TXQ_WRR_WEIGHT_MAX;
-
-	regVal &= ~ETH_TXQ_WRR_WEIGHT_ALL_MASK;
-	regVal |= ETH_TXQ_WRR_WEIGHT_MASK(weight);
-	MV_REG_WRITE(ETH_TXQ_ARBITER_CFG_REG(port, txp, txq), regVal);
-
-	regVal = MV_REG_READ(ETH_TX_FIXED_PRIO_CFG_REG(port, txp));
-	regVal &= ~(1 << txq);
-	MV_REG_WRITE(ETH_TX_FIXED_PRIO_CFG_REG(port, txp), regVal);
-
-	return MV_OK;
-}
-
-MV_STATUS   mvNetaTxpMaxTxSizeSet(int port, int txp, int maxTxSize)
-{
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	/* TBD */
-	return MV_OK;
-}
-
-/* Set bandwidth limitation for TX port
- *   bw [kbps]    - steady state TX bandwidth limitation
- */
-MV_STATUS mvNetaTxpRateSet(int port, int txp, int bw)
-{
-	MV_U32 regVal, rate;
-
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	/* TokenRate[1/64 bit/cycle] = BW[kb/sec]*64/TCLK[MHz]. */
-	rate = (((bw * 64) / 1000) / (mvNetaHalData.tClk / 1000000));
-	if (rate > ETH_TXP_TOKEN_RATE_MAX)
-		rate = ETH_TXP_TOKEN_RATE_MAX;
-
-	regVal = MV_REG_READ(ETH_TXP_TOKEN_RATE_CFG_REG(port, txp));
-	regVal &= ~ETH_TXP_TOKEN_RATE_ALL_MASK;
-	regVal |= ETH_TXP_TOKEN_RATE_MASK(rate);
-
-	MV_REG_WRITE(ETH_TXP_TOKEN_RATE_CFG_REG(port, txp), regVal);
-
-	return MV_OK;
-}
-
-/* Set maximum burst size for TX port
- *   burst [bytes] - number of bytes to be sent with maximum possible TX rate,
- *                    before TX rate limitation will take place.
- */
-MV_STATUS mvNetaTxpBurstSet(int port, int txp, int burst)
-{
-	MV_U32 regVal, size;
-
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	/* Token Bucket Size */
-	size = (burst / 256);
-	if (size > ETH_TXP_TOKEN_SIZE_MAX)
-		size = ETH_TXP_TOKEN_SIZE_MAX;
-
-	regVal = MV_REG_READ(ETH_TXP_TOKEN_SIZE_REG(port, txp));
-	regVal &= ~ETH_TXP_TOKEN_SIZE_ALL_MASK;
-	regVal |= ETH_TXP_TOKEN_SIZE_MASK(size);
-
-	MV_REG_WRITE(ETH_TXP_TOKEN_SIZE_REG(port, txp), regVal);
-
-	return MV_OK;
-}
-
-/* Set bandwidth limitation for TXQ
- *   rate  [kbps]  - steady state TX rate limitation
- */
-MV_STATUS mvNetaTxqRateSet(int port, int txp, int txq, int bw)
-{
-	MV_U32 regVal;
-	MV_U32 rate;
-
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	if (mvNetaMaxCheck(txq, MV_ETH_MAX_TXQ))
-		return MV_BAD_PARAM;
-
-	regVal = MV_REG_READ(ETH_TXQ_TOKEN_CFG_REG(port, txp, txq));
-
-	/* TokenRate[1/64 bit/cycle] = BW[Mb/sec]*64/TCLK[MHz]. */
-	rate = (((bw * 64) / 1000) / (mvNetaHalData.tClk / 1000000));
-	if (rate > ETH_TXQ_TOKEN_RATE_MAX)
-		rate = ETH_TXQ_TOKEN_RATE_MAX;
-
-	regVal &= ~ETH_TXQ_TOKEN_RATE_ALL_MASK;
-	regVal |= ETH_TXQ_TOKEN_RATE_MASK(rate);
-
-	MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, txp, txq), regVal);
-
-	return MV_OK;
-}
-
-/* Set maximum burst size for TX port
- *   burst [bytes] - number of bytes to be sent with maximum possible TX rate,
- *                    before TX bandwidth limitation will take place.
- */
-MV_STATUS mvNetaTxqBurstSet(int port, int txp, int txq, int burst)
-{
-	MV_U32 regVal, size;
-
-	if (mvNetaTxpCheck(port, txp))
-		return MV_BAD_PARAM;
-
-	if (mvNetaMaxCheck(txq, MV_ETH_MAX_TXQ))
-		return MV_BAD_PARAM;
-
-	/* Token Bucket Size */
-	size = (burst / 256);
-	if (size > ETH_TXQ_TOKEN_SIZE_MAX)
-		size = ETH_TXQ_TOKEN_SIZE_MAX;
-
-	regVal = MV_REG_READ(ETH_TXQ_TOKEN_CFG_REG(port, txp, txq));
-
-	regVal &= ~ETH_TXQ_TOKEN_SIZE_ALL_MASK;
-	regVal |= ETH_TXQ_TOKEN_SIZE_MASK(size);
-
-	MV_REG_WRITE(ETH_TXQ_TOKEN_CFG_REG(port, txp, txq), regVal);
-
-	return MV_OK;
-}
-#endif /* MV_ETH_WRR_NEW */
-
 #ifdef CONFIG_MV_ETH_LEGACY_PARSER
 /******************************************************************************/
 /*                        RX Dispatching configuration routines               */
diff --git a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.h b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.h
index 2870781..379460b 100644
--- a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.h
+++ b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNeta.h
@@ -675,6 +675,7 @@ void		mvNetaTxqDelete(int port, int txp, int queue);
 void		mvNetaRxqDelete(int port, int queue);
 void		mvNetaRxqAddrSet(int port, int queue, int descrNum);
 void 		mvNetaTxqAddrSet(int port, int txp, int queue, int descrNum);
+void            mvNetaTxpRateMaxSet(int port, int txp);
 void 		mvNetaTxqBandwidthSet(int port, int txp,  int queue);
 
 void mvNetaRxReset(int port);
diff --git a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaDebug.c b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaDebug.c
index 6b5ff60..9873299 100644
--- a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaDebug.c
+++ b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaDebug.c
@@ -122,7 +122,6 @@ void mvEthTxpWrrRegs(int port, int txp)
 	mvOsPrintf("\n[TXP WRR/EJP registers: port=%d, txp=%d]\n", port, txp);
 	mvEthRegPrint(ETH_TX_QUEUE_COMMAND_REG(port, txp), "ETH_TX_QUEUE_COMMAND_REG");
 
-#ifdef MV_ETH_WRR_NEW
 	mvEthRegPrint(NETA_TX_CMD_1_REG(port, txp),          "NETA_TX_CMD_1_REG");
 	mvEthRegPrint(NETA_TX_FIXED_PRIO_CFG_REG(port, txp), "NETA_TX_FIXED_PRIO_CFG_REG");
 	mvEthRegPrint(NETA_TX_REFILL_PERIOD_REG(port, txp),  "NETA_TX_REFILL_PERIOD_REG");
@@ -144,21 +143,6 @@ void mvEthTxpWrrRegs(int port, int txp)
 		if ((queue == 2) || (queue == 3))
 			mvEthRegPrint(NETA_TXQ_EJP_IPG_REG(port, txp, queue), "NETA_TXQ_EJP_IPG_REG");
 	}
-#else
-	mvEthRegPrint(ETH_TXQ_CMD_1_REG(port, txp), "ETH_TXQ_CMD_1_REG");
-	mvEthRegPrint(ETH_TX_FIXED_PRIO_CFG_REG(port, txp), "ETH_TX_FIXED_PRIO_CFG_REG");
-	mvEthRegPrint(ETH_TXP_TOKEN_RATE_CFG_REG(port, txp), "ETH_TXP_TOKEN_RATE_CFG_REG");
-	mvEthRegPrint(ETH_MAX_TRANSMIT_UNIT_REG(port, txp), "ETH_MAX_TRANSMIT_UNIT_REG");
-	mvEthRegPrint(ETH_TXP_TOKEN_SIZE_REG(port, txp), "ETH_TXP_TOKEN_BUCKET_SIZE_REG");
-	mvEthRegPrint(ETH_TXP_TOKEN_COUNT_REG(port, txp), "ETH_TXP_TOKEN_BUCKET_COUNT_REG");
-
-	for (queue = 0; queue < MV_ETH_MAX_TXQ; queue++) {
-		mvOsPrintf("\n[TxQ policy: port=%d, txp=%d, txq=%d]\n", port, txp, queue);
-		mvEthRegPrint(ETH_TXQ_TOKEN_COUNT_REG(port, txp, queue), "ETH_TXQ_TOKEN_COUNT_REG");
-		mvEthRegPrint(ETH_TXQ_TOKEN_CFG_REG(port, txp, queue), "ETH_TXQ_TOKEN_CFG_REG");
-		mvEthRegPrint(ETH_TXQ_ARBITER_CFG_REG(port, txp, queue), "ETH_TXQ_ARBITER_CFG_REG");
-	}
-#endif /* MV_ETH_WRR_NEW */
 }
 
 /* Print important registers of Ethernet port */
diff --git a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaRegs.h b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaRegs.h
index 9c17560..2cdeaac 100644
--- a/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaRegs.h
+++ b/arch/arm/plat-armada/mv_hal/neta/gbe/mvNetaRegs.h
@@ -825,9 +825,7 @@ extern "C" {
 
 #endif /* MV_ETH_PMT_NEW */
 
-#ifdef MV_ETH_WRR_NEW
 /*********************** New TX WRR EJP Registers ********************************/
-
 #define NETA_TX_CMD_1_REG(p, txp)           (NETA_TX_REG_BASE((p), (txp)) + 0x1a00)
 
 #define NETA_TX_EJP_RESET_BIT               0
@@ -939,7 +937,6 @@ extern "C" {
 #define NETA_TXP_EJP_LO_ASYNC_REG(p, txp)   (NETA_TX_REG_BASE((p), (txp)) + 0x1ab8)
 #define NETA_TXP_EJP_SPEED_REG(p, txp)      (NETA_TX_REG_BASE((p), (txp)) + 0x1abc)
 /*-----------------------------------------------------------------------------------------------*/
-#endif /* MV_ETH_WRR_NEW */
 
 /******************** NETA RX EXTENDED DESCRIPTOR ********************************/
 
-- 
1.7.5.4

