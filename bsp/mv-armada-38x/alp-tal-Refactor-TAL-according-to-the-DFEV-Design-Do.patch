From b14b405960a6b43cd71092beb7df143c1a118731 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Wed, 15 Jan 2014 13:59:06 +0200
Subject: [PATCH 1295/1825] alp: tal: Refactor TAL according to the DFEV
 Design Document.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 24f3a8c3871fd51f4a20cb0162708f37aa4c7dbf

	The new TAL will support TDM and DFEV based telephony providing
	unified API for these subsystems.

Change-Id: I6e12d04f9db2705d4a7048b0c99b74e67681f821
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5161
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.c  |  190 +++++++------------
 .../plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.h  |   41 +++--
 .../mv_drivers_lsp/mv_phone/tdm/test/tdm_dev.c     |    1 -
 3 files changed, 96 insertions(+), 136 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.c
index 2857224..6461a26 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.c
@@ -19,167 +19,117 @@ disclaimer.
 ********************************************************************************/
 
 /* Marvell Telephony Adaptation Layer */
-
 #include "tal.h"
-#include "tdm_if.h"
-
-/* GLobals */
-static tdm_if_register_ops_t tal_tdm_if_register_ops;
-static tal_mmp_ops_t* tal_mmp_ops;
-static tdm_if_params_t tal_tdm_if_params;
 
-/* Static APIs */
-static void tal_pcm_tx_callback(uint8_t* tx_buff, int size);
-static void tal_pcm_rx_callback(uint8_t* rx_buff, int size);
+static tal_if_t *tal_if;
+static tal_mmp_ops_t *tal_mmp;
 
-/*---------------------------------------------------------------------------*
- * tal_init
- * Issue telephony subsytem initialization and callbacks registration
- *---------------------------------------------------------------------------*/
 tal_stat_t tal_init(tal_params_t* tal_params, tal_mmp_ops_t* mmp_ops)
 {
-	if((tal_params == NULL) || (mmp_ops == NULL))
-	{
-		mvOsPrintf("%s: Error, bad parameters\n",__FUNCTION__);
+	if (!tal_params || !mmp_ops) {
+		mvOsPrintf("%s: Error, bad parameters.\n", __func__);
 		return TAL_STAT_BAD_PARAM;
 	}
 
-	if(mmp_ops->tal_mmp_rx_callback == NULL ||
-	   mmp_ops->tal_mmp_tx_callback == NULL)
-	{
-		mvOsPrintf("%s:Error, missing callbacks(MMP)\n",__FUNCTION__);
+	if (!mmp_ops->tal_mmp_rx_callback || !mmp_ops->tal_mmp_tx_callback) {
+		mvOsPrintf("%s: Error, MMP callbacks are missing.\n", __func__);
 		return TAL_STAT_BAD_PARAM;
 	}
 
-	/* Convert tal_params to tdm_if_params */
-	memcpy(&tal_tdm_if_params, tal_params, sizeof(tal_params_t));
-
-	/* Assign MMP operations */
-	tal_mmp_ops = mmp_ops;
-
-	/* Clear tdm_if operations structure */
-	memset(&tal_tdm_if_register_ops, 0, sizeof(tdm_if_register_ops_t));
-
-	/* Assign tdm_if operations */
-	tal_tdm_if_register_ops.tdm_if_pcm_ops.pcm_tx_callback = tal_pcm_tx_callback;
-	tal_tdm_if_register_ops.tdm_if_pcm_ops.pcm_rx_callback = tal_pcm_rx_callback;
-
-	/* Dispatch tdm_if driver */
-	if(tdm_if_init(&tal_tdm_if_register_ops, &tal_tdm_if_params) != MV_OK)
-	{
-		mvOsPrintf("%s: Error, could not initialize tdm_if driver !!!\n",__FUNCTION__);
-		return TAL_STAT_INIT_ERROR;
-	}
-
-	/* Verify control callbacks were assigned properly */
-	if(tal_tdm_if_register_ops.tdm_if_ctl_ops.ctl_pcm_start == NULL ||
-	   tal_tdm_if_register_ops.tdm_if_ctl_ops.ctl_pcm_stop == NULL)
-	{
-		mvOsPrintf("%s:Error, missing callbacks(tdm_if)\n",__FUNCTION__);
-		return TAL_STAT_BAD_PARAM;
-	}
+	tal_mmp = mmp_ops;
+	if (tal_if && tal_if->init)
+		if (tal_if->init(tal_params) != MV_OK)
+			return TAL_STAT_INIT_ERROR;
 
 	return TAL_STAT_OK;
 }
 EXPORT_SYMBOL(tal_init);
 
-/*---------------------------------------------------------------------------*
- * tal_pcm_tx_completion
- * Tx callback
- *---------------------------------------------------------------------------*/
-
-static void tal_pcm_tx_callback(uint8_t* tx_buff, int size)
+void tal_exit(void)
 {
-	tal_mmp_ops->tal_mmp_tx_callback(tx_buff, size);
-}
-
-/*---------------------------------------------------------------------------*
- * tal_pcm_rx_completion
- * Rx callback
- *---------------------------------------------------------------------------*/
+	if (tal_if && tal_if->exit)
+		tal_if->exit();
 
-static void tal_pcm_rx_callback(uint8_t* rx_buff, int size)
-{
-	tal_mmp_ops->tal_mmp_rx_callback(rx_buff, size);
+	tal_mmp = NULL;
 }
+EXPORT_SYMBOL(tal_exit);
 
-/*---------------------------------------------------------------------------*
- * tal_pcm_start
- * Start PCM bus
- *---------------------------------------------------------------------------*/
-tal_stat_t tal_pcm_start(void)
+void tal_pcm_start(void)
 {
-	tal_tdm_if_register_ops.tdm_if_ctl_ops.ctl_pcm_start();
-	return TAL_STAT_OK;
+	if (tal_if && tal_if->pcm_start)
+		tal_if->pcm_start();
 }
 EXPORT_SYMBOL(tal_pcm_start);
 
-/*---------------------------------------------------------------------------*
- * tal_pcm_stop
- * Stop PCM bus
- *---------------------------------------------------------------------------*/
-tal_stat_t tal_pcm_stop(void)
+void tal_pcm_stop(void)
 {
-	tal_tdm_if_register_ops.tdm_if_ctl_ops.ctl_pcm_stop();
-	return TAL_STAT_OK;
+	if (tal_if && tal_if->pcm_stop)
+		tal_if->pcm_stop();
 }
 EXPORT_SYMBOL(tal_pcm_stop);
 
-/*---------------------------------------------------------------------------*
- * tal_exit
- * Stop TDM channels and release all resources
- *---------------------------------------------------------------------------*/
-tal_stat_t tal_exit(void)
+int tal_control(int cmd, void *data)
 {
-	tdm_if_exit();
-	return TAL_STAT_OK;
+	if (tal_if && tal_if->control)
+		return tal_if->control(cmd, data);
+
+	return -EINVAL;
 }
-EXPORT_SYMBOL(tal_exit);
+EXPORT_SYMBOL(tal_control);
 
-/*---------------------------------------------------------------------------*
- * tal_stats_get
- * Get TDM statistics
- *---------------------------------------------------------------------------*/
-tal_stat_t tal_stats_get(tal_stats_t* tal_stats)
+tal_stat_t tal_write(unsigned char *buffer, int size)
 {
-	tdm_if_stats_t stats;
-
-	tdm_if_stats_get(&stats);
-	memcpy(tal_stats, &stats, sizeof(tal_stats_t));
+	if (tal_if && tal_if->write)
+		if (tal_if->write(buffer, size) != MV_OK)
+			return TAL_STAT_BAD_PARAM;
 
 	return TAL_STAT_OK;
 }
-EXPORT_SYMBOL(tal_stats_get);
+EXPORT_SYMBOL(tal_write);
 
-/*---------------------------------------------------------------------------*
- * tal_tdm_clk_config
- * Config TDM clock
- *---------------------------------------------------------------------------*/
-void tal_tdm_clk_config(void)
+tal_stat_t tal_stats_get(tal_stats_t *tal_stats)
 {
-	mvCtrlTdmClkCtrlConfig();
+	if (tal_stats && tal_if && tal_if->stats_get) {
+		tal_if->stats_get(tal_stats);
+		return TAL_STAT_OK;
+	}
+
+	return TAL_STAT_BAD_PARAM;
 }
-EXPORT_SYMBOL(tal_tdm_clk_config);
-
-#if defined(MV_TDM_USE_DCO)
-/*---------------------------------------------------------------------------*
- * tal_tdm_clk_get
- * Get current TDM clock correction
- *---------------------------------------------------------------------------*/
-int tal_tdm_clk_get(void)
+EXPORT_SYMBOL(tal_stats_get);
+
+tal_stat_t tal_set_if(tal_if_t *interface)
 {
-	return mvCtrlTdmClkCtrlGet();
+	if (interface && (!interface->init || !interface->exit ||
+			  !interface->pcm_start || !interface->pcm_stop)) {
+		mvOsPrintf("%s: Error, TAL callbacks are missing.\n", __func__);
+		return TAL_STAT_BAD_PARAM;
+	}
+
+	tal_if = interface;
+
+	return TAL_STAT_OK;
 }
-EXPORT_SYMBOL(tal_tdm_clk_get);
+EXPORT_SYMBOL(tal_set_if);
 
-/*---------------------------------------------------------------------------*
- * tal_tdm_clk_set
- * Set TDM clock correction
- *---------------------------------------------------------------------------*/
-void tal_tdm_clk_set(int correction)
+tal_stat_t tal_mmp_rx(unsigned char *buffer, int size)
 {
-	return mvCtrlTdmClkCtrlSet(correction);
+	if (tal_mmp && tal_mmp->tal_mmp_rx_callback) {
+		tal_mmp->tal_mmp_rx_callback(buffer, size);
+		return TAL_STAT_OK;
+	}
+
+	return TAL_STAT_BAD_PARAM;
 }
-EXPORT_SYMBOL(tal_tdm_clk_set);
+EXPORT_SYMBOL(tal_mmp_rx);
 
-#endif
+tal_stat_t tal_mmp_tx(unsigned char *buffer, int size)
+{
+	if (tal_mmp && tal_mmp->tal_mmp_tx_callback) {
+		tal_mmp->tal_mmp_tx_callback(buffer, size);
+		return TAL_STAT_OK;
+	}
+
+	return TAL_STAT_BAD_PARAM;
+}
+EXPORT_SYMBOL(tal_mmp_tx);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.h
index 67b409c..2bd0722 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/tal.h
@@ -21,7 +21,8 @@ disclaimer.
 #ifndef _TAL_H_
 #define _TAL_H_
 
-#include "mvOs.h" /* for kernel abstraction wrappers */
+#include "mvOs.h"
+#include "tdm_if.h"
 
 /* Defines */
 #define TAL_MAX_PHONE_LINES	32
@@ -30,13 +31,13 @@ disclaimer.
 typedef enum {
 	TAL_PCM_FORMAT_1BYTE = 1,
 	TAL_PCM_FORMAT_2BYTES = 2,
-	TAL_PCM_FORMAT_4BYTES = 4
+	TAL_PCM_FORMAT_4BYTES = 4,
 } tal_pcm_format_t;
 
 typedef enum {
 	TAL_STAT_OK = 0,
 	TAL_STAT_BAD_PARAM,
-	TAL_STAT_INIT_ERROR
+	TAL_STAT_INIT_ERROR,
 } tal_stat_t;
 
 /* Structures */
@@ -45,7 +46,6 @@ typedef struct {
 	unsigned short pcm_slot[TAL_MAX_PHONE_LINES];
 	unsigned char sampling_period;
 	unsigned short total_lines;
-	unsigned short test_enable;
 } tal_params_t;
 
 typedef struct {
@@ -60,20 +60,31 @@ typedef struct {
 } tal_stats_t;
 
 typedef struct {
-	void (*tal_mmp_rx_callback)(unsigned char* rx_buff, int size);
-	void (*tal_mmp_tx_callback)(unsigned char* tx_buff, int size);
+	void (*tal_mmp_rx_callback)(unsigned char *rx_buff, int size);
+	void (*tal_mmp_tx_callback)(unsigned char *tx_buff, int size);
 } tal_mmp_ops_t;
 
-/* APIs */
+typedef struct {
+	MV_STATUS (*init)(tal_params_t *tal_params);
+	void (*exit)(void);
+	void (*pcm_start)(void);
+	void (*pcm_stop)(void);
+	int (*control)(int cmd, void *data);
+	MV_STATUS (*write)(unsigned char *buffer, int size);
+	void (*stats_get)(tal_stats_t *tal_stats);
+} tal_if_t;
+
+/* API */
 tal_stat_t tal_init(tal_params_t *tal_params, tal_mmp_ops_t *mmp_ops);
 tal_stat_t tal_stats_get(tal_stats_t *tal_stats);
-tal_stat_t tal_pcm_start(void);
-tal_stat_t tal_pcm_stop(void);
-tal_stat_t tal_exit(void);
-void tal_tdm_clk_config(void);
-#if defined(MV_TDM_USE_DCO)
-int tal_tdm_clk_get(void);
-void tal_tdm_clk_set(int correction);
-#endif
+void tal_exit(void);
+void tal_pcm_start(void);
+void tal_pcm_stop(void);
+int tal_control(int cmd, void *data);
+
+tal_stat_t tal_set_if(tal_if_t *interface);
+tal_stat_t tal_mmp_rx(unsigned char *buffer, int size);
+tal_stat_t tal_mmp_tx(unsigned char *buffer, int size);
+tal_stat_t tal_write(unsigned char *buffer, int size);
 
 #endif /* _TAL_H */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/test/tdm_dev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/test/tdm_dev.c
index 005bb80..6e8cbd8 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/test/tdm_dev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_phone/tdm/test/tdm_dev.c
@@ -178,7 +178,6 @@ static int tdm_dev_tdm_start(unsigned long arg)
 
 	tdm_dev_params.sampling_period = MV_TDM_BASE_SAMPLING_PERIOD;
 	tdm_dev_params.total_lines = data.total_lines;
-	tdm_dev_params.test_enable = 1;
 
 	/* Assign Rx/Tx callbacks */
 	tdm_dev_ops.tal_mmp_rx_callback = tdm_dev_rx_callback;
-- 
1.7.5.4

