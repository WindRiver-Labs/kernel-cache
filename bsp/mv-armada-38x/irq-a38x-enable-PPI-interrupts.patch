From 10c5a6ef706e80c4fd6bd910c5b5692a0dbf5b6b Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Mon, 28 Oct 2013 15:04:15 +0200
Subject: [PATCH 1113/1825] irq: a38x: enable PPI interrupts

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit dbe708829634f5637d1296acca620a2c13c455b0

	Fix the cascade irq mpic support in irq.c
	Add support for the network irqs through the PPI chained irq chip

Change-Id: Ib4b62657b05970b93d41b305de8e8563f4ced182
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/3892
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-armada38x/irq.c |   28 +++++++++++++---------------
 1 files changed, 13 insertions(+), 15 deletions(-)

diff --git a/arch/arm/mach-armada38x/irq.c b/arch/arm/mach-armada38x/irq.c
index 5439f20..b2fcfe9 100644
--- a/arch/arm/mach-armada38x/irq.c
+++ b/arch/arm/mach-armada38x/irq.c
@@ -22,6 +22,7 @@
 #define SOC_PPI_CAUSE			0x21880
 #define SOC_PPI_MASK_SET		0x218b8
 #define SOC_PPI_MASK_CLEAR		0x218bc
+#define SOC_PPI_CAUSE_BITS		0x1fffffff
 
 static DEFINE_RAW_SPINLOCK(irq_controller_lock);
 
@@ -163,7 +164,6 @@ static struct mpic_data mpic_data = {
 static inline u_int
 mpic_hw_irq(struct mpic_data *mpic, u_int irq)
 {
-
 	return irq - mpic->irq_base;
 }
 
@@ -192,7 +192,7 @@ static struct irq_chip mpic_chip = {
 
 static void mpic_handle_cascade_irq(unsigned int irq, struct irq_desc *desc)
 {
-	struct mpic_data *mpic = irq_get_handler_data(irq);
+	struct mpic_data *mpic = &mpic_data;
 	struct irq_chip *chip = irq_get_chip(irq);
 	unsigned long cause;
 
@@ -203,37 +203,35 @@ static void mpic_handle_cascade_irq(unsigned int irq, struct irq_desc *desc)
 	raw_spin_unlock(&irq_controller_lock);
 
 	/* leave only relevant cause bits */
-	cause &= 0x1FFAAFF;
+	cause &= SOC_PPI_CAUSE_BITS;
 	if (cause == 0)
 		goto out;	/* spurious irq ? */
 
 	irq = ffs(cause) - 1;
+
 	generic_handle_irq(mpic->irq_base + irq);
 
 out:
 	chained_irq_exit(chip, desc);
 }
 
-static void __init a38x_cascade_irq_mpic(int irq_start, int nr_irqs)
+static void __init a38x_cascade_irq_mpic(int chained_irq, int irq_start, int nr_irqs)
 {
+	int irq;
 	struct mpic_data *mpic = &mpic_data;
-	unsigned int i, intr;
 
 	mpic->irq_base = irq_alloc_descs(-1, irq_start, nr_irqs, 0);
 	if (IS_ERR_VALUE(mpic->irq_base))
 		BUG();
 
-	for (i = 0; i <= nr_irqs; i++) {
-		intr = mpic->irq_base + i;
-		irq_set_percpu_devid(intr);
-		irq_set_chip_and_handler(intr, &mpic_chip, handle_percpu_devid_irq);
-		irq_set_chip_data(intr, &mpic_data);
-		set_irq_flags(intr, IRQF_VALID | IRQF_PROBE);
+	for (irq = irq_start; irq < irq_start + nr_irqs; irq++) {
+		irq_set_status_flags(irq, IRQ_LEVEL);
+		irq_set_chip_and_handler(irq, &mpic_chip, handle_level_irq);
+		irq_set_chip_data(irq, &mpic_data);
+		set_irq_flags(irq, IRQF_VALID);
 	}
-	if (irq_set_handler_data(irq_start, &mpic_data) != 0)
-		BUG();
 
-	irq_set_chained_handler(irq_start, mpic_handle_cascade_irq);
+	irq_set_chained_handler(chained_irq, mpic_handle_cascade_irq);
 }
 
 static void __init a38x_cascade_irq_gpio_private(void)
@@ -266,7 +264,7 @@ void __init a38x_init_irq(void)
 		 (void __iomem *)(INTER_REGS_VIRT_BASE + A9_MPCORE_GIC_DIST),
 		 (void __iomem *)(INTER_REGS_VIRT_BASE + A9_MPCORE_GIC_CPU));
 
-	a38x_cascade_irq_mpic(IRQ_START_PRIV_SOC_PPI, NR_IRQS_PRIV_SOC_PPI);
+	a38x_cascade_irq_mpic(IRQ_PRIV_MPIC_PPI_IRQ, IRQ_START_PRIV_SOC_PPI, NR_IRQS_PRIV_SOC_PPI);
 
 	a38x_cascade_irq_gpio_global();
 	a38x_cascade_irq_gpio_private();
-- 
1.7.5.4

