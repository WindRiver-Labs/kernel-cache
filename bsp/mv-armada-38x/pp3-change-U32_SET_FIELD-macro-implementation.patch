From 08b69015d2962ce6c0978d2447cd4229ac18ad0e Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Thu, 13 Feb 2014 15:21:24 +0200
Subject: [PATCH 1354/1825] pp3: change U32_SET_FIELD macro implementation

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 96c856eb774c8cd668486057f815b322cf7b00b1

Change-Id: I66175fd2fff49542d0775178b0e67dad27381395
Signed-off-by: Yelena <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5636
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Ernest Villion <ernestv@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h |    3 ++
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c    |   33 ++++++++++---------
 .../net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h   |    2 -
 3 files changed, 20 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
index 1797394..b6c8d94 100644
--- a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
+++ b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
@@ -73,6 +73,9 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define	MV_MAC_ADDR_SIZE	(6)
 #define MV_MAC_STR_SIZE		(20)
 
+/* Sets the field located at the specified in data.     */
+#define U32_SET_FIELD(data, mask, val)		((data) = (((data) & ~(mask)) | (val)))
+
 struct pp3_unit_info {
 	u32 base_addr; /* unit base address = silicon addr + unit offset */
 	u32 ins_offs;  /* unit instance offset - for multiple units */
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
index 47b9d06..4655334 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
@@ -106,7 +106,8 @@ void mv_pp3_hmac_queue_bm_mode_cfg(int frame, int queue)
 	u32 reg_data;
 
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_SEND_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_Q_MODE_OFFS, MV_HMAC_SEND_Q_CTRL_Q_MODE_MASK, 1);
+	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_Q_MODE_MASK, 1 << MV_HMAC_SEND_Q_CTRL_Q_MODE_OFFS);
+	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_BM_PE_FORMAT_MASK, 1 << MV_HMAC_SEND_Q_CTRL_BM_PE_FORMAT_OFFS);
 
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_SEND_Q_CTRL_REG(queue), reg_data);
 }
@@ -119,7 +120,7 @@ void mv_pp3_hmac_queue_qm_mode_cfg(int frame, int queue, int qm_num)
 
 	/* configure queue to be QM queue */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_SEND_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_Q_MODE_OFFS, MV_HMAC_SEND_Q_CTRL_Q_MODE_MASK, 0);
+	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_Q_MODE_MASK, 0);
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_SEND_Q_CTRL_REG(queue), reg_data);
 	/* map QM queue number */
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_SEND_Q_NUM_BPID_REG(queue), qm_num);
@@ -152,9 +153,9 @@ void *mv_pp3_hmac_rxq_init(int frame, int queue, int size)
 	/* Store queue size in rq_size table, number of 16B units */
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_SIZE(queue), (u32)qctrl->size);
 	/* Configure Receive Threshold TBD */
-	/* Disable queue, hmac_%m_rec_q_%n_control set to 0 */
+	/* Enable queue, hmac_%m_rec_q_%n_control set to 1 */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_REC_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_OFFS, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_MASK, 0);
+	U32_SET_FIELD(reg_data, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_MASK, 1 << MV_HMAC_REC_Q_CTRL_RCV_Q_EN_OFFS);
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_REC_Q_CTRL_REG(queue), reg_data);
 
 	/* mark queue as created */
@@ -180,7 +181,7 @@ void mv_pp3_hmac_rxq_enable(int frame, int queue)
 
 	/* Enable queue */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_REC_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_OFFS, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_MASK, 1);
+	U32_SET_FIELD(reg_data, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_MASK, 1 << MV_HMAC_REC_Q_CTRL_RCV_Q_EN_OFFS);
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_REC_Q_CTRL_REG(queue), reg_data);
 }
 
@@ -190,7 +191,7 @@ void mv_pp3_hmac_rxq_disable(int frame, int queue)
 
 	/* Disable queue */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_REC_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_OFFS, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_MASK, 0);
+	U32_SET_FIELD(reg_data, MV_HMAC_REC_Q_CTRL_RCV_Q_EN_MASK, 0);
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_REC_Q_CTRL_REG(queue), reg_data);
 }
 
@@ -210,13 +211,13 @@ void mv_pp3_hmac_rxq_event_cfg(int frame, int queue, int event, int group)
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_PP3_HMAC_RQ_EVENT_GROUP(queue));
 	if (event == 0) {
 		/* set group for event 0 */
-		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT0_GROUP_OFFS, MV_PP3_HMAC_RQ_EVENT0_GROUP_MASK, group);
+		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT0_GROUP_MASK, group << MV_PP3_HMAC_RQ_EVENT0_GROUP_OFFS);
 		/* enable event */
-		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT0_EN_OFFS, MV_PP3_HMAC_RQ_EVENT0_EN_MASK, 1);
+		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT0_EN_MASK, 1 << MV_PP3_HMAC_RQ_EVENT0_EN_OFFS);
 	} else if (event == 1) {
-		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT1_GROUP_OFFS, MV_PP3_HMAC_RQ_EVENT1_GROUP_MASK, group);
+		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT1_GROUP_MASK, group << MV_PP3_HMAC_RQ_EVENT1_GROUP_OFFS);
 		/* enable event */
-		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT1_EN_OFFS, MV_PP3_HMAC_RQ_EVENT1_EN_MASK, 1);
+		U32_SET_FIELD(reg_data, MV_PP3_HMAC_RQ_EVENT1_EN_MASK, 1 << MV_PP3_HMAC_RQ_EVENT1_EN_OFFS);
 	}
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_EVENT_GROUP(queue), reg_data);
 }
@@ -248,9 +249,9 @@ void *mv_pp3_hmac_txq_init(int frame, int queue, int size, int cfh_size)
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_SIZE(queue), (u32)qctrl->size);
 
 	/* Configure Transmit Threshold TBD */
-	/* Disable queue */
+	/* Enable queue */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_SEND_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_OFFS, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_MASK, 0);
+	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_MASK, 1 << MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_OFFS);
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_SEND_Q_CTRL_REG(queue), reg_data);
 
 	mv_hmac_txq_handle[frame][queue] = qctrl;
@@ -264,7 +265,7 @@ void mv_pp3_hmac_txq_enable(int frame, int queue)
 
 	/* Enable queue */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_SEND_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_OFFS, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_MASK, 1);
+	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_MASK, 1 << MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_OFFS);
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_SEND_Q_CTRL_REG(queue), reg_data);
 }
 
@@ -274,7 +275,7 @@ void mv_pp3_hmac_txq_disable(int frame, int queue)
 
 	/* Disable queue */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_HMAC_SEND_Q_CTRL_REG(queue));
-	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_OFFS, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_MASK, 0);
+	U32_SET_FIELD(reg_data, MV_HMAC_SEND_Q_CTRL_SEND_Q_EN_MASK, 0);
 	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_SEND_Q_CTRL_REG(queue), reg_data);
 }
 
@@ -322,9 +323,9 @@ void mv_pp3_hmac_txq_event_cfg(int frame, int queue, int group)
 	/* Configure event group */
 	reg_data = mv_pp3_hmac_frame_reg_read(frame, MV_PP3_HMAC_SQ_EVENT_GROUP(queue));
 	/* set group for event 0 */
-	U32_SET_FIELD(reg_data, MV_PP3_HMAC_SQ_EVENT_GROUP_OFFS, MV_PP3_HMAC_SQ_EVENT_GROUP_MASK, group);
+	U32_SET_FIELD(reg_data, MV_PP3_HMAC_SQ_EVENT_GROUP_MASK, group << MV_PP3_HMAC_SQ_EVENT_GROUP_OFFS);
 	/* enable event */
-	U32_SET_FIELD(reg_data, MV_PP3_HMAC_SQ_EVENT_EN_OFFS, MV_PP3_HMAC_SQ_EVENT_EN_MASK, 1);
+	U32_SET_FIELD(reg_data, MV_PP3_HMAC_SQ_EVENT_EN_MASK, 1 << MV_PP3_HMAC_SQ_EVENT_EN_OFFS);
 
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_EVENT_GROUP(queue), reg_data);
 }
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h
index 35fc823..bc57fef 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h
@@ -66,8 +66,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define __mvHmacRegs_h__
 
 /* includes */
-/* Sets the field located at the specified offset & length in data.     */
-#define U32_SET_FIELD(data, offset, mask, val)		((data) = (((data) & ~(mask)) | ((val) << (offset))))
 
 /* unit offset */
 #define MV_PP3_HMAC_GL_UNIT_OFFSET	0x30000
-- 
1.7.5.4

