From bb5f0aa1fc19930912d9da35627aa788fd4396f2 Mon Sep 17 00:00:00 2001
From: Uri Eliyahu <uriel@marvell.com>
Date: Wed, 9 Apr 2014 16:58:38 +0300
Subject: [PATCH 1558/1825] pp3: update netdev init sequence

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit bdb0fe68141e016dc606e92f9f1e73e9df4d1ec3

Change-Id: I2179986387bc91ea0ae5e1507d1f82e8069a78d8
Signed-off-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7046
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/emac/mv_emac.c    |    4 +-
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.c   |  164 +++++++++++++-------
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.h   |    1 +
 .../marvell/pp3/net_dev/mv_netdev_structs.h        |   15 +-
 4 files changed, 119 insertions(+), 65 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/emac/mv_emac.c b/drivers/net/ethernet/marvell/pp3/emac/mv_emac.c
index a8a00ca..8b02304 100644
--- a/drivers/net/ethernet/marvell/pp3/emac/mv_emac.c
+++ b/drivers/net/ethernet/marvell/pp3/emac/mv_emac.c
@@ -114,10 +114,12 @@ void mv_pp3_emac_unit_base(int port, u32 base)
 
 void mv_pp3_emac_init(int port)
 {
+	int qm_port, qmq;
 	/* attach to QM */
 	/* TODO config the correct values of qm_q and qm_port */
 	/* TODO: hard code from dan DDD*/
-	mv_pp3_emac_qm_mapping(port, port, port);
+	/* mv_pp3_cfg_emac_qm_params_get(int emac, &qm_port, &qmq);*/
+	mv_pp3_emac_qm_mapping(port, qm_port, qmq);
 	mv_pp3_emac_fw_data(port);
 
 	/* use hw defaults */
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
index 37d4802..1e5c01a 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
@@ -28,6 +28,7 @@
 #include "emac/mv_emac.h"
 #include "fw/mv_channel_if.h"
 #include "fw/mv_fw.h"
+#include "bm/mv_bm.h"
 #include "mv_netdev.h"
 #include "mv_netdev_structs.h"
 #ifdef MV_FPGA
@@ -134,11 +135,10 @@ static void mv_pp3_tx_done_timer_callback(unsigned long data)
 {
 	struct pp3_cpu *cpu_ctrl = (struct pp3_cpu *)data;
 	struct	pp3_pool *tx_done_pool = cpu_ctrl->tx_done_pool;
-	struct	pp3_queue *bm_msg_queue = cpu_ctrl->bm_msg_queue;
 
 	clear_bit(MV_CPU_F_TX_DONE_TIMER_BIT, &cpu_ctrl->flags);
 
-	mv_pp3_hmac_bm_buff_request(bm_msg_queue->frame, bm_msg_queue->rxq.sw_q,
+	mv_pp3_hmac_bm_buff_request(cpu_ctrl->bm_msg_frame, cpu_ctrl->bm_msg_q,
 					tx_done_pool->pool, 100 /*TODO - request according to counter value*/);
 
 	/* TODO: update counter */
@@ -231,9 +231,8 @@ void mv_pp3_bm_tasklet(unsigned long data)
 	unsigned int  ph_addr, vr_addr;
 	struct	pp3_cpu *cpu_ctrl = (struct pp3_cpu *)data;
 	struct	pp3_pool *tx_done_pool = cpu_ctrl->tx_done_pool;
-	struct	pp3_queue *bm_msg_queue = cpu_ctrl->bm_msg_queue;
 
-	while (mv_pp3_hmac_bm_buff_get(bm_msg_queue->frame, bm_msg_queue->rxq.sw_q,
+	while (mv_pp3_hmac_bm_buff_get(cpu_ctrl->bm_msg_frame, cpu_ctrl->bm_msg_q,
 						&pool, &ph_addr, &vr_addr) != -1) {
 
 		if (pool == tx_done_pool->pool) {
@@ -352,7 +351,7 @@ static int pp3_pool_init_complete(int pool)
 
 		mdelay(1);
 
-		/*bm_pool_quick_init_status_get(pool, &completed);*/
+		bm_pool_quick_init_status_get(pool, &completed);
 
 	} while (!completed);
 
@@ -390,12 +389,15 @@ static struct pp3_pool *pp3_pool_gp_create(int pool, int capacity)
 
 	ppool->type = PP3_POOL_TYPE_GP;
 
-/*
-	ret_val = bm_gp_pool_def_basic_init(pool, 2 * capacity, 0, ppool->phys_base, 1);
+	/*TODO create address structure */
+	/* struct mv_addr_64 pool_addr  */
+	/* pool_addr->high = 0, low =  pool_addr->phys_base*/
+	/* last param - pool pair = 1*/
+
+	/*ret_val = bm_gp_pool_def_basic_init(pool, 2 * capacity, &pool_addr, 1, 1);*/
 
 	if (!ret_val)
 		goto out;
-*/
 
 	if (pp3_pool_init_complete(pool))
 		goto out;
@@ -421,12 +423,22 @@ static int pp3_pools_gpm_init(int capacity)
 	ppool_0->type = PP3_POOL_TYPE_GPM;
 	ppool_1->type = PP3_POOL_TYPE_GPM;
 
-	/*reg_val = bm_qm_gpm_pools_def_quick_init(capacity, 0, ppool_0->phys_base, 0, ppool_1->phys_base);*/
+	/*TODO create address structure */
+	/* struct mv_addr_64 pool_addr  */
+	/* pool_addr->high = 0, low =  pool_addr->phys_base*/
+	/*reg_val = bm_qm_gpm_pools_def_quick_init(capacity, 0, &pool_addr, ppool_1->phys_base);*/
 
 	if (!ret_val)
 		return ret_val;
 
-	return pp3_pool_init_complete(MV_PP3_GPM_POOL_0) || pp3_pool_init_complete(MV_PP3_GPM_POOL_1);
+	ret_val = pp3_pool_init_complete(MV_PP3_GPM_POOL_0);
+
+	if (!ret_val)
+		return ret_val;
+
+	ret_val = pp3_pool_init_complete(MV_PP3_GPM_POOL_1);
+
+	return ret_val;
 }
 
 /*---------------------------------------------------------------------------*/
@@ -442,14 +454,22 @@ static int pp3_pools_dram_init(int capacity)
 	ppool_0->type = PP3_POOL_TYPE_DRAM;
 	ppool_1->type = PP3_POOL_TYPE_DRAM;
 
-/*
-	ret_val = bm_qm_dram_pools_def_quick_init (capacity, 0, ppool_0->phys_base, 0, ppool_1->phys_base);
+	/*TODO create address structure */
+	/* struct mv_addr_64 pool_addr  */
+	/* pool_addr->high = 0, low =  pool_addr->phys_base*/
+	/*ret_val = bm_qm_dram_pools_def_quick_init (capacity, 0, &pool_addr, ppool_1->phys_base);*/
+
+	if (!ret_val)
+		return ret_val;
+
+	ret_val = pp3_pool_init_complete(MV_PP3_DRAM_POOL_0);
 
 	if (!ret_val)
 		return ret_val;
-*/
 
-	return pp3_pool_init_complete(MV_PP3_DRAM_POOL_0) || pp3_pool_init_complete(MV_PP3_DRAM_POOL_1);
+	ret_val = pp3_pool_init_complete(MV_PP3_DRAM_POOL_1);
+
+	return ret_val;
 }
 
 /*---------------------------------------------------------------------------*/
@@ -504,11 +524,11 @@ void pp3_chan_callback(int chan, void *msg, int size)
 {
 	/* TODO: lock / release*/
 }
-
 /*---------------------------------------------------------------------------*/
 
 static const struct net_device_ops mv_pp3_netdev_ops = {
 	.ndo_open            = mv_pp3_dev_open,
+
 /*
 	.ndo_stop            = mv_pp3_stop,
 	.ndo_start_xmit      = mv_pp3_tx,
@@ -538,10 +558,9 @@ struct net_device *mv_pp3_netdev_init(struct platform_device *pdev)
 	if (!dev)
 		return NULL;
 
-	/*SET IN CORE.C to BASE*/
 	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
 	BUG_ON(!res);
-	dev->irq = res->start;/*TODO: configurator */
+	dev->irq = res->start;
 
 	dev->mtu = port_data->mtu;
 	memcpy(dev->dev_addr, port_data->mac_addr, MV_MAC_ADDR_SIZE);
@@ -587,16 +606,18 @@ err_free_netdev:
 
 static struct pp3_rxq *pp3_rxq_priv_init(int emac, int cpu)
 {
-	int sw_q, hw_q, frame;
+	int swq, hwq_base, hwq_num, frame, irq_group;
 	struct pp3_rxq *priv_rxq;
 
-	/*mv_pp3_cfg_dp_nic_rxq_params_get(emac, cpu, &frame, &sw_q, &hw_q);*/
+	/*mv_pp3_cfg_dp_nic_rxq_params_get(emac, cpu, &frame, &swq, &hwq_base, &hwq_num, &irq_group);*/
 	priv_rxq = kzalloc(sizeof(struct pp3_rxq), GFP_KERNEL);
 
 	if (priv_rxq) {
 		priv_rxq->frame_num = frame;
-		priv_rxq->sw_q = sw_q;
-		priv_rxq->hw_q = hw_q;
+		priv_rxq->swq = swq;
+		priv_rxq->irq_group = irq_group;
+		/*priv_rxq->hwq_base = hwq;*/
+		/*priv_rxq->hwq_num = hwq_num;*/
 		priv_rxq->type = PP3_Q_TYPE_QM;
 		priv_rxq->size = MV_PP3_DP_RXQ_SIZE;
 		priv_rxq->pkt_coal = CONFIG_PP3_RX_COAL_PKTS;
@@ -609,16 +630,16 @@ static struct pp3_rxq *pp3_rxq_priv_init(int emac, int cpu)
 
 static struct pp3_txq *pp3_txq_priv_init(int emac, int cpu)
 {
-	int sw_q, hw_q, frame;
+	int swq, hwq, frame;
 	struct pp3_txq *priv_txq;
 
-	/*mv_pp3_cfg_dp_nic_txq_params_get(emac, cpu, &frame, &sw_q, &hw_q)*/
+	/*mv_pp3_cfg_dp_nic_txq_params_get(emac, cpu, &frame, &swq, &hwq)*/
 	priv_txq = kmalloc(sizeof(struct pp3_txq), GFP_KERNEL);
 
 	if (priv_txq) {
 		priv_txq->frame_num = frame;
-		priv_txq->sw_q = sw_q;
-		priv_txq->hw_q = hw_q;
+		priv_txq->swq = swq;
+		priv_txq->hwq = hwq;
 		priv_txq->size = MV_PP3_DP_TXQ_SIZE;
 		priv_txq->type = PP3_Q_TYPE_QM;
 	}
@@ -815,9 +836,7 @@ static int mv_pp3_hw_netif_start(struct pp3_dev_priv *dev_priv)
 	struct pp3_group *group_ctrl;
 
 	/* init EMAC */
-	for (i = 0; i < MV_PP3_EMAC_NUM; i++)
-		/* TODO: suppot NSS mode */
-		mv_pp3_emac_init(dev_priv->index);
+	mv_pp3_emac_init(dev_priv->index);
 
 	/* int HMAC RXQs and TXQs */
 	for_each_possible_cpu(cpu) {
@@ -825,26 +844,29 @@ static int mv_pp3_hw_netif_start(struct pp3_dev_priv *dev_priv)
 		struct pp3_txq *txq_ctrl;
 		group_ctrl = pp3_groups[cpu][dev_priv->index];
 
-		/*pool = mv_pp3_cfg_dp_long_bpid(dev_priv->index)*/
+		/*mv_pp3_cfg_dp_gen_pool_id(&pool)*/
 		group_ctrl->long_pool = pp3_pool_gp_create(pool, MV_PP3_LONG_POOL_SIZE);
 		group_ctrl->long_pool->flags = POOL_F_LONG;
-		/*pool = mv_pp3_cfg_dp_short_bpid(dev_priv->index)*/
+
+		/*mv_pp3_cfg_dp_gen_pool_id(&pool)*/
 		group_ctrl->short_pool = pp3_pool_gp_create(pool, MV_PP3_SHORT_POOL_SIZE);
-		group_ctrl->long_pool->flags = POOL_F_SHORT;
-		/*pool = mv_pp3_cfg_dp_lro_bpid(dev_priv->index)*/
+		group_ctrl->short_pool->flags = POOL_F_SHORT;
+
+		/*mv_pp3_cfg_dp_gen_pool_id(&pool)*/
 		group_ctrl->lro_pool = pp3_pool_gp_create(pool, MV_PP3_LRO_POOL_SIZE);
-		group_ctrl->long_pool->flags = POOL_F_LRO;
+		group_ctrl->lro_pool->flags = POOL_F_LRO;
 
 		for (i = 0; i < group_ctrl->rxqs_num; i++) {
 			rxq_ctrl =  group_ctrl->rxqs[i];
-			mv_pp3_hmac_rxq_init(rxq_ctrl->frame_num, rxq_ctrl->sw_q, rxq_ctrl->size);
-			mv_pp3_hmac_rxq_enable(rxq_ctrl->frame_num, rxq_ctrl->sw_q);
+			mv_pp3_hmac_rxq_init(rxq_ctrl->frame_num, rxq_ctrl->swq, rxq_ctrl->size);
+			mv_pp3_hmac_rxq_event_cfg(rxq_ctrl->frame_num, rxq_ctrl->swq, 0, rxq_ctrl->irq_group);
+			mv_pp3_hmac_rxq_enable(rxq_ctrl->frame_num, rxq_ctrl->swq);
 		}
 
 		for (i = 0; i < group_ctrl->txqs_num; i++) {
 			txq_ctrl =  group_ctrl->txqs[i];
-			mv_pp3_hmac_txq_init(txq_ctrl->frame_num, txq_ctrl->sw_q, txq_ctrl->size, 0);
-			mv_pp3_hmac_txq_enable(txq_ctrl->frame_num, txq_ctrl->sw_q);
+			mv_pp3_hmac_txq_init(txq_ctrl->frame_num, txq_ctrl->swq, txq_ctrl->size, 0);
+			mv_pp3_hmac_txq_enable(txq_ctrl->frame_num, txq_ctrl->swq);
 		}
 	}
 
@@ -852,14 +874,42 @@ static int mv_pp3_hw_netif_start(struct pp3_dev_priv *dev_priv)
 }
 
 /*---------------------------------------------------------------------------*/
+/* Init BM and QM HW*/
+static void mv_pp3_hw_bm_qm_start(void)
+{
+	/* init all bm api structures */
+	bm_open();
+
+	/* config rd/wr dram attributes  */
+	bm_attr_all_pools_def_set();
+
+	pp3_pools_gpm_init(BM_GPM_POOL_CAPACITY);
+
+	/*Dram pools init relevant only for A0*/
+	/*pp3_pools_dram_init(BM_DRAM_POOL_CAPACITY);*/
+
+	bm_enable();
+
+	/* QM HW int */
+	/*qm_default_set();*/
+	/*qm_dma_gpm_pools_def_enable();*/
+	/*Dram pools init relevant only for A0*/
+	/*qm_dma_dram_pools_def_enable();*/
+}
 
+/*---------------------------------------------------------------------------*/
 static int mv_pp3_hw_shared_start(void)
 {
 	struct pp3_cpu *cpu_ctrl;
 	int cpu, pool, frame, queue, q_size, group, irq;
 	unsigned int frames_bmp;
 
-	/* load fw */
+	/*TODO load fw */
+
+	mv_pp3_hw_bm_qm_start();
+
+	/*configutator init */
+	/* call to mv_pp3_cfg_hwq_info_set */
 
 	/* init cpu's structures */
 	for_each_possible_cpu(cpu) {
@@ -871,18 +921,23 @@ static int mv_pp3_hw_shared_start(void)
 		pp3_cpus[cpu] = cpu_ctrl;
 
 		/* TODO: call to config manager: get frames bitmap per cpu */
-		/*mv_pp3_cfg_dp_frames_bm(int cpu, &frames_bmp);*/
+		/*mv_pp3_cfg_dp_frames_bitmap(int cpu, &frames_bmp);*/
 		cpu_ctrl->frame_bmp = frames_bmp;
 
 		/* TODO: call to config manager: get free pool id */
-		/* pool = mv_pp3_cfg_dp_linux_bpid(cpu);*/
+		/* mv_pp3_cfg_dp_gen_pool_id(&pool);*/
 		cpu_ctrl->tx_done_pool =  pp3_pool_gp_create(pool, MV_PP3_LINUX_POOL_SIZE);
 
 		/* TODO: call to config manager: get frame and queue num in order to manage bm pool */
-		/*mv_pp3_cfg_dp_bmq_params_get(cpu, &frames_bmp, &qeueu, &q_size, &group, &irq);*/
-		cpu_ctrl->bm_msg_irq = irq;
+		/*mv_pp3_cfg_dp_bmq_params_get(cpu, &frame, &queue, &group);*/
+
 		cpu_ctrl->bm_msg_group = group;
-		mv_pp3_hmac_bm_queue_init(frame, queue, q_size);
+		cpu_ctrl->bm_msg_frame = frame;
+		cpu_ctrl->bm_msg_q = queue;
+
+		mv_pp3_hmac_bm_queue_init(frame, queue, MV_PP3_HMAC_BM_Q_SIZE);
+		mv_pp3_hmac_rxq_enable(cpu_ctrl->bm_msg_frame, cpu_ctrl->bm_msg_q);
+		mv_pp3_hmac_txq_enable(cpu_ctrl->bm_msg_frame, cpu_ctrl->bm_msg_q);
 		cpu_ctrl->bm_msg_tasklet = kzalloc(sizeof(struct tasklet_struct), GFP_KERNEL);
 		tasklet_init(pp3_cpus[cpu]->bm_msg_tasklet, mv_pp3_bm_tasklet, (unsigned long)pp3_cpus[cpu]);
 
@@ -893,13 +948,8 @@ static int mv_pp3_hw_shared_start(void)
 		cpu_ctrl->tx_done_timer.data = (unsigned long)pp3_cpus[cpu];
 	}
 
-	/* TODO: QM  HW init	*/
 	/* TODO: HMAC HW unit int */
 
-	pp3_pools_dram_init(BM_DRAM_POOL_CAPACITY);
-	pp3_pools_gpm_init(BM_GPM_POOL_CAPACITY);
-	/*bm_enable();*/
-
 	/* TODO: start fw */
 	/* TODO: Channel create */
 
@@ -924,7 +974,6 @@ oom:
 static int mv_pp3_sw_shared_probe(struct platform_device *pdev)
 {
 	int i;
-	unsigned int silicon_base = mv_hw_silicon_base_addr_get();
 
 	struct mv_pp3_plat_data *plat_data = (struct mv_pp3_plat_data *)pdev->dev.platform_data;
 
@@ -956,8 +1005,6 @@ static int mv_pp3_sw_shared_probe(struct platform_device *pdev)
 		pp3_frames[i]->time_coal[0] = MV_PP3_FRM_TIME_COAL_0;
 	}
 
-	/*mv_pp3_bm_unit_base(PP3_BM_BASE);*/
-	/*mv_pp3_qm_unit_base(PP3_QM_BASE);*/
 	/*mv_pp3_messenger_init();*/
 	/*on_each_cpu(mv_pp3_def_chan_create, &size, 1);*/
 
@@ -975,7 +1022,6 @@ static int mv_pp3_netif_init(struct pp3_dev_priv *dev_priv)
 {
 	/*
 		TODO for all emac close rx
-		mv_pp3_emac_mh_en(emac, 0)
 	*/
 
 	if (!pp3_hw_initialized) {
@@ -988,6 +1034,7 @@ static int mv_pp3_netif_init(struct pp3_dev_priv *dev_priv)
 		mv_pp3_hw_netif_start(dev_priv);
 		dev_priv->flags |= MV_ETH_F_INIT;
 	}
+
 	/* start seq */
 	return 0;
 }
@@ -1174,8 +1221,9 @@ void pp3_netdev_cpu_status_print(int cpu)
 
 	cpu_ctrl = pp3_cpus[cpu];
 	pr_info("/n");
-	pr_info("cpu #%d: frames bitmap = 0x%x, bm_msg_irq = %d, bm_msg_group = %d, chan_id = %d\n", cpu,
-			cpu_ctrl->frame_bmp, cpu_ctrl->bm_msg_irq, cpu_ctrl->bm_msg_group, cpu_ctrl->chan_id);
+	pr_info("cpu #%d: frames bitmap = 0x%x, bm_msg_frame = %d, bm_msg_q = %d, bm_msg_group = %d, chan_id = %d\n",
+			cpu, cpu_ctrl->frame_bmp, cpu_ctrl->bm_msg_frame, cpu_ctrl->bm_msg_q,
+			cpu_ctrl->bm_msg_group, cpu_ctrl->chan_id);
 
 	linux_pool_id = cpu_ctrl->tx_done_pool ? cpu_ctrl->tx_done_pool->pool : -1;
 	pr_info("linux_pool = %d, tx_done_counter = %d\n", linux_pool_id, cpu_ctrl->tx_done_cnt);
@@ -1271,8 +1319,8 @@ void pp3_netdev_rxq_status_print(int index, int cpu, int queue)
 	type = (rxq_ctrl->type ==  PP3_Q_TYPE_BM) ? "BM" : "QM";
 	pr_info("/n");
 	pr_info("interface #%d, cpu group #%d, queue #%d:\n", index, cpu, queue);
-	pr_info("frame = %d, logic_q = %d, sw_q = %d, hw_q = %d\n",
-			rxq_ctrl->frame_num, rxq_ctrl->logic_q, rxq_ctrl->hw_q, rxq_ctrl->sw_q);
+	pr_info("frame = %d, logic_q = %d, swq = %d, hwq_base = %d, hwq_num = %d\n",
+			rxq_ctrl->frame_num, rxq_ctrl->logic_q, rxq_ctrl->swq, rxq_ctrl->hwq_base, rxq_ctrl->hwq_num);
 
 	pr_info("size = %d, type = %s, pkt_coal = %d, time_coal_frofile = %d\n",
 		rxq_ctrl->size, type, rxq_ctrl->pkt_coal, rxq_ctrl->time_coal_profile);
@@ -1311,8 +1359,8 @@ void pp3_netdev_txq_status_print(int index, int cpu, int queue)
 	type = (txq_ctrl->type ==  PP3_Q_TYPE_BM) ? "BM" : "QM";
 	pr_info("/n");
 	pr_info("interface #%d, cpu group #%d, queue #%d:\n", index, cpu, queue);
-	pr_info("frame = %d, logic_q = %d, sw_q = %d, hw_q = %d\n",
-			txq_ctrl->frame_num, txq_ctrl->logic_q, txq_ctrl->sw_q, txq_ctrl->hw_q);
+	pr_info("frame = %d, logic_q = %d, swq = %d, hwq = %d\n",
+			txq_ctrl->frame_num, txq_ctrl->logic_q, txq_ctrl->swq, txq_ctrl->hwq);
 	pr_info("size = %d, type = %s\n", txq_ctrl->size, type);
 	return;
 }
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
index 55b0612..22af62b 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
@@ -47,6 +47,7 @@ disclaimer.
 #define MV_PP3_LONG_POOL_SIZE		1024
 #define MV_PP3_SHORT_POOL_SIZE		1024
 #define MV_PP3_LRO_POOL_SIZE		1024
+#define MV_PP3_HMAC_BM_Q_SIZE		1024
 #define MV_PP3_GPM_POOL_0		0
 #define MV_PP3_GPM_POOL_1		1
 #define MV_PP3_DRAM_POOL_0		2
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h
index 166cde8..ff1de7e 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev_structs.h
@@ -115,9 +115,10 @@ struct pp3_cpu {
 	int	frame_bmp;
 	struct	pp3_dev_priv	*dev_priv[MAX_ETH_DEVICES];
 	struct	pp3_pool	*tx_done_pool;
-	struct	pp3_queue	*bm_msg_queue;
-	int			bm_msg_irq;
+	/*struct	pp3_queue	*bm_msg_queue;*/
 	int			bm_msg_group;
+	int			bm_msg_frame;
+	int			bm_msg_q;
 	struct	tasklet_struct	*bm_msg_tasklet;
 	struct  timer_list	tx_done_timer;
 	struct	pp3_cpu_stats	stats;
@@ -141,8 +142,10 @@ enum  pp3_q_type {
 struct pp3_rxq {
 	int	frame_num;
 	int	logic_q;	/*application q*/
-	int	sw_q;		/*hmac q*/
-	int	hw_q;		/*QM q*/
+	int	swq;		/*hmac q*/
+	int	hwq_base;
+	int	hwq_num;
+	int	irq_group;
 	int	size;
 	enum	pp3_q_type		type;
 	struct	pp3_dev_priv		*dev_priv;
@@ -154,8 +157,8 @@ struct pp3_rxq {
 struct pp3_txq {
 	int	frame_num;
 	int	logic_q;
-	int	sw_q;
-	int	hw_q;
+	int	swq;
+	int	hwq;
 	int	size;
 	enum	pp3_q_type		type;
 	struct	pp3_dev_priv		*dev_priv;
-- 
1.7.5.4

