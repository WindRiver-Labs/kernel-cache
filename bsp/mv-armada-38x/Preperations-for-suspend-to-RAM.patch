From 98d755bfd35efac546c8c5b9433417a50bf3a001 Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Wed, 24 Oct 2012 10:40:45 +0200
Subject: [PATCH 0268/1825] Preperations for suspend to RAM

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 4718c3e89a38fb5a29e0805417b6ffdbd193f93e

Change-Id: If4e081f8024b69e2ed53ec3edae7c87a3b6bfbda
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-armadaxp/time.c                      |   23 ++++++++++++++++++++
 .../mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c     |    5 ++++
 2 files changed, 28 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-armadaxp/time.c b/arch/arm/mach-armadaxp/time.c
index 86ec098..97e15ca 100644
--- a/arch/arm/mach-armadaxp/time.c
+++ b/arch/arm/mach-armadaxp/time.c
@@ -233,6 +233,29 @@ void __cpuinit mv_timer_setup(struct clock_event_device *clk, unsigned int fabri
 	clk->min_delta_ns	= clockevent_delta2ns(0x1, clk);
 }
 
+/*
+ * Resume timer from suspend to RAM
+ * TODO - need to implement kernel hooks for suspend/resume
+ */
+void axp_timer_resume(void)
+{
+	u32 u;
+
+	pr_info("Resuming ArmadaXP SOC Timer %d\n", soc_timer_id);
+
+	MV_REG_WRITE(TIMER_VAL(soc_timer_id), 0xffffffff);
+	MV_REG_WRITE(TIMER_RELOAD(soc_timer_id), 0xffffffff);
+
+	u = MV_REG_READ(BRIDGE_MASK);
+	u &= ~BRIDGE_INT_TIMER(soc_timer_id);
+	MV_REG_WRITE(BRIDGE_MASK, u);
+
+	u = MV_REG_READ(TIMER_CTRL);
+	u |= (TIMER_EN(soc_timer_id) | TIMER_RELOAD_EN(soc_timer_id) |
+			TIMER_TURN_25MHZ(soc_timer_id));
+	MV_REG_WRITE(TIMER_CTRL, u);
+}
+
 void __init axp_time_init(unsigned int fabric_clk)
 {
 	u32 u;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
index a20a73e..2b96780 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
@@ -5925,6 +5925,11 @@ int mv_eth_suspend(struct platform_device *pdev, pm_message_t state)
 		if (!pp)
 			continue;
 
+		if (state.event & PM_EVENT_SUSPEND)
+			pp->pm_mode = MV_ETH_PM_CLOCK;
+		else
+			pp->pm_mode = MV_ETH_PM_WOL;
+
 		if (pp->pm_mode == MV_ETH_PM_CLOCK) {
 			if (mv_eth_suspend_clock(pp->port)) {
 				printk(KERN_ERR "%s: Error, port %d clock suspend failed.\n", __func__, port);
-- 
1.7.5.4

