From 6b37f2ddc3a6d591e494d54a1a758385d68ac946 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Wed, 15 Jan 2014 16:12:33 +0200
Subject: [PATCH 1300/1825] tools: silabs: Update Silabs mv_voice_tool after
 TAL updates.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit bbbf11fa90f4a75f202a21eaa9e4d541b40721c5

	This commit updates Silabs mv_voice_tool aligning it
	with the new tal_dev module.

Change-Id: I226f906eaf41acd7a0a188495b27d64b30250525
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5176
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 tools/voice/silabs/mv_voice_tool.c |   46 +++++++++++++++++------------------
 1 files changed, 22 insertions(+), 24 deletions(-)

diff --git a/tools/voice/silabs/mv_voice_tool.c b/tools/voice/silabs/mv_voice_tool.c
index fc5c46a..8ee4a9f 100644
--- a/tools/voice/silabs/mv_voice_tool.c
+++ b/tools/voice/silabs/mv_voice_tool.c
@@ -67,7 +67,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <fcntl.h>
 #include <sys/ioctl.h>
 #include <signal.h>
-#include "tdm/test/tdm_dev.h"
+#include "tdm/test/tal_dev.h"
 
 #include "silabs_lib.h"
 
@@ -168,7 +168,7 @@ int main(void)
 	int proc_fd, fdflags, cmd_len, i, status;
 	char str[32];
 	unsigned char line0_id, line1_id;
-	tdm_dev_params_t tdm_params;
+	tal_dev_params_t tal_params;
 	unsigned long int iterations;
 
 	event_count = 0;
@@ -198,8 +198,8 @@ int main(void)
 	buff_size = (80 * pcm_bytes * total_lines);
 
 	/* Fill TDM info */
-	tdm_params.pcm_format = pcm_bytes;
-	tdm_params.total_lines = total_lines;
+	tal_params.pcm_format = pcm_bytes;
+	tal_params.total_lines = total_lines;
 	
 	total_devs = (total_lines/MAX_DEVICE_LINES);
 	if((total_lines % MAX_DEVICE_LINES))
@@ -432,7 +432,7 @@ int main(void)
 
 			case 't':
 				/* Start Telephony */
-				if(ioctl(tdm_fd, TDM_DEV_TDM_START, &tdm_params)) {
+				if (ioctl(tdm_fd, TAL_DEV_INIT, &tal_params)) {
 					printf("%s Error, unable to init TDM\n", TOOL_PREFIX);
 					return 1;
 				}
@@ -513,7 +513,7 @@ void release(int signum)
 	}
 
 	/* Stop TDM */
-	if(ioctl(tdm_fd, TDM_DEV_TDM_STOP, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_EXIT, 0)) {
 		printf("\n%s Error, unable to stop TDM\n", TOOL_PREFIX);
 		return;
 	} else {
@@ -578,7 +578,7 @@ static void channel_balancing_test(int tdm_fd, unsigned long int iterations)
 		cb_loop = 0;
 		i = 0;
 
-		if (ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
+		if (ioctl(tdm_fd, TAL_DEV_PCM_START, 0)) {
 			printf("Error, unable to start pcm bus\n");
 			return;
 		}
@@ -632,7 +632,7 @@ static void channel_balancing_test(int tdm_fd, unsigned long int iterations)
 		}
 
 		loops++;
-		if (ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+		if (ioctl(tdm_fd, TAL_DEV_PCM_STOP, 0)) {
 			printf("Error, unable to stop pcm bus\n");
 			return;
 		}
@@ -655,7 +655,7 @@ cb_out:
 		}
 	}
 
-	if (ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_STOP, 0)) {
 		printf("Error, unable to stop pcm bus\n");
 		return;
 	}
@@ -713,7 +713,7 @@ static void slic_digital_loopback(int tdm_fd, unsigned long int iterations)
 			aud_buf[1][index + (80 * pcm_bytes * ch)] = (index+ch+2);
 	}
 
-	if (ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_START, 0)) {
 		printf("Error, unable to start pcm bus\n");
 		return;
 	}
@@ -767,7 +767,7 @@ slic_dl_out:
 	if(cmp_status == 0)
 		printf("\nDigital loopback test(%d lines) - PASS !!!\n",total_lines);
 
-	if (ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_STOP, 0)) {
 		printf("Error, unable to stop pcm bus\n");
 		return;
 	}
@@ -827,7 +827,7 @@ static void sw_loopback(int tdm_fd, unsigned char line_id)
 		wait_for_silabs_event();
 	}
 
-	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_START, 0)) {
 		printf("Error, unable to start pcm bus\n");
 		return;
 	}
@@ -872,7 +872,7 @@ static void sw_loopback(int tdm_fd, unsigned char line_id)
 		timeout.tv_usec = TIMEOUT;
 	}
 
-	if(ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_STOP, 0)) {
 		printf("Error, unable to stop pcm bus\n");
 		return;
 	}
@@ -910,7 +910,7 @@ static void sw_tone_test(int tdm_fd, unsigned char line_id)
 	}
 
 	while(1) {
-		if(ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+		if (ioctl(tdm_fd, TAL_DEV_PCM_STOP, 0)) {
 			printf("Error, unable to stop pcm bus\n");
 			return;
 		}
@@ -944,7 +944,7 @@ static void sw_tone_test(int tdm_fd, unsigned char line_id)
 			wait_for_silabs_event();
 		}
 
-		if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
+		if (ioctl(tdm_fd, TAL_DEV_PCM_START, 0)) {
 			printf("Error, unable to start pcm bus\n");
 			return;
 		}
@@ -1000,7 +1000,7 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 		wait_for_silabs_event();
 	}
 
-	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_START, 0)) {
 		printf("Error, unable to start pcm bus\n");
 		return;
 	}
@@ -1047,7 +1047,7 @@ static void sw_loopback_multi_phones_test(int tdm_fd, unsigned char start_line,
 		timeout.tv_usec = TIMEOUT;
 	}
 
-	if(ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_STOP, 0)) {
 		printf("Error, unable to stop pcm bus\n");
 		return;
 	}
@@ -1069,7 +1069,7 @@ static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigne
 		wait_for_silabs_event();
 	}
 
-	if(ioctl(tdm_fd, TDM_DEV_PCM_START, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_START, 0)) {
 		printf("Error, unable to start pcm bus\n");
 		return;
 	}
@@ -1113,7 +1113,7 @@ static void sw_loopback_two_phones_test(int tdm_fd, unsigned char line0, unsigne
 		timeout.tv_usec = TIMEOUT;
 	}
 
-	if(ioctl(tdm_fd, TDM_DEV_PCM_STOP, 0)) {
+	if (ioctl(tdm_fd, TAL_DEV_PCM_STOP, 0)) {
 		printf("Error, unable to stop pcm bus\n");
 		return;
 	}
@@ -1304,9 +1304,8 @@ static void set_tdm_clk_config(void)
 	tdm_dev_clk_t tdm_dev_clk;
 
 	/* Config TDM clock */
-	if(ioctl(tdm_fd, TDM_DEV_TDM_CLK_CONFIG, &tdm_dev_clk)) {
+	if (ioctl(tdm_fd, TDM_DEV_TDM_CLK_CONFIG, &tdm_dev_clk))
 		printf("%s Error, unable to config TDM clock.\n", TOOL_PREFIX);
-	}
 }
 
 static int get_tdm_clk_correction(void)
@@ -1314,7 +1313,7 @@ static int get_tdm_clk_correction(void)
 	tdm_dev_clk_t tdm_dev_clk;
 
 	/* Get TDM clock */
-	if(ioctl(tdm_fd, TDM_DEV_TDM_CLK_GET, &tdm_dev_clk)) {
+	if (ioctl(tdm_fd, TDM_DEV_TDM_CLK_GET, &tdm_dev_clk)) {
 		printf("%s Error, unable to get TDM clock.\n", TOOL_PREFIX);
 		return 0;
 	}
@@ -1329,7 +1328,6 @@ static void set_tdm_clk_correction(int correction)
 	tdm_dev_clk.correction=correction;
 
 	/* Set TDM clock */
-	if(ioctl(tdm_fd, TDM_DEV_TDM_CLK_SET, &tdm_dev_clk)) {
+	if (ioctl(tdm_fd, TDM_DEV_TDM_CLK_SET, &tdm_dev_clk))
 		printf("%s Error, unable to set TDM clock.\n", TOOL_PREFIX);
-	}
 }
-- 
1.7.5.4

