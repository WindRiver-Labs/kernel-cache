From 8f73d1a823b125716ae6a72cc649169e0f8d272d Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Mon, 29 Apr 2013 18:37:36 +0300
Subject: [PATCH 0628/1825] ALP: Fixed Twsi reads from IO expander & Dip
 switch (board configuration)

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit d77fe7442b38f23aa168ef1e570503bd1b5f4595

 - Fixed board information prints (several bugs in TWSI Get & Set methods)

Change-Id: I0752a6b0e9b12399d2bb35be54bd879aefafe3c2
Signed-off-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/1686
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../avanta_lp_family/boardEnv/mvBoardEnvLib.c      |   13 ++--
 .../avanta_lp_family/boardEnv/mvBoardEnvSpec.c     |    8 +-
 .../arm/mach-avantalp/avanta_lp_family/cpu/mvCpu.c |    4 +-
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c        |   11 ++--
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h        |    4 +-
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h       |   66 ++++++++++----------
 6 files changed, 52 insertions(+), 54 deletions(-)

diff --git a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c
index 811b4c4..494903e 100755
--- a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c
+++ b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c
@@ -449,7 +449,7 @@ MV_U32 mvBoardSysClkGet(MV_VOID)
 	return MV_FPGA_SYS_CLK;
 #else
 	if (MV_ERROR != mvCtrlCpuDdrL2FreqGet(&freqMode))
-		return (MV_U32)(1000000 * simple_strtoul(freqMode.ddrFreq, NULL, 16));
+		return (MV_U32)(1000000 * freqMode.ddrFreq);
 	else
 		return MV_ERROR;
 #endif
@@ -2058,7 +2058,7 @@ MV_STATUS mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_TYPE_ID ioClass, MV_BOARD_IO_E
 	/* verify existance of requested config type, pull its data */
 	for (i = 0; i < board->numBoardIoExpanderInfo ; i++)
 		if (board->pBoardIoExpanderInfo[i].ioFieldid == ioClass) {
-			ioInfo = &board->pBoardIoExpanderInfo[i];
+			*ioInfo = board->pBoardIoExpanderInfo[i];
 			return MV_OK;
 		}
 	DB(mvOsPrintf("%s: Error: requested MV_IO_EXPANDER_TYPE_ID was not found\n", __func__));
@@ -2083,12 +2083,11 @@ MV_STATUS mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_TYPE_ID ioClass, MV_BOARD_IO_E
 *******************************************************************************/
 MV_STATUS mvBoardExtPhyBufferSelect(MV_BOOL enable)
 {
-	MV_BOARD_IO_EXPANDER_TYPE_INFO *ioInfo = NULL;
+	MV_BOARD_IO_EXPANDER_TYPE_INFO ioInfo;
+
+	if (mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_EXT_PHY_SMI_EN, &ioInfo) == MV_OK)
+		return mvBoardIoExpValSet(&ioInfo, (enable ? 0x0 : 0x1));
 
-	if(mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_EXT_PHY_SMI_EN ,ioInfo))
-	{
-		return 	(mvBoardIoExpValSet(ioInfo, (enable? 0x0 : 0x1)));
-	}
 	mvOsPrintf("%s: Error: Read from IO expander failed (External Phy Buffer select)\n", __func__);
 	return MV_FALSE;
 }
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvSpec.c b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvSpec.c
index 894d80a..dccb365 100755
--- a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvSpec.c
+++ b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvSpec.c
@@ -128,8 +128,8 @@ MV_BOARD_IO_EXPANDER_TYPE_INFO db88f6660InfoBoardIOExpanderInfo[] = {
 	{ MV_IO_EXPANDER_SFP1_PRSNT,		 2,		 2,	 0},
 	{ MV_IO_EXPANDER_SFP1_TX_FAULT,		 3,		 2,	 0},
 	{ MV_IO_EXPANDER_SFP1_LOS,		 4,		 2,	 0},
-	{ MV_IO_EXPANDER_JUMPER1_EEPROM_ENABLED, 6,		 2,	 0},
-	{ MV_IO_EXPANDER_JUMPER2,		 7,		 2,	 0},
+	{ MV_IO_EXPANDER_JUMPER1,		 6,		 2,	 0},
+	{ MV_IO_EXPANDER_JUMPER2_EEPROM_ENABLED, 7,		 2,	 0},
 		/* 3rd IO Expander Register*/
 	{ MV_IO_EXPANDER_EXT_PHY_SMI_EN,	 0,		 2,	 1},
 	{ MV_IO_EXPANDER_SFP1_TX_DIS,		 1,		 2,	 1},
@@ -148,8 +148,8 @@ MV_BOARD_IO_EXPANDER_TYPE_INFO db88f6650InfoBoardIOExpanderInfo[] = {
 	{ MV_IO_EXPANDER_SFP1_PRSNT,		 2,		 2,	 0},
 	{ MV_IO_EXPANDER_SFP1_TX_FAULT,		 3,		 2,	 0},
 	{ MV_IO_EXPANDER_SFP1_LOS,		 4,		 2,	 0},
-	{ MV_IO_EXPANDER_JUMPER1_EEPROM_ENABLED, 6,		 2,	 0},
-	{ MV_IO_EXPANDER_JUMPER2,		 7,		 2,	 0},
+	{ MV_IO_EXPANDER_JUMPER2_EEPROM_ENABLED, 6,		 2,	 0},
+	{ MV_IO_EXPANDER_JUMPER3,		 7,		 2,	 0},
 		/* 3rd IO Expander Register*/
 	{ MV_IO_EXPANDER_EXT_PHY_SMI_EN,	 0,		 2,	 1},
 	{ MV_IO_EXPANDER_SFP1_TX_DIS,		 1,		 2,	 1},
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/cpu/mvCpu.c b/arch/arm/mach-avantalp/avanta_lp_family/cpu/mvCpu.c
index 1f1380c..701895e 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/cpu/mvCpu.c
+++ b/arch/arm/mach-avantalp/avanta_lp_family/cpu/mvCpu.c
@@ -101,7 +101,7 @@ MV_U32 mvCpuPclkGet(MV_VOID)
 		return MV_FPGA_CORE_CLK; /* FPGA is limited to 12.5Mhz */
 
 	if (MV_ERROR != mvCtrlCpuDdrL2FreqGet(&freqMode))
-		return (MV_U32)(1000000 * simple_strtoul(freqMode.cpuFreq, NULL, 16));
+		return (MV_U32)(1000000 * freqMode.cpuFreq);
 	else
 		return (MV_U32)MV_ERROR;
 }
@@ -121,7 +121,7 @@ MV_U32 mvCpuL2ClkGet(MV_VOID)
 	MV_FREQ_MODE freqMode;
 
 	if (MV_ERROR != mvCtrlCpuDdrL2FreqGet(&freqMode))
-		return (MV_U32)(1000000 * simple_strtoul(freqMode.l2Freq, NULL, 16));
+		return (MV_U32)(1000000 * freqMode.l2Freq);
 	else
 		return (MV_U32)MV_ERROR;;
 }
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
index 5dfcf89..6ec8557 100755
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
@@ -608,12 +608,12 @@ MV_STATUS mvCtrlBoardConfigGet(MV_U8 *config)
 *******************************************************************************/
 MV_BOOL mvCtrlIsEepromEnabled()
 {
-	MV_BOARD_IO_EXPANDER_TYPE_INFO *ioInfo = NULL;
+	MV_BOARD_IO_EXPANDER_TYPE_INFO ioInfo;
 	MV_U8 value;
 
-	if(mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_JUMPER1_EEPROM_ENABLED ,ioInfo))
+	if (mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_JUMPER2_EEPROM_ENABLED, &ioInfo) == MV_OK)
 	{
-		value = mvBoardIoExpValGet(ioInfo);
+		value = mvBoardIoExpValGet(&ioInfo);
 		if (value != 0xFF)
 			return (value == 0x1);
 	}
@@ -641,10 +641,9 @@ MV_STATUS mvCtrlEepromEnable(MV_BOOL enable)
 {
 	MV_BOARD_IO_EXPANDER_TYPE_INFO *ioInfo = NULL;
 
-	if(mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_JUMPER1_EEPROM_ENABLED ,ioInfo))
-	{
+	if (mvBoardIoExpanderTypeGet(MV_IO_EXPANDER_JUMPER2_EEPROM_ENABLED, ioInfo))
 		return 	(mvBoardIoExpValSet(ioInfo, (enable? 0x1 : 0x0)));
-	}
+
 	mvOsPrintf("%s: Error: Read from IO expander failed (EEPROM enabled jumper)\n", __func__);
 	return MV_ERROR;
 }
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h
index bfc0be5..6a88e6c 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h
@@ -137,8 +137,8 @@ typedef enum _mvIoExpanderTypeID {
 	MV_IO_EXPANDER_PON_PORT_LED,
 	MV_IO_EXPANDER_SD_STATUS,
 	MV_IO_EXPANDER_SD_WRITE_PROTECT,
-	MV_IO_EXPANDER_JUMPER1_EEPROM_ENABLED,
-	MV_IO_EXPANDER_JUMPER2,
+	MV_IO_EXPANDER_JUMPER1,
+	MV_IO_EXPANDER_JUMPER2_EEPROM_ENABLED,
 	MV_IO_EXPANDER_JUMPER3,
 	MV_IO_EXPANDER_EXT_PHY_SMI_EN,
 	MV_IO_EXPANDER_SPI1_CS_MSB0,
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
index 434d074..cb7be28 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
@@ -237,42 +237,42 @@ typedef struct _mvSATRBootTable {
 
 typedef struct {
 	MV_U8 id;
-	char *cpuFreq;
-	char *ddrFreq;
-	char *l2Freq;
+	MV_U32 cpuFreq;
+	MV_U32 ddrFreq;
+	MV_U32 l2Freq;
 } MV_FREQ_MODE;
 
 #define MV_SAR_FREQ_MODES { \
-		{ 0,  "266",  "266", "133" }, \
-		{ 1,  "333",  "167", "167" }, \
-		{ 2,  "333",  "222", "167" }, \
-		{ 3,  "333",  "333", "167" }, \
-		{ 4,  "400",  "200", "200" }, \
-		{ 5,  "400",  "267", "200" }, \
-		{ 6,  "400",  "400", "200" }, \
-		{ 7,  "500",  "250", "250" }, \
-		{ 8,  "500",  "334", "250" }, \
-		{ 9,  "500",  "400", "250" }, \
-		{ 10,  "533", "267", "267" }, \
-		{ 11, "533",  "356", "267" }, \
-		{ 12, "533",  "533", "267" }, \
-		{ 13, "600",  "300", "300" }, \
-		{ 14, "600",  "400", "300" }, \
-		{ 15, "600",  "600", "300" }, \
-		{ 16, "666",  "333", "333" }, \
-		{ 17, "666",  "444", "333" }, \
-		{ 18, "666",  "666", "333" }, \
-		{ 19, "800",  "267", "400" }, \
-		{ 20, "800",  "400", "400" }, \
-		{ 21, "800",  "534", "400" }, \
-		{ 22, "900",  "300", "450" }, \
-		{ 23, "900",  "450", "450" }, \
-		{ 24, "900",  "600", "450" }, \
-		{ 25, "1000", "500", "500" }, \
-		{ 26, "1000", "667", "500" }, \
-		{ 27, "1000", "500", "333" }, \
-		{ 28, "400",  "400", "400" }, \
-		{ 29, "1100", "550", "550" } \
+		{ 0,  266,  266, 133 }, \
+		{ 1,  333,  167, 167 }, \
+		{ 2,  333,  222, 167 }, \
+		{ 3,  333,  333, 167 }, \
+		{ 4,  400,  200, 200 }, \
+		{ 5,  400,  267, 200 }, \
+		{ 6,  400,  400, 200 }, \
+		{ 7,  500,  250, 250 }, \
+		{ 8,  500,  334, 250 }, \
+		{ 9,  500,  400, 250 }, \
+		{ 10, 533,  267, 267 }, \
+		{ 11, 533,  356, 267 }, \
+		{ 12, 533,  533, 267 }, \
+		{ 13, 600,  300, 300 }, \
+		{ 14, 600,  400, 300 }, \
+		{ 15, 600,  600, 300 }, \
+		{ 16, 666,  333, 333 }, \
+		{ 17, 666,  444, 333 }, \
+		{ 18, 666,  666, 333 }, \
+		{ 19, 800,  267, 400 }, \
+		{ 20, 800,  400, 400 }, \
+		{ 21, 800,  534, 400 }, \
+		{ 22, 900,  300, 450 }, \
+		{ 23, 900,  450, 450 }, \
+		{ 24, 900,  600, 450 }, \
+		{ 25, 1000, 500, 500 }, \
+		{ 26, 1000, 667, 500 }, \
+		{ 27, 1000, 500, 333 }, \
+		{ 28, 400,  400, 400 }, \
+		{ 29, 1100, 550, 550 } \
 };
 
 /* These macros help units to identify a target Mport Arbiter group */
-- 
1.7.5.4

