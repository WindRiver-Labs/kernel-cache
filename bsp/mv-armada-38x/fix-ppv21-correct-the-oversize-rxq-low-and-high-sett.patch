From 172ea5a51c7af5611b584e3ef648e66c58bd1d9e Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Thu, 15 May 2014 12:35:10 +0800
Subject: [PATCH 1667/1825] fix: ppv21: correct the oversize rxq low and high
 setting

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 0fda63c4b750991fc7b5fcb474840a0fba25350d

        correct the oversize queue low setting, for ppv21 we should set
        oversize queue low and rx queue high while for ppv2 we should set
        oversize rxq.  And I update sysfs for them;

Signed-off-by: Ken Ma <make@marvell.com>

Change-Id: Ifa62d5d0b3a2f9131e7d57bc67be67b2b26e292e
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8041
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/cls/cls_sysfs.c          |   17 +++++++++
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |    8 ++++
 arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.c   |   36 ++++++++++++-------
 arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.h   |    4 ++
 4 files changed, 52 insertions(+), 13 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cls/cls_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cls/cls_sysfs.c
index f674dcd..16fea84 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cls/cls_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cls/cls_sysfs.c
@@ -65,7 +65,11 @@ static ssize_t mv_cls_help(char *buf)
 	off += scnprintf(buf + off, PAGE_SIZE,  "echo virt gpid  >hw_virt_gpid        - set virtual port number <virt> for GemPortId <gpid>.\n");
 	off += scnprintf(buf + off, PAGE_SIZE,  "echo a b c d    >hw_udf              - set UDF field <a> as: base <b>, offset <c> bits, size<d> bits.\n");
 
+#ifdef CONFIG_MV_ETH_PP2_1
+	off += scnprintf(buf + off, PAGE_SIZE,  "echo p q        >hw_over_rxq_low     - set oversize rx low queue <q> for ingress port <p>.\n");
+#else
 	off += scnprintf(buf + off, PAGE_SIZE,  "echo p q        >hw_over_rxq         - set oversize rxq <q> for ingress port <p>.\n");
+#endif
 #ifdef CONFIG_MV_ETH_PP2_1
 	off += scnprintf(buf + off, PAGE_SIZE,  "echo p from q   >hw_qh               - set rx high queue source <from> and queue <q> for ingress port <p>.\n");
 	off += scnprintf(buf + off, PAGE_SIZE,  "echo idx m      >hw_mtu              - set MTU value <m> for index <idx>.\n");
@@ -219,8 +223,13 @@ static ssize_t mv_prs_store_unsigned(struct device *dev,
 #else
 		mvPp2V0ClsHwMtuSet(a, b, c);
 #endif
+#ifdef CONFIG_MV_ETH_PP2_1
+	else if (!strcmp(name, "hw_over_rxq_low"))
+		mvPp2ClsHwOversizeRxqLowSet(a, b);
+#else
 	else if (!strcmp(name, "hw_over_rxq"))
 		mvPp2ClsHwOversizeRxqSet(a, b);
+#endif
 	/*PPv2.1 new feature MAS 3.5*/
 	else if (!strcmp(name, "hw_qh"))
 		mvPp2ClsHwRxQueueHighSet(a, b, c);
@@ -310,7 +319,11 @@ static DEVICE_ATTR(hw_uni_spid,			S_IWUSR, mv_cls_show, mv_prs_store_unsigned);
 static DEVICE_ATTR(hw_virt_gpid,		S_IWUSR, mv_cls_show, mv_prs_store_unsigned);
 static DEVICE_ATTR(hw_udf,			S_IWUSR, mv_cls_show, mv_prs_store_unsigned);
 static DEVICE_ATTR(hw_mtu,			S_IWUSR, mv_cls_show, mv_prs_store_unsigned);
+#ifdef CONFIG_MV_ETH_PP2_1
+static DEVICE_ATTR(hw_over_rxq_low,		S_IWUSR, mv_cls_show, mv_prs_store_unsigned);
+#else
 static DEVICE_ATTR(hw_over_rxq,			S_IWUSR, mv_cls_show, mv_prs_store_unsigned);
+#endif
 static DEVICE_ATTR(hw_qh,			S_IWUSR, mv_cls_show, mv_prs_store_unsigned); /*PPv2.1 new feature MAS 3.5*/
 static DEVICE_ATTR(hw_mh,			S_IWUSR, mv_cls_show, mv_prs_store_unsigned); /*PPv2.1 new feature MAS 3.18*/
 static DEVICE_ATTR(hw_sq_size,			S_IWUSR, mv_cls_show, mv_prs_store_unsigned); /*PPv2.1 new feature MAS 3.14*/
@@ -355,7 +368,11 @@ static struct attribute *cls_attrs[] = {
 	&dev_attr_hw_virt_gpid.attr,
 	&dev_attr_hw_udf.attr,
 	&dev_attr_hw_mtu.attr,/*PPv2.1 feature changed MAS 3.7*/
+#ifdef CONFIG_MV_ETH_PP2_1
+	&dev_attr_hw_over_rxq_low.attr,/*PPv2.1 feature changed MAS 3.7*/
+#else
 	&dev_attr_hw_over_rxq.attr,
+#endif
 	&dev_attr_hw_qh.attr,/*PPv2.1 new feature MAS 3.5*/
 	&dev_attr_hw_mh.attr,/*PPv2.1 new feature MAS 3.18*/
 	&dev_attr_hw_sq_size.attr,/*PPv2.1 new feature MAS 3.14*/
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index e74973f..ede8265 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -3506,7 +3506,15 @@ static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 		mv_eth_tx_mtu_set(port, mtu);
 #endif /* CONFIG_MV_ETH_PP2_1 */
 
+#ifndef CONFIG_MV_ETH_PP2_1
 		mvPp2ClsHwOversizeRxqSet(MV_PPV2_PORT_PHYS(pp->port), pp->first_rxq);
+#else
+		mvPp2ClsHwOversizeRxqLowSet(MV_PPV2_PORT_PHYS(pp->port),
+			(pp->first_rxq) & MV_PP2_CLS_OVERSIZE_RXQ_LOW_MASK);
+		mvPp2ClsHwRxQueueHighSet(MV_PPV2_PORT_PHYS(pp->port),
+			1,
+			(pp->first_rxq) >> MV_PP2_CLS_OVERSIZE_RXQ_LOW_BITS);
+#endif
 
 		/* classifier port default config */
 		mvPp2ClsHwPortDefConfig(phys_port, 0, FLOWID_DEF(phys_port), pp->first_rxq);
diff --git a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.c b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.c
index 7707e72..5076857 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.c
@@ -214,32 +214,42 @@ int mvPp2ClsHwUdfSet(int udf_no, int offs_id, int offs_bits, int size_bits)
 
 	return MV_OK;
 }
+#ifdef CONFIG_MV_ETH_PP2_1
 /*-------------------------------------------------------------------------------*/
 /*
 PPv2.1 (feature MAS 3.7) feature update
-Note: this function overwrite q_high value that set by mvPp2ClsHwRxQueueHighSet
+Note: this function only set oversize rxq_low value, rxq_high will be set by mvPp2ClsHwRxQueueHighSet
 */
-int mvPp2ClsHwOversizeRxqSet(int port, int rxq)
+int mvPp2ClsHwOversizeRxqLowSet(int port, int rxq)
 {
+	POS_RANGE_VALIDATE(rxq, MV_PP2_CLS_OVERSIZE_RXQ_LOW_MAX);
 
-	POS_RANGE_VALIDATE(rxq, MV_PP2_CLS_OVERSIZE_RXQ_MAX);
 	/* set oversize rxq */
-#ifdef CONFIG_MV_ETH_PP2_1
 	mvPp2WrReg(MV_PP2_CLS_OVERSIZE_RXQ_LOW_REG(port), rxq);
 
-	mvPp2WrReg(MV_PP2_CLS_SWFWD_P2HQ_REG(port), (rxq >> MV_PP2_CLS_OVERSIZE_RXQ_LOW_BITS));
+	return MV_OK;
+}
 #else
-	{
-		unsigned int regVal;
-		regVal = mvPp2RdReg(MV_PP2_CLS_OVERSIZE_RXQ_REG(port));
-		regVal &= ~MV_PP2_CLS_OVERSIZE_RX_MASK;
-		regVal |= (rxq << MV_PP2_CLS_OVERSIZE_RXQ_OFFS);
-		mvPp2WrReg(MV_PP2_CLS_OVERSIZE_RXQ_REG(port), regVal);
-	}
-#endif /*PPv2_1*/
+/*-------------------------------------------------------------------------------*/
+/*
+Note: this function set oversize rxq including rxq_high and rxq_low for PPv2
+*/
+int mvPp2ClsHwOversizeRxqSet(int port, int rxq)
+{
+
+	unsigned int regVal;
+
+	POS_RANGE_VALIDATE(rxq, MV_PP2_CLS_OVERSIZE_RXQ_MAX);
+
+	/* set oversize rxq */
+	regVal = mvPp2RdReg(MV_PP2_CLS_OVERSIZE_RXQ_REG(port));
+	regVal &= ~MV_PP2_CLS_OVERSIZE_RX_MASK;
+	regVal |= (rxq << MV_PP2_CLS_OVERSIZE_RXQ_OFFS);
+	mvPp2WrReg(MV_PP2_CLS_OVERSIZE_RXQ_REG(port), regVal);
 
 	return MV_OK;
 }
+#endif
 /*-------------------------------------------------------------------------------*/
 /*PPv2.1 feature changed MAS 3.7*/
 int mvPp2V0ClsHwMtuSet(int port, int txp, int mtu)
diff --git a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.h b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.h
index 0c0933b..5d5f40a 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/cls/mvPp2ClsHw.h
@@ -420,7 +420,11 @@ int mvPp2ClsHwVirtPortSet(int virt_port, int gem_portid);
 int mvPp2ClsHwUdfSet(int udf_no, int offs_id, int offs_bits, int size_bits);
 int mvPp2V0ClsHwMtuSet(int port, int txp, int mtu);/*PPv2.1 feature changed MAS 3.7*/
 int mvPp2V1ClsHwMtuSet(int index, int mtu);/*PPv2.1 feature changed MAS 3.7*/
+#ifdef CONFIG_MV_ETH_PP2_1
+int mvPp2ClsHwOversizeRxqLowSet(int port, int rxq);/*PPv2.1 feature changed MAS 3.7*/
+#else
 int mvPp2ClsHwOversizeRxqSet(int port, int rxq);
+#endif
 int mvPp2ClsHwRxQueueHighSet(int port, int from, int queue);/*PPv2.1 new feature MAS 3.5*/
 int mvPp2ClsHwMhSet(int port, int virtEn, int uniEn, unsigned short mh);/*PPv2.1 new feature MAS 3.18*/
 int mvPp2ClsHwSeqInstrSizeSet(int index, int size);/*PPv2.1 new feature MAS 3.14*/
-- 
1.7.5.4

