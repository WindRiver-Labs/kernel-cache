From 8217b5d91a6ab6842c2600fa0dbc0adc22ba4314 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Wed, 12 Mar 2014 11:54:05 +0200
Subject: [PATCH 1459/1825] pp3: add SW interface header file

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 9d3184159b1c1fbeb0fa3da89c02507ce74f1121

	All OS and SW related defines and includes put in

Change-Id: I565f5a22ced8c8fe87c29a1bc5a69ae16cfd65bd
Signed-off-by: Yelena <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6348
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Ernest Villion <ernestv@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h |   64 +---------
 drivers/net/ethernet/marvell/pp3/common/mv_sw_if.h |  131 ++++++++++++++++++++
 .../net/ethernet/marvell/pp3/fw/mv_channel_if.c    |    1 +
 drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h    |   16 ++--
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c    |    1 +
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.c   |    1 +
 6 files changed, 146 insertions(+), 68 deletions(-)
 create mode 100644 drivers/net/ethernet/marvell/pp3/common/mv_sw_if.h

diff --git a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
index 7bf1b90..fbf2c5f 100644
--- a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
+++ b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
@@ -68,62 +68,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <linux/kernel.h>
 #include <linux/io.h>
 
-#define INLINE inline
-
-#define	MV_MAC_ADDR_SIZE	(6)
-#define MV_MAC_STR_SIZE		(20)
-
-/******************************************************
- * interrupt control --                               *
- ******************************************************/
-#define MV_TRYLOCK(lock, flags)                               \
-	(in_interrupt() ? spin_trylock((lock)) :              \
-		spin_trylock_irqsave((lock), (flags)))
-
-#define MV_LOCK(lock, flags)					\
-do {								\
-	if (in_interrupt())					\
-		spin_lock((lock));				\
-	else							\
-		spin_lock_irqsave((lock), (flags));		\
-} while (0)
-
-#define MV_UNLOCK(lock, flags)					\
-do {								\
-	if (in_interrupt())					\
-		spin_unlock((lock));				\
-	else							\
-		spin_unlock_irqrestore((lock), (flags));	\
-} while (0)
-
-#define MV_LIGHT_LOCK(flags)					\
-do {								\
-	if (!in_interrupt())					\
-		local_irq_save(flags);				\
-} while (0)
-
-#define MV_LIGHT_UNLOCK(flags)					\
-do {								\
-	if (!in_interrupt())					\
-		local_irq_restore(flags);			\
-} while (0)
-
-/******************************************************
- * align memory allocateion                           *
- ******************************************************/
-/* Macro for testing aligment. Positive if number is NOT aligned   */
-#define MV_IS_NOT_ALIGN(number, align)      ((number) & ((align) - 1))
-
-/* Macro for alignment up. For example, MV_ALIGN_UP(0x0330, 0x20) = 0x0340   */
-#define MV_ALIGN_UP(number, align)                             \
-(((number) & ((align) - 1)) ? (((number) + (align)) & ~((align)-1)) : (number))
-
-/* Macro for alignment down. For example, MV_ALIGN_UP(0x0330, 0x20) = 0x0320 */
-#define MV_ALIGN_DOWN(number, align) ((number) & ~((align)-1))
-
-/* Sets the field located at the specified in data.     */
-#define U32_SET_FIELD(data, mask, val)		((data) = (((data) & ~(mask)) | (val)))
-
 struct pp3_unit_info {
 	u32 base_addr; /* unit base address = silicon addr + unit offset */
 	u32 ins_offs;  /* unit instance offset - for multiple units */
@@ -134,7 +78,7 @@ struct pp3_unit_info {
 	words_num   - number of words (word = 32 bits) to read
 	data_ptr    - pointer to an array containing the read data
  */
-static INLINE void mv_pp3_hw_read(u32 access_addr, int words_num, u32 *data_ptr)
+static inline void mv_pp3_hw_read(u32 access_addr, int words_num, u32 *data_ptr)
 {
 	int i;
 
@@ -147,7 +91,7 @@ static INLINE void mv_pp3_hw_read(u32 access_addr, int words_num, u32 *data_ptr)
 	words_num   - number of words (word = 32 bits) to write
 	data_ptr    - pointer to an array containing the write data
  */
-static INLINE void mv_pp3_hw_write(u32 access_addr, int words_num, u32 *data_ptr)
+static inline void mv_pp3_hw_write(u32 access_addr, int words_num, u32 *data_ptr)
 {
 	int i;
 
@@ -159,7 +103,7 @@ static INLINE void mv_pp3_hw_write(u32 access_addr, int words_num, u32 *data_ptr
 	access_addr - absolute address: Silicon base + unit base + register offset
 	return register value
  */
-static INLINE u32 mv_pp3_hw_reg_read(u32 access_addr)
+static inline u32 mv_pp3_hw_reg_read(u32 access_addr)
 {
 	return readl(access_addr);
 }
@@ -168,7 +112,7 @@ static INLINE u32 mv_pp3_hw_reg_read(u32 access_addr)
 	access_addr - absolute address: Silicon base + unit base + register offset
 	write data to register
  */
-static INLINE void mv_pp3_hw_reg_write(u32 access_addr, u32 data)
+static inline void mv_pp3_hw_reg_write(u32 access_addr, u32 data)
 {
 #ifdef PP3_DEBUG
 	pr_info("\nwrite reg 0x%x, data 0x%x", access_addr, data);
diff --git a/drivers/net/ethernet/marvell/pp3/common/mv_sw_if.h b/drivers/net/ethernet/marvell/pp3/common/mv_sw_if.h
new file mode 100644
index 0000000..24ee432
--- /dev/null
+++ b/drivers/net/ethernet/marvell/pp3/common/mv_sw_if.h
@@ -0,0 +1,131 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+	this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+	notice, this list of conditions and the following disclaimer in the
+	documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+	used to endorse or promote products derived from this software without
+	specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+
+#ifndef __mvSwIf_h__
+#define __mvSwIf_h__
+
+#include <linux/kernel.h>
+#include <linux/io.h>
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/netdevice.h>
+#include <linux/platform_device.h>
+
+
+#define	MV_MAC_ADDR_SIZE	(6)
+#define MV_MAC_STR_SIZE		(20)
+
+/******************************************************
+ * interrupt control --                               *
+ ******************************************************/
+#define MV_TRYLOCK(lock, flags)                               \
+	(in_interrupt() ? spin_trylock((lock)) :              \
+		spin_trylock_irqsave((lock), (flags)))
+
+#define MV_LOCK(lock, flags)					\
+do {								\
+	if (in_interrupt())					\
+		spin_lock((lock));				\
+	else							\
+		spin_lock_irqsave((lock), (flags));		\
+} while (0)
+
+#define MV_UNLOCK(lock, flags)					\
+do {								\
+	if (in_interrupt())					\
+		spin_unlock((lock));				\
+	else							\
+		spin_unlock_irqrestore((lock), (flags));	\
+} while (0)
+
+#define MV_LIGHT_LOCK(flags)					\
+do {								\
+	if (!in_interrupt())					\
+		local_irq_save(flags);				\
+} while (0)
+
+#define MV_LIGHT_UNLOCK(flags)					\
+do {								\
+	if (!in_interrupt())					\
+		local_irq_restore(flags);			\
+} while (0)
+
+/******************************************************
+ * align memory allocateion                           *
+ ******************************************************/
+/* Macro for testing aligment. Positive if number is NOT aligned   */
+#define MV_IS_NOT_ALIGN(number, align)      ((number) & ((align) - 1))
+
+/* Macro for alignment up. For example, MV_ALIGN_UP(0x0330, 0x20) = 0x0340   */
+#define MV_ALIGN_UP(number, align)                             \
+(((number) & ((align) - 1)) ? (((number) + (align)) & ~((align)-1)) : (number))
+
+/* Macro for alignment down. For example, MV_ALIGN_UP(0x0330, 0x20) = 0x0320 */
+#define MV_ALIGN_DOWN(number, align) ((number) & ~((align)-1))
+
+/* Sets the field located at the specified in data.     */
+#define U32_SET_FIELD(data, mask, val)		((data) = (((data) & ~(mask)) | (val)))
+
+#endif /* __mvSwIf_h__ */
diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c
index 598c50a..e1c2ae5 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c
@@ -69,6 +69,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <linux/spinlock.h>
 
 #include "common/mv_hw_if.h"
+#include "common/mv_sw_if.h"
 #include "common/mv_pp3_config.h"
 #include "common/mv_stack.h"
 #include "hmac/mv_hmac.h"
diff --git a/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h
index ddb177d..2e27caa 100644
--- a/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h
+++ b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h
@@ -118,42 +118,42 @@ void pp3_gmac_unit_base(int index, u32 base);
 u32  pp3_gmac_reg_read(int port, u32 reg);
 void pp3_gmac_reg_write(int port, u32 reg, u32 data);
 
-static INLINE u32 mv_fpga_gop_base_addr_get(void)
+static inline u32 mv_fpga_gop_base_addr_get(void)
 {
 	return 0xa0000000;
 }
 
 
 /***************************************************************************/
-/*                          Inline functions                               */
+/*                          inline functions                               */
 /***************************************************************************/
-static INLINE void pp3_gmac_isr_summary_mask(void)
+static inline void pp3_gmac_isr_summary_mask(void)
 {
 	mv_pp3_hw_reg_write(mv_fpga_gop_base_addr_get() + ISR_SUM_MASK_REG, 0);
 }
 
-static INLINE void pp3_gmac_isr_summary_unmask(void)
+static inline void pp3_gmac_isr_summary_unmask(void)
 {
 	mv_pp3_hw_reg_write(mv_fpga_gop_base_addr_get() + ISR_SUM_MASK_REG,
 			ISR_SUM_PORT0_MASK | ISR_SUM_PORT1_MASK | 0x20 /* magic bit */);
 }
 
-static INLINE u32 pp3_gmac_isr_summary_cause_get(void)
+static inline u32 pp3_gmac_isr_summary_cause_get(void)
 {
 	return mv_pp3_hw_reg_read(mv_fpga_gop_base_addr_get() + ISR_SUM_CAUSE_REG);
 }
 
-static INLINE u32 pp3_gmac_port_isr_cause_get(int port)
+static inline u32 pp3_gmac_port_isr_cause_get(int port)
 {
 	return pp3_gmac_reg_read(port, GMAC_PORT_ISR_CAUSE_REG);
 }
 
-static INLINE void pp3_gmac_port_isr_mask(int port)
+static inline void pp3_gmac_port_isr_mask(int port)
 {
 	pp3_gmac_reg_write(port, GMAC_PORT_ISR_MASK_REG, 0);
 }
 
-static INLINE void pp3_gmac_port_isr_unmask(int port)
+static inline void pp3_gmac_port_isr_unmask(int port)
 {
 	pp3_gmac_reg_write(port, GMAC_PORT_ISR_MASK_REG, GMAC_PORT_LINK_CHANGE_MASK);
 }
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
index c3c8a9f..2a6456c 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
@@ -67,6 +67,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <linux/io.h>
 #include <linux/slab.h>
 #include "common/mv_hw_if.h"
+#include "common/mv_sw_if.h"
 #include "hmac/mv_hmac.h"
 
 #ifdef PP3_DEBUG
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
index 56a72c3..d87f59e 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.c
@@ -21,6 +21,7 @@
 #include <linux/mv_pp3.h>
 #include <linux/dma-mapping.h>
 #include "common/mv_hw_if.h"
+#include "common/mv_sw_if.h"
 #include "common/mv_pp3_config.h"
 #include "hmac/mv_hmac.h"
 #include "hmac/mv_hmac_bm.h"
-- 
1.7.5.4

