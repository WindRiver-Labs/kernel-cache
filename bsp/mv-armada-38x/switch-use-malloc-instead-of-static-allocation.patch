From 541ca95bb42d64feda2735f475bdc44400986fcf Mon Sep 17 00:00:00 2001
From: Uri Eliyahu <uriel@marvell.com>
Date: Sun, 15 Dec 2013 18:20:29 +0200
Subject: [PATCH 1219/1825] switch: use malloc instead of static allocation

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit bd9a44d679cb944961c7abbe38b34dd3b44bf300

	- in statistics dump function use malloc instead of
	  static allocation in order to avoid stack overflow

Change-Id: I64a4d2153a98711c4a7c02ea9185eea9d68ddc95
Signed-off-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/4740
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_switch/mv_switch.c           |   26 +++++++++++++++----
 1 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c
index 77dca92..ebe674b 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c
@@ -1202,27 +1202,36 @@ int mv_switch_get_free_buffers_num(void)
 }
 
 #define QD_FMT "%10lu %10lu %10lu %10lu %10lu %10lu %10lu\n"
-#define QD_CNT(c, f) (GT_U32)c[0].f, (GT_U32)c[1].f, (GT_U32)c[2].f, (GT_U32)c[3].f, (GT_U32)c[4].f, (GT_U32)c[5].f, (GT_U32)c[6].f
+#define QD_CNT(c, f) (GT_U32)(c[0]->f), (GT_U32)(c[1]->f), (GT_U32)(c[2]->f), (GT_U32)(c[3]->f),\
+			(GT_U32)(c[4]->f), (GT_U32)(c[5]->f), (GT_U32)(c[6]->f)
+
 #define QD_MAX 7
 void mv_switch_stats_print(void)
 {
-	GT_STATS_COUNTER_SET3 counters[QD_MAX];
-	GT_PORT_STAT2 port_stats[QD_MAX];
+	GT_STATS_COUNTER_SET3 * counters[QD_MAX];
+	GT_PORT_STAT2 * port_stats[QD_MAX];
+
 	int p;
 
 	if (qd_dev == NULL) {
 		printk(KERN_ERR "Switch is not initialized\n");
 		return;
 	}
-	memset(counters, 0, sizeof(GT_STATS_COUNTER_SET3) * QD_MAX);
+
+	for (p = 0; p < QD_MAX; p++) {
+		counters[p] = (GT_STATS_COUNTER_SET3 *)mvOsMalloc(sizeof(GT_STATS_COUNTER_SET3));
+		port_stats[p] = (GT_PORT_STAT2 *)mvOsMalloc(sizeof(GT_PORT_STAT2));
+		mvOsMemset(counters[p], 0, sizeof(GT_STATS_COUNTER_SET3));
+		mvOsMemset(port_stats[p], 0, sizeof(GT_PORT_STAT2));
+	}
 
 	printk(KERN_ERR "Total free buffers:      %u\n\n", mv_switch_get_free_buffers_num());
 
 	for (p = 0; p < QD_MAX; p++) {
-		if (gstatsGetPortAllCounters3(qd_dev, p, &counters[p]) != GT_OK)
+		if (gstatsGetPortAllCounters3(qd_dev, p, counters[p]) != GT_OK)
 			printk(KERN_ERR "gstatsGetPortAllCounters3 for port #%d - FAILED\n", p);
 
-		if (gprtGetPortCtr2(qd_dev, p, &port_stats[p]) != GT_OK)
+		if (gprtGetPortCtr2(qd_dev, p, port_stats[p]) != GT_OK)
 			printk(KERN_ERR "gprtGetPortCtr2 for port #%d - FAILED\n", p);
 	}
 
@@ -1271,6 +1280,11 @@ void mv_switch_stats_print(void)
 	printk(KERN_ERR "Deferred        " QD_FMT, QD_CNT(counters, Deferred));
 
 	gstatsFlushAll(qd_dev);
+
+	for (p = 0; p < QD_MAX; p++) {
+		mvOsFree(counters[p]);
+		mvOsFree(port_stats[p]);
+	}
 }
 
 static char *mv_str_port_state(GT_PORT_STP_STATE state)
-- 
1.7.5.4

