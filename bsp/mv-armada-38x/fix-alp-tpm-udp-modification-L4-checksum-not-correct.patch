From aa56d84507bf281cf814c656c0a30941ec344351 Mon Sep 17 00:00:00 2001
From: Evan <xswang@marvell.com>
Date: Sun, 22 Jun 2014 01:58:45 +0800
Subject: [PATCH 1740/1825] fix:alp:tpm: udp modification L4 checksum not
 correct

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit b2e44cc5a6ffe3fa2dd324f50f7e738b3cca5302

	bug reason: the L4 checksum offset of TCP is different from UDP.
	This patch solve the issue of udp modification L4 checksum not correct.
	SYSTEMSW-610 : udp modification L4 checksum not correct.

Change-Id: I65cf1156e223c3f222b148ebb6f3be250bc92c19
Signed-off-by: Evan <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8654
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_tpm/inc/tpm_pme.h            |    7 ++-
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c       |    3 +
 .../mv_drivers_lsp/mv_tpm/src/core/tpm_pme.c       |   51 +++++++++++++++++++-
 .../mv_tpm/src/sysfs/tpm_sysfs_pme.c               |    9 ++++
 4 files changed, 66 insertions(+), 4 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_pme.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_pme.h
index 3112077..19403e6 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_pme.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_pme.h
@@ -183,9 +183,9 @@ disclaimer.
 /* Usecase instruction template related */
 #define TPM_PME_INSTR_TEMPL_ENTRY_MAX	(15)
 #ifndef CONFIG_MV_ETH_PP2_1
-#define TPM_PME_INSTR_TEMPL_MAX		(74)
+#define TPM_PME_INSTR_TEMPL_MAX		(94)
 #else
-#define TPM_PME_INSTR_TEMPL_MAX		(48)
+#define TPM_PME_INSTR_TEMPL_MAX		(64)
 #endif
 #define TPM_PPOE_SESS_ALLOWED_MAX	(5)
 
@@ -273,7 +273,8 @@ enum tpm_pme_mod_internal_t {
 	TPM_IPV4_CHECK_MOD  = 0x0008,
 	TPM_L4_CHECK_MOD    = 0x0010,
 	TPM_QOS_FROM_DESC   = 0x0020,	/* If set, means QoS from Tx Desc */
-	TPM_MOD_PKT_IS_IP6  = 0x0040	/* Indicate the modified packet is IPV6 */
+	TPM_MOD_PKT_IS_IP6  = 0x0040,	/* Indicate the modified packet is IPV6 */
+	TPM_MOD_PKT_IS_UDP  = 0x0080	/* Indicate the modified packet L4 is UDP, only for IPV4 NAPT */
 };
 
 /* PME COMMAND LAST ENUM */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
index ad35f79..3651a56 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
@@ -3889,6 +3889,9 @@ static int tpm_mng_mod_create(
 				pme_mod_data[act_idx].inter_mod_bm |= TPM_L4_CHECK_MOD;
 			}
 		}
+		/* Check UDP */
+		if (match_key->pkt_key->ipvx_add.ip_proto == IPPROTO_UDP)
+			pme_mod_data[act_idx].inter_mod_bm |= TPM_MOD_PKT_IS_UDP;
 	}
 
 	/* Mod merge to save PME resource */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_pme.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_pme.c
index 7c50d1b..c598486 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_pme.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_pme.c
@@ -2642,6 +2642,12 @@ static int tpm_pme_mod_templ_sel(struct tpm_pme_pkt_mod_t *pme_mod_data,
 		if (ext_mod_bm & (~TPM_VLAN_MOD))
 			ext_mod_bm |= TPM_IP_DSCP_SET;
 	}
+	/* Ignore UDP check for non-NAPT case */
+	if (ext_mod_bm != TPM_PME_NAPT_US_BM1 &&
+	    ext_mod_bm != TPM_PME_NAPT_US_BM2 &&
+	    ext_mod_bm != TPM_PME_NAPT_DS_BM1 &&
+	    ext_mod_bm != TPM_PME_NAPT_DS_BM2)
+		int_mod_bm &= ~(TPM_MOD_PKT_IS_UDP);
 	/* Search Template in DB according to external mod_bm and internal mod_bm */
 	/* Lock template */
 	tpm_db_pme_templ_lock();
@@ -3186,6 +3192,42 @@ static int tpm_pme_lpbk_mh_instr_add(void)
 }
 
 /*******************************************************************************
+* tpm_pme_napt_templ_to_udp
+*
+* DESCRIPTION: The API will update the IPV4 NAPT template to UDP case.
+*
+* INPUTS:
+*           templ_num - the templates number.
+*
+* OUTPUTS:
+*           None
+*
+* RETURNS:
+* On success, the function returns TPM_OK. On error different types are returned
+* according to the case - see tpm_error_code_t.
+*
+* COMMENTS:
+*           It is called by tpm_pme_start.
+*******************************************************************************/
+static int tpm_pme_napt_templ_to_udp(int templ_num)
+{
+	unsigned int i, pme_entry_num;
+
+	for (i = 0; i < templ_num; i++) {
+		for (pme_entry_num = 0; pme_entry_num < TPM_PME_INSTR_TEMPL_ENTRY_MAX; pme_entry_num++) {
+			if (g_tpm_pme_templ_ipv4_napt[i].pme_entry[pme_entry_num].last)
+				break;
+		}
+		/* Update the mod data of instruction skip to L4 checksum */
+		g_tpm_pme_templ_ipv4_napt[i].pme_entry[pme_entry_num - 1].data -= 0xa;
+		/* Set internal UDP flag */
+		g_tpm_pme_templ_ipv4_napt[i].int_mod_bm |= TPM_MOD_PKT_IS_UDP;
+	}
+
+	return TPM_OK;
+}
+
+/*******************************************************************************
 * tpm_pme_start
 *
 * DESCRIPTION: The API will do following operations:
@@ -3242,8 +3284,15 @@ int tpm_pme_start(void)
 	rc = tpm_pme_instr_templ_create(g_tpm_pme_templ_l2_switch, tpm_pme_l2_switch_templ_num);
 	IF_ERROR_STR(TPM_PME_MOD, rc, "TPM Template of L2 switch mod case create failed\n");
 
+	/* Add IPV4 TCP NAPT templates */
+	rc = tpm_pme_instr_templ_create(g_tpm_pme_templ_ipv4_napt, tpm_pme_ipv4_napt_templ_num);
+	IF_ERROR_STR(TPM_PME_MOD, rc, "TPM Template of IPV4 NAPT TCP mod case create failed\n");
+
+	/* Add IPV4 UDP NAPT templates */
+	rc = tpm_pme_napt_templ_to_udp(tpm_pme_ipv4_napt_templ_num);
+	IF_ERROR_STR(TPM_PME_MOD, rc, "TPM Template of IPV4 NAPT to UDP update failed\n");
 	rc = tpm_pme_instr_templ_create(g_tpm_pme_templ_ipv4_napt, tpm_pme_ipv4_napt_templ_num);
-	IF_ERROR_STR(TPM_PME_MOD, rc, "TPM Template of IPV4 NAPT mod case create failed\n");
+	IF_ERROR_STR(TPM_PME_MOD, rc, "TPM Template of IPV4 NAPT UDP mod case create failed\n");
 
 	rc = tpm_pme_instr_templ_create(g_tpm_pme_templ_ipv4_route, tpm_pme_ipv4_route_templ_num);
 	IF_ERROR_STR(TPM_PME_MOD, rc, "TPM Template of IPV4 route mod case create failed\n");
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c
index 894e13c..2b472ce 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c
@@ -225,6 +225,15 @@ static int tpm_pme_print_instr_templ(void)
 			mvOsPrintf("L4_SRC + ");
 		if (templ_data.ext_mod_bm & TPM_L4_DST_SET)
 			mvOsPrintf("L4_DST + ");
+		if ((templ_data.ext_mod_bm == TPM_PME_NAPT_US_BM1 ||
+		     templ_data.ext_mod_bm == TPM_PME_NAPT_US_BM2 ||
+		     templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM1 ||
+		     templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM2)) {
+			if (templ_data.int_mod_bm & TPM_MOD_PKT_IS_UDP)
+				mvOsPrintf("UDP + ");
+			else
+				mvOsPrintf("TCP + ");
+		}
 		print_horizontal_line(121, "-");
 	}
 	print_horizontal_line(121, "=");
-- 
1.7.5.4

