From 5773cb9f212276de1e1b20f5f4c3cb9d1d7e2c66 Mon Sep 17 00:00:00 2001
From: Zhong Hongbo <hongbo.zhong@windriver.com>
Date: Sat, 11 Oct 2014 11:18:24 +0800
Subject: [PATCH 1819/1825] fs: splice: Fix the compile warning

commit b1e212fd2e59 [DMSP Splice & NetDMA support (by Lior A. )] from
https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
introduces the following compile warning:

fs/splice.c: In function 'common_mempool_create':
fs/splice.c:1540:2: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]
  uint32_t pool_entry_size = COMMON_MPOOL_ALIGN4(sizeof(common_mpool_hdr_t)+aligned_entry_size+sizeof(common_mpool_ftr_t));
  ^
fs/splice.c:1541:2: warning: ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]
  common_mpool_hdr_t* hdr;
  ^
fs/splice.c: In function 'generic_splice_from_socket':
fs/splice.c:1686:3: warning: format '%d' expects a matching 'int' argument [-Wformat=]
   printk(KERN_ERR "rcv_pool %p kvec_pool %p uninitialized %d\n", rcv_pool, kvec_pool);
   ^
fs/splice.c: In function 'init_splice_pools':
fs/splice.c:2493:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
fs/splice.c: In function 'generic_splice_from_socket':
fs/splice.c:1772:21: warning: 'iov' may be used uninitialized in this function [-Wmaybe-uninitialized]
  common_mempool_free(kvec_pool, (void*)iov);
                     ^
fs/splice.c:1771:21: warning: 'rv_cb' may be used uninitialized in this function [-Wmaybe-uninitialized]
  common_mempool_free(rcv_pool, (void*)rv_cb);
                     ^

Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 fs/splice.c |   17 +++++++----------
 1 files changed, 7 insertions(+), 10 deletions(-)

diff --git a/fs/splice.c b/fs/splice.c
index 0fa9e31..03c5aa6 100644
--- a/fs/splice.c
+++ b/fs/splice.c
@@ -1536,13 +1536,14 @@ common_mempool_t*  common_mempool_create(uint32_t number_of_entries,
 						uint32_t entry_size)
 {
 	uint32_t i;
-	uint32_t aligned_entry_size = COMMON_MPOOL_ALIGN4(entry_size);
-	uint32_t pool_entry_size = COMMON_MPOOL_ALIGN4(sizeof(common_mpool_hdr_t)+aligned_entry_size+sizeof(common_mpool_ftr_t));
 	common_mpool_hdr_t* hdr;
 	common_mpool_hdr_t* next_hdr;
 	common_mpool_ftr_t* ftr;
 	common_mempool_t* pool;
+	uint32_t pool_entry_size;
+	uint32_t aligned_entry_size = COMMON_MPOOL_ALIGN4(entry_size);
 
+	pool_entry_size = COMMON_MPOOL_ALIGN4(sizeof(common_mpool_hdr_t)+aligned_entry_size+sizeof(common_mpool_ftr_t));
 	pool = kmalloc((sizeof(common_mempool_t) + pool_entry_size*number_of_entries), GFP_ATOMIC);
 
 	if (!pool) {
@@ -1676,14 +1677,14 @@ ssize_t generic_splice_from_socket(struct file *file, struct socket *sock,
 
 	err = generic_write_checks(file, &pos, &count, S_ISBLK(inode->i_mode));
 	if (err != 0 || count == 0)
-		goto done;
+		return -EINVAL;
 
 	file_remove_suid(file);
 	file_update_time(file);
 
 	if (unlikely(!rcv_pool || !kvec_pool))
 	{
-		printk(KERN_ERR "rcv_pool %p kvec_pool %p uninitialized %d\n", rcv_pool, kvec_pool);
+		printk(KERN_ERR "rcv_pool %p kvec_pool %p uninitialized\n", rcv_pool, kvec_pool);
 		return -ENOMEM;
 	}
 
@@ -2483,13 +2484,9 @@ static int __init init_splice_pools(void)
 	rcv_pool =  common_mempool_create((8 * num_possible_cpus()), rcv_pool_size);
 	kvec_pool = common_mempool_create((8 * num_possible_cpus()), kve_pool_size);
 	if (!rcv_pool || !kvec_pool)
-	{
 		return -ENOMEM;
-	}
-/*
-	printk(KERN_ERR "%s rcv %p (sz:%d) kvec %p (sz:%d) per %d core\n",
-		__FUNCTION__, rcv_pool, rcv_pool_size, kvec_pool, kve_pool_size, num_possible_cpus());
-*/
+
+	return 0;
 }
 
 fs_initcall(init_splice_pools);
-- 
1.7.5.4

