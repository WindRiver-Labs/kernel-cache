From fe7a0a9ae3f889ffc58f306e84f42eac680824a1 Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Tue, 1 Jul 2014 15:30:39 +0800
Subject: [PATCH 1754/1825] fix: tpm: split arp flow into untag/stag/dtag arp
 flows

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 8796b8429183c1f49f434dd29c283b8976409a8e

	split arp flow into untag/stag/dtag arp flows to reduce PNC rule
	hit number.
	No issue number and in ZTE's capbility requirements, arp flows
	will hit more than 16 times if we do not split arp flow.

Signed-off-by: Ken Ma <make@marvell.com>

Change-Id: Ia6e751aed987fcc24205c0b9088e38e3873fad60
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8844
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h |    2 +-
 .../mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h |   12 +++--
 .../mv_drivers_lsp/mv_tpm/inc/tpm_mng.h            |    8 ++-
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c       |   51 +++++++++++++++----
 .../mv_drivers_lsp/mv_tpm/src/core/tpm_parser.c    |   23 ++++++++-
 .../mv_tpm/src/sysfs/tpm_sysfs_prs.c               |    4 +-
 .../mv_tpm/src/sysfs/tpm_sysfs_utils.c             |    8 ++-
 7 files changed, 84 insertions(+), 24 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h
index e800ee3..9e4b1b2 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h
@@ -51,7 +51,7 @@ disclaimer.
 
 /* TPM mng module definition */
 #define TPM_DB_MNG_FLOW_LUID_MAX		(20)		/* max number of luid in a single flow_id	*/
-#define TPM_DB_MNG_FLOW_CAP_MAX			(400)		/* max number of {cap, flow_id} couple		*/
+#define TPM_DB_MNG_FLOW_CAP_MAX			(512)		/* max number of {cap, flow_id} couple		*/
 #define TPM_DB_MNG_CAP_MAX			(TPM_NUM_MAX_CAPABILITIES * 2)	/* max number of public caps	*/
 #define TPM_DB_MNG_API_RULE_ENG_ENTRY_MAX	(5)		/* max number of engine entry of a single api	*/
 #define TPM_DB_MNG_API_RULE_FLOW_ENTRY_MAX	(15)		/* max number of flow entry of a single api	*/
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
index 9610e85..ae9df45 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
@@ -276,7 +276,9 @@ enum tpm_traffic_type_t {
 	IPV6_UC_RTR_GEN_EX_PPOE_STAG,
 	IPV6_UC_RTR_GEN_EX_PPOE_DTAG,
 	IPV6_UC_RTR_GEN_EX_PPOE_TTAG,
-	NON_IP_ARP,
+	NON_IP_ARP_UNTAG,
+	NON_IP_ARP_STAG,
+	NON_IP_ARP_DTAG,
 	LOOPBACK_PORT_PKT,
 	UNEXPECTED_PKT,
 	TPM_TRAFFIC_TYPE_MAX
@@ -385,9 +387,11 @@ enum tpm_lu_id_enum_t {
 	IPV6_UC_BRG_FRAG_UNTAG_ID		= 51,
 	IPV6_UC_BRG_FRAG_STAG_ID		= 52,
 	IPV6_UC_BRG_FRAG_DTAG_ID		= 53,
-	NON_IP_ARP_ID				= 54,
-	LOOPBACK_PKT_ID				= 55,
-	UNEXPECTED_PKT_ID			= 56
+	NON_IP_ARP_UNTAG_ID			= 54,
+	NON_IP_ARP_STAG_ID			= 55,
+	NON_IP_ARP_DTAG_ID			= 56,
+	LOOPBACK_PKT_ID				= 57,
+	UNEXPECTED_PKT_ID			= 58
 };
 
 /* TPM module state
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h
index 6c36c6e..e2539c0 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h
@@ -250,8 +250,12 @@ enum tpm_mng_flow_log_id_t {
 	TPM_MNG_FLOW_ID_NOT_IP_BRG_UNTAG_NPON,
 	TPM_MNG_FLOW_ID_NOT_IP_BRG_TAG_NPON,
 	TPM_MNG_FLOW_ID_NOT_IP_BRG_DTAG_NPON,
-	TPM_MNG_FLOW_ID_NOT_IP_ARP_PON,
-	TPM_MNG_FLOW_ID_NOT_IP_ARP_NPON,
+	TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_PON,
+	TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_PON,
+	TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_PON,
+	TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_NPON,
+	TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_NPON,
+	TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_NPON,
 	TPM_MNG_FLOW_ID_UNEXPECTED_PKT_PON,
 	TPM_MNG_FLOW_ID_UNEXPECTED_PKT_NPON,
 	TPM_MNG_FLOW_ID_LOOPBACK_PORT,
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
index 3651a56..15842e9 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
@@ -331,15 +331,39 @@ static struct tpm_db_mng_flow_conf_t tpm_mng_flow_cfg_init[TPM_MNG_FLOW_ID_MAX]
 		{TPM_MNG_ILLEGAL_LUID	    , 0},
 		}
 	},
-	{TPM_MNG_FLOW_ID_NOT_IP_ARP_PON, TPM_WAY_PON, 0,
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_PON, TPM_WAY_PON, 0,
 		{
-		{NON_IP_ARP_ID			, 0},
+		{NON_IP_ARP_UNTAG_ID        , 0},
 		{TPM_MNG_ILLEGAL_LUID	    , 0},
 		}
 	},
-	{TPM_MNG_FLOW_ID_NOT_IP_ARP_NPON, TPM_WAY_NON_PON, 0,
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_PON, TPM_WAY_PON, 0,
 		{
-		{NON_IP_ARP_ID			, 0},
+		{NON_IP_ARP_STAG_ID        , 0},
+		{TPM_MNG_ILLEGAL_LUID	    , 0},
+		}
+	},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_PON, TPM_WAY_PON, 0,
+		{
+		{NON_IP_ARP_DTAG_ID        , 0},
+		{TPM_MNG_ILLEGAL_LUID	    , 0},
+		}
+	},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_NPON, TPM_WAY_NON_PON, 0,
+		{
+		{NON_IP_ARP_UNTAG_ID        , 0},
+		{TPM_MNG_ILLEGAL_LUID	    , 0},
+		}
+	},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_NPON, TPM_WAY_NON_PON, 0,
+		{
+		{NON_IP_ARP_STAG_ID        , 0},
+		{TPM_MNG_ILLEGAL_LUID	    , 0},
+		}
+	},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_NPON, TPM_WAY_NON_PON, 0,
+		{
+		{NON_IP_ARP_DTAG_ID        , 0},
 		{TPM_MNG_ILLEGAL_LUID	    , 0},
 		}
 	},
@@ -1628,8 +1652,8 @@ int tpm_mng_cap_match_tag_flow(enum tpm_mng_flow_log_id_t flow_id)
 	/* only checks tag flow */
 	if ((flow_id != TPM_MNG_FLOW_ID_NON_IP_MTM_UNTAG_PON)
 		&& (flow_id != TPM_MNG_FLOW_ID_NON_IP_MTM_UNTAG_NPON)
-		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_NPON)
-		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_PON)
+		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_NPON)
+		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_PON)
 		&& (flow_id != TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_STAG_PON)
 		&& (flow_id != TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_STAG_NPON)
 		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_BRG_TAG_PON)
@@ -1662,8 +1686,8 @@ int tpm_mng_cap_match_dtag_flow(enum tpm_mng_flow_log_id_t flow_id)
 	/* only checks double tag flow */
 	if ((flow_id != TPM_MNG_FLOW_ID_NON_IP_MTM_UNTAG_PON)
 		&& (flow_id != TPM_MNG_FLOW_ID_NON_IP_MTM_UNTAG_NPON)
-		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_NPON)
-		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_PON)
+		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_NPON)
+		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_PON)
 		&& (flow_id != TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_DTAG_PON)
 		&& (flow_id != TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_DTAG_NPON)
 		&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_BRG_DTAG_PON)
@@ -1748,8 +1772,12 @@ int tpm_mng_cap_match_l2_flow(struct tpm_db_mng_cap_conf_t *cap_arr,
 	}
 	if (cap_arr->cap_field_bm & TPM_MATCH_ARP_TRGT_IP_ADDR) {
 		if (((cap_arr->cap_field_bm & ~TPM_MATCH_ARP_TRGT_IP_ADDR) < TPM_MATCH_IPV4_PKT)
-		     && ((flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_NPON)
-			  && (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_PON)))
+			&& ((flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_NPON)
+				&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_NPON)
+				&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_NPON)
+				&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_PON)
+				&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_PON)
+				&& (flow_id != TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_PON)))
 			return TPM_FALSE;
 	}
 
@@ -2553,7 +2581,8 @@ int tpm_mng_cnm_pbit_asis_cap_add(void)
 		    flow_id == TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_DTAG_NPON ||
 		    flow_id == TPM_MNG_FLOW_ID_NOT_IP_BRG_TAG_NPON ||
 		    flow_id == TPM_MNG_FLOW_ID_NOT_IP_BRG_DTAG_NPON ||
-		    flow_id == TPM_MNG_FLOW_ID_NOT_IP_ARP_NPON ||
+		    flow_id == TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_NPON ||
+		    flow_id == TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_NPON ||
 		    (ipv6_enable == TPM_IPV6_SUPPORTED && flow_id == TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_STAG_NPON) ||
 		    (ipv6_enable == TPM_IPV6_SUPPORTED && flow_id == TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_DTAG_NPON)) {
 			flow_cap_arr.flow_log_id = flow_id;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_parser.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_parser.c
index f27fde9..e899eb5 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_parser.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_parser.c
@@ -1413,10 +1413,27 @@ static struct tpm_db_prs_t tpm_prs_preconfig = {
 										 TPM_PRS_L3_INFO_MASK|
 										 TPM_PRS_L3_CAST_MASK|
 										 TPM_PRS_UDF3_PON_CHANNEL_MASK},		TPM_PRS_INV_TCAM_IDX,	IPV6_UC_RTR_GEN_EX_PPOE_TTAG_ID},
-		{TPM_PRS_LU_ID_ENTRY_VALID,	NON_IP_ARP,			{TPM_PRS_MAC2ME_FALSE|
-										 TPM_PRS_L3_ARP,
+		{TPM_PRS_LU_ID_ENTRY_VALID,	NON_IP_ARP_UNTAG,		{TPM_PRS_MAC2ME_FALSE|
+										 TPM_PRS_L3_ARP|
+										 TPM_PRS_VLAN_NONE,
 										 TPM_PRS_MAC2ME_MASK|
-										 TPM_PRS_L3_INFO_MASK},		TPM_PRS_INV_TCAM_IDX,	NON_IP_ARP_ID},
+										 TPM_PRS_L3_INFO_MASK|
+										 TPM_PRS_VLAN_MASK},
+								TPM_PRS_INV_TCAM_IDX,	NON_IP_ARP_UNTAG_ID},
+		{TPM_PRS_LU_ID_ENTRY_VALID,	NON_IP_ARP_STAG,		{TPM_PRS_MAC2ME_FALSE|
+										 TPM_PRS_L3_ARP|
+										 TPM_PRS_VLAN_SINGLE,
+										 TPM_PRS_MAC2ME_MASK|
+										 TPM_PRS_L3_INFO_MASK|
+										 TPM_PRS_VLAN_MASK},
+								TPM_PRS_INV_TCAM_IDX,	NON_IP_ARP_STAG_ID},
+		{TPM_PRS_LU_ID_ENTRY_VALID,	NON_IP_ARP_DTAG,		{TPM_PRS_MAC2ME_FALSE|
+										 TPM_PRS_L3_ARP|
+										 TPM_PRS_VLAN_DOUBLE,
+										 TPM_PRS_MAC2ME_MASK|
+										 TPM_PRS_L3_INFO_MASK|
+										 TPM_PRS_VLAN_MASK},
+								TPM_PRS_INV_TCAM_IDX,	NON_IP_ARP_DTAG_ID},
 		{TPM_PRS_LU_ID_ENTRY_VALID,	LOOPBACK_PORT_PKT,		{TPM_PRS_RI_NONE,
 										 TPM_PRS_RI_NONE_MASK},		TPM_PRS_INV_TCAM_IDX,	LOOPBACK_PKT_ID},
 		{TPM_PRS_LU_ID_ENTRY_INV,	UNEXPECTED_PKT,			{TPM_PRS_RI_NONE,
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c
index 8a79a1d..1676cf7 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c
@@ -148,7 +148,9 @@ static char *tpm_traffic_type_str_tbl[TPM_TRAFFIC_TYPE_MAX] = {
 	"IPV6_UC_RTR_GEN_EX_PPOE_STAG",
 	"IPV6_UC_RTR_GEN_EX_PPOE_DTAG",
 	"IPV6_UC_RTR_GEN_EX_PPOE_TTAG",
-	"NON_IP_ARP",
+	"NON_IP_ARP_UNTAG",
+	"NON_IP_ARP_STAG"
+	"NON_IP_ARP_DTAG"
 	"LOOPBACK_PORT_PKT",
 	"UNEXPECTED_PKT"
 };
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
index 5e7a1cb..f04c621 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
@@ -275,8 +275,12 @@ static struct tpm_enum_str_t g_enum_flow_name[] = {
 	{TPM_MNG_FLOW_ID_NOT_IP_BRG_UNTAG_NPON,	"NOT_IP_BRG_UNTAG_NPON"	},
 	{TPM_MNG_FLOW_ID_NOT_IP_BRG_TAG_NPON,	"NOT_IP_BRG_TAG_NPON"	  },
 	{TPM_MNG_FLOW_ID_NOT_IP_BRG_DTAG_NPON,	"NOT_IP_BRG_DTAG_NPON"	 },
-	{TPM_MNG_FLOW_ID_NOT_IP_ARP_PON,		"NOT_IP_ARP_PON"		},
-	{TPM_MNG_FLOW_ID_NOT_IP_ARP_NPON,		"NOT_IP_ARP_NPON"		},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_PON,		"NOT_IP_ARP_UNTAG_PON"		},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_PON,		"NOT_IP_ARP_STAG_PON"		},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_PON,		"NOT_IP_ARP_DTAG_PON"		},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_UNTAG_NPON,		"NOT_IP_ARP_UNTAG_NPON"		},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_STAG_NPON,		"NOT_IP_ARP_STAG_NPON"		},
+	{TPM_MNG_FLOW_ID_NOT_IP_ARP_DTAG_NPON,		"NOT_IP_ARP_DTAG_NPON"		},
 	{TPM_MNG_FLOW_ID_UNEXPECTED_PKT_PON,		"UNEXPECTED_PKT_PON"	},
 	{TPM_MNG_FLOW_ID_UNEXPECTED_PKT_NPON,	"UNEXPECTED_PKT_NPON"	  },
 	{TPM_MNG_FLOW_ID_LOOPBACK_PORT ,		 "LOOPBACK_PORT"		},
-- 
1.7.5.4

