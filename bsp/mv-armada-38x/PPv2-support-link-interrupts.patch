From b5c6feb0969f0e4335e7c18d08a0856cfc4ed9d1 Mon Sep 17 00:00:00 2001
From: Yoni Farhadian <yonif@marvell.com>
Date: Tue, 7 May 2013 15:38:21 +0300
Subject: [PATCH 0645/1825] PPv2: support link interrupts

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 34508d61eca9816ad4c2acc5e0d932f645cc7248

Change-Id: I21d18a7598e226139069ec5e2153cf901145bd56
Signed-off-by: Yoni Farhadian <yonif@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/1789
Reviewed-by: Star_Automation <star@marvell.com>
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/linux_oss/mvOs.h              |    3 +-
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c    |    3 ++
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   25 +++++++++++++------
 .../arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h |   13 ++++++++-
 4 files changed, 33 insertions(+), 11 deletions(-)

diff --git a/arch/arm/plat-armada/linux_oss/mvOs.h b/arch/arm/plat-armada/linux_oss/mvOs.h
index 6677cfa..fe75b20 100644
--- a/arch/arm/plat-armada/linux_oss/mvOs.h
+++ b/arch/arm/plat-armada/linux_oss/mvOs.h
@@ -279,7 +279,8 @@ static inline void mvOsBridgeReorderWA(void)
 #define mvOsCacheMultiLineFlush(handle, addr, size)
 #define mvOsCacheMultiLineInv(handle, addr, size)
 #define mvOsCacheMultiLineFlushInv(handle, addr, size)
-#define mvOsCacheIoSync()		{ MV_REG_WRITE(0x21810, 0x1); while (MV_REG_READ(0x21810) & 0x1); }
+#define mvOsCacheIoSync()		/*TBD - Doesn't work in ALP z1*/
+					/*{ MV_REG_WRITE(0x21810, 0x1); while (MV_REG_READ(0x21810) & 0x1); }*/
 #else
 #define mvOsCacheIoSync()		/* Dummy - not needed in s/w cache coherency */
 /*************************************/
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
index e023af4..eb0e0b9 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
@@ -103,6 +103,9 @@ static int mv_eth_start(struct net_device *dev)
 		mv_eth_interrupts_unmask(priv);
 		smp_call_function_many(cpu_online_mask, (smp_call_func_t)mv_eth_interrupts_unmask, (void *)priv, 1);
 
+		/* Unmask Port link interrupt */
+		mvEthPortIsrUnmask(priv->port);
+
 		printk(KERN_NOTICE "%s: started\n", dev->name);
 	}
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 272af53..c086ca2 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -1427,7 +1427,7 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq)
 
 	/* Get number of received packets */
 	rx_done = mvPp2RxqBusyDescNumGet(pp->port, rxq);
-//	mvOsCacheIoSync();
+	mvOsCacheIoSync();
 
 	if ((rx_todo > rx_done) || (rx_todo < 0))
 		rx_todo = rx_done;
@@ -1557,7 +1557,7 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq)
 	}
 
 	/* Update RxQ management counters */
-//	mvOsCacheIoSync();
+	mvOsCacheIoSync();
 	mvPp2RxqDescNumUpdate(pp->port, rxq, rx_done, rx_filled);
 
 	return rx_done;
@@ -2021,6 +2021,7 @@ static void mv_eth_rxq_drop_pkts(struct eth_port *pp, int rxq)
 	int	                rx_done, i;
 	MV_PP2_PHYS_RXQ_CTRL    *rx_ctrl = pp->rxq_ctrl[rxq].q;
 
+
 	if (rx_ctrl == NULL)
 		return;
 
@@ -2461,24 +2462,27 @@ irqreturn_t mv_eth_isr(int irq, void *dev_id)
 irqreturn_t mv_eth_link_isr(int irq, void *dev_id)
 {
 	int port;
-	MV_U32 regVal, isr_ports_mask;
+	MV_U32 regVal, regVal1;
 	struct eth_port *pp;
 
 	regVal = mvEthIsrSummaryCauseGet();
+	/* check only relevant interrupts - ports0 and 1 */
+	regVal &= (ETH_ISR_SUM_PORT0_MASK | ETH_ISR_SUM_PORT1_MASK);
 
 	mvEthIsrSummaryMask();
 
-	isr_ports_mask = ETH_ISR_SUM_PORT_MASK(regVal);
-
 	for (port = 0; port < mv_eth_ports_num; port++) {
 		/* check if interrupt was caused by this port */
-		if (!(port & isr_ports_mask))
+		if (!(ETH_ISR_SUM_PORT_MASK(port) & regVal))
 			continue;
 
-		regVal = mvEthPortIsrCauseGet(port);
+		regVal1 = mvEthPortIsrCauseGet(port);
+
 		/* check for link change interrupt */
-		if (!(regVal & ETH_PORT_LINK_CHANGE_MASK))
+		if (!(regVal1 & ETH_PORT_LINK_CHANGE_MASK)) {
+			mvEthPortIsrUnmask(port);
 			continue;
+		}
 
 		pp = mv_eth_port_by_id(port);
 		if (pp)
@@ -2993,6 +2997,8 @@ static int	mv_eth_shared_probe(void)
 	if (request_irq(IRQ_GLOBAL_GOP, mv_eth_link_isr, (IRQF_DISABLED|IRQF_SAMPLE_RANDOM), "mv_eth_link", NULL))
 		printk(KERN_ERR "%s: Could not request IRQ for GOP interrupts\n", __func__);
 
+	mvEthIsrSummaryUnmask();
+
 	mv_eth_initialized = 1;
 	return 0;
 
@@ -3658,6 +3664,9 @@ int mv_eth_start_internals(struct eth_port *pp, int mtu)
 		set_bit(MV_ETH_F_LINK_UP_BIT, &(pp->flags));
 	}
 #endif /* CONFIG_MV_PON */
+	else
+		clear_bit(MV_ETH_F_LINK_UP_BIT, &(pp->flags));
+
 	set_bit(MV_ETH_F_STARTED_BIT, &(pp->flags));
  out:
 	return err;
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h
index 69b3d45..4518193 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h
@@ -112,8 +112,7 @@ static INLINE void mvEthIsrSummaryMask(MV_VOID)
 
 static INLINE void mvEthIsrSummaryUnmask(MV_VOID)
 {
-	MV_REG_WRITE(ETH_ISR_SUM_MASK_REG, ETH_ISR_SUM_PORTS_MASK | ETH_ISR_SUM_PORT0_MASK |
-							ETH_ISR_SUM_PORT1_MASK | ETH_ISR_SUM_PORT2_MASK);
+	MV_REG_WRITE(ETH_ISR_SUM_MASK_REG, ETH_ISR_SUM_PORT0_MASK | ETH_ISR_SUM_PORT1_MASK | 0x20/*magic bit*/);
 }
 
 static INLINE MV_U32 mvEthIsrSummaryCauseGet(MV_VOID)
@@ -126,6 +125,16 @@ static INLINE MV_U32 mvEthPortIsrCauseGet(int port)
 	return MV_REG_READ(ETH_PORT_ISR_CAUSE_REG(port));
 }
 
+static INLINE MV_VOID mvEthPortIsrMask(int port)
+{
+	MV_REG_WRITE(ETH_PORT_ISR_MASK_REG(port), 0);
+}
+
+static INLINE MV_VOID mvEthPortIsrUnmask(int port)
+{
+	MV_REG_WRITE(ETH_PORT_ISR_MASK_REG(port), ETH_PORT_LINK_CHANGE_MASK);
+}
+
 void mvEthPortEnable(int port);
 void mvEthPortDisable(int port);
 MV_BOOL mvEthPortIsLinkUp(int port);
-- 
1.7.5.4

