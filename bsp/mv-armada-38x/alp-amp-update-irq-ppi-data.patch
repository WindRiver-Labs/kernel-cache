From 10d84fffbf37414c21b6ebca8afe2c6ae05ca84e Mon Sep 17 00:00:00 2001
From: Eran Ben-Avi <benavi@marvell.com>
Date: Thu, 10 Oct 2013 18:58:20 +0300
Subject: [PATCH 1012/1825] alp: amp: update irq ppi data

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 17f9e2196357898962be0dfd5b18b246a4d7eab5

Change-Id: Ia64d457b0c7f06a603e93c64bff7e731afaede24
Signed-off-by: Eran Ben-Avi <benavi@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/3679
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/irq.c |   33 ++++++++++++++++++++++++---------
 1 files changed, 24 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-avantalp/irq.c b/arch/arm/mach-avantalp/irq.c
index 5341ae5..2a2e25d 100644
--- a/arch/arm/mach-avantalp/irq.c
+++ b/arch/arm/mach-avantalp/irq.c
@@ -18,6 +18,7 @@
 #include "ca9x2.h"
 #include "mvOs.h"
 #include "gpp/mvGppRegs.h"
+#include "cpu/mvCpu.h"
 
 /* CPU-shared registers  */
 #define SOC_LOCAL_SUM_CAUSE		0x20260
@@ -26,9 +27,9 @@
 /*
  * CPU-private registers
  */
-#define SOC_PPI_CAUSE			0x21880
-#define SOC_PPI_MASK_SET		0x218b8
-#define SOC_PPI_MASK_CLEAR		0x218bc
+#define SOC_PPI_CAUSE(cpu)		(MV_CPUIF_REGS_BASE(cpu) | (0x80))
+#define SOC_PPI_MASK_SET(cpu)		(MV_CPUIF_REGS_BASE(cpu) | CPU_INT_SET_MASK_OFFS)
+#define SOC_PPI_MASK_CLEAR(cpu)		(MV_CPUIF_REGS_BASE(cpu) | CPU_INT_CLEAR_MASK_OFFS)
 #define SOC_PPI_CAUSE_BITS		0x1fffffff
 
 #define SOC_LOCAL_SUM_MASK		0x218c4
@@ -257,11 +258,20 @@ alp_cascade_irq_local_summary(int chained_irq, int irq, int nr_irqs)
 /*******************************************************************************
  * CPU-private Peripherals interrupts (PPI)
  */
-static struct alp_irq_chip_data alp_ppi_chip_data = {
+static struct alp_irq_chip_data alp_ppi_chip_data_g0 = {
 	.regs = {
-		.cause	= INTER_REGS_VIRT_BASE + SOC_PPI_CAUSE,
-		.mask	= INTER_REGS_VIRT_BASE + SOC_PPI_MASK_SET,
-		.unmask	= INTER_REGS_VIRT_BASE + SOC_PPI_MASK_CLEAR,
+		.cause	= INTER_REGS_VIRT_BASE + SOC_PPI_CAUSE(0),
+		.mask	= INTER_REGS_VIRT_BASE + SOC_PPI_MASK_SET(0),
+		.unmask	= INTER_REGS_VIRT_BASE + SOC_PPI_MASK_CLEAR(0),
+	},
+	.mask = SOC_PPI_CAUSE_BITS,
+};
+
+static struct alp_irq_chip_data alp_ppi_chip_data_g1 = {
+	.regs = {
+		.cause	= INTER_REGS_VIRT_BASE + SOC_PPI_CAUSE(1),
+		.mask	= INTER_REGS_VIRT_BASE + SOC_PPI_MASK_SET(1),
+		.unmask	= INTER_REGS_VIRT_BASE + SOC_PPI_MASK_CLEAR(1),
 	},
 	.mask = SOC_PPI_CAUSE_BITS,
 };
@@ -291,7 +301,7 @@ static struct irq_chip alp_ppi_irq_chip = {
 
 static void alp_ppi_handle_cascade_irq(u32 irq, struct irq_desc *desc)
 {
-	struct alp_irq_chip_data *chd = &alp_ppi_chip_data;
+	struct alp_irq_chip_data *chd = irq_get_chip_data(IRQ_START_PRIV_SOC_PPI);
 	u32 cause, virt_irq;
 
 	chained_irq_enter(irq_get_chip(irq), desc);
@@ -331,7 +341,12 @@ static struct irq_domain_ops alp_ppi_irq_domain_ops = {
 static void __init
 alp_cascade_irq_ppi(int chained_irq, int irq, int nr_irqs)
 {
-	struct alp_irq_chip_data *chd = &alp_ppi_chip_data;
+	struct alp_irq_chip_data *chd;
+
+	if (whoAmI())
+		chd = &alp_ppi_chip_data_g1;
+	else
+		chd = &alp_ppi_chip_data_g0;
 
 	chd->irq_base = irq_alloc_descs(-1, irq, nr_irqs, 0);
 	if (IS_ERR_VALUE(chd->irq_base))
-- 
1.7.5.4

