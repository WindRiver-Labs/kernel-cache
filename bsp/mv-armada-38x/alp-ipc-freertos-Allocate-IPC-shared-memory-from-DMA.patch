From 56054775d0c326f7b6d84992d53ce05ce987f42c Mon Sep 17 00:00:00 2001
From: Piotr Ziecik <kosmo@semihalf.com>
Date: Wed, 30 Apr 2014 15:03:31 +0200
Subject: [PATCH 1618/1825] alp: ipc: freertos: Allocate IPC shared memory
 from DMA zone.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit e6b016a435b3e3d883923d680be726440ea986eb

	The IPC memory is now dynamically allocated from predefined area
	of system memory. Manual IPC shared memory selection using kernel
	arguments is no longer needed.

Change-Id: I0771dc183a2304e15ac1aecea67ca762cd479d6d
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7858
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_ipc/linux_freertos/mv_ipc_common.c          |    6 +-
 .../mv_ipc/linux_freertos/mv_ipc_common.h          |    2 -
 .../mv_ipc/linux_freertos/mv_ipc_node.h            |   12 +---
 .../mv_ipc/linux_freertos/mv_ipc_os.c              |   61 ++++++++++++++++----
 .../mv_ipc/linux_freertos/mv_ipc_os.h              |    4 +-
 5 files changed, 55 insertions(+), 30 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.c
index 928ebe6..4d6e7d3 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.c
@@ -93,9 +93,7 @@ MV_VOID *mvIpcGetShmemAddr(MV_U32 link)
 /*Return Shared memory Phys base size*/
 MV_U32 mvIpcGetShmemBaseAddr(MV_U32 link)
 {
-	MV_IPC_LINK_INFO *str = &mv_ipc_link_info_array[link];
-
-	return str->shmemAddr;
+	return mvIpcOsGetPhysBase(link);
 }
 
 /*Return Shared memory Virtual base size*/
@@ -153,7 +151,7 @@ MV_STATUS mvIpcCommonInit(void)
 
 	/* Initialize shared memory*/
 	for (link = 0; link < mvIpcGetNumOfLinks(); link++)
-		mvIpcOsSharedStack(link, mvIpcGetShmemBaseAddr(link), mvIpcGetShmemSize(link));
+		mvIpcOsInitSharedStack(link, mvIpcGetShmemSize(link));
 
 	for (link = 0; link < mvIpcGetNumOfLinks(); link++) {
 		mvIpcDoorbellInit(link);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.h
index c6cf3ac..ab2312d 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_common.h
@@ -42,8 +42,6 @@ typedef struct __ipc_link_info_struct {
 	MV_U32 numOfChannels;
 	MV_BOOL isMaster;
 	MV_U32 remoteNodeId;
-	MV_VOID *shmemVirtAddr;
-	MV_U32 shmemAddr;
 	MV_U32 shmemSize;
 } MV_IPC_LINK_INFO;
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_node.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_node.h
index e0bbbaa..f1e3d69 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_node.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_node.h
@@ -58,19 +58,11 @@ register channel is interrupt and channel enable function*/
 {mvIpcSendDoorbell, registerChnInISRDoorbell},   /*MV_IPC_HW_LAYER_INTERRUPT_ISR*/\
 };
 
-/*Link info array*/
-#ifdef CONFIG_ARCH_AVANTA_LP
-#define MV_IPC_SHARED_MEM_REGION_BASE 0x10000000
-#endif
-#ifdef CONFIG_ARCH_ARMADA_XP
-#define MV_IPC_SHARED_MEM_REGION_BASE 0x60000000
-#endif
-/*numOfChn	isMaster, remoteNodeId, shmemAddr,						shmemSize*/
+/* numOfChn, isMaster, remoteNodeId, shmemSize */
 #define MV_IPC_LINK_INFO_TABLE {\
-	{4,		MV_TRUE,	2,		NULL,	MV_IPC_SHARED_MEM_REGION_BASE,	0x100000},\
+	{4,		MV_TRUE,	2,	0x40000},\
 };
 
-
 /*Division of free malloc area between master and slave*/
 #define MV_IPC_MASTER_FREE_REGION_PERCENT_TBL { \
 	50		\
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.c
index e0e4e3e..e68fa11 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.c
@@ -39,6 +39,7 @@
 #include <linux/etherdevice.h>
 #include <linux/init.h>
 #include <linux/moduleparam.h>
+#include <linux/vmalloc.h>
 #include <asm/irq_regs.h>
 
 #include "mvDebug.h"
@@ -71,26 +72,52 @@ MV_U8 **enabledChannels;
  * ipc_init_shared_stack()                                                     *
  *   Initialize the shared stack used for communication
  ******************************************************************************/
-int mvIpcOsSharedStack(unsigned int link, unsigned int sh_phys_base,
-		       unsigned int sh_mem_size)
+int mvIpcOsInitSharedStack(unsigned int link, unsigned int sh_mem_size)
 {
-	mv_ipc_sh_mem_base[link] = sh_phys_base;
-	mv_ipc_sh_mem_size[link] = sh_mem_size;
+	unsigned int pagecount = PAGE_ALIGN(sh_mem_size) >> PAGE_SHIFT;
+	unsigned int order = get_order(sh_mem_size);
+	struct page **pages;
+	struct page *page;
+	unsigned int i;
+
+	pages = kmalloc(pagecount * sizeof(struct page *), GFP_KERNEL);
+	if (!pages)
+		goto error;
+
+	page = alloc_pages(GFP_KERNEL | GFP_DMA, order);
+	if (!page) {
+		kfree(pages);
+		goto error;
+	}
+
+	split_page(page, order);
+	for (i = 0; i < (1 << order); i++) {
+		if (i < pagecount)
+			pages[i] = page + i;
+		else
+			__free_page(page + i);
+	}
 
-	/* Map shared memory and initialize shared stack */
-	sh_virt_base[link]  = ioremap(sh_phys_base, sh_mem_size);
+	sh_virt_base[link] = vmap(pages, pagecount, VM_MAP, pgprot_noncached(pgprot_kernel));
+	kfree(pages);
 	if (!sh_virt_base[link]) {
-		printk(KERN_ERR "IPC: Unable to map physical shared mem block (%#010x - %#010x)\n",
-		       sh_phys_base, sh_phys_base + sh_mem_size);
-		return 0;
+		for (i = 0; i < pagecount; i++)
+			__free_page(page + i);
+		goto error;
 	}
 
-	virt_phys_offset[link] = (unsigned int)sh_virt_base[link] - sh_phys_base;
+	mv_ipc_sh_mem_base[link] = page_to_phys(page);
+	mv_ipc_sh_mem_size[link] = sh_mem_size;
 
-	ipc_debug(KERN_INFO "IPC: Remaped Shared memory PA %#010x to VA %#010x\n",
-		  (unsigned int)sh_phys_base, (unsigned int)sh_virt_base[link]);
+	virt_phys_offset[link] = (unsigned int)sh_virt_base[link] - mv_ipc_sh_mem_base[link];
+	ipc_debug(KERN_INFO "IPC: Allocated Shared memory PA/VA %#010x/%#010x, size %#010x\n",
+		  (unsigned int)mv_ipc_sh_mem_base[link], (unsigned int)sh_virt_base[link], sh_mem_size);
 
 	return 1;
+
+error:
+	printk(KERN_ERR "IPC: Unable to allocate shared mem block!\n");
+	return 0;
 }
 
 /*******************************************************************************
@@ -133,6 +160,16 @@ void *mvIpcOsGetVirtBase(unsigned int link)
 }
 
 /*******************************************************************************
+ * ipc_get_phys_base()                                                         *
+ *   Physical address of the base of shared stack
+ ******************************************************************************/
+unsigned int mvIpcOsGetPhysBase(unsigned int link)
+{
+	return mv_ipc_sh_mem_base[link];
+}
+
+
+/*******************************************************************************
  * mvOsSync()                                                                  *
  *   Barrier/ cache invalidate function
  ******************************************************************************/
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.h
index d4c3a00..e49d338 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_ipc/linux_freertos/mv_ipc_os.h
@@ -30,8 +30,8 @@
 #define __mv_ipc_os_h
 
 void *mvIpcOsGetVirtBase(unsigned int link);
-int mvIpcOsSharedStack(unsigned int link, unsigned int sh_phys_base,
-		       unsigned int sh_mem_size);
+unsigned int mvIpcOsGetPhysBase(unsigned int link);
+int mvIpcOsInitSharedStack(unsigned int link, unsigned int sh_mem_size);
 void mvOsSync(void);
 
 void *mvIpcOsVirt2Phys(unsigned int link, void *virt_addr);
-- 
1.7.5.4

