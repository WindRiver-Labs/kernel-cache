From 419ad104a4a2fff415c625c919abe7eb3c15b6a8 Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Wed, 24 Oct 2012 10:40:43 +0200
Subject: [PATCH 0264/1825] NETA: pppoe fixes for NFPv2

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit f62bbb607b7b27e5255d7622c7259f614b946b8f

Change-Id: I2398c123da572ff318a77146594ae64324e53ece
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ppp/ppp_generic.c |    6 ---
 drivers/net/ppp/pppoe.c       |   93 ++++++++++++++++++++++++++++++++++++----
 include/linux/mv_nfp.h        |    5 +-
 3 files changed, 85 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ppp/ppp_generic.c b/drivers/net/ppp/ppp_generic.c
index bfb62cc..f679209 100644
--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -2841,12 +2841,6 @@ ppp_connect_channel(struct channel *pch, int unit)
 	atomic_inc(&ppp->file.refcnt);
 	ppp_unlock(ppp);
 	ret = 0;
-
-#if defined(CONFIG_MV_ETH_NFP_LEARN) || defined(CONFIG_MV_ETH_NFP_LEARN_MODULE)
-	if (nfp_mgr_p->nfp_hook_ppp_complete)
-		nfp_mgr_p->nfp_hook_ppp_complete((u32)pch->chan, ppp->dev);
-#endif /* CONFIG_MV_ETH_NFP_LEARN || CONFIG_MV_ETH_NFP_LEARN_MODULE */
-
 outl:
 	write_unlock_bh(&pch->upl);
  out:
diff --git a/drivers/net/ppp/pppoe.c b/drivers/net/ppp/pppoe.c
index 7c921f0..795b0c5 100644
--- a/drivers/net/ppp/pppoe.c
+++ b/drivers/net/ppp/pppoe.c
@@ -77,6 +77,7 @@
 #include <linux/file.h>
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/if_arp.h>
 
 #include <linux/nsproxy.h>
 #include <linux/mv_nfp.h>
@@ -350,6 +351,39 @@ static int pppoe_device_event(struct notifier_block *this,
 
 	/* Only look at sockets that are using this specific device. */
 	switch (event) {
+#if defined(CONFIG_MV_ETH_NFP_PPP_LEARN)
+	case NETDEV_UP: {
+		struct net_device *ppp_netdev;
+		struct pppoe_net *pn;
+		int i;
+
+		if (!(dev->type == ARPHRD_PPP))
+			break;
+
+		pn = pppoe_pernet(&init_net);
+		write_lock_bh(&pn->hash_lock);
+		for (i = 0; i < PPPOE_HASH_SIZE; i++) {
+			struct pppox_sock *po = pn->hash_table[i];
+
+			while (po) {
+				if ((ppp_dev_name(&po->chan) != NULL)
+					&& (!strcmp(ppp_dev_name(&po->chan), dev->name))) {
+					ppp_netdev = dev_get_by_name(&init_net, ppp_dev_name(&po->chan));
+					if (nfp_mgr_p->nfp_hook_ppp_add)
+						nfp_mgr_p->nfp_hook_ppp_add(ppp_netdev->ifindex,
+									po->pppoe_dev->ifindex, po->pppoe_pa.sid,
+									po->pppoe_pa.remote);
+					dev_put(ppp_netdev);
+					break;
+				}
+				po = po->next;
+			}
+		}
+		write_unlock_bh(&pn->hash_lock);
+	}
+	break;
+#endif /* CONFIG_MV_ETH_NFP_PPP_LEARN */
+
 	case NETDEV_CHANGEADDR:
 	case NETDEV_CHANGEMTU:
 		/* A change in mtu or address is a bad thing, requiring
@@ -583,6 +617,20 @@ static int pppoe_release(struct socket *sock)
 		po->pppoe_dev = NULL;
 	}
 
+#if defined(CONFIG_MV_ETH_NFP_PPP_LEARN)
+	if (ppp_dev_name(&po->chan)) {
+		struct net_device *ppp_netdev = NULL;
+		int ppp_netdev_ifindex = 0;
+
+		ppp_netdev = dev_get_by_name(&init_net, ppp_dev_name(&po->chan));
+		ppp_netdev_ifindex = ppp_netdev->ifindex;
+		dev_put(ppp_netdev);
+		if (nfp_mgr_p->nfp_hook_ppp_del)
+			nfp_mgr_p->nfp_hook_ppp_del(ppp_netdev_ifindex);
+	}
+
+#endif
+
 	pppox_unbind_sock(sk);
 
 	/* Signal the death of the socket. */
@@ -591,11 +639,6 @@ static int pppoe_release(struct socket *sock)
 	net = sock_net(sk);
 	pn = pppoe_pernet(net);
 
-#if defined(CONFIG_MV_ETH_NFP_LEARN) || defined(CONFIG_MV_ETH_NFP_LEARN_MODULE)
-	if (nfp_mgr_p->nfp_hook_ppp_info_del)
-		nfp_mgr_p->nfp_hook_ppp_info_del((u32)&po->chan);
-#endif /* CONFIG_MV_ETH_NFP_LEARN || CONFIG_MV_ETH_NFP_LEARN_MODULE */
-
 	/*
 	 * protect "po" from concurrent updates
 	 * on pppoe_flush_dev
@@ -702,11 +745,6 @@ static int pppoe_connect(struct socket *sock, struct sockaddr *uservaddr,
 
 		sk->sk_state = PPPOX_CONNECTED;
 
-#if defined(CONFIG_MV_ETH_NFP_LEARN) || defined(CONFIG_MV_ETH_NFP_LEARN_MODULE)
-	if (nfp_mgr_p->nfp_hook_ppp_half_set)
-		nfp_mgr_p->nfp_hook_ppp_half_set(sp->sa_addr.pppoe.sid, (u32)&po->chan, dev, po->pppoe_pa.remote);
-#endif /* CONFIG_MV_ETH_NFP_LEARN || CONFIG_MV_ETH_NFP_LEARN_MODULE */
-
 	}
 
 	po->num = sp->sa_addr.pppoe.sid;
@@ -1143,6 +1181,41 @@ static const struct pppox_proto pppoe_proto = {
 	.owner	= THIS_MODULE,
 };
 
+#if defined(CONFIG_MV_ETH_NFP_PPP_LEARN)
+void nfp_ppp_sync(void)
+{
+	int i;
+	struct pppoe_net *pn = pppoe_pernet(&init_net);
+	struct net_device *ppp_netdev = NULL;
+	struct pppox_sock *po = NULL;
+
+	rtnl_lock();
+
+	write_lock_bh(&pn->hash_lock);
+	for (i = 0; i < PPPOE_HASH_SIZE; i++) {
+		po = pn->hash_table[i];
+
+		while (po) {
+			if (ppp_dev_name(&po->chan) != NULL) {
+				ppp_netdev = dev_get_by_name(&init_net, ppp_dev_name(&po->chan));
+				if (nfp_mgr_p->nfp_hook_ppp_add)
+					nfp_mgr_p->nfp_hook_ppp_add(ppp_netdev->ifindex,
+							po->pppoe_dev->ifindex,
+							po->pppoe_pa.sid,
+							po->pppoe_pa.remote);
+				dev_put(ppp_netdev);
+				}
+			po = po->next;
+		}
+	}
+	write_unlock_bh(&pn->hash_lock);
+
+	rtnl_unlock();
+}
+EXPORT_SYMBOL(nfp_ppp_sync);
+
+#endif /* CONFIG_MV_ETH_NFP_PPP_LEARN */
+
 static __net_init int pppoe_init_net(struct net *net)
 {
 	struct pppoe_net *pn = pppoe_pernet(net);
diff --git a/include/linux/mv_nfp.h b/include/linux/mv_nfp.h
index b551ac2..eec1405 100644
--- a/include/linux/mv_nfp.h
+++ b/include/linux/mv_nfp.h
@@ -118,9 +118,8 @@ struct nfp_hook_ops {
 	int (*nfp_hook_vlan_add)(int if_index, struct net_device *dev, int real_if_index, int vlan_id);
 	int (*nfp_hook_vlan_del)(int if_index);
 
-	int (*nfp_hook_ppp_info_del)(u32 channel);
-	int (*nfp_hook_ppp_half_set)(u16 sid, u32 chan, struct net_device *eth_dev, char *remoteMac);
-	int (*nfp_hook_ppp_complete)(u32 chan, struct net_device *ppp_dev);
+	int (*nfp_hook_ppp_add)(int ppp_if, int eth_iif, u16 sid, u8 *remote_mac);
+	int (*nfp_hook_ppp_del)(int ppp_iif);
 
 	int (*nfp_hook_ct_del)(int family, u8 *src_l3, u8 *dst_l3, u16 sport, u16 dport, u8 proto);
 	int (*nfp_hook_ct_age)(int family, u8 *src_l3, u8 *dst_l3, u16 sport, u16 dport, u8 proto);
-- 
1.7.5.4

