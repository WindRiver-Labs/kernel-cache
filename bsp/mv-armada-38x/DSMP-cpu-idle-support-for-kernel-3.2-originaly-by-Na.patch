From 67e8bc6c6c1e8446ccabacdaf2e64119fc258977 Mon Sep 17 00:00:00 2001
From: Tawfik Bayouk <tawfik@marvell.com>
Date: Tue, 21 Aug 2012 17:34:44 +0300
Subject: [PATCH 0134/1825] DSMP cpu idle support for kernel 3.2 ( originaly
 by Nadav H.)

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 067c809703cdf2b23470ddbb8c4637e560b565e5

Change-Id: I44a82b8ad5d80931b35d2c3b6b999de0ca5783a9
Signed-off-by: Tawfik Bayouk <tawfik@marvell.com>
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/cpuidle.c |   86 ++++++++++++++++++++++------------------
 1 files changed, 47 insertions(+), 39 deletions(-)

diff --git a/arch/arm/plat-armada/cpuidle.c b/arch/arm/plat-armada/cpuidle.c
index c02bddd..7d3a8ca 100644
--- a/arch/arm/plat-armada/cpuidle.c
+++ b/arch/arm/plat-armada/cpuidle.c
@@ -413,19 +413,22 @@ static int mv_cpu_idle_read(char *buffer, char **buffer_location, off_t offset,
  */
 int armadaxp_init_cpuidle(void)
 {
+	struct cpuidle_driver *driver =&armadaxp_idle_driver;
 	struct cpuidle_device *device;
 	int i;
+
 	device_registered = 1;
 	printk("Initializing Armada-XP CPU power management ");
 
 	if (build_identity_page_table()) {
 		printk(KERN_ERR "armadaxp_init_cpuidle: Failed to build identity page table\n");
-                return -ENOMEM;
-        }
-	struct cpuidle_driver *driver =&armadaxp_idle_driver;
+		return -ENOMEM;
+	}
 
 	armadaxp_fabric_setup_deepIdle();
 
+	driver->safe_state_index = -1;
+
 #ifdef CONFIG_MV_PMU_PROC
 	/* Create proc entry. */
 	cpu_idle_proc = create_proc_entry("cpu_idle", 0666, NULL);
@@ -433,6 +436,7 @@ int armadaxp_init_cpuidle(void)
 	cpu_idle_proc->write_proc = mv_cpu_idle_write;
 	cpu_idle_proc->nlink = 1;
 #endif
+
 	if (pm_support == WFI)
 		printk(" (WFI)\n");
 	else if (pm_support == DEEP_IDLE)
@@ -445,44 +449,48 @@ int armadaxp_init_cpuidle(void)
 	}
 	pm_mode = pm_support;
 
-	for_each_online_cpu(i) {
-		device = &per_cpu(armadaxp_cpuidle_device, i);
-		device->cpu = i;
-		device->state_count = pm_support; //ARMADAXP_IDLE_STATES;
-		/* Wait for interrupt state */
-		driver->states[0].enter = armadaxp_enter_idle;
-		driver->states[0].exit_latency = 1;             /* Few CPU clock cycles */
-		driver->states[0].target_residency = 10;
-		driver->states[0].flags = CPUIDLE_FLAG_TIME_VALID;
-		strcpy(driver->states[0].name, "WFI");
-		strcpy(driver->states[0].desc, "Wait for interrupt");
-
-		/* Deep Idle Mode */
-		driver->states[1].enter = armadaxp_enter_idle;
-		driver->states[1].exit_latency = 100;
-		driver->states[1].target_residency = 1000;
-		driver->states[1].flags = CPUIDLE_FLAG_TIME_VALID;
-		strcpy(driver->states[1].name, "DEEP IDLE");
-		strcpy(driver->states[1].desc, "Deep Idle");
-
-		/* Snooze - Deep Deep Idle Mode */
-                driver->states[2].enter = armadaxp_enter_idle;
-                driver->states[2].exit_latency = 1000;
-                driver->states[2].target_residency = 10000;
-                driver->states[2].flags = CPUIDLE_FLAG_TIME_VALID;
-                strcpy(driver->states[2].name, "SNOOZE");
-                strcpy(driver->states[2].desc, "Snooze");
-
-                if(pm_mode) {
-			 cpuidle_register_driver(driver);
-                        if (cpuidle_register_device(device)) {
-                                printk(KERN_ERR "armadaxp_init_cpuidle: Failed registering\n");
-                                return -EIO;
-                        }
-			//			cpuidle_register_driver(driver);
+/* Set cpuidle driver */
+       driver->state_count = pm_support;
+       driver->safe_state_index = 0;
+       /* Wait for interrupt state */
+       driver->states[0].enter = armadaxp_enter_idle;
+       driver->states[0].exit_latency = 1;             /* Few CPU clock cycles */
+       driver->states[0].target_residency = 10;
+       driver->states[0].flags = CPUIDLE_FLAG_TIME_VALID;
+       strcpy(driver->states[0].name, "WFI");
+       strcpy(driver->states[0].desc, "Wait for interrupt");
+       /* Deep Idle Mode */
+       driver->states[1].enter = armadaxp_enter_idle;
+       driver->states[1].exit_latency = 100;
+       driver->states[1].target_residency = 1000;
+       driver->states[1].flags = CPUIDLE_FLAG_TIME_VALID;
+       strcpy(driver->states[1].name, "DEEP IDLE");
+       strcpy(driver->states[1].desc, "Deep Idle");
+       /* Snooze - Deep Deep Idle Mode */
+       driver->states[2].enter = armadaxp_enter_idle;
+       driver->states[2].exit_latency = 1000;
+       driver->states[2].target_residency = 10000;
+       driver->states[2].flags = CPUIDLE_FLAG_TIME_VALID;
+       strcpy(driver->states[2].name, "SNOOZE");
+       strcpy(driver->states[2].desc, "Snooze");
+
+       if(pm_mode) {
+               if (cpuidle_register_driver(driver)) {
+                       printk(KERN_ERR "armadaxp_init_cpuidle: register driver failed\n");
+                       return -EIO;
 		}
-	}
 
+	for_each_online_cpu(i) {
+                       device = &per_cpu(armadaxp_cpuidle_device, i);
+                       device->cpu = i;
+                       device->state_count = pm_support;
+
+                       if (cpuidle_register_device(device)) {
+                               printk(KERN_ERR "CPUidle register device failed\n,");
+                               return -EIO;
+                       }
+               }
+       }
 	return 0;
 }
 
-- 
1.7.5.4

