From be059adba64576d8603332f9f3e5f4453572c6c0 Mon Sep 17 00:00:00 2001
From: Jing Hua <jinghua@marvell.com>
Date: Mon, 9 Jun 2014 18:07:44 +0800
Subject: [PATCH 1718/1825] alp: tpm: add new Multicast API to remove rule by
 match key for ZTE

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit d975aa2df5b67e09cc251fa9ae9c00727f7a1e92

	add new Multicast API mv_tpm_mc_flow_del_by_key for ZTE, to remove
	hardware forward rules from matching key on which the rule is created
	with. TPM has the API to remove multicast HWF rule by rule_id which is
	generated by TPM API when adding the rule, but ZTE requests to remove
	it by key, not rule_id.

Change-Id: Ie3236598bba3b1d58fa56e947ce69b6884b3b6fe
Signed-off-by: Jing Hua <jinghua@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8429
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Evan Wang <xswang@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_tpm/inc/tpm_api.h            |   16 ++++++
 .../mv_drivers_lsp/mv_tpm/inc/tpm_device.h         |    1 +
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_api.c       |   29 ++++++++++
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c    |    3 +
 .../mv_tpm/src/sysfs/tpm_sysfs_api.c               |   57 +++++++++++++++++++-
 5 files changed, 104 insertions(+), 2 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_api.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_api.h
index 12f727b..050fac8 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_api.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_api.h
@@ -363,6 +363,22 @@ int mv_tpm_mc_flow_add(struct tpm_pkt_key_t	*match_key,
 int mv_tpm_mc_flow_del(unsigned int	rule_id);
 
 /*******************************************************************************
+* mv_tpm_mc_flow_del_by_key()
+*
+* DESCRIPTION: API deletes an multicast rule by matching key
+*
+* INPUTS:
+*	match_key	- Key of the rule to delete.
+*
+* OUTPUTS:
+*	None
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_error_code_t.
+*******************************************************************************/
+int mv_tpm_mc_flow_del_by_key(struct tpm_pkt_key_t *match_key);
+
+/*******************************************************************************
 * mv_tpm_mc_flow_del_all()
 *
 * DESCRIPTION: API deletes all multicast rules
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_device.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_device.h
index 5ff83b7..86e4974 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_device.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_device.h
@@ -177,6 +177,7 @@ enum tpm_ioctl_acl_rule_cmd_type_t {
 	TPM_IOCTL_ACL_FILTER_DEF_CNTR_GET,
 	TPM_IOCTL_ACL_MTM_ADD,
 	TPM_IOCTL_ACL_MTM_DEL,
+	TPM_IOCTL_ACL_MC_FLOW_DEL_BY_KEY,
 };
 
 enum tpm_ioctl_pp_cmd_type_t {
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_api.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_api.c
index 1b90512..c9a4229 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_api.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_api.c
@@ -546,6 +546,35 @@ int mv_tpm_mc_flow_del(unsigned int	rule_id)
 }
 
 /*******************************************************************************
+* mv_tpm_mc_flow_del_by_key()
+*
+* DESCRIPTION: API deletes an multicast rule by matching key
+*
+* INPUTS:
+*	match_key	- Key of the rule to delete.
+*
+* OUTPUTS:
+*	None
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_error_code_t.
+*******************************************************************************/
+int mv_tpm_mc_flow_del_by_key(struct tpm_pkt_key_t *match_key)
+{
+	int rc = TPM_OK;
+	int rule_id;
+
+	/* get rule_id first */
+	rc = tpm_mng_rule_id_get(TPM_API_PRIVATE_MC_DS, match_key, &rule_id);
+	IF_ERROR_STR(TPM_API_MOD, rc, "fail to get rule_id, ret(%d)\n", rc);
+
+	rc = tpm_mng_mc_flow_del(rule_id);
+	IF_ERROR_STR(TPM_API_MOD, rc, "fail to del multicast rule[%d]\n", rule_id);
+
+	return rc;
+}
+
+/*******************************************************************************
 * mv_tpm_mc_flow_del_all()
 *
 * DESCRIPTION: API deletes all multicast rules
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c
index 0cfee16..aa907f5 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c
@@ -583,6 +583,9 @@ static int tpm_cdev_acl_rule_ioctl(struct tpm_ioctl_acl_rule_t *tpm_ioctl_acl_ru
 	case TPM_IOCTL_ACL_MC_FLOW_DEL:
 		ret = mv_tpm_mc_flow_del(tpm_ioctl_acl_rule->rule_id);
 		break;
+	case TPM_IOCTL_ACL_MC_FLOW_DEL_BY_KEY:
+		ret = mv_tpm_mc_flow_del_by_key(&tpm_ioctl_acl_rule->rule_add_para.match_key);
+		break;
 	case TPM_IOCTL_ACL_MC_FLOW_DEL_ALL:
 		ret = mv_tpm_mc_flow_del_all();
 		break;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
index f95ec4b..f594d1b 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
@@ -584,6 +584,37 @@ int mv_tpm_mc_flow_del_bounce(unsigned int	rule_id)
 
 
 /*******************************************************************************
+* mv_tpm_mc_flow_del_by_key_bounce()
+*
+* DESCRIPTION: MV_TPM_SFS_2_IOCTL API, passes parameters to user space to delete an multicast rule
+*
+* INPUTS:
+*	rule_id     - Rule to delete
+*
+* OUTPUTS:
+*	None
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_error_code_t.
+*******************************************************************************/
+int mv_tpm_mc_flow_del_by_key_bounce(struct tpm_pkt_key_t	match_key)
+{
+	struct tpm_ioctl_acl_rule_t	*tpm_ioctl_acl_rule = &tpm_sfs_2_ioctl_command.tpm_ioctl_acl_rule;
+
+	tpm_sfs_2_ioctl_command.cmd			= MV_TPM_IOCTL_ACL_RULE_SECTION;
+	tpm_ioctl_acl_rule->cmd			= TPM_IOCTL_ACL_MC_FLOW_DEL_BY_KEY;
+	if (NULL != match_key) {
+		memcpy(&(tpm_ioctl_acl_rule->rule_add_para.match_key),
+			(void *)match_key,
+			sizeof(tpm_ioctl_acl_rule->rule_add_para.match_key));
+	}
+
+	up(&tpm_sfs_2_ioctl_sem);
+
+	return TPM_OK;
+}
+
+/*******************************************************************************
 * mv_tpm_mc_flow_del_all_bounce()
 *
 * DESCRIPTION: MV_TPM_SFS_2_IOCTL API, passes parameters to user space to delete all multicast rules
@@ -1309,6 +1340,7 @@ int mv_tpm_mtm_del_bounce(
 #define _mv_tpm_gen_cls_rule_cntr_get		mv_tpm_gen_cls_rule_cntr_get_bounce
 #define _mv_tpm_mc_flow_add			mv_tpm_mc_flow_add_bounce
 #define _mv_tpm_mc_flow_del			mv_tpm_mc_flow_del_bounce
+#define _mv_tpm_mc_flow_del_by_key	mv_tpm_mc_flow_del_by_key_bounce
 #define _mv_tpm_mc_flow_del_all			mv_tpm_mc_flow_del_all_bounce
 #define _mv_tpm_cm_rule_add			mv_tpm_cm_rule_add_bounce
 #define _mv_tpm_cm_rule_del			mv_tpm_cm_rule_del_bounce
@@ -1344,6 +1376,7 @@ int mv_tpm_mtm_del_bounce(
 #define _mv_tpm_gen_cls_rule_cntr_get		mv_tpm_gen_cls_rule_cntr_get
 #define _mv_tpm_mc_flow_add			mv_tpm_mc_flow_add
 #define _mv_tpm_mc_flow_del			mv_tpm_mc_flow_del
+#define _mv_tpm_mc_flow_del_by_key	mv_tpm_mc_flow_del_by_key
 #define _mv_tpm_mc_flow_del_all			mv_tpm_mc_flow_del_all
 #define _mv_tpm_cm_rule_add			mv_tpm_cm_rule_add
 #define _mv_tpm_cm_rule_del			mv_tpm_cm_rule_del
@@ -1597,6 +1630,7 @@ int tpm_sfs_help_no_rule_add(char *b)
 	o += scnprintf(b+o, s-o, "echo [port_type] [port_id] [rule_type] [parse_rule_bm] [key_name] > no_rule_add_cls_key            - delete CLS rule with Key from hardware\n");
 	o += scnprintf(b+o, s-o, "echo [port_type] [port_id] [rule_type] [parse_rule_bm] [key_name] > no_rule_add_filter_key         - delete filter rule with Key from hardware\n");
 	o += scnprintf(b+o, s-o, "echo [port_type] [port_id] [parse_rule_bm] [key_name]          > no_rule_add_exact_except_key   - delete exact_except rule with Key from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [port_type] [port_id] [parse_rule_bm] [key_name]          > no_rule_add_mc_key             - delete Multicast rule with Key from hardware\n");
 	o += scnprintf(b+o, s-o, "echo [ip_version] [key_name]                                   > no_rule_add_exact_key          - delete exact_match rule with Key from hardware\n");
 
 	return o;
@@ -4600,7 +4634,7 @@ void tpm_sfs_cfg_no_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_m
 	int			parsedargs_max = 0;
 
 	numparms = count_parameters(buf);
-	if (api_type == TPM_API_PUBLIC_EXCT_EXCPT)
+	if (api_type == TPM_API_PUBLIC_EXCT_EXCPT || api_type == TPM_API_PRIVATE_MC_DS)
 		parsedargs_max = l2ruleadd_max - 1;
 	else
 		parsedargs_max = l2ruleadd_max;
@@ -4611,7 +4645,7 @@ void tpm_sfs_cfg_no_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_m
 	}
 
 	/* Get parameters */
-	if (api_type == TPM_API_PUBLIC_EXCT_EXCPT)
+	if (api_type == TPM_API_PUBLIC_EXCT_EXCPT || api_type == TPM_API_PRIVATE_MC_DS)
 		parsedargs = sscanf(buf, "%x %x %x %s",
 				&src_port, &src_port_vir, &parserulebm, l2keyname);
 	else
@@ -4637,6 +4671,8 @@ void tpm_sfs_cfg_no_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_m
 			rc = _mv_tpm_exact_match_except_rule_del(&match_key, rule_idx);
 		else if (api_type == TPM_API_PUBLIC_CLS)
 			rc = _mv_tpm_gen_cls_rule_del(&match_key, rule_idx);
+		else if (api_type == TPM_API_PRIVATE_MC_DS)
+			rc = _mv_tpm_mc_flow_del_by_key(&match_key);
 		else
 			rc = _mv_tpm_filter_rule_del(&match_key, rule_idx);
 
@@ -4736,6 +4772,20 @@ void tpm_sfs_cfg_no_rule_add_mc_set(const char *buf, size_t len)
 		}
 	}
 }
+/*******************************************************************************
+* tpm_sfs_cfg_no_rule_add_mc_key_set
+*
+* DESCRIPTION:
+*           This function deletes a Multicast HW rule
+* INPUTS:
+*       buf	- Shell parameters as char buffer
+*       len - Number of characters in buffer
+*
+*******************************************************************************/
+void tpm_sfs_cfg_no_rule_add_mc_key_set(const char *buf, size_t len)
+{
+	tpm_sfs_cfg_no_cls_cpu_rule_add_set(buf, len, TPM_API_PRIVATE_MC_DS);
+}
 
 /*******************************************************************************
 * tpm_sfs_cfg_no_rule_add_mc_all_set
@@ -6747,6 +6797,7 @@ static struct store_sysfs_name_func_t store_sysfs_name_func_ara[] = {
 	{"no_rule_add_filter_key",		tpm_sfs_cfg_no_rule_add_filter_key_set},
 	{"no_rule_add_exact_except_key",	tpm_sfs_cfg_no_rule_add_exact_except_key_set},
 	{"no_rule_add_exact_key",		tpm_sfs_cfg_no_rule_add_exact_key_set},
+	{"no_rule_add_mc_key",			tpm_sfs_cfg_no_rule_add_mc_key_set},
 	{"cls_rule_cntr_get",			tpm_sfs_cfg_cls_cntr_get},
 	{"filter_rule_cntr_get",		tpm_sfs_cfg_filter_cntr_get},
 	{"filter_def_rule_cntr_get",		tpm_sfs_cfg_filter_def_cntr_get},
@@ -6978,6 +7029,7 @@ static DEVICE_ATTR(exact_rule_cntr_get,         S_IWUSR, tpm_cfg_show, tpm_cfg_s
 static DEVICE_ATTR(mc_rule_add,                 S_IWUSR, tpm_cfg_show, tpm_cfg_store);
 static DEVICE_ATTR(mc_rule_get,                 S_IWUSR, tpm_cfg_show, tpm_cfg_store);
 static DEVICE_ATTR(no_rule_add_mc,              S_IWUSR, tpm_cfg_show, tpm_cfg_store);
+static DEVICE_ATTR(no_rule_add_mc_key,          S_IWUSR, tpm_cfg_show, tpm_cfg_store);
 static DEVICE_ATTR(no_rule_add_mc_all,          S_IWUSR, tpm_cfg_show, tpm_cfg_store);
 
 /* Mod */
@@ -7232,6 +7284,7 @@ static struct attribute *g_tpm_api_mc_sw_attrs[] = {
 	&dev_attr_help_no_rule_add.attr,
 	&dev_attr_help_mc_rule_get.attr,
 	&dev_attr_no_rule_add_mc.attr,
+	&dev_attr_no_rule_add_mc_key.attr,
 	&dev_attr_no_rule_add_mc_all.attr,
 	&dev_attr_mc_rule_add.attr,
 	&dev_attr_mc_rule_get.attr,
-- 
1.7.5.4

