From f25c7578a017c19caafc13edadc2bde94c190637 Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Sun, 21 Oct 2012 13:58:21 +0200
Subject: [PATCH 0291/1825] sflash hal : added 4 cycles support & new macronix
 controller

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 86fe906e4a19ccb514d904e63f4053b179d4563c

Change-Id: I63842cb91b0b49a9a2d7f645dc50753bc6062b3a
Signed-off-by: Omri Itach <omrii@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/sflash/mvSFlash.c     |   84 ++++++++++++++-------
 arch/arm/plat-armada/mv_hal/sflash/mvSFlash.h     |    1 +
 arch/arm/plat-armada/mv_hal/sflash/mvSFlashSpec.h |   24 +++++-
 3 files changed, 79 insertions(+), 30 deletions(-)
 mode change 100644 => 100755 arch/arm/plat-armada/mv_hal/sflash/mvSFlash.c
 mode change 100644 => 100755 arch/arm/plat-armada/mv_hal/sflash/mvSFlash.h
 mode change 100644 => 100755 arch/arm/plat-armada/mv_hal/sflash/mvSFlashSpec.h

diff --git a/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.c b/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.c
old mode 100644
new mode 100755
index 2e8f79a..fdeb6a9
--- a/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.c
+++ b/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.c
@@ -101,7 +101,8 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_M25P32_DEVICE_ID,
      MV_M25P32_MAX_SPI_FREQ,
      MV_M25P32_MAX_FAST_SPI_FREQ,
-     MV_M25P32_FAST_READ_DUMMY_BYTES
+     MV_M25P32_FAST_READ_DUMMY_BYTES,
+     MV_M25P32_ADDR_CYC_CNT
     },
     /* ST M25P64 SPI flash, 8MB, 128 sectors of 64K each */
     {
@@ -125,7 +126,8 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_M25P64_DEVICE_ID,
      MV_M25P64_MAX_SPI_FREQ,
      MV_M25P64_MAX_FAST_SPI_FREQ,
-     MV_M25P64_FAST_READ_DUMMY_BYTES
+     MV_M25P64_FAST_READ_DUMMY_BYTES,
+     MV_M25P64_ADDR_CYC_CNT
     },
     /* ST M25PX64 SPI flash, 8MB, 128 sectors of 64K each */
     {
@@ -149,7 +151,8 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_M25PX64_DEVICE_ID,
      MV_M25PX64_MAX_SPI_FREQ,
      MV_M25PX64_MAX_FAST_SPI_FREQ,
-     MV_M25PX64_FAST_READ_DUMMY_BYTES
+     MV_M25PX64_FAST_READ_DUMMY_BYTES,
+     MV_M25PX64_ADDR_CYC_CNT
     },
 
     /* ST M25P128 SPI flash, 16MB, 64 sectors of 256K each */
@@ -174,7 +177,8 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_M25P128_DEVICE_ID,
      MV_M25P128_MAX_SPI_FREQ,
      MV_M25P128_MAX_FAST_SPI_FREQ,
-     MV_M25P128_FAST_READ_DUMMY_BYTES
+     MV_M25P128_FAST_READ_DUMMY_BYTES,
+     MV_M25P128_ADDR_CYC_CNT
     },
     /* Macronix MXIC MX25L6405 SPI flash, 8MB, 128 sectors of 64K each */
     {
@@ -198,7 +202,8 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_MX25L1605_DEVICE_ID,
      MV_MX25L1605_MAX_SPI_FREQ,
      MV_MX25L1605_MAX_FAST_SPI_FREQ,
-     MV_MX25L1605_FAST_READ_DUMMY_BYTES
+     MV_MX25L1605_FAST_READ_DUMMY_BYTES,
+     MV_MX25L1605_ADDR_CYC_CNT
     },
     /* Macronix MXIC MX25L3205 SPI flash, 4MB, 64 sectors of 64K each */
     {
@@ -222,7 +227,8 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_MX25L3205_DEVICE_ID,
      MV_MX25L3205_MAX_SPI_FREQ,
      MV_MX25L3205_MAX_FAST_SPI_FREQ,
-     MV_MX25L3205_FAST_READ_DUMMY_BYTES
+     MV_MX25L3205_FAST_READ_DUMMY_BYTES,
+     MV_MX25L3205_ADDR_CYC_CNT
     },
     /* Macronix MXIC MX25L6405 SPI flash, 8MB, 128 sectors of 64K each */
     {
@@ -246,7 +252,8 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_MX25L6405_DEVICE_ID,
      MV_MX25L6405_MAX_SPI_FREQ,
      MV_MX25L6405_MAX_FAST_SPI_FREQ,
-     MV_MX25L6405_FAST_READ_DUMMY_BYTES
+     MV_MX25L6405_FAST_READ_DUMMY_BYTES,
+     MV_MX25L6405_ADDR_CYC_CNT
     },
     /* SPANSION S25FL128P SPI flash, 16MB, 64 sectors of 256K each */
     {
@@ -270,7 +277,33 @@ static MV_SFLASH_DEVICE_PARAMS sflash[] = {
      MV_S25FL128_DEVICE_ID,
      MV_S25FL128_MAX_SPI_FREQ,
      MV_M25P128_MAX_FAST_SPI_FREQ,
-     MV_M25P128_FAST_READ_DUMMY_BYTES
+     MV_M25P128_FAST_READ_DUMMY_BYTES,
+     MV_M25P128_ADDR_CYC_CNT
+    },
+    /* MACRONIX MX25L25735E SPI Flash, 64MB */
+    {
+	    MV_MX25L_WREN_CMND_OPCD,
+	    MV_MX25L_WRDI_CMND_OPCD,
+	    MV_MX25L_RDID_CMND_OPCD,
+	    MV_MX25L_RDSR_CMND_OPCD,
+	    MV_MX25L_WRSR_CMND_OPCD,
+	    MV_MX25L_READ_CMND_OPCD,
+	    MV_MX25L_FAST_RD_CMND_OPCD,
+	    MV_MX25L_PP_CMND_OPCD,
+	    MV_MX25L_SE_CMND_OPCD,
+	    MV_MX25L_BE_CMND_OPCD,
+	    MV_MX25L_RES_CMND_OPCD,
+	    MV_MX25L_DP_CMND_OPCD,
+	    MV_MX25L257_SECTOR_SIZE,
+	    MV_MX25L257_SECTOR_NUMBER,
+	    MV_MXIC_PAGE_SIZE,
+	    "MACRONIX MX25L25735E",
+	    MV_MXIC_MANF_ID,
+	    MV_MX25L257_DEVICE_ID,
+	    MV_MX25L257_MAX_SPI_FREQ,
+	    MV_MX25L257_MAX_FAST_SPI_FREQ,
+	    MV_MX25L257_FAST_READ_DUMMY_BYTES,
+	    MV_MX25L257_ADDR_CYC_CNT
     }
 };
 
@@ -432,6 +465,7 @@ static MV_STATUS mvSFlashPageWr(MV_SFLASH_INFO *pFlinfo, MV_U32 offset,
 {
     MV_STATUS ret;
 	MV_U8 cmd[MV_SFLASH_PP_CMND_LENGTH];
+	MV_U32 i;
 
 	/* Protection - check if the model was detected */
 	if (pFlinfo->index >= MV_ARRAY_SIZE(sflash)) {
@@ -451,13 +485,12 @@ static MV_STATUS mvSFlashPageWr(MV_SFLASH_INFO *pFlinfo, MV_U32 offset,
 	if (ret != MV_OK)
 		return ret;
 
-    cmd[0] = sflash[pFlinfo->index].opcdPP;
-	cmd[1] = ((offset >> 16) & 0xFF);
-	cmd[2] = ((offset >> 8) & 0xFF);
-	cmd[3] = (offset & 0xFF);
+	cmd[0] = sflash[pFlinfo->index].opcdPP;
+	for (i = 1; i <= sflash[pFlinfo->index].addrCycCnt; i++)
+		cmd[i] = (offset >> ((sflash[pFlinfo->index].addrCycCnt - i) * 8)) & 0xFF;
 
 	/*  mvSpiWriteThenWrite(MV_SFLASH_PP_CMND_LENGTH, pPageBuff, buffSize) */
-	ret = mvSysSflashCommandSet(NULL, cmd, MV_SFLASH_PP_CMND_LENGTH, SYS_SFLASH_TRANS_START);
+	ret = mvSysSflashCommandSet(NULL, cmd, sflash[pFlinfo->index].addrCycCnt + 1, SYS_SFLASH_TRANS_START);
 	if (ret == MV_OK)
 		ret = mvSysSflashDataWrite(NULL, pPageBuff, buffSize, SYS_SFLASH_TRANS_END);
 	if (ret != MV_OK)
@@ -621,6 +654,7 @@ MV_STATUS mvSFlashSectorErase(MV_SFLASH_INFO *pFlinfo, MV_U32 secNumber)
     MV_STATUS ret;
     MV_U8 cmd[MV_SFLASH_SE_CMND_LENGTH];
     MV_U32 secAddr;
+    MV_U32 i;
 
     /* check for NULL pointer */
     if (pFlinfo == NULL) {
@@ -645,9 +679,8 @@ MV_STATUS mvSFlashSectorErase(MV_SFLASH_INFO *pFlinfo, MV_U32 secNumber)
 	becasue of timing issue between CS asserts. */
 
     cmd[0] = sflash[pFlinfo->index].opcdSE;
-	cmd[1] = ((secAddr >> 16) & 0xFF);
-	cmd[2] = ((secAddr >> 8) & 0xFF);
-	cmd[3] = (secAddr & 0xFF);
+	for (i = 1; i <= sflash[pFlinfo->index].addrCycCnt; i++)
+		cmd[i] = (secAddr >> ((sflash[pFlinfo->index].addrCycCnt - i) * 8)) & 0xFF;
 
 	/* Issue the Write enable command prior the sector erase command */
 	ret = mvWriteEnable(pFlinfo);
@@ -655,7 +688,7 @@ MV_STATUS mvSFlashSectorErase(MV_SFLASH_INFO *pFlinfo, MV_U32 secNumber)
 		return ret;
 
 	/*  mvSpiWriteThenWrite(MV_SFLASH_SE_CMND_LENGTH) */
-	ret = mvSysSflashCommandSet(NULL, cmd, MV_SFLASH_SE_CMND_LENGTH, SYS_SFLASH_TRANS_ATOMIC);
+	ret = mvSysSflashCommandSet(NULL, cmd, sflash[pFlinfo->index].addrCycCnt + 1, SYS_SFLASH_TRANS_ATOMIC);
 	if (ret != MV_OK)
 		return ret;
 	ret = mvWaitOnWipClear(pFlinfo);
@@ -743,6 +776,7 @@ MV_STATUS mvSFlashBlockRd(MV_SFLASH_INFO *pFlinfo, MV_U32 offset,
 {
 	MV_U8 cmd[MV_SFLASH_READ_CMND_LENGTH];
 	MV_STATUS status;
+	MV_U32 i;
 
     /* check for NULL pointer */
 	if ((pFlinfo == NULL) || (pReadBuff == NULL)) {
@@ -757,12 +791,11 @@ MV_STATUS mvSFlashBlockRd(MV_SFLASH_INFO *pFlinfo, MV_U32 offset,
 	}
 
 	cmd[0] = sflash[pFlinfo->index].opcdREAD;
-	cmd[1] = ((offset >> 16) & 0xFF);
-	cmd[2] = ((offset >> 8) & 0xFF);
-	cmd[3] = (offset & 0xFF);
+	for (i = 1; i <= sflash[pFlinfo->index].addrCycCnt; i++)
+		cmd[i] = (offset >> ((sflash[pFlinfo->index].addrCycCnt - i) * 8)) & 0xFF;
 
 	/*  mvSpiWriteThenRead(MV_SFLASH_READ_CMND_LENGTH, pReadBuff, buffSize) */
-	status = mvSysSflashCommandSet(NULL, cmd, MV_SFLASH_READ_CMND_LENGTH,
+	status = mvSysSflashCommandSet(NULL, cmd, sflash[pFlinfo->index].addrCycCnt + 1,
 			SYS_SFLASH_TRANS_START);
 	if (status == MV_OK)
 		status = mvSysSflashDataRead(NULL, pReadBuff, buffSize, 0,
@@ -795,6 +828,7 @@ MV_STATUS mvSFlashFastBlockRd(MV_SFLASH_INFO *pFlinfo, MV_U32 offset,
 {
     MV_U8 cmd[MV_SFLASH_READ_CMND_LENGTH];
     MV_STATUS ret, retCmd;
+    MV_U32 i;
 
     /* check for NULL pointer */
     if ((pFlinfo == NULL) || (pReadBuff == NULL)) {
@@ -809,14 +843,12 @@ MV_STATUS mvSFlashFastBlockRd(MV_SFLASH_INFO *pFlinfo, MV_U32 offset,
     }
 
     cmd[0] = sflash[pFlinfo->index].opcdFSTRD;
-    cmd[1] = ((offset >> 16) & 0xFF);
-    cmd[2] = ((offset >> 8) & 0xFF);
-    cmd[3] = (offset & 0xFF);
-
+    for (i = 1; i <= sflash[pFlinfo->index].addrCycCnt; i++)
+	cmd[i] = (offset >> ((sflash[pFlinfo->index].addrCycCnt - i) * 8)) & 0xFF;
 
     /*  mvSpiWriteThenRead(MV_SFLASH_READ_CMND_LENGTH, pReadBuff, buffSize,
 	sflash[pFlinfo->index].spiFastRdDummyBytes); */
-    retCmd = mvSysSflashCommandSet(NULL, cmd, MV_SFLASH_READ_CMND_LENGTH,
+    retCmd = mvSysSflashCommandSet(NULL, cmd, sflash[pFlinfo->index].addrCycCnt + 1,
 		    SYS_SFLASH_TRANS_START);
 
     /* Set the SPI frequency to the MAX allowed for fast-read operations */
diff --git a/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.h b/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.h
old mode 100644
new mode 100755
index a67aa4c..848c705
--- a/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.h
+++ b/arch/arm/plat-armada/mv_hal/sflash/mvSFlash.h
@@ -115,6 +115,7 @@ typedef struct {
     MV_U32  spiMaxFreq;     /* The MAX frequency that can be used with the device */
     MV_U32  spiMaxFastFreq; /* The MAX frequency that can be used with the device for fast reads */
     MV_U32  spiFastRdDummyBytes; /* Number of dumy bytes to read before real data when working in fast read mode. */
+    MV_U32  addrCycCnt;		/* Address cycles count */
 } MV_SFLASH_DEVICE_PARAMS;
 
 typedef struct {
diff --git a/arch/arm/plat-armada/mv_hal/sflash/mvSFlashSpec.h b/arch/arm/plat-armada/mv_hal/sflash/mvSFlashSpec.h
old mode 100644
new mode 100755
index 88cc3d1..f7c8d9e
--- a/arch/arm/plat-armada/mv_hal/sflash/mvSFlashSpec.h
+++ b/arch/arm/plat-armada/mv_hal/sflash/mvSFlashSpec.h
@@ -70,10 +70,10 @@ extern "C" {
 #endif
 
 /* Constants */
-#define		MV_SFLASH_READ_CMND_LENGTH		    4		/* 1B opcode + 3B address */
-#define		MV_SFLASH_SE_CMND_LENGTH		    4		/* 1B opcode + 3B address */
+#define		MV_SFLASH_READ_CMND_LENGTH		    5		/* 1B opcode + 3B address */
+#define		MV_SFLASH_SE_CMND_LENGTH		    5		/* 1B opcode + 3B address */
 #define		MV_SFLASH_BE_CMND_LENGTH		    1		/* 1B opcode */
-#define		MV_SFLASH_PP_CMND_LENGTH		    4		/* 1B opcode + 3B address */
+#define		MV_SFLASH_PP_CMND_LENGTH		    5		/* 1B opcode + 3B address */
 #define		MV_SFLASH_WREN_CMND_LENGTH		    1		/* 1B opcode */
 #define		MV_SFLASH_WRDI_CMND_LENGTH		    1		/* 1B opcode */
 #define		MV_SFLASH_RDID_CMND_LENGTH		    1		/* 1B opcode */
@@ -108,19 +108,23 @@ extern "C" {
 #define     MV_M25P32_MAX_SPI_FREQ              20000000    /* 20MHz */
 #define     MV_M25P32_MAX_FAST_SPI_FREQ         50000000    /* 50MHz */
 #define     MV_M25P32_FAST_READ_DUMMY_BYTES     1
+#define	    MV_M25P32_ADDR_CYC_CNT	        3
 #define     MV_M25P64_DEVICE_ID                 0x2017
 #define     MV_M25P64_MAX_SPI_FREQ              20000000    /* 20MHz */
 #define     MV_M25P64_MAX_FAST_SPI_FREQ         50000000    /* 50MHz */
 #define     MV_M25P64_FAST_READ_DUMMY_BYTES     1
+#define	    MV_M25P64_ADDR_CYC_CNT	        3
 #define     MV_M25P128_DEVICE_ID                0x2018
 #define     MV_M25P128_MAX_SPI_FREQ             20000000    /* 20MHz */
 #define     MV_M25P128_MAX_FAST_SPI_FREQ        50000000    /* 50MHz */
 #define     MV_M25P128_FAST_READ_DUMMY_BYTES    1
-
+#define	    MV_M25P128_ADDR_CYC_CNT	        3
 #define     MV_M25PX64_DEVICE_ID                 0x7117
 #define     MV_M25PX64_MAX_SPI_FREQ              20000000    /* 20MHz */
 #define     MV_M25PX64_MAX_FAST_SPI_FREQ         50000000    /* 50MHz */
 #define     MV_M25PX64_FAST_READ_DUMMY_BYTES     1
+#define	    MV_M25PX64_ADDR_CYC_CNT	         3
+
 
 /* Sector Sizes and population per device model*/
 #define     MV_M25P32_SECTOR_SIZE               0x10000 /* 64K */
@@ -142,6 +146,7 @@ extern "C" {
 #define		MV_M25P_SE_CMND_OPCD			    0xD8	/* Sector Erase */
 #define		MV_M25P_BE_CMND_OPCD			    0xC7	/* Bulk Erase */
 #define		MV_M25P_RES_CMND_OPCD			    0xAB	/* Read Electronic Signature */
+#define		MV_M25P_ADDR_CYC_CNT			3
 
 /* Status Register Write Protect Bit Masks - 3bits */
 #define		MV_M25P_STATUS_REG_WP_MASK	        (0x07 << MV_SFLASH_STATUS_REG_WP_OFFSET)
@@ -164,23 +169,33 @@ extern "C" {
 #define     MV_MX25L1605_MAX_SPI_FREQ           20000000    /* 20MHz */
 #define     MV_MX25L1605_MAX_FAST_SPI_FREQ      50000000    /* 50MHz */
 #define     MV_MX25L1605_FAST_READ_DUMMY_BYTES  1
+#define	MV_MX25L1605_ADDR_CYC_CNT	    3
 #define     MV_MX25L3205_DEVICE_ID              0x2016
 #define     MV_MX25L3205_MAX_SPI_FREQ           20000000    /* 20MHz */
 #define     MV_MX25L3205_MAX_FAST_SPI_FREQ      50000000    /* 50MHz */
 #define     MV_MX25L3205_FAST_READ_DUMMY_BYTES  1
+#define	MV_MX25L3205_ADDR_CYC_CNT	    3
 #define     MV_MX25L6405_DEVICE_ID              0x2017
 #define     MV_MX25L6405_MAX_SPI_FREQ           20000000    /* 20MHz */
 #define     MV_MX25L6405_MAX_FAST_SPI_FREQ      50000000    /* 50MHz */
 #define     MV_MX25L6405_FAST_READ_DUMMY_BYTES  1
+#define	MV_MX25L6405_ADDR_CYC_CNT	    3
+#define	MV_MX25L257_DEVICE_ID		    0x2019
+#define	MV_MX25L257_MAX_SPI_FREQ      	    20000000    /* 20MHz */
+#define	MV_MX25L257_MAX_FAST_SPI_FREQ       50000000    /* 104MHz */
+#define	MV_MX25L257_FAST_READ_DUMMY_BYTES   1
+#define	MV_MX25L257_ADDR_CYC_CNT	    4
 #define     MV_MXIC_DP_EXIT_DELAY               30          /* 30 ms */
 
 /* Sector Sizes and population per device model*/
 #define     MV_MX25L1605_SECTOR_SIZE            0x10000 /* 64K */
 #define     MV_MX25L3205_SECTOR_SIZE            0x10000 /* 64K */
 #define     MV_MX25L6405_SECTOR_SIZE            0x10000 /* 64K */
+#define	    MV_MX25L257_SECTOR_SIZE        	0x10000 /* 64K */
 #define     MV_MX25L1605_SECTOR_NUMBER          32
 #define     MV_MX25L3205_SECTOR_NUMBER          64
 #define     MV_MX25L6405_SECTOR_NUMBER          128
+#define     MV_MX25L257_SECTOR_NUMBER 		512
 #define		MV_MXIC_PAGE_SIZE			        0x100   /* 256 byte */
 
 #define		MV_MX25L_WREN_CMND_OPCD			    0x06	/* Write Enable */
@@ -218,6 +233,7 @@ extern "C" {
 #define     MV_S25FL128_MAX_SPI_FREQ           		33000000    /* 33MHz */
 #define     MV_S25FL128_MAX_FAST_SPI_FREQ        	104000000    /* 104MHz */
 #define     MV_S25FL128_FAST_READ_DUMMY_BYTES    	1
+#define	    MV_S25FL128_ADDR_CYC_CNT	        	3
 
 /* Sector Sizes and population per device model*/
 #define     MV_S25FL128_SECTOR_SIZE            			0x40000 /* 256K */
-- 
1.7.5.4

