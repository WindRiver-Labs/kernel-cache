From 316d280867c7e419ab74a4ae0fa4420592a22834 Mon Sep 17 00:00:00 2001
From: Dovrat <dovrat@marvell.com>
Date: Wed, 23 Apr 2014 09:09:19 +0300
Subject: [PATCH 1568/1825] pp3: qm: new unit test function

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit d0afce65cc99e7f7a3e4fb53b9fb5d8729dd7114

Change-Id: I0c635dad65c86e1b2fc35ea8bd1c944c97159b61
Signed-off-by: Dovrat <dovrat@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7164
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c |   28 +++++++++++++++++++++
 1 files changed, 28 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c
index 7ec52ed5..ed8519a 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_sysfs.c
@@ -86,6 +86,7 @@ static ssize_t mv_qm_help(char *b)
 	int s = PAGE_SIZE; /* buffer size */
 
 	o += scnprintf(b+o, s-o, "echo > open                      - Open session with QM\n");
+	o += scnprintf(b+o, s-o, "echo > test                      - Open&init QM mandatory registers\n");
 	o += scnprintf(b+o, s-o, "echo > close                     - Close session with QM\n");
 	o += scnprintf(b+o, s-o, "echo > default_set               - Set default for QM units for mandatory parameters\n");
 	o += scnprintf(b+o, s-o, "echo > dma_gpm_pools_def_enable  - Enables QM for  GPM pools (0,1)\n");
@@ -142,6 +143,31 @@ static ssize_t mv_qm_config(struct device *dev,
 			PR_ERR_CODE(rc)
 		else
 			pr_info("QM open completed successfuly\n");
+	} else if (!strcmp(name, "test")) {
+		/* Read input values */
+		PR_INFO_CALLED
+		rc = qm_open();
+		if (rc == OK) {
+			pr_info("QM open completed successfuly\n");
+			rc = qm_default_set();
+			if (rc == OK) {
+				pr_info("QM set default values completed successfuly\n");
+				rc = qm_dma_gpm_pools_def_enable();
+				if (rc == OK) {
+					u32 status = 0xFFFFFFFF;
+					pr_info("QM dma_gpm_pools_def_enable completed successfuly\n");
+					rc = qm_packets_in_queues(&status);
+					if (status == 1)
+						pr_info("error: there are packets in Q's");
+					else
+						pr_info("there are no packets in Q's");
+					qm_idle_status_get(&status);
+					pr_info("idle status is %x\n", status);
+				}
+			}
+		}
+		if (rc != OK)
+			PR_ERR_CODE(rc)
 	} else if (!strcmp(name, "close")) {
 		PR_INFO_CALLED
 		rc = qm_close();
@@ -209,6 +235,7 @@ static ssize_t mv_qm_config(struct device *dev,
 
 static DEVICE_ATTR(help,                            S_IRUSR, mv_qm_show, NULL);
 static DEVICE_ATTR(open,                            S_IWUSR, NULL,       mv_qm_config);
+static DEVICE_ATTR(test,                            S_IWUSR, NULL,       mv_qm_config);
 static DEVICE_ATTR(close,                           S_IWUSR, NULL,       mv_qm_config);
 static DEVICE_ATTR(default_set,                     S_IWUSR, NULL,       mv_qm_config);
 static DEVICE_ATTR(dma_gpm_pools_def_enable,        S_IWUSR, NULL,       mv_qm_config);
@@ -220,6 +247,7 @@ static DEVICE_ATTR(qm_register_write,               S_IWUSR, NULL,       mv_qm_c
 static struct attribute *mv_qm_attrs[] = {
 	&dev_attr_help.attr,
 	&dev_attr_open.attr,
+	&dev_attr_test.attr,
 	&dev_attr_close.attr,
 	&dev_attr_default_set.attr,
 	&dev_attr_dma_gpm_pools_def_enable.attr,
-- 
1.7.5.4

