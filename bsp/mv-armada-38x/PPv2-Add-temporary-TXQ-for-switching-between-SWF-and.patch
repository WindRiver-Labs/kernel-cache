From 752fd354f97295ea4e13092fc82b74c990a53f6e Mon Sep 17 00:00:00 2001
From: Yoni Farhadian <yonif@marvell.com>
Date: Mon, 27 May 2013 11:03:59 +0300
Subject: [PATCH 0690/1825] PPv2: Add temporary TXQ for switching between SWF
 and HWF

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 43529e226c7d21969279e37ef50b558776a7b95a

Change-Id: Ib941aad847bf663c6e2b08adb9318cc8d960bcff
Signed-off-by: Yoni Farhadian <yonif@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/1986
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Kconfig |   12 +++++++
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |    8 ++++
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c     |   35 ++++++++++++++++++--
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h     |    2 +
 4 files changed, 54 insertions(+), 3 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Kconfig b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Kconfig
index 9330464..90af619 100755
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Kconfig
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Kconfig
@@ -455,6 +455,18 @@ config MV_ETH_AGGR_TXQ_SIZE
         ---help---
 	The number of Tx descriptors in each aggregated Tx queue.
 
+config MV_ETH_TEMP_TXQ_SIZE
+	int "Number of temporary Txq descriptors (for switching between HWF and SWF)"
+	depends on (MV_ETH_PP2 && MV_ETH_HWF)
+	default 512
+        ---help---
+
+config MV_ETH_TEMP_TXQ_HWF_SIZE
+	int "Number of temporary Txq HWF descriptors (for switching between HWF and SWF)"
+	depends on (MV_ETH_PP2 && MV_ETH_HWF)
+	default 256
+        ---help---
+
 endmenu
 
 menu "IP/TCP/UDP Offloading"
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 6d9d9d1..0c87786 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -3017,8 +3017,16 @@ static int	mv_eth_shared_probe(void)
 	for_each_possible_cpu(cpu) {
 		aggr_txqs[cpu].txq_size = CONFIG_MV_ETH_AGGR_TXQ_SIZE;
 		aggr_txqs[cpu].q = mvPp2AggrTxqInit(cpu, CONFIG_MV_ETH_AGGR_TXQ_SIZE);
+		if (!aggr_txqs[cpu].q)
+			goto oom;
 	}
 
+#ifdef CONFIG_MV_ETH_HWF
+	/* Create temporary TXQ for switching between HWF and SWF */
+	if (mvPp2TxqTempInit(CONFIG_MV_ETH_TEMP_TXQ_SIZE, CONFIG_MV_ETH_TEMP_TXQ_HWF_SIZE) != MV_OK)
+		goto oom;
+#endif
+
 	if (mv_eth_bm_pools_init())
 		goto oom;
 
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
index 97750e2..d2eb8b5 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
@@ -658,13 +658,14 @@ MV_STATUS mvPp2PhysTxqsAlloc()
 {
 	int i;
 
-	mvPp2PhysTxqs = mvOsMalloc(MV_PP2_TXQ_TOTAL_NUM * sizeof(MV_PP2_PHYS_TXQ_CTRL));
+	/* Alloc one extra element for temporary TXQ */
+	mvPp2PhysTxqs = mvOsMalloc((MV_PP2_TXQ_TOTAL_NUM + 1) * sizeof(MV_PP2_PHYS_TXQ_CTRL));
 	if (!mvPp2PhysTxqs) {
 		mvOsPrintf("mvPp2 Can't allocate %d Bytes for %d TXQs control\n",
-			   MV_PP2_TXQ_TOTAL_NUM * sizeof(MV_PP2_PHYS_TXQ_CTRL), MV_PP2_TXQ_TOTAL_NUM);
+			   (MV_PP2_TXQ_TOTAL_NUM + 1) * sizeof(MV_PP2_PHYS_TXQ_CTRL), MV_PP2_TXQ_TOTAL_NUM);
 		return MV_OUT_OF_CPU_MEM;
 	}
-	for (i = 0; i < MV_PP2_TXQ_TOTAL_NUM; i++)
+	for (i = 0; i < (MV_PP2_TXQ_TOTAL_NUM + 1); i++)
 		mvPp2PhysTxqs[i].txq = i;
 
 	return MV_OK;
@@ -728,6 +729,7 @@ MV_STATUS mvPp2AggrTxqDescInit(MV_PP2_AGGR_TXQ_CTRL *txqCtrl, int descNum, int c
    This function must be called before any use of aggregated TXQ */
 MV_STATUS mvPp2AggrTxqsAlloc(int cpuNum)
 {
+	/* Alloc one extra element for temporary TXQ */
 	mvPp2AggrTxqs = mvOsMalloc(cpuNum * sizeof(MV_PP2_PHYS_TXQ_CTRL));
 	if (!mvPp2AggrTxqs) {
 		mvOsPrintf("mvPp2 Can't allocate %d Bytes for %d aggr TXQs control\n",
@@ -808,6 +810,33 @@ void mvPp2TxpReset(int port, int txp)
 		mvPp2WrReg(MV_PP2_TXQ_INDEX_REG, 0);
 	}
 }
+
+/* Allocate and initialize descriptors for temporary TXQ */
+MV_STATUS mvPp2TxqTempInit(int descNum, int hwfNum)
+{
+	MV_STATUS status;
+	int ptxq = MV_PP2_TXQ_TOTAL_NUM;
+	MV_PP2_PHYS_TXQ_CTRL *pTxq = &mvPp2PhysTxqs[ptxq];
+	MV_PP2_QUEUE_CTRL *qCtrl = &pTxq->queueCtrl;
+
+	status = mvPp2DescrCreate(qCtrl, descNum);
+	if (status != MV_OK)
+		return MV_FAIL;
+
+	mvPp2DescRingReset(qCtrl);
+
+	/* Set Tx descriptors queue starting address */
+	/* indirect access */
+	mvPp2WrReg(MV_PP2_TXQ_NUM_REG, ptxq);
+	mvPp2WrReg(MV_PP2_TXQ_DESC_ADDR_REG, pp2DescVirtToPhys(qCtrl, (MV_U8 *)qCtrl->pFirst));
+	mvPp2WrReg(MV_PP2_TXQ_DESC_SIZE_REG, descNum & MV_PP2_TXQ_DESC_SIZE_MASK);
+	mvPp2WrReg(MV_PP2_TXQ_DESC_HWF_SIZE_REG, hwfNum & MV_PP2_TXQ_DESC_HWF_SIZE_MASK);
+	mvPp2WrReg(MV_PP2_TXQ_INDEX_REG, 0);
+
+	mvPp2WrReg(MV_PP2_TXQ_PREF_BUF_REG, MV_PP2_PREF_BUF_PTR(ptxq * 4) | MV_PP2_PREF_BUF_SIZE_4 | MV_PP2_PREF_BUF_THRESH(2));
+
+	return MV_OK;
+}
 /*-------------------------------------------------------------------------------*/
 /* Port */
 /* Allocate and initialize port structure
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
index eb0398d..10a2ca0 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
@@ -554,6 +554,8 @@ int mvPp2TxDonePktsCoalGet(int port, int txp, int txq);
 
 void mvPp2TxpReset(int port, int txp);
 
+MV_STATUS mvPp2TxqTempInit(int descNum, int hwfNum);
+
 /* Allocate and initialize port structure
    Associate relevant TXQs for this port (predefined)
    Associate <numRxqs> RXQs for Port number <port>, starting from RXQ number <firstRxq>
-- 
1.7.5.4

