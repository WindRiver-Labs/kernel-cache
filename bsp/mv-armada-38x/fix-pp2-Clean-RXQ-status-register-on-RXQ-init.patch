From 78711205a9b5c67cd369b24fae0bce55809b8843 Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Mon, 11 Nov 2013 09:58:46 -0500
Subject: [PATCH 1070/1825] fix: pp2: Clean RXQ status register on RXQ init

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit b466f05badc85d9ea7a072d852e58361427d33f4

	Fix crush occurs sometimes after a lot of resets

Signed-off-by: Dmitri Epshtein <dima@marvell.com>

Change-Id: Id20c1863696e20b3f1f0fd809b4fb1c7355a70a9
Reviewed-on: http://vgitil04.il.marvell.com:8080/4275
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
Tested-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c     |   21 +++++++++++++++++++-
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h |    8 +++---
 2 files changed, 24 insertions(+), 5 deletions(-)

diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
index 71fe404..1d737f0 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
@@ -254,11 +254,12 @@ MV_STATUS mvPp2DefaultsSet(int port)
 						MV_PP2_RX_LOW_LATENCY_PKT_SIZE_MASK(256));
 
 	/* Enable Rx cache snoop */
-	if (mvPp2HalData.iocc)
+	if (mvPp2HalData.iocc) {
 		for (i = 0; i < pPortCtrl->rxqNum; i++) {
 			queue = mvPp2LogicRxqToPhysRxq(port, i);
 			mvPp2WrReg(MV_PP2_RXQ_SNOOP_REG(queue), MV_PP2_SNOOP_PKT_SIZE_MASK | MV_PP2_SNOOP_BUF_HDR_MASK);
 		}
+	}
 
 	/* At default, mask all interrupts to all cpus */
 	mvPp2GbeCpuInterruptsDisable(port, (1 << mvPp2HalData.maxCPUs) - 1);
@@ -452,6 +453,9 @@ MV_PP2_PHYS_RXQ_CTRL *mvPp2RxqInit(int port, int rxq, int descNum)
 
 	mvPp2DescRingReset(qCtrl);
 
+	/* zero occupied and non-occupied counters - direct access */
+	mvPp2WrReg(MV_PP2_RXQ_STATUS_REG(prxq), 0);
+
 	/* Set Rx descriptors queue starting address */
 	/* indirect access */
 	mvPp2WrReg(MV_PP2_RXQ_NUM_REG, prxq);
@@ -633,6 +637,7 @@ void mvPp2RxReset(int port)
 MV_PP2_PHYS_TXQ_CTRL *mvPp2TxqInit(int port, int txp, int txq, int descNum, int hwfNum)
 {
 	MV_STATUS status;
+	MV_U32 regVal;
 	int ptxq = MV_PPV2_TXQ_PHYS(port, txp, txq);
 	MV_PP2_PHYS_TXQ_CTRL *pTxq = &mvPp2PhysTxqs[ptxq];
 	MV_PP2_QUEUE_CTRL *qCtrl = &pTxq->queueCtrl;
@@ -651,6 +656,19 @@ MV_PP2_PHYS_TXQ_CTRL *mvPp2TxqInit(int port, int txp, int txq, int descNum, int
 	mvPp2WrReg(MV_PP2_TXQ_DESC_HWF_SIZE_REG, hwfNum & MV_PP2_TXQ_DESC_HWF_SIZE_MASK);
 	mvPp2WrReg(MV_PP2_TXQ_INDEX_REG, 0);
 
+	/* Sanity check: Pending descriptors counter and sent descriptors counter must be 0 */
+	/* Pending counter read - indirect access */
+	regVal = mvPp2RdReg(MV_PP2_TXQ_PENDING_REG);
+	if (regVal != 0) {
+		mvOsPrintf("port=%d, txp=%d txq=%d, ptxq=%d, pend=0x%08x - Pending packets\n",
+			port, txp, txq, ptxq, regVal);
+	}
+	/* Sent descriptors counter - direct access */
+	regVal = mvPp2RdReg(MV_PP2_TXQ_SENT_REG(ptxq));
+	if (regVal != 0) {
+		mvOsPrintf("port=%d, txp=%d txq=%d, ptxq=%d, sent=0x%08x - Sent packets\n",
+			port, txp, txq, ptxq, regVal);
+	}
 	mvPp2WrReg(MV_PP2_TXQ_PREF_BUF_REG, MV_PP2_PREF_BUF_PTR(ptxq * 16) | MV_PP2_PREF_BUF_SIZE_16 |
 				MV_PP2_PREF_BUF_THRESH(8));
 
@@ -1220,6 +1238,7 @@ MV_VOID mvPp2GbeCpuInterruptsEnable(int port, int cpuMask)
 {
 	if (mvPp2PortCheck(port))
 		return;
+
 	mvPp2WrReg(MV_PP2_ISR_ENABLE_REG(port), MV_PP2_ISR_ENABLE_INTERRUPT(cpuMask));
 }
 
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
index 4ddfe52..7cdb37d 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
@@ -487,10 +487,10 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 /* Port Maximum Transmit Unit (PMTU) */
 #define MV_PP2_TXP_SCHED_MTU_REG		(MV_PP2_REG_BASE + 0x801c)
 
-#define MV_PP2_TXP_MTU_OFFS                 	0
-#define MV_PP2_TXP_MTU_MAX                  	0x3FFFF
-#define MV_PP2_TXP_MTU_ALL_MASK             	(MV_PP2_TXP_MTU_MAX << MV_PP2_TXP_MTU_OFFS)
-#define MV_PP2_TXP_MTU_MASK(mtu)            	((mtu) << MV_PP2_TXP_MTU_OFFS)
+#define MV_PP2_TXP_MTU_OFFS			0
+#define MV_PP2_TXP_MTU_MAX			0x7FFFF
+#define MV_PP2_TXP_MTU_ALL_MASK			(MV_PP2_TXP_MTU_MAX << MV_PP2_TXP_MTU_OFFS)
+#define MV_PP2_TXP_MTU_MASK(mtu)		((mtu) << MV_PP2_TXP_MTU_OFFS)
 /*-----------------------------------------------------------------------------------------------*/
 
 /* Port Bucket Refill (PRefill) */
-- 
1.7.5.4

