From d9331f49404538797c020ccb1a5b1e6a9fb47701 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Sun, 4 May 2014 16:48:59 +0300
Subject: [PATCH 1642/1825] pp3: hmac successfully sent message/packet to fw

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 8da1f9a0b3f8d8d9bd2d36fe5330bc6ffe12eafe

	Change hmac queue memory allocation and init process.
	Fixed fileds offset in register MV_HMAC_EVENT_ADDR_LOW_REG

Change-Id: If1c56481b43f85576bc8b5f47a8493883297e71b
Signed-off-by: Yelena <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7819
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c    |   34 +++++++++-----------
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h    |    5 +--
 .../net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h   |    2 +-
 3 files changed, 18 insertions(+), 23 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
index e97dbaa..2bdda97 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
@@ -86,7 +86,6 @@ struct pp3_unit_info pp3_hmac_fr;
 struct mv_pp3_hmac_queue_ctrl *mv_hmac_rxq_handle[MV_PP3_HMAC_MAX_FRAME][MV_PP3_QUEUES_PER_FRAME];
 struct mv_pp3_hmac_queue_ctrl *mv_hmac_txq_handle[MV_PP3_HMAC_MAX_FRAME][MV_PP3_QUEUES_PER_FRAME];
 
-
 /* local functions declaration */
 static int mv_pp3_hmac_queue_create(struct mv_pp3_hmac_queue_ctrl *q_ctrl);
 
@@ -172,6 +171,7 @@ void *mv_pp3_hmac_rxq_init(int frame, int queue, int size)
 {
 	struct mv_pp3_hmac_queue_ctrl *qctrl;
 	u32 reg_data;
+	u32 phys_addr;
 
 	PP3_HMAC_DEBUG;
 	/* check if already created */
@@ -186,7 +186,8 @@ void *mv_pp3_hmac_rxq_init(int frame, int queue, int size)
 	qctrl->size = size;
 	mv_pp3_hmac_queue_create(qctrl);
 	/* Write pointer to allocated memory */
-	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_ADDR_LOW(queue), (u32)virt_to_phys(qctrl->first));
+	phys_addr = dma_map_single(NULL, qctrl->first, size, DMA_FROM_DEVICE);
+	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_ADDR_LOW(queue), phys_addr);
 	/* Store queue size in rq_size table, number of 16B units */
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_SIZE(queue), (u32)qctrl->size);
 	/* Configure Receive Threshold TBD */
@@ -270,6 +271,7 @@ void *mv_pp3_hmac_txq_init(int frame, int queue, int size, int cfh_size)
 {
 	struct mv_pp3_hmac_queue_ctrl *qctrl;
 	u32 reg_data;
+	u32 phys_addr;
 
 	PP3_HMAC_DEBUG;
 	/* allocate hmac queue control stucture */
@@ -282,7 +284,8 @@ void *mv_pp3_hmac_txq_init(int frame, int queue, int size, int cfh_size)
 	qctrl->cfh_size = cfh_size;
 
 	/* Write pointer to allocated memory */
-	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_ADDR_LOW(queue), (u32)virt_to_phys(qctrl->first));
+	phys_addr = dma_map_single(NULL, qctrl->first, size, DMA_TO_DEVICE);
+	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_ADDR_LOW(queue), phys_addr);
 	/* Store queue size in rq_size table, number of 16B units */
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_SIZE(queue), (u32)qctrl->size);
 
@@ -318,18 +321,6 @@ void mv_pp3_hmac_txq_disable(int frame, int queue)
 }
 
 /* Local functions */
-/* allocate descriptors */
-static u8 *mv_pp3_queue_mem_alloc(int size)
-{
-	u8 *p_virt;
-
-	p_virt = kmalloc(size, GFP_ATOMIC);
-	/*if (pVirt)
-		mvOsMemset(pVirt, 0, descSize);*/
-
-	return p_virt;
-}
-
 static int mv_pp3_hmac_queue_create(struct mv_pp3_hmac_queue_ctrl *q_ctrl)
 {
 	int size;
@@ -337,12 +328,17 @@ static int mv_pp3_hmac_queue_create(struct mv_pp3_hmac_queue_ctrl *q_ctrl)
 	/* CFH buffer must be aligned to 256B */
 	size = q_ctrl->size * MV_PP3_HMAC_DG_SIZE + MV_PP3_HMAC_Q_ALIGN; /* in bytes */
 	/* Allocate memory for queue */
-	q_ctrl->buf_ptr = (u32) mv_pp3_queue_mem_alloc(size);
-	q_ctrl->first = (u8 *)MV_ALIGN_UP(q_ctrl->buf_ptr, MV_PP3_HMAC_Q_ALIGN);
-
+	q_ctrl->first = kzalloc(size, GFP_ATOMIC);
+	if (q_ctrl->first) {
+		if (MV_IS_NOT_ALIGN((u32)(q_ctrl->first), MV_PP3_HMAC_Q_ALIGN)) {
+			pr_err("%s: Allocate not aligned pointer 0x%p (%d bytes)\n", __func__, q_ctrl->first, size);
+			q_ctrl->first = 0;
+			return;
+		}
+	}
 	if (q_ctrl->first == NULL) {
 		pr_err("%s: Can't allocate %d bytes for HMAC queue.\n", __func__, size);
-		return 1;
+		return -1;
 	}
 
 	q_ctrl->next_proc = q_ctrl->first;
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
index 66fc3f2..78c5356 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
@@ -87,9 +87,8 @@ extern struct mv_pp3_hmac_queue_ctrl *mv_hmac_rxq_handle[MV_PP3_HMAC_MAX_FRAME][
 extern struct mv_pp3_hmac_queue_ctrl *mv_hmac_txq_handle[MV_PP3_HMAC_MAX_FRAME][MV_PP3_QUEUES_PER_FRAME];
 
 struct mv_pp3_hmac_queue_ctrl {
-	u32 buf_ptr;
-	u8 *first;		/* pointer to first byte in queue */
-	u8 *next_proc;	/* pointer to next CFH to procces in queue */
+	u8 *first;		/* pointer to first (virtual) byte in queue */
+	u8 *next_proc;		/* pointer to next CFH to procces in queue */
 	u8 *end;		/* pointer to first byte not belong to queue */
 	int occ_dg;		/* number of occupated datagram in queue */
 	int dummy_dg;	/* number of dummy datagrams added by last wraparound */
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h
index f42490c..6ebd416 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac_regs.h
@@ -124,7 +124,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 /* Hmac_event_addr_low_%m */
 #define MV_HMAC_EVENT_ADDR_LOW_REG(m)							(0x0050 + 8*m)
-#define MV_HMAC_EVENT_ADDR_LOW_EVENT_ADDRESS_LOW_OFFS		8
+#define MV_HMAC_EVENT_ADDR_LOW_EVENT_ADDRESS_LOW_OFFS		0
 #define MV_HMAC_EVENT_ADDR_LOW_EVENT_ADDRESS_LOW_MASK    \
 		(0x00ffffff << MV_HMAC_EVENT_ADDR_LOW_EVENT_ADDRESS_LOW_OFFS)
 
-- 
1.7.5.4

