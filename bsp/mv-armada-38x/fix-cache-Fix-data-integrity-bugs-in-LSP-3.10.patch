From 2c22ff5cc5bc04c835f7d5141bdf3240ce1a18af Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Wed, 5 Mar 2014 16:15:50 +0200
Subject: [PATCH 1424/1825] fix: cache: Fix data integrity bugs in LSP 3.10

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit fc1bb9154ec93aa9370106cf9b9e54cb8dab8f0a

        Implement the mvOsCacheIoSync function in mvOs.h header
        Add call for mvebu_hwcc_dma_sync for IO sync barrier

        SYSTEMSW-397: Data integrity issue in LSP 3.10

Change-Id: Id6c6fd2feff2b64fa273abf1a43447a1ac9582e9
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/linux_oss/mvOs.h              |    4 ++--
 .../mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c      |    4 ++--
 .../mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c     |    6 +++---
 .../mv_drivers_lsp/mv_network/nfp_mgr/mv_nfp_sec.c |    8 ++++----
 .../mv_drivers_lsp/mv_pp2/dpi/dpi_sysfs.c          |    2 +-
 .../mv_drivers_lsp/mv_pp2/l2fw/mv_eth_l2fw.c       |    6 +++---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |    6 +++---
 .../plat-armada/mv_drivers_lsp/mv_xor/mv_netdma.c  |   10 +++++-----
 8 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/arch/arm/plat-armada/linux_oss/mvOs.h b/arch/arm/plat-armada/linux_oss/mvOs.h
index c6bef3d..ef03e79 100644
--- a/arch/arm/plat-armada/linux_oss/mvOs.h
+++ b/arch/arm/plat-armada/linux_oss/mvOs.h
@@ -280,9 +280,9 @@ static inline void mvOsBridgeReorderWA(void)
 #define mvOsCacheMultiLineFlush(handle, addr, size)
 #define mvOsCacheMultiLineInv(handle, addr, size)
 #define mvOsCacheMultiLineFlushInv(handle, addr, size)
-#define mvOsCacheIoSync()	dma_io_sync()
+#define mvOsCacheIoSync(handle)		dma_io_sync()
 #else
-#define mvOsCacheIoSync()	/* Not needed in s/w cache coherency (SWCC) */
+#define mvOsCacheIoSync(handle)		/* Not needed in s/w cache coherency (SWCC) */
 /*************************************/
 /* FLUSH & INVALIDATE single D$ line */
 /*************************************/
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
index 6e8c996..509f8e2 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
@@ -474,7 +474,7 @@ struct eth_pbuf *eth_l2fw_copy_packet_withXor(struct eth_pbuf *pRxPktInfo)
 	/* sync between giga and XOR to avoid errors (like checksum errors in TX)
 	   when working with IOCC */
 
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 
 	eth_xor_desc->srcAdd0    = pRxPktInfo->physAddr + pRxPktInfo->offset + MV_ETH_MH_SIZE + 30;
 	eth_xor_desc->phyDestAdd = pTxPktInfo->physAddr + pTxPktInfo->offset + MV_ETH_MH_SIZE + 30;
@@ -697,7 +697,7 @@ static inline int mv_eth_l2fw_rx(struct eth_port *pp, int rx_todo, int rxq)
 	int	ipOffset;
 
 	rx_done = mvNetaRxqBusyDescNumGet(pp->port, rxq);
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 	if (rx_todo > rx_done)
 		rx_todo = rx_done;
 	rx_done = 0;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
index 137e83e..a0531e8 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
@@ -1716,7 +1716,7 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq, struct na
 #endif /* CONFIG_NETMAP */
 	/* Get number of received packets */
 	rx_done = mvNetaRxqBusyDescNumGet(pp->port, rxq);
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(pp->dev->dev.parent);
 
 	if (rx_todo > rx_done)
 		rx_todo = rx_done;
@@ -2382,7 +2382,7 @@ static void mv_eth_rxq_drop_pkts(struct eth_port *pp, int rxq)
 		return;
 
 	rx_done = mvNetaRxqBusyDescNumGet(pp->port, rxq);
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(pp->dev->dev.parent);
 
 	for (i = 0; i < rx_done; i++) {
 		rx_desc = mvNetaRxqNextDescGet(rx_ctrl);
@@ -4832,7 +4832,7 @@ int mv_eth_rx_reset(int port)
 				continue;
 
 			rx_done = mvNetaRxqFreeDescNumGet(pp->port, rxq);
-			mvOsCacheIoSync();
+			mvOsCacheIoSync(pp->dev->dev.parent);
 			for (i = 0; i < rx_done; i++) {
 				rx_desc = mvNetaRxqNextDescGet(rx_ctrl);
 				mvOsCacheLineInv(pp->dev->dev.parent, rx_desc);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_network/nfp_mgr/mv_nfp_sec.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_network/nfp_mgr/mv_nfp_sec.c
index 2f19868..626be4e 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_network/nfp_mgr/mv_nfp_sec.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_network/nfp_mgr/mv_nfp_sec.c
@@ -113,7 +113,7 @@ static INLINE MV_VOID mvNfpSecClearRange(MV_U8* addr, MV_U32 size)
 	
 	for(i = 0; align <= (addr+size); align += CPU_D_CACHE_LINE_SIZE) {
 		mvOsCacheLineFlushInv(NULL, align);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
 }
 
@@ -126,7 +126,7 @@ static INLINE MV_VOID mvNfpSecInvRange(MV_U8* addr, MV_U32 size)
 	
 	for(i = 0; align <= (addr+size); align += CPU_D_CACHE_LINE_SIZE) {
 		mvOsCacheLineInv(NULL, align);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
 }
 
@@ -196,7 +196,7 @@ nfp_sec_complete_out(unsigned long data)
 		struct mv_vlan_cfg* vlan_cfg = MV_NETDEV_VLAN(out_dev);
 		*(unsigned short *)(pBuf->bufVirtPtr) = vlan_cfg->header;
 		mvOsCacheLineFlushInv(NULL, pBuf->bufVirtPtr);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
     else
 #endif
@@ -367,7 +367,7 @@ nfp_sec_complete_in(unsigned long data)
 		struct mv_vlan_cfg* vlan_cfg = MV_NETDEV_VLAN(out_dev);
 		*(unsigned short *)(pBuf->bufVirtPtr) = vlan_cfg->header;
 		mvOsCacheLineFlushInv(NULL, pBuf->bufVirtPtr);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
     else
 #endif
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/dpi/dpi_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/dpi/dpi_sysfs.c
index f8ddd7b..85b4c90 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/dpi/dpi_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/dpi/dpi_sysfs.c
@@ -208,7 +208,7 @@ static int mv_pp2_dpi_do_request(char *data, int size, unsigned char *counters)
 			__func__, ready_num);
 
 	/* Process single response - copy counters */
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 	mvPp2DpiResultGet(dpi_counters, MV_PP2_DPI_CNTRS);
 
 	/* Enable HW to reuse Response descriptors */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/l2fw/mv_eth_l2fw.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/l2fw/mv_eth_l2fw.c
index 00f9956..0ac0faba 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/l2fw/mv_eth_l2fw.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/l2fw/mv_eth_l2fw.c
@@ -531,7 +531,7 @@ inline struct sk_buff *eth_l2fw_copy_packet_withXor(struct sk_buff *skb, struct
 	/* sync between giga and XOR to avoid errors (like checksum errors in TX)
 	   when working with IOCC */
 
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 
 	bufPhysAddr =  mvOsCacheFlush(NULL, skb->data, bytes);
 	eth_xor_desc->srcAdd0    = bufPhysAddr + skb_headroom(skb) + MV_ETH_MH_SIZE + 30;
@@ -903,7 +903,7 @@ inline int mv_l2fw_rx(struct eth_port *pp, int rx_todo, int rxq)
 	MV_U32 bufPhysAddr, bm;
 
 	rx_done = mvPp2RxqBusyDescNumGet(pp->port, rxq);
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 
 	if ((rx_todo > rx_done) || (rx_todo < 0))
 		rx_todo = rx_done;
@@ -1066,7 +1066,7 @@ inline int mv_l2fw_rx(struct eth_port *pp, int rx_todo, int rxq)
 	} /* of while */
 
 	/* Update RxQ management counters */
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 	mvPp2RxqDescNumUpdate(pp->port, rxq, rx_done, rx_filled);
 
 	return rx_done;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index f8d0c32..cddac87 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -1823,7 +1823,7 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq, struct na
 #endif /* CONFIG_NETMAP */
 	/* Get number of received packets */
 	rx_done = mvPp2RxqBusyDescNumGet(pp->port, rxq);
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 
 	if ((rx_todo > rx_done) || (rx_todo < 0))
 		rx_todo = rx_done;
@@ -2496,7 +2496,7 @@ static void mv_eth_rxq_drop_pkts(struct eth_port *pp, int rxq)
 		return;
 
 	rx_done = mvPp2RxqBusyDescNumGet(pp->port, rxq);
-	mvOsCacheIoSync();
+	mvOsCacheIoSync(NULL);
 
 	for (i = 0; i < rx_done; i++) {
 		__u32 bm;
@@ -2517,7 +2517,7 @@ static void mv_eth_rxq_drop_pkts(struct eth_port *pp, int rxq)
 		mvOsCacheLineInv(NULL, rx_desc);
 	}
 	if (rx_done) {
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 		mvPp2RxqDescNumUpdate(pp->port, rxq, rx_done, rx_done);
 	}
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_xor/mv_netdma.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_xor/mv_netdma.c
index 5393656..50e6f2d 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_xor/mv_netdma.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_xor/mv_netdma.c
@@ -302,7 +302,7 @@ static void xor_integrity(struct xor_chain* chain)
 
 	for (i=0; i<chain->pending; i++) {
 		mvOsCacheLineInv(0, chain->desc + i);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 		if (chain->desc[i].status != 0x40000000) {
 			printk("XOR: violation chain[%d] desc=%d status=%x active=%d %x<-%x %d bytes\n", 
 				   chain->idx, i, 
@@ -1320,12 +1320,12 @@ unsigned long xor_copy_to_user(unsigned long to, unsigned long from, unsigned lo
 
 	if (to & 31) {
 		mvOsCacheLineFlushInv(0, to);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
 
 	if ((to+n) & 31) {
 		mvOsCacheLineFlushInv(0, to+n);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
 
 	dmac_clean_range((void*)from, (void*)from + n);
@@ -1444,12 +1444,12 @@ unsigned long xor_copy_from_user(unsigned long to, unsigned long from, unsigned
 
 	if (to & 31) {
 		mvOsCacheLineFlushInv(0, to);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
 
 	if ((to+n) & 31) {
 		mvOsCacheLineFlushInv(0, to+n);
-		mvOsCacheIoSync();
+		mvOsCacheIoSync(NULL);
 	}
 
 	dmac_inv_range((void*)to, (void*)to + n);
-- 
1.7.5.4

