From c02b9ddb071f41cc89aada5291152dc5b0c7e59c Mon Sep 17 00:00:00 2001
From: Eli Nidam <elini@marvell.com>
Date: Wed, 1 Jan 2014 18:59:52 +0200
Subject: [PATCH 1269/1825] fix: pex: Added virtual PEX interface to solve not
 sequential PEX interface.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 628b7b5af2b2ba1f7f82ea5ecceed8f893ed4c59

	If the PEX interfaces are not sequential (A38x) then the check valid interface failed
	because the interface number is bigger the max interface.
	To solve this issue we use the virtual interface number, the virtual interface is always
	sequential.

Change-Id: I9ded40727882bb344a3f8803a9a6b005774596f7
Signed-off-by: Eli Nidam <elini@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5013
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-armada370/mv_hal_if/mvSysPex.c    |    3 +-
 arch/arm/mach-armada370/mv_hal_if/mvSysPexApi.h |    2 +-
 arch/arm/mach-armada370/pex.c                   |    2 +-
 arch/arm/mach-armada38x/mv_hal_if/mvSysPex.c    |    3 +-
 arch/arm/mach-armada38x/mv_hal_if/mvSysPexApi.h |    2 +-
 arch/arm/mach-armada38x/pex.c                   |    4 +-
 arch/arm/mach-armadaxp/mv_hal_if/mvSysPex.c     |    3 +-
 arch/arm/mach-armadaxp/mv_hal_if/mvSysPexApi.h  |    2 +-
 arch/arm/mach-armadaxp/pex.c                    |   30 +++++++++++-----------
 arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c     |    3 +-
 arch/arm/mach-avantalp/mv_hal_if/mvSysPexApi.h  |    2 +-
 arch/arm/mach-avantalp/pex.c                    |    2 +-
 arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.c    |    4 +-
 arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.h    |    2 +-
 arch/arm/plat-armada/mv_hal/pex/mvPex.c         |   29 +++++++++++----------
 arch/arm/plat-armada/mv_hal/pex/mvPex.h         |    1 +
 16 files changed, 50 insertions(+), 44 deletions(-)
 mode change 100755 => 100644 arch/arm/plat-armada/mv_hal/pex/mvPex.c

diff --git a/arch/arm/mach-armada370/mv_hal_if/mvSysPex.c b/arch/arm/mach-armada370/mv_hal_if/mvSysPex.c
index 8917830..1f911c9 100755
--- a/arch/arm/mach-armada370/mv_hal_if/mvSysPex.c
+++ b/arch/arm/mach-armada370/mv_hal_if/mvSysPex.c
@@ -86,7 +86,7 @@ MV_STATUS mvPexTargetWinGet(MV_U32 pexIf, MV_U32 winNum, MV_PEX_DEC_WIN *pAddrDe
 *       None
 *
 *******************************************************************************/
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf)
 {
 	MV_PEX_HAL_DATA halData;
 	MV_UNIT_WIN_INFO addrWinMap[MAX_TARGETS + 1];
@@ -100,6 +100,7 @@ MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
 		halData.ctrlModel = mvCtrlModelGet();
 		halData.maxPexIf = mvCtrlPexMaxIfGet();
 		halData.ctrlFamily=mvCtrlDevFamilyIdGet(halData.ctrlModel);
+		halData.virtualIf = virtualIf;
 		status = mvPexInit(pexIf, pexType, &halData);
 	}
 
diff --git a/arch/arm/mach-armada370/mv_hal_if/mvSysPexApi.h b/arch/arm/mach-armada370/mv_hal_if/mvSysPexApi.h
index 7ae7e26..b86be26 100644
--- a/arch/arm/mach-armada370/mv_hal_if/mvSysPexApi.h
+++ b/arch/arm/mach-armada370/mv_hal_if/mvSysPexApi.h
@@ -65,7 +65,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef __MV_SYS_PEX_API_H__
 #define __MV_SYS_PEX_API_H__
 
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType);
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf);
 MV_VOID mvSysPexCpuIfEnable(MV_U32 pexIf);
 
 #endif
diff --git a/arch/arm/mach-armada370/pex.c b/arch/arm/mach-armada370/pex.c
index 4306282..1492a1f 100644
--- a/arch/arm/mach-armada370/pex.c
+++ b/arch/arm/mach-armada370/pex.c
@@ -74,7 +74,7 @@ void __init mv_pci_preinit(void)
 	for (pciIf = 0; pciIf < maxif; pciIf++)
         {
 
-		retval = mvSysPexInit(pciIf, MV_PEX_ROOT_COMPLEX);
+		retval = mvSysPexInit(pciIf, MV_PEX_ROOT_COMPLEX, pciIf);
 
 		if(retval == MV_NO_SUCH){
 			//printk("pci_init:no such calling mvPexInit for PEX-%x\n",pciIf);
diff --git a/arch/arm/mach-armada38x/mv_hal_if/mvSysPex.c b/arch/arm/mach-armada38x/mv_hal_if/mvSysPex.c
index 26fc8a1..1db1c6b 100644
--- a/arch/arm/mach-armada38x/mv_hal_if/mvSysPex.c
+++ b/arch/arm/mach-armada38x/mv_hal_if/mvSysPex.c
@@ -69,7 +69,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "pex/mvPex.h"
 #include "pex/mvPexRegs.h"
 
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf)
 {
 	MV_PEX_HAL_DATA halData;
 	MV_UNIT_WIN_INFO addrWinMap[MAX_TARGETS + 1];
@@ -87,6 +87,7 @@ MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
 	halData.ctrlModel = mvCtrlModelGet();
 	halData.ctrlFamily = mvCtrlDevFamilyIdGet(halData.ctrlModel);
 	halData.maxPexIf = mvCtrlPexMaxIfGet();
+	halData.virtualIf = virtualIf;
 
 	if (mvPexInit(pexIf, pexType, &halData) != MV_OK) {
 		mvOsPrintf("%s: mvPexInit(pexIf = %d) failed\n", __func__,
diff --git a/arch/arm/mach-armada38x/mv_hal_if/mvSysPexApi.h b/arch/arm/mach-armada38x/mv_hal_if/mvSysPexApi.h
index 637eb5d..6974cf7 100644
--- a/arch/arm/mach-armada38x/mv_hal_if/mvSysPexApi.h
+++ b/arch/arm/mach-armada38x/mv_hal_if/mvSysPexApi.h
@@ -65,6 +65,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef __MV_SYS_PEX_API_H__
 #define __MV_SYS_PEX_API_H__
 
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType);
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf);
 
 #endif
diff --git a/arch/arm/mach-armada38x/pex.c b/arch/arm/mach-armada38x/pex.c
index e2b90ba..c4f7dfa 100644
--- a/arch/arm/mach-armada38x/pex.c
+++ b/arch/arm/mach-armada38x/pex.c
@@ -95,7 +95,7 @@ void __init mv_pex_preinit(void)
 			continue;
 		}
 
-		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX) != MV_OK) {
+		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX, pci_if) != MV_OK) {
 			pr_warn("%s: Error: mvSysPexInit(%d) failed\n",
 				__func__, pci_if);
 			mvCtrlPwrClckSet(PEX_UNIT_ID, pci_if, MV_FALSE);
@@ -142,7 +142,7 @@ void mv_pex_reinit(void)
 			continue;
 		}
 
-		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX) != MV_OK) {
+		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX, pci_if) != MV_OK) {
 			pr_warn("%s: Error: mvSysPexInit(%d) failed\n",
 				__func__, pci_if);
 			mvCtrlPwrClckSet(PEX_UNIT_ID, pci_if, MV_FALSE);
diff --git a/arch/arm/mach-armadaxp/mv_hal_if/mvSysPex.c b/arch/arm/mach-armadaxp/mv_hal_if/mvSysPex.c
index 4dad4ed..5ac1222 100755
--- a/arch/arm/mach-armadaxp/mv_hal_if/mvSysPex.c
+++ b/arch/arm/mach-armadaxp/mv_hal_if/mvSysPex.c
@@ -85,7 +85,7 @@ MV_STATUS mvPexTargetWinGet(MV_U32 pexIf, MV_U32 winNum, MV_PEX_DEC_WIN *pAddrDe
 *       None
 *
 *******************************************************************************/
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf)
 {
 	MV_PEX_HAL_DATA halData;
 	MV_UNIT_WIN_INFO addrWinMap[MAX_TARGETS + 1];
@@ -99,6 +99,7 @@ MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
 		halData.ctrlModel = mvCtrlModelGet();
 		halData.maxPexIf = mvCtrlPexMaxIfGet();
 		halData.ctrlFamily=mvCtrlDevFamilyIdGet(halData.ctrlModel);
+		halData.virtualIf = virtualIf;
 		status = mvPexInit(pexIf, pexType, &halData);
 	}
 
diff --git a/arch/arm/mach-armadaxp/mv_hal_if/mvSysPexApi.h b/arch/arm/mach-armadaxp/mv_hal_if/mvSysPexApi.h
index 1b6a6bf..051eb6d 100644
--- a/arch/arm/mach-armadaxp/mv_hal_if/mvSysPexApi.h
+++ b/arch/arm/mach-armadaxp/mv_hal_if/mvSysPexApi.h
@@ -66,6 +66,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define __MV_SYS_PEX_API_H__
 
 
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType);
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf);
 
 #endif
diff --git a/arch/arm/mach-armadaxp/pex.c b/arch/arm/mach-armadaxp/pex.c
index bcb6e00..86ce76b 100644
--- a/arch/arm/mach-armadaxp/pex.c
+++ b/arch/arm/mach-armadaxp/pex.c
@@ -42,7 +42,7 @@
 #ifdef MV_DEBUG
 #	define DB(x) x
 #else
-#	define DB(x) 
+#	define DB(x)
 #endif
 
 #define MV_PEX_MASK_ABCD              (BIT24 | BIT25 | BIT26 | BIT27)
@@ -93,7 +93,7 @@ void __init mv_pex_preinit(void)
 	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
 	MV_U32 pexHWInf = 0;
 
-	for (pciIf = 0; pciIf < boardPexInfo->boardPexIfNum; pciIf++) 
+	for (pciIf = 0; pciIf < boardPexInfo->boardPexIfNum; pciIf++)
 	{
 		/* Translate logical interface number to physical */
 		pexHWInf = boardPexInfo->pexMapping[pciIf];
@@ -109,7 +109,7 @@ void __init mv_pex_preinit(void)
 		}
 
 		/* init the PCI interface */
-		temp = mvSysPexInit(pexHWInf, MV_PEX_ROOT_COMPLEX);
+		temp = mvSysPexInit(pexHWInf, MV_PEX_ROOT_COMPLEX, pciIf);
 
 		if (MV_NO_SUCH == temp)
 		{
@@ -138,7 +138,7 @@ void __init mv_pex_preinit(void)
 		if (mv_is_pci_io_mapped(pexHWInf))
 		{
 			pciIoRemap.baseLow = mv_pci_io_base_get(pexHWInf) - IO_SPACE_REMAP;
-			pciIoRemap.baseHigh = 0; 		
+			pciIoRemap.baseHigh = 0;
 			pciIoRemap.size = mv_pci_io_size_get(pexHWInf);
 			mvCpuIfPexRemap(mv_pci_io_target_get(pexHWInf), &pciIoRemap);
 		}
@@ -165,7 +165,7 @@ void mv_pex_reinit(void)
 			continue;
 
 		/* init the PCI interface */
-		temp = mvSysPexInit(pexHWInf, MV_PEX_ROOT_COMPLEX);
+		temp = mvSysPexInit(pexHWInf, MV_PEX_ROOT_COMPLEX, pciIf);
 
 		if (MV_NO_SUCH == temp)
 		{
@@ -290,8 +290,8 @@ static int mv_pci_write_config(struct pci_bus *bus, unsigned int devfn,
 		int where, int size, u32 val)
 {
 	u32 bus_num,func,regOff,dev_no,temp, mask , shift;
-	struct pci_sys_data *sysdata = (struct pci_sys_data *)bus->sysdata;	
-	u32 pciIf = sysdata->mv_controller_num;		
+	struct pci_sys_data *sysdata = (struct pci_sys_data *)bus->sysdata;
+	u32 pciIf = sysdata->mv_controller_num;
 	u32 cfgCmd;
 
 	if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pciIf))
@@ -369,7 +369,7 @@ static struct pci_ops mv_pci_ops = {
 int __init mv_pex_setup(int nr, struct pci_sys_data *sys)
 {
 	struct resource *res;
-	u32 membase, iobase, index = 0;	
+	u32 membase, iobase, index = 0;
 	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
 	MV_U32 pexHWInf = 0;
 
@@ -383,7 +383,7 @@ int __init mv_pex_setup(int nr, struct pci_sys_data *sys)
 	if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pexHWInf))
 		return 0;
 
-	/* Allocate resources memory */	
+	/* Allocate resources memory */
 	res = kmalloc(sizeof(struct resource) * 2, GFP_KERNEL);
 	if (!res)
 	{
@@ -396,14 +396,14 @@ int __init mv_pex_setup(int nr, struct pci_sys_data *sys)
 	/* Save the H/W if number for this PEX bus */
 	sys->mv_controller_num = pexHWInf;
 	sys->map_irq = mv_get_irqmap_func[sys->mv_controller_num];
-	
+
 	membase = mv_pci_mem_base_get(sys->mv_controller_num);
 	if (mv_is_pci_io_mapped(sys->mv_controller_num)) {
 		iobase = mv_pci_io_base_get(sys->mv_controller_num);
 		res[index].start = iobase - IO_SPACE_REMAP;
 		res[index].end   = iobase - IO_SPACE_REMAP + mv_pci_io_size_get(sys->mv_controller_num)-1;
 		res[index].name  = "PCIx IO Primary";
-		res[index].flags = IORESOURCE_IO;		
+		res[index].flags = IORESOURCE_IO;
 		if (request_resource(&ioport_resource, &res[index]))
 			printk ("IO Request resource failed - Pci If %x\n",nr);
 		else
@@ -416,9 +416,9 @@ int __init mv_pex_setup(int nr, struct pci_sys_data *sys)
 
 	if (request_resource(&iomem_resource, &res[index]))
 		printk ("Memory Request resource failed - Pci If %x\n",nr);
- 
+
 	pci_add_resource(&sys->resources, &res[0]);
-	if (index > 0) 
+	if (index > 0)
 		pci_add_resource(&sys->resources, &res[1]);
 
 	sys->io_offset = 0x0;
@@ -428,7 +428,7 @@ int __init mv_pex_setup(int nr, struct pci_sys_data *sys)
 
 struct pci_bus * __devinit mv_pex_scan_bus(int nr, struct pci_sys_data *sys)
 {
-	struct pci_ops *ops = &mv_pci_ops;	
+	struct pci_ops *ops = &mv_pci_ops;
 	struct pci_bus *bus;
 	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
 	MV_U32 pexNextHWInf, ifnum;
@@ -455,7 +455,7 @@ struct pci_bus * __devinit mv_pex_scan_bus(int nr, struct pci_sys_data *sys)
 
 
 static int __init mv_map_irq_0(const struct pci_dev *dev, u8 slot, u8 pin)
-{	
+{
 	return IRQ_AURORA_PCIE0;
 }
 
diff --git a/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c b/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c
index 3e2b83f..c3081fb 100644
--- a/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c
+++ b/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c
@@ -69,7 +69,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "pex/mvPex.h"
 #include "pex/mvPexRegs.h"
 
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf)
 {
 	MV_PEX_HAL_DATA halData;
 	MV_UNIT_WIN_INFO addrWinMap[MAX_TARGETS + 1];
@@ -87,6 +87,7 @@ MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
 	halData.ctrlModel  = mvCtrlModelGet();
 	halData.ctrlFamily = mvCtrlDevFamilyIdGet(halData.ctrlModel);
 	halData.maxPexIf   = mvCtrlPexMaxIfGet();
+	halData.virtualIf = virtualIf;
 
 	if (mvPexInit(pexIf, pexType, &halData) != MV_OK) {
 		mvOsPrintf("%s: mvPexInit(pexIf = %d) failed\n", __func__, pexIf);
diff --git a/arch/arm/mach-avantalp/mv_hal_if/mvSysPexApi.h b/arch/arm/mach-avantalp/mv_hal_if/mvSysPexApi.h
index 1b6a6bf..051eb6d 100644
--- a/arch/arm/mach-avantalp/mv_hal_if/mvSysPexApi.h
+++ b/arch/arm/mach-avantalp/mv_hal_if/mvSysPexApi.h
@@ -66,6 +66,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define __MV_SYS_PEX_API_H__
 
 
-MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType);
+MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_U32 virtualIf);
 
 #endif
diff --git a/arch/arm/mach-avantalp/pex.c b/arch/arm/mach-avantalp/pex.c
index eb9a4a8..2cd9196 100644
--- a/arch/arm/mach-avantalp/pex.c
+++ b/arch/arm/mach-avantalp/pex.c
@@ -91,7 +91,7 @@ static void __init mv_pex_preinit(void)
 			continue;
 		}
 
-		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX) != MV_OK) {
+		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX, pci_if) != MV_OK) {
 			pr_warn("%s: Error: mvSysPexInit(%d) failed\n", __func__, pci_if);
 			pr_info("PCIe bus #%d: init failed, => disabling...", pci_if);
 			mvCtrlPwrClckSet(PEX_UNIT_ID, pci_if, MV_FALSE);
diff --git a/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.c b/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.c
index b032ab6..7373676 100644
--- a/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.c
+++ b/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.c
@@ -92,7 +92,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************/
 #if !defined (MV88F66XX)
-MV_STATUS mvPciIfInit(MV_U32 pciIf, PCI_IF_MODE pciIfmode)
+MV_STATUS mvPciIfInit(MV_U32 pciIf, PCI_IF_MODE pciIfmode, MV_U32 virtualIf)
 {
 	MV_PEX_TYPE pexType;
 	if (PCI_IF_MODE_HOST == pciIfmode) {
@@ -104,7 +104,7 @@ MV_STATUS mvPciIfInit(MV_U32 pciIf, PCI_IF_MODE pciIfmode)
 			   " end point\n", __func__, pciIf, pciIfmode);
 		return MV_FAIL;
 	}
-	return mvSysPexInit(pciIf, pexType);
+	return mvSysPexInit(pciIf, pexType, virtualIf);
 }
 #endif
 
diff --git a/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.h b/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.h
index 57358c0..7b2f2dc 100644
--- a/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.h
+++ b/arch/arm/plat-armada/mv_hal/pci-if/mvPciIf.h
@@ -93,7 +93,7 @@ typedef enum _mvPCIIfMode {
 /* Global Functions prototypes */
 
 /* mvPciIfInit - Initialize PCI interfaces*/
-MV_STATUS mvPciIfInit(MV_U32 pciIf, PCI_IF_MODE pciIfmode);
+MV_STATUS mvPciIfInit(MV_U32 pciIf, PCI_IF_MODE pciIfmode, MV_U32 virtualIf);
 
 /* mvPciIfConfigRead - Read from configuration space */
 MV_U32 mvPciIfConfigRead(MV_U32 pciIf, MV_U32 bus, MV_U32 dev, MV_U32 func, MV_U32 regOff);
diff --git a/arch/arm/plat-armada/mv_hal/pex/mvPex.c b/arch/arm/plat-armada/mv_hal/pex/mvPex.c
old mode 100755
new mode 100644
index 643b908..d22942b
--- a/arch/arm/plat-armada/mv_hal/pex/mvPex.c
+++ b/arch/arm/plat-armada/mv_hal/pex/mvPex.c
@@ -78,6 +78,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #else
 #define DB(x)
 #endif
+#define MV_PEX_IS_VALID(x)	(pexHalData[x].virtualIf >= pexHalData[x].maxPexIf)
 
 static MV_PEX_HAL_DATA pexHalData[MV_PEX_MAX_IF];
 
@@ -126,7 +127,7 @@ MV_STATUS mvPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType, MV_PEX_HAL_DATA *halData)
 			MV_REG_WRITE(PEX_DBG_CTRL_REG(pexIf), regVal);
 
 	}
-	
+
 	return MV_OK;
 }
 
@@ -152,7 +153,7 @@ MV_U32 mvPexModeGet(MV_U32 pexIf, MV_PEX_MODE *pexMode)
 	if (pexIf >= MV_PEX_MAX_IF)
 		return MV_BAD_PARAM;
 
-	
+
 	pexData = MV_REG_READ(PEX_CTRL_REG(pexIf));
 
 	switch (pexData & PXCR_DEV_TYPE_CTRL_MASK) {
@@ -222,7 +223,7 @@ MV_U32 mvPexConfigRead(MV_U32 pexIf, MV_U32 bus, MV_U32 dev, MV_U32 func, MV_U32
 
 	/* Parameter checking   */
 	if (PEX_DEFAULT_IF != pexIf) {
-		if (pexIf >= pexHalData[pexIf].maxPexIf) {
+		if (MV_PEX_IS_VALID(pexIf)) {
 			mvOsPrintf("mvPexConfigRead: ERR. Invalid PEX interface %d\n", pexIf);
 			return 0xFFFFFFFF;
 		}
@@ -341,7 +342,7 @@ MV_STATUS mvPexConfigWrite(MV_U32 pexIf, MV_U32 bus, MV_U32 dev, MV_U32 func, MV
 
 	/* Parameter checking   */
 	if (PEX_DEFAULT_IF != pexIf) {
-		if (pexIf >= pexHalData[pexIf].maxPexIf) {
+		if (MV_PEX_IS_VALID(pexIf)) {
 			mvOsPrintf("mvPexConfigWrite: ERR. Invalid PEX interface %d\n", pexIf);
 			return MV_ERROR;
 		}
@@ -454,7 +455,7 @@ MV_STATUS mvPexMasterEnable(MV_U32 pexIf, MV_BOOL enable)
 	MV_U32 pexCommandStatus;
 
 	/* Parameter checking   */
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexMasterEnable: ERR. Invalid PEX interface %d\n", pexIf);
 		return MV_ERROR;
 	}
@@ -498,7 +499,7 @@ MV_STATUS mvPexSlaveEnable(MV_U32 pexIf, MV_U32 bus, MV_U32 dev, MV_BOOL enable)
 	MV_U32 RegOffs;
 
 	/* Parameter checking   */
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexSlaveEnable: ERR. Invalid PEX interface %d\n", pexIf);
 		return MV_BAD_PARAM;
 	}
@@ -548,7 +549,7 @@ MV_STATUS mvPexLocalBusNumSet(MV_U32 pexIf, MV_U32 busNum)
 	MV_U32 pexStatus;
 
 	/* Parameter checking   */
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexLocalBusNumSet: ERR. Invalid PEX interface %d\n", pexIf);
 		return MV_BAD_PARAM;
 	}
@@ -593,7 +594,7 @@ MV_U32 mvPexLocalBusNumGet(MV_U32 pexIf)
 
 	/* Parameter checking   */
 	if (PEX_DEFAULT_IF != pexIf) {
-		if (pexIf >= pexHalData[pexIf].maxPexIf) {
+		if (MV_PEX_IS_VALID(pexIf)) {
 			mvOsPrintf("mvPexLocalBusNumGet: ERR. Invalid PEX interface %d\n", pexIf);
 			return 0xFFFFFFFF;
 		}
@@ -634,7 +635,7 @@ MV_STATUS mvPexLocalDevNumSet(MV_U32 pexIf, MV_U32 devNum)
 		return MV_BAD_PARAM;
 
 	/* Parameter checking   */
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexLocalDevNumSet: ERR. Invalid PEX interface %d\n", pexIf);
 		return MV_BAD_PARAM;
 	}
@@ -677,7 +678,7 @@ MV_U32 mvPexLocalDevNumGet(MV_U32 pexIf)
 	/* Parameter checking   */
 
 	if (PEX_DEFAULT_IF != pexIf) {
-		if (pexIf >= pexHalData[pexIf].maxPexIf) {
+		if (MV_PEX_IS_VALID(pexIf)) {
 			mvOsPrintf("mvPexLocalDevNumGet: ERR. Invalid PEX interface %d\n", pexIf);
 			return 0xFFFFFFFF;
 		}
@@ -694,7 +695,7 @@ MV_VOID mvPexPhyRegRead(MV_U32 pexIf, MV_U32 regOffset, MV_U16 *value)
 {
 
 	MV_U32 regAddr;
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexPhyRegRead: ERR. Invalid PEX interface %d\n", pexIf);
 		return;
 	}
@@ -707,7 +708,7 @@ MV_VOID mvPexPhyRegWrite(MV_U32 pexIf, MV_U32 regOffset, MV_U16 value)
 {
 
 	MV_U32 regAddr;
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexPhyRegWrite: ERR. Invalid PEX interface %d\n", pexIf);
 		return;
 	}
@@ -736,7 +737,7 @@ MV_STATUS mvPexActiveStateLinkPMEnable(MV_U32 pexIf, MV_BOOL enable)
 {
 	MV_U32 reg;
 
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexActiveStateLinkPMEnable: ERR. Invalid PEX interface %d\n", pexIf);
 		return MV_ERROR;
 	}
@@ -774,7 +775,7 @@ MV_STATUS mvPexActiveStateLinkPMEnable(MV_U32 pexIf, MV_BOOL enable)
 MV_U32 mvPexForceX1(MV_U32 pexIf)
 {
 	MV_U32 regData = 0;
-	if (pexIf >= pexHalData[pexIf].maxPexIf) {
+	if (MV_PEX_IS_VALID(pexIf)) {
 		mvOsPrintf("mvPexForceX1: ERR. Invalid PEX interface %d\n", pexIf);
 		return MV_BAD_PARAM;
 	}
diff --git a/arch/arm/plat-armada/mv_hal/pex/mvPex.h b/arch/arm/plat-armada/mv_hal/pex/mvPex.h
index fbc2051..40768ee 100644
--- a/arch/arm/plat-armada/mv_hal/pex/mvPex.h
+++ b/arch/arm/plat-armada/mv_hal/pex/mvPex.h
@@ -150,6 +150,7 @@ extern "C" {
 		MV_U16 ctrlModel;
 		MV_U16 maxPexIf;
 		MV_U32 ctrlFamily;
+		MV_U32 virtualIf;
 	} MV_PEX_HAL_DATA;
 
 	/* Global Functions prototypes */
-- 
1.7.5.4

