From 6dfa186abf267bca9ba6ba48cfc789d8ea4cf063 Mon Sep 17 00:00:00 2001
From: Xi Gu <xigu@marvell.com>
Date: Tue, 11 Feb 2014 07:09:16 +0800
Subject: [PATCH 1349/1825] pon: alp: add PON HAL sub module

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 57aedf05387daa98cc4ddade13696fe0ef8d6eff

Signed-off-by: Xi Gu <xigu@marvell.com>

Change-Id: I6e7ac05b7c811bb7fb9e705916d5da8550275759
Reviewed-on: http://vgitil04.il.marvell.com:8080/5593
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h |  412 +
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.c     | 9369 +++++++++++++++++++++
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.h     |  845 ++
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c    | 1299 +++
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h    |  830 ++
 5 files changed, 12755 insertions(+), 0 deletions(-)
 create mode 100755 arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h
 create mode 100755 arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.c
 create mode 100755 arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.h
 create mode 100755 arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c
 create mode 100755 arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h

diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h
new file mode 100755
index 0000000..199039b
--- /dev/null
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h
@@ -0,0 +1,412 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+        this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimer in the
+        documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+        used to endorse or promote products derived from this software without
+        specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+
+#ifndef _ONU_GPON_DEFINES_H
+#define _ONU_GPON_DEFINES_H
+
+/* Include Files
+   ------------------------------------------------------------------------------*/
+
+/* Definitions
+   ------------------------------------------------------------------------------*/
+
+#define MV_6601_DEV_ID  0x11 /* TO BE REMOVED */
+
+#ifdef CONFIG_PON_Z1
+#define PON_Z1
+#endif /* CONFIG_PON_Z1 */
+
+#ifdef CONFIG_PON_A0
+#define PON_A0
+#endif /* CONFIG_PON_A0 */
+
+#ifdef CONFIG_PON_FPGA
+#define PON_FPGA
+#endif /* CONFIG_PON_FPGA */
+
+#define ONU_GPON_MAX_NUM_OF_T_CONTS (CONFIG_MV_PON_TCONTS)
+#define EPON_MAX_MAC_NUM (CONFIG_MV_EPON_LLID)
+#if defined(ONU_GPON_MAX_NUM_OF_T_CONTS) && (ONU_GPON_MAX_NUM_OF_T_CONTS < EPON_MAX_MAC_NUM)
+#error ERROR: Invalid Init Params - #num of T-Conts < #num of LLID
+#endif
+
+#ifdef CONFIG_MV_GPON
+
+#ifdef CONFIG_MV_GPON_STATIC_GEM_PORT
+#define MV_GPON_STATIC_GEM_PORT
+#endif /* CONFIG_MV_GPON_STATIC_GEM_PORT */
+
+#ifdef CONFIG_MV_GPON_DEBUG_PRINT
+#define MV_GPON_DEBUG_PRINT
+#endif /* CONFIG_MV_GPON_DEBUG_PRINT */
+
+#ifdef CONFIG_MV_GPON_PERFORMANCE_CHECK
+#define MV_GPON_PERFORMANCE_CHECK
+#endif /* CONFIG_MV_GPON_PERFORMANCE_CHECK */
+
+#ifdef CONFIG_MV_GPON_HW_INTERRUPT
+#define MV_GPON_HW_INTERRUPT
+#endif  /* CONFIG_MV_GPON_HW_INTERRUPT */
+
+#endif  /* CONFIG_MV_GPON */
+
+#ifdef CONFIG_MV_EPON
+
+#ifdef CONFIG_MV_EPON_HW_INTERRUPT
+#define MV_EPON_HW_INTERRUPT
+#endif /* CONFIG_MV_EPON_HW_INTERRUPT */
+
+#define ONU_EPON_DBA_LOW_RATE_VALUE             (CONFIG_MV_EPON_DBA_LOW_RATE_VALUE)
+#define ONU_EPON_DBA_LOW_RATE_THRESHOLD         (CONFIG_MV_EPON_DBA_LOW_RATE_THRESHOLD)
+#define ONU_EPON_DBA_LOW_RATE_CONST_VALUE       (CONFIG_MV_EPON_DBA_LOW_RATE_CONST_VALUE)
+#define ONU_EPON_DBA_HIGH_RATE_THRESHOLD        (CONFIG_MV_EPON_DBA_HIGH_RATE_THRESHOLD)
+#define ONU_EPON_DBA_HIGH_RATE_VALUE            (CONFIG_MV_EPON_DBA_HIGH_RATE_VALUE)
+
+#endif /* CONFIG_MV_EPON */
+
+/* T-CONT mask */
+#define ONU_GPON_TCONT_MASK                     (0xf)
+#define ONU_GPON_TCONT_BIT_WIDTH                (4)  /* bit number used by T-CONT */
+
+/* GEM MAC Ports */
+#define GPON_ONU_MAC_OPEN_DS_BROADCAST_PORT     (1000)
+#define GPON_ONU_MAC_SYNC_DS_BROADCAST_PORT     (500)
+#define GPON_US_622_PLOU_TOTAL_BYTES_SIZE       (64 / 8)
+#define GPON_US_1244_PLOU_TOTAL_BYTES_SIZE      (96 / 8)
+#define GPON_ONU_MAX_GEM_PORTS                  (4096)
+
+/* gpon definitions */
+#define ONU_GPON_NUM_OF_EVENTS                  (64)
+#define ONU_GPON_NUM_OF_STATES                  (8)
+#define ONU_GPON_NUM_OF_ALARMS                  (14)
+
+#define ONU_GPON_UNDEFINED_ONU_ID               (0xFF)
+#define ONU_GPON_BROADCAST_ONU_ID               (0xFF)
+
+#define ONU_GPON_DS_DEF_RATE                    (2488)  /* M Bit per sec */
+
+/* BER definitions */
+#define ONU_GPON_DEF_INTERNAL_BER_INTERVAL      (10)    /* 10 seconds */
+#define ONU_GPON_MAX_INTERNAL_BER_INTERVAL      (10)    /* 10 seconds */
+#define ONU_GPON_BER_DEF_COEFF_NUMERATOR        (1)
+#define ONU_GPON_BER_DEF_COEFF_DENOMINATOR      (10)
+#define ONU_GPON_DEF_SF_THRESHOLD               (5)
+#define ONU_GPON_DEF_SD_THRESHOLD               (9)
+#define ONU_GPON_MAX_SF_THRESHOLD               (9)
+#define ONU_GPON_MIN_SF_THRESHOLD               (4)
+#define ONU_GPON_MAX_SD_THRESHOLD               (8)
+#define ONU_GPON_MIN_SD_THRESHOLD               (3)
+#define ONU_GPON_DEF_REI_SEQ_NUM                (0)
+
+/* overhead message status options */
+#define ONU_GPON_OVER_MSG_STATUS_XX             (0xC0)
+#define ONU_GPON_OVER_MSG_STATUS_E              (0x20)
+#define ONU_GPON_OVER_MSG_STATUS_M              (0x10)
+#define ONU_GPON_OVER_MSG_STATUS_SS             (0x0C)
+#define ONU_GPON_OVER_MSG_STATUS_PP             (0x03)
+
+/* Dying Gasp definitions */
+#define ONU_GPON_DG_DEF_DEBUG_THRESH            (16000000)
+#define ONU_GPON_DG_DEF_NORMAL_THRESH           (1600)
+#define ONU_GPON_DG_DEF_PIN_NUMBER              (1)
+#define ONU_GPON_DG_DEF_STATUS                  (0)
+#define ONU_GPON_DG_ACTIVE_HIGH                 (1)
+#define ONU_GPON_DG_ACTIVE_LOW                  (3)
+
+/* port definitions */
+#define ONU_GPON_PORT_ID_SHIFT                  (4)
+
+/* States */
+/* ====== */
+#define ONU_GPON_01_INIT                        (0x01)
+#define ONU_GPON_02_STANDBY                     (0x02)
+#define ONU_GPON_03_SERIAL_NUM                  (0x03)
+#define ONU_GPON_04_RANGING                     (0x04)
+#define ONU_GPON_05_OPERATION                   (0x05)
+#define ONU_GPON_06_POPUP                       (0x06)
+#define ONU_GPON_07_EMERGANCY_STOP              (0x07)
+
+/* Messages */
+/* ======== */
+
+/* Downstream */
+#define ONU_GPON_DS_MSG_OVERHEAD                (0x01)
+#define ONU_GPON_DS_MSG_SN_MASK                 (0x02)
+#define ONU_GPON_DS_MSG_ASSIGN_ONU_ID           (0x03)
+#define ONU_GPON_DS_MSG_RANGING_TIME            (0x04)
+#define ONU_GPON_DS_MSG_DACT_ONU_ID             (0x05)
+#define ONU_GPON_DS_MSG_DIS_SN                  (0x06)
+#define ONU_GPON_DS_MSG_CONFIG_VP_VC            (0x07)
+#define ONU_GPON_DS_MSG_ENCRYPT_VPI_PORT_ID     (0x08)
+#define ONU_GPON_DS_MSG_REQ_PASSWORD            (0x09)
+#define ONU_GPON_DS_MSG_ASSIGN_ALLOC_ID         (0x0A)
+#define ONU_GPON_DS_MSG_NO_MESSAGE              (0x0B)
+#define ONU_GPON_DS_MSG_POPUP                   (0x0C)
+#define ONU_GPON_DS_MSG_REQ_KEY                 (0x0D)
+#define ONU_GPON_DS_MSG_CONFIG_PORT_ID          (0x0E)
+#define ONU_GPON_DS_MSG_PHYSICAL_EQUIP_ERR      (0x0F)
+#define ONU_GPON_DS_MSG_CHANGE_POWER_LEVEL      (0x10)
+#define ONU_GPON_DS_MSG_PST                     (0x11)
+#define ONU_GPON_DS_MSG_BER_INTERVAL            (0x12)
+#define ONU_GPON_DS_MSG_KEY_SWITCH_TIME         (0x13)
+#define ONU_GPON_DS_MSG_EXT_BURST_LEN           (0x14)
+#define ONU_GPON_DS_MSG_LAST                    (0x14)
+
+/* Upstream */
+#define ONU_GPON_US_MSG_SN_ONU                  (0x01)
+#define ONU_GPON_US_MSG_PASSWORD                (0x02)
+#define ONU_GPON_US_MSG_DYING_GASP              (0x03)
+#define ONU_GPON_US_MSG_NO_MESSAGE              (0x04)
+#define ONU_GPON_US_MSG_ENCRYPT_KEY             (0x05)
+#define ONU_GPON_US_MSG_PHYSICAL_EQUIP_ERR      (0x06)
+#define ONU_GPON_US_MSG_PST                     (0x07)
+#define ONU_GPON_US_MSG_REI                     (0x08)
+#define ONU_GPON_US_MSG_ACK                     (0x09)
+#define ONU_GPON_US_MSG_LAST                    (0x09)
+
+/* Alarms */
+/* ====== */
+#define ONU_GPON_EVENT_ALARM_LOS                (0x0)
+#define ONU_GPON_EVENT_ALARM_LOF                (0x1)
+#define ONU_GPON_EVENT_ALARM_LCD                (0x2)
+#define ONU_GPON_EVENT_ALARM_LCDG               (0x3)
+#define ONU_GPON_EVENT_ALARM_TF                 (0x4)
+#define ONU_GPON_EVENT_ALARM_SUF                (0x5)
+#define ONU_GPON_EVENT_ALARM_MEM                (0x6)
+#define ONU_GPON_EVENT_ALARM_DACT               (0x7)
+#define ONU_GPON_EVENT_ALARM_DIS                (0x8)
+#define ONU_GPON_EVENT_ALARM_MIS                (0x9)
+#define ONU_GPON_EVENT_ALARM_PEE                (0xA)
+#define ONU_GPON_EVENT_ALARM_RDI                (0xB)
+
+/* Generate alarm */
+#define ONU_GPON_ALARM_GEN_BASE                 (0x20)
+
+/* Cancel alarm */
+#define ONU_GPON_ALARM_CAN_BASE                 (0x30)
+
+/* Events */
+/* ====== */
+
+/* Messages */
+#define ONU_GPON_EVENT_MSG_OVERHEAD             (ONU_GPON_DS_MSG_OVERHEAD)
+#define ONU_GPON_EVENT_MSG_SN_MASK              (ONU_GPON_DS_MSG_SN_MASK)
+#define ONU_GPON_EVENT_MSG_ASSIGN_ONU_ID        (ONU_GPON_DS_MSG_ASSIGN_ONU_ID)
+#define ONU_GPON_EVENT_MSG_RANGING_TIME         (ONU_GPON_DS_MSG_RANGING_TIME)
+#define ONU_GPON_EVENT_MSG_DACT_ONU_ID          (ONU_GPON_DS_MSG_DACT_ONU_ID)
+#define ONU_GPON_EVENT_MSG_DIS_SN               (ONU_GPON_DS_MSG_DIS_SN)
+#define ONU_GPON_EVENT_MSG_CONFIG_VP_VC         (ONU_GPON_DS_MSG_CONFIG_VP_VC)
+#define ONU_GPON_EVENT_MSG_ENCRYPT_VPI_PORT_ID  (ONU_GPON_DS_MSG_ENCRYPT_VPI_PORT_ID)
+#define ONU_GPON_EVENT_MSG_REQ_PASSWORD         (ONU_GPON_DS_MSG_REQ_PASSWORD)
+#define ONU_GPON_EVENT_MSG_ASSIGN_ALLOC_ID      (ONU_GPON_DS_MSG_ASSIGN_ALLOC_ID)
+#define ONU_GPON_EVENT_MSG_NO_MESSAGE           (ONU_GPON_DS_MSG_NO_MESSAGE)
+#define ONU_GPON_EVENT_MSG_POPUP                (ONU_GPON_DS_MSG_POPUP)
+#define ONU_GPON_EVENT_MSG_REQ_KEY              (ONU_GPON_DS_MSG_REQ_KEY)
+#define ONU_GPON_EVENT_MSG_CONFIG_PORT_ID       (ONU_GPON_DS_MSG_CONFIG_PORT_ID)
+#define ONU_GPON_EVENT_MSG_PHYSICAL_EQUIP_ERR   (ONU_GPON_DS_MSG_PHYSICAL_EQUIP_ERR)
+#define ONU_GPON_EVENT_MSG_CHANGE_POWER_LEVEL   (ONU_GPON_DS_MSG_CHANGE_POWER_LEVEL)
+#define ONU_GPON_EVENT_MSG_PST                  (ONU_GPON_DS_MSG_PST)
+#define ONU_GPON_EVENT_MSG_BER_INTERVAL         (ONU_GPON_DS_MSG_BER_INTERVAL)
+#define ONU_GPON_EVENT_MSG_KEY_SWITCH_TIME      (ONU_GPON_DS_MSG_KEY_SWITCH_TIME)
+#define ONU_GPON_EVENT_MSG_EXT_BURST_LEN        (ONU_GPON_DS_MSG_EXT_BURST_LEN)
+
+/* Alarms */
+#define ONU_GPON_EVENT_ALM_GEN_BASE             (ONU_GPON_ALARM_GEN_BASE)
+#define ONU_GPON_EVENT_ALM_GEN_LOS              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_LOS )
+#define ONU_GPON_EVENT_ALM_GEN_LOF              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_LOF )
+#define ONU_GPON_EVENT_ALM_GEN_LCDA             (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_LCDA)
+#define ONU_GPON_EVENT_ALM_GEN_LCDG             (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_LCDG)
+#define ONU_GPON_EVENT_ALM_GEN_TF               (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_TF  )
+#define ONU_GPON_EVENT_ALM_GEN_SUF              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_SUF )
+#define ONU_GPON_EVENT_ALM_GEN_MEM              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_MEM )
+#define ONU_GPON_EVENT_ALM_GEN_DACT             (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_DACT)
+#define ONU_GPON_EVENT_ALM_GEN_DIS              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_DIS )
+#define ONU_GPON_EVENT_ALM_GEN_MIS              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_MIS )
+#define ONU_GPON_EVENT_ALM_GEN_PEE              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_PEE )
+#define ONU_GPON_EVENT_ALM_GEN_RDI              (ONU_GPON_ALARM_GEN_BASE + ONU_GPON_EVENT_ALARM_RDI )
+
+#define ONU_GPON_EVENT_ALM_CAN_BASE             (ONU_GPON_ALARM_CAN_BASE)
+#define ONU_GPON_EVENT_ALM_CAN_LOS              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_LOS )
+#define ONU_GPON_EVENT_ALM_CAN_LOF              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_LOF )
+#define ONU_GPON_EVENT_ALM_CAN_LCDA             (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_LCDA)
+#define ONU_GPON_EVENT_ALM_CAN_LCDG             (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_LCDG)
+#define ONU_GPON_EVENT_ALM_CAN_TF               (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_TF  )
+#define ONU_GPON_EVENT_ALM_CAN_SUF              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_SUF )
+#define ONU_GPON_EVENT_ALM_CAN_MEM              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_MEM )
+#define ONU_GPON_EVENT_ALM_CAN_DACT             (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_DACT)
+#define ONU_GPON_EVENT_ALM_CAN_DIS              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_DIS )
+#define ONU_GPON_EVENT_ALM_CAN_MIS              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_MIS )
+#define ONU_GPON_EVENT_ALM_CAN_PEE              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_PEE )
+#define ONU_GPON_EVENT_ALM_CAN_RDI              (ONU_GPON_ALARM_CAN_BASE + ONU_GPON_EVENT_ALARM_RDI )
+
+/* Default Serial Number - Before init time */
+#define ONU_GPON_SN_DEF_BYTE_1                  (0x01)
+#define ONU_GPON_SN_DEF_BYTE_2                  (0x02)
+#define ONU_GPON_SN_DEF_BYTE_3                  (0x03)
+#define ONU_GPON_SN_DEF_BYTE_4                  (0x04)
+#define ONU_GPON_SN_DEF_BYTE_5                  (0x05)
+#define ONU_GPON_SN_DEF_BYTE_6                  (0x06)
+#define ONU_GPON_SN_DEF_BYTE_7                  (0x07)
+#define ONU_GPON_SN_DEF_BYTE_8                  (0x08)
+
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_01           (ONU_GPON_UNDEFINED_ONU_ID) /* should be update after assign onu Id */
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_02           (ONU_GPON_US_MSG_NO_MESSAGE)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_03           (0x01)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_04           (0x02)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_05           (0x03)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_06           (0x04)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_07           (0x05)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_08           (0x06)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_09           (0x07)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_10           (0x08)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_11           (0x09)
+#define ONU_GPON_IDLE_MSG_DEF_BYTE_12           (0x0A)
+
+#define ONU_GPON_SN_MSG_DEF_BYTE_01             (ONU_GPON_UNDEFINED_ONU_ID) /* should be update after assign onu Id */
+#define ONU_GPON_SN_MSG_DEF_BYTE_02             (ONU_GPON_US_MSG_SN_ONU)
+#define ONU_GPON_SN_MSG_DEF_BYTE_03             (ONU_GPON_SN_DEF_BYTE_1)
+#define ONU_GPON_SN_MSG_DEF_BYTE_04             (ONU_GPON_SN_DEF_BYTE_2)
+#define ONU_GPON_SN_MSG_DEF_BYTE_05             (ONU_GPON_SN_DEF_BYTE_3)
+#define ONU_GPON_SN_MSG_DEF_BYTE_06             (ONU_GPON_SN_DEF_BYTE_4)
+#define ONU_GPON_SN_MSG_DEF_BYTE_07             (ONU_GPON_SN_DEF_BYTE_5)
+#define ONU_GPON_SN_MSG_DEF_BYTE_08             (ONU_GPON_SN_DEF_BYTE_6)
+#define ONU_GPON_SN_MSG_DEF_BYTE_09             (ONU_GPON_SN_DEF_BYTE_7)
+#define ONU_GPON_SN_MSG_DEF_BYTE_10             (ONU_GPON_SN_DEF_BYTE_8)
+#define ONU_GPON_SN_MSG_DEF_BYTE_11             (0x00)
+#define ONU_GPON_SN_MSG_DEF_BYTE_12             (0x05)     /* GEM Supported / Medium Power */
+
+#define ONU_GPON_SN_MSK_GEN_ENA                 (MV_FALSE)
+#define ONU_GPON_SN_MSK_DEF_MATCH               (MV_TRUE)
+
+#define ONU_GPON_SN_DEFAULT                     { 'M', 'R', 'V', 'L', '9', '9', '9', '9' }
+#define ONU_GPON_PASSWORD_DEFAULT               { '1', '2', '3', '4', '5', '6', '7', '8', '9', '0' }
+
+#define ONU_DBA_DEF_HIGHEST_QUEUE               (7)
+#define ONU_DBA_MAX_QUEUE                       (8)
+
+/* MIB Counters - the follow are element numbers in array
+ *******************************************************************************/
+#define ONU_MIB_PM_GoodOctetsReceived_low           0           // (0x0)
+#define ONU_MIB_PM_GoodOctetsReceived_high          1           // (0x4)
+#define ONU_MIB_PM_BadOctetsReceived                2           // (0x8)
+#define ONU_MIB_PM_MACTransError                    3           // (0xC)
+#define ONU_MIB_PM_GoodFramesReceived               4           // (0x10)
+#define ONU_MIB_PM_BadFramesReceived                5           // (0x14)
+#define ONU_MIB_PM_BroadcastFramesReceived          6           // (0x18)
+#define ONU_MIB_PM_MulticastFramesReceived          7           // (0x1C)
+#define ONU_MIB_PM_Frames64Octets                   8           // (0x20)
+#define ONU_MIB_PM_Frames65to127Octets              9           // (0x24)
+#define ONU_MIB_PM_Frames128to255Octets             10          // (0x28)
+#define ONU_MIB_PM_Frames256to511Octets             11          // (0x2C)
+#define ONU_MIB_PM_Frames512to1023Octets            12          // (0x30)
+#define ONU_MIB_PM_Frames1024toMaxOctets            13          // (0x34)
+#define ONU_MIB_PM_GoodOctetsSent_low               14          // (0x38)
+#define ONU_MIB_PM_GoodOctetsSent_high              15          // (0x3C)
+#define ONU_MIB_PM_GoodFramesSent                   16          // (0x40)
+#define ONU_MIB_PM_MulticastFramesSent              18          // (0x48)
+#define ONU_MIB_PM_BroadcastFramesSent              19          // (0x4C)
+
+/* MIB Counters - the follow are element numbers in array
+ *******************************************************************************/
+#define ONU_MIB_PM_RX_MIB_Control                   0           // (0x0)
+#define ONU_MIB_PM_TX_MIB_Control                   1           // (0x4)
+
+/* MIB Counter Control - valid,counterset,gemport
+ *******************************************************************************/
+#define MIB_COUNTER_CONTROL_VALID_BIT           (1)
+#define MIB_COUNTER_CONTROL_INVALID_BIT         (0)
+#define MAKE_MIB_COUNTER_CONTROL(v, c, g)         ((((v) & 0x1) << 17) | (((c) & 0x1F) << 12) | ((g) & 0xFFF))
+
+/* Enums
+   ------------------------------------------------------------------------------*/
+typedef enum {
+	ONU_GPON_PREM_TYPE_01        = 0,
+	ONU_GPON_PREM_TYPE_02        = 1,
+	ONU_GPON_PREM_TYPE_03        = 2
+} E_OnuOverheadPreambleType;
+
+typedef enum {
+	ONU_GPON_DELM_BYTE_01        = 0,
+	ONU_GPON_DELM_BYTE_02        = 1,
+	ONU_GPON_DELM_BYTE_03        = 2
+} E_OnuOverheadDelimiterByte;
+
+typedef enum {
+	ONU_GPON_PREM_TYPE_03_DEF    = 0,
+	ONU_GPON_PREM_TYPE_03_CHNG   = 1
+} E_OnuOverheadExtPreambleType3;
+
+/* Typedefs
+   ------------------------------------------------------------------------------*/
+
+/* Global variables
+   ------------------------------------------------------------------------------*/
+
+/* Global functions
+   ------------------------------------------------------------------------------*/
+
+/* Macros
+   ------------------------------------------------------------------------------*/
+
+#endif /* _ONU_GPON_DEFINES_H */
\ No newline at end of file
diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.c b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.c
new file mode 100755
index 0000000..05e86e1
--- /dev/null
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.c
@@ -0,0 +1,9369 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+        this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimer in the
+        documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+        used to endorse or promote products derived from this software without
+        specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+
+/* Include Files
+   ------------------------------------------------------------------------------*/
+#include "mvTypes.h"
+#include "mvOs.h"
+
+#include "mvPonOnuDefines.h"
+#include "mvPonOnuRegs.h"
+#include "mvPonOnuMac.h"
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           =========   =========   =========   ====      ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==     ==   ==          ==     ==   ==     == ==           == */
+/* ==           ==     ==   ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+/* Local Constant
+   ------------------------------------------------------------------------------*/
+#define __FILE_DESC__ "mv_hal/pon/mvPonOnuMac.c"
+
+/* Global Variables
+   ------------------------------------------------------------------------------*/
+
+/* Local Variables
+   ------------------------------------------------------------------------------*/
+MV_U32 onuGponPortAesStatusImage[GPON_ONU_MAX_GEM_PORTS / 32];
+MV_BOOL onuGponPortValidStatusImage[GPON_ONU_MAX_GEM_PORTS / 32];
+S_MacTxPloamPm mvOnuGponMacPloamCnt;
+S_MacFifoCtrl fifoCtrl;
+MV_U32 fifoReadIdx  = 0;
+MV_U32 fifoWriteIdx = 0;
+
+MV_32 fifoAuditEnter   = 0;
+MV_32 fifoAuditAction  = 0;
+MV_32 fifoMacMsgSend   = 0;
+MV_32 fifoMacMsgAdd    = 0;
+MV_32 fifoMacMsgFree   = 0;
+MV_32 fifoMacPloamSend = 0;
+MV_32 fifoSupported    = 1;
+
+/* Export Functions
+   ------------------------------------------------------------------------------*/
+
+/* Local Functions
+   ------------------------------------------------------------------------------*/
+static inline MV_STATUS mvOnuGponMacFifoMsgAlloc(MV_U32 **buffer, MV_U32 *bufferIndex);
+static inline void      mvOnuGponMacFifoMsgSend(MV_U32 bufferIndex);
+static inline MV_STATUS mvOnuGponMacFifoMsgRece(MV_U32 **buffer, MV_U32 *bufferIndex);
+static inline void      mvOnuGponMacFifoMsgFree(MV_U32 bufferIndex);
+static inline int       mvOnuGponMacFifoEmpty(void);
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                           RX Low Level Routines                            */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacVersionGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the asic version
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     asic version
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacVersionGet(MV_U32 *version)
+{
+	MV_STATUS rcode;
+
+	rcode = asicOntGlbRegRead(mvAsicReg_GPON_GEN_MAC_VERSION, version, 0);
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx config enable register
+**
+**  PARAMETERS:  MV_BOOL enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxConfigSet(MV_BOOL enable)
+{
+	MV_STATUS status;
+	MV_U32 enBit;
+
+	enBit = (enable == MV_TRUE) ? 1 : 0;
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_RX_CONFIG_EN, enBit, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxConfigBitOrderSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx config bit order register
+**
+**  PARAMETERS:  MV_BOOL enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxConfigBitOrderSet(MV_U32 value)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_RX_CONFIG_BIT_ORDER, value, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPsaConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx PSA config register
+**
+**  PARAMETERS:  MV_U32 syncFsmM1
+**               MV_U32 syncFsmM2
+**               MV_U32 syncFsmM3
+**               MV_U32 fecHyst
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPsaConfigSet(MV_U32 syncFsmM1,
+				     MV_U32 syncFsmM2,
+				     MV_U32 syncFsmM3,
+				     MV_U32 fecHyst)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_RX_PSA_CONFIG_SFM1, syncFsmM1, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PSA_CONFIG_SFM2, syncFsmM2, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PSA_CONFIG_SFM3, syncFsmM3, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PSA_CONFIG_FHM1, fecHyst, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxFecHysteresisSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx PSA FEC Hysteresis config register
+**
+**  PARAMETERS:  MV_U32 fecHyst
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxFecHysteresisSet(MV_U32 fecHyst)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_RX_PSA_CONFIG_FHM1, fecHyst, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxFecConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx FEC config register
+**
+**  PARAMETERS:  MV_BOOL swIndication
+**               MV_BOOL forceSw
+**               MV_BOOL ignoreParity
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxFecConfigSet(MV_BOOL swIndication,
+				     MV_BOOL forceSw,
+				     MV_BOOL ignoreParity)
+{
+	MV_STATUS status;
+	MV_U32 swiBit;
+	MV_U32 fswBit;
+	MV_U32 ipaBit;
+
+	swiBit  = (swIndication == MV_TRUE) ? 1 : 0;
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_RX_FEC_CONFIG_SWVAL, swiBit, 0);
+	fswBit  = (forceSw == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_FEC_CONFIG_FSW, fswBit, 0);
+	ipaBit  = (ignoreParity == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_FEC_CONFIG_IGNP, ipaBit, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxFecStatusGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get Rx FEC Ind register
+**
+**  PARAMETERS:  MV_U32 *fecStatus
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxFecStatusGet(MV_U32 *fecStatus)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_FEC_CONFIG_IND, fecStatus, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPloamDataGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx Ploam data
+**
+**  PARAMETERS:  MV_U32 *ploamData
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamDataGet(MV_U32 *ploamData)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLOAMD_DATA_READ, ploamData, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPloamDataUsedGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the Rx ploam fifo size
+**
+**  PARAMETERS:  MV_U32 *ploamFifoSize
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamDataUsedGet(MV_U32 *ploamFifoSize)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLOAMD_DATA_USED, ploamFifoSize, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPlenConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx Plen config register
+**
+**  PARAMETERS:  MV_BOOL forceNum
+**               MV_BOOL useForce
+**               MV_BOOL ignDiff
+**               MV_BOOL notFix
+**               MV_BOOL ignCrc
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPlenConfigSet(MV_BOOL forceNum,
+				      MV_BOOL useForce,
+				      MV_BOOL ignDiff,
+				      MV_BOOL notFix,
+				      MV_BOOL ignCrc)
+{
+	MV_STATUS status;
+	MV_U32 fnBit;
+	MV_U32 ufBit;
+	MV_U32 idBit;
+	MV_U32 nfBit;
+	MV_U32 icBit;
+
+	fnBit   = (forceNum == MV_TRUE) ? 1 : 0;
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLEND_CONFIG_FN, fnBit, 0);
+	ufBit   = (useForce == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLEND_CONFIG_UF, ufBit, 0);
+	idBit   = (ignDiff == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLEND_CONFIG_IGND, idBit, 0);
+	nfBit   = (notFix == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLEND_CONFIG_DFIX, nfBit, 0);
+	icBit   = (ignCrc == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLEND_CONFIG_IGNC, icBit, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPlenConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx Ploam config register
+**
+**  PARAMETERS:  MV_BOOL ignCrc
+**               MV_BOOL ignBrd
+**               MV_BOOL fwdAll
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamConfigSet(MV_BOOL ignCrc,
+				       MV_BOOL ignBrd,
+				       MV_BOOL fwdAll)
+{
+	MV_STATUS status;
+	MV_U32 icBit;
+	MV_U32 igBit;
+	MV_U32 faBit;
+
+	icBit   = (ignCrc == MV_TRUE) ? 1 : 0;
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNC, icBit, 0);
+	igBit   = (ignBrd == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNB, igBit, 0);
+	faBit   = (fwdAll == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_PLOAMD_CONFIG_FALL, faBit, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxBwMapConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Rx BW Map config register
+**
+**  PARAMETERS:  MV_U32  minSaDelta
+**               MV_BOOL notCrcFix
+**               MV_BOOL ignCrc
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxBwMapConfigSet(MV_U32 minSaDelta,
+				       MV_BOOL notCrcFix,
+				       MV_BOOL ignCrc)
+{
+	MV_STATUS status;
+	MV_U32 ncfBit;
+	MV_U32 icBit;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_RX_BWMAP_CONFIG_MSD, minSaDelta, 0);
+	ncfBit  = (notCrcFix == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_BWMAP_CONFIG_DFIX, ncfBit, 0);
+	icBit   = (ignCrc == MV_TRUE) ? 1 : 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_BWMAP_CONFIG_IGNC, icBit, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxBwMapSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the onu Tx bw map table
+**
+**  PARAMETERS:  MV_U32  entry
+**               MV_U32  allocId
+**               MV_U32  tcontCnt
+**               MV_BOOL enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxBwMapSet(MV_U32 entry,
+				 MV_U32 allocId,
+				 MV_U32 tcontCnt,
+				 MV_BOOL enable)
+{
+	MV_STATUS status;
+	MV_U32 enableVal;
+
+	enableVal = (enable == MV_TRUE) ? 1 : 0;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_RX_BW_MAP_TCN, tcontCnt, entry);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_BW_MAP_EN, enableVal, entry);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_RX_BW_MAP_ALID, allocId, entry);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxBwMapGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the onu Tx bw translation table
+**
+**  PARAMETERS:  MV_U32 entry,
+**               MV_U32 *allocId,
+**               MV_U32 *enable,
+**               MV_U32 *tcontCnt
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxBwMapGet(MV_U32 entry,
+				 MV_U32 *allocId,
+				 MV_BOOL *enable,
+				 MV_U32 *tcontCnt)
+{
+	MV_STATUS status;
+	MV_U32 enableVal;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_RX_BW_MAP_TCN, tcontCnt, entry);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_RX_BW_MAP_EN, &enableVal, entry);
+	*enable = (enableVal == 0) ? MV_FALSE : MV_TRUE;
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_RX_BW_MAP_ALID, allocId, entry);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxEqualizationDelaySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the onu equalization delay
+**
+**  PARAMETERS:  MV_U32 delay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxEqualizationDelaySet(MV_U32 delay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_RX_EQULIZATION_DELAY, delay, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxEqualizationDelayGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the onu equalization delay
+**
+**  PARAMETERS:  MV_U32 *delay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxEqualizationDelayGet(MV_U32 *delay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_EQULIZATION_DELAY, delay, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxInternalDelaySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the onu const delay
+**
+**  PARAMETERS:  MV_U32 txConstDelay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxInternalDelaySet(MV_U32 delay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_RX_INTERNAL_DELAY, delay, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxInternalDelayGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the onu const delay
+**
+**  PARAMETERS:  MV_U32 *txConstDelay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxInternalDelayGet(MV_U32 *delay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_INTERNAL_DELAY, delay, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxSuperFrameCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function reads Super Frame Counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxSuperFrameCounterGet(MV_U32 *counter)
+{
+	return asicOntGlbRegRead(mvAsicReg_GPON_RX_SFRAME_COUNTER, counter, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxSuperFrameCounterSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets Super Frame Counter
+**
+**  PARAMETERS:  MV_U32 counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxSuperFrameCounterSet(MV_U32 counter)
+{
+	return asicOntGlbRegWrite(mvAsicReg_GPON_RX_SFRAME_COUNTER, counter, 0);
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                           TX Low Level Routines                            */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxDelimiterSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx delimiter
+**
+**  PARAMETERS:  MV_U32 delimiterPattern
+**               MV_U32 delimiterSize
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxDelimiterSet(MV_U32 delimiterPattern, MV_U32 delimiterSize)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_TX_DELIMITER_PAT, delimiterPattern, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_DELIMITER_SIZE, delimiterSize, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxDelimiterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the Tx delimiter
+**
+**  PARAMETERS:  MV_U32 *pattern
+**               MV_U32 *size
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxDelimiterGet(MV_U32 *pattern, MV_U32 *size)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_TX_DELIMITER_PAT, pattern, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_TX_DELIMITER_SIZE, size, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxPloamDataFifoSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx ploam data fifo - one entry
+**
+**  PARAMETERS:  MV_U32 txPloamData
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxPloamDataFifoSet(MV_U32 txPloamData)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_PLOAM_DATA_WRITE, txPloamData, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxPloamDataFreeGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the Tx ploam data fifo size
+**
+**  PARAMETERS:  MV_U32 *ploamFifoSize
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxPloamDataFreeGet(MV_U32 *ploamFifoSize)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_PLOAM_DATA_WRITE_FREE, ploamFifoSize, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacBurstEnParamSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the burst enable parameters
+**
+**  PARAMETERS:  MV_U32 mask
+**               MV_U32 polarity
+**               MV_U32 delay
+**               MV_U32 enStop
+**               MV_U32 enStart
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxBurstEnParamSet(MV_U32 mask,
+					MV_U32 polarity,
+					MV_U32 delay,
+					MV_U32 enStop,
+					MV_U32 enStart)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_TX_BURST_EN_PARAM_STR, enStart, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_BURST_EN_PARAM_STP, enStop, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_BURST_EN_PARAM_DLY, delay, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_BURST_EN_PARAM_P, polarity, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_BURST_EN_PARAM_MASK, mask, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxBurstEnPolaritySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the burst enable polarity
+**
+**  PARAMETERS:  MV_U32 polarity
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxBurstEnPolaritySet(MV_U32 polarity)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_BURST_EN_PARAM_P, polarity, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxBurstEnParamGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the burst enable parameters
+**
+**  PARAMETERS:  MV_U32 *mask
+**               MV_U32 *polarity
+**               MV_U32 *delay
+**               MV_U32 *enStop
+**               MV_U32 *enStart
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxBurstEnParamGet(MV_U32 *mask,
+					MV_U32 *polarity,
+					MV_U32 *order,
+					MV_U32 *enStop,
+					MV_U32 *enStart)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_TX_BURST_EN_PARAM_STR, enStart, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_TX_BURST_EN_PARAM_STP, enStop, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_TX_BURST_EN_PARAM_DLY, order, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_TX_BURST_EN_PARAM_P, polarity, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_TX_BURST_EN_PARAM_MASK, mask, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxFinalDelaySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx final delay
+**
+**  PARAMETERS:  MV_U32 txFinalDelay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxFinalDelaySet(MV_U32 txFinalDelay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_FDELAY, txFinalDelay, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxFinalDelayGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the Tx final delay
+**
+**  PARAMETERS:  MV_U32 *txFinalDelay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxFinalDelayGet(MV_U32 *txFinalDelay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_FDELAY, txFinalDelay, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxPreambleSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx preamble type (1,2,3)
+**
+**  PARAMETERS:  MV_U32 preamType
+**               MV_U32 preamCnt
+**               MV_U32 preamVal
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxPreambleSet(MV_U32 type, MV_U32 pattern, MV_U32 size)
+{
+	MV_STATUS status;
+
+	if (type >= 3)
+		return MV_ERROR;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_TX_PREAMBLE_PATT, pattern, type);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_PREAMBLE_SIZE, size, type);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxPlsSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx PLS
+**
+**  PARAMETERS:  MV_U32 pattern
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxPlsSet(MV_U32 pattern)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_PLS_CONSTANT, pattern, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxConstIdleMsgSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx const data ram - one entry
+**
+**  PARAMETERS:  MV_U32 onuId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxConstIdleMsgSet(MV_U32 onuId)
+{
+	MV_STATUS status;
+	MV_U32 dataWord;
+
+	dataWord = ((onuId & 0xFF) << 24) | (ONU_GPON_US_MSG_NO_MESSAGE << 16);
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_TX_CONST_DATA_RAM_IDLE, dataWord, 0);
+	dataWord = 0;
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_CONST_DATA_RAM_IDLE, dataWord, 1);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_CONST_DATA_RAM_IDLE, dataWord, 2);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxConstIdleMsgSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx const data ram - one entry
+**
+**  PARAMETERS:  MV_U32 onuId
+**               MV_U8  *serialNumber
+**               MV_U32 randomDelay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxConstSerialNumberMsgSet(MV_U32 onuId,
+						MV_U8 *serialNumber,
+						MV_U32 randomDelay)
+{
+	MV_STATUS status;
+	MV_U32 dataWord;
+
+	dataWord = ((onuId & 0xFF) << 24) | (ONU_GPON_US_MSG_SN_ONU << 16) |
+		   (((MV_U32)(serialNumber[0])) << 8) | (MV_U32)(serialNumber[1]);
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_TX_CONST_DATA_RAM_SN, dataWord, 0);
+
+	dataWord = (((MV_U32)(serialNumber[2])) << 24) | (((MV_U32)(serialNumber[3])) << 16) |
+		   (((MV_U32)(serialNumber[4])) << 8) | (MV_U32)(serialNumber[5]);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_CONST_DATA_RAM_SN, dataWord, 1);
+
+	dataWord = (((MV_U32)(serialNumber[6])) << 24) | (((MV_U32)(serialNumber[7])) << 16) |
+		   (((randomDelay >> 4) & 0xFF) << 8) | ((randomDelay & 0xF) << 4 | 5);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_TX_CONST_DATA_RAM_SN, dataWord, 2);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxDbrBlockSizeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the Tx DBR Block size
+**
+**  PARAMETERS:  MV_U32 blockSize
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxDbrBlockSizeSet(MV_U32 blockSize)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_DBR_REPORT_BLOCK_IDX, blockSize, 0);
+
+	return status;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                           General Low Level Routines                       */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacOnuIdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the ONU ID
+**
+**  PARAMETERS:  MV_U32 onuId
+**               MV_BOOL   valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacOnuIdSet(MV_U32 onuId, MV_BOOL valid)
+{
+	MV_STATUS status;
+	MV_U32 validBit;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_ONU_ID_OID, onuId, 0);
+
+	validBit = (valid == MV_TRUE) ? 1 : 0;
+
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_ONU_ID_V, validBit, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacOnuStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the onu state
+**
+**  PARAMETERS:  MV_U32 onuState
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacOnuStateSet(MV_U32 onuState)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_ONU_STATE, onuState, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacSerialNumberSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set 2 bytes of Serial Number
+**				 it is for ASIC random value creation - so the 2 last bytes
+**				 should be put here
+**
+**  PARAMETERS:  MV_U32 serialNum
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacSerialNumberSet(MV_U32 serialNum)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_SERIAL_NUMBER, serialNum, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponTimeOfDayIntWidthSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configures TOD INT parameters
+**
+**  PARAMETERS:  MV_U32 width    - INT width in cycle units
+**		 MV_U8  mode     - 0 for BIP INT, 1 for TOD SPF INT
+**		 MV_U8  polarity - 0 - active HIGH, 1 - active LOW
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponTimeOfDayIntWidthSet(MV_U32 width,
+					MV_U8 mode,
+					MV_U8 polarity)
+{
+	MV_U32 reg = width & 0x0FFFFFFF;
+
+	reg |= (mode != 0)     ? (1 << 28) : 0;
+	reg |= (polarity != 0) ? (1 << 29) : 0;
+
+	return asicOntGlbRegWrite(mvAsicReg_GPON_GEN_TOD_INT_WIDTH, reg, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponTimeOfDayIntWidthGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function obtains TOD INT parameters
+**
+**  PARAMETERS:  MV_U32 width    - INT width in cycle units
+**		 MV_U8  mode     - 0 for BIP INT, 1 for TOD SPF INT
+**		 MV_U8  polarity - 0 - active HIGH, 1 - active LOW
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponTimeOfDayIntWidthGet(MV_U32 *width,
+					MV_U8  *mode,
+					MV_U8  *polarity)
+{
+	MV_STATUS status;
+	MV_U32 reg;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEN_TOD_INT_WIDTH, &reg, 0);
+	if (status == MV_OK) {
+		*width     = reg & 0x0FFFFFFF;
+		*mode      = (reg >> 28) & 0x1;
+		*polarity  = (reg >> 29) & 0x1;
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponSuperFrameCouterSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configures Super Frame Counter value for TOD INT
+**
+**  PARAMETERS:  MV_U32 sfc   - Super Frame Couter value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponSuperFrameCouterSet(MV_U32 sfc)
+{
+	return asicOntGlbRegWrite(mvAsicReg_GPON_GEN_TOD_INT_SFC, sfc, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponSuperFrameCouterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function obtains Super Frame Counter value for TOD INT
+**
+**  PARAMETERS:  MV_U32 sfc   - Super Frame Couter value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponSuperFrameCouterGet(MV_U32 *sfc)
+{
+	return asicOntGlbRegRead(mvAsicReg_GPON_GEN_TOD_INT_SFC, sfc, 0);
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                           Gem Low Level Routines                           */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemPayloadLenSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the max gem payload length
+**
+**  PARAMETERS:  MV_U32 payloadlen
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemPayloadLenSet(MV_U32 payloadlen)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_PLI, payloadlen, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemPayloadLenGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the max gem payload length
+**
+**  PARAMETERS:  MV_U32 *payloadlen
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemPayloadLenGet(MV_U32 *payloadlen)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_PLI, payloadlen, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemEthFrameLenSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the max / min ethernet frame length
+**
+**  PARAMETERS:  MV_U32 maxFrameLen
+**               MV_U32 minFrameLen
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemEthFrameLenSet(MV_U32 maxFrameLen, MV_U32 minFrameLen)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MAX, maxFrameLen, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MIN, minFrameLen, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemEthFrameLenGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the max / min ethernet frame length
+**
+**  PARAMETERS:  MV_U32 maxFrameLen
+**               MV_U32 minFrameLen
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemEthFrameLenGet(MV_U32 *maxFrameLen, MV_U32 *minFrameLen)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MAX, maxFrameLen, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MIN, minFrameLen, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemOmciFrameLenSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the max / min omci frame length
+**
+**  PARAMETERS:  MV_U32 maxFrameLen
+**               MV_U32 minFrameLen
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemOmciFrameLenSet(MV_U32 maxFrameLen, MV_U32 minFrameLen)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MAX, maxFrameLen, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MIN, minFrameLen, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemOmciFrameLenGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the max / min omci frame length
+**
+**  PARAMETERS:  MV_U32 maxFrameLen
+**               MV_U32 minFrameLen
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemOmciFrameLenGet(MV_U32 *maxFrameLen, MV_U32 *minFrameLen)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MAX, maxFrameLen, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MIN, minFrameLen, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemOmciPortIdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the omci port Id
+**
+**  PARAMETERS:  MV_U32 portId
+**               MV_U32 valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemOmciPortIdSet(MV_U32 portId, MV_U32 valid)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_ID,    portId, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemOmciPortIdGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the omci port Id
+**
+**  PARAMETERS:  MV_U32 portId
+**               MV_U32 valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemOmciPortIdGet(MV_U32 *portId, MV_U32 *valid)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_ID,    portId, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemOmciFastPathSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function enables or disables the omci fast path feature
+**
+**  PARAMETERS:  MV_U32 valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemOmciFastPathSet(MV_U32 valid)
+{
+	MV_STATUS status;
+
+	/* set register */
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_OMCI_FAST_PATH_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemOmciFastPathGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the omci fast path status
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 valid
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemOmciFastPathGet(MV_U32 *valid)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_CONFIG_OMCI_FAST_PATH_VALID, valid, 0);
+
+	return status;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                           UTM Low Level Routines                           */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmOmciPortIdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the omci port Id
+**
+**  PARAMETERS:  MV_U32 portId
+**               MV_U32 valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmOmciPortIdSet(MV_U32 portId, MV_U32 valid)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_ID,    portId, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmOmciPortIdGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the omci port Id
+**
+**  PARAMETERS:  MV_U32 *portId
+**               MV_U32 *valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmOmciPortIdGet(MV_U32 *portId, MV_U32 *valid)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_ID,    portId, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmTcPeriodSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the TC period
+**
+**  PARAMETERS:  MV_U32 period
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmTcPeriodSet(MV_U32 period)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD, period, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmTcValidSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the TC valid
+**
+**  PARAMETERS:  MV_U32 valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmTcValidSet(MV_U32 valid)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmTcConfigGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the TC configuration
+**
+**  PARAMETERS:  MV_U32 *period
+**               MV_U32 *valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmTcConfigGet(MV_U32 *period, MV_U32 *valid)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD,       period, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmActiveTxBitmapSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the active TX bitmap
+**
+**  PARAMETERS:  MV_U32 bitmap
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmActiveTxBitmapSet(MV_U32 bitmap)
+{
+	return asicOntGlbRegWrite(mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP, bitmap, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmActiveTxBitmapValidSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the active TX bitmap valid
+**
+**  PARAMETERS:  MV_U32 valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmActiveTxBitmapValidSet(MV_U32 valid)
+{
+	return asicOntGlbRegWrite(mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP_VALID, valid, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmActiveTxBitmapConfigGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the active TX bitmap configuration
+**
+**  PARAMETERS:  MV_U32 *bitmap
+**               MV_U32 *valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmActiveTxBitmapConfigGet(MV_U32 *bitmap, MV_U32 *valid)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP,       bitmap, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP_VALID, valid, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmFlushSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets the UTM TX flush
+**
+**  PARAMETERS:  MV_U32 tcontNum, MV_U32 value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmFlushSet(MV_U32 tcontNum, MV_U32 value)
+{
+	MV_U32 regVal;
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_UTM_FLUSH, &regVal, 0);
+	if (status)
+		return status;
+
+	regVal &= ~(1 << (tcontNum & 0xf));
+	regVal |= ((value & 0x1) << (tcontNum & 0xf));
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_UTM_FLUSH, regVal, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmFlushGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function gets the UTM TX flush
+**
+**  PARAMETERS:  MV_U32 tcontNum
+**
+**  OUTPUTS:     MV_U32 *flush
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmFlushGet(MV_U32 tcontNum, MV_U32 *value)
+{
+	MV_U32 regVal;
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_UTM_FLUSH, &regVal, 0);
+	if (status)
+		return status;
+
+	*value = ((regVal >> (tcontNum & 0xf)) & 0x1);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacUtmDebugGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function gets the UTM TX flush
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 *state
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacUtmDebugGet(MV_U32 tcontNum, MV_U32 *state)
+{
+	MV_U32 regVal;
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_UTM_DEBUG, &regVal, 0);
+	if (status)
+		return status;
+
+	*state = ((regVal >> (tcontNum & 0xf)) & 0x1);
+
+	return status;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                           Interrupt Low Level Routines                     */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPonInterruptGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the interrupt event
+**
+**  PARAMETERS:  MV_U32 *interrupt
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacPonInterruptGet(MV_U32 *interrupt)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_INTERRUPT_PON, interrupt, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPonInterruptMaskGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the interrupt mask
+**
+**  PARAMETERS:  MV_U32 *mask
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacPonInterruptMaskGet(MV_U32 *mask)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_INTERRUPT_PON_MASK, mask, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPonInterruptMaskSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the interrupt mask
+**
+**  PARAMETERS:  MV_U32 *mask
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacPonInterruptMaskSet(MV_U32 mask)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_INTERRUPT_PON_MASK, mask, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacBipStatusValueGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the BIP8 general counter
+**
+**  PARAMETERS:  MV_U32 *value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacBipStatusValueGet(MV_U32 *value)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_BIP_STATUS, value, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacBipInterruptIntervalSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the BIP8 interrupt interval (in frames)
+**
+**  PARAMETERS:  MV_U32 interval
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacBipInterruptIntervalSet(MV_U32 interval)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_BIP_INTR_INTERVAL, interval, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacBipStatusValueGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the BIP8 interrupt counter
+**
+**  PARAMETERS:  MV_U32 *value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacBipInterruptStatusValueGet(MV_U32 *value)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_RX_BIP_STATUS_FOR_INTERRUPT, value, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacBipInterruptIntervalSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set ram test configuration
+**
+**  PARAMETERS:  MV_U32 interval
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRamTestCfgSet(MV_U32 config)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_RAM_TEST_CONFIG, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRamTestCfgGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return ram test configuration
+**
+**  PARAMETERS:  MV_U32 *value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRamTestCfgGet(MV_U32 *config)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_RAM_TEST_CONFIG, config, 0);
+
+	return status;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                           Statistics Low Level Routines                    */
+/* ========================================================================== */
+/******************************************************************************/
+
+/* ========================================================================== */
+/*                       GEM Statistics Low Level Routines                    */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdIdleGemFramesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received idle gem frames counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdIdleGemFramesCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_IDLE_GEM_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdValidGemFramesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received valid gem frames counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdValidGemFramesCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_VALID_GEM_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdUndefGemFramesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received undefined gem frames counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdUndefGemFramesCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdOmciFramesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received omci frames counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdOmciFramesCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_VALID_OMCI_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemDropGemFramesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received dropped gem frames counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemDropGemFramesCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_DROPPED_GEM_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemDropOmciFramesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received dropped omci frames counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemDropOmciFramesCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_DROPPED_OMCI_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdGemFramesWithUncorrHecErrCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received gem frames with uncorrect hec error counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdGemFramesWithUncorrHecErrCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_ERROR_GEM_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdGemFramesWithOneFixedHecErrCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received gem frames with one fixed hec error counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdGemFramesWithOneFixedHecErrCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_ONE_FIXED_HEC_ERR_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdGemFramesWithTwoFixedHecErrCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received gem frames with two fixed hec error counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdGemFramesWithTwoFixedHecErrCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_TWO_FIXED_HEC_ERR_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdValidGemFramesTotalByteCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received valid gem frames total bytes counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdValidGemFramesTotalByteCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_VALID_GEM_PAYLOAD_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdUndefGemFramesTotalByteCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received undefined gem frames total bytes counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdUndefGemFramesTotalByteCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_PAYLOAD_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemReassembleMemoryFlushCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received gem reassemble memory flush counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemReassembleMemoryFlushCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_RSMBL_MEM_FLUSH_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemSynchLostCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return gem synch lost counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemSynchLostCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_LCDGi_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdEthFramesWithCorrFcsCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received ethernet frames with correct FCS counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdEthFramesWithCorrFcsCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_CORR_ETH_FRAME_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdEthFramesWithFcsErrCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received ethernet frames with FCS error counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdEthFramesWithFcsErrCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_ERR_ETH_FRAME_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdOmciFramesWithCorrCrcCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received omci frames with correct CRC counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdOmciFramesWithCorrCrcCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_CORR_OMCI_FRAME_CNT, cntValue, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemRcvdOmciFramesWithCrcErrCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received omci frames with CRC error counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemRcvdOmciFramesWithCrcErrCounterGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_STAT_ERR_OMCI_FRAME_CNT, cntValue, 0);
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                  Rx PLOAM Statistics Low Level Routines                    */
+/* ========================================================================== */
+
+/******************************************************************************
+**
+**  mvOnuGponMacRxPloamLostCrcCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx ploam lost crc counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamLostCrcCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	*counter = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLOAMD_LOST_CRC_STATUS, counter, 0);
+	if (status != MV_OK)
+		return status;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPloamLostFullCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx ploam lost full counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamLostFullCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	*counter = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLOAMD_LOST_FULL_STATUS, counter, 0);
+	if (status != MV_OK)
+		return status;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPloamRcvdIdleCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx ploam received idle counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamRcvdIdleCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	*counter = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLOAMD_RCVD_IDLE_STATUS, counter, 0);
+	if (status != MV_OK)
+		return status;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPloamRcvdBroadCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx ploam received broadcast counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamRcvdBroadCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	*counter = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLOAMD_RCVD_BROAD_STATUS, counter, 0);
+	if (status != MV_OK)
+		return status;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxPloamRcvdOnuIdCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx ploam received Onu Id counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxPloamRcvdOnuIdCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	*counter = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLOAMD_RCVD_MYID_STATUS, counter, 0);
+	if (status != MV_OK)
+		return status;
+
+	return MV_OK;
+}
+
+/* ========================================================================== */
+/*                        Tx Statistics Low Level Routines                    */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxGemPtiTypeOneFrameCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the num of trans gem frames with pti = 1
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxGemPtiTypeOneFrameCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_GEM_PTI1, counter, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxGemPtiTypeZeroFrameCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the num of trans gem frames with pti = 0
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxGemPtiTypeZeroFrameCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_GEM_PTI0, counter, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxIdleGemFramesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the num of trans idle gem frames
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxIdleGemFramesCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_GEM_IDLE, counter, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxTxEnableCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the num of cycles with tx enable asserted
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxTxEnableCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TX_EN_CNT, counter, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxTxEnableCounterThresholdGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return tx enable counter threshold
+**
+**  PARAMETERS:  MV_U32 *threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxTxEnableCounterThresholdGet(MV_U32 *threshold)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_CONFIG_EN_THRESHOLD, threshold, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxTxEnableCounterThresholdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set tx enable counter threshold
+**
+**  PARAMETERS:  MV_U32 threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxTxEnableCounterThresholdSet(MV_U32 threshold)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_CONFIG_EN_THRESHOLD, threshold, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxGseTransCounterThresholdGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GSE threshold for starting forwarding data to
+**               the TX burst FIFO
+**
+**  PARAMETERS:  MV_U32 *threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxGseTransCounterThresholdGet(MV_U32 *threshold)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_GSE_TRANS_THRESHOLD, threshold, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxGseTransCounterThresholdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set GSE threshold for starting forwarding data to
+**               the TX burst FIFO
+**
+**  PARAMETERS:  MV_U32 threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxGseTransCounterThresholdSet(MV_U32 threshold)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_GSE_TRANS_THRESHOLD, threshold, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxGseTransConfigAcCouplingSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set GSE Transmit Configuration AC coupling
+**
+**  PARAMETERS:  MV_U32 busrtMode          - GPON_TX_AC_COUPL_BUST_MODE_0 or
+**					     GPON_TX_AC_COUPL_BUST_MODE_1
+**		 MV_U32 preActiveBurstTime - time from burst to TX pattern2
+**		 MV_U8  dataPattern1       - Pattern1
+**		 MV_U8  dataPattern2       - Pattern2
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxConfigAcCouplingGet(MV_U32 *busrtMode,
+					    MV_U32 *preActiveBurstTime,
+					    MV_U8  *dataPattern1,
+					    MV_U8  *dataPattern2)
+{
+	MV_STATUS status;
+	MV_U32 reg;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_CFG_AC_COUPLING, &reg, 0);
+	if (status == MV_OK) {
+		*busrtMode           = (reg >> 30) & 0x3;
+		*preActiveBurstTime  = (reg >> 16) & 0x3FFF;
+		*dataPattern2        = (reg >>  8) & 0xFF;
+		*dataPattern1        = reg & 0xFF;
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxGseTransConfigAcCouplingSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set GSE Transmit Configuration AC coupling
+**
+**  PARAMETERS:  MV_U32 busrtMode          - GPON_TX_AC_COUPL_BUST_MODE_0 or
+**					     GPON_TX_AC_COUPL_BUST_MODE_1
+**		 MV_U32 preActiveBurstTime - time from burst to TX pattern2
+**		 MV_U8  dataPattern1       - Pattern1
+**		 MV_U8  dataPattern2       - Pattern2
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxConfigAcCouplingSet(MV_U32 busrtMode,
+					    MV_U32 preActiveBurstTime,
+					    MV_U8 dataPattern1,
+					    MV_U8 dataPattern2)
+{
+	MV_U32 reg = 0;
+
+	if (busrtMode != GPON_TX_AC_COUPL_BUST_MODE_0)
+		reg = 1 << 30;
+
+	reg |= (preActiveBurstTime & 0x3FFF) << 16;
+	reg |= dataPattern1 | (dataPattern2 << 8);
+
+	return asicOntGlbRegWrite(mvAsicReg_GPON_TX_CFG_AC_COUPLING, reg, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxRandomDelayUnitsGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return units of random delay
+**
+**  PARAMETERS:  MV_U32 units - random delay units
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxRandomDelayUnitsGet(MV_U32 *units)
+{
+	return asicOntGlbRegRead(mvAsicReg_GPON_TX_CFG_RAND_DELAY, units, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxRandomDelayUnitsSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return units of random delay
+**
+**  PARAMETERS:  MV_U32 units - random delay units
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxRandomDelayUnitsSet(MV_U32 units)
+{
+	return asicOntGlbRegWrite(mvAsicReg_GPON_TX_CFG_RAND_DELAY, units, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxEthFramesTcontiCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return number of trans ethernet frames via tcont
+**
+**  PARAMETERS:  MV_U32 tcontNum
+**               MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxEthFramesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	if (tcontNum >= ONU_GPON_MAX_NUM_OF_T_CONTS)
+		return MV_ERROR;
+
+	if (tcontNum < 8)
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_FRAMES, counter, tcontNum);
+	else
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_FRAME, counter, (tcontNum - 8));
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxEthBytesTcontiCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return number of trans ethernet bytes via tcont
+**
+**  PARAMETERS:  MV_U32 tcontNum
+**               MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxEthBytesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	if (tcontNum >= ONU_GPON_MAX_NUM_OF_T_CONTS)
+		return MV_ERROR;
+
+	if (tcontNum < 8)
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_BYTES, counter, tcontNum);
+	else
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_BYTES, counter, tcontNum);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxGemFramesTcontiCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return number of trans gem frames via tcont
+**
+**  PARAMETERS:  MV_U32 tcontNum
+**               MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxGemFramesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	if (tcontNum >= ONU_GPON_MAX_NUM_OF_T_CONTS)
+		return MV_ERROR;
+
+	if (tcontNum < 8)
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_GEM_FRAMES, counter, tcontNum);
+	else
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_GEM_FRAME, counter, tcontNum);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxIdleGemFramesTcontiCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return number of trans idle gem frames via tcont
+**
+**  PARAMETERS:  MV_U32 tcontNum
+**               MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxIdleGemFramesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	if (tcontNum >= ONU_GPON_MAX_NUM_OF_T_CONTS)
+		return MV_ERROR;
+
+	if (tcontNum < 8)
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_IDLE_GEM, counter, tcontNum);
+	else
+		status = asicOntGlbRegRead(mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_IDLE_GEM, counter, tcontNum);
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                       FEC Statistics Low Level Routines                    */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxFecBytesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx FEC Bytes counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxFecBytesCounterGet(MV_U32 *counter)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_FEC_STAT0, counter, 0);
+	if (status != MV_OK)
+		return status;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxFecCorrectBytesCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx FEC correct Bytes counter
+**
+**  PARAMETERS:  MV_U32 *bytes
+**               MV_U32 *bits
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxFecCorrectCounterGet(MV_U32 *bytes, MV_U32 *bits)
+{
+	MV_STATUS status;
+	MV_U32 regVal;
+
+	*bytes = 0;
+	*bits  = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_FEC_STAT1, &regVal, 0);
+	if (status != MV_OK)
+		return status;
+
+	*bits  =  regVal & 0xFFFF;
+	*bytes = (regVal >> 16) & 0xFFFF;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxFecInorrectCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx FEC Incorrect Bytes counter
+**
+**  PARAMETERS:  MV_U32 *bytes
+**               MV_U32 *bits
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxFecInorrectCounterGet(MV_U32 *bytes, MV_U32 *bits)
+{
+	MV_STATUS status;
+	MV_U32 regVal;
+
+	*bytes = 0;
+	*bits  = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_FEC_STAT2, &regVal, 0);
+	if (status != MV_OK)
+		return status;
+
+	*bits  = regVal & 0xFFFF;
+	*bytes = (regVal >> 16) & 0xFFFF;
+
+	return MV_OK;
+}
+
+/* ========================================================================== */
+/*                    Bw Map Statistics Low Level Routines                    */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxBwMapAllocatrionsCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx Bw Map allocation counters
+**
+**  PARAMETERS:  MV_U32 *cor
+**               MV_U32 *incor
+**               MV_U32 *crcCor
+**               MV_U32 *errCrc
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxBwMapAllocatrionsCounterGet(MV_U32 *cor,
+						    MV_U32 *incor,
+						    MV_U32 *crcCor,
+						    MV_U32 *errCrc)
+{
+	MV_STATUS status;
+	MV_U32 regVal;
+
+	*cor    = 0;
+	*incor  = 0;
+	*crcCor = 0;
+	*errCrc = 0;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_BWMAP_STATUS0, &regVal, 0);
+	if (status != MV_OK)
+		return status;
+
+	*incor  = regVal & 0xFF;
+	*crcCor = (regVal >> 8) & 0xFF;
+	*cor    = (regVal >> 16) & 0xFF;
+	*errCrc = (regVal >> 24) & 0xFF;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxBwMapTotalBwGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx Bw total Bw counter
+**
+**  PARAMETERS:  MV_U32 *bw
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxBwMapTotalBwGet(MV_U32 *bw)
+{
+	MV_STATUS status;
+	MV_U32 regVal;
+
+	*bw = 0;
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_BWMAP_STATUS1, &regVal, 0);
+	if (status != MV_OK)
+		return status;
+
+	*bw = regVal & 0x7FFFF;
+
+	return MV_OK;
+}
+
+/* ========================================================================== */
+/*                     Plend Statistics Low Level Routines                    */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  onuGponInComingPlendCntGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return InComing Plend counter
+**
+**  PARAMETERS:  MV_U32 *cntValue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacInComingPlendCntGet(MV_U32 *cntValue)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_RX_PLEND_STATUS, cntValue, 0);
+
+	return status;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                         High-Level MAC Section                             */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacMessageReceive
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function read message from the message fifo
+**               The ploam size is 12 octets - each read get 32 bits
+**               3 read actions needed
+**
+**  PARAMETERS:  msgData  - 10 bytes (buffer is allocated by calling)
+**               msgOnuId - the ONU ID on the message
+**               msgId    - the message ID on the message
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacMessageReceive(MV_U8 *msgOnuId, MV_U8 *msgId, MV_U8 *msgData)
+{
+	MV_STATUS rcode;
+	MV_U32 ploamFifoData_1;
+	MV_U32 ploamFifoData_2;
+	MV_U32 ploamFifoData_3;
+
+	rcode  = mvOnuGponMacRxPloamDataGet(&ploamFifoData_1);
+	rcode |= mvOnuGponMacRxPloamDataGet(&ploamFifoData_2);
+	rcode |= mvOnuGponMacRxPloamDataGet(&ploamFifoData_3);
+
+	if (rcode != MV_OK)
+		return rcode;
+
+	/* Outputs */
+	*msgOnuId  = (MV_U8)((ploamFifoData_1 >> 24) & UINT8_MASK); /* MSB */
+	*msgId     = (MV_U8)((ploamFifoData_1 >> 16) & UINT8_MASK);
+	msgData[0] = (MV_U8)((ploamFifoData_1 >> 8)  & UINT8_MASK);
+	msgData[1] = (MV_U8)(ploamFifoData_1        & UINT8_MASK);      /* LSB */
+	msgData[2] = (MV_U8)((ploamFifoData_2 >> 24) & UINT8_MASK);     /* MSB */
+	msgData[3] = (MV_U8)((ploamFifoData_2 >> 16) & UINT8_MASK);
+	msgData[4] = (MV_U8)((ploamFifoData_2 >> 8)  & UINT8_MASK);
+	msgData[5] = (MV_U8)(ploamFifoData_2        & UINT8_MASK);      /* LSB */
+	msgData[6] = (MV_U8)((ploamFifoData_3 >> 24) & UINT8_MASK);     /* MSB */
+	msgData[7] = (MV_U8)((ploamFifoData_3 >> 16) & UINT8_MASK);
+	msgData[8] = (MV_U8)((ploamFifoData_3 >> 8)  & UINT8_MASK);
+	msgData[9] = (MV_U8)(ploamFifoData_3        & UINT8_MASK); /* LSB */
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxPloamSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function writes PLOAM message to HW FIFO
+**
+**  PARAMETERS:  msgData  - 10 bytes (buffer is allocated by calling)
+**               msgOnuId - the ONU ID on the message
+**               msgId    - the message ID on the message
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxPloamSend(MV_U8 msgOnuId, MV_U8 msgId, MV_U8 *msgData)
+{
+	MV_STATUS rcode;
+	MV_U32 ploamFifoData;
+
+	fifoMacPloamSend++;
+
+	/* Write ONU ID and Message ID and data[0:1] */
+	ploamFifoData =  (((MV_U32)msgOnuId) << 24) | (((MV_U32)msgId) << 16) |
+			(((MV_U32)msgData[0]) << 8) | (((MV_U32)msgData[1]) << 0);
+	rcode = mvOnuGponMacTxPloamDataFifoSet(ploamFifoData);
+
+	/* Write data[2:5] */
+	ploamFifoData =  (((MV_U32)msgData[2]) << 24) | (((MV_U32)msgData[3]) << 16) |
+			(((MV_U32)msgData[4]) << 8) | (((MV_U32)msgData[5]) << 0);
+	rcode |= mvOnuGponMacTxPloamDataFifoSet(ploamFifoData);
+
+	/* Write data[6:9] */
+	ploamFifoData =  (((MV_U32)msgData[6]) << 24) | (((MV_U32)msgData[7]) << 16) |
+			(((MV_U32)msgData[8]) << 8) | (((MV_U32)msgData[9]) << 0);
+	rcode |= mvOnuGponMacTxPloamDataFifoSet(ploamFifoData);
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacMessageAdd
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function adds message to the SW FIFO
+**
+**  PARAMETERS:  msgData  - 10 bytes (buffer is allocated by calling)
+**               msgOnuId - the ONU ID on the message
+**               msgId    - the message ID on the message
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_FULL
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacMessageAdd(MV_U8 msgOnuId, MV_U8 msgId, MV_U8 *msgData)
+{
+	MV_STATUS rcode;
+	MV_U8     *buffer;
+	MV_U32 bufferIndex;
+
+	/* Get pointer to and index of the free SW FIFO entry */
+	rcode = mvOnuGponMacFifoMsgAlloc((MV_U32**)&buffer, &bufferIndex);
+	if (rcode == MV_OK) {
+		buffer[0] = msgOnuId;
+		buffer[1] = msgId;
+		memcpy(&buffer[2], msgData, GPON_PLOAM_MSG_BYTES - 2);
+
+		mvOnuGponMacFifoMsgSend(bufferIndex);
+	}
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacMessageSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function write message to the message fifo
+**
+**  PARAMETERS:  msgData  - 10 bytes (buffer is allocated by calling)
+**               msgOnuId - the ONU ID on the message
+**               msgId    - the message ID on the message
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK, MV_FULL or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacMessageSend(MV_U8 msgOnuId, MV_U8 msgId, MV_U8 *msgData)
+{
+	MV_STATUS rcode;
+	MV_U32 ploamFifoSize;
+	MV_U8     *buffer;
+	MV_U32 bufferIndex;
+	int i, moved_num;
+
+	fifoMacMsgSend++;
+
+	/* Check first if PLOAM FIFO has free place */
+	rcode = mvOnuGponMacTxPloamDataFreeGet(&ploamFifoSize);
+
+	if (rcode != MV_OK)
+		return rcode;
+
+	/* SW FIFO is not supported */
+	if (!fifoSupported) {
+		if (ploamFifoSize < GPON_PLOAM_MSG_WORDS)
+			return MV_ERROR;
+
+		return mvOnuGponMacTxPloamSend(msgOnuId, msgId, msgData);
+	}
+
+	/* There is no free entries in  HW FIFO */
+	if (ploamFifoSize < GPON_PLOAM_MSG_WORDS)
+		rcode = mvOnuGponMacMessageAdd(msgOnuId, msgId, msgData);
+	else {
+		/* HW FIFO has free entries. Verify whether SW FIFO is empty */
+		if (mvOnuGponMacFifoEmpty())
+			rcode = mvOnuGponMacTxPloamSend(msgOnuId, msgId, msgData);
+		else {
+			/* Add received PLOAM to SW FIFO */
+			rcode = mvOnuGponMacMessageAdd(msgOnuId, msgId, msgData);
+
+			/* Move up to GPON_MAX_US_MSG_MOVING (3) PLOAMs from SW to HW FIFO */
+			moved_num = ploamFifoSize / GPON_PLOAM_MSG_WORDS;
+			if (moved_num > GPON_MAX_US_MSG_MOVING)
+				moved_num = GPON_MAX_US_MSG_MOVING;
+
+			for (i = 0; i < moved_num; i++) {
+				rcode = mvOnuGponMacFifoMsgRece((MV_U32**)&buffer, &bufferIndex);
+				if (rcode == MV_EMPTY)
+					break;
+
+				rcode = mvOnuGponMacTxPloamSend(buffer[0], buffer[1], &buffer[2]);
+				if (rcode != MV_OK)
+					break;
+
+				mvOnuGponMacFifoMsgFree(bufferIndex);
+			}
+		}
+	}
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacMessageCleanSwFifo
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function clean the SW transmit message fifo
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK, MV_FULL or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacMessageCleanSwFifo(void)
+{
+	MV_STATUS rcode;
+	MV_U8     *buffer;
+	MV_U32 bufferIndex;
+
+	do {
+		rcode = mvOnuGponMacFifoMsgRece((MV_U32**)&buffer, &bufferIndex);
+		if (rcode == MV_EMPTY)
+			break;
+
+		mvOnuGponMacFifoMsgFree(bufferIndex);
+
+	} while (1);
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPreambleSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the onu overhead preamble bytes
+**
+**  PARAMETERS:  preamType1Val - preamble type 1 value
+**               preamType1Cnt - preamble type 1 count
+**               preamType2Val - preamble type 2 value
+**               preamType2Cnt - preamble type 2 count
+**               preamType3Val - preamble type 3 value
+**               preamType3Cnt - preamble type 3 count
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacPreambleSet(MV_U32 preamType1Val,
+				  MV_U32 preamType1Cnt,
+				  MV_U32 preamType2Val,
+				  MV_U32 preamType2Cnt,
+				  MV_U32 preamType3Val,
+				  MV_U32 preamType3Cnt)
+{
+	MV_STATUS rcode;
+
+	rcode = mvOnuGponMacTxPreambleSet(ONU_GPON_PREM_TYPE_01, preamType1Val, preamType1Cnt);
+	if (rcode != MV_OK)
+		return rcode;
+
+	rcode = mvOnuGponMacTxPreambleSet(ONU_GPON_PREM_TYPE_02, preamType2Val, preamType2Cnt);
+	if (rcode != MV_OK)
+		return rcode;
+
+	rcode = mvOnuGponMacTxPreambleSet(ONU_GPON_PREM_TYPE_03, preamType3Val, preamType3Cnt);
+	if (rcode != MV_OK)
+		return rcode;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPreambleType3Set
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the onu overhead preamble type3
+**
+**  PARAMETERS:  preamType3Val - preamble type 3 value
+**               preamType3Cnt - preamble type 3 count
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacPreambleType3Set(MV_U32 preamType3Val, MV_U32 preamType3Cnt)
+{
+	MV_STATUS rcode;
+
+	rcode = mvOnuGponMacTxPreambleSet(ONU_GPON_PREM_TYPE_03, preamType3Val, preamType3Cnt);
+	if (rcode != MV_OK)
+		return rcode;
+
+	return MV_OK;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                      Upstream Messages MAC Section                         */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacDgMessageSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sends dying gasp message in the US direction
+**
+**  PARAMETERS:  MV_U8  onuId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacDgMessageSend(MV_U8 onuId)
+{
+	MV_U32 i;
+	MV_STATUS rcode;
+	MV_U8 data[12];
+
+	for (i = 0; i < 3; i++) {
+		rcode = mvOnuGponMacMessageSend(onuId, ONU_GPON_US_MSG_DYING_GASP, data);
+		if (rcode != MV_OK) {
+			mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_DYING_GASP, MV_FALSE);
+			return rcode;
+		} else
+			mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_DYING_GASP, MV_TRUE);
+	}
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPasswordMessageSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sends password message in the US direction
+**
+**  PARAMETERS:  MV_U8  onuId
+**               MV_U8  *password
+**               MV_U32 counter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacPasswordMessageSend(MV_U8 onuId, MV_U8 *password, MV_U32 counter)
+{
+	MV_U32 time;
+	MV_U32 i;
+	MV_STATUS rcode;
+
+	time = (counter > 3) ? 3 : counter;
+
+	for (i = 0; i < time; i++) {
+		rcode = mvOnuGponMacMessageSend(onuId, ONU_GPON_US_MSG_PASSWORD, password);
+		if (rcode != MV_OK) {
+			mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_PASSWORD, MV_FALSE);
+			return rcode;
+		} else
+			mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_PASSWORD, MV_TRUE);
+	}
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacReiMessageSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sends dying gasp message in the US direction
+**
+**  PARAMETERS:  MV_U8 onuId
+**               MV_U8 errorsCounter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacReiMessageSend(MV_U8 onuId, MV_U32 errorsCounter)
+{
+	MV_STATUS rcode;
+	static MV_U8 sequenceNumber = 0;
+	MV_U8 data[12];
+
+	data[0] = (MV_U8)((errorsCounter >> 24) & 0xFF);
+	data[1] = (MV_U8)((errorsCounter >> 16) & 0xFF);
+	data[2] = (MV_U8)((errorsCounter >> 8) & 0xFF);
+	data[3] = (MV_U8)(errorsCounter & 0xFF);
+	data[4] = sequenceNumber;
+
+	sequenceNumber++;
+	if (sequenceNumber > 0xF) sequenceNumber = 0;
+
+	rcode = mvOnuGponMacMessageSend(onuId, ONU_GPON_US_MSG_REI, data);
+	if (rcode != MV_OK) {
+		mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_REI, MV_FALSE);
+		return rcode;
+	} else
+		mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_REI, MV_TRUE);
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacAcknowledgeMessageSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sends acknowledge message in the US direction
+**
+**  PARAMETERS:  MV_U8 onuId
+**               MV_U8 errorsCounter
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacAcknowledgeMessageSend(MV_U8 onuId, MV_U8 dmId, MV_U8 *dmByte)
+{
+	MV_STATUS rcode;
+	MV_U8 data[12];
+
+	data[0] = dmId;
+
+	data[1] = onuId;
+	data[2] = dmId;
+	data[3] = dmByte[0];
+	data[4] = dmByte[1];
+	data[5] = dmByte[2];
+	data[6] = dmByte[3];
+	data[7] = dmByte[4];
+	data[8] = dmByte[5];
+	data[9] = dmByte[6];
+
+	rcode = mvOnuGponMacMessageSend(onuId, ONU_GPON_US_MSG_ACK, data);
+	if (rcode != MV_OK) {
+		mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_ACK, MV_FALSE);
+		return rcode;
+	} else
+		mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_ACK, MV_TRUE);
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacEncryptionKeyMessageSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sends encryption key message in the US direction
+**
+**  PARAMETERS:  MV_U8 onuId
+**               MV_U8 KeyIndex
+**               MV_U8 fragIndex
+**               MV_U8 *key
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacEncryptionKeyMessageSend(MV_U8 onuId,
+					       MV_U8 KeyIndex,
+					       MV_U8 fragIndex,
+					       MV_U8 *key)
+{
+	MV_STATUS rcode;
+	MV_U8 data[12];
+
+	data[0] = KeyIndex;
+	data[1] = fragIndex;
+	data[2] = key[0];
+	data[3] = key[1];
+	data[4] = key[2];
+	data[5] = key[3];
+	data[6] = key[4];
+	data[7] = key[5];
+	data[8] = key[6];
+	data[9] = key[7];
+
+	rcode = mvOnuGponMacMessageSend(onuId, ONU_GPON_US_MSG_ENCRYPT_KEY, data);
+	if (rcode != MV_OK) {
+		mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_ENCRYPT_KEY, MV_FALSE);
+		return rcode;
+	} else
+		mvOnuGponMacTxSwCountersAdd(ONU_GPON_US_MSG_ENCRYPT_KEY, MV_TRUE);
+
+	return rcode;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                              AES Support                                   */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacAesInit
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function init onu AES
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacAesInit(void)
+{
+	MV_U32 i;
+	MV_STATUS rcode = MV_OK;
+
+	for (i = 0 ; i < (GPON_ONU_MAX_GEM_PORTS / 32) ; i++) {
+		onuGponPortAesStatusImage[i] = 0;
+		rcode |= asicOntGlbRegWrite(mvAsicReg_GPON_GEM_AES_PID_TABLE, onuGponPortAesStatusImage[i], i);
+	}
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacAesEnableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function enable onu AES
+**
+**  PARAMETERS:  MV_BOOL enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacAesEnableSet(MV_BOOL enable)
+{
+	MV_STATUS rcode = MV_OK;
+	MV_U32 enableBit;
+
+	enableBit = (enable == MV_TRUE) ? 1 : 0;
+
+	rcode = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CONFIG_AES, enableBit, 0);
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacAesPortIdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function AES for port Id
+**
+**  PARAMETERS:  MV_U32 portId
+**               MV_BOOL   status
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacAesPortIdSet(MV_U32 portId, MV_BOOL status)
+{
+	MV_STATUS rcode;
+	MV_U32 group;
+	MV_U32 groupOffset;
+	MV_U32 regData;
+	MV_U32 statusBit;
+
+	group       = portId / 32;
+	groupOffset = portId % 32;
+	statusBit   = (status == MV_TRUE) ? 1 : 0;
+
+	/* Get Image */
+	regData = onuGponPortAesStatusImage[group];
+
+	/* Update the bit */
+	regData &= ~(1 << groupOffset);                 /* Clear the bit */
+	regData |= (statusBit << groupOffset);          /* Set the status */
+	onuGponPortAesStatusImage[group] = regData;     /* Update the Image */
+	rcode = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_AES_PID_TABLE, regData, group);
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacAesPortIdGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return port Id AES state
+**
+**  PARAMETERS:  MV_U32 portId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_BOOL mvOnuGponMacAesPortIdGet(MV_U32 portId)
+{
+	MV_U32 group;
+	MV_U32 groupOffset;
+	MV_U32 statusBit;
+	MV_BOOL status;
+
+	group       = portId / 32;
+	groupOffset = portId % 32;
+	statusBit = (onuGponPortAesStatusImage[group] >> groupOffset) & 1;
+
+	status = (statusBit == 0) ? MV_FALSE : MV_TRUE;
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacAesKeyShadowWrite
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function write AES key to GPON MAC
+**
+**  PARAMETERS:  MV_U8 *key
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacAesKeyShadowWrite(MV_U8 *key)
+{
+	MV_U32 i;
+	MV_U32 regData;
+	MV_STATUS rcode = MV_OK;
+
+	for (i = 0 ; i < 4 ; i++) {
+		regData = (((MV_U32)(key[i * 4]))     << 24) |
+			  (((MV_U32)(key[i * 4 + 1])) << 16) |
+			  (((MV_U32)(key[i * 4 + 2])) <<  8) |
+			  ((MV_U32)(key[i * 4 + 3]));
+		rcode |= asicOntGlbRegWrite(mvAsicReg_GPON_GEM_AES_SHADOW_KEY, regData, i);
+	}
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacIpgValueSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets IPG value
+**
+**  PARAMETERS:  MV_U32 ipgVal
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacIpgValueSet(MV_U32 ipgVal)
+{
+	return asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CFG_IPG_VALUE, ipgVal, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacIpgValueGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function returns IPG value
+**
+**  PARAMETERS:  MV_U32 *ipgVal
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacIpgValueGet(MV_U32 *ipgVal)
+{
+	return asicOntGlbRegRead(mvAsicReg_GPON_GEM_CFG_IPG_VALUE, ipgVal, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacIpgValidSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function enables IPG value settings
+**
+**  PARAMETERS:  MV_BOOL enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacIpgValidSet(MV_BOOL enable)
+{
+	MV_U32 enableBit = (enable == MV_TRUE) ? 1 : 0;
+
+	return asicOntGlbRegWrite(mvAsicReg_GPON_GEM_CFG_IPG_VALID, enableBit, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacIpgValidGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get IPG value inabled/disabled status
+**
+**  PARAMETERS:  MV_BOOL *enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacIpgValidGet(MV_BOOL *enable)
+{
+	MV_STATUS rcode = MV_OK;
+	MV_U32 enableBit;
+
+	if (enable == 0)
+		return MV_BAD_PARAM;
+
+	rcode  = asicOntGlbRegRead(mvAsicReg_GPON_GEM_CFG_IPG_VALID, &enableBit, 0);
+	if (rcode == MV_OK)
+		*enable = (enableBit == 0) ? MV_FALSE : MV_TRUE;
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxCtrlCmdGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx control command
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 *ctrlCmd
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxCtrlCmdGet(MV_U32 *ctrlCmd)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_RX_CTRL_Q_READ, ctrlCmd, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxCtrlDataUsedGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the Rx control data fifo size
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 *dataFifoSize
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxCtrlDataUsedGet(MV_U32 *dataFifoSize)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_RX_CTRL_DATA_USED, dataFifoSize, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxCtrlCmdUsedGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the Rx control cmd fifo size
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 *ctrlFifoSize
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxCtrlCmdUsedGet(MV_U32 *ctrlFifoSize)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_RX_CTRL_CMD_USED, ctrlFifoSize, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacRxCtrlHeadLenGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the header length of Rx control cmd or data packet
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 *headLen
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacRxCtrlHeadLenGet(MV_U32 *headLen)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_GEM_RX_CTRL_HQ_HEAD_LEN, headLen, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacGemInit
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function init onu Gem
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacGemInit(void)
+{
+	MV_U32 i;
+	MV_STATUS rcode = MV_OK;
+
+	for (i = 0 ; i < (GPON_ONU_MAX_GEM_PORTS / 32) ; i++) {
+		onuGponPortValidStatusImage[i] = 0;
+		rcode |= asicOntGlbRegWrite(mvAsicReg_GPON_GEM_VALID_PID_TABLE, onuGponPortValidStatusImage[i], i);
+	}
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPortIdValidSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set valid for port Id
+**
+**  PARAMETERS:  MV_U32 portId
+**               MV_BOOL   status
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacPortIdValidSet(MV_U32 portId, MV_BOOL status)
+{
+	MV_STATUS rcode;
+	MV_U32 group;
+	MV_U32 groupOffset;
+	MV_U32 regData;
+	MV_U32 statusBit;
+
+	group       = portId / 32;
+	groupOffset = portId % 32;
+	statusBit   = (status == MV_TRUE) ? 1 : 0;
+
+	/* Get Image */
+	regData = onuGponPortValidStatusImage[group];
+
+	/* Update the bit */
+	regData &= ~(1 << groupOffset);                 /* Clear the bit */
+	regData |= (statusBit << groupOffset);          /* Set the status */
+	onuGponPortValidStatusImage[group] = regData;   /* Update the Image */
+	rcode = asicOntGlbRegWrite(mvAsicReg_GPON_GEM_VALID_PID_TABLE, regData, group);
+
+	return rcode;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacPortIdValidGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return port Id valid state
+**
+**  PARAMETERS:  MV_U32 portId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_BOOL mvOnuGponMacPortIdValidGet(MV_U32 portId)
+{
+	MV_U32 group;
+	MV_U32 groupOffset;
+	MV_U32 statusBit;
+	MV_BOOL status;
+
+	group       = portId / 32;
+	groupOffset = portId % 32;
+	statusBit   = (onuGponPortValidStatusImage[group] >> groupOffset) & 1;
+
+	status = (statusBit == 0) ? MV_FALSE : MV_TRUE;
+
+	return status;
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                        SW FIFO                                             */
+/* ========================================================================== */
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoInit
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function inits SW FIFO
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void mvOnuGponMacFifoInit(void)
+{
+	fifoCtrl.fifoReadIndex    = 0;
+	fifoCtrl.fifoWriteIndex   = 0;
+	fifoCtrl.fifoReparoundNum = 0;
+
+	memset(fifoCtrl.fifoData, 0, GPON_SW_FIFO_SIZE * sizeof(S_MacPloamMsg));
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoMsgAlloc
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function allocates a buffer from the FIFO
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 **buffer
+**               MV_U32 *bufferIndex
+**
+**  RETURNS:     MV_OK or MV_FULL
+**
+*******************************************************************************/
+static inline MV_STATUS mvOnuGponMacFifoMsgAlloc(MV_U32 **buffer,
+						 MV_U32 *bufferIndex)
+{
+	MV_U32 nextWriteIndex;
+
+	nextWriteIndex = fifoCtrl.fifoWriteIndex + 1;
+
+	/* roll over */
+	if (nextWriteIndex >= GPON_SW_FIFO_SIZE) {
+		nextWriteIndex = 0;
+		fifoCtrl.fifoReparoundNum++;
+	}
+
+	if (nextWriteIndex != fifoCtrl.fifoReadIndex) {
+		*buffer      = (MV_U32*)(&(fifoCtrl.fifoData[nextWriteIndex]));
+		*bufferIndex = nextWriteIndex;
+
+		return MV_OK;
+	}
+
+	return MV_FULL;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoMsgSend
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets the buffer (message) for transmission
+**
+**  PARAMETERS:  MV_U32 bufferIndex
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+static inline void  mvOnuGponMacFifoMsgSend(MV_U32 bufferIndex)
+{
+	fifoCtrl.fifoWriteIndex = bufferIndex;
+	fifoMacMsgAdd++;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoMsgRece
+**  ____________________________________________ ________________________________
+**
+**  DESCRIPTION: The function receives a message  from the FIFO
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 **buffer
+**               MV_U32 *bufferIndex
+**
+**  RETURNS:     MV_OK or MV_EMPTY
+**
+*******************************************************************************/
+static inline MV_STATUS mvOnuGponMacFifoMsgRece(MV_U32 **buffer,
+						MV_U32 *bufferIndex)
+{
+	MV_U32 nextReadIndex;
+
+	if (fifoCtrl.fifoReadIndex != fifoCtrl.fifoWriteIndex) {
+		nextReadIndex = fifoCtrl.fifoReadIndex + 1;
+
+		/* roll over */
+		if (nextReadIndex >= GPON_SW_FIFO_SIZE)
+			nextReadIndex = 0;
+
+		*buffer      = (MV_U32*)(&(fifoCtrl.fifoData[nextReadIndex]));
+		*bufferIndex = nextReadIndex;
+
+		return MV_OK;
+	}
+
+	return MV_EMPTY;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoMsgFree
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function returns a buffer to the FIFO
+**
+**  PARAMETERS:  MV_U32 bufferIndex
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+static inline void  mvOnuGponMacFifoMsgFree(MV_U32 bufferIndex)
+{
+	fifoCtrl.fifoReadIndex = bufferIndex;
+	fifoMacMsgFree++;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoEmpty
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function returns an answer whether the FIFO is empty
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     1 - SW FIFO is empty
+**               0 - SW FIFO includes PLOAM messages
+**
+*******************************************************************************/
+static inline int mvOnuGponMacFifoEmpty(void)
+{
+	return fifoCtrl.fifoReadIndex == fifoCtrl.fifoWriteIndex;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoGetInfo
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Debug function
+**
+**  PARAMETERS:
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void mvOnuGponMacFifoGetInfo(S_MacFifoCtrl **ptr, MV_32 *supported)
+{
+	*ptr = &fifoCtrl;
+	*supported = fifoSupported;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoGetStat
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Debug function
+**
+**  PARAMETERS:
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void mvOnuGponMacFifoGetStat(MV_32 *callCnt, MV_32 *addSwCnt, MV_32 *freeSwCnt, MV_32 *sendHwCnt)
+{
+	*callCnt   = fifoMacMsgSend;
+	*addSwCnt  = fifoMacMsgAdd;
+	*freeSwCnt = fifoMacMsgFree;
+	*sendHwCnt = fifoMacPloamSend;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoAuditGetStat
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Debug function
+**
+**  PARAMETERS:
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void mvOnuGponMacFifoAuditGetStat(MV_32 *enterCnt, MV_32 *actionCnt)
+{
+	*enterCnt  = fifoAuditEnter;
+	*actionCnt = fifoAuditAction;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoSupportSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Debug function
+**
+**  PARAMETERS:
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void mvOnuGponMacFifoSupportSet(MV_32 value)
+{
+	fifoSupported = value;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacFifoCountersSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Debug function
+**
+**  PARAMETERS:
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void mvOnuGponMacFifoCountersSet(MV_U32 value)
+{
+	fifoMacMsgSend   = value;
+	fifoMacMsgAdd    = value;
+	fifoMacMsgFree   = value;
+	fifoMacPloamSend = value;
+	fifoAuditEnter   = value;
+	fifoAuditAction  = value;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponFifoAuditTimerExpireHndl
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function moves PLOAMs from SW to HW FIFO in case there is
+**               no new DS PLOAMs
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void mvOnuGponFifoAuditTimerExpireHndl(void)
+{
+	MV_STATUS rc;
+	MV_U32 hwFifoFreeEntries;
+	MV_32 i;
+	MV_U8     *buffer;
+	MV_U32 bufferIndex;
+
+	fifoAuditEnter++;
+
+	if (fifoAuditEnter <= 0) {
+		fifoAuditEnter  = 0;
+		fifoAuditAction = 0;
+	}
+
+	/* Verify whether SW FIFO is empty */
+	if (mvOnuGponMacFifoEmpty())
+		return;
+
+	/* Verify whether HW FIFO has free place */
+	rc = mvOnuGponMacTxPloamDataFreeGet(&hwFifoFreeEntries);
+
+	if ((rc != MV_OK) || (hwFifoFreeEntries < GPON_PLOAM_MSG_WORDS))
+		return;
+
+	/* Verify whether FIFO indexes have been changed from the last Audit cycle */
+	if ((fifoReadIdx  == fifoCtrl.fifoReadIndex) &&
+	    (fifoWriteIdx == fifoCtrl.fifoWriteIndex)) {
+		fifoAuditAction++;
+
+		/* Lock GPON interrupt */
+		/*onuPonIrqLock(onuPonResourceTbl_s.onuPonIrqId);   */
+
+		for (i = 0; i < GPON_MAX_US_MSG_TO_PROCESS; i++) {
+			if (mvOnuGponMacFifoMsgRece((MV_U32**)&buffer, &bufferIndex) == MV_EMPTY)
+				break;
+
+			if (mvOnuGponMacTxPloamSend(buffer[0], buffer[1], &buffer[2]) != MV_OK)
+				break;
+
+			mvOnuGponMacFifoMsgFree(bufferIndex);
+		}
+
+		/* Unlock GPON interrupt */
+		/*onuPonIrqUnlock(onuPonResourceTbl_s.onuPonIrqId); */
+		fifoReadIdx = fifoCtrl.fifoReadIndex;
+	} else {
+		/* Save current values of the FIFO indexes */
+		fifoReadIdx  = fifoCtrl.fifoReadIndex;
+		fifoWriteIdx = fifoCtrl.fifoWriteIndex;
+	}
+}
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                         Low-Level MAC Section                              */
+/* ========================================================================== */
+/******************************************************************************/
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                            GENERAL Routines                                */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuGponMacAsicVersionGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the onu asic version
+**
+**  PARAMETERS:  MV_U32 *asicVer
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacAsicVersionGet(MV_U32 *asicVer)
+{
+	MV_STATUS rcode;
+	MV_U32 asicVerVal;
+
+	rcode = asicOntGlbRegRead(mvAsicReg_GPON_GEN_MAC_VERSION, &asicVerVal, 0);
+	if (rcode != MV_OK)
+		return rcode;
+	else
+		*asicVer = asicVerVal;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacMicroSecCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return the onu micro sec counter
+**
+**  PARAMETERS:  MV_U32 *microSec
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacMicroSecCounterGet(MV_U32 *microSec)
+{
+	MV_STATUS rcode;
+	MV_U32 asicVerVal;
+
+	rcode = asicOntGlbRegRead(mvAsicReg_GPON_GEN_MICRO_SEC_CNT, &asicVerVal, 0);
+	if (rcode != MV_OK) return
+		rcode;
+	else
+		*microSec = asicVerVal;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacDyingGaspConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function enables and sets GPIO and DeBouncer registers to allow
+**               Dying Gasp interrupt.
+**
+**  PARAMETERS:  id- Dying Gasp 0 or 1.
+**               disableEnable 0 Disable 1 Enable.
+**               threshold - The number of sampling values in the debouncer before an input is asserted.
+**                           1 = 6.4n sec.
+**               polarity - 1= active on high, 3 = active on low.
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacDyingGaspConfigSet(MV_U32 id,
+					 MV_U32 disableEnable,
+					 MV_U32 polarity,
+					 MV_U32 threshold)
+{
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacXvrReset
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function execute xvr reset sequence
+**
+**  PARAMETERS:  MV_U32 xvrType
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacXvrReset(MV_U32 xvrType)
+{
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacXvrActivate
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function activates xvr
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacXvrActivate(void)
+{
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponMacTxSwCountersAdd
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function updates Tx Ploam message counters
+**
+**  PARAMETERS:  MV_U8   msgId
+**               MV_BOOL sucsses
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxSwCountersAdd(MV_U8 msgId, MV_BOOL sucsses)
+{
+	mvOnuGponMacPloamCnt.txMsgTotalPloamCounter++;
+
+	if (sucsses == MV_FALSE)
+		mvOnuGponMacPloamCnt.txErrMsgIdPloamCounter[msgId]++;
+	else
+		mvOnuGponMacPloamCnt.txMsgIdPloamCounter[msgId]++;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  ponOnuMacTxSwCountersGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function updates Tx Ploam message counters
+**
+**  PARAMETERS:  MV_U8   msgId
+**               MV_BOOL sucsses
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponMacTxSwCountersGet(void* txPloamPm)
+{
+	MV_U32 numOfMsgIdIndex;
+	S_MacTxPloamPm *outTxPloamPm = (S_MacTxPloamPm*)txPloamPm;
+
+	outTxPloamPm->txMsgTotalPloamCounter = mvOnuGponMacPloamCnt.txMsgTotalPloamCounter;
+
+	for (numOfMsgIdIndex = ONU_GPON_US_MSG_SN_ONU;
+	     numOfMsgIdIndex <= ONU_GPON_US_MSG_ACK;
+	     numOfMsgIdIndex++) {
+		outTxPloamPm->txMsgIdPloamCounter[numOfMsgIdIndex]    = mvOnuGponMacPloamCnt.txMsgIdPloamCounter[numOfMsgIdIndex];
+		outTxPloamPm->txErrMsgIdPloamCounter[numOfMsgIdIndex] = mvOnuGponMacPloamCnt.txErrMsgIdPloamCounter[numOfMsgIdIndex];
+	}
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponHighPriTxEnableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets high priority TX register
+**
+**  PARAMETERS:  MV_U32 txEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponHighPriTxEnableSet(MV_U32 txEnable)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_HIGH_PRI_CONFIG_EN, txEnable, 0);
+
+	/* clear high priority bitmap flag in case disable this feature */
+	if (!txEnable)
+		status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_HIGH_PRI_VALID_BITMAP, 0, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponHighPriTxValidBmSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets high priority TX valid bitmap
+**
+**  PARAMETERS:  MV_U32 validBm
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponHighPriTxValidBmSet(MV_U32 validBm)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_HIGH_PRI_VALID_BITMAP, validBm, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponHighPriTxValidBmGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function gets high priority TX valid bitmap
+**
+**  PARAMETERS:  MV_U32 *validBm
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponHighPriTxValidBmGet(MV_U32 *validBm)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_HIGH_PRI_VALID_BITMAP, validBm, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponHighPriTxMap0Set
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets high priority TX map 0
+**
+**  PARAMETERS:  MV_U32 map0
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponHighPriTxMap0Set(MV_U32 map0)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_HIGH_PRI_MAP_0, map0, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponHighPriTxMap0Get
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function gets high priority TX map 0
+**
+**  PARAMETERS:  MV_U32 *map0
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponHighPriTxMap0Get(MV_U32 *map0)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_HIGH_PRI_MAP_0, map0, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponHighPriTxMap1Set
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets high priority TX map 1
+**
+**  PARAMETERS:  MV_U32 map1
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponHighPriTxMap1Set(MV_U32 map1)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_GPON_TX_HIGH_PRI_MAP_1, map1, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuGponHighPriTxMap1Get
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function gets high priority TX map 1
+**
+**  PARAMETERS:  MV_U32 *map1
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuGponHighPriTxMap1Get(MV_U32 *map1)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_GPON_TX_HIGH_PRI_MAP_1, map1, 0);
+
+	return status;
+}
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           =========   =========   =========   ====      ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==          ==          ==     ==   ==     == ==           == */
+/* ==           ==          ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+/* ========================================================================== */
+/*                        Interrupt Functions Section                         */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPonInterruptGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return interrupt status
+**
+**  PARAMETERS:  MV_U32 *interrupt
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPonInterruptGet(MV_U32 *interrupt)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_INTR_REG, interrupt, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPonInterruptrMaskGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return interrupt mask
+**
+**  PARAMETERS:  MV_U32 *mask
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPonInterruptMaskGet(MV_U32 *mask)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_INTR_MASK, mask, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPonInterruptrMaskSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set interrupt mask
+**
+**  PARAMETERS:  MV_U32 mask
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPonInterruptMaskSet(MV_U32 mask)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_INTR_MASK, mask, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPonDbrLlidInterruptGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return DBR LLID interrupt status
+**
+**  PARAMETERS:  MV_U32 llid
+**               MV_U32 *interrupt
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPonDbrLlidInterruptGet(MV_U32 llid, MV_U32 *interrupt)
+{
+	if ((interrupt == 0) || (llid >= EPON_MAX_MAC_NUM))
+		return MV_ERROR;
+
+	return asicOntGlbRegRead(mvAsicReg_EPON_DBR_LLID_INT, interrupt, llid);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPonDbrInterruptGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return DBR interrupt status
+**
+**  PARAMETERS:  MV_U32 *interrupt
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPonDbrInterruptGet(MV_U32 *interrupt)
+{
+	if (interrupt == 0)
+		return MV_ERROR;
+
+	return asicOntGlbRegRead(mvAsicReg_EPON_DBR_INT, interrupt, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPonDbrInterruptMaskGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return DBR interrupt status
+**
+**  PARAMETERS:  MV_U32 *interrupt
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPonDbrInterruptMaskGet(MV_U32 *mask)
+{
+	return asicOntGlbRegRead(mvAsicReg_EPON_DBR_INT_LLID_MASK, mask, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPonDbrInterruptMaskSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set interrupt mask
+**
+**  PARAMETERS:  MV_U32 mask
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPonDbrInterruptMaskSet(MV_U32 mask)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_DBR_INT_LLID_MASK, mask, 0);
+	if (mask != 0)
+		status |= asicOntGlbRegWrite(mvAsicReg_EPON_DBR_INT_MASK, 1, 0);
+	else
+		status |= asicOntGlbRegWrite(mvAsicReg_EPON_DBR_INT_MASK, 0, 0);
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                        General Functions Section                           */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacVersionGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return mac version
+**
+**  PARAMETERS:  MV_U32 *version
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacVersionGet(MV_U32 *version)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GEN_MAC_VERSION_ADDR, version, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsRxEnableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets PcsRxEnable register
+**
+**  PARAMETERS:  MV_U32 rxEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsRxEnableSet(MV_U32 rxEnable)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_PCS_CONFIGURATION_RX_ENABLE, rxEnable, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsTxEnableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets PcsTxEnable register
+**
+**  PARAMETERS:  MV_U32 txEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsTxEnableSet(MV_U32 txEnable)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_PCS_CONFIGURATION_TX_ENABLE, txEnable, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuEnableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu Rx & Tx enable
+**
+**  PARAMETERS:  MV_U32 rxEnable
+**               MV_U32 txEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuEnableSet(MV_U32 rxEnable, MV_U32 txEnable)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_PCS_CONFIGURATION_RX_ENABLE, rxEnable, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_RX_ENABLE, rxEnable, 0);
+
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_PCS_CONFIGURATION_TX_ENABLE, txEnable, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_TX_ENABLE, txEnable, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuRxEnableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu Rx & Tx enable
+**
+**  PARAMETERS:  MV_U32 rxEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuRxEnableSet(MV_U32 rxEnable)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_PCS_CONFIGURATION_RX_ENABLE, rxEnable, 0);
+
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_RX_ENABLE, rxEnable, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuTxEnableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu Rx & Tx enable
+**
+**  PARAMETERS:  MV_U32 txEnable
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuTxEnableSet(MV_U32 txEnable, MV_U32 macId)
+{
+	MV_STATUS status;
+	MV_U32 currOnuTxEnable;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_GEN_ONT_TX_ENABLE, &currOnuTxEnable, 0);
+
+	if (txEnable == 0)
+		currOnuTxEnable &= ~(1 << macId);
+	else
+		currOnuTxEnable |=  (1 << macId);
+
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_TX_ENABLE, currOnuTxEnable, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu state
+**
+**  PARAMETERS:  MV_U32 onuState
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuStateSet(MV_U32 onuState, MV_U32 macId)
+{
+	MV_STATUS status;
+	MV_U32 currOnuState;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_GEN_ONT_STATE_REG, &currOnuState, 0);
+
+	if (onuState == 0)
+		currOnuState &= ~(1 << macId);
+	else
+		currOnuState |=  (1 << macId);
+
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_STATE_REG, currOnuState, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu state
+**
+**  PARAMETERS:  MV_U32 *onuState
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuStateGet(MV_U32 *onuState, MV_U32 macId)
+{
+	MV_STATUS status;
+	MV_U32 currOnuState;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_GEN_ONT_STATE_REG, &currOnuState, 0);
+
+	*onuState = ((currOnuState >> macId) & (0x1));
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuRegAutoUpdateStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu register auto update params
+**
+**  PARAMETERS:  MV_U32 value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuRegAutoUpdateStateSet(MV_U32 value)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_STATE_REG_AUTO_EN, value, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuReRegAutoUpdateStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu re-register auto update params
+**
+**  PARAMETERS:  MV_U32 value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuReRegAutoUpdateStateSet(MV_U32 value)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_STATE_REREG_AUTO_EN, value, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuDeRegAutoUpdateStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu de-register auto update params
+**
+**  PARAMETERS:  MV_U32 value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuDeRegAutoUpdateStateSet(MV_U32 value)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_STATE_DEREG_AUTO_EN, value, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacOnuNackAutoUpdateStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu nack auto update params
+**
+**  PARAMETERS:  MV_U32 value
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacOnuNackAutoUpdateStateSet(MV_U32 value)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_STATE_NACK_AUTO_EN, value, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenTqSizeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu TQ size
+**
+**  PARAMETERS:  MV_U32 tqRxSize
+**               MV_U32 tqTxSize
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenTqSizeSet(MV_U32 tqRxSize, MV_U32 tqTxSize)
+{
+	MV_STATUS status;
+	MV_U32 tqSize;
+
+	tqSize = ((tqTxSize & 0xF) << 4) |
+		 (tqRxSize & 0xF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_TQ_SIZE, tqSize, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenLaserParamSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu laser params
+**
+**  PARAMETERS:  MV_U32 onOffTime
+**               MV_U32 onTime
+**               MV_U32 offTime
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenLaserParamSet(MV_U32 onOffTime, MV_U32 onTime, MV_U32 offTime)
+{
+	MV_STATUS status;
+	MV_U32 lazerTime;
+
+	lazerTime =  ((onOffTime & 0xFF) << 16) |
+		    ((offTime & 0xFF) << 8)  |
+		    (onTime & 0xFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_LASER_PARAM, lazerTime, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenLaserParamGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return laser params
+**
+**  PARAMETERS:  MV_U32 *onOffTime
+**               MV_U32 *onTime
+**               MV_U32 *offTime
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenLaserParamGet(MV_U32 *onOffTime, MV_U32 *onTime, MV_U32 *offTime)
+{
+	MV_STATUS status;
+	MV_U32 lazerTime;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GEN_LASER_PARAM, &lazerTime, 0);
+
+	*onTime    =  (lazerTime        & 0xFF);
+	*offTime   = ((lazerTime >>  8) & 0xFF);
+	*onOffTime = ((lazerTime >> 16) & 0xFF);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenProcessingTimeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu processing time
+**
+**  PARAMETERS:  MV_U32 packetTailGuard
+**               MV_U32 tailGuard
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenTailGuardSet(MV_U32 packetTailGuard, MV_U32 tailGuard)
+{
+	MV_STATUS status;
+	MV_U32 guard;
+
+	guard =  ((packetTailGuard  & 0xFF) << 8)  |
+		(tailGuard  & 0xFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_TAIL_GUARD, guard, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSyncTimeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu sync time
+**
+**  PARAMETERS:  MV_U32 syncTime
+**               MV_U32 addSyncTime
+**               MV_U32 forceSwUpdate
+**               MV_U32 disAutoUpdate
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSyncTimeSet(MV_U32 syncTime,
+				     MV_U32 addSyncTime,
+				     MV_U32 forceSwUpdate,
+				     MV_U32 disGateAutoUpdate,
+				     MV_U32 disDiscoveryAutoUpdate)
+{
+	MV_STATUS status;
+	MV_U32 sync;
+
+	sync =         ((addSyncTime   & 0x00FF) << 24) |
+	       ((disDiscoveryAutoUpdate & 0x0001) << 18) |
+	       ((disGateAutoUpdate & 0x0001) << 17) |
+	       ((forceSwUpdate  & 0x0001) << 16) |
+	       (syncTime  & 0xFFFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_SYNC_TIME, sync, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSyncTimeGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return onu sync time
+**
+**  PARAMETERS:  MV_U32 *syncTime
+**               MV_U32 *addSyncTime
+**               MV_U32 *forceSwUpdate
+**               MV_U32 *disAutoUpdate
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSyncTimeGet(MV_U32 *syncTime,
+				     MV_U32 *addSyncTime,
+				     MV_U32 *forceSwUpdate,
+				     MV_U32 *disGateAutoUpdate,
+				     MV_U32 *disDiscoveryAutoUpdate)
+{
+	MV_STATUS status;
+	MV_U32 sync;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GEN_SYNC_TIME, &sync, 0);
+
+	*addSyncTime            = ((sync >> 24) & 0x00FF);
+	*disDiscoveryAutoUpdate = ((sync >> 18) & 0x0001);
+	*disGateAutoUpdate      = ((sync >> 17) & 0x0001);
+	*forceSwUpdate          = ((sync >> 16) & 0x0001);
+	*syncTime               = ((sync)       & 0xFFFF);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenBcastAddrSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu mac broadcast address
+**
+**  PARAMETERS:  MV_U32 bcastMacAddrHigh
+**               MV_U32 bcastMacAddrLow
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenBcastAddrSet(MV_U32 bcastMacAddrHigh, MV_U32 bcastMacAddrLow)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_BROADCAST_ADDR_LOW,  bcastMacAddrLow, 0);
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_GEN_BROADCAST_ADDR_HIGH, bcastMacAddrHigh & 0xFFFF, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSyncTimeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu configuration
+**
+**  PARAMETERS:  MV_U32 rxFec
+**               MV_U32 txFec
+**               MV_U32 reportAutoResponse
+**               MV_U32 ackAutoResponse
+**               MV_U32 requestAutoResponse
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenOnuConfigSet(MV_U32 rxPcsFecEn,
+				      MV_U32 txPcsFecEn,
+				      MV_U32 reportAutoResponse,
+				      MV_U32 ackAutoResponse,
+				      MV_U32 requestAutoResponse,
+				      MV_U32 txFecEn)
+{
+	MV_STATUS status;
+	MV_U32 config;
+
+	config =             ((txFecEn & 0x00FF) << 8) |
+		 ((requestAutoResponse & 0x0001) << 6) |
+		 ((ackAutoResponse & 0x0001) << 5) |
+		 ((reportAutoResponse & 0x0001) << 4) |
+		 ((rxPcsFecEn & 0x0001) << 1) |
+		 (txPcsFecEn & 0x0001);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_CONFIGURATION, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenOnuConfigAutoReportSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu configuration auto report
+**
+**  PARAMETERS:  MV_U32 reportAutoResponse
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenOnuConfigAutoReportSet(MV_U32 reportAutoResponse)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REPORT, reportAutoResponse, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenOnuConfigAutoAckSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu configuration auto ack
+**
+**  PARAMETERS:  MV_U32 ackAutoResponse
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenOnuConfigAutoAckSet(MV_U32 ackAutoResponse)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_ACK, ackAutoResponse, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenOnuConfigAutoRequestSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu configuration auto response
+**
+**  PARAMETERS:  MV_U32 requestAutoResponse
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenOnuConfigAutoRequestSet(MV_U32 requestAutoResponse)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REQUEST, requestAutoResponse, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSldSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu SLD
+**
+**  PARAMETERS:  MV_U32 sld
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSldSet(MV_U32 sld)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_SLD, sld, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenCtrlTypeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set control type (Ether type)
+**
+**  PARAMETERS:  MV_U32 sld
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenCtrlTypeSet(MV_U32 type)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_MAC_CONTROL_TYPE, type, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenLocalTimeStampSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu local timestamp
+**
+**  PARAMETERS:  MV_U32 timeStamp
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenLocalTimeStampSet(MV_U32 timeStamp)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_LOCAL_TIMESTAMP, timeStamp, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenLocalTimeStampGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return onu local timestamp
+**
+**  PARAMETERS:  MV_U32 *timeStamp
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenLocalTimeStampGet(MV_U32 *timeStamp)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_GEN_LOCAL_TIMESTAMP, timeStamp, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenPendGrantSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu pending grants
+**
+**  PARAMETERS:  MV_U32 grant
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenPendGrantSet(MV_U32 grant)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_NUM_OF_PENDING_GRANTS, grant, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenPendGrantSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return onu SGL status
+**
+**  PARAMETERS:  MV_U32 *status
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSglStatusGet(MV_U32 *sglStatus)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_GEN_SGL_STATUS, sglStatus, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenPonPhyDbgSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu PON phy debug
+**
+**  PARAMETERS:  MV_U32 ponDebug
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenPonPhyDbgSet(MV_U32 ponDebug)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_PON_PHY_DEBUG, ponDebug, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenPonPhyDbgGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return onu PON phy debug
+**
+**  PARAMETERS:  MV_U32 *ponDebug
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenPonPhyDbgGet(MV_U32 *ponDebug)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_GEN_PON_PHY_DEBUG, ponDebug, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSglSwReset
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return onu SGL sw reset
+**
+**  PARAMETERS:  MV_U32 swReset
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSglSwReset(MV_U32 swReset)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_SGL_SW_RESET, swReset, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSglConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu SGL configuration
+**
+**  PARAMETERS:  startThreshold
+**               dataAlignment
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSglConfig(MV_U32 startThreshold,
+				   MV_U32 dataAlignment)
+{
+	MV_STATUS status;
+	MV_U32 config;
+
+	config = ((dataAlignment  & 0x0001) << 4) |
+		 (startThreshold & 0x000F);
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_SGL_CONFIG, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSglDebounceConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu SGL Debounce configuration
+**
+**  PARAMETERS:  MV_U32 polarity
+**               MV_U32 threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSglDebounceConfig(MV_U32 polarity,
+					   MV_U32 threshold)
+{
+	MV_STATUS status;
+	MV_U32 config;
+
+	config = ((polarity  & 0x0001) << 16) |
+		 (threshold & 0xFFFF);
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_SGL_DEBOUNCE_CONFIG, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenSglDebounceEnable
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu SGL Debounce enable
+**
+**  PARAMETERS:  MV_U32 enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenSglDebounceEnable(MV_U32 enable)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_SGL_DEBOUNCE_ENABLE, enable, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenChurningKeySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu churning key
+**
+**  PARAMETERS:  MV_U32 enable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenChurningKeySet(MV_U32 key)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_TCH_CHURNING_KEY, key, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenOpcodeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu additional opcode
+**
+**  PARAMETERS:  MV_U32 opcodeType
+**               MV_U32 value
+**               MV_U32 index
+**               MV_U32 timestamp
+**               MV_U32 valid
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenOpcodeSet(MV_U32 opcodeType,
+				   MV_U32 value,
+				   MV_U32 index,
+				   MV_U32 timestamp,
+				   MV_U32 valid)
+{
+	MV_STATUS status = MV_OK;
+	MV_U32 opcode;
+
+	opcode =     ((valid & 0x0001) << 20) |
+		 ((timestamp & 0x0001) << 19) |
+		 ((index & 0x0007) << 16) |
+		 (value & 0xFFFF);
+
+	if (opcodeType == ADDITIONAL_OPCODE_1)
+		status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE1, opcode, 0);
+	else if (opcodeType == ADDITIONAL_OPCODE_2)
+		status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE2, opcode, 0);
+	else if (opcodeType == ADDITIONAL_OPCODE_3)
+		status = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE3, opcode, 0);
+
+	return status;
+}
+
+#ifndef PON_Z1
+/*******************************************************************************
+**
+**  mvOnuEponMacGenTimestampConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu timestamp configuration
+**
+**  PARAMETERS:  MV_U32 threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenTimestampConfig(MV_U32 gpmAddSyncTimeToTimestamp,
+					 MV_U32 gpmAimestampOffset,
+					 MV_U32 txmAddSyncTimeToTimestamp,
+					 MV_U32 txmUseTimestampImage,
+					 MV_U32 txmTimestampOffset)
+{
+	MV_STATUS status;
+	MV_U32 timestampConfig;
+
+	timestampConfig = ((gpmAddSyncTimeToTimestamp & 0x0001) << 31) |
+			  ((gpmAimestampOffset & 0x07FF) << 16) |
+			  ((txmAddSyncTimeToTimestamp & 0x0001) << 15) |
+			  ((txmUseTimestampImage & 0x0001) << 14) |
+			  (txmTimestampOffset & 0x07FF);
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_TIMESTAMP_CONFIG, timestampConfig, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenRxTimestampConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu RX timestamp configuration
+**
+**  PARAMETERS:
+**		MV_U32 rxpTimestampSelect	- 0 or 1
+**		MV_U32 rxpTimestampSign		- 0 or 1
+**		MV_U32 rxpTimestampOffset	- 0 to 0x7FF
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenRxTimestampConfigSet(MV_U32 rxpTimestampSelect,
+					      MV_U32 rxpTimestampSign,
+					      MV_U32 rxpTimestampOffset)
+{
+	MV_U32 timestampConfig;
+
+	timestampConfig = ((rxpTimestampSelect & 0x1) << 15) |
+			  ((rxpTimestampSign & 0x1) << 11) |
+			  (rxpTimestampOffset & 0x07FF);
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_RX_TIMESTAMP_CONFIG, timestampConfig, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenRxTimestampConfigGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function reads onu RX timestamp configuration
+**
+**  PARAMETERS:
+**		MV_U32 *rxpTimestampSelect	- 0 or 1
+**		MV_U32 *rxpTimestampSign	- 0 or 1
+**		MV_U32 *rxpTimestampOffset	- 0 to 0x7FF
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenRxTimestampConfigGet(MV_U32 *rxpTimestampSelect,
+					      MV_U32 *rxpTimestampSign,
+					      MV_U32 *rxpTimestampOffset)
+{
+	MV_STATUS status;
+	MV_U32 timestampConfig;
+
+	if ((rxpTimestampSelect == 0) || (rxpTimestampSign == 0) || (rxpTimestampOffset == 0))
+		return MV_BAD_PARAM;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GEN_ONT_RX_TIMESTAMP_CONFIG, &timestampConfig, 0);
+
+	if (status == MV_OK) {
+		*rxpTimestampSelect = (timestampConfig >> 15) & 0x1;
+		*rxpTimestampSign = (timestampConfig >> 11) & 0x1;
+		*rxpTimestampOffset = timestampConfig & 0x7FF;
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenRegPacketPaddingGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function gets onu packet padding
+**
+**  PARAMETERS:
+**		MV_U32 regAckPadding	- padding value for Ack (0 - 0xFF)
+**		MV_U32 regReqPadding	- padding value for Request (0 - 0xFF)
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenRegPacketPaddingGet(MV_U32 *regAckPadding, MV_U32 *regReqPadding)
+{
+	MV_STATUS status;
+	MV_U32 paddingConfig;
+
+	if ((regAckPadding == 0) || (regReqPadding == 0))
+		return MV_BAD_PARAM;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GEN_ONT_REGISTER_PACKET_PADDING, &paddingConfig, 0);
+
+	if (status == MV_OK) {
+		*regAckPadding = (paddingConfig >> 8) & 0xFF;
+		*regReqPadding = paddingConfig & 0xFF;
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenRegPacketPaddingSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets onu packet padding
+**
+**  PARAMETERS:
+**		MV_U32 *regAckPadding	- padding value for Ack
+**		MV_U32 *regReqPadding	- padding value for Request
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenRegPacketPaddingSet(MV_U32 regAckPadding, MV_U32 regReqPadding)
+{
+	MV_U32 paddingConfig;
+
+	paddingConfig = ((regAckPadding & 0xFF) << 8) | (regReqPadding & 0xFF);
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ONT_REGISTER_PACKET_PADDING, paddingConfig, 0);
+}
+
+#endif
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenDriftThresholdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu drift threshold
+**
+**  PARAMETERS:  MV_U32 threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenDriftThresholdSet(MV_U32 threshold)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_DRIFT_THRESHOLD, threshold, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenTimeStampForIntrSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu timestamp for interrupt
+**
+**  PARAMETERS:  MV_U32 timestamp
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenTimeStampForIntrSet(MV_U32 timestamp)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_TIMESTAMP_VAL_FOR_INTR, timestamp, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenTimeStampForIntrGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get onu timestamp for interrupt
+**
+**  PARAMETERS:  MV_U32 *timestamp
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenTimeStampForIntrGet(MV_U32 *timestamp)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_GEN_TIMESTAMP_VAL_FOR_INTR, timestamp, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUcastAddrSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu mac address
+**
+**  PARAMETERS:  MV_U32 ucastMacAddrHigh
+**               MV_U32 ucastMacAddrLow
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUcastAddrSet(MV_U32 ucastMacAddrHigh, MV_U32 ucastMacAddrLow, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_MAC_ADDR_LOW,  ucastMacAddrLow, macId);
+	status |= asicOntGlbRegWrite(mvAsicReg_EPON_GEN_MAC_ADDR_HIGH, ucastMacAddrHigh & 0xFFFF, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUtmTcPeriodSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu TC period
+**
+**  PARAMETERS:  MV_U32 tcPeriod
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUtmTcPeriodSet(MV_U32 tcPeriod)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_UTM_TC_PERIOD, tcPeriod, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUtmTcPeriodEnSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu TC period enable
+**
+**  PARAMETERS:  MV_U32 tcPeriodEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUtmTcPeriodEnSet(MV_U32 tcPeriodEnable)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_UTM_TC_PERIOD_VALID, tcPeriodEnable, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenGemIpgValueSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu IPG value
+**
+**  PARAMETERS:  MV_U32 ipgVal
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenGemIpgValueSet(MV_U32 ipgVal)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_GEM_IPG_VAL, ipgVal, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenGemIpgValueEnSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu IPG value enable
+**
+**  PARAMETERS:  MV_U32 ipgValEn
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenGemIpgValueEnSet(MV_U32 ipgValEn)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegWrite(mvAsicReg_EPON_GEN_GEM_IPG_VAL_VALID, ipgValEn, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUtmActTxBitmapSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu active TX bitmap
+**
+**  PARAMETERS:  MV_U32 txBitmap
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUtmActTxBitmapSet(MV_U32 txBitmap)
+{
+	return asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ACT_TX_BITMAP, txBitmap, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUtmActTxBitmapEnSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu active TX bitmap enable
+**
+**  PARAMETERS:  MV_U32 txBitmapEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUtmActTxBitmapEnSet(MV_U32 txBitmapEnable)
+{
+	return asicOntGlbRegWrite(mvAsicReg_EPON_GEN_ACT_TX_VALID, txBitmapEnable, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenTimeOfDayIntConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set onu active TX bitmap enable
+**
+**  PARAMETERS:  MV_U32 polarity - 0 = active high, 1 = active low
+**               MV_U32 width    - interrupt width in cycles (minimum 5)
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenTimeOfDayIntConfigSet(MV_U32 polarity, MV_U32 width)
+{
+	MV_U32 reg_val;
+
+	reg_val  = width & 0xFFFFFFF;
+	reg_val |= (polarity & 0x1) << 28;
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_GEN_TOD_INT_WIDTH, reg_val, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenTimeOfDayIntConfigGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get onu active TX bitmap enable
+**
+**  PARAMETERS:  MV_U32 *polarity - 0 = active high, 1 = active low
+**               MV_U32 *width    - interrupt width in cycles (minimum 5)
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenTimeOfDayIntConfigGet(MV_U32 *polarity, MV_U32 *width)
+{
+	MV_STATUS status;
+	MV_U32 reg_val;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GEN_TOD_INT_WIDTH, &reg_val, 0);
+	if (status == MV_OK) {
+		*width  = reg_val & 0xFFFFFFF;
+		*polarity = (reg_val >> 28) & 0x1;
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUtmExtReportEnSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set the state of extended report
+**
+**  PARAMETERS:  MV_U32 extReportEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUtmExtReportEnSet(MV_U32 extReportEnable)
+{
+	return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_EXT_REPORT_STATE, extReportEnable, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUtmExtReportBitmapEnSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set bitmap state of extended report
+**
+**  PARAMETERS:  MV_U32 llid
+**               MV_U32 reportBitmapEnable
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUtmExtReportBitmapEnSet(MV_U32 llid, MV_U32 reportBitmapEnable)
+{
+	MV_STATUS status;
+	MV_U32 value;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_EXT_REPORT_STATE_PER_TX, &value, 0);
+	if (status == MV_OK) {
+		value &= ~(1 << (llid & 0xF));
+		value |= ((reportBitmapEnable & 0x1) << (llid & 0xF));
+		return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_EXT_REPORT_STATE_PER_TX, value, 0);
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGenUtmExtReportMapSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set extended report map
+**
+**  PARAMETERS:  MV_U32 host_tx
+**               MV_U32 target_tx
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGenUtmExtReportMapSet(MV_U32 host_tx, MV_U32 target_tx)
+{
+	MV_STATUS status;
+	MV_U32 value;
+
+	if (host_tx < 8) {
+		status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_EXT_REPORT_MAP_0, &value, 0);
+		if (status == MV_OK) {
+			value &= ~(0xF << (4 * (host_tx & 0xF)));
+			value |= ((target_tx & 0xF) << (4 * (host_tx & 0xF)));
+			return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_EXT_REPORT_MAP_0, value, 0);
+		}
+	} else  {
+		status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_EXT_REPORT_MAP_1, &value, 0);
+		if (status == MV_OK) {
+			value &= ~(0xF << (4 * ((host_tx - 8) & 0xF)));
+			value |= ((target_tx & 0xF) << (4 * ((host_tx - 8) & 0xF)));
+			return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_EXT_REPORT_MAP_1, value, 0);
+		}
+	}
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                        RXP Functions Section                               */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpPacketSizeLimitSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set packet min / mac size
+**
+**  PARAMETERS:  MV_U32 minSize
+**               MV_U32 maxSize
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpPacketSizeLimitSet(MV_U32 minSize,
+					    MV_U32 maxSize)
+{
+	MV_STATUS status;
+	MV_U32 size;
+
+	size = ((maxSize & 0x0FFF) << 16) |
+	       (minSize & 0x0FFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_RXP_PACKET_SIZE_LIMIT, size, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpPacketSizeLimitGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return packet min / mac size
+**
+**  PARAMETERS:  MV_U32 *minSize
+**               MV_U32 *maxSize
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpPacketSizeLimitGet(MV_U32 *minSize,
+					    MV_U32 *maxSize)
+{
+	MV_STATUS status;
+	MV_U32 size;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_RXP_PACKET_SIZE_LIMIT, &size, 0);
+
+	*minSize =  size        & 0x0FFF;
+	*maxSize = (size >> 16) & 0x0FFF;
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpPacketFilterSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set packet filtering
+**
+**  PARAMETERS:  MV_U32 ignoreLlidCrcError
+**               MV_U32 ignoreFcsError
+**               MV_U32 ignoreGmiiError
+**               MV_U32 ignoreLengthError
+**               MV_U32 forwardAllLlid
+**               MV_U32 forwardBc0FFF
+**               MV_U32 forwardBc1FFF
+**               MV_U32 forwardBc1xxx
+**               MV_U32 dropBc1nnn
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpPacketFilterSet(MV_U32 ignoreLlidCrcError,
+					 MV_U32 ignoreFcsError,
+					 MV_U32 ignoreGmiiError,
+					 MV_U32 ignoreLengthError,
+					 MV_U32 forwardAllLlid,
+					 MV_U32 forwardBc0FFF,
+					 MV_U32 forwardBc1FFF,
+					 MV_U32 forwardBc1xxx,
+					 MV_U32 dropBc1nnn)
+{
+	MV_STATUS status;
+	MV_U32 filter;
+
+	filter =        ((dropBc1nnn & 0x0001) << 8) |
+		 ((forwardBc1xxx & 0x0001) << 7) |
+		 ((forwardBc1FFF & 0x0001) << 6) |
+		 ((forwardBc0FFF & 0x0001) << 5) |
+		 ((forwardAllLlid & 0x0001) << 4) |
+		 ((ignoreLengthError & 0x0001) << 3) |
+		 ((ignoreGmiiError & 0x0001) << 2) |
+		 ((ignoreFcsError & 0x0001) << 1) |
+		 (ignoreLlidCrcError & 0x0001);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_RXP_PACKET_FILTER, filter, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpPacketFilterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return packet filtering
+**
+**  PARAMETERS:  MV_U32 *ignoreLlidCrcError
+**               MV_U32 *ignoreFcsError
+**               MV_U32 *ignoreGmiiError
+**               MV_U32 *ignoreLengthError
+**               MV_U32 *forwardAllLlid
+**               MV_U32 *forwardBc0FFF
+**               MV_U32 *forwardBc1FFF
+**               MV_U32 *forwardBc1xxx
+**               MV_U32 *dropBc1nnn
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpPacketFilterGet(MV_U32 *ignoreLlidCrcError,
+					 MV_U32 *ignoreFcsError,
+					 MV_U32 *ignoreGmiiError,
+					 MV_U32 *ignoreLengthError,
+					 MV_U32 *forwardAllLlid,
+					 MV_U32 *forwardBc0FFF,
+					 MV_U32 *forwardBc1FFF,
+					 MV_U32 *forwardBc1xxx,
+					 MV_U32 *dropBc1nnn)
+{
+	MV_STATUS status;
+	MV_U32 filter;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_RXP_PACKET_FILTER, &filter, 0);
+
+	*dropBc1nnn         = ((filter >> 8) & 0x0001);
+	*forwardBc1xxx      = ((filter >> 7) & 0x0001);
+	*forwardBc1FFF      = ((filter >> 6) & 0x0001);
+	*forwardBc0FFF      = ((filter >> 5) & 0x0001);
+	*forwardAllLlid     = ((filter >> 4) & 0x0001);
+	*ignoreLengthError  = ((filter >> 3) & 0x0001);
+	*ignoreGmiiError    = ((filter >> 2) & 0x0001);
+	*ignoreFcsError     = ((filter >> 1) & 0x0001);
+	*ignoreLlidCrcError = ( filter       & 0x0001);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpPacketForwardSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set packet forwarding
+**
+**  PARAMETERS:  MV_U32 ctrlFrameToDataQueue
+**               MV_U32 ctrlFrameToCtrlQueue
+**               MV_U32 rprtFrameToDataQueue
+**               MV_U32 rprtFrameToRprtQueue
+**               MV_U32 slowFrameToRprtQueue
+**               MV_U32 slowFrameToCtrlQueue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpPacketForwardSet(MV_U32 ctrlFrameToDataQueue,
+					  MV_U32 ctrlFrameToCtrlQueue,
+					  MV_U32 rprtFrameToDataQueue,
+					  MV_U32 rprtFrameToRprtQueue,
+					  MV_U32 slowFrameToRprtQueue,
+					  MV_U32 slowFrameToCtrlQueue)
+{
+	MV_STATUS status;
+	MV_U32 forward;
+
+	forward = ((slowFrameToCtrlQueue & 0x0001) << 5) |
+		  ((slowFrameToRprtQueue & 0x0001) << 4) |
+		  ((rprtFrameToRprtQueue & 0x0001) << 3) |
+		  ((rprtFrameToDataQueue & 0x0001) << 2) |
+		  ((ctrlFrameToCtrlQueue & 0x0001) << 1) |
+		  (ctrlFrameToDataQueue & 0x0001);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_RXP_CTRL_FRAME_FORWARD, forward, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpPacketForwardGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return packet forwarding
+**
+**  PARAMETERS:  MV_U32 *ctrlFrameToDataQueue
+**               MV_U32 *ctrlFrameToCtrlQueue
+**               MV_U32 *rprtFrameToDataQueue
+**               MV_U32 *rprtFrameToRprtQueue
+**               MV_U32 *slowFrameToRprtQueue
+**               MV_U32 *slowFrameToCtrlQueue
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpPacketForwardGet(MV_U32 *ctrlFrameToDataQueue,
+					  MV_U32 *ctrlFrameToCtrlQueue,
+					  MV_U32 *rprtFrameToDataQueue,
+					  MV_U32 *rprtFrameToRprtQueue,
+					  MV_U32 *slowFrameToRprtQueue,
+					  MV_U32 *slowFrameToCtrlQueue)
+{
+	MV_STATUS status;
+	MV_U32 forward;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_RXP_CTRL_FRAME_FORWARD, &forward, 0);
+
+	*slowFrameToCtrlQueue = ((forward >> 5) & 0x0001);
+	*slowFrameToRprtQueue = ((forward >> 4) & 0x0001);
+	*rprtFrameToRprtQueue = ((forward >> 3) & 0x0001);
+	*rprtFrameToDataQueue = ((forward >> 2) & 0x0001);
+	*ctrlFrameToCtrlQueue = ((forward >> 1) & 0x0001);
+	*ctrlFrameToDataQueue = ( forward       & 0x0001);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpLlidDataSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set LLID Data entry
+**
+**  PARAMETERS:  MV_U32 llid
+**               MV_U32 index
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpLlidDataSet(MV_U32 llid, MV_U32 index)
+{
+	MV_STATUS status;
+
+	if (index >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_RXP_LLT_LLID_DATA, llid, index);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpLlidDataGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return LLID Data entry
+**
+**  PARAMETERS:  MV_U32 *llid
+**               MV_U32 index
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpLlidDataGet(MV_U32 *llid, MV_U32 index)
+{
+	MV_STATUS status;
+
+	if (index >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_RXP_LLT_LLID_DATA, llid, index);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpEncConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Encryption configuration
+**
+**  PARAMETERS:  MV_U32 config
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpEncConfigSet(MV_U32 config)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_RXP_ENCRYPTION_CONFIG, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpEncConfigGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Encryption configuration
+**
+**  PARAMETERS:  MV_U32 *config
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpEncConfigGet(MV_U32 *config)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_RXP_ENCRYPTION_CONFIG, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpEncKeySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Encryption key
+**
+**  PARAMETERS:  MV_U32 key
+**               MV_U32 index
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpEncKeySet(MV_U32 key, MV_U32 index, MV_U32 macId)
+{
+	MV_STATUS status = MV_OK;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	if (index == 0)
+		status = asicOntGlbRegWrite(mvAsicReg_EPON_RXP_ENCRYPTION_KEY0, key, macId);
+	else if (index == 1)
+		status = asicOntGlbRegWrite(mvAsicReg_EPON_RXP_ENCRYPTION_KEY1, key, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpEncKeyGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set Encryption key
+**
+**  PARAMETERS:  MV_U32 *keyIndex0
+**               MV_U32 *keyIndex1
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpEncKeyGet(MV_U32 *keyIndex0, MV_U32 *keyIndex1, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_RXP_ENCRYPTION_KEY0, keyIndex0, macId);
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_RXP_ENCRYPTION_KEY1, keyIndex1, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpDataFifoThresholdSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets Data FIFO Threshold
+**
+**  PARAMETERS:  MV_U32 threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpDataFifoThresholdSet(MV_U32 threshold)
+{
+	return asicOntGlbRegWrite(mvAsicReg_EPON_RXP_DATA_FIFO_THRESH, threshold, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxpDataFifoThresholdGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function gets Data FIFO Threshold
+**
+**  PARAMETERS:  MV_U32 *threshold
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxpDataFifoThresholdGet(MV_U32 *threshold)
+{
+	return asicOntGlbRegRead(mvAsicReg_EPON_RXP_DATA_FIFO_THRESH, threshold, 0);
+}
+
+/* ========================================================================== */
+/*                        GPM Functions Section                               */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmMacFutureGrantTimeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set future grants
+**
+**  PARAMETERS:  MV_U32 grant
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmMacFutureGrantTimeSet(MV_U32 grant)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GPM_MAX_FUTURE_GRANT_TIME, grant, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmMinProcessingTimeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set min processing time
+**
+**  PARAMETERS:  MV_U32 processingTime
+**               MV_U32 effectiveLength
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmMinProcessingTimeSet(MV_U32 processingTime, MV_U32 effectiveLength)
+{
+	MV_STATUS status;
+	MV_U32 minProcTime;
+
+	minProcTime = ((effectiveLength & 0x00FF) << 16) |
+		      (processingTime  & 0xFFFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GPM_MIN_PROCESSING_TIME, minProcTime, 0);
+
+	return status;
+}
+
+#ifdef PON_Z1
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmDiscoveryGrantLengthSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set discovery grant length
+**
+**  PARAMETERS:  MV_U32 grantLength
+**               MV_U32 grantLengthMultiTq
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmDiscoveryGrantLengthSet(MV_U32 grantLength, MV_U32 grantLengthMultiTq)
+{
+	MV_STATUS status;
+	MV_U32 discoveryGrantLength;
+
+	discoveryGrantLength = ((grantLengthMultiTq & 0x0FFF) << 16) |
+			       (grantLength  & 0x0FFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GPM_DISCOVERY_GRANT_LENGTH, discoveryGrantLength, 0);
+
+	return status;
+}
+
+#else /* Z2,A0 or later */
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmDiscoveryGrantLengthSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set discovery grant length
+**
+**  PARAMETERS:  MV_U32 grantLength
+**               MV_U32 addOffsetForCalc
+**               MV_U32 grantLengthMultiTq
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmDiscoveryGrantLengthSet(MV_U32 grantLength,
+						 MV_U32 addOffsetForCalc,
+						 MV_U32 grantLengthMultiTq)
+{
+	MV_STATUS status;
+	MV_U32 discoveryGrantLength;
+
+	discoveryGrantLength = ((grantLengthMultiTq & 0x0FFF) << 16) |
+			       ((addOffsetForCalc & 0x000F) << 12) |
+			       (grantLength  & 0x0FFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_GPM_DISCOVERY_GRANT_LENGTH, discoveryGrantLength, 0);
+
+	return status;
+}
+
+#endif /* Z2,A0 or later */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmRxSyncGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return Rx sync time
+**
+**  PARAMETERS:  MV_U32 *syncTime
+**               MV_U32 *syncTimeUpdateInd
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmRxSyncGet(MV_U32 *syncTime, MV_U32 *syncTimeUpdateInd)
+{
+	MV_STATUS status;
+	MV_U32 time;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_RX_SYNC_TIME, &time, 0);
+
+	*syncTimeUpdateInd = ((time >> 16) & 0x0001);
+	*syncTime          =  (time        & 0xFFFF);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmGrantValidCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmGrantValidCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_GRANT_VALID, counter, macId);
+
+	return status;
+}
+
+/*****************************************************S**************************
+**
+**  mvOnuEponMacGpmGrantMaxFutureTimeErrorCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmGrantMaxFutureTimeErrorCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_GRANT_MAX_FUTURE_TIME_ERR, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmMinProcTimeErrorCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmMinProcTimeErrorCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_MIN_PROC_TIME_ERR, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmLengthErrorCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmLengthErrorCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_LENGTH_ERR, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmDiscoveryAndRegisterCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmDiscoveryAndRegisterCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_DISCOVERY_AND_REGISTERED_ERR, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmFifoFullErrorCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmFifoFullErrorCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_FIFO_FULL_ERR, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmOpcDiscoveryNotRegisterBcastCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmOpcDiscoveryNotRegisterBcastCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_BCAST, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmOpcRegisterNotDiscoveryCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmOpcRegisterNotDiscoveryCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_OPC_REG_NOT_DISC, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmOpcDiscoveryNotRegisterNotBcastCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmOpcDiscoveryNotRegisterNotBcastCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_NOT_BCAST, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmOpcDropGrantCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmOpcDropGrantCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_OPC_DROPED_GRANT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmOpcHiddenGrantCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmOpcHiddenGrantCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_OPC_HIDDEN_GRANT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacGpmOpcBackToBackCounterGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return GPM counters
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacGpmOpcBackToBackCounterGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_GPM_OPC_BACK_TO_BACK_GRANT, counter, macId);
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                        TXM Functions Section                               */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmOverheadSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX module overhead
+**
+**  PARAMETERS:  MV_U32 overhead
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmOverheadSet(MV_U32 overhead)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_DEFAULT_OVERHEAD, overhead, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmOverheadGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get TX module overhead
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 overhead
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmOverheadGet(MV_U32 *overhead)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_DEFAULT_OVERHEAD, overhead, 0);
+
+	return status;
+}
+
+#ifdef PON_Z1
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX configuration
+**
+**  PARAMETERS:  MV_U32 mode
+**               MV_U32 alignment
+**               MV_U32 priority
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmConfigSet(MV_U32 mode, MV_U32 alignment, MV_U32 priority)
+{
+	MV_STATUS status;
+	MV_U32 config;
+
+	config =      ((mode & 0x0003) << 3) |
+		 ((alignment & 0x0003) << 1) |
+		 (priority & 0x0001);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CONFIGURATION, config, 0);
+
+	return status;
+}
+
+#else /* Z2,A0 or later */
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX configuration
+**
+**  PARAMETERS:  MV_U32 mode
+**               MV_U32 alignment
+**               MV_U32 priority
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmConfigSet(MV_U32 tFec1Cfg, MV_U32 tFec2Cfg, MV_U32 ctrlFifoDisFcs,
+				   MV_U32 maskGmiiSignal, MV_U32 blockDataFromDataPath,
+				   MV_U32 addIpgToLenCalc, MV_U32 mode, MV_U32 alignment,
+				   MV_U32 priority)
+{
+	MV_STATUS status;
+	MV_U32 config;
+
+	config =              ((tFec1Cfg & 0x0007) << 13) |
+		 ((tFec2Cfg & 0x0007) << 10) |
+		 ((ctrlFifoDisFcs & 0x0001) <<  8) |
+		 ((maskGmiiSignal & 0x0001) <<  7) |
+		 ((blockDataFromDataPath & 0x0001) <<  6) |
+		 ((addIpgToLenCalc & 0x0001) <<  5) |
+		 ((mode & 0x0003) <<  3) |
+		 ((alignment & 0x0003) <<  1) |
+		 (priority & 0x0001);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CONFIGURATION, config, 0);
+
+	return status;
+}
+
+#endif /* Z2,A0 or later */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmPowerUpIndSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX Multiplexer power up inidication burst time
+**
+**  PARAMETERS:  MV_U32 time   - pre-active burst time in clock cycles units
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmPowerUpIndSet(MV_U32 time)
+{
+	return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_POWER_UP, time, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmPowerUpIndGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX Multiplexer power up inidication burst time
+**
+**  PARAMETERS:  MV_U32 *time   - pre-active burst time in clock cycles units
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmPowerUpIndGet(MV_U32 *time)
+{
+	return asicOntGlbRegRead(mvAsicReg_EPON_TXM_POWER_UP, time, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmLlidSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX LLID
+**
+**  PARAMETERS:  MV_U32 llid
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmLlidSet(MV_U32 llid, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_TX_LLID, llid, macId);
+
+	return status;
+}
+
+#ifdef PON_Z1
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX CPP Report configuration
+**
+**  PARAMETERS:  MV_U32 config
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportConfig(MV_U32 config, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_CONFIG, config, macId);
+
+	return status;
+}
+
+#else /* Z2,A0 or later */
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX CPP Report configuration
+**
+**  PARAMETERS:  MV_U32 config
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportConfig(MV_U32 queueReportQ2, MV_U32 reportBitmapQ2,
+					 MV_U32 queueReport, MV_U32 queueSet,
+					 MV_U32 reportBitmap, MV_U32 macId)
+{
+	MV_STATUS status;
+	MV_U32 config;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	config = ((queueReportQ2 & 0x00FF) << 18) |
+		 ((reportBitmapQ2 & 0x0001) << 16) |
+		 ((queueReport & 0x00FF) << 2)  |
+		 ((queueSet & 0x0003) << 1)  |
+		 (reportBitmap & 0x0001);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_CONFIG, config, macId);
+
+	return status;
+}
+
+#endif /* Z2,A0 or later */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportBitMap
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX CPP Report Bit Map
+**
+**  PARAMETERS:  MV_U32 bitMap
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportBitMap(MV_U32 bitMap, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_BIT_MAP, bitMap, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportBitMapGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX CPP Report Bit Map
+**
+**  PARAMETERS:  MV_U32 bitMap
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportBitMapGet(MV_U32 *bitMap, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_CPP_RPRT_BIT_MAP, bitMap, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueueSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX CPP Report Queue Set
+**
+**  PARAMETERS:  MV_U32 queueSet
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueueSet(MV_U32 queueSet, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_SET, queueSet, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueueSetGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue Set
+**
+**  PARAMETERS:  MV_U32 *queueSet
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueueSetGet(MV_U32 *queueSet, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_SET, queueSet, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue0
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue0(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_0, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue1
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue1(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_1, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue2
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue2(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_2, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue3
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue3(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_3, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue4
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue4(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_4, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue5
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue5(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_5, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue6
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue6(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_6, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueue7
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueue7(MV_U32 queue, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_7, queue, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportQueueX
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue 0 - 7
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportQueueX(MV_U32 queueNum, MV_U32 queueCfg, MV_U32 macId)
+{
+	MV_STATUS status = MV_OK;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	if (queueNum == 0)
+		status |= mvOnuEponMacTxmCppReportQueue0(queueCfg, macId);
+	else if (queueNum == 1) status |= mvOnuEponMacTxmCppReportQueue1(queueCfg, macId);
+	else if (queueNum == 2) status |= mvOnuEponMacTxmCppReportQueue2(queueCfg, macId);
+	else if (queueNum == 3) status |= mvOnuEponMacTxmCppReportQueue3(queueCfg, macId);
+	else if (queueNum == 4) status |= mvOnuEponMacTxmCppReportQueue4(queueCfg, macId);
+	else if (queueNum == 5) status |= mvOnuEponMacTxmCppReportQueue5(queueCfg, macId);
+	else if (queueNum == 6) status |= mvOnuEponMacTxmCppReportQueue6(queueCfg, macId);
+	else if (queueNum == 7) status |= mvOnuEponMacTxmCppReportQueue7(queueCfg, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportUpdate
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return TX CPP Report Queue
+**
+**  PARAMETERS:  MV_U32 queue
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportUpdate(MV_U32 validQueueReport, MV_U32 highestReportQueue, MV_U32 macId)
+{
+	MV_STATUS status;
+	MV_U32 queueNum;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status  = mvOnuEponMacTxmCppReportConfig(0xFF,                                  /* Queueset2 not supported - set to 0xFF (queueReportQ2) */
+						 0x1,                                   /* Queueset2 not supported - set to 0x1, Software (reportBitmapQ2) */
+						 ~(validQueueReport & 0xFF),            /* Queueset1 supported - set to 0, means all 8 queues are active (queueReport) */
+						 0x1,                                   /* Number of queueSet - support for 1 queueset */
+						 0x1,                                   /* Queueset1 supported - set to 0x1, Software (reportBitmap) */
+						 macId);
+	status |= mvOnuEponMacTxmCppReportBitMap(validQueueReport & 0xFF, macId);       /* Queueset1 - 8 queues enabled(0xFF) , Queueset1 - 8 queues disabled(0x00) */
+	status |= mvOnuEponMacTxmCppReportQueueSet(0x1, macId);                         /* Number of queuesets - support for 1 queueset */
+
+	for (queueNum = 0; queueNum < ONU_DBA_MAX_QUEUE; queueNum++) {
+		if (validQueueReport & (1 << queueNum)) {
+			if (queueNum == highestReportQueue)
+				status |= mvOnuEponMacTxmCppReportQueueX(queueNum, 0x000003ff, macId);
+			else
+				status |= mvOnuEponMacTxmCppReportQueueX(queueNum, 0x000003ff, macId);
+		} else
+			status |= mvOnuEponMacTxmCppReportQueueX(queueNum, 0x0, macId);
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppReportFecConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set TX CPP Report FEC config
+**
+**  PARAMETERS:  MV_U32 fecConst1
+**               MV_U32 fecConst2
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppReportFecConfig(MV_U32 fecConst1, MV_U32 fecConst2)
+{
+	MV_STATUS status;
+	MV_U32 config;
+
+	config = ((fecConst2 & 0x00FF) << 16) |
+		 (fecConst1 & 0xFFFF);
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPRT_FEC_CONFIG, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppRpmReportConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set RPM report configuration
+**
+**  PARAMETERS:  MV_U32 bitmap - bitmap order
+**               MV_U32 qset   - qset order
+**               MV_U32 mode   - report generation mode
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppRpmReportConfigSet(MV_U32 bitmap,
+					       MV_U32 qset,
+					       MV_U32 mode)
+{
+	MV_U32 config;
+
+	config = ((bitmap & 0x1) << 3) |
+		 ((qset & 0x1)   << 2) |
+		 (mode & 0x3);
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPM_REPORT_CONFIG, config, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppRpmFifoDbaConfig
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set RPM additional DBA for control FIFO.
+**
+**  PARAMETERS:  MV_U32 fifoEnable  - Whether enable this feature
+**               MV_U32 dbaQueue    - report queue for DBA
+**               MV_U32 dbaOverhead - report overhead for DBA
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppRpmFifoDbaConfig(MV_U32 fifoEnable,
+					     MV_U32 dbaQueue,
+					     MV_U32 dbaOverhead)
+{
+	MV_U32 config;
+
+	config = ((fifoEnable & 0x1) << 1) |
+		 ((dbaQueue & 0x7)   << 2) |
+		 ((dbaOverhead & 0x7f) << 5 );
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPM_CTRL_FIFO_DBA, config, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmCppRpmIdxReportTableSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set RPM index report table
+**
+**  PARAMETERS:  MV_U32 llid   - LLID used for table entry access
+**               MV_U32 data   - table data (command)
+**               MV_U32 addr   - table address
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmCppRpmIdxReportTableSet(MV_U32 llid,
+						 MV_U32 data,
+						 MV_U32 addr)
+{
+	MV_U32 entry;
+
+	entry = ((llid & 0x7)  << 5)  |
+		((data & 0x3F) << 16) |
+		(addr & 0x1F);
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CPP_RPM_ADX_REPORT_TBL, entry, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmTxCtrlFiFoFlush
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function flush the TX control FIFO
+**
+**  PARAMETERS:  MV_U32 llid   - LLID used to flush
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmTxCtrlFiFoFlush(MV_U32 llid)
+{
+	MV_U32 value;
+
+	value = (1 << (llid & 0x7));
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_CTRL_FIFO_FLUSH, value, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmHighPriBitmapSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set high priority TX bitmap
+**
+**  PARAMETERS:  MV_U32 llid
+**               MV_U32 highPriEn
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmHighPriBitmapSet(MV_U32 llid, MV_U32 highPriEn)
+{
+	MV_STATUS status;
+	MV_U32 value;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_HIGH_PRI_TX_STATE_BITMAP, &value, 0);
+	if (status == MV_OK) {
+		value &= ~(1 << (llid & 0xF));
+		value |= ((highPriEn & 0x1) << (llid & 0xF));
+		return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_HIGH_PRI_TX_STATE_BITMAP, value, 0);
+	}
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxmHighPriMapSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set high priority TX map
+**
+**  PARAMETERS:  MV_U32 llid
+**               MV_U32 tx_bm
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxmHighPriMapSet(MV_U32 llid, MV_U32 tx_bm)
+{
+	MV_STATUS status;
+	MV_U32 value;
+
+	if (llid < 4) {
+		status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_0, &value, 0);
+		if (status == MV_OK) {
+			value &= ~(0xFF << (8 * (llid & 0xF)));
+			value |= ((tx_bm & 0xFF) << (8 * (llid & 0xF)));
+			return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_0, value, 0);
+		}
+	} else  {
+		status = asicOntGlbRegRead(mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_1, &value, 0);
+		if (status == MV_OK) {
+			value &= ~(0xFF << (8 * ((llid - 4) & 0xF)));
+			value |= ((tx_bm & 0xFF) << (8 * ((llid - 4) & 0xF)));
+			return asicOntGlbRegWrite(mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_1, value, 0);
+		}
+	}
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                        PCS Functions Section                               */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsConfigSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set PCS configuration
+**
+**  PARAMETERS:  MV_U32 config
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsConfigSet(MV_U32 config)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_PCS_CONFIGURATION, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsConfigGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get PCS configuration
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 config
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsConfigGet(MV_U32 *config)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_PCS_CONFIGURATION, config, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsDelaySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set PCS delay
+**
+**  PARAMETERS:  MV_U32 delay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsDelaySet(MV_U32 delay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_PCS_DELAY_CONFIG, delay, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsStatsGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get PCS stats (0,1,2,3,4)
+**
+**  PARAMETERS:
+**		MV_U32 *legalFrameCnt,
+**		MV_U32 *maxFrameSizeErrCnt,
+**		MV_U32 *parityLenErrCnt,
+**		MV_U32 *longGateErrCnt,
+**		MV_U32 *protocolErrCnt,
+**		MV_U32 *minFrameSizeErrCnt,
+**		MV_U32 *legalFecFrameCnt,
+**		MV_U32 *legalNonFecFrameCnt
+**  OUTPUTS:
+**		Counter values assigned to input parameters
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsStatsGet(MV_U32 *legalFrameCnt,
+				  MV_U32 *maxFrameSizeErrCnt,
+				  MV_U32 *parityLenErrCnt,
+				  MV_U32 *longGateErrCnt,
+				  MV_U32 *protocolErrCnt,
+				  MV_U32 *minFrameSizeErrCnt,
+				  MV_U32 *legalFecFrameCnt,
+				  MV_U32 *legalNonFecFrameCnt)
+{
+	MV_U32 regVal;
+	MV_STATUS status;
+
+	if ((legalFrameCnt == 0) || (maxFrameSizeErrCnt == 0) ||
+	    (parityLenErrCnt == 0) || (longGateErrCnt == 0) ||
+	    (protocolErrCnt == 0) || (minFrameSizeErrCnt == 0) ||
+	    (legalFecFrameCnt == 0) || (legalNonFecFrameCnt == 0))
+		return MV_BAD_PARAM;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_0, &regVal, 0);
+	*legalFrameCnt = regVal;
+
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_1, &regVal, 0);
+	*maxFrameSizeErrCnt = (regVal >> 16) & 0xFFFF;
+
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_1, &regVal, 0);
+	*parityLenErrCnt = regVal & 0xFFFF;
+
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_2, &regVal, 0);
+	*longGateErrCnt = (regVal >> 16) & 0xFFFF;
+
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_2, &regVal, 0);
+	*protocolErrCnt = regVal & 0xFFFF;
+
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_3, &regVal, 0);
+	*minFrameSizeErrCnt = regVal & 0xFFFF;
+
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_4, &regVal, 0);
+	*legalFecFrameCnt = (regVal >> 16) & 0xFFFF;
+
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_PCS_STATS_4, &regVal, 0);
+	*legalNonFecFrameCnt = regVal & 0xFFFF;
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsFrameSizeLimitsSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set PCS frame size  limits
+**
+**  PARAMETERS:  MV_U32 size      - maximum frame size
+**               MV_U32 latency   - FEC decoder latency
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsFrameSizeLimitsSet(MV_U32 size, MV_U32 latency)
+{
+	MV_U32 reg_val;
+
+	reg_val  = size & 0xFFF;
+	reg_val |= (latency & 0x1FFF) << 16;
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_PCS_FRAME_SZ_LIMITS, reg_val, 0);
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPcsFrameSizeLimitsGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function get PCS frime size limits
+**
+**  PARAMETERS:  None
+**
+**  OUTPUTS:     MV_U32 *size      - maximum framce size
+**               MV_U32 *latency   - FEC decoder latency
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPcsFrameSizeLimitsGet(MV_U32 *size, MV_U32 *latency)
+{
+	MV_STATUS status;
+	MV_U32 reg_val;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_PCS_FRAME_SZ_LIMITS, &reg_val, 0);
+	if (status == MV_OK) {
+		*size = reg_val & 0xFFF;
+		*latency = (reg_val >> 16) & 0x1FFF;
+	}
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                        DDM Functions Section                               */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacDdmDelaySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set DDM delay
+**
+**  PARAMETERS:  MV_U32 delay
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacDdmDelaySet(MV_U32 delay)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_DDM_DELAY_CONFIG, delay, 0);
+
+	return status;
+}
+
+#ifdef PON_Z1
+/*******************************************************************************
+**
+**  mvOnuEponMacDdmTxPolaritySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set DDM polarity
+**
+**  PARAMETERS:  MV_U32 polarity
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacDdmTxPolaritySet(MV_U32 polarity)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_DDM_TX_POLARITY, polarity, 0);
+
+	return status;
+}
+
+#else /* Z2,A0 or later */
+/*******************************************************************************
+**
+**  mvOnuEponMacDdmTxPolaritySet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function set DDM polarity
+**
+**  PARAMETERS:  MV_U32 txEnable       - mask TX enabled with TX allowed
+**               MV_U32 txPolarity     - TX polarity (0 - active high)
+**               MV_U32 serdesPolarity - SERDES shutdown polarity (0 - active low)
+**               MV_U32 xvrPolarity    - XVR shutdown polarity (0 - active low)
+**               MV_U32 burstEnabl     - burst enable mode
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacDdmTxPolaritySet(MV_U32 txEnable,
+				       MV_U32 txPolarity,
+				       MV_U32 serdesPolarity,
+				       MV_U32 xvrPolarity,
+				       MV_U32 burstEnable)
+{
+	MV_U32 config;
+
+	config = ((burstEnable & 0x1)    << 5) |
+		 ((xvrPolarity & 0x1)    << 4) |
+		 ((serdesPolarity & 0x1) << 3) |
+		 ((txEnable & 0x3)       << 1) |
+		 (txPolarity & 0x1);
+
+	return asicOntGlbRegWrite(mvAsicReg_EPON_DDM_TX_POLARITY, config, 0);
+}
+
+#endif /* Z2,A0 or later */
+
+/* ========================================================================== */
+/*                        Statistics Functions Section                        */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxStatsFcsErrorGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received with FCS error counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxStatsFcsErrorGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_RXP_FCS_ERROR_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxStatsShortErrorGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received short packets error counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxStatsShortErrorGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_RXP_SHORT_ERROR_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxStatsLongErrorGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received long packets error counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxStatsLongErrorGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_RXP_LONG_ERROR_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxStatsDataFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received data frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxStatsDataFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_RXP_DATA_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxStatsCtrlFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received control frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxStatsCtrlFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_RXP_CTRL_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxStatsReportFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received report frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxStatsReportFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_RXP_REPORT_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacRxStatsGateFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return received gate frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacRxStatsGateFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_RXP_GATE_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxStatsCtrlRegReqFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return transmitted REGISTER REQUEST frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxStatsCtrlRegReqFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_TXP_CTRL_REG_REQ_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxStatsCtrlRegAckFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return transmitted REGISTER ACK frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxStatsCtrlRegAckFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_TXP_CTRL_REG_ACK_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxStatsCtrlReportFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return transmitted report frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxStatsCtrlReportFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_TXP_CTRL_REPORT_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxStatsDataFrameGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return transmitted data frames counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxStatsDataFrameGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_TXP_DATA_FRAMES_CNT, counter, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacTxStatsTxAllowedByteCountGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return transmitted Tx Allowed byte counter
+**
+**  PARAMETERS:  MV_U32 *counter
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacTxStatsTxAllowedByteCountGet(MV_U32 *counter, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_STAT_TXP_TX_ALLOWED_BYTE_CNT, counter, macId);
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                        CPQ Functions Section                               */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxCtrlHeaderQueueUsedCountGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return control header queue used count
+**
+**  PARAMETERS:  MV_U32 *usedCount
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxCtrlHeaderQueueUsedCountGet(MV_U32 *usedCount)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_CTRL_HQ_USED, usedCount, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxCtrlHeaderQueueReadData
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return control header queue data
+**
+**  PARAMETERS:  MV_U32 *dataLow
+**               MV_U32 *dataHigh
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxCtrlHeaderQueueReadData(MV_U32 *dataLow, MV_U32 *dataHigh)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_L, dataLow, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_H, dataHigh, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxCtrlQueueUsedCountGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return control queue used count
+**
+**  PARAMETERS:  MV_U32 *usedCount
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxCtrlQueueUsedCountGet(MV_U32 *usedCount)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_CTRL_Q_USED, usedCount, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxCtrlQueueReadData
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return control queue data
+**
+**  PARAMETERS:  MV_U32 *data
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxCtrlQueueReadData(MV_U32 *data)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_CTRL_Q_READ, data, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxRprtHeaderQueueUsedCountGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return report header queue used count
+**
+**  PARAMETERS:  MV_U32 *usedCount
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxRprtHeaderQueueUsedCountGet(MV_U32 *usedCount)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_RPRT_HQ_USED, usedCount, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxRprtHeaderQueueReadData
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return report header queue data
+**
+**  PARAMETERS:  MV_U32 *dataLow
+**               MV_U32 *dataHigh
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxRprtHeaderQueueReadData(MV_U32 *dataLow, MV_U32 *dataHigh)
+{
+	MV_STATUS status;
+
+	status  = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_L, dataLow, 0);
+	status |= asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_H, dataHigh, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxRprtQueueUsedCountGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return report queue used count
+**
+**  PARAMETERS:  MV_U32 *usedCount
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxRprtQueueUsedCountGet(MV_U32 *usedCount)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_RPRT_Q_USED, usedCount, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqRxRprtQueueReadData
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return report queue data
+**
+**  PARAMETERS:  MV_U32 *data
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqRxRprtQueueReadData(MV_U32 *data)
+{
+	MV_STATUS status;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_RX_RPRT_Q_READ, data, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqTxCtrlHeaderQueueFree
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return control header queue free count
+**
+**  PARAMETERS:  MV_U32 *freeCount
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqTxCtrlHeaderQueueFree(MV_U32 *freeCount, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_TX_CTRL_HQ_FREE, freeCount, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqTxCtrlHeaderQueueWrite
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function write control header queue data
+**
+**  PARAMETERS:  MV_U32 data
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqTxCtrlHeaderQueueWrite(MV_U32 data, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_CPQ_TX_CTRL_HQ_WRITE, data, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqTxCtrlQueueFree
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function return control queue free count
+**
+**  PARAMETERS:  MV_U32 *freeCount
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqTxCtrlQueueFree(MV_U32 *freeCount, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegRead(mvAsicReg_EPON_CPQ_TX_CTRL_Q_FREE, freeCount, macId);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacCpqTxCtrlQueueWrite
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function write control queue data
+**
+**  PARAMETERS:  MV_U32 data
+**               MV_U32 macId
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacCpqTxCtrlQueueWrite(MV_U32 data, MV_U32 macId)
+{
+	MV_STATUS status;
+
+	if (macId >= EPON_MAX_MAC_NUM)
+		return MV_ERROR;
+
+	status = asicOntGlbRegWrite(mvAsicReg_EPON_CPQ_TX_CTRL_Q_WRITE, data, macId);
+
+	return status;
+}
+
+/* ========================================================================== */
+/*                        PPv2 Functions Section                               */
+/* ========================================================================== */
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPPv2DbaLlidAndQueueIndirectAccess
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configure PPv2 indirect register access
+**
+**  PARAMETERS:  MV_U32 llidIndex
+**               MV_U32 queueIndex
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPPv2DbaLlidAndQueueIndirectAccess(MV_U32 llidIndex, MV_U32 queueIndex)
+{
+	MV_STATUS status;
+	MV_U32 access;
+
+	access = (((llidIndex & 0xF) << 3) | (queueIndex & 0x7));
+
+	status = asicOntMiscRegWrite(mvAsicReg_PPv2_TX_PON_BYTE_CNT_INDEX, access, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPPv2DbaQueueOverheadeSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configure PPv2 Queue overhead value
+**
+**  PARAMETERS:  MV_U32 queueOverhead
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPPv2DbaQueueOverheadSet(MV_U32 queueOverhead)
+{
+	MV_STATUS status;
+
+	status = asicOntMiscRegWrite(mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_QUE_OVR, queueOverhead, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPPv2DbaPacketModSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configure PPv2 packet modification value
+**
+**  PARAMETERS:  MV_U32 packetMod
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPPv2DbaPktModSet(MV_U32 packetMod)
+{
+	MV_STATUS status;
+
+	status = asicOntMiscRegWrite(mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_PKT_MOD, packetMod, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPPv2DbaPostFecSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configure PPv2 Post FEc value
+**
+**  PARAMETERS:  MV_U32 postFecOverhead
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPPv2DbaPostFecSet(MV_U32 postFecOverhead)
+{
+	MV_STATUS status;
+
+	status = asicOntMiscRegWrite(mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG2_POST_FEC, postFecOverhead, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacPPv2DbaFecStateSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configure PPv2 FEC state
+**
+**  PARAMETERS:  MV_U32 fecState
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacPPv2DbaFecStateSet(MV_U32 fecState)
+{
+	MV_STATUS status;
+
+	status = asicOntMiscRegWrite(mvAsicReg_PPv2_PON_FEC, fecState, 0);
+
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuEponMacSerdesPuRxWrite
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function write to serdes power up receiver
+**
+**  PARAMETERS:  enable - 0: power down, 1:  power up
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or MV_ERROR
+**
+*******************************************************************************/
+MV_STATUS mvOnuEponMacSerdesPuRxWrite(MV_U32 enable)
+{
+	MV_STATUS status = MV_OK;
+
+#ifndef PON_FPGA
+#ifdef DISABLE_SERDES_FOR_AVANTA_LP
+	status = asicOntMiscRegWrite(mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_RX, enable, 0);
+#endif
+#endif  /* PON_FPGA */
+	return status;
+}
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           ==     ==   =========   =========   ==        ==           == */
+/* ==           ==     ==   =========   =========   ===       ==           == */
+/* ==           ==     ==   ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==     ==   ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           ==     ==   =========   ==     ==   ==   ==   ==           == */
+/* ==           ==     ==   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==     ==   ==          ==     ==   ==     == ==           == */
+/* ==           ==     ==   ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+/*******************************************************************************
+**
+**  mvOnuPonMacDgInterruptEn
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function configure Dying Gasp interrupt
+**
+**  PARAMETERS:  void
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuPonMacDgInterruptEn(MV_U32 dgPol)
+{
+	MV_STATUS status = MV_OK;
+
+#ifndef PON_FPGA
+#ifdef DISABLE_DG_FOR_AVANTA_LP
+	status  = asicOntMiscRegWrite(mvAsicReg_PON_DG_CTRL_EN, 0x1, 0); /* Enable */
+	if (status != MV_OK)
+		return status;
+
+	status  = asicOntMiscRegWrite(mvAsicReg_PON_DG_CTRL_POLARITY, dgPol, 0); /* Active High/Low */
+	if (status != MV_OK)
+		return status;
+
+	status  = asicOntMiscRegWrite(mvAsicReg_PON_DG_THRESHOLD, 0x61A80, 0); /* Threshold */
+	if (status != MV_OK)
+		return status;
+#endif
+#endif  /* PON_FPGA */
+	return status;
+}
+
+/*******************************************************************************
+**
+**  mvOnuPonMacDgInterruptDis
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function disable Dying Gasp interrupt
+**
+**  PARAMETERS:  void
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS mvOnuPonMacDgInterruptDis(void)
+{
+	MV_STATUS status = MV_OK;
+
+#ifndef PON_FPGA
+#ifdef DISABLE_DG_FOR_AVANTA_LP
+	status  = asicOntMiscRegWrite(mvAsicReg_PON_DG_CTRL_EN, 0x0, 0); /* Disable */
+	if (status != MV_OK)
+		return status;
+#endif  /* DISABLE_DG_FOR_AVANTA_LP */
+#endif  /* PON_FPGA */
+	return status;
+}
\ No newline at end of file
diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.h b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.h
new file mode 100755
index 0000000..b2c28da
--- /dev/null
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuMac.h
@@ -0,0 +1,845 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+        this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimer in the
+        documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+        used to endorse or promote products derived from this software without
+        specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+
+#ifndef _ONU_PON_MAC_H
+#define _ONU_PON_MAC_H
+
+/* PON port */
+#define ONU_PON_PORT_DOWN                  (0)
+#define ONU_PON_PORT_UP                    (1)
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           =========   =========   =========   ====      ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==     ==   ==          ==     ==   ==     == ==           == */
+/* ==           ==     ==   ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+/* Definitions
+   ------------------------------------------------------------------------------*/
+#define UINT8_MASK                          (0xFF)
+#define UINT8_OFFSET                        (8)
+#define UINT8_NUM_OF_BITS                   (8)
+
+/* Frame lengths */
+#define GPON_MAX_GEM_PAYLOAD_LEN            (0x800)             /* GEM payload length */
+#define GPON_MIN_ETH_FRAME_LEN              (0x40)              /* Min ETH frame length */
+#define GPON_MAX_ETH_FRAME_LEN              (0x800)             /* Max ETH frame length */
+#define GPON_MIN_OMCI_FRAME_LEN             (0x30)              /* Min OMCI frame length */
+#define GPON_MAX_OMCI_FRAME_LEN             (0x30)              /* Max OMCI frame length */
+
+/* Frame Delineation Register */
+#define GPON_FRAME_DELINEATION_FR_1244      (0x0000)            /* DS Frequency - 1.244Gb */
+#define GPON_FRAME_DELINEATION_FR_2488      (0x0001)            /* DS Frequency - 2.488Gb */
+#define GPON_FRAME_DELINEATION_FR           (GPON_FRAME_DELINEATION_FR_1244)
+#define GPON_FRAME_DELINEATION_M1           (0x0002)            /* M1 field */
+#define GPON_FRAME_DELINEATION_M2           (0x0005)            /* M2 field */
+
+/* ONU-ID Register */
+#define GPON_ONU_ID_ONU_ID_DEF              (ONU_GPON_UNDEFINED_ONU_ID) /* ONU-ID Field */
+
+/* ONU State Register */
+#define GPON_ONU_ID_STATE_01                (ONU_GPON_01_INIT)  /* ONU State 01 */
+
+/* ONU BIP period Counter Register */
+#define GPON_BIP_PERIOD_CNTR                (0)                                 /* BIP period Counter */
+
+/* TX BW Translation Register */
+#define GPON_BW_MAP_IDLE_TCONT              (0)
+
+/* TX Delay Register - const */
+#define GPON_TX_DELAY_TD_622                (0x0AA1)            /* Const Delay */
+#define GPON_TX_DELAY_TD_1244               (0x1542)            /* Const Delay */
+
+/* TX Delay Register - equilization */
+#define GPON_TX_EQUAL_DELAY_TD              (0x0000)            /* Equilization Delay */
+
+/* TX Preamble Register */
+#define ONU_TX_PREAMBLE_TYPE_03_DEF_US_155  (0x0001)                                    /* Preamble type 3 counter - default US rate 155M */
+#define ONU_TX_PREAMBLE_TYPE_03_DEF_US_622  (0x0003)                                    /* Preamble type 3 counter - default US rate 622M */
+#define ONU_TX_PREAMBLE_TYPE_03_DEF_US_1244 (0x0005)                                    /* Preamble type 3 counter - default US rate 1244M */
+#define ONU_TX_PREAMBLE_TYPE_03_DEF_US_2488 (0x000D)                                    /* Preamble type 3 counter - default US rate 2488M */
+
+#define ONU_TX_PREAMBLE_TYPE_03_RATE_622    (0x0008)                                    /* Preamble type 3 counter - US rate 622M */
+#define ONU_TX_PREAMBLE_TYPE_03_RATE_1244   (0x0010)                                    /* Preamble type 3 counter - US rate 1244M */
+#define ONU_TX_PREAMBLE_TYPE_03_RATE_2488   (0x0020)                                    /* Preamble type 3 counter - US rate 2488M */
+
+#define ONU_TX_PREAMBLE_TYPE_01_P           (0x00FF)                                    /* Preamble type 1 value */
+#define ONU_TX_PREAMBLE_TYPE_01_PC          (0)                                         /* Preamble type 1 counter */
+#define ONU_TX_PREAMBLE_TYPE_02_P           (0x0000)                                    /* Preamble type 2 value */
+#define ONU_TX_PREAMBLE_TYPE_02_PC          (0)                                         /* Preamble type 2 counter */
+#define ONU_TX_PREAMBLE_TYPE_03_P           (0x00AA)                                    /* Preamble type 3 value */
+#define ONU_TX_PREAMBLE_TYPE_03_DEF_PC      (ONU_TX_PREAMBLE_TYPE_03_DEF_US_622)        /* Preamble type 3 counter - default */
+#define ONU_TX_PREAMBLE_TYPE_03_RT_PC       (ONU_TX_PREAMBLE_TYPE_03_RATE_622)          /* Preamble type 3 counter - runtime */
+
+/* TX Delimiter Register */
+#if 0
+#define GPON_TX_DELIMITER                   (0x02BEB433)
+#define GPON_TX_DELIMITER_D0                (0x0083)            /* Delimiter 0 */
+#define GPON_TX_DELIMITER_D1                (0x00B4)            /* Delimiter 1 */
+#define GPON_TX_DELIMITER_D2                (0x00BE)            /* Delimiter 2 */
+#define GPON_TX_DELIMITER_DS                (0x0002)            /* Delimiter size */
+#else
+#define GPON_TX_DELIMITER                   (0x02AB5983)
+#define GPON_TX_DELIMITER_D0                (0x0083)            /* Delimiter 0 */
+#define GPON_TX_DELIMITER_D1                (0x0059)            /* Delimiter 1 */
+#define GPON_TX_DELIMITER_D2                (0x00AB)            /* Delimiter 2 */
+#define GPON_TX_DELIMITER_DS                (0x0003)            /* Delimiter size */
+#endif
+
+/* TX Final Delay Register */
+#define GPON_TX_FINAL_DELAY_FD              (0x0020)            /* Final Delay */
+#define GPON_TX_FINAL_DELAY_MASK            (0x0007)
+#define GPON_TX_FINAL_DELAY_MAX             (0x003F)
+#define GPON_TX_FINAL_DELAY_MIN             (0x0000)
+#define GPON_TX_EQUAL_DELAY_MASK            (0x000FFFFF)
+#define GPON_TX_EQUAL_DELAY_SHIFT           (3)
+
+/* BURST enable parameter  */
+#define GPON_BURST_EN_P_ACT_HIGH            (0x0000)            /* BURST enable parameter - polarity active high */
+#define GPON_BURST_EN_P_ACT_LOW             (0x0001)            /* BURST enable parameter - polarity active low */
+
+#define GPON_BURST_EN_MASK                  (0x00C0)
+#define GPON_BURST_EN_P                     (GPON_BURST_EN_P_ACT_HIGH)
+
+#ifndef PON_FPGA
+
+#ifdef BURST_CFG_FOR_AVANTA_LP
+#define GPON_BURST_EN_ORDER                 (1)
+#else
+#define GPON_BURST_EN_ORDER                 (0)
+#endif /* BURST_CFG_FOR_AVANTA_LP */
+
+#else
+#define GPON_BURST_EN_ORDER                 (0)
+#endif /* PON_FPGA */
+
+#ifndef PON_FPGA
+
+#ifdef BURST_CFG_FOR_AVANTA_LP
+#define GPON_BURST_EN_START                 (0x0001)            /* BURST enable parameter - start */
+#define GPON_BURST_EN_STOP                  (0x0000)            /* BURST enable parameter - stop */
+#else
+#define GPON_BURST_EN_START                 (0x0006)            /* BURST enable parameter - start */
+#define GPON_BURST_EN_STOP                  (0x0006)            /* BURST enable parameter - stop */
+#endif /* BURST_CFG_FOR_AVANTA_LP */
+
+#else /* PON_FPGA */
+#define GPON_BURST_EN_START                 (0x0006)            /* BURST enable parameter - start */
+#define GPON_BURST_EN_STOP                  (0x0006)            /* BURST enable parameter - stop */
+#endif /* PON_FPGA */
+
+#define GPON_BURST_THRESHOLD                (0x4E20)            /* 20000 bytes */
+
+#define MAC_LAST_UPSTREAM_PLOAM             (ONU_GPON_US_MSG_ACK)
+#define MAC_LAST_DOWNSTREAM_PLOAM           (ONU_GPON_DS_MSG_EXT_BURST_LEN)
+
+/* SW FIFO parameters */
+#define GPON_SW_FIFO_SIZE                   (1024)              /* Size of SW FIFO pool for PLOAM messages */
+#define GPON_PLOAM_MSG_WORDS                (3)                 /* PLOAM message length is 12 bytes or 3 words */
+#define GPON_PLOAM_MSG_BYTES                (12)                /* PLOAM message length is 12 bytes or 3 words */
+#define GPON_MAX_US_MSG_MOVING              (3)                 /* Max SW FIFO entries which can be moved from SW to HW FIFO by ISR */
+#define GPON_MAX_US_MSG_TO_PROCESS          (10)                /* Max SW FIFO entries which can be processed by FIFO Audit */
+
+/*AC coupling burst mode*/
+#define GPON_TX_AC_COUPL_BUST_MODE_0        (0)
+#define GPON_TX_AC_COUPL_BUST_MODE_1        (1)
+#define GPON_TX_AC_COUPL_PREACT_BURST_TIME  (0x800)
+#define GPON_TX_AC_COUPL_DATA_PATTERN_1     (0x00)
+#define GPON_TX_AC_COUPL_DATA_PATTERN_2     (0x66)
+
+/*UTM Active TX Bitmap*/
+#define GPON_UTM_ACTIVE_TX_BITMAP           (0xFFFF)
+#define GPON_UTM_ACTIVE_TX_BITMAP_VALID     (1)
+
+/*GSE Transmit threshold*/
+#define GPON_GST_TX_DATA_SHIFT              (12)
+#define GPON_GST_TX_DATA_THRESHOLD          (0x30)
+#define GPON_GST_TX_IDLE_THRESHOLD          (0x10)
+
+#define GPON_TOD_INT_POL_ACTIVE_HIGH        (0)
+#define GPON_TOD_INT_POL_ACTIVE_LOW         (1)
+#define GPON_TOD_INT_MODE_BIP_INTERVAL      (0)
+#define GPON_TOD_INT_MODE_SFC_INTERRUPT     (1)
+#define GPON_TOD_INT_DEFAULT_WIDTH          (5)
+
+/* Typedefs
+   ------------------------------------------------------------------------------*/
+typedef MV_STATUS (*MACTXPLOAMCTRFUNC)(MV_U8 msgId, MV_BOOL status);
+typedef MV_STATUS (*MACRXPLOAMCTRFUNC)(MV_U8 msgId);
+
+typedef struct {
+	MV_U32 txErrMsgIdPloamCounter [ONU_GPON_US_MSG_LAST + 1];
+	MV_U32 txMsgIdPloamCounter    [ONU_GPON_US_MSG_LAST + 1];
+	MV_U32 txMsgTotalPloamCounter;
+} S_MacTxPloamPm;
+
+typedef struct {
+	MV_U32 msg[GPON_PLOAM_MSG_WORDS];
+} S_MacPloamMsg;
+
+typedef struct {
+	MV_U32 fifoWriteIndex;
+	MV_U32 fifoReadIndex;
+	MV_U32 fifoReparoundNum;
+	S_MacPloamMsg fifoData[GPON_SW_FIFO_SIZE];
+} S_MacFifoCtrl;
+
+/* Macros
+   ------------------------------------------------------------------------------*/
+#define M_ONU_GPON_RANG_MSG_FINAL_DELAY(eqD) (eqD & GPON_TX_FINAL_DELAY_MASK)
+#define M_ONU_GPON_RANG_MSG_EQUAL_DELAY(eqD) ((eqD >> GPON_TX_EQUAL_DELAY_SHIFT) & GPON_TX_EQUAL_DELAY_MASK)
+
+#define M_ONU_GPON_BASE_ADDRESS(address) ((address != NULL) ? (address) : (0))
+
+/* Global functions
+   ------------------------------------------------------------------------------*/
+/******************************************************************************/
+/* ========================================================================== */
+/*                         High-Level MAC Section                             */
+/* ========================================================================== */
+/******************************************************************************/
+MV_STATUS mvOnuGponMacMessageReceive(MV_U8 *msgOnuId, MV_U8 *msgId, MV_U8 *msgData);
+MV_STATUS mvOnuGponMacMessageSend(MV_U8 msgOnuId, MV_U8 msgId, MV_U8 *msgData);
+MV_STATUS mvOnuGponMacMessageCleanSwFifo(void);
+MV_STATUS mvOnuGponMacPreambleSet(MV_U32 preamType1Val, MV_U32 preamType1Cnt,
+				  MV_U32 preamType2Val, MV_U32 preamType2Cnt,
+				  MV_U32 preamType3Val, MV_U32 preamType3Cnt);
+MV_STATUS mvOnuGponMacPreambleType3Set(MV_U32 preamType3Val, MV_U32 preamType3Cnt);
+
+/* Upstream Messages send routines */
+MV_STATUS mvOnuGponMacPasswordMessageSend(MV_U8 onuId, MV_U8 *password, MV_U32 counter);
+MV_STATUS mvOnuGponMacReiMessageSend(MV_U8 onuId, MV_U32 errorsCounter);
+MV_STATUS mvOnuGponMacAcknowledgeMessageSend(MV_U8 onuId, MV_U8 dmId, MV_U8 *dmByte);
+MV_STATUS mvOnuGponMacEncryptionKeyMessageSend(MV_U8 onuId, MV_U8 KeyIndex, MV_U8 fragIndex, MV_U8 *key);
+MV_STATUS mvOnuGponMacDgMessageSend(MV_U8 onuId);
+
+/******************************************************************************/
+/* ========================================================================== */
+/*                         Low-Level MAC Section                              */
+/* ========================================================================== */
+/******************************************************************************/
+
+/* ========================================================================== */
+/*                        Rx Functions Section                                */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacRxConfigSet(MV_BOOL enable);
+MV_STATUS mvOnuGponMacRxConfigBitOrderSet(MV_U32 value);
+MV_STATUS mvOnuGponMacRxPsaConfigSet(MV_U32 syncFsmM1, MV_U32 syncFsmM2, MV_U32 syncFsmM3, MV_U32 fecHyst);
+MV_STATUS mvOnuGponMacRxFecHysteresisSet(MV_U32 fecHyst);
+MV_STATUS mvOnuGponMacRxFecConfigSet(MV_BOOL swIndication, MV_BOOL forceSw, MV_BOOL ignoreParity);
+MV_STATUS mvOnuGponMacRxFecStatusGet(MV_U32 *fecStatus);
+MV_STATUS mvOnuGponMacRxPloamDataGet(MV_U32  *ploamData);
+MV_STATUS mvOnuGponMacRxPloamDataUsedGet(MV_U32 *ploamFifoSize);
+MV_STATUS mvOnuGponMacRxPlenConfigSet(MV_BOOL forceNum, MV_BOOL useForce, MV_BOOL ignDiff, MV_BOOL notFix, MV_BOOL ignCrc);
+MV_STATUS mvOnuGponMacRxPloamConfigSet(MV_BOOL ignCrc, MV_BOOL ignBrd, MV_BOOL fwdAll);
+MV_STATUS mvOnuGponMacRxBwMapConfigSet(MV_U32 minSaDelta, MV_BOOL notCrcFix, MV_BOOL ignCrc);
+MV_STATUS mvOnuGponMacRxBwMapSet(MV_U32 entry, MV_U32 allocId, MV_U32 tcontCnt, MV_BOOL enable);
+MV_STATUS mvOnuGponMacRxBwMapGet(MV_U32 entry, MV_U32 *allocId, MV_BOOL *enable, MV_U32 *tcontCnt);
+MV_STATUS mvOnuGponMacRxEqualizationDelaySet(MV_U32 delay);
+MV_STATUS mvOnuGponMacRxEqualizationDelayGet(MV_U32 *delay);
+MV_STATUS mvOnuGponMacRxInternalDelaySet(MV_U32 delay);
+MV_STATUS mvOnuGponMacRxInternalDelayGet(MV_U32 *delay);
+MV_STATUS mvOnuGponMacRxSuperFrameCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacRxSuperFrameCounterSet(MV_U32 counter);
+/* ========================================================================== */
+/*                        Tx Functions Section                                */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacTxDelimiterSet(MV_U32 delimiterPattern, MV_U32 delimiterSize);
+MV_STATUS mvOnuGponMacTxDelimiterGet(MV_U32 *pattern, MV_U32 *size);
+MV_STATUS mvOnuGponMacTxPloamDataFifoSet(MV_U32 txPloamData);
+MV_STATUS mvOnuGponMacTxPloamDataFreeGet(MV_U32 *ploamFifoSize);
+MV_STATUS mvOnuGponMacTxBurstEnParamSet(MV_U32 mask, MV_U32 polarity, MV_U32 delay, MV_U32 enStop, MV_U32 enStart);
+MV_STATUS mvOnuGponMacTxBurstEnPolaritySet(MV_U32 polarity);
+MV_STATUS mvOnuGponMacTxBurstEnParamGet(MV_U32 *mask, MV_U32 *polarity, MV_U32 *order, MV_U32 *enStop, MV_U32 *enStart);
+MV_STATUS mvOnuGponMacTxFinalDelaySet(MV_U32 txFinalDelay);
+MV_STATUS mvOnuGponMacTxFinalDelayGet(MV_U32 *txFinalDelay);
+MV_STATUS mvOnuGponMacTxPreambleSet(MV_U32 type, MV_U32 pattern, MV_U32 size);
+MV_STATUS mvOnuGponMacTxPlsSet(MV_U32 pattern);
+MV_STATUS mvOnuGponMacTxConstIdleMsgSet(MV_U32 onuId);
+MV_STATUS mvOnuGponMacTxConstSerialNumberMsgSet(MV_U32 onuId, MV_U8 *serialNumber, MV_U32 randomDelay);
+MV_STATUS mvOnuGponMacTxDbrBlockSizeSet(MV_U32 blockSize);
+MV_STATUS mvOnuGponMacTxSwCountersAdd(MV_U8 msgId, MV_BOOL sucsses);
+MV_STATUS mvOnuGponMacTxSwCountersGet(void *txPloamPm);
+MV_STATUS mvOnuGponHighPriTxEnableSet(MV_U32 txEnable);
+MV_STATUS mvOnuGponHighPriTxValidBmSet(MV_U32 validBm);
+MV_STATUS mvOnuGponHighPriTxValidBmGet(MV_U32 *validBm);
+MV_STATUS mvOnuGponHighPriTxMap0Set(MV_U32 map0);
+MV_STATUS mvOnuGponHighPriTxMap0Get(MV_U32 *map0);
+MV_STATUS mvOnuGponHighPriTxMap1Set(MV_U32 map1);
+MV_STATUS mvOnuGponHighPriTxMap1Get(MV_U32 *map1);
+/* ========================================================================== */
+/*                        General Functions Section                           */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacVersionGet(MV_U32 *version);
+MV_STATUS mvOnuGponMacOnuIdSet(MV_U32 onuId, MV_BOOL valid);
+MV_STATUS mvOnuGponMacOnuStateSet(MV_U32 onuState);
+MV_STATUS mvOnuGponMacSerialNumberSet(MV_U32 serialNum);
+MV_STATUS mvOnuGponTimeOfDayIntWidthSet(MV_U32 width, MV_U8 mode, MV_U8 polarity);
+MV_STATUS mvOnuGponTimeOfDayIntWidthGet(MV_U32 *width, MV_U8 *mode, MV_U8 *polarity);
+MV_STATUS mvOnuGponSuperFrameCouterSet(MV_U32 sfc);
+MV_STATUS mvOnuGponSuperFrameCouterGet(MV_U32 *sfc);
+/* ========================================================================== */
+/*                        Gem Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacGemPayloadLenSet(MV_U32 payloadlen);
+MV_STATUS mvOnuGponMacGemPayloadLenGet(MV_U32 *payloadlen);
+MV_STATUS mvOnuGponMacGemEthFrameLenSet(MV_U32 maxFrameLen, MV_U32 minFrameLen);
+MV_STATUS mvOnuGponMacGemEthFrameLenGet(MV_U32 *maxFrameLen, MV_U32 *minFrameLen);
+MV_STATUS mvOnuGponMacGemOmciFrameLenSet(MV_U32 maxFrameLen, MV_U32 minFrameLen);
+MV_STATUS mvOnuGponMacGemOmciFrameLenGet(MV_U32 *maxFrameLen, MV_U32 *minFrameLen);
+MV_STATUS mvOnuGponMacGemOmciPortIdSet(MV_U32 portId, MV_U32 valid);
+MV_STATUS mvOnuGponMacGemOmciPortIdGet(MV_U32 *portId, MV_U32 *valid);
+MV_STATUS mvOnuGponMacGemOmciFastPathSet(MV_U32 valid);
+MV_STATUS mvOnuGponMacGemOmciFastPathGet(MV_U32 *valid);
+MV_STATUS mvOnuGponMacRxCtrlCmdGet(MV_U32 *ctrlCmd);
+MV_STATUS mvOnuGponMacRxCtrlDataUsedGet(MV_U32 *dataFifoSize);
+MV_STATUS mvOnuGponMacRxCtrlCmdUsedGet(MV_U32 *ctrlFifoSize);
+MV_STATUS mvOnuGponMacRxCtrlHeadLenGet(MV_U32 *headLen);
+/* ========================================================================== */
+/*                        UTM Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacUtmOmciPortIdSet(MV_U32 portId, MV_U32 valid);
+MV_STATUS mvOnuGponMacUtmOmciPortIdGet(MV_U32 *portId, MV_U32 *valid);
+MV_STATUS mvOnuGponMacUtmTcPeriodSet(MV_U32 period);
+MV_STATUS mvOnuGponMacUtmTcValidSet(MV_U32 valid);
+MV_STATUS mvOnuGponMacUtmTcConfigGet(MV_U32 *period, MV_U32 *valid);
+MV_STATUS mvOnuGponMacUtmActiveTxBitmapSet(MV_U32 bitmap);
+MV_STATUS mvOnuGponMacUtmActiveTxBitmapValidSet(MV_U32 valid);
+MV_STATUS mvOnuGponMacUtmActiveTxBitmapConfigGet(MV_U32 *bitmap, MV_U32 *valid);
+MV_STATUS mvOnuGponMacUtmFlushSet(MV_U32 tcontNum, MV_U32 value);
+MV_STATUS mvOnuGponMacUtmFlushGet(MV_U32 tcontNum, MV_U32 *value);
+MV_STATUS mvOnuGponMacUtmDebugGet(MV_U32 tcontNum, MV_U32 *state);
+
+/* ========================================================================== */
+/*                        Interrupt Functions Section                         */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacPonInterruptGet(MV_U32 *interrupt);
+MV_STATUS mvOnuGponMacPonInterruptMaskGet(MV_U32 *mask);
+MV_STATUS mvOnuGponMacPonInterruptMaskSet(MV_U32 mask);
+MV_STATUS mvOnuGponMacBipStatusValueGet(MV_U32 *value);
+MV_STATUS mvOnuGponMacBipInterruptIntervalSet(MV_U32 interval);
+MV_STATUS mvOnuGponMacBipInterruptStatusValueGet(MV_U32 *value);
+MV_STATUS mvOnuGponMacRamTestCfgSet(MV_U32 config);
+MV_STATUS mvOnuGponMacRamTestCfgGet(MV_U32 *config);
+/* ========================================================================== */
+/*                        Statistics Functions Section                        */
+/* ========================================================================== */
+/* Gem */
+/* === */
+MV_STATUS mvOnuGponMacGemRcvdIdleGemFramesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdValidGemFramesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdUndefGemFramesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdOmciFramesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemDropGemFramesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemDropOmciFramesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdGemFramesWithUncorrHecErrCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdGemFramesWithOneFixedHecErrCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdGemFramesWithTwoFixedHecErrCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdValidGemFramesTotalByteCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdUndefGemFramesTotalByteCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemReassembleMemoryFlushCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemSynchLostCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdEthFramesWithCorrFcsCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdEthFramesWithFcsErrCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdOmciFramesWithCorrCrcCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacGemRcvdOmciFramesWithCrcErrCounterGet(MV_U32 *counter);
+/* Rx Ploam */
+/* ======== */
+MV_STATUS mvOnuGponMacRxPloamLostCrcCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacRxPloamLostFullCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacRxPloamRcvdIdleCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacRxPloamRcvdBroadCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacRxPloamRcvdOnuIdCounterGet(MV_U32 *counter);
+/* Tx */
+/* == */
+MV_STATUS mvOnuGponMacTxGemPtiTypeOneFrameCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacTxGemPtiTypeZeroFrameCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacTxIdleGemFramesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacTxTxEnableCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacTxTxEnableCounterThresholdGet(MV_U32 *threshold);
+MV_STATUS mvOnuGponMacTxTxEnableCounterThresholdSet(MV_U32 threshold);
+MV_STATUS mvOnuGponMacTxGseTransCounterThresholdGet(MV_U32 *threshold);
+MV_STATUS mvOnuGponMacTxGseTransCounterThresholdSet(MV_U32 threshold);
+MV_STATUS mvOnuGponMacTxConfigAcCouplingGet(MV_U32 *busrtMode, MV_U32 *preActiveBurstTime,
+					    MV_U8 *dataPattern1, MV_U8 *dataPattern2);
+MV_STATUS mvOnuGponMacTxConfigAcCouplingSet(MV_U32 busrtMode, MV_U32 preActiveBurstTime,
+					    MV_U8 dataPattern1, MV_U8 dataPattern2);
+MV_STATUS mvOnuGponMacTxRandomDelayUnitsGet(MV_U32 *units);
+MV_STATUS mvOnuGponMacTxRandomDelayUnitsSet(MV_U32 units);
+MV_STATUS mvOnuGponMacTxEthFramesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter);
+MV_STATUS mvOnuGponMacTxEthBytesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter);
+MV_STATUS mvOnuGponMacTxGemFramesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter);
+MV_STATUS mvOnuGponMacTxIdleGemFramesTcontiCounterGet(MV_U32 tcontNum, MV_U32 *counter);
+/* FEC */
+/* === */
+MV_STATUS mvOnuGponMacRxFecBytesCounterGet(MV_U32 *counter);
+MV_STATUS mvOnuGponMacRxFecCorrectCounterGet(MV_U32 *bytes, MV_U32 *bits);
+MV_STATUS mvOnuGponMacRxFecInorrectCounterGet(MV_U32 *bytes, MV_U32 *bits);
+/* Bw Map */
+/* ====== */
+MV_STATUS mvOnuGponMacRxBwMapAllocatrionsCounterGet(MV_U32 *cor, MV_U32 *incor, MV_U32 *crcCor, MV_U32 *errCrc);
+MV_STATUS mvOnuGponMacRxBwMapTotalBwGet(MV_U32 *bw);
+/* Plend */
+/* ===== */
+MV_STATUS mvOnuGponMacInComingPlendCntGet(MV_U32 *cntValue);
+
+/* ========================================================================== */
+/*                        AES                                                 */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacAesInit(void);
+MV_STATUS mvOnuGponMacAesEnableSet(MV_BOOL enable);
+MV_STATUS mvOnuGponMacAesPortIdSet(MV_U32 portId, MV_BOOL status);
+MV_BOOL   mvOnuGponMacAesPortIdGet(MV_U32 portId);
+MV_STATUS mvOnuGponMacAesKeyShadowWrite(MV_U8 *key);
+
+/* ========================================================================== */
+/*                        GEM Port                                            */
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacIpgValueSet(MV_U32 ipgVal);
+MV_STATUS mvOnuGponMacIpgValueGet(MV_U32 *ipgVal);
+MV_STATUS mvOnuGponMacIpgValidSet(MV_BOOL enable);
+MV_STATUS mvOnuGponMacIpgValidGet(MV_BOOL *enable);
+/* ========================================================================== */
+MV_STATUS mvOnuGponMacGemInit(void);
+MV_STATUS mvOnuGponMacPortIdValidSet(MV_U32 portId, MV_BOOL status);
+MV_BOOL   mvOnuGponMacPortIdValidGet(MV_U32 portId);
+MV_STATUS mvOnuGponMacXvrReset(MV_U32 xvrType);
+MV_STATUS mvOnuGponMacXvrActivate(void);
+MV_STATUS mvOnuGponMacAsicVersionGet(MV_U32 *asicVer);
+MV_STATUS mvOnuGponMacMicroSecCounterGet(MV_U32 *microSec);
+MV_STATUS mvOnuGponMacDyingGaspConfigSet(MV_U32 a_id, MV_U32 a_disableEnable, MV_U32 a_polarity, MV_U32 a_threshold);
+
+/* ========================================================================== */
+/*                        SW FIFO                                             */
+/* ========================================================================== */
+void      mvOnuGponMacFifoInit(void);
+void      mvOnuGponFifoAuditTimerExpireHndl(void);
+void      mvOnuGponMacFifoGetInfo(S_MacFifoCtrl **ptr, MV_32 *supported);
+void      mvOnuGponMacFifoGetStat(MV_32 *callCnt, MV_32 *addSwCnt, MV_32 *freeSwCnt, MV_32 *sendHwCnt);
+void      mvOnuGponMacFifoAuditGetStat(MV_32 *enterCnt, MV_32 *actionCnt);
+void      mvOnuGponMacFifoCountersSet(MV_U32 value);
+void      mvOnuGponMacFifoSupportSet(MV_32 value);
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ==        ==           == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==          ==          ==     ==   ==     == ==           == */
+/* ==           ==          ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+/* Definitions
+   ------------------------------------------------------------------------------*/
+#define ADDITIONAL_OPCODE_1                 (1)
+#define ADDITIONAL_OPCODE_2                 (2)
+#define ADDITIONAL_OPCODE_3                 (3)
+
+/*RPM Module configuration*/
+#define EPON_RPM_BITMAP_ORDER_HW            (0)
+#define EPON_RPM_BITMAP_ORDER_SW            (0)
+#define EPON_RPM_QSET_ORDER_HW              (1)
+#define EPON_RPM_QSET_ORDER_SW              (1)
+#define EPON_RPM_REPORT_MODE_HW             (2)
+#define EPON_RPM_REPORT_MODE_SW             (0)
+
+/*TOD INT*/
+#define EPON_TOD_INT_POL_ACTIVE_HIGH        (0)
+#define EPON_TOD_INT_POL_ACTIVE_LOW         (1)
+#define EPON_TOD_INT_DEFAULT_WIDTH          (5)
+
+/*TX MUX POWER UP*/
+#define EPON_TXM_POWERUP_DEFAULT_TIME       (0x800)
+
+/*EPON TX MUX POWER UP*/
+#define EPON_DDM_TX_EN_MASK_DEFAULT         (2)
+#define EPON_DDM_TX_TX_POL_DEFAULT          (0)
+#define EPON_DDM_TX_SERDES_POL_DEFAULT      (0)
+#define EPON_DDM_TX_XVR_POL_DEFAULT         (0)
+#define EPON_DDM_TX_BURST_ENA_DEFAULT       (0)
+
+/* PCS RX */
+#define EPON_PCS_CONFIG_RX_ENABLE            (1)
+#define EPON_PCS_CONFIG_RX_DISABLE           (0)
+
+/* EPON 2K packet supported */
+#define EPON_MAC_RXP_DATA_FIFO_THRESHOLD_2K_SUPP      (0x800)
+#define EPON_MAC_PCS_FRAME_SIZE_LIMIT_SIZE_2K_SUPP    (0x800)
+#define EPON_MAC_PCS_FRAME_SIZE_LIMIT_LATENCY_2K_SUPP (0x1324)
+
+/* Default value of these registers */
+#define EPON_MAC_RXP_DATA_FIFO_THRESHOLD_DEF      (0x780)
+#define EPON_MAC_PCS_FRAME_SIZE_LIMIT_SIZE_DEF    (0x640)
+#define EPON_MAC_PCS_FRAME_SIZE_LIMIT_LATENCY_DEF (0xED8)
+
+/* UTM TX Bitmap */
+#define EPON_UTM_TX_BITMAP_DEFAULT          (0xFF)
+#define EPON_UTM_TX_BITMAP_VALID_DEFAULT    (1)
+
+/* PPv2 EPON DBA  */
+#define PPV2_DBA_POST_STATE_ENABLE          (1)
+#define PPV2_DBA_POST_STATE_DISABLE         (0)
+#define PPV2_DBA_POST_FEC_OVERHEAD          (14)
+
+#define PPV2_PON_PORT_INDEX                             (3)
+#define PPV2_PON_FEC_TX_DESC_SET                        (1)
+#define PPV2_PON_FEC_TX_DESC_CLR                        (0)
+
+/* Global functions
+   ------------------------------------------------------------------------------*/
+
+/* ========================================================================== */
+/*                        Interrupt Functions Section                         */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacPonInterruptGet(MV_U32 *interrupt);
+MV_STATUS mvOnuEponMacPonInterruptMaskGet(MV_U32 *mask);
+MV_STATUS mvOnuEponMacPonInterruptMaskSet(MV_U32 mask);
+MV_STATUS mvOnuEponMacPonDbrLlidInterruptGet(MV_U32 llid, MV_U32 *interrupt);
+MV_STATUS mvOnuEponMacPonDbrInterruptGet(MV_U32 *interrupt);
+MV_STATUS mvOnuEponMacPonDbrInterruptMaskGet(MV_U32 *mask);
+MV_STATUS mvOnuEponMacPonDbrInterruptMaskSet(MV_U32 mask);
+
+/* ========================================================================== */
+/*                        General Functions Section                           */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacVersionGet(MV_U32 *version);
+MV_STATUS mvOnuEponMacPcsRxEnableSet(MV_U32 rxEnable);
+MV_STATUS mvOnuEponMacPcsTxEnableSet(MV_U32 txEnable);
+MV_STATUS mvOnuEponMacOnuEnableSet(MV_U32 rxEnable, MV_U32 txEnable);
+MV_STATUS mvOnuEponMacOnuRxEnableSet(MV_U32 rxEnable);
+MV_STATUS mvOnuEponMacOnuTxEnableSet(MV_U32 txEnable, MV_U32 macId);
+MV_STATUS mvOnuEponMacOnuStateSet(MV_U32 onuState, MV_U32 macId);
+MV_STATUS mvOnuEponMacOnuStateGet(MV_U32 *onuState, MV_U32 macId);
+MV_STATUS mvOnuEponMacOnuRegAutoUpdateStateSet(MV_U32 value);
+MV_STATUS mvOnuEponMacOnuReRegAutoUpdateStateSet(MV_U32 value);
+MV_STATUS mvOnuEponMacOnuDeRegAutoUpdateStateSet(MV_U32 value);
+MV_STATUS mvOnuEponMacOnuNackAutoUpdateStateSet(MV_U32 value);
+MV_STATUS mvOnuEponMacGenTqSizeSet(MV_U32 tqRxSize, MV_U32 tqTxSize);
+MV_STATUS mvOnuEponMacGenTqSizeGet(MV_U32 *tqRxSize, MV_U32 *tqTxSize);
+MV_STATUS mvOnuEponMacGenLaserParamSet(MV_U32 onOffTime, MV_U32 onTime, MV_U32 offTime);
+MV_STATUS mvOnuEponMacGenLaserParamGet(MV_U32 *onOffTime, MV_U32 *onTime, MV_U32 *offTime);
+MV_STATUS mvOnuEponMacGenTailGuardSet(MV_U32 packetTailGuard, MV_U32 tailGuard);
+MV_STATUS mvOnuEponMacGenSyncTimeSet(MV_U32 syncTime, MV_U32 addSyncTime, MV_U32 forceSwUpdate,
+				     MV_U32 disGateAutoUpdate, MV_U32 disDiscoveryAutoUpdate);
+MV_STATUS mvOnuEponMacGenSyncTimeGet(MV_U32 *syncTime, MV_U32 *addSyncTime, MV_U32 *forceSwUpdate,
+				     MV_U32 *disGateAutoUpdate, MV_U32 *disDiscoveryAutoUpdate);
+MV_STATUS mvOnuEponMacGenBcastAddrSet(MV_U32 bcastMacAddrHigh, MV_U32 bcastMacAddrLow);
+MV_STATUS mvOnuEponMacGenUcastAddrSet(MV_U32 bcastMacAddrHigh, MV_U32 bcastMacAddrLow, MV_U32 macId);
+MV_STATUS mvOnuEponMacGenOnuConfigSet(MV_U32 rxPcsFecEn, MV_U32 txPcsFecEn, MV_U32 reportAutoResponse,
+				      MV_U32 ackAutoResponse, MV_U32 requestAutoResponse, MV_U32 txFecEn);
+MV_STATUS mvOnuEponMacGenOnuConfigAutoReportSet(MV_U32 reportAutoResponse);
+MV_STATUS mvOnuEponMacGenOnuConfigAutoAckSet(MV_U32 ackAutoResponse);
+MV_STATUS mvOnuEponMacGenOnuConfigAutoRequestSet(MV_U32 requestAutoResponse);
+MV_STATUS mvOnuEponMacGenSldSet(MV_U32 sld);
+MV_STATUS mvOnuEponMacGenCtrlTypeSet(MV_U32 type);
+MV_STATUS mvOnuEponMacGenLocalTimeStampSet(MV_U32 timeStamp);
+MV_STATUS mvOnuEponMacGenLocalTimeStampGet(MV_U32 *timeStamp);
+MV_STATUS mvOnuEponMacGenPendGrantSet(MV_U32 grant);
+MV_STATUS mvOnuEponMacGenSglStatusGet(MV_U32 *sglStatus);
+MV_STATUS mvOnuEponMacGenPonPhyDbgSet(MV_U32 ponDebug);
+MV_STATUS mvOnuEponMacGenPonPhyDbgGet(MV_U32 *ponDebug);
+MV_STATUS mvOnuEponMacGenSglSwReset(MV_U32 swReset);
+MV_STATUS mvOnuEponMacGenSglConfig(MV_U32 startThreshold, MV_U32 dataAlignment);
+MV_STATUS mvOnuEponMacGenSglDebounceConfig(MV_U32 polarity, MV_U32 threshold);
+MV_STATUS mvOnuEponMacGenSglDebounceEnable(MV_U32 enable);
+MV_STATUS mvOnuEponMacGenChurningKeySet(MV_U32 key);
+MV_STATUS mvOnuEponMacGenOpcodeSet(MV_U32 opcodeType, MV_U32 value, MV_U32 index,
+				   MV_U32 timestamp, MV_U32 valid);
+#ifndef PON_Z1
+MV_STATUS mvOnuEponMacGenTimestampConfig(MV_U32 gpmAddSyncTimeToTimestamp, MV_U32 gpmAimestampOffset,
+					 MV_U32 txmAddSyncTimeToTimestamp, MV_U32 txmUseTimestampImage,
+					 MV_U32 txmTimestampOffset);
+MV_STATUS mvOnuEponMacGenRxTimestampConfigSet(MV_U32 rxpTimestampSelect, MV_U32 rxpTimestampSign,
+					      MV_U32 rxpTimestampOffset);
+MV_STATUS mvOnuEponMacGenRxTimestampConfigGet(MV_U32 *rxpTimestampSelect, MV_U32 *rxpTimestampSign,
+					      MV_U32 *rxpTimestampOffset);
+MV_STATUS mvOnuEponMacGenRegPacketPaddingSet(MV_U32 regAckPadding, MV_U32 regReqPadding);
+MV_STATUS mvOnuEponMacGenRegPacketPaddingGet(MV_U32 *regAckPadding, MV_U32 *regReqPadding);
+#endif /* PON_Z1 */
+MV_STATUS mvOnuEponMacGenDriftThresholdSet(MV_U32 threshold);
+MV_STATUS mvOnuEponMacGenTimeStampForIntrSet(MV_U32 timestamp);
+MV_STATUS mvOnuEponMacGenTimeStampForIntrGet(MV_U32 *timestamp);
+MV_STATUS mvOnuEponMacGenUtmTcPeriodSet(MV_U32 tcPeriod);
+MV_STATUS mvOnuEponMacGenUtmTcPeriodEnSet(MV_U32 tcPeriodEnable);
+MV_STATUS mvOnuEponMacGenGemIpgValueSet(MV_U32 ipgVal);
+MV_STATUS mvOnuEponMacGenGemIpgValueEnSet(MV_U32 ipgValEn);
+MV_STATUS mvOnuEponMacGenUtmActTxBitmapSet(MV_U32 txBitmap);
+MV_STATUS mvOnuEponMacGenUtmActTxBitmapEnSet(MV_U32 txBitmapEnable);
+MV_STATUS mvOnuEponMacGenTimeOfDayIntConfigSet(MV_U32 polarity, MV_U32 width);
+MV_STATUS mvOnuEponMacGenTimeOfDayIntConfigGet(MV_U32 *polarity, MV_U32 *width);
+MV_STATUS mvOnuEponMacGenUtmExtReportEnSet(MV_U32 extReportEnable);
+MV_STATUS mvOnuEponMacGenUtmExtReportBitmapEnSet(MV_U32 llid, MV_U32 reportBitmapEnable);
+MV_STATUS mvOnuEponMacGenUtmExtReportMapSet(MV_U32 host_tx, MV_U32 target_tx);
+
+/* ========================================================================== */
+/*                        RXP Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacRxpPacketSizeLimitSet(MV_U32 minSize, MV_U32 maxSize);
+MV_STATUS mvOnuEponMacRxpPacketSizeLimitGet(MV_U32 *minSize, MV_U32 *maxSize);
+MV_STATUS mvOnuEponMacRxpPacketFilterSet(MV_U32 ignoreLlidCrcError, MV_U32 ignoreFcsError,
+					 MV_U32 ignoreGmiiError, MV_U32 ignoreLengthError,
+					 MV_U32 forwardAllLlid, MV_U32 forwardBc0FFF,
+					 MV_U32 forwardBc1FFF, MV_U32 forwardBc1xxx, MV_U32 dropBc1nnn);
+MV_STATUS mvOnuEponMacRxpPacketFilterGet(MV_U32 *ignoreLlidCrcError, MV_U32 *ignoreFcsError,
+					 MV_U32 *ignoreGmiiError, MV_U32 *ignoreLengthError,
+					 MV_U32 *forwardAllLlid, MV_U32 *forwardBc0FFF,
+					 MV_U32 *forwardBc1FFF, MV_U32 *forwardBc1xxx, MV_U32 *dropBc1nnn);
+MV_STATUS mvOnuEponMacRxpPacketForwardSet(MV_U32 ctrlFrameToDataQueue, MV_U32 ctrlFrameToCtrlQueue,
+					  MV_U32 rprtFrameToDataQueue, MV_U32 rprtFrameToRprtQueue,
+					  MV_U32 slowFrameToRprtQueue, MV_U32 slowFrameToCtrlQueue);
+MV_STATUS mvOnuEponMacRxpPacketForwardGet(MV_U32 *ctrlFrameToDataQueue, MV_U32 *ctrlFrameToCtrlQueue,
+					  MV_U32 *rprtFrameToDataQueue, MV_U32 *rprtFrameToRprtQueue,
+					  MV_U32 *slowFrameToRprtQueue, MV_U32 *slowFrameToCtrlQueue);
+MV_STATUS mvOnuEponMacRxpLlidDataSet(MV_U32 llid, MV_U32 index);
+MV_STATUS mvOnuEponMacRxpLlidDataGet(MV_U32 *llid, MV_U32 index);
+MV_STATUS mvOnuEponMacRxpEncConfigSet(MV_U32 config);
+MV_STATUS mvOnuEponMacRxpEncConfigGet(MV_U32 *config);
+MV_STATUS mvOnuEponMacRxpEncKeySet(MV_U32 key, MV_U32 index, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxpEncKeyGet(MV_U32 *keyIndex0, MV_U32 *keyIndex1, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxpDataFifoThresholdSet(MV_U32 threshold);
+MV_STATUS mvOnuEponMacRxpDataFifoThresholdGet(MV_U32 *threshold);
+
+/* ========================================================================== */
+/*                        GPM Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacGpmMacFutureGrantTimeSet(MV_U32 grant);
+MV_STATUS mvOnuEponMacGpmMinProcessingTimeSet(MV_U32 processingTime, MV_U32 effectiveLength);
+#ifdef PON_Z1
+MV_STATUS mvOnuEponMacGpmDiscoveryGrantLengthSet(MV_U32 grantLength, MV_U32 grantLengthMultiTq);
+#else /* Z2,A0 or later */
+MV_STATUS mvOnuEponMacGpmDiscoveryGrantLengthSet(MV_U32 grantLength, MV_U32 addOffsetForCalc, MV_U32 grantLengthMultiTq);
+#endif /* Z2,A0 or later */
+MV_STATUS mvOnuEponMacGpmRxSyncGet(MV_U32 *syncTime, MV_U32 *syncTimeUpdateInd);
+MV_STATUS mvOnuEponMacGpmGrantValidCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmGrantMaxFutureTimeErrorCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmMinProcTimeErrorCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmLengthErrorCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmDiscoveryAndRegisterCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmFifoFullErrorCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmOpcDiscoveryNotRegisterBcastCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmOpcRegisterNotDiscoveryCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmOpcDiscoveryNotRegisterNotBcastCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmOpcDropGrantCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmOpcHiddenGrantCounterGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacGpmOpcBackToBackCounterGet(MV_U32 *counter, MV_U32 macId);
+
+/* ========================================================================== */
+/*                        TXM Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacTxmOverheadSet(MV_U32 overhead);
+MV_STATUS mvOnuEponMacTxmOverheadGet(MV_U32 *overhead);
+#ifdef PON_Z1
+MV_STATUS mvOnuEponMacTxmConfigSet(MV_U32 mode, MV_U32 alignment, MV_U32 priority);
+#else /* Z2,A0 or later */
+MV_STATUS mvOnuEponMacTxmConfigSet(MV_U32 tFec1Cfg, MV_U32 tFec2Cfg, MV_U32 ctrlFifoDisFcs,
+				   MV_U32 maskGmiiSignal, MV_U32 blockDataFromDataPath,
+				   MV_U32 addIpgToLenCalc, MV_U32 mode, MV_U32 alignment,
+				   MV_U32 priority);
+#endif /* Z2,A0 or later */
+MV_STATUS mvOnuEponMacTxmPowerUpIndSet(MV_U32 time);
+MV_STATUS mvOnuEponMacTxmPowerUpIndGet(MV_U32 *time);
+MV_STATUS mvOnuEponMacTxmLlidSet(MV_U32 llid, MV_U32 macId);
+#ifdef PON_Z1
+MV_STATUS mvOnuEponMacTxmCppReportConfig(MV_U32 config, MV_U32 macId);
+#else /* Z2,A0 or later */
+MV_STATUS mvOnuEponMacTxmCppReportConfig(MV_U32 queueReportQ2, MV_U32 reportBitmapQ2,
+					 MV_U32 queueReport, MV_U32 queueSet,
+					 MV_U32 reportBitmap, MV_U32 macId);
+#endif /* Z2,A0 or later */
+MV_STATUS mvOnuEponMacTxmCppReportBitMap(MV_U32 bitMap, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxmCppReportBitMapGet(MV_U32 *bitMap, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxmCppReportQueueSet(MV_U32 queueSet, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxmCppReportQueueSetGet(MV_U32 *queueSet, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxmCppReportQueueX(MV_U32 queueNum, MV_U32 queueCfg, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxmCppReportUpdate(MV_U32 validQueueReport, MV_U32 highestReportQueue, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxmCppRpmReportConfigSet(MV_U32 bitmap, MV_U32 qset, MV_U32 mode);
+MV_STATUS mvOnuEponMacTxmCppRpmFifoDbaConfig(MV_U32 fifoEnable, MV_U32 dbaQueue, MV_U32 dbaOverhead);
+MV_STATUS mvOnuEponMacTxmCppRpmIdxReportTableSet(MV_U32 llid, MV_U32 data, MV_U32 addr);
+MV_STATUS mvOnuEponMacTxmTxCtrlFiFoFlush(MV_U32 llid);
+MV_STATUS mvOnuEponMacTxmHighPriBitmapSet(MV_U32 llid, MV_U32 highPriEn);
+MV_STATUS mvOnuEponMacTxmHighPriMapSet(MV_U32 llid, MV_U32 tx_bm);
+
+/* ========================================================================== */
+/*                        PCS Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacPcsConfigSet(MV_U32 config);
+MV_STATUS mvOnuEponMacPcsConfigGet(MV_U32 *config);
+MV_STATUS mvOnuEponMacPcsDelaySet(MV_U32 delay);
+MV_STATUS mvOnuEponMacPcsStatsGet(MV_U32 *legalFrameCnt, MV_U32 *maxFrameSizeErrCnt,
+				  MV_U32 *parityLenErrCnt, MV_U32 *longGateErrCnt,
+				  MV_U32 *protocolErrCnt, MV_U32 *minFrameSizeErrCnt,
+				  MV_U32 *legalFecFrameCnt, MV_U32 *legalNonFecFrameCnt);
+MV_STATUS mvOnuEponMacPcsFrameSizeLimitsSet(MV_U32 size, MV_U32 latency);
+MV_STATUS mvOnuEponMacPcsFrameSizeLimitsGet(MV_U32 *size, MV_U32 *latency);
+/* ========================================================================== */
+/*                        DDM Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacDdmDelaySet(MV_U32 delay);
+#ifdef PON_Z1
+MV_STATUS mvOnuEponMacDdmTxPolaritySet(MV_U32 polarity);
+#else /* Z2,A0 or later */
+MV_STATUS mvOnuEponMacDdmTxPolaritySet(MV_U32 txEnable, MV_U32 txPolarity, MV_U32 serdesPolarity,
+				       MV_U32 xvrPolarity, MV_U32 burstEnable);
+#endif /* Z2,A0 or later */
+/* ========================================================================== */
+/*                        Statistics Functions Section                        */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacRxStatsFcsErrorGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxStatsShortErrorGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxStatsLongErrorGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxStatsDataFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxStatsCtrlFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxStatsReportFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacRxStatsGateFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxStatsCtrlRegReqFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxStatsCtrlRegAckFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxStatsCtrlReportFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxStatsDataFrameGet(MV_U32 *counter, MV_U32 macId);
+MV_STATUS mvOnuEponMacTxStatsTxAllowedByteCountGet(MV_U32 *counter, MV_U32 macId);
+
+/* ========================================================================== */
+/*                        CPQ Functions Section                               */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacCpqRxCtrlHeaderQueueUsedCountGet(MV_U32 *usedCount);
+MV_STATUS mvOnuEponMacCpqRxCtrlHeaderQueueReadData(MV_U32 *dataLow, MV_U32 *dataHigh);
+MV_STATUS mvOnuEponMacCpqRxCtrlQueueUsedCountGet(MV_U32 *usedCount);
+MV_STATUS mvOnuEponMacCpqRxCtrlQueueReadData(MV_U32 *data);
+MV_STATUS mvOnuEponMacCpqRxRprtHeaderQueueUsedCountGet(MV_U32 *usedCount);
+MV_STATUS mvOnuEponMacCpqRxRprtHeaderQueueReadData(MV_U32 *dataLow, MV_U32 *dataHigh);
+MV_STATUS mvOnuEponMacCpqRxRprtQueueUsedCountGet(MV_U32 *usedCount);
+MV_STATUS mvOnuEponMacCpqRxRprtQueueReadData(MV_U32 *data);
+MV_STATUS mvOnuEponMacCpqTxCtrlHeaderQueueFree(MV_U32 *freeCount, MV_U32 macId);
+MV_STATUS mvOnuEponMacCpqTxCtrlHeaderQueueWrite(MV_U32 data, MV_U32 macId);
+MV_STATUS mvOnuEponMacCpqTxCtrlQueueFree(MV_U32 *freeCount, MV_U32 macId);
+MV_STATUS mvOnuEponMacCpqTxCtrlQueueWrite(MV_U32 data, MV_U32 macId);
+
+/* ========================================================================== */
+/*                        PPv2 Functions Section                              */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacPPv2DbaLlidAndQueueIndirectAccess(MV_U32 llidIndex, MV_U32 queueIndex);
+MV_STATUS mvOnuEponMacPPv2DbaQueueOverheadSet(MV_U32 queueOverhead);
+MV_STATUS mvOnuEponMacPPv2DbaPktModSet(MV_U32 packetMod);
+MV_STATUS mvOnuEponMacPPv2DbaPostFecSet(MV_U32 postFecOverhead);
+MV_STATUS mvOnuEponMacPPv2DbaFecStateSet(MV_U32 fecState);
+
+/* ========================================================================== */
+/*                        SERDES Functions Section                            */
+/* ========================================================================== */
+MV_STATUS mvOnuEponMacSerdesPuRxWrite(MV_U32 enable);
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           ==     ==   =========   =========   ==        ==           == */
+/* ==           ==     ==   =========   =========   ===       ==           == */
+/* ==           ==     ==   ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==     ==   ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           ==     ==   =========   ==     ==   ==   ==   ==           == */
+/* ==           ==     ==   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==     ==   ==          ==     ==   ==     == ==           == */
+/* ==           ==     ==   ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+/* ========================================================================== */
+/*                        DG Functions Section                                */
+/* ========================================================================== */
+MV_STATUS mvOnuPonMacDgInterruptEn(MV_U32 dgPol);
+MV_STATUS mvOnuPonMacDgInterruptDis(void);
+
+#endif /* _ONU_PON_MAC_H */
\ No newline at end of file
diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c
new file mode 100755
index 0000000..b1fffbc
--- /dev/null
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c
@@ -0,0 +1,1299 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+        this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimer in the
+        documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+        used to endorse or promote products derived from this software without
+        specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+
+/* Include Files
+   ------------------------------------------------------------------------------*/
+#include "mvTypes.h"
+#include "mvCommon.h"
+#include "mvOs.h"
+#include "ctrlEnv/mvCtrlEnvSpec.h"
+
+#include "mvPonOnuDefines.h"
+#include "mvPonOnuRegs.h"
+#include "mvPonOnuMac.h"
+
+/* Local Constant
+   ------------------------------------------------------------------------------*/
+#define MV_ASIC_ONT_GLB_ADDR   (MV_ASIC_ONT_BASE)
+
+/* Global Variables
+   ------------------------------------------------------------------------------*/
+MV_U32 ponOnuGlbAddr;
+
+/* Local Variables
+   ------------------------------------------------------------------------------*/
+
+S_asicGlobalRegDb asicGlbDb[] =
+{
+/* Enumeration                                                                                          |Address                        |Offset   |Access     |Mask           |Shift  |Table |Table  |Cnt   |Description
+ *                                                                                                      |                               |         |Type       |               |       |Len   |Entry  |      |
+ *                                                                                                      |                               |         |           |               |       |      |Size   |      |
+ * ============================================================================================================================================================================================================================= */
+	[mvAsicReg_Start]                                 =  { mvAsicReg_Start                                                       },
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           =========   =========   =========   ====      ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==     ==   ==          ==     ==   ==     == ==           == */
+/* ==           ==     ==   ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+	/* =========================== */
+	/*  Interrupts Registers       */
+	/* =========================== */
+	[mvAsicReg_GPON_INTERRUPT_PON]                    =  { mvAsicReg_GPON_INTERRUPT_PON,                    MV_ASIC_ONT_GLB_ADDR + 0x0000,   0x0000,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Interrupt PON"},
+	[mvAsicReg_GPON_INTERRUPT_PON_MASK]               =  { mvAsicReg_GPON_INTERRUPT_PON_MASK,               MV_ASIC_ONT_GLB_ADDR + 0x0004,   0x0004,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Interrupt PON Mask"},
+	[mvAsicReg_BIP_INTR_INTERVAL]                     =  { mvAsicReg_BIP_INTR_INTERVAL,                     MV_ASIC_ONT_GLB_ADDR + 0x0008,   0x0008,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "BIP INTR interval"},
+	[mvAsicReg_RX_BIP_STATUS_FOR_INTERRUPT]           =  { mvAsicReg_RX_BIP_STATUS_FOR_INTERRUPT,           MV_ASIC_ONT_GLB_ADDR + 0x000C,   0x000C,   asicRO,     0x0000FFFF,     0,      0,     0,      0,     "BIP INTR stats accumulator"},
+	[mvAsicReg_RAM_TEST_CONFIG]                       =  { mvAsicReg_RAM_TEST_CONFIG,                       MV_ASIC_ONT_GLB_ADDR + 0x0010,   0x000C,   asicRW,     0x0000000F,     0,      0,     0,      0,     "Ram test config PE polarity"},
+
+	/* =========================== */
+	/*  General Registers          */
+	/* =========================== */
+	[mvAsicReg_GPON_GEN_MAC_VERSION]                  =  { mvAsicReg_GPON_GEN_MAC_VERSION,                  MV_ASIC_ONT_GLB_ADDR + 0x0400,   0x0400,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "GPON version"},
+	[mvAsicReg_GPON_GEN_MAC_VERSION_ID]               =  { mvAsicReg_GPON_GEN_MAC_VERSION_ID,               MV_ASIC_ONT_GLB_ADDR + 0x0400,   0x0400,   asicRO,     0x0000FFFF,     0,      0,     0,      0,     "GPON MAC version"},
+	[mvAsicReg_GPON_GEN_MAC_VERSION_MAC_ID]           =  { mvAsicReg_GPON_GEN_MAC_VERSION_MAC_ID,           MV_ASIC_ONT_GLB_ADDR + 0x0400,   0x0400,   asicRO,     0x0000FFFF,    16,      0,     0,      0,     "GPON MAC Id"},
+	[mvAsicReg_GPON_GEN_MAC_SCRATCH]                  =  { mvAsicReg_GPON_GEN_MAC_SCRATCH,                  MV_ASIC_ONT_GLB_ADDR + 0x0404,   0x0404,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "MAC scratch register"},
+	[mvAsicReg_GPON_ONU_STATE]                        =  { mvAsicReg_GPON_ONU_STATE,                        MV_ASIC_ONT_GLB_ADDR + 0x0408,   0x0408,   asicRW,     0x000000FF,     0,      0,     0,      0,     "ONU state"},
+	[mvAsicReg_GPON_GEN_MICRO_SEC_CNT]                =  { mvAsicReg_GPON_GEN_MICRO_SEC_CNT,                MV_ASIC_ONT_GLB_ADDR + 0x040C,   0x040C,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Micro second counter"},
+	[mvAsicReg_GPON_TX_SERIAL_NUMBER]                 =  { mvAsicReg_GPON_TX_SERIAL_NUMBER,                 MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Tx serial number"},
+	[mvAsicReg_GPON_ONU_ID]                           =  { mvAsicReg_GPON_ONU_ID,                           MV_ASIC_ONT_GLB_ADDR + 0x0414,   0x0414,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "ONU Id"},
+	[mvAsicReg_GPON_ONU_ID_OID]                       =  { mvAsicReg_GPON_ONU_ID_OID,                       MV_ASIC_ONT_GLB_ADDR + 0x0414,   0x0414,   asicRW,     0x000000FF,     0,      0,     0,      0,     "GPON ONU Id"},
+	[mvAsicReg_GPON_ONU_ID_V]                         =  { mvAsicReg_GPON_ONU_ID_V,                         MV_ASIC_ONT_GLB_ADDR + 0x0414,   0x0414,   asicRW,     0x00000001,     8,      0,     0,      0,     "GPON ONU valid indication"},
+	[mvAsicReg_GPON_GEN_TOD_INT_WIDTH]                =  { mvAsicReg_GPON_GEN_TOD_INT_WIDTH,                MV_ASIC_ONT_GLB_ADDR + 0x0418,   0x0418,   asicRW,     0x3FFFFFFF,     0,      0,     0,      0,     "GPON Interrupt Width"},
+	[mvAsicReg_GPON_GEN_TOD_INT_SFC]                  =  { mvAsicReg_GPON_GEN_TOD_INT_SFC,                  MV_ASIC_ONT_GLB_ADDR + 0x041C,   0x041C,   asicRW,     0x3FFFFFFF,     0,      0,     0,      0,     "GPON SPF Counter for TOD INT"},
+
+	/* =========================== */
+	/*  Rx Registers               */
+	/* =========================== */
+	[mvAsicReg_GPON_RX_CONFIG]                        =  { mvAsicReg_GPON_RX_CONFIG,                        MV_ASIC_ONT_GLB_ADDR + 0x0800,   0x0800,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx config"},
+	[mvAsicReg_GPON_RX_CONFIG_EN]                     =  { mvAsicReg_GPON_RX_CONFIG_EN,                     MV_ASIC_ONT_GLB_ADDR + 0x0800,   0x0800,   asicRW,     0x00000001,     0,      0,     0,      0,     "Rx config - enable"},
+	[mvAsicReg_GPON_RX_CONFIG_BIT_ORDER]              =  { mvAsicReg_GPON_RX_CONFIG_BIT_ORDER,              MV_ASIC_ONT_GLB_ADDR + 0x0800,   0x0800,   asicRW,     0x00000001,     1,      0,     0,      0,     "Rx config - bit order"},
+	[mvAsicReg_GPON_RX_PSA_CONFIG]                    =  { mvAsicReg_GPON_RX_PSA_CONFIG,                    MV_ASIC_ONT_GLB_ADDR + 0x0804,   0x0804,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx PSA config"},
+	[mvAsicReg_GPON_RX_PSA_CONFIG_SFM3]               =  { mvAsicReg_GPON_RX_PSA_CONFIG_SFM3,               MV_ASIC_ONT_GLB_ADDR + 0x0804,   0x0804,   asicRW,     0x000000FF,     0,      0,     0,      0,     "PLOAM Sync SM: sync => hunt state"},
+	[mvAsicReg_GPON_RX_PSA_CONFIG_SFM2]               =  { mvAsicReg_GPON_RX_PSA_CONFIG_SFM2,               MV_ASIC_ONT_GLB_ADDR + 0x0804,   0x0804,   asicRW,     0x000000FF,     8,      0,     0,      0,     "PLOAM Sync SM: sync => hunt state"},
+	[mvAsicReg_GPON_RX_PSA_CONFIG_SFM1]               =  { mvAsicReg_GPON_RX_PSA_CONFIG_SFM1,               MV_ASIC_ONT_GLB_ADDR + 0x0804,   0x0804,   asicRW,     0x000000FF,     16,     0,     0,      0,     "PLOAM Sync SM: pre-sync => sync state"},
+	[mvAsicReg_GPON_RX_PSA_CONFIG_FHM1]               =  { mvAsicReg_GPON_RX_PSA_CONFIG_FHM1,               MV_ASIC_ONT_GLB_ADDR + 0x0804,   0x0804,   asicRW,     0x0000000F,     24,     0,     0,      0,     "FEC hysteresis mechanisem"},
+	[mvAsicReg_GPON_RX_FEC_CONFIG]                    =  { mvAsicReg_GPON_RX_FEC_CONFIG,                    MV_ASIC_ONT_GLB_ADDR + 0x0808,   0x0808,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx FEC config"},
+	[mvAsicReg_GPON_RX_FEC_CONFIG_SWVAL]              =  { mvAsicReg_GPON_RX_FEC_CONFIG_SWVAL,              MV_ASIC_ONT_GLB_ADDR + 0x0808,   0x0808,   asicRW,     0x00000001,     0,      0,     0,      0,     "SW value for internal FEC indication"},
+	[mvAsicReg_GPON_RX_FEC_CONFIG_FSW]                =  { mvAsicReg_GPON_RX_FEC_CONFIG_FSW,                MV_ASIC_ONT_GLB_ADDR + 0x0808,   0x0808,   asicRW,     0x00000001,     1,      0,     0,      0,     "Force SW FEC indication"},
+	[mvAsicReg_GPON_RX_FEC_CONFIG_IGNP]               =  { mvAsicReg_GPON_RX_FEC_CONFIG_IGNP,               MV_ASIC_ONT_GLB_ADDR + 0x0808,   0x0808,   asicRW,     0x00000001,     2,      0,     0,      0,     "Force SW FEC ignore parity"},
+	[mvAsicReg_GPON_RX_FEC_CONFIG_IND]                =  { mvAsicReg_GPON_RX_FEC_CONFIG_IND,                MV_ASIC_ONT_GLB_ADDR + 0x0808,   0x0808,   asicRO,     0x00000001,     31,     0,     0,      0,     "Internal FEC indication"},
+	[mvAsicReg_GPON_RX_FEC_STAT0]                     =  { mvAsicReg_GPON_RX_FEC_STAT0,                     MV_ASIC_ONT_GLB_ADDR + 0x080C,   0x080C,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of bytes rece from last read"},
+	[mvAsicReg_GPON_RX_FEC_STAT1]                     =  { mvAsicReg_GPON_RX_FEC_STAT1,                     MV_ASIC_ONT_GLB_ADDR + 0x0810,   0x0810,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of correct bytes / bits"},
+	[mvAsicReg_GPON_RX_FEC_STAT2]                     =  { mvAsicReg_GPON_RX_FEC_STAT2,                     MV_ASIC_ONT_GLB_ADDR + 0x0814,   0x0814,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of incorrect / rece bytes"},
+	[mvAsicReg_GPON_RX_SFRAME_COUNTER]                =  { mvAsicReg_GPON_RX_SFRAME_COUNTER,                MV_ASIC_ONT_GLB_ADDR + 0x0818,   0x0818,   asicRO,     0x3FFFFFFF,     0,      0,     0,      0,     "Rx Superframe Counter"},
+	[mvAsicReg_GPON_RX_PLOAMD_DATA_READ]              =  { mvAsicReg_GPON_RX_PLOAMD_DATA_READ,              MV_ASIC_ONT_GLB_ADDR + 0x081C,   0x081C,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx PLOAM data fifo, PLOAM = 3xread"},
+	[mvAsicReg_GPON_RX_PLOAMD_DATA_USED]              =  { mvAsicReg_GPON_RX_PLOAMD_DATA_USED,              MV_ASIC_ONT_GLB_ADDR + 0x0820,   0x0820,   asicRO,     0x000000FF,     0,      0,     0,      0,     "Num of free entry's in PLOAM data fifo"},
+	[mvAsicReg_GPON_RX_PLOAMD_CONFIG]                 =  { mvAsicReg_GPON_RX_PLOAMD_CONFIG,                 MV_ASIC_ONT_GLB_ADDR + 0x0824,   0x0824,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx PLOAM config"},
+	[mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNC]            =  { mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNC,            MV_ASIC_ONT_GLB_ADDR + 0x0824,   0x0824,   asicRW,     0x00000001,     0,      0,     0,      0,     "Ignore PLOAM crc, forward regardless of crc"},
+	[mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNB]            =  { mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNB,            MV_ASIC_ONT_GLB_ADDR + 0x0824,   0x0824,   asicRW,     0x00000001,     1,      0,     0,      0,     "Ignore broadcast PLOAM, forward only onuId"},
+	[mvAsicReg_GPON_RX_PLOAMD_CONFIG_FALL]            =  { mvAsicReg_GPON_RX_PLOAMD_CONFIG_FALL,            MV_ASIC_ONT_GLB_ADDR + 0x0824,   0x0824,   asicRW,     0x00000001,     2,      0,     0,      0,     "Forward all PLOAM"},
+	[mvAsicReg_GPON_RX_PLOAMD_LOST_CRC_STATUS]        =  { mvAsicReg_GPON_RX_PLOAMD_LOST_CRC_STATUS,        MV_ASIC_ONT_GLB_ADDR + 0x0828,   0x0828,   asicRO,     0x0000FFFF,     0,      0,     0,      0,     "Num of PLOAM lost due to faulty crc"},
+	[mvAsicReg_GPON_RX_PLOAMD_LOST_FULL_STATUS]       =  { mvAsicReg_GPON_RX_PLOAMD_LOST_FULL_STATUS,       MV_ASIC_ONT_GLB_ADDR + 0x082C,   0x082C,   asicRO,     0x0000FFFF,     0,      0,     0,      0,     "Num of PLOAM lost due to cpu fifo full"},
+	[mvAsicReg_GPON_RX_PLOAMD_RCVD_IDLE_STATUS]       =  { mvAsicReg_GPON_RX_PLOAMD_RCVD_IDLE_STATUS,       MV_ASIC_ONT_GLB_ADDR + 0x0830,   0x0830,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of idle PLOAM rece"},
+	[mvAsicReg_GPON_RX_PLOAMD_RCVD_BROAD_STATUS]      =  { mvAsicReg_GPON_RX_PLOAMD_RCVD_BROAD_STATUS,      MV_ASIC_ONT_GLB_ADDR + 0x0834,   0x0834,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of broadcast PLOAM rece"},
+	[mvAsicReg_GPON_RX_PLOAMD_RCVD_MYID_STATUS]       =  { mvAsicReg_GPON_RX_PLOAMD_RCVD_MYID_STATUS,       MV_ASIC_ONT_GLB_ADDR + 0x0838,   0x0838,   asicRO,     0x0000FFFF,     0,      0,     0,      0,     "Num of PLOAM rece assigned to MYID"},
+	[mvAsicReg_GPON_RX_BIP_STATUS]                    =  { mvAsicReg_GPON_RX_BIP_STATUS,                    MV_ASIC_ONT_GLB_ADDR + 0x083C,   0x083C,   asicRO,     0x0000FFFF,     0,      0,     0,      0,     "Num of BIP errors since last read"},
+	[mvAsicReg_GPON_RX_PLEND_CONFIG]                  =  { mvAsicReg_GPON_RX_PLEND_CONFIG,                  MV_ASIC_ONT_GLB_ADDR + 0x0840,   0x0840,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx PLEND config"},
+	[mvAsicReg_GPON_RX_PLEND_CONFIG_FN]               =  { mvAsicReg_GPON_RX_PLEND_CONFIG_FN,               MV_ASIC_ONT_GLB_ADDR + 0x0840,   0x0840,   asicRW,     0x00000001,     0,      0,     0,      0,     "Force SW plend field selection"},
+	[mvAsicReg_GPON_RX_PLEND_CONFIG_UF]               =  { mvAsicReg_GPON_RX_PLEND_CONFIG_UF,               MV_ASIC_ONT_GLB_ADDR + 0x0840,   0x0840,   asicRW,     0x00000001,     1,      0,     0,      0,     "SW use of plend field"},
+	[mvAsicReg_GPON_RX_PLEND_CONFIG_IGND]             =  { mvAsicReg_GPON_RX_PLEND_CONFIG_IGND,             MV_ASIC_ONT_GLB_ADDR + 0x0840,   0x0840,   asicRW,     0x00000001,     2,      0,     0,      0,     "Ignore diff between two plend fields"},
+	[mvAsicReg_GPON_RX_PLEND_CONFIG_DFIX]             =  { mvAsicReg_GPON_RX_PLEND_CONFIG_DFIX,             MV_ASIC_ONT_GLB_ADDR + 0x0840,   0x0840,   asicRW,     0x00000001,     3,      0,     0,      0,     "Do not fix plend field according to crc result"},
+	[mvAsicReg_GPON_RX_PLEND_CONFIG_IGNC]             =  { mvAsicReg_GPON_RX_PLEND_CONFIG_IGNC,             MV_ASIC_ONT_GLB_ADDR + 0x0840,   0x0840,   asicRW,     0x00000001,     4,      0,     0,      0,     "Ignore crc during plend field selection"},
+	[mvAsicReg_GPON_RX_PLEND_STATUS]                  =  { mvAsicReg_GPON_RX_PLEND_STATUS,                  MV_ASIC_ONT_GLB_ADDR + 0x0844,   0x0844,   asicRO,     0x0000FFFF,     0,      0,     0,      0,     "Rx PLEND status"},
+	[mvAsicReg_GPON_RX_BWMAP_CONFIG]                  =  { mvAsicReg_GPON_RX_BWMAP_CONFIG,                  MV_ASIC_ONT_GLB_ADDR + 0x0848,   0x0848,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx BW map config"},
+	[mvAsicReg_GPON_RX_BWMAP_CONFIG_MSD]              =  { mvAsicReg_GPON_RX_BWMAP_CONFIG_MSD,              MV_ASIC_ONT_GLB_ADDR + 0x0848,   0x0848,   asicRW,     0x00000FFF,     0,      0,     0,      0,     "Min num of bytes between bursts"},
+	[mvAsicReg_GPON_RX_BWMAP_CONFIG_DFIX]             =  { mvAsicReg_GPON_RX_BWMAP_CONFIG_DFIX,             MV_ASIC_ONT_GLB_ADDR + 0x0848,   0x0848,   asicRW,     0x00000001,    12,      0,     0,      0,     "Do not fix BW map according to crc result"},
+	[mvAsicReg_GPON_RX_BWMAP_CONFIG_IGNC]             =  { mvAsicReg_GPON_RX_BWMAP_CONFIG_IGNC,             MV_ASIC_ONT_GLB_ADDR + 0x0848,   0x0848,   asicRW,     0x00000001,    13,      0,     0,      0,     "Ignore crc result for BW allocation"},
+	[mvAsicReg_GPON_RX_BWMAP_STATUS0]                 =  { mvAsicReg_GPON_RX_BWMAP_STATUS0,                 MV_ASIC_ONT_GLB_ADDR + 0x084C,   0x084C,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of BW bytes rece with crc: bad/error/corr/uncorr"},
+	[mvAsicReg_GPON_RX_BWMAP_STATUS1]                 =  { mvAsicReg_GPON_RX_BWMAP_STATUS1,                 MV_ASIC_ONT_GLB_ADDR + 0x0850,   0x0850,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of BW bytes rece from last read"},
+	[mvAsicReg_GPON_RX_AES_CONFIG]                    =  { mvAsicReg_GPON_RX_AES_CONFIG,                    MV_ASIC_ONT_GLB_ADDR + 0x0854,   0x0854,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx AES key switch config"},
+	[mvAsicReg_GPON_RX_AES_CONFIG_TIME]               =  { mvAsicReg_GPON_RX_AES_CONFIG_TIME,               MV_ASIC_ONT_GLB_ADDR + 0x0854,   0x0854,   asicRW,     0x3FFFFFFF,     0,      0,     0,      0,     "AES Key switch time value based on superframe counter"},
+	[mvAsicReg_GPON_RX_AES_CONFIG_SWS]                =  { mvAsicReg_GPON_RX_AES_CONFIG_SWS,                MV_ASIC_ONT_GLB_ADDR + 0x0854,   0x0854,   asicRW,     0x00000001,    30,      0,     0,      0,     "AES SW Force key switch according to superframe counter"},
+	[mvAsicReg_GPON_RX_AES_STATUS]                    =  { mvAsicReg_GPON_RX_AES_STATUS,                    MV_ASIC_ONT_GLB_ADDR + 0x0858,   0x0858,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Rx AES status"},
+	[mvAsicReg_GPON_RX_AES_STATUS_HST]                =  { mvAsicReg_GPON_RX_AES_STATUS_HST,                MV_ASIC_ONT_GLB_ADDR + 0x0858,   0x0858,   asicRO,     0x3FFFFFFF,     0,      0,     0,      0,     "Indicates the time to switch AES Key"},
+	[mvAsicReg_GPON_RX_AES_STATUS_HWS]                =  { mvAsicReg_GPON_RX_AES_STATUS_HWS,                MV_ASIC_ONT_GLB_ADDR + 0x0858,   0x0858,   asicRO,     0x00000001,    30,      0,     0,      0,     "indicates AES key switch time is valid"},
+	[mvAsicReg_GPON_RX_EQULIZATION_DELAY]             =  { mvAsicReg_GPON_RX_EQULIZATION_DELAY,             MV_ASIC_ONT_GLB_ADDR + 0x085C,   0x085C,   asicRW,     0x000FFFFF,     0,      0,     0,      0,     "Rx equalization delay, sent from the OLT"},
+	[mvAsicReg_GPON_RX_INTERNAL_DELAY]                =  { mvAsicReg_GPON_RX_INTERNAL_DELAY,                MV_ASIC_ONT_GLB_ADDR + 0x0860,   0x0860,   asicRW,     0x00001FFF,     0,      0,     0,      0,     "Rx Internal Delay - Constant"},
+	[mvAsicReg_GPON_RX_BW_MAP]                        =  { mvAsicReg_GPON_RX_BW_MAP,                        MV_ASIC_ONT_GLB_ADDR + 0x0880,   0x0880,   asicRW,     0xFFFFFFFF,     0,     16,     1,      0,     "Rx BW map"},
+	[mvAsicReg_GPON_RX_BW_MAP_ALID]                   =  { mvAsicReg_GPON_RX_BW_MAP_ALID,                   MV_ASIC_ONT_GLB_ADDR + 0x0880,   0x0880,   asicRW,     0x00000FFF,     0,     16,     1,      0,     "Alloc Id number to be mapped to tcont number"},
+	[mvAsicReg_GPON_RX_BW_MAP_TCN]                    =  { mvAsicReg_GPON_RX_BW_MAP_TCN,                    MV_ASIC_ONT_GLB_ADDR + 0x0880,   0x0880,   asicRW,     0x0000001F,    12,     16,     1,      0,     "Tcont number to which the allocId will be mapped"},
+	[mvAsicReg_GPON_RX_BW_MAP_EN]                     =  { mvAsicReg_GPON_RX_BW_MAP_EN,                     MV_ASIC_ONT_GLB_ADDR + 0x0880,   0x0880,   asicRW,     0x00000001,    17,     16,     1,      0,     "Rx BW map mapping fields are valid"},
+
+	/* =========================== */
+	/*  GEM Registers              */
+	/* =========================== */
+	[mvAsicReg_GPON_GEM_STAT_IDLE_GEM_CNT]            =  { mvAsicReg_GPON_GEM_STAT_IDLE_GEM_CNT,            MV_ASIC_ONT_GLB_ADDR + 0x0C00,   0x0C00,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece idle gem frames"},
+	[mvAsicReg_GPON_GEM_STAT_VALID_GEM_CNT]           =  { mvAsicReg_GPON_GEM_STAT_VALID_GEM_CNT,           MV_ASIC_ONT_GLB_ADDR + 0x0C04,   0x0C04,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece valid gem frames"},
+	[mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_CNT]           =  { mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_CNT,           MV_ASIC_ONT_GLB_ADDR + 0x0C08,   0x0C08,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece undefined gem frames"},
+	[mvAsicReg_GPON_GEM_STAT_VALID_OMCI_CNT]          =  { mvAsicReg_GPON_GEM_STAT_VALID_OMCI_CNT,          MV_ASIC_ONT_GLB_ADDR + 0x0C0C,   0x0C0C,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece omci frames"},
+	[mvAsicReg_GPON_GEM_STAT_DROPPED_GEM_CNT]         =  { mvAsicReg_GPON_GEM_STAT_DROPPED_GEM_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x0C10,   0x0C10,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of dropped gem frames"},
+	[mvAsicReg_GPON_GEM_STAT_DROPPED_OMCI_CNT]        =  { mvAsicReg_GPON_GEM_STAT_DROPPED_OMCI_CNT,        MV_ASIC_ONT_GLB_ADDR + 0x0C14,   0x0C14,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of dropped omci frames"},
+	[mvAsicReg_GPON_GEM_STAT_ERROR_GEM_CNT]           =  { mvAsicReg_GPON_GEM_STAT_ERROR_GEM_CNT,           MV_ASIC_ONT_GLB_ADDR + 0x0C18,   0x0C18,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece gem frames with uncorr HEC errors"},
+	[mvAsicReg_GPON_GEM_STAT_ONE_FIXED_HEC_ERR_CNT]   =  { mvAsicReg_GPON_GEM_STAT_ONE_FIXED_HEC_ERR_CNT,   MV_ASIC_ONT_GLB_ADDR + 0x0C1C,   0x0C1C,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece gem frames with 1 HEC error in gem header"},
+	[mvAsicReg_GPON_GEM_STAT_TWO_FIXED_HEC_ERR_CNT]   =  { mvAsicReg_GPON_GEM_STAT_TWO_FIXED_HEC_ERR_CNT,   MV_ASIC_ONT_GLB_ADDR + 0x0C20,   0x0C20,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece gem frames with 2 HEC error in gem header"},
+	[mvAsicReg_GPON_GEM_STAT_VALID_GEM_PAYLOAD_CNT]   =  { mvAsicReg_GPON_GEM_STAT_VALID_GEM_PAYLOAD_CNT,   MV_ASIC_ONT_GLB_ADDR + 0x0C24,   0x0C24,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Total payload byte count of rece valid gem frames"},
+	[mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_PAYLOAD_CNT]   =  { mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_PAYLOAD_CNT,   MV_ASIC_ONT_GLB_ADDR + 0x0C28,   0x0C28,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Total payload byte count of rece undefined gem frames"},
+	[mvAsicReg_GPON_GEM_STAT_RSMBL_MEM_FLUSH_CNT]     =  { mvAsicReg_GPON_GEM_STAT_RSMBL_MEM_FLUSH_CNT,     MV_ASIC_ONT_GLB_ADDR + 0x0C2C,   0x0C2C,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of times gem reassemble memory was flushed"},
+	[mvAsicReg_GPON_GEM_STAT_LCDGi_CNT]               =  { mvAsicReg_GPON_GEM_STAT_LCDGi_CNT,               MV_ASIC_ONT_GLB_ADDR + 0x0C30,   0x0C30,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of times gem synchronization was lost"},
+	[mvAsicReg_GPON_GEM_STAT_CORR_ETH_FRAME_CNT]      =  { mvAsicReg_GPON_GEM_STAT_CORR_ETH_FRAME_CNT,      MV_ASIC_ONT_GLB_ADDR + 0x0C34,   0x0C34,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece ethernet frames with corr fcs"},
+	[mvAsicReg_GPON_GEM_STAT_ERR_ETH_FRAME_CNT]       =  { mvAsicReg_GPON_GEM_STAT_ERR_ETH_FRAME_CNT,       MV_ASIC_ONT_GLB_ADDR + 0x0C38,   0x0C38,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece ethernet frames with fcs error"},
+	[mvAsicReg_GPON_GEM_STAT_CORR_OMCI_FRAME_CNT]     =  { mvAsicReg_GPON_GEM_STAT_CORR_OMCI_FRAME_CNT,     MV_ASIC_ONT_GLB_ADDR + 0x0C3C,   0x0C3C,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece omci frames with corr crc"},
+	[mvAsicReg_GPON_GEM_STAT_ERR_OMCI_FRAME_CNT]      =  { mvAsicReg_GPON_GEM_STAT_ERR_OMCI_FRAME_CNT,      MV_ASIC_ONT_GLB_ADDR + 0x0C40,   0x0C40,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Num of rece omci frames with crc error"},
+	[mvAsicReg_GPON_GEM_CONFIG_PLI]                   =  { mvAsicReg_GPON_GEM_CONFIG_PLI,                   MV_ASIC_ONT_GLB_ADDR + 0x0C44,   0x0C44,   asicRW,     0x00000FFF,      0,     0,     0,      0,     "Gem frames max payload length"},
+	[mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN]         =  { mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN,         MV_ASIC_ONT_GLB_ADDR + 0x0C48,   0x0C48,   asicRW,     0xFFFFFFFF,      0,     0,     0,      0,     "Gem ethernet frames length config"},
+	[mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MAX]     =  { mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MAX,     MV_ASIC_ONT_GLB_ADDR + 0x0C48,   0x0C48,   asicRW,     0x00000FFF,      0,     0,     0,      0,     "Gem ethernet frames max length"},
+	[mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MIN]     =  { mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MIN,     MV_ASIC_ONT_GLB_ADDR + 0x0C48,   0x0C48,   asicRW,     0x00000FFF,     16,     0,     0,      0,     "Gem ethernet frames min length"},
+	[mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN]        =  { mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN,        MV_ASIC_ONT_GLB_ADDR + 0x0C4C,   0x0C4C,   asicRW,     0xFFFFFFFF,      0,     0,     0,      0,     "Gem omci frames length config"},
+	[mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MAX]    =  { mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MAX,    MV_ASIC_ONT_GLB_ADDR + 0x0C4C,   0x0C4C,   asicRW,     0x00000FFF,      0,     0,     0,      0,     "Gem omci frames max length"},
+	[mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MIN]    =  { mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MIN,    MV_ASIC_ONT_GLB_ADDR + 0x0C4C,   0x0C4C,   asicRW,     0x00000FFF,     16,     0,     0,      0,     "Gem omci frames min length"},
+	[mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT]             =  { mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT,             MV_ASIC_ONT_GLB_ADDR + 0x0C50,   0x0C50,   asicRW,     0xFFFFFFFF,      0,     0,     0,      0,     "Omci gem port Id config"},
+	[mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_ID]          =  { mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_ID,          MV_ASIC_ONT_GLB_ADDR + 0x0C50,   0x0C50,   asicRW,     0x00000FFF,      0,     0,     0,      0,     "Omci gem port Id value"},
+	[mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_VALID]       =  { mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_VALID,       MV_ASIC_ONT_GLB_ADDR + 0x0C50,   0x0C50,   asicRW,     0x00000001,     16,     0,     0,      0,     "Omci gem port Id valid indication"},
+	[mvAsicReg_GPON_GEM_CONFIG_OMCI_FAST_PATH_VALID]  =  { mvAsicReg_GPON_GEM_CONFIG_OMCI_FAST_PATH_VALID,  MV_ASIC_ONT_GLB_ADDR + 0x0C50,   0x0C50,   asicRW,     0x00000001,     31,     0,     0,      0,     "D/S OMCI fast path valid indication"},
+	[mvAsicReg_GPON_GEM_CONFIG_AES]                   =  { mvAsicReg_GPON_GEM_CONFIG_AES,                   MV_ASIC_ONT_GLB_ADDR + 0x0C54,   0x0C54,   asicRW,     0x00000001,      0,     0,     0,      0,     "Gem AES enable"},
+	[mvAsicReg_GPON_GEM_AES_SHADOW_KEY]               =  { mvAsicReg_GPON_GEM_AES_SHADOW_KEY,               MV_ASIC_ONT_GLB_ADDR + 0x0C58,   0x0C58,   asicRW,     0xFFFFFFFF,      0,     4,     1,      0,     "Rx AES shadow key"},
+	[mvAsicReg_GPON_GEM_CFG_IPG_VALUE]                =  { mvAsicReg_GPON_GEM_CFG_IPG_VALUE,                MV_ASIC_ONT_GLB_ADDR + 0x0C68,   0x0C68,   asicRW,     0x000000FF,      0,     0,     0,      0,     "Gem Cfg IPG Value"},
+	[mvAsicReg_GPON_GEM_CFG_IPG_VALID]                =  { mvAsicReg_GPON_GEM_CFG_IPG_VALID,                MV_ASIC_ONT_GLB_ADDR + 0x0C6C,   0x0C6C,   asicRW,     0x00000001,      0,     0,     0,      0,     "Gem Cfg IPG Valid"},
+	[mvAsicReg_GPON_GEM_RX_CTRL_Q_READ]               =  { mvAsicReg_GPON_GEM_RX_CTRL_Q_READ,               MV_ASIC_ONT_GLB_ADDR + 0x0C74,   0x0C74,   asicRO,     0xFFFFFFFF,      0,     0,     0,      0,     "Rx control cmd and data fifo"},
+	[mvAsicReg_GPON_GEM_RX_CTRL_DATA_USED]            =  { mvAsicReg_GPON_GEM_RX_CTRL_DATA_USED,            MV_ASIC_ONT_GLB_ADDR + 0x0C78,   0x0C78,   asicRO,     0x000003FF,      0,     0,     0,      0,     "Control data fifo used"},
+	[mvAsicReg_GPON_GEM_RX_CTRL_CMD_USED]             =  { mvAsicReg_GPON_GEM_RX_CTRL_CMD_USED,             MV_ASIC_ONT_GLB_ADDR + 0x0C78,   0x0C78,   asicRO,     0x000000FF,     16,     0,     0,      0,     "Control cmd fifo used"},
+	[mvAsicReg_GPON_GEM_RX_CTRL_HQ_HEAD_LEN]          =  { mvAsicReg_GPON_GEM_RX_CTRL_HQ_HEAD_LEN,          MV_ASIC_ONT_GLB_ADDR + 0x0C7C,   0x0C7C,   asicRO,     0x00000FFF,      0,     0,     0,      0,     "Rx control cmd and data header length"},
+	[mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_PORT_ID]       =  { mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_PORT_ID,       MV_ASIC_ONT_GLB_ADDR + 0x0C7C,   0x0C7C,   asicRO,     0x00000FFF,     12,     0,     0,      0,     "Rx control cmd and data GEM port ID"},
+	[mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_PTI]           =  { mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_PTI,           MV_ASIC_ONT_GLB_ADDR + 0x0C7C,   0x0C7C,   asicRO,     0x00000007,     24,     0,     0,      0,     "Rx control cmd and data GEM PTI"},
+	[mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_ERR]           =  { mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_ERR,           MV_ASIC_ONT_GLB_ADDR + 0x0C7C,   0x0C7C,   asicRO,     0x00000001,     27,     0,     0,      0,     "Rx control cmd and data GEM error"},
+
+	/* =========================== */
+	/*  Tx Registers               */
+	/* =========================== */
+	[mvAsicReg_GPON_TX_PREAMBLE]                      =  { mvAsicReg_GPON_TX_PREAMBLE,                      MV_ASIC_ONT_GLB_ADDR + 0x1000,   0x1000,   asicRW,     0xFFFFFFFF,     0,      3,     1,      0,     "Tx preamble config"},
+	[mvAsicReg_GPON_TX_PREAMBLE_PATT]                 =  { mvAsicReg_GPON_TX_PREAMBLE_PATT,                 MV_ASIC_ONT_GLB_ADDR + 0x1000,   0x1000,   asicRW,     0x000000FF,     0,      3,     1,      0,     "Tx preamble type 1/2/3 pattern"},
+	[mvAsicReg_GPON_TX_PREAMBLE_SIZE]                 =  { mvAsicReg_GPON_TX_PREAMBLE_SIZE,                 MV_ASIC_ONT_GLB_ADDR + 0x1000,   0x1000,   asicRW,     0x000000FF,     8,      3,     1,      0,     "Tx preamble type 1/2/3 size"},
+	[mvAsicReg_GPON_TX_DELIMITER]                     =  { mvAsicReg_GPON_TX_DELIMITER,                     MV_ASIC_ONT_GLB_ADDR + 0x100C,   0x100C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Tx delimiter config"},
+	[mvAsicReg_GPON_TX_DELIMITER_PAT]                 =  { mvAsicReg_GPON_TX_DELIMITER_PAT,                 MV_ASIC_ONT_GLB_ADDR + 0x100C,   0x100C,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "Tx delimiter byte 1/2/3 pattern"},
+	[mvAsicReg_GPON_TX_DELIMITER_SIZE]                =  { mvAsicReg_GPON_TX_DELIMITER_SIZE,                MV_ASIC_ONT_GLB_ADDR + 0x100C,   0x100C,   asicRW,     0x000000FF,     24,     0,     0,      0,     "Tx delimiter size"},
+	[mvAsicReg_GPON_TX_BURST_EN_PARAM]                =  { mvAsicReg_GPON_TX_BURST_EN_PARAM,                MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Tx burst enable config"},
+	[mvAsicReg_GPON_TX_BURST_EN_PARAM_STR]            =  { mvAsicReg_GPON_TX_BURST_EN_PARAM_STR,            MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0x0000001F,     0,      0,     0,      0,     "Num of tx enable bytes before first US data bit is trans"},
+	[mvAsicReg_GPON_TX_BURST_EN_PARAM_STP]            =  { mvAsicReg_GPON_TX_BURST_EN_PARAM_STP,            MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0x0000001F,     8,      0,     0,      0,     "Num of tx enable bytes after last US data bit is trans"},
+	[mvAsicReg_GPON_TX_BURST_EN_PARAM_DLY]            =  { mvAsicReg_GPON_TX_BURST_EN_PARAM_DLY,            MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0x00000001,     14,     0,     0,      0,     "Swap the order of tx data and tx enable bytes"},
+	[mvAsicReg_GPON_TX_BURST_EN_PARAM_P]              =  { mvAsicReg_GPON_TX_BURST_EN_PARAM_P,              MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0x00000001,     15,     0,     0,      0,     "Tx Burst enable polarity"},
+	[mvAsicReg_GPON_TX_BURST_EN_PARAM_MASK]           =  { mvAsicReg_GPON_TX_BURST_EN_PARAM_MASK,           MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0x000000FF,     16,     0,     0,      0,     "Mask for 8 bits that are added to the end of tx enable signal"},
+	[mvAsicReg_GPON_TX_FDELAY]                        =  { mvAsicReg_GPON_TX_FDELAY,                        MV_ASIC_ONT_GLB_ADDR + 0x1014,   0x1014,   asicRW,     0x0000003F,     0,      0,     0,      0,     "Tx final delay"},
+	[mvAsicReg_GPON_TX_PLOAM_DATA_WRITE]              =  { mvAsicReg_GPON_TX_PLOAM_DATA_WRITE,              MV_ASIC_ONT_GLB_ADDR + 0x1018,   0x1018,   asicWO,     0xFFFFFFFF,     0,      0,     0,      0,     "Tx PLOAM data fifo"},
+	[mvAsicReg_GPON_TX_PLOAM_DATA_WRITE_FREE]         =  { mvAsicReg_GPON_TX_PLOAM_DATA_WRITE_FREE,         MV_ASIC_ONT_GLB_ADDR + 0x101C,   0x101C,   asicRO,     0x000000FF,     0,      0,     0,      0,     "Num of free entry's in Us PLOAM data fifo"},
+	[mvAsicReg_GPON_TX_PLS_CONSTANT]                  =  { mvAsicReg_GPON_TX_PLS_CONSTANT,                  MV_ASIC_ONT_GLB_ADDR + 0x1020,   0x1020,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Tx PLS Constant"},
+	[mvAsicReg_GPON_TX_DBR_REPORT_BLOCK_IDX]          =  { mvAsicReg_GPON_TX_DBR_REPORT_BLOCK_IDX,          MV_ASIC_ONT_GLB_ADDR + 0x1024,   0x1024,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Tx dbr block index"},
+	[mvAsicReg_GPON_TX_FE_RDI_INDICATION]             =  { mvAsicReg_GPON_TX_FE_RDI_INDICATION,             MV_ASIC_ONT_GLB_ADDR + 0x1028,   0x1028,   asicRW,     0x00000001,     0,      0,     0,      0,     "Tx rdi indication for US trans"},
+	[mvAsicReg_GPON_TX_STAT_GEM_PTI1]                 =  { mvAsicReg_GPON_TX_STAT_GEM_PTI1,                 MV_ASIC_ONT_GLB_ADDR + 0x102C,   0x102C,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Total num of trans gem frames with pti indication set to 1"},
+	[mvAsicReg_GPON_TX_STAT_GEM_PTI0]                 =  { mvAsicReg_GPON_TX_STAT_GEM_PTI0,                 MV_ASIC_ONT_GLB_ADDR + 0x1030,   0x1030,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Total num of trans gem frames with pti indication set to 0"},
+	[mvAsicReg_GPON_TX_STAT_GEM_IDLE]                 =  { mvAsicReg_GPON_TX_STAT_GEM_IDLE,                 MV_ASIC_ONT_GLB_ADDR + 0x1034,   0x1034,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Total num of trans idle gem frames"},
+	[mvAsicReg_GPON_TX_STAT_TX_EN_CNT]                =  { mvAsicReg_GPON_TX_STAT_TX_EN_CNT,                MV_ASIC_ONT_GLB_ADDR + 0x1038,   0x1038,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "Total num of cycles with tx enable indication asserted"},
+	[mvAsicReg_GPON_TX_CONFIG_EN_THRESHOLD]           =  { mvAsicReg_GPON_TX_CONFIG_EN_THRESHOLD,           MV_ASIC_ONT_GLB_ADDR + 0x103C,   0x103C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Saturation threshold for tx enable indication counter"},
+	[mvAsicReg_GPON_TX_GSE_TRANS_THRESHOLD]           =  { mvAsicReg_GPON_TX_GSE_TRANS_THRESHOLD,           MV_ASIC_ONT_GLB_ADDR + 0x1040,   0x1040,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "GSE threshold for starting forwarding data to the tx burst fifo"},
+	[mvAsicReg_GPON_TX_CFG_AC_COUPLING]               =  { mvAsicReg_GPON_TX_CFG_AC_COUPLING,               MV_ASIC_ONT_GLB_ADDR + 0x104C,   0x104C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Transmit Configuration AC Coupling"},
+	[mvAsicReg_GPON_TX_CFG_RAND_DELAY]                =  { mvAsicReg_GPON_TX_CFG_RAND_DELAY,                MV_ASIC_ONT_GLB_ADDR + 0x1050,   0x1050,   asicRW,     0x00000007,     0,      0,     0,      0,     "Transmit Configuration Random Delay"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_FRAMES]       =  { mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_FRAMES,       MV_ASIC_ONT_GLB_ADDR + 0x10A0,   0x10A0,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of ethernet frames trans via tcont i (0-7)"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_BYTES]        =  { mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_BYTES,        MV_ASIC_ONT_GLB_ADDR + 0x10C8,   0x10C8,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of ethernet payload bytes trans via tcont i (0-7)"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_GEM_FRAMES]       =  { mvAsicReg_GPON_TX_STAT_TCONT_i_GEM_FRAMES,       MV_ASIC_ONT_GLB_ADDR + 0x10F0,   0x10F0,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of gem frames trans via tcont i (0-7)"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_IDLE_GEM]         =  { mvAsicReg_GPON_TX_STAT_TCONT_i_IDLE_GEM,         MV_ASIC_ONT_GLB_ADDR + 0x1118,   0x1118,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of idle gem frames trans via tcont i (0-7)"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_FRAME]   =  { mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_FRAME,   MV_ASIC_ONT_GLB_ADDR + 0x1140,   0x1140,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of ethernet frames trans via tcont i (8-15)"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_BYTES]   =  { mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_BYTES,   MV_ASIC_ONT_GLB_ADDR + 0x1168,   0x1168,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of ethernet payload bytes trans via tcont i (8-15)"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_GEM_FRAME]   =  { mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_GEM_FRAME,   MV_ASIC_ONT_GLB_ADDR + 0x1190,   0x1190,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of gem frames trans via tcont i (8-15)"},
+	[mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_IDLE_GEM]    =  { mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_IDLE_GEM,    MV_ASIC_ONT_GLB_ADDR + 0x11B8,   0x11B8,   asicRO,     0xFFFFFFFF,     0,      8,     1,      0,     "Num of idle gem frames trans via tcont i (8-15)"},
+	[mvAsicReg_GPON_TX_HIGH_PRI_CONFIG_EN]            =  { mvAsicReg_GPON_TX_HIGH_PRI_CONFIG_EN,            MV_ASIC_ONT_GLB_ADDR + 0x11E0,   0x11E0,   asicRW,     0x00000001,     31,     0,     0,      0,     "Enable or disable GPON high priority TX feature"},
+	[mvAsicReg_GPON_TX_HIGH_PRI_VALID_BITMAP]         =  { mvAsicReg_GPON_TX_HIGH_PRI_VALID_BITMAP,         MV_ASIC_ONT_GLB_ADDR + 0x11E0,   0x11E0,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Bitmap of allowed low priority T-CONT"},
+	[mvAsicReg_GPON_TX_HIGH_PRI_MAP_0]                =  { mvAsicReg_GPON_TX_HIGH_PRI_MAP_0,                MV_ASIC_ONT_GLB_ADDR + 0x11E4,   0x11E4,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "GPON high priority mapping 0"},
+	[mvAsicReg_GPON_TX_HIGH_PRI_MAP_1]                =  { mvAsicReg_GPON_TX_HIGH_PRI_MAP_1,                MV_ASIC_ONT_GLB_ADDR + 0x11E8,   0x11E8,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "GPON high priority mapping 1"},
+
+	/* =========================== */
+	/*  UTM Registers              */
+	/* =========================== */
+	[mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_ID]          =  { mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_ID,          MV_ASIC_ONT_GLB_ADDR + 0x1400,   0x1400,   asicRW,     0x00000FFF,     0,      0,     0,      0,     "Omci gem port Id - upstream direction"},
+	[mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_VALID]       =  { mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_VALID,       MV_ASIC_ONT_GLB_ADDR + 0x1404,   0x1404,   asicRW,     0x00000001,     0,      0,     0,      0,     "Omci gem port valid - upstream direction"},
+	[mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD]             =  { mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD,             MV_ASIC_ONT_GLB_ADDR + 0x1408,   0x1408,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Num of cycles to pause between two counter gathering sweeps"},
+	[mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD_VALID]       =  { mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD_VALID,       MV_ASIC_ONT_GLB_ADDR + 0x140C,   0x140C,   asicRW,     0x00000001,     0,      0,     0,      0,     "Tc period valid"},
+	[mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP]             =  { mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP,             MV_ASIC_ONT_GLB_ADDR + 0x1410,   0x1410,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Active TX bitmap"},
+	[mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP_VALID]       =  { mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP_VALID,       MV_ASIC_ONT_GLB_ADDR + 0x1414,   0x1414,   asicRW,     0x00000001,     0,      0,     0,      0,     "Active TX bitmap valid"},
+	[mvAsicReg_GPON_UTM_FLUSH]                        =  { mvAsicReg_GPON_UTM_FLUSH,                        MV_ASIC_ONT_GLB_ADDR + 0x1418,   0x1418,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "UTM flush"},
+	[mvAsicReg_GPON_UTM_DEBUG]                        =  { mvAsicReg_GPON_UTM_DEBUG,                        MV_ASIC_ONT_GLB_ADDR + 0x1420,   0x1420,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "UTM debug"},
+
+	/* =========================== */
+	/*  SGL Registers              */
+	/* =========================== */
+	[mvAsicReg_GPON_SGL_SW_RESET]                     =  { mvAsicReg_GPON_SGL_SW_RESET,                     MV_ASIC_ONT_GLB_ADDR + 0x1800,   0x1800,   asicRW,     0x00000001,     0,      0,     0,      0,     "Serdes glue logic - sw reset"},
+	[mvAsicReg_GPON_SGL_CONFIG_REG]                   =  { mvAsicReg_GPON_SGL_CONFIG_REG,                   MV_ASIC_ONT_GLB_ADDR + 0x1804,   0x1804,   asicRW,     0x0000000F,     0,      0,     0,      0,     "Serdes glue logic - config"},
+	[mvAsicReg_GPON_SGL_STATS_REG]                    =  { mvAsicReg_GPON_SGL_STATS_REG,                    MV_ASIC_ONT_GLB_ADDR + 0x1808,   0x1808,   asicRO,     0x000000FF,     0,      0,     0,      0,     "Serdes glue logic - stats"},
+
+	/* =========================== */
+	/*  Memory Registers           */
+	/* =========================== */
+	[mvAsicReg_GPON_TX_CONST_DATA_RAM]                =  { mvAsicReg_GPON_TX_CONST_DATA_RAM,                MV_ASIC_ONT_GLB_ADDR + 0x2000,   0x2000,   asicWO,     0xFFFFFFFF,     0,      8,     1,      0,     "Tx constantant data ram"},
+	[mvAsicReg_GPON_TX_CONST_DATA_RAM_IDLE]           =  { mvAsicReg_GPON_TX_CONST_DATA_RAM_IDLE,           MV_ASIC_ONT_GLB_ADDR + 0x2000,   0x2000,   asicWO,     0xFFFFFFFF,     0,      3,     1,      0,     "Tx constantant data - Idle message"},
+	[mvAsicReg_GPON_TX_CONST_DATA_RAM_SN]             =  { mvAsicReg_GPON_TX_CONST_DATA_RAM_SN,             MV_ASIC_ONT_GLB_ADDR + 0x2020,   0x2020,   asicWO,     0xFFFFFFFF,     0,      3,     1,      0,     "Tx constantant data - SN message"},
+
+	[mvAsicReg_GPON_GEM_AES_PID_TABLE]                =  { mvAsicReg_GPON_GEM_AES_PID_TABLE,                MV_ASIC_ONT_GLB_ADDR + 0x2200,   0x2200,   asicWO,     0xFFFFFFFF,     0,      128,   1,      0,     "Gem AES port Id table"},
+	[mvAsicReg_GPON_GEM_VALID_PID_TABLE]              =  { mvAsicReg_GPON_GEM_VALID_PID_TABLE,              MV_ASIC_ONT_GLB_ADDR + 0x2400,   0x2400,   asicWO,     0xFFFFFFFF,     0,      128,   1,      0,     "Gem valid port Id table"},
+
+	[mvAsicReg_GPON_TEST]                             =  { mvAsicReg_GPON_TEST,                             MV_ASIC_ONT_GLB_ADDR + 0x0940,   0x0940,   asicRW,     0x03FF03FF,     0,      0,     0,      0,     "Gem valid port Id table"},
+
+	/* =========================== */
+	/*  GEM Port MIB Counters      */
+	/* =========================== */
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_0 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_0,               0x03000,                         0x03000,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #0"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_1 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_1,               0x03080,                         0x03080,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #1"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_2 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_2,               0x03100,                         0x03100,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #2"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_3 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_3,               0x03180,                         0x03180,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #3"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_4 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_4,               0x03200,                         0x03200,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #4"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_5 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_5,               0x03280,                         0x03280,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #5"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_6 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_6,               0x03300,                         0x03300,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #6"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_7 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_7,               0x03380,                         0x03380,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #7"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_8 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_8,               0x03400,                         0x03400,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #8"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_9 ]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_9,               0x03480,                         0x03480,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #9"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_10]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_10,              0x03500,                         0x03500,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #10"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_11]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_11,              0x03580,                         0x03580,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #11"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_12]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_12,              0x03600,                         0x03600,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #12"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_13]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_13,              0x03680,                         0x03680,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #13"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_14]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_14,              0x03700,                         0x03700,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #14"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_15]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_15,              0x03780,                         0x03780,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #15"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_16]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_16,              0x03800,                         0x03800,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #16"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_17]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_17,              0x03880,                         0x03880,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #17"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_18]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_18,              0x03900,                         0x03900,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #18"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_19]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_19,              0x03980,                         0x03980,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #19"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_20]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_20,              0x03A00,                         0x03A00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #20"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_21]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_21,              0x03A80,                         0x03A80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #21"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_22]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_22,              0x03B00,                         0x03B00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #22"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_23]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_23,              0x03B80,                         0x03B80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #23"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_24]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_24,              0x03C00,                         0x03C00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #24"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_25]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_25,              0x03C80,                         0x03C80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #25"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_26]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_26,              0x03D00,                         0x03D00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #26"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_27]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_27,              0x03D80,                         0x03D80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #27"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_28]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_28,              0x03E00,                         0x03E00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #28"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_29]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_29,              0x03E80,                         0x03E80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #29"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_30]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_30,              0x03F00,                         0x03F00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #30"},
+	[mvAsicReg_PON_MAC_MIB_COUNTERS_31]                = { mvAsicReg_PON_MAC_MIB_COUNTERS_31,              0x03F80,                         0x03F80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #31"},
+
+	[mvAsicReg_PON_MIB_DEFAULT]                        = { mvAsicReg_PON_MIB_DEFAULT,                      0x03FD8,                         0x03FD8,  asicRW,     0xFFFFFFFF,     0,      0,      0,      0,     "PON MIB Default"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_0 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_0,                0x03050,                         0x03050,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #0"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_1 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_1,                0x030D0,                         0x030D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #1"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_2 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_2,                0x03150,                         0x03150,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #2"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_3 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_3,                0x031D0,                         0x031D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #3"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_4 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_4,                0x03250,                         0x03250,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #4"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_5 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_5,                0x032D0,                         0x032D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #5"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_6 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_6,                0x03350,                         0x03350,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #6"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_7 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_7,                0x033D0,                         0x033D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #7"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_8 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_8,                0x03450,                         0x03450,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #8"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_9 ]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_9,                0x034D0,                         0x034D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #9"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_10]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_10,               0x03550,                         0x03550,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #10"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_11]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_11,               0x035D0,                         0x035D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #11"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_12]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_12,               0x03650,                         0x03650,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #12"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_13]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_13,               0x036D0,                         0x036D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #13"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_14]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_14,               0x03750,                         0x03750,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #14"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_15]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_15,               0x037D0,                         0x037D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #15"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_16]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_16,               0x58850,                         0x58050,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #16"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_17]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_17,               0x588D0,                         0x588D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #17"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_18]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_18,               0x59950,                         0x59050,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #18"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_19]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_19,               0x039D0,                         0x039D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #19"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_20]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_20,               0x03A50,                         0x03A50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #20"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_21]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_21,               0x03AD0,                         0x03AD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #21"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_22]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_22,               0x03B50,                         0x03B50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #22"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_23]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_23,               0x03BD0,                         0x03BD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #23"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_24]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_24,               0x03C50,                         0x03C50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #24"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_25]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_25,               0x03CD0,                         0x03CD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #25"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_26]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_26,               0x03D50,                         0x03D50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #26"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_27]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_27,               0x03DD0,                         0x03DD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #27"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_28]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_28,               0x03E50,                         0x03E50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #28"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_29]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_29,               0x03ED0,                         0x03ED0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #29"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_30]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_30,               0x03F50,                         0x03F50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #30"},
+	[mvAsicReg_PON_MAC_MIB_CONTROL_31]                 = { mvAsicReg_PON_MAC_MIB_CONTROL_31,               0x03FD0,                         0x03FD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #31"},
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           =========   =========   =========   ====      ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==          ==          ==     ==   ==     == ==           == */
+/* ==           ==          ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+	/* =========================== */
+	/*  EPON Interrupt Registers   */
+	/* =========================== */
+	[mvAsicReg_EPON_INTR_REG]                         =  { mvAsicReg_EPON_INTR_REG,                         MV_ASIC_ONT_GLB_ADDR + 0x0000,   0x0000,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Interrupt PON"},
+	[mvAsicReg_EPON_INTR_MASK]                        =  { mvAsicReg_EPON_INTR_MASK,                        MV_ASIC_ONT_GLB_ADDR + 0x0004,   0x0004,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Interrupt PON Mask"},
+	[mvAsicReg_EPON_DBR_INT_LLID_MASK]                =  { mvAsicReg_EPON_DBR_INT_LLID_MASK,                MV_ASIC_ONT_GLB_ADDR + 0x001C,   0x001C,   asicRW,     0x000000FF,     16,     0,     0,      0,     "DBR Interrupt mask per LLID"},
+	[mvAsicReg_EPON_DBR_INT_MASK]                     =  { mvAsicReg_EPON_DBR_INT_MASK,                     MV_ASIC_ONT_GLB_ADDR + 0x001C,   0x001C,   asicRW,     0x00000001,     7,      0,     0,      0,     "DBR Interrupt mask"},
+	[mvAsicReg_EPON_DBR_INT]                          =  { mvAsicReg_EPON_DBR_INT,                          MV_ASIC_ONT_GLB_ADDR + 0x0020,   0x0020,   asicRO,     0x000000FF,     0,      0,     0,      0,     "DBR Interrupt"},
+	[mvAsicReg_EPON_DBR_LLID_INT]                     =  { mvAsicReg_EPON_DBR_LLID_INT,                     MV_ASIC_ONT_GLB_ADDR + 0x0040,   0x0040,   asicRO,     0x00000001,     7,      8,     1,      0,     "DBR LLID Interrupt"},
+
+	/* =========================== */
+	/*  EPON General Registers     */
+	/* =========================== */
+	[mvAsicReg_EPON_GEN_MAC_VERSION_ADDR]             =  { mvAsicReg_EPON_GEN_MAC_VERSION_ADDR,             MV_ASIC_ONT_GLB_ADDR + 0x0400,   0x0400,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "EPON MAC version"},
+	[mvAsicReg_EPON_GEN_ONT_ENABLE]                   =  { mvAsicReg_EPON_GEN_ONT_ENABLE,                   MV_ASIC_ONT_GLB_ADDR + 0x040C,   0x040C,   asicRW,     0x0000FF01,     0,      0,     0,      0,     "ONU Rx/Tx Enable"},
+	[mvAsicReg_EPON_GEN_ONT_RX_ENABLE]                =  { mvAsicReg_EPON_GEN_ONT_RX_ENABLE,                MV_ASIC_ONT_GLB_ADDR + 0x040C,   0x040C,   asicRW,     0x00000001,     0,      0,     0,      0,     "ONU Rx Enable"},
+	[mvAsicReg_EPON_GEN_ONT_TX_ENABLE]                =  { mvAsicReg_EPON_GEN_ONT_TX_ENABLE,                MV_ASIC_ONT_GLB_ADDR + 0x040C,   0x040C,   asicRW,     0x000000FF,     8,      0,     0,      0,     "ONU Tx Enable"},
+#ifdef PON_Z1
+	[mvAsicReg_EPON_GEN_ONT_STATE]                    =  { mvAsicReg_EPON_GEN_ONT_STATE,                    MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000003,     0,      0,     0,      0,     "ONU State"},
+	[mvAsicReg_EPON_GEN_ONT_STATE_REG_AUTO_EN]        =  { mvAsicReg_EPON_GEN_ONT_STATE_REG_AUTO_EN,        MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000001,     1,      0,     0,      0,     "ONU Register State Auto Enable"},
+	[mvAsicReg_EPON_GEN_ONT_STATE_REG]                =  { mvAsicReg_EPON_GEN_ONT_STATE_REG,                MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000001,     0,      0,     0,      0,     "ONU Register State"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_GEN_ONT_STATE]                    =  { mvAsicReg_EPON_GEN_ONT_STATE,                    MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000FFF,     0,      0,     0,      0,     "ONU State"},
+	[mvAsicReg_EPON_GEN_ONT_STATE_REG]                =  { mvAsicReg_EPON_GEN_ONT_STATE_REG,                MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x000000FF,     0,      0,     0,      0,     "ONU Register State"},
+	[mvAsicReg_EPON_GEN_ONT_STATE_REG_AUTO_EN]        =  { mvAsicReg_EPON_GEN_ONT_STATE_REG_AUTO_EN,        MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000001,     8,      0,     0,      0,     "ONU Register State Auto Enable"},
+#endif  /* Z2,A0 or later */
+	[mvAsicReg_EPON_GEN_ONT_STATE_REREG_AUTO_EN]      =  { mvAsicReg_EPON_GEN_ONT_STATE_REREG_AUTO_EN,      MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000001,     9,      0,     0,      0,     "ONU ReRegister State Auto Enable"},
+	[mvAsicReg_EPON_GEN_ONT_STATE_DEREG_AUTO_EN]      =  { mvAsicReg_EPON_GEN_ONT_STATE_DEREG_AUTO_EN,      MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000001,    10,      0,     0,      0,     "ONU DeRegister State Auto Enable"},
+	[mvAsicReg_EPON_GEN_ONT_STATE_NACK_AUTO_EN]       =  { mvAsicReg_EPON_GEN_ONT_STATE_NACK_AUTO_EN,       MV_ASIC_ONT_GLB_ADDR + 0x0410,   0x0410,   asicRW,     0x00000001,    11,      0,     0,      0,     "ONU Nack State Auto Enable"},
+	[mvAsicReg_EPON_GEN_TQ_SIZE]                      =  { mvAsicReg_EPON_GEN_TQ_SIZE,                      MV_ASIC_ONT_GLB_ADDR + 0x0414,   0x0414,   asicRW,     0x000000FF,     0,      0,     0,      0,     "TQ Size"},
+	[mvAsicReg_EPON_GEN_LASER_PARAM]                  =  { mvAsicReg_EPON_GEN_LASER_PARAM,                  MV_ASIC_ONT_GLB_ADDR + 0x0418,   0x0418,   asicRW,     0x01FFFFFF,     0,      0,     0,      0,     "Laser Params"},
+	[mvAsicReg_EPON_GEN_TAIL_GUARD]                   =  { mvAsicReg_EPON_GEN_TAIL_GUARD,                   MV_ASIC_ONT_GLB_ADDR + 0x0420,   0x0420,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Tail Guard"},
+	[mvAsicReg_EPON_GEN_SYNC_TIME]                    =  { mvAsicReg_EPON_GEN_SYNC_TIME,                    MV_ASIC_ONT_GLB_ADDR + 0x0424,   0x0424,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Sync Time"},
+	[mvAsicReg_EPON_GEN_BROADCAST_ADDR_LOW]           =  { mvAsicReg_EPON_GEN_BROADCAST_ADDR_LOW,           MV_ASIC_ONT_GLB_ADDR + 0x0428,   0x0428,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Broadcast Address Low"},
+	[mvAsicReg_EPON_GEN_BROADCAST_ADDR_HIGH]          =  { mvAsicReg_EPON_GEN_BROADCAST_ADDR_HIGH,          MV_ASIC_ONT_GLB_ADDR + 0x042C,   0x042C,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Broadcast Address High"},
+#ifdef PON_Z1
+	[mvAsicReg_EPON_GEN_CONFIGURATION]                =  { mvAsicReg_EPON_GEN_CONFIGURATION,                MV_ASIC_ONT_GLB_ADDR + 0x0430,   0x0430,   asicRW,     0x00000073,     0,      0,     0,      0,     "Gen Configuration"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_GEN_CONFIGURATION]                =  { mvAsicReg_EPON_GEN_CONFIGURATION,                MV_ASIC_ONT_GLB_ADDR + 0x0430,   0x0430,   asicRW,     0x0000FF73,     0,      0,     0,      0,     "Gen Configuration"},
+	[mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REPORT]    =  { mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REPORT,    MV_ASIC_ONT_GLB_ADDR + 0x0430,   0x0430,   asicRW,     0x00000001,     4,      0,     0,      0,     "Gen Configuration Auto Report"},
+	[mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_ACK]       =  { mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_ACK,       MV_ASIC_ONT_GLB_ADDR + 0x0430,   0x0430,   asicRW,     0x00000001,     5,      0,     0,      0,     "Gen Configuration Auto Ack"},
+	[mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REQUEST]   =  { mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REQUEST,   MV_ASIC_ONT_GLB_ADDR + 0x0430,   0x0430,   asicRW,     0x00000001,     6,      0,     0,      0,     "Gen Configuration Auto Request"},
+#endif  /* Z2,A0 or later */
+	[mvAsicReg_EPON_GEN_SLD]                          =  { mvAsicReg_EPON_GEN_SLD,                          MV_ASIC_ONT_GLB_ADDR + 0x0434,   0x0434,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Sld"},
+	[mvAsicReg_EPON_GEN_MAC_CONTROL_TYPE]             =  { mvAsicReg_EPON_GEN_MAC_CONTROL_TYPE,             MV_ASIC_ONT_GLB_ADDR + 0x0438,   0x0438,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Mac Control type"},
+	[mvAsicReg_EPON_GEN_LOCAL_TIMESTAMP]              =  { mvAsicReg_EPON_GEN_LOCAL_TIMESTAMP,              MV_ASIC_ONT_GLB_ADDR + 0x043C,   0x043C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Local TimeStamp"},
+	[mvAsicReg_EPON_GEN_NUM_OF_PENDING_GRANTS]        =  { mvAsicReg_EPON_GEN_NUM_OF_PENDING_GRANTS,        MV_ASIC_ONT_GLB_ADDR + 0x0448,   0x0448,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Num Of Pending Grants"},
+	[mvAsicReg_EPON_GEN_SGL_STATUS]                   =  { mvAsicReg_EPON_GEN_SGL_STATUS,                   MV_ASIC_ONT_GLB_ADDR + 0x044C,   0x044C,   asicRW,     0x000000FF,     0,      0,     0,      0,     "SGL Status"},
+	[mvAsicReg_EPON_GEN_PON_PHY_DEBUG]                =  { mvAsicReg_EPON_GEN_PON_PHY_DEBUG,                MV_ASIC_ONT_GLB_ADDR + 0x0450,   0x0450,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Phy Debug"},
+	[mvAsicReg_EPON_GEN_SGL_SW_RESET]                 =  { mvAsicReg_EPON_GEN_SGL_SW_RESET,                 MV_ASIC_ONT_GLB_ADDR + 0x0454,   0x0454,   asicRW,     0x00000001,     0,      0,     0,      0,     "SGL SW Reset"},
+	[mvAsicReg_EPON_GEN_SGL_CONFIG]                   =  { mvAsicReg_EPON_GEN_SGL_CONFIG,                   MV_ASIC_ONT_GLB_ADDR + 0x0458,   0x0458,   asicRW,     0x0000001F,     0,      0,     0,      0,     "SGL Config"},
+	[mvAsicReg_EPON_GEN_SGL_DEBOUNCE_CONFIG]          =  { mvAsicReg_EPON_GEN_SGL_DEBOUNCE_CONFIG,          MV_ASIC_ONT_GLB_ADDR + 0x045C,   0x045C,   asicRW,     0x0001FFFF,     0,      0,     0,      0,     "SGL Debounce Config"},
+	[mvAsicReg_EPON_GEN_SGL_DEBOUNCE_ENABLE]          =  { mvAsicReg_EPON_GEN_SGL_DEBOUNCE_ENABLE,          MV_ASIC_ONT_GLB_ADDR + 0x0460,   0x0460,   asicRW,     0x00000001,     0,      0,     0,      0,     "SGL Debounce Enable"},
+	[mvAsicReg_EPON_GEN_TCH_CHURNING_KEY]             =  { mvAsicReg_EPON_GEN_TCH_CHURNING_KEY,             MV_ASIC_ONT_GLB_ADDR + 0x0464,   0x0464,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "Churning Key random for SW"},
+	[mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE1]           =  { mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE1,           MV_ASIC_ONT_GLB_ADDR + 0x0468,   0x0468,   asicRW,     0x001FFFFF,     0,      0,     0,      0,     "Additional Opcode 01"},
+	[mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE2]           =  { mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE2,           MV_ASIC_ONT_GLB_ADDR + 0x046C,   0x046C,   asicRW,     0x001FFFFF,     0,      0,     0,      0,     "Additional Opcode 02"},
+	[mvAsicReg_EPON_GEN_DRIFT_THRESHOLD]              =  { mvAsicReg_EPON_GEN_DRIFT_THRESHOLD,              MV_ASIC_ONT_GLB_ADDR + 0x0470,   0x0470,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Drift Threshold"},
+	[mvAsicReg_EPON_GEN_TIMESTAMP_VAL_FOR_INTR]       =  { mvAsicReg_EPON_GEN_TIMESTAMP_VAL_FOR_INTR,       MV_ASIC_ONT_GLB_ADDR + 0x0474,   0x0474,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Timestamp valuer for interrupt"},
+	[mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE3]           =  { mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE3,           MV_ASIC_ONT_GLB_ADDR + 0x0478,   0x0478,   asicRW,     0x001FFFFF,     0,      0,     0,      0,     "Additional Opcode 03"},
+#ifndef PON_Z1
+	[mvAsicReg_EPON_GEN_LLID_CRC_CONFIG]              =  { mvAsicReg_EPON_GEN_LLID_CRC_CONFIG,              MV_ASIC_ONT_GLB_ADDR + 0x047C,   0x047C,   asicRW,     0x000003FF,     0,      0,     0,      0,     "LLID configuration"},
+	[mvAsicReg_EPON_GEN_TIMESTAMP_CONFIG]             =  { mvAsicReg_EPON_GEN_TIMESTAMP_CONFIG,             MV_ASIC_ONT_GLB_ADDR + 0x0480,   0x0480,   asicRW,     0x87FFC7FF,     0,      0,     0,      0,     "Timestamp configuration"},
+	[mvAsicReg_EPON_GEN_ONT_RX_TIMESTAMP_CONFIG]      =  { mvAsicReg_EPON_GEN_ONT_RX_TIMESTAMP_CONFIG,      MV_ASIC_ONT_GLB_ADDR + 0x0484,   0x0484,   asicRW,     0x00008FFF,     0,      0,     0,      0,     "ONT Rx Timestamp configuration"},
+	[mvAsicReg_EPON_GEN_ONT_REGISTER_PACKET_PADDING]  =  { mvAsicReg_EPON_GEN_ONT_REGISTER_PACKET_PADDING,  MV_ASIC_ONT_GLB_ADDR + 0x0488,   0x0488,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "ONT Register packet pading"},
+#endif  /* PON_Z1 */
+#ifdef PON_Z1
+	[mvAsicReg_EPON_GEN_MAC_ADDR_LOW]                 =  { mvAsicReg_EPON_GEN_MAC_ADDR_LOW,                 MV_ASIC_ONT_GLB_ADDR + 0x0440,   0x0440,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "MAC address low part"},
+	[mvAsicReg_EPON_GEN_MAC_ADDR_HIGH]                =  { mvAsicReg_EPON_GEN_MAC_ADDR_HIGH,                MV_ASIC_ONT_GLB_ADDR + 0x0444,   0x0444,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "MAC address high part"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_GEN_MAC_ADDR_LOW]                 =  { mvAsicReg_EPON_GEN_MAC_ADDR_LOW,                 MV_ASIC_ONT_GLB_ADDR + 0x04A0,   0x04A0,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "MAC address low part"},
+	[mvAsicReg_EPON_GEN_MAC_ADDR_HIGH]                =  { mvAsicReg_EPON_GEN_MAC_ADDR_HIGH,                MV_ASIC_ONT_GLB_ADDR + 0x04C8,   0x04C8,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "MAC address high part"},
+#endif  /* Z2,A0 or later */
+	[mvAsicReg_EPON_GEN_UTM_TC_PERIOD]                =  { mvAsicReg_EPON_GEN_UTM_TC_PERIOD,                MV_ASIC_ONT_GLB_ADDR + 0x0720,   0x0720,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "UTM TC Period"},
+	[mvAsicReg_EPON_GEN_UTM_TC_PERIOD_VALID]          =  { mvAsicReg_EPON_GEN_UTM_TC_PERIOD_VALID,          MV_ASIC_ONT_GLB_ADDR + 0x0724,   0x0724,   asicRW,     0x00000001,     0,      0,     0,      0,     "UTM TC Period valid"},
+	[mvAsicReg_EPON_GEN_GEM_IPG_VAL]                  =  { mvAsicReg_EPON_GEN_GEM_IPG_VAL,                  MV_ASIC_ONT_GLB_ADDR + 0x0728,   0x0728,   asicRW,     0x000000FF,     0,      0,     0,      0,     "IPG Value"},
+	[mvAsicReg_EPON_GEN_GEM_IPG_VAL_VALID]            =  { mvAsicReg_EPON_GEN_GEM_IPG_VAL_VALID,            MV_ASIC_ONT_GLB_ADDR + 0x072C,   0x072C,   asicRW,     0x00000001,     0,      0,     0,      0,     "IPG Value valid"},
+	[mvAsicReg_EPON_GEN_ACT_TX_BITMAP]                =  { mvAsicReg_EPON_GEN_ACT_TX_BITMAP,                MV_ASIC_ONT_GLB_ADDR + 0x0730,   0x0730,   asicRW,     0x000000FF,     0,      0,     0,      0,     "UTM Active TX Bitmap"},
+	[mvAsicReg_EPON_GEN_ACT_TX_VALID]                 =  { mvAsicReg_EPON_GEN_ACT_TX_VALID,                 MV_ASIC_ONT_GLB_ADDR + 0x0734,   0x0734,   asicRW,     0x00000001,     0,      0,     0,      0,     "UTM Active TX Valid"},
+	[mvAsicReg_EPON_GEN_TOD_INT_WIDTH]                =  { mvAsicReg_EPON_GEN_TOD_INT_WIDTH,                MV_ASIC_ONT_GLB_ADDR + 0x0738,   0x0738,   asicRW,     0x1FFFFFFF,     0,      0,     0,      0,     "Time of Day Interrupt Width and Polarity"},
+	[mvAsicReg_EPON_TXM_EXT_REPORT_STATE]             =  { mvAsicReg_EPON_TXM_EXT_REPORT_STATE,             MV_ASIC_ONT_GLB_ADDR + 0x074C,   0x074C,   asicRW,     0x00000001,     31,     0,     0,      0,     "Extend report enable"},
+	[mvAsicReg_EPON_TXM_EXT_REPORT_STATE_PER_TX]      =  { mvAsicReg_EPON_TXM_EXT_REPORT_STATE_PER_TX,      MV_ASIC_ONT_GLB_ADDR + 0x074C,   0x074C,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Extend report enable bitmap"},
+	[mvAsicReg_EPON_TXM_EXT_REPORT_MAP_0]             =  { mvAsicReg_EPON_TXM_EXT_REPORT_MAP_0,             MV_ASIC_ONT_GLB_ADDR + 0x0750,   0x0750,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Extend report mapping 0"},
+	[mvAsicReg_EPON_TXM_EXT_REPORT_MAP_1]             =  { mvAsicReg_EPON_TXM_EXT_REPORT_MAP_1,             MV_ASIC_ONT_GLB_ADDR + 0x0754,   0x0754,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Extend report mapping 1"},
+
+	/* =========================== */
+	/*  EPON RXP Registers         */
+	/* =========================== */
+	[mvAsicReg_EPON_RXP_PACKET_SIZE_LIMIT]            =  { mvAsicReg_EPON_RXP_PACKET_SIZE_LIMIT,            MV_ASIC_ONT_GLB_ADDR + 0x0810,   0x0810,   asicRW,     0x0FFF0FFF,     0,      0,     0,      0,     "Rxp packet limit size"},
+#ifdef PON_Z1
+	[mvAsicReg_EPON_RXP_PACKET_FILTER]                =  { mvAsicReg_EPON_RXP_PACKET_FILTER,                MV_ASIC_ONT_GLB_ADDR + 0x0814,   0x0814,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Rxp packet filter"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_RXP_PACKET_FILTER]                =  { mvAsicReg_EPON_RXP_PACKET_FILTER,                MV_ASIC_ONT_GLB_ADDR + 0x0814,   0x0814,   asicRW,     0x000001FF,     0,      0,     0,      0,     "Rxp packet filter"},
+#endif /* Z2,A0 or later */
+	[mvAsicReg_EPON_RXP_CTRL_FRAME_FORWARD]           =  { mvAsicReg_EPON_RXP_CTRL_FRAME_FORWARD,           MV_ASIC_ONT_GLB_ADDR + 0x0818,   0x0818,   asicRW,     0x0000003F,     0,      0,     0,      0,     "Rxp ctrl frame forward"},
+	[mvAsicReg_EPON_RXP_LLT_LLID_DATA]                =  { mvAsicReg_EPON_RXP_LLT_LLID_DATA,                MV_ASIC_ONT_GLB_ADDR + 0x081C,   0x081C,   asicRW,     0x000FFFFF,     0,     10,     1,      0,     "Rxp LLID data"},
+	[mvAsicReg_EPON_RXP_LLT_LLID_DATA_VALUE]          =  { mvAsicReg_EPON_RXP_LLT_LLID_DATA_VALUE,          MV_ASIC_ONT_GLB_ADDR + 0x081C,   0x081C,   asicRW,     0x00007FFF,     0,     10,     1,      0,     "Rxp LLID data value"},
+	[mvAsicReg_EPON_RXP_LLT_LLID_DATA_INDEX]          =  { mvAsicReg_EPON_RXP_LLT_LLID_DATA_INDEX,          MV_ASIC_ONT_GLB_ADDR + 0x081C,   0x081C,   asicRW,     0x0000000F,    15,     10,     1,      0,     "Rxp LLID data index"},
+	[mvAsicReg_EPON_RXP_LLT_LLID_DATA_VALID]          =  { mvAsicReg_EPON_RXP_LLT_LLID_DATA_VALID,          MV_ASIC_ONT_GLB_ADDR + 0x081C,   0x081C,   asicRW,     0x00000001,    19,     10,     1,      0,     "Rxp LLID data valid"},
+	[mvAsicReg_EPON_RXP_ENCRYPTION_CONFIG]            =  { mvAsicReg_EPON_RXP_ENCRYPTION_CONFIG,            MV_ASIC_ONT_GLB_ADDR + 0x0844,   0x0844,   asicRW,     0x00000031,     0,      0,     0,      0,     "Rxp Enctyption Config"},
+#ifdef PON_Z1
+	[mvAsicReg_EPON_RXP_ENCRYPTION_KEY0]              =  { mvAsicReg_EPON_RXP_ENCRYPTION_KEY0,              MV_ASIC_ONT_GLB_ADDR + 0x0848,   0x0848,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "Rxp Enctyption Key 0"},
+	[mvAsicReg_EPON_RXP_ENCRYPTION_KEY1]              =  { mvAsicReg_EPON_RXP_ENCRYPTION_KEY1,              MV_ASIC_ONT_GLB_ADDR + 0x084C,   0x084C,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "Rxp Enctyption Key 1"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_RXP_ENCRYPTION_KEY0]              =  { mvAsicReg_EPON_RXP_ENCRYPTION_KEY0,              MV_ASIC_ONT_GLB_ADDR + 0x0850,   0x0850,   asicRW,     0x00FFFFFF,     0,      8,     1,      0,     "Rxp Enctyption Key 0"},
+	[mvAsicReg_EPON_RXP_ENCRYPTION_KEY1]              =  { mvAsicReg_EPON_RXP_ENCRYPTION_KEY1,              MV_ASIC_ONT_GLB_ADDR + 0x0878,   0x0878,   asicRW,     0x00FFFFFF,     0,      8,     1,      0,     "Rxp Enctyption Key 1"},
+#endif  /* Z2,A0 or later */
+	[mvAsicReg_EPON_RXP_DATA_FIFO_THRESH]             =  { mvAsicReg_EPON_RXP_DATA_FIFO_THRESH,             MV_ASIC_ONT_GLB_ADDR + 0x08C0,   0x08C0,   asicRW,     0x00000FFF,     0,      8,     1,      0,     "Rxp FIFO Threshold"},
+
+	/* =========================== */
+	/*  EPON GPM Registers         */
+	/* =========================== */
+	[mvAsicReg_EPON_GPM_MAX_FUTURE_GRANT_TIME]        =  { mvAsicReg_EPON_GPM_MAX_FUTURE_GRANT_TIME,        MV_ASIC_ONT_GLB_ADDR + 0x0C10,   0x0C10,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Max future grant time"},
+#ifdef PON_Z1
+	[mvAsicReg_EPON_GPM_MIN_PROCESSING_TIME]          =  { mvAsicReg_EPON_GPM_MIN_PROCESSING_TIME,          MV_ASIC_ONT_GLB_ADDR + 0x0C14,   0x0C14,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Min processing time"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_GPM_MIN_PROCESSING_TIME]          =  { mvAsicReg_EPON_GPM_MIN_PROCESSING_TIME,          MV_ASIC_ONT_GLB_ADDR + 0x0C14,   0x0C14,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "Min processing time"},
+#endif /* Z2,A0 or later */
+	[mvAsicReg_EPON_GPM_DISCOVERY_GRANT_LENGTH]       =  { mvAsicReg_EPON_GPM_DISCOVERY_GRANT_LENGTH,       MV_ASIC_ONT_GLB_ADDR + 0x0C18,   0x0C18,   asicRW,     0x0FFFFFFF,     0,      0,     0,      0,     "Discovery grant length"},
+	[mvAsicReg_EPON_GPM_RX_SYNC_TIME]                 =  { mvAsicReg_EPON_GPM_RX_SYNC_TIME,                 MV_ASIC_ONT_GLB_ADDR + 0x0C1C,   0x0C1C,   asicRW,     0x0001FFFF,     0,      0,     0,      0,     "Rx sync time"},
+	[mvAsicReg_EPON_GPM_GRANT_VALID]                  =  { mvAsicReg_EPON_GPM_GRANT_VALID,                  MV_ASIC_ONT_GLB_ADDR + 0x0C50,   0x0C50,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Grant valid counter"},
+	[mvAsicReg_EPON_GPM_GRANT_MAX_FUTURE_TIME_ERR]    =  { mvAsicReg_EPON_GPM_GRANT_MAX_FUTURE_TIME_ERR,    MV_ASIC_ONT_GLB_ADDR + 0x0C70,   0x0C70,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Grant max future time error counter"},
+	[mvAsicReg_EPON_GPM_MIN_PROC_TIME_ERR]            =  { mvAsicReg_EPON_GPM_MIN_PROC_TIME_ERR,            MV_ASIC_ONT_GLB_ADDR + 0x0C90,   0x0C90,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Min proc time error counter"},
+	[mvAsicReg_EPON_GPM_LENGTH_ERR]                   =  { mvAsicReg_EPON_GPM_LENGTH_ERR,                   MV_ASIC_ONT_GLB_ADDR + 0x0CB0,   0x0CB0,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Length error counter"},
+	[mvAsicReg_EPON_GPM_DISCOVERY_AND_REGISTERED_ERR] =  { mvAsicReg_EPON_GPM_DISCOVERY_AND_REGISTERED_ERR, MV_ASIC_ONT_GLB_ADDR + 0x0CD0,   0x0CD0,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Discovery and register error counter"},
+	[mvAsicReg_EPON_GPM_FIFO_FULL_ERR]                =  { mvAsicReg_EPON_GPM_FIFO_FULL_ERR,                MV_ASIC_ONT_GLB_ADDR + 0x0CF0,   0x0CF0,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Fifo full error counter"},
+	[mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_BCAST]       =  { mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_BCAST,       MV_ASIC_ONT_GLB_ADDR + 0x0D10,   0x0D10,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "OPC discard not register broadcast counter"},
+	[mvAsicReg_EPON_GPM_OPC_REG_NOT_DISC]             =  { mvAsicReg_EPON_GPM_OPC_REG_NOT_DISC,             MV_ASIC_ONT_GLB_ADDR + 0x0D30,   0x0D30,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "OPC register not broadcast counter"},
+	[mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_NOT_BCAST]   =  { mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_NOT_BCAST,   MV_ASIC_ONT_GLB_ADDR + 0x0D50,   0x0D50,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "OPC discard not register not broadcast counter"},
+	[mvAsicReg_EPON_GPM_OPC_DROPED_GRANT]             =  { mvAsicReg_EPON_GPM_OPC_DROPED_GRANT,             MV_ASIC_ONT_GLB_ADDR + 0x0D70,   0x0D70,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "OPC dropped grant counter"},
+	[mvAsicReg_EPON_GPM_OPC_HIDDEN_GRANT]             =  { mvAsicReg_EPON_GPM_OPC_HIDDEN_GRANT,             MV_ASIC_ONT_GLB_ADDR + 0x0D90,   0x0D90,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "OPC hidden grant counter"},
+	[mvAsicReg_EPON_GPM_OPC_BACK_TO_BACK_GRANT]       =  { mvAsicReg_EPON_GPM_OPC_BACK_TO_BACK_GRANT,       MV_ASIC_ONT_GLB_ADDR + 0x0DB0,   0x0DB0,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "OPC back to back grant counter"},
+
+	/* =========================== */
+	/*  EPON TXM Registers         */
+	/* =========================== */
+#ifdef PON_Z1
+	[mvAsicReg_EPON_TXM_DEFAULT_OVERHEAD]             =  { mvAsicReg_EPON_TXM_DEFAULT_OVERHEAD,             MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0x000000FF,     0,      0,     0,      0,     "Default overhead"},
+	[mvAsicReg_EPON_TXM_CONFIGURATION]                =  { mvAsicReg_EPON_TXM_CONFIGURATION,                MV_ASIC_ONT_GLB_ADDR + 0x1018,   0x1018,   asicRW,     0x00000007,     0,      0,     0,      0,     "Tx Configuration"},
+	[mvAsicReg_EPON_TXM_TX_LLID]                      =  { mvAsicReg_EPON_TXM_TX_LLID,                      MV_ASIC_ONT_GLB_ADDR + 0x1014,   0x1014,   asicRW,     0x00007FFF,     0,      0,     0,      0,     "Tx LLID"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_TXM_DEFAULT_OVERHEAD]             =  { mvAsicReg_EPON_TXM_DEFAULT_OVERHEAD,             MV_ASIC_ONT_GLB_ADDR + 0x1010,   0x1010,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Default overhead"},
+	[mvAsicReg_EPON_TXM_CONFIGURATION]                =  { mvAsicReg_EPON_TXM_CONFIGURATION,                MV_ASIC_ONT_GLB_ADDR + 0x1018,   0x1018,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Tx Configuration"},
+	[mvAsicReg_EPON_TXM_POWER_UP]                     =  { mvAsicReg_EPON_TXM_POWER_UP,                     MV_ASIC_ONT_GLB_ADDR + 0x1020,   0x1020,   asicRW,     0x00001FFF,     0,      0,     0,      0,     "Tx MUX Power UP"},
+	[mvAsicReg_EPON_TXM_TX_LLID]                      =  { mvAsicReg_EPON_TXM_TX_LLID,                      MV_ASIC_ONT_GLB_ADDR + 0x1050,   0x1050,   asicRW,     0x00007FFF,     0,      8,     1,      0,     "Tx LLID"},
+#endif  /* Z2,A0 or later */
+#ifdef PON_Z1
+	[mvAsicReg_EPON_TXM_CPP_RPRT_CONFIG]              =  { mvAsicReg_EPON_TXM_CPP_RPRT_CONFIG,              MV_ASIC_ONT_GLB_ADDR + 0x1078,   0x1078,   asicRW,     0x000003FF,     0,      8,     1,      0,     "Cpp report configuration"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_BIT_MAP]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_BIT_MAP,             MV_ASIC_ONT_GLB_ADDR + 0x1098,   0x1098,   asicRW,     0x000000FF,     0,      8,     1,      0,     "Cpp report bit map"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_SET]           =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_SET,           MV_ASIC_ONT_GLB_ADDR + 0x10B8,   0x10B8,   asicRW,     0x0000003F,     0,      8,     1,      0,     "Cpp report queue sets"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_0]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_0,             MV_ASIC_ONT_GLB_ADDR + 0x10D8,   0x10D8,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue0"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_1]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_1,             MV_ASIC_ONT_GLB_ADDR + 0x10F8,   0x10F8,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue1"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_2]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_2,             MV_ASIC_ONT_GLB_ADDR + 0x1118,   0x1118,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue2"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_3]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_3,             MV_ASIC_ONT_GLB_ADDR + 0x1138,   0x1138,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue3"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_4]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_4,             MV_ASIC_ONT_GLB_ADDR + 0x1158,   0x1158,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue4"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_5]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_5,             MV_ASIC_ONT_GLB_ADDR + 0x1178,   0x1178,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue5"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_6]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_6,             MV_ASIC_ONT_GLB_ADDR + 0x1198,   0x1198,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue6"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_7]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_7,             MV_ASIC_ONT_GLB_ADDR + 0x11B8,   0x11B8,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report queue7"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_FEC_CONFIG]          =  { mvAsicReg_EPON_TXM_CPP_RPRT_FEC_CONFIG,          MV_ASIC_ONT_GLB_ADDR + 0x11DC,   0x11DC,   asicRW,     0x00FFFFFF,     0,      8,     1,      0,     "Cpp report fec config"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_TXM_CPP_RPRT_CONFIG]              =  { mvAsicReg_EPON_TXM_CPP_RPRT_CONFIG,              MV_ASIC_ONT_GLB_ADDR + 0x1078,   0x1078,   asicRW,     0x03FD03FF,     0,      8,     1,      0,     "Cpp report configuration"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_BIT_MAP]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_BIT_MAP,             MV_ASIC_ONT_GLB_ADDR + 0x1098,   0x1098,   asicRW,     0x0000FFFF,     0,      8,     1,      0,     "Cpp report bit map"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_SET]           =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_SET,           MV_ASIC_ONT_GLB_ADDR + 0x10B8,   0x10B8,   asicRW,     0x0000003F,     0,      8,     1,      0,     "Cpp report queue sets"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_0]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_0,             MV_ASIC_ONT_GLB_ADDR + 0x10D8,   0x10D8,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue0"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_1]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_1,             MV_ASIC_ONT_GLB_ADDR + 0x10F8,   0x10F8,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue1"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_2]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_2,             MV_ASIC_ONT_GLB_ADDR + 0x1118,   0x1118,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue2"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_3]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_3,             MV_ASIC_ONT_GLB_ADDR + 0x1138,   0x1138,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue3"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_4]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_4,             MV_ASIC_ONT_GLB_ADDR + 0x1158,   0x1158,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue4"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_5]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_5,             MV_ASIC_ONT_GLB_ADDR + 0x1178,   0x1178,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue5"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_6]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_6,             MV_ASIC_ONT_GLB_ADDR + 0x1198,   0x1198,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue6"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_7]             =  { mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_7,             MV_ASIC_ONT_GLB_ADDR + 0x11B8,   0x11B8,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "Cpp report queue7"},
+	[mvAsicReg_EPON_TXM_CPP_RPRT_FEC_CONFIG]          =  { mvAsicReg_EPON_TXM_CPP_RPRT_FEC_CONFIG,          MV_ASIC_ONT_GLB_ADDR + 0x11DC,   0x11DC,   asicRW,     0x00FFFFFF,     0,      8,     1,      0,     "Cpp report fec config"},
+#endif  /* Z2,A0 or later */
+
+	[mvAsicReg_EPON_TXM_CPP_RPM_REPORT_CONFIG]        =  { mvAsicReg_EPON_TXM_CPP_RPM_REPORT_CONFIG,        MV_ASIC_ONT_GLB_ADDR + 0x11E0,   0x11E0,   asicRW,     0x0000000F,     0,      0,     0,      0,     "RPM Report config"},
+	[mvAsicReg_EPON_TXM_CPP_RPM_CTRL_FIFO_DBA]        =  { mvAsicReg_EPON_TXM_CPP_RPM_CTRL_FIFO_DBA,        MV_ASIC_ONT_GLB_ADDR + 0x11E0,   0x11E0,   asicRW,     0x00000FFF,     4,      0,     0,      0,     "RPM contrl FIFO DBA config"},
+	[mvAsicReg_EPON_TXM_CPP_RPM_ADX_REPORT_TBL]       =  { mvAsicReg_EPON_TXM_CPP_RPM_ADX_REPORT_TBL,       MV_ASIC_ONT_GLB_ADDR + 0x11E4,   0x11E4,   asicRW,     0x003F00FF,     0,      0,     0,      0,     "RPM Index Report Table"},
+	[mvAsicReg_EPON_TXM_CTRL_FIFO_FLUSH]              =  { mvAsicReg_EPON_TXM_CTRL_FIFO_FLUSH,              MV_ASIC_ONT_GLB_ADDR + 0x11F0,   0x11F0,   asicRW,     0x000000FF,     0,      0,     0,      0,     "TX control FIFO flush"},
+	[mvAsicReg_EPON_TXM_HIGH_PRI_TX_STATE_BITMAP]     =  { mvAsicReg_EPON_TXM_HIGH_PRI_TX_STATE_BITMAP,     MV_ASIC_ONT_GLB_ADDR + 0x11F4,   0x11F4,   asicRW,     0x000000FF,     0,      0,     0,      0,     "High priority TX valid bitmap"},
+	[mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_0]            =  { mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_0,            MV_ASIC_ONT_GLB_ADDR + 0x11F8,   0x11F8,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "High priority TX map 0"},
+	[mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_1]            =  { mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_1,            MV_ASIC_ONT_GLB_ADDR + 0x11FC,   0x11FC,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "High priority TX map 1"},
+
+	/* =========================== */
+	/*  EPON PCS Registers         */
+	/* =========================== */
+	[mvAsicReg_EPON_PCS_CONFIGURATION]                =  { mvAsicReg_EPON_PCS_CONFIGURATION,                MV_ASIC_ONT_GLB_ADDR + 0x1414,   0x1414,   asicRW,     0x00000033,     0,      0,     0,      0,     "PCS configuration"},
+	[mvAsicReg_EPON_PCS_CONFIGURATION_RX_ENABLE]      =  { mvAsicReg_EPON_PCS_CONFIGURATION_RX_ENABLE,      MV_ASIC_ONT_GLB_ADDR + 0x1414,   0x1414,   asicRW,     0x00000001,     0,      0,     0,      0,     "PCS configuration Rx enable"},
+	[mvAsicReg_EPON_PCS_CONFIGURATION_TX_ENABLE]      =  { mvAsicReg_EPON_PCS_CONFIGURATION_TX_ENABLE,      MV_ASIC_ONT_GLB_ADDR + 0x1414,   0x1414,   asicRW,     0x00000001,     4,      0,     0,      0,     "PCS configuration Tx enable"},
+	[mvAsicReg_EPON_PCS_DELAY_CONFIG]                 =  { mvAsicReg_EPON_PCS_DELAY_CONFIG,                 MV_ASIC_ONT_GLB_ADDR + 0x1418,   0x1418,   asicRW,     0x00001FFF,     0,      0,     0,      0,     "PCS delay config"},
+	[mvAsicReg_EPON_PCS_STATS_FEC_0]                  =  { mvAsicReg_EPON_PCS_STATS_FEC_0,                  MV_ASIC_ONT_GLB_ADDR + 0x141C,   0x141C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "PCS stats Fec 0"},
+	[mvAsicReg_EPON_PCS_STATS_FEC_1]                  =  { mvAsicReg_EPON_PCS_STATS_FEC_1,                  MV_ASIC_ONT_GLB_ADDR + 0x1420,   0x1420,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "PCS stats Fec 1"},
+	[mvAsicReg_EPON_PCS_STATS_FEC_2]                  =  { mvAsicReg_EPON_PCS_STATS_FEC_2,                  MV_ASIC_ONT_GLB_ADDR + 0x1424,   0x1424,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "PCS stats Fec 2"},
+	[mvAsicReg_EPON_PCS_STATS_0]                      =  { mvAsicReg_EPON_PCS_STATS_0,                      MV_ASIC_ONT_GLB_ADDR + 0x1428,   0x1428,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "PCS stats 0"},
+	[mvAsicReg_EPON_PCS_STATS_1]                      =  { mvAsicReg_EPON_PCS_STATS_1,                      MV_ASIC_ONT_GLB_ADDR + 0x142C,   0x142C,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "PCS stats 1"},
+	[mvAsicReg_EPON_PCS_STATS_2]                      =  { mvAsicReg_EPON_PCS_STATS_2,                      MV_ASIC_ONT_GLB_ADDR + 0x1430,   0x1430,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "PCS stats 2"},
+	[mvAsicReg_EPON_PCS_STATS_3]                      =  { mvAsicReg_EPON_PCS_STATS_3,                      MV_ASIC_ONT_GLB_ADDR + 0x1434,   0x1434,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "PCS stats 3"},
+	[mvAsicReg_EPON_PCS_STATS_4]                      =  { mvAsicReg_EPON_PCS_STATS_4,                      MV_ASIC_ONT_GLB_ADDR + 0x1438,   0x1438,   asicRO,     0xFFFFFFFF,     0,      0,     0,      0,     "PCS stats 4"},
+	[mvAsicReg_EPON_PCS_FRAME_SZ_LIMITS]              =  { mvAsicReg_EPON_PCS_FRAME_SZ_LIMITS,              MV_ASIC_ONT_GLB_ADDR + 0x143C,   0x143C,   asicRW,     0x1FFF0FFF,     0,      0,     0,      0,     "PCS Frame Size Limits"},
+
+	/* =========================== */
+	/*  EPON DDM Registers         */
+	/* =========================== */
+	[mvAsicReg_EPON_DDM_DELAY_CONFIG]                 =  { mvAsicReg_EPON_DDM_DELAY_CONFIG,                 MV_ASIC_ONT_GLB_ADDR + 0x1814,   0x1814,   asicRW,     0x0000FFFF,     0,      0,     0,      0,     "DDM delay config"},
+	[mvAsicReg_EPON_DDM_TX_POLARITY]                  =  { mvAsicReg_EPON_DDM_TX_POLARITY,                  MV_ASIC_ONT_GLB_ADDR + 0x1818,   0x1818,   asicRW,     0x0000003F,     0,      0,     0,      0,     "DDM tx ploarity"},
+#ifdef PON_Z1
+	[mvAsicReg_EPON_STAT_RXP_FCS_ERROR_CNT]           =  { mvAsicReg_EPON_STAT_RXP_FCS_ERROR_CNT,           MV_ASIC_ONT_GLB_ADDR + 0x1828,   0x1828,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP fcs error counter"},
+	[mvAsicReg_EPON_STAT_RXP_SHORT_ERROR_CNT]         =  { mvAsicReg_EPON_STAT_RXP_SHORT_ERROR_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x182c,   0x182c,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP short error counter"},
+	[mvAsicReg_EPON_STAT_RXP_LONG_ERROR_CNT]          =  { mvAsicReg_EPON_STAT_RXP_LONG_ERROR_CNT,          MV_ASIC_ONT_GLB_ADDR + 0x1830,   0x1830,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP long error counter"},
+	[mvAsicReg_EPON_STAT_RXP_DATA_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_RXP_DATA_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x1834,   0x1834,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP data frame counter"},
+	[mvAsicReg_EPON_STAT_RXP_CTRL_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_RXP_CTRL_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x1838,   0x1838,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP ctrl frame counter"},
+	[mvAsicReg_EPON_STAT_RXP_REPORT_FRAMES_CNT]       =  { mvAsicReg_EPON_STAT_RXP_REPORT_FRAMES_CNT,       MV_ASIC_ONT_GLB_ADDR + 0x183C,   0x183C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP report frame counter"},
+	[mvAsicReg_EPON_STAT_RXP_GATE_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_RXP_GATE_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x1840,   0x1840,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP gate frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_CTRL_REG_REQ_FRAMES_CNT] =  { mvAsicReg_EPON_STAT_TXP_CTRL_REG_REQ_FRAMES_CNT, MV_ASIC_ONT_GLB_ADDR + 0x1844,   0x1844,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "TXP ctrl register req frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_CTRL_REG_ACK_FRAMES_CNT] =  { mvAsicReg_EPON_STAT_TXP_CTRL_REG_ACK_FRAMES_CNT, MV_ASIC_ONT_GLB_ADDR + 0x1848,   0x1848,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "TXP ctrl register ack frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_CTRL_REPORT_FRAMES_CNT]  =  { mvAsicReg_EPON_STAT_TXP_CTRL_REPORT_FRAMES_CNT,  MV_ASIC_ONT_GLB_ADDR + 0x184C,   0x184C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "TXP ctrl report frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_DATA_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_TXP_DATA_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x1850,   0x1850,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "TXP data frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_TX_ALLOWED_BYTE_CNT]     =  { mvAsicReg_EPON_STAT_TXP_TX_ALLOWED_BYTE_CNT,     MV_ASIC_ONT_GLB_ADDR + 0x1854,   0x1854,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "TXP tx allowed byte counter"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_STAT_RXP_FCS_ERROR_CNT]           =  { mvAsicReg_EPON_STAT_RXP_FCS_ERROR_CNT,           MV_ASIC_ONT_GLB_ADDR + 0x1828,   0x1828,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP fcs error counter"},
+	[mvAsicReg_EPON_STAT_RXP_SHORT_ERROR_CNT]         =  { mvAsicReg_EPON_STAT_RXP_SHORT_ERROR_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x1848,   0x1848,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP short error counter"},
+	[mvAsicReg_EPON_STAT_RXP_LONG_ERROR_CNT]          =  { mvAsicReg_EPON_STAT_RXP_LONG_ERROR_CNT,          MV_ASIC_ONT_GLB_ADDR + 0x1868,   0x1868,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP long error counter"},
+	[mvAsicReg_EPON_STAT_RXP_DATA_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_RXP_DATA_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x1888,   0x1888,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP data frame counter"},
+	[mvAsicReg_EPON_STAT_RXP_CTRL_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_RXP_CTRL_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x18A8,   0x18A8,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP ctrl frame counter"},
+	[mvAsicReg_EPON_STAT_RXP_REPORT_FRAMES_CNT]       =  { mvAsicReg_EPON_STAT_RXP_REPORT_FRAMES_CNT,       MV_ASIC_ONT_GLB_ADDR + 0x18C8,   0x18C8,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP report frame counter"},
+	[mvAsicReg_EPON_STAT_RXP_GATE_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_RXP_GATE_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x18E8,   0x18E8,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "RXP gate frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_CTRL_REG_REQ_FRAMES_CNT] =  { mvAsicReg_EPON_STAT_TXP_CTRL_REG_REQ_FRAMES_CNT, MV_ASIC_ONT_GLB_ADDR + 0x1908,   0x1908,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "TXP ctrl register req frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_CTRL_REG_ACK_FRAMES_CNT] =  { mvAsicReg_EPON_STAT_TXP_CTRL_REG_ACK_FRAMES_CNT, MV_ASIC_ONT_GLB_ADDR + 0x1928,   0x1928,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "TXP ctrl register ack frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_CTRL_REPORT_FRAMES_CNT]  =  { mvAsicReg_EPON_STAT_TXP_CTRL_REPORT_FRAMES_CNT,  MV_ASIC_ONT_GLB_ADDR + 0x1948,   0x1948,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "TXP ctrl report frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_DATA_FRAMES_CNT]         =  { mvAsicReg_EPON_STAT_TXP_DATA_FRAMES_CNT,         MV_ASIC_ONT_GLB_ADDR + 0x1968,   0x1968,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "TXP data frame counter"},
+	[mvAsicReg_EPON_STAT_TXP_TX_ALLOWED_BYTE_CNT]     =  { mvAsicReg_EPON_STAT_TXP_TX_ALLOWED_BYTE_CNT,     MV_ASIC_ONT_GLB_ADDR + 0x1988,   0x1988,   asicRW,     0xFFFFFFFF,     0,      8,     1,      0,     "TXP tx allowed byte counter"},
+#endif  /* Z2,A0 or later */
+
+	/* ===================================== */
+	/*  EPON Control Packet queue Registers  */
+	/* ===================================== */
+	[mvAsicReg_EPON_CPQ_RX_CTRL_Q_READ]               =  { mvAsicReg_EPON_CPQ_RX_CTRL_Q_READ,               MV_ASIC_ONT_GLB_ADDR + 0x1C10,   0x1C10,   asicRW,     0x000000FF,     0,      0,     0,      0,     "CPQ rx ctrl queue read"},
+	[mvAsicReg_EPON_CPQ_RX_CTRL_Q_USED]               =  { mvAsicReg_EPON_CPQ_RX_CTRL_Q_USED,               MV_ASIC_ONT_GLB_ADDR + 0x1C14,   0x1C14,   asicRW,     0x000007FF,     0,      0,     0,      0,     "CPQ rx ctrl queue used"},
+	[mvAsicReg_EPON_CPQ_RX_RPRT_Q_READ]               =  { mvAsicReg_EPON_CPQ_RX_RPRT_Q_READ,               MV_ASIC_ONT_GLB_ADDR + 0x1C18,   0x1C18,   asicRW,     0x000000FF,     0,      0,     0,      0,     "CPQ rx report queue read"},
+	[mvAsicReg_EPON_CPQ_RX_RPRT_Q_USED]               =  { mvAsicReg_EPON_CPQ_RX_RPRT_Q_USED,               MV_ASIC_ONT_GLB_ADDR + 0x1C1C,   0x1C1C,   asicRW,     0x000007FF,     0,      0,     0,      0,     "CPQ rx report queue used"},
+	[mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_L]            =  { mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_L,            MV_ASIC_ONT_GLB_ADDR + 0x1C20,   0x1C20,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "CPQ rx ctrl header queue read L"},
+	[mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_H]            =  { mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_H,            MV_ASIC_ONT_GLB_ADDR + 0x1C24,   0x1C24,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "CPQ rx ctrl header queue read H"},
+	[mvAsicReg_EPON_CPQ_RX_CTRL_HQ_USED]              =  { mvAsicReg_EPON_CPQ_RX_CTRL_HQ_USED,              MV_ASIC_ONT_GLB_ADDR + 0x1C28,   0x1C28,   asicRW,     0x0000001F,     0,      0,     0,      0,     "CPQ rx ctrl header queue read used"},
+	[mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_L]            =  { mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_L,            MV_ASIC_ONT_GLB_ADDR + 0x1C2C,   0x1C2C,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "CPQ rx report header queue read L"},
+	[mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_H]            =  { mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_H,            MV_ASIC_ONT_GLB_ADDR + 0x1C30,   0x1C30,   asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "CPQ rx report header queue read H"},
+	[mvAsicReg_EPON_CPQ_RX_RPRT_HQ_USED]              =  { mvAsicReg_EPON_CPQ_RX_RPRT_HQ_USED,              MV_ASIC_ONT_GLB_ADDR + 0x1C34,   0x1C34,   asicRW,     0x0000001F,     0,      0,     0,      0,     "CPQ rx report header queue read used"},
+#ifdef PON_Z1
+	[mvAsicReg_EPON_CPQ_TX_CTRL_Q_WRITE]              =  { mvAsicReg_EPON_CPQ_TX_CTRL_Q_WRITE,              MV_ASIC_ONT_GLB_ADDR + 0x1C38,   0x1C38,   asicRW,     0x000000FF,     0,      0,     0,      0,     "CPQ tx ctrl queue write"},
+	[mvAsicReg_EPON_CPQ_TX_CTRL_Q_FREE]               =  { mvAsicReg_EPON_CPQ_TX_CTRL_Q_FREE,               MV_ASIC_ONT_GLB_ADDR + 0x1C3C,   0x1C3C,   asicRW,     0x000001FF,     0,      0,     0,      0,     "CPQ tx ctrl queue free"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_CPQ_TX_CTRL_Q_WRITE]              =  { mvAsicReg_EPON_CPQ_TX_CTRL_Q_WRITE,              MV_ASIC_ONT_GLB_ADDR + 0x1C78,   0x1C78,   asicRW,     0x000000FF,     0,      8,     1,      0,     "CPQ tx ctrl queue write"},
+	[mvAsicReg_EPON_CPQ_TX_CTRL_Q_FREE]               =  { mvAsicReg_EPON_CPQ_TX_CTRL_Q_FREE,               MV_ASIC_ONT_GLB_ADDR + 0x1C98,   0x1C98,   asicRW,     0x00000FFF,     0,      8,     1,      0,     "CPQ tx ctrl queue free"},
+#endif  /* Z2,A0 or later */
+#ifdef PON_Z1
+	[mvAsicReg_EPON_CPQ_TX_CTRL_HQ_WRITE]             =  { mvAsicReg_EPON_CPQ_TX_CTRL_HQ_WRITE,             MV_ASIC_ONT_GLB_ADDR + 0x1C48,   0x1C48,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "CPQ tx ctrl header queue write"},
+	[mvAsicReg_EPON_CPQ_TX_CTRL_HQ_FREE]              =  { mvAsicReg_EPON_CPQ_TX_CTRL_HQ_FREE,              MV_ASIC_ONT_GLB_ADDR + 0x1C4C,   0x1C4C,   asicRW,     0x00FFFFFF,     0,      0,     0,      0,     "CPQ tx ctrl header queue free"},
+#else   /* Z2,A0 or later */
+	[mvAsicReg_EPON_CPQ_TX_CTRL_HQ_WRITE]             =  { mvAsicReg_EPON_CPQ_TX_CTRL_HQ_WRITE,             MV_ASIC_ONT_GLB_ADDR + 0x1CB8,   0x1CB8,   asicRW,     0x00FFFFFF,     0,      8,     1,      0,     "CPQ tx ctrl header queue write"},
+	[mvAsicReg_EPON_CPQ_TX_CTRL_HQ_FREE]              =  { mvAsicReg_EPON_CPQ_TX_CTRL_HQ_FREE,              MV_ASIC_ONT_GLB_ADDR + 0x1CD8,   0x1CD8,   asicRW,     0x00FFFFFF,     0,      8,     1,      0,     "CPQ tx ctrl header queue free"},
+#endif  /* Z2,A0 or later */
+
+	/* =========================== */
+	/*  P2P Registers              */
+	/* =========================== */
+	[mvAsicReg_P2P_GEN_ONT_MODE]                      =  { mvAsicReg_P2P_GEN_ONT_MODE,                      MV_ASIC_ONT_GLB_ADDR + 0x040C,   0x040C,   asicRW,     0x00000001,    31,      0,     0,      0,     "ONU mode"},
+	[mvAsicReg_P2P_PCS_CONFIGURATION]                 =  { mvAsicReg_P2P_PCS_CONFIGURATION,                 MV_ASIC_ONT_GLB_ADDR + 0x1414,   0x1414,   asicRW,     0x00000613,    16,      0,     0,      0,     "P2P PCS configuration"},
+	[mvAsicReg_P2P_TXM_CFG_MODE]                      =  { mvAsicReg_P2P_TXM_CFG_MODE,                      MV_ASIC_ONT_GLB_ADDR + 0x1018,   0x1018,   asicRW,     0x00000003,     3,      0,     0,      0,     "Tx Configuration mode"},
+
+#ifndef PON_FPGA
+#ifdef DISABLE_DG_FOR_AVANTA_LP
+	[mvAsicReg_PON_MPP_00]                            =  { mvAsicReg_PON_MPP_00,                            0x18000,                         0x18000,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 00"},
+	[mvAsicReg_PON_MPP_01]                            =  { mvAsicReg_PON_MPP_01,                            0x18000,                         0x18000,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 01"},
+	[mvAsicReg_PON_MPP_02]                            =  { mvAsicReg_PON_MPP_02,                            0x18000,                         0x18000,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 02"},
+	[mvAsicReg_PON_MPP_03]                            =  { mvAsicReg_PON_MPP_03,                            0x18000,                         0x18000,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 03"},
+	[mvAsicReg_PON_MPP_04]                            =  { mvAsicReg_PON_MPP_04,                            0x18000,                         0x18000,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 04"},
+	[mvAsicReg_PON_MPP_05]                            =  { mvAsicReg_PON_MPP_05,                            0x18000,                         0x18000,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 05"},
+	[mvAsicReg_PON_MPP_06]                            =  { mvAsicReg_PON_MPP_06,                            0x18000,                         0x18000,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 06"},
+	[mvAsicReg_PON_MPP_07]                            =  { mvAsicReg_PON_MPP_07,                            0x18000,                         0x18000,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 07"},
+	[mvAsicReg_PON_MPP_08]                            =  { mvAsicReg_PON_MPP_08,                            0x18004,                         0x18004,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 08"},
+	[mvAsicReg_PON_MPP_09]                            =  { mvAsicReg_PON_MPP_09,                            0x18004,                         0x18004,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 09"},
+	[mvAsicReg_PON_MPP_10]                            =  { mvAsicReg_PON_MPP_10,                            0x18004,                         0x18004,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 10"},
+	[mvAsicReg_PON_MPP_11]                            =  { mvAsicReg_PON_MPP_11,                            0x18004,                         0x18004,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 11"},
+	[mvAsicReg_PON_MPP_12]                            =  { mvAsicReg_PON_MPP_12,                            0x18004,                         0x18004,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 12"},
+	[mvAsicReg_PON_MPP_13]                            =  { mvAsicReg_PON_MPP_13,                            0x18004,                         0x18004,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 13"},
+	[mvAsicReg_PON_MPP_14]                            =  { mvAsicReg_PON_MPP_14,                            0x18004,                         0x18004,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 14"},
+	[mvAsicReg_PON_MPP_15]                            =  { mvAsicReg_PON_MPP_15,                            0x18004,                         0x18004,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 15"},
+	[mvAsicReg_PON_MPP_16]                            =  { mvAsicReg_PON_MPP_16,                            0x18008,                         0x18008,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 16"},
+	[mvAsicReg_PON_MPP_17]                            =  { mvAsicReg_PON_MPP_17,                            0x18008,                         0x18008,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 17"},
+	[mvAsicReg_PON_MPP_18]                            =  { mvAsicReg_PON_MPP_18,                            0x18008,                         0x18008,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 18"},
+	[mvAsicReg_PON_MPP_19]                            =  { mvAsicReg_PON_MPP_19,                            0x18008,                         0x18008,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 19, TDM RST"},
+	[mvAsicReg_PON_MPP_20]                            =  { mvAsicReg_PON_MPP_20,                            0x18008,                         0x18008,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 20"},
+	[mvAsicReg_PON_MPP_21]                            =  { mvAsicReg_PON_MPP_21,                            0x18008,                         0x18008,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 21"},
+	[mvAsicReg_PON_MPP_22]                            =  { mvAsicReg_PON_MPP_22,                            0x18008,                         0x18008,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 22"},
+	[mvAsicReg_PON_MPP_23]                            =  { mvAsicReg_PON_MPP_23,                            0x18008,                         0x18008,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 23"},
+	[mvAsicReg_PON_MPP_24]                            =  { mvAsicReg_PON_MPP_24,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 24"},
+	[mvAsicReg_PON_MPP_25]                            =  { mvAsicReg_PON_MPP_25,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 25"},
+	[mvAsicReg_PON_MPP_26]                            =  { mvAsicReg_PON_MPP_26,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 26"},
+	[mvAsicReg_PON_MPP_27]                            =  { mvAsicReg_PON_MPP_27,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 27"},
+	[mvAsicReg_PON_MPP_28]                            =  { mvAsicReg_PON_MPP_28,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 28"},
+	[mvAsicReg_PON_MPP_29]                            =  { mvAsicReg_PON_MPP_29,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 29"},
+	[mvAsicReg_PON_MPP_30]                            =  { mvAsicReg_PON_MPP_30,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 30"},
+	[mvAsicReg_PON_MPP_31]                            =  { mvAsicReg_PON_MPP_31,                            0x1800C,                         0x1800C,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 31"},
+	[mvAsicReg_PON_MPP_32]                            =  { mvAsicReg_PON_MPP_32,                            0x18010,                         0x18010,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 32"},
+	[mvAsicReg_PON_MPP_33]                            =  { mvAsicReg_PON_MPP_33,                            0x18010,                         0x18010,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 33"},
+	[mvAsicReg_PON_MPP_34]                            =  { mvAsicReg_PON_MPP_34,                            0x18010,                         0x18010,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 34"},
+	[mvAsicReg_PON_MPP_35]                            =  { mvAsicReg_PON_MPP_35,                            0x18010,                         0x18010,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 35"},
+	[mvAsicReg_PON_MPP_36]                            =  { mvAsicReg_PON_MPP_36,                            0x18010,                         0x18010,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 36"},
+	[mvAsicReg_PON_MPP_37]                            =  { mvAsicReg_PON_MPP_37,                            0x18010,                         0x18010,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 37"},
+	[mvAsicReg_PON_MPP_38]                            =  { mvAsicReg_PON_MPP_38,                            0x18010,                         0x18010,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 38"},
+	[mvAsicReg_PON_MPP_39]                            =  { mvAsicReg_PON_MPP_39,                            0x18010,                         0x18010,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 39"},
+	[mvAsicReg_PON_MPP_40]                            =  { mvAsicReg_PON_MPP_40,                            0x18014,                         0x18014,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 40"},
+	[mvAsicReg_PON_MPP_41]                            =  { mvAsicReg_PON_MPP_41,                            0x18014,                         0x18014,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 41"},
+	[mvAsicReg_PON_MPP_42]                            =  { mvAsicReg_PON_MPP_42,                            0x18014,                         0x18014,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 42"},
+	[mvAsicReg_PON_MPP_43]                            =  { mvAsicReg_PON_MPP_43,                            0x18014,                         0x18014,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 43"},
+	[mvAsicReg_PON_MPP_44]                            =  { mvAsicReg_PON_MPP_44,                            0x18014,                         0x18014,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 44"},
+	[mvAsicReg_PON_MPP_45]                            =  { mvAsicReg_PON_MPP_45,                            0x18014,                         0x18014,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 45"},
+	[mvAsicReg_PON_MPP_46]                            =  { mvAsicReg_PON_MPP_46,                            0x18014,                         0x18014,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 46"},
+	[mvAsicReg_PON_MPP_47]                            =  { mvAsicReg_PON_MPP_47,                            0x18014,                         0x18014,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 47"},
+	[mvAsicReg_PON_MPP_48]                            =  { mvAsicReg_PON_MPP_48,                            0x18018,                         0x18018,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 48"},
+	[mvAsicReg_PON_MPP_49]                            =  { mvAsicReg_PON_MPP_49,                            0x18018,                         0x18018,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 49"},
+	[mvAsicReg_PON_MPP_50]                            =  { mvAsicReg_PON_MPP_50,                            0x18018,                         0x18018,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 50, RD Board Dying Gasp"},
+	[mvAsicReg_PON_MPP_51]                            =  { mvAsicReg_PON_MPP_51,                            0x18018,                         0x18018,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 51"},
+	[mvAsicReg_PON_MPP_52]                            =  { mvAsicReg_PON_MPP_52,                            0x18018,                         0x18018,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 52"},
+	[mvAsicReg_PON_MPP_53]                            =  { mvAsicReg_PON_MPP_53,                            0x18018,                         0x18018,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 53"},
+	[mvAsicReg_PON_MPP_54]                            =  { mvAsicReg_PON_MPP_54,                            0x18018,                         0x18018,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 54"},
+	[mvAsicReg_PON_MPP_55]                            =  { mvAsicReg_PON_MPP_55,                            0x18018,                         0x18018,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 55"},
+	[mvAsicReg_PON_MPP_56]                            =  { mvAsicReg_PON_MPP_56,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 56"},
+	[mvAsicReg_PON_MPP_57]                            =  { mvAsicReg_PON_MPP_57,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 57"},
+	[mvAsicReg_PON_MPP_58]                            =  { mvAsicReg_PON_MPP_58,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 58"},
+	[mvAsicReg_PON_MPP_59]                            =  { mvAsicReg_PON_MPP_59,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,    12,      0,     0,      0,     "Gpon MMP 59"},
+	[mvAsicReg_PON_MPP_60]                            =  { mvAsicReg_PON_MPP_60,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,    16,      0,     0,      0,     "Gpon MMP 60"},
+	[mvAsicReg_PON_MPP_61]                            =  { mvAsicReg_PON_MPP_61,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,    20,      0,     0,      0,     "Gpon MMP 61"},
+	[mvAsicReg_PON_MPP_62]                            =  { mvAsicReg_PON_MPP_62,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,    24,      0,     0,      0,     "Gpon MMP 62"},
+	[mvAsicReg_PON_MPP_63]                            =  { mvAsicReg_PON_MPP_63,                            0x1801C,                         0x1801C,  asicRW,     0x0000000F,    28,      0,     0,      0,     "Gpon MMP 63"},
+	[mvAsicReg_PON_MPP_64]                            =  { mvAsicReg_PON_MPP_64,                            0x18020,                         0x18020,  asicRW,     0x0000000F,     0,      0,     0,      0,     "Gpon MMP 64"},
+	[mvAsicReg_PON_MPP_65]                            =  { mvAsicReg_PON_MPP_65,                            0x18020,                         0x18020,  asicRW,     0x0000000F,     4,      0,     0,      0,     "Gpon MMP 65"},
+	[mvAsicReg_PON_MPP_66]                            =  { mvAsicReg_PON_MPP_66,                            0x18020,                         0x18020,  asicRW,     0x0000000F,     8,      0,     0,      0,     "Gpon MMP 66"},
+#endif
+#endif
+
+	/* =========================== */
+	/*  SERDES Registers           */
+	/* =========================== */
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0]                 =  { mvAsicReg_PON_SERDES_PHY_CTRL_0,                 0x184F4,                         0x184F4,  asicRW,     0xFFFFFFFF,     0,      0,     0,      0,     "Gpon Phy Control 0"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_Pll]          =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_Pll,          0x184F4,                         0x184F4,  asicRW,     0x00000001,     0,      0,     0,      0,     "Gpon Phy Control 0 Power Up Pll"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_RX]           =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_RX,           0x184F4,                         0x184F4,  asicRW,     0x00000001,     1,      0,     0,      0,     "Gpon Phy Control 0 Power Up Rx"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_TX]           =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_TX,           0x184F4,                         0x184F4,  asicRW,     0x00000001,     2,      0,     0,      0,     "Gpon Phy Control 0 Power Up Tx"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_RST]             =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_RST,             0x184F4,                         0x184F4,  asicRW,     0x00000001,     3,      0,     0,      0,     "Gpon Phy Control 0 Reset"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_RST_TX_DOUT]     =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_RST_TX_DOUT,     0x184F4,                         0x184F4,  asicRW,     0x00000001,     4,      0,     0,      0,     "Gpon Phy Control 0 Reset Tx Dout"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_RST_CORE]        =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_RST_CORE,        0x184F4,                         0x184F4,  asicRW,     0x00000001,     5,      0,     0,      0,     "Gpon Phy Control 0 Reset Core"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_RX_INIT]         =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_RX_INIT,         0x184F4,                         0x184F4,  asicRW,     0x00000001,     6,      0,     0,      0,     "Gpon Phy Control 0 Rx Init"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_RX_RATE]         =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_RX_RATE,         0x184F4,                         0x184F4,  asicRW,     0x00000001,     7,      0,     0,      0,     "Gpon Phy Control 0 Rx Rate"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_TX_RATE]         =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_TX_RATE,         0x184F4,                         0x184F4,  asicRW,     0x00000001,     8,      0,     0,      0,     "Gpon Phy Control 0 Tx Rate"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_SEL_GEPON]       =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_SEL_GEPON,       0x184F4,                         0x184F4,  asicRW,     0x00000001,     9,      0,     0,      0,     "Gpon Phy Control 0 Sel GEPON"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_SEL_REF_CLK]     =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_SEL_REF_CLK,     0x184F4,                         0x184F4,  asicRW,     0x00000003,    10,      0,     0,      0,     "Gpon Phy Control 0 Sel Ref Clk"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_REF_CLK_25M]     =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_REF_CLK_25M,     0x184F4,                         0x184F4,  asicRW,     0x00000001,    12,      0,     0,      0,     "Gpon Phy Control 0 Ref Clk 25M"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_CID_REV]         =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_CID_REV,         0x184F4,                         0x184F4,  asicRW,     0x000000FF,    13,      0,     0,      0,     "Gpon Phy Control 0 Cid Rev"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_TX_SOURCE]    =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_TX_SOURCE,    0x184F4,                         0x184F4,  asicRW,     0x00000001,    21,      0,     0,      0,     "Gpon Phy Control 0 Pu Tx Source"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_REF_CLK_DISABLE] =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_REF_CLK_DISABLE, 0x184F4,                         0x184F4,  asicRW,     0x00000001,    22,      0,     0,      0,     "Gpon Phy Control 0 Ref clock disable"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_TX_IDLE]         =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_TX_IDLE,         0x184F4,                         0x184F4,  asicRW,     0x00000001,    23,      0,     0,      0,     "Gpon Phy Control 0 Tx Idle"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_IO_EN]       =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_IO_EN,       0x184F4,                         0x184F4,  asicRW,     0x00000001,    24,      0,     0,      0,     "Gpon Phy Control 0 BEN IO Enable"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_HW_SELECT] = { mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_HW_SELECT, 0x184F4,                         0x184F4,  asicRW,     0x00000001,    25,      0,     0,      0,     "Gpon Phy Control 0 Select SW or HW Control"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_FORCE]    =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_FORCE,    0x184F4,                         0x184F4,  asicRW,     0x00000001,    26,      0,     0,      0,     "Gpon Phy Control 0 Software Control Force Enable"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_VALUE]    =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_VALUE,    0x184F4,                         0x184F4,  asicRW,     0x00000001,    27,      0,     0,      0,     "Gpon Phy Control 0 Software Control Force Value"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_TOD_OVERRIDE]    =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_TOD_OVERRIDE,    0x184F4,                         0x184F4,  asicRW,     0x00000001,    28,      0,     0,      0,     "Gpon Phy Control 0 ToD Overide"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_DIG_TEST_EN]     =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_DIG_TEST_EN,     0x184F4,                         0x184F4,  asicRW,     0x00000001,    29,      0,     0,      0,     "Gpon Phy Control 0 Dig Test En"},
+	[mvAsicReg_PON_SERDES_PHY_CTRL_0_EPON_MODE_SEL]   =  { mvAsicReg_PON_SERDES_PHY_CTRL_0_EPON_MODE_SEL,   0x184F4,                         0x184F4,  asicRW,     0x00000001,    30,      0,     0,      0,     "Gpon Phy Control 0 Epon Mode Sel"},
+
+	[mvAsicReg_PON_SERDES_PHY_CTRL_1_PHY_SOURCE]      =  { mvAsicReg_PON_SERDES_PHY_CTRL_1_PHY_SOURCE,      0x184F8,                         0x184F8,  asicRW,     0x00000001,     0,      0,     0,      0,     "Gpon Phy Control 1 Gpon Phy Source"},
+
+	[mvAsicReg_PON_SERDES_PHY_STATUS_REF_CLK_DIS_ACK] =  { mvAsicReg_PON_SERDES_PHY_STATUS_REF_CLK_DIS_ACK, 0x184FC,                         0x184FC,  asicRW,     0x00000001,    16,      0,     0,      0,     "Gpon Phy Status Ref Clock Disable Ack"},
+	[mvAsicReg_PON_SERDES_PHY_STATUS_READY_RX]        =  { mvAsicReg_PON_SERDES_PHY_STATUS_READY_RX,        0x184FC,                         0x184FC,  asicRW,     0x00000001,    17,      0,     0,      0,     "Gpon Phy Status Pll Ready Rx"},
+	[mvAsicReg_PON_SERDES_PHY_STATUS_READY_TX]        =  { mvAsicReg_PON_SERDES_PHY_STATUS_READY_TX,        0x184FC,                         0x184FC,  asicRW,     0x00000001,    18,      0,     0,      0,     "Gpon Phy Status Pll Ready Tx"},
+	[mvAsicReg_PON_SERDES_PHY_STATUS_INIT_DONE]       =  { mvAsicReg_PON_SERDES_PHY_STATUS_INIT_DONE,       0x184FC,                         0x184FC,  asicRW,     0x00000001,    19,      0,     0,      0,     "Gpon Phy Status Rx Init Done"},
+
+	[mvAsicReg_PON_SERDES_CLK_SEL]                    =  { mvAsicReg_PON_SERDES_CLK_SEL,                    0x18754,                         0x18754,  asicRW,     0x00000001,     1,      0,     0,      0,     "Gpon Serdes Clock Select"},
+	[mvAsicReg_PON_SERDES_CLK_EN]                     =  { mvAsicReg_PON_SERDES_CLK_EN,                     0x18754,                         0x18754,  asicRW,     0x00000001,     2,      0,     0,      0,     "Gpon Serdes Clock Enable"},
+	[mvAsicReg_PON_MAC_CLK_SEL]                       =  { mvAsicReg_PON_MAC_CLK_SEL,                       0x18754,                         0x18754,  asicRW,     0x00000001,     3,      0,     0,      0,     "Gpon MAC Clock Select"},
+	[mvAsicReg_PON_REF_CLK_EN]                        =  { mvAsicReg_PON_REF_CLK_EN,                        0x18754,                         0x18754,  asicRW,     0x00000001,     4,      0,     0,      0,     "Gpon Ref Clock Enable"},
+
+	[mvAsicReg_PON_MAC_GPON_CLK_EN]                   =  { mvAsicReg_PON_MAC_GPON_CLK_EN,                   0x18220,                         0x18220,  asicRW,     0x00000001,     1,      0,     0,      0,     "Gpon MAC Gpon T-Clock Enable"},
+	[mvAsicReg_PON_MAC_SW_RESET_CTRL]                 =  { mvAsicReg_PON_MAC_SW_RESET_CTRL,                 0x18258,                         0x18258,  asicRW,     0x00000001,     3,      0,     0,      0,     "Gpon MAC Software Reset Control"},
+
+	[mvAsicReg_PON_SERDES_INTERNAL_POWER_REG_0]       =  { mvAsicReg_PON_SERDES_INTERNAL_POWER_REG_0,       0x32004,                         0x32004,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Gpon Serded Internal - Power reg 0"},
+	[mvAsicReg_PON_SERDES_INTERNAL_REG_51]            =  { mvAsicReg_PON_SERDES_INTERNAL_REG_51,            0x32144,                         0x32144,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Gpon Serded Internal - Reg 0x51"},
+	[mvAsicReg_PON_SERDES_INTERNAL_REG_3D]            =  { mvAsicReg_PON_SERDES_INTERNAL_REG_3D,            0x320f4,                         0x320f4,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Gpon Serded Internal - Reg 0x3D"},
+	[mvAsicReg_PON_SERDES_INTERNAL_REG_23_LOOP_TIMING] = { mvAsicReg_PON_SERDES_INTERNAL_REG_23_LOOP_TIMING, 0x3208c,                         0x3208c,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Gpon Serded Internal - Loop Timing"},
+	[mvAsicReg_PON_SERDES_INTERNAL_REG_26_TX_DRV_IDLE] = { mvAsicReg_PON_SERDES_INTERNAL_REG_26_TX_DRV_IDLE, 0x32098,                         0x32098,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Gpon Serded Internal - Tx Driver Idle"},
+	[mvAsicReg_PON_SERDES_INTERNAL_REG_OFFSET_148]    =  { mvAsicReg_PON_SERDES_INTERNAL_REG_OFFSET_148,    0x32148,                         0x32148,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Gpon Serded Internal - Offse 0x32148"},
+	[mvAsicReg_PON_SERDES_INTERNAL_REG_OFFSET_178]    =  { mvAsicReg_PON_SERDES_INTERNAL_REG_OFFSET_178,    0x32178,                         0x32178,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Gpon Serded Internal - Offse 0x32178"},
+
+	[mvAsicReg_PON_XVR_TX_DATA_OUT_17]                =  { mvAsicReg_PON_XVR_TX_DATA_OUT_17,                0x18104,                         0x18104,  asicRW,     0x00000001,    17,      0,     0,      0,     "GPIO 17 data out transmit"},
+	[mvAsicReg_PON_XVR_TX_DATA_OUT_36]                =  { mvAsicReg_PON_XVR_TX_DATA_OUT_36,                0x18144,                         0x18144,  asicRW,     0x00000001,    4,       0,     0,      0,     "GPIO 36 data out transmit"},
+	[mvAsicReg_PON_XVR_TX_DATA_OUT_37]                =  { mvAsicReg_PON_XVR_TX_DATA_OUT_37,                0x18144,                         0x18144,  asicRW,     0x00000001,    5,       0,     0,      0,     "GPIO 37 data out transmit"},
+	[mvAsicReg_PON_XVR_TX_DATA_OUT_41]                =  { mvAsicReg_PON_XVR_TX_DATA_OUT_41,                0x18144,                         0x18144,  asicRW,     0x00000001,    9,       0,     0,      0,     "GPIO 41 data out transmit"},
+	[mvAsicReg_PON_XVR_TX_DATA_OUT_45]                =  { mvAsicReg_PON_XVR_TX_DATA_OUT_45,                0x18144,                         0x18144,  asicRW,     0x00000001,    13,      0,     0,      0,     "GPIO 45 data out transmit"},
+	[mvAsicReg_PON_XVR_TX_DATA_OUT_65]                =  { mvAsicReg_PON_XVR_TX_DATA_OUT_65,                0x18184,                         0x18184,  asicRW,     0x00000001,    1,       0,     0,      0,     "GPIO 68 data out transmit"},
+	[mvAsicReg_PON_XVR_TX_DATA_OUT_68]                =  { mvAsicReg_PON_XVR_TX_DATA_OUT_68,                0x18184,                         0x18184,  asicRW,     0x00000001,    4,       0,     0,      0,     "GPIO 68 data out transmit"},
+	[mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_17]           =  { mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_17,           0x18100,                         0x18100,  asicRW,     0x00000001,    17,      0,     0,      0,     "GPIO 17 data out enabled"},
+	[mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_36]           =  { mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_36,           0x18140,                         0x18140,  asicRW,     0x00000001,    4,       0,     0,      0,     "GPIO 36 data out enabled"},
+	[mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_37]           =  { mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_37,           0x18140,                         0x18140,  asicRW,     0x00000001,    5,       0,     0,      0,     "GPIO 37 data out enabled"},
+	[mvAsicReg_PON_XVR_RX_INPUT_41]                   =  { mvAsicReg_PON_XVR_RX_INPUT_41,                   0x18150,                         0x18150,  asicRW,     0x00000001,    9,       0,     0,      0,     "GPIO 41 data in "},
+	[mvAsicReg_PON_XVR_RX_INPUT_45]                   =  { mvAsicReg_PON_XVR_RX_INPUT_45,                   0x18150,                         0x18150,  asicRW,     0x00000001,    13,      0,     0,      0,     "GPIO 45 data in "},
+	[mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_65]           =  { mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_65,           0x18180,                         0x18180,  asicRW,     0x00000001,    1,       0,     0,      0,     "GPIO 65 data out enabled"},
+	[mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_68]           =  { mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_68,           0x18180,                         0x18180,  asicRW,     0x00000001,    4,       0,     0,      0,     "GPIO 68 data out enabled"},
+	[mvAsicReg_PON_SERDES_INTERNAL_OPEN_TX_DOOR_15]   =  { mvAsicReg_PON_SERDES_INTERNAL_OPEN_TX_DOOR_15,   0xA2E98,                         0xA2E98,  asicRW,     0x00000001,    15,      0,     0,      0,     "Gpon Serded Internal - open tx door"},
+	[mvAsicReg_PON_SERDES_POWER_PHY_MODE]             =  { mvAsicReg_PON_SERDES_POWER_PHY_MODE,             0xA2E04,                         0xA2E04,  asicRW,     0x0000FFFF,    0,       0,     0,      0,     "Gpon Serded power up in PHY mode"},
+	[mvAsicReg_PON_SYS_LED_ENABLE]                    =  { mvAsicReg_PON_SYS_LED_ENABLE,                    0x18144,                         0x18144,  asicRW,     0x00000001,    12,      0,     0,      0,     "ONU Sys Led enable"},
+	[mvAsicReg_PON_SYS_LED_STATE]                     =  { mvAsicReg_PON_SYS_LED_STATE,                     0x18140,                         0x18140,  asicRW,     0x00000001,    12,      0,     0,      0,     "ONU Sys Led state"},
+	[mvAsicReg_PON_SYS_LED_BLINK]                     =  { mvAsicReg_PON_SYS_LED_BLINK,                     0x18148,                         0x18148,  asicRW,     0x00000001,    12,      0,     0,      0,     "ONU Sys Led blink"},
+	[mvAsicReg_PON_SYS_LED_BLINK_FREQ]                =  { mvAsicReg_PON_SYS_LED_BLINK_FREQ,                0x18160,                         0x18160,  asicRW,     0x00000001,    12,      0,     0,      0,     "ONU Sys Led blink freq"},
+	[mvAsicReg_PON_SYNC_LED_ENABLE]                   =  { mvAsicReg_PON_SYNC_LED_ENABLE,                   0x18144,                         0x18144,  asicRW,     0x00000001,    13,      0,     0,      0,     "ONU Sync Led enable"},
+	[mvAsicReg_PON_SYNC_LED_STATE]                    =  { mvAsicReg_PON_SYNC_LED_STATE,                    0x18140,                         0x18140,  asicRW,     0x00000001,    13,      0,     0,      0,     "ONU Sync Led state"},
+	[mvAsicReg_PON_SYNC_LED_BLINK]                    =  { mvAsicReg_PON_SYNC_LED_BLINK,                    0x18148,                         0x18148,  asicRW,     0x00000001,    13,      0,     0,      0,     "ONU Sync Led blink"},
+	[mvAsicReg_PON_SYNC_LED_BLINK_FREQ]               =  { mvAsicReg_PON_SYNC_LED_BLINK_FREQ,               0x18160,                         0x18160,  asicRW,     0x00000001,    13,      0,     0,      0,     "ONU Sync Led blink freq"},
+	[mvAsicReg_PON_LED_BLINK_FREQ_A_ON]               =  { mvAsicReg_PON_LED_BLINK_FREQ_A_ON,               0x181C0,                         0x181C0,  asicRW,     0x00000000,     0,      0,     0,      0,     "ONU Led Freq A On"},
+	[mvAsicReg_PON_LED_BLINK_FREQ_A_OFF]              =  { mvAsicReg_PON_LED_BLINK_FREQ_A_OFF,              0x181C4,                         0x181C4,  asicRW,     0x00000000,     0,      0,     0,      0,     "ONU Led Freq A Off"},
+	[mvAsicReg_PON_LED_BLINK_FREQ_B_ON]               =  { mvAsicReg_PON_LED_BLINK_FREQ_B_ON,               0x181C8,                         0x181C8,  asicRW,     0x00000000,     0,      0,     0,      0,     "ONU Led Freq B On"},
+	[mvAsicReg_PON_LED_BLINK_FREQ_B_OFF]              =  { mvAsicReg_PON_LED_BLINK_FREQ_B_OFF,              0x181CC,                         0x181CC,  asicRW,     0x00000000,     0,      0,     0,      0,     "ONU Led Freq B Off"},
+#ifndef PON_FPGA
+#ifdef DISABLE_DG_FOR_AVANTA_LP
+	[mvAsicReg_PON_DG_CTRL_EN]                        =  { mvAsicReg_PON_DG_CTRL_EN,                        0x18210,                         0x18210,  asicRW,     0x00000001,     0,      0,     0,      0,     "ONU Dying Gasp enable"},
+	[mvAsicReg_PON_DG_CTRL_POLARITY]                  =  { mvAsicReg_PON_DG_CTRL_POLARITY,                  0x18210,                         0x18210,  asicRW,     0x00000001,     1,      0,     0,      0,     "ONU Dying Gasp polarity"},
+	[mvAsicReg_PON_DG_THRESHOLD]                      =  { mvAsicReg_PON_DG_THRESHOLD,                      0x18214,                         0x18214,  asicRW,     0x00000000,     0,      0,     0,      0,     "ONU Dying Gasp threshold"},
+#else
+	[mvAsicReg_PON_DG_CTRL_EN]                        =  { mvAsicReg_PON_DG_CTRL_EN,                        0x18270,                         0x18270,  asicRW,     0x00000001,     0,      0,     0,      0,     "ONU Dying Gasp enable"},
+	[mvAsicReg_PON_DG_CTRL_POLARITY]                  =  { mvAsicReg_PON_DG_CTRL_POLARITY,                  0x18270,                         0x18270,  asicRW,     0x00000001,     1,      0,     0,      0,     "ONU Dying Gasp polarity"},
+	[mvAsicReg_PON_DG_THRESHOLD]                      =  { mvAsicReg_PON_DG_THRESHOLD,                      0x18274,                         0x18274,  asicRW,     0x00000000,     0,      0,     0,      0,     "ONU Dying Gasp threshold"},
+#endif
+#endif
+	[mvAsicReg_PT_PATTERN_SELECT]                     =  { mvAsicReg_PT_PATTERN_SELECT,                     0xA2E54,                         0xA2E54,  asicRW,     0x00000007,     5,      0,     0,      0,     "PHY test pattern select"},
+	[mvAsicReg_PT_PATTERN_ENABLED]                    =  { mvAsicReg_PT_PATTERN_ENABLED,                    0xA2E54,                         0xA2E54,  asicRW,     0x00000001,     15,     0,     0,      0,     "PHY test pattern enabled"},
+	[mvAsicReg_PT_PATTERN_DATA]                       =  { mvAsicReg_PT_PATTERN_DATA,                       0xA2E6C,                         0xA2E6C,  asicRW,     0x000000FF,     0,      0,     0,      0,     "PHY test pattern data / user pattern [15:0]"},
+	[mvAsicReg_PT_PATTERN_USER_DATA_01]               =  { mvAsicReg_PT_PATTERN_USER_DATA_01,               0xA2E68,                         0xA2E68,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "PHY test user pattern [31:16]"},
+	[mvAsicReg_PT_PATTERN_USER_DATA_02]               =  { mvAsicReg_PT_PATTERN_USER_DATA_02,               0xA2E64,                         0xA2E64,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "PHY test user pattern [47:32]"},
+	[mvAsicReg_PT_PATTERN_USER_DATA_03]               =  { mvAsicReg_PT_PATTERN_USER_DATA_03,               0xA2E60,                         0xA2E60,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "PHY test user pattern [63:48]"},
+	[mvAsicReg_PT_PATTERN_USER_DATA_04]               =  { mvAsicReg_PT_PATTERN_USER_DATA_04,               0xA2E5C,                         0xA2E5C,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "PHY test user pattern [79:64]"},
+	[mvAsicReg_PT_PATTERN_USER_DATA_05]               =  { mvAsicReg_PT_PATTERN_USER_DATA_05,               0xA2E58,                         0xA2E58,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "PHY test user pattern [96:80]"},
+
+	[mvAsicReg_GUNIT_TX_0_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_0_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xA59D0,                         0xA59D0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 0"},
+	[mvAsicReg_GUNIT_TX_1_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_1_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xA5DD0,                         0xA5DD0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 1"},
+	[mvAsicReg_GUNIT_TX_2_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_2_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xA79D0,                         0xA79D0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 2"},
+	[mvAsicReg_GUNIT_TX_3_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_3_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xA7DD0,                         0xA7DD0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 3"},
+	[mvAsicReg_GUNIT_TX_4_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_4_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xA99D0,                         0xA99D0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 4"},
+	[mvAsicReg_GUNIT_TX_5_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_5_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xA9DD0,                         0xA9DD0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 5"},
+	[mvAsicReg_GUNIT_TX_6_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_6_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xAB9D0,                         0xAB9D0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 6"},
+	[mvAsicReg_GUNIT_TX_7_PKT_MOD_MAX_HEAD_SIZE_CFG]  =  { mvAsicReg_GUNIT_TX_7_PKT_MOD_MAX_HEAD_SIZE_CFG,  0xABDD0,                         0xABDD0,  asicRW,     0x000000FE,     1,      0,     0,      0,     "GPON GUNIT Pkt Mod Mac Head Size for TX 7"},
+
+	[mvAsicReg_GUNIT_TX_0_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_0_PKT_MOD_STATS_PKT_COUNT,    0xA59D8,                         0xA59D8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 0"},
+	[mvAsicReg_GUNIT_TX_1_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_1_PKT_MOD_STATS_PKT_COUNT,    0xA5DD8,                         0xA5DD8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 1"},
+	[mvAsicReg_GUNIT_TX_2_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_2_PKT_MOD_STATS_PKT_COUNT,    0xA79D8,                         0xA79D8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 2"},
+	[mvAsicReg_GUNIT_TX_3_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_3_PKT_MOD_STATS_PKT_COUNT,    0xA7DD8,                         0xA7DD8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 3"},
+	[mvAsicReg_GUNIT_TX_4_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_4_PKT_MOD_STATS_PKT_COUNT,    0xA99D8,                         0xA99D8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 4"},
+	[mvAsicReg_GUNIT_TX_5_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_5_PKT_MOD_STATS_PKT_COUNT,    0xA9DD8,                         0xA9DD8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 5"},
+	[mvAsicReg_GUNIT_TX_6_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_6_PKT_MOD_STATS_PKT_COUNT,    0xAB9D8,                         0xAB9D8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 6"},
+	[mvAsicReg_GUNIT_TX_7_PKT_MOD_STATS_PKT_COUNT]    =  { mvAsicReg_GUNIT_TX_7_PKT_MOD_STATS_PKT_COUNT,    0xABDD8,                         0xABDD8,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "GPON GUNIT Pkt Mod Packet Count for TX 7"},
+
+	[mvAsicReg_PPv2_TX_PON_BYTE_CNT_INDEX]            =  { mvAsicReg_PPv2_TX_PON_BYTE_CNT_INDEX,            0xF8100,                         0xF8100,  asicRW,     0x0000007F,     0,      0,     0,      0,     "Transmit PON Byte Counters Index (TPBC_INDEX)"},
+	[mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_QUE_OVR]  =  { mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_QUE_OVR,  0xF8104,                         0xF8104,  asicRW,     0x000000FF,     0,      0,     0,      0,     "Transmit PON Byte Counters Config1 (TPBC_CFG1)"},
+	[mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_PKT_MOD]  =  { mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_PKT_MOD,  0xF8104,                         0xF8104,  asicRW,     0x000000FF,     8,      0,     0,      0,     "Transmit PON Byte Counters Config1 (TPBC_CFG1)"},
+	[mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG2_POST_FEC] =  { mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG2_POST_FEC, 0xF8108,                         0xF8108,  asicRW,     0x0000FFFF,     0,      0,     0,      0,     "Transmit PON Byte Counters Config2 (TPBC_CFG2)"},
+	[mvAsicReg_PPv2_PON_FEC]                          =  { mvAsicReg_PPv2_PON_FEC,                          0xF0170,                         0xF0170,  asicRW,     0x00000001,     0,      0,     0,      0,     "PON FEC (PON_FEC)"},
+
+	[mvAsicReg_C5000_BIT_1]                           =  { mvAsicReg_C5000_BIT_1,                           0xC5000,                         0xC5000,  asicRW,     0x00000001,     1,      0,     0,      0,     "0xC5000 bitfield 1"},
+	[mvAsicReg_C5008_BIT_0]                           =  { mvAsicReg_C5008_BIT_0,                           0xC5008,                         0xC5008,  asicRW,     0x00000001,     0,      0,     0,      0,     "0xC5008 bitfield 0"},
+	[mvAsicReg_C5008_BIT_3]                           =  { mvAsicReg_C5008_BIT_3,                           0xC5008,                         0xC5008,  asicRW,     0x00000001,     3,      0,     0,      0,     "0xC5008 bitfield 3"},
+
+	[mvAsicReg_18900_BIT_14]                          =  { mvAsicReg_18900_BIT_14,                          0x18900,                         0x18900,  asicRW,     0x00000001,     14,      0,     0,      0,    "0x18900 bitfield 14"},
+	[mvAsicReg_18900_BIT_19]                          =  { mvAsicReg_18900_BIT_19,                          0x18900,                         0x18900,  asicRW,     0x00000001,     19,      0,     0,      0,    "0x18900 bitfield 19"},
+	[mvAsicReg_18900_BIT_21]                          =  { mvAsicReg_18900_BIT_21,                          0x18900,                         0x18900,  asicRW,     0x00000001,     14,      0,     0,      0,    "0x18900 bitfield 21"},
+
+	[mvAsicReg_GMAC1_AUTONEG_SPEED]                   =  { mvAsicReg_GMAC1_AUTONEG_SPEED,                   0xC500C,                         0xC500C,  asicRW,     0x00000001,     7,      0,     0,      0,     "GMAC1 autoneg speed"},
+	[mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_MODE]       =  { mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_MODE,       0xC500C,                         0xC500C,  asicRW,     0x00000001,     9,      0,     0,      0,     "GMAC1 autoneg flow control mode"},
+	[mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_ENABLE]     =  { mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_ENABLE,     0xC500C,                         0xC500C,  asicRW,     0x00000001,     11,     0,     0,      0,     "GMAC1 autoneg flow control enable"},
+	[mvAsicReg_GMAC1_AUTONEG_DUPLEX_MODE]             =  { mvAsicReg_GMAC1_AUTONEG_DUPLEX_MODE,             0xC500C,                         0xC500C,  asicRW,     0x00000001,     12,     0,     0,      0,     "GMAC1 autoneg duplex mode"},
+	[mvAsicReg_GMAC1_AUTONEG_DUPLEX_ENABLE]           =  { mvAsicReg_GMAC1_AUTONEG_DUPLEX_ENABLE,           0xC500C,                         0xC500C,  asicRW,     0x00000001,     13,     0,     0,      0,     "GMAC1 autoneg duplex enable"},
+
+};
+
+/* Export Functions
+   ------------------------------------------------------------------------------*/
+
+/* Local Functions
+   ------------------------------------------------------------------------------*/
+MV_STATUS asicOntGlbRegValidation(E_asicGlobalRegs reg,
+				  S_asicGlobalRegDb **pRegEntry,
+				  MV_U32 entry,
+				  MV_U32 accessType);
+
+/*******************************************************************************
+**
+**  asicOntGlbAddrSet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Set ASIC global address
+**
+**  PARAMETERS:  MV_U32 address
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK
+**
+*******************************************************************************/
+MV_STATUS ponOnuGlbAddrSet(MV_U32 address)
+{
+	ponOnuGlbAddr = address;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntGlbRegValidation
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Validate ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs  reg,
+**               S_asicGlobalRegDb **pRegEntry
+**               MV_U32            entry
+**               MV_U32            accessType
+**
+**  OUTPUTS:     S_asicGlobalRegDb **pRegEntry
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntGlbRegValidation(E_asicGlobalRegs reg,
+				  S_asicGlobalRegDb **pRegEntry,
+				  MV_U32 entry,
+				  MV_U32 accessType)
+{
+	/* Check range */
+	if (reg >= mvAsicReg_MAX_NUM_OF_REGS)
+		return MV_ERROR;
+
+	/* Get the register entry in DB */
+	*pRegEntry = &(asicGlbDb[reg]);
+
+	/* Check DB coherency */
+	if ((*pRegEntry)->enumVal != reg)
+		return MV_ERROR;
+
+	/* Check access type */
+	if (accessType == funcRegR) { /* Read */
+		if ((*pRegEntry)->accessType == asicWO)
+			return MV_ERROR;
+	} else if (accessType == funcRegW) /* Write */
+		if ((*pRegEntry)->accessType == asicRO)
+			return MV_ERROR;
+
+	/* Check table entry - only valid for tables */
+	if (entry > (*pRegEntry)->tblLength)
+		return MV_ERROR;
+
+	/* Update the access count to this register */
+	(*pRegEntry)->accessCount++;
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntGlbRegRead
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Read the contents of MV_U32 ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs reg
+**               MV_U32           *pValue
+**               MV_U32           entry
+**
+**  OUTPUTS:     a_value_p
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntGlbRegRead(E_asicGlobalRegs reg,
+			    MV_U32          *pValue,
+			    MV_U32 entry)
+{
+	MV_STATUS rcode;
+	S_asicGlobalRegDb *pRegEntry = NULL;
+	MV_U32 regAddr;
+	MV_U32 baseAddr;
+	MV_U32 regValue;
+
+	rcode = asicOntGlbRegValidation(reg, &pRegEntry, entry, funcRegR);
+	if (rcode != MV_OK)
+		return rcode;
+
+	baseAddr = pRegEntry->address;
+
+	/* Absolute register address */
+	regAddr = (baseAddr + (pRegEntry->tblEntrySize *
+			       entry                   *
+			       sizeof(MV_U32)));
+
+	/* Read the value of the register */
+	regValue = MV_REG_READ(ponOnuGlbAddr + regAddr);
+
+	*pValue = ((regValue >> (pRegEntry->shift)) & (pRegEntry->mask));
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntGlbRegWrite
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Write the contents of MV_U32 ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs reg
+**               MV_U32           value
+**               MV_U32           entry
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntGlbRegWrite(E_asicGlobalRegs reg,
+			     MV_U32 value,
+			     MV_U32 entry)
+{
+	MV_STATUS rcode;
+	S_asicGlobalRegDb *pRegEntry = NULL;
+	MV_U32 regAddr;
+	MV_U32 tempValue;
+	MV_U32 baseAddr;
+
+	rcode = asicOntGlbRegValidation(reg, &pRegEntry, entry, funcRegW);
+	if (rcode != MV_OK)
+		return rcode;
+
+	baseAddr = pRegEntry->address;
+
+	/* Absolute register address */
+	regAddr = (baseAddr + (pRegEntry->tblEntrySize *
+			       entry                   *
+			       sizeof(MV_U32)));
+
+	tempValue = MV_REG_READ(ponOnuGlbAddr + regAddr);
+
+	/* Clear field */
+	tempValue &= ~((pRegEntry->mask) << (pRegEntry->shift));
+
+	/* Set field */
+	tempValue |= (((value) & (pRegEntry->mask)) << (pRegEntry->shift));
+
+	/* Write the value of the register */
+	MV_REG_WRITE((ponOnuGlbAddr + regAddr), tempValue);
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntGlbRegReadNoCheck
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Read fast (with no checkings) the contents of MV_U32 ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs reg
+**               MV_U32           *pValue
+**               MV_U32           entry
+**
+**  OUTPUTS:     a_value_p
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntGlbRegReadNoCheck(E_asicGlobalRegs reg,
+				   MV_U32         *pValue,
+				   MV_U32 entry)
+{
+	S_asicGlobalRegDb *pRegEntry = NULL;
+	MV_U32 regAddr;
+	MV_U32 baseAddr;
+	MV_U32 regValue;
+
+	/* Check range */
+	if (reg >= mvAsicReg_MAX_NUM_OF_REGS)
+		return MV_ERROR;
+
+	/* Get the register entry in DB */
+	pRegEntry = &(asicGlbDb[reg]);
+
+	/* Update the access count to this register */
+	pRegEntry->accessCount++;
+
+	baseAddr = pRegEntry->address;
+
+	/* Absolute register address */
+	regAddr = (baseAddr + (pRegEntry->tblEntrySize *
+			       entry                   *
+			       sizeof(MV_U32)));
+
+	/* Read the value of the register */
+	regValue = MV_REG_READ(ponOnuGlbAddr + regAddr);
+
+	*pValue = ((regValue >> (pRegEntry->shift)) & (pRegEntry->mask));
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntGlbRegWriteNoCheck
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Write fast (with no checkings) the contents of MV_U32 ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs reg
+**               MV_U32           value
+**               MV_U32           entry
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntGlbRegWriteNoCheck(E_asicGlobalRegs reg,
+				    MV_U32 value,
+				    MV_U32 entry)
+{
+	S_asicGlobalRegDb *pRegEntry = NULL;
+	MV_U32 regAddr;
+	MV_U32 tempValue;
+	MV_U32 baseAddr;
+
+	/* Check range */
+	if (reg >= mvAsicReg_MAX_NUM_OF_REGS)
+		return MV_ERROR;
+
+	/* Get the register entry in DB */
+	pRegEntry = &(asicGlbDb[reg]);
+
+	/* Update the access count to this register */
+	pRegEntry->accessCount++;
+
+	baseAddr = pRegEntry->address;
+
+	/* Absolute register address */
+	regAddr = (baseAddr + (pRegEntry->tblEntrySize *
+			       entry                   *
+			       sizeof(MV_U32)));
+
+	tempValue = MV_REG_READ(ponOnuGlbAddr + regAddr);
+
+	/* Clear field */
+	tempValue &= ~((pRegEntry->mask) << (pRegEntry->shift));
+
+	/* Set field */
+	tempValue |= (((value) & (pRegEntry->mask)) << (pRegEntry->shift));
+
+	/* Write the value of the register */
+	MV_REG_WRITE((ponOnuGlbAddr + regAddr), tempValue);
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntGlbSerdesRegWrite
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Write the contents of MV_U32 ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs reg
+**               MV_U32           value
+**               MV_U32           entry
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntMiscRegWrite(E_asicGlobalRegs reg,
+			      MV_U32 value,
+			      MV_U32 entry)
+{
+	MV_STATUS rcode;
+	S_asicGlobalRegDb *pRegEntry = NULL;
+	MV_U32 regAddr;
+	MV_U32 tempValue;
+	MV_U32 baseAddr;
+
+	rcode = asicOntGlbRegValidation(reg, &pRegEntry, entry, funcRegW);
+	if (rcode != MV_OK)
+		return rcode;
+
+	baseAddr = pRegEntry->address;
+
+	/* Absolute register address */
+	regAddr = (baseAddr + (pRegEntry->tblEntrySize *
+			       entry                   *
+			       sizeof(MV_U32)));
+
+	tempValue = MV_REG_READ(regAddr);
+
+	/* Clear field */
+	tempValue &= ~((pRegEntry->mask) << (pRegEntry->shift));
+
+	/* Set field */
+	tempValue |= (((value) & (pRegEntry->mask)) << (pRegEntry->shift));
+
+	/* Write the value of the register */
+	MV_REG_WRITE(regAddr, tempValue);
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntMiscRegRead
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Read the contents of MV_U32 ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs reg
+**               MV_U32           *pValue
+**               MV_U32           entry
+**
+**  OUTPUTS:     a_value_p
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntMiscRegRead(E_asicGlobalRegs reg,
+			     MV_U32          *pValue,
+			     MV_U32 entry)
+{
+	MV_STATUS rcode;
+	S_asicGlobalRegDb *pRegEntry = NULL;
+	MV_U32 regAddr;
+	MV_U32 baseAddr;
+	MV_U32 regValue;
+
+	rcode = asicOntGlbRegValidation(reg, &pRegEntry, entry, funcRegR);
+	if (rcode != MV_OK)
+		return rcode;
+
+	baseAddr = pRegEntry->address;
+
+	/* Absolute register address */
+	regAddr = (baseAddr + (pRegEntry->tblEntrySize *
+			       entry                   *
+			       sizeof(MV_U32)));
+
+	/* Read the value of the register */
+	regValue = MV_REG_READ(regAddr);
+
+	*pValue = ((regValue >> (pRegEntry->shift)) & (pRegEntry->mask));
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  asicOntMiscRegAddressGet
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: Get the address of MV_U32 ASIC register
+**
+**  PARAMETERS:  E_asicGlobalRegs reg
+**               MV_U32           value
+**               MV_U32           entry
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_OK or error
+**
+*******************************************************************************/
+MV_STATUS asicOntMiscRegAddressGet(E_asicGlobalRegs reg,
+				   MV_U32 entry,
+				   MV_U32           *regAddr)
+{
+	MV_STATUS rcode;
+	S_asicGlobalRegDb *pRegEntry = NULL;
+	MV_U32 baseAddr;
+
+	rcode = asicOntGlbRegValidation(reg, &pRegEntry, entry, funcRegW);
+	if (rcode != MV_OK)
+		return rcode;
+
+	baseAddr = pRegEntry->address;
+
+	/* Absolute register address */
+	*regAddr = (baseAddr + (pRegEntry->tblEntrySize *
+				entry                   *
+				sizeof(MV_U32)));
+
+	return MV_OK;
+}
\ No newline at end of file
diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h
new file mode 100755
index 0000000..4aa51e9
--- /dev/null
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h
@@ -0,0 +1,830 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+        this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimer in the
+        documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+        used to endorse or promote products derived from this software without
+        specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+
+#ifndef _ONU_GPON_REG_H
+#define _ONU_GPON_REG_H
+
+/* Include Files
+   ------------------------------------------------------------------------------*/
+
+/* Definitions
+   ------------------------------------------------------------------------------*/
+#define MV_ASIC_ONT_BASE (0)
+
+//#define KW2_ASIC
+/* Enums
+   ------------------------------------------------------------------------------*/
+
+/* ========================== */
+/* = New ASIC Register Enum = */
+/* ========================== */
+typedef enum {
+/* Enumeration                                          Description                        */
+/* ======================================================================================= */
+	mvAsicReg_Start                               = 0,
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           =========   =========   =========   ====      ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==     ==   ==          ==     ==   ==     == ==           == */
+/* ==           ==     ==   ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+	/* Interrupt Registers */
+	/* =================== */
+	mvAsicReg_GPON_INTERRUPT_PON                  = 1,      /* GponMainInterrupt               */
+	mvAsicReg_GPON_INTERRUPT_PON_MASK             = 2,      /* GponMainInterruptMask           */
+	mvAsicReg_BIP_INTR_INTERVAL                   = 3,      /* GponBipInterruptCfgInterval     */
+	mvAsicReg_RX_BIP_STATUS_FOR_INTERRUPT         = 4,      /* GponBipInterruptStatAccumulator */
+	mvAsicReg_RAM_TEST_CONFIG                     = 5,      /* RamTestCfg                      */
+
+	/* General Registers */
+	/* ================= */
+	mvAsicReg_GPON_GEN_MAC_VERSION                = 6, /* GenMACVersion                   */
+	mvAsicReg_GPON_GEN_MAC_VERSION_ID             = 7,
+	mvAsicReg_GPON_GEN_MAC_VERSION_MAC_ID         = 8,
+	mvAsicReg_GPON_GEN_MAC_SCRATCH                = 9,      /* GenMACScratch                   */
+	mvAsicReg_GPON_ONU_STATE                      = 10,     /* GenONUState                     */
+	mvAsicReg_GPON_GEN_MICRO_SEC_CNT              = 11,     /* GenMicroSecCnt                  */
+	mvAsicReg_GPON_TX_SERIAL_NUMBER               = 12,     /* GenSerialNumber                 */
+	mvAsicReg_GPON_ONU_ID                         = 13,     /* GenONUId                        */
+	mvAsicReg_GPON_ONU_ID_OID                     = 14,
+	mvAsicReg_GPON_ONU_ID_V                       = 15,
+	mvAsicReg_GPON_GEN_TOD_INT_SFC                = 16,     /* GenSFCforToDInterrupt           */
+	mvAsicReg_GPON_GEN_TOD_INT_WIDTH              = 17,     /* GenToDInterruptWidth            */
+
+	/* RX Registers */
+	/* ============ */
+	mvAsicReg_GPON_RX_CONFIG                      = 18, /* GrxCfg                          */
+	mvAsicReg_GPON_RX_CONFIG_EN                   = 19,
+	mvAsicReg_GPON_RX_CONFIG_BIT_ORDER            = 20,
+	mvAsicReg_GPON_RX_PSA_CONFIG                  = 21, /* GrxCfgPsa                       */
+	mvAsicReg_GPON_RX_PSA_CONFIG_SFM3             = 22,
+	mvAsicReg_GPON_RX_PSA_CONFIG_SFM2             = 23,
+	mvAsicReg_GPON_RX_PSA_CONFIG_SFM1             = 24,
+	mvAsicReg_GPON_RX_PSA_CONFIG_FHM1             = 25,
+	mvAsicReg_GPON_RX_FEC_CONFIG                  = 26, /* GrxCfgFec                       */
+	mvAsicReg_GPON_RX_FEC_CONFIG_SWVAL            = 27,
+	mvAsicReg_GPON_RX_FEC_CONFIG_FSW              = 28,
+	mvAsicReg_GPON_RX_FEC_CONFIG_IGNP             = 29,
+	mvAsicReg_GPON_RX_FEC_CONFIG_IND              = 30,
+	mvAsicReg_GPON_RX_FEC_STAT0                   = 31,     /* GrxStatFec0                     */
+	mvAsicReg_GPON_RX_FEC_STAT1                   = 32,     /* GrxStatFec1                     */
+	mvAsicReg_GPON_RX_FEC_STAT2                   = 33,     /* GrxStatFec2                     */
+	mvAsicReg_GPON_RX_SFRAME_COUNTER              = 34,     /* GrxStatSuperFrameCnt            */
+	mvAsicReg_GPON_RX_PLOAMD_DATA_READ            = 35,     /* GrxDataPloamRead                */
+	mvAsicReg_GPON_RX_PLOAMD_DATA_USED            = 36,     /* GrxDataPloamUsed                */
+	mvAsicReg_GPON_RX_PLOAMD_CONFIG               = 37,     /* GrxCfgPrm                       */
+	mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNC          = 38,
+	mvAsicReg_GPON_RX_PLOAMD_CONFIG_IGNB          = 39,
+	mvAsicReg_GPON_RX_PLOAMD_CONFIG_FALL          = 40,
+	mvAsicReg_GPON_RX_PLOAMD_LOST_CRC_STATUS      = 41,     /* GrxStatPrmLostCrcCnt            */
+	mvAsicReg_GPON_RX_PLOAMD_LOST_FULL_STATUS     = 42,     /* GrxStatPrmLostFullCnt           */
+	mvAsicReg_GPON_RX_PLOAMD_RCVD_IDLE_STATUS     = 43,     /* GrxStatPrmRcvdIdleCnt           */
+	mvAsicReg_GPON_RX_PLOAMD_RCVD_BROAD_STATUS    = 44,     /* GrxStatPrmRcvdBroadCnt          */
+	mvAsicReg_GPON_RX_PLOAMD_RCVD_MYID_STATUS     = 45,     /* GrxStatPrmRcvdMyIdCnt           */
+	mvAsicReg_GPON_RX_BIP_STATUS                  = 46,     /* GrxStatBip                      */
+	mvAsicReg_GPON_RX_PLEND_CONFIG                = 47,     /* GrxCfgPdb                       */
+	mvAsicReg_GPON_RX_PLEND_CONFIG_FN             = 48,
+	mvAsicReg_GPON_RX_PLEND_CONFIG_UF             = 49,
+	mvAsicReg_GPON_RX_PLEND_CONFIG_IGND           = 50,
+	mvAsicReg_GPON_RX_PLEND_CONFIG_DFIX           = 51,
+	mvAsicReg_GPON_RX_PLEND_CONFIG_IGNC           = 52,
+	mvAsicReg_GPON_RX_PLEND_STATUS                = 53,     /* GrxStatPdb                      */
+	mvAsicReg_GPON_RX_BWMAP_CONFIG                = 54,     /* GrxCfgBmd                       */
+	mvAsicReg_GPON_RX_BWMAP_CONFIG_MSD            = 55,
+	mvAsicReg_GPON_RX_BWMAP_CONFIG_DFIX           = 56,
+	mvAsicReg_GPON_RX_BWMAP_CONFIG_IGNC           = 57,
+	mvAsicReg_GPON_RX_BWMAP_STATUS0               = 58,     /* GrxStatBmd0                     */
+	mvAsicReg_GPON_RX_BWMAP_STATUS1               = 59,     /* GrxStatBmd1                     */
+	mvAsicReg_GPON_RX_AES_CONFIG                  = 60,     /* GrxCfgAesKeySwitch              */
+	mvAsicReg_GPON_RX_AES_CONFIG_TIME             = 61,     /* GrxStatAesKeySwitch             */
+	mvAsicReg_GPON_RX_AES_CONFIG_SWS              = 62,
+	mvAsicReg_GPON_RX_AES_STATUS                  = 63,
+	mvAsicReg_GPON_RX_AES_STATUS_HST              = 64,
+	mvAsicReg_GPON_RX_AES_STATUS_HWS              = 65,
+	mvAsicReg_GPON_RX_EQULIZATION_DELAY           = 66,     /* GrxCfgEqDelay                   */
+	mvAsicReg_GPON_RX_INTERNAL_DELAY              = 67,     /* GrxCfgInterDelay                */
+	mvAsicReg_GPON_RX_BW_MAP                      = 68,     /* GrxCfgBmdMapTcont               */
+	mvAsicReg_GPON_RX_BW_MAP_ALID                 = 60,
+	mvAsicReg_GPON_RX_BW_MAP_TCN                  = 70,
+	mvAsicReg_GPON_RX_BW_MAP_EN                   = 71,
+
+	/* GEM Registers */
+	/* ============= */
+	mvAsicReg_GPON_GEM_STAT_IDLE_GEM_CNT          = 72,     /* GemStatIdleGEMCnt               */
+	mvAsicReg_GPON_GEM_STAT_VALID_GEM_CNT         = 73,     /* GemStatValidGEMCnt              */
+	mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_CNT         = 74,     /* GemStatUndefGEMCnt              */
+	mvAsicReg_GPON_GEM_STAT_VALID_OMCI_CNT        = 75,     /* GemStatValidOMCICnt             */
+	mvAsicReg_GPON_GEM_STAT_DROPPED_GEM_CNT       = 76,     /* GemStatDroppedGEMCnt            */
+	mvAsicReg_GPON_GEM_STAT_DROPPED_OMCI_CNT      = 77,     /* GemStatDroppedOMCICnt           */
+	mvAsicReg_GPON_GEM_STAT_ERROR_GEM_CNT         = 78,     /* GemStatErrorGEMCnt              */
+	mvAsicReg_GPON_GEM_STAT_ONE_FIXED_HEC_ERR_CNT = 79,     /* GemStatOneFixedHecErrCnt        */
+	mvAsicReg_GPON_GEM_STAT_TWO_FIXED_HEC_ERR_CNT = 80,     /* GemStatTwoFixedHecErrCnt        */
+	mvAsicReg_GPON_GEM_STAT_VALID_GEM_PAYLOAD_CNT = 81,     /* GemStatValidGEMPayload          */
+	mvAsicReg_GPON_GEM_STAT_UNDEF_GEM_PAYLOAD_CNT = 82,     /* GemStatUndefGEMPayload          */
+	mvAsicReg_GPON_GEM_STAT_RSMBL_MEM_FLUSH_CNT   = 83,     /* GemStatRsmblMemFlushCnt         */
+	mvAsicReg_GPON_GEM_STAT_LCDGi_CNT             = 84,     /* GemStatLCDGiCnt                 */
+	mvAsicReg_GPON_GEM_STAT_CORR_ETH_FRAME_CNT    = 85,     /* GemStatCorrEthFrameCnt          */
+	mvAsicReg_GPON_GEM_STAT_ERR_ETH_FRAME_CNT     = 86,     /* GemStatErrEthFrameCnt           */
+	mvAsicReg_GPON_GEM_STAT_CORR_OMCI_FRAME_CNT   = 87,     /* GemStatCorrOMCIFrameCnt         */
+	mvAsicReg_GPON_GEM_STAT_ERR_OMCI_FRAME_CNT    = 88,     /* GemStatErrOMCIFrameCnt          */
+	mvAsicReg_GPON_GEM_CONFIG_PLI                 = 89,     /* GemCfgPLI                       */
+	mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN       = 90,     /* GemCfgEthLength                 */
+	mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MAX   = 91,
+	mvAsicReg_GPON_GEM_CONFIG_ETH_FRAME_LEN_MIN   = 92,
+	mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN      = 93, /* GemCfgOMCILength                */
+	mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MAX  = 94,
+	mvAsicReg_GPON_GEM_CONFIG_OMCI_FRAME_LEN_MIN  = 95,
+	mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT           = 96, /* GemCfgOMCIPort                  */
+	mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_ID        = 97,
+	mvAsicReg_GPON_GEM_CONFIG_OMCI_PORT_VALID     = 98,
+	mvAsicReg_GPON_GEM_CONFIG_OMCI_FAST_PATH_VALID = 99,    /* GemCfgOMCIFastPath              */
+	mvAsicReg_GPON_GEM_CONFIG_AES                 = 100,    /* GemCfgAES                       */
+	mvAsicReg_GPON_GEM_AES_SHADOW_KEY             = 101,    /* GemCfgAESShadowKey0/1/2/3       */
+	mvAsicReg_GPON_GEM_CFG_IPG_VALUE              = 102,    /* GemCfgIPGValue                  */
+	mvAsicReg_GPON_GEM_CFG_IPG_VALID              = 103,    /* GemCfgIPGValid                  */
+	mvAsicReg_GPON_GEM_RX_CTRL_Q_READ             = 104,    /* GemCfgQRead                     */
+	mvAsicReg_GPON_GEM_RX_CTRL_DATA_USED          = 105,    /* GemCfgDataUsed                  */
+	mvAsicReg_GPON_GEM_RX_CTRL_CMD_USED           = 106,    /* GemCfgCmdUsed                   */
+	mvAsicReg_GPON_GEM_RX_CTRL_HQ_HEAD_LEN        = 107,    /* GemCfgHqHeadLen                 */
+	mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_PORT_ID     = 108,    /* GemCfgHqGemPortId               */
+	mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_PTI         = 109,    /* GemCfgHqGemPti                  */
+	mvAsicReg_GPON_GEM_RX_CTRL_HQ_GEM_ERR         = 110,    /* GemCfgHqGemErr                  */
+
+	/* TX Registers */
+	/* ============ */
+	mvAsicReg_GPON_TX_PREAMBLE                    = 111, /* GtxCfgPreamble0/1/2            */
+	mvAsicReg_GPON_TX_PREAMBLE_PATT               = 112,
+	mvAsicReg_GPON_TX_PREAMBLE_SIZE               = 113,
+	mvAsicReg_GPON_TX_DELIMITER                   = 114, /* GtxCfgDelimiter                 */
+	mvAsicReg_GPON_TX_DELIMITER_PAT               = 115,
+	mvAsicReg_GPON_TX_DELIMITER_SIZE              = 116,
+	mvAsicReg_GPON_TX_BURST_EN_PARAM              = 117, /* GtxCfgBurstEnable               */
+	mvAsicReg_GPON_TX_BURST_EN_PARAM_STR          = 118,
+	mvAsicReg_GPON_TX_BURST_EN_PARAM_STP          = 119,
+	mvAsicReg_GPON_TX_BURST_EN_PARAM_DLY          = 120,
+	mvAsicReg_GPON_TX_BURST_EN_PARAM_P            = 121,
+	mvAsicReg_GPON_TX_BURST_EN_PARAM_MASK         = 122,
+	mvAsicReg_GPON_TX_FDELAY                      = 123,    /* GtxCfgFinelDelay                */
+	mvAsicReg_GPON_TX_PLOAM_DATA_WRITE            = 124,    /* GtxDataPloamWrite               */
+	mvAsicReg_GPON_TX_PLOAM_DATA_WRITE_FREE       = 125,    /* GtxDataPloamStatus              */
+	mvAsicReg_GPON_TX_PLS_CONSTANT                = 126,    /* GtxCfgPls                       */
+	mvAsicReg_GPON_TX_DBR_REPORT_BLOCK_IDX        = 127,    /* GtxCfgDbr                       */
+	mvAsicReg_GPON_TX_FE_RDI_INDICATION           = 128,    /* GtxCfgRdi                       */
+	mvAsicReg_GPON_TX_STAT_GEM_PTI1               = 129,    /* GtxStatGemPti1                  */
+	mvAsicReg_GPON_TX_STAT_GEM_PTI0               = 130,    /* GtxStatGemPti0                  */
+	mvAsicReg_GPON_TX_STAT_GEM_IDLE               = 131,    /* GtxStatGemIdle                  */
+	mvAsicReg_GPON_TX_STAT_TX_EN_CNT              = 132,    /* GtxStatTxEnableCounter          */
+	mvAsicReg_GPON_TX_CONFIG_EN_THRESHOLD         = 133,    /* GtxCfgTxEnableThreshold         */
+	mvAsicReg_GPON_TX_GSE_TRANS_THRESHOLD         = 134,    /* GtxCfgGseTransThreshold         */
+	mvAsicReg_GPON_TX_CFG_AC_COUPLING             = 135,    /* GtxCfgAcCoupling                */
+	mvAsicReg_GPON_TX_CFG_RAND_DELAY              = 136,    /* GtxCfgRandomDelay               */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_FRAMES     = 137,    /* GtxStatTcontiEtherFrames        */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_ETH_BYTES      = 138,    /* GtxStatTcontiEtherBytes         */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_GEM_FRAMES     = 139,    /* GtxStatTcontiGemFrames          */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_IDLE_GEM       = 140,    /* GtxStatTcontiIdleGem            */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_FRAME = 141,    /* GtxStatTcontiEtherFrames        */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_ETH_BYTES = 142,    /* GtxStatTcontiEtherBytes         */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_GEM_FRAME = 143,    /* GtxStatTcontiGemFrames          */
+	mvAsicReg_GPON_TX_STAT_TCONT_i_8_15_IDLE_GEM  = 144,    /* GtxStatTcontiIdleGem            */
+	mvAsicReg_GPON_TX_HIGH_PRI_CONFIG_EN          = 145,    /* GtxHighPriConfigEn              */
+	mvAsicReg_GPON_TX_HIGH_PRI_VALID_BITMAP       = 146,    /* GtxHighPriValidBm               */
+	mvAsicReg_GPON_TX_HIGH_PRI_MAP_0              = 147,    /* GtxHighPriMap0                  */
+	mvAsicReg_GPON_TX_HIGH_PRI_MAP_1              = 148,    /* GtxHighPriMap1                  */
+
+	/* UTM Registers */
+	/* ============= */
+	mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_ID        = 187,    /* UtmCfgOmciPnum                  */
+	mvAsicReg_GPON_UTM_CONFIG_OMCI_PORT_VALID     = 188,    /* UtmCfgOmciPvalid                */
+	mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD           = 189,    /* UtmCfgTcPeriod                  */
+	mvAsicReg_GPON_UTM_CONFIG_TC_PERIOD_VALID     = 190,    /* UtmCfgTcPeriodValid             */
+	mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP           = 191,    /* UtmActiveTxBitmap               */
+	mvAsicReg_GPON_UTM_ACTIVE_TX_BITMAP_VALID     = 192,    /* UtmActiveTxBitmapValid          */
+	mvAsicReg_GPON_UTM_FLUSH                      = 193,    /* UtmFlush                        */
+	mvAsicReg_GPON_UTM_DEBUG                      = 194,    /* UtmDebug                        */
+
+	/* SGL Registers */
+	/* ============= */
+	mvAsicReg_GPON_SGL_SW_RESET                   = 200,    /* SglSwResetReg                   */
+	mvAsicReg_GPON_SGL_CONFIG_REG                 = 201,    /* SglCfgReg                       */
+	mvAsicReg_GPON_SGL_STATS_REG                  = 202,    /* SglStatReg                      */
+
+	/*  Memory Registers           */
+	/* =========================== */
+	mvAsicReg_GPON_TX_CONST_DATA_RAM              = 206,
+	mvAsicReg_GPON_TX_CONST_DATA_RAM_IDLE         = 207,
+	mvAsicReg_GPON_TX_CONST_DATA_RAM_SN           = 208,
+	mvAsicReg_GPON_GEM_AES_PID_TABLE              = 209,
+	mvAsicReg_GPON_GEM_VALID_PID_TABLE            = 210,
+	mvAsicReg_GPON_TEST                           = 211,
+
+	/*  GPON MIB Counter Set       */
+	/* =========================== */
+	mvAsicReg_PON_MAC_MIB_COUNTERS_0              = 212,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_1              = 213,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_2              = 214,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_3              = 215,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_4              = 216,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_5              = 217,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_6              = 218,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_7              = 219,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_8              = 220,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_9              = 221,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_10             = 222,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_11             = 223,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_12             = 224,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_13             = 225,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_14             = 226,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_15             = 227,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_16             = 228,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_17             = 229,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_18             = 230,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_19             = 231,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_20             = 232,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_21             = 233,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_22             = 234,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_23             = 235,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_24             = 236,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_25             = 237,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_26             = 238,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_27             = 239,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_28             = 240,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_29             = 241,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_30             = 242,
+	mvAsicReg_PON_MAC_MIB_COUNTERS_31             = 243,
+
+	/*  GPON MIB Counter Control Registers */
+	/* =================================== */
+
+	mvAsicReg_PON_MIB_DEFAULT                     = 244,
+	mvAsicReg_PON_MAC_MIB_CONTROL_0               = 245,
+	mvAsicReg_PON_MAC_MIB_CONTROL_1               = 246,
+	mvAsicReg_PON_MAC_MIB_CONTROL_2               = 247,
+	mvAsicReg_PON_MAC_MIB_CONTROL_3               = 248,
+	mvAsicReg_PON_MAC_MIB_CONTROL_4               = 249,
+	mvAsicReg_PON_MAC_MIB_CONTROL_5               = 250,
+	mvAsicReg_PON_MAC_MIB_CONTROL_6               = 251,
+	mvAsicReg_PON_MAC_MIB_CONTROL_7               = 252,
+	mvAsicReg_PON_MAC_MIB_CONTROL_8               = 253,
+	mvAsicReg_PON_MAC_MIB_CONTROL_9               = 254,
+	mvAsicReg_PON_MAC_MIB_CONTROL_10              = 255,
+	mvAsicReg_PON_MAC_MIB_CONTROL_11              = 256,
+	mvAsicReg_PON_MAC_MIB_CONTROL_12              = 257,
+	mvAsicReg_PON_MAC_MIB_CONTROL_13              = 258,
+	mvAsicReg_PON_MAC_MIB_CONTROL_14              = 259,
+	mvAsicReg_PON_MAC_MIB_CONTROL_15              = 260,
+	mvAsicReg_PON_MAC_MIB_CONTROL_16              = 261,
+	mvAsicReg_PON_MAC_MIB_CONTROL_17              = 262,
+	mvAsicReg_PON_MAC_MIB_CONTROL_18              = 263,
+	mvAsicReg_PON_MAC_MIB_CONTROL_19              = 264,
+	mvAsicReg_PON_MAC_MIB_CONTROL_20              = 265,
+	mvAsicReg_PON_MAC_MIB_CONTROL_21              = 266,
+	mvAsicReg_PON_MAC_MIB_CONTROL_22              = 267,
+	mvAsicReg_PON_MAC_MIB_CONTROL_23              = 268,
+	mvAsicReg_PON_MAC_MIB_CONTROL_24              = 269,
+	mvAsicReg_PON_MAC_MIB_CONTROL_25              = 270,
+	mvAsicReg_PON_MAC_MIB_CONTROL_26              = 271,
+	mvAsicReg_PON_MAC_MIB_CONTROL_27              = 272,
+	mvAsicReg_PON_MAC_MIB_CONTROL_28              = 273,
+	mvAsicReg_PON_MAC_MIB_CONTROL_29              = 274,
+	mvAsicReg_PON_MAC_MIB_CONTROL_30              = 275,
+	mvAsicReg_PON_MAC_MIB_CONTROL_31              = 276,
+
+/******************************************************************************/
+/******************************************************************************/
+/* ========================================================================== */
+/* ========================================================================== */
+/* ==                                                                      == */
+/* ==           =========   =========   =========   ===       ==           == */
+/* ==           =========   =========   =========   ====      ==           == */
+/* ==           ==          ==     ==   ==     ==   == ==     ==           == */
+/* ==           ==          ==     ==   ==     ==   ==  ==    ==           == */
+/* ==           =========   =========   ==     ==   ==   ==   ==           == */
+/* ==           =========   =========   ==     ==   ==    ==  ==           == */
+/* ==           ==          ==          ==     ==   ==     == ==           == */
+/* ==           ==          ==          ==     ==   ==      ====           == */
+/* ==           =========   ==          =========   ==       ===           == */
+/* ==           =========   ==          =========   ==        ==           == */
+/* ==                                                                      == */
+/* ========================================================================== */
+/* ========================================================================== */
+/******************************************************************************/
+/******************************************************************************/
+
+	/*  EPON Interrupt Registers   */
+	/* =========================== */
+	mvAsicReg_EPON_INTR_REG                            = 300,
+	mvAsicReg_EPON_INTR_MASK                           = 301,
+	mvAsicReg_EPON_DBR_INT                             = 302,
+	mvAsicReg_EPON_DBR_INT_LLID_MASK                   = 303,
+	mvAsicReg_EPON_DBR_INT_MASK                        = 304,
+	mvAsicReg_EPON_DBR_LLID_INT                        = 305,
+
+	/*  EPON General Registers     */
+	/* =========================== */
+	mvAsicReg_EPON_GEN_MAC_VERSION_ADDR                = 314,
+	mvAsicReg_EPON_GEN_ONT_ENABLE                      = 315,
+	mvAsicReg_EPON_GEN_ONT_RX_ENABLE                   = 316,
+	mvAsicReg_EPON_GEN_ONT_TX_ENABLE                   = 317,
+	mvAsicReg_EPON_GEN_ONT_STATE                       = 318,
+	mvAsicReg_EPON_GEN_ONT_STATE_REG_AUTO_EN           = 319,
+	mvAsicReg_EPON_GEN_ONT_STATE_REG                   = 320,
+	mvAsicReg_EPON_GEN_ONT_STATE_REREG_AUTO_EN         = 321,
+	mvAsicReg_EPON_GEN_ONT_STATE_DEREG_AUTO_EN         = 322,
+	mvAsicReg_EPON_GEN_ONT_STATE_NACK_AUTO_EN          = 323,
+	mvAsicReg_EPON_GEN_TQ_SIZE                         = 324,
+	mvAsicReg_EPON_GEN_LASER_PARAM                     = 325,
+	mvAsicReg_EPON_GEN_TAIL_GUARD                      = 326,
+	mvAsicReg_EPON_GEN_SYNC_TIME                       = 327,
+	mvAsicReg_EPON_GEN_BROADCAST_ADDR_LOW              = 328,
+	mvAsicReg_EPON_GEN_BROADCAST_ADDR_HIGH             = 329,
+	mvAsicReg_EPON_GEN_CONFIGURATION                   = 330,
+	mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REPORT       = 331,
+	mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_ACK          = 332,
+	mvAsicReg_EPON_GEN_CONFIGURATION_AUTO_REQUEST      = 333,
+	mvAsicReg_EPON_GEN_SLD                             = 334,
+	mvAsicReg_EPON_GEN_MAC_CONTROL_TYPE                = 335,
+	mvAsicReg_EPON_GEN_LOCAL_TIMESTAMP                 = 336,
+	mvAsicReg_EPON_GEN_NUM_OF_PENDING_GRANTS           = 337,
+	mvAsicReg_EPON_GEN_SGL_STATUS                      = 338,
+	mvAsicReg_EPON_GEN_PON_PHY_DEBUG                   = 339,
+	mvAsicReg_EPON_GEN_SGL_SW_RESET                    = 340,
+	mvAsicReg_EPON_GEN_SGL_CONFIG                      = 341,
+	mvAsicReg_EPON_GEN_SGL_DEBOUNCE_CONFIG             = 342,
+	mvAsicReg_EPON_GEN_SGL_DEBOUNCE_ENABLE             = 343,
+	mvAsicReg_EPON_GEN_TCH_CHURNING_KEY                = 344,
+	mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE1              = 345,
+	mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE2              = 346,
+	mvAsicReg_EPON_GEN_DRIFT_THRESHOLD                 = 347,
+	mvAsicReg_EPON_GEN_TIMESTAMP_VAL_FOR_INTR          = 348,
+	mvAsicReg_EPON_GEN_ADDITIONAL_OPCODE3              = 349,
+#ifndef PON_Z1
+	mvAsicReg_EPON_GEN_LLID_CRC_CONFIG                 = 350,
+	mvAsicReg_EPON_GEN_TIMESTAMP_CONFIG                = 351,
+	mvAsicReg_EPON_GEN_ONT_RX_TIMESTAMP_CONFIG         = 352,
+	mvAsicReg_EPON_GEN_ONT_REGISTER_PACKET_PADDING     = 353,
+#endif
+	mvAsicReg_EPON_GEN_MAC_ADDR_LOW                    = 354,
+	mvAsicReg_EPON_GEN_MAC_ADDR_HIGH                   = 355,
+	mvAsicReg_EPON_GEN_UTM_TC_PERIOD                   = 356,
+	mvAsicReg_EPON_GEN_UTM_TC_PERIOD_VALID             = 357,
+	mvAsicReg_EPON_GEN_GEM_IPG_VAL                     = 358,
+	mvAsicReg_EPON_GEN_GEM_IPG_VAL_VALID               = 359,
+	mvAsicReg_EPON_GEN_ACT_TX_BITMAP                   = 360,
+	mvAsicReg_EPON_GEN_ACT_TX_VALID                    = 361,
+	mvAsicReg_EPON_GEN_TOD_INT_WIDTH                   = 362, /* General_ToD_Interrupt_Width */
+	mvAsicReg_EPON_TXM_EXT_REPORT_STATE                = 363,
+	mvAsicReg_EPON_TXM_EXT_REPORT_STATE_PER_TX         = 364,
+	mvAsicReg_EPON_TXM_EXT_REPORT_MAP_0                = 365,
+	mvAsicReg_EPON_TXM_EXT_REPORT_MAP_1                = 366,
+
+	/*  EPON RXP Registers         */
+	/* =========================== */
+	mvAsicReg_EPON_RXP_PACKET_SIZE_LIMIT               = 368,
+	mvAsicReg_EPON_RXP_PACKET_FILTER                   = 369,
+	mvAsicReg_EPON_RXP_CTRL_FRAME_FORWARD              = 370,
+	mvAsicReg_EPON_RXP_LLT_LLID_DATA                   = 371,
+	mvAsicReg_EPON_RXP_LLT_LLID_DATA_VALUE             = 372,
+	mvAsicReg_EPON_RXP_LLT_LLID_DATA_INDEX             = 373,
+	mvAsicReg_EPON_RXP_LLT_LLID_DATA_VALID             = 374,
+	mvAsicReg_EPON_RXP_ENCRYPTION_CONFIG               = 375,
+	mvAsicReg_EPON_RXP_ENCRYPTION_KEY0                 = 376,
+	mvAsicReg_EPON_RXP_ENCRYPTION_KEY1                 = 377,
+	mvAsicReg_EPON_RXP_DATA_FIFO_THRESH                = 378,
+
+	/*  EPON GPM Registers         */
+	/* =========================== */
+	mvAsicReg_EPON_GPM_MAX_FUTURE_GRANT_TIME           = 380,
+	mvAsicReg_EPON_GPM_MIN_PROCESSING_TIME             = 381,
+	mvAsicReg_EPON_GPM_DISCOVERY_GRANT_LENGTH          = 382,
+	mvAsicReg_EPON_GPM_RX_SYNC_TIME                    = 383,
+	mvAsicReg_EPON_GPM_GRANT_VALID                     = 384,
+	mvAsicReg_EPON_GPM_GRANT_MAX_FUTURE_TIME_ERR       = 385,
+	mvAsicReg_EPON_GPM_MIN_PROC_TIME_ERR               = 386,
+	mvAsicReg_EPON_GPM_LENGTH_ERR                      = 387,
+	mvAsicReg_EPON_GPM_DISCOVERY_AND_REGISTERED_ERR    = 388,
+	mvAsicReg_EPON_GPM_FIFO_FULL_ERR                   = 389,
+	mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_BCAST          = 390,
+	mvAsicReg_EPON_GPM_OPC_REG_NOT_DISC                = 391,
+	mvAsicReg_EPON_GPM_OPC_DISC_NOT_REG_NOT_BCAST      = 392,
+	mvAsicReg_EPON_GPM_OPC_DROPED_GRANT                = 393,
+	mvAsicReg_EPON_GPM_OPC_HIDDEN_GRANT                = 394,
+	mvAsicReg_EPON_GPM_OPC_BACK_TO_BACK_GRANT          = 395,
+
+	/*  EPON TXM Registers         */
+	/* =========================== */
+	mvAsicReg_EPON_TXM_DEFAULT_OVERHEAD                = 396,
+	mvAsicReg_EPON_TXM_CONFIGURATION                   = 397,
+	mvAsicReg_EPON_TXM_POWER_UP                        = 398, /* Tx_Multiplexer_Power_Up */
+	mvAsicReg_EPON_TXM_TX_LLID                         = 399,
+	mvAsicReg_EPON_TXM_CPP_RPRT_CONFIG                 = 400,
+	mvAsicReg_EPON_TXM_CPP_RPRT_BIT_MAP                = 401,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_SET              = 402,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_0                = 403,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_1                = 404,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_2                = 405,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_3                = 406,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_4                = 407,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_5                = 408,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_6                = 409,
+	mvAsicReg_EPON_TXM_CPP_RPRT_QUEUE_7                = 410,
+	mvAsicReg_EPON_TXM_CPP_RPRT_FEC_CONFIG             = 411,
+	mvAsicReg_EPON_TXM_CPP_RPM_REPORT_CONFIG           = 412,
+	mvAsicReg_EPON_TXM_CPP_RPM_CTRL_FIFO_DBA           = 413,
+	mvAsicReg_EPON_TXM_CPP_RPM_ADX_REPORT_TBL          = 414,
+	mvAsicReg_EPON_TXM_CTRL_FIFO_FLUSH                 = 415,
+	mvAsicReg_EPON_TXM_HIGH_PRI_TX_STATE_BITMAP        = 420,
+	mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_0               = 421,
+	mvAsicReg_EPON_TXM_HIGH_PRI_TX_MAP_1               = 422,
+
+	/*  EPON PCS Registers         */
+	/* =========================== */
+	mvAsicReg_EPON_PCS_CONFIGURATION                   = 430,
+	mvAsicReg_EPON_PCS_CONFIGURATION_RX_ENABLE         = 431,
+	mvAsicReg_EPON_PCS_CONFIGURATION_TX_ENABLE         = 432,
+	mvAsicReg_EPON_PCS_DELAY_CONFIG                    = 433,
+	mvAsicReg_EPON_PCS_STATS_FEC_0                     = 434,
+	mvAsicReg_EPON_PCS_STATS_FEC_1                     = 435,
+	mvAsicReg_EPON_PCS_STATS_FEC_2                     = 436,
+	mvAsicReg_EPON_PCS_STATS_0                         = 437,
+	mvAsicReg_EPON_PCS_STATS_1                         = 438,
+	mvAsicReg_EPON_PCS_STATS_2                         = 439,
+	mvAsicReg_EPON_PCS_STATS_3                         = 440,
+	mvAsicReg_EPON_PCS_STATS_4                         = 441,
+	mvAsicReg_EPON_PCS_FRAME_SZ_LIMITS                 = 442,
+
+	/*  EPON DDM Registers         */
+	/* =========================== */
+	mvAsicReg_EPON_DDM_DELAY_CONFIG                    = 458,
+	mvAsicReg_EPON_DDM_TX_POLARITY                     = 459,
+	/* statistics */
+	mvAsicReg_EPON_STAT_RXP_FCS_ERROR_CNT              = 460,
+	mvAsicReg_EPON_STAT_RXP_SHORT_ERROR_CNT            = 461,
+	mvAsicReg_EPON_STAT_RXP_LONG_ERROR_CNT             = 462,
+	mvAsicReg_EPON_STAT_RXP_DATA_FRAMES_CNT            = 463,
+	mvAsicReg_EPON_STAT_RXP_CTRL_FRAMES_CNT            = 464,
+	mvAsicReg_EPON_STAT_RXP_REPORT_FRAMES_CNT          = 465,
+	mvAsicReg_EPON_STAT_RXP_GATE_FRAMES_CNT            = 466,
+	mvAsicReg_EPON_STAT_TXP_CTRL_REG_REQ_FRAMES_CNT    = 467,
+	mvAsicReg_EPON_STAT_TXP_CTRL_REG_ACK_FRAMES_CNT    = 468,
+	mvAsicReg_EPON_STAT_TXP_CTRL_REPORT_FRAMES_CNT     = 469,
+	mvAsicReg_EPON_STAT_TXP_DATA_FRAMES_CNT            = 470,
+	mvAsicReg_EPON_STAT_TXP_TX_ALLOWED_BYTE_CNT        = 471,
+
+	/*  EPON Control Packet queue Registers   */
+	/* =====================================  */
+	mvAsicReg_EPON_CPQ_RX_CTRL_Q_READ                  = 472,
+	mvAsicReg_EPON_CPQ_RX_CTRL_Q_USED                  = 473,
+	mvAsicReg_EPON_CPQ_RX_RPRT_Q_READ                  = 474,
+	mvAsicReg_EPON_CPQ_RX_RPRT_Q_USED                  = 475,
+	mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_L               = 476,
+	mvAsicReg_EPON_CPQ_RX_CTRL_HQ_READ_H               = 477,
+	mvAsicReg_EPON_CPQ_RX_CTRL_HQ_USED                 = 478,
+	mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_L               = 479,
+	mvAsicReg_EPON_CPQ_RX_RPRT_HQ_READ_H               = 480,
+	mvAsicReg_EPON_CPQ_RX_RPRT_HQ_USED                 = 481,
+	mvAsicReg_EPON_CPQ_TX_CTRL_Q_WRITE                 = 482,
+	mvAsicReg_EPON_CPQ_TX_CTRL_Q_FREE                  = 483,
+	mvAsicReg_EPON_CPQ_TX_CTRL_HQ_WRITE                = 484,
+	mvAsicReg_EPON_CPQ_TX_CTRL_HQ_FREE                 = 485,
+
+	/*  P2P Registers                         */
+	/* =====================================  */
+	mvAsicReg_P2P_GEN_ONT_MODE                         = 490,
+	mvAsicReg_P2P_PCS_CONFIGURATION                    = 491,
+	mvAsicReg_P2P_TXM_CFG_MODE                         = 492,
+
+	/*  SERDES Registers                      */
+	/* =====================================  */
+	mvAsicReg_PON_SERDES_PHY_CTRL_0                    = 500,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_Pll             = 501,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_RX              = 502,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_TX              = 503,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_RST                = 504,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_RST_TX_DOUT        = 505,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_RST_CORE           = 506,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_RX_INIT            = 507,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_RX_RATE            = 508,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_TX_RATE            = 509,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_SEL_GEPON          = 510,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_SEL_REF_CLK        = 511,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_REF_CLK_25M        = 512,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_CID_REV            = 513,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_PU_TX_SOURCE       = 514,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_REF_CLK_DISABLE    = 515,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_TX_IDLE            = 516,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_IO_EN          = 517,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_HW_SELECT   = 518,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_FORCE       = 519,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_BEN_SW_VALUE       = 520,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_TOD_OVERRIDE       = 521,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_DIG_TEST_EN        = 522,
+	mvAsicReg_PON_SERDES_PHY_CTRL_0_EPON_MODE_SEL      = 523,
+
+	mvAsicReg_PON_SERDES_PHY_CTRL_1_PHY_SOURCE         = 524,
+
+	mvAsicReg_PON_SERDES_PHY_STATUS_INIT_DONE          = 525,
+	mvAsicReg_PON_SERDES_PHY_STATUS_READY_TX           = 526,
+	mvAsicReg_PON_SERDES_PHY_STATUS_READY_RX           = 527,
+	mvAsicReg_PON_SERDES_PHY_STATUS_REF_CLK_DIS_ACK    = 528,
+
+	mvAsicReg_PON_SERDES_CLK_SEL                       = 529,
+	mvAsicReg_PON_SERDES_CLK_EN                        = 530,
+	mvAsicReg_PON_MAC_CLK_SEL                          = 531,
+	mvAsicReg_PON_REF_CLK_EN                           = 532,
+
+	mvAsicReg_PON_MAC_GPON_CLK_EN                      = 533,
+	mvAsicReg_PON_MAC_SW_RESET_CTRL                    = 534,
+
+	mvAsicReg_PON_SERDES_INTERNAL_POWER_REG_0          = 535,
+	mvAsicReg_PON_SERDES_INTERNAL_REG_51               = 536,
+	mvAsicReg_PON_SERDES_INTERNAL_REG_3D               = 537,
+	mvAsicReg_PON_SERDES_INTERNAL_REG_23_LOOP_TIMING   = 538,
+	mvAsicReg_PON_SERDES_INTERNAL_REG_26_TX_DRV_IDLE   = 539,
+	mvAsicReg_PON_SERDES_INTERNAL_REG_OFFSET_148       = 540,
+	mvAsicReg_PON_SERDES_INTERNAL_REG_OFFSET_178       = 541,
+
+	mvAsicReg_PON_XVR_TX_DATA_OUT_17                   = 550,
+	mvAsicReg_PON_XVR_TX_DATA_OUT_36                   = 551,
+	mvAsicReg_PON_XVR_TX_DATA_OUT_37                   = 552,
+	mvAsicReg_PON_XVR_TX_DATA_OUT_41                   = 553,
+	mvAsicReg_PON_XVR_TX_DATA_OUT_45                   = 554,
+	mvAsicReg_PON_XVR_TX_DATA_OUT_65                   = 555,
+	mvAsicReg_PON_XVR_TX_DATA_OUT_68                   = 556,
+	mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_17              = 557,
+	mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_36              = 558,
+	mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_37              = 559,
+	mvAsicReg_PON_XVR_RX_INPUT_41                      = 560,
+	mvAsicReg_PON_XVR_RX_INPUT_45                      = 561,
+	mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_65              = 562,
+	mvAsicReg_PON_XVR_TX_OUTPUT_ENABLE_68              = 563,
+	mvAsicReg_PON_SERDES_INTERNAL_OPEN_TX_DOOR_15      = 564,
+	mvAsicReg_PON_SERDES_POWER_PHY_MODE                = 565,
+	mvAsicReg_PON_SYS_LED_ENABLE                       = 566,
+	mvAsicReg_PON_SYS_LED_STATE                        = 567,
+	mvAsicReg_PON_SYS_LED_BLINK                        = 568,
+	mvAsicReg_PON_SYS_LED_BLINK_FREQ                   = 569,
+	mvAsicReg_PON_SYNC_LED_ENABLE                      = 570,
+	mvAsicReg_PON_SYNC_LED_STATE                       = 571,
+	mvAsicReg_PON_SYNC_LED_BLINK                       = 572,
+	mvAsicReg_PON_SYNC_LED_BLINK_FREQ                  = 573,
+	mvAsicReg_PON_LED_BLINK_FREQ_A_ON                  = 574,
+	mvAsicReg_PON_LED_BLINK_FREQ_A_OFF                 = 575,
+	mvAsicReg_PON_LED_BLINK_FREQ_B_ON                  = 576,
+	mvAsicReg_PON_LED_BLINK_FREQ_B_OFF                 = 577,
+	mvAsicReg_PON_DG_CTRL_EN                           = 578,
+	mvAsicReg_PON_DG_CTRL_POLARITY                     = 579,
+	mvAsicReg_PON_DG_THRESHOLD                         = 580,
+	mvAsicReg_PT_PATTERN_SELECT                        = 581,
+	mvAsicReg_PT_PATTERN_ENABLED                       = 582,
+	mvAsicReg_PT_PATTERN_DATA                          = 583,
+	mvAsicReg_PT_PATTERN_USER_DATA_01                  = 584,
+	mvAsicReg_PT_PATTERN_USER_DATA_02                  = 585,
+	mvAsicReg_PT_PATTERN_USER_DATA_03                  = 586,
+	mvAsicReg_PT_PATTERN_USER_DATA_04                  = 587,
+	mvAsicReg_PT_PATTERN_USER_DATA_05                  = 588,
+
+	mvAsicReg_GUNIT_TX_0_PKT_MOD_MAX_HEAD_SIZE_CFG     = 590,
+	mvAsicReg_GUNIT_TX_1_PKT_MOD_MAX_HEAD_SIZE_CFG     = 591,
+	mvAsicReg_GUNIT_TX_2_PKT_MOD_MAX_HEAD_SIZE_CFG     = 592,
+	mvAsicReg_GUNIT_TX_3_PKT_MOD_MAX_HEAD_SIZE_CFG     = 593,
+	mvAsicReg_GUNIT_TX_4_PKT_MOD_MAX_HEAD_SIZE_CFG     = 594,
+	mvAsicReg_GUNIT_TX_5_PKT_MOD_MAX_HEAD_SIZE_CFG     = 595,
+	mvAsicReg_GUNIT_TX_6_PKT_MOD_MAX_HEAD_SIZE_CFG     = 596,
+	mvAsicReg_GUNIT_TX_7_PKT_MOD_MAX_HEAD_SIZE_CFG     = 597,
+
+	mvAsicReg_GUNIT_TX_0_PKT_MOD_STATS_PKT_COUNT       = 600,
+	mvAsicReg_GUNIT_TX_1_PKT_MOD_STATS_PKT_COUNT       = 601,
+	mvAsicReg_GUNIT_TX_2_PKT_MOD_STATS_PKT_COUNT       = 602,
+	mvAsicReg_GUNIT_TX_3_PKT_MOD_STATS_PKT_COUNT       = 603,
+	mvAsicReg_GUNIT_TX_4_PKT_MOD_STATS_PKT_COUNT       = 604,
+	mvAsicReg_GUNIT_TX_5_PKT_MOD_STATS_PKT_COUNT       = 605,
+	mvAsicReg_GUNIT_TX_6_PKT_MOD_STATS_PKT_COUNT       = 606,
+	mvAsicReg_GUNIT_TX_7_PKT_MOD_STATS_PKT_COUNT       = 607,
+
+	mvAsicReg_PPv2_TX_PON_BYTE_CNT_INDEX               = 610,
+	mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_QUE_OVR     = 611,
+	mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG1_PKT_MOD     = 612,
+	mvAsicReg_PPv2_TX_PON_BYTE_CNT_CONFIG2_POST_FEC    = 613,
+	mvAsicReg_PPv2_PON_FEC                             = 614,
+
+	mvAsicReg_C5000_BIT_1                              = 615,
+	mvAsicReg_C5008_BIT_0                              = 616,
+	mvAsicReg_C5008_BIT_3                              = 617,
+	mvAsicReg_18900_BIT_14                             = 618,
+	mvAsicReg_18900_BIT_19                             = 619,
+	mvAsicReg_18900_BIT_21                             = 620,
+	mvAsicReg_GMAC1_AUTONEG_SPEED                      = 621,
+	mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_MODE          = 622,
+	mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_ENABLE        = 623,
+	mvAsicReg_GMAC1_AUTONEG_DUPLEX_MODE                = 624,
+	mvAsicReg_GMAC1_AUTONEG_DUPLEX_ENABLE              = 625,
+
+	/*  MPP Registers                         */
+	/* =====================================  */
+	mvAsicReg_PON_MPP_00                               = 700,
+	mvAsicReg_PON_MPP_01                               = 701,
+	mvAsicReg_PON_MPP_02                               = 702,
+	mvAsicReg_PON_MPP_03                               = 703,
+	mvAsicReg_PON_MPP_04                               = 704,
+	mvAsicReg_PON_MPP_05                               = 705,
+	mvAsicReg_PON_MPP_06                               = 706,
+	mvAsicReg_PON_MPP_07                               = 707,
+	mvAsicReg_PON_MPP_08                               = 708,
+	mvAsicReg_PON_MPP_09                               = 709,
+	mvAsicReg_PON_MPP_10                               = 710,
+	mvAsicReg_PON_MPP_11                               = 711,
+	mvAsicReg_PON_MPP_12                               = 712,
+	mvAsicReg_PON_MPP_13                               = 713,
+	mvAsicReg_PON_MPP_14                               = 714,
+	mvAsicReg_PON_MPP_15                               = 715,
+	mvAsicReg_PON_MPP_16                               = 716,
+	mvAsicReg_PON_MPP_17                               = 717,
+	mvAsicReg_PON_MPP_18                               = 718,
+	mvAsicReg_PON_MPP_19                               = 719,
+	mvAsicReg_PON_MPP_20                               = 720,
+	mvAsicReg_PON_MPP_21                               = 721,
+	mvAsicReg_PON_MPP_22                               = 722,
+	mvAsicReg_PON_MPP_23                               = 723,
+	mvAsicReg_PON_MPP_24                               = 724,
+	mvAsicReg_PON_MPP_25                               = 725,
+	mvAsicReg_PON_MPP_26                               = 726,
+	mvAsicReg_PON_MPP_27                               = 727,
+	mvAsicReg_PON_MPP_28                               = 728,
+	mvAsicReg_PON_MPP_29                               = 729,
+	mvAsicReg_PON_MPP_30                               = 730,
+	mvAsicReg_PON_MPP_31                               = 731,
+	mvAsicReg_PON_MPP_32                               = 732,
+	mvAsicReg_PON_MPP_33                               = 733,
+	mvAsicReg_PON_MPP_34                               = 734,
+	mvAsicReg_PON_MPP_35                               = 735,
+	mvAsicReg_PON_MPP_36                               = 736,
+	mvAsicReg_PON_MPP_37                               = 737,
+	mvAsicReg_PON_MPP_38                               = 738,
+	mvAsicReg_PON_MPP_39                               = 739,
+	mvAsicReg_PON_MPP_40                               = 740,
+	mvAsicReg_PON_MPP_41                               = 741,
+	mvAsicReg_PON_MPP_42                               = 742,
+	mvAsicReg_PON_MPP_43                               = 743,
+	mvAsicReg_PON_MPP_44                               = 744,
+	mvAsicReg_PON_MPP_45                               = 745,
+	mvAsicReg_PON_MPP_46                               = 746,
+	mvAsicReg_PON_MPP_47                               = 747,
+	mvAsicReg_PON_MPP_48                               = 748,
+	mvAsicReg_PON_MPP_49                               = 749,
+	mvAsicReg_PON_MPP_50                               = 750,
+	mvAsicReg_PON_MPP_51                               = 751,
+	mvAsicReg_PON_MPP_52                               = 752,
+	mvAsicReg_PON_MPP_53                               = 753,
+	mvAsicReg_PON_MPP_54                               = 754,
+	mvAsicReg_PON_MPP_55                               = 755,
+	mvAsicReg_PON_MPP_56                               = 756,
+	mvAsicReg_PON_MPP_57                               = 757,
+	mvAsicReg_PON_MPP_58                               = 758,
+	mvAsicReg_PON_MPP_59                               = 759,
+	mvAsicReg_PON_MPP_60                               = 760,
+	mvAsicReg_PON_MPP_61                               = 761,
+	mvAsicReg_PON_MPP_62                               = 762,
+	mvAsicReg_PON_MPP_63                               = 763,
+	mvAsicReg_PON_MPP_64                               = 764,
+	mvAsicReg_PON_MPP_65                               = 765,
+	mvAsicReg_PON_MPP_66                               = 766,
+
+	mvAsicReg_MAX_NUM_OF_REGS
+
+} E_asicGlobalRegs;
+
+/* Register access enumeration */
+typedef enum {
+	asicRO = 0x01,
+	asicWO = 0x02,
+	asicRW = 0x03
+} E_asicAccessType;
+
+typedef enum {
+	funcRegR = 0x00,
+	funcRegW = 0x01
+} E_asicRegFuncType;
+
+/* Typedefs
+   ------------------------------------------------------------------------------*/
+typedef struct {
+	E_asicGlobalRegs enumVal;       /* The enumeration value of the Register */
+	MV_U32 address;                 /* The absolute address of the Register */
+	MV_U32 offset;                  /* The relative address of the Register */
+	E_asicAccessType accessType;    /* Access Type: Read Only, Write Only, Read/Write */
+	MV_U32 mask;                    /* Mask for sub-fields Register */
+	MV_U32 shift;                   /* Shift field location for sub-fields Register */
+	MV_U32 tblLength;               /* Number of entries in the table, Only relevant for tables */
+	MV_U32 tblEntrySize;            /* The length in interval of 32bits of a table entry, Only relevant for tables */
+	MV_U32 accessCount;             /* Number accesses to the specific Register */
+	MV_U8 description[64];          /* Description */
+} S_asicGlobalRegDb;
+
+/* Global variables
+   ------------------------------------------------------------------------------*/
+
+/* Global functions
+   ------------------------------------------------------------------------------*/
+MV_STATUS asicOntGlbRegRead(E_asicGlobalRegs reg, MV_U32 *pvalue_p, MV_U32 entry);
+MV_STATUS asicOntGlbRegWrite(E_asicGlobalRegs reg, MV_U32 value, MV_U32 entry);
+MV_STATUS asicOntGlbRegReadNoCheck(E_asicGlobalRegs reg, MV_U32 *pvalue, MV_U32 entry);
+MV_STATUS asicOntGlbRegWriteNoCheck(E_asicGlobalRegs reg, MV_U32 value, MV_U32 entry);
+MV_STATUS asicOntMiscRegWrite(E_asicGlobalRegs reg, MV_U32 value, MV_U32 entry);
+MV_STATUS asicOntMiscRegRead(E_asicGlobalRegs reg, MV_U32 *pvalue, MV_U32 entry);
+MV_STATUS asicOntMiscRegAddressGet(E_asicGlobalRegs reg, MV_U32 entry, MV_U32 *regAddr);
+
+/* Macros
+   ------------------------------------------------------------------------------*/
+#define PON_GPIO_NOT_USED (0xFFFF)
+#define PON_GPIO_GET(gppClass, gpioGroup, gpioMask) \
+	{ \
+		MV_32 gpioNum; \
+		gpioNum = mvBoarGpioPinNumGet(gppClass, 0); \
+		if (gpioNum < 0) \
+		{ \
+			gpioGroup = PON_GPIO_NOT_USED; \
+			gpioMask  = PON_GPIO_NOT_USED; \
+		} else { \
+			gpioGroup = gpioNum >> 5; \
+			gpioMask  = (1 << (gpioNum & 0x1F)); \
+		} \
+	}
+
+#endif /* _ONU_GPON_REG_H */
\ No newline at end of file
-- 
1.7.5.4

