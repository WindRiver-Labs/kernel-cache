From 52ab3da7c5b9f6d32cd400fb11a34bf22610554e Mon Sep 17 00:00:00 2001
From: Joe Zhou <shjzhou@marvell.com>
Date: Tue, 25 Feb 2014 13:46:09 +0800
Subject: [PATCH 1421/1825] alp: timing: change the clock source to 25MHz for
 ALP-A0

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 02f3d7f2c4ac9628566ced2958a0681ed7c8c826

	For Z1/2/3, clock source is still L2 clock
	For A0, clock source is 25MHz

Change-Id: I09a970a66c4fe2b8b8257720af0c300671fcb446
Signed-off-by: Joe Zhou <shjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5922
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/time.c |   25 ++++++++++++++++++++-----
 1 files changed, 20 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-avantalp/time.c b/arch/arm/mach-avantalp/time.c
index 304205f..de0254e 100644
--- a/arch/arm/mach-avantalp/time.c
+++ b/arch/arm/mach-avantalp/time.c
@@ -35,6 +35,8 @@
 #include "common/mvTypes.h"
 #include "ctrlEnv/mvSemaphore.h"
 
+#define ALP_TIMER_RATE     25000000
+
 /* SoC global timer */
 #define TIMER_CTRL		(MV_CNTMR_REGS_OFFSET + 0x0000)
 #define  TIMER_EN(x)		(1 << (2 * x))
@@ -103,7 +105,10 @@ int alp_clkevt_next_event(unsigned long delta, struct clock_event_device *evt)
 
 	/* Enable the timer */
 	u = MV_REG_READ(TIMER_CTRL);
-	u = (u & ~TIMER_RELOAD_EN(t)) | TIMER_EN(t);
+	if (mvCtrlRevGet() <= MV_88F66X0_Z3_ID)
+		u = (u & ~TIMER_RELOAD_EN(t)) | TIMER_EN(t);
+	else
+		u = (u & ~TIMER_RELOAD_EN(t)) | TIMER_EN(t) | TIMER_TURN_25MHZ(t);
 	MV_REG_WRITE(TIMER_CTRL, u);
 	mvSemaUnlock(MV_SEMA_CLOCK);
 
@@ -125,7 +130,10 @@ static void alp_clkevt_mode(enum clock_event_mode mode, struct clock_event_devic
 
 		/* Enable timer */
 		u = MV_REG_READ(TIMER_CTRL);
-		u |= TIMER_EN(t) | TIMER_RELOAD_EN(t);
+		if (mvCtrlRevGet() <= MV_88F66X0_Z3_ID)
+			u |= TIMER_EN(t) | TIMER_RELOAD_EN(t);
+		else
+			u |= TIMER_EN(t) | TIMER_RELOAD_EN(t) | TIMER_TURN_25MHZ(t);
 		MV_REG_WRITE(TIMER_CTRL, u);
 	} else {
 		/* Disable timer */
@@ -230,7 +238,10 @@ static void alp_setup_clocksource(int timer, long rate)
 
 	/* Config clock source for timer */
 	u = MV_REG_READ(TIMER_CTRL);
-	u |= TIMER_EN(i) | TIMER_RELOAD_EN(i);
+	if (mvCtrlRevGet() <= MV_88F66X0_Z3_ID)
+		u |= TIMER_EN(i) | TIMER_RELOAD_EN(i);
+	else
+		u |= TIMER_EN(i) | TIMER_RELOAD_EN(i) | TIMER_TURN_25MHZ(i);
 	MV_REG_WRITE(TIMER_CTRL, u);
 
 	clocksource_mmio_init(base, "alp_clk_source",
@@ -328,8 +339,12 @@ static void __init alp_timer_init(void)
 {
 	pr_info("Initializing Avanta-LP timers:\n");
 
-	ca9_twd_rate = alp_ca9_twd_timer_rate_get();
-	mv_twd_rate = ca9_twd_rate / 2;
+	if (mvCtrlRevGet() <= MV_88F66X0_Z3_ID) {
+		ca9_twd_rate = alp_ca9_twd_timer_rate_get();
+		mv_twd_rate = ca9_twd_rate / 2;
+	} else {
+		mv_twd_rate = ALP_TIMER_RATE;
+	}
 
 	ticks_per_jiffy = (mv_twd_rate + HZ/2) / HZ;
 
-- 
1.7.5.4

