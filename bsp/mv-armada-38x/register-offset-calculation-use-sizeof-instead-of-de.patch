From 09ee2c70141107d8031867d48f0ed6e22eedd2ea Mon Sep 17 00:00:00 2001
From: Dovrat <dovrat@marvell.com>
Date: Tue, 8 Apr 2014 16:32:53 +0300
Subject: [PATCH 1543/1825] register offset calculation use sizeof instead of
 defined

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 2512cd5d11e62a6ca806ed977914449163b70127

Change-Id: I8376d3bbad182a0f54c703e7431532948738373b
Signed-off-by: Dovrat <dovrat@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6999
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/bm/mv_bm_regs.c |  102 +++++++++++-----------
 1 files changed, 52 insertions(+), 50 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/bm/mv_bm_regs.c b/drivers/net/ethernet/marvell/pp3/bm/mv_bm_regs.c
index 764ffc4..5b574e1 100644
--- a/drivers/net/ethernet/marvell/pp3/bm/mv_bm_regs.c
+++ b/drivers/net/ethernet/marvell/pp3/bm/mv_bm_regs.c
@@ -82,6 +82,7 @@ int bm_reg_address_alias_init(void)
 
 	siliconBase = mv_hw_silicon_base_addr_get();
 
+	pr_info(" Address silicon base address is %x\n", siliconBase);
 	bm.base = siliconBase + QM_UNIT_OFFSET + BM_UNIT_OFFSET;	/*0x004D0000*/
 
 	for (bid = 0; bid < 5; bid++) {
@@ -172,69 +173,69 @@ int bm_reg_address_alias_init(void)
 int bm_reg_size_alias_init(void)
 {
 	int rc = -BM_ALIAS_ERROR;
-	u32 bid, word_size_in_bits, byte_size_in_bits = 8;
+	u32 bid, word_size_in_bytes, byte_size_in_bits = 8;
 
-	word_size_in_bits = 32/byte_size_in_bits;	/* word_size_in_bits = 4 */
+	word_size_in_bytes = sizeof(u32);	/* word_size_in_bytes = 32/8 = 4 */
 
-	/*memset(&bm_reg_size,0,sizeof(bm_reg_size));*/
+	/*memset(&bm_reg_size, 0, sizeof(bm_reg_size));*/
 
 	for (bid = 0; bid < 5; bid++) {
-		bm_reg_size.b_pool_n_conf[bid]             = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.b_pool_n_st[bid]               = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.b_sys_rec_bank_intr_cause[bid] = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.b_sys_rec_bank_intr_mask[bid]  = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.b_sys_rec_bank_d0_st[bid]      = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.b_sys_rec_bank_d1_st[bid]      = 32/byte_size_in_bits/word_size_in_bits;
+		bm_reg_size.b_pool_n_conf[bid]             = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.b_pool_n_st[bid]               = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.b_sys_rec_bank_intr_cause[bid] = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.b_sys_rec_bank_intr_mask[bid]  = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.b_sys_rec_bank_d0_st[bid]      = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.b_sys_rec_bank_d1_st[bid]      = 32/(word_size_in_bytes * byte_size_in_bits);
 	}
 
-	bm_reg_size.sw_debug_rec_intr_cause    = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sw_debug_rec_intr_mask     = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sys_nrec_common_intr_cause = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sys_nrec_common_intr_mask  = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sys_nrec_common_d0_st      = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sys_nrec_common_d1_st      = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sys_nrec_common_d2_st      = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sys_nrec_common_d3_st      = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.common_general_conf        = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.dram_domain_conf           = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.dram_cache_conf            = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.dram_qos_conf              = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.error_intr_cause           = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.error_intr_mask            = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.func_intr_cause            = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.func_intr_mask             = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.ecc_err_intr_cause         = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.ecc_err_intr_mask          = 32/byte_size_in_bits/word_size_in_bits;
+	bm_reg_size.sw_debug_rec_intr_cause    = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sw_debug_rec_intr_mask     = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sys_nrec_common_intr_cause = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sys_nrec_common_intr_mask  = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sys_nrec_common_d0_st      = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sys_nrec_common_d1_st      = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sys_nrec_common_d2_st      = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sys_nrec_common_d3_st      = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.common_general_conf        = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.dram_domain_conf           = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.dram_cache_conf            = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.dram_qos_conf              = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.error_intr_cause           = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.error_intr_mask            = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.func_intr_cause            = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.func_intr_mask             = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.ecc_err_intr_cause         = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.ecc_err_intr_mask          = 32/(word_size_in_bytes * byte_size_in_bits);
 
 	for (bid = 0; bid < 5; bid++) {
-		bm_reg_size.pool_nempty_intr_cause[bid] = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.pool_nempty_intr_mask[bid]  = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.dpool_ae_intr_cause[bid]    = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.dpool_ae_intr_mask[bid]     = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.dpool_af_intr_cause[bid]    = 32/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.dpool_af_intr_mask[bid]     = 32/byte_size_in_bits/word_size_in_bits;
+		bm_reg_size.pool_nempty_intr_cause[bid] = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.pool_nempty_intr_mask[bid]  = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.dpool_ae_intr_cause[bid]    = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.dpool_ae_intr_mask[bid]     = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.dpool_af_intr_cause[bid]    = 32/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.dpool_af_intr_mask[bid]     = 32/(word_size_in_bytes * byte_size_in_bits);
 	}
 
-	bm_reg_size.b_bank_req_fifos_st     = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.b0_past_alc_fifos_st    = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.bgp_past_alc_fifos_st   = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.b0_rls_wrp_ppe_fifos_st = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.dm_axi_fifos_st         = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.drm_pend_fifo_st        = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.dm_axi_wr_pend_fifo_st  = 32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.bm_idle_st              = 32/byte_size_in_bits/word_size_in_bits;
+	bm_reg_size.b_bank_req_fifos_st     = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.b0_past_alc_fifos_st    = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.bgp_past_alc_fifos_st   = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.b0_rls_wrp_ppe_fifos_st = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.dm_axi_fifos_st         = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.drm_pend_fifo_st        = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.dm_axi_wr_pend_fifo_st  = 32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.bm_idle_st              = 32/(word_size_in_bytes * byte_size_in_bits);
 
 	for (bid = 0; bid < 5; bid++) {
-		bm_reg_size.dpr_c_mng_stat[bid]  =  96/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.tpr_c_mng_b_dyn[bid] =  64/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.tpr_ctrs_0_b[bid]    = 128/byte_size_in_bits/word_size_in_bits;
-		bm_reg_size.sram_b_cache[bid]    =  64/byte_size_in_bits/word_size_in_bits;
+		bm_reg_size.dpr_c_mng_stat[bid]  =  96/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.tpr_c_mng_b_dyn[bid] =  64/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.tpr_ctrs_0_b[bid]    = 128/(word_size_in_bytes * byte_size_in_bits);
+		bm_reg_size.sram_b_cache[bid]    =  64/(word_size_in_bytes * byte_size_in_bits);
 	}
 
-	bm_reg_size.dpr_d_mng_ball_stat  = 160/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.tpr_dro_mng_ball_dyn =  64/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.tpr_drw_mng_ball_dyn =  32/byte_size_in_bits/word_size_in_bits;
-	bm_reg_size.sram_b_cache[0]      = 128/byte_size_in_bits/word_size_in_bits;
+	bm_reg_size.dpr_d_mng_ball_stat  = 160/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.tpr_dro_mng_ball_dyn =  64/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.tpr_drw_mng_ball_dyn =  32/(word_size_in_bytes * byte_size_in_bits);
+	bm_reg_size.sram_b_cache[0]      = 128/(word_size_in_bytes * byte_size_in_bits);
 
 	rc = OK;
 	return rc;
@@ -244,7 +245,7 @@ int bm_reg_offset_alias_init(void)
 {
 	int rc = -BM_ALIAS_ERROR;
 	u32 bid/*, word_size = 32/8*/;
-	/*memset(&bm_reg_offset,0,sizeof(bm_reg_offset));*/
+	/*memset(&bm_reg_offset, 0, sizeof(bm_reg_offset));*/
 
 	for (bid = 0; bid < 5; bid++) {
 		bm_reg_offset.b_pool_n_conf[bid]             = 8;
@@ -314,6 +315,7 @@ int bm_register_name_get(u32 reg_base_address, u32 reg_offset, char *reg_name)
 	int rc = -BM_ALIAS_ERROR;
 	u32 pid, bid, pid_local, global_pool_idx, line;
 
+	reg_name[0] = '\0';
 	for (bid = 0; bid < 5; bid++) {
 		if (reg_base_address == bm.b_pool_n_conf[bid]) {
 			pid_local = reg_offset / bm_reg_offset.b_pool_n_conf[bid];
-- 
1.7.5.4

