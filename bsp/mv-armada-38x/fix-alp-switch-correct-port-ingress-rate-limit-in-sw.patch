From 52a2a4105db0c3903f95439b7154e593f5b74168 Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Tue, 27 May 2014 14:20:26 +0800
Subject: [PATCH 1687/1825] fix: alp: switch: correct port ingress rate limit
 in switch.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 5a717140f309a444f9407750dfc0999a405e0ccc

	Merge the updates of correcting port ingress rate limit in switch
	from xpon/xpon_sdk branch sdk_3.1.0 with the commit id
	fb65c0d2d40c9e197e94060d0ae545bb2f5f1b66
	SYSTEMSW-634 - <port ingress rate limit [unicast] is not accurate>

Signed-off-by: Ken Ma <make@marvell.com>

Change-Id: I6e42400e02e2afcfe8be6e694005b358a1dc33c5
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8238
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../qd-dsdt-3.3/Include/h/msApi/msApiInternal.h    |   27 +++--
 .../mv_hal/qd-dsdt-3.3/Include/msApiDefs.h         |   57 +++++++++
 .../mv_hal/qd-dsdt-3.3/src/msapi/gtPIRL2.c         |  124 ++++++++++++++++----
 3 files changed, 174 insertions(+), 34 deletions(-)

diff --git a/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/h/msApi/msApiInternal.h b/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/h/msApi/msApiInternal.h
index a296086..95b7326 100644
--- a/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/h/msApi/msApiInternal.h
+++ b/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/h/msApi/msApiInternal.h
@@ -1075,7 +1075,8 @@ extern "C" {
 /* Pearl features */
 
 /***************************************************************************/
-
+/*PIRL Alpha factor macro for internal switch*/
+#define PIRL_ALPHA 6250000
 
 /* Macros to utilize Device Group */
 
@@ -1101,15 +1102,15 @@ extern "C" {
 
 
 #define RECOMMENDED_ESB_LIMIT(dev, _bps)                    \
-        ((IS_IN_DEV_GROUP(dev,DEV_PIRL_RESOURCE))?16777200:0xFFFFFF)
+	((IS_IN_DEV_GROUP(dev, DEV_PIRL_RESOURCE)) ? 16777200 : 0xFFFFF0)
 
 #define RECOMMENDED_CBS_LIMIT(dev, _bps)                    \
-        ((IS_IN_DEV_GROUP(dev,DEV_PIRL_RESOURCE))?393216:0x200000)
+	((IS_IN_DEV_GROUP(dev, DEV_PIRL_RESOURCE)) ? 393216 : 5000000)
 
 #define RECOMMENDED_BUCKET_INCREMENT(dev, _bps)                \
         ((IS_IN_DEV_GROUP(dev,DEV_PIRL_RESOURCE))?174:        \
-        ((_bps) < 1000)?0x3d:                            \
-        ((_bps) < 10000)?0x1f:0x4)
+	((_bps) < 1000) ? 3125 :                            \
+	((_bps) < 10000) ? 25 : 5)
 
 #define FACTOR_FROM_BUCKET_INCREMENT(dev, _bInc, _f)        \
     {                                                        \
@@ -1120,11 +1121,17 @@ extern "C" {
         }                                                    \
         else                                                \
         {                                                    \
-            if((_bInc) == 0x3d) {(_f) = 64;}                \
-            else if((_bInc) == 0x1f) {(_f) = 128;}            \
-            else if((_bInc) == 0x4) {(_f) = 1000;}            \
-            else {(_f) = 0;}                                \
-        }                                                    \
+		if ((_bInc) == 3125)                        \
+			(_f) = 32;                          \
+		else if ((_bInc) == 25)                     \
+			(_f) = 4;                           \
+		else if ((_bInc) == 50)                     \
+			(_f) = 8;                           \
+		else if ((_bInc) == 5)                      \
+			(_f) = 8;                           \
+		else                                        \
+			(_f) = 0;                           \
+	}                                                   \
     }
 
 
diff --git a/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/msApiDefs.h b/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/msApiDefs.h
index b39252a..ac528a1 100644
--- a/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/msApiDefs.h
+++ b/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/Include/msApiDefs.h
@@ -4462,6 +4462,63 @@ struct _GT_QD_DEV
 #endif
 };
 
+/*
+ * typedef: struct PIRL_PARA_TBL_T
+ *
+ * Description: PIRL parameter table structure
+ *
+ * Fields:
+ *      BI     - bucket increment
+ *      BRF    - bucket rate factor
+ *      CBS    - Committed Burst Size
+ *      EBS    - Excess Burst Size
+ */
+struct PIRL_PARA_TBL_T {
+	GT_U32 BI;
+	GT_U32 BRF;
+	GT_U32 CBS;
+	GT_U32 EBS;
+};
+
+/*special rate which can not be calculated by formula*/
+enum PIRL_SPECIAL_RATE_ENUM_T {
+	PIRL_RATE_NO_LIMIT = 0,
+	PIRL_RATE_64K,
+	PIRL_RATE_128K,
+	PIRL_RATE_192K,
+	PIRL_RATE_256K,
+	PIRL_RATE_320K,
+	PIRL_RATE_384K,
+	PIRL_RATE_448K,
+	PIRL_RATE_512K,
+	PIRL_RATE_576K,
+	PIRL_RATE_640K,
+	PIRL_RATE_704K,
+	PIRL_RATE_768K,
+	PIRL_RATE_832K,
+	PIRL_RATE_896K,
+	PIRL_RATE_960K,
+	PIRL_RATE_1M,
+	PIRL_RATE_2M,
+	PIRL_RATE_3M,
+	PIRL_RATE_4M,
+	PIRL_RATE_5M,
+	PIRL_RATE_6M,
+	PIRL_RATE_7M,
+	PIRL_RATE_8M,
+	PIRL_RATE_9M,
+	PIRL_RATE_10M,
+	PIRL_RATE_11M,
+	PIRL_RATE_12M,
+	PIRL_RATE_13M,
+	PIRL_RATE_14M,
+	PIRL_RATE_15M,
+	PIRL_RATE_16M,
+	PIRL_RATE_17M,
+	PIRL_RATE_18M,
+	PIRL_RATE_19M,
+	PIRL_RATE_20M
+};
 
 
 
diff --git a/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/src/msapi/gtPIRL2.c b/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/src/msapi/gtPIRL2.c
index 1129750..a0435a6 100644
--- a/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/src/msapi/gtPIRL2.c
+++ b/arch/arm/plat-armada/mv_hal/qd-dsdt-3.3/src/msapi/gtPIRL2.c
@@ -16,6 +16,48 @@
 #include <gtHwCntl.h>
 #include <gtDrvSwRegs.h>
 
+/* special ingress rate limit para */
+static struct PIRL_PARA_TBL_T pirl2RateLimitParaTbl[] = {
+	/* BI----BRF-----CBS-------EBS--------------------*/
+	{0x000, 0x00, 0x000000, 0x000000},/*No rate limit*/
+	{0x186, 0x03, 0xD06470, 0xFFFFF0},/*PIRL_RATE_64K*/
+	{0x30D, 0x0D, 0x415370, 0xFFFFF0},/*PIRL_RATE_128K*/
+	{0x186, 0x0A, 0x712D70, 0xFFFFF0},/*PIRL_RATE_192K*/
+	{0x186, 0x0D, 0xA0C8F0, 0xFFFFF0},/*PIRL_RATE_256K*/
+	{0x138, 0x0D, 0x4191F0, 0xFFFFF0},/*PIRL_RATE_320K*/
+	{0x0C3, 0x0A, 0x712D70, 0xFFFFF0},/*PIRL_RATE_384K*/
+	{0x0C3, 0x0C, 0x595FB0, 0xFFFFF0},/*PIRL_RATE_448K*/
+	{0x0C3, 0x0D, 0x4191F0, 0xFFFFF0},/*PIRL_RATE_512K*/
+	{0x0C3, 0x0F, 0x29C430, 0xFFFFF0},/*PIRL_RATE_576K*/
+	{0x09C, 0x0D, 0x4191F0, 0xFFFFF0},/*PIRL_RATE_640K*/
+	{0x07C, 0x0C, 0x597EF0, 0xFFFFF0},/*PIRL_RATE_704K*/
+	{0x082, 0x0D, 0x71E8F0, 0xFFFFF0},/*PIRL_RATE_768K*/
+	{0x078, 0x0D, 0x4191F0, 0xFFFFF0},/*PIRL_RATE_832K*/
+	{0x084, 0x10, 0x1E69F0, 0xFFFFF0},/*PIRL_RATE_896K*/
+	{0x027, 0x05, 0xB896B0, 0xFFFFF0},/*PIRL_RATE_960K*/
+	{0x031, 0x07, 0xA28A28, 0xFFFFF0},/*PIRL_RATE_1M*/
+	{0x031, 0x0D, 0x451460, 0xFFFFF0},/*PIRL_RATE_2M*/
+	{0x021, 0x0D, 0x432C18, 0xFFFFF0},/*PIRL_RATE_3M*/
+	{0x01C, 0x0F, 0x2A6070, 0xFFFFF0},/*PIRL_RATE_4M*/
+	{0x065, 0x43, 0x029810, 0xFFFFF0},/*PIRL_RATE_5M*/
+	{0x037, 0x2C, 0x0186A0, 0xFFFFF0},/*PIRL_RATE_6M*/
+	{0x051, 0x4B, 0x0222E0, 0xFFFFF0},/*PIRL_RATE_7M*/
+	{0x035, 0x38, 0x0186A0, 0xFFFFF0},/*PIRL_RATE_8M*/
+	{0x03B, 0x46, 0x0186A0, 0xFFFFF0},/*PIRL_RATE_9M*/
+	{0x030, 0x40, 0x015F90, 0xFFFFF0},/*PIRL_RATE_10M*/
+	{0x033, 0x4B, 0x0186A0, 0xFFFFF0},/*PIRL_RATE_11M*/
+	{0x033, 0x51, 0x015F90, 0xFFFFF0},/*PIRL_RATE_12M*/
+	{0x02F, 0x51, 0x015F90, 0xFFFFF0},/*PIRL_RATE_13M*/
+	{0x02D, 0x54, 0x013880, 0xFFFFF0},/*PIRL_RATE_14M*/
+	{0x02A, 0x54, 0x013880, 0xFFFFF0},/*PIRL_RATE_15M*/
+	{0x030, 0x66, 0x015F90, 0xFFFFF0},/*PIRL_RATE_16M*/
+	{0x02F, 0x6A, 0x015F90, 0xFFFFF0},/*PIRL_RATE_17M*/
+	{0x02A, 0x64, 0x013880, 0xFFFFF0},/*PIRL_RATE_18M*/
+	{0x02D, 0x72, 0x013880, 0xFFFFF0},/*PIRL_RATE_19M*/
+	{0x02C, 0x75, 0x013880, 0xFFFFF0},/*PIRL_RATE_20M*/
+};
+
+
 /****************************************************************************/
 /* PIRL operation function declaration.                                    */
 /****************************************************************************/
@@ -1042,6 +1084,35 @@ static GT_STATUS pirl2DisableIRLResource
     return GT_OK;
 }
 
+/*find the greatest common divisor for two interger
+*used to calculate BRF and BI
+*/
+static GT_U32 pirl2GetGCD(IN GT_U32 data1,
+		IN GT_U32 data2)
+{
+	GT_U32 temp1, temp2, temp;
+
+	if (data1 == 0 || data2 == 0)
+		return 1;
+
+	temp1 = data1;
+	temp2 = data2;
+
+	if (temp1 < temp2) {
+		temp = temp1;
+		temp1 = temp2;
+		temp2 = temp;
+	}
+	temp = temp1 % temp2;
+	while (temp) {
+		temp1 = temp2;
+		temp2 = temp;
+		temp = temp1 % temp2;
+	}
+
+	return temp2;
+}
+
 /*
  * convert PIRL Data structure to PIRL Resource structure.
  * if PIRL Data is not valid, return GT_BAD_PARARM;
@@ -1055,6 +1126,9 @@ static GT_STATUS pirl2DataToResource
 {
     GT_U32 typeMask;
     GT_U32 data;
+	GT_U32 burst_allocation;
+	GT_U32 pirl2_cir;
+	GT_U32 pirl_gcd = 1;
 
     gtMemSet((void*)res,0,sizeof(GT_PIRL2_RESOURCE));
 
@@ -1137,55 +1211,57 @@ static GT_STATUS pirl2DataToResource
             return GT_BAD_PARAM;
         }
 
-        if(pirlData->ingressRate < 1000)    /* less than 1Mbps */
-        {
+		if (pirlData->ingressRate < 1000) { /* less than 1Mbps */
             /* it should be divided by 64 */
             if(pirlData->ingressRate % 64)
             {
                 DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
                 return GT_BAD_PARAM;
             }
-            res->bktRateFactor = pirlData->ingressRate/64;
-        }
-        else if(pirlData->ingressRate < 10000)    /* less than or equal to 10Mbps */
-        {
-            /* it should be divided by 1000 */
+			/* Less than 1Mbps, use special value */
+			res->bktIncrement = pirl2RateLimitParaTbl[pirlData->ingressRate / 64].BI;
+			res->bktRateFactor = pirl2RateLimitParaTbl[pirlData->ingressRate / 64].BRF;
+			res->cbsLimit = pirl2RateLimitParaTbl[pirlData->ingressRate / 64].CBS;
+			res->ebsLimit = pirl2RateLimitParaTbl[pirlData->ingressRate / 64].EBS;
+		} else if (pirlData->ingressRate <= 20000) {
+			/* greater or equal to 1Mbps, and less than or equal to 20Mbps, it should be divided by 1000 */
             if(pirlData->ingressRate % 1000)
             {
                 DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
                 return GT_BAD_PARAM;
             }
-            res->bktRateFactor = pirlData->ingressRate/128 + ((pirlData->ingressRate % 128)?1:0);
-        }
-        else if(pirlData->ingressRate < 100000)    /* less than or equal to 100Mbps */
-        {
-            /* it should be divided by 1000 */
+			res->bktIncrement = pirl2RateLimitParaTbl[PIRL_RATE_960K + pirlData->ingressRate / 1000].BI;
+			res->bktRateFactor = pirl2RateLimitParaTbl[PIRL_RATE_960K + pirlData->ingressRate / 1000].BRF;
+			res->cbsLimit = pirl2RateLimitParaTbl[PIRL_RATE_960K + pirlData->ingressRate / 1000].CBS;
+			res->ebsLimit = pirl2RateLimitParaTbl[PIRL_RATE_960K + pirlData->ingressRate / 1000].EBS;
+		} else {/* greater than 20Mbps */
+			if (pirlData->ingressRate < 100000) {
+				/* it should be divided by 1000, if less than 100Mbps*/
             if(pirlData->ingressRate % 1000)
             {
                 DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
                 return GT_BAD_PARAM;
             }
-            res->bktRateFactor = pirlData->ingressRate/1000;
-        }
-        else if(pirlData->ingressRate <= 200000)    /* less than or equal to 200Mbps */
-        {
-            /* it should be divided by 10000 */
+			} else {
+				/* it should be divided by 10000, if more or equal than 100Mbps */
             if(pirlData->ingressRate % 10000)
             {
                 DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
                 return GT_BAD_PARAM;
             }
-            res->bktRateFactor = pirlData->ingressRate/1000;
-        }
-        else
-        {
-            DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
-            return GT_BAD_PARAM;
         }
+			pirl2_cir = pirlData->ingressRate * 1000;
+
+			burst_allocation = pirl2_cir;
 
+			pirl_gcd = pirl2GetGCD(pirl2_cir, PIRL_ALPHA);
+			res->bktRateFactor = pirl2_cir / pirl_gcd;
+			/* Correct Rate Factor */
+			res->bktRateFactor = res->bktRateFactor * 5 / 6;
+			res->bktIncrement = PIRL_ALPHA / pirl_gcd;
         res->ebsLimit = RECOMMENDED_ESB_LIMIT(dev, pirlData->ingressRate);
         res->cbsLimit = RECOMMENDED_CBS_LIMIT(dev, pirlData->ingressRate);
-        res->bktIncrement = RECOMMENDED_BUCKET_INCREMENT(dev, pirlData->ingressRate);
+		}
     }
 
     switch(pirlData->bktRateType)
-- 
1.7.5.4

