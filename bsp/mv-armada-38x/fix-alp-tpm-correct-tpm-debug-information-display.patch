From 8fef2b65730aa893209e2bf06eded06137210950 Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Wed, 4 Jun 2014 16:58:04 +0800
Subject: [PATCH 1705/1825] fix: alp: tpm: correct tpm debug information
 display

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit accfe4458d39b4d4c559fcbd7a3f238e3763e7bf

	there are many unnecessary carriage return in tpm sysfs debug
	information because printk(KERN_INFO ... will add CR automaticly,
	I remove CRs by replacing printk(KERN_INFO with mvOsPrintf.
	SYSTEMSW-601 - TPM and glue layer debug information display is not
	good (out of order)

Signed-off-by: Ken Ma <make@marvell.com>

Change-Id: I7ce292198d8a40a588f9ef86d8320885283ff3e5
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8388
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_tpm/src/sysfs/tpm_sysfs_api.c               | 1974 ++++++++++----------
 .../mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c2.c |   57 +-
 .../mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c3.c |  171 +-
 .../mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c4.c |   25 +-
 .../mv_tpm/src/sysfs/tpm_sysfs_cls.c               |  176 +-
 .../mv_tpm/src/sysfs/tpm_sysfs_init.c              |  396 ++--
 .../mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mc.c |   75 +-
 .../mv_tpm/src/sysfs/tpm_sysfs_mng.c               |  331 ++--
 .../mv_tpm/src/sysfs/tpm_sysfs_plcr.c              |  150 +-
 .../mv_tpm/src/sysfs/tpm_sysfs_pme.c               |  373 ++--
 .../mv_tpm/src/sysfs/tpm_sysfs_prs.c               |   99 +-
 .../mv_tpm/src/sysfs/tpm_sysfs_switch.c            |  662 ++++----
 .../mv_tpm/src/sysfs/tpm_sysfs_utils.c             |    8 +-
 13 files changed, 2274 insertions(+), 2223 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
index 4086495..f95ec4b 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
@@ -1370,190 +1370,201 @@ int mv_tpm_mtm_del_bounce(
 /* ========================================================================== */
 /*             TPM CFG SYS FS HELP                                            */
 /* ========================================================================== */
-int tpm_sfs_help_mac_format_print(char *buf, int cur_off)
+int tpm_sfs_help_mac_format_print(char *b, int cur_off)
 {
-	int off = cur_off;
+	int o = cur_off; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "\tMAC address      (str) aa:bb:cc:dd:ee:ff  where each part is hexadecimal in range 0..FF\n");
-	return off;
+	o += scnprintf(b+o, s-o, "\tMAC address      (str) aa:bb:cc:dd:ee:ff  where each part is hexadecimal in range 0..FF\n");
+	return o;
 }
 
 
-int tpm_sfs_help_ipvx_format_print(char *buf, int cur_off)
+int tpm_sfs_help_ipvx_format_print(char *b, int cur_off)
 {
-	int off = cur_off;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off,
+	o += scnprintf(b+o, s-o,
 		"\tIPv4 address   (str) w.x.y.z  where each part is decimal value in range 0..255\n");
-	off += sprintf(buf+off,
+	o += scnprintf(b+o, s-o,
 		"\tIPv6 address   (str) aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh  each part is hexadecimal (0..FFFF)\n");
-	off += sprintf(buf+off, "\t\tprefix         (str) aaaa:bbbb:cccc:dddd:0000:0000:0000:0000\n");
-	off += sprintf(buf+off, "\t\tsuffix         (str) 0000:0000:0000:0000:eeee:ffff:gggg:hhhh\n");
-	return off;
+	o += scnprintf(b+o, s-o, "\t\tprefix         (str) aaaa:bbbb:cccc:dddd:0000:0000:0000:0000\n");
+	o += scnprintf(b+o, s-o, "\t\tsuffix         (str) 0000:0000:0000:0000:eeee:ffff:gggg:hhhh\n");
+	return o;
 }
 
-int tpm_sfs_help_frwd_rule_cfg(char *buf)
+int tpm_sfs_help_frwd_rule_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off,
+	o += scnprintf(b+o, s-o,
 		"echo [rule_name] [frwd_idx] [pp_port] [pon_tx] [queue] [logic_port_flag] [logic_port] > frwd_rule_set");
-	off += sprintf(buf+off, " - set a forwarding rule\n");
-	off += sprintf(buf+off, "\trule_name           (max 16 chars)Rule name\n");
-	off += sprintf(buf+off,
+	o += scnprintf(b+o, s-o, " - set a forwarding rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name           (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o,
 		"\tfrwd_idx            (dec)frwd index in frwd array with name rule_name, range 0-%d\n",
 		(TPM_ACT_NUM_MAX - 1));
-	off += sprintf(buf+off, "\tpp_port             (hex) see below\n");
-	off += sprintf(buf+off, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_DROP), TPM_PP_DROP);
-	off += sprintf(buf+off, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
-	off += sprintf(buf+off, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
-	off += sprintf(buf+off, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
-	off += sprintf(buf+off, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_CPU), TPM_PP_CPU);
-	off += sprintf(buf+off, "\tpon_tx              (dec)T-CONT number, irrelevant for non-PON port\n");
-	off += sprintf(buf+off, "\tqueue               (dec)Queue number\n");
-	off += sprintf(buf+off, "\tlogic_port_flag     (dec)0: logic port is invalid; 1: logic port is valid.\n");
-	off += sprintf(buf+off, "\tlogic_port          (hex)GEM/UNI port, valid when logic_port_flag is 1.\n");
-
-	return off;
-}
-int tpm_sfs_help_plcr_cfg(char *buf)
-{
-	int off = 0;
-
-	off += sprintf(buf+off, "echo [token_unit] [color_mode] [cir] [cbs] [ebs]  > plcr_add    - add a policer\n");
-	off += sprintf(buf+off, "\ttoken_unit          (dec)token unit type, 0: byte, 1:packet number\n");
-	off += sprintf(buf+off, "\tcolor_mode          (dec)color aware mode, 0:blind mode, 1:aware mode\n");
-	off += sprintf(buf+off, "\tcir                 (dec)commit information rate, 0:no limit, uints: ");
-	off += sprintf(buf+off, "kbps for byte token type, pps for packet token type\n");
-	off += sprintf(buf+off, "\tcbs                 (dec)commit burst size, 0: to use default value\n");
-	off += sprintf(buf+off, "\tebs                 (dec)excess burst size, 0: to use default value\n\n");
-	off += sprintf(buf+off, "echo [policer_id]                             > plcr_del    - delete a policer\n");
-	off += sprintf(buf+off,
+	o += scnprintf(b+o, s-o, "\tpp_port             (hex) see below\n");
+	o += scnprintf(b+o, s-o, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_DROP), TPM_PP_DROP);
+	o += scnprintf(b+o, s-o, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
+	o += scnprintf(b+o, s-o, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
+	o += scnprintf(b+o, s-o, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
+	o += scnprintf(b+o, s-o, "\t\t%.18s%#.4X\n", tpm_utils_pp_port_str_get(TPM_PP_CPU), TPM_PP_CPU);
+	o += scnprintf(b+o, s-o, "\tpon_tx              (dec)T-CONT number, irrelevant for non-PON port\n");
+	o += scnprintf(b+o, s-o, "\tqueue               (dec)Queue number\n");
+	o += scnprintf(b+o, s-o, "\tlogic_port_flag     (dec)0: logic port is invalid; 1: logic port is valid.\n");
+	o += scnprintf(b+o, s-o, "\tlogic_port          (hex)GEM/UNI port, valid when logic_port_flag is 1.\n");
+
+	return o;
+}
+int tpm_sfs_help_plcr_cfg(char *b)
+{
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "echo [token_unit] [color_mode] [cir] [cbs] [ebs]  > plcr_add    - add a policer\n");
+	o += scnprintf(b+o, s-o, "\ttoken_unit          (dec)token unit type, 0: byte, 1:packet number\n");
+	o += scnprintf(b+o, s-o, "\tcolor_mode          (dec)color aware mode, 0:blind mode, 1:aware mode\n");
+	o += scnprintf(b+o, s-o, "\tcir                 (dec)commit information rate, 0:no limit, uints: ");
+	o += scnprintf(b+o, s-o, "kbps for byte token type, pps for packet token type\n");
+	o += scnprintf(b+o, s-o, "\tcbs                 (dec)commit burst size, 0: to use default value\n");
+	o += scnprintf(b+o, s-o, "\tebs                 (dec)excess burst size, 0: to use default value\n\n");
+	o += scnprintf(b+o, s-o, "echo [policer_id]                             > plcr_del    - delete a policer\n");
+	o += scnprintf(b+o, s-o,
 		"\tpolicer_id          (dec)policer ID returned while adding policer, ranging from 1 to %d\n\n",
 		MV_PP2_PLCR_NUM - 1);
-	off += sprintf(buf+off, "echo 1                                        > plcr_clear  - clear all policers\n\n");
+	o += scnprintf(b+o, s-o, "echo 1                                        > plcr_clear  - clear all policers\n\n");
 
-	return off;
+	return o;
 }
-int tpm_sfs_help_mtm_cfg(char *buf)
+int tpm_sfs_help_mtm_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [port] [mac]  > mtm_add   - adds a MAC to port, to make it Mac-To-Me\n");
-	off += sprintf(buf+off, "echo [port] [mac]  > mtm_del   - removes a MAC from port, to make it not Mac-To-Me\n");
-	off += sprintf(buf+off, "\tport          (dec)port number\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_gmac_enum_str_get(TPM_ENUM_GMAC_0), TPM_ENUM_GMAC_0);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_gmac_enum_str_get(TPM_ENUM_GMAC_1), TPM_ENUM_GMAC_1);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_gmac_enum_str_get(TPM_ENUM_PMAC), TPM_ENUM_PMAC);
-	off += tpm_sfs_help_mac_format_print(buf, off);
+	o += scnprintf(b+o, s-o, "echo [port] [mac]  > mtm_add   - adds a MAC to port, to make it Mac-To-Me\n");
+	o += scnprintf(b+o, s-o, "echo [port] [mac]  > mtm_del   - removes a MAC from port, to make it not Mac-To-Me\n");
+	o += scnprintf(b+o, s-o, "\tport          (dec)port number\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_gmac_enum_str_get(TPM_ENUM_GMAC_0), TPM_ENUM_GMAC_0);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_gmac_enum_str_get(TPM_ENUM_GMAC_1), TPM_ENUM_GMAC_1);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_gmac_enum_str_get(TPM_ENUM_PMAC), TPM_ENUM_PMAC);
+	o = tpm_sfs_help_mac_format_print(b, o);
 
-	return off;
+	return o;
 }
 
 /* Rate limit help */
-int tpm_sys_help_tx_sched_cfg(char *buf)
+int tpm_sys_help_tx_sched_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* Config Tx port schedule MTU */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [gmac_id] [tcont_id] [mtu] > tx_port_sched_mtu_cfg - Config Tx port sched MTU\n");
-	off += sprintf(buf+off, "\tgmac_id         (dec)GMAC index\n");
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
-	off += sprintf(buf+off, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
-	off += sprintf(buf+off,
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [gmac_id] [tcont_id] [mtu] > tx_port_sched_mtu_cfg - Config Tx port sched MTU\n");
+	o += scnprintf(b+o, s-o, "\tgmac_id         (dec)GMAC index\n");
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
+	o += scnprintf(b+o, s-o, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
+	o += scnprintf(b+o, s-o,
 		"\tmtu             (dec)MTU, unit byte, the minum number of tokens required to allow packet TX\n");
-	off += sprintf(buf+off, "\t\t The maxnum value of MTU is 65536B, if more than 65536, will be set to 65536\n");
+	o += scnprintf(b+o, s-o, "\t\t The maxnum value of MTU is 65536B, if more than 65536, will be set to 65536\n");
 
 	/* Config Tx queue mode */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [gmac_id] [tcont_id] [queue_id] [mode] [wrr_weight] > ");
-	off += sprintf(buf+off, "tx_queue_mode_cfg - Config Tx shceduling queue mode\n");
-	off += sprintf(buf+off, "\tgmac_id         (dec)GMAC index\n");
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
-	off += sprintf(buf+off, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
-	off += sprintf(buf+off, "\tqueue_id        (dec)Queue, range 0 - 7\n");
-	off += sprintf(buf+off, "\tmode            (dec)Schedule mode, 0 - Strict Priority; 1 - WRR\n");
-	off += sprintf(buf+off, "\twrr_weight      (dec)Queue, weight if mode is WRR, range 0 - 255\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [gmac_id] [tcont_id] [queue_id] [mode] [wrr_weight] > ");
+	o += scnprintf(b+o, s-o, "tx_queue_mode_cfg - Config Tx shceduling queue mode\n");
+	o += scnprintf(b+o, s-o, "\tgmac_id         (dec)GMAC index\n");
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
+	o += scnprintf(b+o, s-o, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
+	o += scnprintf(b+o, s-o, "\tqueue_id        (dec)Queue, range 0 - 7\n");
+	o += scnprintf(b+o, s-o, "\tmode            (dec)Schedule mode, 0 - Strict Priority; 1 - WRR\n");
+	o += scnprintf(b+o, s-o, "\twrr_weight      (dec)Queue, weight if mode is WRR, range 0 - 255\n");
 
 	/* Config Tx queue rate limit */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [gmac_id] [tcont_id] [queue_id] [rate] [bukcet_size]      > tx_queue_rate_limit");
-	off += sprintf(buf+off, "      -  Config Tx queue rate limit\n");
-	off += sprintf(buf+off, "\tgmac_id         (dec)GMAC index\n");
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
-	off += sprintf(buf+off, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
-	off += sprintf(buf+off, "\tqueue_id        (dec)Queue, range 0 - 7\n");
-	off += sprintf(buf+off, "\trate            (dec)rate limit, unit: kbps\n");
-	off += sprintf(buf+off, "\tbukcet_size     (dec)Bucket size, no less than 64B, unit: byte\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [gmac_id] [tcont_id] [queue_id] [rate] [bukcet_size]      > tx_queue_rate_limit");
+	o += scnprintf(b+o, s-o, "      -  Config Tx queue rate limit\n");
+	o += scnprintf(b+o, s-o, "\tgmac_id         (dec)GMAC index\n");
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
+	o += scnprintf(b+o, s-o, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
+	o += scnprintf(b+o, s-o, "\tqueue_id        (dec)Queue, range 0 - 7\n");
+	o += scnprintf(b+o, s-o, "\trate            (dec)rate limit, unit: kbps\n");
+	o += scnprintf(b+o, s-o, "\tbukcet_size     (dec)Bucket size, no less than 64B, unit: byte\n");
 
 	/* Config Tx port rate limit */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [gmac_id] [tcont_id] [rate] [bukcet_size]                > tx_port_rate_limit");
-	off += sprintf(buf+off, "      -  Config Tx port rate limit\n");
-	off += sprintf(buf+off, "\tgmac_id         (dec)GMAC index\n");
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
-	off += sprintf(buf+off, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
-	off += sprintf(buf+off, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
-	off += sprintf(buf+off, "\trate            (dec)rate limit, unit: kbps\n");
-	off += sprintf(buf+off, "\tbukcet_size     (dec)Bucket size, no less than 64B, unit: byte\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [gmac_id] [tcont_id] [rate] [bukcet_size]                > tx_port_rate_limit");
+	o += scnprintf(b+o, s-o, "      -  Config Tx port rate limit\n");
+	o += scnprintf(b+o, s-o, "\tgmac_id         (dec)GMAC index\n");
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC0_IDX), TPM_GMAC0_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_GMAC1_IDX), TPM_GMAC1_IDX);
+	o += scnprintf(b+o, s-o, "\t\t%-8s%d\n", tpm_utils_gmac_idx_str_get(TPM_PMAC_IDX), TPM_PMAC_IDX);
+	o += scnprintf(b+o, s-o, "\ttcont_id        (dec)Tcont, range 0 - 15(Only for GPON PMAC, other set 0)\n");
+	o += scnprintf(b+o, s-o, "\trate            (dec)rate limit, unit: kbps\n");
+	o += scnprintf(b+o, s-o, "\tbukcet_size     (dec)Bucket size, no less than 64B, unit: byte\n");
 
-	return off;
+	return o;
 }
 
-int tpm_sfs_help_api_rule_get_cfg(char *buf)
+int tpm_sfs_help_api_rule_get_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_idx]  > xxx_rule_get       - dump a exact except api rule\n");
-	off += sprintf(buf+off, "echo [rule_idx]  > cls_rule_get                - dump a CLS api rule\n");
-	off += sprintf(buf+off, "echo [rule_idx]  > mc_rule_get                 - dump a CLS api rule\n");
-	off += sprintf(buf+off, "\trule_idx         (dec)Rule Id returned from the create call\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]  > xxx_rule_get       - dump a exact except api rule\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]  > cls_rule_get                - dump a CLS api rule\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]  > mc_rule_get                 - dump a CLS api rule\n");
+	o += scnprintf(b+o, s-o, "\trule_idx         (dec)Rule Id returned from the create call\n");
 
-	return off;
+	return o;
 }
-int tpm_sfs_help_cls_rule_get_cfg(char *buf)
+int tpm_sfs_help_cls_rule_get_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_idx]  > cls_rule_get                - dump a CLS api rule\n");
-	off += sprintf(buf+off, "\trule_idx         (dec)Rule Id returned from the create call\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]  > cls_rule_get                - dump a CLS api rule\n");
+	o += scnprintf(b+o, s-o, "\trule_idx         (dec)Rule Id returned from the create call\n");
 
-	return off;
+	return o;
 }
-int tpm_sfs_help_filter_rule_get_cfg(char *buf)
+int tpm_sfs_help_filter_rule_get_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_idx]  > filter_rule_get                - dump a filter api rule\n");
-	off += sprintf(buf+off, "\trule_idx         (dec)Rule Id returned from the create call\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]  > filter_rule_get                - dump a filter api rule\n");
+	o += scnprintf(b+o, s-o, "\trule_idx         (dec)Rule Id returned from the create call\n");
 
-	return off;
+	return o;
 }
-int tpm_sfs_help_exact_except_rule_get_cfg(char *buf)
+int tpm_sfs_help_exact_except_rule_get_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_idx]  > exact_except_rule_get       - dump a exact except api rule\n");
-	off += sprintf(buf+off, "\trule_idx         (dec)Rule Id returned from the create call\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]  > exact_except_rule_get       - dump a exact except api rule\n");
+	o += scnprintf(b+o, s-o, "\trule_idx         (dec)Rule Id returned from the create call\n");
 
-	return off;
+	return o;
 }
-int tpm_sfs_help_exact_rule_get_cfg(char *buf)
+int tpm_sfs_help_exact_rule_get_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_idx]  > exact_rule_get       - dump a exact match api rule\n");
-	off += sprintf(buf+off, "\trule_idx         (dec)Rule Id returned from the create call\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]  > exact_rule_get       - dump a exact match api rule\n");
+	o += scnprintf(b+o, s-o, "\trule_idx         (dec)Rule Id returned from the create call\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1561,33 +1572,34 @@ int tpm_sfs_help_exact_rule_get_cfg(char *buf)
 **  tpm_sfs_help_no_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_no_rule_add(char *buf)
+int tpm_sfs_help_no_rule_add(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_idx]            > no_rule_add_cls                - delete CLS rule from hardware\n");
-	off += sprintf(buf+off, "echo [rule_idx]            > no_rule_add_exact_except       - delete exact_except rule from hardware\n");
-	off += sprintf(buf+off, "echo [rule_idx]            > no_rule_add_exact              - delete exact_match rule from hardware\n");
-	off += sprintf(buf+off, "echo [rule_idx]            > no_rule_add_filter             - delete filter rule from hardware\n");
-	off += sprintf(buf+off, "echo                       > no_rule_add_cls_all            - delete all CLS rules from hardware\n");
-	off += sprintf(buf+off, "echo                       > no_rule_add_filter_all         - delete all filter rules from hardware\n");
-	off += sprintf(buf+off, "echo                       > no_rule_add_exact_except_all   - delete all exact_except rules from hardware\n");
-	off += sprintf(buf+off, "echo                       > no_rule_add_exact_all          - delete all exact_match rules from hardware\n");
-	off += sprintf(buf+off, "echo [rule_idx]            > no_rule_add_mc                 - delete multicast rule from hardware\n");
-	off += sprintf(buf+off, "echo 1                     > no_rule_add_mc_all             - delete all multicast rules from hardware\n");
-	off += sprintf(buf+off, "\trule_idx         (dec)Rule Id returned from the create call\n");
-	off += sprintf(buf+off, "echo [uni_port] [rule_num] > no_rule_add_cnm                - delete CnM rule from hardware\n");
-	off += sprintf(buf+off, "echo [uni_port_bm]         > no_rule_add_cnm_all            - delete all CnM rules of UNI port in port_bm from hardware\n");
-	off += sprintf(buf+off, "\tuni_port_bm      (hex)uni port bitmap\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]            > no_rule_add_cls                - delete CLS rule from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]            > no_rule_add_exact_except       - delete exact_except rule from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]            > no_rule_add_exact              - delete exact_match rule from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]            > no_rule_add_filter             - delete filter rule from hardware\n");
+	o += scnprintf(b+o, s-o, "echo                       > no_rule_add_cls_all            - delete all CLS rules from hardware\n");
+	o += scnprintf(b+o, s-o, "echo                       > no_rule_add_filter_all         - delete all filter rules from hardware\n");
+	o += scnprintf(b+o, s-o, "echo                       > no_rule_add_exact_except_all   - delete all exact_except rules from hardware\n");
+	o += scnprintf(b+o, s-o, "echo                       > no_rule_add_exact_all          - delete all exact_match rules from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [rule_idx]            > no_rule_add_mc                 - delete multicast rule from hardware\n");
+	o += scnprintf(b+o, s-o, "echo 1                     > no_rule_add_mc_all             - delete all multicast rules from hardware\n");
+	o += scnprintf(b+o, s-o, "\trule_idx         (dec)Rule Id returned from the create call\n");
+	o += scnprintf(b+o, s-o, "echo [uni_port] [rule_num] > no_rule_add_cnm                - delete CnM rule from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [uni_port_bm]         > no_rule_add_cnm_all            - delete all CnM rules of UNI port in port_bm from hardware\n");
+	o += scnprintf(b+o, s-o, "\tuni_port_bm      (hex)uni port bitmap\n");
 
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
 
-	off += sprintf(buf+off, "echo [port_type] [port_id] [rule_type] [parse_rule_bm] [key_name] > no_rule_add_cls_key            - delete CLS rule with Key from hardware\n");
-	off += sprintf(buf+off, "echo [port_type] [port_id] [rule_type] [parse_rule_bm] [key_name] > no_rule_add_filter_key         - delete filter rule with Key from hardware\n");
-	off += sprintf(buf+off, "echo [port_type] [port_id] [parse_rule_bm] [key_name]          > no_rule_add_exact_except_key   - delete exact_except rule with Key from hardware\n");
-	off += sprintf(buf+off, "echo [ip_version] [key_name]                                   > no_rule_add_exact_key          - delete exact_match rule with Key from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [port_type] [port_id] [rule_type] [parse_rule_bm] [key_name] > no_rule_add_cls_key            - delete CLS rule with Key from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [port_type] [port_id] [rule_type] [parse_rule_bm] [key_name] > no_rule_add_filter_key         - delete filter rule with Key from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [port_type] [port_id] [parse_rule_bm] [key_name]          > no_rule_add_exact_except_key   - delete exact_except rule with Key from hardware\n");
+	o += scnprintf(b+o, s-o, "echo [ip_version] [key_name]                                   > no_rule_add_exact_key          - delete exact_match rule with Key from hardware\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1595,34 +1607,35 @@ int tpm_sfs_help_no_rule_add(char *buf)
 **  sfs_help_parse_rule_bm_print - prints the parse_rule_bm fields
 **
 *******************************************************************************/
-int tpm_sfs_help_parse_rule_bm_print(char *buf, int cur_off)
-{
-	int off = cur_off;
-
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ETH_DST), TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ETH_SRC), TPM_MATCH_ETH_SRC);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_VID_OUTER), TPM_MATCH_VID_OUTER);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PBITS_OUTER), TPM_MATCH_PBITS_OUTER);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_VID_INNER), TPM_MATCH_VID_INNER);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PBITS_INNER), TPM_MATCH_PBITS_INNER);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ETH_TYPE), TPM_MATCH_ETH_TYPE);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PPPOE_PROTO), TPM_MATCH_PPPOE_PROTO);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PPPOE_SES), TPM_MATCH_PPPOE_SES);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV4_PKT), TPM_MATCH_IPV4_PKT);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_PKT), TPM_MATCH_IPV6_PKT);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_SRC), TPM_MATCH_IP_SRC);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_DST), TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_DSCP), TPM_MATCH_IP_DSCP);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_FLBL), TPM_MATCH_IPV6_FLBL);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_PROTO), TPM_MATCH_IP_PROTO);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_VERSION), TPM_MATCH_IP_VERSION);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_L4_SRC), TPM_MATCH_L4_SRC);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_L4_DST), TPM_MATCH_L4_DST);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ARP_TRGT_IP_ADDR), TPM_MATCH_ARP_TRGT_IP_ADDR);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_PREF), TPM_MATCH_IPV6_PREF);
-	off += sprintf(buf+off, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_SUFF), TPM_MATCH_IPV6_SUFF);
-
-	return off;
+int tpm_sfs_help_parse_rule_bm_print(char *b, int cur_off)
+{
+	int o = cur_off; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ETH_DST), TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ETH_SRC), TPM_MATCH_ETH_SRC);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_VID_OUTER), TPM_MATCH_VID_OUTER);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PBITS_OUTER), TPM_MATCH_PBITS_OUTER);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_VID_INNER), TPM_MATCH_VID_INNER);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PBITS_INNER), TPM_MATCH_PBITS_INNER);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ETH_TYPE), TPM_MATCH_ETH_TYPE);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PPPOE_PROTO), TPM_MATCH_PPPOE_PROTO);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_PPPOE_SES), TPM_MATCH_PPPOE_SES);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV4_PKT), TPM_MATCH_IPV4_PKT);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_PKT), TPM_MATCH_IPV6_PKT);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_SRC), TPM_MATCH_IP_SRC);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_DST), TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_DSCP), TPM_MATCH_IP_DSCP);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_FLBL), TPM_MATCH_IPV6_FLBL);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_PROTO), TPM_MATCH_IP_PROTO);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IP_VERSION), TPM_MATCH_IP_VERSION);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_L4_SRC), TPM_MATCH_L4_SRC);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_L4_DST), TPM_MATCH_L4_DST);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_ARP_TRGT_IP_ADDR), TPM_MATCH_ARP_TRGT_IP_ADDR);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_PREF), TPM_MATCH_IPV6_PREF);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#.6X\n", tpm_utils_field_match_str_get(TPM_MATCH_IPV6_SUFF), TPM_MATCH_IPV6_SUFF);
+
+	return o;
 }
 
 /*******************************************************************************
@@ -1630,46 +1643,47 @@ int tpm_sfs_help_parse_rule_bm_print(char *buf, int cur_off)
 **  tpm_sfs_help_mc_rule_bm_print - prints the mc match fields bm
 **
 *******************************************************************************/
-int tpm_sfs_help_mc_match_bm_print(char *buf, int cur_off)
+int tpm_sfs_help_mc_match_bm_print(char *b, int cur_off)
 {
-	int off = cur_off;
+	int o = cur_off; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* MAC based section */
-	off += sprintf(buf+off, "\n\tIPV4 and NON-IP MC MAC Base section:\n");
-	off += sprintf(buf+off, "\t\t[VID+DMAC+SMAC]                 %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST | TPM_MATCH_ETH_SRC);
-	off += sprintf(buf+off, "\t\t[VID+DMAC]                      %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\t\t[Tag+DMAC]                      %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\t\t[Untag+DMAC]                    %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\n\tIPV6 MC MAC Base section:\n");
-	off += sprintf(buf+off, "\t\t[IPV6+VID+DMAC+SMAC]            %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST | TPM_MATCH_ETH_SRC);
-	off += sprintf(buf+off, "\t\t[IPV6+VID+DMAC]                 %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+Tag+DMAC]                 %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+Untag+DMAC]               %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\n\tMC US MAC Base section:\n");
-	off += sprintf(buf+off, "\t\t[VID+DMAC]                      %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
-	off += sprintf(buf+off, "\t\t[DMAC]                          %#.5X\n", TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\n\tIPV4 and NON-IP MC MAC Base section:\n");
+	o += scnprintf(b+o, s-o, "\t\t[VID+DMAC+SMAC]                 %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST | TPM_MATCH_ETH_SRC);
+	o += scnprintf(b+o, s-o, "\t\t[VID+DMAC]                      %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\t\t[Tag+DMAC]                      %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\t\t[Untag+DMAC]                    %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\n\tIPV6 MC MAC Base section:\n");
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+DMAC+SMAC]            %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST | TPM_MATCH_ETH_SRC);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+DMAC]                 %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+Tag+DMAC]                 %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+Untag+DMAC]               %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\n\tMC US MAC Base section:\n");
+	o += scnprintf(b+o, s-o, "\t\t[VID+DMAC]                      %#.5X\n", TPM_MATCH_VID_OUTER | TPM_MATCH_ETH_DST);
+	o += scnprintf(b+o, s-o, "\t\t[DMAC]                          %#.5X\n", TPM_MATCH_ETH_DST);
 
 	/* IP based section */
-	off += sprintf(buf+off, "\n\tMC IP Base section:\n");
+	o += scnprintf(b+o, s-o, "\n\tMC IP Base section:\n");
 #ifdef CONFIG_MV_ETH_PP2_1 /* Z1 does not support PPPoE proto check */
-	off += sprintf(buf+off, "\t\t[IPV4+VID+PPoE+SIP+DIP]         %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV4+VID+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV4+Tag+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV4+Untag+PPoE+DIP]           %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+VID+PPoE+SIP+DIP]         %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+VID+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+Tag+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+Untag+PPoE+DIP]           %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+PPoE+SIP+DIP]         %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+Tag+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+Untag+PPoE+DIP]           %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+PPoE+SIP+DIP]         %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+Tag+PPoE+DIP]             %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+Untag+PPoE+DIP]           %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST);
 #endif
-	off += sprintf(buf+off, "\t\t[IPV4+VID+SIP+DIP]              %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV4+VID+DIP]                  %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV4+Tag+DIP]                  %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV4+Untag+DIP]                %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+VID+SIP+DIP]              %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+VID+DIP]                  %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+Tag+DIP]                  %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
-	off += sprintf(buf+off, "\t\t[IPV6+Untag+DIP]                %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
-	return off;
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+SIP+DIP]              %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+DIP]                  %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+Tag+DIP]                  %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+Untag+DIP]                %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+SIP+DIP]              %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+DIP]                  %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+Tag+DIP]                  %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+Untag+DIP]                %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	return o;
 }
 
 /*******************************************************************************
@@ -1677,35 +1691,36 @@ int tpm_sfs_help_mc_match_bm_print(char *buf, int cur_off)
 **  tpm_sfs_help_cls_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_cls_rule_add(char *buf)
+int tpm_sfs_help_cls_rule_add(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [frwd_name] [num_dest] [color] [policer_id] [qos_name] [mod_name] > cls_rule_add\n");
-	off += sprintf(buf+off, "Creates a new CLS processing ACL\n");
+	o += scnprintf(b+o, s-o, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [frwd_name] [num_dest] [color] [policer_id] [qos_name] [mod_name] > cls_rule_add\n");
+	o += scnprintf(b+o, s-o, "Creates a new CLS processing ACL\n");
 
-	off += sprintf(buf+off, "\tsrc_port_type              (hex)src port type\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
-	off += sprintf(buf+off, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
-	off += sprintf(buf+off, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
-	off += sprintf(buf+off, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
-	off += sprintf(buf+off, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
-	off += sprintf(buf+off, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
-	off += tpm_sfs_help_parse_rule_bm_print(buf, off);
-	off += sprintf(buf+off, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\tfrwd_name                  (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
-	off += sprintf(buf+off, "\tnum_dest                   (dec)number of forward destination, 1-8\n");
-	off += sprintf(buf+off, "\tcolor                      (dec)0 for Green, 1 for Yellow\n");
-	off += sprintf(buf+off, "\tpolicer_id                 (hex)policer_id, valid from 0 to 15, empty value: 0xff\n");
-	off += sprintf(buf+off, "\tqos_name                   (str)Name of qos\n");
-	off += sprintf(buf+off, "\tmod_name                   (str)Name of pkt modification data which has been defined by user [or mod_empty]\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_type              (hex)src port type\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
+	o += scnprintf(b+o, s-o, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
+	o += scnprintf(b+o, s-o, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
+	o += scnprintf(b+o, s-o, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
+	o += scnprintf(b+o, s-o, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
+	o += scnprintf(b+o, s-o, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
+	o = tpm_sfs_help_parse_rule_bm_print(b, o);
+	o += scnprintf(b+o, s-o, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\tfrwd_name                  (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
+	o += scnprintf(b+o, s-o, "\tnum_dest                   (dec)number of forward destination, 1-8\n");
+	o += scnprintf(b+o, s-o, "\tcolor                      (dec)0 for Green, 1 for Yellow\n");
+	o += scnprintf(b+o, s-o, "\tpolicer_id                 (hex)policer_id, valid from 0 to 15, empty value: 0xff\n");
+	o += scnprintf(b+o, s-o, "\tqos_name                   (str)Name of qos\n");
+	o += scnprintf(b+o, s-o, "\tmod_name                   (str)Name of pkt modification data which has been defined by user [or mod_empty]\n");
 
-	return off;
+	return o;
 }
 
 
@@ -1714,30 +1729,31 @@ int tpm_sfs_help_cls_rule_add(char *buf)
 **  tpm_sfs_help_filter_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_filter_rule_add(char *buf)
+int tpm_sfs_help_filter_rule_add(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [frwd_mode] > filter_rule_add\n");
-	off += sprintf(buf+off, "Creates a new CLS processing ACL\n");
+	o += scnprintf(b+o, s-o, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [frwd_mode] > filter_rule_add\n");
+	o += scnprintf(b+o, s-o, "Creates a new CLS processing ACL\n");
 
-	off += sprintf(buf+off, "\tsrc_port_type              (hex)src port type\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
-	off += sprintf(buf+off, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
-	off += sprintf(buf+off, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
-	off += sprintf(buf+off, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
-	off += sprintf(buf+off, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
-	off += sprintf(buf+off, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
-	off += tpm_sfs_help_parse_rule_bm_print(buf, off);
-	off += sprintf(buf+off, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\tfrwd_mode                  (dec)filter forward action, 0: drop; 1: no drop\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_type              (hex)src port type\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
+	o += scnprintf(b+o, s-o, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
+	o += scnprintf(b+o, s-o, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
+	o += scnprintf(b+o, s-o, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
+	o += scnprintf(b+o, s-o, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
+	o += scnprintf(b+o, s-o, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
+	o = tpm_sfs_help_parse_rule_bm_print(b, o);
+	o += scnprintf(b+o, s-o, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\tfrwd_mode                  (dec)filter forward action, 0: drop; 1: no drop\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1745,32 +1761,33 @@ int tpm_sfs_help_filter_rule_add(char *buf)
 **  tpm_sys_help_exact_except_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sys_help_exact_except_rule_add(char *buf)
+int tpm_sys_help_exact_except_rule_add(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_port_type] [src_port_id] [parse_rule_bm] [key_name] [frwd_name] [color] [policer_id] [qos_name] > exact_except_rule_add\n");
-	off += sprintf(buf+off, "Creates a new exact match exception ACL\n");
+	o += scnprintf(b+o, s-o, "echo [src_port_type] [src_port_id] [parse_rule_bm] [key_name] [frwd_name] [color] [policer_id] [qos_name] > exact_except_rule_add\n");
+	o += scnprintf(b+o, s-o, "Creates a new exact match exception ACL\n");
 
-	off += sprintf(buf+off, "\tsrc_port_type              (hex)src port type\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
-	off += sprintf(buf+off, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
-	off += sprintf(buf+off, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
-	off += sprintf(buf+off, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
-	off += sprintf(buf+off, "\tparse_rule_bm   (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
-	off += tpm_sfs_help_parse_rule_bm_print(buf, off);
-	off += sprintf(buf+off, "\tkey_name        (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\tfrwd_name       (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
-	off += sprintf(buf+off, "\tcolor           (dec)0 for Green, 1 for Yellow\n");
-	off += sprintf(buf+off, "\tpolicer_id      (hex)policer_id, valid from 0 to 15, empty value: 0xff\n");
-	off += sprintf(buf+off, "\tqos_name        (str)Name of qos, so far, not supported, use %s\n", qos_empty_name);
+	o += scnprintf(b+o, s-o, "\tsrc_port_type              (hex)src port type\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
+	o += scnprintf(b+o, s-o, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
+	o += scnprintf(b+o, s-o, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
+	o += scnprintf(b+o, s-o, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
+	o += scnprintf(b+o, s-o, "\tparse_rule_bm   (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
+	o = tpm_sfs_help_parse_rule_bm_print(b, o);
+	o += scnprintf(b+o, s-o, "\tkey_name        (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\tfrwd_name       (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
+	o += scnprintf(b+o, s-o, "\tcolor           (dec)0 for Green, 1 for Yellow\n");
+	o += scnprintf(b+o, s-o, "\tpolicer_id      (hex)policer_id, valid from 0 to 15, empty value: 0xff\n");
+	o += scnprintf(b+o, s-o, "\tqos_name        (str)Name of qos, so far, not supported, use %s\n", qos_empty_name);
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1778,31 +1795,32 @@ int tpm_sys_help_exact_except_rule_add(char *buf)
 **  tpm_sys_help_exact_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sys_help_exact_rule_add(char *buf)
+int tpm_sys_help_exact_rule_add(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_port_type] [src_port_id] [ip_version] [key_name] [frwd_name] [mod_name] [color] [policer_id] > exact_rule_add\n");
-	off += sprintf(buf+off, "Creates a new exact exception to match IPv4/6 5T\n");
+	o += scnprintf(b+o, s-o, "echo [src_port_type] [src_port_id] [ip_version] [key_name] [frwd_name] [mod_name] [color] [policer_id] > exact_rule_add\n");
+	o += scnprintf(b+o, s-o, "Creates a new exact exception to match IPv4/6 5T\n");
 
-	off += sprintf(buf+off, "\tsrc_port_type              (hex)src port type\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
-	off += sprintf(buf+off, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
-	off += sprintf(buf+off, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
-	off += sprintf(buf+off, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
-	off += sprintf(buf+off, "\tip_version      (dec)IP version of the packet: 4 for IPv4; 6 for IPv6\n");
-	off += sprintf(buf+off, "\tkey_name        (str)Name of IPvX key data which has been defined by user\n");
-	off += sprintf(buf+off, "\tfrwd_name       (str)Name of pkt forwarding data which has been defined by user\n");
-	off += sprintf(buf+off, "\tmod_name        (str)Name of pkt modification data which has been defined by user [or mod_empty]\n");
-	off += sprintf(buf+off, "\tcolor           (dec)0 for Green, 1 for Yellow\n");
-	off += sprintf(buf+off, "\tpolicer_id      (hex)policer_id, valid from 0 to 15, empty value: 0xff\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_type              (hex)src port type\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_PP_PORT_BM), TPM_CLASS_PP_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_SWITCH_PORT_BM), TPM_CLASS_SWITCH_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_port_class_str_get(TPM_CLASS_VIRT_PORT), TPM_CLASS_VIRT_PORT);
+	o += scnprintf(b+o, s-o, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC0), TPM_PP_GMAC0);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_GMAC1), TPM_PP_GMAC1);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_pp_port_str_get(TPM_PP_PMAC), TPM_PP_PMAC);
+	o += scnprintf(b+o, s-o, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
+	o += scnprintf(b+o, s-o, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
+	o += scnprintf(b+o, s-o, "\tip_version      (dec)IP version of the packet: 4 for IPv4; 6 for IPv6\n");
+	o += scnprintf(b+o, s-o, "\tkey_name        (str)Name of IPvX key data which has been defined by user\n");
+	o += scnprintf(b+o, s-o, "\tfrwd_name       (str)Name of pkt forwarding data which has been defined by user\n");
+	o += scnprintf(b+o, s-o, "\tmod_name        (str)Name of pkt modification data which has been defined by user [or mod_empty]\n");
+	o += scnprintf(b+o, s-o, "\tcolor           (dec)0 for Green, 1 for Yellow\n");
+	o += scnprintf(b+o, s-o, "\tpolicer_id      (hex)policer_id, valid from 0 to 15, empty value: 0xff\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1810,21 +1828,22 @@ int tpm_sys_help_exact_rule_add(char *buf)
 **  tpm_sfs_help_cnm_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_cnm_rule_add(char *buf)
+int tpm_sfs_help_cnm_rule_add(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [uni_port] [rule_num] [field_op_name] [key_name] [queue] [pbit] > cnm_rule_add\n");
-	off += sprintf(buf+off, "Creates a new CnM rule\n");
+	o += scnprintf(b+o, s-o, "echo [uni_port] [rule_num] [field_op_name] [key_name] [queue] [pbit] > cnm_rule_add\n");
+	o += scnprintf(b+o, s-o, "Creates a new CnM rule\n");
 
-	off += sprintf(buf+off, "\tuni_port        (dec)UNI port ID\n");
-	off += sprintf(buf+off, "\trule_num        (dec)0-7, CnM rule number in this UNI port\n");
-	off += sprintf(buf+off, "\tkey_name        (str)Name of pkt key data which has been defined by user\n");
-	off += sprintf(buf+off, "\tfield_op_name   (str)Name of CnM field OP data which has been defined by user\n");
-	off += sprintf(buf+off, "\tqueue           (dec)target queue number of rule\n");
-	off += sprintf(buf+off, "\tPbit            (hex)Pbit of this rule, make (0x10 | value) to set value\n");
+	o += scnprintf(b+o, s-o, "\tuni_port        (dec)UNI port ID\n");
+	o += scnprintf(b+o, s-o, "\trule_num        (dec)0-7, CnM rule number in this UNI port\n");
+	o += scnprintf(b+o, s-o, "\tkey_name        (str)Name of pkt key data which has been defined by user\n");
+	o += scnprintf(b+o, s-o, "\tfield_op_name   (str)Name of CnM field OP data which has been defined by user\n");
+	o += scnprintf(b+o, s-o, "\tqueue           (dec)target queue number of rule\n");
+	o += scnprintf(b+o, s-o, "\tPbit            (hex)Pbit of this rule, make (0x10 | value) to set value\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1832,21 +1851,22 @@ int tpm_sfs_help_cnm_rule_add(char *buf)
 **  tpm_sfs_help_cls_rule_cntr_get - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_cls_rule_cntr_get(char *buf)
+int tpm_sfs_help_cls_rule_cntr_get(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [rule_id] > cls_rule_cntr_get\n");
-	off += sprintf(buf+off, "Gets hit counter of a CLS processing ACL rule\n");
+	o += scnprintf(b+o, s-o, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [rule_id] > cls_rule_cntr_get\n");
+	o += scnprintf(b+o, s-o, "Gets hit counter of a CLS processing ACL rule\n");
 
-	off += sprintf(buf+off, "\tsrc_port_type              (hex)src port type\n");
-	off += sprintf(buf+off, "\tsrc_port_id                (hex)PHY/UNI/VIR port ID\n");
-	off += sprintf(buf+off, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
-	off += sprintf(buf+off, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
-	off += sprintf(buf+off, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\trule_id                    (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_type              (hex)src port type\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_id                (hex)PHY/UNI/VIR port ID\n");
+	o += scnprintf(b+o, s-o, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
+	o += scnprintf(b+o, s-o, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
+	o += scnprintf(b+o, s-o, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\trule_id                    (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1854,21 +1874,22 @@ int tpm_sfs_help_cls_rule_cntr_get(char *buf)
 **  tpm_sfs_help_filter_rule_cntr_get - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_filter_rule_cntr_get(char *buf)
+int tpm_sfs_help_filter_rule_cntr_get(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [rule_id] > filter_rule_cntr_get\n");
-	off += sprintf(buf+off, "Gets hit counter of a Filter rule\n");
+	o += scnprintf(b+o, s-o, "echo [src_port_type] [src_port_id] [rule_type] [parse_rule_bm] [key_name] [rule_id] > filter_rule_cntr_get\n");
+	o += scnprintf(b+o, s-o, "Gets hit counter of a Filter rule\n");
 
-	off += sprintf(buf+off, "\tsrc_port_type              (hex)src port type\n");
-	off += sprintf(buf+off, "\tsrc_port_id                (hex)PHY/UNI/VIR port ID\n");
-	off += sprintf(buf+off, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
-	off += sprintf(buf+off, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
-	off += sprintf(buf+off, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\trule_id                    (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_type              (hex)src port type\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_id                (hex)PHY/UNI/VIR port ID\n");
+	o += scnprintf(b+o, s-o, "\trule_type                  (dec)valid from 0 to 16, rules with smaller rule_type gets higher priority, rule_type and caps in it should be set in TPM INIT\n");
+	o += scnprintf(b+o, s-o, "\tparse_rule_bm              (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
+	o += scnprintf(b+o, s-o, "\tkey_name                   (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\trule_id                    (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1876,24 +1897,25 @@ int tpm_sfs_help_filter_rule_cntr_get(char *buf)
 **  tpm_sfs_help_filter_def_rule_cntr_get - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_filter_def_rule_cntr_get(char *buf)
+int tpm_sfs_help_filter_def_rule_cntr_get(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_id] > filter_def_rule_cntr_get\n");
-	off += sprintf(buf+off, "Gets hit counter of a Filter default rule\n");
-	off += sprintf(buf+off, "\trule_type(dec): from 0 to 15, filters in smaller rule_type gets higher priority\n");
-	off += sprintf(buf+off, "\tfield_bm(hex): matching field bitmap, see capability help\n");
-	off += tpm_sfs_help_parse_rule_bm_print(buf, off);
-	off += sprintf(buf+off, "\tvlan_num(dec):\n");
-	off += sprintf(buf+off, "\t    %d: TPM_NO_VLAN\n",		TPM_NO_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_SINGLE_VLAN\n",		TPM_SINGLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_DOUBLE_VLAN\n",		TPM_DOUBLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_TRIPLE_VLAN\n",		TPM_TRIPLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_NOT_DOUBLE_VLAN\n",	TPM_NOT_DOUBLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_ANY_VLAN\n",		TPM_ANY_VLAN);
+	o += scnprintf(b+o, s-o, "echo [rule_id] > filter_def_rule_cntr_get\n");
+	o += scnprintf(b+o, s-o, "Gets hit counter of a Filter default rule\n");
+	o += scnprintf(b+o, s-o, "\trule_type(dec): from 0 to 15, filters in smaller rule_type gets higher priority\n");
+	o += scnprintf(b+o, s-o, "\tfield_bm(hex): matching field bitmap, see capability help\n");
+	o = tpm_sfs_help_parse_rule_bm_print(b, o);
+	o += scnprintf(b+o, s-o, "\tvlan_num(dec):\n");
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_NO_VLAN\n",		TPM_NO_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_SINGLE_VLAN\n",		TPM_SINGLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_DOUBLE_VLAN\n",		TPM_DOUBLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_TRIPLE_VLAN\n",		TPM_TRIPLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_NOT_DOUBLE_VLAN\n",	TPM_NOT_DOUBLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_ANY_VLAN\n",		TPM_ANY_VLAN);
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1901,32 +1923,33 @@ int tpm_sfs_help_filter_def_rule_cntr_get(char *buf)
 **  tpm_sfs_help_mc_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_mc_rule_add(char *buf)
+int tpm_sfs_help_mc_rule_add(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_port_type] [src_port_id] [match_bm] [key_name] [frwd_name] [num_dest] [color] [mod_name] > mc_rule_add\n");
-	off += sprintf(buf+off, "Creates a new or update an existed IPv4/6 multicast rule\n");
+	o += scnprintf(b+o, s-o, "echo [src_port_type] [src_port_id] [match_bm] [key_name] [frwd_name] [num_dest] [color] [mod_name] > mc_rule_add\n");
+	o += scnprintf(b+o, s-o, "Creates a new or update an existed IPv4/6 multicast rule\n");
 
-	off += sprintf(buf+off, "\tsrc_port_type              (hex)src port type\n");
-	off += sprintf(buf+off, "\t\tTPM_CLASS_PP_PORT_BM     %#.4X\n", TPM_CLASS_PP_PORT_BM);
-	off += sprintf(buf+off, "\t\tTPM_CLASS_SWITCH_PORT_BM %#.4X\n", TPM_CLASS_SWITCH_PORT_BM);
-	off += sprintf(buf+off, "\t\tTPM_CLASS_GEM_PORT       %#.4X\n", TPM_CLASS_VIRT_PORT);
-	off += sprintf(buf+off, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
-	off += sprintf(buf+off, "\t\tTPM_PP_GMAC0             %#.4X\n", TPM_PP_GMAC0);
-	off += sprintf(buf+off, "\t\tTPM_PP_GMAC1             %#.4X\n", TPM_PP_GMAC1);
-	off += sprintf(buf+off, "\t\tTPM_PP_PON               %#.4X\n", TPM_PP_PMAC);
-	off += sprintf(buf+off, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
-	off += sprintf(buf+off, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
-	off += sprintf(buf+off, "\tmatch_bm                   (hex)Bitmap comibination of multicast:");
-	off += tpm_sfs_help_mc_match_bm_print(buf, off);
-	off += sprintf(buf+off, "\tkey_name                   (str)Name of Multicast key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\tfrwd_name                  (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
-	off += sprintf(buf+off, "\tnum_dest                   (dec)number of MC destination, range 1-8\n");
-	off += sprintf(buf+off, "\tcolor                      (dec)0 for Green, 1 for Yellow\n");
-	off += sprintf(buf+off, "\tmod_name                   (str)Name of pkt modification data which has been defined by user [or mod_empty]\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_type              (hex)src port type\n");
+	o += scnprintf(b+o, s-o, "\t\tTPM_CLASS_PP_PORT_BM     %#.4X\n", TPM_CLASS_PP_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\tTPM_CLASS_SWITCH_PORT_BM %#.4X\n", TPM_CLASS_SWITCH_PORT_BM);
+	o += scnprintf(b+o, s-o, "\t\tTPM_CLASS_GEM_PORT       %#.4X\n", TPM_CLASS_VIRT_PORT);
+	o += scnprintf(b+o, s-o, "\tsrc_port_id                (hex)PHY/UNI/GEM port ID\n");
+	o += scnprintf(b+o, s-o, "\t\tTPM_PP_GMAC0             %#.4X\n", TPM_PP_GMAC0);
+	o += scnprintf(b+o, s-o, "\t\tTPM_PP_GMAC1             %#.4X\n", TPM_PP_GMAC1);
+	o += scnprintf(b+o, s-o, "\t\tTPM_PP_PON               %#.4X\n", TPM_PP_PMAC);
+	o += scnprintf(b+o, s-o, "\t\t%-19sbitmap  - if bitn is set 1, then UNI n is selected\n", "UNI");
+	o += scnprintf(b+o, s-o, "\t\t%-19sinteger - in [0..4095]\n", "GEM port");
+	o += scnprintf(b+o, s-o, "\tmatch_bm                   (hex)Bitmap comibination of multicast:");
+	o = tpm_sfs_help_mc_match_bm_print(b, o);
+	o += scnprintf(b+o, s-o, "\tkey_name                   (str)Name of Multicast key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\tfrwd_name                  (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
+	o += scnprintf(b+o, s-o, "\tnum_dest                   (dec)number of MC destination, range 1-8\n");
+	o += scnprintf(b+o, s-o, "\tcolor                      (dec)0 for Green, 1 for Yellow\n");
+	o += scnprintf(b+o, s-o, "\tmod_name                   (str)Name of pkt modification data which has been defined by user [or mod_empty]\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1934,20 +1957,21 @@ int tpm_sfs_help_mc_rule_add(char *buf)
 **  tpm_sys_help_exact_except_rule_cntr_get - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sys_help_exact_except_rule_cntr_get(char *buf)
+int tpm_sys_help_exact_except_rule_cntr_get(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [src_pp_port_bm] [src_port_id] [parse_rule_bm] [key_name] [rule_id] > exact_except_rule_cntr_get\n");
-	off += sprintf(buf+off, "Gets hit counter of a exact match exception ACL\n");
+	o += scnprintf(b+o, s-o, "echo [src_pp_port_bm] [src_port_id] [parse_rule_bm] [key_name] [rule_id] > exact_except_rule_cntr_get\n");
+	o += scnprintf(b+o, s-o, "Gets hit counter of a exact match exception ACL\n");
 
-	off += sprintf(buf+off, "\tsrc_pp_port_bm  (hex)physical port bm\n");
-	off += sprintf(buf+off, "\tsrc_port_id     (hex)UNI/VIR port ID, To specify IT, set to 0x1000|value\n");
-	off += sprintf(buf+off, "\tparse_rule_bm   (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
-	off += sprintf(buf+off, "\tkey_name        (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\trule_id         (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
+	o += scnprintf(b+o, s-o, "\tsrc_pp_port_bm  (hex)physical port bm\n");
+	o += scnprintf(b+o, s-o, "\tsrc_port_id     (hex)UNI/VIR port ID, To specify IT, set to 0x1000|value\n");
+	o += scnprintf(b+o, s-o, "\tparse_rule_bm   (hex)Bitmap containing the significant flags for parsing fields of the packet:\n");
+	o += scnprintf(b+o, s-o, "\tkey_name        (str)Name of packet key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\trule_id         (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1955,18 +1979,19 @@ int tpm_sys_help_exact_except_rule_cntr_get(char *buf)
 **  tpm_sys_help_exact_rule_cntr_get - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sys_help_exact_rule_cntr_get(char *buf)
+int tpm_sys_help_exact_rule_cntr_get(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [ip_version] [key_name] [rule_id] > exact_rule_cntr_get\n");
-	off += sprintf(buf+off, "Gets hit counter of a exact exception to match IPv4/6 5T\n");
+	o += scnprintf(b+o, s-o, "echo [ip_version] [key_name] [rule_id] > exact_rule_cntr_get\n");
+	o += scnprintf(b+o, s-o, "Gets hit counter of a exact exception to match IPv4/6 5T\n");
 
-	off += sprintf(buf+off, "\tip_version      (dec)IP version of the packet: 4 for IPv4; 6 for IPv6\n");
-	off += sprintf(buf+off, "\tkey_name        (str)Name of 5T key data which has been defined by user [or %s]\n", key_empty_name);
-	off += sprintf(buf+off, "\trule_id         (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
+	o += scnprintf(b+o, s-o, "\tip_version      (dec)IP version of the packet: 4 for IPv4; 6 for IPv6\n");
+	o += scnprintf(b+o, s-o, "\tkey_name        (str)Name of 5T key data which has been defined by user [or %s]\n", key_empty_name);
+	o += scnprintf(b+o, s-o, "\trule_id         (dec)rule_id that returned by adding API call, 0 means use key value to identical rule\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -1974,55 +1999,56 @@ int tpm_sys_help_exact_rule_cntr_get(char *buf)
 **  tpm_sys_help_qos_rule_add - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_qos_tbl_cfg(char *buf)
-{
-	int off = 0;
-
-	off += sprintf(buf+off, "there are two ways to configure QOS table:\n");
-	off += sprintf(buf+off, "\t1. set QOS table HW entry directly with qos_tbl_entry_set one by one\n");
-	off += sprintf(buf+off, "\t2. set QOS table with qos_tbl_set\n");
-	off += sprintf(buf+off, "\t\ta. clear QOS table DB with qos_tbl_db_reset\n");
-	off += sprintf(buf+off, "\t\tb. set QOS table DB entry one by one with qos_tbl_entry_db_set\n");
-	off += sprintf(buf+off, "\t\tc. set QOS table HW with qos_tbl_set\n");
-
-	off += sprintf(buf+off, "\necho [qos_table_type] [qos_table_id] [qos_table_entry_id] [frwd_name] [dscp] [pbit] [color] > qos_tbl_entry_set\n");
-	off += sprintf(buf+off, "Creates a QOS table entry\n");
-	off += sprintf(buf+off, "\tqos_table_type        (dec)type of qos table\n");
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
-	off += sprintf(buf+off, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
-	off += sprintf(buf+off, "\tqos_table_entry_id    (dec)entry number in the qos table, pbit table (0-7), and dscp (0-63)\n");
-	off += sprintf(buf+off, "\tfrwd_name             (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
-	off += sprintf(buf+off, "\tdscp                  (dec)dscp value (0-63)\n");
-	off += sprintf(buf+off, "\tpbit                  (dec)pbit value (0-7)\n");
-	off += sprintf(buf+off, "\tcolor                 (dec)0 for Green, 1 for Yellow\n");
-
-	off += sprintf(buf+off, "\necho 0 > qos_tbl_db_reset\n");
-	off += sprintf(buf+off, "Reset QOS table DB\n");
-
-	off += sprintf(buf+off, "\necho [qos_table_entry_id] [frwd_name] [dscp] [pbit] [color] > qos_tbl_entry_db_set\n");
-	off += sprintf(buf+off, "Set a QOS table DB entry\n");
-	off += sprintf(buf+off, "\tqos_table_entry_id    (dec)entry number in the qos table, pbit table (0-7), and dscp (0-63)\n");
-	off += sprintf(buf+off, "\tfrwd_name             (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
-	off += sprintf(buf+off, "\tdscp                  (dec)dscp value (0-63)\n");
-	off += sprintf(buf+off, "\tpbit                  (dec)pbit value (0-7)\n");
-	off += sprintf(buf+off, "\tcolor                 (dec)0 for Green, 1 for Yellow\n");
-
-	off += sprintf(buf+off, "\necho [qos_table_type] [qos_table_id] > qos_tbl_set\n");
-	off += sprintf(buf+off, "Creates a QOS table at one time, with the configuration in DB\n");
-	off += sprintf(buf+off, "\tqos_table_type        (dec)type of qos table\n");
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
-	off += sprintf(buf+off, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
-
-	off += sprintf(buf+off, "\necho [qos_table_type] [qos_table_id] > qos_tbl_get\n");
-	off += sprintf(buf+off, "Get a QOS table from HW\n");
-	off += sprintf(buf+off, "\tqos_table_type        (dec)type of qos table\n");
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
-	off += sprintf(buf+off, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
-
-	return off;
+int tpm_sfs_help_qos_tbl_cfg(char *b)
+{
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "there are two ways to configure QOS table:\n");
+	o += scnprintf(b+o, s-o, "\t1. set QOS table HW entry directly with qos_tbl_entry_set one by one\n");
+	o += scnprintf(b+o, s-o, "\t2. set QOS table with qos_tbl_set\n");
+	o += scnprintf(b+o, s-o, "\t\ta. clear QOS table DB with qos_tbl_db_reset\n");
+	o += scnprintf(b+o, s-o, "\t\tb. set QOS table DB entry one by one with qos_tbl_entry_db_set\n");
+	o += scnprintf(b+o, s-o, "\t\tc. set QOS table HW with qos_tbl_set\n");
+
+	o += scnprintf(b+o, s-o, "\necho [qos_table_type] [qos_table_id] [qos_table_entry_id] [frwd_name] [dscp] [pbit] [color] > qos_tbl_entry_set\n");
+	o += scnprintf(b+o, s-o, "Creates a QOS table entry\n");
+	o += scnprintf(b+o, s-o, "\tqos_table_type        (dec)type of qos table\n");
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
+	o += scnprintf(b+o, s-o, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
+	o += scnprintf(b+o, s-o, "\tqos_table_entry_id    (dec)entry number in the qos table, pbit table (0-7), and dscp (0-63)\n");
+	o += scnprintf(b+o, s-o, "\tfrwd_name             (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
+	o += scnprintf(b+o, s-o, "\tdscp                  (dec)dscp value (0-63)\n");
+	o += scnprintf(b+o, s-o, "\tpbit                  (dec)pbit value (0-7)\n");
+	o += scnprintf(b+o, s-o, "\tcolor                 (dec)0 for Green, 1 for Yellow\n");
+
+	o += scnprintf(b+o, s-o, "\necho 0 > qos_tbl_db_reset\n");
+	o += scnprintf(b+o, s-o, "Reset QOS table DB\n");
+
+	o += scnprintf(b+o, s-o, "\necho [qos_table_entry_id] [frwd_name] [dscp] [pbit] [color] > qos_tbl_entry_db_set\n");
+	o += scnprintf(b+o, s-o, "Set a QOS table DB entry\n");
+	o += scnprintf(b+o, s-o, "\tqos_table_entry_id    (dec)entry number in the qos table, pbit table (0-7), and dscp (0-63)\n");
+	o += scnprintf(b+o, s-o, "\tfrwd_name             (str)Name of pkt forwarding data which has been defined by user [or frwd_empty]\n");
+	o += scnprintf(b+o, s-o, "\tdscp                  (dec)dscp value (0-63)\n");
+	o += scnprintf(b+o, s-o, "\tpbit                  (dec)pbit value (0-7)\n");
+	o += scnprintf(b+o, s-o, "\tcolor                 (dec)0 for Green, 1 for Yellow\n");
+
+	o += scnprintf(b+o, s-o, "\necho [qos_table_type] [qos_table_id] > qos_tbl_set\n");
+	o += scnprintf(b+o, s-o, "Creates a QOS table at one time, with the configuration in DB\n");
+	o += scnprintf(b+o, s-o, "\tqos_table_type        (dec)type of qos table\n");
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
+	o += scnprintf(b+o, s-o, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
+
+	o += scnprintf(b+o, s-o, "\necho [qos_table_type] [qos_table_id] > qos_tbl_get\n");
+	o += scnprintf(b+o, s-o, "Get a QOS table from HW\n");
+	o += scnprintf(b+o, s-o, "\tqos_table_type        (dec)type of qos table\n");
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
+	o += scnprintf(b+o, s-o, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
+
+	return o;
 }
 
 /*******************************************************************************
@@ -2030,19 +2056,20 @@ int tpm_sfs_help_qos_tbl_cfg(char *buf)
 **  tpm_sys_help_qos_key_cfg - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sys_help_qos_key_cfg(char *buf)
+int tpm_sys_help_qos_key_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "\necho [qos_name] [qos_table_type] [qos_table_id] > qos_key_cfg\n");
-	off += sprintf(buf+off, "Creates a QOS key entry\n");
-	off += sprintf(buf+off, "\tqos_name              (str)Name of pkt qos data which has been defined by user\n");
-	off += sprintf(buf+off, "\tqos_table_type        (dec)type of qos table\n");
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
-	off += sprintf(buf+off, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
-	off += sprintf(buf+off, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
+	o += scnprintf(b+o, s-o, "\necho [qos_name] [qos_table_type] [qos_table_id] > qos_key_cfg\n");
+	o += scnprintf(b+o, s-o, "Creates a QOS key entry\n");
+	o += scnprintf(b+o, s-o, "\tqos_name              (str)Name of pkt qos data which has been defined by user\n");
+	o += scnprintf(b+o, s-o, "\tqos_table_type        (dec)type of qos table\n");
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_DSCP), TPM_QOS_DSCP);
+	o += scnprintf(b+o, s-o, "\t\t%-11s%4d\n", tpm_utils_qos_type_str_get(TPM_QOS_PBIT), TPM_QOS_PBIT);
+	o += scnprintf(b+o, s-o, "\tqos_table_id          (dec)64 pbit tables (0-63) and 8 dscp tables (0-7)\n");
 
-	return off;
+	return o;
 }
 
 
@@ -2051,49 +2078,50 @@ int tpm_sys_help_qos_key_cfg(char *buf)
 **  tpm_sfs_help_l2_key_cfg - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_l2_key_cfg(char *buf)
-{
-	int off = 0;
-
-	off += sprintf(buf+off, "echo [rule_name] [ether_type]                     > l2_key_ethertype_rule_set  - set ethertype part of L2 ACL key\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tether_type       (hex)Ethernet type\n");
-	off += sprintf(buf+off, "echo [rule_name]                                  > l2_key_ethertype_rule_get - get ethertype part of L2 ACL key\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [SA] [SA_mask] [DA] [DA_mask]  > l2_key_mac_addr_rule_set - get MAC address part of ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += tpm_sfs_help_mac_format_print(buf, off);
-	off += sprintf(buf+off, "echo [rule_name]                                  > l2_key_mac_addr_rule_get - get MAC address part of ACL rule\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [vid_out] [pbit_out] [vid_in] [pbit_in] > l2_key_vlan_rule_set - set VLAN part of ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tvid_out          (dec)VID(0-65535), 0x0000->untagged, 0xffff->tagged, 0x1ABC->specific Outer VID=ABC\n");
-	off += sprintf(buf+off, "\tpbit_out         (dec)P-bits(0-7)\n");
-	off += sprintf(buf+off, "\tvid_in           (dec)VID(0-65535), 0x0000->not double-tagged, 0xffff-> double-tagged, 0x1ABC->specific Outer VID=ABC\n");
-	off += sprintf(buf+off, "\tpbit_in          (dec)P-bits(0-7)\n");
-	off += sprintf(buf+off, "echo [rule_name]                                  > l2_key_vlan_rule_get - get VLAN part of ACL rule\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [session] [protocol_type]      > l2_key_pppoe_rule_set - set PPPoE part of L2 ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tsession          (dec)Session number\n");
-	off += sprintf(buf+off, "\tprotocol_type    (hex)Protocol type\n");
-	off += sprintf(buf+off, "echo [rule_name]                                  > l2_key_pppoe_rule_get - get PPPoE part of L2 ACL rule\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [array_idx] [field_id] [field_op] > cnm_field_op_set - set field op of CnM rule\n");
-	off += sprintf(buf+off, "\tEach CnM rule could have up to 6 fields:\n");
-	off += sprintf(buf+off, "\tThree of them :no bigger than 2 bytes, operator could be equal, not equal, greater equal or less equal.\n");
-	off += sprintf(buf+off, "\tone of them   :no bigger than 16 bytes, operator could be equal, not equal.\n");
-	off += sprintf(buf+off, "\tone of them   :no bigger than 6 bytes, operator could be equal, not equal.\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tarray_idx        (dec)field index with name rule_name, range 0-%d, must be continuous and starts from 0\n", (TPM_CNM_FIELD_MAX - 1));
-	off += sprintf(buf+off, "\tfield_id         (hex)field, only one field is allowed\n");
-	off += sprintf(buf+off, "\tfield_op         (dex)operation on this field\n");
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_EQUAL), TPM_CNM_OP_EQUAL);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_NOT_EQUAL), TPM_CNM_OP_NOT_EQUAL);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_LESS_EQUAL), TPM_CNM_OP_LESS_EQUAL);
-	off += sprintf(buf+off, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_GREATER_EQUAL), TPM_CNM_OP_GREATER_EQUAL);
-
-	return off;
+int tpm_sfs_help_l2_key_cfg(char *b)
+{
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "echo [rule_name] [ether_type]                     > l2_key_ethertype_rule_set  - set ethertype part of L2 ACL key\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tether_type       (hex)Ethernet type\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                                  > l2_key_ethertype_rule_get - get ethertype part of L2 ACL key\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [SA] [SA_mask] [DA] [DA_mask]  > l2_key_mac_addr_rule_set - get MAC address part of ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o = tpm_sfs_help_mac_format_print(b, o);
+	o += scnprintf(b+o, s-o, "echo [rule_name]                                  > l2_key_mac_addr_rule_get - get MAC address part of ACL rule\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [vid_out] [pbit_out] [vid_in] [pbit_in] > l2_key_vlan_rule_set - set VLAN part of ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tvid_out          (dec)VID(0-65535), 0x0000->untagged, 0xffff->tagged, 0x1ABC->specific Outer VID=ABC\n");
+	o += scnprintf(b+o, s-o, "\tpbit_out         (dec)P-bits(0-7)\n");
+	o += scnprintf(b+o, s-o, "\tvid_in           (dec)VID(0-65535), 0x0000->not double-tagged, 0xffff-> double-tagged, 0x1ABC->specific Outer VID=ABC\n");
+	o += scnprintf(b+o, s-o, "\tpbit_in          (dec)P-bits(0-7)\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                                  > l2_key_vlan_rule_get - get VLAN part of ACL rule\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [session] [protocol_type]      > l2_key_pppoe_rule_set - set PPPoE part of L2 ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tsession          (dec)Session number\n");
+	o += scnprintf(b+o, s-o, "\tprotocol_type    (hex)Protocol type\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                                  > l2_key_pppoe_rule_get - get PPPoE part of L2 ACL rule\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [array_idx] [field_id] [field_op] > cnm_field_op_set - set field op of CnM rule\n");
+	o += scnprintf(b+o, s-o, "\tEach CnM rule could have up to 6 fields:\n");
+	o += scnprintf(b+o, s-o, "\tThree of them :no bigger than 2 bytes, operator could be equal, not equal, greater equal or less equal.\n");
+	o += scnprintf(b+o, s-o, "\tone of them   :no bigger than 16 bytes, operator could be equal, not equal.\n");
+	o += scnprintf(b+o, s-o, "\tone of them   :no bigger than 6 bytes, operator could be equal, not equal.\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tarray_idx        (dec)field index with name rule_name, range 0-%d, must be continuous and starts from 0\n", (TPM_CNM_FIELD_MAX - 1));
+	o += scnprintf(b+o, s-o, "\tfield_id         (hex)field, only one field is allowed\n");
+	o += scnprintf(b+o, s-o, "\tfield_op         (dex)operation on this field\n");
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_EQUAL), TPM_CNM_OP_EQUAL);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_NOT_EQUAL), TPM_CNM_OP_NOT_EQUAL);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_LESS_EQUAL), TPM_CNM_OP_LESS_EQUAL);
+	o += scnprintf(b+o, s-o, "\t\t%-19s%#X\n", tpm_utils_field_op_str_get(TPM_CNM_OP_GREATER_EQUAL), TPM_CNM_OP_GREATER_EQUAL);
+
+	return o;
 }
 
 /*******************************************************************************
@@ -2101,42 +2129,43 @@ int tpm_sfs_help_l2_key_cfg(char *buf)
 **  tpm_sfs_help_ipvx_key_cfg - see header of sfs_tpm_cfg_index
 **
 *******************************************************************************/
-int tpm_sfs_help_ipvx_key_cfg(char *buf)
+int tpm_sfs_help_ipvx_key_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_name] [proto]                     > ipvx_key_proto_rule_set - set protocol part of IPVX ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tproto            (dec)Protocol 0-255\n");
-	off += sprintf(buf+off, "echo [rule_name]                             > ipvx_key_proto_rule_get - get protocol part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name] [proto]                     > ipvx_key_proto_rule_set - set protocol part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tproto            (dec)Protocol 0-255\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                             > ipvx_key_proto_rule_get - get protocol part of IPVX ACL rule\n");
 
-	off += sprintf(buf+off, "\necho [rule_name] [dscp] [dscp_mask]        > ipvx_key_dscp_rule_set - set dscp part of IPVX ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tdscp             (dec)DSCP value(0-63)\n");
-	off += sprintf(buf+off, "\tdscp_mask        (hex)DSCP mask(0x0-0xFF)\n");
-	off += sprintf(buf+off, "echo [rule_name]                             > ipvx_key_dscp_rule_get - get dscp part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [dscp] [dscp_mask]        > ipvx_key_dscp_rule_set - set dscp part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tdscp             (dec)DSCP value(0-63)\n");
+	o += scnprintf(b+o, s-o, "\tdscp_mask        (hex)DSCP mask(0x0-0xFF)\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                             > ipvx_key_dscp_rule_get - get dscp part of IPVX ACL rule\n");
 
-	off += sprintf(buf+off, "\necho [rule_name] [flbl] [flbl_mask]        > ipv6_key_flbl_rule_set - set flow label part of IPV6 ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tflbl             (dec)Flow Label value(0-1048575)\n");
-	off += sprintf(buf+off, "\tflbl_mask        (hex)Flow Label mask(0x0-0xFFFFF)\n");
-	off += sprintf(buf+off, "echo [rule_name]                             > ipv6_key_flbl_rule_get - get flow label part of IPV6 ACL rule\n");
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [flbl] [flbl_mask]        > ipv6_key_flbl_rule_set - set flow label part of IPV6 ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tflbl             (dec)Flow Label value(0-1048575)\n");
+	o += scnprintf(b+o, s-o, "\tflbl_mask        (hex)Flow Label mask(0x0-0xFFFFF)\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                             > ipv6_key_flbl_rule_get - get flow label part of IPV6 ACL rule\n");
 
-	off += sprintf(buf+off, "\necho [rule_name] [src_port] [dst_port]     > ipvx_key_port_rule_set - set IPVX port part of IPVX ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tsrc_port         (dec)Source port\n");
-	off += sprintf(buf+off, "\tdst_port         (dec)Destination port\n");
-	off += sprintf(buf+off, "echo [rule_name]                             > ipvx_key_port_rule_get - get IPVX port part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [src_port] [dst_port]     > ipvx_key_port_rule_set - set IPVX port part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tsrc_port         (dec)Source port\n");
+	o += scnprintf(b+o, s-o, "\tdst_port         (dec)Destination port\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                             > ipvx_key_port_rule_get - get IPVX port part of IPVX ACL rule\n");
 
-	off += sprintf(buf+off, "\necho [rule_name] [ip_version] [src_ip] [src_ip_mask] [dst_ip] [dst_ip_mask] > ipvx_key_addr_rule_set - set IPVX address part of IPVX ACL rule\n");
-	off += sprintf(buf+off, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
-	off += sprintf(buf+off, "\tip_version       (dec)4 for IPv4, 6 for IPv6\n");
-	off += sprintf(buf+off, "echo [rule_name]                             > ipvx_key_addr_rule_get - get IPVX address part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [ip_version] [src_ip] [src_ip_mask] [dst_ip] [dst_ip_mask] > ipvx_key_addr_rule_set - set IPVX address part of IPVX ACL rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name        (max %d chars)Rule name\n", DB_TPMCFG_MAX_NAME);
+	o += scnprintf(b+o, s-o, "\tip_version       (dec)4 for IPv4, 6 for IPv6\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name]                             > ipvx_key_addr_rule_get - get IPVX address part of IPVX ACL rule\n");
 
-	off += sprintf(buf+off, "\necho [rule_name] [version]		      > ipvx_key_ver_rule_set - set version part of IP ACL rule\n");
-	off += tpm_sfs_help_ipvx_format_print(buf, off);
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [version]		      > ipvx_key_ver_rule_set - set version part of IP ACL rule\n");
+	o = tpm_sfs_help_ipvx_format_print(b, o);
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -2144,76 +2173,77 @@ int tpm_sfs_help_ipvx_key_cfg(char *buf)
 **  tpm_sfs_help_mod_bitmap_cfg - Modification cfg bit map
 **
 *******************************************************************************/
-int tpm_sfs_help_mod_bitmap_cfg(char *buf)
+int tpm_sfs_help_mod_bitmap_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "\necho [rule_name] [mod_idx] [mod_bm]                         > mod_bit_map_set - set mod bitmap\n");
-	off += sprintf(buf+off, "\trule_name           (max 16 chars)Rule name\n");
-	off += sprintf(buf+off, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
-	off += sprintf(buf+off, "\tmod_bm              (hex)mod bit map value\n\n");
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [mod_idx] [mod_bm]                         > mod_bit_map_set - set mod bitmap\n");
+	o += scnprintf(b+o, s-o, "\trule_name           (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
+	o += scnprintf(b+o, s-o, "\tmod_bm              (hex)mod bit map value\n\n");
 
-	off += sprintf(buf+off, "\tFollowing is Mod BM supported:\n");
+	o += scnprintf(b+o, s-o, "\tFollowing is Mod BM supported:\n");
 
 	/* L2 Switch */
-	off += sprintf(buf+off, "\t\t0x%05x - VLAN\n", TPM_VLAN_MOD);
-	off += sprintf(buf+off, "\t\t0x%05x - IPV4 | VLAN | DSCP\n", TPM_VLAN_MOD | TPM_IP_DSCP_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPV6 | VLAN | DSCP\n", TPM_VLAN_MOD | TPM_IP_DSCP_SET);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - VLAN\n", TPM_VLAN_MOD);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPV4 | VLAN | DSCP\n", TPM_VLAN_MOD | TPM_IP_DSCP_SET);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPV6 | VLAN | DSCP\n", TPM_VLAN_MOD | TPM_IP_DSCP_SET);
 
 	/* IPv4 Napt */
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | TTL | SIP | L4_SRC\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | TTL | SIP | L4_SRC\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC | TPM_IP_SRC_SET | TPM_L4_SRC_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | TTL | DIP | L4_DST\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | TTL | DIP | L4_DST\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC | TPM_IP_DST_SET | TPM_L4_DST_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | TTL | SIP | L4_SRC\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | TTL | SIP | L4_SRC\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC | TPM_IP_SRC_SET | TPM_L4_SRC_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | TTL | DIP | L4_DST\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | TTL | DIP | L4_DST\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC | TPM_IP_DST_SET | TPM_L4_DST_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | PPPoE ADD | TTL | SIP | L4_SRC\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | PPPoE ADD | TTL | SIP | L4_SRC\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC | TPM_IP_SRC_SET | TPM_L4_SRC_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL | DIP | L4_DST\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL | DIP | L4_DST\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC | TPM_IP_DST_SET | TPM_L4_DST_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE ADD | TTL | SIP | L4_SRC\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE ADD | TTL | SIP | L4_SRC\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC | TPM_IP_SRC_SET | TPM_L4_SRC_SET);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL | DIP | L4_DST\n",
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL | DIP | L4_DST\n",
 	    TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC | TPM_IP_DST_SET | TPM_L4_DST_SET);
 
 	/* IPv6 Route */
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | VLAN | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | PPPoE ADD | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE ADD | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | VLAN | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | PPPoE ADD | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE ADD | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
 
 	/* IPv4 Route */
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | PPPoE ADD | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE ADD | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | PPPoE ADD | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE ADD | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_ADD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
 
 	/* (IPv4) Multicast */
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | SA | VLAN | TTL\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | SA | TTL\n", TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | SA | VLAN | TTL\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | SA | VLAN | TTL\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | SA | TTL\n", TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | SA | VLAN | TTL\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv4 | DA | SA | VLAN | PPPoE DEL | TTL\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
 
 	/* (IPv6) Multicast */
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | SA | VLAN | HOPLIM\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | SA | HOPLIM\n", TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | SA | VLAN | HOPLIM\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
-	off += sprintf(buf+off, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | SA | VLAN | HOPLIM\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | SA | HOPLIM\n", TPM_ETH_SRC_SET | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | SA | VLAN | HOPLIM\n", TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
+	o += scnprintf(b+o, s-o, "\t\t0x%05x - IPv6 | DA | SA | VLAN | PPPoE DEL | HOPLIM\n", TPM_ETH_DST_SET | TPM_ETH_SRC_SET | TPM_VLAN_MOD | TPM_PPOE_DEL | TPM_TTL_HOPL_DEC);
 
-	off += sprintf(buf+off, "\nNOTE: For IP Packet, all above cases can update DSCP by (Above_BM | 0x%x)\n\n", TPM_IP_DSCP_SET);
-	return off;
+	o += scnprintf(b+o, s-o, "\nNOTE: For IP Packet, all above cases can update DSCP by (Above_BM | 0x%x)\n\n", TPM_IP_DSCP_SET);
+	return o;
 }
 
 /*******************************************************************************
@@ -2221,45 +2251,46 @@ int tpm_sfs_help_mod_bitmap_cfg(char *buf)
 **  tpm_sfs_help_mod_rule_cfg - Modification cfg help info
 **
 *******************************************************************************/
-int tpm_sfs_help_mod_rule_cfg(char *buf)
-{
-	int off = 0;
-
-	off += sprintf(buf+off, "\necho [rule_name] [mod_idx] [operation] [vlan_rule_1] [vlan_rule_2] > mod_vlan_rule_set    - set VLAN part of mod rule\n");
-	off += sprintf(buf+off, "\trule_name           (max 16 chars)Rule name\n");
-	off += sprintf(buf+off, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
-	off += sprintf(buf+off, "\toperation           (str)VLAN operation\n");
-	off += sprintf(buf+off, "\t\tnone      ext_tag_mod  ext_tag_del  ext_tag_ins  ext_tag_mod_ins  ins_2tag\n");
-	off += sprintf(buf+off, "\t\tmod_2tag  swap_tags    del_2tags    int_tag_mod  ext_tag_del_int_mod\n");
-	off += sprintf(buf+off, "\tvlan_rule_1         (str)VLAN rule (Use vlan_empty for absent rule)\n");
-	off += sprintf(buf+off, "\tvlan_rule_2         (str)VLAN rule (Use vlan_empty for absent rule)\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [mod_idx] [dscp] [dscpmask]                         > mod_dscp_rule_set      - set dscp part of mod rule\n");
-	off += sprintf(buf+off, "\trule_name           (max 16 chars)Rule name\n");
-	off += sprintf(buf+off, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
-	off += sprintf(buf+off, "\tdscp                (dec)DSCP value\n");
-	off += sprintf(buf+off, "\tdscp_mask           (hex)DSCP mask\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [mod_idx] [session] [protocol_type]                 > mod_pppoe_rule_set     - set PPPoE part of mod rule\n");
-	off += sprintf(buf+off, "\trule_name           (max 16 chars)Rule name\n");
-	off += sprintf(buf+off, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
-	off += sprintf(buf+off, "\tsession             (dec)Session number\n");
-	off += sprintf(buf+off, "\tprotocol_type       (hex)Protocol type\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [mod_idx] [src_port] [dst_port]                     > mod_l4_port_rule_set - set L4 port part of mod rule\n");
-	off += sprintf(buf+off, "\trule_name           (max 16 chars)Rule name\n");
-	off += sprintf(buf+off, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
-	off += sprintf(buf+off, "\tsrc_port            (dec)Source port\n");
-	off += sprintf(buf+off, "\tdst_port            (dec)Destination port\n");
-
-	off += sprintf(buf+off, "\necho [rule_name] [mod_idx] [srcip] [srcip_mask] [dstip] [dstip_mask] > mod_ipv6_addr_rule_set - set IPV6 address part of mod rule\n");
-	off += sprintf(buf+off, "echo [rule_name] [mod_idx] [srcip] [srcip_mask] [dstip] [dstip_mask] > mod_ipv4_addr_rule_set - set IPV4 address part of mod rule\n");
-	off += sprintf(buf+off, "echo [rule_name] [mod_idx] [SA] [SA_mask] [DA] [DA_mask]             > mod_mac_addr_rule_set  - set MAC address part of mod rule\n");
-	off += sprintf(buf+off, "\trule_name            (max 16 chars)Rule name\n");
-	off += sprintf(buf+off, "\tmod_idx              (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
-	off += tpm_sfs_help_mac_format_print(buf, off);
-	off += tpm_sfs_help_ipvx_format_print(buf, off);
-	return off;
+int tpm_sfs_help_mod_rule_cfg(char *b)
+{
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [mod_idx] [operation] [vlan_rule_1] [vlan_rule_2] > mod_vlan_rule_set    - set VLAN part of mod rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name           (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
+	o += scnprintf(b+o, s-o, "\toperation           (str)VLAN operation\n");
+	o += scnprintf(b+o, s-o, "\t\tnone      ext_tag_mod  ext_tag_del  ext_tag_ins  ext_tag_mod_ins  ins_2tag\n");
+	o += scnprintf(b+o, s-o, "\t\tmod_2tag  swap_tags    del_2tags    int_tag_mod  ext_tag_del_int_mod\n");
+	o += scnprintf(b+o, s-o, "\tvlan_rule_1         (str)VLAN rule (Use vlan_empty for absent rule)\n");
+	o += scnprintf(b+o, s-o, "\tvlan_rule_2         (str)VLAN rule (Use vlan_empty for absent rule)\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [mod_idx] [dscp] [dscpmask]                         > mod_dscp_rule_set      - set dscp part of mod rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name           (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
+	o += scnprintf(b+o, s-o, "\tdscp                (dec)DSCP value\n");
+	o += scnprintf(b+o, s-o, "\tdscp_mask           (hex)DSCP mask\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [mod_idx] [session] [protocol_type]                 > mod_pppoe_rule_set     - set PPPoE part of mod rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name           (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
+	o += scnprintf(b+o, s-o, "\tsession             (dec)Session number\n");
+	o += scnprintf(b+o, s-o, "\tprotocol_type       (hex)Protocol type\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [mod_idx] [src_port] [dst_port]                     > mod_l4_port_rule_set - set L4 port part of mod rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name           (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o, "\tmod_idx             (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
+	o += scnprintf(b+o, s-o, "\tsrc_port            (dec)Source port\n");
+	o += scnprintf(b+o, s-o, "\tdst_port            (dec)Destination port\n");
+
+	o += scnprintf(b+o, s-o, "\necho [rule_name] [mod_idx] [srcip] [srcip_mask] [dstip] [dstip_mask] > mod_ipv6_addr_rule_set - set IPV6 address part of mod rule\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name] [mod_idx] [srcip] [srcip_mask] [dstip] [dstip_mask] > mod_ipv4_addr_rule_set - set IPV4 address part of mod rule\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name] [mod_idx] [SA] [SA_mask] [DA] [DA_mask]             > mod_mac_addr_rule_set  - set MAC address part of mod rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name            (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o, "\tmod_idx              (dec)index in mod array with name rule_name, range 0-%d\n", (TPM_ACT_NUM_MAX - 1));
+	o = tpm_sfs_help_mac_format_print(b, o);
+	o = tpm_sfs_help_ipvx_format_print(b, o);
+	return o;
 }
 
 /*******************************************************************************
@@ -2267,22 +2298,23 @@ int tpm_sfs_help_mod_rule_cfg(char *buf)
 **  tpm_sfs_help_mod_vlan_key_cfg - Mod valn key set help
 **
 *******************************************************************************/
-int tpm_sfs_help_mod_vlan_key_cfg(char *buf)
+int tpm_sfs_help_mod_vlan_key_cfg(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "echo [rule_name] [tpid] [tpid_mask] [vid] [vid_mask] [cfi] [cfi_mask] [pbit] [pbit_mask] > mod_vlan_key_set        - set a VLAN rule\n");
-	off += sprintf(buf+off, "\trule_name           (max 16 chars)Rule name\n");
-	off += sprintf(buf+off, "\ttpid                (hex)TPID VLAN Ethertype\n");
-	off += sprintf(buf+off, "\ttpid_mask           (hex)TPID mask\n");
-	off += sprintf(buf+off, "\tvid                 (dec)VID\n");
-	off += sprintf(buf+off, "\tvid_mask            (hex)VID mask\n");
-	off += sprintf(buf+off, "\tcfi                 (dec)CFI\n");
-	off += sprintf(buf+off, "\tcfi_mask            (hex)CFI mask\n");
-	off += sprintf(buf+off, "\tpbit                (dec)P-bits\n");
-	off += sprintf(buf+off, "\tpbit_mask           (hex)P-bits mask\n");
+	o += scnprintf(b+o, s-o, "echo [rule_name] [tpid] [tpid_mask] [vid] [vid_mask] [cfi] [cfi_mask] [pbit] [pbit_mask] > mod_vlan_key_set        - set a VLAN rule\n");
+	o += scnprintf(b+o, s-o, "\trule_name           (max 16 chars)Rule name\n");
+	o += scnprintf(b+o, s-o, "\ttpid                (hex)TPID VLAN Ethertype\n");
+	o += scnprintf(b+o, s-o, "\ttpid_mask           (hex)TPID mask\n");
+	o += scnprintf(b+o, s-o, "\tvid                 (dec)VID\n");
+	o += scnprintf(b+o, s-o, "\tvid_mask            (hex)VID mask\n");
+	o += scnprintf(b+o, s-o, "\tcfi                 (dec)CFI\n");
+	o += scnprintf(b+o, s-o, "\tcfi_mask            (hex)CFI mask\n");
+	o += scnprintf(b+o, s-o, "\tpbit                (dec)P-bits\n");
+	o += scnprintf(b+o, s-o, "\tpbit_mask           (hex)P-bits mask\n");
 
-	return off ;
+	return o ;
 }
 
 /******************************************************************************/
@@ -2332,26 +2364,26 @@ void tpm_sfs_cfg_frwd_rule_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %x %d %d %d %x", name, &frwd_idx, &temp_port,
 				&temp_tcont, &temp_que, &temp_gem_flag, &temp_gem);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] temp_port[0x%x],temp_que[%d],temp_gem[%d]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] temp_port[0x%x],temp_que[%d],temp_gem[%d]\n",
 	       len, parsedargs, name, temp_port, temp_que, temp_gem);
 */
 		if (frwd_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid frwd index [%d]\n", frwd_idx);
+			mvOsPrintf("Invalid frwd index [%d]\n", frwd_idx);
 			return;
 		}
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_que > 255) {
-			printk(KERN_INFO "Invalid queue [%d]\n", temp_que);
+			mvOsPrintf("Invalid queue [%d]\n", temp_que);
 		} else if (temp_tcont > 15) {
-			printk(KERN_INFO "Invalid tcont [%d]\n", temp_tcont);
+			mvOsPrintf("Invalid tcont [%d]\n", temp_tcont);
 		} else {
 			pentry = find_tpm_pkt_frwd_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_frwd_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Packet Forward DB full\n");
+				mvOsPrintf("Packet Forward DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->frwd[frwd_idx].pp_port  = temp_port;
@@ -2406,20 +2438,20 @@ void tpm_sfs_cfg_cnm_field_op_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %x %d", name, &field_idx, &temp_field_id, &temp_field_op);
 		if (field_idx >= TPM_CNM_FIELD_MAX) {
-			printk(KERN_INFO "Invalid field_idx [%d]\n", field_idx);
+			mvOsPrintf("Invalid field_idx [%d]\n", field_idx);
 			return;
 		}
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_field_op >= TPM_CNM_FIELD_MAX) {
-			printk(KERN_INFO "Invalid field_op [%d]\n", temp_field_op);
+			mvOsPrintf("Invalid field_op [%d]\n", temp_field_op);
 		} else {
 			pentry = find_tpm_cnm_field_op_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_cnm_field_op_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "cnm_field_op DB full\n");
+				mvOsPrintf("cnm_field_op DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->field_op[field_idx].op = temp_field_op;
@@ -2435,171 +2467,171 @@ static void tpm_sfs_api_rule_key_dump(struct tpm_db_mng_api_data_t *api_data)
 	int parse_rule_bm = api_data->match_key.field_match_bm;
 
 	if (parse_rule_bm & TPM_MATCH_ETH_DST) {
-		printk(KERN_INFO "dmac:      %pM\n", api_data->match_key.eth_dst.eth_add);
-		printk(KERN_INFO "dmac_mask: %pM\n", api_data->match_key.eth_dst.eth_add_mask);
+		mvOsPrintf("dmac:      %pM\n", api_data->match_key.eth_dst.eth_add);
+		mvOsPrintf("dmac_mask: %pM\n", api_data->match_key.eth_dst.eth_add_mask);
 	} else {
-		printk(KERN_INFO "dmac:      NULL\n");
-		printk(KERN_INFO "dmac_mask: NULL\n");
+		mvOsPrintf("dmac:      NULL\n");
+		mvOsPrintf("dmac_mask: NULL\n");
 	}
 	if (parse_rule_bm & TPM_MATCH_ETH_SRC) {
-		printk(KERN_INFO "smac:      %pM\n", api_data->match_key.eth_src.eth_add);
-		printk(KERN_INFO "smac_mask: %pM\n", api_data->match_key.eth_src.eth_add_mask);
+		mvOsPrintf("smac:      %pM\n", api_data->match_key.eth_src.eth_add);
+		mvOsPrintf("smac_mask: %pM\n", api_data->match_key.eth_src.eth_add_mask);
 	} else {
-		printk(KERN_INFO "smac:      NULL\n");
-		printk(KERN_INFO "smac_mask: NULL\n");
+		mvOsPrintf("smac:      NULL\n");
+		mvOsPrintf("smac_mask: NULL\n");
 	}
 	if (parse_rule_bm & TPM_MATCH_VID_OUTER)
-		printk(KERN_INFO "vid_outer: %d\n", api_data->match_key.out_vid);
+		mvOsPrintf("vid_outer: %d\n", api_data->match_key.out_vid);
 	else
-		printk(KERN_INFO "vid_outer: NULL\n");
+		mvOsPrintf("vid_outer: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_PBITS_OUTER)
-		printk(KERN_INFO "pbit_outer: %d\n", api_data->match_key.out_pbit);
+		mvOsPrintf("pbit_outer: %d\n", api_data->match_key.out_pbit);
 	else
-		printk(KERN_INFO "pbit_outer: NULL\n");
+		mvOsPrintf("pbit_outer: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_VID_INNER)
-		printk(KERN_INFO "vid_inner: %d\n", api_data->match_key.inn_vid);
+		mvOsPrintf("vid_inner: %d\n", api_data->match_key.inn_vid);
 	else
-		printk(KERN_INFO "vid_inner: NULL\n");
+		mvOsPrintf("vid_inner: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_PBITS_INNER)
-		printk(KERN_INFO "pbit_inner: %d\n", api_data->match_key.inn_pbit);
+		mvOsPrintf("pbit_inner: %d\n", api_data->match_key.inn_pbit);
 	else
-		printk(KERN_INFO "pbit_inner: NULL\n");
+		mvOsPrintf("pbit_inner: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_ETH_TYPE)
-		printk(KERN_INFO "eth_type: %d\n", api_data->match_key.ether_type);
+		mvOsPrintf("eth_type: %d\n", api_data->match_key.ether_type);
 	else
-		printk(KERN_INFO "eth_type: NULL\n");
+		mvOsPrintf("eth_type: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_PPPOE_PROTO)
-		printk(KERN_INFO "pppoe_proto: %d\n", api_data->match_key.ppp_info.ppp_proto);
+		mvOsPrintf("pppoe_proto: %d\n", api_data->match_key.ppp_info.ppp_proto);
 	else
-		printk(KERN_INFO "pppoe_proto: NULL\n");
+		mvOsPrintf("pppoe_proto: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_PPPOE_SES)
-		printk(KERN_INFO "pppoe_session: %d\n", api_data->match_key.ppp_info.ppp_session);
+		mvOsPrintf("pppoe_session: %d\n", api_data->match_key.ppp_info.ppp_session);
 	else
-		printk(KERN_INFO "pppoe_session: NULL\n");
+		mvOsPrintf("pppoe_session: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_IP_SRC) {
 		if (parse_rule_bm & TPM_MATCH_IPV4_PKT) {
-			printk(KERN_INFO "sipv4:      %pi4\n", api_data->match_key.ipvx_add.ip_src.ip_add.ipv4);
-			printk(KERN_INFO "sipv4_mask: %pi4\n", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv4);
+			mvOsPrintf("sipv4:      %pi4\n", api_data->match_key.ipvx_add.ip_src.ip_add.ipv4);
+			mvOsPrintf("sipv4_mask: %pi4\n", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv4);
 		}
 		if (parse_rule_bm & (TPM_MATCH_IPV6_PKT | TPM_MATCH_IPV6_PREF | TPM_MATCH_IPV6_SUFF)) {
-			printk(KERN_INFO "sipv6:      %pI6\n", api_data->match_key.ipvx_add.ip_src.ip_add.ipv6);
-			printk(KERN_INFO "sipv6_mask: %pI6\n", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv6);
+			mvOsPrintf("sipv6:      %pI6\n", api_data->match_key.ipvx_add.ip_src.ip_add.ipv6);
+			mvOsPrintf("sipv6_mask: %pI6\n", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv6);
 		}
 	} else {
-		printk(KERN_INFO "sip: NULL\n");
-		printk(KERN_INFO "sip_mask: NULL\n");
+		mvOsPrintf("sip: NULL\n");
+		mvOsPrintf("sip_mask: NULL\n");
 	}
 	if (parse_rule_bm & TPM_MATCH_IP_DST) {
 		if (parse_rule_bm & TPM_MATCH_IPV4_PKT) {
-			printk(KERN_INFO "dipv4:      %pi4\n", api_data->match_key.ipvx_add.ip_dst.ip_add.ipv4);
-			printk(KERN_INFO "dipv4_mask: %pi4\n", api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv4);
+			mvOsPrintf("dipv4:      %pi4\n", api_data->match_key.ipvx_add.ip_dst.ip_add.ipv4);
+			mvOsPrintf("dipv4_mask: %pi4\n", api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv4);
 		}
 		if (parse_rule_bm & (TPM_MATCH_IPV6_PKT | TPM_MATCH_IPV6_PREF | TPM_MATCH_IPV6_SUFF)) {
-			printk(KERN_INFO "dipv6:      %pI6\n", api_data->match_key.ipvx_add.ip_dst.ip_add.ipv6);
-			printk(KERN_INFO "dipv6_mask: %pI6\n", api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv6);
+			mvOsPrintf("dipv6:      %pI6\n", api_data->match_key.ipvx_add.ip_dst.ip_add.ipv6);
+			mvOsPrintf("dipv6_mask: %pI6\n", api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv6);
 		}
 	} else {
-		printk(KERN_INFO "dip: NULL\n");
-		printk(KERN_INFO "dip_mask: NULL\n");
+		mvOsPrintf("dip: NULL\n");
+		mvOsPrintf("dip_mask: NULL\n");
 	}
 	if (parse_rule_bm & TPM_MATCH_IP_DSCP) {
-		printk(KERN_INFO "dscp:      %d\n", api_data->match_key.ipvx_add.dscp);
-		printk(KERN_INFO "dscp_mask: %d\n", api_data->match_key.ipvx_add.dscp_mask);
+		mvOsPrintf("dscp:      %d\n", api_data->match_key.ipvx_add.dscp);
+		mvOsPrintf("dscp_mask: %d\n", api_data->match_key.ipvx_add.dscp_mask);
 	} else {
-		printk(KERN_INFO "dscp: NULL\n");
-		printk(KERN_INFO "dscp_mask: NULL\n");
+		mvOsPrintf("dscp: NULL\n");
+		mvOsPrintf("dscp_mask: NULL\n");
 	}
 	if (parse_rule_bm & TPM_MATCH_IPV6_FLBL) {
-		printk(KERN_INFO "flow_lable:      %d\n", api_data->match_key.ipvx_add.flow_label);
-		printk(KERN_INFO "flow_lable_mask: %d\n", api_data->match_key.ipvx_add.flow_label_mask);
+		mvOsPrintf("flow_lable:      %d\n", api_data->match_key.ipvx_add.flow_label);
+		mvOsPrintf("flow_lable_mask: %d\n", api_data->match_key.ipvx_add.flow_label_mask);
 	} else {
-		printk(KERN_INFO "flow_lable: NULL\n");
-		printk(KERN_INFO "flow_lable_mask: NULL\n");
+		mvOsPrintf("flow_lable: NULL\n");
+		mvOsPrintf("flow_lable_mask: NULL\n");
 	}
 	if (parse_rule_bm & TPM_MATCH_IP_PROTO)
-		printk(KERN_INFO "ip_proto: %d\n", api_data->match_key.ipvx_add.ip_proto);
+		mvOsPrintf("ip_proto: %d\n", api_data->match_key.ipvx_add.ip_proto);
 	else
-		printk(KERN_INFO "ip_proto: NULL\n");
+		mvOsPrintf("ip_proto: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_L4_SRC)
-		printk(KERN_INFO "l4_src: %d\n", api_data->match_key.l4_src);
+		mvOsPrintf("l4_src: %d\n", api_data->match_key.l4_src);
 	else
-		printk(KERN_INFO "l4_src: NULL\n");
+		mvOsPrintf("l4_src: NULL\n");
 
 	if (parse_rule_bm & TPM_MATCH_L4_DST)
-		printk(KERN_INFO "l4_dst: %d\n", api_data->match_key.l4_dst);
+		mvOsPrintf("l4_dst: %d\n", api_data->match_key.l4_dst);
 	else
-		printk(KERN_INFO "l4_dst: NULL\n");
+		mvOsPrintf("l4_dst: NULL\n");
 
 }
 static void tpm_sfs_api_rule_mod_dump(struct tpm_pkt_mod_t *mod)
 {
 	int mod_bm = mod->mod_bm;
 
-	printk(KERN_INFO "mod_bm:  0x%08x\n", mod_bm);
+	mvOsPrintf("mod_bm:  0x%08x\n", mod_bm);
 
 	if (mod_bm & TPM_ETH_DST_SET)
-		printk(KERN_INFO "dmac: %pM\n", mod->eth_dst);
+		mvOsPrintf("dmac: %pM\n", mod->eth_dst);
 	else
-		printk(KERN_INFO "dmac: NULL\n");
+		mvOsPrintf("dmac: NULL\n");
 
 	if (mod_bm & TPM_ETH_SRC_SET)
-		printk(KERN_INFO "smac:  %pM\n", mod->eth_src);
+		mvOsPrintf("smac:  %pM\n", mod->eth_src);
 	else
-		printk(KERN_INFO "smac: NULL\n");
+		mvOsPrintf("smac: NULL\n");
 
 	if (mod_bm & TPM_PPOE_ADD) {
-		printk(KERN_INFO "pppoe_proto: %d\n", mod->pppoe_mod.ppp_proto);
-		printk(KERN_INFO "pppoe_session: %d\n", mod->pppoe_mod.ppp_session);
+		mvOsPrintf("pppoe_proto: %d\n", mod->pppoe_mod.ppp_proto);
+		mvOsPrintf("pppoe_session: %d\n", mod->pppoe_mod.ppp_session);
 	} else {
-		printk(KERN_INFO "pppoe_proto: NULL\n");
-		printk(KERN_INFO "pppoe_session: NULL\n");
+		mvOsPrintf("pppoe_proto: NULL\n");
+		mvOsPrintf("pppoe_session: NULL\n");
 	}
 	if (mod_bm & TPM_IP_DSCP_SET)
-		printk(KERN_INFO "dscp: %d\n", mod->ipvx.dscp);
+		mvOsPrintf("dscp: %d\n", mod->ipvx.dscp);
 	else
-		printk(KERN_INFO "dscp: NULL\n");
+		mvOsPrintf("dscp: NULL\n");
 
 	if (mod_bm & TPM_L4_SRC_SET)
-		printk(KERN_INFO "l4_src: %d\n", mod->ipvx.l4_src);
+		mvOsPrintf("l4_src: %d\n", mod->ipvx.l4_src);
 	else
-		printk(KERN_INFO "l4_src: NULL\n");
+		mvOsPrintf("l4_src: NULL\n");
 
 	if (mod_bm & TPM_L4_DST_SET)
-		printk(KERN_INFO "l4_dst: %d\n", mod->ipvx.l4_dst);
+		mvOsPrintf("l4_dst: %d\n", mod->ipvx.l4_dst);
 	else
-		printk(KERN_INFO "l4_dst: NULL\n");
+		mvOsPrintf("l4_dst: NULL\n");
 
 	if (mod_bm & TPM_IP_SRC_SET)
-		printk(KERN_INFO "sip: %pI6\n", mod->ipvx.ip_src.ipv6);
+		mvOsPrintf("sip: %pI6\n", mod->ipvx.ip_src.ipv6);
 	else
-		printk(KERN_INFO "sip: NULL\n");
+		mvOsPrintf("sip: NULL\n");
 
 	if (mod_bm & TPM_IP_DST_SET)
-		printk(KERN_INFO "dip: %pI6\n", mod->ipvx.ip_dst.ipv6);
+		mvOsPrintf("dip: %pI6\n", mod->ipvx.ip_dst.ipv6);
 	else
-		printk(KERN_INFO "dip: NULL\n");
+		mvOsPrintf("dip: NULL\n");
 
 	if (mod_bm & TPM_VLAN_MOD) {
-		printk(KERN_INFO "vlan_mod_bm: %s\n", tpm_utils_vlan_op_str_get(mod->vlan_op.oper));
-		printk(KERN_INFO "tpid_outer: %d\n", mod->vlan_op.out_vlan.tpid);
-		printk(KERN_INFO "pbit_outer: %d\n", mod->vlan_op.out_vlan.pbit);
-		printk(KERN_INFO "cfi_outer: %d\n", mod->vlan_op.out_vlan.cfi);
-		printk(KERN_INFO "vid_outer: %d\n", mod->vlan_op.out_vlan.vid);
-		printk(KERN_INFO "tpid_inner: %d\n", mod->vlan_op.inn_vlan.tpid);
-		printk(KERN_INFO "pbit_inner: %d\n", mod->vlan_op.inn_vlan.pbit);
-		printk(KERN_INFO "cfi_inner: %d\n", mod->vlan_op.inn_vlan.cfi);
-		printk(KERN_INFO "vid_inner: %d\n", mod->vlan_op.inn_vlan.vid);
+		mvOsPrintf("vlan_mod_bm: %s\n", tpm_utils_vlan_op_str_get(mod->vlan_op.oper));
+		mvOsPrintf("tpid_outer: %d\n", mod->vlan_op.out_vlan.tpid);
+		mvOsPrintf("pbit_outer: %d\n", mod->vlan_op.out_vlan.pbit);
+		mvOsPrintf("cfi_outer: %d\n", mod->vlan_op.out_vlan.cfi);
+		mvOsPrintf("vid_outer: %d\n", mod->vlan_op.out_vlan.vid);
+		mvOsPrintf("tpid_inner: %d\n", mod->vlan_op.inn_vlan.tpid);
+		mvOsPrintf("pbit_inner: %d\n", mod->vlan_op.inn_vlan.pbit);
+		mvOsPrintf("cfi_inner: %d\n", mod->vlan_op.inn_vlan.cfi);
+		mvOsPrintf("vid_inner: %d\n", mod->vlan_op.inn_vlan.vid);
 
 	} else {
-		printk(KERN_INFO "VLAN: NULL\n");
+		mvOsPrintf("VLAN: NULL\n");
 	}
 	return;
 }
@@ -2609,31 +2641,31 @@ int tpm_sfs_api_rule_date_dump(struct tpm_db_mng_api_data_t *api_data)
 {
 	int i;
 
-	printk(KERN_INFO "api_type: %d\n", api_data->cap_api_type);
-	printk(KERN_INFO "match_key: ");
+	mvOsPrintf("api_type: %d\n", api_data->cap_api_type);
+	mvOsPrintf("match_key: ");
 	if (TPM_API_PUBLIC_CLS == api_data->cap_api_type)
-		printk(KERN_INFO "rule_type %d ", api_data->match_key.rule_type);
+		mvOsPrintf("rule_type %d ", api_data->match_key.rule_type);
 
-	printk(KERN_INFO "port_type 0x%x ", api_data->match_key.port.port_type);
-	printk(KERN_INFO "class_port 0x%x ", api_data->match_key.port.class_port);
+	mvOsPrintf("port_type 0x%x ", api_data->match_key.port.port_type);
+	mvOsPrintf("class_port 0x%x ", api_data->match_key.port.class_port);
 
-	printk(KERN_INFO "field_match_bm 0x%x\n", api_data->match_key.field_match_bm);
+	mvOsPrintf("field_match_bm 0x%x\n", api_data->match_key.field_match_bm);
 
 	tpm_sfs_api_rule_key_dump(api_data);
 
 	for (i = 0; i < api_data->num_dest; i++) {
-		printk(KERN_INFO "\n\naction %d:\n", i);
-		printk(KERN_INFO "dst_pp_port 0x%x ", api_data->action[i].dest.pp_port);
-		printk(KERN_INFO "pon_tx %d ", api_data->action[i].dest.pon_tx);
-		printk(KERN_INFO "pp_queue %d ", api_data->action[i].dest.pp_queue);
-		printk(KERN_INFO "dst_port_id 0x%x ", api_data->action[i].dest.port_id);
-		printk(KERN_INFO "color %d\n", api_data->action[i].color);
-
-		printk(KERN_INFO "\nmod %d:\n", i);
+		mvOsPrintf("\n\naction %d:\n", i);
+		mvOsPrintf("dst_pp_port 0x%x ", api_data->action[i].dest.pp_port);
+		mvOsPrintf("pon_tx %d ", api_data->action[i].dest.pon_tx);
+		mvOsPrintf("pp_queue %d ", api_data->action[i].dest.pp_queue);
+		mvOsPrintf("dst_port_id 0x%x ", api_data->action[i].dest.port_id);
+		mvOsPrintf("color %d\n", api_data->action[i].color);
+
+		mvOsPrintf("\nmod %d:\n", i);
 		tpm_sfs_api_rule_mod_dump(&api_data->action[i].mod);
 	}
 
-	printk(KERN_INFO "\npolicer_id: 0x%x\n", api_data->policer_id);
+	mvOsPrintf("\npolicer_id: 0x%x\n", api_data->policer_id);
 
 	return TPM_OK;
 }
@@ -2652,7 +2684,7 @@ static int tpm_sfs_api_rule_dump(int rule_id, enum tpm_mng_api_type_t api_type)
 		"find no api entry for rule_id(%d)\n", rule_id);
 
 	/* dump this rule */
-	printk(KERN_INFO "\nrule_index: %d\n", rule_id);
+	mvOsPrintf("\nrule_index: %d\n", rule_id);
 
 	tpm_sfs_api_rule_date_dump(api_data);
 
@@ -2743,20 +2775,20 @@ void tpm_sfs_cfg_frwd_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d", name, &frwd_idx);
 		if (frwd_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid frwd index [%d]\n", frwd_idx);
+			mvOsPrintf("Invalid frwd index [%d]\n", frwd_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 
 		pentry = find_tpm_pkt_frwd_entry_by_name(name);
 		if (0 == pentry) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "%s[%d]: pp_port=0x%x pon_tx=%d pp_queue=%d port_id=0x%x\n",
+			mvOsPrintf("%s[%d]: pp_port=0x%x pon_tx=%d pp_queue=%d port_id=0x%x\n",
 				name, frwd_idx, pentry->frwd[frwd_idx].pp_port, pentry->frwd[frwd_idx].pon_tx,
 				pentry->frwd[frwd_idx].pp_queue, pentry->frwd[frwd_idx].port_id);
 		}
@@ -2792,7 +2824,7 @@ int tpm_sfs_cfg_mtm_op(const char *buf, size_t len, enum tpm_mng_mtm_op_t op)
 		parsedargs = sscanf(buf, "%d %s", &port, temp_da);
 
 		if (parse_mac_address(temp_da, da) == TPM_FALSE) {
-			printk(KERN_INFO "Invalid DA [%s]\n", temp_da);
+			mvOsPrintf("Invalid DA [%s]\n", temp_da);
 		} else {
 
 			temp_da[0] = (unsigned char)da[0];
@@ -2827,7 +2859,7 @@ void tpm_sfs_cfg_mtm_add(const char *buf, size_t len)
 	unsigned int			tpm_ret;
 	tpm_ret = tpm_sfs_cfg_mtm_op(buf, len, TPM_MNG_MTM_ADD);
 	if (tpm_ret != 0)
-		printk(KERN_INFO "add mac on port failed, ret(%d)\n", tpm_ret);
+		mvOsPrintf("add mac on port failed, ret(%d)\n", tpm_ret);
 	else
 		PR_RESULT_OK;
 }
@@ -2845,7 +2877,7 @@ void tpm_sfs_cfg_mtm_del(const char *buf, size_t len)
 	unsigned int			tpm_ret;
 	tpm_ret = tpm_sfs_cfg_mtm_op(buf, len, TPM_MNG_MTM_DEL);
 	if (tpm_ret != 0)
-		printk(KERN_INFO "delete mac from port failed, ret(%d)\n", tpm_ret);
+		mvOsPrintf("delete mac from port failed, ret(%d)\n", tpm_ret);
 	else
 		PR_RESULT_OK;
 }
@@ -2887,7 +2919,7 @@ void tpm_sfs_cfg_plcr_add(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d %d", &token_unit, &color_mode, &cir, &cbs, &ebs);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			policer_entry.token_unit = token_unit;
 			policer_entry.color_mode = color_mode;
@@ -2899,7 +2931,7 @@ void tpm_sfs_cfg_plcr_add(const char *buf, size_t len)
 			if (TPM_OK == tpm_ret)
 				PR_POLICER_ID(plcr_id)
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2933,13 +2965,13 @@ void tpm_sfs_cfg_plcr_del(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &plcr);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			tpm_ret = _mv_tpm_plcr_del(plcr);
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2973,13 +3005,13 @@ void tpm_sfs_cfg_plcr_clear(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &plcr);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			tpm_ret = _mv_tpm_plcr_clear();
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3017,21 +3049,21 @@ void tpm_sfs_cfg_l2_key_ethertype_rule_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %x", name, &temp_ety);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] temp_ety[0x%x]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] temp_ety[0x%x]\n",
 	       len, parsedargs, name, temp_ety);
 */
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_ety > 0xFFFF) {
-			printk(KERN_INFO "Invalid ethertype [0x%x]\n", temp_ety);
+			mvOsPrintf("Invalid ethertype [0x%x]\n", temp_ety);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "L2 key DB full\n");
+				mvOsPrintf("L2 key DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->key.ether_type  = (unsigned short)temp_ety;
@@ -3068,15 +3100,15 @@ void tpm_sfs_cfg_l2_key_ethertype_rule_get(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s", name);
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0)
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		else
-			printk(KERN_INFO "ether_type=0x%x\n", pentry->key.ether_type);
+			mvOsPrintf("ether_type=0x%x\n", pentry->key.ether_type);
 	}
 }
 
@@ -3115,22 +3147,22 @@ void tpm_sfs_cfg_l2_key_mac_addr_rule_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s %s %s %s %s", name, temp_sa, temp_sa_mask, temp_da, temp_da_mask);
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (parse_mac_address(temp_sa, sa) == TPM_FALSE) {
-			printk(KERN_INFO "Invalid SA [%s]\n", temp_sa);
+			mvOsPrintf("Invalid SA [%s]\n", temp_sa);
 		} else if (parse_mac_address(temp_sa_mask, sa_mask) == TPM_FALSE) {
-			printk(KERN_INFO "Invalid SA mask [%s]\n", temp_sa_mask);
+			mvOsPrintf("Invalid SA mask [%s]\n", temp_sa_mask);
 		} else if (parse_mac_address(temp_da, da) == TPM_FALSE) {
-			printk(KERN_INFO "Invalid DA [%s]\n", temp_da);
+			mvOsPrintf("Invalid DA [%s]\n", temp_da);
 		} else if (parse_mac_address(temp_da_mask, da_mask) == TPM_FALSE) {
-			printk(KERN_INFO "Invalid DA mask [%s]\n", temp_da_mask);
+			mvOsPrintf("Invalid DA mask [%s]\n", temp_da_mask);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0)
-				printk(KERN_INFO "L2 key DB full\n");
+				mvOsPrintf("L2 key DB full\n");
 			else {
 				strcpy(pentry->name, name);
 				pentry->key.eth_src.eth_add[0] = (unsigned char)sa[0];
@@ -3192,14 +3224,14 @@ void tpm_sfs_cfg_l2_key_mac_addr_rule_get(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s", name);
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "SA=%02x:%02x:%02x:%02x:%02x:%02x SA_MASK=%02x:%02x:%02x:%02x:%02x:%02x" \
+			mvOsPrintf("SA=%02x:%02x:%02x:%02x:%02x:%02x SA_MASK=%02x:%02x:%02x:%02x:%02x:%02x" \
 			       " DA=%02x:%02x:%02x:%02x:%02x:%02x DA_MASK=%02x:%02x:%02x:%02x:%02x:%02x\n",
 			       pentry->key.eth_src.eth_add[0],
 			       pentry->key.eth_src.eth_add[1],
@@ -3256,22 +3288,22 @@ void tpm_sfs_cfg_l2_key_pppoe_rule_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %x", name, &temp_session, &temp_prototype);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] temp_session[%d] temp_prototype[0x%x]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] temp_session[%d] temp_prototype[0x%x]\n",
 	       len, parsedargs, name, temp_session, temp_prototype);
 */
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_session > 0xFFFF) {
-			printk(KERN_INFO "Invalid session [%d]\n", temp_session);
+			mvOsPrintf("Invalid session [%d]\n", temp_session);
 		} else if (temp_prototype > 0xFFFF) {
-			printk(KERN_INFO "Invalid protocol type [0x%x]\n", temp_prototype);
+			mvOsPrintf("Invalid protocol type [0x%x]\n", temp_prototype);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "L2 key DB full\n");
+				mvOsPrintf("L2 key DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->key.ppp_info.ppp_session = (unsigned short)temp_session;
@@ -3309,15 +3341,15 @@ void tpm_sfs_cfg_l2_key_pppoe_rule_get(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s", name);
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "ppp_session=%d ppp_proto=0x%x\n",
+			mvOsPrintf("ppp_session=%d ppp_proto=0x%x\n",
 			       pentry->key.ppp_info.ppp_session,
 			       pentry->key.ppp_info.ppp_proto);
 		}
@@ -3353,18 +3385,18 @@ void tpm_sfs_cfg_l2_key_vlan_rule_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %d %d %d", name, &vid_out, &pri_out, &vid_in, &pri_in);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] vlan1_name[%s] vlan2_name[%s]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] vlan1_name[%s] vlan2_name[%s]\n",
 	       len, parsedargs, name, vlan1_name, vlan2_name);
 */
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "L2 key DB full\n");
+				mvOsPrintf("L2 key DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 
@@ -3404,14 +3436,14 @@ void tpm_sfs_cfg_l2_key_vlan_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s", name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "inn_vid=%d inn_pbit=%d out_vid=%d out_pbit=%d\n",
+			mvOsPrintf("inn_vid=%d inn_pbit=%d out_vid=%d out_pbit=%d\n",
 				pentry->key.inn_vid,
 				pentry->key.inn_pbit,
 				pentry->key.out_vid,
@@ -3463,42 +3495,42 @@ void tpm_sfs_cfg_ipvx_key_addr_rule_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %s %s %s %s",
 					name, &ip_ver, sip_str, sipm_str, dip_str, dipm_str);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] sip_str[%s] sipm_str[%s] dip_str[%s] dipm_str[%s]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] sip_str[%s] sipm_str[%s] dip_str[%s] dipm_str[%s]\n",
 	       len, parsedargs, name, sip_str, sipm_str, dip_str, dipm_str);
 */
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		} else if (ip_ver != 4 && ip_ver != 6) {
-			printk(KERN_INFO "IP version incorrect [%d]\n", ip_ver);
+			mvOsPrintf("IP version incorrect [%d]\n", ip_ver);
 			return;
 		} else if (ip_ver == 4) {
 			if (parse_ipv4_address(sip_str, srcip) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid srcip [%s]\n", sip_str);
+				mvOsPrintf("Invalid srcip [%s]\n", sip_str);
 				return;
 			} else if (parse_ipv4_address(sipm_str, srcip_mask) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid srcip mask [%s]\n", sipm_str);
+				mvOsPrintf("Invalid srcip mask [%s]\n", sipm_str);
 				return;
 			} else if (parse_ipv4_address(dip_str, dstip) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid dstip [%s]\n", dip_str);
+				mvOsPrintf("Invalid dstip [%s]\n", dip_str);
 				return;
 			} else if (parse_ipv4_address(dipm_str, dstip_mask) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid dstip mask [%s]\n", dipm_str);
+				mvOsPrintf("Invalid dstip mask [%s]\n", dipm_str);
 				return;
 			}
 		} else {
 			if (parse_ipv6_address(sip_str, srcip) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid srcip [%s]\n", sip_str);
+				mvOsPrintf("Invalid srcip [%s]\n", sip_str);
 				return;
 			} else if (parse_ipv6_address(sipm_str, srcip_mask) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid srcip mask [%s]\n", sipm_str);
+				mvOsPrintf("Invalid srcip mask [%s]\n", sipm_str);
 				return;
 			} else if (parse_ipv6_address(dip_str, dstip) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid dstip [%s]\n", dip_str);
+				mvOsPrintf("Invalid dstip [%s]\n", dip_str);
 				return;
 			} else if (parse_ipv6_address(dipm_str, dstip_mask) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid dstip mask [%s]\n", dipm_str);
+				mvOsPrintf("Invalid dstip mask [%s]\n", dipm_str);
 				return;
 			}
 		}
@@ -3507,7 +3539,7 @@ void tpm_sfs_cfg_ipvx_key_addr_rule_set(const char *buf, size_t len)
 			pentry = find_free_tpm_pkt_key_entry();
 
 		if (pentry == 0) {
-			printk(KERN_INFO "IPV4 key DB full\n");
+			mvOsPrintf("IPV4 key DB full\n");
 			return;
 		}
 
@@ -3552,21 +3584,21 @@ void tpm_sfs_cfg_ipvx_key_addr_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s", name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
 			if (pentry->key.ipvx_add.ip_ver == 6) {
-				printk(KERN_INFO "SIP=%pI6 SIP_MASK=%pI6\nDIP=%pI6 DIP_MASK=%pI6\n",
+				mvOsPrintf("SIP=%pI6 SIP_MASK=%pI6\nDIP=%pI6 DIP_MASK=%pI6\n",
 					pentry->key.ipvx_add.ip_src.ip_add.ipv6,
 					pentry->key.ipvx_add.ip_src.ip_add_mask.ipv6,
 					pentry->key.ipvx_add.ip_dst.ip_add.ipv6,
 					pentry->key.ipvx_add.ip_dst.ip_add_mask.ipv6);
 			} else {
-				printk(KERN_INFO "SIP=%pI4 SIP_MASK=%pI4 DIP=%pI4 DIP_MASK=%pI4\n",
+				mvOsPrintf("SIP=%pI4 SIP_MASK=%pI4 DIP=%pI4 DIP_MASK=%pI4\n",
 					pentry->key.ipvx_add.ip_src.ip_add.ipv4,
 					pentry->key.ipvx_add.ip_src.ip_add_mask.ipv4,
 					pentry->key.ipvx_add.ip_dst.ip_add.ipv4,
@@ -3608,19 +3640,19 @@ void tpm_sfs_cfg_arp_key_addr_rule_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %s %s",
 					name, dip_str, dipm_str);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] dip_str[%s] dipm_str[%s]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] dip_str[%s] dipm_str[%s]\n",
 	       len, parsedargs, name, dip_str, dipm_str);
 */
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		} else {
 			if (parse_ipv4_address(dip_str, dstip) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid dstip [%s]\n", dip_str);
+				mvOsPrintf("Invalid dstip [%s]\n", dip_str);
 				return;
 			} else if (parse_ipv4_address(dipm_str, dstip_mask) == TPM_FALSE) {
-				printk(KERN_INFO "Invalid dstip mask [%s]\n", dipm_str);
+				mvOsPrintf("Invalid dstip mask [%s]\n", dipm_str);
 				return;
 			}
 		}
@@ -3629,7 +3661,7 @@ void tpm_sfs_cfg_arp_key_addr_rule_set(const char *buf, size_t len)
 			pentry = find_free_tpm_pkt_key_entry();
 
 		if (pentry == 0) {
-			printk(KERN_INFO "IPV4 key DB full\n");
+			mvOsPrintf("IPV4 key DB full\n");
 			return;
 		}
 
@@ -3669,14 +3701,14 @@ void tpm_sfs_cfg_arp_key_addr_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s", name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "ARP_DIP=%pI4 ARP_DIP_MASK=%pI4\n",
+			mvOsPrintf("ARP_DIP=%pI4 ARP_DIP_MASK=%pI4\n",
 				pentry->key.arp_ip_dst.ip_add.ipv4,
 				pentry->key.arp_ip_dst.ip_add_mask.ipv4);
 		}
@@ -3710,22 +3742,22 @@ void tpm_sfs_cfg_ipvx_key_port_rule_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %d", name, &temp_src_port, &temp_dst_port);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] temp_src_port[%d] temp_dst_port[%d]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] temp_src_port[%d] temp_dst_port[%d]\n",
 	       len, parsedargs, name, temp_src_port, temp_dst_port);
 */
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_src_port > 0xFFFF) {
-			printk(KERN_INFO "Invalid srcport [%d]\n", temp_src_port);
+			mvOsPrintf("Invalid srcport [%d]\n", temp_src_port);
 		} else if (temp_dst_port > 0xFFFF) {
-			printk(KERN_INFO "Invalid dstport [%d]\n", temp_dst_port);
+			mvOsPrintf("Invalid dstport [%d]\n", temp_dst_port);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "IPV4 key DB full\n");
+				mvOsPrintf("IPV4 key DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->key.l4_src = (unsigned short)temp_src_port;
@@ -3762,14 +3794,14 @@ void tpm_sfs_cfg_ipvx_key_port_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s", name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "l4_src=%d l4_dst=%d\n",
+			mvOsPrintf("l4_src=%d l4_dst=%d\n",
 				pentry->key.l4_src,
 				pentry->key.l4_dst);
 		}
@@ -3802,20 +3834,20 @@ void tpm_sfs_cfg_ipvx_key_protocol_rule_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d", name, &temp_protocol);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] temp_protocol[0x%x]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] temp_protocol[0x%x]\n",
 	       len, parsedargs, name, temp_protocol);
 */
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_protocol > 255) {
-			printk(KERN_INFO "Invalid protocol [%d]\n", temp_protocol);
+			mvOsPrintf("Invalid protocol [%d]\n", temp_protocol);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "IPV4 key DB full\n");
+				mvOsPrintf("IPV4 key DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->key.ipvx_add.ip_proto = (unsigned char)temp_protocol;
@@ -3851,14 +3883,14 @@ void tpm_sfs_cfg_ipvx_key_protocol_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s", name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "ip_proto=%d\n",
+			mvOsPrintf("ip_proto=%d\n",
 				pentry->key.ipvx_add.ip_proto);
 		}
 	}
@@ -3891,22 +3923,22 @@ void tpm_sfs_cfg_ipvx_key_dscp_rule_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %x", name, &temp_dscp, &temp_dscp_mask);
-/*        printk(KERN_INFO "len=%d, parsedargs=%d. rulename[%s] temp_dscp[%d] temp_dscp_mask[0x%x]\n",
+/*        mvOsPrintf("len=%d, parsedargs=%d. rulename[%s] temp_dscp[%d] temp_dscp_mask[0x%x]\n",
 	       len, parsedargs, name, temp_dscp, temp_dscp_mask);
 */
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_dscp > 63) {
-			printk(KERN_INFO "Invalid dscp [%d]\n", temp_dscp);
+			mvOsPrintf("Invalid dscp [%d]\n", temp_dscp);
 		} else if (temp_dscp_mask > 0xFF) {
-			printk(KERN_INFO "Invalid dscp mask [0x%x]\n", temp_dscp_mask);
+			mvOsPrintf("Invalid dscp mask [0x%x]\n", temp_dscp_mask);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "IPV4 key DB full\n");
+				mvOsPrintf("IPV4 key DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->key.ipvx_add.dscp      = (unsigned char)temp_dscp;
@@ -3943,14 +3975,14 @@ void tpm_sfs_cfg_ipvx_key_dscp_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s", name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "dscp=%d dscp_mask=0x%X\n",
+			mvOsPrintf("dscp=%d dscp_mask=0x%X\n",
 				pentry->key.ipvx_add.dscp,
 				pentry->key.ipvx_add.dscp_mask);
 		}
@@ -3985,16 +4017,16 @@ void tpm_sfs_cfg_ipvx_key_ver_rule_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s %d", name, &temp_ver);
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_ver > 6) {
-			printk(KERN_INFO "Invalid temp_ver [%d]\n", temp_ver);
+			mvOsPrintf("Invalid temp_ver [%d]\n", temp_ver);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "IP key DB full\n");
+				mvOsPrintf("IP key DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->key.ipvx_add.ip_ver = (unsigned char)temp_ver;
@@ -4033,18 +4065,18 @@ void tpm_sfs_cfg_ipv6_key_flbl_rule_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s %d %x", name, &temp_flbl, &temp_flbl_mask);
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_flbl > 0xFFFFF) {
-			printk(KERN_INFO "Invalid flow label [%d]\n", temp_flbl);
+			mvOsPrintf("Invalid flow label [%d]\n", temp_flbl);
 		} else if (temp_flbl_mask > 0xFFFFF) {
-			printk(KERN_INFO "Invalid flow label mask [0x%x]\n", temp_flbl_mask);
+			mvOsPrintf("Invalid flow label mask [0x%x]\n", temp_flbl_mask);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "DB full\n");
+				mvOsPrintf("DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->key.ipvx_add.flow_label      = temp_flbl;
@@ -4081,14 +4113,14 @@ void tpm_sfs_cfg_ipv6_key_flbl_rule_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s", name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 			return;
 		}
 		pentry = find_tpm_pkt_key_entry_by_name(name);
 		if (pentry == 0) {
-			printk(KERN_INFO "entry [%s] not found\n", name);
+			mvOsPrintf("entry [%s] not found\n", name);
 		} else {
-			printk(KERN_INFO "flow label=%d flow label mask=0x%X\n",
+			mvOsPrintf("flow label=%d flow label mask=0x%X\n",
 				pentry->key.ipvx_add.flow_label,
 				pentry->key.ipvx_add.flow_label_mask);
 		}
@@ -4113,7 +4145,7 @@ void tpm_sfs_cfg_no_rule_add_exact_all_set(const char *buf, size_t len)
 	if (rc == TPM_OK) {
 		PR_RESULT_OK
 	} else {
-		printk(KERN_INFO "%s: _mv_tpm_exact_match_rule_del_all failed, rc[%d] - %s\n",
+		mvOsPrintf("%s: _mv_tpm_exact_match_rule_del_all failed, rc[%d] - %s\n",
 		       __func__, rc, get_tpm_err_str(rc));
 	}
 }
@@ -4136,7 +4168,7 @@ void tpm_sfs_cfg_no_rule_add_exact_except_all_set(const char *buf, size_t len)
 	if (rc == TPM_OK) {
 		PR_RESULT_OK
 	} else {
-		printk(KERN_INFO "%s: _mv_tpm_exact_match_except_rule_del_all failed, rc[%d] - %s\n",
+		mvOsPrintf("%s: _mv_tpm_exact_match_except_rule_del_all failed, rc[%d] - %s\n",
 		       __func__, rc, get_tpm_err_str(rc));
 	}
 }
@@ -4159,7 +4191,7 @@ void tpm_sfs_cfg_no_rule_add_cls_all_set(const char *buf, size_t len)
 	if (rc == TPM_OK) {
 		PR_RESULT_OK
 	} else {
-		printk(KERN_INFO "%s: _mv_tpm_gen_cls_rule_del_all failed, rc[%d] - %s\n",
+		mvOsPrintf("%s: _mv_tpm_gen_cls_rule_del_all failed, rc[%d] - %s\n",
 		       __func__, rc, get_tpm_err_str(rc));
 	}
 }
@@ -4192,18 +4224,18 @@ void tpm_sfs_cfg_no_rule_add_exact_except_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &rule_idx);
-		/*printk(KERN_INFO "len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
+		/*mvOsPrintf("len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
 		       len, parsedargs, ownerid, rule_idx);
 	*/
 
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		} else {
 			rc = _mv_tpm_exact_match_except_rule_del(NULL, rule_idx);
 			if (rc == TPM_OK) {
 				PR_RESULT_OK
 			} else {
-				printk(KERN_INFO "%s: _mv_tpm_exact_match_except_rule_del failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: _mv_tpm_exact_match_except_rule_del failed, rc[%d] - %s\n",
 				       __func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -4238,18 +4270,18 @@ void tpm_sfs_cfg_no_rule_add_exact_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &rule_idx);
-		/*printk(KERN_INFO "len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
+		/*mvOsPrintf("len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
 		       len, parsedargs, ownerid, rule_idx);
 	*/
 
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		} else {
 			rc = _mv_tpm_exact_match_rule_del(NULL, rule_idx);
 			if (rc == TPM_OK) {
 				PR_RESULT_OK
 			} else {
-				printk(KERN_INFO "%s: _mv_tpm_exact_match_rule_del failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: _mv_tpm_exact_match_rule_del failed, rc[%d] - %s\n",
 				       __func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -4284,18 +4316,18 @@ void tpm_sfs_cfg_no_rule_add_cls_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &rule_idx);
-/*           printk(KERN_INFO "len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
+/*           mvOsPrintf("len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
 	       len, parsedargs, ownerid, rule_idx);
 */
 
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		} else {
 			rc = _mv_tpm_gen_cls_rule_del(NULL, rule_idx);
 			if (rc == TPM_OK) {
 				PR_RESULT_OK
 			} else {
-				printk(KERN_INFO "%s: _mv_tpm_gen_cls_rule_del failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: _mv_tpm_gen_cls_rule_del failed, rc[%d] - %s\n",
 				       __func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -4331,18 +4363,18 @@ void tpm_sfs_cfg_no_rule_add_cnm_all_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%x", &uni_port);
-/*           printk(KERN_INFO "len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
+/*           mvOsPrintf("len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
 	       len, parsedargs, ownerid, rule_idx);
 */
 
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		} else {
 			rc = _mv_tpm_cm_rule_del_all(uni_port);
 			if (rc == TPM_OK) {
 				PR_RESULT_OK
 			} else {
-				printk(KERN_INFO "%s: _mv_tpm_cm_rule_del_all failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: _mv_tpm_cm_rule_del_all failed, rc[%d] - %s\n",
 				       __func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -4380,12 +4412,12 @@ void tpm_sfs_cfg_no_rule_add_cnm_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d", &uni_port, &rule_num);
-/*           printk(KERN_INFO "len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
+/*           mvOsPrintf("len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
 	       len, parsedargs, ownerid, rule_idx);
 */
 
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		} else {
 			port.port_type = TPM_CLASS_SWITCH_PORT_BM;
 			port.class_port = (1 << uni_port);
@@ -4393,7 +4425,7 @@ void tpm_sfs_cfg_no_rule_add_cnm_set(const char *buf, size_t len)
 			if (rc == TPM_OK) {
 				PR_RESULT_OK
 			} else {
-				printk(KERN_INFO "%s: _mv_tpm_cm_rule_del failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: _mv_tpm_cm_rule_del failed, rc[%d] - %s\n",
 				       __func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -4429,18 +4461,18 @@ void tpm_sfs_cfg_no_rule_add_filter_set(const char *buf, size_t len)
 	} else {
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &rule_idx);
-/*           printk(KERN_INFO "len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
+/*           mvOsPrintf("len=%d, parsedargs=%d. ownerid[%d], rule_idx[%d]\n",
 	       len, parsedargs, ownerid, rule_idx);
 */
 
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		} else {
 			rc = _mv_tpm_filter_rule_del(NULL, rule_idx);
 			if (rc == TPM_OK) {
 				PR_RESULT_OK
 			} else {
-				printk(KERN_INFO "%s: _mv_tpm_filter_rule_del failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: _mv_tpm_filter_rule_del failed, rc[%d] - %s\n",
 				       __func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -4466,7 +4498,7 @@ void tpm_sfs_cfg_no_rule_add_filter_all_set(const char *buf, size_t len)
 	if (rc == TPM_OK) {
 		PR_RESULT_OK
 	} else {
-		printk(KERN_INFO "%s: _mv_tpm_filter_rule_del_all failed, rc[%d] - %s\n",
+		mvOsPrintf("%s: _mv_tpm_filter_rule_del_all failed, rc[%d] - %s\n",
 		       __func__, rc, get_tpm_err_str(rc));
 	}
 }
@@ -4507,13 +4539,13 @@ void tpm_sfs_cfg_no_rule_add_exact_key_set(const char *buf, size_t len)
 	parsedargs = sscanf(buf, "%d %s", &ip_version, l2keyname);
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
 	pdbl2keyentry = find_tpm_pkt_key_entry_by_name(l2keyname);
 	if (pdbl2keyentry == 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else {
 
 		match_key.ipvx_five_t.l4_dst = pdbl2keyentry->key.l4_dst;
@@ -4529,7 +4561,7 @@ void tpm_sfs_cfg_no_rule_add_exact_key_set(const char *buf, size_t len)
 
 		rc = _mv_tpm_exact_match_rule_del(&match_key.ipvx_five_t, 0);
 		if (rc != TPM_OK) {
-			printk(KERN_INFO "%s: _mv_tpm_exact_match_rule_del failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: _mv_tpm_exact_match_rule_del failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		}
 	}
@@ -4588,13 +4620,13 @@ void tpm_sfs_cfg_no_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_m
 
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
 	pdbl2keyentry = find_tpm_pkt_key_entry_by_name(l2keyname);
 	if (pdbl2keyentry == 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else {
 		memcpy(&match_key, &pdbl2keyentry->key, sizeof(match_key));
 		match_key.rule_type = rule_type;
@@ -4611,7 +4643,7 @@ void tpm_sfs_cfg_no_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_m
 		if (rc == TPM_OK) {
 			PR_RULE_IDX(rule_idx)
 		} else {
-			printk(KERN_INFO "%s: tpm_del_rule failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: tpm_del_rule failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		}
 	}
@@ -4692,13 +4724,13 @@ void tpm_sfs_cfg_no_rule_add_mc_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%d", &rule_idx);
 
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		} else {
 			rc = _mv_tpm_mc_flow_del(rule_idx);
 			if (rc == TPM_OK) {
 				PR_RESULT_OK
 			} else {
-				printk(KERN_INFO "%s: multicast rule del failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: multicast rule del failed, rc[%d] - %s\n",
 				       __func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -4722,7 +4754,7 @@ void tpm_sfs_cfg_no_rule_add_mc_all_set(const char *buf, size_t len)
 	if (rc == TPM_OK) {
 		PR_RESULT_OK
 	} else {
-		printk(KERN_INFO "%s: _mv_tpm_mc_flow_del_all failed, rc[%d] - %s\n",
+		mvOsPrintf("%s: _mv_tpm_mc_flow_del_all failed, rc[%d] - %s\n",
 		       __func__, rc, get_tpm_err_str(rc));
 	}
 }
@@ -4808,7 +4840,7 @@ void tpm_sfs_cfg_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_mng_
 					&src_port, &src_port_vir, &parserulebm,
 					l2keyname, frwdname, &num_dest, &color, modname);
 		if (num_dest > TPM_ACT_NUM_MAX || num_dest == 0) {
-			printk(KERN_INFO "Invalid dest number(%d)\n", num_dest);
+			mvOsPrintf("Invalid dest number(%d)\n", num_dest);
 			return;
 		}
 	} else {
@@ -4816,13 +4848,13 @@ void tpm_sfs_cfg_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_mng_
 					&src_port, &src_port_vir, &rule_type, &parserulebm,
 					l2keyname, frwdname, &num_dest, &color, &policer, qosname, modname);
 		if (num_dest > TPM_ACT_NUM_MAX || num_dest == 0) {
-			printk(KERN_INFO "Invalid dest number(%d)\n", num_dest);
+			mvOsPrintf("Invalid dest number(%d)\n", num_dest);
 			return;
 		}
 	}
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
@@ -4831,17 +4863,17 @@ void tpm_sfs_cfg_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_mng_
 	pdbmodentry = find_tpm_mod_entry_by_name(modname);
 	pdbqosentry = find_tpm_pkt_qos_entry_by_name(qosname);
 	if ((pdbl2keyentry == 0) && strcmp(l2keyname, key_empty_name) != 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else if ((pdbfrwdentry == 0) &&
 			strcmp(frwdname, frwd_empty_name) != 0) {
-		printk(KERN_INFO "frwd entry [%s] not found\n", frwdname);
+		mvOsPrintf("frwd entry [%s] not found\n", frwdname);
 	} else if ((pdbmodentry == 0) &&
 			strcmp(modname, mod_empty_name) != 0) {
-		printk(KERN_INFO "mod entry [%s] not found\n", modname);
+		mvOsPrintf("mod entry [%s] not found\n", modname);
 	} else if ((pdbqosentry == 0) &&
 			strcmp(qosname, qos_empty_name) != 0 &&
 			api_type != TPM_API_PRIVATE_MC_DS) {
-		printk(KERN_INFO "qos entry [%s] not found\n", qosname);
+		mvOsPrintf("qos entry [%s] not found\n", qosname);
 	} else {
 		memset(&qos, 0, sizeof(qos));
 
@@ -4898,7 +4930,7 @@ void tpm_sfs_cfg_cls_cpu_rule_add_set(const char *buf, size_t len, enum tpm_mng_
 		if (rc == TPM_OK) {
 			PR_RULE_IDX(rule_idx)
 		} else {
-			printk(KERN_INFO "%s: tpm_add_rule failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: tpm_add_rule failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		}
 	}
@@ -4950,16 +4982,16 @@ void tpm_sfs_cfg_cnm_rule_add_set(const char *buf, size_t len)
 				fieldopname, &queue, &pbit);
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
 	pdbl2keyentry = find_tpm_pkt_key_entry_by_name(l2keyname);
 	pdbfieldopentry = find_tpm_cnm_field_op_entry_by_name(fieldopname);
 	if (pdbl2keyentry == 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else if (pdbfieldopentry == 0) {
-		printk(KERN_INFO "cnm_field_op entry [%s] not found\n", fieldopname);
+		mvOsPrintf("cnm_field_op entry [%s] not found\n", fieldopname);
 	} else {
 		TPM_MEMSET_ZERO(rule_action);
 		TPM_MEMSET_ZERO(cnm_key);
@@ -4986,7 +5018,7 @@ void tpm_sfs_cfg_cnm_rule_add_set(const char *buf, size_t len)
 		if (rc == TPM_OK) {
 			PR_RULE_IDX(rule_num)
 		} else {
-			printk(KERN_INFO "%s: _mv_tpm_cm_rule_add failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: _mv_tpm_cm_rule_add failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		}
 	}
@@ -5041,7 +5073,7 @@ void tpm_sfs_cfg_exact_rule_add_set(const char *buf, size_t len)
 				l2keyname, frwdname, modname, &color, &policer);
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
@@ -5049,11 +5081,11 @@ void tpm_sfs_cfg_exact_rule_add_set(const char *buf, size_t len)
 	pdbfrwdentry = find_tpm_pkt_frwd_entry_by_name(frwdname);
 	pdbmodentry = find_tpm_mod_entry_by_name(modname);
 	if (pdbl2keyentry == 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else if (pdbfrwdentry == 0) {
-		printk(KERN_INFO "frwd entry [%s] not found\n", frwdname);
+		mvOsPrintf("frwd entry [%s] not found\n", frwdname);
 	} else if ((pdbmodentry == 0) && strcmp(modname, mod_empty_name) != 0) {
-		printk(KERN_INFO "mod entry [%s] not found\n", modname);
+		mvOsPrintf("mod entry [%s] not found\n", modname);
 	} else {
 
 		match_key.ipvx_five_t.l4_dst = pdbl2keyentry->key.l4_dst;
@@ -5091,7 +5123,7 @@ void tpm_sfs_cfg_exact_rule_add_set(const char *buf, size_t len)
 		if (rc == TPM_OK) {
 			PR_RULE_IDX(rule_idx)
 		} else {
-			printk(KERN_INFO "%s: tpm_add_rule failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: tpm_add_rule failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		}
 	}
@@ -5149,14 +5181,14 @@ void tpm_sfs_cfg_filter_rule_add_set(const char *buf, size_t len)
 			l2keyname, &frwd_mode);
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 	pdbl2keyentry = find_tpm_pkt_key_entry_by_name(l2keyname);
 	if (pdbl2keyentry == 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else if (frwd_mode > TPM_FILTER_FRWD_NO_DROP) {
-		printk(KERN_INFO "frwd_mode[%d] is invalid\n", frwd_mode);
+		mvOsPrintf("frwd_mode[%d] is invalid\n", frwd_mode);
 	} else {
 
 		memcpy(&match_key, &pdbl2keyentry->key, sizeof(match_key));
@@ -5173,7 +5205,7 @@ void tpm_sfs_cfg_filter_rule_add_set(const char *buf, size_t len)
 		if (rc == TPM_OK) {
 			PR_RULE_IDX(rule_idx)
 		} else {
-			printk(KERN_INFO "%s: _mv_tpm_filter_rule_add failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: _mv_tpm_filter_rule_add failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		}
 	}
@@ -5273,13 +5305,13 @@ void tpm_sfs_cfg_cls_cpu_rule_cntr_get(const char *buf, size_t len, enum tpm_mng
 
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
 	pdbl2keyentry = find_tpm_pkt_key_entry_by_name(l2keyname);
 	if (pdbl2keyentry == 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else {
 		if (0 == rule_id) {
 			memcpy(&match_key, &pdbl2keyentry->key, sizeof(match_key));
@@ -5305,7 +5337,7 @@ void tpm_sfs_cfg_cls_cpu_rule_cntr_get(const char *buf, size_t len, enum tpm_mng
 		if (rc == TPM_OK) {
 			PR_HIT_COUNT(cntrs)
 		} else {
-			printk(KERN_INFO "%s: tpm_rule_cntrs_get failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: tpm_rule_cntrs_get failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		}
 
@@ -5389,13 +5421,13 @@ void tpm_sfs_cfg_filter_def_cntr_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %x %d", &rule_type, &bm, &vlan_number);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			rc = _mv_tpm_filter_def_rule_cntr_get(rule_type, bm, vlan_number, &cntrs);
 			if (rc == TPM_OK) {
 				PR_HIT_COUNT(cntrs);
 			} else {
-				printk(KERN_INFO "%s: tpm_rule_cntrs_get failed, rc[%d] - %s\n",
+				mvOsPrintf("%s: tpm_rule_cntrs_get failed, rc[%d] - %s\n",
 					__func__, rc, get_tpm_err_str(rc));
 			}
 		}
@@ -5442,18 +5474,18 @@ void tpm_sfs_cfg_exact_cntr_get(const char *buf, size_t len)
 	parsedargs = sscanf(buf, "%d %s %d", &ip_version, l2keyname, &rule_id);
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
 	pdbl2keyentry = find_tpm_pkt_key_entry_by_name(l2keyname);
 	if ((pdbl2keyentry == 0) && strcmp(l2keyname, key_empty_name) != 0) {
-		printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+		mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 	} else {
 
 		if (0 == rule_id) {
 			if (NULL == pdbl2keyentry) {
-				printk(KERN_INFO "Key entry [%s] not found\n", l2keyname);
+				mvOsPrintf("Key entry [%s] not found\n", l2keyname);
 				return;
 			}
 			match_key.ipvx_five_t.l4_dst = pdbl2keyentry->key.l4_dst;
@@ -5472,7 +5504,7 @@ void tpm_sfs_cfg_exact_cntr_get(const char *buf, size_t len)
 			rc = _mv_tpm_exact_match_rule_cntr_get(NULL, rule_id, &cntrs);
 
 		if (rc != TPM_OK) {
-			printk(KERN_INFO "%s: tpm_mng_cap_entry_cntr_get failed, rc[%d] - %s\n",
+			mvOsPrintf("%s: tpm_mng_cap_entry_cntr_get failed, rc[%d] - %s\n",
 				__func__, rc, get_tpm_err_str(rc));
 		} else
 			PR_HIT_COUNT(cntrs)
@@ -5512,23 +5544,23 @@ void tpm_sfs_cfg_mod_bm_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %x", name, &mod_idx, &mod_bm);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->mod[mod_idx].mod_bm = mod_bm;
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -5577,27 +5609,27 @@ void tpm_sys_cfg_mod_mac_addr_rule_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s %d %s %s %s %s",
 				name, &mod_idx, temp_sa, temp_sa_mask, temp_da, temp_da_mask);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (parse_mac_address(temp_sa, sa) == false) {
-			printk(KERN_INFO "Invalid SA [%s]\n", temp_sa);
+			mvOsPrintf("Invalid SA [%s]\n", temp_sa);
 		} else if (parse_mac_address(temp_sa_mask, sa_mask) == false) {
-			printk(KERN_INFO "Invalid SA mask [%s]\n", temp_sa_mask);
+			mvOsPrintf("Invalid SA mask [%s]\n", temp_sa_mask);
 		} else if (parse_mac_address(temp_da, da) == false) {
-			printk(KERN_INFO "Invalid DA [%s]\n", temp_da);
+			mvOsPrintf("Invalid DA [%s]\n", temp_da);
 		} else if (parse_mac_address(temp_da_mask, da_mask) == false) {
-			printk(KERN_INFO "Invalid DA mask [%s]\n", temp_da_mask);
+			mvOsPrintf("Invalid DA mask [%s]\n", temp_da_mask);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->flags[mod_idx] |= MOD_ENTRY_FLAG_MAC;
@@ -5606,7 +5638,7 @@ void tpm_sys_cfg_mod_mac_addr_rule_set(const char *buf, size_t len)
 					pentry->mod[mod_idx].eth_src[i] = (unsigned char)sa[i];
 					pentry->mod[mod_idx].eth_dst[i] = (unsigned char)da[i];
 				}
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -5657,30 +5689,30 @@ void tpm_sys_cfg_mod_vlan_key_set(const char *buf, size_t len)
 					&temp_vid_mask, &temp_cfi, &temp_cfi_mask, &temp_pbit, &temp_pbit_mask);
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_tpid > 0xFFFF) {
-			printk(KERN_INFO "Invalid TPID [0x%x]\n", temp_tpid);
+			mvOsPrintf("Invalid TPID [0x%x]\n", temp_tpid);
 		} else if (temp_tpid_mask > 0xFFFF) {
-			printk(KERN_INFO "Invalid TPID mask [0x%x]\n", temp_tpid_mask);
+			mvOsPrintf("Invalid TPID mask [0x%x]\n", temp_tpid_mask);
 		} else if (temp_vid > 4095) {
-			printk(KERN_INFO "Invalid VID [%d]\n", temp_vid);
+			mvOsPrintf("Invalid VID [%d]\n", temp_vid);
 		} else if (temp_vid_mask > 0xFFFF) {
-			printk(KERN_INFO "Invalid VID mask [0x%x]\n", temp_vid_mask);
+			mvOsPrintf("Invalid VID mask [0x%x]\n", temp_vid_mask);
 		} else if (temp_cfi > 1) {
-			printk(KERN_INFO "Invalid CFI [%d]\n", temp_cfi);
+			mvOsPrintf("Invalid CFI [%d]\n", temp_cfi);
 		} else if (temp_cfi_mask > 0xFF) {
-			printk(KERN_INFO "Invalid CFI mask [0x%x]\n", temp_cfi_mask);
+			mvOsPrintf("Invalid CFI mask [0x%x]\n", temp_cfi_mask);
 		} else if (temp_pbit > 7) {
-			printk(KERN_INFO "Invalid pbit [%d]\n", temp_pbit);
+			mvOsPrintf("Invalid pbit [%d]\n", temp_pbit);
 		} else if (temp_pbit_mask > 0xFF) {
-			printk(KERN_INFO "Invalid pbit mask [0x%x]\n", temp_pbit_mask);
+			mvOsPrintf("Invalid pbit mask [0x%x]\n", temp_pbit_mask);
 		} else {
 			pentry = find_tpm_pkt_key_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_pkt_key_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "KEY DB full\n");
+				mvOsPrintf("KEY DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->vlan_mod_key.tpid = (unsigned short)temp_tpid;
@@ -5704,7 +5736,7 @@ void tpm_sys_cfg_mod_vlan_key_set(const char *buf, size_t len)
 				else
 					pentry->vlan_mod_key.pbit &= (~TPM_PBIT_UPDATE);
 
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -5750,7 +5782,7 @@ void tpm_sfs_cfg_mod_vlan_rule_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %s %s %s", name, &mod_idx, vlan_op_str, vlan1_name, vlan2_name);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
@@ -5758,22 +5790,22 @@ void tpm_sfs_cfg_mod_vlan_rule_set(const char *buf, size_t len)
 		pvlan1entry = find_tpm_pkt_key_entry_by_name(vlan1_name);
 		pvlan2entry = find_tpm_pkt_key_entry_by_name(vlan2_name);
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (bRet == false) {
-			printk(KERN_INFO "Invalid vlan_op[%s]\n", vlan_op_str);
+			mvOsPrintf("Invalid vlan_op[%s]\n", vlan_op_str);
 		} else if ((pvlan1entry == 0) &&
 			strcmp(vlan1_name, vlan_empty_name) != 0) {
-			printk(KERN_INFO "vlan1 entry [%s] not found\n", vlan1_name);
+			mvOsPrintf("vlan1 entry [%s] not found\n", vlan1_name);
 		} else if ((pvlan2entry == 0) &&
 			strcmp(vlan2_name, vlan_empty_name) != 0) {
-			printk(KERN_INFO "vlan2 entry [%s] not found\n", vlan2_name);
+			mvOsPrintf("vlan2 entry [%s] not found\n", vlan2_name);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->flags[mod_idx] |= MOD_ENTRY_FLAG_VLAN;
@@ -5797,7 +5829,7 @@ void tpm_sfs_cfg_mod_vlan_rule_set(const char *buf, size_t len)
 					memset(&pentry->mod[mod_idx].vlan_op.inn_vlan,
 						0, sizeof(struct tpm_vlan_mod_t));
 				}
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -5836,29 +5868,29 @@ void tpm_sfs_cfg_mod_pppoe_rule_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %d %x", name, &mod_idx, &temp_session, &temp_prototype);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_session > 0xFFFF) {
-			printk(KERN_INFO "Invalid session [%d]\n", temp_session);
+			mvOsPrintf("Invalid session [%d]\n", temp_session);
 		} else if (temp_prototype > 0xFFFF) {
-			printk(KERN_INFO "Invalid protocol type [0x%x]\n", temp_prototype);
+			mvOsPrintf("Invalid protocol type [0x%x]\n", temp_prototype);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->flags[mod_idx] |= MOD_ENTRY_FLAG_PPPOE;
 				pentry->mod[mod_idx].pppoe_mod.ppp_session = (unsigned short)temp_session;
 				pentry->mod[mod_idx].pppoe_mod.ppp_proto   = (unsigned short)temp_prototype;
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -5897,28 +5929,28 @@ void tpm_sfs_cfg_mod_dscp_rule_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %d %x", name, &mod_idx, &temp_dscp, &temp_dscp_mask);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_dscp > 0x3F) {
-			printk(KERN_INFO "Invalid dscp [%d]\n", temp_dscp);
+			mvOsPrintf("Invalid dscp [%d]\n", temp_dscp);
 		} else if (temp_dscp_mask > 0xFF) {
-			printk(KERN_INFO "Invalid dscp mask [0x%x]\n", temp_dscp_mask);
+			mvOsPrintf("Invalid dscp mask [0x%x]\n", temp_dscp_mask);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->flags[mod_idx] |= MOD_ENTRY_FLAG_DSCP;
 				pentry->mod[mod_idx].ipvx.dscp = (unsigned char)temp_dscp;
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -5967,29 +5999,29 @@ void tpm_sfs_cfg_mod_ipv4_addr_rule_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s %d %s %s %s %s",
 				    name, &mod_idx, temp_srcip, temp_srcip_mask, temp_dstip, temp_dstip_mask);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (parse_ipv4_address(temp_srcip, srcip) == false) {
-			printk(KERN_INFO "Invalid srcip [%s]\n", temp_srcip);
+			mvOsPrintf("Invalid srcip [%s]\n", temp_srcip);
 		} else if (parse_ipv4_address(temp_srcip_mask, srcip_mask) == false) {
-			printk(KERN_INFO "Invalid srcip mask [%s]\n", temp_srcip_mask);
+			mvOsPrintf("Invalid srcip mask [%s]\n", temp_srcip_mask);
 		} else if (parse_ipv4_address(temp_dstip, dstip) == false) {
-			printk(KERN_INFO "Invalid dstip [%s]\n", temp_dstip);
+			mvOsPrintf("Invalid dstip [%s]\n", temp_dstip);
 		} else if (parse_ipv4_address(temp_dstip_mask, dstip_mask) == false) {
-			printk(KERN_INFO "Invalid dstip mask [%s]\n", temp_dstip_mask);
+			mvOsPrintf("Invalid dstip mask [%s]\n", temp_dstip_mask);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else if (pentry->flags[mod_idx] & MOD_ENTRY_FLAG_IPV6) {
-				printk(KERN_INFO "IPV6 already defined for this entry!\n");
+				mvOsPrintf("IPV6 already defined for this entry!\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->flags[mod_idx] |= MOD_ENTRY_FLAG_IPV4;
@@ -5997,7 +6029,7 @@ void tpm_sfs_cfg_mod_ipv4_addr_rule_set(const char *buf, size_t len)
 					pentry->mod[mod_idx].ipvx.ip_src.ipv4[i] = (unsigned char)srcip[i];
 					pentry->mod[mod_idx].ipvx.ip_dst.ipv4[i] = (unsigned char)dstip[i];
 				}
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -6046,29 +6078,29 @@ void tpm_sfs_cfg_mod_ipv6_addr_rule_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%s %d %s %s %s %s",
 				    name, &mod_idx, temp_srcip, temp_srcip_mask, temp_dstip, temp_dstip_mask);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (parse_ipv6_address(temp_srcip, srcip) == false) {
-			printk(KERN_INFO "Invalid srcip [%s]\n", temp_srcip);
+			mvOsPrintf("Invalid srcip [%s]\n", temp_srcip);
 		} else if (parse_ipv6_address(temp_srcip_mask, srcip_mask) == false) {
-			printk(KERN_INFO "Invalid srcip mask [%s]\n", temp_srcip_mask);
+			mvOsPrintf("Invalid srcip mask [%s]\n", temp_srcip_mask);
 		} else if (parse_ipv6_address(temp_dstip, dstip) == false) {
-			printk(KERN_INFO "Invalid dstip [%s]\n", temp_dstip);
+			mvOsPrintf("Invalid dstip [%s]\n", temp_dstip);
 		} else if (parse_ipv6_address(temp_dstip_mask, dstip_mask) == false) {
-			printk(KERN_INFO "Invalid dstip mask [%s]\n", temp_dstip_mask);
+			mvOsPrintf("Invalid dstip mask [%s]\n", temp_dstip_mask);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else if (pentry->flags[mod_idx] & MOD_ENTRY_FLAG_IPV4) {
-				printk(KERN_INFO "IPV4 already defined for this entry!\n");
+				mvOsPrintf("IPV4 already defined for this entry!\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->flags[mod_idx] |= MOD_ENTRY_FLAG_IPV6;
@@ -6076,7 +6108,7 @@ void tpm_sfs_cfg_mod_ipv6_addr_rule_set(const char *buf, size_t len)
 					pentry->mod[mod_idx].ipvx.ip_src.ipv6[indx] = (unsigned char)srcip[indx];
 					pentry->mod[mod_idx].ipvx.ip_dst.ipv6[indx] = (unsigned char)dstip[indx];
 				}
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -6115,29 +6147,29 @@ void tpm_sfs_cfg_mod_L4_port_rule_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%s %d %d %d", name, &mod_idx, &temp_src_port, &temp_dst_port);
 		if (mod_idx >= TPM_ACT_NUM_MAX) {
-			printk(KERN_INFO "Invalid mod array index [%d]\n", mod_idx);
+			mvOsPrintf("Invalid mod array index [%d]\n", mod_idx);
 			return;
 		}
 
 		if (strlen(name) > DB_TPMCFG_MAX_NAME) {
-			printk(KERN_INFO "Name too long [%s]\n", name);
+			mvOsPrintf("Name too long [%s]\n", name);
 		} else if (temp_src_port > 0xFFFF) {
-			printk(KERN_INFO "Invalid srcport [%d]\n", temp_src_port);
+			mvOsPrintf("Invalid srcport [%d]\n", temp_src_port);
 		} else if (temp_dst_port > 0xFFFF) {
-			printk(KERN_INFO "Invalid dstport [%d]\n", temp_dst_port);
+			mvOsPrintf("Invalid dstport [%d]\n", temp_dst_port);
 		} else {
 			pentry = find_tpm_mod_entry_by_name(name);
 			if (pentry == 0)
 				pentry = find_free_tpm_mod_entry();
 
 			if (pentry == 0) {
-				printk(KERN_INFO "Mod DB full\n");
+				mvOsPrintf("Mod DB full\n");
 			} else {
 				strcpy(pentry->name, name);
 				pentry->flags[mod_idx] |= MOD_ENTRY_FLAG_L4_PORT;
 				pentry->mod[mod_idx].ipvx.l4_src = (unsigned short)temp_src_port;
 				pentry->mod[mod_idx].ipvx.l4_dst = (unsigned short)temp_dst_port;
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			}
 		}
 	}
@@ -6175,13 +6207,13 @@ void tpm_sfs_tx_sched_port_mtu_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d %d", &gmac_id, &tcont_id, &mtu);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			tpm_ret = _mv_tpm_sched_egr_mtu_set(gmac_id, tcont_id, mtu);
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -6219,13 +6251,13 @@ void tpm_sfs_tx_sched_queue_mode_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d %d %d %d", &gmac_id, &tcont_id, &queue_id, &mode, &wrr_weight);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			tpm_ret = _mv_tpm_sched_egr_queue_mode_set(gmac_id, tcont_id, queue_id, mode, wrr_weight);
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -6263,13 +6295,13 @@ void tpm_sfs_tx_queue_rate_limit_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d %d %d %d", &gmac_id, &tcont_id, &queue_id, &rate, &bucket_size);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			tpm_ret = _mv_tpm_sched_egr_queue_rate_lim_set(gmac_id, tcont_id, queue_id, rate, bucket_size);
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -6306,13 +6338,13 @@ void tpm_sfs_tx_port_rate_limit_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d %d %d", &gmac_id, &tcont_id, &rate, &bucket_size);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			tpm_ret = _mv_tpm_sched_egr_port_rate_lim_set(gmac_id, tcont_id, rate, bucket_size);
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -6363,13 +6395,13 @@ void tpm_sfs_qos_table_entry_set(const char *buf, size_t len)
 			&tbl_type, &tbl_id, &entry_id, frwdname,
 			&dscp, &pbit, &color);
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 			return;
 		}
 
 		pdbfrwdentry = find_tpm_pkt_frwd_entry_by_name(frwdname);
 		if (pdbfrwdentry == 0) {
-			printk(KERN_INFO "frwd entry [%s] not found, FAIL\n", frwdname);
+			mvOsPrintf("frwd entry [%s] not found, FAIL\n", frwdname);
 		} else {
 			memcpy(&qos_cfg.pp_port, &pdbfrwdentry->frwd, sizeof(qos_cfg.pp_port));
 			qos_cfg.color = color;
@@ -6380,7 +6412,7 @@ void tpm_sfs_qos_table_entry_set(const char *buf, size_t len)
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -6409,7 +6441,7 @@ void tpm_sfs_qos_table_db_reset(const char *buf, size_t len)
 		parm_error_completion(numparms, qos_tbl_db_reset_max, buf, tpm_sfs_help_qos_tbl_cfg);
 	else {
 		TPM_MEMSET_ZERO(g_qos_tbl);
-		printk(KERN_INFO "OK\n");
+		mvOsPrintf("OK\n");
 	}
 
 	return;
@@ -6451,21 +6483,21 @@ void tpm_sfs_qos_table_entry_db_set(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%d %s %d %d %d",
 			&entry_id, frwdname, &dscp, &pbit, &color);
 		if (parsedargs != numparms) {
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 			return;
 		}
 
 		pdbfrwdentry = find_tpm_pkt_frwd_entry_by_name(frwdname);
 		if (pdbfrwdentry == 0)
-			printk(KERN_INFO "frwd entry [%s] not found, FAIL\n", frwdname);
+			mvOsPrintf("frwd entry [%s] not found, FAIL\n", frwdname);
 		else if (entry_id > MV_PP2_CLS_C2_QOS_DSCP_TBL_SIZE)
-			printk(KERN_INFO "entry_id [%d] is not valid, FAIL\n", entry_id);
+			mvOsPrintf("entry_id [%d] is not valid, FAIL\n", entry_id);
 		else {
 			memcpy(&g_qos_tbl[entry_id].pp_port, &pdbfrwdentry->frwd, sizeof(g_qos_tbl[entry_id].pp_port));
 			g_qos_tbl[entry_id].color = color;
 			g_qos_tbl[entry_id].dscp = dscp;
 			g_qos_tbl[entry_id].pbit = pbit;
-			printk(KERN_INFO "OK\n");
+			mvOsPrintf("OK\n");
 		}
 	}
 
@@ -6502,13 +6534,13 @@ void tpm_sfs_qos_table_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d", &tbl_type, &tbl_id);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			tpm_ret = _mv_tpm_qos_table_set(tbl_type, tbl_id, g_qos_tbl);
 			if (TPM_OK == tpm_ret)
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -6548,18 +6580,18 @@ int tpm_sfs_qos_table_dump(enum tpm_qos_sel_t		qos_select,
 	tpm_db_qos_tbl_status_get(qos_select, qos_tbl, &status, &ref_cnt);
 
 	print_horizontal_line(100, "=");
-	printk(KERN_INFO "=        table_type: %s, table_id: %d, table_inited: %s, ref_count: %d\n",
+	mvOsPrintf("=        table_type: %s, table_id: %d, table_inited: %s, ref_count: %d\n",
 		tpm_utils_qos_type_str_get(qos_select), qos_tbl,
 		tpm_utils_valid_str_get(status), ref_cnt);
-	printk(KERN_INFO "=\n");
-	printk(KERN_INFO "=        entry_id  pp_port  pon_tx pp_queue port_id dscp pbit color  inited\n");
+	mvOsPrintf("=\n");
+	mvOsPrintf("=        entry_id  pp_port  pon_tx pp_queue port_id dscp pbit color  inited\n");
 	print_horizontal_line(100, "=");
 
 	for (entry_id = 0; entry_id < qos_tbl_size; entry_id++) {
 		ret = tpm_db_qos_tbl_entry_get(qos_select, qos_tbl, entry_id, &qos_entry);
 		IF_ERROR_STR(TPM_QOS_MOD, ret, "failed to get qos table entry\n");
 
-		printk(KERN_INFO "         %4d  %10s  %4d %7d %7d %7d %4d %5s, %5s\n",
+		mvOsPrintf("         %4d  %10s  %4d %7d %7d %7d %4d %5s, %5s\n",
 			entry_id, tpm_utils_pp_port_str_get(qos_entry.qos_entry.pp_port.pp_port),
 			qos_entry.qos_entry.pp_port.pon_tx, qos_entry.qos_entry.pp_port.pp_queue,
 			qos_entry.qos_entry.pp_port.port_id, qos_entry.qos_entry.dscp, qos_entry.qos_entry.pbit,
@@ -6598,12 +6630,12 @@ void tpm_sfs_qos_table_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d", &tbl_type, &tbl_id);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_sfs_qos_table_dump(tbl_type, tbl_id))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -6645,7 +6677,7 @@ void tpm_sfs_qos_key_set(const char *buf, size_t len)
 	parsedargs = sscanf(buf, "%s %d %d", qosname, &tbl_type, &tbl_id);
 
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
@@ -6654,14 +6686,14 @@ void tpm_sfs_qos_key_set(const char *buf, size_t len)
 		pdbqosentry = find_free_tpm_pkt_qos_entry();
 
 	if (pdbqosentry == 0) {
-		printk(KERN_INFO "QOS key DB full\n");
+		mvOsPrintf("QOS key DB full\n");
 	} else {
 		strcpy(pdbqosentry->name, qosname);
 		pdbqosentry->tbl_id = tbl_id;
 		pdbqosentry->tbl_type = tbl_type;
 	}
 
-	printk(KERN_INFO "OK\n");
+	mvOsPrintf("OK\n");
 	return;
 }
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c2.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c2.c
index 125876a..c25027c 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c2.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c2.c
@@ -115,7 +115,7 @@ static char *tpm_frwd_action_str[8] = {
 void tpm_sfs_valid_c2_entry_header_dump(void)
 {
 	print_horizontal_line(179, "=");
-	printk(KERN_INFO "= LKP_Type | Priority | Port_Info |   Field_Name  |      Field_Value     |            QOS_Info            |    Action_Info     |   Mod_Info   | Duplication | Hit_Cnt |   INDX    =\n");
+	mvOsPrintf("= LKP_Type | Priority | Port_Info |   Field_Name  |      Field_Value     |            QOS_Info            |    Action_Info     |   Mod_Info   | Duplication | Hit_Cnt |   INDX    =\n");
 	print_horizontal_line(179, "=");
 }
 
@@ -441,11 +441,11 @@ void tpm_sfs_valid_c2_entry_line_dump(unsigned int	lkp_type,
 	    dump_idx <= TPM_MOD_DUMP_L4_CHECKSUM ||
 	    dump_idx <= TPM_FLOW_DUMP_CNT ||
 	    dump_idx <= TPM_INDEX_DUMP_DB) {
-		printk(KERN_INFO "+ %8s | %8s | %8s  | %13s | %20s | %30s | %18s | %12s | %11s | %7s | %8s  +\n",
+		mvOsPrintf("+ %8s | %8s | %8s  | %13s | %20s | %30s | %18s | %12s | %11s | %7s | %8s  +\n",
 			lookup_type_str, internal_pri_str, port_info_str, field_name_str, field_value_str,
 			qos_info_str, action_str, mod_str, flow_str, hit_cnt_str, index_str);
 		if (field_match)
-			printk(KERN_INFO "+ %8s | %8s | %8s  | %13s | %20s | %30s | %18s | %12s | %11s | %7s | %9s +\n",
+			mvOsPrintf("+ %8s | %8s | %8s  | %13s | %20s | %30s | %18s | %12s | %11s | %7s | %9s +\n",
 				empty_str, empty_str, empty_str, empty_str, field_value_mask_str,
 				empty_str, empty_str, empty_str, empty_str, empty_str, empty_str);
 	}
@@ -493,9 +493,9 @@ static void tpm_c2_dump_all(unsigned char lookup_type)
 								 &c2_db_data,
 								 c2_index_node);
 			}
-			printk(KERN_INFO "+");
+			mvOsPrintf("+");
 			print_horizontal_line(177, "-");
-			printk(KERN_INFO "+\n");
+			mvOsPrintf("+\n");
 		}
 	}
 
@@ -518,7 +518,7 @@ static void tpm_c2_dump_all(unsigned char lookup_type)
 static void tpm_print_free_c2_tcam_dump_head(void)
 {
 	print_horizontal_line(67, "=");
-	printk(KERN_INFO "=    TOTAL    |                FREE_TCAM_IDX                      =\n");
+	mvOsPrintf("=    TOTAL    |                FREE_TCAM_IDX                      =\n");
 	print_horizontal_line(67, "=");
 }
 
@@ -572,19 +572,19 @@ static void tpm_print_tcam_index_dump_line(unsigned int common_int,
 				tcam_idx_str[j] = 0;
 			if (first_line) {
 				first_line = false;
-				printk(KERN_INFO "+    %4s     |     %40s      +\n", common_str, tcam_idx_str);
+				mvOsPrintf("+    %4s     |     %40s      +\n", common_str, tcam_idx_str);
 			} else {
-				printk(KERN_INFO "+    %4s     |     %40s      +\n", "", tcam_idx_str);
+				mvOsPrintf("+    %4s     |     %40s      +\n", "", tcam_idx_str);
 			}
 		} else {
 			if (first_line) {
 				first_line = false;
 				if (tcam_cnt)
-					printk(KERN_INFO "+    %4s     |     %40s      +\n", common_str, tcam_idx_str);
+					mvOsPrintf("+    %4s     |     %40s      +\n", common_str, tcam_idx_str);
 				else
-					printk(KERN_INFO "+    %4s     |     %40s      +\n", common_str, "NA");
+					mvOsPrintf("+    %4s     |     %40s      +\n", common_str, "NA");
 			} else {
-				printk(KERN_INFO "+    %4s     |     %40s      +\n", "", tcam_idx_str);
+				mvOsPrintf("+    %4s     |     %40s      +\n", "", tcam_idx_str);
 			}
 		}
 	}
@@ -638,7 +638,7 @@ static void tpm_c2_dump_freelist(void)
 static void tpm_print_valid_lkp_type_dump_head(void)
 {
 	print_horizontal_line(67, "=");
-	printk(KERN_INFO "=   LKP_Type  |                TCAM_IDX                           =\n");
+	mvOsPrintf("=   LKP_Type  |                TCAM_IDX                           =\n");
 	print_horizontal_line(67, "=");
 }
 
@@ -673,7 +673,7 @@ static void tpm_c2_dump_lookup_type_list(void)
 			tcam_array[i++] = (unsigned char)(c2_index_node->c2_hw_idx);
 		/* Print LKP_type info */
 		tpm_print_tcam_index_dump_line(lkp_type_idx, tcam_array);
-		printk(KERN_INFO "+-----------------------------------------------------------------+\n");
+		mvOsPrintf("+-----------------------------------------------------------------+\n");
 	}
 	print_horizontal_line(67, "=");
 }
@@ -692,24 +692,25 @@ static void tpm_c2_dump_lookup_type_list(void)
 *       buf - Shell parameters as char buffer
 *       len - Number of characters in buffer
 *******************************************************************************/
-static int sys_help_tpm_c2_debug_cmd(char *buf)
+static int sys_help_tpm_c2_debug_cmd(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [lkp_type]  > lkp_type_entry_dump -  dump all entries with the lookup type\n");
-	off += sprintf(buf+off, "\tlkp_type        (dec)C2 lookup type, 0...63\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [lkp_type]  > lkp_type_entry_dump -  dump all entries with the lookup type\n");
+	o += scnprintf(b+o, s-o, "\tlkp_type        (dec)C2 lookup type, 0...63\n");
 
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
 	/* xxx info dump */
-	off += sprintf(buf+off, "cat dump_all               -  dump all valid C2 entries with their information\n");
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "cat free_tcam_dump         -  dump all free C2 TCAM entry index.\n");
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "cat valid_lkp_type_dump    -  dump valid C2 lookup type, with its TCAM index.\n");
-	off += sprintf(buf+off, "\n");
-
-	return off;
+	o += scnprintf(b+o, s-o, "cat dump_all               -  dump all valid C2 entries with their information\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "cat free_tcam_dump         -  dump all free C2 TCAM entry index.\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "cat valid_lkp_type_dump    -  dump valid C2 lookup type, with its TCAM index.\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	return o;
 }
 
 /******************************************************************************/
@@ -743,7 +744,7 @@ static void sfs_tpm_c2_lkp_type_entry_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &lookup_type);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else
 			tpm_c2_dump_all(lookup_type);
 	}
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c3.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c3.c
index 0d1e483..6b34358 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c3.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c3.c
@@ -50,45 +50,46 @@ disclaimer.
 /* ========================================================================== */
 /*             TPM CFG SYS FS HELP                                            */
 /* ========================================================================== */
-int tpm_sfs_c3_help_debug(char *buf)
+int tpm_sfs_c3_help_debug(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [type] [var]             > entry_dump    -  dump C3 entries according to type and index\n");
-	off += sprintf(buf+off, "\ttype         (dec)C3 dump type, 0: logic index, 1:hash index, 2:lookup type, 3:all\n");
-	off += sprintf(buf+off, "\tvar          (dec)value according to type, type0/1:index, type 2: lookup type, type 3:0\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [all]                    > index_dump    -  dump two index tables\n");
-	off += sprintf(buf+off, "\tall          (dec)all index entry or only valid one, 0: valid, 1:all\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "echo [clear] [lkp_type_en] [lkp_type] [mode] [start] [delay] [threshold]  > scan_param_set   -  set scan mode\n");
-	off += sprintf(buf+off, "\tclear        (dec)clear before scan, 0:not clear, 1:clear\n");
-	off += sprintf(buf+off, "\tlkp_type_en  (dec)scan by lookup type, 0:disable, 1:enable\n");
-	off += sprintf(buf+off, "\tlkp_type     (dec)lookup type value, from 0 to 15\n");
-	off += sprintf(buf+off, "\tmode         (dec)scan mode, 0:below threshold, 1:above threshold\n");
-	off += sprintf(buf+off, "\tdelay        (dec)scan delay time in unit of 256 core clock cycles\n");
-	off += sprintf(buf+off, "\tthreshold    (dec)scan threshold\n");
-	off += sprintf(buf+off, "echo max_entry                > scan_result_get  -  get scan result\n");
-	off += sprintf(buf+off, "\tmax_entry    (dec)max scan entry number\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "echo [logic_idx]              > hit_count_get    -  get hit counter by logical index\n");
-	off += sprintf(buf+off, "\tlogic_idx    (dec)logical index, 0...4095\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "echo [search_depth]           > search_depth_set -  set cuckoo search depth\n");
-	off += sprintf(buf+off, "\tsearch_depth (dec)cuckoo search depth, 1...8\n");
-	off += sprintf(buf+off, "\n");
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [type] [var]             > entry_dump    -  dump C3 entries according to type and index\n");
+	o += scnprintf(b+o, s-o, "\ttype         (dec)C3 dump type, 0: logic index, 1:hash index, 2:lookup type, 3:all\n");
+	o += scnprintf(b+o, s-o, "\tvar          (dec)value according to type, type0/1:index, type 2: lookup type, type 3:0\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [all]                    > index_dump    -  dump two index tables\n");
+	o += scnprintf(b+o, s-o, "\tall          (dec)all index entry or only valid one, 0: valid, 1:all\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "echo [clear] [lkp_type_en] [lkp_type] [mode] [start] [delay] [threshold]  > scan_param_set   -  set scan mode\n");
+	o += scnprintf(b+o, s-o, "\tclear        (dec)clear before scan, 0:not clear, 1:clear\n");
+	o += scnprintf(b+o, s-o, "\tlkp_type_en  (dec)scan by lookup type, 0:disable, 1:enable\n");
+	o += scnprintf(b+o, s-o, "\tlkp_type     (dec)lookup type value, from 0 to 15\n");
+	o += scnprintf(b+o, s-o, "\tmode         (dec)scan mode, 0:below threshold, 1:above threshold\n");
+	o += scnprintf(b+o, s-o, "\tdelay        (dec)scan delay time in unit of 256 core clock cycles\n");
+	o += scnprintf(b+o, s-o, "\tthreshold    (dec)scan threshold\n");
+	o += scnprintf(b+o, s-o, "echo max_entry                > scan_result_get  -  get scan result\n");
+	o += scnprintf(b+o, s-o, "\tmax_entry    (dec)max scan entry number\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "echo [logic_idx]              > hit_count_get    -  get hit counter by logical index\n");
+	o += scnprintf(b+o, s-o, "\tlogic_idx    (dec)logical index, 0...4095\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "echo [search_depth]           > search_depth_set -  set cuckoo search depth\n");
+	o += scnprintf(b+o, s-o, "\tsearch_depth (dec)cuckoo search depth, 1...8\n");
+	o += scnprintf(b+o, s-o, "\n");
 
 	/* entry and config dump */
-	off += sprintf(buf+off, "cat config_dump               -  dump all C3 configuration, including scan config and search depth\n");
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "cat config_dump               -  dump all C3 configuration, including scan config and search depth\n");
+	o += scnprintf(b+o, s-o, "\n");
 
-	return off;
+	return o;
 }
 
 /******************************************************************************/
@@ -263,7 +264,7 @@ void tpm_sfs_c3_entry_line_dump(unsigned int		dump_idx,
 	    dump_idx <= TPM_C3_MOD_DUMP_L4_CHECKSUM ||
 	    dump_idx <= TPM_C3_FLOW_DUMP_CNT ||
 	    dump_idx <= TPM_INDEX_DUMP_LOGICAL) {
-		printk(KERN_INFO "+ %8s | %9s | %9s | %24s | %20s | %13s | %12s | %11s | %9s | %8s +\n",
+		mvOsPrintf("+ %8s | %9s | %9s | %24s | %20s | %13s | %12s | %11s | %9s | %8s +\n",
 		       lookup_type_str, port_info_str, l4_info_str, hek_str,
 		       action_str, qos_info_str, mod_str, flow_str, index_str, hit_cnt_str);
 	}
@@ -322,7 +323,7 @@ void tpm_sfs_c3_entry_convert(MV_PP2_CLS_C3_ENTRY *lsp_entry, struct tpm_c3_data
 void tpm_sfs_c3_entry_header_dump(void)
 {
 	print_horizontal_line(154, "=");
-	printk(KERN_INFO "= Lkp_Type | Port_Info |   L4_Info |   HEK                    |        Action_Info   |  QOS_Info     |   Mod_Info   | Duplication |    Idx    |  Hit_Cnt =\n");
+	mvOsPrintf("= Lkp_Type | Port_Info |   L4_Info |   HEK                    |        Action_Info   |  QOS_Info     |   Mod_Info   | Duplication |    Idx    |  Hit_Cnt =\n");
 	print_horizontal_line(154, "=");
 }
 
@@ -404,9 +405,9 @@ static int tpm_sfs_c3_entry_dump(unsigned int type, unsigned int value)
 						   &c3_entry);
 		}
 
-		printk(KERN_INFO "+");
+		mvOsPrintf("+");
 		print_horizontal_line(152, "-");
-		printk(KERN_INFO "+\n");
+		mvOsPrintf("+\n");
 	} else if ((type == TPM_C3_ENTRY_DUMP_LU_TYPE) ||
 		 (type == TPM_C3_ENTRY_DUMP_ALL)) {
 		/* print header */
@@ -447,14 +448,14 @@ static int tpm_sfs_c3_entry_dump(unsigned int type, unsigned int value)
 			if (0 == (idx % TPM_C3_DUMP_INTERVAL))
 				schedule_timeout_uninterruptible(TPM_C3_DUMP_DELAY);
 
-			printk(KERN_INFO "+");
+			mvOsPrintf("+");
 			print_horizontal_line(152, "-");
-			printk(KERN_INFO "+\n");
+			mvOsPrintf("+\n");
 
 			num++;
 		}
 
-		printk(KERN_INFO "Total Number=%d\n", num);
+		mvOsPrintf("Total Number=%d\n", num);
 	}
 
 
@@ -489,12 +490,12 @@ void tpm_sfs_c3_type_entry_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &type, &value);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sfs_c3_entry_dump(type, value))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -523,9 +524,9 @@ static int tpm_sfs_c3_index_dump(unsigned int type)
 
 	/* dump multihash index table */
 	print_horizontal_line(42, "=");
-	printk(KERN_INFO "=         Multihash Index Table          =\n");
+	mvOsPrintf("=         Multihash Index Table          =\n");
 	print_horizontal_line(42, "=");
-	printk(KERN_INFO "= Index  | Logic_Idx | Hash_Idx |  Valid =\n");
+	mvOsPrintf("= Index  | Logic_Idx | Hash_Idx |  Valid =\n");
 
 	for (idx = 0; idx < MV_PP2_CLS_C3_HASH_TBL_SIZE; idx++) {
 		rc = tpm_db_c3_hash_idx_get(idx, &hash_idx);
@@ -533,7 +534,7 @@ static int tpm_sfs_c3_index_dump(unsigned int type)
 			sprintf(index_str, "%d", num);
 			sprintf(logic_idx_str, "%d", idx);
 			sprintf(hash_idx_str, "%d", hash_idx);
-			printk(KERN_INFO "= %6s | %9s | %8s |  %4s  =\n",
+			mvOsPrintf("= %6s | %9s | %8s |  %4s  =\n",
 				index_str,
 				logic_idx_str,
 				hash_idx_str,
@@ -543,7 +544,7 @@ static int tpm_sfs_c3_index_dump(unsigned int type)
 			sprintf(index_str, "%d", num);
 			sprintf(logic_idx_str, "%d", idx);
 			sprintf(hash_idx_str, "%d", 0);
-			printk(KERN_INFO "= %6s | %9s | %8s |  %4s  =\n",
+			mvOsPrintf("= %6s | %9s | %8s |  %4s  =\n",
 				index_str,
 				logic_idx_str,
 				hash_idx_str,
@@ -553,13 +554,13 @@ static int tpm_sfs_c3_index_dump(unsigned int type)
 
 	}
 	print_horizontal_line(42, "=");
-	printk(KERN_INFO "Total number=%d\n", num);
-	printk(KERN_INFO "\n\n");
+	mvOsPrintf("Total number=%d\n", num);
+	mvOsPrintf("\n\n");
 
 	print_horizontal_line(42, "=");
-	printk(KERN_INFO "=         Logical Index Table            =\n");
+	mvOsPrintf("=         Logical Index Table            =\n");
 	print_horizontal_line(42, "=");
-	printk(KERN_INFO "= Index  | Hash_Idx | Logic_Idx |  Valid =\n");
+	mvOsPrintf("= Index  | Hash_Idx | Logic_Idx |  Valid =\n");
 	num = 0;
 	for (idx = 0; idx < MV_PP2_CLS_C3_HASH_TBL_SIZE; idx++) {
 		rc = tpm_db_c3_logic_idx_get(idx, &logic_idx);
@@ -568,7 +569,7 @@ static int tpm_sfs_c3_index_dump(unsigned int type)
 			sprintf(hash_idx_str, "%d", idx);
 			sprintf(logic_idx_str, "%d", logic_idx);
 
-			printk(KERN_INFO "= %6s | %8s | %9s |  %4s  =\n",
+			mvOsPrintf("= %6s | %8s | %9s |  %4s  =\n",
 				index_str,
 				hash_idx_str,
 				logic_idx_str,
@@ -578,7 +579,7 @@ static int tpm_sfs_c3_index_dump(unsigned int type)
 			sprintf(index_str, "%d", num);
 			sprintf(hash_idx_str, "%d", idx);
 			sprintf(logic_idx_str, "%d", 0);
-			printk(KERN_INFO "= %6s | %8s | %9s |  %4s  =\n",
+			mvOsPrintf("= %6s | %8s | %9s |  %4s  =\n",
 				index_str,
 				hash_idx_str,
 				logic_idx_str,
@@ -588,7 +589,7 @@ static int tpm_sfs_c3_index_dump(unsigned int type)
 
 	}
 	print_horizontal_line(42, "=");
-	printk(KERN_INFO "Total number=%d\n", num);
+	mvOsPrintf("Total number=%d\n", num);
 	return rc;
 }
 
@@ -618,12 +619,12 @@ void tpm_sfs_c3_index_entry_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &index_entry);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sfs_c3_index_dump(index_entry))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -671,7 +672,7 @@ void tpm_sfs_c3_scan_param_set(const char *buf, size_t len)
 		parsed_args = sscanf(buf, "%d %d %d %d %d %d %d",
 					&clear, &lkp_type_en, &lkp_type, &mode, &start, &delay, &threshold);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			scan_config.clear_before_scan = clear;
 			scan_config.lkp_type_scan = lkp_type_en;
@@ -682,9 +683,9 @@ void tpm_sfs_c3_scan_param_set(const char *buf, size_t len)
 			scan_config.scan_threshold = threshold;
 
 			if (!tpm_c3_scan_param_set(&scan_config))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -718,7 +719,7 @@ static int tpm_sfs_c3_scan_result_dump(unsigned int max_num)
 
 	/* dump scan result info */
 	print_horizontal_line(100, "=");
-	printk(KERN_INFO "= Index | Hash_Idx | Logic_Idx |   Hit_Cnt  =\n");
+	mvOsPrintf("= Index | Hash_Idx | Logic_Idx |   Hit_Cnt  =\n");
 	print_horizontal_line(100, "=");
 
 	for (idx = 0; idx < entry_num; idx++) {
@@ -726,7 +727,7 @@ static int tpm_sfs_c3_scan_result_dump(unsigned int max_num)
 		sprintf(hash_idx_str, "%d", result_entry[idx].hash_idx);
 		sprintf(logic_idx_str, "%d", result_entry[idx].logic_idx);
 		sprintf(hit_cnt_str, "%d", result_entry[idx].hit_cnt);
-		printk(KERN_INFO "= %8s | %8s | %8s |  %8s  =\n",
+		mvOsPrintf("= %8s | %8s | %8s |  %8s  =\n",
 			index_str,
 			hash_idx_str,
 			logic_idx_str,
@@ -734,7 +735,7 @@ static int tpm_sfs_c3_scan_result_dump(unsigned int max_num)
 
 	}
 	print_horizontal_line(100, "=");
-	printk(KERN_INFO "Total Number:%d\n", entry_num);
+	mvOsPrintf("Total Number:%d\n", entry_num);
 
 	return rc;
 }
@@ -765,12 +766,12 @@ void tpm_sfs_c3_scan_result_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &scan_num);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sfs_c3_scan_result_dump(scan_num))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -804,16 +805,16 @@ void tpm_sfs_c3_hit_count_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &logic_idx);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			/* for C3 test */
 			tpm_c3_test();
 			if (!tpm_c3_hit_count_get(logic_idx, &hit_cnt)) {
-				printk(KERN_INFO "Logical index(%d), hit counter=%d\n",
+				mvOsPrintf("Logical index(%d), hit counter=%d\n",
 					logic_idx, hit_cnt);
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			} else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -846,12 +847,12 @@ void tpm_sfs_c3_search_depth_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &search_depth);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_db_c3_search_depth_set(search_depth))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -882,16 +883,16 @@ static int tpm_sfs_c3_config_dump(char *buf)
 
 	/* dump C3 config */
 	print_horizontal_line(100, "=");
-	printk(KERN_INFO "Scan Param\n");
-	printk(KERN_INFO "\tclear_before_scan:%-s\n", scan_config.clear_before_scan ? "enabled" : "disabled");
-	printk(KERN_INFO "\tlkp_type_scan:    %-s\n", scan_config.lkp_type_scan ? "enabled" : "disabled");
-	printk(KERN_INFO "\tlkp_type:         %-d\n", scan_config.lkp_type);
-	printk(KERN_INFO "\tscan_mode:        %-s\n", tpm_utils_scan_mode_str_get(scan_config.scan_mode));
-	printk(KERN_INFO "\tstart_entry:      %-d\n", scan_config.start_entry);
-	printk(KERN_INFO "\tscan_delay:       %-d\n", scan_config.scan_delay);
-	printk(KERN_INFO "\tscan_threshold:   %-d\n", scan_config.scan_threshold);
-
-	printk(KERN_INFO "Max Search Depth:%d\n", search_depth);
+	mvOsPrintf("Scan Param\n");
+	mvOsPrintf("\tclear_before_scan:%-s\n", scan_config.clear_before_scan ? "enabled" : "disabled");
+	mvOsPrintf("\tlkp_type_scan:    %-s\n", scan_config.lkp_type_scan ? "enabled" : "disabled");
+	mvOsPrintf("\tlkp_type:         %-d\n", scan_config.lkp_type);
+	mvOsPrintf("\tscan_mode:        %-s\n", tpm_utils_scan_mode_str_get(scan_config.scan_mode));
+	mvOsPrintf("\tstart_entry:      %-d\n", scan_config.start_entry);
+	mvOsPrintf("\tscan_delay:       %-d\n", scan_config.scan_delay);
+	mvOsPrintf("\tscan_threshold:   %-d\n", scan_config.scan_threshold);
+
+	mvOsPrintf("Max Search Depth:%d\n", search_depth);
 	print_horizontal_line(100, "=");
 	return off;
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c4.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c4.c
index 45fb32f..f1b441e 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c4.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_c4.c
@@ -94,16 +94,17 @@ static char *tpm_c4_l3_info_str[] = {
 /* ========================================================================== */
 /*             TPM CFG SYS FS HELP                                            */
 /* ========================================================================== */
-int tpm_sfs_c4_help_debug(char *buf)
+int tpm_sfs_c4_help_debug(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "cat entry_dump    -  dump all C4 entries\n");
+	o += scnprintf(b+o, s-o, "cat entry_dump    -  dump all C4 entries\n");
 
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "cat ruleset_dump  -  dump all ruleSet config\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "cat ruleset_dump  -  dump all ruleSet config\n");
 
-	return off;
+	return o;
 }
 
 /******************************************************************************/
@@ -127,7 +128,7 @@ int tpm_sfs_c4_help_debug(char *buf)
 void tpm_sfs_c4_entry_header_dump(void)
 {
 	print_horizontal_line(155, "=");
-	printk(KERN_INFO "= ruleSet  | rule_num |           Field_Name            |            Field_Value           |   QOS_Info     |    Action_Info     |         MISC           =\n");
+	mvOsPrintf("= ruleSet  | rule_num |           Field_Name            |            Field_Value           |   QOS_Info     |    Action_Info     |         MISC           =\n");
 	print_horizontal_line(155, "=");
 }
 
@@ -296,7 +297,7 @@ void tpm_sfs_c4_entry_line_dump(unsigned int		dump_idx,
 	    dump_idx <= TPM_QOS_DUMP_POLICER ||
 	    dump_idx <= TPM_C4_MISC_DUMP_L3_INFO ||
 	    dump_idx <= TPM_ACT_DUMP_FLOWID) {
-		printk(KERN_INFO "+ %8s | %8s | %13s  %15s  | %32s | %14s | %18s | %22s +\n",
+		mvOsPrintf("+ %8s | %8s | %13s  %15s  | %32s | %14s | %18s | %22s +\n",
 			ruleSet_str, rule_num_str, field_name_str, op_str,
 			field_value_str, qos_info_str, action_str, misc_str);
 	}
@@ -313,9 +314,9 @@ void tpm_sfs_c4_entry_dump(struct tpm_c4_add_entry_t	*rule_entry)
 	for (i = 0; i < sizeof(unsigned int) * BYTE_BITS; i++)
 		tpm_sfs_c4_entry_line_dump(i, rule_entry);
 
-	printk(KERN_INFO "+");
+	mvOsPrintf("+");
 	print_horizontal_line(155, "-");
-	printk(KERN_INFO "+\n");
+	mvOsPrintf("+\n");
 
 	print_horizontal_line(155, "=");
 }
@@ -351,13 +352,13 @@ static int tpm_sfs_c4_ruleset_dump(char *buf)
 	struct tpm_class_port_t	src_port;
 
 	src_port.port_type = TPM_CLASS_SWITCH_PORT_BM;
-	printk(KERN_INFO "\n    UNI     ruleSet    rule_num_max\n");
+	mvOsPrintf("\n    UNI     ruleSet    rule_num_max\n");
 	for (uni_port = 0; uni_port < TPM_NUM_MAX_UNI_PORTS; uni_port++) {
 		src_port.class_port = uni_port;
 		/* get from DB */
 		tpm_ret = tpm_db_c4_port_to_ruleset_get(&src_port, &ruleSet, &rule_num_max);
 		IF_ERROR_STR(TPM_MNG_MOD, tpm_ret, "get ruleSet of UNI(%d) DB failed\n", uni_port);
-		printk(KERN_INFO "    %d     %d        %d\n", uni_port, ruleSet, rule_num_max);
+		mvOsPrintf("    %d     %d        %d\n", uni_port, ruleSet, rule_num_max);
 	}
 
 	return TPM_OK;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_cls.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_cls.c
index f16bbf1..64cdc3f 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_cls.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_cls.c
@@ -41,39 +41,41 @@ disclaimer.
 /* ========================================================================== */
 /*             TPM CFG SYS FS HELP                                            */
 /* ========================================================================== */
-static int tpm_sfs_help_cls_lkp_dcod_cmd(char *buf)
+static int tpm_sfs_help_cls_lkp_dcod_cmd(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [flow_log_id] [flow_len] [way] [cpu_q] > lkp_dcod_entry_set\n");
-	off += sprintf(buf+off, "echo [luid] [first_pri]                     > lkp_dcod_luid_set\n");
-	off += sprintf(buf+off, "echo                                        > lkp_dcod_add\n");
-	off += sprintf(buf+off, "echo [flow_log_id]                          > lkp_dcod_ena\n");
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [flow_log_id] [flow_len] [way] [cpu_q] > lkp_dcod_entry_set\n");
+	o += scnprintf(b+o, s-o, "echo [luid] [first_pri]                     > lkp_dcod_luid_set\n");
+	o += scnprintf(b+o, s-o, "echo                                        > lkp_dcod_add\n");
+	o += scnprintf(b+o, s-o, "echo [flow_log_id]                          > lkp_dcod_ena\n");
 #ifdef CONFIG_MV_ETH_PP2_1
-	off += sprintf(buf+off, "cat lkp_dcod_hits_dump   -  dump cls decode table hit entry\n");
+	o += scnprintf(b+o, s-o, "cat lkp_dcod_hits_dump   -  dump cls decode table hit entry\n");
 #endif
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
 
-	return off;
+	return o;
 }
 
-static int tpm_sfs_help_cls_fl_rl_cmd(char *buf)
+static int tpm_sfs_help_cls_fl_rl_cmd(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo                                                   > fl_rule_init\n");
-	off += sprintf(buf+off, "echo [fl_log_id] [port_type] [port_bm] [lu_type]\n");
-	off += sprintf(buf+off, "echo [enabled] [prio] [engine [field_id_cnt]\n");
-	off += sprintf(buf+off, "echo [field_id0] [field_id1] [field_id2] [field_id3]   > fl_rule_set\n");
-	off += sprintf(buf+off, "echo                                                   > fl_rule_add\n");
-	off += sprintf(buf+off, "echo                                                   > fl_rule_ena\n");
-	off += sprintf(buf+off, "echo                                                   > fl_rule_dis\n");
-	off += sprintf(buf+off, "cat fl_rule_hits_dump   -  dump flow table hit entry (only for ALP A0 version)\n");
-	off += sprintf(buf+off, "\n");
-
-	return off;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo                                                   > fl_rule_init\n");
+	o += scnprintf(b+o, s-o, "echo [fl_log_id] [port_type] [port_bm] [lu_type]\n");
+	o += scnprintf(b+o, s-o, "echo [enabled] [prio] [engine [field_id_cnt]\n");
+	o += scnprintf(b+o, s-o, "echo [field_id0] [field_id1] [field_id2] [field_id3]   > fl_rule_set\n");
+	o += scnprintf(b+o, s-o, "echo                                                   > fl_rule_add\n");
+	o += scnprintf(b+o, s-o, "echo                                                   > fl_rule_ena\n");
+	o += scnprintf(b+o, s-o, "echo                                                   > fl_rule_dis\n");
+	o += scnprintf(b+o, s-o, "cat fl_rule_hits_dump   -  dump flow table hit entry (only for ALP A0 version)\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	return o;
 }
 
 /******************************************************************************/
@@ -126,14 +128,14 @@ void tpm_sfs_lkp_dcod_entry_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d %d %d", &flow_log_id, &flow_len, &way, &cpu_q);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			g_lkp_dcod_entry.cpu_q = cpu_q;
 			g_lkp_dcod_entry.flow_len = flow_len;
 			g_lkp_dcod_entry.flow_log_id = flow_log_id;
 			g_lkp_dcod_entry.luid_num = 0;
 			g_lkp_dcod_entry.way = way;
-			printk(KERN_INFO "OK\n");
+			mvOsPrintf("OK\n");
 		}
 	}
 
@@ -178,12 +180,12 @@ void tpm_sfs_lkp_dcod_luid_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d", &luid, &first_pri);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			g_lkp_dcod_entry.luid_list[g_lkp_dcod_entry.luid_num].luid = luid;
 			g_lkp_dcod_entry.luid_list[g_lkp_dcod_entry.luid_num].first_pri = first_pri;
 			g_lkp_dcod_entry.luid_num++;
-			printk(KERN_INFO "OK\n");
+			mvOsPrintf("OK\n");
 		}
 	}
 
@@ -211,9 +213,9 @@ void tpm_sfs_lkp_dcod_luid_set(const char *buf, size_t len)
 void tpm_sfs_lkp_dcod_add(const char *buf, size_t len)
 {
 	if (TPM_OK == tpm_cls_lkp_dcod_set(&g_lkp_dcod_entry))
-		printk(KERN_INFO "OK\n");
+		mvOsPrintf("OK\n");
 	else
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("FAIL\n");
 
 	return;
 }
@@ -254,12 +256,12 @@ void tpm_sfs_lkp_dcod_ena(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &flow_log_id);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (TPM_OK == tpm_cls_lkp_dcod_enable(flow_log_id))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -318,7 +320,7 @@ void tpm_sfs_cls_rl_print(unsigned int			offset,
 #endif
 	print_horizontal_line(40, "=");
 
-	printk(KERN_INFO "CLS_INFO: IDX(HW[%d] log[%d]) lkp_type[%d] port(bm[%x] type[%d]) prio[%d] ref_cnt[%d] eng[%s] fld_id_cnt[%d]",
+	mvOsPrintf("CLS_INFO: IDX(HW[%d] log[%d]) lkp_type[%d] port(bm[%x] type[%d]) prio[%d] ref_cnt[%d] eng[%s] fld_id_cnt[%d]",
 		offset,
 		fl_rule->rl_log_id,
 		fl_rule->lu_type,
@@ -330,14 +332,14 @@ void tpm_sfs_cls_rl_print(unsigned int			offset,
 		fl_rule->field_id_cnt);
 
 	if (fl_rule->field_id_cnt) {
-		printk(KERN_INFO " fld_id[");
+		mvOsPrintf(" fld_id[");
 		for (k = 0; k < fl_rule->field_id_cnt; k++)
 			if (k+1 == fl_rule->field_id_cnt)
-				printk(KERN_INFO "%s]\n", tpm_utils_field_id_str_get(fl_rule->field_id[k]));
+				mvOsPrintf("%s]\n", tpm_utils_field_id_str_get(fl_rule->field_id[k]));
 			else
-				printk(KERN_INFO "%s, ", tpm_utils_field_id_str_get(fl_rule->field_id[k]));
+				mvOsPrintf("%s, ", tpm_utils_field_id_str_get(fl_rule->field_id[k]));
 	} else
-		printk(KERN_INFO "\n");
+		mvOsPrintf("\n");
 
 	if (hw_dump) {
 		MV_PP2_CLS_FLOW_ENTRY	fe;
@@ -400,7 +402,7 @@ void tpm_sfs_fl_rule_set(const char *buf, size_t len)
 	int		numparms;
 
 	if (g_fl_rls.fl_len == TPM_CLS_FLOW_RULE_MAX - 1) {
-		printk(KERN_INFO "flow is full of rules: %d\n", g_fl_rls.fl_len);
+		mvOsPrintf("flow is full of rules: %d\n", g_fl_rls.fl_len);
 		return;
 	}
 
@@ -414,7 +416,7 @@ void tpm_sfs_fl_rule_set(const char *buf, size_t len)
 					&field_id_cnt, (int *)&field_id[0], (int *)&field_id[1], (int *)&field_id[2],
 					(int *)&field_id[3]);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			g_fl_rls.fl[g_fl_rls.fl_len].fl_log_id	= fl_log_id;
 			g_fl_rls.fl[g_fl_rls.fl_len].port_type	= port_type;
@@ -426,7 +428,7 @@ void tpm_sfs_fl_rule_set(const char *buf, size_t len)
 			g_fl_rls.fl[g_fl_rls.fl_len].field_id_cnt	= field_id_cnt;
 			memcpy(g_fl_rls.fl[g_fl_rls.fl_len].field_id, field_id, sizeof(field_id));
 			g_fl_rls.fl_len++;
-			printk(KERN_INFO "OK\n");
+			mvOsPrintf("OK\n");
 		}
 	}
 
@@ -458,12 +460,12 @@ void tpm_sfs_fl_rule_add(const char *buf, size_t len)
 	rc = tpm_cls_fl_rule_add(&g_fl_rls);
 
 	if (TPM_OK == rc)
-		printk(KERN_INFO "%d rules added\n", g_fl_rls.fl_len);
+		mvOsPrintf("%d rules added\n", g_fl_rls.fl_len);
 
 	if (TPM_OK == rc)
-		printk(KERN_INFO "OK\n");
+		mvOsPrintf("OK\n");
 	else
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("FAIL\n");
 
 	return;
 }
@@ -494,12 +496,12 @@ void tpm_sfs_fl_rule_ena(const char *buf, size_t len)
 
 	if (TPM_OK == rc)
 		for (i = 0; i < g_fl_rls.fl_len; i++)
-			printk(KERN_INFO "rule:%d assigned logical rule ID:%d\n", i, g_fl_rls.fl[i].rl_log_id);
+			mvOsPrintf("rule:%d assigned logical rule ID:%d\n", i, g_fl_rls.fl[i].rl_log_id);
 
 	if (TPM_OK == rc)
-		printk(KERN_INFO "OK\n");
+		mvOsPrintf("OK\n");
 	else
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("FAIL\n");
 
 	return;
 }
@@ -540,9 +542,9 @@ void tpm_sfs_fl_rule_dis(const char *buf, size_t len)
 		if ((1 << loop) & g_fl_rls.fl[0].port_bm) {
 			src_port.class_port = (1 << loop);
 			if (TPM_OK == tpm_cls_fl_rule_disable(rl_log_id, rl_log_id_len, &src_port))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -573,21 +575,21 @@ int tpm_sfs_cls_lkp_dcod_dump(char *buf)
 	int				rc;
 
 	print_horizontal_line(80, "=");
-	printk(KERN_INFO "log_id enabled  cpu  way alloc len off luid_no = luid_list (luid/first-prio)\n");
+	mvOsPrintf("log_id enabled  cpu  way alloc len off luid_no = luid_list (luid/first-prio)\n");
 	for (i = 0; i < TPM_MNG_FLOW_ID_MAX; i++) {
 		rc = tpm_db_cls_lkp_dcod_get(i, &lkp_dcod_db);
 		if (rc != TPM_OK) {
-			printk(KERN_INFO "tpm_db_cls_lkp_dcod_get returned error %d\n", rc);
-			printk(KERN_INFO "FAIL\n");
+			mvOsPrintf("tpm_db_cls_lkp_dcod_get returned error %d\n", rc);
+			mvOsPrintf("FAIL\n");
 			return 0;
 		}
-		printk(KERN_INFO "%6d %-7s  0x%02X %-3d %5d %3d %3d %7d = ",
+		mvOsPrintf("%6d %-7s  0x%02X %-3d %5d %3d %3d %7d = ",
 			i, tpm_utils_valid_str_get((int)lkp_dcod_db.enabled),
 			(int)lkp_dcod_db.cpu_q, (int)lkp_dcod_db.way, (int)lkp_dcod_db.flow_alloc_len,
 			(int)lkp_dcod_db.flow_len, lkp_dcod_db.flow_off, lkp_dcod_db.luid_num);
 		for (j = 0; j < lkp_dcod_db.luid_num; j++)
-			printk(KERN_INFO "%2d/%2d ", lkp_dcod_db.luid_list[j].luid, lkp_dcod_db.luid_list[j].first_pri);
-		printk(KERN_INFO "\n");
+			mvOsPrintf("%2d/%2d ", lkp_dcod_db.luid_list[j].luid, lkp_dcod_db.luid_list[j].first_pri);
+		mvOsPrintf("\n");
 	}
 
 	return 0;
@@ -620,14 +622,14 @@ int tpm_sfs_cls_lkp_hits_dump(char *buf)
 	struct tpm_db_cls_lkp_dcod_t lkp_dcod_db;
 
 	print_horizontal_line(30, "=");
-	printk(KERN_INFO "log_id  lkp_id  way  hit_cnt\n");
+	mvOsPrintf("log_id  lkp_id  way  hit_cnt\n");
 	/* Get the lookupID and WAY */
 	for (lkpid = 0; lkpid < MV_PP2_CLS_LKP_TBL_SIZE ; lkpid++) {
 		for (way = TPM_WAY_NON_PON; way <= TPM_WAY_PON; way++) {
 			rc = mvPp2V1ClsHwLkpHitGet(lkpid, way, &hit_cnt);
 			if (rc != TPM_OK) {
-				printk(KERN_INFO "lookup ID%d,way%d hit cnt read fail\n", lkpid, way);
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("lookup ID%d,way%d hit cnt read fail\n", lkpid, way);
+				mvOsPrintf("FAIL\n");
 				return 0;
 			}
 			if (!hit_cnt)
@@ -637,8 +639,8 @@ int tpm_sfs_cls_lkp_hits_dump(char *buf)
 			for (fl_log_id = 0; fl_log_id < TPM_MNG_FLOW_ID_MAX; fl_log_id++) {
 				rc = tpm_db_cls_lkp_dcod_get(fl_log_id, &lkp_dcod_db);
 				if (rc != TPM_OK) {
-					printk(KERN_INFO "tpm_db_cls_lkp_dcod_get returned error %d\n", rc);
-					printk(KERN_INFO "FAIL\n");
+					mvOsPrintf("tpm_db_cls_lkp_dcod_get returned error %d\n", rc);
+					mvOsPrintf("FAIL\n");
 					return 0;
 				}
 				if (lkp_dcod_db.luid_num == 0)
@@ -646,7 +648,7 @@ int tpm_sfs_cls_lkp_hits_dump(char *buf)
 				for (i = 0; i < lkp_dcod_db.luid_num; i++) {
 					if (lkp_dcod_db.luid_list[i].luid == lkpid &&
 					    lkp_dcod_db.way == way) {
-						printk(KERN_INFO "%3d      %3d   %3d    %3d\n",
+						mvOsPrintf("%3d      %3d   %3d    %3d\n",
 							fl_log_id, lkpid, way, hit_cnt);
 						break;
 					}
@@ -655,8 +657,8 @@ int tpm_sfs_cls_lkp_hits_dump(char *buf)
 					break;
 			}
 			if (fl_log_id == TPM_MNG_FLOW_ID_MAX) {
-				printk(KERN_INFO "logical id not found for lkpid%d way%d\n", lkpid, way);
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("logical id not found for lkpid%d way%d\n", lkpid, way);
+				mvOsPrintf("FAIL\n");
 				return 0;
 			}
 			hit_cnt = 0;
@@ -689,8 +691,8 @@ int tpm_sfs_cls_fl_hits_dump(char *buf)
 
 	rc = mvPp2V1ClsHwFlowHitsDump();
 	if (rc) {
-		printk(KERN_INFO "flow table hits dump error\n");
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("flow table hits dump error\n");
+		mvOsPrintf("FAIL\n");
 		return 0;
 	}
 
@@ -724,32 +726,32 @@ int tpm_sfs_cls_fl_rls_dump(char *buf)
 	unsigned short ref_sum = 0;
 
 	print_horizontal_line(80, "=");
-	printk(KERN_INFO "log_flow_id enabled offset engine logID lut portBm portType pri refCnt fid# = field_Ids\n");
+	mvOsPrintf("log_flow_id enabled offset engine logID lut portBm portType pri refCnt fid# = field_Ids\n");
 
 	for (i = 0; i < TPM_MNG_FLOW_ID_MAX; i++) {
 		rc = tpm_db_cls_lkp_dcod_get(i, &lkp_dcod_db);
 		if (rc != TPM_OK) {
-			printk(KERN_INFO "tpm_db_cls_lkp_dcod_get returned error %d\n", rc);
-			printk(KERN_INFO "FAIL\n");
+			mvOsPrintf("tpm_db_cls_lkp_dcod_get returned error %d\n", rc);
+			mvOsPrintf("FAIL\n");
 			return 0;
 		}
 		if (lkp_dcod_db.flow_len == 0)
 			continue;
 
-		printk(KERN_INFO "%-11d ", i);
+		mvOsPrintf("%-11d ", i);
 
 		rc = tpm_db_cls_fl_rule_list_get(lkp_dcod_db.flow_off, lkp_dcod_db.flow_len, fl_rl_list_db.flow);
 		if (rc != TPM_OK) {
-			printk(KERN_INFO "tpm_db_cls_fl_rule_list_get returned error %d\n", rc);
-			printk(KERN_INFO "FAIL\n");
+			mvOsPrintf("tpm_db_cls_fl_rule_list_get returned error %d\n", rc);
+			mvOsPrintf("FAIL\n");
 			return 0;
 		}
 
 		for (j = 0; j < lkp_dcod_db.flow_len; j++) {
 			if (j != 0)
-				printk(KERN_INFO "\t    ");
+				mvOsPrintf("\t    ");
 
-			printk(KERN_INFO "%-6s  %6d %-6s",
+			mvOsPrintf("%-6s  %6d %-6s",
 				tpm_utils_valid_str_get((int)fl_rl_list_db.flow[j].enabled),
 				lkp_dcod_db.flow_off + j,
 				tpm_utils_eng_no_str_get((int)fl_rl_list_db.flow[j].engine));
@@ -760,7 +762,7 @@ int tpm_sfs_cls_fl_rls_dump(char *buf)
 					ref_sum += fl_rl_list_db.flow[j].ref_cnt[k];
 #endif
 
-			printk(KERN_INFO " %5d %3d %6d %8d %3d %6d %4d = ",
+			mvOsPrintf(" %5d %3d %6d %8d %3d %6d %4d = ",
 				fl_rl_list_db.flow[j].rl_log_id,
 				fl_rl_list_db.flow[j].lu_type,
 				fl_rl_list_db.flow[j].port_bm,
@@ -770,11 +772,11 @@ int tpm_sfs_cls_fl_rls_dump(char *buf)
 				fl_rl_list_db.flow[j].field_id_cnt);
 
 			for (k = 0; k < fl_rl_list_db.flow[j].field_id_cnt; k++)
-				printk(KERN_INFO "%2d ", fl_rl_list_db.flow[j].field_id[k]);
-			printk(KERN_INFO "\n");
+				mvOsPrintf("%2d ", fl_rl_list_db.flow[j].field_id[k]);
+			mvOsPrintf("\n");
 		}
 		if (lkp_dcod_db.flow_len)
-			printk(KERN_INFO "\n");
+			mvOsPrintf("\n");
 	}
 
 	return 0;
@@ -807,29 +809,29 @@ int tpm_sfs_cls_fl_log_rls_dump(char *buf)
 
 	rc = tpm_db_cls_rl_off_get(&off, 0);
 	if (rc != TPM_OK) {
-		printk(KERN_INFO "tpm_db_cls_rl_off_get returned error %d\n", rc);
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("tpm_db_cls_rl_off_get returned error %d\n", rc);
+		mvOsPrintf("FAIL\n");
 		return 0;
 	}
 
-	printk(KERN_INFO "number of rules=%d\n", off-TPM_CLS_LOG2OFF_START);
+	mvOsPrintf("number of rules=%d\n", off-TPM_CLS_LOG2OFF_START);
 
 	if (off-TPM_CLS_LOG2OFF_START > 0) {
-		printk(KERN_INFO "log_rule_ID = flow_table_offset\n");
+		mvOsPrintf("log_rule_ID = flow_table_offset\n");
 
 		for (i = 1; i < TPM_CLS_LOG2OFF_TBL_SIZE; i++) {
 			rc = tpm_db_cls_rl_off_get(&off, i);
 			if (TPM_NO_RESOURCE == rc) {
 				return 0;
 			} else if (rc != TPM_OK) {
-				printk(KERN_INFO "tpm_db_cls_rl_off_get returned error %d\n", rc);
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("tpm_db_cls_rl_off_get returned error %d\n", rc);
+				mvOsPrintf("FAIL\n");
 				return 0;
 			}
 
 			if (off != TPM_CLS_FREE_FL_LOG) {
-				printk(KERN_INFO "%11d = %17d", i, off);
-				printk(KERN_INFO "\n");
+				mvOsPrintf("%11d = %17d", i, off);
+				mvOsPrintf("\n");
 			}
 		}
 	}
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_init.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_init.c
index 4750285..24c21fd 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_init.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_init.c
@@ -53,66 +53,67 @@ disclaimer.
 * OUTPUTS:
 *	None
 *******************************************************************************/
-int sys_help_tpm_init_cfg(char *buf)
+int sys_help_tpm_init_cfg(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [gmac] [mode]                   > switch_mode_set        - set switch head mode for ETH type GMAC port\n");
-	off += sprintf(buf+off, "\tgmac(dec): GMAC number, 0:GMAC0, 1:GMAC1; mode(dec): head mode, 0:None, 1:MH, 2:MH_ETYPE_DSA, 3:DSA, 4:EXT_DSA\n\n");
-	off += sprintf(buf+off, "echo [gmac] [mh]                     > gmac_def_mh_set        - set default TX MH for ETH type GMAC port\n");
-	off += sprintf(buf+off, "\tgmac(dec): GMAC number, 0:GMAC0, 1:GMAC1; mh(hex): Marvell header\n\n");
-	off += sprintf(buf+off, "echo [init]                          > switch_init_set        - set switch init flag to enable or disable switch\n");
-	off += sprintf(buf+off, "\tinit(dec): whether init switch, 0:do not init switch, 1:init switch\n\n");
-	off += sprintf(buf+off, "echo [handler]                       > mc_data_handler_set    - set multicast data handler, UC or MC\n");
-	off += sprintf(buf+off, "\thandler(dec): handler mode, 0:general classifier, 1:exact match, 2:multicast\n\n");
-	off += sprintf(buf+off, "echo [layer] [action]                > mc_flow_default_set    - set default action for multicast flow\n");
-	off += sprintf(buf+off, "\tlayer(dec): MC flow layer, 0:L2, 1:L3\n\n");
-	off += sprintf(buf+off, "\taction(dec): default action, 0:drop, 1:to CPU\n\n");
-	off += sprintf(buf+off, "echo [pp_bm] [handler]               > mc_proto_handler_set   - set multicast protocol handler per pp port\n");
-	off += sprintf(buf+off, "\tpp_bm(hex): PP port bitmap, 0x01:GMAC0, 0x02:GMAC1, 0x04:PON MAC; handler(dec): handler mode, 0:general classifier, 1:exact match, 2:multicast\n\n");
-	off += sprintf(buf+off, "echo [handler]                       > mc_sw_handler_set    - set multicast switch handler, done by MC API or user\n");
-	off += sprintf(buf+off, "\thandler(dec): handler mode, 0:swicth is set by user, 1:swicth is set by MC API\n\n");
-	off += sprintf(buf+off, "echo [uni_num]                       > uni_port_num_set       - set uni port number\n");
-	off += sprintf(buf+off, "\tuni_num(dec): MAX UNI ports\n\n");
-	off += sprintf(buf+off, "echo [support]                       > ipv6_support_set       - set IPv6 support\n");
-	off += sprintf(buf+off, "\tsupport(dec): 0: do not support, 1:support\n\n");
-	off += sprintf(buf+off, "echo [queue]                         > cpu_trap_queue_set     - set CPU trap queue\n");
-	off += sprintf(buf+off, "\tqueue(dec): CPU trap RX queue\n\n");
-	off += sprintf(buf+off, "echo [action]                        > ttl_illegal_action_set - set action for illegal zero TTL\n");
-	off += sprintf(buf+off, "\taction(dec): 0:not care,1:drop, 2:to CPU\n\n");
-	off += sprintf(buf+off, "echo [action]                        > bad_chksum_action_set - set action for bad L3/4 checksum packet\n");
-	off += sprintf(buf+off, "\taction(dec): 0:not care,1:drop\n\n");
-	off += sprintf(buf+off, "echo [tpid]                          > mod_vlan_tpid_set      - set tpid for VLAN modification\n");
-	off += sprintf(buf+off, "\ttpid(hex): TPID for VLAN modification\n\n");
-	off += sprintf(buf+off, "echo [tpid1] [tpid2]                 > tpid_combo_set         - add VLAN TPID combination\n");
-	off += sprintf(buf+off, "echo [tpid1] [tpid2]                 > tpid_combo_del         - delete VLAN TPID combination\n");
-	off += sprintf(buf+off, "\ttpid1,tpid2(hex): TPIDs, 0xFFFF: Do not care.\n");
-	off += sprintf(buf+off, "\tFor 2-tag, tpid1: outer TPID, tpid2: inner TPID; For 1-tag, tpid1: TPID, tpid2:must be 0xFFFF\n\n");
-	off += sprintf(buf+off, "echo [mode]                          > tcp_flag_check_set     - set the ability whether check TCP flag\n");
-	off += sprintf(buf+off, "\tmode(dec):0:do not check,1:check\n\n");
-	off += sprintf(buf+off, "echo [mode]                          > qos_tbl_ext_set        - set the QoS table usage mode\n");
-	off += sprintf(buf+off, "\tmode(dec):0:do not use,1:owned by TPM, 2:owned by customer\n\n");
-	off += sprintf(buf+off, "echo [support]                       > cnm_support_set       - set CTC CnM support\n");
-	off += sprintf(buf+off, "\tsupport(dec): 0: do not support, 1:support\n\n");
-	off += sprintf(buf+off, "echo [flag(hex)]                     > trace_debug_flag_set   - set TPM default trace and debug flag\n");
-	off += sprintf(buf+off, "\t0x%04x:TPM_PRS_MOD, 0x%04x:TPM_PME_MOD,    0x%04x:TPM_MNG_MOD,    0x%08x:TPM_DEBUG_MASK\n",
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [gmac] [mode]                   > switch_mode_set        - set switch head mode for ETH type GMAC port\n");
+	o += scnprintf(b+o, s-o, "\tgmac(dec): GMAC number, 0:GMAC0, 1:GMAC1; mode(dec): head mode, 0:None, 1:MH, 2:MH_ETYPE_DSA, 3:DSA, 4:EXT_DSA\n\n");
+	o += scnprintf(b+o, s-o, "echo [gmac] [mh]                     > gmac_def_mh_set        - set default TX MH for ETH type GMAC port\n");
+	o += scnprintf(b+o, s-o, "\tgmac(dec): GMAC number, 0:GMAC0, 1:GMAC1; mh(hex): Marvell header\n\n");
+	o += scnprintf(b+o, s-o, "echo [init]                          > switch_init_set        - set switch init flag to enable or disable switch\n");
+	o += scnprintf(b+o, s-o, "\tinit(dec): whether init switch, 0:do not init switch, 1:init switch\n\n");
+	o += scnprintf(b+o, s-o, "echo [handler]                       > mc_data_handler_set    - set multicast data handler, UC or MC\n");
+	o += scnprintf(b+o, s-o, "\thandler(dec): handler mode, 0:general classifier, 1:exact match, 2:multicast\n\n");
+	o += scnprintf(b+o, s-o, "echo [layer] [action]                > mc_flow_default_set    - set default action for multicast flow\n");
+	o += scnprintf(b+o, s-o, "\tlayer(dec): MC flow layer, 0:L2, 1:L3\n\n");
+	o += scnprintf(b+o, s-o, "\taction(dec): default action, 0:drop, 1:to CPU\n\n");
+	o += scnprintf(b+o, s-o, "echo [pp_bm] [handler]               > mc_proto_handler_set   - set multicast protocol handler per pp port\n");
+	o += scnprintf(b+o, s-o, "\tpp_bm(hex): PP port bitmap, 0x01:GMAC0, 0x02:GMAC1, 0x04:PON MAC; handler(dec): handler mode, 0:general classifier, 1:exact match, 2:multicast\n\n");
+	o += scnprintf(b+o, s-o, "echo [handler]                       > mc_sw_handler_set    - set multicast switch handler, done by MC API or user\n");
+	o += scnprintf(b+o, s-o, "\thandler(dec): handler mode, 0:swicth is set by user, 1:swicth is set by MC API\n\n");
+	o += scnprintf(b+o, s-o, "echo [uni_num]                       > uni_port_num_set       - set uni port number\n");
+	o += scnprintf(b+o, s-o, "\tuni_num(dec): MAX UNI ports\n\n");
+	o += scnprintf(b+o, s-o, "echo [support]                       > ipv6_support_set       - set IPv6 support\n");
+	o += scnprintf(b+o, s-o, "\tsupport(dec): 0: do not support, 1:support\n\n");
+	o += scnprintf(b+o, s-o, "echo [queue]                         > cpu_trap_queue_set     - set CPU trap queue\n");
+	o += scnprintf(b+o, s-o, "\tqueue(dec): CPU trap RX queue\n\n");
+	o += scnprintf(b+o, s-o, "echo [action]                        > ttl_illegal_action_set - set action for illegal zero TTL\n");
+	o += scnprintf(b+o, s-o, "\taction(dec): 0:not care,1:drop, 2:to CPU\n\n");
+	o += scnprintf(b+o, s-o, "echo [action]                        > bad_chksum_action_set - set action for bad L3/4 checksum packet\n");
+	o += scnprintf(b+o, s-o, "\taction(dec): 0:not care,1:drop\n\n");
+	o += scnprintf(b+o, s-o, "echo [tpid]                          > mod_vlan_tpid_set      - set tpid for VLAN modification\n");
+	o += scnprintf(b+o, s-o, "\ttpid(hex): TPID for VLAN modification\n\n");
+	o += scnprintf(b+o, s-o, "echo [tpid1] [tpid2]                 > tpid_combo_set         - add VLAN TPID combination\n");
+	o += scnprintf(b+o, s-o, "echo [tpid1] [tpid2]                 > tpid_combo_del         - delete VLAN TPID combination\n");
+	o += scnprintf(b+o, s-o, "\ttpid1,tpid2(hex): TPIDs, 0xFFFF: Do not care.\n");
+	o += scnprintf(b+o, s-o, "\tFor 2-tag, tpid1: outer TPID, tpid2: inner TPID; For 1-tag, tpid1: TPID, tpid2:must be 0xFFFF\n\n");
+	o += scnprintf(b+o, s-o, "echo [mode]                          > tcp_flag_check_set     - set the ability whether check TCP flag\n");
+	o += scnprintf(b+o, s-o, "\tmode(dec):0:do not check,1:check\n\n");
+	o += scnprintf(b+o, s-o, "echo [mode]                          > qos_tbl_ext_set        - set the QoS table usage mode\n");
+	o += scnprintf(b+o, s-o, "\tmode(dec):0:do not use,1:owned by TPM, 2:owned by customer\n\n");
+	o += scnprintf(b+o, s-o, "echo [support]                       > cnm_support_set       - set CTC CnM support\n");
+	o += scnprintf(b+o, s-o, "\tsupport(dec): 0: do not support, 1:support\n\n");
+	o += scnprintf(b+o, s-o, "echo [flag(hex)]                     > trace_debug_flag_set   - set TPM default trace and debug flag\n");
+	o += scnprintf(b+o, s-o, "\t0x%04x:TPM_PRS_MOD, 0x%04x:TPM_PME_MOD,    0x%04x:TPM_MNG_MOD,    0x%08x:TPM_DEBUG_MASK\n",
 				TPM_PRS_MOD, TPM_PME_MOD, TPM_MNG_MOD, TPM_DEBUG_MASK);
-	off += sprintf(buf+off, "\t0x%04x:TPM_CLS_MOD, 0x%04x:TPM_QOS_MOD,    0x%04x:TPM_DB_MOD,     0x%08x:TPM_INFO_MASK\n",
+	o += scnprintf(b+o, s-o, "\t0x%04x:TPM_CLS_MOD, 0x%04x:TPM_QOS_MOD,    0x%04x:TPM_DB_MOD,     0x%08x:TPM_INFO_MASK\n",
 				TPM_CLS_MOD, TPM_QOS_MOD, TPM_DB_MOD, TPM_INFO_MASK);
-	off += sprintf(buf+off, "\t0x%04x:TPM_C2_MOD,  0x%04x:TPM_SWITCH_MOD, 0x%04x:TPM_SYSFS_MOD,  0x%08x:TPM_WARN_MASK\n",
+	o += scnprintf(b+o, s-o, "\t0x%04x:TPM_C2_MOD,  0x%04x:TPM_SWITCH_MOD, 0x%04x:TPM_SYSFS_MOD,  0x%08x:TPM_WARN_MASK\n",
 				TPM_C2_MOD, TPM_SWITCH_MOD, TPM_SYSFS_MOD, TPM_WARN_MASK);
-	off += sprintf(buf+off, "\t0x%04x:TPM_C3_MOD,  0x%04x:TPM_API_MOD,    0x%04x:TPM_COMMON_MOD, 0x%08x:TPM_ERROR_MASK\n",
+	o += scnprintf(b+o, s-o, "\t0x%04x:TPM_C3_MOD,  0x%04x:TPM_API_MOD,    0x%04x:TPM_COMMON_MOD, 0x%08x:TPM_ERROR_MASK\n",
 				TPM_C3_MOD, TPM_API_MOD, TPM_COMMON_MOD, TPM_ERROR_MASK);
-	off += sprintf(buf+off, "\t0x%04x:TPM_C4_MOD,  0x%04x:TPM_INIT_MOD,   0x%04x:TPM_IOCTL_MOD,  0x%08x:TPM_FATAL_MASK\n",
+	o += scnprintf(b+o, s-o, "\t0x%04x:TPM_C4_MOD,  0x%04x:TPM_INIT_MOD,   0x%04x:TPM_IOCTL_MOD,  0x%08x:TPM_FATAL_MASK\n",
 				TPM_C4_MOD, TPM_INIT_MOD, TPM_IOCTL_MOD, TPM_FATAL_MASK);
 	/* tpm cfg setup */
-	off += sprintf(buf+off, "echo 1                               > module_start       - Start TPM module while applying init configuration\n\n");
-	off += sprintf(buf+off, "-----------------------------------------------------------------------------------------------------------\n");
-	off += sprintf(buf+off, "cat                                    init_cfg_dump          - Dump init module configuration\n");
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "echo 1                               > module_start       - Start TPM module while applying init configuration\n\n");
+	o += scnprintf(b+o, s-o, "-----------------------------------------------------------------------------------------------------------\n");
+	o += scnprintf(b+o, s-o, "cat                                    init_cfg_dump          - Dump init module configuration\n");
+	o += scnprintf(b+o, s-o, "\n");
 
-	return off;
+	return o;
 }
 
 /*******************************************************************************
@@ -125,32 +126,33 @@ int sys_help_tpm_init_cfg(char *buf)
 * OUTPUTS:
 *	None
 *******************************************************************************/
-int sys_help_tpm_init_cap(char *buf)
+int sys_help_tpm_init_cap(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [type] [rule_type] [field_bm] [vlan_num] [pre] [hits]  > capability_set         - add capability\n");
-	off += sprintf(buf+off, "echo [type] [rule_type] [field_bm] [vlan_num]               > capability_del         - delete capability\n");
-	off += sprintf(buf+off, "\ttype(dec): capability type, 0:exact match and exception handling, 1:general classification\n");
-	off += sprintf(buf+off, "\trule_type(dec): only valid for CLS caps, from 0 to 15, caps in smaller rule_type gets higher priority\n");
-	off += sprintf(buf+off, "\tfield_bm(hex): matching field bitmap\n");
-	off += tpm_sfs_help_parse_rule_bm_print(buf, off);
-	off += sprintf(buf+off, "\tvlan_num(dec):\n");
-	off += sprintf(buf+off, "\t    %d: TPM_NO_VLAN\n",		TPM_NO_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_SINGLE_VLAN\n",		TPM_SINGLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_DOUBLE_VLAN\n",		TPM_DOUBLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_TRIPLE_VLAN\n",		TPM_TRIPLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_NOT_DOUBLE_VLAN\n",	TPM_NOT_DOUBLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_ANY_VLAN\n",		TPM_ANY_VLAN);
-	off += sprintf(buf+off, "\tpre(dec): precedence, ranges from 0 to 63\n");
-	off += sprintf(buf+off, "\thits(dec): max port hits, 1 or 2\n");
-	off += sprintf(buf+off, "-----------------------------------------------------------------------------------\n");
-	off += sprintf(buf+off, "cat                                    capability_dump        - Dump all capability\n");
-
-	off += sprintf(buf+off, "\n");
-
-	return off;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [type] [rule_type] [field_bm] [vlan_num] [pre] [hits]  > capability_set         - add capability\n");
+	o += scnprintf(b+o, s-o, "echo [type] [rule_type] [field_bm] [vlan_num]               > capability_del         - delete capability\n");
+	o += scnprintf(b+o, s-o, "\ttype(dec): capability type, 0:exact match and exception handling, 1:general classification\n");
+	o += scnprintf(b+o, s-o, "\trule_type(dec): only valid for CLS caps, from 0 to 15, caps in smaller rule_type gets higher priority\n");
+	o += scnprintf(b+o, s-o, "\tfield_bm(hex): matching field bitmap\n");
+	o = tpm_sfs_help_parse_rule_bm_print(b, o);
+	o += scnprintf(b+o, s-o, "\tvlan_num(dec):\n");
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_NO_VLAN\n",		TPM_NO_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_SINGLE_VLAN\n",		TPM_SINGLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_DOUBLE_VLAN\n",		TPM_DOUBLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_TRIPLE_VLAN\n",		TPM_TRIPLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_NOT_DOUBLE_VLAN\n",	TPM_NOT_DOUBLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_ANY_VLAN\n",		TPM_ANY_VLAN);
+	o += scnprintf(b+o, s-o, "\tpre(dec): precedence, ranges from 0 to 63\n");
+	o += scnprintf(b+o, s-o, "\thits(dec): max port hits, 1 or 2\n");
+	o += scnprintf(b+o, s-o, "-----------------------------------------------------------------------------------\n");
+	o += scnprintf(b+o, s-o, "cat                                    capability_dump        - Dump all capability\n");
+
+	o += scnprintf(b+o, s-o, "\n");
+
+	return o;
 }
 
 /*******************************************************************************
@@ -163,30 +165,31 @@ int sys_help_tpm_init_cap(char *buf)
 * OUTPUTS:
 *	None
 *******************************************************************************/
-int sys_help_tpm_init_filter(char *buf)
+int sys_help_tpm_init_filter(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* filter */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [rule_type] [pre] [field_bm] [vlan_num] > filter_set	  - add filter type\n");
-	off += sprintf(buf+off, "\trule_type(dec): from 0 to 15, filter in smaller rule_type gets higher priority\n");
-	off += sprintf(buf+off, "\tpre(dec): precedence, ranges from 0 to 63\n");
-	off += sprintf(buf+off, "\tfield_bm(hex): matching field bitmap, see capability help\n");
-	off += tpm_sfs_help_parse_rule_bm_print(buf, off);
-	off += sprintf(buf+off, "\tvlan_num(dec):\n");
-	off += sprintf(buf+off, "\t    %d: TPM_NO_VLAN\n",		TPM_NO_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_SINGLE_VLAN\n",		TPM_SINGLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_DOUBLE_VLAN\n",		TPM_DOUBLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_TRIPLE_VLAN\n",		TPM_TRIPLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_NOT_DOUBLE_VLAN\n",	TPM_NOT_DOUBLE_VLAN);
-	off += sprintf(buf+off, "\t    %d: TPM_ANY_VLAN\n",		TPM_ANY_VLAN);
-	off += sprintf(buf+off, "----------------------------------------------------------------------------------\n");
-	off += sprintf(buf+off, "cat     filter_dump        - Dump all filters\n");
-
-	off += sprintf(buf+off, "\n");
-
-	return off;
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [rule_type] [pre] [field_bm] [vlan_num] > filter_set	  - add filter type\n");
+	o += scnprintf(b+o, s-o, "\trule_type(dec): from 0 to 15, filter in smaller rule_type gets higher priority\n");
+	o += scnprintf(b+o, s-o, "\tpre(dec): precedence, ranges from 0 to 63\n");
+	o += scnprintf(b+o, s-o, "\tfield_bm(hex): matching field bitmap, see capability help\n");
+	o = tpm_sfs_help_parse_rule_bm_print(b, o);
+	o += scnprintf(b+o, s-o, "\tvlan_num(dec):\n");
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_NO_VLAN\n",		TPM_NO_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_SINGLE_VLAN\n",		TPM_SINGLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_DOUBLE_VLAN\n",		TPM_DOUBLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_TRIPLE_VLAN\n",		TPM_TRIPLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_NOT_DOUBLE_VLAN\n",	TPM_NOT_DOUBLE_VLAN);
+	o += scnprintf(b+o, s-o, "\t    %d: TPM_ANY_VLAN\n",		TPM_ANY_VLAN);
+	o += scnprintf(b+o, s-o, "----------------------------------------------------------------------------------\n");
+	o += scnprintf(b+o, s-o, "cat     filter_dump        - Dump all filters\n");
+
+	o += scnprintf(b+o, s-o, "\n");
+
+	return o;
 }
 
 /*******************************************************************************
@@ -199,17 +202,18 @@ int sys_help_tpm_init_filter(char *buf)
 * OUTPUTS:
 *	None
 *******************************************************************************/
-int sys_help_tpm_mib_reset(char *buf)
+int sys_help_tpm_mib_reset(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [reset_level] > mib_reset -  Do TPM MIB reset with reset level\n");
-	off += sprintf(buf+off, "\treset_level(hex), reset level\n");
-	off += sprintf(buf+off, "\t   0:high level, reset all TPM configuration and reset TPM to none started state\n");
-	off += sprintf(buf+off, "\t   1: medium level, reset all TPM configuration including parser config\n");
-	off += sprintf(buf+off, "\t   2: low level, reset TPM configuration except parser config\n");
-	return off;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [reset_level] > mib_reset -  Do TPM MIB reset with reset level\n");
+	o += scnprintf(b+o, s-o, "\treset_level(hex), reset level\n");
+	o += scnprintf(b+o, s-o, "\t   0:high level, reset all TPM configuration and reset TPM to none started state\n");
+	o += scnprintf(b+o, s-o, "\t   1: medium level, reset all TPM configuration including parser config\n");
+	o += scnprintf(b+o, s-o, "\t   2: low level, reset TPM configuration except parser config\n");
+	return o;
 }
 
 /******************************************************************************/
@@ -246,12 +250,12 @@ void sfs_tpm_module_start(const char *buf, size_t len)
 		parsedargs = sscanf(buf, "%d", &cfg_flag);
 
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_module_start())
-				printk(KERN_INFO "\nTPM Start OK\n");
+				mvOsPrintf("\nTPM Start OK\n");
 			else
-				printk(KERN_INFO "\nTPM Start FAIL\n");
+				mvOsPrintf("\nTPM Start FAIL\n");
 		}
 	}
 }
@@ -290,7 +294,7 @@ void sfs_tpm_mib_reset(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &reset_level);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			tpm_ret = tpm_mib_reset(reset_level);
 			if (TPM_OK == tpm_ret)
@@ -338,7 +342,7 @@ void sfs_tpm_cfg_switch_mode_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			tpm_ret = tpm_init_switch_mode_set((enum tpm_gmacs_enum_t)port, (enum tpm_sw_head_mode_t)mode);
 			if (TPM_OK == tpm_ret)
@@ -386,7 +390,7 @@ void sfs_tpm_cfg_gmac_def_mh_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %x", &port, &mh);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			tpm_ret = tpm_init_gmac_def_mh_set((enum tpm_gmacs_enum_t)port, (unsigned short)mh);
 			if (TPM_OK == tpm_ret)
@@ -430,7 +434,7 @@ void sfs_tpm_cfg_switch_init_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &init);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_switch_init_set((enum tpm_sw_init_mode_t)init))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -481,7 +485,7 @@ void sfs_tpm_cfg_tpm_filter_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %x %d", &rule_type, &priority, &bm, &vlan_number);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_filter_type_set(rule_type, priority, bm, vlan_number))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -537,7 +541,7 @@ void sfs_tpm_cfg_tpm_capability_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %x %d %d %d", &type, &rule_type, &bm, &vlan_number, &pre, &hits);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			cap.rule_type = rule_type;
 			cap.field_match_bm = bm;
@@ -595,7 +599,7 @@ void sfs_tpm_cfg_tpm_capability_del(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %x %d %d", &type, &rule_type, &bm, &pre, &hits);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			cap.field_match_bm = bm;
 			cap.rule_type = rule_type;
@@ -643,7 +647,7 @@ void sfs_tpm_cfg_mc_data_handler_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &data_handle);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_mc_data_handler_set((enum tpm_traffic_handler_t)data_handle))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -688,7 +692,7 @@ void sfs_tpm_cfg_mc_flow_default_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &mc_layer, &mc_default);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_mc_flow_default_set(mc_layer, (enum tpm_mc_flow_def_action_t)mc_default))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -735,7 +739,7 @@ void sfs_tpm_cfg_mc_proto_handler_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%x %d", &port, &handler);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			mc_handler.port = (enum tpm_pp_port_t)port;
 			mc_handler.mc_proto_handler = (enum tpm_traffic_handler_t)handler;
@@ -781,7 +785,7 @@ void sfs_tpm_cfg_mc_sw_handler_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &sw_handle);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_mc_sw_handler_set((enum tpm_mc_switch_handler_t)sw_handle))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -825,7 +829,7 @@ void sfs_tpm_cfg_uni_port_num_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &num);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_uni_port_num_set(num))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -869,7 +873,7 @@ void sfs_tpm_cfg_ipv6_support_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &ipv6_support);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_ipv6_support_set((enum tpm_ipv6_support_t)ipv6_support))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -913,7 +917,7 @@ void sfs_tpm_cfg_cpu_trap_queue_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &queue);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_cpu_trap_queue_set(queue))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -957,7 +961,7 @@ void sfs_tpm_cfg_ttl_illegal_action_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &action);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_ttl_illegal_action_set((enum tpm_ttl_illegal_action_t)action))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -1001,7 +1005,7 @@ void sfs_tpm_cfg_bad_chksum_action_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &action);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_bad_chksum_action_set((enum tpm_bad_chksum_action_t)action))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -1046,7 +1050,7 @@ void sfs_tpm_cfg_mod_vlan_tpid_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%x", &tpid);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_mod_vlan_tpid_set((unsigned short)tpid))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -1093,7 +1097,7 @@ void sfs_tpm_cfg_tpid_combo_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%x %x", &tpid1, &tpid2);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			tpid_combo.tpid1 = (unsigned short)tpid1;
 			tpid_combo.tpid2 = (unsigned short)tpid2;
@@ -1143,7 +1147,7 @@ void sfs_tpm_cfg_tpid_combo_del(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%x %x", &tpid1, &tpid2);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			tpid_combo.tpid1 = (unsigned short)tpid1;
 			tpid_combo.tpid2 = (unsigned short)tpid2;
@@ -1190,7 +1194,7 @@ void sfs_tpm_cfg_tcp_flag_check_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &flag_check);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_tcp_flag_check_set((enum tpm_tcp_flag_check_t)flag_check))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -1234,7 +1238,7 @@ void sfs_tpm_cfg_trace_debug_flag_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%x", &trace_debug_flag);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_trace_debug_flag_set(trace_debug_flag))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -1278,7 +1282,7 @@ void sfs_tpm_cfg_qos_tbl_ext_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%x", &qos_tbl_ext);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_qos_tbl_ext_set((enum tpm_qos_tbl_owner_t)qos_tbl_ext))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -1322,7 +1326,7 @@ void sfs_tpm_cfg_cnm_support_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &cnm_support);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_init_cnm_support_set((enum tpm_init_cnm_mode_t)cnm_support))
 				TPM_OS_INFO(TPM_SYSFS_MOD, "OK\n")
@@ -1393,15 +1397,15 @@ int sfs_tpm_capability_dump(char *buf)
 	int ret_code = TPM_OK;
 
 	/* Dump Exact match and exception handling capability */
-	printk(KERN_INFO "Exact match and exception handling capability\n");
-	printk(KERN_INFO "-------------------------------------------------------------------\n");
-	printk(KERN_INFO "Capability   rule_type  field_bm   vlan_num  precedence max_port_hits   field_bm_str\n");
+	mvOsPrintf("Exact match and exception handling capability\n");
+	mvOsPrintf("-------------------------------------------------------------------\n");
+	mvOsPrintf("Capability   rule_type  field_bm   vlan_num  precedence max_port_hits   field_bm_str\n");
 	for (index = 0; index < TPM_NUM_MAX_CAPABILITIES; index++) {
 		ret_code = tpm_db_init_capability_get(TPM_CAP_TYPE_EXACT_EXCEPT, index, &cap);
 		IF_ERROR_STR(TPM_SYSFS_MOD, ret_code, "failed to get capability\n");
 
 		if (cap.valid == TPM_TRUE)
-			printk(KERN_INFO "%5d     %7d       0x%08x    %1.1d         %2.2d            %1.1d          %s",
+			mvOsPrintf("%5d     %7d       0x%08x    %1.1d         %2.2d            %1.1d          %s",
 			       index, cap.rule_type, cap.field_match_bm, cap.tag_num, cap.precedence, cap.max_port_hits,
 			       tpm_sysfs_capbility_field_get(cap.field_match_bm));
 		else
@@ -1409,15 +1413,15 @@ int sfs_tpm_capability_dump(char *buf)
 	}
 
 	/* Dump generic classifier capability */
-	printk(KERN_INFO "\nGeneric classifier capability\n");
-	printk(KERN_INFO "-------------------------------------------------------------------\n");
-	printk(KERN_INFO "Capability   rule_type  field_bm   vlan_num  precedence   max_port_hits   field_bm_str\n");
+	mvOsPrintf("\nGeneric classifier capability\n");
+	mvOsPrintf("-------------------------------------------------------------------\n");
+	mvOsPrintf("Capability   rule_type  field_bm   vlan_num  precedence   max_port_hits   field_bm_str\n");
 	for (index = 0; index < TPM_NUM_MAX_CAPABILITIES; index++) {
 		ret_code = tpm_db_init_capability_get(TPM_CAP_TYPE_CLS, index, &cap);
 		IF_ERROR_STR(TPM_SYSFS_MOD, ret_code, "failed to get capability\n");
 
 		if (cap.valid == TPM_TRUE)
-			printk(KERN_INFO "%5d     %7d       0x%08x    %1.1d         %2.2d            %1.1d          %s",
+			mvOsPrintf("%5d     %7d       0x%08x    %1.1d         %2.2d            %1.1d          %s",
 			       index, cap.rule_type, cap.field_match_bm, cap.tag_num, cap.precedence, cap.max_port_hits,
 			       tpm_sysfs_capbility_field_get(cap.field_match_bm));
 		else
@@ -1444,15 +1448,15 @@ int sfs_tpm_filter_dump(char *buf)
 	int ret_code = TPM_OK;
 
 	/* Dump Exact match and exception handling filter */
-	printk(KERN_INFO "filters that have been configured:\n");
-	printk(KERN_INFO "-------------------------------------------------------------------\n");
-	printk(KERN_INFO "Index   rule_type  field_bm   vlan_num  precedence   field_bm_str\n");
+	mvOsPrintf("filters that have been configured:\n");
+	mvOsPrintf("-------------------------------------------------------------------\n");
+	mvOsPrintf("Index   rule_type  field_bm   vlan_num  precedence   field_bm_str\n");
 	for (index = 0; index < TPM_NUM_MAX_FILTER_TYPE; index++) {
 		ret_code = tpm_db_init_filter_type_get(index, &filter);
 		IF_ERROR_STR(TPM_SYSFS_MOD, ret_code, "failed to get filter\n");
 
 		if (filter.valid == TPM_TRUE)
-			printk(KERN_INFO "%3d     %6d     0x%08x     %1.1d         %2.2d        %s",
+			mvOsPrintf("%3d     %6d     0x%08x     %1.1d         %2.2d        %s",
 			       index, filter.rule_type, filter.field_match_bm, filter.tag_num,
 			       filter.precedence, tpm_sysfs_capbility_field_get(filter.field_match_bm));
 		else
@@ -1484,146 +1488,146 @@ int sfs_tpm_init_cfg_dump(char *buf)
 	struct tpm_tpid_combo_t tpid_combo;
 	int ret_code = TPM_OK;
 
-	printk(KERN_INFO "TPM init module configuration\n");
-	printk(KERN_INFO "----------------------------------------------------\n\n");
-	printk(KERN_INFO "TPM module state: %s\n\n",
+	mvOsPrintf("TPM init module configuration\n");
+	mvOsPrintf("----------------------------------------------------\n\n");
+	mvOsPrintf("TPM module state: %s\n\n",
 		tpm_init_lookup_enum_str(TPM_INIT_ENUM_MODULE_STATE, tpm_db_module_state_get()));
 
 	/* Dump GMAC switch mode */
-	printk(KERN_INFO "GMAC switch mode:\n");
-	printk(KERN_INFO "------------------------\n");
+	mvOsPrintf("GMAC switch mode:\n");
+	mvOsPrintf("------------------------\n");
 	for (index = 0; index < TPM_NUM_ETH_GMACS; index++) {
 		sw_head_mode = tpm_db_init_switch_mode_get(index);
-		printk(KERN_INFO "GMAC%d: %s\n",
+		mvOsPrintf("GMAC%d: %s\n",
 			index, tpm_init_lookup_enum_str(TPM_INIT_ENUM_SWITCH_MODE, sw_head_mode));
 	}
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump GMAC default TX MH */
-	printk(KERN_INFO "GMAC  default TX MH:\n");
-	printk(KERN_INFO "------------------------\n");
+	mvOsPrintf("GMAC  default TX MH:\n");
+	mvOsPrintf("------------------------\n");
 	for (index = 0; index < TPM_NUM_ETH_GMACS; index++) {
 		mh = tpm_db_init_gmac_def_mh_get(index);
-		printk(KERN_INFO "GMAC%d: 0x%x\n", index, mh);
+		mvOsPrintf("GMAC%d: 0x%x\n", index, mh);
 	}
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump switch init mode */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_SWITCH_INIT, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "switch init mode: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_SWITCH_INIT, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("switch init mode: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_SWITCH_INIT, value));
+	mvOsPrintf("\n");
 
 	/* Dump L2 multicast flow default action */
 	ret_code = tpm_db_init_mc_flow_def_get(TPM_MC_TRAFFIC_L2, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "L2 multicast flow default action: %s\n",
+	mvOsPrintf("L2 multicast flow default action: %s\n",
 		tpm_init_lookup_enum_str(TPM_INIT_ENUM_MC_DEF_ACTION, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump L3 multicast flow default action */
 	ret_code = tpm_db_init_mc_flow_def_get(TPM_MC_TRAFFIC_L3, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "L3 multicast flow default action: %s\n",
+	mvOsPrintf("L3 multicast flow default action: %s\n",
 		tpm_init_lookup_enum_str(TPM_INIT_ENUM_MC_DEF_ACTION, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump multicast protocol handler */
-	printk(KERN_INFO "multicast protocol handler:\n");
-	printk(KERN_INFO "------------------------\n");
+	mvOsPrintf("multicast protocol handler:\n");
+	mvOsPrintf("------------------------\n");
 	for (index = 0; index < TPM_NUM_MAX_GMAC_PORTS; index++) {
 		ret_code = tpm_db_init_mc_proto_handler_get(index, &mc_handler);
 		IF_ERROR(TPM_SYSFS_MOD, ret_code);
-		printk(KERN_INFO "PP port(0x%x): %s\n", mc_handler.port,
+		mvOsPrintf("PP port(0x%x): %s\n", mc_handler.port,
 			tpm_init_lookup_enum_str(TPM_INIT_ENUM_MC_HANDLER, mc_handler.mc_proto_handler));
 	}
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump multicast swicth cfg handler */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_MC_SW_HANDLE, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "MC swicth cfg handler: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_SW_HANDLER, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("MC swicth cfg handler: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_SW_HANDLER, value));
+	mvOsPrintf("\n");
 
 	/* Dump UNI ports */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_MAX_UNI_NUM, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "UNI ports number: %d\n", value);
-	printk(KERN_INFO "\n");
+	mvOsPrintf("UNI ports number: %d\n", value);
+	mvOsPrintf("\n");
 
 	/* Dump IPv6 support */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_IPV6_SUPPORT, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "IPv6 support: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_IPV6_SUPPORT, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("IPv6 support: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_IPV6_SUPPORT, value));
+	mvOsPrintf("\n");
 
 	/* Dump CPU trap RX queue */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_CPU_RX_QUEUE, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "CPU trap RX queue: %d\n", value);
-	printk(KERN_INFO "\n");
+	mvOsPrintf("CPU trap RX queue: %d\n", value);
+	mvOsPrintf("\n");
 
 	/* Dump TTL zero illegal action */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_TTL_ILLEGAL_ACTION, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "TTL zero illegal action : %s\n",
+	mvOsPrintf("TTL zero illegal action : %s\n",
 		tpm_init_lookup_enum_str(TPM_INIT_ENUM_TTL_ILLEGAL_ACTION, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump bad checksum action */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_BAD_CHKSUM_ACTION, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "Bad checksum action : %s\n",
+	mvOsPrintf("Bad checksum action : %s\n",
 		tpm_init_lookup_enum_str(TPM_INIT_ENUM_TTL_ILLEGAL_ACTION, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump MOD TPID */
-	printk(KERN_INFO "MOD TPID:\n");
-	printk(KERN_INFO "------------------------\n");
+	mvOsPrintf("MOD TPID:\n");
+	mvOsPrintf("------------------------\n");
 	for (index = 0; index < TPM_NUM_MAX_GMAC_PORTS; index++) {
 		ret_code = tpm_db_init_mod_tpid_get(index, &tpid);
 		IF_ERROR(TPM_SYSFS_MOD, ret_code);
-		printk(KERN_INFO "TPID %d: 0x%0x\n", index, tpid);
+		mvOsPrintf("TPID %d: 0x%0x\n", index, tpid);
 	}
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump TPID combo */
-	printk(KERN_INFO "TPID combo:\n");
-	printk(KERN_INFO "------------------------\n");
-	printk(KERN_INFO "combo index: tpid1   tpid2\n");
+	mvOsPrintf("TPID combo:\n");
+	mvOsPrintf("------------------------\n");
+	mvOsPrintf("combo index: tpid1   tpid2\n");
 	for (index = 0; index < TPM_NUM_MAX_TPID_COMBO; index++) {
 		ret_code = tpm_db_init_tpid_combo_get(index, &tpid_combo);
 		IF_ERROR(TPM_SYSFS_MOD, ret_code);
 		if (true == tpid_combo.valid)
-			printk(KERN_INFO "    %2.2d:       0x%0x  0x%0x\n", index, tpid_combo.tpid1, tpid_combo.tpid2);
+			mvOsPrintf("    %2.2d:       0x%0x  0x%0x\n", index, tpid_combo.tpid1, tpid_combo.tpid2);
 		else
 			continue;
 	}
-	printk(KERN_INFO "\n");
+	mvOsPrintf("\n");
 
 	/* Dump TCP flag check */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_TCP_FLAG_CHECK, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "TCP flag check: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_TCP_FLAG_CHECK, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("TCP flag check: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_TCP_FLAG_CHECK, value));
+	mvOsPrintf("\n");
 
 	/* Dump trace and debug flag */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_TRACE_DEBUG_FLAG, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "trace and debug flag: 0x%0x\n", value);
-	printk(KERN_INFO "\n");
+	mvOsPrintf("trace and debug flag: 0x%0x\n", value);
+	mvOsPrintf("\n");
 
 	/* Dump QoS table ext */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_QOS_TABLE_EXT, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "QoS table ext: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_QOS_TABLE_OWNER, value));
-	printk(KERN_INFO "\n");
+	mvOsPrintf("QoS table ext: %s\n", tpm_init_lookup_enum_str(TPM_INIT_ENUM_QOS_TABLE_OWNER, value));
+	mvOsPrintf("\n");
 
 	/* Dump cnm support */
 	ret_code = tpm_db_generic_param_get(TPM_DB_PARAM_CNM_SUPPORT, &value);
 	IF_ERROR(TPM_SYSFS_MOD, ret_code);
-	printk(KERN_INFO "cnm support: %d\n", value);
-	printk(KERN_INFO "\n");
+	mvOsPrintf("cnm support: %d\n", value);
+	mvOsPrintf("\n");
 
 	return off;
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mc.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mc.c
index 92d453e..c4fdd0c 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mc.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mc.c
@@ -51,20 +51,21 @@ disclaimer.
 *       buf - Shell parameters as char buffer
 *       len - Number of characters in buffer
 *******************************************************************************/
-static int sys_help_tpm_mc_debug_cmd(char *buf)
+static int sys_help_tpm_mc_debug_cmd(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [flow_id]  > dup_list_dump -  dump all entries in duplication list\n");
-	off += sprintf(buf+off, "\tflow_id        (dec)dup flow id, 0...255\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [flow_id]  > dup_list_dump -  dump all entries in duplication list\n");
+	o += scnprintf(b+o, s-o, "\tflow_id        (dec)dup flow id, 0...255\n");
 
-	off += sprintf(buf+off, "cat free_entry_dump         -  dump all free MCT entry index.\n");
-	off += sprintf(buf+off, "cat flow_id_dump            -  dump valid flow id of dup list.\n");
+	o += scnprintf(b+o, s-o, "cat free_entry_dump         -  dump all free MCT entry index.\n");
+	o += scnprintf(b+o, s-o, "cat flow_id_dump            -  dump valid flow id of dup list.\n");
 
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
 
-	return off;
+	return o;
 }
 
 /******************************************************************************/
@@ -87,7 +88,7 @@ static int sys_help_tpm_mc_debug_cmd(char *buf)
 void tpm_sfs_mc_entry_header_dump(void)
 {
 	print_horizontal_line(54, "=");
-	printk(KERN_INFO "= HW_IDX |       Mod_Info             | Act_Info     =\n");
+	mvOsPrintf("= HW_IDX |       Mod_Info             | Act_Info     =\n");
 	print_horizontal_line(54, "=");
 }
 
@@ -126,39 +127,39 @@ void tpm_sfs_valid_mc_entry_line_dump(unsigned int hw_idx)
 		return;
 
 	/* Print idx */
-	printk(KERN_INFO "+  %3d   ", hw_idx);
+	mvOsPrintf("+  %3d   ", hw_idx);
 	/* Print mod pointer */
-	printk(KERN_INFO "| Dptr: %3d, Iptr: %5d     ",
+	mvOsPrintf("| Dptr: %3d, Iptr: %5d     ",
 		mct_entry.mct_mod.pkt_mod.mod_data_idx, mct_entry.mct_mod.pkt_mod.mod_cmd_idx);
 	/* Print Queue */
-	printk(KERN_INFO "| Queue: 0x%2x  ", mct_entry.action.queue);
+	mvOsPrintf("| Queue: 0x%2x  ", mct_entry.action.queue);
 
-	printk(KERN_INFO "+\n");
+	mvOsPrintf("+\n");
 
 	/* Print Gemport ID mod */
-	printk(KERN_INFO "+        ");
-	printk(KERN_INFO "| GEM_mod: %s, New_GEM: %3d ", tpm_utils_valid_str_get(mct_entry.mct_mod.gem_mod_en),
+	mvOsPrintf("+        ");
+	mvOsPrintf("| GEM_mod: %s, New_GEM: %3d ", tpm_utils_valid_str_get(mct_entry.mct_mod.gem_mod_en),
 					   mct_entry.mct_mod.gem);
 	/* Print frwd */
-	printk(KERN_INFO "| FRWD: %s ", tpm_utils_mc_frwd_str_get(mct_entry.action.frwd));
+	mvOsPrintf("| FRWD: %s ", tpm_utils_mc_frwd_str_get(mct_entry.action.frwd));
 
-	printk(KERN_INFO "+\n");
+	mvOsPrintf("+\n");
 
 	/* Print Pri mod */
-	printk(KERN_INFO "+        ");
-	printk(KERN_INFO "| PRI_mod: %s, New_PRI: %d   ", tpm_utils_valid_str_get(mct_entry.mct_mod.pri_mod_en),
+	mvOsPrintf("+        ");
+	mvOsPrintf("| PRI_mod: %s, New_PRI: %d   ", tpm_utils_valid_str_get(mct_entry.mct_mod.pri_mod_en),
 					   mct_entry.mct_mod.pri);
 
 	/* Print Next Index */
-	printk(KERN_INFO "| Next: %3d    ", mct_entry.action.next_mcti);
+	mvOsPrintf("| Next: %3d    ", mct_entry.action.next_mcti);
 
-	printk(KERN_INFO "+\n");
+	mvOsPrintf("+\n");
 
 	/* Print DSCP mod */
-	printk(KERN_INFO "+        ");
-	printk(KERN_INFO "| DSCP_mod: %s, New_DSCP: %2d", tpm_utils_valid_str_get(mct_entry.mct_mod.dscp_mod_en),
+	mvOsPrintf("+        ");
+	mvOsPrintf("| DSCP_mod: %s, New_DSCP: %2d", tpm_utils_valid_str_get(mct_entry.mct_mod.dscp_mod_en),
 					      mct_entry.mct_mod.dscp);
-	printk(KERN_INFO "|              +\n");
+	mvOsPrintf("|              +\n");
 
 	print_horizontal_line(54, "-");
 }
@@ -185,11 +186,11 @@ void tpm_sfs_mc_dup_list_dump(unsigned int flow_id)
 	/* Get list head */
 	dup_list_head = tpm_db_mc_dup_list_head_get(flow_id);
 	if (dup_list_head == NULL) {
-		printk(KERN_INFO "Dup list head get fail\n");
+		mvOsPrintf("Dup list head get fail\n");
 		return;
 	}
 	if (list_empty(dup_list_head)) {
-		printk(KERN_INFO "Dup list empty\n");
+		mvOsPrintf("Dup list empty\n");
 		return;
 	}
 	list_for_each_entry(mct_index_node, dup_list_head, list_node) {
@@ -213,7 +214,7 @@ void tpm_sfs_mc_dup_list_dump(unsigned int flow_id)
 static void tpm_print_free_mc_entry_dump_head(void)
 {
 	print_horizontal_line(67, "=");
-	printk(KERN_INFO "=    TOTAL    |                FREE_ENTRY_IDX                     =\n");
+	mvOsPrintf("=    TOTAL    |                FREE_ENTRY_IDX                     =\n");
 	print_horizontal_line(67, "=");
 }
 
@@ -233,7 +234,7 @@ static void tpm_print_free_mc_entry_dump_head(void)
 static void tpm_print_mc_flowid_dump_head(void)
 {
 	print_horizontal_line(67, "=");
-	printk(KERN_INFO "=    TOTAL    |                FLOW_ID_ARRAY                      =\n");
+	mvOsPrintf("=    TOTAL    |                FLOW_ID_ARRAY                      =\n");
 	print_horizontal_line(67, "=");
 }
 
@@ -284,19 +285,19 @@ static void tpm_print_mc_index_dump_line(unsigned int common_int,
 				mct_idx_str[j] = 0;
 			if (first_line) {
 				first_line = false;
-				printk(KERN_INFO "+    %4s     |     %40s      +\n", common_str, mct_idx_str);
+				mvOsPrintf("+    %4s     |     %40s      +\n", common_str, mct_idx_str);
 			} else {
-				printk(KERN_INFO "+    %4s     |     %40s      +\n", "", mct_idx_str);
+				mvOsPrintf("+    %4s     |     %40s      +\n", "", mct_idx_str);
 			}
 		} else {
 			if (first_line) {
 				first_line = false;
 				if (entry_cnt)
-					printk(KERN_INFO "+    %4s     |     %40s      +\n", common_str, mct_idx_str);
+					mvOsPrintf("+    %4s     |     %40s      +\n", common_str, mct_idx_str);
 				else
-					printk(KERN_INFO "+    %4s     |     %40s      +\n", common_str, "NA");
+					mvOsPrintf("+    %4s     |     %40s      +\n", common_str, "NA");
 			} else {
-				printk(KERN_INFO "+    %4s     |     %40s      +\n", "", mct_idx_str);
+				mvOsPrintf("+    %4s     |     %40s      +\n", "", mct_idx_str);
 			}
 		}
 	}
@@ -390,7 +391,7 @@ static void sfs_tpm_mc_dup_list_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &flow_id);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else
 			tpm_sfs_mc_dup_list_dump(flow_id);
 	}
@@ -459,10 +460,10 @@ static void sfs_tpm_mc_dup_list_del(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &flow_id);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			tpm_mc_dup_list_release(flow_id);
-			printk(KERN_INFO "OK.\n");
+			mvOsPrintf("OK.\n");
 		}
 	}
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mng.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mng.c
index 39c139b..c4bc8c7 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mng.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_mng.c
@@ -68,7 +68,7 @@ static int tpm_sfs_cap_dump_all(char *buf)
 
 	init_state = tpm_db_module_state_get();
 	if (!init_state) {
-		printk(KERN_INFO "tpm not ready yet\n");
+		mvOsPrintf("tpm not ready yet\n");
 		return TPM_OK;
 	}
 
@@ -76,7 +76,7 @@ static int tpm_sfs_cap_dump_all(char *buf)
 	IF_ERROR_STR(TPM_INIT_MOD, tpm_ret, "get ipv6 enable failed\n");
 
 
-	printk(KERN_INFO "ID flow_name                    cls_pri engine lu_type cap_type          C2_pri field_bm   C2_field_bm  vlan_num   rule_type\n");
+	mvOsPrintf("ID flow_name                    cls_pri engine lu_type cap_type          C2_pri field_bm   C2_field_bm  vlan_num   rule_type\n");
 	/* for all the flow, print cap */
 	for (flow_id = 0; flow_id < TPM_MNG_FLOW_ID_MAX; flow_id++) {
 		if ((flow_id >= TPM_MNG_FLOW_ID_IPV6_START)
@@ -88,14 +88,14 @@ static int tpm_sfs_cap_dump_all(char *buf)
 		IF_ERROR_STR(TPM_INIT_MOD, tpm_ret, "get CAPs failed for flow_id(%d)\n", flow_id);
 
 
-		printk(KERN_INFO "%-2d %-28s ", flow_id, tpm_utils_flow_id_str_get(flow_id));
+		mvOsPrintf("%-2d %-28s ", flow_id, tpm_utils_flow_id_str_get(flow_id));
 		for (i = 0; i < cap_num; i++) {
 			if (i != 0)
-				printk(KERN_INFO "\t\t\t\t");
+				mvOsPrintf("\t\t\t\t");
 
 			TPM_MNG_FLOW_CAP_PRINT(&(cap_arr[i]));
 		}
-		printk(KERN_INFO "\n");
+		mvOsPrintf("\n");
 	}
 	return off;
 }
@@ -108,71 +108,72 @@ static int tpm_sfs_cap_dump_all(char *buf)
 * INPUTS:
 *       buf     - Shell parameters as char buffer
 *******************************************************************************/
-static int tpm_sfs_mng_help(char *buf)
+static int tpm_sfs_mng_help(char *b)
 {
-	int off = 0;
-
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [api_type]  > api_type_data_dump -  dump all rules of api_type\n");
-	off += sprintf(buf+off, "\tapi_type	   (dec)api_type of all the rules need to dump\n");
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PUBLIC_CLS)        , TPM_API_PUBLIC_CLS);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PUBLIC_EXCT_EXCPT) , TPM_API_PUBLIC_EXCT_EXCPT);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_CNM)        , TPM_API_PRIVATE_CNM);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PUBLIC_FLTR)       , TPM_API_PUBLIC_FLTR);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_CLS)       , TPM_API_PRIVATE_CLS);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_EXCT)      , TPM_API_PRIVATE_EXCT);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_EXCT_DEFAULT), TPM_API_PRIVATE_EXCT_DEFAULT);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_MC_US)     , TPM_API_PRIVATE_MC_US);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_MC_DS)    , TPM_API_PRIVATE_MC_DS);
-	off += sprintf(buf+off, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_CPU_Q)    , TPM_API_PRIVATE_CPU_Q);
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "cat cap_conf_dump_all	       -  dump all capabilities within each Flow\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "cat virt_pid_dump_all	       -  dump all virt_id gemport information.\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "cat api_data_dump_all	       -  dump all api rules.\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "cat cap_dump_all	       -  dump all capabilities that have been configured\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "echo [delay_sec] [hit_low_thresh] [hw_dump]  > api_live_dump -  dump api rules with HW hits\n");
-	off += sprintf(buf+off, "\tdelay_sec	   (dec)number of seconds to wait for HW hits\n");
-	off += sprintf(buf+off, "\thit_low_thresh  (dec)minimal hit counter that will be printed, zero value will print all rules\n");
-	off += sprintf(buf+off, "\thw_dump         (dec)0: don't dump HW, 1:dump HW\n");
-	off += sprintf(buf+off, "\n");
-
-	off += sprintf(buf+off, "echo [trace_level]  > trace_level_set -  set TPM trace level\n");
-	off += sprintf(buf+off, "\ttrace_level	   (hex)contains module mask in bit 0-15, trace level in bit 16-31\n");
-
-	off += sprintf(buf+off, "\t\t TPM_FATAL_TRACE_LEVEL   : 0x%08x.\n", TPM_FATAL_TRACE_LEVEL);
-	off += sprintf(buf+off, "\t\t TPM_ERROR_TRACE_LEVEL   : 0x%08x.\n", TPM_ERROR_TRACE_LEVEL);
-	off += sprintf(buf+off, "\t\t TPM_WARN_TRACE_LEVEL    : 0x%08x.\n", TPM_WARN_TRACE_LEVEL);
-	off += sprintf(buf+off, "\t\t TPM_INFO_TRACE_LEVEL    : 0x%08x.\n", TPM_INFO_TRACE_LEVEL);
-	off += sprintf(buf+off, "\t\t TPM_DEBUG_TRACE_LEVEL   : 0x%08x.\n", TPM_DEBUG_TRACE_LEVEL);
-	off += sprintf(buf+off, "\t\t TPM_ALL_TRACE_LEVEL     : 0x%08x.\n\n", TPM_ALL_TRACE_LEVEL);
-
-	off += sprintf(buf+off, "\t\t TPM_PRS_MOD	   : 0x%08x.\n", TPM_PRS_MOD);
-	off += sprintf(buf+off, "\t\t TPM_CLS_MOD	   : 0x%08x.\n", TPM_CLS_MOD);
-	off += sprintf(buf+off, "\t\t TPM_C2_MOD	   : 0x%08x.\n", TPM_C2_MOD);
-	off += sprintf(buf+off, "\t\t TPM_C3_MOD	   : 0x%08x.\n", TPM_C3_MOD);
-	off += sprintf(buf+off, "\t\t TPM_C4_MOD	   : 0x%08x.\n", TPM_C4_MOD);
-	off += sprintf(buf+off, "\t\t TPM_PME_MOD	   : 0x%08x.\n", TPM_PME_MOD);
-	off += sprintf(buf+off, "\t\t TPM_QOS_MOD	   : 0x%08x.\n", TPM_QOS_MOD);
-	off += sprintf(buf+off, "\t\t TPM_SWITCH_MOD	   : 0x%08x.\n", TPM_SWITCH_MOD);
-	off += sprintf(buf+off, "\t\t TPM_API_MOD	   : 0x%08x.\n", TPM_API_MOD);
-	off += sprintf(buf+off, "\t\t TPM_INIT_MOD	   : 0x%08x.\n", TPM_INIT_MOD);
-	off += sprintf(buf+off, "\t\t TPM_MNG_MOD	   : 0x%08x.\n", TPM_MNG_MOD);
-	off += sprintf(buf+off, "\t\t TPM_DB_MOD	   : 0x%08x.\n", TPM_DB_MOD);
-	off += sprintf(buf+off, "\t\t TPM_SYSFS_MOD	   : 0x%08x.\n", TPM_SYSFS_MOD);
-	off += sprintf(buf+off, "\t\t TPM_COMMON_MOD	   : 0x%08x.\n", TPM_COMMON_MOD);
-	off += sprintf(buf+off, "\t\t TPM_IOCTL_MOD	   : 0x%08x.\n", TPM_IOCTL_MOD);
-	off += sprintf(buf+off, "\t\t TPM_ALL_MOD	   : 0x%08x.\n", TPM_ALL_MOD);
-
-	return off;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
+
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [api_type]  > api_type_data_dump -  dump all rules of api_type\n");
+	o += scnprintf(b+o, s-o, "\tapi_type	   (dec)api_type of all the rules need to dump\n");
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PUBLIC_CLS)        , TPM_API_PUBLIC_CLS);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PUBLIC_EXCT_EXCPT) , TPM_API_PUBLIC_EXCT_EXCPT);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_CNM)        , TPM_API_PRIVATE_CNM);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PUBLIC_FLTR)       , TPM_API_PUBLIC_FLTR);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_CLS)       , TPM_API_PRIVATE_CLS);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_EXCT)      , TPM_API_PRIVATE_EXCT);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_EXCT_DEFAULT), TPM_API_PRIVATE_EXCT_DEFAULT);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_MC_US)     , TPM_API_PRIVATE_MC_US);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_MC_DS)    , TPM_API_PRIVATE_MC_DS);
+	o += scnprintf(b+o, s-o, "\t\t%-20s: %d.\n", tpm_utils_cap_type_str_get(TPM_API_PRIVATE_CPU_Q)    , TPM_API_PRIVATE_CPU_Q);
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "cat cap_conf_dump_all	       -  dump all capabilities within each Flow\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "cat virt_pid_dump_all	       -  dump all virt_id gemport information.\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "cat api_data_dump_all	       -  dump all api rules.\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "cat cap_dump_all	       -  dump all capabilities that have been configured\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "echo [delay_sec] [hit_low_thresh] [hw_dump]  > api_live_dump -  dump api rules with HW hits\n");
+	o += scnprintf(b+o, s-o, "\tdelay_sec	   (dec)number of seconds to wait for HW hits\n");
+	o += scnprintf(b+o, s-o, "\thit_low_thresh  (dec)minimal hit counter that will be printed, zero value will print all rules\n");
+	o += scnprintf(b+o, s-o, "\thw_dump         (dec)0: don't dump HW, 1:dump HW\n");
+	o += scnprintf(b+o, s-o, "\n");
+
+	o += scnprintf(b+o, s-o, "echo [trace_level]  > trace_level_set -  set TPM trace level\n");
+	o += scnprintf(b+o, s-o, "\ttrace_level	   (hex)contains module mask in bit 0-15, trace level in bit 16-31\n");
+
+	o += scnprintf(b+o, s-o, "\t\t TPM_FATAL_TRACE_LEVEL   : 0x%08x.\n", TPM_FATAL_TRACE_LEVEL);
+	o += scnprintf(b+o, s-o, "\t\t TPM_ERROR_TRACE_LEVEL   : 0x%08x.\n", TPM_ERROR_TRACE_LEVEL);
+	o += scnprintf(b+o, s-o, "\t\t TPM_WARN_TRACE_LEVEL    : 0x%08x.\n", TPM_WARN_TRACE_LEVEL);
+	o += scnprintf(b+o, s-o, "\t\t TPM_INFO_TRACE_LEVEL    : 0x%08x.\n", TPM_INFO_TRACE_LEVEL);
+	o += scnprintf(b+o, s-o, "\t\t TPM_DEBUG_TRACE_LEVEL   : 0x%08x.\n", TPM_DEBUG_TRACE_LEVEL);
+	o += scnprintf(b+o, s-o, "\t\t TPM_ALL_TRACE_LEVEL     : 0x%08x.\n\n", TPM_ALL_TRACE_LEVEL);
+
+	o += scnprintf(b+o, s-o, "\t\t TPM_PRS_MOD	   : 0x%08x.\n", TPM_PRS_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_CLS_MOD	   : 0x%08x.\n", TPM_CLS_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_C2_MOD	   : 0x%08x.\n", TPM_C2_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_C3_MOD	   : 0x%08x.\n", TPM_C3_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_C4_MOD	   : 0x%08x.\n", TPM_C4_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_PME_MOD	   : 0x%08x.\n", TPM_PME_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_QOS_MOD	   : 0x%08x.\n", TPM_QOS_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_SWITCH_MOD	   : 0x%08x.\n", TPM_SWITCH_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_API_MOD	   : 0x%08x.\n", TPM_API_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_INIT_MOD	   : 0x%08x.\n", TPM_INIT_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_MNG_MOD	   : 0x%08x.\n", TPM_MNG_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_DB_MOD	   : 0x%08x.\n", TPM_DB_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_SYSFS_MOD	   : 0x%08x.\n", TPM_SYSFS_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_COMMON_MOD	   : 0x%08x.\n", TPM_COMMON_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_IOCTL_MOD	   : 0x%08x.\n", TPM_IOCTL_MOD);
+	o += scnprintf(b+o, s-o, "\t\t TPM_ALL_MOD	   : 0x%08x.\n", TPM_ALL_MOD);
+
+	return o;
 }
 
 /*******************************************************************************
@@ -188,60 +189,60 @@ static void tpm_sfs_api_data_entry_print(struct tpm_db_mng_api_data_t	*api_data)
 	int	i;
 	int	ip_version = 0;
 
-	printk(KERN_INFO "%-5s %-5d %-5d %-6s %6d ",
+	mvOsPrintf("%-5s %-5d %-5d %-6s %6d ",
 		tpm_utils_valid_str_get(api_data->valid),
 		api_data->api_rule_id,
 		api_data->policer_id,
 		tpm_utils_qos_type_str_get(api_data->qos.qos_sel),
 		api_data->qos.qos_tbl);
 
-	printk(KERN_INFO "c2: ");
+	mvOsPrintf("c2: ");
 	for (i = 0; i < TPM_DB_MNG_API_RULE_ENG_ENTRY_MAX; i++)
-		printk(KERN_INFO "%-5d ", api_data->c2_rule_id[i]);
+		mvOsPrintf("%-5d ", api_data->c2_rule_id[i]);
 
-	printk(KERN_INFO "c3: ");
+	mvOsPrintf("c3: ");
 	for (i = 0; i < TPM_DB_MNG_API_RULE_ENG_ENTRY_MAX; i++)
-		printk(KERN_INFO "%-5d ", api_data->c3_rule_id[i]);
+		mvOsPrintf("%-5d ", api_data->c3_rule_id[i]);
 
 	for (i = 0; i < api_data->num_dest; i++) {
-		printk(KERN_INFO "Modification[%d]:\n", i);
-		printk(KERN_INFO "mod_cmd: ");
-		printk(KERN_INFO "%-5d ", api_data->pkt_mod[i].mod_cmd_idx);
-		printk(KERN_INFO "mod_data: ");
-		printk(KERN_INFO "%-5d ", api_data->pkt_mod[i].mod_data_idx);
-		printk(KERN_INFO "mod_l4_cksum: ");
-		printk(KERN_INFO "%-5d ", api_data->pkt_mod[i].l4_chksum_update_flag);
+		mvOsPrintf("Modification[%d]:\n", i);
+		mvOsPrintf("mod_cmd: ");
+		mvOsPrintf("%-5d ", api_data->pkt_mod[i].mod_cmd_idx);
+		mvOsPrintf("mod_data: ");
+		mvOsPrintf("%-5d ", api_data->pkt_mod[i].mod_data_idx);
+		mvOsPrintf("mod_l4_cksum: ");
+		mvOsPrintf("%-5d ", api_data->pkt_mod[i].l4_chksum_update_flag);
 	}
 
-	printk(KERN_INFO "\n\t");
+	mvOsPrintf("\n\t");
 
 	for (i = 0; i < TPM_DB_MNG_API_RULE_FLOW_ENTRY_MAX; i++)
-		printk(KERN_INFO "%-5d ", api_data->flow_rule_id[i]);
+		mvOsPrintf("%-5d ", api_data->flow_rule_id[i]);
 
-	printk(KERN_INFO "\n\t");
+	mvOsPrintf("\n\t");
 
-	printk(KERN_INFO "%pM %pM ", api_data->match_key.eth_src.eth_add,
+	mvOsPrintf("%pM %pM ", api_data->match_key.eth_src.eth_add,
 		api_data->match_key.eth_dst.eth_add);
-	printk(KERN_INFO "0x%08X 0x%04X %6d %06d",
+	mvOsPrintf("0x%08X 0x%04X %6d %06d",
 		api_data->match_key.field_match_bm,
 		api_data->match_key.ether_type,
 		api_data->match_key.inn_pbit,
 		api_data->match_key.inn_vid);
 
 
-	printk(KERN_INFO "\n\t");
+	mvOsPrintf("\n\t");
 
-	printk(KERN_INFO "%pM %pM ", api_data->match_key.eth_src.eth_add_mask,
+	mvOsPrintf("%pM %pM ", api_data->match_key.eth_src.eth_add_mask,
 		api_data->match_key.eth_dst.eth_add_mask);
 
-	printk(KERN_INFO "%10d %-7s       %6d %06d",
+	mvOsPrintf("%10d %-7s       %6d %06d",
 		api_data->match_key.port.class_port,
 		tpm_utils_port_class_str_get(api_data->match_key.port.port_type),
 		api_data->match_key.out_pbit,
 		api_data->match_key.out_vid);
 
 
-	printk(KERN_INFO "\n\t");
+	mvOsPrintf("\n\t");
 
 	if (api_data->match_key.field_match_bm & TPM_MATCH_IPV4_PKT)
 		ip_version = IPV4_VER;
@@ -251,45 +252,45 @@ static void tpm_sfs_api_data_entry_print(struct tpm_db_mng_api_data_t	*api_data)
 		ip_version = 0;
 
 	if (ip_version == IPV4_VER) {
-		printk(KERN_INFO "IPv4:%pi4 %pi4", api_data->match_key.ipvx_add.ip_src.ip_add.ipv4,
+		mvOsPrintf("IPv4:%pi4 %pi4", api_data->match_key.ipvx_add.ip_src.ip_add.ipv4,
 			api_data->match_key.ipvx_add.ip_dst.ip_add.ipv4);
 	} else if (ip_version == IPV6_VER) {
-		printk(KERN_INFO "IPv6:%pI6 %pI6", api_data->match_key.ipvx_add.ip_src.ip_add.ipv6,
+		mvOsPrintf("IPv6:%pI6 %pI6", api_data->match_key.ipvx_add.ip_src.ip_add.ipv6,
 			api_data->match_key.ipvx_add.ip_dst.ip_add.ipv6);
 	} else
-		printk(KERN_INFO "NA \t\t\t NA");
+		mvOsPrintf("NA \t\t\t NA");
 
-	printk(KERN_INFO "\n\t");
+	mvOsPrintf("\n\t");
 
 	if (ip_version == IPV4_VER) {
-		printk(KERN_INFO "IPv4:%pi4 %pi4 ", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv4,
+		mvOsPrintf("IPv4:%pi4 %pi4 ", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv4,
 			api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv4);
 	} else if (ip_version == IPV6_VER) {
-		printk(KERN_INFO "IPv6:%pI6 %pI6 ", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv6,
+		mvOsPrintf("IPv6:%pI6 %pI6 ", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv6,
 			api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv6);
 	} else
-		printk(KERN_INFO "NA \t\t\t NA");
+		mvOsPrintf("NA \t\t\t NA");
 
-	printk(KERN_INFO "\n\t");
-	printk(KERN_INFO "%06d %06d %8d  0x%08X %05d",
+	mvOsPrintf("\n\t");
+	mvOsPrintf("%06d %06d %8d  0x%08X %05d",
 		api_data->match_key.ipvx_add.ip_proto,
 		ip_version,
 		api_data->match_key.ipvx_add.dscp,
 		api_data->match_key.ipvx_add.flow_label,
 		api_data->match_key.l4_src);
 
-	printk(KERN_INFO "\n\t");
-	printk(KERN_INFO "%06d %06d %8d  0x%08X %05d",
+	mvOsPrintf("\n\t");
+	mvOsPrintf("%06d %06d %8d  0x%08X %05d",
 		api_data->match_key.ppp_info.ppp_proto,
 		api_data->match_key.ppp_info.ppp_session,
 		api_data->match_key.ipvx_add.dscp_mask,
 		api_data->match_key.ipvx_add.flow_label_mask,
 		api_data->match_key.l4_dst);
 
-	printk(KERN_INFO "\n\t");
+	mvOsPrintf("\n\t");
 	for (i = 0; i < api_data->num_dest; i++) {
-		printk(KERN_INFO "Action[%d]:\n", i);
-		printk(KERN_INFO "%-5s %5d %06d %-5s %3d\n",
+		mvOsPrintf("Action[%d]:\n", i);
+		mvOsPrintf("%-5s %5d %06d %-5s %3d\n",
 			tpm_utils_color_str_get((int)api_data->action[i].color),
 			api_data->action[i].dest.pon_tx,
 			api_data->action[i].dest.port_id,
@@ -312,26 +313,26 @@ static void tpm_sfs_api_info_print(struct tpm_db_mng_api_data_t	*api_data)
 	int	ip_version = 0;
 	int	i;
 
-	printk(KERN_INFO "API_INFO: rule_id[%d] valid[%s] plcr_id[%d] qos([%s] tbl[%d])",
+	mvOsPrintf("API_INFO: rule_id[%d] valid[%s] plcr_id[%d] qos([%s] tbl[%d])",
 		api_data->api_rule_id,
 		tpm_utils_valid_str_get(api_data->valid),
 		api_data->policer_id,
 		tpm_utils_qos_type_str_get(api_data->qos.qos_sel),
 		api_data->qos.qos_tbl);
 
-	printk(KERN_INFO "\n\tsmac_value:%pM", api_data->match_key.eth_src.eth_add);
-	printk(KERN_INFO " dmac_value:%pM", api_data->match_key.eth_dst.eth_add);
+	mvOsPrintf("\n\tsmac_value:%pM", api_data->match_key.eth_src.eth_add);
+	mvOsPrintf(" dmac_value:%pM", api_data->match_key.eth_dst.eth_add);
 
-	printk(KERN_INFO "\n\tsmac_mask: %pM", api_data->match_key.eth_src.eth_add_mask);
-	printk(KERN_INFO " dmac_mask :%pM", api_data->match_key.eth_dst.eth_add_mask);
+	mvOsPrintf("\n\tsmac_mask: %pM", api_data->match_key.eth_src.eth_add_mask);
+	mvOsPrintf(" dmac_mask :%pM", api_data->match_key.eth_dst.eth_add_mask);
 
-	printk(KERN_INFO "\n\tfield_match_bm:0x%X ether_type:0x%X in(pbit:%d vid:%d)",
+	mvOsPrintf("\n\tfield_match_bm:0x%X ether_type:0x%X in(pbit:%d vid:%d)",
 		api_data->match_key.field_match_bm,
 		api_data->match_key.ether_type,
 		api_data->match_key.inn_pbit,
 		api_data->match_key.inn_vid);
 
-	printk(KERN_INFO "\n\tclass(port:%d type:%s) out(pbit:%d vid:%d)",
+	mvOsPrintf("\n\tclass(port:%d type:%s) out(pbit:%d vid:%d)",
 		api_data->match_key.port.class_port,
 		tpm_utils_port_class_str_get(api_data->match_key.port.port_type),
 		api_data->match_key.out_pbit,
@@ -345,22 +346,22 @@ static void tpm_sfs_api_info_print(struct tpm_db_mng_api_data_t	*api_data)
 		ip_version = 0;
 
 	if (ip_version == IPV4_VER) {
-		printk(KERN_INFO "\n\tsipv4_value:%pi4 %pi4", api_data->match_key.ipvx_add.ip_src.ip_add.ipv4,
+		mvOsPrintf("\n\tsipv4_value:%pi4 %pi4", api_data->match_key.ipvx_add.ip_src.ip_add.ipv4,
 			api_data->match_key.ipvx_add.ip_dst.ip_add.ipv4);
 	} else if (ip_version == IPV6_VER) {
-		printk(KERN_INFO "\n\tsipv6_value:%pI6 %pI6", api_data->match_key.ipvx_add.ip_src.ip_add.ipv6,
+		mvOsPrintf("\n\tsipv6_value:%pI6 %pI6", api_data->match_key.ipvx_add.ip_src.ip_add.ipv6,
 			api_data->match_key.ipvx_add.ip_dst.ip_add.ipv6);
 	}
 
 	if (ip_version == IPV4_VER) {
-		printk(KERN_INFO "\n\tsipv4_mask :%pi4 %pi4", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv4,
+		mvOsPrintf("\n\tsipv4_mask :%pi4 %pi4", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv4,
 			api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv4);
 	} else if (ip_version == IPV6_VER) {
-		printk(KERN_INFO "\n\tsipv6_mask :%pI6 %pI6", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv6,
+		mvOsPrintf("\n\tsipv6_mask :%pI6 %pI6", api_data->match_key.ipvx_add.ip_src.ip_add_mask.ipv6,
 			api_data->match_key.ipvx_add.ip_dst.ip_add_mask.ipv6);
 	}
 
-	printk(KERN_INFO "\n\tip_prot:%d ip_ver:%d dscp:0x%x/0x%x l4_port(src:%d dst:%d)",
+	mvOsPrintf("\n\tip_prot:%d ip_ver:%d dscp:0x%x/0x%x l4_port(src:%d dst:%d)",
 		api_data->match_key.ipvx_add.ip_proto,
 		ip_version,
 		api_data->match_key.ipvx_add.dscp,
@@ -368,15 +369,15 @@ static void tpm_sfs_api_info_print(struct tpm_db_mng_api_data_t	*api_data)
 		api_data->match_key.l4_dst,
 		api_data->match_key.l4_src);
 
-	printk(KERN_INFO "\n\tppp(prot:%d ses%d) flow_lbl:0x%x/0x%x",
+	mvOsPrintf("\n\tppp(prot:%d ses%d) flow_lbl:0x%x/0x%x",
 		api_data->match_key.ppp_info.ppp_proto,
 		api_data->match_key.ppp_info.ppp_session,
 		api_data->match_key.ipvx_add.flow_label,
 		api_data->match_key.ipvx_add.flow_label_mask);
 
 	for (i = 0; i < api_data->num_dest; i++) {
-		printk(KERN_INFO "Action[%d]:\n", i);
-		printk(KERN_INFO "\n\tcol:%s pon_tx:%d port_id:%d port_port:%s pp_q:%d",
+		mvOsPrintf("Action[%d]:\n", i);
+		mvOsPrintf("\n\tcol:%s pon_tx:%d port_id:%d port_port:%s pp_q:%d",
 			tpm_utils_color_str_get((int)api_data->action[i].color),
 			api_data->action[i].dest.pon_tx,
 			api_data->action[i].dest.port_id,
@@ -396,16 +397,16 @@ static void tpm_sfs_api_info_print(struct tpm_db_mng_api_data_t	*api_data)
 *******************************************************************************/
 static void tpm_sfs_api_data_header_dump(void)
 {
-	printk(KERN_INFO "index  api_type\n");
-	printk(KERN_INFO "Valid apiId plcId qosType qosTbl c2_c3_mod_IDs\n");
-	printk(KERN_INFO "flow_rule_IDs\n");
-	printk(KERN_INFO "Key     src_mac           dst_mac           fld_mch_bm ethTyp in_pb  in_vid\n");
-	printk(KERN_INFO "\tsrc_mac_mask      dst_mac_mask      class_port  portTyp      out_pb out_vid\n");
-	printk(KERN_INFO "\tsrc_ip                  dst_ip\n");
-	printk(KERN_INFO "\tsrc_ip_mask             dst_ip_mask\n");
-	printk(KERN_INFO "\tipProt ver     dscp     flLbl    l4_src\n");
-	printk(KERN_INFO "\tpppProt pppSes dscpMask flLblMsk l4_dst\n");
-	printk(KERN_INFO "Action  Color ponTx portId ppPort ppQ\n");
+	mvOsPrintf("index  api_type\n");
+	mvOsPrintf("Valid apiId plcId qosType qosTbl c2_c3_mod_IDs\n");
+	mvOsPrintf("flow_rule_IDs\n");
+	mvOsPrintf("Key     src_mac           dst_mac           fld_mch_bm ethTyp in_pb  in_vid\n");
+	mvOsPrintf("\tsrc_mac_mask      dst_mac_mask      class_port  portTyp      out_pb out_vid\n");
+	mvOsPrintf("\tsrc_ip                  dst_ip\n");
+	mvOsPrintf("\tsrc_ip_mask             dst_ip_mask\n");
+	mvOsPrintf("\tipProt ver     dscp     flLbl    l4_src\n");
+	mvOsPrintf("\tpppProt pppSes dscpMask flLblMsk l4_dst\n");
+	mvOsPrintf("Action  Color ponTx portId ppPort ppQ\n");
 }
 
 /*******************************************************************************
@@ -427,7 +428,7 @@ static int tpm_sfs_api_type_data_dump_in(int cap_api_type)
 
 	init_state = tpm_db_module_state_get();
 	if (!init_state) {
-		printk(KERN_INFO "tpm not ready yet\n");
+		mvOsPrintf("tpm not ready yet\n");
 		return TPM_OK;
 	}
 
@@ -437,7 +438,7 @@ static int tpm_sfs_api_type_data_dump_in(int cap_api_type)
 
 	rc = tpm_db_mng_api_entry_type_first_get(cap_api_type, api_data);
 	if (TPM_OK != rc) {
-		printk(KERN_INFO "OK. No API rule so far\n");
+		mvOsPrintf("OK. No API rule so far\n");
 		/* release api data */
 		tpm_db_mng_api_data_release(api_data);
 		return off;
@@ -445,7 +446,7 @@ static int tpm_sfs_api_type_data_dump_in(int cap_api_type)
 
 	tpm_sfs_api_data_header_dump();
 
-	printk(KERN_INFO "%-4d %s\n", cap_api_type, tpm_utils_cap_type_str_get(api_data->cap_api_type));
+	mvOsPrintf("%-4d %s\n", cap_api_type, tpm_utils_cap_type_str_get(api_data->cap_api_type));
 
 	tpm_sfs_api_data_entry_print(api_data);
 
@@ -476,7 +477,7 @@ static int tpm_sfs_api_data_dump_all(char *buf)
 
 	init_state = tpm_db_module_state_get();
 	if (!init_state) {
-		printk(KERN_INFO "tpm not ready yet\n");
+		mvOsPrintf("tpm not ready yet\n");
 		return TPM_OK;
 	}
 
@@ -492,14 +493,14 @@ static int tpm_sfs_api_data_dump_all(char *buf)
 		if (TPM_OK != rc)
 			continue;
 
-		printk(KERN_INFO "%-4d %s\n", i, tpm_utils_cap_type_str_get(api_data->cap_api_type));
+		mvOsPrintf("%-4d %s\n", i, tpm_utils_cap_type_str_get(api_data->cap_api_type));
 
 		tpm_sfs_api_data_entry_print(api_data);
 
 		while (tpm_db_mng_api_entry_type_next_get(api_data) == TPM_OK)
 			tpm_sfs_api_data_entry_print(api_data);
 
-		printk(KERN_INFO "\n");
+		mvOsPrintf("\n");
 	}
 
 	/* release api data */
@@ -530,7 +531,7 @@ static void tpm_sfs_api_data_print(bool				*print_api_type,
 
 	if (*print_api_type == false) {
 		print_horizontal_line(80, "=");
-		printk(KERN_INFO "API type:%s\n", tpm_utils_cap_type_str_get(api_data->cap_api_type));
+		mvOsPrintf("API type:%s\n", tpm_utils_cap_type_str_get(api_data->cap_api_type));
 		print_horizontal_line(80, "=");
 		*print_api_type = true;
 	}
@@ -538,7 +539,7 @@ static void tpm_sfs_api_data_print(bool				*print_api_type,
 	if (*print_api_info == false) {
 		print_horizontal_line(60, "=");
 		tpm_sfs_api_info_print(api_data);
-		printk(KERN_INFO "\n");
+		mvOsPrintf("\n");
 		*print_api_info = true;
 	}
 }
@@ -605,7 +606,7 @@ void tpm_sfs_api_data_live_dump_c3(
 
 		rc = mvPp2ClsC3HwRead(&c3, c3_hw_i);
 		if (MV_OK != rc) {
-			printk(KERN_INFO "failed to read C3 entry from HW index %d\n", c3_hw_i);
+			mvOsPrintf("failed to read C3 entry from HW index %d\n", c3_hw_i);
 			return;
 		}
 
@@ -628,7 +629,7 @@ void tpm_sfs_api_data_live_dump_c3(
 			tpm_sfs_cls_rl_print(cls_i, flow, hw_dump);
 
 			print_horizontal_line(40, "=");
-			printk(KERN_INFO "C3_INFO:\n");
+			mvOsPrintf("C3_INFO:\n");
 
 			tpm_sfs_c3_entry_header_dump();
 
@@ -690,7 +691,7 @@ void tpm_sfs_api_data_live_dump_c2(
 		rc = tpm_c2_get_hw_idx_from_logic_idx(api_data->c2_rule_id[c2_i],
 							&c2_hw_i, &c2_db_i);
 		if (rc != TPM_OK) {
-			printk(KERN_INFO "tpm_c2_get_hw_idx_from_logic_idx err c2_rule_id[%d]=%d\n",
+			mvOsPrintf("tpm_c2_get_hw_idx_from_logic_idx err c2_rule_id[%d]=%d\n",
 				c2_i, api_data->c2_rule_id[c2_i]);
 			return;
 		}
@@ -700,7 +701,7 @@ void tpm_sfs_api_data_live_dump_c2(
 		TPM_MEMSET_ZERO(c2_data);
 		rc = tpm_db_c2_data_get(c2_db_i, &c2_data);
 		if (rc != TPM_OK) {
-			printk(KERN_INFO "tpm_db_c2_data_get err c2_db_i[%d]\n",
+			mvOsPrintf("tpm_db_c2_data_get err c2_db_i[%d]\n",
 				c2_db_i);
 			return;
 		}
@@ -721,7 +722,7 @@ void tpm_sfs_api_data_live_dump_c2(
 			tpm_sfs_cls_rl_print(cls_i, flow, hw_dump);
 
 			print_horizontal_line(40, "=");
-			printk(KERN_INFO "C2_INFO:\n");
+			mvOsPrintf("C2_INFO:\n");
 
 			tpm_sfs_valid_c2_entry_header_dump();
 
@@ -791,7 +792,7 @@ static void tpm_sfs_api_data_live_dump_lktype(int api_type, bool hw_dump)
 			/* get physical index from logical */
 			rc = tpm_db_cls_rl_off_get(&cls_i, api_data.flow_rule_id[flow_i]);
 			if (rc != TPM_OK) {
-				printk(KERN_INFO "tpm_db_cls_rl_off_get err for api_data.flow_rule_id[%d]=%d\n",
+				mvOsPrintf("tpm_db_cls_rl_off_get err for api_data.flow_rule_id[%d]=%d\n",
 					flow_i, api_data.flow_rule_id[flow_i]);
 				return;
 			}
@@ -799,7 +800,7 @@ static void tpm_sfs_api_data_live_dump_lktype(int api_type, bool hw_dump)
 			/* get containing flow information */
 			rc = tpm_db_cls_rl_off_lkp_dcod_get(cls_i, &lkp_dcod);
 			if (rc != TPM_OK) {
-				printk(KERN_INFO "tpm_db_cls_rl_off_lkp_dcod_get err for cls_i[%d]\n",
+				mvOsPrintf("tpm_db_cls_rl_off_lkp_dcod_get err for cls_i[%d]\n",
 					cls_i);
 				return;
 			}
@@ -813,7 +814,7 @@ static void tpm_sfs_api_data_live_dump_lktype(int api_type, bool hw_dump)
 							fl_rl_tot_cnt,
 							flow);
 			if (rc != TPM_OK) {
-				printk(KERN_INFO "tpm_db_cls_fl_rule_list_get err for cls_i[%d]\n",
+				mvOsPrintf("tpm_db_cls_fl_rule_list_get err for cls_i[%d]\n",
 					cls_i);
 				return;
 			}
@@ -907,7 +908,7 @@ static void tpm_sfs_api_data_live_dump(const char *buf, size_t len)
 
 	init_state = tpm_db_module_state_get();
 	if (!init_state) {
-		printk(KERN_INFO "tpm not ready yet\n");
+		mvOsPrintf("tpm not ready yet\n");
 		return;
 	}
 
@@ -920,19 +921,19 @@ static void tpm_sfs_api_data_live_dump(const char *buf, size_t len)
 	/* Get parameters */
 	parsedargs = sscanf(buf, "%d %d %d", &delay_sec, &hit_low_thresh, (int *)&hw_dump);
 	if (parsedargs != numparms) {
-		printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+		mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		return;
 	}
 
 	rc = tpm_c2_hit_cntr_clear_all();
 	if (TPM_OK != rc) {
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("FAIL\n");
 		return;
 	}
 
 	rc = mvPp2ClsC3HitCntrsClearAll();
 	if (MV_OK != rc) {
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("FAIL\n");
 		return;
 	}
 
@@ -945,13 +946,13 @@ static void tpm_sfs_api_data_live_dump(const char *buf, size_t len)
 
 	rc = tpm_c2_hit_cntr_all_get(hit_low_thresh, c2_cntr_info, &c2_cntr_num);
 	if (TPM_OK != rc) {
-		printk(KERN_INFO "failed to get C2 counters\n");
+		mvOsPrintf("failed to get C2 counters\n");
 		return;
 	}
 
 	rc = tpm_c3_hit_cntr_all_get(hit_low_thresh, c3_cntr_info, &c3_cntr_num);
 	if (TPM_OK != rc) {
-		printk(KERN_INFO "failed to get C3 counters\n");
+		mvOsPrintf("failed to get C3 counters\n");
 		return;
 	}
 
@@ -960,7 +961,7 @@ static void tpm_sfs_api_data_live_dump(const char *buf, size_t len)
 	*/
 
 	if (0 == c2_cntr_num && 0 == c3_cntr_num) {
-		printk(KERN_INFO "Got ZERO C2/3 hit counters\n");
+		mvOsPrintf("Got ZERO C2/3 hit counters\n");
 		return;
 	}
 
@@ -998,7 +999,7 @@ void tpm_sfs_api_type_data_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &cap_api_type);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else
 			tpm_sfs_api_type_data_dump_in(cap_api_type);
 	}
@@ -1034,9 +1035,9 @@ void tpm_sfs_trace_level_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%x", &trace_level);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
-			printk(KERN_INFO "trace_level 0x%x\n", trace_level);
+			mvOsPrintf("trace_level 0x%x\n", trace_level);
 			tpm_log_trace_level_set(trace_level);
 		}
 	}
@@ -1062,11 +1063,11 @@ static int tpm_sfs_virt_pid_dump_all(char *buf)
 
 	init_state = tpm_db_module_state_get();
 	if (!init_state) {
-		printk(KERN_INFO "tpm not ready yet\n");
+		mvOsPrintf("tpm not ready yet\n");
 		return TPM_OK;
 	}
 
-	printk(KERN_INFO "GEM_port virt_port_id\n");
+	mvOsPrintf("GEM_port virt_port_id\n");
 
 	/* iterate over all API types */
 	for (gem = 0; gem < 4096; gem++) {
@@ -1074,7 +1075,7 @@ static int tpm_sfs_virt_pid_dump_all(char *buf)
 		if (TPM_NO_SUCH == rc)
 			continue;
 
-		printk(KERN_INFO "%8d   %8d\n", gem, virt_pid);
+		mvOsPrintf("%8d   %8d\n", gem, virt_pid);
 	}
 
 	return off;
@@ -1101,22 +1102,22 @@ static int tpm_sfs_cap_conf_dump_all(char *buf)
 
 	init_state = tpm_db_module_state_get();
 	if (!init_state) {
-		printk(KERN_INFO "tpm not ready yet\n");
+		mvOsPrintf("tpm not ready yet\n");
 		return TPM_OK;
 	}
 
 	rc = tpm_db_mng_pub_cap_get(cap_arr, &arr_len);
 	if (TPM_OK != rc) {
-		printk(KERN_INFO "tpm_db_mng_pub_cap_get returned error %d\n", rc);
-		printk(KERN_INFO "FAIL\n");
+		mvOsPrintf("tpm_db_mng_pub_cap_get returned error %d\n", rc);
+		mvOsPrintf("FAIL\n");
 		return off;
 	}
 
-	printk(KERN_INFO "indx cap_name         prec hit_nr vlan_number rule_type  cap_field_bm\n");
+	mvOsPrintf("indx cap_name         prec hit_nr vlan_number rule_type  cap_field_bm\n");
 
 	/* iterate over all API types */
 	for (i = 0; i < arr_len; i++) {
-		printk(KERN_INFO "%4d %-17s %2d   %2d %12s %6d       0x%08x = ",
+		mvOsPrintf("%4d %-17s %2d   %2d %12s %6d       0x%08x = ",
 			i,
 			tpm_utils_cap_type_str_get(cap_arr[i].cap_api_type),
 			cap_arr[i].prec,
@@ -1128,9 +1129,9 @@ static int tpm_sfs_cap_conf_dump_all(char *buf)
 		word = 1;
 		for (bit = 0; bit < 32; bit++, word <<= 1) {
 			if (word & cap_arr[i].cap_field_bm)
-				printk(KERN_INFO "%s ", tpm_utils_field_match_str_get(word));
+				mvOsPrintf("%s ", tpm_utils_field_match_str_get(word));
 		}
-		printk(KERN_INFO "\n");
+		mvOsPrintf("\n");
 	}
 
 	return off;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_plcr.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_plcr.c
index 46e4322..46b3366 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_plcr.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_plcr.c
@@ -78,48 +78,49 @@ static struct tpm_enum_str_t g_tpm_policer_color_mode[] = {
 /* ========================================================================== */
 /*             TPM CFG SYS FS HELP                                            */
 /* ========================================================================== */
-int tpm_sys_plcr_help_plcr_cmd(char *buf)
+int tpm_sys_plcr_help_plcr_cmd(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* update reference counter */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [plcr_id] [action]                  > ref_cnt_update      -  update policer reference counter\n");
-	off += sprintf(buf+off, "\tplcr_id         (dec)policer ID, ranging from 1 to 15\n");
-	off += sprintf(buf+off, "\taction          (dec)actions, 0: increase, 1:decrease, 2:clear, 3:clear all\n\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [plcr_id] [action]                  > ref_cnt_update      -  update policer reference counter\n");
+	o += scnprintf(b+o, s-o, "\tplcr_id         (dec)policer ID, ranging from 1 to 15\n");
+	o += scnprintf(b+o, s-o, "\taction          (dec)actions, 0: increase, 1:decrease, 2:clear, 3:clear all\n\n");
 
 	/* set general config */
-	off += sprintf(buf+off, "echo [rate_en] [base_period] [pkt_len]   > gen_cfg_set         -  set general configuration\n");
-	off += sprintf(buf+off, "\trate_en         (dec)0:disable rate generation, 1: enable rate generation\n");
-	off += sprintf(buf+off, "\tbase_period     (dec)base token update period in units of core clock\n");
-	off += sprintf(buf+off, "\tpkt_len         (dec)minimium packet length allowed by policer\n\n");
+	o += scnprintf(b+o, s-o, "echo [rate_en] [base_period] [pkt_len]   > gen_cfg_set         -  set general configuration\n");
+	o += scnprintf(b+o, s-o, "\trate_en         (dec)0:disable rate generation, 1: enable rate generation\n");
+	o += scnprintf(b+o, s-o, "\tbase_period     (dec)base token update period in units of core clock\n");
+	o += scnprintf(b+o, s-o, "\tpkt_len         (dec)minimium packet length allowed by policer\n\n");
 
 	/* early drop configuration */
-	off += sprintf(buf+off, "echo 1                                   > early_drop_init     -  init early drop software config\n");
-	off += sprintf(buf+off, "echo [type] [idx] [thresh]               > thresh_set          -  set threshold\n");
-	off += sprintf(buf+off, "\ttype            (dec)threshold type, 0:cpu queue threshold, 1:HWF queue threshold\n");
-	off += sprintf(buf+off, "\tidx             (dec)index of threshold array, ranging from 0 to %i\n", MV_PP2_V1_PLCR_EDROP_THRESH_NUM - 1);
-	off += sprintf(buf+off, "\tthresh          (dec)threshold, ranging from 0 to %i\n", TPM_MAX_VALUE_BY_BITS(MV_PP2_V1_PLCR_EDROP_TR_BITS));
-	off += sprintf(buf+off, "echo [type] [queue] [idx]                > idx_set             -  set threshold index\n");
-	off += sprintf(buf+off, "\ttype            (dec)queue type, 0:cpu RX queue, 1:HWF TX queue\n");
-	off += sprintf(buf+off, "\tqueue           (hex)queue index, ranging from 0 to %i, HWF TX queue includes queue high\n", TPM_NUM_MAX_QUEUE - 1);
-	off += sprintf(buf+off, "\tthresh          (dec)threshold, ranging from 0 to %i\n", MV_PP2_V1_PLCR_EDROP_THRESH_NUM - 1);
-	off += sprintf(buf+off, "echo [en]                                > early_drop_en       -  enable or disable early drop, triger action\n");
-	off += sprintf(buf+off, "\ten              (dec)early drop state, 0:disable, 1:enable\n\n");
+	o += scnprintf(b+o, s-o, "echo 1                                   > early_drop_init     -  init early drop software config\n");
+	o += scnprintf(b+o, s-o, "echo [type] [idx] [thresh]               > thresh_set          -  set threshold\n");
+	o += scnprintf(b+o, s-o, "\ttype            (dec)threshold type, 0:cpu queue threshold, 1:HWF queue threshold\n");
+	o += scnprintf(b+o, s-o, "\tidx             (dec)index of threshold array, ranging from 0 to %i\n", MV_PP2_V1_PLCR_EDROP_THRESH_NUM - 1);
+	o += scnprintf(b+o, s-o, "\tthresh          (dec)threshold, ranging from 0 to %i\n", TPM_MAX_VALUE_BY_BITS(MV_PP2_V1_PLCR_EDROP_TR_BITS));
+	o += scnprintf(b+o, s-o, "echo [type] [queue] [idx]                > idx_set             -  set threshold index\n");
+	o += scnprintf(b+o, s-o, "\ttype            (dec)queue type, 0:cpu RX queue, 1:HWF TX queue\n");
+	o += scnprintf(b+o, s-o, "\tqueue           (hex)queue index, ranging from 0 to %i, HWF TX queue includes queue high\n", TPM_NUM_MAX_QUEUE - 1);
+	o += scnprintf(b+o, s-o, "\tthresh          (dec)threshold, ranging from 0 to %i\n", MV_PP2_V1_PLCR_EDROP_THRESH_NUM - 1);
+	o += scnprintf(b+o, s-o, "echo [en]                                > early_drop_en       -  enable or disable early drop, triger action\n");
+	o += scnprintf(b+o, s-o, "\ten              (dec)early drop state, 0:disable, 1:enable\n\n");
 
 	/* policer info dump */
-	off += sprintf(buf+off, "echo [type] [plcr_id]                    > policer_dump        -  dump policer information\n");
-	off += sprintf(buf+off, "\ttype            (dec)dump type, 0:dump all valid policers, 1: dump all policers, 2:dump specific policer\n");
-	off += sprintf(buf+off, "\tplcr_id         (dec)policer ID, ranging from 0 to 15, fill 0 if not care about it\n\n");
+	o += scnprintf(b+o, s-o, "echo [type] [plcr_id]                    > policer_dump        -  dump policer information\n");
+	o += scnprintf(b+o, s-o, "\ttype            (dec)dump type, 0:dump all valid policers, 1: dump all policers, 2:dump specific policer\n");
+	o += scnprintf(b+o, s-o, "\tplcr_id         (dec)policer ID, ranging from 0 to 15, fill 0 if not care about it\n\n");
 #ifdef CONFIG_MV_ETH_PP2_1
 	/* Packet count generated by policer */
-	off += sprintf(buf+off, "echo [plcr_id]                           > plcr_pkt_cnt_dump   -  dump the number of green/yellow/red packets that were generated by the policer\n");
-	off += sprintf(buf+off, "\tplcr_id         (dec)policer ID, ranging from 0 to 15\n\n");
+	o += scnprintf(b+o, s-o, "echo [plcr_id]                           > plcr_pkt_cnt_dump   -  dump the number of green/yellow/red packets that were generated by the policer\n");
+	o += scnprintf(b+o, s-o, "\tplcr_id         (dec)policer ID, ranging from 0 to 15\n\n");
 #endif
 	/* configuration dump */
-	off += sprintf(buf+off, "cat                                      > cfg_dump            -  dump policer general configuration and early drop configuration\n\n");
+	o += scnprintf(b+o, s-o, "cat                                      > cfg_dump            -  dump policer general configuration and early drop configuration\n\n");
 
-	return off;
+	return o;
 }
 
 /******************************************************************************/
@@ -155,12 +156,12 @@ void tpm_sfs_plcr_ref_cnt_update(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d", &plcr_id, &action);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_plcr_ref_cnt_update((unsigned char)plcr_id, (enum tpm_plcr_ref_cnt_action_t)action))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -198,15 +199,15 @@ void tpm_sfs_plcr_gen_cfg_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d %d", &rate_en, &base_period, &pkt_len);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			gen_cfg.rate_state  = (enum tpm_plcr_rate_state_t)rate_en;
 			gen_cfg.base_period = (unsigned short)base_period;
 			gen_cfg.min_pkt_len = (unsigned char)pkt_len;
 			if (!tpm_plcr_gen_cfg_set(&gen_cfg))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -381,12 +382,12 @@ void tpm_sfs_plcr_early_drop_init(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &en);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_plcr_early_drop_init())
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -423,12 +424,12 @@ void tpm_sfs_plcr_thresh_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d %d", &type, &idx, &value);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_plcr_thresh_set(type, idx, value))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -465,12 +466,12 @@ void tpm_sfs_plcr_idx_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %x %d", &type, &queue, &idx);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_plcr_idx_set((enum tpm_queue_type_t)type, (unsigned char)queue, (unsigned char)idx))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -503,12 +504,12 @@ void tpm_sfs_plcr_early_drop_en(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &en);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_plcr_early_drop_en((enum tpm_plcr_early_drop_state_t)en))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -542,9 +543,9 @@ int tpm_plcr_policer_dump(enum tpm_plcr_entry_dump_t type, unsigned char plcr_id
 
 	/* dump policer */
 	print_horizontal_line(95, "=");
-	printk(KERN_INFO "=                                     Policer Table                                           =\n");
+	mvOsPrintf("=                                     Policer Table                                           =\n");
 	print_horizontal_line(95, "=");
-	printk(KERN_INFO "= Index |   State   | Token_Unit | Color_Mode |     CIR    |    CBS    |    EBS    | Ref_Cnt  =\n");
+	mvOsPrintf("= Index |   State   | Token_Unit | Color_Mode |     CIR    |    CBS    |    EBS    | Ref_Cnt  =\n");
 
 	for (idx = 0; idx < MV_PP2_PLCR_NUM; idx++) {
 		rc = tpm_db_plcr_entry_get(idx, &plcr_entry);
@@ -553,7 +554,7 @@ int tpm_plcr_policer_dump(enum tpm_plcr_entry_dump_t type, unsigned char plcr_id
 		if (((type == TPM_PLCR_DUMP_ALL_VALID) && (plcr_entry.valid == TPM_PLCR_ENTRY_VALID_STATE)) ||
 		     (type == TPM_PLCR_DUMP_ALL) ||
 		    ((type == TPM_PLCR_DUMP_SPEC) && (idx == plcr_id))) {
-			printk(KERN_INFO "= %5d | %9s | %10s |  %9s |  %8d  |  %8d |  %8d | %5d    =\n",
+			mvOsPrintf("= %5d | %9s | %10s |  %9s |  %8d  |  %8d |  %8d | %5d    =\n",
 				idx,
 				lookup_enum_str(g_tpm_policer_entry_state, TPM_MEMBER_NUM(g_tpm_policer_entry_state),
 						plcr_entry.valid),
@@ -600,12 +601,12 @@ void tpm_sfs_plcr_policer_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d", &type, &id);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_plcr_policer_dump(type, id))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -633,8 +634,9 @@ int tpm_plcr_cfg_dump(void)
 	unsigned int gmac = 0;
 	struct tpm_policer_gen_cfg_t gen_cfg;
 	struct tpm_policer_early_drop_t early_drop;
-	char buf[1024];
-	int off = 0;
+	char b[1024];
+	int o = 0;
+	int s = 1024;
 	int rc;
 
 	/* get general configuration and early drop configuration */
@@ -644,8 +646,8 @@ int tpm_plcr_cfg_dump(void)
 	IF_ERROR_STR(TPM_PLCR_MOD, rc, "failed to get policer early drop\n");
 
 	/* dump general configuration */
-	TPM_MEMSET_ZERO(buf);
-	off += sprintf(buf+off, "PLCR status: %d policers, rate_en:%4s, base_period:%d, min_pkt_len=%d\n",
+	TPM_MEMSET_ZERO(b);
+	o += scnprintf(b+o, s-o, "PLCR status: %d policers, rate_en:%4s, base_period:%d, min_pkt_len=%d\n",
 			MV_PP2_PLCR_NUM,
 			lookup_enum_str(g_tpm_policer_rate_gen_state, TPM_MEMBER_NUM(g_tpm_policer_rate_gen_state),
 			gen_cfg.rate_state),
@@ -653,45 +655,45 @@ int tpm_plcr_cfg_dump(void)
 			gen_cfg.min_pkt_len);
 
 	/* dump early drop state */
-	off += sprintf(buf+off, "Early drop status: %s\n",
+	o += scnprintf(b+o, s-o, "Early drop status: %s\n",
 		lookup_enum_str(g_tpm_policer_early_drop_state, TPM_MEMBER_NUM(g_tpm_policer_early_drop_state),
 				early_drop.state));
 
 	if (early_drop.state == TPM_PLCR_EARLY_DROP_ENABLE) {
 		/* dump early drop CPU queue thresholds */
-		off += sprintf(buf+off, "CPU queue thresholds: ");
+		o += scnprintf(b+o, s-o, "CPU queue thresholds: ");
 		for (idx = 0; idx < MV_PP2_V1_PLCR_EDROP_THRESH_NUM; idx++)
-			off += sprintf(buf+off, "%d ", early_drop.cpu_q_thesh[idx]);
+			o += scnprintf(b+o, s-o, "%d ", early_drop.cpu_q_thesh[idx]);
 
-		off += sprintf(buf+off, "\n");
+		o += scnprintf(b+o, s-o, "\n");
 
 		/* dump early drop HWF queue thresholds */
-		off += sprintf(buf+off, "HWF queue thresholds: ");
+		o += scnprintf(b+o, s-o, "HWF queue thresholds: ");
 		for (idx = 0; idx < MV_PP2_V1_PLCR_EDROP_THRESH_NUM; idx++)
-			off += sprintf(buf+off, "%d ", early_drop.hwf_q_thesh[idx]);
+			o += scnprintf(b+o, s-o, "%d ", early_drop.hwf_q_thesh[idx]);
 
-		off += sprintf(buf+off, "\n");
+		o += scnprintf(b+o, s-o, "\n");
 
 		/* dump early drop CPU queue threshold index */
-		off += sprintf(buf+off, "CPU RX queue index: ");
+		o += scnprintf(b+o, s-o, "CPU RX queue index: ");
 		for (idx = 0; idx < TPM_NUM_MAX_QUEUE; idx++)
-			off += sprintf(buf+off, "%d ", early_drop.rxq_idx[idx]);
+			o += scnprintf(b+o, s-o, "%d ", early_drop.rxq_idx[idx]);
 
-		off += sprintf(buf+off, "\n");
+		o += scnprintf(b+o, s-o, "\n");
 
 		/* dump early drop CPU queue threshold index */
-		off += sprintf(buf+off, "HWF TX queue index:\n");
+		o += scnprintf(b+o, s-o, "HWF TX queue index:\n");
 		for (gmac = 0; gmac < TPM_NUM_TX_PORTS; gmac++) {
-			off += sprintf(buf+off, "TX_PORT%d: ", gmac);
+			o += scnprintf(b+o, s-o, "TX_PORT%d: ", gmac);
 			for (idx = 0; idx < TPM_NUM_MAX_QUEUE; idx++)
-				off += sprintf(buf+off, "%d ", early_drop.txq_idx[gmac][idx]);
+				o += scnprintf(b+o, s-o, "%d ", early_drop.txq_idx[gmac][idx]);
 
-			off += sprintf(buf+off, "\n");
+			o += scnprintf(b+o, s-o, "\n");
 		}
-		off += sprintf(buf+off, "note: threshold index(%i) means invalid index\n",
+		o += scnprintf(b+o, s-o, "note: threshold index(%i) means invalid index\n",
 				TPM_PLCR_INVALID_Q_THESH_IDX);
 	}
-	printk(KERN_INFO "%s", buf);
+	mvOsPrintf("%s", b);
 
 	return TPM_OK;
 }
@@ -740,10 +742,10 @@ void tpm_sfs_plcr_pkt_cnt_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &plcr_id);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			mvPp2V1PlcrTbCntDump(plcr_id);
-			printk(KERN_INFO "OK\n");
+			mvOsPrintf("OK\n");
 		}
 	}
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c
index adb96b6..894e13c 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_pme.c
@@ -60,7 +60,7 @@ static struct tpm_enum_str_t g_tpm_pme_vlan_subr_str[] = {
 static void tpm_pme_print_vlan_permu_dump_head(void)
 {
 	print_horizontal_line(103, "=");
-	printk(KERN_INFO "=      VLAN_OP       |     QoS_Src     |      Out_TPID_Src     |  Out_VID_Src  |     Out_Pbit_Src     =\n");
+	mvOsPrintf("=      VLAN_OP       |     QoS_Src     |      Out_TPID_Src     |  Out_VID_Src  |     Out_Pbit_Src     =\n");
 	print_horizontal_line(103, "=");
 }
 
@@ -83,34 +83,34 @@ static int tpm_pme_print_vlan_permu_stat(void)
 		rc = tpm_db_pme_vlan_permu_stat_get(vlan_op, &permu);
 		IF_ERROR_STR(TPM_SYSFS_MOD, rc, "TPM PME VLAN Op(%d) permutation statistic DB read fail\n", vlan_op);
 
-		printk(KERN_INFO "=");
-		printk(KERN_INFO "%19s", lookup_enum_str(g_tpm_pme_vlan_subr_str,
+		mvOsPrintf("=");
+		mvOsPrintf("%19s", lookup_enum_str(g_tpm_pme_vlan_subr_str,
 					       TPM_MEMBER_NUM(g_tpm_pme_vlan_subr_str),
 					       (int)vlan_op));
-		printk(KERN_INFO " | ");
+		mvOsPrintf(" | ");
 
 		if (permu.qos_src != TPM_PME_QOS_MAX)
-			printk(KERN_INFO "%15s", "NO_NEED");
+			mvOsPrintf("%15s", "NO_NEED");
 		else
-			printk(KERN_INFO "%15s", "Desc + Mod_data");
-		printk(KERN_INFO " | ");
+			mvOsPrintf("%15s", "Desc + Mod_data");
+		mvOsPrintf(" | ");
 
 		if (permu.tpid_sel != TPM_VLAN_ETY_LOG_MAX)
-			printk(KERN_INFO "%21s", "VLAN1_2");
+			mvOsPrintf("%21s", "VLAN1_2");
 		else
-			printk(KERN_INFO "%21s", "VLAN1_2 + REG0 + REG1");
-		printk(KERN_INFO " | ");
+			mvOsPrintf("%21s", "VLAN1_2 + REG0 + REG1");
+		mvOsPrintf(" | ");
 
 		if (permu.vid_sel != TPM_VLAN_VID_LOG_MAX)
-			printk(KERN_INFO "%13s", "VLAN1_2");
+			mvOsPrintf("%13s", "VLAN1_2");
 		else
-			printk(KERN_INFO "%13s", "VLAN1_2 + NEW");
-		printk(KERN_INFO " | ");
+			mvOsPrintf("%13s", "VLAN1_2 + NEW");
+		mvOsPrintf(" | ");
 
 		if (permu.vid_sel != TPM_VLAN_PBIT_LOG_MAX)
-			printk(KERN_INFO "%13s", "VLAN1_2");
+			mvOsPrintf("%13s", "VLAN1_2");
 		else
-			printk(KERN_INFO "%13s", "VLAN1_2 + NEW");
+			mvOsPrintf("%13s", "VLAN1_2 + NEW");
 		print_horizontal_line(103, "-");
 	}
 	print_horizontal_line(103, "=");
@@ -121,7 +121,7 @@ static int tpm_pme_print_vlan_permu_stat(void)
 static void tpm_pme_print_templ_dump_head(void)
 {
 	print_horizontal_line(121, "=");
-	printk(KERN_INFO "=   Use_Case  | Jmp_Idx | Ref_Cnt | QoS_Src | MOD_Field(NOTE:()mean field NOT from user; []mean field is NOT mandatory) =\n");
+	mvOsPrintf("=   Use_Case  | Jmp_Idx | Ref_Cnt | QoS_Src | MOD_Field(NOTE:()mean field NOT from user; []mean field is NOT mandatory) =\n");
 	print_horizontal_line(121, "=");
 }
 
@@ -142,89 +142,89 @@ static int tpm_pme_print_instr_templ(void)
 	tpm_pme_print_templ_dump_head();
 
 	for (templ_idx = 0; templ_idx < TPM_PME_INSTR_TEMPL_MAX; templ_idx++) {
-		printk(KERN_INFO "=");
+		mvOsPrintf("=");
 		rc = tpm_db_pme_instr_templ_get(templ_idx, &templ_data);
 		IF_ERROR_STR(TPM_SYSFS_MOD, rc, "TPM PME instruction template DB read fail\n");
 		/* Use case print */
 		if (templ_data.ext_mod_bm == TPM_PME_NO_MOD_BM)
-			printk(KERN_INFO "%13s", "NO_MOD");
+			mvOsPrintf("%13s", "NO_MOD");
 		else if (templ_data.ext_mod_bm == TPM_PME_L2_SW_BM1 ||
 			 templ_data.ext_mod_bm == TPM_PME_L2_SW_BM2)
-			printk(KERN_INFO "%13s", "L2_Switch");
+			mvOsPrintf("%13s", "L2_Switch");
 		else if (templ_data.ext_mod_bm == TPM_PME_ROUTE_BM1 ||
 			 templ_data.ext_mod_bm == TPM_PME_ROUTE_BM2 ||
 			 templ_data.ext_mod_bm == TPM_PME_ROUTE_BM3 ||
 			 templ_data.ext_mod_bm == TPM_PME_ROUTE_BM4)
-			printk(KERN_INFO "%13s", "UNI/MC_ROUTE");
+			mvOsPrintf("%13s", "UNI/MC_ROUTE");
 		else if (templ_data.ext_mod_bm == TPM_PME_NAPT_US_BM1 ||
 			 templ_data.ext_mod_bm == TPM_PME_NAPT_US_BM2)
-			printk(KERN_INFO "%13s", "IPV4_NAPT_US");
+			mvOsPrintf("%13s", "IPV4_NAPT_US");
 		else if (templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM1 ||
 			 templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM2)
-			printk(KERN_INFO "%13s", "IPV4_NAPT_DS");
+			mvOsPrintf("%13s", "IPV4_NAPT_DS");
 		else
-			printk(KERN_INFO "%13s", "");
-		printk(KERN_INFO "|");
+			mvOsPrintf("%13s", "");
+		mvOsPrintf("|");
 		/* Jmp index print */
-		printk(KERN_INFO "%9d", templ_data.jmp_idx);
-		printk(KERN_INFO "|");
+		mvOsPrintf("%9d", templ_data.jmp_idx);
+		mvOsPrintf("|");
 		/* Ref_cnt print */
-		printk(KERN_INFO "%9d", templ_data.ref_count);
-		printk(KERN_INFO "|");
+		mvOsPrintf("%9d", templ_data.ref_count);
+		mvOsPrintf("|");
 		/* QOS src print */
 		if (templ_data.int_mod_bm & TPM_QOS_FROM_DESC)
-			printk(KERN_INFO "%9s", "TX_DESC");
+			mvOsPrintf("%9s", "TX_DESC");
 		else
-			printk(KERN_INFO "%9s", "PRIVATE");
-		printk(KERN_INFO "|  ");
+			mvOsPrintf("%9s", "PRIVATE");
+		mvOsPrintf("|  ");
 		/* Mod fields print */
 		if (templ_data.int_mod_bm & TPM_MH_T1_MOD) {
 			if (templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM1 ||
 			    templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM2)
-				printk(KERN_INFO "(MH_Mod0) + ");
+				mvOsPrintf("(MH_Mod0) + ");
 			else
-				printk(KERN_INFO "(MH_Mod1) + ");
+				mvOsPrintf("(MH_Mod1) + ");
 		}
 		if (templ_data.int_mod_bm & TPM_MH_T5_MOD)
-			printk(KERN_INFO "(MH_Mod5) + ");
+			mvOsPrintf("(MH_Mod5) + ");
 #ifndef CONFIG_MV_ETH_PP2_1
 		if (templ_data.int_mod_bm & TPM_MH_DEL)
-			printk(KERN_INFO "(MH_DEL) + ");
+			mvOsPrintf("(MH_DEL) + ");
 #endif
 		if (templ_data.ext_mod_bm & TPM_ETH_DST_SET)
-			printk(KERN_INFO "DA + ");
+			mvOsPrintf("DA + ");
 		if (templ_data.ext_mod_bm & TPM_ETH_SRC_SET)
-			printk(KERN_INFO "SA + ");
+			mvOsPrintf("SA + ");
 		if (templ_data.ext_mod_bm & TPM_VLAN_MOD) {
 			if (templ_data.ext_mod_bm == TPM_PME_L2_SW_BM1 ||
 			    templ_data.ext_mod_bm == TPM_PME_L2_SW_BM2)
-				printk(KERN_INFO " VLAN  + ");
+				mvOsPrintf(" VLAN  + ");
 			else
-				printk(KERN_INFO "[VLAN] + ");
+				mvOsPrintf("[VLAN] + ");
 		}
 		if (templ_data.ext_mod_bm & TPM_ETH_TYPE_SET)
-			printk(KERN_INFO "ETY + ");
+			mvOsPrintf("ETY + ");
 		if (templ_data.ext_mod_bm & TPM_PPOE_ADD)
-			printk(KERN_INFO "PPOE_ADD + ");
+			mvOsPrintf("PPOE_ADD + ");
 		if (templ_data.ext_mod_bm & TPM_PPOE_DEL)
-			printk(KERN_INFO "PPOE_DEL + ");
+			mvOsPrintf("PPOE_DEL + ");
 		if (templ_data.ext_mod_bm & TPM_IP_DSCP_SET) {
 			if (templ_data.ext_mod_bm == TPM_PME_L2_SW_BM1 ||
 			    templ_data.ext_mod_bm == TPM_PME_L2_SW_BM2)
-				printk(KERN_INFO " DSCP  + ");
+				mvOsPrintf(" DSCP  + ");
 			else
-				printk(KERN_INFO "[DSCP] + ");
+				mvOsPrintf("[DSCP] + ");
 		}
 		if (templ_data.ext_mod_bm & TPM_TTL_HOPL_DEC)
-			printk(KERN_INFO "TTL/HOP + ");
+			mvOsPrintf("TTL/HOP + ");
 		if (templ_data.ext_mod_bm & TPM_IP_SRC_SET)
-			printk(KERN_INFO "SIP + ");
+			mvOsPrintf("SIP + ");
 		if (templ_data.ext_mod_bm & TPM_IP_DST_SET)
-			printk(KERN_INFO "DIP + ");
+			mvOsPrintf("DIP + ");
 		if (templ_data.ext_mod_bm & TPM_L4_SRC_SET)
-			printk(KERN_INFO "L4_SRC + ");
+			mvOsPrintf("L4_SRC + ");
 		if (templ_data.ext_mod_bm & TPM_L4_DST_SET)
-			printk(KERN_INFO "L4_DST + ");
+			mvOsPrintf("L4_DST + ");
 		print_horizontal_line(121, "-");
 	}
 	print_horizontal_line(121, "=");
@@ -235,7 +235,7 @@ static int tpm_pme_print_instr_templ(void)
 static void tpm_pme_print_mod_data_combin_templ_head(void)
 {
 	print_horizontal_line(60, "=");
-	printk(KERN_INFO "=  Template |     Private Data      |      Share Data      =\n");
+	mvOsPrintf("=  Template |     Private Data      |      Share Data      =\n");
 	print_horizontal_line(60, "=");
 }
 
@@ -266,7 +266,7 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 	rc = tpm_mng_log_idx_map_pkt_mod(api_logic_idx, &num_dest, pkt_mod_array);
 	IF_ERROR_STR(TPM_SYSFS_MOD, rc, "API Logical Index %d map to Privated data index failed\n", api_logic_idx);
 
-	printk(KERN_INFO "API rule [%d], dest_num[%d], modification info:\n", api_logic_idx, num_dest);
+	mvOsPrintf("API rule [%d], dest_num[%d], modification info:\n", api_logic_idx, num_dest);
 
 	for (loop = 0; loop < num_dest; loop++) {
 		private_idx = 0;
@@ -274,7 +274,7 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 		sha_entry_idx = 0;
 		memcpy(&pkt_mod, &pkt_mod_array[loop], sizeof(struct tpm_engine_pkt_mod_t));
 		hwfm_dptr = pkt_mod.mod_data_idx;
-		printk(KERN_INFO "\nDest[%d], hwfm_iptr=%d, hwfm_dptr = %d, L4_cksum_en=%d\n",
+		mvOsPrintf("\nDest[%d], hwfm_iptr=%d, hwfm_dptr = %d, L4_cksum_en=%d\n",
 			loop, pkt_mod.mod_cmd_idx, pkt_mod.mod_data_idx, pkt_mod.l4_chksum_update_flag);
 
 		/* For case without modification info, return for loop */
@@ -307,36 +307,36 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 					"Template with Jump(%d) No Found\n", mod_data_set.templ_jmp);
 
 		if (templ_data.int_mod_bm & (TPM_MH_T1_MOD | TPM_MH_T5_MOD)) {
-			printk(KERN_INFO "=");
+			mvOsPrintf("=");
 			if (templ_data.int_mod_bm & TPM_MH_T1_MOD) {
 				if (templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM1 ||
 				    templ_data.ext_mod_bm == TPM_PME_NAPT_DS_BM2)
-					printk(KERN_INFO "%10s", "MH_Mod0");
+					mvOsPrintf("%10s", "MH_Mod0");
 				else
-					printk(KERN_INFO "%10s", "MH_Mod1");
+					mvOsPrintf("%10s", "MH_Mod1");
 			}
 			if (templ_data.int_mod_bm & TPM_MH_T5_MOD)
-				printk(KERN_INFO "%10s", "MH_Mod5");
-			printk(KERN_INFO " | ");
+				mvOsPrintf("%10s", "MH_Mod5");
+			mvOsPrintf(" | ");
 			if (templ_data.ext_mod_bm != TPM_PME_NAPT_DS_BM1 &&
 			    templ_data.ext_mod_bm != TPM_PME_NAPT_DS_BM2) {
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
 			} else {
-				printk(KERN_INFO "%24s", " | ");
+				mvOsPrintf("%24s", " | ");
 			}
 
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 
 #ifndef CONFIG_MV_ETH_PP2_1
 		if (templ_data.int_mod_bm & TPM_MH_DEL) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "MH_Del");
-			printk(KERN_INFO " | ");
-			printk(KERN_INFO "%24s", " | ");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "MH_Del");
+			mvOsPrintf(" | ");
+			mvOsPrintf("%24s", " | ");
 
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 #endif
 		/* No modification, return to for loop */
@@ -344,9 +344,9 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 			continue;
 		/* DA */
 		if (templ_data.ext_mod_bm & TPM_ETH_DST_SET) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "DA_Mod");
-			printk(KERN_INFO " | ");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "DA_Mod");
+			mvOsPrintf(" | ");
 			/* Check it is MC or not */
 			if (((mod_data_set.mod_data[private_idx] & IP4_MC_MAC_2BYTE_MASK) == IP4_MC_MAC_2BYTE ||
 			    ((mod_data_set.mod_data[private_idx] & IP6_MC_MAC_2BYTE_MASK) == IP6_MC_MAC_2BYTE)) &&
@@ -356,12 +356,12 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 					addr_tmp[2*i + 1] = mod_data_set.mod_data[private_idx++] & 0xFF;
 				}
 				for (i = 0; i < MAC_ADDR_SIZE; i++)
-					printk(KERN_INFO "%02x:", addr_tmp[i]);
-				printk(KERN_INFO "    | ");
+					mvOsPrintf("%02x:", addr_tmp[i]);
+				mvOsPrintf("    | ");
 			} else {
 				sha_hw_first = mod_data_set.mod_data[private_idx];
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
 				/* Search Share data DB */
 				for (db_idx = 0; db_idx < TPM_PME_SHARE_SET_MAX; db_idx++) {
 					rc = tpm_db_pme_data_get(TPM_PME_SHARE_TBL, db_idx, &sha_data_set);
@@ -378,33 +378,33 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 					addr_tmp[2*i + 1] = sha_data_set.mod_data[sha_entry_idx++] & 0xFF;
 				}
 				for (i = 0; i < MAC_ADDR_SIZE; i++)
-					printk(KERN_INFO "%02x:", addr_tmp[i]);
+					mvOsPrintf("%02x:", addr_tmp[i]);
 				share_unit_size -= MAC_ADDR_SIZE;
 				if (!share_unit_size)
 					sha_entry_idx = 0;
 			}
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 		/* SA */
 		if (templ_data.ext_mod_bm & TPM_ETH_SRC_SET) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "SA_Mod");
-			printk(KERN_INFO " | ");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "SA_Mod");
+			mvOsPrintf(" | ");
 			if (share_unit_size != 0) {
-				printk(KERN_INFO "%24s", " | ");
+				mvOsPrintf("%24s", " | ");
 				for (i = 0; i < MAC_ADDR_SIZE / 2; i++) {
 					addr_tmp[2 * i] = (sha_data_set.mod_data[sha_entry_idx] >> 8) & 0xFF;
 					addr_tmp[2 * i + 1] = sha_data_set.mod_data[sha_entry_idx++] & 0xFF;
 				}
 				for (i = 0; i < MAC_ADDR_SIZE; i++)
-					printk(KERN_INFO "%02x:", addr_tmp[i]);
+					mvOsPrintf("%02x:", addr_tmp[i]);
 				share_unit_size -= MAC_ADDR_SIZE;
 				if (!share_unit_size)
 					sha_entry_idx = 0;
 			} else {
 				sha_hw_first = mod_data_set.mod_data[private_idx];
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
 				/* Search Share data DB */
 				for (db_idx = 0; db_idx < TPM_PME_SHARE_SET_MAX; db_idx++) {
 					rc = tpm_db_pme_data_get(TPM_PME_SHARE_TBL, db_idx, &sha_data_set);
@@ -421,21 +421,21 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 					addr_tmp[2*i + 1] = sha_data_set.mod_data[sha_entry_idx++] & 0xFF;
 				}
 				for (i = 0; i < MAC_ADDR_SIZE; i++)
-					printk(KERN_INFO "%02x:", addr_tmp[i]);
+					mvOsPrintf("%02x:", addr_tmp[i]);
 				share_unit_size -= MAC_ADDR_SIZE;
 				if (!share_unit_size)
 					sha_entry_idx = 0;
 			}
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 		/* VLAN */
 		if (templ_data.ext_mod_bm & TPM_VLAN_MOD) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "VLAN_subr");
-			printk(KERN_INFO " | ");
-			printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx]);
-			printk(KERN_INFO "%18s", " | ");
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "VLAN_subr");
+			mvOsPrintf(" | ");
+			mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx]);
+			mvOsPrintf("%18s", " | ");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 			for (db_idx = 0; db_idx < TPM_VLAN_TEMPL_MAX; db_idx++) {
 				rc = tpm_db_pme_vlan_subr_get(db_idx, &vlan_subr);
 				IF_ERROR_STR(TPM_SYSFS_MOD, rc, "TPM PME VLAN subr DB read failed\n");
@@ -454,93 +454,93 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 			    vlan_subr.vlan_op == VLANOP_MOD_2TAG ||
 			    vlan_subr.vlan_op == VLANOP_INT_TAG_MOD ||
 			    vlan_subr.vlan_op == VLANOP_EXT_TAG_DEL_INT_MOD) {
-				printk(KERN_INFO "=");
-				printk(KERN_INFO "%10s", "VLAN1");
-				printk(KERN_INFO " | ");
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
-				printk(KERN_INFO "\n------------------------------------------------------------\n");
+				mvOsPrintf("=");
+				mvOsPrintf("%10s", "VLAN1");
+				mvOsPrintf(" | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
+				mvOsPrintf("\n------------------------------------------------------------\n");
 			}
 			if (vlan_subr.vlan_op == VLANOP_EXT_TAG_MOD_INS ||
 			    vlan_subr.vlan_op == VLANOP_INS_2TAG ||
 			    vlan_subr.vlan_op == VLANOP_MOD_2TAG) {
-				printk(KERN_INFO "=");
-				printk(KERN_INFO "%10s", "VLAN2");
-				printk(KERN_INFO " | ");
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
-				printk(KERN_INFO "\n------------------------------------------------------------\n");
+				mvOsPrintf("=");
+				mvOsPrintf("%10s", "VLAN2");
+				mvOsPrintf(" | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
+				mvOsPrintf("\n------------------------------------------------------------\n");
 			}
 		}
 
 		/* TPM_PPOE_ADD */
 		if (templ_data.ext_mod_bm & TPM_PPOE_ADD) {
 			if (templ_data.ext_mod_bm == TPM_PME_ROUTE_BM2) {
-				printk(KERN_INFO "=");
-				printk(KERN_INFO "%10s", "PPoE_Add");
-				printk(KERN_INFO " | ");
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
-				printk(KERN_INFO "\n------------------------------------------------------------\n");
+				mvOsPrintf("=");
+				mvOsPrintf("%10s", "PPoE_Add");
+				mvOsPrintf(" | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
+				mvOsPrintf("\n------------------------------------------------------------\n");
 			} else if (templ_data.ext_mod_bm == TPM_PME_NAPT_US_BM2) {
-				printk(KERN_INFO "=");
-				printk(KERN_INFO "%10s", "PPoE_Add");
-				printk(KERN_INFO " | ");
-				printk(KERN_INFO "[0x%04x]", templ_data.pme_entry[templ_data.ppoe_idx - templ_data.start_idx].data);
-				printk(KERN_INFO "%16s", " | ");
-				printk(KERN_INFO "\n------------------------------------------------------------\n");
+				mvOsPrintf("=");
+				mvOsPrintf("%10s", "PPoE_Add");
+				mvOsPrintf(" | ");
+				mvOsPrintf("[0x%04x]", templ_data.pme_entry[templ_data.ppoe_idx - templ_data.start_idx].data);
+				mvOsPrintf("%16s", " | ");
+				mvOsPrintf("\n------------------------------------------------------------\n");
 			}
 		}
 		/* PPPoE Del */
 		if (templ_data.ext_mod_bm & TPM_PPOE_DEL) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "PPoE_Del");
-			printk(KERN_INFO " | ");
-			printk(KERN_INFO "%24s", " | ");
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "PPoE_Del");
+			mvOsPrintf(" | ");
+			mvOsPrintf("%24s", " | ");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 
 		/* DSCP */
 		if (templ_data.ext_mod_bm & TPM_IP_DSCP_SET) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "DSCP");
-			printk(KERN_INFO " | ");
-			printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-			printk(KERN_INFO "%18s", " | ");
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "DSCP");
+			mvOsPrintf(" | ");
+			mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+			mvOsPrintf("%18s", " | ");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 		/* TTL */
 		if (templ_data.ext_mod_bm & TPM_TTL_HOPL_DEC) {
-			printk(KERN_INFO "=");
+			mvOsPrintf("=");
 			if (templ_data.int_mod_bm & TPM_MOD_PKT_IS_IP6)
-				printk(KERN_INFO "%10s", "HOP_DEC");
+				mvOsPrintf("%10s", "HOP_DEC");
 			else
-				printk(KERN_INFO "%10s", "TTL_DEC");
-			printk(KERN_INFO " | ");
-			printk(KERN_INFO "%24s", " | ");
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+				mvOsPrintf("%10s", "TTL_DEC");
+			mvOsPrintf(" | ");
+			mvOsPrintf("%24s", " | ");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 		/*SIP*/
 		if (templ_data.ext_mod_bm & TPM_IP_SRC_SET) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "SIP_Mod");
-			printk(KERN_INFO " | ");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "SIP_Mod");
+			mvOsPrintf(" | ");
 			if (share_unit_size != 0) {
-				printk(KERN_INFO "%24s", " | ");
+				mvOsPrintf("%24s", " | ");
 
 				for (i = 0; i < IPV4_ADDR_SIZE/2; i++) {
 					addr_tmp[2*i] = (sha_data_set.mod_data[sha_entry_idx] >> 8) & 0xFF;
 					addr_tmp[2*i + 1] = sha_data_set.mod_data[sha_entry_idx++] & 0xFF;
 				}
 				for (i = 0; i < IPV4_ADDR_SIZE; i++)
-					printk(KERN_INFO "%03d.", addr_tmp[i]);
+					mvOsPrintf("%03d.", addr_tmp[i]);
 				share_unit_size -= IPV4_ADDR_SIZE;
 				if (!share_unit_size)
 					sha_entry_idx = 0;
 			} else {
 				sha_hw_first = mod_data_set.mod_data[private_idx];
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
 				/* Search Share data DB */
 				for (db_idx = 0; db_idx < TPM_PME_SHARE_SET_MAX; db_idx++) {
 					rc = tpm_db_pme_data_get(TPM_PME_SHARE_TBL, db_idx, &sha_data_set);
@@ -558,33 +558,33 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 					addr_tmp[2*i + 1] = sha_data_set.mod_data[sha_entry_idx++] & 0xFF;
 				}
 				for (i = 0; i < IPV4_ADDR_SIZE; i++)
-					printk(KERN_INFO "%03d.", addr_tmp[i]);
+					mvOsPrintf("%03d.", addr_tmp[i]);
 				share_unit_size -= IPV4_ADDR_SIZE;
 				if (!share_unit_size)
 					sha_entry_idx = 0;
 			}
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 		/* DIP */
 		if (templ_data.ext_mod_bm & TPM_IP_DST_SET) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "DIP_Mod");
-			printk(KERN_INFO " | ");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "DIP_Mod");
+			mvOsPrintf(" | ");
 			if (share_unit_size != 0) {
-				printk(KERN_INFO "%24s", " | ");
+				mvOsPrintf("%24s", " | ");
 				for (i = 0; i < IPV4_ADDR_SIZE/2; i++) {
 					addr_tmp[2*i] = (sha_data_set.mod_data[sha_entry_idx] >> 8) & 0xFF;
 					addr_tmp[2*i + 1] = sha_data_set.mod_data[sha_entry_idx++] & 0xFF;
 				}
 				for (i = 0; i < IPV4_ADDR_SIZE; i++)
-					printk(KERN_INFO "%03d.", addr_tmp[i]);
+					mvOsPrintf("%03d.", addr_tmp[i]);
 				share_unit_size -= IPV4_ADDR_SIZE;
 				if (!share_unit_size)
 					sha_entry_idx = 0;
 			} else {
 				sha_hw_first = mod_data_set.mod_data[private_idx];
-				printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-				printk(KERN_INFO "%18s", " | ");
+				mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+				mvOsPrintf("%18s", " | ");
 				/* Search Share data DB */
 				for (db_idx = 0; db_idx < TPM_PME_SHARE_SET_MAX; db_idx++) {
 					rc = tpm_db_pme_data_get(TPM_PME_SHARE_TBL, db_idx, &sha_data_set);
@@ -602,31 +602,31 @@ static int tpm_pme_print_mod_data_combin_templ(int api_logic_idx)
 					addr_tmp[2*i + 1] = sha_data_set.mod_data[sha_entry_idx++] & 0xFF;
 				}
 				for (i = 0; i < IPV4_ADDR_SIZE; i++)
-					printk(KERN_INFO "%03d.", addr_tmp[i]);
+					mvOsPrintf("%03d.", addr_tmp[i]);
 				share_unit_size -= IPV4_ADDR_SIZE;
 				if (!share_unit_size)
 					sha_entry_idx = 0;
 			}
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 		/* L4_Src_port */
 		if (templ_data.ext_mod_bm & TPM_L4_SRC_SET) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "L4_Src");
-			printk(KERN_INFO " | ");
-			printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-			printk(KERN_INFO "%18s", " | ");
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "L4_Src");
+			mvOsPrintf(" | ");
+			mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+			mvOsPrintf("%18s", " | ");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 
 		/* L4_Dst_port */
 		if (templ_data.ext_mod_bm & TPM_L4_DST_SET) {
-			printk(KERN_INFO "=");
-			printk(KERN_INFO "%10s", "L4_Dst");
-			printk(KERN_INFO " | ");
-			printk(KERN_INFO "0x%04x", mod_data_set.mod_data[private_idx++]);
-			printk(KERN_INFO "%18s", " | ");
-			printk(KERN_INFO "\n------------------------------------------------------------\n");
+			mvOsPrintf("=");
+			mvOsPrintf("%10s", "L4_Dst");
+			mvOsPrintf(" | ");
+			mvOsPrintf("0x%04x", mod_data_set.mod_data[private_idx++]);
+			mvOsPrintf("%18s", " | ");
+			mvOsPrintf("\n------------------------------------------------------------\n");
 		}
 
 		print_horizontal_line(60, "=");
@@ -655,11 +655,11 @@ static int tpm_pme_print_mod_data(int api_logic_idx)
 	rc = tpm_mng_log_idx_map_pkt_mod(api_logic_idx, &num_dest, pkt_mod);
 	IF_ERROR_STR(TPM_SYSFS_MOD, rc, "API Logical Index %d map to Privated data index failed\n", api_logic_idx);
 
-	printk(KERN_INFO "API rule [%d], dest_num[%d], modification data:\n", api_logic_idx, num_dest);
+	mvOsPrintf("API rule [%d], dest_num[%d], modification data:\n", api_logic_idx, num_dest);
 
 	for (loop = 0; loop < num_dest; loop++) {
 		hwfm_dptr = pkt_mod[loop].mod_data_idx;
-		printk(KERN_INFO "\nDest[%d], hwfm_iptr=%d, hwfm_dptr = %d, L4_cksum_en=%d\n", loop,
+		mvOsPrintf("\nDest[%d], hwfm_iptr=%d, hwfm_dptr = %d, L4_cksum_en=%d\n", loop,
 			pkt_mod[loop].mod_cmd_idx, pkt_mod[loop].mod_data_idx, pkt_mod[loop].l4_chksum_update_flag);
 
 		/* For case without modification info, return for loop */
@@ -679,9 +679,9 @@ static int tpm_pme_print_mod_data(int api_logic_idx)
 					"Private data entry with first_idx(%d) No Found\n", hwfm_dptr);
 
 		/* Print private data */
-		printk(KERN_INFO "Private data unit:\n");
+		mvOsPrintf("Private data unit:\n");
 		for (i = 0; i < mod_data_set.real_entry_cnt; i++)
-			printk(KERN_INFO "\t(%d)--0x%04x\n", i, mod_data_set.mod_data[i]);
+			mvOsPrintf("\t(%d)--0x%04x\n", i, mod_data_set.mod_data[i]);
 
 		/* Print share data if there is */
 		for (unit_idx = TPM_PME_DATA_UNIT0; unit_idx < TPM_PME_DATA_UNIT_MAX; unit_idx++) {
@@ -699,13 +699,13 @@ static int tpm_pme_print_mod_data(int api_logic_idx)
 						"Share entry with first_idx(%d) No Found\n",
 						mod_data_set.share_idx_ptr[unit_idx]);
 				if (sha_data_set.real_entry_cnt == TPM_PME_SHA_MAC_UNIT_BYTES / 2)
-					printk(KERN_INFO "Share unit%d MAC:\n", unit_idx);
+					mvOsPrintf("Share unit%d MAC:\n", unit_idx);
 				else if (sha_data_set.real_entry_cnt == TPM_PME_SHA_SA_SIP_UNIT_BYTES / 2)
-					printk(KERN_INFO "Share unit%d DA&SIP:\n", unit_idx);
+					mvOsPrintf("Share unit%d DA&SIP:\n", unit_idx);
 				else
-					printk(KERN_INFO "Share unit%d DA&SA&DIP:\n", unit_idx);
+					mvOsPrintf("Share unit%d DA&SA&DIP:\n", unit_idx);
 				for (i = 0; i < sha_data_set.real_entry_cnt; i++)
-					printk(KERN_INFO "\t(%d)--0x%04x\n", i, sha_data_set.mod_data[i]);
+					mvOsPrintf("\t(%d)--0x%04x\n", i, sha_data_set.mod_data[i]);
 			}
 		}
 	}
@@ -727,23 +727,24 @@ static int tpm_pme_print_mod_data(int api_logic_idx)
 *       buf - Shell parameters as char buffer
 *       len - Number of characters in buffer
 *******************************************************************************/
-static int sys_help_tpm_pme_debug_cmd(char *buf)
+static int sys_help_tpm_pme_debug_cmd(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [logic_idx] [mode] > mod_data_dump -  dump mod data with API rule logic index\n");
-	off += sprintf(buf+off, "\tlogic_idx                 (dec)API Rule Logical Index\n");
-	off += sprintf(buf+off, "\tmode                      (dec)mode, 0: dump mod data; 1: dump mod data/template\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [logic_idx] [mode] > mod_data_dump -  dump mod data with API rule logic index\n");
+	o += scnprintf(b+o, s-o, "\tlogic_idx                 (dec)API Rule Logical Index\n");
+	o += scnprintf(b+o, s-o, "\tmode                      (dec)mode, 0: dump mod data; 1: dump mod data/template\n");
 
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
 	/* xxx info dump */
-	off += sprintf(buf+off, "cat instr_templ_dump      -  dump all valid PME instruction templates\n");
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "cat vlan_op_info_dump     -  dump VLAN Ops permuatation statistics.\n");
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "cat instr_templ_dump      -  dump all valid PME instruction templates\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "cat vlan_op_info_dump     -  dump VLAN Ops permuatation statistics.\n");
+	o += scnprintf(b+o, s-o, "\n");
 
-	return off;
+	return o;
 }
 
 /******************************************************************************/
@@ -779,7 +780,7 @@ static void sfs_tpm_pme_mod_data_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d %d", &api_logic_idx, &mode);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (mode)
 				rc = tpm_pme_print_mod_data_combin_templ(api_logic_idx);
@@ -844,7 +845,7 @@ static void tpm_sfs_pme_jmp_cmd_trace_dump(unsigned int	cmd)
 		/* dump the first command */
 		mvPp2PmeSwClear(&pme);
 		mvPp2PmeHwRead(cmd, &pme);
-		printk(KERN_INFO "[%4d]: ", cmd);
+		mvOsPrintf("[%4d]: ", cmd);
 		mvPp2PmeSwDump(&pme);
 
 		/* recurse for jump commands */
@@ -880,16 +881,16 @@ void tpm_sfs_pme_cmd_trace_dump(unsigned int	cmd,
 	unsigned short		data;
 
 	print_horizontal_line(40, "=");
-	printk(KERN_INFO "PME_INFO:\n");
+	mvOsPrintf("PME_INFO:\n");
 
 	mvPp2PmeHwDataTblRead(0, dptr, &data);
-	printk(KERN_INFO "DPTR0[%d]: 0x%.4x 0x%.4x\n", dptr, 0xffff & (data >> 16), 0xffff & data);
+	mvOsPrintf("DPTR0[%d]: 0x%.4x 0x%.4x\n", dptr, 0xffff & (data >> 16), 0xffff & data);
 
 	do {
 		/* dump the first command */
 		mvPp2PmeSwClear(&pme);
 		mvPp2PmeHwRead(cmd, &pme);
-		printk(KERN_INFO "[%4d]: ", cmd);
+		mvOsPrintf("[%4d]: ", cmd);
 		mvPp2PmeSwDump(&pme);
 
 		/* recurse for jump commands */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c
index f1be4f0..fd815da 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_prs.c
@@ -261,7 +261,7 @@ static void tpm_print_luid_info_dump_line(unsigned int first_line,
 		result_info_str = tpm_rerult_str_map[ri_array_idx].result_str[ri_field_idx];
 
 	if (first_line || result_info_mask != TPM_PRS_RI_NONE_MASK) {
-		printk(KERN_INFO "+  %31s | %7s | %20s | %8s | %8s  +\n", traffic_type_str,
+		mvOsPrintf("+  %31s | %7s | %20s | %8s | %8s  +\n", traffic_type_str,
 							       valid_state_str,
 							       result_info_str,
 							       lookup_id_str,
@@ -273,9 +273,9 @@ static void tpm_print_luid_info_dump_line(unsigned int first_line,
 
 static void tpm_print_luid_dump_head(void)
 {
-	printk(KERN_INFO "============================================================================================\n");
-	printk(KERN_INFO "=       Traffic_Type                Valid_State    Packet_Result     Lookup_ID   TCAM_IDX  =\n");
-	printk(KERN_INFO "============================================================================================\n");
+	mvOsPrintf("============================================================================================\n");
+	mvOsPrintf("=       Traffic_Type                Valid_State    Packet_Result     Lookup_ID   TCAM_IDX  =\n");
+	mvOsPrintf("============================================================================================\n");
 }
 
 /*******************************************************************************
@@ -315,7 +315,7 @@ static void tpm_prs_luid_info_dump(void)
 						      lu_id_data.valid,
 						      lu_id_data.lu_id,
 						      lu_id_data.prs_idx);
-			printk(KERN_INFO "+------------------------------------------------------------------------------------------+\n");
+			mvOsPrintf("+------------------------------------------------------------------------------------------+\n");
 			continue;
 		}
 		for (i = 0; i < TPM_PRS_RI_FIELD_NUM; i++) {
@@ -330,9 +330,9 @@ static void tpm_prs_luid_info_dump(void)
 				first_line = 0;
 			}
 		}
-		printk(KERN_INFO "+------------------------------------------------------------------------------------------+\n");
+		mvOsPrintf("+------------------------------------------------------------------------------------------+\n");
 	}
-	printk(KERN_INFO "============================================================================================\n");
+	mvOsPrintf("============================================================================================\n");
 
 	return;
 }
@@ -361,19 +361,19 @@ static void tpm_prs_ipv6_spec_nh_dump(void)
 	if (tpm_db_spec_ipv6nh_get(ip6_nh))
 		return;
 
-	printk(KERN_INFO "IPV6 Next Header need Special Treat:\n");
+	mvOsPrintf("IPV6 Next Header need Special Treat:\n");
 	if (ip6_nh[TPM_IPV6_NH_HH_IDX].nh == TPM_IPV6_NH_HH)
-		printk(KERN_INFO "\tHOP by HOP Header\n");
+		mvOsPrintf("\tHOP by HOP Header\n");
 	if (ip6_nh[TPM_IPV6_NH_DH_IDX].nh == TPM_IPV6_NH_DH)
-		printk(KERN_INFO "\tDestination Header\n");
+		mvOsPrintf("\tDestination Header\n");
 	if (ip6_nh[TPM_IPV6_NH_RH_IDX].nh == TPM_IPV6_NH_RH)
-		printk(KERN_INFO "\tRoute Header\n");
+		mvOsPrintf("\tRoute Header\n");
 	if (ip6_nh[TPM_IPV6_NH_FH_IDX].nh == TPM_IPV6_NH_FH)
-		printk(KERN_INFO "\tFragment Header\n");
+		mvOsPrintf("\tFragment Header\n");
 	if (ip6_nh[TPM_IPV6_NH_EH_IDX].nh == TPM_IPV6_NH_EH)
-		printk(KERN_INFO "\tESP Header\n");
+		mvOsPrintf("\tESP Header\n");
 	if (ip6_nh[TPM_IPV6_NH_AH_IDX].nh == TPM_IPV6_NH_AH)
-		printk(KERN_INFO "\tAuth Header\n");
+		mvOsPrintf("\tAuth Header\n");
 
 	return;
 }
@@ -387,41 +387,42 @@ static void tpm_prs_ipv6_spec_nh_dump(void)
 /* ========================================================================== */
 /*             TPM CFG SYS FS API                                             */
 /* ========================================================================== */
-int sys_help_tpm_parser_cmd(char *buf)
+int sys_help_tpm_parser_cmd(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* IPV6 Special Next header */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [ipv6_nh]  > ipv6_spec_nh_add -  add IPV6 next header need special treat to TPM DB\n");
-	off += sprintf(buf+off, "echo [ipv6_nh]  > ipv6_spec_nh_del -  delete IPV6 next header from TPM DB special treat list\n");
-	off += sprintf(buf+off, "\tipv6_nh        (dec)IPV6 next header value\n");
-	off += sprintf(buf+off, "\t       00       Hop by hop header\n");
-	off += sprintf(buf+off, "\t       43       Routing header\n");
-	off += sprintf(buf+off, "\t       44       Fragment header\n");
-	off += sprintf(buf+off, "\t       51       Authentication header\n");
-	off += sprintf(buf+off, "\t       52       ESP header\n");
-	off += sprintf(buf+off, "\t       60       Destination header\n");
-
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [ipv6_nh]  > ipv6_spec_nh_add -  add IPV6 next header need special treat to TPM DB\n");
+	o += scnprintf(b+o, s-o, "echo [ipv6_nh]  > ipv6_spec_nh_del -  delete IPV6 next header from TPM DB special treat list\n");
+	o += scnprintf(b+o, s-o, "\tipv6_nh        (dec)IPV6 next header value\n");
+	o += scnprintf(b+o, s-o, "\t       00       Hop by hop header\n");
+	o += scnprintf(b+o, s-o, "\t       43       Routing header\n");
+	o += scnprintf(b+o, s-o, "\t       44       Fragment header\n");
+	o += scnprintf(b+o, s-o, "\t       51       Authentication header\n");
+	o += scnprintf(b+o, s-o, "\t       52       ESP header\n");
+	o += scnprintf(b+o, s-o, "\t       60       Destination header\n");
+
+	o += scnprintf(b+o, s-o, "\n");
 
 	/* Unexpected pky lu_id gen */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [unexp_en]  > unexp_luid_gen -  add/del parser rule to generate unexpected lookup ID\n");
-	off += sprintf(buf+off, "\tunexp_en        (dec)1: add lu_id rule; 0: delete lu_id rule\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [unexp_en]  > unexp_luid_gen -  add/del parser rule to generate unexpected lookup ID\n");
+	o += scnprintf(b+o, s-o, "\tunexp_en        (dec)1: add lu_id rule; 0: delete lu_id rule\n");
 
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
 	/* xxx info dump */
-	off += sprintf(buf+off, "cat luid_info_dump    -  dump all lookup ID information from DB\n");
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "cat ipv6_spec_nh_dump -  dump IPV6 NH need special treat from DB\n");
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "cat luid_info_dump    -  dump all lookup ID information from DB\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "cat ipv6_spec_nh_dump -  dump IPV6 NH need special treat from DB\n");
+	o += scnprintf(b+o, s-o, "\n");
 #ifdef CONFIG_MV_ETH_PP2_1
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "cat prs_hit_dump      -  dump parser hit rules (only for ALP A0 version)\n");
-	off += sprintf(buf+off, "\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "cat prs_hit_dump      -  dump parser hit rules (only for ALP A0 version)\n");
+	o += scnprintf(b+o, s-o, "\n");
 #endif
-	return off;
+	return o;
 }
 
 /******************************************************************************/
@@ -455,12 +456,12 @@ void sfs_tpm_cfg_unexp_luid_gen(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &unexp_en);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_prs_unexp_lu_id_op(unexp_en))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 
 		}
 	}
@@ -494,12 +495,12 @@ void sfs_tpm_cfg_ipv6_spec_nh_add(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &ipv6_nh_value);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_init_spec_ipv6nh_add((unsigned char)ipv6_nh_value))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 
 		}
 	}
@@ -533,12 +534,12 @@ void sfs_tpm_cfg_ipv6_spec_nh_del(const char *buf, size_t len)
 		/* Get parameters */
 		parsedargs = sscanf(buf, "%d", &ipv6_nh_value);
 		if (parsedargs != numparms)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsedargs, numparms);
 		else {
 			if (!tpm_init_spec_ipv6nh_del((unsigned char)ipv6_nh_value))
-				printk(KERN_INFO "OK\n");
+				mvOsPrintf("OK\n");
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 
 		}
 	}
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_switch.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_switch.c
index 2898e00..3e996b0 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_switch.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_switch.c
@@ -46,134 +46,138 @@ extern struct tpm_ioctl_mng_t		tpm_sfs_2_ioctl_command;
 /* ========================================================================== */
 /*             TPM CFG SYS FS HELP                                            */
 /* ========================================================================== */
-int tpm_sys_sw_help_phy(char *buf)
+int tpm_sys_sw_help_phy(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* TPM switch PHY API */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [port] [enable]                > admin_state_set   -  set port admin state\n");
-	off += sprintf(buf+off, "echo [port]                         > admin_state_get   -  get port admin state\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable\n\n");
-	off += sprintf(buf+off, "echo [port] [enable] [interval]     > flow_control_set  -  set flow control\n");
-	off += sprintf(buf+off, "echo [port]                         > flow_control_get  -  get flow control\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable | interval(dec): pause frame interval in unit of second\n\n");
-	off += sprintf(buf+off, "echo [port] [en] [speed] [duplex]   > link_mode_set     -  set switch port link mode\n");
-	off += sprintf(buf+off, "echo [port]                         > link_mode_get     -  get switch port link mode\n");
-	off += sprintf(buf+off, "echo [port]                         > link_state_get    -  get switch port dynamic link state\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | en(dec): config auto-negotiation, 0:disable, 1:enable | speed(dec): speed mode, 0:10M, 1:100M, 2:1000M, 3:auto\n");
-	off += sprintf(buf+off, "\tduplex(dec): duplex mode, 0:half duplex, 1:full duplex, 2:auto\n");
-	off += sprintf(buf+off, "\tnote:speed and duplex auto mode is only valid when auto-negotiation is enabled\n\n");
-	off += sprintf(buf+off, "echo [port] [dir] [enable]          > loopback_set      -  set port loopback\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | dir(dec): 0:ingress, 1:egress, 2:both of dir | enable(dec): 0:disable, 1:enable\n\n");
-	off += sprintf(buf+off, "echo [port] [dir]                   > loopback_get      -  get port loopback\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | dir(dec): 0:ingress, 1:egress (both NOT support)\n\n");
-	return off;
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [port] [enable]                > admin_state_set   -  set port admin state\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > admin_state_get   -  get port admin state\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [enable] [interval]     > flow_control_set  -  set flow control\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > flow_control_get  -  get flow control\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable | interval(dec): pause frame interval in unit of second\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [en] [speed] [duplex]   > link_mode_set     -  set switch port link mode\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > link_mode_get     -  get switch port link mode\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > link_state_get    -  get switch port dynamic link state\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | en(dec): config auto-negotiation, 0:disable, 1:enable | speed(dec): speed mode, 0:10M, 1:100M, 2:1000M, 3:auto\n");
+	o += scnprintf(b+o, s-o, "\tduplex(dec): duplex mode, 0:half duplex, 1:full duplex, 2:auto\n");
+	o += scnprintf(b+o, s-o, "\tnote:speed and duplex auto mode is only valid when auto-negotiation is enabled\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir] [enable]          > loopback_set      -  set port loopback\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | dir(dec): 0:ingress, 1:egress, 2:both of dir | enable(dec): 0:disable, 1:enable\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir]                   > loopback_get      -  get port loopback\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | dir(dec): 0:ingress, 1:egress (both NOT support)\n\n");
+	return o;
 }
 
-int tpm_sys_sw_help_mac(char *buf)
+int tpm_sys_sw_help_mac(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* TPM switch MAC API */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [time]                         > mac_age_set         -  set MAC aging time\n");
-	off += sprintf(buf+off, "echo 1                              > mac_age_get         -  get MAC aging time\n");
-	off += sprintf(buf+off, "\ttime(dec): MAC aging time in unit of second\n\n");
-	off += sprintf(buf+off, "echo [port] [enable] [limit]        > mac_num_set         -  set max MAC address number could be learned\n");
-	off += sprintf(buf+off, "echo [port]                         > mac_num_get         -  get max MAC address number could be learned\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable | limit(dec): mac MAC address number\n\n");
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [port_bm] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan] [mode]  > mac_addr_add   -  add MAC address to ATU\n");
-	off += sprintf(buf+off, "echo [port] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan]            > mac_addr_del   -  delete MAC address from ATU\n");
-	off += sprintf(buf+off, "\tport_bm(hex): switch port bitmap | mac[x](hex): byte x of MAC addr | vlan(dec): VLAN ID | mode(dec): 0:dynamic MAC, 1: static MAC\n\n");
-	off += sprintf(buf+off, "echo 1                              > mac_addr_clear      -  clear all MAC address\n");
-	off += sprintf(buf+off, "echo [port] [mode]                  > mac_table_clear     -  clear MAC address according to port and mode\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | mode(dec): 0:dynamic MAC, 1: static MAC, 2:unicast MAC, 3:multicast MAC, 4:all MAC address\n\n");
-	off += sprintf(buf+off, "echo [port] [mode]                  > mac_filter_mode_set -  set switch port MAC filter mode\n");
-	off += sprintf(buf+off, "echo [port]                         > mac_filter_mode_get -  get switch port MAC filter mode\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | mode(dec): 0:no filter, 1: black list on DMAC, 2:white list on DMAC, 3:black list on SMAC, 4:white list on SMAC\n\n");
-	off += sprintf(buf+off, "echo [port] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan] [mode]    > mac_filter_entry_add -  add MAC filter entry\n");
-	off += sprintf(buf+off, "echo [port] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan] [mode]    > mac_filter_entry_del -  delete MAC filter entry\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | mac[x](hex): byte x of MAC addr | vlan(dec): VLAN ID\n");
-	off += sprintf(buf+off, "\tmode(dec): 0:no filter, 1: black list on DMAC, 2:white list on DMAC, 3:black list on SMAC, 4:white list on SMAC\n\n");
-	off += sprintf(buf+off, "echo [mtu]                          > mtu_set             -  set switch MTU\n");
-	off += sprintf(buf+off, "echo 1                              > mtu_get             -  get switch MTU\n");
-	off += sprintf(buf+off, "\tmtu(dec): MTU size, support three jumbo modes: 1522, 2048, 10240\n\n");
-	off += sprintf(buf+off, "echo [port] [dir] [en] [mode] [rate]> rate_limit_set      -  set rate limit for all data traffic\n");
-	off += sprintf(buf+off, "echo [port] [dir]                   > rate_limit_get      -  get rate limit of all data traffic\n");
-	off += sprintf(buf+off, "echo [port] [dir] [en] [mode] [rate]> mc_proto_rate_set   -  set rate limit for multicast protocol packets\n");
-	off += sprintf(buf+off, "echo [port] [dir]                   > mc_proto_rate_get   -  get rate limit of multicast protocol packets\n");
-	off += sprintf(buf+off, "echo [port] [dir] [en] [mode] [rate]> mc_data_rate_set    -  set rate limit for multicast data traffic packets\n");
-	off += sprintf(buf+off, "echo [port] [dir]                   > mc_data_rate_get    -  get rate limit of for multicast data traffic packets\n");
-	off += sprintf(buf+off, "echo [port] [dir] [en] [mode] [rate]> bc_rate_set         -  set rate limit for broadcast packets\n");
-	off += sprintf(buf+off, "echo [port] [dir]                   > bc_rate_get         -  get rate limit for broadcast packets\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | dir(dec): 0:ingress, 1:egress, 2:both of dir | en(dec): 0:disable, 1:enable | mode(dec): 0:frame, 1:layer 1, 2:layer 2, 3:layer 3\n");
-	off += sprintf(buf+off, "\trate(dec): rate in unit of Kbps or frames\n\n");
-
-	return off;
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [time]                         > mac_age_set         -  set MAC aging time\n");
+	o += scnprintf(b+o, s-o, "echo 1                              > mac_age_get         -  get MAC aging time\n");
+	o += scnprintf(b+o, s-o, "\ttime(dec): MAC aging time in unit of second\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [enable] [limit]        > mac_num_set         -  set max MAC address number could be learned\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > mac_num_get         -  get max MAC address number could be learned\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable | limit(dec): mac MAC address number\n\n");
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [port_bm] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan] [mode]  > mac_addr_add   -  add MAC address to ATU\n");
+	o += scnprintf(b+o, s-o, "echo [port] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan]            > mac_addr_del   -  delete MAC address from ATU\n");
+	o += scnprintf(b+o, s-o, "\tport_bm(hex): switch port bitmap | mac[x](hex): byte x of MAC addr | vlan(dec): VLAN ID | mode(dec): 0:dynamic MAC, 1: static MAC\n\n");
+	o += scnprintf(b+o, s-o, "echo 1                              > mac_addr_clear      -  clear all MAC address\n");
+	o += scnprintf(b+o, s-o, "echo [port] [mode]                  > mac_table_clear     -  clear MAC address according to port and mode\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | mode(dec): 0:dynamic MAC, 1: static MAC, 2:unicast MAC, 3:multicast MAC, 4:all MAC address\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [mode]                  > mac_filter_mode_set -  set switch port MAC filter mode\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > mac_filter_mode_get -  get switch port MAC filter mode\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | mode(dec): 0:no filter, 1: black list on DMAC, 2:white list on DMAC, 3:black list on SMAC, 4:white list on SMAC\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan] [mode]    > mac_filter_entry_add -  add MAC filter entry\n");
+	o += scnprintf(b+o, s-o, "echo [port] mac[6] mac[5] mac[4] mac[3] mac[2] mac[1] [vlan] [mode]    > mac_filter_entry_del -  delete MAC filter entry\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | mac[x](hex): byte x of MAC addr | vlan(dec): VLAN ID\n");
+	o += scnprintf(b+o, s-o, "\tmode(dec): 0:no filter, 1: black list on DMAC, 2:white list on DMAC, 3:black list on SMAC, 4:white list on SMAC\n\n");
+	o += scnprintf(b+o, s-o, "echo [mtu]                          > mtu_set             -  set switch MTU\n");
+	o += scnprintf(b+o, s-o, "echo 1                              > mtu_get             -  get switch MTU\n");
+	o += scnprintf(b+o, s-o, "\tmtu(dec): MTU size, support three jumbo modes: 1522, 2048, 10240\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir] [en] [mode] [rate]> rate_limit_set      -  set rate limit for all data traffic\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir]                   > rate_limit_get      -  get rate limit of all data traffic\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir] [en] [mode] [rate]> mc_proto_rate_set   -  set rate limit for multicast protocol packets\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir]                   > mc_proto_rate_get   -  get rate limit of multicast protocol packets\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir] [en] [mode] [rate]> mc_data_rate_set    -  set rate limit for multicast data traffic packets\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir]                   > mc_data_rate_get    -  get rate limit of for multicast data traffic packets\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir] [en] [mode] [rate]> bc_rate_set         -  set rate limit for broadcast packets\n");
+	o += scnprintf(b+o, s-o, "echo [port] [dir]                   > bc_rate_get         -  get rate limit for broadcast packets\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | dir(dec): 0:ingress, 1:egress, 2:both of dir | en(dec): 0:disable, 1:enable | mode(dec): 0:frame, 1:layer 1, 2:layer 2, 3:layer 3\n");
+	o += scnprintf(b+o, s-o, "\trate(dec): rate in unit of Kbps or frames\n\n");
+
+	return o;
 }
 
-int tpm_sys_sw_help_gen(char *buf)
+int tpm_sys_sw_help_gen(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* TPM switch generic API */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [port] [mode]                  > ingress_mode_set  -  set port VLAN ingress mode\n");
-	off += sprintf(buf+off, "echo [port]                         > ingress_mode_get  -  get port VLAN ingress mode\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | mode(dec): 0:as-is, 1:discard all, 2:discard untagged, 3:discard tagged\n\n");
-	off += sprintf(buf+off, "echo [port] [vid] [pbits]           > pvid_set          -  set port default VLAN ID and P-bits\n");
-	off += sprintf(buf+off, "echo [port]                         > pvid_get          -  get port default VLAN ID and P-bits\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | vid(dec): VLAN ID | pbits(dec): P-bits\n\n");
-	off += sprintf(buf+off, "echo [port] [min] [max] [mode]      > vlan_set          -  set a group of VLAN to port\n");
-	off += sprintf(buf+off, "echo [port] [min] [max]             > vlan_del          -  delete a group of port VLAN\n");
-	off += sprintf(buf+off, "echo [vlan]                         > vlan_get          -  get port VLAN information\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | min(dec): MIN VLAN | max(dec): MAX VLAN | mode(dec): 0:as-is, 1:not in VLAN, 2:strip VLAN, 3:keep VLAN\n\n");
-	off += sprintf(buf+off, "echo [port] [enable]                > vlan_filter_set   -  set port VLAN filter\n");
-	off += sprintf(buf+off, "echo [port]                         > vlan_filter_get   -  get port VLAN filter\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable\n\n");
-	off += sprintf(buf+off, "echo [port] [port_mask]             > isolate_mask_set  -  set isolate mask\n");
-	off += sprintf(buf+off, "echo [port]                         > isolate_mask_get  -  get isolate mask\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | port_mask(hex): destination port bitmap for isolation, 0: not isolate, 1:isolate\n\n");
-	off += sprintf(buf+off, "echo [port] [pkt_type] [port_mask]  > flood_mask_set    -  set flooding control for specific packets and destination ports\n");
-	off += sprintf(buf+off, "echo [port] [pkt_type]              > flood_mask_get    -  get flooding control for specific packets and destination ports\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | pkt_type(dec): packet type to be flooded, 0:Unknown DA unicast, 1:Unknown SA unicast, 2:Unknown IPv4 multicast,\n");
-	off += sprintf(buf+off, "\t3:broadcast, 4:SA belong ot other port, 5:Unknown IPv6 multicast | port_mask(hex): port bitmap for flooding control, 1: flood, 0: dont flood\n");
-	off += sprintf(buf+off, "\tNote: need to clear ATU address if want to disable flooding\n\n");
-	off += sprintf(buf+off, "echo 1                              > sw_count_clear    -  clear the counters of all switch ports\n\n");
-	off += sprintf(buf+off, "echo [port]                         > port_count_clear  -  clear the counters of specific port\n");
-	off += sprintf(buf+off, "\tport(dec): switch port\n\n");
-	off += sprintf(buf+off, "echo [sport] [dir] [en] [dport]     > port_mirror_set   -  set port mirror\n");
-	off += sprintf(buf+off, "echo [sport] [dir]                  > port_mirror_get   -  get port mirror\n");
-	off += sprintf(buf+off, "\tsport(dec): source switch port | dir(dec): 0:ingress, 1:egress, 2:both of dir | enable(dec): 0:disable,1:enable | dport(dec): destination port\n\n");
-	off += sprintf(buf+off, "echo [port] [queue] [mode] [weight] > port_qos_set      -  set switch port QoS\n");
-	off += sprintf(buf+off, "echo [port] [queue]                 > port_qos_get      -  get switch port QoS\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | queue(dec): switch queue | mode(dec): 0:SP, 1:WRR, 2:both | weight(dec): weight for WRR, ranging from 0 to 3\n\n");
-	off += sprintf(buf+off, "echo [port] [reset]                 > stat1_get         -  get stat1 counters\n");
-	off += sprintf(buf+off, "echo [port] [reset]                 > stat2_get         -  get stat2 counters\n");
-	off += sprintf(buf+off, "echo [port] [reset]                 > stat3_get         -  get stat3 counters\n");
-	off += sprintf(buf+off, "echo [port] [reset]                 > stat_all_get      -  get stat all counters\n");
-	off += sprintf(buf+off, "\tport(dec): switch port | reset(dec): reset counters, 0: do not reset, 1: reset\n");
-	return off;
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [port] [mode]                  > ingress_mode_set  -  set port VLAN ingress mode\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > ingress_mode_get  -  get port VLAN ingress mode\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | mode(dec): 0:as-is, 1:discard all, 2:discard untagged, 3:discard tagged\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [vid] [pbits]           > pvid_set          -  set port default VLAN ID and P-bits\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > pvid_get          -  get port default VLAN ID and P-bits\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | vid(dec): VLAN ID | pbits(dec): P-bits\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [min] [max] [mode]      > vlan_set          -  set a group of VLAN to port\n");
+	o += scnprintf(b+o, s-o, "echo [port] [min] [max]             > vlan_del          -  delete a group of port VLAN\n");
+	o += scnprintf(b+o, s-o, "echo [vlan]                         > vlan_get          -  get port VLAN information\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | min(dec): MIN VLAN | max(dec): MAX VLAN | mode(dec): 0:as-is, 1:not in VLAN, 2:strip VLAN, 3:keep VLAN\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [enable]                > vlan_filter_set   -  set port VLAN filter\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > vlan_filter_get   -  get port VLAN filter\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | enable(dec): 0:disable, 1:enable\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [port_mask]             > isolate_mask_set  -  set isolate mask\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > isolate_mask_get  -  get isolate mask\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | port_mask(hex): destination port bitmap for isolation, 0: not isolate, 1:isolate\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [pkt_type] [port_mask]  > flood_mask_set    -  set flooding control for specific packets and destination ports\n");
+	o += scnprintf(b+o, s-o, "echo [port] [pkt_type]              > flood_mask_get    -  get flooding control for specific packets and destination ports\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | pkt_type(dec): packet type to be flooded, 0:Unknown DA unicast, 1:Unknown SA unicast, 2:Unknown IPv4 multicast,\n");
+	o += scnprintf(b+o, s-o, "\t3:broadcast, 4:SA belong ot other port, 5:Unknown IPv6 multicast | port_mask(hex): port bitmap for flooding control, 1: flood, 0: dont flood\n");
+	o += scnprintf(b+o, s-o, "\tNote: need to clear ATU address if want to disable flooding\n\n");
+	o += scnprintf(b+o, s-o, "echo 1                              > sw_count_clear    -  clear the counters of all switch ports\n\n");
+	o += scnprintf(b+o, s-o, "echo [port]                         > port_count_clear  -  clear the counters of specific port\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port\n\n");
+	o += scnprintf(b+o, s-o, "echo [sport] [dir] [en] [dport]     > port_mirror_set   -  set port mirror\n");
+	o += scnprintf(b+o, s-o, "echo [sport] [dir]                  > port_mirror_get   -  get port mirror\n");
+	o += scnprintf(b+o, s-o, "\tsport(dec): source switch port | dir(dec): 0:ingress, 1:egress, 2:both of dir | enable(dec): 0:disable,1:enable | dport(dec): destination port\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [queue] [mode] [weight] > port_qos_set      -  set switch port QoS\n");
+	o += scnprintf(b+o, s-o, "echo [port] [queue]                 > port_qos_get      -  get switch port QoS\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | queue(dec): switch queue | mode(dec): 0:SP, 1:WRR, 2:both | weight(dec): weight for WRR, ranging from 0 to 3\n\n");
+	o += scnprintf(b+o, s-o, "echo [port] [reset]                 > stat1_get         -  get stat1 counters\n");
+	o += scnprintf(b+o, s-o, "echo [port] [reset]                 > stat2_get         -  get stat2 counters\n");
+	o += scnprintf(b+o, s-o, "echo [port] [reset]                 > stat3_get         -  get stat3 counters\n");
+	o += scnprintf(b+o, s-o, "echo [port] [reset]                 > stat_all_get      -  get stat all counters\n");
+	o += scnprintf(b+o, s-o, "\tport(dec): switch port | reset(dec): reset counters, 0: do not reset, 1: reset\n");
+	return o;
 }
 
-int tpm_sys_sw_help_debug(char *buf)
+int tpm_sys_sw_help_debug(char *b)
 {
-	int off = 0;
+	int o = 0; /* buffer offset */
+	int s = PAGE_SIZE; /* buffer size */
 
 	/* TPM switch debug API */
-	off += sprintf(buf+off, "\n");
-	off += sprintf(buf+off, "echo [mode]                         > head_mode_set     -  set head mode of switch uplink port\n");
-	off += sprintf(buf+off, "echo 1                              > head_mode_get     -  get head mode of switch uplink port\n");
-	off += sprintf(buf+off, "\tmode(dec): 0:No header, 1:Marvell header, 2:Eth type DSA, 3:DSA, 4:Ext DSA\n\n");
-	off += sprintf(buf+off, "echo [mode]                         > atu_dump          -  dump ATU entries according to MAC address mode\n");
-	off += sprintf(buf+off, "\tmode(dec): 0:dynamic MAC addr, 1:static MAC addr, 2:unicast MAC addr, 3:multicast MAC addr, 4:all MAC addr\n\n");
-	off += sprintf(buf+off, "echo [vid]                          > vtu_dump          -  dump VTU entry according to VLAN ID\n");
-	off += sprintf(buf+off, "\tvid(dec): VLAN ID\n\n");
-	off += sprintf(buf+off, "echo 1                              > vtu_shadow_dump   -  dump all VTU software shadow entires\n\n");
-
-	return off;
+	o += scnprintf(b+o, s-o, "\n");
+	o += scnprintf(b+o, s-o, "echo [mode]                         > head_mode_set     -  set head mode of switch uplink port\n");
+	o += scnprintf(b+o, s-o, "echo 1                              > head_mode_get     -  get head mode of switch uplink port\n");
+	o += scnprintf(b+o, s-o, "\tmode(dec): 0:No header, 1:Marvell header, 2:Eth type DSA, 3:DSA, 4:Ext DSA\n\n");
+	o += scnprintf(b+o, s-o, "echo [mode]                         > atu_dump          -  dump ATU entries according to MAC address mode\n");
+	o += scnprintf(b+o, s-o, "\tmode(dec): 0:dynamic MAC addr, 1:static MAC addr, 2:unicast MAC addr, 3:multicast MAC addr, 4:all MAC addr\n\n");
+	o += scnprintf(b+o, s-o, "echo [vid]                          > vtu_dump          -  dump VTU entry according to VLAN ID\n");
+	o += scnprintf(b+o, s-o, "\tvid(dec): VLAN ID\n\n");
+	o += scnprintf(b+o, s-o, "echo 1                              > vtu_shadow_dump   -  dump all VTU software shadow entires\n\n");
+
+	return o;
 }
 
 /******************************************************************************/
@@ -2443,13 +2447,13 @@ void tpm_sys_sw_ingress_mode_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_vlan_ingress_mode_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_ingress_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2483,17 +2487,17 @@ void tpm_sys_sw_ingress_mode_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_vlan_ingress_mode_get((enum tpm_sw_port_t)port, &mode))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), mode(%s)\n",
+				mvOsPrintf("OK, port(%d), mode(%s)\n",
 					port, tpm_sw_lookup_enum_str(TPM_SW_ENUM_INGRESS_MODE, mode));
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2530,12 +2534,12 @@ void tpm_sys_sw_pvid_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d", &port, &vid, &pbits);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_pvid_set((enum tpm_sw_port_t)port, (unsigned short)vid, (unsigned char)pbits))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2570,16 +2574,16 @@ void tpm_sys_sw_pvid_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_pvid_get((enum tpm_sw_port_t)port, &vid, &pbits))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), default vid(%d), p-bits(%d)\n", port, vid, pbits);
+				mvOsPrintf("OK, port(%d), default vid(%d), p-bits(%d)\n", port, vid, pbits);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2618,7 +2622,7 @@ void tpm_sys_sw_vlan_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d", &port, &min_vid, &max_vid, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_vlan_set((enum tpm_sw_port_t)port,
 				(unsigned short)min_vid,
@@ -2626,7 +2630,7 @@ void tpm_sys_sw_vlan_set(const char *buf, size_t len)
 				(enum tpm_sw_vlan_egress_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2663,14 +2667,14 @@ void tpm_sys_sw_vlan_del(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d", &port, &min_vid, &max_vid);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_vlan_del((enum tpm_sw_port_t)port,
 				(unsigned short)min_vid,
 				(unsigned short)max_vid))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2705,16 +2709,16 @@ void tpm_sys_sw_vlan_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &vlan);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_vlan_get((unsigned short)vlan, &fwd_bm, &tag_bm))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, fwd_bm(0x%02x) tag_bm(0x%02x)\n", fwd_bm, tag_bm);
+				mvOsPrintf("OK, fwd_bm(0x%02x) tag_bm(0x%02x)\n", fwd_bm, tag_bm);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2749,12 +2753,12 @@ void tpm_sys_sw_vlan_filter_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &enable);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_vlan_filter_set((enum tpm_sw_port_t)port, (enum tpm_sw_config_state_t)enable))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2788,16 +2792,16 @@ void tpm_sys_sw_vlan_filter_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_vlan_filter_get((enum tpm_sw_port_t)port, &enable))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, enable(%d)\n", enable);
+				mvOsPrintf("OK, enable(%d)\n", enable);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2832,12 +2836,12 @@ void tpm_sys_sw_admin_state_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &enable);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_enable_state_set((enum tpm_sw_port_t)port, (enum tpm_sw_config_state_t)enable))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2871,17 +2875,17 @@ void tpm_sys_sw_admin_state_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_enable_state_get((enum tpm_sw_port_t)port, &enable))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), sate(%s)\n",
+				mvOsPrintf("OK, port(%d), sate(%s)\n",
 					port, tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable));
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2918,14 +2922,14 @@ void tpm_sys_sw_flow_control_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d", &port, &enable, &pause_interval);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_flow_control_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_config_state_t)enable,
 				pause_interval))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -2960,17 +2964,17 @@ void tpm_sys_sw_flow_control_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_flow_control_get((enum tpm_sw_port_t)port, &enable, &interval))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), flow control sate(%s), interval(%d)\n",
+				mvOsPrintf("OK, port(%d), flow control sate(%s), interval(%d)\n",
 				       port, tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable), interval);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3005,12 +3009,12 @@ void tpm_sys_sw_isolate_mask_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %x", &port, &mask);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_isolate_mask_set((enum tpm_sw_port_t)port, (unsigned int)mask))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3044,16 +3048,16 @@ void tpm_sys_sw_isolate_mask_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_isolate_mask_get((enum tpm_sw_port_t)port, &mask))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), isolate mask(0x%x)\n", port, mask);
+				mvOsPrintf("OK, port(%d), isolate mask(0x%x)\n", port, mask);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3090,14 +3094,14 @@ void tpm_sys_sw_flood_mask_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %x", &port, &pkt_type, &mask);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_flood_control_mask_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_flood_packet_type_t)pkt_type,
 				(unsigned int)mask))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3133,7 +3137,7 @@ void tpm_sys_sw_flood_mask_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &pkt_type);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_flood_control_mask_get((enum tpm_sw_port_t)port,
 				(enum tpm_sw_flood_packet_type_t)pkt_type,
@@ -3141,11 +3145,11 @@ void tpm_sys_sw_flood_mask_get(const char *buf, size_t len)
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), pkt_type(%s), mask(0x%x)\n",
+				mvOsPrintf("OK, port(%d), pkt_type(%s), mask(0x%x)\n",
 				       port, tpm_sw_lookup_enum_str(TPM_SW_ENUM_FLOOD_TYPE, pkt_type), mask);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3178,12 +3182,12 @@ void tpm_sys_sw_sw_count_clear(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_all_count_clear())
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3216,16 +3220,16 @@ void tpm_sys_sw_port_count_clear(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_port_count_clear((enum tpm_sw_port_t)port))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d)\n", port);
+				mvOsPrintf("OK, port(%d)\n", port);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3264,7 +3268,7 @@ void tpm_sys_sw_link_mode_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d", &port, &auto_en, &speed, &duplex);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_link_mode_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_config_state_t)auto_en,
@@ -3272,7 +3276,7 @@ void tpm_sys_sw_link_mode_set(const char *buf, size_t len)
 				(enum tpm_sw_duplex_mode_t)duplex))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3308,19 +3312,19 @@ void tpm_sys_sw_link_mode_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_link_mode_get((enum tpm_sw_port_t)port, &auto_en, &speed, &duplex))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), auto_en(%s), speed(%s), duplex(%s)\n",
+				mvOsPrintf("OK, port(%d), auto_en(%s), speed(%s), duplex(%s)\n",
 				       port, tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, auto_en),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_SPEED_MODE, speed),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_DUPLEX_MODE, duplex));
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3356,20 +3360,20 @@ void tpm_sys_sw_link_state_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_link_state_get((enum tpm_sw_port_t)port, &link, &speed, &duplex))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), link(%s), speed(%s), duplex(%s)\n",
+				mvOsPrintf("OK, port(%d), link(%s), speed(%s), duplex(%s)\n",
 				       port,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_PORT_STATE, link),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_SPEED_MODE, speed),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_DUPLEX_MODE, duplex));
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3411,7 +3415,7 @@ void tpm_sys_sw_rate_limit_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d %d", &port, &dir, &enable, &mode, &rate);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_rate_limit_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3420,7 +3424,7 @@ void tpm_sys_sw_rate_limit_set(const char *buf, size_t len)
 				rate))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3458,7 +3462,7 @@ void tpm_sys_sw_rate_limit_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &dir);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_rate_limit_get((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3468,7 +3472,7 @@ void tpm_sys_sw_rate_limit_get(const char *buf, size_t len)
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
+				mvOsPrintf("OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
 				       port,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_PORT_DIR, dir),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable),
@@ -3476,7 +3480,7 @@ void tpm_sys_sw_rate_limit_get(const char *buf, size_t len)
 				       rate);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3518,7 +3522,7 @@ void tpm_sys_sw_mc_proto_rate_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d %d", &port, &dir, &enable, &mode, &rate);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mc_proto_rate_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3527,7 +3531,7 @@ void tpm_sys_sw_mc_proto_rate_set(const char *buf, size_t len)
 				rate))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3565,7 +3569,7 @@ void tpm_sys_sw_mc_proto_rate_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &dir);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mc_proto_rate_get((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3575,7 +3579,7 @@ void tpm_sys_sw_mc_proto_rate_get(const char *buf, size_t len)
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
+				mvOsPrintf("OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
 				       port,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_PORT_DIR, dir),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable),
@@ -3583,7 +3587,7 @@ void tpm_sys_sw_mc_proto_rate_get(const char *buf, size_t len)
 				       rate);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3625,7 +3629,7 @@ void tpm_sys_sw_mc_data_rate_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d %d", &port, &dir, &enable, &mode, &rate);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mc_data_rate_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3634,7 +3638,7 @@ void tpm_sys_sw_mc_data_rate_set(const char *buf, size_t len)
 				rate))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3672,7 +3676,7 @@ void tpm_sys_sw_mc_data_rate_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &dir);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mc_data_rate_get((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3682,7 +3686,7 @@ void tpm_sys_sw_mc_data_rate_get(const char *buf, size_t len)
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
+				mvOsPrintf("OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
 				       port,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_PORT_DIR, dir),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable),
@@ -3690,7 +3694,7 @@ void tpm_sys_sw_mc_data_rate_get(const char *buf, size_t len)
 				       rate);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3732,7 +3736,7 @@ void tpm_sys_sw_bc_rate_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d %d", &port, &dir, &enable, &mode, &rate);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_broadcast_rate_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3740,7 +3744,7 @@ void tpm_sys_sw_bc_rate_set(const char *buf, size_t len)
 				(enum tpm_sw_rate_limit_mode_t)mode, rate))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3778,7 +3782,7 @@ void tpm_sys_sw_bc_rate_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &dir);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_broadcast_rate_get((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3788,7 +3792,7 @@ void tpm_sys_sw_bc_rate_get(const char *buf, size_t len)
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
+				mvOsPrintf("OK, port(%d), dir(%s), enable(%s), mode(%s), rate(%d)\n",
 				       port,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_PORT_DIR, dir),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable),
@@ -3796,7 +3800,7 @@ void tpm_sys_sw_bc_rate_get(const char *buf, size_t len)
 				       rate);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3835,7 +3839,7 @@ void tpm_sys_sw_port_mirror_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d", &sport, &dir, &enable, &dport);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mirror_set((enum tpm_sw_port_t)sport,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3843,7 +3847,7 @@ void tpm_sys_sw_port_mirror_set(const char *buf, size_t len)
 				(enum tpm_sw_port_t)dport))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3880,7 +3884,7 @@ void tpm_sys_sw_port_mirror_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &sport, &dir);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mirror_get((enum tpm_sw_port_t)sport,
 				(enum tpm_sw_port_dir_t)dir,
@@ -3889,14 +3893,14 @@ void tpm_sys_sw_port_mirror_get(const char *buf, size_t len)
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, sport(%d), dir(%s), enable(%s), dport(%d)\n",
+				mvOsPrintf("OK, sport(%d), dir(%s), enable(%s), dport(%d)\n",
 				       sport,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_PORT_DIR, dir),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable),
 				       dport);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3933,14 +3937,14 @@ void tpm_sys_sw_loopback_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d", &port, &dir, &enable);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_loopback_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_port_dir_t)dir,
 				(enum tpm_sw_config_state_t)enable))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -3976,20 +3980,20 @@ void tpm_sys_sw_loopback_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &dir);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_loopback_get((enum tpm_sw_port_t)port, (enum tpm_sw_port_dir_t)dir, &enable))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), dir(%s), loopback sate(%s)\n",
+				mvOsPrintf("OK, port(%d), dir(%s), loopback sate(%s)\n",
 				       port,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_PORT_DIR, dir),
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable));
 #endif
 
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4022,12 +4026,12 @@ void tpm_sys_sw_mac_age_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &time);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_aging_time_set(time))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4061,16 +4065,16 @@ void tpm_sys_sw_mac_age_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_aging_time_get(&time))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, time(%d)\n", time);
+				mvOsPrintf("OK, time(%d)\n", time);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4107,14 +4111,14 @@ void tpm_sys_sw_mac_num_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d", &port, &enable, &limit);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_learn_limit_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_config_state_t)enable,
 				limit))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4149,19 +4153,19 @@ void tpm_sys_sw_mac_num_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_learn_limit_get((enum tpm_sw_port_t)port, &enable, &limit))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), enable(%s), limit(%d)\n",
+				mvOsPrintf("OK, port(%d), enable(%s), limit(%d)\n",
 				       port,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_CONFIG_STATE, enable),
 				       limit);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4207,7 +4211,7 @@ void tpm_sys_sw_mac_addr_add(const char *buf, size_t len)
 		parsed_args = sscanf(buf, "%x %x %x %x %x %x %x %d %d",
 					&port_bm, &mac6, &mac5, &mac4, &mac3, &mac2, &mac1, &vlan, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			mac[0] = (unsigned char)mac6;
 			mac[1] = (unsigned char)mac5;
@@ -4221,7 +4225,7 @@ void tpm_sys_sw_mac_addr_add(const char *buf, size_t len)
 				(enum tpm_sw_mac_addr_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4265,7 +4269,7 @@ void tpm_sys_sw_mac_addr_del(const char *buf, size_t len)
 		parsed_args = sscanf(buf, "%x %x %x %x %x %x %x %d",
 					&port, &mac6, &mac5, &mac4, &mac3, &mac2, &mac1, &vlan);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			mac[0] = (unsigned char)mac6;
 			mac[1] = (unsigned char)mac5;
@@ -4276,7 +4280,7 @@ void tpm_sys_sw_mac_addr_del(const char *buf, size_t len)
 			if (!_mv_tpm_sw_mac_address_del(port, (unsigned char *)&mac[0], (unsigned short)vlan))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4311,13 +4315,13 @@ void tpm_sys_sw_mac_filter_mode_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_filter_mode_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_mac_filter_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4351,17 +4355,17 @@ void tpm_sys_sw_mac_filter_mode_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_filter_mode_get((enum tpm_sw_port_t)port, &mode))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), mode(%s)\n",
+				mvOsPrintf("OK, port(%d), mode(%s)\n",
 				       port, tpm_sw_lookup_enum_str(TPM_SW_ENUM_MAC_FILTER_MODE, mode));
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4407,7 +4411,7 @@ void tpm_sys_sw_mac_filter_entry_add(const char *buf, size_t len)
 		parsed_args = sscanf(buf, "%d %x %x %x %x %x %x %d %d",
 					&port, &mac6, &mac5, &mac4, &mac3, &mac2, &mac1, &vlan, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			mac[0] = (unsigned char)mac6;
 			mac[1] = (unsigned char)mac5;
@@ -4421,7 +4425,7 @@ void tpm_sys_sw_mac_filter_entry_add(const char *buf, size_t len)
 				(enum tpm_sw_mac_filter_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4467,7 +4471,7 @@ void tpm_sys_sw_mac_filter_entry_del(const char *buf, size_t len)
 		parsed_args = sscanf(buf, "%d %x %x %x %x %x %x %d %d",
 					&port, &mac6, &mac5, &mac4, &mac3, &mac2, &mac1, &vlan, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			mac[0] = (unsigned char)mac6;
 			mac[1] = (unsigned char)mac5;
@@ -4481,7 +4485,7 @@ void tpm_sys_sw_mac_filter_entry_del(const char *buf, size_t len)
 				(enum tpm_sw_mac_filter_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4514,12 +4518,12 @@ void tpm_sys_sw_mac_addr_clear(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_address_clear())
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4554,12 +4558,12 @@ void tpm_sys_sw_mac_table_clear(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mac_table_clear((enum tpm_sw_port_t)port, (enum tpm_sw_mac_addr_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4598,14 +4602,14 @@ void tpm_sys_sw_port_qos_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d %d %d", &port, &queue, &mode, &weight);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_qos_set((enum tpm_sw_port_t)port,
 				(enum tpm_sw_queue_t)queue,
 				(enum tpm_sw_qos_mode_t)mode, (unsigned char)weight))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4642,20 +4646,20 @@ void tpm_sys_sw_port_qos_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &queue);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_qos_get((enum tpm_sw_port_t)port, (enum tpm_sw_queue_t)queue, &mode, &weight))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, port(%d), queue(%d), mode(%s), weight(%d)\n",
+				mvOsPrintf("OK, port(%d), queue(%d), mode(%s), weight(%d)\n",
 				       port,
 				       queue,
 				       tpm_sw_lookup_enum_str(TPM_SW_ENUM_QOS_MODE, mode),
 				       weight);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4688,12 +4692,12 @@ void tpm_sys_sw_mtu_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &mtu);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mtu_set(mtu))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4727,16 +4731,16 @@ void tpm_sys_sw_mtu_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_mtu_get(&mtu))
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				{}
 #else
-				printk(KERN_INFO "OK, mtu(%d)\n", mtu);
+				mvOsPrintf("OK, mtu(%d)\n", mtu);
 #endif
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4772,30 +4776,30 @@ void tpm_sys_sw_stat1_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &reset);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_stat1_get((enum tpm_sw_port_t)port, (enum tpm_sw_count_reset_t)reset, &stat)) {
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				;
 #else
-				printk(KERN_INFO "OK, port(%d) stat1\n", port);
-				printk(KERN_INFO "-------------------------\n");
-				printk(KERN_INFO "inbytes:       %lld\n", stat.inbytes);
-				printk(KERN_INFO "inpkts:        %lld\n", stat.inpkts);
-				printk(KERN_INFO "inunicast:     %lld\n", stat.inunicast);
-				printk(KERN_INFO "inmulticast:   %lld\n", stat.inmulticast);
-				printk(KERN_INFO "inbroadcast:   %lld\n", stat.inbroadcast);
-				printk(KERN_INFO "indiscard:     %lld\n", stat.indiscard);
-				printk(KERN_INFO "outbytes:      %lld\n", stat.outbytes);
-				printk(KERN_INFO "outpkts:       %lld\n", stat.outpkts);
-				printk(KERN_INFO "outunicast:    %lld\n", stat.outunicast);
-				printk(KERN_INFO "outmulticast:  %lld\n", stat.outmulticast);
-				printk(KERN_INFO "outbroadcast:  %lld\n", stat.outbroadcast);
-				printk(KERN_INFO "outerror:      %lld\n", stat.outerror);
-				printk(KERN_INFO "outdiscard:    %lld\n", stat.outdiscard);
+				mvOsPrintf("OK, port(%d) stat1\n", port);
+				mvOsPrintf("-------------------------\n");
+				mvOsPrintf("inbytes:       %lld\n", stat.inbytes);
+				mvOsPrintf("inpkts:        %lld\n", stat.inpkts);
+				mvOsPrintf("inunicast:     %lld\n", stat.inunicast);
+				mvOsPrintf("inmulticast:   %lld\n", stat.inmulticast);
+				mvOsPrintf("inbroadcast:   %lld\n", stat.inbroadcast);
+				mvOsPrintf("indiscard:     %lld\n", stat.indiscard);
+				mvOsPrintf("outbytes:      %lld\n", stat.outbytes);
+				mvOsPrintf("outpkts:       %lld\n", stat.outpkts);
+				mvOsPrintf("outunicast:    %lld\n", stat.outunicast);
+				mvOsPrintf("outmulticast:  %lld\n", stat.outmulticast);
+				mvOsPrintf("outbroadcast:  %lld\n", stat.outbroadcast);
+				mvOsPrintf("outerror:      %lld\n", stat.outerror);
+				mvOsPrintf("outdiscard:    %lld\n", stat.outdiscard);
 #endif
 			} else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -4831,27 +4835,27 @@ void tpm_sys_sw_stat2_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &reset);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_stat2_get((enum tpm_sw_port_t)port, (enum tpm_sw_count_reset_t)reset, &stat)) {
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				;
 #else
-				printk(KERN_INFO "OK, port(%d) stat2\n", port);
-				printk(KERN_INFO "-------------------------\n");
-				printk(KERN_INFO "inundersize:   %lld\n", stat.inundersize);
-				printk(KERN_INFO "inoversize:    %lld\n", stat.inoversize);
-				printk(KERN_INFO "infragments:   %lld\n", stat.infragments);
-				printk(KERN_INFO "injabbers:     %lld\n", stat.injabbers);
-				printk(KERN_INFO "outundersize:  %lld\n", stat.outundersize);
-				printk(KERN_INFO "outoversize:   %lld\n", stat.outoversize);
-				printk(KERN_INFO "pppoefiltered: %lld\n", stat.pppoefiltered);
-				printk(KERN_INFO "statechange:   %lld\n", stat.statechange);
-				printk(KERN_INFO "outpause:      %lld\n", stat.outpause);
-				printk(KERN_INFO "dropevents:    %lld\n", stat.dropevents);
+				mvOsPrintf("OK, port(%d) stat2\n", port);
+				mvOsPrintf("-------------------------\n");
+				mvOsPrintf("inundersize:   %lld\n", stat.inundersize);
+				mvOsPrintf("inoversize:    %lld\n", stat.inoversize);
+				mvOsPrintf("infragments:   %lld\n", stat.infragments);
+				mvOsPrintf("injabbers:     %lld\n", stat.injabbers);
+				mvOsPrintf("outundersize:  %lld\n", stat.outundersize);
+				mvOsPrintf("outoversize:   %lld\n", stat.outoversize);
+				mvOsPrintf("pppoefiltered: %lld\n", stat.pppoefiltered);
+				mvOsPrintf("statechange:   %lld\n", stat.statechange);
+				mvOsPrintf("outpause:      %lld\n", stat.outpause);
+				mvOsPrintf("dropevents:    %lld\n", stat.dropevents);
 #endif
 			} else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 	return;
@@ -4886,29 +4890,29 @@ void tpm_sys_sw_stat3_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &reset);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_stat3_get((enum tpm_sw_port_t)port, (enum tpm_sw_count_reset_t)reset, &stat)) {
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				;
 #else
-				printk(KERN_INFO "OK, port(%d) stat3\n", port);
-				printk(KERN_INFO "-------------------------\n");
-				printk(KERN_INFO "in64:          %lld\n", stat.in64);
-				printk(KERN_INFO "in65to127:     %lld\n", stat.in65to127);
-				printk(KERN_INFO "in128to255:    %lld\n", stat.in128to255);
-				printk(KERN_INFO "in256to511:    %lld\n", stat.in256to511);
-				printk(KERN_INFO "in512to1023:   %lld\n", stat.in512to1023);
-				printk(KERN_INFO "in1024tomax:   %lld\n", stat.in1024tomax);
-				printk(KERN_INFO "out64:         %lld\n", stat.out64);
-				printk(KERN_INFO "out65to127:    %lld\n", stat.out65to127);
-				printk(KERN_INFO "out128to255:   %lld\n", stat.out128to255);
-				printk(KERN_INFO "out256to511:   %lld\n", stat.out256to511);
-				printk(KERN_INFO "out512to1024:  %lld\n", stat.out512to1024);
-				printk(KERN_INFO "out1024tomax:  %lld\n", stat.out1024tomax);
+				mvOsPrintf("OK, port(%d) stat3\n", port);
+				mvOsPrintf("-------------------------\n");
+				mvOsPrintf("in64:          %lld\n", stat.in64);
+				mvOsPrintf("in65to127:     %lld\n", stat.in65to127);
+				mvOsPrintf("in128to255:    %lld\n", stat.in128to255);
+				mvOsPrintf("in256to511:    %lld\n", stat.in256to511);
+				mvOsPrintf("in512to1023:   %lld\n", stat.in512to1023);
+				mvOsPrintf("in1024tomax:   %lld\n", stat.in1024tomax);
+				mvOsPrintf("out64:         %lld\n", stat.out64);
+				mvOsPrintf("out65to127:    %lld\n", stat.out65to127);
+				mvOsPrintf("out128to255:   %lld\n", stat.out128to255);
+				mvOsPrintf("out256to511:   %lld\n", stat.out256to511);
+				mvOsPrintf("out512to1024:  %lld\n", stat.out512to1024);
+				mvOsPrintf("out1024tomax:  %lld\n", stat.out1024tomax);
 #endif
 			} else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 	return;
@@ -4943,53 +4947,53 @@ void tpm_sys_sw_stat_all_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d %d", &port, &reset);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!_mv_tpm_sw_stat_all_get((enum tpm_sw_port_t)port,
 				(enum tpm_sw_count_reset_t)reset, &stat)) {
 #ifdef CONFIG_MV_TPM_SFS_2_IOCTL
 				;
 #else
-				printk(KERN_INFO "OK, port(%d) stat_all\n", port);
-				printk(KERN_INFO "-------------------------\n");
-				printk(KERN_INFO "InGoodOctetsLo: %8i\n",	stat.inGoodOctetsLo);
-				printk(KERN_INFO "InGoodOctetsHi: %8i\n",	stat.inGoodOctetsHi);
-				printk(KERN_INFO "InBadOctets:    %8i\n",	stat.inBadOctets);
-				printk(KERN_INFO "OutFCSErr:      %8i\n",	stat.outFCSErr);
-				printk(KERN_INFO "InUnicasts:     %8i\n",	stat.inUnicasts);
-				printk(KERN_INFO "Deferred:       %8i\n",	stat.deferred);
-				printk(KERN_INFO "InBroadcasts:   %8i\n",	stat.inBroadcasts);
-				printk(KERN_INFO "InMulticasts:   %8i\n",	stat.inMulticasts);
-				printk(KERN_INFO "64Octets:       %8i\n",	stat.octets64);
-				printk(KERN_INFO "127Octets:      %8i\n",	stat.octets127);
-				printk(KERN_INFO "255Octets:      %8i\n",	stat.octets255);
-				printk(KERN_INFO "511Octets:      %8i\n",	stat.octets511);
-				printk(KERN_INFO "1023Octets:     %8i\n",	stat.octets1023);
-				printk(KERN_INFO "MaxOctets:      %8i\n",	stat.octetsMax);
-				printk(KERN_INFO "OutOctetsLo:    %8i\n",	stat.outOctetsLo);
-				printk(KERN_INFO "OutOctetsHi:    %8i\n",	stat.outOctetsHi);
-				printk(KERN_INFO "OutUnicasts:    %8i\n",	stat.outUnicasts);
-				printk(KERN_INFO "Excessive:      %8i\n",	stat.excessive);
-				printk(KERN_INFO "OutMulticasts:  %8i\n",	stat.outMulticasts);
-				printk(KERN_INFO "OutBroadcasts:  %8i\n",	stat.outBroadcasts);
-				printk(KERN_INFO "Single:         %8i\n",	stat.single);
-				printk(KERN_INFO "OutPause:       %8i\n",	stat.outPause);
-				printk(KERN_INFO "InPause:        %8i\n",	stat.inPause);
-				printk(KERN_INFO "Multiple:       %8i\n",	stat.multiple);
-				printk(KERN_INFO "Undersize:      %8i\n",	stat.undersize);
-				printk(KERN_INFO "Fragments:      %8i\n",	stat.fragments);
-				printk(KERN_INFO "Oversize:       %8i\n",	stat.oversize);
-				printk(KERN_INFO "Jabber:         %8i\n",	stat.jabber);
-				printk(KERN_INFO "InMACRcvErr:    %8i\n",	stat.inMACRcvErr);
-				printk(KERN_INFO "InFCSErr:       %8i\n",	stat.inFCSErr);
-				printk(KERN_INFO "Collisions:     %8i\n",	stat.collisions);
-				printk(KERN_INFO "Late:           %8i\n",	stat.late);
-				printk(KERN_INFO "InDiscard:      %8i\n",	stat.inDiscard);
-				printk(KERN_INFO "InFilter:       %8i\n",	stat.inFiltered);
-				printk(KERN_INFO "OutFilter:      %8i\n",	stat.outFiltered);
+				mvOsPrintf("OK, port(%d) stat_all\n", port);
+				mvOsPrintf("-------------------------\n");
+				mvOsPrintf("InGoodOctetsLo: %8i\n",	stat.inGoodOctetsLo);
+				mvOsPrintf("InGoodOctetsHi: %8i\n",	stat.inGoodOctetsHi);
+				mvOsPrintf("InBadOctets:    %8i\n",	stat.inBadOctets);
+				mvOsPrintf("OutFCSErr:      %8i\n",	stat.outFCSErr);
+				mvOsPrintf("InUnicasts:     %8i\n",	stat.inUnicasts);
+				mvOsPrintf("Deferred:       %8i\n",	stat.deferred);
+				mvOsPrintf("InBroadcasts:   %8i\n",	stat.inBroadcasts);
+				mvOsPrintf("InMulticasts:   %8i\n",	stat.inMulticasts);
+				mvOsPrintf("64Octets:       %8i\n",	stat.octets64);
+				mvOsPrintf("127Octets:      %8i\n",	stat.octets127);
+				mvOsPrintf("255Octets:      %8i\n",	stat.octets255);
+				mvOsPrintf("511Octets:      %8i\n",	stat.octets511);
+				mvOsPrintf("1023Octets:     %8i\n",	stat.octets1023);
+				mvOsPrintf("MaxOctets:      %8i\n",	stat.octetsMax);
+				mvOsPrintf("OutOctetsLo:    %8i\n",	stat.outOctetsLo);
+				mvOsPrintf("OutOctetsHi:    %8i\n",	stat.outOctetsHi);
+				mvOsPrintf("OutUnicasts:    %8i\n",	stat.outUnicasts);
+				mvOsPrintf("Excessive:      %8i\n",	stat.excessive);
+				mvOsPrintf("OutMulticasts:  %8i\n",	stat.outMulticasts);
+				mvOsPrintf("OutBroadcasts:  %8i\n",	stat.outBroadcasts);
+				mvOsPrintf("Single:         %8i\n",	stat.single);
+				mvOsPrintf("OutPause:       %8i\n",	stat.outPause);
+				mvOsPrintf("InPause:        %8i\n",	stat.inPause);
+				mvOsPrintf("Multiple:       %8i\n",	stat.multiple);
+				mvOsPrintf("Undersize:      %8i\n",	stat.undersize);
+				mvOsPrintf("Fragments:      %8i\n",	stat.fragments);
+				mvOsPrintf("Oversize:       %8i\n",	stat.oversize);
+				mvOsPrintf("Jabber:         %8i\n",	stat.jabber);
+				mvOsPrintf("InMACRcvErr:    %8i\n",	stat.inMACRcvErr);
+				mvOsPrintf("InFCSErr:       %8i\n",	stat.inFCSErr);
+				mvOsPrintf("Collisions:     %8i\n",	stat.collisions);
+				mvOsPrintf("Late:           %8i\n",	stat.late);
+				mvOsPrintf("InDiscard:      %8i\n",	stat.inDiscard);
+				mvOsPrintf("InFilter:       %8i\n",	stat.inFiltered);
+				mvOsPrintf("OutFilter:      %8i\n",	stat.outFiltered);
 #endif
 			} else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 	return;
@@ -5021,12 +5025,12 @@ void tpm_sys_sw_head_mode_set(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sw_head_mode_set((enum tpm_sw_head_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 	return;
@@ -5059,13 +5063,13 @@ void tpm_sys_sw_head_mode_get(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &port);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sw_head_mode_get(&mode))
-				printk(KERN_INFO "OK, mode(%d:%s)\n",
+				mvOsPrintf("OK, mode(%d:%s)\n",
 					mode, tpm_sw_lookup_enum_str(TPM_SW_ENUM_HEAD_MODE, mode));
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 	return;
@@ -5097,12 +5101,12 @@ void tpm_sys_sw_atu_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &mode);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sw_atu_dump((enum tpm_sw_mac_addr_mode_t)mode))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -5135,12 +5139,12 @@ void tpm_sys_sw_vtu_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &vid);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sw_vtu_dump(vid))
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
@@ -5173,12 +5177,12 @@ void tpm_sys_sw_vtu_shadow_dump(const char *buf, size_t len)
 		/* Get parameters */
 		parsed_args = sscanf(buf, "%d", &vid);
 		if (parsed_args != param_num)
-			printk(KERN_INFO "Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
+			mvOsPrintf("Parse failure - %d/%d parameters were parsed\n", parsed_args, param_num);
 		else {
 			if (!tpm_sw_vtu_shadow_dump())
 				PR_RESULT_OK
 			else
-				printk(KERN_INFO "FAIL\n");
+				mvOsPrintf("FAIL\n");
 		}
 	}
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
index b64399b..5e7a1cb 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
@@ -95,8 +95,8 @@ void print_horizontal_line(unsigned int char_count, char *char_val)
 {
 	unsigned int cnt;
 	for (cnt = 0; cnt < char_count; cnt++)
-		printk(KERN_INFO "%s", char_val);
-	printk(KERN_INFO "\n");
+		mvOsPrintf("%s", char_val);
+	mvOsPrintf("\n");
 }
 
 
@@ -123,8 +123,8 @@ void tpm_sfs_print_ipv6_pref_suff(unsigned char	ipv6[8])
 	int i;
 
 	for (i = 0; i < 5; i += 2)
-		printk(KERN_INFO "%02x%02x:", ipv6[i], ipv6[i + 1]);
-	printk(KERN_INFO "%02x%02x", ipv6[i], ipv6[i + 1]);
+		mvOsPrintf("%02x%02x:", ipv6[i], ipv6[i + 1]);
+	mvOsPrintf("%02x%02x", ipv6[i], ipv6[i + 1]);
 }
 
 
-- 
1.7.5.4

