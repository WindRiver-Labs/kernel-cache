From a692a35b9217ac4e8ff6eda730f06bcad11fda6b Mon Sep 17 00:00:00 2001
From: Kosta Zertsekel <konszert@marvell.com>
Date: Tue, 30 Apr 2013 11:42:24 +0300
Subject: [PATCH 0610/1825] ALP: SMP: Wake up CPU1 by correct register writes

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit b3b23cf0683f510ac73a57f49d64d4e5adc6c93e

Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Change-Id: I0905fa66468c84316c4f484e902d79ef306f7bb5
Reviewed-on: http://vgitil04.il.marvell.com:8080/1692
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../avanta_lp_family/ctrlEnv/sys/mvCpuIfRegs.h     |    2 +-
 arch/arm/mach-avantalp/platsmp.c                   |    8 +++++---
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/sys/mvCpuIfRegs.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/sys/mvCpuIfRegs.h
index d6a48fa..449a7ed 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/sys/mvCpuIfRegs.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/sys/mvCpuIfRegs.h
@@ -81,7 +81,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define CPU_CONFIG_REG(cpu)			(MV_CPUIF_REGS_BASE(cpu))
 #define CPU_CTRL_STAT_REG(cpu)			(MV_CPUIF_REGS_BASE(cpu) + 0x8)
 
-#define PCIE_BOOT_ADDR_REG			(MV_MISC_REGS_BASE + 0x2D4)
+#define PCIE_BOOT_ADDR_REG			(MV_MISC_REGS_BASE + 0xD4)
 #define CPU_RESUME_ADDR_REG			(PCIE_BOOT_ADDR_REG)
 
 #define CPU_SOFT_RESET_REG(cpu)			(MV_MBUS_REGS_OFFSET + 0x800 + (cpu) * 0x8)
diff --git a/arch/arm/mach-avantalp/platsmp.c b/arch/arm/mach-avantalp/platsmp.c
index 14a3c49..e7afd21 100644
--- a/arch/arm/mach-avantalp/platsmp.c
+++ b/arch/arm/mach-avantalp/platsmp.c
@@ -55,14 +55,15 @@ void __init platform_smp_prepare_cpus(unsigned int max_cpus)
 	 * actually populated at the present time.
 	 */
 	scu_enable(INTER_REGS_VIRT_BASE + A9_MPCORE_SCU);
-	
+
 	/*
 	 * Write the address of secondary startup into the
 	 * system-wide flags register. The boot monitor waits
 	 * until it receives a soft interrupt, and then the
 	 * secondary CPU branches to this address.
 	 */
-	writel(CPU_RESUME_ADDR_REG, virt_to_phys(alp_secondary_startup));
+	writel(virt_to_phys(alp_secondary_startup),
+	       INTER_REGS_VIRT_BASE + CPU_RESUME_ADDR_REG);
 }
 
 /*
@@ -130,7 +131,8 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 	/*
 	 * Get CPU out of software reset state.
 	 */
-	writel(CPU_SOFT_RESET_REG(cpu_logical_map(cpu)), 0);
+	writel(0, CPU_SOFT_RESET_REG(cpu_logical_map(cpu)) +
+			INTER_REGS_VIRT_BASE);
 
 	timeout = jiffies + (1 * HZ);
 	while (time_before(jiffies, timeout)) {
-- 
1.7.5.4

