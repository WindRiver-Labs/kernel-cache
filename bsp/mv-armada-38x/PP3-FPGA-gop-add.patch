From 59a32825fc22b43a6c033ab7e2149340db7e4efc Mon Sep 17 00:00:00 2001
From: Uri Eliyahu <uriel@marvell.com>
Date: Mon, 3 Mar 2014 17:19:21 +0200
Subject: [PATCH 1437/1825] PP3: FPGA gop add

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 9017047e430e9f7d0964c3a6c7c00cfa461cb750

Change-Id: I6ca45ca0a4c09ce5ea1f0f95616625b978650002
Signed-off-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6100
Reviewed-by: Ernest Villion <ernestv@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/Makefile          |    2 +-
 drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h |    6 +-
 drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.c    |  808 ++++++++++++++++++++
 drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h    |  202 +++++
 .../net/ethernet/marvell/pp3/gmac/mv_gmac_regs.h   |  329 ++++++++
 drivers/net/ethernet/marvell/pp3/gop/mv_gop.c      |  123 ---
 drivers/net/ethernet/marvell/pp3/gop/mv_gop.h      |  119 ---
 .../net/ethernet/marvell/pp3/net_dev/mv_netdev.h   |    1 +
 8 files changed, 1346 insertions(+), 244 deletions(-)
 create mode 100644 drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.c
 create mode 100644 drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h
 create mode 100644 drivers/net/ethernet/marvell/pp3/gmac/mv_gmac_regs.h
 delete mode 100644 drivers/net/ethernet/marvell/pp3/gop/mv_gop.c
 delete mode 100644 drivers/net/ethernet/marvell/pp3/gop/mv_gop.h

diff --git a/drivers/net/ethernet/marvell/pp3/Makefile b/drivers/net/ethernet/marvell/pp3/Makefile
index 2922254..6805c71 100644
--- a/drivers/net/ethernet/marvell/pp3/Makefile
+++ b/drivers/net/ethernet/marvell/pp3/Makefile
@@ -8,4 +8,4 @@ ccflags-y       += -Idrivers/net/ethernet/marvell/pp3
 
 mv_pp3-objs := net_dev/mv_netdev.o hmac/mv_hmac.o emac/mv_emac.o
 mv_pp3-objs += emac/mv_emac_sysfs.o hmac/mv_hmac_sysfs.o
-mv_pp3-objs += gop/mv_gop.o fw/mv_channel_if.o common/mv_stack.o
+mv_pp3-objs += gmac/mv_gmac.o fw/mv_channel_if.o common/mv_stack.o
diff --git a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
index 6bbd392..d057518 100644
--- a/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
+++ b/drivers/net/ethernet/marvell/pp3/common/mv_hw_if.h
@@ -125,6 +125,10 @@ static INLINE void mv_pp3_hw_reg_write(u32 access_addr, u32 data)
 	writel(data, access_addr);
 }
 
-u32 mv_hw_silicon_base_addr_get(void);
+static INLINE u32 mv_hw_silicon_base_addr_get(void)
+{
+	return 0xffffffff;
+}
+
 
 #endif /* __mvHwIf_h__ */
diff --git a/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.c b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.c
new file mode 100644
index 0000000..09d1403
--- /dev/null
+++ b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.c
@@ -0,0 +1,808 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+	this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+	notice, this list of conditions and the following disclaimer in the
+	documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+	used to endorse or promote products derived from this software without
+	specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+#include "common/mv_hw_if.h"
+/* TODO: remove netdev include */
+#include "net_dev/mv_netdev.h"
+#include "mv_gmac_regs.h"
+#include "mv_gmac.h"
+
+static struct pp3_gmac_ctrl pp3_gmac[PP3_GMAC_MAX];
+
+/*-------------------------------------------------------------------*/
+/*		Gmac regs API					     */
+/*-------------------------------------------------------------------*/
+u32 pp3_gmac_reg_read(int port, u32 reg)
+{
+	u32 reg_data;
+
+	reg_data = mv_pp3_hw_reg_read(reg + pp3_gmac[port].base);
+
+	if (pp3_gmac[port].flags & MV_PP3_GMAC_F_DEBUG)
+		pr_info("read     : 0x%x = 0x%08x\n", reg, reg_data);
+
+	return reg_data;
+}
+
+void pp3_gmac_reg_write(int port, u32 reg, u32 data)
+{
+	mv_pp3_hw_reg_write(reg + pp3_gmac[port].base, data);
+
+	if (pp3_gmac[port].flags & MV_PP3_GMAC_F_DEBUG) {
+		u32 reg_data;
+		pr_info("write    : 0x%x = 0x%08x\n", reg, data);
+		reg_data = mv_pp3_hw_reg_read(reg + pp3_gmac[port].base);
+		pr_info("read back: 0x%x = 0x%08x\n", reg, reg_data);
+	}
+}
+
+static void pp3_gmac_reg_print(int port, char *reg_name, u32 reg)
+{
+	pr_info("  %-32s: 0x%x = 0x%08x\n", reg_name, reg, pp3_gmac_reg_read(port, reg));
+}
+
+void pp3_gmac_unit_base(int port, u32 base)
+{
+	pp3_gmac[port].base = base;
+	pp3_gmac[port].flags |= MV_PP3_GMAC_F_ATTACH;
+}
+
+/*-------------------------------------------------------------------*/
+
+void pp3_gmac_port_enable(int port)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_CTRL_0_REG);
+	rev_val |= GMAC_PORT_EN_MASK;
+	rev_val |= GMAC_GMAC_MIB_CNTR_EN_MASK;
+
+	pp3_gmac_reg_write(port, GMAC_CTRL_0_REG, rev_val);
+}
+
+void pp3_gmac_port_diable(int port)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_CTRL_0_REG);
+	rev_val &= ~(GMAC_PORT_EN_MASK);
+	pp3_gmac_reg_write(port, GMAC_CTRL_0_REG, rev_val);
+}
+
+static void pp3_gmac_port_rgmii_set(int port, int enable)
+{
+	u32  rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_CTRL_2_REG);
+
+	if (enable)
+		rev_val |= GMAC_PORT_RGMII_MASK;
+	else
+		rev_val &= ~GMAC_PORT_RGMII_MASK;
+
+	pp3_gmac_reg_write(port, GMAC_CTRL_2_REG, rev_val);
+}
+
+static void pp3_gmac_port_sgmii_set(int port, int enable)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_CTRL_2_REG);
+
+	if (enable)
+		rev_val |= (GMAC_PCS_ENABLE_MASK | GMAC_INBAND_AN_MASK);
+	else
+		rev_val &= ~(GMAC_PCS_ENABLE_MASK | GMAC_INBAND_AN_MASK);
+
+	pp3_gmac_reg_write(port, GMAC_CTRL_2_REG, rev_val);
+}
+
+void pp3_gmac_port_periodic_xon_set(int port, int enable)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_CTRL_1_REG);
+
+	if (enable)
+		rev_val |= GMAC_PERIODIC_XON_EN_MASK;
+	else
+		rev_val &= ~GMAC_PERIODIC_XON_EN_MASK;
+
+	pp3_gmac_reg_write(port, GMAC_CTRL_1_REG, rev_val);
+}
+
+void pp3_gmac_port_lb_set(int port, int is_gmii, int is_pcs_en)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_CTRL_1_REG);
+
+	if (is_gmii)
+		rev_val |= GMAC_GMII_LB_EN_MASK;
+	else
+		rev_val &= ~GMAC_GMII_LB_EN_MASK;
+
+	if (is_pcs_en)
+		rev_val |= GMAC_PCS_LB_EN_MASK;
+	else
+		rev_val &= ~GMAC_PCS_LB_EN_MASK;
+
+	pp3_gmac_reg_write(port, GMAC_CTRL_1_REG, rev_val);
+}
+
+void pp3_gmac_port_reset_set(int port, bool setReset)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_CTRL_2_REG);
+	rev_val &= ~GMAC_PORT_RESET_MASK;
+
+	if (setReset == 1 /*TRUE*/)
+		rev_val |= GMAC_PORT_RESET_MASK;
+	else
+		rev_val &= ~GMAC_PORT_RESET_MASK;
+
+	pp3_gmac_reg_write(port, GMAC_CTRL_2_REG, rev_val);
+
+	if (setReset == 0 /*FALSE*/) {
+		u32 reset = 1;
+		while (reset)
+			reset = pp3_gmac_reg_read(port, GMAC_CTRL_2_REG) & GMAC_PORT_RESET_MASK;
+	}
+}
+
+void pp3_gmac_port_power_up(int port, bool is_sgmii, bool is_rgmii)
+{
+	pp3_gmac_port_sgmii_set(port, is_sgmii);
+	pp3_gmac_port_rgmii_set(port, is_rgmii);
+	pp3_gmac_port_periodic_xon_set(port, 0 /*FALSE*/);
+	pp3_gmac_port_reset_set(port, 0 /*FALSE*/);
+}
+
+void pp3_gmac_def_set(int port)
+{
+	u32 rev_val;
+
+	/* Update TX FIFO MIN Threshold */
+	rev_val = pp3_gmac_reg_read(port, GMAC_PORT_FIFO_CFG_1_REG);
+	rev_val &= ~GMAC_TX_FIFO_MIN_TH_ALL_MASK;
+	/* Minimal TX threshold must be less than minimal packet length */
+	rev_val |= GMAC_TX_FIFO_MIN_TH_MASK(64 - 4 - 2);
+	pp3_gmac_reg_write(port, GMAC_PORT_FIFO_CFG_1_REG, rev_val);
+}
+
+void pp3_gmac_port_power_down(int port)
+{
+	pp3_gmac_port_diable(port);
+	pp3_gmac_mib_counters_clear(port);
+	pp3_gmac_port_reset_set(port, 1 /*TRUE*/);
+}
+
+bool pp3_gmac_port_is_link_up(int port)
+{
+	return pp3_gmac_reg_read(port, GMAC_STATUS_REG) & GMAC_LINK_UP_MASK;
+}
+
+int pp3_gmac_lins_status(int port, struct pp3_port_link_status *pstatus)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_STATUS_REG);
+
+	if (rev_val & GMAC_SPEED_1000_MASK)
+		pstatus->speed = GMAC_SPEED_1000;
+	else if (rev_val & GMAC_SPEED_100_MASK)
+		pstatus->speed = GMAC_SPEED_100;
+	else
+		pstatus->speed = GMAC_SPEED_10;
+
+	if (rev_val & GMAC_LINK_UP_MASK)
+		pstatus->linkup = 1 /*TRUE*/;
+	else
+		pstatus->linkup = 0 /*FALSE*/;
+
+	if (rev_val & GMAC_FULL_DUPLEX_MASK)
+		pstatus->duplex = GMAC_DUPLEX_FULL;
+	else
+		pstatus->duplex = GMAC_DUPLEX_HALF;
+
+	if (rev_val & GMAC_TX_FLOW_CTRL_ACTIVE_MASK)
+		pstatus->tx_fc = GMAC_FC_ACTIVE;
+	else if (rev_val & GMAC_TX_FLOW_CTRL_ENABLE_MASK)
+		pstatus->tx_fc = GMAC_FC_ENABLE;
+	else
+		pstatus->tx_fc = GMAC_FC_DISABLE;
+
+	if (rev_val & GMAC_RX_FLOW_CTRL_ACTIVE_MASK)
+		pstatus->rx_fc = GMAC_FC_ACTIVE;
+	else if (rev_val & GMAC_RX_FLOW_CTRL_ENABLE_MASK)
+		pstatus->rx_fc = GMAC_FC_ENABLE;
+	else
+		pstatus->rx_fc = GMAC_FC_DISABLE;
+
+	return 0;
+}
+
+char *pp3_gmac_speed_str_get(enum pp3_port_speed speed)
+{
+	char *str;
+
+	switch (speed) {
+	case GMAC_SPEED_10:
+		str = "10 Mbps";
+		break;
+	case GMAC_SPEED_100:
+		str = "100 Mbps";
+		break;
+	case GMAC_SPEED_1000:
+		str = "1 Gbps";
+		break;
+	case GMAC_SPEED_2000:
+		str = "2 Gbps";
+		break;
+	case GMAC_SPEED_AN:
+		str = "AutoNeg";
+		break;
+	default:
+		str = "Unknown";
+	}
+	return str;
+}
+
+/******************************************************************************/
+/*                          Port Configuration functions                      */
+/******************************************************************************/
+
+/*******************************************************************************
+* mvNetaMaxRxSizeSet -
+*
+* DESCRIPTION:
+*       Change maximum receive size of the port. This configuration will take place
+*       imidiately.
+*
+* INPUT:
+*
+* RETURN:
+*******************************************************************************/
+int pp3_gmac_max_rx_size_set(int port, int max_rx_size)
+{
+	u32		rev_val;
+
+	rev_val =  pp3_gmac_reg_read(port, GMAC_CTRL_0_REG);
+	rev_val &= ~GMAC_MAX_RX_SIZE_MASK;
+	rev_val |= (((max_rx_size - MV_ETH_MH_SIZE) / 2) << GMAC_MAX_RX_SIZE_OFFS);
+	pp3_gmac_reg_write(port, GMAC_CTRL_0_REG, rev_val);
+	return 0;
+}
+
+/*******************************************************************************
+* pp3_gmac_force_link_mode_set -
+*
+* DESCRIPTION:
+*       Sets "Force Link Pass" and "Do Not Force Link Fail" bits.
+*	Note: This function should only be called when the port is disabled.
+*
+* INPUT:
+*	int  port		- port number
+*	bool force_link_pass	- Force Link Pass
+*	bool force_link_fail - Force Link Failure
+*		0, 0 - normal state: detect link via PHY and connector
+*		1, 1 - prohibited state.
+*
+* RETURN:
+*******************************************************************************/
+int pp3_gmac_force_link_mode_set(int port, bool force_link_up, bool force_link_down)
+{
+	u32 rev_val;
+
+	/* Can't force link pass and link fail at the same time */
+	if ((force_link_up) && (force_link_down))
+		return -EINVAL;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_AN_CTRL_REG);
+
+	if (force_link_up)
+		rev_val |= GMAC_FORCE_LINK_PASS_MASK;
+	else
+		rev_val &= ~GMAC_FORCE_LINK_PASS_MASK;
+
+	if (force_link_down)
+		rev_val |= GMAC_FORCE_LINK_FAIL_MASK;
+	else
+		rev_val &= ~GMAC_FORCE_LINK_FAIL_MASK;
+
+	pp3_gmac_reg_write(port, GMAC_AN_CTRL_REG, rev_val);
+
+	return 0;
+}
+
+/*******************************************************************************
+* pp3_gmac_speed_duplex_set -
+*
+* DESCRIPTION:
+*       Sets port speed to Auto Negotiation / 1000 / 100 / 10 Mbps.
+*	Sets port duplex to Auto Negotiation / Full / Half Duplex.
+*
+* INPUT:
+*	int port - port number
+*	enum pp3_port_speed speed - port speed
+*	enum pp3_port_duplex duplex - port duplex mode
+*
+* RETURN:
+*******************************************************************************/
+int pp3_gmac_speed_duplex_set(int port, enum pp3_port_speed speed, enum pp3_port_duplex duplex)
+{
+	u32 rev_val;
+
+	/* Check validity */
+	if ((speed == GMAC_SPEED_1000) && (duplex == GMAC_DUPLEX_HALF))
+		return -EINVAL;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_AN_CTRL_REG);
+
+	switch (speed) {
+	case GMAC_SPEED_AN:
+		rev_val |= GMAC_ENABLE_SPEED_AUTO_NEG_MASK;
+		/* the other bits don't matter in this case */
+		break;
+	case GMAC_SPEED_1000:
+		rev_val &= ~GMAC_ENABLE_SPEED_AUTO_NEG_MASK;
+		rev_val |= GMAC_SET_GMII_SPEED_1000_MASK;
+		/* the 100/10 bit doesn't matter in this case */
+		break;
+	case GMAC_SPEED_100:
+		rev_val &= ~GMAC_ENABLE_SPEED_AUTO_NEG_MASK;
+		rev_val &= ~GMAC_SET_GMII_SPEED_1000_MASK;
+		rev_val |= GMAC_SET_MII_SPEED_100_MASK;
+		break;
+	case GMAC_SPEED_10:
+		rev_val &= ~GMAC_ENABLE_SPEED_AUTO_NEG_MASK;
+		rev_val &= ~GMAC_SET_GMII_SPEED_1000_MASK;
+		rev_val &= ~GMAC_SET_MII_SPEED_100_MASK;
+		break;
+	default:
+		pr_info("Unexpected Speed value %d\n", speed);
+		return -EINVAL;
+	}
+
+	switch (duplex) {
+	case GMAC_DUPLEX_AN:
+		rev_val  |= GMAC_ENABLE_DUPLEX_AUTO_NEG_MASK;
+		/* the other bits don't matter in this case */
+		break;
+	case GMAC_DUPLEX_HALF:
+		rev_val &= ~GMAC_ENABLE_DUPLEX_AUTO_NEG_MASK;
+		rev_val &= ~GMAC_SET_FULL_DUPLEX_MASK;
+		break;
+	case GMAC_DUPLEX_FULL:
+		rev_val &= ~GMAC_ENABLE_DUPLEX_AUTO_NEG_MASK;
+		rev_val |= GMAC_SET_FULL_DUPLEX_MASK;
+		break;
+	default:
+		pr_err("Unexpected Duplex value %d\n", duplex);
+		return -EINVAL;
+	}
+
+	pp3_gmac_reg_write(port, GMAC_AN_CTRL_REG, rev_val);
+	return 0;
+}
+
+/*******************************************************************************
+* pp3_gmac_speed_duplex_get -
+*
+* DESCRIPTION:
+*       Gets port speed
+*	Gets port duplex
+*
+* INPUT:
+*	int port - port number
+* OUTPUT:
+*	enum pp3_port_speed *speed - port speed
+*	enum pp3_port_duplex *duplex - port duplex mode
+*
+* RETURN:
+*******************************************************************************/
+int pp3_gmac_speed_duplex_get(int port, enum pp3_port_speed *speed, enum pp3_port_duplex *duplex)
+{
+	u32 rev_val;
+
+	/* Check validity */
+	if (!speed || !duplex)
+		return -EINVAL;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_AN_CTRL_REG);
+	if (rev_val & GMAC_ENABLE_SPEED_AUTO_NEG_MASK)
+		*speed = GMAC_SPEED_AN;
+	else if (rev_val & GMAC_SET_GMII_SPEED_1000_MASK)
+		*speed = GMAC_SPEED_1000;
+	else if (rev_val & GMAC_SET_MII_SPEED_100_MASK)
+		*speed = GMAC_SPEED_100;
+	else
+		*speed = GMAC_SPEED_10;
+
+	if (rev_val & GMAC_ENABLE_DUPLEX_AUTO_NEG_MASK)
+		*duplex = GMAC_DUPLEX_AN;
+	else if (rev_val & GMAC_SET_FULL_DUPLEX_MASK)
+		*duplex = GMAC_DUPLEX_FULL;
+	else
+		*duplex = GMAC_DUPLEX_HALF;
+
+	return 0;
+}
+
+/*******************************************************************************
+* pp3_gmac_fc_set - Set Flow Control of the port.
+*
+* DESCRIPTION:
+*       This function configures the port's Flow Control properties.
+*
+* INPUT:
+*       int				port		- Port number
+*       enum pp3_port_fc  fc - Flow control of the port.
+*
+* RETURN:   int
+*       0           - Success
+*       MV_OUT_OF_RANGE - Failed. Port is out of valid range
+*       MV_BAD_VALUE    - Value fc parameters is not valid
+*
+*******************************************************************************/
+int pp3_gmac_fc_set(int port, enum pp3_port_fc fc)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_AN_CTRL_REG);
+
+	switch (fc) {
+	case GMAC_FC_AN_NO:
+		rev_val |= GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_MASK;
+		rev_val &= ~GMAC_FLOW_CONTROL_ADVERTISE_MASK;
+		rev_val &= ~GMAC_FLOW_CONTROL_ASYMETRIC_MASK;
+		break;
+
+	case GMAC_FC_AN_SYM:
+		rev_val |= GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_MASK;
+		rev_val |= GMAC_FLOW_CONTROL_ADVERTISE_MASK;
+		rev_val &= ~GMAC_FLOW_CONTROL_ASYMETRIC_MASK;
+		break;
+
+	case GMAC_FC_AN_ASYM:
+		rev_val |= GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_MASK;
+		rev_val |= GMAC_FLOW_CONTROL_ADVERTISE_MASK;
+		rev_val |= GMAC_FLOW_CONTROL_ASYMETRIC_MASK;
+		break;
+
+	case GMAC_FC_DISABLE:
+		rev_val &= ~GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_MASK;
+		rev_val &= ~GMAC_SET_FLOW_CONTROL_MASK;
+		break;
+
+	case GMAC_FC_ENABLE:
+		rev_val &= ~GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_MASK;
+		rev_val |= GMAC_SET_FLOW_CONTROL_MASK;
+		break;
+
+	default:
+		pr_err("ethDrv: Unexpected FlowControl value %d\n", fc);
+		return -EINVAL;
+	}
+
+	pp3_gmac_reg_write(port, GMAC_AN_CTRL_REG, rev_val);
+
+	return 0;
+}
+
+/*******************************************************************************
+* pp3_gmac_fc_get - Get Flow Control configuration of the port.
+*
+* DESCRIPTION:
+*       This function returns the port's Flow Control properties.
+*
+* INPUT:
+*       int port			- Port number
+*
+* OUTPUT:
+*       enum pp3_port_fc  *fc		- Flow control of the port.
+*
+*
+*******************************************************************************/
+void pp3_gmac_fc_get(int port, enum pp3_port_fc *fc)
+{
+	u32 rev_val;
+
+	rev_val = pp3_gmac_reg_read(port, GMAC_AN_CTRL_REG);
+
+	if (rev_val & GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_MASK) {
+		/* Auto negotiation is enabled */
+		if (rev_val & GMAC_FLOW_CONTROL_ADVERTISE_MASK) {
+			if (rev_val & GMAC_FLOW_CONTROL_ASYMETRIC_MASK)
+				*fc = GMAC_FC_AN_ASYM;
+			else
+				*fc = GMAC_FC_AN_SYM;
+		} else
+			*fc = GMAC_FC_AN_NO;
+	} else {
+		/* Auto negotiation is disabled */
+		if (rev_val & GMAC_SET_FLOW_CONTROL_MASK)
+			*fc = GMAC_FC_ENABLE;
+		else
+			*fc = GMAC_FC_DISABLE;
+	}
+}
+
+int pp3_gmac_port_link_speed_fc(int port, enum pp3_port_speed speed,
+				     int force_link_up)
+{
+	if (force_link_up) {
+		if (pp3_gmac_speed_duplex_set(port, speed, GMAC_DUPLEX_FULL)) {
+			pr_err("pp3_gmac_speed_duplex_set failed\n");
+			return -EPERM;
+		}
+		if (pp3_gmac_fc_set(port, GMAC_FC_ENABLE)) {
+			pr_err("pp3_gmac_fc_set failed\n");
+			return -EPERM;
+		}
+		if (pp3_gmac_force_link_mode_set(port, 1, 0)) {
+			pr_err("pp3_gmac_force_link_mode_set failed\n");
+			return -EPERM;
+		}
+	} else {
+		if (pp3_gmac_force_link_mode_set(port, 0, 0)) {
+			pr_err("pp3_gmac_force_link_mode_set failed\n");
+			return -EPERM;
+		}
+		if (pp3_gmac_speed_duplex_set(port, GMAC_SPEED_AN, GMAC_DUPLEX_AN)) {
+			pr_err("pp3_gmac_speed_duplex_set failed\n");
+			return -EPERM;
+		}
+		if (pp3_gmac_fc_set(port, GMAC_FC_AN_SYM)) {
+			pr_err("pp3_gmac_fc_set failed\n");
+			return -EPERM;
+		}
+	}
+
+	return 0;
+}
+
+/******************************************************************************/
+/*                         PHY Control Functions                              */
+/******************************************************************************/
+void pp3_gmac_phy_addr_set(int port, int phy_addr)
+{
+	unsigned int rev_val;
+
+	rev_val = mv_pp3_hw_reg_read(PHY_ADDR_REG + mv_fpga_gop_base_addr_get());
+
+	rev_val &= ~PHY_ADDR_MASK(port);
+	rev_val |= ((phy_addr << PHY_ADDR_OFFS(port)) & PHY_ADDR_MASK(port));
+
+	 mv_pp3_hw_reg_write((PHY_ADDR_REG + mv_fpga_gop_base_addr_get()), rev_val);
+
+	return;
+}
+
+int pp3_gmac_phy_addr_get(int port)
+{
+	unsigned int rev_val;
+
+	rev_val = mv_pp3_hw_reg_read(PHY_ADDR_REG + mv_fpga_gop_base_addr_get());
+
+	return (rev_val & PHY_ADDR_MASK(port)) >> PHY_ADDR_OFFS(port);
+}
+
+/*
+void pp3_gmac_lms_regs(void)
+{
+	pr_info("\n[GoP LMS registers]\n");
+
+	mvGmacPrintReg(PHY_ADDR_REG, "MV_GOP_LMS_PHY_ADDR_REG");
+	mvGmacPrintReg(GMAC_PHY_AN_CFG0_REG, "MV_GOP_LMS_PHY_AN_CFG0_REG");
+}
+*/
+
+void pp3_gmac_port_regs(int port)
+{
+	/*TODO: port val validation */
+
+	pr_info("\n[gop MAC #%d registers]\n", port);
+
+	pp3_gmac_reg_print(port, "GMAC_CTRL_0_REG", GMAC_CTRL_0_REG);
+	pp3_gmac_reg_print(port, "GMAC_CTRL_1_REG", GMAC_CTRL_1_REG);
+	pp3_gmac_reg_print(port, "GMAC_CTRL_2_REG", GMAC_CTRL_2_REG);
+
+	pp3_gmac_reg_print(port, "GMAC_AN_CTRL_REG", GMAC_AN_CTRL_REG);
+	pp3_gmac_reg_print(port, "GMAC_STATUS_REG", GMAC_STATUS_REG);
+
+	pp3_gmac_reg_print(port, "GMAC_PORT_FIFO_CFG_0_REG", GMAC_PORT_FIFO_CFG_0_REG);
+	pp3_gmac_reg_print(port, "GMAC_PORT_FIFO_CFG_1_REG", GMAC_PORT_FIFO_CFG_1_REG);
+
+	pp3_gmac_reg_print(port, "GMAC_PORT_ISR_CAUSE_REG", GMAC_PORT_ISR_CAUSE_REG);
+	pp3_gmac_reg_print(port, "GMAC_PORT_ISR_MASK_REG", GMAC_PORT_ISR_CAUSE_REG);
+}
+
+/******************************************************************************/
+/*                      MIB Counters functions                                */
+/******************************************************************************/
+
+/*******************************************************************************
+* pp3_gmac_mib_counter_read - Read a MIB counter
+*
+* DESCRIPTION:
+*       This function reads a MIB counter of a specific ethernet port.
+*       NOTE - Read from GMAC_MIB_GOOD_OCTETS_RECEIVED_LOW or
+*              GMAC_MIB_GOOD_OCTETS_SENT_LOW counters will return 64 bits value,
+*              so p_high_32 pointer should not be NULL in this case.
+*
+* INPUT:
+*       port        - Ethernet Port number.
+*       offset   - MIB counter offset.
+*
+* OUTPUT:
+*       u32*       p_high_32 - pointer to place where 32 most significant bits
+*                             of the counter will be stored.
+*
+* RETURN:
+*       32 low sgnificant bits of MIB counter value.
+*
+*******************************************************************************/
+u32 pp3_gmac_mib_counter_read(int port, unsigned int offset, u32 *p_high_32)
+{
+	u32 val_low_32, val_high_32;
+	int abs_offset;
+
+	val_low_32 = mv_pp3_hw_reg_read(GMAC_MIB_COUNTERS_BASE(port) + offset);
+
+	/* Implement FEr ETH. Erroneous Value when Reading the Upper 32-bits    */
+	/* of a 64-bit MIB Counter.                                             */
+	if ((offset == GMAC_MIB_GOOD_OCTETS_RECEIVED_LOW) || (offset == GMAC_MIB_GOOD_OCTETS_SENT_LOW)) {
+		abs_offset = mv_fpga_gop_base_addr_get() + GMAC_MIB_COUNTERS_BASE(port) + offset + 4;
+
+		val_high_32 = mv_pp3_hw_reg_read(abs_offset);
+
+		if (p_high_32 != NULL)
+			*p_high_32 = val_high_32;
+	}
+	return val_low_32;
+}
+
+/*******************************************************************************
+* pp3_gmac_mib_counters_clear - Clear all MIB counters
+*
+* DESCRIPTION:
+*       This function clears all MIB counters
+*
+* INPUT:
+*       port      - Ethernet Port number.
+*
+* RETURN:   void
+*
+*******************************************************************************/
+void pp3_gmac_mib_counters_clear(int port)
+{
+	int i, abs_offset;
+
+	/* Perform dummy reads from MIB counters */
+	/* Read of last counter clear all counter were read before */
+	for (i = GMAC_MIB_GOOD_OCTETS_RECEIVED_LOW; i <= GMAC_MIB_LATE_COLLISION; i += 4) {
+		abs_offset = mv_fpga_gop_base_addr_get() + GMAC_MIB_COUNTERS_BASE(port) + i;
+		mv_pp3_hw_reg_read(abs_offset);
+	}
+}
+
+static void pp3_gmac_mib_print(int port, u32 offset, char *mib_name)
+{
+	u32 reg_low, reg_high = 0;
+
+	reg_low = pp3_gmac_mib_counter_read(port, offset, &reg_high);
+
+	if (!reg_high)
+		pr_info("  %-32s: 0x%02x = %u\n", mib_name, offset, reg_low);
+	else
+		pr_info("  %-32s: 0x%02x = 0x%08x%08x\n", mib_name, offset, reg_high, reg_low);
+
+}
+
+/* Print MIB counters of the Ethernet port */
+void pp3_gmac_mib_counters_show(int port)
+{
+	/* TODO: check port value */
+
+	pr_info("\nMIBs: port=%d, base=0x%x\n", port, GMAC_MIB_COUNTERS_BASE(port));
+
+	pr_info("\n[Rx]\n");
+	pp3_gmac_mib_print(port, GMAC_MIB_GOOD_OCTETS_RECEIVED_LOW, "GOOD_OCTETS_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_BAD_OCTETS_RECEIVED, "BAD_OCTETS_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_UNICAST_FRAMES_RECEIVED, "UNCAST_FRAMES_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_BROADCAST_FRAMES_RECEIVED, "BROADCAST_FRAMES_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_MULTICAST_FRAMES_RECEIVED, "MULTICAST_FRAMES_RECEIVED");
+
+	pr_info("\n[RMON]\n");
+	pp3_gmac_mib_print(port, GMAC_MIB_FRAMES_64_OCTETS, "FRAMES_64_OCTETS");
+	pp3_gmac_mib_print(port, GMAC_MIB_FRAMES_65_TO_127_OCTETS, "FRAMES_65_TO_127_OCTETS");
+	pp3_gmac_mib_print(port, GMAC_MIB_FRAMES_128_TO_255_OCTETS, "FRAMES_128_TO_255_OCTETS");
+	pp3_gmac_mib_print(port, GMAC_MIB_FRAMES_256_TO_511_OCTETS, "FRAMES_256_TO_511_OCTETS");
+	pp3_gmac_mib_print(port, GMAC_MIB_FRAMES_512_TO_1023_OCTETS, "FRAMES_512_TO_1023_OCTETS");
+	pp3_gmac_mib_print(port, GMAC_MIB_FRAMES_1024_TO_MAX_OCTETS, "FRAMES_1024_TO_MAX_OCTETS");
+
+	pr_info("\n[Tx]\n");
+	pp3_gmac_mib_print(port, GMAC_MIB_GOOD_OCTETS_SENT_LOW, "GOOD_OCTETS_SENT");
+	pp3_gmac_mib_print(port, GMAC_MIB_UNICAST_FRAMES_SENT, "UNICAST_FRAMES_SENT");
+	pp3_gmac_mib_print(port, GMAC_MIB_MULTICAST_FRAMES_SENT, "MULTICAST_FRAMES_SENT");
+	pp3_gmac_mib_print(port, GMAC_MIB_BROADCAST_FRAMES_SENT, "BROADCAST_FRAMES_SENT");
+	pp3_gmac_mib_print(port, GMAC_MIB_CRC_ERRORS_SENT, "CRC_ERRORS_SENT");
+
+	pr_info("\n[FC control]\n");
+	pp3_gmac_mib_print(port, GMAC_MIB_FC_RECEIVED, "FC_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_FC_SENT, "FC_SENT");
+
+	pr_info("\n[Errors]\n");
+	pp3_gmac_mib_print(port, GMAC_MIB_RX_FIFO_OVERRUN, "GMAC_MIB_RX_FIFO_OVERRUN");
+	pp3_gmac_mib_print(port, GMAC_MIB_UNDERSIZE_RECEIVED, "UNDERSIZE_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_FRAGMENTS_RECEIVED, "FRAGMENTS_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_OVERSIZE_RECEIVED, "OVERSIZE_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_JABBER_RECEIVED, "JABBER_RECEIVED");
+	pp3_gmac_mib_print(port, GMAC_MIB_MAC_RECEIVE_ERROR, "MAC_RECEIVE_ERROR");
+	pp3_gmac_mib_print(port, GMAC_MIB_BAD_CRC_EVENT, "BAD_CRC_EVENT");
+	pp3_gmac_mib_print(port, GMAC_MIB_COLLISION, "COLLISION");
+	/* This counter must be read last. Read it clear all the counters */
+	pp3_gmac_mib_print(port, GMAC_MIB_LATE_COLLISION, "LATE_COLLISION");
+}
diff --git a/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h
new file mode 100644
index 0000000..bea9190
--- /dev/null
+++ b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac.h
@@ -0,0 +1,202 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+	this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+	notice, this list of conditions and the following disclaimer in the
+	documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+	used to endorse or promote products derived from this software without
+	specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+#ifndef __mv_gmac_h__
+#define __mv_gmac_h__
+
+
+#include <linux/netdevice.h>
+
+struct pp3_gmac_ctrl {
+	u32 base;
+	u32 flags;
+};
+
+/* mv_pp3_gmac_ctrl flags */
+
+
+#define MV_PP3_GMAC_F_DEBUG_BIT		0
+#define MV_PP3_GMAC_F_ATTACH_BIT	1
+
+#define MV_PP3_GMAC_F_DEBUG		(1 << MV_PP3_GMAC_F_DEBUG_BIT)
+#define MV_PP3_GMAC_F_ATTACH		(1 << MV_PP3_GMAC_F_ATTACH_BIT)
+
+enum pp3_port_speed {
+	GMAC_SPEED_AN,
+	GMAC_SPEED_10,
+	GMAC_SPEED_100,
+	GMAC_SPEED_1000,
+	GMAC_SPEED_2000,
+};
+
+enum pp3_port_duplex {
+	GMAC_DUPLEX_AN,
+	GMAC_DUPLEX_HALF,
+	GMAC_DUPLEX_FULL
+};
+
+enum pp3_port_fc {
+	GMAC_FC_AN_NO,
+	GMAC_FC_AN_SYM,
+	GMAC_FC_AN_ASYM,
+	GMAC_FC_DISABLE,
+	GMAC_FC_ENABLE,
+	GMAC_FC_ACTIVE
+};
+
+struct pp3_port_link_status {
+	int			linkup; /*flag*/
+	enum pp3_port_speed	speed;
+	enum pp3_port_duplex	duplex;
+	enum pp3_port_fc		rx_fc;
+	enum pp3_port_fc		tx_fc;
+};
+
+/***************************************************************************/
+/*                          regs access functions                          */
+/***************************************************************************/
+void pp3_gmac_unit_base(int index, u32 base);
+u32  pp3_gmac_reg_read(int port, u32 reg);
+void pp3_gmac_reg_write(int port, u32 reg, u32 data);
+
+static INLINE u32 mv_fpga_gop_base_addr_get(void)
+{
+	return 0xa0000000;
+}
+
+
+/***************************************************************************/
+/*                          Inline functions                               */
+/***************************************************************************/
+static INLINE void pp3_gmac_isr_summary_mask(void)
+{
+	mv_pp3_hw_reg_write(mv_fpga_gop_base_addr_get() + ISR_SUM_MASK_REG, 0);
+}
+
+static INLINE void pp3_gmac_isr_summary_unmask(void)
+{
+	mv_pp3_hw_reg_write(mv_fpga_gop_base_addr_get() + ISR_SUM_MASK_REG,
+			ISR_SUM_PORT0_MASK | ISR_SUM_PORT1_MASK | 0x20 /* magic bit */);
+}
+
+static INLINE u32 pp3_gmac_isr_summary_cause_get(void)
+{
+	return mv_pp3_hw_reg_read(mv_fpga_gop_base_addr_get() + ISR_SUM_CAUSE_REG);
+}
+
+static INLINE u32 pp3_gmac_port_isr_cause_get(int port)
+{
+	return pp3_gmac_reg_read(port, GMAC_PORT_ISR_CAUSE_REG);
+}
+
+static INLINE void pp3_gmac_port_isr_mask(int port)
+{
+	pp3_gmac_reg_write(port, GMAC_PORT_ISR_MASK_REG, 0);
+}
+
+static INLINE void pp3_gmac_port_isr_unmask(int port)
+{
+	pp3_gmac_reg_write(port, GMAC_PORT_ISR_MASK_REG, GMAC_PORT_LINK_CHANGE_MASK);
+}
+
+void pp3_gmac_def_set(int port);
+void pp3_gmac_port_enable(int port);
+void pp3_gmac_port_diable(int port);
+void pp3_gmac_port_periodic_xon_set(int port, int enable);
+bool pp3_gmac_port_is_link_up(int port);
+int pp3_gmac_lins_status(int port, struct pp3_port_link_status *pstatus);
+void pp3_gmac_port_lb_set(int port, int is_gmii, int is_pcs_en);
+void pp3_gmac_port_reset_set(int port, bool set_reset);
+void pp3_gmac_port_power_up(int port, bool is_sgmii, bool isRgmii);
+void pp3_gmac_port_power_down(int port);
+char *pp3_gmac_speed_str_get(enum pp3_port_speed speed);
+
+/******************************************************************************/
+/*                          Port Configuration functions                      */
+/******************************************************************************/
+int pp3_gmac_max_rx_size_set(int port, int max_rx_size);
+int pp3_gmac_force_link_mode_set(int port_num, bool force_link_up, bool force_link_down);
+int pp3_gmac_speed_duplex_set(int port_num, enum pp3_port_speed speed, enum pp3_port_duplex duplex);
+int pp3_gmac_speed_duplex_get(int port_num, enum pp3_port_speed *speed, enum pp3_port_duplex *duplex);
+int pp3_gmac_fc_set(int port, enum pp3_port_fc fc);
+void pp3_gmac_fc_get(int port, enum pp3_port_fc *fc);
+int pp3_gmac_port_link_speed_fc(int port, enum pp3_port_speed speed,
+				     int force_link_up);
+
+/******************************************************************************/
+/*                         PHY Control Functions                              */
+/******************************************************************************/
+void pp3_gmac_phy_addr_set(int port, int phy_addr);
+int pp3_gmac_phy_addr_get(int port);
+
+/****************************************/
+/*	MIB counters			*/
+/****************************************/
+u32 pp3_gmac_mib_counter_read(int port, u32 offset, u32 *p_high_32);
+void pp3_gmac_mib_counters_clear(int port);
+void pp3_gmac_mib_counters_show(int port);
+void pp3_gmac_port_regs(int port);
+/*
+void pp3_gmac_lms_regs(void);
+*/
+#endif /* __mv_gmac_h__ */
diff --git a/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac_regs.h b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac_regs.h
new file mode 100644
index 0000000..7b71d82
--- /dev/null
+++ b/drivers/net/ethernet/marvell/pp3/gmac/mv_gmac_regs.h
@@ -0,0 +1,329 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+********************************************************************************
+Marvell Commercial License Option
+
+If you received this File from Marvell and you have entered into a commercial
+license agreement (a "Commercial License") with Marvell, the File is licensed
+to you under the terms of the applicable Commercial License.
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+********************************************************************************
+Marvell BSD License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File under the following licensing terms.
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    *   Redistributions of source code must retain the above copyright notice,
+	this list of conditions and the following disclaimer.
+
+    *   Redistributions in binary form must reproduce the above copyright
+	notice, this list of conditions and the following disclaimer in the
+	documentation and/or other materials provided with the distribution.
+
+    *   Neither the name of Marvell nor the names of its contributors may be
+	used to endorse or promote products derived from this software without
+	specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*******************************************************************************/
+
+#ifndef __mv_gmac_regs_h__
+#define __mv_gmac_regs_h__
+/*
+#ifdef CONFIG_ARCH_MVEBU
+#include "mvNetConfig.h"
+#else
+#include "mvSysEthConfig.h"
+#endif
+*/
+
+
+/*TODO: define to correct values */
+#define PP3_GMAC_MAX			4
+#define GMAC_MNG_REG_BASE		0x123456
+#define GMAC_MNG_REG_BASE		0x123456
+#define GMAC_REG_BASE(port)		0x123456
+#define LMS_REG_BASE			0x123456
+#define GMAC_MIB_COUNTERS_REG_BASE	0x123456
+
+#define MNG_EXTENDED_GLOBAL_CTRL_REG	(GMAC_MNG_REG_BASE + 0x5c)
+
+/****************************************/
+/*        MAC Unit Registers            */
+/****************************************/
+
+/**** Tri-Speed Ports MAC and CPU Port MAC Configuration Sub-Unit Registers ****/
+#define GMAC_CTRL_0_REG				(0x0000)
+
+#define GMAC_PORT_EN_BIT			0
+#define GMAC_PORT_EN_MASK			(1 << GMAC_PORT_EN_BIT)
+
+#define GMAC_PORT_TYPE_BIT			1
+#define GMAC_PORT_TYPE_MASK			(1 << GMAC_PORT_TYPE_BIT)
+#define GMAC_PORT_TYPE_SGMII			(0 << GMAC_PORT_TYPE_BIT)
+#define GMAC_PORT_TYPE_1000X			(1 << GMAC_PORT_TYPE_BIT)
+
+#define GMAC_MAX_RX_SIZE_OFFS			2
+#define GMAC_MAX_RX_SIZE_MASK			(0x1FFF << GMAC_MAX_RX_SIZE_OFFS)
+
+#define GMAC_GMAC_MIB_CNTR_EN_BIT		15
+#define GMAC_GMAC_MIB_CNTR_EN_MASK		(1 << GMAC_GMAC_MIB_CNTR_EN_BIT)
+/*-------------------------------------------------------------------------------*/
+
+#define GMAC_CTRL_1_REG				(0x0004)
+
+#define GMAC_PERIODIC_XON_EN_BIT		1
+#define GMAC_PERIODIC_XON_EN_MASK		(0x1 << GMAC_PERIODIC_XON_EN_BIT)
+
+#define GMAC_GMII_LB_EN_BIT			5
+#define GMAC_GMII_LB_EN_MASK			(1 << GMAC_GMII_LB_EN_BIT)
+
+#define GMAC_PCS_LB_EN_BIT			6
+#define GMAC_PCS_LB_EN_MASK			(1 << GMAC_PCS_LB_EN_BIT)
+
+#define GMAC_SA_LOW_OFFS			7
+#define GMAC_SA_LOW_MASK			(0xFF << GMAC_SA_LOW_OFFS)
+/*-------------------------------------------------------------------------------*/
+
+#define GMAC_CTRL_2_REG				(0x0008)
+
+#define GMAC_INBAND_AN_BIT			0
+#define GMAC_INBAND_AN_MASK			(1 << GMAC_INBAND_AN_BIT)
+
+#define GMAC_PCS_ENABLE_BIT			3
+#define GMAC_PCS_ENABLE_MASK			(1 << GMAC_PCS_ENABLE_BIT)
+
+#define GMAC_PORT_RGMII_BIT			4
+#define GMAC_PORT_RGMII_MASK			(1 << GMAC_PORT_RGMII_BIT)
+
+#define GMAC_PORT_RESET_BIT			6
+#define GMAC_PORT_RESET_MASK			(1 << GMAC_PORT_RESET_BIT)
+/*-------------------------------------------------------------------------------*/
+
+/**** Port Auto-Negotiation Configuration Sub-Unit Registers ****/
+#define GMAC_AN_CTRL_REG			(0x000C)
+
+#define GMAC_FORCE_LINK_FAIL_BIT		0
+#define GMAC_FORCE_LINK_FAIL_MASK		(1 << GMAC_FORCE_LINK_FAIL_BIT)
+
+#define GMAC_FORCE_LINK_PASS_BIT		1
+#define GMAC_FORCE_LINK_PASS_MASK		(1 << GMAC_FORCE_LINK_PASS_BIT)
+
+#define GMAC_SET_MII_SPEED_100_BIT		5
+#define GMAC_SET_MII_SPEED_100_MASK		(1 << GMAC_SET_MII_SPEED_100_BIT)
+
+#define GMAC_SET_GMII_SPEED_1000_BIT		6
+#define GMAC_SET_GMII_SPEED_1000_MASK		(1 << GMAC_SET_GMII_SPEED_1000_BIT)
+
+#define GMAC_ENABLE_SPEED_AUTO_NEG_BIT		7
+#define GMAC_ENABLE_SPEED_AUTO_NEG_MASK		(1 << GMAC_ENABLE_SPEED_AUTO_NEG_BIT)
+
+#define GMAC_ENABLE_FLOW_CTRL_AUTO_NEG_BIT	11
+#define GMAC_ENABLE_FLOW_CTRL_AUTO_NEG_MASK	(1 << GMAC_ENABLE_FLOW_CTRL_AUTO_NEG_BIT)
+
+/* TODO: I keep this bit even though it's not listed in Cider */
+#define GMAC_SET_FLOW_CONTROL_BIT		8
+#define GMAC_SET_FLOW_CONTROL_MASK		(1 << GMAC_SET_FLOW_CONTROL_BIT)
+
+#define GMAC_FLOW_CONTROL_ADVERTISE_BIT		9
+#define GMAC_FLOW_CONTROL_ADVERTISE_MASK	(1 << GMAC_FLOW_CONTROL_ADVERTISE_BIT)
+
+#define GMAC_FLOW_CONTROL_ASYMETRIC_BIT		10
+#define GMAC_FLOW_CONTROL_ASYMETRIC_MASK	(1 << GMAC_FLOW_CONTROL_ASYMETRIC_BIT)
+
+#define GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_BIT	11
+#define GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_MASK	(1 << GMAC_ENABLE_FLOW_CONTROL_AUTO_NEG_BIT)
+
+#define GMAC_SET_FULL_DUPLEX_BIT		12
+#define GMAC_SET_FULL_DUPLEX_MASK		(1 << GMAC_SET_FULL_DUPLEX_BIT)
+
+#define GMAC_ENABLE_DUPLEX_AUTO_NEG_BIT		13
+#define GMAC_ENABLE_DUPLEX_AUTO_NEG_MASK	(1 << GMAC_ENABLE_DUPLEX_AUTO_NEG_BIT)
+/*-------------------------------------------------------------------------------*/
+
+/**** Port Status Sub-Unit Registers ****/
+#define GMAC_STATUS_REG				(0x1000)
+
+#define GMAC_LINK_UP_BIT			0
+#define GMAC_LINK_UP_MASK			(1 << GMAC_LINK_UP_BIT)
+
+#define GMAC_SPEED_1000_BIT			1
+#define GMAC_SPEED_1000_MASK			(1 << GMAC_SPEED_1000_BIT)
+
+#define GMAC_SPEED_100_BIT			2
+#define GMAC_SPEED_100_MASK			(1 << GMAC_SPEED_100_BIT)
+
+#define GMAC_FULL_DUPLEX_BIT			3
+#define GMAC_FULL_DUPLEX_MASK			(1 << GMAC_FULL_DUPLEX_BIT)
+
+#define GMAC_RX_FLOW_CTRL_ENABLE_BIT		4
+#define GMAC_RX_FLOW_CTRL_ENABLE_MASK		(1 << GMAC_RX_FLOW_CTRL_ENABLE_BIT)
+
+#define GMAC_TX_FLOW_CTRL_ENABLE_BIT		5
+#define GMAC_TX_FLOW_CTRL_ENABLE_MASK		(1 << GMAC_TX_FLOW_CTRL_ENABLE_BIT)
+
+#define GMAC_RX_FLOW_CTRL_ACTIVE_BIT		6
+#define GMAC_RX_FLOW_CTRL_ACTIVE_MASK		(1 << GMAC_RX_FLOW_CTRL_ACTIVE_BIT)
+
+#define GMAC_TX_FLOW_CTRL_ACTIVE_BIT		7
+#define GMAC_TX_FLOW_CTRL_ACTIVE_MASK		(1 << GMAC_TX_FLOW_CTRL_ACTIVE_BIT)
+/*-------------------------------------------------------------------------------*/
+
+/**** Port Internal Sub-Unit Registers ****/
+#define GMAC_PORT_FIFO_CFG_0_REG		(0x1800)
+
+#define GMAC_PORT_FIFO_CFG_1_REG		(0x1C00)
+
+#define GMAC_RX_FIFO_MAX_TH_OFFS		0
+
+#define GMAC_TX_FIFO_MIN_TH_OFFS		6
+#define GMAC_TX_FIFO_MIN_TH_ALL_MASK		(0x7F << GMAC_TX_FIFO_MIN_TH_OFFS)
+#define GMAC_TX_FIFO_MIN_TH_MASK(val)		(((val) << GMAC_TX_FIFO_MIN_TH_OFFS) & GMAC_TX_FIFO_MIN_TH_ALL_MASK)
+/*-------------------------------------------------------------------------------*/
+
+/**** Port Interrupt Sub-Unit Registers ****/
+#define GMAC_PORT_ISR_CAUSE_REG			(0x0020)
+
+#define GMAC_PORT_ISR_SUM_BIT			0
+#define GMAC_PORT_ISR_SUM_MASK			(1 << GMAC_PORT_ISR_SUM_BIT)
+
+#define GMAC_PORT_LINK_CHANGE_BIT		1
+#define GMAC_PORT_LINK_CHANGE_MASK		(1 << GMAC_PORT_LINK_CHANGE_BIT)
+
+#define GMAC_PORT_ISR_MASK_REG			(0x0024)
+/*-------------------------------------------------------------------------------*/
+
+/****************************************/
+/*	LMS Unit Registers		*/
+/****************************************/
+
+/*
+ * PHY Address Ports 0 through 5 Register
+ */
+#define PHY_ADDR_REG				(LMS_REG_BASE + 0x30)
+#define PHY_ADDR_OFFS(port)			(port * 5)
+#define PHY_ADDR_MASK(port)			(0x1F << PHY_ADDR_OFFS(port))
+
+/*------------------------------------------------------------------------------
+ * PHY Auto-Negotiation Configuration Register0
+ */
+#define PHY_AN_CFG0_REG				(LMS_REG_BASE + 0x34)
+#define PHY_AN_CFG0_STOP_AN_SMI0_BIT		7
+#define PHY_AN_CFG0_STOP_AN_SMI0_MASK		(1 << PHY_AN_CFG0_STOP_AN_SMI0_BIT)
+#define PHY_AN_EN_OFFS(port)			(port)
+#define PHY_AN_EN_MASK(port)			(1 << PHY_AN_EN_OFFS(port))
+
+/*------------------------------------------------------------------------------
+ * Interrupt Summary Cause Register
+ */
+#define ISR_SUM_CAUSE_REG			(LMS_REG_BASE + 0x10)
+#define ISR_SUM_LMS_BIT				0
+#define ISR_SUM_LMS_MASK			(1 << ISR_SUM_LMS_BIT)
+
+#define ISR_SUM_LMS0_BIT			1
+#define ISR_SUM_LMS0_MASK			(1 << ISR_SUM_LMS0_BIT)
+
+#define ISR_SUM_LMS1_BIT			2
+#define ISR_SUM_LMS1_MASK			(1 << ISR_SUM_LMS1_BIT)
+
+#define ISR_SUM_LMS2_BIT			3
+#define ISR_SUM_LMS2_MASK			(1 << ISR_SUM_LMS2_BIT)
+
+#define ISR_SUM_LMS3_BIT			4
+#define ISR_SUM_LMS3_MASK			(1 << ISR_SUM_LMS3_BIT)
+
+#define ISR_SUM_PORTS_BIT			16
+#define ISR_SUM_PORTS_MASK			(1 << ISR_SUM_PORTS_BIT)
+
+#define ISR_SUM_PORT0_BIT			17
+#define ISR_SUM_PORT0_MASK			(1 << ISR_SUM_PORT0_BIT)
+
+#define ISR_SUM_PORT1_BIT			18
+#define ISR_SUM_PORT1_MASK			(1 << ISR_SUM_PORT1_BIT)
+
+#define ISR_SUM_PORT2_BIT			19
+#define ISR_SUM_PORT2_MASK			(1 << ISR_SUM_PORT2_BIT)
+
+#define ISR_SUM_MASK_REG			(LMS_REG_BASE + 0x220c)
+
+/*------------------------------------------------------------------------------
+ * SMI Management Register
+ */
+#define SMI_REG(port)				(LMS_REG_BASE + 0x54)
+
+/****************************************/
+/*	GMAC_MIB counters		*/
+/****************************************/
+
+#define GMAC_MIB_PORT_OFFSET(port)		((port >> 1) * 0x400 + (port) * 0x400)
+#define GMAC_MIB_COUNTERS_BASE(port)		(GMAC_MIB_COUNTERS_REG_BASE + GMAC_MIB_PORT_OFFSET(port))
+
+/* GMAC_MIB Counters register definitions */
+#define GMAC_MIB_GOOD_OCTETS_RECEIVED_LOW	0x0
+#define GMAC_MIB_GOOD_OCTETS_RECEIVED_HIGH	0x4
+#define GMAC_MIB_BAD_OCTETS_RECEIVED		0x8
+/* Reserved				0xc */
+#define GMAC_MIB_UNICAST_FRAMES_RECEIVED	0x10
+#define GMAC_MIB_CRC_ERRORS_SENT		0x14
+#define GMAC_MIB_BROADCAST_FRAMES_RECEIVED	0x18
+#define GMAC_MIB_MULTICAST_FRAMES_RECEIVED	0x1c
+#define GMAC_MIB_FRAMES_64_OCTETS		0x20
+#define GMAC_MIB_FRAMES_65_TO_127_OCTETS	0x24
+#define GMAC_MIB_FRAMES_128_TO_255_OCTETS	0x28
+#define GMAC_MIB_FRAMES_256_TO_511_OCTETS	0x2c
+#define GMAC_MIB_FRAMES_512_TO_1023_OCTETS	0x30
+#define GMAC_MIB_FRAMES_1024_TO_MAX_OCTETS	0x34
+#define GMAC_MIB_GOOD_OCTETS_SENT_LOW		0x38
+#define GMAC_MIB_GOOD_OCTETS_SENT_HIGH		0x3c
+#define GMAC_MIB_UNICAST_FRAMES_SENT		0x40
+/* Reserved					0x44 */
+#define GMAC_MIB_MULTICAST_FRAMES_SENT		0x48
+#define GMAC_MIB_BROADCAST_FRAMES_SENT		0x4c
+/* Reserved					0x50 */
+#define GMAC_MIB_FC_SENT			0x54
+#define GMAC_MIB_FC_RECEIVED			0x58
+#define GMAC_MIB_RX_FIFO_OVERRUN		0x5c
+#define GMAC_MIB_UNDERSIZE_RECEIVED		0x60
+#define GMAC_MIB_FRAGMENTS_RECEIVED		0x64
+#define GMAC_MIB_OVERSIZE_RECEIVED		0x68
+#define GMAC_MIB_JABBER_RECEIVED		0x6c
+#define GMAC_MIB_MAC_RECEIVE_ERROR		0x70
+#define GMAC_MIB_BAD_CRC_EVENT			0x74
+#define GMAC_MIB_COLLISION			0x78
+#define GMAC_MIB_LATE_COLLISION			0x7c
+#endif /* mv_gmac_regs */
diff --git a/drivers/net/ethernet/marvell/pp3/gop/mv_gop.c b/drivers/net/ethernet/marvell/pp3/gop/mv_gop.c
deleted file mode 100644
index 90890ad..0000000
--- a/drivers/net/ethernet/marvell/pp3/gop/mv_gop.c
+++ /dev/null
@@ -1,123 +0,0 @@
-/*******************************************************************************
-Copyright (C) Marvell International Ltd. and its affiliates
-
-This software file (the "File") is owned and distributed by Marvell
-International Ltd. and/or its affiliates ("Marvell") under the following
-alternative licensing terms.  Once you have made an election to distribute the
-File under one of the following license alternatives, please (i) delete this
-introductory statement regarding license alternatives, (ii) delete the two
-license alternatives that you have not elected to use and (iii) preserve the
-Marvell copyright notice above.
-
-********************************************************************************
-Marvell Commercial License Option
-
-If you received this File from Marvell and you have entered into a commercial
-license agreement (a "Commercial License") with Marvell, the File is licensed
-to you under the terms of the applicable Commercial License.
-
-********************************************************************************
-Marvell GPL License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File in accordance with the terms and conditions of the General
-Public License Version 2, June 1991 (the "GPL License"), a copy of which is
-available along with the File in the license.txt file or by writing to the Free
-Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
-on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
-
-THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
-WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
-DISCLAIMED.  The GPL License provides additional details about this warranty
-disclaimer.
-********************************************************************************
-Marvell BSD License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File under the following licensing terms.
-Redistribution and use in source and binary forms, with or without modification,
-are permitted provided that the following conditions are met:
-
-    *   Redistributions of source code must retain the above copyright notice,
-	this list of conditions and the following disclaimer.
-
-    *   Redistributions in binary form must reproduce the above copyright
-	notice, this list of conditions and the following disclaimer in the
-	documentation and/or other materials provided with the distribution.
-
-    *   Neither the name of Marvell nor the names of its contributors may be
-	used to endorse or promote products derived from this software without
-	specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-*******************************************************************************/
-
-#include "gop/mv_gop.h"
-
-/*--------------------------------------------------------------*/
-/*------------------------- LINK -------------------------------*/
-/*--------------------------------------------------------------*/
-
-/* TODO: change ret val to bool */
-int mv_gop_is_link_up(int port)
-{
-	/* TODO */
-	return 0;
-}
-
-int mv_gop_link_status(int port, struct mv_link_status *p_status)
-{
-	/* TODO */
-	return 0;
-/*
-	pStatus->is_up = 0;
-	pStatus->speed = 0;
-	pStatus->duplex = 0;
-	pStatus->fc = 0;
-*/
-}
-
-char *mv_gop_link_speed_str_get(enum mv_link_speed speed)
-{
-	char *str;
-
-	switch (speed) {
-	case MV_ETH_SPEED_10:
-		str = "10 Mbps";
-		break;
-	case MV_ETH_SPEED_100:
-		str = "100 Mbps";
-		break;
-	case MV_ETH_SPEED_1000:
-		str = "1 Gbps";
-		break;
-	case MV_ETH_SPEED_2000:
-		str = "2 Gbps";
-		break;
-	case MV_ETH_SPEED_AN:
-		str = "AutoNeg";
-		break;
-	default:
-		str = "Unknown";
-	}
-	return str;
-}
-
-/*--------------------------------------------------------------*/
-/*-------------------------- RX --------------------------------*/
-/*--------------------------------------------------------------*/
-
-
-/*--------------------------------------------------------------*/
-/*-------------------------- TX --------------------------------*/
-/*--------------------------------------------------------------*/
diff --git a/drivers/net/ethernet/marvell/pp3/gop/mv_gop.h b/drivers/net/ethernet/marvell/pp3/gop/mv_gop.h
deleted file mode 100644
index 9d4b443..0000000
--- a/drivers/net/ethernet/marvell/pp3/gop/mv_gop.h
+++ /dev/null
@@ -1,119 +0,0 @@
-/*******************************************************************************
-Copyright (C) Marvell International Ltd. and its affiliates
-
-This software file (the "File") is owned and distributed by Marvell
-International Ltd. and/or its affiliates ("Marvell") under the following
-alternative licensing terms.  Once you have made an election to distribute the
-File under one of the following license alternatives, please (i) delete this
-introductory statement regarding license alternatives, (ii) delete the two
-license alternatives that you have not elected to use and (iii) preserve the
-Marvell copyright notice above.
-
-
-********************************************************************************
-Marvell GPL License Option
-
-If you received this File from Marvell, you may opt to use, redistribute and/or
-modify this File in accordance with the terms and conditions of the General
-Public License Version 2, June 1991 (the "GPL License"), a copy of which is
-available along with the File in the license.txt file or by writing to the Free
-Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
-on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
-
-THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
-WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
-DISCLAIMED.  The GPL License provides additional details about this warranty
-disclaimer.
-*******************************************************************************/
-#ifndef __mv_gop_h__
-#define __mv_gop_h__
-
-/*--------------------------------------------------------------*/
-/*------------------------- LINK -------------------------------*/
-/*--------------------------------------------------------------*/
-enum mv_link_speed {
-	MV_ETH_SPEED_AN,
-	MV_ETH_SPEED_10,
-	MV_ETH_SPEED_100,
-	MV_ETH_SPEED_1000,
-	MV_ETH_SPEED_2000,
-};
-
-enum mv_link_duplex {
-	MV_ETH_DUPLEX_AN,
-	MV_ETH_DUPLEX_HALF,
-	MV_ETH_DUPLEX_FULL
-};
-
-enum mv_link_fc {
-	MV_ETH_FC_AN_ADV_DIS,
-	MV_ETH_FC_AN_ADV_SYM,
-	MV_ETH_FC_DISABLE,
-	MV_ETH_FC_ENABLE
-};
-
-struct mv_link_status {
-	/* TODO: change is_up val to bool */
-	int is_up;
-	enum mv_link_speed speed;
-	enum mv_link_duplex duplex;
-	enum mv_link_fc fc;
-};
-
-int	mv_gop_is_link_up(int port); /* TODO: change ret val to bool */
-int	mv_gop_link_status(int port, struct mv_link_status *pStatus);
-char	*mv_gop_link_speed_str_get(enum mv_link_speed speed);
-
-/*--------------------------------------------------------------*/
-/*---------------------- Interrupts ----------------------------*/
-/*--------------------------------------------------------------*/
-static inline void mv_gop_isr_sum_mask(void)
-{
-	/* TODO */
-}
-
-static inline void mv_gop_isr_sum_unmask(void)
-{
-	/* TODO */
-}
-
-static inline void mv_pp3_gop_cpu_interrupt_enable(int port, int cpu_mask)
-{
-	/* TODO */
-}
-
-static inline void mv_pp3_gop_cpu_interrupt_disable(int port, int cpu_mask)
-{
-	/* TODO */
-}
-
-static inline unsigned int mv_gop_isr_cause_get(int port)
-{
-	/* TODO */
-	return 0;
-}
-
-static inline unsigned int mv_gop_isr_sum_get_cause_get(void)
-{
-	/* TODO */
-	return 0;
-}
-
-static inline void mv_gop_isr_unmask(int port)
-{
-	/* TODO */
-}
-
-static inline void mv_gop_isr_mask(int port)
-{
-	/* TODO */
-}
-/*--------------------------------------------------------------*/
-/*-------------------------- RX --------------------------------*/
-/*--------------------------------------------------------------*/
-
-/*--------------------------------------------------------------*/
-/*-------------------------- TX --------------------------------*/
-/*--------------------------------------------------------------*/
-
-#endif /* __mv_gop_h__ */
diff --git a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
index b65cee2..4610659 100644
--- a/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
+++ b/drivers/net/ethernet/marvell/pp3/net_dev/mv_netdev.h
@@ -38,6 +38,7 @@ disclaimer.
 #define MV_PP3_BM_POOLS 20
 #define MV_PP3_EMACS	5
 #define MV_PP3_FRAMES	4
+#define MV_ETH_MH_SIZE  2
 
 #define MV_PP3_EMAC_BASE(_emac_) (0x000CA000 + (0x1000 * (_emac_)))
 #define MV_PP3_POOL_INIT_TIMEOUT_MSEC	1000
-- 
1.7.5.4

