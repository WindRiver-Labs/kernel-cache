From fb0b47645a936c2810419f812e09a7924049df1c Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Wed, 24 Jul 2013 14:07:24 -0400
Subject: [PATCH 0893/1825] pp2: sysfs commands changes

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 265c7c04be06bf2ef2d8ec5ccac8dffc93021677

	Move regRead and regWrite commands from pp2/gbe to pp2/dbg
	Move tag, etypeMode and etypeDsa commands to prsHigh menu
	Change sysfs command from etypeDsaMode to etypeMode
	Change sysfs command hw_dump to dump

Change-Id: Ib3f4360edaa31adb572451a273de6163e6dda33f
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2825
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-by: Nadav Haklai <nadavh@marvell.com>
Tested-by: Nadav Haklai <nadavh@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_pp2/net_dev/mv_eth_dbg_sysfs.c              |   58 ++++++++--
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_eth_sysfs.c   |   54 ---------
 .../mv_drivers_lsp/mv_pp2/prs/prs_high_sysfs.c     |  117 +++++++++++---------
 3 files changed, 116 insertions(+), 113 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_dbg_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_dbg_sysfs.c
index 981053d..70c0ee4 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_dbg_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_dbg_sysfs.c
@@ -40,8 +40,10 @@ static ssize_t mv_eth_dbg_help(char *buf)
 {
 	int off = 0;
 
-	off += sprintf(buf+off, "cat                clean         - Clean all ports\n");
-	off += sprintf(buf+off, "cat                init          - Clean and init all ports\n");
+	off += sprintf(buf+off, "cat              clean     - Clean all ports\n");
+	off += sprintf(buf+off, "cat              init      - Clean and init all ports\n");
+	off += sprintf(buf+off, "echo offs      > regRead   - Read PPv2 register [ offs]\n");
+	off += sprintf(buf+off, "echo offs hex  > regWrite  - Write value [hex] to PPv2 register [offs]\n");
 
 	return off;
 }
@@ -67,17 +69,55 @@ static ssize_t mv_eth_dbg_show(struct device *dev,
 	return off;
 }
 
+static ssize_t mv_eth_dbg_reg_store(struct device *dev,
+				   struct device_attribute *attr, const char *buf, size_t len)
+{
+	const char      *name = attr->attr.name;
+	int             err;
+	unsigned int    r, v;
+	unsigned long   flags;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
+	/* Read port and value */
+	err = r = v = 0;
+	sscanf(buf, "%x %x", &r, &v);
+
+	local_irq_save(flags);
+
+	if (!strcmp(name, "regRead")) {
+		v = mvPp2RdReg(r);
+		pr_info("regRead val: 0x%08x\n", v);
+	}  else if (!strcmp(name, "regWrite")) {
+		mvPp2WrReg(r, v);
+	} else {
+		err = 1;
+		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+	}
+
+	local_irq_restore(flags);
+
+	if (err)
+		printk(KERN_ERR "%s: error %d\n", __func__, err);
+
+	return err ? -EINVAL : len;
+}
 
 
-static DEVICE_ATTR(help,	S_IRUSR, mv_eth_dbg_show, NULL);
-static DEVICE_ATTR(clean,	S_IRUSR, mv_eth_dbg_show, NULL);
-static DEVICE_ATTR(init,	S_IRUSR, mv_eth_dbg_show, NULL);
+static DEVICE_ATTR(help,          S_IRUSR, mv_eth_dbg_show, NULL);
+static DEVICE_ATTR(clean,         S_IRUSR, mv_eth_dbg_show, NULL);
+static DEVICE_ATTR(init,          S_IRUSR, mv_eth_dbg_show, NULL);
+static DEVICE_ATTR(regRead,       S_IWUSR, NULL, mv_eth_dbg_reg_store);
+static DEVICE_ATTR(regWrite,      S_IWUSR, NULL, mv_eth_dbg_reg_store);
 
 
 static struct attribute *mv_eth_dbg_attrs[] = {
 	&dev_attr_clean.attr,
 	&dev_attr_init.attr,
 	&dev_attr_help.attr,
+	&dev_attr_regRead.attr,
+	&dev_attr_regWrite.attr,
 	NULL
 };
 
@@ -87,20 +127,20 @@ static struct attribute_group mv_eth_dbg_group = {
 	.attrs = mv_eth_dbg_attrs,
 };
 
-int mv_pp2_dbg_sysfs_init(struct kobject *gbe_kobj)
+int mv_pp2_dbg_sysfs_init(struct kobject *pp2_kobj)
 {
 	int err;
 
-	err = sysfs_create_group(gbe_kobj, &mv_eth_dbg_group);
+	err = sysfs_create_group(pp2_kobj, &mv_eth_dbg_group);
 	if (err)
 		pr_err("sysfs group i%s failed %d\n", mv_eth_dbg_group.name, err);
 
 	return err;
 }
 
-int mv_pp2_dbg_sysfs_exit(struct kobject *gbe_kobj)
+int mv_pp2_dbg_sysfs_exit(struct kobject *pp2_kobj)
 {
-	sysfs_remove_group(gbe_kobj, &mv_eth_dbg_group);
+	sysfs_remove_group(pp2_kobj, &mv_eth_dbg_group);
 
 	return 0;
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_sysfs.c
index 6d8f6fb..98ffe39 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_sysfs.c
@@ -59,9 +59,6 @@ static ssize_t mv_eth_help(char *buf)
 	off += sprintf(buf+off, "echo [p]         > isrRegs     - show ISR registers for port i[p]\n");
 	off += sprintf(buf+off, "echo [p]         > dropCntrs   - show drop counters for port [p]\n");
 
-	off += sprintf(buf+off, "echo p [0|1|2|3] > tag         - set TAG mode: None[0], MH[1], DSA[2], EDSA[3]\n");
-	off += sprintf(buf+off, "echo p [0|1]     > etypeDsaMod - set DSA etherType mode: DSA[0], EDSA[1]\n");
-	off += sprintf(buf+off, "echo [hex]       > etypeDsa    - set new DSA etherType value\n");
 	off += sprintf(buf+off, "echo [0|1]       > pnc         - enable / disable Parser and Classifier access\n");
 	off += sprintf(buf+off, "echo [0|1]       > skb         - enable / disable skb recycle\n");
 
@@ -119,10 +116,6 @@ static ssize_t mv_eth_port_store(struct device *dev,
 		mv_eth_port_stats_print(p);
 	} else if (!strcmp(name, "pnc")) {
 		mv_eth_ctrl_pnc(p);
-	} else if (!strcmp(name, "tag")) {
-		mvPp2PrsTagModeSet(p, v);
-	} else if (!strcmp(name, "etypeDsaMod")) {
-		mvPp2PrsEtypeDsaModeSet(p, v);
 	} else if (!strcmp(name, "skb")) {
 		mv_eth_ctrl_recycle(p);
 	} else {
@@ -200,42 +193,6 @@ static ssize_t mv_eth_netdev_store(struct device *dev,
 	return err ? -EINVAL : len;
 }
 
-static ssize_t mv_eth_reg_store(struct device *dev,
-				   struct device_attribute *attr, const char *buf, size_t len)
-{
-	const char      *name = attr->attr.name;
-	int             err;
-	unsigned int    r, v;
-	unsigned long   flags;
-
-	if (!capable(CAP_NET_ADMIN))
-		return -EPERM;
-
-	/* Read port and value */
-	err = r = v = 0;
-	sscanf(buf, "%x %x", &r, &v);
-
-	local_irq_save(flags);
-
-	if (!strcmp(name, "regRead")) {
-		v = mvPp2RdReg(r);
-		printk(KERN_ERR "regRead val: 0x%08x\n", v);
-	}  else if (!strcmp(name, "regWrite")) {
-		mvPp2WrReg(r, v);
-	} else if (!strcmp(name, "etypeDsa")) {
-		mvPp2PrsEtypeDsaSet(r);
-	} else {
-		err = 1;
-		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
-	}
-
-	local_irq_restore(flags);
-
-	if (err)
-		printk(KERN_ERR "%s: error %d\n", __func__, err);
-
-	return err ? -EINVAL : len;
-}
 
 static DEVICE_ATTR(addrDec,	S_IRUSR, mv_eth_show, NULL);
 static DEVICE_ATTR(help,	S_IRUSR, mv_eth_show, NULL);
@@ -249,17 +206,11 @@ static DEVICE_ATTR(dropCntrs,	S_IWUSR, NULL, mv_eth_port_store);
 static DEVICE_ATTR(stats,       S_IWUSR, NULL, mv_eth_port_store);
 static DEVICE_ATTR(pnc,		S_IWUSR, NULL, mv_eth_port_store);
 static DEVICE_ATTR(skb,         S_IWUSR, NULL, mv_eth_port_store);
-static DEVICE_ATTR(tag,		S_IWUSR, NULL, mv_eth_port_store);
-
-static DEVICE_ATTR(etypeDsaMod,	S_IWUSR, NULL, mv_eth_port_store);
-static DEVICE_ATTR(etypeDsa,	S_IWUSR, NULL, mv_eth_reg_store);
 
 static DEVICE_ATTR(port,	S_IWUSR, NULL, mv_eth_port_store);
 static DEVICE_ATTR(cntrs,	S_IWUSR, NULL, mv_eth_port_store);
 static DEVICE_ATTR(netdev,	S_IWUSR, NULL, mv_eth_netdev_store);
 
-static DEVICE_ATTR(regRead,       S_IWUSR, NULL, mv_eth_reg_store);
-static DEVICE_ATTR(regWrite,      S_IWUSR, NULL, mv_eth_reg_store);
 
 static struct attribute *mv_eth_attrs[] = {
 	&dev_attr_help.attr,
@@ -272,11 +223,6 @@ static struct attribute *mv_eth_attrs[] = {
 	&dev_attr_stats.attr,
 	&dev_attr_pnc.attr,
 	&dev_attr_skb.attr,
-	&dev_attr_tag.attr,
-	&dev_attr_etypeDsaMod.attr,
-	&dev_attr_etypeDsa.attr,
-	&dev_attr_regRead.attr,
-	&dev_attr_regWrite.attr,
 #ifdef CONFIG_MV_ETH_DEBUG_CODE
 	&dev_attr_debug.attr,
 #endif
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/prs/prs_high_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/prs/prs_high_sysfs.c
index 4df9b66..7f488fa 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/prs/prs_high_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/prs/prs_high_sysfs.c
@@ -38,29 +38,34 @@ disclaimer.
 #include "pp2/prs/mvPp2Prs.h"
 
 
-static ssize_t mv_prs_high_help(char *buf)
+static ssize_t mv_prs_high_help(char *b)
 {
-	int off = 0;
-
-
-	off += scnprintf(buf + off, PAGE_SIZE - off, "cat                hw_dump   - dump all valid HW entries\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b c d e   > flow      - Add flow entry to HW\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "                               flowId <a>, result <b>, result mask <c>, port <d>, tcam index <e>.\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b c       > vlan1     - Single vlan entry tpid1 <a>, ports bitmap <b>, add/del <c=1/0>.\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b c d     > vlan2     - Double vlan entry tpid1 <a>, tpid2 <b>, ports bitmap <c>\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "                               add/del <d=1/0>.\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b c d e   > vlan3     - Triple vlan entry tpid1 <a>, tpid2 <b>, tpid3 <c>\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "                               ports bitmap <d>, add/del <e=1/0>.\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b c d e f > mac_range - Add mac entry to HW\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "                               portMap <a>, da <b>, da mask <c>, ri <d>, ri mask <e>, finish <f>.\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b c       > mac_del   - Del mac entry from HW\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "                               portMap <a>, da <b>, da mask <c>.\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b c d e  > etype_add  - Add ethertype entry to HW\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "                               portMap <a>, ethertype <b>, ri <c>, ri mask <d>, finish <e>.\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "echo a b        > etype_del  - Del ethertype entry from HW, portMap <a>, ethertype <b>\n");
-	off += scnprintf(buf + off, PAGE_SIZE - off, "\n");
-	return off;
+	int o = 0;
+
+
+	o += scnprintf(b+o, PAGE_SIZE-o, "cat                dump      - Dump all valid HW entries\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b c d e   > flow      - Add flow entry to HW\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "                               id <a>, result <b> mask <c>, port <d>, tcam index <e>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b [1|0]   > vlan1     - Add/Delete single vlan: tpid1 <a>, port map <b>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b c [1|0] > vlan2     - Add/Delete double vlan: tpid1 <a>, tpid2 <b>, port map <c>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b c d e   > vlan3     - Triple vlan entry tpid1 <a>, tpid2 <b>, tpid3 <c>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "                               ports bitmap <d>, add/del <e=1/0>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b c d e f > mac_range - Add mac entry to HW\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "                               port map <a>, da <b> mask <c>, ri <d> mask <e>, end <f>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b c       > mac_del   - Delete mac entry from HW\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "                               port map <a>, da <b>, da mask <c>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b c d e   > etype_add - Add ethertype entry to HW\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "                               port map <a>, etype <b>, ri <c> mask <d>, end <e>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo a b         > etype_del - Delete etype <b> entry from HW for ports in port map <a>\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo p [0|1|2|3] > tag       - None[0], Marvell Header[1], DSA tag[2], EDSA tag[3]\n");
+	/* etypeDsaMod and etypeDsa meaningless if  port in DSA/EDSA mode */
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo p {0|1}     > etypeMod  - Expected EtherType DSA[0]/EDSA[1] if port tag is not DSA/EDSA\n");
+	/* typeDsa meaningless if  all ports in DSA/EDSA mode */
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo [hex]       > etypeDsa  - Expected DSA/EDSA ethertype [hex]\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "\n");
+	return o;
 }
 
 
@@ -73,7 +78,7 @@ static ssize_t mv_prs_high_show(struct device *dev,
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
 
-	if (!strcmp(name, "hw_dump"))
+	if (!strcmp(name, "dump"))
 		mvPp2PrsHwDump();
 	else
 		off += mv_prs_high_help(buf);
@@ -95,18 +100,24 @@ static ssize_t mv_prs_high_store_unsigned(struct device *dev,
 
 	local_irq_save(flags);
 
-	if (!strcmp(name, "hw_flow"))
+	if (!strcmp(name, "flow"))
 		mvPrsFlowIdGen(e, a, b, c, d);
-	else if (!strcmp(name, "hw_vlan1"))
+	else if (!strcmp(name, "vlan1"))
 		mvPp2PrsSingleVlan(a, b, c);
-	else if (!strcmp(name, "hw_vlan2"))
+	else if (!strcmp(name, "vlan2"))
 		mvPp2PrsDoubleVlan(a, b, c, d);
-	else if (!strcmp(name, "hw_vlan3"))
+	else if (!strcmp(name, "vlan3"))
 		mvPp2PrsTripleVlan(a, b, c, d, e);
-	else if (!strcmp(name, "hw_etype_add"))
+	else if (!strcmp(name, "etype_add"))
 		mvPrsEthTypeSet(a, b, c, d, e);
-	else if (!strcmp(name, "hw_etype_del"))
+	else if (!strcmp(name, "etype_del"))
 		mvPrsEthTypeDel(a, b);
+	else if (!strcmp(name, "tag"))
+		mvPp2PrsTagModeSet(a, b);
+	else if (!strcmp(name, "etypeMod"))
+		mvPp2PrsEtypeDsaModeSet(a, b);
+	else if (!strcmp(name, "etypeDsa"))
+		mvPp2PrsEtypeDsaSet(a);
 	else {
 		err = 1;
 		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
@@ -140,9 +151,9 @@ static ssize_t mv_prs_high_store_str(struct device *dev,
 
 	local_irq_save(flags);
 
-	if (!strcmp(name, "hw_mac_range"))
+	if (!strcmp(name, "mac_range"))
 		mvPrsMacDaRangeSet(prt, da, da_mask, ri, ri_mask, fin);
-	else if (!strcmp(name, "hw_mac_del"))
+	else if (!strcmp(name, "mac_del"))
 		mvPrsMacDaRangeDel(prt, da, da_mask);
 	else {
 		err = 1;
@@ -156,29 +167,35 @@ static ssize_t mv_prs_high_store_str(struct device *dev,
 	return err ? -EINVAL : len;
 }
 
-static DEVICE_ATTR(hw_dump,		S_IRUSR, mv_prs_high_show, NULL);
-static DEVICE_ATTR(hw_flow,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
-static DEVICE_ATTR(hw_vlan1,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
-static DEVICE_ATTR(hw_vlan2,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
-static DEVICE_ATTR(hw_vlan3,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
-static DEVICE_ATTR(hw_etype_add,	S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
-static DEVICE_ATTR(hw_etype_del,	S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
-static DEVICE_ATTR(hw_mac_range,	S_IWUSR, mv_prs_high_show, mv_prs_high_store_str);
-static DEVICE_ATTR(hw_mac_del,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_str);
+static DEVICE_ATTR(dump,		S_IRUSR, mv_prs_high_show, NULL);
+static DEVICE_ATTR(flow,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(vlan1,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(vlan2,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(vlan3,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(etype_add,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(etype_del,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(mac_range,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_str);
+static DEVICE_ATTR(mac_del,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_str);
+static DEVICE_ATTR(tag,			S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(etypeMod,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
+static DEVICE_ATTR(etypeDsa,		S_IWUSR, mv_prs_high_show, mv_prs_high_store_unsigned);
 static DEVICE_ATTR(help,		S_IRUSR, mv_prs_high_show, NULL);
 
 
 static struct attribute *prs_high_attrs[] = {
-    &dev_attr_hw_dump.attr,
-    &dev_attr_help.attr,
-    &dev_attr_hw_flow.attr,
-    &dev_attr_hw_vlan1.attr,
-    &dev_attr_hw_vlan2.attr,
-    &dev_attr_hw_vlan3.attr,
-    &dev_attr_hw_etype_add.attr,
-    &dev_attr_hw_etype_del.attr,
-    &dev_attr_hw_mac_range.attr,
-    &dev_attr_hw_mac_del.attr,
+	&dev_attr_dump.attr,
+	&dev_attr_help.attr,
+	&dev_attr_flow.attr,
+	&dev_attr_vlan1.attr,
+	&dev_attr_vlan2.attr,
+	&dev_attr_vlan3.attr,
+	&dev_attr_etype_add.attr,
+	&dev_attr_etype_del.attr,
+	&dev_attr_mac_range.attr,
+	&dev_attr_mac_del.attr,
+	&dev_attr_tag.attr,
+	&dev_attr_etypeMod.attr,
+	&dev_attr_etypeDsa.attr,
     NULL
 };
 
-- 
1.7.5.4

