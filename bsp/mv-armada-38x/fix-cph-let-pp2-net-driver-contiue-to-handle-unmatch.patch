From aa6bcbb3b99b1117cc292900f956fb8879c4f042 Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Thu, 19 Jun 2014 09:42:11 +0800
Subject: [PATCH 1723/1825] fix: cph: let pp2 net driver contiue to handle
 unmatched packets in CPH

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit baf987d63f8617176be4a233e652a844fce890c1

	if a pakcet does not match any CPH rules, it needs to be handled
	by pp2 net driver, e.g., release skb memory ...
	NO issue number, raised by ZTE customer.

Signed-off-by: Ken Ma <make@marvell.com>

Change-Id: Iff56e4c9ff537cccfced21fa7df7eb3b4fa6aaf8
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8596
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/cph/mv_cph_netdev.c      |   15 +++++++++------
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   15 ++++++++-------
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h      |    4 ++--
 3 files changed, 19 insertions(+), 15 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cph/mv_cph_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cph/mv_cph_netdev.c
index 884bd88..2d7b41b 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cph/mv_cph_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/cph/mv_cph_netdev.c
@@ -727,9 +727,10 @@ int cph_app_packet_tx(int port, struct net_device *dev, struct sk_buff *skb,
 *       None.
 *
 * RETURNS:
-*       None.
+*       1: the packet will be handled and forwarded to linux stack in CPH
+*       0: the packet will not be forwarded to linux stack and mv_eth_rx() needs to continue to handle it
 *******************************************************************************/
-void cph_rx_func(int port, int rxq, struct net_device *dev,
+int cph_rx_func(int port, int rxq, struct net_device *dev,
 		struct sk_buff *skb, struct pp2_rx_desc *rx_desc)
 {
 	MV_CPH_CLEAN_PRINT(CPH_DEBUG_LEVEL, "\n");
@@ -743,25 +744,27 @@ void cph_rx_func(int port, int rxq, struct net_device *dev,
 	if (mvPp2IsRxSpecial(rx_desc->parserInfo)) {
 		/* Receive application packets */
 		if (cph_app_packet_rx(port, dev, skb, rx_desc))
-			return;
+			return 1;
 		MV_CPH_PRINT(CPH_DEBUG_LEVEL, "Failed to receive application packet\n");
 
 		/* Handle the broadcast packet in case it is enabled */
 #ifdef CONFIG_MV_CPH_BC_HANDLE
 		if (cph_app_rx_bc(port, dev, skb, rx_desc))
-			return;
+			return 1;
 		MV_CPH_PRINT(CPH_DEBUG_LEVEL, "BC packet failure\n");
 #endif
 		/* deliver to upper layer */
 		MV_CPH_PRINT(CPH_DEBUG_LEVEL, "Deliver to upper layer\n");
 	} else {/* Handle received data flow packets */
 #ifdef CONFIG_MV_CPH_FLOW_MAP_HANDLE
-		if (cph_data_flow_rx(port, dev, skb, rx_desc))
+		if (cph_data_flow_rx(port, dev, skb, rx_desc)) {
 			MV_CPH_PRINT(CPH_DEBUG_LEVEL, "Flow mapping\n");
+			return 0;
+		}
 #endif
 	}
 
-	return;
+	return 0;
 }
 
 /******************************************************************************
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 321297d..26e9ebc 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -1265,7 +1265,7 @@ void mv_eth_tx_special_check_func(int port,
 
 #ifdef CONFIG_MV_ETH_RX_SPECIAL
 /* Register special transmit check function */
-void mv_eth_rx_special_proc_func(int port, void (*func)(int port, int rxq, struct net_device *dev,
+void mv_eth_rx_special_proc_func(int port, int (*func)(int port, int rxq, struct net_device *dev,
 							struct sk_buff *skb, struct pp2_rx_desc *rx_desc))
 {
 	struct eth_port *pp = mv_eth_port_by_id(port);
@@ -1949,13 +1949,14 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq, struct na
 		/* Special RX processing */
 		if (mvPp2IsRxSpecial(rx_desc->parserInfo)) {
 			if (pp->rx_special_proc) {
-				pp->rx_special_proc(pp->port, rxq, dev, skb, rx_desc);
-				STAT_INFO(pp->stats.rx_special++);
+				if (pp->rx_special_proc(pp->port, rxq, dev, skb, rx_desc)) {
+					STAT_INFO(pp->stats.rx_special++);
 
-				/* Refill processing */
-				mv_eth_refill(ppool, bm, 0);
-				mvOsCacheLineInv(NULL, rx_desc);
-				continue;
+					/* Refill processing */
+					mv_eth_refill(ppool, bm, 0);
+					mvOsCacheLineInv(NULL, rx_desc);
+					continue;
+				}
 			}
 		}
 #endif /* CONFIG_MV_ETH_RX_SPECIAL */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
index 370f4e2..ec7f65c 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
@@ -388,7 +388,7 @@ struct eth_port {
 	unsigned long		rx_rate_pkts;
 	unsigned long		rx_timestamp;
 #ifdef CONFIG_MV_ETH_RX_SPECIAL
-	void			(*rx_special_proc)(int port, int rxq, struct net_device *dev,
+	int			(*rx_special_proc)(int port, int rxq, struct net_device *dev,
 						struct sk_buff *skb, struct pp2_rx_desc *rx_desc);
 #endif /* CONFIG_MV_ETH_RX_SPECIAL */
 #ifdef CONFIG_MV_ETH_TX_SPECIAL
@@ -998,7 +998,7 @@ void        mv_eth_tx_special_check_func(int port, int (*func)(int port, struct
 #endif /* CONFIG_MV_ETH_TX_SPECIAL */
 
 #ifdef CONFIG_MV_ETH_RX_SPECIAL
-void        mv_eth_rx_special_proc_func(int port, void (*func)(int port, int rxq, struct net_device *dev,
+void        mv_eth_rx_special_proc_func(int port, int (*func)(int port, int rxq, struct net_device *dev,
 							struct sk_buff *skb, struct pp2_rx_desc *rx_desc));
 #endif /* CONFIG_MV_ETH_RX_SPECIAL */
 
-- 
1.7.5.4

