From f6a1f0ccdb938391def5319eef808e7d21c0112f Mon Sep 17 00:00:00 2001
From: Piotr Ziecik <kosmo@semihalf.com>
Date: Mon, 5 May 2014 19:36:55 +0200
Subject: [PATCH 1619/1825] alp: dragonite: Map only TCM memories (80+32 kB)
 instead of full Dragonite TCM address space
 (128MB).

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit ea3518998733bfa7658668f36a13b08dd59ea607

	This commit significantly reduces vmspace usage, leaving more
	resources for other devices.

Change-Id: I120d45f876cd80457eaf07088d10cb944caadc39
Signed-off-by: Piotr Ziecik <kosmo@semihalf.com>
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7859
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/core.c                      |    7 ++-
 arch/arm/mach-avantalp/include/mach/avantalp.h     |    3 +
 .../mv_drivers_lsp/mv_dragonite/dragonite.c        |   69 ++++++++++++-------
 .../mv_drivers_lsp/mv_dragonite/dragonite.h        |    8 ++-
 4 files changed, 58 insertions(+), 29 deletions(-)

diff --git a/arch/arm/mach-avantalp/core.c b/arch/arm/mach-avantalp/core.c
index ee54256..dcf13ef 100644
--- a/arch/arm/mach-avantalp/core.c
+++ b/arch/arm/mach-avantalp/core.c
@@ -679,7 +679,12 @@ void __init alp_sdio_init(void)
 static struct resource dragonite_resources[] = {
 	[0] = {
 		.start	= DRAGONITE_PHYS_BASE,
-		.end	= DRAGONITE_PHYS_BASE + DRAGONITE_SIZE,
+		.end	= DRAGONITE_PHYS_BASE + DRAGONITE_ITCM_SIZE - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= DRAGONITE_PHYS_BASE + DRAGONITE_DTCM_OFFSET,
+		.end	= DRAGONITE_PHYS_BASE + DRAGONITE_DTCM_OFFSET + DRAGONITE_DTCM_SIZE - 1,
 		.flags	= IORESOURCE_MEM,
 	}
 };
diff --git a/arch/arm/mach-avantalp/include/mach/avantalp.h b/arch/arm/mach-avantalp/include/mach/avantalp.h
index 5724f33..6723325 100644
--- a/arch/arm/mach-avantalp/include/mach/avantalp.h
+++ b/arch/arm/mach-avantalp/include/mach/avantalp.h
@@ -39,6 +39,9 @@
 #define PEX1_MEM_SIZE			_16M
 
 #define DRAGONITE_PHYS_BASE		0xE8000000
+#define DRAGONITE_ITCM_SIZE		(80 * 1024)
+#define DRAGONITE_DTCM_OFFSET		0x04000000
+#define DRAGONITE_DTCM_SIZE		(32 * 1024)
 #define DRAGONITE_SIZE			_128M
 
 #define PEX0_IO_PHYS_BASE		0xF1100000
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.c
index 7282e7f..fe1777c 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.c
@@ -33,7 +33,6 @@
 #define DRAGONITE_XBRIDGE_WIN_CTRL(n)		(0x0 + 0x10 * (n))
 #define DRAGONITE_XBRIDGE_WIN_BASE(n)		(0x4 + 0x10 * (n))
 
-#define DRAGONITE_ITCM_SIZE	(80 * 1024)
 #define FIRMWARE_FILE		"dragonite/dragonite.bin"
 
 #define DRAGONITE_RUNIT_BASE	0x08000000
@@ -104,27 +103,19 @@ static int dragonite_enable(struct dragonite_info *info)
 static int dragonite_load_firmware(struct device *dev, struct dragonite_info *info)
 {
 	const struct firmware *fw = NULL;
-	u8 *itcm_ptr = (u8 *)info->tcm_base;
-	int offset;
 
 	if (request_firmware(&fw, FIRMWARE_FILE, dev)) {
 		dev_err(dev, "Failed requesting firmware %s\n", FIRMWARE_FILE);
 		return -ENOENT;
 	}
 
-	if (fw->size > DRAGONITE_ITCM_SIZE) {
+	if (fw->size > info->itcm_size) {
 		dev_err(dev, "Firmware size %d is larger than ITCM size %d\n",
-		       fw->size, DRAGONITE_ITCM_SIZE);
+		       fw->size, info->itcm_size);
 		return -ENOMEM;
 	}
 
-	/*
-	 * Write the firmware to instruction memory (ITCM)
-	 * Load in byte resolution to avoid endianes issues
-	 */
-	for (offset = 0; offset < fw->size; offset++)
-		*(itcm_ptr + offset) = *(fw->data + offset);
-
+	memcpy_toio(info->itcm_base, fw->data, fw->size);
 	release_firmware(fw);
 
 	return 0;
@@ -148,7 +139,8 @@ int dragonite_run(struct dragonite_info *info)
 static int dragonite_probe(struct platform_device *pdev)
 {
 	struct dragonite_info *info = dev_get_platdata(&pdev->dev);
-	struct resource *tcm;
+	struct resource *itcm;
+	struct resource *dtcm;
 	int ret = 0;
 
 	dev_info(&pdev->dev, "Initializing Co-processor...\n");
@@ -160,23 +152,44 @@ static int dragonite_probe(struct platform_device *pdev)
 	info->pdev = pdev;
 
 	/* Map the dragonite tightly coupled memory (TCM) to host cpu */
-	tcm = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (tcm == NULL) {
-		dev_err(&pdev->dev, "TCM memory resource missing\n");
+	itcm = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (itcm == NULL) {
+		dev_err(&pdev->dev, "ITCM memory resource missing\n");
 		return -ENODEV;
 	}
 
-	if (!request_mem_region(tcm->start, resource_size(tcm), pdev->name)) {
-		dev_dbg(&pdev->dev, "Failed requesting TCM region\n");
+	info->itcm_size = resource_size(itcm);
+	if (!request_mem_region(itcm->start, info->itcm_size, pdev->name)) {
+		dev_dbg(&pdev->dev, "Failed requesting ITCM region\n");
 		return -EBUSY;
 	}
-	info->tcm_base  = devm_ioremap_nocache(&pdev->dev, tcm->start, resource_size(tcm));
-	if (!info->tcm_base) {
-		dev_dbg(&pdev->dev, "Failed mapping TCM space\n");
+	info->itcm_base  = devm_ioremap_nocache(&pdev->dev, itcm->start, info->itcm_size);
+	if (!info->itcm_base) {
+		dev_dbg(&pdev->dev, "Failed mapping ITCM space\n");
+		ret = -EFAULT;
+		goto fail_release_itcm;
+	}
+
+	dtcm = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	if (dtcm == NULL) {
+		dev_err(&pdev->dev, "DTCM memory resource missing\n");
+		ret = -EBUSY;
+		goto fail_unmap_itcm;
+	}
+
+	info->dtcm_size = resource_size(dtcm);
+	if (!request_mem_region(dtcm->start, info->dtcm_size, pdev->name)) {
+		dev_dbg(&pdev->dev, "Failed requesting DTCM region\n");
+		ret = -EBUSY;
+		goto fail_unmap_itcm;
+	}
+
+	info->dtcm_base  = devm_ioremap_nocache(&pdev->dev, dtcm->start, info->dtcm_size);
+	if (!info->dtcm_base) {
+		dev_dbg(&pdev->dev, "Failed mapping DTCM space\n");
 		ret = -EFAULT;
-		goto fail_release_tcm;
+		goto fail_release_dtcm;
 	}
-	info->tcm_phys_base = (void __iomem *)tcm->start;
 
 	/* Turn on the dragonite unit */
 	ret = dragonite_enable(info);
@@ -200,9 +213,13 @@ static int dragonite_probe(struct platform_device *pdev)
 	return 0;
 
 fail:
-	iounmap(info->tcm_base);
-fail_release_tcm:
-	release_mem_region(tcm->start, resource_size(tcm));
+	iounmap(info->dtcm_base);
+fail_release_dtcm:
+	release_mem_region(dtcm->start, resource_size(dtcm));
+fail_unmap_itcm:
+	iounmap(info->itcm_base);
+fail_release_itcm:
+	release_mem_region(itcm->start, resource_size(itcm));
 	return ret;
 }
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.h
index 3d570e8..2514189 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_dragonite/dragonite.h
@@ -3,12 +3,16 @@
 
 struct dragonite_info {
 	struct platform_device	*pdev;
-	void __iomem	*tcm_base;
-	void __iomem	*tcm_phys_base;
 	void __iomem    *ctrl_reg;
 	void __iomem	*reset_reg;
 	void __iomem	*jtag_reg;
 	void __iomem	*win_regs;
+
+	void __iomem	*itcm_base;
+	size_t		itcm_size;
+
+	void __iomem	*dtcm_base;
+	size_t		dtcm_size;
 };
 
 int dragonite_run(struct dragonite_info *info);
-- 
1.7.5.4

