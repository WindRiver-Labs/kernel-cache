From b1c3357c84f5709f7683b6c22d6a54bdb91a09c8 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Wed, 15 Jan 2014 17:08:55 +0200
Subject: [PATCH 1291/1825] neta: disable by compile XOR related code

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 752b479ac9d610b40dbfe2be7e738e3786b78375

      Use CONFIG_MV_INCLUDE_XOR to enable XOR releated code.

Change-Id: I31cdaa1afdf8610e68082f1f0513c396075bd02c
Signed-off-by: Yelena <yelena@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c       |   15 +++++++--
 .../mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c      |   30 +++++++++++++++----
 .../mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.h      |    2 +-
 3 files changed, 35 insertions(+), 12 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c
index 4a9479d..78f261f 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c
@@ -50,7 +50,9 @@ static ssize_t l2fw_help(char *buf)
 
 	/* inputs in decimal */
 	off += sprintf(buf+off, "echo rxp txp mode > l2fw      - set L2FW mode: 0-dis,1-as_is,2-swap,3-copy,4-ipsec\n");
+#ifdef CONFIG_MV_INCLUDE_XOR
 	off += sprintf(buf+off, "echo rxp thresh   > l2fw_xor  - set XOR threshold in bytes for port <rxp>\n");
+	#endif
 	off += sprintf(buf+off, "echo rxp en       > lookup    - enable/disable hash lookup for <rxp>\n");
 	off += sprintf(buf+off, "echo 1            > flush     - flush L2fw rules DB\n");
 
@@ -175,13 +177,14 @@ static ssize_t l2fw_store(struct device *dev,
 
 	local_irq_save(flags);
 
-	if (!strcmp(name, "l2fw_xor"))
-		l2fw_xor(a, b);
-	else if (!strcmp(name, "lookup"))
+	if (!strcmp(name, "lookup"))
 		l2fw_lookupEn(a, b);
-
 	else if (!strcmp(name, "l2fw"))
 		l2fw(c, a, b);
+#ifdef CONFIG_MV_INCLUDE_XOR
+	else if (!strcmp(name, "l2fw_xor"))
+		l2fw_xor(a, b);
+#endif
 #ifdef CONFIG_MV_ETH_L2SEC
 	else if (!strcmp(name, "cesa_chan"))
 		err = mv_l2sec_set_cesa_chan(a, b);
@@ -197,7 +200,9 @@ static ssize_t l2fw_store(struct device *dev,
 
 
 static DEVICE_ATTR(l2fw,		S_IWUSR, l2fw_show, l2fw_store);
+#ifdef CONFIG_MV_INCLUDE_XOR
 static DEVICE_ATTR(l2fw_xor,		S_IWUSR, l2fw_show, l2fw_store);
+#endif
 static DEVICE_ATTR(lookup,		S_IWUSR, l2fw_show, l2fw_store);
 static DEVICE_ATTR(l2fw_add_ip,		S_IWUSR, l2fw_show, l2fw_ip_store);
 static DEVICE_ATTR(help,		S_IRUSR, l2fw_show,  NULL);
@@ -214,7 +219,9 @@ static DEVICE_ATTR(cesa_chan,		S_IWUSR, NULL,  l2fw_store);
 
 static struct attribute *l2fw_attrs[] = {
 	&dev_attr_l2fw.attr,
+#ifdef CONFIG_MV_INCLUDE_XOR
 	&dev_attr_l2fw_xor.attr,
+#endif
 	&dev_attr_lookup.attr,
 	&dev_attr_l2fw_add_ip.attr,
 	&dev_attr_help.attr,
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
index 0d3ff1b..6e8c996 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
@@ -28,20 +28,25 @@ disclaimer.
 
 #include <linux/ctype.h>
 #include <linux/module.h>
-#include  <linux/interrupt.h>
+#include <linux/interrupt.h>
 
+#ifdef CONFIG_MV_INCLUDE_XOR
 #include "xor/mvXor.h"
 #include "xor/mvXorRegs.h"
 #include "mv_hal_if/mvSysXorApi.h"
+#endif /* CONFIG_MV_INCLUDE_XOR */
 
 #include "mvOs.h"
 #include "mv_eth_l2fw.h"
-#include "mv_neta/net_dev/mv_netdev.h"
 #include "gbe/mvNeta.h"
 #include "gbe/mvNetaRegs.h"
 #include "mvDebug.h"
-#include "mv_eth_l2sec.h"
+#ifdef CONFIG_ARCH_MVEBU
+#include "mvNetConfig.h"
+#else /* CONFIG_ARCH_MVEBU */
 #include "ctrlEnv/mvCtrlEnvLib.h"
+#endif /* CONFIG_ARCH_MVEBU */
+
 #include "gbe/mvNeta.h"
 
 #ifdef CONFIG_MV_ETH_L2SEC
@@ -58,8 +63,10 @@ static L2FW_RULE **l2fw_hash = NULL;
 
 static MV_U32 l2fw_jhash_iv;
 
+#ifdef CONFIG_MV_INCLUDE_XOR
 static MV_XOR_DESC *eth_xor_desc;
 static MV_LONG      eth_xor_desc_phys_addr;
+#endif /* CONFIG_MV_INCLUDE_XOR */
 
 struct eth_port_l2fw **mv_eth_ports_l2fw;
 static inline int       mv_eth_l2fw_rx(struct eth_port *pp, int rx_todo, int rxq);
@@ -450,6 +457,7 @@ struct eth_pbuf *eth_l2fw_copy_packet_withoutXor(struct eth_pbuf *pRxPktInfo)
 	return pTxPktInfo;
 }
 
+#ifdef CONFIG_MV_INCLUDE_XOR
 static inline
 struct eth_pbuf *eth_l2fw_copy_packet_withXor(struct eth_pbuf *pRxPktInfo)
 {
@@ -491,7 +499,6 @@ struct eth_pbuf *eth_l2fw_copy_packet_withXor(struct eth_pbuf *pRxPktInfo)
 	return pTxPktInfo;
 }
 
-#ifdef CONFIG_MV_INCLUDE_XOR
 void setXorDesc(void)
 {
 	unsigned int mode;
@@ -509,7 +516,6 @@ void setXorDesc(void)
 	dump_xor();
 	/* TODO mask xor intterupts*/
 }
-#endif
 
 static inline int xorReady(void)
 {
@@ -528,6 +534,7 @@ static inline int xorReady(void)
 
 	return 1;
 }
+#endif /* CONFIG_MV_INCLUDE_XOR */
 
 
 void l2fw(int cmd, int rx_port, int tx_port)
@@ -557,6 +564,7 @@ void l2fw(int cmd, int rx_port, int tx_port)
 	mv_eth_set_l2fw(ppl2fw, cmd, rx_port, tx_port);
 }
 
+#ifdef CONFIG_MV_INCLUDE_XOR
 void l2fw_xor(int rx_port, int threshold)
 {
 	int max_port = CONFIG_MV_ETH_PORTS_NUM - 1;
@@ -569,6 +577,7 @@ void l2fw_xor(int rx_port, int threshold)
 	mvOsPrintf("setting port %d threshold to %d in %s\n", rx_port, threshold, __func__);
 	mv_eth_ports_l2fw[rx_port]->xorThreshold = threshold;
 }
+#endif /* CONFIG_MV_INCLUDE_XOR */
 
 void l2fw_lookupEn(int rx_port, int enable)
 {
@@ -622,8 +631,10 @@ static inline MV_STATUS mv_eth_l2fw_tx(struct eth_pbuf *pkt, struct eth_port *pp
 		/*read_unlock(&pp->rwlock);*/
 		/* No resources: Drop */
 		pp->dev->stats.tx_dropped++;
+#ifdef CONFIG_MV_INCLUDE_XOR
 		if (withXor)
 			xorReady();
+#endif /* CONFIG_MV_INCLUDE_XOR */
 		return MV_DROPPED;
 	}
 	txq_ctrl->txq_count++;
@@ -647,6 +658,7 @@ static inline MV_STATUS mv_eth_l2fw_tx(struct eth_pbuf *pkt, struct eth_port *pp
 
 	mv_eth_tx_desc_flush(tx_desc);
 
+#ifdef CONFIG_MV_INCLUDE_XOR
 	if (withXor) {
 		if (!xorReady()) {
 			mvOsPrintf("MV_DROPPED in %s\n", __func__);
@@ -657,6 +669,7 @@ static inline MV_STATUS mv_eth_l2fw_tx(struct eth_pbuf *pkt, struct eth_port *pp
 			return MV_DROPPED;
 		}
 	}
+#endif /* CONFIG_MV_INCLUDE_XOR */
 	mv_neta_wmb();
 	mvNetaTxqPendDescAdd(pp->port, pp->txp, txq, 1);
 
@@ -781,13 +794,16 @@ static inline int mv_eth_l2fw_rx(struct eth_port *pp, int rx_todo, int rxq)
 			break;
 
 		case CMD_L2FW_COPY_SWAP:
+#ifdef CONFIG_MV_INCLUDE_XOR
 			if (pkt->bytes >= ppl2fw->xorThreshold) {
 				newpkt = eth_l2fw_copy_packet_withXor(pkt);
 				if (newpkt)
 					status = mv_eth_l2fw_tx(newpkt, new_pp, 1, rx_desc);
 				else
 					status = MV_ERROR;
-			} else {
+			} else
+#endif /* CONFIG_MV_INCLUDE_XOR */
+			{
 					newpkt = eth_l2fw_copy_packet_withoutXor(pkt);
 					if (newpkt)
 						status = mv_eth_l2fw_tx(newpkt, new_pp, 0, rx_desc);
@@ -850,7 +866,7 @@ int mv_l2fw_init(void)
 	int size, port;
 	MV_U32 bytes;
 	MV_U32 regVal;
-	mv_eth_ports_l2fw_num = mvCtrlEthMaxPortGet();
+	mv_eth_ports_l2fw_num = MV_ETH_MAX_PORTS; /* mvCtrlEthMaxPortGet();*/
 	mvOsPrintf("in %s: mv_eth_ports_l2fw_num=%d\n", __func__, mv_eth_ports_l2fw_num);
 
 	size = mv_eth_ports_l2fw_num * sizeof(struct eth_port_l2fw *);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.h
index 5d03e39..232314d 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.h
@@ -30,7 +30,7 @@ disclaimer.
 #define L2FW_MV_ETH_L2FW_H
 
 #include "mvOs.h"
-#include "mv_neta/net_dev/mv_netdev.h"
+#include "net_dev/mv_netdev.h"
 
 #define	L2FW_HASH_SIZE   (1 << 17)
 #define	L2FW_HASH_MASK   (L2FW_HASH_SIZE - 1)
-- 
1.7.5.4

