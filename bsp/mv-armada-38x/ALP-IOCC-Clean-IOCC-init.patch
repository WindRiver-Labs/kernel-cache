From 2786b8a66ec435428719731234c5c39f63c0ac4e Mon Sep 17 00:00:00 2001
From: Kosta Zertsekel <konszert@marvell.com>
Date: Mon, 8 Apr 2013 10:04:44 +0300
Subject: [PATCH 0552/1825] ALP: IOCC: Clean IOCC init

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 67b7336d5bcfcf1f3f928160002de443b7f54cad

Basically, what is left for IOCC configuration is to tell CIB bridge
to invalidate snooped cache line from where it is found (L1 and/or L2
cache).

Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Change-Id: I5c61849d1df8130f11add41a1222705312c6558c
Reviewed-on: http://vgitil04.il.marvell.com:8080/1499
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/core.c |   44 +++++-----------------------------------
 1 files changed, 6 insertions(+), 38 deletions(-)

diff --git a/arch/arm/mach-avantalp/core.c b/arch/arm/mach-avantalp/core.c
index fda9114..d1afbda 100644
--- a/arch/arm/mach-avantalp/core.c
+++ b/arch/arm/mach-avantalp/core.c
@@ -616,26 +616,14 @@ static void io_coherency_init(void)
 {
 	MV_U32 reg;
 
-	/* set CIB read snoop command to ReadUnique */
-	reg = MV_REG_READ(MV_CIB_CTRL_CFG_REG);
+#define CIB_CTRL_CFG			0x20280
+
+	/* Set CIB read snoop command to ReadUnique */
+	reg = MV_REG_READ(CIB_CTRL_CFG);
 	reg &= ~(7 << 16);
 	reg |= (7 << 16);
-	MV_REG_WRITE(MV_CIB_CTRL_CFG_REG, reg);
-
-#ifndef CONFIG_SMP
-	/* enable CPUs in SMP group on Fabric coherency */
-	reg = MV_REG_READ(MV_COHERENCY_FABRIC_CTRL_REG);
-	reg &= ~(0x3 << 24);
-	reg |= 1 << 24;
-	MV_REG_WRITE(MV_COHERENCY_FABRIC_CTRL_REG, reg);
-
-	reg = MV_REG_READ(MV_COHERENCY_FABRIC_CFG_REG);
-	reg &= ~(0x3 << 24);
-	reg |= 1 << 24;
-	MV_REG_WRITE(MV_COHERENCY_FABRIC_CFG_REG, reg);
-#endif
+	MV_REG_WRITE(CIB_CTRL_CFG, reg);
 }
-
 #endif
 
 #ifdef CONFIG_DEBUG_LL
@@ -656,35 +644,15 @@ static struct ct_desc *ct_descs[] __initdata = {
 
 static void cpu_fabric_common_init(void)
 {
-	int i;
-
-#if 0
-	for (i = 0; i < ARRAY_SIZE(v2m_amba_devs); i++)
-		amba_device_register(v2m_amba_devs[i], &iomem_resource);
-#endif
-
 #ifdef CONFIG_CACHE_L2X0
 	void __iomem *l2x0_base = INTER_REGS_VIRT_BASE + MV_CA9X2_L2CC_OFFSET;
-
-	/* set RAM latencies to 1 cycle for this core tile. */
-#if 0
-	writel(0, l2x0_base + L2X0_TAG_LATENCY_CTRL);
-	writel(0, l2x0_base + L2X0_DATA_LATENCY_CTRL);
-#endif
-
 	l2x0_init(l2x0_base, 0x00400000, 0xfe0fffff);
 #endif
-#if 0
-	for (i = 0; i < ARRAY_SIZE(mv_ca9x2_amba_devs); i++)
-		amba_device_register(mv_ca9x2_amba_devs[i], &iomem_resource);
-
-	platform_device_register(&pmu_device);
 
-#ifdef  CONFIG_AURORA_IO_CACHE_COHERENCY
+#ifdef CONFIG_AURORA_IO_CACHE_COHERENCY
 	printk("Support IO coherency.\n");
 	io_coherency_init();
 #endif
-#endif
 }
 
 /*****************************************************************************
-- 
1.7.5.4

