From 4a957828deb30d7c53e386e1e9eabc4cc5ea2575 Mon Sep 17 00:00:00 2001
From: Kosta Zertsekel <konszert@marvell.com>
Date: Sun, 24 Nov 2013 15:08:49 +0200
Subject: [PATCH 1162/1825] fix: cp15: alp: Fix printing CP15 registers

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 030f614e2aa03084a72ed81d6dd05a33df49b3ab

	All CP15 commands caused kernel crash, hence, they are removed.

Change-Id: I183bfc4a91c3fda6effd4c55b339af28c08dd183
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/4430
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/dump_cp15_regs.c |   88 ++++++++-----------------------
 1 files changed, 23 insertions(+), 65 deletions(-)

diff --git a/arch/arm/mach-avantalp/dump_cp15_regs.c b/arch/arm/mach-avantalp/dump_cp15_regs.c
index 69406c3..531364b 100644
--- a/arch/arm/mach-avantalp/dump_cp15_regs.c
+++ b/arch/arm/mach-avantalp/dump_cp15_regs.c
@@ -19,72 +19,67 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	char *p = page;
 	int len;
 	unsigned int value;
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c0, 0": "=r"(value));
 	p += sprintf(p, "Main ID: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c0, 1": "=r"(value));
 	p += sprintf(p, "Cache Type: 0x%08x\n", value);
-	
-#ifdef CONFIG_CPU_V7
+
 	asm volatile("mrc p15, 0, %0, c0, c0, 2": "=r"(value));
 	p += sprintf(p, "TCM Type: 0x%08x\n", value);
-#endif	
 
 	asm volatile("mrc p15, 0, %0, c0, c0, 3": "=r"(value));
 	p += sprintf(p, "TLB Type: 0x%08x\n", value);
 
-#ifdef CONFIG_CPU_V7
 	asm volatile("mrc p15, 0, %0, c0, c0, 5": "=r"(value));
 	p += sprintf(p, "Microprocessor ID: 0x%08x\n", value);
-#endif	
 
 	asm volatile("mrc p15, 0, %0, c0, c1, 0": "=r"(value));
 	p += sprintf(p, "Processor Feature 0: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c1, 1": "=r"(value));
 	p += sprintf(p, "Processor Feature 1: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c1, 2": "=r"(value));
 	p += sprintf(p, "Debug Feature 0: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c1, 3": "=r"(value));
 	p += sprintf(p, "Auxiliary Feature 0: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c1, 4": "=r"(value));
 	p += sprintf(p, "Memory Model Feature 0: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c1, 5": "=r"(value));
 	p += sprintf(p, "Memory Model Feature 1: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c1, 6": "=r"(value));
 	p += sprintf(p, "Memory Model Feature 2: 0x%08x\n", value);
 
 	asm volatile("mrc p15, 0, %0, c0, c1, 7": "=r"(value));
 	p += sprintf(p, "Memory Model Feature 3: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c2, 0": "=r"(value));
 	p += sprintf(p, "Set Attribute 0: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c2, 1": "=r"(value));
 	p += sprintf(p, "Set Attribute 1: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c2, 2": "=r"(value));
 	p += sprintf(p, "Set Attribute 2: 0x%08x\n", value);
 
 	asm volatile("mrc p15, 0, %0, c0, c2, 3": "=r"(value));
 	p += sprintf(p, "Set Attribute 3: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c2, 4": "=r"(value));
 	p += sprintf(p, "Set Attribute 4: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c0, c2, 5": "=r"(value));
 	p += sprintf(p, "Set Attribute 5: 0x%08x\n", value);
 
-#ifdef CONFIG_CPU_V7
 	asm volatile("mrc p15, 1, %0, c0, c0, 0": "=r"(value));
 	p += sprintf(p, "Current Cache Size ID: 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 1, %0, c0, c0, 1": "=r"(value));
 	p += sprintf(p, "Current Cache Level ID: 0x%08x\n", value);
 
@@ -93,7 +88,7 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 
 	asm volatile("mrc p15, 2, %0, c0, c0, 0": "=r"(value));
 	p += sprintf(p, "Cache Size Selection: 0x%08x\n", value);
-#endif
+
 	asm volatile("mrc p15, 0, %0, c1, c0, 0": "=r"(value));
 	p += sprintf(p, "Control : 0x%08x\n", value);
 
@@ -102,28 +97,28 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 
 	asm volatile("mrc p15, 0, %0, c1, c0, 2": "=r"(value));
 	p += sprintf(p, "Coprocessor Access Control : 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c1, c1, 0": "=r"(value));
 	p += sprintf(p, "Secure Configuration : 0x%08x\n", value);
 
 	asm volatile("mrc p15, 0, %0, c2, c0, 0": "=r"(value));
 	p += sprintf(p, "Translation Table Base 0 : 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c2, c0, 1": "=r"(value));
 	p += sprintf(p, "Translation Table Base 1 : 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c2, c0, 2": "=r"(value));
 	p += sprintf(p, "Translation Table Control : 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c3, c0, 0": "=r"(value));
 	p += sprintf(p, "Domain Access Control : 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c5, c0, 0": "=r"(value));
 	p += sprintf(p, "Data Fault Status : 0x%08x\n", value);
 
 	asm volatile("mrc p15, 0, %0, c5, c0, 1": "=r"(value));
 	p += sprintf(p, "Instruction Fault Status : 0x%08x\n", value);
-	
+
 	asm volatile("mrc p15, 0, %0, c6, c0, 0": "=r"(value));
 	p += sprintf(p, "Data Fault Address : 0x%08x\n", value);
 
@@ -132,35 +127,7 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 
 	asm volatile("mrc p15, 0, %0, c6, c0, 2": "=r"(value));
 	p += sprintf(p, "Instruction Fault Address : 0x%08x\n", value);
-	
-	asm volatile("mrc p15, 0, %0, c7, c10, 6": "=r"(value));
-	p += sprintf(p, "Cache Dirty Status: 0x%08x\n", value);
-	
-	asm volatile("mrc p15, 1, %0, c15, c1, 0": "=r"(value));
-	p += sprintf(p, "Auxiliary Debug Modes Control 0: 0x%08x\n", value);
-
-	asm volatile("mrc p15, 1, %0, c15, c1, 1": "=r"(value));
-	p += sprintf(p, "Auxiliary Debug Modes Control 1: 0x%08x\n", value);
-
-	asm volatile("mrc p15, 1, %0, c15, c1, 0": "=r"(value));
-	p += sprintf(p, "Control Configuration: 0x%08x\n", value);
-	p += sprintf(p, "    Write Buffer Coalescing\t: %s\n", (value & (1 << 8)) ?
-		     "Enabled" : "Disabled");
-	if (value & (1 << 8))
-		p += sprintf(p, "    WB WAIT CYC\t: 0x%x\n", (value >> 9) & 0x7);
-
-	p += sprintf(p, "    Coprocessor dual issue \t: %s\n", (value & (1 << 15)) ?
-		     "Disabled" : "Enabled");
 
-	p += sprintf(p, "    L2 write allocate\t: %s\n", (value & (1 << 28)) ?
-		     "Enabled" : "Disabled");
-
-	p += sprintf(p, "    Streaming\t: %s\n", (value & (1 << 29)) ?
-		     "Enabled" : "Disabled");
-
-	asm volatile("mrc p15, 1, %0, c15, c12, 0": "=r"(value));
-	p += sprintf(p, "CPU ID Code Extension: 0x%08x\n", value);
-	
 	asm volatile("mrc p15, 0, %0, c9, c14, 0": "=r"(value));
 	p += sprintf(p, "User mode access for PMC registers: %s\n", (value & 1) ?
 		     "Enabled" : "Disabled");
@@ -170,19 +137,10 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	asm volatile("mrc p15, 0, %0, c10, c2, 1": "=r"(value));
 	p += sprintf(p, "Memory Attribute NMRR: 0x%08x\n", value);
 
-	asm volatile("mrc p15, 1, %0, c15, c1, 2": "=r"(value));
-	p += sprintf(p, "Auxiliary Debug Modes Control 2: 0x%08x\n", value);
-
-	asm volatile("mrc p15, 1, %0, c15, c2, 0": "=r"(value));
-	p += sprintf(p, "Auxiliary Functional Modes Control 0: 0x%08x\n", value);
-
-	asm volatile("mrc p15, 1, %0, c15, c2, 1": "=r"(value));
-	p += sprintf(p, "Auxiliary Functional Modes Control 1: 0x%08x\n", value);
-
 	len = (p - page) - off;
 	if (len < 0)
 		len = 0;
-	
+
 	*eof = (len <= count) ? 1 : 0;
 	*start = page + off;
 
-- 
1.7.5.4

