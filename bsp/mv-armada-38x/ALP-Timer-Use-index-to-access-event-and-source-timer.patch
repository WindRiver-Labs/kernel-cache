From 032c032ed34b6af0c275960139c788c369fc6e03 Mon Sep 17 00:00:00 2001
From: Kosta Zertsekel <konszert@marvell.com>
Date: Sun, 5 May 2013 10:26:31 +0300
Subject: [PATCH 0637/1825] ALP: Timer: Use index to access event and source
 timers

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 8fc419a4c231e6a1b8b03f27413d8044a9b82b0c

Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Change-Id: Ifbc684036d1c28dd804e5128c7790be7d608905b
Reviewed-on: http://vgitil04.il.marvell.com:8080/1752
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/include/mach/irqs.h |    3 ++
 arch/arm/mach-avantalp/time.c              |   35 +++++++++++++++++----------
 2 files changed, 25 insertions(+), 13 deletions(-)

diff --git a/arch/arm/mach-avantalp/include/mach/irqs.h b/arch/arm/mach-avantalp/include/mach/irqs.h
index 59424bc..9e675dd 100644
--- a/arch/arm/mach-avantalp/include/mach/irqs.h
+++ b/arch/arm/mach-avantalp/include/mach/irqs.h
@@ -33,6 +33,9 @@
 #define IRQ_GLOBAL_TIMER1		41
 #define IRQ_GLOBAL_TIMER2		42
 #define IRQ_GLOBAL_TIMER3		43
+#define IRQ_GLOBAL_TIMER(timer)		((timer >= 0 && timer <= 3) ? \
+					IRQ_GLOBAL_TIMER0 + timer : \
+					IRQ_GLOBAL_TIMER0)
 
 #define IRQ_GLOBAL_UART0		44
 #define IRQ_GLOBAL_UART1		45
diff --git a/arch/arm/mach-avantalp/time.c b/arch/arm/mach-avantalp/time.c
index 9629460..23c8605 100644
--- a/arch/arm/mach-avantalp/time.c
+++ b/arch/arm/mach-avantalp/time.c
@@ -40,17 +40,23 @@
 #define TIMER_VAL(x)		(MV_CNTMR_REGS_OFFSET + 0x0014 + (8 * x))
 #define TIMER_TURN_25MHZ(x)	(1 << (11 + x))
 
+/*
+ * Define SoC global timers to be used for event and source timers
+ */
+static int event_timer_id;
+static int source_timer_id;
+
 static u32 ticks_per_jiffy;
 
 static u32 notrace alp_clksrc_read32(void)
 {
-	u32 cyc = ~MV_REG_READ(TIMER_VAL(0));
+	u32 cyc = ~MV_REG_READ(TIMER_VAL(source_timer_id));
 	return cyc;
 }
 
 static cycle_t alp_clksrc_read(struct clocksource *cs)
 {
-	return (0xffffffff - MV_REG_READ(TIMER_VAL(0)));
+	return 0xffffffff - MV_REG_READ(TIMER_VAL(source_timer_id));
 }
 
 static struct clocksource alp_clksrc = {
@@ -65,7 +71,7 @@ static struct clocksource alp_clksrc = {
 int alp_clkevt_next_event(unsigned long delta, struct clock_event_device *evt)
 {
 	unsigned long flags;
-	u32 u;
+	u32 u, t = event_timer_id;
 
 	if (delta == 0)
 		return -ETIME;
@@ -73,14 +79,14 @@ int alp_clkevt_next_event(unsigned long delta, struct clock_event_device *evt)
 	local_irq_save(flags);
 
 	/* Clear and enable clockevent timer interrupt */
-	MV_REG_WRITE(TIMER_CAUSE, TIMER_INT_CLR(1));
+	MV_REG_WRITE(TIMER_CAUSE, TIMER_INT_CLR(t));
 
 	/* Setup new clockevent timer value */
-	MV_REG_WRITE(TIMER_VAL(1), delta);
+	MV_REG_WRITE(TIMER_VAL(t), delta);
 
 	/* Enable the timer */
 	u = MV_REG_READ(TIMER_CTRL);
-	u = (u & ~TIMER_RELOAD_EN(1)) | TIMER_EN(1);
+	u = (u & ~TIMER_RELOAD_EN(t)) | TIMER_EN(t);
 	MV_REG_WRITE(TIMER_CTRL, u);
 
 	local_irq_restore(flags);
@@ -89,8 +95,8 @@ int alp_clkevt_next_event(unsigned long delta, struct clock_event_device *evt)
 
 static void alp_clkevt_mode(enum clock_event_mode mode, struct clock_event_device *evt)
 {
-	unsigned long flags, t = 1;
-	u32 u;
+	unsigned long flags;
+	u32 u, t = event_timer_id;
 	local_irq_save(flags);
 
 	if (mode == CLOCK_EVT_MODE_PERIODIC || mode == CLOCK_EVT_MODE_ONESHOT) {
@@ -119,8 +125,10 @@ static struct clock_event_device alp_clkevt;
 
 static irqreturn_t alp_timer_interrupt(int irq, void *dev_id)
 {
+	u32 t = event_timer_id;
+
 	/* Ack timer interrupt */
-	MV_REG_WRITE(TIMER_CAUSE, TIMER_INT_CLR(1));
+	MV_REG_WRITE(TIMER_CAUSE, TIMER_INT_CLR(t));
 
 	alp_clkevt.event_handler(&alp_clkevt);
 	return IRQ_HANDLED;
@@ -260,11 +268,12 @@ static void __init alp_timer_init(void)
 
 	alp_clear_timer_config();
 
-	/* Global timer 0 - for clock source */
-	alp_setup_clocksource(0, rate);
+	/* Define timers used for event and source */
+	event_timer_id = 1;
+	source_timer_id = 0;
 
-	/* Global timer 1 - for clock event */
-	alp_setup_clockevent(IRQ_GLOBAL_TIMER1, rate);
+	alp_setup_clocksource(source_timer_id, rate);
+	alp_setup_clockevent(IRQ_GLOBAL_TIMER(event_timer_id), rate);
 
 	alp_twd_init();
 }
-- 
1.7.5.4

