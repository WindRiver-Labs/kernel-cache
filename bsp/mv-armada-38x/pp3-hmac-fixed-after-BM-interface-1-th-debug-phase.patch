From 972c19620a2232aa55df017f959b606dd40a97d3 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Mon, 28 Apr 2014 10:42:31 +0300
Subject: [PATCH 1594/1825] pp3: hmac fixed after BM interface 1-th debug
 phase

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 5cef16577696abe79a8bebd9b62401a757887281

	New function for frame configuration added:
	void mv_pp3_hmac_frame_cfg(u32 frame_id, u8 vm_id)

Change-Id: I9d7c5cc07ece006e0d419ed14b16deba5343e051
Signed-off-by: Yelena <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7733
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c |   22 ++++++++++++++++++++--
 drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h |    9 ++++++++-
 2 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
index d3b2f4f..75fef19 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.c
@@ -115,6 +115,24 @@ void mv_pp3_hmac_frame_unit_base(unsigned int unit_offset, unsigned int ins_offs
 	pp3_hmac_fr.ins_offs = ins_offset;
 }
 
+/* configure frame parameters */
+void mv_pp3_hmac_frame_cfg(u32 frame, u8 vm_id)
+{
+	u32 reg_data;
+
+	PP3_HMAC_DEBUG;
+	reg_data = mv_pp3_hmac_gl_reg_read(MV_HMAC_VMID_FRAME_REG(frame));
+	U32_SET_FIELD(reg_data, MV_HMAC_VMID_FRAME_CONTEXT_ID_MASK,
+		(vm_id & MV_HMAC_VMID_FRAME_CONTEXT_ID_MASK) << MV_HMAC_VMID_FRAME_CONTEXT_ID_OFFS);
+	mv_pp3_hmac_gl_reg_write(MV_HMAC_VMID_FRAME_REG(frame), reg_data);
+
+	reg_data = mv_pp3_hmac_gl_reg_read(MV_HMAC_AXI_PROT_SECURE_REG(frame));
+	U32_SET_FIELD(reg_data, MV_HMAC_AXI_PROT_SECURE_AXI_PROT_SECURE_MASK,
+	((vm_id >> 7) & MV_HMAC_AXI_PROT_SECURE_AXI_PROT_SECURE_MASK) << MV_HMAC_AXI_PROT_SECURE_AXI_PROT_SECURE_OFFS);
+	mv_pp3_hmac_gl_reg_write(MV_HMAC_AXI_PROT_SECURE_REG(frame), reg_data);
+}
+
+
 /* configure queue to be used like BM queue */
 void mv_pp3_hmac_queue_bm_mode_cfg(int frame, int queue)
 {
@@ -166,7 +184,7 @@ void *mv_pp3_hmac_rxq_init(int frame, int queue, int size)
 	qctrl->size = size;
 	mv_pp3_hmac_queue_create(qctrl);
 	/* Write pointer to allocated memory */
-	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_ADDR_LOW(queue), (u32)qctrl->first);
+	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_ADDR_LOW(queue), (u32)virt_to_phys(qctrl->first));
 	/* Store queue size in rq_size table, number of 16B units */
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_RQ_SIZE(queue), (u32)qctrl->size);
 	/* Configure Receive Threshold TBD */
@@ -262,7 +280,7 @@ void *mv_pp3_hmac_txq_init(int frame, int queue, int size, int cfh_size)
 	qctrl->cfh_size = cfh_size;
 
 	/* Write pointer to allocated memory */
-	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_ADDR_LOW(queue), (u32)qctrl->first);
+	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_ADDR_LOW(queue), (u32)virt_to_phys(qctrl->first));
 	/* Store queue size in rq_size table, number of 16B units */
 	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_SIZE(queue), (u32)qctrl->size);
 
diff --git a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
index b6bf2d7..bfa2108 100644
--- a/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
+++ b/drivers/net/ethernet/marvell/pp3/hmac/mv_hmac.h
@@ -165,6 +165,11 @@ void mv_pp3_hmac_gl_unit_base(u32 unit_offset);
 void mv_pp3_hmac_frame_unit_base(u32 unit_offset, u32 frame_offset);
 
 /*****************************************
+ *        Frame init functions           *
+ *****************************************/
+void mv_pp3_hmac_frame_cfg(u32 frame_id, u8 vm_id);
+
+/*****************************************
  *           RX queue functions          *
  *****************************************/
 /* Allocate memory and init RX queue HW facility
@@ -323,7 +328,9 @@ static inline void mv_pp3_hmac_txq_send(int frame, int queue, int size)
 	struct mv_pp3_hmac_queue_ctrl *qctrl = mv_hmac_txq_handle[frame][queue];
 
 	size += qctrl->dummy_dg;
-	mv_pp3_hmac_frame_reg_write(frame, MV_HMAC_SEND_Q_OCC_STATUS_UPDATE_REG(queue), size);
+
+	mv_pp3_hmac_frame_reg_write(frame, MV_PP3_HMAC_SQ_OCC_STATUS(queue), size);
+
 	qctrl->dummy_dg = 0;
 }
 
-- 
1.7.5.4

