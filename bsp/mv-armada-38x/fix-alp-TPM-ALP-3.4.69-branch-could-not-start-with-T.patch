From 4324830e2a134b58966644a4c30ec1556b924eb7 Mon Sep 17 00:00:00 2001
From: Evan <xswang@marvell.com>
Date: Thu, 15 May 2014 10:18:34 +0800
Subject: [PATCH 1662/1825] fix:alp:TPM: ALP 3.4.69 branch could not start
 with TPM module in latest git code

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 71f3254d7e7887807473b5f894f0c34f525603a0

Signed-off-by: Evan <xswang@marvell.com>

Change-Id: I2ff96afc617987249d31e13acc5e85de31f95f9b
Reviewed-on: http://vgitil04.il.marvell.com:8080/8038
Reviewed-by: Hua Jing <jinghua@marvell.com>
Reviewed-by: Ken Ma <make@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
(cherry picked from commit 71a7bc9c26056e889fccca217f92b5164ccd2f01)
Reviewed-on: http://vgitil04.il.marvell.com:8080/8053
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h |    1 +
 .../mv_drivers_lsp/mv_tpm/inc/tpm_init.h           |   21 +
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_db.c        |  938 +++++++++++---------
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c    |    6 +
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_init.c      |   30 +
 5 files changed, 598 insertions(+), 398 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h
index 0116f5d..e800ee3 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_db.h
@@ -702,5 +702,6 @@ int tpm_db_sw_port_ingr_bc_rate_set(enum tpm_sw_port_t port, unsigned int rate);
 
 /* DB general section */
 int tpm_db_init(void);
+int tpm_db_exit(void);
 
 #endif /* _TPM_DB_H_ */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_init.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_init.h
index 2e0ec35..54dd5d7 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_init.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_init.h
@@ -567,6 +567,27 @@ int tpm_init_db_init(void);
 int tpm_module_init(void);
 
 /*******************************************************************************
+* tpm_module_exit()
+*
+* DESCRIPTION: Memory free when TPM module exit.
+*
+* INPUTS:
+*	None
+*
+* OUTPUTS:
+*	None
+*
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_error_code_t.
+*
+* Comments:
+*	This function will be called once TPM kernel module is loaded
+*
+*******************************************************************************/
+int tpm_module_exit(void);
+
+/*******************************************************************************
 * tpm_module_start()
 *
 * DESCRIPTION: Starts the TPM module
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_db.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_db.c
index 43a9860..9dbcf23 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_db.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_db.c
@@ -38,46 +38,158 @@ disclaimer.
 #include "tpm_header.h"
 #include "boardEnv/mvBoardEnvLib.h"
 #include <linux/sort.h>
+#include <linux/vmalloc.h>
 
 /* Global TPM database */
-static struct tpm_db_t g_tpm_db;
+static struct tpm_db_t *g_tpm_db;
 
 /* Global init configuration */
-static struct tpm_init_t g_init_cfg;
-
-static struct tpm_db_param_t g_tpm_init_pre_start_param[] = {
-	/* Parameter type                  Container     */
-	{TPM_DB_PARAM_SWITCH_INIT,	   &g_init_cfg.switch_init},
-	{TPM_DB_PARAM_MC_DATA_HANDLE,	   &g_init_cfg.mc_data_handle},
-	{TPM_DB_PARAM_MC_SW_HANDLE,	   &g_init_cfg.mc_sw_handle},
-	{TPM_DB_PARAM_MAX_UNI_NUM,	   &g_init_cfg.max_num_uni_ports},
-	{TPM_DB_PARAM_IPV6_SUPPORT,	   &g_init_cfg.ipv6_support},
-	{TPM_DB_PARAM_CPU_RX_QUEUE,	   &g_init_cfg.cpu_trap_rx_queue},
-	{TPM_DB_PARAM_TTL_ILLEGAL_ACTION,  &g_init_cfg.ttl_illegal_action},
-	{TPM_DB_PARAM_BAD_CHKSUM_ACTION,   &g_init_cfg.bad_chksum_action},
-	{TPM_DB_PARAM_TCP_FLAG_CHECK,	   &g_init_cfg.tcp_flag_check},
-	{TPM_DB_PARAM_TRACE_DEBUG_FLAG,	   &g_init_cfg.trace_debug_flag},
-	{TPM_DB_PARAM_QOS_TABLE_EXT,	   &g_init_cfg.qos_tbl_ext},
-	{TPM_DB_PARAM_CNM_SUPPORT,	   &g_init_cfg.cnm_support},
-};
-static unsigned int g_tpm_init_pre_start_param_num = (sizeof(g_tpm_init_pre_start_param)/sizeof(struct tpm_db_param_t));
-
-static struct tpm_db_param_t g_tpm_init_post_start_param[] = {
-	/* Parameter type                  Container     */
-	{TPM_DB_PARAM_SWITCH_INIT,	   &g_tpm_db.init_db.switch_init},
-	{TPM_DB_PARAM_MC_DATA_HANDLE,	   &g_init_cfg.mc_data_handle},
-	{TPM_DB_PARAM_MC_SW_HANDLE,	   &g_init_cfg.mc_sw_handle},
-	{TPM_DB_PARAM_MAX_UNI_NUM,	   &g_tpm_db.init_db.max_num_uni_ports},
-	{TPM_DB_PARAM_IPV6_SUPPORT,	   &g_tpm_db.init_db.ipv6_support},
-	{TPM_DB_PARAM_CPU_RX_QUEUE,	   &g_tpm_db.init_db.cpu_trap_rx_queue},
-	{TPM_DB_PARAM_TTL_ILLEGAL_ACTION,  &g_tpm_db.init_db.ttl_illegal_action},
-	{TPM_DB_PARAM_BAD_CHKSUM_ACTION,   &g_tpm_db.init_db.bad_chksum_action},
-	{TPM_DB_PARAM_TCP_FLAG_CHECK,	   &g_tpm_db.init_db.tcp_flag_check},
-	{TPM_DB_PARAM_TRACE_DEBUG_FLAG,	   &g_tpm_db.init_db.trace_debug_flag},
-	{TPM_DB_PARAM_QOS_TABLE_EXT,	   &g_tpm_db.init_db.qos_tbl_ext},
-	{TPM_DB_PARAM_CNM_SUPPORT,	   &g_tpm_db.init_db.cnm_support},
-};
-static unsigned int g_tpm_init_post_start_param_num = sizeof(g_tpm_init_post_start_param)/sizeof(struct tpm_db_param_t);
+static struct tpm_init_t *g_init_cfg;
+
+static struct tpm_db_param_t *g_tpm_init_pre_start_param;
+static unsigned int g_tpm_init_pre_start_param_num;
+
+static struct tpm_db_param_t *g_tpm_init_post_start_param;
+static unsigned int g_tpm_init_post_start_param_num;
+
+/*******************************************************************************
+* tpm_db_mem_alloc_init
+*
+* DESCRIPTION: The routine will allcate mem for tpm db and init it.
+*
+* INPUTS:
+*	None.
+*
+* OUTPUTS:
+*	None
+*
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_error_code_t.
+*
+* COMMENTS:
+*	None
+*******************************************************************************/
+static int tpm_db_mem_alloc_init(void)
+{
+	/* Allocation for g_tpm_db */
+	g_tpm_db = vmalloc(sizeof(struct tpm_db_t));
+	if (NULL == g_tpm_db)
+		goto fail1;
+
+	/* Allocation for g_init_cfg */
+	g_init_cfg = vmalloc(sizeof(struct tpm_init_t));
+	if (NULL == g_init_cfg)
+		goto fail2;
+
+	/* Erase DB */
+	TPM_MEMSET_ZERO(*g_tpm_db);
+	TPM_MEMSET_ZERO(*g_init_cfg);
+
+	/* Allocation for g_tpm_init_pre_start_param and init */
+	g_tpm_init_pre_start_param = vmalloc((sizeof(struct tpm_db_param_t) * TPM_DB_PARAM_MAX));
+	if (NULL == g_tpm_init_pre_start_param)
+		goto fail3;
+
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_SWITCH_INIT].type = TPM_DB_PARAM_SWITCH_INIT;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_SWITCH_INIT].value = &g_init_cfg->switch_init;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_MC_DATA_HANDLE].type = TPM_DB_PARAM_MC_DATA_HANDLE;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_MC_DATA_HANDLE].value = &g_init_cfg->mc_data_handle;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_MC_SW_HANDLE].type = TPM_DB_PARAM_MC_SW_HANDLE;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_MC_SW_HANDLE].value = &g_init_cfg->mc_sw_handle;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_MAX_UNI_NUM].type = TPM_DB_PARAM_MAX_UNI_NUM;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_MAX_UNI_NUM].value = &g_init_cfg->max_num_uni_ports;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_IPV6_SUPPORT].type = TPM_DB_PARAM_IPV6_SUPPORT;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_IPV6_SUPPORT].value = &g_init_cfg->ipv6_support;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_CPU_RX_QUEUE].type = TPM_DB_PARAM_CPU_RX_QUEUE;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_CPU_RX_QUEUE].value = &g_init_cfg->cpu_trap_rx_queue;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_TTL_ILLEGAL_ACTION].type = TPM_DB_PARAM_TTL_ILLEGAL_ACTION;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_TTL_ILLEGAL_ACTION].value = &g_init_cfg->ttl_illegal_action;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_BAD_CHKSUM_ACTION].type = TPM_DB_PARAM_BAD_CHKSUM_ACTION;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_BAD_CHKSUM_ACTION].value = &g_init_cfg->bad_chksum_action;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_TCP_FLAG_CHECK].type = TPM_DB_PARAM_TCP_FLAG_CHECK;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_TCP_FLAG_CHECK].value = &g_init_cfg->tcp_flag_check;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_TRACE_DEBUG_FLAG].type = TPM_DB_PARAM_TRACE_DEBUG_FLAG;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_TRACE_DEBUG_FLAG].value = &g_init_cfg->trace_debug_flag;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_QOS_TABLE_EXT].type = TPM_DB_PARAM_QOS_TABLE_EXT;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_QOS_TABLE_EXT].value = &g_init_cfg->qos_tbl_ext;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_CNM_SUPPORT].type = TPM_DB_PARAM_CNM_SUPPORT;
+	g_tpm_init_pre_start_param[TPM_DB_PARAM_CNM_SUPPORT].value = &g_init_cfg->cnm_support;
+
+	g_tpm_init_pre_start_param_num = TPM_DB_PARAM_MAX;
+
+	/* Allocation for g_tpm_init_post_start_param and init */
+	g_tpm_init_post_start_param = vmalloc((sizeof(struct tpm_db_param_t) * TPM_DB_PARAM_MAX));
+	if (NULL == g_tpm_init_post_start_param)
+		goto fail4;
+
+	g_tpm_init_post_start_param[TPM_DB_PARAM_SWITCH_INIT].type = TPM_DB_PARAM_SWITCH_INIT;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_SWITCH_INIT].value = &g_tpm_db->init_db.switch_init;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_MC_DATA_HANDLE].type = TPM_DB_PARAM_MC_DATA_HANDLE;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_MC_DATA_HANDLE].value = &g_init_cfg->mc_data_handle;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_MC_SW_HANDLE].type = TPM_DB_PARAM_MC_SW_HANDLE;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_MC_SW_HANDLE].value = &g_init_cfg->mc_sw_handle;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_MAX_UNI_NUM].type = TPM_DB_PARAM_MAX_UNI_NUM;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_MAX_UNI_NUM].value = &g_tpm_db->init_db.max_num_uni_ports;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_IPV6_SUPPORT].type = TPM_DB_PARAM_IPV6_SUPPORT;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_IPV6_SUPPORT].value = &g_tpm_db->init_db.ipv6_support;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_CPU_RX_QUEUE].type = TPM_DB_PARAM_CPU_RX_QUEUE;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_CPU_RX_QUEUE].value = &g_tpm_db->init_db.cpu_trap_rx_queue;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_TTL_ILLEGAL_ACTION].type = TPM_DB_PARAM_TTL_ILLEGAL_ACTION;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_TTL_ILLEGAL_ACTION].value = &g_tpm_db->init_db.ttl_illegal_action;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_BAD_CHKSUM_ACTION].type = TPM_DB_PARAM_BAD_CHKSUM_ACTION;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_BAD_CHKSUM_ACTION].value = &g_tpm_db->init_db.bad_chksum_action;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_TCP_FLAG_CHECK].type = TPM_DB_PARAM_TCP_FLAG_CHECK;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_TCP_FLAG_CHECK].value = &g_tpm_db->init_db.tcp_flag_check;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_TRACE_DEBUG_FLAG].type = TPM_DB_PARAM_TRACE_DEBUG_FLAG;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_TRACE_DEBUG_FLAG].value = &g_tpm_db->init_db.trace_debug_flag;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_QOS_TABLE_EXT].type = TPM_DB_PARAM_QOS_TABLE_EXT;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_QOS_TABLE_EXT].value = &g_tpm_db->init_db.qos_tbl_ext;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_CNM_SUPPORT].type = TPM_DB_PARAM_CNM_SUPPORT;
+	g_tpm_init_post_start_param[TPM_DB_PARAM_CNM_SUPPORT].value = &g_tpm_db->init_db.cnm_support;
+
+	g_tpm_init_post_start_param_num = TPM_DB_PARAM_MAX;
+
+	return TPM_OK;
+
+fail4:
+	vfree(g_tpm_init_pre_start_param);
+fail3:
+	vfree(g_init_cfg);
+fail2:
+	vfree(g_tpm_db);
+fail1:
+	TPM_OS_ERROR(TPM_DB_MOD, "TPM DB memory allocation failed\n");
+	return TPM_OUT_OF_CPU_MEM;
+}
+
+/*******************************************************************************
+* tpm_db_mem_free
+*
+* DESCRIPTION: The routine will free memory for allocated for tpm db.
+*
+* INPUTS:
+*	None.
+*
+* OUTPUTS:
+*	None
+*
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_error_code_t.
+*
+* COMMENTS:
+*	None
+*******************************************************************************/
+static int tpm_db_mem_free(void)
+{
+	vfree(g_tpm_init_post_start_param);
+	vfree(g_tpm_init_pre_start_param);
+	vfree(g_init_cfg);
+	vfree(g_tpm_db);
+
+	return TPM_OK;
+}
 
 /*******************************************************************************
 * tpm_db_prs_pre_all_set
@@ -101,7 +213,7 @@ int tpm_db_prs_pre_all_set(struct tpm_db_prs_t *parser_pre_cfg)
 {
 	IF_NULL(TPM_DB_MOD, parser_pre_cfg);
 
-	memcpy(&g_tpm_db.prs_db, parser_pre_cfg, sizeof(struct tpm_db_prs_t));
+	memcpy(&g_tpm_db->prs_db, parser_pre_cfg, sizeof(struct tpm_db_prs_t));
 
 	return TPM_OK;
 }
@@ -132,8 +244,8 @@ int tpm_db_prs_lu_id_set(unsigned int traffic_type, struct tpm_prs_lu_id_t *lu_i
 
 	/* Search Traffic Type */
 	for (i = LSP_GMAC0_DEFAULT; i < TPM_TRAFFIC_TYPE_MAX; i++) {
-		if (g_tpm_db.prs_db.prs_lu_id[i].traffic_type == traffic_type) {
-			memcpy(&g_tpm_db.prs_db.prs_lu_id[i], lu_id_data, sizeof(struct tpm_prs_lu_id_t));
+		if (g_tpm_db->prs_db.prs_lu_id[i].traffic_type == traffic_type) {
+			memcpy(&g_tpm_db->prs_db.prs_lu_id[i], lu_id_data, sizeof(struct tpm_prs_lu_id_t));
 			break;
 		}
 	}
@@ -173,8 +285,8 @@ int tpm_db_prs_lu_id_get(unsigned int traffic_type, struct tpm_prs_lu_id_t *lu_i
 	memset(lu_id_data, 0, sizeof(struct tpm_prs_lu_id_t));
 	/* Search Traffic Type */
 	for (i = LSP_GMAC0_DEFAULT; i < TPM_TRAFFIC_TYPE_MAX; i++) {
-		if (g_tpm_db.prs_db.prs_lu_id[i].traffic_type == traffic_type) {
-			memcpy(lu_id_data, &g_tpm_db.prs_db.prs_lu_id[i], sizeof(struct tpm_prs_lu_id_t));
+		if (g_tpm_db->prs_db.prs_lu_id[i].traffic_type == traffic_type) {
+			memcpy(lu_id_data, &g_tpm_db->prs_db.prs_lu_id[i], sizeof(struct tpm_prs_lu_id_t));
 			break;
 		}
 	}
@@ -227,14 +339,14 @@ int tpm_db_spec_ipv6nh_set(unsigned char ipv6_nh, unsigned int tid, enum tpm_prs
 	}
 	/* Set IPV6 special NH */
 	if (TPM_PRS_SPEC_IPV6NH_ADD == op)
-		g_tpm_db.prs_db.ipv6_special_nh[nh_idx].nh = ipv6_nh;
+		g_tpm_db->prs_db.ipv6_special_nh[nh_idx].nh = ipv6_nh;
 	else if (TPM_PRS_SPEC_IPV6NH_DEL == op)
-		g_tpm_db.prs_db.ipv6_special_nh[nh_idx].nh = TPM_PRS_INV_SPEC_IPV6_NH;
+		g_tpm_db->prs_db.ipv6_special_nh[nh_idx].nh = TPM_PRS_INV_SPEC_IPV6_NH;
 	else {
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid IPv6 special NH operation(%d)\n", op);
 		return TPM_BAD_PARAM;
 	}
-	g_tpm_db.prs_db.ipv6_special_nh[nh_idx].prs_idx = tid;
+	g_tpm_db->prs_db.ipv6_special_nh[nh_idx].prs_idx = tid;
 
 	return TPM_OK;
 }
@@ -262,7 +374,9 @@ int tpm_db_spec_ipv6nh_get(struct tpm_prs_ipv6_spec_nh_t ipv6_nh[])
 {
 	IF_NULL(TPM_DB_MOD, ipv6_nh);
 
-	memcpy(ipv6_nh, g_tpm_db.prs_db.ipv6_special_nh, sizeof(struct tpm_prs_ipv6_spec_nh_t) * TPM_PRS_IPV6_NH_COUNT);
+	memcpy(ipv6_nh,
+	       g_tpm_db->prs_db.ipv6_special_nh,
+	       sizeof(struct tpm_prs_ipv6_spec_nh_t) * TPM_PRS_IPV6_NH_COUNT);
 
 	return TPM_OK;
 }
@@ -292,7 +406,7 @@ int tpm_db_module_state_set(enum tpm_module_state_t state)
 		return TPM_BAD_PARAM;
 	}
 
-	g_tpm_db.tpm_module_init_state = state;
+	g_tpm_db->tpm_module_init_state = state;
 
 	return TPM_OK;
 }
@@ -316,7 +430,7 @@ int tpm_db_module_state_set(enum tpm_module_state_t state)
 *******************************************************************************/
 unsigned int tpm_db_module_state_get(void)
 {
-	return g_tpm_db.tpm_module_init_state;
+	return g_tpm_db->tpm_module_init_state;
 }
 
 /*******************************************************************************
@@ -339,14 +453,14 @@ unsigned int tpm_db_module_state_get(void)
 struct tpm_init_t *tpm_db_init_db_get(enum tpm_init_param_mode_t init_mode)
 {
 	if (TPM_INIT_PARAM_PRE_START == init_mode) {
-		return &g_init_cfg;
+		return g_init_cfg;
 	} else if (TPM_INIT_PARAM_POST_START == init_mode) {
-		return &g_tpm_db.init_db;
+		return &g_tpm_db->init_db;
 	} else if (TPM_INIT_PARAM_AUTO == init_mode) {
 		if (TPM_MODULE_NOT_START == tpm_db_module_state_get())
-			return &g_init_cfg;
+			return g_init_cfg;
 		else if (TPM_MODULE_STARTED == tpm_db_module_state_get())
-			return &g_tpm_db.init_db;
+			return &g_tpm_db->init_db;
 	}
 
 	return NULL;
@@ -1217,7 +1331,7 @@ int tpm_db_generic_param_get(enum tpm_db_param_type_t type, unsigned int *value)
 *******************************************************************************/
 struct list_head *tpm_db_c2_lkp_type_list_head_get(unsigned char lkp_type)
 {
-	return &g_tpm_db.c2_db.c2_lu_type_head_db[lkp_type];
+	return &g_tpm_db->c2_db.c2_lu_type_head_db[lkp_type];
 }
 
 /*******************************************************************************
@@ -1236,7 +1350,7 @@ struct list_head *tpm_db_c2_lkp_type_list_head_get(unsigned char lkp_type)
 *******************************************************************************/
 struct list_head *tpm_db_c2_free_list_head_get(void)
 {
-	return &g_tpm_db.c2_db.c2_free_head_db;
+	return &g_tpm_db->c2_db.c2_free_head_db;
 }
 
 /*******************************************************************************
@@ -1260,7 +1374,7 @@ struct tpm_c2_index_t *tpm_db_c2_index_node_get(unsigned int c2_node_idx)
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid parameter\n");
 		return NULL;
 	}
-	return &g_tpm_db.c2_db.c2_index_db[c2_node_idx];
+	return &g_tpm_db->c2_db.c2_index_db[c2_node_idx];
 }
 
 /*******************************************************************************
@@ -1290,7 +1404,7 @@ int tpm_db_c2_index_node_set(unsigned int c2_node_idx,
 
 	IF_NULL(TPM_DB_MOD, c2_index_node);
 
-	memcpy(&g_tpm_db.c2_db.c2_index_db[c2_node_idx], c2_index_node, sizeof(struct tpm_c2_index_t));
+	memcpy(&g_tpm_db->c2_db.c2_index_db[c2_node_idx], c2_index_node, sizeof(struct tpm_c2_index_t));
 
 	return TPM_OK;
 }
@@ -1322,7 +1436,7 @@ int tpm_db_c2_data_get(unsigned int c2_db_idx,
 
 	IF_NULL(TPM_DB_MOD, c2_data);
 
-	memcpy(c2_data, &g_tpm_db.c2_db.c2_data_db[c2_db_idx], sizeof(struct tpm_c2_data_t));
+	memcpy(c2_data, &g_tpm_db->c2_db.c2_data_db[c2_db_idx], sizeof(struct tpm_c2_data_t));
 
 	return TPM_OK;
 }
@@ -1355,7 +1469,7 @@ int tpm_db_c2_data_set(unsigned int c2_db_idx,
 
 	IF_NULL(TPM_DB_MOD, c2_data);
 
-	memcpy(&g_tpm_db.c2_db.c2_data_db[c2_db_idx], c2_data, sizeof(struct tpm_c2_data_t));
+	memcpy(&g_tpm_db->c2_db.c2_data_db[c2_db_idx], c2_data, sizeof(struct tpm_c2_data_t));
 
 	return TPM_OK;
 }
@@ -1383,7 +1497,7 @@ int tpm_db_c3_free_logic_idx_get(unsigned int *logic_idx)
 
 	/* search for valid C3 logical index */
 	for (idx = 0; idx < MV_PP2_CLS_C3_HASH_TBL_SIZE; idx++) {
-		if (g_tpm_db.c3_db.hash_idx_tbl[idx].valid == TPM_C3_ENTRY_INVALID)
+		if (g_tpm_db->c3_db.hash_idx_tbl[idx].valid == TPM_C3_ENTRY_INVALID)
 			break;
 	}
 
@@ -1419,12 +1533,12 @@ int tpm_db_c3_entry_add(unsigned int	logic_idx,
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, hash_idx, MV_PP2_CLS_C3_HASH_TBL_SIZE-1, "invalid multihash index");
 
 	/* add or update hash index table */
-	g_tpm_db.c3_db.hash_idx_tbl[logic_idx].valid = TPM_C3_ENTRY_VALID;
-	g_tpm_db.c3_db.hash_idx_tbl[logic_idx].hash_idx = hash_idx;
+	g_tpm_db->c3_db.hash_idx_tbl[logic_idx].valid = TPM_C3_ENTRY_VALID;
+	g_tpm_db->c3_db.hash_idx_tbl[logic_idx].hash_idx = hash_idx;
 
 	/* add or update logical index table */
-	g_tpm_db.c3_db.logic_idx_tbl[hash_idx].valid = TPM_C3_ENTRY_VALID;
-	g_tpm_db.c3_db.logic_idx_tbl[hash_idx].logic_idx = logic_idx;
+	g_tpm_db->c3_db.logic_idx_tbl[hash_idx].valid = TPM_C3_ENTRY_VALID;
+	g_tpm_db->c3_db.logic_idx_tbl[hash_idx].logic_idx = logic_idx;
 
 	return TPM_OK;
 }
@@ -1452,7 +1566,7 @@ int tpm_db_c3_entry_del(int logic_idx)
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, logic_idx, MV_PP2_CLS_C3_HASH_TBL_SIZE-1, "invalid logical index");
 
 	/* get hash index entry */
-	p_hash_entry = &g_tpm_db.c3_db.hash_idx_tbl[logic_idx];
+	p_hash_entry = &g_tpm_db->c3_db.hash_idx_tbl[logic_idx];
 	if (p_hash_entry->valid == TPM_C3_ENTRY_VALID) {
 		/* clear hash entry */
 		hash_idx = p_hash_entry->hash_idx;
@@ -1461,7 +1575,7 @@ int tpm_db_c3_entry_del(int logic_idx)
 
 		/* get logical index entry by hash index and clear it */
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, hash_idx, MV_PP2_CLS_C3_HASH_TBL_SIZE-1, "invalid hash index");
-		p_logic_entry = &g_tpm_db.c3_db.logic_idx_tbl[hash_idx];
+		p_logic_entry = &g_tpm_db->c3_db.logic_idx_tbl[hash_idx];
 		p_logic_entry->valid = TPM_C3_ENTRY_INVALID;
 		p_logic_entry->logic_idx = TPM_C3_INVALID_ENTRY_NUM;
 	} else {
@@ -1495,7 +1609,7 @@ int tpm_db_c3_hash_idx_get(unsigned int	logic_idx,
 	IF_NULL(TPM_DB_MOD, hash_idx);
 
 	/* get hash index entry */
-	p_hash_entry = &g_tpm_db.c3_db.hash_idx_tbl[logic_idx];
+	p_hash_entry = &g_tpm_db->c3_db.hash_idx_tbl[logic_idx];
 	if (p_hash_entry->valid == TPM_C3_ENTRY_VALID) {
 
 		*hash_idx = p_hash_entry->hash_idx;
@@ -1531,7 +1645,7 @@ int tpm_db_c3_logic_idx_get(unsigned int	hash_idx,
 	IF_NULL(TPM_DB_MOD, logic_idx);
 
 	/* get hash index entry */
-	p_logic_entry = &g_tpm_db.c3_db.logic_idx_tbl[hash_idx];
+	p_logic_entry = &g_tpm_db->c3_db.logic_idx_tbl[hash_idx];
 	if (p_logic_entry->valid == TPM_C3_ENTRY_VALID) {
 
 		*logic_idx = p_logic_entry->logic_idx;
@@ -1575,7 +1689,7 @@ int tpm_db_c3_hash_idx_update(MV_PP2_CLS3_HASH_PAIR *hash_pair_arr)
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, old_idx, MV_PP2_CLS_C3_HASH_TBL_SIZE-1, "invalid hash index");
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, new_idx, MV_PP2_CLS_C3_HASH_TBL_SIZE-1, "invalid hash index");
 
-		p_logic_entry = &g_tpm_db.c3_db.logic_idx_tbl[old_idx];
+		p_logic_entry = &g_tpm_db->c3_db.logic_idx_tbl[old_idx];
 		if (p_logic_entry->valid == TPM_C3_ENTRY_INVALID) {
 			TPM_OS_ERROR(TPM_DB_MOD, "hash entry is invalid w/ index(%d)\n", old_idx);
 			return TPM_BAD_VALUE;
@@ -1588,12 +1702,12 @@ int tpm_db_c3_hash_idx_update(MV_PP2_CLS3_HASH_PAIR *hash_pair_arr)
 		/* update logical index table */
 		p_logic_entry->valid = TPM_C3_ENTRY_INVALID;
 		p_logic_entry->logic_idx = TPM_C3_INVALID_ENTRY_NUM;
-		p_logic_entry = &g_tpm_db.c3_db.logic_idx_tbl[new_idx];
+		p_logic_entry = &g_tpm_db->c3_db.logic_idx_tbl[new_idx];
 		p_logic_entry->valid = TPM_C3_ENTRY_VALID;
 		p_logic_entry->logic_idx = logic_idx;
 
 		/* update hash index table */
-		p_hash_entry = &g_tpm_db.c3_db.hash_idx_tbl[logic_idx];
+		p_hash_entry = &g_tpm_db->c3_db.hash_idx_tbl[logic_idx];
 		p_hash_entry->valid = TPM_C3_ENTRY_VALID;
 		p_hash_entry->hash_idx = new_idx;
 	}
@@ -1622,7 +1736,7 @@ int tpm_db_c3_scan_param_set(struct tpm_c3_scan_config_t *scan_config)
 
 	IF_NULL(TPM_DB_MOD, scan_config);
 
-	p_scan_config = &g_tpm_db.c3_db.scan_config;
+	p_scan_config = &g_tpm_db->c3_db.scan_config;
 	memcpy(p_scan_config, scan_config, sizeof(struct tpm_c3_scan_config_t));
 
 	return TPM_OK;
@@ -1649,7 +1763,7 @@ int tpm_db_c3_scan_param_get(struct tpm_c3_scan_config_t *scan_config)
 
 	IF_NULL(TPM_DB_MOD, scan_config);
 
-	p_scan_config = &g_tpm_db.c3_db.scan_config;
+	p_scan_config = &g_tpm_db->c3_db.scan_config;
 	memcpy(scan_config, p_scan_config, sizeof(struct tpm_c3_scan_config_t));
 
 	return TPM_OK;
@@ -1672,7 +1786,7 @@ int tpm_db_c3_scan_param_get(struct tpm_c3_scan_config_t *scan_config)
 *******************************************************************************/
 int tpm_db_c3_search_depth_set(unsigned int search_depth)
 {
-	g_tpm_db.c3_db.max_search_depth = search_depth;
+	g_tpm_db->c3_db.max_search_depth = search_depth;
 	return TPM_OK;
 }
 
@@ -1695,7 +1809,7 @@ int tpm_db_c3_search_depth_get(unsigned int *search_depth)
 {
 	IF_NULL(TPM_DB_MOD, search_depth);
 
-	*search_depth = g_tpm_db.c3_db.max_search_depth;
+	*search_depth = g_tpm_db->c3_db.max_search_depth;
 
 	return TPM_OK;
 }
@@ -1720,12 +1834,12 @@ int tpm_db_c3_init(void)
 	int idx;
 
 	/* Clear C3 db */
-	memset(&g_tpm_db.c3_db, 0, sizeof(struct tpm_db_c3_t));
+	memset(&g_tpm_db->c3_db, 0, sizeof(struct tpm_db_c3_t));
 
 	/* Init C3 multihash index table and logical index table */
 	for (idx = 0; idx < MV_PP2_CLS_C3_HASH_TBL_SIZE; idx++) {
-		g_tpm_db.c3_db.hash_idx_tbl[idx].valid = TPM_C3_ENTRY_INVALID;
-		g_tpm_db.c3_db.logic_idx_tbl[idx].valid = TPM_C3_ENTRY_INVALID;
+		g_tpm_db->c3_db.hash_idx_tbl[idx].valid = TPM_C3_ENTRY_INVALID;
+		g_tpm_db->c3_db.logic_idx_tbl[idx].valid = TPM_C3_ENTRY_INVALID;
 	}
 
 	return TPM_OK;
@@ -1756,9 +1870,9 @@ unsigned int tpm_db_c4_port_to_ruleset_set(
 	TPM_POS_RANGE_VALIDATE_STR(TPM_C4_MOD, rule_set,
 		MV_PP2_CLS_C4_GRPS_NUM, "invalid ruleSet");
 
-	memcpy(&g_tpm_db.c4_db.ruleset_config[rule_set].src_port, src_port,
+	memcpy(&g_tpm_db->c4_db.ruleset_config[rule_set].src_port, src_port,
 		sizeof(struct tpm_class_port_t));
-	g_tpm_db.c4_db.ruleset_config[rule_set].rule_number = rule_number;
+	g_tpm_db->c4_db.ruleset_config[rule_set].rule_number = rule_number;
 
 	return TPM_OK;
 }
@@ -1793,12 +1907,12 @@ unsigned int tpm_db_c4_port_to_ruleset_get(
 		TPM_NUM_MAX_UNI_PORTS, "invalid port number");
 
 	for (loop = 0; loop < MV_PP2_CLS_C4_GRPS_NUM; loop++) {
-		if (memcmp(&g_tpm_db.c4_db.ruleset_config[loop].src_port, src_port,
+		if (memcmp(&g_tpm_db->c4_db.ruleset_config[loop].src_port, src_port,
 			sizeof(struct tpm_class_port_t)))
 			continue;
 
 		*rule_set = loop;
-		*rule_number = g_tpm_db.c4_db.ruleset_config[loop].rule_number;
+		*rule_number = g_tpm_db->c4_db.ruleset_config[loop].rule_number;
 		return TPM_OK;
 	}
 
@@ -1829,10 +1943,10 @@ unsigned int tpm_db_c4_rule_add(
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, c4_entry->ruleSet,
 		MV_PP2_CLS_C4_GRPS_NUM, "invalid ruleSet");
 
-	memcpy(&g_tpm_db.c4_db.rule_entries[c4_entry->ruleSet][c4_entry->rule_num].rule_entry,
+	memcpy(&g_tpm_db->c4_db.rule_entries[c4_entry->ruleSet][c4_entry->rule_num].rule_entry,
 		c4_entry, sizeof(struct tpm_c4_add_entry_t));
 
-	g_tpm_db.c4_db.rule_entries[c4_entry->ruleSet][c4_entry->rule_num].valid = TPM_TRUE;
+	g_tpm_db->c4_db.rule_entries[c4_entry->ruleSet][c4_entry->rule_num].valid = TPM_TRUE;
 	return TPM_OK;
 }
 
@@ -1860,9 +1974,9 @@ unsigned int tpm_db_c4_rule_del(
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rule_set,
 		MV_PP2_CLS_C4_GRPS_NUM, "invalid ruleSet");
 
-	TPM_MEMSET_ZERO(g_tpm_db.c4_db.rule_entries[rule_set][rule_number].rule_entry);
+	TPM_MEMSET_ZERO(g_tpm_db->c4_db.rule_entries[rule_set][rule_number].rule_entry);
 
-	g_tpm_db.c4_db.rule_entries[rule_set][rule_number].valid = TPM_FALSE;
+	g_tpm_db->c4_db.rule_entries[rule_set][rule_number].valid = TPM_FALSE;
 	return TPM_OK;
 }
 
@@ -1892,7 +2006,7 @@ unsigned int tpm_db_c4_rule_get(
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rule_set,
 		MV_PP2_CLS_C4_GRPS_NUM, "invalid ruleSet");
 
-	memcpy(db_c4_rule, &g_tpm_db.c4_db.rule_entries[rule_set][rule_number],
+	memcpy(db_c4_rule, &g_tpm_db->c4_db.rule_entries[rule_set][rule_number],
 		sizeof(struct tpm_db_c4_rule_t));
 
 	return TPM_OK;
@@ -1916,7 +2030,7 @@ unsigned int tpm_db_c4_rule_get(
 int tpm_db_c4_init(void)
 {
 	/* Clear C4 db */
-	memset(&g_tpm_db.c4_db, 0, sizeof(struct tpm_db_c4_t));
+	memset(&g_tpm_db->c4_db, 0, sizeof(struct tpm_db_c4_t));
 
 	return TPM_OK;
 }
@@ -1947,7 +2061,7 @@ int tpm_db_mng_flow_cap_add(struct tpm_db_mng_flow_cap_conf_t *flow_cap_arr)
 
 	/* go through flow_cap_conf, find the first open slot */
 	for (loop = 0; loop < TPM_DB_MNG_FLOW_CAP_MAX; loop++) {
-		if (!g_tpm_db.mng_db.flow_cap_cfg[loop].valid)
+		if (!g_tpm_db->mng_db.flow_cap_cfg[loop].valid)
 			break;
 	}
 
@@ -1956,9 +2070,9 @@ int tpm_db_mng_flow_cap_add(struct tpm_db_mng_flow_cap_conf_t *flow_cap_arr)
 		return TPM_NO_RESOURCE;
 	}
 
-	memcpy(&(g_tpm_db.mng_db.flow_cap_cfg[loop]), flow_cap_arr,
+	memcpy(&(g_tpm_db->mng_db.flow_cap_cfg[loop]), flow_cap_arr,
 		sizeof(struct tpm_db_mng_flow_cap_conf_t));
-	g_tpm_db.mng_db.flow_cap_cfg[loop].valid = TPM_TRUE;
+	g_tpm_db->mng_db.flow_cap_cfg[loop].valid = TPM_TRUE;
 
 	return TPM_OK;
 }
@@ -1994,7 +2108,7 @@ int tpm_db_mng_flow_cap_update(
 
 	/* go through flow_cap_conf, find the cap */
 	for (loop = 0; loop < TPM_DB_MNG_FLOW_CAP_MAX; loop++) {
-		if (!memcmp(&g_tpm_db.mng_db.flow_cap_cfg[loop],
+		if (!memcmp(&g_tpm_db->mng_db.flow_cap_cfg[loop],
 			flow_cap, sizeof(struct tpm_db_mng_flow_cap_conf_t)))
 			break;
 	}
@@ -2004,7 +2118,7 @@ int tpm_db_mng_flow_cap_update(
 		return TPM_NO_SUCH;
 	}
 
-	memcpy(&(g_tpm_db.mng_db.flow_cap_cfg[loop]), flow_cap_updated,
+	memcpy(&(g_tpm_db->mng_db.flow_cap_cfg[loop]), flow_cap_updated,
 		sizeof(struct tpm_db_mng_flow_cap_conf_t));
 
 	return TPM_OK;
@@ -2046,25 +2160,25 @@ int tpm_db_mng_flow_in_cap_get(
 
 	/* go through flow_cap_conf, find all the flows that have this caps */
 	for (loop = 0; loop < TPM_DB_MNG_FLOW_CAP_MAX; loop++) {
-		if (!g_tpm_db.mng_db.flow_cap_cfg[loop].valid)
+		if (!g_tpm_db->mng_db.flow_cap_cfg[loop].valid)
 			break;
 
-		if ((g_tpm_db.mng_db.flow_cap_cfg[loop].cap_api_type != api_type)
-			|| (g_tpm_db.mng_db.flow_cap_cfg[loop].cap_field_bm != field_match_bm)
-			|| (g_tpm_db.mng_db.flow_cap_cfg[loop].vlan_num != vlan_num))
+		if ((g_tpm_db->mng_db.flow_cap_cfg[loop].cap_api_type != api_type)
+			|| (g_tpm_db->mng_db.flow_cap_cfg[loop].cap_field_bm != field_match_bm)
+			|| (g_tpm_db->mng_db.flow_cap_cfg[loop].vlan_num != vlan_num))
 			continue;
 
-		if ((g_tpm_db.mng_db.flow_cap_cfg[loop].cap_api_type == TPM_API_PUBLIC_CLS)
-			&& (g_tpm_db.mng_db.flow_cap_cfg[loop].rule_type != rule_type))
+		if ((g_tpm_db->mng_db.flow_cap_cfg[loop].cap_api_type == TPM_API_PUBLIC_CLS)
+			&& (g_tpm_db->mng_db.flow_cap_cfg[loop].rule_type != rule_type))
 			continue;
 
-		if ((g_tpm_db.mng_db.flow_cap_cfg[loop].cap_api_type == TPM_API_PRIVATE_MC_DS) &&
+		if ((g_tpm_db->mng_db.flow_cap_cfg[loop].cap_api_type == TPM_API_PRIVATE_MC_DS) &&
 			(rule_type == TPM_MC_DEF_DIP_TYPE) &&
-			(g_tpm_db.mng_db.flow_cap_cfg[loop].rule_type != rule_type))
+			(g_tpm_db->mng_db.flow_cap_cfg[loop].rule_type != rule_type))
 			continue;
 
 		memcpy(&(flow_cap_arr[cur_num++]),
-			&(g_tpm_db.mng_db.flow_cap_cfg[loop]),
+			&(g_tpm_db->mng_db.flow_cap_cfg[loop]),
 			sizeof(struct tpm_db_mng_flow_cap_conf_t));
 	}
 
@@ -2111,12 +2225,12 @@ int tpm_db_mng_cap_in_flow_get(enum tpm_mng_flow_log_id_t flow_id,
 	IF_NULL(TPM_DB_MOD, cap_num);
 
 	/* go through flow_cap_conf */
-	while (g_tpm_db.mng_db.flow_cap_cfg[loop].valid) {
-		if (g_tpm_db.mng_db.flow_cap_cfg[loop].flow_log_id != flow_id) {
+	while (g_tpm_db->mng_db.flow_cap_cfg[loop].valid) {
+		if (g_tpm_db->mng_db.flow_cap_cfg[loop].flow_log_id != flow_id) {
 			loop++;
 			continue;
 		}
-		memcpy(&cap_arr[cur_num], &(g_tpm_db.mng_db.flow_cap_cfg[loop]),
+		memcpy(&cap_arr[cur_num], &(g_tpm_db->mng_db.flow_cap_cfg[loop]),
 			sizeof(struct tpm_db_mng_flow_cap_conf_t));
 		loop++;
 		cur_num++;
@@ -2154,14 +2268,14 @@ int tpm_db_mng_next_cls_pri_get(enum tpm_mng_flow_log_id_t flow_id,
 
 	*next_pri = 0;
 	/* go through flow_cap_conf, get the next cls pri */
-	while (g_tpm_db.mng_db.flow_cap_cfg[loop].valid) {
-		if (g_tpm_db.mng_db.flow_cap_cfg[loop].flow_log_id != flow_id) {
+	while (g_tpm_db->mng_db.flow_cap_cfg[loop].valid) {
+		if (g_tpm_db->mng_db.flow_cap_cfg[loop].flow_log_id != flow_id) {
 			loop++;
 			continue;
 		}
 
-		if (*next_pri < g_tpm_db.mng_db.flow_cap_cfg[loop].cls_pri)
-			*next_pri = g_tpm_db.mng_db.flow_cap_cfg[loop].cls_pri;
+		if (*next_pri < g_tpm_db->mng_db.flow_cap_cfg[loop].cls_pri)
+			*next_pri = g_tpm_db->mng_db.flow_cap_cfg[loop].cls_pri;
 
 		loop++;
 	}
@@ -2220,10 +2334,10 @@ int tpm_db_mng_api_rule_id_get(void)
 *******************************************************************************/
 void tpm_db_mng_clear()
 {
-	TPM_MEMSET_ZERO(g_tpm_db.mng_db.api_data);
-	TPM_MEMSET_ZERO(g_tpm_db.mng_db.virt_pid_cfg);
-	TPM_MEMSET_ZERO(g_tpm_db.mng_db.flow_cap_cfg);
-	TPM_MEMSET_ZERO(g_tpm_db.mng_db.c2_lu_type_cntr);
+	TPM_MEMSET_ZERO(g_tpm_db->mng_db.api_data);
+	TPM_MEMSET_ZERO(g_tpm_db->mng_db.virt_pid_cfg);
+	TPM_MEMSET_ZERO(g_tpm_db->mng_db.flow_cap_cfg);
+	TPM_MEMSET_ZERO(g_tpm_db->mng_db.c2_lu_type_cntr);
 }
 
 /*******************************************************************************
@@ -2251,11 +2365,11 @@ int tpm_db_mng_api_entry_add(struct tpm_db_mng_api_data_t *api_data)
 	IF_NULL(TPM_DB_MOD, api_data);
 
 	for (loop = 0; loop < TPM_DB_MNG_API_RULE_MAX; loop++) {
-		if (g_tpm_db.mng_db.api_data[loop].valid)
+		if (g_tpm_db->mng_db.api_data[loop].valid)
 			continue;
-		memcpy(&g_tpm_db.mng_db.api_data[loop], api_data,
+		memcpy(&g_tpm_db->mng_db.api_data[loop], api_data,
 			sizeof(struct tpm_db_mng_api_data_t));
-		g_tpm_db.mng_db.api_data[loop].valid = TPM_TRUE;
+		g_tpm_db->mng_db.api_data[loop].valid = TPM_TRUE;
 		return TPM_OK;
 	}
 
@@ -2290,11 +2404,11 @@ int tpm_db_mng_api_entry_get(
 	IF_NULL(TPM_DB_MOD, api_data);
 
 	for (loop = 0; loop < TPM_DB_MNG_API_RULE_MAX; loop++) {
-		if ((!g_tpm_db.mng_db.api_data[loop].valid)
-		     || (g_tpm_db.mng_db.api_data[loop].api_rule_id != rule_id)) {
+		if ((!g_tpm_db->mng_db.api_data[loop].valid)
+		     || (g_tpm_db->mng_db.api_data[loop].api_rule_id != rule_id)) {
 			continue;
 		}
-		memcpy(api_data, &g_tpm_db.mng_db.api_data[loop],
+		memcpy(api_data, &g_tpm_db->mng_db.api_data[loop],
 			sizeof(struct tpm_db_mng_api_data_t));
 		return TPM_OK;
 	}
@@ -2330,11 +2444,11 @@ int tpm_db_mng_api_entry_set(
 	IF_NULL(TPM_DB_MOD, api_data);
 
 	for (loop = 0; loop < TPM_DB_MNG_API_RULE_MAX; loop++) {
-		if ((!g_tpm_db.mng_db.api_data[loop].valid)
-		     || (g_tpm_db.mng_db.api_data[loop].api_rule_id != rule_id)) {
+		if ((!g_tpm_db->mng_db.api_data[loop].valid)
+		     || (g_tpm_db->mng_db.api_data[loop].api_rule_id != rule_id)) {
 			continue;
 		}
-		memcpy(&g_tpm_db.mng_db.api_data[loop], api_data,
+		memcpy(&g_tpm_db->mng_db.api_data[loop], api_data,
 			sizeof(struct tpm_db_mng_api_data_t));
 		return TPM_OK;
 	}
@@ -2365,11 +2479,11 @@ int tpm_db_mng_api_entry_del(int rule_id)
 	int loop = 0;
 
 	for (loop = 0; loop < TPM_DB_MNG_API_RULE_MAX; loop++) {
-		if ((!g_tpm_db.mng_db.api_data[loop].valid)
-		     || (g_tpm_db.mng_db.api_data[loop].api_rule_id != rule_id)) {
+		if ((!g_tpm_db->mng_db.api_data[loop].valid)
+		     || (g_tpm_db->mng_db.api_data[loop].api_rule_id != rule_id)) {
 			continue;
 		}
-		TPM_MEMSET_ZERO(g_tpm_db.mng_db.api_data[loop]);
+		TPM_MEMSET_ZERO(g_tpm_db->mng_db.api_data[loop]);
 		return TPM_OK;
 	}
 
@@ -2404,11 +2518,11 @@ int tpm_db_mng_api_entry_type_first_get(
 	IF_NULL(TPM_DB_MOD, api_data);
 
 	for (loop = 0; loop < TPM_DB_MNG_API_RULE_MAX; loop++) {
-		if ((!g_tpm_db.mng_db.api_data[loop].valid)
-		     || (g_tpm_db.mng_db.api_data[loop].cap_api_type != cap_api_type)) {
+		if ((!g_tpm_db->mng_db.api_data[loop].valid)
+		     || (g_tpm_db->mng_db.api_data[loop].cap_api_type != cap_api_type)) {
 			continue;
 		}
-		memcpy(api_data, &g_tpm_db.mng_db.api_data[loop],
+		memcpy(api_data, &g_tpm_db->mng_db.api_data[loop],
 			sizeof(struct tpm_db_mng_api_data_t));
 		return TPM_OK;
 	}
@@ -2442,17 +2556,17 @@ int tpm_db_mng_api_entry_type_next_get(
 	IF_NULL(TPM_DB_MOD, api_data);
 
 	for (loop = 0; loop < TPM_DB_MNG_API_RULE_MAX; loop++) {
-		if ((!g_tpm_db.mng_db.api_data[loop].valid)
-		     || (g_tpm_db.mng_db.api_data[loop].cap_api_type != api_data->cap_api_type)) {
+		if ((!g_tpm_db->mng_db.api_data[loop].valid)
+		     || (g_tpm_db->mng_db.api_data[loop].cap_api_type != api_data->cap_api_type)) {
 			continue;
 		}
 
 		if (TPM_TRUE == this) {
 			/* this is next */
-			memcpy(api_data, &g_tpm_db.mng_db.api_data[loop],
+			memcpy(api_data, &g_tpm_db->mng_db.api_data[loop],
 				sizeof(struct tpm_db_mng_api_data_t));
 			return TPM_OK;
-		} else if (g_tpm_db.mng_db.api_data[loop].api_rule_id == api_data->api_rule_id)
+		} else if (g_tpm_db->mng_db.api_data[loop].api_rule_id == api_data->api_rule_id)
 			this = TPM_TRUE;
 	}
 
@@ -2491,19 +2605,19 @@ int tpm_db_mng_cap_hit_num_get(
 
 	/* get from tpm_db */
 	for (i = 0; i < TPM_DB_MNG_CAP_MAX; i++) {
-		if (!g_tpm_db.mng_db.cap_cfg[i].valid)
+		if (!g_tpm_db->mng_db.cap_cfg[i].valid)
 			break;
-		if (g_tpm_db.mng_db.cap_cfg[i].cap_api_type != api_type)
+		if (g_tpm_db->mng_db.cap_cfg[i].cap_api_type != api_type)
 			continue;
-		if (g_tpm_db.mng_db.cap_cfg[i].cap_field_bm != cap_field_bm)
+		if (g_tpm_db->mng_db.cap_cfg[i].cap_field_bm != cap_field_bm)
 			continue;
-		if (g_tpm_db.mng_db.cap_cfg[i].rule_type != rule_type)
+		if (g_tpm_db->mng_db.cap_cfg[i].rule_type != rule_type)
 			continue;
-		if (g_tpm_db.mng_db.cap_cfg[i].vlan_num != vlan_num)
+		if (g_tpm_db->mng_db.cap_cfg[i].vlan_num != vlan_num)
 			continue;
 
 		/* here we find the cap */
-		*hit_number = g_tpm_db.mng_db.cap_cfg[i].hit_number;
+		*hit_number = g_tpm_db->mng_db.cap_cfg[i].hit_number;
 		return TPM_OK;
 	}
 
@@ -2577,12 +2691,12 @@ int tpm_db_mng_pub_cap_get(struct tpm_db_mng_cap_conf_t cap_arr[],
 
 	/* get from tpm_db */
 	for (i = 0; i < TPM_DB_MNG_CAP_MAX; i++) {
-		if (!g_tpm_db.mng_db.cap_cfg[i].valid)
+		if (!g_tpm_db->mng_db.cap_cfg[i].valid)
 			break;
 	}
 
 	*arr_len = i;
-	memcpy(cap_arr, g_tpm_db.mng_db.cap_cfg, (i * sizeof(struct tpm_db_mng_cap_conf_t)));
+	memcpy(cap_arr, g_tpm_db->mng_db.cap_cfg, (i * sizeof(struct tpm_db_mng_cap_conf_t)));
 
 	sort(&cap_arr[0], *arr_len,
 		sizeof(struct tpm_db_mng_cap_conf_t), tpm_db_mng_cmp_prec, NULL);
@@ -2616,7 +2730,7 @@ int tpm_db_mng_pub_cap_set(enum tpm_mng_api_type_t cap_api_type, struct tpm_init
 
 	/* get free slot from tpm_db */
 	for (i = 0; i < TPM_DB_MNG_CAP_MAX; i++) {
-		if (!g_tpm_db.mng_db.cap_cfg[i].valid)
+		if (!g_tpm_db->mng_db.cap_cfg[i].valid)
 			break;
 	}
 
@@ -2625,13 +2739,13 @@ int tpm_db_mng_pub_cap_set(enum tpm_mng_api_type_t cap_api_type, struct tpm_init
 		return TPM_NO_RESOURCE;
 	}
 
-	g_tpm_db.mng_db.cap_cfg[i].valid = TPM_TRUE;
-	g_tpm_db.mng_db.cap_cfg[i].cap_field_bm = cap->field_match_bm;
-	g_tpm_db.mng_db.cap_cfg[i].prec = cap->precedence;
-	g_tpm_db.mng_db.cap_cfg[i].hit_number = cap->max_port_hits;
-	g_tpm_db.mng_db.cap_cfg[i].vlan_num = cap->tag_num;
-	g_tpm_db.mng_db.cap_cfg[i].rule_type = cap->rule_type;
-	g_tpm_db.mng_db.cap_cfg[i].cap_api_type = cap_api_type;
+	g_tpm_db->mng_db.cap_cfg[i].valid = TPM_TRUE;
+	g_tpm_db->mng_db.cap_cfg[i].cap_field_bm = cap->field_match_bm;
+	g_tpm_db->mng_db.cap_cfg[i].prec = cap->precedence;
+	g_tpm_db->mng_db.cap_cfg[i].hit_number = cap->max_port_hits;
+	g_tpm_db->mng_db.cap_cfg[i].vlan_num = cap->tag_num;
+	g_tpm_db->mng_db.cap_cfg[i].rule_type = cap->rule_type;
+	g_tpm_db->mng_db.cap_cfg[i].cap_api_type = cap_api_type;
 
 	return TPM_OK;
 }
@@ -2663,9 +2777,9 @@ int tpm_db_mng_virt_pid_get(
 	IF_NULL(TPM_DB_MOD, virt_port_id);
 
 	for (i = 0; i < TPM_DB_MNG_VIRT_PID_MAX; i++) {
-		if (!g_tpm_db.mng_db.virt_pid_cfg[i].valid)
+		if (!g_tpm_db->mng_db.virt_pid_cfg[i].valid)
 			continue;
-		if (g_tpm_db.mng_db.virt_pid_cfg[i].gemport != gemport)
+		if (g_tpm_db->mng_db.virt_pid_cfg[i].gemport != gemport)
 			continue;
 
 		/* here we found it */
@@ -2706,15 +2820,15 @@ int tpm_db_mng_flt_def_rule_set(
 	int loop;
 
 	for (loop = 0; loop < TPM_NUM_MAX_FILTER_TYPE; loop++) {
-		if (g_tpm_db.mng_db.filter_def_rule[loop].valid)
+		if (g_tpm_db->mng_db.filter_def_rule[loop].valid)
 			continue;
 
 		/* here we found a slot */
-		g_tpm_db.mng_db.filter_def_rule[loop].valid = TPM_TRUE;
-		g_tpm_db.mng_db.filter_def_rule[loop].filter_type.rule_type = rule_type;
-		g_tpm_db.mng_db.filter_def_rule[loop].filter_type.cap_field_bm = field_bm;
-		g_tpm_db.mng_db.filter_def_rule[loop].filter_type.vlan_num = vlan_num;
-		g_tpm_db.mng_db.filter_def_rule[loop].def_rule_id = rule_id;
+		g_tpm_db->mng_db.filter_def_rule[loop].valid = TPM_TRUE;
+		g_tpm_db->mng_db.filter_def_rule[loop].filter_type.rule_type = rule_type;
+		g_tpm_db->mng_db.filter_def_rule[loop].filter_type.cap_field_bm = field_bm;
+		g_tpm_db->mng_db.filter_def_rule[loop].filter_type.vlan_num = vlan_num;
+		g_tpm_db->mng_db.filter_def_rule[loop].def_rule_id = rule_id;
 
 		return TPM_OK;
 	}
@@ -2752,22 +2866,22 @@ int tpm_db_mng_flt_def_rule_get(
 
 	for (loop = 0; loop < TPM_NUM_MAX_FILTER_TYPE; loop++) {
 
-		if (g_tpm_db.mng_db.filter_def_rule[loop].valid != TPM_TRUE)
+		if (g_tpm_db->mng_db.filter_def_rule[loop].valid != TPM_TRUE)
 			continue;
 
-		if (g_tpm_db.mng_db.filter_def_rule[loop].filter_type.rule_type != rule_type)
+		if (g_tpm_db->mng_db.filter_def_rule[loop].filter_type.rule_type != rule_type)
 			continue;
 
-		if (g_tpm_db.mng_db.filter_def_rule[loop].filter_type.cap_field_bm != field_bm)
+		if (g_tpm_db->mng_db.filter_def_rule[loop].filter_type.cap_field_bm != field_bm)
 			continue;
 
-		if (g_tpm_db.mng_db.filter_def_rule[loop].filter_type.vlan_num != vlan_num)
+		if (g_tpm_db->mng_db.filter_def_rule[loop].filter_type.vlan_num != vlan_num)
 			continue;
 
 		/* here we found it */
-		*rule_id = g_tpm_db.mng_db.filter_def_rule[loop].def_rule_id;
+		*rule_id = g_tpm_db->mng_db.filter_def_rule[loop].def_rule_id;
 
-		TPM_MEMSET_ZERO(g_tpm_db.mng_db.filter_def_rule[loop]);
+		TPM_MEMSET_ZERO(g_tpm_db->mng_db.filter_def_rule[loop]);
 		return TPM_OK;
 	}
 
@@ -2803,12 +2917,12 @@ int tpm_db_mng_virt_pid_add(
 	IF_NULL(TPM_DB_MOD, virt_port_id);
 
 	for (i = 0; i < TPM_DB_MNG_VIRT_PID_MAX; i++) {
-		if (g_tpm_db.mng_db.virt_pid_cfg[i].valid)
+		if (g_tpm_db->mng_db.virt_pid_cfg[i].valid)
 			continue;
 
 		/* here we found a free slot */
-		g_tpm_db.mng_db.virt_pid_cfg[i].valid = TPM_TRUE;
-		g_tpm_db.mng_db.virt_pid_cfg[i].gemport = gemport;
+		g_tpm_db->mng_db.virt_pid_cfg[i].valid = TPM_TRUE;
+		g_tpm_db->mng_db.virt_pid_cfg[i].gemport = gemport;
 		*virt_port_id = i;
 		return TPM_OK;
 	}
@@ -2818,21 +2932,21 @@ int tpm_db_mng_virt_pid_add(
 		/* go through api db */
 		for (api_loop = 0; api_loop < TPM_DB_MNG_API_RULE_MAX; api_loop++) {
 			/* go through api db */
-			if (!g_tpm_db.mng_db.api_data[api_loop].valid)
+			if (!g_tpm_db->mng_db.api_data[api_loop].valid)
 				continue;
 
-			if (g_tpm_db.mng_db.api_data[api_loop].match_key.port.port_type != TPM_CLASS_VIRT_PORT)
+			if (g_tpm_db->mng_db.api_data[api_loop].match_key.port.port_type != TPM_CLASS_VIRT_PORT)
 				continue;
 
-			if (g_tpm_db.mng_db.api_data[api_loop].match_key.port.class_port
-			      != g_tpm_db.mng_db.virt_pid_cfg[i].gemport)
+			if (g_tpm_db->mng_db.api_data[api_loop].match_key.port.class_port
+			      != g_tpm_db->mng_db.virt_pid_cfg[i].gemport)
 				continue;
 
 			break;
 		}
 		if (api_loop == TPM_DB_MNG_API_RULE_MAX) {
 			*virt_port_id = i;
-			g_tpm_db.mng_db.virt_pid_cfg[i].gemport = gemport;
+			g_tpm_db->mng_db.virt_pid_cfg[i].gemport = gemport;
 			return TPM_OK;
 		}
 	}
@@ -2868,18 +2982,18 @@ int tpm_db_mng_mc_atu_add(unsigned int switch_port, unsigned char *mac)
 
 	for (loop = 0; loop < TPM_DB_MNG_MC_API_RULE_MAX; loop++) {
 		/* If MAC exist, increase ref_cnt */
-		if ((!memcmp(mac, g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, MAC_ADDR_SIZE)) &&
-		    g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt > 0) {
-			g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt++;
+		if ((!memcmp(mac, g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, MAC_ADDR_SIZE)) &&
+		    g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt > 0) {
+			g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt++;
 			return TPM_OK;
 		}
 	}
 
 	/* Find a free slot */
 	for (loop = 0; loop < TPM_DB_MNG_MC_API_RULE_MAX; loop++) {
-		if (g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt == 0) {
-			memcpy(g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, mac, MAC_ADDR_SIZE);
-			g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt++;
+		if (g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt == 0) {
+			memcpy(g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, mac, MAC_ADDR_SIZE);
+			g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt++;
 			return TPM_OK;
 		}
 	}
@@ -2917,10 +3031,10 @@ int tpm_db_mng_mc_atu_del(unsigned int switch_port, unsigned char *mac, unsigned
 
 	for (loop = 0; loop < TPM_DB_MNG_MC_API_RULE_MAX; loop++) {
 		/* If MAC exist, increase ref_cnt */
-		if ((!memcmp(mac, g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, MAC_ADDR_SIZE)) &&
-		    g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt > 0) {
-			g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt--;
-			*ref_cnt = g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt;
+		if ((!memcmp(mac, g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, MAC_ADDR_SIZE)) &&
+		    g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt > 0) {
+			g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt--;
+			*ref_cnt = g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt;
 			return TPM_OK;
 		}
 	}
@@ -2959,10 +3073,10 @@ int tpm_db_mng_mc_atu_get(unsigned int switch_port, unsigned char *mac, struct t
 
 	for (loop = 0; loop < TPM_DB_MNG_MC_API_RULE_MAX; loop++) {
 		/* If MAC exist, increase ref_cnt */
-		if ((!memcmp(mac, g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, MAC_ADDR_SIZE)) &&
-		    g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt > 0) {
+		if ((!memcmp(mac, g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].gdmac, MAC_ADDR_SIZE)) &&
+		    g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop].mac_ref_cnt > 0) {
 			memcpy(atu,
-			       &g_tpm_db.mng_db.mc_switch[switch_port].switch_atu[loop],
+			       &g_tpm_db->mng_db.mc_switch[switch_port].switch_atu[loop],
 			       sizeof(struct tpm_db_mng_mc_atu));
 			return TPM_OK;
 		}
@@ -3001,8 +3115,8 @@ int tpm_db_mng_mc_vtu_set(unsigned int switch_port, unsigned int vid, enum tpm_s
 	    egress_mode > TPM_SW_VLAN_EGRESS_KEEP_VLAN)
 		return TPM_BAD_PARAM;
 
-	g_tpm_db.mng_db.mc_switch[switch_port].switch_vtu.vid[vid] = vid;
-	g_tpm_db.mng_db.mc_switch[switch_port].switch_vtu.egress_mode[vid] = egress_mode;
+	g_tpm_db->mng_db.mc_switch[switch_port].switch_vtu.vid[vid] = vid;
+	g_tpm_db->mng_db.mc_switch[switch_port].switch_vtu.egress_mode[vid] = egress_mode;
 
 	return TPM_OK;
 }
@@ -3035,7 +3149,7 @@ int tpm_db_mng_mc_vtu_del(unsigned int switch_port, unsigned int vid)
 	    vid > TPM_MAX_VLAN_ID_VALUE)
 		return TPM_BAD_PARAM;
 
-	g_tpm_db.mng_db.mc_switch[switch_port].switch_vtu.vid[vid] = TPM_INVALID_VLAN_ID;
+	g_tpm_db->mng_db.mc_switch[switch_port].switch_vtu.vid[vid] = TPM_INVALID_VLAN_ID;
 
 	return TPM_OK;
 }
@@ -3064,7 +3178,7 @@ int tpm_db_mng_mc_init(void)
 	/* Initlize VTU vid to invalid value, 0xFFFF */
 	for (switch_port = 0; switch_port < TPM_NUM_MAX_UNI_PORTS; switch_port++) {
 		for (i = 0; i < (TPM_MAX_VLAN_ID_VALUE + 1); i++)
-			g_tpm_db.mng_db.mc_switch[switch_port].switch_vtu.vid[i] = TPM_INVALID_VLAN_ID;
+			g_tpm_db->mng_db.mc_switch[switch_port].switch_vtu.vid[i] = TPM_INVALID_VLAN_ID;
 	}
 
 	return TPM_OK;
@@ -3100,11 +3214,11 @@ int tpm_db_mng_cm_rule_add(
 	ret = tpm_db_mng_cm_ruleset_get(&cnm_key->match_key.port, &ruleSet);
 	IF_ERROR_STR(TPM_MNG_MOD, ret, "fail to get ruleSet from DB\n");
 
-	memcpy(&g_tpm_db.mng_db.cnm_data.cnm_rule[ruleSet][cnm_key->rule_num].action,
+	memcpy(&g_tpm_db->mng_db.cnm_data.cnm_rule[ruleSet][cnm_key->rule_num].action,
 		action, sizeof(struct tpm_pkt_action_t));
-	memcpy(&g_tpm_db.mng_db.cnm_data.cnm_rule[ruleSet][cnm_key->rule_num].cnm_key,
+	memcpy(&g_tpm_db->mng_db.cnm_data.cnm_rule[ruleSet][cnm_key->rule_num].cnm_key,
 		cnm_key, sizeof(struct tpm_cnm_key_t));
-	g_tpm_db.mng_db.cnm_data.cnm_rule[ruleSet][cnm_key->rule_num].valid = TPM_TRUE;
+	g_tpm_db->mng_db.cnm_data.cnm_rule[ruleSet][cnm_key->rule_num].valid = TPM_TRUE;
 
 	return TPM_OK;
 }
@@ -3144,7 +3258,7 @@ int tpm_db_mng_cm_rule_get(
 	IF_ERROR_STR(TPM_MNG_MOD, ret, "fail to get ruleSet from DB\n");
 
 	memcpy(cnm_rule,
-		&g_tpm_db.mng_db.cnm_data.cnm_rule[ruleSet][rule_num],
+		&g_tpm_db->mng_db.cnm_data.cnm_rule[ruleSet][rule_num],
 		sizeof(struct tpm_db_mng_ctc_cnm_rule_t));
 
 	return TPM_OK;
@@ -3183,9 +3297,9 @@ int tpm_db_mng_cm_rule_del(
 	ret = tpm_db_mng_cm_ruleset_get(port, &ruleSet);
 	IF_ERROR_STR(TPM_MNG_MOD, ret, "fail to get ruleSet from DB\n");
 
-	TPM_MEMSET_ZERO(g_tpm_db.mng_db.cnm_data.cnm_rule[ruleSet][rule_num]);
+	TPM_MEMSET_ZERO(g_tpm_db->mng_db.cnm_data.cnm_rule[ruleSet][rule_num]);
 
-	g_tpm_db.mng_db.cnm_data.cnm_rule[ruleSet][rule_num].valid = TPM_FALSE;
+	g_tpm_db->mng_db.cnm_data.cnm_rule[ruleSet][rule_num].valid = TPM_FALSE;
 
 	return TPM_OK;
 }
@@ -3218,7 +3332,7 @@ int tpm_db_mng_cm_ruleset_set(
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, port->class_port,
 		TPM_NUM_MAX_UNI_PORTS_BM, "invalid port number");
 
-	memcpy(&g_tpm_db.mng_db.cnm_data.src_port[ruleSet],
+	memcpy(&g_tpm_db->mng_db.cnm_data.src_port[ruleSet],
 		port, sizeof(struct tpm_class_port_t));
 
 	return TPM_OK;
@@ -3251,7 +3365,7 @@ int tpm_db_mng_cm_ruleset_get(
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, port->class_port,
 		TPM_NUM_MAX_UNI_PORTS_BM, "invalid port number");
 	for (loop = 0; loop < MV_PP2_CLS_C4_GRPS_NUM; loop++) {
-		if (port->class_port != g_tpm_db.mng_db.cnm_data.src_port[loop].class_port)
+		if (port->class_port != g_tpm_db->mng_db.cnm_data.src_port[loop].class_port)
 			continue;
 		*ruleSet = loop;
 		return TPM_OK;
@@ -3286,9 +3400,9 @@ int tpm_db_mng_c2_lu_type_cntr_op(unsigned int lu_type,
 		TPM_C2_LKP_TYPE_MAX, "invalid lu_type number\n");
 
 	if (TPM_TRUE == increase)
-		g_tpm_db.mng_db.c2_lu_type_cntr[lu_type]++;
+		g_tpm_db->mng_db.c2_lu_type_cntr[lu_type]++;
 	else
-		g_tpm_db.mng_db.c2_lu_type_cntr[lu_type]--;
+		g_tpm_db->mng_db.c2_lu_type_cntr[lu_type]--;
 
 	return TPM_OK;
 }
@@ -3315,10 +3429,10 @@ int tpm_db_mng_free_c2_lu_type_get(unsigned char *lu_type)
 	int loop;
 
 	for (loop = 0; loop < TPM_C2_LKP_TYPE_MAX; loop++) {
-		if (g_tpm_db.mng_db.c2_lu_type_cntr[loop])
+		if (g_tpm_db->mng_db.c2_lu_type_cntr[loop])
 			continue;
 
-		g_tpm_db.mng_db.c2_lu_type_cntr[loop]++;
+		g_tpm_db->mng_db.c2_lu_type_cntr[loop]++;
 		*lu_type = loop;
 		return TPM_OK;
 	}
@@ -3348,7 +3462,7 @@ int tpm_db_mng_api_data_allocate(
 	struct tpm_db_mng_api_data_t **api_data)
 {
 	/* Allocate tpm_db_mng_api_data_t from mempool */
-	*api_data = (struct tpm_db_mng_api_data_t *)tpm_common_mempool_alloc(g_tpm_db.mng_db.api_data_pool);
+	*api_data = (struct tpm_db_mng_api_data_t *)tpm_common_mempool_alloc(g_tpm_db->mng_db.api_data_pool);
 	if (NULL == *api_data) {
 		/* no free slot anymore */
 		TPM_OS_ERROR(TPM_DB_MOD, "no free api_data mem\n");
@@ -3375,7 +3489,7 @@ int tpm_db_mng_api_data_allocate(
 void tpm_db_mng_api_data_release(
 	struct tpm_db_mng_api_data_t *api_data)
 {
-	tpm_common_mempool_free(g_tpm_db.mng_db.api_data_pool, api_data);
+	tpm_common_mempool_free(g_tpm_db->mng_db.api_data_pool, api_data);
 }
 
 /*******************************************************************************
@@ -3393,11 +3507,11 @@ void tpm_db_mng_api_data_release(
 *******************************************************************************/
 int tpm_db_mng_api_data_pool_init(void)
 {
-	g_tpm_db.mng_db.api_data_pool = tpm_common_mempool_create
+	g_tpm_db->mng_db.api_data_pool = tpm_common_mempool_create
 					(TPM_DB_MNG_API_DATA_POOL_SIZE,
 					sizeof(struct tpm_db_mng_api_data_t),
 					GFP_USER);
-	if (NULL == g_tpm_db.mng_db.api_data_pool) {
+	if (NULL == g_tpm_db->mng_db.api_data_pool) {
 		TPM_OS_ERROR(TPM_DB_MOD, "failed allocating g_tpm_db_mng_api_data_pool\n");
 		return TPM_FAIL;
 	}
@@ -3425,29 +3539,29 @@ int tpm_db_c2_init(void)
 	int i;
 
 	/* Clear C2 db */
-	memset(&g_tpm_db.c2_db, 0, sizeof(struct tpm_db_c2_t));
+	memset(&g_tpm_db->c2_db, 0, sizeof(struct tpm_db_c2_t));
 
 	/* Init c2_hw_idx to C2 corresponding c2 hw index in c2 data db and index db */
 	for (i = 0; i < TPM_C2_ENTRY_MAX; i++) {
-		g_tpm_db.c2_db.c2_data_db[i].valid = TPM_C2_ENTRY_INVALID;
-		g_tpm_db.c2_db.c2_index_db[i].valid = TPM_C2_ENTRY_INVALID;
-		g_tpm_db.c2_db.c2_index_db[i].c2_hw_idx = i;
+		g_tpm_db->c2_db.c2_data_db[i].valid = TPM_C2_ENTRY_INVALID;
+		g_tpm_db->c2_db.c2_index_db[i].valid = TPM_C2_ENTRY_INVALID;
+		g_tpm_db->c2_db.c2_index_db[i].c2_hw_idx = i;
 	}
 
 	/* Init C2 list head */
-	INIT_LIST_HEAD(&g_tpm_db.c2_db.c2_free_head_db);
+	INIT_LIST_HEAD(&g_tpm_db->c2_db.c2_free_head_db);
 	for (i = 0; i < TPM_C2_LKP_TYPE_MAX; i++)
-		INIT_LIST_HEAD(&g_tpm_db.c2_db.c2_lu_type_head_db[i]);
+		INIT_LIST_HEAD(&g_tpm_db->c2_db.c2_lu_type_head_db[i]);
 
 	/* Init free list, last entry is used for default entry, always not avaliable */
 	for (i = TPM_C2_LAST_ENTRY - 1; i >= 0; i--) {
-		list_add(&g_tpm_db.c2_db.c2_index_db[i].list_node, &g_tpm_db.c2_db.c2_free_head_db);
+		list_add(&g_tpm_db->c2_db.c2_index_db[i].list_node, &g_tpm_db->c2_db.c2_free_head_db);
 		/* Change index node valid status after adding to free list */
-		g_tpm_db.c2_db.c2_index_db[i].valid = TPM_C2_ENTRY_VALID;
+		g_tpm_db->c2_db.c2_index_db[i].valid = TPM_C2_ENTRY_VALID;
 	}
 	/* Reserve the last one for default miss entry */
-	g_tpm_db.c2_db.c2_index_db[TPM_C2_LAST_ENTRY].valid = TPM_C2_ENTRY_VALID;
-	g_tpm_db.c2_db.c2_data_db[TPM_C2_LAST_ENTRY].valid = TPM_C2_ENTRY_VALID;
+	g_tpm_db->c2_db.c2_index_db[TPM_C2_LAST_ENTRY].valid = TPM_C2_ENTRY_VALID;
+	g_tpm_db->c2_db.c2_data_db[TPM_C2_LAST_ENTRY].valid = TPM_C2_ENTRY_VALID;
 
 	return TPM_OK;
 }
@@ -3474,7 +3588,7 @@ int tpm_db_cls_fl_ctrl_set(struct tpm_db_cls_fl_ctrl_t         *fl_ctrl)
 {
 	 IF_NULL(TPM_DB_MOD, fl_ctrl);
 
-	 memcpy(&g_tpm_db.cls_db.fl_ctrl, fl_ctrl, sizeof(struct tpm_db_cls_fl_ctrl_t));
+	 memcpy(&g_tpm_db->cls_db.fl_ctrl, fl_ctrl, sizeof(struct tpm_db_cls_fl_ctrl_t));
 
 	 return TPM_OK;
 }
@@ -3501,7 +3615,7 @@ int tpm_db_cls_fl_ctrl_get(struct tpm_db_cls_fl_ctrl_t         *fl_ctrl)
 {
 	 IF_NULL(TPM_DB_MOD, fl_ctrl);
 
-	 memcpy(fl_ctrl, &g_tpm_db.cls_db.fl_ctrl, sizeof(struct tpm_db_cls_fl_ctrl_t));
+	 memcpy(fl_ctrl, &g_tpm_db->cls_db.fl_ctrl, sizeof(struct tpm_db_cls_fl_ctrl_t));
 
 	 return TPM_OK;
 }
@@ -3534,7 +3648,7 @@ int tpm_db_cls_fl_rule_set(unsigned int			off,
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid parameter\n");
 		return TPM_BAD_PARAM;
 	}
-	memcpy(&g_tpm_db.cls_db.fl_rule[off], fl_rule, sizeof(struct tpm_db_cls_fl_rule_t));
+	memcpy(&g_tpm_db->cls_db.fl_rule[off], fl_rule, sizeof(struct tpm_db_cls_fl_rule_t));
 
 	return TPM_OK;
 }
@@ -3566,7 +3680,7 @@ int tpm_db_cls_fl_rule_get(unsigned int			off,
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid parameter\n");
 		return TPM_BAD_PARAM;
 	}
-	memcpy(fl_rule, &g_tpm_db.cls_db.fl_rule[off], sizeof(struct tpm_db_cls_fl_rule_t));
+	memcpy(fl_rule, &g_tpm_db->cls_db.fl_rule[off], sizeof(struct tpm_db_cls_fl_rule_t));
 
 	return TPM_OK;
 }
@@ -3602,7 +3716,7 @@ int tpm_db_cls_fl_rule_list_get(unsigned int		off,
 		return TPM_BAD_PARAM;
 	}
 
-	memcpy(fl_rl_list, &g_tpm_db.cls_db.fl_rule[off],
+	memcpy(fl_rl_list, &g_tpm_db->cls_db.fl_rule[off],
 			sizeof(struct tpm_db_cls_fl_rule_t) * len);
 
 	return TPM_OK;
@@ -3637,7 +3751,7 @@ int tpm_db_cls_lkp_dcod_set(unsigned int			fl_log_id,
 		return TPM_BAD_PARAM;
 	}
 
-	memcpy(&g_tpm_db.cls_db.lkp_dcod[fl_log_id], lkp_dcod, sizeof(struct tpm_db_cls_lkp_dcod_t));
+	memcpy(&g_tpm_db->cls_db.lkp_dcod[fl_log_id], lkp_dcod, sizeof(struct tpm_db_cls_lkp_dcod_t));
 
 	return TPM_OK;
 }
@@ -3669,7 +3783,7 @@ int tpm_db_cls_lkp_dcod_get(unsigned int		fl_log_id,
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid parameter\n");
 		return TPM_BAD_PARAM;
 	}
-	memcpy(lkp_dcod, &g_tpm_db.cls_db.lkp_dcod[fl_log_id], sizeof(struct tpm_db_cls_lkp_dcod_t));
+	memcpy(lkp_dcod, &g_tpm_db->cls_db.lkp_dcod[fl_log_id], sizeof(struct tpm_db_cls_lkp_dcod_t));
 
 	return TPM_OK;
 }
@@ -3706,7 +3820,7 @@ int tpm_db_cls_rl_off_lkp_dcod_get(unsigned short		rl_off,
 	}
 
 	for (i = 0; i < TPM_MNG_FLOW_ID_MAX; i++) {
-		p_lkp_dcod = &g_tpm_db.cls_db.lkp_dcod[i];
+		p_lkp_dcod = &g_tpm_db->cls_db.lkp_dcod[i];
 		if (p_lkp_dcod->flow_off <= rl_off && p_lkp_dcod->flow_off + p_lkp_dcod->flow_len  >= rl_off)
 			break;
 	}
@@ -3716,7 +3830,7 @@ int tpm_db_cls_rl_off_lkp_dcod_get(unsigned short		rl_off,
 		return TPM_NOT_FOUND;
 	}
 
-	memcpy(lkp_dcod, &g_tpm_db.cls_db.lkp_dcod[i], sizeof(struct tpm_db_cls_lkp_dcod_t));
+	memcpy(lkp_dcod, &g_tpm_db->cls_db.lkp_dcod[i], sizeof(struct tpm_db_cls_lkp_dcod_t));
 
 	return TPM_OK;
 }
@@ -3743,7 +3857,7 @@ int tpm_db_cls_rl_off_free_nr(unsigned int		*free_nr)
 {
 	IF_NULL(TPM_DB_MOD, free_nr);
 
-	*free_nr = ((TPM_CLS_LOG2OFF_TBL_SIZE) - g_tpm_db.cls_db.log2off[TPM_CLS_FREE_LOG2OFF]);
+	*free_nr = ((TPM_CLS_LOG2OFF_TBL_SIZE) - g_tpm_db->cls_db.log2off[TPM_CLS_FREE_LOG2OFF]);
 
 	return TPM_OK;
 }
@@ -3776,14 +3890,14 @@ int tpm_db_cls_rl_off_free_set(unsigned short	off,
 		return TPM_BAD_PARAM;
 	}
 
-	if ((TPM_CLS_LOG2OFF_TBL_SIZE - g_tpm_db.cls_db.log2off[TPM_CLS_FREE_LOG2OFF]) == 0)
+	if ((TPM_CLS_LOG2OFF_TBL_SIZE - g_tpm_db->cls_db.log2off[TPM_CLS_FREE_LOG2OFF]) == 0)
 		return TPM_NO_RESOURCE;
 
-	*log = g_tpm_db.cls_db.log2off[TPM_CLS_FREE_LOG2OFF];
+	*log = g_tpm_db->cls_db.log2off[TPM_CLS_FREE_LOG2OFF];
 
-	g_tpm_db.cls_db.log2off[*log] = off;
+	g_tpm_db->cls_db.log2off[*log] = off;
 
-	g_tpm_db.cls_db.log2off[TPM_CLS_FREE_LOG2OFF]++;
+	g_tpm_db->cls_db.log2off[TPM_CLS_FREE_LOG2OFF]++;
 
 	return TPM_OK;
 }
@@ -3816,10 +3930,10 @@ int tpm_db_cls_rl_off_get(unsigned short	*off,
 		return TPM_BAD_PARAM;
 	}
 
-	if (TPM_CLS_FREE_FL_LOG == g_tpm_db.cls_db.log2off[log])
+	if (TPM_CLS_FREE_FL_LOG == g_tpm_db->cls_db.log2off[log])
 		return TPM_NO_RESOURCE;
 
-	*off = g_tpm_db.cls_db.log2off[log];
+	*off = g_tpm_db->cls_db.log2off[log];
 
 	return TPM_OK;
 }
@@ -3850,7 +3964,7 @@ int tpm_db_cls_rl_off_set(unsigned short	off,
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid parameter\n");
 		return TPM_BAD_PARAM;
 	}
-	g_tpm_db.cls_db.log2off[log] = off;
+	g_tpm_db->cls_db.log2off[log] = off;
 
 	return TPM_OK;
 }
@@ -3877,14 +3991,14 @@ void tpm_db_cls_init(void)
 	int	i;
 
 	/* set the CLS control to default values */
-	memset(&g_tpm_db.cls_db, 0, sizeof(g_tpm_db.cls_db));
+	memset(&g_tpm_db->cls_db, 0, sizeof(g_tpm_db->cls_db));
 
-	g_tpm_db.cls_db.fl_ctrl.f_end = MV_PP2_CLS_FLOWS_TBL_SIZE - 1;
+	g_tpm_db->cls_db.fl_ctrl.f_end = MV_PP2_CLS_FLOWS_TBL_SIZE - 1;
 
 	for (i = TPM_CLS_LOG2OFF_START; i < TPM_CLS_LOG2OFF_TBL_SIZE; i++)
-		g_tpm_db.cls_db.log2off[i] = TPM_CLS_FREE_FL_LOG;
+		g_tpm_db->cls_db.log2off[i] = TPM_CLS_FREE_FL_LOG;
 
-	g_tpm_db.cls_db.log2off[TPM_CLS_FREE_LOG2OFF] = TPM_CLS_LOG2OFF_START;
+	g_tpm_db->cls_db.log2off[TPM_CLS_FREE_LOG2OFF] = TPM_CLS_LOG2OFF_START;
 
 	return;
 }
@@ -3911,22 +4025,22 @@ int tpm_db_pme_cmd_first_free_set(enum tpm_pme_cmd_area_type_t area_type, unsign
 {
 	switch (area_type) {
 	case TPM_PME_CMD_AREA_JMP:
-		if ((g_tpm_db.pme_db.pme_misc_data.jmp_start +
-		    g_tpm_db.pme_db.pme_misc_data.jmp_area_size) <= first_free)
+		if ((g_tpm_db->pme_db.pme_misc_data.jmp_start +
+		    g_tpm_db->pme_db.pme_misc_data.jmp_area_size) <= first_free)
 			return TPM_FULL;
-		g_tpm_db.pme_db.pme_misc_data.jmp_first_free = first_free;
+		g_tpm_db->pme_db.pme_misc_data.jmp_first_free = first_free;
 		break;
 	case TPM_PME_CMD_AREA_TEMPL:
-		if ((g_tpm_db.pme_db.pme_misc_data.templ_start +
-		    g_tpm_db.pme_db.pme_misc_data.templ_area_size) <= first_free)
+		if ((g_tpm_db->pme_db.pme_misc_data.templ_start +
+		    g_tpm_db->pme_db.pme_misc_data.templ_area_size) <= first_free)
 			return TPM_FULL;
-		g_tpm_db.pme_db.pme_misc_data.templ_first_free = first_free;
+		g_tpm_db->pme_db.pme_misc_data.templ_first_free = first_free;
 		break;
 	case TPM_PME_CMD_AREA_SUBR:
-		if ((g_tpm_db.pme_db.pme_misc_data.subr_start +
-		    g_tpm_db.pme_db.pme_misc_data.subr_area_size) <= first_free)
+		if ((g_tpm_db->pme_db.pme_misc_data.subr_start +
+		    g_tpm_db->pme_db.pme_misc_data.subr_area_size) <= first_free)
 			return TPM_FULL;
-		g_tpm_db.pme_db.pme_misc_data.subr_first_free = first_free;
+		g_tpm_db->pme_db.pme_misc_data.subr_first_free = first_free;
 		break;
 	default:
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid parameter\n");
@@ -3960,13 +4074,13 @@ int tpm_db_pme_cmd_first_free_get(enum tpm_pme_cmd_area_type_t area_type, unsign
 
 	switch (area_type) {
 	case TPM_PME_CMD_AREA_JMP:
-		*first_free = g_tpm_db.pme_db.pme_misc_data.jmp_first_free;
+		*first_free = g_tpm_db->pme_db.pme_misc_data.jmp_first_free;
 		break;
 	case TPM_PME_CMD_AREA_TEMPL:
-		*first_free = g_tpm_db.pme_db.pme_misc_data.templ_first_free;
+		*first_free = g_tpm_db->pme_db.pme_misc_data.templ_first_free;
 		break;
 	case TPM_PME_CMD_AREA_SUBR:
-		*first_free = g_tpm_db.pme_db.pme_misc_data.subr_first_free;
+		*first_free = g_tpm_db->pme_db.pme_misc_data.subr_first_free;
 		break;
 	default:
 		TPM_OS_ERROR(TPM_DB_MOD, "Invalid parameter\n");
@@ -4004,10 +4118,10 @@ int tpm_db_pme_data_rng_unit_size_get(unsigned int tbl_idx, unsigned int rng_idx
 
 	if (tbl_idx == TPM_PME_PRIVATE_TBL) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_PRI_RNG_MAX, "Invalid Range Index");
-		*unit_size = g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_size;
+		*unit_size = g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_size;
 	} else {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_SHA_RNG_MAX, "Invalid range index");
-		*unit_size = g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_size;
+		*unit_size = g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_size;
 	}
 
 	return TPM_OK;
@@ -4044,12 +4158,12 @@ int tpm_db_pme_data_rng_info_get(unsigned int tbl_idx,
 	if (tbl_idx == TPM_PME_PRIVATE_TBL) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_PRI_RNG_MAX, "Invalid range index");
 		memcpy(rng_mng_info,
-		       &g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[rng_idx],
+		       &g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[rng_idx],
 		       sizeof(struct tpm_pme_tbl_rng_t));
 	} else {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_SHA_RNG_MAX, "Invalid range index");
 		memcpy(rng_mng_info,
-		       &g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[rng_idx],
+		       &g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[rng_idx],
 		       sizeof(struct tpm_pme_tbl_rng_t));
 	}
 
@@ -4087,13 +4201,13 @@ int tpm_db_pme_data_rng_unit_state_get(unsigned int tbl_idx,
 	if (tbl_idx == TPM_PME_PRIVATE_TBL) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_PRI_RNG_MAX, "Invalid range index");
 		memcpy(state,
-		       &g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state,
-		       sizeof(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state));
+		       &g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state,
+		       sizeof(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state));
 	} else {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_SHA_RNG_MAX, "Invalid range index");
 		memcpy(state,
-		       &g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state,
-		       sizeof(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state));
+		       &g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state,
+		       sizeof(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state));
 	}
 
 	return TPM_OK;
@@ -4130,14 +4244,14 @@ int tpm_db_pme_data_rng_unit_state_set(unsigned int tbl_idx,
 
 	if (tbl_idx == TPM_PME_PRIVATE_TBL) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_PRI_RNG_MAX, "Invalid range index");
-		memcpy(&g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state,
+		memcpy(&g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state,
 		       state,
-		       sizeof(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state));
+		       sizeof(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[rng_idx].unit_state));
 	} else {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, rng_idx, TPM_PME_SHA_RNG_MAX, "Invalid range index");
-		memcpy(&g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state,
+		memcpy(&g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state,
 		       state,
-		       sizeof(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state));
+		       sizeof(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[rng_idx].unit_state));
 	}
 
 	return TPM_OK;
@@ -4178,12 +4292,12 @@ int tpm_db_pme_data_free_db_idx_get(unsigned int tbl_idx, unsigned int *db_idx)
 
 	for (i = 0; i < db_max; i++) {
 		if (tbl_idx == TPM_PME_PRIVATE_TBL &&
-		    g_tpm_db.pme_db.pri_data_db[i].valid == TPM_DATA_INVALID) {
+		    g_tpm_db->pme_db.pri_data_db[i].valid == TPM_DATA_INVALID) {
 			*db_idx = i;
 			break;
 		}
 		if (tbl_idx == TPM_PME_SHARE_TBL &&
-		    g_tpm_db.pme_db.sha_data_db[i].valid == TPM_DATA_INVALID) {
+		    g_tpm_db->pme_db.sha_data_db[i].valid == TPM_DATA_INVALID) {
 			*db_idx = i;
 			break;
 		}
@@ -4230,11 +4344,11 @@ int tpm_db_pme_data_set(unsigned int tbl_idx, unsigned int db_idx, struct tpm_pm
 		return TPM_OUT_OF_RANGE;
 	/* Set DB */
 	if (tbl_idx == TPM_PME_PRIVATE_TBL)
-		memcpy(&g_tpm_db.pme_db.pri_data_db[db_idx],
+		memcpy(&g_tpm_db->pme_db.pri_data_db[db_idx],
 		       mod_data_set,
 		       sizeof(struct tpm_pme_data_entry_set_t));
 	else
-		memcpy(&g_tpm_db.pme_db.sha_data_db[db_idx],
+		memcpy(&g_tpm_db->pme_db.sha_data_db[db_idx],
 		       mod_data_set,
 		       sizeof(struct tpm_pme_data_entry_set_t));
 
@@ -4277,11 +4391,11 @@ int tpm_db_pme_data_get(unsigned int tbl_idx, unsigned int db_idx, struct tpm_pm
 	/* Set DB */
 	if (tbl_idx == TPM_PME_PRIVATE_TBL)
 		memcpy(mod_data_set,
-			&g_tpm_db.pme_db.pri_data_db[db_idx],
+			&g_tpm_db->pme_db.pri_data_db[db_idx],
 			sizeof(struct tpm_pme_data_entry_set_t));
 	else
 		memcpy(mod_data_set,
-			&g_tpm_db.pme_db.sha_data_db[db_idx],
+			&g_tpm_db->pme_db.sha_data_db[db_idx],
 			sizeof(struct tpm_pme_data_entry_set_t));
 
 	return TPM_OK;
@@ -4313,7 +4427,7 @@ int tpm_db_pme_instr_templ_set(unsigned int db_idx, struct tpm_pme_templ_data_t
 	if (db_idx >= TPM_PME_INSTR_TEMPL_MAX)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_OUT_OF_RANGE, "Out of max DB index\n");
 
-	memcpy(&g_tpm_db.pme_db.templ_db[db_idx], instr_templ, sizeof(struct tpm_pme_templ_data_t));
+	memcpy(&g_tpm_db->pme_db.templ_db[db_idx], instr_templ, sizeof(struct tpm_pme_templ_data_t));
 
 	return TPM_OK;
 }
@@ -4343,7 +4457,7 @@ int tpm_db_pme_instr_templ_get(unsigned int db_idx, struct tpm_pme_templ_data_t
 	if (db_idx >= TPM_PME_INSTR_TEMPL_MAX)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_OUT_OF_RANGE, "Out of max DB index\n");
 
-	memcpy(instr_templ, &g_tpm_db.pme_db.templ_db[db_idx], sizeof(struct tpm_pme_templ_data_t));
+	memcpy(instr_templ, &g_tpm_db->pme_db.templ_db[db_idx], sizeof(struct tpm_pme_templ_data_t));
 
 	return TPM_OK;
 }
@@ -4373,7 +4487,7 @@ int tpm_db_pme_instr_templ_free_idx_get(unsigned int *db_idx)
 	IF_NULL(TPM_DB_MOD, db_idx);
 
 	for (i = 0; i < TPM_PME_INSTR_TEMPL_MAX; i++) {
-		if (g_tpm_db.pme_db.templ_db[i].valid == TPM_INSTR_TEMPL_INVALID) {
+		if (g_tpm_db->pme_db.templ_db[i].valid == TPM_INSTR_TEMPL_INVALID) {
 			*db_idx = i;
 			break;
 		}
@@ -4410,7 +4524,7 @@ int tpm_db_pme_vlan_permu_stat_set(unsigned int vlan_op, struct tpm_pme_vlan_ski
 	if (vlan_op >= VLANOP_MAX_CNT)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_BAD_PARAM, "Out of max VLAN Op Num\n");
 
-	memcpy(&g_tpm_db.pme_db.vlan_permu_stat[vlan_op], permu, sizeof(struct tpm_pme_vlan_skip_permu_t));
+	memcpy(&g_tpm_db->pme_db.vlan_permu_stat[vlan_op], permu, sizeof(struct tpm_pme_vlan_skip_permu_t));
 
 	return TPM_OK;
 }
@@ -4440,7 +4554,7 @@ int tpm_db_pme_vlan_permu_stat_get(unsigned int vlan_op, struct tpm_pme_vlan_ski
 	if (vlan_op >= VLANOP_MAX_CNT)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_BAD_PARAM, "Out of max VLAN Op Num\n");
 
-	memcpy(permu, &g_tpm_db.pme_db.vlan_permu_stat[vlan_op], sizeof(struct tpm_pme_vlan_skip_permu_t));
+	memcpy(permu, &g_tpm_db->pme_db.vlan_permu_stat[vlan_op], sizeof(struct tpm_pme_vlan_skip_permu_t));
 
 	return TPM_OK;
 }
@@ -4472,7 +4586,7 @@ int tpm_db_pme_vlan_subr_set(unsigned int db_idx, struct tpm_pme_vlan_subr_t *vl
 	if (db_idx >= TPM_VLAN_TEMPL_MAX)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_BAD_PARAM, "Out of max VLAN DB Num\n");
 
-	memcpy(&g_tpm_db.pme_db.vlan_db[db_idx], vlan_subr, sizeof(struct tpm_pme_vlan_subr_t));
+	memcpy(&g_tpm_db->pme_db.vlan_db[db_idx], vlan_subr, sizeof(struct tpm_pme_vlan_subr_t));
 
 	return TPM_OK;
 }
@@ -4502,7 +4616,7 @@ int tpm_db_pme_vlan_subr_get(unsigned int db_idx, struct tpm_pme_vlan_subr_t *vl
 	if (db_idx >= TPM_VLAN_TEMPL_MAX)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_BAD_PARAM, "Out of max VLAN DB Num\n");
 
-	memcpy(vlan_subr, &g_tpm_db.pme_db.vlan_db[db_idx], sizeof(struct tpm_pme_vlan_subr_t));
+	memcpy(vlan_subr, &g_tpm_db->pme_db.vlan_db[db_idx], sizeof(struct tpm_pme_vlan_subr_t));
 
 	return TPM_OK;
 }
@@ -4532,7 +4646,7 @@ int tpm_db_pme_vlan_free_idx_get(unsigned int *db_idx)
 	IF_NULL(TPM_DB_MOD, db_idx);
 
 	for (i = 0; i < TPM_VLAN_TEMPL_MAX; i++) {
-		if (g_tpm_db.pme_db.vlan_db[i].valid == TPM_VLAN_SUBR_INVALID) {
+		if (g_tpm_db->pme_db.vlan_db[i].valid == TPM_VLAN_SUBR_INVALID) {
 			*db_idx = i;
 			break;
 		}
@@ -4569,7 +4683,7 @@ int tpm_db_pme_addr_rep_subr_set(unsigned int db_idx, struct tpm_pme_addr_rep_su
 	if (db_idx >= TPM_ADDR_REP_TEMPL_MAX)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_BAD_PARAM, "Out of max Addr Subr DB Num\n");
 
-	memcpy(&g_tpm_db.pme_db.addr_rep_db[db_idx], addr_rep_subr, sizeof(struct tpm_pme_addr_rep_subr_t));
+	memcpy(&g_tpm_db->pme_db.addr_rep_db[db_idx], addr_rep_subr, sizeof(struct tpm_pme_addr_rep_subr_t));
 
 	return TPM_OK;
 }
@@ -4599,7 +4713,7 @@ int tpm_db_pme_addr_rep_subr_get(unsigned int db_idx, struct tpm_pme_addr_rep_su
 	if (db_idx >= TPM_ADDR_REP_TEMPL_MAX)
 		IF_ERROR_STR(TPM_DB_MOD, TPM_BAD_PARAM, "Out of max Addr Subr DB Num\n");
 
-	memcpy(addr_rep_subr, &g_tpm_db.pme_db.addr_rep_db[db_idx], sizeof(struct tpm_pme_addr_rep_subr_t));
+	memcpy(addr_rep_subr, &g_tpm_db->pme_db.addr_rep_db[db_idx], sizeof(struct tpm_pme_addr_rep_subr_t));
 
 	return TPM_OK;
 }
@@ -4629,7 +4743,7 @@ int tpm_db_pme_addr_rep_free_idx_get(unsigned int *db_idx)
 	IF_NULL(TPM_DB_MOD, db_idx);
 
 	for (i = 0; i < REPLACE_ADDR_OP_MAX; i++) {
-		if (g_tpm_db.pme_db.addr_rep_db[i].valid == TPM_ADDR_REP_SUBR_INVALID) {
+		if (g_tpm_db->pme_db.addr_rep_db[i].valid == TPM_ADDR_REP_SUBR_INVALID) {
 			*db_idx = i;
 			break;
 		}
@@ -4662,11 +4776,11 @@ void tpm_db_pme_data_rng_lock(unsigned int tbl_idx, unsigned int rng_idx)
 {
 	if (tbl_idx == TPM_PME_PRIVATE_TBL &&
 	    rng_idx < TPM_PME_PRI_RNG_MAX)
-		spin_lock_bh(&g_tpm_db.pme_db.pme_misc_data.pri_tbl_lock[rng_idx]);
+		spin_lock_bh(&g_tpm_db->pme_db.pme_misc_data.pri_tbl_lock[rng_idx]);
 
 	if (tbl_idx == TPM_PME_SHARE_TBL &&
 	    rng_idx < TPM_PME_SHA_RNG_MAX)
-		spin_lock_bh(&g_tpm_db.pme_db.pme_misc_data.sha_tbl_lock[rng_idx]);
+		spin_lock_bh(&g_tpm_db->pme_db.pme_misc_data.sha_tbl_lock[rng_idx]);
 }
 
 /*******************************************************************************
@@ -4690,11 +4804,11 @@ void tpm_db_pme_data_rng_unlock(unsigned int tbl_idx, unsigned int rng_idx)
 {
 	if (tbl_idx == TPM_PME_PRIVATE_TBL &&
 	    rng_idx < TPM_PME_PRI_RNG_MAX)
-		spin_unlock_bh(&g_tpm_db.pme_db.pme_misc_data.pri_tbl_lock[rng_idx]);
+		spin_unlock_bh(&g_tpm_db->pme_db.pme_misc_data.pri_tbl_lock[rng_idx]);
 
 	if (tbl_idx == TPM_PME_SHARE_TBL &&
 	    rng_idx < TPM_PME_SHA_RNG_MAX)
-		spin_unlock_bh(&g_tpm_db.pme_db.pme_misc_data.sha_tbl_lock[rng_idx]);
+		spin_unlock_bh(&g_tpm_db->pme_db.pme_misc_data.sha_tbl_lock[rng_idx]);
 }
 
 /*******************************************************************************
@@ -4715,7 +4829,7 @@ void tpm_db_pme_data_rng_unlock(unsigned int tbl_idx, unsigned int rng_idx)
 *******************************************************************************/
 void tpm_db_pme_hw_lock(void)
 {
-	spin_lock(&g_tpm_db.pme_db.pme_misc_data.hw_lock);
+	spin_lock(&g_tpm_db->pme_db.pme_misc_data.hw_lock);
 }
 
 /*******************************************************************************
@@ -4736,7 +4850,7 @@ void tpm_db_pme_hw_lock(void)
 *******************************************************************************/
 void tpm_db_pme_hw_unlock(void)
 {
-	spin_unlock(&g_tpm_db.pme_db.pme_misc_data.hw_lock);
+	spin_unlock(&g_tpm_db->pme_db.pme_misc_data.hw_lock);
 }
 
 /*******************************************************************************
@@ -4757,7 +4871,7 @@ void tpm_db_pme_hw_unlock(void)
 *******************************************************************************/
 void tpm_db_pme_templ_lock(void)
 {
-	spin_lock_bh(&g_tpm_db.pme_db.pme_misc_data.instr_templ_lock);
+	spin_lock_bh(&g_tpm_db->pme_db.pme_misc_data.instr_templ_lock);
 }
 
 /*******************************************************************************
@@ -4778,7 +4892,7 @@ void tpm_db_pme_templ_lock(void)
 *******************************************************************************/
 void tpm_db_pme_templ_unlock(void)
 {
-	spin_unlock_bh(&g_tpm_db.pme_db.pme_misc_data.instr_templ_lock);
+	spin_unlock_bh(&g_tpm_db->pme_db.pme_misc_data.instr_templ_lock);
 }
 
 
@@ -4804,102 +4918,102 @@ int tpm_db_pme_init(void)
 	int i;
 
 	/* Clear PME db */
-	memset(&g_tpm_db.pme_db, 0, sizeof(struct tpm_db_pme_t));
+	memset(&g_tpm_db->pme_db, 0, sizeof(struct tpm_db_pme_t));
 
 	/* Init Spin Lock */
-	spin_lock_init(&g_tpm_db.pme_db.pme_misc_data.hw_lock);
-	spin_lock_init(&g_tpm_db.pme_db.pme_misc_data.instr_templ_lock);
+	spin_lock_init(&g_tpm_db->pme_db.pme_misc_data.hw_lock);
+	spin_lock_init(&g_tpm_db->pme_db.pme_misc_data.instr_templ_lock);
 	for (i = TPM_PME_PRI_RNG_NO_MOD; i < TPM_PME_PRI_RNG_MAX; i++)
-		spin_lock_init(&g_tpm_db.pme_db.pme_misc_data.pri_tbl_lock[i]);
+		spin_lock_init(&g_tpm_db->pme_db.pme_misc_data.pri_tbl_lock[i]);
 	for (i = TPM_PME_SHA_RNG_MAC; i < TPM_PME_SHA_RNG_MAX; i++)
-		spin_lock_init(&g_tpm_db.pme_db.pme_misc_data.sha_tbl_lock[i]);
+		spin_lock_init(&g_tpm_db->pme_db.pme_misc_data.sha_tbl_lock[i]);
 
 	/* Init PME instruction table division */
 	/* JUMP Area */
-	g_tpm_db.pme_db.pme_misc_data.jmp_start = TPM_PME_JMP_START;
-	g_tpm_db.pme_db.pme_misc_data.jmp_area_size = TPM_PME_JMP_AREA_SIZE;
-	g_tpm_db.pme_db.pme_misc_data.jmp_first_free = TPM_PME_JMP_START;
+	g_tpm_db->pme_db.pme_misc_data.jmp_start = TPM_PME_JMP_START;
+	g_tpm_db->pme_db.pme_misc_data.jmp_area_size = TPM_PME_JMP_AREA_SIZE;
+	g_tpm_db->pme_db.pme_misc_data.jmp_first_free = TPM_PME_JMP_START;
 	/* TEMPL Area */
-	g_tpm_db.pme_db.pme_misc_data.templ_start = TPM_PME_TEMPLATE_START;
-	g_tpm_db.pme_db.pme_misc_data.templ_area_size = TPM_PME_TEMPLATE_AREA_SIZE;
-	g_tpm_db.pme_db.pme_misc_data.templ_first_free = TPM_PME_TEMPLATE_START;
+	g_tpm_db->pme_db.pme_misc_data.templ_start = TPM_PME_TEMPLATE_START;
+	g_tpm_db->pme_db.pme_misc_data.templ_area_size = TPM_PME_TEMPLATE_AREA_SIZE;
+	g_tpm_db->pme_db.pme_misc_data.templ_first_free = TPM_PME_TEMPLATE_START;
 	/* SUBR Area */
-	g_tpm_db.pme_db.pme_misc_data.subr_start = TPM_PME_SUBR_START;
-	g_tpm_db.pme_db.pme_misc_data.subr_area_size = TPM_PME_SUBR_AREA_SIZE;
-	g_tpm_db.pme_db.pme_misc_data.subr_first_free = TPM_PME_SUBR_START;
+	g_tpm_db->pme_db.pme_misc_data.subr_start = TPM_PME_SUBR_START;
+	g_tpm_db->pme_db.pme_misc_data.subr_area_size = TPM_PME_SUBR_AREA_SIZE;
+	g_tpm_db->pme_db.pme_misc_data.subr_first_free = TPM_PME_SUBR_START;
 
 	/* Init PME private table range managenment */
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].start = TPM_PME_PRI_NO_MOD_START;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].case_num_max = TPM_PME_PRI_NO_MOD_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].unit_size = TPM_PME_PRI_NO_MOD_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].unit_state,
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].start = TPM_PME_PRI_NO_MOD_START;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].case_num_max = TPM_PME_PRI_NO_MOD_CASE_MAX;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].unit_size = TPM_PME_PRI_NO_MOD_UNIT_BYTES;
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_NO_MOD].unit_state,
 				TPM_PME_STATE_INT_NUM,
 				sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_PRI_NO_MOD_CASE_MAX))
 		return TPM_FAIL;
 
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].start = TPM_PME_PRI_L2_SW_START;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].case_num_max = TPM_PME_PRI_L2_SW_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].unit_size = TPM_PME_PRI_L2_SW_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].unit_state,
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].start = TPM_PME_PRI_L2_SW_START;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].case_num_max = TPM_PME_PRI_L2_SW_CASE_MAX;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].unit_size = TPM_PME_PRI_L2_SW_UNIT_BYTES;
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_L2_SW].unit_state,
 				TPM_PME_STATE_INT_NUM,
 				sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_PRI_L2_SW_CASE_MAX))
 		return TPM_FAIL;
 
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].start = TPM_PME_PRI_ROUTE_START;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].case_num_max = TPM_PME_PRI_ROUTE_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].unit_size = TPM_PME_PRI_ROUTE_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].unit_state,
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].start = TPM_PME_PRI_ROUTE_START;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].case_num_max = TPM_PME_PRI_ROUTE_CASE_MAX;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].unit_size = TPM_PME_PRI_ROUTE_UNIT_BYTES;
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_ROUTE].unit_state,
 				TPM_PME_STATE_INT_NUM,
 				sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_PRI_ROUTE_CASE_MAX))
 		return TPM_FAIL;
 
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].start = TPM_PME_PRI_NAPT_US_START;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].case_num_max = TPM_PME_PRI_NAPT_US_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].unit_size = TPM_PME_PRI_NAPT_US_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].unit_state,
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].start = TPM_PME_PRI_NAPT_US_START;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].case_num_max = TPM_PME_PRI_NAPT_US_CASE_MAX;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].unit_size = TPM_PME_PRI_NAPT_US_UNIT_BYTES;
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_US_NAPT].unit_state,
 			TPM_PME_STATE_INT_NUM,
 			sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_PRI_NAPT_US_CASE_MAX))
 		return TPM_FAIL;
 
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].start = TPM_PME_PRI_NAPT_DS_START;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].case_num_max = TPM_PME_PRI_NAPT_DS_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].unit_size = TPM_PME_PRI_NAPT_DS_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].unit_state,
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].start = TPM_PME_PRI_NAPT_DS_START;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].case_num_max = TPM_PME_PRI_NAPT_DS_CASE_MAX;
+	g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].unit_size = TPM_PME_PRI_NAPT_DS_UNIT_BYTES;
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.pri_rng_mng[TPM_PME_PRI_RNG_DS_NAPT].unit_state,
 			TPM_PME_STATE_INT_NUM,
 			sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_PRI_NAPT_DS_CASE_MAX))
 		return TPM_FAIL;
 
 	/* Init PME share table range managenment */
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].start = TPM_PME_SHA_MAC_START;
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].case_num_max = TPM_PME_SHA_MAC_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].unit_size = TPM_PME_SHA_MAC_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].unit_state,
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].start = TPM_PME_SHA_MAC_START;
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].case_num_max = TPM_PME_SHA_MAC_CASE_MAX;
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].unit_size = TPM_PME_SHA_MAC_UNIT_BYTES;
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_MAC].unit_state,
 				TPM_PME_STATE_INT_NUM,
 				sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_SHA_MAC_CASE_MAX))
 		return TPM_FAIL;
 
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].start = TPM_PME_SHA_SA_SIP_START;
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].case_num_max = TPM_PME_SHA_SA_SIP_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].unit_size = TPM_PME_SHA_SA_SIP_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].unit_state,
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].start = TPM_PME_SHA_SA_SIP_START;
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].case_num_max = TPM_PME_SHA_SA_SIP_CASE_MAX;
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].unit_size = TPM_PME_SHA_SA_SIP_UNIT_BYTES;
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_SA_SIP].unit_state,
 				TPM_PME_STATE_INT_NUM,
 				sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_SHA_SA_SIP_CASE_MAX))
 		return TPM_FAIL;
 
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].start = TPM_PME_SHA_DA_SA_DIP_START;
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].case_num_max =
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].start = TPM_PME_SHA_DA_SA_DIP_START;
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].case_num_max =
 											TPM_PME_SHA_DA_SA_DIP_CASE_MAX;
-	g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].unit_size =
+	g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].unit_size =
 										TPM_PME_SHA_DA_SA_DIP_UNIT_BYTES;
-	TPM_MEMSET_ZERO(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].unit_state);
-	if (int_array_high_bits_set(g_tpm_db.pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].unit_state,
+	TPM_MEMSET_ZERO(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].unit_state);
+	if (int_array_high_bits_set(g_tpm_db->pme_db.pme_misc_data.sha_rng_mng[TPM_PME_SHA_RNG_DA_SA_DIP].unit_state,
 			TPM_PME_STATE_INT_NUM,
 			sizeof(unsigned int) * BYTE_BITS * TPM_PME_STATE_INT_NUM - TPM_PME_SHA_DA_SA_DIP_CASE_MAX))
 		return TPM_FAIL;
@@ -4975,7 +5089,7 @@ int tpm_db_plcr_free_id_get(unsigned char *policer_id)
 	IF_NULL(TPM_DB_MOD, policer_id);
 
 	for (idx = TPM_PLCR_MIN_ENTRY_ID; idx < MV_PP2_PLCR_NUM; idx++) {
-		plcr_arr = &g_tpm_db.plcr_db.plcr_arr[idx];
+		plcr_arr = &g_tpm_db->plcr_db.plcr_arr[idx];
 		if (plcr_arr->valid == TPM_PLCR_ENTRY_VALID_STATE)
 			continue;
 		/* save policer ID in case free policer entry is found */
@@ -5015,12 +5129,12 @@ int tpm_db_plcr_entry_set(unsigned char			policer_id,
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, policer_id, MV_PP2_PLCR_NUM - 1, "invalid policer ID");
 	IF_NULL(TPM_DB_MOD, plcr_entry);
 
-	memcpy(&g_tpm_db.plcr_db.plcr_arr[policer_id], plcr_entry, sizeof(struct tpm_db_plcr_entry_t));
+	memcpy(&g_tpm_db->plcr_db.plcr_arr[policer_id], plcr_entry, sizeof(struct tpm_db_plcr_entry_t));
 
 	/* Clear this policer entry in invalid case */
-	if (g_tpm_db.plcr_db.plcr_arr[policer_id].valid == TPM_PLCR_ENTRY_INVALID_STATE) {
-		TPM_MEMSET_ZERO(g_tpm_db.plcr_db.plcr_arr[policer_id]);
-		g_tpm_db.plcr_db.plcr_arr[policer_id].valid = TPM_PLCR_ENTRY_INVALID_STATE;
+	if (g_tpm_db->plcr_db.plcr_arr[policer_id].valid == TPM_PLCR_ENTRY_INVALID_STATE) {
+		TPM_MEMSET_ZERO(g_tpm_db->plcr_db.plcr_arr[policer_id]);
+		g_tpm_db->plcr_db.plcr_arr[policer_id].valid = TPM_PLCR_ENTRY_INVALID_STATE;
 	}
 
 	return TPM_OK;
@@ -5047,7 +5161,7 @@ int tpm_db_plcr_entry_get(unsigned char			policer_id,
 	TPM_POS_RANGE_VALIDATE_STR(TPM_DB_MOD, policer_id, MV_PP2_PLCR_NUM - 1, "invalid policer ID");
 	IF_NULL(TPM_DB_MOD, plcr_entry);
 
-	memcpy(plcr_entry, &g_tpm_db.plcr_db.plcr_arr[policer_id], sizeof(struct tpm_db_plcr_entry_t));
+	memcpy(plcr_entry, &g_tpm_db->plcr_db.plcr_arr[policer_id], sizeof(struct tpm_db_plcr_entry_t));
 	return TPM_OK;
 }
 
@@ -5079,7 +5193,7 @@ int tpm_db_plcr_ref_cnt_update(unsigned char			policer_id,
 				   "invalid reference counter action");
 
 	/* check the policer ID */
-	plcr_arr = &g_tpm_db.plcr_db.plcr_arr[policer_id];
+	plcr_arr = &g_tpm_db->plcr_db.plcr_arr[policer_id];
 	if (((cnt_action == TPM_PLCR_REF_CNT_INC) ||
 	     (cnt_action == TPM_PLCR_REF_CNT_DEC) ||
 	     (cnt_action == TPM_PLCR_REF_CNT_CLEAR))
@@ -5101,7 +5215,7 @@ int tpm_db_plcr_ref_cnt_update(unsigned char			policer_id,
 		break;
 	case TPM_PLCR_REF_CNT_CLEAR_ALL:
 		for (idx = TPM_PLCR_MIN_ENTRY_ID; idx < MV_PP2_PLCR_NUM; idx++) {
-			plcr_arr = &g_tpm_db.plcr_db.plcr_arr[idx];
+			plcr_arr = &g_tpm_db->plcr_db.plcr_arr[idx];
 			if (plcr_arr->valid == TPM_PLCR_ENTRY_VALID_STATE)
 				plcr_arr->ref_cnt = 0;
 		}
@@ -5133,7 +5247,7 @@ int tpm_db_plcr_gen_cfg_set(struct tpm_policer_gen_cfg_t *gen_cfg)
 {
 	IF_NULL(TPM_DB_MOD, gen_cfg);
 
-	memcpy(&g_tpm_db.plcr_db.gen_cfg, gen_cfg, sizeof(struct tpm_policer_gen_cfg_t));
+	memcpy(&g_tpm_db->plcr_db.gen_cfg, gen_cfg, sizeof(struct tpm_policer_gen_cfg_t));
 	return TPM_OK;
 }
 
@@ -5156,7 +5270,7 @@ int tpm_db_plcr_gen_cfg_get(struct tpm_policer_gen_cfg_t *gen_cfg)
 {
 	IF_NULL(TPM_DB_MOD, gen_cfg);
 
-	memcpy(gen_cfg, &g_tpm_db.plcr_db.gen_cfg, sizeof(struct tpm_policer_gen_cfg_t));
+	memcpy(gen_cfg, &g_tpm_db->plcr_db.gen_cfg, sizeof(struct tpm_policer_gen_cfg_t));
 	return TPM_OK;
 }
 
@@ -5179,7 +5293,7 @@ int tpm_db_plcr_early_drop_set(struct tpm_policer_early_drop_t *early_drop)
 {
 	IF_NULL(TPM_DB_MOD, early_drop);
 
-	memcpy(&g_tpm_db.plcr_db.early_drop, early_drop, sizeof(struct tpm_policer_early_drop_t));
+	memcpy(&g_tpm_db->plcr_db.early_drop, early_drop, sizeof(struct tpm_policer_early_drop_t));
 	return TPM_OK;
 }
 
@@ -5202,7 +5316,7 @@ int tpm_db_plcr_early_drop_get(struct tpm_policer_early_drop_t *early_drop)
 {
 	IF_NULL(TPM_DB_MOD, early_drop);
 
-	memcpy(early_drop, &g_tpm_db.plcr_db.early_drop, sizeof(struct tpm_policer_early_drop_t));
+	memcpy(early_drop, &g_tpm_db->plcr_db.early_drop, sizeof(struct tpm_policer_early_drop_t));
 	return TPM_OK;
 }
 
@@ -5227,20 +5341,20 @@ int tpm_db_plcr_init(void)
 	unsigned int gmac = 0;
 
 	/* clear TPM policer DB */
-	TPM_MEMSET_ZERO(g_tpm_db.plcr_db);
+	TPM_MEMSET_ZERO(g_tpm_db->plcr_db);
 
 	/* set policer entry to invalid state */
 	for (idx = 0; idx < MV_PP2_PLCR_NUM; idx++)
-		g_tpm_db.plcr_db.plcr_arr[idx].valid = TPM_PLCR_ENTRY_INVALID_STATE;
+		g_tpm_db->plcr_db.plcr_arr[idx].valid = TPM_PLCR_ENTRY_INVALID_STATE;
 
 	/* disable early drop and queue threshold index */
-	g_tpm_db.plcr_db.early_drop.state = TPM_PLCR_EARLY_DROP_DISABLE;
+	g_tpm_db->plcr_db.early_drop.state = TPM_PLCR_EARLY_DROP_DISABLE;
 	for (idx = 0; idx < TPM_NUM_MAX_QUEUE; idx++)
-		g_tpm_db.plcr_db.early_drop.rxq_idx[idx] = TPM_PLCR_INVALID_Q_THESH_IDX;
+		g_tpm_db->plcr_db.early_drop.rxq_idx[idx] = TPM_PLCR_INVALID_Q_THESH_IDX;
 
 	for (gmac = 0; gmac < TPM_NUM_TX_PORTS; gmac++) {
 		for (idx = 0; idx < TPM_NUM_MAX_QUEUE; idx++)
-			g_tpm_db.plcr_db.early_drop.txq_idx[gmac][idx] = TPM_PLCR_INVALID_Q_THESH_IDX;
+			g_tpm_db->plcr_db.early_drop.txq_idx[gmac][idx] = TPM_PLCR_INVALID_Q_THESH_IDX;
 	}
 
 	return TPM_OK;
@@ -5289,25 +5403,25 @@ int tpm_db_qos_tbl_entry_set(enum tpm_qos_sel_t	qos_select,
 	}
 
 	if (TPM_QOS_DSCP == qos_select) {
-		memcpy(&g_tpm_db.qos_db.dscp_tbl[qos_tbl].dscp_entry[entry].qos_entry,
+		memcpy(&g_tpm_db->qos_db.dscp_tbl[qos_tbl].dscp_entry[entry].qos_entry,
 			qos_entry,
 			sizeof(struct tpm_qos_tbl_act_t));
-		g_tpm_db.qos_db.dscp_tbl[qos_tbl].dscp_entry[entry].entry_stat = TPM_QOS_TBL_STATUS_INITED;
+		g_tpm_db->qos_db.dscp_tbl[qos_tbl].dscp_entry[entry].entry_stat = TPM_QOS_TBL_STATUS_INITED;
 
 		/* keep qos table pointer */
-		qos_tbl_entry = g_tpm_db.qos_db.dscp_tbl[qos_tbl].dscp_entry;
+		qos_tbl_entry = g_tpm_db->qos_db.dscp_tbl[qos_tbl].dscp_entry;
 		qos_tbl_size = MV_PP2_CLS_C2_QOS_DSCP_TBL_SIZE;
-		tbl_stat = &g_tpm_db.qos_db.dscp_tbl[qos_tbl].tbl_stat;
+		tbl_stat = &g_tpm_db->qos_db.dscp_tbl[qos_tbl].tbl_stat;
 	} else if (TPM_QOS_PBIT == qos_select) {
-		memcpy(&g_tpm_db.qos_db.pri_tbl[qos_tbl].pri_entry[entry].qos_entry,
+		memcpy(&g_tpm_db->qos_db.pri_tbl[qos_tbl].pri_entry[entry].qos_entry,
 			qos_entry,
 			sizeof(struct tpm_qos_tbl_act_t));
-		g_tpm_db.qos_db.pri_tbl[qos_tbl].pri_entry[entry].entry_stat = TPM_QOS_TBL_STATUS_INITED;
+		g_tpm_db->qos_db.pri_tbl[qos_tbl].pri_entry[entry].entry_stat = TPM_QOS_TBL_STATUS_INITED;
 
 		/* keep qos table pointer */
-		qos_tbl_entry = g_tpm_db.qos_db.pri_tbl[qos_tbl].pri_entry;
+		qos_tbl_entry = g_tpm_db->qos_db.pri_tbl[qos_tbl].pri_entry;
 		qos_tbl_size = MV_PP2_CLS_C2_QOS_PRIO_TBL_SIZE;
-		tbl_stat = &g_tpm_db.qos_db.pri_tbl[qos_tbl].tbl_stat;
+		tbl_stat = &g_tpm_db->qos_db.pri_tbl[qos_tbl].tbl_stat;
 	}
 
 	/* update table stat if necessary */
@@ -5359,11 +5473,11 @@ int tpm_db_qos_tbl_entry_get(enum tpm_qos_sel_t	qos_select,
 
 	if (TPM_QOS_DSCP == qos_select) {
 		memcpy(qos_entry,
-			&g_tpm_db.qos_db.dscp_tbl[qos_tbl].dscp_entry[entry],
+			&g_tpm_db->qos_db.dscp_tbl[qos_tbl].dscp_entry[entry],
 			sizeof(struct tpm_db_qos_tbl_entry_t));
 	} else if (TPM_QOS_PBIT == qos_select) {
 		memcpy(qos_entry,
-			&g_tpm_db.qos_db.pri_tbl[qos_tbl].pri_entry[entry],
+			&g_tpm_db->qos_db.pri_tbl[qos_tbl].pri_entry[entry],
 			sizeof(struct tpm_db_qos_tbl_entry_t));
 	}
 
@@ -5397,12 +5511,12 @@ int tpm_db_qos_tbl_status_get(enum tpm_qos_sel_t	qos_select,
 
 	if (TPM_QOS_DSCP == qos_select) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_QOS_MOD, qos_tbl, MV_PP2_CLS_C2_QOS_DSCP_TBL_NUM, "invalid qos_tbl");
-		*status =  g_tpm_db.qos_db.dscp_tbl[qos_tbl].tbl_stat;
-		*ref_cnt = g_tpm_db.qos_db.dscp_tbl[qos_tbl].ref_count;
+		*status =  g_tpm_db->qos_db.dscp_tbl[qos_tbl].tbl_stat;
+		*ref_cnt = g_tpm_db->qos_db.dscp_tbl[qos_tbl].ref_count;
 	} else if (TPM_QOS_PBIT == qos_select) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_QOS_MOD, qos_tbl, MV_PP2_CLS_C2_QOS_PRIO_TBL_NUM, "invalid qos_tbl");
-		*status = g_tpm_db.qos_db.pri_tbl[qos_tbl].tbl_stat;
-		*ref_cnt = g_tpm_db.qos_db.pri_tbl[qos_tbl].ref_count;
+		*status = g_tpm_db->qos_db.pri_tbl[qos_tbl].tbl_stat;
+		*ref_cnt = g_tpm_db->qos_db.pri_tbl[qos_tbl].ref_count;
 	} else {
 		TPM_OS_ERROR(TPM_QOS_MOD, "invalid qos table type: (%d)\n", qos_select);
 		return TPM_BAD_PARAM;
@@ -5438,10 +5552,10 @@ int tpm_db_qos_tbl_ref_cnt_updt(enum tpm_qos_sel_t	qos_select,
 
 	if (TPM_QOS_DSCP == qos_select) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_QOS_MOD, qos_tbl, MV_PP2_CLS_C2_QOS_DSCP_TBL_NUM, "invalid qos_tbl");
-		ref_cnt = &g_tpm_db.qos_db.dscp_tbl[qos_tbl].ref_count;
+		ref_cnt = &g_tpm_db->qos_db.dscp_tbl[qos_tbl].ref_count;
 	} else if (TPM_QOS_PBIT == qos_select) {
 		TPM_POS_RANGE_VALIDATE_STR(TPM_QOS_MOD, qos_tbl, MV_PP2_CLS_C2_QOS_PRIO_TBL_NUM, "invalid qos_tbl");
-		ref_cnt = &g_tpm_db.qos_db.pri_tbl[qos_tbl].ref_count;
+		ref_cnt = &g_tpm_db->qos_db.pri_tbl[qos_tbl].ref_count;
 	} else {
 		TPM_OS_ERROR(TPM_QOS_MOD, "invalid qos table type: (%d)\n", qos_select);
 		return TPM_BAD_PARAM;
@@ -5477,20 +5591,20 @@ int tpm_db_qos_init(void)
 	unsigned int idx_in = 0;
 
 	/* clear TPM QOS DB */
-	TPM_MEMSET_ZERO(g_tpm_db.qos_db);
+	TPM_MEMSET_ZERO(g_tpm_db->qos_db);
 
 	/* set policer entry to invalid state */
 	for (idx = 0; idx < MV_PP2_CLS_C2_QOS_PRIO_TBL_NUM; idx++) {
-		g_tpm_db.qos_db.pri_tbl[idx].tbl_stat = TPM_QOS_TBL_STATUS_UNINITED;
-		g_tpm_db.qos_db.pri_tbl[idx].ref_count = 0;
+		g_tpm_db->qos_db.pri_tbl[idx].tbl_stat = TPM_QOS_TBL_STATUS_UNINITED;
+		g_tpm_db->qos_db.pri_tbl[idx].ref_count = 0;
 		for (idx_in = 0; idx_in < MV_PP2_CLS_C2_QOS_PRIO_TBL_SIZE; idx_in++)
-			g_tpm_db.qos_db.pri_tbl[idx].pri_entry[idx_in].entry_stat = TPM_QOS_TBL_STATUS_UNINITED;
+			g_tpm_db->qos_db.pri_tbl[idx].pri_entry[idx_in].entry_stat = TPM_QOS_TBL_STATUS_UNINITED;
 	}
 	for (idx = 0; idx < MV_PP2_CLS_C2_QOS_DSCP_TBL_NUM; idx++) {
-		g_tpm_db.qos_db.dscp_tbl[idx].tbl_stat = TPM_QOS_TBL_STATUS_UNINITED;
-		g_tpm_db.qos_db.dscp_tbl[idx].ref_count = 0;
+		g_tpm_db->qos_db.dscp_tbl[idx].tbl_stat = TPM_QOS_TBL_STATUS_UNINITED;
+		g_tpm_db->qos_db.dscp_tbl[idx].ref_count = 0;
 		for (idx_in = 0; idx_in < MV_PP2_CLS_C2_QOS_DSCP_TBL_SIZE; idx_in++)
-			g_tpm_db.qos_db.dscp_tbl[idx].dscp_entry[idx_in].entry_stat = TPM_QOS_TBL_STATUS_UNINITED;
+			g_tpm_db->qos_db.dscp_tbl[idx].dscp_entry[idx_in].entry_stat = TPM_QOS_TBL_STATUS_UNINITED;
 	}
 
 	return TPM_OK;
@@ -5512,7 +5626,7 @@ int tpm_db_qos_init(void)
 *******************************************************************************/
 struct list_head *tpm_db_mc_dup_list_head_get(unsigned char dup_flowid)
 {
-	return &g_tpm_db.mc_db.mct_dup_head_db[dup_flowid];
+	return &g_tpm_db->mc_db.mct_dup_head_db[dup_flowid];
 }
 
 /*******************************************************************************
@@ -5531,7 +5645,7 @@ struct list_head *tpm_db_mc_dup_list_head_get(unsigned char dup_flowid)
 *******************************************************************************/
 struct list_head *tpm_db_mc_free_list_head_get(void)
 {
-	return &g_tpm_db.mc_db.mct_free_head_db;
+	return &g_tpm_db->mc_db.mct_free_head_db;
 }
 
 /*******************************************************************************
@@ -5554,7 +5668,7 @@ struct tpm_mc_index_t *tpm_db_mc_index_node_get(unsigned int mct_node_idx)
 	if (mct_node_idx >= MV_PP2_MC_TBL_SIZE)
 		return NULL;
 
-	return &g_tpm_db.mc_db.mct_index_db[mct_node_idx];
+	return &g_tpm_db->mc_db.mct_index_db[mct_node_idx];
 }
 
 /*******************************************************************************
@@ -5580,7 +5694,7 @@ int tpm_db_mc_index_node_set(unsigned int mct_node_idx,
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, mct_node_idx, 0, (MV_PP2_MC_TBL_SIZE - 1));
 	IF_NULL(TPM_DB_MOD, mct_index_node);
 
-	memcpy(&g_tpm_db.mc_db.mct_index_db[mct_node_idx], mct_index_node, sizeof(struct tpm_mc_index_t));
+	memcpy(&g_tpm_db->mc_db.mct_index_db[mct_node_idx], mct_index_node, sizeof(struct tpm_mc_index_t));
 
 	return TPM_OK;
 }
@@ -5608,7 +5722,7 @@ int tpm_db_mc_data_get(unsigned int mct_db_idx,
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, mct_db_idx, 0, (MV_PP2_MC_TBL_SIZE - 1));
 	IF_NULL(TPM_DB_MOD, mct_data);
 
-	memcpy(mct_data, &g_tpm_db.mc_db.mct_data_db[mct_db_idx], sizeof(struct tpm_mc_data_t));
+	memcpy(mct_data, &g_tpm_db->mc_db.mct_data_db[mct_db_idx], sizeof(struct tpm_mc_data_t));
 
 	return TPM_OK;
 }
@@ -5637,7 +5751,7 @@ int tpm_db_mc_data_set(unsigned int mct_db_idx,
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, mct_db_idx, 0, (MV_PP2_MC_TBL_SIZE - 1));
 	IF_NULL(TPM_DB_MOD, mct_data);
 
-	memcpy(&g_tpm_db.mc_db.mct_data_db[mct_db_idx], mct_data, sizeof(struct tpm_mc_data_t));
+	memcpy(&g_tpm_db->mc_db.mct_data_db[mct_db_idx], mct_data, sizeof(struct tpm_mc_data_t));
 
 	return TPM_OK;
 }
@@ -5663,25 +5777,25 @@ int tpm_db_mc_init(void)
 	int i;
 
 	/* Clear MCT db */
-	memset(&g_tpm_db.mc_db, 0, sizeof(struct tpm_db_mc_t));
+	memset(&g_tpm_db->mc_db, 0, sizeof(struct tpm_db_mc_t));
 
 	/* Init mct_hw_idx to MCT corresponding mct hw index in mct data db and index db */
 	for (i = 0; i < MV_PP2_MC_TBL_SIZE; i++) {
-		g_tpm_db.mc_db.mct_data_db[i].valid = TPM_MC_ENTRY_INVALID;
-		g_tpm_db.mc_db.mct_index_db[i].valid = TPM_MC_ENTRY_INVALID;
-		g_tpm_db.mc_db.mct_index_db[i].mct_hw_idx = i;
+		g_tpm_db->mc_db.mct_data_db[i].valid = TPM_MC_ENTRY_INVALID;
+		g_tpm_db->mc_db.mct_index_db[i].valid = TPM_MC_ENTRY_INVALID;
+		g_tpm_db->mc_db.mct_index_db[i].mct_hw_idx = i;
 	}
 
 	/* Init MCT list head */
-	INIT_LIST_HEAD(&g_tpm_db.mc_db.mct_free_head_db);
+	INIT_LIST_HEAD(&g_tpm_db->mc_db.mct_free_head_db);
 	for (i = 0; i < MV_PP2_MC_TBL_SIZE; i++)
-		INIT_LIST_HEAD(&g_tpm_db.mc_db.mct_dup_head_db[i]);
+		INIT_LIST_HEAD(&g_tpm_db->mc_db.mct_dup_head_db[i]);
 
 	/* Init free list */
 	for (i = MV_PP2_MC_TBL_SIZE - 1; i >= 0; i--) {
-		list_add(&g_tpm_db.mc_db.mct_index_db[i].list_node, &g_tpm_db.mc_db.mct_free_head_db);
+		list_add(&g_tpm_db->mc_db.mct_index_db[i].list_node, &g_tpm_db->mc_db.mct_free_head_db);
 		/* Change index node valid status after adding to free list */
-		g_tpm_db.mc_db.mct_index_db[i].valid = TPM_MC_ENTRY_VALID;
+		g_tpm_db->mc_db.mct_index_db[i].valid = TPM_MC_ENTRY_VALID;
 	}
 
 	return TPM_OK;
@@ -5709,7 +5823,7 @@ int tpm_db_sw_port_ingr_rate_get(enum tpm_sw_port_t port, unsigned int *rate)
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, port, 0, TPM_SW_PORT_MAX);
 	IF_NULL(TPM_DB_MOD, rate);
 
-	*rate = g_tpm_db.sw_db.sw_port_ingr_rate[port];
+	*rate = g_tpm_db->sw_db.sw_port_ingr_rate[port];
 
 	return TPM_OK;
 }
@@ -5736,7 +5850,7 @@ int tpm_db_sw_port_ingr_rate_set(enum tpm_sw_port_t port, unsigned int rate)
 	/* Param check */
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, port, 0, TPM_SW_PORT_MAX);
 
-	g_tpm_db.sw_db.sw_port_ingr_rate[port] = rate;
+	g_tpm_db->sw_db.sw_port_ingr_rate[port] = rate;
 
 	return TPM_OK;
 }
@@ -5763,7 +5877,7 @@ int tpm_db_sw_port_ingr_mc_rate_get(enum tpm_sw_port_t port, unsigned int *rate)
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, port, 0, TPM_SW_PORT_MAX);
 	IF_NULL(TPM_DB_MOD, rate);
 
-	*rate = g_tpm_db.sw_db.sw_port_ingr_mc_rate[port];
+	*rate = g_tpm_db->sw_db.sw_port_ingr_mc_rate[port];
 
 	return TPM_OK;
 }
@@ -5790,7 +5904,7 @@ int tpm_db_sw_port_ingr_mc_rate_set(enum tpm_sw_port_t port, unsigned int rate)
 	/* Param check */
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, port, 0, TPM_SW_PORT_MAX);
 
-	g_tpm_db.sw_db.sw_port_ingr_mc_rate[port] = rate;
+	g_tpm_db->sw_db.sw_port_ingr_mc_rate[port] = rate;
 
 	return TPM_OK;
 }
@@ -5817,7 +5931,7 @@ int tpm_db_sw_port_ingr_bc_rate_get(enum tpm_sw_port_t port, unsigned int *rate)
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, port, 0, TPM_SW_PORT_MAX);
 	IF_NULL(TPM_DB_MOD, rate);
 
-	*rate = g_tpm_db.sw_db.sw_port_ingr_bc_rate[port];
+	*rate = g_tpm_db->sw_db.sw_port_ingr_bc_rate[port];
 
 	return TPM_OK;
 }
@@ -5844,7 +5958,7 @@ int tpm_db_sw_port_ingr_bc_rate_set(enum tpm_sw_port_t port, unsigned int rate)
 	/* Param check */
 	TPM_DECIMAL_RANGE_VALIDATE(TPM_DB_MOD, port, 0, TPM_SW_PORT_MAX);
 
-	g_tpm_db.sw_db.sw_port_ingr_bc_rate[port] = rate;
+	g_tpm_db->sw_db.sw_port_ingr_bc_rate[port] = rate;
 
 	return TPM_OK;
 }
@@ -5872,9 +5986,9 @@ int tpm_db_init(void)
 {
 	int ret_code;
 
-	/* Erase DB */
-	TPM_MEMSET_ZERO(g_tpm_db);
-	TPM_MEMSET_ZERO(g_init_cfg);
+	/* Allocation for tpm db */
+	ret_code = tpm_db_mem_alloc_init();
+	IF_ERROR_STR(TPM_DB_MOD, ret_code, "Failed to allocate memory for TPM DB\n");
 
 	/* Set TPM module state */
 	ret_code = tpm_db_module_state_set(TPM_MODULE_NOT_START);
@@ -5914,3 +6028,31 @@ int tpm_db_init(void)
 
 	return TPM_OK;
 }
+
+/*******************************************************************************
+* tpm_db_exit()
+*
+* DESCRIPTION: Perform DB memory free when exit.
+*
+* INPUTS:
+*	None.
+*
+* OUTPUTS:
+*	None.
+*
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_db_err_t.
+*
+* COMMENTS:
+*
+*******************************************************************************/
+int tpm_db_exit(void)
+{
+	int ret_code;
+
+	ret_code = tpm_db_mem_free();
+	IF_ERROR_STR(TPM_DB_MOD, ret_code, "Failed to free memory allocated for TPM DB\n");
+
+	return TPM_OK;
+}
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c
index edaf60f..0cfee16 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_device.c
@@ -1350,6 +1350,12 @@ static int __init mv_tpm_module_init(void)
 
 static void __exit mv_tpm_module_exit(void)
 {
+	/* Release TPM DB memory */
+	if (tpm_module_exit()) {
+		printk(KERN_ERR "= TPM device DB memory release failed =\n");
+		return;
+	}
+
 	/* Release TPM device and interface */
 	if (tpm_device_release()) {
 		printk(KERN_ERR "= TPM device interface release failed =\n");
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_init.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_init.c
index 4db3f29..beb9ac4 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_init.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_init.c
@@ -1376,6 +1376,36 @@ int tpm_module_init(void)
 }
 
 /*******************************************************************************
+* tpm_module_exit()
+*
+* DESCRIPTION: Memory free when TPM module exit.
+*
+* INPUTS:
+*	None
+*
+* OUTPUTS:
+*	None
+*
+* RETURNS:
+*	On success, the function returns TPM_OK. On error different types are returned
+*	according to the case - see tpm_error_code_t.
+*
+* Comments:
+*	This function will be called once TPM kernel module is unloaded
+*
+*******************************************************************************/
+int tpm_module_exit(void)
+{
+	int rc;
+
+	/* Exit DB */
+	rc = tpm_db_exit();
+	IF_ERROR_STR(TPM_INIT_MOD, rc, "Error in Exit DB\n");
+
+	return TPM_OK;
+}
+
+/*******************************************************************************
 * tpm_module_start()
 *
 * DESCRIPTION: Starts the TPM module
-- 
1.7.5.4

