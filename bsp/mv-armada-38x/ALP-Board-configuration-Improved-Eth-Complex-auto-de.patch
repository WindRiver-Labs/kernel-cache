From 69903626d831c5f010df2628714032bd9920a9e7 Mon Sep 17 00:00:00 2001
From: Omri Itach <omrii@marvell.com>
Date: Sun, 16 Jun 2013 11:01:04 +0300
Subject: [PATCH 0746/1825] ALP: Board configuration: Improved Eth Complex
 auto detection sequence

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 4acb7749a6640abf16bac429616f51519082733d

- Added error handling for Serdes Lanes and MAC 0 configuration
- SGMII setting will overide MAC0 settings
- Added print of selected SGMII configuration

Change-Id: I3a27e97382976fd40294ced3e42b278ad3ec1281
Signed-off-by: Omri Itach <omrii@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2282
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../avanta_lp_family/boardEnv/mvBoardEnvLib.c      |  141 +++++++++++++-------
 .../avanta_lp_family/boardEnv/mvBoardEnvLib.h      |    4 +-
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c        |    7 +-
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h        |    7 +
 4 files changed, 103 insertions(+), 56 deletions(-)

diff --git a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c
index e68aa77..1159ef0 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c
+++ b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.c
@@ -987,23 +987,15 @@ MV_STATUS mvBoardEthComplexInfoUpdate(MV_VOID)
 	MV_ETH_COMPLEX_TOPOLOGY mac0Config, mac1Config;
 
 	/* Ethernet Complex initialization : */
-	/* MAC0 */
+	/* MAC0/1 */
 	mac0Config = mvBoardMac0ConfigGet();
-	if (mac0Config != MV_ERROR)
-		ethComplexOptions |= mac0Config;
-	else {
-		mvOsPrintf("%s: Error: Ethernet Complex init failed (MAC0). Using default configuration.\n", __func__);
-		return MV_ERROR;
-	}
-
-	/* MAC1 */
 	mac1Config = mvBoardMac1ConfigGet();
-	if (mac1Config != MV_ERROR)
-		ethComplexOptions |= mac1Config;
-	else {
-		mvOsPrintf("%s: Error: Ethernet Complex init failed (MAC1). Using default configuration.\n", __func__);
+	if (mac0Config == MV_ERROR || mac1Config == MV_ERROR) {
+		mvOsPrintf("%s: Error: Using default configuration.\n\n", __func__);
 		return MV_ERROR;
 	}
+	ethComplexOptions |= mac0Config | mac1Config;
+
 	/* if MAC1 is NOT connected to PON SerDes --> connect PON MAC to to PON SerDes */
 	if ((ethComplexOptions & MV_ETHCOMP_GE_MAC1_2_PON_ETH_SERDES) == MV_FALSE)
 		ethComplexOptions |= MV_ETHCOMP_P2P_MAC_2_PON_ETH_SERDES;
@@ -1162,23 +1154,43 @@ MV_U32 mvBoardBootAttrGet(MV_U32 satrBootDeviceValue, MV_U8 attrNum)
 *******************************************************************************/
 MV_ETH_COMPLEX_TOPOLOGY mvBoardMac0ConfigGet()
 {
-	MV_U32 sgmiiLane;
-	switch (mvCtrlSysConfigGet(MV_CONFIG_MAC0)) {
-	case 0x0:
+	MV_ETH_COMPLEX_TOPOLOGY sgmiiLane;
+	MV_STATUS isSgmiiLaneEnabled;
+	MV_U32 mac0Config = mvCtrlSysConfigGet(MV_CONFIG_MAC0);
+
+	if (mac0Config == MV_ERROR) {
+		mvOsPrintf("%s: Error: failed reading MAC0 connection board configuration" \
+				"\n", __func__);
+		return MV_ERROR;
+	}
+
+	/*
+	 * if a Serdes lane is configured to SGMII, and conflicts MAC0 settings,
+	 * then the selected Serdes lane will be used (overriding MAC0 settings)
+	 */
+	isSgmiiLaneEnabled = mvBoardLaneSGMIIGet(&sgmiiLane);
+	if (isSgmiiLaneEnabled == MV_TRUE && mac0Config != MAC0_2_SGMII) {
+		mvOsPrintf("%s: Error: Board configuration conflict for MAC0 connection" \
+				" and Serdes Lanes.\n\n", __func__);
+		return sgmiiLane;
+	}
+
+	switch (mac0Config) {
+	case MAC0_2_SW_P6:
 		return MV_ETHCOMP_GE_MAC0_2_SW_P6;
-	case 0x1:
+	case MAC0_2_GE_PHY_P0:
 		return MV_ETHCOMP_GE_MAC0_2_GE_PHY_P0;
-	case 0x2:
+	case MAC0_2_RGMII:
 		return MV_ETHCOMP_GE_MAC0_2_RGMII0;
-	case 0x3:
-		sgmiiLane = mvBoardLaneSGMIIGet();
-		if (sgmiiLane != MV_ERROR)
+	case MAC0_2_SGMII:
+		if (isSgmiiLaneEnabled == MV_TRUE)
 			return sgmiiLane;
-		break;
 	}
 
-	mvOsPrintf("%s: Error: unexpected value for MAC0 or Serdes Lanes board configuration\n", __func__);
+	/* if MAC0 set to SGMII, but no Serdes lane selected, --> ERROR (use defaults) */
+	mvOsPrintf("%s: Error: Configuration conflict for MAC0 connection.\n", __func__);
 	return MV_ERROR;
+
 }
 
 /*******************************************************************************
@@ -1213,7 +1225,7 @@ MV_ETH_COMPLEX_TOPOLOGY mvBoardMac1ConfigGet()
 		return MV_ETHCOMP_GE_MAC1_2_GE_PHY_P3;
 		break;
 	default:
-		mvOsPrintf("%s: Error: unexpected value from mvCtrlConfigGet \n", __func__);
+		mvOsPrintf("%s: Error: Configuration conflict for MAC1 connection.\n", __func__);
 		return MV_ERROR;
 	}
 }
@@ -1231,34 +1243,56 @@ MV_ETH_COMPLEX_TOPOLOGY mvBoardMac1ConfigGet()
 * OUTPUT:  None.
 *
 * RETURN:
-*       value =MV_ETH_COMPLEX_GE_MAC0_COMPHY_1/2/3 if lanes 1/2/3 are SGMII-0 (adaptively)
-*       or -1 if none of them is SGMII-0
+*      MV_TRUE if SGMII settings are valid and Enabled only for a single lane
 *
 *******************************************************************************/
-MV_ETH_COMPLEX_TOPOLOGY mvBoardLaneSGMIIGet()
+MV_BOOL mvBoardLaneSGMIIGet(MV_ETH_COMPLEX_TOPOLOGY *sgmiiConfig)
 {
-	MV_U32 laneConfig;
+	MV_U32 laneConfig = 0;
+	MV_BOOL isSgmiiLaneEnabled = MV_FALSE;
+
+	if (sgmiiConfig == NULL) {
+		mvOsPrintf("%s: Error: NULL pointer parameter\n", __func__);
+		return MV_FALSE;
+	}
+
+	/* Serdes lane board configuration is only for DB-6660  */
+	if (mvBoardIdGet() != DB_6660_ID)
+		return MV_FALSE;
+
 	/* Lane 1 */
-	laneConfig = mvCtrlSysConfigGet(MV_CONFIG_LANE1);
-	if (laneConfig == MV_ERROR)
-		return MV_ERROR;
-	else if (laneConfig == 0x1)
-		return MV_ETHCOMP_GE_MAC0_2_COMPHY_1;
+	if (mvCtrlSysConfigGet(MV_CONFIG_LANE1) == 0x1) {
+		laneConfig = MV_ETHCOMP_GE_MAC0_2_COMPHY_1;
+		isSgmiiLaneEnabled = MV_TRUE;
+	}
 	/* Lane 2 */
-	laneConfig = mvCtrlSysConfigGet(MV_CONFIG_LANE2);
-	if (laneConfig == MV_ERROR)
-		return MV_ERROR;
-	else if (laneConfig == 0x0)
-		return MV_ETHCOMP_GE_MAC0_2_COMPHY_2;
+	if (mvCtrlSysConfigGet(MV_CONFIG_LANE2) == 0x0) {
+		if (isSgmiiLaneEnabled == MV_FALSE) {
+			laneConfig = MV_ETHCOMP_GE_MAC0_2_COMPHY_2;
+			isSgmiiLaneEnabled = MV_TRUE;
+		} else /* SGMII was already set in the previous lanes */
+			laneConfig = -1;
+	}
 	/* Lane 3 */
-	laneConfig = mvCtrlSysConfigGet(MV_CONFIG_LANE3);
-	if (laneConfig == MV_ERROR)
-		return MV_ERROR;
-	else if (laneConfig == 0x1)
-		return MV_ETHCOMP_GE_MAC0_2_COMPHY_3;
+	if (mvCtrlSysConfigGet(MV_CONFIG_LANE3) == 0x1) {
+		if (isSgmiiLaneEnabled == MV_FALSE) {
+			laneConfig = MV_ETHCOMP_GE_MAC0_2_COMPHY_3;
+		} else /* SGMII was already set in the previous lanes */
+			laneConfig = -1;
+	}
 
-	mvOsPrintf("%s: Error: unexpected value for Serdes Lane board configuration\n", __func__);
-	return MV_ERROR;
+	/* if no Serdes lanes are configured to SGMII */
+	if (laneConfig == 0)
+		return MV_FALSE;
+
+	/* if more then 1 Serdes lanes are configured to SGMII */
+	if (laneConfig == -1) {
+		mvOsPrintf("%s: Error: Only one Serdes lanes can be configured to SGMII\n\n", __func__);
+		return MV_FALSE;
+	}
+
+	*sgmiiConfig = laneConfig;
+	return MV_TRUE;
 }
 
 /*******************************************************************************
@@ -1591,7 +1625,7 @@ MV_U8 mvBoardTdmSpiCsGet(MV_U8 devId)
 }
 
 /*******************************************************************************
-* mvBoardMppModuleTypePrint
+* mvBoardConfigurationPrint
 *
 * DESCRIPTION:
 *	Print on-board detected modules.
@@ -1606,7 +1640,7 @@ MV_U8 mvBoardTdmSpiCsGet(MV_U8 devId)
 *	None.
 *
 *******************************************************************************/
-MV_VOID mvBoardMppModuleTypePrint(MV_VOID)
+MV_VOID mvBoardConfigurationPrint(MV_VOID)
 {
 	MV_U32 ethConfig = mvBoardEthComplexConfigGet();
 
@@ -1620,6 +1654,15 @@ MV_VOID mvBoardMppModuleTypePrint(MV_VOID)
 	if (mvBoardIsLcdDviModuleConnected())
 		mvOsOutput("       LCD DVI module.\n");
 
+	/* Serdex configuration */
+	if (ethConfig & MV_ETHCOMP_GE_MAC0_2_COMPHY_1)
+		mvOsOutput("       SGMII0 on MAC0 [Lane1]\n");
+	if (ethConfig & MV_ETHCOMP_GE_MAC0_2_COMPHY_2)
+		mvOsOutput("       SGMII0 on MAC0 [Lane2]\n");
+	if (ethConfig & MV_ETHCOMP_GE_MAC0_2_COMPHY_3)
+		mvOsOutput("       SGMII0 on MAC0 [Lane3]\n");
+
+
 	/* Switch Module */
 	if ((ethConfig & MV_ETHCOMP_GE_MAC0_2_SW_P6) &&
 		!(ethConfig & MV_ETHCOMP_GE_MAC1_2_SW_P4))
@@ -1659,10 +1702,6 @@ MV_VOID mvBoardMppModuleTypePrint(MV_VOID)
 		if (ethConfig & MV_ETHCOMP_SW_P3_2_GE_PHY_P3)
 			mvOsOutput("       GE-PHY-3 Module on Switch port #3\n");
 	}
-
-
-
-
 }
 
 MV_VOID mvBoardOtherModuleTypePrint(MV_VOID)
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.h b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.h
index 31aff78..26cb1c9 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/boardEnv/mvBoardEnvLib.h
@@ -407,7 +407,7 @@ MV_U32 mvBoardGppConfigGet(void);
 MV_32 mvBoardTdmSpiModeGet(MV_VOID);
 MV_U8 mvBoardTdmDevicesCountGet(void);
 MV_U8 mvBoardTdmSpiCsGet(MV_U8 devId);
-MV_VOID mvBoardMppModuleTypePrint(MV_VOID);
+MV_VOID mvBoardConfigurationPrint(MV_VOID);
 MV_VOID mvBoardOtherModuleTypePrint(MV_VOID);
 MV_BOOL mvBoardIsGbEPortConnected(MV_U32 ethPortNum);
 MV_32 mvBoardGetDevicesNumber(MV_BOARD_DEV_CLASS devClass);
@@ -430,7 +430,7 @@ MV_STATUS mvBoardEthComplexInfoUpdate(MV_VOID);
 MV_VOID mvBoardConfigWrite(MV_VOID);
 MV_ETH_COMPLEX_TOPOLOGY mvBoardMac0ConfigGet(MV_VOID);
 MV_ETH_COMPLEX_TOPOLOGY mvBoardMac1ConfigGet(MV_VOID);
-MV_ETH_COMPLEX_TOPOLOGY mvBoardLaneSGMIIGet(MV_VOID);
+MV_BOOL mvBoardLaneSGMIIGet(MV_ETH_COMPLEX_TOPOLOGY *sgmiiConfig);
 MV_BOARD_BOOT_SRC mvBoardBootDeviceGroupSet(MV_VOID);
 MV_BOARD_BOOT_SRC mvBoardBootDeviceGet(MV_VOID);
 MV_U32 mvBoardBootAttrGet(MV_U32 satrBootDeviceValue, MV_U8 attrNum);
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
index 4bf1bc7..d40b0cf 100755
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.c
@@ -513,14 +513,15 @@ MV_U32 mvCtrlSysConfigGet(MV_CONFIG_TYPE_ID configField)
 	MV_BOARD_CONFIG_TYPE_INFO configInfo;
 
 	if (!mvBoardConfigAutoDetectEnabled()) {
-		mvOsPrintf("%s: Error reading board configuration - Auto detection is disabled\n", __func__);
+		mvOsPrintf("%s: Error  Failed to read board config (Auto detection disabled)\n", __func__);
 		return MV_ERROR;
 	}
 
 	if (configField < MV_CONFIG_TYPE_MAX_OPTION &&
 		mvBoardConfigTypeGet(configField, &configInfo) != MV_TRUE) {
-		mvOsPrintf("%s: Error: Requested board config is not valid for this board(%d)\n", __func__, configField);
-		return -1;
+		mvOsPrintf("%s: Error: Requested board config is invalid for this board" \
+				" (%d)\n", __func__, configField);
+		return MV_ERROR;
 	}
 
 	return boardOptionsConfig[configField];
diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h
index 6f79c11..bfebc58 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvLib.h
@@ -202,6 +202,13 @@ typedef enum {
 } MV_ETH_COMPLEX_TOPOLOGY;
 
 typedef enum {
+	MAC0_2_SW_P6		=	0x0,
+	MAC0_2_GE_PHY_P0	=	0x1,
+	MAC0_2_RGMII		=	0x2,
+	MAC0_2_SGMII		=	0x3,
+} MV_ETH_MAC0_CONFIG;
+
+typedef enum {
 	EPM_DEFAULT = 0x0,      /* RGMII */
 	EPM_MAC0_MII = 0x01,
 	EPM_MAC1_MII = 0x10,
-- 
1.7.5.4

