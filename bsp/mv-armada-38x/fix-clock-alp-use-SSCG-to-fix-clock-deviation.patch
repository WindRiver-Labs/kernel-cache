From ce89a865e53215406598fb3cbfebaf5da7d0e680 Mon Sep 17 00:00:00 2001
From: Kosta Zertsekel <konszert@marvell.com>
Date: Sat, 3 Aug 2013 15:30:48 +0300
Subject: [PATCH 0915/1825] fix: clock: alp: use SSCG to fix clock deviation

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit ff6069cb403a8e5e32889cc169a3de21d0c4dbfc

	Ported from commit 89cfc6d7fde74d7a930c0ff2f4e3b90643bf9826 (LSP 3.2.46)
	where it was tested on A375 board.

	When SSCG is enabled, its deviation from the expected L2/Fabric value
	is causing small but visible on longer periods of time delays.
	But if SSCG is enabled and a proper timer/counter value is inserted
	according to the correct function, then the deviation is ~20ppm.

Change-Id: I2d35955fbf1be864aa212edb73665513ddb7d3e7
Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2922
Reviewed-by: Igor Patrik <igorp@marvell.com>
Tested-by: Igor Patrik <igorp@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h       |    9 ++++
 arch/arm/mach-avantalp/time.c                      |   47 ++++++++++++++++++-
 2 files changed, 53 insertions(+), 3 deletions(-)

diff --git a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
index 82e4734..769ef8b 100644
--- a/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
+++ b/arch/arm/mach-avantalp/avanta_lp_family/ctrlEnv/mvCtrlEnvRegs.h
@@ -121,6 +121,15 @@ extern "C" {
 #define PMC_SATA_STOP_CLK_EN			(3 << PMC_SATA_STOP_CLK_OFFS)
 #define PMC_SATA_STOP_CLK_STOP			(0 << PMC_SATA_STOP_CLK_OFFS)
 
+/* SSCG Registers */
+#define	SSCG_CONF_REG				0x184D8
+#define	SSCG_CONF_MODE(reg)			(((reg) >> 16) & 0x3)
+#define	SSCG_SPREAD_DOWN			0x0
+#define	SSCG_SPREAD_UP				0x1
+#define	SSCG_SPREAD_CENTRAL			0x2
+#define	SSCG_CONF_LOW(reg)			(((reg) >> 8) & 0xFF)
+#define	SSCG_CONF_HIGH(reg)			((reg) & 0xFF)
+
 #define MPP_CONTROL_REG(id)                     (0x18000 + (id * 4))
 
 /* Sample at Reset */
diff --git a/arch/arm/mach-avantalp/time.c b/arch/arm/mach-avantalp/time.c
index 71c47e2..a952a6e 100644
--- a/arch/arm/mach-avantalp/time.c
+++ b/arch/arm/mach-avantalp/time.c
@@ -254,11 +254,52 @@ static void alp_clear_timer_config(void)
 	MV_REG_WRITE(TIMER_CAUSE, 0);
 }
 
-static void __init alp_timer_init(void)
+/*
+ * Workaround for the SSCG deviation issue.
+ * When the SSCG is in spread up or down a frequency swing
+ * should be calculated according to the correct frequency.
+ */
+static u32 __init alp_timer_rate_get(void)
 {
-	u32 rate;
+#ifdef CONFIG_MACH_AVANTA_LP_FPGA
+	return MV_FPGA_L2_CLK;
+#else
+	u32 target_freq, freq_swing, system_freq;
+	u32 sscg_reg;
+	int high_bound, low_bound, diff;
+
+	target_freq = mvBoardL2ClkGetRaw();
+
+	sscg_reg   = MV_REG_READ(SSCG_CONF_REG);
+	high_bound = SSCG_CONF_HIGH(sscg_reg);
+	low_bound  = SSCG_CONF_LOW(sscg_reg);
+	diff       = high_bound - low_bound;
+
+	/* Integer overflow should not happen */
+	if (diff <= 0)
+		freq_swing = 0;
+	else
+		freq_swing = diff * (target_freq / (96 * high_bound));
+
+	switch (SSCG_CONF_MODE(sscg_reg)) {
+	case SSCG_SPREAD_DOWN:
+		system_freq = target_freq - (freq_swing / 2);
+		break;
+	case SSCG_SPREAD_UP:
+		system_freq = target_freq + (freq_swing / 2);
+		break;
+	case SSCG_SPREAD_CENTRAL:
+	default:
+		system_freq = target_freq;
+	}
 
-	ca9_twd_rate = mvBoardL2ClkGetRaw();
+	return system_freq;
+#endif
+}
+
+static void __init alp_timer_init(void)
+{
+	ca9_twd_rate = alp_timer_rate_get();
 	mv_twd_rate = ca9_twd_rate / 2;
 
 	printk("Initializing AvantaLP SoC Timers\n");
-- 
1.7.5.4

