From e1f9436d3d25e711eee1dced03d96203c2eaff54 Mon Sep 17 00:00:00 2001
From: Yoni Farhadian <yonif@marvell.com>
Date: Thu, 8 Aug 2013 10:55:08 +0300
Subject: [PATCH 0940/1825] pp2: ethtool: support ring parameters set/get

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 8dbe82c80a1ad9d1c6676867b0eb5a72c318e255

	- Support ring parameters set/get via ethtool
	- Support both RX and TX
	- Changes all TXQs/RXQs

Change-Id: I9a6228fc8ecbe815ddd76e47240438957ce2264c
Signed-off-by: Yoni Farhadian <yonif@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2981
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c    |   17 +++++++++++++----
 1 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c
index 26140bd..19bf7bb 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tool.c
@@ -543,7 +543,7 @@ void mv_eth_tool_get_ringparam(struct net_device *netdev,
 
 	memset(ring, 0, sizeof(struct ethtool_ringparam));
 	ring->rx_pending = priv->rxq_ctrl[0].rxq_size;
-	/* TODO: ring->tx_pending = ? aggr? txq? per cpu? what about hwf? */
+	ring->tx_pending = priv->txq_ctrl[0].txq_size;
 }
 
 /******************************************************************************
@@ -562,12 +562,16 @@ int mv_eth_tool_set_ringparam(struct net_device *netdev,
 				 struct ethtool_ringparam *ring)
 {
 	struct eth_port *priv = MV_ETH_PRIV(netdev);
-	int i, rxq_size, netdev_running = 0;
+	int rxq, txp, txq, rxq_size, txq_size, hwf_size, netdev_running = 0;
 
 	if (ring->rx_jumbo_pending || ring->rx_mini_pending)
 		return -EINVAL;
 
 	rxq_size = MV_ALIGN_UP(ring->rx_pending, 16);
+	/* Set minimum of 32, to save space for HWF as well */
+	txq_size = MV_ALIGN_UP(ring->tx_pending, 32);
+	/* Set HWF size to half of total TXQ size */
+	hwf_size = txq_size >> 1;
 
 	if (netif_running(netdev))
 		netdev_running = 1;
@@ -576,8 +580,13 @@ int mv_eth_tool_set_ringparam(struct net_device *netdev,
 		mv_eth_stop(netdev);
 
 	if (rxq_size != priv->rxq_ctrl[0].rxq_size)
-		for (i = 0; i < priv->rxq_num; i++)
-			mv_eth_ctrl_rxq_size_set(priv->port, i, rxq_size);
+		for (rxq = 0; rxq < priv->rxq_num; rxq++)
+			mv_eth_ctrl_rxq_size_set(priv->port, rxq, rxq_size);
+
+	if (txq_size != priv->txq_ctrl[0].txq_size)
+		for (txp = 0; txp < priv->txp_num; txp++)
+			for (txq = 0; txq < CONFIG_MV_ETH_TXQ; txq++)
+				mv_eth_ctrl_txq_size_set(priv->port, txp, txq, txq_size, hwf_size);
 
 	if (netdev_running)
 		mv_eth_open(netdev);
-- 
1.7.5.4

