From f5cdbae469afbe2cfe847ad067275554d7c9012e Mon Sep 17 00:00:00 2001
From: Joe Zhou <shjzhou@marvell.com>
Date: Thu, 27 Mar 2014 08:13:12 +0800
Subject: [PATCH 1519/1825] fix: alp: add 25MHz support to watchdog timer for
 ALP A0

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 78bda78450412af47720aea4ef1af5ff2a13fd97

	The original implementation didn't enable 25MHz, now ALP A0 is using
	25MHz timing, so it is added now.
	In addition, add #ifdef CONFIG_ARCH_AVANTA_LP to include ALP
	specific code.

Change-Id: I4dc3d99518b002752e6ae629284ff1cccd6d1ba3
Signed-off-by: Joe Zhou <shjzhou@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6682
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/watchdog/orion_wdt.c |   32 ++++++++++++++++++++++----------
 1 files changed, 22 insertions(+), 10 deletions(-)

diff --git a/drivers/watchdog/orion_wdt.c b/drivers/watchdog/orion_wdt.c
index 78eb73c..223044a 100644
--- a/drivers/watchdog/orion_wdt.c
+++ b/drivers/watchdog/orion_wdt.c
@@ -29,16 +29,22 @@
 #ifdef CONFIG_ARCH_KIRKWOOD
 #include <mach/bridge-regs.h>
 #endif
-
+#ifdef CONFIG_ARCH_AVANTA_LP
+extern int mvCtrlRevGet(void);
+#endif
 /*
  * Watchdog timer block registers.
  */
 #define TIMER_CTRL		0x0000
+
 #ifdef CONFIG_ARCH_KIRKWOOD
 #define WDT_EN          0x0010
 #define WDT_VAL			0x0024
-#else
+#endif
+
+#ifdef CONFIG_ARCH_AVANTA_LP
 #define WDT_EN          0x0100
+#define WDT_25MHZ_EN    0x0400
 #define WDT_VAL			0x0034
 #define WDT_RSTOUTn_MASK    (INTER_REGS_VIRT_BASE + 0x20704)
 #define GLOBAL_WDT_RSTOUTn_EN    (1 << 8)
@@ -82,19 +88,23 @@ static void orion_wdt_enable(void)
 	reg = readl(BRIDGE_CAUSE);
 	reg &= ~WDT_INT_REQ;
 	writel(reg, BRIDGE_CAUSE);
+
+	/* Enable reset on watchdog */
+	reg = readl(RSTOUTn_MASK);
+	reg |= WDT_RESET_OUT_EN;
+	writel(reg, RSTOUTn_MASK);
 #endif
 
+#ifdef CONFIG_ARCH_AVANTA_LP
 	/* Enable watchdog timer */
 	reg = readl(wdt_reg + TIMER_CTRL);
-	reg |= WDT_EN;
+
+	if (mvCtrlRevGet() <= 2 /*MV_88F66X0_Z3_ID*/)
+		reg |= WDT_EN;
+	else
+		reg |= WDT_EN | WDT_25MHZ_EN;
 	writel(reg, wdt_reg + TIMER_CTRL);
 
-#ifdef CONFIG_ARCH_KIRKWOOD
-	/* Enable reset on watchdog */
-	reg = readl(RSTOUTn_MASK);
-	reg |= WDT_RESET_OUT_EN;
-	writel(reg, RSTOUTn_MASK);
-#else
 	/* Enable reset on watchdog */
 	reg = readl(WDT_RSTOUTn_MASK);
 	reg |= GLOBAL_WDT_RSTOUTn_EN;
@@ -122,7 +132,9 @@ static void orion_wdt_disable(void)
 	reg = readl(RSTOUTn_MASK);
 	reg &= ~WDT_RESET_OUT_EN;
 	writel(reg, RSTOUTn_MASK);
-#else
+#endif
+
+#ifdef CONFIG_ARCH_AVANTA_LP
 	/* Disable reset on watchdog */
 	reg = readl(WDT_RSTOUTn_MASK);
 	reg &= ~GLOBAL_WDT_RSTOUTn_EN;
-- 
1.7.5.4

