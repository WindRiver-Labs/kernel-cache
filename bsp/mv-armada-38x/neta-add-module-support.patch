From 904e7dff6a6920fc9f0513296ce2fffed3912b0c Mon Sep 17 00:00:00 2001
From: Yoni Farhadia <yonif@marvell.com>
Date: Sun, 15 Sep 2013 11:03:04 +0200
Subject: [PATCH 0988/1825] neta: add module support

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 8935116dc2f7643fa669040e1839d3dcf736565a

	gateway is not supported for module

Change-Id: I82d035ccedfedd30a2617d3b6ef44a5c23d9c19b
Signed-off-by: Yoni Farhadia <yonif@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-armada370/export.c                   |    1 +
 arch/arm/mach-armadaxp/export.c                    |    6 +-
 arch/arm/plat-armada/Kconfig                       |    2 +-
 .../plat-armada/mv_drivers_lsp/mv_neta/Makefile    |    3 +
 .../mv_drivers_lsp/mv_neta/bm/bm_sysfs.c           |   39 +++------
 .../mv_drivers_lsp/mv_neta/hwf/hwf_sysfs.c         |   41 +++------
 .../mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c       |   36 ++------
 .../mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c      |   11 +--
 .../mv_drivers_lsp/mv_neta/net_dev/mv_eth_switch.c |    1 -
 .../mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c  |   34 ++------
 .../mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.h  |   57 ++++++++++++
 .../mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c     |   91 +++++++++++++++++++-
 .../mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h     |    5 +-
 .../mv_drivers_lsp/mv_neta/net_dev/mv_pon_sysfs.c  |   39 +++------
 .../mv_drivers_lsp/mv_neta/pmt/pmt_sysfs.c         |   39 +++------
 .../mv_drivers_lsp/mv_neta/pnc/pnc_sysfs.c         |   45 +++-------
 .../mv_drivers_lsp/mv_neta/pnc/wol_sysfs.c         |   31 ++-----
 17 files changed, 244 insertions(+), 237 deletions(-)
 create mode 100644 arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.h

diff --git a/arch/arm/mach-armada370/export.c b/arch/arm/mach-armada370/export.c
index 19de9a2..a78fbb5 100644
--- a/arch/arm/mach-armada370/export.c
+++ b/arch/arm/mach-armada370/export.c
@@ -37,6 +37,7 @@ EXPORT_SYMBOL(mv_early_printk);
 EXPORT_SYMBOL(mvCtrlPwrClckGet);
 EXPORT_SYMBOL(mvCtrlPwrClckSet);
 EXPORT_SYMBOL(mvCtrlModelRevGet);
+EXPORT_SYMBOL(mvCtrlAddrWinInfoGet);
 EXPORT_SYMBOL(mvTclk);
 EXPORT_SYMBOL(mvSysclk);
 EXPORT_SYMBOL(mvCtrlModelGet);
diff --git a/arch/arm/mach-armadaxp/export.c b/arch/arm/mach-armadaxp/export.c
index dfcba5d..93a468d 100644
--- a/arch/arm/mach-armadaxp/export.c
+++ b/arch/arm/mach-armadaxp/export.c
@@ -37,6 +37,7 @@ EXPORT_SYMBOL(mv_early_printk);
 EXPORT_SYMBOL(mvCtrlPwrClckGet);
 EXPORT_SYMBOL(mvCtrlPwrClckSet);
 EXPORT_SYMBOL(mvCtrlModelRevGet);
+EXPORT_SYMBOL(mvCtrlAddrWinInfoGet);
 EXPORT_SYMBOL(mvTclk);
 EXPORT_SYMBOL(mvSysclk);
 EXPORT_SYMBOL(mvCtrlModelGet);
@@ -208,11 +209,6 @@ EXPORT_SYMBOL(TRC_START);
 EXPORT_SYMBOL(TRC_RELEASE);
 #endif
 
-#ifdef CONFIG_MV_ETH_BM
-#include "bm/mvBm.h"
-EXPORT_SYMBOL(mvBmVirtBase);
-#endif
-
 #include "mvList.h"
 EXPORT_SYMBOL(mvListCreate);
 EXPORT_SYMBOL(mvListDestroy);
diff --git a/arch/arm/plat-armada/Kconfig b/arch/arm/plat-armada/Kconfig
index 4bb4499..d212e2f 100644
--- a/arch/arm/plat-armada/Kconfig
+++ b/arch/arm/plat-armada/Kconfig
@@ -467,7 +467,7 @@ source arch/arm/plat-armada/mv_drivers_lsp/mv_network/Kconfig
 endif
 
 config MV_ETH_NETA
-	bool "NETA driver"
+	tristate "NETA driver"
 	depends on ARCH_FEROCEON_KW2 || ARCH_ARMADA_XP || ARCH_ARMADA370
 	default y
 	help
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/Makefile b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/Makefile
index b95cc75..facb14e 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/Makefile
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/Makefile
@@ -31,6 +31,9 @@ endif
 
 ifeq ($(CONFIG_MV_ETH_BM),y)
 mv_neta-objs += $(NETA_BM_DIR)/mvBm.o bm/bm_sysfs.o bm/mv_eth_bm.o
+endif
+
+ifeq ($(CONFIG_MV_ETH_HWF),y)
 mv_neta-objs += hwf/hwf_bm.o
 endif
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/bm/bm_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/bm/bm_sysfs.c
index 7698e27..7ae22cd 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/bm/bm_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/bm/bm_sysfs.c
@@ -121,34 +121,21 @@ static struct attribute_group bm_group = {
 	.attrs = bm_attrs,
 };
 
-int __devinit bm_sysfs_init(void)
+int mv_neta_bm_sysfs_init(struct kobject *neta_kobj)
 {
-		int err;
-		struct device *pd;
-
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		if (!pd) {
-			platform_device_register_simple("neta", -1, NULL, 0);
-			pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		}
-
-		if (!pd) {
-			printk(KERN_ERR "%s: cannot find neta device\n", __func__);
-			pd = &platform_bus;
-		}
-
-		err = sysfs_create_group(&pd->kobj, &bm_group);
-		if (err) {
-			printk(KERN_INFO "sysfs group failed %d\n", err);
-			goto out;
-		}
-out:
-		return err;
+	int err;
+
+	err = sysfs_create_group(neta_kobj, &bm_group);
+	if (err)
+		printk(KERN_INFO "sysfs group %s failed %d\n", bm_group.name, err);
+
+	return err;
 }
 
-module_init(bm_sysfs_init);
+int mv_neta_bm_sysfs_exit(struct kobject *neta_kobj)
+{
+	sysfs_remove_group(neta_kobj, &bm_group);
 
-MODULE_AUTHOR("Dmitri Epshtein");
-MODULE_DESCRIPTION("BM for Marvell NetA");
-MODULE_LICENSE("GPL");
+	return 0;
+}
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/hwf/hwf_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/hwf/hwf_sysfs.c
index a86bbe2..308ea1a 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/hwf/hwf_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/hwf/hwf_sysfs.c
@@ -39,7 +39,7 @@ static ssize_t hwf_help(char *buf)
 {
 	int off = 0;
 
-	off += mvOsSPrintf(buf+off, "cat                      help    - print this help\n");
+	off += mvOsSPrintf(buf+off, "cat                      help  - print this help\n");
 #ifndef CONFIG_MV_ETH_BM_CPU
 	off += mvOsSPrintf(buf+off, "cat                      bm    - print HWF BM information\n");
 #endif
@@ -134,34 +134,21 @@ static struct attribute_group hwf_group = {
 	.attrs = hwf_attrs,
 };
 
-int __devinit hwf_sysfs_init(void)
+int mv_neta_hwf_sysfs_init(struct kobject *neta_kobj)
 {
-		int err;
-		struct device *pd;
-
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		if (!pd) {
-			platform_device_register_simple("neta", -1, NULL, 0);
-			pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		}
-
-		if (!pd) {
-			printk(KERN_ERR "%s: cannot find neta device\n", __func__);
-			pd = &platform_bus;
-		}
-
-		err = sysfs_create_group(&pd->kobj, &hwf_group);
-		if (err) {
-			printk(KERN_INFO "sysfs group failed %d\n", err);
-			goto out;
-		}
-out:
-		return err;
+	int err;
+
+	err = sysfs_create_group(neta_kobj, &hwf_group);
+	if (err)
+		printk(KERN_INFO "sysfs group %s failed %d\n", hwf_group.name, err);
+
+	return err;
 }
 
-module_init(hwf_sysfs_init);
+int mv_neta_hwf_sysfs_exit(struct kobject *neta_kobj)
+{
+	sysfs_remove_group(neta_kobj, &hwf_group);
 
-MODULE_AUTHOR("Dmitri Epshtein");
-MODULE_DESCRIPTION("HWF for Marvell NetA MV65xxx");
-MODULE_LICENSE("GPL");
+	return 0;
+}
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c
index 54ecced..4a9479d 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/l2fw_sysfs.c
@@ -233,36 +233,20 @@ static struct attribute_group l2fw_group = {
 	.attrs = l2fw_attrs,
 };
 
-#ifdef CONFIG_MV_ETH_L2FW
-int __devinit mv_l2fw_sysfs_init(void)
+int mv_neta_l2fw_sysfs_init(struct kobject *neta_kobj)
 {
-	int err;
-	struct device *pd;
+	int err = 0;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	if (!pd) {
-		platform_device_register_simple("neta", -1, NULL, 0);
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	}
-
-	if (!pd) {
-		printk(KERN_ERR "%s: cannot find neta device\n", __func__);
-		pd = &platform_bus;
-	}
+	err = sysfs_create_group(neta_kobj, &l2fw_group);
+	if (err)
+		printk(KERN_INFO "sysfs group %s failed %d\n", l2fw_group.name, err);
 
-	err = sysfs_create_group(&pd->kobj, &l2fw_group);
-	if (err) {
-		printk(KERN_ERR "sysfs group failed %d\n", err);
-		goto out;
-	}
-out:
 	return err;
 }
-#endif
-
-module_init(mv_l2fw_sysfs_init);
 
-MODULE_AUTHOR("Rami Rosen");
-MODULE_DESCRIPTION("sysfs for marvell l2fw");
-MODULE_LICENSE("GPL");
+int mv_neta_l2fw_sysfs_exit(struct kobject *neta_kobj)
+{
+	sysfs_remove_group(neta_kobj, &l2fw_group);
 
+	return 0;
+}
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
index a7c94f0..c0d86c6 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/l2fw/mv_eth_l2fw.c
@@ -845,8 +845,7 @@ static inline int mv_eth_l2fw_rx(struct eth_port *pp, int rx_todo, int rxq)
 	return rx_done;
 }
 
-#ifdef CONFIG_MV_ETH_L2FW
-int __devinit mv_l2fw_init(void)
+int mv_l2fw_init(void)
 {
 	int size, port;
 	MV_U32 bytes;
@@ -900,11 +899,3 @@ oom1:
 	return -ENOMEM;
 
 }
-#endif
-
-module_init(mv_l2fw_init);
-
-MODULE_AUTHOR("Rami Rosen");
-MODULE_DESCRIPTION("l2fw module");
-MODULE_LICENSE("GPL");
-
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_switch.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_switch.c
index fe676e1..c811da4 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_switch.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_switch.c
@@ -664,7 +664,6 @@ void mv_eth_switch_update_link(unsigned int p, unsigned int link_up)
 		}
 	}
 }
-
 #endif /* CONFIG_MV_ETH_SWITCH_LINK */
 
 int     mv_eth_switch_port_add(struct net_device *dev, int port)
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
index 55f2ef1..0e1860d 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
@@ -35,6 +35,7 @@ disclaimer.
 
 #include "gbe/mvNeta.h"
 #include "mv_netdev.h"
+#include "mv_eth_sysfs.h"
 
 static ssize_t mv_eth_help(char *buf)
 {
@@ -598,43 +599,22 @@ static struct attribute_group mv_eth_group = {
 	.attrs = mv_eth_attrs,
 };
 
-int mv_eth_sysfs_init(void)
+int mv_neta_gbe_sysfs_init(struct kobject *neta_kobj)
 {
 	int err;
-	struct device *pd;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	if (!pd) {
-		platform_device_register_simple("neta", -1, NULL, 0);
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	}
-
-	if (!pd) {
-		printk(KERN_ERR"%s: cannot find neta device\n", __func__);
-		pd = &platform_bus;
-	}
-
-	err = sysfs_create_group(&pd->kobj, &mv_eth_group);
+	err = sysfs_create_group(neta_kobj, &mv_eth_group);
 	if (err) {
 		printk(KERN_INFO "sysfs group failed %d\n", err);
-		goto out;
+		return err;
 	}
-out:
+
 	return err;
 }
 
-int mv_eth_sysfs_exit(void)
+int mv_neta_gbe_sysfs_exit(struct kobject *neta_kobj)
 {
-	struct device *pd;
-
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	if (!pd) {
-		printk(KERN_ERR"%s: cannot find neta device\n", __func__);
-		return -1;
-	}
-
-	sysfs_remove_group(&pd->kobj, &mv_eth_group);
-/*	remove_group_kobj_put(&pd->kobj, &mv_eth_group); */
+	sysfs_remove_group(neta_kobj, &mv_eth_group);
 
 	return 0;
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.h
new file mode 100644
index 0000000..1740e23
--- /dev/null
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.h
@@ -0,0 +1,57 @@
+/*******************************************************************************
+Copyright (C) Marvell International Ltd. and its affiliates
+
+This software file (the "File") is owned and distributed by Marvell
+International Ltd. and/or its affiliates ("Marvell") under the following
+alternative licensing terms.  Once you have made an election to distribute the
+File under one of the following license alternatives, please (i) delete this
+introductory statement regarding license alternatives, (ii) delete the two
+license alternatives that you have not elected to use and (iii) preserve the
+Marvell copyright notice above.
+
+
+********************************************************************************
+Marvell GPL License Option
+
+If you received this File from Marvell, you may opt to use, redistribute and/or
+modify this File in accordance with the terms and conditions of the General
+Public License Version 2, June 1991 (the "GPL License"), a copy of which is
+available along with the File in the license.txt file or by writing to the Free
+Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
+on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
+
+THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
+WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
+DISCLAIMED.  The GPL License provides additional details about this warranty
+disclaimer.
+*******************************************************************************/
+#ifndef __mv_eth_sysfs_h__
+#define __mv_eth_sysfs_h__
+
+
+/* Subdirectories of neta menu */
+
+int mv_neta_pme_sysfs_init(struct kobject *pp2_kobj);
+int mv_neta_pme_sysfs_exit(struct kobject *pp2_kobj);
+
+int mv_neta_gbe_sysfs_init(struct kobject *pp2_kobj);
+int mv_neta_gbe_sysfs_exit(struct kobject *pp2_kobj);
+
+int mv_neta_bm_sysfs_init(struct kobject *gbe_kobj);
+int mv_neta_bm_sysfs_exit(struct kobject *gbe_kobj);
+int mv_neta_hwf_sysfs_init(struct kobject *gbe_kobj);
+int mv_neta_hwf_sysfs_exit(struct kobject *gbe_kobj);
+int mv_neta_pnc_sysfs_init(struct kobject *gbe_kobj);
+int mv_neta_pnc_sysfs_exit(struct kobject *gbe_kobj);
+
+int mv_neta_wol_sysfs_init(struct kobject *gbe_kobj);
+int mv_neta_wol_sysfs_exit(struct kobject *gbe_kobj);
+
+int mv_neta_pon_sysfs_init(struct kobject *gbe_kobj);
+int mv_neta_pon_sysfs_exit(struct kobject *gbe_kobj);
+#ifdef CONFIG_MV_ETH_L2FW
+int mv_neta_l2fw_sysfs_init(struct kobject *pp2_kobj);
+int mv_neta_l2fw_sysfs_exit(struct kobject *pp2_kobj);
+#endif
+
+#endif /* __mv_eth_sysfs_h__ */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
index e984856..4799f36 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.c
@@ -44,8 +44,6 @@ disclaimer.
 #include "boardEnv/mvBoardEnvLib.h"
 #include "ctrlEnv/mvCtrlEnvLib.h"
 #include "eth-phy/mvEthPhy.h"
-#include "mvSysEthPhyApi.h"
-#include "mvSysNetaApi.h"
 
 #include "gbe/mvNeta.h"
 #include "bm/mvBm.h"
@@ -53,11 +51,13 @@ disclaimer.
 #include "pnc/mvTcam.h"
 #include "pmt/mvPmt.h"
 
+#ifdef CONFIG_MV_INCLUDE_SWITCH
 #include "mv_switch.h"
+#endif
 
 #include "mv_netdev.h"
 #include "mv_eth_tool.h"
-
+#include "mv_eth_sysfs.h"
 #include "cpu/mvCpuCntrs.h"
 
 #ifdef CONFIG_MV_CPU_PERF_CNTRS
@@ -69,6 +69,7 @@ MV_CPU_CNTRS_EVENT	*event4 = NULL;
 MV_CPU_CNTRS_EVENT	*event5 = NULL;
 #endif /* CONFIG_MV_CPU_PERF_CNTRS */
 
+static struct  platform_device *neta_sysfs;
 unsigned int ext_switch_port_mask = 0;
 
 void handle_group_affinity(int port);
@@ -3382,7 +3383,6 @@ static int mv_eth_resume_rxq_txq(struct eth_port *pp, int mtu)
 			mv_eth_rx_pkts_coal_set(pp->port, rxq, pp->rxq_ctrl[rxq].rxq_pkts_coal);
 			mv_eth_rx_time_coal_set(pp->port, rxq, pp->rxq_ctrl[rxq].rxq_time_coal);
 
-
 #if defined(CONFIG_MV_ETH_BM_CPU)
 			/* Enable / Disable - BM support */
 			if (pp->pool_long && pp->pool_short) {
@@ -3669,6 +3669,85 @@ int	mv_eth_wol_mode_set(int port, int mode)
 	return MV_OK;
 }
 
+static void mv_eth_sysfs_exit(void)
+{
+	struct device *pd;
+
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
+	if (!pd) {
+		printk(KERN_ERR"%s: cannot find pp2 device\n", __func__);
+		return;
+	}
+#ifdef CONFIG_MV_ETH_L2FW
+	mv_neta_l2fw_sysfs_exit(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_PNC_WOL
+	mv_neta_wol_sysfs_exit(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_PNC
+	mv_neta_pnc_sysfs_exit(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_BM
+	mv_neta_bm_sysfs_exit(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_HWF
+	mv_neta_hwf_sysfs_exit(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_PON
+	mv_neta_pon_sysfs_exit(&pd->kobj);
+#endif
+	platform_device_unregister(neta_sysfs);
+}
+
+static int mv_eth_sysfs_init(void)
+{
+	struct device *pd;
+
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
+	if (!pd) {
+		neta_sysfs = platform_device_register_simple("neta", -1, NULL, 0);
+		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
+	}
+
+	if (!pd) {
+		printk(KERN_ERR"%s: cannot find neta device\n", __func__);
+		return -1;
+	}
+
+	mv_neta_gbe_sysfs_init(&pd->kobj);
+
+#ifdef CONFIG_MV_PON
+	mv_neta_pon_sysfs_init(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_HWF
+	mv_neta_hwf_sysfs_init(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_BM
+	mv_neta_bm_sysfs_init(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_PNC
+	mv_neta_pnc_sysfs_init(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_PNC_WOL
+	mv_neta_wol_sysfs_init(&pd->kobj);
+#endif
+
+#ifdef CONFIG_MV_ETH_L2FW
+	mv_neta_l2fw_sysfs_init(&pd->kobj);
+#endif
+
+	return 0;
+}
+
 /***********************************************************
  * mv_eth_shared_probe --                                         *
  *   main driver initialization. loading the interfaces.   *
@@ -3731,6 +3810,10 @@ static int	mv_eth_shared_probe(struct mv_neta_pdata *plat_data)
 		printk(KERN_ERR "%s: PNC control is disabled\n", __func__);
 #endif /* CONFIG_MV_ETH_PNC */
 
+#ifdef CONFIG_MV_ETH_L2FW
+	mv_l2fw_init();
+#endif
+
 	mv_eth_cpu_counters_init();
 
 	mv_eth_initialized = 1;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h
index 6bc1ff2..65d0842 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_netdev.h
@@ -732,8 +732,6 @@ int     mv_eth_switch_port_del(struct net_device *dev, int port);
 /******************************************************
  * Function prototypes --                             *
  ******************************************************/
-int         mv_eth_sysfs_init(void);
-int         mv_eth_sysfs_exit(void);
 int         mv_eth_stop(struct net_device *dev);
 int         mv_eth_change_mtu(struct net_device *dev, int mtu);
 int         mv_eth_check_mtu_internals(struct net_device *dev, int mtu);
@@ -860,6 +858,9 @@ MV_STATUS mv_eth_hwf_bm_create(int port, int mtuPktSize);
 void      mv_hwf_bm_dump(void);
 #endif /* CONFIG_MV_ETH_HWF && !CONFIG_MV_ETH_BM_CPU */
 
+#ifdef CONFIG_MV_ETH_L2FW
+int         mv_l2fw_init(void);
+#endif
 
 #ifdef CONFIG_MV_ETH_NFP
 int         mv_eth_nfp_ctrl(struct net_device *dev, int en);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_pon_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_pon_sysfs.c
index 647d620..089e59a 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_pon_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_pon_sysfs.c
@@ -148,34 +148,21 @@ static struct attribute_group mv_pon_group = {
 	.attrs = mv_pon_attrs,
 };
 
-int __devinit mv_pon_sysfs_init(void)
+int mv_neta_pon_sysfs_init(struct kobject *neta_kobj)
 {
-		int err;
-		struct device *pd;
-
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		if (!pd) {
-			platform_device_register_simple("neta", -1, NULL, 0);
-			pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		}
-
-		if (!pd) {
-			printk(KERN_ERR"%s: cannot find neta device\n", __func__);
-			pd = &platform_bus;
-		}
-
-		err = sysfs_create_group(&pd->kobj, &mv_pon_group);
-		if (err) {
-			printk(KERN_INFO "sysfs group failed %d\n", err);
-			goto out;
-		}
-out:
-		return err;
+	int err;
+
+	err = sysfs_create_group(neta_kobj, &pon_group);
+	if (err)
+		printk(KERN_INFO "sysfs group %s failed %d\n", pon_group.name, err);
+
+	return err;
 }
 
-module_init(mv_pon_sysfs_init);
+int mv_neta_pon_sysfs_exit(struct kobject *neta_kobj)
+{
+	sysfs_remove_group(pp2_kobj, &plcr_group);
 
-MODULE_AUTHOR("Dmitri Epshtein");
-MODULE_DESCRIPTION("sysfs for Marvell PON");
-MODULE_LICENSE("GPL");
+	return 0;
+}
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pmt/pmt_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pmt/pmt_sysfs.c
index 7684237..90bc6a7 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pmt/pmt_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pmt/pmt_sysfs.c
@@ -269,34 +269,21 @@ static struct attribute_group pmt_group = {
 	.attrs = pmt_attrs,
 };
 
-int __devinit pmt_sysfs_init(void)
+int mv_neta_pme_sysfs_init(struct kobject *pp2_kobj)
 {
-		int err;
-		struct device *pd;
-
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		if (!pd) {
-			platform_device_register_simple("neta", -1, NULL, 0);
-			pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-		}
-
-		if (!pd) {
-			printk(KERN_ERR"%s: cannot find neta device\n", __func__);
-			pd = &platform_bus;
-		}
-
-		err = sysfs_create_group(&pd->kobj, &pmt_group);
-		if (err) {
-			printk(KERN_INFO "sysfs group failed %d\n", err);
-			goto out;
-		}
-out:
-		return err;
+	int err;
+
+	err = sysfs_create_group(neta_kobj, &pme_group);
+	if (err)
+		printk(KERN_INFO "sysfs group %s failed %d\n", pmt_group.name, err);
+
+	return err;
 }
 
-module_init(pmt_sysfs_init);
+int mv_neta_pme_sysfs_exit(struct kobject *neta_kobj)
+{
+	sysfs_remove_group(neta_kobj, &pme_group);
 
-MODULE_AUTHOR("Dima Epshtein");
-MODULE_DESCRIPTION("PMT for Marvell NetA MV65xxx");
-MODULE_LICENSE("GPL");
+	return 0;
+}
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/pnc_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/pnc_sysfs.c
index b2e8d5d..58116ad 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/pnc_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/pnc_sysfs.c
@@ -46,7 +46,6 @@ extern int __devinit rxq_map_sysfs_init(struct kobject *kobj);
 #endif /* CONFIG_MV_ETH_PNC_L3_FLOW */
 
 static struct tcam_entry te;
-static struct kobject *pnc_kobj;
 
 static ssize_t tcam_help(char *buf)
 {
@@ -375,48 +374,26 @@ static struct attribute *pnc_attrs[] = {
 };
 
 static struct attribute_group pnc_group = {
+	.name = "pnc",
 	.attrs = pnc_attrs,
 };
 
-int __devinit pnc_sysfs_init(void)
+int mv_neta_pnc_sysfs_init(struct kobject *neta_kobj)
 {
 	int err;
-	struct device *pd;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	if (!pd) {
-		platform_device_register_simple("neta", -1, NULL, 0);
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	}
-
-	if (!pd) {
-		printk(KERN_ERR "%s: cannot find neta device\n", __func__);
-		pd = &platform_bus;
-	}
-
-	pnc_kobj = kobject_create_and_add("pnc", &pd->kobj);
-	if (!pnc_kobj) {
-		printk(KERN_INFO "could not create pnc kobject\n");
-		return -ENOMEM;
-	}
-
-	err = sysfs_create_group(pnc_kobj, &pnc_group);
-	if (err) {
-		printk(KERN_INFO "create sysfs pnc group failed %d\n", err);
-		goto out;
-	}
-
-#ifdef CONFIG_MV_ETH_PNC_L3_FLOW
-	rxq_map_sysfs_init(pnc_kobj);
-#endif /* CONFIG_MV_ETH_PNC_L3_FLOW */
+	err = sysfs_create_group(neta_kobj, &pnc_group);
+	if (err)
+		pr_err("sysfs group %s failed %d\n", pnc_group.name, err);
 
-out:
 	return err;
 }
 
-module_init(pnc_sysfs_init);
+int mv_neta_pnc_sysfs_exit(struct kobject *neta_kobj)
+{
+	sysfs_remove_group(neta_kobj, &pnc_group);
+
+	return 0;
+}
 
-MODULE_AUTHOR("Kostya Belezko");
-MODULE_DESCRIPTION("PNC for Marvell NetA MV65xxx");
-MODULE_LICENSE("GPL");
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/wol_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/wol_sysfs.c
index cb153df..4119543 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/wol_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/pnc/wol_sysfs.c
@@ -168,34 +168,21 @@ static struct attribute_group wol_group = {
 	.attrs = wol_attrs,
 };
 
-int __devinit wol_sysfs_init(void)
+int mv_neta_wol_sysfs_init(struct kobject *neta_kobj)
 {
 	int err;
-	struct device *pd;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	if (!pd) {
-		platform_device_register_simple("neta", -1, NULL, 0);
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "neta");
-	}
-
-	if (!pd) {
-		printk(KERN_ERR "%s: cannot find neta device\n", __func__);
-		pd = &platform_bus;
-	}
+	err = sysfs_create_group(neta_kobj, &wol_group);
+	if (err)
+		pr_err("sysfs group %s failed %d\n", wol_group.name, err);
 
-	err = sysfs_create_group(&pd->kobj, &wol_group);
-	if (err) {
-		printk(KERN_INFO "sysfs group failed %d\n", err);
-		goto out;
-	}
-out:
 	return err;
 }
 
-module_init(wol_sysfs_init);
+int mv_neta_wol_sysfs_exit(struct kobject *neta_kobj)
+{
+	sysfs_remove_group(neta_kobj, &wol_group);
 
-MODULE_AUTHOR("Dmitri Epshtein");
-MODULE_DESCRIPTION("WoL for Marvell NetA");
-MODULE_LICENSE("GPL");
+	return 0;
+}
 
-- 
1.7.5.4

