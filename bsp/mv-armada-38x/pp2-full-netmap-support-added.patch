From fcc81e1e09c12e2fca1559a012d6b8ac44f80452 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Thu, 24 Oct 2013 09:54:42 +0200
Subject: [PATCH 1061/1825] pp2: full netmap support added

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit f73f5040f917a4fd477b9758d622c52f4a33f97f

Change-Id: If32877ae460a13d3a4f3e3537bff4c97abdf9781
Reviewed-on: http://vgitil04.il.marvell.com:8080/3844
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../arm/plat-armada/mv_drivers_lsp/mv_pp2/Makefile |    3 +
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c    |    3 +-
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   69 ++++++++++++++++++--
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h      |    7 ++-
 4 files changed, 73 insertions(+), 9 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Makefile b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Makefile
index a0cad83..d5a7dc7 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Makefile
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/Makefile
@@ -48,5 +48,8 @@ mv_pp2-objs += l2fw/l2fw_sysfs.o l2fw/mv_eth_l2fw.o
 endif
 
 ccflags-y       += -I$(PLAT_PATH_I)/$(HAL_PP2_DIR)
+ifeq ($(NETMAP),y)
+ccflags-y       += -DCONFIG_NETMAP -I$(NETMAP_DIR) -I$(NETMAP_DIR)/../sys
+endif
 
 obj-$(CONFIG_MV_ETH_PP2) += mv_pp2.o
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
index a2cb47d..d09562e 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
@@ -48,7 +48,6 @@ disclaimer.
 
 extern unsigned int mv_eth_pnc_ctrl_en;
 
-static int mv_eth_start(struct net_device *dev);
 static int mv_eth_set_mac_addr_internals(struct net_device *dev, void *addr);
 
 /***********************************************************
@@ -57,7 +56,7 @@ static int mv_eth_set_mac_addr_internals(struct net_device *dev, void *addr);
  *   set hw defaults. fill rx buffers. restart phy link    *
  *   auto neg. set device link flags. report status.       *
  ***********************************************************/
-static int mv_eth_start(struct net_device *dev)
+int mv_eth_start(struct net_device *dev)
 {
 	struct eth_port *priv = MV_ETH_PRIV(dev);
 	int group;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 465c8c5..93a1fa1 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -143,6 +143,11 @@ int mv_eth_tx_tso(struct sk_buff *skb, struct net_device *dev, struct mv_eth_tx_
 			struct tx_queue *txq_ctrl, struct aggr_tx_queue *aggr_txq_ctrl);
 #endif
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#include <mv_pp2_netmap.h>
+#endif
+
+
 void mv_eth_ctrl_pnc(int en)
 {
 	mv_eth_pnc_ctrl_en = en;
@@ -494,6 +499,25 @@ int mv_eth_ctrl_dbg_flag(int port, u32 flag, u32 val)
 	return 0;
 }
 
+/* mv_eth_ctrl_pool_port_map_get					*
+ *     - Return ports map use this BM pool			*/
+int mv_eth_ctrl_pool_port_map_get(int pool)
+{
+	struct bm_pool *ppool;
+
+	if ((pool < 0) || (pool >= MV_ETH_BM_POOLS)) {
+		pr_err("%s: Invalid pool number (%d)\n", __func__, pool);
+		return -1;
+	}
+
+	ppool = &mv_eth_pool[pool];
+	if (ppool == NULL) {
+		pr_err("%s: BM pool %d is not initialized\n", __func__, pool);
+		return -1;
+	}
+	return ppool->port_map;
+}
+
 /* mv_eth_ctrl_pool_buf_num_set					*
  *     - Set number of buffers for BM pool			*
  *     - Add or remove buffers to this pool accordingly		*/
@@ -1568,7 +1592,13 @@ static inline int mv_eth_rx(struct eth_port *pp, int rx_todo, int rxq, struct na
 	struct sk_buff *skb;
 	__u32 bm;
 	struct bm_pool *ppool;
-
+#ifdef CONFIG_NETMAP
+	if (pp->flags & MV_ETH_F_IFCAP_NETMAP) {
+		int netmap_done;
+		if (netmap_rx_irq(pp->dev, 0, &netmap_done))
+			return 1; /* seems to be ignored */
+	}
+#endif /* CONFIG_NETMAP */
 	/* Get number of received packets */
 	rx_done = mvPp2RxqBusyDescNumGet(pp->port, rxq);
 	mvOsCacheIoSync();
@@ -2862,8 +2892,10 @@ int mv_eth_poll(struct napi_struct *napi, int budget)
 			mv_eth_adaptive_rx_update(pp);
 
 		/* Enable interrupts for all cpus belong to this group */
-		wmb();
-		mvPp2GbeCpuInterruptsEnable(pp->port, napi_group->cpu_mask);
+		if (!(pp->flags & MV_ETH_F_IFCAP_NETMAP)) {
+			wmb();
+			mvPp2GbeCpuInterruptsEnable(pp->port, napi_group->cpu_mask);
+		}
 	}
 	napi_group->cause_rx_tx = causeRxTx;
 
@@ -3123,6 +3155,10 @@ static int mv_eth_load_network_interfaces(struct platform_device *pdev)
 		mvPp2ClsHwPortDefConfig(phys_port, 0, FLOWID_DEF(phys_port), pp->first_rxq);
 	}
 
+#ifdef CONFIG_NETMAP
+	mv_pp2_netmap_attach(pp);
+#endif /* CONFIG_NETMAP */
+
 	/* Call mv_eth_open specifically for ports not connected to Linux netdevice */
 	if (!(pp->flags & MV_ETH_F_CONNECT_LINUX))
 		mv_eth_open(pp->dev);
@@ -3952,8 +3988,17 @@ int mv_eth_start_internals(struct eth_port *pp, int mtu)
 		} else
 			mvPp2RxqBmPoolSet(pp->port, rxq, pp->pool_short->pool, pp->pool_long->pool);
 
-		if (mvPp2RxqFreeDescNumGet(pp->port, rxq) == 0)
-			mv_eth_rxq_fill(pp, rxq, pp->rxq_ctrl[rxq].rxq_size);
+		if (!(pp->flags & MV_ETH_F_IFCAP_NETMAP)) {
+			if (mvPp2RxqFreeDescNumGet(pp->port, rxq) == 0)
+				mv_eth_rxq_fill(pp, rxq, pp->rxq_ctrl[rxq].rxq_size);
+		} else {
+			/*printk(KERN_ERR "%s :: run with netmap enable", __func__);*/
+			mvPp2RxqNonOccupDescAdd(pp->port, rxq, pp->rxq_ctrl[rxq].rxq_size);
+#ifdef CONFIG_NETMAP
+			if (pp2_netmap_rxq_init_buffers(pp, rxq))
+				return MV_ERROR;
+#endif
+		}
 	}
 
 	for (txp = 0; txp < pp->txp_num; txp++) {
@@ -3969,6 +4014,12 @@ int mv_eth_start_internals(struct eth_port *pp, int mtu)
 #ifdef CONFIG_MV_ETH_TXDONE_ISR
 			mv_eth_tx_done_ptks_coal_set(pp->port, txp, txq, txq_ctrl->txq_done_pkts_coal);
 #endif /* CONFIG_MV_ETH_TXDONE_ISR */
+#ifdef CONFIG_NETMAP
+		if (pp->flags & MV_ETH_F_IFCAP_NETMAP) {
+			if (pp2_netmap_txq_init_buffers(pp, txp, txq))
+				return MV_ERROR;
+		}
+#endif /* CONFIG_NETMAP */
 		}
 		mvPp2TxpMaxTxSizeSet(pp->port, txp, RX_PKT_SIZE(mtu));
 	}
@@ -5272,8 +5323,16 @@ int mv_eth_resume(struct platform_device *pdev)
 
 static int mv_eth_remove(struct platform_device *pdev)
 {
+#ifdef CONFIG_NETMAP
+	int port = pdev->id;
+	struct eth_port *pp = mv_eth_port_by_id(port);
+#endif
 	printk(KERN_INFO "Removing Marvell Ethernet Driver\n");
 	mv_eth_sysfs_exit();
+#ifdef CONFIG_NETMAP
+	if (pp->flags & MV_ETH_F_IFCAP_NETMAP)
+		netmap_detach(pp->dev);
+#endif /* CONFIG_NETMAP */
 	return 0;
 }
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
index ff15395..4e7f98a 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
@@ -219,13 +219,14 @@ struct port_stats {
 #define MV_ETH_F_RX_PKT_PREFETCH_BIT    2
 #define MV_ETH_F_CONNECT_LINUX_BIT      5 /* port is connected to Linux netdevice */
 #define MV_ETH_F_LINK_UP_BIT            6
+#define MV_ETH_F_IFCAP_NETMAP_BIT       15
 
 #define MV_ETH_F_STARTED                (1 << MV_ETH_F_STARTED_BIT)
 #define MV_ETH_F_RX_DESC_PREFETCH       (1 << MV_ETH_F_RX_DESC_PREFETCH_BIT)
 #define MV_ETH_F_RX_PKT_PREFETCH        (1 << MV_ETH_F_RX_PKT_PREFETCH_BIT)
 #define MV_ETH_F_CONNECT_LINUX          (1 << MV_ETH_F_CONNECT_LINUX_BIT)
 #define MV_ETH_F_LINK_UP                (1 << MV_ETH_F_LINK_UP_BIT)
-
+#define MV_ETH_F_IFCAP_NETMAP           (1 << MV_ETH_F_IFCAP_NETMAP_BIT)
 
 #ifdef CONFIG_MV_ETH_DEBUG_CODE
 /* Masks used for pp->dbg_flags */
@@ -768,6 +769,7 @@ static inline MV_U32 mv_eth_pool_get(int pool)
 /******************************************************
  * Function prototypes --                             *
  ******************************************************/
+int         mv_eth_start(struct net_device *dev);
 int         mv_eth_stop(struct net_device *dev);
 int         mv_eth_change_mtu(struct net_device *dev, int mtu);
 int         mv_eth_check_mtu_internals(struct net_device *dev, int mtu);
@@ -851,7 +853,8 @@ int	    mv_eth_ctrl_long_pool_set(int port, int pool);
 int	    mv_eth_ctrl_short_pool_set(int port, int pool);
 int	    mv_eth_ctrl_hwf_long_pool_set(int port, int pool);
 int	    mv_eth_ctrl_hwf_short_pool_set(int port, int pool);
-int         mv_eth_ctrl_set_poll_rx_weight(int port, u32 weight);
+int     mv_eth_ctrl_set_poll_rx_weight(int port, u32 weight);
+int     mv_eth_ctrl_pool_port_map_get(int pool);
 void        mv_eth_tx_desc_print(struct pp2_tx_desc *desc);
 void        mv_eth_pkt_print(struct eth_pbuf *pkt);
 void        mv_eth_rx_desc_print(struct pp2_rx_desc *desc);
-- 
1.7.5.4

