From 1721c61e088f2811aa9ad37a729a4cb4eaa3c8c0 Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Sun, 29 Jun 2014 19:08:47 -0400
Subject: [PATCH 1747/1825] fix: pp2: Free TXQ reserved descriptors when
 stopped

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit c79d38badfaa14dfc48f296c9daa180e239252a4

	- Relevant for JIRA bugs: SYSTEMSW-665 and SYSTEMSW-714

Change-Id: I16d61e698ca7113e9e36c98bdf993aa131dfc091
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8789
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   11 ++++++++++-
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c     |   10 +++++++---
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h     |   10 ++++++++++
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h |    8 ++++++--
 4 files changed, 33 insertions(+), 6 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 53a7017..46b7836 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -4389,7 +4389,8 @@ int mv_eth_txq_clean(int port, int txp, int txq)
 {
 	struct eth_port *pp;
 	struct tx_queue *txq_ctrl;
-	int msec, pending, tx_done;
+	struct txq_cpu_ctrl *txq_cpu_ptr;
+	int msec, pending, tx_done, cpu;
 
 	if (mvPp2TxpCheck(port, txp))
 		return -EINVAL;
@@ -4435,6 +4436,14 @@ int mv_eth_txq_clean(int port, int txp, int txq)
 		if (tx_done > 0)
 			mvOsPrintf(KERN_INFO "%s: port=%d, txp=%d txq=%d: Free %d untransmitted descriptors\n",
 				__func__, port, txp, txq, tx_done);
+
+		/* release all reserved descriptors */
+		mvPp2TxqFreeReservedDesc(port, txp, txq);
+
+		for_each_possible_cpu(cpu) {
+			txq_cpu_ptr = &txq_ctrl->txq_cpu[cpu];
+			txq_cpu_ptr->reserved_num = 0;
+		}
 	}
 	return 0;
 }
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
index 4646fc8..0fd9c9b 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
@@ -647,6 +647,8 @@ MV_PP2_PHYS_TXQ_CTRL *mvPp2TxqInit(int port, int txp, int txq, int descNum, int
 
 	mvPp2DescRingReset(qCtrl);
 
+	mvPp2TxqFreeReservedDesc(port, txp, txq);
+
 	/* Set Tx descriptors queue starting address */
 	/* indirect access */
 	mvPp2WrReg(MV_PP2_TXQ_NUM_REG, ptxq);
@@ -659,13 +661,15 @@ MV_PP2_PHYS_TXQ_CTRL *mvPp2TxqInit(int port, int txp, int txq, int descNum, int
 	/* Pending counter read - indirect access */
 	regVal = mvPp2RdReg(MV_PP2_TXQ_PENDING_REG);
 	if (regVal != 0) {
-		mvOsPrintf("port=%d, txp=%d txq=%d, ptxq=%d, pend=0x%08x - Pending packets\n",
-			port, txp, txq, ptxq, regVal);
+		mvOsPrintf("port=%d, txp=%d, txq=%d, ptxq=%d: pending=%u, reserved=%u\n",
+			port, txp, txq, ptxq,
+			((regVal & MV_PP2_TXQ_PENDING_MASK) >> MV_PP2_TXQ_PENDING_OFFSET),
+			((regVal & MV_PP2_TXQ_RESERVED_MASK) >> MV_PP2_TXQ_RESERVED_OFFSET));
 	}
 	/* Sent descriptors counter - direct access */
 	regVal = mvPp2RdReg(MV_PP2_TXQ_SENT_REG(ptxq));
 	if (regVal != 0) {
-		mvOsPrintf("port=%d, txp=%d txq=%d, ptxq=%d, sent=0x%08x - Sent packets\n",
+		mvOsPrintf("port=%d, txp=%d, txq=%d, ptxq=%d, sent=0x%08x - Sent packets\n",
 			port, txp, txq, ptxq, regVal);
 	}
 
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
index 1dea5bc0..acb1c51 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.h
@@ -441,6 +441,16 @@ static INLINE int mvPp2TxqAllocReservedDesc(int port, int txp, int txq, int num)
 	return (regVal & MV_PP2_TXQ_RSVD_REQ_DESC_MASK) >> MV_PP2_TXQ_RSVD_RSLT_OFFSET;
 }
 
+/* Free all descriptors reserved */
+static INLINE void mvPp2TxqFreeReservedDesc(int port, int txp, int txq)
+{
+	MV_U32 regVal, ptxq;
+
+	ptxq = MV_PPV2_TXQ_PHYS(port, txp, txq);
+	regVal = (ptxq << MV_PP2_TXQ_RSVD_CLR_Q_OFFSET);
+	mvPp2WrReg(MV_PP2_TXQ_RSVD_CLR_REG, regVal);
+}
+
 /* Get number of TXQ descriptors waiting to be transmitted by HW */
 static INLINE int mvPp2TxqPendDescNumGet(int port, int txp, int txq)
 {
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
index 7de8df6..ea3a623 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2GbeRegs.h
@@ -327,6 +327,10 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define MV_PP2_TXQ_PENDING_OFFSET		0
 #define MV_PP2_TXQ_PENDING_MASK			(0x3FFF << MV_PP2_TXQ_PENDING_OFFSET)
 
+#define MV_PP2_TXQ_RESERVED_OFFSET		16
+#define MV_PP2_TXQ_RESERVED_MASK		(0x3FFF << MV_PP2_TXQ_RESERVED_OFFSET)
+/*-------------------------------------------------------------------------------*/
+
 /*
    ppv2.1 field MV_PP2_TXQ_HWF_PENDING_OFFSET changed to MV_PP2_TXQ_RESERVED_DESC_OFFSET
    MAS 3.16
@@ -369,8 +373,8 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #define MV_PP2_TXQ_RSVD_CLR_REG			(MV_PP2_REG_BASE + 0x20b8)
 
-#define MV_PP2_TXQ_RSVD_CLR_OFFSET		16
-#define MV_PP2_TXQ_RSVD_CLR_MASK		(0xFF << MV_PP2_TXQ_RSVD_CLR_OFFSET)
+#define MV_PP2_TXQ_RSVD_CLR_Q_OFFSET		16
+#define MV_PP2_TXQ_RSVD_CLR_Q_MASK		(0xFF << MV_PP2_TXQ_RSVD_CLR_Q_OFFSET)
 /*-------------------------------------------------------------------------------*/
 
 /* Direct access - per TXQ, per CPU */
-- 
1.7.5.4

