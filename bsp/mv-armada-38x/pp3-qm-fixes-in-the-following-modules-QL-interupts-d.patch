From b364bd83d8cbd040205db1fc31036708b12d4924 Mon Sep 17 00:00:00 2001
From: Dovrat <dovrat@marvell.com>
Date: Thu, 8 May 2014 10:24:28 +0300
Subject: [PATCH 1643/1825] pp3: qm: fixes in the following modules: QL -
 interupts due to wrong calculation of offset in
 register update profile code move defines to H
 file REORODER - interupts due to wrong register
 address DQF - writing MACRO in a better way,
 passing values by value and not by reference
 General - removed drop and scheduler

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit d5b8a62510a59e82e5d5a193b33d9f3c3ac51f5b

Change-Id: I4c18aa2e89cc70eaa72b0a98bceffa7ae6702eef
Signed-off-by: Dovrat <dovrat@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7879
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yelena Krivosheev <yelena@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/qm/mv_qm.c      |  197 +++++++++++-----------
 drivers/net/ethernet/marvell/pp3/qm/mv_qm.h      |   62 ++++++-
 drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.c |   12 +-
 drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h |    7 +-
 4 files changed, 155 insertions(+), 123 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
index a20441f..677a7fd 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
@@ -579,12 +579,12 @@ int qm_ru_port_to_class_set(u32 input_port, u32 port_class, u32 port_pool)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((port_class < QM_CLASS_ARR_MIN)   || (port_class > QM_CLASS_ARR_MAX)) {
-		pr_err("port class %d is not in range %d .. %d\n", port_class, QM_CLASS_ARR_MIN, QM_CLASS_ARR_MAX);
+	if ((port_class < QM_CLASS_MIN)   || (port_class > QM_CLASS_MAX)) {
+		pr_err("port class %d is not in range %d .. %d\n", port_class, QM_CLASS_MIN, QM_CLASS_MAX);
 		return rc;
 	}
-	if ((port_pool  < QM_PORT_ARR_MIN)    || (port_pool  > QM_PORT_ARR_MAX)) {
-		pr_err("port pool %d is not in range %d .. %d\n", port_pool, QM_PORT_ARR_MIN, QM_PORT_ARR_MAX);
+	if ((port_pool  < QM_PORT_POOL_MIN)    || (port_pool  > QM_PORT_POOL_MAX)) {
+		pr_err("port pool %d is not in range %d .. %d\n", port_pool, QM_PORT_POOL_MIN, QM_PORT_POOL_MAX);
 		return rc;
 	}
 	if ((input_port < QM_INPUT_PORT_MIN) || (input_port > QM_INPUT_PORT_MAX)) {
@@ -811,6 +811,9 @@ int qm_dqf_port_credit_thr_set(u32 *port_credit_thr_arr)
 
 	if (qm_open_check())
 		return -EINVAL;
+	/*
+	 * There are no credits for PPC ports (0 to 2)
+	 */
 
 	for (port = QM_PORT_MAC_MIN; port <= QM_PORT_MAC_MAX; port++) {
 		reg_base_address =      qm.dqf.Data_FIFO_params_p;
@@ -825,7 +828,7 @@ int qm_dqf_port_credit_thr_set(u32 *port_credit_thr_arr)
 		if ((port_credit_thr_arr[port] % GRANULARITY_OF_16_BYTES) != 0)
 			return rc;
 		if ((port_credit_thr_arr[port] < QM_PORT_CREDIT_THR_ARR_MIN) ||
-			(port_credit_thr_arr[port] > QM_PORT_CREDIT_THR_ARR_MAX))
+			(port_credit_thr_arr[port] > QM_PORT_CREDIT_THR_ARR_MAX(data_fifo_depth_p)))
 			return rc;
 	}
 
@@ -877,7 +880,7 @@ int qm_dqf_port_ppc_map_def_set(void)
 
 	/* PPC */
 	for (port = QM_PORT_PPC_MIN; port <= QM_PORT_PPC_MAX; port++) {
-		rc = qm_dqf_port_ppc_map_set(&port_ppc_arr[port], port);
+		rc = qm_dqf_port_ppc_map_set(port_ppc_arr[port], port);
 		if (rc != OK)
 			return rc;
 	}
@@ -885,7 +888,7 @@ int qm_dqf_port_ppc_map_def_set(void)
 	return rc;
 }
 
-int qm_dqf_port_ppc_map_set(u32 *port_ppc, u32 port)
+int qm_dqf_port_ppc_map_set(u32 port_ppc, u32 port)
 {
 	int rc = -QM_INPUT_NOT_IN_RANGE;
 	struct dqf_PPC_port_map_p              reg_PPC_port_map_p;
@@ -894,8 +897,10 @@ int qm_dqf_port_ppc_map_set(u32 *port_ppc, u32 port)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((port          < QM_PORT_PPC_MIN) || (port          >  QM_PORT_PPC_MAX))
+	if ((port            <    QM_PORT_MIN) || (port            >    QM_PORT_MAX)) {
+		pr_err("port %d is not in range %d..%d\n", port, QM_PORT_MIN, QM_PORT_MAX);
 		return rc;
+	}
 
 	reg_base_address =      qm.dqf.PPC_port_map_p;
 	reg_size   =   qm_reg_size.dqf.PPC_port_map_p;
@@ -904,7 +909,7 @@ int qm_dqf_port_ppc_map_set(u32 *port_ppc, u32 port)
 	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_PPC_port_map_p);
 	if (rc != OK)
 		return rc;
-	reg_PPC_port_map_p.ppc_port_map_p = *port_ppc;
+	reg_PPC_port_map_p.ppc_port_map_p = port_ppc;
 	rc = qm_register_write(reg_base_address, reg_offset, reg_size, (u32 *)&reg_PPC_port_map_p);
 	return rc;
 }
@@ -1461,55 +1466,61 @@ int qm_ql_q_profile_def_set(void)
 	if (qm_open_check())
 		return -EINVAL;
 
-	for (queue = 0; queue <= 191; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_0;
-		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
-			return rc;
-	}
-	for (queue = 192; queue <= 223; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_1;
-		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
-			return rc;
-	}
-	for (queue = 224; queue <= 255; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_3;
-		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
-			return rc;
-	}
-	for (queue = 256; queue <= 287; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_4;
-		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
-			return rc;
-	}
-	for (queue = 288; queue <= 319; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_5;
-		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
-			return rc;
-	}
-	for (queue = 320; queue <= 415; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_0;
+	/* queue_profile holds back pressure profiles for each queue.
+	   The profile id range is 1 to 7.
+	   0 is invalid and indicates there is no profile.
+	   Profile 1 is profile 0 in in QL profile configuration, 2 is profile 1 in QL… and 7 is profile 6 in QL.
+	   queues that have a profile must be enqueued from eMac or hMac, eMac loopback is excluded.
+	   Default configuration:
+	   Q1: pointer = 1 (EMAC0 – profile 0)
+	   Q5:  pointer = 2 (EMAC1 – profile 1)
+	   Q9:  pointer =3 (EMAC2 – profile 2)
+	   Q13:  pointer=4 (EMAC3 – profile 3)
+	   Q17: pointer = 0 (loopback is excluded)
+	   Q21, 25: pointer = 0 (CMAC; no XOFF to CMAC)
+	   Q64-127: pointer = 6 (HMAC – profile 5)
+	   0-511 (except the above) pointer = 0     */
+
+	for (queue = 0; queue <= 63; queue++) {
+		if (queue == 1)
+			queue_profile = QM_QUEUE_PROFILE_0; /* emac0 - profile 0 */
+		if (queue == 5)
+			queue_profile = QM_QUEUE_PROFILE_1; /* emac1 - profile 1 */
+		if (queue == 9)
+			queue_profile = QM_QUEUE_PROFILE_2; /* emac2 - profile 2 */
+		if (queue == 13)
+			queue_profile = QM_QUEUE_PROFILE_3; /* emac3 - profile 3 */
+		if (queue == 17)
+			queue_profile = QM_QUEUE_PROFILE_INVALID; /* loopback is excluded */
+		if (queue == 21)
+			queue_profile = QM_QUEUE_PROFILE_INVALID; /* cMac - no XOFF*/
+		if (queue == 25)
+			queue_profile = QM_QUEUE_PROFILE_INVALID; /* cMac - no XOFF */
+		else
+			continue;
+
 		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
+		if (rc != OK) {
+			pr_err("qm_ql_q_profile_set failed for queue %d\n", queue);
 			return rc;
+		}
 	}
-	for (queue = 416; queue <= 447; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_6;
+	for (queue = 64; queue <= 127; queue++) {
+		queue_profile = QM_QUEUE_PROFILE_5; /* hMac - profile 5 */
 		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
+		if (rc != OK) {
+			pr_err("qm_ql_q_profile_set failed for queue %d\n", queue);
 			return rc;
+		}
 	}
-	for (queue = 448; queue <= 511; queue++) {
-		queue_profile = QM_QUEUE_PROFILE_0;
+	for (queue = 128; queue <= 511; queue++) {
+		queue_profile = QM_QUEUE_PROFILE_INVALID;
 		rc = qm_ql_q_profile_set(queue_profile, queue);
-		if (rc != OK)
+		if (rc != OK) {
+			pr_err("qm_ql_q_profile_set failed for queue %d\n", queue);
 			return rc;
+		}
 	}
-
 	return rc;
 }
 
@@ -1522,14 +1533,19 @@ int qm_ql_q_profile_set(u32 queue_profile, u32 queue)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((queue_profile < QM_QUEUE_PROFILE_MIN) || (queue_profile >  QM_QUEUE_PROFILE_MAX))
+	if ((queue_profile < QM_QUEUE_PROFILE_MIN) || (queue_profile >  QM_QUEUE_PROFILE_MAX)) {
+		pr_err("wrong queue profile number %d, not in range %d..%d\n",
+			queue_profile, QM_QUEUE_PROFILE_MIN, QM_QUEUE_PROFILE_MAX);
 		return rc;
-	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX))
+	}
+	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX)) {
+		pr_err("wrong queue number %d, not in range\n", queue);
 		return rc;
+	}
 
 	reg_base_address =      qm.ql.qptr;
 	reg_size   =   qm_reg_size.ql.qptr;
-	reg_offset = qm_reg_offset.ql.qptr * queue/8;
+	reg_offset = qm_reg_offset.ql.qptr * (queue/8);
 
 	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_qptr_entry);
 	if (rc != OK)
@@ -1576,43 +1592,7 @@ int qm_ql_thr_def_set(void)
 	if (qm_open_check())
 		return -EINVAL;
 
-/*
-#define QM_LOW_THRESHOLD_DEF	QM_THR_HI_DEF
-#define QM_QUEUE_PROFILE_INVALID			0x00000000	/ *    0 * /
-*/
-#define QM_QUEUE_PROFILE_0_LOW_THRESHOLD_DEF					0x0004B000	/* 300.0KB */
-#define QM_QUEUE_PROFILE_1_LOW_THRESHOLD_DEF					0x00007800	/*  30.0KB */
-#define QM_QUEUE_PROFILE_2_LOW_THRESHOLD_DEF					0x00007800	/*  30.0KB */
-#define QM_QUEUE_PROFILE_3_LOW_THRESHOLD_DEF					0x00003C00	/*  15.0KB */
-#define QM_QUEUE_PROFILE_4_LOW_THRESHOLD_DEF					0x00003C00	/*  15.0KB */
-#define QM_QUEUE_PROFILE_5_LOW_THRESHOLD_DEF					0x00000200	/*   0.5KB */
-#define QM_QUEUE_PROFILE_6_LOW_THRESHOLD_DEF					0x00000600	/*   1.5KB */
-
-#define QM_QUEUE_PROFILE_0_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* -1 */
-#define QM_QUEUE_PROFILE_1_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
-#define QM_QUEUE_PROFILE_2_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
-#define QM_QUEUE_PROFILE_3_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
-#define QM_QUEUE_PROFILE_4_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
-#define QM_QUEUE_PROFILE_5_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
-#define QM_QUEUE_PROFILE_6_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
-
-#define QM_QUEUE_PROFILE_0_HIGH_THRESHOLD_DEF					0x00064000	/* 400.0KB */
-#define QM_QUEUE_PROFILE_1_HIGH_THRESHOLD_DEF					0x0000A000	/*  40.0KB */
-#define QM_QUEUE_PROFILE_2_HIGH_THRESHOLD_DEF					0x0000A000	/*  40.0KB */
-#define QM_QUEUE_PROFILE_3_HIGH_THRESHOLD_DEF					0x00005000	/*  20.0KB */
-#define QM_QUEUE_PROFILE_4_HIGH_THRESHOLD_DEF					0x00005000	/*  20.0KB */
-#define QM_QUEUE_PROFILE_5_HIGH_THRESHOLD_DEF					0x00000400	/*   1.0KB */
-#define QM_QUEUE_PROFILE_6_HIGH_THRESHOLD_DEF					0x00000800	/*   2.0KB */
-
-#define QM_QUEUE_PROFILE_0_TRAFFIC_SOURCE_DEF					         0	/*    0 */
-#define QM_QUEUE_PROFILE_1_TRAFFIC_SOURCE_DEF					         0	/*    0 */
-#define QM_QUEUE_PROFILE_2_TRAFFIC_SOURCE_DEF					0x00000001	/*    1 */
-#define QM_QUEUE_PROFILE_3_TRAFFIC_SOURCE_DEF					0x00000002	/*    2 */
-#define QM_QUEUE_PROFILE_4_TRAFFIC_SOURCE_DEF					0x00000003	/*    3 */
-#define QM_QUEUE_PROFILE_5_TRAFFIC_SOURCE_DEF					0x00000004	/*    4 */
-#define QM_QUEUE_PROFILE_6_TRAFFIC_SOURCE_DEF					0x00000004	/*    4 */
-
-	/* Profile 0 high 400KB low 300KB pause 0xFFFFFF source 0 (emac0-10G) */
+	/* Profile 0 high 400KB low 300KB pause 0xFFFFFF source 0 (emac0) */
 	low_threshold	= QM_QUEUE_PROFILE_0_LOW_THRESHOLD_DEF;
 	pause_threshold	= QM_QUEUE_PROFILE_0_PAUSE_THRESHOLD_DEF;
 	high_threshold	= QM_QUEUE_PROFILE_0_HIGH_THRESHOLD_DEF;
@@ -1621,7 +1601,7 @@ int qm_ql_thr_def_set(void)
 	if (rc != OK)
 		return rc;
 
-	/* Profile 1 high 40KB low 30KB pause 0xFFFFFF source 0 (emac0-1G) */
+	/* Profile 1 high 40KB low 30KB pause 0xFFFFFF source 1 (emac1) */
 	low_threshold	= QM_QUEUE_PROFILE_1_LOW_THRESHOLD_DEF;
 	pause_threshold	= QM_QUEUE_PROFILE_1_PAUSE_THRESHOLD_DEF;
 	high_threshold	= QM_QUEUE_PROFILE_1_HIGH_THRESHOLD_DEF;
@@ -1630,7 +1610,7 @@ int qm_ql_thr_def_set(void)
 	if (rc != OK)
 		return rc;
 
-	/* Profile 2 high 40KB low 30KB pause 0xFFFFFF source 1 (emac1-1G) */
+	/* Profile 2 high 20KB low 15KB pause 0xFFFFFF source 2 (emac2) */
 	low_threshold	= QM_QUEUE_PROFILE_2_LOW_THRESHOLD_DEF;
 	pause_threshold	= QM_QUEUE_PROFILE_2_PAUSE_THRESHOLD_DEF;
 	high_threshold	= QM_QUEUE_PROFILE_2_HIGH_THRESHOLD_DEF;
@@ -1639,7 +1619,7 @@ int qm_ql_thr_def_set(void)
 	if (rc != OK)
 		return rc;
 
-	/* Profile 3 high 20KB low 15KB pause 0xFFFFFF source 2 (emac2-1G) */
+	/* Profile 3 high 20KB low 15KB pause 0xFFFFFF source 3 (emac3) */
 	low_threshold	= QM_QUEUE_PROFILE_3_LOW_THRESHOLD_DEF;
 	pause_threshold	= QM_QUEUE_PROFILE_3_PAUSE_THRESHOLD_DEF;
 	high_threshold	= QM_QUEUE_PROFILE_3_HIGH_THRESHOLD_DEF;
@@ -1648,7 +1628,7 @@ int qm_ql_thr_def_set(void)
 	if (rc != OK)
 		return rc;
 
-	/* Profile 4 high 20KB low 15KB pause 0xFFFFFF source 3 (emac3-1G) */
+	/* Profile 4 Not used - source 6 */
 	low_threshold	= QM_QUEUE_PROFILE_4_LOW_THRESHOLD_DEF;
 	pause_threshold	= QM_QUEUE_PROFILE_4_PAUSE_THRESHOLD_DEF;
 	high_threshold	= QM_QUEUE_PROFILE_4_HIGH_THRESHOLD_DEF;
@@ -1657,7 +1637,7 @@ int qm_ql_thr_def_set(void)
 	if (rc != OK)
 		return rc;
 
-	/* Profile 5 high  1KB low 0.5KB pause 0xFFFFFF source 4 (hmac-1K) */
+	/* Profile 5 high  1KB low 0.5KB pause 0xFFFFFF source 5 (hmac) */
 	low_threshold	= QM_QUEUE_PROFILE_5_LOW_THRESHOLD_DEF;
 	pause_threshold	= QM_QUEUE_PROFILE_5_PAUSE_THRESHOLD_DEF;
 	high_threshold	= QM_QUEUE_PROFILE_5_HIGH_THRESHOLD_DEF;
@@ -1666,7 +1646,7 @@ int qm_ql_thr_def_set(void)
 	if (rc != OK)
 		return rc;
 
-	/* Profile 6  high  2KB low 1.5KB pause 0xFFFFFF source 4 (hmac-2K) */
+	/* Profile 6 Not used - source 6 */
 	low_threshold	= QM_QUEUE_PROFILE_6_LOW_THRESHOLD_DEF;
 	pause_threshold	= QM_QUEUE_PROFILE_6_PAUSE_THRESHOLD_DEF;
 	high_threshold	= QM_QUEUE_PROFILE_6_HIGH_THRESHOLD_DEF;
@@ -1834,8 +1814,10 @@ int qm_queue_flush_start(u32 queue)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((queue   <   QM_QUEUE_MIN) || (queue   >   QM_QUEUE_MAX))
+	if ((queue   <   QM_QUEUE_MIN) || (queue   >   QM_QUEUE_MAX)) {
+		pr_err("queue %d is not in range %d..%d\n", queue, QM_QUEUE_MIN, QM_QUEUE_MAX);
 		return rc;
+	}
 
 	reg_base_address =      qm.pfe.queue_flush;
 	reg_size   =   qm_reg_size.pfe.queue_flush;
@@ -1862,8 +1844,10 @@ int qm_port_flush_start(u32 port)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((port            <    QM_PORT_MIN) || (port            >    QM_PORT_MAX))
+	if ((port            <    QM_PORT_MIN) || (port            >    QM_PORT_MAX)) {
+		pr_err("port %d is not in range %d..%d\n", port, QM_PORT_MIN, QM_PORT_MAX);
 		return rc;
+	}
 
 	pid = port;
 
@@ -1891,8 +1875,10 @@ int ql_queue_length_get(u32 queue, u32 *length, u32 *status)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((queue   <   QM_QUEUE_MIN) || (queue   >   QM_QUEUE_MAX))
+	if ((queue   <   QM_QUEUE_MIN) || (queue   >   QM_QUEUE_MAX)) {
+		pr_err("queue %d is not in range %d..%d\n", queue, QM_QUEUE_MIN, QM_QUEUE_MAX);
 		return rc;
+	}
 
 	reg_base_address =      qm.ql.qlen;
 	reg_size   =   qm_reg_size.ql.qlen;
@@ -2812,8 +2798,10 @@ int qm_queue_dump(u32 queue)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX))
+	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX)) {
+		pr_err("queue %d is not in range %d..%d\n", queue, QM_QUEUE_MIN, QM_QUEUE_MAX);
 		return rc;
+	}
 
 	pr_info("\n-------------- QM  queue dump for queue = 0x%08X -----------\n", queue);
 
@@ -2916,8 +2904,10 @@ int qm_queue_no_traffic_dump(u32 queue)
 	if (qm_open_check())
 		return -EINVAL;
 
-	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX))
+	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX)) {
+		pr_err("queue %d is not in range %d..%d\n", queue, QM_QUEUE_MIN, QM_QUEUE_MAX);
 		return rc;
+	}
 
 	pr_info("\n-------------- QM  queue no traffic dump for queue = 0x%08X -----------\n", queue);
 
@@ -2937,7 +2927,7 @@ int qm_queue_no_traffic_dump(u32 queue)
 	return rc;
 }
 
-int qm_nempty_queue_len_get(void)
+int qm_nempty_queue_len_dump(void)
 {
 	int rc = OK;
 	struct ql_qlen reg_qlen;
@@ -2981,6 +2971,11 @@ int qm_dqf_port_dump(u32 port)
 	if (qm_open_check())
 		return -EINVAL;
 
+	if ((port            <    QM_PORT_MIN) || (port            >    QM_PORT_MAX)) {
+		pr_err("port %d is not in range %d..%d\n", port, QM_PORT_MIN, QM_PORT_MAX);
+		return rc;
+	}
+
 	pr_info("\n-------------- DQF port dump for port = 0x%08X -----------\n", port);
 
 	reg_base_address =      qm.dqf.Data_FIFO_params_p;
diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
index 5f8add7..1cf6ffb 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
@@ -82,6 +82,11 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define DRAM_MEMORY_TYPE			 1
 #define GRANULARITY_OF_16_BYTES		16
 
+/*
+ * In QL where the profiles  are defined they are in the range 0 to 6
+ * In QL matching between queue and profile the range of the profile
+ * is 1 to 7 since 0 indicates that there is no profile
+ */
 #define QM_QUEUE_PROFILE_INVALID			0x00000000	/*    0 */
 #define QM_QUEUE_PROFILE_0					0x00000001	/*    1 */
 #define QM_QUEUE_PROFILE_1					0x00000002	/*    2 */
@@ -107,7 +112,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define QM_POOL0_SID_NUM_DEF	QM_POOL0_SID_NUM_MAX
 #define QM_POOL1_SID_NUM_DEF	QM_POOL1_SID_NUM_MIN
 
-#define QM_CLASS_ARR_CMAC_EMAC_DEF(_input_port)		(((_input_port) == 7) ? 0 : (input_port+1))
+#define QM_CLASS_ARR_CMAC_EMAC_DEF(_input_port)		(((_input_port) == 7) ? 0 : ((_input_port)+1))
 #define QM_CLASS_ARR_HMAC_DEF		0x00000008	/*    8 */
 #define QM_CLASS_ARR_PPC_DEF		0x00000009	/*    9 */
 #define QM_INPUT_PORT_POOL_DEF		         0	/*    0 */
@@ -168,7 +173,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 /* eMac, cMac, hMac ports are ports 3 to 10 */
 #define QM_PORT_MAC_MIN			0x00000003	/*    3 */
 #define QM_PORT_MAC_MAX			0x0000000A	/*   10 */
-#define QM_QUEUE_PROFILE_MIN	         1	/*    1 */
+#define QM_QUEUE_PROFILE_MIN	         0	/*    0 indicate that profile is invalid */
 #define QM_QUEUE_PROFILE_MAX	0x00000007	/*    7 */
 
 #define QM_PPC_MIN				         0
@@ -206,10 +211,10 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define QM_POOL1_SID_NUM_MIN	QM_POOL_SID_NUM_MIN
 #define QM_POOL1_SID_NUM_MAX	QM_POOL_SID_NUM_MAX
 
-#define QM_CLASS_ARR_MIN		         0	/*    0 */
-#define QM_CLASS_ARR_MAX		0x00000009	/*    9 */
-#define QM_PORT_ARR_MIN			         0	/*    0 */
-#define QM_PORT_ARR_MAX			0x00000001	/*    1 */
+#define QM_CLASS_MIN					0	/*    0 */
+#define QM_CLASS_MAX			0x0000003F	/*   63 */
+#define QM_PORT_POOL_MIN		         0	/*    0 */
+#define QM_PORT_POOL_MAX		0x00000001	/*    1 */
 #define QM_INPUT_PORT_MIN		0x00000000	/*    0 */
 #define QM_INPUT_PORT_MAX		0x0000011F	/*  287 */
 
@@ -230,9 +235,15 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define QM_PORT_DEPTH_ARR_MIN			     0	/*     0 */
 #define QM_MAC_FIFO_DEPTH_SIZE		0x00004000	/* 16384KB for Z1, in A0 would be 32KB */
 #define QM_PPC_FIFO_DEPTH_SIZE		576			/* Bytes, 4 lines of 144Bytes */
-
+/*
+ * Threshold value can be minimum 16 (since should be multiplication of 16B)
+ * to fifo depth 8*16B (8 fifo lines).
+ * When working mode in store & forward mode the recommendation is fifo depth minus 8*16B ,
+ * if working mode is cut through then credit is recommended to be a small value
+ */
 #define QM_PORT_CREDIT_THR_ARR_MIN	GRANULARITY_OF_16_BYTES	/*     16 */
-#define QM_PORT_CREDIT_THR_ARR_MAX	(data_fifo_depth_p - 8 * GRANULARITY_OF_16_BYTES)	/* 8 * 16 */
+#define QM_PORT_CREDIT_THR_ARR_MAX(_data_fifo_depth_p) \
+	((_data_fifo_depth_p) - 8 * GRANULARITY_OF_16_BYTES)	/* 8 * 16 */
 
 #define QM_SWF_ARDOMAIN_MIN				         0	/*    0 */
 #define QM_SWF_ARDOMAIN_MAX				0x00000003	/*    3 */
@@ -307,6 +318,37 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define QM_CMD_MIN				         0
 #define QM_CMD_MAX				0x7FFFFFFF
 
+#define QM_QUEUE_PROFILE_0_LOW_THRESHOLD_DEF					0x0004B000	/* 300.0KB */
+#define QM_QUEUE_PROFILE_1_LOW_THRESHOLD_DEF					0x00007800	/*  30.0KB */
+#define QM_QUEUE_PROFILE_2_LOW_THRESHOLD_DEF					0x00003C00	/*  15.0KB */
+#define QM_QUEUE_PROFILE_3_LOW_THRESHOLD_DEF					0x00003C00	/*  15.0KB */
+#define QM_QUEUE_PROFILE_4_LOW_THRESHOLD_DEF					0x00000000	/*  NotUsed */
+#define QM_QUEUE_PROFILE_5_LOW_THRESHOLD_DEF					0x00000200	/*   0.5KB */
+#define QM_QUEUE_PROFILE_6_LOW_THRESHOLD_DEF					0x00000000	/*  NotUsed */
+
+#define QM_QUEUE_PROFILE_0_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* -1 */
+#define QM_QUEUE_PROFILE_1_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
+#define QM_QUEUE_PROFILE_2_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
+#define QM_QUEUE_PROFILE_3_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
+#define QM_QUEUE_PROFILE_4_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
+#define QM_QUEUE_PROFILE_5_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
+#define QM_QUEUE_PROFILE_6_PAUSE_THRESHOLD_DEF					0xFFFFFF	/* 0xFFFFFF */
+
+#define QM_QUEUE_PROFILE_0_HIGH_THRESHOLD_DEF					0x00064000	/* 400.0KB */
+#define QM_QUEUE_PROFILE_1_HIGH_THRESHOLD_DEF					0x0000A000	/*  40.0KB */
+#define QM_QUEUE_PROFILE_2_HIGH_THRESHOLD_DEF					0x00005000	/*  20.0KB */
+#define QM_QUEUE_PROFILE_3_HIGH_THRESHOLD_DEF					0x00005000	/*  20.0KB */
+#define QM_QUEUE_PROFILE_4_HIGH_THRESHOLD_DEF					0x00000000	/* NotUsed */
+#define QM_QUEUE_PROFILE_5_HIGH_THRESHOLD_DEF					0x00000400	/*   1.0KB */
+#define QM_QUEUE_PROFILE_6_HIGH_THRESHOLD_DEF					0x00000000	/* NotUsed */
+
+#define QM_QUEUE_PROFILE_0_TRAFFIC_SOURCE_DEF					         0	/*    0 - emac0 */
+#define QM_QUEUE_PROFILE_1_TRAFFIC_SOURCE_DEF					0x00000001	/*    1 - emac1 */
+#define QM_QUEUE_PROFILE_2_TRAFFIC_SOURCE_DEF					0x00000002	/*    2 - emac2 */
+#define QM_QUEUE_PROFILE_3_TRAFFIC_SOURCE_DEF					0x00000003	/*    3 - emac3 */
+#define QM_QUEUE_PROFILE_4_TRAFFIC_SOURCE_DEF					0x00000006	/*    6 - not used*/
+#define QM_QUEUE_PROFILE_5_TRAFFIC_SOURCE_DEF					0x00000005	/*    5 - hmac */
+#define QM_QUEUE_PROFILE_6_TRAFFIC_SOURCE_DEF					0x00000006	/*    6 - note used */
 
 /**
  *
@@ -488,7 +530,7 @@ int qm_dqf_port_ppc_map_def_set(void);
  *		0 - success
  */
 int qm_dqf_port_ppc_map_set(
-				u32 *port_ppc_arr, /* holds indication which PPC process packets from this port */
+				u32 port_ppc_arr, /* holds indication which PPC process packets from this port */
 				u32 port); /* input ports */
 
 /**
@@ -729,7 +771,7 @@ int qm_queue_no_traffic_dump(u32 queue);
  *  Return values:
  *		0 - success
 */
-int qm_nempty_queue_len_get(void);
+int qm_nempty_queue_len_dump(void);
 
 /*
  * Print the following per port:
diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.c b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.c
index 2a2a304..b361383 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.c
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.c
@@ -79,14 +79,12 @@ int qm_reg_address_alias_init(void)
 
 	siliconBase = mv_hw_silicon_base_addr_get();
 
-	qm.ql.base      = siliconBase + QL_UNIT_OFFSET;	/*0x00400000*/
-	qm.pfe.base     = siliconBase + PFE_UNIT_OFFSET;	/*0x00410000*/
-	qm.dqf.base     = siliconBase + DQF_UNIT_OFFSET;	/*0x00420000*/
-	qm.dma.base     = siliconBase + DMA_UNIT_OFFSET;	/*0x00430000*/
-	qm.sched.base   = siliconBase + SCHED_UNIT_OFFSET;	/*0x00440000*/
-	qm.drop.base    = siliconBase + DROP_UNIT_OFFSET;	/*0x00480000*/
+	qm.ql.base      = siliconBase +      QL_UNIT_OFFSET;	/*0x00400000*/
+	qm.pfe.base     = siliconBase +     PFE_UNIT_OFFSET;	/*0x00410000*/
+	qm.dqf.base     = siliconBase +     DQF_UNIT_OFFSET;	/*0x00420000*/
+	qm.dma.base     = siliconBase +     DMA_UNIT_OFFSET;	/*0x00430000*/
 	qm.reorder.base = siliconBase + REORDER_UNIT_OFFSET;	/*0x00500000*/
-	qm.gpm.base     = siliconBase + GPM_UNIT_OFFSET;	/*0x00600000*/
+	qm.gpm.base     = siliconBase +     GPM_UNIT_OFFSET;	/*0x00600000*/
 
 	/* QL registers addresses */
 	qm.ql.qptr                 = qm.ql.base + 0x00000000;
diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h
index 1cc0b7d..4b28271 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h
@@ -71,10 +71,8 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define     PFE_UNIT_OFFSET 0x00410000
 #define     DQF_UNIT_OFFSET 0x00420000
 #define     DMA_UNIT_OFFSET 0x00430000
-#define   SCHED_UNIT_OFFSET 0x00440000
-#define    DROP_UNIT_OFFSET 0x00480000
-#define REORDER_UNIT_OFFSET 0x00100000
-#define     GPM_UNIT_OFFSET 0x00200000
+#define REORDER_UNIT_OFFSET 0x00500000
+#define     GPM_UNIT_OFFSET 0x00600000
 
 
 /* DMA */
@@ -841,7 +839,6 @@ struct dqf_dqf_macs_desc {
 
 
 struct qm_alias {
-	int base;
 
 	struct {
 		int base;
-- 
1.7.5.4

