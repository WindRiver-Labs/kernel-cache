From dcc8298d5cd7f8f93b9a70ce718f731084e3018e Mon Sep 17 00:00:00 2001
From: Yoni Farhadian <yonif@marvell.com>
Date: Mon, 8 Jul 2013 17:42:55 +0300
Subject: [PATCH 0815/1825] alp: PPv2: provide info about true BM pool buffers
 size

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 21a4e6f08fd6ebfc9fec2284c69f31288a2d5476

	- Driver prints info about actual number of bytes allocated per buffer
	- BM pool size sysfs API using total buffer size instead of packet size
	- Short pool's default packet size is suitable to 512B buffer (true size)

Change-Id: Idaa1e5163d4c302bbf87ae0c83ed2dc025087f0b
Signed-off-by: Yoni Farhadian <yonif@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/2454
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Igor Patrik <igorp@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c    |    4 +-
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |  159 ++++++++++++--------
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h      |   19 ++-
 3 files changed, 112 insertions(+), 70 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
index dfca0d0..1eac3fe 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_ethernet.c
@@ -177,7 +177,7 @@ int mv_eth_change_mtu(struct net_device *dev, int mtu)
 		if (mv_eth_change_mtu_internals(dev, mtu) == -1)
 			goto error;
 
-		printk(KERN_NOTICE "%s: change mtu %d (buffer-size %d) to %d (buffer-size %d)\n",
+		printk(KERN_NOTICE "%s: change mtu %d (packet-size %d) to %d (packet-size %d)\n",
 				dev->name, old_mtu, RX_PKT_SIZE(old_mtu),
 				dev->mtu, RX_PKT_SIZE(dev->mtu));
 		return 0;
@@ -200,7 +200,7 @@ int mv_eth_change_mtu(struct net_device *dev, int mtu)
 		printk(KERN_ERR "%s: start interface failed\n", dev->name);
 		goto error;
 	}
-	printk(KERN_NOTICE "%s: change mtu %d (buffer-size %d) to %d (buffer-size %d)\n",
+	printk(KERN_NOTICE "%s: change mtu %d (packet-size %d) to %d (packet-size %d)\n",
 				dev->name, old_mtu, RX_PKT_SIZE(old_mtu), dev->mtu,
 				RX_PKT_SIZE(dev->mtu));
 	return 0;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 9206851..6b6c778 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -598,15 +598,15 @@ int mv_eth_ctrl_pool_buf_num_set(int pool, int buf_num)
 }
 
 /* mv_eth_ctrl_pool_size_set				*
- *     - Set pkt_size for the pool			*
+ *     - Set buffer size for BM pool			*
  *     - All ports using this pool must be stopped	*
  *     - Re-allocate all buffers			*/
-int mv_eth_ctrl_pool_size_set(int pool, int pkt_size)
+int mv_eth_ctrl_pool_size_set(int pool, int total_size)
 {
 	unsigned long flags = 0;
 	struct eth_port *pp;
 	struct bm_pool *ppool = &mv_eth_pool[pool];
-	int port, buf_size, pkts_num;
+	int port, pkt_size, buf_size, pkts_num;
 
 	port = mv_eth_port_up_get(ppool->port_map);
 	if (port != -1) {
@@ -615,6 +615,15 @@ int mv_eth_ctrl_pool_size_set(int pool, int pkt_size)
 		return -EINVAL;
 	}
 
+	if (MV_ETH_BM_POOL_IS_HWF(ppool->type)) {
+		pkt_size = RX_HWF_MAX_PKT_SIZE(total_size);
+		buf_size = RX_HWF_BUF_SIZE(pkt_size);
+	} else {
+		pkt_size = RX_MAX_PKT_SIZE(total_size);
+		buf_size = RX_BUF_SIZE(pkt_size);
+	}
+
+
 	for (port = 0; port < mv_eth_ports_num; port++) {
 		if (!((1 << port) & ppool->port_map))
 			continue;
@@ -623,10 +632,10 @@ int mv_eth_ctrl_pool_size_set(int pool, int pkt_size)
 		if (pp == NULL)
 			continue;
 
-		/* If this pool is used as long pool, then it is expected that MTU will be larger than packet size */
+		/* If this pool is used as long pool, then it is expected that MTU will be smaller than buffer size */
 		if (MV_ETH_BM_POOL_IS_LONG(ppool->type) && (RX_PKT_SIZE(pp->dev->mtu) > pkt_size))
-			pr_warn("%s: port %d MTU (%d) is smaller than requested packet size (%d)\n",
-				__func__, port, RX_PKT_SIZE(pp->dev->mtu), pkt_size);
+			pr_warn("%s: port %d MTU (%d) is larger than requested packet size (%d) [total size = %d]\n",
+				__func__, port, RX_PKT_SIZE(pp->dev->mtu), pkt_size, total_size);
 	}
 
 	MV_ETH_LOCK(&ppool->lock, flags);
@@ -635,11 +644,12 @@ int mv_eth_ctrl_pool_size_set(int pool, int pkt_size)
 	ppool->pkt_size = pkt_size;
 	mv_eth_pool_add(pool, pkts_num);
 
-	buf_size = MV_ETH_BM_POOL_IS_HWF(ppool->type) ? RX_HWF_BUF_SIZE(pkt_size) : RX_BUF_SIZE(pkt_size);
 	mvBmPoolBufSizeSet(pool, buf_size);
 	MV_ETH_UNLOCK(&ppool->lock, flags);
 
-	pr_info("%s: BM pool %d, new packet size = %d, new buffer size = %d\n", __func__, pool, pkt_size, buf_size);
+	pr_info("%s: BM pool %d:\n", __func__, pool);
+	pr_info("       packet size = %d, buffer size = %d, total bytes per buffer = %d, true buffer size = %d\n",
+		pkt_size, buf_size, total_size, (int)RX_TRUE_SIZE(total_size));
 
 	return 0;
 }
@@ -649,6 +659,7 @@ int mv_eth_ctrl_long_pool_set(int port, int pool)
 	unsigned long flags = 0;
 	struct eth_port *pp = mv_eth_port_by_id(port);
 	struct bm_pool *old_pool;
+	int pkt_size = RX_PKT_SIZE(pp->dev->mtu);
 
 	if (pp == NULL) {
 		pr_err("%s: port %d doenst not exist\n" , __func__, port);
@@ -680,7 +691,7 @@ int mv_eth_ctrl_long_pool_set(int port, int pool)
 			}
 		}
 	}
-	pp->pool_long = mv_eth_pool_use(pool, MV_ETH_BM_SWF_LONG, RX_PKT_SIZE(pp->dev->mtu));
+	pp->pool_long = mv_eth_pool_use(pool, MV_ETH_BM_SWF_LONG, pkt_size);
 	if (!pp->pool_long)
 		return -EINVAL;
 	MV_ETH_LOCK(&pp->pool_long->lock, flags);
@@ -726,7 +737,7 @@ int mv_eth_ctrl_short_pool_set(int port, int pool)
 			}
 		}
 	}
-	pp->pool_short = mv_eth_pool_use(pool, MV_ETH_BM_SWF_SHORT, MV_ETH_BM_SHORT_BUFF_SIZE);
+	pp->pool_short = mv_eth_pool_use(pool, MV_ETH_BM_SWF_SHORT, MV_ETH_BM_SHORT_PKT_SIZE);
 	if (!pp->pool_short)
 		return -EINVAL;
 	MV_ETH_LOCK(&pp->pool_short->lock, flags);
@@ -741,6 +752,7 @@ int mv_eth_ctrl_hwf_long_pool_set(int port, int pool)
 	unsigned long flags = 0;
 	struct eth_port *pp = mv_eth_port_by_id(port);
 	struct bm_pool *old_pool;
+	int pkt_size = RX_PKT_SIZE(pp->dev->mtu);
 
 	if (pp == NULL) {
 		pr_err("%s: port %d doenst not exist\n" , __func__, port);
@@ -772,7 +784,7 @@ int mv_eth_ctrl_hwf_long_pool_set(int port, int pool)
 			}
 		}
 	}
-	pp->hwf_pool_long = mv_eth_pool_use(pool, MV_ETH_BM_HWF_LONG, RX_PKT_SIZE(pp->dev->mtu));
+	pp->hwf_pool_long = mv_eth_pool_use(pool, MV_ETH_BM_HWF_LONG, pkt_size);
 	if (!pp->hwf_pool_long)
 		return -EINVAL;
 	MV_ETH_LOCK(&pp->hwf_pool_long->lock, flags);
@@ -818,7 +830,7 @@ int mv_eth_ctrl_hwf_short_pool_set(int port, int pool)
 			}
 		}
 	}
-	pp->hwf_pool_short = mv_eth_pool_use(pool, MV_ETH_BM_HWF_SHORT, MV_ETH_BM_SHORT_BUFF_SIZE);
+	pp->hwf_pool_short = mv_eth_pool_use(pool, MV_ETH_BM_HWF_SHORT, MV_ETH_BM_SHORT_HWF_PKT_SIZE);
 	if (!pp->hwf_pool_short)
 		return -EINVAL;
 	MV_ETH_LOCK(&pp->hwf_pool_short->lock, flags);
@@ -1365,14 +1377,15 @@ static struct sk_buff *mv_eth_skb_alloc(struct bm_pool *pool, struct eth_pbuf *p
 static unsigned char *mv_eth_hwf_buff_alloc(struct bm_pool *pool, struct eth_pbuf *pkt)
 {
 	unsigned char *buff;
+	int buf_size = RX_HWF_BUF_SIZE(pool->pkt_size);
 
-	buff = mvOsMalloc(RX_HWF_BUF_SIZE(pool->pkt_size));
+	buff = mvOsMalloc(buf_size);
 	if (!buff)
 		return NULL;
 
 	pkt->osInfo = NULL;
 	pkt->pBuf = buff;
-	pkt->physAddr = mvOsCacheInvalidate(NULL, buff, RX_HWF_BUF_SIZE(pool->pkt_size));
+	pkt->physAddr = mvOsCacheInvalidate(NULL, buff, buf_size);
 	pkt->offset = RX_HWF_PKT_OFFS;
 	pkt->pool = pool->pool;
 
@@ -2354,7 +2367,7 @@ static void mv_eth_tx_frag_process(struct eth_port *pp, struct sk_buff *skb, str
 static int mv_eth_pool_free(int pool, int num)
 {
 	struct eth_pbuf *pkt;
-	int i = 0, buff_size;
+	int i = 0, buf_size, total_size;
 	struct bm_pool *ppool = &mv_eth_pool[pool];
 	bool free_all = false;
 
@@ -2364,8 +2377,13 @@ static int mv_eth_pool_free(int pool, int num)
 		num = ppool->buf_num;
 	}
 
-	buff_size = MV_ETH_BM_POOL_IS_HWF(ppool->type) ?
-		RX_HWF_BUF_SIZE(ppool->pkt_size) : RX_BUF_SIZE(ppool->pkt_size);
+	if (MV_ETH_BM_POOL_IS_HWF(ppool->type)) {
+		buf_size = RX_HWF_BUF_SIZE(ppool->pkt_size);
+		total_size = RX_HWF_TOTAL_SIZE(buf_size);
+	} else {
+		buf_size = RX_BUF_SIZE(ppool->pkt_size);
+		total_size = RX_TOTAL_SIZE(buf_size);
+	}
 
 	if (mv_eth_pool_bm(ppool)) {
 		while (i < num) {
@@ -2388,8 +2406,8 @@ static int mv_eth_pool_free(int pool, int num)
 			}
 			i++;
 		}
-		printk(KERN_ERR "bm pool #%d: pkt_size=%4d, buf_size=%4d - %d of %d buffers free\n",
-			pool, ppool->pkt_size, buff_size, i, num);
+		pr_info("bm pool #%d: pkt_size=%4d, buf_size=%4d, total buf_size=%4d - %d of %d buffers free\n",
+			pool, ppool->pkt_size, buf_size, total_size, i, num);
 	}
 
 	ppool->buf_num -= num;
@@ -2420,8 +2438,8 @@ static int mv_eth_pool_free(int pool, int num)
 		i++;
 	}
 	if (i > 0)
-		printk(KERN_ERR "stack pool #%d: pkt_size=%4d, buf_size=%4d - %d of %d buffers free\n",
-			pool, ppool->pkt_size, buff_size, i, num);
+		pr_info("stack pool #%d: pkt_size=%4d, buf_size=%4d, total buf_size=%4d - %d of %d buffers free\n",
+			pool, ppool->pkt_size, buf_size, total_size, i, num);
 
 	return i;
 }
@@ -2459,8 +2477,7 @@ static int mv_eth_pool_add(int pool, int buf_num)
 	struct sk_buff *skb;
 	struct eth_pbuf *pkt;
 	unsigned char *hwf_buff;
-	int i, buff_size;
-	unsigned long flags = 0;
+	int i, buf_size, total_size;
 
 	if ((pool < 0) || (pool >= MV_ETH_BM_POOLS)) {
 		printk(KERN_ERR "%s: invalid pool number %d\n", __func__, pool);
@@ -2468,13 +2485,19 @@ static int mv_eth_pool_add(int pool, int buf_num)
 	}
 
 	bm_pool = &mv_eth_pool[pool];
-	buff_size = MV_ETH_BM_POOL_IS_HWF(bm_pool->type) ?
-				RX_HWF_BUF_SIZE(bm_pool->pkt_size) : RX_BUF_SIZE(bm_pool->pkt_size);
+
+	if (MV_ETH_BM_POOL_IS_HWF(bm_pool->type)) {
+		buf_size = RX_HWF_BUF_SIZE(bm_pool->pkt_size);
+		total_size = RX_HWF_TOTAL_SIZE(buf_size);
+	} else {
+		buf_size = RX_BUF_SIZE(bm_pool->pkt_size);
+		total_size = RX_TOTAL_SIZE(buf_size);
+	}
 
 	/* Check buffer size */
 	if (bm_pool->pkt_size == 0) {
-		printk(KERN_ERR "%s: invalid pool #%d state: pkt_size=%d, buf_size=%d, buf_num=%d\n",
-		       __func__, pool, bm_pool->pkt_size, buff_size, bm_pool->buf_num);
+		printk(KERN_ERR "%s: invalid pool #%d state: pkt_size=%d, buf_num=%d\n",
+		       __func__, pool, bm_pool->pkt_size, bm_pool->buf_num);
 		return 0;
 	}
 
@@ -2485,8 +2508,6 @@ static int mv_eth_pool_add(int pool, int buf_num)
 		return 0;
 	}
 
-	MV_ETH_LOCK(&bm_pool->lock, flags);
-
 	for (i = 0; i < buf_num; i++) {
 		pkt = mvOsMalloc(sizeof(struct eth_pbuf));
 		if (!pkt) {
@@ -2506,17 +2527,15 @@ static int mv_eth_pool_add(int pool, int buf_num)
 				kfree(pkt);
 				break;
 			}
-			memset(hwf_buff, 0, sizeof(buff_size));
+			memset(hwf_buff, 0, buf_size);
 		}
 		mvBmPoolPut(pool, pkt->physAddr, (MV_ULONG)pkt);
 		STAT_DBG(bm_pool->stats.bm_put++);
 	}
 	bm_pool->buf_num += i;
 
-	printk(KERN_ERR "bm pool #%d: pkt_size=%4d, buf_size=%4d - %d of %d buffers added\n",
-	       pool, bm_pool->pkt_size, buff_size, i, buf_num);
-
-	MV_ETH_UNLOCK(&bm_pool->lock, flags);
+	pr_info("bm pool #%d: pkt_size=%4d, buf_size=%4d, total buf_size=%4d - %d of %d buffers added\n",
+		pool, bm_pool->pkt_size, buf_size, total_size, i, buf_num);
 
 	return i;
 }
@@ -2597,7 +2616,7 @@ static MV_STATUS mv_eth_pool_create(int pool, int capacity)
  *	- Parameters:							*
  *		- pool: BM pool that is being used			*
  *		- type: type of usage (SWF/HWF/MIXED long/short)	*
- *		- pkt_size: pool requsted packet size			*/
+ *		- pkt_size: number of bytes per packet			*/
 static struct bm_pool *mv_eth_pool_use(int pool, enum mv_eth_bm_type type, int pkt_size)
 {
 	unsigned long flags = 0;
@@ -2985,7 +3004,7 @@ int mv_eth_swf_bm_pool_init(struct eth_port *pp, int mtu)
 
 	if (pp->pool_short == NULL) {
 		pp->pool_short = mv_eth_pool_use(MV_ETH_BM_SWF_SHORT_POOL(pp->port),
-							MV_ETH_BM_SWF_SHORT, MV_ETH_BM_SHORT_BUFF_SIZE);
+							MV_ETH_BM_SWF_SHORT, MV_ETH_BM_SHORT_PKT_SIZE);
 		if (pp->pool_short == NULL)
 			return -1;
 
@@ -3016,7 +3035,7 @@ int mv_eth_hwf_bm_pool_init(struct eth_port *pp, int mtu)
 
 	if (pp->hwf_pool_short == NULL) {
 		pp->hwf_pool_short = mv_eth_pool_use(MV_ETH_BM_HWF_SHORT_POOL(pp->port),
-							MV_ETH_BM_HWF_SHORT, MV_ETH_BM_SHORT_BUFF_SIZE);
+							MV_ETH_BM_HWF_SHORT, MV_ETH_BM_SHORT_PKT_SIZE);
 		if (pp->hwf_pool_short == NULL)
 			return -1;
 
@@ -4087,6 +4106,7 @@ int mv_eth_change_mtu_internals(struct net_device *dev, int mtu)
 	struct bm_pool *port_pool;
 	struct eth_port *pp = MV_ETH_PRIV(dev);
 	int pkt_size = RX_PKT_SIZE(mtu), pkts_num;
+	unsigned long flags = 0;
 
 	if (test_bit(MV_ETH_F_STARTED_BIT, &(pp->flags))) {
 		STAT_ERR(pp->stats.state_err++);
@@ -4100,50 +4120,52 @@ int mv_eth_change_mtu_internals(struct net_device *dev, int mtu)
 	if (mtu == dev->mtu)
 		goto mtu_out;
 
-	if (!MV_PON_PORT(pp->port))
-		mvEthMaxRxSizeSet(pp->port, pkt_size);
-#ifdef CONFIG_MV_INCLUDE_PON
-	else
-		mv_pon_mtu_config(pkt_size);
-#endif
-
-#ifdef CONFIG_MV_ETH_HWF
-	port_pool = pp->hwf_pool_long;
+	port_pool = pp->pool_long;
 
-	/* for now, hwf long pool must not be shared with other ports */
 	if (port_pool) {
+		MV_ETH_LOCK(&port_pool->lock, flags);
 		pkts_num = port_pool->buf_num;
+		/* for now, swf long pool must not be shared with other ports */
 		if (port_pool->port_map == (1 << pp->port)) {
 			/* refill pool with updated buffer size */
 			mv_eth_pool_free(port_pool->pool, pkts_num);
 			port_pool->pkt_size = pkt_size;
 			mv_eth_pool_add(port_pool->pool, pkts_num);
 		} else {
-			printk(KERN_ERR "%s: port %d, HWF long pool is shared with other ports.\n", __func__, pp->port);
+			printk(KERN_ERR "%s: port %d, SWF long pool is shared with other ports.\n", __func__, pp->port);
+			MV_ETH_UNLOCK(&port_pool->lock, flags);
 			return -1;
 		}
+		MV_ETH_UNLOCK(&port_pool->lock, flags);
 	}
 
-	/* Check if SWF and HWF of this port are using the same pool */
-	if (port_pool == pp->pool_long)
-		goto mtu_out;
-#endif /* CONFIG_MV_ETH_HWF */
-
-	port_pool = pp->pool_long;
+#ifdef CONFIG_MV_ETH_HWF
+	port_pool = pp->hwf_pool_long;
 
-	/* for now, swf long pool must not be shared with other ports */
-	if (port_pool) {
+	if (port_pool && (pp->hwf_pool_long != pp->pool_long)) {
+		MV_ETH_LOCK(&port_pool->lock, flags);
 		pkts_num = port_pool->buf_num;
+		/* for now, hwf long pool must not be shared with other ports */
 		if (port_pool->port_map == (1 << pp->port)) {
 			/* refill pool with updated buffer size */
 			mv_eth_pool_free(port_pool->pool, pkts_num);
 			port_pool->pkt_size = pkt_size;
 			mv_eth_pool_add(port_pool->pool, pkts_num);
 		} else {
-			printk(KERN_ERR "%s: port %d, SWF long pool is shared with other ports.\n", __func__, pp->port);
+			printk(KERN_ERR "%s: port %d, HWF long pool is shared with other ports.\n", __func__, pp->port);
+			MV_ETH_UNLOCK(&port_pool->lock, flags);
 			return -1;
 		}
+		MV_ETH_UNLOCK(&port_pool->lock, flags);
 	}
+#endif /* CONFIG_MV_ETH_HWF */
+
+	if (!MV_PON_PORT(pp->port))
+		mvEthMaxRxSizeSet(pp->port, pkt_size);
+#ifdef CONFIG_MV_INCLUDE_PON
+	else
+		mv_pon_mtu_config(pkt_size);
+#endif
 
 mtu_out:
 	dev->mtu = mtu;
@@ -4453,8 +4475,17 @@ void mv_eth_pool_status_print(int pool)
 {
 	const char *type;
 	struct bm_pool *bm_pool = &mv_eth_pool[pool];
-	int buf_size = MV_ETH_BM_POOL_IS_HWF(bm_pool->type) ?
-			RX_HWF_BUF_SIZE(bm_pool->pkt_size) : RX_BUF_SIZE(bm_pool->pkt_size);
+	int buf_size, total_size, true_size;
+
+
+	if (MV_ETH_BM_POOL_IS_HWF(bm_pool->type)) {
+		buf_size = RX_HWF_BUF_SIZE(bm_pool->pkt_size);
+		total_size = RX_HWF_TOTAL_SIZE(buf_size);
+	} else {
+		buf_size = RX_BUF_SIZE(bm_pool->pkt_size);
+		total_size = RX_TOTAL_SIZE(buf_size);
+	}
+	true_size = RX_TRUE_SIZE(total_size);
 
 	switch (bm_pool->type) {
 	case MV_ETH_BM_FREE:
@@ -4482,9 +4513,9 @@ void mv_eth_pool_status_print(int pool)
 		type = "Unknown";
 	}
 
-	pr_info("\nBM Pool #%d: pool type = %s\n", pool, type);
-	pr_info("     packet size = %d,  buffer size = %d,  buffers num = %d\n",
-			bm_pool->pkt_size, buf_size, bm_pool->buf_num);
+	pr_info("\nBM Pool #%d: pool type = %s, buffers num = %d\n", pool, type, bm_pool->buf_num);
+	pr_info("     packet size = %d,  buffer size = %d\n", bm_pool->pkt_size, buf_size);
+	pr_info("     total buffer size = %d, true buffer size = %d\n", total_size, true_size);
 	pr_info("     bm_pool=%p, stack=%p, capacity=%d, buf_num=%d, port_map=0x%x missed=%d\n",
 			bm_pool->bm_pool, bm_pool->stack, bm_pool->capacity, bm_pool->buf_num,
 			bm_pool->port_map, bm_pool->missed);
@@ -4532,8 +4563,8 @@ void mv_eth_netdev_print(struct net_device *dev)
 {
 	printk(KERN_ERR "%s net_device status: dev=%p\n\n", dev->name, dev);
 	printk(KERN_ERR "ifIdx=%d, mtu=%u, pkt_size=%d, buf_size=%d, MAC=" MV_MACQUAD_FMT "\n",
-	       dev->ifindex, dev->mtu, RX_PKT_SIZE(dev->mtu),
-		RX_BUF_SIZE(RX_PKT_SIZE(dev->mtu)), MV_MACQUAD(dev->dev_addr));
+		dev->ifindex, dev->mtu, RX_PKT_SIZE(dev->mtu),
+		(int)RX_BUF_SIZE(RX_PKT_SIZE(dev->mtu)), MV_MACQUAD(dev->dev_addr));
 
 	printk(KERN_ERR "features=0x%x, hw_features=0x%x, wanted_features=0x%x, vlan_features=0x%x\n",
 			(unsigned int)(dev->features), (unsigned int)(dev->hw_features),
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
index f7c5bad..aa80879 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.h
@@ -80,13 +80,21 @@ extern int mv_ctrl_txdone;
 /****************************************************************************
  * Rx buffer size: MTU + 2(Marvell Header) + 4(VLAN) + 14(MAC hdr) + 4(CRC) *
  ****************************************************************************/
+#define MV_ETH_SKB_SHINFO_SIZE		SKB_DATA_ALIGN(sizeof(struct skb_shared_info))
+
 #define RX_PKT_SIZE(mtu) \
 		MV_ALIGN_UP((mtu) + 2 + 4 + ETH_HLEN + 4, CPU_D_CACHE_LINE_SIZE)
 
-#define RX_BUF_SIZE(pkt_size)   	((pkt_size) + NET_SKB_PAD)
+#define RX_BUF_SIZE(pkt_size)		((pkt_size) + NET_SKB_PAD)
+#define RX_TOTAL_SIZE(buf_size)		((buf_size) + MV_ETH_SKB_SHINFO_SIZE)
+#define RX_MAX_PKT_SIZE(total_size)	((total_size) - NET_SKB_PAD - MV_ETH_SKB_SHINFO_SIZE)
+
 #define RX_HWF_PKT_OFFS			32
-#define RX_HWF_BUF_SIZE(pkt_size)   	((pkt_size) + RX_HWF_PKT_OFFS)
+#define RX_HWF_BUF_SIZE(pkt_size)	((pkt_size) + RX_HWF_PKT_OFFS)
+#define RX_HWF_TOTAL_SIZE(buf_size)	(buf_size)
+#define RX_HWF_MAX_PKT_SIZE(total_size)	((total_size) - RX_HWF_PKT_OFFS)
 
+#define RX_TRUE_SIZE(total_size)	roundup_pow_of_two(total_size)
 
 #ifdef CONFIG_NET_SKB_RECYCLE
 extern int mv_ctrl_recycle;
@@ -452,8 +460,11 @@ enum mv_eth_bm_type {
 #define MV_ETH_BM_POOL_IS_LONG(type)	((type == MV_ETH_BM_SWF_LONG) || (type == MV_ETH_BM_HWF_LONG)\
 									|| (type == MV_ETH_BM_MIXED_LONG))
 
-/* Default size of packet size for short pools */
-#define MV_ETH_BM_SHORT_BUFF_SIZE	256
+/* BM short pool packet size						*/
+/* These values assure that for both HWF and SWF,			*/
+/* the total number of bytes allocated for each buffer will be 512	*/
+#define MV_ETH_BM_SHORT_HWF_PKT_SIZE	RX_HWF_MAX_PKT_SIZE(512)
+#define MV_ETH_BM_SHORT_PKT_SIZE	RX_MAX_PKT_SIZE(512)
 
 struct bm_pool {
 	int			pool;
-- 
1.7.5.4

