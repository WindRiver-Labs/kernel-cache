From 431b7784f0c9306d57024e02cf7d14a566c5363d Mon Sep 17 00:00:00 2001
From: Jing Hua <jinghua@marvell.com>
Date: Thu, 3 Jul 2014 14:02:39 +0800
Subject: [PATCH 1765/1825] fix: alp: tpm: add pbit matching to TPM Multicast
 API

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 9d4a808fd1984f517ada311d84127dbf0e835f5e

	In TPM Multicast API, there used to be only VID + DIP + SIP + DMAC
	matching key, but there is request from customer to add Pbit support,
	so we add the following combination:
	1. VID_OUT + PBIT_OUT + DIP + SINGLE TAG
	2. VID_OUT + PBIT_OUT + DIP + DOUBLE TAG
	3. VID_IN + PBIT_IN + DIP
	SYSTEMSW-794 - <no PBIT support in TPM multicast API>

Change-Id: I0b31c711474bb5c8d69bc209b548148abd4c13d0
Signed-off-by: Jing Hua <jinghua@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8928
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-by: Evan Wang <xswang@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h |   10 ++--
 .../mv_drivers_lsp/mv_tpm/inc/tpm_mng.h            |   11 ++++
 .../mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c       |   58 ++++++++++++++++++++
 .../mv_tpm/src/sysfs/tpm_sysfs_api.c               |    5 ++
 .../mv_tpm/src/sysfs/tpm_sysfs_utils.c             |    2 +
 5 files changed, 81 insertions(+), 5 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
index ae9df45..c2353ef 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
@@ -314,17 +314,17 @@ enum tpm_lu_id_enum_t {
 	IPV4_MC_L2_UNTAG_ID			= 23, /* IPV4_MC_RTR_UNTAG_ID */
 	NON_IP_MC_UNTAG_ID			= 23,
 	IPV4_MC_RTR_TAG_ID			= 24,
-	IPV4_MC_RTR_DTAG_ID			= 24, /* IPV4_MC_RTR_TAG_ID */
+	IPV4_MC_RTR_DTAG_ID			= 61,
 	IPV4_MC_L2_TAG_ID			= 24, /* IPV4_MC_RTR_TAG_ID */
-	IPV4_MC_L2_DTAG_ID			= 24, /* IPV4_MC_L2_TAG_ID */
+	IPV4_MC_L2_DTAG_ID			= 61,
 	NON_IP_MC_STAG_ID			= 24,
-	NON_IP_MC_DTAG_ID			= 24,
+	NON_IP_MC_DTAG_ID			= 61,
 	IPV6_MC_RTR_UNTAG_ID			= 25,
 	IPV6_MC_L2_UNTAG_ID			= 25, /* IPV6_MC_RTR_UNTAG_ID */
 	IPV6_MC_RTR_TAG_ID			= 26,
-	IPV6_MC_RTR_DTAG_ID			= 26, /* IPV6_MC_RTR_TAG_ID */
+	IPV6_MC_RTR_DTAG_ID			= 62,
 	IPV6_MC_L2_TAG_ID			= 26, /* IPV6_MC_RTR_TAG_ID */
-	IPV6_MC_L2_DTAG_ID			= 26, /* IPV6_MC_L2_TAG_ID */
+	IPV6_MC_L2_DTAG_ID			= 62,
 	IPV4_UC_BRG_NF_UNTAG_ID			= 27,
 	IPV4_BC_L2_NF_UNTAG_ID			= 27, /* IPV4_UC_BRG_NF_UNTAG_ID */
 	IPV4_BC_L3_NF_UNTAG_ID			= 27, /* IPV4_UC_BRG_NF_UNTAG_ID */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h
index e2539c0..c8cd4f1 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_mng.h
@@ -180,6 +180,9 @@ enum tpm_mng_pri_lu_type_c2_t {
 	TPM_MNG_PRI_LU_TYPE_C2_MC_DMAC_UNTAG,
 	TPM_MNG_PRI_LU_TYPE_C2_MC_TAG_PPOE_DIP = TPM_MNG_PRI_LU_TYPE_C2_MC_DMAC_UNTAG,
 	TPM_MNG_PRI_LU_TYPE_C2_MC_TAG_DIP,
+	TPM_MNG_PRI_LU_TYPE_C2_MC_STAG_VID_PBIT_DIP,
+	TPM_MNG_PRI_LU_TYPE_C2_MC_DTAG_VID_PBIT_DIP,
+	TPM_MNG_PRI_LU_TYPE_C2_MC_INVID_INPBIT_DIP,
 	TPM_MNG_PRI_LU_TYPE_C2_MC_UNTAG_PPOE_DIP,
 	TPM_MNG_PRI_LU_TYPE_C2_MC_UNTAG_DIP,
 	TPM_MNG_PRI_LU_TYPE_C2_MC_PPOE_ETH_DEF,
@@ -194,6 +197,9 @@ enum tpm_mng_pri_lu_type_c3_t {
 	TPM_MNG_PRI_LU_TYPE_C3_MC_DMAC_SMAC_VID,
 	TPM_MNG_PRI_LU_TYPE_C3_MC_VID_PPOE_SIP_DIP = TPM_MNG_PRI_LU_TYPE_C3_MC_DMAC_SMAC_VID,
 	TPM_MNG_PRI_LU_TYPE_C3_MC_VID_SIP_DIP,
+	TPM_MNG_PRI_LU_TYPE_C3_MC_VID_PBIT_STAG_DIP,
+	TPM_MNG_PRI_LU_TYPE_C3_MC_VID_PBIT_DTAG_DIP,
+	TPM_MNG_PRI_LU_TYPE_C3_MC_INVID_INPBIT_DIP,
 	TPM_MNG_PRI_LU_TYPE_C3_LAST,
 };
 enum tpm_mng_exact_cls_pri_t {
@@ -225,6 +231,7 @@ enum tpm_mng_flow_log_id_t {
 	TPM_MNG_FLOW_ID_NON_IP_MTM_UNTAG_NPON,
 	TPM_MNG_FLOW_ID_IPV4_MC_UNTAG_PON,
 	TPM_MNG_FLOW_ID_IPV4_MC_TAG_PON,
+	TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON,
 	TPM_MNG_FLOW_ID_IPV4_MC_TAG_NPON,
 	TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_UNTAG_PON,
 	TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_STAG_PON,
@@ -270,6 +277,7 @@ enum tpm_mng_flow_log_id_t {
 	TPM_MNG_FLOW_ID_IPV6_UC_RTR_FRAG_NEX_NPON,
 	TPM_MNG_FLOW_ID_IPV6_MC_UNTAG_PON,
 	TPM_MNG_FLOW_ID_IPV6_MC_TAG_PON,
+	TPM_MNG_FLOW_ID_IPV6_MC_DTAG_PON,
 	TPM_MNG_FLOW_ID_IPV6_MC_TAG_NPON,
 	TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_UNTAG_PON,
 	TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_STAG_PON,
@@ -303,6 +311,9 @@ enum tpm_mc_cap_pri_t {
 	TPM_MC_VID_SIP_DIP_PRI,
 	TPM_MC_VID_PPOE_DIP_PRI,
 	TPM_MC_VID_DIP_PRI,
+	TPM_MC_VID_PBIT_DIP_STAG_PRI,
+	TPM_MC_VID_PBIT_DIP_DTAG_PRI,
+	TPM_MC_INVID_INPBIT_DIP_PRI,
 	TPM_MC_TAG_PPOE_DIP_PRI,
 	TPM_MC_TAG_DIP_PRI,
 	TPM_MC_UNTAG_PPOE_DIP_PRI,
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
index 15842e9..6c5b7f3 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/conf/tpm_mng.c
@@ -172,6 +172,12 @@ static struct tpm_db_mng_flow_conf_t tpm_mng_flow_cfg_init[TPM_MNG_FLOW_ID_MAX]
 		{TPM_MNG_ILLEGAL_LUID		    , 0},
 		}
 	},
+	{TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON, TPM_WAY_PON, 0,
+		{
+		{IPV4_MC_RTR_DTAG_ID			, 0},
+		{TPM_MNG_ILLEGAL_LUID			, 0},
+		}
+	},
 	{TPM_MNG_FLOW_ID_IPV6_MC_UNTAG_PON, TPM_WAY_PON, 0,
 		{
 		{IPV6_MC_RTR_UNTAG_ID		    , 0},
@@ -184,6 +190,12 @@ static struct tpm_db_mng_flow_conf_t tpm_mng_flow_cfg_init[TPM_MNG_FLOW_ID_MAX]
 		{TPM_MNG_ILLEGAL_LUID		    , 0},
 		}
 	},
+	{TPM_MNG_FLOW_ID_IPV6_MC_DTAG_PON, TPM_WAY_PON, 0,
+		{
+		{IPV6_MC_RTR_DTAG_ID			, 0},
+		{TPM_MNG_ILLEGAL_LUID			, 0},
+		}
+	},
 
 	{TPM_MNG_FLOW_ID_IPV4_MC_TAG_NPON, TPM_WAY_NON_PON, 0,
 		{
@@ -546,6 +558,42 @@ static struct tpm_db_mng_flow_cap_conf_t tpm_mng_mc_pri_cap_cfg[] = {
 	 TPM_MC_VID_DIP_PRI, TPM_ENGINE_C3_A, TPM_MNG_PRI_LU_TYPE_C2_MC_VID_DIP, 0, 0,
 	 TPM_ANY_VLAN, TPM_MC_DATA_TRAFFIC_TYPE, 0},
 
+	/* VID + PBIT + DIP, IPV4, SINGLE TAG */
+	{TPM_MATCH_VID_OUTER | TPM_MATCH_PBITS_OUTER | TPM_MATCH_IP_DST | TPM_MATCH_IPV4_PKT,
+	 TPM_API_PRIVATE_MC_DS, TPM_MNG_FLOW_ID_IPV4_MC_TAG_PON,
+	 TPM_MC_VID_PBIT_DIP_STAG_PRI, TPM_ENGINE_C2, TPM_MNG_PRI_LU_TYPE_C2_MC_STAG_VID_PBIT_DIP, 0, 0,
+	 TPM_SINGLE_VLAN, TPM_MC_DATA_TRAFFIC_TYPE, 0},
+	 /* VID +PBIT + DIP, IPV6, SINGLE TAG */
+	{TPM_MATCH_VID_OUTER | TPM_MATCH_PBITS_OUTER | TPM_MATCH_IP_DST | TPM_MATCH_IPV6_PKT,
+	 TPM_API_PRIVATE_MC_DS, TPM_MNG_FLOW_ID_IPV6_MC_TAG_PON,
+	 TPM_MC_VID_PBIT_DIP_STAG_PRI, TPM_ENGINE_C3_A, TPM_MNG_PRI_LU_TYPE_C3_MC_VID_PBIT_STAG_DIP, 0, 0,
+	 TPM_SINGLE_VLAN, TPM_MC_DATA_TRAFFIC_TYPE, 0},
+
+	/* VID + PBIT + DIP, IPV4, DOUBLE TAG */
+	{TPM_MATCH_VID_OUTER | TPM_MATCH_PBITS_OUTER | TPM_MATCH_IP_DST | TPM_MATCH_IPV4_PKT,
+	 TPM_API_PRIVATE_MC_DS, TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON,
+	 TPM_MC_VID_PBIT_DIP_DTAG_PRI, TPM_ENGINE_C2, TPM_MNG_PRI_LU_TYPE_C2_MC_DTAG_VID_PBIT_DIP, 0, 0,
+	 TPM_DOUBLE_VLAN, TPM_MC_DATA_TRAFFIC_TYPE, 0},
+	 /* VID + PBIT + DIP, IPV6, DOUBLE TAG */
+	/* no free C3 hit in IPv6 Multicast, so block this, if PPPoE is not required, then replace it with this
+	{TPM_MATCH_VID_OUTER | TPM_MATCH_PBITS_OUTER | TPM_MATCH_IP_DST | TPM_MATCH_IPV6_PKT,
+	 TPM_API_PRIVATE_MC_DS, TPM_MNG_FLOW_ID_IPV6_MC_TAG_PON,
+	 TPM_MC_VID_PBIT_DIP_DTAG_PRI, TPM_ENGINE_C3_A, TPM_MNG_PRI_LU_TYPE_C3_MC_VID_PBIT_DTAG_DIP, 0, 0,
+	 TPM_DOUBLE_VLAN, TPM_MC_DATA_TRAFFIC_TYPE, 0},
+	 */
+
+	/* INN_VID + INN_PBIT + DIP, IPV4 */
+	{TPM_MATCH_VID_INNER | TPM_MATCH_PBITS_INNER | TPM_MATCH_IP_DST | TPM_MATCH_IPV4_PKT,
+	 TPM_API_PRIVATE_MC_DS, TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON,
+	 TPM_MC_INVID_INPBIT_DIP_PRI, TPM_ENGINE_C2, TPM_MNG_PRI_LU_TYPE_C2_MC_INVID_INPBIT_DIP, 0, 0,
+	 TPM_ANY_VLAN, TPM_MC_DATA_TRAFFIC_TYPE, 0},
+	 /* INN_VID + INN_PBIT + DIP, IPV6 */
+	/* no free C3 hit in IPv6 Multicast, so block this, if PPPoE is not required, then replace it with this
+	{TPM_MATCH_VID_INNER | TPM_MATCH_PBITS_INNER | TPM_MATCH_IP_DST | TPM_MATCH_IPV6_PKT,
+	 TPM_API_PRIVATE_MC_DS, TPM_MNG_FLOW_ID_IPV6_MC_TAG_PON,
+	 TPM_MC_INVID_INPBIT_DIP_PRI, TPM_ENGINE_C3_A, TPM_MNG_PRI_LU_TYPE_C3_MC_INVID_INPBIT_DIP, 0, 0,
+	 TPM_ANY_VLAN, TPM_MC_DATA_TRAFFIC_TYPE, 0},*/
+
 #ifdef CONFIG_MV_ETH_PP2_1 /* Z1 does not support PPPoE proto check */
 	/* Tag + PPPoE + DIP, IPV4 */
 	{TPM_MATCH_PPPOE_PROTO | TPM_MATCH_IP_DST | TPM_MATCH_IPV4_PKT,
@@ -973,6 +1021,10 @@ static int tpm_mng_mc_flow_cfg_update(int flow_cfg_idx)
 		if (tpm_mng_flow_cfg_init[flow_cfg_idx].flow_log_id ==
 		    TPM_MNG_FLOW_ID_IPV4_MC_TAG_PON)
 			log_id_d = TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_STAG_PON;
+	case TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON:
+		if (tpm_mng_flow_cfg_init[flow_cfg_idx].flow_log_id ==
+			TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON)
+			log_id_d = TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_DTAG_PON;
 	case TPM_MNG_FLOW_ID_IPV6_MC_UNTAG_PON:
 		if (tpm_mng_flow_cfg_init[flow_cfg_idx].flow_log_id ==
 		    TPM_MNG_FLOW_ID_IPV6_MC_UNTAG_PON)
@@ -981,6 +1033,10 @@ static int tpm_mng_mc_flow_cfg_update(int flow_cfg_idx)
 		if (tpm_mng_flow_cfg_init[flow_cfg_idx].flow_log_id ==
 		    TPM_MNG_FLOW_ID_IPV6_MC_TAG_PON)
 			log_id_d = TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_STAG_PON;
+	case TPM_MNG_FLOW_ID_IPV6_MC_DTAG_PON:
+		if (tpm_mng_flow_cfg_init[flow_cfg_idx].flow_log_id ==
+			TPM_MNG_FLOW_ID_IPV6_MC_DTAG_PON)
+			log_id_d = TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_DTAG_PON;
 
 		/* Search array index with log_id_d */
 		for (loop_d = 0; loop_d < loop_max; loop_d++) {
@@ -2410,8 +2466,10 @@ int tpm_mng_cap_merge(void)
 		     and there are some default rules could not be merged.
 		  */
 		if ((TPM_MNG_FLOW_ID_IPV4_MC_TAG_PON == flow_id)
+			|| (TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON == flow_id)
 			|| (TPM_MNG_FLOW_ID_IPV4_MC_UNTAG_PON == flow_id)
 			|| (TPM_MNG_FLOW_ID_IPV6_MC_TAG_PON == flow_id)
+			|| (TPM_MNG_FLOW_ID_IPV6_MC_DTAG_PON == flow_id)
 			|| (TPM_MNG_FLOW_ID_IPV6_MC_UNTAG_PON == flow_id)
 			|| (tpm_mng_cap_match_l3_flow(&cap_l3_tmp, flow_id)))
 			continue;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
index 4895827..35cd102 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_api.c
@@ -1711,12 +1711,17 @@ int tpm_sfs_help_mc_match_bm_print(char *b, int cur_off)
 #endif
 	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+SIP+DIP]              %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
 	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+DIP]                  %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+PBIT+DIP+TAG]         %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST | TPM_MATCH_PBITS_OUTER | TPM_MATCH_VID_INNER);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID+PBIT+DIP+2TAG]        %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST | TPM_MATCH_PBITS_OUTER | TPM_MATCH_VID_INNER);
+	o += scnprintf(b+o, s-o, "\t\t[IPV4+VID_IN+PBIT_IN+DIP]       %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_INNER | TPM_MATCH_IP_DST | TPM_MATCH_PBITS_INNER);
 	o += scnprintf(b+o, s-o, "\t\t[IPV4+Tag+DIP]                  %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
 	o += scnprintf(b+o, s-o, "\t\t[IPV4+Untag+DIP]                %#.5X\n", TPM_MATCH_IPV4_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
 	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+SIP+DIP]              %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_SRC | TPM_MATCH_IP_DST);
 	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID+DIP]                  %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+	o += scnprintf(b+o, s-o, "\t\t[IPV6+VID_IN+PBIT_IN+DIP]       %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_INNER | TPM_MATCH_IP_DST | TPM_MATCH_PBITS_INNER);
 	o += scnprintf(b+o, s-o, "\t\t[IPV6+Tag+DIP]                  %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
 	o += scnprintf(b+o, s-o, "\t\t[IPV6+Untag+DIP]                %#.5X\n", TPM_MATCH_IPV6_PKT | TPM_MATCH_VID_OUTER | TPM_MATCH_IP_DST);
+
 	return o;
 }
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
index f04c621..3320ceb 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/sysfs/tpm_sysfs_utils.c
@@ -262,6 +262,7 @@ static struct tpm_enum_str_t g_enum_flow_name[] = {
 	{TPM_MNG_FLOW_ID_NON_IP_MTM_UNTAG_NPON,	 "NON_IP_MTM_UNTAG_NPON"	},
 	{TPM_MNG_FLOW_ID_IPV4_MC_UNTAG_PON,		 "IPV4_MC_UNTAG_PON"		},
 	{TPM_MNG_FLOW_ID_IPV4_MC_TAG_PON,		"IPV4_MC_TAG_PON"		  },
+	{TPM_MNG_FLOW_ID_IPV4_MC_DTAG_PON,		"IPV4_MC_DTAG_PON"		  },
 	{TPM_MNG_FLOW_ID_IPV4_MC_TAG_NPON,		  "IPV4_MC_TAG_NPON"		 },
 	{TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_UNTAG_PON,   "IPV4_UC_BRG_NFRAG_UNTAG_PON"  },
 	{TPM_MNG_FLOW_ID_IPV4_UC_BRG_NFRAG_STAG_PON,	"IPV4_UC_BRG_NFRAG_STAG_PON"   },
@@ -290,6 +291,7 @@ static struct tpm_enum_str_t g_enum_flow_name[] = {
 	{TPM_MNG_FLOW_ID_IPV6_UC_RTR_FRAG_NEX_NPON,	"IPV6_UC_RTR_FRAG_NEX_NPON"	 },
 	{TPM_MNG_FLOW_ID_IPV6_MC_UNTAG_PON,		"IPV6_MC_UNTAG_PON"		 },
 	{TPM_MNG_FLOW_ID_IPV6_MC_TAG_PON,			"IPV6_MC_TAG_PON"		},
+	{TPM_MNG_FLOW_ID_IPV6_MC_DTAG_PON,			"IPV6_MC_DTAG_PON"		},
 	{TPM_MNG_FLOW_ID_IPV6_MC_TAG_NPON,			"IPV6_MC_TAG_NPON"		  },
 	{TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_UNTAG_PON, "IPV6_UC_BRG_NFRAG_UNTAG_PON"   },
 	{TPM_MNG_FLOW_ID_IPV6_UC_BRG_NFRAG_STAG_PON,	"IPV6_UC_BRG_NFRAG_STAG_PON"	},
-- 
1.7.5.4

