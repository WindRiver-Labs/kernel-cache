From 3f02cdda13f3c831baeed5e145bc7df16106e71f Mon Sep 17 00:00:00 2001
From: Uri Eliyahu <uriel@marvell.com>
Date: Sun, 9 Feb 2014 15:08:20 +0200
Subject: [PATCH 1341/1825] fix: pp2: bm pool allocation bug fix

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 861c11b71c0332dcd8662d8804f3cf967778e9b8

	- 8 bytes requierd per each buffer pointer (virt and phys)
	  the bug was that only 4 bytes alloced per buffer pointer
	- due to this bug if we alloced 16000 buffers per pool we
	  got kernal panic during traffic.

Change-Id: I464cfe221686c1d5a59b4604a52a16aa39ffdc48
Signed-off-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5492
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |   11 ++++++-----
 1 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index fe46e2b..9c2567d 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -2772,11 +2772,12 @@ void	*mv_eth_bm_pool_create(int pool, int capacity, MV_ULONG *pPhysAddr)
 	MV_ULONG physAddr;
 	void *pVirt;
 	MV_STATUS status;
+	int size = 2 * sizeof(MV_U32) * capacity;
 
-	pVirt = mvOsIoUncachedMalloc(NULL, sizeof(MV_U32) * capacity, &physAddr, NULL);
+	pVirt = mvOsIoUncachedMalloc(NULL, size, &physAddr, NULL);
 	if (pVirt == NULL) {
-		mvOsPrintf("%s: Can't allocate %d bytes for Long pool #%d\n",
-				__func__, MV_BM_POOL_CAP_MAX * sizeof(MV_U32), pool);
+		mvOsPrintf("%s: Can't allocate %d bytes for pool #%d\n",
+				__func__, size, pool);
 		return NULL;
 	}
 
@@ -2784,13 +2785,13 @@ void	*mv_eth_bm_pool_create(int pool, int capacity, MV_ULONG *pPhysAddr)
 	if (MV_IS_NOT_ALIGN((unsigned)pVirt, MV_BM_POOL_PTR_ALIGN)) {
 		mvOsPrintf("memory allocated for BM pool #%d is not %d bytes aligned\n",
 					pool, MV_BM_POOL_PTR_ALIGN);
-		mvOsIoCachedFree(NULL, sizeof(MV_U32) * capacity, physAddr, pVirt, 0);
+		mvOsIoCachedFree(NULL, size, physAddr, pVirt, 0);
 		return NULL;
 	}
 	status = mvBmPoolInit(pool, pVirt, physAddr, capacity);
 	if (status != MV_OK) {
 		mvOsPrintf("%s: Can't init #%d BM pool. status=%d\n", __func__, pool, status);
-		mvOsIoCachedFree(NULL, sizeof(MV_U32) * capacity, physAddr, pVirt, 0);
+		mvOsIoCachedFree(NULL, size, physAddr, pVirt, 0);
 		return NULL;
 	}
 
-- 
1.7.5.4

