From 2e276981e0496217430e235bceaf82a0315a33e9 Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Thu, 27 Feb 2014 15:18:47 +0800
Subject: [PATCH 1411/1825] alp: pon: support basic sysfs when pon module is
 loaded

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 6b650b63c7b16371e78566d7dbbcc036ed5b9033

Change-Id: Ie46f41a8f07a4549df0513621531dc095ce9be53
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5979
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_pon/perf/epon/eponOnuLnxKsUI.c              |    8 +-
 .../mv_pon/perf/gpon/gponOnuLnxKsUI.c              |   38 ++--
 .../mv_drivers_lsp/mv_pon/perf/ponOnuLnxKsMI.c     |  270 +++++++++++++++++++-
 3 files changed, 286 insertions(+), 30 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c
index 48f91e4..4bc483e 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c
@@ -2793,10 +2793,10 @@ int epon_sysfs_init(void)
 	int err;
 	struct device *pd;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "epon");
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
 	if (!pd) {
-		platform_device_register_simple("epon", -1, NULL, 0);
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "epon");
+		platform_device_register_simple("pon", -1, NULL, 0);
+		pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
 	}
 
 	if (!pd) {
@@ -2831,7 +2831,7 @@ void epon_sysfs_delete(void)
 {
 	struct device *pd;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "epon");
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
 	if (!pd) {
 		printk(KERN_ERR "%s: cannot find epon device\n", __func__);
 		return;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c
index 4d4136c..2e5331e 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c
@@ -3598,7 +3598,7 @@ void onuGponUiT01IntervalConfig(MV_U32 interval)
 				  interval,
 				  0);
 	} else
-		printk(KERN_INFO KERN_ERR "GPON T01 timer is running, the value is not accepted\n");
+		printk(KERN_ERR "GPON T01 timer is running, the value is not accepted\n");
 
 }
 
@@ -3626,7 +3626,7 @@ void onuGponUiT02IntervalConfig(MV_U32 interval)
 				  interval,
 				  0);
 	} else
-		printk(KERN_INFO KERN_ERR "GPON T02 timer is running, the value is not accepted\n");
+		printk(KERN_ERR "GPON T02 timer is running, the value is not accepted\n");
 
 }
 
@@ -3992,9 +3992,9 @@ static ssize_t misc_store(struct device *dev,
 		else if (!strcmp(name, "randomDelaylegacyMode"))        /* legacy mode */
 			onuGponUiRandomDelayLegacyModeConfig((MV_U32)param1);
 		else
-			printk(KERN_INFO KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+			printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
 	} else
-		printk(KERN_INFO KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
 
 	raw_local_irq_restore(flags);
 
@@ -4171,9 +4171,9 @@ static ssize_t protocol_store(struct device *dev,
 		else if (!strcmp(name, "activeTxBm"))                           /* bitmap, valid */
 			onuGponUiDebugManagerActiveTxBitmapSet((MV_U32)param1, (MV_U32)param2);
 		else
-			printk(KERN_INFO KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+			printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
 	} else
-		printk(KERN_INFO KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
 
 	raw_local_irq_restore(flags);
 
@@ -4704,54 +4704,54 @@ int __devinit gpon_sysfs_init(void)
 	int err;
 	struct device *pd;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "gpon");
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
 	if (!pd) {
-		platform_device_register_simple("gpon", -1, NULL, 0);
-		pd = bus_find_device_by_name(&platform_bus_type, NULL, "gpon");
+		platform_device_register_simple("pon", -1, NULL, 0);
+		pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
 	}
 
 	if (!pd) {
-		printk(KERN_INFO KERN_ERR "%s: cannot find gpon device\n", __func__);
+		printk(KERN_ERR "%s: cannot find gpon device\n", __func__);
 		pd = &platform_bus;
 	}
 
 	err = sysfs_create_group(&pd->kobj, &gpon_info_group);
 	if (err) {
-		printk(KERN_INFO KERN_INFO "sysfs group failed %d\n", err);
+		printk(KERN_INFO "sysfs group failed %d\n", err);
 		goto out;
 	}
 
 	err = sysfs_create_group(&pd->kobj, &gpon_pm_group);
 	if (err) {
-		printk(KERN_INFO KERN_INFO "sysfs group failed %d\n", err);
+		printk(KERN_INFO "sysfs group failed %d\n", err);
 		goto out;
 	}
 
 	err = sysfs_create_group(&pd->kobj, &data_group);
 	if (err) {
-		printk(KERN_INFO KERN_INFO "sysfs group failed %d\n", err);
+		printk(KERN_INFO "sysfs group failed %d\n", err);
 		goto out;
 	}
 
 	err = sysfs_create_group(&pd->kobj, &introp_group);
 	if (err) {
-		printk(KERN_INFO KERN_INFO "sysfs group failed %d\n", err);
+		printk(KERN_INFO "sysfs group failed %d\n", err);
 		goto out;
 	}
 
 	err = sysfs_create_group(&pd->kobj, &protocol_group);
 	if (err) {
-		printk(KERN_INFO KERN_INFO "sysfs group failed %d\n", err);
+		printk(KERN_INFO "sysfs group failed %d\n", err);
 		goto out;
 	}
 
 	err = sysfs_create_group(&pd->kobj, &misc_group);
 	if (err) {
-		printk(KERN_INFO KERN_INFO "sysfs group failed %d\n", err);
+		printk(KERN_INFO "sysfs group failed %d\n", err);
 		goto out;
 	}
 
-	printk(KERN_INFO KERN_INFO "= PON Module SYS FS Init ended successfully =\n");
+	printk(KERN_INFO "= PON Module SYS FS Init ended successfully =\n");
 out:
 	return err;
 }
@@ -4760,7 +4760,7 @@ void gpon_sysfs_delete(void)
 {
 	struct device *pd;
 
-	pd = bus_find_device_by_name(&platform_bus_type, NULL, "gpon");
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
 	if (!pd) {
 		printk(KERN_INFO "%s: cannot find gpon device\n", __func__);
 		return;
@@ -4773,7 +4773,7 @@ void gpon_sysfs_delete(void)
 	sysfs_remove_group(&pd->kobj, &protocol_group);
 	sysfs_remove_group(&pd->kobj, &misc_group);
 
-	printk(KERN_INFO KERN_INFO "= PON Module SYS FS Remove ended successfully =\n");
+	printk(KERN_INFO "= PON Module SYS FS Remove ended successfully =\n");
 }
 
 /*******************************************************************************
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/ponOnuLnxKsMI.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/ponOnuLnxKsMI.c
index 3318ac9..7fecf69 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/ponOnuLnxKsMI.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/ponOnuLnxKsMI.c
@@ -104,11 +104,8 @@ struct device *pon_udev_dev;
 
 struct fasync_struct *mvPonAsqueue;
 
-/* Export Functions
-   ------------------------------------------------------------------------------*/
 extern spinlock_t onuPonIrqLock;
 
-
 /*******************************************************************************
 **
 **  mvPonMiInit
@@ -287,6 +284,8 @@ long mvPonCdevIoctl(struct file *filp, unsigned int cmd, unsigned long arg)
 				goto ioctlErr;
 			}
 
+			ponDev.drvMode = drvMode;
+
 			ret = mvPonMiInit();
 			if (ret != 0) {
 				spin_unlock_irqrestore(&onuPonIrqLock, flags);
@@ -296,7 +295,6 @@ long mvPonCdevIoctl(struct file *filp, unsigned int cmd, unsigned long arg)
 					   (drvMode == E_PON_DRIVER_EPON_MODE) ? "EPON" : "GPON");
 				goto ioctlErr;
 			}
-			ponDev.drvMode = drvMode;
 
 			spin_unlock_irqrestore(&onuPonIrqLock, flags);
 
@@ -569,6 +567,255 @@ MV_STATUS onuPonMngInterfaceRelease(void)
 
 /*******************************************************************************
 **
+**  onuPonUiInitHelpShow
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function print PON init help
+**
+**  PARAMETERS:  char *buf
+**
+**  OUTPUTS:     char *buf
+**
+**  RETURNS:     message length
+**
+*******************************************************************************/
+int onuPonUiInitHelpShow(char *buf)
+{
+	int off = 0;
+
+	off += mvOsSPrintf(buf + off, "============================================================================\n");
+	off += mvOsSPrintf(buf + off, "PON init configration\n");
+	off += mvOsSPrintf(buf + off, "============================================================================\n");
+	off += mvOsSPrintf(buf + off, " echo [mode]             > start   - start PON module\n");
+	off += mvOsSPrintf(buf + off, "   0:undefined, 1: EPON, 2: GPON\n");
+
+	return off;
+}
+
+/*******************************************************************************
+**
+**  onuEponUiDebugReadReg
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function starts PON module according to input mode
+**
+**  PARAMETERS:  MV_U32 drvMode
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     None
+**
+*******************************************************************************/
+void onuPonUiInitStart(MV_U32 drvMode)
+{
+	int ret = -EINVAL;
+	unsigned long flags;
+
+	if (ponDev.drvMode == E_PON_DRIVER_UNDEF_MODE) {
+		/* The driver only alows transition from Undefined to EPON or GPON mode */
+
+		/* pre-setup without spin lock */
+		if (drvMode == E_PON_DRIVER_EPON_MODE)
+			ponDev.func.ponOnuPreSetup = onuEponPreSetup;
+		else if (drvMode == E_PON_DRIVER_GPON_MODE)
+			ponDev.func.ponOnuPreSetup = onuGponPreSetup;
+		else {
+			mvPonPrint(PON_PRINT_ERROR, PON_INIT_MODULE,
+				   "ERROR: (%s:%d) requested unsupported PON mode 0x%x\n",
+				   __FILE_DESC__, __LINE__, drvMode);
+			return;
+		}
+
+		ret = mvPonMiPreInit();
+		if (ret != MV_OK) {
+			mvPonPrint(PON_PRINT_ERROR, PON_INIT_MODULE,
+				   "ERROR: (%s:%d) error init when switch to %s mode\n",
+				   __FILE_DESC__, __LINE__,
+				   (drvMode == E_PON_DRIVER_EPON_MODE) ? "EPON" : "GPON");
+			return;
+		}
+
+		spin_lock_irqsave(&onuPonIrqLock, flags);
+
+		if (drvMode == E_PON_DRIVER_EPON_MODE) {
+			ponDev.func.ponOnuSetup = onuEponSetup;
+			ponDev.func.ponOnuSwitchOn = onuEponSwitchOn;
+			ponDev.func.ponOnuOperate = onuEponOperate;
+			ponDev.func.userInterfaceCreate = onuEponUsrInterfaceCreate;
+			ponDev.func.usrInterfaceRelease = onuEponUsrInterfaceRelease;
+			ponDev.func.rtosResourceRelease = onuEponRtosResourceRelease;
+			ponDev.func.memRelease = 0;
+			ponDev.func.apiStatusNotifyRegister = onuEponApiStatusNotifyRegister;
+			ponDev.func.apiLinkStatusCallbackRegister = onuEponApiLinkStatusCallbackRegister;
+			ponDev.func.cdevIoctl = mvEponCdevIoctl;
+
+		} else if (drvMode == E_PON_DRIVER_GPON_MODE) {
+			ponDev.func.ponOnuSetup = onuGponSetup;
+			ponDev.func.ponOnuSwitchOn = onuGponSwitchOn;
+			ponDev.func.ponOnuOperate = onuGponOperate;
+			ponDev.func.userInterfaceCreate = onuGponUsrInterfaceCreate;
+			ponDev.func.usrInterfaceRelease = onuGponUsrInterfaceRelease;
+			ponDev.func.rtosResourceRelease = onuGponRtosResourceRelease;
+			ponDev.func.memRelease = onuPonMemRelease;
+			ponDev.func.apiStatusNotifyRegister = onuGponApiStatusNotifyRegister;
+			ponDev.func.apiLinkStatusCallbackRegister = onuGponApiLinkStatusCallbackRegister;
+			ponDev.func.cdevIoctl = mvGponCdevIoctl;
+
+		} else {
+			spin_unlock_irqrestore(&onuPonIrqLock, flags);
+			mvPonPrint(PON_PRINT_ERROR, PON_API_MODULE,
+				   "ERROR: (%s:%d) requested unsupported PON mode 0x%x\n",
+				   __FILE_DESC__, __LINE__, drvMode);
+			return;
+		}
+
+		ponDev.drvMode = drvMode;
+
+		ret = mvPonMiInit();
+		if (ret != 0) {
+			spin_unlock_irqrestore(&onuPonIrqLock, flags);
+			mvPonPrint(PON_PRINT_ERROR, PON_API_MODULE,
+				   "ERROR: (%s:%d) error switching to %s mode\n",
+				   __FILE_DESC__, __LINE__,
+				   (drvMode == E_PON_DRIVER_EPON_MODE) ? "EPON" : "GPON");
+			return;
+		}
+
+		spin_unlock_irqrestore(&onuPonIrqLock, flags);
+
+	} else {
+		/* Switching between EPON-GPON modes requires reboot initiated by US application */
+		mvPonPrint(PON_PRINT_ERROR, PON_API_MODULE,
+			   "ERROR: (%s:%d) command onuPonUiInitStart is not supported in this mode\n",
+			   __FILE_DESC__, __LINE__);
+		return;
+	}
+
+}
+
+static ssize_t pon_init_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	const char *name = attr->attr.name;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
+	if (!strcmp(name, "help"))
+		return onuPonUiInitHelpShow(buf);
+	else
+		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+
+	return 0;
+}
+
+static ssize_t pon_init_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t len)
+{
+	const char *name = attr->attr.name;
+	unsigned long flags;
+	unsigned int param = 0;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+	sscanf(buf, "%d", &param);
+
+	raw_local_irq_save(flags);
+
+	if (!strcmp(name, "start"))
+		onuPonUiInitStart((MV_U32)param);
+	else
+		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
+
+	raw_local_irq_restore(flags);
+
+	return len;
+}
+
+static DEVICE_ATTR(help,  S_IRUSR, pon_init_show, pon_init_store);
+static DEVICE_ATTR(start, S_IWUSR, pon_init_show, pon_init_store);
+
+static struct attribute *pon_init_attrs[] = {
+	&dev_attr_start.attr,
+	&dev_attr_help.attr,
+	NULL
+};
+
+static struct attribute_group pon_init_group = {
+	.name   = "init",
+	.attrs  = pon_init_attrs,
+};
+
+/*******************************************************************************
+**
+**  mvPonSysfsInit
+**  ___________________________________________________________________________
+**
+**  DESCRIPTION: The function init PON basic sysfs
+**
+**  PARAMETERS:  void
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     (0)
+**
+*******************************************************************************/
+int mvPonSysfsInit(void)
+{
+	int err;
+	struct device *pd;
+
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
+	if (!pd) {
+		platform_device_register_simple("pon", -1, NULL, 0);
+		pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
+	}
+
+	if (!pd) {
+		printk(KERN_ERR "%s: cannot find pon device\n", __func__);
+		pd = &platform_bus;
+	}
+
+
+	err = sysfs_create_group(&pd->kobj, &pon_init_group);
+	if (err) {
+		printk(KERN_INFO "sysfs init group failed %d\n", err);
+		return err;
+	}
+
+	return MV_OK;
+}
+
+/*******************************************************************************
+**
+**  mvPonSysfsInitRelease
+**  ___________________________________________________________________________
+**
+**  DESCRIPTION: The function release PON basic sysfs
+**
+**  PARAMETERS:  void
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     (0)
+**
+*******************************************************************************/
+void mvPonSysfsInitRelease(void)
+{
+	struct device *pd;
+
+	pd = bus_find_device_by_name(&platform_bus_type, NULL, "pon");
+	if (!pd) {
+		printk(KERN_INFO "%s: cannot find pon device\n", __func__);
+		return;
+	}
+
+	sysfs_remove_group(&pd->kobj, &pon_init_group);
+
+
+	printk(KERN_INFO "= PON module init sysfs remove ended successfully =\n");
+}
+
+/*******************************************************************************
+**
 **  mvOnuPonModule_init
 **  ____________________________________________________________________________
 **
@@ -585,16 +832,22 @@ int __init mvOnuPonModule_init(void)
 {
 	MV_STATUS status;
 
-	printk(KERN_INFO "= PON Module Init =\n");
+	printk(KERN_INFO "= PON module init =\n");
 
 	memset(&ponDev, 0, sizeof(ponDev));
 	status = onuPonMngInterfaceCreate();
 	if (status != MV_OK) {
-		printk(KERN_ERR "= PON Module Init FAILED =\n");
+		printk(KERN_ERR "= PON module management interface init failed =\n");
 		return status;
 	}
 
-	printk(KERN_INFO "= PON Module Init ended successfully =\n");
+	status = mvPonSysfsInit();
+	if (status != MV_OK) {
+		printk(KERN_ERR "= PON module sysfs init failed =\n");
+		return status;
+	}
+
+	printk(KERN_INFO "= PON module init ended successfully =\n");
 	return 0;
 }
 
@@ -631,6 +884,9 @@ void __exit mvOnuPonModule_exit(void)
 	/* release mng interface */
 	onuPonMngInterfaceRelease();
 
+	/* release PON basic sysfs */
+	mvPonSysfsInitRelease();
+
 	return;
 }
 
-- 
1.7.5.4

