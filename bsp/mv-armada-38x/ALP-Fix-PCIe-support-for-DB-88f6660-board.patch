From 7ff26b2b3c220e5dc5c71fb06f64c2d2b516c54a Mon Sep 17 00:00:00 2001
From: Kosta Zertsekel <konszert@marvell.com>
Date: Sun, 26 May 2013 14:49:36 +0300
Subject: [PATCH 0679/1825] ALP: Fix PCIe support for DB-88f6660 board

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 1b980f6edd599e6c9ce895e7caa7021408f16c65

Signed-off-by: Kosta Zertsekel <konszert@marvell.com>
Change-Id: I96556bb56b1d97afac4f8fe76f08a476a8040449
Reviewed-on: http://vgitil04.il.marvell.com:8080/1970
Reviewed-by: Star_Automation <star@marvell.com>
Reviewed-by: Eran Ben-Avi <benavi@marvell.com>
Tested-by: Eran Ben-Avi <benavi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c |   43 ++--
 arch/arm/mach-avantalp/pex.c                |  327 ++++++++-------------------
 arch/arm/mach-avantalp/sysmap.c             |    2 +-
 3 files changed, 117 insertions(+), 255 deletions(-)

diff --git a/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c b/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c
index e04ed71..3e2b83f 100644
--- a/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c
+++ b/arch/arm/mach-avantalp/mv_hal_if/mvSysPex.c
@@ -69,38 +69,29 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "pex/mvPex.h"
 #include "pex/mvPexRegs.h"
 
-MV_STATUS mvPexTargetWinGet(MV_U32 pexIf, MV_U32 winNum, MV_PEX_DEC_WIN *pAddrDecWin);
-
-
-/*******************************************************************************
-* mvSysPexInit - Initialize the Pex subsystem
-*
-* DESCRIPTION:
-*
-* INPUT:
-*       None
-* OUTPUT:
-*		None
-* RETURN:
-*       None
-*
-*******************************************************************************/
 MV_STATUS mvSysPexInit(MV_U32 pexIf, MV_PEX_TYPE pexType)
 {
 	MV_PEX_HAL_DATA halData;
 	MV_UNIT_WIN_INFO addrWinMap[MAX_TARGETS + 1];
-	MV_STATUS status;
 
-	status = mvCtrlAddrWinMapBuild(addrWinMap, MAX_TARGETS + 1);
-	if(status == MV_OK)
-		status = mvPexWinInit(pexIf, pexType, addrWinMap);
+	if (mvCtrlAddrWinMapBuild(addrWinMap, MAX_TARGETS + 1) != MV_OK) {
+		mvOsPrintf("%s: mvCtrlAddrWinMapBuild failed\n", __func__);
+		return MV_FAIL;
+	}
 
-	if(status == MV_OK) {
-		halData.ctrlModel = mvCtrlModelGet();
-		halData.maxPexIf = mvCtrlPexMaxIfGet();
-		status = mvPexInit(pexIf, pexType, &halData);
+	if (mvPexWinInit(pexIf, pexType, addrWinMap) != MV_OK) {
+		mvOsPrintf("%s: mvPexWinInit failed\n", __func__);
+		return MV_FAIL;
 	}
 
-	return status;
-}
+	halData.ctrlModel  = mvCtrlModelGet();
+	halData.ctrlFamily = mvCtrlDevFamilyIdGet(halData.ctrlModel);
+	halData.maxPexIf   = mvCtrlPexMaxIfGet();
+
+	if (mvPexInit(pexIf, pexType, &halData) != MV_OK) {
+		mvOsPrintf("%s: mvPexInit(pexIf = %d) failed\n", __func__, pexIf);
+		return MV_FAIL;
+	}
 
+	return MV_OK;
+}
diff --git a/arch/arm/mach-avantalp/pex.c b/arch/arm/mach-avantalp/pex.c
index 1c89a96..eba006d 100644
--- a/arch/arm/mach-avantalp/pex.c
+++ b/arch/arm/mach-avantalp/pex.c
@@ -40,15 +40,15 @@
 #include "mvSysPexApi.h"
 
 #ifdef MV_DEBUG
-#	define DB(x) x
+#define DB(x) x
 #else
-#	define DB(x)
+#define DB(x)
 #endif
 
 #define MV_PEX_MASK_ABCD              (BIT24 | BIT25 | BIT26 | BIT27)
 
-static int __init mv_map_irq_0(struct pci_dev *dev, u8 slot, u8 pin);
-static int __init mv_map_irq_1(struct pci_dev *dev, u8 slot, u8 pin);
+static int __init mv_map_irq_0(const struct pci_dev *dev, u8 slot, u8 pin);
+static int __init mv_map_irq_1(const struct pci_dev *dev, u8 slot, u8 pin);
 
 extern u32 mv_pci_mem_size_get(int ifNum);
 extern u32 mv_pci_io_base_get(int ifNum);
@@ -63,8 +63,7 @@ static struct platform_device mv_pex = {
 	.num_resources	= 0,
 };
 
-static void* mv_get_irqmap_func[] __initdata =
-{
+static void *mv_get_irqmap_func[] __initdata = {
 	mv_map_irq_0,
 	mv_map_irq_1,
 };
@@ -72,114 +71,76 @@ static void* mv_get_irqmap_func[] __initdata =
 void __init mv_pex_preinit(void)
 {
 	static MV_U32 pex0flg = 0;
-	unsigned int pciIf, temp;
+	unsigned int pci_if;
 	MV_ADDR_WIN pciIoRemap;
 	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
-	MV_U32 pexHWInf = 0;
-
-	for (pciIf = 0; pciIf < boardPexInfo->boardPexIfNum; pciIf++)
-	{
-		/* Translate logical interface number to physical */
-		pexHWInf = 0;
 
-		if (MV_FALSE == mvUnitMapIsPexMine(pexHWInf))
+	for (pci_if = 0; pci_if < boardPexInfo->boardPexIfNum; pci_if++) {
+		if (mvUnitMapIsPexMine(pci_if) == MV_FALSE)
 			continue;
 
-		printk("PCI-E: Cheking physical bus #%d (controller #%d): ", pciIf, pexHWInf);
-		if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pexHWInf))
-		{
-			printk("Disabled\n");
+		pr_info("PCIe: Cheking physical bus #%d: ", pci_if);
+		if (mvCtrlPwrClckGet(PEX_UNIT_ID, pci_if) == MV_FALSE) {
+			pr_info("Disabled\n");
 			continue;
 		}
 
-		/* init the PCI interface */
-		temp = mvSysPexInit(pexHWInf, MV_PEX_ROOT_COMPLEX);
-
-		if (MV_NO_SUCH == temp)
-		{
-			printk("Enabled - No Link\n");
-			/* No Link - shutdown interface */
-			mvCtrlPwrClckSet(PEX_UNIT_ID, pexHWInf, MV_FALSE);;
+		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX) != MV_OK) {
+			pr_warn("%s: Error: mvSysPexInit(%d) failed\n", __func__, pci_if);
+			mvCtrlPwrClckSet(PEX_UNIT_ID, pci_if, MV_FALSE);
 			continue;
 		}
-		else if ((MV_OK != temp) && (MV_NO_SUCH != temp)){
-			printk("Init FAILED!!!\n");
-			printk("PCI-E %d: Init Failed.\n", pexHWInf);
-		}
 
-		printk("Enabled - Link UP\n");
+		pr_info("PCIe %d enabled - link up\n", pci_if);
+
 		/* Assign bus number 0 to first active/available bus */
 		if (pex0flg == 0) {
-			mvPexLocalBusNumSet(pexHWInf, 0x0);
+			mvPexLocalBusNumSet(pci_if, 0x0);
 			pex0flg = 1;
 		}
 
-		MV_REG_BIT_SET(PEX_MASK_REG(pexHWInf), MV_PEX_MASK_ABCD);
-		if (mv_is_pci_io_mapped(pexHWInf))
-		{
-			pciIoRemap.baseLow = mv_pci_io_base_get(pexHWInf) - IO_SPACE_REMAP;
+		MV_REG_BIT_SET(PEX_MASK_REG(pci_if), MV_PEX_MASK_ABCD);
+
+		if (mv_is_pci_io_mapped(pci_if)) {
+			pciIoRemap.baseLow  = mv_pci_io_base_get(pci_if) - IO_SPACE_REMAP;
 			pciIoRemap.baseHigh = 0;
-			pciIoRemap.size = mv_pci_io_size_get(pexHWInf);
-			mvCpuIfPexRemap(mv_pci_io_target_get(pexHWInf), &pciIoRemap);
+			pciIoRemap.size     = mv_pci_io_size_get(pci_if);
+			mvCpuIfPexRemap(mv_pci_io_target_get(pci_if), &pciIoRemap);
 		}
 	}
 }
 
 void mv_pex_reinit(void)
 {
+	MV_BOARD_PEX_INFO *boardPexInfo = mvBoardPexInfoGet();
 	static MV_U32 pex0flg = 0;
-	unsigned int pciIf, temp;
-	MV_ADDR_WIN pciIoRemap;
-	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
-	MV_U32 pexHWInf = 0;
+	unsigned int pci_if;
 
-	for (pciIf = 0; pciIf < boardPexInfo->boardPexIfNum; pciIf++)
-	{
-		/* Translate logical interface number to physical */
-		pexHWInf = 0;
-
-		if (MV_FALSE == mvUnitMapIsPexMine(pexHWInf))
+	for (pci_if = 0; pci_if < boardPexInfo->boardPexIfNum; pci_if++) {
+		if (mvUnitMapIsPexMine(pci_if) == MV_FALSE)
 			continue;
 
-		if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pexHWInf))
+		if (mvCtrlPwrClckGet(PEX_UNIT_ID, pci_if) == MV_FALSE)
 			continue;
 
-		/* init the PCI interface */
-		temp = mvSysPexInit(pexHWInf, MV_PEX_ROOT_COMPLEX);
-
-		if (MV_NO_SUCH == temp)
-		{
-			/* No Link - shutdown interface */
-			mvCtrlPwrClckSet(PEX_UNIT_ID, pexHWInf, MV_FALSE);;
+		if (mvSysPexInit(pci_if, MV_PEX_ROOT_COMPLEX) != MV_OK) {
+			pr_warn("%s: Error: mvSysPexInit(%d) failed\n", __func__, pci_if);
+			mvCtrlPwrClckSet(PEX_UNIT_ID, pci_if, MV_FALSE);
 			continue;
 		}
 
 		/* Assign bus number 0 to first active/available bus */
 		if (pex0flg == 0) {
-			mvPexLocalBusNumSet(pexHWInf, 0x0);
+			mvPexLocalBusNumSet(pci_if, 0x0);
 			pex0flg = 1;
 		}
 
-		MV_REG_BIT_SET(PEX_MASK_REG(pexHWInf), MV_PEX_MASK_ABCD);
-		if (mv_is_pci_io_mapped(pexHWInf))
-		{
-			pciIoRemap.baseLow = mv_pci_io_base_get(pexHWInf) - IO_SPACE_REMAP;
-			pciIoRemap.baseHigh = 0;
-			pciIoRemap.size = mv_pci_io_size_get(pexHWInf);
-			mvCpuIfPexRemap(mv_pci_io_target_get(pexHWInf), &pciIoRemap);
-		}
+		MV_REG_BIT_SET(PEX_MASK_REG(pci_if), MV_PEX_MASK_ABCD);
 	}
 }
 
-
-/* Currentlly the PCI config read/write are implemented as read modify write
-   to 32 bit.
-   TBD: adjust it to realy use 1/2/4 byte(partial) read/write, after the pex
-	read config WA will be removed.
-*/
-static int mv_pci_read_config(struct pci_bus *bus,
-				  unsigned int devfn, int where,
-				  int size, u32 *val)
+static int mv_pci_read_config(struct pci_bus *bus, unsigned int devfn,
+			      int where, int size, u32 *val)
 {
 	u32 bus_num,func,regOff,dev_no,temp, localBus;
 	struct pci_sys_data *sysdata = (struct pci_sys_data *)bus->sysdata;
@@ -194,39 +155,38 @@ static int mv_pci_read_config(struct pci_bus *bus,
 
 	/* don't return for our device */
 	localBus = mvPexLocalBusNumGet(pciIf);
-	if ((dev_no == 0) && ( bus_num == localBus))
-	{
-		DB(printk("PCI %d read from our own dev return 0xffffffff \n", pciIf));
+	if (dev_no == 0 && bus_num == localBus) {
+		DB(pr_info("PCI %d read from our own dev return 0xffffffff\n", pciIf));
 		return 0xffffffff;
 	}
 
 	func = PCI_FUNC(devfn);
-	regOff = (MV_U32)where & (PXCAR_REG_NUM_MASK | PXCAR_REAL_EXT_REG_NUM_MASK); /* total of 12 bits: 8 legacy + 4 extended */
+
+	/* total of 12 bits: 8 legacy + 4 extended */
+	regOff = (MV_U32)where & (PXCAR_REG_NUM_MASK | PXCAR_REAL_EXT_REG_NUM_MASK);
 
 	temp = (u32) mvPexConfigRead(pciIf, bus_num, dev_no, func, regOff);
 	switch (size) {
-		case 1:
-			temp = (temp >>  (8*(where & 0x3))) & 0xff;
-			break;
-
-		case 2:
-			temp = (temp >>  (8*(where & 0x2))) & 0xffff;
-			break;
-
-		default:
-			break;
+	case 1:
+		temp = (temp >> (8 * (where & 0x3))) & 0xff;
+		break;
+	case 2:
+		temp = (temp >> (8 * (where & 0x2))) & 0xffff;
+		break;
+	default:
+		break;
 	}
 
 	*val = temp;
 
-	DB(printk(KERN_INFO "PCI %2d read : (b.d.f) = (%2d,%2d,%2d); reg = %4d: val = 0x%08x\n",
+	DB(pr_info("PCI %2d read : (b.d.f) = (%2d,%2d,%2d); reg = %4d: val = 0x%08x\n",
 		  pciIf, bus_num, dev_no, func, regOff, temp));
 
 	return 0;
 }
 
-static int mv_pci_write_config(struct pci_bus *bus, unsigned int devfn, int where,
-                           int size, u32 val)
+static int mv_pci_write_config(struct pci_bus *bus, unsigned int devfn,
+			       int where, int size, u32 val)
 {
 	u32 bus_num,func,regOff,dev_no,temp, mask , shift;
 	struct pci_sys_data *sysdata = (struct pci_sys_data *)bus->sysdata;
@@ -234,36 +194,33 @@ static int mv_pci_write_config(struct pci_bus *bus, unsigned int devfn, int wher
 
 	if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pciIf))
 		return 0xFFFFFFFF;
+
 	bus_num = bus->number;
 	dev_no = PCI_SLOT(devfn);
 	func = PCI_FUNC(devfn);
-	regOff = (MV_U32)where & (PXCAR_REG_NUM_MASK | PXCAR_REAL_EXT_REG_NUM_MASK); /* total of 12 bits: 8 legacy + 4 extended */
 
-	DB(printk(KERN_INFO "PCI %2d write: (b.d.f) = (%2d,%2d,%2d); reg = %4d: val = 0x%08x\n",
+	/* total of 12 bits: 8 legacy + 4 extended */
+	regOff = (MV_U32)where & (PXCAR_REG_NUM_MASK | PXCAR_REAL_EXT_REG_NUM_MASK);
+
+	DB(pr_info("PCI %2d write: (b.d.f) = (%2d,%2d,%2d); reg = %4d: val = 0x%08x\n",
 		  pciIf, bus_num, dev_no, func, regOff, val));
 	if (size != 4)
-	{
 		temp = (u32) mvPexConfigRead(pciIf, bus_num, dev_no, func, regOff);
-	}
 	else
-	{
 		temp = val;
-	}
 
 	switch (size) {
-		case 1:
-			shift = (8*(where & 0x3));
-			mask = 0xff;
-			break;
-		case 2:
-			shift = (8*(where & 0x2));
-			mask = 0xffff;
-			break;
-
-		default:
-			shift = 0;
-			mask = 0xffffffff;
-			break;
+	case 1:
+		shift = (8*(where & 0x3));
+		mask = 0xff;
+		break;
+	case 2:
+		shift = (8*(where & 0x2));
+		mask = 0xffff;
+		break;
+	default:
+		shift = 0;
+		mask = 0xffffffff;
 	}
 
 	temp = (temp & (~(mask<<shift))) | ((val & mask) << shift);
@@ -279,85 +236,53 @@ static struct pci_ops mv_pci_ops = {
 int __init mv_pex_setup(int nr, struct pci_sys_data *sys)
 {
 	struct resource *res;
-	u32 membase, iobase, index = 0;
-	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
-	MV_U32 pexHWInf = 0;
+	u32 mem_base, mem_size;
 
-	/* Translate logical interface number to physical */
-	pexHWInf = 0;
-
-	if (MV_FALSE == mvUnitMapIsPexMine(pexHWInf))
+	if (mvUnitMapIsPexMine(nr) == MV_FALSE)
 		return 0;
 
-	/* Check if this interface is used or not */
-	if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pexHWInf))
+	if (mvCtrlPwrClckGet(PEX_UNIT_ID, nr) == MV_FALSE)
 		return 0;
 
-	/* Allocate resources memory */
-	res = kmalloc(sizeof(struct resource) * 2, GFP_KERNEL);
-	if (!res)
-	{
-		panic("PCI: unable to alloc resources");
+	res = kcalloc(1, sizeof(struct resource) * 2, GFP_KERNEL);
+	if (!res) {
+		panic("%s: memory alloc failed\n", __func__);
 		return 0;
 	}
-	memset(res, 0, sizeof(struct resource) * 2);
-
-	/* Save the H/W if number for this PEX bus */
-	sys->mv_controller_num = pexHWInf;
-	sys->map_irq = mv_get_irqmap_func[sys->mv_controller_num];
-
-	membase = mv_pci_mem_base_get(sys->mv_controller_num);
-	if (mv_is_pci_io_mapped(sys->mv_controller_num))
-	{
-		iobase = mv_pci_io_base_get(sys->mv_controller_num);
-		res[index].start = iobase - IO_SPACE_REMAP;
-		res[index].end   = iobase - IO_SPACE_REMAP + mv_pci_io_size_get(sys->mv_controller_num)-1;
-		res[index].name  = "PCIx IO Primary";
-		res[index].flags = IORESOURCE_IO;
-		if (request_resource(&ioport_resource, &res[index]))
-		{
-			printk ("IO Request resource failed - Pci If %x\n",nr);
-		}
-		else
-			index++;
-	}
-	res[index].start = membase;
-	res[index].end   = membase + mv_pci_mem_size_get(sys->mv_controller_num)-1;
-	res[index].name  = "PCIx Memory Primary";
-	res[index].flags = IORESOURCE_MEM;
-
-	if (request_resource(&iomem_resource, &res[index]))
-	{
-		printk ("Memory Request resource failed - Pci If %x\n",nr);
-	}
 
-	if (index > 0) {
-		sys->io_offset = 0x0;
-		pci_add_resource_offset(&sys->resources, &res[0],
-		    sys->io_offset);
-		pci_add_resource_offset(&sys->resources, &res[1],
-		    sys->mem_offset);
-	} else
-		pci_add_resource_offset(&sys->resources, &res[0],
-		    sys->mem_offset);
+	/* Save the HW iface number for this PEX bus */
+	sys->mv_controller_num = nr;
+	sys->map_irq = mv_get_irqmap_func[nr];
+
+	mem_base  = mv_pci_mem_base_get(nr);
+	mem_size  = mv_pci_mem_size_get(nr);
+
+	res->start = mem_base;
+	res->end   = mem_base + mem_size - 1;
+	res->name  = "PCIx Memory Primary";
+	res->flags = IORESOURCE_MEM;
+
+	if (request_resource(&iomem_resource, res)) {
+		pr_warn("%s: request_resource failed (nr = %d)\n", __func__, nr);
+		return 0;
+	}
 
+	pci_add_resource_offset(&sys->resources, res, sys->mem_offset);
 	return 1;
 }
 
 
 struct pci_bus *mv_pex_scan_bus(int nr, struct pci_sys_data *sys)
 {
-	struct pci_ops *ops = &mv_pci_ops;
-
-	return pci_scan_root_bus(NULL, sys->busnr, ops, sys, &sys->resources);
+	return pci_scan_root_bus(NULL, sys->busnr, &mv_pci_ops, sys, &sys->resources);
 }
 
-static int __init mv_map_irq_0(struct pci_dev *dev, u8 slot, u8 pin)
+static int __init mv_map_irq_0(const struct pci_dev *dev, u8 slot, u8 pin)
 {
 	return IRQ_GLOBAL_PCIE0;
 }
 
-static int __init mv_map_irq_1(struct pci_dev *dev, u8 slot, u8 pin)
+static int __init mv_map_irq_1(const struct pci_dev *dev, u8 slot, u8 pin)
 {
 	return IRQ_GLOBAL_PCIE1;
 }
@@ -374,59 +299,8 @@ static int mv_pex_probe(struct platform_device *dev)
 	return 0;
 }
 
-static int pex_status[MV_PEX_MAX_IF];
-static int pex_ifnum;
-
-static int mv_pex_suspend(struct platform_device *dev, pm_message_t state)
-{
-	unsigned int pciIf;
-	MV_U32 pexHWInf = 0;
-	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
-
-	/* Save PCI Express status Register */
-	for (pciIf = 0; pciIf < pex_ifnum; pciIf++) {
-		pexHWInf = 0;
-
-		if (MV_FALSE == mvUnitMapIsPexMine(pexHWInf))
-			continue;
-		if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pexHWInf))
-			continue;
-
-		pex_status[pexHWInf] = MV_REG_READ(PEX_STATUS_REG(pexHWInf));
-	}
-
-	return 0;
-}
-
-static int mv_pex_resume(struct platform_device *dev)
-{
-	unsigned int pciIf;
-	MV_U32 pexHWInf = 0;
-	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
-
-	mv_pex_reinit();
-
-	/* Restore PCI Express status Register */
-	for (pciIf = 0; pciIf < pex_ifnum; pciIf++) {
-		pexHWInf = 0;
-
-		if (MV_FALSE == mvUnitMapIsPexMine(pexHWInf))
-			continue;
-		if (MV_FALSE == mvCtrlPwrClckGet(PEX_UNIT_ID, pexHWInf))
-			continue;
-
-		MV_REG_WRITE(PEX_STATUS_REG(pexHWInf), pex_status[pexHWInf]);
-	}
-
-	return 0;
-}
-
 static struct platform_driver mv_pex_driver = {
 	.probe    = mv_pex_probe,
-#ifdef CONFIG_PM
-	.suspend = mv_pex_suspend,
-	.resume  = mv_pex_resume,
-#endif /* CONFIG_PM */
 	.driver = {
 		.name = "mv_pex",
 	},
@@ -434,21 +308,18 @@ static struct platform_driver mv_pex_driver = {
 
 static int __init mv_pex_init_module(void)
 {
-	MV_BOARD_PEX_INFO* boardPexInfo = mvBoardPexInfoGet();
-
-	mv_pci.nr_controllers = (mvBoardPexInfoGet())->boardPexIfNum;
+	mv_pci.nr_controllers = mvBoardPexInfoGet()->boardPexIfNum;
 	mv_pci.swizzle        = pci_std_swizzle;
-	mv_pci.map_irq         = mv_map_irq_0;
-	mv_pci.setup           = mv_pex_setup;
-	mv_pci.scan            = mv_pex_scan_bus;
-	mv_pci.preinit         = mv_pex_preinit;
+	mv_pci.map_irq        = mv_map_irq_0;
+	mv_pci.setup          = mv_pex_setup;
+	mv_pci.scan           = mv_pex_scan_bus;
+	mv_pci.preinit        = mv_pex_preinit;
 	pci_common_init(&mv_pci);
 	platform_device_register(&mv_pex);
 
-	pex_ifnum = boardPexInfo->boardPexIfNum;
 	return platform_driver_register(&mv_pex_driver);
 }
 
 module_init(mv_pex_init_module);
-MODULE_DESCRIPTION("Marvell PEX Driver");
+MODULE_DESCRIPTION("Marvell PCIe driver");
 MODULE_LICENSE("GPL");
diff --git a/arch/arm/mach-avantalp/sysmap.c b/arch/arm/mach-avantalp/sysmap.c
index 2079fc9..9a26ba0 100644
--- a/arch/arm/mach-avantalp/sysmap.c
+++ b/arch/arm/mach-avantalp/sysmap.c
@@ -39,7 +39,7 @@ MV_CPU_DEC_WIN SYSMAP_ALP[] = {
 	{{DEVICE_CS3_PHYS_BASE,		0,	DEVICE_CS3_SIZE,	},	TBL_UNUSED,		DIS},	/* DEVICE_CS3 */
 	{{PEX0_MEM_PHYS_BASE,		0,	PEX0_MEM_SIZE		},	0x0,			EN},	/* PEX0_MEM */
 	{{PEX0_IO_PHYS_BASE,		0,	PEX0_IO_SIZE		},	TBL_UNUSED,		DIS},	/* PEX0_IO */
-	{{PEX1_MEM_PHYS_BASE,		0,	PEX1_MEM_SIZE		},	0x1,			DIS},	/* PEX1_MEM */
+	{{PEX1_MEM_PHYS_BASE,		0,	PEX1_MEM_SIZE		},	0x1,			EN},	/* PEX1_MEM */
 	{{PEX1_IO_PHYS_BASE,		0,	PEX1_IO_SIZE		},	TBL_UNUSED,		DIS},	/* PEX1_IO */
 	{{INTER_REGS_PHYS_BASE,		0,	INTER_REGS_SIZE		},	MV_AHB_TO_MBUS_INTREG_WIN, EN},	/* INTER_REGS */
 	{{UART_REGS_BASE,		0,	UART_SIZE		},	TBL_UNUSED,		DIS},	/* DMA_UART */
-- 
1.7.5.4

