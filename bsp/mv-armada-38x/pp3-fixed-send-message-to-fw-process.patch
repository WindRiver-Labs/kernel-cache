From 16598e244b0d976f0fa65287c20a42adb68fabe7 Mon Sep 17 00:00:00 2001
From: Yelena <yelena@marvell.com>
Date: Wed, 23 Apr 2014 11:19:22 +0300
Subject: [PATCH 1573/1825] pp3: fixed send message to fw process

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 30c58ff6d63f2e79af69e122dc1d9973a6db15be

	Change function prototype to pass message opcode:
	mv_pp3_msg_send()

Change-Id: I72e822d9fdd71d4389265388650863a1cee78cd8
Signed-off-by: Yelena <yelena@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7170
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Ernest Villion <ernestv@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../net/ethernet/marvell/pp3/fw/mv_channel_if.c    |   32 +++++++++++++------
 .../net/ethernet/marvell/pp3/fw/mv_channel_if.h    |    3 +-
 .../net/ethernet/marvell/pp3/fw/mv_channel_sysfs.c |    9 +++--
 .../net/ethernet/marvell/pp3/fw/mv_host_fw_if.h    |    3 +-
 4 files changed, 30 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c
index 7116052..90eca2f 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.c
@@ -209,7 +209,7 @@ int mv_pp3_chan_create(int size, int flags, mv_pp3_chan_rcv_func rcv_cb)
 
 	/* send message through CPU default channel */
 	msg_flags = 0;
-	mv_pp3_msg_send(cpu, msg_ptr, sizeof(msg), msg_flags);
+	mv_pp3_msg_send(chan_num, msg_ptr, sizeof(msg), msg_flags, MV_FW_MSG_CHAN_CFG);
 
 	return chan_num;
 }
@@ -229,9 +229,10 @@ Return:
 	0		- Message is accepted and sent to firmware.
 	Other	- Failure: Queue is full, etc
 */
-int mv_pp3_msg_send(int chan, void *msg, int size, int flags)
+int mv_pp3_msg_send(int chan, void *msg, int size, int flags, u16 msg_opcode)
 {
 	struct cfh_common_format *cfh;
+	struct host_fw_cfh_msg fw_msg;
 	char *msg_cfh;
 	int cfh_size;
 	u32 buf_addr;
@@ -243,17 +244,23 @@ int mv_pp3_msg_send(int chan, void *msg, int size, int flags)
 		__func__, chan);
 		return -1;
 	}
-	if (size > MV_PP3_MSG_BUFF_SIZE)
+
+	/* build message to FW */
+	fw_msg.msg_opcode = msg_opcode;
+	/* calculate real FW message size */
+	fw_msg.msg_size = size + sizeof(struct host_fw_cfh_msg);
+
+	if (fw_msg.msg_size > MV_PP3_MSG_BUFF_SIZE)
 		return -1;
 
-	if (size > (MV_PP3_CFH_MAX_SIZE - MV_PP3_CFH_MIN_SIZE))
+	if (fw_msg.msg_size > (MV_PP3_CFH_MAX_SIZE - MV_PP3_CFH_MIN_SIZE))
 
 		/* send message in buffer (by pointer) */
 		/* calc CFH size */
 		cfh_size = MV_PP3_CFH_MIN_SIZE/MV_PP3_HMAC_DG_SIZE;
 	else
 		/* send in CFH */
-		cfh_size = (size + MV_PP3_CFH_MIN_SIZE)/MV_PP3_HMAC_DG_SIZE;
+		cfh_size = (fw_msg.msg_size + MV_PP3_CFH_MIN_SIZE)/MV_PP3_HMAC_DG_SIZE;
 
 	/* disable interrupt on the current cpu */
 	MV_LIGHT_LOCK(iflags);
@@ -266,13 +273,17 @@ int mv_pp3_msg_send(int chan, void *msg, int size, int flags)
 	if (cfh == NULL)
 		return -1;	/* no free CFH in queue */
 
-	if (size > (MV_PP3_CFH_MAX_SIZE - MV_PP3_CFH_MIN_SIZE)) {
+	if (fw_msg.msg_size > (MV_PP3_CFH_MAX_SIZE - MV_PP3_CFH_MIN_SIZE)) {
 
 		/* send message in buffer (by pointer) */
 		/* find free buffer and copy message */
 		buf_addr = mv_stack_pop(mv_pp3_msgr_buffers);
-		if (buf_addr)
-			memcpy((char *)buf_addr + mv_pp3_chan_ctrl[chan].buf_headroom, msg, size);
+		if (buf_addr) {
+			memcpy((char *)buf_addr + mv_pp3_chan_ctrl[chan].buf_headroom, &fw_msg,
+			sizeof(struct host_fw_cfh_msg));
+			memcpy((char *)buf_addr + mv_pp3_chan_ctrl[chan].buf_headroom + sizeof(struct host_fw_cfh_msg),
+			msg, size);
+		}
 		else
 			return -1;
 
@@ -286,9 +297,10 @@ int mv_pp3_msg_send(int chan, void *msg, int size, int flags)
 
 		/* send message in CFH (by value) */
 		/* write all relevant data to CFH */
-		cfh->cfh_length = size + MV_PP3_CFH_MIN_SIZE;
+		cfh->cfh_length = fw_msg.msg_size + MV_PP3_CFH_MIN_SIZE;
 		msg_cfh = (char *)cfh + MV_CFH_MSG_OFFS;
-		memcpy(msg_cfh, msg, size);
+		memcpy(msg_cfh, &fw_msg, sizeof(struct host_fw_cfh_msg));
+		memcpy((char *)msg_cfh + sizeof(struct host_fw_cfh_msg), msg, size);
 	}
 	cfh->cfh_format = (HMAC_CFH << MV_PP3_MCG_CFH_MODE_OFFS) + PP_MESSAGE;
 	cfh->tag2 = chan << MV_PP3_MCG_CHAN_ID_OFFS;
diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.h b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.h
index 50df3af..95c3704 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.h
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_if.h
@@ -132,11 +132,12 @@ Inputs:
 	msg  - pointer to message to send
 	size - size of message (in bytes)
 	flags - message flags
+	msg_opcode - one from known opcodes (see enum mv_pp3_fw_nic_msg_opcode)
 Return:
 	0		- Message is accepted and sent to firmware.
 	Other	- Failure: Queue is full, etc
 */
-int mv_pp3_msg_send(int chan, void *msg, int size, int flags);
+int mv_pp3_msg_send(int chan, void *msg, int size, int flags, u16 msg_opcode);
 /* sysfs related */
 void mv_pp3_channel_show(int ch_num);
 int mv_pp3_chan_sysfs_init(struct kobject *pp3_kobj);
diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_sysfs.c b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_sysfs.c
index feaf69a..e9fb2ebe 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_channel_sysfs.c
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_channel_sysfs.c
@@ -71,9 +71,10 @@ static ssize_t mv_channel_help(char *b)
 
 	o += scnprintf(b+o, PAGE_SIZE-o, "\n");
 	o += scnprintf(b+o, PAGE_SIZE-o, "echo [c]         > chan_show    - Show message channel status\n");
-	o += scnprintf(b+o, PAGE_SIZE-o, "echo [c] [s]     > send_msg     - Send message [s] to channel [c]\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "echo [c] [t] [s] > send_msg     - Send message [s] opcode [t] to channel [c]\n");
 	o += scnprintf(b+o, PAGE_SIZE-o, "\n");
 	o += scnprintf(b+o, PAGE_SIZE-o, "parameters: [c] channel number\n");
+	o += scnprintf(b+o, PAGE_SIZE-o, "parameters: [t] message opcode\n");
 	o += scnprintf(b+o, PAGE_SIZE-o, "parameters: [s] string\n");
 
 	return o;
@@ -98,7 +99,7 @@ static ssize_t mv_channel_store(struct device *dev,
 	const char      *name = attr->attr.name;
 	int             err;
 	unsigned int    c;
-	unsigned long   flags;
+	unsigned int  type;
 	char msg[32];
 
 	if (!capable(CAP_NET_ADMIN))
@@ -106,12 +107,12 @@ static ssize_t mv_channel_store(struct device *dev,
 
 	/* Read first 3 parameters */
 	err = c = 0;
-	sscanf(buf, "%x %s", &c, msg);
+	sscanf(buf, "%x %d %s", &c, &type, msg);
 
 	if (!strcmp(name, "chan_show"))
 		mv_pp3_channel_show(c);
 	else if (!strcmp(name, "send_msg"))
-		mv_pp3_msg_send(c, msg, strlen(msg), 0);
+		mv_pp3_msg_send(c, msg, strlen(msg), 0, (u16) type);
 	else {
 		err = 1;
 		pr_err("%s: illegal operation <%s>\n", __func__, attr->attr.name);
diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_host_fw_if.h b/drivers/net/ethernet/marvell/pp3/fw/mv_host_fw_if.h
index 761b1ba..4beb1d7 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_host_fw_if.h
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_host_fw_if.h
@@ -42,14 +42,13 @@ enum mv_pp3_f2h_msg_type {
 	F2H_ACK_REPLY
 };
 
-/* CFH message data structure */
+/* CFH message header data structure */
 struct host_fw_cfh_msg {
 	unsigned short msg_opcode;	/* one from MV_CFH_MSG_TYPE enum */
 	unsigned short msg_size;	/* size of the message (including header and data) in bytes */
 	unsigned short msg_id;		/* message serial number */
 	unsigned char  rc;		/* acknowledge or reply */
 	unsigned char  type;		/* message type bits [7:6],  */
-	unsigned char  message[1];
 };
 
 /* buffer extention header structure */
-- 
1.7.5.4

