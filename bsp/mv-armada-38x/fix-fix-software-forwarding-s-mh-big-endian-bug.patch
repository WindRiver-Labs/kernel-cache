From d2f7f51687455c189fb8486a02bbc3f1e5cba3ec Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Tue, 22 Apr 2014 10:21:21 +0800
Subject: [PATCH 1574/1825] fix: fix software forwarding's mh big endian bug

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 77c71500a536d296d838e4b90941e7596d7aa37a

	unify the marvell head input format as network byte order
	let mv_neta physical port's mh value be independent of CPU byte order
	let pp2 physical port's mh value be independent of CPU byte order
	let mux interface's mh value be independent of CPU byte order

Signed-off-by: Ken Ma <make@marvell.com>

Change-Id: Ia5c157df2a31623ccb20937b09fa3eeacb522815
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7151
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_mux/mv_mux_sysfs.c           |    6 +++---
 .../mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c  |    2 +-
 .../mv_pp2/net_dev/mv_eth_tx_sysfs.c               |    2 +-
 .../mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c      |    2 +-
 4 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_sysfs.c
index b204196..602b3fd 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_sysfs.c
@@ -99,8 +99,8 @@ static ssize_t mv_mux_netdev_store(struct device *dev,
 
 	} else if (!strcmp(name, "mh_rx")) {
 		mv_mux_cfg_get(mux_dev, &mux_cfg);
-		mux_cfg.rx_tag_ptrn.mh = a;
-		mux_cfg.rx_tag_mask.mh = b;
+		mux_cfg.rx_tag_ptrn.mh = MV_16BIT_BE((MV_U16)a);
+		mux_cfg.rx_tag_mask.mh = MV_16BIT_BE((MV_U16)b);
 		err = mv_mux_netdev_alloc(dev_name, -1, &mux_cfg) ? 0 : 1;
 
 	} else if (!strcmp(name, "dsa_rx")) {
@@ -123,7 +123,7 @@ static ssize_t mv_mux_netdev_store(struct device *dev,
 
 	}  else if (!strcmp(name, "mh_tx")) {
 		mv_mux_cfg_get(mux_dev, &mux_cfg);
-		mux_cfg.tx_tag.mh = a;
+		mux_cfg.tx_tag.mh = MV_16BIT_BE((MV_U16)a);
 		err = mv_mux_netdev_alloc(dev_name, -1, &mux_cfg) ? 0 : 1;
 
 	}  else if (!strcmp(name, "dsa_tx")) {
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
index 73b8816..67587ad 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_neta/net_dev/mv_eth_sysfs.c
@@ -247,7 +247,7 @@ static ssize_t mv_eth_port_store(struct device *dev,
 	} else if (!strcmp(name, "tx_cmd")) {
 		err = mv_eth_ctrl_tx_cmd(p, v);
 	} else if (!strcmp(name, "mh_2B")) {
-		err = mv_eth_ctrl_tx_mh(p, (u16)v);
+		err = mv_eth_ctrl_tx_mh(p, MV_16BIT_BE((u16)v));
 	} else if (!strcmp(name, "mh_en")) {
 		err = mv_eth_ctrl_flag(p, MV_ETH_F_MH, v);
 	} else if (!strcmp(name, "tx_nopad")) {
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tx_sysfs.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tx_sysfs.c
index 32ddaa8..d69fe7a 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tx_sysfs.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_eth_tx_sysfs.c
@@ -103,7 +103,7 @@ static ssize_t mv_eth_tx_hex_store(struct device *dev,
 		err = mv_eth_ctrl_tx_flag(p, MV_ETH_TX_F_MH, v & 0x2);
 		err = mv_eth_ctrl_tx_flag(p, MV_ETH_TX_F_HW_CMD, v & 0x4);
 	} else if (!strcmp(name, "txMH")) {
-		err = mv_eth_ctrl_tx_mh(p, (u16)v);
+		err = mv_eth_ctrl_tx_mh(p, MV_16BIT_BE((u16)v));
 	} else {
 		err = 1;
 		printk(KERN_ERR "%s: illegal operation <%s>\n", __func__, attr->attr.name);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
index 9cfc9c2..fb0e692 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pp2/net_dev/mv_netdev.c
@@ -1127,7 +1127,7 @@ int mv_eth_ctrl_tx_mh(int port, u16 mh)
 	if (!pp)
 		return -ENODEV;
 
-	pp->tx_spec.tx_mh = MV_16BIT_BE(mh);
+	pp->tx_spec.tx_mh = mh;
 
 	return 0;
 }
-- 
1.7.5.4

