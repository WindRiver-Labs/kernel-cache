From 9584d0a4b1e57f72d397feac7d5fd603d1c3a8e2 Mon Sep 17 00:00:00 2001
From: Ofer Heifetz <oferh@marvell.com>
Date: Thu, 22 May 2014 17:00:14 +0300
Subject: [PATCH 1699/1825] prestera: msys: dma alloc instead of hide 2M mem
 from LNX

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 019f1c1e2d2bda32a4e1b0f6f3e1144bfd43a6c4

	use dma_alloc_coherent for DMA memory allocation
	instead of hiding this memory from Linux by passing
	less memory to kernel (via uboot mem= param)

Change-Id: If18b72d19fae1a185393b08077cebc66ddbf9dc7
Signed-off-by: Ofer Heifetz <oferh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8180
Tested-by: Star_Automation <star@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8416
Reviewed-by: Tawfik Bayouk <tawfik@marvell.com>
Tested-by: Tawfik Bayouk <tawfik@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_prestera/mv_prestera.c       |   15 +++++++++++++--
 .../mv_drivers_lsp/mv_prestera/mv_pss_api.c        |   11 -----------
 .../mv_drivers_lsp/mv_prestera/mv_pss_api.h        |    2 --
 3 files changed, 13 insertions(+), 15 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_prestera.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_prestera.c
index 263511f..7fdf1ec 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_prestera.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_prestera.c
@@ -1067,8 +1067,13 @@ static int prestera_syscall_restore(void)
 static int prestera_dma_init(void)
 {
 	dma_len  = _2M;
-	dma_area = (void *)bspCacheDmaMalloc(dma_len);
-	dma_base = bspVirt2Phys((unsigned long)((uintptr_t)dma_area));
+	dma_area = dma_alloc_coherent(NULL, dma_len, (dma_addr_t *)&dma_base,
+				      GFP_DMA | GFP_KERNEL);
+
+	if (!dma_area) {
+		mvOsPrintf(KERN_ERR "dma_alloc_coherent() dma_area failed\n");
+		return -ENOMEM;
+	}
 
 	DB(mvOsPrintf("DMA - dma_area: %p(v) ,dma_base: 0x%lx(p), dma_len: 0x%x\n",
 		      dma_area, dma_base, dma_len));
@@ -1076,6 +1081,7 @@ static int prestera_dma_init(void)
 	/* allocate temp area for bspDma operations */
 	dma_tmp_virt = dma_alloc_coherent(NULL, PAGE_SIZE, &dma_tmp_phys,
 					  GFP_DMA | GFP_KERNEL);
+
 	if (!dma_tmp_virt) {
 		mvOsPrintf(KERN_ERR "dma_alloc_coherent() failed\n");
 		return -ENOMEM;
@@ -1122,6 +1128,11 @@ static void prestera_cleanup(void)
 		dma_tmp_virt = NULL;
 	}
 
+	if (dma_area) {
+		dma_free_coherent(NULL, dma_len, (dma_addr_t *)&dma_base,
+				  GFP_DMA | GFP_KERNEL);
+		dma_area = NULL;
+	}
 	bspCacheDmaFree(dma_area);
 
 #ifdef PRESTERA_SYSCALLS
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.c
index 0ad4670..d4f7935 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.c
@@ -1169,17 +1169,6 @@ MV_STATUS bspIntDisable(unsigned long intMask)
 	return MV_OK;
 }
 
-unsigned long  bspVirt2Phys(unsigned long vAddr)
-{
-	if (!dma_area_base)
-		bspCacheDmaMalloc(1024);
-
-	if (vAddr ==  (unsigned long)dma_area_base) /* bspCacheDmaMalloc  is done once ! */
-		return dma_base;
-	else
-		return (unsigned long)__pa(vAddr);
-}
-
 unsigned long bspPhys2Virt(unsigned long pAddr)
 {
 	STUB_FAIL;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.h
index e18b2db..a069edc 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_prestera/mv_pss_api.h
@@ -1182,8 +1182,6 @@ int bspEthInit(unsigned char port);
 *******************************************************************************/
 int bspEthPortTxModeSet(void *stub);
 
-unsigned long  bspVirt2Phys(unsigned long vAddr);
-
 unsigned long  bspPhys2Virt(unsigned long pAddr);
 
 #endif /* __MV_PSS_API */
-- 
1.7.5.4

