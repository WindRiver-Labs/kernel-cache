From 6a4f0ee64489c2c648afb52b016ed0edc508af56 Mon Sep 17 00:00:00 2001
From: Ernest Villion <ernestv@marvell.com>
Date: Tue, 18 Mar 2014 20:26:34 +0200
Subject: [PATCH 1486/1825] pp3: adding custom memory image file format
 read-write

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 6055f1c0149d7150977eb0014ea428b65cddf46a

Change-Id: Ic44b38268a046484731396dd8afd99c3a48da398
Signed-off-by: Ernest Villion <ernestv@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6513
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yelena Krivosheev <yelena@marvell.com>
Tested-by: Yelena Krivosheev <yelena@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/fw/mv_fw.c |  110 ++++++++++++++++++++++-----
 drivers/net/ethernet/marvell/pp3/fw/mv_fw.h |   20 +++++
 2 files changed, 111 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c
index 0467cdc..e1c9149 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c
@@ -74,6 +74,54 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "mv_fw.h"
 
 
+
+
+int mv_pp3_fw_read_img_file(char *path, struct mem_image *img)
+{
+	/* Format is: u32 address chars, : u32 data*/
+	int fd;
+	int tmp = 0;
+	u32 addr = 0;
+	u32 value = 0;
+	char ch = 0;
+	int size = 0;
+	char buf[MV_FW_MAX_LINE_SIZE] = "\0";
+	mm_segment_t old_fs = get_fs();
+
+	set_fs(KERNEL_DS);
+
+	fd = sys_open(path, O_RDONLY, 0);
+	if (fd >= 0) {
+		while ((tmp = sys_read(fd, &ch, 1)) > 0) {
+			if (size >= MV_FW_MAX_LINE_SIZE || ch == '\n') {
+				sscanf(buf, "%X:%X", &addr, &value);
+				img->rows[img->size].address = addr;
+				img->rows[img->size].data = value;
+				img->size++;
+				pr_info("0x%08X->0x%08X", addr, value);
+				size = 0;
+			} else {
+				buf[size++] = ch;
+			}
+		}
+		if (size > 0)
+			sscanf(buf, "%X:%X", &(img->rows[size].address), &(img->rows[size].data));
+
+		sys_close(fd);
+
+	} else {
+		pr_err("Failed to open file %s\n", path);
+		return -EIO;
+	}
+
+	set_fs(old_fs);
+	pr_info("Rows Read %d\n", img->size);
+
+	return img->size;
+}
+
+
+
 int mv_pp3_fw_read_file(char *path, char *buf, int image_size)
 {
 	int fd;
@@ -133,23 +181,26 @@ int mv_pp3_fw_write_file(char *path, char *buf, int buf_size)
 
 int mv_pp3_profile_download(char *path)
 {
-	char *buf = NULL;
-	int size = 0;
+	struct mem_image mem;
+
+	memset(&mem, 0, sizeof(mem));
 
 	pr_info("DOWNLOAD PATH: %s\n", path);
 
-	buf = kzalloc(MV_PP3_PROFILE_MEM_SIZE, GFP_KERNEL);
-	if (!buf) {
+	mem.rows = kzalloc(MV_PP3_PROFILE_MEM_ROWS * sizeof(struct mem_rec), GFP_KERNEL);
+	mem.allocated = MV_PP3_PROFILE_MEM_ROWS;
+
+	if (!mem.rows) {
 		pr_err("FW Image Allocation Failed in <%s>\n", __func__);
 		return -ENOMEM;
 	}
-	pr_info("ALLOCATED: %d\n", MV_PP3_PROFILE_MEM_SIZE);
+	pr_info("ALLOCATED: %d Rows\n", mem.allocated);
 
-	size = mv_pp3_fw_read_file(path, buf, MV_PP3_PROFILE_MEM_SIZE);
-	if (size > 0)
-		mv_fw_mem_write(buf, size, PP3_PROFILE_MEM);
+	mv_pp3_fw_read_img_file(path, &mem);
+	if (mem.size > 0)
+		mv_fw_mem_img_write(&mem,  PP3_PROFILE_MEM);
 
-	kfree(buf);
+	kfree(mem.rows);
 
 	return 0;
 }
@@ -234,23 +285,26 @@ int mv_pp3_ppn_run(char *path)
 
 int mv_pp3_imem_download(char *path)
 {
-	char *buf = NULL;
-	int size = 0;
+	struct mem_image mem;
+
+	memset(&mem, 0, sizeof(mem));
 
 	pr_info("DOWNLOAD PATH: %s\n", path);
 
-	buf = kzalloc(MV_PP3_FW_MEM_SIZE, GFP_KERNEL);
-	if (!buf) {
+	mem.rows = kzalloc(MV_PP3_FW_MEM_ROWS * sizeof(struct mem_rec), GFP_KERNEL);
+	mem.allocated = MV_PP3_FW_MEM_ROWS;
+
+	if (!mem.rows) {
 		pr_err("FW Image Allocation Failed in <%s>\n", __func__);
 		return -ENOMEM;
 	}
-	pr_info("ALLOCATED: %d\n", MV_PP3_FW_MEM_SIZE);
+	pr_info("ALLOCATED: %d Rows\n", mem.allocated);
 
-	size = mv_pp3_fw_read_file(path, buf, MV_PP3_FW_MEM_SIZE);
-	if (size > 0)
-		mv_fw_mem_write(buf, size, PP3_IMEM);
+	mv_pp3_fw_read_img_file(path, &mem);
+	if (mem.size > 0)
+		mv_fw_mem_img_write(&mem,  PP3_IMEM);
 
-	kfree(buf);
+	kfree(mem.rows);
 
 	return 0;
 }
@@ -289,7 +343,7 @@ int mv_fw_mem_write(char *data, int size, enum pp3_mem_type mem_type)
 	pr_info("Writing .... Type: %d size: %d [showing 0..63]\n",
 		mem_type, size);
 
-	for (i = 0; i < ((size < 64) ? size : 64); i++)
+	for (i = 0; i < size; i++)
 		pr_cont("%02X ", data[i]);
 
 	pr_info("Download SUCCESSFULL: Type: %d size: %d [showing 0..63]\n",
@@ -298,6 +352,24 @@ int mv_fw_mem_write(char *data, int size, enum pp3_mem_type mem_type)
 }
 
 
+int mv_fw_mem_img_write(struct mem_image *img, enum pp3_mem_type mem_type)
+{
+	int i;
+
+	/*TODO: probably verify checksum, version etc. */
+	pr_info("Writing .... Type: %d size: %d [showing 0..63]\n",
+		mem_type, img->size);
+
+	for (i = 0; i < img->size; i++)
+		pr_info("%08X:%08X", img->rows[i].address, img->rows[i].data);
+
+	pr_info("Download SUCCESSFULL: Type: %d size: %d [showing 0..63]\n",
+		mem_type, img->size);
+	return 0;
+}
+
+
+
 int mv_fw_mem_read(char *data, int size, enum pp3_mem_type mem_type)
 {
 	int i;
diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h
index 3c831ed..e671f28 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h
@@ -68,8 +68,13 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 
 #define MV_PP3_FW_MEM_SIZE (128*1024)
+#define MV_PP3_FW_MEM_ROWS (128*1024/4)
 #define MV_PP3_PROFILE_MEM_SIZE (64*1024)
+#define MV_PP3_PROFILE_MEM_ROWS (64*1024/4)
 #define MV_PP3_CFG_MEM_SIZE (32*1024)
+#define MV_PP3_CFG_MEM_ROWS (32*1024/4)
+
+#define MV_FW_MAX_LINE_SIZE (128)
 
 
 enum pp3_mem_type {
@@ -80,6 +85,18 @@ enum pp3_mem_type {
 	PP3_SPAD = 4
 };
 
+struct mem_rec {
+	u32 address;
+	u32 data;
+};
+
+struct mem_image {
+	struct mem_rec *rows;
+	u32 size;
+	u32 allocated;
+};
+
+
 
 int mv_pp3_imem_download(char *path);
 int mv_pp3_imem_dump(char *path);
@@ -95,10 +112,13 @@ int mv_pp3_ppn_run(char *params);
 
 int mv_pp3_fw_read_file(char *path, char *buf, int size);
 int mv_pp3_fw_write_file(char *path, char *buf, int size);
+int mv_pp3_fw_read_img_file(char *path, struct mem_image *img);
 
 int mv_fw_mem_write(char *data, int size, enum pp3_mem_type target_mem);
 int mv_fw_mem_read(char *data, int size, enum pp3_mem_type source_mem);
 
+int mv_fw_mem_img_write(struct mem_image *img, enum pp3_mem_type mem_type);
+
 /* SYSFS*/
 int mv_pp3_fw_sysfs_init(struct kobject *fw_kobj);
 int mv_pp3_fw_sysfs_exit(struct kobject *fw_kobj);
-- 
1.7.5.4

