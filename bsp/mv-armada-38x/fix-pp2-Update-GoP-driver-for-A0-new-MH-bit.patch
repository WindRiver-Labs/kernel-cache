From 262f83502907ed38ad82795a875e64258b0bed03 Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Thu, 8 May 2014 18:34:12 -0400
Subject: [PATCH 1646/1825] fix: pp2: Update GoP driver for A0 - new MH bit

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 55c4a1b1c4b4ec8befab65bb4d5998b5d6b59974

	- Add new bit added to MAC CTRL 4 register for A0
		- MH enable bit[9]
	- Fix bug with wrong MIB counters update when GoP connected
	to SoHo switch CPU port.

Change-Id: Ibdc8de7831688203a6e920fa84edc75810dad0dd
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7899
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-by: Yelena Krivosheev <yelena@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c     |    8 ++++++++
 .../arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c |   16 ++++++++++++++++
 .../arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h |    1 +
 .../plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h    |   19 +++++++++++++++++++
 4 files changed, 44 insertions(+), 0 deletions(-)

diff --git a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
index 9965f7b..53fbd2d 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gbe/mvPp2Gbe.c
@@ -1313,6 +1313,14 @@ MV_STATUS mvPp2MhSet(int port, MV_TAG_TYPE mh)
 		return MV_BAD_PARAM;
 	}
 	mvPp2WrReg(MV_PP2_MH_REG(MV_PPV2_PORT_PHYS(port)), regVal);
+
+#ifdef CONFIG_MV_ETH_PP2_1
+	if (mh == MV_TAG_TYPE_MH)
+		mvGmacPortMhSet(port, 1);
+	else
+		mvGmacPortMhSet(port, 0);
+#endif /* CONFIG_MV_ETH_PP2_1 */
+
 	return MV_OK;
 }
 /*-------------------------------------------------------------------------------*/
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c
index 035e6c2..8cc541b 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c
+++ b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.c
@@ -84,6 +84,20 @@ void mvGmacPortDisable(int port)
 	MV_REG_WRITE(ETH_GMAC_CTRL_0_REG(port), regVal);
 }
 
+void mvGmacPortMhSet(int port, int enable)
+{
+	MV_U32 regVal;
+
+	regVal = MV_REG_READ(ETH_GMAC_CTRL_4_REG(port));
+
+	if (enable)
+		regVal |= ETH_GMAC_MH_ENABLE_MASK;
+	else
+		regVal &= ~ETH_GMAC_MH_ENABLE_MASK;
+
+	MV_REG_WRITE(ETH_GMAC_CTRL_4_REG(port), regVal);
+}
+
 static void mvGmacPortRgmiiSet(int port, int enable)
 {
 	MV_U32  regVal;
@@ -647,6 +661,8 @@ void mvGmacPortRegs(int port)
 	mvGmacPrintReg(ETH_GMAC_CTRL_0_REG(port), "MV_GMAC_CTRL_0_REG");
 	mvGmacPrintReg(ETH_GMAC_CTRL_1_REG(port), "MV_GMAC_CTRL_1_REG");
 	mvGmacPrintReg(ETH_GMAC_CTRL_2_REG(port), "MV_GMAC_CTRL_2_REG");
+	mvGmacPrintReg(ETH_GMAC_CTRL_3_REG(port), "MV_GMAC_CTRL_3_REG");
+	mvGmacPrintReg(ETH_GMAC_CTRL_4_REG(port), "MV_GMAC_CTRL_4_REG");
 
 	mvGmacPrintReg(ETH_GMAC_AN_CTRL_REG(port), "MV_GMAC_AN_CTRL_REG");
 	mvGmacPrintReg(ETH_GMAC_STATUS_REG(port), "MV_GMAC_STATUS_REG");
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h
index 5bfe037..810679e 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacApi.h
@@ -155,6 +155,7 @@ static INLINE MV_VOID mvGmacPortSumIsrUnmask(int port)
 void mvGmacDefaultsSet(int port);
 void mvGmacPortEnable(int port);
 void mvGmacPortDisable(int port);
+void mvGmacPortMhSet(int port, int enable);
 void mvGmacPortPeriodicXonSet(int port, int enable);
 MV_BOOL mvGmacPortIsLinkUp(int port);
 MV_STATUS mvGmacLinkStatus(int port, MV_ETH_PORT_STATUS *pStatus);
diff --git a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h
index d9057ca..c01ae5a 100644
--- a/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h
+++ b/arch/arm/plat-armada/mv_hal/pp2/gmac/mvEthGmacRegs.h
@@ -226,6 +226,25 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define ETH_PORT_ISR_SUM_INTERN_MASK		(1 << ETH_PORT_ISR_SUM_INTERN_BIT)
 /*-------------------------------------------------------------------------------*/
 
+/**** Port MIB Counters Control register ****/
+#define ETH_GMAC_MIB_CTRL_REG(p)		(ETH_REG_BASE(p) + 0x44)
+/*-------------------------------------------------------------------------------*/
+
+/**** Port MAC Control register #3 ****/
+#define ETH_GMAC_CTRL_3_REG(p)			(ETH_REG_BASE(p) + 0x48)
+/*-------------------------------------------------------------------------------*/
+
+/**** CCFC Port Speed Timer register ****/
+#define ETH_GMAC_SPEED_TIMER_REG(p)		(ETH_REG_BASE(p) + 0x58)
+/*-------------------------------------------------------------------------------*/
+
+/**** Port MAC Control register #4 ****/
+#define ETH_GMAC_CTRL_4_REG(p)			(ETH_REG_BASE(p) + 0x90)
+
+#define ETH_GMAC_MH_ENABLE_BIT			9
+#define ETH_GMAC_MH_ENABLE_MASK			(1 << ETH_GMAC_MH_ENABLE_BIT)
+/*-------------------------------------------------------------------------------*/
+
 /****************************************/
 /*        LMS Unit Registers       	*/
 /****************************************/
-- 
1.7.5.4

