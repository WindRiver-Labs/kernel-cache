From 26892ba469f7db66bfbaccf7ca15852f32622588 Mon Sep 17 00:00:00 2001
From: Evan <xswang@marvell.com>
Date: Thu, 15 May 2014 17:50:02 +0800
Subject: [PATCH 1689/1825] fix:alp:tpm: inner pbit and pppoe protocol check
 not support

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 876b127b36430e12b9105a8ccb02f835fab7bc6d

	bug reason: it is a new feature in PP21, and not implemented.
	This patch solve the issue by adding inner pbit and pppoe proto check.
	SYSTEMSW-600 : inner pbit and pppoe protocol check not support on PP21

Change-Id: Iceee0c992e2ccd13bbac621573184b127e483ad3
Signed-off-by: Evan <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/8240
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h |   19 ++-
 .../mv_drivers_lsp/mv_tpm/src/core/tpm_c2.c        |   10 +
 .../mv_drivers_lsp/mv_tpm/src/core/tpm_c3.c        |   10 +
 .../mv_drivers_lsp/mv_tpm/src/core/tpm_common.c    |  237 ++++++++++----------
 4 files changed, 156 insertions(+), 120 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
index dca93fa..a2ec7e0 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/inc/tpm_internal_types.h
@@ -472,7 +472,13 @@ enum tpm_cls_field_id_t {
 	L4_DST_FIELD_ID			= 30,
 	TCP_FLAGS_FIELD_ID		= 31,
 	ARP_IPV4_DA_FIELD_ID		= 48,
-	CLS_FIELD_MAX			= 33
+#ifdef CONFIG_MV_ETH_PP2_1
+	IN_VLAN_PRI_FIELD_ID		= 49,
+	PPPOE_PROTO_ID			= 50,
+	CLS_FIELD_MAX			= 35,
+#else
+	CLS_FIELD_MAX			= 33,
+#endif
 
 };
 
@@ -482,7 +488,7 @@ enum tpm_cls_field_size_t {/* unit: bits */
 	MH_UNTAGGED_PRI_FIELD_SIZE	= 3 ,
 	MAC_DA_FIELD_SIZE		= 48,
 	MAC_SA_FIELD_SIZE		= 48,
-	OUT_VLAN_PRI_FIELD_SIZE	= 3,
+	OUT_VLAN_PRI_FIELD_SIZE		= 3,
 	OUT_VLAN_ID_FIELD_SIZE		= 12,
 	IN_VLAN_ID_FIELD_SIZE		= 12,
 	ETH_TYPE_FIELD_SIZE		= 16,
@@ -507,11 +513,16 @@ enum tpm_cls_field_size_t {/* unit: bits */
 	IPV6_SA_SUFF_FIELD_SIZE		= 64,
 	IPV6_DA_FIELD_SIZE		= 128,
 	IPV6_DA_PREF_FIELD_SIZE		= 64,
-	IPV6_DA_SUFF_FIELD_SIZE	= 64,
+	IPV6_DA_SUFF_FIELD_SIZE		= 64,
 	L4_SRC_FIELD_SIZE		= 16,
 	L4_DST_FIELD_SIZE		= 16,
 	TCP_FLAGS_FIELD_SIZE		= 8,
-	ARP_IPV4_DA_FIELD_SIZE		= 32
+	ARP_IPV4_DA_FIELD_SIZE		= 32,
+#ifdef CONFIG_MV_ETH_PP2_1
+	IN_VLAN_PRI_FIELD_SIZE		= 3,
+	PPPOE_PROTO_SIZE		= 16,
+#endif
+
 };
 
 enum tpm_cls_field_valid_t {
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c2.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c2.c
index 28ecbda..ba73490 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c2.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c2.c
@@ -1764,6 +1764,10 @@ int tpm_c2_tcam_hek_get(unsigned int field_bm,
 		case L4_SRC_FIELD_ID:
 		case L4_DST_FIELD_ID:
 		case TCP_FLAGS_FIELD_ID:
+#ifdef CONFIG_MV_ETH_PP2_1
+		case IN_VLAN_PRI_FIELD_ID:
+		case PPPOE_PROTO_ID:
+#endif
 			/* Get HEK data */
 			pkt_value = field_info[field_num].filed_value.int_data.parsed_int_val;
 			pkt_value_mask = field_info[field_num].filed_value.int_data.parsed_int_val_mask;
@@ -1793,6 +1797,12 @@ int tpm_c2_tcam_hek_get(unsigned int field_bm,
 				comb_flag = true;
 				comb_offset = 4;
 			}
+#ifdef CONFIG_MV_ETH_PP2_1
+			if (pre_field_id == IN_VLAN_PRI_FIELD_ID && field_id == IN_VLAN_ID_FIELD_ID) {
+				comb_flag = true;
+				comb_offset = 4;
+			}
+#endif
 		case IPV4_ECN_FIELD_ID:
 			if (pre_field_id == IPV4_DSCP_FIELD_ID && field_id == IPV4_ECN_FIELD_ID) {
 				comb_flag = true;
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c3.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c3.c
index 3b12951..db8b55f 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c3.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_c3.c
@@ -291,6 +291,10 @@ static int tpm_c3_hek_generate(struct tpm_c3_add_entry_t *c3_entry,
 		case L4_SRC_FIELD_ID:
 		case L4_DST_FIELD_ID:
 		case TCP_FLAGS_FIELD_ID:
+#ifdef CONFIG_MV_ETH_PP2_1
+		case IN_VLAN_PRI_FIELD_ID:
+		case PPPOE_PROTO_ID:
+#endif
 			/* Get HEK data */
 			pkt_value = field_info[field_num].filed_value.int_data.parsed_int_val;
 			/* Store HEK in c3_hek, each filed byte boutary */
@@ -309,6 +313,12 @@ static int tpm_c3_hek_generate(struct tpm_c3_add_entry_t *c3_entry,
 				comb_flag = true;
 				comb_offset = 4;
 			}
+#ifdef CONFIG_MV_ETH_PP2_1
+			if (pre_field_id == IN_VLAN_PRI_FIELD_ID && field_id == IN_VLAN_ID_FIELD_ID) {
+				comb_flag = true;
+				comb_offset = 4;
+			}
+#endif
 		/* fallthru */
 		case IPV4_ECN_FIELD_ID:
 			if (pre_field_id == IPV4_DSCP_FIELD_ID && field_id == IPV4_ECN_FIELD_ID) {
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_common.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_common.c
index b575da5..b9aa0b6 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_common.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_tpm/src/core/tpm_common.c
@@ -93,7 +93,7 @@ static unsigned int tpm_field_size_array[CLS_FIELD_MAX] = {
 *	according to the case - see tpm_error_code_t.
 *
 * COMMENTS:
-*	None.
+*	NOTE: When update this routine, please obey the field sequence in packet.
 *******************************************************************************/
 int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			       struct tpm_mng_pkt_key_t		*tpm_pkt_key,
@@ -101,9 +101,8 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			       bool				l4_info,
 			       struct tpm_field_match_info	field_info[])
 {
-	int i = 0, j = 0;
+	int i = 0;
 	int field_cnt, field_size = 0;
-	struct tpm_field_match_info temp;
 	bool is_ipv4 = true;
 
 	/* Para check */
@@ -115,6 +114,19 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 
 	TPM_OS_DEBUG(TPM_COMMON_MOD, "field_bm 0x%x is_ipv4 %d\n", field_bm, is_ipv4)
 
+	if (field_bm & TPM_MATCH_MH && i < field_max) {
+		field_info[i].valid = TPM_FIELD_VALID;
+		field_info[i].field_id = MH_FIELD_ID;
+		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->mh;
+		field_size = tpm_field_size_array[field_info[i].field_id];
+		field_info[i].filed_value.int_data.parsed_int_val_mask = tpm_pkt_key->mh_mask;
+		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
+			i, tpm_utils_field_id_str_get(field_info[i].field_id),
+			field_info[i].filed_value.int_data.parsed_int_val,
+			field_info[i].filed_value.int_data.parsed_int_val_mask);
+		i++;
+	}
+
 	if (field_bm & TPM_MATCH_ETH_DST && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
 		field_info[i].field_id = MAC_DA_FIELD_ID;
@@ -137,6 +149,18 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 		       MAC_ADDR_SIZE);
 		i++;
 	}
+	if (field_bm & TPM_MATCH_PBITS_OUTER && i < field_max) {
+		field_info[i].valid = TPM_FIELD_VALID;
+		field_info[i].field_id = OUT_VLAN_PRI_FIELD_ID;
+		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->out_pbit;
+		field_size = tpm_field_size_array[field_info[i].field_id];
+		field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
+		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
+			i, tpm_utils_field_id_str_get(field_info[i].field_id),
+			field_info[i].filed_value.int_data.parsed_int_val,
+			field_info[i].filed_value.int_data.parsed_int_val_mask);
+		i++;
+	}
 	if (field_bm & TPM_MATCH_VID_OUTER && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
 		field_info[i].field_id = OUT_VLAN_ID_FIELD_ID;
@@ -149,11 +173,12 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			field_info[i].filed_value.int_data.parsed_int_val_mask);
 		i++;
 	}
-	if (field_bm & TPM_MATCH_PBITS_OUTER && i < field_max) {
+#ifdef CONFIG_MV_ETH_PP2_1
+	if (field_bm & TPM_MATCH_PBITS_INNER && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
-		field_info[i].field_id = OUT_VLAN_PRI_FIELD_ID;
-		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->out_pbit;
-		field_size = tpm_field_size_array[field_info[i].field_id];
+		field_info[i].field_id = IN_VLAN_PRI_FIELD_ID;
+		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->inn_pbit;
+		field_size = tpm_field_size_get(field_info[i].field_id);
 		field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
 		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
 			i, tpm_utils_field_id_str_get(field_info[i].field_id),
@@ -161,6 +186,7 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			field_info[i].filed_value.int_data.parsed_int_val_mask);
 		i++;
 	}
+#endif
 	if (field_bm & TPM_MATCH_VID_INNER && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
 		field_info[i].field_id = IN_VLAN_ID_FIELD_ID;
@@ -173,16 +199,7 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			field_info[i].filed_value.int_data.parsed_int_val_mask);
 		i++;
 	}
-#if 0
-	if (field_bm & TPM_MATCH_PBITS_INNER && i < field_max) {
-		field_info[i].valid = TPM_FIELD_VALID;
-		field_info[i].field_id = OUT_VLAN_PRI_FIELD_ID;
-		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->inn_pbit;
-		field_size = tpm_field_size_array[field_info[i].field_id];
-		field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
-		i++;/*need confirm*/
-	}
-#endif
+
 	if (field_bm & TPM_MATCH_ETH_TYPE && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
 		field_info[i].field_id = ETH_TYPE_FIELD_ID;
@@ -195,16 +212,7 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			field_info[i].filed_value.int_data.parsed_int_val_mask);
 		i++;
 	}
-#if 0
-	if (field_bm & TPM_MATCH_PPPOE_PROTO && i < field_max) {
-		field_info[i].valid = TPM_FIELD_VALID;
-		field_info[i].field_id = PPPOE_FIELD_ID;
-		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ppp_info.ppp_proto;
-		field_size = tpm_field_size_array[field_info[i].field_id];
-		field_info[i].filed_value.int_data.parsed_int_valMask = common_mask_gen(field_size);
-		i++;/* Need confirm */
-	}
-#endif
+
 	if (field_bm & TPM_MATCH_PPPOE_SES && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
 		field_info[i].field_id = PPPOE_FIELD_ID;
@@ -217,6 +225,21 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			field_info[i].filed_value.int_data.parsed_int_val_mask);
 		i++;
 	}
+
+#if CONFIG_MV_ETH_PP2_1
+	if (field_bm & TPM_MATCH_PPPOE_PROTO && i < field_max) {
+		field_info[i].valid = TPM_FIELD_VALID;
+		field_info[i].field_id = PPPOE_PROTO_ID;
+		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ppp_info.ppp_proto;
+		field_size = tpm_field_size_get(field_info[i].field_id);
+		field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
+		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
+			i, tpm_utils_field_id_str_get(field_info[i].field_id),
+			field_info[i].filed_value.int_data.parsed_int_val,
+			field_info[i].filed_value.int_data.parsed_int_val_mask);
+		i++;
+	}
+#endif
 	if ((field_bm & (TPM_MATCH_IP_VERSION)) && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
 		field_info[i].field_id = IP_VER_FIELD_ID;
@@ -229,6 +252,69 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			field_info[i].filed_value.int_data.parsed_int_val_mask);
 		i++;
 	}
+	if (field_bm & TPM_MATCH_IP_DSCP && i < field_max) {
+		if (is_ipv4) {
+			field_info[i].valid = TPM_FIELD_VALID;
+			field_info[i].field_id = IPV4_DSCP_FIELD_ID;
+			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.dscp;
+			field_info[i].filed_value.int_data.parsed_int_val_mask =
+				tpm_pkt_key->pkt_key->ipvx_add.dscp_mask;
+		} else {
+			field_info[i].valid = TPM_FIELD_VALID;
+			field_info[i].field_id = IPV6_DSCP_FIELD_ID;
+			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.dscp;
+			field_info[i].filed_value.int_data.parsed_int_val_mask =
+				tpm_pkt_key->pkt_key->ipvx_add.dscp_mask;
+		}
+		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
+			i, tpm_utils_field_id_str_get(field_info[i].field_id),
+			field_info[i].filed_value.int_data.parsed_int_val,
+			field_info[i].filed_value.int_data.parsed_int_val_mask);
+		i++;
+	}
+	if (field_bm & TPM_MATCH_IPV6_FLBL && i < field_max) {
+		field_info[i].valid = TPM_FIELD_VALID;
+		field_info[i].field_id = IPV6_FLOW_LBL_FIELD_ID;
+		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.flow_label;
+		field_info[i].filed_value.int_data.parsed_int_val_mask = tpm_pkt_key->pkt_key->ipvx_add.flow_label_mask;
+		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
+			i, tpm_utils_field_id_str_get(field_info[i].field_id),
+			field_info[i].filed_value.int_data.parsed_int_val,
+			field_info[i].filed_value.int_data.parsed_int_val_mask);
+		i++;
+	}
+	if (field_bm & TPM_MATCH_TTL && i < field_max) {
+		field_info[i].valid = TPM_FIELD_VALID;
+		field_info[i].field_id = IPV4_TTL_FIELD_ID;
+		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->ttl;
+		field_size = tpm_field_size_array[field_info[i].field_id];
+		field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
+		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
+			i, tpm_utils_field_id_str_get(field_info[i].field_id),
+			field_info[i].filed_value.int_data.parsed_int_val,
+			field_info[i].filed_value.int_data.parsed_int_val_mask);
+		i++;
+	}
+	if (l4_info == true && field_bm & TPM_MATCH_IP_PROTO && i < field_max) {
+		if (is_ipv4) {
+			field_info[i].valid = TPM_FIELD_VALID;
+			field_info[i].field_id = IPV4_PROTO_FIELD_ID;
+			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.ip_proto;
+			field_size = tpm_field_size_array[field_info[i].field_id];
+			field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
+		} else {
+			field_info[i].valid = TPM_FIELD_VALID;
+			field_info[i].field_id = IPV6_NH_FIELD_ID;
+			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.ip_proto;
+			field_size = tpm_field_size_array[field_info[i].field_id];
+			field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
+		}
+		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
+			i, tpm_utils_field_id_str_get(field_info[i].field_id),
+			field_info[i].filed_value.int_data.parsed_int_val,
+			field_info[i].filed_value.int_data.parsed_int_val_mask);
+		i++;
+	}
 	if (field_bm & TPM_MATCH_IP_SRC && i < field_max) {
 		if (is_ipv4) {
 			field_info[i].valid = TPM_FIELD_VALID;
@@ -299,57 +385,6 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			i++;
 		}
 	}
-	if (field_bm & TPM_MATCH_IP_DSCP && i < field_max) {
-		if (is_ipv4) {
-			field_info[i].valid = TPM_FIELD_VALID;
-			field_info[i].field_id = IPV4_DSCP_FIELD_ID;
-			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.dscp;
-			field_info[i].filed_value.int_data.parsed_int_val_mask =
-				tpm_pkt_key->pkt_key->ipvx_add.dscp_mask;
-		} else {
-			field_info[i].valid = TPM_FIELD_VALID;
-			field_info[i].field_id = IPV6_DSCP_FIELD_ID;
-			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.dscp;
-			field_info[i].filed_value.int_data.parsed_int_val_mask =
-				tpm_pkt_key->pkt_key->ipvx_add.dscp_mask;
-		}
-		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
-			i, tpm_utils_field_id_str_get(field_info[i].field_id),
-			field_info[i].filed_value.int_data.parsed_int_val,
-			field_info[i].filed_value.int_data.parsed_int_val_mask);
-		i++;
-	}
-	if (field_bm & TPM_MATCH_IPV6_FLBL && i < field_max) {
-		field_info[i].valid = TPM_FIELD_VALID;
-		field_info[i].field_id = IPV6_FLOW_LBL_FIELD_ID;
-		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.flow_label;
-		field_info[i].filed_value.int_data.parsed_int_val_mask = tpm_pkt_key->pkt_key->ipvx_add.flow_label_mask;
-		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
-			i, tpm_utils_field_id_str_get(field_info[i].field_id),
-			field_info[i].filed_value.int_data.parsed_int_val,
-			field_info[i].filed_value.int_data.parsed_int_val_mask);
-		i++;
-	}
-	if (l4_info == true && field_bm & TPM_MATCH_IP_PROTO && i < field_max) {
-		if (is_ipv4) {
-			field_info[i].valid = TPM_FIELD_VALID;
-			field_info[i].field_id = IPV4_PROTO_FIELD_ID;
-			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.ip_proto;
-			field_size = tpm_field_size_array[field_info[i].field_id];
-			field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
-		} else {
-			field_info[i].valid = TPM_FIELD_VALID;
-			field_info[i].field_id = IPV6_NH_FIELD_ID;
-			field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->pkt_key->ipvx_add.ip_proto;
-			field_size = tpm_field_size_array[field_info[i].field_id];
-			field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
-		}
-		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
-			i, tpm_utils_field_id_str_get(field_info[i].field_id),
-			field_info[i].filed_value.int_data.parsed_int_val,
-			field_info[i].filed_value.int_data.parsed_int_val_mask);
-		i++;
-	}
 	if (field_bm & TPM_MATCH_L4_SRC && i < field_max) {
 		field_info[i].valid = TPM_FIELD_VALID;
 		field_info[i].field_id = L4_SRC_FIELD_ID;
@@ -374,18 +409,6 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 			field_info[i].filed_value.int_data.parsed_int_val_mask);
 		i++;
 	}
-	if (field_bm & TPM_MATCH_TTL && i < field_max) {
-		field_info[i].valid = TPM_FIELD_VALID;
-		field_info[i].field_id = IPV4_TTL_FIELD_ID;
-		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->ttl;
-		field_size = tpm_field_size_array[field_info[i].field_id];
-		field_info[i].filed_value.int_data.parsed_int_val_mask = common_mask_gen(field_size);
-		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
-			i, tpm_utils_field_id_str_get(field_info[i].field_id),
-			field_info[i].filed_value.int_data.parsed_int_val,
-			field_info[i].filed_value.int_data.parsed_int_val_mask);
-		i++;
-	}
 	if ((field_bm & TPM_MATCH_TCP_FLAG_RF ||
 	    field_bm & TPM_MATCH_TCP_FLAG_S) &&
 	    i < field_max) {
@@ -412,34 +435,8 @@ int tpm_field_bm_to_field_info(unsigned int			field_bm,
 		i++;
 	}
 
-	if (field_bm & TPM_MATCH_MH && i < field_max) {
-		field_info[i].valid = TPM_FIELD_VALID;
-		field_info[i].field_id = MH_FIELD_ID;
-		field_info[i].filed_value.int_data.parsed_int_val = tpm_pkt_key->mh;
-		field_size = tpm_field_size_array[field_info[i].field_id];
-		field_info[i].filed_value.int_data.parsed_int_val_mask = tpm_pkt_key->mh_mask;
-		TPM_OS_DEBUG(TPM_COMMON_MOD, "field_info[%d] %s val 0x%x mask 0x%x\n",
-			i, tpm_utils_field_id_str_get(field_info[i].field_id),
-			field_info[i].filed_value.int_data.parsed_int_val,
-			field_info[i].filed_value.int_data.parsed_int_val_mask);
-		i++;
-	}
-
 	field_cnt = i;
 
-	/* bubble sort field_id */
-	if (field_cnt > 1) {
-		for (i = 0; i < field_cnt - 1; i++) {
-			for (j = i + 1 ; j < field_cnt; j++) {
-				if (field_info[i].field_id > field_info[j].field_id) {
-					memcpy(&temp, &field_info[i], sizeof(struct tpm_field_match_info));
-					memcpy(&field_info[i], &field_info[j], sizeof(struct tpm_field_match_info));
-					memcpy(&field_info[j], &temp, sizeof(struct tpm_field_match_info));
-				}
-			}
-		}
-	}
-
 	return TPM_OK;
 }
 
@@ -465,6 +462,14 @@ unsigned int tpm_field_size_get(unsigned int field_id)
 	if (field_id == ARP_IPV4_DA_FIELD_ID)
 		return ARP_IPV4_DA_FIELD_SIZE;
 
+#ifdef CONFIG_MV_ETH_PP2_1
+	if (field_id == IN_VLAN_PRI_FIELD_ID)
+		return IN_VLAN_PRI_FIELD_SIZE;
+
+	if (field_id == PPPOE_PROTO_ID)
+		return PPPOE_PROTO_SIZE;
+#endif
+
 	if (field_id >= CLS_FIELD_MAX)
 		return 0;
 
-- 
1.7.5.4

