From c794281185b7df64d6c72ce918843c4d9e17342c Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Wed, 21 May 2014 15:16:58 +0800
Subject: [PATCH 1676/1825] alp: pon: support XPON MIB counter for A0

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 231a3daf7ae2d3e7edd83d1c64e60791ce1281a1

    changed all the XPON registers mapping, rewrite MIB related functions
Signed-off-by: Victor Gu <xigu@marvell.com>

Change-Id: Ia0cc28bfe56e8a2ac06d74ddeab7e67fd03f8067
Reviewed-on: http://vgitil04.il.marvell.com:8080/8157
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Tested-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_pon/core/epon/eponOnuApi.c   |    2 +-
 .../mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.c    |  438 +++++++++++++-------
 .../mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.h    |   11 +-
 .../mv_pon/core/gpon/gponCustomerApi.c             |   13 +-
 .../mv_drivers_lsp/mv_pon/core/gpon/gponOnuApi.c   |    3 +-
 .../mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.c    |  433 +++++++++++++-------
 .../mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.h    |   12 +-
 .../mv_pon/perf/epon/eponOnuLnxKsMI.h              |   23 +-
 .../mv_pon/perf/epon/eponOnuLnxKsUI.c              |  138 ++++---
 .../mv_pon/perf/gpon/gponOnuLnxKsMI.h              |   22 +-
 .../mv_pon/perf/gpon/gponOnuLnxKsUI.c              |  135 ++++---
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h  |   31 +--
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c     |  110 ++----
 arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h     |  104 ++----
 14 files changed, 874 insertions(+), 601 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuApi.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuApi.c
index 45df9c2..c1f4b57 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuApi.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuApi.c
@@ -1836,7 +1836,7 @@ MV_STATUS onuEponApiLlidPmGet(S_EponIoctlLlidMibCounters *llidMibCounters)
 			   "%s:%d, llid(%d) invalid\n", __FILE_DESC__, __LINE__, llidMibCounters->llid);
 		return MV_BAD_PARAM;
 	}
-	if (!(llidMibCounters->direction == LLIDPMDIRECTION_BIDI || llidMibCounters->direction == LLIDPMDIRECTION_DS ||
+	if (!(llidMibCounters->direction == LLIDPMDIRECTION_DS ||
 	      llidMibCounters->direction == LLIDPMDIRECTION_US)) {
 		mvPonPrint(PON_PRINT_INFO, PON_CLI_MODULE,
 			   "%s:%d, direction(%d) invalid\n", __FILE_DESC__, __LINE__, llidMibCounters->direction);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.c
index 0fe1c60..332753f 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.c
@@ -1050,58 +1050,95 @@ MV_U32 onuEponPmGenCrcKey(MV_U32 msg[], MV_U32 size)
 void onuEponPmLlidPmInit(void)
 {
 	int indx;
+	int rc;
 
+	memset(&apiLlidPmConfigDb, 0, sizeof(apiLlidPmConfigDb));
 	for (indx = 0; indx < MAX_ENTRIES_LLIDPM_CONFIG_DB; indx++)
 		apiLlidPmConfigDb.apiLlidPmConfigAra[indx].in_use = MV_FALSE;
 
-	if (asicOntMiscRegRead(mvAsicReg_PON_MIB_DEFAULT, &apiLlidPmConfigDb.origRxMibDefaultReg, 0) != MV_OK)
-		printk("%s: asicOntMiscRegRead failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-		__func__, mvAsicReg_PON_MIB_DEFAULT);
+	rc = asicOntMiscRegRead(mvAsicReg_PON_RX_MIB_DEFAULT, &apiLlidPmConfigDb.origRxMibDefaultReg, 0);
+	if (rc != MV_OK)
+		printk(KERN_ERR "%s: asicOntMiscRegRead failed for mvAsicReg_PON_RX_MIB_DEFAULT(%d)\n",
+			__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+
+	rc = asicOntMiscRegRead(mvAsicReg_PON_TX_MIB_DEFAULT, &apiLlidPmConfigDb.origTxMibDefaultReg, 0);
+	if (rc != MV_OK)
+		printk(KERN_ERR "%s: asicOntMiscRegRead failed for mvAsicReg_PON_TX_MIB_DEFAULT(%d)\n",
+			__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+
 }
 
-int onuEponPmLlidPmGetNumUsedEntries(void)
+int onuEponPmLlidPmGetNumUsedEntries(MV_U32 direction)
 {
-	int indx;
-	int usedEntries = 0;
-
-	for (indx = 0; indx < MAX_ENTRIES_LLIDPM_CONFIG_DB; indx++)
-		if (apiLlidPmConfigDb.apiLlidPmConfigAra[indx].in_use == MV_TRUE)
-			usedEntries++;
-	return usedEntries;
+	if (LLIDPMDIRECTION_DS == direction)
+		return apiLlidPmConfigDb.rxLlidPmNum;
+	else
+		return apiLlidPmConfigDb.txLlidPmNum;
 }
 
-MV_STATUS onuEponPmLlidPmSetControl(int counter_set, MV_U32 direction, MV_U32 ctrlValue)
+MV_STATUS onuEponPmLlidPmSetDefault(MV_U32 direction, MV_U32 enable)
 {
 	MV_STATUS rcode = MV_OK;
-	MV_U32 baseControlReg;
-	MV_U32 registersAra[] = {
-		mvAsicReg_PON_MAC_MIB_CONTROL_0, mvAsicReg_PON_MAC_MIB_CONTROL_1, mvAsicReg_PON_MAC_MIB_CONTROL_2,
-		mvAsicReg_PON_MAC_MIB_CONTROL_3, mvAsicReg_PON_MAC_MIB_CONTROL_4, mvAsicReg_PON_MAC_MIB_CONTROL_5,
-		mvAsicReg_PON_MAC_MIB_CONTROL_6, mvAsicReg_PON_MAC_MIB_CONTROL_7, mvAsicReg_PON_MAC_MIB_CONTROL_8,
-		mvAsicReg_PON_MAC_MIB_CONTROL_9, mvAsicReg_PON_MAC_MIB_CONTROL_10, mvAsicReg_PON_MAC_MIB_CONTROL_11,
-		mvAsicReg_PON_MAC_MIB_CONTROL_12, mvAsicReg_PON_MAC_MIB_CONTROL_13,  mvAsicReg_PON_MAC_MIB_CONTROL_14,
-		mvAsicReg_PON_MAC_MIB_CONTROL_15
-	};
-
-	if (counter_set >= sizeof(registersAra) / sizeof(registersAra[0])) {
-		printk("%s: counter_set(%d) is out of range (should be < %d)\n",
-		       __func__, counter_set, sizeof(registersAra) / sizeof(registersAra[0]));
-		return rcode;
-	}
+	MV_U32 mibCtrlValue;
 
-	baseControlReg = registersAra[counter_set];
 	if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_DS) {
-		if ((rcode = asicOntMiscRegWrite(baseControlReg, ctrlValue, ONU_MIB_PM_RX_MIB_Control)) != MV_OK) {
-			printk("%s: asicOntMiscRegWrite failed for counter_set(%d), direction(%d), Rx-offset(%d)\n",
-			       __func__, counter_set, direction, ONU_MIB_PM_RX_MIB_Control);
-			return rcode;
+		if (onuEponPmLlidPmGetNumUsedEntries(LLIDPMDIRECTION_DS) == 0) {
+			if (ONU_MIB_PM_DISABLE == enable) {
+				rcode = asicOntMiscRegRead(mvAsicReg_PON_RX_MIB_DEFAULT,
+						&apiLlidPmConfigDb.origRxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegRead failed for PON_RX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+					return rcode;
+				}
+				mibCtrlValue = MAKE_MIB_COUNTER_DEFAULT(MIB_COUNTER_CONTROL_INVALID_BIT, 0);
+				rcode = asicOntMiscRegWrite(mvAsicReg_PON_RX_MIB_DEFAULT, mibCtrlValue, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_RX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+					return rcode;
+				}
+			} else if (ONU_MIB_PM_ENABLE == enable) {
+				rcode = asicOntMiscRegWrite(mvAsicReg_PON_RX_MIB_DEFAULT,
+						apiLlidPmConfigDb.origRxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_RX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+					return rcode;
+				}
+			}
+		}
+	}
+
+	if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_US) {
+		if (onuEponPmLlidPmGetNumUsedEntries(LLIDPMDIRECTION_US) == 0) {
+			if (ONU_MIB_PM_DISABLE == enable) {
+				rcode = asicOntMiscRegRead(mvAsicReg_PON_TX_MIB_DEFAULT,
+						&apiLlidPmConfigDb.origTxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegRead failed for PON_TX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+					return rcode;
+				}
+				mibCtrlValue = MAKE_MIB_COUNTER_DEFAULT(MIB_COUNTER_CONTROL_INVALID_BIT, 0);
+					rcode = asicOntMiscRegWrite(mvAsicReg_PON_TX_MIB_DEFAULT, mibCtrlValue, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_TX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+					return rcode;
+				}
+			} else if (ONU_MIB_PM_ENABLE == enable) {
+				rcode = asicOntMiscRegWrite(mvAsicReg_PON_TX_MIB_DEFAULT,
+						apiLlidPmConfigDb.origTxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_TX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+					return rcode;
+				}
+			}
 		}
 	}
 
-	if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_US)
-		if ((rcode = asicOntMiscRegWrite(baseControlReg, ctrlValue, ONU_MIB_PM_TX_MIB_Control)) != MV_OK)
-			printk("%s: asicOntMiscRegWrite failed for counter_set(%d), direction(%d), Tx-offset(%d)\n",
-			       __func__, counter_set, direction, ONU_MIB_PM_TX_MIB_Control);
 	return rcode;
 }
 
@@ -1128,74 +1165,129 @@ static MV_STATUS onuEponPmLlidTranslation(MV_U16 llid, MV_U32 *translatedLlid)
 	return rcode;
 }
 
+MV_STATUS onuEponPmLlidPmSetControl(MV_U16 llid, MV_U32 direction, MV_U32 rxIndx, MV_U32 txIndx, MV_U32 enable)
+{
+	MV_STATUS rcode = MV_OK;
+	MV_U32 ctrlValue;
+	MV_U32 translatedLlid;
+
+	rcode = onuEponPmLlidTranslation(llid, &translatedLlid);
+	if (rcode != MV_OK) {
+		printk(KERN_INFO "%s: failed to translate llid(%d)\n", __func__, llid);
+		return MV_FAIL;
+	}
+
+	if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_DS) {
+		if (ONU_MIB_PM_ENABLE == enable)
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_VALID_BIT, rxIndx, translatedLlid);
+		else
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
+		rcode = asicOntMiscRegWrite(mvAsicReg_PON_RX_MIB_CONTROL, ctrlValue, rxIndx);
+		if (rcode != MV_OK) {
+			printk(KERN_INFO "%s: asicOntMiscRegWrite failed for llid(%d), direction(%d)\n",
+				__func__, llid, direction);
+			return MV_FAIL;
+		}
+	}
+
+	if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_US) {
+		if (ONU_MIB_PM_ENABLE == enable)
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_VALID_BIT, txIndx, translatedLlid);
+		else
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
+		rcode = asicOntMiscRegWrite(mvAsicReg_PON_TX_MIB_CONTROL, ctrlValue, txIndx);
+		if (rcode != MV_OK) {
+			printk(KERN_INFO "%s: asicOntMiscRegWrite failed for llid(%d), direction(%d)\n",
+				__func__, llid, direction);
+			return MV_FAIL;
+		}
+	}
+
+	return rcode;
+}
+
 MV_STATUS onuEponPmLlidPmStart(MV_U16 llid, MV_U32 direction)
 {
 	MV_STATUS rcode = MV_OK;
 	int indx;
 	S_apiLlidPmConfig    *apiLlidPmConfig;
 	S_apiLlidPmConfig    *tgtApiLlidPmConfig = 0;
-	int freeIndx;
-	MV_U32 mibCtrlValue;
-	MV_U32 translatedLlid;
 
+	/* Does the GEM Port already appear in table */
 	for (indx = 0; indx < MAX_SUPPORTED_LLIDS_FOR_PM; indx++) {
 		apiLlidPmConfig = &apiLlidPmConfigDb.apiLlidPmConfigAra[indx];
 		if (apiLlidPmConfig->in_use == MV_TRUE && apiLlidPmConfig->llid == llid) {
 			if (apiLlidPmConfig->direction == direction) {
-				printk("%s: llid(%d), direction(%d) already configured\n",
+				printk(KERN_INFO "%s: llid(%d), direction(%d) already configured\n",
 					__func__, llid, direction);
 				return MV_ALREADY_EXIST;
 			} else if (apiLlidPmConfig->direction == LLIDPMDIRECTION_BIDI) {
-				printk("%s: llid(%d) bidi PM already configured\n", __func__, llid);
+				printk(KERN_INFO "%s: llid(%d) bidi PM already configured\n", __func__, llid);
 				return MV_NOT_ALLOWED;
 			} else if (direction == LLIDPMDIRECTION_BIDI) {
-				printk("%s: llid(%d) unidirectional PM already configured\n", __func__, llid);
+				printk(KERN_INFO "%s: llid(%d) unidirectional PM already configured\n",
+					__func__, llid);
 				return MV_NOT_ALLOWED;
 			}
 		}
 	}
 
+	/* Check whether there is valid MIB */
+	if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_DS) {
+		if (apiLlidPmConfigDb.rxLlidPmNum >= MAX_SUPPORTED_LLIDS_FOR_PM) {
+			printk(KERN_ERR "%s: RX LLID ports for PM is full(%d)\n",
+				__func__, MAX_SUPPORTED_LLIDS_FOR_PM);
+			return MV_NO_RESOURCE;
+		}
+	}
+	if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_US) {
+		if (apiLlidPmConfigDb.txLlidPmNum >= MAX_SUPPORTED_LLIDS_FOR_PM) {
+			printk(KERN_ERR "%s: TX LLID ports for PM is full(%d)\n",
+				__func__, MAX_SUPPORTED_LLIDS_FOR_PM);
+			return MV_NO_RESOURCE;
+		}
+	}
+
+	/* Find a free entry */
 	for (indx = 0; indx < MAX_SUPPORTED_LLIDS_FOR_PM; indx++) {
 		apiLlidPmConfig = &apiLlidPmConfigDb.apiLlidPmConfigAra[indx];
 		if (apiLlidPmConfig->in_use == MV_FALSE) {
 			tgtApiLlidPmConfig = apiLlidPmConfig;
-			freeIndx           = indx;
 			break;
 		}
 	}
-
 	if (tgtApiLlidPmConfig == 0) {
-		printk("%s: LLID MIB PM table full. llid = %d (start)\n", __func__, llid);
-		return MV_NO_MORE;
+		printk(KERN_INFO "%s: LLID Port MIB PM table full. LLID = %d (start)\n",
+			__func__, llid);
+		return MV_NO_RESOURCE;
 	}
 
-	if (onuEponPmLlidPmGetNumUsedEntries() == 0) {
-		if ((rcode = asicOntMiscRegRead(mvAsicReg_PON_MIB_DEFAULT, &apiLlidPmConfigDb.origRxMibDefaultReg, 0))
-		    != MV_OK) {
-			printk("%s: asicOntMiscRegRead failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-				__func__, mvAsicReg_PON_MIB_DEFAULT);
-			return rcode;
-		}
-		mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
-		if ((rcode = asicOntMiscRegWrite(mvAsicReg_PON_MIB_DEFAULT, mibCtrlValue, 0)) != MV_OK) {
-			printk("%s: asicOntMiscRegWrite failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-				__func__, mvAsicReg_PON_MIB_DEFAULT);
-			return rcode;
-		}
+	/* Disable default PM */
+	rcode = onuEponPmLlidPmSetDefault(direction, ONU_MIB_PM_DISABLE);
+	if (rcode != MV_OK) {
+		printk(KERN_ERR "%s: Failed to disable default LLID Port MIB, direction(%d)\n",
+			__func__, direction);
+		return MV_FAIL;
 	}
 
-	if ((rcode = onuEponPmLlidTranslation(llid, &translatedLlid)) == MV_OK) {
-		mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_VALID_BIT, freeIndx, translatedLlid);
-		if ((rcode = onuEponPmLlidPmSetControl(freeIndx, direction, mibCtrlValue)) != MV_OK)
-			printk("%s: Failed to start LLID MIB PM for llid(%d), direction(%d), counter_set(%d)\n",
-				__func__, llid, direction, freeIndx);
-		else {
-			tgtApiLlidPmConfig->llid        = llid;
-			tgtApiLlidPmConfig->counter_set = freeIndx;
-			tgtApiLlidPmConfig->direction   = direction;
-			tgtApiLlidPmConfig->in_use      = MV_TRUE;
-		}
+	/* Start the LLID Port MIB PM */
+	rcode = onuEponPmLlidPmSetControl(llid, direction, apiLlidPmConfigDb.rxLlidPmNum,
+			apiLlidPmConfigDb.txLlidPmNum, ONU_MIB_PM_ENABLE);
+	if (rcode != MV_OK)
+		printk(KERN_ERR "%s: Failed to start LLID Port MIB PM for llid(%d), direction(%d)\n",
+			__func__, llid, direction);
+	else {
+		tgtApiLlidPmConfig->llid        = llid;
+		tgtApiLlidPmConfig->rx_cnt_set  = apiLlidPmConfigDb.txLlidPmNum;
+		tgtApiLlidPmConfig->tx_cnt_set  = apiLlidPmConfigDb.txLlidPmNum;
+		tgtApiLlidPmConfig->direction   = direction;
+		tgtApiLlidPmConfig->in_use      = MV_TRUE;
+		if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_DS)
+			apiLlidPmConfigDb.txLlidPmNum++;
+		if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_US)
+			apiLlidPmConfigDb.txLlidPmNum++;
 	}
+
 	return rcode;
 }
 
@@ -1203,41 +1295,48 @@ MV_STATUS  onuEponPmLlidPmStop(MV_U16 llid, MV_U32 direction)
 {
 	MV_STATUS rcode = MV_OK;
 	int indx;
-	S_apiLlidPmConfig    *apiLlidPmConfig;
-	S_apiLlidPmConfig    *tgtApiLlidPmConfig = 0;
-	MV_U32 mibCtrlValue;
+	S_apiLlidPmConfig *apiLlidPmConfig;
+	S_apiLlidPmConfig *tgtApiLlidPmConfig = 0;
 
+	/* Does the LLID Port already appear in table */
 	for (indx = 0; indx < MAX_SUPPORTED_LLIDS_FOR_PM; indx++) {
 		apiLlidPmConfig = &apiLlidPmConfigDb.apiLlidPmConfigAra[indx];
 		if (apiLlidPmConfig->in_use == MV_TRUE && apiLlidPmConfig->llid == llid &&
-		    apiLlidPmConfig->direction == direction) {
+			apiLlidPmConfig->direction == direction) {
 			tgtApiLlidPmConfig = apiLlidPmConfig;
 			break;
 		}
 	}
 
+	/* Did we find a free entry */
 	if (tgtApiLlidPmConfig == 0) {
-		printk("%s: llid %d, direction(%d) not configured\n", __func__, llid, direction);
+		printk(KERN_INFO "%s: LLID %d, direction(%d) not configured\n",
+			__func__, llid, direction);
 		return MV_NOT_FOUND;
 	}
 
-	mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
-	rcode = onuEponPmLlidPmSetControl(indx, direction, mibCtrlValue);
-	if (rcode != MV_OK) {
-		printk("%s: Failed to stop LLID MIB PM for llid(%d), direction(%d), counter_set(%d)\n",
-			__func__, llid, direction, indx);
-		return rcode;
-	} else
+	/* Stop the LLID Port MIB PM */
+	rcode = onuEponPmLlidPmSetControl(llid, direction, tgtApiLlidPmConfig->rx_cnt_set,
+			tgtApiLlidPmConfig->tx_cnt_set, ONU_MIB_PM_DISABLE);
+	if (rcode != MV_OK)
+		printk(KERN_ERR "%s: Failed to stop LLID Port MIB PM for gemPort(%d), direction(%d)\n",
+			__func__, llid, direction);
+	else {
 		tgtApiLlidPmConfig->in_use = MV_FALSE;
+		if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_DS)
+			apiLlidPmConfigDb.rxLlidPmNum--;
+		if (direction == LLIDPMDIRECTION_BIDI || direction == LLIDPMDIRECTION_US)
+			apiLlidPmConfigDb.txLlidPmNum--;
+	}
 
-	if (onuEponPmLlidPmGetNumUsedEntries() == 0) {
-		rcode = asicOntMiscRegWrite(mvAsicReg_PON_MIB_DEFAULT, apiLlidPmConfigDb.origRxMibDefaultReg, 0);
-		if (rcode != MV_OK) {
-			printk("%s: asicOntMiscRegWrite failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-				__func__, mvAsicReg_PON_MIB_DEFAULT);
-			return rcode;
-		}
+	/* Enable default PM */
+	rcode = onuEponPmLlidPmSetDefault(direction, ONU_MIB_PM_ENABLE);
+	if (rcode != MV_OK) {
+		printk(KERN_ERR "%s: Failed to enable default LLID Port MIB, direction(%d)\n",
+			__func__, direction);
+		return MV_FAIL;
 	}
+
 	return rcode;
 }
 
@@ -1245,22 +1344,32 @@ MV_STATUS onuEponPmLlidPmReset(void)
 {
 	MV_STATUS rcode;
 	int indx;
-	uint32_t mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
+	S_apiLlidPmConfig *pmCfg = NULL;
 
+	/* Clear HW */
 	for (indx = 0; indx < MAX_ENTRIES_LLIDPM_CONFIG_DB; indx++) {
-		apiLlidPmConfigDb.apiLlidPmConfigAra[indx].in_use = MV_FALSE;
-		rcode = onuEponPmLlidPmSetControl(indx, LLIDPMDIRECTION_BIDI, mibCtrlValue);
-		if (rcode != MV_OK) {
-			printk("%s: Failed to stop LLID MIB PM for counter_set(%d), bidi\n", __func__, indx);
-			return rcode;
+		pmCfg = &apiLlidPmConfigDb.apiLlidPmConfigAra[indx];
+		if (MV_TRUE == pmCfg->in_use) {
+			rcode = onuEponPmLlidPmSetControl(pmCfg->llid, pmCfg->direction,
+					pmCfg->rx_cnt_set, pmCfg->tx_cnt_set, ONU_MIB_PM_DISABLE);
+			if (rcode != MV_OK) {
+				printk(KERN_ERR "%s: Failed to stop GEM Port MIB PM for llid(%d), direction(%d)\n",
+					__func__, pmCfg->llid, pmCfg->direction);
+				return MV_FAIL;
+			}
 		}
 	}
-	rcode = asicOntMiscRegWrite(mvAsicReg_PON_MIB_DEFAULT, apiLlidPmConfigDb.origRxMibDefaultReg, 0);
+
+	/* Enable default PM */
+	rcode = onuEponPmLlidPmSetDefault(LLIDPMDIRECTION_BIDI, ONU_MIB_PM_ENABLE);
 	if (rcode != MV_OK) {
-		printk("%s: asicOntMiscRegWrite failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-			__func__, mvAsicReg_PON_MIB_DEFAULT);
-		return rcode;
+		printk(KERN_ERR "%s: Failed to enable default LLID Port MIB\n", __func__);
+		return MV_FAIL;
 	}
+
+	/* Reset DB */
+	onuEponPmLlidPmInit();
+
 	return MV_OK;
 }
 
@@ -1268,70 +1377,119 @@ MV_STATUS onuEponPmLlidPmGet(S_EponIoctlLlidMibCounters *llidMibCounters)
 {
 	MV_STATUS rcode = MV_OK;
 	int indx;
-	S_apiLlidPmConfig    *apiLlidPmConfig;
-	S_apiLlidPmConfig    *tgtApiLlidPmConfig = 0;
-	MV_U32 baseCounterReg;
-	MV_U32 lowvalue;
-	MV_U32 hivalue;
-	MV_U32 registersAra[] = {
-		mvAsicReg_PON_MAC_MIB_COUNTERS_0,  mvAsicReg_PON_MAC_MIB_COUNTERS_1,   mvAsicReg_PON_MAC_MIB_COUNTERS_2,    mvAsicReg_PON_MAC_MIB_COUNTERS_3,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_4,  mvAsicReg_PON_MAC_MIB_COUNTERS_5,   mvAsicReg_PON_MAC_MIB_COUNTERS_6,    mvAsicReg_PON_MAC_MIB_COUNTERS_7,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_8,  mvAsicReg_PON_MAC_MIB_COUNTERS_9,   mvAsicReg_PON_MAC_MIB_COUNTERS_10,   mvAsicReg_PON_MAC_MIB_COUNTERS_11,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_12, mvAsicReg_PON_MAC_MIB_COUNTERS_13,  mvAsicReg_PON_MAC_MIB_COUNTERS_14,   mvAsicReg_PON_MAC_MIB_COUNTERS_15,
-	};
+	int counter_set;
+	S_apiLlidPmConfig *apiLlidPmConfig;
+	S_apiLlidPmConfig *tgtApiLlidPmConfig = 0;
+	MV_U32 lowValue;
+	MV_U32 highValue;
 
-	for (indx = 0; indx < MAX_SUPPORTED_LLIDS_FOR_PM; indx++) {
+	for (indx = 0; indx < MAX_ENTRIES_LLIDPM_CONFIG_DB; indx++) {
 		apiLlidPmConfig = &apiLlidPmConfigDb.apiLlidPmConfigAra[indx];
-		if (apiLlidPmConfig->in_use == MV_TRUE && apiLlidPmConfig->llid == llidMibCounters->llid &&
-		    apiLlidPmConfig->direction == llidMibCounters->direction) {
-			baseCounterReg = registersAra[apiLlidPmConfig->counter_set];
+		if (apiLlidPmConfig->in_use == MV_TRUE &&
+		    apiLlidPmConfig->llid == llidMibCounters->llid &&
+		    (apiLlidPmConfig->direction == llidMibCounters->direction ||
+		     apiLlidPmConfig->direction == LLIDPMDIRECTION_BIDI)) {
 			tgtApiLlidPmConfig = apiLlidPmConfig;
 			break;
 		}
 	}
 
 	if (tgtApiLlidPmConfig != 0) {
-		rcode |= asicOntMiscRegRead(baseCounterReg, &lowvalue, ONU_MIB_PM_GoodOctetsReceived_low);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &hivalue,  ONU_MIB_PM_GoodOctetsReceived_high);
-		llidMibCounters->good_octets_received = (uint64_t)hivalue << 32 | lowvalue;
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->bad_octets_received,       ONU_MIB_PM_BadOctetsReceived);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->mac_trans_error,           ONU_MIB_PM_MACTransError);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->good_frames_received,      ONU_MIB_PM_GoodFramesReceived);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->bad_frames_received,       ONU_MIB_PM_BadFramesReceived);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->broadcast_frames_received, ONU_MIB_PM_BroadcastFramesReceived);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->multicast_frames_received, ONU_MIB_PM_MulticastFramesReceived);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->frames_64_octets,          ONU_MIB_PM_Frames64Octets);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->frames_65_to_127_octets,   ONU_MIB_PM_Frames65to127Octets);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->frames_128_to_255octets,   ONU_MIB_PM_Frames128to255Octets);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->frames_256_to_511_octets,  ONU_MIB_PM_Frames256to511Octets);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->frames_512_to_1023_octets, ONU_MIB_PM_Frames512to1023Octets);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->frames_1024_to_max_octets, ONU_MIB_PM_Frames1024toMaxOctets);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &lowvalue, ONU_MIB_PM_GoodOctetsSent_low);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &hivalue,  ONU_MIB_PM_GoodOctetsSent_high);
-		llidMibCounters->good_octets_sent = (uint64_t)hivalue << 32 | lowvalue;
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->good_frames_sent, ONU_MIB_PM_GoodFramesSent);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->multicast_frames_sent, ONU_MIB_PM_MulticastFramesSent);
-		rcode |= asicOntMiscRegRead(baseCounterReg, &llidMibCounters->broadcast_frames_sent, ONU_MIB_PM_BroadcastFramesSent);
-		if (rcode != MV_OK) {
-			printk("%s: asicOntMiscRegRead failure, rcode(%d), baseCounterReg(%d)\n", __func__, rcode, baseCounterReg);
-			return MV_ERROR;
+		if (LLIDPMDIRECTION_DS == llidMibCounters->direction) {
+			counter_set = tgtApiLlidPmConfig->rx_cnt_set;
+
+			/* 64 bit counter treatment: read the low part first, to lock the high part */
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_GOOD_OCT_LS, &lowValue, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_GOOD_OCT_MS, &highValue, counter_set);
+					llidMibCounters->good_octets = (uint64_t)highValue << 32 | lowValue;
+
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_GOOD_FRAME,
+					&llidMibCounters->good_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_BAD_OCTECT,
+					&llidMibCounters->bad_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_BAD_FRAME,
+					&llidMibCounters->bad_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_MULTICAST,
+					&llidMibCounters->multicast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_BROADCAST,
+					&llidMibCounters->broadcast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_64_OCT,
+					&llidMibCounters->frames_min_to_64_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_65_127_OCT,
+					&llidMibCounters->frames_65_to_127_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_128_255_OCT,
+					&llidMibCounters->frames_128_to_255_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_256_511_OCT,
+					&llidMibCounters->frames_256_to_511_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_512_1023_OCT,
+					&llidMibCounters->frames_512_to_1023_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_1024_OCT,
+					&llidMibCounters->frames_1024_to_max_octets, counter_set);
+
+			if (rcode != MV_OK) {
+				printk(KERN_ERR "%s: asicOntMiscRegRead failure, rcode(%d), dir(%d) counter_set(%d)\n",
+					__func__, rcode, LLIDPMDIRECTION_DS, counter_set);
+				return MV_ERROR;
+			}
+		} else  if (LLIDPMDIRECTION_US == llidMibCounters->direction) {
+			counter_set = tgtApiLlidPmConfig->tx_cnt_set;
+
+			/* 64 bit counter treatment: read the low part first, to lock the high part */
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_GOOD_OCT_LS, &lowValue, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_GOOD_OCT_MS, &highValue, counter_set);
+			llidMibCounters->good_octets = (uint64_t)highValue << 32 | lowValue;
+
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_GOOD_FRAME,
+					&llidMibCounters->good_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_BAD_OCTECT,
+					&llidMibCounters->bad_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_MAC_ERROR,
+					&llidMibCounters->bad_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_MULTICAST,
+					&llidMibCounters->multicast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_BROADCAST,
+					&llidMibCounters->broadcast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_64_OCT,
+					&llidMibCounters->frames_min_to_64_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_65_127_OCT,
+					&llidMibCounters->frames_65_to_127_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_128_255_OCT,
+					&llidMibCounters->frames_128_to_255_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_256_511_OCT,
+					&llidMibCounters->frames_256_to_511_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_512_1023_OCT,
+					&llidMibCounters->frames_512_to_1023_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_1024_OCT,
+					&llidMibCounters->frames_1024_to_max_octets, counter_set);
+
+			if (rcode != MV_OK) {
+				printk(KERN_ERR "%s: asicOntMiscRegRead failure, rcode(%d), dir(%d) counter_set(%d)\n",
+					__func__, rcode, LLIDPMDIRECTION_US, counter_set);
+				return MV_ERROR;
+			}
 		}
 	} else {
-		printk("%s: llid(%d), direction(%d) not configured\n", __func__, llidMibCounters->llid, llidMibCounters->direction);
+		printk(KERN_ERR "%s: llid(%d), direction(%d) not configured\n",
+			__func__, llidMibCounters->llid, llidMibCounters->direction);
 		return MV_NOT_FOUND;
 	}
+
 	return rcode;
 }
 
 MV_STATUS onuEponPmLlidPmConfigGet(MV_U16 dbIdx, S_apiLlidPmConfig *llidPmConfig)
 {
 	memset(llidPmConfig, 0, sizeof(S_apiLlidPmConfig));
+
 	if (dbIdx >= MAX_SUPPORTED_LLIDS_FOR_PM) {
-		printk("%s: Invalid index = %d\n", __func__, dbIdx);
+		printk(KERN_ERR "%s: Invalid index = %d\n", __func__, dbIdx);
 		return MV_OUT_OF_RANGE;
 	}
+
 	if (apiLlidPmConfigDb.apiLlidPmConfigAra[dbIdx].in_use == MV_FALSE)
 		return MV_GET_ERROR;
+
 	memcpy(llidPmConfig, &apiLlidPmConfigDb.apiLlidPmConfigAra[dbIdx], sizeof(S_apiLlidPmConfig));
+
 	return MV_OK;
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.h
index 775d342..e29c548 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/epon/eponOnuPm.h
@@ -165,15 +165,20 @@ typedef struct {
 typedef struct {
 	MV_BOOL in_use;
 	MV_U16 llid;
-	MV_U32 counter_set;
+	MV_U32 rx_cnt_set;
+	MV_U32 tx_cnt_set;
 	MV_U32 direction;
 } S_apiLlidPmConfig;
 
-#define MAX_SUPPORTED_LLIDS_FOR_PM           16
-#define MAX_ENTRIES_LLIDPM_CONFIG_DB         (MAX_SUPPORTED_LLIDS_FOR_PM)
+#define MAX_SUPPORTED_LLIDS_FOR_PM           8
+#define MAX_ENTRIES_LLIDPM_CONFIG_DB         (2 * MAX_SUPPORTED_LLIDS_FOR_PM)
 typedef struct {
+	MV_U32 rxLlidPmNum;
+	MV_U32 txLlidPmNum;
 	S_apiLlidPmConfig apiLlidPmConfigAra[MAX_ENTRIES_LLIDPM_CONFIG_DB];
 	MV_U32 origRxMibDefaultReg;
+	MV_U32 origTxMibDefaultReg;
+
 } S_apiLlidPmConfigDb;
 
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponCustomerApi.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponCustomerApi.c
index dc23860..4490521 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponCustomerApi.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponCustomerApi.c
@@ -749,12 +749,15 @@ int mrvl_api_gpon_get_gemport_stat(unsigned int gem, MRVL_GEM_STAT *stat)
 	memset(&gemMibCounters, 0, sizeof(S_GponIoctlGemPortMibCounters));
 
 	gemMibCounters.gem_port  = gem;
-	gemMibCounters.direction = GEMPORTPMDIRECTION_BIDI;
+	gemMibCounters.direction = GEMPORTPMDIRECTION_DS;
 	onuGponApiGemPortPmGet(&gemMibCounters);
-	stat->tranframes = gemMibCounters.good_frames_sent;
-	stat->rcvframes  = gemMibCounters.good_frames_received;
-	stat->tranoctets = gemMibCounters.good_octets_sent;
-	stat->rcvoctets  = gemMibCounters.good_octets_received;
+	stat->rcvoctets  = gemMibCounters.good_octets;
+	stat->rcvframes  = gemMibCounters.good_frames;
+
+	gemMibCounters.direction = GEMPORTPMDIRECTION_US;
+	onuGponApiGemPortPmGet(&gemMibCounters);
+	stat->tranoctets = gemMibCounters.good_octets;
+	stat->tranframes = gemMibCounters.good_frames;
 
 	return ret;
 }
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuApi.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuApi.c
index e0bcfa3..dc0d0aa 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuApi.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuApi.c
@@ -1876,8 +1876,7 @@ MV_STATUS onuGponApiGemPortPmGet(S_GponIoctlGemPortMibCounters *gemPortMibCounte
 			   "%s:%d, portId(%d) invalid\n", __FILE_DESC__, __LINE__, gemPortMibCounters->gem_port);
 		return MV_BAD_PARAM;
 	}
-	if (!(gemPortMibCounters->direction == GEMPORTPMDIRECTION_BIDI ||
-	      gemPortMibCounters->direction == GEMPORTPMDIRECTION_DS ||
+	if (!(gemPortMibCounters->direction == GEMPORTPMDIRECTION_DS ||
 	      gemPortMibCounters->direction == GEMPORTPMDIRECTION_US)) {
 		mvPonPrint(PON_PRINT_INFO, PON_CLI_MODULE,
 			   "%s:%d, direction(%d) invalid\n", __FILE_DESC__, __LINE__, gemPortMibCounters->direction);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.c
index 5e3ca7a..deb2ae9 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.c
@@ -790,13 +790,22 @@ MV_STATUS onuGponPmTxBurstEnCntGet(unsigned int *txBurstEnCnt)
 void onuGponPmGemPortPmInit(void)
 {
 	int indx;
+	int rc;
 
+	memset(&apiGemPortPmConfigDb, 0, sizeof(apiGemPortPmConfigDb));
 	for (indx = 0; indx < MAX_ENTRIES_GEMPORTPM_CONFIG_DB; indx++)
 		apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx].in_use = MV_FALSE;
 
-	if (asicOntGlbRegRead(mvAsicReg_PON_MIB_DEFAULT, &apiGemPortPmConfigDb.origRxMibDefaultReg, 0) != MV_OK)
-		printk(KERN_ERR "%s: asicOntGlbRegRead failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-			__func__, mvAsicReg_PON_MIB_DEFAULT);
+	rc = asicOntMiscRegRead(mvAsicReg_PON_RX_MIB_DEFAULT, &apiGemPortPmConfigDb.origRxMibDefaultReg, 0);
+	if (rc != MV_OK)
+		printk(KERN_ERR "%s: asicOntMiscRegRead failed for mvAsicReg_PON_RX_MIB_DEFAULT(%d)\n",
+			__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+
+	rc = asicOntMiscRegRead(mvAsicReg_PON_TX_MIB_DEFAULT, &apiGemPortPmConfigDb.origTxMibDefaultReg, 0);
+	if (rc != MV_OK)
+		printk(KERN_ERR "%s: asicOntMiscRegRead failed for mvAsicReg_PON_TX_MIB_DEFAULT(%d)\n",
+			__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+
 }
 
 /*******************************************************************************
@@ -806,22 +815,100 @@ void onuGponPmGemPortPmInit(void)
 **
 **  DESCRIPTION: The function counts the number of used GEM port entries in the DB
 **
-**  PARAMETERS:  void
+**  PARAMETERS:  MV_U32 direction
 **
 **  OUTPUTS:     None
 **
 **  RETURNS:     int
 **
 *******************************************************************************/
-int onuGponPmGemPortPmGetNumUsedEntries(void)
+int onuGponPmGemPortPmGetNumUsedEntries(MV_U32 direction)
 {
-	int indx;
-	int usedEntries = 0;
+	if (GEMPORTPMDIRECTION_DS == direction)
+		return apiGemPortPmConfigDb.rxGemPortPmNum;
+	else
+		return apiGemPortPmConfigDb.txGemPortPmNum;
+}
 
-	for (indx = 0; indx < MAX_ENTRIES_GEMPORTPM_CONFIG_DB; indx++)
-		if (apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx].in_use == MV_TRUE)
-			usedEntries++;
-	return usedEntries;
+/*******************************************************************************
+**
+**  onuGponPmGemPortPmSetDefault
+**  ____________________________________________________________________________
+**
+**  DESCRIPTION: The function sets the GEM Port default MIB PM control registers
+**
+**  PARAMETERS:  MV_U32 direction
+**               MV_U32 enable enable or disable GEM port PM accordingly.
+**
+**  OUTPUTS:     None
+**
+**  RETURNS:     MV_STATUS
+**
+*******************************************************************************/
+MV_STATUS onuGponPmGemPortPmSetDefault(MV_U32 direction, MV_U32 enable)
+{
+	MV_STATUS rcode = MV_OK;
+	MV_U32 mibCtrlValue;
+
+	if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_DS) {
+		if (onuGponPmGemPortPmGetNumUsedEntries(GEMPORTPMDIRECTION_DS) == 0) {
+			if (ONU_MIB_PM_DISABLE == enable) {
+				rcode = asicOntMiscRegRead(mvAsicReg_PON_RX_MIB_DEFAULT,
+						&apiGemPortPmConfigDb.origRxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegRead failed for PON_RX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+					return rcode;
+				}
+				mibCtrlValue = MAKE_MIB_COUNTER_DEFAULT(MIB_COUNTER_CONTROL_INVALID_BIT, 0);
+				rcode = asicOntMiscRegWrite(mvAsicReg_PON_RX_MIB_DEFAULT, mibCtrlValue, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_RX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+					return rcode;
+				}
+			} else if (ONU_MIB_PM_ENABLE == enable) {
+				rcode = asicOntMiscRegWrite(mvAsicReg_PON_RX_MIB_DEFAULT,
+						apiGemPortPmConfigDb.origRxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_RX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_RX_MIB_DEFAULT);
+					return rcode;
+				}
+			}
+		}
+	}
+
+	if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_US) {
+		if (onuGponPmGemPortPmGetNumUsedEntries(GEMPORTPMDIRECTION_US) == 0) {
+			if (ONU_MIB_PM_DISABLE == enable) {
+				rcode = asicOntMiscRegRead(mvAsicReg_PON_TX_MIB_DEFAULT,
+						&apiGemPortPmConfigDb.origTxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegRead failed for PON_TX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+					return rcode;
+				}
+				mibCtrlValue = MAKE_MIB_COUNTER_DEFAULT(MIB_COUNTER_CONTROL_INVALID_BIT, 0);
+				rcode = asicOntMiscRegWrite(mvAsicReg_PON_TX_MIB_DEFAULT, mibCtrlValue, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_TX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+					return rcode;
+				}
+			} else if (ONU_MIB_PM_ENABLE == enable) {
+				rcode = asicOntMiscRegWrite(mvAsicReg_PON_TX_MIB_DEFAULT,
+						apiGemPortPmConfigDb.origTxMibDefaultReg, 0);
+				if (rcode != MV_OK) {
+					printk(KERN_ERR "%s: asicOntMiscRegWrite failed for PON_TX_MIB_DEFAULT(%d)\n",
+						__func__, mvAsicReg_PON_TX_MIB_DEFAULT);
+					return rcode;
+				}
+			}
+		}
+	}
+
+	return rcode;
 }
 
 /*******************************************************************************
@@ -831,45 +918,48 @@ int onuGponPmGemPortPmGetNumUsedEntries(void)
 **
 **  DESCRIPTION: The function sets the GEM Port MIB PM control registers
 **
-**  PARAMETERS:  int    counter_set
+**  PARAMETERS:  MV_U16 gemPort
 **               MV_U32 direction
-**               MV_U32 ctrlValue
+**               MV_U32 rxIndx
+**               MV_U32 txIndx
+**               MV_U32 enable
 **
 **  OUTPUTS:     None
 **
 **  RETURNS:     MV_STATUS
 **
 *******************************************************************************/
-MV_STATUS onuGponPmGemPortPmSetControl(int counter_set, MV_U32 direction, MV_U32 ctrlValue)
+MV_STATUS onuGponPmGemPortPmSetControl(MV_U16 gemPort, MV_U32 direction, MV_U32 rxIndx, MV_U32 txIndx, MV_U32 enable)
 {
 	MV_STATUS rcode = MV_OK;
-	MV_U32 baseControlReg;
-	MV_U32 registersAra[] = {
-		mvAsicReg_PON_MAC_MIB_CONTROL_0,  mvAsicReg_PON_MAC_MIB_CONTROL_1,  mvAsicReg_PON_MAC_MIB_CONTROL_2,   mvAsicReg_PON_MAC_MIB_CONTROL_3,
-		mvAsicReg_PON_MAC_MIB_CONTROL_4,  mvAsicReg_PON_MAC_MIB_CONTROL_5,  mvAsicReg_PON_MAC_MIB_CONTROL_6,   mvAsicReg_PON_MAC_MIB_CONTROL_7,
-		mvAsicReg_PON_MAC_MIB_CONTROL_8,  mvAsicReg_PON_MAC_MIB_CONTROL_9,  mvAsicReg_PON_MAC_MIB_CONTROL_10,  mvAsicReg_PON_MAC_MIB_CONTROL_11,
-		mvAsicReg_PON_MAC_MIB_CONTROL_12, mvAsicReg_PON_MAC_MIB_CONTROL_13, mvAsicReg_PON_MAC_MIB_CONTROL_14,  mvAsicReg_PON_MAC_MIB_CONTROL_15,
-		mvAsicReg_PON_MAC_MIB_CONTROL_16, mvAsicReg_PON_MAC_MIB_CONTROL_17, mvAsicReg_PON_MAC_MIB_CONTROL_18,  mvAsicReg_PON_MAC_MIB_CONTROL_19,
-		mvAsicReg_PON_MAC_MIB_CONTROL_20, mvAsicReg_PON_MAC_MIB_CONTROL_21, mvAsicReg_PON_MAC_MIB_CONTROL_22,  mvAsicReg_PON_MAC_MIB_CONTROL_23,
-		mvAsicReg_PON_MAC_MIB_CONTROL_24, mvAsicReg_PON_MAC_MIB_CONTROL_25, mvAsicReg_PON_MAC_MIB_CONTROL_26,  mvAsicReg_PON_MAC_MIB_CONTROL_27,
-		mvAsicReg_PON_MAC_MIB_CONTROL_28, mvAsicReg_PON_MAC_MIB_CONTROL_29, mvAsicReg_PON_MAC_MIB_CONTROL_30,  mvAsicReg_PON_MAC_MIB_CONTROL_31
-	};
-
-	baseControlReg = registersAra[counter_set];
+	MV_U32 ctrlValue;
 
 	if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_DS) {
-		rcode = asicOntMiscRegWrite(baseControlReg, ctrlValue, ONU_MIB_PM_RX_MIB_Control);
-		if (rcode != MV_OK)
-			printk(KERN_INFO "%s: asicOntMiscRegWrite failed for counter_set(%d), direction(%d), Rx-offset(%d)\n",
-				__func__, counter_set, direction, ONU_MIB_PM_RX_MIB_Control);
+		if (ONU_MIB_PM_ENABLE == enable)
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_VALID_BIT, rxIndx, gemPort);
+		else
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
+		rcode = asicOntMiscRegWrite(mvAsicReg_PON_RX_MIB_CONTROL, ctrlValue, rxIndx);
+		if (rcode != MV_OK) {
+			printk(KERN_INFO "%s: asicOntMiscRegWrite failed for gemPort(%d), direction(%d)\n",
+				__func__, gemPort, direction);
+			return MV_FAIL;
+		}
 	}
 
 	if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_US) {
-		rcode = asicOntMiscRegWrite(baseControlReg, ctrlValue, ONU_MIB_PM_TX_MIB_Control);
-		if (rcode != MV_OK)
-			printk(KERN_INFO "%s: asicOntMiscRegWrite failed for counter_set(%d), direction(%d), Tx-offset(%d)\n",
-				__func__, counter_set, direction, ONU_MIB_PM_TX_MIB_Control);
+		if (ONU_MIB_PM_ENABLE == enable)
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_VALID_BIT, txIndx, gemPort);
+		else
+			ctrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
+		rcode = asicOntMiscRegWrite(mvAsicReg_PON_TX_MIB_CONTROL, ctrlValue, txIndx);
+		if (rcode != MV_OK) {
+			printk(KERN_INFO "%s: asicOntMiscRegWrite failed for gemPort(%d), direction(%d)\n",
+				__func__, gemPort, direction);
+			return MV_FAIL;
+		}
 	}
+
 	return rcode;
 }
 
@@ -880,7 +970,8 @@ MV_STATUS onuGponPmGemPortPmSetControl(int counter_set, MV_U32 direction, MV_U32
 **
 **  DESCRIPTION: The function activates MIB Counter PM for a GEM port
 **
-**  PARAMETERS:  S_GponIoctlGemPortPmConfig *
+**  PARAMETERS:  MV_U16 gemPort
+**               MV_U32 direction
 **
 **  OUTPUTS:     None
 **
@@ -893,11 +984,9 @@ MV_STATUS onuGponPmGemPortPmStart(MV_U16 gemPort, MV_U32 direction)
 	int indx;
 	S_apiGemPortPmConfig *apiGemPortPmConfig;
 	S_apiGemPortPmConfig *tgtApiGemPortPmConfig = 0;
-	int freeIndx;
-	MV_U32 mibCtrlValue;
 
 	/* Does the GEM Port already appear in table */
-	for (indx = 0; indx < MAX_SUPPORTED_GEMPORTS_FOR_PM; indx++) {
+	for (indx = 0; indx < MAX_ENTRIES_GEMPORTPM_CONFIG_DB; indx++) {
 		apiGemPortPmConfig = &apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx];
 		if (apiGemPortPmConfig->in_use == MV_TRUE && apiGemPortPmConfig->gem_port == gemPort) {
 			if (apiGemPortPmConfig->direction == direction) {
@@ -908,55 +997,68 @@ MV_STATUS onuGponPmGemPortPmStart(MV_U16 gemPort, MV_U32 direction)
 				printk(KERN_INFO "%s: gemPort(%d) bidi PM already configured\n", __func__, gemPort);
 				return MV_NOT_ALLOWED;
 			} else if (direction == GEMPORTPMDIRECTION_BIDI) {
-				printk(KERN_INFO "%s: gemPort(%d) unidirectional PM already configured\n", __func__, gemPort);
+				printk(KERN_INFO "%s: gemPort(%d) unidirectional PM already configured\n",
+					__func__, gemPort);
 				return MV_NOT_ALLOWED;
 			}
 		}
 	}
 
-	for (indx = 0; indx < MAX_SUPPORTED_GEMPORTS_FOR_PM; indx++) {
+	/* Check whether there is valid MIB */
+	if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_DS) {
+		if (apiGemPortPmConfigDb.rxGemPortPmNum >= MAX_SUPPORTED_GEMPORTS_FOR_PM) {
+			printk(KERN_ERR "%s: RX GEM ports for PM is full(%d)\n",
+				__func__, MAX_SUPPORTED_GEMPORTS_FOR_PM);
+			return MV_NO_RESOURCE;
+		}
+	}
+	if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_US) {
+		if (apiGemPortPmConfigDb.txGemPortPmNum >= MAX_SUPPORTED_GEMPORTS_FOR_PM) {
+			printk(KERN_ERR "%s: TX GEM ports for PM is full(%d)\n",
+				__func__, MAX_SUPPORTED_GEMPORTS_FOR_PM);
+			return MV_NO_RESOURCE;
+		}
+	}
+
+	/* Find a free entry */
+	for (indx = 0; indx < MAX_ENTRIES_GEMPORTPM_CONFIG_DB; indx++) {
 		apiGemPortPmConfig = &apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx];
 		if (apiGemPortPmConfig->in_use == MV_FALSE) {
 			tgtApiGemPortPmConfig = apiGemPortPmConfig;
-			freeIndx              = indx;
 			break;
 		}
 	}
-
-	/* Did we find a free entry */
 	if (tgtApiGemPortPmConfig == 0) {
 		printk(KERN_INFO "%s: GEM Port MIB PM table full. gemPort = %d (start)\n", __func__, gemPort);
-		return MV_NO_MORE;
+		return MV_NO_RESOURCE;
 	}
 
-	if (onuGponPmGemPortPmGetNumUsedEntries() == 0) {
-		rcode = asicOntGlbRegRead(mvAsicReg_PON_MIB_DEFAULT, &apiGemPortPmConfigDb.origRxMibDefaultReg, 0);
-		if (rcode != MV_OK) {
-			printk(KERN_ERR "%s: asicOntGlbRegRead failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-				__func__, mvAsicReg_PON_MIB_DEFAULT);
-			return rcode;
-		}
-		mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
-		rcode = asicOntMiscRegWrite(mvAsicReg_PON_MIB_DEFAULT, mibCtrlValue, 0);
-		if (rcode!= MV_OK) {
-			printk(KERN_ERR "%s: asicOntMiscRegWrite failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-				__func__, mvAsicReg_PON_MIB_DEFAULT);
-			return rcode;
-		}
+	/* Disable default PM */
+	rcode = onuGponPmGemPortPmSetDefault(direction, ONU_MIB_PM_DISABLE);
+	if (rcode != MV_OK) {
+		printk(KERN_ERR "%s: Failed to disable default GEM Port MIB, direction(%d)\n",
+			__func__, direction);
+		return MV_FAIL;
 	}
 
-	/* Now start the GEM Port MIB PM */
-	mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_VALID_BIT, freeIndx, gemPort);
-	rcode = onuGponPmGemPortPmSetControl(freeIndx, direction, mibCtrlValue);
+	/* Start the GEM Port MIB PM */
+	rcode = onuGponPmGemPortPmSetControl(gemPort, direction, apiGemPortPmConfigDb.rxGemPortPmNum,
+			apiGemPortPmConfigDb.txGemPortPmNum, ONU_MIB_PM_ENABLE);
 	if (rcode != MV_OK)
-		printk(KERN_ERR "%s: Failed to start GEM Port MIB PM for gemPort(%d), direction(%d), counter_set(%d)\n",
-		__func__, gemPort, direction, freeIndx);
+		printk(KERN_ERR "%s: Failed to start GEM Port MIB PM for gemPort(%d), direction(%d)\n",
+			__func__, gemPort, direction);
 	else {
 		tgtApiGemPortPmConfig->gem_port    = gemPort;
-		tgtApiGemPortPmConfig->counter_set = freeIndx;
+		tgtApiGemPortPmConfig->rx_cnt_set  = apiGemPortPmConfigDb.rxGemPortPmNum;
+		tgtApiGemPortPmConfig->tx_cnt_set  = apiGemPortPmConfigDb.txGemPortPmNum;
 		tgtApiGemPortPmConfig->direction   = direction;
 		tgtApiGemPortPmConfig->in_use      = MV_TRUE;
+		if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_DS)
+			apiGemPortPmConfigDb.rxGemPortPmNum++;
+		if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_US)
+			apiGemPortPmConfigDb.txGemPortPmNum++;
 	}
+
 	return rcode;
 }
 
@@ -967,7 +1069,8 @@ MV_STATUS onuGponPmGemPortPmStart(MV_U16 gemPort, MV_U32 direction)
 **
 **  DESCRIPTION: The function activates MIB Counter PM for a GEM port
 **
-**  PARAMETERS:  S_GponIoctlGemPortPmConfig *
+**  PARAMETERS:  MV_U16 gemPort
+**               MV_U32 direction
 **
 **  OUTPUTS:     None
 **
@@ -980,10 +1083,9 @@ MV_STATUS  onuGponPmGemPortPmStop(MV_U16 gemPort, MV_U32 direction)
 	int indx;
 	S_apiGemPortPmConfig *apiGemPortPmConfig;
 	S_apiGemPortPmConfig *tgtApiGemPortPmConfig = 0;
-	MV_U32 mibCtrlValue;
 
 	/* Does the GEM Port already appear in table */
-	for (indx = 0; indx < MAX_SUPPORTED_GEMPORTS_FOR_PM; indx++) {
+	for (indx = 0; indx < MAX_ENTRIES_GEMPORTPM_CONFIG_DB; indx++) {
 		apiGemPortPmConfig = &apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx];
 		if (apiGemPortPmConfig->in_use == MV_TRUE && apiGemPortPmConfig->gem_port == gemPort &&
 			apiGemPortPmConfig->direction == direction) {
@@ -998,22 +1100,26 @@ MV_STATUS  onuGponPmGemPortPmStop(MV_U16 gemPort, MV_U32 direction)
 		return MV_NOT_FOUND;
 	}
 
-	mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
-	rcode = onuGponPmGemPortPmSetControl(indx, direction, mibCtrlValue);
+	/* Stop the GEM Port MIB PM */
+	rcode = onuGponPmGemPortPmSetControl(gemPort, direction, tgtApiGemPortPmConfig->rx_cnt_set,
+			tgtApiGemPortPmConfig->tx_cnt_set, ONU_MIB_PM_DISABLE);
 	if (rcode != MV_OK)
-		printk(KERN_ERR "%s: Failed to stop GEM Port MIB PM for gemPort(%d), direction(%d), counter_set(%d)\n",
-			__func__, gemPort, direction, indx);
-	else
+		printk(KERN_ERR "%s: Failed to stop GEM Port MIB PM for gemPort(%d), direction(%d)\n",
+			__func__, gemPort, direction);
+	else {
 		tgtApiGemPortPmConfig->in_use = MV_FALSE;
+		if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_DS)
+			apiGemPortPmConfigDb.rxGemPortPmNum--;
+		if (direction == GEMPORTPMDIRECTION_BIDI || direction == GEMPORTPMDIRECTION_US)
+			apiGemPortPmConfigDb.txGemPortPmNum--;
+	}
 
-	/* If no more GEM ports are being monitored, restore the original RX_MIB_DEFAULT register value */
-	if (onuGponPmGemPortPmGetNumUsedEntries() == 0) {
-		rcode = asicOntMiscRegWrite(mvAsicReg_PON_MIB_DEFAULT, apiGemPortPmConfigDb.origRxMibDefaultReg, 0);
-		if (rcode != MV_OK) {
-			printk(KERN_ERR "%s: asicOntMiscRegWrite failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-				__func__, mvAsicReg_PON_MIB_DEFAULT);
-			return rcode;
-		}
+	/* Enable default PM */
+	rcode = onuGponPmGemPortPmSetDefault(direction, ONU_MIB_PM_ENABLE);
+	if (rcode != MV_OK) {
+		printk(KERN_ERR "%s: Failed to enable default GEM Port MIB, direction(%d)\n",
+			__func__, direction);
+		return MV_FAIL;
 	}
 
 	return rcode;
@@ -1037,26 +1143,32 @@ MV_STATUS onuGponPmGemPortPmReset(void)
 {
 	MV_STATUS rcode;
 	int indx;
-	uint32_t mibCtrlValue = MAKE_MIB_COUNTER_CONTROL(MIB_COUNTER_CONTROL_INVALID_BIT, 0, 0);
+	S_apiGemPortPmConfig *pmCfg = NULL;
 
+	/* Clear HW */
 	for (indx = 0; indx < MAX_ENTRIES_GEMPORTPM_CONFIG_DB; indx++) {
-		/* Clear Gem Ports configured array and HW registers */
-		apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx].in_use = MV_FALSE;
-		rcode = onuGponPmGemPortPmSetControl(indx, GEMPORTPMDIRECTION_BIDI, mibCtrlValue);
-		if (rcode != MV_OK) {
-			printk(KERN_ERR "%s: Failed to stop GEM Port MIB PM for counter_set(%d), bidi\n",
-				__func__, indx);
-			return rcode;
+		pmCfg = &apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx];
+		if (MV_TRUE == pmCfg->in_use) {
+			rcode = onuGponPmGemPortPmSetControl(pmCfg->gem_port, pmCfg->direction,
+				pmCfg->rx_cnt_set, pmCfg->tx_cnt_set, ONU_MIB_PM_DISABLE);
+			if (rcode != MV_OK) {
+				printk(KERN_ERR "%s: Failed to stop GEM Port MIB PM for gemPort(%d), direction(%d)\n",
+					__func__, pmCfg->gem_port, pmCfg->direction);
+				return MV_FAIL;
+			}
 		}
 	}
 
-	rcode = asicOntMiscRegWrite(mvAsicReg_PON_MIB_DEFAULT, apiGemPortPmConfigDb.origRxMibDefaultReg, 0);
-	if (rcode  != MV_OK) {
-		printk(KERN_ERR "%s: asicOntMiscRegWrite failed for mvAsicReg_PON_MIB_DEFAULT(%d)\n",
-			__func__, mvAsicReg_PON_MIB_DEFAULT);
-		return rcode;
+	/* Enable default PM */
+	rcode = onuGponPmGemPortPmSetDefault(GEMPORTPMDIRECTION_BIDI, ONU_MIB_PM_ENABLE);
+	if (rcode != MV_OK) {
+		printk(KERN_ERR "%s: Failed to enable default GEM Port MIB\n", __func__);
+		return MV_FAIL;
 	}
 
+	/* Reset DB */
+	onuGponPmGemPortPmInit();
+
 	return MV_OK;
 }
 
@@ -1078,67 +1190,98 @@ MV_STATUS onuGponPmGemPortPmGet(S_GponIoctlGemPortMibCounters *gemPortMibCounter
 {
 	MV_STATUS rcode = MV_OK;
 	int indx;
+	int counter_set;
 	S_apiGemPortPmConfig *apiGemPortPmConfig;
 	S_apiGemPortPmConfig *tgtApiGemPortPmConfig = 0;
-	MV_U32 baseCounterReg;
-	MV_U32 lowvalue;
-	MV_U32 hivalue;
-	MV_U32 registersAra[] = {
-		mvAsicReg_PON_MAC_MIB_COUNTERS_0,  mvAsicReg_PON_MAC_MIB_COUNTERS_1,  mvAsicReg_PON_MAC_MIB_COUNTERS_2,   mvAsicReg_PON_MAC_MIB_COUNTERS_3,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_4,  mvAsicReg_PON_MAC_MIB_COUNTERS_5,  mvAsicReg_PON_MAC_MIB_COUNTERS_6,   mvAsicReg_PON_MAC_MIB_COUNTERS_7,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_8,  mvAsicReg_PON_MAC_MIB_COUNTERS_9,  mvAsicReg_PON_MAC_MIB_COUNTERS_10,  mvAsicReg_PON_MAC_MIB_COUNTERS_11,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_12, mvAsicReg_PON_MAC_MIB_COUNTERS_13, mvAsicReg_PON_MAC_MIB_COUNTERS_14,  mvAsicReg_PON_MAC_MIB_COUNTERS_15,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_16, mvAsicReg_PON_MAC_MIB_COUNTERS_17, mvAsicReg_PON_MAC_MIB_COUNTERS_18,  mvAsicReg_PON_MAC_MIB_COUNTERS_19,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_20, mvAsicReg_PON_MAC_MIB_COUNTERS_21, mvAsicReg_PON_MAC_MIB_COUNTERS_22,  mvAsicReg_PON_MAC_MIB_COUNTERS_23,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_24, mvAsicReg_PON_MAC_MIB_COUNTERS_25, mvAsicReg_PON_MAC_MIB_COUNTERS_26,  mvAsicReg_PON_MAC_MIB_COUNTERS_27,
-		mvAsicReg_PON_MAC_MIB_COUNTERS_28, mvAsicReg_PON_MAC_MIB_COUNTERS_29, mvAsicReg_PON_MAC_MIB_COUNTERS_30,  mvAsicReg_PON_MAC_MIB_COUNTERS_31
-	};
-
-	for (indx = 0; indx < MAX_SUPPORTED_GEMPORTS_FOR_PM; indx++) {
+	MV_U32 lowValue;
+	MV_U32 highValue;
+
+	for (indx = 0; indx < MAX_ENTRIES_GEMPORTPM_CONFIG_DB; indx++) {
 		apiGemPortPmConfig = &apiGemPortPmConfigDb.apiGemPortPmConfigAra[indx];
 		if (apiGemPortPmConfig->in_use == MV_TRUE &&
 		    apiGemPortPmConfig->gem_port == gemPortMibCounters->gem_port &&
-		    apiGemPortPmConfig->direction == gemPortMibCounters->direction) {
-			baseCounterReg = registersAra[apiGemPortPmConfig->counter_set];
+		    (apiGemPortPmConfig->direction == gemPortMibCounters->direction ||
+		     apiGemPortPmConfig->direction == GEMPORTPMDIRECTION_BIDI)) {
 			tgtApiGemPortPmConfig = apiGemPortPmConfig;
 			break;
 		}
 	}
 
 	if (tgtApiGemPortPmConfig != 0) {
-
-		/* 64 bit counter treatment: read the low part first, to lock the high part */
-		rcode |= asicOntGlbRegRead(baseCounterReg, &lowvalue, ONU_MIB_PM_GoodOctetsReceived_low);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &hivalue,  ONU_MIB_PM_GoodOctetsReceived_high);
-		gemPortMibCounters->good_octets_received = (uint64_t)hivalue << 32 | lowvalue;
-
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->bad_octets_received,       ONU_MIB_PM_BadOctetsReceived);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->mac_trans_error,           ONU_MIB_PM_MACTransError);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->good_frames_received,      ONU_MIB_PM_GoodFramesReceived);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->bad_frames_received,       ONU_MIB_PM_BadFramesReceived);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->broadcast_frames_received, ONU_MIB_PM_BroadcastFramesReceived);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->multicast_frames_received, ONU_MIB_PM_MulticastFramesReceived);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->frames_64_octets,          ONU_MIB_PM_Frames64Octets);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->frames_65_to_127_octets,   ONU_MIB_PM_Frames65to127Octets);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->frames_128_to_255octets,   ONU_MIB_PM_Frames128to255Octets);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->frames_256_to_511_octets,  ONU_MIB_PM_Frames256to511Octets);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->frames_512_to_1023_octets, ONU_MIB_PM_Frames512to1023Octets);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->frames_1024_to_max_octets, ONU_MIB_PM_Frames1024toMaxOctets);
-
-		/* 64 bit counter treatment: read the low part first, to lock the high part */
-		rcode |= asicOntGlbRegRead(baseCounterReg, &lowvalue, ONU_MIB_PM_GoodOctetsSent_low);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &hivalue,  ONU_MIB_PM_GoodOctetsSent_high);
-		gemPortMibCounters->good_octets_sent = (uint64_t)hivalue << 32 | lowvalue;
-
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->good_frames_sent, ONU_MIB_PM_GoodFramesSent);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->multicast_frames_sent, ONU_MIB_PM_MulticastFramesSent);
-		rcode |= asicOntGlbRegRead(baseCounterReg, &gemPortMibCounters->broadcast_frames_sent, ONU_MIB_PM_BroadcastFramesSent);
-
-		if (rcode != MV_OK) {
-			printk(KERN_ERR "%s: asicOntGlbRegRead failure, rcode(%d), baseCounterReg(%d)\n",
-				__func__, rcode, baseCounterReg);
-			return MV_ERROR;
+		if (GEMPORTPMDIRECTION_DS == gemPortMibCounters->direction) {
+			counter_set = tgtApiGemPortPmConfig->rx_cnt_set;
+
+			/* 64 bit counter treatment: read the low part first, to lock the high part */
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_GOOD_OCT_LS, &lowValue, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_GOOD_OCT_MS, &highValue, counter_set);
+			gemPortMibCounters->good_octets = (uint64_t)highValue << 32 | lowValue;
+
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_GOOD_FRAME,
+					&gemPortMibCounters->good_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_BAD_OCTECT,
+					&gemPortMibCounters->bad_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_BAD_FRAME,
+					&gemPortMibCounters->bad_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_MULTICAST,
+					&gemPortMibCounters->multicast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_BROADCAST,
+					&gemPortMibCounters->broadcast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_64_OCT,
+					&gemPortMibCounters->frames_min_to_64_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_65_127_OCT,
+					&gemPortMibCounters->frames_65_to_127_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_128_255_OCT,
+					&gemPortMibCounters->frames_128_to_255_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_256_511_OCT,
+					&gemPortMibCounters->frames_256_to_511_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_512_1023_OCT,
+					&gemPortMibCounters->frames_512_to_1023_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_RX_1024_OCT,
+					&gemPortMibCounters->frames_1024_to_max_octets, counter_set);
+
+			if (rcode != MV_OK) {
+				printk(KERN_ERR "%s: asicOntMiscRegRead failure, rcode(%d), dir(%d) counter_set(%d)\n",
+					__func__, rcode, GEMPORTPMDIRECTION_DS, counter_set);
+				return MV_ERROR;
+			}
+		} else  if (GEMPORTPMDIRECTION_US == gemPortMibCounters->direction) {
+			counter_set = tgtApiGemPortPmConfig->tx_cnt_set;
+
+			/* 64 bit counter treatment: read the low part first, to lock the high part */
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_GOOD_OCT_LS, &lowValue, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_GOOD_OCT_MS, &highValue, counter_set);
+			gemPortMibCounters->good_octets = (uint64_t)highValue << 32 | lowValue;
+
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_GOOD_FRAME,
+					&gemPortMibCounters->good_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_BAD_OCTECT,
+					&gemPortMibCounters->bad_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_MAC_ERROR,
+					&gemPortMibCounters->bad_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_MULTICAST,
+					&gemPortMibCounters->multicast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_BROADCAST,
+					&gemPortMibCounters->broadcast_frames, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_64_OCT,
+					&gemPortMibCounters->frames_min_to_64_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_65_127_OCT,
+					&gemPortMibCounters->frames_65_to_127_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_128_255_OCT,
+					&gemPortMibCounters->frames_128_to_255_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_256_511_OCT,
+					&gemPortMibCounters->frames_256_to_511_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_512_1023_OCT,
+					&gemPortMibCounters->frames_512_to_1023_octets, counter_set);
+			rcode |= asicOntMiscRegRead(mvAsicReg_PON_MIB_TX_1024_OCT,
+					&gemPortMibCounters->frames_1024_to_max_octets, counter_set);
+
+			if (rcode != MV_OK) {
+				printk(KERN_ERR "%s: asicOntMiscRegRead failure, rcode(%d), dir(%d) counter_set(%d)\n",
+					__func__, rcode, GEMPORTPMDIRECTION_US, counter_set);
+				return MV_ERROR;
+			}
 		}
+
 	} else {
 		printk(KERN_ERR "%s: gemPort(%d), direction(%d) not configured\n",
 			__func__, gemPortMibCounters->gem_port, gemPortMibCounters->direction);
@@ -1162,11 +1305,11 @@ MV_STATUS onuGponPmGemPortPmGet(S_GponIoctlGemPortMibCounters *gemPortMibCounter
 **  RETURNS:     MV_OK or error
 **
 *******************************************************************************/
-MV_STATUS onuGponPmGemPortPmConfigGet(MV_U16 dbIdx, S_apiGemPortPmConfig *gemPortPmConfig)
+MV_STATUS onuGponPmGemPortPmConfigGet(MV_U32 dbIdx, S_apiGemPortPmConfig *gemPortPmConfig)
 {
 	memset(gemPortPmConfig, 0, sizeof(S_apiGemPortPmConfig));
 
-	if (dbIdx >= MAX_SUPPORTED_GEMPORTS_FOR_PM) {
+	if (dbIdx >= MAX_ENTRIES_GEMPORTPM_CONFIG_DB) {
 		printk(KERN_ERR "%s: Invalid index = %d\n", __func__, dbIdx);
 		return MV_OUT_OF_RANGE;
 	}
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.h
index f6cf0a3..678c136 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/core/gpon/gponOnuPm.h
@@ -217,15 +217,19 @@ typedef struct {
 typedef struct {
 	MV_BOOL in_use;
 	MV_U16 gem_port;
-	MV_U32 counter_set;
+	MV_U32 rx_cnt_set;
+	MV_U32 tx_cnt_set;
 	MV_U32 direction;
 } S_apiGemPortPmConfig;
 
-#define MAX_SUPPORTED_GEMPORTS_FOR_PM           32
-#define MAX_ENTRIES_GEMPORTPM_CONFIG_DB         (MAX_SUPPORTED_GEMPORTS_FOR_PM)
+#define MAX_SUPPORTED_GEMPORTS_FOR_PM           16
+#define MAX_ENTRIES_GEMPORTPM_CONFIG_DB         (2 * MAX_SUPPORTED_GEMPORTS_FOR_PM)
 typedef struct {
+	MV_U32 rxGemPortPmNum;
+	MV_U32 txGemPortPmNum;
 	S_apiGemPortPmConfig apiGemPortPmConfigAra[MAX_ENTRIES_GEMPORTPM_CONFIG_DB];
 	MV_U32 origRxMibDefaultReg;
+	MV_U32 origTxMibDefaultReg;
 } S_apiGemPortPmConfigDb;
 
 /* Global variables
@@ -266,7 +270,7 @@ MV_STATUS onuGponPmGemPortPmStop(MV_U16 gemPort, MV_U32 direction);
 MV_STATUS onuGponPmGemPortPmGet(S_GponIoctlGemPortMibCounters *gemPortMibCounters);
 MV_STATUS onuGponPmGemPortPmReset(void);
 void      onuGponPmGemPortPmInit(void);
-MV_STATUS onuGponPmGemPortPmConfigGet(MV_U16 dbIdx, S_apiGemPortPmConfig *gemPortPmConfig);
+MV_STATUS onuGponPmGemPortPmConfigGet(MV_U32 dbIdx, S_apiGemPortPmConfig *gemPortPmConfig);
 
 /* Macros
    ------------------------------------------------------------------------------*/
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsMI.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsMI.h
index 327ec0d..d9d1d72 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsMI.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsMI.h
@@ -371,24 +371,19 @@ typedef struct {
 typedef struct {
 	MV_U16 llid;
 	E_EponIoctlLlidPmDirection direction;
-	MV_U64 good_octets_received;
-	MV_U32 bad_octets_received;
-	MV_U32 mac_trans_error;
-	MV_U32 good_frames_received;
-	MV_U32 bad_frames_received;
-	MV_U32 broadcast_frames_received;
-	MV_U32 multicast_frames_received;
-	MV_U32 frames_64_octets;
+
+	MV_U64 good_octets;
+	MV_U32 good_frames;
+	MV_U32 bad_octets;
+	MV_U32 bad_frames;
+	MV_U32 multicast_frames;
+	MV_U32 broadcast_frames;
+	MV_U32 frames_min_to_64_octets;
 	MV_U32 frames_65_to_127_octets;
-	MV_U32 frames_128_to_255octets;
+	MV_U32 frames_128_to_255_octets;
 	MV_U32 frames_256_to_511_octets;
 	MV_U32 frames_512_to_1023_octets;
 	MV_U32 frames_1024_to_max_octets;
-	MV_U64 good_octets_sent;
-	MV_U32 good_frames_sent;
-	MV_U32 multicast_frames_sent;
-	MV_U32 broadcast_frames_sent;
-	MV_U32 bad_crc_received;
 } S_EponIoctlLlidMibCounters;
 
 /* LODI authentication */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c
index 4bc483e..84ca9cd 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/epon/eponOnuLnxKsUI.c
@@ -2122,13 +2122,13 @@ int onuEponUiLlidMibPmDbShow(char *buf)
 	MV_U16 dbIdx;
 	int displayIndx = 0;
 	MV_STATUS rc;
-	char                *pdirnstr;
+	char *pdirnstr;
 
-	off += mvOsSPrintf(buf + off, "LLID MIB PM \n");
-	off += mvOsSPrintf(buf + off, "=============================\n");
-	off += mvOsSPrintf(buf + off, " #   Counter  LLID  direction\n");
-	off += mvOsSPrintf(buf + off, "     set      \n");
-	off += mvOsSPrintf(buf + off, "=============================\n");
+	off += mvOsSPrintf(buf + off, "LLID MIB PM\n");
+	off += mvOsSPrintf(buf + off, "============================================\n");
+	off += mvOsSPrintf(buf + off, " #   RX Counter  TX Counter  LLID  direction\n");
+	off += mvOsSPrintf(buf + off, "     set         set\n");
+	off += mvOsSPrintf(buf + off, "============================================\n");
 
 	for (dbIdx = 0; dbIdx < MAX_SUPPORTED_LLIDS_FOR_PM; dbIdx++) {
 		rc = onuEponPmLlidPmConfigGet(dbIdx, &llidCfg);
@@ -2143,12 +2143,13 @@ int onuEponUiLlidMibPmDbShow(char *buf)
 			else
 				pdirnstr = "unkn";
 			displayIndx++;
-			off += mvOsSPrintf(buf + off, "%2d   %-2d       %-4d  %s(%d)\n",
-				displayIndx, llidCfg.counter_set, llidCfg.llid, pdirnstr, llidCfg.direction);
+			off += mvOsSPrintf(buf + off, "%2d   %-2d          %-2d          %-4d  %s(%d)\n",
+				displayIndx, llidCfg.rx_cnt_set, llidCfg.tx_cnt_set,
+				llidCfg.llid, pdirnstr, llidCfg.direction);
 		}
 	}
 
-	off += mvOsSPrintf(buf + off, "=============================\n");
+	off += mvOsSPrintf(buf + off, "============================================\n");
 	return off;
 }
 
@@ -2169,72 +2170,103 @@ int onuEponUiLlidMibPmDbShow(char *buf)
 *******************************************************************************/
 void onuEponUiLlidPmGet(MV_U32 llid, MV_U32 direction)
 {
-	S_EponIoctlLlidMibCounters mibCounters;
-	MV_STATUS rcode;
+	S_EponIoctlLlidMibCounters rxMibCounters;
+	S_EponIoctlLlidMibCounters txMibCounters;
+
+	MV_STATUS rcode = MV_OK;
 
 	MV_U8 *rxCounterText[] = {
-		"Good frames      received   ",
-		"Multicast frames received   ",
-		"Broadcast frames received   ",
-		"Good octets      received   ",
-		"Bad frames       received   "
+		"Good octets      received           ",
+		"Good frames      received           ",
+		"Bad octets       received           ",
+		"Bad frames       received           ",
+		"Multicast frames received           ",
+		"Broadcast frames received           "
 	};
 
 	MV_U8 *txCounterText[] = {
-		"Good frames      transmitted",
-		"Multicast frames transmitted",
-		"Broadcast frames transmitted",
-		"Good octets      transmitted",
-		"MAC transmission errors     "
+		"Good octets      transmitted        ",
+		"Good frames      transmitted        ",
+		"Good octets      transmitted        ",
+		"MAC transmission errors             ",
+		"Multicast frames transmitted        ",
+		"Broadcast frames transmitted        "
+	};
+
+	MV_U8 * rxSizeCounterText[] = {
+		"Frames 64         octets received   ",
+		"Frames 65  - 127  octets received   ",
+		"Frames 128 - 255  octets received   ",
+		"Frames 256 - 511  octets received   ",
+		"Frames 512 - 1023 octets received   ",
+		"Frames 1024- max  octets received   "
 	};
 
-	MV_U8 *sizeCounterText[] = {
-		"Frames 64         octets    ",
-		"Frames 65  - 127  octets    ",
-		"Frames 128 - 255  octets    ",
-		"Frames 256 - 511  octets    ",
-		"Frames 512 - 1023 octets    ",
-		"Frames 1024- max  octets    "
+	MV_U8 * txSizeCounterText[] = {
+		"Frames 64         octets transmitted",
+		"Frames 65  - 127  octets transmitted",
+		"Frames 128 - 255  octets transmitted",
+		"Frames 256 - 511  octets transmitted",
+		"Frames 512 - 1023 octets transmitted",
+		"Frames 1024- max  octets transmitted"
 	};
 
-	memset(&mibCounters, 0, sizeof(S_EponIoctlLlidMibCounters));
+	memset(&rxMibCounters, 0, sizeof(S_EponIoctlLlidMibCounters));
+	memset(&txMibCounters, 0, sizeof(S_EponIoctlLlidMibCounters));
+
+	if (direction == LLIDPMDIRECTION_DS || direction == LLIDPMDIRECTION_BIDI) {
+		rxMibCounters.llid  = llid;
+		rxMibCounters.direction = LLIDPMDIRECTION_DS;
+		rcode = onuEponApiLlidPmGet(&rxMibCounters);
+	}
+	if (direction == LLIDPMDIRECTION_US || direction == LLIDPMDIRECTION_BIDI) {
+		txMibCounters.llid  = llid;
+		txMibCounters.direction = LLIDPMDIRECTION_US;
+		rcode = onuEponApiLlidPmGet(&txMibCounters);
+	}
 
-	mibCounters.llid      = llid;
-	mibCounters.direction = direction;
-	rcode = onuEponApiLlidPmGet(&mibCounters);
 	if (rcode == MV_OK) {
 		mvOsPrintf("\n");
 		mvOsPrintf("------------------------------------------------------------------\n");
 		mvOsPrintf("|MIB COUNTERS for LLID:  %d, %s\n", llid,
-			   (direction == LLIDPMDIRECTION_DS) ? "downstream" : (direction == LLIDPMDIRECTION_US) ? "upstream" : "bidirectional");
-		mvOsPrintf("------------------------------------------------\n");
-		mvOsPrintf("|COUNTER                         |  VALUE      |\n");
-		mvOsPrintf("------------------------------------------------\n");
+			   (direction == LLIDPMDIRECTION_DS) ? "downstream" : (direction == LLIDPMDIRECTION_US) ?
+			   "upstream" : "bidirectional");
+		mvOsPrintf("-------------------------------------------------------\n");
+		mvOsPrintf("|COUNTER                                |  VALUE      |\n");
+		mvOsPrintf("-------------------------------------------------------\n");
 		if (direction == LLIDPMDIRECTION_DS || direction == LLIDPMDIRECTION_BIDI) {
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[0], mibCounters.good_frames_received);
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[1], mibCounters.multicast_frames_received);
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[2], mibCounters.broadcast_frames_received);
-			mvOsPrintf(" %s   | %10llu  |\n", rxCounterText[3], mibCounters.good_octets_received);
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[4], mibCounters.bad_frames_received);
+			mvOsPrintf(" %s   | %10llu  |\n", rxCounterText[0], rxMibCounters.good_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[1], rxMibCounters.good_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[2], rxMibCounters.bad_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[3], rxMibCounters.bad_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[4], rxMibCounters.multicast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[5], rxMibCounters.broadcast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[0], rxMibCounters.frames_min_to_64_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[1], rxMibCounters.frames_65_to_127_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[2], rxMibCounters.frames_128_to_255_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[3], rxMibCounters.frames_256_to_511_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[4], rxMibCounters.frames_512_to_1023_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[5], rxMibCounters.frames_1024_to_max_octets);
 		}
 		if (direction == LLIDPMDIRECTION_US || direction == LLIDPMDIRECTION_BIDI) {
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[0], mibCounters.good_frames_sent);
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[1], mibCounters.multicast_frames_sent);
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[2], mibCounters.broadcast_frames_sent);
-			mvOsPrintf(" %s   | %10llu  |\n", txCounterText[3], mibCounters.good_octets_sent);
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[4], mibCounters.mac_trans_error);
+			mvOsPrintf(" %s   | %10llu  |\n", txCounterText[0], txMibCounters.good_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[1], txMibCounters.good_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[2], txMibCounters.bad_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[3], txMibCounters.bad_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[4], txMibCounters.multicast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[5], txMibCounters.broadcast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[0], txMibCounters.frames_min_to_64_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[1], txMibCounters.frames_65_to_127_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[2], txMibCounters.frames_128_to_255_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[3], txMibCounters.frames_256_to_511_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[4], txMibCounters.frames_512_to_1023_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[5], txMibCounters.frames_1024_to_max_octets);
 		}
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[0], mibCounters.frames_64_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[1], mibCounters.frames_65_to_127_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[2], mibCounters.frames_128_to_255octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[3], mibCounters.frames_256_to_511_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[4], mibCounters.frames_512_to_1023_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[5], mibCounters.frames_1024_to_max_octets);
 
 		mvOsPrintf("------------------------------------------------------------------\n");
 	} else
 		mvPonPrint(PON_PRINT_INFO, PON_CLI_MODULE,
-			   "%s:%d, failed to get mibCounters value, portId(%d) direction(%d), rcode(%d)\n",
+			   "%s:%d, failed to get mibCounters value, llid(%d) direction(%d), rcode(%d)\n",
 			   __FILE_DESC__, __LINE__, llid, direction, rcode);
 }
 
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsMI.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsMI.h
index 78343ef..1108e35 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsMI.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsMI.h
@@ -280,24 +280,18 @@ typedef struct {
 	MV_U16 gem_port;
 	E_GponIoctlGemPortPmDirection direction;
 
-	MV_U64 good_octets_received;
-	MV_U32 bad_octets_received;
-	MV_U32 mac_trans_error;
-	MV_U32 good_frames_received;
-	MV_U32 bad_frames_received;
-	MV_U32 broadcast_frames_received;
-	MV_U32 multicast_frames_received;
-	MV_U32 frames_64_octets;
+	MV_U64 good_octets;
+	MV_U32 good_frames;
+	MV_U32 bad_octets;
+	MV_U32 bad_frames;
+	MV_U32 multicast_frames;
+	MV_U32 broadcast_frames;
+	MV_U32 frames_min_to_64_octets;
 	MV_U32 frames_65_to_127_octets;
-	MV_U32 frames_128_to_255octets;
+	MV_U32 frames_128_to_255_octets;
 	MV_U32 frames_256_to_511_octets;
 	MV_U32 frames_512_to_1023_octets;
 	MV_U32 frames_1024_to_max_octets;
-	MV_U64 good_octets_sent;
-	MV_U32 good_frames_sent;
-	MV_U32 multicast_frames_sent;
-	MV_U32 broadcast_frames_sent;
-	MV_U32 bad_crc_received;
 } S_GponIoctlGemPortMibCounters;
 
 typedef struct {
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c
index 7656221..ea227ca 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_pon/perf/gpon/gponOnuLnxKsUI.c
@@ -1317,13 +1317,13 @@ int onuGponUiDebugGemPortMibPmDbShow(char *buf)
 	MV_U16 dbIdx;
 	int displayIndx = 0;
 	MV_STATUS rc;
-	char                    *pdirnstr;
+	char *pdirnstr;
 
-	off += mvOsSPrintf(buf + off, "GEM Port MIB PM \n");
-	off += mvOsSPrintf(buf + off, "=============================\n");
-	off += mvOsSPrintf(buf + off, " #   Counter  GEM   direction\n");
-	off += mvOsSPrintf(buf + off, "     set      port\n");
-	off += mvOsSPrintf(buf + off, "=============================\n");
+	off += mvOsSPrintf(buf + off, "GEM Port MIB PM\n");
+	off += mvOsSPrintf(buf + off, "============================================\n");
+	off += mvOsSPrintf(buf + off, " #   RX Counter  TX Counter  GEM   direction\n");
+	off += mvOsSPrintf(buf + off, "     set         set         port\n");
+	off += mvOsSPrintf(buf + off, "============================================\n");
 
 	for (dbIdx = 0; dbIdx < MAX_SUPPORTED_GEMPORTS_FOR_PM; dbIdx++) {
 		rc = onuGponPmGemPortPmConfigGet(dbIdx, &gemPortCfg);
@@ -1338,11 +1338,13 @@ int onuGponUiDebugGemPortMibPmDbShow(char *buf)
 			else
 				pdirnstr = "unkn";
 			displayIndx++;
-			off += mvOsSPrintf(buf + off, "%2d   %-2d       %-4d  %s(%d)\n", displayIndx, gemPortCfg.counter_set, gemPortCfg.gem_port, pdirnstr, gemPortCfg.direction);
+			off += mvOsSPrintf(buf + off, "%2d   %-2d          %-2d          %-4d  %s(%d)\n",
+				displayIndx, gemPortCfg.rx_cnt_set, gemPortCfg.tx_cnt_set,
+				gemPortCfg.gem_port, pdirnstr, gemPortCfg.direction);
 		}
 	}
 
-	off += mvOsSPrintf(buf + off, "=============================\n");
+	off += mvOsSPrintf(buf + off, "============================================\n");
 	return off;
 }
 
@@ -1405,67 +1407,98 @@ int onuGponUiDebugHighPriTxShow(char *buf)
 *******************************************************************************/
 void onuGponUiDebugGemPmGet(MV_U32 portId, MV_U32 direction)
 {
-	S_GponIoctlGemPortMibCounters mibCounters;
+	S_GponIoctlGemPortMibCounters rxMibCounters;
+	S_GponIoctlGemPortMibCounters txMibCounters;
+
 	MV_STATUS rcode = MV_OK;
 
 	MV_U8 *rxCounterText[] = {
-		"Good frames      received   ",
-		"Multicast frames received   ",
-		"Broadcast frames received   ",
-		"Good octets      received   ",
-		"Bad frames       received   "
+		"Good octets      received           ",
+		"Good frames      received           ",
+		"Bad octets       received           ",
+		"Bad frames       received           ",
+		"Multicast frames received           ",
+		"Broadcast frames received           "
 	};
 
 	MV_U8 *txCounterText[] = {
-		"Good frames      transmitted",
-		"Multicast frames transmitted",
-		"Broadcast frames transmitted",
-		"Good octets      transmitted",
-		"MAC transmission errors     "
+		"Good octets      transmitted        ",
+		"Good frames      transmitted        ",
+		"Good octets      transmitted        ",
+		"MAC transmission errors             ",
+		"Multicast frames transmitted        ",
+		"Broadcast frames transmitted        "
+	};
+
+	MV_U8 * rxSizeCounterText[] = {
+		"Frames 64         octets received   ",
+		"Frames 65  - 127  octets received   ",
+		"Frames 128 - 255  octets received   ",
+		"Frames 256 - 511  octets received   ",
+		"Frames 512 - 1023 octets received   ",
+		"Frames 1024- max  octets received   "
 	};
 
-	MV_U8 *sizeCounterText[] = {
-		"Frames 64         octets    ",
-		"Frames 65  - 127  octets    ",
-		"Frames 128 - 255  octets    ",
-		"Frames 256 - 511  octets    ",
-		"Frames 512 - 1023 octets    ",
-		"Frames 1024- max  octets    "
+	MV_U8 * txSizeCounterText[] = {
+		"Frames 64         octets transmitted",
+		"Frames 65  - 127  octets transmitted",
+		"Frames 128 - 255  octets transmitted",
+		"Frames 256 - 511  octets transmitted",
+		"Frames 512 - 1023 octets transmitted",
+		"Frames 1024- max  octets transmitted"
 	};
 
-	memset(&mibCounters, 0, sizeof(S_GponIoctlGemPortMibCounters));
+	memset(&rxMibCounters, 0, sizeof(S_GponIoctlGemPortMibCounters));
+	memset(&txMibCounters, 0, sizeof(S_GponIoctlGemPortMibCounters));
+
+	if (direction == GEMPORTPMDIRECTION_DS || direction == GEMPORTPMDIRECTION_BIDI) {
+		rxMibCounters.gem_port  = portId;
+		rxMibCounters.direction = GEMPORTPMDIRECTION_DS;
+		rcode = onuGponApiGemPortPmGet(&rxMibCounters);
+	}
+	if (direction == GEMPORTPMDIRECTION_US || direction == GEMPORTPMDIRECTION_BIDI) {
+		txMibCounters.gem_port  = portId;
+		txMibCounters.direction = GEMPORTPMDIRECTION_US;
+		rcode = onuGponApiGemPortPmGet(&txMibCounters);
+	}
 
-	mibCounters.gem_port  = portId;
-	mibCounters.direction = direction;
-	rcode = onuGponApiGemPortPmGet(&mibCounters);
 	if (rcode == MV_OK) {
 		mvOsPrintf("\n");
 		mvOsPrintf("------------------------------------------------------------------\n");
 		mvOsPrintf("|MIB COUNTERS for GEM port:  %d, %s\n", portId,
-			   (direction == GEMPORTPMDIRECTION_DS) ? "downstream" : (direction == GEMPORTPMDIRECTION_US) ? "upstream" : "bidirectional");
-		mvOsPrintf("------------------------------------------------\n");
-		mvOsPrintf("|COUNTER                         |  VALUE      |\n");
-		mvOsPrintf("------------------------------------------------\n");
+			   (direction == GEMPORTPMDIRECTION_DS) ? "downstream" : (direction == GEMPORTPMDIRECTION_US) ?
+			   "upstream" : "bidirectional");
+		mvOsPrintf("-------------------------------------------------------\n");
+		mvOsPrintf("|COUNTER                                |  VALUE      |\n");
+		mvOsPrintf("-------------------------------------------------------\n");
 		if (direction == GEMPORTPMDIRECTION_DS || direction == GEMPORTPMDIRECTION_BIDI) {
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[0], mibCounters.good_frames_received);
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[1], mibCounters.multicast_frames_received);
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[2], mibCounters.broadcast_frames_received);
-			mvOsPrintf(" %s   | %10llu  |\n", rxCounterText[3], mibCounters.good_octets_received);
-			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[4], mibCounters.bad_frames_received);
+			mvOsPrintf(" %s   | %10llu  |\n", rxCounterText[0], rxMibCounters.good_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[1], rxMibCounters.good_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[2], rxMibCounters.bad_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[3], rxMibCounters.bad_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[4], rxMibCounters.multicast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxCounterText[5], rxMibCounters.broadcast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[0], rxMibCounters.frames_min_to_64_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[1], rxMibCounters.frames_65_to_127_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[2], rxMibCounters.frames_128_to_255_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[3], rxMibCounters.frames_256_to_511_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[4], rxMibCounters.frames_512_to_1023_octets);
+			mvOsPrintf(" %s   | %10u  |\n", rxSizeCounterText[5], rxMibCounters.frames_1024_to_max_octets);
 		}
 		if (direction == GEMPORTPMDIRECTION_US || direction == GEMPORTPMDIRECTION_BIDI) {
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[0], mibCounters.good_frames_sent);
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[1], mibCounters.multicast_frames_sent);
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[2], mibCounters.broadcast_frames_sent);
-			mvOsPrintf(" %s   | %10llu  |\n", txCounterText[3], mibCounters.good_octets_sent);
-			mvOsPrintf(" %s   | %10u  |\n", txCounterText[4], mibCounters.mac_trans_error);
+			mvOsPrintf(" %s   | %10llu  |\n", txCounterText[0], txMibCounters.good_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[1], txMibCounters.good_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[2], txMibCounters.bad_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[3], txMibCounters.bad_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[4], txMibCounters.multicast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txCounterText[5], txMibCounters.broadcast_frames);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[0], txMibCounters.frames_min_to_64_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[1], txMibCounters.frames_65_to_127_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[2], txMibCounters.frames_128_to_255_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[3], txMibCounters.frames_256_to_511_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[4], txMibCounters.frames_512_to_1023_octets);
+			mvOsPrintf(" %s   | %10u  |\n", txSizeCounterText[5], txMibCounters.frames_1024_to_max_octets);
 		}
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[0], mibCounters.frames_64_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[1], mibCounters.frames_65_to_127_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[2], mibCounters.frames_128_to_255octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[3], mibCounters.frames_256_to_511_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[4], mibCounters.frames_512_to_1023_octets);
-		mvOsPrintf(" %s   | %10u  |\n", sizeCounterText[5], mibCounters.frames_1024_to_max_octets);
 
 		mvOsPrintf("------------------------------------------------------------------\n");
 	} else
@@ -4843,4 +4876,4 @@ MV_STATUS onuGponUsrInterfaceRelease(void)
 	gpon_sysfs_delete();
 
 	return MV_OK;
-}
\ No newline at end of file
+}
diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h
index 8f207e2..f7f7858 100755
--- a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuDefines.h
@@ -353,36 +353,17 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 /* MIB Counters - the follow are element numbers in array
  *******************************************************************************/
-#define ONU_MIB_PM_GoodOctetsReceived_low           0           // (0x0)
-#define ONU_MIB_PM_GoodOctetsReceived_high          1           // (0x4)
-#define ONU_MIB_PM_BadOctetsReceived                2           // (0x8)
-#define ONU_MIB_PM_MACTransError                    3           // (0xC)
-#define ONU_MIB_PM_GoodFramesReceived               4           // (0x10)
-#define ONU_MIB_PM_BadFramesReceived                5           // (0x14)
-#define ONU_MIB_PM_BroadcastFramesReceived          6           // (0x18)
-#define ONU_MIB_PM_MulticastFramesReceived          7           // (0x1C)
-#define ONU_MIB_PM_Frames64Octets                   8           // (0x20)
-#define ONU_MIB_PM_Frames65to127Octets              9           // (0x24)
-#define ONU_MIB_PM_Frames128to255Octets             10          // (0x28)
-#define ONU_MIB_PM_Frames256to511Octets             11          // (0x2C)
-#define ONU_MIB_PM_Frames512to1023Octets            12          // (0x30)
-#define ONU_MIB_PM_Frames1024toMaxOctets            13          // (0x34)
-#define ONU_MIB_PM_GoodOctetsSent_low               14          // (0x38)
-#define ONU_MIB_PM_GoodOctetsSent_high              15          // (0x3C)
-#define ONU_MIB_PM_GoodFramesSent                   16          // (0x40)
-#define ONU_MIB_PM_MulticastFramesSent              18          // (0x48)
-#define ONU_MIB_PM_BroadcastFramesSent              19          // (0x4C)
-
-/* MIB Counters - the follow are element numbers in array
- *******************************************************************************/
-#define ONU_MIB_PM_RX_MIB_Control                   0           // (0x0)
-#define ONU_MIB_PM_TX_MIB_Control                   1           // (0x4)
+#define ONU_MIB_PM_RX_MIB_Control                   0           /* (0x0) */
+#define ONU_MIB_PM_TX_MIB_Control                   1           /* (0x4) */
+#define ONU_MIB_PM_DISABLE                          0           /* disable PM */
+#define ONU_MIB_PM_ENABLE                           1           /* enable PM */
 
 /* MIB Counter Control - valid,counterset,gemport
  *******************************************************************************/
 #define MIB_COUNTER_CONTROL_VALID_BIT           (1)
 #define MIB_COUNTER_CONTROL_INVALID_BIT         (0)
-#define MAKE_MIB_COUNTER_CONTROL(v, c, g)         ((((v) & 0x1) << 17) | (((c) & 0x1F) << 12) | ((g) & 0xFFF))
+#define MAKE_MIB_COUNTER_CONTROL(v, c, g)       ((((v) & 0x1) << 16) | (((c) & 0xF)  << 12) | ((g) & 0xFFF))
+#define MAKE_MIB_COUNTER_DEFAULT(v, c)          ((((v) & 0x1) << 4) | ((c) & 0xF))
 
 /* Enums
    ------------------------------------------------------------------------------*/
diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c
index 995b494..115a8c5 100755
--- a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.c
@@ -320,79 +320,41 @@ S_asicGlobalRegDb asicGlbDb[] =
 	/* =========================== */
 	/*  GEM Port MIB Counters      */
 	/* =========================== */
-#ifdef PON_A0
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_START]            =  {mvAsicReg_PON_MAC_MIB_COUNTERS_START,           0xCB000,                         0xCB000,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #0"},
+	[mvAsicReg_PON_RX_MIB_CONTROL]                    =  {mvAsicReg_PON_RX_MIB_CONTROL,                   0xCB800,                         0xCB800,  asicRW,     0x0001FFFF,     0,      16,     1,      0,     "PON MAC MIB RX control"},
+	[mvAsicReg_PON_TX_MIB_CONTROL]                    =  {mvAsicReg_PON_TX_MIB_CONTROL,                   0xCB840,                         0xCB840,  asicRW,     0x0001FFFF,     0,      16,     1,      0,     "PON MAC MIB TX control"},
+	[mvAsicReg_PON_RX_MIB_DEFAULT]                    =  {mvAsicReg_PON_RX_MIB_DEFAULT,                   0xCB880,                         0xCB880,  asicRW,     0x0000001F,    12,      0,      0,      0,     "PON MAC MIB RX default"},
+	[mvAsicReg_PON_TX_MIB_DEFAULT]                    =  {mvAsicReg_PON_TX_MIB_DEFAULT,                   0xCB884,                         0xCB884,  asicRW,     0x0000001F,    12,      0,      0,      0,     "PON MAC MIB TX default"},
+	[mvAsicReg_PON_MIB_MIN_MAX_LENGTH]                =  {mvAsicReg_PON_MIB_MIN_MAX_LENGTH,               0xCB888,                         0xCB888,  asicRW,     0x001FFFFF,     0,      0,      0,      0,     "PON MAC MIB MIN MAX length"},
+	[mvAsicReg_PON_MIB_CONFIG]                        =  {mvAsicReg_PON_MIB_CONFIG,                       0xCB88C,                         0xCB88C,  asicRW,     0x00000001,     0,      0,      0,      0,     "PON MAC MIB configuration"},
+
+	[mvAsicReg_PON_MIB_RX_GOOD_OCT_LS]                =  {mvAsicReg_PON_MIB_RX_GOOD_OCT_LS,               0xCB000,                         0xCB000,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX good octects LSN"},
+	[mvAsicReg_PON_MIB_RX_GOOD_OCT_MS]                =  {mvAsicReg_PON_MIB_RX_GOOD_OCT_MS,               0xCB040,                         0xCB040,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX good octects MSN"},
+	[mvAsicReg_PON_MIB_RX_GOOD_FRAME]                 =  {mvAsicReg_PON_MIB_RX_GOOD_FRAME,                0xCB080,                         0xCB080,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX good frame"},
+	[mvAsicReg_PON_MIB_RX_BAD_OCTECT]                 =  {mvAsicReg_PON_MIB_RX_BAD_OCTECT,                0xCB0C0,                         0xCB0C0,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX bad octects"},
+	[mvAsicReg_PON_MIB_RX_BAD_FRAME]                  =  {mvAsicReg_PON_MIB_RX_BAD_FRAME,                 0xCB100,                         0xCB100,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX bad frame"},
+	[mvAsicReg_PON_MIB_RX_MULTICAST]                  =  {mvAsicReg_PON_MIB_RX_MULTICAST,                 0xCB140,                         0xCB140,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX multicast packet"},
+	[mvAsicReg_PON_MIB_RX_BROADCAST]                  =  {mvAsicReg_PON_MIB_RX_BROADCAST,                 0xCB180,                         0xCB180,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX broadcast packet"},
+	[mvAsicReg_PON_MIB_RX_64_OCT]                     =  {mvAsicReg_PON_MIB_RX_64_OCT,                    0xCB1C0,                         0xCB1C0,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX octects below or equal 64 bytes"},
+	[mvAsicReg_PON_MIB_RX_65_127_OCT]                 =  {mvAsicReg_PON_MIB_RX_65_127_OCT,                0xCB200,                         0xCB200,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX octects between 65 and 127 bytes"},
+	[mvAsicReg_PON_MIB_RX_128_255_OCT]                =  {mvAsicReg_PON_MIB_RX_128_255_OCT,               0xCB240,                         0xCB240,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX octects between 128 and 255 bytes"},
+	[mvAsicReg_PON_MIB_RX_256_511_OCT]                =  {mvAsicReg_PON_MIB_RX_256_511_OCT,               0xCB280,                         0xCB280,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX octects between 256 and 511 bytes"},
+	[mvAsicReg_PON_MIB_RX_512_1023_OCT]               =  {mvAsicReg_PON_MIB_RX_512_1023_OCT,              0xCB2C0,                         0xCB2C0,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX octects between 511 and 1023 bytes"},
+	[mvAsicReg_PON_MIB_RX_1024_OCT]                   =  {mvAsicReg_PON_MIB_RX_1024_OCT,                  0xCB300,                         0xCB300,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB RX octects above or equal 1024 bytes"},
+	[mvAsicReg_PON_MIB_TX_GOOD_OCT_LS]                =  {mvAsicReg_PON_MIB_TX_GOOD_OCT_LS,               0xCB400,                         0xCB400,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX good octects LSN"},
+	[mvAsicReg_PON_MIB_TX_GOOD_OCT_MS]                =  {mvAsicReg_PON_MIB_TX_GOOD_OCT_MS,               0xCB440,                         0xCB440,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX good octects MSN"},
+	[mvAsicReg_PON_MIB_TX_GOOD_FRAME]                 =  {mvAsicReg_PON_MIB_TX_GOOD_FRAME,                0xCB480,                         0xCB480,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX good frame"},
+	[mvAsicReg_PON_MIB_TX_BAD_OCTECT]                 =  {mvAsicReg_PON_MIB_TX_BAD_OCTECT,                0xCB4C0,                         0xCB4C0,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX bad octects"},
+	[mvAsicReg_PON_MIB_TX_MAC_ERROR]                  =  {mvAsicReg_PON_MIB_TX_MAC_ERROR,                 0xCB500,                         0xCB500,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX bad frames by MAC errors"},
+	[mvAsicReg_PON_MIB_TX_MULTICAST]                  =  {mvAsicReg_PON_MIB_TX_MULTICAST,                 0xCB540,                         0xCB540,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX multicast packet"},
+	[mvAsicReg_PON_MIB_TX_BROADCAST]                  =  {mvAsicReg_PON_MIB_TX_BROADCAST,                 0xCB580,                         0xCB580,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX broadcast packet"},
+	[mvAsicReg_PON_MIB_TX_64_OCT]                     =  {mvAsicReg_PON_MIB_TX_64_OCT,                    0xCB5C0,                         0xCB5C0,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX octects below or equal 64 bytes"},
+	[mvAsicReg_PON_MIB_TX_65_127_OCT]                 =  {mvAsicReg_PON_MIB_TX_65_127_OCT,                0xCB600,                         0xCB600,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX octects between 65 and 127 bytes"},
+	[mvAsicReg_PON_MIB_TX_128_255_OCT]                =  {mvAsicReg_PON_MIB_TX_128_255_OCT,               0xCB640,                         0xCB640,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX octects between 128 and 255 bytes"},
+	[mvAsicReg_PON_MIB_TX_256_511_OCT]                =  {mvAsicReg_PON_MIB_TX_256_511_OCT,               0xCB680,                         0xCB680,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX octects between 256 and 511 bytes"},
+	[mvAsicReg_PON_MIB_TX_512_1023_OCT]               =  {mvAsicReg_PON_MIB_TX_512_1023_OCT,              0xCB6C0,                         0xCB6C0,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX octects between 511 and 1023 bytes"},
+	[mvAsicReg_PON_MIB_TX_1024_OCT]                   =  {mvAsicReg_PON_MIB_TX_1024_OCT,                  0xCB700,                         0xCB700,  asicRO,     0xFFFFFFFF,     0,      16,     1,      0,     "PON MAC MIB TX octects above or equal 1024 bytes"},
 
-	[mvAsicReg_PON_MAC_MIB_CONTROL_START]             =  {mvAsicReg_PON_MAC_MIB_CONTROL_START,            0xCB800,                         0xCB800,  asicRW,     0xFFFFFFFF,     0,       2,     1,      0,     "PON MAC MIB CONTROL #0"},
 
-#else
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_0]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_0,               0xCB000,                         0xCB000,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #0"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_1]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_1,               0xCB080,                         0xCB080,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #1"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_2]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_2,               0xCB100,                         0xCB100,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #2"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_3]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_3,               0xCB180,                         0xCB180,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #3"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_4]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_4,               0xCB200,                         0xCB200,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #4"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_5]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_5,               0xCB280,                         0xCB280,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #5"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_6]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_6,               0xCB300,                         0xCB300,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #6"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_7]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_7,               0xCB380,                         0xCB380,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #7"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_8]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_8,               0xCB400,                         0xCB400,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #8"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_9]                =  {mvAsicReg_PON_MAC_MIB_COUNTERS_9,               0xCB480,                         0xCB480,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #9"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_10]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_10,              0xCB500,                         0xCB500,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #10"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_11]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_11,              0xCB580,                         0xCB580,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #11"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_12]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_12,              0xCB600,                         0xCB600,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #12"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_13]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_13,              0xCB680,                         0xCB680,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #13"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_14]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_14,              0xCB700,                         0xCB700,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #14"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_15]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_15,              0xCB780,                         0xCB780,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #15"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_16]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_16,              0xCB800,                         0xCB800,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #16"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_17]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_17,              0xCB880,                         0xCB880,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #17"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_18]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_18,              0xCB900,                         0xCB900,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #18"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_19]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_19,              0xCB980,                         0xCB980,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #19"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_20]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_20,              0xCBA00,                         0xCBA00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #20"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_21]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_21,              0xCBA80,                         0xCBA80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #21"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_22]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_22,              0xCBB00,                         0xCBB00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #22"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_23]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_23,              0xCBB80,                         0xCBB80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #23"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_24]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_24,              0xCBC00,                         0xCBC00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #24"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_25]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_25,              0xCBC80,                         0xCBC80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #25"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_26]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_26,              0xCBD00,                         0xCBD00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #26"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_27]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_27,              0xCBD80,                         0xCBD80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #27"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_28]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_28,              0xCBE00,                         0xCBE00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #28"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_29]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_29,              0xCBE80,                         0xCBE80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #29"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_30]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_30,              0xCBF00,                         0xCBF00,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #30"},
-	[mvAsicReg_PON_MAC_MIB_COUNTERS_31]               =  {mvAsicReg_PON_MAC_MIB_COUNTERS_31,              0xCBF80,                         0xCBF80,  asicRO,     0xFFFFFFFF,     0,      32,     1,      0,     "PON MAC MIB Counter Set #31"},
-
-	[mvAsicReg_PON_MIB_DEFAULT]                       =  {mvAsicReg_PON_MIB_DEFAULT,                      0xCBFD8,                         0xCBFD8,  asicRW,     0xFFFFFFFF,     0,      0,      0,      0,     "PON MIB Default"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_0]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_0,                0xCB050,                         0xCB050,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #0"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_1]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_1,                0xCB0D0,                         0xCB0D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #1"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_2]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_2,                0xCB150,                         0xCB150,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #2"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_3]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_3,                0xCB1D0,                         0xCB1D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #3"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_4]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_4,                0xCB250,                         0xCB250,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #4"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_5]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_5,                0xCB2D0,                         0xCB2D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #5"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_6]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_6,                0xCB350,                         0xCB350,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #6"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_7]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_7,                0xCB3D0,                         0xCB3D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #7"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_8]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_8,                0xCB450,                         0xCB450,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #8"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_9]                 =  {mvAsicReg_PON_MAC_MIB_CONTROL_9,                0xCB4D0,                         0xCB4D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #9"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_10]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_10,               0xCB550,                         0xCB550,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #10"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_11]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_11,               0xCB5D0,                         0xCB5D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #11"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_12]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_12,               0xCB650,                         0xCB650,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #12"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_13]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_13,               0xCB6D0,                         0xCB6D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #13"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_14]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_14,               0xCB750,                         0xCB750,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #14"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_15]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_15,               0xCB7D0,                         0xCB7D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #15"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_16]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_16,               0xCB850,                         0x58050,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #16"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_17]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_17,               0xCB8D0,                         0x588D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #17"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_18]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_18,               0xCB950,                         0x59050,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #18"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_19]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_19,               0xCB9D0,                         0xCB9D0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #19"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_20]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_20,               0xCBA50,                         0xCBA50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #20"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_21]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_21,               0xCBAD0,                         0xCBAD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #21"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_22]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_22,               0xCBB50,                         0xCBB50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #22"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_23]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_23,               0xCBBD0,                         0xCBBD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #23"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_24]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_24,               0xCBC50,                         0xCBC50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #24"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_25]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_25,               0xCBCD0,                         0xCBCD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #25"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_26]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_26,               0xCBD50,                         0xCBD50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #26"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_27]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_27,               0xCBDD0,                         0xCBDD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #27"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_28]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_28,               0xCBE50,                         0xCBE50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #28"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_29]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_29,               0xCBED0,                         0xCBED0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #29"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_30]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_30,               0xCBF50,                         0xCBF50,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #30"},
-	[mvAsicReg_PON_MAC_MIB_CONTROL_31]                =  {mvAsicReg_PON_MAC_MIB_CONTROL_31,               0xCBFD0,                         0xCBFD0,  asicRW,     0xFFFFFFFF,     0,      2,      1,      0,     "PON MAC MIB CONTROL #31"},
-#endif
 
 /******************************************************************************/
 /******************************************************************************/
@@ -833,9 +795,9 @@ S_asicGlobalRegDb asicGlbDb[] =
 	[mvAsicReg_C5008_BIT_0]                           =  { mvAsicReg_C5008_BIT_0,                           0xC5008,                         0xC5008,  asicRW,     0x00000001,     0,      0,     0,      0,     "0xC5008 bitfield 0"},
 	[mvAsicReg_C5008_BIT_3]                           =  { mvAsicReg_C5008_BIT_3,                           0xC5008,                         0xC5008,  asicRW,     0x00000001,     3,      0,     0,      0,     "0xC5008 bitfield 3"},
 
-	[mvAsicReg_18900_BIT_14]                          =  { mvAsicReg_18900_BIT_14,                          0x18900,                         0x18900,  asicRW,     0x00000001,     14,      0,     0,      0,    "0x18900 bitfield 14"},
-	[mvAsicReg_18900_BIT_19]                          =  { mvAsicReg_18900_BIT_19,                          0x18900,                         0x18900,  asicRW,     0x00000001,     19,      0,     0,      0,    "0x18900 bitfield 19"},
-	[mvAsicReg_18900_BIT_21]                          =  { mvAsicReg_18900_BIT_21,                          0x18900,                         0x18900,  asicRW,     0x00000001,     14,      0,     0,      0,    "0x18900 bitfield 21"},
+	[mvAsicReg_18900_BIT_14]                          =  { mvAsicReg_18900_BIT_14,                          0x18900,                         0x18900,  asicRW,     0x00000001,     14,     0,     0,      0,     "0x18900 bitfield 14"},
+	[mvAsicReg_18900_BIT_19]                          =  { mvAsicReg_18900_BIT_19,                          0x18900,                         0x18900,  asicRW,     0x00000001,     19,     0,     0,      0,     "0x18900 bitfield 19"},
+	[mvAsicReg_18900_BIT_21]                          =  { mvAsicReg_18900_BIT_21,                          0x18900,                         0x18900,  asicRW,     0x00000001,     14,     0,     0,      0,     "0x18900 bitfield 21"},
 
 	[mvAsicReg_GMAC1_AUTONEG_SPEED]                   =  { mvAsicReg_GMAC1_AUTONEG_SPEED,                   0xC500C,                         0xC500C,  asicRW,     0x00000001,     7,      0,     0,      0,     "GMAC1 autoneg speed"},
 	[mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_MODE]       =  { mvAsicReg_GMAC1_AUTONEG_FLOW_CONTROL_MODE,       0xC500C,                         0xC500C,  asicRW,     0x00000001,     9,      0,     0,      0,     "GMAC1 autoneg flow control mode"},
diff --git a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h
index 46e2858..d8b19bb 100755
--- a/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h
+++ b/arch/arm/plat-armada/mv_hal/pon/mvPonOnuRegs.h
@@ -300,80 +300,44 @@ typedef enum {
 	mvAsicReg_GPON_GEM_VALID_PID_TABLE            = 210,
 	mvAsicReg_GPON_TEST                           = 211,
 
-	/*  GPON MIB Counter Set       */
-	/* =========================== */
-	mvAsicReg_PON_MAC_MIB_COUNTERS_0              = 212,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_1              = 213,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_2              = 214,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_3              = 215,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_4              = 216,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_5              = 217,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_6              = 218,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_7              = 219,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_8              = 220,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_9              = 221,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_10             = 222,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_11             = 223,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_12             = 224,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_13             = 225,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_14             = 226,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_15             = 227,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_16             = 228,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_17             = 229,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_18             = 230,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_19             = 231,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_20             = 232,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_21             = 233,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_22             = 234,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_23             = 235,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_24             = 236,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_25             = 237,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_26             = 238,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_27             = 239,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_28             = 240,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_29             = 241,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_30             = 242,
-	mvAsicReg_PON_MAC_MIB_COUNTERS_31             = 243,
-
 	/*  GPON MIB Counter Control Registers */
 	/* =================================== */
+	mvAsicReg_PON_RX_MIB_CONTROL                  = 220,
+	mvAsicReg_PON_TX_MIB_CONTROL                  = 221,
+	mvAsicReg_PON_RX_MIB_DEFAULT                  = 222,
+	mvAsicReg_PON_TX_MIB_DEFAULT                  = 223,
+	mvAsicReg_PON_MIB_MIN_MAX_LENGTH              = 224,
+	mvAsicReg_PON_MIB_CONFIG                      = 225,
+
+	/*  GPON MIB Counter Set       */
+	/* =========================== */
+	mvAsicReg_PON_MIB_RX_GOOD_OCT_LS	      = 230,
+	mvAsicReg_PON_MIB_RX_GOOD_OCT_MS	      = 231,
+	mvAsicReg_PON_MIB_RX_GOOD_FRAME	              = 232,
+	mvAsicReg_PON_MIB_RX_BAD_OCTECT	              = 233,
+	mvAsicReg_PON_MIB_RX_BAD_FRAME	              = 234,
+	mvAsicReg_PON_MIB_RX_MULTICAST	              = 235,
+	mvAsicReg_PON_MIB_RX_BROADCAST	              = 236,
+	mvAsicReg_PON_MIB_RX_64_OCT	              = 237,
+	mvAsicReg_PON_MIB_RX_65_127_OCT	              = 238,
+	mvAsicReg_PON_MIB_RX_128_255_OCT	      = 239,
+	mvAsicReg_PON_MIB_RX_256_511_OCT	      = 240,
+	mvAsicReg_PON_MIB_RX_512_1023_OCT	      = 241,
+	mvAsicReg_PON_MIB_RX_1024_OCT	              = 242,
+	mvAsicReg_PON_MIB_TX_GOOD_OCT_LS	      = 243,
+	mvAsicReg_PON_MIB_TX_GOOD_OCT_MS	      = 244,
+	mvAsicReg_PON_MIB_TX_GOOD_FRAME	              = 245,
+	mvAsicReg_PON_MIB_TX_BAD_OCTECT	              = 246,
+	mvAsicReg_PON_MIB_TX_MAC_ERROR	              = 247,
+	mvAsicReg_PON_MIB_TX_MULTICAST	              = 248,
+	mvAsicReg_PON_MIB_TX_BROADCAST	              = 249,
+	mvAsicReg_PON_MIB_TX_64_OCT	              = 250,
+	mvAsicReg_PON_MIB_TX_65_127_OCT	              = 251,
+	mvAsicReg_PON_MIB_TX_128_255_OCT	      = 252,
+	mvAsicReg_PON_MIB_TX_256_511_OCT	      = 253,
+	mvAsicReg_PON_MIB_TX_512_1023_OCT	      = 254,
+	mvAsicReg_PON_MIB_TX_1024_OCT	              = 255,
 
-	mvAsicReg_PON_MIB_DEFAULT                     = 244,
-	mvAsicReg_PON_MAC_MIB_CONTROL_0               = 245,
-	mvAsicReg_PON_MAC_MIB_CONTROL_1               = 246,
-	mvAsicReg_PON_MAC_MIB_CONTROL_2               = 247,
-	mvAsicReg_PON_MAC_MIB_CONTROL_3               = 248,
-	mvAsicReg_PON_MAC_MIB_CONTROL_4               = 249,
-	mvAsicReg_PON_MAC_MIB_CONTROL_5               = 250,
-	mvAsicReg_PON_MAC_MIB_CONTROL_6               = 251,
-	mvAsicReg_PON_MAC_MIB_CONTROL_7               = 252,
-	mvAsicReg_PON_MAC_MIB_CONTROL_8               = 253,
-	mvAsicReg_PON_MAC_MIB_CONTROL_9               = 254,
-	mvAsicReg_PON_MAC_MIB_CONTROL_10              = 255,
-	mvAsicReg_PON_MAC_MIB_CONTROL_11              = 256,
-	mvAsicReg_PON_MAC_MIB_CONTROL_12              = 257,
-	mvAsicReg_PON_MAC_MIB_CONTROL_13              = 258,
-	mvAsicReg_PON_MAC_MIB_CONTROL_14              = 259,
-	mvAsicReg_PON_MAC_MIB_CONTROL_15              = 260,
-	mvAsicReg_PON_MAC_MIB_CONTROL_16              = 261,
-	mvAsicReg_PON_MAC_MIB_CONTROL_17              = 262,
-	mvAsicReg_PON_MAC_MIB_CONTROL_18              = 263,
-	mvAsicReg_PON_MAC_MIB_CONTROL_19              = 264,
-	mvAsicReg_PON_MAC_MIB_CONTROL_20              = 265,
-	mvAsicReg_PON_MAC_MIB_CONTROL_21              = 266,
-	mvAsicReg_PON_MAC_MIB_CONTROL_22              = 267,
-	mvAsicReg_PON_MAC_MIB_CONTROL_23              = 268,
-	mvAsicReg_PON_MAC_MIB_CONTROL_24              = 269,
-	mvAsicReg_PON_MAC_MIB_CONTROL_25              = 270,
-	mvAsicReg_PON_MAC_MIB_CONTROL_26              = 271,
-	mvAsicReg_PON_MAC_MIB_CONTROL_27              = 272,
-	mvAsicReg_PON_MAC_MIB_CONTROL_28              = 273,
-	mvAsicReg_PON_MAC_MIB_CONTROL_29              = 274,
-	mvAsicReg_PON_MAC_MIB_CONTROL_30              = 275,
-	mvAsicReg_PON_MAC_MIB_CONTROL_31              = 276,
-
-	mvAsicReg_PON_MAC_MIB_COUNTERS_START          = 280,
-	mvAsicReg_PON_MAC_MIB_CONTROL_START           = 281,
 
 /******************************************************************************/
 /******************************************************************************/
-- 
1.7.5.4

