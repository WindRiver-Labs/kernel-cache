From 6abc2e000ad43f3382de8103fe946e098acc0447 Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Sun, 20 Oct 2013 12:56:34 +0200
Subject: [PATCH 1053/1825] fix: gpio: Use function that doesn't check GPIO
 mode during direction change

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit dc7a1622c8f41dae33c6a0a72bdf37a9bfe1e8a3

        While using mv_gpio_direction_output subroutine first the value is written and
        then the GPIO is reconfigured to output mode. The mvGppValueSet function's first
        step is to check, whether the GPIO is set to output and then write a value to
        it. This checking lead to the errors if GPIO was set as an input before.

        After this commit gppRegSet function (which do not check GPIO direction during
        value setting) is used instead of mvGppValueSet.

        Fix for: BTS 487 - AXP B0 GP / A-370 RD, LSP 2013 (Q2/Q3) GPIO Direction Change
        problems

Change-Id: Ida1108a2ca13581d06f9807681b4d4ed70555969
Signed-off-by: Grzegorz Jaszczyk <jaz@semihalf.com>
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/3774
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/mv_hal/gpp/mvGpp.c |    4 +---
 arch/arm/plat-armada/mv_hal/gpp/mvGpp.h |    2 ++
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/arch/arm/plat-armada/mv_hal/gpp/mvGpp.c b/arch/arm/plat-armada/mv_hal/gpp/mvGpp.c
index 9c4f2fc..7c94df3 100644
--- a/arch/arm/plat-armada/mv_hal/gpp/mvGpp.c
+++ b/arch/arm/plat-armada/mv_hal/gpp/mvGpp.c
@@ -76,8 +76,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define DB(x)
 #endif
 
-static MV_VOID gppRegSet(MV_U32 group, MV_U32 regOffs, MV_U32 mask, MV_U32 value);
-
 static MV_GPP_HAL_DATA gppHalData;
 
 /*******************************************************************************
@@ -367,7 +365,7 @@ MV_STATUS mvGppValueSet(MV_U32 group, MV_U32 mask, MV_U32 value)
 *       None.
 *
 *******************************************************************************/
-static MV_VOID gppRegSet(MV_U32 group, MV_U32 regOffs, MV_U32 mask, MV_U32 value)
+MV_VOID gppRegSet(MV_U32 group, MV_U32 regOffs, MV_U32 mask, MV_U32 value)
 {
 	MV_U32 gppData;
 
diff --git a/arch/arm/plat-armada/mv_hal/gpp/mvGpp.h b/arch/arm/plat-armada/mv_hal/gpp/mvGpp.h
index c0ecd0e..7995402 100644
--- a/arch/arm/plat-armada/mv_hal/gpp/mvGpp.h
+++ b/arch/arm/plat-armada/mv_hal/gpp/mvGpp.h
@@ -120,6 +120,8 @@ extern "C" {
 	/* mvGppValueSet - Set a GPP Pin list value. */
 	MV_STATUS mvGppValueSet(MV_U32 group, MV_U32 mask, MV_U32 value);
 
+	MV_VOID gppRegSet(MV_U32 group, MV_U32 regOffs, MV_U32 mask, MV_U32 value);
+
 	MV_STATUS mvGppAtomicValueSet(MV_U32 gpionumber);
 	MV_STATUS mvGppAtomicValueClear(MV_U32 gpionumber);
 #ifdef __cplusplus
-- 
1.7.5.4

