From 404973302f59099a00e90c70c113ff57e3edd537 Mon Sep 17 00:00:00 2001
From: Ernest Villion <ernestv@marvell.com>
Date: Thu, 13 Mar 2014 14:03:44 +0200
Subject: [PATCH 1470/1825] pp3: Adding pp3 FW sysfs download for each memory
 types

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 2f007b93ece7ecfdb32c0fb2f7b5abb967260bcd

Change-Id: I2b678468c484a43fd80339a0233055f7b021ed41
Signed-off-by: Ernest Villion <ernestv@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6396
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Uri Eliyahu <uriel@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/fw/mv_fw.c       |  228 +++++++++++++++++++--
 drivers/net/ethernet/marvell/pp3/fw/mv_fw.h       |   33 +++-
 drivers/net/ethernet/marvell/pp3/fw/mv_fw_sysfs.c |   49 ++++-
 3 files changed, 282 insertions(+), 28 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c
index 945d192..0467cdc 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.c
@@ -73,57 +73,243 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include "mv_fw.h"
 
-#define MV_PP3_FW_IMAGE_SIZE (128*1024)
 
-int mv_pp3_fw_download(char *path)
+int mv_pp3_fw_read_file(char *path, char *buf, int image_size)
 {
 	int fd;
-	char *buf = NULL;
-	int size = 0;
 	int tmp = 0;
+	int size = 0;
 	mm_segment_t old_fs = get_fs();
 
-	pr_info("DOWNLOAD PATH: %s\n", path);
+	set_fs(KERNEL_DS);
 
-	buf = kzalloc(MV_PP3_FW_IMAGE_SIZE, GFP_KERNEL);
-	if (!buf) {
-		pr_err("FW Image Allocation Failed in <%s>\n", __func__);
-		return -ENOMEM;
+	fd = sys_open(path, O_RDONLY, 0);
+	if (fd >= 0) {
+		while ((tmp =
+			sys_read(fd, &buf[size], image_size - size)) > 0) {
+			size += tmp;
+		}
+		sys_close(fd);
+	} else {
+		pr_err("Failed to open file %s\n", path);
+		return -EIO;
 	}
-	pr_info("ALLOCATED: %d\n", MV_PP3_FW_IMAGE_SIZE);
+
+	set_fs(old_fs);
+
+	pr_info("Read %d bytes\n", size);
+
+	return size;
+}
+
+
+int mv_pp3_fw_write_file(char *path, char *buf, int buf_size)
+{
+	int fd;
+	int tmp = 0;
+	int size = 0;
+	mm_segment_t old_fs = get_fs();
 
 	set_fs(KERNEL_DS);
 
-	fd = sys_open(path, O_RDONLY, 0);
+	fd = sys_open(path, (O_CREAT | O_WRONLY), 0);
 	if (fd >= 0) {
-		while ((tmp =
-			sys_read(fd, &buf[size],
-				 MV_PP3_FW_IMAGE_SIZE - size)) > 0) {
+		while ((size < buf_size) && (tmp =
+			sys_write(fd, &buf[size], buf_size - size)) > 0) {
 			size += tmp;
-			pr_info("Read %d bytes\n", tmp);
 		}
 		sys_close(fd);
-		mv_fw_write(buf, size);
 	} else {
 		pr_err("Failed to open file %s\n", path);
+		return -EIO;
 	}
-	kfree(buf);
+
 	set_fs(old_fs);
 
-	pr_info("FW DOWNLOADED\n");
+	pr_info("Written: %d bytes\n", size);
+
+	return size;
+}
+
+int mv_pp3_profile_download(char *path)
+{
+	char *buf = NULL;
+	int size = 0;
+
+	pr_info("DOWNLOAD PATH: %s\n", path);
+
+	buf = kzalloc(MV_PP3_PROFILE_MEM_SIZE, GFP_KERNEL);
+	if (!buf) {
+		pr_err("FW Image Allocation Failed in <%s>\n", __func__);
+		return -ENOMEM;
+	}
+	pr_info("ALLOCATED: %d\n", MV_PP3_PROFILE_MEM_SIZE);
+
+	size = mv_pp3_fw_read_file(path, buf, MV_PP3_PROFILE_MEM_SIZE);
+	if (size > 0)
+		mv_fw_mem_write(buf, size, PP3_PROFILE_MEM);
+
+	kfree(buf);
 
 	return 0;
 }
 
-int mv_fw_write(char *data, int size)
+int mv_pp3_profile_dump(char *path)
+{
+	char *buf = NULL;
+	int size = 0;
+
+	pr_info("DUMP PATH: %s\n", path);
+
+	buf = kzalloc(MV_PP3_PROFILE_MEM_SIZE, GFP_KERNEL);
+	if (!buf) {
+		pr_err("FW Image Buffer Allocation Failed in <%s>\n", __func__);
+		return -ENOMEM;
+	}
+	pr_info("ALLOCATED: %d\n", MV_PP3_PROFILE_MEM_SIZE);
+
+	size = mv_fw_mem_read(buf, MV_PP3_PROFILE_MEM_SIZE, PP3_PROFILE_MEM);
+	if (size > 0)
+		size = mv_pp3_fw_write_file(path, buf, MV_PP3_PROFILE_MEM_SIZE);
+
+	kfree(buf);
+
+	return 0;
+}
+
+int mv_pp3_cfg_dump(char *path)
+{
+	char *buf = NULL;
+	int size = 0;
+
+	pr_info("DUMP PATH: %s\n", path);
+
+	buf = kzalloc(MV_PP3_CFG_MEM_SIZE, GFP_KERNEL);
+	if (!buf) {
+		pr_err("FW Image Buffer Allocation Failed in <%s>\n", __func__);
+		return -ENOMEM;
+	}
+	pr_info("ALLOCATED: %d\n", MV_PP3_CFG_MEM_SIZE);
+
+	size = mv_fw_mem_read(buf, MV_PP3_CFG_MEM_SIZE, PP3_CFG_MEM);
+	if (size > 0)
+		size = mv_pp3_fw_write_file(path, buf, MV_PP3_CFG_MEM_SIZE);
+
+	kfree(buf);
+
+	return 0;
+}
+
+int mv_pp3_cfg_download(char *path)
+{
+	char *buf = NULL;
+	int size = 0;
+
+	pr_info("DOWNLOAD PATH: %s\n", path);
+
+	buf = kzalloc(MV_PP3_CFG_MEM_SIZE, GFP_KERNEL);
+	if (!buf) {
+		pr_err("FW Image Allocation Failed in <%s>\n", __func__);
+		return -ENOMEM;
+	}
+	pr_info("ALLOCATED: %d\n", MV_PP3_CFG_MEM_SIZE);
+
+	size = mv_pp3_fw_read_file(path, buf, MV_PP3_CFG_MEM_SIZE);
+	if (size > 0)
+		mv_fw_mem_write(buf, size, PP3_CFG_MEM);
+
+	kfree(buf);
+
+	return 0;
+}
+
+
+int mv_pp3_ppn_run(char *path)
+{
+
+	return 0;
+}
+
+
+
+int mv_pp3_imem_download(char *path)
+{
+	char *buf = NULL;
+	int size = 0;
+
+	pr_info("DOWNLOAD PATH: %s\n", path);
+
+	buf = kzalloc(MV_PP3_FW_MEM_SIZE, GFP_KERNEL);
+	if (!buf) {
+		pr_err("FW Image Allocation Failed in <%s>\n", __func__);
+		return -ENOMEM;
+	}
+	pr_info("ALLOCATED: %d\n", MV_PP3_FW_MEM_SIZE);
+
+	size = mv_pp3_fw_read_file(path, buf, MV_PP3_FW_MEM_SIZE);
+	if (size > 0)
+		mv_fw_mem_write(buf, size, PP3_IMEM);
+
+	kfree(buf);
+
+	return 0;
+}
+
+
+int mv_pp3_imem_dump(char *path)
+{
+	char *buf = NULL;
+	int size = 0;
+
+	pr_info("DUMP PATH: %s\n", path);
+
+	buf = kzalloc(MV_PP3_FW_MEM_SIZE, GFP_KERNEL);
+	if (!buf) {
+		pr_err("FW Image Buffer Allocation Failed in <%s>\n", __func__);
+		return -ENOMEM;
+	}
+	pr_info("ALLOCATED: %d\n", MV_PP3_FW_MEM_SIZE);
+
+	size = mv_fw_mem_read(buf, MV_PP3_FW_MEM_SIZE, PP3_IMEM);
+	if (size > 0)
+		size = mv_pp3_fw_write_file(path, buf, MV_PP3_FW_MEM_SIZE);
+
+	kfree(buf);
+
+	return 0;
+}
+
+
+
+int mv_fw_mem_write(char *data, int size, enum pp3_mem_type mem_type)
 {
 	int i;
 
 	/*TODO: probably verify checksum, version etc. */
-	pr_info("size: %d [showing 0..63]\n", size);
+	pr_info("Writing .... Type: %d size: %d [showing 0..63]\n",
+		mem_type, size);
 
 	for (i = 0; i < ((size < 64) ? size : 64); i++)
-		pr_cont("%02X", data[i]);
+		pr_cont("%02X ", data[i]);
 
+	pr_info("Download SUCCESSFULL: Type: %d size: %d [showing 0..63]\n",
+		mem_type, size);
 	return 0;
 }
+
+
+int mv_fw_mem_read(char *data, int size, enum pp3_mem_type mem_type)
+{
+	int i;
+
+	/*TODO: probably verify checksum, version etc. */
+	pr_info("Reading .... Type: %d size: %d [generating ...]\n",
+		mem_type, size);
+
+	for (i = 0; i < size; i++)
+		data[i] = (char)i;
+
+	pr_info("Read SUCCESSFULL: Type: %d size: %d [showing 0..63]\n",
+		mem_type, size);
+	return size;
+}
diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h
index de296d1..3c831ed 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_fw.h
@@ -66,9 +66,38 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef __mvfw_h__
 #define __mvfw_h__
 
-int mv_pp3_fw_download(char *path);
 
-int mv_fw_write(char *data, int size);
+#define MV_PP3_FW_MEM_SIZE (128*1024)
+#define MV_PP3_PROFILE_MEM_SIZE (64*1024)
+#define MV_PP3_CFG_MEM_SIZE (32*1024)
+
+
+enum pp3_mem_type {
+	PP3_IMEM = 0,
+	PP3_CFG_MEM = 1,
+	PP3_PROFILE_MEM = 2,
+	PP3_SRAM_MEM = 3,
+	PP3_SPAD = 4
+};
+
+
+int mv_pp3_imem_download(char *path);
+int mv_pp3_imem_dump(char *path);
+
+int mv_pp3_profile_download(char *path);
+int mv_pp3_profile_dump(char *path);
+
+int mv_pp3_cfg_download(char *path);
+int mv_pp3_cfg_dump(char *path);
+
+int mv_pp3_ppn_run(char *params);
+
+
+int mv_pp3_fw_read_file(char *path, char *buf, int size);
+int mv_pp3_fw_write_file(char *path, char *buf, int size);
+
+int mv_fw_mem_write(char *data, int size, enum pp3_mem_type target_mem);
+int mv_fw_mem_read(char *data, int size, enum pp3_mem_type source_mem);
 
 /* SYSFS*/
 int mv_pp3_fw_sysfs_init(struct kobject *fw_kobj);
diff --git a/drivers/net/ethernet/marvell/pp3/fw/mv_fw_sysfs.c b/drivers/net/ethernet/marvell/pp3/fw/mv_fw_sysfs.c
index e5d6fdc..306eaff 100644
--- a/drivers/net/ethernet/marvell/pp3/fw/mv_fw_sysfs.c
+++ b/drivers/net/ethernet/marvell/pp3/fw/mv_fw_sysfs.c
@@ -71,7 +71,20 @@ static ssize_t mv_fw_help(char *b)
 	int o = 0;
 
 	o += scnprintf(b + o, PAGE_SIZE - o,
-		       "echo [path]         > fw_dnld     - Download FW\n");
+		       "echo [path]         > imem_dnld     - Download FW from file\n");
+	o += scnprintf(b + o, PAGE_SIZE - o,
+		       "echo [path]         > imem_dump     - Save FW to file\n");
+	o += scnprintf(b + o, PAGE_SIZE - o,
+		       "echo [path]         > profile_dnld  - Download profile from file\n");
+	o += scnprintf(b + o, PAGE_SIZE - o,
+		       "echo [path]         > profile_dump  - Save profile to file\n");
+	o += scnprintf(b + o, PAGE_SIZE - o,
+		       "echo [path]         > cfg_dnld      - Download Config RAM from file\n");
+	o += scnprintf(b + o, PAGE_SIZE - o,
+		       "echo [path]         > cfg_dump      - Save Config RAM to file\n");
+	o += scnprintf(b + o, PAGE_SIZE - o,
+		       "echo 'run'          > ppn_run       - Run PPN\n");
+
 
 	return o;
 }
@@ -105,8 +118,20 @@ static ssize_t mv_fw_store(struct device *dev,
 	err = 0;
 	sscanf(buf, "%s", str);
 
-	if (!strcmp(name, "fw_dnld")) {
-		mv_pp3_fw_download(str);
+	if (!strcmp(name, "imem_dnld")) {
+		mv_pp3_imem_download(str);
+	} else if (!strcmp(name, "imem_dump")) {
+		mv_pp3_imem_dump(str);
+	} else if (!strcmp(name, "profile_dnld")) {
+		mv_pp3_profile_download(str);
+	} else if (!strcmp(name, "profile_dump")) {
+		mv_pp3_profile_dump(str);
+	} else if (!strcmp(name, "ppn_run")) {
+		mv_pp3_ppn_run(str);
+	} else if (!strcmp(name, "cfg_dnld")) {
+		mv_pp3_cfg_download(str);
+	} else if (!strcmp(name, "cfg_dump")) {
+		mv_pp3_cfg_dump(str);
 	} else {
 		err = 1;
 		pr_err("%s: illegal operation <%s>\n", __func__,
@@ -117,11 +142,25 @@ static ssize_t mv_fw_store(struct device *dev,
 }
 
 static DEVICE_ATTR(help, S_IRUSR, mv_fw_show, NULL);
-static DEVICE_ATTR(fw_dnld, S_IWUSR, NULL, mv_fw_store);
+static DEVICE_ATTR(imem_dnld, S_IWUSR, NULL, mv_fw_store);
+static DEVICE_ATTR(imem_dump, S_IWUSR, NULL, mv_fw_store);
+static DEVICE_ATTR(cfg_dnld, S_IWUSR, NULL, mv_fw_store);
+static DEVICE_ATTR(cfg_dump, S_IWUSR, NULL, mv_fw_store);
+static DEVICE_ATTR(profile_dump, S_IWUSR, NULL, mv_fw_store);
+static DEVICE_ATTR(profile_dnld, S_IWUSR, NULL, mv_fw_store);
+static DEVICE_ATTR(ppn_run, S_IWUSR, NULL, mv_fw_store);
+
 
 static struct attribute *mv_fw_attrs[] = {
 	&dev_attr_help.attr,
-	&dev_attr_fw_dnld.attr,
+	&dev_attr_imem_dnld.attr,
+	&dev_attr_imem_dump.attr,
+	&dev_attr_profile_dnld.attr,
+	&dev_attr_profile_dump.attr,
+	&dev_attr_ppn_run.attr,
+	&dev_attr_cfg_dnld.attr,
+	&dev_attr_cfg_dump.attr,
+
 	NULL
 };
 
-- 
1.7.5.4

