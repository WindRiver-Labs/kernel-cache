From cd304400d7da0a574d146a8b28bd445ae3438972 Mon Sep 17 00:00:00 2001
From: Eli Nidam <elini@marvell.com>
Date: Wed, 4 Dec 2013 18:31:56 +0200
Subject: [PATCH 1181/1825] fix: a38x: rd-board: fixed MPP 19 and added IO
 expander configuration.

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 26f79118ab4778020370471be361c11a2c9be65d

	1. Fixed MPP 19 for RD-NAP and RD-WAP
	2. Added IO expander configuration for RD-board (depend on WAP/NAS configuration)

Change-Id: I0389ee1ef7a40a6e17de9e5ede36d1f07fe8d423
Signed-off-by: Eli Nidam <elini@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/4598
Reviewed-by: Tawfik Bayouk <tawfik@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../armada_38x_family/boardEnv/mvBoardEnvLib.c     |   38 ++++++++++-
 .../armada_38x_family/boardEnv/mvBoardEnvLib.h     |   10 +++
 .../armada_38x_family/boardEnv/mvBoardEnvSpec.c    |   77 ++++++++++++++++----
 .../armada_38x_family/boardEnv/mvBoardEnvSpec.h    |    3 +-
 .../armada_38x_family/ctrlEnv/mvCtrlEnvLib.c       |    1 +
 5 files changed, 111 insertions(+), 18 deletions(-)

diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c
index 588d78c..7af3ebc 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.c
@@ -980,7 +980,43 @@ MV_STATUS mvBoardEthComplexInfoUpdate(MV_VOID)
 {
 	return MV_OK;
 }
+/*******************************************************************************
+* mvBoardIoExpanderUpdate
+*
+* DESCRIPTION:
+*	Update io expander via TWSI,
+*
+** INPUT:
+*	None.
+*
+* OUTPUT:
+*	None.
+*
+* RETURN:
+*	MV_OK - on success,
+*	MV_ERROR - wriet to twsi failed.
+*
+*******************************************************************************/
+MV_STATUS mvBoardIoExpanderUpdate(MV_VOID)
+{
+	MV_U32 i = 0;
+
+	if ((board->pIoExp == NULL) || (0 == board->numIoExp))
+		return MV_OK;
 
+	for (i = 0; i < board->numIoExp; i++) {
+		if (MV_OK != mvBoardTwsiSet(BOARD_TWSI_IO_EXPANDER, board->pIoExp[i].addr,
+					    board->pIoExp[i].offset, board->pIoExp[i].val)) {
+			mvOsPrintf("%s: Write IO expander (addr=0x%x, offset=%d, value=0x%2x to  fail\n",
+				   __func__,
+				   mvBoardTwsiAddrGet(BOARD_TWSI_IO_EXPANDER, board->pIoExp[i].addr),
+				   board->pIoExp[i].offset,
+				   board->pIoExp[i].val);
+			return MV_ERROR;
+		}
+	}
+	return MV_OK;
+}
 /*******************************************************************************
 * mvBoardBootDeviceGroupSet - test board Boot configuration and set MPP groups
 *
diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h
index d6a9e2c..f2b3dbb 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvLib.h
@@ -113,6 +113,7 @@ typedef enum _devBoardClass {
 typedef enum _devTwsiBoardClass {
 	BOARD_DEV_TWSI_SATR,
 	BOARD_TWSI_MODULE_DETECT,
+	BOARD_TWSI_IO_EXPANDER,
 	BOARD_TWSI_OTHER
 } MV_BOARD_TWSI_CLASS;
 
@@ -290,6 +291,12 @@ typedef struct {
 	MV_U32 val;
 } MV_BOARD_SPEC_INIT;
 
+struct MV_BOARD_IO_EXPANDER {
+	MV_U8 addr;
+	MV_U8 offset;
+	MV_U8 val;
+};
+
 typedef struct _boardInfo {
 	char boardName[MV_BOARD_NAME_LEN];
 	MV_U8 numBoardMppTypeValue;
@@ -355,6 +362,8 @@ typedef struct _boardInfo {
 	/* Indicates if auto-detection of modules is enabled on this board. */
 	/* Set to MV_FALSE for any board that is not a DB. */
 	MV_BOOL configAutoDetect;
+	MV_U32	numIoExp;
+	struct MV_BOARD_IO_EXPANDER *pIoExp;
 } MV_BOARD_INFO;
 
 /* {{MV_CONFIG_TYPE_ID ConfigID, twsi-ID,  Offset, ID,  isActiveForBoard[]}} */
@@ -499,6 +508,7 @@ MV_U8 mvBoardCpuCoresNumGet(MV_VOID);
 MV_VOID mvBoardMppModuleTypePrint(MV_VOID);
 MV_VOID mvBoardOtherModuleTypePrint(MV_VOID);
 MV_BOOL mvBoardIsModuleConnected(MV_U32 ModuleID);
+MV_STATUS mvBoardIoExpanderUpdate(MV_VOID);
 
 MV_STATUS mvBoardTwsiSatRGet(MV_U8 devNum, MV_U8 regNum, MV_U8 *pData);
 MV_STATUS mvBoardTwsiSatRSet(MV_U8 devNum, MV_U8 regNum, MV_U8 regVal);
diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c
index e521226..e6b2ee0 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.c
@@ -185,18 +185,20 @@ MV_BOARD_INFO db88f68xx_board_info = {
 	.norFlashReadParams		= 0,
 	.norFlashWriteParams		= 0,
 	/* Enable modules auto-detection. */
-	.configAutoDetect		= MV_TRUE
+	.configAutoDetect		= MV_TRUE,
+	.numIoExp			= 0,
+	.pIoExp				= NULL
 };
 
-
 /*******************************************************************************
- * A380 RD-88F68XX board */
+ * A380 RD-NAS-88F68XX board */
 /*******************************************************************************/
-
 MV_BOARD_TWSI_INFO rd88F68XXInfoBoardTwsiDev[] = {
 	/* {{MV_BOARD_DEV_CLASS devClass, MV_U8 devClassId,  MV_U8 twsiDevAddr, MV_U8 twsiDevAddrType}} */
 	{ BOARD_DEV_TWSI_SATR,	0,	0x50, ADDR7_BIT, MV_TRUE},  /* read only for HW configuration */
 	{ BOARD_DEV_TWSI_SATR,	1,	0x4C, ADDR7_BIT, MV_FALSE},
+	{ BOARD_TWSI_IO_EXPANDER,	0,	0x20, ADDR7_BIT, MV_FALSE},
+	{ BOARD_TWSI_IO_EXPANDER,	1,	0x21, ADDR7_BIT, MV_FALSE},
 };
 MV_BOARD_MAC_INFO rd88F68XXInfoBoardMacInfo[] = {
 	/* {{MV_BOARD_MAC_SPEED boardMacSpeed, MV_8 boardEthSmiAddr}} */
@@ -207,15 +209,15 @@ MV_BOARD_MAC_INFO rd88F68XXInfoBoardMacInfo[] = {
 MV_DEV_CS_INFO rd88F68XXInfoBoardDeCsInfo[] = {
 	/*{deviceCS, params, devType, devWidth, busWidth }*/
 #if defined(MV_INCLUDE_SPI)
-	{ SPI0_CS0, N_A, BOARD_DEV_SPI_FLASH, 8, 8 } /* SPI DEV */
+	{ SPI0_CS0,	N_A,	BOARD_DEV_SPI_FLASH,	8,	8}  /* SPI DEV */
 #endif
 };
 
-MV_BOARD_MPP_INFO rd88f68XXInfoBoardMppConfigValue[] = {
+MV_BOARD_MPP_INFO rdNas88f68XXInfoBoardMppConfigValue[] = {
 	{ {
 		RD_88F68XX_MPP0_7,
 		RD_88F68XX_MPP8_15,
-		RD_88F68XX_MPP16_23,
+		RD_NAS_88F68XX_MPP16_23,
 		RD_88F68XX_MPP24_31,
 		RD_88F68XX_MPP32_39,
 		RD_88F68XX_MPP40_47,
@@ -224,11 +226,22 @@ MV_BOARD_MPP_INFO rd88f68XXInfoBoardMppConfigValue[] = {
 	} }
 };
 
+struct MV_BOARD_IO_EXPANDER ioExpNas[] = {
+	{0, 6, 0xF4},
+	{0, 7, 0xC3},
+	{0, 2, 0x0B},
+	{0, 3, 0x18},
+	{1, 6, 0xE7},
+	{1, 7, 0xF9},
+	{1, 2, 0x08},
+	{1, 3, 0x02}
+};
+
 MV_BOARD_INFO rdNas88f68XX_board_info = {
 	.boardName			= "RD-NAS-88F6820-DDR3",
-	.numBoardMppTypeValue	= ARRSZ(rd88f68XXInfoBoardMppConfigValue),
+	.numBoardMppTypeValue	= ARRSZ(rdNas88f68XXInfoBoardMppConfigValue),
 	.pBoardModTypeValue		= NULL,
-	.pBoardMppConfigValue	= rd88f68XXInfoBoardMppConfigValue,
+	.pBoardMppConfigValue	= rdNas88f68XXInfoBoardMppConfigValue,
 	.intsGppMaskLow			= 0,
 	.intsGppMaskMid			= 0,
 	.intsGppMaskHigh		= 0,
@@ -271,13 +284,41 @@ MV_BOARD_INFO rdNas88f68XX_board_info = {
 	.norFlashReadParams		= 0,
 	.norFlashWriteParams		= 0,
 	/* Enable modules auto-detection. */
-	.configAutoDetect		= MV_FALSE
+	.configAutoDetect		= MV_FALSE,
+	.numIoExp			= ARRSZ(ioExpNas),
+	.pIoExp				= ioExpNas
+};
+/*******************************************************************************
+ * A380 RD-WAP-88F68XX board */
+/*******************************************************************************/
+MV_BOARD_MPP_INFO rdWap88f68XXInfoBoardMppConfigValue[] = {
+	{ {
+		RD_88F68XX_MPP0_7,
+		RD_88F68XX_MPP8_15,
+		RD_WAP_88F68XX_MPP16_23,
+		RD_88F68XX_MPP24_31,
+		RD_88F68XX_MPP32_39,
+		RD_88F68XX_MPP40_47,
+		RD_88F68XX_MPP48_55,
+		RD_88F68XX_MPP56_63,
+	} }
+};
+
+struct MV_BOARD_IO_EXPANDER ioExpWap[] = {
+	{0, 6, 0xF4},
+	{0, 7, 0xC3},
+	{0, 2, 0x0B},
+	{0, 3, 0x18},
+	{1, 6, 0xE7},
+	{1, 7, 0xF9},
+	{1, 2, 0x18},
+	{1, 3, 0x04}
 };
-MV_BOARD_INFO rdAP88f68XX_board_info = {
+MV_BOARD_INFO rdWAP88f68XX_board_info = {
 	.boardName			= "RD-AP-88F6820-DDR3",
-	.numBoardMppTypeValue	= ARRSZ(rd88f68XXInfoBoardMppConfigValue),
+	.numBoardMppTypeValue	= ARRSZ(rdWap88f68XXInfoBoardMppConfigValue),
 	.pBoardModTypeValue		= NULL,
-	.pBoardMppConfigValue	= rd88f68XXInfoBoardMppConfigValue,
+	.pBoardMppConfigValue	= rdWap88f68XXInfoBoardMppConfigValue,
 	.intsGppMaskLow			= 0,
 	.intsGppMaskMid			= 0,
 	.intsGppMaskHigh		= 0,
@@ -320,7 +361,9 @@ MV_BOARD_INFO rdAP88f68XX_board_info = {
 	.norFlashReadParams		= 0,
 	.norFlashWriteParams		= 0,
 	/* Enable modules auto-detection. */
-	.configAutoDetect		= MV_FALSE
+	.configAutoDetect		= MV_FALSE,
+	.numIoExp			= ARRSZ(ioExpWap),
+	.pIoExp				= ioExpWap
 };
 
 
@@ -414,7 +457,9 @@ MV_BOARD_INFO A380_customer_board_info = {
 	.nandFlashControl		= A380_CUSTOMER_BOARD_NAND_CONTROL,
 	/* NOR init params */
 	.norFlashReadParams		= A380_CUSTOMER_BOARD_NOR_READ_PARAMS,
-	.norFlashWriteParams		= A380_CUSTOMER_BOARD_NOR_WRITE_PARAMS
+	.norFlashWriteParams		= A380_CUSTOMER_BOARD_NOR_WRITE_PARAMS,
+	.numIoExp			= 0,
+	.pIoExp				= NULL
 };
 
 /*
@@ -423,7 +468,7 @@ MV_BOARD_INFO A380_customer_board_info = {
 MV_BOARD_INFO *boardInfoTbl[] = {
 	&rdNas88f68XX_board_info,
 	&db88f68xx_board_info,
-	&rdAP88f68XX_board_info,
+	&rdWAP88f68XX_board_info,
 	&A380_customer_board_info
 };
 
diff --git a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h
index 23f7745..fc8391c 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h
+++ b/arch/arm/mach-armada38x/armada_38x_family/boardEnv/mvBoardEnvSpec.h
@@ -167,7 +167,8 @@
  */
 #define RD_88F68XX_MPP0_7               0x11111111
 #define RD_88F68XX_MPP8_15              0x11111111
-#define RD_88F68XX_MPP16_23             0x11244011
+#define RD_NAS_88F68XX_MPP16_23         0x11244011
+#define RD_WAP_88F68XX_MPP16_23         0x11243011
 #define RD_88F68XX_MPP24_31             0x22222111
 #define RD_88F68XX_MPP32_39             0x22200002
 #define RD_88F68XX_MPP40_47             0x30042022
diff --git a/arch/arm/mach-armada38x/armada_38x_family/ctrlEnv/mvCtrlEnvLib.c b/arch/arm/mach-armada38x/armada_38x_family/ctrlEnv/mvCtrlEnvLib.c
index 6a51d55..19f6bf8 100644
--- a/arch/arm/mach-armada38x/armada_38x_family/ctrlEnv/mvCtrlEnvLib.c
+++ b/arch/arm/mach-armada38x/armada_38x_family/ctrlEnv/mvCtrlEnvLib.c
@@ -356,6 +356,7 @@ MV_STATUS mvCtrlEnvInit(MV_VOID)
 	if (mvBoardConfigAutoDetectEnabled()) {
 		mvBoardInfoUpdate();
 	}
+	mvBoardIoExpanderUpdate();
 
 	mvCtrlSerdesConfigDetect();
 
-- 
1.7.5.4

