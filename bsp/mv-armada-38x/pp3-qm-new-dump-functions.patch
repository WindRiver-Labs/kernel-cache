From 30333b8f9a2dde5e431aa7d8478f6cf34039f33d Mon Sep 17 00:00:00 2001
From: Dovrat <dovrat@marvell.com>
Date: Wed, 23 Apr 2014 22:20:05 +0300
Subject: [PATCH 1585/1825] pp3: qm: new dump functions

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 53768f19702a4b46bef88f844c18e197432dc7e2

Change-Id: I83b5392d61e68b48bbc30afb7ae7eee5270084b8
Signed-off-by: Dovrat <dovrat@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/7180
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Yelena Krivosheev <yelena@marvell.com>
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Dmitri Epshtein <dima@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/marvell/pp3/qm/mv_qm.c      | 1008 +++++++++++++++++++++-
 drivers/net/ethernet/marvell/pp3/qm/mv_qm.h      |   52 ++-
 drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h |  196 +----
 3 files changed, 1079 insertions(+), 177 deletions(-)

diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
index 05954b9..a373182 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.c
@@ -339,7 +339,7 @@ int qm_packets_in_queues(u32 *status)
 
 	*status = 0;
 
-	for (queue = 0; queue < QM_QUEUE_MAX; queue++) {
+	for (queue = 0; queue <= QM_QUEUE_MAX; queue++) {
 		reg_base_address =      qm.ql.qlen;
 		reg_size   =   qm_reg_size.ql.qlen;
 		reg_offset = qm_reg_offset.ql.qlen * queue;
@@ -357,7 +357,7 @@ int qm_packets_in_queues(u32 *status)
 
 int qm_default_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 
 	rc = qm_ru_port_to_class_def_set();
 	if (rc != OK) {
@@ -430,7 +430,7 @@ int qm_default_set(void)
 
 int qm_ru_pool_sid_number_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 pool0_sid_num, pool1_sid_num;
 
 	pool0_sid_num = QM_POOL0_SID_NUM_DEF;
@@ -496,7 +496,7 @@ int qm_ru_pool_sid_number_set(u32 pool0_sid_num, u32 pool1_sid_num)
 
 int qm_ru_port_to_class_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 port_class, port_pool, input_port;
 
 	port_pool  = QM_INPUT_PORT_POOL_DEF;
@@ -584,7 +584,7 @@ int qm_ru_port_to_class_set(u32 input_port, u32 port_class, u32 port_pool)
 
 int qm_dqf_port_data_fifo_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 port_depth_arr[QM_PORT_MAX + 1];
 
 	port_depth_arr[0]  = QM_PORT_DEPTH_ARR_PPC0_DEF;	/* 2*144B for PPC0		*/
@@ -745,7 +745,7 @@ int qm_dqf_port_data_fifo_set(u32 *port_depth_arr)
 int qm_dqf_port_credit_thr_def_set(void)
 /*int qm_ru_port_to_class_def_set()*/
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 port_credit_thr_arr[QM_PORT_MAX + 1];
 
 	port_credit_thr_arr[0]  = 0;
@@ -816,7 +816,7 @@ int qm_dqf_port_credit_thr_set(u32 *port_credit_thr_arr)
 
 int qm_dqf_port_ppc_map_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 port_ppc_arr[QM_PORT_MAX + 1];
 	u32 port;
 
@@ -871,7 +871,7 @@ int qm_dqf_port_ppc_map_set(u32 *port_ppc, u32 port)
 
 int qm_dma_qos_attr_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 swf_awqos, rdma_awqos, hwf_qe_ce_awqos, hwf_sfh_pl_awqos;
 
 	swf_awqos        = QM_SWF_AWQOS_DEF;		/* 1 for QM_SWF_AWQOS_DEF        */
@@ -957,7 +957,7 @@ int qm_dma_qos_attr_set(u32 swf_awqos, u32 rdma_awqos, u32 hwf_qe_ce_awqos, u32
 
 int qm_dma_cache_attr_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 swf_awcache, rdma_awcache, hwf_qe_ce_awcache, hwf_sfh_pl_awcache;
 
 	swf_awcache        = QM_SWF_AWCACHE_DEF;		/* 11 for QM_SWF_AWQOS_DEF        */
@@ -1133,7 +1133,7 @@ int qm_dma_domain_attr_set(u32 swf_awdomain, u32 rdma_awdomain, u32 hwf_qe_ce_aw
 
 int qm_pfe_qos_attr_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 swf_arqos, rdma_arqos, hwf_qe_ce_arqos, hwf_sfh_pl_arqos;
 
 	swf_arqos        = QM_SWF_ARQOS_DEF;		/* 1 for QM_SWF_ARQOS_DEF        */
@@ -1299,7 +1299,7 @@ int qm_pfe_cache_attr_set(u32 swf_arcache, u32 rdma_arcache, u32 hwf_qe_ce_arcac
 
 int qm_pfe_domain_attr_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 swf_ardomain, rdma_ardomain, hwf_qe_ce_ardomain, hwf_sfh_pl_ardomain;
 
 	swf_ardomain        = QM_SWF_ARDOMAIN_DEF;			/* 1 for QM_SWF_ARDOMAIN_DEF        */
@@ -1379,7 +1379,7 @@ int qm_pfe_domain_attr_set(u32 swf_ardomain, u32 rdma_ardomain, u32 hwf_qe_ce_ar
 
 int qm_ql_q_profile_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 queue_profile, queue;
 
 	for (queue = 0; queue <= 191; queue++) {
@@ -1489,7 +1489,7 @@ int qm_ql_q_profile_set(u32 queue_profile, u32 queue)
 
 int qm_ql_thr_def_set(void)
 {
-	int rc = !OK;
+	int rc = OK;
 	u32 low_threshold, pause_threshold, high_threshold, traffic_source;
 
 /*
@@ -1918,6 +1918,988 @@ int	qm_ru_class_cmd_set(u32 host, u32 host_class, u32 host_sid, u32 cmd)
 	return rc;
 }
 
+/* QM Debug functions */
+int qm_errors_dump(void)
+{
+	int rc = OK;
+	struct ql_ecc_error_cause       reg_ql_ecc_error_cause;
+	struct ql_internal_error_cause  reg_ql_internal_error_cause;
+	struct pfe_ecc_error_cause      reg_pfe_ecc_error_cause;
+	struct pfe_internal_error_cause reg_pfe_internal_error_cause;
+	struct dma_ecc_error_cause      reg_dma_ecc_error_cause;
+	struct dma_internal_error_cause reg_dma_internal_error_cause;
+	struct dqf_dqf_intr_cause       reg_dqf_intr_cause;
+	struct dqf_dqf_ser_summary_intr_cause       reg_dqf_ser_summary_intr_cause;
+	struct dqf_write_to_full_error_intr_cause   reg_write_to_full_error_intr_cause;
+	struct dqf_read_from_empty_error_intr_cause reg_read_from_empty_error_intr_cause;
+	struct dqf_wrong_axi_rd_error_intr_cause    reg_wrong_axi_rd_error_intr_cause;
+	struct reorder_ru_ser_error_cause           reg_ru_ser_error_cause;
+	u32 reg_base_address, reg_size, reg_offset;
+
+	pr_info("\n-------------- QL  errors dump -----------\n");
+
+	reg_base_address =      qm.ql.ECC_error_cause;
+	reg_size   =   qm_reg_size.ql.ECC_error_cause;
+	reg_offset = qm_reg_offset.ql.ECC_error_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_ql_ecc_error_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t ql_ecc_error_cause.qm_ql_ecc_interrupt  = 0x%08X\n",
+				reg_ql_ecc_error_cause.qm_ql_ecc_interrupt);
+	pr_info("\t ql_ecc_error_cause.qptr_ecc_error  = 0x%08X\n",
+				reg_ql_ecc_error_cause.qptr_ecc_error);
+	pr_info("\t ql_ecc_error_cause.qlen_ecc_error  = 0x%08X\n",
+				reg_ql_ecc_error_cause.qlen_ecc_error);
+
+	reg_base_address =      qm.ql.Internal_error_cause;
+	reg_size   =   qm_reg_size.ql.Internal_error_cause;
+	reg_offset = qm_reg_offset.ql.Internal_error_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_ql_internal_error_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t ql_internal_error_cause.qm_ql_internal_error_interrupt  = 0x%08X\n",
+				reg_ql_internal_error_cause.qm_ql_internal_error_interrupt);
+	pr_info("\t ql_internal_error_cause.reg_file_error  = 0x%08X\n",
+				reg_ql_internal_error_cause.reg_file_error);
+
+	pr_info("\n-------------- PFE errors dump -----------\n");
+
+	reg_base_address =      qm.pfe.ecc_error_cause;
+	reg_size   =   qm_reg_size.pfe.ecc_error_cause;
+	reg_offset = qm_reg_offset.pfe.ecc_error_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_pfe_ecc_error_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_ecc_error_cause.qm_pfe_ecc_interrupt  = 0x%08X\n",
+				reg_pfe_ecc_error_cause.qm_pfe_ecc_interrupt);
+	pr_info("\t pfe_ecc_error_cause.qflush_ecc_error  = 0x%08X\n",
+				reg_pfe_ecc_error_cause.qflush_ecc_error);
+	pr_info("\t pfe_ecc_error_cause.qece_ecc_error  = 0x%08X\n",
+				reg_pfe_ecc_error_cause.qece_ecc_error);
+	pr_info("\t pfe_ecc_error_cause.macsdata_ecc_error  = 0x%08X\n",
+				reg_pfe_ecc_error_cause.macsdata_ecc_error);
+
+	reg_base_address =      qm.pfe.internal_error_cause;
+	reg_size   =   qm_reg_size.pfe.internal_error_cause;
+	reg_offset = qm_reg_offset.pfe.internal_error_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_pfe_internal_error_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_internal_error_cause.qm_pfe_internal_error_interrupt  = 0x%08X\n",
+				reg_pfe_internal_error_cause.qm_pfe_internal_error_interrupt);
+	pr_info("\t pfe_internal_error_cause.reg_file_error  = 0x%08X\n",
+				reg_pfe_internal_error_cause.reg_file_error);
+	pr_info("\t pfe_internal_error_cause.dram_response_error  = 0x%08X\n",
+				reg_pfe_internal_error_cause.dram_response_error);
+	pr_info("\t pfe_internal_error_cause.last_port_not_last_queue_error  = 0x%08X\n",
+				reg_pfe_internal_error_cause.last_port_not_last_queue_error);
+	pr_info("\t pfe_internal_error_cause.gpm_cl_error  = 0x%08X\n",
+				reg_pfe_internal_error_cause.gpm_cl_error);
+	pr_info("\t pfe_internal_error_cause.deq_mode_error  = 0x%08X\n",
+				reg_pfe_internal_error_cause.deq_mode_error);
+	pr_info("\t pfe_internal_error_cause.no_descriptor_mode_for_dram_q_error  = 0x%08X\n",
+				reg_pfe_internal_error_cause.no_descriptor_mode_for_dram_q_error);
+	pr_info("\t pfe_internal_error_cause.pckt_len_grtr_cfh_len_plus_descr_error  = 0x%08X\n",
+				reg_pfe_internal_error_cause.pckt_len_grtr_cfh_len_plus_descr_error);
+
+	pr_info("\n-------------- DMA errors dump -----------\n");
+
+	reg_base_address =      qm.dma.ecc_error_cause;
+	reg_size   =   qm_reg_size.dma.ecc_error_cause;
+	reg_offset = qm_reg_offset.dma.ecc_error_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_dma_ecc_error_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_ecc_error_cause.qm_dma_ecc_interrupt  = 0x%08X\n",
+				reg_dma_ecc_error_cause.qm_dma_ecc_interrupt);
+	pr_info("\t dma_ecc_error_cause.ceram_mac_ecc_error  = 0x%08X\n",
+				reg_dma_ecc_error_cause.ceram_mac_ecc_error);
+	pr_info("\t dma_ecc_error_cause.ceram_ppe_ecc_error  = 0x%08X\n",
+				reg_dma_ecc_error_cause.ceram_ppe_ecc_error);
+	pr_info("\t dma_ecc_error_cause.gpm_pl_ecc_error  = 0x%08X\n",
+				reg_dma_ecc_error_cause.gpm_pl_ecc_error);
+	pr_info("\t dma_ecc_error_cause.gpm_qe_ecc_error  = 0x%08X\n",
+				reg_dma_ecc_error_cause.gpm_qe_ecc_error);
+	pr_info("\t dma_ecc_error_cause.qeram_ecc_error  = 0x%08X\n",
+				reg_dma_ecc_error_cause.qeram_ecc_error);
+	pr_info("\t dma_ecc_error_cause.dram_fifo_ecc_error  = 0x%08X\n",
+				reg_dma_ecc_error_cause.dram_fifo_ecc_error);
+
+	reg_base_address =      qm.dma.internal_error_cause;
+	reg_size   =   qm_reg_size.dma.internal_error_cause;
+	reg_offset = qm_reg_offset.dma.internal_error_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_dma_internal_error_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_internal_error_cause.qm_dma_internal_error_interrupt  = 0x%08X\n",
+				reg_dma_internal_error_cause.qm_dma_internal_error_interrupt);
+	pr_info("\t dma_internal_error_cause.reg_file_error  = 0x%08X\n",
+				reg_dma_internal_error_cause.reg_file_error);
+	pr_info("\t dma_internal_error_cause.dram_response_error  = 0x%08X\n",
+				reg_dma_internal_error_cause.dram_response_error);
+	pr_info("\t dma_internal_error_cause.mac_enq_with_wrong_source_id_error  = 0x%08X\n",
+				reg_dma_internal_error_cause.mac_enq_with_wrong_source_id_error);
+	pr_info("\t dma_internal_error_cause.ppe_enq_with_wrong_source_id_error  = 0x%08X\n",
+				reg_dma_internal_error_cause.ppe_enq_with_wrong_source_id_error);
+
+	pr_info("\n-------------- DQF errors dump -----------\n");
+
+	reg_base_address =      qm.dqf.dqf_itnr_cause;
+	reg_size   =   qm_reg_size.dqf.dqf_itnr_cause;
+	reg_offset = qm_reg_offset.dqf.dqf_itnr_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_dqf_intr_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dqf_intr_cause.dqf_intr_sum  = 0x%08X\n",
+				reg_dqf_intr_cause.dqf_intr_sum);
+	pr_info("\t dqf_intr_cause.dqf_ser_sum  = 0x%08X\n",
+				reg_dqf_intr_cause.dqf_ser_sum);
+	pr_info("\t dqf_intr_cause.write_to_full_err_sum  = 0x%08X\n",
+				reg_dqf_intr_cause.write_to_full_err_sum);
+	pr_info("\t dqf_intr_cause.read_from_empty_err_sum  = 0x%08X\n",
+				reg_dqf_intr_cause.read_from_empty_err_sum);
+	pr_info("\t dqf_intr_cause.wrong_axi_rd_err_sum  = 0x%08X\n",
+				reg_dqf_intr_cause.wrong_axi_rd_err_sum);
+	pr_info("\t dqf_intr_cause.dqf_cs_calc_err  = 0x%08X\n",
+				reg_dqf_intr_cause.dqf_cs_calc_err);
+	pr_info("\t dqf_intr_cause.dqf_cs_inp_ctrl_err  = 0x%08X\n",
+				reg_dqf_intr_cause.dqf_cs_inp_ctrl_err);
+	pr_info("\t dqf_intr_cause.dqf_rf_error  = 0x%08X\n",
+				reg_dqf_intr_cause.dqf_rf_error);
+
+	reg_base_address =      qm.dqf.dqf_ser_summary_intr_cause;
+	reg_size   =   qm_reg_size.dqf.dqf_ser_summary_intr_cause;
+	reg_offset = qm_reg_offset.dqf.dqf_ser_summary_intr_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_dqf_ser_summary_intr_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dqf_ser_summary_intr_cause.ser_summary_intr_sum  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ser_summary_intr_sum);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_0  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_0);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_1  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_1);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_2  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_2);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_3  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_3);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_4  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_4);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_5  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_5);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_6  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_6);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_7  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_7);
+	pr_info("\t dqf_ser_summary_intr_cause.ppe_data_ser_error_8  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.ppe_data_ser_error_8);
+	pr_info("\t dqf_ser_summary_intr_cause.macs_csptr_ser_error_0  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.macs_csptr_ser_error_0);
+	pr_info("\t dqf_ser_summary_intr_cause.macs_csptr_ser_error_1  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.macs_csptr_ser_error_1);
+	pr_info("\t dqf_ser_summary_intr_cause.macs_csres_ser_error_0  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.macs_csres_ser_error_0);
+	pr_info("\t dqf_ser_summary_intr_cause.macs_csres_ser_error_1  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.macs_csres_ser_error_1);
+	pr_info("\t dqf_ser_summary_intr_cause.macs_data_ser_error  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.macs_data_ser_error);
+	pr_info("\t dqf_ser_summary_intr_cause.macs_desc_ser_error  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.macs_desc_ser_error);
+	pr_info("\t dqf_ser_summary_intr_cause.macs_d2cs_ser_error  = 0x%08X\n",
+				reg_dqf_ser_summary_intr_cause.macs_d2cs_ser_error);
+
+	reg_base_address =      qm.dqf.write_to_full_error_intr_cause;
+	reg_size   =   qm_reg_size.dqf.write_to_full_error_intr_cause;
+	reg_offset = qm_reg_offset.dqf.write_to_full_error_intr_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_write_to_full_error_intr_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_intr_sum  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_intr_sum);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p0  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p0);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p1  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p1);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p2  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p2);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p3  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p3);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p4  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p4);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p5  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p5);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p6  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p6);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p7  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p7);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p8  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p8);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p9  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p9);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p10  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p10);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p11  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p11);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p12  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p12);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p13  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p13);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p14  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p14);
+	pr_info("\t dqf_write_to_full_error_intr_cause.write_to_full_error_p15  = 0x%08X\n",
+				reg_write_to_full_error_intr_cause.write_to_full_error_p15);
+
+	reg_base_address =      qm.dqf.read_from_empty_error_intr_cause;
+	reg_size   =   qm_reg_size.dqf.read_from_empty_error_intr_cause;
+	reg_offset = qm_reg_offset.dqf.read_from_empty_error_intr_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_read_from_empty_error_intr_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_intr_sum  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_intr_sum);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p0  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p0);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p1  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p1);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p2  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p2);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p3  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p3);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p4  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p4);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p5  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p5);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p6  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p6);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p7  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p7);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p8  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p8);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p9  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p9);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p10  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p10);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p11  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p11);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p12  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p12);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p13  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p13);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p14  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p14);
+	pr_info("\t dqf_read_from_empty_error_intr_cause.read_from_empty_error_p15  = 0x%08X\n",
+				reg_read_from_empty_error_intr_cause.read_from_empty_error_p15);
+
+	reg_base_address =      qm.dqf.wrong_axi_rd_error_intr_cause;
+	reg_size   =   qm_reg_size.dqf.wrong_axi_rd_error_intr_cause;
+	reg_offset = qm_reg_offset.dqf.wrong_axi_rd_error_intr_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_wrong_axi_rd_error_intr_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_intr_sum   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_intr_sum);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p0   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p0);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p1   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p1);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p2   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p2);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p3   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p3);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p4   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p4);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p5   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p5);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p6   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p6);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p7   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p7);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p8   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p8);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p9   = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p9);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p10  = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p10);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p11  = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p11);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p12  = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p12);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p13  = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p13);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p14  = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p14);
+	pr_info("\t dqf_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p15  = 0x%08X\n",
+				reg_wrong_axi_rd_error_intr_cause.wrong_axi_rd_error_p15);
+
+	pr_info("\n-------------- REORDER errors dump -----------\n");
+
+	reg_base_address =      qm.reorder.ru_ser_error_cause;
+	reg_size   =   qm_reg_size.reorder.ru_ser_error_cause;
+	reg_offset = qm_reg_offset.reorder.ru_ser_error_cause * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_ru_ser_error_cause);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t reorder_ru_ser_error_cause.ru_ser_error_interrupt  = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_ser_error_interrupt);
+	pr_info("\t reorder_ru_ser_error_cause.ru_qe_ser_error         = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_qe_ser_error);
+	pr_info("\t reorder_ru_ser_error_cause.ru_class_ser_error      = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_class_ser_error);
+	pr_info("\t reorder_ru_ser_error_cause.ru_tasks_ser_error      = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_tasks_ser_error);
+	pr_info("\t reorder_ru_ser_error_cause.ru_ptr2next_ser_error   = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_ptr2next_ser_error);
+	pr_info("\t reorder_ru_ser_error_cause.ru_sid_fifo_ser_error   = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_sid_fifo_ser_error);
+	pr_info("\t reorder_ru_ser_error_cause.ru_port2class_ser_error = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_port2class_ser_error);
+	pr_info("\t reorder_ru_ser_error_cause.ru_rf_error             = 0x%08X\n",
+				reg_ru_ser_error_cause.ru_rf_error);
+
+	return rc;
+}
+
+int qm_global_dump(void)
+{
+	int rc = OK;
+	struct ql_low_threshold              reg_low_threshold;
+	struct ql_pause_threshold            reg_pause_threshold;
+	struct ql_high_threshold             reg_high_threshold;
+	struct ql_traffic_source             reg_traffic_source;
+	struct pfe_qece_dram_base_address_hi         reg_qece_dram_base_address_hi;
+	struct pfe_pyld_dram_base_address_hi         reg_pyld_dram_base_address_hi;
+	struct pfe_qece_dram_base_address_lo         reg_qece_dram_base_address_lo;
+	struct pfe_pyld_dram_base_address_lo         reg_pyld_dram_base_address_lo;
+	struct pfe_QM_VMID                           reg_qm_vmid;
+	struct pfe_port_flush                        reg_port_flush;
+	struct pfe_AXI_read_attributes_for_swf_mode  reg_axi_read_attributes_for_swf_mode;
+	struct pfe_AXI_read_attributes_for_rdma_mode reg_axi_read_attributes_for_rdma_mode;
+	struct pfe_AXI_read_attributes_for_hwf_qece  reg_axi_read_attributes_for_hwf_qece;
+	struct pfe_AXI_read_attributes_for_hwf_pyld  reg_axi_read_attributes_for_hwf_pyld;
+	struct dma_gpm_thresholds			          reg_gpm_thresholds;
+	struct dma_dram_thresholds			          reg_dram_thresholds;
+	struct dma_AXI_write_attributes_for_swf_mode  reg_axi_write_attributes_for_swf_mode;
+	struct dma_AXI_write_attributes_for_rdma_mode reg_axi_write_attributes_for_rdma_mode;
+	struct dma_AXI_write_attributes_for_hwf_qece  reg_axi_write_attributes_for_hwf_qece;
+	struct dma_AXI_write_attributes_for_hwf_pyld  reg_axi_write_attributes_for_hwf_pyld;
+	struct dma_DRAM_VMID				          reg_dram_vmid;
+	struct dma_idle_status                        reg_idle_status;
+	struct reorder_ru_pool       reg_ru_pool;
+	struct reorder_ru_class_head reg_ru_class_head;
+
+	u32 reg_base_address, reg_size, reg_offset;
+	u32 t;
+
+	pr_info("\n-------------- QL  global registers dump -----------\n");
+
+	for (t = 0; t < QM_QUEUE_PROFILE_MAX; t++) {
+		reg_base_address =      qm.ql.low_threshold;
+		reg_size   =   qm_reg_size.ql.low_threshold;
+		reg_offset = qm_reg_offset.ql.low_threshold * t;
+
+		rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_low_threshold);
+		if (rc != OK)
+			return rc;
+
+		pr_info("\t ql_low_threshold.low_threshold  = 0x%08X\n",
+					reg_low_threshold.low_threshold);
+
+		reg_base_address =      qm.ql.pause_threshold;
+		reg_size   =   qm_reg_size.ql.pause_threshold;
+		reg_offset = qm_reg_offset.ql.pause_threshold * t;
+
+		rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_pause_threshold);
+		if (rc != OK)
+			return rc;
+
+		pr_info("\t ql_pause_threshold.pause_threshold  = 0x%08X\n",
+					reg_pause_threshold.pause_threshold);
+
+		reg_base_address =      qm.ql.high_threshold;
+		reg_size   =   qm_reg_size.ql.high_threshold;
+		reg_offset = qm_reg_offset.ql.high_threshold * t;
+
+		rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_high_threshold);
+		if (rc != OK)
+			return rc;
+
+		pr_info("\t ql_high_threshold.high_threshold  = 0x%08X\n",
+					reg_high_threshold.high_threshold);
+
+		reg_base_address =      qm.ql.traffic_source;
+		reg_size   =   qm_reg_size.ql.traffic_source;
+		reg_offset = qm_reg_offset.ql.traffic_source * t;
+
+		rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_traffic_source);
+		if (rc != OK)
+			return rc;
+
+		pr_info("\t ql_traffic_source.traffic_source  = 0x%08X\n",
+					reg_traffic_source.traffic_source);
+	}
+
+	pr_info("\n-------------- PFE global registers dump -----------\n");
+
+	reg_base_address =      qm.pfe.qece_dram_base_address_hi;
+	reg_size   =   qm_reg_size.pfe.qece_dram_base_address_hi;
+	reg_offset = qm_reg_offset.pfe.qece_dram_base_address_hi * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_qece_dram_base_address_hi);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_qece_dram_base_address_hi.qece_dram_base_address_hi  = 0x%08X\n",
+				reg_qece_dram_base_address_hi.qece_dram_base_address_hi);
+
+	reg_base_address =      qm.pfe.pyld_dram_base_address_hi;
+	reg_size   =   qm_reg_size.pfe.pyld_dram_base_address_hi;
+	reg_offset = qm_reg_offset.pfe.pyld_dram_base_address_hi * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_pyld_dram_base_address_hi);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_pyld_dram_base_address_hi.pyld_dram_base_address_hi  = 0x%08X\n",
+				reg_pyld_dram_base_address_hi.pyld_dram_base_address_hi);
+
+	reg_base_address =      qm.pfe.qece_dram_base_address_lo;
+	reg_size   =   qm_reg_size.pfe.qece_dram_base_address_lo;
+	reg_offset = qm_reg_offset.pfe.qece_dram_base_address_lo * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_qece_dram_base_address_lo);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_qece_dram_base_address_lo.qece_dram_base_address_low  = 0x%08X\n",
+				reg_qece_dram_base_address_lo.qece_dram_base_address_low);
+
+	reg_base_address =      qm.pfe.pyld_dram_base_address_lo;
+	reg_size   =   qm_reg_size.pfe.pyld_dram_base_address_lo;
+	reg_offset = qm_reg_offset.pfe.pyld_dram_base_address_lo * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_pyld_dram_base_address_lo);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_pyld_dram_base_address_lo.pyld_dram_base_address_low  = 0x%08X\n",
+				reg_pyld_dram_base_address_lo.pyld_dram_base_address_low);
+
+	reg_base_address =      qm.pfe.QM_VMID;
+	reg_size   =   qm_reg_size.pfe.QM_VMID;
+	reg_offset = qm_reg_offset.pfe.QM_VMID * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_qm_vmid);
+	if (rc != OK)
+		return rc;
+	pr_info("\t pfe_qm_vmid.vmid  = 0x%08X\n",
+				reg_qm_vmid.VMID);
+
+	reg_base_address =      qm.pfe.port_flush;
+	reg_size   =   qm_reg_size.pfe.port_flush;
+	reg_offset = qm_reg_offset.pfe.port_flush * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_port_flush);
+	if (rc != OK)
+		return rc;
+	pr_info("\t pfe_port_flush.port_flush  = 0x%08X\n",
+				reg_port_flush.port_flush);
+
+	reg_base_address =      qm.pfe.AXI_read_attributes_for_swf_mode;
+	reg_size   =   qm_reg_size.pfe.AXI_read_attributes_for_swf_mode;
+	reg_offset = qm_reg_offset.pfe.AXI_read_attributes_for_swf_mode * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_read_attributes_for_swf_mode);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_axi_read_attributes_for_swf_mode.swf_ardomain  = 0x%08X\n",
+				reg_axi_read_attributes_for_swf_mode.swf_ardomain);
+	pr_info("\t pfe_axi_read_attributes_for_swf_mode.swf_arcache  = 0x%08X\n",
+				reg_axi_read_attributes_for_swf_mode.swf_arcache);
+	pr_info("\t pfe_axi_read_attributes_for_swf_mode.swf_arqos  = 0x%08X\n",
+				reg_axi_read_attributes_for_swf_mode.swf_arqos);
+
+	reg_base_address =      qm.pfe.AXI_read_attributes_for_rdma_mode;
+	reg_size   =   qm_reg_size.pfe.AXI_read_attributes_for_rdma_mode;
+	reg_offset = qm_reg_offset.pfe.AXI_read_attributes_for_rdma_mode * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_read_attributes_for_rdma_mode);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_axi_read_attributes_for_rdma_mode.rdma_ardomain  = 0x%08X\n",
+				reg_axi_read_attributes_for_rdma_mode.rdma_ardomain);
+	pr_info("\t pfe_axi_read_attributes_for_rdma_mode.rdma_arcache  = 0x%08X\n",
+				reg_axi_read_attributes_for_rdma_mode.rdma_arcache);
+	pr_info("\t pfe_axi_read_attributes_for_rdma_mode.rdma_arqos  = 0x%08X\n",
+				reg_axi_read_attributes_for_rdma_mode.rdma_arqos);
+
+	reg_base_address =      qm.pfe.AXI_read_attributes_for_hwf_qece;
+	reg_size   =   qm_reg_size.pfe.AXI_read_attributes_for_hwf_qece;
+	reg_offset = qm_reg_offset.pfe.AXI_read_attributes_for_hwf_qece * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_read_attributes_for_hwf_qece);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_axi_read_attributes_for_hwf_qece.qece_ardomain  = 0x%08X\n",
+				reg_axi_read_attributes_for_hwf_qece.qece_ardomain);
+	pr_info("\t pfe_axi_read_attributes_for_hwf_qece.qece_arcache  = 0x%08X\n",
+				reg_axi_read_attributes_for_hwf_qece.qece_arcache);
+	pr_info("\t pfe_axi_read_attributes_for_hwf_qece.qece_arqos  = 0x%08X\n",
+				reg_axi_read_attributes_for_hwf_qece.qece_arqos);
+
+	reg_base_address =      qm.pfe.AXI_read_attributes_for_hwf_pyld;
+	reg_size   =   qm_reg_size.pfe.AXI_read_attributes_for_hwf_pyld;
+	reg_offset = qm_reg_offset.pfe.AXI_read_attributes_for_hwf_pyld * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_read_attributes_for_hwf_pyld);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_axi_read_attributes_for_hwf_pyld.pyld_ardomain  = 0x%08X\n",
+				reg_axi_read_attributes_for_hwf_pyld.pyld_ardomain);
+	pr_info("\t pfe_axi_read_attributes_for_hwf_pyld.pyld_arcache  = 0x%08X\n",
+				reg_axi_read_attributes_for_hwf_pyld.pyld_arcache);
+	pr_info("\t pfe_axi_read_attributes_for_hwf_pyld.pyld_arqos  = 0x%08X\n",
+				reg_axi_read_attributes_for_hwf_pyld.pyld_arqos);
+
+	pr_info("\n-------------- DMA global registers dump -----------\n");
+
+	reg_base_address =      qm.dma.gpm_thresholds;
+	reg_size   =   qm_reg_size.dma.gpm_thresholds;
+	reg_offset = qm_reg_offset.dma.gpm_thresholds * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_gpm_thresholds);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_gpm_thresholds.gpm_pl_pool_low_bp  = 0x%08X\n",
+				reg_gpm_thresholds.gpm_pl_pool_low_bp);
+	pr_info("\t dma_gpm_thresholds.gpm_pl_pool_high_bp  = 0x%08X\n",
+				reg_gpm_thresholds.gpm_pl_pool_high_bp);
+	pr_info("\t dma_gpm_thresholds.gpm_qe_pool_low_bp  = 0x%08X\n",
+				reg_gpm_thresholds.gpm_qe_pool_low_bp);
+	pr_info("\t dma_gpm_thresholds.gpm_qe_pool_high_bp  = 0x%08X\n",
+				reg_gpm_thresholds.gpm_qe_pool_high_bp);
+
+	reg_base_address =      qm.dma.dram_thresholds;
+	reg_size   =   qm_reg_size.dma.dram_thresholds;
+	reg_offset = qm_reg_offset.dma.dram_thresholds * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_dram_thresholds);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_dram_thresholds.dram_pl_pool_low_bp  = 0x%08X\n",
+				reg_dram_thresholds.dram_pl_pool_low_bp);
+	pr_info("\t dma_dram_thresholds.dram_pl_pool_high_bp  = 0x%08X\n",
+				reg_dram_thresholds.dram_pl_pool_high_bp);
+	pr_info("\t dma_dram_thresholds.dram_qe_pool_low_bp  = 0x%08X\n",
+				reg_dram_thresholds.dram_qe_pool_low_bp);
+	pr_info("\t dma_dram_thresholds.dram_qe_pool_high_bp  = 0x%08X\n",
+				reg_dram_thresholds.dram_qe_pool_high_bp);
+
+	reg_base_address =      qm.dma.AXI_write_attributes_for_swf_mode;
+	reg_size   =   qm_reg_size.dma.AXI_write_attributes_for_swf_mode;
+	reg_offset = qm_reg_offset.dma.AXI_write_attributes_for_swf_mode * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_write_attributes_for_swf_mode);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_axi_write_attributes_for_swf_mode.swf_awdomain  = 0x%08X\n",
+				reg_axi_write_attributes_for_swf_mode.swf_awdomain);
+	pr_info("\t dma_axi_write_attributes_for_swf_mode.swf_awcache  = 0x%08X\n",
+				reg_axi_write_attributes_for_swf_mode.swf_awcache);
+	pr_info("\t dma_axi_write_attributes_for_swf_mode.swf_awqos  = 0x%08X\n",
+				reg_axi_write_attributes_for_swf_mode.swf_awqos);
+
+	reg_base_address =      qm.dma.AXI_write_attributes_for_rdma_mode;
+	reg_size   =   qm_reg_size.dma.AXI_write_attributes_for_rdma_mode;
+	reg_offset = qm_reg_offset.dma.AXI_write_attributes_for_rdma_mode * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_write_attributes_for_rdma_mode);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_axi_write_attributes_for_rdma_mode.rdma_awdomain  = 0x%08X\n",
+				reg_axi_write_attributes_for_rdma_mode.rdma_awdomain);
+	pr_info("\t dma_axi_write_attributes_for_rdma_mode.rdma_awcache  = 0x%08X\n",
+				reg_axi_write_attributes_for_rdma_mode.rdma_awcache);
+	pr_info("\t dma_axi_write_attributes_for_rdma_mode.rdma_awqos  = 0x%08X\n",
+				reg_axi_write_attributes_for_rdma_mode.rdma_awqos);
+
+	reg_base_address =      qm.dma.AXI_write_attributes_for_hwf_qece;
+	reg_size   =   qm_reg_size.dma.AXI_write_attributes_for_hwf_qece;
+	reg_offset = qm_reg_offset.dma.AXI_write_attributes_for_hwf_qece * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_write_attributes_for_hwf_qece);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_axi_write_attributes_for_hwf_qece.qece_awdomain  = 0x%08X\n",
+				reg_axi_write_attributes_for_hwf_qece.qece_awdomain);
+	pr_info("\t dma_axi_write_attributes_for_hwf_qece.qece_awcache  = 0x%08X\n",
+				reg_axi_write_attributes_for_hwf_qece.qece_awcache);
+	pr_info("\t dma_axi_write_attributes_for_hwf_qece.qece_awqos  = 0x%08X\n",
+				reg_axi_write_attributes_for_hwf_qece.qece_awqos);
+
+	reg_base_address =      qm.dma.AXI_write_attributes_for_hwf_pyld;
+	reg_size   =   qm_reg_size.dma.AXI_write_attributes_for_hwf_pyld;
+	reg_offset = qm_reg_offset.dma.AXI_write_attributes_for_hwf_pyld * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_axi_write_attributes_for_hwf_pyld);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_axi_write_attributes_for_hwf_pyld.pyld_awdomain  = 0x%08X\n",
+				reg_axi_write_attributes_for_hwf_pyld.pyld_awdomain);
+	pr_info("\t dma_axi_write_attributes_for_hwf_pyld.pyld_awcache  = 0x%08X\n",
+				reg_axi_write_attributes_for_hwf_pyld.pyld_awcache);
+	pr_info("\t dma_axi_write_attributes_for_hwf_pyld.pyld_awqos  = 0x%08X\n",
+				reg_axi_write_attributes_for_hwf_pyld.pyld_awqos);
+
+	reg_base_address =      qm.dma.DRAM_VMID;
+	reg_size   =   qm_reg_size.dma.DRAM_VMID;
+	reg_offset = qm_reg_offset.dma.DRAM_VMID * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_dram_vmid);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_dram_vmid.dram_vmid  = 0x%08X\n",
+				reg_dram_vmid.dram_vmid);
+
+	reg_base_address =      qm.dma.idle_status;
+	reg_size   =   qm_reg_size.dma.idle_status;
+	reg_offset = qm_reg_offset.dma.idle_status * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_idle_status);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_idle_status.gpm_pl_cache_is_empty  = 0x%08X\n",
+				reg_idle_status.gpm_pl_cache_is_empty);
+	pr_info("\t dma_idle_status.gpm_pl_cache_is_full  = 0x%08X\n",
+				reg_idle_status.gpm_pl_cache_is_full);
+	pr_info("\t dma_idle_status.gpm_qe_cache_is_empty  = 0x%08X\n",
+				reg_idle_status.gpm_qe_cache_is_empty);
+	pr_info("\t dma_idle_status.gpm_qe_cache_is_full  = 0x%08X\n",
+				reg_idle_status.gpm_qe_cache_is_full);
+	pr_info("\t dma_idle_status.dram_pl_cache_is_empty  = 0x%08X\n",
+				reg_idle_status.dram_pl_cache_is_empty);
+	pr_info("\t dma_idle_status.dram_pl_cache_is_full  = 0x%08X\n",
+				reg_idle_status.dram_pl_cache_is_full);
+	pr_info("\t dma_idle_status.dram_qe_cache_is_empty  = 0x%08X\n",
+				reg_idle_status.dram_qe_cache_is_empty);
+	pr_info("\t dma_idle_status.dram_qe_cache_is_full  = 0x%08X\n",
+				reg_idle_status.dram_qe_cache_is_full);
+	pr_info("\t dma_idle_status.dram_fifo_is_empty  = 0x%08X\n",
+				reg_idle_status.dram_fifo_is_empty);
+	pr_info("\t dma_idle_status.mac_axi_enq_channel_is_empty  = 0x%08X\n",
+				reg_idle_status.mac_axi_enq_channel_is_empty);
+	pr_info("\t dma_idle_status.nss_axi_enq_channel_is_empty  = 0x%08X\n",
+				reg_idle_status.NSS_axi_enq_channel_is_empty);
+	pr_info("\t dma_idle_status.gpm_ppe_read_fifo_is_empty  = 0x%08X\n",
+				reg_idle_status.gpm_ppe_read_fifo_is_empty);
+	pr_info("\t dma_idle_status.ppe_gpm_pl_write_fifo_is_empty  = 0x%08X\n",
+				reg_idle_status.ppe_gpm_pl_write_fifo_is_empty);
+	pr_info("\t dma_idle_status.ppe_gpm_qe_write_fifo_is_empty  = 0x%08X\n",
+				reg_idle_status.ppe_gpm_qe_write_fifo_is_empty);
+	pr_info("\t dma_idle_status.ppe_ru_read_fifo_is_empty  = 0x%08X\n",
+				reg_idle_status.ppe_ru_read_fifo_is_empty);
+	pr_info("\t dma_idle_status.ppe_ru_write_fifo_is_empty  = 0x%08X\n",
+				reg_idle_status.ppe_ru_write_fifo_is_empty);
+	pr_info("\t dma_idle_status.ru_ppe_read_fifo_is_empty  = 0x%08X\n",
+				reg_idle_status.ru_ppe_read_fifo_is_empty);
+	pr_info("\t dma_idle_status.dram_fifo_fsm_state_is_idle  = 0x%08X\n",
+				reg_idle_status.dram_fifo_fsm_state_is_idle);
+	pr_info("\t dma_idle_status.qeram_init_fsm_state_is_idle  = 0x%08X\n",
+				reg_idle_status.qeram_init_fsm_state_is_idle);
+
+	pr_info("\n-------------- REORDER global registers dump -----------\n");
+
+	reg_base_address =      qm.reorder.ru_pool;
+	reg_size   =   qm_reg_size.reorder.ru_pool;
+	reg_offset = qm_reg_offset.reorder.ru_pool * 0;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_ru_pool);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t reorder_ru_pool.sid_limit  = 0x%08X\n",
+				reg_ru_pool.sid_limit);
+
+	reg_base_address =      qm.reorder.ru_pool;
+	reg_size   =   qm_reg_size.reorder.ru_pool;
+	reg_offset = qm_reg_offset.reorder.ru_pool * 1;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_ru_pool);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t reorder_ru_pool.sid_limit  = 0x%08X\n",
+				reg_ru_pool.sid_limit);
+
+	for (t = QM_REORDER_CLASS_MIN; t <= QM_REORDER_CLASS_MAX; t++) {
+		reg_base_address =      qm.reorder.ru_class_head;
+		reg_size   =   qm_reg_size.reorder.ru_class_head;
+		reg_offset = qm_reg_offset.reorder.ru_class_head * t;
+
+		rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_ru_class_head);
+		if (rc != OK)
+			return rc;
+
+		pr_info("\t reorder_ru_class_head.ru_class_head  = 0x%08X\n",
+					reg_ru_class_head.ru_class_head);
+	}
+
+	return rc;
+}
+
+int qm_queue_dump(u32 queue)
+{
+	int rc = OK;
+	struct ql_qptr                 reg_qptr;
+	struct ql_qlen                 reg_qlen;
+	struct pfe_queue_flush         reg_queue_flush;
+	struct dma_q_memory_allocation reg_q_memory_allocation;
+
+	u32 reg_base_address, reg_size, reg_offset;
+
+	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX))
+		return rc;
+
+	pr_info("\n-------------- QM  queue dump for queue = 0x%08X -----------\n", queue);
+
+	pr_info("\n-------------- QL  queue dump -----------\n");
+
+	reg_base_address =      qm.ql.qptr;
+	reg_size   =   qm_reg_size.ql.qptr;
+	reg_offset = qm_reg_offset.ql.qptr * queue/8;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_qptr);
+	if (rc != OK)
+		return rc;
+
+	switch (queue % 8) {
+	case 0:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr0  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr0);
+		break;
+	case 1:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr1  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr1);
+		break;
+	case 2:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr2  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr2);
+		break;
+	case 3:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr3  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr3);
+		break;
+	case 4:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr4  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr4);
+		break;
+	case 5:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr5  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr5);
+		break;
+	case 6:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr6  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr6);
+		break;
+	case 7:
+		pr_info("\t ql_qptr.ql_qptr_entry.qptr7  = 0x%08X\n",
+					reg_qptr.reg_qptr_entry.qptr7);
+		break;
+	default:
+		return rc;
+	}
+
+	reg_base_address =      qm.ql.qlen;
+	reg_size   =   qm_reg_size.ql.qlen;
+	reg_offset = qm_reg_offset.ql.qlen * queue;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_qlen);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t ql_qlen.ql_ql_entry.ql  = 0x%08X\n",
+				reg_qlen.reg_ql_entry.ql);
+	pr_info("\t ql_qlen.ql_ql_entry.ql  = 0x%08X\n",
+				reg_qlen.reg_ql_entry.qstatus);
+
+	pr_info("\n-------------- PFE queue dump -----------\n");
+
+	reg_base_address =      qm.pfe.queue_flush;
+	reg_size   =   qm_reg_size.pfe.queue_flush;
+	reg_offset = qm_reg_offset.pfe.queue_flush * (queue/32); /* each queue is represented by one bit*/
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_queue_flush);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_queue_flush.queue_flush_bit_per_q  = 0x%08X\n",
+				reg_queue_flush.queue_flush_bit_per_q);
+
+	pr_info("\n-------------- DMA queue dump -----------\n");
+
+	reg_base_address =      qm.dma.Q_memory_allocation;
+	reg_size   =   qm_reg_size.dma.Q_memory_allocation;
+	reg_offset = qm_reg_offset.dma.Q_memory_allocation * (queue/32); /* each queue is represented by one bit*/
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_q_memory_allocation);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t dma_q_memory_allocation.q_memory  = 0x%08X\n",
+				reg_q_memory_allocation.q_memory);
+
+	return rc;
+}
+
+int qm_queue_no_traffic_dump(u32 queue)
+{
+	int rc = OK;
+	struct pfe_queue_qece reg_queue_qece;
+
+	u32 reg_base_address, reg_size, reg_offset;
+
+	if ((queue         <         QM_QUEUE_MIN) || (queue         >          QM_QUEUE_MAX))
+		return rc;
+
+	pr_info("\n-------------- QM  queue no traffic dump for queue = 0x%08X -----------\n", queue);
+
+	pr_info("\n-------------- PFE queue no traffic dump -----------\n");
+
+	reg_base_address =      qm.pfe.queue_qece;
+	reg_size   =   qm_reg_size.pfe.queue_qece;
+	reg_offset = qm_reg_offset.pfe.queue_qece * queue;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_queue_qece);
+	if (rc != OK)
+		return rc;
+
+	pr_info("\t pfe_queue_qece.qece = 0x%08X_%08X_%08X_%08X\n",
+		reg_queue_qece.qece_4, reg_queue_qece.qece_3, reg_queue_qece.qece_2, reg_queue_qece.qece_1);
+
+	return rc;
+}
+
+int qm_nempty_queue_len_get(void)
+{
+	int rc = OK;
+	struct ql_qlen reg_qlen;
+	u32 reg_base_address, reg_size, reg_offset;
+	u32 queue;
+
+	pr_info("\n-------------- QL  nempty queue len get -----------\n");
+
+	for (queue = QM_QUEUE_MIN; queue <= QM_QUEUE_MAX; queue++) {
+		reg_base_address =      qm.ql.qlen;
+		reg_size   =   qm_reg_size.ql.qlen;
+		reg_offset = qm_reg_offset.ql.qlen * queue;
+
+		rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_qlen);
+		if (rc != OK)
+			return rc;
+		if (reg_qlen.reg_ql_entry.ql > 0) {
+			pr_info("\n-------------- QL  nempty queue len get for queue = 0x%08X -----------\n", queue);
+			pr_info("\t ql_qlen.reg_ql_entry.ql  = 0x%08X\n",
+						reg_qlen.reg_ql_entry.ql);
+			pr_info("\t ql_qlen.reg_ql_entry.qstatus  = 0x%08X\n",
+						reg_qlen.reg_ql_entry.qstatus);
+		}
+	}
+
+	return rc;
+}
+
+int qm_dqf_port_dump(u32 port)
+{
+	int rc = OK;
+	u32 reg_base_address, reg_size, reg_offset;
+	struct dqf_Data_FIFO_params_p   reg_data_fifo_params_p;
+	struct dqf_Credit_Threshold_p   reg_credit_threshold_p;
+	struct dqf_PPC_port_map_p       reg_ppc_port_map_p;
+	struct dqf_data_fifo_pointers_p reg_data_fifo_pointers_p;
+
+	pr_info("\n-------------- DQF port dump for port = 0x%08X -----------\n", port);
+
+	reg_base_address =      qm.dqf.Data_FIFO_params_p;
+	reg_size   =   qm_reg_size.dqf.Data_FIFO_params_p;
+	reg_offset = qm_reg_offset.dqf.Data_FIFO_params_p * port;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_data_fifo_params_p);
+	if (rc != OK)
+		return rc;
+	pr_info("\t dqf_data_fifo_params_p.data_fifo_base_p  = 0x%08X\n",
+				reg_data_fifo_params_p.data_fifo_base_p);
+	pr_info("\t dqf_data_fifo_params_p.data_fifo_depth_p  = 0x%08X\n",
+				reg_data_fifo_params_p.data_fifo_depth_p);
+
+	reg_base_address =      qm.dqf.Credit_Threshold_p;
+	reg_size   =   qm_reg_size.dqf.Credit_Threshold_p;
+	reg_offset = qm_reg_offset.dqf.Credit_Threshold_p * port;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_credit_threshold_p);
+	if (rc != OK)
+		return rc;
+	pr_info("\t dqf_credit_threshold_p.credit_threshold_p  = 0x%08X\n",
+				reg_credit_threshold_p.Credit_Threshold_p);
+
+	reg_base_address =      qm.dqf.PPC_port_map_p;
+	reg_size   =   qm_reg_size.dqf.PPC_port_map_p;
+	reg_offset = qm_reg_offset.dqf.PPC_port_map_p * port;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_ppc_port_map_p);
+	if (rc != OK)
+		return rc;
+	pr_info("\t dqf_ppc_port_map_p.ppc_port_map_p  = 0x%08X\n",
+				reg_ppc_port_map_p.ppc_port_map_p);
+
+	reg_base_address =      qm.dqf.data_fifo_pointers_p;
+	reg_size   =   qm_reg_size.dqf.data_fifo_pointers_p;
+	reg_offset = qm_reg_offset.dqf.data_fifo_pointers_p * port;
+
+	rc = qm_register_read(reg_base_address, reg_offset, reg_size, (u32 *)&reg_data_fifo_pointers_p);
+	if (rc != OK)
+		return rc;
+	pr_info("\t dqf_data_fifo_pointers_p.data_fifo_wr_ptr_p  = 0x%08X\n",
+				reg_data_fifo_pointers_p.data_fifo_wr_ptr_p);
+	pr_info("\t dqf_data_fifo_pointers_p.data_fifo_rd_ptr_p  = 0x%08X\n",
+				reg_data_fifo_pointers_p.data_fifo_rd_ptr_p);
+
+	return rc;
+}
 
 int qm_register_read(u32 base_address, u32 offset, u32 wordsNumber, u32 *dataPtr)
 {
diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
index 401d6b6..f67bb26 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm.h
@@ -155,7 +155,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 /* Range Definitions */
 #define QM_QUEUE_MIN			         0	/*    0 */
-#define QM_QUEUE_MAX			0x00000200	/*  512 */
+#define QM_QUEUE_MAX			0x000001FF	/*  511 */
 #define QM_PORT_MIN				         0	/*    0 */
 #define QM_PORT_MAX				0x0000000F	/*   15 */
 /* PPC ports are ports 0 to 2 */
@@ -687,6 +687,56 @@ int	qm_ru_class_cmd_set(
 				u32 host_sid, /* sid is in the range 0 to 4k */
 				u32 cmd); /* cmd is either update or release */
 
+/*
+ *  Check error bits.
+ *  If set to 1, and print the error that occurred.
+ *  Bit 0 is always an OR of all the other errors.
+ *  So bit 0 with value 0 indicates there are no errors.
+ *  Return values:
+ *		0 - success
+*/
+int qm_errors_dump(void);
+
+/*
+ *  Print all global registers
+ *  Return values:
+ *		0 - success
+*/
+int qm_global_dump(void);
+
+/*
+ *  Print registers per queues 0 to 511
+ *  Return values:
+ *		0 - success
+*/
+int qm_queue_dump(u32 queue);
+
+/*
+ *  Print registers per queues 0 to 511
+ *  Return values:
+ *		0 - success
+*/
+int qm_queue_no_traffic_dump(u32 queue);
+
+/*
+ * Print for the queues that are not empty the following.
+ * Run on all queues from 0 to 511.
+ * For each queue check it qlen_entry:ql in qlen and if it not 0
+ * print its length and status from the same register
+ *  Return values:
+ *		0 - success
+*/
+int qm_nempty_queue_len_get(void);
+
+/*
+ * Print the following per port:
+ *  Return values:
+ *		0 - success
+*/
+int qm_dqf_port_dump(u32 port);
+
+
+
 /**
  *  Write QM register
  *  Return values:
diff --git a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h
index 9d7503b..5595631 100644
--- a/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h
+++ b/drivers/net/ethernet/marvell/pp3/qm/mv_qm_regs.h
@@ -74,7 +74,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define     DMA_UNIT_OFFSET 0x00030000
 #define   SCHED_UNIT_OFFSET 0x00040000
 #define    DROP_UNIT_OFFSET 0x00080000
-#define      BM_UNIT_OFFSET 0x000D0000
 #define REORDER_UNIT_OFFSET 0x00100000
 #define     GPM_UNIT_OFFSET 0x00200000
 
@@ -235,32 +234,7 @@ struct dma_dram_fifo {
 	int _reserved:3;							/* byte[ 0-11] ,bit[157-159] */
 } __ATTRIBUTE_PACKED__;
 
-/*
-#define dma_ctl qm_dma_profile
-struct qm_dma_profile {
-	int                                           dma_address_base;
-	struct dma_Q_memory_allocation                tab_Q_memory_allocation[512/32];
-	struct dma_gpm_thresholds			          reg_gpm_thresholds;
-	struct dma_dram_thresholds			          reg_dram_thresholds;
-	struct dma_AXI_write_attributes_for_swf_mode  reg_AXI_write_attributes_for_swf_mode;
-	struct dma_AXI_write_attributes_for_rdma_mode reg_AXI_write_attributes_for_rdma_mode;
-	struct dma_AXI_write_attributes_for_hwf_qece  reg_AXI_write_attributes_for_hwf_qece;
-	struct dma_AXI_write_attributes_for_hwf_pyld  reg_AXI_write_attributes_for_hwf_pyld;
-	struct dma_DRAM_VMID				          reg_DRAM_VMID;
-	struct dma_idle_status                        reg_idle_status;
-	struct dma_ecc_error_cause                    reg_ecc_error_cause;
-	struct dma_ecc_error_mask                     reg_ecc_error_mask;
-	struct dma_internal_error_cause               reg_internal_error_cause;
-	struct dma_internal_error_mask                reg_internal_error_mask;
-	struct dma_ceram_mac                          tab_ceram_mac[72];
-	struct dma_ceram_ppe                          tab_ceram_ppe[18];
-	struct dma_qeram                              tab_qeram[512];
-	struct dma_dram_fifo                          tab_dram_fifo[128];
-	/ * environment * /
-	dma_handle hEnv;
-	int    magic;
-} __ATTRIBUTE_PACKED__;
-*/
+
 
 /* HW structures*/
 /* QL */
@@ -340,26 +314,7 @@ struct ql_qlen {
 	struct ql_ql_entry reg_ql_entry;
 } __ATTRIBUTE_PACKED__;
 
-/*
-#define ql_ctl qm_ql_profile
-struct qm_ql_profile {
-	int                            ql_address_base;
-	struct ql_low_threshold        reg_low_threshold;
-	struct ql_pause_threshold      reg_pause_threshold;
-	struct ql_high_threshold       reg_high_threshold;
-	struct ql_traffic_source       reg_traffic_source;
-	struct ql_ecc_error_cause      reg_ecc_error_cause;
-	struct ql_ecc_error_mask       reg_ecc_error_mask;
-	struct ql_internal_error_cause reg_internal_error_cause;
-	struct ql_internal_error_mask  reg_internal_error_mask;
-	struct ql_nss_general_purpose  reg_nss_general_purpose[8];
-	struct ql_qptr                 tab_qptr[256];
-	struct ql_qlen                 tab_qlen[512];
-	/ * environment * /
-	ql_handle hEnv;
-	int    magic;
-} __ATTRIBUTE_PACKED__;
-*/
+
 
 /* PFE */
 struct pfe_qece_dram_base_address_hi {
@@ -477,40 +432,14 @@ struct pfe_queue_flush {
 
 struct pfe_queue_qece {
 /*	uint128_t qece:128;						 byte[ 0-15] ,bit[ 0-127] */
-	uint32_t qece_1:32;						/* byte[ 0-15] ,bit[ 0-31] */
-	uint32_t qece_2:32;						/* byte[ 0-15] ,bit[32-63] */
-	uint32_t qece_3:32;						/* byte[ 0-15] ,bit[64-95] */
-	uint32_t qece_4:32;						/* byte[ 0-15] ,bit[96-127] */
+	int qece_1:32;							/* byte[ 0-15] ,bit[ 0-31] */
+	int qece_2:32;							/* byte[ 0-15] ,bit[32-63] */
+	int qece_3:32;							/* byte[ 0-15] ,bit[64-95] */
+	int qece_4:32;							/* byte[ 0-15] ,bit[96-127] */
 /*	int _reserved:32;						 byte[ 0- 3] ,bit[ 0-31]  DUMMY*/
 } __ATTRIBUTE_PACKED__;
 
-/*
-#define pfe_ctl qm_pfe_profile
-struct qm_pfe_profile {
-	int                                          pfe_address_base;
-	struct pfe_qece_dram_base_address_hi         reg_qece_dram_base_address_hi;
-	struct pfe_pyld_dram_base_address_hi         reg_pyld_dram_base_address_hi;
-	struct pfe_qece_dram_base_address_lo         reg_qece_dram_base_address_lo;
-	struct pfe_pyld_dram_base_address_lo         reg_pyld_dram_base_address_lo;
-	struct pfe_QM_VMID                           reg_QM_VMID;
-/ *	struct pfe_port_ppe                          reg_port_ppe; * /
-	struct pfe_port_flush                        reg_port_flush;
-	struct pfe_AXI_read_attributes_for_swf_mode  reg_AXI_read_attributes_for_swf_mode;
-	struct pfe_AXI_read_attributes_for_rdma_mode reg_AXI_read_attributes_for_rdma_mode;
-	struct pfe_AXI_read_attributes_for_hwf_qece  reg_AXI_read_attributes_for_hwf_qece;
-	struct pfe_AXI_read_attributes_for_hwf_pyld  reg_AXI_read_attributes_for_hwf_pyld;
-	struct pfe_ecc_error_cause                   reg_ecc_error_cause;
-	struct pfe_ecc_error_mask                    reg_ecc_error_mask;
-	struct pfe_internal_error_cause              reg_internal_error_cause;
-	struct pfe_internal_error_mask               reg_internal_error_mask;
-	struct pfe_idle_status                       reg_idle_status;
-	struct pfe_queue_flush                       tab_queue_flush[64];
-	struct pfe_queue_qece                        tab_queue_qece[2048];
-	/ * environment * /
-	pfe_handle hEnv;
-	int    magic;
-} __ATTRIBUTE_PACKED__;
-*/
+
 
 /* REORDER */
 struct reorder_ru_pool {
@@ -522,6 +451,30 @@ struct reorder_ru_class_head {
 	int _reserved:20;					/* byte[ 0- 3] ,bit[12-31] */
 } __ATTRIBUTE_PACKED__;
 
+struct reorder_ru_ser_error_cause {
+	int ru_ser_error_interrupt:1;		/* byte[ 0- 3] ,bit[ 0- 0] */
+	int ru_qe_ser_error:1;				/* byte[ 0- 3] ,bit[ 1- 1] */
+	int ru_class_ser_error:1;			/* byte[ 0- 3] ,bit[ 2- 2] */
+	int ru_tasks_ser_error:1;			/* byte[ 0- 3] ,bit[ 3- 3] */
+	int ru_ptr2next_ser_error:1;		/* byte[ 0- 3] ,bit[ 4- 4] */
+	int ru_sid_fifo_ser_error:1;		/* byte[ 0- 3] ,bit[ 5- 5] */
+	int ru_port2class_ser_error:1;		/* byte[ 0- 3] ,bit[ 6- 6] */
+	int ru_rf_error:1;					/* byte[ 0- 3] ,bit[ 7- 7] */
+	int _reserved:24;					/* byte[ 0- 3] ,bit[ 8-31] */
+} __ATTRIBUTE_PACKED__;
+
+struct reorder_ru_ser_error_mask {
+	int ru_ser_error_mask:1;			/* byte[ 0- 3] ,bit[ 0- 0] */
+	int ru_qe_ser_error_mask:1;			/* byte[ 0- 3] ,bit[ 1- 1] */
+	int ru_class_ser_error_mask:1;		/* byte[ 0- 3] ,bit[ 2- 2] */
+	int ru_tasks_ser_error_mask:1;		/* byte[ 0- 3] ,bit[ 3- 3] */
+	int ru_ptr2next_ser_error_mask:1;	/* byte[ 0- 3] ,bit[ 4- 4] */
+	int ru_sid_fifo_ser_error_mask:1;	/* byte[ 0- 3] ,bit[ 5- 5] */
+	int ru_port2class_ser_error_mask:1;	/* byte[ 0- 3] ,bit[ 6- 6] */
+	int ru_rf_error_mask:1;				/* byte[ 0- 3] ,bit[ 7- 7] */
+	int _reserved:24;					/* byte[ 0- 3] ,bit[ 8-31] */
+} __ATTRIBUTE_PACKED__;
+
 struct reorder_ru_host_cmd {
 	int ru_host_sid:12;					/* byte[ 0- 3] ,bit[ 0-11] */
 	int _reserved_1:4;					/* byte[ 0- 3] ,bit[12-15] */
@@ -543,21 +496,6 @@ struct reorder_ru_port2class {
 	int _reserved_1:25;					/* byte[ 0- 3] ,bit[ 7-31] */
 } __ATTRIBUTE_PACKED__;
 
-/*
-#define reorder_ctl qm_reorder_profile
-struct qm_reorder_profile {
-	int                               reorder_address_base;
-	struct reorder_ru_pool            reg_ru_pool;
-	struct reorder_ru_class_head      reg_ru_class_head;
-/ *	struct reorder_qlen               tab_qlen[512]; * /
-	struct reorder_ru_host_cmd        reg_ru_host_cmd;
-	struct reorder_ru_task_permission reg_ru_task_permission;
-	struct reorder_ru_port2class      reg_ru_port2class;
-	/ * environment* /
-	ql_handle hEnv;
-	int    magic;
-} __ATTRIBUTE_PACKED__;
-*/
 
 /* GPM */
 struct gpm_gpm_pl {
@@ -588,17 +526,7 @@ struct gpm_gpm_qe {
 	int gpm_qe_03:32;					/* byte[ 0- 7] ,bit[ 96-127] */
 } __ATTRIBUTE_PACKED__;
 
-/*
-#define gpm_ctl qm_gpm_profile
-struct qm_gpm_profile {
-	int                                   gpm_address_base;
-	struct gpm_gpm_pl                     tab_gpm_pl[10240];
-	struct gpm_gpm_qe                     tab_gpm_qe[5120];
-	/ * environment * /
-	gpm_handle hEnv;
-	int    magic;
-} __ATTRIBUTE_PACKED__;
-*/
+
 
 /* DQF */
 struct dqf_Data_FIFO_params_p {
@@ -908,68 +836,10 @@ struct dqf_dqf_macs_desc {
 	struct desc reg_desc;
 } __ATTRIBUTE_PACKED__;
 
-/*
-#define dqf_ctl qm_dqf_profile
-struct qm_dqf_profile {
-	int                                         dqf_address_base;
-	struct dqf_Data_FIFO_params_p               vec_Data_FIFO_params_p[16];
-	struct dqf_Credit_Threshold_p               vec_Credit_Threshold_p[16];
-	struct dqf_PPC_port_map_p                   vec_PPC_port_map_p[16];
-	struct dqf_data_fifo_pointers_p             vec_data_fifo_pointers_p[16];
-	struct dqf_dqf_intr_cause                   reg_dqf_intr_cause;
-	struct dqf_dqf_intr_mask                    reg_dqf_intr_mask;
-	struct dqf_misc_error_intr_cause            reg_misc_error_intr_cause;
-	struct dqf_misc_error_intr_mask             reg_misc_error_intr_mask;
-	struct dqf_dqf_ser_summary_intr_cause       reg_dqf_ser_summary_intr_cause;
-	struct dqf_dqf_ser_summary_intr_mask        reg_dqf_ser_summary_intr_mask;
-	struct dqf_write_to_full_error_intr_cause   reg_write_to_full_error_intr_cause;
-	struct dqf_write_to_full_error_intr_mask    reg_write_to_full_error_intr_mask;
-	struct dqf_read_from_empty_error_intr_cause reg_read_from_empty_error_intr_cause;
-	struct dqf_read_from_empty_error_intr_mask  reg_read_from_empty_error_intr_mask;
-	struct dqf_wrong_axi_rd_error_intr_cause    reg_wrong_axi_rd_error_intr_cause;
-	struct dqf_wrong_axi_rd_error_intr_mask     reg_wrong_axi_rd_error_intr_mask;
-	struct dqf_mg2mem_req_addr_ctrl             reg_mg2mem_req_addr_ctrl;
-	struct dqf_mem2mg_resp_status               reg_mem2mg_resp_status;
-	struct dqf_mem2mg_resp_data_hh              reg_mem2mg_resp_data_hh;
-	struct dqf_mem2mg_resp_data_hl              reg_mem2mg_resp_data_hl;
-	struct dqf_mem2mg_resp_data_lh              reg_mem2mg_resp_data_lh;
-	struct dqf_mem2mg_resp_data_ll              reg_mem2mg_resp_data_ll;
-	struct dqf_dqf_macs_l3_res                  tab_dqf_macs_l3_res[256];
-	struct dqf_dqf_macs_l4_res                  tab_dqf_macs_l4_res[256];
-	struct dqf_dqf_macs_l3_ptr                  tab_dqf_macs_l3_ptr[256];
-	struct dqf_dqf_macs_l4_ptr                  tab_dqf_macs_l4_ptr[256];
-	struct dqf_dqf_macs_desc                    tab_dqf_macs_desc[16];
-	/ * environment* /
-	dqf_handle hEnv;
-	int    magic;
-} __ATTRIBUTE_PACKED__;
-*/
+
 
 /* QM General */
 
-/*#define qm_register_write_new */
-/*#define qm_register_read_new */
-/*
-#define bm_register_write     qm_register_write
-#define bm_register_read      qm_register_read
-*/
-#define pfe_register_write    qm_register_write
-#define pfe_register_read     qm_register_read
-
-#define dma_register_write    qm_register_write
-#define dma_register_read     qm_register_read
-
-
-/*#define      qm_alias qm_alias*/
-#define      ql_alias qm_alias
-#define     pfe_alias qm_alias
-#define     dqf_alias qm_alias
-#define     dma_alias qm_alias
-/*#define      bm_alias qm_alias*/
-#define   sched_alias qm_alias
-#define    drop_alias qm_alias
-#define reorder_alias qm_alias
-#define     gpm_alias qm_alias
 
 struct qm_alias {
 	int base;
-- 
1.7.5.4

