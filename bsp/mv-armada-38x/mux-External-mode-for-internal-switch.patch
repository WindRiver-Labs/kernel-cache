From 3672dc66e7c72718acb7f0f78dc33c5850cf8e2f Mon Sep 17 00:00:00 2001
From: Uri Eliyahu <uriel@marvell.com>
Date: Thu, 17 Oct 2013 15:30:28 +0200
Subject: [PATCH 1031/1825] mux: External mode for internal switch

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit b4efd957c181cb9612e3887a329f86e4da1454fc

	- remove INCLUDE_SWITCH from mux code
	- use switch ops in mux driver
	- fix mux mtu bug
	- change parameters order in switch api

Change-Id: I39b8342f3043ef60fcad4ff1769341a037136975
Signed-off-by: Uri Eliyahu <uriel@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/3739
Reviewed-by: Dmitri Epshtein <dima@marvell.com>
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Igor Patrik <igorp@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../mv_drivers_lsp/mv_mux/mv_mux_netdev.c          |  257 ++++++++++----------
 .../mv_drivers_lsp/mv_mux/mv_mux_netdev.h          |   23 ++-
 .../mv_drivers_lsp/mv_switch/mv_switch.c           |   48 ++--
 .../mv_drivers_lsp/mv_switch/mv_switch.h           |   15 +-
 4 files changed, 188 insertions(+), 155 deletions(-)

diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.c
index df91384..8a755dd 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.c
@@ -33,28 +33,31 @@ disclaimer.
 #include <linux/module.h>
 #include "mv_mux_tool.h"
 
+static struct notifier_block mux_notifier_block __read_mostly;
 static const struct net_device_ops mv_mux_netdev_ops;
 static struct  mv_mux_switch_port  mux_switch_shadow;
 struct  mv_mux_eth_port mux_eth_shadow[MV_ETH_MAX_PORTS];
 
+/* switch functions that called from mux */
+static const struct  mv_mux_switch_ops *switch_ops;
+
+/* count mux devices number */
+static int mux_init_cnt;
+
 /* ppv2/neta functions that called from mux */
-static struct  mv_mux_eth_ops	*mux_eth_ops;
+static struct  mv_mux_eth_ops	*eth_ops;
 
 /* mux functions that called from switch */
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-static struct  mv_switch_mux_ops switch_mux_ops;
-#endif
+static const struct  mv_switch_mux_ops mux_ops;
 
 static inline struct net_device *mv_mux_rx_netdev_get(int port, struct sk_buff *skb);
 static inline int mv_mux_rx_tag_remove(struct net_device *dev, struct sk_buff *skb);
 static inline int mv_mux_tx_skb_tag_add(struct net_device *dev, struct sk_buff *skb);
 static int mv_mux_netdev_delete_all(int port);
 
-
 /*-----------------------------------------------------------------------------------------*/
 /*----------------------------     MANAGER      -------------------------------------------*/
 /*-----------------------------------------------------------------------------------------*/
-#ifdef CONFIG_MV_INCLUDE_SWITCH
 static int mv_mux_mgr_create(char *name, int gbe_port, int group, MV_MUX_TAG *tag)
 {
 	struct net_device *mux_dev;
@@ -69,12 +72,16 @@ static int mv_mux_mgr_create(char *name, int gbe_port, int group, MV_MUX_TAG *ta
 	mv_mux_netdev_add(gbe_port, mux_dev);
 
 	/* update switch group's cookie for mux ops */
-	mv_switch_group_cookie_set(group, mux_dev);
+	if (switch_ops && switch_ops->group_cookie_set)
+		switch_ops->group_cookie_set(group, mux_dev);
 
 	/* update switch's DB with mux's MAC addresses (bcast, ucast) */
 	unicast = mv_mux_get_mac(mux_dev);
-	mv_switch_mac_addr_set(unicast, group, 1);
-	mv_switch_mac_addr_set(broadcast, group, 1);
+
+	if (switch_ops && switch_ops->mac_addr_set) {
+		switch_ops->mac_addr_set(group, unicast, 1);
+		switch_ops->mac_addr_set(group, broadcast, 1);
+	}
 
 	return 0;
 }
@@ -84,19 +91,18 @@ static int mv_mux_mgr_init(MV_SWITCH_PRESET_TYPE preset, int vid, MV_TAG_TYPE ta
 {
 	char name[7] = {0, 0, 0, 0, 0, 0, 0};
 	MV_MUX_TAG tag;
-	unsigned int g, groups = mv_switch_group_map_get();
+	unsigned int g;
 
 	for (g = 0; g < MV_SWITCH_DB_NUM; g++) {
-		if (MV_BIT_CHECK(groups, g)) {
-			/* get tag data according to switch */
-			mv_switch_tag_get(&tag, preset, vid, tag_mode, g);
-
-			/* assign name */
-			sprintf(name, "mux%d", g);
+		/* get tag data according to switch */
+		if (switch_ops && switch_ops->tag_get)
+			if (switch_ops->tag_get(g, tag_mode, preset, vid, &tag)) {
+				/* group g enabled */
+				sprintf(name, "mux%d", g);
+				/* create new mux device */
+				mv_mux_mgr_create(name, gbe_port, g, &tag);
+			}
 
-			/* create new mux device */
-			mv_mux_mgr_create(name, gbe_port, g, &tag);
-		}
 	}
 
 	return 0;
@@ -110,7 +116,8 @@ static int mv_mux_mgr_probe(int gbe_port)
 	int vid = mux_switch_shadow.vid;
 
 	/* config switch according to preset mode */
-	mv_switch_preset_init(preset, tag_mode, vid);
+	if (switch_ops && switch_ops->preset_init)
+		switch_ops->preset_init(tag_mode, preset, vid);
 
 	/* update netdev port with tag type */
 	mv_mux_tag_type_set(gbe_port, tag_mode);
@@ -119,28 +126,34 @@ static int mv_mux_mgr_probe(int gbe_port)
 	mv_mux_mgr_init(preset, vid, tag_mode, gbe_port);
 
 	if (tag_mode != MV_TAG_TYPE_NONE)
-		if (mux_eth_ops && mux_eth_ops->promisc_set)
-			mux_eth_ops->promisc_set(gbe_port);
+		if (eth_ops && eth_ops->promisc_set)
+			eth_ops->promisc_set(gbe_port);
 
-	mv_switch_interrupt_unmask();
+	if (switch_ops && switch_ops->interrupt_unmask)
+		switch_ops->interrupt_unmask();
 
 	printk(KERN_ERR "port #%d establish switch connection\n\n", gbe_port);
 
 	return 0;
 }
-#else
-static int mv_mux_mgr_probe(int gbe_port)
-{
-	return 0;
-}
-#endif /*CONFIG_MV_INCLUDE_SWITCH*/
-
 
 /*-----------------------------------------------------------------------------------------*/
 /*----------------------------    MUX DRIVER    -------------------------------------------*/
 /*-----------------------------------------------------------------------------------------*/
 
 /*-----------------------------------------------------------------------------------------*/
+int mv_mux_switch_ops_set(const struct mv_mux_switch_ops *switch_ops_ptr)
+{
+	switch_ops = switch_ops_ptr;
+
+	return 0;
+}
+
+static inline bool mv_mux_internal_switch(int port)
+{
+	/* note: in external switch - attach return false */
+	return ((mux_switch_shadow.attach) && (mux_switch_shadow.gbe_port == port));
+}
 
 void mv_mux_shadow_print(int gbe_port)
 {
@@ -162,7 +175,6 @@ void mv_mux_shadow_print(int gbe_port)
 /*-----------------------------------------------------------------------------------------*/
 void mv_mux_switch_attach(int gbe_port, int preset, int vid, int tag, int switch_port)
 {
-
 	/* allready attach */
 	if (mux_switch_shadow.attach)
 		return;
@@ -177,9 +189,7 @@ void mv_mux_switch_attach(int gbe_port, int preset, int vid, int tag, int switch
 	mux_switch_shadow.mtu = -1;
 
 #ifdef CONFIG_MV_INCLUDE_SWITCH
-	/* set mux ops to be used by switch driver */
-	switch_mux_ops.update_link = mv_mux_update_link;
-	mv_switch_mux_ops_set(&switch_mux_ops);
+	mv_switch_mux_ops_set(&mux_ops);
 #endif
 
 	if (mux_eth_shadow[gbe_port].root)
@@ -198,7 +208,7 @@ void mv_mux_eth_attach(int port, struct net_device *root, struct mv_mux_eth_ops
 	mux_eth_shadow[port].root = root;
 
 	/* update ops structure */
-	mux_eth_ops = ops;
+	eth_ops = ops;
 
 	if (mux_switch_shadow.attach && (mux_switch_shadow.gbe_port == port))
 		/* switch already attached */
@@ -378,13 +388,11 @@ static void mv_mux_set_rx_mode(struct net_device *dev)
 
 void mv_mux_change_rx_flags(struct net_device *mux_dev, int flags)
 {
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-	if (mux_switch_shadow.attach) {
-		struct mux_netdev *pmux_priv = MV_MUX_PRIV(mux_dev);
+	struct mux_netdev *pmux_priv = MV_MUX_PRIV(mux_dev);
 
-		mv_switch_promisc_set(pmux_priv->idx, (mux_dev->flags & IFF_PROMISC) ? 1 : 0);
-	}
-#endif
+	if (mv_mux_internal_switch(pmux_priv->port))
+		if (switch_ops && switch_ops->promisc_set)
+			switch_ops->promisc_set(pmux_priv->idx, (mux_dev->flags & IFF_PROMISC) ? 1 : 0);
 }
 
 /*-----------------------------------------------------------------------------------------*/
@@ -396,7 +404,7 @@ static int mv_mux_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 }
 
 /*-----------------------------------------------------------------------------------------*/
-#ifdef CONFIG_MV_INCLUDE_SWITCH
+
 static void mv_mux_switch_mtu_update(int mtu)
 {
 	int pkt_size, tag_size = 0;
@@ -408,22 +416,25 @@ static void mv_mux_switch_mtu_update(int mtu)
 		tag_size = MV_ETH_DSA_SIZE;
 
 	pkt_size = mtu + tag_size + MV_ETH_ALEN + MV_ETH_VLAN_SIZE + MV_ETH_CRC_SIZE;
-	mv_switch_jumbo_mode_set(pkt_size);
+
+	if (switch_ops && switch_ops->jumbo_mode_set)
+		switch_ops->jumbo_mode_set(pkt_size);
 }
-#endif
+
 /*-----------------------------------------------------------------------------------------*/
 
 int mv_mux_close(struct net_device *dev)
 {
 	struct mux_netdev *pmux_priv = MV_MUX_PRIV(dev);
 	struct net_device *root = mux_eth_shadow[pmux_priv->port].root;
+
 	netif_stacked_transfer_operstate(root, dev);
 	netif_tx_stop_all_queues(dev);
 
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-	if (mux_switch_shadow.attach)
-		mv_switch_group_disable(pmux_priv->idx);
-#endif
+	if (mv_mux_internal_switch(pmux_priv->port))
+		if (switch_ops && switch_ops->group_disable)
+			switch_ops->group_disable(pmux_priv->idx);
+
 	printk(KERN_NOTICE "%s: stopped\n", dev->name);
 
 	return MV_OK;
@@ -452,10 +463,9 @@ int mv_mux_open(struct net_device *dev)
 	if (dev->mtu > root->mtu)
 		dev->mtu = root->mtu;
 
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-	if (mux_switch_shadow.attach)
-		mv_switch_group_enable(pmux_priv->idx);
-#endif
+	if (mv_mux_internal_switch(pmux_priv->port))
+		if (switch_ops && switch_ops->group_enable)
+			switch_ops->group_enable(pmux_priv->idx);
 
 	printk(KERN_NOTICE "%s: started\n", dev->name);
 
@@ -465,24 +475,31 @@ int mv_mux_open(struct net_device *dev)
 
 /*-----------------------------------------------------------------------------------------*/
 
-static int mv_mux_set_mac(struct net_device *dev, void *addr)
+static int mv_mux_set_mac(struct net_device *mux_dev, void *addr)
 {
+	struct mux_netdev *pmux_priv = MV_MUX_PRIV(mux_dev);
+
 	u8 *mac = &(((u8 *)addr)[2]);  /* skip on first 2B (ether HW addr type) */
 
-	mv_mux_close(dev);
+	mv_mux_close(mux_dev);
 
 	/*TODO: update parser/PNC - mac filtering*/
 
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-	if (mux_switch_shadow.attach) {
-		struct mux_netdev *pmux_priv = MV_MUX_PRIV(dev);
+	if (mv_mux_internal_switch(pmux_priv->port))
+		if (switch_ops && switch_ops->mac_addr_set) {
 
-		mv_switch_mac_update(pmux_priv->idx, dev->dev_addr, mac);
-	}
-#endif
-	memcpy(dev->dev_addr, mac, ETH_ALEN);
+			/* delete old mac */
+			if (switch_ops->mac_addr_set(pmux_priv->idx, mux_dev->dev_addr, 0))
+				return MV_ERROR;
+
+			/* set new mac */
+			if (switch_ops->mac_addr_set(pmux_priv->idx, mac, 1))
+				return MV_ERROR;
+		}
 
-	mv_mux_open(dev);
+	memcpy(mux_dev->dev_addr, mac, ETH_ALEN);
+
+	mv_mux_open(mux_dev);
 
 	return 0;
 }
@@ -491,8 +508,16 @@ static int mv_mux_set_mac(struct net_device *dev, void *addr)
 
 int mv_mux_mtu_change(struct net_device *mux_dev, int mtu)
 {
-	printk(KERN_ERR "Invalid operation %s is virtual port.\n", mux_dev->name);
-	return MV_ERROR;
+	struct mux_netdev *pmux_priv = MV_MUX_PRIV(mux_dev);
+	struct net_device *root = mux_eth_shadow[pmux_priv->port].root;
+
+	if (root->mtu < mtu) {
+		printk(KERN_ERR "Invalid mtu value.\n");
+		return MV_ERROR;
+	}
+
+	mux_dev->mtu = mtu;
+	return MV_OK;
 }
 
 /*-----------------------------------------------------------------------------------------*/
@@ -670,6 +695,13 @@ struct net_device *mv_mux_netdev_add(int port, struct net_device *mux_dev)
 		}
 		pdev->next = mux_dev;
 	}
+
+	if (!mux_init_cnt)
+		if (register_netdevice_notifier(&mux_notifier_block) < 0)
+			unregister_netdevice_notifier(&mux_notifier_block);
+
+	mux_init_cnt++;
+
 	return mux_dev;
 }
 
@@ -706,8 +738,8 @@ int mv_mux_tag_type_set(int port, int type)
 
 	mux_eth_shadow[port].tag_type = type;
 
-	if (mux_eth_ops && mux_eth_ops->set_tag_type)
-		mux_eth_ops->set_tag_type(port, mux_eth_shadow[port].tag_type);
+	if (eth_ops && eth_ops->set_tag_type)
+		eth_ops->set_tag_type(port, mux_eth_shadow[port].tag_type);
 
 	return MV_OK;
 }
@@ -739,6 +771,11 @@ int mv_mux_netdev_delete(struct net_device *mux_dev)
 		synchronize_net();
 		unregister_netdev(mux_dev);
 		free_netdev(mux_dev);
+		/*
+		we don't need to decrease here mux_init_cnt
+		mux_init_cnt incease only in mv_mux_netdev_add
+		when mux attached to gbe port
+		*/
 		return MV_OK;
 	}
 
@@ -767,6 +804,12 @@ int mv_mux_netdev_delete(struct net_device *mux_dev)
 			unregister_netdev(mux_dev);
 			printk(KERN_ERR "%s has been removed.\n", mux_dev->name);
 			free_netdev(mux_dev);
+
+			mux_init_cnt--;
+
+			if (!mux_init_cnt)
+				unregister_netdevice_notifier(&mux_notifier_block);
+
 			return MV_OK;
 
 		} else {
@@ -816,13 +859,9 @@ static int mux_device_event(struct notifier_block *unused, unsigned long event,
 
 	tag_type = mux_eth_shadow[port].tag_type;
 
-	/* exit - if not mux device */
-	if (tag_type == MV_TAG_TYPE_NONE)
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-		/* Check that that this port is not CPU port (can be untagged) */
-		if (mux_switch_shadow.attach && (mux_switch_shadow.gbe_port != port))
-#endif
-			goto out;
+	/* exit - if transparent mode */
+	if (mv_mux_internal_switch(port) && (tag_type == MV_TAG_TYPE_NONE))
+		goto out;
 
 	switch (event) {
 
@@ -830,17 +869,17 @@ static int mux_device_event(struct notifier_block *unused, unsigned long event,
 		mux_dev = mux_eth_shadow[port].switch_dev;
 		while (mux_dev != NULL) {
 			pdev_priv = MV_MUX_PRIV(mux_dev);
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-			if (mux_switch_shadow.attach) {
+			if (mv_mux_internal_switch(port)) {
 				/* In case of internal switch, link is determined by switch */
-				int link_up = mv_switch_link_status_get(pdev_priv->idx);
-				mv_mux_update_link(mux_dev, link_up);
+				if (switch_ops && switch_ops->link_status_get) {
+					int link_up = switch_ops->link_status_get(pdev_priv->idx);
+					mv_mux_update_link(mux_dev, link_up);
+				}
+			} else {
+				/* In case of external switch, propagate real device link state to mux devices */
+				/* change state*/
+				netif_stacked_transfer_operstate(dev, mux_dev);
 			}
-#else
-			/* In case of external switch, propagate real device link state to mux devices */
-			/* change state*/
-			netif_stacked_transfer_operstate(dev, mux_dev);
-#endif
 			mux_dev = pdev_priv->next;
 		}
 		break;
@@ -869,12 +908,12 @@ static int mux_device_event(struct notifier_block *unused, unsigned long event,
 			dev_set_mtu(mux_dev, dev->mtu);
 			mux_dev = pdev_priv->next;
 		}
-#ifdef CONFIG_MV_INCLUDE_SWITCH
-		if (mux_switch_shadow.attach) {
+
+		if (mv_mux_internal_switch(port)) {
 			mux_switch_shadow.mtu = dev->mtu;
 			mv_mux_switch_mtu_update(dev->mtu);
 		}
-#endif
+
 		break;
 
 	case NETDEV_DOWN:
@@ -895,29 +934,13 @@ static int mux_device_event(struct notifier_block *unused, unsigned long event,
 		break;
 
 	case NETDEV_UP:
-		/* Master up - Put all mux devices for this dev in the up state too.  */
-		mux_dev = mux_eth_shadow[port].switch_dev;
-
-		while (mux_dev != NULL) {
-			pdev_priv = MV_MUX_PRIV(mux_dev);
-			flgs = mux_dev->flags;
-			if (flgs & IFF_UP) {
-				mux_dev = pdev_priv->next;
-				continue;
-			}
-			dev_change_flags(mux_dev, flgs | IFF_UP);
-			/* dev_change_flags call to mv_mux_open*/
-			mux_dev = pdev_priv->next;
-		}
-
-#ifdef CONFIG_MV_INCLUDE_SWITCH
 		/* Check for MTU updates */
-		if (mux_switch_shadow.attach &&
-				((mux_switch_shadow.mtu == -1) || (mux_switch_shadow.mtu > dev->mtu))) {
-			mux_switch_shadow.mtu = dev->mtu;
-			mv_mux_switch_mtu_update(dev->mtu);
+		if (mv_mux_internal_switch(port) &&
+			((mux_switch_shadow.mtu == -1) || (mux_switch_shadow.mtu > dev->mtu))) {
+				mux_switch_shadow.mtu = dev->mtu;
+				mv_mux_switch_mtu_update(dev->mtu);
 		}
-#endif
+
 		break;
 
 	case NETDEV_FEAT_CHANGE:
@@ -933,24 +956,10 @@ static int mux_device_event(struct notifier_block *unused, unsigned long event,
 out:
 	return NOTIFY_DONE;
 }
-
 /*-----------------------------------------------------------------------------------------*/
 static struct notifier_block mux_notifier_block __read_mostly = {
 	.notifier_call = mux_device_event,
 };
-
-/*-----------------------------------------------------------------------------------------*/
-static int __init mux_proto_init(void)
-{
-	int err;
-
-	err = register_netdevice_notifier(&mux_notifier_block);
-
-	if (err < 0)
-		unregister_netdevice_notifier(&mux_notifier_block);
-	return err;
-
-}
 /*-----------------------------------------------------------------------------------------*/
 
 bool mv_mux_netdev_link_status(struct net_device *dev)
@@ -1428,7 +1437,6 @@ int mv_mux_ctrl_dbg_flag(int port, u32 flag, u32 val)
 	return 0;
 }
 /*-----------------------------------------------------------------------------------------*/
-
 static const struct net_device_ops mv_mux_netdev_ops = {
 	.ndo_open		= mv_mux_open,
 	.ndo_stop		= mv_mux_close,
@@ -1437,6 +1445,9 @@ static const struct net_device_ops mv_mux_netdev_ops = {
 	.ndo_do_ioctl		= mv_mux_ioctl,
 	.ndo_set_rx_mode	= mv_mux_set_rx_mode,
 	.ndo_change_rx_flags	= mv_mux_change_rx_flags,
+	.ndo_change_mtu		= mv_mux_mtu_change,
+};
+/*-----------------------------------------------------------------------------------------*/
+static const struct mv_switch_mux_ops mux_ops =  {
+	.update_link = mv_mux_update_link,
 };
-
-module_init(mux_proto_init);
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.h
index 0c6ad43..cc50b92 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_mux/mv_mux_netdev.h
@@ -66,7 +66,6 @@ struct mv_mux_eth_port {
 #define MV_MUX_F_DBG_RX            (1 << MV_MUX_F_DBG_RX_BIT)
 #define MV_MUX_F_DBG_TX            (1 << MV_MUX_F_DBG_TX_BIT)
 
-
 struct mv_mux_switch_port {
 	int    tag_type;
 	int    preset;
@@ -77,6 +76,26 @@ struct mv_mux_switch_port {
 	bool   attach;
 };
 
+
+/* operations requested by switch device from mux device */
+struct mv_switch_mux_ops {
+	int	(*update_link)(void *cookie, int link_up);
+};
+
+/* operations requested by mux device from switch device */
+struct mv_mux_switch_ops {
+	int	(*promisc_set)(int db, u8 promisc_on);
+	int	(*jumbo_mode_set)(int max_size);
+	int	(*group_disable)(int db);
+	int	(*group_enable)(int db);
+	int	(*link_status_get)(int db);
+	int	(*mac_addr_set)(int db, unsigned char *mac_addr, unsigned char op);
+	int	(*group_cookie_set)(int db, void *cookie);
+	bool	(*tag_get)(int db, MV_TAG_TYPE tag_mode, MV_SWITCH_PRESET_TYPE preset, int vid, MV_MUX_TAG *tag);
+	int	(*preset_init)(MV_TAG_TYPE tag_mode, MV_SWITCH_PRESET_TYPE preset, int vid);
+	void	(*interrupt_unmask)(void);
+};
+
 struct mv_mux_eth_ops {
 	int	(*set_tag_type)(int port, int tag_type);
 	void	(*promisc_set)(int port);
@@ -99,6 +118,8 @@ int mv_mux_ctrl_dbg_flag(int port, u32 flag, u32 val);
 void mv_mux_eth_attach(int port, struct net_device *root, struct mv_mux_eth_ops *ops);
 void mv_mux_switch_attach(int gbe_port, int preset, int vid, int tag, int switch_port);
 void mv_mux_eth_detach(int port);
+int mv_mux_switch_ops_set(const struct mv_mux_switch_ops *switch_ops_ptr);
+
 
 
 #endif /* __mv_tag_netdev_h__ */
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c
index 5f279cb..c864e4b 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.c
@@ -41,7 +41,6 @@ disclaimer.
 #include "msApi.h"
 #include "h/platform/gtMiiSmiIf.h"
 #include "mv_switch.h"
-#include "mv_mux/mv_mux_netdev.h"
 
 #define MV_SWITCH_DEF_INDEX     0
 #define MV_ETH_PORT_0           0
@@ -78,7 +77,8 @@ static MV_SWITCH_PRESET_TYPE preset;
 static int default_vid;
 static int gbe_port;
 
-static struct mv_switch_mux_ops *mux_ops;
+static const struct mv_switch_mux_ops *mux_ops;
+static const struct mv_mux_switch_ops switch_ops;
 
 static struct tasklet_struct link_tasklet;
 static int switch_irq = -1;
@@ -188,10 +188,14 @@ int mv_switch_default_config_get(MV_TAG_TYPE *tag_mode_val,
 	return 0;
 }
 
-int mv_switch_tag_get(MV_MUX_TAG *tag, MV_SWITCH_PRESET_TYPE preset, int vid, MV_TAG_TYPE tag_mode, int db)
+/* return true if db is exist, else return false */
+bool mv_switch_tag_get(int db, MV_TAG_TYPE tag_mode, MV_SWITCH_PRESET_TYPE preset, int vid, MV_MUX_TAG *tag)
 {
 	unsigned int p, port_mask = db_port_mask[db];
 
+	if (db_port_mask[db] == 0)
+		return MV_FALSE;
+
 	tag->tag_type = tag_mode;
 
 	if (preset == MV_PRESET_SINGLE_VLAN) {
@@ -220,7 +224,7 @@ int mv_switch_tag_get(MV_MUX_TAG *tag, MV_SWITCH_PRESET_TYPE preset, int vid, MV
 			}
 	} /* do nothing if Transparent mode */
 
-	return 0;
+	return MV_TRUE;
 }
 
 unsigned int mv_switch_group_map_get(void)
@@ -292,7 +296,7 @@ int mv_switch_link_status_get(int db)
 	return (db_link_mask[db] > 0);
 }
 
-int mv_switch_mux_ops_set(struct mv_switch_mux_ops *mux_ops_ptr)
+int mv_switch_mux_ops_set(const struct mv_switch_mux_ops *mux_ops_ptr)
 {
 	mux_ops = mux_ops_ptr;
 
@@ -306,22 +310,8 @@ int mv_switch_group_cookie_set(int db, void *cookie)
 	return 0;
 }
 
-int mv_switch_mac_update(int db, unsigned char *old_mac, unsigned char *new_mac)
-{
-	int err;
-
-	/* remove old mac */
-	err = mv_switch_mac_addr_set(old_mac, db, 0);
-	if (err)
-		return err;
-
-	/* add new mac */
-	err = mv_switch_mac_addr_set(new_mac, db, 1);
 
-	return err;
-}
-
-int mv_switch_mac_addr_set(unsigned char *mac_addr, unsigned char db, unsigned char op)
+int mv_switch_mac_addr_set(int db, unsigned char *mac_addr, unsigned char op)
 {
 	GT_ATU_ENTRY mac_entry;
 	unsigned int ports_mask = db_port_mask[db] | (1 << qd_cpu_port);
@@ -921,8 +911,10 @@ int mv_switch_init(struct mv_switch_pdata *plat_data)
 
 	enabled_ports_mask = switch_ports_mask;
 
+	mv_mux_switch_ops_set(&switch_ops);
 	mv_mux_switch_attach(gbe_port, preset, default_vid, tag_mode, plat_data->switch_cpu_port);
 
+
 #ifdef SWITCH_DEBUG
 	/* for debug: */
 	mv_switch_status_print();
@@ -931,7 +923,7 @@ int mv_switch_init(struct mv_switch_pdata *plat_data)
 	return 0;
 }
 
-int mv_switch_preset_init(MV_SWITCH_PRESET_TYPE preset, MV_TAG_TYPE tag_mode, int vid)
+int mv_switch_preset_init(MV_TAG_TYPE tag_mode, MV_SWITCH_PRESET_TYPE preset, int vid)
 {
 	unsigned int p;
 	unsigned char cnt;
@@ -1710,6 +1702,20 @@ static void mv_switch_shutdown(struct platform_device *pdev)
 {
 	printk(KERN_INFO "Shutting Down Marvell Switch Driver\n");
 }
+static const struct mv_mux_switch_ops switch_ops =  {
+
+	/* update ops for mux */
+	.promisc_set = mv_switch_promisc_set,
+	.jumbo_mode_set = mv_switch_jumbo_mode_set,
+	.group_disable = mv_switch_group_disable,
+	.group_enable = mv_switch_group_enable,
+	.link_status_get = mv_switch_link_status_get,
+	.mac_addr_set = mv_switch_mac_addr_set,
+	.group_cookie_set = mv_switch_group_cookie_set,
+	.tag_get = mv_switch_tag_get,
+	.preset_init = mv_switch_preset_init,
+	.interrupt_unmask = mv_switch_interrupt_unmask,
+};
 
 static struct platform_driver mv_switch_driver = {
 	.probe = mv_switch_probe,
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.h b/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.h
index aa00147..b6cbe05 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.h
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_switch/mv_switch.h
@@ -29,6 +29,7 @@ disclaimer.
 #define __mv_switch_h__
 
 #include "mv802_3.h"
+#include "mv_mux/mv_mux_netdev.h"
 
 #define MV_SWITCH_DB_NUM			16
 
@@ -42,11 +43,6 @@ disclaimer.
 #define MV_SWITCH_GROUP_VLAN_ID(grp)       (((grp) + 1) << 8)
 #define MV_SWITCH_VLAN_TO_GROUP(vid)       ((((vid) & 0xf00) >> 8) - 1)
 
-/* operations requested by switch device from mux device */
-struct mv_switch_mux_ops {
-	int	(*update_link)(void *cookie, int link_up);
-};
-
 void mv_switch_interrupt_mask(void);
 void mv_switch_interrupt_unmask(void);
 void mv_switch_interrupt_clear(void);
@@ -74,16 +70,15 @@ int     mv_switch_port_del(int switch_port);
 
 int		mv_switch_default_config_get(MV_TAG_TYPE *tag_mode,
 						MV_SWITCH_PRESET_TYPE *preset, int *vid, int *gbe_port);
-int		mv_switch_tag_get(MV_MUX_TAG *tag, MV_SWITCH_PRESET_TYPE preset, int vid, MV_TAG_TYPE tag_mode, int db);
+int		mv_switch_preset_init(MV_TAG_TYPE tag_mode, MV_SWITCH_PRESET_TYPE preset, int vid);
+bool		mv_switch_tag_get(int db, MV_TAG_TYPE tag_mode, MV_SWITCH_PRESET_TYPE preset, int vid, MV_MUX_TAG *tag);
 unsigned int	mv_switch_group_map_get(void);
 int		mv_switch_group_restart_autoneg(int db);
 int		mv_switch_group_enable(int db);
 int		mv_switch_group_disable(int db);
 int		mv_switch_link_status_get(int db);
 int		mv_switch_group_cookie_set(int db, void *cookie);
-int		mv_switch_mac_update(int db, unsigned char *old_mac, unsigned char *new_mac);
-int		mv_switch_mac_addr_set(unsigned char *mac_addr, unsigned char db, unsigned char op);
-int		mv_switch_mux_ops_set(struct mv_switch_mux_ops *mux_ops_ptr);
-int		mv_switch_preset_init(MV_SWITCH_PRESET_TYPE preset, MV_TAG_TYPE tag_mode, int vid);
+int		mv_switch_mac_addr_set(int db, unsigned char *mac_addr, unsigned char op);
+int		mv_switch_mux_ops_set(const struct mv_switch_mux_ops *mux_ops_ptr);
 int		mv_switch_promisc_set(int db, u8 promisc_on);
 #endif /* __mv_switch_h__ */
-- 
1.7.5.4

