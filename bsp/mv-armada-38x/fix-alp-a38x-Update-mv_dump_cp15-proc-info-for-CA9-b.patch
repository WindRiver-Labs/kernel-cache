From 53423ecfc2ceace9c1017f57ac04b28a0c5bcace Mon Sep 17 00:00:00 2001
From: Nadav Haklai <nadavh@marvell.com>
Date: Tue, 25 Feb 2014 19:13:21 +0200
Subject: [PATCH 1477/1825] fix: alp,a38x: Update mv_dump_cp15 proc info for
 CA9 based SoCs

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 13db18df92a6d26b0b425ad0cf2044ce3f7bf42d

	- Fix a kernel crash when calling this proc
	- Remove old PJ4 related registers
	- Align with ARM DDI0388G_cortex_19_r3p0_trm.pdf
	- Align ALP with A38x

Change-Id: I4d07185c62e688fa8786fe719beb1e86048cd014
Signed-off-by: Nadav Haklai <nadavh@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5938
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Shadi Ammouri <shadi@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/6255
Reviewed-by: Yehuda Yitschak <yehuday@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/mach-armada38x/dump_cp15_regs.c |   67 +++++-------------------------
 arch/arm/mach-avantalp/dump_cp15_regs.c  |   22 +++++-----
 2 files changed, 22 insertions(+), 67 deletions(-)

diff --git a/arch/arm/mach-armada38x/dump_cp15_regs.c b/arch/arm/mach-armada38x/dump_cp15_regs.c
index 17e3817..8280652 100644
--- a/arch/arm/mach-armada38x/dump_cp15_regs.c
+++ b/arch/arm/mach-armada38x/dump_cp15_regs.c
@@ -26,18 +26,14 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	asm volatile ("mrc p15, 0, %0, c0, c0, 1" : "=r" (value));
 	p += sprintf(p, "Cache Type: 0x%08x\n", value);
 
-#ifdef CONFIG_CPU_V7
 	asm volatile ("mrc p15, 0, %0, c0, c0, 2" : "=r" (value));
 	p += sprintf(p, "TCM Type: 0x%08x\n", value);
-#endif
 
 	asm volatile ("mrc p15, 0, %0, c0, c0, 3" : "=r" (value));
 	p += sprintf(p, "TLB Type: 0x%08x\n", value);
 
-#ifdef CONFIG_CPU_V7
 	asm volatile ("mrc p15, 0, %0, c0, c0, 5" : "=r" (value));
-	p += sprintf(p, "Microprocessor ID: 0x%08x\n", value);
-#endif
+	p += sprintf(p, "Microprocessor Affinity: 0x%08x\n", value);
 
 	asm volatile ("mrc p15, 0, %0, c0, c1, 0" : "=r" (value));
 	p += sprintf(p, "Processor Feature 0: 0x%08x\n", value);
@@ -78,10 +74,6 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	asm volatile ("mrc p15, 0, %0, c0, c2, 4" : "=r" (value));
 	p += sprintf(p, "Set Attribute 4: 0x%08x\n", value);
 
-	asm volatile ("mrc p15, 0, %0, c0, c2, 5" : "=r" (value));
-	p += sprintf(p, "Set Attribute 5: 0x%08x\n", value);
-
-#ifdef CONFIG_CPU_V7
 	asm volatile ("mrc p15, 1, %0, c0, c0, 0" : "=r" (value));
 	p += sprintf(p, "Current Cache Size ID: 0x%08x\n", value);
 
@@ -89,11 +81,11 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	p += sprintf(p, "Current Cache Level ID: 0x%08x\n", value);
 
 	asm volatile ("mrc p15, 1, %0, c0, c0, 7" : "=r" (value));
-	p += sprintf(p, "Silicon ID: 0x%08x\n", value);
+	p += sprintf(p, "Auxiliary ID: 0x%08x\n", value);
 
 	asm volatile ("mrc p15, 2, %0, c0, c0, 0" : "=r" (value));
 	p += sprintf(p, "Cache Size Selection: 0x%08x\n", value);
-#endif
+
 	asm volatile ("mrc p15, 0, %0, c1, c0, 0" : "=r" (value));
 	p += sprintf(p, "Control : 0x%08x\n", value);
 
@@ -124,64 +116,27 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	asm volatile ("mrc p15, 0, %0, c5, c0, 1" : "=r" (value));
 	p += sprintf(p, "Instruction Fault Status : 0x%08x\n", value);
 
+	asm volatile ("mrc p15, 0, %0, c5, c1, 0" : "=r" (value));
+	p += sprintf(p, "Auxiliary Data Fault Status : 0x%08x\n", value);
+
+	asm volatile ("mrc p15, 0, %0, c5, c1, 1" : "=r" (value));
+	p += sprintf(p, "Auxiliary Instruction Fault Status : 0x%08x\n", value);
+
 	asm volatile ("mrc p15, 0, %0, c6, c0, 0" : "=r" (value));
 	p += sprintf(p, "Data Fault Address : 0x%08x\n", value);
 
-	asm volatile ("mrc p15, 0, %0, c6, c0, 1" : "=r" (value));
-	p += sprintf(p, "Watchpoint Fault Address : 0x%08x\n", value);
-
 	asm volatile ("mrc p15, 0, %0, c6, c0, 2" : "=r" (value));
 	p += sprintf(p, "Instruction Fault Address : 0x%08x\n", value);
 
-	asm volatile ("mrc p15, 0, %0, c7, c10, 6" : "=r" (value));
-	p += sprintf(p, "Cache Dirty Status: 0x%08x\n", value);
-
-	asm volatile ("mrc p15, 1, %0, c15, c1, 0" : "=r" (value));
-	p += sprintf(p, "Auxiliary Debug Modes Control 0: 0x%08x\n", value);
+	asm volatile ("mrc p15, 4, %0, c15, c0, 0" : "=r" (value));
+	p += sprintf(p, "Configuration Base Address: 0x%08x\n", value);
 
-	asm volatile ("mrc p15, 1, %0, c15, c1, 1" : "=r" (value));
-	p += sprintf(p, "Auxiliary Debug Modes Control 1: 0x%08x\n", value);
-
-	asm volatile ("mrc p15, 1, %0, c15, c1, 0" : "=r" (value));
-	p += sprintf(p, "Control Configuration: 0x%08x\n", value);
-	p += sprintf(p, "    Write Buffer Coalescing\t: %s\n",
-		     (value & (1 << 8)) ? "Enabled" : "Disabled");
-	if (value & (1 << 8))
-		p += sprintf(p, "    WB WAIT CYC\t: 0x%x\n",
-			     (value >> 9) & 0x7);
-
-	p += sprintf(p, "    Coprocessor dual issue \t: %s\n",
-		     (value & (1 << 15)) ? "Disabled" : "Enabled");
-
-	p += sprintf(p, "    L2 write allocate\t: %s\n", (value & (1 << 28)) ?
-		     "Enabled" : "Disabled");
-
-	p += sprintf(p, "    Streaming\t: %s\n", (value & (1 << 29)) ?
-		     "Enabled" : "Disabled");
-
-	asm volatile ("mrc p15, 1, %0, c15, c12, 0" : "=r" (value));
-	p += sprintf(p, "CPU ID Code Extension: 0x%08x\n", value);
-
-	asm volatile ("mrc p15, 0, %0, c9, c14, 0" : "=r" (value));
-	p += sprintf(p, "User mode access for PMC registers: %s\n",
-		     (value & 1) ? "Enabled" : "Disabled");
 	asm volatile ("mrc p15, 0, %0, c10, c2, 0" : "=r" (value));
 	p += sprintf(p, "Memory Attribute PRRR: 0x%08x\n", value);
 
 	asm volatile ("mrc p15, 0, %0, c10, c2, 1" : "=r" (value));
 	p += sprintf(p, "Memory Attribute NMRR: 0x%08x\n", value);
 
-	asm volatile ("mrc p15, 1, %0, c15, c1, 2" : "=r" (value));
-	p += sprintf(p, "Auxiliary Debug Modes Control 2: 0x%08x\n", value);
-
-	asm volatile ("mrc p15, 1, %0, c15, c2, 0" : "=r" (value));
-	p += sprintf(p, "Auxiliary Functional Modes Control 0: 0x%08x\n",
-		     value);
-
-	asm volatile ("mrc p15, 1, %0, c15, c2, 1" : "=r" (value));
-	p += sprintf(p, "Auxiliary Functional Modes Control 1: 0x%08x\n",
-		     value);
-
 	len = (p - page) - off;
 	if (len < 0)
 		len = 0;
diff --git a/arch/arm/mach-avantalp/dump_cp15_regs.c b/arch/arm/mach-avantalp/dump_cp15_regs.c
index 531364b..cb4eac1 100644
--- a/arch/arm/mach-avantalp/dump_cp15_regs.c
+++ b/arch/arm/mach-avantalp/dump_cp15_regs.c
@@ -33,7 +33,7 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	p += sprintf(p, "TLB Type: 0x%08x\n", value);
 
 	asm volatile("mrc p15, 0, %0, c0, c0, 5": "=r"(value));
-	p += sprintf(p, "Microprocessor ID: 0x%08x\n", value);
+	p += sprintf(p, "Microprocessor Affinity: 0x%08x\n", value);
 
 	asm volatile("mrc p15, 0, %0, c0, c1, 0": "=r"(value));
 	p += sprintf(p, "Processor Feature 0: 0x%08x\n", value);
@@ -74,9 +74,6 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	asm volatile("mrc p15, 0, %0, c0, c2, 4": "=r"(value));
 	p += sprintf(p, "Set Attribute 4: 0x%08x\n", value);
 
-	asm volatile("mrc p15, 0, %0, c0, c2, 5": "=r"(value));
-	p += sprintf(p, "Set Attribute 5: 0x%08x\n", value);
-
 	asm volatile("mrc p15, 1, %0, c0, c0, 0": "=r"(value));
 	p += sprintf(p, "Current Cache Size ID: 0x%08x\n", value);
 
@@ -84,7 +81,7 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	p += sprintf(p, "Current Cache Level ID: 0x%08x\n", value);
 
 	asm volatile("mrc p15, 1, %0, c0, c0, 7": "=r"(value));
-	p += sprintf(p, "Silicon ID: 0x%08x\n", value);
+	p += sprintf(p, "Auxiliary ID: 0x%08x\n", value);
 
 	asm volatile("mrc p15, 2, %0, c0, c0, 0": "=r"(value));
 	p += sprintf(p, "Cache Size Selection: 0x%08x\n", value);
@@ -119,18 +116,21 @@ static int proc_dump_cp15_read(char *page, char **start, off_t off, int count,
 	asm volatile("mrc p15, 0, %0, c5, c0, 1": "=r"(value));
 	p += sprintf(p, "Instruction Fault Status : 0x%08x\n", value);
 
+	asm volatile ("mrc p15, 0, %0, c5, c1, 0" : "=r" (value));
+	p += sprintf(p, "Auxiliary Data Fault Status : 0x%08x\n", value);
+
+	asm volatile ("mrc p15, 0, %0, c5, c1, 1" : "=r" (value));
+	p += sprintf(p, "Auxiliary Instruction Fault Status : 0x%08x\n", value);
+
 	asm volatile("mrc p15, 0, %0, c6, c0, 0": "=r"(value));
 	p += sprintf(p, "Data Fault Address : 0x%08x\n", value);
 
-	asm volatile("mrc p15, 0, %0, c6, c0, 1": "=r"(value));
-	p += sprintf(p, "Watchpoint Fault Address : 0x%08x\n", value);
-
 	asm volatile("mrc p15, 0, %0, c6, c0, 2": "=r"(value));
 	p += sprintf(p, "Instruction Fault Address : 0x%08x\n", value);
 
-	asm volatile("mrc p15, 0, %0, c9, c14, 0": "=r"(value));
-	p += sprintf(p, "User mode access for PMC registers: %s\n", (value & 1) ?
-		     "Enabled" : "Disabled");
+	asm volatile ("mrc p15, 4, %0, c15, c0, 0" : "=r" (value));
+	p += sprintf(p, "Configuration Base Address: 0x%08x\n", value);
+
 	asm volatile("mrc p15, 0, %0, c10, c2, 0": "=r"(value));
 	p += sprintf(p, "Memory Attribute PRRR: 0x%08x\n", value);
 
-- 
1.7.5.4

