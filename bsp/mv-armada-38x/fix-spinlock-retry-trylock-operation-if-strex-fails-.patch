From cd57ad1ce1299d5988fc6d97eb252b288ab8a1a5 Mon Sep 17 00:00:00 2001
From: Yehuda Yitschak <yehuday@marvell.com>
Date: Tue, 28 Jan 2014 15:46:13 +0200
Subject: [PATCH 1321/1825] fix: spinlock: retry trylock operation if strex
 fails on free lock

https://github.com/MISL-EBU-System-SW/misl-windriver.git linux-3.4.69-14t2-read
commit 7912201a1c9ead38afca9910843083a672ec0faa

    An exclusive store instruction may fail for reasons other than lock
    contention (e.g. a cache eviction during the critical section) so, in
    line with other architectures using similar exclusive instructions
    (alpha, mips, powerpc), retry the trylock operation if the lock appears
    to be free but the strex reported failure.

    This patch ports a fix introduced in 15e7e5c1ebf556cd620c9b091e121091ac760f6d
    The original fix is based on the new spinlock mechanism (ticket
    based). This patch adapts the fix to the old simplified spinlock
    implementation

    Fixes: SYSTEMSW-287, SYSTEMSW-288, SYSTEMSW-322

Change-Id: Ie474944d632f09ac53edb2803b6ce02f1f5d8364
Signed-off-by: Yehuda Yitschak <yehuday@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/5352
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Shadi Ammouri <shadi@marvell.com>
Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/include/asm/spinlock.h |   18 +++++++++++-------
 1 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/arch/arm/include/asm/spinlock.h b/arch/arm/include/asm/spinlock.h
index 5ed0ea0..4b3d643 100644
--- a/arch/arm/include/asm/spinlock.h
+++ b/arch/arm/include/asm/spinlock.h
@@ -116,14 +116,18 @@ static inline void arch_spin_lock(arch_spinlock_t *lock)
 static inline int arch_spin_trylock(arch_spinlock_t *lock)
 {
 	unsigned long tmp;
-
-	__asm__ __volatile__(
-"	ldrex	%0, [%1]\n"
-"	teq	%0, #0\n"
-"	strexeq	%0, %2, [%1]"
-	: "=&r" (tmp)
-	: "r" (&lock->lock), "r" (1)
-	: "cc");
+	unsigned long strex_fail = 0;
+
+	do {
+		__asm__ __volatile__(
+	"	mov	%1, #0\n"
+	"	ldrex	%0, [%2]\n"
+	"	teq	%0, #0\n"
+	"	strexeq	%1, %3, [%2]"
+		: "=&r" (tmp), "=&r" (strex_fail)
+		: "r" (&lock->lock), "r" (1)
+		: "cc");
+	} while (strex_fail);
 
 	if (tmp == 0) {
 		smp_mb();
-- 
1.7.5.4

