From 43aa47d5773b8543465fe1c92553d5628915c537 Mon Sep 17 00:00:00 2001
From: Pankaj chauhan <pankaj.chauhan@freescale.com>
Date: Thu, 13 Oct 2011 15:23:07 +0000
Subject: [PATCH 44/92] rf: Send complete rfdev info to user space

Extracted from 913x_WUSDK_REL_0.9.tar.gz vendor drop.

Fill dev_info structure with rfdev configuration and
return this info to user space, so that user space
code can check what exactly is configured on a rfdev.

Signed-off-by: Pankaj Chauhan <pankaj.chauhan@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/rf/controllers/fsl_aic.c |    6 ++++++
 drivers/rf/core/rfdev.c          |   22 ++++++++++++++++++++--
 include/linux/rfdev.h            |    4 ++++
 include/linux/rfdev_ioctl.h      |   31 ++++++++++++++++++-------------
 4 files changed, 48 insertions(+), 15 deletions(-)

diff --git a/drivers/rf/controllers/fsl_aic.c b/drivers/rf/controllers/fsl_aic.c
index e2085c5..69edf2a 100644
--- a/drivers/rf/controllers/fsl_aic.c
+++ b/drivers/rf/controllers/fsl_aic.c
@@ -272,6 +272,9 @@ int aic_get_dev_params(struct rf_ctrl_dev *rf_dev,
 	else
 		params->symbols_per_slot = 7;
 
+	params->long_cp = init_params->long_cp;
+	params->ants = init_params->ants;
+
 	return 0;
 }
 
@@ -374,6 +377,9 @@ static int aic_init(struct rf_ctrl_dev *rf_dev,
 	temp = CHIPRATE_REFCLK - 1;
 	out_be32(&regs->aic_ref_framconf, temp);
 
+	rf_dev->net_mode = init_params->mode;
+	rf_dev->bw = init_params->bw;
+	rf_dev->tx_rxmode = init_params->tx_rxmode;
 out:
 	return rc;
 }
diff --git a/drivers/rf/core/rfdev.c b/drivers/rf/core/rfdev.c
index fc6de45..b0420b9 100644
--- a/drivers/rf/core/rfdev.c
+++ b/drivers/rf/core/rfdev.c
@@ -101,7 +101,7 @@ int register_rf_ctrl_dev(struct rf_ctrl_dev *rf_dev)
 		|| !ctrl_ops->start || !ctrl_ops->stop)
 		return -EINVAL;
 
-	rf_dev->state = RF_INIT;
+	rf_dev->state = RF_CREATED;
 	spin_lock(&rf_priv->ctrl_lock);
 
 	devid_map = (unsigned long *)&rf_priv->name_idx_bitmap;
@@ -358,14 +358,30 @@ static ssize_t rf_read(struct file *filep, char __user *buf, size_t size,
 int rf_fill_dev_info(struct rf_ctrl_dev *rf_dev, struct rf_dev_info *dev_info)
 {
 	struct rf_phy_dev *phy;
+	struct rf_dev_params *dev_params;
+
+	dev_params = &rf_dev->dev_params;
 
-	strncpy(dev_info->controller, rf_dev->name, RIF_NAME_SIZE);
 	dev_info->state = rf_dev->state;
+
+	strncpy(dev_info->controller, rf_dev->name, RIF_NAME_SIZE);
 	if (rf_dev->state >= RF_PHY_ATTACHED) {
 		phy = rf_dev->phy;
 		strncpy(dev_info->phy, phy->name, RIF_NAME_SIZE);
+	} else {
+		memset(dev_info->phy, 0, RIF_NAME_SIZE);
 	}
 
+	dev_info->net_mode = rf_dev->net_mode;
+	dev_info->tx_rxmode = rf_dev->tx_rxmode;
+	dev_info->bw = rf_dev->bw;
+
+	dev_info->ants = dev_params->ants;
+	dev_info->symbol_len = dev_params->symbol_len;
+	dev_info->long_cp = dev_params->long_cp;
+	dev_info->cp0_len = dev_params->cp0_len;
+	dev_info->cp1_len = dev_params->cp1_len;
+
 	return 0;
 }
 static int rf_ioctl(struct inode *inode, struct file *filep,
@@ -402,6 +418,8 @@ static int rf_ioctl(struct inode *inode, struct file *filep,
 		}
 
 		rc = rf_dev->ops->init(rf_dev, &init_params);
+		if (!rc)
+			rf_change_state(rf_dev, RF_INITIALIZED);
 		break;
 
 	case RIF_SET_TIMER_SOURCE:
diff --git a/include/linux/rfdev.h b/include/linux/rfdev.h
index cd5dfb3..3266a52 100644
--- a/include/linux/rfdev.h
+++ b/include/linux/rfdev.h
@@ -29,6 +29,7 @@ struct rf_stats {
 struct rf_dev_params {
 	unsigned int ants;
 	unsigned int symbol_len;
+	unsigned int long_cp;
 	unsigned int cp0_len;
 	unsigned int cp1_len;
 	/*Frame structure*/
@@ -41,6 +42,9 @@ struct rf_dev_params {
 struct rf_ctrl_dev {
 	char			name[RIF_NAME_SIZE];
 	enum rf_state		state;
+	enum rf_network_mode 	net_mode;
+	enum rf_txrxmode 	tx_rxmode;
+	enum rf_band_width 	bw;
 	struct rf_dev_params	dev_params;
 	int			dev_idx;
 	u32			phy_id;
diff --git a/include/linux/rfdev_ioctl.h b/include/linux/rfdev_ioctl.h
index fde068b..d6f055b 100644
--- a/include/linux/rfdev_ioctl.h
+++ b/include/linux/rfdev_ioctl.h
@@ -23,29 +23,34 @@
 
 enum rf_network_mode {
 	LTE_TDD,
-	LTE_FDD
+	LTE_FDD,
+	NET_MODE_END
 };
 
 enum rf_txrxmode {
 	TXRX_1T1R,
 	TXRX_1T2R,
-	TXRX_2T2R
+	TXRX_2T2R,
+	TXRX_MODE_END
 };
 
 enum rf_band_width {
 	BW_05_MHZ,
 	BW_10_MHZ,
 	BW_15_MHZ,
-	BW_20_MHZ
+	BW_20_MHZ,
+	BW_END
 };
 enum rf_state {
-	RF_DOWN,
-	RF_INIT,
+	RF_CREATED,
 	RF_PHY_ATTACHED,
+	RF_INITIALIZED,
+	RF_TIMER_SYNC_AWAITED,
+	RF_TIMER_SYNC_FAILED,
 	RF_STOPPED,
 	RF_READY,
-	RF_TIMER_SYNC_AWAITED,
-	RF_TIMER_SYNC_FAILED
+	RF_DOWN,
+	RF_STATE_END
 };
 
 struct rf_init_params {
@@ -61,14 +66,14 @@ struct rf_dev_info {
 	char phy[RIF_NAME_SIZE];
 	enum rf_state state;
 	enum rf_network_mode net_mode;
-	enum rf_txrxmode txrx_mode;
+	enum rf_txrxmode tx_rxmode;
 	enum rf_band_width bw;
-	/*Frame structure*/
-	unsigned int subfrm_per_frm;
-	unsigned int slots_per_subfrm;
-	unsigned int chips_per_slot;
-	unsigned int symbols_per_slot;
 	unsigned int ants;
+	unsigned int symbol_len;
+	unsigned int long_cp;
+	unsigned int cp0_len;
+	unsigned int cp1_len;
+
 };
 
 struct rif_phy_cmd {
-- 
1.7.0

