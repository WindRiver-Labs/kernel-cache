From b53710757ed01ed8b098c5f68889fa5d49315744 Mon Sep 17 00:00:00 2001
From: Jiang Bin <bin.jiang@windriver.com>
Date: Wed, 28 Dec 2011 16:00:51 +0800
Subject: [PATCH 75/92] hetmgr: Debug Print integration

Extracted from 913x_WUSDK_REL_0.9.tar.gz vendor drop.

[Integrate 0537-Debug-Print-integration.patch and
0541-Fixed-the-code-which-resulted-in-macro-expansion-err.patch]

Signed-off-by: Manish Jaggi <manish.jaggi@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/misc/fsl_psc913x_hetmgr.c                |   34 ++++++++++-
 drivers/misc/psc913x_heterogeneous.h             |    2 +
 drivers/misc/psc913x_heterogeneous_common.h      |   11 +++-
 drivers/misc/psc913x_heterogeneous_debug_print.h |   71 ++++++++++++++++++++++
 drivers/misc/psc913x_heterogeneous_ipc.h         |   13 ----
 5 files changed, 115 insertions(+), 16 deletions(-)
 create mode 100644 drivers/misc/psc913x_heterogeneous_debug_print.h

diff --git a/drivers/misc/fsl_psc913x_hetmgr.c b/drivers/misc/fsl_psc913x_hetmgr.c
index 27fc1f2..a29af44 100644
--- a/drivers/misc/fsl_psc913x_hetmgr.c
+++ b/drivers/misc/fsl_psc913x_hetmgr.c
@@ -120,6 +120,8 @@ int init_sh_ctrl_area(void)
 {
 	int ctr = 0;
 	uint32_t tmp;
+	os_het_debug_print_t      *het_debug_print_v;
+	os_het_debug_print_sc_t   *het_debug_print_sc_array_v;
 
 	pr_info("Initializing Shared control area\n");
 	pr_info("Shared Control area start address = %x\n",
@@ -132,7 +134,7 @@ int init_sh_ctrl_area(void)
 		sys_map.sh_ctrl_area.phys_addr, sys_map.sh_ctrl_area.size);
 		return -1;
 	}
-	memset((void *)ctrl, 0, 0x4000);
+	memset((void *)ctrl, 0, sys_map.sh_ctrl_area.size);
 
 	/* zeroize the structure */
 	ctr += sizeof(os_het_control_t);
@@ -151,8 +153,36 @@ int init_sh_ctrl_area(void)
 	pr_info("Smart DSP Debug start address = %x\n", tmp);
 
 	ctr += sizeof(os_het_smartdsp_log_t) * 2;
-	sh_ctrl_area_mark = sys_map.sh_ctrl_area.phys_addr + ctr;
 
+	/*debug_print initilization start*/
+
+	tmp = sys_map.sh_ctrl_area.phys_addr + ctr;
+	ctrl->het_debug_print = (os_het_debug_print_t *)tmp;
+
+	het_debug_print_v =  (os_het_debug_print_t *) ((uint32_t) ctrl + ctr);
+
+	ctr += sizeof(os_het_debug_print_t);
+
+	het_debug_print_v->sc_array_size = NUM_OF_DBGP_SC_CORES*
+						NUM_OF_DBGP_TABLES_PER_SC;
+
+	tmp = sys_map.sh_ctrl_area.phys_addr + ctr;
+	het_debug_print_v->sc_debug_print = (os_het_debug_print_sc_t *)tmp;
+
+	het_debug_print_sc_array_v =
+	(os_het_debug_print_sc_t *) ((uint32_t) ctrl + ctr);
+
+	memset((void *)het_debug_print_sc_array_v,
+			0,
+			het_debug_print_v->sc_array_size*
+			sizeof(os_het_debug_print_sc_t));
+
+	ctr += (het_debug_print_v->sc_array_size*
+	sizeof(os_het_debug_print_sc_t));
+
+	/*debug_print initilization end*/
+
+	sh_ctrl_area_mark = sys_map.sh_ctrl_area.phys_addr + ctr;
 	pr_info("Free Area starts from %x\n", sh_ctrl_area_mark);
 
 	return 0;
diff --git a/drivers/misc/psc913x_heterogeneous.h b/drivers/misc/psc913x_heterogeneous.h
index ed4355e..9f0f0d6 100644
--- a/drivers/misc/psc913x_heterogeneous.h
+++ b/drivers/misc/psc913x_heterogeneous.h
@@ -38,6 +38,7 @@ _OS_BEGIN_EXTERN_C
 #include "psc913x_heterogeneous_ipc.h"
 #include "psc913x_heterogeneous_mem.h"
 #include "psc913x_heterogeneous_debug.h"
+#include "psc913x_heterogeneous_debug_print.h"
 
 /* Hardware semaphore to use in case of need for mutual exclusion in the IPC module */
 #define OS_HET_IPC_HW_SEMAPHORE_NUM     0
@@ -53,6 +54,7 @@ typedef struct {
 	os_het_ipc_t	*ipc;
 	void		*aic; /* Pointer to shared AIC configuration control structure */
 	os_het_smartdsp_log_t (*smartdsp_debug)[]; /* Pointer to where SmartDSP logs system events */
+	os_het_debug_print_t	*het_debug_print;
 } os_het_control_t;
 
 /* Pointer to the base address of the heterogeneous OS control strcuture */
diff --git a/drivers/misc/psc913x_heterogeneous_common.h b/drivers/misc/psc913x_heterogeneous_common.h
index a5855bd..17af940 100644
--- a/drivers/misc/psc913x_heterogeneous_common.h
+++ b/drivers/misc/psc913x_heterogeneous_common.h
@@ -90,8 +90,17 @@ typedef struct {
 	uint32_t	sc_initialized;
 } os_het_init_t;
 
+/* The producer and consumer each perform counter++ to
+ * their counter. It is assumed the size of what the
+ * tracker is tracking is less than MAX_UINT_32 */
+typedef struct {
+	uint32_t	producer_num; /* Number of items the producer produced */
+	uint32_t	consumer_num; /* Number of items the consumer consumed */
+} os_het_tracker_t;
+
 /* Used by the various OS to calculate an address in it's own virtual address space  */
-#define OS_HET_CALCULATE_ADDR(BASE, OFFSET) (void *)((uint8_t *)(BASE) + (uint32_t)(OFFSET))
+#define OS_HET_CALCULATE_ADDR(BASE, OFFSET) (void *)	\
+				((uint8_t *)(BASE) + (uint32_t)(OFFSET))
 
 _OS_END_EXTERN_C
 
diff --git a/drivers/misc/psc913x_heterogeneous_debug_print.h b/drivers/misc/psc913x_heterogeneous_debug_print.h
new file mode 100644
index 0000000..424b12e
--- /dev/null
+++ b/drivers/misc/psc913x_heterogeneous_debug_print.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2011
+ *  Freescale Semiconductor Inc.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of Freescale Semiconductor Inc nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#ifndef __PSC913X_HETEROGENEOUS_DEBUG_PRINT_H
+#define __PSC913X_HETEROGENEOUS_DEBUG_PRINT_H
+
+#include "psc913x_heterogeneous_common.h"
+
+_OS_BEGIN_EXTERN_C
+#include "psc913x_heterogeneous_mem.h"
+
+/* The number of tables used by debug print for each core */
+#define NUM_OF_DBGP_TABLES_PER_SC           2
+
+/* The number of SC cores supported by debug print */
+#define NUM_OF_DBGP_SC_CORES                1
+
+typedef struct {
+	uint64_t 	system_clock;
+	uint64_t 	DSP_clock;
+} debug_print_clocks_t;
+
+typedef struct {
+	void		*buffer_location; /* Pointer to the base address of the SC VTB */
+	uint32_t	segment_size; /* Size of each segment in VTB */
+	uint32_t	num_of_segments; /* Number of VTB segments */
+	os_het_tracker_t	tracker; /* Tracker for segment number; SC client is the
+				            producer and PA engine is the consumer */
+	debug_print_clocks_t	sample_clock; /* Clock synchronization */
+	uint32_t	overflow; /* Overflow indicator */
+	void		*segment_info; /* segmet information */
+	uint32_t	reserved[4];
+} os_het_debug_print_sc_t;
+
+typedef struct {
+	os_het_mem_t	pa_debug_print_shared; /* PA Debug Print shared memory region */
+	os_het_mem_t	sc_debug_print_shared; /* SC Debug Print shared memory region */
+	uint32_t	sc_array_size; /* Number of entries in sc_debug_print[]; Should be
+					  NUM_OF_DBGP_TABLES_PER_SC*NUM_OF_DBGP_SC_CORES */
+	os_het_debug_print_sc_t (*sc_debug_print)[]; /* SC debug print main structure */
+} os_het_debug_print_t;
+
+_OS_END_EXTERN_C
+#endif /*__PSC913X_HETEROGENEOUS_DEBUG_PRINT_H*/
diff --git a/drivers/misc/psc913x_heterogeneous_ipc.h b/drivers/misc/psc913x_heterogeneous_ipc.h
index e0d4d10..2044c7e 100644
--- a/drivers/misc/psc913x_heterogeneous_ipc.h
+++ b/drivers/misc/psc913x_heterogeneous_ipc.h
@@ -46,19 +46,6 @@ typedef enum {
 	OS_HET_NUM_INDICATIONS /* MUST BE LEFT LAST */
 } os_het_ipc_ind_t;
 
-
-/* The producer and consumer each perform counter++ to their counter.
- * Warnings:
- *   The counters must only be incremented, never decremented
- *   Using the macros OS_HET_INCREMENT_CONSUMER() and OS_HET_INCREMENT_PRODUCER()
- *   is the reccomended way of incrementing the counters; Direct access should be
- *   avoided. It is assumed bd_ring_size < MAX_UINT_32
- */
-typedef struct {
-	uint32_t	producer_num; /* Number of items the producer produced */
-	uint32_t	consumer_num; /* Number of items the consumer consumed */
-} os_het_tracker_t;
-
 #define MAX_UINT_32 0xFFFFFFFF
 /* Evaluate whether the channel is empty */
 #define OS_HET_CH_EMPTY(CH) \
-- 
1.7.0

