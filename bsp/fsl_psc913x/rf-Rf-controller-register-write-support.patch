From d9c76fe8fff1cf23f1ba4fef744a0e0d9f2cda4f Mon Sep 17 00:00:00 2001
From: Pankaj chauhan <pankaj.chauhan@freescale.com>
Date: Mon, 2 Jan 2012 17:28:42 +0000
Subject: [PATCH 64/92] rf: Rf controller register write support

Extracted from 913x_WUSDK_REL_0.9.tar.gz vendor drop.

Added support for writing controller registers from user space.
This is purely for debugging purpose, and will be removed when
system stabilizes.

Signed-off-by: Pankaj Chauhan <pankaj.chauhan@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/rf/controllers/fsl_aic.c |   31 +++++++++++++++++++++++++++++++
 drivers/rf/core/rfdev.c          |   31 +++++++++++++++++++++++++++----
 include/linux/rfdev.h            |    1 +
 include/linux/rfdev_ioctl.h      |    1 +
 4 files changed, 60 insertions(+), 4 deletions(-)

diff --git a/drivers/rf/controllers/fsl_aic.c b/drivers/rf/controllers/fsl_aic.c
index f347fb2..5903f1f 100644
--- a/drivers/rf/controllers/fsl_aic.c
+++ b/drivers/rf/controllers/fsl_aic.c
@@ -35,6 +35,7 @@
 static int aic_init(struct rf_ctrl_dev *rf_dev, struct rf_init_params *params);
 static int aic_timing_source(struct rf_ctrl_dev *rf_dev, unsigned int src);
 static int aic_read(struct rf_ctrl_dev *rf_dev, u32 addr, u32 count, u32 *buff);
+static int aic_write(struct rf_ctrl_dev *rf_dev, u32 offset, u32 data);
 static int aic_phy_detached(struct rf_ctrl_dev *rf_dev);
 static int aic_start(struct rf_ctrl_dev *rf_dev);
 static int aic_stop(struct rf_ctrl_dev *rf_dev);
@@ -44,6 +45,7 @@ static struct rf_ctrl_ops aic_rfops = {
 	.init = aic_init,
 	.set_timing_source = aic_timing_source,
 	.read_regs = aic_read,
+	.write_reg = aic_write,
 	.phy_detach = aic_phy_detached,
 	.start = aic_start,
 	.stop = aic_stop,
@@ -112,6 +114,35 @@ static int aic_stop(struct rf_ctrl_dev *rf_dev)
 	return -ENOSYS;
 }
 
+static int aic_write(struct rf_ctrl_dev *rf_dev, u32 offset, u32 data)
+{
+	struct aic_lane *lane = rf_dev->priv;
+	struct aic_lane_regs *lane_regs;
+	struct aic_common_regs *aic_regs;
+	int is_common_reg = 1;
+	u32 *addr;
+
+	if (offset > (2 * sizeof(struct aic_lane_regs)))
+		return -EINVAL;
+
+	if (offset & LANE_REGDUMP_OFFSET) {
+		is_common_reg = 0;
+		offset -= LANE_REGDUMP_OFFSET;
+	}
+
+	if (is_common_reg) {
+		aic_regs = lane->aic->regs;
+		addr = (u32 *) ((u32) &aic_regs->aic_ip_version + offset);
+	} else {
+		lane_regs = lane->regs;
+		addr = (u32 *) ((u32) &lane_regs->aic_dma_riqmts + offset);
+	}
+
+	out_be32(addr, data);
+
+	return 0;
+}
+
 static int aic_read(struct rf_ctrl_dev *rf_dev, u32 start_offset,
 		u32 count, u32 *buff)
 {
diff --git a/drivers/rf/core/rfdev.c b/drivers/rf/core/rfdev.c
index dec98e6..d994447 100644
--- a/drivers/rf/core/rfdev.c
+++ b/drivers/rf/core/rfdev.c
@@ -441,7 +441,7 @@ static int rf_ioctl(struct inode *inode, struct file *filep,
 	struct rf_init_params init_params;
 	struct rif_phy_cmd_set cmd_set;
 	struct rif_reg_buf reg_buf;
-	struct rif_write_reg_buf write_phy_buf;
+	struct rif_write_reg_buf write_reg_buf;
 	struct rif_dac_params dac_params;
 	struct rif_dac_buf dac_buff;
 	struct rf_dev_info dev_info;
@@ -651,13 +651,36 @@ static int rf_ioctl(struct inode *inode, struct file *filep,
 			goto out;
 		}
 
-		if (!copy_from_user(&write_phy_buf, (struct rif_write_reg_buf *)arg,
+		if (!copy_from_user(&write_reg_buf,
+			(struct rif_write_reg_buf *)arg,
 			sizeof(struct rif_write_reg_buf))) {
 
 			if (phy->ops->write_reg) {
 				rc = phy->ops->write_reg(phy,
-						write_phy_buf.addr,
-						write_phy_buf.data);
+						write_reg_buf.addr,
+						write_reg_buf.data);
+			}
+		} else {
+			rc = -EFAULT;
+		}
+
+		break;
+
+	case RIF_WRITE_CTRL_REGS:
+
+		if (rf_dev->state < RF_PHY_INITIALIZED) {
+			rc = -EAGAIN;
+			goto out;
+		}
+
+		if (!copy_from_user(&write_reg_buf,
+			(struct rif_write_reg_buf *)arg,
+			sizeof(struct rif_write_reg_buf))) {
+
+			if (rf_dev->ops->write_reg) {
+				rc = rf_dev->ops->write_reg(rf_dev,
+						write_reg_buf.addr,
+						write_reg_buf.data);
 			}
 		} else {
 			rc = -EFAULT;
diff --git a/include/linux/rfdev.h b/include/linux/rfdev.h
index 967192b..5688d9c 100644
--- a/include/linux/rfdev.h
+++ b/include/linux/rfdev.h
@@ -108,6 +108,7 @@ struct rf_ctrl_ops {
 	int	(*read_regs)(struct rf_ctrl_dev *ctrl_dev, u32 start,
 				u32 count, u32 *buff);
 
+	int 	(*write_reg)(struct rf_ctrl_dev *ctrl_dev, u32 reg, u32 data);
 	int	(*phy_detach)(struct rf_ctrl_dev *ctrl_dev);
 	int	(*start)(struct rf_ctrl_dev *ctrl_dev);
 	int	(*stop)(struct rf_ctrl_dev *ctrl_dev);
diff --git a/include/linux/rfdev_ioctl.h b/include/linux/rfdev_ioctl.h
index d78eee5..9ed565d 100644
--- a/include/linux/rfdev_ioctl.h
+++ b/include/linux/rfdev_ioctl.h
@@ -188,6 +188,7 @@ enum dac_correction_type {
 #define RIF_GET_DAC_VALUE	_IOR(RF_MAGIC, 13, struct rif_dac_buf *)
 #define RIF_SET_TX_ATTEN	_IOW(RF_MAGIC, 14, struct rf_tx_buf *)
 #define RIF_EN_DIS_TX		_IOW(RF_MAGIC, 15, struct rf_tx_en_dis *)
+#define RIF_WRITE_CTRL_REGS 	_IOW(RF_MAGIC, 16, struct rif_write_reg_buf *)
 
 
 #endif
-- 
1.7.0

