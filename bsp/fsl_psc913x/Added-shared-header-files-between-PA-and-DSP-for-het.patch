From 9c5692013f9131bb0f339e534347aa41a943a429 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Tue, 15 Nov 2011 16:38:57 +0800
Subject: [PATCH 17/92] Added shared header files between PA and DSP for heterogeneous operations

Extracted from 913x_WUSDK_REL_0.4.tar.gz vendor drop.

Added shared header files between PA and DSP for heterogeneous operations.

[Clean up code style]

Signed-off-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/misc/psc913x_heterogeneous.h        |   63 ++++++++++++++
 drivers/misc/psc913x_heterogeneous_common.h |   98 ++++++++++++++++++++++
 drivers/misc/psc913x_heterogeneous_debug.h  |   46 ++++++++++
 drivers/misc/psc913x_heterogeneous_ipc.h    |  119 +++++++++++++++++++++++++++
 drivers/misc/psc913x_heterogeneous_mem.h    |   46 ++++++++++
 5 files changed, 372 insertions(+), 0 deletions(-)
 create mode 100644 drivers/misc/psc913x_heterogeneous.h
 create mode 100644 drivers/misc/psc913x_heterogeneous_common.h
 create mode 100644 drivers/misc/psc913x_heterogeneous_debug.h
 create mode 100644 drivers/misc/psc913x_heterogeneous_ipc.h
 create mode 100644 drivers/misc/psc913x_heterogeneous_mem.h

diff --git a/drivers/misc/psc913x_heterogeneous.h b/drivers/misc/psc913x_heterogeneous.h
new file mode 100644
index 0000000..ed4355e
--- /dev/null
+++ b/drivers/misc/psc913x_heterogeneous.h
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2011
+ *  Freescale Semiconductor Inc.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of Freescale Semiconductor Inc nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#ifndef __PSC913X_HETEROGENEOUS_H
+#define __PSC913X_HETEROGENEOUS_H
+
+#include "psc913x_heterogeneous_common.h"
+
+_OS_BEGIN_EXTERN_C
+
+#include "psc913x_heterogeneous_ipc.h"
+#include "psc913x_heterogeneous_mem.h"
+#include "psc913x_heterogeneous_debug.h"
+
+/* Hardware semaphore to use in case of need for mutual exclusion in the IPC module */
+#define OS_HET_IPC_HW_SEMAPHORE_NUM     0
+/* Hardware semapohore for synchronizing the boot processes between SC and PA */
+#define OS_HET_BOOT_HW_SEMAPHORE_NUM    1
+
+/* Heterogeneous OS global control structure */
+typedef struct {
+	os_het_init_t	initialized; /* Initialization indication strcuture */
+	uint32_t	shared_ctrl_size; /* Size of the shared memory for control information */
+	os_het_mem_t	pa_shared_mem; /* PA shared memory region */
+	os_het_mem_t	sc_shared_mem; /* SC shared memory region */
+	os_het_ipc_t	*ipc;
+	void		*aic; /* Pointer to shared AIC configuration control structure */
+	os_het_smartdsp_log_t (*smartdsp_debug)[]; /* Pointer to where SmartDSP logs system events */
+} os_het_control_t;
+
+/* Pointer to the base address of the heterogeneous OS control strcuture */
+extern os_het_control_t  *g_os_het_control;
+
+_OS_END_EXTERN_C
+
+#endif
diff --git a/drivers/misc/psc913x_heterogeneous_common.h b/drivers/misc/psc913x_heterogeneous_common.h
new file mode 100644
index 0000000..a5855bd
--- /dev/null
+++ b/drivers/misc/psc913x_heterogeneous_common.h
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2011
+ *  Freescale Semiconductor Inc.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of Freescale Semiconductor Inc nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#ifndef __PSC913X_HETEROGENEOUS_COMMON_H
+#define __PSC913X_HETEROGENEOUS_COMMON_H
+
+#ifdef __SMARTDSP_OS__
+#include "os_cpp.h"
+#endif
+
+#ifdef __cplusplus
+#ifndef _OS_BEGIN_EXTERN_C
+#define _OS_BEGIN_EXTERN_C extern "C" {
+#endif
+
+#ifndef _OS_END_EXTERN_C
+#define _OS_END_EXTERN_C }
+#endif
+#else
+#ifndef _OS_BEGIN_EXTERN_C
+#define _OS_BEGIN_EXTERN_C
+#endif
+
+#ifndef _OS_END_EXTERN_C
+#define _OS_END_EXTERN_C
+#endif
+#endif
+
+_OS_BEGIN_EXTERN_C
+
+#if !defined(NULL)
+#ifndef __cplusplus
+#define NULL	((void *)0)
+#else
+#define NULL	0L
+#endif
+#endif
+
+#if !defined(FALSE)
+#define FALSE	(0)
+#endif
+#if !defined(TRUE)
+#define TRUE	(1)
+#endif
+
+#define OS_HET_INITIALIZED	0xFEDCBA98UL /* The resource is initializaed */
+#define OS_HET_UNINITIALIZED	0x00000000UL /* The resource is uninitialized */
+#define OS_HET_PA_SEMAPHORE_VAL	0xFF /* Sempahore is taken by the PA domain */
+#define OS_HET_SC_SEMAPHORE_VAL 0xFE /* Sempahore is taken by the SC domain */
+#define OS_HET_FREE_SEMAPHORE_VAL	0x00 /* Semaphore is free */
+
+typedef enum {
+	OS_HETERO_FAIL		= 0,
+	OS_HETERO_SUCCESS	= 1
+} os_het_status_t;
+
+
+/* This structure will be used to indicatye that both OS domains
+ * have initialized a specific structure
+ */
+typedef struct {
+	uint32_t	pa_initialized;
+	uint32_t	sc_initialized;
+} os_het_init_t;
+
+/* Used by the various OS to calculate an address in it's own virtual address space  */
+#define OS_HET_CALCULATE_ADDR(BASE, OFFSET) (void *)((uint8_t *)(BASE) + (uint32_t)(OFFSET))
+
+_OS_END_EXTERN_C
+
+#endif
diff --git a/drivers/misc/psc913x_heterogeneous_debug.h b/drivers/misc/psc913x_heterogeneous_debug.h
new file mode 100644
index 0000000..e18ab75
--- /dev/null
+++ b/drivers/misc/psc913x_heterogeneous_debug.h
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2011
+ *  Freescale Semiconductor Inc.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of Freescale Semiconductor Inc nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#ifndef __PSC913X_HETEROGENEOUS_DEBUG_H
+#define __PSC913X_HETEROGENEOUS_DEBUG_H
+
+#include "psc913x_heterogeneous_common.h"
+
+_OS_BEGIN_EXTERN_C
+
+typedef struct {
+	uintptr_t	base_address; /* Pointer to the core's event log */
+	uint32_t	size; /* Size of the event log (in bytes) */
+	uint32_t	*last_error; /* Pointer to the last error in SmartDSP */
+} os_het_smartdsp_log_t;
+
+_OS_END_EXTERN_C
+
+#endif
diff --git a/drivers/misc/psc913x_heterogeneous_ipc.h b/drivers/misc/psc913x_heterogeneous_ipc.h
new file mode 100644
index 0000000..e0d4d10
--- /dev/null
+++ b/drivers/misc/psc913x_heterogeneous_ipc.h
@@ -0,0 +1,119 @@
+/*
+ * Copyright (c) 2011
+ *  Freescale Semiconductor Inc.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of Freescale Semiconductor Inc nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#ifndef __PSC913X_HETEROGENEOUS_IPC_H
+#define __PSC913X_HETEROGENEOUS_IPC_H
+
+#include "psc913x_heterogeneous_common.h"
+
+_OS_BEGIN_EXTERN_C
+
+/* The IPC driver should use this to calculate the base address from
+ * which to generate the indication.
+ */
+typedef enum {
+	OS_HET_VIRTUAL_INT = 0, /* virtual interrupt; channel offset reletive to GIC */
+	OS_HET_PA_MPIC, /* MPIC message; channel offset reletive to MPIC */
+	OS_HET_DSP_MESH, /* DSP mesh; channel offset reletive DSP subsystem address */
+	OS_HET_NO_INT, /* none */
+	OS_HET_NUM_INDICATIONS /* MUST BE LEFT LAST */
+} os_het_ipc_ind_t;
+
+
+/* The producer and consumer each perform counter++ to their counter.
+ * Warnings:
+ *   The counters must only be incremented, never decremented
+ *   Using the macros OS_HET_INCREMENT_CONSUMER() and OS_HET_INCREMENT_PRODUCER()
+ *   is the reccomended way of incrementing the counters; Direct access should be
+ *   avoided. It is assumed bd_ring_size < MAX_UINT_32
+ */
+typedef struct {
+	uint32_t	producer_num; /* Number of items the producer produced */
+	uint32_t	consumer_num; /* Number of items the consumer consumed */
+} os_het_tracker_t;
+
+#define MAX_UINT_32 0xFFFFFFFF
+/* Evaluate whether the channel is empty */
+#define OS_HET_CH_EMPTY(CH) \
+    ((CH)->tracker.producer_num == (CH)->tracker.consumer_num)
+
+/* Evaluate the number of free BD in the channel */
+#define OS_HET_CH_FREE_BDS(CH) \
+    ((((CH)->tracker.producer_num >= (CH)->tracker.consumer_num)) ?\
+      ((CH)->bd_ring_size - ((CH)->tracker.producer_num - (CH)->tracker.consumer_num)) : \
+      ((CH)->bd_ring_size - ((CH)->tracker.producer_num - (CH)->tracker.consumer_num + MAX_UINT_32 + 1)))
+
+/* Evaluate whether the channel is full */
+#define OS_HET_CH_FULL(CH)  (OS_HET_CH_FREE_BDS(CH) == 0)
+
+/* Increment the producer/consumer index */
+#define OS_HET_INCREMENT_INDEX(CH, INDEX)  (((CH)->tracker.##INDEX)++)
+#define OS_HET_INCREMENT_PRODUCER(CH)  (((CH)->tracker.producer_num)++)
+#define OS_HET_INCREMENT_CONSUMER(CH)  (((CH)->tracker.consumer_num)++)
+
+/* Use to indicate that the message consists of a pointer only */
+#define OS_HET_UNSPECIFIED_LEN  0
+
+typedef struct {
+	uintptr_t	msg_ptr;
+	uint32_t	msg_len;
+} os_het_ipc_bd_t;
+
+typedef enum {
+	OS_HET_IPC_MESSAGE_CH = 0, /* consumer will pre-populate the channel's ptr_bd_base[].msg_ptr */
+	OS_HET_IPC_POINTER_CH = 1 /* producer MUST provide pointers to the ptr_bd_base[].msg_ptr */
+} os_het_ipc_ch_types_t;
+
+typedef struct {
+	uint32_t		producer_initialized; /* mailbox is initialized by the producer */
+	uint32_t		consumer_initialized; /* mailbox is initialized by the consumer */
+	uint32_t		id; /* Mailbox ID - may be used by the applicaiton to identify the channel */
+	os_het_tracker_t	tracker; /* Producer/consumer tracker*/
+	uint32_t		bd_ring_size; /* Size of the mailbox BD ring;This field is set by the consumer */
+	uint32_t		max_msg_size; /* Size of the maximal message that can be passed on this channel */
+	os_het_ipc_ch_types_t	ch_type; /* Type of the channel */
+	os_het_ipc_bd_t		(*bd_base)[]; /* Base of the mailbox pointer BD */
+	os_het_ipc_ind_t	ipc_ind; /* Type of indication to generate to the destination */
+	uint32_t		ind_offset; /* Offset address from base of specific indication register set */
+	uint32_t		ind_value; /* Value to write to ind_offset */
+	uint32_t		pa_reserved[2];
+	void			*semaphore_pointer; /* Future compatibility semaphore pointer */
+} os_het_ipc_channel_t;
+
+
+typedef struct {
+	uint32_t		num_ipc_channels; /* Number of channels in the ipc_channels array */
+	uint32_t		ipc_max_bd_size; /* Maximal size that the ipc_channel.bd_ring_size may have */
+	os_het_ipc_channel_t	(*ipc_channels)[]; /* Pointer to the mailboxes control structure array */
+} os_het_ipc_t;
+
+_OS_END_EXTERN_C
+
+#endif
diff --git a/drivers/misc/psc913x_heterogeneous_mem.h b/drivers/misc/psc913x_heterogeneous_mem.h
new file mode 100644
index 0000000..17cd2b8
--- /dev/null
+++ b/drivers/misc/psc913x_heterogeneous_mem.h
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2011
+ *  Freescale Semiconductor Inc.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of Freescale Semiconductor Inc nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#ifndef __PSC913X_HETEROGENEOUS_MEM_H
+#define __PSC913X_HETEROGENEOUS_MEM_H
+
+#include "psc913x_heterogeneous_common.h"
+
+_OS_BEGIN_EXTERN_C
+
+/* This structure will be used to describe a shared memory slab. */
+typedef struct {
+	uintptr_t   start_addr; /* Indicates the start address of a memory region */
+	uint32_t    size; /* Indicates the size of a memory region */
+} os_het_mem_t;
+
+_OS_END_EXTERN_C
+
+#endif
-- 
1.7.0

