From 20c63180cfe8f19c8931210ed657c3032eb64205 Mon Sep 17 00:00:00 2001
From: Sandeep Singh <Sandeep@freescale.com>
Date: Wed, 14 Sep 2011 17:53:25 +0000
Subject: [PATCH 37/92] crypto: caam - Changes for initialization of KEK in RNG4 block of 9131

Extracted from 913x_WUSDK_REL_0.9.tar.gz vendor drop.

P1010 uses RNGB block and PSC9131 uses RNG4 block. KEK initialization with
RNGB is automatic. With RNG4, one must run a descriptor to generate the KEK.
If it's not done then DECO will hang waiting for it during a key store that
requires the KEK.

Signed-off-by: Sandeep Singh <Sandeep@freescale.com>
Signed-off-by: Naveen Burmi <Naveenburmi@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/crypto/caam/caamalg.c |    2 +-
 drivers/crypto/caam/ctrl.c    |    2 +
 drivers/crypto/caam/intern.h  |    1 +
 drivers/crypto/caam/jr.c      |   66 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 70 insertions(+), 1 deletions(-)

diff --git a/drivers/crypto/caam/caamalg.c b/drivers/crypto/caam/caamalg.c
index 8d47e2e..3a7c76f 100644
--- a/drivers/crypto/caam/caamalg.c
+++ b/drivers/crypto/caam/caamalg.c
@@ -831,7 +831,7 @@ static int aead_authenc_givencrypt(struct aead_givcrypt_request *req)
 	 */
 	append_load_imm_u32(desc, NFIFOENTRY_DEST_DECO | NFIFOENTRY_LC1 |
 			    NFIFOENTRY_STYPE_PAD | NFIFOENTRY_DTYPE_MSG |
-			    NFIFOENTRY_PTYPE_RND | ivsize,
+			    NFIFOENTRY_PTYPE_INCREMENT | ivsize,
 			    LDST_SRCDST_WORD_INFO_FIFO);
 
 	/*
diff --git a/drivers/crypto/caam/ctrl.c b/drivers/crypto/caam/ctrl.c
index f28a44b..2d9fcf6 100644
--- a/drivers/crypto/caam/ctrl.c
+++ b/drivers/crypto/caam/ctrl.c
@@ -206,6 +206,8 @@ static int caam_probe(struct of_device *ofdev,
 		return -ENOMEM;
 	}
 
+	caam_init_kek(ctrlpriv->jrdev[0]);
+
 	/* NOTE: RTIC detection ought to go here, around Si time */
 
 	/* Initialize queue allocator lock */
diff --git a/drivers/crypto/caam/intern.h b/drivers/crypto/caam/intern.h
index 7ca0870..d13bd7a 100644
--- a/drivers/crypto/caam/intern.h
+++ b/drivers/crypto/caam/intern.h
@@ -121,6 +121,7 @@ struct caam_drv_private {
 #endif
 };
 
+void caam_init_kek(struct device *jrdev);
 int caam_jr_reinit(struct device *dev);
 int caam_reset_hw_jr(struct device *dev);
 void caam_jr_algapi_init(struct device *dev);
diff --git a/drivers/crypto/caam/jr.c b/drivers/crypto/caam/jr.c
index 3780c0e..0755e31 100644
--- a/drivers/crypto/caam/jr.c
+++ b/drivers/crypto/caam/jr.c
@@ -10,6 +10,8 @@
 #include "jr.h"
 #include "desc.h"
 #include "intern.h"
+#include "error.h"
+#include "desc_constr.h"
 
 /* Main per-ring interrupt handler */
 static irqreturn_t caam_jr_interrupt(int irq, void *st_dev)
@@ -361,6 +363,70 @@ int caam_jr_reinit(struct device *dev)
 	return 0;
 }
 
+struct caam_key_result {
+	struct completion completion;
+	int err;
+};
+
+static void caam_desc_done(struct device *dev, u32 *desc, u32 err,
+			   void *context)
+{
+	struct caam_key_result *res = context;
+
+#ifdef DEBUG
+	dev_err(dev, "%s %d: err 0x%x\n", __func__, __LINE__, err);
+#endif
+	if (err) {
+		char tmp[CAAM_ERROR_STR_MAX];
+
+		dev_err(dev, "%08x: %s\n", err, caam_jr_strstatus(tmp, err));
+	}
+
+	res->err = err;
+
+	complete(&res->completion);
+}
+
+void caam_init_kek(struct device *jrdev)
+{
+	u32 desc[CAAM_DESC_BYTES_MAX/CAAM_CMD_SZ];
+	struct caam_key_result result;
+	int ret = 0;
+
+	init_job_desc(desc, 0);
+
+	append_load_imm_u32(desc, 0x00, LDST_CLASS_1_CCB | LDST_IMM
+			    | LDST_SRCDST_WORD_KEYSZ_REG
+			    | (LDST_LEN_MASK & 0x04));
+
+	append_operation(desc, OP_TYPE_CLASS1_ALG | OP_ALG_ALGSEL_RNG
+			  | OP_ALG_AAI_CTR_MOD128 | OP_ALG_AS_INIT
+			  | OP_ALG_ENCRYPT);
+
+	append_jump(desc, CLASS_1 | JUMP_TEST_ALL | JUMP_TYPE_LOCAL
+		    | JUMP_TEST_ALL | (JUMP_OFFSET_MASK & 0x01));
+
+	append_load_imm_u32(desc, 0x01, LDST_CLASS_IND_CCB | LDST_IMM
+			     | LDST_SRCDST_WORD_CLRW | (LDST_LEN_MASK & 0x04));
+
+	append_operation(desc, OP_TYPE_CLASS1_ALG | OP_ALG_ALGSEL_RNG
+			  | OP_ALG_AAI_DK | OP_ALG_AS_UPDATE | OP_ALG_ENCRYPT);
+#ifdef DEBUG
+	print_hex_dump(KERN_ERR, "jobdesc@"xstr(__LINE__)": ",
+		       DUMP_PREFIX_ADDRESS, 16, 4, desc, desc_bytes(desc) , 1);
+#endif
+	result.err = 0;
+	init_completion(&result.completion);
+
+	ret = caam_jr_enqueue(jrdev, desc, caam_desc_done, &result);
+	if (!ret) {
+		/* in progress */
+		wait_for_completion_interruptible(&result.completion);
+		ret = result.err;
+	}
+}
+EXPORT_SYMBOL(caam_init_kek);
+
 /*
  * Init JobR independent of platform property detection
  */
-- 
1.7.0

