From b99adc0a89161aada66130ad88111ab080989000 Mon Sep 17 00:00:00 2001
From: Jiang Bin <bin.jiang@windriver.com>
Date: Fri, 13 Jan 2012 11:12:35 +0800
Subject: [PATCH 60/92] rf: Add support for setting TX atten dynamically

Extracted from 913x_WUSDK_REL_0.9.tar.gz vendor drop.

TX attenuation can be set from user space using the ioctl API.

Signed-off-by: Akhil Goyal <akhil.goyal@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/rf/core/rfdev.c     |   21 +++++++++++++++++++++
 drivers/rf/phy/ad_phy.c     |   38 ++++++++++++++++++++++++++++++++++++++
 drivers/rf/phy/ad_phy.h     |   14 ++++++++++++++
 include/linux/rfdev.h       |    2 ++
 include/linux/rfdev_ioctl.h |    9 ++++++++-
 5 files changed, 83 insertions(+), 1 deletions(-)

diff --git a/drivers/rf/core/rfdev.c b/drivers/rf/core/rfdev.c
index ab58f50..325e34e 100644
--- a/drivers/rf/core/rfdev.c
+++ b/drivers/rf/core/rfdev.c
@@ -403,6 +403,7 @@ static ssize_t rf_read(struct file *filep, char __user *buf, size_t size,
 
 int rf_fill_dev_info(struct rf_ctrl_dev *rf_dev, struct rf_dev_info *dev_info)
 {
+	int i;
 	struct rf_phy_dev *phy;
 	struct rf_dev_params *dev_params;
 
@@ -414,6 +415,8 @@ int rf_fill_dev_info(struct rf_ctrl_dev *rf_dev, struct rf_dev_info *dev_info)
 	if (rf_dev->state >= RF_PHY_ATTACHED) {
 		phy = rf_dev->phy;
 		strncpy(dev_info->phy, phy->name, RIF_NAME_SIZE);
+		for (i = 0; i < dev_params->ants; i++)
+			dev_info->tx_atten[i] = phy->tx_atten[i];
 	} else {
 		memset(dev_info->phy, 0, RIF_NAME_SIZE);
 	}
@@ -442,6 +445,7 @@ static int rf_ioctl(struct inode *inode, struct file *filep,
 	struct rif_dac_params dac_params;
 	struct rif_dac_buf dac_buff;
 	struct rf_dev_info dev_info;
+	struct rf_tx_buf tx_buf;
 	u32	*buf;
 	u32 u32arg;
 	int rc = -ENOSYS, size;
@@ -667,6 +671,23 @@ static int rf_ioctl(struct inode *inode, struct file *filep,
 					&dev_info, sizeof(dev_info)))
 			rc = -EFAULT;
 		break;
+	case RIF_SET_TX_ATTEN:
+		if (rf_dev->state < RF_PHY_INITIALIZED) {
+			rc = -EAGAIN;
+			goto out;
+		}
+
+		if (!copy_from_user(&tx_buf, (struct rf_tx_buf *)arg,
+				sizeof(struct rf_tx_buf))) {
+			if (phy && phy->ops->set_tx_atten) {
+				rc = phy->ops->set_tx_atten(phy,
+						tx_buf.tx_if,
+						tx_buf.tx_atten);
+			}
+		} else {
+			rc = -EFAULT;
+		}
+		break;
 
 	default:
 		rc = -ENOSYS;
diff --git a/drivers/rf/phy/ad_phy.c b/drivers/rf/phy/ad_phy.c
index 827c882..c711547 100644
--- a/drivers/rf/phy/ad_phy.c
+++ b/drivers/rf/phy/ad_phy.c
@@ -56,6 +56,7 @@ static int ad_phy_run_cmds(struct rf_phy_dev *ad_phy, struct rif_phy_cmd *cmds,
 static int ad_phy_read(struct rf_phy_dev *ad_phy, u32 start, u32 count,
 		u32 *buff);
 static int ad_phy_write(struct rf_phy_dev *ad_phy, u32 reg, u32 data);
+static int ad_set_tx_atten(struct rf_phy_dev *ad_phy, u32 tx_if, u32 tx_atten);
 static int ad_phy_dac_correction(struct rf_phy_dev *ad_phy,
 					struct rif_dac_params *params);
 static int ad_phy_get_dac_value(struct rf_phy_dev *ad_phy,
@@ -71,6 +72,7 @@ static struct rf_phy_ops ad_phy_ops = {
 	.run_cmds = ad_phy_run_cmds,
 	.read_regs = ad_phy_read,
 	.write_reg = ad_phy_write,
+	.set_tx_atten = ad_set_tx_atten,
 	.read_rssi = NULL,
 	.start = ad_phy_start,
 	.stop = ad_phy_stop,
@@ -181,6 +183,18 @@ static int check_bbpll_lock(struct rf_phy_dev *ad_phy)
 	return 0;
 }
 
+int save_tx_atten(struct rf_phy_dev *ad_phy)
+{
+	u32 buf[4];
+	u32 msb;
+	ad_phy_read(ad_phy, TX1_ATTEN0, sizeof(buf)/sizeof(u32), buf);
+	msb = buf[1] & ATTEN_MSB_BIT_MASK;
+	ad_phy->tx_atten[0] = (msb << MSB_SHIFT) + buf[0];
+	msb = buf[3] & ATTEN_MSB_BIT_MASK;
+	ad_phy->tx_atten[1] = (msb << MSB_SHIFT) + buf[2];
+	return 1;
+}
+
 int ad_phy_run_cmds(struct rf_phy_dev *ad_phy,
 		struct rif_phy_cmd *cmds, int count)
 {
@@ -239,6 +253,7 @@ int ad_phy_run_cmds(struct rf_phy_dev *ad_phy,
 		}
 	}
 
+	save_tx_atten(ad_phy);
 	return 0;
 }
 
@@ -408,6 +423,29 @@ int ad_phy_dac_correction(struct rf_phy_dev *ad_phy,
 	return 0;
 }
 
+int ad_set_tx_atten(struct rf_phy_dev *ad_phy, u32 tx_if, u32 tx_atten)
+{
+	u32 reg_addr1, reg_addr2, reg_val;
+	int rc = 0;
+
+	if (tx_if == 1) {
+		reg_addr1 = TX1_ATTEN0;
+		reg_addr2 = TX1_ATTEN1;
+	} else if (tx_if == 2) {
+		reg_addr1 = TX2_ATTEN0;
+		reg_addr2 = TX2_ATTEN1;
+	} else
+		return 0;
+
+	reg_val = tx_atten & ATTEN0_MASK;
+	rc = ad_phy_write(ad_phy, reg_addr1, reg_val);
+	reg_val = tx_atten & ATTEN1_MASK;
+	reg_val = reg_val >> MSB_SHIFT;
+	rc = ad_phy_write(ad_phy, reg_addr2, reg_val);
+	ad_phy->tx_atten[tx_if - 1] = tx_atten;
+	return rc;
+}
+
 static int ad_phy_remove(struct spi_device *spi)
 {
 	int ret = 0;
diff --git a/drivers/rf/phy/ad_phy.h b/drivers/rf/phy/ad_phy.h
index 2dcf264..66789fc 100644
--- a/drivers/rf/phy/ad_phy.h
+++ b/drivers/rf/phy/ad_phy.h
@@ -3,6 +3,10 @@
  *
  * Copyright 2011 Freescale Semiconductor, Inc.
  *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
  */
 
 #ifndef AD_PHY_H
@@ -41,6 +45,16 @@
 #define DAC1_WORD 	24
 #define DAC1_CONFIG  	26
 
+/* TX Attenuation Registers */
+#define TX1_ATTEN0	0x073
+#define TX1_ATTEN1	0x074
+#define TX2_ATTEN0	0x075
+#define TX2_ATTEN1	0x076
+#define ATTEN0_MASK	0x000000FF
+#define ATTEN1_MASK	0x00000100
+#define ATTEN_MSB_BIT_MASK	0x01
+#define MSB_SHIFT	8
+
 struct ad_dev_info {
 	struct spi_device *ad_spi;
 	u8 rx_buf[10];
diff --git a/include/linux/rfdev.h b/include/linux/rfdev.h
index 0a96f4c..995f194 100644
--- a/include/linux/rfdev.h
+++ b/include/linux/rfdev.h
@@ -65,6 +65,7 @@ struct rf_phy_dev {
 	char	name[RIF_NAME_SIZE];
 	void	*priv;
 	u32	phy_id;
+	u32	tx_atten[MAX_NUM_ANTENNAS];
 	struct	rf_phy_ops *ops;
 	struct  rf_ctrl_dev *ctrl_dev;
 	struct	list_head list;
@@ -87,6 +88,7 @@ struct rf_phy_ops {
 				u32 count, u32 *buff);
 
 	int 	(*write_reg)(struct rf_phy_dev *phy, u32 reg, u32 data);
+	int	(*set_tx_atten)(struct rf_phy_dev *phy, u32 reg, u32 data);
 	u32	(*read_rssi)(struct rf_phy_dev *phy);
 	int	(*start)(struct rf_phy_dev *phy);
 	int	(*stop)(struct rf_phy_dev *phy);
diff --git a/include/linux/rfdev_ioctl.h b/include/linux/rfdev_ioctl.h
index 3060281..690bba2 100644
--- a/include/linux/rfdev_ioctl.h
+++ b/include/linux/rfdev_ioctl.h
@@ -20,6 +20,7 @@
 
 #define RIF_NAME_SIZE	20
 #define RF_MAX_DEVS	6
+#define MAX_NUM_ANTENNAS	2
 
 enum rf_phy_band {
 	LTE_BAND1,
@@ -80,7 +81,7 @@ struct rf_dev_info {
 	unsigned int long_cp;
 	unsigned int cp0_len;
 	unsigned int cp1_len;
-
+	unsigned int tx_atten[MAX_NUM_ANTENNAS];
 };
 
 struct rif_phy_cmd {
@@ -136,6 +137,11 @@ struct rif_dac_buf {
 	__u32 *buf;
 };
 
+struct rf_tx_buf {
+	__u32 tx_if;
+	__u32 tx_atten;
+};
+
 enum rf_timer_src {
 	RF_PPS_SRC_GPS = 1,
 	RF_PPS_SRC_RAW_GPS,
@@ -167,6 +173,7 @@ enum dac_correction_type {
 #define RIF_GET_DEV_INFO	_IOWR(RF_MAGIC, 11, struct rf_dev_info *)
 #define RIF_WRITE_PHY_REGS _IOR(RF_MAGIC, 12, struct rif_write_reg_buf *)
 #define RIF_GET_DAC_VALUE	_IOR(RF_MAGIC, 13, struct rif_dac_buf *)
+#define RIF_SET_TX_ATTEN	_IOW(RF_MAGIC, 14, struct rf_tx_buf *)
 
 
 
-- 
1.7.0

