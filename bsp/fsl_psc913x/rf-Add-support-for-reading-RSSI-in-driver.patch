From e2bd2ef4b11e3b5ddd68b889741ba8fbd8a1f25d Mon Sep 17 00:00:00 2001
From: Jiang Bin <bin.jiang@windriver.com>
Date: Fri, 13 Jan 2012 11:17:37 +0800
Subject: [PATCH 62/92] rf: Add support for reading RSSI in driver

Extracted from 913x_WUSDK_REL_0.9.tar.gz vendor drop.

Add support for reading the RSSI value of a given antenna at any instance
from user space using the ioctl interface.

Signed-off-by: Akhil Goyal <akhil.goyal@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/rf/core/rfdev.c     |   19 ++++++++++++++-----
 drivers/rf/phy/ad_phy.c     |   31 ++++++++++++++++++++++++++++++-
 drivers/rf/phy/ad_phy.h     |    9 +++++++++
 include/linux/rfdev.h       |    3 ++-
 include/linux/rfdev_ioctl.h |    8 +++++++-
 5 files changed, 62 insertions(+), 8 deletions(-)

diff --git a/drivers/rf/core/rfdev.c b/drivers/rf/core/rfdev.c
index 1e50f7d..dec98e6 100644
--- a/drivers/rf/core/rfdev.c
+++ b/drivers/rf/core/rfdev.c
@@ -447,6 +447,7 @@ static int rf_ioctl(struct inode *inode, struct file *filep,
 	struct rf_dev_info dev_info;
 	struct rf_tx_buf tx_buf;
 	struct rf_tx_en_dis tx_en_dis;
+	struct rf_rssi rssi, rssi_buf;
 	u32	*buf;
 	u32 u32arg;
 	int rc = -ENOSYS, size;
@@ -582,15 +583,23 @@ static int rf_ioctl(struct inode *inode, struct file *filep,
 
 	case RIF_READ_RSSI:
 
-		if (rf_dev->state < RF_PHY_ATTACHED) {
+		if (rf_dev->state < RF_PHY_INITIALIZED) {
 			rc = -EAGAIN;
 			goto out;
 		}
+		if (!copy_from_user(&rssi, (struct rf_rssi *)arg,
+			sizeof(struct rf_rssi))) {
 
-		if (phy && phy->ops->read_rssi) {
-			u32arg = phy->ops->read_rssi(phy);
-			if (put_user(u32arg, (int *)arg))
+			if (phy && phy->ops->read_rssi)
+				rc = phy->ops->read_rssi(phy,
+						rssi.ant,
+						&rssi_buf);
+			if (!rc && copy_to_user((struct rf_rssi *)arg,
+						&rssi_buf,
+						sizeof(struct rf_rssi)))
 				rc = -EFAULT;
+		} else {
+			rc = -EFAULT;
 		}
 		break;
 
diff --git a/drivers/rf/phy/ad_phy.c b/drivers/rf/phy/ad_phy.c
index 1a47575..237a597 100644
--- a/drivers/rf/phy/ad_phy.c
+++ b/drivers/rf/phy/ad_phy.c
@@ -58,6 +58,8 @@ static int ad_phy_read(struct rf_phy_dev *ad_phy, u32 start, u32 count,
 static int ad_phy_write(struct rf_phy_dev *ad_phy, u32 reg, u32 data);
 static int ad_set_tx_atten(struct rf_phy_dev *ad_phy, u32 tx_if, u32 tx_atten);
 static int ad_en_dis_tx(struct rf_phy_dev *ad_phy, u32 tx_if, u32 cmd);
+static int ad_read_rssi(struct rf_phy_dev *ad_phy, u32 ant,
+		struct rf_rssi *rssi_buf);
 static int ad_phy_dac_correction(struct rf_phy_dev *ad_phy,
 					struct rif_dac_params *params);
 static int ad_phy_get_dac_value(struct rf_phy_dev *ad_phy,
@@ -75,7 +77,7 @@ static struct rf_phy_ops ad_phy_ops = {
 	.write_reg = ad_phy_write,
 	.set_tx_atten = ad_set_tx_atten,
 	.en_dis_tx = ad_en_dis_tx,
-	.read_rssi = NULL,
+	.read_rssi = ad_read_rssi,
 	.start = ad_phy_start,
 	.stop = ad_phy_stop,
 };
@@ -468,6 +470,33 @@ int ad_en_dis_tx(struct rf_phy_dev *ad_phy, u32 tx_if, u32 tx_cmd)
 	return  ad_phy_write(ad_phy, TX_ENABLE_REG, reg_val);
 }
 
+static int ad_read_rssi(struct rf_phy_dev *ad_phy, u32 ant,
+		struct rf_rssi *rssi_buf)
+{
+	u32 reg_val_buf[6];
+	int rc;
+	rc = ad_phy_read(ad_phy, RSSI_READBACK_REG,
+			sizeof(reg_val_buf) / sizeof(u32), reg_val_buf);
+
+	if (ant == 1) {
+		rssi_buf->symbol = RSSI_RESOLUTION *
+				((reg_val_buf[0] << LSB_SHIFT) +
+				 (reg_val_buf[4] & RSSI_LSB_MASK1));
+		rssi_buf->preamble = RSSI_RESOLUTION *
+				((reg_val_buf[1] << LSB_SHIFT) +
+				 (reg_val_buf[5] & RSSI_LSB_MASK1));
+	} else if (ant == 2) {
+		rssi_buf->symbol = RSSI_RESOLUTION *
+				((reg_val_buf[2] << LSB_SHIFT) +
+				 (reg_val_buf[4] & RSSI_LSB_MASK2));
+		rssi_buf->preamble = RSSI_RESOLUTION *
+				((reg_val_buf[3] << LSB_SHIFT) +
+				 (reg_val_buf[5] & RSSI_LSB_MASK2));
+	} else
+		return -EFAULT;
+	return rc;
+}
+
 static int ad_phy_remove(struct spi_device *spi)
 {
 	int ret = 0;
diff --git a/drivers/rf/phy/ad_phy.h b/drivers/rf/phy/ad_phy.h
index 2f57234..a1bc802 100644
--- a/drivers/rf/phy/ad_phy.h
+++ b/drivers/rf/phy/ad_phy.h
@@ -60,6 +60,15 @@
 #define TX_ENABLE_REG	0x002
 #define TX1_ENABLE_MASK	0x40
 #define TX2_ENABLE_MASK	0x80
+#define RSSI_READBACK_REG 0x1A7
+
+/* For 9 bit RSSI symbol/preamble value RSSI is equivalent to 0.25dB/LSB.*/
+#define RSSI_RESOLUTION	25
+
+#define LSB_SHIFT	1
+#define RSSI_LSB_MASK1	0x01
+#define RSSI_LSB_MASK2	0x02
+
 struct ad_dev_info {
 	struct spi_device *ad_spi;
 	u8 rx_buf[10];
diff --git a/include/linux/rfdev.h b/include/linux/rfdev.h
index 660de9d..967192b 100644
--- a/include/linux/rfdev.h
+++ b/include/linux/rfdev.h
@@ -90,7 +90,8 @@ struct rf_phy_ops {
 	int 	(*write_reg)(struct rf_phy_dev *phy, u32 reg, u32 data);
 	int	(*set_tx_atten)(struct rf_phy_dev *phy, u32 reg, u32 data);
 	int	(*en_dis_tx)(struct rf_phy_dev *phy, u32 tx_if, u32 cmd);
-	u32	(*read_rssi)(struct rf_phy_dev *phy);
+	int	(*read_rssi)(struct rf_phy_dev *phy, u32 ant,
+			struct rf_rssi *rssi_buf);
 	int	(*start)(struct rf_phy_dev *phy);
 	int	(*stop)(struct rf_phy_dev *phy);
 
diff --git a/include/linux/rfdev_ioctl.h b/include/linux/rfdev_ioctl.h
index ea12685..0529916 100644
--- a/include/linux/rfdev_ioctl.h
+++ b/include/linux/rfdev_ioctl.h
@@ -147,6 +147,12 @@ struct rf_tx_en_dis {
 	__u32 tx_cmd;
 };
 
+struct rf_rssi {
+	__u32 ant;
+	__u32 symbol;
+	__u32 preamble;
+};
+
 enum rf_timer_src {
 	RF_PPS_SRC_GPS = 1,
 	RF_PPS_SRC_RAW_GPS,
@@ -170,7 +176,7 @@ enum dac_correction_type {
 #define RIF_GET_STATE		_IOR(RF_MAGIC, 3, unsigned int)
 #define RIF_SET_TIMER_CORRECTION _IOW(RF_MAGIC, 4, struct rif_dac_params *)
 #define	RIF_RUN_PHY_CMDS	_IOW(RF_MAGIC, 5, struct rif_phy_cmd_set *)
-#define RIF_READ_RSSI		_IOR(RF_MAGIC, 6, __u32)
+#define RIF_READ_RSSI		_IOWR(RF_MAGIC, 6, struct rf_rssi *)
 #define RIF_READ_PHY_REGS	_IOR(RF_MAGIC, 7, struct rif_reg_buf *)
 #define RIF_READ_CTRL_REGS	_IOR(RF_MAGIC, 8, struct rif_reg_buf *)
 #define RIF_START		_IO(RF_MAGIC, 9)
-- 
1.7.0

