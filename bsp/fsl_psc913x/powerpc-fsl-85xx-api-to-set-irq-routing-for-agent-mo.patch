From 9e01af749b0dc2ae5813770048f6d1b9336fc829 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Tue, 15 Nov 2011 16:15:03 +0800
Subject: [PATCH 13/92] powerpc/fsl: 85xx: api to set irq routing for agent mode

Extracted from 913x_WUSDK_REL_0.4.tar.gz vendor drop.

Signed-off-by: Jason Jin <Jason.jin@freescale.com>
Signed-off-by: Jin Qing <b24347@freescale.com>
Signed-off-by: Priyanka Jain <Priyanka.Jain@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 arch/powerpc/include/asm/mpic.h |    3 +++
 arch/powerpc/sysdev/mpic.c      |   35 +++++++++++++++++++++++++++++++++--
 2 files changed, 36 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/include/asm/mpic.h b/arch/powerpc/include/asm/mpic.h
index 57ddc10..0d89c77 100644
--- a/arch/powerpc/include/asm/mpic.h
+++ b/arch/powerpc/include/asm/mpic.h
@@ -494,5 +494,8 @@ void mpic_set_clk_ratio(struct mpic *mpic, u32 clock_ratio);
 /* Enable/Disable EPIC serial interrupt mode */
 void mpic_set_serial_int(struct mpic *mpic, int enable);
 
+/* Allow/Disallow the irq routing to IRQ_OUT under EP mode */
+extern void mpic_irq_set_ep(unsigned int irq, unsigned int ep);
+
 #endif /* __KERNEL__ */
 #endif	/* _ASM_POWERPC_MPIC_H */
diff --git a/arch/powerpc/sysdev/mpic.c b/arch/powerpc/sysdev/mpic.c
index 963d0da..c7d9323 100644
--- a/arch/powerpc/sysdev/mpic.c
+++ b/arch/powerpc/sysdev/mpic.c
@@ -1,10 +1,11 @@
 /*
- *  arch/powerpc/kernel/mpic.c
+ *  arch/powerpc/sysdev/mpic.c
  *
  *  Driver for interrupt controllers following the OpenPIC standard, the
- *  common implementation beeing IBM's MPIC. This driver also can deal
+ *  common implementation being IBM's MPIC. This driver also can deal
  *  with various broken implementations of this HW.
  *
+ *  Copyright 2006, 2008-2010 Freescale Semiconductor, Inc.
  *  Copyright (C) 2004 Benjamin Herrenschmidt, IBM Corp.
  *  Copyright 2008-2010 Freescale Semiconductor, Inc.
  *  Copyright 2010-2011 Freescale Semiconductor, Inc.
@@ -1541,6 +1542,36 @@ void mpic_irq_set_priority(unsigned int irq, unsigned int pri)
 	raw_spin_unlock_irqrestore(&mpic_lock, flags);
 }
 
+/*
+ * Sets the External Interrrupt Destination Register when the device
+ * is configured as an EP and is used to interrupt the host.
+ *
+ * EIDRx[EP] = 1 => Irq is not routed to IRQ_OUT
+ * EIDRx[EP] = 0 => Irq is routed to IRQ_OUT for external service
+ *
+ * IRQ_OUT is always level low sensitive.
+ */
+void mpic_irq_set_ep(unsigned int irq, unsigned int ep)
+{
+	struct mpic *mpic = mpic_find(irq);
+	unsigned int src = mpic_irq_to_hw(irq);
+	unsigned long flags;
+	u32 reg;
+
+	BUG_ON(!mpic);
+
+	raw_spin_lock_irqsave(&mpic_lock, flags);
+	reg = mpic_irq_read(src, MPIC_INFO(IRQ_DESTINATION));
+
+	mpic_irq_write(src, MPIC_INFO(IRQ_DESTINATION),
+	       (reg & ~(1 << 31)) | (ep << 31));
+
+	if (ep)
+		mpic_set_irq_type(irq, IRQ_TYPE_LEVEL_LOW);
+
+	raw_spin_unlock_irqrestore(&mpic_lock, flags);
+}
+
 void mpic_setup_this_cpu(void)
 {
 #ifdef CONFIG_SMP
-- 
1.7.0

