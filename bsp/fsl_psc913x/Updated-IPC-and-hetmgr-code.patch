From c1a72e838c07cd7977fa8473d1039f01d09895ad Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Tue, 15 Nov 2011 16:51:34 +0800
Subject: [PATCH 27/92] Updated IPC and hetmgr code

Extracted from 913x_WUSDK_REL_0.4.tar.gz vendor drop.

Signed-off-by: Manish Jaggi <manish.jaggi@freescale.com>
Integrated-by: Jiang Bin <bin.jiang@windriver.com>
---
 drivers/misc/Makefile             |    2 +-
 drivers/misc/fsl_psc913x_hetmgr.c |   30 ++++++++--------
 drivers/misc/fsl_psc913x_ipc.c    |   69 +++++++++++++++++++++++++++----------
 3 files changed, 67 insertions(+), 34 deletions(-)

diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index f9ab51f..1faad49 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -28,8 +28,8 @@ obj-$(CONFIG_DS1682)		+= ds1682.o
 obj-$(CONFIG_TI_DAC7512)	+= ti_dac7512.o
 obj-$(CONFIG_C2PORT)		+= c2port/
 obj-$(CONFIG_IWMC3200TOP)      += iwmc3200top/
-obj-$(CONFIG_PSC9131_HET_IPC)	+= fsl_psc913x_ipc.o
 obj-$(CONFIG_PSC9131_HET_MGR)	+= fsl_psc913x_hetmgr.o
+obj-$(CONFIG_PSC9131_HET_IPC)	+= fsl_psc913x_ipc.o
 obj-y				+= eeprom/
 obj-y				+= cb710/
 obj-$(CONFIG_VMWARE_BALLOON)	+= vmware_balloon.o
diff --git a/drivers/misc/fsl_psc913x_hetmgr.c b/drivers/misc/fsl_psc913x_hetmgr.c
index 32b5a53..a8bd1e8 100644
--- a/drivers/misc/fsl_psc913x_hetmgr.c
+++ b/drivers/misc/fsl_psc913x_hetmgr.c
@@ -42,9 +42,9 @@
 
 #define HW_SEM_OFFSET	0x17100
 
-int devno;
-dev_t dev;
-struct cdev cdev;
+int fslhet_devno;
+dev_t fslhet_dev;
+struct cdev fslhet_cdev;
 uint32_t het_mgr_major;
 uint32_t het_mgr_minor;
 sys_map_t sys_map;
@@ -292,16 +292,16 @@ int het_mgr_init(void)
 	int ret;
 	het_mgr_major = 0;
 	het_mgr_minor = 0;
-	dev = 0;
+	fslhet_dev = 0;
 	/*register /dev/het_mgr character driver */
 	if (het_mgr_major) {
-		dev = MKDEV(het_mgr_major, het_mgr_minor);
-		ret = register_chrdev_region(dev, 1, "/dev/het_mgr");
+		fslhet_dev = MKDEV(het_mgr_major, het_mgr_minor);
+		ret = register_chrdev_region(fslhet_dev, 1, "/dev/het_mgr");
 
 	} else {
-		ret = alloc_chrdev_region(&dev, het_mgr_minor,
+		ret = alloc_chrdev_region(&fslhet_dev, het_mgr_minor,
 				1, "/dev/het_mgr");
-		het_mgr_major = MAJOR(dev);
+		het_mgr_major = MAJOR(fslhet_dev);
 	}
 
 	if (ret < 0) {
@@ -309,12 +309,12 @@ int het_mgr_init(void)
 		return ret;
 	}
 
-	devno = MKDEV(het_mgr_major, het_mgr_minor);
+	fslhet_devno = MKDEV(het_mgr_major, het_mgr_minor);
 	pr_info("Het Mgr %d %d\n", het_mgr_major, het_mgr_minor);
-	cdev_init(&cdev, &het_mgr_fops);
-	cdev.owner = THIS_MODULE;
-	cdev.ops = &het_mgr_fops;
-	ret = cdev_add (&cdev, devno, 1);
+	cdev_init(&fslhet_cdev, &het_mgr_fops);
+	fslhet_cdev.owner = THIS_MODULE;
+	fslhet_cdev.ops = &het_mgr_fops;
+	ret = cdev_add (&fslhet_cdev, fslhet_devno, 1);
 
 	/* Fail gracefully if need be */
 	if (ret) {
@@ -340,8 +340,8 @@ end:
 
 void het_mgr_exit(void)
 {
-	cdev_del(&cdev);
-	unregister_chrdev_region(dev, 1);
+	cdev_del(&fslhet_cdev);
+	unregister_chrdev_region(fslhet_dev, 1);
 }
 
 MODULE_AUTHOR("manish.jaggi@freescale.com");
diff --git a/drivers/misc/fsl_psc913x_ipc.c b/drivers/misc/fsl_psc913x_ipc.c
index c730566..2ede896 100644
--- a/drivers/misc/fsl_psc913x_ipc.c
+++ b/drivers/misc/fsl_psc913x_ipc.c
@@ -71,9 +71,9 @@ user_irq_t	uirq[MAX_MSG_IRQ];
 user_irq_t user_irq_arr[MAX_SC_PA_CHANNELS];
 struct fsl_msg_unit *ipc_msg_intr[MAX_MSG_IRQ];
 
-int devno;
-dev_t dev;
-struct cdev cdev;
+int fslipc_devno;
+dev_t fslipc_dev;
+struct cdev fslipc_cdev;
 uint32_t het_ipc_major;
 uint32_t het_ipc_minor;
 
@@ -83,6 +83,8 @@ os_het_ipc_t *ipc;
 
 /* From bootargs */
 int num_channels, channel_depth;
+static char *max_num_ipc_channels;
+static char *max_channel_depth;
 
 int get_hetmgr_ipc_addr(range_t *);
 int get_hetmgr_mem(range_t *);
@@ -91,14 +93,46 @@ extern struct fsl_msg_unit *fsl_get_msg_unit(void);
 
 static long get_max_num_ipc_channels(void)
 {
-	return 64;
+	unsigned long val;
+	if (!max_num_ipc_channels || (strict_strtoul(max_num_ipc_channels,
+				0, &val) < 0))
+		return -EINVAL;
+
+	return val;
 }
 
 static long get_max_channel_depth(void)
 {
-	return 16;
+	unsigned long val;
+
+	if (!max_channel_depth || (strict_strtoul(max_channel_depth,
+				0, &val) < 0))
+		return -EINVAL;
+
+	return val;
+}
+static int __init get_max_num_ipc_channels_from_cmdline(char *str)
+{
+	if (!str)
+		return 0;
+	printk(KERN_ERR"%s\n", str);
+	max_num_ipc_channels = str;
+	return 1;
 }
 
+static int __init get_max_channel_depth_from_cmdline(char *str)
+{
+	if (!str)
+		return 0;
+
+	printk(KERN_ERR"%s\n", str);
+	max_channel_depth = str;
+	return 1;
+}
+
+__setup("max_num_ipc_channels=", get_max_num_ipc_channels_from_cmdline);
+__setup("max_channel_depth=", get_max_channel_depth_from_cmdline);
+
 /*******************************
  * Interrupt Handlers
  ******************************/
@@ -270,16 +304,16 @@ int ipc_driver_init(void)
 	int ret;
 	het_ipc_major = 0;
 	het_ipc_minor = 0;
-	dev = 0;
+	fslipc_dev = 0;
 	/*register /dev/het_ipc character driver */
 	if (het_ipc_major) {
-		dev = MKDEV(het_ipc_major, het_ipc_minor);
-		ret = register_chrdev_region(dev, 1, "/dev/het_ipc");
+		fslipc_dev = MKDEV(het_ipc_major, het_ipc_minor);
+		ret = register_chrdev_region(fslipc_dev, 1, "/dev/het_ipc");
 
 	} else {
-		ret = alloc_chrdev_region(&dev, het_ipc_minor, 1,
+		ret = alloc_chrdev_region(&fslipc_dev, het_ipc_minor, 1,
 				"/dev/het_ipc");
-		het_ipc_major = MAJOR(dev);
+		het_ipc_major = MAJOR(fslipc_dev);
 	}
 
 	if (ret < 0) {
@@ -287,12 +321,12 @@ int ipc_driver_init(void)
 		return ret;
 	}
 
-	devno = MKDEV(het_ipc_major, het_ipc_minor);
+	fslipc_devno = MKDEV(het_ipc_major, het_ipc_minor);
 	pr_info("Het Ipc %d %d\n", het_ipc_major, het_ipc_minor);
-	cdev_init(&cdev, &het_ipc_fops);
-	cdev.owner = THIS_MODULE;
-	cdev.ops = &het_ipc_fops;
-	ret = cdev_add (&cdev, devno, 1);
+	cdev_init(&fslipc_cdev, &het_ipc_fops);
+	fslipc_cdev.owner = THIS_MODULE;
+	fslipc_cdev.ops = &het_ipc_fops;
+	ret = cdev_add (&fslipc_cdev, fslipc_devno, 1);
 
 	/* Fail gracefully if need be */
 	if (ret)
@@ -305,13 +339,12 @@ int ipc_driver_init(void)
 
 void ipc_driver_exit(void)
 {
-	cdev_del(&cdev);
-	unregister_chrdev_region(dev, 1);
+	cdev_del(&fslipc_cdev);
+	unregister_chrdev_region(fslipc_dev, 1);
 }
 
 MODULE_AUTHOR("manish.jaggi@freescale.com");
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("IPC kernel mode helper driver");
-
 module_init(ipc_driver_init);
 module_exit(ipc_driver_exit);
-- 
1.7.0

