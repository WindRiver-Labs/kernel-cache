From 3d14c3f0d6f5a29439bf0332249f33fcbe1658f4 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Fri, 15 Apr 2011 19:52:26 +0800
Subject: [PATCH 08/27] PowerPC:ACP34xx:Bootwrapper and serial console support for ACP34xx

This patch adds the bootwrapper and a compatible property check for
"acp-uart0" & "acp-uart1" to the generic serial console support code,
which is used by LSI ACP34xx board.

Besides, the patch add clear_utlb_entry codes for zImage start routine.

Extract from vendor drop patch lsi-patch 3.8.1.12.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 arch/powerpc/boot/Makefile |    4 +-
 arch/powerpc/boot/acp.c    |  105 ++++++++++++++++++++++++++++++++++++++++++++
 arch/powerpc/boot/crt0.S   |   65 +++++++++++++++++++++++++++
 arch/powerpc/boot/serial.c |    5 ++
 4 files changed, 178 insertions(+), 1 deletions(-)
 create mode 100644 arch/powerpc/boot/acp.c

diff --git a/arch/powerpc/boot/Makefile b/arch/powerpc/boot/Makefile
index 1966301..1c91d97 100644
--- a/arch/powerpc/boot/Makefile
+++ b/arch/powerpc/boot/Makefile
@@ -16,6 +16,8 @@
 #	To make it easier to setup a cross compiler,
 #	CROSS32_COMPILE is setup as a prefix just like CROSS_COMPILE
 #	in the toplevel makefile.
+#
+# These patches add ACP3400 support signed-off-by: john.jacques@lsi.com
 
 all: $(obj)/zImage
 
@@ -71,7 +73,7 @@ src-wlib := string.S crt0.S crtsavres.S stdio.c main.c \
 		gunzip_util.c elf_util.c $(zlib) devtree.c oflib.c ofconsole.c \
 		4xx.c ebony.c mv64x60.c mpsc.c mv64x60_i2c.c cuboot.c bamboo.c \
 		cpm-serial.c stdlib.c mpc52xx-psc.c planetcore.c uartlite.c \
-		fsl-soc.c mpc8xx.c pq2.c ugecon.c
+		fsl-soc.c mpc8xx.c pq2.c ugecon.c acp.c
 
 ifeq ($(CONFIG_WRHV_P4080DS),y)
 src-wlib += wrhv_p4080_ns16550.c
diff --git a/arch/powerpc/boot/acp.c b/arch/powerpc/boot/acp.c
new file mode 100644
index 0000000..906ed9c
--- /dev/null
+++ b/arch/powerpc/boot/acp.c
@@ -0,0 +1,105 @@
+/*
+ * arch/powerpc/boot/acp.c
+ *
+ * Copyright (C) 2010 LSI
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307	 USA
+ */
+
+#include "io.h"
+#include "ops.h"
+
+#define writeapb(offset, value) out_le32((offset), (value))
+#define readapb(offset) in_le32((offset))
+
+/*
+  ======================================================================
+  ======================================================================
+  serial
+  ======================================================================
+  ======================================================================
+*/
+#define UART0_BASE	(0xf0004000)
+static void *uart0_base;
+
+#define UART_DR	   0x00
+#define UART_FR	   0x18
+#define UART_IBRD  0x24
+#define UART_FBRD  0x28
+#define UART_LCR_H 0x2c
+#define UART_CR	   0x30
+#define UART_IFLS  0x34
+#define UART_IMSC  0x38
+#define UART_ECR   0x04
+
+#define FR_RXFE 0x10
+#define FR_TXFF 0x20
+
+static int
+acp_serial_open(void)
+{
+	writeapb(uart0_base + UART_LCR_H, 0x70);
+	writeapb(uart0_base + UART_CR, 0x301);
+	writeapb(uart0_base + UART_IFLS, 0);
+	writeapb(uart0_base + UART_IMSC, 0x700);
+	writeapb(uart0_base + UART_ECR, 0);
+
+	return 0;
+}
+
+static void
+acp_serial_putc(unsigned char c)
+{
+	while (0 != (readapb(uart0_base + UART_FR) & FR_TXFF))
+		;
+
+	if ('\n' == c) {
+		writeapb(uart0_base + UART_DR, '\r');
+		while (0 != (readapb(uart0_base + UART_FR) & FR_TXFF))
+			;
+	}
+
+	writeapb(uart0_base + UART_DR, c);
+
+	return;
+}
+
+static unsigned char
+acp_serial_getc(void)
+{
+	while (0 != (readapb(uart0_base + UART_FR) & FR_RXFE))
+		;
+	return readapb(uart0_base + UART_DR);
+}
+
+static unsigned char
+acp_serial_tstc(void)
+{
+	return (0 != (readapb(uart0_base + UART_FR) & FR_RXFE));
+}
+
+int
+acp_console_init(void *devp, struct serial_console_data *scdp)
+{
+	uart0_base = (void *) UART0_BASE;
+
+	scdp->open = acp_serial_open;
+	scdp->putc = acp_serial_putc;
+	scdp->getc = acp_serial_getc;
+	scdp->tstc = acp_serial_tstc;
+	scdp->close = NULL;
+
+	return 0;
+}
diff --git a/arch/powerpc/boot/crt0.S b/arch/powerpc/boot/crt0.S
index f1c4dfc..6a76b73 100644
--- a/arch/powerpc/boot/crt0.S
+++ b/arch/powerpc/boot/crt0.S
@@ -7,6 +7,8 @@
  * 2 of the License, or (at your option) any later version.
  *
  * NOTE: this code runs in 32 bit mode and is packaged as ELF32.
+ *
+ * These patches add ACP3400 support signed-off-by: john.jacques@lsi.com
  */
 
 #include "ppc_asm.h"
@@ -22,6 +24,69 @@ _zimage_start_opd:
 _zimage_start:
 	.globl	_zimage_start_lib
 _zimage_start_lib:
+
+#ifdef CONFIG_PPC47x
+	/* Clear all UTLB entries as recommended by IBM (work-around) */
+
+	addis		r3,0,0x8000
+	addi		r4,0,0
+	addi		r5,0,0
+	b		clear_utlb_entry
+
+	#; Align the loop to speed things up a bit.
+        .align		6
+
+clear_utlb_entry:
+
+	tlbwe		r4,r3,0
+	tlbwe		r5,r3,1
+	tlbwe		r5,r3,2
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addis		r3,r3,0x2000
+	cmpwi		r3,0
+	bne		clear_utlb_entry
+	addis		r3,0,0x8000
+	addis		r4,r4,0x100
+	cmpwi		r4,0
+	bne		clear_utlb_entry
+
+	#; Restore the inital UTLB entries.
+	addi		r23,0,0
+	addi		r24,0,0xbf0
+	addi		r25,0,0
+	lis		r26,(0x00030307)@h
+	ori		r26,r26,(0x00030307)@l
+	tlbwe		r24,r23,0
+	tlbwe		r25,r23,1
+	tlbwe		r26,r23,2
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	lis		r23,(0x00f00000)@h
+	ori		r23,r23,(0x00f0000)@l
+	lis		r24,(0xf0000870)@h
+	ori		r24,r24,(0xf0000870)@l
+	lis		r25,(0x00400020)@h
+	ori		r25,r25,(0x00400020)@l
+	lis		r26,(0x00030707)@h
+	ori		r26,r26,(0x00030707)@l
+	tlbwe		r24,r23,0
+	tlbwe		r25,r23,1
+	tlbwe		r26,r23,2
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	addo		r6,r6,r6
+	isync
+#endif
+
 	/* Work out the offset between the address we were linked at
 	   and the address where we're running. */
 	bl	1f
diff --git a/arch/powerpc/boot/serial.c b/arch/powerpc/boot/serial.c
index 725a35d..426b4b8 100644
--- a/arch/powerpc/boot/serial.c
+++ b/arch/powerpc/boot/serial.c
@@ -10,6 +10,8 @@
  * the terms of the GNU General Public License version 2.  This program
  * is licensed "as is" without any warranty of any kind, whether express
  * or implied.
+ *
+ * These patches add ACP3400 support signed-off-by: john.jacques@lsi.com
  */
 #include <stdarg.h>
 #include <stddef.h>
@@ -191,6 +193,9 @@ int serial_console_init(void)
 	else if (dt_is_compatible(devp, "xlnx,opb-uartlite-1.00.b") ||
 		 dt_is_compatible(devp, "xlnx,xps-uartlite-1.00.a"))
 		rc = uartlite_console_init(devp, &serial_cd);
+	else if (dt_is_compatible(devp, "acp-uart0") ||
+		 dt_is_compatible(devp, "acp-uart1"))
+		rc = acp_console_init(devp, &serial_cd);
 
 	/* Add other serial console driver calls here */
 
-- 
1.7.0.5

