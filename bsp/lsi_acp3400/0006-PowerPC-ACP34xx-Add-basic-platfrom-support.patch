From e13494d2786362b038bfed23d6d40c73bfb311af Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Thu, 14 Apr 2011 17:36:39 +0800
Subject: [PATCH 06/27] PowerPC:ACP34xx:Add basic platfrom support

This patch adds basic platform support for LSI ACP34xx board.

LSI ACP34xx uses bolted UTLB entries for I/O & NCA registers.

Extract from vendor drop patch lsi-patch 3.8.1.12.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 arch/powerpc/kernel/head_44x.S      |   49 +++++++++++
 arch/powerpc/platforms/44x/Kconfig  |   14 +++
 arch/powerpc/platforms/44x/Makefile |    1 +
 arch/powerpc/platforms/44x/acpx1.c  |  163 +++++++++++++++++++++++++++++++++++
 4 files changed, 227 insertions(+), 0 deletions(-)
 create mode 100644 arch/powerpc/platforms/44x/acpx1.c

diff --git a/arch/powerpc/kernel/head_44x.S b/arch/powerpc/kernel/head_44x.S
index 1acd175..eea0e10 100644
--- a/arch/powerpc/kernel/head_44x.S
+++ b/arch/powerpc/kernel/head_44x.S
@@ -26,6 +26,8 @@
  * under  the terms of  the GNU General  Public License as published by the
  * Free Software Foundation;  either version 2 of the  License, or (at your
  * option) any later version.
+ *
+ * These patches add ACP3400 support signed-off-by: john.jacques@lsi.com
  */
 
 #include <linux/init.h>
@@ -1077,6 +1079,53 @@ clear_utlb_entry:
 	isync
 #endif /* CONFIG_PPC_EARLY_DEBUG_44x */
 
+#ifdef CONFIG_ACP
+	/* Add bolted entries for I/O. */
+
+ 	/* Word 0 */
+	lis	r3,(0xf0000000)@h
+	ori	r3,r3,PPC47x_TLB0_VALID | PPC47x_TLB0_1M
+
+	/* Word 1 */
+	lis	r4,(0x00400000)@h
+	ori	r4,r4,0x20
+
+	/* Word 2 */
+	li	r5,(PPC47x_TLB2_SW | PPC47x_TLB2_SR | PPC47x_TLB2_I | PPC47x_TLB2_G)
+
+	/* Bolted in way 0, bolt slot 4, we -hope- we don't hit the same
+	 * congruence class as the kernel, we need to make sure of it at
+	 * some point
+	 */
+	lis	r0,0x8d00
+	tlbwe	r3,r0,0
+	tlbwe	r4,r0,1
+	tlbwe	r5,r0,2
+
+ 	/* Word 0 */
+	lis	r3,(0xf0100000)@h
+	ori	r3,r3,PPC47x_TLB0_VALID | PPC47x_TLB0_1M
+
+	/* Word 1 */
+	lis	r4,(0x00500000)@h
+	ori	r4,r4,0x20
+
+	/* Word 2 */
+	li	r5,(PPC47x_TLB2_SW | PPC47x_TLB2_SR | PPC47x_TLB2_I | PPC47x_TLB2_G)
+
+	/* Bolted in way 0, bolt slot 4, we -hope- we don't hit the same
+	 * congruence class as the kernel, we need to make sure of it at
+	 * some point
+	 */
+	lis	r0,0x8c00
+	tlbwe	r3,r0,0
+	tlbwe	r4,r0,1
+	tlbwe	r5,r0,2
+
+	/* Force context change */
+	isync
+#endif
+
 	/* Establish the interrupt vector offsets */
 	SET_IVOR(0,  CriticalInput);
 	SET_IVOR(1,  MachineCheckA);
diff --git a/arch/powerpc/platforms/44x/Kconfig b/arch/powerpc/platforms/44x/Kconfig
index 9365e53..2f291f9 100644
--- a/arch/powerpc/platforms/44x/Kconfig
+++ b/arch/powerpc/platforms/44x/Kconfig
@@ -160,6 +160,20 @@ config YOSEMITE
 	help
 	  This option enables support for the AMCC PPC440EP evaluation board.
 
+config ACP
+	bool "Support for LSI's ACP Platform"
+	depends on (44x || 40x)
+	default n
+	select 440GP
+	select PPC_FPU
+
+config ACPX1
+	bool "ACP on the X1 Platform"
+	depends on ACP
+	default n
+	help
+	  This option enables support for the ACP on the X1 platform.
+
 #config LUAN
 #	bool "Luan"
 #	depends on 44x
diff --git a/arch/powerpc/platforms/44x/Makefile b/arch/powerpc/platforms/44x/Makefile
index ee6185a..969d447 100644
--- a/arch/powerpc/platforms/44x/Makefile
+++ b/arch/powerpc/platforms/44x/Makefile
@@ -5,3 +5,4 @@ obj-$(CONFIG_SAM440EP) 	+= sam440ep.o
 obj-$(CONFIG_WARP)	+= warp.o
 obj-$(CONFIG_XILINX_VIRTEX_5_FXT) += virtex.o
 obj-$(CONFIG_XILINX_ML510) += virtex_ml510.o
+obj-$(CONFIG_ACPX1)	+= acpx1.o
diff --git a/arch/powerpc/platforms/44x/acpx1.c b/arch/powerpc/platforms/44x/acpx1.c
new file mode 100644
index 0000000..35e0488
--- /dev/null
+++ b/arch/powerpc/platforms/44x/acpx1.c
@@ -0,0 +1,163 @@
+/*
+ * PPC476 board specific routines
+ *
+ * Copyright 2009 Torez Smith, IBM Corporation.
+ *
+ * Based on earlier code:
+ *    Matt Porter <mporter@kernel.crashing.org>
+ *    Copyright 2002-2005 MontaVista Software Inc.
+ *
+ *    Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>
+ *    Copyright (c) 2003-2005 Zultys Technologies
+ *
+ *    Rewritten and ported to the merged powerpc tree:
+ *    Copyright 2007 David Gibson <dwg@au1.ibm.com>, IBM Corporation.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ * These patches add ACP3400 support signed-off-by: john.jacques@lsi.com
+ */
+
+#include <linux/init.h>
+#include <linux/of_platform.h>
+#include <linux/rtc.h>
+
+#include <asm/machdep.h>
+#include <asm/prom.h>
+#include <asm/udbg.h>
+#include <asm/time.h>
+#include <asm/uic.h>
+#include <asm/ppc4xx.h>
+#include <asm/mpic.h>
+#include <asm/mmu.h>
+
+static __initdata struct of_device_id acpx14xx_of_bus[] = {
+	{ .compatible = "ibm,plb4", },
+	{ .compatible = "ibm,plb6", },
+	{ .compatible = "ibm,opb", },
+	{ .compatible = "ibm,ebc", },
+	{},
+};
+
+static int __init acpx14xx_device_probe(void)
+{
+	of_platform_bus_probe(NULL, acpx14xx_of_bus, NULL);
+
+	return 0;
+}
+machine_device_initcall(acpx14xx, acpx14xx_device_probe);
+
+/* We can have either UICs or MPICs */
+static void __init acpx14xx_init_irq(void)
+{
+	struct device_node *np;
+
+	/* Find top level interrupt controller */
+	for_each_node_with_property(np, "interrupt-controller") {
+		if (of_get_property(np, "interrupts", NULL) == NULL)
+			break;
+	}
+	if (np == NULL)
+		panic("Can't find top level interrupt controller");
+
+	/* Check type and do appropriate initialization */
+	if (of_device_is_compatible(np, "chrp,open-pic")) {
+		/* The MPIC driver will get everything it needs from the
+		 * device-tree, just pass 0 to all arguments
+		 */
+		struct mpic *mpic =
+			mpic_alloc(np, 0, MPIC_PRIMARY, 0, 0, " MPIC     ");
+		BUG_ON(mpic == NULL);
+		mpic_init(mpic);
+		ppc_md.get_irq = mpic_get_irq;
+	} else
+		panic("Unrecognized top level interrupt controller");
+}
+
+#ifdef CONFIG_SMP
+static void __cpuinit smp_acpx14xx_setup_cpu(int cpu)
+{
+	mpic_setup_this_cpu();
+}
+
+extern void start_secondary_47x(void);
+
+static void __cpuinit smp_acpx14xx_kick_cpu(int cpu)
+{
+	struct device_node *cpunode = of_get_cpu_node(cpu, NULL);
+	const u64 *spin_table_addr_prop;
+	u32 *spin_table;
+
+	BUG_ON(cpunode == NULL);
+
+	/* Assume spin table. We could test for the enable-method in
+	 * the device-tree but currently there's little point as it's
+	 * our only supported method
+	 */
+	spin_table_addr_prop =
+		of_get_property(cpunode, "cpu-release-addr", NULL);
+
+	if (spin_table_addr_prop == NULL) {
+		pr_err("CPU%d: Can't start, macpx1ing cpu-release-addr !\n",
+		       cpu);
+		return;
+	}
+
+	/* Assume it's mapped as part of the linear mapping. This is a bit
+	 * fishy but will work fine for now
+	 */
+	spin_table = (u32 *)__va(*spin_table_addr_prop);
+	pr_debug("CPU%d: Spin table mapped at %p\n", cpu, spin_table);
+
+	spin_table[3] = cpu;
+	smp_wmb();
+	spin_table[1] = __pa(start_secondary_47x);
+	mb();
+}
+
+static struct smp_ops_t acpx1_smp_ops = {
+	.probe		= smp_mpic_probe,
+	.message_pass	= smp_mpic_message_pass,
+	.setup_cpu	= smp_acpx14xx_setup_cpu,
+	.kick_cpu	= smp_acpx14xx_kick_cpu,
+	.give_timebase	= smp_generic_give_timebase,
+	.take_timebase	= smp_generic_take_timebase,
+};
+
+static void __init acpx14xx_smp_init(void)
+{
+	if (mmu_has_feature(MMU_FTR_TYPE_47x))
+		smp_ops = &acpx1_smp_ops;
+}
+
+#else /* CONFIG_SMP */
+static void __init acpx14xx_smp_init(void) { }
+#endif /* CONFIG_SMP */
+
+static void __init acpx14xx_setup_arch(void)
+{
+	acpx14xx_smp_init();
+}
+
+/*
+ * Called very early, MMU is off, device-tree isn't unflattened
+ */
+static int __init acpx14xx_probe(void)
+{
+	unsigned long root = of_get_flat_dt_root();
+
+	return of_flat_dt_is_compatible(root, "ibm,acpx1-4xx");
+}
+
+define_machine(acpx14xx) {
+	.name			= "ACPX1",
+	.probe			= acpx14xx_probe,
+	.progress		= udbg_progress,
+	.init_IRQ		= acpx14xx_init_irq,
+	.setup_arch		= acpx14xx_setup_arch,
+	.restart		= ppc4xx_reset_system,
+	.calibrate_decr		= generic_calibrate_decr,
+};
-- 
1.7.0.5

