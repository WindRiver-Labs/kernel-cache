From 7a17e25defc6fc333d3c81943205893437b7cba0 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Mon, 18 Apr 2011 10:08:31 +0800
Subject: [PATCH 14/27] PowerPC:ACP34xx:add bootloader communication stub

For platform flexibility, normal kernel performance depends on some
critical vars from u-boot env, such as mac address.

Since the uboot variables are stored in NAND flash, the patch use
a notifier in nand flash driver, the notifier is used to inform
intialization routine to make sure ubootenv_initialize() is called
after NAND flash driver loaded.

Fixed context to apply to Wind River kernel tree.

Extract from vendor drop patch lsi-patch 3.8.1.12.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 arch/powerpc/include/asm/ubootenv.h   |   31 +++
 arch/powerpc/platforms/44x/Kconfig    |    6 +
 arch/powerpc/platforms/44x/Makefile   |    1 +
 arch/powerpc/platforms/44x/ubootenv.c |  367 +++++++++++++++++++++++++++++++++
 drivers/mtd/nand/ep501.c              |    8 +
 5 files changed, 413 insertions(+), 0 deletions(-)
 create mode 100644 arch/powerpc/include/asm/ubootenv.h
 create mode 100644 arch/powerpc/platforms/44x/ubootenv.c

diff --git a/arch/powerpc/include/asm/ubootenv.h b/arch/powerpc/include/asm/ubootenv.h
new file mode 100644
index 0000000..ed52678
--- /dev/null
+++ b/arch/powerpc/include/asm/ubootenv.h
@@ -0,0 +1,31 @@
+/*
+ *
+ * Copyright (C) 2009 LSI
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  021.1.1_pre.17  USA
+ */
+
+#ifndef __ASM_ARCH_UBOOTENV_H
+#define __ASM_ARCH_UBOOTENV_H
+
+#include <linux/notifier.h>
+
+
+int ubootenv_get(const char *key, char *value);
+
+extern struct raw_notifier_head ubootenv_head;
+
+#endif
+
diff --git a/arch/powerpc/platforms/44x/Kconfig b/arch/powerpc/platforms/44x/Kconfig
index 0d8e5a2..b668010 100644
--- a/arch/powerpc/platforms/44x/Kconfig
+++ b/arch/powerpc/platforms/44x/Kconfig
@@ -175,6 +175,12 @@ config ACPX1
 	help
 	  This option enables support for the ACP on the X1 platform.
 
+config LSI_UBOOTENV
+	bool "U-Boot Environment Access for LSI's APP and ACP"
+	depends on ( ACP && MTD_NAND_LSI && CRC32 )
+	help
+		Add U-Boot environment access on LSI's APP/ACP boards.
+
 #config LUAN
 #	bool "Luan"
 #	depends on 44x
diff --git a/arch/powerpc/platforms/44x/Makefile b/arch/powerpc/platforms/44x/Makefile
index 4dde328..6fcbf22 100644
--- a/arch/powerpc/platforms/44x/Makefile
+++ b/arch/powerpc/platforms/44x/Makefile
@@ -6,3 +6,4 @@ obj-$(CONFIG_WARP)	+= warp.o
 obj-$(CONFIG_XILINX_VIRTEX_5_FXT) += virtex.o
 obj-$(CONFIG_XILINX_ML510) += virtex_ml510.o
 obj-$(CONFIG_ACPX1)	+= acpx1.o acpclock.o
+obj-$(CONFIG_LSI_UBOOTENV) += ubootenv.o
diff --git a/arch/powerpc/platforms/44x/ubootenv.c b/arch/powerpc/platforms/44x/ubootenv.c
new file mode 100644
index 0000000..ab4e589
--- /dev/null
+++ b/arch/powerpc/platforms/44x/ubootenv.c
@@ -0,0 +1,367 @@
+/*
+ * arch/powerpc/platforms/44x/ubootenv.c
+ *
+ * Copyright (C) 2009 LSI
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  021.1.1_pre.17  USA
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/string.h>
+#include <linux/vmalloc.h>
+#include <linux/mtd/mtd.h>
+#include <linux/crc32.h>
+#include <asm/io.h>
+
+#include <asm/ubootenv.h>
+
+/*
+  ======================================================================
+  Data types and Macros
+  ======================================================================
+*/
+
+/*
+  ERROR
+*/
+
+#define ERROR_PRINT(format, args...) do { \
+printk(KERN_ERR "ubootenv:%s:%d - ERROR - ", __func__, __LINE__); \
+printk(format, ##args); \
+} while (0);
+
+/*
+  ======================================================================
+  Global Variables
+  ======================================================================
+*/
+
+static unsigned long uboot_env_size = (128 * 1024);
+static int uboot_env_current = -1;
+
+#define ENVIRONMENT_DATA_SIZE(size) (size - (2 * sizeof(unsigned long)))
+
+struct environment_t {
+
+	unsigned long crc32;
+	unsigned long flags;
+	unsigned char data[];
+
+} __attribute__ ((packed));
+
+static struct environment_t *environment = (struct environment_t *) 0;
+
+static unsigned long crc32_lut[256] = {
+
+	/*   0 -- */           0u, 1996959894u, 3993919788u, 2567524794u,
+	/*   4 -- */   124634137u, 1886057615u, 3915621685u, 2657392035u,
+	/*   8 -- */   249268274u, 2044508324u, 3772115230u, 2547177864u,
+	/*  12 -- */   162941995u, 2125561021u, 3887607047u, 2428444049u,
+	/*  16 -- */   498536548u, 1789927666u, 4089016648u, 2227061214u,
+	/*  20 -- */   450548861u, 1843258603u, 4107580753u, 2211677639u,
+	/*  24 -- */   325883990u, 1684777152u, 4251122042u, 2321926636u,
+	/*  28 -- */   335633487u, 1661365465u, 4195302755u, 2366115317u,
+	/*  32 -- */   997073096u, 1281953886u, 3579855332u, 2724688242u,
+	/*  36 -- */  1006888145u, 1258607687u, 3524101629u, 2768942443u,
+	/*  40 -- */   901097722u, 1119000684u, 3686517206u, 2898065728u,
+	/*  44 -- */   853044451u, 1172266101u, 3705015759u, 2882616665u,
+	/*  48 -- */   651767980u, 1373503546u, 3369554304u, 3218104598u,
+	/*  52 -- */   565507253u, 1454621731u, 3485111705u, 3099436303u,
+	/*  56 -- */   671266974u, 1594198024u, 3322730930u, 2970347812u,
+	/*  60 -- */   795835527u, 1483230225u, 3244367275u, 3060149565u,
+	/*  64 -- */  1994146192u,   31158534u, 2563907772u, 4023717930u,
+	/*  68 -- */  1907459465u,  112637215u, 2680153253u, 3904427059u,
+	/*  72 -- */  2013776290u,  251722036u, 2517215374u, 3775830040u,
+	/*  76 -- */  2137656763u,  141376813u, 2439277719u, 3865271297u,
+	/*  80 -- */  1802195444u,  476864866u, 2238001368u, 4066508878u,
+	/*  84 -- */  1812370925u,  453092731u, 2181625025u, 4111451223u,
+	/*  88 -- */  1706088902u,  314042704u, 2344532202u, 4240017532u,
+	/*  92 -- */  1658658271u,  366619977u, 2362670323u, 4224994405u,
+	/*  96 -- */  1303535960u,  984961486u, 2747007092u, 3569037538u,
+	/* 100 -- */  1256170817u, 1037604311u, 2765210733u, 3554079995u,
+	/* 104 -- */  1131014506u,  879679996u, 2909243462u, 3663771856u,
+	/* 108 -- */  1141124467u,  855842277u, 2852801631u, 3708648649u,
+	/* 112 -- */  1342533948u,  654459306u, 3188396048u, 3373015174u,
+	/* 116 -- */  1466479909u,  544179635u, 3110523913u, 3462522015u,
+	/* 120 -- */  1591671054u,  702138776u, 2966460450u, 3352799412u,
+	/* 124 -- */  1504918807u,  783551873u, 3082640443u, 3233442989u,
+	/* 128 -- */  3988292384u, 2596254646u,   62317068u, 1957810842u,
+	/* 132 -- */  3939845945u, 2647816111u,   81470997u, 1943803523u,
+	/* 136 -- */  3814918930u, 2489596804u,  225274430u, 2053790376u,
+	/* 140 -- */  3826175755u, 2466906013u,  167816743u, 2097651377u,
+	/* 144 -- */  4027552580u, 2265490386u,  503444072u, 1762050814u,
+	/* 148 -- */  4150417245u, 2154129355u,  426522225u, 1852507879u,
+	/* 152 -- */  4275313526u, 2312317920u,  282753626u, 1742555852u,
+	/* 156 -- */  4189708143u, 2394877945u,  397917763u, 1622183637u,
+	/* 160 -- */  3604390888u, 2714866558u,  953729732u, 1340076626u,
+	/* 164 -- */  3518719985u, 2797360999u, 1068828381u, 1219638859u,
+	/* 168 -- */  3624741850u, 2936675148u,  906185462u, 1090812512u,
+	/* 172 -- */  3747672003u, 2825379669u,  829329135u, 1181335161u,
+	/* 176 -- */  3412177804u, 3160834842u,  628085408u, 1382605366u,
+	/* 180 -- */  3423369109u, 3138078467u,  570562233u, 1426400815u,
+	/* 184 -- */  3317316542u, 2998733608u,  733239954u, 1555261956u,
+	/* 188 -- */  3268935591u, 3050360625u,  752459403u, 1541320221u,
+	/* 192 -- */  2607071920u, 3965973030u, 1969922972u,   40735498u,
+	/* 196 -- */  2617837225u, 3943577151u, 1913087877u,   83908371u,
+	/* 200 -- */  2512341634u, 3803740692u, 2075208622u,  213261112u,
+	/* 204 -- */  2463272603u, 3855990285u, 2094854071u,  198958881u,
+	/* 208 -- */  2262029012u, 4057260610u, 1759359992u,  534414190u,
+	/* 212 -- */  2176718541u, 4139329115u, 1873836001u,  414664567u,
+	/* 216 -- */  2282248934u, 4279200368u, 1711684554u,  285281116u,
+	/* 220 -- */  2405801727u, 4167216745u, 1634467795u,  376229701u,
+	/* 224 -- */  2685067896u, 3608007406u, 1308918612u,  956543938u,
+	/* 228 -- */  2808555105u, 3495958263u, 1231636301u, 1047427035u,
+	/* 232 -- */  2932959818u, 3654703836u, 1088359270u,  936918000u,
+	/* 236 -- */  2847714899u, 3736837829u, 1202900863u,  817233897u,
+	/* 240 -- */  3183342108u, 3401237130u, 1404277552u,  615818150u,
+	/* 244 -- */  3134207493u, 3453421203u, 1423857449u,  601450431u,
+	/* 248 -- */  3009837614u, 3294710456u, 1567103746u,  711928724u,
+	/* 252 -- */  3020668471u, 3272380065u, 1510334235u,  755167117u
+
+};
+
+/*
+  ----------------------------------------------------------------------
+  ubootenv_crc32
+*/
+
+static unsigned long
+ubootenv_crc32(unsigned char *start, unsigned long size)
+{
+
+	unsigned long crc = (unsigned long) 0xffffffff, index;
+
+	for (index = 0; index < size; index++) {
+
+		unsigned long temp = (crc ^ *(start++)) & 0x000000ff;
+		crc = ((crc >> 8) & 0x00ffffff) ^ crc32_lut[temp];
+
+	}
+
+	return ~crc;
+}
+
+/*
+  ----------------------------------------------------------------------
+  ubootenv_read
+*/
+
+static int
+ubootenv_read(struct mtd_info *mtd, size_t size, void *buffer)
+{
+	int read = 0;
+	loff_t offset = 0;
+
+	if (0 != size % mtd->erasesize) {
+		ERROR_PRINT("size=%llu is not a multiple of erasesize=%u\n",
+			     mtd->size, mtd->erasesize);
+		return -1;
+	}
+
+	if (size > mtd->size) {
+		ERROR_PRINT("size=%llu can't contain size=%u\n",
+			     mtd->size, size);
+		return -1;
+	}
+
+	while ((read < size) && (offset < mtd->size)) {
+		int return_code;
+		size_t bytes_read;
+
+		if (0 != mtd->block_isbad(mtd, offset)) {
+			offset += mtd->erasesize;
+			continue;
+		}
+
+		return_code = mtd->read(mtd, offset, mtd->erasesize,
+					 &bytes_read, (u_char *) buffer);
+
+		if (mtd->erasesize != bytes_read) {
+			ERROR_PRINT("Error Reading Environment!\n");
+			return -1;
+		}
+
+		offset += mtd->erasesize;
+		read += mtd->erasesize;
+		buffer += mtd->erasesize;
+	}
+
+	return 0;
+}
+
+/*
+  ======================================================================
+  Public Interface
+  ======================================================================
+*/
+
+/*
+  ----------------------------------------------------------------------
+  ubootenv_initialize
+*/
+
+static int __init
+ubootenv_initialize(struct notifier_block *nfb,
+	unsigned long action, void *pdata)
+{
+	struct environment_t *env0 = NULL;
+	struct environment_t *env1 = NULL;
+	unsigned long crc32_env0;
+	unsigned long crc32_env1;
+	struct mtd_info *mtd_env0;
+	struct mtd_info *mtd_env1;
+
+	env0 = (struct environment_t *) vmalloc(uboot_env_size);
+	if ((struct environment_t *) 0 == env0) {
+		ERROR_PRINT("Unable to allocate %lu bytes\n", uboot_env_size);
+		goto error_out;
+	}
+
+	env1 = (struct environment_t *) vmalloc(uboot_env_size);
+	if ((struct environment_t *) 0 == env1) {
+		ERROR_PRINT("Unable to allocate %lu bytes\n", uboot_env_size);
+		goto error_out;
+	}
+
+	mtd_env0 = get_mtd_device_nm("env-0");
+	if ((struct mtd_info *) -ENODEV == mtd_env0) {
+		ERROR_PRINT(" --> Couldn't get MTD device by name!\n");
+		goto error_out;
+	}
+
+	mtd_env1 = get_mtd_device_nm("env-1");
+	if ((struct mtd_info *) -ENODEV == mtd_env1) {
+		ERROR_PRINT(" --> Couldn't get MTD device by name!\n");
+		goto error_out;
+	}
+
+	if (0 != ubootenv_read(mtd_env0, uboot_env_size, env0))
+		goto error_out;
+
+	if (0 != ubootenv_read(mtd_env1, uboot_env_size, env1))
+		goto error_out;
+
+	crc32_env0 = ubootenv_crc32((unsigned char *) env0->data,
+				     ENVIRONMENT_DATA_SIZE(uboot_env_size));
+	crc32_env1 = ubootenv_crc32((unsigned char *) env1->data,
+				     ENVIRONMENT_DATA_SIZE(uboot_env_size));
+
+	if ((crc32_env0 == env0->crc32) &&
+	    (crc32_env1 != env1->crc32))
+		goto use_env0;
+	else if ((crc32_env0 != env0->crc32) &&
+		   (crc32_env1 == env1->crc32))
+		goto use_env1;
+	else if ((crc32_env0 != env0->crc32) &&
+		   (crc32_env1 != env1->crc32))
+		goto error_out;
+	else if (env0->flags > env1->flags)
+		goto use_env0;
+	else if (env0->flags < env1->flags)
+		goto use_env1;
+	else if (env0->flags == env1->flags)
+		goto use_env0;
+	else
+		goto error_out;
+use_env0:
+	uboot_env_current = 0;
+	vfree((void *) env1);
+	environment = env0;
+	return 0;
+use_env1:
+	uboot_env_current = 1;
+	vfree((void *) env0);
+	environment = env1;
+	return 0;
+error_out:
+	uboot_env_current = -1;
+	if (env0)
+		vfree((void *) env0);
+	if (env1)
+		vfree((void *) env1);
+	ERROR_PRINT("Bad Flags: No Valid U-Boot Environment Found!\n");
+	return -1;
+}
+
+/*
+  ----------------------------------------------------------------------
+  ubootenv_finalize
+*/
+
+static void
+ubootenv_finalize(void)
+{
+	if ((void *) 0 != environment)
+		vfree((void *) environment);
+
+	environment = (struct environment_t *) 0;
+}
+
+/*
+  ----------------------------------------------------------------------
+  ubootenv_get
+*/
+
+int
+ubootenv_get(const char *key, char *value)
+{
+	int return_code = -1;
+	char *string;
+
+	if (NULL == environment) {
+		ERROR_PRINT("Environment Isn't Available!\n");
+		return -1;
+	}
+
+	string = environment->data;
+
+	while (0x00 != string[0]) {
+
+		if (0 == strncmp(key, string, strlen(key))) {
+			char *value_ = strchr(string, '=');
+			++value_;
+			strcpy(value, value_);
+			return_code = 0;
+			break;
+		}
+
+		string += (strlen(string) + 1);
+	}
+
+	return return_code;
+}
+EXPORT_SYMBOL_GPL(ubootenv_get);
+
+RAW_NOTIFIER_HEAD(ubootenv_head);
+
+static struct notifier_block ubootenv_notifier = {
+	.notifier_call = ubootenv_initialize,
+};
+
+static int __init ubootenv_init(void)
+{
+	return raw_notifier_chain_register(
+		&ubootenv_head,
+		&ubootenv_notifier);
+}
+
+static void __exit ubootenv_exit(void)
+{
+	ubootenv_finalize();
+}
+
+arch_initcall(ubootenv_init);
+__exitcall(ubootenv_exit);
diff --git a/drivers/mtd/nand/ep501.c b/drivers/mtd/nand/ep501.c
index 87bbc64..ac2e6ab 100644
--- a/drivers/mtd/nand/ep501.c
+++ b/drivers/mtd/nand/ep501.c
@@ -35,6 +35,10 @@
 #include <linux/of.h>
 #include <asm/cacheflush.h>
 
+#ifdef CONFIG_LSI_UBOOTENV
+#include <asm/ubootenv.h>
+#endif
+
 #include "ep501.h"
 
 
@@ -1263,6 +1267,10 @@ lsi_acp_nand_probe(struct of_device *ofdev,
 #endif
 		add_mtd_device(&priv->nand_mtd);
 
+#ifdef CONFIG_LSI_UBOOTENV
+	raw_notifier_call_chain(&ubootenv_head, 0, NULL);
+#endif
+
 	dev_set_drvdata(&ofdev->dev, priv);
 	return 0;
 
-- 
1.7.0.5

