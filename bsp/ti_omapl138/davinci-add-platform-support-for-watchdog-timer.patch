From e6f2c80602ff3b8df1b25eb50e902c716e81fcff Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 5 Nov 2009 17:53:22 +0800
Subject: [PATCH 15/43] davinci: add platform support for watchdog timer

Original codes from TI Linux Platform Support Package
DaVinci-PSP-SDK-03.20.00.05.tgz http://software-dl.ti.com/dsps/
dsps_public_sw/sdo_sb/targetcontent/psp/DaVinci-PSP-SDK/03_20/index_FDS.html

Add watchdog timer platform support. TIMER64_1 is used as watchdog
timer on OMAPL1xx platform.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-davinci/devices.c         |   48 +++++++++++++++++++++++++++++++
 arch/arm/mach-davinci/include/mach/io.h |   18 +++++++++++
 arch/arm/mach-davinci/time.c            |    2 +-
 3 files changed, 67 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-davinci/devices.c b/arch/arm/mach-davinci/devices.c
index 00a9e0a..72fd97e 100644
--- a/arch/arm/mach-davinci/devices.c
+++ b/arch/arm/mach-davinci/devices.c
@@ -146,3 +146,51 @@ void da8xx_init_rtc(void)
 	(void) platform_device_register(&da8xx_rtc_device);
 }
 
+/*-------------------------------------------------------------------------*/
+
+static struct resource wdt_resources[] = {
+	{
+		.start	= 0x01c21c00,
+		.end	= 0x01c21fff,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct platform_device davinci_wdt_device = {
+	.name		= "watchdog",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(wdt_resources),
+	.resource	= wdt_resources,
+};
+
+static struct resource da8xx_wdt_resources[] = {
+	{
+		.start	= 0x01c21000,
+		.end	= 0x01c21fff,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct platform_device da8xx_wdt_device = {
+	.name		= "watchdog",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(da8xx_wdt_resources),
+	.resource	= da8xx_wdt_resources,
+};
+
+static void davinci_init_wdt(void)
+{
+	if (cpu_is_da8xx())
+		platform_device_register(&da8xx_wdt_device);
+	else
+		platform_device_register(&davinci_wdt_device);
+}
+
+static int __init davinci_init_devices(void)
+{
+	davinci_init_wdt();
+
+
+	return 0;
+}
+arch_initcall(davinci_init_devices);
diff --git a/arch/arm/mach-davinci/include/mach/io.h b/arch/arm/mach-davinci/include/mach/io.h
index 39641e7..3b104e7 100644
--- a/arch/arm/mach-davinci/include/mach/io.h
+++ b/arch/arm/mach-davinci/include/mach/io.h
@@ -50,6 +50,24 @@
 #ifdef __ASSEMBLER__
 #define IOMEM(x)                x
 #else
+
+/*
+ * Functions to access the DaVinci IO region
+ *
+ * NOTE: - Use davinci_read/write[bwl] for physical register addresses
+ *	 - Use __raw_read/write[bwl]() for virtual register addresses
+ *	 - Use IO_ADDRESS(phys_addr) to convert registers to virtual addresses
+ *	 - DO NOT use hardcoded virtual addresses to allow changing the
+ *	   IO address space again if needed
+ */
+#define davinci_readb(a)	(*(volatile unsigned char  *)IO_ADDRESS(a))
+#define davinci_readw(a)	(*(volatile unsigned short *)IO_ADDRESS(a))
+#define davinci_readl(a)	(*(volatile unsigned int   *)IO_ADDRESS(a))
+
+#define davinci_writeb(v, a)	(*(volatile unsigned char  *)IO_ADDRESS(a) = (v))
+#define davinci_writew(v, a)	(*(volatile unsigned short *)IO_ADDRESS(a) = (v))
+#define davinci_writel(v, a)	(*(volatile unsigned int   *)IO_ADDRESS(a) = (v))
+
 #define IOMEM(x)                ((void __force __iomem *)(x))
 
 #define __arch_ioremap(p, s, t)	davinci_ioremap(p, s, t)
diff --git a/arch/arm/mach-davinci/time.c b/arch/arm/mach-davinci/time.c
index 752293b..527b050 100644
--- a/arch/arm/mach-davinci/time.c
+++ b/arch/arm/mach-davinci/time.c
@@ -504,7 +504,7 @@ void davinci_watchdog_reset(void) {
 	struct clk *wd_clk;
 
 	dev_set_name(&dev, "watchdog");
-	wd_clk = clk_get(&dev, NULL);
+	wd_clk = clk_get(&dev, "timer1");
 	if (WARN_ON(IS_ERR(wd_clk)))
 		return;
 	clk_enable(wd_clk);
-- 
1.6.5.2

