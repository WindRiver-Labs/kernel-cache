From 1b2dbe2602b53567a97a0c98f9f90e1849f49949 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Tue, 9 Feb 2010 17:37:16 +0800
Subject: [PATCH] davinci: Add NOR flash support for da850/omap-l138

commit 7c5ec6095a7d29c89ee050281faa068a374a5ac6 upstream

This patch adds platform data for the 8MB NOR flash
found on da850/omap-l138 EVM. Both NOR and NAND can
co-exist on da850/omap-l138 as they are using different
chip selects.

Signed-off-by: Sudhakar Rajashekhara <sudhakar.raj@ti.com>
Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

[Yong Zhang: There is a lot of changes between upstream and
our kernel, so I make some modification to backport it.
And also make some code arrangement. So I add Signed-off-by
instead of Integrated-by]
Signed-off-by: Yong Zhang <yong.zhang@windriver.com>
---
 arch/arm/mach-davinci/board-da850-evm.c    |  104 ++++++++++++++++++----------
 arch/arm/mach-davinci/da850.c              |   50 +++++++++++++
 arch/arm/mach-davinci/include/mach/da8xx.h |    5 ++
 arch/arm/mach-davinci/mux.c                |   14 ++++
 4 files changed, 136 insertions(+), 37 deletions(-)

diff --git a/arch/arm/mach-davinci/board-da850-evm.c b/arch/arm/mach-davinci/board-da850-evm.c
index 0e4b314..4d9f6eb 100644
--- a/arch/arm/mach-davinci/board-da850-evm.c
+++ b/arch/arm/mach-davinci/board-da850-evm.c
@@ -48,6 +48,8 @@
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
+#include <linux/mtd/physmap.h>
+
 #include <mach/emac.h>
 #include <mach/nand.h>
 #include <mach/mmc.h>
@@ -125,6 +127,11 @@ static struct spi_board_info da850_spi_board_info0[] = {
 	},
 };
 
+
+#define SZ_32K	(32 * 1024)
+
+#if defined(CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
+
 #define NAND_BLOCK_SIZE		SZ_128K
 
 struct mtd_partition da850_evm_nandflash_partition[] = {
@@ -151,7 +158,6 @@ struct mtd_partition da850_evm_nandflash_partition[] = {
 	},
 };
 
-#if defined(CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
 static struct davinci_nand_pdata da850_evm_nandflash_data = {
 	.parts		= da850_evm_nandflash_partition,
 	.nr_parts	= ARRAY_SIZE(da850_evm_nandflash_partition),
@@ -160,8 +166,6 @@ static struct davinci_nand_pdata da850_evm_nandflash_data = {
 	.options	= NAND_USE_FLASH_BBT,
 };
 
-#define SZ_32K	(32 * 1024)
-
 static struct resource da850_evm_nandflash_resource[] = {
 	{
 		.start	= 0x62000000,
@@ -185,6 +189,59 @@ static struct platform_device da850_evm_nandflash_device = {
 };
 #endif
 
+#if defined(CONFIG_MTD_CFI) || defined(CONFIG_MTD_CFI_MODULE)
+
+static struct mtd_partition da850_evm_norflash_partition[] = {
+	{
+		.name           = "NOR filesystem",
+		.offset         = 0,
+		.size           = MTDPART_SIZ_FULL,
+		.mask_flags     = 0,
+	},
+};
+
+static struct physmap_flash_data da850_evm_norflash_data = {
+	.width		= 2,
+	.parts		= da850_evm_norflash_partition,
+	.nr_parts	= ARRAY_SIZE(da850_evm_norflash_partition),
+};
+
+static struct resource da850_evm_norflash_resource[] = {
+	{
+		.start	= DA8XX_AEMIF_CS2_BASE,
+		.end	= DA8XX_AEMIF_CS2_BASE + SZ_32M - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct platform_device da850_evm_norflash_device = {
+	.name		= "physmap-flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data  = &da850_evm_norflash_data,
+	},
+	.num_resources	= 1,
+	.resource	= da850_evm_norflash_resource,
+};
+
+#define DA8XX_AEMIF_CE2CFG_OFFSET	0x10
+#define DA8XX_AEMIF_ASIZE_16BIT		0x1
+
+static void __init da850_evm_init_nor(void)
+{
+	void __iomem *aemif_addr;
+
+	aemif_addr = ioremap(DA8XX_AEMIF_CTL_BASE, SZ_32K);
+
+	/* Configure data bus width of CS2 to 16 bit */
+	writel(readl(aemif_addr + DA8XX_AEMIF_CE2CFG_OFFSET) |
+		DA8XX_AEMIF_ASIZE_16BIT,
+		aemif_addr + DA8XX_AEMIF_CE2CFG_OFFSET);
+
+	iounmap(aemif_addr);
+}
+#endif
+
 static int eth_addr_setup(char *str)
 {
 	int i;
@@ -289,6 +346,9 @@ static struct platform_device *da850_evm_devices[] __initdata = {
 #if defined(CONFIG_MTD_NAND_DAVINCI) || defined(CONFIG_MTD_NAND_DAVINCI_MODULE)
 	&da850_evm_nandflash_device,
 #endif
+#if defined(CONFIG_MTD_CFI) || defined(CONFIG_MTD_CFI_MODULE)
+	&da850_evm_norflash_device,
+#endif
 };
 
 static void __init da850_map_io(void)
@@ -383,40 +443,10 @@ static __init void da850_evm_init(void)
 	davinci_cfg_reg(DA850_EMA_A_1);
 	davinci_cfg_reg(DA850_EMA_A_2);
 	davinci_cfg_reg(DA850_NEMA_WE);
-#elif defined(CONFIG_MTD_CFI) || defined(CONFIG_MTD_CFI_MODULE)
-	davinci_cfg_reg(DA850_EMA_D_0);
-	davinci_cfg_reg(DA850_EMA_D_1);
-	davinci_cfg_reg(DA850_EMA_D_2);
-	davinci_cfg_reg(DA850_EMA_D_3);
-	davinci_cfg_reg(DA850_EMA_D_4);
-	davinci_cfg_reg(DA850_EMA_D_5);
-	davinci_cfg_reg(DA850_EMA_D_6);
-	davinci_cfg_reg(DA850_EMA_D_7);
-	davinci_cfg_reg(DA850_EMA_D_8);
-	davinci_cfg_reg(DA850_EMA_D_9);
-	davinci_cfg_reg(DA850_EMA_D_10);
-	davinci_cfg_reg(DA850_EMA_D_11);
-	davinci_cfg_reg(DA850_EMA_D_12);
-	davinci_cfg_reg(DA850_EMA_D_13);
-	davinci_cfg_reg(DA850_EMA_D_14);
-	davinci_cfg_reg(DA850_EMA_D_15);
-	davinci_cfg_reg(DA850_EMA_A_0);
-	davinci_cfg_reg(DA850_EMA_A_1);
-	davinci_cfg_reg(DA850_EMA_A_2);
-	davinci_cfg_reg(DA850_EMA_A_3);
-	davinci_cfg_reg(DA850_EMA_A_4);
-	davinci_cfg_reg(DA850_EMA_A_5);
-	davinci_cfg_reg(DA850_EMA_A_6);
-	davinci_cfg_reg(DA850_EMA_A_7);
-	davinci_cfg_reg(DA850_EMA_A_8);
-	davinci_cfg_reg(DA850_EMA_A_9);
-	davinci_cfg_reg(DA850_EMA_A_10);
-	davinci_cfg_reg(DA850_EMA_A_11);
-	davinci_cfg_reg(DA850_EMA_A_12);
-	davinci_cfg_reg(DA850_EMA_BA_1);
-	davinci_cfg_reg(DA850_NEMA_WE);
-	davinci_cfg_reg(DA850_NEMA_CS_2);
-	davinci_cfg_reg(DA850_NEMA_OE);
+#endif
+#if defined(CONFIG_MTD_CFI) || defined(CONFIG_MTD_CFI_MODULE)
+	da8xx_pinmux_setup(da850_nor_pins);
+	da850_evm_init_nor();
 #endif
 
 	platform_add_devices(da850_evm_devices,
diff --git a/arch/arm/mach-davinci/da850.c b/arch/arm/mach-davinci/da850.c
index 5e49221..e922efe 100644
--- a/arch/arm/mach-davinci/da850.c
+++ b/arch/arm/mach-davinci/da850.c
@@ -501,6 +501,40 @@ static const struct mux_config davinci_da850_pins[] = {
 	DA8XX_MUX_CFG(DA850,	NEMA_OE,	7,   20,    15,   1,     false)
 	DA8XX_MUX_CFG(DA850,	EMA_RNW,	7,   24,    15,   1,     false)
 	DA8XX_MUX_CFG(DA850,	EMA_WAIT_0,	7,   28,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_0,	12,  28,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_3,	12,  16,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_4,	12,  12,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_5,	12,  8,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_6,	12,  4,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_7,	12,  0,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_8,	11,  28,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_9,	11,  24,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_10,	11,  20,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_11,	11,  16,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_12,	11,  12,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_13,	11,  8,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_14,	11,  4,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_15,	11,  0,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_16,	10,  28,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_17,	10,  24,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_18,	10,  20,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_19,	10,  16,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_20,	10,  12,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_21,	10,  8,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_22,	10,  4,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_A_23,	10,  0,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_8,	8,   28,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_9,	8,   24,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_10,	8,   20,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_11,	8,   16,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_12,	8,   12,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_13,	8,   8,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_14,	8,   4,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_D_15,	8,   0,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_BA_1,	5,   24,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_CLK,	6,   0,     15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	EMA_WAIT_1,	6,   24,    15,   1,     false)
+	DA8XX_MUX_CFG(DA850,	NEMA_CS_2,	7,   0,     15,   1,     false)
 	/* EMIF3a/EMIFB function - pins are not muxed */
 	/* SPI0 function */
 	DA8XX_MUX_CFG(DA850,	SPI0_CLK,	3,   0,    15,   1,     false)
@@ -635,6 +669,22 @@ static const struct mux_config davinci_da850_pins[] = {
 	DA8XX_MUX_CFG(DA850,	GPIO2_8,	5,    28,  15,   8,     false)
 };
 
+const short da850_nor_pins[] __initdata = {
+	DA850_EMA_BA_1, DA850_EMA_CLK, DA850_EMA_WAIT_1, DA850_NEMA_CS_2,
+	DA850_NEMA_WE, DA850_NEMA_OE, DA850_EMA_D_0, DA850_EMA_D_1,
+	DA850_EMA_D_2, DA850_EMA_D_3, DA850_EMA_D_4, DA850_EMA_D_5,
+	DA850_EMA_D_6, DA850_EMA_D_7, DA850_EMA_D_8, DA850_EMA_D_9,
+	DA850_EMA_D_10, DA850_EMA_D_11, DA850_EMA_D_12, DA850_EMA_D_13,
+	DA850_EMA_D_14, DA850_EMA_D_15, DA850_EMA_A_0, DA850_EMA_A_1,
+	DA850_EMA_A_2, DA850_EMA_A_3, DA850_EMA_A_4, DA850_EMA_A_5,
+	DA850_EMA_A_6, DA850_EMA_A_7, DA850_EMA_A_8, DA850_EMA_A_9,
+	DA850_EMA_A_10, DA850_EMA_A_11, DA850_EMA_A_12, DA850_EMA_A_13,
+	DA850_EMA_A_14, DA850_EMA_A_15, DA850_EMA_A_16, DA850_EMA_A_17,
+	DA850_EMA_A_18, DA850_EMA_A_19, DA850_EMA_A_20, DA850_EMA_A_21,
+	DA850_EMA_A_22, DA850_EMA_A_23,
+	-1
+};
+
 static const s8 dma0_chan_da850_no_event[] = {
 	20, 21,
 	-1
diff --git a/arch/arm/mach-davinci/include/mach/da8xx.h b/arch/arm/mach-davinci/include/mach/da8xx.h
index fb3d9fa..0973d4a 100644
--- a/arch/arm/mach-davinci/include/mach/da8xx.h
+++ b/arch/arm/mach-davinci/include/mach/da8xx.h
@@ -43,6 +43,9 @@ int cppi41_init(void);
 int da8xx_register_sata(void);
 extern void da8xx_usb_configure(struct musb_hdrc_platform_data *pdata,
 					u8 num_inst);
+extern const short da850_nor_pins[];
+int da8xx_pinmux_setup(const short pins[]);
+
 #endif
 
 #define DA8XX_BOOT_CFG_BASE		0x01C14000
@@ -104,7 +107,9 @@ extern void da8xx_usb_configure(struct musb_hdrc_platform_data *pdata,
 #define DA8XX_EMAC_CTRL_RAM_SIZE       SZ_8K
 
 #define DA8XX_LCD_CNTRL_BASE			0x01E13000
+#define DA8XX_AEMIF_CS2_BASE			0x60000000
 #define DA8XX_EMIF30_ASYNC_DATA_CE5_BASE	0xC0000000
+#define DA8XX_AEMIF_CTL_BASE			0x68000000
 
 #define DA8XX_USB0_BASE				0x01E00000
 #define DA8XX_USB1_BASE				0x01E25000
diff --git a/arch/arm/mach-davinci/mux.c b/arch/arm/mach-davinci/mux.c
index 6510881..6189806 100644
--- a/arch/arm/mach-davinci/mux.c
+++ b/arch/arm/mach-davinci/mux.c
@@ -142,3 +142,17 @@ int __init_or_module davinci_cfg_reg(const unsigned long index)
 	return 0;
 }
 EXPORT_SYMBOL(davinci_cfg_reg);
+
+int da8xx_pinmux_setup(const short pins[])
+{
+	int i, error = -EINVAL;
+
+	if (pins)
+		for (i = 0; pins[i] >= 0; i++) {
+			error = davinci_cfg_reg(pins[i]);
+				if (error)
+					break;
+		}
+
+	return error;
+}
-- 
1.7.0

