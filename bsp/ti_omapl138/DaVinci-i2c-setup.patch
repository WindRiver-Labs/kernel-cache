From bdcf74897e643e515130ff7f2ae52a96b27a9110 Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 5 Nov 2009 17:53:13 +0800
Subject: [PATCH 09/43] DaVinci: i2c setup

Original codes from TI Linux Platform Support Package
DaVinci-PSP-SDK-03.20.00.05.tgz http://software-dl.ti.com/dsps/
dsps_public_sw/sdo_sb/targetcontent/psp/DaVinci-PSP-SDK/03_20/index_FDS.html

L138 I2C initialization.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-davinci/Makefile           |    2 +-
 arch/arm/mach-davinci/board-da850-evm.c  |   20 +++++
 arch/arm/mach-davinci/devices.c          |  122 ++++++++++++++++++++++++++++++
 arch/arm/mach-davinci/include/mach/i2c.h |    7 +-
 drivers/i2c/busses/i2c-davinci.c         |    2 +-
 5 files changed, 149 insertions(+), 4 deletions(-)
 create mode 100644 arch/arm/mach-davinci/devices.c

diff --git a/arch/arm/mach-davinci/Makefile b/arch/arm/mach-davinci/Makefile
index 2844503..cd7a9c4 100644
--- a/arch/arm/mach-davinci/Makefile
+++ b/arch/arm/mach-davinci/Makefile
@@ -5,7 +5,7 @@
 
 # Common objects
 obj-y 			:= time.o clock.o serial.o io.o id.o psc.o \
-			   gpio.o dma.o
+			   gpio.o devices.o dma.o
 
 obj-$(CONFIG_DAVINCI_MUX)		+= mux.o
 
diff --git a/arch/arm/mach-davinci/board-da850-evm.c b/arch/arm/mach-davinci/board-da850-evm.c
index 56e2a89..6c7b817 100644
--- a/arch/arm/mach-davinci/board-da850-evm.c
+++ b/arch/arm/mach-davinci/board-da850-evm.c
@@ -37,7 +37,9 @@
 #include <mach/da8xx.h>
 #include <mach/serial.h>
 #include <mach/mux.h>
+#include <mach/i2c.h>
 #include <linux/platform_device.h>
+#include <linux/i2c.h>
 #include <mach/emac.h>
 #include <mach/cp_intc.h>
 
@@ -70,10 +72,27 @@ static int eth_addr_setup(char *str)
 /* Get MAC address from kernel boot parameter eth=AA:BB:CC:DD:EE:FF */
 __setup("eth=", eth_addr_setup);
 
+static struct i2c_board_info __initdata i2c_info[] =  {
+	{
+		I2C_BOARD_INFO("pcf8575", 0x20),
+	},
+};
+
+static struct davinci_i2c_platform_data da850_i2c_data0 = {
+	.bus_freq       = 100,
+	.bus_delay      = 0,
+};
+
 static struct davinci_uart_config uart_config __initdata = {
 	.enabled_uarts = ((1 << 0) | (1 << 1) | (1 << 2)),
 };
 
+static void __init da850_evm_init_i2c(void)
+{
+	davinci_init_i2c(&da850_i2c_data0);
+	i2c_register_board_info(1, i2c_info, ARRAY_SIZE(i2c_info));
+}
+
 static void __init da850_map_io(void)
 {
 	davinci_map_common_io();
@@ -95,6 +114,7 @@ static __init void da850_evm_init(void)
 	__raw_writel(0, IO_ADDRESS(DA8XX_UART1_BASE) + 0x30);
 	__raw_writel(0, IO_ADDRESS(DA8XX_UART0_BASE) + 0x30);
 
+	da850_evm_init_i2c();
 	if (da850_evm_emac_pdata.rmii_en) {
 		/* RMII */
 		__raw_writel((__raw_readl(addr)) | BIT(8), addr);
diff --git a/arch/arm/mach-davinci/devices.c b/arch/arm/mach-davinci/devices.c
new file mode 100644
index 0000000..f968ea4
--- /dev/null
+++ b/arch/arm/mach-davinci/devices.c
@@ -0,0 +1,122 @@
+/*
+ * mach-davinci/devices.c
+ *
+ * DaVinci platform device setup/initialization
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/dma-mapping.h>
+#include <linux/io.h>
+#include <linux/random.h>
+
+#include <asm/io.h>
+#include <asm/mach-types.h>
+#include <asm/mach/map.h>
+
+#include <mach/hardware.h>
+#include <mach/da8xx.h>
+#include <mach/i2c.h>
+#include <mach/cpu.h>
+#include <mach/mux.h>
+#include <mach/da8xx.h>
+
+#include "clock.h"
+
+
+#define DAVINCI_I2C_BASE	     0x01C21000
+
+static struct resource i2c_resources[] = {
+	{
+		.start		= DAVINCI_I2C_BASE,
+		.end		= DAVINCI_I2C_BASE + 0x40,
+		.flags		= IORESOURCE_MEM,
+	},
+	{
+		.start		= IRQ_I2C,
+		.flags		= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device davinci_i2c_device = {
+	.name           = "i2c_davinci",
+	.id             = 1,
+	.num_resources	= ARRAY_SIZE(i2c_resources),
+	.resource	= i2c_resources,
+};
+
+static struct resource da8xx_i2c_resources0[] = {
+	{
+		.start          = DA8XX_I2C0_BASE,
+		.end            = DA8XX_I2C0_BASE + SZ_4K - 1,
+		.flags          = IORESOURCE_MEM,
+	},
+	{
+		.start          = IRQ_DA8XX_I2CINT0,
+		.end            = IRQ_DA8XX_I2CINT0,
+		.flags          = IORESOURCE_IRQ,
+	},
+};
+
+static struct resource da8xx_i2c_resources1[] = {
+	{
+		.start          = DA8XX_I2C1_BASE,
+		.end            = DA8XX_I2C1_BASE + SZ_4K - 1,
+		.flags          = IORESOURCE_MEM,
+	},
+	{
+		.start          = IRQ_DA8XX_I2CINT1,
+		.end            = IRQ_DA8XX_I2CINT1,
+		.flags          = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device da8xx_i2c_device[] = {
+	[0] = {
+		.name           = "i2c_davinci",
+		.id             = 1,
+		.num_resources  = ARRAY_SIZE(da8xx_i2c_resources0),
+		.resource       = da8xx_i2c_resources0,
+	},
+	[1] = {
+		.name           = "i2c_davinci",
+		.id             = 2,
+		.num_resources  = ARRAY_SIZE(da8xx_i2c_resources1),
+		.resource       = da8xx_i2c_resources1,
+	}
+};
+
+void __init davinci_init_i2c(struct davinci_i2c_platform_data *pdata)
+{
+	int i = 0;
+
+	if (cpu_is_da830()) {
+		davinci_cfg_reg(DA830_I2C0_SDA);
+		davinci_cfg_reg(DA830_I2C0_SCL);
+	}
+
+	if (cpu_is_da850()) {
+		davinci_cfg_reg(DA850_I2C0_SDA);
+		davinci_cfg_reg(DA850_I2C0_SCL);
+	}
+
+	if (cpu_is_davinci_dm644x() ||
+	    cpu_is_davinci_dm646x() ||
+	    cpu_is_davinci_dm355()) {
+		davinci_i2c_device.dev.platform_data = pdata;
+		(void) platform_device_register(&davinci_i2c_device);
+	} else if (cpu_is_da8xx()) {
+		for (i = 0; i < 2; i++) {
+			da8xx_i2c_device[i].dev.platform_data = pdata;
+			(void) platform_device_register(&da8xx_i2c_device[i]);
+		}
+	}
+}
+
diff --git a/arch/arm/mach-davinci/include/mach/i2c.h b/arch/arm/mach-davinci/include/mach/i2c.h
index e2f5416..c248e9b 100644
--- a/arch/arm/mach-davinci/include/mach/i2c.h
+++ b/arch/arm/mach-davinci/include/mach/i2c.h
@@ -14,8 +14,11 @@
 
 /* All frequencies are expressed in kHz */
 struct davinci_i2c_platform_data {
-	unsigned int	bus_freq;	/* standard bus frequency */
-	unsigned int	bus_delay;	/* transaction delay */
+	unsigned int	bus_freq;	/* standard bus frequency (kHz) */
+	unsigned int	bus_delay;	/* post-transaction delay (usec) */
 };
 
+/* for board setup code */
+void davinci_init_i2c(struct davinci_i2c_platform_data *);
+
 #endif /* __ASM_ARCH_I2C_H */
diff --git a/drivers/i2c/busses/i2c-davinci.c b/drivers/i2c/busses/i2c-davinci.c
index 125d11b..c5d76f9 100644
--- a/drivers/i2c/busses/i2c-davinci.c
+++ b/drivers/i2c/busses/i2c-davinci.c
@@ -554,7 +554,7 @@ static int davinci_i2c_probe(struct platform_device *pdev)
 	dev->irq = irq->start;
 	platform_set_drvdata(pdev, dev);
 
-	dev->clk = clk_get(&pdev->dev, NULL);
+	dev->clk = clk_get(&pdev->dev, "i2c0");
 	if (IS_ERR(dev->clk)) {
 		r = -ENODEV;
 		goto err_free_mem;
-- 
1.6.5.2

