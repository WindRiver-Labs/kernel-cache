From 1e3ef80ef961040731ac9243d98255f24d0132af Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 5 Nov 2009 17:53:39 +0800
Subject: [PATCH 28/43] Add the da850 musb platform data.

Original codes from TI Linux Platform Support Package
DaVinci-PSP-SDK-03.20.00.06.tgz http://software-dl.ti.com/dsps/
dsps_public_sw/sdo_sb/targetcontent/psp/DaVinci-PSP-SDK/03_20/index_FDS.html

Add the support for the musb on da850.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-davinci/Makefile                |    2 +-
 arch/arm/mach-davinci/board-da850-evm.c       |   18 ++++
 arch/arm/mach-davinci/devices.c               |  110 +++++++++++++++++++++++++
 arch/arm/mach-davinci/include/mach/da8xx.h    |    3 +
 arch/arm/mach-davinci/include/mach/usb.h      |    1 +
 arch/arm/mach-davinci/include/mach/usb_musb.h |   41 +++++++++
 arch/arm/mach-davinci/usb.c                   |   76 +++++++++++++++++
 7 files changed, 250 insertions(+), 1 deletions(-)
 create mode 100644 arch/arm/mach-davinci/include/mach/usb_musb.h
 create mode 100644 arch/arm/mach-davinci/usb.c

diff --git a/arch/arm/mach-davinci/Makefile b/arch/arm/mach-davinci/Makefile
index d22ccd7..8696e80 100644
--- a/arch/arm/mach-davinci/Makefile
+++ b/arch/arm/mach-davinci/Makefile
@@ -5,7 +5,7 @@
 
 # Common objects
 obj-y 			:= time.o clock.o serial.o io.o id.o psc.o \
-			   gpio.o devices.o dma.o
+			   gpio.o devices.o usb.o dma.o
 
 obj-$(CONFIG_DAVINCI_MUX)		+= mux.o
 
diff --git a/arch/arm/mach-davinci/board-da850-evm.c b/arch/arm/mach-davinci/board-da850-evm.c
index 51eda99..4c482c7 100644
--- a/arch/arm/mach-davinci/board-da850-evm.c
+++ b/arch/arm/mach-davinci/board-da850-evm.c
@@ -27,6 +27,7 @@
 #include <linux/spi/spi.h>
 #include <linux/spi/flash.h>
 #include <linux/spi/davinci_spi_master.h>
+#include <linux/usb/musb.h>
 
 #include <asm/setup.h>
 #include <asm/mach-types.h>
@@ -244,6 +245,22 @@ static struct davinci_mmc_config da850_mmc_config = {
 };
 #endif
 
+static struct musb_hdrc_platform_data usb_evm_data[] = {
+       {
+#ifdef CONFIG_USB_MUSB_OTG
+               .mode = MUSB_OTG,
+#elif defined(CONFIG_USB_MUSB_PERIPHERAL)
+               .mode =  MUSB_PERIPHERAL,
+#elif defined(CONFIG_USB_MUSB_HOST)
+               .mode = MUSB_HOST,
+#endif
+               .power = 255,
+               .potpgt = 8,
+               .set_vbus = NULL, /* VBUs is directly controlled by the IP */
+       }
+};
+
+
 static struct i2c_board_info __initdata i2c_info[] =  {
 	{
 		I2C_BOARD_INFO("pcf8575", 0x20),
@@ -453,6 +470,7 @@ static __init void da850_evm_init(void)
 	davinci_cfg_reg(DA850_MDIO_D);
 
 	da850_init_emac(&da850_evm_emac_pdata);
+	da8xx_usb_configure(usb_evm_data, ARRAY_SIZE(usb_evm_data));
 }
 
 static __init void da850_evm_irq_init(void)
diff --git a/arch/arm/mach-davinci/devices.c b/arch/arm/mach-davinci/devices.c
index f43232b..046ee67 100644
--- a/arch/arm/mach-davinci/devices.c
+++ b/arch/arm/mach-davinci/devices.c
@@ -30,6 +30,8 @@
 #include <mach/mmc.h>
 #include <mach/da8xx_lcdc.h>
 #include <mach/da8xx.h>
+#include <mach/usb.h>
+#include <mach/usb_musb.h>
 #include <mach/cppi41.h>
 
 #include "clock.h"
@@ -571,3 +573,111 @@ static int __init davinci_init_devices(void)
 	return 0;
 }
 arch_initcall(davinci_init_devices);
+
+#define CFGCHIP2                IO_ADDRESS(DA8XX_CFGCHIP(2))
+/*
+ * Configure the USB PHY for DA8xx platforms.
+ */
+static int da8xx_usb_phy_config(struct device *dev, u8 mode, int is_on)
+{
+	u32 cfgchip2;
+
+	/*
+	 * Start the on-chip PHY and its PLL.
+	 */
+	cfgchip2 = __raw_readl(CFGCHIP2);
+
+	if (is_on) {
+		/* Check whether USB0 PHY is already powered on */
+		if (cfgchip2 & CFGCHIP2_PHY_PLLON)
+			return 0;
+
+		cfgchip2 &= ~(CFGCHIP2_RESET | CFGCHIP2_PHYPWRDN |
+				CFGCHIP2_OTGPWRDN | CFGCHIP2_OTGMODE |
+				CFGCHIP2_REFFREQ);
+		cfgchip2 |= CFGCHIP2_SESENDEN | CFGCHIP2_VBDTCTEN |
+				CFGCHIP2_PHY_PLLON | CFGCHIP2_REFFREQ_24MHZ;
+		switch (mode) {
+		case MUSB_OTG:
+			cfgchip2 |= CFGCHIP2_NO_OVERRIDE;
+			break;
+		case MUSB_HOST:
+			cfgchip2 |= CFGCHIP2_FORCE_HOST;
+			break;
+		case MUSB_PERIPHERAL:
+			cfgchip2 |= CFGCHIP2_FORCE_DEVICE;
+			break;
+		default:
+			pr_err("Trying to set unsupported mode");
+			break;
+		}
+	} else {
+		/* Ensure that usb1.1 interface clk is not being sourced from
+		 * usb0 interface.  If so do not power down usb0 PHY
+		 */
+		if ((cfgchip2 & CFGCHIP2_USB1SUSPENDM) &&
+			!(cfgchip2 & CFGCHIP2_USB1PHYCLKMUX)) {
+			printk(KERN_WARNING "USB1 interface active -\
+				Cannot Power down USB0 PHY\n");
+			return 0;
+		}
+
+		cfgchip2 &= ~CFGCHIP2_PHY_PLLON;
+		cfgchip2 |= CFGCHIP2_PHYPWRDN | CFGCHIP2_OTGPWRDN;
+	}
+
+	__raw_writel(cfgchip2, CFGCHIP2);
+
+	if (is_on) {
+		while (!(__raw_readl(CFGCHIP2) & CFGCHIP2_PHYCLKGD))
+			cpu_relax();
+		pr_info("Waiting for USB PHY clock good...\n");
+	}
+
+	return 0;
+}
+
+static struct resource usb_resources[] = {
+	{
+		.start  = DA8XX_USB0_BASE,
+		.end    = DA8XX_USB0_BASE + 0x5ff,
+		.flags  = IORESOURCE_MEM,
+	},
+	{
+		.start  = IRQ_DA8XX_USB_INT,
+		.flags  = IORESOURCE_IRQ,
+	},
+};
+
+static struct plat_res_data da8xx_usb_res;
+static struct usb_plat_data da8xx_usb_plat_data;
+
+/*
+ * Initialize DA8xx related MUSB information such as Memory maps, IRQ etc.
+ * Since DA8xx supprot a single MUSB controller initialize the instance
+ * value to 1.
+ */
+void da8xx_usb_configure(struct musb_hdrc_platform_data *pdata, u8 num_inst)
+{
+	pdata->phy_config = da8xx_usb_phy_config;
+
+	da8xx_usb_res.plat_data = pdata;
+	da8xx_usb_res.res_data = usb_resources;
+	da8xx_usb_res.num_res = ARRAY_SIZE(usb_resources);
+
+	da8xx_usb_plat_data.prdata = &da8xx_usb_res;
+	da8xx_usb_plat_data.num_inst = num_inst;
+
+	/* There are multiple USB instances on DA8xx platform hence populate
+	 * the clock information accordingly.  This overrides the generic
+	 * clock setting done in usb.c file.
+	 */
+	pdata->clock = "usb0";
+
+	/* Call the generic platform register function.  The USB
+	 * configuration w.r.t no. of ep's, capabalities etc. are common
+	 * across DA8xx/OMAPL13x platforms and hence allow the generic handler
+	 * to populate the information.
+	 */
+	setup_usb(&da8xx_usb_plat_data);
+}
diff --git a/arch/arm/mach-davinci/include/mach/da8xx.h b/arch/arm/mach-davinci/include/mach/da8xx.h
index 2c15160..3be0c47 100644
--- a/arch/arm/mach-davinci/include/mach/da8xx.h
+++ b/arch/arm/mach-davinci/include/mach/da8xx.h
@@ -25,6 +25,7 @@
 #ifndef __ASSEMBLER__
 #include <mach/hardware.h>
 #include <mach/emac.h>
+#include <linux/usb/musb.h>
 
 void __init da850_init(void);
 void da8xx_init_rtc(void);
@@ -39,6 +40,8 @@ int get_async3_src(void);
 #ifdef CONFIG_USB_TI_CPPI41_DMA
 int cppi41_init(void);
 #endif
+extern void da8xx_usb_configure(struct musb_hdrc_platform_data *pdata,
+					u8 num_inst);
 #endif
 
 #define DA8XX_BOOT_CFG_BASE		0x01C14000
diff --git a/arch/arm/mach-davinci/include/mach/usb.h b/arch/arm/mach-davinci/include/mach/usb.h
index 41b1dd9..4d374c3 100644
--- a/arch/arm/mach-davinci/include/mach/usb.h
+++ b/arch/arm/mach-davinci/include/mach/usb.h
@@ -7,6 +7,7 @@
  * version 2. This program is licensed "as is" without any warranty of any
  * kind, whether express or implied.
  */
+#include <mach/da8xx.h>
 
 #ifndef __ASM_ARCH_USB_H
 #define __ASM_ARCH_USB_H
diff --git a/arch/arm/mach-davinci/include/mach/usb_musb.h b/arch/arm/mach-davinci/include/mach/usb_musb.h
new file mode 100644
index 0000000..e9b35c9
--- /dev/null
+++ b/arch/arm/mach-davinci/include/mach/usb_musb.h
@@ -0,0 +1,41 @@
+/*
+ * This file contains the architecture specific USB definitions
+ * of the TI DaVinci platforms.
+ *
+ * Copyright (C) 2009 Texas Instruments.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+#ifndef USB_MUSB_H_
+#define USB_MUSB_H_
+
+#include <linux/platform_device.h>
+#include <linux/usb/musb.h>
+
+struct plat_res_data {
+	struct musb_hdrc_platform_data	*plat_data;
+	struct resource			*res_data;
+	u8				num_res;
+};
+
+struct usb_plat_data {
+	struct plat_res_data	*prdata;
+	u8			num_inst;
+};
+
+/* VBUS control fuction */
+extern void setup_usb(struct usb_plat_data *pdata);
+#endif
diff --git a/arch/arm/mach-davinci/usb.c b/arch/arm/mach-davinci/usb.c
new file mode 100644
index 0000000..c371e81
--- /dev/null
+++ b/arch/arm/mach-davinci/usb.c
@@ -0,0 +1,76 @@
+/*
+ * USB
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/dma-mapping.h>
+#include <linux/string.h>
+
+#include <linux/usb/otg.h>
+#include <mach/usb_musb.h>
+
+static struct musb_hdrc_eps_bits musb_eps[] = {
+	{ "ep1_tx", 8, },
+	{ "ep1_rx", 8, },
+	{ "ep2_tx", 8, },
+	{ "ep2_rx", 8, },
+	{ "ep3_tx", 5, },
+	{ "ep3_rx", 5, },
+	{ "ep4_tx", 5, },
+	{ "ep4_rx", 5, },
+};
+
+static struct musb_hdrc_config musb_config = {
+	.multipoint	= true,
+	.dyn_fifo	= true,
+	.soft_con	= true,
+	.dma		= true,
+
+	.num_eps	= 5,
+	.dma_channels	= 8,
+	.ram_bits	= 10,
+	.eps_bits	= musb_eps,
+};
+
+static u64 usb_dmamask = DMA_BIT_MASK(32);
+
+void __init setup_usb(struct usb_plat_data *pdata)
+{
+	u8	ninst = pdata->num_inst;
+	u8	inst, i = 0;
+	char	name[20] = "musb_hdrc";
+	struct	platform_device *pdev;
+	struct	plat_res_data *plat_res_data;
+
+	do {
+		plat_res_data = &pdata->prdata[i++];
+		inst = plat_res_data->plat_data->inst;
+		if (pdata->num_inst > 1)
+			sprintf(name, "musb_hdrc%d", inst);
+
+		pdev = platform_device_alloc(name, -1);
+
+		if (!pdev) {
+			pr_warning("WARNING: USB platform Alloc Failed\n");
+			break;
+		}
+
+		/* Verify whether the clock information has already been
+		 * specified if so do not override it with generic definition.
+		 */
+		if (!plat_res_data->plat_data->clock)
+			plat_res_data->plat_data->clock = "usb0";
+		pdev->dev.platform_data = plat_res_data->plat_data;
+		pdev->dev.dma_mask = &usb_dmamask;
+		pdev->dev.coherent_dma_mask = DMA_BIT_MASK(32);
+		pdev->resource = plat_res_data->res_data;
+		pdev->num_resources = plat_res_data->num_res;
+
+		/* Associate the default configuration if not specified */
+		if (!plat_res_data->plat_data->config)
+			plat_res_data->plat_data->config = &musb_config;
+		platform_device_add(pdev);
+	} while (--ninst);
+}
-- 
1.6.5.2

