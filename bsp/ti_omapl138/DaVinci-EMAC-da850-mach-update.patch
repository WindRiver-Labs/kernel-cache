From 72773f5b88832f6859cf62d373a27a22d52e5220 Mon Sep 17 00:00:00 2001
From: Stanley.Miao <stanley.miao@windriver.com>
Date: Thu, 5 Nov 2009 17:53:11 +0800
Subject: [PATCH 08/43] DaVinci EMAC: da850 mach update

Original codes from TI Linux Platform Support Package
DaVinci-PSP-SDK-03.20.00.05.tgz http://software-dl.ti.com/dsps/
dsps_public_sw/sdo_sb/targetcontent/psp/DaVinci-PSP-SDK/03_20/index_FDS.html

Add the DA850/L138 platform specific EMAC initialization.

Signed-off-by: Stanley.Miao <stanley.miao@windriver.com>
---
 arch/arm/mach-davinci/board-da850-evm.c    |   67 ++++++++++++++++++++++++++++
 arch/arm/mach-davinci/da850.c              |   53 ++++++++++++++++++++++
 arch/arm/mach-davinci/include/mach/da8xx.h |    3 +
 drivers/net/davinci_emac.c                 |    2 +-
 4 files changed, 124 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-davinci/board-da850-evm.c b/arch/arm/mach-davinci/board-da850-evm.c
index 2e9aeb2..56e2a89 100644
--- a/arch/arm/mach-davinci/board-da850-evm.c
+++ b/arch/arm/mach-davinci/board-da850-evm.c
@@ -38,10 +38,38 @@
 #include <mach/serial.h>
 #include <mach/mux.h>
 #include <linux/platform_device.h>
+#include <mach/emac.h>
 #include <mach/cp_intc.h>
 
 #include "clock.h"
 
+#define DA850_EVM_PHY_MASK		(0x1)
+#define DA850_EVM_MDIO_FREQUENCY	(2200000) /* PHY bus frequency */
+
+static struct emac_platform_data da850_evm_emac_pdata = {
+	.phy_mask	= DA850_EVM_PHY_MASK,
+	.mdio_max_freq	= DA850_EVM_MDIO_FREQUENCY,
+	.rmii_en	= 0,
+};
+
+static int eth_addr_setup(char *str)
+{
+	int i;
+
+	if (str == NULL)
+		return 0;
+
+	/* Conversion of a MAC address from a string (AA:BB:CC:DD:EE:FF)
+	 * to a 6 bytes array. */
+	for (i = 0; i < ETH_ALEN; i++)
+		da850_evm_emac_pdata.mac_addr[i] = simple_strtol(&str[i*3],
+							   (char **)NULL, 16);
+
+	return 1;
+}
+/* Get MAC address from kernel boot parameter eth=AA:BB:CC:DD:EE:FF */
+__setup("eth=", eth_addr_setup);
+
 static struct davinci_uart_config uart_config __initdata = {
 	.enabled_uarts = ((1 << 0) | (1 << 1) | (1 << 2)),
 };
@@ -54,6 +82,8 @@ static void __init da850_map_io(void)
 
 static __init void da850_evm_init(void)
 {
+	unsigned int *addr = IO_ADDRESS(DA8XX_CFGCHIP3);
+
 	davinci_cfg_reg(DA850_UART2_RXD);
 	davinci_cfg_reg(DA850_UART2_TXD);
 	davinci_serial_init(&uart_config);
@@ -64,6 +94,43 @@ static __init void da850_evm_init(void)
 	 */
 	__raw_writel(0, IO_ADDRESS(DA8XX_UART1_BASE) + 0x30);
 	__raw_writel(0, IO_ADDRESS(DA8XX_UART0_BASE) + 0x30);
+
+	if (da850_evm_emac_pdata.rmii_en) {
+		/* RMII */
+		__raw_writel((__raw_readl(addr)) | BIT(8), addr);
+		davinci_cfg_reg(DA850_RMII_TXD_0);
+		davinci_cfg_reg(DA850_RMII_TXD_1);
+		davinci_cfg_reg(DA850_RMII_TXEN);
+		davinci_cfg_reg(DA850_RMII_CRS_DV);
+		davinci_cfg_reg(DA850_RMII_RXD_0);
+		davinci_cfg_reg(DA850_RMII_RXD_1);
+		davinci_cfg_reg(DA850_RMII_RXER);
+		davinci_cfg_reg(DA850_RMII_MHZ_50_CLK);
+
+	} else {
+		/*MII */
+		__raw_writel((__raw_readl(addr)) & ~BIT(8), addr);
+		davinci_cfg_reg(DA850_MII_TXEN);
+		davinci_cfg_reg(DA850_MII_TXCLK);
+		davinci_cfg_reg(DA850_MII_COL);
+		davinci_cfg_reg(DA850_MII_TXD_3);
+		davinci_cfg_reg(DA850_MII_TXD_2);
+		davinci_cfg_reg(DA850_MII_TXD_1);
+		davinci_cfg_reg(DA850_MII_TXD_0);
+		davinci_cfg_reg(DA850_MII_RXER);
+		davinci_cfg_reg(DA850_MII_CRS);
+		davinci_cfg_reg(DA850_MII_RXCLK);
+		davinci_cfg_reg(DA850_MII_RXDV);
+		davinci_cfg_reg(DA850_MII_RXD_3);
+		davinci_cfg_reg(DA850_MII_RXD_2);
+		davinci_cfg_reg(DA850_MII_RXD_1);
+		davinci_cfg_reg(DA850_MII_RXD_0);
+	}
+
+	davinci_cfg_reg(DA850_MDIO_CLK);
+	davinci_cfg_reg(DA850_MDIO_D);
+
+	da850_init_emac(&da850_evm_emac_pdata);
 }
 
 static __init void da850_evm_irq_init(void)
diff --git a/arch/arm/mach-davinci/da850.c b/arch/arm/mach-davinci/da850.c
index 708d047..ae2d1af 100644
--- a/arch/arm/mach-davinci/da850.c
+++ b/arch/arm/mach-davinci/da850.c
@@ -730,6 +730,59 @@ static struct platform_device da850_edma1_device = {
 	.resource		= edma1_resources,
 };
 
+#if defined(CONFIG_TI_DAVINCI_EMAC) || defined(CONFIG_TI_DAVINCI_EMAC_MODULE)
+
+static struct resource da850_emac_resources[] = {
+	{
+		.start	= DA8XX_EMAC_CPPI_PORT_BASE,
+		.end	= DA8XX_EMAC_CPPI_PORT_BASE + 0x47ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.start	= IRQ_DA8XX_C0_RX_THRESH_PULSE,
+		.end	= IRQ_DA8XX_C0_RX_THRESH_PULSE,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.start	= IRQ_DA8XX_C0_RX_PULSE,
+		.end	= IRQ_DA8XX_C0_RX_PULSE,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.start	= IRQ_DA8XX_C0_TX_PULSE,
+		.end	= IRQ_DA8XX_C0_TX_PULSE,
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		.start	= IRQ_DA8XX_C0_MISC_PULSE,
+		.end	= IRQ_DA8XX_C0_MISC_PULSE,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device da850_emac_device = {
+	.name		= "davinci_emac",
+	.id		= 1,
+	.num_resources	= ARRAY_SIZE(da850_emac_resources),
+	.resource	= da850_emac_resources,
+};
+
+void da850_init_emac(struct emac_platform_data *pdata)
+{
+	pdata->ctrl_reg_offset		= DA8XX_EMAC_CTRL_REG_OFFSET;
+	pdata->ctrl_mod_reg_offset	= DA8XX_EMAC_MOD_REG_OFFSET;
+	pdata->ctrl_ram_offset		= DA8XX_EMAC_RAM_OFFSET;
+	pdata->mdio_reg_offset		= DA8XX_MDIO_REG_OFFSET;
+	pdata->ctrl_ram_size		= DA8XX_EMAC_CTRL_RAM_SIZE;
+	pdata->version			= EMAC_VERSION_2;
+	da850_emac_device.dev.platform_data	= pdata;
+	platform_device_register(&da850_emac_device);
+}
+#else
+
+void da850_init_emac(struct emac_platform_data *unused) {}
+
+#endif
 int get_async3_src(void)
 {
 	unsigned int *addr = IO_ADDRESS(DA8XX_CFGCHIP3);
diff --git a/arch/arm/mach-davinci/include/mach/da8xx.h b/arch/arm/mach-davinci/include/mach/da8xx.h
index 4d526f4..227afb3 100644
--- a/arch/arm/mach-davinci/include/mach/da8xx.h
+++ b/arch/arm/mach-davinci/include/mach/da8xx.h
@@ -23,9 +23,12 @@
 #define __ASM_ARCH_DA8XX_H
 
 #include <mach/hardware.h>
+#include <mach/emac.h>
 
 void __init da850_init(void);
 
+void da830_init_emac(struct emac_platform_data *);
+void da850_init_emac(struct emac_platform_data *);
 int get_async3_src(void);
 
 #define DA8XX_BOOT_CFG_BASE		0x01C14000
diff --git a/drivers/net/davinci_emac.c b/drivers/net/davinci_emac.c
index 544a427..b52d5f5 100644
--- a/drivers/net/davinci_emac.c
+++ b/drivers/net/davinci_emac.c
@@ -2604,7 +2604,7 @@ static int __devinit davinci_emac_probe(struct platform_device *pdev)
 	struct device *emac_dev;
 
 	/* obtain emac clock from kernel */
-	emac_clk = clk_get(&pdev->dev, NULL);
+	emac_clk = clk_get(&pdev->dev, "emac");
 	if (IS_ERR(emac_clk)) {
 		printk(KERN_ERR "DaVinci EMAC: Failed to get EMAC clock\n");
 		return -EBUSY;
-- 
1.6.5.2

