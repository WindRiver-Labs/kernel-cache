From 7457ee3877ce778c552265e66e9ac3cccdcb8a87 Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Thu, 25 Aug 2016 05:38:41 +0000
Subject: [PATCH 2/2] power: suspend: using raw_spin_lock/unlock to replace
 spin_lock/unlock

This fix the below call trace:

BUG: sleeping function called from invalid context at
kernel/locking/rtmutex.c:917
in_atomic(): 1, irqs_disabled(): 1, pid: 1543, name: sh
Preemption disabled at:[<  (null)>]   (null)

CPU: 0 PID: 1543 Comm: sh Not tainted 4.1.21-rt13-WR8.0.0.0_preempt-rt #1
Call Trace:
[effe5f40] [c08921c8] dump_stack+0x84/0xb4 (unreliable)
[effe5f60] [c088d9c4] rt_spin_lock+0x34/0x8c
[effe5f70] [c009e1f8] freeze_wake+0x30/0x80
[effe5f80] [c00b3c54] irq_pm_check_wakeup+0x54/0x68
[effe5f90] [c00b02b8] irq_may_run+0x38/0x90
[effe5fa0] [c00b0870] handle_fasteoi_irq+0x34/0x23c
[effe5fc0] [c00aba40] generic_handle_irq+0x48/0x68
[effe5fd0] [c0005694] __do_irq+0x54/0x204
[effe5ff0] [c00104a4] call_do_irq+0x24/0x3c
[ec7bbd20] [c000590c] do_IRQ+0xc8/0x16c
[ec7bbd50] [c0013008] ret_from_except+0x0/0x18

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 kernel/power/suspend.c |   14 +++++++-------
 1 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/kernel/power/suspend.c b/kernel/power/suspend.c
index 8d7a1ef..7ee6bdf 100644
--- a/kernel/power/suspend.c
+++ b/kernel/power/suspend.c
@@ -40,7 +40,7 @@ static const struct platform_freeze_ops *freeze_ops;
 static DECLARE_WAIT_QUEUE_HEAD(suspend_freeze_wait_head);
 
 enum freeze_state __read_mostly suspend_freeze_state;
-static DEFINE_SPINLOCK(suspend_freeze_lock);
+static DEFINE_RAW_SPINLOCK(suspend_freeze_lock);
 
 void freeze_set_ops(const struct platform_freeze_ops *ops)
 {
@@ -56,12 +56,12 @@ static void freeze_begin(void)
 
 static void freeze_enter(void)
 {
-	spin_lock_irq(&suspend_freeze_lock);
+	raw_spin_lock_irq(&suspend_freeze_lock);
 	if (pm_wakeup_pending())
 		goto out;
 
 	suspend_freeze_state = FREEZE_STATE_ENTER;
-	spin_unlock_irq(&suspend_freeze_lock);
+	raw_spin_unlock_irq(&suspend_freeze_lock);
 
 	get_online_cpus();
 	cpuidle_resume();
@@ -77,23 +77,23 @@ static void freeze_enter(void)
 	cpuidle_pause();
 	put_online_cpus();
 
-	spin_lock_irq(&suspend_freeze_lock);
+	raw_spin_lock_irq(&suspend_freeze_lock);
 
  out:
 	suspend_freeze_state = FREEZE_STATE_NONE;
-	spin_unlock_irq(&suspend_freeze_lock);
+	raw_spin_unlock_irq(&suspend_freeze_lock);
 }
 
 void freeze_wake(void)
 {
 	unsigned long flags;
 
-	spin_lock_irqsave(&suspend_freeze_lock, flags);
+	raw_spin_lock_irqsave(&suspend_freeze_lock, flags);
 	if (suspend_freeze_state > FREEZE_STATE_NONE) {
 		suspend_freeze_state = FREEZE_STATE_WAKE;
 		wake_up(&suspend_freeze_wait_head);
 	}
-	spin_unlock_irqrestore(&suspend_freeze_lock, flags);
+	raw_spin_unlock_irqrestore(&suspend_freeze_lock, flags);
 }
 EXPORT_SYMBOL_GPL(freeze_wake);
 
-- 
1.7.5.4

