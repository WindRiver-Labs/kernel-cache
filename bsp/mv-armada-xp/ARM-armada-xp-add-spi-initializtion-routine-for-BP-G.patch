From dfffdd371c7ca914f98a97192edf36ed549eb3ab Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Tue, 22 Apr 2014 10:45:03 +0800
Subject: [PATCH 3/5] ARM:armada-xp:add spi initializtion routine for BP & GP
 boards

Introduce spi initializtion routine for armada-xp BP & GP boards
to replace the initaliztion roution from HAL.

The new routine registers platform device for spi-orion bus controller
& m28p80 spi flash. Then kernel could bind spi-orion spi driver &
m25p80 mtd driver for such devices.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 arch/arm/mach-armadaxp/core.c                  |   95 +++++++++++++++++++++++-
 arch/arm/mach-armadaxp/include/mach/armadaxp.h |    3 +-
 2 files changed, 94 insertions(+), 4 deletions(-)

diff --git a/arch/arm/mach-armadaxp/core.c b/arch/arm/mach-armadaxp/core.c
index 84d086e..83e9eed 100755
--- a/arch/arm/mach-armadaxp/core.c
+++ b/arch/arm/mach-armadaxp/core.c
@@ -1442,6 +1442,76 @@ static void __init armadaxp_xor1_init(void)
 	platform_device_register(&armadaxp_xor11_channel);
 }
 
+#ifdef CONFIG_SPI_ORION
+
+#include <linux/mtd/physmap.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/orion_spi.h>
+
+static struct spi_board_info __initdata armadaxp_db_spi_slave_info[] = {
+	{
+		.modalias	= "m25px64",
+		.irq		= NO_IRQ,
+		.max_speed_hz	= 20000000,
+		.bus_num	= 0,
+		.chip_select	= 0,
+	},
+};
+
+static struct spi_board_info __initdata armadaxp_gp_spi_slave_info[] = {
+	{
+		.modalias	= "n25q128a13",
+		.irq		= NO_IRQ,
+		.max_speed_hz	= 20000000,
+		.bus_num	= 0,
+		.chip_select	= 0,
+	},
+};
+
+/* Fill in the resources structure and link it into the platform
+   device structure. There is always a memory region, and nearly
+   always an interrupt.*/
+static void fill_resources(struct platform_device *device,
+			   struct resource *resources,
+			   resource_size_t mapbase,
+			   resource_size_t size,
+			   unsigned int irq)
+{
+	device->resource = resources;
+	device->num_resources = 1;
+	resources[0].flags = IORESOURCE_MEM;
+	resources[0].start = mapbase;
+	resources[0].end = mapbase + size;
+
+	if (irq != NO_IRQ) {
+		device->num_resources++;
+		resources[1].flags = IORESOURCE_IRQ;
+		resources[1].start = irq;
+		resources[1].end = irq;
+	}
+}
+
+static struct orion_spi_info orion_spi_plat_data;
+static struct resource orion_spi_resources;
+
+static struct platform_device orion_spi = {
+	.name		= "orion_spi",
+	.id		= 0,
+	.dev		= {
+		.platform_data	= &orion_spi_plat_data,
+	},
+};
+
+static void __init mv_spi_init(unsigned long mapbase,
+			   unsigned long tclk)
+{
+	orion_spi_plat_data.tclk = tclk;
+	fill_resources(&orion_spi, &orion_spi_resources,
+		       mapbase, SZ_512 - 1, NO_IRQ);
+	platform_device_register(&orion_spi);
+}
+#endif
+
 static void cpu_fabric_common_init(void)
 {
 	MV_U32	reg;
@@ -1625,9 +1695,15 @@ static void __init axp_db_init(void)
 		rtc_init();
 
 	/* SPI */
-	if(mvUnitMapIsMine(SPI) == MV_TRUE)
+	if(mvUnitMapIsMine(SPI) == MV_TRUE) {
+#ifdef CONFIG_SPI_ORION
+		spi_register_board_info(armadaxp_db_spi_slave_info,
+				ARRAY_SIZE(armadaxp_db_spi_slave_info));
+		mv_spi_init(AXP_SPI_PHYS_BASE, mvBoardTclkGet());
+#else
 		mvSysSpiInit(0, _16M);
-
+#endif
+	}
 	/* ETH-PHY */
 	mvSysEthPhyInit();
 
@@ -1796,8 +1872,13 @@ static void __init axp_gp_init(void)
 	rtc_init();
 
 	/* SPI */
+#ifdef CONFIG_SPI_ORION
+	spi_register_board_info(armadaxp_gp_spi_slave_info,
+				ARRAY_SIZE(armadaxp_gp_spi_slave_info));
+	mv_spi_init(AXP_SPI_PHYS_BASE, mvBoardTclkGet());
+#else
 	mvSysSpiInit(0, _16M);
-
+#endif
 	/* ETH-PHY */
 	mvSysEthPhyInit();
 
@@ -1935,7 +2016,11 @@ static void __init axp_rd_nas_init(void)
 	rtc_init();
 
 	/* SPI */
+#ifdef CONFIG_SPI_ORION
+	mv_spi_init(AXP_SPI_PHYS_BASE, mvBoardTclkGet());
+#else
 	mvSysSpiInit(0, _16M);
+#endif
 
 	/* ETH-PHY */
 	mvSysEthPhyInit();
@@ -2078,7 +2163,11 @@ static void __init axp_rdsrv_init(void)
 	rtc_init();
 
 	/* SPI */
+#ifdef CONFIG_SPI_ORION
+	mv_spi_init(AXP_SPI_PHYS_BASE, mvBoardTclkGet());
+#else
 	mvSysSpiInit(0, _16M);
+#endif
 
 	/* ETH-PHY */
 	mvSysEthPhyInit();
diff --git a/arch/arm/mach-armadaxp/include/mach/armadaxp.h b/arch/arm/mach-armadaxp/include/mach/armadaxp.h
index 151a60e..c5bb6b3 100644
--- a/arch/arm/mach-armadaxp/include/mach/armadaxp.h
+++ b/arch/arm/mach-armadaxp/include/mach/armadaxp.h
@@ -274,7 +274,6 @@
 #define CRYPT_ENG_VIRT_BASE(chan)	((chan == 0) ? 0xFEB00000 : 0xFEB10000)
 #define CRYPT_ENG_SIZE			_64K
 
-
 #ifdef CONFIG_ARMADA_XP_REV_Z1
 #define XOR0_PHYS_BASE                 (INTER_REGS_PHYS_BASE | 0x60800)
 #define XOR1_PHYS_BASE                 (INTER_REGS_PHYS_BASE | 0x60900)
@@ -315,6 +314,8 @@
 #define SDRAM_CONFIG_REG		(INTER_REGS_BASE | 0x1400)
 #define SDRAM_DLB_EVICT_REG		(INTER_REGS_BASE | 0x170C)
 
+#define AXP_SPI_PHYS_BASE		(INTER_REGS_PHYS_BASE | 0x10600)
+
 #define AXP_UART_PHYS_BASE(port)	(INTER_REGS_PHYS_BASE | 0x12000 + (port * 0x100))
 #define DDR_VIRT_BASE			(INTER_REGS_BASE | 0x00000)
 #define AXP_BRIDGE_VIRT_BASE		(INTER_REGS_BASE | 0x20000)
-- 
1.7.5.4

