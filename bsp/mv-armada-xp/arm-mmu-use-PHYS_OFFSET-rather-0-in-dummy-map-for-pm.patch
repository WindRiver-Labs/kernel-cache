From f387591fbe5068287b71331bc267ba0f6edcae90 Mon Sep 17 00:00:00 2001
From: Wang Hui <Hui.Wang@windriver.com>
Date: Wed, 19 Dec 2012 10:41:54 +0800
Subject: [PATCH 48/50] arm: mmu: use PHYS_OFFSET rather 0 in dummy map for pmd section gap

When the kdump kernel bootup and copy /proc/vmcore to somewhere, the
system will crash. Through investigation, i found following code
produce crash:
arch/arm/kernel/crash_dump.c
copy_oldmem_page()
{
	...
	vaddr = ioremap(pfn<<PAGE_SHIFT, PAGE_SIZE);//when crash,pfn=0
	...
	copy_to_user(buf, vaddr + offset, csize);
	...
}

This function will be called when dump kernel access crash kernel
memories, and on my board, the crash kernel physical memory address
starts from 0, so the dump kernel will dump memory of pfn=0. That is
to say, ioremap(0, PAGE_SIZE) return a valid virtual address but
system can't access this address.

looking at the function pmd_empty_section_gap() in the
arch/arm/mm/mmu.c, i found 0 is mapped to a virtual address but not
really mapped in the MMU, this map is only a position occupation
operation, since 1 PMD has 2M size, if io register only use 1M of a
PMD, the left space should not be used by vmalloc or ioremap since
they will do page map instead section map, so use a dummy map to
reserve this address (see comments immediate above this function).

To resolve this problem, i use PHYS_OFFSET to replace 0, it is safe
since no one ioremap its own physical memory to a virtual address
directly.

Signed-off-by: Wang Hui <Hui.Wang@windriver.com>
---
 arch/arm/mm/mmu.c |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mm/mmu.c b/arch/arm/mm/mmu.c
index 4c26632..32d6c0a 100644
--- a/arch/arm/mm/mmu.c
+++ b/arch/arm/mm/mmu.c
@@ -833,6 +833,7 @@ static void __init pmd_empty_section_gap(unsigned long addr)
 
 	vm = early_alloc_aligned(sizeof(*vm), __alignof__(*vm));
 	vm->addr = (void *)addr;
+	vm->phys_addr = (void *)PHYS_OFFSET;
 	vm->size = SECTION_SIZE;
 	vm->flags = VM_IOREMAP | VM_ARM_EMPTY_MAPPING;
 	vm->caller = pmd_empty_section_gap;
-- 
1.7.0

