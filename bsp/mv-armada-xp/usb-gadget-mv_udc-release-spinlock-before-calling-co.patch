From 15b58ec5bea37aaa9f3799c2c41dfd1c3e38d5bc Mon Sep 17 00:00:00 2001
From: Zhong Hongbo <hongbo.zhong@windriver.com>
Date: Mon, 14 Jan 2013 17:58:19 +0800
Subject: [PATCH 1/5] usb: gadget: mv_udc: release spinlock before calling complete()

ISSUE:
When gadget drivers (like g_ether) are notified about successfully
(or not) transmitted requests, a system rarely freeze will be
generate in preempt-rt kernel.

CAUSE:
When the driver calls dev->driver->complete() or mv_dev->driver->setup,
it is not calling spin_unlock().

------------[ cut here ]------------
kernel BUG at kernel/rtmutex.c:725!
Internal error: Oops - BUG: 0 [#1] PREEMPT SMP ARM
Modules linked in:
CPU: 1    Not tainted  (3.4.20-rt29-WR5.0.1.0_preempt-rt #68)
PC is at rt_spin_lock_slowlock+0x280/0x288
LR is at rt_spin_lock_slowlock+0x68/0x288
pc : [<8066675c>]    lr : [<80666544>]    psr: 60000113
sp : ed773d00  ip : ed9200c0  fp : ed773d6c
r10: 00000001  r9 : 00000000  r8 : ed9200c0
r7 : ed772000  r6 : ed9200c1  r5 : ed772000  r4 : ee243150
r3 : 00000001  r2 : 00000000  r1 : ed9200c0  r0 : ed9200c0
Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel
Control: 10c53c7d  Table: 0000406a  DAC: 00000015
Process irq/47-mv_udc (pid: 64, stack limit = 0xed7722f0)
Stack: (0xed773d00 to 0xed774000)
3d00: 00000ff9 00000000 00000000 00000000 00000000 00000001 00000000 00000000
3d20: 00000000 00000000 ed773d4c ed773d38 800932c4 00000000 00000001 ed772001
3d40: ed773d64 ee243150 ed691d40 ee243000 ed772000 00000000 00000040 00000001
3d60: ed773d84 ed773d70 80666944 806664e8 ed773d88 ee243170 ed773db4 ed773d88
3d80: 80054dc0 8066691c 8009c8c0 8009bd80 81a00bd0 ed691d40 ed693940 ee243000
3da0: 80054c40 00000000 ed773e14 ed773db8 804c039c 80054c4c fbb52140 ed8ba000
3dc0: 00000001 00100000 80929d3c ed8bd400 00000000 ed773e20 00000000 80056988
3de0: ed773e14 ed773df0 80056988 ed8bd400 ee243170 ee243000 80929d14 00000001
3e00: 00000000 ee243198 ed773e54 ed773e18 80055608 804c0030 806693c8 8000952c
3e20: 01000680 00400000 ed9200c0 80929d3c ed8bd400 00000000 00000000 00000001
3e40: 00000000 00000000 ed773e8c ed773e58 800567d4 80055414 00000000 00000008
3e60: 00000000 800b64e4 ed8bd400 ed8bd400 00000001 808d4c00 ed691b40 808e5920
3e80: ed773efc ed773e90 800590e4 80056740 00000000 00000008 00000000 808e6200
3ea0: ed772000 80395af4 4868f91f 000000e5 808ef210 808cd900 808cd900 809cffc0
3ec0: ed773ee4 ed773ed0 fbb52140 00000000 00000001 ed8bd400 00000001 00000001
3ee0: 808d4c00 ed691b40 00000000 808e5920 ed773f1c ed773f00 800595f4 80058df8
3f00: ed9200c0 ee243150 ee243000 00000001 ed773f34 ed773f20 80054a7c 800594fc
3f20: ed691b40 808d4c00 ed773f54 ed773f38 800d9844 80054a58 00000004 ed772000
3f40: ed691b60 00000001 ed773fa4 ed773f58 800d95b8 800d9820 ed773f84 800d9814
3f60: 800946d4 00000000 ed920448 800d96e0 00000000 00000000 00000000 ee267dd4
3f80: ed691b40 800d9464 00000013 00000000 00000000 00000000 ed773ff4 ed773fa8
3fa0: 80083d40 800d9470 00000000 ed691b40 00000000 00000000 00000000 ed773fbc
3fc0: ed773fbc 00000000 8000faa8 00000013 ed773fd0 ed773fd0 00000000 ee267dd4
3fe0: 80083ca0 8000faa8 00000000 ed773ff8 8000faa8 80083cac 7ddf7c42 dfbdbefe
[<8066675c>] (rt_spin_lock_slowlock+0x280/0x288) from [<80666944>] (rt_spin_lock+0x34/0x38)
[<80666944>] (rt_spin_lock+0x34/0x38) from [<80054dc0>] (mv_usb_ep_queue+0x180/0x22c)
[<80054dc0>] (mv_usb_ep_queue+0x180/0x22c) from [<804c039c>] (composite_setup+0x378/0xc0c)
[<804c039c>] (composite_setup+0x378/0xc0c) from [<80055608>] (mv_usb_ep0_complete_service+0x200/0x2ec)
[<80055608>] (mv_usb_ep0_complete_service+0x200/0x2ec) from [<800567d4>] (_usb_device_call_service+0xa0/0xec)
[<800567d4>] (_usb_device_call_service+0xa0/0xec) from [<800590e4>] (_usb_dci_vusb20_process_tr_complete+0x2f8/0x338)
[<800590e4>] (_usb_dci_vusb20_process_tr_complete+0x2f8/0x338) from [<800595f4>] (_usb_dci_vusb20_isr+0x104/0x110)
[<800595f4>] (_usb_dci_vusb20_isr+0x104/0x110) from [<80054a7c>] (mv_usb_dev_irq+0x30/0x44)
[<80054a7c>] (mv_usb_dev_irq+0x30/0x44) from [<800d9844>] (irq_forced_thread_fn+0x30/0x74)
[<800d9844>] (irq_forced_thread_fn+0x30/0x74) from [<800d95b8>] (irq_thread+0x154/0x1a0)
[<800d95b8>] (irq_thread+0x154/0x1a0) from [<80083d40>] (kthread+0xa0/0xa4)
[<80083d40>] (kthread+0xa0/0xa4) from [<8000faa8>] (kernel_thread_exit+0x0/0x8)
Code: e7f001f2 ebfffb86 eaffffdc e7f001f2 (e7f001f2)
---[ end trace 0000000000000002 ]---

Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 arch/arm/plat-armada/Kconfig                       |    1 +
 .../mv_drivers_lsp/mv_udc/mv_udc_main.c            |    5 +++++
 2 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/arch/arm/plat-armada/Kconfig b/arch/arm/plat-armada/Kconfig
index 8a3d21f..fd55ab0 100644
--- a/arch/arm/plat-armada/Kconfig
+++ b/arch/arm/plat-armada/Kconfig
@@ -387,6 +387,7 @@ config MV_USB_HOST
 
 config MV_USB_DEVICE
 	bool "Support for USB Device"
+	select USB_GADGET_DUALSPEED
 	---help---
 	Choosing this option will configure on chip USB Controller to work in Device mode
 endchoice
diff --git a/arch/arm/plat-armada/mv_drivers_lsp/mv_udc/mv_udc_main.c b/arch/arm/plat-armada/mv_drivers_lsp/mv_udc/mv_udc_main.c
index e853367..76454b3 100644
--- a/arch/arm/plat-armada/mv_drivers_lsp/mv_udc/mv_udc_main.c
+++ b/arch/arm/plat-armada/mv_drivers_lsp/mv_udc/mv_udc_main.c
@@ -728,7 +728,9 @@ void mv_usb_tr_complete_service(void*      handle,
         usb_req->actual += length;
         usb_req->status = error;
 
+        spin_unlock (&mv_dev->lock);
         usb_req->complete (&mv_ep->ep, usb_req);
+        spin_lock (&mv_dev->lock);
 
         if(error != 0)
         {
@@ -845,7 +847,10 @@ void mv_usb_ep0_complete_service(void*      handle,
     {
         if(setup)
         {
+            spin_unlock (&mv_dev->lock);
             rc = mv_dev->driver->setup (&mv_dev->gadget, (struct usb_ctrlrequest*)&ctrl_req_org);
+            spin_lock (&mv_dev->lock);
+
             if(rc < 0)
             {
                 mvOsPrintf("Setup is failed: rc=%d, req=0x%02x, reqType=0x%x, value=0x%04x, index=0x%04x\n", 
-- 
1.7.0

