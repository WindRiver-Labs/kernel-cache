From 043407d3b171b96edb119d7eacb5ee3be4db698e Mon Sep 17 00:00:00 2001
From: Zhong Hongbo <hongbo.zhong@windriver.com>
Date: Tue, 8 Jan 2013 17:51:16 +0800
Subject: [PATCH 46/50] armadaxp: core: Add platform data for uart2/3.

Add platform data to support uart2/3 for DB-78460-BP-REV2 board

Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 .../armada_xp_family/ctrlEnv/mvUnitMap.c           |    2 +
 .../armada_xp_family/ctrlEnv/mvUnitMap.h           |    2 +
 arch/arm/mach-armadaxp/core.c                      |   94 +++++++++++++++++++-
 3 files changed, 96 insertions(+), 2 deletions(-)

diff --git a/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.c b/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.c
index a2436d1..b2e6815 100644
--- a/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.c
+++ b/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.c
@@ -73,6 +73,8 @@ static MV_RES_MAP mv_res_table[] = {
 	/* Dividable units */
 	{0, "uart0"},
 	{0, "uart1"},
+	{0, "uart2"},
+	{0, "uart3"},
 	{0, "pex0"},
 	{0, "pex1"},
 	{0, "pex2"},
diff --git a/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.h b/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.h
index 0321d7b..b92ce65 100644
--- a/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.h
+++ b/arch/arm/mach-armadaxp/armada_xp_family/ctrlEnv/mvUnitMap.h
@@ -73,6 +73,8 @@ typedef enum
 {
 	UART0=0,
 	UART1,
+	UART2,
+	UART3,
 	PEX0,
 	PEX1,
 	PEX2,
diff --git a/arch/arm/mach-armadaxp/core.c b/arch/arm/mach-armadaxp/core.c
index c3c67ba..84d086e 100755
--- a/arch/arm/mach-armadaxp/core.c
+++ b/arch/arm/mach-armadaxp/core.c
@@ -603,7 +603,7 @@ static struct resource aurora_uart1_resources[] = {
 
 static struct platform_device aurora_uart1 = {
 	.name			= "dw-apb-uart",
-	.id			= 0,
+	.id			= 1,
 	.dev			= {
 		.platform_data	= aurora_uart1_data,
 	},
@@ -611,6 +611,73 @@ static struct platform_device aurora_uart1 = {
 	.num_resources		= ARRAY_SIZE(aurora_uart1_resources),
 };
 
+/**********
+ * UART-2 *
+ **********/
+ static struct plat_serial8250_port aurora_uart2_data[] = {
+	{
+		.iotype		= UPIO_MEM32,
+		.regshift	= 2,
+		.uartclk	= 0,
+	},
+};
+
+static struct resource aurora_uart2_resources[] = {
+	{
+		.start		= (INTER_REGS_PHYS_BASE | MV_UART_REGS_OFFSET(2)),
+		.end		= (INTER_REGS_PHYS_BASE | MV_UART_REGS_OFFSET(2)) + SZ_256 - 1,
+		.flags		= IORESOURCE_MEM,
+	}, {
+		.start		= IRQ_AURORA_UART2,
+		.end		= IRQ_AURORA_UART2,
+		.flags		= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device aurora_uart2 = {
+	.name			= "dw-apb-uart",
+	.id			= 2,
+	.dev			= {
+		.platform_data	= aurora_uart2_data,
+	},
+	.resource		= aurora_uart2_resources,
+	.num_resources		= ARRAY_SIZE(aurora_uart2_resources),
+};
+
+
+/**********
+ * UART-1 *
+ **********/
+ static struct plat_serial8250_port aurora_uart3_data[] = {
+	{
+		.iotype		= UPIO_MEM32,
+		.regshift	= 2,
+		.uartclk	= 0,
+	},
+};
+
+static struct resource aurora_uart3_resources[] = {
+	{
+		.start		= (INTER_REGS_PHYS_BASE | MV_UART_REGS_OFFSET(3)),
+		.end		= (INTER_REGS_PHYS_BASE | MV_UART_REGS_OFFSET(3)) + SZ_256 - 1,
+		.flags		= IORESOURCE_MEM,
+	}, {
+		.start		= IRQ_AURORA_UART3,
+		.end		= IRQ_AURORA_UART3,
+		.flags		= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device aurora_uart3 = {
+	.name			= "dw-apb-uart",
+	.id			= 3,
+	.dev			= {
+		.platform_data	= aurora_uart3_data,
+	},
+	.resource		= aurora_uart3_resources,
+	.num_resources		= ARRAY_SIZE(aurora_uart3_resources),
+};
+
 void __init serial_initialize(int port)
 {
 	if(port == 0)
@@ -623,7 +690,7 @@ void __init serial_initialize(int port)
 		aurora_uart0_data[0].uartclk = mvBoardTclkGet();
 		platform_device_register(&aurora_uart0);
 	}
-	else
+	else if (port == 1)
 	{
 		if(mvUnitMapIsMine(UART1) == MV_FALSE){
 			printk(KERN_WARNING "uart%d resource not allocated but CONFIG_MV_UART_PORT = %d\n", port, port);
@@ -633,6 +700,26 @@ void __init serial_initialize(int port)
 		aurora_uart1_data[0].uartclk = mvBoardTclkGet();
 		platform_device_register(&aurora_uart1);
 	}
+	else if (port == 2)
+	{
+		if(mvUnitMapIsMine(UART2) == MV_FALSE){
+			printk(KERN_WARNING "uart%d resource not allocated but CONFIG_MV_UART_PORT = %d\n", port, port);
+			mvUnitMapSetMine(UART2);
+		}
+
+		aurora_uart2_data[0].uartclk = mvBoardTclkGet();
+		platform_device_register(&aurora_uart2);
+	}
+	else if (port == 3)
+	{
+		if(mvUnitMapIsMine(UART3) == MV_FALSE){
+			printk(KERN_WARNING "uart%d resource not allocated but CONFIG_MV_UART_PORT = %d\n", port, port);
+			mvUnitMapSetMine(UART3);
+		}
+
+		aurora_uart3_data[0].uartclk = mvBoardTclkGet();
+		platform_device_register(&aurora_uart3);
+	}
 }
 
 /********
@@ -1518,6 +1605,9 @@ static void __init axp_db_init(void)
 
 #ifndef CONFIG_MV_UART_PORT
 	serial_initialize(0);
+	serial_initialize(1);
+	serial_initialize(2);
+	serial_initialize(3);
 #else
 	serial_initialize(CONFIG_MV_UART_PORT);
 #endif
-- 
1.7.0

