From 329a4e54f602f37896def5daf1f26aa7ebdfa73c Mon Sep 17 00:00:00 2001
From: Wang Hui <Hui.Wang@windriver.com>
Date: Fri, 18 Jan 2013 18:23:15 +0800
Subject: [PATCH 40/50] armadaxp: cpuidle: fix deepidle problem for lpae kernel

In the deepidle function, it will enter power-saving state and we need
to save cpu registers, when kernel is lpae enabled, we should save
64bits table base regisers and save table base control regiser,
otherwise the system will crash.

Signed-off-by: Wang Hui <Hui.Wang@windriver.com>
---
 arch/arm/plat-armada/armada_suspend.S |   49 ++++++++++++++++++++++++++-------
 1 files changed, 39 insertions(+), 10 deletions(-)

diff --git a/arch/arm/plat-armada/armada_suspend.S b/arch/arm/plat-armada/armada_suspend.S
index 25500ce..34325fb 100644
--- a/arch/arm/plat-armada/armada_suspend.S
+++ b/arch/arm/plat-armada/armada_suspend.S
@@ -155,23 +155,32 @@ ENTRY(armadaxp_cpu_suspend)
 * Save the CP15 context
 */
 	mrc     p15, 0, r2, c1, c0, 0			@ save CP15 - CR
+#ifndef CONFIG_ARM_LPAE
 	mrc     p15, 0, r3, c3, c0, 0			@ save CP15 - DACR
 	mrc     p15, 0, r4, c13, c0, 0			@ save CP15 - FCSE
-        mrc     p15, 0, r5, c2, c0, 0           @ save CP15 - TTBR0
+        mrc     p15, 0, r5, c2, c0, 0			@ save CP15 - TTBR0
+#else
+	mrc     p15, 0, r3, c2, c0, 2			@ save CP15 - TTBCR
+	mrrc    p15, 0, r4, r5, c2			@ save CP15 - 64bits TTBR0
+#endif
 	mrc     p15, 0, r6, c13, c0, 1			@ save CP15 - context ID
 	mrc     p15, 1, r7, c15, c1, 0			@ save CP15 - extra features
 	mrc     p15, 0, r8, c1, c0, 1			@ save CP15 - Aux CR
-	mov     r9, r13							@ save resume SP
+	mov     r9, r13					@ save resume SP
 	stmfd   sp!, {r2-r9}
-	mrc     p15, 0, r2, c2, c0, 1           @ save CP15 - TTBR1
-	mrc	p15, 1, r3, c15, c2, 0				@ save CP15 - Aux Func Modes Ctrl 0
-	mrc	p15, 1, r4, c15, c1, 2				@ save CP15 - Aux Debug Modes Ctrl 2
+	mrc     p15, 0, r2, c2, c0, 1			@ save CP15 - TTBR1
+	mrc	p15, 1, r3, c15, c2, 0			@ save CP15 - Aux Func Modes Ctrl 0
+	mrc	p15, 1, r4, c15, c1, 2			@ save CP15 - Aux Debug Modes Ctrl 2
 	mrc     p15, 1, r5, c15, c1, 1			@ save CP15 - Aux Debug Modes Ctrl 1
 	mrc     p15, 0, r6, c9, c14, 0			@ save CP15 - PMC
 	mrc     p15, 0, r7, c10, c2, 0			@ save CP15 - PRRR
 	mrc     p15, 0, r8, c10, c2, 1			@ save CP15 - NMRR
 	
         stmfd   sp!, {r2-r8}
+#ifdef CONFIG_ARM_LPAE
+	mrrc    p15, 1, r7, r8, c2			@ save CP15 - 64 bits TTBR1
+	stmfd   sp!, {r7-r8}
+#endif
 
 /*
 * TODO: Save Debug Registers
@@ -219,7 +228,7 @@ ENTRY(armadaxp_cpu_suspend)
 /* Lock Semaphore */
 	mrc	15, 0, r1, cr0, cr0, 5
 	and	r1, r1, #15
-	ldr	r4, =0xFBB20500
+	ldr	r4, =(INTER_REGS_BASE+0x20500)
 1:
 	ldr	r2, [r4]
 #ifdef CONFIG_CPU_ENDIAN_BE8
@@ -238,14 +247,15 @@ ENTRY(armadaxp_cpu_suspend)
 #else
 	mov	r7, r1
 #endif
-	ldr	r2, =0xFBB20200
+	ldr	r2, =(INTER_REGS_BASE+0x20200)
 
 	ldr	r3, [r2]
 	bic	r3, r3, r6, lsl r7
 	str	r3, [r2]
 
 /* Release Semaphore */
-	ldr	r2, =0xFBB20500
+	ldr	r2, =(INTER_REGS_BASE+0x20500)
+
 #ifndef CONFIG_CPU_ENDIAN_BE8
 	ldr 	r0, =0xff
 	strb	r0, [r2]
@@ -287,7 +297,12 @@ ENDPROC(armadaxp_cpu_suspend)
 	.align	5
 	.pushsection	.idmap.text, "ax"
 ENTRY(armadaxp_enable_mmu)
+#ifdef CONFIG_ARM_LPAE
+	mov	r1, #0
+	mcrr	p15, 0, r3, r1, c2		@ set CP15 - 64bits TTBR0
+#else
 	mcr	p15, 0, r3, c2, c0, 0		@ set CP15 - TTBR
+#endif
 	mov	r3, #0
 	mcr	p15, 0, r3, c13, c0, 1          @ set 0 in CP15 - context ID
 	mcr	p15, 0, r2, c1, c0, 0		@ restore CP15 - CR  @enable mmu
@@ -358,8 +373,14 @@ ENTRY(armadaxp_cpu_resume)
 	ldr     r0, suspend_saved_sp            @ stack phys addr
 #endif
 
+#ifdef CONFIG_ARM_LPAE
+	ldmfd	r0!, {r6-r7}
+	mcrr	p15, 1, r6, r7, c2             @ restore CP15 - 64bits TTBR1
+#endif
 	ldmfd   r0!, {r2-r8}
+#ifndef CONFIG_ARM_LPAE
 	mcr     p15, 0, r2, c2, c0, 1           @ restore CP15 - TTBR1
+#endif
 	mcr     p15, 1, r3, c15, c2, 0          @ restore CP15 - Aux Func Modes Ctrl 0
 	mcr     p15, 1, r4, c15, c1, 2          @ restore CP15 - Aux Debug Modes Ctrl 2
 	mcr     p15, 1, r5, c15, c1, 1          @ restore CP15 - Aux Debug Modes Ctrl 1
@@ -369,9 +390,14 @@ ENTRY(armadaxp_cpu_resume)
 	ldmfd   r0!, {r2-r9}
 	mcr	p15, 0, r8, c1, c0, 1		@ restore CP15 - Aux CR
 	mcr	p15, 1, r7, c15, c1, 0		@ restore CP15 - extra features
+#ifndef CONFIG_ARM_LPAE
 	mcr	p15, 0, r4, c13, c0, 0		@ restore CP15 - FCSE
 	mcr	p15, 0, r3, c3, c0, 0		@ restore CP15 - DACR
-
+#else
+	mcr	p15, 0, r3, c2, c0, 2		@ restore CP15 - TTBCR
+	mov	r7, r4				@ save TTBR0 lower byte
+	mov	r8, r5				@ save TTBR0 higher byte
+#endif
 	/* load identity page table */
 	ldr	r3, identity_page_table_phys
 
@@ -382,8 +408,11 @@ ENDPROC(armadaxp_cpu_resume)
 	/* stage 2 of the resume function that runs from PAGE_OFFSET virtual space */
 ENTRY(armadaxp_cpu_resume2)	
 	/* restore original page table*/
-
+#ifdef CONFIG_ARM_LPAE
+	mcrr	p15, 0, r7, r8, c2		@ restore CP15 - TTBR0
+#else
 	mcr	p15, 0, r5, c2, c0, 0		@ restore CP15 - TTBR
+#endif
 	mcr	p15, 0, r6, c13, c0, 1          @ restore CP15 - context ID
 	mcr     p15, 0, r0, c8, c7, 0           @ TLB invalidate
 	mov	sp, r9				@ restore virtual sp
-- 
1.7.0

