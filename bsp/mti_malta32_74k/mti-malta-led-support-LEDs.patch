From ca89fb4ab0db71184b0a22274591e30df69ef465 Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Mon, 11 Apr 2011 13:59:53 +0800
Subject: [PATCH] mti-malta/led: support LEDs

Based on the malta manual this provides this LEDs dirver to support
LEDs on the malta.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/mips/include/asm/mips-boards/generic.h |    1 +
 arch/mips/mti-malta/malta-platform.c        |   61 ++++++++++++
 drivers/leds/Kconfig                        |    6 +
 drivers/leds/Makefile                       |    1 +
 drivers/leds/leds-malta.c                   |  142 +++++++++++++++++++++++++++
 5 files changed, 211 insertions(+), 0 deletions(-)
 create mode 100644 drivers/leds/leds-malta.c

diff --git a/arch/mips/include/asm/mips-boards/generic.h b/arch/mips/include/asm/mips-boards/generic.h
index 665acd4..9e130b4 100644
--- a/arch/mips/include/asm/mips-boards/generic.h
+++ b/arch/mips/include/asm/mips-boards/generic.h
@@ -27,6 +27,7 @@
 /*
  * Display register base.
  */
+#define LED_BASE                   0x1f000408
 #define ASCII_DISPLAY_WORD_BASE    0x1f000410
 #define ASCII_DISPLAY_POS_BASE     0x1f000418
 
diff --git a/arch/mips/mti-malta/malta-platform.c b/arch/mips/mti-malta/malta-platform.c
index 72e32a7..d88d264 100644
--- a/arch/mips/mti-malta/malta-platform.c
+++ b/arch/mips/mti-malta/malta-platform.c
@@ -28,8 +28,12 @@
 #include <linux/mtd/partitions.h>
 #include <linux/mtd/physmap.h>
 #include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/platform_device.h>
 #include <mtd/mtd-abi.h>
 
+#include <asm/mips-boards/generic.h>
+
 #define SMC_PORT(base, int)						\
 {									\
 	.iobase		= base,						\
@@ -83,6 +87,62 @@ static struct platform_device malta_rtc_device = {
 	.num_resources	= ARRAY_SIZE(malta_rtc_resources),
 };
 
+static struct led_info malta_leds[8] = {
+	{	/* D0 */
+		.name = "led0",
+		.default_trigger = "led0",
+	},
+	{	/* D1 */
+		.name = "led1",
+		.default_trigger = "led1",
+	},
+	{	/* D2 */
+		.name = "led2",
+		.default_trigger = "led2",
+	},
+	{	/* D3 */
+		.name = "led3",
+		.default_trigger = "led3",
+	},
+	{	/* D4 */
+		.name = "led4",
+		.default_trigger = "led4",
+	},
+	{	/* D5 */
+		.name = "led5",
+		.default_trigger = "led5",
+	},
+	{	/* D6 */
+		.name = "led6",
+		.default_trigger = "led6",
+	},
+	{	/* D7 */
+		.name = "led7",
+		.default_trigger = "led7",
+}
+};
+
+static struct led_platform_data leds_data = {
+	.num_leds = ARRAY_SIZE(malta_leds),
+	.leds = malta_leds,
+};
+
+static struct resource malta_led_resource = {
+	.start		= LED_BASE,
+	.end		= LED_BASE+0x7,
+	.flags		= IORESOURCE_MEM
+};
+
+static struct platform_device malta_led_device = {
+	.name		= "malta_led",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= &malta_led_resource,
+	.dev			= {
+		.platform_data	= &leds_data,
+	},
+};
+
 static struct mtd_partition malta_mtd_partitions[] = {
 	{
 		.name =		"YAMON",
@@ -127,6 +187,7 @@ static struct platform_device *malta_devices[] __initdata = {
 	&malta_uart8250_device,
 	&malta_rtc_device,
 	&malta_flash_device,
+	&malta_led_device,
 };
 
 static int __init malta_add_devices(void)
diff --git a/drivers/leds/Kconfig b/drivers/leds/Kconfig
index 505eb64..cbceb80 100644
--- a/drivers/leds/Kconfig
+++ b/drivers/leds/Kconfig
@@ -19,6 +19,12 @@ if LEDS_CLASS
 
 comment "LED drivers"
 
+config LEDS_MALTA
+	tristate "LED Support for MIPS MALTA"
+	depends on LEDS_CLASS && MIPS_MALTA
+	help
+	  This option enables support for on-platform LED drivers found on Malta.
+
 config LEDS_88PM860X
 	tristate "LED Support for Marvell 88PM860x PMIC"
 	depends on LEDS_CLASS && MFD_88PM860X
diff --git a/drivers/leds/Makefile b/drivers/leds/Makefile
index 0cd8b99..c36a8b5 100644
--- a/drivers/leds/Makefile
+++ b/drivers/leds/Makefile
@@ -5,6 +5,7 @@ obj-$(CONFIG_LEDS_CLASS)		+= led-class.o
 obj-$(CONFIG_LEDS_TRIGGERS)		+= led-triggers.o
 
 # LED Platform Drivers
+obj-$(CONFIG_LEDS_MALTA)		+= leds-malta.o
 obj-$(CONFIG_LEDS_88PM860X)		+= leds-88pm860x.o
 obj-$(CONFIG_LEDS_ATMEL_PWM)		+= leds-atmel-pwm.o
 obj-$(CONFIG_LEDS_BD2802)		+= leds-bd2802.o
diff --git a/drivers/leds/leds-malta.c b/drivers/leds/leds-malta.c
new file mode 100644
index 0000000..2ab13d7
--- /dev/null
+++ b/drivers/leds/leds-malta.c
@@ -0,0 +1,142 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2011 Wind River Systems, Inc.
+ *     written by Tiejun Chen <tiejun.chen@windriver.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/gpio.h>
+#include <linux/slab.h>
+
+#include <asm/mips-boards/generic.h>
+
+static unsigned int __iomem *display = NULL;
+struct malta_led {
+	struct led_classdev     cdev;
+	int index;
+};
+
+static void malta_led_set(struct led_classdev *led_cdev,
+			    enum led_brightness value)
+{
+	struct malta_led *leds = container_of(led_cdev, struct malta_led, cdev);
+	u32 tmp = __raw_readl(display) & 0xff;
+
+	if (value)
+		__raw_writel(tmp | 1 << leds->index, display);
+	else
+		__raw_writel(tmp & ~(1 << leds->index), display);
+}
+
+static int malta_led_remove(struct platform_device *dev)
+{
+	int i;
+	const struct led_platform_data *pdata;
+	struct malta_led *leds;
+
+	pdata = dev->dev.platform_data;
+	leds = platform_get_drvdata(dev);
+
+	for (i = 0; i < pdata->num_leds; i++) {
+		struct malta_led *led = leds + i;
+			led_classdev_unregister(&led->cdev);
+	}
+
+	iounmap(display);
+	kfree(leds);
+	platform_set_drvdata(dev, NULL);
+	return 0;
+}
+
+static int malta_led_probe(struct platform_device *dev)
+{
+	int ret, i;
+	const struct led_platform_data *pdata;
+	struct resource *p;
+	struct malta_led *leds;
+
+	pdata = dev->dev.platform_data;
+	if (!pdata || pdata->num_leds < 1)
+		return -ENODEV;
+
+	leds = kcalloc(pdata->num_leds, sizeof(*leds), GFP_KERNEL);
+	if (!leds)
+		return -ENOMEM;
+
+	p = platform_get_resource(dev, IORESOURCE_MEM, 0);
+	if (!p) {
+		kfree(leds);
+		return -EBUSY;
+	}
+
+	display = ioremap(p->start, p->end + 1 - p->start);
+	if (!display) {
+		kfree(leds);
+		return -ENOMEM;
+	}
+
+	/* register our new led device */
+
+	for (i = 0; i < pdata->num_leds; i++) {
+		struct malta_led *led = leds + i;
+		const struct led_info *data = pdata->leds + i;
+		led->cdev.name = data->name;
+		led->cdev.brightness = LED_OFF;
+		led->cdev.brightness_set = malta_led_set;
+		led->cdev.default_trigger = data->default_trigger;
+		led->index = i;
+
+		ret = led_classdev_register(&dev->dev, &led->cdev);
+		if (ret < 0)
+			goto err;
+	}
+
+	platform_set_drvdata(dev, leds);
+	printk("MALTA LED[0]~[%d] driver is registered successfully.\n",
+			pdata->num_leds - 1);
+	return 0;
+err:
+	if (i > 0)
+		for (i = i - 1; i >= 0; i--)
+			led_classdev_unregister(&leds[i].cdev);
+	iounmap(display);
+	kfree(leds);
+	return ret;
+}
+
+static struct platform_driver malta_led_driver = {
+	.probe		= malta_led_probe,
+	.remove		= malta_led_remove,
+	.driver		= {
+		.name		= "malta_led",
+		.owner		= THIS_MODULE,
+	},
+};
+
+static int __init malta_led_init(void)
+{
+	return platform_driver_register(&malta_led_driver);
+}
+
+static void __exit malta_led_exit(void)
+{
+	platform_driver_unregister(&malta_led_driver);
+}
+
+module_init(malta_led_init);
+module_exit(malta_led_exit);
+
+MODULE_AUTHOR("Tiejun Chen <tiejun.chen@windriver.com>");
+MODULE_DESCRIPTION("MALTA LED driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:malta_led");
-- 
1.7.0.4

