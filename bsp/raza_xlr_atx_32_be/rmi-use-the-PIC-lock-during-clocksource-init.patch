From 16e8f1c4bc637eecb35d648c8b6cf6108498c28d Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Sun, 21 Jun 2009 18:42:58 -0400
Subject: [PATCH] rmi: use the PIC lock during clocksource init

There is already an existing spinlock that is for all
access to PIC MMIO registers, but it wasn't being used
in the MMIO ops of clocksource init.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/mips/kernel/csrc-phoenix.c |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/arch/mips/kernel/csrc-phoenix.c b/arch/mips/kernel/csrc-phoenix.c
index d848eba..b93fd0d 100644
--- a/arch/mips/kernel/csrc-phoenix.c
+++ b/arch/mips/kernel/csrc-phoenix.c
@@ -29,6 +29,8 @@
 
 #include <asm/rmi/pic.h>
 
+extern spinlock_t phnx_pic_lock;
+
 #define	PIC_TIMER6_MAX_VAL	0xffffffff
 
 cycle_t xlr_hpt_read(void)
@@ -53,6 +55,9 @@ void __init phoenix_clocksource_init(void)
 {
 	struct clocksource *cs = &phoenix_clocksource;
 	phoenix_reg_t *mmio = phoenix_io_mmio(PHOENIX_IO_PIC_OFFSET);
+	unsigned long flags;
+
+	spin_lock_irqsave(&phnx_pic_lock, flags);
 
 	/* Use PIC Timer 6 as a free running counter */
 	phoenix_write_reg(mmio, PIC_TIMER_6_MAXVAL_0, 0xffffffff);
@@ -63,6 +68,8 @@ void __init phoenix_clocksource_init(void)
 					  (1 << 31) | (0 << 30) | (1 << 6) | (PIC_TIMER_6_IRQ));
 	pic_update_control(1 << (8 + 6));
 
+	spin_unlock_irqrestore(&phnx_pic_lock, flags);
+
 	clocksource_set_clock(cs, PIC_CLKS_PER_SEC);
 	clocksource_register(cs);
 }
-- 
1.6.0.4

