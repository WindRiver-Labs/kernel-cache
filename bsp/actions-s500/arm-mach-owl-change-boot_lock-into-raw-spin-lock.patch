From 8a3cb6786ec00b5a7c57c4cb84eb4a3c51fb7b05 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Mon, 23 Jan 2017 16:30:55 +0800
Subject: [PATCH] arm: mach: owl: change boot_lock into raw spin lock

when boot up preempt-rt kernel, and disable/enable one cpu
with below command:
echo 0 > /sys/devices/system/cpu/cpu1/online
echo 1 > /sys/devices/system/cpu/cpu1/online
there will be core trace as below:
BUG: sleeping function called from invalid context at
kernel/locking/rtmutex.c:917
in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/1
Preemption disabled at:[< (null)>] (null)
CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.1.21-rt13-WR8.0.0.0_preempt-rt #1
Hardware name: gs705a
[<c0019ab8>] (unwind_backtrace) from [<c0013b78>] (show_stack+0x20/0x24)
[<c0013b78>] (show_stack) from [<c07fe9f4>] (dump_stack+0x84/0xa8)
[<c07fe9f4>] (dump_stack) from [<c0059544>] (___might_sleep+0x184/0x1b8)
[<c0059544>] (___might_sleep) from [<c08061b8>] (rt_spin_lock+0x28/0x78)
[<c08061b8>] (rt_spin_lock) from [<c002ff30>] (owl_secondary_init+0x2c/0x40)
[<c002ff30>] (owl_secondary_init) from [<c0016114>] (secondary_start_kernel+0xdc/0x130)
[<c0016114>] (secondary_start_kernel) from [<0000950c>] (0x950c)

This issue is introduced by commit b11912c6f323
(arm: owl: initial support Actions S500 SoC) when merge SDK patch
related with s500 mach.

So, change boot_lock into raw spin lock for fixing this issue.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-owl/platsmp-owl.c |   10 +++++-----
 1 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-owl/platsmp-owl.c b/arch/arm/mach-owl/platsmp-owl.c
index 5afc13f..e3d76aa 100755
--- a/arch/arm/mach-owl/platsmp-owl.c
+++ b/arch/arm/mach-owl/platsmp-owl.c
@@ -32,7 +32,7 @@
 #define BOOT_FLAG					(0x55aa)
 #define CPU_SHIFT(cpu)	(19 + cpu)
 
-static DEFINE_SPINLOCK(boot_lock);
+static DEFINE_RAW_SPINLOCK(boot_lock);
 
 static void __iomem *scu_base_addr(void)
 {
@@ -65,8 +65,8 @@ void __cpuinit owl_secondary_init(unsigned int cpu)
 	/*
 	 * Synchronise with the boot thread.
 	 */
-	spin_lock(&boot_lock);
-	spin_unlock(&boot_lock);
+	raw_spin_lock(&boot_lock);
+	raw_spin_unlock(&boot_lock);
 }
 
 static void wakeup_secondary(unsigned int cpu)
@@ -131,7 +131,7 @@ int __cpuinit owl_boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 * set synchronisation state between this boot processor
 	 * and the secondary one
 	 */
-	spin_lock(&boot_lock);
+	raw_spin_lock(&boot_lock);
 
 	/*
 	 * The secondary processor is waiting to be released from
@@ -170,7 +170,7 @@ int __cpuinit owl_boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 * now the secondary core is starting up let it run its
 	 * calibrations, then wait for it to finish
 	 */
-	spin_unlock(&boot_lock);
+	raw_spin_unlock(&boot_lock);
 
 	return pen_release != -1 ? -ENOSYS : 0;
 }
-- 
1.7.5.4

