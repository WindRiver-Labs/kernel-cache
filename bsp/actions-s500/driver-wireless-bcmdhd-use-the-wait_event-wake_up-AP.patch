From 4974bf09ba9b9605813d8bfd3f930cf9552bcad8 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 24 Jan 2017 11:26:41 +0800
Subject: [PATCH] driver: wireless: bcmdhd: use the wait_event/wake_up API to
 replace the misusing completion API
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

When build preempt-rt kernel, there is build warning with bcmdhd
wireless driver.
Build warnings as below:
drivers/net/wireless/actions/bcmdhd/dhd_pno.c: In function '_dhd_pno_get_for_batch':
drivers/net/wireless/actions/bcmdhd/dhd_pno.c:1357:23:
warning: passing argument 1 of 'waitqueue_active' from incompatible pointer type [-Wincompatible-pointer-types]
if (waitqueue_active(&_pno_state->get_batch_done.wait))
	                       ^
include/linux/mmzone.h:9:0,
include/linux/gfp.h:5,
include/linux/kmod.h:22,
include/linux/module.h:13,
drivers/net/wireless/actions/bcmdhd/include/linuxver.h:24,
drivers/net/wireless/actions/bcmdhd/include/linux_osl.h:243,
drivers/net/wireless/actions/bcmdhd/include/osl.h:25,
drivers/net/wireless/actions/bcmdhd/dhd_pno.c:11:
include/linux/wait.h:106:19: note:
expected 'wait_queue_head_t * {aka struct __wait_queue_head *}' but argument is of type 'struct swait_head *'
static inline int waitqueue_active(wait_queue_head_t *q)
                   ^
drivers/net/wireless/actions/bcmdhd/dhd_pno.c: In function 'dhd_pno_event_handler':
drivers/net/wireless/actions/bcmdhd/dhd_pno.c:1802:25:
warning: passing argument 1 of 'waitqueue_active' from incompatible pointer type [-Wincompatible-pointer-types]
if (!waitqueue_active(&_pno_state->get_batch_done.wait)) {
                         ^
include/linux/mmzone.h:9:0,
include/linux/gfp.h:5,
include/linux/kmod.h:22,
include/linux/module.h:13,
drivers/net/wireless/actions/bcmdhd/include/linuxver.h:24,
drivers/net/wireless/actions/bcmdhd/include/linux_osl.h:243,
drivers/net/wireless/actions/bcmdhd/include/osl.h:25,
drivers/net/wireless/actions/bcmdhd/dhd_pno.c:11:
include/linux/wait.h:106:19: note:
expected 'wait_queue_head_t * {aka struct __wait_queue_head *}' but argument is of type 'struct swait_head *'
static inline int waitqueue_active(wait_queue_head_t *q)
                   ^
In bcmdhd wireless driver, it is not appropriate to use the field wait
of struct completion. So we change the type of the field get_batch_done
from struct completion into wait_queue_head_t, and change corresponding
API for wait and wakeup operation.

This issues is introduced by commit bd87049308fb
(“wireless: add owl wireless driver”) when merge SDK patch related with
wireless driver.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 drivers/net/wireless/actions/bcmdhd/dhd_pno.c |   12 +++++++-----
 drivers/net/wireless/actions/bcmdhd/dhd_pno.h |    3 ++-
 2 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/net/wireless/actions/bcmdhd/dhd_pno.c b/drivers/net/wireless/actions/bcmdhd/dhd_pno.c
index d3f9ad7..e8fd7af 100755
--- a/drivers/net/wireless/actions/bcmdhd/dhd_pno.c
+++ b/drivers/net/wireless/actions/bcmdhd/dhd_pno.c
@@ -1354,8 +1354,8 @@ exit:
 		_params->params_batch.get_batch.bytes_written = err;
 	}
 	mutex_unlock(&_pno_state->pno_mutex);
-	if (waitqueue_active(&_pno_state->get_batch_done.wait))
-		complete(&_pno_state->get_batch_done);
+	_pno_state->wakeup_flag = 1;
+	wake_up(&_pno_state->get_batch_done);
 	return err;
 }
 static void
@@ -1412,7 +1412,8 @@ dhd_pno_get_for_batch(dhd_pub_t *dhd, char *buf, int bufsize, int reason)
 	params_batch->get_batch.reason = reason;
 	params_batch->get_batch.bytes_written = 0;
 	schedule_work(&_pno_state->work);
-	wait_for_completion(&_pno_state->get_batch_done);
+	wait_event(_pno_state->get_batch_done, _pno_state->wakeup_flag == 1);
+	_pno_state->wakeup_flag = 0;
 	err = params_batch->get_batch.bytes_written;
 exit:
 	return err;
@@ -1799,7 +1800,7 @@ dhd_pno_event_handler(dhd_pub_t *dhd, wl_event_msg_t *event, void *event_data)
 	{
 		struct dhd_pno_batch_params *params_batch;
 		params_batch = &_pno_state->pno_params_arr[INDEX_OF_BATCH_PARAMS].params_batch;
-		if (!waitqueue_active(&_pno_state->get_batch_done.wait)) {
+		if (!waitqueue_active(&_pno_state->get_batch_done)) {
 			DHD_PNO(("%s : WLC_E_PFN_BEST_BATCHING\n", __FUNCTION__));
 			params_batch->get_batch.buf = NULL;
 			params_batch->get_batch.bufsize = 0;
@@ -1835,7 +1836,8 @@ int dhd_pno_init(dhd_pub_t *dhd)
 	_pno_state->dhd = dhd;
 	mutex_init(&_pno_state->pno_mutex);
 	INIT_WORK(&_pno_state->work, _dhd_pno_get_batch_handler);
-	init_completion(&_pno_state->get_batch_done);
+	_pno_state->wakeup_flag = 0;
+	init_waitqueue_head(&_pno_state->get_batch_done);
 	err = dhd_iovar(dhd, 0, "pfnlbest", NULL, 0, 0);
 	if (err == BCME_UNSUPPORTED) {
 		_pno_state->wls_supported = FALSE;
diff --git a/drivers/net/wireless/actions/bcmdhd/dhd_pno.h b/drivers/net/wireless/actions/bcmdhd/dhd_pno.h
index 1980476..19364f4 100755
--- a/drivers/net/wireless/actions/bcmdhd/dhd_pno.h
+++ b/drivers/net/wireless/actions/bcmdhd/dhd_pno.h
@@ -176,7 +176,8 @@ typedef struct dhd_pno_status_info {
 	dhd_pub_t *dhd;
 	struct work_struct work;
 	struct mutex pno_mutex;
-	struct completion get_batch_done;
+	wait_queue_head_t get_batch_done;
+	uint8 wakeup_flag;
 	bool wls_supported; /* wifi location service supported or not */
 	enum dhd_pno_status pno_status;
 	enum dhd_pno_mode pno_mode;
-- 
1.7.5.4

