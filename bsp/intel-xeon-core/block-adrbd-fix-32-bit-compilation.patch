From f7d27c17c6026228399a8bc988a2db27c741459a Mon Sep 17 00:00:00 2001
From: Bruce Ashfield <bruce.ashfield@windriver.com>
Date: Thu, 16 May 2013 23:56:30 -0400
Subject: [PATCH] block/adrbd: fix 32 bit compilation

The 32bit variant of adrbd recursively defines memcpy, which results
in the following error:

   drivers/block/adrbd.c: In function 'adr_make_request':
   drivers/block/adrbd.c:169:15: sorry, unimplemented: inlining failed in
   call to '__builtin_memcpy': recursive inlining
   drivers/block/adrbd.c:171:2: sorry, unimplemented: called from here
   drivers/block/adrbd.c:169:15: sorry, unimplemented: inlining failed in
   call to '__builtin_memcpy': recursive inlining
   drivers/block/adrbd.c:171:2: sorry, unimplemented: called from here

adrbd calls "memcpy_nt", which has a 64 bit and 32 bit variant. The 64
bit variant defines _memcpy_nt64 and maps it to memcpy_nt via a #define.
while the 32 bit variant defines memcpy_nt directly via its inline function,
which is mapped to "memcpy" via a #define (presumably as an old fallback
to an unoptimized/generic memcopy in the past). The routine calls memcpy
internally for the fallback, which results in a recursive inline of memcpy.

So we remove the #define and the 32 bit build is once again valid.

Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
---
 drivers/block/adrbd.c |    1 -
 1 file changed, 1 deletion(-)

diff --git a/drivers/block/adrbd.c b/drivers/block/adrbd.c
index f50c7de..8393853 100644
--- a/drivers/block/adrbd.c
+++ b/drivers/block/adrbd.c
@@ -165,7 +165,6 @@ static void * _memcpy_nt64(void *dst, void *src, size_t len)
 
 #define memcpy_nt _memcpy_nt64
 #else
-#define memcpy_nt memcpy
 inline void * memcpy_nt(void *dest, const void *src, size_t n)
 {
 	memcpy(dest, src, n);
-- 
1.7.10.4

