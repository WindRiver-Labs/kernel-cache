From ec742fc1fc078c3fd872164096ffcdc6d664b731 Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Fri, 18 Jan 2013 14:59:21 +0800
Subject: [PATCH 1/2] x86: mce: Split timer init

commit 26c3c283c5b08dd250279c06ba3ab5b094bbacc3 upstream

Split timer init function into the init and the start part, so the
start part can replace the open coded version in CPU_DOWN_FAILED.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Chen Gong <gong.chen@linux.intel.com>
Acked-by: Borislav Petkov <borislav.petkov@amd.com>
Signed-off-by: Tony Luck <tony.luck@intel.com>
[make minor changes to adapt to rt.]
Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 arch/x86/kernel/cpu/mcheck/mce.c |   24 +++++++++++++++---------
 1 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/arch/x86/kernel/cpu/mcheck/mce.c b/arch/x86/kernel/cpu/mcheck/mce.c
index 9e0054c..51ce295 100644
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@ -1266,7 +1266,7 @@ static unsigned long check_interval = 5 * 60; /* 5 minutes */
 static DEFINE_PER_CPU(unsigned long, mce_next_interval); /* in jiffies */
 static DEFINE_PER_CPU(struct hrtimer, mce_timer);
 
-static enum hrtimer_restart mce_start_timer(struct hrtimer *timer)
+static enum hrtimer_restart mce_timer_fn(struct hrtimer *timer)
 {
 	unsigned long *n;
 
@@ -1592,25 +1592,29 @@ static void __mcheck_cpu_init_vendor(struct cpuinfo_x86 *c)
 	}
 }
 
-static void __mcheck_cpu_init_timer(void)
+static void mce_start_timer(unsigned int cpu, struct hrtimer *t)
 {
-	struct hrtimer *t = &__get_cpu_var(mce_timer);
 	unsigned long *n = &__get_cpu_var(mce_next_interval);
 
-	hrtimer_init(t, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
-	t->function = mce_start_timer;
-
-	if (mce_ignore_ce)
+	if (mce_ignore_ce || !*n)
 		return;
 
 	*n = check_interval * HZ;
-	if (!*n)
-		return;
 
 	hrtimer_start_range_ns(t, ns_to_ktime(jiffies_to_usecs(*n) * 1000),
 			       0 , HRTIMER_MODE_REL_PINNED);
 }
 
+static void __mcheck_cpu_init_timer(void)
+{
+	struct hrtimer *t = &__get_cpu_var(mce_timer);
+	unsigned int cpu = smp_processor_id();
+
+	hrtimer_init(t, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+	t->function = mce_timer_fn;
+	mce_start_timer(cpu, t);
+}
+
 /* Handle unconfigured int18 (should never happen) */
 static void unexpected_machine_check(struct pt_regs *regs, long error_code)
 {
@@ -2299,6 +2303,7 @@ static int __cpuinit
 mce_cpu_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)
 {
 	unsigned int cpu = (unsigned long)hcpu;
+	struct hrtimer *t = &per_cpu(mce_timer, cpu);
 
 	switch (action) {
 	case CPU_ONLINE:
@@ -2320,6 +2325,7 @@ mce_cpu_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)
 	case CPU_DOWN_FAILED:
 	case CPU_DOWN_FAILED_FROZEN:
 		smp_call_function_single(cpu, mce_reenable_cpu, &action, 1);
+		mce_start_timer(cpu, t);
 		break;
 	case CPU_POST_DEAD:
 		/* intentionally ignoring frozen here */
-- 
1.7.8.110.g4cb5d

