From 4d56d43f7fc94a1d43d89bbd9f69473620873858 Mon Sep 17 00:00:00 2001
From: Liu Changhui <changhui.liu@windriver.com>
Date: Sun, 6 Jun 2010 14:12:38 +0800
Subject: [PATCH 12/21] Platform bcm5300x serial support

Add serial support for bcm5300x

Source: from broadcom SDK

Signed-off-by: Liu Changhui <changhui.liu@windriver.com>
---
 arch/mips/bcm53000/Makefile |    2 +-
 arch/mips/bcm53000/serial.c |  155 +++++++++++++++++++++++++++++++++++++++++++
 include/asm-mips/serial.h   |   15 ++++
 3 files changed, 171 insertions(+), 1 deletions(-)
 create mode 100644 arch/mips/bcm53000/serial.c

diff --git a/arch/mips/bcm53000/Makefile b/arch/mips/bcm53000/Makefile
index 1d27765..eb37d95 100644
--- a/arch/mips/bcm53000/Makefile
+++ b/arch/mips/bcm53000/Makefile
@@ -19,6 +19,6 @@
 #
 
 obj-y += time.o prom.o setup.o irq.o hndmips.o hnddma.o hndpci.o nicpci.o\
-		 nvram.o nvram_linux.o bcmsrom.o hndpmu.o
+		 nvram.o nvram_linux.o bcmsrom.o hndpmu.o serial.o
 
 EXTRA_CFLAGS += -DCFE_API_ALL
diff --git a/arch/mips/bcm53000/serial.c b/arch/mips/bcm53000/serial.c
new file mode 100644
index 0000000..2a1a2cf
--- /dev/null
+++ b/arch/mips/bcm53000/serial.c
@@ -0,0 +1,155 @@
+/*
+ * Copyright (C) 2009 Broadcom Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,USA.
+ *
+ *
+ */
+/*
+ * BCM47XX support code for some chipcommon facilities (uart, jtagm)
+ *
+ * $Copyright Open Broadcom Corporation$
+ *
+ *
+ */
+
+#include <typedefs.h>
+#include <bcmdefs.h>
+#include <osl.h>
+#include <bcmutils.h>
+#include <siutils.h>
+#include <bcmnvram.h>
+#include <hndsoc.h>
+#include <sbchipc.h>
+#include <hndchipc.h>
+#include <hndcpu.h>
+/*
+ * Initializes UART access. The callback function will be called once
+ * per found UART.
+ */
+void
+BCMINITFN(si_serial_init) (si_t *sih, si_serial_init_fn add,
+			   uint32 baudrate) {
+    osl_t *osh;
+    void *regs;
+    chipcregs_t *cc;
+    uint32 rev, cap, pll, baud_base, div;
+    uint irq;
+    int i, n;
+
+    osh = si_osh(sih);
+
+    cc = (chipcregs_t *) si_setcoreidx(sih, SI_CC_IDX);
+    ASSERT(cc);
+
+    /* Determine core revision and capabilities */
+    rev = sih->ccrev;
+    cap = sih->cccaps;
+    pll = cap & CC_CAP_PLL_MASK;
+
+    /* Determine IRQ */
+    irq = si_irq(sih);
+
+    if (CCPLL_ENAB(sih) && pll == PLL_TYPE1) {
+	/* PLL clock */
+	baud_base = si_clock_rate(pll,
+				  R_REG(osh, &cc->clockcontrol_n),
+				  R_REG(osh, &cc->clockcontrol_m2));
+	div = 1;
+    } else {
+	/* Fixed ALP clock */
+	/* XXX rev. 15 in 4785 breaks the rule! */
+	if (rev >= 11 && rev != 15) {
+	    baud_base = si_alp_clock(sih);
+	    div = 1;
+
+	    /*
+	     * If baudrate parameter is given with a non-zero value,
+	     * UART clock will be divided for the given baud rate before
+	     * feeding into UART module.
+	     * Note: UART driver could also adjust UART module's divider for
+	     *       clock fine tunning.
+	     */
+	    if (baudrate) {
+
+		/* Turn off UART clock before switching clock source */
+		if (rev >= 21)
+		    AND_REG(osh, &cc->corecontrol, ~CC_UARTCLKEN);
+
+		/* Don't set the override bit so we divide it */
+		AND_REG(osh, &cc->corecontrol, ~CC_UARTCLKO);
+
+		div = baud_base / (baudrate * 16);
+		div = (div + 1) & ~0x1;
+		AND_REG(osh, &cc->clkdiv, ~CLKD_UART);
+		OR_REG(osh, &cc->clkdiv, div);
+		OR_REG(osh, &cc->corecontrol, 0x80);
+
+		/* Turn back UART clock on */
+		if (rev >= 21)
+		    OR_REG(osh, &cc->corecontrol, CC_UARTCLKEN);
+
+	    } else {
+
+		/* Turn off UART clock before switching clock source */
+		if (rev >= 21)
+		    AND_REG(osh, &cc->corecontrol, ~CC_UARTCLKEN);
+
+		OR_REG(osh, &cc->corecontrol, CC_UARTCLKO);
+
+		/* Turn back UART clock on */
+		if (rev >= 21)
+		    OR_REG(osh, &cc->corecontrol, CC_UARTCLKEN);
+	    }
+
+	} else if (rev >= 3) {
+	    /* Internal backplane clock */
+	    baud_base = si_clock(sih);
+	    div = 2;		/* Minimum divisor */
+	    W_REG(osh, &cc->clkdiv,
+		  ((R_REG(osh, &cc->clkdiv) & ~CLKD_UART) | div));
+	} else {
+	    /* Fixed internal backplane clock */
+	    baud_base = 88000000;
+	    div = 48;
+	}
+
+	/* Clock source depends on strapping if UartClkOverride is unset */
+	if ((rev > 0) &&
+	    ((R_REG(osh, &cc->corecontrol) & CC_UARTCLKO) == 0)) {
+	    if ((cap & CC_CAP_UCLKSEL) == CC_CAP_UINTCLK) {
+		/* Internal divided backplane clock */
+		baud_base /= div;
+	    } else {
+		/* Assume external clock of 1.8432 MHz */
+		baud_base = 1843200;
+	    }
+	}
+    }
+
+    /* Add internal UARTs */
+    n = cap & CC_CAP_UARTS_MASK;
+    for (i = 0; i < n; i++) {
+	/* Register offset changed after revision 0 */
+	if (rev)
+	    regs = (void *) ((ulong) & cc->uart0data + (i * 256));
+	else
+	    regs = (void *) ((ulong) & cc->uart0data + (i * 8));
+
+	if (add)
+	    add(regs, irq, baud_base, 0);
+    }
+}
+
diff --git a/include/asm-mips/serial.h b/include/asm-mips/serial.h
index c07ebd8..e32b722 100644
--- a/include/asm-mips/serial.h
+++ b/include/asm-mips/serial.h
@@ -19,4 +19,19 @@
  */
 #define BASE_BAUD (1843200 / 16)
 
+#ifdef CONFIG_BCM53000
+#define STD_COM_FLAGS (ASYNC_BOOT_AUTOCONF | ASYNC_SKIP_TEST)
+#define BCM53000_SERIAL_PORT_DEFNS \
+	{ 	.baud_base = 25000000/16, .irq = 8, 		                \
+		.flags = STD_COM_FLAGS, .iomem_base = (u8 *)0xb8000300, 	\
+		.iomem_reg_shift = 0, .io_type = SERIAL_IO_MEM},		\
+		{ .baud_base = 25000000/16, .irq = 8, 		                \
+		.flags = STD_COM_FLAGS, .iomem_base = (u8 *)0xb8000400, 	\
+		.iomem_reg_shift = 0, .io_type = SERIAL_IO_MEM},
+#else
+#define BCM53000_SERIAL_PORT_DEFNS
+#endif /* CONFIG_BCM53000 */
+
+#define SERIAL_PORT_DFNS				\
+    BCM53000_SERIAL_PORT_DEFNS
 #endif /* _ASM_SERIAL_H */
-- 
1.7.0.4

