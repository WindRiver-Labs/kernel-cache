From aae5650fae394b075b25fe34431cf8d04e3b3320 Mon Sep 17 00:00:00 2001
From: popcornmix <popcornmix@gmail.com>
Date: Wed, 5 Oct 2016 16:10:59 +0100
Subject: [PATCH 103/203] bcm2835-cpufreq: Only report a single frequency when
 max and min frequencies are the same

4.8 kernel gives EINV error when max and min frequencies are the same (e.g. from using force_turbo=1)
[Xulin: Original patch taken from
https://github.com/raspberrypi/linux.git branch rpi-4.8.y]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/cpufreq/bcm2835-cpufreq.c |   27 ++++++++++++++++-----------
 1 files changed, 16 insertions(+), 11 deletions(-)

diff --git a/drivers/cpufreq/bcm2835-cpufreq.c b/drivers/cpufreq/bcm2835-cpufreq.c
index 3eb9e93..414fbdc 100644
--- a/drivers/cpufreq/bcm2835-cpufreq.c
+++ b/drivers/cpufreq/bcm2835-cpufreq.c
@@ -45,12 +45,8 @@
 
 /* ---------- GLOBALS ---------- */
 static struct cpufreq_driver bcm2835_cpufreq_driver;	/* the cpufreq driver global */
-
-static struct cpufreq_frequency_table bcm2835_freq_table[] = {
-	{0, 0, 0},
-	{0, 0, 0},
-	{0, 0, CPUFREQ_TABLE_END},
-};
+static unsigned int min_frequency, max_frequency;
+static struct cpufreq_frequency_table bcm2835_freq_table[3];
 
 /*
  ===============================================
@@ -155,10 +151,19 @@ static int bcm2835_cpufreq_driver_init(struct cpufreq_policy *policy)
 	}
 
 	/* now find out what the maximum and minimum frequencies are */
-	bcm2835_freq_table[0].frequency = bcm2835_cpufreq_get_clock(RPI_FIRMWARE_GET_MIN_CLOCK_RATE);
-	bcm2835_freq_table[1].frequency = bcm2835_cpufreq_get_clock(RPI_FIRMWARE_GET_MAX_CLOCK_RATE);
+	min_frequency = bcm2835_cpufreq_get_clock(RPI_FIRMWARE_GET_MIN_CLOCK_RATE);
+	max_frequency = bcm2835_cpufreq_get_clock(RPI_FIRMWARE_GET_MAX_CLOCK_RATE);
+
+	if (min_frequency == max_frequency) {
+		bcm2835_freq_table[0].frequency = min_frequency;
+		bcm2835_freq_table[1].frequency = CPUFREQ_TABLE_END;
+	} else {
+		bcm2835_freq_table[0].frequency = min_frequency;
+		bcm2835_freq_table[1].frequency = max_frequency;
+		bcm2835_freq_table[2].frequency = CPUFREQ_TABLE_END;
+	}
 
-	print_info("min=%d max=%d\n", bcm2835_freq_table[0].frequency, bcm2835_freq_table[1].frequency);
+	print_info("min=%d max=%d\n", min_frequency, max_frequency);
 	return cpufreq_generic_init(policy, bcm2835_freq_table, transition_latency);
 }
 
@@ -170,7 +175,7 @@ static int bcm2835_cpufreq_driver_init(struct cpufreq_policy *policy)
 
 static int bcm2835_cpufreq_driver_target_index(struct cpufreq_policy *policy, unsigned int state)
 {
-	unsigned int target_freq = bcm2835_freq_table[state].frequency;
+	unsigned int target_freq = state == 0 ? min_frequency : max_frequency;
 	unsigned int cur = bcm2835_cpufreq_set_clock(policy->cur, target_freq);
 
 	if (!cur)
@@ -192,7 +197,7 @@ static unsigned int bcm2835_cpufreq_driver_get(unsigned int cpu)
 {
 	unsigned int actual_rate = bcm2835_cpufreq_get_clock(RPI_FIRMWARE_GET_CLOCK_RATE);
 	print_debug("cpu%d: freq=%d\n", cpu, actual_rate);
-	return actual_rate <= bcm2835_freq_table[0].frequency ? bcm2835_freq_table[0].frequency : bcm2835_freq_table[1].frequency;
+	return actual_rate <= min_frequency ? min_frequency : max_frequency;
 }
 
 /* the CPUFreq driver */
-- 
1.7.5.4

