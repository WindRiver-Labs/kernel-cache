From 7e1d48a1a58b79c25c737da5d049c8e8091868b8 Mon Sep 17 00:00:00 2001
From: popcornmix <popcornmix@gmail.com>
Date: Wed, 9 Nov 2016 22:42:39 +0000
Subject: [PATCH 152/203] brcmvirt_gpio: Create coherent buffer and push to
 firmware

[Xulin: Original patch taken from
https://github.com/raspberrypi/linux.git branch rpi-4.8.y]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/gpio/gpio-bcm-virt.c               |   89 +++++++++++++++++++--------
 include/soc/bcm2835/raspberrypi-firmware.h |    1 +
 2 files changed, 63 insertions(+), 27 deletions(-)

diff --git a/drivers/gpio/gpio-bcm-virt.c b/drivers/gpio/gpio-bcm-virt.c
index f3e0f16..c372554 100644
--- a/drivers/gpio/gpio-bcm-virt.c
+++ b/drivers/gpio/gpio-bcm-virt.c
@@ -14,6 +14,7 @@
 #include <linux/gpio.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
+#include <linux/dma-mapping.h>
 #include <soc/bcm2835/raspberrypi-firmware.h>
 
 #define MODULE_NAME "brcmvirt-gpio"
@@ -25,6 +26,7 @@ struct brcmvirt_gpio {
 	/* two packed 16-bit counts of enabled and disables
            Allows host to detect a brief enable that was missed */
 	u32			enables_disables[NUM_GPIO];
+	dma_addr_t		bus_addr;
 };
 
 static int brcmvirt_gpio_dir_in(struct gpio_chip *gc, unsigned off)
@@ -75,13 +77,13 @@ static void brcmvirt_gpio_set(struct gpio_chip *gc, unsigned off, int val)
 
 static int brcmvirt_gpio_probe(struct platform_device *pdev)
 {
+	int err = 0;
 	struct device *dev = &pdev->dev;
 	struct device_node *np = dev->of_node;
 	struct device_node *fw_node;
 	struct rpi_firmware *fw;
 	struct brcmvirt_gpio *ucb;
 	u32 gpiovirtbuf;
-	int err = 0;
 
 	fw_node = of_parse_phandle(np, "firmware", 0);
 	if (!fw_node) {
@@ -93,35 +95,56 @@ static int brcmvirt_gpio_probe(struct platform_device *pdev)
 	if (!fw)
 		return -EPROBE_DEFER;
 
-	err = rpi_firmware_property(fw, RPI_FIRMWARE_FRAMEBUFFER_GET_GPIOVIRTBUF,
-				    &gpiovirtbuf, sizeof(gpiovirtbuf));
-
-	if (err) {
-		dev_err(dev, "Failed to get gpiovirtbuf\n");
-		goto err;
-	}
-
-	if (!gpiovirtbuf) {
-		dev_err(dev, "No virtgpio buffer\n");
-		err = -ENOENT;
-		goto err;
-	}
-
 	ucb = devm_kzalloc(dev, sizeof *ucb, GFP_KERNEL);
 	if (!ucb) {
 		err = -EINVAL;
-		goto err;
+		goto out;
 	}
 
-	// mmap the physical memory
-	gpiovirtbuf &= ~0xc0000000;
-	ucb->ts_base = ioremap(gpiovirtbuf, 4096);
-	if (ucb->ts_base == NULL) {
-		dev_err(dev, "Failed to map physical address\n");
-		err = -ENOENT;
-		goto err;
+	ucb->ts_base = dma_zalloc_coherent(dev, PAGE_SIZE, &ucb->bus_addr, GFP_KERNEL);
+	if (!ucb->ts_base) {
+		pr_err("[%s]: failed to dma_alloc_coherent(%ld)\n",
+				__func__, PAGE_SIZE);
+		err = -ENOMEM;
+		goto out;
 	}
 
+	gpiovirtbuf = (u32)ucb->bus_addr;
+	err = rpi_firmware_property(fw, RPI_FIRMWARE_FRAMEBUFFER_SET_GPIOVIRTBUF,
+				    &gpiovirtbuf, sizeof(gpiovirtbuf));
+
+	if (err || gpiovirtbuf != 0) {
+		dev_warn(dev, "Failed to set gpiovirtbuf, trying to get err:%x\n", err);
+		dma_free_coherent(dev, PAGE_SIZE, ucb->ts_base, ucb->bus_addr);
+		ucb->ts_base = 0;
+		ucb->bus_addr = 0;
+	}
+
+	if (!ucb->ts_base) {
+		err = rpi_firmware_property(fw, RPI_FIRMWARE_FRAMEBUFFER_GET_GPIOVIRTBUF,
+					    &gpiovirtbuf, sizeof(gpiovirtbuf));
+
+		if (err) {
+			dev_err(dev, "Failed to get gpiovirtbuf\n");
+			goto out;
+		}
+
+		if (!gpiovirtbuf) {
+			dev_err(dev, "No virtgpio buffer\n");
+			err = -ENOENT;
+			goto out;
+		}
+
+		// mmap the physical memory
+		gpiovirtbuf &= ~0xc0000000;
+		ucb->ts_base = ioremap(gpiovirtbuf, 4096);
+		if (ucb->ts_base == NULL) {
+			dev_err(dev, "Failed to map physical address\n");
+			err = -ENOENT;
+			goto out;
+		}
+		ucb->bus_addr = 0;
+	}
 	ucb->gc.label = MODULE_NAME;
 	ucb->gc.owner = THIS_MODULE;
 	//ucb->gc.dev = dev;
@@ -137,22 +160,34 @@ static int brcmvirt_gpio_probe(struct platform_device *pdev)
 
 	err = gpiochip_add(&ucb->gc);
 	if (err)
-		goto err;
+		goto out;
 
 	platform_set_drvdata(pdev, ucb);
 
-err:
+	return 0;
+out:
+	if (ucb->bus_addr) {
+		dma_free_coherent(dev, PAGE_SIZE, ucb->ts_base, ucb->bus_addr);
+		ucb->bus_addr = 0;
+		ucb->ts_base = NULL;
+	} else if (ucb->ts_base) {
+		iounmap(ucb->ts_base);
+		ucb->ts_base = NULL;
+	}
 	return err;
-
 }
 
 static int brcmvirt_gpio_remove(struct platform_device *pdev)
 {
+	struct device *dev = &pdev->dev;
 	int err = 0;
 	struct brcmvirt_gpio *ucb = platform_get_drvdata(pdev);
 
 	gpiochip_remove(&ucb->gc);
-	iounmap(ucb->ts_base);
+	if (ucb->bus_addr)
+		dma_free_coherent(dev, PAGE_SIZE, ucb->ts_base, ucb->bus_addr);
+	else if (ucb->ts_base)
+		iounmap(ucb->ts_base);
 	return err;
 }
 
diff --git a/include/soc/bcm2835/raspberrypi-firmware.h b/include/soc/bcm2835/raspberrypi-firmware.h
index b0f6e33..e922789 100644
--- a/include/soc/bcm2835/raspberrypi-firmware.h
+++ b/include/soc/bcm2835/raspberrypi-firmware.h
@@ -116,6 +116,7 @@ enum rpi_firmware_property_tag {
 	RPI_FIRMWARE_FRAMEBUFFER_SET_OVERSCAN =               0x0004800a,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_PALETTE =                0x0004800b,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_TOUCHBUF =               0x0004801f,
+	RPI_FIRMWARE_FRAMEBUFFER_SET_GPIOVIRTBUF =            0x00048020,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_VSYNC =                  0x0004800e,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_BACKLIGHT =              0x0004800f,
 
-- 
1.7.5.4

