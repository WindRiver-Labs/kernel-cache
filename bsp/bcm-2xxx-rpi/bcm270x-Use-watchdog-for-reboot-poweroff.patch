From c6bc686e642c8e25ec15cd6a5118c84e62d4c93b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Noralf=20Tr=C3=B8nnes?= <noralf@tronnes.org>
Date: Fri, 7 Oct 2016 17:07:46 +0200
Subject: [PATCH 110/203] bcm270x: Use watchdog for reboot/poweroff
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The watchdog driver already has support for reboot/poweroff.
Make use of this and remove the code from the platform files.

Signed-off-by: Noralf Tr√∏nnes <noralf@tronnes.org>
[Xulin: Original patch taken from
https://github.com/raspberrypi/linux.git branch rpi-4.8.y]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 arch/arm/mach-bcm2708/bcm2708.c |   70 --------------------------------------
 arch/arm/mach-bcm2709/bcm2709.c |   71 ---------------------------------------
 2 files changed, 0 insertions(+), 141 deletions(-)

diff --git a/arch/arm/mach-bcm2708/bcm2708.c b/arch/arm/mach-bcm2708/bcm2708.c
index 280628b..a8e2a5b 100644
--- a/arch/arm/mach-bcm2708/bcm2708.c
+++ b/arch/arm/mach-bcm2708/bcm2708.c
@@ -44,7 +44,6 @@
 
 /* command line parameters */
 static unsigned boardrev, serial;
-static unsigned reboot_part = 0;
 
 static struct map_desc bcm2708_io_desc[] __initdata = {
 	{
@@ -99,71 +98,6 @@ void __init bcm2708_map_io(void)
 	iotable_init(bcm2708_io_desc, ARRAY_SIZE(bcm2708_io_desc));
 }
 
-int calc_rsts(int partition)
-{
-	return PM_PASSWORD |
-		((partition & (1 << 0))  << 0) |
-		((partition & (1 << 1))  << 1) |
-		((partition & (1 << 2))  << 2) |
-		((partition & (1 << 3))  << 3) |
-		((partition & (1 << 4))  << 4) |
-		((partition & (1 << 5))  << 5);
-}
-
-static void bcm2708_restart(enum reboot_mode mode, const char *cmd)
-{
-	extern char bcm2708_reboot_mode;
-	uint32_t pm_rstc, pm_wdog;
-	uint32_t timeout = 10;
-	uint32_t pm_rsts = 0;
-
-	if(bcm2708_reboot_mode == 'q')
-	{
-		// NOOBS < 1.3 booting with reboot=q
-		pm_rsts = readl(__io_address(PM_RSTS));
-		pm_rsts = PM_PASSWORD | pm_rsts | PM_RSTS_HADWRQ_SET;
-	}
-	else if(bcm2708_reboot_mode == 'p')
-	{
-		// NOOBS < 1.3 halting
-		pm_rsts = readl(__io_address(PM_RSTS));
-		pm_rsts = PM_PASSWORD | pm_rsts | PM_RSTS_HADWRH_SET;
-	}
-	else
-	{
-		pm_rsts = calc_rsts(reboot_part);
-	}
-
-	writel(pm_rsts, __io_address(PM_RSTS));
-
-	/* Setup watchdog for reset */
-	pm_rstc = readl(__io_address(PM_RSTC));
-
-	pm_wdog = PM_PASSWORD | (timeout & PM_WDOG_TIME_SET); // watchdog timer = timer clock / 16; need password (31:16) + value (11:0)
-	pm_rstc = PM_PASSWORD | (pm_rstc & PM_RSTC_WRCFG_CLR) | PM_RSTC_WRCFG_FULL_RESET;
-
-	writel(pm_wdog, __io_address(PM_WDOG));
-	writel(pm_rstc, __io_address(PM_RSTC));
-}
-
-/* We can't really power off, but if we do the normal reset scheme, and indicate to bootcode.bin not to reboot, then most of the chip will be powered off */
-static void bcm2708_power_off(void)
-{
-	extern char bcm2708_reboot_mode;
-	if(bcm2708_reboot_mode == 'q')
-	{
-		// NOOBS < v1.3
-		bcm2708_restart('p', "");
-	}
-	else
-	{
-		/* partition 63 is special code for HALT the bootloader knows not to boot*/
-		reboot_part = 63;
-		/* continue with normal reset mechanism */
-		bcm2708_restart(0, "");
-	}
-}
-
 static void __init bcm2708_init_uart1(void)
 {
 	struct device_node *np;
@@ -181,8 +115,6 @@ void __init bcm2708_init(void)
 
 	vc_cma_early_init();
 
-	pm_power_off = bcm2708_power_off;
-
 	ret = of_platform_populate(NULL, of_default_bus_match_table, NULL,
 				   NULL);
 	if (ret) {
@@ -222,10 +154,8 @@ MACHINE_START(BCM2708, "BCM2708")
 	.init_machine = bcm2708_init,
 	.init_early = bcm2708_init_early,
 	.reserve = board_reserve,
-	.restart	= bcm2708_restart,
 	.dt_compat = bcm2708_compat,
 MACHINE_END
 
 module_param(boardrev, uint, 0644);
 module_param(serial, uint, 0644);
-module_param(reboot_part, uint, 0644);
diff --git a/arch/arm/mach-bcm2709/bcm2709.c b/arch/arm/mach-bcm2709/bcm2709.c
index d4c9d57..ed5c541 100644
--- a/arch/arm/mach-bcm2709/bcm2709.c
+++ b/arch/arm/mach-bcm2709/bcm2709.c
@@ -51,7 +51,6 @@
 
 /* command line parameters */
 static unsigned boardrev, serial;
-static unsigned reboot_part = 0;
 
 static struct map_desc bcm2709_io_desc[] __initdata = {
 	{
@@ -111,71 +110,6 @@ void __init bcm2709_map_io(void)
 	iotable_init(bcm2709_io_desc, ARRAY_SIZE(bcm2709_io_desc));
 }
 
-int calc_rsts(int partition)
-{
-	return PM_PASSWORD |
-		((partition & (1 << 0))  << 0) |
-		((partition & (1 << 1))  << 1) |
-		((partition & (1 << 2))  << 2) |
-		((partition & (1 << 3))  << 3) |
-		((partition & (1 << 4))  << 4) |
-		((partition & (1 << 5))  << 5);
-}
-
-static void bcm2709_restart(enum reboot_mode mode, const char *cmd)
-{
-	extern char bcm2708_reboot_mode;
-	uint32_t pm_rstc, pm_wdog;
-	uint32_t timeout = 10;
-	uint32_t pm_rsts = 0;
-
-	if(bcm2708_reboot_mode == 'q')
-	{
-		// NOOBS < 1.3 booting with reboot=q
-		pm_rsts = readl(__io_address(PM_RSTS));
-		pm_rsts = PM_PASSWORD | pm_rsts | PM_RSTS_HADWRQ_SET;
-	}
-	else if(bcm2708_reboot_mode == 'p')
-	{
-		// NOOBS < 1.3 halting
-		pm_rsts = readl(__io_address(PM_RSTS));
-		pm_rsts = PM_PASSWORD | pm_rsts | PM_RSTS_HADWRH_SET;
-	}
-	else
-	{
-		pm_rsts = calc_rsts(reboot_part);
-	}
-
-	writel(pm_rsts, __io_address(PM_RSTS));
-
-	/* Setup watchdog for reset */
-	pm_rstc = readl(__io_address(PM_RSTC));
-
-	pm_wdog = PM_PASSWORD | (timeout & PM_WDOG_TIME_SET); // watchdog timer = timer clock / 16; need password (31:16) + value (11:0)
-	pm_rstc = PM_PASSWORD | (pm_rstc & PM_RSTC_WRCFG_CLR) | PM_RSTC_WRCFG_FULL_RESET;
-
-	writel(pm_wdog, __io_address(PM_WDOG));
-	writel(pm_rstc, __io_address(PM_RSTC));
-}
-
-/* We can't really power off, but if we do the normal reset scheme, and indicate to bootcode.bin not to reboot, then most of the chip will be powered off */
-static void bcm2709_power_off(void)
-{
-	extern char bcm2708_reboot_mode;
-	if(bcm2708_reboot_mode == 'q')
-	{
-		// NOOBS < v1.3
-		bcm2709_restart('p', "");
-	}
-	else
-	{
-		/* partition 63 is special code for HALT the bootloader knows not to boot*/
-		reboot_part = 63;
-		/* continue with normal reset mechanism */
-		bcm2709_restart(0, "");
-	}
-}
-
 static void __init bcm2709_init_uart1(void)
 {
 	struct device_node *np;
@@ -193,8 +127,6 @@ void __init bcm2709_init(void)
 
 	vc_cma_early_init();
 
-	pm_power_off = bcm2709_power_off;
-
 	ret = of_platform_populate(NULL, of_default_bus_match_table, NULL,
 				   NULL);
 	if (ret) {
@@ -235,7 +167,6 @@ MACHINE_START(BCM2709, "BCM2709")
 	.init_machine = bcm2709_init,
 	.init_early = bcm2709_init_early,
 	.reserve = board_reserve,
-	.restart	= bcm2709_restart,
 	.dt_compat = bcm2709_compat,
 MACHINE_END
 
@@ -245,10 +176,8 @@ MACHINE_START(BCM2708, "BCM2709")
 	.init_machine = bcm2709_init,
 	.init_early = bcm2709_init_early,
 	.reserve = board_reserve,
-	.restart	= bcm2709_restart,
 	.dt_compat = bcm2709_compat,
 MACHINE_END
 
 module_param(boardrev, uint, 0644);
 module_param(serial, uint, 0644);
-module_param(reboot_part, uint, 0644);
-- 
1.7.5.4

