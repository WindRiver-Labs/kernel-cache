From a4502c11b0adaf9c558d90cd080bd1cdfbb9f6c5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Noralf=20Tr=C3=B8nnes?= <noralf@tronnes.org>
Date: Wed, 19 Oct 2016 16:01:01 +0200
Subject: [PATCH 126/203] dwc_otg: Pass struct device to dma_alloc*()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This makes it possible to get the bus address from Device Tree.

Signed-off-by: Noralf Tr√∏nnes <noralf@tronnes.org>
[Xulin: Original patch taken from
https://github.com/raspberrypi/linux.git branch rpi-4.8.y]
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 .../usb/host/dwc_common_port/dwc_common_linux.c    |   19 +----
 drivers/usb/host/dwc_common_port/dwc_os.h          |   18 ++--
 drivers/usb/host/dwc_otg/dwc_otg_hcd.c             |   13 ++-
 drivers/usb/host/dwc_otg/dwc_otg_hcd.h             |    6 ++
 drivers/usb/host/dwc_otg/dwc_otg_hcd_ddma.c        |   23 ++++--
 drivers/usb/host/dwc_otg/dwc_otg_hcd_linux.c       |    2 +-
 drivers/usb/host/dwc_otg/dwc_otg_hcd_queue.c       |    3 +-
 drivers/usb/host/dwc_otg/dwc_otg_pcd.c             |   87 +++++++++++--------
 drivers/usb/host/dwc_otg/dwc_otg_pcd.h             |    7 ++
 drivers/usb/host/dwc_otg/dwc_otg_pcd_if.h          |    3 +-
 drivers/usb/host/dwc_otg/dwc_otg_pcd_intr.c        |    3 +-
 drivers/usb/host/dwc_otg/dwc_otg_pcd_linux.c       |    2 +-
 12 files changed, 105 insertions(+), 81 deletions(-)

diff --git a/drivers/usb/host/dwc_common_port/dwc_common_linux.c b/drivers/usb/host/dwc_common_port/dwc_common_linux.c
index 4664684..0d641e6 100644
--- a/drivers/usb/host/dwc_common_port/dwc_common_linux.c
+++ b/drivers/usb/host/dwc_common_port/dwc_common_linux.c
@@ -337,27 +337,12 @@ void DWC_DMA_POOL_FREE(dwc_pool_t *pool, void *vaddr, void *daddr)
 
 void *__DWC_DMA_ALLOC(void *dma_ctx, uint32_t size, dwc_dma_t *dma_addr)
 {
-#ifdef xxCOSIM /* Only works for 32-bit cosim */
-	void *buf = dma_alloc_coherent(dma_ctx, (size_t)size, dma_addr, GFP_KERNEL);
-#else
-	void *buf = dma_alloc_coherent(dma_ctx, (size_t)size, dma_addr, GFP_KERNEL | GFP_DMA32);
-#endif
-	if (!buf) {
-		return NULL;
-	}
-
-	memset(buf, 0, (size_t)size);
-	return buf;
+	return dma_zalloc_coherent(dma_ctx, size, dma_addr, GFP_KERNEL | GFP_DMA32);
 }
 
 void *__DWC_DMA_ALLOC_ATOMIC(void *dma_ctx, uint32_t size, dwc_dma_t *dma_addr)
 {
-	void *buf = dma_alloc_coherent(NULL, (size_t)size, dma_addr, GFP_ATOMIC);
-	if (!buf) {
-		return NULL;
-	}
-	memset(buf, 0, (size_t)size);
-	return buf;
+	return dma_zalloc_coherent(dma_ctx, size, dma_addr, GFP_ATOMIC);
 }
 
 void __DWC_DMA_FREE(void *dma_ctx, uint32_t size, void *virt_addr, dwc_dma_t dma_addr)
diff --git a/drivers/usb/host/dwc_common_port/dwc_os.h b/drivers/usb/host/dwc_common_port/dwc_os.h
index a2bbe23..9a86d29 100644
--- a/drivers/usb/host/dwc_common_port/dwc_os.h
+++ b/drivers/usb/host/dwc_common_port/dwc_os.h
@@ -675,9 +675,9 @@ extern void __DWC_FREE(void *mem_ctx, void *addr);
 #define DWC_FREE(_addr_) __DWC_FREE(NULL, _addr_)
 
 # ifdef DWC_LINUX
-#define DWC_DMA_ALLOC(_size_,_dma_) __DWC_DMA_ALLOC(NULL, _size_, _dma_)
-#define DWC_DMA_ALLOC_ATOMIC(_size_,_dma_) __DWC_DMA_ALLOC_ATOMIC(NULL, _size_,_dma_)
-#define DWC_DMA_FREE(_size_,_virt_,_dma_) __DWC_DMA_FREE(NULL, _size_, _virt_, _dma_)
+#define DWC_DMA_ALLOC(_dev, _size_, _dma_) __DWC_DMA_ALLOC(_dev, _size_, _dma_)
+#define DWC_DMA_ALLOC_ATOMIC(_dev, _size_, _dma_) __DWC_DMA_ALLOC_ATOMIC(_dev, _size_, _dma_)
+#define DWC_DMA_FREE(_dev, _size_,_virt_, _dma_) __DWC_DMA_FREE(_dev, _size_, _virt_, _dma_)
 # endif
 
 # if defined(DWC_FREEBSD) || defined(DWC_NETBSD)
@@ -708,12 +708,12 @@ extern void dwc_memory_debug_report(void);
 #define DWC_FREE(_addr_) dwc_free_debug(NULL, _addr_, __func__, __LINE__)
 
 # ifdef DWC_LINUX
-#define DWC_DMA_ALLOC(_size_,_dma_) dwc_dma_alloc_debug(NULL, _size_, \
-						_dma_, __func__, __LINE__)
-#define DWC_DMA_ALLOC_ATOMIC(_size_,_dma_) dwc_dma_alloc_atomic_debug(NULL, _size_, \
-						_dma_, __func__, __LINE__)
-#define DWC_DMA_FREE(_size_,_virt_,_dma_) dwc_dma_free_debug(NULL, _size_, \
-						_virt_, _dma_, __func__, __LINE__)
+#define DWC_DMA_ALLOC(_dev, _size_, _dma_) \
+	dwc_dma_alloc_debug(_dev, _size_, _dma_, __func__, __LINE__)
+#define DWC_DMA_ALLOC_ATOMIC(_dev, _size_, _dma_) \
+	dwc_dma_alloc_atomic_debug(_dev, _size_, _dma_, __func__, __LINE__)
+#define DWC_DMA_FREE(_dev, _size_, _virt_, _dma_) \
+	dwc_dma_free_debug(_dev, _size_, _virt_, _dma_, __func__, __LINE__)
 # endif
 
 # if defined(DWC_FREEBSD) || defined(DWC_NETBSD)
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd.c b/drivers/usb/host/dwc_otg/dwc_otg_hcd.c
index 135b611..027414b 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd.c
@@ -884,6 +884,7 @@ void dwc_otg_cleanup_fiq_channel(dwc_otg_hcd_t *hcd, uint32_t num)
  */
 static void dwc_otg_hcd_free(dwc_otg_hcd_t * dwc_otg_hcd)
 {
+	struct device *dev = dwc_otg_hcd_to_dev(dwc_otg_hcd);
 	int i;
 
 	DWC_DEBUGPL(DBG_HCD, "DWC OTG HCD FREE\n");
@@ -916,7 +917,7 @@ static void dwc_otg_hcd_free(dwc_otg_hcd_t * dwc_otg_hcd)
 
 	if (dwc_otg_hcd->core_if->dma_enable) {
 		if (dwc_otg_hcd->status_buf_dma) {
-			DWC_DMA_FREE(DWC_OTG_HCD_STATUS_BUF_SIZE,
+			DWC_DMA_FREE(dev, DWC_OTG_HCD_STATUS_BUF_SIZE,
 				     dwc_otg_hcd->status_buf,
 				     dwc_otg_hcd->status_buf_dma);
 		}
@@ -946,6 +947,7 @@ int init_hcd_usecs(dwc_otg_hcd_t *_hcd);
 
 int dwc_otg_hcd_init(dwc_otg_hcd_t * hcd, dwc_otg_core_if_t * core_if)
 {
+	struct device *dev = dwc_otg_hcd_to_dev(hcd);
 	int retval = 0;
 	int num_channels;
 	int i;
@@ -1041,7 +1043,7 @@ int dwc_otg_hcd_init(dwc_otg_hcd_t * hcd, dwc_otg_core_if_t * core_if)
 		 * for use as transaction bounce buffers in a 2-D array. Our access into this chunk is done by some
 		 * moderately readable array casts.
 		 */
-		hcd->fiq_dmab = DWC_DMA_ALLOC((sizeof(struct fiq_dma_channel) * num_channels), &hcd->fiq_state->dma_base);
+		hcd->fiq_dmab = DWC_DMA_ALLOC(dev, (sizeof(struct fiq_dma_channel) * num_channels), &hcd->fiq_state->dma_base);
 		DWC_WARN("FIQ DMA bounce buffers: virt = 0x%08x dma = 0x%08x len=%d",
 				(unsigned int)hcd->fiq_dmab, (unsigned int)hcd->fiq_state->dma_base,
 				sizeof(struct fiq_dma_channel) * num_channels);
@@ -1092,7 +1094,7 @@ int dwc_otg_hcd_init(dwc_otg_hcd_t * hcd, dwc_otg_core_if_t * core_if)
 	 */
 	if (hcd->core_if->dma_enable) {
 		hcd->status_buf =
-		    DWC_DMA_ALLOC(DWC_OTG_HCD_STATUS_BUF_SIZE,
+		    DWC_DMA_ALLOC(dev, DWC_OTG_HCD_STATUS_BUF_SIZE,
 				  &hcd->status_buf_dma);
 	} else {
 		hcd->status_buf = DWC_ALLOC(DWC_OTG_HCD_STATUS_BUF_SIZE);
@@ -1187,6 +1189,7 @@ static void assign_and_init_hc(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 	uint32_t intr_enable;
 	unsigned long flags;
 	gintmsk_data_t gintmsk = { .d32 = 0, };
+	struct device *dev = dwc_otg_hcd_to_dev(hcd);
 
 	qtd = DWC_CIRCLEQ_FIRST(&qh->qtd_list);
 
@@ -1381,7 +1384,7 @@ static void assign_and_init_hc(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 			buf_size = 4096;
 		}
 		if (!qh->dw_align_buf) {
-			qh->dw_align_buf = DWC_DMA_ALLOC_ATOMIC(buf_size,
+			qh->dw_align_buf = DWC_DMA_ALLOC_ATOMIC(dev, buf_size,
 							 &qh->dw_align_buf_dma);
 			if (!qh->dw_align_buf) {
 				DWC_ERROR
@@ -1432,7 +1435,7 @@ static void assign_and_init_hc(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 		fiq_fsm_spin_unlock(&hcd->fiq_state->lock);
 		local_fiq_enable();
 	}
-	
+
 	local_irq_restore(flags);
 	hc->qh = qh;
 }
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd.h b/drivers/usb/host/dwc_otg/dwc_otg_hcd.h
index 43dbed9..4539cd7 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd.h
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd.h
@@ -41,6 +41,7 @@
 #include "dwc_list.h"
 #include "dwc_otg_cil.h"
 #include "dwc_otg_fiq_fsm.h"
+#include "dwc_otg_driver.h"
 
 
 /**
@@ -613,6 +614,11 @@ struct dwc_otg_hcd {
 #endif
 };
 
+static inline struct device *dwc_otg_hcd_to_dev(struct dwc_otg_hcd *hcd)
+{
+	return &hcd->otg_dev->os_dep.platformdev->dev;
+}
+
 /** @name Transaction Execution Functions */
 /** @{ */
 extern dwc_otg_transaction_type_e dwc_otg_hcd_select_transactions(dwc_otg_hcd_t
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd_ddma.c b/drivers/usb/host/dwc_otg/dwc_otg_hcd_ddma.c
index ee920c4..126e99a 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd_ddma.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd_ddma.c
@@ -75,12 +75,12 @@ static inline uint16_t frame_incr_val(dwc_otg_qh_t * qh)
 		: qh->interval);
 }
 
-static int desc_list_alloc(dwc_otg_qh_t * qh)
+static int desc_list_alloc(struct device *dev, dwc_otg_qh_t * qh)
 {
 	int retval = 0;
 
 	qh->desc_list = (dwc_otg_host_dma_desc_t *)
-	    DWC_DMA_ALLOC(sizeof(dwc_otg_host_dma_desc_t) * max_desc_num(qh),
+	    DWC_DMA_ALLOC(dev, sizeof(dwc_otg_host_dma_desc_t) * max_desc_num(qh),
 			  &qh->desc_list_dma);
 
 	if (!qh->desc_list) {
@@ -106,10 +106,10 @@ static int desc_list_alloc(dwc_otg_qh_t * qh)
 
 }
 
-static void desc_list_free(dwc_otg_qh_t * qh)
+static void desc_list_free(struct device *dev, dwc_otg_qh_t * qh)
 {
 	if (qh->desc_list) {
-		DWC_DMA_FREE(max_desc_num(qh), qh->desc_list,
+		DWC_DMA_FREE(dev, max_desc_num(qh), qh->desc_list,
 			     qh->desc_list_dma);
 		qh->desc_list = NULL;
 	}
@@ -122,11 +122,13 @@ static void desc_list_free(dwc_otg_qh_t * qh)
 
 static int frame_list_alloc(dwc_otg_hcd_t * hcd)
 {
+	struct device *dev = dwc_otg_hcd_to_dev(hcd);
 	int retval = 0;
+
 	if (hcd->frame_list)
 		return 0;
 
-	hcd->frame_list = DWC_DMA_ALLOC(4 * MAX_FRLIST_EN_NUM,
+	hcd->frame_list = DWC_DMA_ALLOC(dev, 4 * MAX_FRLIST_EN_NUM,
 					&hcd->frame_list_dma);
 	if (!hcd->frame_list) {
 		retval = -DWC_E_NO_MEMORY;
@@ -140,10 +142,12 @@ static int frame_list_alloc(dwc_otg_hcd_t * hcd)
 
 static void frame_list_free(dwc_otg_hcd_t * hcd)
 {
+	struct device *dev = dwc_otg_hcd_to_dev(hcd);
+
 	if (!hcd->frame_list)
 		return;
 
-	DWC_DMA_FREE(4 * MAX_FRLIST_EN_NUM, hcd->frame_list, hcd->frame_list_dma);
+	DWC_DMA_FREE(dev, 4 * MAX_FRLIST_EN_NUM, hcd->frame_list, hcd->frame_list_dma);
 	hcd->frame_list = NULL;
 }
 
@@ -321,6 +325,7 @@ static void release_channel_ddma(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
  */
 int dwc_otg_hcd_qh_init_ddma(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 {
+	struct device *dev = dwc_otg_hcd_to_dev(hcd);
 	int retval = 0;
 
 	if (qh->do_split) {
@@ -328,7 +333,7 @@ int dwc_otg_hcd_qh_init_ddma(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 		return -1;
 	}
 
-	retval = desc_list_alloc(qh);
+	retval = desc_list_alloc(dev, qh);
 
 	if ((retval == 0)
 	    && (qh->ep_type == UE_ISOCHRONOUS || qh->ep_type == UE_INTERRUPT)) {
@@ -355,7 +360,9 @@ int dwc_otg_hcd_qh_init_ddma(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
  */
 void dwc_otg_hcd_qh_free_ddma(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 {
-	desc_list_free(qh);
+	struct device *dev = dwc_otg_hcd_to_dev(hcd);
+
+	desc_list_free(dev, qh);
 
 	/*
 	 * Channel still assigned due to some reasons.
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd_linux.c b/drivers/usb/host/dwc_otg/dwc_otg_hcd_linux.c
index 2ceed42..74cd5fa 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd_linux.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd_linux.c
@@ -517,6 +517,7 @@ int hcd_init(dwc_bus_dev_t *_dev)
 	((struct wrapper_priv_data *)(hcd->hcd_priv))->dwc_otg_hcd =
 	    dwc_otg_hcd;
 	otg_dev->hcd = dwc_otg_hcd;
+	otg_dev->hcd->otg_dev = otg_dev;
 
 	if (dwc_otg_hcd_init(dwc_otg_hcd, otg_dev->core_if)) {
 		goto error2;
@@ -531,7 +532,6 @@ int hcd_init(dwc_bus_dev_t *_dev)
 		}
 	}
 
-	otg_dev->hcd->otg_dev = otg_dev;
 	hcd->self.otg_port = dwc_otg_hcd_otg_port(dwc_otg_hcd);
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33) //don't support for LM(with 2.6.20.1 kernel)
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,35) //version field absent later
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_hcd_queue.c b/drivers/usb/host/dwc_otg/dwc_otg_hcd_queue.c
index 3b2a607..c2dff94 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_hcd_queue.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_hcd_queue.c
@@ -59,6 +59,7 @@ void dwc_otg_hcd_qh_free(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 	uint32_t buf_size = 0;
 	uint8_t *align_buf_virt = NULL;
 	dwc_dma_t align_buf_dma;
+	struct device *dev = dwc_otg_hcd_to_dev(hcd);
 
 	/* Free each QTD in the QTD list */
 	DWC_SPINLOCK_IRQSAVE(hcd->lock, &flags);
@@ -82,7 +83,7 @@ void dwc_otg_hcd_qh_free(dwc_otg_hcd_t * hcd, dwc_otg_qh_t * qh)
 	DWC_FREE(qh);
 	DWC_SPINUNLOCK_IRQRESTORE(hcd->lock, flags);
 	if (align_buf_virt)
-		DWC_DMA_FREE(buf_size, align_buf_virt, align_buf_dma);
+		DWC_DMA_FREE(dev, buf_size, align_buf_virt, align_buf_dma);
 	return;
 }
 
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_pcd.c b/drivers/usb/host/dwc_otg/dwc_otg_pcd.c
index ae0c72d..9dabbe5 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_pcd.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_pcd.c
@@ -237,20 +237,22 @@ static dwc_otg_cil_callbacks_t pcd_callbacks = {
  * This function allocates a DMA Descriptor chain for the Endpoint
  * buffer to be used for a transfer to/from the specified endpoint.
  */
-dwc_otg_dev_dma_desc_t *dwc_otg_ep_alloc_desc_chain(dwc_dma_t * dma_desc_addr,
+dwc_otg_dev_dma_desc_t *dwc_otg_ep_alloc_desc_chain(struct device *dev,
+						    dwc_dma_t * dma_desc_addr,
 						    uint32_t count)
 {
-	return DWC_DMA_ALLOC_ATOMIC(count * sizeof(dwc_otg_dev_dma_desc_t),
+	return DWC_DMA_ALLOC_ATOMIC(dev, count * sizeof(dwc_otg_dev_dma_desc_t),
 							dma_desc_addr);
 }
 
 /**
  * This function frees a DMA Descriptor chain that was allocated by ep_alloc_desc.
  */
-void dwc_otg_ep_free_desc_chain(dwc_otg_dev_dma_desc_t * desc_addr,
+void dwc_otg_ep_free_desc_chain(struct device *dev,
+				dwc_otg_dev_dma_desc_t * desc_addr,
 				uint32_t dma_desc_addr, uint32_t count)
 {
-	DWC_DMA_FREE(count * sizeof(dwc_otg_dev_dma_desc_t), desc_addr,
+	DWC_DMA_FREE(dev, count * sizeof(dwc_otg_dev_dma_desc_t), desc_addr,
 		     dma_desc_addr);
 }
 
@@ -1105,8 +1107,10 @@ static void start_xfer_tasklet_func(void *data)
  * This function initialized the PCD portion of the driver.
  *
  */
-dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_core_if_t * core_if)
+dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_device_t *otg_dev)
 {
+	struct device *dev = &otg_dev->os_dep.platformdev->dev;
+	dwc_otg_core_if_t *core_if = otg_dev->core_if;
 	dwc_otg_pcd_t *pcd = NULL;
 	dwc_otg_dev_if_t *dev_if;
 	int i;
@@ -1163,7 +1167,7 @@ dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_core_if_t * core_if)
 	 */
 	if (GET_CORE_IF(pcd)->dma_enable) {
 		pcd->setup_pkt =
-		    DWC_DMA_ALLOC(sizeof(*pcd->setup_pkt) * 5,
+		    DWC_DMA_ALLOC(dev, sizeof(*pcd->setup_pkt) * 5,
 				  &pcd->setup_pkt_dma_handle);
 		if (pcd->setup_pkt == NULL) {
 			DWC_FREE(pcd);
@@ -1171,10 +1175,10 @@ dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_core_if_t * core_if)
 		}
 
 		pcd->status_buf =
-		    DWC_DMA_ALLOC(sizeof(uint16_t),
+		    DWC_DMA_ALLOC(dev, sizeof(uint16_t),
 				  &pcd->status_buf_dma_handle);
 		if (pcd->status_buf == NULL) {
-			DWC_DMA_FREE(sizeof(*pcd->setup_pkt) * 5,
+			DWC_DMA_FREE(dev, sizeof(*pcd->setup_pkt) * 5,
 				     pcd->setup_pkt, pcd->setup_pkt_dma_handle);
 			DWC_FREE(pcd);
 			return NULL;
@@ -1182,17 +1186,17 @@ dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_core_if_t * core_if)
 
 		if (GET_CORE_IF(pcd)->dma_desc_enable) {
 			dev_if->setup_desc_addr[0] =
-			    dwc_otg_ep_alloc_desc_chain
-			    (&dev_if->dma_setup_desc_addr[0], 1);
+			    dwc_otg_ep_alloc_desc_chain(dev,
+				&dev_if->dma_setup_desc_addr[0], 1);
 			dev_if->setup_desc_addr[1] =
-			    dwc_otg_ep_alloc_desc_chain
-			    (&dev_if->dma_setup_desc_addr[1], 1);
+			    dwc_otg_ep_alloc_desc_chain(dev,
+				&dev_if->dma_setup_desc_addr[1], 1);
 			dev_if->in_desc_addr =
-			    dwc_otg_ep_alloc_desc_chain
-			    (&dev_if->dma_in_desc_addr, 1);
+			    dwc_otg_ep_alloc_desc_chain(dev,
+				&dev_if->dma_in_desc_addr, 1);
 			dev_if->out_desc_addr =
-			    dwc_otg_ep_alloc_desc_chain
-			    (&dev_if->dma_out_desc_addr, 1);
+			    dwc_otg_ep_alloc_desc_chain(dev,
+				&dev_if->dma_out_desc_addr, 1);
 			pcd->data_terminated = 0;
 
 			if (dev_if->setup_desc_addr[0] == 0
@@ -1201,26 +1205,26 @@ dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_core_if_t * core_if)
 			    || dev_if->out_desc_addr == 0) {
 
 				if (dev_if->out_desc_addr)
-					dwc_otg_ep_free_desc_chain
-					    (dev_if->out_desc_addr,
+					dwc_otg_ep_free_desc_chain(dev,
+					     dev_if->out_desc_addr,
 					     dev_if->dma_out_desc_addr, 1);
 				if (dev_if->in_desc_addr)
-					dwc_otg_ep_free_desc_chain
-					    (dev_if->in_desc_addr,
+					dwc_otg_ep_free_desc_chain(dev,
+					     dev_if->in_desc_addr,
 					     dev_if->dma_in_desc_addr, 1);
 				if (dev_if->setup_desc_addr[1])
-					dwc_otg_ep_free_desc_chain
-					    (dev_if->setup_desc_addr[1],
+					dwc_otg_ep_free_desc_chain(dev,
+					     dev_if->setup_desc_addr[1],
 					     dev_if->dma_setup_desc_addr[1], 1);
 				if (dev_if->setup_desc_addr[0])
-					dwc_otg_ep_free_desc_chain
-					    (dev_if->setup_desc_addr[0],
+					dwc_otg_ep_free_desc_chain(dev,
+					     dev_if->setup_desc_addr[0],
 					     dev_if->dma_setup_desc_addr[0], 1);
 
-				DWC_DMA_FREE(sizeof(*pcd->setup_pkt) * 5,
+				DWC_DMA_FREE(dev, sizeof(*pcd->setup_pkt) * 5,
 					     pcd->setup_pkt,
 					     pcd->setup_pkt_dma_handle);
-				DWC_DMA_FREE(sizeof(*pcd->status_buf),
+				DWC_DMA_FREE(dev, sizeof(*pcd->status_buf),
 					     pcd->status_buf,
 					     pcd->status_buf_dma_handle);
 
@@ -1302,7 +1306,9 @@ fail:
 void dwc_otg_pcd_remove(dwc_otg_pcd_t * pcd)
 {
 	dwc_otg_dev_if_t *dev_if = GET_CORE_IF(pcd)->dev_if;
+	struct device *dev = dwc_otg_pcd_to_dev(pcd);
 	int i;
+
 	if (pcd->core_if->core_params->dev_out_nak) {
 		for (i = 0; i < MAX_EPS_CHANNELS; i++) {
 			DWC_TIMER_CANCEL(pcd->core_if->ep_xfer_timer[i]);
@@ -1311,20 +1317,24 @@ void dwc_otg_pcd_remove(dwc_otg_pcd_t * pcd)
 	}
 
 	if (GET_CORE_IF(pcd)->dma_enable) {
-		DWC_DMA_FREE(sizeof(*pcd->setup_pkt) * 5, pcd->setup_pkt,
+		DWC_DMA_FREE(dev, sizeof(*pcd->setup_pkt) * 5, pcd->setup_pkt,
 			     pcd->setup_pkt_dma_handle);
-		DWC_DMA_FREE(sizeof(uint16_t), pcd->status_buf,
+		DWC_DMA_FREE(dev, sizeof(uint16_t), pcd->status_buf,
 			     pcd->status_buf_dma_handle);
 		if (GET_CORE_IF(pcd)->dma_desc_enable) {
-			dwc_otg_ep_free_desc_chain(dev_if->setup_desc_addr[0],
+			dwc_otg_ep_free_desc_chain(dev,
+						   dev_if->setup_desc_addr[0],
 						   dev_if->dma_setup_desc_addr
 						   [0], 1);
-			dwc_otg_ep_free_desc_chain(dev_if->setup_desc_addr[1],
+			dwc_otg_ep_free_desc_chain(dev,
+						   dev_if->setup_desc_addr[1],
 						   dev_if->dma_setup_desc_addr
 						   [1], 1);
-			dwc_otg_ep_free_desc_chain(dev_if->in_desc_addr,
+			dwc_otg_ep_free_desc_chain(dev,
+						   dev_if->in_desc_addr,
 						   dev_if->dma_in_desc_addr, 1);
-			dwc_otg_ep_free_desc_chain(dev_if->out_desc_addr,
+			dwc_otg_ep_free_desc_chain(dev,
+						   dev_if->out_desc_addr,
 						   dev_if->dma_out_desc_addr,
 						   1);
 		}
@@ -1463,6 +1473,7 @@ int dwc_otg_pcd_ep_enable(dwc_otg_pcd_t * pcd,
 	gdfifocfg_data_t gdfifocfgbase = {.d32 = 0 };
 	int retval = 0;
 	int i, epcount;
+	struct device *dev = dwc_otg_pcd_to_dev(pcd);
 
 	desc = (const usb_endpoint_descriptor_t *)ep_desc;
 
@@ -1571,9 +1582,9 @@ int dwc_otg_pcd_ep_enable(dwc_otg_pcd_t * pcd,
 		if (ep->dwc_ep.type != UE_ISOCHRONOUS) {
 #endif
 			ep->dwc_ep.desc_addr =
-			    dwc_otg_ep_alloc_desc_chain(&ep->
-							dwc_ep.dma_desc_addr,
-							MAX_DMA_DESC_CNT);
+			    dwc_otg_ep_alloc_desc_chain(dev,
+						&ep->dwc_ep.dma_desc_addr,
+						MAX_DMA_DESC_CNT);
 			if (!ep->dwc_ep.desc_addr) {
 				DWC_WARN("%s, can't allocate DMA descriptor\n",
 					 __func__);
@@ -1624,6 +1635,7 @@ int dwc_otg_pcd_ep_disable(dwc_otg_pcd_t * pcd, void *ep_handle)
 	gdfifocfg_data_t gdfifocfgbase = {.d32 = 0 };
 	gdfifocfg_data_t gdfifocfg = {.d32 = 0 };
 	fifosize_data_t dptxfsiz = {.d32 = 0 };
+	struct device *dev = dwc_otg_pcd_to_dev(pcd);
 
 	ep = get_ep_from_handle(pcd, ep_handle);
 
@@ -1678,7 +1690,7 @@ int dwc_otg_pcd_ep_disable(dwc_otg_pcd_t * pcd, void *ep_handle)
 
 			/* Cannot call dma_free_coherent() with IRQs disabled */
 			DWC_SPINUNLOCK_IRQRESTORE(pcd->lock, flags);
-			dwc_otg_ep_free_desc_chain(desc_addr, dma_desc_addr,
+			dwc_otg_ep_free_desc_chain(dev, desc_addr, dma_desc_addr,
 						   MAX_DMA_DESC_CNT);
 
 			goto out_unlocked;
@@ -2079,6 +2091,7 @@ int dwc_otg_pcd_ep_queue(dwc_otg_pcd_t * pcd, void *ep_handle,
 			 uint8_t * buf, dwc_dma_t dma_buf, uint32_t buflen,
 			 int zero, void *req_handle, int atomic_alloc)
 {
+	struct device *dev = dwc_otg_pcd_to_dev(pcd);
 	dwc_irqflags_t flags;
 	dwc_otg_pcd_request_t *req;
 	dwc_otg_pcd_ep_t *ep;
@@ -2115,7 +2128,7 @@ int dwc_otg_pcd_ep_queue(dwc_otg_pcd_t * pcd, void *ep_handle,
 	req->dw_align_buf = NULL;
 	if ((dma_buf & 0x3) && GET_CORE_IF(pcd)->dma_enable
 			&& !GET_CORE_IF(pcd)->dma_desc_enable)
-		req->dw_align_buf = DWC_DMA_ALLOC(buflen,
+		req->dw_align_buf = DWC_DMA_ALLOC(dev, buflen,
 				 &req->dw_align_buf_dma);
 	DWC_SPINLOCK_IRQSAVE(pcd->lock, &flags);
 
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_pcd.h b/drivers/usb/host/dwc_otg/dwc_otg_pcd.h
index 8ef7ba6..a70ebd04 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_pcd.h
+++ b/drivers/usb/host/dwc_otg/dwc_otg_pcd.h
@@ -38,6 +38,8 @@
 #include "usb.h"
 #include "dwc_otg_cil.h"
 #include "dwc_otg_pcd_if.h"
+#include "dwc_otg_driver.h"
+
 struct cfiobject;
 
 /**
@@ -253,6 +255,11 @@ struct dwc_otg_pcd {
 
 };
 
+static inline struct device *dwc_otg_pcd_to_dev(struct dwc_otg_pcd *pcd)
+{
+	return &pcd->otg_dev->os_dep.platformdev->dev;
+}
+
 //FIXME this functions should be static, and this prototypes should be removed
 extern void dwc_otg_request_nuke(dwc_otg_pcd_ep_t * ep);
 extern void dwc_otg_request_done(dwc_otg_pcd_ep_t * ep,
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_pcd_if.h b/drivers/usb/host/dwc_otg/dwc_otg_pcd_if.h
index c8d2e0e..4c1d591 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_pcd_if.h
+++ b/drivers/usb/host/dwc_otg/dwc_otg_pcd_if.h
@@ -37,6 +37,7 @@
 
 //#include "dwc_os.h"
 #include "dwc_otg_core_if.h"
+#include "dwc_otg_driver.h"
 
 /** @file
  * This file defines DWC_OTG PCD Core API.
@@ -139,7 +140,7 @@ struct dwc_otg_pcd_function_ops {
  *
  * @param core_if The DWC_OTG Core
  */
-extern dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_core_if_t * core_if);
+extern dwc_otg_pcd_t *dwc_otg_pcd_init(dwc_otg_device_t *otg_dev);
 
 /** Frees PCD allocated by dwc_otg_pcd_init
  *
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_pcd_intr.c b/drivers/usb/host/dwc_otg/dwc_otg_pcd_intr.c
index c8590b5..e55ea9c 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_pcd_intr.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_pcd_intr.c
@@ -2144,6 +2144,7 @@ static inline int cfi_calc_desc_residue(dwc_otg_pcd_ep_t * ep)
 static void complete_ep(dwc_otg_pcd_ep_t * ep)
 {
 	dwc_otg_core_if_t *core_if = GET_CORE_IF(ep->pcd);
+	struct device *dev = dwc_otg_pcd_to_dev(ep->pcd);
 	dwc_otg_dev_if_t *dev_if = core_if->dev_if;
 	dwc_otg_dev_in_ep_regs_t *in_ep_regs =
 	    dev_if->in_ep_regs[ep->dwc_ep.num];
@@ -2484,7 +2485,7 @@ static void complete_ep(dwc_otg_pcd_ep_t * ep)
 			if (!ep->dwc_ep.is_in) {
 				dwc_memcpy(req->buf, req->dw_align_buf, req->length);
 			}
-			DWC_DMA_FREE(req->length, req->dw_align_buf,
+			DWC_DMA_FREE(dev, req->length, req->dw_align_buf,
 				     req->dw_align_buf_dma);
 		}
 
diff --git a/drivers/usb/host/dwc_otg/dwc_otg_pcd_linux.c b/drivers/usb/host/dwc_otg/dwc_otg_pcd_linux.c
index 5624f32..50aaeac 100644
--- a/drivers/usb/host/dwc_otg/dwc_otg_pcd_linux.c
+++ b/drivers/usb/host/dwc_otg/dwc_otg_pcd_linux.c
@@ -1206,7 +1206,7 @@ int pcd_init(dwc_bus_dev_t *_dev)
 
 	DWC_DEBUGPL(DBG_PCDV, "%s(%p) otg_dev=%p\n", __func__, _dev, otg_dev);
 
-	otg_dev->pcd = dwc_otg_pcd_init(otg_dev->core_if);
+	otg_dev->pcd = dwc_otg_pcd_init(otg_dev);
 
 	if (!otg_dev->pcd) {
 		DWC_ERROR("dwc_otg_pcd_init failed\n");
-- 
1.7.5.4

