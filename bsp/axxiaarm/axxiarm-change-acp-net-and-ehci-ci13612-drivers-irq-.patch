From 458aaacf5c2fb6d75b57f9cf842a6815efcecebf Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Tue, 2 Feb 2016 10:43:56 +0800
Subject: [PATCH 4/4] axxiarm: change acp net and ehci-ci13612 drivers irq
 handler to oneshot

This is to fix the acp net and usb ehci alltraces:

BUG: scheduling while atomic: irq/36-acp-fema/135/0x00000201
Modules linked in: softdog
Preemption disabled at:[<  (null)>]   (null)
CPU: 14 PID: 135 Comm: irq/36-acp-fema Not tainted 4.1.15-WR8.0.0.0_cgl #1
Hardware name: LSI Axxia
[<c0417040>] (unwind_backtrace) from [<c0412574>](show_stack+0x10/0x14)
[<c0412574>] (show_stack) from [<c09997dc>](dump_stack+0x74/0xc0)
[<c09997dc>] (dump_stack) from [<c0441b6c>](__schedule_bug+0x90/0xb8)
[<c0441b6c>] (__schedule_bug) from [<c099acac>](__schedule+0x6c/0x508)
[<c099acac>] (__schedule) from [<c099b1e8>](schedule+0xa0/0xb0)
[<c099b1e8>] (schedule) from [<c099b4e4>](schedule_preempt_disabled+0x14/0x20)
[<c099b4e4>] (schedule_preempt_disabled) from [<c099c920>] (__mutex_lock_slowpath+0xec/0x16c)
[<c099c920>] (__mutex_lock_slowpath) from [<c099c9d4>](mutex_lock+0x34/0x4c)
[<c099c9d4>] (mutex_lock) from [<c045f6b4>](irq_finalize_oneshot+0x34/0xcc)
[<c045f6b4>] (irq_finalize_oneshot) from [<c045f7b4>](irq_forced_thread_fn+0x34/0x4c)
[<c045f7b4>] (irq_forced_thread_fn) from [<c045f9f0>] (irq_thread+0xe8/0x160)

BUG: scheduling while atomic: irq/87-ci13612_/46/0x00000201
Preemption disabled at:[<  (null)>]   (null)
CPU: 0 PID: 46 Comm: irq/87-ci13612_ Tainted: GW 4.1.15-WR8.0.0.0_cgl #4
Hardware name: LSI Axxia
[<c0416e00>] (unwind_backtrace) from [<c0412340>] (show_stack+0x10/0x14)
[<c0412340>] (show_stack) from [<c09502e4>] (dump_stack+0x74/0xc0)
[<c09502e4>] (dump_stack) from [<c04418a4>] (__schedule_bug+0x90/0xb8)
[<c04418a4>] (__schedule_bug) from [<c095135c>] (__schedule+0x6c/0x508)
[<c095135c>] (__schedule) from [<c0951898>] (schedule+0xa0/0xb0)
[<c0951898>] (schedule) from [<c0951b94>](schedule_preempt_disabled+0x14/0x20)
[<c0951b94>] (schedule_preempt_disabled) from [<c0952fd0>](__mutex_lock_slowpath+0xec/0x16)
[<c0952fd0>] (__mutex_lock_slowpath) from [<c0953084>](mutex_lock+0x34/0x4c)
[<c0953084>] (mutex_lock) from [<c045f3ec>](irq_finalize_oneshot+0x34/0xcc)
[<c045f3ec>] (irq_finalize_oneshot) from [<c045f4ec>](irq_forced_thread_fn+0x34/0x4c)
[<c045f4ec>] (irq_forced_thread_fn) from [<c045f728>](irq_thread+0xe8/0x160)
[<c045f728>] (irq_thread) from [<c043d828>] (kthread+0xd8/0xec)
[<c043d828>] (kthread) from [<c040ee28>] (ret_from_fork+0x14/0x2c)

For the interrupt controller driver axxia-gic.c, which uses the bus lock/unlock
mechanism to serializes all IRQ management interfaces and guarantees that
different callers cannot interfere for multiple clusters, the way works is
as follows:

  ==> Start IRQ management action
  chip->bus_lock()			<== Mutex is taken
  raw_spin_lock_irq(&irqdesc->lock)	<== Interrupts disabled on local core
  chip->(GIC IRQ management routine)	<== IRQ mgmt routine is executed. If
  					    the intended target core is on the
  					    the same core, then the work is
  					    done here. If the target core is on
  					    another cluster, then a global
  					    structure (gic_rpc_data) is filled
  					    in to pass along to a remote routine
  					    to execute, and no work is done yet.
  raw_spin_unlock_irq(&irqdesc->lock)	<== Interrupts are re-enabled
  chip->bus_unlock()			<== If the gic_rpc_data global was
  					    filled in, then the specified
  					    remote routine is executed via
  					    smp_call_function_single(). The
  					    mutex is then given. Note that
  					    here, IRQs are already re-enabled,
  					    so its safe to use the RPC here.
  <== End IRQ management action

  The gic_rpc_data global is filled in by the chip callback routines (e.g.,
  gic_mask_irq, gic_set_type, etc.). The bus lock/unlock routines are
  implemented as gic_irq_lock() and gic_irq_sync_unlock() respectively.

Based above mechanism with the IRQ forced threading, the interrupt thread calling
relationship is:
  irq_thread
	irq_forced_thread_fn
		local_bh_disable
		irq_finalize_oneshot
			chip_bus_lock  ==> mutex is taken
		local_bh_enable

In the preempt disable situation, the mutex is taken and would cause the BUG:
scheduling while atomic, and here workaround the irq handler to one shot to
avoid this call trace.

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/ethernet/lsi/lsi_acp_net.c |    2 +-
 drivers/usb/host/ehci-ci13612.c        |    2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/lsi/lsi_acp_net.c b/drivers/net/ethernet/lsi/lsi_acp_net.c
index 381b631..9f1181d 100644
--- a/drivers/net/ethernet/lsi/lsi_acp_net.c
+++ b/drivers/net/ethernet/lsi/lsi_acp_net.c
@@ -954,7 +954,7 @@ static int appnic_open(struct net_device *dev)
 	napi_enable(&pdata->napi);
 
 	/* Install the interrupt handlers. */
-	return_code = request_irq(dev->irq, appnic_isr, 0x00, LSI_DRV_NAME, dev);
+	return_code = request_irq(dev->irq, appnic_isr, IRQF_ONESHOT, LSI_DRV_NAME, dev);
 	if (0 != return_code) {
 		pr_err("%s: request_irq() failed, returned 0x%x/%d\n",
 		       LSI_DRV_NAME, return_code, return_code);
diff --git a/drivers/usb/host/ehci-ci13612.c b/drivers/usb/host/ehci-ci13612.c
index 81d954f..377eb2b 100644
--- a/drivers/usb/host/ehci-ci13612.c
+++ b/drivers/usb/host/ehci-ci13612.c
@@ -322,7 +322,7 @@ static int ci13612_ehci_probe(struct platform_device *pdev)
 		iounmap(gpreg_base);
 	}
 
-	retval = usb_add_hcd(hcd, irq, 0);
+	retval = usb_add_hcd(hcd, irq, IRQF_ONESHOT);
 	if (retval == 0) {
 		platform_set_drvdata(pdev, hcd);
 		return retval;
-- 
1.7.5.4

