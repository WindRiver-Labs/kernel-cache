From 6c766fe2d6ae095d377903c62e084eaef3d31e21 Mon Sep 17 00:00:00 2001
From: John Jacques <john.jacques@intel.com>
Date: Thu, 5 Nov 2015 16:34:53 -0600
Subject: [PATCH 66/86] drivers/misc: Clean Up and Improve the Axxia NCR
 Driver

Remove unused versions, and only lock when necessary.

Signed-off-by: John Jacques <john.jacques@intel.com>
[Original patch is from linux-yocto-4.1 axxia/base branch.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/arm/include/asm/lsi/acp_ncr.h     |   45 ----
 arch/arm/mach-axxia/axxia.c            |    2 +-
 arch/arm/mach-axxia/ddr_retention.c    |    2 +-
 arch/arm/mach-axxia/include/mach/ncr.h |   44 ----
 arch/arm/mach-axxia/rapidio.c          |    2 +-
 drivers/edac/axxia_edac-l2_cpu.c       |    2 +-
 drivers/edac/axxia_edac-l3.c           |    2 +-
 drivers/edac/axxia_edac-mc.c           |    2 +-
 drivers/misc/lsi-ncr.c                 |  415 +++++++++++++++++++++-----------
 drivers/misc/lsi-ncr.h                 |    4 +-
 10 files changed, 278 insertions(+), 242 deletions(-)
 delete mode 100644 arch/arm/include/asm/lsi/acp_ncr.h
 delete mode 100644 arch/arm/mach-axxia/include/mach/ncr.h

diff --git a/arch/arm/include/asm/lsi/acp_ncr.h b/arch/arm/include/asm/lsi/acp_ncr.h
deleted file mode 100644
index 114a36b..0000000
--- a/arch/arm/include/asm/lsi/acp_ncr.h
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * asm/lsi/acp_ncr.h
- *
- * Copyright (C) 2010 LSI
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307	 USA
- */
-
-#ifndef __DRIVERS_LSI_ACP_NCR_H
-#define __DRIVERS_LSI_ACP_NCR_H
-
-#ifndef NCP_REGION_ID
-#define NCP_REGION_ID(node, target) \
-(unsigned long)((((node) & 0xffff) << 16) | ((target) & 0xffff))
-#endif
-
-#ifndef NCP_NODE_ID
-#define NCP_NODE_ID(region) (((region) >> 16) & 0xffff)
-#endif
-
-#ifndef NCP_TARGET_ID
-#define NCP_TARGET_ID(region) ((region) & 0xffff)
-#endif
-
-int ncr_read(unsigned long, unsigned long, int, void *);
-int ncr_write(unsigned long, unsigned long, int, void *);
-
-int is_asic(void);
-
-extern int acp_mdio_read(unsigned long, unsigned long, unsigned short *, int);
-extern int acp_mdio_write(unsigned long, unsigned long, unsigned short, int);
-
-#endif /*  __DRIVERS_LSI_ACP_NCR_H */
diff --git a/arch/arm/mach-axxia/axxia.c b/arch/arm/mach-axxia/axxia.c
index 025eef1..3bae37b 100644
--- a/arch/arm/mach-axxia/axxia.c
+++ b/arch/arm/mach-axxia/axxia.c
@@ -50,7 +50,7 @@
 #include <mach/timers.h>
 #include <mach/axxia-gic.h>
 #include <linux/irqchip/arm-gic.h>
-#include <mach/ncr.h>
+#include "../../drivers/misc/lsi-ncr.h"
 #include "axxia.h"
 #include "pci.h"
 #ifdef CONFIG_AXXIA_RIO
diff --git a/arch/arm/mach-axxia/ddr_retention.c b/arch/arm/mach-axxia/ddr_retention.c
index 83c88d9..b131557 100644
--- a/arch/arm/mach-axxia/ddr_retention.c
+++ b/arch/arm/mach-axxia/ddr_retention.c
@@ -31,8 +31,8 @@
 #include <linux/of.h>
 #include <asm/io.h>
 #include <asm/cacheflush.h>
-#include <mach/ncr.h>
 #include "axxia.h"
+#include "../../drivers/misc/lsi-ncr.h"
 
 static void __iomem *nca;
 static void __iomem *apb;
diff --git a/arch/arm/mach-axxia/include/mach/ncr.h b/arch/arm/mach-axxia/include/mach/ncr.h
deleted file mode 100644
index 926d366..0000000
--- a/arch/arm/mach-axxia/include/mach/ncr.h
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * arch/arm/mach-axxia/include/mach/ncr.h
- *
- * Copyright (C) 2010 LSI
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307	 USA
- */
-
-#ifndef __ARCH_ARM_MACH_AXXIA_NCR_H
-#define __ARCH_ARM_MACH_AXXIA_NCR_H
-
-#ifndef NCP_REGION_ID
-#define NCP_REGION_ID(node, target) \
-((unsigned long) ((((node) & 0xffff) << 16) | ((target) & 0xffff)))
-#endif
-
-#ifndef NCP_NODE_ID
-#define NCP_NODE_ID(region) (((region) >> 16) & 0xffff)
-#endif
-
-#ifndef NCP_TARGET_ID
-#define NCP_TARGET_ID(region) ((region) & 0xffff)
-#endif
-
-unsigned long ncr_register_read(unsigned *);
-void ncr_register_write(const unsigned, unsigned *);
-int ncr_read(unsigned long, unsigned long, int, void *);
-int ncr_write(unsigned long, unsigned long, int, void *);
-int ncr_init(void);
-void ncr_exit(void);
-
-#endif /* __ARCH_ARM_MACH_AXXIA_NCR_H */
diff --git a/arch/arm/mach-axxia/rapidio.c b/arch/arm/mach-axxia/rapidio.c
index 3562375..d7be9d0 100644
--- a/arch/arm/mach-axxia/rapidio.c
+++ b/arch/arm/mach-axxia/rapidio.c
@@ -32,7 +32,7 @@
 #include <linux/io.h>
 #include <linux/signal.h>
 
-#include <mach/ncr.h>
+#include "../../drivers/misc/lsi-ncr.h"
 #include <mach/rio.h>
 
 /**
diff --git a/drivers/edac/axxia_edac-l2_cpu.c b/drivers/edac/axxia_edac-l2_cpu.c
index 534562d..9cc1cce 100644
--- a/drivers/edac/axxia_edac-l2_cpu.c
+++ b/drivers/edac/axxia_edac-l2_cpu.c
@@ -26,7 +26,7 @@
 #include <linux/slab.h>
 #include <linux/io.h>
 #include <linux/edac.h>
-#include <mach/ncr.h>
+#include "../misc/lsi-ncr.h"
 #include <linux/of_platform.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
diff --git a/drivers/edac/axxia_edac-l3.c b/drivers/edac/axxia_edac-l3.c
index 2732490..73674cf 100644
--- a/drivers/edac/axxia_edac-l3.c
+++ b/drivers/edac/axxia_edac-l3.c
@@ -26,7 +26,7 @@
 #include <linux/slab.h>
 #include <linux/io.h>
 #include <linux/edac.h>
-#include <mach/ncr.h>
+#include "../misc/lsi-ncr.h"
 #include <linux/of_platform.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
diff --git a/drivers/edac/axxia_edac-mc.c b/drivers/edac/axxia_edac-mc.c
index 643ed38..bc3b004 100644
--- a/drivers/edac/axxia_edac-mc.c
+++ b/drivers/edac/axxia_edac-mc.c
@@ -26,7 +26,7 @@
 #include <linux/slab.h>
 #include <linux/io.h>
 #include <linux/edac.h>
-#include <mach/ncr.h>
+#include "../misc/lsi-ncr.h"
 #include <linux/of_platform.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
diff --git a/drivers/misc/lsi-ncr.c b/drivers/misc/lsi-ncr.c
index b4af125..6a4a208 100644
--- a/drivers/misc/lsi-ncr.c
+++ b/drivers/misc/lsi-ncr.c
@@ -21,10 +21,11 @@
  */
 
 #include <linux/module.h>
-
 #include <linux/io.h>
-
 #include "lsi-ncr.h"
+#ifdef CONFIG_ARM
+#include <../../arch/arm/mach-axxia/axxia.h>
+#endif
 
 #ifdef CONFIG_ARCH_AXXIA
 #define NCA_PHYS_ADDRESS 0x002020100000ULL
@@ -40,21 +41,59 @@ static void __iomem *apb2ser0_address;
 
 #define WFC_TIMEOUT (400000)
 
-/* Protect NCA PIO registers from concurrent use. */
+/*
+ * We provide both 'normal' and 'nolock' versions of the
+ * ncr_read/write functions. For normal operation we use
+ * locking to provide thread-safe operation.
+ * There are two levels of locking.
+ *
+ * 1. ncr_spin_lock -
+ *      This is a high-level lock that protects the NCA PIO
+ *      registers from concurrent use. The NCA PIO mechanism
+ *      only supports a single thread of execution.
+ *
+ * 2. nca_access_lock -
+ *       This is a low-level lock that protects each individual
+ *       register read/write to the NCA registers. This is a
+ *       workaround for a bug in rev 1.0 silicon where the bus
+ *       interface may hang if the NCA is subjected to simultaneous
+ *       requests from multiple masters.
+ *
+ * The 'nolock' versions of ncr_read/write should only be used in
+ * special cases where the caller can guarantee there will be no
+ * other threads of execution.
+ */
+
+/* Lock #1 : Protect NCA PIO registers from concurrent use. */
 static DEFINE_RAW_SPINLOCK(ncr_spin_lock);
 
-/* This lock protect each individual register read/write to the NCA registers
- * due to a bug in rev 1.0 silicon where the bus interface may hang if the NCA
- * is subjected to simultaneous requests from multiple masters
- */
+/* Lock #2 : Protect each individual NCA register access. */
 DEFINE_RAW_SPINLOCK(nca_access_lock);
 EXPORT_SYMBOL(nca_access_lock);
 
 static unsigned long ncr_spin_flags;
 
+#ifdef AXXIA_NCR_RESET_CHECK
+/*
+ * define behavior if NCA register read/write is called while
+ * the axxia device is being reset. Any attempt to access NCA
+ * AXI registers while the NCA is in reset will hang the system.
+ *
+ * Due to higher level locking (ncr_spin_lock) this should not
+ * occur as part of normal config ring access (ncr_read/write),
+ * so we handle this condition as a BUG(). If it turns out there
+ * is some valid case where this may occur we can re-implement
+ * this as a wait loop.
+ */
+#define AXXIA_NCR_RESET_ACTIVE_CHECK()				\
+	do { if (ncr_reset_active) BUG(); } while (0)
+#else
+#define AXXIA_NCR_RESET_ACTIVE_CHECK()
+#endif
+
 #define LOCK_DOMAIN 0
 
-typedef union {
+union command_data_register_0 {
 	unsigned long raw;
 	struct {
 #ifdef __BIG_ENDIAN
@@ -77,16 +116,16 @@ typedef union {
 		unsigned long start_done:1;
 #endif
 	} __packed bits;
-} __packed command_data_register_0_t;
+} __packed;
 
-typedef union {
+union command_data_register_1 {
 	unsigned long raw;
 	struct {
 		unsigned long target_address:32;
 	} __packed bits;
-} __packed command_data_register_1_t;
+} __packed;
 
-typedef union {
+union command_data_register_2 {
 	unsigned long raw;
 	struct {
 #ifdef __BIG_ENDIAN
@@ -99,12 +138,22 @@ typedef union {
 		unsigned long unused:16;
 #endif
 	} __packed bits;
-} __packed command_data_register_2_t;
+} __packed;
+
 
+/*
+ * ncr_register_read/write
+ *   low-level access functions to Axxia registers,
+ *   with checking to ensure device is not currently
+ *   held in reset.
+ */
 unsigned long
 ncr_register_read(unsigned *address)
 {
-	unsigned long value = __raw_readl(address);
+	unsigned long value;
+
+	AXXIA_NCR_RESET_ACTIVE_CHECK();
+	value = __raw_readl(address);
 
 	return be32_to_cpu(value);
 }
@@ -112,16 +161,19 @@ ncr_register_read(unsigned *address)
 void
 ncr_register_write(const unsigned value, unsigned *address)
 {
+	AXXIA_NCR_RESET_ACTIVE_CHECK();
 	__raw_writel(cpu_to_be32(value), address);
 }
 
 /*
-  ----------------------------------------------------------------------
-  nca_register_read
-*/
-
+ * ncr_register_read/write_lock
+ *   access functions for Axxia NCA block.
+ *   These functions protect the register access with a spinlock.
+ *   This is needed to workaround an AXM55xx v1.0 h/w bug.
+ *
+ */
 static unsigned long
-nca_register_read(unsigned *address)
+ncr_register_read_lock(unsigned *address)
 {
 	unsigned long value, flags;
 
@@ -132,13 +184,8 @@ nca_register_read(unsigned *address)
 	return value;
 }
 
-/*
-  ----------------------------------------------------------------------
-  nca_register_write
-*/
-
 static void
-nca_register_write(const unsigned value, unsigned *address)
+ncr_register_write_lock(const unsigned value, unsigned *address)
 {
 	unsigned long flags;
 
@@ -147,6 +194,28 @@ nca_register_write(const unsigned value, unsigned *address)
 	raw_spin_unlock_irqrestore(&nca_access_lock, flags);
 }
 
+/*
+ * define two sets of function pointers for low-level register
+ * access - one with locking and one without.
+ */
+struct ncr_io_fns {
+	unsigned long (*rd) (unsigned *address);
+	void (*wr) (const unsigned value, unsigned *address);
+};
+
+struct ncr_io_fns ncr_io_fn_lock = {
+	ncr_register_read_lock,
+	ncr_register_write_lock
+};
+
+struct ncr_io_fns ncr_io_fn_nolock = {
+	ncr_register_read,
+	ncr_register_write
+};
+
+struct ncr_io_fns *default_io_fn;
+
+
 /* These are only needed on platforms there AMP mode of operation is supported
  * (currently only on PowerPC based Axxia platforms). In AMP mode, multiple OS
  * instances may be accessing the NCA registers, thus requiring a hardware
@@ -158,7 +227,7 @@ ncr_amp_lock(int domain)
 {
 	unsigned long offset = (0xff80 + (domain * 4));
 
-	while (nca_register_read((unsigned *)(nca_address + offset)) != 0)
+	while (ncr_register_read_lock((unsigned *)(nca_address + offset)) != 0)
 		cpu_relax();
 }
 
@@ -167,17 +236,18 @@ ncr_amp_unlock(int domain)
 {
 	unsigned long offset = (0xff80 + (domain * 4));
 
-	nca_register_write(0, (unsigned *)(nca_address + offset));
+	ncr_register_write_lock(0, (unsigned *)(nca_address + offset));
 }
 #else
-	static void ncr_amp_lock(int domain) {}
-	static void ncr_amp_unlock(int domain) {}
+static void ncr_amp_lock(int domain) {}
+static void ncr_amp_unlock(int domain) {}
 #endif
 
 /**
-* Used to serialize all access to NCA PIO interface.
-*/
-int ncr_lock(int domain)
+ * Used to serialize all access to NCA PIO interface.
+ */
+int
+ncr_lock(int domain)
 {
 	raw_spin_lock_irqsave(&ncr_spin_lock, ncr_spin_flags);
 	ncr_amp_lock(domain);
@@ -188,46 +258,49 @@ EXPORT_SYMBOL(ncr_lock);
 /**
  * Used to serialize all access to NCA PIO interface.
  */
-void ncr_unlock(int domain)
+void
+ncr_unlock(int domain)
 {
 	ncr_amp_unlock(domain);
 	raw_spin_unlock_irqrestore(&ncr_spin_lock, ncr_spin_flags);
 }
 EXPORT_SYMBOL(ncr_unlock);
 
+
 /*
   ------------------------------------------------------------------------------
   ncr_pio_error_dump
 */
 
-static void ncr_pio_error_dump(char *str)
+static void
+ncr_pio_error_dump(struct ncr_io_fns *io_fn, char *str)
 {
 	unsigned long cdr0, cdr1, cdr2;
 	unsigned long stat0, stat1;
 
-	cdr0 = nca_register_read((unsigned *)(nca_address + 0xf0));
-	cdr1 = nca_register_read((unsigned *)(nca_address + 0xf4));
-	cdr2 = nca_register_read((unsigned *)(nca_address + 0xf8));
+	cdr0 = io_fn->rd((unsigned *)(nca_address + 0xf0));
+	cdr1 = io_fn->rd((unsigned *)(nca_address + 0xf4));
+	cdr2 = io_fn->rd((unsigned *)(nca_address + 0xf8));
 
-	stat0 = nca_register_read((unsigned *)(nca_address + 0xe4));
-	stat1 = nca_register_read((unsigned *)(nca_address + 0xe8));
+	stat0 = io_fn->rd((unsigned *)(nca_address + 0xe4));
+	stat1 = io_fn->rd((unsigned *)(nca_address + 0xe8));
 
 	pr_err("lsi-ncr: %8s failed, error status : 0x%08lx 0x%08lx\n",
-			str, stat0, stat1);
+	       str, stat0, stat1);
 	pr_err("lsi-ncr:  CDR0-2: 0x%08lx 0x%08lx 0x%08lx\n",
-			cdr0, cdr1, cdr2);
+	       cdr0, cdr1, cdr2);
 
 }
-
 /*
   ------------------------------------------------------------------------------
   ncr_check_pio_status
 */
 
-static int ncr_check_pio_status(char *str)
+static int
+ncr_check_pio_status(struct ncr_io_fns *io_fn, char *str)
 {
 	unsigned long timeout = jiffies + msecs_to_jiffies(1000);
-	command_data_register_0_t cdr0;
+	union command_data_register_0 cdr0;
 
 	/*
 	  Make sure any previous commands completed, and check for errors.
@@ -235,26 +308,38 @@ static int ncr_check_pio_status(char *str)
 
 	do {
 		cdr0.raw =
-				nca_register_read((unsigned *)(nca_address + 0xf0));
-		} while ((0x1 == cdr0.bits.start_done) &&
-				(time_before(jiffies, timeout)));
-
-		if (0x1 == cdr0.bits.start_done) {
-			/* timed out without completing */
-			pr_err("lsi-ncr: PIO operation timeout cdr0=0x%08lx!\n",
-					cdr0.raw);
-			ncr_pio_error_dump(str);
+			io_fn->rd((unsigned *)(nca_address + 0xf0));
+	} while ((0x1 == cdr0.bits.start_done) &&
+		 (time_before(jiffies, timeout)));
+
+	if (0x1 == cdr0.bits.start_done) {
+		/* timed out without completing */
+		pr_err("lsi-ncr: PIO operation timeout cdr0=0x%08lx!\n",
+		       cdr0.raw);
+		ncr_pio_error_dump(io_fn, str);
 		BUG();
-
 		return -1;
 	}
 
-	if (0x3 != cdr0.bits.status) {
+	if (cdr0.raw && (0x3 != cdr0.bits.status)) {
 		/* completed with non-success status */
-		ncr_pio_error_dump(str);
+		ncr_pio_error_dump(io_fn, str);
 		/* clear CDR0 to allow subsequent commands to complete */
-		nca_register_write(0, (unsigned *) (nca_address + 0xf0));
+		io_fn->wr(0, (unsigned *) (nca_address + 0xf0));
+
+		/*
+		 * we now treat any config ring error as a BUG().
+		 * this should never occur during normal operation with
+		 * 'good' system software.
+		 *
+		 * In the debug/lab environment the config ring errors
+		 * can occur more often. If this BUG() becomes too onerous
+		 * we may provide a way for the RTE to suppress this BUG()
+		 */
+		BUG();
+		return -1;
 	}
+
 	return 0;
 }
 
@@ -271,31 +356,32 @@ static int ncr_check_pio_status(char *str)
   ncr_read
 */
 
-int
-ncr_read_nolock(unsigned long region, unsigned long address, int number,
+static int
+__ncr_read(struct ncr_io_fns *io_fn,
+	unsigned long region, unsigned long address, int number,
 	void *buffer)
 {
-	command_data_register_0_t cdr0;
-	command_data_register_1_t cdr1;
-	command_data_register_2_t cdr2;
+	union command_data_register_0 cdr0;
+	union command_data_register_1 cdr1;
+	union command_data_register_2 cdr2;
 
 	if ((NCP_NODE_ID(region) != 0x0153) && (NCP_NODE_ID(region) != 0x115)) {
 		/* make sure any previous command has completed */
-		if (0 != ncr_check_pio_status("previous"))
+		if (0 != ncr_check_pio_status(io_fn, "previous"))
 			return -1;
 
 		/*
-		Set up the read command.
+		  Set up the read command.
 		*/
 
 		cdr2.raw = 0;
 		cdr2.bits.target_node_id = NCP_NODE_ID(region);
 		cdr2.bits.target_id_address_upper = NCP_TARGET_ID(region);
-		nca_register_write(cdr2.raw, (unsigned *) (nca_address + 0xf8));
+		io_fn->wr(cdr2.raw, (unsigned *) (nca_address + 0xf8));
 
 		cdr1.raw = 0;
 		cdr1.bits.target_address = (address >> 2);
-		nca_register_write(cdr1.raw, (unsigned *) (nca_address + 0xf4));
+		io_fn->wr(cdr1.raw, (unsigned *) (nca_address + 0xf4));
 
 		cdr0.raw = 0;
 		cdr0.bits.start_done = 1;
@@ -306,24 +392,23 @@ ncr_read_nolock(unsigned long region, unsigned long address, int number,
 		cdr0.bits.cmd_type = 4;
 		/* TODO: Verify number... */
 		cdr0.bits.dbs = (number - 1);
-		nca_register_write(cdr0.raw, (unsigned *) (nca_address + 0xf0));
-		/* Memory barrier */
+		io_fn->wr(cdr0.raw, (unsigned *) (nca_address + 0xf0));
 		mb();
 
 		/*
-		Wait for completion.
+		  Wait for completion.
 		*/
-		if (0 != ncr_check_pio_status("read"))
+		if (0 != ncr_check_pio_status(io_fn, "read"))
 			return -1;
 
 		/*
-		Copy data words to the buffer.
+		  Copy data words to the buffer.
 		*/
 
 		address = (unsigned long)(nca_address + 0x1000);
 		while (4 <= number) {
 			*((unsigned long *) buffer) =
-				nca_register_read((unsigned *) address);
+				io_fn->rd((unsigned *) address);
 			address += 4;
 			buffer += 4;
 			number -= 4;
@@ -331,7 +416,7 @@ ncr_read_nolock(unsigned long region, unsigned long address, int number,
 
 		if (0 < number) {
 			unsigned long temp =
-				nca_register_read((unsigned *) address);
+				io_fn->rd((unsigned *) address);
 			memcpy((void *) buffer, &temp, number);
 		}
 	} else {
@@ -342,8 +427,8 @@ ncr_read_nolock(unsigned long region, unsigned long address, int number,
 			void __iomem *targ_address = apb2ser0_address +
 				(address & (~0x3));
 			/*
-			* Copy data words to the buffer.
-			*/
+			 * Copy data words to the buffer.
+			 */
 
 			while (4 <= number) {
 				*((unsigned long *) buffer) =
@@ -353,11 +438,9 @@ ncr_read_nolock(unsigned long region, unsigned long address, int number,
 			}
 		} else {
 			void __iomem *base;
-
 			if (0xffff < address)
 				return -1;
 
-
 			switch (NCP_TARGET_ID(region)) {
 			case 0:
 				base = (apb2ser0_address + 0x1e0);
@@ -381,7 +464,7 @@ ncr_read_nolock(unsigned long region, unsigned long address, int number,
 				return -1;
 			}
 			if ((NCP_TARGET_ID(region) == 0x1) ||
-				(NCP_TARGET_ID(region) == 0x4)) {
+			    (NCP_TARGET_ID(region) == 0x4)) {
 				writel((0x84c00000 + address), (base + 4));
 			} else {
 				writel((0x85400000 + address), (base + 4));
@@ -391,13 +474,13 @@ ncr_read_nolock(unsigned long region, unsigned long address, int number,
 				*((unsigned long *) buffer) =
 					readl(base + 4);
 			} while (0 != (*((unsigned long *) buffer) & 0x80000000)
-					&& 0 < wfc_timeout);
+				 && 0 < wfc_timeout);
 
 			if (0 == wfc_timeout)
 				return -1;
 
 			if ((NCP_TARGET_ID(region) == 0x1) ||
-				(NCP_TARGET_ID(region) == 0x4)) {
+			    (NCP_TARGET_ID(region) == 0x4)) {
 				*((unsigned short *) buffer) =
 					readl(base + 8);
 			} else {
@@ -414,6 +497,15 @@ ncr_read_nolock(unsigned long region, unsigned long address, int number,
 
 	return 0;
 }
+
+
+int
+ncr_read_nolock(unsigned long region, unsigned long address,
+		 int number, void *buffer)
+{
+	return __ncr_read(&ncr_io_fn_nolock,
+		region, address, number, buffer);
+}
 EXPORT_SYMBOL(ncr_read_nolock);
 
 
@@ -433,7 +525,8 @@ ncr_read(unsigned long region, unsigned long address, int number,
 
 	ncr_lock(LOCK_DOMAIN);
 
-	rc = ncr_read_nolock(region, address, number, buffer);
+	/* call __ncr_read with chip version dependent io_fn */
+	rc = __ncr_read(default_io_fn, region, address, number, buffer);
 
 	ncr_unlock(LOCK_DOMAIN);
 
@@ -446,19 +539,20 @@ EXPORT_SYMBOL(ncr_read);
   ncr_write
 */
 
-int
-ncr_write_nolock(unsigned long region, unsigned long address, int number,
-		 void *buffer)
+static int
+__ncr_write(struct ncr_io_fns *io_fn,
+	unsigned long region, unsigned long address, int number,
+	void *buffer)
 {
-	command_data_register_0_t cdr0;
-	command_data_register_1_t cdr1;
-	command_data_register_2_t cdr2;
+	union command_data_register_0 cdr0;
+	union command_data_register_1 cdr1;
+	union command_data_register_2 cdr2;
 	unsigned long data_word_base;
 	int dbs = (number - 1);
 
 	if ((NCP_NODE_ID(region) != 0x0153) && (NCP_NODE_ID(region) != 0x115)) {
 		/* make sure any previous command has completed */
-		if (0 != ncr_check_pio_status("previous"))
+		if (0 != ncr_check_pio_status(io_fn, "previous"))
 			return -1;
 
 		/*
@@ -468,11 +562,11 @@ ncr_write_nolock(unsigned long region, unsigned long address, int number,
 		cdr2.raw = 0;
 		cdr2.bits.target_node_id = NCP_NODE_ID(region);
 		cdr2.bits.target_id_address_upper = NCP_TARGET_ID(region);
-		nca_register_write(cdr2.raw, (unsigned *) (nca_address + 0xf8));
+		io_fn->wr(cdr2.raw, (unsigned *) (nca_address + 0xf8));
 
 		cdr1.raw = 0;
 		cdr1.bits.target_address = (address >> 2);
-		nca_register_write(cdr1.raw, (unsigned *) (nca_address + 0xf4));
+		io_fn->wr(cdr1.raw, (unsigned *) (nca_address + 0xf4));
 
 		/*
 		  Copy from buffer to the data words.
@@ -481,8 +575,8 @@ ncr_write_nolock(unsigned long region, unsigned long address, int number,
 		data_word_base = (unsigned long)(nca_address + 0x1000);
 
 		while (4 <= number) {
-			nca_register_write(*((unsigned long *) buffer),
-					(unsigned *) data_word_base);
+			io_fn->wr(*((unsigned long *) buffer),
+					   (unsigned *) data_word_base);
 			data_word_base += 4;
 			buffer += 4;
 			number -= 4;
@@ -492,7 +586,7 @@ ncr_write_nolock(unsigned long region, unsigned long address, int number,
 			unsigned long temp = 0;
 
 			memcpy((void *) &temp, (void *) buffer, number);
-			nca_register_write(temp, (unsigned *) data_word_base);
+			io_fn->wr(temp, (unsigned *) data_word_base);
 			data_word_base += number;
 			buffer += number;
 			number = 0;
@@ -507,75 +601,74 @@ ncr_write_nolock(unsigned long region, unsigned long address, int number,
 		cdr0.bits.cmd_type = 5;
 		/* TODO: Verify number... */
 		cdr0.bits.dbs = dbs;
-		nca_register_write(cdr0.raw, (unsigned *) (nca_address + 0xf0));
-		/* Memory barrier */
+		io_fn->wr(cdr0.raw, (unsigned *) (nca_address + 0xf0));
 		mb();
 
 		/*
-		Wait for completion.
+		  Wait for completion.
 		*/
 
-		if (0 != ncr_check_pio_status("write"))
+		if (0 != ncr_check_pio_status(io_fn, "write"))
 			return -1;
+
 	} else {
 #ifdef APB2SER_PHY_PHYS_ADDRESS
 		int wfc_timeout = WFC_TIMEOUT;
 
-	if (NCP_NODE_ID(region) != 0x115) {
-		void __iomem *targ_address = apb2ser0_address +
-					     (address & (~0x3));
-		/*
-		  Copy from buffer to the data words.
-		*/
-
-		while (4 <= number) {
-			*((unsigned long *) targ_address) =
-				*((unsigned long *) buffer);
-			targ_address += 4;
-			number -= 4;
-		}
-	} else {
-		void __iomem *base;
-
-		if (0xffff < address)
-			return -1;
+		if (NCP_NODE_ID(region) != 0x115) {
+			void __iomem *targ_address = apb2ser0_address +
+				(address & (~0x3));
+			/*
+			  Copy from buffer to the data words.
+			*/
 
-		switch (NCP_TARGET_ID(region)) {
-		case 0:
-			base = (apb2ser0_address + 0x1e0);
-			break;
-		case 1:
-			base = (apb2ser0_address + 0x1f0);
-			break;
-		case 2:
-			base = (apb2ser0_address + 0x200);
-			break;
-		case 3:
-			base = (apb2ser0_address + 0x210);
-			break;
-		case 4:
-			base = (apb2ser0_address + 0x220);
-			break;
-		case 5:
-			base = (apb2ser0_address + 0x230);
-			break;
-		default:
-			return -1;
-		}
-		if ((NCP_TARGET_ID(region) == 0x1) ||
-				(NCP_TARGET_ID(region) == 0x4)) {
-			writel(*((unsigned short *) buffer), base);
-			writel((0xc4c00000 + address), (base + 4));
+			while (4 <= number) {
+				*((unsigned long *) targ_address) =
+					*((unsigned long *) buffer);
+				targ_address += 4;
+				number -= 4;
+			}
 		} else {
-			writel(*((unsigned long *) buffer), base);
-			writel((0xc5400000 + address), (base + 4));
-		}
+			void __iomem *base;
+			if (0xffff < address)
+				return -1;
+
+			switch (NCP_TARGET_ID(region)) {
+			case 0:
+				base = (apb2ser0_address + 0x1e0);
+				break;
+			case 1:
+				base = (apb2ser0_address + 0x1f0);
+				break;
+			case 2:
+				base = (apb2ser0_address + 0x200);
+				break;
+			case 3:
+				base = (apb2ser0_address + 0x210);
+				break;
+			case 4:
+				base = (apb2ser0_address + 0x220);
+				break;
+			case 5:
+				base = (apb2ser0_address + 0x230);
+				break;
+			default:
+				return -1;
+			}
+			if ((NCP_TARGET_ID(region) == 0x1) ||
+			    (NCP_TARGET_ID(region) == 0x4)) {
+				writel(*((unsigned short *) buffer), base);
+				writel((0xc4c00000 + address), (base + 4));
+			} else {
+				writel(*((unsigned long *) buffer), base);
+				writel((0xc5400000 + address), (base + 4));
+			}
 			do {
 				--wfc_timeout;
 				*((unsigned long *) buffer) =
 					readl(base + 4);
 			} while (0 != (*((unsigned long *) buffer) & 0x80000000)
-				&& 0 < wfc_timeout);
+				 && 0 < wfc_timeout);
 
 			if (0 == wfc_timeout)
 				return -1;
@@ -587,6 +680,16 @@ ncr_write_nolock(unsigned long region, unsigned long address, int number,
 
 	return 0;
 }
+
+
+int
+ncr_write_nolock(unsigned long region, unsigned long address, int number,
+	  void *buffer)
+{
+	/* call the __ncr_write function with nolock io_fn */
+	return __ncr_write(&ncr_io_fn_nolock,
+			region, address, number, buffer);
+}
 EXPORT_SYMBOL(ncr_write_nolock);
 
 
@@ -604,10 +707,13 @@ ncr_write(unsigned long region, unsigned long address, int number,
 		return -1;
 #endif /* APB2SER_PHY_PHYS_ADDRESS */
 
+	/* grab the ncr_lock */
 	ncr_lock(LOCK_DOMAIN);
 
-	rc = ncr_write_nolock(region, address, number, buffer);
+	/* call the __ncr_write function with chip-version dependent io_fn */
+	rc = __ncr_write(default_io_fn, region, address, number, buffer);
 
+	/* free the ncr_lock */
 	ncr_unlock(LOCK_DOMAIN);
 
 	return rc;
@@ -622,6 +728,23 @@ EXPORT_SYMBOL(ncr_write);
 static int
 ncr_init(void)
 {
+
+	/*
+	 * read chip type/revision to determine if low-level locking
+	 * is required and select the appropriate io_fns.
+	 */
+	u32 pfuse = readl(syscon + 0x34);
+	u32 chip_type = pfuse & 0x1f;
+	u32 chip_ver  = (pfuse >> 8) & 0x7;
+
+	if ((chip_type == 0 || chip_type == 9) && (chip_ver == 0)) {
+		/* AXM5516v1.0 needs low-level locking */
+		default_io_fn = &ncr_io_fn_lock;
+	} else {
+		/* no low-level locking needed */
+		default_io_fn = &ncr_io_fn_nolock;
+	}
+
 	nca_address = ioremap(NCA_PHYS_ADDRESS, 0x20000);
 
 #ifdef APB2SER_PHY_PHYS_ADDRESS
diff --git a/drivers/misc/lsi-ncr.h b/drivers/misc/lsi-ncr.h
index e466caa..db54f6b 100644
--- a/drivers/misc/lsi-ncr.h
+++ b/drivers/misc/lsi-ncr.h
@@ -23,7 +23,7 @@
 
 #ifndef NCP_REGION_ID
 #define NCP_REGION_ID(node, target) \
-((unsigned long) ((((node) & 0xffff) << 16) | ((target) & 0xffff)))
+(unsigned long) ((((node) & 0xffff) << 16) | ((target) & 0xffff))
 #endif
 
 #ifndef NCP_NODE_ID
@@ -38,5 +38,7 @@ unsigned long ncr_register_read(unsigned *);
 void ncr_register_write(const unsigned, unsigned *);
 int ncr_read(unsigned long, unsigned long, int, void *);
 int ncr_write(unsigned long, unsigned long, int, void *);
+int ncr_read_nolock(unsigned long, unsigned long, int, void *);
+int ncr_write_nolock(unsigned long, unsigned long, int, void *);
 
 #endif /*  __DRIVERS_LSI_ACP_NCR_H */
-- 
1.7.5.4

