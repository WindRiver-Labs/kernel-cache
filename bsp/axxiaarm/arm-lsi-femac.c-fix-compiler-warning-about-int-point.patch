From d9315a3516d62fc3402f8d557edd23af4af0635a Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Tue, 29 Dec 2015 03:16:34 -0500
Subject: [PATCH 2/4] arm:lsi-femac.c: fix compiler warning about int/pointer
 size mismatch

lsi/lsi-femac.c:342:2:warning: format '%lu' expects argument of type 'long
unsigned int', but argument 6 has type 'unsigned int' [-Wformat=]
   pr_debug("%s tail=%d.%lu hw_tail=%d.%lu head=%d.%lu\n",
   ^
lsi/lsi-femac.c:463:9: warning: format '%lu' expects argument of type 'long
unsigned int', but argument 5 has type 'u32 {aka unsigned int}' [-Wformat=]
   "rx_queue: %u.%lu / %u.%lu / %u.%lu\n",
   ^

lsi/lsi-femac.c:472:9: warning: format '%lu' expects argument of type 'long
unsigned int', but argument 5 has type 'u32 {aka unsigned int}' [-Wformat=]
   "tx_queue: %u.%lu / %u.%lu / %u.%lu\n",
   ^

lsi/lsi-femac.c:553:32: warning: cast from pointer to integer of different size
[-Wpointer-to-int-cast]
   BUG_ON(0xffffffc000000000 != ((u64)skb & 0xffffffff00000000));
                                    ^

lsi/lsi-femac.c:568:15: warning: cast to pointer from integer of different size
[-Wint-to-pointer-cast]
   void *buf = (void *)(desc->cookie | 0xffffffc000000000);
               ^

lsi/lsi-femac.c:614:9: warning: cast to pointer from integer of different size
[-Wint-to-pointer-cast]
   skb = (struct sk_buff *)(desc->cookie | 0xffffffc000000000);
         ^

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 drivers/net/ethernet/lsi/lsi-femac.c |   12 ++++++------
 1 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/lsi/lsi-femac.c b/drivers/net/ethernet/lsi/lsi-femac.c
index 2b73e09..693f2e3 100644
--- a/drivers/net/ethernet/lsi/lsi-femac.c
+++ b/drivers/net/ethernet/lsi/lsi-femac.c
@@ -339,7 +339,7 @@ queue_inc_tail(struct queue_ptr *q)
 static inline void
 pr_queue(const char *tag, const struct queue_ptr *q)
 {
-	pr_debug("%s tail=%d.%lu hw_tail=%d.%lu head=%d.%lu\n",
+	pr_debug("%s tail=%d.%u hw_tail=%d.%u head=%d.%u\n",
 		 tag,
 		 dmaptr_gen(q->tail), dmaptr_idx(q->tail),
 		 dmaptr_gen(q->hw_tail), dmaptr_idx(q->hw_tail),
@@ -460,7 +460,7 @@ femac_show_counters(struct device *dev,
 			priv->counters.tx_nobuf);
 
 	n += snprintf(&buf[n], PAGE_SIZE,
-		      "rx_queue: %u.%lu / %u.%lu / %u.%lu\n",
+		      "rx_queue: %u.%u / %u.%u / %u.%u\n",
 		      dmaptr_gen(priv->rxq->tail),
 		      dmaptr_idx(priv->rxq->tail),
 		      dmaptr_gen(le32_to_cpu(priv->rxq->hw_tail)),
@@ -469,7 +469,7 @@ femac_show_counters(struct device *dev,
 		      dmaptr_idx(priv->rxq->head));
 
 	n += snprintf(&buf[n], PAGE_SIZE,
-		      "tx_queue: %u.%lu / %u.%lu / %u.%lu\n",
+		      "tx_queue: %u.%u / %u.%u / %u.%u\n",
 		      dmaptr_gen(priv->txq->tail),
 		      dmaptr_idx(priv->txq->tail),
 		      dmaptr_gen(le32_to_cpu(priv->txq->hw_tail)),
@@ -550,7 +550,7 @@ alloc_rx_buf(struct femac_dev *priv, struct dma_desc *d)
 	  0xffffffc0.  Verify that here.
 	*/
 
-	BUG_ON(0xffffffc000000000 != ((u64)skb & 0xffffffff00000000));
+	BUG_ON(0xffffffc000000000 != ((u64)(unsigned long)skb & 0xffffffff00000000));
 	d->cookie  = (u32)skb;
 
 	return 0;
@@ -565,7 +565,7 @@ femac_tx_complete(struct femac_dev *priv)
 
 	spin_lock_irqsave(&priv->lock, flags);
 	while ((desc = queue_get_tail(priv->tx_ring, priv->txq)) != NULL) {
-		void *buf = (void *)(desc->cookie | 0xffffffc000000000);
+		void *buf = (void *)(unsigned long)(desc->cookie | 0xffffffc000000000);
 
 		dma_pool_free(priv->tx_pool, buf, le32_to_cpu(desc->buf_ptr));
 		queue_inc_tail(priv->txq);
@@ -611,7 +611,7 @@ femac_rx_packets(struct femac_dev *priv, int max)
 
 		dma_unmap_single(priv->dev, le32_to_cpu(desc->buf_ptr),
 				 MAX_FRAME_SIZE, DMA_FROM_DEVICE);
-		skb = (struct sk_buff *)(desc->cookie | 0xffffffc000000000);
+		skb = (struct sk_buff *)(unsigned long)(desc->cookie | 0xffffffc000000000);
 
 		if (!(le32_to_cpu(desc->flags) & DMADESC_ERROR)) {
 			struct ethhdr *ethhdr = (struct ethhdr *)skb->data;
-- 
1.7.5.4

