From 1b49cca8d5f601b79d9215d27f947f7ff6b2cfd1 Mon Sep 17 00:00:00 2001
From: Charlie Paul <cpaul.windriver@gmail.com>
Date: Wed, 29 Apr 2015 00:32:47 -0700
Subject: [PATCH 40/59] arch/arm/mach-axxia: Fixed L2 power up failure

git://git.yoctoproject.org/linux-yocto-4.1 standard/axxia/base
	commit 1ba270c66ba6a93e73d8df4cc2498f1f596c0eb2

This patch fixes the L2 power up failure. It insures
that there is only one allocation of the dickens
variable.

Signed-off-by: Charlie Paul <cpaul.windriver@gmail.com>
Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 arch/arm/mach-axxia/axxia.c                |    2 +-
 arch/arm/mach-axxia/ddr_retention.c        |    6 +++++-
 arch/arm/mach-axxia/lsi_power_management.c |    8 ++++----
 3 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-axxia/axxia.c b/arch/arm/mach-axxia/axxia.c
index 0ba07a3..a54eecd 100644
--- a/arch/arm/mach-axxia/axxia.c
+++ b/arch/arm/mach-axxia/axxia.c
@@ -66,7 +66,7 @@ static void __iomem *base;
 
 #ifdef CONFIG_KEXEC
 
-static void __iomem *dickens;
+//static void __iomem *dickens;
 
 static void set_l3_pstate(u32 newstate)
 {
diff --git a/arch/arm/mach-axxia/ddr_retention.c b/arch/arm/mach-axxia/ddr_retention.c
index bc3f79a..83c88d9 100644
--- a/arch/arm/mach-axxia/ddr_retention.c
+++ b/arch/arm/mach-axxia/ddr_retention.c
@@ -32,10 +32,14 @@
 #include <asm/io.h>
 #include <asm/cacheflush.h>
 #include <mach/ncr.h>
+#include "axxia.h"
 
 static void __iomem *nca;
 static void __iomem *apb;
-static void __iomem *dickens;
+#ifndef CONFIG_SMP
+void __iomem *dickens;
+#endif
+
 static int ddr_retention_enabled;
 
 enum {
diff --git a/arch/arm/mach-axxia/lsi_power_management.c b/arch/arm/mach-axxia/lsi_power_management.c
index 41e7159..ab4bed5 100644
--- a/arch/arm/mach-axxia/lsi_power_management.c
+++ b/arch/arm/mach-axxia/lsi_power_management.c
@@ -547,12 +547,12 @@ int pm_cpu_powerup(u32 cpu)
 	if (first_cpu) {
 
 		rval = pm_L2_logical_powerup(cluster, cpu);
-		if (rval)
-			pr_info("CPU %d is powered up with cluster: %d\n", reqcpu, cluster);
-		else {
+		if (rval) {
 			pr_err("CPU: Failed the logical L2 power up\n");
 			goto pm_power_up;
-		}
+		} else
+			pr_info("CPU %d is powered up with cluster: %d\n", reqcpu, cluster);
+
 		cluster_power_up[cluster] = true;
 		pm_clear_bits_syscon_register(NCP_SYSCON_GIC_DISABLE, cluster_mask);
 
-- 
1.7.5.4

