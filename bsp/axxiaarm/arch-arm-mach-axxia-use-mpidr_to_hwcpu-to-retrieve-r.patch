From 93cff94b40c2f13430b52b43f29367cc7bae7e88 Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Thu, 15 Jun 2017 13:59:00 +0800
Subject: [PATCH] arch/arm/mach-axxia: use mpidr_to_hwcpu to retrieve real
 hardware cpuid

In function arm_dt_init_cpu_maps, it will use hwid whose value is "reg" property
in cpu node to compare with mpidr whose value read from MPIDR register. When boot
in normal condition, hwid is equal to MPIDR value which is "0" by chance. But in
kdump, the boot cpu will be any of 16 cpus and arm_dt_init_cpu_maps will not be able
to get correct hardware cpuid and this will result deviant irq affinity setting.

So at first, change "reg" property to mpidr value, and then use mpidr_to_hwcpu to transit
it to get real cpuid. Or else, in kdump, most irq will not be triggered.

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 arch/arm/boot/dts/axm5516-cpus.dtsi        |   24 ++++++++++----------
 arch/arm/mach-axxia/axxia-gic.c            |   34 ++++++++++++++--------------
 arch/arm/mach-axxia/hotplug.c              |    2 +-
 arch/arm/mach-axxia/lsi_power_management.c |    4 +-
 arch/arm/mach-axxia/lsi_power_management.h |    2 +-
 arch/arm/mach-axxia/platsmp.c              |   13 ++++++++--
 6 files changed, 43 insertions(+), 36 deletions(-)

diff --git a/arch/arm/boot/dts/axm5516-cpus.dtsi b/arch/arm/boot/dts/axm5516-cpus.dtsi
index 923f92ea..989bd1a 100644
--- a/arch/arm/boot/dts/axm5516-cpus.dtsi
+++ b/arch/arm/boot/dts/axm5516-cpus.dtsi
@@ -49,7 +49,7 @@
 		cpu@4 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x04>;
+			reg = <0x100>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -57,7 +57,7 @@
 		cpu@5 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x05>;
+			reg = <0x101>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -65,7 +65,7 @@
 		cpu@6 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x06>;
+			reg = <0x102>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -73,7 +73,7 @@
 		cpu@7 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x07>;
+			reg = <0x103>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -81,7 +81,7 @@
 		cpu@8 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x08>;
+			reg = <0x200>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -89,7 +89,7 @@
 		cpu@9 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x09>;
+			reg = <0x201>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -97,7 +97,7 @@
 		cpu@10 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x0a>;
+			reg = <0x202>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -105,7 +105,7 @@
 		cpu@11 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x0b>;
+			reg = <0x203>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -113,7 +113,7 @@
 		cpu@12 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x0c>;
+			reg = <0x300>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -121,7 +121,7 @@
 		cpu@13 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x0d>;
+			reg = <0x301>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -129,7 +129,7 @@
 		cpu@14 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x0e>;
+			reg = <0x302>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
@@ -137,7 +137,7 @@
 		cpu@15 {
 			device_type = "cpu";
 			compatible = "arm,cortex-a15";
-			reg = <0x0f>;
+			reg = <0x303>;
 			cpu-release-addr = <0>; // Fixed by the boot loader
 			clock-frequency = <0>;  // Placeholder
 		};
diff --git a/arch/arm/mach-axxia/axxia-gic.c b/arch/arm/mach-axxia/axxia-gic.c
index 696be45..530d8c1 100644
--- a/arch/arm/mach-axxia/axxia-gic.c
+++ b/arch/arm/mach-axxia/axxia-gic.c
@@ -97,7 +97,7 @@ static void muxed_ipi_message_pass(const struct cpumask *mask,
 	int cpu;
 
 	for_each_cpu(cpu, mask) {
-		info = &per_cpu(ipi_mux_msg, cpu_logical_map(cpu));
+		info = &per_cpu(ipi_mux_msg, mpidr_to_hwcpu(cpu_logical_map(cpu)));
 		set_bit(ipi_num, &info->msg);
 	}
 }
@@ -291,7 +291,7 @@ static void gic_unmask_remote(void *info)
 
 static void gic_mask_unmask(struct irq_data *d, bool do_mask)
 {
-	u32 pcpu = cpu_logical_map(smp_processor_id());
+	u32 pcpu = mpidr_to_hwcpu(cpu_logical_map(smp_processor_id()));
 	u32 irqid = gic_irq(d);
 
 	BUG_ON(!irqs_disabled());
@@ -439,7 +439,7 @@ static int gic_set_type(struct irq_data *d, unsigned int type)
 
 	gic_rpc_data.d = d;
 	gic_rpc_data.func_mask |= SET_TYPE;
-	gic_rpc_data.cpu = cpu_logical_map(smp_processor_id());
+	gic_rpc_data.cpu = mpidr_to_hwcpu(cpu_logical_map(smp_processor_id()));
 	gic_rpc_data.type = type;
 
 	return IRQ_SET_MASK_OK;
@@ -464,7 +464,7 @@ static int _gic_set_affinity(struct irq_data *d,
 	 * Normalize the cpu number as seen by Linux (0-15) to a
 	 * number as seen by a cluster (0-3).
 	 */
-	bit = 1 << ((cpu_logical_map(cpu) % CORES_PER_CLUSTER) + shift);
+	bit = 1 << ((cpu % CORES_PER_CLUSTER) + shift);
 	mask = 0xff << shift;
 
 	enable_mask = 1 << (gic_irq(d) % 32);
@@ -545,7 +545,7 @@ static int gic_set_affinity(struct irq_data *d,
 			    bool force)
 {
 	unsigned int cpu = cpumask_any_and(mask_val, cpu_online_mask);
-	u32 pcpu = cpu_logical_map(smp_processor_id());
+	u32 pcpu = mpidr_to_hwcpu(cpu_logical_map(smp_processor_id()));
 	unsigned int irqid = gic_irq(d);
 	int ret = IRQ_SET_MASK_OK;
 
@@ -565,7 +565,7 @@ static int gic_set_affinity(struct irq_data *d,
 	* If the new IRQ affinity is the same as current, then
 	* there's no need to update anything.
 	*/
-	if (cpu_logical_map(cpu) == irq_cpuid[irqid])
+	if (mpidr_to_hwcpu(cpu_logical_map(cpu)) == irq_cpuid[irqid])
 		return IRQ_SET_MASK_OK;
 
 	/*
@@ -573,12 +573,12 @@ static int gic_set_affinity(struct irq_data *d,
 	 * cluster as the cpu we're currently running on, set the IRQ
 	 * affinity directly. Otherwise, use the RPC mechanism.
 	 */
-	if (on_same_cluster(cpu_logical_map(cpu), pcpu)) {
-		_gic_set_affinity(d, cpu_logical_map(cpu), false);
+	if (on_same_cluster(mpidr_to_hwcpu(cpu_logical_map(cpu)), pcpu)) {
+		_gic_set_affinity(d, mpidr_to_hwcpu(cpu_logical_map(cpu)), false);
 	}
 
 	else{
-		ret = exec_remote_set_affinity(false, cpu_logical_map(cpu), d, mask_val, force);
+		ret = exec_remote_set_affinity(false, mpidr_to_hwcpu(cpu_logical_map(cpu)), d, mask_val, force);
 
 		if (ret != IRQ_SET_MASK_OK)
 			return ret;
@@ -589,7 +589,7 @@ static int gic_set_affinity(struct irq_data *d,
 	 * different than the prior cluster, clear the IRQ affinity
 	 * on the old cluster.
 	 */
-	if (!on_same_cluster(cpu_logical_map(cpu), irq_cpuid[irqid]) && (irqid != IRQ_PMU)) {
+	if (!on_same_cluster(mpidr_to_hwcpu(cpu_logical_map(cpu)), irq_cpuid[irqid]) && (irqid != IRQ_PMU)) {
 		/*
 		 * If old cpu assignment falls within the same cluster as
 		 * the cpu we're currently running on, clear the IRQ affinity
@@ -603,7 +603,7 @@ static int gic_set_affinity(struct irq_data *d,
 		}
 		if (ret != IRQ_SET_MASK_OK) {
 			/* Need to back out the set operation */
-			if (on_same_cluster(cpu_logical_map(cpu), pcpu))
+			if (on_same_cluster(mpidr_to_hwcpu(cpu_logical_map(cpu)), pcpu))
 				_gic_set_affinity(d, irq_cpuid[irqid], true);
 			else
 				exec_remote_set_affinity(true, cpu, d, mask_val, force);
@@ -613,7 +613,7 @@ static int gic_set_affinity(struct irq_data *d,
 	}
 
 	/* Update Axxia IRQ affinity table with the new physical CPU number. */
-	irq_cpuid[irqid] = cpu_logical_map(cpu);
+	irq_cpuid[irqid] = mpidr_to_hwcpu(cpu_logical_map(cpu));
 
 	return IRQ_SET_MASK_OK;
 }
@@ -835,7 +835,7 @@ static int gic_notifier(struct notifier_block *self, unsigned long cmd,	void *v)
 
 	/* Use RPC mechanism to execute this at other clusters. */
 	gic_rpc_data.func_mask |= GIC_NOTIFIER;
-	gic_rpc_data.cpu = cpu_logical_map(smp_processor_id());
+	gic_rpc_data.cpu = mpidr_to_hwcpu(cpu_logical_map(smp_processor_id()));
 	gic_rpc_data.gn_data.self = self;
 	gic_rpc_data.gn_data.cmd = cmd;
 	gic_rpc_data.gn_data.v = v;
@@ -970,7 +970,7 @@ asmlinkage void __exception_irq_entry axxia_gic_handle_irq(struct pt_regs *regs)
 	struct gic_chip_data *gic = &gic_data;
 	void __iomem *cpu_base = gic_data_cpu_base(gic);
 	void __iomem *dist_base = gic_data_dist_base(gic);
-	u32 pcpu = cpu_logical_map(smp_processor_id());
+	u32 pcpu = mpidr_to_hwcpu(cpu_logical_map(smp_processor_id()));
 	u32 cluster = pcpu / CORES_PER_CLUSTER;
 	u32 next, mask;
 
@@ -1113,7 +1113,7 @@ static void  gic_dist_init(struct gic_chip_data *gic)
 	u32 cpumask;
 	unsigned int gic_irqs = gic->gic_irqs;
 	void __iomem *base = gic_data_dist_base(gic);
-	u32 cpu = cpu_logical_map(smp_processor_id());
+	u32 cpu = mpidr_to_hwcpu(cpu_logical_map(smp_processor_id()));
 	u8 cpumask_8;
 	u32 confmask;
 	u32 confoff;
@@ -1244,7 +1244,7 @@ void axxia_gic_raise_softirq(const struct cpumask *mask, unsigned int irq)
 	int cpu;
 	unsigned long map = 0;
 	unsigned int regoffset;
-	u32 phys_cpu = cpu_logical_map(smp_processor_id());
+	u32 phys_cpu = mpidr_to_hwcpu(cpu_logical_map(smp_processor_id()));
 
 	/* Sanity check the physical cpu number */
 	if (phys_cpu >= nr_cpu_ids) {
@@ -1255,7 +1255,7 @@ void axxia_gic_raise_softirq(const struct cpumask *mask, unsigned int irq)
 
 	/* Convert our logical CPU mask into a physical one. */
 	for_each_cpu(cpu, mask)
-		map |= 1 << cpu_logical_map(cpu);
+		map |= 1 << mpidr_to_hwcpu(cpu_logical_map(cpu));
 
 	/*
 	 * Convert the standard ARM IPI number (as defined in
diff --git a/arch/arm/mach-axxia/hotplug.c b/arch/arm/mach-axxia/hotplug.c
index 61235fb..3a66ba2 100644
--- a/arch/arm/mach-axxia/hotplug.c
+++ b/arch/arm/mach-axxia/hotplug.c
@@ -190,7 +190,7 @@ static void __ref platform_do_lowpower(unsigned int cpu, int *spurious)
 	* Bits:   |11 10 9 8|7 6 5 4 3 2|1 0
 	*         | CLUSTER | Reserved  |CPU
 	*/
-	phys_cpu = cpu_logical_map(cpu);
+	phys_cpu = mpidr_to_hwcpu(cpu_logical_map(cpu));
 	cluster = (phys_cpu / 4) << 8;
 	phys_cpu = cluster + (phys_cpu % 4);
 
diff --git a/arch/arm/mach-axxia/lsi_power_management.c b/arch/arm/mach-axxia/lsi_power_management.c
index ab4bed5..ab046c0 100644
--- a/arch/arm/mach-axxia/lsi_power_management.c
+++ b/arch/arm/mach-axxia/lsi_power_management.c
@@ -445,7 +445,7 @@ void pm_cpu_shutdown(u32 cpu)
 {
 
 	bool success;
-	u32 reqcpu = cpu_logical_map(cpu);
+	u32 reqcpu = mpidr_to_hwcpu(cpu_logical_map(cpu));
 	u32 cluster = reqcpu / CORES_PER_CLUSTER;
 	u32 cluster_mask = (0x01 << cluster);
 	bool last_cpu;
@@ -534,7 +534,7 @@ int pm_cpu_powerup(u32 cpu)
 	int rval = 0;
 	u32 cpu_mask = (0x01 << cpu);
 
-	u32 reqcpu = cpu_logical_map(cpu);
+	u32 reqcpu = mpidr_to_hwcpu(cpu_logical_map(cpu));
 	u32 cluster = reqcpu / CORES_PER_CLUSTER;
 
 	u32 cluster_mask = (0x01 << cluster);
diff --git a/arch/arm/mach-axxia/lsi_power_management.h b/arch/arm/mach-axxia/lsi_power_management.h
index ef70af3..664b8ea 100644
--- a/arch/arm/mach-axxia/lsi_power_management.h
+++ b/arch/arm/mach-axxia/lsi_power_management.h
@@ -187,6 +187,6 @@ void pm_init_syscon(void);
 extern bool pm_in_progress[];
 extern bool cluster_power_up[];
 extern u32 pm_cpu_powered_down;
-
+extern unsigned int mpidr_to_hwcpu(int mpidr);
 
 #endif /* LSI_POWER_MANAGEMENT_H_ */
diff --git a/arch/arm/mach-axxia/platsmp.c b/arch/arm/mach-axxia/platsmp.c
index 3166760..530543a 100644
--- a/arch/arm/mach-axxia/platsmp.c
+++ b/arch/arm/mach-axxia/platsmp.c
@@ -43,6 +43,13 @@ __axxia_arch_wfe(void)
 }
 EXPORT_SYMBOL(__axxia_arch_wfe);
 
+unsigned int mpidr_to_hwcpu(int mpidr)
+{
+	/* hwcpu = cluster * CORES_PER_CLUSTER + cpu */
+		return MPIDR_AFFINITY_LEVEL(mpidr, 1) * CORES_PER_CLUSTER +
+			MPIDR_AFFINITY_LEVEL(mpidr, 0);
+}
+
 /*
  * Check if we need to enable cross-cluster SEV workaround for a bug in
  * revision 1.0 silicon (which could cause event signals (from SEV instruction)
@@ -92,7 +99,7 @@ void  axxia_secondary_init(unsigned int cpu)
 	int phys_cpu;
 	int phys_cluster;
 
-	phys_cpu = cpu_logical_map(cpu);
+	phys_cpu = mpidr_to_hwcpu(cpu_logical_map(cpu));
 	phys_cluster = phys_cpu / 4;
 
 	/*
@@ -149,7 +156,7 @@ int  axxia_boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 */
 	_raw_spin_lock(&boot_lock);
 
-	phys_cpu = cpu_logical_map(cpu);
+	phys_cpu = mpidr_to_hwcpu(cpu_logical_map(cpu));
 
 	powered_down_cpu = pm_get_powered_down_cpu();
 
@@ -263,7 +270,7 @@ static void __init axxia_smp_prepare_cpus(unsigned int max_cpus)
 		 * bring them online later.
 		 */
 		if (cpu != 0) {
-			u32 phys_cpu = cpu_logical_map(cpu);
+			u32 phys_cpu = mpidr_to_hwcpu(cpu_logical_map(cpu));
 			u32 tmp = readl(syscon + 0x1010);
 			writel(0xab, syscon + 0x1000);
 			tmp &= ~(1 << phys_cpu);
-- 
1.7.5.4

