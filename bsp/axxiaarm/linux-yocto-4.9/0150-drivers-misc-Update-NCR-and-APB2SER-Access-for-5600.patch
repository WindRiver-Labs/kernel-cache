From 48215af7a10e2d6930af4943e8bf0dec0abc49af Mon Sep 17 00:00:00 2001
From: John Jacques <john.jacques@intel.com>
Date: Fri, 10 Jun 2016 07:33:12 -0500
Subject: [PATCH 150/213] drivers/misc: Update NCR and APB2SER Access for 5600

Signed-off-by: John Jacques <john.jacques@intel.com>
---
 drivers/misc/Kconfig    |   2 +-
 drivers/misc/lsi-ncr.c  | 730 ++++++++++++++++++++++++++----------------------
 include/linux/lsi-ncr.h |  15 +-
 3 files changed, 400 insertions(+), 347 deletions(-)

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 079882a..8dea541 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -489,7 +489,7 @@ config LSI_MTC
 	  Say N if you are unsure
 
 config LSI_NCR
-	tristate "LSI NCR Access"
+	bool "LSI NCR Access"
 	depends on ARCH_AXXIA || ACP
 	help
 	  Provides access to the LSI Axxia NCR bus.
diff --git a/drivers/misc/lsi-ncr.c b/drivers/misc/lsi-ncr.c
index 601a025..91afe61 100644
--- a/drivers/misc/lsi-ncr.c
+++ b/drivers/misc/lsi-ncr.c
@@ -22,19 +22,13 @@
 #include <linux/io.h>
 #include <linux/lsi-ncr.h>
 #include <linux/of.h>
+#include <linux/delay.h>
 
-#ifdef CONFIG_ARCH_AXXIA
-#define NCA_PHYS_ADDRESS 0x002020100000ULL
-#define APB2SER_PHY_PHYS_ADDRESS 0x002010000000ULL
-#define SYSCON_PHYS_ADDR 0x002010030000ULL
-#else
-#define NCA_PHYS_ADDRESS 0x002000520000ULL
-#endif
-
-static void __iomem *nca_address;
-#ifdef APB2SER_PHY_PHYS_ADDRESS
-static void __iomem *apb2ser0_address;
-#endif /* APB2SER_PHY_PHYS_ADDRESS */
+static int ncr_available;
+static int nca_big_endian = 1;
+static int is_5500;
+static void __iomem *nca;
+static void __iomem *apb2ser0;
 
 #define WFC_TIMEOUT (400000)
 
@@ -82,7 +76,7 @@
  * is some valid case where this may occur we can re-implement
  * this as a wait loop.
  */
-#define AXXIA_NCR_RESET_ACTIVE_CHECK()				\
+#define AXXIA_NCR_RESET_ACTIVE_CHECK()			\
 	do { if (ncr_reset_active) BUG(); } while (0)
 #else
 #define AXXIA_NCR_RESET_ACTIVE_CHECK()
@@ -91,74 +85,80 @@
 #define LOCK_DOMAIN 0
 
 union command_data_register_0 {
-	unsigned long raw;
+	unsigned int raw;
 	struct {
 #ifdef __BIG_ENDIAN
-		unsigned long start_done:1;
-		unsigned long unused:6;
-		unsigned long local_bit:1;
-		unsigned long status:2;
-		unsigned long byte_swap_enable:1;
-		unsigned long cfg_cmpl_int_enable:1;
-		unsigned long cmd_type:4;
-		unsigned long dbs:16;
+		unsigned int start_done:1;
+		unsigned int unused:6;
+		unsigned int local_bit:1;
+		unsigned int status:2;
+		unsigned int byte_swap_enable:1;
+		unsigned int cfg_cmpl_int_enable:1;
+		unsigned int cmd_type:4;
+		unsigned int dbs:16;
 #else
-		unsigned long dbs:16;
-		unsigned long cmd_type:4;
-		unsigned long cfg_cmpl_int_enable:1;
-		unsigned long byte_swap_enable:1;
-		unsigned long status:2;
-		unsigned long local_bit:1;
-		unsigned long unused:6;
-		unsigned long start_done:1;
+		unsigned int dbs:16;
+		unsigned int cmd_type:4;
+		unsigned int cfg_cmpl_int_enable:1;
+		unsigned int byte_swap_enable:1;
+		unsigned int status:2;
+		unsigned int local_bit:1;
+		unsigned int unused:6;
+		unsigned int start_done:1;
 #endif
 	} __packed bits;
 } __packed;
 
 union command_data_register_1 {
-	unsigned long raw;
+	unsigned int raw;
 	struct {
-		unsigned long target_address:32;
+		unsigned int target_address:32;
 	} __packed bits;
 } __packed;
 
 union command_data_register_2 {
-	unsigned long raw;
+	unsigned int raw;
 	struct {
 #ifdef __BIG_ENDIAN
-		unsigned long unused:16;
-		unsigned long target_node_id:8;
-		unsigned long target_id_address_upper:8;
+		unsigned int unused:16;
+		unsigned int target_node_id:8;
+		unsigned int target_id_address_upper:8;
 #else
-		unsigned long target_id_address_upper:8;
-		unsigned long target_node_id:8;
-		unsigned long unused:16;
+		unsigned int target_id_address_upper:8;
+		unsigned int target_node_id:8;
+		unsigned int unused:16;
 #endif
 	} __packed bits;
 } __packed;
 
-
 /*
  * ncr_register_read/write
  *   low-level access functions to Axxia registers,
  *   with checking to ensure device is not currently
  *   held in reset.
  */
-unsigned long
-ncr_register_read(unsigned *address)
+unsigned int
+ncr_register_read(unsigned int *address)
 {
-	unsigned long value;
+	unsigned int value;
 
 	AXXIA_NCR_RESET_ACTIVE_CHECK();
 	value = __raw_readl(address);
 
+	if (0 == nca_big_endian)
+		return value;
+
 	return be32_to_cpu(value);
 }
 
 void
-ncr_register_write(const unsigned value, unsigned *address)
+ncr_register_write(const unsigned int value, unsigned int *address)
 {
 	AXXIA_NCR_RESET_ACTIVE_CHECK();
+
+	if (0 == nca_big_endian)
+		__raw_writel(value, address);
+
 	__raw_writel(cpu_to_be32(value), address);
 }
 
@@ -169,10 +169,11 @@
  *   This is needed to workaround an AXM55xx v1.0 h/w bug.
  *
  */
-static unsigned long
-ncr_register_read_lock(unsigned *address)
+static unsigned int
+ncr_register_read_lock(unsigned int *address)
 {
-	unsigned long value, flags;
+	unsigned int value;
+	unsigned long flags;
 
 	raw_spin_lock_irqsave(&nca_access_lock, flags);
 	value = ncr_register_read(address);
@@ -182,7 +183,7 @@
 }
 
 static void
-ncr_register_write_lock(const unsigned value, unsigned *address)
+ncr_register_write_lock(const unsigned value, unsigned int *address)
 {
 	unsigned long flags;
 
@@ -196,8 +197,8 @@
  * access - one with locking and one without.
  */
 struct ncr_io_fns {
-	unsigned long (*rd) (unsigned *address);
-	void (*wr) (const unsigned value, unsigned *address);
+	unsigned int (*rd)(unsigned int *address);
+	void (*wr)(const unsigned int value, unsigned int *address);
 };
 
 struct ncr_io_fns ncr_io_fn_lock = {
@@ -213,57 +214,38 @@ struct ncr_io_fns ncr_io_fn_nolock = {
 struct ncr_io_fns *default_io_fn;
 
 
-/* These are only needed on platforms there AMP mode of operation is supported
- * (currently only on PowerPC based Axxia platforms). In AMP mode, multiple OS
- * instances may be accessing the NCA registers, thus requiring a hardware
- * based spinlock like this.
- */
-#ifdef CONFIG_PPC32
-static void
-ncr_amp_lock(int domain)
-{
-	unsigned long offset = (0xff80 + (domain * 4));
-
-	while (ncr_register_read_lock((unsigned *)(nca_address + offset)) != 0)
-		cpu_relax();
-}
-
-static void
-ncr_amp_unlock(int domain)
-{
-	unsigned long offset = (0xff80 + (domain * 4));
+/*
+  ------------------------------------------------------------------------------
+  ncr_lock
 
-	ncr_register_write_lock(0, (unsigned *)(nca_address + offset));
-}
-#else
-static void ncr_amp_lock(int domain) {}
-static void ncr_amp_unlock(int domain) {}
-#endif
+  Used to serialize all access to NCA PIO interface.
+*/
 
-/**
- * Used to serialize all access to NCA PIO interface.
- */
 int
 ncr_lock(int domain)
 {
 	raw_spin_lock_irqsave(&ncr_spin_lock, ncr_spin_flags);
-	ncr_amp_lock(domain);
+
 	return 0;
 }
 EXPORT_SYMBOL(ncr_lock);
 
-/**
- * Used to serialize all access to NCA PIO interface.
- */
+/*
+  ------------------------------------------------------------------------------
+  ncr_unlock
+
+  Used to serialize all access to NCA PIO interface.
+*/
+
 void
 ncr_unlock(int domain)
 {
-	ncr_amp_unlock(domain);
 	raw_spin_unlock_irqrestore(&ncr_spin_lock, ncr_spin_flags);
+
+	return;
 }
 EXPORT_SYMBOL(ncr_unlock);
 
-
 /*
   ------------------------------------------------------------------------------
   ncr_pio_error_dump
@@ -272,22 +254,22 @@ static void ncr_amp_unlock(int domain) {}
 static void
 ncr_pio_error_dump(struct ncr_io_fns *io_fn, char *str)
 {
-	unsigned long cdr0, cdr1, cdr2;
-	unsigned long stat0, stat1;
+	unsigned int cdr0, cdr1, cdr2;
+	unsigned int stat0, stat1;
 
-	cdr0 = io_fn->rd((unsigned *)(nca_address + 0xf0));
-	cdr1 = io_fn->rd((unsigned *)(nca_address + 0xf4));
-	cdr2 = io_fn->rd((unsigned *)(nca_address + 0xf8));
+	cdr0 = io_fn->rd((unsigned int *)(nca + 0xf0));
+	cdr1 = io_fn->rd((unsigned int *)(nca + 0xf4));
+	cdr2 = io_fn->rd((unsigned int *)(nca + 0xf8));
 
-	stat0 = io_fn->rd((unsigned *)(nca_address + 0xe4));
-	stat1 = io_fn->rd((unsigned *)(nca_address + 0xe8));
+	stat0 = io_fn->rd((unsigned int *)(nca + 0xe4));
+	stat1 = io_fn->rd((unsigned int *)(nca + 0xe8));
 
-	pr_err("lsi-ncr: %8s failed, error status : 0x%08lx 0x%08lx\n",
+	pr_err("lsi-ncr: %8s failed, error status : 0x%08x 0x%08x\n",
 	       str, stat0, stat1);
-	pr_err("lsi-ncr:  CDR0-2: 0x%08lx 0x%08lx 0x%08lx\n",
+	pr_err("lsi-ncr:  CDR0-2: 0x%08x 0x%08x 0x%08x\n",
 	       cdr0, cdr1, cdr2);
-
 }
+
 /*
   ------------------------------------------------------------------------------
   ncr_check_pio_status
@@ -304,17 +286,17 @@ static void ncr_amp_unlock(int domain) {}
 	*/
 
 	do {
-		cdr0.raw =
-			io_fn->rd((unsigned *)(nca_address + 0xf0));
+		cdr0.raw = io_fn->rd((unsigned int *)(nca + 0xf0));
 	} while ((0x1 == cdr0.bits.start_done) &&
 		 (time_before(jiffies, timeout)));
 
 	if (0x1 == cdr0.bits.start_done) {
 		/* timed out without completing */
-		pr_err("lsi-ncr: PIO operation timeout cdr0=0x%08lx!\n",
+		pr_err("lsi-ncr: PIO operation timeout cdr0=0x%08x!\n",
 		       cdr0.raw);
 		ncr_pio_error_dump(io_fn, str);
 		BUG();
+
 		return -1;
 	}
 
@@ -322,7 +304,7 @@ static void ncr_amp_unlock(int domain) {}
 		/* completed with non-success status */
 		ncr_pio_error_dump(io_fn, str);
 		/* clear CDR0 to allow subsequent commands to complete */
-		io_fn->wr(0, (unsigned *) (nca_address + 0xf0));
+		io_fn->wr(0, (unsigned int *) (nca + 0xf0));
 
 		/*
 		 * we now treat any config ring error as a BUG().
@@ -340,6 +322,135 @@ static void ncr_amp_unlock(int domain) {}
 	return 0;
 }
 
+union ncp_apb2ser_indirect_command {
+	unsigned     raw;
+
+	struct {
+#ifdef __BIG_ENDIAN
+		unsigned      valid                                     :  1;
+		unsigned      hwrite                                    :  1;
+		unsigned      tshift                                    :  4;
+		unsigned      hsize                                     :  3;
+		unsigned      htrans                                    :  2;
+		unsigned      reserved                                  :  5;
+		unsigned      haddr                                     : 16;
+#else    /* Little Endian */
+		unsigned      haddr                                     : 16;
+		unsigned      reserved                                  :  5;
+		unsigned      htrans                                    :  2;
+		unsigned      hsize                                     :  3;
+		unsigned      tshift                                    :  4;
+		unsigned      hwrite                                    :  1;
+		unsigned      valid                                     :  1;
+#endif
+	} __packed bits;
+} __packed;
+
+/*
+  ------------------------------------------------------------------------------
+  ncr_0x115
+*/
+
+static int
+ncr_0x115(unsigned int region, unsigned int offset, int write,
+	  unsigned int *value)
+{
+	unsigned long base;
+	union ncp_apb2ser_indirect_command indcmd;
+	unsigned wfc;
+
+	memset(&indcmd, 0, sizeof(union ncp_apb2ser_indirect_command));
+	indcmd.bits.valid = 1;
+	indcmd.bits.hwrite = (0 == write) ? 0 : 1;
+	indcmd.bits.tshift = 1;
+	indcmd.bits.htrans = 2;
+	indcmd.bits.haddr = offset;
+
+	if (0 != is_5500) {
+		BUG();
+	} else {
+		if (0 == NCP_TARGET_ID(region))
+			indcmd.bits.hsize = 2;
+		else
+			indcmd.bits.hsize = 1;
+
+		base = 0x10000ULL * (0x14 + NCP_TARGET_ID(region));
+	}
+
+	mdelay(50);
+
+	if (0 != write)
+		writel(*value, (apb2ser0 + base));
+
+	pr_debug("ncr: indcmd.raw=0x%x\n", indcmd.raw);
+	writel(indcmd.raw, (apb2ser0 + base + 4));
+	wfc = WFC_TIMEOUT;
+
+	do {
+		--wfc;
+		indcmd.raw = readl(apb2ser0 + base + 4);
+	} while (1 == indcmd.bits.valid && 0 < wfc);
+
+	if (0 == wfc) {
+		printk(KERN_ERR "APB2SER Timeout: 0x%x\n", region);
+
+		return -1;
+	}
+
+	if (0 == write)
+		*value = readl(apb2ser0 + base + 8);
+
+	return 0;
+}
+
+/*
+  ------------------------------------------------------------------------------
+  ncr_axi2ser
+*/
+
+static int
+ncr_axi2ser(unsigned int region, unsigned int offset, int write,
+	    unsigned int *value)
+{
+	unsigned int *address;
+
+	address = apb2ser0;
+
+	switch (NCP_NODE_ID(region)) {
+	case 0x153:
+		break;
+	case 0x155:
+		address += 0x800000;
+		break;
+	case 0x156:
+		address += 0xc00000;
+		break;
+	case 0x165:
+		address += 0x1400000;
+		break;
+	case 0x167:
+		address += 0x1c00000;
+		break;
+	default:
+		BUG();
+		break;
+	}
+
+	if (0x156 == NCP_NODE_ID(region))
+		address += NCP_TARGET_ID(region) * 0x4000;
+	else
+		address += NCP_TARGET_ID(region) * 0x10000;
+
+	address += offset;
+
+	if (0 == write)
+		*value = readl(address);
+	else
+		writel(*value, address);
+
+	return 0;
+}
+
 /*
   ======================================================================
   ======================================================================
@@ -350,19 +461,36 @@ static void ncr_amp_unlock(int domain) {}
 
 /*
   ----------------------------------------------------------------------
-  ncr_read
+  __ncr_read
 */
 
 static int
 __ncr_read(struct ncr_io_fns *io_fn,
-	unsigned long region, unsigned long address, int number,
-	void *buffer)
+	   unsigned int region, unsigned long address, int number,
+	   void *buffer)
 {
 	union command_data_register_0 cdr0;
 	union command_data_register_1 cdr1;
 	union command_data_register_2 cdr2;
 
-	if ((NCP_NODE_ID(region) != 0x0153) && (NCP_NODE_ID(region) != 0x115)) {
+	if (0 == ncr_available)
+		return -1;
+
+	pr_debug("%s:%d - region=0x%x node=0x%x target=0x%x\n",
+	      __FILE__, __LINE__,
+	      region, NCP_NODE_ID(region), NCP_TARGET_ID(region));
+
+	if (0x115 == NCP_NODE_ID(region)) {
+		if (0 != ncr_0x115(region, address, 0, buffer))
+			return -1;
+	} else if (0x153 == NCP_NODE_ID(region) ||
+		   0x155 == NCP_NODE_ID(region) ||
+		   0x156 == NCP_NODE_ID(region) ||
+		   0x165 == NCP_NODE_ID(region) ||
+		   0x167 == NCP_NODE_ID(region)) {
+		if (0 != ncr_axi2ser(region, address, 0, buffer))
+			return -1;
+	} else if (0x100 > NCP_NODE_ID(region)) {
 		/* make sure any previous command has completed */
 		if (0 != ncr_check_pio_status(io_fn, "previous"))
 			return -1;
@@ -374,11 +502,11 @@ static void ncr_amp_unlock(int domain) {}
 		cdr2.raw = 0;
 		cdr2.bits.target_node_id = NCP_NODE_ID(region);
 		cdr2.bits.target_id_address_upper = NCP_TARGET_ID(region);
-		io_fn->wr(cdr2.raw, (unsigned *) (nca_address + 0xf8));
+		io_fn->wr(cdr2.raw, (unsigned int *) (nca + 0xf8));
 
 		cdr1.raw = 0;
 		cdr1.bits.target_address = (address >> 2);
-		io_fn->wr(cdr1.raw, (unsigned *) (nca_address + 0xf4));
+		io_fn->wr(cdr1.raw, (unsigned int *) (nca + 0xf4));
 
 		cdr0.raw = 0;
 		cdr0.bits.start_done = 1;
@@ -389,7 +517,7 @@ static void ncr_amp_unlock(int domain) {}
 		cdr0.bits.cmd_type = 4;
 		/* TODO: Verify number... */
 		cdr0.bits.dbs = (number - 1);
-		io_fn->wr(cdr0.raw, (unsigned *) (nca_address + 0xf0));
+		io_fn->wr(cdr0.raw, (unsigned int *) (nca + 0xf0));
 		mb();
 
 		/*
@@ -399,126 +527,62 @@ static void ncr_amp_unlock(int domain) {}
 			return -1;
 
 		/*
-		  Copy data words to the buffer.
+_		  Copy data words to the buffer.
 		*/
 
-		address = (unsigned long)(nca_address + 0x1000);
+		address = (unsigned long)(nca + 0x1000);
 		while (4 <= number) {
-			*((unsigned long *) buffer) =
-				io_fn->rd((unsigned *) address);
+			*((unsigned int *) buffer) =
+				io_fn->rd((unsigned int *) address);
 			address += 4;
 			buffer += 4;
 			number -= 4;
 		}
 
 		if (0 < number) {
-			unsigned long temp =
-				io_fn->rd((unsigned *) address);
+			unsigned int temp =
+				io_fn->rd((unsigned int *) address);
 			memcpy((void *) buffer, &temp, number);
 		}
 	} else {
-#ifdef APB2SER_PHY_PHYS_ADDRESS
-		int wfc_timeout = WFC_TIMEOUT;
-
-		if (NCP_NODE_ID(region) != 0x115) {
-			void __iomem *targ_address = apb2ser0_address +
-				(address & (~0x3));
-			/*
-			 * Copy data words to the buffer.
-			 */
-
-			while (4 <= number) {
-				*((unsigned long *) buffer) =
-					*((unsigned long *) targ_address);
-				targ_address += 4;
-				number -= 4;
-			}
-		} else {
-			void __iomem *base;
-			if (0xffff < address)
-				return -1;
-
-			switch (NCP_TARGET_ID(region)) {
-			case 0:
-				base = (apb2ser0_address + 0x1e0);
-				break;
-			case 1:
-				base = (apb2ser0_address + 0x1f0);
-				break;
-			case 2:
-				base = (apb2ser0_address + 0x200);
-				break;
-			case 3:
-				base = (apb2ser0_address + 0x210);
-				break;
-			case 4:
-				base = (apb2ser0_address + 0x220);
-				break;
-			case 5:
-				base = (apb2ser0_address + 0x230);
-				break;
-			default:
-				return -1;
-			}
-			if ((NCP_TARGET_ID(region) == 0x1) ||
-			    (NCP_TARGET_ID(region) == 0x4)) {
-				writel((0x84c00000 + address), (base + 4));
-			} else {
-				writel((0x85400000 + address), (base + 4));
-			}
-			do {
-				--wfc_timeout;
-				*((unsigned long *) buffer) =
-					readl(base + 4);
-			} while (0 != (*((unsigned long *) buffer) & 0x80000000)
-				 && 0 < wfc_timeout);
-
-			if (0 == wfc_timeout)
-				return -1;
-
-			if ((NCP_TARGET_ID(region) == 0x1) ||
-			    (NCP_TARGET_ID(region) == 0x4)) {
-				*((unsigned short *) buffer) =
-					readl(base + 8);
-			} else {
-				*((unsigned long *) buffer) =
-					readl(base + 8);
-			}
+		printk(KERN_ERR "Unhandled Region (r): 0x%x 0x%x 0%x 0x%lx\n",
+		       region, NCP_NODE_ID(region), NCP_TARGET_ID(region),
+		       address);
 
-		}
-#else
 		return -1;
-#endif /* APB2SER_PHY_PHYS_ADDRESS */
 	}
 
-
 	return 0;
 }
 
+/*
+  ------------------------------------------------------------------------------
+  ncr_read_nolock
+*/
 
 int
-ncr_read_nolock(unsigned long region, unsigned long address,
-		 int number, void *buffer)
+ncr_read_nolock(unsigned int region, unsigned int address,
+		int number, void *buffer)
 {
-	return __ncr_read(&ncr_io_fn_nolock,
-		region, address, number, buffer);
+	if (0 == ncr_available)
+		return -1;
+
+	return __ncr_read(&ncr_io_fn_nolock, region, address, number, buffer);
 }
 EXPORT_SYMBOL(ncr_read_nolock);
 
+/*
+  ------------------------------------------------------------------------------
+  ncr_read
+*/
 
 int
-ncr_read(unsigned long region, unsigned long address, int number,
-	 void *buffer)
+ncr_read(unsigned int region, unsigned int address, int number, void *buffer)
 {
-	int	rc;
-
-	if (NULL == nca_address)
-		return -1;
+	int rc;
 
-#ifdef APB2SER_PHY_PHYS_ADDRESS
-	if (NULL == apb2ser0_address)
+	if (0 == ncr_available)
 		return -1;
-#endif /* APB2SER_PHY_PHYS_ADDRESS */
 
 	ncr_lock(LOCK_DOMAIN);
 
@@ -529,17 +593,40 @@ static void ncr_amp_unlock(int domain) {}
 
 	return rc;
 }
+
 EXPORT_SYMBOL(ncr_read);
 
 /*
+  ------------------------------------------------------------------------------
+  ncr_read32
+*/
+
+int
+ncr_read32(unsigned int region, unsigned int offset, unsigned int *value)
+{
+	unsigned int val;
+	int rc;
+
+	rc = ncr_read(region, offset, 4, &val);
+	pr_debug("%s:%d - read 0x%x from 0x%x.0x%x.0x%x rc=%d\n",
+		 __FILE__, __LINE__, val,
+		 NCP_NODE_ID(region), NCP_TARGET_ID(region), offset, rc);
+	*value = val;
+
+	return rc;
+}
+
+EXPORT_SYMBOL(ncr_read32);
+
+/*
   ----------------------------------------------------------------------
   ncr_write
 */
 
 static int
 __ncr_write(struct ncr_io_fns *io_fn,
-	unsigned long region, unsigned long address, int number,
-	void *buffer)
+	    unsigned int region, unsigned int address, int number,
+	    void *buffer)
 {
 	union command_data_register_0 cdr0;
 	union command_data_register_1 cdr1;
@@ -547,7 +634,20 @@ static void ncr_amp_unlock(int domain) {}
 	unsigned long data_word_base;
 	int dbs = (number - 1);
 
-	if ((NCP_NODE_ID(region) != 0x0153) && (NCP_NODE_ID(region) != 0x115)) {
+	if (0 == ncr_available)
+		return -1;
+
+	if (0x115 == NCP_NODE_ID(region)) {
+		if (0 != ncr_0x115(region, address, 1, buffer))
+			return -1;
+	} else if (0x153 == NCP_NODE_ID(region) ||
+		   0x155 == NCP_NODE_ID(region) ||
+		   0x156 == NCP_NODE_ID(region) ||
+		   0x165 == NCP_NODE_ID(region) ||
+		   0x167 == NCP_NODE_ID(region)) {
+		if (0 != ncr_axi2ser(region, address, 1, buffer))
+			return -1;
+	} else if (0x100 > NCP_NODE_ID(region)) {
 		/* make sure any previous command has completed */
 		if (0 != ncr_check_pio_status(io_fn, "previous"))
 			return -1;
@@ -559,28 +659,28 @@ static void ncr_amp_unlock(int domain) {}
 		cdr2.raw = 0;
 		cdr2.bits.target_node_id = NCP_NODE_ID(region);
 		cdr2.bits.target_id_address_upper = NCP_TARGET_ID(region);
-		io_fn->wr(cdr2.raw, (unsigned *) (nca_address + 0xf8));
+		io_fn->wr(cdr2.raw, (unsigned *) (nca + 0xf8));
 
 		cdr1.raw = 0;
 		cdr1.bits.target_address = (address >> 2);
-		io_fn->wr(cdr1.raw, (unsigned *) (nca_address + 0xf4));
+		io_fn->wr(cdr1.raw, (unsigned *) (nca + 0xf4));
 
 		/*
 		  Copy from buffer to the data words.
 		*/
 
-		data_word_base = (unsigned long)(nca_address + 0x1000);
+		data_word_base = (unsigned long)(nca + 0x1000);
 
 		while (4 <= number) {
-			io_fn->wr(*((unsigned long *) buffer),
-					   (unsigned *) data_word_base);
+			io_fn->wr(*((unsigned int *)buffer),
+				  (unsigned int *)data_word_base);
 			data_word_base += 4;
 			buffer += 4;
 			number -= 4;
 		}
 
 		if (0 < number) {
-			unsigned long temp = 0;
+			unsigned int temp = 0;
 
 			memcpy((void *) &temp, (void *) buffer, number);
 			io_fn->wr(temp, (unsigned *) data_word_base);
@@ -598,7 +698,7 @@ static void ncr_amp_unlock(int domain) {}
 		cdr0.bits.cmd_type = 5;
 		/* TODO: Verify number... */
 		cdr0.bits.dbs = dbs;
-		io_fn->wr(cdr0.raw, (unsigned *) (nca_address + 0xf0));
+		io_fn->wr(cdr0.raw, (unsigned *) (nca + 0xf0));
 		mb();
 
 		/*
@@ -607,103 +707,39 @@ static void ncr_amp_unlock(int domain) {}
 
 		if (0 != ncr_check_pio_status(io_fn, "write"))
 			return -1;
-
 	} else {
-#ifdef APB2SER_PHY_PHYS_ADDRESS
-		int wfc_timeout = WFC_TIMEOUT;
-
-		if (NCP_NODE_ID(region) != 0x115) {
-			void __iomem *targ_address = apb2ser0_address +
-				(address & (~0x3));
-			/*
-			  Copy from buffer to the data words.
-			*/
-
-			while (4 <= number) {
-				*((unsigned long *) targ_address) =
-					*((unsigned long *) buffer);
-				targ_address += 4;
-				number -= 4;
-			}
-		} else {
-			void __iomem *base;
-			if (0xffff < address)
-				return -1;
-
-			switch (NCP_TARGET_ID(region)) {
-			case 0:
-				base = (apb2ser0_address + 0x1e0);
-				break;
-			case 1:
-				base = (apb2ser0_address + 0x1f0);
-				break;
-			case 2:
-				base = (apb2ser0_address + 0x200);
-				break;
-			case 3:
-				base = (apb2ser0_address + 0x210);
-				break;
-			case 4:
-				base = (apb2ser0_address + 0x220);
-				break;
-			case 5:
-				base = (apb2ser0_address + 0x230);
-				break;
-			default:
-				return -1;
-			}
-			if ((NCP_TARGET_ID(region) == 0x1) ||
-			    (NCP_TARGET_ID(region) == 0x4)) {
-				writel(*((unsigned short *) buffer), base);
-				writel((0xc4c00000 + address), (base + 4));
-			} else {
-				writel(*((unsigned long *) buffer), base);
-				writel((0xc5400000 + address), (base + 4));
-			}
-			do {
-				--wfc_timeout;
-				*((unsigned long *) buffer) =
-					readl(base + 4);
-			} while (0 != (*((unsigned long *) buffer) & 0x80000000)
-				 && 0 < wfc_timeout);
-
-			if (0 == wfc_timeout)
-				return -1;
-		}
-#else
+		printk(KERN_ERR "Unhandled Region (w): 0x%x 0x%x 0x%x 0x%x\n",
+		       region, NCP_NODE_ID(region), NCP_TARGET_ID(region),
+		       address);
+
 		return -1;
-#endif /* APB2SER_PHY_PHYS_ADDRESS */
 	}
 
 	return 0;
 }
 
-
 int
-ncr_write_nolock(unsigned long region, unsigned long address, int number,
-	  void *buffer)
+ncr_write_nolock(unsigned int region, unsigned int address, int number,
+		 void *buffer)
 {
+	if (0 == ncr_available)
+		return -1;
+
 	/* call the __ncr_write function with nolock io_fn */
 	return __ncr_write(&ncr_io_fn_nolock,
-			region, address, number, buffer);
+			   region, address, number, buffer);
 }
 EXPORT_SYMBOL(ncr_write_nolock);
 
-
 int
-ncr_write(unsigned long region, unsigned long address, int number,
+ncr_write(unsigned int region, unsigned int address, int number,
 	  void *buffer)
 {
 	int rc = 0;
 
-	if (NULL == nca_address)
+	if (0 == ncr_available)
 		return -1;
 
-#ifdef APB2SER_PHY_PHYS_ADDRESS
-	if (NULL == apb2ser0_address)
-		return -1;
-#endif /* APB2SER_PHY_PHYS_ADDRESS */
-
 	/* grab the ncr_lock */
 	ncr_lock(LOCK_DOMAIN);
 
@@ -718,80 +754,96 @@ static void ncr_amp_unlock(int domain) {}
 EXPORT_SYMBOL(ncr_write);
 
 /*
-  ----------------------------------------------------------------------
+  ------------------------------------------------------------------------------
+  ncr_write32
+*/
+
+int
+ncr_write32(unsigned int region, unsigned int offset, unsigned int value)
+{
+	int rc;
+
+	rc = ncr_write(region, offset, 4, &value);
+	pr_debug("%s:%d - wrote 0x%x to 0x%x.0x%x.0x%x rc=%d\n",
+		 __FILE__, __LINE__, value,
+		 NCP_NODE_ID(region), NCP_TARGET_ID(region), offset, rc);
+
+	return rc;
+}
+
+EXPORT_SYMBOL(ncr_write32);
+
+/*
+  ------------------------------------------------------------------------------
   ncr_init
 */
 
 static int
 ncr_init(void)
 {
-#ifdef CONFIG_ARCH_AXXIA
-	u32 pfuse;
-	u32 chip_type;
-	u32 chip_ver;
-	void __iomem *syscon;
+	default_io_fn = &ncr_io_fn_nolock;
 
-	syscon = ioremap(SYSCON_PHYS_ADDR, SZ_64K);
+	if (of_find_compatible_node(NULL, NULL, "lsi,axm5500-amarillo")) {
+		u32 pfuse;
+		u32 chip_type;
+		u32 chip_ver;
+		void __iomem *syscon;
 
-	if (WARN_ON(!syscon))
-		return -ENODEV;
+		syscon = ioremap(0x002010030000ULL, SZ_64K);
 
-	/*
-	 * read chip type/revision to determine if low-level locking
-	 * is required and select the appropriate io_fns.
-	 */
-	pfuse = readl(syscon + 0x34);
-	chip_type = pfuse & 0x1f;
-	chip_ver  = (pfuse >> 8) & 0x7;
-
-	if ((chip_type == 0 || chip_type == 9) && (chip_ver == 0)) {
-		/* AXM5516v1.0 needs low-level locking */
-		default_io_fn = &ncr_io_fn_lock;
-	} else {
-		/* no low-level locking needed */
-		default_io_fn = &ncr_io_fn_nolock;
-	}
+		if (WARN_ON(!syscon))
+			return -ENODEV;
 
-	iounmap(syscon);
-#else
-	/* 3500 doesn't need the lock, 3400 does. */
-	if (of_find_compatible_node(NULL, NULL, "lsi,acp3500"))
-		default_io_fn = &ncr_io_fn_nolock;
-	else
-		default_io_fn = &ncr_io_fn_lock;
-#endif
+		/*
+		 * read chip type/revision to determine if low-level locking
+		 * is required and select the appropriate io_fns.
+		 */
 
-	nca_address = ioremap(NCA_PHYS_ADDRESS, 0x20000);
+		pfuse = readl(syscon + 0x34);
+		chip_type = pfuse & 0x1f;
+		chip_ver  = (pfuse >> 8) & 0x7;
 
-#ifdef APB2SER_PHY_PHYS_ADDRESS
-	apb2ser0_address = ioremap(APB2SER_PHY_PHYS_ADDRESS, 0x10000);
-#endif /* APB2SER_PHY_PHYS_ADDRESS */
+		if ((chip_type == 0 || chip_type == 9) && (chip_ver == 0)) {
+			/* AXM5516v1.0 needs low-level locking */
+			default_io_fn = &ncr_io_fn_lock;
+			pr_debug("Using NCA lock functions (AXM5500 v1.0)\n");
+		}
 
-	pr_info("ncr: available\n");
+		iounmap(syscon);
+	}
 
-	return 0;
-}
-core_initcall(ncr_init);
+	if (of_find_compatible_node(NULL, NULL, "lsi,axm5500") ||
+	    of_find_compatible_node(NULL, NULL, "lsi,axm5516")) {
+		pr_debug("Using AXM5500 Addresses\n");
+		nca = ioremap(0x002020100000ULL, 0x20000);
+		apb2ser0 = ioremap(0x002010000000ULL, 0x10000);
+		is_5500 = 1;
+	} else if (of_find_compatible_node(NULL, NULL, "lsi,axm5616")) {
+		pr_debug("Using AXM5600 Addresses\n");
+		nca = ioremap(0x8031080000ULL, 0x20000);
+		apb2ser0 = ioremap(0x8002000000ULL, 0x4000000);
+		pr_debug("0x%lx 0x%lx\n",
+			 (unsigned long)nca,
+			 (unsigned long)apb2ser0);
+	} else if (of_find_compatible_node(NULL, NULL, "lsi,axc6732")) {
+		pr_debug("Using AXC6700 Addresses\n");
+		nca = ioremap(0x8020000000ULL, 0x20000);
+		apb2ser0 = ioremap(0x8080000000ULL, 0x400000);
+		nca_big_endian = 0; /* The 6700 NCA is LE */
+	} else {
+		pr_debug("No Valid Compatible String Found for NCR!\n");
 
-/*
-  ----------------------------------------------------------------------
-  ncr_exit
-*/
+		return -1;
+	}
 
-static void __exit
-ncr_exit(void)
-{
-	/* Unmap the NCA. */
-	if (NULL != nca_address)
-		iounmap(nca_address);
-
-#ifdef APB2SER_PHY_PHYS_ADDRESS
-	/* Unmap the APB2SER0 PHY. */
-	if (NULL != apb2ser0_address)
-		iounmap(apb2ser0_address);
-#endif /* APB2SER_PHY_PHYS_ADDRESS */
+	pr_debug("ncr: available\n");
+	ncr_available = 1;
+
+	return 0;
 }
-__exitcall(ncr_exit);
 
+arch_initcall(ncr_init);
+
+MODULE_AUTHOR("John Jacques <john.jacques@intel.com>");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("Register Ring access for LSI's ACP board");
+MODULE_DESCRIPTION("Register Ring access for Axxia");
diff --git a/include/linux/lsi-ncr.h b/include/linux/lsi-ncr.h
index 3733b04..354a2c4 100644
--- a/include/linux/lsi-ncr.h
+++ b/include/linux/lsi-ncr.h
@@ -33,13 +33,14 @@
 #define NCP_TARGET_ID(region) ((region) & 0xffff)
 #endif
 
-unsigned long ncr_register_read(unsigned *);
-void ncr_register_write(const unsigned, unsigned *);
-int ncr_read(unsigned long, unsigned long, int, void *);
-int ncr_write(unsigned long, unsigned long, int, void *);
-int ncr_read_nolock(unsigned long, unsigned long, int, void *);
-int ncr_write_nolock(unsigned long, unsigned long, int, void *);
-
+unsigned int ncr_register_read(unsigned int *);
+void ncr_register_write(const unsigned int, unsigned int *);
+int ncr_read(unsigned int, unsigned int, int, void *);
+int ncr_read32(unsigned int, unsigned int, unsigned int *);
+int ncr_write(unsigned int, unsigned int, int, void *);
+int ncr_write32(unsigned int, unsigned int, unsigned int);
+int ncr_read_nolock(unsigned int, unsigned int, int, void *);
+int ncr_write_nolock(unsigned int, unsigned int, int, void *);
 
  /*
   * when defined, the RTE driver module will set/clear
-- 
1.9.1

