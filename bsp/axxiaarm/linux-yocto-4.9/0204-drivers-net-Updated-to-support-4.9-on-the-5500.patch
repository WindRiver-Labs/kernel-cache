From 3e24bd8c73eccf40160422e04cb7bc60ffc3f215 Mon Sep 17 00:00:00 2001
From: Charlie Paul <cpaul.windriver@gmail.com>
Date: Thu, 2 Feb 2017 15:10:21 -0800
Subject: [PATCH 204/213] drivers/net: Updated to support 4.9 on the 5500

This patch updates the axxia 5500 to support Linux 4.9

Signed-off-by: Charlie Paul <cpaul.windriver@gmail.com>
---
 drivers/net/ethernet/lsi/lsi-femac.c   |  5 ++---
 drivers/net/ethernet/lsi/lsi_acp_net.c | 13 +++++--------
 2 files changed, 7 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/lsi/lsi-femac.c b/drivers/net/ethernet/lsi/lsi-femac.c
index ee1b38e..734ea03 100644
--- a/drivers/net/ethernet/lsi/lsi-femac.c
+++ b/drivers/net/ethernet/lsi/lsi-femac.c
@@ -729,8 +729,7 @@ static inline unsigned compare_ether_addr(const u8 *addr1, const u8 *addr2)
 	priv->link = 0;
 	priv->phy_dev = phy_dev;
 
-	dev_info(&ndev->dev, "[%s] (phy_addr=%s, irq=%d)\n",
-		 phy_dev->drv->name, dev_name(&phy_dev->dev), phy_dev->irq);
+	phy_attached_info(phy_dev);
 
 	napi_enable(&priv->napi);
 
@@ -839,7 +838,7 @@ static inline unsigned compare_ether_addr(const u8 *addr1, const u8 *addr2)
 	wmb();
 	WARN_ON(priv->txq->head != readl(priv->base + DMAREG_TX_HEAD));
 	writel(queue_inc_head(priv->txq), priv->base + DMAREG_TX_HEAD);
-	ndev->trans_start = jiffies;
+	netif_trans_update(ndev);	/* prevent tx timeout */
 	pr_queue("XMIT", priv->txq);
 
 	spin_unlock_irqrestore(&priv->lock, flags);
diff --git a/drivers/net/ethernet/lsi/lsi_acp_net.c b/drivers/net/ethernet/lsi/lsi_acp_net.c
index 81927af..d6f2391 100644
--- a/drivers/net/ethernet/lsi/lsi_acp_net.c
+++ b/drivers/net/ethernet/lsi/lsi_acp_net.c
@@ -205,7 +205,7 @@ static int appnic_mii_probe(struct net_device *dev)
 	int ret;
 
 	if (pdata->phy_address && (pdata->phy_address < PHY_MAX_ADDR)) {
-		phydev = pdata->mii_bus->phy_map[pdata->phy_address];
+		phydev = mdiobus_get_phy(pdata->mii_bus, pdata->phy_address);
 		if (phydev)
 			goto skip_first;
 	}
@@ -244,9 +244,7 @@ static int appnic_mii_probe(struct net_device *dev)
 		return ret;
 	}
 
-	netdev_info(dev,
-		    "attached PHY driver [%s] (mii_bus:phy_addr=%s, irq=%d)\n",
-		    phydev->drv->name, dev_name(&phydev->dev), phydev->irq);
+	phy_attached_info(phydev);
 
 	/* Mask with MAC supported features */
 	phydev->supported &= PHY_BASIC_FEATURES;
@@ -286,7 +284,7 @@ static int appnic_mii_init(struct platform_device *pdev,
 	pdata->mii_bus->priv = pdata;
 	pdata->mii_bus->read = appnic_mii_read;
 	pdata->mii_bus->write = appnic_mii_write;
-	pdata->mii_bus->irq = pdata->phy_irq;
+	memcpy(pdata->mii_bus->irq, pdata->phy_irq, sizeof(pdata->phy_irq));
 	for (i = 0; i < PHY_MAX_ADDR; ++i)
 		pdata->mii_bus->irq[i] = PHY_POLL;
 
@@ -1034,8 +1032,7 @@ static int appnic_hard_start_xmit(struct sk_buff *skb, struct net_device *dev)
 	union appnic_queue_pointer queue;
 	unsigned long flags;
 
-	if (!spin_trylock_irqsave(&pdata->tx_lock, flags))
-		return NETDEV_TX_LOCKED;
+	spin_lock_irqsave(&pdata->tx_lock, flags);
 
 	length = skb->len < ETH_ZLEN ? ETH_ZLEN : skb->len;
 	buf_per_desc = pdata->tx_buf_sz / pdata->tx_num_desc;
@@ -1108,7 +1105,7 @@ static int appnic_hard_start_xmit(struct sk_buff *skb, struct net_device *dev)
 		rmb();
 
 		write_mac(pdata->tx_head.raw, APPNIC_DMA_TX_HEAD_POINTER);
-		dev->trans_start = jiffies;
+		netif_trans_update(dev);
 
 	} else {
 		pdata->out_of_tx_descriptors++;
-- 
1.9.1

