From 533ed285055e2a14a90a38a828f5a8427e1883c1 Mon Sep 17 00:00:00 2001
From: John Jacques <john.jacques@intel.com>
Date: Fri, 7 Oct 2016 16:32:26 +0300
Subject: [PATCH 168/213] axxia: Add and Enable AXXIA_NCR_RESET_ACTIVE_CHECK

On Axxia systems, the NCR driver allows access to a configuration
ring.  This commit exports a symbol that other configuration ring
clients can use to tell that a reset is active.

Signed-off-by: Gary McGee <gary.mcgee@intel.com>
Signed-off-by: John Jacques <john.jacques@intel.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
---
 arch/arm/mach-axxia/axxia.c | 6 +-----
 drivers/misc/Kconfig        | 8 ++++++++
 drivers/misc/lsi-ncr.c      | 3 +++
 3 files changed, 12 insertions(+), 5 deletions(-)

diff --git a/arch/arm/mach-axxia/axxia.c b/arch/arm/mach-axxia/axxia.c
index 5a9bdc3..5dae686 100644
--- a/arch/arm/mach-axxia/axxia.c
+++ b/arch/arm/mach-axxia/axxia.c
@@ -38,6 +38,7 @@
 #include <linux/sizes.h>
 #include <linux/pmu.h>
 #include <linux/kexec.h>
+#include <linux/lsi-ncr.h>
 #ifdef CONFIG_ARM_ARCH_TIMER
 #include <asm/arch_timer.h>
 #endif
@@ -63,11 +64,6 @@
 static void __iomem *base;
 void __iomem *dickens;
 
-#ifdef CONFIG_ARCH_AXXIA_NCR_RESET_CHECK
-int ncr_reset_active;
-EXPORT_SYMBOL(ncr_reset_active);
-#endif
-
 static void set_l3_pstate(u32 newstate)
 {
 	static const u8 hnf[] = {
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 8dea541..558b6dd 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -494,6 +494,14 @@ config LSI_NCR
 	help
 	  Provides access to the LSI Axxia NCR bus.
 
+config ARCH_AXXIA_NCR_RESET_CHECK
+	bool "Axxia NCR driver reset checking"
+	depends on LSI_NCR
+	help
+	  Enabling this option will allow the Axxia NCA Config Ring driver
+	  to coordinate with the RTE ncp driver to detect when NCA hardware
+	  is being held in reset.
+
 config LSI_SMMON
 	tristate "LSI System Memory Monitor"
 	depends on ARCH_AXXIA || ACP
diff --git a/drivers/misc/lsi-ncr.c b/drivers/misc/lsi-ncr.c
index 91afe61..17b1eb9 100644
--- a/drivers/misc/lsi-ncr.c
+++ b/drivers/misc/lsi-ncr.c
@@ -76,6 +76,9 @@
  * is some valid case where this may occur we can re-implement
  * this as a wait loop.
  */
+int ncr_reset_active;
+EXPORT_SYMBOL(ncr_reset_active);
+
 #define AXXIA_NCR_RESET_ACTIVE_CHECK()			\
 	do { if (ncr_reset_active) BUG(); } while (0)
 #else
-- 
1.9.1

