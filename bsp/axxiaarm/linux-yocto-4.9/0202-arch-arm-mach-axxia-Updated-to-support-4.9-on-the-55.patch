From bb5a7e17241303c94f1c14111a65c1b176051fe3 Mon Sep 17 00:00:00 2001
From: Charlie Paul <cpaul.windriver@gmail.com>
Date: Thu, 2 Feb 2017 15:08:11 -0800
Subject: [PATCH 202/213] arch/arm/mach-axxia: Updated to support 4.9 on the
 5500

This updates the axxia code for the 5500 to support linux 4.9

Signed-off-by: Charlie Paul <cpaul.windriver@gmail.com>
---
 arch/arm/mach-axxia/axxia-gic.c           | 25 +++++----
 arch/arm/mach-axxia/axxia.c               |  2 +-
 arch/arm/mach-axxia/clock.c               | 11 ++--
 arch/arm/mach-axxia/headsmp.S             |  2 -
 arch/arm/mach-axxia/include/mach/timers.h |  2 +-
 arch/arm/mach-axxia/perf_event_platform.c |  2 +-
 arch/arm/mach-axxia/platsmp.c             |  3 +-
 arch/arm/mach-axxia/ssp-gpio.c            |  6 +--
 arch/arm/mach-axxia/timers.c              | 86 +++++++++++++++++++------------
 9 files changed, 81 insertions(+), 58 deletions(-)

diff --git a/arch/arm/mach-axxia/axxia-gic.c b/arch/arm/mach-axxia/axxia-gic.c
index 9ffd1ae..2bf6016 100644
--- a/arch/arm/mach-axxia/axxia-gic.c
+++ b/arch/arm/mach-axxia/axxia-gic.c
@@ -424,8 +424,14 @@ static int gic_set_type(struct irq_data *d, unsigned int type)
 		return -EINVAL;
 
 	/* We only support two interrupt trigger types. */
-	if (type != IRQ_TYPE_LEVEL_HIGH && type != IRQ_TYPE_EDGE_RISING)
-		return -EINVAL;
+	if (type != IRQ_TYPE_LEVEL_HIGH && type != IRQ_TYPE_EDGE_RISING) {
+		/*
+		 * NOTE: the timer interrupt is defaulting to LOW this is here
+		 * to allow this to pass through, TBD needs to be fixed upstream.
+		 */
+		if (!(gicirq == 27 && type == IRQ_TYPE_LEVEL_LOW))
+			return -EINVAL;
+	}
 
 	/*
 	 * Duplicate IRQ type settings across all clusters. Run
@@ -1103,7 +1109,7 @@ static void __init gic_axxia_init(struct gic_chip_data *gic)
 		writel_relaxed(cpumask, ipi_mask_reg_base + 0x40 + i * 4);
 }
 
-static void __cpuinit gic_dist_init(struct gic_chip_data *gic)
+static void  gic_dist_init(struct gic_chip_data *gic)
 {
 	unsigned int i;
 	u32 cpumask;
@@ -1209,7 +1215,7 @@ static void __cpuinit gic_dist_init(struct gic_chip_data *gic)
 	writel_relaxed(1, base + GIC_DIST_CTRL);
 }
 
-static void __cpuinit gic_cpu_init(struct gic_chip_data *gic)
+static void  gic_cpu_init(struct gic_chip_data *gic)
 {
 
 	void __iomem *dist_base = gic_data_dist_base(gic);
@@ -1334,11 +1340,11 @@ static int gic_irq_domain_map(struct irq_domain *d, unsigned int irq,
 		irq_set_percpu_devid(irq);
 		irq_set_chip_and_handler(irq, &gic_chip,
 					 handle_percpu_devid_irq);
-		set_irq_flags(irq, IRQF_VALID | IRQF_NOAUTOEN);
+		irq_set_status_flags(irq, IRQ_NOAUTOEN);
 	} else {
 		irq_set_chip_and_handler(irq, &gic_chip,
 					 handle_fasteoi_irq);
-		set_irq_flags(irq, IRQF_VALID | IRQF_PROBE);
+		irq_set_probe(irq);
 	}
 	irq_set_chip_data(irq, d->host_data);
 	return 0;
@@ -1351,8 +1357,9 @@ static int gic_irq_domain_xlate(struct irq_domain *d,
 				unsigned long *out_hwirq,
 				unsigned int *out_type)
 {
-	if (d->of_node != controller)
+	if (irq_domain_get_of_node(d) != controller)
 		return -EINVAL;
+
 	if (intsize < 3)
 		return -EINVAL;
 
@@ -1434,7 +1441,7 @@ void __init axxia_gic_init_bases(int irq_start,
 }
 
 #ifdef CONFIG_SMP
-void __cpuinit axxia_gic_secondary_init(void)
+void  axxia_gic_secondary_init(void)
 {
 	struct gic_chip_data *gic = &gic_data;
 
@@ -1442,7 +1449,7 @@ void __cpuinit axxia_gic_secondary_init(void)
 	gic_cpu_init(&gic_data);
 }
 
-void __cpuinit axxia_hotplug_gic_secondary_init(void)
+void  axxia_hotplug_gic_secondary_init(void)
 {
 	gic_cpu_init(&gic_data);
 }
diff --git a/arch/arm/mach-axxia/axxia.c b/arch/arm/mach-axxia/axxia.c
index 5dae686..f2912c6 100644
--- a/arch/arm/mach-axxia/axxia.c
+++ b/arch/arm/mach-axxia/axxia.c
@@ -139,7 +139,7 @@ void __init axxia_dt_timer_init(void)
 	axxia_init_clocks(is_sim);
 
 	of_clk_init(NULL);
-	clocksource_of_init();
+	clocksource_probe();
 }
 
 static struct mmci_platform_data mmc_plat_data = {
diff --git a/arch/arm/mach-axxia/clock.c b/arch/arm/mach-axxia/clock.c
index 6295795..b8b839a 100644
--- a/arch/arm/mach-axxia/clock.c
+++ b/arch/arm/mach-axxia/clock.c
@@ -17,6 +17,7 @@
 #include <linux/of_irq.h>
 #include <linux/of_platform.h>
 
+#define CLK_IS_ROOT		BIT(4)
 
 #define clk_register_clkdev(_clk, _conid, _devfmt, ...) \
 	do { \
@@ -60,16 +61,14 @@ static void axxia_register_clks(void)
 			pr_warn("axxia: No 'frequency' in %s\n", c->path);
 			freq = c->default_freq;
 		}
-		clk[c->id] = clk_register_fixed_rate(NULL, c->name, NULL,
-						     CLK_IS_ROOT, freq);
+		clk[c->id] = clk_register_fixed_rate(NULL, c->name, NULL, CLK_IS_ROOT, freq);
+
 	}
 
 	/* APB clock dummy */
-	clk[clk_apb] = clk_register_fixed_rate(NULL, "apb_pclk", NULL,
-					       CLK_IS_ROOT, 1000000);
+	clk[clk_apb] = clk_register_fixed_rate(NULL, "apb_pclk", NULL, CLK_IS_ROOT, 1000000);
 
-	clk[clk_1mhz] = clk_register_fixed_rate(NULL, "clk_1mhz", NULL,
-						CLK_IS_ROOT, 1000000);
+	clk[clk_1mhz] = clk_register_fixed_rate(NULL, "clk_1mhz", NULL, CLK_IS_ROOT, 1000000);
 }
 
 void __init
diff --git a/arch/arm/mach-axxia/headsmp.S b/arch/arm/mach-axxia/headsmp.S
index b4fe409..b3a998f 100644
--- a/arch/arm/mach-axxia/headsmp.S
+++ b/arch/arm/mach-axxia/headsmp.S
@@ -13,8 +13,6 @@
 #include <linux/linkage.h>
 #include <linux/init.h>
 
-	__CPUINIT
-
 /*
  * Axxia specific entry point for secondary CPUs.  This provides
  * a "holding pen" into which all secondary cores are held until we're
diff --git a/arch/arm/mach-axxia/include/mach/timers.h b/arch/arm/mach-axxia/include/mach/timers.h
index e7205453..f2f0f0f 100644
--- a/arch/arm/mach-axxia/include/mach/timers.h
+++ b/arch/arm/mach-axxia/include/mach/timers.h
@@ -23,7 +23,7 @@
   See arch/arm/mach-axxia/timers.c for details.
  */
 
-#include <asm/hardware/timer-sp.h>
+//#include "timer-sp.h"
 
 #define AXXIA_TIMER_1_BASE 0x00
 #define AXXIA_TIMER_2_BASE 0x20
diff --git a/arch/arm/mach-axxia/perf_event_platform.c b/arch/arm/mach-axxia/perf_event_platform.c
index 85bef3a..8da1c42 100644
--- a/arch/arm/mach-axxia/perf_event_platform.c
+++ b/arch/arm/mach-axxia/perf_event_platform.c
@@ -33,8 +33,8 @@
 
 #include <asm/cputype.h>
 #include <asm/irq_regs.h>
-#include <asm/pmu.h>
 
+#include <linux/perf_event.h>
 #include <linux/kthread.h>
 #include <linux/sched.h>
 
diff --git a/arch/arm/mach-axxia/platsmp.c b/arch/arm/mach-axxia/platsmp.c
index 0e7dde0..3166760 100644
--- a/arch/arm/mach-axxia/platsmp.c
+++ b/arch/arm/mach-axxia/platsmp.c
@@ -28,7 +28,7 @@
 
 #define SYSCON_PHYS_ADDR 0x002010030000ULL
 
-static int __cpuinitdata wfe_fixup;
+static int  wfe_fixup;
 static int wfe_available;
 
 void __iomem *syscon;
@@ -249,6 +249,7 @@ static void __init axxia_smp_prepare_cpus(unsigned int max_cpus)
 	 */
 	for_each_possible_cpu(cpu) {
 		struct device_node *np;
+		u32 release_phys;
 		u32 *release_virt;
 
 		np = get_cpu_node(cpu);
diff --git a/arch/arm/mach-axxia/ssp-gpio.c b/arch/arm/mach-axxia/ssp-gpio.c
index 0f73f8e..af75d38 100644
--- a/arch/arm/mach-axxia/ssp-gpio.c
+++ b/arch/arm/mach-axxia/ssp-gpio.c
@@ -32,7 +32,7 @@ struct gpio_dev {
 static int
 ssp_gpio_get(struct gpio_chip *chip, unsigned offset)
 {
-	struct gpio_dev *priv = dev_get_drvdata(chip->dev);
+	struct gpio_dev *priv = dev_get_drvdata(chip->parent);
 	u32 tmp = readl(priv->regs + 0x30);
 
 	return !!(tmp & (1<<offset));
@@ -48,7 +48,7 @@ struct gpio_dev {
 static void
 ssp_gpio_set(struct gpio_chip *chip, unsigned offset, int value)
 {
-	struct gpio_dev *priv = dev_get_drvdata(chip->dev);
+	struct gpio_dev *priv = dev_get_drvdata(chip->parent);
 	u32 tmp = readl(priv->regs + 0x30);
 
 	if (value)
@@ -82,7 +82,7 @@ struct gpio_dev {
 		return -ENXIO;
 
 	chip = &priv->gpio_chip;
-	chip->dev = &pdev->dev;
+	chip->parent = &pdev->dev;
 #ifdef CONFIG_OF_GPIO
 	chip->of_node = pdev->dev.of_node;
 #endif
diff --git a/arch/arm/mach-axxia/timers.c b/arch/arm/mach-axxia/timers.c
index 20c8c0b..85df882 100644
--- a/arch/arm/mach-axxia/timers.c
+++ b/arch/arm/mach-axxia/timers.c
@@ -33,7 +33,9 @@
 #include <linux/irq.h>
 #include <linux/io.h>
 #include <linux/sched_clock.h>
-#include <asm/hardware/arm_timer.h>
+#include <linux/clockchips.h>
+#include <../drivers/clocksource/timer-sp.h>
+//#include <asm/hardware/arm_timer.h>
 
 struct axxia_timer {
 	struct clock_event_device  dev;
@@ -54,54 +56,68 @@ static u64 sp804_read(void)
 /**
  * axxia_timer_set_mode
  */
-static void
-axxia_timer_set_mode(enum clock_event_mode mode, struct clock_event_device *evt)
+static int axxia_set_next_event(unsigned long cycles,
+				  struct clock_event_device *evt)
+{
+	struct axxia_timer *timer = timer_to_clock_event(evt);
+	unsigned long ctrl;
+
+	ctrl = readl(timer->base + TIMER_CTRL);
+	writel(cycles, timer->base + TIMER_LOAD);
+	writel(ctrl | TIMER_CTRL_ENABLE, timer->base + TIMER_CTRL);
+
+	return 0;
+}
+
+static int axxia_shutdown(struct clock_event_device *evt)
 {
 	struct axxia_timer *timer = timer_to_clock_event(evt);
 	unsigned long ctrl = TIMER_CTRL_32BIT | TIMER_CTRL_IE;
 
-	pr_info("axxia_timer_set_mode: CPU#%d set mode %d on timer %s\n",
-		smp_processor_id(), mode, timer->dev.name);
+	pr_info("axxia_timer_shutdown: CPU#%d set on timer %s\n",
+		smp_processor_id(), timer->dev.name);
 
 	writel(ctrl, timer->base + TIMER_CTRL);
 
-	switch (mode) {
-	case CLOCK_EVT_MODE_PERIODIC:
-		writel(timer->reload, timer->base + TIMER_LOAD);
-		ctrl |= TIMER_CTRL_PERIODIC | TIMER_CTRL_ENABLE;
-		break;
-
-	case CLOCK_EVT_MODE_ONESHOT:
-		/* period set, and timer enabled in 'next_event' hook */
-		ctrl |= TIMER_CTRL_ONESHOT;
-		break;
-
-	case CLOCK_EVT_MODE_UNUSED:
-	case CLOCK_EVT_MODE_SHUTDOWN:
-	default:
-		break;
-	}
+	return 0;
 
-	writel(ctrl, timer->base + TIMER_CTRL);
 }
 
-/**
- * axxia_timer_set_next_event
- *
- */
-static int
-axxia_timer_set_next_event(unsigned long next, struct clock_event_device *evt)
+static int axxia_set_oneshot(struct clock_event_device *evt)
 {
 	struct axxia_timer *timer = timer_to_clock_event(evt);
-	unsigned long ctrl;
+	unsigned long ctrl = TIMER_CTRL_32BIT | TIMER_CTRL_IE;
 
-	ctrl = readl(timer->base + TIMER_CTRL);
-	writel(next, timer->base + TIMER_LOAD);
-	writel(ctrl | TIMER_CTRL_ENABLE, timer->base + TIMER_CTRL);
+	pr_info("axxia_timer_set_oneshot: CPU#%d set on timer %s\n",
+		smp_processor_id(), timer->dev.name);
+
+	writel(ctrl, timer->base + TIMER_CTRL);
+
+	/* period set, and timer enabled in 'next_event' hook */
+	ctrl |= TIMER_CTRL_ONESHOT;
+
+	writel(ctrl, timer->base + TIMER_CTRL);
 
 	return 0;
 }
 
+static int axxia_set_periodic(struct clock_event_device *evt)
+{
+	struct axxia_timer *timer = timer_to_clock_event(evt);
+	unsigned long ctrl = TIMER_CTRL_32BIT | TIMER_CTRL_IE;
+
+	pr_info("axxia_timer_set_periodic: CPU#%d set on timer %s\n",
+		smp_processor_id(), timer->dev.name);
+
+	writel(ctrl, timer->base + TIMER_CTRL);
+
+	writel(timer->reload, timer->base + TIMER_LOAD);
+	ctrl |= TIMER_CTRL_PERIODIC | TIMER_CTRL_ENABLE;
+
+	writel(ctrl, timer->base + TIMER_CTRL);
+
+	return 0;
+}
 
 /**
  * axxia_timer_handler - IRQ handler for the timer.
@@ -204,8 +220,10 @@ static u64 sp804_read(void)
 
 	evt->dev.features       = CLOCK_EVT_FEAT_PERIODIC |
 				  CLOCK_EVT_FEAT_ONESHOT,
-	evt->dev.set_mode	= axxia_timer_set_mode,
-	evt->dev.set_next_event	= axxia_timer_set_next_event,
+	evt->dev.set_next_event		= axxia_set_next_event,
+	evt->dev.set_state_shutdown	= axxia_shutdown,
+	evt->dev.set_state_periodic	= axxia_set_periodic,
+	evt->dev.set_state_oneshot	= axxia_set_oneshot,
 	evt->dev.rating		= 400,
 	evt->dev.name           = name;
 	evt->dev.irq            = irq;
-- 
1.9.1

