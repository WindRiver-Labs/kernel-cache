From 9dda24fc2105c17e775958ad1e76ab83b69e14ad Mon Sep 17 00:00:00 2001
From: Charlie Paul <cpaul.windriver@gmail.com>
Date: Thu, 27 Apr 2017 17:28:11 -0700
Subject: [PATCH 14/17] drivers/usb/core: fix over-current race condition

There exists a race condition when an over-current fault is cleared,
between the event processing in the hub_event function and the setting
of the event bits in the hub_irq function. When the over-current is
cleared the hub_event call tries to read the event bits, which havent
been set by the hub_irq.  In this patch when the over-current is
cleared the hub_event will check the event bits and if they are not
set it will pause and check again. It will sync the event bits.

Signed-off-by: Charlie Paul <cpaul.windriver@gmail.com>
---
 drivers/usb/core/hub.c |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index c8efb0f..2e47951 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -5014,8 +5014,8 @@ static void port_event(struct usb_hub *hub, int port1)
 		dev_dbg(&port_dev->dev, "over-current change\n");
 		usb_clear_port_feature(hdev, port1,
 				USB_PORT_FEAT_C_OVER_CURRENT);
-		msleep(100);	/* Cool down */
 		hub_power_on(hub, true);
+		msleep(100);	/* Cool down */
 		hub_port_status(hub, port1, &status, &unused);
 		if (status & USB_PORT_STAT_OVERCURRENT)
 			dev_err(&port_dev->dev, "over-current condition\n");
@@ -5132,6 +5132,7 @@ static void hub_event(struct work_struct *work)
 		hub->error = 0;
 	}
 
+
 	/* deal with port status changes */
 	for (i = 1; i <= hdev->maxchild; i++) {
 		struct usb_port *port_dev = hub->ports[i - 1];
@@ -5154,7 +5155,9 @@ static void hub_event(struct work_struct *work)
 			port_event(hub, i);
 			usb_unlock_port(port_dev);
 			pm_runtime_put_sync(&port_dev->dev);
-		}
+		} else
+			/* Wait for the hub_irq to finish then update the port status */
+			msleep(100);
 	}
 
 	/* deal with hub status changes */
-- 
1.7.5.4

