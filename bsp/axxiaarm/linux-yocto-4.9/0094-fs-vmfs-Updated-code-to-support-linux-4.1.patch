From 1dabd48ed33ea49b697fe550ef96e55409db2bd8 Mon Sep 17 00:00:00 2001
From: Charlie Paul <cpaul.windriver@gmail.com>
Date: Wed, 2 Sep 2015 23:12:58 -0700
Subject: [PATCH 094/213] fs/vmfs: Updated code to support linux 4.1

Changed the code to compile with 4.1 and updated design to
support 4.1 design.

Signed-off-by: Charlie Paul <cpaul.windriver@gmail.com>
---
 fs/vmfs/Makefile     |  4 +---
 fs/vmfs/cache.c      | 54 ----------------------------------------------------
 fs/vmfs/dir.c        | 53 +++++++++++++++++++++++++++++++++++++--------------
 fs/vmfs/file.c       |  2 --
 fs/vmfs/messagebox.c |  2 +-
 fs/vmfs/proto.h      |  3 ---
 fs/vmfs/vmfs_fs_i.h  |  4 +++-
 7 files changed, 44 insertions(+), 78 deletions(-)

diff --git a/fs/vmfs/Makefile b/fs/vmfs/Makefile
index c96cdd1..fa1d63b 100644
--- a/fs/vmfs/Makefile
+++ b/fs/vmfs/Makefile
@@ -4,11 +4,9 @@
 
 obj-$(CONFIG_VMFS_FS) += vmfsfs.o
 
-#vmfsfs-objs := proc.o dir.o cache.o inode.o file.o ioctl.o getopt.o \
+vmfsfs-objs := proc.o dir.o cache.o inode.o file.o ioctl.o getopt.o \
 		symlink.o messagebox.o msg.o vfs.o
 
-vmfsfs-objs := proc.o dir.o inode.o ioctl.o getopt.o \
-		symlink.o msg.o vfs.o
 
 # If you want debugging output, you may add these flags to the EXTRA_CFLAGS
 # VMFSFS_PARANOIA should normally be enabled.
diff --git a/fs/vmfs/cache.c b/fs/vmfs/cache.c
index 9729404..d7ac56d 100644
--- a/fs/vmfs/cache.c
+++ b/fs/vmfs/cache.c
@@ -81,60 +81,6 @@ void vmfs_invalidate_dircache_entries(struct dentry *parent)
 #endif
 }
 
-/*
- * dget, but require that fpos and parent matches what the dentry contains.
- * dentry is not known to be a valid pointer at entry.
- */
-struct dentry *vmfs_dget_fpos(struct dentry *dentry, struct dentry *parent,
-			      unsigned long fpos)
-{
-	struct dentry *dent = dentry;
-	struct list_head *next;
-
-	if (d_validate(dent, parent)) {
-		if (dent->d_name.len <= VMFS_MAXNAMELEN &&
-		    (unsigned long)dent->d_fsdata == fpos) {
-			if (!dent->d_inode) {
-				dput(dent);
-				dent = NULL;
-			}
-			return dent;
-		}
-		dput(dent);
-	}
-
-	/* If a pointer is invalid, we search the dentry. */
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 38)
-	spin_lock(&dcache_lock);
-#else
-	spin_lock(&parent->d_lock);
-#endif
-	next = parent->d_subdirs.next;
-	while (next != &parent->d_subdirs) {
-		dent = list_entry(next, struct dentry, d_child);
-		if ((unsigned long)dent->d_fsdata == fpos) {
-			if (dent->d_inode) {
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 38)
-				dget_locked(dent);
-#else
-				dget(dent);
-#endif
-			} else {
-				dent = NULL;
-			}
-			goto out_unlock;
-		}
-		next = next->next;
-	}
-	dent = NULL;
-out_unlock:
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 38)
-	spin_unlock(&dcache_lock);
-#else
-	spin_unlock(&parent->d_lock);
-#endif
-	return dent;
-}
 
 /*
  * Create dentry/inode for this file and add it to the dircache.
diff --git a/fs/vmfs/dir.c b/fs/vmfs/dir.c
index fd66ace..fdb19da 100644
--- a/fs/vmfs/dir.c
+++ b/fs/vmfs/dir.c
@@ -80,7 +80,7 @@ static int vmfs_rename(struct inode *, struct dentry *,
 static int vmfs_readdir(struct file *filp, struct dir_context *ctx)
 {
 	struct dentry *dentry = filp->f_path.dentry;
-	struct inode *dir = dentry->d_inode;
+	struct inode *dir = d_inode(dentry);
 	struct vmfs_sb_info *server = server_from_dentry(dentry);
 	union vmfs_dir_cache *cache = NULL;
 	struct vmfs_cache_control ctl;
@@ -155,14 +155,25 @@ static int vmfs_readdir(struct file *filp, struct dir_context *ctx)
 			struct dentry *dent;
 			int res;
 
-			dent = vmfs_dget_fpos(ctl.cache->dentry[ctl.idx],
-					      dentry, filp->f_pos);
-			if (!dent)
+			spin_lock(&dentry->d_lock);
+			if (!(VMFS_I(dir)->flags & VMFS_DIR_CACHE)) {
+				spin_unlock(&dentry->d_lock);
 				goto invalid_cache;
+			}
+			dent = ctl.cache->dentry[ctl.idx];
+			if (unlikely(!lockref_get_not_dead(&dent->d_lockref))) {
+				spin_unlock(&dentry->d_lock);
+				goto invalid_cache;
+			}
+			spin_unlock(&dentry->d_lock);
+			if (d_really_is_negative(dent)) {
+				dput(dent);
+				goto invalid_cache;
+			}
 
 			res = !dir_emit(ctx, dent->d_name.name,
 					dent->d_name.len,
-					dent->d_inode->i_ino, DT_UNKNOWN);
+					d_inode(dent)->i_ino, DT_UNKNOWN);
 			dput(dent);
 			if (res)
 				goto finished;
@@ -199,6 +210,9 @@ static int vmfs_readdir(struct file *filp, struct dir_context *ctx)
 	ctl.filled = 0;
 	ctl.valid = 1;
 read_really:
+	spin_lock(&dentry->d_lock);
+	VMFS_I(dir)->flags |= VMFS_DIR_CACHE;
+	spin_unlock(&dentry->d_lock);
 	result = server->ops->readdir(filp, ctx, &ctl);
 	if (result == -ERESTARTSYS && page)
 		ClearPageUptodate(page);
@@ -226,6 +240,14 @@ static int vmfs_readdir(struct file *filp, struct dir_context *ctx)
 	return result;
 }
 
+static void vmfs_d_prune(struct dentry *dentry)
+{
+	if (!dentry->d_fsdata)	/* not referenced from page cache */
+		return;
+	VMFS_I(d_inode(dentry->d_parent))->flags &= ~VMFS_DIR_CACHE;
+}
+
+
 static int vmfs_dir_open(struct inode *dir, struct file *file)
 {
 	struct dentry *dentry = file->f_path.dentry;
@@ -253,11 +275,14 @@ static int vmfs_dir_open(struct inode *dir, struct file *file)
 #else
 static int vmfs_delete_dentry(const struct dentry *);
 #endif
+static void vmfs_d_prune(struct dentry *dentry);
+
 
 
 static const struct dentry_operations vmfs__dentry_operations_case = {
 	.d_revalidate = vmfs_lookup_validate,
 	.d_delete = vmfs_delete_dentry,
+	.d_prune = vmfs_d_prune,
 };
 
 /*
@@ -266,7 +291,7 @@ static int vmfs_dir_open(struct inode *dir, struct file *file)
 static int vmfs_lookup_validate(struct dentry *dentry, unsigned int flags)
 {
 	struct vmfs_sb_info *server = server_from_dentry(dentry);
-	struct inode *inode = dentry->d_inode;
+	struct inode *inode = d_inode(dentry);
 	unsigned long age = jiffies - dentry->d_time;
 	int valid;
 
@@ -309,8 +334,8 @@ static int vmfs_lookup_validate(struct dentry *dentry, unsigned int flags)
 vmfs_delete_dentry(const struct dentry *dentry)
 #endif
 {
-	if (dentry->d_inode) {
-		if (is_bad_inode(dentry->d_inode)) {
+	if (d_inode(dentry)) {
+		if (is_bad_inode(d_inode(dentry))) {
 			PARANOIA("bad inode, unhashing %s/%s\n",
 				 DENTRY_PATH(dentry));
 			return 1;
@@ -502,7 +527,7 @@ static int vmfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
 
 static int vmfs_rmdir(struct inode *dir, struct dentry *dentry)
 {
-	struct inode *inode = dentry->d_inode;
+	struct inode *inode = d_inode(dentry);
 	int error;
 
 	VERBOSE("\n");
@@ -535,7 +560,7 @@ static int vmfs_unlink(struct inode *dir, struct dentry *dentry)
 	 * Close the file if it's open.
 	 */
 	mutex_lock(&vmfs_mutex);
-	vmfs_close(dentry->d_inode);
+	vmfs_close(d_inode(dentry));
 
 	vmfs_invalid_dir_cache(dir);
 	error = vmfs_proc_unlink(dentry);
@@ -558,10 +583,10 @@ static int vmfs_unlink(struct inode *dir, struct dentry *dentry)
 	 * target before attempting the rename.
 	 */
 	mutex_lock(&vmfs_mutex);
-	if (old_dentry->d_inode)
-		vmfs_close(old_dentry->d_inode);
-	if (new_dentry->d_inode) {
-		vmfs_close(new_dentry->d_inode);
+	if (d_inode(old_dentry))
+		vmfs_close(d_inode(old_dentry));
+	if (d_inode(new_dentry)) {
+		vmfs_close(d_inode(new_dentry));
 		error = vmfs_proc_unlink(new_dentry);
 		if (error) {
 			VERBOSE("unlink %s/%s, error=%d\n",
diff --git a/fs/vmfs/file.c b/fs/vmfs/file.c
index 4cde574..8efd992 100644
--- a/fs/vmfs/file.c
+++ b/fs/vmfs/file.c
@@ -451,8 +451,6 @@ static loff_t vmfs_remote_llseek(struct file *file, loff_t offset, int origin)
 #else
 	.llseek = remote_llseek,
 #endif
-	.read = new_sync_read,
-	.write = new_sync_write,
 	.read_iter = vmfs_file_read_iter,
 	.write_iter = vmfs_file_write_iter,
 	.unlocked_ioctl = vmfs_unlocked_ioctl,
diff --git a/fs/vmfs/messagebox.c b/fs/vmfs/messagebox.c
index ee3deb1..f000bb8 100644
--- a/fs/vmfs/messagebox.c
+++ b/fs/vmfs/messagebox.c
@@ -108,7 +108,7 @@ MessageBox *mb_new(phys_addr_t dev_base, uint32_t dev_irq)
 
 	/* Map the messagebox registers and buffer int VM */
 
-	if (check_mem_region(dev_base, MBOX_DEVICE_SIZE)) {
+	if (!request_mem_region(dev_base, MBOX_DEVICE_SIZE, "messagebox")) {
 		DEBUG1("i/o space at 0x%llx already in use\n", dev_base);
 		return NULL;
 	}
diff --git a/fs/vmfs/proto.h b/fs/vmfs/proto.h
index e02803d..e1f36f8 100644
--- a/fs/vmfs/proto.h
+++ b/fs/vmfs/proto.h
@@ -45,9 +45,6 @@ extern int vmfs_fill_cache(struct file *filp, struct dir_context *dirent,
 			   struct vmfs_fattr *entry);
 extern void vmfs_invalid_dir_cache(struct inode *dir);
 extern void vmfs_invalidate_dircache_entries(struct dentry *parent);
-extern struct dentry *vmfs_dget_fpos(struct dentry *dentry,
-				     struct dentry *parent,
-				     unsigned long fpos);
 /* inode.c */
 extern struct inode *vmfs_iget(struct super_block *sb,
 			       struct vmfs_fattr *fattr);
diff --git a/fs/vmfs/vmfs_fs_i.h b/fs/vmfs/vmfs_fs_i.h
index 34f0028..d634e78 100644
--- a/fs/vmfs/vmfs_fs_i.h
+++ b/fs/vmfs/vmfs_fs_i.h
@@ -30,7 +30,9 @@ struct vmfs_inode_info {
 	uint32_t vaccess;	/* access (VMFS_OPEN_ ) */
 	uint32_t vopen;		/* set to 1 when the file is open
 				   (why not use openers?) */
-
+	int	flags;
+#define VMFS_KLUDGE_SYMLINK	0x0001
+#define VMFS_DIR_CACHE		0x0002
 	struct inode vfs_inode;	/* must be at the end */
 
 };
-- 
1.9.1

