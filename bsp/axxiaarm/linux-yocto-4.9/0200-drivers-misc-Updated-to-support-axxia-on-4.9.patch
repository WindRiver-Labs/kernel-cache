From c6e771a98cc0f98e1907cadfa8e434509fc636cb Mon Sep 17 00:00:00 2001
From: Charlie Paul <cpaul.windriver@gmail.com>
Date: Thu, 19 Jan 2017 13:12:23 -0800
Subject: [PATCH 200/213] drivers/misc: Updated to support axxia on 4.9

This patch amends the axxia code to support Linux 4.9

Signed-off-by: Charlie Paul <cpaul.windriver@gmail.com>
---
 drivers/misc/axxia-oem.c | 41 ++++++++++++++++++++++++++++++-----------
 1 file changed, 30 insertions(+), 11 deletions(-)

diff --git a/drivers/misc/axxia-oem.c b/drivers/misc/axxia-oem.c
index 4db5c6c..fe56cd9 100644
--- a/drivers/misc/axxia-oem.c
+++ b/drivers/misc/axxia-oem.c
@@ -57,7 +57,7 @@ struct oem_parameters {
 		     "mov %x3, x3" : "=r" (p->reg0), "=r" (p->reg1),
 		     "=r" (p->reg2), "=r" (p->reg3));
 
-	return 0;
+	return;
 }
 
 /*
@@ -91,8 +91,9 @@ struct oem_parameters {
 {
 	char *input;
 	unsigned long mask;
+	int ret;
 
-	input = kmalloc(count, __GFP_WAIT);
+	input = kmalloc(count, __GFP_RECLAIMABLE);
 	memset(input, 0, count);
 
 	if (NULL == input)
@@ -101,9 +102,13 @@ struct oem_parameters {
 	if (copy_from_user(input, buffer, count))
 		return -EFAULT;
 
-	mask = kstrtoul(input, NULL, 0);
-	axxia_dspc_set_state((unsigned int)mask);
+	ret = kstrtoul(input, 0, &mask);
+	if (ret) {
+		pr_err("Failed axxia_dspc_write mask conversion\n");
+		return -EFAULT;
+	}
 
+	axxia_dspc_set_state((unsigned int)mask);
 	return count;
 }
 
@@ -144,8 +149,10 @@ struct oem_parameters {
 		      size_t count, loff_t *ppos)
 {
 	char *input;
+	unsigned long data = 0;
+	int ret = 0;
 
-	input = kmalloc(count, __GFP_WAIT);
+	input = kmalloc(count, __GFP_RECLAIMABLE);
 	memset(input, 0, count);
 
 	if (NULL == input)
@@ -154,7 +161,12 @@ struct oem_parameters {
 	if (copy_from_user(input, buffer, count))
 		return -EFAULT;
 
-	axxia_actlr_el3_set(kstrtoul(input, NULL, 0));
+	ret = kstrtoul(input, 0, &data);
+	if (ret) {
+		pr_err("axxia_actlr_el3_write failed conversion\n");
+		return ret;
+	}
+	axxia_actlr_el3_set(data);
 
 	return count;
 }
@@ -196,8 +208,10 @@ struct oem_parameters {
 		      size_t count, loff_t *ppos)
 {
 	char *input;
+	unsigned long data = 0;
+	int ret = 0;
 
-	input = kmalloc(count, __GFP_WAIT);
+	input = kmalloc(count, __GFP_RECLAIMABLE);
 	memset(input, 0, count);
 
 	if (NULL == input)
@@ -206,7 +220,12 @@ struct oem_parameters {
 	if (copy_from_user(input, buffer, count))
 		return -EFAULT;
 
-	axxia_actlr_el2_set(kstrtoul(input, NULL, 0));
+	ret = kstrtoul(input, 0, &data);
+	if (ret) {
+		pr_err("axxia_actlr_el2_write failed conversion\n");
+		return ret;
+	}
+	axxia_actlr_el2_set(data);
 
 	return count;
 }
@@ -267,7 +286,7 @@ struct oem_parameters {
 	if (0 != parameters.reg0)
 		pr_warn("Setting the DSP State Failed!\n");
 
-	return 0;
+	return;
 }
 EXPORT_SYMBOL(axxia_dspc_set_state);
 
@@ -308,7 +327,7 @@ struct oem_parameters {
 	if (0 != parameters.reg0)
 		pr_warn("Setting ACTLR_EL3 Failed!\n");
 
-	return 0;
+	return;
 }
 EXPORT_SYMBOL(axxia_actlr_el3_set);
 
@@ -349,7 +368,7 @@ struct oem_parameters {
 	if (0 != parameters.reg0)
 		pr_warn("Setting ACTLR_EL2 Failed!\n");
 
-	return 0;
+	return;
 }
 EXPORT_SYMBOL(axxia_actlr_el2_set);
 
-- 
1.9.1

