From 69d10eb81f86f2bfba5d086b18c5c736515dd0f5 Mon Sep 17 00:00:00 2001
From: Wang Hui <Hui.Wang@windriver.com>
Date: Fri, 18 Dec 2009 14:06:48 +0800
Subject: [PATCH 19/20] graphic/dvi: add dvi output driver

On omap3evm platform, it support dvi output, now add a driver for
dvi output.

Original patch taken from OMAP35x-PSP-SDK-02.01.01.08 package.
http://software-dl.ti.com/dsps/dsps_registered_sw/sdo_sb/ \
targetcontent/psp/omap35x/index.html

Signed-off-by: Wang Hui <Hui.Wang@windriver.com>
---
 arch/arm/mach-omap2/board-omap3evm.c |   11 ++
 drivers/video/omap/Kconfig           |   24 +++++
 drivers/video/omap/Makefile          |    1 +
 drivers/video/omap/panel-generic.c   |  171 ++++++++++++++++++++++++++++++++++
 4 files changed, 207 insertions(+), 0 deletions(-)
 create mode 100644 drivers/video/omap/panel-generic.c

diff --git a/arch/arm/mach-omap2/board-omap3evm.c b/arch/arm/mach-omap2/board-omap3evm.c
index af4bcb4..69f66cb 100644
--- a/arch/arm/mach-omap2/board-omap3evm.c
+++ b/arch/arm/mach-omap2/board-omap3evm.c
@@ -161,10 +161,17 @@ static int __init omap3_evm_i2c_init(void)
 	return 0;
 }
 
+#ifndef CONFIG_PANEL_GENERIC
 static struct platform_device omap3_evm_lcd_device = {
 	.name		= "omap3evm_lcd",
 	.id		= -1,
 };
+#else
+static struct platform_device omap3_evm_dvi_device = {
+	.name		= "generic_panel",
+	.id		= -1,
+};
+#endif
 
 static struct omap_lcd_config omap3_evm_lcd_config __initdata = {
 	.ctrl_name	= "internal",
@@ -230,7 +237,11 @@ static struct omap_board_config_kernel omap3_evm_config[] __initdata = {
 };
 
 static struct platform_device *omap3_evm_devices[] __initdata = {
+#ifndef CONFIG_PANEL_GENERIC
 	&omap3_evm_lcd_device,
+#else
+	&omap3_evm_dvi_device,
+#endif
 	&omap3evm_smc911x_device,
 };
 
diff --git a/drivers/video/omap/Kconfig b/drivers/video/omap/Kconfig
index 5ebd591..438f1fd 100644
--- a/drivers/video/omap/Kconfig
+++ b/drivers/video/omap/Kconfig
@@ -95,4 +95,28 @@ config FB_OMAP_DMA_TUNE
           answer yes. Answer no if you have a dedicated video
           memory, or don't use any of the accelerated features.
 
+config PANEL_GENERIC
+        tristate "Generic Panel"
+	depends on FB_OMAP && ARCH_OMAP3
+	default N
+        help
+	  Generic panel driver.
+	  Used for DVI output for Beagle and OMAP3 SDP/EVM.
+choice
+	prompt "Resolution"
+	depends on PANEL_GENERIC
+	default RES_480P
+
+config RES_480P
+	bool "Use 480P resolution"
+	help
+	  Select this option if you want to use the 480P (720x480)
+	  resolution on DVI output.
+
+config RES_720P
+	bool "Use 720P resolution"
+	help
+	  Select this option if you want to use the 720P (1280x720)
+	  resolution on DVI output.
+endchoice
 
diff --git a/drivers/video/omap/Makefile b/drivers/video/omap/Makefile
index 291c46e..8471013 100644
--- a/drivers/video/omap/Makefile
+++ b/drivers/video/omap/Makefile
@@ -33,6 +33,7 @@ objs-y$(CONFIG_MACH_OMAP_2430SDP) += lcd_2430sdp.o
 objs-y$(CONFIG_MACH_OMAP_3430SDP) += lcd_2430sdp.o
 objs-y$(CONFIG_MACH_OMAP2EVM) += lcd_omap2evm.o
 objs-y$(CONFIG_MACH_OMAP3EVM) += lcd_omap3evm.o
+objs-$(CONFIG_MACH_OMAP3EVM)$(CONFIG_PANEL_GENERIC) += panel-generic.o
 objs-y$(CONFIG_MACH_OMAP3_BEAGLE) += lcd_omap3beagle.o
 objs-y$(CONFIG_FB_OMAP_LCD_MIPID) += lcd_mipid.o
 objs-y$(CONFIG_MACH_OVERO) += lcd_overo.o
diff --git a/drivers/video/omap/panel-generic.c b/drivers/video/omap/panel-generic.c
new file mode 100644
index 0000000..a8cf87a
--- /dev/null
+++ b/drivers/video/omap/panel-generic.c
@@ -0,0 +1,171 @@
+/*
+ * Generic panel support
+ *
+ * Copyright (C) 2008 Nokia Corporation
+ * Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/i2c/twl4030.h>
+
+#include <mach/gpio.h>
+#include <mach/mux.h>
+#include <mach/omapfb.h>
+#include <asm/mach-types.h>
+
+#define ENABLE_VPLL2_DEDICATED	0x05
+#define ENABLE_VPLL2_DEV_GRP	0xE0
+
+#define TWL4030_PLL2_DEDICATED	0x36
+#define TWL4030_VPLL2_DEV_GRP	0x33
+#define TWL4030_LED_EN		0x0
+
+#define TWL_PWMA_PWMAOFF	0x01
+
+static int generic_panel_init(struct lcd_panel *panel,
+				struct omapfb_device *fbdev)
+{
+	return 0;
+}
+
+static void generic_panel_cleanup(struct lcd_panel *panel)
+{
+}
+
+static int generic_panel_enable(struct lcd_panel *panel)
+{
+#if defined(CONFIG_TWL4030_CORE)
+	if (system_rev > OMAP3430_REV_ES1_0) {
+		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
+			ENABLE_VPLL2_DEDICATED, TWL4030_PLL2_DEDICATED);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER,
+			ENABLE_VPLL2_DEV_GRP, TWL4030_VPLL2_DEV_GRP);
+		twl4030_i2c_write_u8(TWL4030_MODULE_LED, 0x10, TWL4030_LED_EN);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PWMA, 70, TWL_PWMA_PWMAOFF);
+	}
+	twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0x80,
+			REG_GPIODATADIR1);
+	twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0x80,
+			REG_GPIODATAOUT1);
+#endif
+	return 0;
+}
+
+static void generic_panel_disable(struct lcd_panel *panel)
+{
+#if defined(CONFIG_TWL4030_CORE)
+	if (system_rev > OMAP3430_REV_ES1_0) {
+		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER, 0x0,
+				TWL4030_PLL2_DEDICATED);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PM_RECEIVER, 0x0,
+				TWL4030_VPLL2_DEV_GRP);
+		twl4030_i2c_write_u8(TWL4030_MODULE_LED, 0x11, TWL4030_LED_EN);
+		twl4030_i2c_write_u8(TWL4030_MODULE_PWMA, 0, TWL_PWMA_PWMAOFF);
+	}
+
+	twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0x00,
+			REG_GPIODATADIR1);
+	twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0x00,
+			REG_GPIODATAOUT1);
+#endif
+}
+
+static unsigned long generic_panel_get_caps(struct lcd_panel *panel)
+{
+	return 0;
+}
+
+static struct lcd_panel generic_panel = {
+	.name		= "panel-generic",
+	.init		= generic_panel_init,
+	.cleanup	= generic_panel_cleanup,
+	.enable		= generic_panel_enable,
+	.disable	= generic_panel_disable,
+	.get_caps	= generic_panel_get_caps,
+		/* 1280 x 720 @ 60 Hz  Reduced blanking VESA CVT 0.31M3-R */
+#if defined(CONFIG_RES_720P)
+		.x_res		= 1280,
+		.y_res		= 720,
+		.pixel_clock	= 74250,
+		.hfp		= 0x3F,
+		.hsw		= 0x31,
+		.hbp		= 0xFF,
+		.vfp		= 0x5,
+		.vsw		= 0x4,
+		.vbp		= 0x14,
+#elif defined(CONFIG_RES_480P)
+		/* 720 x 480 @ 60 Hz  Reduced blanking VESA CVT 0.31M3-R */
+		.x_res		= 720,
+		.y_res		= 480,
+		.pixel_clock	= 27700,
+		.hfp		= 24,
+		.hsw		= 40,
+		.hbp		= 96,
+		.vfp		= 10,
+		.vsw		= 3,
+		.vbp		= 32,
+#endif
+	.data_lines	= 24,
+	.bpp		= 16,
+	.config		= OMAP_LCDC_PANEL_TFT,
+};
+
+static int generic_panel_probe(struct platform_device *pdev)
+{
+	omapfb_register_panel(&generic_panel);
+	return 0;
+}
+
+static int generic_panel_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static int generic_panel_suspend(struct platform_device *pdev,
+				   pm_message_t mesg)
+{
+	return 0;
+}
+
+static int generic_panel_resume(struct platform_device *pdev)
+{
+	return 0;
+}
+
+struct platform_driver generic_panel_driver = {
+	.probe		= generic_panel_probe,
+	.remove		= generic_panel_remove,
+	.suspend	= generic_panel_suspend,
+	.resume		= generic_panel_resume,
+	.driver		= {
+		.name	= "generic_panel",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init generic_panel_drv_init(void)
+{
+	return platform_driver_register(&generic_panel_driver);
+}
+
+static void __exit generic_panel_drv_exit(void)
+{
+	platform_driver_unregister(&generic_panel_driver);
+}
+
+module_init(generic_panel_drv_init);
+module_exit(generic_panel_drv_exit);
+MODULE_LICENSE("GPL");
-- 
1.6.5.2

