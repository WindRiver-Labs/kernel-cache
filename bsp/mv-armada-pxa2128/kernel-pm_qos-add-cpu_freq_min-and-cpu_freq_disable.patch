From b0e2cf55ed58e84ed54c48a3da8b9f6a61ff70cb Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Wed, 28 Aug 2013 14:26:28 +0800
Subject: [PATCH 33/60] kernel: pm_qos: add cpu_freq_min and cpu_freq_disable

Original patches come from M5.3.12.5.4_sources.
Devices need to express their constraints to set minimal frequency or disable
frequency change completely. Such constraints can be implemented in the PM QOS
framework. Add two new types in pm_qos to support such constraints.

Signed-off-by: Ning Jiang <ning.jiang@marvell.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/mach-mmp/pm-hotplug.c |   12 +---
 arch/arm/mach-mmp/suspend.c    |    5 --
 include/linux/pm_qos.h         |   18 +++++
 kernel/power/qos.c             |  143 +++++++++++++++++++++++++++++++++++++++-
 4 files changed, 163 insertions(+), 15 deletions(-)

diff --git a/arch/arm/mach-mmp/pm-hotplug.c b/arch/arm/mach-mmp/pm-hotplug.c
index 7798024..7f34974 100644
--- a/arch/arm/mach-mmp/pm-hotplug.c
+++ b/arch/arm/mach-mmp/pm-hotplug.c
@@ -26,7 +26,7 @@
 #include <linux/reboot.h>
 #include <linux/gpio.h>
 #include <linux/cpufreq.h>
-#include <linux/pm_qos_params.h>
+#include <linux/pm_qos.h>
 
 #ifdef CONFIG_CORE_MORPHING
 #include <mach/mmp_cm.h>
@@ -241,9 +241,8 @@ static struct notifier_block hotplug_constraint_notifier = {
 	.notifier_call = hotplug_constraint_notify,
 };
 
-static struct kobject hotplug_kobj;
-struct pm_qos_request_list min_cpu_req;
-struct pm_qos_request_list max_cpu_req;
+struct pm_qos_request min_cpu_req;
+struct pm_qos_request max_cpu_req;
 
 static u32 parse_arg(const char *buf, size_t count)
 {
@@ -396,11 +395,6 @@ static struct attribute *hotplug_attributes[] = {
 	NULL,
 };
 
-static struct kobj_type hotplug_dir_ktype = {
-	.sysfs_ops	= &kobj_sysfs_ops,
-	.default_attrs	= hotplug_attributes,
-};
-
 static int __init mmp_pm_hotplug_init(void)
 {
 #ifdef CONFIG_CORE_MORPHING
diff --git a/arch/arm/mach-mmp/suspend.c b/arch/arm/mach-mmp/suspend.c
index dd117d0..ba482a7 100644
--- a/arch/arm/mach-mmp/suspend.c
+++ b/arch/arm/mach-mmp/suspend.c
@@ -9,7 +9,6 @@
 #include <linux/cpuidle.h>
 #include <linux/irq.h>
 #include <linux/interrupt.h>
-#include <linux/pm_qos_params.h>
 
 #include <asm/proc-fns.h>
 #include <mach/hardware.h>
@@ -20,7 +19,6 @@
 #include <mach/system.h>
 
 static unsigned long pm_state;
-static struct pm_qos_request_list cpu_max_num_req;
 
 int mmp3_set_wake(struct irq_data *data, unsigned int on)
 {
@@ -65,7 +63,6 @@ static int mmp3_pm_enter(suspend_state_t state)
  */
 static int mmp3_pm_prepare(void)
 {
-	pm_qos_update_request(&cpu_max_num_req, 1);
 	return 0;
 }
 
@@ -74,7 +71,6 @@ static int mmp3_pm_prepare(void)
  */
 static void mmp3_pm_finish(void)
 {
-	pm_qos_update_request(&cpu_max_num_req, PM_QOS_DEFAULT_VALUE);
 	pm_state = PM_SUSPEND_ON;
 }
 
@@ -111,7 +107,6 @@ static struct platform_suspend_ops mmp3_pm_ops = {
 static int __init mmp3_suspend_init(void)
 {
 	suspend_set_ops(&mmp3_pm_ops);
-	pm_qos_add_request(&cpu_max_num_req, PM_QOS_MAX_ONLINE_CPUS, PM_QOS_DEFAULT_VALUE);
 	return 0;
 }
 
diff --git a/include/linux/pm_qos.h b/include/linux/pm_qos.h
index 233149c..b015c24 100644
--- a/include/linux/pm_qos.h
+++ b/include/linux/pm_qos.h
@@ -15,6 +15,19 @@ enum {
 	PM_QOS_CPU_DMA_LATENCY,
 	PM_QOS_NETWORK_LATENCY,
 	PM_QOS_NETWORK_THROUGHPUT,
+	PM_QOS_CPUFREQ_MIN,
+	PM_QOS_CPUFREQ_DISABLE,
+#ifdef CONFIG_HOTPLUG_CPU
+	PM_QOS_MIN_ONLINE_CPUS,
+	PM_QOS_MAX_ONLINE_CPUS,
+	PM_QOS_DISABLE_HP,
+#endif
+	PM_QOS_CPUIDLE_KEEP_AXI,
+	PM_QOS_CPUIDLE_KEEP_DDR,
+	PM_QOS_CPUIDLE_KEEP_VCTCXO,
+#ifdef CONFIG_DDR_DEVFREQ
+	PM_QOS_DDR_DEVFREQ_MIN,
+#endif
 
 	/* insert new class ID */
 	PM_QOS_NUM_CLASSES,
@@ -26,6 +39,11 @@ enum {
 #define PM_QOS_NETWORK_LAT_DEFAULT_VALUE	(2000 * USEC_PER_SEC)
 #define PM_QOS_NETWORK_THROUGHPUT_DEFAULT_VALUE	0
 #define PM_QOS_DEV_LAT_DEFAULT_VALUE		0
+#define PM_QOS_MIN_ONLINE_CPUS_DEFAULT_VALUE	1
+#define PM_QOS_MAX_ONLINE_CPUS_DEFAULT_VALUE	LONG_MAX
+#define PM_QOS_CPU_FREQ_MIN_DEFAULT_VALUE	0
+#define PM_QOS_CPU_FREQ_MAX_DEFAULT_VALUE	LONG_MAX
+
 
 struct pm_qos_request {
 	struct plist_node node;
diff --git a/kernel/power/qos.c b/kernel/power/qos.c
index 6a031e6..8da382e 100644
--- a/kernel/power/qos.c
+++ b/kernel/power/qos.c
@@ -100,12 +100,153 @@ static struct pm_qos_object network_throughput_pm_qos = {
 	.name = "network_throughput",
 };
 
+static BLOCKING_NOTIFIER_HEAD(cpu_freq_min_notifier);
+static struct pm_qos_constraints cpu_freq_min_constraints = {
+	.list = PLIST_HEAD_INIT(cpu_freq_min_constraints.list),
+	.default_value = 0,
+	.target_value = 0,
+	.type = PM_QOS_MAX,
+	.notifiers = &cpu_freq_min_notifier,
+};
+
+static struct pm_qos_object cpu_freq_min_pm_qos = {
+	.constraints = &cpu_freq_min_constraints,
+	.name = "cpu_freq_min",
+};
+
+static BLOCKING_NOTIFIER_HEAD(cpu_freq_disable_notifier);
+static struct pm_qos_constraints cpu_freq_disable_constraints = {
+	.list = PLIST_HEAD_INIT(cpu_freq_disable_constraints.list),
+	.default_value = 0,
+	.target_value = 0,
+	.type = PM_QOS_MAX,
+	.notifiers = &cpu_freq_disable_notifier,
+};
+
+static struct pm_qos_object cpu_freq_disable_pm_qos = {
+	.constraints = &cpu_freq_disable_constraints,
+	.name = "cpu_freq_disable",
+};
+
+#ifdef CONFIG_HOTPLUG_CPU
+static BLOCKING_NOTIFIER_HEAD(min_online_cpus_notifier);
+static struct pm_qos_constraints min_online_cpus_constraints = {
+	.list = PLIST_HEAD_INIT(min_online_cpus_constraints.list),
+	.target_value = PM_QOS_MIN_ONLINE_CPUS_DEFAULT_VALUE,
+	.default_value = PM_QOS_MIN_ONLINE_CPUS_DEFAULT_VALUE,
+	.type = PM_QOS_MAX,
+	.notifiers = &min_online_cpus_notifier,
+};
+
+static struct pm_qos_object min_online_cpus_pm_qos = {
+	.constraints = &cpu_freq_disable_constraints,
+	.name = "min_online_cpus",
+};
+
+static BLOCKING_NOTIFIER_HEAD(max_online_cpus_notifier);
+static struct pm_qos_constraints max_online_cpus_constraints = {
+	.list = PLIST_HEAD_INIT(max_online_cpus_constraints.list),
+	.target_value = PM_QOS_MIN_ONLINE_CPUS_DEFAULT_VALUE,
+	.target_value = PM_QOS_MAX_ONLINE_CPUS_DEFAULT_VALUE,
+	.default_value = PM_QOS_MAX_ONLINE_CPUS_DEFAULT_VALUE,
+	.type = PM_QOS_MIN,
+	.notifiers = &max_online_cpus_notifier,
+};
+static struct pm_qos_object max_online_cpus_pm_qos = {
+	.constraints = &max_online_cpus_constraints,
+	.name = "max_online_cpus",
+};
+
+static BLOCKING_NOTIFIER_HEAD(disable_hotplug_notifier);
+static struct pm_qos_constraints disable_hotplug_constraints = {
+	.list = PLIST_HEAD_INIT(disable_hotplug_constraints.list),
+	.target_value = 0,
+	.default_value = 0,
+	.type = PM_QOS_MAX,
+	.notifiers = &disable_hotplug_notifier,
+};
+static struct pm_qos_object disable_hotplug_pm_qos = {
+	.name = "disable_hotplug",
+	.constraints = &disable_hotplug_constraints,
+};
+
+#endif
+
+static BLOCKING_NOTIFIER_HEAD(cpuidle_keep_axi_notifier);
+static struct pm_qos_constraints cpuidle_keep_axi_constraints = {
+	.list = PLIST_HEAD_INIT(cpuidle_keep_axi_constraints.list),
+	.default_value = 0,
+	.target_value = 0,
+	.type = PM_QOS_MAX,
+	.notifiers = &cpuidle_keep_axi_notifier,
+};
+static struct pm_qos_object cpuidle_keep_axi_qos = {
+	.name = "cpuidle_keep_axi",
+	.constraints = &cpuidle_keep_axi_constraints,
+};
+
+static BLOCKING_NOTIFIER_HEAD(cpuidle_keep_ddr_notifier);
+static struct pm_qos_constraints cpuidle_keep_ddr_constraints = {
+	.list = PLIST_HEAD_INIT(cpuidle_keep_ddr_constraints.list),
+	.default_value = 0,
+	.target_value = 0,
+	.type = PM_QOS_MAX,
+	.notifiers = &cpuidle_keep_ddr_notifier,
+};
+static struct pm_qos_object cpuidle_keep_ddr_qos = {
+	.name = "cpuidle_keep_ddr",
+	.constraints = &cpuidle_keep_ddr_constraints,
+};
+
+static BLOCKING_NOTIFIER_HEAD(cpuidle_keep_vctcxo_notifier);
+static struct pm_qos_constraints cpuidle_keep_vctcxo_constraints = {
+	.list = PLIST_HEAD_INIT(cpuidle_keep_vctcxo_constraints.list),
+	.default_value = 0,
+	.target_value = 0,
+	.type = PM_QOS_MAX,
+	.notifiers = &cpuidle_keep_vctcxo_notifier,
+};
+static struct pm_qos_object cpuidle_keep_vctcxo_qos = {
+	.name = "cpuidle_keep_vctcxo",
+	.constraints = &cpuidle_keep_vctcxo_constraints,
+};
+
+#ifdef CONFIG_DDR_DEVFREQ
+static BLOCKING_NOTIFIER_HEAD(ddr_devfreq_min_notifier);
+static struct pm_qos_constraints ddr_devfreq_min_constraints = {
+	.list = PLIST_HEAD_INIT(ddr_devfreq_min_constraints.list),
+	.target_value = 0,
+	.default_value = 0,
+	.type = PM_QOS_MAX,
+	.notifiers = &ddr_devfreq_min_notifier,
+};
+static struct pm_qos_object ddr_devfreq_min_pm_qos = {
+	.name = "ddr_devfreq_min",
+	.constraints = &ddr_devfreq_min_constraints,
+};
+#endif
+
+
 
 static struct pm_qos_object *pm_qos_array[] = {
 	&null_pm_qos,
 	&cpu_dma_pm_qos,
 	&network_lat_pm_qos,
-	&network_throughput_pm_qos
+	&network_throughput_pm_qos,
+	&cpu_freq_min_pm_qos,
+	&cpu_freq_disable_pm_qos,
+#ifdef CONFIG_HOTPLUG_CPU
+	&min_online_cpus_pm_qos,
+	&max_online_cpus_pm_qos,
+	&disable_hotplug_pm_qos,
+#endif
+	&cpuidle_keep_axi_qos,
+	&cpuidle_keep_ddr_qos,
+	&cpuidle_keep_vctcxo_qos,
+
+#ifdef CONFIG_DDR_DEVFREQ
+	&ddr_devfreq_min_pm_qos,
+#endif
 };
 
 static ssize_t pm_qos_power_write(struct file *filp, const char __user *buf,
-- 
1.7.5.4

