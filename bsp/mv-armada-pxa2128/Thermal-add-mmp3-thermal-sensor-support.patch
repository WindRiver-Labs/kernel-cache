From a16c1667653130a95b9d197c55331c7c316263af Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Mon, 5 Aug 2013 14:54:33 +0800
Subject: [PATCH 36/60] Thermal: add mmp3 thermal sensor support

Original patches come from M5.3.12.5.4_sources, which version is
3.0.31. This patch forward-ports the driver to WRLinux 3.4.x for
mmp3.

Signed-off-by: Lei Wen <leiwen@marvell.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/thermal/Kconfig        |    6 ++
 drivers/thermal/Makefile       |    3 +-
 drivers/thermal/mmp3_thermal.c |  196 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 204 insertions(+), 1 deletions(-)
 create mode 100644 drivers/thermal/mmp3_thermal.c

diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index 514a691..6e69062 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -26,3 +26,9 @@ config SPEAR_THERMAL
 	help
 	  Enable this to plug the SPEAr thermal sensor driver into the Linux
 	  thermal framework
+
+config MMP3_THERMAL
+	bool "MMP3 Thermal interface support"
+	depends on THERMAL && CPU_MMP3
+	help
+	  Adds thermal management for MMP3.
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index a9fff0b..14e069c 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -3,4 +3,5 @@
 #
 
 obj-$(CONFIG_THERMAL)		+= thermal_sys.o
-obj-$(CONFIG_SPEAR_THERMAL)		+= spear_thermal.o
\ No newline at end of file
+obj-$(CONFIG_SPEAR_THERMAL)		+= spear_thermal.o
+obj-$(CONFIG_MMP3_THERMAL)	+= mmp3_thermal.o
diff --git a/drivers/thermal/mmp3_thermal.c b/drivers/thermal/mmp3_thermal.c
new file mode 100644
index 0000000..2f20684
--- /dev/null
+++ b/drivers/thermal/mmp3_thermal.c
@@ -0,0 +1,196 @@
+/*
+ * Copyright 2012 Marvell Semiconductor, Inc.
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+/* MMP3 Thermal Implementation */
+
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/types.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/thermal.h>
+#include <linux/io.h>
+#include <linux/syscalls.h>
+#include <linux/cpufreq.h>
+#include <linux/smp.h>
+#include <mach/regs-apbc.h>
+
+/* This function decode 4bit long number of gray code into original binary */
+static int gray_decode(unsigned int gray)
+{
+	int num, i, tmp;
+
+	if (gray >= 16)
+		return 0;
+
+	num = gray & 0x8;
+	tmp = num >> 3;
+	for (i = 2; i >= 0; i --) {
+		tmp = ((gray & (1 << i)) >> i) ^ tmp;
+		num |= tmp << i;
+	}
+
+	return num;
+}
+
+unsigned long read_temperature_sensor(int index)
+{
+	int i;
+	unsigned long data;
+
+	__raw_writel(readl(CPBC_REG(index * 4)) | (1 << 27),
+			CPBC_REG(index * 4));
+	__raw_writel(readl(CPBC_REG(index * 4)) | (1 << 30),
+			CPBC_REG(index * 4));
+	for (i = 0; i < 1000; i++) {
+		if (readl(CPBC_REG(index * 4)) & (1 << 29))
+			break;
+		udelay(1000);
+	}
+	if (i == 1000)
+		printk(KERN_EMERG "timeout to get sensor %d temperature!\n",
+				index);
+
+	data = readl(CPBC_REG(index * 4)) & 0xf;
+
+	return gray_decode(data) * 5 / 2 + 26;
+}
+EXPORT_SYMBOL(read_temperature_sensor);
+
+static int th_sys_get_temp(struct thermal_zone_device *thermal,
+		unsigned long *temp)
+{
+	*temp = (read_temperature_sensor(0) +
+			read_temperature_sensor(1) +
+			read_temperature_sensor(2)) / 3;
+
+	return 0;
+}
+
+static int th_sys_get_mode(struct thermal_zone_device *thermal,
+		enum thermal_device_mode *mode)
+{
+	*mode = THERMAL_DEVICE_ENABLED;
+	return 0;
+}
+
+static int th_sys_get_trip_type(struct thermal_zone_device *thermal, int trip,
+		enum thermal_trip_type *type)
+{
+	return 0;
+}
+
+static int th_sys_get_trip_temp(struct thermal_zone_device *thermal, int trip,
+		unsigned long *temp)
+{
+	return 0;
+}
+
+static int th_sys_get_crit_temp(struct thermal_zone_device *thermal,
+		unsigned long *temp)
+{
+	return -EINVAL;
+}
+
+static struct thermal_zone_device_ops g_dev_ops = {
+	.get_temp = th_sys_get_temp,
+	.get_mode = th_sys_get_mode,
+	.get_trip_type = th_sys_get_trip_type,
+	.get_trip_temp = th_sys_get_trip_temp,
+	.get_crit_temp = th_sys_get_crit_temp,
+};
+
+static irqreturn_t thermal_irq(int irq, void *devid)
+{
+	int i;
+	for (i = 0; i < 4; i ++)
+		__raw_writel(readl(CPBC_REG(i * 4)) | 0x92000000,
+				CPBC_REG(i *4));
+	return IRQ_HANDLED;
+}
+
+#define MMP3_THERMAL_POLLING_FREQUENCY_MS 1000
+static struct thermal_zone_device      *therm_dev;
+static int mmp3_thermal_probe(struct platform_device *pdev)
+{
+	int ret = 0, irq;
+	struct clk* therclk;
+
+	therclk = clk_get(NULL, "THERMALCLK");
+	if (IS_ERR(therclk)) {
+		printk(KERN_ERR "Could not get thermal clock\n");
+		return PTR_ERR(therclk);
+	}
+
+	clk_enable(therclk);
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_err(&pdev->dev, "no IRQ resource defined\n");
+		return -ENXIO;
+	}
+
+	ret = request_irq(irq, thermal_irq, IRQF_DISABLED,
+			  pdev->name, NULL);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "failed to request IRQ\n");
+		return -ENXIO;
+	}
+
+	therm_dev = thermal_zone_device_register(
+			"mmp3-temp_sens", 4,
+			NULL, &g_dev_ops, 0, 0, MMP3_THERMAL_POLLING_FREQUENCY_MS, 0);
+
+	if (IS_ERR(therm_dev)) {
+		pr_err("Failed to register thermal zone device\n");
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static int mmp3_thermal_remove(struct platform_device *pdev)
+{
+	thermal_zone_device_unregister(therm_dev);
+	pr_info("MMP3: Kernel Thermal management unregistered\n");
+
+	return 0;
+}
+
+static struct platform_driver mmp3_thermal_driver = {
+	.driver = {
+		.name	= "mmp-thermal",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= mmp3_thermal_probe,
+	.remove		= mmp3_thermal_remove,
+};
+
+static int __init mmp3_thermal_init(void)
+{
+	return platform_driver_register(&mmp3_thermal_driver);
+}
+
+static void __exit mmp3_thermal_exit(void)
+{
+	platform_driver_unregister(&mmp3_thermal_driver);
+}
+
+module_init(mmp3_thermal_init);
+module_exit(mmp3_thermal_exit);
+
+MODULE_AUTHOR("Marvell Semiconductor");
+MODULE_DESCRIPTION("MMP3 SoC thermal driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:mmp3-thermal");
-- 
1.7.5.4

