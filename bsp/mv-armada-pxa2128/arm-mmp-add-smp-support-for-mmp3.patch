From 8bf04ea187a1d2887d2d4950b7067ae4dec2834f Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Mon, 19 Aug 2013 22:37:42 +0800
Subject: [PATCH 11/60] arm: mmp: add smp support for mmp3

Original patches come from M5.3.12.5.4_sources, and give
a basic support for smp boot.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/include/asm/hardirq.h  |    4 ++
 arch/arm/include/asm/irq.h      |    5 +++
 arch/arm/include/asm/mach/map.h |    5 +++
 arch/arm/include/asm/smp.h      |    4 ++
 arch/arm/kernel/process.c       |   12 ++++++
 arch/arm/kernel/smp.c           |   73 +++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-mmp/pm-mmp3.c     |    9 -----
 7 files changed, 103 insertions(+), 9 deletions(-)

diff --git a/arch/arm/include/asm/hardirq.h b/arch/arm/include/asm/hardirq.h
index 436e60b..e1ef481 100644
--- a/arch/arm/include/asm/hardirq.h
+++ b/arch/arm/include/asm/hardirq.h
@@ -5,7 +5,11 @@
 #include <linux/threads.h>
 #include <asm/irq.h>
 
+#ifdef CONFIG_CPU_MMP3
+#define NR_IPI	7
+#else
 #define NR_IPI	5
+#endif
 
 typedef struct {
 	unsigned int __softirq_pending;
diff --git a/arch/arm/include/asm/irq.h b/arch/arm/include/asm/irq.h
index 35c21c3..e86f720 100644
--- a/arch/arm/include/asm/irq.h
+++ b/arch/arm/include/asm/irq.h
@@ -30,6 +30,11 @@ extern void asm_do_IRQ(unsigned int, struct pt_regs *);
 void handle_IRQ(unsigned int, struct pt_regs *);
 void init_IRQ(void);
 
+#ifdef CONFIG_CPU_MMP3
+void arch_trigger_all_cpu_backtrace(void);
+#define arch_trigger_all_cpu_backtrace arch_trigger_all_cpu_backtrace
+#endif
+
 #endif
 
 #endif
diff --git a/arch/arm/include/asm/mach/map.h b/arch/arm/include/asm/mach/map.h
index a6efcdd..19e63f2 100644
--- a/arch/arm/include/asm/mach/map.h
+++ b/arch/arm/include/asm/mach/map.h
@@ -9,6 +9,9 @@
  *
  *  Page table mapping constructs and function prototypes
  */
+#ifndef ASMARM_MACH_MAP_H
+#define ASMARM_MACH_MAP_H
+
 #include <asm/io.h>
 
 struct map_desc {
@@ -45,3 +48,5 @@ extern int ioremap_page(unsigned long virt, unsigned long phys,
 #else
 #define iotable_init(map,num)	do { } while (0)
 #endif
+
+#endif
diff --git a/arch/arm/include/asm/smp.h b/arch/arm/include/asm/smp.h
index f79a9f5..9405b8a 100644
--- a/arch/arm/include/asm/smp.h
+++ b/arch/arm/include/asm/smp.h
@@ -126,4 +126,8 @@ struct smp_operations {
  */
 extern void smp_set_ops(struct smp_operations *);
 
+#ifdef CONFIG_CPU_MMP3
+extern void smp_send_all_cpu_backtrace(void);
+#endif
+
 #endif /* ifndef __ASM_ARM_SMP_H */
diff --git a/arch/arm/kernel/process.c b/arch/arm/kernel/process.c
index 3a19163..27343ef 100644
--- a/arch/arm/kernel/process.c
+++ b/arch/arm/kernel/process.c
@@ -63,6 +63,18 @@ extern void setup_mm_for_reboot(void);
 
 static volatile int hlt_counter;
 
+#ifdef CONFIG_SMP
+void arch_trigger_all_cpu_backtrace(void)
+{
+	smp_send_all_cpu_backtrace();
+}
+#else
+void arch_trigger_all_cpu_backtrace(void)
+{
+	dump_stack();
+}
+#endif
+
 void disable_hlt(void)
 {
 	hlt_counter++;
diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index 73a4f66..b2464f3 100644
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -57,6 +57,10 @@ enum ipi_msg_type {
 	IPI_CALL_FUNC,
 	IPI_CALL_FUNC_SINGLE,
 	IPI_CPU_STOP,
+#ifdef CONFIG_CPU_MMP3
+	IPI_CPU_BACKTRACE,
+	IPI_CPU_SYNC_COHERENCY,
+#endif
 };
 
 static DECLARE_COMPLETION(cpu_running);
@@ -456,6 +460,10 @@ static const char *ipi_types[NR_IPI] = {
 	S(IPI_CALL_FUNC, "Function call interrupts"),
 	S(IPI_CALL_FUNC_SINGLE, "Single function call interrupts"),
 	S(IPI_CPU_STOP, "CPU stop interrupts"),
+#ifdef CONFIG_CPU_MMP3
+	S(IPI_CPU_BACKTRACE, "CPU backtrace"),
+	S(IPI_CPU_SYNC_COHERENCY, "CPU sync coherency"),
+#endif
 };
 
 void show_ipi_list(struct seq_file *p, int prec)
@@ -590,6 +598,62 @@ static void ipi_cpu_stop(unsigned int cpu)
 		cpu_relax();
 }
 
+#ifdef CONFIG_CPU_MMP3
+static cpumask_t backtrace_mask;
+static DEFINE_RAW_SPINLOCK(backtrace_lock);
+
+/* "in progress" flag of arch_trigger_all_cpu_backtrace */
+static unsigned long backtrace_flag;
+
+void smp_send_all_cpu_backtrace(void)
+{
+	unsigned int this_cpu = smp_processor_id();
+	int i;
+
+	if (test_and_set_bit(0, &backtrace_flag))
+		/*
+		 * If there is already a trigger_all_cpu_backtrace() in progress
+		 * (backtrace_flag == 1), don't output double cpu dump infos.
+		 */
+		return;
+
+	cpumask_copy(&backtrace_mask, cpu_online_mask);
+	cpu_clear(this_cpu, backtrace_mask);
+
+	pr_info("Backtrace for cpu %d (current):\n", this_cpu);
+	dump_stack();
+
+	pr_info("\nsending IPI to all other CPUs:\n");
+	smp_cross_call(&backtrace_mask, IPI_CPU_BACKTRACE);
+
+	/* Wait for up to 10 seconds for all other CPUs to do the backtrace */
+	for (i = 0; i < 10 * 1000; i++) {
+		if (cpumask_empty(&backtrace_mask))
+			break;
+		mdelay(1);
+	}
+
+	clear_bit(0, &backtrace_flag);
+	smp_mb__after_clear_bit();
+}
+
+extern void handle_coherency_maint_req(void *p);
+
+/*
+ * ipi_cpu_backtrace - handle IPI from smp_send_all_cpu_backtrace()
+ */
+static void ipi_cpu_backtrace(unsigned int cpu, struct pt_regs *regs)
+{
+	if (cpu_isset(cpu, backtrace_mask)) {
+		raw_spin_lock(&backtrace_lock);
+		pr_warning("IPI backtrace for cpu %d\n", cpu);
+		show_regs(regs);
+		raw_spin_unlock(&backtrace_lock);
+		cpu_clear(cpu, backtrace_mask);
+	}
+}
+#endif
+
 /*
  * Main handler for inter-processor interrupts
  */
@@ -642,6 +706,15 @@ void handle_IPI(int ipinr, struct pt_regs *regs)
 		msa_irq_exit(ipinr, user_mode(regs));
 		break;
 
+#ifdef CONFIG_CPU_MMP3
+	case IPI_CPU_BACKTRACE:
+		ipi_cpu_backtrace(cpu, regs);
+		break;
+
+	case IPI_CPU_SYNC_COHERENCY:
+		handle_coherency_maint_req(NULL);
+		break;
+#endif
 	default:
 		printk(KERN_CRIT "CPU%u: Unknown IPI message 0x%x\n",
 		       cpu, ipinr);
diff --git a/arch/arm/mach-mmp/pm-mmp3.c b/arch/arm/mach-mmp/pm-mmp3.c
index c929721..0bd8da1 100644
--- a/arch/arm/mach-mmp/pm-mmp3.c
+++ b/arch/arm/mach-mmp/pm-mmp3.c
@@ -66,15 +66,6 @@ static inline int mmp3_smpid(void)
 }
 
 #ifdef CONFIG_SMP
-enum ipi_msg_type {
-	IPI_TIMER = 2,
-	IPI_RESCHEDULE,
-	IPI_CALL_FUNC,
-	IPI_CALL_FUNC_SINGLE,
-	IPI_CPU_STOP,
-	IPI_CPU_BACKTRACE,
-	IPI_CPU_SYNC_COHERENCY,
-};
 
 #define MP1_COHT_STATE_OFFSET	0x0
 #define MP2_COHT_STATE_OFFSET	0x4
-- 
1.7.5.4

