From 35fa3a22c57c08ddf34070c502351cec037f8f0c Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 6 Aug 2013 11:11:22 +0800
Subject: [PATCH 32/60] net: phy: add support 88ET40G for mmp3

Original patches come from M5.3.12.5.4_sources, which version is
3.0.31. This patch forward-ports it to 3.4.x for mmp3.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/net/phy/marvell.c   |   88 +++++++++++++++++++++++++++++++++++++++++++
 include/linux/marvell_phy.h |    1 +
 2 files changed, 89 insertions(+), 0 deletions(-)

diff --git a/drivers/net/phy/marvell.c b/drivers/net/phy/marvell.c
index e8b9c53..eea7afcf 100644
--- a/drivers/net/phy/marvell.c
+++ b/drivers/net/phy/marvell.c
@@ -188,6 +188,82 @@ static int marvell_config_aneg(struct phy_device *phydev)
 	return 0;
 }
 
+static int genphy_setup_forced(struct phy_device *phydev)
+{
+	int err;
+	int ctl = 0;
+
+	phydev->pause = phydev->asym_pause = 0;
+
+	if (SPEED_1000 == phydev->speed)
+		ctl |= BMCR_SPEED1000;
+	else if (SPEED_100 == phydev->speed)
+		ctl |= BMCR_SPEED100;
+
+	if (DUPLEX_FULL == phydev->duplex)
+		ctl |= BMCR_FULLDPLX;
+	ctl |= BMCR_RESET;
+
+	err = phy_write(phydev, MII_BMCR, ctl);
+
+	do {
+		ctl = phy_read(phydev, MII_BMCR);
+	} while (ctl >= 0 && ctl & BMCR_RESET);
+
+	return 0;
+}
+
+static int m88et40g_config_aneg(struct phy_device *phydev)
+{
+	int data, err;
+
+	/*
+	 * MMP3_A0 Fast Ethernet PHY register settings which is to
+	 * adjust to basic mode voltage and auto-negotiation
+	 */
+	err = phy_write(phydev, 0x10, 0x138);
+	if (err < 0)
+		return err;
+
+	err = phy_write(phydev, 0x1D, 4);
+	if (err < 0)
+		return err;
+
+	err = phy_write(phydev, 0x1E, 0x51C);
+	if (err < 0)
+		return err;
+
+	err = phy_write(phydev, 0x1D, 9);
+	if (err < 0)
+		return err;
+
+	err = phy_write(phydev, 0x1E, 0x2081);
+	if (err < 0)
+		return err;
+
+	err = phy_write(phydev, 0x1C, 0xC03);
+	if (err < 0)
+		return err;
+
+	if (phydev->autoneg != AUTONEG_ENABLE) {
+		err = genphy_setup_forced(phydev);
+		if (err < 0)
+			return err;
+	} else {
+		err = genphy_config_aneg(phydev);
+		if (err < 0)
+			return err;
+		data = phy_read(phydev, MII_BMCR);
+		data |= BMCR_RESET;
+		phy_write(phydev, MII_BMCR, data);
+		do {
+			data = phy_read(phydev, MII_BMCR);
+		} while (data >= 0 && data & BMCR_RESET);
+	}
+
+	return 0;
+}
+
 #ifdef CONFIG_OF_MDIO
 /*
  * Set and/or override some configuration registers based on the
@@ -834,6 +910,18 @@ static struct phy_driver marvell_drivers[] = {
 		.config_intr = &marvell_config_intr,
 		.driver = { .owner = THIS_MODULE },
 	},
+	{
+		.phy_id = MARVELL_PHY_ID_88ET40G,
+		.phy_id_mask = MARVELL_PHY_ID_MASK,
+		.name = "Marvell 88ET40G",
+		.features = PHY_BASIC_FEATURES,
+		.flags = PHY_HAS_INTERRUPT,
+		.config_aneg = &m88et40g_config_aneg,
+		.read_status = &genphy_read_status,
+		.ack_interrupt = &marvell_ack_interrupt,
+		.config_intr = &marvell_config_intr,
+		.driver = { .owner = THIS_MODULE },
+	},
 };
 
 static int __init marvell_init(void)
diff --git a/include/linux/marvell_phy.h b/include/linux/marvell_phy.h
index dd3c34e..b090675 100644
--- a/include/linux/marvell_phy.h
+++ b/include/linux/marvell_phy.h
@@ -14,6 +14,7 @@
 #define MARVELL_PHY_ID_88E1149R		0x01410e50
 #define MARVELL_PHY_ID_88E1240		0x01410e30
 #define MARVELL_PHY_ID_88E1318S		0x01410e90
+#define MARVELL_PHY_ID_88ET40G		0x01410e60
 
 /* struct phy_device dev_flags definitions */
 #define MARVELL_PHY_M1145_FLAGS_RESISTANCE	0x00000001
-- 
1.7.5.4

