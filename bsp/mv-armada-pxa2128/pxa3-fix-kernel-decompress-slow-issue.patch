From bfa52abfbabe24e288e3ae2d1b34340edb1ad979 Mon Sep 17 00:00:00 2001
From: Jack Ren <jack.ren@marvell.com>
Date: Tue, 13 May 2008 15:51:32 +0800
Subject: [PATCH 01/60] pxa3: fix kernel decompress slow issue

Issue:
When the zImage is larger than 2M bytes,  the kernel self-decompress is
very slow.

Root cause:
The arch/arm/boot/compressed/head.S will map the 2M bytes of region around the
zImage location as cachable to speed up the zImage self-decompress. But when zImage
becomes larger than 2M bytes, the decompress will have to use some uncachable DDR
area which leads to decompress slow down suddenly.

Fix:
Let arch/arm/boot/compressed/head.S map 4M bytes of region around the zImage location as
cachable.

Signed-off-by: Jack Ren <jack.ren@marvell.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/boot/compressed/head.S |    6 +++++-
 1 files changed, 5 insertions(+), 1 deletions(-)

diff --git a/arch/arm/boot/compressed/head.S b/arch/arm/boot/compressed/head.S
index e9389dc..15883a5 100644
--- a/arch/arm/boot/compressed/head.S
+++ b/arch/arm/boot/compressed/head.S
@@ -598,7 +598,7 @@ __setup_mmu:	sub	r3, r4, #16384		@ Page directory size
 		bne	1b
 /*
  * If ever we are running from Flash, then we surely want the cache
- * to be enabled also for our execution instance...  We map 2MB of it
+ * to be enabled also for our execution instance...  We map 4MB of it
  * so there is no map overlap problem for up to 1 MB compressed kernel.
  * If the execution is in RAM then we would only be duplicating the above.
  */
@@ -610,6 +610,10 @@ __setup_mmu:	sub	r3, r4, #16384		@ Page directory size
 		add	r0, r3, r2, lsl #2
 		str	r1, [r0], #4
 		add	r1, r1, #1048576
+		str	r1, [r0], #4
+		add	r1, r1, #1048576
+		str	r1, [r0], #4
+		add	r1, r1, #1048576
 		str	r1, [r0]
 		mov	pc, lr
 ENDPROC(__setup_mmu)
-- 
1.7.5.4

