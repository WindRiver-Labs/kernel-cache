From 333ff98964367c38133894cea9f5b1fbe12396eb Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Tue, 3 Sep 2013 16:55:10 +0800
Subject: [PATCH 47/60] sound: soc: codes: add support for qseven

Original patches come from M5.3.12.5.4_sources, which version is
3.0.31. This patch forward-ports codec driver to WRLinux 3.4.x
kernel for mmp3.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 sound/soc/codecs/Kconfig  |    4 ++
 sound/soc/codecs/Makefile |    2 +
 sound/soc/codecs/dummy.c  |   82 +++++++++++++++++++++++++++++++++++++++++++++
 sound/soc/codecs/wm8731.c |   20 +++++++++++
 4 files changed, 108 insertions(+), 0 deletions(-)
 create mode 100644 sound/soc/codecs/dummy.c

diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 33784b7..ff8108a 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -445,3 +445,7 @@ config SND_SOC_MAX9877
 
 config SND_SOC_TPA6130A2
 	tristate
+
+config SND_SOC_QSEVEN_HDMI
+	tristate
+	depends on SND_SOC
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index d6c1fea..f1d0a16 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -103,6 +103,7 @@ snd-soc-wm-hubs-objs := wm_hubs.o
 # Amp
 snd-soc-max9877-objs := max9877.o
 snd-soc-tpa6130a2-objs := tpa6130a2.o
+snd-soc-dummy-objs := dummy.o
 
 obj-$(CONFIG_SND_SOC_88PM860X)	+= snd-soc-88pm860x.o
 obj-$(CONFIG_SND_SOC_AC97_CODEC)	+= snd-soc-ac97.o
@@ -209,3 +210,4 @@ obj-$(CONFIG_SND_SOC_WM_HUBS)	+= snd-soc-wm-hubs.o
 # Amp
 obj-$(CONFIG_SND_SOC_MAX9877)	+= snd-soc-max9877.o
 obj-$(CONFIG_SND_SOC_TPA6130A2)	+= snd-soc-tpa6130a2.o
+obj-$(CONFIG_SND_SOC_QSEVEN_HDMI)	+= snd-soc-dummy.o
diff --git a/sound/soc/codecs/dummy.c b/sound/soc/codecs/dummy.c
new file mode 100644
index 0000000..91c8d21
--- /dev/null
+++ b/sound/soc/codecs/dummy.c
@@ -0,0 +1,82 @@
+/*
+ * linux/sound/soc/codecs/dummy.c
+ * Base on linux/sound/soc/codecs/wm8753.c
+ *
+ * Copyright (C) 2007 Marvell International Ltd.
+ * 			 Yael Sheli Chemla<yael.s.shemla@marvell.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <sound/pcm.h>
+#include <sound/initval.h>
+#include <sound/soc.h>
+
+#define HDMI_AUDIO_HIFI_RATES SNDRV_PCM_RATE_8000_48000
+
+#define HDMI_AUDIO_HIFI_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE)
+
+static struct snd_soc_codec_driver soc_codec_dev_dummy;
+
+struct snd_soc_dai_driver dummy_audio_dai = {
+	.name = "dummy-dai",
+	.id = 1,
+	.playback = {
+		.stream_name = "HiFi Playback",
+		.channels_min = 1,
+		.channels_max = 2,
+		.rates = HDMI_AUDIO_HIFI_RATES,
+		.formats = HDMI_AUDIO_HIFI_FORMATS,
+	},
+};
+
+static int __devinit dummy_probe(struct platform_device *pdev)
+{
+	return snd_soc_register_codec(&pdev->dev, &soc_codec_dev_dummy,
+			&dummy_audio_dai, 1);
+}
+
+static int __devexit dummy_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+	return 0;
+}
+
+static struct platform_driver dummy_codec_driver = {
+	.driver = {
+		   .name = "dummy-codec",
+		   .owner = THIS_MODULE,
+		   },
+	.probe = dummy_probe,
+	.remove = __devexit_p(dummy_remove),
+};
+
+static int __init dummy_audio_modinit(void)
+{
+	return platform_driver_register(&dummy_codec_driver);
+}
+module_init(dummy_audio_modinit);
+
+static void __exit dummy_audio_exit(void)
+{
+	platform_driver_unregister(&dummy_codec_driver);
+}
+module_exit(dummy_audio_exit);
+
+MODULE_DESCRIPTION("ASoC dummy audio driver");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/codecs/wm8731.c b/sound/soc/codecs/wm8731.c
index a32caa7..22c5a5d 100644
--- a/sound/soc/codecs/wm8731.c
+++ b/sound/soc/codecs/wm8731.c
@@ -451,11 +451,13 @@ static int wm8731_set_bias_level(struct snd_soc_codec *codec,
 		break;
 	case SND_SOC_BIAS_STANDBY:
 		if (codec->dapm.bias_level == SND_SOC_BIAS_OFF) {
+#ifndef CONFIG_MACH_QSEVEN
 			ret = regulator_bulk_enable(ARRAY_SIZE(wm8731->supplies),
 						    wm8731->supplies);
 			if (ret != 0)
 				return ret;
 
+#endif
 			regcache_sync(wm8731->regmap);
 		}
 
@@ -465,8 +467,10 @@ static int wm8731_set_bias_level(struct snd_soc_codec *codec,
 		break;
 	case SND_SOC_BIAS_OFF:
 		snd_soc_write(codec, WM8731_PWR, 0xffff);
+#ifndef CONFIG_MACH_QSEVEN
 		regulator_bulk_disable(ARRAY_SIZE(wm8731->supplies),
 				       wm8731->supplies);
+#endif
 		regcache_mark_dirty(wm8731->regmap);
 		break;
 	}
@@ -535,6 +539,7 @@ static int wm8731_probe(struct snd_soc_codec *codec)
 		return ret;
 	}
 
+#ifndef CONFIG_MACH_QSEVEN
 	for (i = 0; i < ARRAY_SIZE(wm8731->supplies); i++)
 		wm8731->supplies[i].supply = wm8731_supply_names[i];
 
@@ -552,6 +557,7 @@ static int wm8731_probe(struct snd_soc_codec *codec)
 		goto err_regulator_get;
 	}
 
+#endif
 	ret = wm8731_reset(codec);
 	if (ret < 0) {
 		dev_err(codec->dev, "Failed to issue reset: %d\n", ret);
@@ -566,18 +572,30 @@ static int wm8731_probe(struct snd_soc_codec *codec)
 	snd_soc_update_bits(codec, WM8731_LINVOL, 0x100, 0);
 	snd_soc_update_bits(codec, WM8731_RINVOL, 0x100, 0);
 
+
+#ifdef CONFIG_MACH_QSEVEN
+	/* Disable bypass and side tone path by default and enable DAC
+	snd_soc_update_bits(codec, WM8731_APANA, 0xff, 0x12);*/
+	snd_soc_update_bits(codec, WM8731_APANA, 0x8, 0);
+	u8 test = snd_soc_read(codec, WM8731_APANA);
+#else
 	/* Disable bypass path by default */
 	snd_soc_update_bits(codec, WM8731_APANA, 0x8, 0);
+#endif
 
+#ifndef CONFIG_MACH_QSEVEN
 	/* Regulators will have been enabled by bias management */
 	regulator_bulk_disable(ARRAY_SIZE(wm8731->supplies), wm8731->supplies);
+#endif
 
 	return 0;
 
 err_regulator_enable:
+#ifndef CONFIG_MACH_QSEVEN
 	regulator_bulk_disable(ARRAY_SIZE(wm8731->supplies), wm8731->supplies);
 err_regulator_get:
 	regulator_bulk_free(ARRAY_SIZE(wm8731->supplies), wm8731->supplies);
+#endif
 
 	return ret;
 }
@@ -589,8 +607,10 @@ static int wm8731_remove(struct snd_soc_codec *codec)
 
 	wm8731_set_bias_level(codec, SND_SOC_BIAS_OFF);
 
+#ifndef CONFIG_MACH_QSEVEN
 	regulator_bulk_disable(ARRAY_SIZE(wm8731->supplies), wm8731->supplies);
 	regulator_bulk_free(ARRAY_SIZE(wm8731->supplies), wm8731->supplies);
+#endif
 
 	return 0;
 }
-- 
1.7.5.4

