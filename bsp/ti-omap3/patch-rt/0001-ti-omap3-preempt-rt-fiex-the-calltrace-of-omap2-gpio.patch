From e5fb6fe7c4522e0b3f7445968411895804a3796b Mon Sep 17 00:00:00 2001
From: czou <cao.zou@windriver.com>
Date: Mon, 28 Sep 2015 14:29:49 +0800
Subject: [PATCH] ti-omap3: preempt-rt:fiex the calltrace of omap2 gpio wakeup
 workaround

omap2_gpio_prepare_for_idle and omap2_gpio_resume_after_idle is
workaround patch for omap24xx and omap34xx about the gpio wakeup
interrupts, the two functions will be only called in noirq and run
the pm runtime, it isn't permited in preempt-rt kernel, replace the
old pm_runtime_put_sync_* with pm_generic_suspemd/resume.

replace it with generat pm runtime, reasons as follow:
1. it is sample runtime condition in omap3430, the rpmflags of
runtime is just only RPM_GET_PUT, not use RPM_AUTO.

2. omap2_gpio_prepare_for_idle and omap2_gpio_resume_after_idle is
only called in omap_sram_idle with noirq, called
omap2_gpio_prepare_for_idle in the start of omap_sram_idle, call
omap2_gpio_resume_after_idle at the end of omap_sram_idle,
it isn't neccessray to cause their parent pm, it just a workaroud
patch by TI for fixing the surplus gpio interrupt when wakeup.

3. there are not pm runtime pending conditions in arch_cpu_idle for
the tow function omap2_gpio_prepare_for/after_idle, it just be called
in noirq, it won't cause the pm runtime pending conditions

calltrace as follow:
    hBUG: sleeping function called from invalid context at
    in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper
    Preemption disabled at:[< (null)>] (null)

    CPU: 0 PID: 0 Comm: swapper Not tainted
    3.14.39ltsi-rt37-WR7.0.0.0_preempt-rt #1
    [<c0017610>] (unwind_backtrace) from [<c0013154>] (show_stack+0x20/0x24)
    [<c0013154>] (show_stack) from [<c072fc14>] (dump_stack+0x24/0x28)
    [<c072fc14>] (dump_stack) from [<c006ab90>] (__might_sleep+0x108/0x160)
    [<c006ab90>] (__might_sleep) from [<c07346bc>] (rt_spin_lock+0x2c/0x6c)
    [<c07346bc>] (rt_spin_lock) from [<c0031124>] (pwrdm_lock+0x24/0x28)
    [<c0031124>] (pwrdm_lock) from [<c0033144>] (clkdm_deny_idle+0x20/0x34)
    [<c0033144>] (clkdm_deny_idle) from [<c002dc14>]
    (omap3_enter_idle_bm+0x120/0x23c)
    [<c002dc14>] (omap3_enter_idle_bm) from [<c059818c>]
    (cpuidle_enter_state+0x50/0xf4)
    [<c059818c>] (cpuidle_enter_state) from [<c0598320>]
    (cpuidle_idle_call+0xf0/0x2bc)
    [<c0598320>] (cpuidle_idle_call) from [<c000fe4c>]
    (arch_cpu_idle+0x18/0x48)
    [<c000fe4c>] (arch_cpu_idle) from [<c0080388>]
    (cpu_startup_entry+0x158/0x2a0)
    [<c0080388>] (cpu_startup_entry) from [<c072b5a4>] (rest_init+0x94/0x98)
    [<c072b5a4>] (rest_init) from [<c0a17b24>] (start_kernel+0x37c/0x388)

Signed-off-by: czou <cao.zou@windriver.com>
---
 drivers/gpio/gpio-omap.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/drivers/gpio/gpio-omap.c b/drivers/gpio/gpio-omap.c
index 4243190..687e0d0 100644
--- a/drivers/gpio/gpio-omap.c
+++ b/drivers/gpio/gpio-omap.c
@@ -1449,7 +1449,11 @@ void omap2_gpio_prepare_for_idle(int pwr_mode)
 
 		bank->power_mode = pwr_mode;
 
-		pm_runtime_put_sync_suspend(bank->dev);
+		if (bank->dev->power.disable_depth <= 0 
+			&& atomic_read(&bank->dev->power.usage_count) == 1
+			&& pm_children_suspended(bank->dev)) {
+			pm_generic_suspend(bank->dev);
+		}
 	}
 }
 
@@ -1461,7 +1465,11 @@ void omap2_gpio_resume_after_idle(void)
 		if (!BANK_USED(bank) || !bank->loses_context)
 			continue;
 
-		pm_runtime_get_sync(bank->dev);
+		if (bank->dev->power.disable_depth <= 0 
+			&& atomic_read(&bank->dev->power.usage_count) == 1
+			&& pm_children_suspended(bank->dev)) {
+				pm_generic_resume(bank->dev);
+		}
 	}
 }
 
-- 
1.9.1

