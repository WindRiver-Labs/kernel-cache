From 90dbfba71dcb3a3da758d08a20bfae1f9cf6c28f Mon Sep 17 00:00:00 2001
From: Vaibhav Bedia <vaibhav.bedia@ti.com>
Date: Sun, 1 Jul 2012 01:09:21 +0800
Subject: [PATCH 535/609] cpufreq: OMAP: AM33XX: Use PM notifiers to scale
 voltage in suspend

Original commit: d9570f49413972af9bb0c6e5dff853c4b4232b87

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Use the PM notifiers to scale down the frequency and voltage in the
suspend path and then block any further transitions till the system
resumes.

NOTE: THIS PATCH HAS CHECKPATCH ERRORS WHICH VIM IS NOT WILLING
TO REMOVE RIGHT NOW :(

Signed-off-by: Vaibhav Bedia <vaibhav.bedia@ti.com>
---
 drivers/cpufreq/omap-cpufreq.c |   31 +++++++++++++++++++++++++++----
 1 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/drivers/cpufreq/omap-cpufreq.c b/drivers/cpufreq/omap-cpufreq.c
index 7576506..4369ba1 100644
--- a/drivers/cpufreq/omap-cpufreq.c
+++ b/drivers/cpufreq/omap-cpufreq.c
@@ -41,6 +41,10 @@
 /* OPP tolerance in percentage */
 #define	OPP_TOLERANCE	4
 
+/* Use 275MHz when entering suspend */
+#define SLEEP_FREQ	(275 * 1000)
+
+
 #ifdef CONFIG_SMP
 struct lpj_info {
 	unsigned long	ref;
@@ -210,14 +214,33 @@ static inline void freq_table_free(void)
 }
 
 static int omap_pm_notify(struct notifier_block *nb, unsigned long event,
-	void *dummy)
+                                void *dummy)
 {
+	struct cpufreq_policy *policy = cpufreq_cpu_get(0);
+	static unsigned int saved_frequency;
+
 	mutex_lock(&omap_cpu_lock);
-	if (event == PM_SUSPEND_PREPARE) {
+	switch (event) {
+	case PM_SUSPEND_PREPARE:
+		if (is_suspended)
+			goto out;
+
+                saved_frequency = omap_getspeed(0);
+
+                mutex_unlock(&omap_cpu_lock);
+		omap_target(policy, SLEEP_FREQ, CPUFREQ_RELATION_H);
+		mutex_lock(&omap_cpu_lock);
 		is_suspended = true;
-	} else if (event == PM_POST_SUSPEND) {
-		is_suspended = false;
+                break;
+
+        case PM_POST_SUSPEND:
+                is_suspended = false;
+                mutex_unlock(&omap_cpu_lock);
+		omap_target(policy, saved_frequency, CPUFREQ_RELATION_H);
+		mutex_lock(&omap_cpu_lock);
+                break;
 	}
+out:
 	mutex_unlock(&omap_cpu_lock);
 
 	return NOTIFY_OK;
-- 
1.7.5.4

