From 2c99a28bf9ed0fb19ba91d6fcd02ac0da4b1d0af Mon Sep 17 00:00:00 2001
From: Goutam Kumar <goutam.kumar@ti.com>
Date: Wed, 28 Sep 2011 14:15:53 +0530
Subject: [PATCH 049/609] arm: omap: am335xevm: Matrix GPIO Keypad support
 added

Original commit: 131e76262032417e4dfedf33e28a5106204628f3

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

This patch adds support for GPIO based Matric(2 x 3) Keypad.

Signed-off-by: Goutam Kumar <goutam.kumar@ti.com>
Signed-off-by: Hebbar, Gururaja <gururaja.hebbar@ti.com>
Signed-off-by: Patil, Rachna <rachna@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 arch/arm/mach-omap2/board-am335xevm.c |   69 +++++++++++++++++++++++++++++++++
 arch/arm/mach-omap2/mux33xx.c         |   12 +++---
 2 files changed, 75 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-omap2/board-am335xevm.c b/arch/arm/mach-omap2/board-am335xevm.c
index b3863d4..e05c8d3 100644
--- a/arch/arm/mach-omap2/board-am335xevm.c
+++ b/arch/arm/mach-omap2/board-am335xevm.c
@@ -20,6 +20,8 @@
 #include <linux/gpio.h>
 #include <linux/spi/spi.h>
 #include <linux/spi/flash.h>
+#include <linux/input.h>
+#include <linux/input/matrix_keypad.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
@@ -537,6 +539,72 @@ static void setup_pin_mux(struct pinmux_config *pin_mux)
 
 }
 
+/* Matrix GPIO Keypad Support for profile-0 only: TODO */
+
+/* pinmux for keypad device */
+static struct pinmux_config matrix_keypad_pin_mux[] = {
+	{"gpmc_a5.gpio1_21",  OMAP_MUX_MODE7 | AM33XX_PIN_OUTPUT},
+	{"gpmc_a6.gpio1_22",  OMAP_MUX_MODE7 | AM33XX_PIN_OUTPUT},
+	{"gpmc_a9.gpio1_25",  OMAP_MUX_MODE7 | AM33XX_PIN_INPUT},
+	{"gpmc_a10.gpio1_26", OMAP_MUX_MODE7 | AM33XX_PIN_INPUT},
+	{"gpmc_a11.gpio1_27", OMAP_MUX_MODE7 | AM33XX_PIN_INPUT},
+	{NULL, 0},
+};
+
+/* Keys mapping */
+static const uint32_t am335x_evm_matrix_keys[] = {
+	KEY(0, 0, KEY_MENU),
+	KEY(1, 0, KEY_BACK),
+	KEY(2, 0, KEY_LEFT),
+
+	KEY(0, 1, KEY_RIGHT),
+	KEY(1, 1, KEY_ENTER),
+	KEY(2, 1, KEY_DOWN),
+};
+
+const struct matrix_keymap_data am335x_evm_keymap_data = {
+	.keymap      = am335x_evm_matrix_keys,
+	.keymap_size = ARRAY_SIZE(am335x_evm_matrix_keys),
+};
+
+static const unsigned int am335x_evm_keypad_row_gpios[] = {
+	GPIO_TO_PIN(1, 25), GPIO_TO_PIN(1, 26), GPIO_TO_PIN(1, 27)
+};
+
+static const unsigned int am335x_evm_keypad_col_gpios[] = {
+	GPIO_TO_PIN(1, 21), GPIO_TO_PIN(1, 22)
+};
+
+static struct matrix_keypad_platform_data am335x_evm_keypad_platform_data = {
+	.keymap_data       = &am335x_evm_keymap_data,
+	.row_gpios         = am335x_evm_keypad_row_gpios,
+	.num_row_gpios     = ARRAY_SIZE(am335x_evm_keypad_row_gpios),
+	.col_gpios         = am335x_evm_keypad_col_gpios,
+	.num_col_gpios     = ARRAY_SIZE(am335x_evm_keypad_col_gpios),
+	.active_low        = false,
+	.debounce_ms       = 5,
+	.col_scan_delay_us = 2,
+};
+
+static struct platform_device am335x_evm_keyboard = {
+	.name  = "matrix-keypad",
+	.id    = -1,
+	.dev   = {
+		.platform_data = &am335x_evm_keypad_platform_data,
+	},
+};
+
+static void matrix_keypad_init(int evm_id, int profile)
+{
+	int err;
+
+	setup_pin_mux(matrix_keypad_pin_mux);
+	err = platform_device_register(&am335x_evm_keyboard);
+	if (err) {
+		pr_err("failed to register matrix keypad (2x3) device\n");
+	}
+}
+
 /*
 * @evm_id - evm id which needs to be configured
 * @dev_cfg - single evm structure which includes
@@ -1087,6 +1155,7 @@ static struct evm_dev_cfg gen_purp_evm_dev_cfg[] = {
 								PROFILE_5)},
 	{wl12xx_init,	DEV_ON_BASEBOARD, (PROFILE_0 | PROFILE_3 | PROFILE_5)},
 	{d_can_init,	DEV_ON_DGHTR_BRD, PROFILE_1},
+	{matrix_keypad_init, DEV_ON_DGHTR_BRD, PROFILE_0},
 	{NULL, 0, 0},
 };
 
diff --git a/arch/arm/mach-omap2/mux33xx.c b/arch/arm/mach-omap2/mux33xx.c
index 4ee3931..ec726bf 100644
--- a/arch/arm/mach-omap2/mux33xx.c
+++ b/arch/arm/mach-omap2/mux33xx.c
@@ -94,25 +94,25 @@ static struct omap_mux __initdata am33xx_muxmodes[] = {
 		"gpmc_a20", NULL, NULL, NULL),
 	_AM33XX_MUXENTRY(GPMC_A5, 0,
 		"gpmc_a5", "mii2_txd0", "rgmii2_td0", "rmii2_txd0",
-		"gpmc_a21", NULL, NULL, NULL),
+		"gpmc_a21", NULL, NULL, "gpio1_21"),
 	_AM33XX_MUXENTRY(GPMC_A6, 0,
 		"gpmc_a6", "mii2_txclk", "rgmii2_tclk", "mmc2_dat4",
-		"gpmc_a22", NULL, NULL, NULL),
+		"gpmc_a22", NULL, NULL, "gpio1_22"),
 	_AM33XX_MUXENTRY(GPMC_A7, 0,
 		"gpmc_a7", "mii2_rxclk", "rgmii2_rclk", "mmc2_dat5",
 		NULL, NULL, NULL, NULL),
 	_AM33XX_MUXENTRY(GPMC_A8, 0,
 		"gpmc_a8", "mii2_rxd3", "rgmii2_rd3", "mmc2_dat6",
-		NULL, NULL, "mcasp0_aclkx", NULL),
+		NULL, NULL, "mcasp0_aclkx", "gpio1_24"),
 	_AM33XX_MUXENTRY(GPMC_A9, 0,
 		"gpmc_a9", "mii2_rxd2", "rgmii2_rd2", "mmc2_dat7",
-		NULL, NULL, "mcasp0_fsx", NULL),
+		NULL, NULL, "mcasp0_fsx", "gpio1_25"),
 	_AM33XX_MUXENTRY(GPMC_A10, 0,
 		"gpmc_a10", "mii2_rxd1", "rgmii2_rd1", "rmii2_rxd1",
-		NULL, NULL, "mcasp0_axr0", NULL),
+		NULL, NULL, "mcasp0_axr0", "gpio1_26"),
 	_AM33XX_MUXENTRY(GPMC_A11, 0,
 		"gpmc_a11", "mii2_rxd0", "rgmii2_rd0", "rmii2_rxd0",
-		NULL, NULL, "mcasp0_axr1", NULL),
+		NULL, NULL, "mcasp0_axr1", "gpio1_27"),
 	_AM33XX_MUXENTRY(GPMC_WAIT0, 0,
 		"gpmc_wait0", "mii2_crs", NULL, "rmii2_crs_dv",
 		"mmc1_sdcd", NULL, NULL, NULL),
-- 
1.7.5.4

