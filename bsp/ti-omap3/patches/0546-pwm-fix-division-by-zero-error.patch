From ce2670b23d8d1b81d2c79b5e0c3eed8da7026723 Mon Sep 17 00:00:00 2001
From: "Philip, Avinash" <avinashphilip@ti.com>
Date: Mon, 6 Feb 2012 15:14:17 +0530
Subject: [PATCH 546/609] pwm: fix division by zero error.

Original commit: 2f28f8622153047a56e2af4205eef153be4932ad

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Divisor should be checked before dividing for non-zero value. This patch
fixes the same and added debug messages.

Signed-off-by: Philip, Avinash <avinashphilip@ti.com>
---
 drivers/pwm/pwm.c |   20 ++++++++++++++------
 1 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/drivers/pwm/pwm.c b/drivers/pwm/pwm.c
index d7b39c8..3db04cb 100644
--- a/drivers/pwm/pwm.c
+++ b/drivers/pwm/pwm.c
@@ -158,8 +158,10 @@ unsigned long pwm_ticks_to_ns(struct pwm_device *p, unsigned long ticks)
 {
 	unsigned long long ns;
 
-	if (!p->tick_hz)
+	if (!p->tick_hz) {
+		pr_debug("%s: frequency is zero\n", dev_name(p->dev));
 		return 0;
+	}
 
 	ns = ticks;
 	ns *= 1000000000UL;
@@ -279,14 +281,13 @@ EXPORT_SYMBOL(pwm_get_period_ns);
 
 int pwm_set_frequency(struct pwm_device *p, unsigned long freq)
 {
-	struct pwm_config c = {
-		.config_mask = BIT(PWM_CONFIG_PERIOD_TICKS),
-		.period_ticks = pwm_ns_to_ticks(p, (NSEC_PER_SEC / freq)),
-	};
+	struct pwm_config c;
 
 	if (!freq)
 		return -EINVAL;
 
+	c.config_mask = BIT(PWM_CONFIG_PERIOD_TICKS);
+	c.period_ticks = pwm_ns_to_ticks(p, (NSEC_PER_SEC / freq));
 	spin_lock(&p->pwm_lock);
 	p->period_ns = NSEC_PER_SEC / freq;
 	spin_unlock(&p->pwm_lock);
@@ -300,8 +301,10 @@ unsigned long pwm_get_frequency(struct pwm_device *p)
 
 	 period_ns = pwm_ticks_to_ns(p, p->period_ticks);
 
-	if (!period_ns)
+	if (!period_ns) {
+		pr_debug("%s: frequency is zero\n", dev_name(p->dev));
 		return 0;
+	}
 
 	return	NSEC_PER_SEC / period_ns;
 }
@@ -360,6 +363,11 @@ unsigned long pwm_get_duty_percent(struct pwm_device *p)
 {
 	unsigned long long duty_percent;
 
+	if (!p->period_ns) {
+		pr_debug("%s: frequency is zero\n", dev_name(p->dev));
+		return 0;
+	}
+
 	duty_percent = pwm_ticks_to_ns(p, p->duty_ticks);
 	duty_percent *= 100;
 	do_div(duty_percent, p->period_ns);
-- 
1.7.5.4

