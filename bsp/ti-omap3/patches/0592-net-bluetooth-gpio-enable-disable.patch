From 74a24e64a266d2e45c795043e7863dca17259fef Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Thu, 6 Sep 2012 12:19:15 +0800
Subject: [PATCH 592/609] net: bluetooth: gpio enable/disable

Original file comes from extra drivers in SDK:

  ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Signed-off-by: Zumeng.Chen <zumeng.chen@windriver.com>
---
 drivers/bluetooth/Kconfig          |   12 +++
 drivers/bluetooth/Makefile         |    1 +
 drivers/bluetooth/gpio_en_am335x.c |  131 ++++++++++++++++++++++++++++++++++++
 3 files changed, 144 insertions(+), 0 deletions(-)
 create mode 100755 drivers/bluetooth/gpio_en_am335x.c

diff --git a/drivers/bluetooth/Kconfig b/drivers/bluetooth/Kconfig
index 5ccf142..0a87134 100644
--- a/drivers/bluetooth/Kconfig
+++ b/drivers/bluetooth/Kconfig
@@ -36,6 +36,18 @@ config BT_HCIUART
 	  Say Y here to compile support for Bluetooth UART devices into the
 	  kernel or say M to compile it as module (hci_uart).
 
+config BT_GPIO_EN
+	tristate "Texas Instruments BT GPIO_EN for am335x"
+	depends on BT_HCIUART
+	default m
+	help
+	  This enables the Bluetooth driver for Texas Instrument's BT/FM/GPS
+	  combo devices. This makes use of shared transport line discipline
+	  core driver to communicate with the BT core of the combo chip.
+
+	  Say Y here to compile support for Texas Instrument's WiLink7 driver
+	  into the kernel or say M to compile it as module.
+
 config BT_HCIUART_H4
 	bool "UART (H4) protocol support"
 	depends on BT_HCIUART
diff --git a/drivers/bluetooth/Makefile b/drivers/bluetooth/Makefile
index f4460f4..1dcdee6 100644
--- a/drivers/bluetooth/Makefile
+++ b/drivers/bluetooth/Makefile
@@ -19,6 +19,7 @@ obj-$(CONFIG_BT_ATH3K)		+= ath3k.o
 obj-$(CONFIG_BT_MRVL)		+= btmrvl.o
 obj-$(CONFIG_BT_MRVL_SDIO)	+= btmrvl_sdio.o
 obj-$(CONFIG_BT_WILINK)		+= btwilink.o
+obj-$(CONFIG_BT_GPIO_EN)	+= gpio_en_am335x.o
 
 btmrvl-y			:= btmrvl_main.o
 btmrvl-$(CONFIG_DEBUG_FS)	+= btmrvl_debugfs.o
diff --git a/drivers/bluetooth/gpio_en_am335x.c b/drivers/bluetooth/gpio_en_am335x.c
new file mode 100755
index 0000000..6552304
--- /dev/null
+++ b/drivers/bluetooth/gpio_en_am335x.c
@@ -0,0 +1,131 @@
+/*
+ * gpio_en.c
+ *
+ * Kernel module to enable Bluetooth core on WL1271
+ *
+ * Copyright(c) 2010 Texas Instruments. All rights reserved.      
+ * All rights reserved.                                                  
+ *                                                                       
+ * Redistribution and use in source and binary forms, with or without    
+ * modification, are permitted provided that the following conditions    
+ * are met:                                                              
+ *                                                                       
+ *  * Redistributions of source code must retain the above copyright     
+ *    notice, this list of conditions and the following disclaimer.      
+ *  * Redistributions in binary form must reproduce the above copyright  
+ *    notice, this list of conditions and the following disclaimer in    
+ *    the documentation and/or other materials provided with the         
+ *    distribution.                                                      
+ *  * Neither the name Texas Instruments nor the names of its            
+ *    contributors may be used to endorse or promote products derived    
+ *    from this software without specific prior written permission.      
+ *                                                                       
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <linux/kernel.h>
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/delay.h>
+#include <plat/io.h>
+#include <linux/gpio.h>
+
+#define AM33XX_CTRL_REGADDR(reg)					\
+		AM33XX_L4_WK_IO_ADDRESS(AM33XX_SCM_BASE + (reg))
+
+/* bit 3: 0 - enable, 1 - disable for pull enable */
+#define AM33XX_PULL_DISA		(1 << 3)
+#define AM33XX_PULL_ENBL		(0 << 3)
+
+/* Convert GPIO signal to GPIO pin number */
+#define GPIO_TO_PIN(bank, gpio) (32 * (bank) + (gpio))
+
+/* Bluetooth Enable PAD for EVM Rev 1.1 and up */
+#define AM33XX_CONTROL_PADCONF_MCASP0_AHCLKX_OFFSET		0x09AC
+
+/* Bluetooth Enable PAD for EVM Rev 1.0 */
+#define AM33XX_CONTROL_PADCONF_GPMC_CSN2_OFFSET			0x0884
+
+/* 
+   Define wl12xx_platform_data prototype here for using with first kernel versions
+   that didn't pass the enable pins elements 
+*/
+struct wl12xx_platform_data {
+	void (*set_power)(bool enable);
+	/* SDIO only: IRQ number if WLAN_IRQ line is used, 0 for SDIO IRQs */
+	int irq;
+	bool use_eeprom;
+	int board_ref_clock;
+	int board_tcxo_clock;
+	unsigned long platform_quirks;
+	int bt_enable_gpio;
+	int wlan_enable_gpio;
+};
+
+const struct wl12xx_platform_data *wl12xx_get_platform_data(void);
+
+unsigned char bt_enable_pin;
+int selected_pad;
+int pad_mux_value;
+
+static int __init gpio_test_init(void)
+{
+	const struct wl12xx_platform_data *wlan_data;
+	wlan_data = wl12xx_get_platform_data();
+
+	bt_enable_pin = wlan_data->bt_enable_gpio;
+
+	/* Default to alpha EVM in case the element is not initialized */
+	if (! bt_enable_pin)
+	{
+		pr_info("BT Enable pin is not initialized, defaulting to EVM Rev 1.0A.\n");
+		bt_enable_pin = GPIO_TO_PIN(1, 31); 
+	}
+
+	/* Select pad conf register based on EVM board rev */
+	if ( bt_enable_pin == GPIO_TO_PIN(3, 21) )	
+		selected_pad = AM33XX_CONTROL_PADCONF_MCASP0_AHCLKX_OFFSET;
+	else
+		selected_pad = AM33XX_CONTROL_PADCONF_GPMC_CSN2_OFFSET;
+ 
+	printk("Gpio value is :%d\n", bt_enable_pin);
+	gpio_direction_output(bt_enable_pin, 0);
+	msleep(1);
+	printk("WL1271: BT Enable\n");
+	gpio_direction_output(bt_enable_pin, 1);
+
+	/* Enable pullup on the enable pin for keeping BT active during suspend */
+	pad_mux_value = readl(AM33XX_CTRL_REGADDR(selected_pad));
+	pad_mux_value &= (~AM33XX_PULL_DISA);
+	writel(pad_mux_value, AM33XX_CTRL_REGADDR(selected_pad));
+
+	return 0;
+}
+
+static void __exit gpio_test_exit(void)
+{
+	printk("WL1271: BT Disable\n");
+        gpio_direction_output(bt_enable_pin, 0);
+
+	/* Disable pullup on the enable pin to allow BT shut down during suspend */
+	pad_mux_value = readl(AM33XX_CTRL_REGADDR(selected_pad));
+	pad_mux_value |= AM33XX_PULL_DISA;
+	writel(pad_mux_value, AM33XX_CTRL_REGADDR(selected_pad));
+}
+
+
+
+module_init(gpio_test_init);
+module_exit(gpio_test_exit);
+MODULE_LICENSE("GPL");
-- 
1.7.5.4

