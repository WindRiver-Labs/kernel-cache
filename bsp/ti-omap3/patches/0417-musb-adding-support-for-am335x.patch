From e7fd33163be52af3d95e1f1b195b6d4f4f23ca06 Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Fri, 29 Jul 2011 17:59:00 +0530
Subject: [PATCH 417/609] musb: adding support for am335x

Original commit: ffba7da43f90023e29a14104f1393ef2a57fbffb

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

am335x has two musb interface and uses cppi4.1 dma engine. It's
almost same as ti81xx and so using ti81xx files for am335x.

Signed-off-by: Ajay Kumar Gupta <ajay.gupta@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 drivers/usb/musb/Kconfig      |    6 +++---
 drivers/usb/musb/cppi41_dma.c |    6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/usb/musb/Kconfig b/drivers/usb/musb/Kconfig
index fbe05ea..a9ddf3f 100644
--- a/drivers/usb/musb/Kconfig
+++ b/drivers/usb/musb/Kconfig
@@ -8,7 +8,7 @@ config USB_MUSB_HDRC
 	tristate 'Inventra Highspeed Dual Role Controller (TI, ADI, ...)'
 	depends on USB && USB_GADGET
 	select NOP_USB_XCEIV if (ARCH_DAVINCI || MACH_OMAP3EVM || BLACKFIN)
-	select NOP_USB_XCEIV if (SOC_OMAPTI81XX)
+	select NOP_USB_XCEIV if (SOC_OMAPTI81XX || SOC_AM33XX)
 	select TWL4030_USB if MACH_OMAP_3430SDP
 	select TWL6030_USB if MACH_OMAP_4430SDP || MACH_OMAP4_PANDA
 	select USB_OTG_UTILS
@@ -62,8 +62,8 @@ config USB_MUSB_AM35X_GLUE
 
 config USB_MUSB_TI81XX_GLUE
 	select USB_MUSB_TI81XX
-	tristate "TI81XX"
-	depends on SOC_OMAPTI81XX && USB_MUSB_HDRC
+	tristate "TI81XX onward"
+	depends on (SOC_OMAPTI81XX || SOC_AM33XX) && USB_MUSB_HDRC
 
 config USB_MUSB_BLACKFIN_GLUE
 	select USB_MUSB_BLACKFIN
diff --git a/drivers/usb/musb/cppi41_dma.c b/drivers/usb/musb/cppi41_dma.c
index b274732..08312e2 100644
--- a/drivers/usb/musb/cppi41_dma.c
+++ b/drivers/usb/musb/cppi41_dma.c
@@ -191,7 +191,7 @@ static int __devinit cppi41_controller_start(struct dma_controller *controller)
 	cppi_info = cppi->cppi_info;
 	musb = cppi->musb;
 
-	if (cpu_is_ti81xx()) {
+	if (cpu_is_ti816x() || cpu_is_am33xx()) {
 		cppi->automode_reg_offs = TI81XX_USB_AUTOREQ_REG;
 		cppi->teardown_reg_offs = TI81XX_USB_TEARDOWN_REG;
 	} else {
@@ -1510,14 +1510,14 @@ static void usb_process_rx_queue(struct cppi41 *cppi, unsigned index)
 		if (unlikely(rx_ch->channel.actual_len >= rx_ch->length ||
 			     length < orig_buf_len)) {
 
-#ifdef CONFIG_SOC_OMAPTI81XX
+#if defined(CONFIG_SOC_OMAPTI81XX) || defined(CONFIG_SOC_AM33XX)
 			struct musb_hw_ep *ep;
 			u8 isoc, next_seg = 0;
 
 			/* Workaround for early rx completion of
 			 * cppi41 dma in Generic RNDIS mode for ti81xx
 			 */
-			if (cpu_is_ti81xx() && is_host_enabled(cppi->musb)) {
+			if (is_host_enabled(cppi->musb)) {
 				u32 pkt_size = rx_ch->pkt_size;
 				ep = cppi->musb->endpoints + ep_num;
 				isoc = musb_readb(ep->regs, MUSB_RXTYPE);
-- 
1.7.5.4

