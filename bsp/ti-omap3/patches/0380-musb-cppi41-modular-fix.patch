From ac38f5654a02ccc571e8e1c32fd3f51612acfdd9 Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Thu, 20 Jan 2011 20:14:46 +0530
Subject: [PATCH 380/609] musb: cppi41: modular fix

Original commit: 6b93c00743bda38c5cfc1c83a0c862aac60b9e2f

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Changes:
	- Moved global defines to cppi41.c/cppi41_dma.c
	- Platform files to fill those global defines.
	- Added EXPORT_SYMBOL
	- REVISIT: am35x: _put commented

Signed-off-by: Ajay Kumar Gupta <ajay.gupta@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 drivers/usb/musb/am35x.c      |   62 ++++++++++++++++++----------------------
 drivers/usb/musb/cppi41.c     |    7 ++++
 drivers/usb/musb/cppi41_dma.c |    4 ++
 drivers/usb/musb/cppi41_dma.h |    2 +-
 4 files changed, 40 insertions(+), 35 deletions(-)

diff --git a/drivers/usb/musb/am35x.c b/drivers/usb/musb/am35x.c
index 022e706..fd5a40b 100644
--- a/drivers/usb/musb/am35x.c
+++ b/drivers/usb/musb/am35x.c
@@ -107,16 +107,6 @@
 static const u16 tx_comp_q[] = { 63, 64 };
 static const u16 rx_comp_q[] = { 65, 66 };
 
-const struct usb_cppi41_info usb_cppi41_info = {
-	.dma_block	= 0,
-	.ep_dma_ch	= { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 },
-	.q_mgr		= 0,
-	.num_tx_comp_q	= 2,
-	.num_rx_comp_q	= 2,
-	.tx_comp_q	= tx_comp_q,
-	.rx_comp_q	= rx_comp_q
-};
-
 /* Fair scheduling */
 u32 dma_sched_table[] = {
 	0x81018000, 0x83038202, 0x85058404, 0x87078606,
@@ -202,33 +192,32 @@ static const struct cppi41_tx_ch tx_ch_info[] = {
 	}
 };
 
-struct cppi41_dma_block cppi41_dma_block[CPPI41_NUM_DMA_BLOCK] = {
-	[0] = {
-		.num_tx_ch	= 15,
-		.num_rx_ch	= 15,
-		.tx_ch_info	= tx_ch_info
-	}
-};
-EXPORT_SYMBOL(cppi41_dma_block);
-
 /* Queues 0 to 66 are pre-assigned, others are spare */
 static const u32 assigned_queues[] = { 0xffffffff, 0xffffffff, 0x7 };
 
-/* Queue manager information */
-struct cppi41_queue_mgr cppi41_queue_mgr[CPPI41_NUM_QUEUE_MGR] = {
-	[0] = {
-		.num_queue	= 96,
-		.queue_types	= CPPI41_FREE_DESC_BUF_QUEUE |
-					CPPI41_UNASSIGNED_QUEUE,
-		.base_fdbq_num	= 0,
-		.assigned	= assigned_queues
-	}
-};
-EXPORT_SYMBOL(cppi41_queue_mgr);
-
-int __init cppi41_init(struct musb *musb)
+int __devinit cppi41_init(struct musb *musb)
 {
-	u16 numch, blknum = usb_cppi41_info.dma_block, order;
+	u16 numch, blknum, order, i;
+
+	/* init cppi info structure  */
+	usb_cppi41_info.dma_block = 0;
+	for (i = 0 ; i < USB_CPPI41_NUM_CH ; i++)
+		usb_cppi41_info.ep_dma_ch[i] = i;
+
+	usb_cppi41_info.q_mgr = 0;
+	usb_cppi41_info.num_tx_comp_q = 4;
+	usb_cppi41_info.num_rx_comp_q = 4;
+	usb_cppi41_info.tx_comp_q = tx_comp_q;
+	usb_cppi41_info.rx_comp_q = rx_comp_q;
+
+	blknum = usb_cppi41_info.dma_block;
+
+	/* Queue manager information */
+	cppi41_queue_mgr[0].num_queue = 96;
+	cppi41_queue_mgr[0].queue_types = CPPI41_FREE_DESC_BUF_QUEUE |
+						CPPI41_UNASSIGNED_QUEUE;
+	cppi41_queue_mgr[0].base_fdbq_num = 0;
+	cppi41_queue_mgr[0].assigned = assigned_queues;
 
 	/* init mappings */
 	cppi41_queue_mgr[0].q_mgr_rgn_base = musb->ctrl_base + 0x4000;
@@ -236,6 +225,11 @@ int __init cppi41_init(struct musb *musb)
 	cppi41_queue_mgr[0].q_mgmt_rgn_base = musb->ctrl_base + 0x6000;
 	cppi41_queue_mgr[0].q_stat_rgn_base = musb->ctrl_base + 0x6800;
 
+	/* init DMA block */
+	cppi41_dma_block[0].num_tx_ch = 15;
+	cppi41_dma_block[0].num_rx_ch = 15;
+	cppi41_dma_block[0].tx_ch_info = tx_ch_info;
+
 	cppi41_dma_block[0].global_ctrl_base = musb->ctrl_base + 0x1000;
 	cppi41_dma_block[0].ch_ctrl_stat_base = musb->ctrl_base + 0x1800;
 	cppi41_dma_block[0].sched_ctrl_base = musb->ctrl_base + 0x2000;
@@ -784,7 +778,7 @@ static int __devexit am35x_remove(struct platform_device *pdev)
 	struct am35x_glue	*glue = platform_get_drvdata(pdev);
 
 	platform_device_del(glue->musb);
-	platform_device_put(glue->musb);
+	/*platform_device_put(glue->musb);*/
 	clk_disable(glue->clk);
 	clk_disable(glue->phy_clk);
 	clk_put(glue->clk);
diff --git a/drivers/usb/musb/cppi41.c b/drivers/usb/musb/cppi41.c
index 78d2bb8..f768c0f 100644
--- a/drivers/usb/musb/cppi41.c
+++ b/drivers/usb/musb/cppi41.c
@@ -78,6 +78,11 @@ struct cppi41_dma_sched_tbl_t dma_sched_tbl[MAX_SCHED_TBL_ENTRY] = {
 	{ 7,    3,      1,      1}
 };
 
+struct cppi41_queue_mgr cppi41_queue_mgr[CPPI41_NUM_QUEUE_MGR];
+EXPORT_SYMBOL(cppi41_queue_mgr);
+
+struct cppi41_dma_block cppi41_dma_block[CPPI41_NUM_DMA_BLOCK];
+EXPORT_SYMBOL(cppi41_dma_block);
 /******************** CPPI 4.1 Functions (External Interface) *****************/
 
 int cppi41_queue_mgr_init(u8 q_mgr, dma_addr_t rgn0_base, u16 rgn0_size)
@@ -124,6 +129,7 @@ int cppi41_queue_mgr_init(u8 q_mgr, dma_addr_t rgn0_base, u16 rgn0_size)
 
 	return 0;
 }
+EXPORT_SYMBOL(cppi41_queue_mgr_init);
 
 int cppi41_dma_sched_tbl_init(u8 dma_num, u8 q_mgr,
 			u32 *sched_tbl, u8 tbl_size)
@@ -345,6 +351,7 @@ free_queue:
 	cppi41_queue_free(q_mgr, q_num);
 	return error;
 }
+EXPORT_SYMBOL(cppi41_dma_block_init);
 
 /*
  * cppi41_mem_rgn_alloc - allocate a memory region within the queue manager
diff --git a/drivers/usb/musb/cppi41_dma.c b/drivers/usb/musb/cppi41_dma.c
index e7f7597..5781c9c 100644
--- a/drivers/usb/musb/cppi41_dma.c
+++ b/drivers/usb/musb/cppi41_dma.c
@@ -122,6 +122,9 @@ struct cppi41 {
 	u32 pkt_info;			/* Tx PD Packet Information field */
 };
 
+struct usb_cppi41_info usb_cppi41_info;
+EXPORT_SYMBOL(usb_cppi41_info);
+
 #ifdef DEBUG_CPPI_TD
 static void print_pd_list(struct usb_pkt_desc *pd_pool_head)
 {
@@ -1326,6 +1329,7 @@ void cppi41_completion(struct musb *musb, u32 rx, u32 tx)
 		if (tx & 1)
 			usb_process_tx_queue(cppi, index);
 }
+EXPORT_SYMBOL(cppi41_completion);
 
 MODULE_DESCRIPTION("CPPI4.1 dma controller driver for musb");
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/usb/musb/cppi41_dma.h b/drivers/usb/musb/cppi41_dma.h
index 8c64f23..908e8b7 100644
--- a/drivers/usb/musb/cppi41_dma.h
+++ b/drivers/usb/musb/cppi41_dma.h
@@ -41,7 +41,7 @@ struct usb_cppi41_info {
 	const u16 *rx_comp_q;
 };
 
-extern const struct usb_cppi41_info usb_cppi41_info;
+extern struct usb_cppi41_info usb_cppi41_info;
 
 /**
  * cppi41_completion - Tx/Rx completion queue interrupt handling hook
-- 
1.7.5.4

