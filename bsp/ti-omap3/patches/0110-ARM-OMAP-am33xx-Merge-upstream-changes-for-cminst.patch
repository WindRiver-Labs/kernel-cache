From cd7661b04aac90dff257f3a4418a1a7cc83eba47 Mon Sep 17 00:00:00 2001
From: Vaibhav Hiremath <hvaibhav@ti.com>
Date: Fri, 24 Feb 2012 16:46:07 +0530
Subject: [PATCH 110/609] ARM: OMAP: am33xx: Merge upstream changes for cminst

Original commit: 408ca73ae84c53008125814c93eae250c5894b6f

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Based on community feedback/developement,
      - New clock tree data, exact replica of HW clock tree.
        Used exactly naming conventions as per HW clock tree.
      - Consolidate AM33xx and OMAP4 cminst code
      - Remove cminst33xx.c & cm33xx.c files
      - Define seperate clkdm_ops for am33xx

Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 arch/arm/mach-omap2/clock33xx_data.c        | 2344 +++++++++++++++------------
 arch/arm/mach-omap2/clockdomain.h           |    1 +
 arch/arm/mach-omap2/clockdomain44xx.c       |    7 +
 arch/arm/mach-omap2/clockdomains33xx_data.c |   30 +-
 arch/arm/mach-omap2/cm-regbits-33xx.h       |   32 +-
 arch/arm/mach-omap2/cm33xx.c                |   51 -
 arch/arm/mach-omap2/cm33xx.h                |   26 +-
 arch/arm/mach-omap2/cminst33xx.c            |  312 ----
 arch/arm/mach-omap2/cminst44xx.h            |    2 +-
 arch/arm/mach-omap2/omap_hwmod.c            |   37 +-
 10 files changed, 1371 insertions(+), 1471 deletions(-)
 delete mode 100644 arch/arm/mach-omap2/cm33xx.c
 delete mode 100644 arch/arm/mach-omap2/cminst33xx.c

diff --git a/arch/arm/mach-omap2/clock33xx_data.c b/arch/arm/mach-omap2/clock33xx_data.c
index 43a6d21..2033e3b 100644
--- a/arch/arm/mach-omap2/clock33xx_data.c
+++ b/arch/arm/mach-omap2/clock33xx_data.c
@@ -50,6 +50,31 @@ static struct clk clk_rc32k_ck = {
 	.ops		= &clkops_null,
 };
 
+/* Crystal input clks */
+static struct clk virt_19_2m_ck = {
+	.name		= "virt_19_2m_ck",
+	.rate		= 19200000,
+	.ops		= &clkops_null,
+};
+
+static struct clk virt_24m_ck = {
+	.name		= "virt_24m_ck",
+	.rate		= 24000000,
+	.ops		= &clkops_null,
+};
+
+static struct clk virt_25m_ck = {
+	.name		= "virt_25m_ck",
+	.rate		= 25000000,
+	.ops		= &clkops_null,
+};
+
+static struct clk virt_26m_ck = {
+	.name		= "virt_26m_ck",
+	.rate		= 26000000,
+	.ops		= &clkops_null,
+};
+
 static struct clk tclkin_ck = {
 	.name		= "tclkin_ck",
 	.rate		= 12000000,
@@ -81,39 +106,6 @@ static const struct clksel_rate div_1_4_rates[] = {
 	{ .div = 0 },
 };
 
-static struct clk sys_clkin_ck = {
-	.name		= "sys_clkin_ck",
-	.rate		= 24000000,
-	.ops		= &clkops_null,
-};
-
-/* DPLL_PER */
-static struct dpll_data dpll_per_dd = {
-	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_PERIPH,
-	.clk_bypass	= &sys_clkin_ck,
-	.clk_ref	= &sys_clkin_ck,
-	.control_reg	= AM33XX_CM_CLKMODE_DPLL_PER,
-	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
-	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_PER,
-	.mult_mask	= AM33XX_DPLL_MULT_PERIPH_MASK,
-	.div1_mask	= AM33XX_DPLL_PER_DIV_MASK,
-	.enable_mask	= AM33XX_DPLL_EN_MASK,
-	.autoidle_mask	= AM33XX_AUTO_DPLL_MODE_MASK,
-	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
-	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
-	.max_divider	= AM33XX_MAX_DPLL_DIV,
-	.min_divider	= 1,
-};
-
-static struct clk dpll_per_ck = {
-	.name		= "dpll_per_ck",
-	.parent		= &sys_clkin_ck,
-	.dpll_data	= &dpll_per_dd,
-	.init		= &omap2_init_dpll_parent,
-	.ops		= &clkops_null,
-	.recalc		= &omap3_dpll_recalc,
-};
-
 static const struct clksel_rate div31_1to31_rates[] = {
 	{ .div = 1, .val = 1, .flags = RATE_IN_AM33XX },
 	{ .div = 2, .val = 2, .flags = RATE_IN_AM33XX },
@@ -149,35 +141,26 @@ static const struct clksel_rate div31_1to31_rates[] = {
 	{ .div = 0 },
 };
 
-static const struct clksel dpll_per_m2_div[] = {
-	{ .parent = &dpll_per_ck, .rates = div31_1to31_rates },
+/* Oscillator clock */
+/* 19.2, 24, 25 or 26 MHz */
+static const struct clksel sys_clkin_sel[] = {
+	{ .parent = &virt_19_2m_ck, .rates = div_1_0_rates },
+	{ .parent = &virt_24m_ck, .rates = div_1_1_rates },
+	{ .parent = &virt_25m_ck, .rates = div_1_2_rates },
+	{ .parent = &virt_26m_ck, .rates = div_1_3_rates },
 	{ .parent = NULL },
 };
 
-static struct clk dpll_per_m2_ck = {
-	.name		= "dpll_per_m2_ck",
-	.parent		= &dpll_per_ck,
-	.clksel		= dpll_per_m2_div,
-	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_PER,
-	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
+/* sys_clk_in */
+static struct clk sys_clkin_ck = {
+	.name		= "sys_clkin_ck",
+	.parent		= &virt_24m_ck,
+	.init		= &omap2_init_clksel_parent,
+	.clksel_reg	= AM33XX_CTRL_REGADDR(0x40),	/* CONTROL_STATUS */
+	.clksel_mask	= (0x3 << 22),
+	.clksel		= sys_clkin_sel,
 	.ops		= &clkops_null,
 	.recalc		= &omap2_clksel_recalc,
-	.round_rate	= &omap2_clksel_round_rate,
-	.set_rate	= &omap2_clksel_set_rate,
-};
-
-static struct clk i2c_clk = {
-	.name		= "i2c_clk",
-	.parent		= &dpll_per_m2_ck,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
-};
-
-static struct clk clk_div_24_ck = {
-	.name		= "clk_div_24_ck",
-	.parent		= &i2c_clk,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
 };
 
 /* DPLL_CORE */
@@ -191,29 +174,31 @@ static struct dpll_data dpll_core_dd = {
 	.mult_mask	= AM33XX_DPLL_MULT_MASK,
 	.div1_mask	= AM33XX_DPLL_DIV_MASK,
 	.enable_mask	= AM33XX_DPLL_EN_MASK,
-	.autoidle_mask	= AM33XX_AUTO_DPLL_MODE_MASK,
 	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
 	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
 	.max_divider	= AM33XX_MAX_DPLL_DIV,
 	.min_divider	= 1,
 };
 
+/* CLKDCOLDO output */
 static struct clk dpll_core_ck = {
 	.name		= "dpll_core_ck",
 	.parent		= &sys_clkin_ck,
 	.dpll_data	= &dpll_core_dd,
 	.init		= &omap2_init_dpll_parent,
-	.ops		= &clkops_null,
+	.ops		= &clkops_omap3_core_dpll_ops,
 	.recalc		= &omap3_dpll_recalc,
 };
 
 static struct clk dpll_core_x2_ck = {
 	.name		= "dpll_core_x2_ck",
 	.parent		= &dpll_core_ck,
+	.flags		= CLOCK_CLKOUTX2,
 	.ops		= &clkops_null,
 	.recalc		= &omap3_clkoutx2_recalc,
 };
 
+
 static const struct clksel dpll_core_m4_div[] = {
 	{ .parent = &dpll_core_x2_ck, .rates = div31_1to31_rates },
 	{ .parent = NULL },
@@ -231,1157 +216,1369 @@ static struct clk dpll_core_m4_ck = {
 	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk sysclk_div_ck = {
-	.name		= "sysclk_div_ck",
-	.parent		= &dpll_core_m4_ck,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
+static const struct clksel dpll_core_m5_div[] = {
+	{ .parent = &dpll_core_x2_ck, .rates = div31_1to31_rates },
+	{ .parent = NULL },
 };
 
-static struct clk div_l4_wkup_gclk_ck = {
-	.name		= "div_l4_wkup_gclk_ck",
-	.parent		= &dpll_core_m4_ck,
+static struct clk dpll_core_m5_ck = {
+	.name		= "dpll_core_m5_ck",
+	.parent		= &dpll_core_x2_ck,
+	.clksel		= dpll_core_m5_div,
+	.clksel_reg	= AM33XX_CM_DIV_M5_DPLL_CORE,
+	.clksel_mask	= AM33XX_HSDIVIDER_CLKOUT2_DIV_MASK,
 	.ops		= &clkops_null,
-	.fixed_div	= 2,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.recalc		= &omap2_clksel_recalc,
+	.round_rate	= &omap2_clksel_round_rate,
+	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk core_100m_ck = {
-	.name		= "core_100m_ck",
-	.parent		= &sysclk_div_ck,
-	.ops		= &clkops_null,
-	.fixed_div	= 2,
-	.recalc		= &omap_fixed_divisor_recalc,
+static const struct clksel dpll_core_m6_div[] = {
+	{ .parent = &dpll_core_x2_ck, .rates = div31_1to31_rates },
+	{ .parent = NULL },
 };
 
-static struct clk l4ls_fck = {
-	.name		= "l4ls_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_L4LS_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
-	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
+static struct clk dpll_core_m6_ck = {
+	.name		= "dpll_core_m6_ck",
+	.parent		= &dpll_core_x2_ck,
+	.clksel		= dpll_core_m6_div,
+	.clksel_reg	= AM33XX_CM_DIV_M6_DPLL_CORE,
+	.clksel_mask	= AM33XX_HSDIVIDER_CLKOUT3_DIV_MASK,
+	.ops		= &clkops_null,
+	.recalc		= &omap2_clksel_recalc,
+	.round_rate	= &omap2_clksel_round_rate,
+	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk timer2_ick = {
-	.name		= "timer2_ick",
-	.parent		= &l4ls_fck,
+static struct clk sysclk1_ck = {
+	.name		= "sysclk1_ck",
+	.parent		= &dpll_core_m4_ck,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer3_ick = {
-	.name		= "timer3_ick",
-	.parent		= &l4ls_fck,
+static struct clk sysclk2_ck = {
+	.name		= "sysclk2_ck",
+	.parent		= &dpll_core_m5_ck,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer4_ick = {
-	.name		= "timer4_ick",
-	.parent		= &l4ls_fck,
+static struct clk core_clk_out = {
+	.name		= "core_clk_out",
+	.parent		= &dpll_core_m4_ck,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer5_ick = {
-	.name		= "timer5_ick",
-	.parent		= &l4ls_fck,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
+/* DPLL_MPU */
+static struct dpll_data dpll_mpu_dd = {
+	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_MPU,
+	.clk_bypass	= &sys_clkin_ck,
+	.clk_ref	= &sys_clkin_ck,
+	.control_reg	= AM33XX_CM_CLKMODE_DPLL_MPU,
+	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
+	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_MPU,
+	.mult_mask	= AM33XX_DPLL_MULT_MASK,
+	.div1_mask	= AM33XX_DPLL_DIV_MASK,
+	.enable_mask	= AM33XX_DPLL_EN_MASK,
+	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
+	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
+	.max_divider	= AM33XX_MAX_DPLL_DIV,
+	.min_divider	= 1,
 };
 
-static struct clk timer6_ick = {
-	.name		= "timer6_ick",
-	.parent		= &l4ls_fck,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
+/* CLKOUT: fdpll/M2 */
+static struct clk dpll_mpu_ck = {
+	.name		= "dpll_mpu_ck",
+	.parent		= &sys_clkin_ck,
+	.dpll_data	= &dpll_mpu_dd,
+	.init		= &omap2_init_dpll_parent,
+	.ops		= &clkops_omap3_noncore_dpll_ops,
+	.recalc		= &omap3_dpll_recalc,
+	.round_rate	= &omap2_dpll_round_rate,
+	.set_rate	= &omap3_noncore_dpll_set_rate,
 };
 
-static struct clk timer7_ick = {
-	.name		= "timer7_ick",
-	.parent		= &l4ls_fck,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
+/*
+ * TODO: Add clksel here (sys_clkin, CORE_CLKOUTM6, PER_CLKOUTM2
+ * and ALT_CLK1/2)
+ */
+static const struct clksel dpll_mpu_m2_div[] = {
+	{ .parent = &dpll_mpu_ck, .rates = div31_1to31_rates },
+	{ .parent = NULL },
 };
 
-static struct clk lcdc_l3ick = {
-	.name		= "lcdc_ick_l3_clk",
-	.enable_reg	= AM33XX_CM_PER_L3_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.parent		= &dpll_core_m4_ck,
+static struct clk dpll_mpu_m2_ck = {
+	.name		= "dpll_mpu_m2_ck",
+	.parent		= &dpll_mpu_ck,
+	.clksel		= dpll_mpu_m2_div,
+	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_MPU,
+	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
 	.ops		= &clkops_null,
-	.clkdm_name	= "l3_clkdm",
-	.recalc		= &followparent_recalc,
+	.recalc		= &omap2_clksel_recalc,
+	.round_rate	= &omap2_clksel_round_rate,
+	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk lcdc_l4ick = {
-	.name		= "lcdc_ick_l4_clk",
-	.enable_reg	= AM33XX_CM_PER_L4LS_CLKCTRL,
+static struct clk mpu_fck = {
+	.name		= "mpu_fck",
+	.clkdm_name	= "mpu_clkdm",
+	.parent		= &dpll_mpu_m2_ck,
+	.ops		= &clkops_omap2_dflt,
+	.enable_reg	= AM33XX_CM_MPU_MPU_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.parent		= &dpll_core_m4_ck,
-	.ops		= &clkops_null,
-	.clkdm_name	= "l4ls_clkdm",
 	.recalc		= &followparent_recalc,
+	.flags		= ENABLE_ON_INIT,
 };
 
-/* Leaf clocks controlled by modules */
-static struct clk adc_tsc_fck = {
-	.name		= "adc_tsc_fck",
-	.ops		= &clkops_null,
+/* DPLL_DDR */
+static struct dpll_data dpll_ddr_dd = {
+	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_DDR,
+	.clk_bypass	= &sys_clkin_ck,
+	.clk_ref	= &sys_clkin_ck,
+	.control_reg	= AM33XX_CM_CLKMODE_DPLL_DDR,
+	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
+	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_DDR,
+	.mult_mask	= AM33XX_DPLL_MULT_MASK,
+	.div1_mask	= AM33XX_DPLL_DIV_MASK,
+	.enable_mask	= AM33XX_DPLL_EN_MASK,
+	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
+	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
+	.max_divider	= AM33XX_MAX_DPLL_DIV,
+	.min_divider	= 1,
+};
+
+/* CLKOUT: fdpll/M2 */
+static struct clk dpll_ddr_ck = {
+	.name		= "dpll_ddr_ck",
 	.parent		= &sys_clkin_ck,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.recalc		= &followparent_recalc,
+	.dpll_data	= &dpll_ddr_dd,
+	.init		= &omap2_init_dpll_parent,
+	.ops		= &clkops_null,
+	.recalc		= &omap3_dpll_recalc,
 };
 
-static struct clk adc_tsc_ick = {
-	.name		= "adc_tsc_ick",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_ADC_TSC_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.parent		= &div_l4_wkup_gclk_ck,
-	.recalc		= &followparent_recalc,
+/*
+ * TODO: Add clksel here (sys_clkin, CORE_CLKOUTM6, PER_CLKOUTM2
+ * and ALT_CLK1/2)
+ */
+static const struct clksel dpll_ddr_m2_div[] = {
+	{ .parent = &dpll_ddr_ck, .rates = div31_1to31_rates },
+	{ .parent = NULL },
 };
 
-static struct clk aes0_fck = {
-	.name		= "aes0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_AES0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
-	.recalc		= &followparent_recalc,
+static struct clk dpll_ddr_m2_ck = {
+	.name		= "dpll_ddr_m2_ck",
+	.parent		= &dpll_ddr_ck,
+	.clksel		= dpll_ddr_m2_div,
+	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_DDR,
+	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
+	.ops		= &clkops_null,
+	.recalc		= &omap2_clksel_recalc,
+	.round_rate	= &omap2_clksel_round_rate,
+	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk cefuse_fck = {
-	.name		= "cefuse_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_CEFUSE_CEFUSE_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_cefuse_clkdm",
-	.parent		= &sys_clkin_ck,
+static struct clk ddr_pll_clk = {
+	.name		= "ddr_pll_clk",
+	.parent		= &dpll_ddr_m2_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk clkdiv32k_fck = {
-	.name		= "clkdiv32k_fck",
+static struct clk emif_fck = {
+	.name		= "emif_fck",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &ddr_pll_clk,
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_CLKDIV32K_CLKCTRL,
+	.enable_reg	= AM33XX_CM_PER_EMIF_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "clk_24mhz_clkdm",
-	.parent		= &clk_div_24_ck,
-	.recalc		= &followparent_recalc,
+	.fixed_div	= 2,
+	.recalc		= &omap_fixed_divisor_recalc,
+	.flags		= ENABLE_ON_INIT,
 };
 
-static struct clk control_fck = {
-	.name		= "control_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_CONTROL_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.parent		= &div_l4_wkup_gclk_ck,
-	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
+/* DPLL_DISP */
+static struct dpll_data dpll_disp_dd = {
+	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_DISP,
+	.clk_bypass	= &sys_clkin_ck,
+	.clk_ref	= &sys_clkin_ck,
+	.control_reg	= AM33XX_CM_CLKMODE_DPLL_DISP,
+	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
+	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_DISP,
+	.mult_mask	= AM33XX_DPLL_MULT_MASK,
+	.div1_mask	= AM33XX_DPLL_DIV_MASK,
+	.enable_mask	= AM33XX_DPLL_EN_MASK,
+	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
+	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
+	.max_divider	= AM33XX_MAX_DPLL_DIV,
+	.min_divider	= 1,
 };
 
-static struct clk dcan0_fck = {
-	.name		= "dcan0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_DCAN0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
+/* CLKOUT: fdpll/M2 */
+static struct clk dpll_disp_ck = {
+	.name		= "dpll_disp_ck",
 	.parent		= &sys_clkin_ck,
-	.recalc		= &followparent_recalc,
+	.dpll_data	= &dpll_disp_dd,
+	.init		= &omap2_init_dpll_parent,
+	.ops		= &clkops_null,
+	.recalc		= &omap3_dpll_recalc,
+	.round_rate	= &omap2_dpll_round_rate,
+	.set_rate	= &omap3_noncore_dpll_set_rate,
 };
 
-static struct clk dcan1_fck = {
-	.name		= "dcan1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_DCAN1_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &sys_clkin_ck,
-	.recalc		= &followparent_recalc,
+/*
+ * TODO: Add clksel here (sys_clkin, CORE_CLKOUTM6, PER_CLKOUTM2
+ * and ALT_CLK1/2)
+ */
+static const struct clksel dpll_disp_m2_div[] = {
+	{ .parent = &dpll_disp_ck, .rates = div31_1to31_rates },
+	{ .parent = NULL },
 };
 
-static struct clk dcan0_ick = {
-	.name		= "dcan0_ick",
-	.parent		= &dpll_per_m2_ck ,
+static struct clk dpll_disp_m2_ck = {
+	.name		= "dpll_disp_m2_ck",
+	.parent		= &dpll_disp_ck,
+	.clksel		= dpll_disp_m2_div,
+	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_DISP,
+	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
 	.ops		= &clkops_null,
-	.clkdm_name	= "l4ls_clkdm",
-	.recalc		= &followparent_recalc,
+	.recalc		= &omap2_clksel_recalc,
+	.round_rate	= &omap2_clksel_round_rate,
+	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk dcan1_ick = {
-	.name		= "dcan1_ick",
-	.parent		= &dpll_per_m2_ck ,
+static struct clk disp_pll_clk = {
+	.name		= "disp_pll_clk",
+	.parent		= &dpll_disp_m2_ck,
 	.ops		= &clkops_null,
-	.clkdm_name	= "l4ls_clkdm",
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk debugss_fck = {
-	.name		= "debugss_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_DEBUGSS_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_aon_clkdm",
-	.parent		= &dpll_core_m4_ck,
-	.recalc		= &followparent_recalc,
+/* DPLL_PER */
+static struct dpll_data dpll_per_dd = {
+	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_PERIPH,
+	.clk_bypass	= &sys_clkin_ck,
+	.clk_ref	= &sys_clkin_ck,
+	.control_reg	= AM33XX_CM_CLKMODE_DPLL_PER,
+	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
+	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_PER,
+	.mult_mask	= AM33XX_DPLL_MULT_PERIPH_MASK,
+	.div1_mask	= AM33XX_DPLL_PER_DIV_MASK,
+	.enable_mask	= AM33XX_DPLL_EN_MASK,
+	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
+	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
+	.max_divider	= AM33XX_MAX_DPLL_DIV,
+	.min_divider	= 1,
+	.flags		= DPLL_J_TYPE,
 };
 
-static struct clk elm_fck = {
-	.name		= "elm_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_ELM_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
-	.recalc		= &followparent_recalc,
+/* CLKDCOLDO */
+static struct clk dpll_per_ck = {
+	.name		= "dpll_per_ck",
+	.parent		= &sys_clkin_ck,
+	.dpll_data	= &dpll_per_dd,
+	.init		= &omap2_init_dpll_parent,
+	.ops		= &clkops_null,
+	.recalc		= &omap3_dpll_recalc,
+	.round_rate	= &omap2_dpll_round_rate,
+	.set_rate	= &omap3_noncore_dpll_set_rate,
 };
 
-static struct clk emif_fw_fck = {
-	.name		= "emif_fw_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_EMIF_FW_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4fw_clkdm",
-	.parent		= &core_100m_ck,
-	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
+/* CLKOUT: fdpll/M2 */
+static const struct clksel dpll_per_m2_div[] = {
+	{ .parent = &dpll_per_ck, .rates = div31_1to31_rates },
+	{ .parent = NULL },
 };
 
-static struct clk epwmss0_fck = {
-	.name		= "epwmss0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_EPWMSS0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
-	.recalc		= &followparent_recalc,
+static struct clk dpll_per_m2_ck = {
+	.name		= "dpll_per_m2_ck",
+	.parent		= &dpll_per_ck,
+	.clksel		= dpll_per_m2_div,
+	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_PER,
+	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
+	.ops		= &clkops_null,
+	.recalc		= &omap2_clksel_recalc,
+	.round_rate	= &omap2_clksel_round_rate,
+	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk epwmss1_fck = {
-	.name		= "epwmss1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_EPWMSS1_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+static struct clk per_192mhz_clk = {
+	.name		= "per_192mhz_clk",
+	.parent		= &dpll_per_m2_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk epwmss2_fck = {
-	.name		= "epwmss2_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_EPWMSS2_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+static struct clk usb_pll_clk = {
+	.name		= "usb_pll_clk",
+	.parent		= &dpll_per_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk gpio0_fck = {
-	.name		= "gpio0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_GPIO0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.parent		= &div_l4_wkup_gclk_ck,
+static struct clk core_100mhz_ck = {
+	.name		= "core_100mhz_ck",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
+	.fixed_div	= 2,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk l3_aon_gclk = {
+	.name		= "l3_aon_gclk",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk gpio1_fck = {
-	.name		= "gpio1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_GPIO1_CLKCTRL,
+static struct clk l4_wkup_aon_gclk = {
+	.name		= "l4_wkup_aon_gclk",
+	.clkdm_name	= "l4_wkup_aon_clkdm",
+	.parent		= &sysclk1_ck,
+	.enable_reg	= AM33XX_CM_L4_WKUP_AON_CLKSTCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.ops		= &clkops_null,
+	.fixed_div	= 2,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk gpio2_fck = {
-	.name		= "gpio2_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_GPIO2_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+static struct clk l3_gclk = {
+	.name		= "l3_gclk",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk gpio3_fck = {
-	.name		= "gpio3_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_GPIO3_CLKCTRL,
+static struct clk l3_ick = {
+	.name		= "l3_ick",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_L3_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.flags		= ENABLE_ON_INIT,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk gpmc_fck = {
-	.name		= "gpmc_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_GPMC_CLKCTRL,
+static struct clk l3_instr_ick = {
+	.name		= "l3_instr_ick",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_L3_INSTR_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3s_clkdm",
-	.parent		= &core_100m_ck,
+	.flags		= ENABLE_ON_INIT,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk i2c1_fck = {
-	.name		= "i2c1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_I2C0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.parent		= &dpll_per_m2_ck,
-	.fixed_div	= 4,
+static struct clk l4_wkup_gclk = {
+	.name		= "l4_wkup_gclk",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
+	.fixed_div	= 2,
 	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk i2c2_fck = {
-	.name		= "i2c2_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_I2C1_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &i2c_clk,
+static struct clk l4hs_gclk = {
+	.name		= "l4hs_gclk",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk i2c3_fck = {
-	.name		= "i2c3_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_I2C2_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &i2c_clk,
+static struct clk gfx_l3_gclk = {
+	.name		= "gfx_l3_gclk",
+	.clkdm_name	= "gfx_l3_clkdm",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk icss_fck = {
-	.name		= "icss_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_ICSS_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "icss_ocp_clkdm",
-	.parent		= &dpll_per_m2_ck,
+static struct clk debug_clka_gclk = {
+	.name		= "debug_clka_gclk",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk ieee5000_fck = {
-	.name		= "ieee5000_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_IEEE5000_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3s_clkdm",
-	.parent		= &core_100m_ck,
-	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
+static struct clk l4_rtc_gclk = {
+	.name		= "l4_rtc_gclk",
+	.parent		= &sysclk1_ck,
+	.ops		= &clkops_null,
+	.fixed_div	= 2,
+	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk l3_instr_fck = {
-	.name		= "l3_instr_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_L3_INSTR_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
+static struct clk rtc_ick = {
+	.name		= "rtc_ick",
+	.parent		= &l4_rtc_gclk,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
 };
 
-static struct clk l3_main_fck = {
-	.name		= "l3_main_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_L3_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
+static struct clk l3s_gclk = {
+	.name		= "l3s_gclk",
+	.parent		= &core_100mhz_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
 };
 
-static struct clk l4_hs_fck = {
-	.name		= "l4_hs_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_L4HS_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4hs_clkdm",
-	.parent		= &sysclk_div_ck,
+static struct clk l4fw_gclk = {
+	.name		= "l4fw_gclk",
+	.parent		= &core_100mhz_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
 };
 
-static struct clk l4fw_fck = {
-	.name		= "l4fw_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_L4FW_CLKCTRL,
+static struct clk l4ls_gclk = {
+	.name		= "l4ls_gclk",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &core_100mhz_ck,
+	.enable_reg	= AM33XX_CM_PER_L4LS_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4fw_clkdm",
-	.parent		= &core_100m_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
 };
 
-static struct clk l4wkup_fck = {
-	.name		= "l4wkup_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_L4_WKUP_AON_CLKSTCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_aon_clkdm",
-	.parent		= &div_l4_wkup_gclk_ck,
+static struct clk clk_24mhz = {
+	.name		= "clk_24mhz",
+	.parent		= &per_192mhz_clk,
+	.fixed_div	= 8,
+	.ops		= &clkops_null,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk l4_cefuse_gclk = {
+	.name		= "l4_cefsue_gclk",
+	.parent		= &core_100mhz_ck,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
 };
 
-static struct clk mailbox0_fck = {
-	.name		= "mailbox0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MAILBOX0_CLKCTRL,
+static struct clk cefuse_iclk = {
+	.name		= "cefuse_iclk",
+	.clkdm_name	= "l4_cefuse_clkdm",
+	.parent		= &l4_cefuse_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk cefuse_fck = {
+	.name		= "cefuse_fck",
+	.clkdm_name	= "l4_cefuse_clkdm",
+	.parent		= &sys_clkin_ck,
+	.enable_reg	= AM33XX_CM_CEFUSE_CEFUSE_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mcasp0_ick = {
-	.name		= "mcasp0_ick",
-	.parent		= &l3_main_fck,
+static struct clk sysclk_div_ck = {
+	.name		= "sysclk_div_ck",
+	.parent		= &dpll_core_m4_ck,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mcasp1_ick = {
-	.name		= "mcasp1_ick",
-	.parent		= &l3_main_fck,
+static struct clk adc_tsc_fck = {
+	.name		= "adc_tsc_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &sys_clkin_ck,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mcasp0_fck = {
-	.name		= "mcasp0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MCASP0_CLKCTRL,
+static struct clk adc_tsc_ick = {
+	.name		= "adc_tsc_ick",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &l4_wkup_gclk,
+	.enable_reg	= AM33XX_CM_WKUP_ADC_TSC_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3s_clkdm",
-	.parent		= &sys_clkin_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mcasp1_fck = {
-	.name		= "mcasp1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MCASP1_CLKCTRL,
+static struct clk aes0_fck = {
+	.name		= "aes0_fck",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_AES0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3s_clkdm",
-	.parent		= &sys_clkin_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mlb_fck = {
-	.name		= "mlb_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MLB_CLKCTRL,
+static struct clk clkdiv32k_ick = {
+	.name		= "clkdiv32k_ick",
+	.clkdm_name	= "clk_24mhz_clkdm",
+	.parent		= &clk_24mhz,
+	.enable_reg	= AM33XX_CM_PER_CLKDIV32K_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mmu_fck = {
-	.name		= "mmu_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_GFX_MMUDATA_CLKCTRL,
+static struct clk control_fck = {
+	.name		= "control_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &l4_wkup_gclk,
+	.enable_reg	= AM33XX_CM_WKUP_CONTROL_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "gfx_l3_clkdm",
-	.parent		= &dpll_core_m4_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-
-static struct clk mstr_exps_fck = {
-	.name		= "mstr_exps_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MSTR_EXPS_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
+static struct clk dcan0_ick = {
+	.name		= "dcan0_ick",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk ocmcram_fck = {
-	.name		= "ocmcram_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_OCMCRAM_CLKCTRL,
+static struct clk dcan0_fck = {
+	.name		= "dcan0_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &sys_clkin_ck,
+	.enable_reg	= AM33XX_CM_PER_DCAN0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk ocpwp_fck = {
-	.name		= "ocpwp_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_OCPWP_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+static struct clk dcan1_ick = {
+	.name		= "dcan1_ick",
 	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk pka_fck = {
-	.name		= "pka_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_PKA_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+static struct clk dcan1_fck = {
+	.name		= "dcan1_fck",
 	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.parent		= &sys_clkin_ck,
+	.enable_reg	= AM33XX_CM_PER_DCAN1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk rng_fck = {
-	.name		= "rng_fck",
+static struct clk debugss_ick = {
+	.name		= "debugss_ick",
+	.clkdm_name	= "l3_aon_clkdm",
+	.parent		= &l3_aon_gclk,
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_RNG_CLKCTRL,
+	.enable_reg	= AM33XX_CM_WKUP_DEBUGSS_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk rtc_fck = {
-	.name		= "rtc_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_RTC_RTC_CLKCTRL,
+static struct clk elm_fck = {
+	.name		= "elm_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_ELM_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_rtc_clkdm",
-	.parent		= &clk_32khz_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk sha0_fck = {
-	.name		= "sha0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_SHA0_CLKCTRL,
+static struct clk emif_fw_fck = {
+	.name		= "emif_fw_fck",
+	.clkdm_name	= "l4fw_clkdm",
+	.parent		= &l4fw_gclk,
+	.enable_reg	= AM33XX_CM_PER_EMIF_FW_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk slv_exps_fck = {
-	.name		= "slv_exps_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_SLV_EXPS_CLKCTRL,
+static struct clk epwmss0_fck = {
+	.name		= "epwmss0_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_EPWMSS0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &sysclk_div_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk smartreflex0_fck = {
-	.name		= "smartreflex0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_SMARTREFLEX0_CLKCTRL,
+static struct clk epwmss1_fck = {
+	.name		= "epwmss1_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_EPWMSS1_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.parent		= &sys_clkin_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk smartreflex1_fck = {
-	.name		= "smartreflex1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_SMARTREFLEX1_CLKCTRL,
+static struct clk epwmss2_fck = {
+	.name		= "epwmss2_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_EPWMSS2_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.parent		= &sys_clkin_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk spare0_fck = {
-	.name		= "spare0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_SPARE0_CLKCTRL,
+static struct clk gpmc_fck = {
+	.name		= "gpmc_fck",
+	.clkdm_name	= "l3s_clkdm",
+	.parent		= &l3s_gclk,
+	.enable_reg	= AM33XX_CM_PER_GPMC_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk spare1_fck = {
-	.name		= "spare1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_SPARE1_CLKCTRL,
+static struct clk i2c1_ick = {
+	.name		= "i2c1_ick",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &l4_wkup_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk i2c1_fck = {
+	.name		= "i2c1_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_WKUP_I2C0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk i2c2_ick = {
+	.name		= "i2c2_ick",
 	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk spi0_fck = {
-	.name		= "spi0_fck",
-	.parent		= &dpll_per_m2_ck ,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_SPI0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+static struct clk i2c2_fck = {
+	.name		= "i2c2_fck",
 	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_I2C1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk spi1_fck = {
-	.name		= "spi1_fck",
-	.parent		= &dpll_per_m2_ck ,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_SPI1_CLKCTRL,
+static struct clk i2c3_ick = {
+	.name		= "i2c3_ick",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk i2c3_fck = {
+	.name		= "i2c3_fck",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_I2C2_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.clkdm_name	= "l4ls_clkdm",
 	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk spi0_ick = {
-	.name		= "spi0_ick",
-	.parent		= &l4ls_fck,
-	.ops		= &clkops_null,
+static struct clk ieee5000_fck = {
+	.name		= "ieee5000_fck",
+	.clkdm_name	= "l3s_clkdm",
+	.parent		= &l3s_gclk,
+	.enable_reg	= AM33XX_CM_PER_IEEE5000_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk spi1_ick = {
-	.name		= "spi1_ick",
-	.parent		= &l4ls_fck,
-	.ops		= &clkops_null,
+static struct clk l4hs_ick = {
+	.name		= "l4hs_ick",
+	.clkdm_name	= "l4hs_clkdm",
+	.parent		= &l4hs_gclk,
+	.enable_reg	= AM33XX_CM_PER_L4HS_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.flags		= ENABLE_ON_INIT,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk spinlock_fck = {
-	.name		= "spinlock_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_SPINLOCK_CLKCTRL,
+static struct clk l4wkup_ick = {
+	.name		= "l4wkup_ick",
+	.clkdm_name	= "l4_wkup_aon_clkdm",
+	.parent		= &l4_wkup_aon_gclk,
+	.enable_reg	= AM33XX_CM_L4_WKUP_AON_CLKSTCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.parent		= &core_100m_ck,
+	.flags		= ENABLE_ON_INIT,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static const struct clksel timer2_to_7_clk_sel[] = {
-	{ .parent = &tclkin_ck, .rates = div_1_0_rates },
-	{ .parent = &sys_clkin_ck, .rates = div_1_1_rates },
-	{ .parent = &clk_32khz_ck, .rates = div_1_2_rates },
-	{ .parent = NULL },
+static struct clk l4fw_ick = {
+	.name		= "l4fw_ick",
+	.clkdm_name	= "l4fw_clkdm",
+	.parent		= &core_100mhz_ck,
+	.enable_reg	= AM33XX_CM_PER_L4FW_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.flags		= ENABLE_ON_INIT,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer2_fck = {
-	.name		= "timer2_fck",
-	.parent		= &sys_clkin_ck,
-	.init		= &omap2_init_clksel_parent,
-	.clksel		= timer2_to_7_clk_sel,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TIMER2_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_TIMER2_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+static struct clk l4ls_ick = {
+	.name		= "l4ls_ick",
 	.clkdm_name	= "l4ls_clkdm",
-	.recalc		= &omap2_clksel_recalc,
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_L4LS_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.flags		= ENABLE_ON_INIT,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer3_fck = {
-	.name		= "timer3_fck",
-	.parent		= &sys_clkin_ck,
-	.init		= &am33xx_init_timer_parent,
-	.clksel		= timer2_to_7_clk_sel,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TIMER3_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_TIMER3_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+static struct clk mailbox0_fck = {
+	.name		= "mailbox0_fck",
 	.clkdm_name	= "l4ls_clkdm",
-	.recalc		= &omap2_clksel_recalc,
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_MAILBOX0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer4_fck = {
-	.name		= "timer4_fck",
-	.parent		= &sys_clkin_ck,
-	.init		= &omap2_init_clksel_parent,
-	.clksel		= timer2_to_7_clk_sel,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TIMER4_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_TIMER4_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
-	.clkdm_name	= "l4ls_clkdm",
-	.recalc		= &omap2_clksel_recalc,
+static struct clk mcasp0_ick = {
+	.name		= "mcasp0_ick",
+	.parent		= &l3s_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer5_fck = {
-	.name		= "timer5_fck",
+static struct clk mcasp0_fck = {
+	.name		= "mcasp0_fck",
+	.clkdm_name	= "l3s_clkdm",
 	.parent		= &sys_clkin_ck,
-	.init		= &omap2_init_clksel_parent,
-	.clksel		= timer2_to_7_clk_sel,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TIMER5_CLKCTRL,
+	.enable_reg	= AM33XX_CM_PER_MCASP0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_TIMER5_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
-	.clkdm_name	= "l4ls_clkdm",
-	.recalc		= &omap2_clksel_recalc,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer6_fck = {
-	.name		= "timer6_fck",
-	.parent		= &sys_clkin_ck,
-	.init		= &am33xx_init_timer_parent,
-	.clksel		= timer2_to_7_clk_sel,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TIMER6_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_TIMER6_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
-	.clkdm_name	= "l4ls_clkdm",
-	.recalc		= &omap2_clksel_recalc,
+static struct clk mcasp1_ick = {
+	.name		= "mcasp1_ick",
+	.parent		= &l3s_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer7_fck = {
-	.name		= "timer7_fck",
+static struct clk mcasp1_fck = {
+	.name		= "mcasp1_fck",
+	.clkdm_name	= "l3s_clkdm",
 	.parent		= &sys_clkin_ck,
-	.init		= &omap2_init_clksel_parent,
-	.clksel		= timer2_to_7_clk_sel,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TIMER7_CLKCTRL,
+	.enable_reg	= AM33XX_CM_PER_MCASP1_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_TIMER7_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
-	.clkdm_name	= "l4ls_clkdm",
-	.recalc		= &omap2_clksel_recalc,
-};
-
-static struct clk tpcc_ick = {
-	.name		= "tpcc_ick",
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TPCC_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &l3_main_fck,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk tptc0_ick = {
-	.name		= "tptc0_ick",
+static struct clk mlb_fck = {
+	.name		= "mlb_fck",
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TPTC0_CLKCTRL,
+	.enable_reg	= AM33XX_CM_PER_MLB_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.clkdm_name	= "l3_clkdm",
-	.parent		= &l3_main_fck,
+	.parent		= &sysclk_div_ck,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk tptc1_ick = {
-	.name		= "tptc1_ick",
+static struct clk mmu_fck = {
+	.name		= "mmu_fck",
+	.clkdm_name	= "gfx_l3_clkdm",
+	.parent		= &gfx_l3_gclk,
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TPTC1_CLKCTRL,
+	.enable_reg	= AM33XX_CM_GFX_MMUDATA_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l3_clkdm",
-	.parent		= &l3_main_fck,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk tptc2_ick = {
-	.name		= "tptc2_ick",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_TPTC2_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+static struct clk ocmcram_ick = {
+	.name		= "ocmcram_ick",
 	.clkdm_name	= "l3_clkdm",
-	.parent		= &l3_main_fck,
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_OCMCRAM_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart1_fck = {
-	.name		= "uart1_fck",
-	.parent		= &dpll_per_m2_ck ,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_UART0_CLKCTRL,
+static struct clk ocpwp_fck = {
+	.name		= "ocpwp_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_OCPWP_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.fixed_div	= 4,
-	.recalc		= &omap_fixed_divisor_recalc,
-};
-
-static struct clk uart2_fck = {
-	.name		= "uart2_fck",
-	.parent		= &dpll_per_m2_ck ,
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_UART1_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.fixed_div	= 4,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart3_fck = {
-	.name		= "uart3_fck",
-	.parent		= &dpll_per_m2_ck ,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_UART2_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+static struct clk pka_fck = {
+	.name		= "pka_fck",
 	.clkdm_name	= "l4ls_clkdm",
-	.fixed_div	= 4,
-	.recalc		= &omap_fixed_divisor_recalc,
-};
-
-static struct clk uart4_fck = {
-	.name		= "uart4_fck",
-	.parent		= &dpll_per_m2_ck ,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_UART3_CLKCTRL,
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_PKA_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.fixed_div	= 4,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart5_fck = {
-	.name		= "uart5_fck",
-	.parent		= &dpll_per_m2_ck ,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_UART4_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+static struct clk rng_fck = {
+	.name		= "rng_fck",
 	.clkdm_name	= "l4ls_clkdm",
-	.fixed_div	= 4,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_RNG_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart6_fck = {
-	.name		= "uart6_fck",
-	.parent		= &dpll_per_m2_ck ,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_UART5_CLKCTRL,
+static struct clk rtc_fck = {
+	.name		= "rtc_fck",
+	.clkdm_name	= "l4_rtc_clkdm",
+	.parent		= &clk_32khz_ck,
+	.enable_reg	= AM33XX_CM_RTC_RTC_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4ls_clkdm",
-	.fixed_div	= 4,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart1_ick = {
-	.name		= "uart1_ick",
-	.parent		= &div_l4_wkup_gclk_ck,
-	.ops		= &clkops_null,
+static struct clk sha0_fck = {
+	.name		= "sha0_fck",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_SHA0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart2_ick = {
-	.name		= "uart2_ick",
-	.parent		= &l4ls_fck,
+static struct clk smartreflex0_ick = {
+	.name		= "smartreflex0_ick",
+	.parent		= &l4_wkup_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart3_ick = {
-	.name		= "uart3_ick",
-	.parent		= &l4ls_fck,
-	.ops		= &clkops_null,
+static struct clk smartreflex0_fck = {
+	.name		= "smartreflex0_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &sys_clkin_ck,
+	.enable_reg	= AM33XX_CM_WKUP_SMARTREFLEX0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart4_ick = {
-	.name		= "uart4_ick",
-	.parent		= &l4ls_fck,
+static struct clk smartreflex1_ick = {
+	.name		= "smartreflex1_ick",
+	.parent		= &l4_wkup_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart5_ick = {
-	.name		= "uart5_ick",
-	.parent		= &l4ls_fck,
-	.ops		= &clkops_null,
+static struct clk smartreflex1_fck = {
+	.name		= "smartreflex1_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &sys_clkin_ck,
+	.enable_reg	= AM33XX_CM_WKUP_SMARTREFLEX1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk uart6_ick = {
-	.name		= "uart6_ick",
-	.parent		= &l4ls_fck,
+static struct clk spi0_ick = {
+	.name		= "spi0_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk wkup_m3_fck = {
-	.name		= "wkup_m3_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_WKUP_M3_CLKCTRL,
+static struct clk spi0_fck = {
+	.name		= "spi0_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_SPI0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_aon_clkdm",
-	.parent		= &div_l4_wkup_gclk_ck,
-	.recalc		= &followparent_recalc,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk dpll_core_m5_ck = {
-	.name		= "dpll_core_m5_ck",
-	.parent		= &dpll_core_x2_ck,
-	.clksel		= dpll_core_m4_div,
-	.clksel_reg	= AM33XX_CM_DIV_M5_DPLL_CORE,
-	.clksel_mask	= AM33XX_HSDIVIDER_CLKOUT2_DIV_MASK,
+static struct clk spi1_ick = {
+	.name		= "spi1_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
-	.recalc		= &omap2_clksel_recalc,
-	.round_rate	= &omap2_clksel_round_rate,
-	.set_rate	= &omap2_clksel_set_rate,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk cpsw_250m_clkdiv_ck = {
-	.name		= "cpsw_250m_clkdiv_ck",
-	.parent		= &dpll_core_m5_ck,
-	.ops		= &clkops_null,
+static struct clk spi1_fck = {
+	.name		= "spi1_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_SPI1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk spinlock_fck = {
+	.name		= "spinlock_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_SPINLOCK_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk cpsw_125mhz_ocp_ck = {
-	.name		= "cpsw_125mhz_ocp_ck",
-	.parent		= &dpll_core_m5_ck,
+static struct clk clk_32khz_timer = {
+	.name		= "clk_32khz_timer",
+	.parent		= &clk_32khz_ck,
 	.ops		= &clkops_null,
-	.fixed_div	= 2,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk cpsw_50m_clkdiv_ck = {
-	.name		= "cpsw_50m_clkdiv_ck",
-	.parent		= &dpll_core_m5_ck,
+/* Timers */
+
+/* Secure Timer: Used only to disable the clocks and for completeness */
+static const struct clksel timer0_clkmux_sel[] = {
+	{ .parent = &clk_rc32k_ck, .rates = div_1_0_rates },
+	{ .parent = &clk_32khz_ck, .rates = div_1_1_rates },
+	{ .parent = &sys_clkin_ck, .rates = div_1_2_rates },
+	{ .parent = &tclkin_ck, .rates = div_1_3_rates },
+	{ .parent = NULL },
+};
+
+static struct clk timer0_ick = {
+	.name		= "timer0_ick",
+	.parent		= &l4_wkup_gclk,
 	.ops		= &clkops_null,
-	.fixed_div	= 5,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk cpgmac0_fck = {
-	.name		= "cpgmac0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_CPGMAC0_CLKCTRL,
+static struct clk timer0_fck = {
+	.name		= "timer0_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &clk_rc32k_ck,
+	.clksel		= timer0_clkmux_sel,
+	.enable_reg	= AM33XX_CM_WKUP_TIMER0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "cpsw_125mhz_clkdm",
-	.parent		= &cpsw_125mhz_ocp_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk cpsw_5m_clkdiv_ck = {
-	.name		= "cpsw_5m_clkdiv_ck",
-	.parent		= &cpsw_50m_clkdiv_ck,
+static const struct clksel timer1_clkmux_sel[] = {
+	{ .parent = &sys_clkin_ck, .rates = div_1_0_rates },
+	{ .parent = &clk_32khz_ck, .rates = div_1_1_rates },
+	{ .parent = &tclkin_ck, .rates = div_1_2_rates },
+	{ .parent = &clk_rc32k_ck, .rates = div_1_3_rates },
+	{ .parent = &clk_32768_ck, .rates = div_1_4_rates },
+	{ .parent = NULL },
+};
+
+static struct clk timer1_ick = {
+	.name		= "timer1_ick",
+	.parent		= &l4_wkup_gclk,
 	.ops		= &clkops_null,
-	.fixed_div	= 10,
-	.recalc		= &omap_fixed_divisor_recalc,
+	.recalc		= &followparent_recalc,
 };
 
+static struct clk timer1_fck = {
+	.name		= "timer1_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &sys_clkin_ck,
+	.init		= &omap2_init_clksel_parent,
+	.clksel		= timer1_clkmux_sel,
+	.enable_reg	= AM33XX_CM_WKUP_TIMER1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.clksel_reg	= AM33XX_CLKSEL_TIMER1MS_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_2_MASK,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap2_clksel_recalc,
+};
 
-static const struct clksel cpts_rft_clkmux_sel[] = {
-	{ .parent = &dpll_core_m5_ck, .rates = div_1_0_rates },
-	{ .parent = &dpll_core_m4_ck, .rates = div_1_1_rates },
+static const struct clksel timer2_to_7_clk_sel[] = {
+	{ .parent = &tclkin_ck, .rates = div_1_0_rates },
+	{ .parent = &sys_clkin_ck, .rates = div_1_1_rates },
+	{ .parent = &clk_32khz_timer, .rates = div_1_2_rates },
 	{ .parent = NULL },
 };
 
-static struct clk cpts_rft_clkmux_ck = {
-	.name		= "cpts_rft_clkmux_ck",
-	.parent		= &dpll_core_m5_ck,
+static struct clk timer2_ick = {
+	.name		= "timer2_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
+static struct clk timer2_fck = {
+	.name		= "timer2_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &sys_clkin_ck,
+	.init		= &omap2_init_clksel_parent,
+	.clksel		= timer2_to_7_clk_sel,
+	.enable_reg	= AM33XX_CM_PER_TIMER2_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.clksel_reg	= AM33XX_CLKSEL_TIMER2_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap2_clksel_recalc,
+};
 
+static struct clk timer3_ick = {
+	.name		= "timer3_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
 
-/* DPLL_DDR */
-static struct dpll_data dpll_ddr_dd = {
-	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_DDR,
-	.clk_bypass	= &sys_clkin_ck,
-	.clk_ref	= &sys_clkin_ck,
-	.control_reg	= AM33XX_CM_CLKMODE_DPLL_DDR,
-	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
-	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_DDR,
-	.mult_mask	= AM33XX_DPLL_MULT_MASK,
-	.div1_mask	= AM33XX_DPLL_DIV_MASK,
-	.enable_mask	= AM33XX_DPLL_EN_MASK,
-	.autoidle_mask	= AM33XX_AUTO_DPLL_MODE_MASK,
-	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
-	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
-	.max_divider	= AM33XX_MAX_DPLL_DIV,
-	.min_divider	= 1,
+static struct clk timer3_fck = {
+	.name		= "timer3_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &sys_clkin_ck,
+	.init		= &am33xx_init_timer_parent,
+	.clksel		= timer2_to_7_clk_sel,
+	.enable_reg	= AM33XX_CM_PER_TIMER3_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.clksel_reg	= AM33XX_CLKSEL_TIMER3_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap2_clksel_recalc,
 };
 
+static struct clk timer4_ick = {
+	.name		= "timer4_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
 
-static struct clk dpll_ddr_ck = {
-	.name		= "dpll_ddr_ck",
+static struct clk timer4_fck = {
+	.name		= "timer4_fck",
+	.clkdm_name	= "l4ls_clkdm",
 	.parent		= &sys_clkin_ck,
-	.dpll_data	= &dpll_ddr_dd,
-	.init		= &omap2_init_dpll_parent,
+	.init		= &omap2_init_clksel_parent,
+	.clksel		= timer2_to_7_clk_sel,
+	.enable_reg	= AM33XX_CM_PER_TIMER4_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.clksel_reg	= AM33XX_CLKSEL_TIMER4_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap2_clksel_recalc,
+};
+
+static struct clk timer5_ick = {
+	.name		= "timer5_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
-	.recalc		= &omap3_dpll_recalc,
+	.recalc		= &followparent_recalc,
 };
 
-static const struct clksel dpll_ddr_m2_div[] = {
-	{ .parent = &dpll_ddr_ck, .rates = div31_1to31_rates },
-	{ .parent = NULL },
+static struct clk timer5_fck = {
+	.name		= "timer5_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &sys_clkin_ck,
+	.init		= &omap2_init_clksel_parent,
+	.clksel		= timer2_to_7_clk_sel,
+	.enable_reg	= AM33XX_CM_PER_TIMER5_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.clksel_reg	= AM33XX_CLKSEL_TIMER5_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap2_clksel_recalc,
 };
 
-static struct clk dpll_ddr_m2_ck = {
-	.name		= "dpll_ddr_m2_ck",
-	.parent		= &dpll_ddr_ck,
-	.clksel		= dpll_ddr_m2_div,
-	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_DDR,
-	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
+static struct clk timer6_ick = {
+	.name		= "timer6_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk timer6_fck = {
+	.name		= "timer6_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &sys_clkin_ck,
+	.init		= &am33xx_init_timer_parent,
+	.clksel		= timer2_to_7_clk_sel,
+	.enable_reg	= AM33XX_CM_PER_TIMER6_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.clksel_reg	= AM33XX_CLKSEL_TIMER6_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &omap2_clksel_recalc,
-	.round_rate	= &omap2_clksel_round_rate,
-	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static struct clk ddr_pll_div_clk = {
-	.name		= "ddr_pll_div_clk",
-	.parent		= &dpll_ddr_m2_ck,
+static struct clk timer7_ick = {
+	.name		= "timer7_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk emif_fck = {
-	.name		= "emif_fck",
+static struct clk timer7_fck = {
+	.name		= "timer7_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &sys_clkin_ck,
+	.init		= &omap2_init_clksel_parent,
+	.clksel		= timer2_to_7_clk_sel,
+	.enable_reg	= AM33XX_CM_PER_TIMER7_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.clksel_reg	= AM33XX_CLKSEL_TIMER7_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_EMIF_CLKCTRL,
+	.recalc		= &omap2_clksel_recalc,
+};
+
+static struct clk tpcc_ick = {
+	.name		= "tpcc_ick",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_TPCC_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk tptc0_ick = {
+	.name		= "tptc0_ick",
+	.parent		= &l3_gclk,
 	.clkdm_name	= "l3_clkdm",
-	.parent		= &ddr_pll_div_clk,
+	.enable_reg	= AM33XX_CM_PER_TPTC0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
 };
 
-static struct clk div_l4_rtc_gclk_ck = {
-	.name		= "div_l4_rtc_gclk_ck",
-	.parent		= &dpll_core_m4_ck,
+static struct clk tptc1_ick = {
+	.name		= "tptc1_ick",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_TPTC1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk tptc2_ick = {
+	.name		= "tptc2_ick",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &l3_gclk,
+	.enable_reg	= AM33XX_CM_PER_TPTC2_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk uart1_ick = {
+	.name		= "uart1_ick",
+	.parent		= &l4_wkup_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-/* DPLL_DISP */
-static struct dpll_data dpll_disp_dd = {
-	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_DISP,
-	.clk_bypass	= &sys_clkin_ck,
-	.clk_ref	= &sys_clkin_ck,
-	.control_reg	= AM33XX_CM_CLKMODE_DPLL_DISP,
-	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
-	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_DISP,
-	.mult_mask	= AM33XX_DPLL_MULT_MASK,
-	.div1_mask	= AM33XX_DPLL_DIV_MASK,
-	.enable_mask	= AM33XX_DPLL_EN_MASK,
-	.autoidle_mask	= AM33XX_AUTO_DPLL_MODE_MASK,
-	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
-	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
-	.max_divider	= AM33XX_MAX_DPLL_DIV,
-	.min_divider	= 1,
+static struct clk uart1_fck = {
+	.name		= "uart1_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_WKUP_UART0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk dpll_disp_ck = {
-	.name		= "dpll_disp_ck",
-	.parent		= &sys_clkin_ck,
-	.dpll_data	= &dpll_disp_dd,
-	.init		= &omap2_init_dpll_parent,
-	.ops		= &clkops_omap3_noncore_dpll_ops,
-	.recalc		= &omap3_dpll_recalc,
-	.round_rate	= &omap2_dpll_round_rate,
-	.set_rate	= &omap3_noncore_dpll_set_rate,
+static struct clk uart2_ick = {
+	.name		= "uart2_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
 };
 
-static const struct clksel dpll_disp_m2_div[] = {
-	{ .parent = &dpll_disp_ck, .rates = div31_1to31_rates },
-	{ .parent = NULL },
+static struct clk uart2_fck = {
+	.name		= "uart2_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_UART1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk dpll_disp_m2_ck = {
-	.name		= "dpll_disp_m2_ck",
-	.parent		= &dpll_disp_ck,
-	.clksel		= dpll_disp_m2_div,
-	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_DISP,
-	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
+static struct clk uart3_ick = {
+	.name		= "uart3_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
-	.recalc		= &omap2_clksel_recalc,
-	.round_rate	= &omap2_clksel_round_rate,
-	.set_rate	= &omap2_clksel_set_rate,
+	.recalc		= &followparent_recalc,
 };
 
-/* DPLL_MPU */
-static struct dpll_data dpll_mpu_dd = {
-	.mult_div1_reg	= AM33XX_CM_CLKSEL_DPLL_MPU,
-	.clk_bypass	= &sys_clkin_ck,
-	.clk_ref	= &sys_clkin_ck,
-	.control_reg	= AM33XX_CM_CLKMODE_DPLL_MPU,
-	.modes		= (1 << DPLL_LOW_POWER_BYPASS) | (1 << DPLL_LOCKED),
-	.idlest_reg	= AM33XX_CM_IDLEST_DPLL_MPU,
-	.mult_mask	= AM33XX_DPLL_MULT_MASK,
-	.div1_mask	= AM33XX_DPLL_DIV_MASK,
-	.enable_mask	= AM33XX_DPLL_EN_MASK,
-	.autoidle_mask	= AM33XX_AUTO_DPLL_MODE_MASK,
-	.idlest_mask	= AM33XX_ST_DPLL_CLK_MASK,
-	.max_multiplier	= AM33XX_MAX_DPLL_MULT,
-	.max_divider	= AM33XX_MAX_DPLL_DIV,
-	.min_divider	= 1,
+static struct clk uart3_fck = {
+	.name		= "uart3_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_UART2_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static struct clk dpll_mpu_ck = {
-	.name		= "dpll_mpu_ck",
-	.parent		= &sys_clkin_ck,
-	.dpll_data	= &dpll_mpu_dd,
-	.init		= &omap2_init_dpll_parent,
-	.ops		= &clkops_omap3_noncore_dpll_ops,
-	.recalc		= &omap3_dpll_recalc,
-	.round_rate     = &omap2_dpll_round_rate,
-	.set_rate       = &omap3_noncore_dpll_set_rate,
+static struct clk uart4_ick = {
+	.name		= "uart4_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
 };
 
+static struct clk uart4_fck = {
+	.name		= "uart4_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_UART3_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
 
-static const struct clksel dpll_mpu_m2_div[] = {
-	{ .parent = &dpll_mpu_ck, .rates = div31_1to31_rates },
-	{ .parent = NULL },
+static struct clk uart5_ick = {
+	.name		= "uart5_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk dpll_mpu_m2_ck = {
-	.name		= "dpll_mpu_m2_ck",
-	.parent		= &dpll_mpu_ck,
-	.clksel		= dpll_mpu_m2_div,
-	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_MPU,
-	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
+static struct clk uart5_fck = {
+	.name		= "uart5_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_UART4_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk uart6_ick = {
+	.name		= "uart6_ick",
+	.parent		= &l4ls_gclk,
 	.ops		= &clkops_null,
-	.recalc		= &omap2_clksel_recalc,
-	.round_rate	= &omap2_clksel_round_rate,
-	.set_rate	= &omap2_clksel_set_rate,
+	.recalc		= &followparent_recalc,
 };
 
-static struct clk mpu_fck = {
-	.name		= "mpu_fck",
+static struct clk uart6_fck = {
+	.name		= "uart6_fck",
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_UART5_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.fixed_div	= 4,
 	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_MPU_MPU_CLKCTRL,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk wkup_m3_fck = {
+	.name		= "wkup_m3_fck",
+	.clkdm_name	= "l4_wkup_aon_clkdm",
+	.parent		= &l4_wkup_aon_gclk,
+	.enable_reg	= AM33XX_CM_WKUP_WKUP_M3_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "mpu_clkdm",
-	.parent		= &dpll_mpu_m2_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk dpll_per_clkdcoldo_ck = {
-	.name		= "dpll_per_clkdcoldo_ck",
-	.parent		= &dpll_per_ck,
+static struct clk cpsw_250mhz_clk = {
+	.name		= "cpsw_250mhz_clk",
+	.clkdm_name	= "l4hs_clkdm",
+	.parent		= &sysclk2_ck,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
+static struct clk cpsw_125mhz_gclk = {
+	.name		= "cpsw_125mhz_gclk",
+	.clkdm_name	= "cpsw_125mhz_clkdm",
+	.parent		= &sysclk2_ck,
+	.ops		= &clkops_null,
+	.fixed_div	= 2,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
 
-static const struct clksel gpio_dbclk_mux_sel[] = {
-	{ .parent = &clk_rc32k_ck, .rates = div_1_0_rates },
-	{ .parent = &clk_32768_ck, .rates = div_1_1_rates },
-	{ .parent = &clk_32khz_ck, .rates = div_1_2_rates },
+/*
+ * TODO: As per clock tree @OPP50 /2 is used, but there is not register
+ * to configure this. @ normal OPP, /5 is used - 250MHz/5 = 50MHz
+ */
+static struct clk cpsw_50mhz_clk = {
+	.name		= "cpsw_50mhz_clk",
+	.clkdm_name	= "l4hs_clkdm",
+	.parent		= &sysclk2_ck,
+	.ops		= &clkops_null,
+	.fixed_div	= 5,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk cpsw_5mhz_clk = {
+	.name		= "cpsw_5mhz_clk",
+	.clkdm_name	= "l4hs_clkdm",
+	.parent		= &cpsw_50mhz_clk,
+	.ops		= &clkops_null,
+	.fixed_div	= 10,
+	.recalc		= &omap_fixed_divisor_recalc,
+};
+
+static struct clk cpgmac0_ick = {
+	.name		= "cpgmac0_ick",
+	.clkdm_name	= "cpsw_125mhz_clkdm",
+	.ops		= &clkops_omap2_dflt,
+	.enable_reg	= AM33XX_CM_PER_CPGMAC0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.parent		= &cpsw_125mhz_gclk,
+	.recalc		= &followparent_recalc,
+};
+
+static const struct clksel cpsw_cpts_rft_clkmux_sel[] = {
+	{ .parent = &sysclk2_ck, .rates = div_1_0_rates },
+	{ .parent = &sysclk1_ck, .rates = div_1_1_rates },
 	{ .parent = NULL },
 };
 
+static struct clk cpsw_cpts_rft_clk = {
+	.name		= "cpsw_cpts_rft_clk",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &dpll_core_m5_ck,
+	.clksel		= cpsw_cpts_rft_clkmux_sel,
+	.clksel_reg	= AM33XX_CM_CPTS_RFT_CLKSEL,
+	.clksel_mask	= AM33XX_CLKSEL_0_0_MASK,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
+
 static struct clk usbotg_ick = {
 	.name		= "usbotg_ick",
-	.parent		= &core_100m_ck,
-	.ops		= &clkops_omap2_dflt,
 	.clkdm_name	= "l3s_clkdm",
+	.parent		= &l3s_gclk,
+	.ops		= &clkops_omap2_dflt,
 	.enable_reg	= AM33XX_CM_PER_USB0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.recalc		= &followparent_recalc,
@@ -1389,177 +1586,254 @@ static struct clk usbotg_ick = {
 
 static struct clk usbotg_fck = {
 	.name		= "usbotg_fck",
-	.ops		= &clkops_omap2_dflt,
 	.clkdm_name	= "wkup_usb_clkdm",
+	.parent		= &usb_pll_clk,
 	.enable_reg	= AM33XX_CM_CLKDCOLDO_DPLL_PER,
 	.enable_bit	= AM33XX_ST_DPLL_CLKDCOLDO_SHIFT,
-	.parent		= &dpll_per_clkdcoldo_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk gpio_dbclk_mux_ck = {
-	.name		= "gpio_dbclk_mux_ck",
-	.parent		= &sys_clkin_ck,
+/* gpio */
+static const struct clksel gpio0_dbclk_mux_sel[] = {
+	{ .parent = &clk_rc32k_ck, .rates = div_1_0_rates },
+	{ .parent = &clk_32768_ck, .rates = div_1_1_rates },
+	{ .parent = &clk_32khz_timer, .rates = div_1_2_rates },
+	{ .parent = NULL },
+};
+
+static struct clk gpio0_dbclk_mux_ck = {
+	.name		= "gpio0_dbclk_mux_ck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &clk_rc32k_ck,
 	.init		= &omap2_init_clksel_parent,
-	.clksel		= gpio_dbclk_mux_sel,
-	.ops		= &clkops_null,
+	.clksel		= gpio0_dbclk_mux_sel,
 	.clksel_reg	= AM33XX_CLKSEL_GPIO0_DBCLK,
-	.clksel_mask	= (3 << 0),
-	.clkdm_name	= "l4_wkup_clkdm",
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
+	.ops		= &clkops_null,
 	.recalc		= &omap2_clksel_recalc,
 };
 
 static struct clk gpio0_dbclk = {
 	.name		= "gpio0_dbclk",
-	.parent		= &gpio_dbclk_mux_ck,
-	.ops		= &clkops_omap2_dflt,
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &gpio0_dbclk_mux_ck,
 	.enable_reg	= AM33XX_CM_WKUP_GPIO0_CLKCTRL,
 	.enable_bit	= AM33XX_OPTFCLKEN_GPIO0_GDBCLK_SHIFT,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk gpio0_ick = {
+	.name		= "gpio0_ick",
 	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &l4_wkup_gclk,
+	.enable_reg	= AM33XX_CM_WKUP_GPIO0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
 static struct clk gpio1_dbclk = {
 	.name		= "gpio1_dbclk",
-	.parent		= &clkdiv32k_fck,
-	.ops		= &clkops_omap2_dflt,
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &clkdiv32k_ick,
 	.enable_reg	= AM33XX_CM_PER_GPIO1_CLKCTRL,
 	.enable_bit	= AM33XX_OPTFCLKEN_GPIO_1_GDBCLK_SHIFT,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk gpio1_ick = {
+	.name		= "gpio1_ick",
 	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_GPIO1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
 static struct clk gpio2_dbclk = {
 	.name		= "gpio2_dbclk",
-	.parent		= &clkdiv32k_fck,
-	.ops		= &clkops_omap2_dflt,
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &clkdiv32k_ick,
 	.enable_reg	= AM33XX_CM_PER_GPIO2_CLKCTRL,
 	.enable_bit	= AM33XX_OPTFCLKEN_GPIO_2_GDBCLK_SHIFT,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk gpio2_ick = {
+	.name		= "gpio2_ick",
 	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_GPIO2_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
 static struct clk gpio3_dbclk = {
 	.name		= "gpio3_dbclk",
-	.parent		= &clkdiv32k_fck,
-	.ops		= &clkops_omap2_dflt,
+	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &clkdiv32k_ick,
 	.enable_reg	= AM33XX_CM_PER_GPIO3_CLKCTRL,
 	.enable_bit	= AM33XX_OPTFCLKEN_GPIO_3_GDBCLK_SHIFT,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk gpio3_ick = {
+	.name		= "gpio3_ick",
 	.clkdm_name	= "l4ls_clkdm",
+	.parent		= &l4ls_gclk,
+	.enable_reg	= AM33XX_CM_PER_GPIO3_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static const struct clksel icss_ocp_clk_mux_sel[] = {
-	{ .parent = &sysclk_div_ck, .rates = div_1_0_rates },
-	{ .parent = &dpll_disp_m2_ck, .rates = div_1_1_rates },
+static const struct clksel pruss_ocp_clk_mux_sel[] = {
+	{ .parent = &l3_gclk, .rates = div_1_0_rates },
+	{ .parent = &disp_pll_clk, .rates = div_1_1_rates },
 	{ .parent = NULL },
 };
 
-static struct clk icss_ocp_clk_mux_ck = {
-	.name		= "icss_ocp_clk_mux_ck",
-	.parent		= &sysclk_div_ck,
+static struct clk pruss_ocp_gclk = {
+	.name		= "pruss_ocp_gclk",
+	.parent		= &l3_gclk,
+	.init		= &omap2_init_clksel_parent,
+	.clksel		= pruss_ocp_clk_mux_sel,
+	.clksel_reg	= AM33XX_CLKSEL_PRUSS_OCP_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_0_MASK,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-
-static const struct clksel lcd_clk_mux_sel[] = {
-	{ .parent = &dpll_disp_m2_ck, .rates = div_1_0_rates },
-	{ .parent = &dpll_core_m5_ck, .rates = div_1_1_rates },
-	{ .parent = &dpll_per_m2_ck, .rates = div_1_2_rates },
-	{ .parent = NULL },
-};
-
-static struct clk lcd_clk_mux_ck = {
-	.name		= "lcd_clk_mux_ck",
-	.parent		= &dpll_disp_m2_ck,
+static struct clk pruss_iep_gclk = {
+	.name		= "pruss_iep_gclk",
+	.clkdm_name	= "pruss_ocp_clkdm",
+	.parent		= &l3_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk lcdc_fck = {
-	.name		= "lcdc_fck",
-	.ops		= &clkops_omap2_dflt,
-	.init		= &omap2_init_clksel_parent,
-	.clksel		= lcd_clk_mux_sel,
-	.enable_reg	= AM33XX_CM_PER_LCDC_CLKCTRL,
+static struct clk pruss_uart_gclk = {
+	.name		= "pruss_uart_gclk",
+	.clkdm_name	= "pruss_ocp_clkdm",
+	.parent		= &per_192mhz_clk,
+	.enable_reg	= AM33XX_CM_PER_PRUSS_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_LCDC_PIXEL_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
-	.clkdm_name	= "lcdc_clkdm",
-	.parent		= &dpll_disp_m2_ck,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mmc0_ick = {
-	.name		= "mmc0_ick",
-	.parent		= &l4ls_fck,
+static struct clk lcdc_ick = {
+	.name		= "lcdc_ick",
+	.clkdm_name	= "l3_clkdm",
+	.parent		= &sysclk1_ck,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mmc1_ick = {
-	.name		= "mmc1_ick",
-	.parent		= &l4ls_fck,
+static const struct clksel lcd_clk_mux_sel[] = {
+	{ .parent = &disp_pll_clk, .rates = div_1_0_rates },
+	{ .parent = &sysclk2_ck, .rates = div_1_1_rates },
+	{ .parent = &per_192mhz_clk, .rates = div_1_2_rates },
+	{ .parent = NULL },
+};
+
+static struct clk lcd_gclk = {
+	.name		= "lcd_gclk",
+	.parent		= &disp_pll_clk,
+	.init		= &omap2_init_clksel_parent,
+	.clksel		= lcd_clk_mux_sel,
+	.clksel_reg	= AM33XX_CLKSEL_LCDC_PIXEL_CLK,
+	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk mmc2_ick = {
-	.name		= "mmc2_ick",
-	.parent		= &l3_main_fck,
-	.ops		= &clkops_null,
+static struct clk lcdc_fck = {
+	.name		= "lcdc_fck",
+	.clkdm_name	= "lcdc_clkdm",
+	.parent		= &lcd_gclk,
+	.enable_reg	= AM33XX_CM_PER_LCDC_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
 static struct clk mmc_clk = {
 	.name		= "mmc_clk",
-	.parent		= &dpll_per_m2_ck,
+	.parent		= &per_192mhz_clk,
 	.ops		= &clkops_null,
 	.fixed_div	= 2,
 	.recalc		= &omap_fixed_divisor_recalc,
 };
 
+static struct clk mmc0_ick = {
+	.name		= "mmc0_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
+
 static struct clk mmc0_fck = {
 	.name		= "mmc0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MMC0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.clkdm_name	= "l4ls_clkdm",
 	.parent		= &mmc_clk,
+	.enable_reg	= AM33XX_CM_PER_MMC0_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk mmc1_ick = {
+	.name		= "mmc1_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
 static struct clk mmc1_fck = {
 	.name		= "mmc1_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MMC1_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.clkdm_name	= "l4ls_clkdm",
 	.parent		= &mmc_clk,
+	.enable_reg	= AM33XX_CM_PER_MMC1_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk mmc2_ick = {
+	.name		= "mmc2_ick",
+	.parent		= &l4ls_gclk,
+	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
 static struct clk mmc2_fck = {
 	.name		= "mmc2_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_PER_MMC2_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.clkdm_name	= "l3s_clkdm",
 	.parent		= &mmc_clk,
+	.enable_reg	= AM33XX_CM_PER_MMC2_CLKCTRL,
+	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &followparent_recalc,
 };
 
-static const struct clksel sgx_clksel_sel[] = {
-	{ .parent = &dpll_core_m4_ck, .rates = div_1_0_rates },
-	{ .parent = &dpll_per_m2_ck, .rates = div_1_1_rates },
+static const struct clksel gfx_clksel_sel[] = {
+	{ .parent = &sysclk1_ck, .rates = div_1_0_rates },
+	{ .parent = &per_192mhz_clk, .rates = div_1_1_rates },
 	{ .parent = NULL },
 };
 
-static struct clk sgx_clksel_ck = {
-	.name		= "sgx_clksel_ck",
-	.parent		= &dpll_core_m4_ck,
-	.clksel		= sgx_clksel_sel,
+static struct clk gfx_fclk_clksel_ck = {
+	.name		= "gfx_fclk_clksel_ck",
+	.parent		= &sysclk1_ck,
+	.clksel		= gfx_clksel_sel,
 	.ops		= &clkops_null,
 	.clksel_reg	= AM33XX_CLKSEL_GFX_FCLK,
 	.clksel_mask	= AM33XX_CLKSEL_GFX_FCLK_MASK,
@@ -1572,42 +1846,51 @@ static const struct clksel_rate div_1_0_2_1_rates[] = {
 	{ .div = 0 },
 };
 
-static const struct clksel sgx_div_sel[] = {
-	{ .parent = &sgx_clksel_ck, .rates = div_1_0_2_1_rates },
+static const struct clksel gfx_div_sel[] = {
+	{ .parent = &gfx_fclk_clksel_ck, .rates = div_1_0_2_1_rates },
 	{ .parent = NULL },
 };
 
-static struct clk sgx_ck = {
-	.name		= "sgx_ck",
-	.parent		= &sgx_clksel_ck,
-	.clksel		= sgx_div_sel,
+static struct clk gfx_ick = {
+	.name		= "gfx_ick",
+	.clkdm_name	= "gfx_l3_clkdm",
+	.parent		= &gfx_l3_gclk,
 	.ops		= &clkops_null,
+	.recalc		= &followparent_recalc,
+};
+
+static struct clk gfx_fclk = {
+	.name		= "gfx_fclk",
+	.clkdm_name	= "gfx_l3_clkdm",
+	.parent		= &gfx_fclk_clksel_ck,
+	.clksel		= gfx_div_sel,
 	.enable_reg	= AM33XX_CM_GFX_GFX_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.clksel_reg	= AM33XX_CLKSEL_GFX_FCLK,
 	.clksel_mask	= AM33XX_CLKSEL_0_0_MASK,
-	.clkdm_name	= "gfx_l3_clkdm",
 	.recalc		= &omap2_clksel_recalc,
 	.round_rate	= &omap2_clksel_round_rate,
 	.set_rate	= &omap2_clksel_set_rate,
+	.ops		= &clkops_null,
 };
 
 static const struct clksel sysclkout_pre_sel[] = {
 	{ .parent = &clk_32768_ck, .rates = div_1_0_rates },
-	{ .parent = &sysclk_div_ck, .rates = div_1_1_rates },
-	{ .parent = &dpll_ddr_m2_ck, .rates = div_1_2_rates },
-	{ .parent = &dpll_per_m2_ck, .rates = div_1_3_rates },
-	{ .parent = &lcd_clk_mux_ck, .rates = div_1_4_rates },
+	{ .parent = &l3_gclk, .rates = div_1_1_rates },
+	{ .parent = &ddr_pll_clk, .rates = div_1_2_rates },
+	{ .parent = &per_192mhz_clk, .rates = div_1_3_rates },
+	{ .parent = &lcd_gclk, .rates = div_1_4_rates },
 	{ .parent = NULL },
 };
 
 static struct clk sysclkout_pre_ck = {
 	.name		= "sysclkout_pre_ck",
+	.parent		= &clk_32768_ck,
 	.init		= &omap2_init_clksel_parent,
-	.ops		= &clkops_null,
 	.clksel		= sysclkout_pre_sel,
 	.clksel_reg	= AM33XX_CM_CLKOUT_CTRL,
 	.clksel_mask	= AM33XX_CLKOUT2SOURCE_MASK,
+	.ops		= &clkops_null,
 	.recalc		= &omap2_clksel_recalc,
 };
 
@@ -1643,116 +1926,59 @@ static struct clk clkout2_ck = {
 	.set_rate	= &omap2_clksel_set_rate,
 };
 
-static const struct clksel timer0_clkmux_sel[] = {
-	{ .parent = &clk_rc32k_ck, .rates = div_1_0_rates },
-	{ .parent = &clk_32khz_ck, .rates = div_1_1_rates },
-	{ .parent = &sys_clkin_ck, .rates = div_1_2_rates },
-	{ .parent = &tclkin_ck, .rates = div_1_3_rates },
-	{ .parent = NULL },
-};
-
-static struct clk timer0_clkmux_ck = {
-	.name		= "timer0_clkmux_ck",
-	.parent		= &clk_rc32k_ck,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
-};
-
-static struct clk timer0_ick = {
-	.name		= "timer0_ick",
-	.parent		= &div_l4_wkup_gclk_ck,
+static struct clk vtp_clk = {
+	.name		= "vtp_clk",
+	.parent		= &sys_clkin_ck,
 	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
-};
-
-
-static struct clk timer0_fck = {
-	.name		= "timer0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_TIMER0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.parent		= &timer0_clkmux_ck,
-	.recalc		= &followparent_recalc,
+	.fixed_div	= 2,
+	.recalc		= &omap_fixed_divisor_recalc,
 };
 
-static const struct clksel timer1_clkmux_sel[] = {
-	{ .parent = &sys_clkin_ck, .rates = div_1_0_rates },
+static const struct clksel wdt_clkmux_sel[] = {
+	{ .parent = &clk_rc32k_ck, .rates = div_1_0_rates },
 	{ .parent = &clk_32khz_ck, .rates = div_1_1_rates },
-	{ .parent = &tclkin_ck, .rates = div_1_2_rates },
-	{ .parent = &clk_rc32k_ck, .rates = div_1_3_rates },
-	{ .parent = &clk_32768_ck, .rates = div_1_4_rates },
 	{ .parent = NULL },
 };
 
-static struct clk timer1_ick = {
-	.name		= "timer1_ick",
-	.parent		= &div_l4_wkup_gclk_ck,
+static struct clk wdt0_ick = {
+	.name		= "wdt0_ick",
+	.parent		= &l4_wkup_gclk,
 	.ops		= &clkops_null,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk timer1_fck = {
-	.name		= "timer1_fck",
-	.parent		= &sys_clkin_ck,
-	.init		= &omap2_init_clksel_parent,
-	.clksel		= timer1_clkmux_sel,
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_TIMER1_CLKCTRL,
+static struct clk wdt0_fck = {
+	.name		= "wdt0_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &clk_rc32k_ck,
+	.clksel		= wdt_clkmux_sel,
+	.enable_reg	= AM33XX_CM_WKUP_WDT0_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clksel_reg	= AM33XX_CLKSEL_TIMER1MS_CLK,
-	.clksel_mask	= AM33XX_CLKSEL_0_2_MASK,
-	.clkdm_name	= "l4ls_clkdm",
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &omap2_clksel_recalc,
 };
 
-static struct clk vtp_clk_div_ck = {
-	.name		= "vtp_clk_div_ck",
-	.parent		= &sys_clkin_ck,
-	.ops		= &clkops_null,
-	.recalc		= &followparent_recalc,
-	.flags		= ENABLE_ON_INIT,
-};
-
-
-
-static const struct clksel wdt0_clkmux_sel[] = {
-	{ .parent = &clk_rc32k_ck, .rates = div_1_0_rates },
-	{ .parent = &clk_32khz_ck, .rates = div_1_1_rates },
-	{ .parent = NULL },
-};
-
-static struct clk wdt0_clkmux_ck = {
-	.name		= "wdt0_clkmux_ck",
-	.parent		= &clk_32khz_ck,
+static struct clk wdt1_ick = {
+	.name		= "wdt1_ick",
+	.parent		= &l4_wkup_gclk,
 	.ops		= &clkops_null,
-	.clksel_reg	= AM33XX_CM_DIV_M2_DPLL_PER,
-	.clksel_mask	= AM33XX_DPLL_CLKOUT_DIV_MASK,
 	.recalc		= &followparent_recalc,
 };
 
-static struct clk wd_timer1_fck = {
-	.name		= "wd_timer1_fck",
+static struct clk wdt1_fck = {
+	.name		= "wdt1_fck",
+	.clkdm_name	= "l4_wkup_clkdm",
+	.parent		= &clk_rc32k_ck,
 	.init		= &omap2_init_clksel_parent,
-	.clksel		= wdt0_clkmux_sel,
-	.ops		= &clkops_omap2_dflt,
+	.clksel		= wdt_clkmux_sel,
 	.enable_reg	= AM33XX_CM_WKUP_WDT1_CLKCTRL,
 	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
 	.clksel_reg	= AM33XX_CLKSEL_WDT1_CLK,
 	.clksel_mask	= AM33XX_CLKSEL_0_1_MASK,
-	.clkdm_name	= "l4_wkup_clkdm",
+	.ops		= &clkops_omap2_dflt,
 	.recalc		= &omap2_clksel_recalc,
 };
 
-static struct clk wdt0_fck = {
-	.name		= "wdt0_fck",
-	.ops		= &clkops_omap2_dflt,
-	.enable_reg	= AM33XX_CM_WKUP_WDT0_CLKCTRL,
-	.enable_bit	= AM33XX_MODULEMODE_SWCTRL,
-	.clkdm_name	= "l4_wkup_clkdm",
-	.parent		= &wdt0_clkmux_ck,
-	.recalc		= &followparent_recalc,
-};
 
 /*
  * clkdev
@@ -1761,47 +1987,81 @@ static struct omap_clk am33xx_clks[] = {
 	CLK(NULL,	"clk_32768_ck",		&clk_32768_ck,	CK_AM33XX),
 	CLK(NULL,	"clk_32khz_ck",		&clk_32khz_ck,	CK_AM33XX),
 	CLK(NULL,	"clk_rc32k_ck",		&clk_rc32k_ck,	CK_AM33XX),
+	CLK(NULL,	"virt_19_2m_ck",	&virt_19_2m_ck,	CK_AM33XX),
+	CLK(NULL,	"virt_24m_ck",		&virt_24m_ck,	CK_AM33XX),
+	CLK(NULL,	"virt_25m_ck",		&virt_25m_ck,	CK_AM33XX),
+	CLK(NULL,	"virt_26m_ck",		&virt_26m_ck,	CK_AM33XX),
 	CLK(NULL,	"sys_clkin_ck",		&sys_clkin_ck,	CK_AM33XX),
 	CLK(NULL,	"tclkin_ck",		&tclkin_ck,	CK_AM33XX),
+	CLK(NULL,	"dpll_core_ck",		&dpll_core_ck,		CK_AM33XX),
+	CLK(NULL,	"dpll_core_x2_ck",	&dpll_core_x2_ck,	CK_AM33XX),
+	CLK(NULL,	"dpll_core_m4_ck",	&dpll_core_m4_ck,	CK_AM33XX),
+	CLK(NULL,	"dpll_core_m5_ck",	&dpll_core_m5_ck,	CK_AM33XX),
+	CLK(NULL,	"dpll_core_m6_ck",	&dpll_core_m6_ck,	CK_AM33XX),
+	CLK(NULL,	"sysclk1_ck",		&sysclk1_ck,	CK_AM33XX),
+	CLK(NULL,	"sysclk2_ck",		&sysclk2_ck,	CK_AM33XX),
+	CLK(NULL,	"core_clk_out",		&core_clk_out,	CK_AM33XX),
+	CLK(NULL,	"clk_32khz_timer",	&clk_32khz_timer, CK_AM33XX),
+	CLK(NULL,	"dpll_mpu_ck",		&dpll_mpu_ck,		CK_AM33XX),
+	CLK(NULL,	"dpll_mpu_m2_ck",	&dpll_mpu_m2_ck,	CK_AM33XX),
+	CLK(NULL,	"mpu_ck",		&mpu_fck,	CK_AM33XX),
+	CLK(NULL,	"dpll_ddr_ck",		&dpll_ddr_ck,		CK_AM33XX),
+	CLK(NULL,	"dpll_ddr_m2_ck",	&dpll_ddr_m2_ck,	CK_AM33XX),
+	CLK(NULL,	"ddr_pll_clk",		&ddr_pll_clk,	CK_AM33XX),
+	CLK(NULL,	"emif_fck",		&emif_fck,	CK_AM33XX),
+	CLK(NULL,	"emif_fw_fck",		&emif_fw_fck,	CK_AM33XX),
+	CLK(NULL,	"dpll_disp_ck",		&dpll_disp_ck,		CK_AM33XX),
+	CLK(NULL,	"dpll_disp_m2_ck",	&dpll_disp_m2_ck,	CK_AM33XX),
+	CLK(NULL,	"disp_pll_clk",		&disp_pll_clk,		CK_AM33XX),
+	CLK(NULL,	"dpll_per_ck",		&dpll_per_ck,	CK_AM33XX),
+	CLK(NULL,	"dpll_per_m2_ck",	&dpll_per_m2_ck,	CK_AM33XX),
+	CLK(NULL,	"per_192mhz_clk",	&per_192mhz_clk,	CK_AM33XX),
+	CLK(NULL,	"usb_pll_clk",		&usb_pll_clk,		CK_AM33XX),
+	CLK(NULL,	"core_100mhz_ck",	&core_100mhz_ck,	CK_AM33XX),
+	CLK(NULL,	"l3_ick",		&l3_ick,	CK_AM33XX),
+	CLK(NULL,	"l3_instr_ick",		&l3_instr_ick,	CK_AM33XX),
 	CLK(NULL,	"adc_tsc_fck",		&adc_tsc_fck,	CK_AM33XX),
 	CLK(NULL,	"adc_tsc_ick",		&adc_tsc_ick,	CK_AM33XX),
 	CLK(NULL,	"aes0_fck",		&aes0_fck,	CK_AM33XX),
+	CLK(NULL,	"l4_cefuse_gclk",	&l4_cefuse_gclk, CK_AM33XX),
 	CLK(NULL,	"cefuse_fck",		&cefuse_fck,	CK_AM33XX),
-	CLK(NULL,	"clkdiv32k_fck",	&clkdiv32k_fck,	CK_AM33XX),
+	CLK(NULL,	"cefuse_iclk",		&cefuse_iclk,	CK_AM33XX),
+	CLK(NULL,	"clkdiv32k_ick",	&clkdiv32k_ick,	CK_AM33XX),
 	CLK(NULL,	"control_fck",		&control_fck,	CK_AM33XX),
-	CLK("cpsw.0",	NULL,			&cpgmac0_fck,	CK_AM33XX),
+	CLK("cpsw.0",	NULL,			&cpgmac0_ick,	CK_AM33XX),
 	CLK(NULL,	"dcan0_fck",		&dcan0_fck,	CK_AM33XX),
 	CLK(NULL,	"dcan1_fck",		&dcan1_fck,	CK_AM33XX),
 	CLK(NULL,	"dcan0_ick",		&dcan0_ick,	CK_AM33XX),
 	CLK(NULL,	"dcan1_ick",		&dcan1_ick,	CK_AM33XX),
-	CLK(NULL,	"debugss_fck",		&debugss_fck,	CK_AM33XX),
+	CLK(NULL,	"debugss_ick",		&debugss_ick,	CK_AM33XX),
 	CLK(NULL,	"elm_fck",		&elm_fck,	CK_AM33XX),
-	CLK(NULL,	"emif_fck",		&emif_fck,	CK_AM33XX),
-	CLK(NULL,	"emif_fw_fck",		&emif_fw_fck,	CK_AM33XX),
 	CLK(NULL,	"epwmss0_fck",		&epwmss0_fck,	CK_AM33XX),
 	CLK(NULL,	"epwmss1_fck",		&epwmss1_fck,	CK_AM33XX),
 	CLK(NULL,	"epwmss2_fck",		&epwmss2_fck,	CK_AM33XX),
-	CLK(NULL,	"gpio0_fck",		&gpio0_fck,	CK_AM33XX),
-	CLK(NULL,	"gpio1_fck",		&gpio1_fck,	CK_AM33XX),
-	CLK(NULL,	"gpio2_fck",		&gpio2_fck,	CK_AM33XX),
-	CLK(NULL,	"gpio3_fck",		&gpio3_fck,	CK_AM33XX),
+	CLK(NULL,	"gpio0_ick",		&gpio0_ick,	CK_AM33XX),
+	CLK(NULL,	"gpio1_ick",		&gpio1_ick,	CK_AM33XX),
+	CLK(NULL,	"gpio2_ick",		&gpio2_ick,	CK_AM33XX),
+	CLK(NULL,	"gpio3_ick",		&gpio3_ick,	CK_AM33XX),
 	CLK(NULL,	"gpmc_fck",		&gpmc_fck,	CK_AM33XX),
 	CLK("omap_i2c.1",	"fck",		&i2c1_fck,	CK_AM33XX),
+	CLK("omap_i2c.1",	"ick",		&i2c1_ick,	CK_AM33XX),
 	CLK("omap_i2c.2",	"fck",		&i2c2_fck,	CK_AM33XX),
+	CLK("omap_i2c.2",	"ick",		&i2c2_ick,	CK_AM33XX),
 	CLK("omap_i2c.3",	"fck",		&i2c3_fck,	CK_AM33XX),
-	CLK(NULL,	"icss_fck",		&icss_fck,	CK_AM33XX),
+	CLK("omap_i2c.3",	"ick",		&i2c3_ick,	CK_AM33XX),
+	CLK(NULL,	"pruss_ocp_gclk",	&pruss_ocp_gclk,	CK_AM33XX),
+	CLK(NULL,	"pruss_uart_gclk",	&pruss_uart_gclk,	CK_AM33XX),
+	CLK(NULL,	"pruss_iep_gclk",	&pruss_iep_gclk,	CK_AM33XX),
 	CLK(NULL,	"ieee5000_fck",		&ieee5000_fck,	CK_AM33XX),
-	CLK(NULL,	"l3_instr_fck",		&l3_instr_fck,	CK_AM33XX),
-	CLK(NULL,	"l3_main_fck",		&l3_main_fck,	CK_AM33XX),
-	CLK(NULL,	"l4_hs_fck",		&l4_hs_fck,	CK_AM33XX),
-	CLK(NULL,	"l4fw_fck",		&l4fw_fck,	CK_AM33XX),
-	CLK(NULL,	"l4ls_fck",		&l4ls_fck,	CK_AM33XX),
-	CLK(NULL,	"l4wkup_fck",		&l4wkup_fck,	CK_AM33XX),
+	CLK(NULL,	"l4hs_ick",		&l4hs_ick,	CK_AM33XX),
+	CLK(NULL,	"l4wkup_ick",		&l4wkup_ick,	CK_AM33XX),
+	CLK(NULL,	"l4fw_ick",		&l4fw_ick,	CK_AM33XX),
+	CLK(NULL,	"l4ls_ick",		&l4ls_ick,	CK_AM33XX),
 	CLK("da8xx_lcdc.0",	NULL,		&lcdc_fck,	CK_AM33XX),
 	CLK(NULL,	"mailbox0_fck",		&mailbox0_fck,	CK_AM33XX),
 	CLK(NULL,	"mcasp1_ick",		&mcasp0_ick,	CK_AM33XX),
-	CLK(NULL,	"mcasp2_ick",		&mcasp1_ick,	CK_AM33XX),
 	CLK("davinci-mcasp.0",	NULL,		&mcasp0_fck,	CK_AM33XX),
+	CLK(NULL,	"mcasp2_ick",		&mcasp1_ick,	CK_AM33XX),
 	CLK("davinci-mcasp.1",	NULL,		&mcasp1_fck,	CK_AM33XX),
 	CLK(NULL,	"mlb_fck",		&mlb_fck,	CK_AM33XX),
 	CLK("omap_hsmmc.0",	"ick",		&mmc0_ick,	CK_AM33XX),
@@ -1811,25 +2071,23 @@ static struct omap_clk am33xx_clks[] = {
 	CLK("omap_hsmmc.1",	"fck",		&mmc1_fck,	CK_AM33XX),
 	CLK("omap_hsmmc.2",	"fck",		&mmc2_fck,	CK_AM33XX),
 	CLK(NULL,	"mmu_fck",		&mmu_fck,	CK_AM33XX),
-	CLK(NULL,	"mpu_ck",		&mpu_fck,	CK_AM33XX),
-	CLK(NULL,	"mstr_exps_fck",	&mstr_exps_fck,	CK_AM33XX),
-	CLK(NULL,	"ocmcram_fck",		&ocmcram_fck,	CK_AM33XX),
+	CLK(NULL,	"ocmcram_ick",		&ocmcram_ick,	CK_AM33XX),
 	CLK(NULL,	"ocpwp_fck",		&ocpwp_fck,	CK_AM33XX),
 	CLK(NULL,	"pka_fck",		&pka_fck,	CK_AM33XX),
 	CLK(NULL,	"rng_fck",		&rng_fck,	CK_AM33XX),
 	CLK(NULL,	"rtc_fck",		&rtc_fck,	CK_AM33XX),
+	CLK(NULL,	"rtc_ick",		&rtc_ick,	CK_AM33XX),
 	CLK(NULL,	"sha0_fck",		&sha0_fck,	CK_AM33XX),
-	CLK(NULL,	"slv_exps_fck",		&slv_exps_fck,	CK_AM33XX),
 	CLK(NULL,	"smartreflex0_fck",	&smartreflex0_fck,	CK_AM33XX),
+	CLK(NULL,	"smartreflex0_ick",	&smartreflex0_ick,	CK_AM33XX),
 	CLK(NULL,	"smartreflex1_fck",	&smartreflex1_fck,	CK_AM33XX),
-	CLK(NULL,	"spare0_fck",		&spare0_fck,	CK_AM33XX),
-	CLK(NULL,	"spare1_fck",		&spare1_fck,	CK_AM33XX),
+	CLK(NULL,	"smartreflex1_ick",	&smartreflex1_ick,	CK_AM33XX),
 	CLK("omap2_mcspi.1",	"fck",		&spi0_fck,	CK_AM33XX),
 	CLK("omap2_mcspi.2",	"fck",		&spi1_fck,	CK_AM33XX),
 	CLK("omap2_mcspi.1",	"ick",		&spi0_ick,	CK_AM33XX),
 	CLK("omap2_mcspi.2",	"ick",		&spi1_ick,	CK_AM33XX),
 	CLK(NULL,	"spinlock_fck",		&spinlock_fck,	CK_AM33XX),
-	CLK(NULL,	"timer0_fck",		&timer0_fck,	CK_AM33XX),
+	CLK(NULL,	"gpt0_fck",		&timer0_fck,	CK_AM33XX),
 	CLK(NULL,	"gpt1_fck",		&timer1_fck,	CK_AM33XX),
 	CLK(NULL,	"gpt2_fck",		&timer2_fck,	CK_AM33XX),
 	CLK(NULL,	"gpt3_fck",		&timer3_fck,	CK_AM33XX),
@@ -1837,8 +2095,7 @@ static struct omap_clk am33xx_clks[] = {
 	CLK(NULL,	"gpt5_fck",		&timer5_fck,	CK_AM33XX),
 	CLK(NULL,	"gpt6_fck",		&timer6_fck,	CK_AM33XX),
 	CLK(NULL,	"gpt7_fck",		&timer7_fck,	CK_AM33XX),
-	CLK(NULL,	"lcdc_ick_l3_clk",	&lcdc_l3ick,	CK_AM33XX),
-	CLK(NULL,	"lcdc_ick_l4_clk",	&lcdc_l4ick,	CK_AM33XX),
+	CLK("da8xx_lcdc.0",	"lcdc_ick",	&lcdc_ick,	CK_AM33XX),
 	CLK(NULL,	"tpcc_ick",		&tpcc_ick,	CK_AM33XX),
 	CLK(NULL,	"tptc0_ick",		&tptc0_ick,	CK_AM33XX),
 	CLK(NULL,	"tptc1_ick",		&tptc1_ick,	CK_AM33XX),
@@ -1857,47 +2114,41 @@ static struct omap_clk am33xx_clks[] = {
 	CLK(NULL,	"uart6_ick",		&uart6_ick,	CK_AM33XX),
 	CLK(NULL,	"usbotg_ick",		&usbotg_ick,	CK_AM33XX),
 	CLK(NULL,	"usbotg_fck",		&usbotg_fck,	CK_AM33XX),
-	CLK(NULL,	"wd_timer1_fck",	&wd_timer1_fck,	CK_AM33XX),
+	CLK(NULL,	"wdt0_ick",		&wdt0_ick,	CK_AM33XX),
 	CLK(NULL,	"wdt0_fck",		&wdt0_fck,	CK_AM33XX),
+	CLK(NULL,	"wdt1_ick",		&wdt1_ick,	CK_AM33XX),
+	CLK(NULL,	"wdt1_fck",		&wdt1_fck,	CK_AM33XX),
 	CLK(NULL,	"wkup_m3_fck",		&wkup_m3_fck,	CK_AM33XX),
-	CLK(NULL,	"dpll_per_ck",		&dpll_per_ck,	CK_AM33XX),
-	CLK(NULL,	"dpll_per_m2_ck",	&dpll_per_m2_ck,	CK_AM33XX),
-	CLK(NULL,	"i2c_clk",		&i2c_clk,		CK_AM33XX),
-	CLK(NULL,	"clk_div_24_ck",	&clk_div_24_ck,		CK_AM33XX),
-	CLK(NULL,	"dpll_core_ck",		&dpll_core_ck,		CK_AM33XX),
-	CLK(NULL,	"dpll_core_x2_ck",	&dpll_core_x2_ck,	CK_AM33XX),
-	CLK(NULL,	"dpll_core_m4_ck",	&dpll_core_m4_ck,	CK_AM33XX),
+	CLK(NULL,	"l3_aon_gclk",		&l3_aon_gclk,		CK_AM33XX),
+	CLK(NULL,	"l4_wkup_aon_gclk",	&l4_wkup_aon_gclk,	CK_AM33XX),
+	CLK(NULL,	"l4_rtc_gclk",		&l4_rtc_gclk,		CK_AM33XX),
+	CLK(NULL,	"l3_gclk",		&l3_gclk,		CK_AM33XX),
+	CLK(NULL,	"gfx_l3_gclk",		&gfx_l3_gclk,		CK_AM33XX),
+	CLK(NULL,	"l4_wkup_gclk",		&l4_wkup_gclk,		CK_AM33XX),
+	CLK(NULL,	"l4hs_gclk",		&l4hs_gclk,		CK_AM33XX),
+	CLK(NULL,	"l3s_gclk",		&l3s_gclk,		CK_AM33XX),
+	CLK(NULL,	"l4fw_gclk",		&l4fw_gclk,		CK_AM33XX),
+	CLK(NULL,	"l4ls_gclk",		&l4ls_gclk,		CK_AM33XX),
+	CLK(NULL,	"debug_clka_gclk",	&debug_clka_gclk,	CK_AM33XX),
+	CLK(NULL,	"clk_24mhz",		&clk_24mhz,		CK_AM33XX),
 	CLK(NULL,	"sysclk_div_ck",	&sysclk_div_ck,		CK_AM33XX),
-	CLK(NULL,	"core_100m_ck",		&core_100m_ck,		CK_AM33XX),
-	CLK(NULL,	"dpll_core_m5_ck",	&dpll_core_m5_ck,	CK_AM33XX),
-	CLK(NULL,	"cpsw_250m_clkdiv_ck",	&cpsw_250m_clkdiv_ck,	CK_AM33XX),
-	CLK(NULL,	"cpsw_125mhz_ocp_ck",	&cpsw_125mhz_ocp_ck,	CK_AM33XX),
-	CLK(NULL,	"cpsw_50m_clkdiv_ck",	&cpsw_50m_clkdiv_ck,	CK_AM33XX),
-	CLK(NULL,	"cpsw_5m_clkdiv_ck",	&cpsw_5m_clkdiv_ck,	CK_AM33XX),
-	CLK(NULL,	"cpts_rft_clkmux_ck",	&cpts_rft_clkmux_ck,	CK_AM33XX),
-	CLK(NULL,	"dpll_ddr_ck",		&dpll_ddr_ck,		CK_AM33XX),
-	CLK(NULL,	"dpll_ddr_m2_ck",	&dpll_ddr_m2_ck,	CK_AM33XX),
-	CLK(NULL,	"ddr_pll_div_clk",	&ddr_pll_div_clk,	CK_AM33XX),
-	CLK(NULL,	"div_l4_rtc_gclk_ck",	&div_l4_rtc_gclk_ck,	CK_AM33XX),
-	CLK(NULL,	"div_l4_wkup_gclk_ck",	&div_l4_wkup_gclk_ck,	CK_AM33XX),
-	CLK(NULL,	"dpll_disp_ck",		&dpll_disp_ck,		CK_AM33XX),
-	CLK(NULL,	"dpll_disp_m2_ck",	&dpll_disp_m2_ck,	CK_AM33XX),
-	CLK(NULL,	"dpll_mpu_ck",		&dpll_mpu_ck,		CK_AM33XX),
-	CLK(NULL,	"dpll_mpu_m2_ck",	&dpll_mpu_m2_ck,	CK_AM33XX),
-	CLK(NULL,	"dpll_per_clkdcoldo_ck", &dpll_per_clkdcoldo_ck,	CK_AM33XX),
-	CLK(NULL,	"gpio_dbclk_mux_ck",	&gpio_dbclk_mux_ck,	CK_AM33XX),
+	CLK(NULL,	"cpsw_250mhz_clk",	&cpsw_250mhz_clk,	CK_AM33XX),
+	CLK(NULL,	"cpsw_125mhz_gclk",	&cpsw_125mhz_gclk,	CK_AM33XX),
+	CLK(NULL,	"cpsw_50mhz_clk",	&cpsw_50mhz_clk,	CK_AM33XX),
+	CLK(NULL,	"cpsw_5mhz_clk",	&cpsw_5mhz_clk,		CK_AM33XX),
+	CLK(NULL,	"cpsw_cpts_rft_clk",	&cpsw_cpts_rft_clk,	CK_AM33XX),
+	CLK(NULL,	"gpio0_dbclk_mux_ck",	&gpio0_dbclk_mux_ck,	CK_AM33XX),
 	CLK(NULL,	"gpio0_dbclk",		&gpio0_dbclk,		CK_AM33XX),
 	CLK(NULL,	"gpio1_dbclk",		&gpio1_dbclk,		CK_AM33XX),
 	CLK(NULL,	"gpio2_dbclk",		&gpio2_dbclk,		CK_AM33XX),
 	CLK(NULL,	"gpio3_dbclk",		&gpio3_dbclk,		CK_AM33XX),
-	CLK(NULL,	"icss_ocp_clk_mux_ck",	&icss_ocp_clk_mux_ck,	CK_AM33XX),
-	CLK(NULL,	"lcd_clk_mux_ck",	&lcd_clk_mux_ck,	CK_AM33XX),
+	CLK(NULL,	"lcd_gclk",		&lcd_gclk,		CK_AM33XX),
 	CLK(NULL,	"mmc_clk",		&mmc_clk,		CK_AM33XX),
-	CLK(NULL,	"sgx_clksel_ck",	&sgx_clksel_ck,		CK_AM33XX),
-	CLK(NULL,	"sgx_ck",		&sgx_ck,		CK_AM33XX),
+	CLK(NULL,	"gfx_fclk_clksel_ck",	&gfx_fclk_clksel_ck,	CK_AM33XX),
+	CLK(NULL,	"gfx_fclk",		&gfx_fclk,		CK_AM33XX),
+	CLK(NULL,	"gfx_ick",		&gfx_ick,		CK_AM33XX),
 	CLK(NULL,	"sysclkout_pre_ck",	&sysclkout_pre_ck,	CK_AM33XX),
 	CLK(NULL,	"clkout2_ck",		&clkout2_ck,		CK_AM33XX),
-	CLK(NULL,	"timer0_clkmux_ck",	&timer0_clkmux_ck,	CK_AM33XX),
 	CLK(NULL,	"gpt0_ick",		&timer0_ick,		CK_AM33XX),
 	CLK(NULL,	"gpt1_ick",		&timer1_ick,		CK_AM33XX),
 	CLK(NULL,	"gpt2_ick",		&timer2_ick,		CK_AM33XX),
@@ -1906,8 +2157,7 @@ static struct omap_clk am33xx_clks[] = {
 	CLK(NULL,	"gpt5_ick",		&timer5_ick,		CK_AM33XX),
 	CLK(NULL,	"gpt6_ick",		&timer6_ick,		CK_AM33XX),
 	CLK(NULL,	"gpt7_ick",		&timer7_ick,		CK_AM33XX),
-	CLK(NULL,	"vtp_clk_div_ck",	&vtp_clk_div_ck,	CK_AM33XX),
-	CLK(NULL,	"wdt0_clkmux_ck",	&wdt0_clkmux_ck,	CK_AM33XX),
+	CLK(NULL,	"vtp_clk",		&vtp_clk,		CK_AM33XX),
 };
 
 int __init am33xx_clk_init(void)
diff --git a/arch/arm/mach-omap2/clockdomain.h b/arch/arm/mach-omap2/clockdomain.h
index f43e35e..72cb12b 100644
--- a/arch/arm/mach-omap2/clockdomain.h
+++ b/arch/arm/mach-omap2/clockdomain.h
@@ -203,6 +203,7 @@ extern void _clkdm_del_autodeps(struct clockdomain *clkdm);
 extern struct clkdm_ops omap2_clkdm_operations;
 extern struct clkdm_ops omap3_clkdm_operations;
 extern struct clkdm_ops omap4_clkdm_operations;
+extern struct clkdm_ops am33xx_clkdm_operations;
 
 extern struct clkdm_dep gfx_24xx_wkdeps[];
 extern struct clkdm_dep dsp_24xx_wkdeps[];
diff --git a/arch/arm/mach-omap2/clockdomain44xx.c b/arch/arm/mach-omap2/clockdomain44xx.c
index 935c7f0..188afe2 100644
--- a/arch/arm/mach-omap2/clockdomain44xx.c
+++ b/arch/arm/mach-omap2/clockdomain44xx.c
@@ -128,3 +128,10 @@ struct clkdm_ops omap4_clkdm_operations = {
 	.clkdm_clk_enable	= omap4_clkdm_clk_enable,
 	.clkdm_clk_disable	= omap4_clkdm_clk_disable,
 };
+
+struct clkdm_ops am33xx_clkdm_operations = {
+	.clkdm_sleep		= omap4_clkdm_sleep,
+	.clkdm_wakeup		= omap4_clkdm_wakeup,
+	.clkdm_clk_enable	= omap4_clkdm_clk_enable,
+	.clkdm_clk_disable	= omap4_clkdm_clk_disable,
+};
diff --git a/arch/arm/mach-omap2/clockdomains33xx_data.c b/arch/arm/mach-omap2/clockdomains33xx_data.c
index f7e5140..cf7f858 100644
--- a/arch/arm/mach-omap2/clockdomains33xx_data.c
+++ b/arch/arm/mach-omap2/clockdomains33xx_data.c
@@ -16,6 +16,7 @@
 #include <linux/kernel.h>
 #include <linux/io.h>
 
+#include "prcm44xx.h"
 #include "clockdomain.h"
 #include "cm.h"
 #include "cm33xx.h"
@@ -25,6 +26,7 @@ static struct clockdomain l4ls_am33xx_clkdm = {
 	.name		= "l4ls_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_L4LS_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -34,6 +36,7 @@ static struct clockdomain l3s_am33xx_clkdm = {
 	.name		= "l3s_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_L3S_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -43,6 +46,7 @@ static struct clockdomain l4fw_am33xx_clkdm = {
 	.name		= "l4fw_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_L4FW_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -52,6 +56,7 @@ static struct clockdomain l3_am33xx_clkdm = {
 	.name		= "l3_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_L3_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -61,6 +66,7 @@ static struct clockdomain l4hs_am33xx_clkdm = {
 	.name		= "l4hs_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_L4HS_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -70,16 +76,18 @@ static struct clockdomain ocpwp_l3_am33xx_clkdm = {
 	.name		= "ocpwp_l3_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_OCPWP_L3_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
 };
 
-static struct clockdomain icss_ocp_am33xx_clkdm = {
-	.name		= "icss_ocp_clkdm",
+static struct clockdomain pruss_ocp_am33xx_clkdm = {
+	.name		= "pruss_ocp_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
-	.clkdm_offs	= AM33XX_CM_PER_ICSS_CLKSTCTRL_OFFSET,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
+	.clkdm_offs	= AM33XX_CM_PER_PRUSS_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
 };
@@ -88,6 +96,7 @@ static struct clockdomain cpsw_125mhz_am33xx_clkdm = {
 	.name		= "cpsw_125mhz_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_CPSW_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -97,6 +106,7 @@ static struct clockdomain lcdc_am33xx_clkdm = {
 	.name		= "lcdc_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_LCDC_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -106,6 +116,7 @@ static struct clockdomain clk_24mhz_am33xx_clkdm = {
 	.name		= "clk_24mhz_clkdm",
 	.pwrdm		= { .name = "per_pwrdm" },
 	.cm_inst	= AM33XX_CM_PER_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_PER_CLK_24MHZ_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -115,6 +126,7 @@ static struct clockdomain l4_wkup_am33xx_clkdm = {
 	.name		= "l4_wkup_clkdm",
 	.pwrdm		= { .name = "wkup_pwrdm" },
 	.cm_inst	= AM33XX_CM_WKUP_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_WKUP_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -124,6 +136,7 @@ static struct clockdomain l3_aon_am33xx_clkdm = {
 	.name		= "l3_aon_clkdm",
 	.pwrdm		= { .name = "wkup_pwrdm" },
 	.cm_inst	= AM33XX_CM_WKUP_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_L3_AON_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -133,6 +146,7 @@ static struct clockdomain l4_wkup_aon_am33xx_clkdm = {
 	.name		= "l4_wkup_aon_clkdm",
 	.pwrdm		= { .name = "wkup_pwrdm" },
 	.cm_inst	= AM33XX_CM_WKUP_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_L4_WKUP_AON_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -142,6 +156,7 @@ static struct clockdomain mpu_am33xx_clkdm = {
 	.name		= "mpu_clkdm",
 	.pwrdm		= { .name = "mpu_pwrdm" },
 	.cm_inst	= AM33XX_CM_MPU_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_MPU_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -151,6 +166,7 @@ static struct clockdomain l4_rtc_am33xx_clkdm = {
 	.name		= "l4_rtc_clkdm",
 	.pwrdm		= { .name = "rtc_pwrdm" },
 	.cm_inst	= AM33XX_CM_RTC_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_RTC_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -160,6 +176,7 @@ static struct clockdomain gfx_l3_am33xx_clkdm = {
 	.name		= "gfx_l3_clkdm",
 	.pwrdm		= { .name = "gfx_pwrdm" },
 	.cm_inst	= AM33XX_CM_GFX_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_GFX_L3_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -169,6 +186,7 @@ static struct clockdomain gfx_l4ls_gfx_am33xx_clkdm = {
 	.name		= "gfx_l4ls_gfx_clkdm",
 	.pwrdm		= { .name = "gfx_pwrdm" },
 	.cm_inst	= AM33XX_CM_GFX_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_GFX_L4LS_GFX_CLKSTCTRL__1_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -178,6 +196,7 @@ static struct clockdomain l4_cefuse_am33xx_clkdm = {
 	.name		= "l4_cefuse_clkdm",
 	.pwrdm		= { .name = "cefuse_pwrdm" },
 	.cm_inst	= AM33XX_CM_CEFUSE_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_CEFUSE_CLKSTCTRL_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -187,6 +206,7 @@ static struct clockdomain wkup_usb_am33xx_clkdm = {
 	.name		= "wkup_usb_clkdm",
 	.pwrdm		= { .name = "wkup_pwrdm" },
 	.cm_inst	= AM33XX_CM_WKUP_MOD,
+	.prcm_partition	= AM33XX_PRM_PARTITION,
 	.clkdm_offs	= AM33XX_CM_CLKDCOLDO_DPLL_PER_OFFSET,
 	.clktrctrl_mask	= AM33XX_CLKTRCTRL_MASK,
 	.flags		= CLKDM_CAN_SWSUP,
@@ -199,7 +219,7 @@ static struct clockdomain *clockdomains_am33xx[] __initdata = {
 	&l3_am33xx_clkdm,
 	&l4hs_am33xx_clkdm,
 	&ocpwp_l3_am33xx_clkdm,
-	&icss_ocp_am33xx_clkdm,
+	&pruss_ocp_am33xx_clkdm,
 	&cpsw_125mhz_am33xx_clkdm,
 	&lcdc_am33xx_clkdm,
 	&clk_24mhz_am33xx_clkdm,
@@ -217,7 +237,7 @@ static struct clockdomain *clockdomains_am33xx[] __initdata = {
 
 void __init am33xx_clockdomains_init(void)
 {
-	clkdm_register_platform_funcs(&omap3_clkdm_operations);
+	clkdm_register_platform_funcs(&am33xx_clkdm_operations);
 	clkdm_register_clkdms(clockdomains_am33xx);
 	clkdm_complete_init();
 }
diff --git a/arch/arm/mach-omap2/cm-regbits-33xx.h b/arch/arm/mach-omap2/cm-regbits-33xx.h
index e10a737..f3e2d4a 100644
--- a/arch/arm/mach-omap2/cm-regbits-33xx.h
+++ b/arch/arm/mach-omap2/cm-regbits-33xx.h
@@ -118,17 +118,17 @@
 #define AM33XX_CLKACTIVITY_I2C_FCLK_SHIFT		24
 #define AM33XX_CLKACTIVITY_I2C_FCLK_MASK		(1 << 24)
 
-/* Used by CM_PER_ICSS_CLKSTCTRL */
-#define AM33XX_CLKACTIVITY_ICSS_IEP_GCLK_SHIFT		5
-#define AM33XX_CLKACTIVITY_ICSS_IEP_GCLK_MASK		(1 << 5)
+/* Used by CM_PER_PRUSS_CLKSTCTRL */
+#define AM33XX_CLKACTIVITY_PRUSS_IEP_GCLK_SHIFT		5
+#define AM33XX_CLKACTIVITY_PRUSS_IEP_GCLK_MASK		(1 << 5)
 
-/* Used by CM_PER_ICSS_CLKSTCTRL */
-#define AM33XX_CLKACTIVITY_ICSS_OCP_GCLK_SHIFT		4
-#define AM33XX_CLKACTIVITY_ICSS_OCP_GCLK_MASK		(1 << 4)
+/* Used by CM_PER_PRUSS_CLKSTCTRL */
+#define AM33XX_CLKACTIVITY_PRUSS_OCP_GCLK_SHIFT		4
+#define AM33XX_CLKACTIVITY_PRUSS_OCP_GCLK_MASK		(1 << 4)
 
-/* Used by CM_PER_ICSS_CLKSTCTRL */
-#define AM33XX_CLKACTIVITY_ICSS_UART_GCLK_SHIFT		6
-#define AM33XX_CLKACTIVITY_ICSS_UART_GCLK_MASK		(1 << 6)
+/* Used by CM_PER_PRUSS_CLKSTCTRL */
+#define AM33XX_CLKACTIVITY_PRUSS_UART_GCLK_SHIFT	6
+#define AM33XX_CLKACTIVITY_PRUSS_UART_GCLK_MASK		(1 << 6)
 
 /* Used by CM_PER_L3S_CLKSTCTRL */
 #define AM33XX_CLKACTIVITY_L3S_GCLK_SHIFT		3
@@ -272,7 +272,7 @@
 
 /* Used by CM_CLKOUT_CTRL */
 #define AM33XX_CLKOUT2DIV_SHIFT				3
-#define AM33XX_CLKOUT2DIV_MASK				(0x7 << 3)
+#define AM33XX_CLKOUT2DIV_MASK				(0x05 << 3)
 
 /* Used by CM_CLKOUT_CTRL */
 #define AM33XX_CLKOUT2EN_SHIFT				7
@@ -280,7 +280,7 @@
 
 /* Used by CM_CLKOUT_CTRL */
 #define AM33XX_CLKOUT2SOURCE_SHIFT			0
-#define AM33XX_CLKOUT2SOURCE_MASK			(0x7 << 0)
+#define AM33XX_CLKOUT2SOURCE_MASK			(0x02 << 0)
 
 /*
  * Used by CLKSEL_GPIO0_DBCLK, CLKSEL_LCDC_PIXEL_CLK, CLKSEL_TIMER2_CLK,
@@ -291,7 +291,7 @@
 #define AM33XX_CLKSEL_MASK				(0x01 << 0)
 
 /*
- * Renamed from CLKSEL Used by CLKSEL_ICSS_OCP_CLK, CLKSEL_WDT1_CLK,
+ * Renamed from CLKSEL Used by CLKSEL_PRUSS_OCP_CLK, CLKSEL_WDT1_CLK,
  * CM_CPTS_RFT_CLKSEL
  */
 #define AM33XX_CLKSEL_0_0_SHIFT				0
@@ -310,7 +310,7 @@
 
 /*
  * Used by CM_MPU_CLKSTCTRL, CM_RTC_CLKSTCTRL, CM_PER_CLK_24MHZ_CLKSTCTRL,
- * CM_PER_CPSW_CLKSTCTRL, CM_PER_ICSS_CLKSTCTRL, CM_PER_L3S_CLKSTCTRL,
+ * CM_PER_CPSW_CLKSTCTRL, CM_PER_PRUSS_CLKSTCTRL, CM_PER_L3S_CLKSTCTRL,
  * CM_PER_L3_CLKSTCTRL, CM_PER_L4FW_CLKSTCTRL, CM_PER_L4HS_CLKSTCTRL,
  * CM_PER_L4LS_CLKSTCTRL, CM_PER_LCDC_CLKSTCTRL, CM_PER_OCPWP_L3_CLKSTCTRL,
  * CM_L3_AON_CLKSTCTRL, CM_L4_WKUP_AON_CLKSTCTRL, CM_WKUP_CLKSTCTRL,
@@ -496,7 +496,7 @@
  * CM_PER_GPIO1_CLKCTRL, CM_PER_GPIO2_CLKCTRL, CM_PER_GPIO3_CLKCTRL,
  * CM_PER_GPIO4_CLKCTRL, CM_PER_GPIO5_CLKCTRL, CM_PER_GPIO6_CLKCTRL,
  * CM_PER_GPMC_CLKCTRL, CM_PER_I2C1_CLKCTRL, CM_PER_I2C2_CLKCTRL,
- * CM_PER_ICSS_CLKCTRL, CM_PER_IEEE5000_CLKCTRL, CM_PER_L3_CLKCTRL,
+ * CM_PER_PRUSS_CLKCTRL, CM_PER_IEEE5000_CLKCTRL, CM_PER_L3_CLKCTRL,
  * CM_PER_L3_INSTR_CLKCTRL, CM_PER_L4FW_CLKCTRL, CM_PER_L4HS_CLKCTRL,
  * CM_PER_L4LS_CLKCTRL, CM_PER_LCDC_CLKCTRL, CM_PER_MAILBOX0_CLKCTRL,
  * CM_PER_MAILBOX1_CLKCTRL, CM_PER_MCASP0_CLKCTRL, CM_PER_MCASP1_CLKCTRL,
@@ -553,7 +553,7 @@
  * CM_PER_GPIO1_CLKCTRL, CM_PER_GPIO2_CLKCTRL, CM_PER_GPIO3_CLKCTRL,
  * CM_PER_GPIO4_CLKCTRL, CM_PER_GPIO5_CLKCTRL, CM_PER_GPIO6_CLKCTRL,
  * CM_PER_GPMC_CLKCTRL, CM_PER_I2C1_CLKCTRL, CM_PER_I2C2_CLKCTRL,
- * CM_PER_ICSS_CLKCTRL, CM_PER_IEEE5000_CLKCTRL, CM_PER_L3_CLKCTRL,
+ * CM_PER_PRUSS_CLKCTRL, CM_PER_IEEE5000_CLKCTRL, CM_PER_L3_CLKCTRL,
  * CM_PER_L3_INSTR_CLKCTRL, CM_PER_L4FW_CLKCTRL, CM_PER_L4HS_CLKCTRL,
  * CM_PER_L4LS_CLKCTRL, CM_PER_LCDC_CLKCTRL, CM_PER_MAILBOX0_CLKCTRL,
  * CM_PER_MAILBOX1_CLKCTRL, CM_PER_MCASP0_CLKCTRL, CM_PER_MCASP1_CLKCTRL,
@@ -618,7 +618,7 @@
 #define AM33XX_OPTFCLKEN_GPIO_6_GDBCLK_MASK		(1 << 18)
 
 /*
- * Used by CM_MPU_MPU_CLKCTRL, CM_PER_CPGMAC0_CLKCTRL, CM_PER_ICSS_CLKCTRL,
+ * Used by CM_MPU_MPU_CLKCTRL, CM_PER_CPGMAC0_CLKCTRL, CM_PER_PRUSS_CLKCTRL,
  * CM_PER_IEEE5000_CLKCTRL, CM_PER_LCDC_CLKCTRL, CM_PER_MLB_CLKCTRL,
  * CM_PER_MSTR_EXPS_CLKCTRL, CM_PER_OCPWP_CLKCTRL, CM_PER_PCIE_CLKCTRL,
  * CM_PER_SPARE_CLKCTRL, CM_PER_TPTC0_CLKCTRL, CM_PER_TPTC1_CLKCTRL,
diff --git a/arch/arm/mach-omap2/cm33xx.c b/arch/arm/mach-omap2/cm33xx.c
deleted file mode 100644
index a30b220..0000000
--- a/arch/arm/mach-omap2/cm33xx.c
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * AM33XX CM module functions
- *
- * Copyright (C) 2010 Texas Instruments Incorporated - http://www.ti.com/
- *
- * Based on arch/arm/mach-omap2/cm4xxx.c
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-#include <linux/delay.h>
-#include <linux/errno.h>
-#include <linux/err.h>
-#include <linux/io.h>
-
-#include "common.h"
-
-#include "cm.h"
-#include "cm-regbits-33xx.h"
-#include "cm33xx.h"
-
-/**
- * am33xx_cm_wait_module_ready - wait for a module to be in 'func' state
- * @inst: Offset of CM instance associated with
- * @clkctrl_reg: CLKCTRL offset from CM instance base
- *
- * Wait for the module IDLEST to be functional. If the idle state is in any
- * the non functional state (trans, idle or disabled), module and thus the
- * sysconfig cannot be accessed and will probably lead to an "imprecise
- * external abort"
- *
- * Module idle state:
- *   0x0 func:     Module is fully functional, including OCP
- *   0x1 trans:    Module is performing transition: wakeup, or sleep, or sleep
- *                 abortion
- *   0x2 idle:     Module is in Idle mode (only OCP part). It is functional if
- *                 using separate functional clock
- *   0x3 disabled: Module is disabled and cannot be accessed
- *
- */
-int am33xx_cm_wait_module_ready(u16 inst, u16 clkctrl_reg)
-{
-	int i = 0;
-
-	omap_test_timeout((
-		((__raw_readl(AM33XX_CM_REGADDR(inst, clkctrl_reg)) &
-		  AM33XX_IDLEST_MASK) == 0)), MAX_MODULE_READY_TIME, i);
-
-	return (i < MAX_MODULE_READY_TIME) ? 0 : -EBUSY;
-}
diff --git a/arch/arm/mach-omap2/cm33xx.h b/arch/arm/mach-omap2/cm33xx.h
index 943dc80..4134901 100644
--- a/arch/arm/mach-omap2/cm33xx.h
+++ b/arch/arm/mach-omap2/cm33xx.h
@@ -16,6 +16,12 @@
 #ifndef __ARCH_ARM_MACH_OMAP2_CM_33XX_H
 #define __ARCH_ARM_MACH_OMAP2_CM_33XX_H
 
+#include "common.h"
+
+#include "cm.h"
+#include "cm-regbits-33xx.h"
+#include "cm33xx.h"
+
 /* CM base address */
 #define AM33XX_CM_BASE		0x44e00000
 
@@ -43,8 +49,6 @@
 #define AM33XX_CM_PER_L4FW_CLKSTCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0008)
 #define AM33XX_CM_PER_L3_CLKSTCTRL_OFFSET		0x000c
 #define AM33XX_CM_PER_L3_CLKSTCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x000c)
-#define AM33XX_CM_PER_PCIE_CLKCTRL_OFFSET		0x0010
-#define AM33XX_CM_PER_PCIE_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0010)
 #define AM33XX_CM_PER_CPGMAC0_CLKCTRL_OFFSET		0x0014
 #define AM33XX_CM_PER_CPGMAC0_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0014)
 #define AM33XX_CM_PER_LCDC_CLKCTRL_OFFSET		0x0018
@@ -133,8 +137,6 @@
 #define AM33XX_CM_PER_DCAN0_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00c0)
 #define AM33XX_CM_PER_DCAN1_CLKCTRL_OFFSET		0x00c4
 #define AM33XX_CM_PER_DCAN1_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00c4)
-#define AM33XX_CM_PER_SPARE_CLKCTRL_OFFSET		0x00c8
-#define AM33XX_CM_PER_SPARE_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00c8)
 #define AM33XX_CM_PER_EPWMSS1_CLKCTRL_OFFSET		0x00cc
 #define AM33XX_CM_PER_EPWMSS1_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00cc)
 #define AM33XX_CM_PER_EMIF_FW_CLKCTRL_OFFSET		0x00d0
@@ -149,8 +151,8 @@
 #define AM33XX_CM_PER_L3_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00e0)
 #define AM33XX_CM_PER_IEEE5000_CLKCTRL_OFFSET		0x00e4
 #define AM33XX_CM_PER_IEEE5000_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00e4)
-#define AM33XX_CM_PER_ICSS_CLKCTRL_OFFSET		0x00e8
-#define AM33XX_CM_PER_ICSS_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00e8)
+#define AM33XX_CM_PER_PRUSS_CLKCTRL_OFFSET		0x00e8
+#define AM33XX_CM_PER_PRUSS_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00e8)
 #define AM33XX_CM_PER_TIMER5_CLKCTRL_OFFSET		0x00ec
 #define AM33XX_CM_PER_TIMER5_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x00ec)
 #define AM33XX_CM_PER_TIMER6_CLKCTRL_OFFSET		0x00f0
@@ -183,12 +185,8 @@
 #define AM33XX_CM_PER_OCPWP_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0130)
 #define AM33XX_CM_PER_MAILBOX1_CLKCTRL_OFFSET		0x0134
 #define AM33XX_CM_PER_MAILBOX1_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0134)
-#define AM33XX_CM_PER_SPARE0_CLKCTRL_OFFSET		0x0138
-#define AM33XX_CM_PER_SPARE0_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0138)
-#define AM33XX_CM_PER_SPARE1_CLKCTRL_OFFSET		0x013c
-#define AM33XX_CM_PER_SPARE1_CLKCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x013c)
-#define AM33XX_CM_PER_ICSS_CLKSTCTRL_OFFSET		0x0140
-#define AM33XX_CM_PER_ICSS_CLKSTCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0140)
+#define AM33XX_CM_PER_PRUSS_CLKSTCTRL_OFFSET		0x0140
+#define AM33XX_CM_PER_PRUSS_CLKSTCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0140)
 #define AM33XX_CM_PER_CPSW_CLKSTCTRL_OFFSET		0x0144
 #define AM33XX_CM_PER_CPSW_CLKSTCTRL			AM33XX_CM_REGADDR(AM33XX_CM_PER_MOD, 0x0144)
 #define AM33XX_CM_PER_LCDC_CLKSTCTRL_OFFSET		0x0148
@@ -331,8 +329,8 @@
 #define AM33XX_CLKSEL_TIMER1MS_CLK			AM33XX_CM_REGADDR(AM33XX_CM_DPLL_MOD, 0x0028)
 #define AM33XX_CLKSEL_GFX_FCLK_OFFSET			0x002c
 #define AM33XX_CLKSEL_GFX_FCLK				AM33XX_CM_REGADDR(AM33XX_CM_DPLL_MOD, 0x002c)
-#define AM33XX_CLKSEL_ICSS_OCP_CLK_OFFSET		0x0030
-#define AM33XX_CLKSEL_ICSS_OCP_CLK			AM33XX_CM_REGADDR(AM33XX_CM_DPLL_MOD, 0x0030)
+#define AM33XX_CLKSEL_PRUSS_OCP_CLK_OFFSET		0x0030
+#define AM33XX_CLKSEL_PRUSS_OCP_CLK			AM33XX_CM_REGADDR(AM33XX_CM_DPLL_MOD, 0x0030)
 #define AM33XX_CLKSEL_LCDC_PIXEL_CLK_OFFSET		0x0034
 #define AM33XX_CLKSEL_LCDC_PIXEL_CLK			AM33XX_CM_REGADDR(AM33XX_CM_DPLL_MOD, 0x0034)
 #define AM33XX_CLKSEL_WDT1_CLK_OFFSET			0x0038
diff --git a/arch/arm/mach-omap2/cminst33xx.c b/arch/arm/mach-omap2/cminst33xx.c
deleted file mode 100644
index ce8a054..0000000
--- a/arch/arm/mach-omap2/cminst33xx.c
+++ /dev/null
@@ -1,312 +0,0 @@
-/*
- * AM33XX CM instance functions
- *
- * Copyright (C) 2011 Texas Instruments, Inc.
- * Vaibhav Hiremath <hvaibhav@ti.com>
- *
- * Reference taken from from OMAP4
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-
-#include <linux/kernel.h>
-#include <linux/types.h>
-#include <linux/errno.h>
-#include <linux/err.h>
-#include <linux/io.h>
-
-#include <plat/common.h>
-
-#include "cm.h"
-#include "cm33xx.h"
-#include "cminst33xx.h"
-#include "cm-regbits-34xx.h"
-#include "cm-regbits-33xx.h"
-#include "common.h"
-#include "prm33xx.h"
-
-/*
- * CLKCTRL_IDLEST_*: possible values for the CM_*_CLKCTRL.IDLEST bitfield:
- *
- *   0x0 func:     Module is fully functional, including OCP
- *   0x1 trans:    Module is performing transition: wakeup, or sleep, or sleep
- *                 abortion
- *   0x2 idle:     Module is in Idle mode (only OCP part). It is functional if
- *                 using separate functional clock
- *   0x3 disabled: Module is disabled and cannot be accessed
- *
- */
-#define CLKCTRL_IDLEST_FUNCTIONAL		0x0
-#define CLKCTRL_IDLEST_INTRANSITION		0x1
-#define CLKCTRL_IDLEST_INTERFACE_IDLE		0x2
-#define CLKCTRL_IDLEST_DISABLED			0x3
-
-/* Private functions */
-
-/**
- * _clkctrl_idlest - read a CM_*_CLKCTRL register; mask & shift IDLEST bitfield
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- * @clkctrl_offs: Module clock control register offset (*_CLKCTRL macro)
- *
- * Return the IDLEST bitfield of a CM_*_CLKCTRL register, shifted down to
- * bit 0.
- */
-static u32 _clkctrl_idlest(u16 inst, s16 cdoffs, u16 clkctrl_offs)
-{
-	u32 v = am33xx_cminst_read_inst_reg(inst, clkctrl_offs);
-	v &= AM33XX_IDLEST_MASK;
-	v >>= AM33XX_IDLEST_SHIFT;
-	return v;
-}
-
-/**
- * _is_module_ready - can module registers be accessed without causing an abort?
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- * @clkctrl_offs: Module clock control register offset (*_CLKCTRL macro)
- *
- * Returns true if the module's CM_*_CLKCTRL.IDLEST bitfield is either
- * *FUNCTIONAL or *INTERFACE_IDLE; false otherwise.
- */
-static bool _is_module_ready(u16 inst, s16 cdoffs, u16 clkctrl_offs)
-{
-	u32 v;
-
-	v = _clkctrl_idlest(inst, cdoffs, clkctrl_offs);
-
-	return (v == CLKCTRL_IDLEST_FUNCTIONAL ||
-		v == CLKCTRL_IDLEST_INTERFACE_IDLE) ? true : false;
-}
-
-/* Public functions */
-
-/* Read a register in a CM instance */
-u32 am33xx_cminst_read_inst_reg(s16 inst, u16 idx)
-{
-	return __raw_readl(cm_base + inst + idx);
-}
-
-/* Write into a register in a CM instance */
-void am33xx_cminst_write_inst_reg(u32 val, s16 inst, u16 idx)
-{
-	__raw_writel(val, cm_base + inst + idx);
-}
-
-/* Read-modify-write a register in CM1. Caller must lock */
-u32 am33xx_cminst_rmw_inst_reg_bits(u32 mask, u32 bits, s16 inst, s16 idx)
-{
-	u32 v;
-
-	v = am33xx_cminst_read_inst_reg(inst, idx);
-	v &= ~mask;
-	v |= bits;
-	am33xx_cminst_write_inst_reg(v, inst, idx);
-
-	return v;
-}
-
-u32 am33xx_cminst_set_inst_reg_bits(u32 bits, s16 inst, s16 idx)
-{
-	return am33xx_cminst_rmw_inst_reg_bits(bits, bits, inst, idx);
-}
-
-u32 am33xx_cminst_clear_inst_reg_bits(u32 bits, s16 inst, s16 idx)
-{
-	return am33xx_cminst_rmw_inst_reg_bits(bits, 0x0, inst, idx);
-}
-
-u32 am33xx_cminst_read_inst_reg_bits(u16 inst, s16 idx, u32 mask)
-{
-	u32 v;
-
-	v = am33xx_cminst_read_inst_reg(inst, idx);
-	v &= mask;
-	v >>= __ffs(mask);
-
-	return v;
-}
-
-/**
- * _clktrctrl_write - write @c to a CM_CLKSTCTRL.CLKTRCTRL register bitfield
- * @c: CLKTRCTRL register bitfield (LSB = bit 0, i.e., unshifted)
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- *
- * @c must be the unshifted value for CLKTRCTRL - i.e., this function
- * will handle the shift itself.
- */
-static void _clktrctrl_write(u8 c, s16 inst, u16 cdoffs)
-{
-	u32 v;
-
-	v = am33xx_cminst_read_inst_reg(inst, cdoffs);
-	v &= ~AM33XX_CLKTRCTRL_MASK;
-	v |= c << AM33XX_CLKTRCTRL_SHIFT;
-	am33xx_cminst_write_inst_reg(v, inst, cdoffs);
-}
-
-/**
- * am33xx_cminst_is_clkdm_in_hwsup - is a clockdomain in hwsup idle mode?
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- *
- * Returns true if the clockdomain referred to by (@inst, @cdoffs)
- * is in hardware-supervised idle mode, or 0 otherwise.
- */
-bool am33xx_cminst_is_clkdm_in_hwsup(s16 inst, u16 cdoffs)
-{
-	u32 v;
-
-	v = am33xx_cminst_read_inst_reg(inst, cdoffs);
-	v &= AM33XX_CLKTRCTRL_MASK;
-	v >>= AM33XX_CLKTRCTRL_SHIFT;
-
-	return (v == OMAP34XX_CLKSTCTRL_ENABLE_AUTO) ? true : false;
-}
-
-/**
- * am33xx_cminst_clkdm_enable_hwsup - put a clockdomain in hwsup-idle mode
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- *
- * Put a clockdomain referred to by (@inst, @cdoffs) into
- * hardware-supervised idle mode.  No return value.
- */
-void am33xx_cminst_clkdm_enable_hwsup(s16 inst, u16 cdoffs)
-{
-	_clktrctrl_write(OMAP34XX_CLKSTCTRL_ENABLE_AUTO, inst, cdoffs);
-}
-
-/**
- * am33xx_cminst_clkdm_disable_hwsup - put a clockdomain in swsup-idle mode
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- *
- * Put a clockdomain referred to by (@inst, @cdoffs) into
- * software-supervised idle mode, i.e., controlled manually by the
- * Linux OMAP clockdomain code.  No return value.
- */
-void am33xx_cminst_clkdm_disable_hwsup(s16 inst, u16 cdoffs)
-{
-	_clktrctrl_write(OMAP34XX_CLKSTCTRL_DISABLE_AUTO, inst, cdoffs);
-}
-
-/**
- * am33xx_cminst_clkdm_force_sleep - try to put a clockdomain into idle
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- *
- * Put a clockdomain referred to by (@inst, @cdoffs) into idle
- * No return value.
- */
-void am33xx_cminst_clkdm_force_sleep(s16 inst, u16 cdoffs)
-{
-	_clktrctrl_write(OMAP34XX_CLKSTCTRL_FORCE_SLEEP, inst, cdoffs);
-}
-
-/**
- * am33xx_cminst_clkdm_force_sleep - try to take a clockdomain out of idle
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- *
- * Take a clockdomain referred to by (@inst, @cdoffs) out of idle,
- * waking it up.  No return value.
- */
-void am33xx_cminst_clkdm_force_wakeup(s16 inst, u16 cdoffs)
-{
-	_clktrctrl_write(OMAP34XX_CLKSTCTRL_FORCE_WAKEUP, inst, cdoffs);
-}
-
-/*
- *
- */
-
-/**
- * am33xx_cminst_wait_module_ready - wait for a module to be in 'func' state
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- * @clkctrl_offs: Module clock control register offset (*_CLKCTRL macro)
- *
- * Wait for the module IDLEST to be functional. If the idle state is in any
- * the non functional state (trans, idle or disabled), module and thus the
- * sysconfig cannot be accessed and will probably lead to an "imprecise
- * external abort"
- */
-int am33xx_cminst_wait_module_ready(u16 inst, s16 cdoffs, u16 clkctrl_offs)
-{
-	int i = 0;
-
-	if (!clkctrl_offs)
-		return 0;
-
-	omap_test_timeout(_is_module_ready(inst, cdoffs, clkctrl_offs),
-			  MAX_MODULE_READY_TIME, i);
-
-	return (i < MAX_MODULE_READY_TIME) ? 0 : -EBUSY;
-}
-
-/**
- * am33xx_cminst_wait_module_idle - wait for a module to be in 'disabled'
- * state
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- * @clkctrl_offs: Module clock control register offset (*_CLKCTRL macro)
- *
- * Wait for the module IDLEST to be disabled. Some PRCM transition,
- * like reset assertion or parent clock de-activation must wait the
- * module to be fully disabled.
- */
-int am33xx_cminst_wait_module_idle(u16 inst, s16 cdoffs, u16 clkctrl_offs)
-{
-	int i = 0;
-
-	if (!clkctrl_offs)
-		return 0;
-
-	omap_test_timeout((_clkctrl_idlest(inst, cdoffs, clkctrl_offs) ==
-			   CLKCTRL_IDLEST_DISABLED),
-			  MAX_MODULE_READY_TIME, i);
-
-	return (i < MAX_MODULE_READY_TIME) ? 0 : -EBUSY;
-}
-
-/**
- * am33xx_cminst_module_enable - Enable the modulemode inside CLKCTRL
- * @mode: Module mode (SW or HW)
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- * @clkctrl_offs: Module clock control register offset (*_CLKCTRL macro)
- *
- * No return value.
- */
-void am33xx_cminst_module_enable(u8 mode, u16 inst, s16 cdoffs,
-				u16 clkctrl_offs)
-{
-	u32 v;
-
-	v = am33xx_cminst_read_inst_reg(inst, clkctrl_offs);
-	v &= ~AM33XX_MODULEMODE_MASK;
-	v |= mode << AM33XX_MODULEMODE_SHIFT;
-	am33xx_cminst_write_inst_reg(v, inst, clkctrl_offs);
-}
-
-/**
- * am33xx_cminst_module_disable - Disable the module inside CLKCTRL
- * @inst: CM instance register offset (*_INST macro)
- * @cdoffs: Clockdomain register offset (*_CDOFFS macro)
- * @clkctrl_offs: Module clock control register offset (*_CLKCTRL macro)
- *
- * No return value.
- */
-void am33xx_cminst_module_disable(u16 inst, s16 cdoffs,
-			     u16 clkctrl_offs)
-{
-	u32 v;
-
-	v = am33xx_cminst_read_inst_reg(inst, clkctrl_offs);
-	v &= ~AM33XX_MODULEMODE_MASK;
-	am33xx_cminst_write_inst_reg(v, inst, clkctrl_offs);
-}
diff --git a/arch/arm/mach-omap2/cminst44xx.h b/arch/arm/mach-omap2/cminst44xx.h
index 3d1bde1..e37c779 100644
--- a/arch/arm/mach-omap2/cminst44xx.h
+++ b/arch/arm/mach-omap2/cminst44xx.h
@@ -19,7 +19,7 @@ extern void omap4_cminst_clkdm_force_wakeup(u8 part, s16 inst, u16 cdoffs);
 
 extern int omap4_cminst_wait_module_ready(u8 part, u16 inst, s16 cdoffs, u16 clkctrl_offs);
 
-# ifdef CONFIG_ARCH_OMAP4
+# if defined (CONFIG_ARCH_OMAP4) || defined (CONFIG_SOC_OMAPAM33XX)
 extern int omap4_cminst_wait_module_idle(u8 part, u16 inst, s16 cdoffs,
 					 u16 clkctrl_offs);
 
diff --git a/arch/arm/mach-omap2/omap_hwmod.c b/arch/arm/mach-omap2/omap_hwmod.c
index 511173d..65a0891 100644
--- a/arch/arm/mach-omap2/omap_hwmod.c
+++ b/arch/arm/mach-omap2/omap_hwmod.c
@@ -148,12 +148,10 @@
 
 #include "cm2xxx_3xxx.h"
 #include "cminst44xx.h"
-#include "cminst33xx.h"
 #include "prm2xxx_3xxx.h"
 #include "prm44xx.h"
 #include "prm33xx.h"
 #include "prminst44xx.h"
-#include "prminst33xx.h"
 #include "mux.h"
 
 /* Maximum microseconds to wait for OMAP module to softreset */
@@ -745,19 +743,13 @@ static void _enable_module(struct omap_hwmod *oh)
 		return;
 
 	pr_debug("omap_hwmod: %s: _enable_module: %d\n",
-		 oh->name, oh->prcm.omap4.modulemode);
+			oh->name, oh->prcm.omap4.modulemode);
 
-	if (cpu_is_am33xx())
-		am33xx_cminst_module_enable(oh->prcm.omap4.modulemode,
-				   oh->clkdm->cm_inst,
-				   oh->clkdm->clkdm_offs,
-				   oh->prcm.omap4.clkctrl_offs);
-	else
-		omap4_cminst_module_enable(oh->prcm.omap4.modulemode,
-				   oh->clkdm->prcm_partition,
-				   oh->clkdm->cm_inst,
-				   oh->clkdm->clkdm_offs,
-				   oh->prcm.omap4.clkctrl_offs);
+	omap4_cminst_module_enable(oh->prcm.omap4.modulemode,
+			oh->clkdm->prcm_partition,
+			oh->clkdm->cm_inst,
+			oh->clkdm->clkdm_offs,
+			oh->prcm.omap4.clkctrl_offs);
 }
 
 /**
@@ -809,20 +801,15 @@ static int _omap4_disable_module(struct omap_hwmod *oh)
 
 	pr_debug("omap_hwmod: %s: %s\n", oh->name, __func__);
 
-	if (cpu_is_am33xx())
-		am33xx_cminst_module_disable(oh->clkdm->cm_inst,
-				    oh->clkdm->clkdm_offs,
-				    oh->prcm.omap4.clkctrl_offs);
-	else
-		omap4_cminst_module_disable(oh->clkdm->prcm_partition,
-				    oh->clkdm->cm_inst,
-				    oh->clkdm->clkdm_offs,
-				    oh->prcm.omap4.clkctrl_offs);
+	omap4_cminst_module_disable(oh->clkdm->prcm_partition,
+			oh->clkdm->cm_inst,
+			oh->clkdm->clkdm_offs,
+			oh->prcm.omap4.clkctrl_offs);
 
 	v = _omap4_wait_target_disable(oh);
 	if (v)
 		pr_warn("omap_hwmod: %s: _wait_target_disable failed\n",
-			oh->name);
+				oh->name);
 
 	return 0;
 }
-- 
1.7.5.4

