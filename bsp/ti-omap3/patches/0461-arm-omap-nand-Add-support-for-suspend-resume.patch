From 19f4211265a9282114ab78f61429a8436bb9938f Mon Sep 17 00:00:00 2001
From: "Philip, Avinash" <avinashphilip@ti.com>
Date: Sat, 30 Jun 2012 22:24:49 +0800
Subject: [PATCH 461/609] arm: omap: nand - Add support for suspend/resume

Original commit: 38f1ae3d786e532574ec3a21e243a72afb54458a

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

suspend/resume entry  points added in NAND driver by disabling/enabling
the clocks for NAND controller and ELM module.
controller clock  member is added to omap_nand_info and
omap_nand_platform_data structure.
On suspend waiting for ongoing mtd operation to finish on
mtd->suspend().

Signed-off-by: Philip, Avinash <avinashphilip@ti.com>
---
 arch/arm/mach-omap2/gpmc-nand.c        |    1 +
 arch/arm/mach-omap2/gpmc.c             |    5 ++++
 arch/arm/plat-omap/include/plat/gpmc.h |    1 +
 arch/arm/plat-omap/include/plat/nand.h |    1 +
 drivers/mtd/nand/omap2.c               |   33 ++++++++++++++++++++++++++++++++
 5 files changed, 41 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-omap2/gpmc-nand.c b/arch/arm/mach-omap2/gpmc-nand.c
index 955e264..3bab447 100644
--- a/arch/arm/mach-omap2/gpmc-nand.c
+++ b/arch/arm/mach-omap2/gpmc-nand.c
@@ -131,6 +131,7 @@ int __init gpmc_nand_init(struct omap_nand_platform_data *gpmc_nand_data)
 		gpmc_cs_configure(gpmc_nand_data->cs, GPMC_CONFIG_RDY_BSY, 1);
 	}
 
+	gpmc_nand_data->ctrl_clk = gpmc_clock();
 	err = platform_device_register(&gpmc_nand_device);
 	if (err < 0) {
 		dev_err(dev, "Unable to register NAND device\n");
diff --git a/arch/arm/mach-omap2/gpmc.c b/arch/arm/mach-omap2/gpmc.c
index a5afb5b..830935c 100644
--- a/arch/arm/mach-omap2/gpmc.c
+++ b/arch/arm/mach-omap2/gpmc.c
@@ -774,6 +774,11 @@ static int __init gpmc_init(void)
 }
 postcore_initcall(gpmc_init);
 
+struct clk *gpmc_clock(void)
+{
+	return gpmc_l3_clk;
+}
+
 static irqreturn_t gpmc_handle_irq(int irq, void *dev)
 {
 	u8 cs;
diff --git a/arch/arm/plat-omap/include/plat/gpmc.h b/arch/arm/plat-omap/include/plat/gpmc.h
index e2430de..1927459 100644
--- a/arch/arm/plat-omap/include/plat/gpmc.h
+++ b/arch/arm/plat-omap/include/plat/gpmc.h
@@ -158,6 +158,7 @@ extern int gpmc_read_status(int cmd);
 extern int gpmc_cs_configure(int cs, int cmd, int wval);
 extern int gpmc_nand_read(int cs, int cmd);
 extern int gpmc_nand_write(int cs, int cmd, int wval);
+extern struct clk *gpmc_clock(void);
 
 int gpmc_enable_hwecc(int ecc, int cs, int mode, int dev_width, int ecc_size);
 int gpmc_calculate_ecc(int ecc, int cs, const u_char *dat, u_char *ecc_code);
diff --git a/arch/arm/plat-omap/include/plat/nand.h b/arch/arm/plat-omap/include/plat/nand.h
index 67fc506..b9422ef 100644
--- a/arch/arm/plat-omap/include/plat/nand.h
+++ b/arch/arm/plat-omap/include/plat/nand.h
@@ -29,6 +29,7 @@ struct omap_nand_platform_data {
 	unsigned long		phys_base;
 	int			devsize;
 	enum omap_ecc           ecc_opt;
+	struct clk              *ctrl_clk;
 };
 
 /* minimum size for IO mapping */
diff --git a/drivers/mtd/nand/omap2.c b/drivers/mtd/nand/omap2.c
index 269fc1c..29bcf0b 100644
--- a/drivers/mtd/nand/omap2.c
+++ b/drivers/mtd/nand/omap2.c
@@ -20,6 +20,7 @@
 #include <linux/mtd/partitions.h>
 #include <linux/io.h>
 #include <linux/slab.h>
+#include <linux/clk.h>
 
 #include <plat/dma.h>
 #include <plat/gpmc.h>
@@ -132,6 +133,7 @@ struct omap_nand_info {
 	u_char				*buf;
 	int				buf_len;
 	int				ecc_opt;
+	struct clk                      *ctrl_clk;
 };
 
 /**
@@ -998,6 +1000,7 @@ static int __devinit omap_nand_probe(struct platform_device *pdev)
 
 	info->pdev = pdev;
 
+	info->ctrl_clk		= pdata->ctrl_clk;
 	info->gpmc_cs		= pdata->cs;
 	info->phys_base		= pdata->phys_base;
 
@@ -1208,9 +1211,39 @@ static int omap_nand_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM
+static int omap_nand_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	struct mtd_info *mtd = platform_get_drvdata(pdev);
+	struct omap_nand_info *info = container_of(mtd, struct omap_nand_info,
+							mtd);
+
+	mtd->suspend(mtd);
+	clk_disable(info->ctrl_clk);
+	elm_clk_disable();
+	return 0;
+}
+
+static int omap_nand_resume(struct platform_device *pdev)
+{
+	struct mtd_info *mtd = platform_get_drvdata(pdev);
+	struct omap_nand_info *info = container_of(mtd, struct omap_nand_info,
+							mtd);
+
+	elm_clk_enable();
+	clk_enable(info->ctrl_clk);
+	mtd->resume(mtd);
+	return 0;
+}
+#endif
+
 static struct platform_driver omap_nand_driver = {
 	.probe		= omap_nand_probe,
 	.remove		= omap_nand_remove,
+#ifdef CONFIG_PM
+	.suspend	= omap_nand_suspend,
+	.resume		= omap_nand_resume,
+#endif
 	.driver		= {
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
-- 
1.7.5.4

