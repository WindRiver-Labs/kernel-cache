From 709f30aaa6faf2b5df8893434d97f55c3ed2cd2e Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Sat, 30 Jun 2012 07:13:28 +0800
Subject: [PATCH 395/609] musb: cppi41: Fixes for cppi41 rmmod issue

Original commit: 50b265ac7339fa46a0e6a4ba83b285506d7eed4d

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

The cppi41 dma is common module for multi musb instances,
the cppi41 deinitialization will be done as part of
platform exit.

Signed-off-by: Ajay Kumar Gupta <ajay.gupta@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 drivers/usb/musb/am35x.c      |   20 ++++++++++++++++----
 drivers/usb/musb/cppi41.c     |    6 ++++++
 drivers/usb/musb/cppi41.h     |    5 -----
 drivers/usb/musb/cppi41_dma.c |    5 -----
 drivers/usb/musb/ti81xx.c     |   14 ++++++++------
 5 files changed, 30 insertions(+), 20 deletions(-)

diff --git a/drivers/usb/musb/am35x.c b/drivers/usb/musb/am35x.c
index 332df8b..c7f68f7 100644
--- a/drivers/usb/musb/am35x.c
+++ b/drivers/usb/musb/am35x.c
@@ -253,6 +253,19 @@ int __devinit cppi41_init(struct musb *musb)
 			dma_sched_table, numch);
 	return 0;
 }
+void cppi41_free(void)
+{
+	u32 numch, blknum, order;
+	struct usb_cppi41_info *cppi_info = &usb_cppi41_info[0];
+
+	numch =  USB_CPPI41_NUM_CH * 2;
+	order = get_count_order(numch);
+	blknum = cppi_info->dma_block;
+
+	cppi41_dma_block_uninit(blknum, cppi_info->q_mgr, order,
+			dma_sched_table, numch);
+	cppi41_queue_mgr_uninit(cppi_info->q_mgr);
+}
 #endif /* CONFIG_USB_TI_CPPI41_DMA */
 
 struct am35x_glue {
@@ -612,10 +625,6 @@ static int am35x_musb_exit(struct musb *musb)
 	usb_put_transceiver(musb->xceiv);
 	usb_nop_xceiv_unregister();
 
-#ifdef CONFIG_USB_TI_CPPI41_DMA
-	cppi41_exit();
-#endif
-
 	return 0;
 }
 
@@ -867,6 +876,9 @@ module_init(am35x_init);
 
 static void __exit am35x_exit(void)
 {
+#ifdef CONFIG_USB_TI_CPPI41_DMA
+	cppi41_free();
+#endif
 	platform_driver_unregister(&am35x_driver);
 }
 module_exit(am35x_exit);
diff --git a/drivers/usb/musb/cppi41.c b/drivers/usb/musb/cppi41.c
index 36f4379..1365c42 100644
--- a/drivers/usb/musb/cppi41.c
+++ b/drivers/usb/musb/cppi41.c
@@ -724,6 +724,12 @@ void cppi41_exit(void)
 			allocated_queues[i] = 0;
 		}
 	}
+
+	/*
+	 * pop all the teardwon descriptor queued to tdQueue
+	 */
+	cppi41_free_teardown_queue(0);
+
 	for (i = 0; i < CPPI41_NUM_DMA_BLOCK; i++)
 		if (dma_teardown[i].virt_addr != NULL) {
 
diff --git a/drivers/usb/musb/cppi41.h b/drivers/usb/musb/cppi41.h
index c668077..f694b2c 100644
--- a/drivers/usb/musb/cppi41.h
+++ b/drivers/usb/musb/cppi41.h
@@ -714,11 +714,6 @@ unsigned long cppi41_queue_pop(const struct cppi41_queue_obj *queue_obj);
 int cppi41_get_teardown_info(unsigned long addr, u32 *info);
 
 /**
- * cppi41_exit - delete the instance created via cppi41_init()
- */
-void cppi41_exit(void);
-
-/**
  * cppi41_dma_sched_tbl_init
  */
 int cppi41_dma_sched_tbl_init(u8 dma_num, u8 q_mgr,
diff --git a/drivers/usb/musb/cppi41_dma.c b/drivers/usb/musb/cppi41_dma.c
index 6bcba21..cda841c 100644
--- a/drivers/usb/musb/cppi41_dma.c
+++ b/drivers/usb/musb/cppi41_dma.c
@@ -333,11 +333,6 @@ static int cppi41_controller_stop(struct dma_controller *controller)
 	cppi_info = cppi->cppi_info;
 	musb = cppi->musb;
 
-	/*
-	 * pop all the teardwon descriptor queued to tdQueue
-	 */
-	cppi41_free_teardown_queue(0);
-
 	/* Free the teardown completion queue */
 	if (cppi41_queue_free(cppi_info->q_mgr, cppi->teardownQNum))
 		dev_dbg(musb->controller, "ERROR: failed to free teardown completion queue\n");
diff --git a/drivers/usb/musb/ti81xx.c b/drivers/usb/musb/ti81xx.c
index 4a60436..ac76247 100644
--- a/drivers/usb/musb/ti81xx.c
+++ b/drivers/usb/musb/ti81xx.c
@@ -475,11 +475,13 @@ int __devinit cppi41_init(struct musb *musb)
 	return 0;
 }
 
-void cppi41_free(struct musb *musb)
+void cppi41_free(void)
 {
 	if (!cppi41_init_done)
 		return ;
-	iounmap(cppi41_dma_base);
+
+	/* REVISIT: iounmap causing issue in rmmod */
+	/* iounmap(cppi41_dma_base); */
 	cppi41_dma_base = 0;
 	cppi41_init_done = 0;
 }
@@ -1075,10 +1077,6 @@ int ti81xx_musb_exit(struct musb *musb)
 	otg_put_transceiver(musb->xceiv);
 	usb_nop_xceiv_unregister(musb->id);
 
-#ifdef CONFIG_USB_TI_CPPI41_DMA
-	cppi41_exit();
-	cppi41_free(musb);
-#endif
 	return 0;
 }
 
@@ -1294,6 +1292,10 @@ subsys_initcall(ti81xx_glue_init);
 
 static void __exit ti81xx_glue_exit(void)
 {
+#ifdef CONFIG_USB_TI_CPPI41_DMA
+	cppi41_exit();
+	cppi41_free();
+#endif
 	platform_driver_unregister(&ti81xx_musb_driver);
 }
 module_exit(ti81xx_glue_exit);
-- 
1.7.5.4

