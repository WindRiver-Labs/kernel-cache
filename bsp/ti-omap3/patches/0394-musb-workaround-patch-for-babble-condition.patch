From 52aec3d5322fde677dbd5cc84a67ad0886fe4b49 Mon Sep 17 00:00:00 2001
From: Ravi B <ravibabu@ti.com>
Date: Tue, 1 Feb 2011 12:59:12 +0530
Subject: [PATCH 394/609] musb: workaround patch for babble condition

Original commit: e70388cdc38018e6ce1ed518fa98554e31a949c8

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

1) During the babble condition occured in host mode
the musb controller removes the session bit and drives
drvvbus to low and musb controller stops working.
2) This patch workaround this issue by restarting the musb
controller by performing usbotgss controller reset, restart
usb phy, enable all interrupts and then starts the musb
session.
3) Since musb controller shutdown during babble, the
disconnect event generated through software to notify
the associated class driver of connected that
musb is not operational.
3) The procfs entry is added to simulate the babble
condition interrupt through software
usage: echo 'b' > /proc/driver/musb_hdrc.0 or 1

Signed-off-by: Ravi B <ravibabu@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 drivers/usb/musb/musb_core.c   |    2 +-
 drivers/usb/musb/musb_core.h   |   11 ++++++++++-
 drivers/usb/musb/musb_procfs.c |    4 ++++
 drivers/usb/musb/ti81xx.c      |   34 ++++++++++++++++++++++++++++++----
 4 files changed, 45 insertions(+), 6 deletions(-)

diff --git a/drivers/usb/musb/musb_core.c b/drivers/usb/musb/musb_core.c
index 6c39dd8..c6efb73 100644
--- a/drivers/usb/musb/musb_core.c
+++ b/drivers/usb/musb/musb_core.c
@@ -978,7 +978,7 @@ void musb_start(struct musb *musb)
 	musb_platform_enable(musb);
 	musb_writeb(regs, MUSB_DEVCTL, devctl);
 }
-
+EXPORT_SYMBOL(musb_start);
 
 static void musb_generic_disable(struct musb *musb)
 {
diff --git a/drivers/usb/musb/musb_core.h b/drivers/usb/musb/musb_core.h
index 74d313d..a1df2ce 100644
--- a/drivers/usb/musb/musb_core.h
+++ b/drivers/usb/musb/musb_core.h
@@ -231,6 +231,7 @@ struct musb_platform_ops {
 	struct dma_controller* (*dma_controller_create)(struct musb *,
 		void __iomem *);
 	void (*dma_controller_destroy)(struct dma_controller *);
+	int (*simulate_babble_intr)(struct musb *musb);
 };
 
 /*
@@ -327,6 +328,7 @@ struct musb {
 
 	irqreturn_t		(*isr)(int, void *);
 	struct work_struct	irq_work;
+	struct work_struct      work;
 	struct work_struct	otg_notifier_work;
 	u16			hwvers;
 
@@ -615,6 +617,14 @@ static inline u16 musb_platform_get_hw_revision(struct musb *musb)
 	return musb->ops->get_hw_revision(musb);
 }
 
+static inline int musb_simulate_babble_intr(struct musb *musb)
+{
+	if (!musb->ops->simulate_babble_intr)
+		return -EINVAL;
+
+	return musb->ops->simulate_babble_intr(musb);
+}
+
 static inline const char *get_dma_name(struct musb *musb)
 {
 #ifdef CONFIG_MUSB_PIO_ONLY
@@ -652,5 +662,4 @@ static inline void musb_debug_delete(char *name, struct musb *data)
 {
 }
 #endif
-
 #endif	/* __MUSB_CORE_H__ */
diff --git a/drivers/usb/musb/musb_procfs.c b/drivers/usb/musb/musb_procfs.c
index 17db2c7..1dbf8ab 100644
--- a/drivers/usb/musb/musb_procfs.c
+++ b/drivers/usb/musb/musb_procfs.c
@@ -742,6 +742,10 @@ static int musb_proc_write(struct file *file, const char __user *buffer,
 		}
 		break;
 
+	case 'b':
+		/* generate software babble interrupt */
+		musb_simulate_babble_intr(musb);
+		break;
 
 	case '?':
 		INFO("?: you are seeing it\n");
diff --git a/drivers/usb/musb/ti81xx.c b/drivers/usb/musb/ti81xx.c
index 178088c..4a60436 100644
--- a/drivers/usb/musb/ti81xx.c
+++ b/drivers/usb/musb/ti81xx.c
@@ -785,6 +785,7 @@ static irqreturn_t ti81xx_interrupt(int irq, void *hci)
 	irqreturn_t ret = IRQ_NONE;
 	u32 pend1 = 0, pend2 = 0;
 	u32 epintr, usbintr;
+	u8  is_babble = 0;
 
 	spin_lock_irqsave(&musb->lock, flags);
 
@@ -816,6 +817,15 @@ static irqreturn_t ti81xx_interrupt(int irq, void *hci)
 	 * value but DEVCTL.BDEVICE is invalid without DEVCTL.SESSION set.
 	 * Also, DRVVBUS pulses for SRP (but not at 5V) ...
 	 */
+	if ((usbintr & MUSB_INTR_BABBLE) && is_host_enabled(musb)) {
+		ERR("CAUTION: musb%d: Babble Interrupt Occured\n", musb->id);
+		ERR("Please issue long reset to make usb functional !!\n");
+	}
+
+	is_babble = is_host_capable() && (musb->int_usb & MUSB_INTR_BABBLE);
+	if (is_babble)
+		musb->int_usb |= MUSB_INTR_DISCONNECT;
+
 	if (usbintr & (USB_INTR_DRVVBUS << USB_INTR_USB_SHIFT)) {
 		int drvvbus = musb_readl(reg_base, USB_STAT_REG);
 		void __iomem *mregs = musb->mregs;
@@ -897,6 +907,18 @@ static irqreturn_t ti81xx_interrupt(int irq, void *hci)
 			DBG(2, "Spurious IRQ, CPPI 4.1 status %08x, %08x\n",
 					 pend1, pend2);
 	}
+
+	if (is_babble) {
+		if (!musb->enable_babble_work) {
+			musb_writeb(musb->mregs, MUSB_DEVCTL,
+				musb_readb(musb->mregs, MUSB_DEVCTL) |
+				MUSB_DEVCTL_SESSION);
+		} else {
+			ERR("Babble: devtcl(%x)Restarting musb....\n",
+				 musb_readb(musb->mregs, MUSB_DEVCTL));
+			schedule_work(&musb->work);
+		}
+	}
 	return ret;
 }
 int ti81xx_musb_set_mode(struct musb *musb, u8 musb_mode)
@@ -968,7 +990,7 @@ int ti81xx_musb_init(struct musb *musb)
 
 	/* Start the on-chip PHY and its PLL. */
 	if (data->set_phy_power)
-		data->set_phy_power(musb->id, 1);
+		data->set_phy_power(1);
 
 	msleep(5);
 
@@ -995,6 +1017,9 @@ int ti81xx_musb_init(struct musb *musb)
 	/* set musb controller to host mode */
 	musb_platform_set_mode(musb, mode);
 
+	INIT_WORK(&musb->work, evm_deferred_musb_restart);
+	musb->enable_babble_work = 0;
+
 	musb_writel(reg_base, USB_IRQ_EOI, 0);
 	usbss_write(USBSS_IRQ_EOI, 0);
 
@@ -1045,7 +1070,7 @@ int ti81xx_musb_exit(struct musb *musb)
 
 	/* Shutdown the on-chip PHY and its PLL. */
 	if (data->set_phy_power)
-		data->set_phy_power(musb->id, 0);
+		data->set_phy_power(0);
 
 	otg_put_transceiver(musb->xceiv);
 	usb_nop_xceiv_unregister(musb->id);
@@ -1074,6 +1099,7 @@ static struct musb_platform_ops ti81xx_ops = {
 
 	.dma_controller_create	= cppi41_dma_controller_create,
 	.dma_controller_destroy	= cppi41_dma_controller_destroy,
+	.simulate_babble_intr	= musb_simulate_babble,
 };
 
 static int __init ti81xx_probe(struct platform_device *pdev)
@@ -1202,7 +1228,7 @@ static int ti81xx_suspend(struct device *dev)
 	/* Shutdown the on-chip PHY and its PLL. */
 	for (i = 0; i <= data->instances; ++i) {
 		if (data->set_phy_power)
-			data->set_phy_power(0, i);
+			data->set_phy_power(i);
 	}
 
 	/* disable the common usbss interface clock */
@@ -1220,7 +1246,7 @@ static int ti81xx_resume(struct device *dev)
 	/* Start the on-chip PHY and its PLL. */
 	for (i = 0; i <= data->instances; ++i) {
 		if (data->set_phy_power)
-			data->set_phy_power(1, i);
+			data->set_phy_power(i);
 	}
 
 	/* enable the common usbss interface clock */
-- 
1.7.5.4

