From e722e60aa59364a5a3fb9caf9452c59a3ccb5350 Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Sat, 30 Jun 2012 23:38:22 +0800
Subject: [PATCH 434/609] usb: musb: replace __raw_read/writel by readl/write

Original commit: 2ff870781ea2ef43632fc497b2efb67aa4d94b33

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Using readl and writel so that data is written to memory even on
a weakly ordered memory model of arm-v7 based platforms.

Signed-off-by: Ajay Kumar Gupta <ajay.gupta@ti.com>
---
 drivers/usb/musb/cppi41.c      |  102 ++++++++++++++++++++--------------------
 drivers/usb/musb/cppi41.h      |    4 ++
 drivers/usb/musb/musb_core.c   |    4 +-
 drivers/usb/musb/musb_io.h     |    8 ++--
 drivers/usb/musb/musb_procfs.c |    2 +-
 drivers/usb/musb/ti81xx.c      |   12 ++--
 6 files changed, 68 insertions(+), 64 deletions(-)

diff --git a/drivers/usb/musb/cppi41.c b/drivers/usb/musb/cppi41.c
index ba4e172..84ee005 100644
--- a/drivers/usb/musb/cppi41.c
+++ b/drivers/usb/musb/cppi41.c
@@ -109,16 +109,16 @@ int cppi41_queue_mgr_init(u8 q_mgr, dma_addr_t rgn0_base, u16 rgn0_size)
 	linking_ram[q_mgr].virt_addr = ptr;
 	linking_ram[q_mgr].size = rgn0_size * 4;
 
-	__raw_writel(linking_ram[q_mgr].phys_addr,
+	cppi_writel(linking_ram[q_mgr].phys_addr,
 			q_mgr_regs + QMGR_LINKING_RAM_RGN0_BASE_REG);
 	DBG("Linking RAM region 0 base @ %p, value: %x\n",
 	    q_mgr_regs + QMGR_LINKING_RAM_RGN0_BASE_REG,
-	    __raw_readl(q_mgr_regs + QMGR_LINKING_RAM_RGN0_BASE_REG));
+	    cppi_readl(q_mgr_regs + QMGR_LINKING_RAM_RGN0_BASE_REG));
 
-	__raw_writel(rgn0_size, q_mgr_regs + QMGR_LINKING_RAM_RGN0_SIZE_REG);
+	cppi_writel(rgn0_size, q_mgr_regs + QMGR_LINKING_RAM_RGN0_SIZE_REG);
 	DBG("Linking RAM region 0 size @ %p, value: %x\n",
 	    q_mgr_regs + QMGR_LINKING_RAM_RGN0_SIZE_REG,
-	    __raw_readl(q_mgr_regs + QMGR_LINKING_RAM_RGN0_SIZE_REG));
+	    cppi_readl(q_mgr_regs + QMGR_LINKING_RAM_RGN0_SIZE_REG));
 
 	ptr = kzalloc(BITS_TO_LONGS(cppi41_queue_mgr[q_mgr].num_queue),
 		      GFP_KERNEL);
@@ -146,8 +146,8 @@ int cppi41_queue_mgr_uninit(u8 q_mgr)
 	q_mgr_regs = cppi41_queue_mgr[q_mgr].q_mgr_rgn_base;
 
 	/* free the Queue Mgr linking ram space */
-	__raw_writel(0,	q_mgr_regs + QMGR_LINKING_RAM_RGN0_BASE_REG);
-	__raw_writel(0, q_mgr_regs + QMGR_LINKING_RAM_RGN0_SIZE_REG);
+	cppi_writel(0,	q_mgr_regs + QMGR_LINKING_RAM_RGN0_BASE_REG);
+	cppi_writel(0, q_mgr_regs + QMGR_LINKING_RAM_RGN0_SIZE_REG);
 	dma_free_coherent(NULL, linking_ram[q_mgr].size,
 			linking_ram[q_mgr].virt_addr,
 			linking_ram[q_mgr].phys_addr);
@@ -176,7 +176,7 @@ int cppi41_dma_sched_tbl_init(u8 dma_num, u8 q_mgr,
 		}
 #endif
 		val = sched_tbl[i];
-		__raw_writel(val, dma_block->sched_table_base +
+		cppi_writel(val, dma_block->sched_table_base +
 			DMA_SCHED_TABLE_WORD_REG(i));
 		DBG("DMA scheduler table @ %p, value written: %x\n",
 		dma_block->sched_table_base + DMA_SCHED_TABLE_WORD_REG(i),
@@ -210,7 +210,7 @@ int cppi41_schedtbl_add_dma_ch(u8 dmanum, u8 qmgr, u8 dma_ch, u8 is_tx)
 			j++;
 		}
 		if (num_ch % 4 == 0) {
-			__raw_writel(val, dma_block->sched_table_base +
+			cppi_writel(val, dma_block->sched_table_base +
 				DMA_SCHED_TABLE_WORD_REG(tbl_index));
 			tbl_index++;
 			val = j = 0;
@@ -218,7 +218,7 @@ int cppi41_schedtbl_add_dma_ch(u8 dmanum, u8 qmgr, u8 dma_ch, u8 is_tx)
 	}
 
 	if (num_ch % 4) {
-		__raw_writel(val, dma_block->sched_table_base +
+		cppi_writel(val, dma_block->sched_table_base +
 			DMA_SCHED_TABLE_WORD_REG(tbl_index));
 	}
 	return num_ch;
@@ -248,7 +248,7 @@ int cppi41_schedtbl_remove_dma_ch(u8 dmanum, u8 qmgr, u8 dma_ch, u8 is_tx)
 			j++;
 		}
 		if (num_ch % 4 == 0) {
-			__raw_writel(val, dma_block->sched_table_base +
+			cppi_writel(val, dma_block->sched_table_base +
 				DMA_SCHED_TABLE_WORD_REG(tbl_index));
 			tbl_index++;
 			val = j = 0;
@@ -256,7 +256,7 @@ int cppi41_schedtbl_remove_dma_ch(u8 dmanum, u8 qmgr, u8 dma_ch, u8 is_tx)
 	}
 
 	if (num_ch % 4) {
-		__raw_writel(val, dma_block->sched_table_base +
+		cppi_writel(val, dma_block->sched_table_base +
 			DMA_SCHED_TABLE_WORD_REG(tbl_index));
 	}
 	return num_ch;
@@ -295,13 +295,13 @@ int cppi41_dma_block_init(u8 dma_num, u8 q_mgr, u8 num_order,
 	 * queue manager and queue number.
 	 */
 	dma_block = &cppi41_dma_block[dma_num];
-	__raw_writel((q_mgr << DMA_TD_DESC_QMGR_SHIFT) |
+	cppi_writel((q_mgr << DMA_TD_DESC_QMGR_SHIFT) |
 		     (q_num << DMA_TD_DESC_QNUM_SHIFT),
 		     dma_block->global_ctrl_base +
 		     DMA_TEARDOWN_FREE_DESC_CTRL_REG);
 	DBG("Teardown free descriptor control @ %p, value: %x\n",
 	    dma_block->global_ctrl_base + DMA_TEARDOWN_FREE_DESC_CTRL_REG,
-	    __raw_readl(dma_block->global_ctrl_base +
+	    cppi_readl(dma_block->global_ctrl_base +
 			DMA_TEARDOWN_FREE_DESC_CTRL_REG));
 
 	num_desc = 1 << num_order;
@@ -355,19 +355,19 @@ int cppi41_dma_block_init(u8 dma_num, u8 q_mgr, u8 num_order,
 	num_reg = (tbl_size + 3) / 4;
 	for (i = 0; i < num_reg; i++) {
 		val = sched_tbl[i];
-		__raw_writel(val, dma_block->sched_table_base +
+		cppi_writel(val, dma_block->sched_table_base +
 			     DMA_SCHED_TABLE_WORD_REG(i));
 		DBG("DMA scheduler table @ %p, value written: %x\n",
 		    dma_block->sched_table_base + DMA_SCHED_TABLE_WORD_REG(i),
 		    val);
 	}
 
-	__raw_writel((tbl_size - 1) << DMA_SCHED_LAST_ENTRY_SHIFT |
+	cppi_writel((tbl_size - 1) << DMA_SCHED_LAST_ENTRY_SHIFT |
 		     DMA_SCHED_ENABLE_MASK,
 		     dma_block->sched_ctrl_base + DMA_SCHED_CTRL_REG);
 	DBG("DMA scheduler control @ %p, value: %x\n",
 	    dma_block->sched_ctrl_base + DMA_SCHED_CTRL_REG,
-	    __raw_readl(dma_block->sched_ctrl_base + DMA_SCHED_CTRL_REG));
+	    cppi_readl(dma_block->sched_ctrl_base + DMA_SCHED_CTRL_REG));
 
 	return 0;
 
@@ -408,14 +408,14 @@ int cppi41_dma_block_uninit(u8 dma_num, u8 q_mgr, u8 num_order,
 	/* disable the dma schedular */
 	num_reg = (tbl_size + 3) / 4;
 	for (i = 0; i < num_reg; i++) {
-		__raw_writel(0, dma_block->sched_table_base +
+		cppi_writel(0, dma_block->sched_table_base +
 			     DMA_SCHED_TABLE_WORD_REG(i));
 		DBG("DMA scheduler table @ %p, value written: %x\n",
 		    dma_block->sched_table_base + DMA_SCHED_TABLE_WORD_REG(i),
 		    0);
 	}
 
-	__raw_writel(0,	dma_block->sched_ctrl_base + DMA_SCHED_CTRL_REG);
+	cppi_writel(0,	dma_block->sched_ctrl_base + DMA_SCHED_CTRL_REG);
 
 	return 0;
 }
@@ -450,10 +450,10 @@ int cppi41_mem_rgn_alloc(u8 q_mgr, dma_addr_t rgn_addr, u8 size_order,
 	desc_mem_regs = cppi41_queue_mgr[q_mgr].desc_mem_rgn_base;
 
 	/* Write the base register */
-	__raw_writel(rgn_addr, desc_mem_regs + QMGR_MEM_RGN_BASE_REG(rgn));
+	cppi_writel(rgn_addr, desc_mem_regs + QMGR_MEM_RGN_BASE_REG(rgn));
 	DBG("Descriptor region base @ %p, value: %x\n",
 	    desc_mem_regs + QMGR_MEM_RGN_BASE_REG(rgn),
-	    __raw_readl(desc_mem_regs + QMGR_MEM_RGN_BASE_REG(rgn)));
+	    cppi_readl(desc_mem_regs + QMGR_MEM_RGN_BASE_REG(rgn)));
 
 	/* Write the control register */
 	ctrl = ((index << QMGR_MEM_RGN_INDEX_SHIFT) &
@@ -462,10 +462,10 @@ int cppi41_mem_rgn_alloc(u8 q_mgr, dma_addr_t rgn_addr, u8 size_order,
 		QMGR_MEM_RGN_DESC_SIZE_MASK) |
 	       (((num_order - 5) << QMGR_MEM_RGN_SIZE_SHIFT) &
 		QMGR_MEM_RGN_SIZE_MASK);
-	__raw_writel(ctrl, desc_mem_regs + QMGR_MEM_RGN_CTRL_REG(rgn));
+	cppi_writel(ctrl, desc_mem_regs + QMGR_MEM_RGN_CTRL_REG(rgn));
 	DBG("Descriptor region control @ %p, value: %x\n",
 	    desc_mem_regs + QMGR_MEM_RGN_CTRL_REG(rgn),
-	    __raw_readl(desc_mem_regs + QMGR_MEM_RGN_CTRL_REG(rgn)));
+	    cppi_readl(desc_mem_regs + QMGR_MEM_RGN_CTRL_REG(rgn)));
 
 	*mem_rgn = rgn;
 	return 0;
@@ -486,11 +486,11 @@ int cppi41_mem_rgn_free(u8 q_mgr, u8 mem_rgn)
 
 	desc_mem_regs = cppi41_queue_mgr[q_mgr].desc_mem_rgn_base;
 
-	if (__raw_readl(desc_mem_regs + QMGR_MEM_RGN_BASE_REG(mem_rgn)) == 0)
+	if (cppi_readl(desc_mem_regs + QMGR_MEM_RGN_BASE_REG(mem_rgn)) == 0)
 		return -ENOENT;
 
-	__raw_writel(0, desc_mem_regs + QMGR_MEM_RGN_BASE_REG(mem_rgn));
-	__raw_writel(0, desc_mem_regs + QMGR_MEM_RGN_CTRL_REG(mem_rgn));
+	cppi_writel(0, desc_mem_regs + QMGR_MEM_RGN_BASE_REG(mem_rgn));
+	cppi_writel(0, desc_mem_regs + QMGR_MEM_RGN_CTRL_REG(mem_rgn));
 
 	return 0;
 }
@@ -512,7 +512,7 @@ int cppi41_tx_ch_init(struct cppi41_dma_ch_obj *tx_ch_obj,
 	/* Populate the channel object structure */
 	tx_ch_obj->base_addr  = cppi41_dma_block[dma_num].ch_ctrl_stat_base +
 				DMA_CH_TX_GLOBAL_CFG_REG(ch_num);
-	tx_ch_obj->global_cfg = __raw_readl(tx_ch_obj->base_addr);
+	tx_ch_obj->global_cfg = cppi_readl(tx_ch_obj->base_addr);
 	return 0;
 }
 EXPORT_SYMBOL(cppi41_tx_ch_init);
@@ -533,7 +533,7 @@ int cppi41_rx_ch_init(struct cppi41_dma_ch_obj *rx_ch_obj,
 	/* Populate the channel object structure */
 	rx_ch_obj->base_addr  = cppi41_dma_block[dma_num].ch_ctrl_stat_base +
 				DMA_CH_RX_GLOBAL_CFG_REG(ch_num);
-	rx_ch_obj->global_cfg = __raw_readl(rx_ch_obj->base_addr);
+	rx_ch_obj->global_cfg = cppi_readl(rx_ch_obj->base_addr);
 	return 0;
 }
 EXPORT_SYMBOL(cppi41_rx_ch_init);
@@ -566,11 +566,11 @@ void cppi41_dma_ch_default_queue(struct cppi41_dma_ch_obj *dma_ch_obj,
 		DMA_CH_TX_DEFAULT_QNUM_MASK);
 
 	/* Get the current state of the enable bit. */
-	dma_ch_obj->global_cfg = val |= __raw_readl(dma_ch_obj->base_addr);
-	__raw_writel(val, dma_ch_obj->base_addr);
+	dma_ch_obj->global_cfg = val |= cppi_readl(dma_ch_obj->base_addr);
+	cppi_writel(val, dma_ch_obj->base_addr);
 	DBG("Channel global configuration @ %p, value written: %x, "
 	    "value read: %x\n", dma_ch_obj->base_addr, val,
-	    __raw_readl(dma_ch_obj->base_addr));
+	    cppi_readl(dma_ch_obj->base_addr));
 
 }
 EXPORT_SYMBOL(cppi41_dma_ch_default_queue);
@@ -582,7 +582,7 @@ void cppi41_rx_ch_configure(struct cppi41_dma_ch_obj *rx_ch_obj,
 			    struct cppi41_rx_ch_cfg  *cfg)
 {
 	void __iomem *base = rx_ch_obj->base_addr;
-	u32 val = __raw_readl(rx_ch_obj->base_addr);
+	u32 val = cppi_readl(rx_ch_obj->base_addr);
 
 	val |= ((cfg->sop_offset << DMA_CH_RX_SOP_OFFSET_SHIFT) &
 		DMA_CH_RX_SOP_OFFSET_MASK) |
@@ -599,9 +599,9 @@ void cppi41_rx_ch_configure(struct cppi41_dma_ch_obj *rx_ch_obj,
 	val |= (cfg->rx_max_buf_cnt << DMA_CH_RX_MAX_BUF_CNT_SHIFT);
 
 	rx_ch_obj->global_cfg = val;
-	__raw_writel(val, base);
+	cppi_writel(val, base);
 	DBG("Rx channel global configuration @ %p, value written: %x, "
-	    "value read: %x\n", base, val, __raw_readl(base));
+	    "value read: %x\n", base, val, cppi_readl(base));
 
 	base -= DMA_CH_RX_GLOBAL_CFG_REG(0);
 
@@ -624,7 +624,7 @@ void cppi41_rx_ch_configure(struct cppi41_dma_ch_obj *rx_ch_obj,
 			DMA_CH_RX_EMBED_SOP_SLOT_SHIFT) &
 		       DMA_CH_RX_EMBED_SOP_SLOT_MASK);
 
-		__raw_writel(val, base + DMA_CH_RX_EMBED_PKT_CFG_REG_B(0));
+		cppi_writel(val, base + DMA_CH_RX_EMBED_PKT_CFG_REG_B(0));
 		DBG("Rx channel embedded packet configuration B @ %p, "
 		    "value written: %x\n",
 		    base + DMA_CH_RX_EMBED_PKT_CFG_REG_B(0), val);
@@ -654,7 +654,7 @@ void cppi41_rx_ch_configure(struct cppi41_dma_ch_obj *rx_ch_obj,
 			DMA_CH_RX_EMBED_FBP_BMGR_SHIFT(3)) &
 		       DMA_CH_RX_EMBED_FBP_BMGR_MASK(3));
 
-		__raw_writel(val, base + DMA_CH_RX_EMBED_PKT_CFG_REG_A(0));
+		cppi_writel(val, base + DMA_CH_RX_EMBED_PKT_CFG_REG_A(0));
 		DBG("Rx channel embedded packet configuration A @ %p, "
 		    "value written: %x\n",
 		    base + DMA_CH_RX_EMBED_PKT_CFG_REG_A(0), val);
@@ -673,7 +673,7 @@ void cppi41_rx_ch_configure(struct cppi41_dma_ch_obj *rx_ch_obj,
 			DMA_CH_RX_HOST_FDQ_QMGR_SHIFT(1)) &
 		       DMA_CH_RX_HOST_FDQ_QMGR_MASK(1));
 
-		__raw_writel(val, base + DMA_CH_RX_HOST_PKT_CFG_REG_A(0));
+		cppi_writel(val, base + DMA_CH_RX_HOST_PKT_CFG_REG_A(0));
 		DBG("Rx channel host packet configuration A @ %p, "
 		    "value written: %x\n",
 		    base + DMA_CH_RX_HOST_PKT_CFG_REG_A(0), val);
@@ -691,7 +691,7 @@ void cppi41_rx_ch_configure(struct cppi41_dma_ch_obj *rx_ch_obj,
 			DMA_CH_RX_HOST_FDQ_QMGR_SHIFT(3)) &
 		       DMA_CH_RX_HOST_FDQ_QMGR_MASK(3));
 
-		__raw_writel(val, base + DMA_CH_RX_HOST_PKT_CFG_REG_B(0));
+		cppi_writel(val, base + DMA_CH_RX_HOST_PKT_CFG_REG_B(0));
 		DBG("Rx channel host packet configuration B @ %p, "
 		    "value written: %x\n",
 		    base + DMA_CH_RX_HOST_PKT_CFG_REG_B(0), val);
@@ -707,7 +707,7 @@ void cppi41_rx_ch_configure(struct cppi41_dma_ch_obj *rx_ch_obj,
 			DMA_CH_RX_MONO_SOP_OFFSET_SHIFT) &
 		       DMA_CH_RX_MONO_SOP_OFFSET_MASK);
 
-		__raw_writel(val, base + DMA_CH_RX_MONO_PKT_CFG_REG(0));
+		cppi_writel(val, base + DMA_CH_RX_MONO_PKT_CFG_REG(0));
 		DBG("Rx channel monolithic packet configuration @ %p, "
 		    "value written: %x\n",
 		    base + DMA_CH_RX_MONO_PKT_CFG_REG(0), val);
@@ -720,17 +720,17 @@ void cppi41_rx_ch_set_maxbufcnt(struct cppi41_dma_ch_obj *rx_ch_obj,
 			    u8 rx_max_buf_cnt)
 {
 	void __iomem *base = rx_ch_obj->base_addr;
-	u32 val = __raw_readl(rx_ch_obj->base_addr);
+	u32 val = cppi_readl(rx_ch_obj->base_addr);
 
 	val = rx_ch_obj->global_cfg;
 	val &= ~(0x7 << DMA_CH_RX_MAX_BUF_CNT_SHIFT);
 	val |= (rx_max_buf_cnt << DMA_CH_RX_MAX_BUF_CNT_SHIFT);
 
 	rx_ch_obj->global_cfg = val;
-	__raw_writel(val, base);
+	cppi_writel(val, base);
 
 	DBG("%s: rx-global-cfg @ %p, value written: %x, "
-	    "value read: %x\n", __func__, base, val, __raw_readl(base));
+	    "value read: %x\n", __func__, base, val, cppi_readl(base));
 
 }
 EXPORT_SYMBOL(cppi41_rx_ch_set_maxbufcnt);
@@ -739,14 +739,14 @@ EXPORT_SYMBOL(cppi41_rx_ch_set_maxbufcnt);
  */
 void cppi41_dma_ch_teardown(struct cppi41_dma_ch_obj *dma_ch_obj)
 {
-	u32 val = __raw_readl(dma_ch_obj->base_addr);
+	u32 val = cppi_readl(dma_ch_obj->base_addr);
 
 	/* Initiate channel teardown. */
 	val |= dma_ch_obj->global_cfg & ~DMA_CH_TX_ENABLE_MASK;
 	dma_ch_obj->global_cfg = val |= DMA_CH_TX_TEARDOWN_MASK;
-	__raw_writel(val, dma_ch_obj->base_addr);
+	cppi_writel(val, dma_ch_obj->base_addr);
 	DBG("Tear down channel @ %p, value written: %x, value read: %x\n",
-	    dma_ch_obj->base_addr, val, __raw_readl(dma_ch_obj->base_addr));
+	    dma_ch_obj->base_addr, val, cppi_readl(dma_ch_obj->base_addr));
 }
 EXPORT_SYMBOL(cppi41_dma_ch_teardown);
 
@@ -761,9 +761,9 @@ void cppi41_dma_ch_enable(struct cppi41_dma_ch_obj *dma_ch_obj)
 
 	/* Teardown bit remains set after completion, so clear it now... */
 	dma_ch_obj->global_cfg = val &= ~DMA_CH_TX_TEARDOWN_MASK;
-	__raw_writel(val, dma_ch_obj->base_addr);
+	cppi_writel(val, dma_ch_obj->base_addr);
 	DBG("Enable channel @ %p, value written: %x, value read: %x\n",
-	    dma_ch_obj->base_addr, val, __raw_readl(dma_ch_obj->base_addr));
+	    dma_ch_obj->base_addr, val, cppi_readl(dma_ch_obj->base_addr));
 }
 EXPORT_SYMBOL(cppi41_dma_ch_enable);
 
@@ -773,10 +773,10 @@ EXPORT_SYMBOL(cppi41_dma_ch_enable);
 void cppi41_dma_ch_disable(struct cppi41_dma_ch_obj *dma_ch_obj)
 {
 	dma_ch_obj->global_cfg &= ~DMA_CH_TX_ENABLE_MASK;
-	__raw_writel(dma_ch_obj->global_cfg, dma_ch_obj->base_addr);
+	cppi_writel(dma_ch_obj->global_cfg, dma_ch_obj->base_addr);
 	DBG("Disable channel @ %p, value written: %x, value read: %x\n",
 	    dma_ch_obj->base_addr, dma_ch_obj->global_cfg,
-	    __raw_readl(dma_ch_obj->base_addr));
+	    cppi_readl(dma_ch_obj->base_addr));
 }
 EXPORT_SYMBOL(cppi41_dma_ch_disable);
 
@@ -940,7 +940,7 @@ void cppi41_queue_push(const struct cppi41_queue_obj *queue_obj, u32 desc_addr,
 	if (pkt_size)
 		val = (pkt_size << QMGR_QUEUE_PKT_SIZE_SHIFT) &
 		      QMGR_QUEUE_PKT_SIZE_MASK;
-	__raw_writel(val, queue_obj->base_addr + QMGR_QUEUE_REG_C(0));
+	cppi_writel(val, queue_obj->base_addr + QMGR_QUEUE_REG_C(0));
 #endif
 
 	val = (((desc_size - 24) >> (2 - QMGR_QUEUE_DESC_SIZE_SHIFT)) &
@@ -949,7 +949,7 @@ void cppi41_queue_push(const struct cppi41_queue_obj *queue_obj, u32 desc_addr,
 
 	DBG("Pushing value %x to queue @ %p\n", val, queue_obj->base_addr);
 
-	__raw_writel(val, queue_obj->base_addr + QMGR_QUEUE_REG_D(0));
+	cppi_writel(val, queue_obj->base_addr + QMGR_QUEUE_REG_D(0));
 }
 EXPORT_SYMBOL(cppi41_queue_push);
 
@@ -958,7 +958,7 @@ EXPORT_SYMBOL(cppi41_queue_push);
  */
 unsigned long cppi41_queue_pop(const struct cppi41_queue_obj *queue_obj)
 {
-	u32 val = __raw_readl(queue_obj->base_addr + QMGR_QUEUE_REG_D(0));
+	u32 val = cppi_readl(queue_obj->base_addr + QMGR_QUEUE_REG_D(0));
 
 	DBG("Popping value %x from queue @ %p\n", val, queue_obj->base_addr);
 
diff --git a/drivers/usb/musb/cppi41.h b/drivers/usb/musb/cppi41.h
index 07219fe..4d4d899 100644
--- a/drivers/usb/musb/cppi41.h
+++ b/drivers/usb/musb/cppi41.h
@@ -505,6 +505,10 @@ struct cppi41_queue_obj {
 				/* registers */
 };
 
+static inline u32 cppi_readl(const void __iomem *addr)
+	{ return readl(addr); }
+static inline void cppi_writel(u32 data, void __iomem *addr)
+	{ writel(data, addr); }
 /**
  * cppi41_queue_mgr_init - CPPI 4.1 queue manager initialization.
  * @q_mgr:	the queue manager to initialize
diff --git a/drivers/usb/musb/musb_core.c b/drivers/usb/musb/musb_core.c
index 8827d05..9359f4c 100644
--- a/drivers/usb/musb/musb_core.c
+++ b/drivers/usb/musb/musb_core.c
@@ -168,12 +168,12 @@ static inline void __tusb_musb_writeb(void __iomem *addr, unsigned offset,
 
 static inline u8 __musb_readb(const void __iomem *addr, unsigned offset)
 {
-	return __raw_readb(addr + offset);
+	return readb(addr + offset);
 }
 
 static inline void __musb_writeb(void __iomem *addr, unsigned offset, u8 data)
 {
-	__raw_writeb(data, addr + offset);
+	writeb(data, addr + offset);
 }
 
 static int musb_ulpi_read(struct usb_phy *phy, u32 offset)
diff --git a/drivers/usb/musb/musb_io.h b/drivers/usb/musb/musb_io.h
index 71c26eb..6aa3288 100644
--- a/drivers/usb/musb/musb_io.h
+++ b/drivers/usb/musb/musb_io.h
@@ -62,17 +62,17 @@ static inline void writesb(const void __iomem *addr, const void *buf, int len)
 /* NOTE:  these offsets are all in bytes */
 
 static inline u16 musb_readw(const void __iomem *addr, unsigned offset)
-	{ return __raw_readw(addr + offset); }
+	{ return readw(addr + offset); }
 
 static inline u32 musb_readl(const void __iomem *addr, unsigned offset)
-	{ return __raw_readl(addr + offset); }
+	{ return readl(addr + offset); }
 
 
 static inline void musb_writew(void __iomem *addr, unsigned offset, u16 data)
-	{ __raw_writew(data, addr + offset); }
+	{ writew(data, addr + offset); }
 
 static inline void musb_writel(void __iomem *addr, unsigned offset, u32 data)
-	{ __raw_writel(data, addr + offset); }
+	{ writel(data, addr + offset); }
 
 #else
 
diff --git a/drivers/usb/musb/musb_procfs.c b/drivers/usb/musb/musb_procfs.c
index 16f01e5..e3aa42f 100644
--- a/drivers/usb/musb/musb_procfs.c
+++ b/drivers/usb/musb/musb_procfs.c
@@ -514,7 +514,7 @@ static int dump_header_stats(struct musb *musb, char *buffer)
 			"\n",
 			musb_readl(musb->ctrl_base, DAVINCI_USB_CTRL_REG),
 			musb_readl(musb->ctrl_base, DAVINCI_USB_STAT_REG),
-			__raw_readl((void __force __iomem *)
+			readl((void __force __iomem *)
 					IO_ADDRESS(USBPHY_CTL_PADDR)),
 			musb_readl(musb->ctrl_base, DAVINCI_RNDIS_REG),
 			musb_readl(musb->ctrl_base, DAVINCI_AUTOREQ_REG),
diff --git a/drivers/usb/musb/ti81xx.c b/drivers/usb/musb/ti81xx.c
index 946c99e..b66cabc 100644
--- a/drivers/usb/musb/ti81xx.c
+++ b/drivers/usb/musb/ti81xx.c
@@ -74,14 +74,14 @@ static inline u32 usbss_read(u32 offset)
 {
 	if (!usbss_init_done)
 		return 0;
-	return __raw_readl(usbss_virt_base + offset);
+	return readl(usbss_virt_base + offset);
 }
 
 static inline void usbss_write(u32 offset, u32 data)
 {
 	if (!usbss_init_done)
 		return ;
-	__raw_writel(data, usbss_virt_base + offset);
+	writel(data, usbss_virt_base + offset);
 }
 
 static void usbotg_ss_init(void)
@@ -161,7 +161,7 @@ u16 ti81xx_musb_readw(const void __iomem *addr, unsigned offset)
 	u32 tmp;
 	u16 val;
 
-	tmp = __raw_readl(addr + (offset & ~3));
+	tmp = readl(addr + (offset & ~3));
 
 	switch (offset & 0x3) {
 	case 0:
@@ -189,7 +189,7 @@ u8 ti81xx_musb_readb(const void __iomem *addr, unsigned offset)
 	u32 tmp;
 	u8 val;
 
-	tmp = __raw_readl(addr + (offset & ~3));
+	tmp = readl(addr + (offset & ~3));
 
 	switch (offset & 0x3) {
 	case 0:
@@ -1289,8 +1289,8 @@ static int __init ti81xx_probe(struct platform_device *pdev)
 	usbotg_ss_init();
 
 	/* clear any USBSS interrupts */
-	__raw_writel(0, glue->mem_va + USBSS_IRQ_EOI);
-	__raw_writel(__raw_readl(glue->mem_va + USBSS_IRQ_STATUS),
+	writel(0, glue->mem_va + USBSS_IRQ_EOI);
+	writel(readl(glue->mem_va + USBSS_IRQ_STATUS),
 					glue->mem_va + USBSS_IRQ_STATUS);
 
 	/* create the child platform device for mulitple instances of musb */
-- 
1.7.5.4

