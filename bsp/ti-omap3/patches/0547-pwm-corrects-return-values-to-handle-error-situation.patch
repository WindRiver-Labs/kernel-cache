From 39be89a0e7a309523bf405d9cb1aef38db8787fe Mon Sep 17 00:00:00 2001
From: "Philip, Avinash" <avinashphilip@ti.com>
Date: Mon, 6 Feb 2012 15:14:17 +0530
Subject: [PATCH 547/609] pwm: corrects return values to handle error
 situation

Original commit: 21ef5e1fa530eb8f23bfe18650e3915d7c291ca9

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

This patch fixes
1. Proper return values for pwm framework API's.
2. Return values for SYSFS interface.

Signed-off-by: Philip, Avinash <avinashphilip@ti.com>
---
 drivers/pwm/pwm.c |   60 ++++++++++++++++++++++++++++++++++++++++++----------
 1 files changed, 48 insertions(+), 12 deletions(-)

diff --git a/drivers/pwm/pwm.c b/drivers/pwm/pwm.c
index 3db04cb..9491537 100644
--- a/drivers/pwm/pwm.c
+++ b/drivers/pwm/pwm.c
@@ -474,10 +474,17 @@ static ssize_t pwm_run_store(struct device *dev,
 			     const char *buf, size_t len)
 {
 	struct pwm_device *p = dev_get_drvdata(dev);
+	int ret;
+
 	if (sysfs_streq(buf, "1"))
-		pwm_start(p);
+		ret = pwm_start(p);
 	else if (sysfs_streq(buf, "0"))
-		pwm_stop(p);
+		ret = pwm_stop(p);
+	else
+		ret = -EINVAL;
+
+	if (ret < 0)
+		return ret;
 	return len;
 }
 static DEVICE_ATTR(run, S_IRUGO | S_IWUSR, pwm_run_show, pwm_run_store);
@@ -505,9 +512,15 @@ static ssize_t pwm_duty_ns_store(struct device *dev,
 {
 	unsigned long duty_ns;
 	struct pwm_device *p = dev_get_drvdata(dev);
+	int ret;
+
+	if (!kstrtoul(buf, 10, &duty_ns)) {
+		ret = pwm_set_duty_ns(p, duty_ns);
+
+		if (ret < 0)
+			return ret;
+	}
 
-	if (!kstrtoul(buf, 10, &duty_ns))
-		pwm_set_duty_ns(p, duty_ns);
 	return len;
 }
 static DEVICE_ATTR(duty_ns, S_IRUGO | S_IWUSR, pwm_duty_ns_show,
@@ -528,9 +541,15 @@ static ssize_t pwm_duty_percent_store(struct device *dev,
 {
 	unsigned long duty_ns;
 	struct pwm_device *p = dev_get_drvdata(dev);
+	int ret;
+
+	if (!kstrtoul(buf, 10, &duty_ns)) {
+		ret = pwm_set_duty_percent(p, duty_ns);
+
+		if (ret < 0)
+			return ret;
+	}
 
-	if (!kstrtoul(buf, 10, &duty_ns))
-		pwm_set_duty_percent(p, duty_ns);
 	return len;
 }
 
@@ -551,9 +570,15 @@ static ssize_t pwm_period_ns_store(struct device *dev,
 {
 	unsigned long period_ns;
 	struct pwm_device *p = dev_get_drvdata(dev);
+	int ret;
+
+	if (!kstrtoul(buf, 10, &period_ns)) {
+		ret = pwm_set_period_ns(p, period_ns);
+
+		if (ret < 0)
+			return ret;
+	}
 
-	if (!kstrtoul(buf, 10, &period_ns))
-		pwm_set_period_ns(p, period_ns);
 	return len;
 }
 static DEVICE_ATTR(period_ns, S_IRUGO | S_IWUSR, pwm_period_ns_show,
@@ -573,10 +598,15 @@ static ssize_t pwm_period_freq_store(struct device *dev,
 				   size_t len)
 {
 	unsigned long freq_hz;
+	int ret;
 
 	struct pwm_device *p = dev_get_drvdata(dev);
-	if (!kstrtoul(buf, 10, &freq_hz))
-		pwm_set_frequency(p, freq_hz);
+	if (!kstrtoul(buf, 10, &freq_hz)) {
+		ret = pwm_set_frequency(p, freq_hz);
+
+		if (ret < 0)
+			return ret;
+	}
 	return len;
 }
 
@@ -597,9 +627,15 @@ static ssize_t pwm_polarity_store(struct device *dev,
 {
 	unsigned long polarity;
 	struct pwm_device *p = dev_get_drvdata(dev);
+	int ret;
+
+	if (!kstrtoul(buf, 10, &polarity)) {
+		ret = pwm_set_polarity(p, polarity);
+
+		if (ret < 0)
+			return ret;
+	}
 
-	if (!kstrtoul(buf, 10, &polarity))
-		pwm_set_polarity(p, polarity);
 	return len;
 }
 static DEVICE_ATTR(polarity, S_IRUGO | S_IWUSR, pwm_polarity_show,
-- 
1.7.5.4

