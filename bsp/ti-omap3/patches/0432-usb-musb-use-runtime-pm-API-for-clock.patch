From b5eacf136f3c784e9538785137118dd8b57049e6 Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Mon, 27 Feb 2012 15:25:41 +0530
Subject: [PATCH 432/609] usb: musb: use runtime pm API for clock

Original commit: 76c5325b7710a3a81e0684bb322cf8023c1191b3

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Also has cleanup for pm support

Signed-off-by: Ajay Kumar Gupta <ajay.gupta@ti.com>
---
 drivers/usb/musb/musb_core.c |    4 --
 drivers/usb/musb/musb_host.c |   20 --------
 drivers/usb/musb/ti81xx.c    |  110 +++++++-----------------------------------
 3 files changed, 18 insertions(+), 116 deletions(-)

diff --git a/drivers/usb/musb/musb_core.c b/drivers/usb/musb/musb_core.c
index 3787d74..8827d05 100644
--- a/drivers/usb/musb/musb_core.c
+++ b/drivers/usb/musb/musb_core.c
@@ -2457,7 +2457,6 @@ static int musb_suspend(struct device *dev)
 {
 	struct musb	*musb = dev_to_musb(dev);
 	unsigned long	flags;
-	u8 devctl = musb_readb(musb->mregs, MUSB_DEVCTL);
 	int ret = 0;
 
 	spin_lock_irqsave(&musb->lock, flags);
@@ -2467,9 +2466,6 @@ static int musb_suspend(struct device *dev)
 		 * Don't allow system suspend while peripheral mode
 		 * is actve and cable is connected to host.
 		 */
-		if ((devctl & MUSB_DEVCTL_VBUS) == MUSB_DEVCTL_VBUS
-				&& (devctl & MUSB_DEVCTL_BDEVICE))
-			ret = -EBUSY;
 	} else if (is_host_active(musb)) {
 		/* we know all the children are suspended; sometimes
 		 * they will even be wakeup-enabled.
diff --git a/drivers/usb/musb/musb_host.c b/drivers/usb/musb/musb_host.c
index f14fd8e..2ba1ea2 100644
--- a/drivers/usb/musb/musb_host.c
+++ b/drivers/usb/musb/musb_host.c
@@ -2368,14 +2368,6 @@ static int musb_bus_suspend(struct usb_hcd *hcd)
 	struct musb	*musb = hcd_to_musb(hcd);
 	u8		devctl;
 
-	if (!is_otg_enabled(musb) && is_host_enabled(musb)) {
-		devctl = musb_readb(musb->mregs, MUSB_DEVCTL);
-		devctl &= MUSB_DEVCTL_SESSION;
-		musb_writeb(musb->mregs, MUSB_DEVCTL, devctl);
-		musb->is_active = 0;
-		return 0;
-	}
-
 	if (!is_host_active(musb))
 		return 0;
 
@@ -2405,18 +2397,6 @@ static int musb_bus_suspend(struct usb_hcd *hcd)
 
 static int musb_bus_resume(struct usb_hcd *hcd)
 {
-	struct musb	*musb = hcd_to_musb(hcd);
-	u8		devctl;
-
-	if (!is_otg_enabled(musb) && is_host_enabled(musb)) {
-		devctl = musb_readb(musb->mregs, MUSB_DEVCTL);
-		devctl |= MUSB_DEVCTL_SESSION;
-		musb_writeb(musb->mregs, MUSB_DEVCTL, devctl);
-		musb->is_active = 1;
-		return 0;
-	}
-
-	/* resuming child port does the work */
 	return 0;
 }
 
diff --git a/drivers/usb/musb/ti81xx.c b/drivers/usb/musb/ti81xx.c
index 6f3adcd..946c99e 100644
--- a/drivers/usb/musb/ti81xx.c
+++ b/drivers/usb/musb/ti81xx.c
@@ -27,7 +27,6 @@
  */
 
 #include <linux/init.h>
-#include <linux/clk.h>
 #include <linux/io.h>
 #include <linux/usb/otg.h>
 #include <linux/platform_device.h>
@@ -42,8 +41,6 @@
 
 struct ti81xx_glue {
 	struct device *dev;
-	struct clk *ick;		/* common usbss interface clk */
-	struct clk *fck;		/* common usbss functional clk */
 	struct resource *mem_pa;	/* usbss memory resource */
 	void *mem_va;			/* ioremapped virtual address */
 	struct platform_device *musb[2];/* child musb pdevs */
@@ -1007,7 +1004,7 @@ int ti81xx_musb_init(struct musb *musb)
 	struct device *dev = musb->controller;
 	struct musb_hdrc_platform_data *plat = dev->platform_data;
 	struct omap_musb_board_data *data = plat->board_data;
-	u32 rev, status = 0;
+	u32 rev;
 	u8 mode;
 
 	if (musb->id < 2)
@@ -1019,16 +1016,9 @@ int ti81xx_musb_init(struct musb *musb)
 	if (!musb->xceiv)
 		return -ENODEV;
 
-	status = pm_runtime_get_sync(dev);
-	if (status < 0) {
-		dev_err(dev, "pm_runtime_get_sync FAILED");
-		goto err1;
-	}
-
 	/* mentor is at offset of 0x400 in am3517/ti81xx */
 	musb->mregs += USB_MENTOR_CORE_OFFSET;
 
-
 	/* Returns zero if e.g. not clocked */
 	rev = musb_readl(reg_base, USB_REVISION_REG);
 	if (!rev)
@@ -1078,9 +1068,6 @@ int ti81xx_musb_init(struct musb *musb)
 	musb_writel(reg_base, USB_IRQ_EOI, 0);
 
 	return 0;
-err1:
-	pm_runtime_disable(dev);
-	return status;
 }
 
 /* TI81xx supports only 32bit read operation */
@@ -1260,28 +1247,12 @@ static int __init ti81xx_probe(struct platform_device *pdev)
 		goto err0;
 	}
 
-	/* interface clock needs to be enabled for usbss register programming */
-	glue->ick = clk_get(&pdev->dev, "usbotg_ick");
-	if (IS_ERR(glue->ick)) {
-		dev_err(&pdev->dev, "unable to get usbss interface clock\n");
-		ret = PTR_ERR(glue->ick);
-		goto err1;
-	}
-
-	/* functional clock needs to be enabled for usbss register programming */
-	glue->fck = clk_get(&pdev->dev, "usbotg_fck");
-	if (IS_ERR(glue->fck)) {
-		dev_err(&pdev->dev, "unable to get usbss functional clock\n");
-		ret = PTR_ERR(glue->fck);
-		goto err2;
-	}
-
 	/* get memory resource */
 	glue->mem_pa = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!glue->mem_pa) {
 		dev_err(&pdev->dev, "failed to get usbss mem resourse\n");
 		ret = -ENODEV;
-		goto err3;
+		goto err1;
 	}
 
 	/* get memory resource */
@@ -1289,37 +1260,31 @@ static int __init ti81xx_probe(struct platform_device *pdev)
 	if (!res) {
 		dev_err(&pdev->dev, "failed to get usbss irq resourse\n");
 		ret = -ENODEV;
-		goto err3;
+		goto err1;
 	}
 	glue->irq = res->start;
 
-	/* enable interface clock */
-	ret = clk_enable(glue->ick);
-	if (ret) {
-		dev_err(&pdev->dev, "failed to enable usbss interface clock\n");
-		goto err3;
-	}
-
-	/* enable functional clock */
-	ret = clk_enable(glue->fck);
-	if (ret) {
-		dev_err(&pdev->dev, "failed to enable usbss functional clock\n");
-		goto err4;
-	}
-
 	/* iomap for usbss mem space */
 	glue->mem_va =
 		ioremap(glue->mem_pa->start, resource_size(glue->mem_pa));
 	if (!glue->mem_va) {
 		dev_err(&pdev->dev, "usbss ioremap failed\n");
 		ret = -ENOMEM;
-		goto err5;
+		goto err1;
 	}
 	usbss_virt_base = glue->mem_va;
 
 	glue->dev = &pdev->dev;
 	platform_set_drvdata(pdev, glue);
 
+	/* enable clocks */
+	pm_runtime_enable(&pdev->dev);
+	ret = pm_runtime_get_sync(&pdev->dev);
+	if (ret < 0) {
+		dev_err(dev, "pm_runtime_get_sync FAILED");
+		goto err2;
+	}
+
 	/* usb subsystem init */
 	usbotg_ss_init();
 
@@ -1336,21 +1301,16 @@ static int __init ti81xx_probe(struct platform_device *pdev)
 #endif
 		ret = ti81xx_create_musb_pdev(glue, i);
 		if (ret != 0)
-			goto err6;
+			goto err3;
 	}
 
 	return 0;
 
-err6:
-	iounmap(glue->mem_va);
-err5:
-	clk_disable(glue->fck);
-err4:
-	clk_disable(glue->ick);
 err3:
-	clk_put(glue->fck);
+	pm_runtime_put_sync(&pdev->dev);
 err2:
-	clk_put(glue->ick);
+	pm_runtime_disable(&pdev->dev);
+	iounmap(glue->mem_va);
 err1:
 	kfree(glue);
 err0:
@@ -1376,12 +1336,8 @@ static int __exit ti81xx_remove(struct platform_device *pdev)
 	iounmap(glue->mem_va);
 	usbotg_ss_uninit();
 
-	/* disable common usbss functional clock */
-	clk_disable(glue->fck);
-	clk_put(glue->fck);
-	/* disable common usbss interface clock */
-	clk_disable(glue->ick);
-	clk_put(glue->ick);
+	pm_runtime_put_sync(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
 	kfree(glue);
 
 	return 0;
@@ -1401,10 +1357,6 @@ static int ti81xx_suspend(struct device *dev)
 			data->set_phy_power(i, 0);
 	}
 
-	/* disable the common usbss functional clock */
-	clk_disable(glue->fck);
-	/* disable the common usbss interface clock */
-	clk_disable(glue->ick);
 	return 0;
 }
 
@@ -1421,18 +1373,6 @@ static int ti81xx_resume(struct device *dev)
 			data->set_phy_power(i, 1);
 	}
 
-	/* enable the common usbss interface clock */
-	ret = clk_enable(glue->ick);
-	if (ret) {
-		dev_err(dev, "failed to enable iclock\n");
-		return ret;
-	}
-	/* enable the common usbss functional clock */
-	ret = clk_enable(glue->fck);
-	if (ret) {
-		dev_err(dev, "failed to enable fclock\n");
-		return ret;
-	}
 	return 0;
 }
 
@@ -1480,17 +1420,3 @@ static void __exit ti81xx_glue_exit(void)
 	platform_driver_unregister(&ti81xx_musb_driver);
 }
 module_exit(ti81xx_glue_exit);
-
-#ifdef CONFIG_PM
-void musb_platform_save_context(struct musb *musb,
-		 struct musb_context_registers *musb_context)
-{
-	/* Save CPPI41 DMA related registers */
-}
-
-void musb_platform_restore_context(struct musb *musb,
-		 struct musb_context_registers *musb_context)
-{
-	/* Restore CPPI41 DMA related registers */
-}
-#endif
-- 
1.7.5.4

