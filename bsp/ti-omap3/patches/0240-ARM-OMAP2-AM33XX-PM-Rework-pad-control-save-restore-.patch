From 49fffac3bfe9700324dd9a0ea66d6e89387a7574 Mon Sep 17 00:00:00 2001
From: Vaibhav Bedia <vaibhav.bedia@ti.com>
Date: Mon, 28 May 2012 14:32:59 +0530
Subject: [PATCH 240/609] ARM: OMAP2+: AM33XX: PM: Rework pad control
 save-restore handling in suspend code

Original commit: 076928f7250ccfc3f2503151ca5467302b17856b

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

As per Advisory 1.0.16 (GMII_SEL and CPSW related Pad Control Registers:
The context of these registers is lost during transitions of PD_PER),
some of the pad control registers need to be saved and restored across
PD_PER transitions. More details on the advisory can be obtained from
the AM335x Errata Document available @ www.ti.com/am335x

The current code snippet save and restores only a subset of the affected
registers and the offsets are also harcoded. This has now been reworked
to handle all the affected registers in a generic manner which uses
appropriate macros.

Signed-off-by: Vaibhav Bedia <vaibhav.bedia@ti.com>
---
 arch/arm/mach-omap2/pm33xx.c |   51 +++++++----------------------------
 arch/arm/mach-omap2/pm33xx.h |   61 +++++++++++++++++++++++++++++-------------
 2 files changed, 52 insertions(+), 60 deletions(-)

diff --git a/arch/arm/mach-omap2/pm33xx.c b/arch/arm/mach-omap2/pm33xx.c
index c4c5187..cba5d8d 100644
--- a/arch/arm/mach-omap2/pm33xx.c
+++ b/arch/arm/mach-omap2/pm33xx.c
@@ -63,9 +63,6 @@ static struct omap_mbox *m3_mbox;
 static struct powerdomain *cefuse_pwrdm, *gfx_pwrdm;
 static struct clockdomain *gfx_l3_clkdm, *gfx_l4ls_clkdm;
 
-static struct am33xx_padconf lp_padconf;
-static int gmii_sel;
-
 static int core_suspend_stat = -1;
 static int m3_state = M3_STATE_UNKNOWN;
 
@@ -77,48 +74,20 @@ static DECLARE_COMPLETION(a8_m3_sync);
 
 static void save_padconf(void)
 {
-	lp_padconf.mii1_col	= readl(AM33XX_CTRL_REGADDR(0x0908));
-	lp_padconf.mii1_crs	= readl(AM33XX_CTRL_REGADDR(0x090c));
-	lp_padconf.mii1_rxerr	= readl(AM33XX_CTRL_REGADDR(0x0910));
-	lp_padconf.mii1_txen	= readl(AM33XX_CTRL_REGADDR(0x0914));
-	lp_padconf.mii1_rxdv	= readl(AM33XX_CTRL_REGADDR(0x0918));
-	lp_padconf.mii1_txd3	= readl(AM33XX_CTRL_REGADDR(0x091c));
-	lp_padconf.mii1_txd2	= readl(AM33XX_CTRL_REGADDR(0x0920));
-	lp_padconf.mii1_txd1	= readl(AM33XX_CTRL_REGADDR(0x0924));
-	lp_padconf.mii1_txd0	= readl(AM33XX_CTRL_REGADDR(0x0928));
-	lp_padconf.mii1_txclk	= readl(AM33XX_CTRL_REGADDR(0x092c));
-	lp_padconf.mii1_rxclk	= readl(AM33XX_CTRL_REGADDR(0x0930));
-	lp_padconf.mii1_rxd3	= readl(AM33XX_CTRL_REGADDR(0x0934));
-	lp_padconf.mii1_rxd2	= readl(AM33XX_CTRL_REGADDR(0x0938));
-	lp_padconf.mii1_rxd1	= readl(AM33XX_CTRL_REGADDR(0x093c));
-	lp_padconf.mii1_rxd0	= readl(AM33XX_CTRL_REGADDR(0x0940));
-	lp_padconf.rmii1_refclk	= readl(AM33XX_CTRL_REGADDR(0x0944));
-	lp_padconf.mdio_data	= readl(AM33XX_CTRL_REGADDR(0x0948));
-	lp_padconf.mdio_clk	= readl(AM33XX_CTRL_REGADDR(0x094c));
-	gmii_sel		= readl(AM33XX_CTRL_REGADDR(0x0650));
+	struct am33xx_padconf_regs *temp = am33xx_lp_padconf;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(am33xx_lp_padconf); i++, temp++)
+		temp->val = readl(AM33XX_CTRL_REGADDR(temp->offset));
 }
 
 static void restore_padconf(void)
 {
-	writel(lp_padconf.mii1_col, AM33XX_CTRL_REGADDR(0x0908));
-	writel(lp_padconf.mii1_crs, AM33XX_CTRL_REGADDR(0x090c));
-	writel(lp_padconf.mii1_rxerr, AM33XX_CTRL_REGADDR(0x0910));
-	writel(lp_padconf.mii1_txen, AM33XX_CTRL_REGADDR(0x0914));
-	writel(lp_padconf.mii1_rxdv, AM33XX_CTRL_REGADDR(0x0918));
-	writel(lp_padconf.mii1_txd3, AM33XX_CTRL_REGADDR(0x091c));
-	writel(lp_padconf.mii1_txd2, AM33XX_CTRL_REGADDR(0x0920));
-	writel(lp_padconf.mii1_txd1, AM33XX_CTRL_REGADDR(0x0924));
-	writel(lp_padconf.mii1_txd0, AM33XX_CTRL_REGADDR(0x0928));
-	writel(lp_padconf.mii1_txclk, AM33XX_CTRL_REGADDR(0x092c));
-	writel(lp_padconf.mii1_rxclk, AM33XX_CTRL_REGADDR(0x0930));
-	writel(lp_padconf.mii1_rxd3, AM33XX_CTRL_REGADDR(0x0934));
-	writel(lp_padconf.mii1_rxd2, AM33XX_CTRL_REGADDR(0x0938));
-	writel(lp_padconf.mii1_rxd1, AM33XX_CTRL_REGADDR(0x093c));
-	writel(lp_padconf.mii1_rxd0, AM33XX_CTRL_REGADDR(0x0940));
-	writel(lp_padconf.rmii1_refclk, AM33XX_CTRL_REGADDR(0x0944));
-	writel(lp_padconf.mdio_data, AM33XX_CTRL_REGADDR(0x0948));
-	writel(lp_padconf.mdio_clk, AM33XX_CTRL_REGADDR(0x094c));
-	writel(gmii_sel, AM33XX_CTRL_REGADDR(0x0650));
+	struct am33xx_padconf_regs *temp = am33xx_lp_padconf;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(am33xx_lp_padconf); i++, temp++)
+		writel(temp->val, AM33XX_CTRL_REGADDR(temp->offset));
 }
 
 static int am33xx_pm_prepare_late(void)
diff --git a/arch/arm/mach-omap2/pm33xx.h b/arch/arm/mach-omap2/pm33xx.h
index a40f4d4..0aa90ec 100644
--- a/arch/arm/mach-omap2/pm33xx.h
+++ b/arch/arm/mach-omap2/pm33xx.h
@@ -12,6 +12,8 @@
 #define __ARCH_ARM_MACH_OMAP2_PM33XX_H
 
 #include <mach/hardware.h>	/* XXX Is this the right one to include? */
+#include "control.h"
+#include "mux33xx.h"
 
 #ifndef __ASSEMBLER__
 extern void __iomem *am33xx_get_ram_base(void);
@@ -23,25 +25,46 @@ struct a8_wkup_m3_ipc_data {
 	int ipc_data2;
 } am33xx_lp_ipc;
 
-struct am33xx_padconf {
-	int	mii1_col;
-	int	mii1_crs;
-	int	mii1_rxerr;
-	int	mii1_txen;
-	int	mii1_rxdv;
-	int	mii1_txd3;
-	int	mii1_txd2;
-	int	mii1_txd1;
-	int	mii1_txd0;
-	int	mii1_txclk;
-	int	mii1_rxclk;
-	int	mii1_rxd3;
-	int	mii1_rxd2;
-	int	mii1_rxd1;
-	int	mii1_rxd0;
-	int	rmii1_refclk;
-	int	mdio_data;
-	int	mdio_clk;
+struct am33xx_padconf_regs {
+	u16 offset;
+	u32 val;
+};
+
+static struct am33xx_padconf_regs am33xx_lp_padconf[] = {
+	{.offset = AM33XX_CONTROL_GMII_SEL_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A0_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A1_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A2_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A3_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A4_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A5_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A6_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A7_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A8_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A9_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A10_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_A11_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_WAIT0_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_WPN_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_GPMC_BEN1_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_COL_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_CRS_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_RXERR_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_TXEN_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_RXDV_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_TXD3_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_TXD2_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_TXD1_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_TXD0_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_TXCLK_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_RXCLK_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_RXD3_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_RXD2_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_RXD1_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_RXD0_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MII1_REFCLK_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MDIO_DATA_OFFSET},
+	{.offset = AM33XX_CONTROL_PADCONF_MDIO_CLK_OFFSET},
 };
 #endif /* ASSEMBLER */
 
-- 
1.7.5.4

