From 0a9d5467eec23e146be66d54dcf853ef2b1cb6f4 Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Mon, 25 Oct 2010 14:21:49 +0530
Subject: [PATCH 377/609] cppi41: fix IO_ADDRESS related issue on AM35x

Original commit: cba2de2fb3d2e0252a611378cf9bfdc42646f1f9

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

IO_ADDRESS for AM35x MUSB doesn't work and thus CPPI41 programming
also fails.

Fixing this by ioremapping MUSB complete address space (~32K) and
updating CPPI41 related memory base with this mappings.

Signed-off-by: Ajay Kumar Gupta <ajay.gupta@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 drivers/usb/musb/am35x.c  |   30 ++++++++++++------------------
 drivers/usb/musb/cppi41.h |    4 ++--
 2 files changed, 14 insertions(+), 20 deletions(-)

diff --git a/drivers/usb/musb/am35x.c b/drivers/usb/musb/am35x.c
index 0b2b633..022e706 100644
--- a/drivers/usb/musb/am35x.c
+++ b/drivers/usb/musb/am35x.c
@@ -204,14 +204,6 @@ static const struct cppi41_tx_ch tx_ch_info[] = {
 
 struct cppi41_dma_block cppi41_dma_block[CPPI41_NUM_DMA_BLOCK] = {
 	[0] = {
-		.global_ctrl_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x1000,
-		.ch_ctrl_stat_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x1800,
-		.sched_ctrl_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x2000,
-		.sched_table_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x2800,
 		.num_tx_ch	= 15,
 		.num_rx_ch	= 15,
 		.tx_ch_info	= tx_ch_info
@@ -225,15 +217,6 @@ static const u32 assigned_queues[] = { 0xffffffff, 0xffffffff, 0x7 };
 /* Queue manager information */
 struct cppi41_queue_mgr cppi41_queue_mgr[CPPI41_NUM_QUEUE_MGR] = {
 	[0] = {
-		.q_mgr_rgn_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x4000,
-		.desc_mem_rgn_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x5000,
-		.q_mgmt_rgn_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x6000,
-		.q_stat_rgn_base =
-			IO_ADDRESS(OMAP34XX_HSUSB_OTG_BASE) + 0x6800,
-
 		.num_queue	= 96,
 		.queue_types	= CPPI41_FREE_DESC_BUF_QUEUE |
 					CPPI41_UNASSIGNED_QUEUE,
@@ -247,6 +230,17 @@ int __init cppi41_init(struct musb *musb)
 {
 	u16 numch, blknum = usb_cppi41_info.dma_block, order;
 
+	/* init mappings */
+	cppi41_queue_mgr[0].q_mgr_rgn_base = musb->ctrl_base + 0x4000;
+	cppi41_queue_mgr[0].desc_mem_rgn_base = musb->ctrl_base + 0x5000;
+	cppi41_queue_mgr[0].q_mgmt_rgn_base = musb->ctrl_base + 0x6000;
+	cppi41_queue_mgr[0].q_stat_rgn_base = musb->ctrl_base + 0x6800;
+
+	cppi41_dma_block[0].global_ctrl_base = musb->ctrl_base + 0x1000;
+	cppi41_dma_block[0].ch_ctrl_stat_base = musb->ctrl_base + 0x1800;
+	cppi41_dma_block[0].sched_ctrl_base = musb->ctrl_base + 0x2000;
+	cppi41_dma_block[0].sched_table_base = musb->ctrl_base + 0x2800;
+
 	/* Initialize for Linking RAM region 0 alone */
 	cppi41_queue_mgr_init(usb_cppi41_info.q_mgr, 0, 0x3fff);
 
@@ -592,7 +586,7 @@ static int am35x_musb_init(struct musb *musb)
 	msleep(5);
 
 #ifdef CONFIG_USB_TI_CPPI41_DMA
-	cppi41_init();
+	cppi41_init(musb);
 #endif
 
 	musb->isr = am35x_musb_interrupt;
diff --git a/drivers/usb/musb/cppi41.h b/drivers/usb/musb/cppi41.h
index 9dbc38a..8450baa 100644
--- a/drivers/usb/musb/cppi41.h
+++ b/drivers/usb/musb/cppi41.h
@@ -462,8 +462,8 @@ struct cppi41_dma_block {
 	const struct cppi41_tx_ch *tx_ch_info;
 };
 
-extern const struct cppi41_queue_mgr cppi41_queue_mgr[];
-extern const struct cppi41_dma_block cppi41_dma_block[];
+extern struct cppi41_queue_mgr cppi41_queue_mgr[];
+extern struct cppi41_dma_block cppi41_dma_block[];
 
 /**
  * struct cppi41_dma_ch_obj - CPPI 4.1 DMA Channel object
-- 
1.7.5.4

