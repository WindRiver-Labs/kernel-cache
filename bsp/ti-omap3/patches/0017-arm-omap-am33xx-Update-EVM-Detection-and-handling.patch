From 8823d8c1ec7cb3a355f9db8ef5dc94897b8e9a84 Mon Sep 17 00:00:00 2001
From: Vaibhav Hiremath <hvaibhav@ti.com>
Date: Sat, 26 Nov 2011 16:04:01 +0530
Subject: [PATCH 017/609] arm:omap:am33xx: Update EVM Detection and handling

Original commit: 9629a5914fad503a410726335f59ac0430236b2d

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

AM335X EVM comes in 4 flavours. The type of EVM is encoded in the EEPROM
on the Baseboard.

This patch provides api to read this data from eeprom & setup/configure
the evm/devices accordingly. Also, Profile data is retrieved by reading
the CPLD on the daughter board.

In case the eeprom read fails or if thh data is invalid, the fallback
option selects General Purpose EVM with Daughter board connected in
Profile 0.

Also, This patch adds support for BETA EVM.
BETA EVM is set as the default configuration.
Since the peripherals were supported only in profile 0 for
alpha EVM, It makes use of the exisiting GP EVM structure.

Flag gp_evm_revision can be used to differentiate between the
revisions of the GP EVM.

Also, there exist Alpha EVMs with a version string of 1.0B as
well as 1.0A.
Make our revision detection logic check for just 1.0 and rename
defines to match.

Signed-off-by: Patil, Rachna <rachna@ti.com>
Signed-off-by: Tom Rini <trini@ti.com>
Signed-off-by: Hebbar, Gururaja <gururaja.hebbar@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
Signed-off-by: Afzal Mohammed <afzal@ti.com>
---
 arch/arm/mach-omap2/board-am335xevm.c              |  372 +++++++++++++++++++-
 arch/arm/mach-omap2/include/mach/board-am335xevm.h |   40 ++
 2 files changed, 411 insertions(+), 1 deletions(-)
 create mode 100644 arch/arm/mach-omap2/include/mach/board-am335xevm.h

diff --git a/arch/arm/mach-omap2/board-am335xevm.c b/arch/arm/mach-omap2/board-am335xevm.c
index 7f2277c..9ceddfb 100644
--- a/arch/arm/mach-omap2/board-am335xevm.c
+++ b/arch/arm/mach-omap2/board-am335xevm.c
@@ -15,8 +15,12 @@
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/i2c/at24.h>
 
 #include <mach/hardware.h>
+#include <mach/board-am335xevm.h>
+
 #include <asm/mach-types.h>
 #include <asm/mach/arch.h>
 #include <asm/mach/map.h>
@@ -47,6 +51,95 @@ struct pinmux_config {
 	int val; /* Options for the mux register value */
 };
 
+struct evm_dev_cfg {
+	void (*device_init)(int evm_id, int profile);
+
+/*
+* If the device is required on both baseboard & daughter board (ex i2c),
+* specify DEV_ON_BASEBOARD
+*/
+#define DEV_ON_BASEBOARD	0
+#define DEV_ON_DGHTR_BRD	1
+	u32 device_on;
+
+	u32 profile;	/* Profiles (0-7) in which the module is present */
+};
+
+/* AM335X - CPLD Register Offsets */
+#define	CPLD_DEVICE_HDR	0x00 /* CPLD Header */
+#define	CPLD_DEVICE_ID	0x04 /* CPLD identification */
+#define	CPLD_DEVICE_REV	0x0C /* Revision of the CPLD code */
+#define	CPLD_CFG_REG	0x10 /* Configuration Register */
+
+static struct i2c_client *cpld_client;
+static u32 am335x_evm_id;
+static struct omap_board_config_kernel am335x_evm_config[] __initdata = {
+};
+
+/*
+* EVM Config held in On-Board eeprom device.
+*
+* Header Format
+*
+*  Name			Size	Contents
+*			(Bytes)
+*-------------------------------------------------------------
+*  Header		4	0xAA, 0x55, 0x33, 0xEE
+*
+*  Board Name		8	Name for board in ASCII.
+*				example "A33515BB" = "AM335X
+				Low Cost EVM board"
+*
+*  Version		4	Hardware version code for board in
+*				in ASCII. "1.0A" = rev.01.0A
+*
+*  Serial Number	12	Serial number of the board. This is a 12
+*				character string which is WWYY4P16nnnn, where
+*				WW = 2 digit week of the year of production
+*				YY = 2 digit year of production
+*				nnnn = incrementing board number
+*
+*  Configuration option	32	Codes(TBD) to show the configuration
+*				setup on this board.
+*
+*  Available		32720	Available space for other non-volatile
+*				data.
+*/
+struct am335x_evm_eeprom_config {
+	u32	header;
+	u8	name[8];
+	u32	version;
+	u8	serial[12];
+	u8	opt[32];
+};
+
+static struct am335x_evm_eeprom_config config;
+static bool daughter_brd_detected;
+
+#define GP_EVM_REV_IS_1_0		0x1
+#define GP_EVM_REV_IS_1_1A		0x2
+#define GP_EVM_REV_IS_UNKNOWN		0xFF
+static unsigned int gp_evm_revision = GP_EVM_REV_IS_UNKNOWN;
+
+#define AM335X_EEPROM_HEADER		0xEE3355AA
+
+/* current profile if exists else PROFILE_0 on error */
+static u32 am335x_get_profile_selection(void)
+{
+	int val = 0;
+
+	if (!cpld_client)
+		/* error checking is not done in func's calling this routine.
+		so return profile 0 on error */
+		return 0;
+
+	val = i2c_smbus_read_word_data(cpld_client, CPLD_CFG_REG);
+	if (val < 0)
+		return 0;	/* default to Profile 0 on Error */
+	else
+		return val & 0x7;
+}
+
 /*
 * @pin_mux - single module pin-mux structure which defines pin-mux
 *			details for all its pins.
@@ -60,13 +153,290 @@ static void setup_pin_mux(struct pinmux_config *pin_mux)
 
 }
 
-static struct omap_board_config_kernel am335x_evm_config[] __initdata = {
+/*
+* @evm_id - evm id which needs to be configured
+* @dev_cfg - single evm structure which includes
+*				all module inits, pin-mux defines
+* @profile - if present, else PROFILE_NONE
+* @dghtr_brd_flg - Whether Daughter board is present or not
+*/
+static void _configure_device(int evm_id, struct evm_dev_cfg *dev_cfg,
+	int profile)
+{
+	int i;
+
+	/*
+	* Only General Purpose & Industrial Auto Motro Control
+	* EVM has profiles. So check if this evm has profile.
+	* If not, ignore the profile comparison
+	*/
+
+	/*
+	* If the device is on baseboard, directly configure it. Else (device on
+	* Daughter board), check if the daughter card is detected.
+	*/
+	if (profile == PROFILE_NONE) {
+		for (i = 0; dev_cfg->device_init != NULL; dev_cfg++) {
+			if (dev_cfg->device_on == DEV_ON_BASEBOARD)
+				dev_cfg->device_init(evm_id, profile);
+			else if (daughter_brd_detected == true)
+				dev_cfg->device_init(evm_id, profile);
+		}
+	} else {
+		for (i = 0; dev_cfg->device_init != NULL; dev_cfg++) {
+			if (dev_cfg->profile & profile) {
+				if (dev_cfg->device_on == DEV_ON_BASEBOARD)
+					dev_cfg->device_init(evm_id, profile);
+				else if (daughter_brd_detected == true)
+					dev_cfg->device_init(evm_id, profile);
+			}
+		}
+	}
+}
+
+/* Low-Cost EVM */
+static struct evm_dev_cfg low_cost_evm_dev_cfg[] = {
+	{NULL, 0, 0},
+};
+
+/* General Purpose EVM */
+static struct evm_dev_cfg gen_purp_evm_dev_cfg[] = {
+	{NULL, 0, 0},
+};
+
+/* Industrial Auto Motor Control EVM */
+static struct evm_dev_cfg ind_auto_mtrl_evm_dev_cfg[] = {
+	{NULL, 0, 0},
+};
+
+/* IP-Phone EVM */
+static struct evm_dev_cfg ip_phn_evm_dev_cfg[] = {
+	{NULL, 0, 0},
+};
+
+static void setup_low_cost_evm(void)
+{
+	pr_info("The board is a AM335x Low Cost EVM.\n");
+
+	_configure_device(LOW_COST_EVM, low_cost_evm_dev_cfg, PROFILE_NONE);
+}
+
+static void setup_general_purpose_evm(void)
+{
+	u32 prof_sel = am335x_get_profile_selection();
+	pr_info("The board is general purpose EVM in profile %d\n", prof_sel);
+
+	if (!strncmp("1.1A", config.version, 4)) {
+		gp_evm_revision = GP_EVM_REV_IS_1_1A;
+	} else if (!strncmp("1.0", config.version, 3)) {
+		gp_evm_revision = GP_EVM_REV_IS_1_0;
+	} else {
+		pr_err("Found invalid GP EVM revision, falling back to Rev1.1A");
+		gp_evm_revision = GP_EVM_REV_IS_1_1A;
+	}
+
+	if (gp_evm_revision == GP_EVM_REV_IS_1_0)
+		gigabit_enable = 0;
+	else if (gp_evm_revision == GP_EVM_REV_IS_1_1A)
+		gigabit_enable = 1;
+
+	_configure_device(GEN_PURP_EVM, gen_purp_evm_dev_cfg, (1L << prof_sel));
+}
+
+static void setup_ind_auto_motor_ctrl_evm(void)
+{
+	u32 prof_sel = am335x_get_profile_selection();
+
+	pr_info("The board is an industrial automation EVM in profile %d\n",
+		prof_sel);
+
+	/* Only Profile 0 is supported */
+	if ((1L << prof_sel) != PROFILE_0) {
+		pr_err("AM335X: Only Profile 0 is supported\n");
+		pr_err("Assuming profile 0 & continuing\n");
+		prof_sel = PROFILE_0;
+	}
+
+	_configure_device(IND_AUT_MTR_EVM, ind_auto_mtrl_evm_dev_cfg,
+		PROFILE_0);
+
+}
+
+static void setup_ip_phone_evm(void)
+{
+	pr_info("The board is an IP phone EVM\n");
+
+	_configure_device(IP_PHN_EVM, ip_phn_evm_dev_cfg, PROFILE_NONE);
+}
+
+static void am335x_setup_daughter_board(struct memory_accessor *m, void *c)
+{
+	u8 tmp;
+	int ret;
+
+	/*
+	 * try reading a byte from the EEPROM to see if it is
+	 * present. We could read a lot more, but that would
+	 * just slow the boot process and we have all the information
+	 * we need from the EEPROM on the base board anyway.
+	 */
+	ret = m->read(m, &tmp, 0, sizeof(u8));
+	if (ret == sizeof(u8)) {
+		pr_info("Detected a daughter card on AM335x EVM..");
+		daughter_brd_detected = true;
+	} else {
+		pr_info("No daughter card found\n");
+		daughter_brd_detected = false;
+	}
+}
+
+static void am335x_evm_setup(struct memory_accessor *mem_acc, void *context)
+{
+	int ret;
+	char tmp[10];
+
+	/* get board specific data */
+	ret = mem_acc->read(mem_acc, (char *)&config, 0, sizeof(config));
+	if (ret != sizeof(config)) {
+		pr_warning("AM335X EVM config read fail, read %d bytes\n", ret);
+		return;
+	}
+
+	if (config.header != AM335X_EEPROM_HEADER) {
+		pr_warning("AM335X: wrong header 0x%x, expected 0x%x\n",
+			config.header, AM335X_EEPROM_HEADER);
+		goto out;
+	}
+
+	if (strncmp("A335", config.name, 4)) {
+		pr_err("Board %s doesn't look like an AM335x board\n",
+			config.name);
+		goto out;
+	}
+
+	snprintf(tmp, sizeof(config.name), "%s", config.name);
+	pr_info("Board name: %s\n", tmp);
+	/* only 6 characters of options string used for now */
+	snprintf(tmp, 7, "%s", config.opt);
+	pr_info("SKU: %s\n", tmp);
+
+	if (!strncmp("SKU#00", config.opt, 6))
+		setup_low_cost_evm();
+	else if (!strncmp("SKU#01", config.opt, 6))
+		setup_general_purpose_evm();
+	else if (!strncmp("SKU#02", config.opt, 6))
+		setup_ind_auto_motor_ctrl_evm();
+	else if (!strncmp("SKU#03", config.opt, 6))
+		setup_ip_phone_evm();
+	else
+		goto out;
+
+	return;
+out:
+	/*
+	 * for bring-up assume a full configuration, this should
+	 * eventually be changed to assume a minimal configuration
+	 */
+	pr_err("Could not detect any board, falling back to: "
+		"General purpose EVM in profile 0 with daughter card connected\n");
+	daughter_brd_detected = true;
+	setup_general_purpose_evm();
+
+}
+
+static struct at24_platform_data am335x_daughter_board_eeprom_info = {
+	.byte_len       = (256*1024) / 8,
+	.page_size      = 64,
+	.flags          = AT24_FLAG_ADDR16,
+	.setup          = am335x_setup_daughter_board,
+	.context        = (void *)NULL,
 };
 
+static struct at24_platform_data am335x_baseboard_eeprom_info = {
+	.byte_len       = (256*1024) / 8,
+	.page_size      = 64,
+	.flags          = AT24_FLAG_ADDR16,
+	.setup          = am335x_evm_setup,
+	.context        = (void *)NULL,
+};
+
+/*
+* Daughter board Detection.
+* Every board has a ID memory (EEPROM) on board. We probe these devices at
+* machine init, starting from daughter board and ending with baseboard.
+* Assumptions :
+*	1. probe for i2c devices are called in the order they are included in
+*	   the below struct. Daughter boards eeprom are probed 1st. Baseboard
+*	   eeprom probe is called last.
+*/
+static struct i2c_board_info __initdata am335x_i2c_boardinfo[] = {
+	{
+		/* Daughter Board EEPROM */
+		I2C_BOARD_INFO("24c256", DAUG_BOARD_I2C_ADDR),
+		.platform_data  = &am335x_daughter_board_eeprom_info,
+	},
+	{
+		/* Baseboard board EEPROM */
+		I2C_BOARD_INFO("24c256", BASEBOARD_I2C_ADDR),
+		.platform_data  = &am335x_baseboard_eeprom_info,
+	},
+	{
+		I2C_BOARD_INFO("cpld_reg", 0x35),
+	},
+	{
+		I2C_BOARD_INFO("tlc59108", 0x40),
+	},
+
+};
+
+static int cpld_reg_probe(struct i2c_client *client,
+	    const struct i2c_device_id *id)
+{
+	cpld_client = client;
+	return 0;
+}
+
+static int __devexit cpld_reg_remove(struct i2c_client *client)
+{
+	cpld_client = NULL;
+	return 0;
+}
+
+static const struct i2c_device_id cpld_reg_id[] = {
+	{ "cpld_reg", 0 },
+	{ }
+};
+
+static struct i2c_driver cpld_reg_driver = {
+	.driver = {
+		.name	= "cpld_reg",
+	},
+	.probe		= cpld_reg_probe,
+	.remove		= cpld_reg_remove,
+	.id_table	= cpld_reg_id,
+};
+
+static void evm_init_cpld(void)
+{
+	i2c_add_driver(&cpld_reg_driver);
+}
+
+static void __init am335x_evm_i2c_init(void)
+{
+	/* Initially assume Low Cost EVM Config */
+	am335x_evm_id = LOW_COST_EVM;
+
+	evm_init_cpld();
+
+	omap_register_i2c_bus(1, 100, am335x_i2c_boardinfo,
+				ARRAY_SIZE(am335x_i2c_boardinfo));
+}
+
 static void __init am335x_evm_init(void)
 {
 	am33xx_mux_init(board_mux);
 	omap_serial_init();
+	am335x_evm_i2c_init();
 	omap_sdrc_init(NULL, NULL);
 	omap_board_config = am335x_evm_config;
 	omap_board_config_size = ARRAY_SIZE(am335x_evm_config);
diff --git a/arch/arm/mach-omap2/include/mach/board-am335xevm.h b/arch/arm/mach-omap2/include/mach/board-am335xevm.h
new file mode 100644
index 0000000..e7ee5b3
--- /dev/null
+++ b/arch/arm/mach-omap2/include/mach/board-am335xevm.h
@@ -0,0 +1,40 @@
+/*
+ * Code for supporting AM335X EVM.
+ *
+ * Copyright (C) {2011} Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _BOARD_AM335X_H
+#define _BOARD_AM335X_H
+
+#define BASEBOARD_I2C_ADDR	0x50
+#define DAUG_BOARD_I2C_ADDR	0x51
+#define LCD_BOARD_I2C_ADDR	0x52
+
+#define LOW_COST_EVM		0
+#define GEN_PURP_EVM		1
+#define IND_AUT_MTR_EVM		2
+#define IP_PHN_EVM			3
+
+/* REVIST : check posibility of PROFILE_(x) syntax usage */
+#define PROFILE_NONE	-1	/* Few EVM doesn't have profiles */
+#define PROFILE_0		(0x1 << 0)
+#define PROFILE_1		(0x1 << 1)
+#define PROFILE_2		(0x1 << 2)
+#define PROFILE_3		(0x1 << 3)
+#define PROFILE_4		(0x1 << 4)
+#define PROFILE_5		(0x1 << 5)
+#define PROFILE_6		(0x1 << 6)
+#define PROFILE_7		(0x1 << 7)
+#define PROFILE_ALL		0xFF
+
+#endif
-- 
1.7.5.4

