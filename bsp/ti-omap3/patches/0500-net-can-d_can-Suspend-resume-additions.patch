From 3c791afb09a19fc820ff687aa44ae7d5cc3fad81 Mon Sep 17 00:00:00 2001
From: AnilKumar Ch <anilkumar@ti.com>
Date: Fri, 6 Jan 2012 13:53:01 +0545
Subject: [PATCH 500/609] net: can: d_can: Suspend resume additions

Original commit: c88b4c69b86bdde6cc24738a6d640d92ea6d046a

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Signed-off-by: AnilKumar Ch <anilkumar@ti.com>
---
 drivers/net/can/d_can/d_can.c          |   36 +++++++++++++++++++++++
 drivers/net/can/d_can/d_can.h          |    2 +
 drivers/net/can/d_can/d_can_platform.c |   49 ++++++++++++++++++++++++++++++-
 3 files changed, 85 insertions(+), 2 deletions(-)

diff --git a/drivers/net/can/d_can/d_can.c b/drivers/net/can/d_can/d_can.c
index ee54b96..7bba711 100644
--- a/drivers/net/can/d_can/d_can.c
+++ b/drivers/net/can/d_can/d_can.c
@@ -1309,6 +1309,42 @@ struct net_device *alloc_d_can_dev(int num_objs)
 }
 EXPORT_SYMBOL_GPL(alloc_d_can_dev);
 
+#ifdef CONFIG_PM
+void d_can_power_down(struct d_can_priv *d_can)
+{
+	unsigned int cnt;
+
+	d_can_set_bit(d_can, D_CAN_CTL, D_CAN_CTL_PDR);
+
+	/* Wait for the Init bit to get set */
+	cnt = D_CAN_WAIT_COUNT;
+	while (!d_can_get_bit(d_can, D_CAN_CTL, D_CAN_CTL_INIT) && cnt != 0) {
+		--cnt;
+		udelay(10);
+	}
+}
+EXPORT_SYMBOL_GPL(d_can_power_down);
+
+void d_can_power_up(struct d_can_priv *d_can)
+{
+	unsigned int cnt;
+
+	d_can_clear_bit(d_can, D_CAN_CTL, D_CAN_CTL_PDR);
+	d_can_clear_bit(d_can, D_CAN_CTL, D_CAN_CTL_INIT);
+
+	/* Wait for the Init bit to get clear */
+	cnt = D_CAN_WAIT_COUNT;
+	while (d_can_get_bit(d_can, D_CAN_CTL, D_CAN_CTL_INIT) && cnt != 0) {
+		--cnt;
+		udelay(10);
+	}
+}
+EXPORT_SYMBOL_GPL(d_can_power_up);
+#else
+#define d_can_power_down NULL
+#define d_can_power_up NULL
+#endif
+
 void free_d_can_dev(struct net_device *dev)
 {
 	free_candev(dev);
diff --git a/drivers/net/can/d_can/d_can.h b/drivers/net/can/d_can/d_can.h
index e6e77f0..780962e 100644
--- a/drivers/net/can/d_can/d_can.h
+++ b/drivers/net/can/d_can/d_can.h
@@ -59,6 +59,8 @@ struct d_can_priv {
 
 struct net_device *alloc_d_can_dev(int);
 void free_d_can_dev(struct net_device *dev);
+void d_can_power_up(struct d_can_priv *d_can);
+void d_can_power_down(struct d_can_priv *d_can);
 int register_d_can_dev(struct net_device *dev);
 void unregister_d_can_dev(struct net_device *dev);
 
diff --git a/drivers/net/can/d_can/d_can_platform.c b/drivers/net/can/d_can/d_can_platform.c
index bed1d78..48291f7 100644
--- a/drivers/net/can/d_can/d_can_platform.c
+++ b/drivers/net/can/d_can/d_can_platform.c
@@ -201,13 +201,58 @@ static int __devexit d_can_plat_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM
+static int d_can_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	struct net_device *dev = platform_get_drvdata(pdev);
+	struct d_can_priv *priv = netdev_priv(dev);
+
+	if (netif_running(dev)) {
+		netif_stop_queue(dev);
+		netif_device_detach(dev);
+	}
+
+	d_can_power_down(priv);
+	priv->can.state = CAN_STATE_SLEEPING;
+
+	clk_disable(priv->ick);
+	clk_disable(priv->fck);
+
+	return 0;
+}
+
+static int d_can_resume(struct platform_device *pdev)
+{
+	struct net_device *dev = platform_get_drvdata(pdev);
+	struct d_can_priv *priv = netdev_priv(dev);
+
+	clk_enable(priv->ick);
+	clk_enable(priv->fck);
+
+	d_can_power_up(priv);
+	priv->can.state = CAN_STATE_ERROR_ACTIVE;
+
+	if (netif_running(dev)) {
+		netif_device_attach(dev);
+		netif_start_queue(dev);
+	}
+
+	return 0;
+}
+#else
+#define d_can_suspend NULL
+#define d_can_resume NULL
+#endif
+
 static struct platform_driver d_can_plat_driver = {
 	.driver = {
 		.name	= D_CAN_DRV_NAME,
 		.owner	= THIS_MODULE,
 	},
-	.probe	= d_can_plat_probe,
-	.remove = __devexit_p(d_can_plat_remove),
+	.probe		= d_can_plat_probe,
+	.remove		= __devexit_p(d_can_plat_remove),
+	.suspend	= d_can_suspend,
+	.resume		= d_can_resume,
 };
 
 static int __init d_can_plat_init(void)
-- 
1.7.5.4

