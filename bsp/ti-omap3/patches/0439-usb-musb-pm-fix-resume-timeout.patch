From 23c0e702d0a12dd6b65c834230d652ab3f24184a Mon Sep 17 00:00:00 2001
From: Ajay Kumar Gupta <ajay.gupta@ti.com>
Date: Sat, 10 Mar 2012 12:14:36 +0530
Subject: [PATCH 439/609] usb: musb: pm: fix resume timeout

Original commit: 5ed2824be5a443eebb774540c86a22863c31474f

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

Fixes control transfer timeout and followed by re-enumeration of usb
devices after resume.

We need to switch off the session before DEVCTL register context save
and switch on the session before restoring POWER register context.
---
 drivers/usb/musb/musb_core.c |   14 +++++++++++++-
 drivers/usb/musb/ti81xx.c    |    2 ++
 2 files changed, 15 insertions(+), 1 deletions(-)

diff --git a/drivers/usb/musb/musb_core.c b/drivers/usb/musb/musb_core.c
index af61121..8f17ef2 100644
--- a/drivers/usb/musb/musb_core.c
+++ b/drivers/usb/musb/musb_core.c
@@ -2301,6 +2301,7 @@ void musb_save_context(struct musb *musb)
 	int i;
 	void __iomem *musb_base = musb->mregs;
 	void __iomem *epio;
+	u8 devctl;
 
 	if (is_host_enabled(musb)) {
 		musb->context.frame = musb_readw(musb_base, MUSB_FRAME);
@@ -2312,6 +2313,12 @@ void musb_save_context(struct musb *musb)
 	musb->context.intrrxe = musb_readw(musb_base, MUSB_INTRRXE);
 	musb->context.intrusbe = musb_readb(musb_base, MUSB_INTRUSBE);
 	musb->context.index = musb_readb(musb_base, MUSB_INDEX);
+
+	/* switch off the session */
+	devctl = musb_readb(musb_base, MUSB_DEVCTL);
+	devctl &= ~MUSB_DEVCTL_SESSION;
+	musb_writeb(musb_base, MUSB_DEVCTL, devctl);
+
 	musb->context.devctl = musb_readb(musb_base, MUSB_DEVCTL);
 
 	for (i = 0; i < musb->config->num_eps; ++i) {
@@ -2379,17 +2386,22 @@ void musb_restore_context(struct musb *musb)
 	void __iomem *musb_base = musb->mregs;
 	void __iomem *ep_target_regs;
 	void __iomem *epio;
+	u8 devctl;
 
 	if (is_host_enabled(musb)) {
 		musb_writew(musb_base, MUSB_FRAME, musb->context.frame);
 		musb_writeb(musb_base, MUSB_TESTMODE, musb->context.testmode);
 		musb_write_ulpi_buscontrol(musb->mregs, musb->context.busctl);
 	}
+
+	/* switch on the session */
+	devctl = musb->context.devctl | MUSB_DEVCTL_SESSION;
+	musb_writeb(musb_base, MUSB_DEVCTL, devctl);
+
 	musb_writeb(musb_base, MUSB_POWER, musb->context.power);
 	musb_writew(musb_base, MUSB_INTRTXE, musb->context.intrtxe);
 	musb_writew(musb_base, MUSB_INTRRXE, musb->context.intrrxe);
 	musb_writeb(musb_base, MUSB_INTRUSBE, musb->context.intrusbe);
-	musb_writeb(musb_base, MUSB_DEVCTL, musb->context.devctl);
 
 	for (i = 0; i < musb->config->num_eps; ++i) {
 		struct musb_hw_ep	*hw_ep;
diff --git a/drivers/usb/musb/ti81xx.c b/drivers/usb/musb/ti81xx.c
index da6f5fe..60577a8 100644
--- a/drivers/usb/musb/ti81xx.c
+++ b/drivers/usb/musb/ti81xx.c
@@ -1553,6 +1553,8 @@ static void ti81xx_restore_context(struct ti81xx_glue *glue)
 	/* restore CPPI4.1 DMA register for dma block 0 */
 	cppi41_restore_context(0, dma_sched_table);
 #endif
+	/* controller needs 200ms delay to resume */
+	msleep(200);
 }
 static int ti81xx_runtime_suspend(struct device *dev)
 {
-- 
1.7.5.4

