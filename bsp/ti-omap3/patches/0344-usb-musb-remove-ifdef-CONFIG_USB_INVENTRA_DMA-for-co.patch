From 4161749ef8e21d6c4464c6e8dc817f4274b18186 Mon Sep 17 00:00:00 2001
From: Ming Lei <tom.leiming@gmail.com>
Date: Thu, 23 Dec 2010 23:13:56 +0800
Subject: [PATCH 344/609] usb: musb: remove 'ifdef CONFIG_USB_INVENTRA_DMA'
 for comments only

Original commit: cccca7fd1c22fe4687b3ec07fe38bb38be949e7b

  From git://arago-project.org/git/projects/linux-am33x.git
  And ti-sdk-am335x-evm-05.05.00.00-Linux-x86-Install image

This comments has said clearly that they are for Mentor(INVENTRA) DMA
controller, so remove this unnecessary ifdef to make code more clean.

Signed-off-by: Ming Lei <tom.leiming@gmail.com>
Signed-off-by: Felipe Balbi <balbi@ti.com>
Signed-off-by: Ajay Kumar Gupta <ajay.gupta@ti.com>
Signed-off-by: Sriramakrishnan A G <srk@ti.com>
Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
---
 drivers/usb/musb/musb_gadget.c |    8 --------
 drivers/usb/musb/musb_host.c   |    8 --------
 2 files changed, 0 insertions(+), 16 deletions(-)

diff --git a/drivers/usb/musb/musb_gadget.c b/drivers/usb/musb/musb_gadget.c
index 5a5fe0e..c9835c4 100644
--- a/drivers/usb/musb/musb_gadget.c
+++ b/drivers/usb/musb/musb_gadget.c
@@ -276,8 +276,6 @@ static inline int max_ep_writesize(struct musb *musb, struct musb_ep *ep)
 }
 
 
-#ifdef CONFIG_USB_INVENTRA_DMA
-
 /* Peripheral tx (IN) using Mentor DMA works as follows:
 	Only mode 0 is used for transfers <= wPktSize,
 	mode 1 is used for larger transfers,
@@ -308,8 +306,6 @@ static inline int max_ep_writesize(struct musb *musb, struct musb_ep *ep)
  * upleveling from irq-per-packet to irq-per-buffer.
  */
 
-#endif
-
 /*
  * An endpoint is transmitting data. This can be called either from
  * the IRQ routine or from ep.queue() to kickstart a request on an
@@ -597,8 +593,6 @@ void musb_g_tx(struct musb *musb, u8 epnum)
 
 /* ------------------------------------------------------------ */
 
-#ifdef CONFIG_USB_INVENTRA_DMA
-
 /* Peripheral rx (OUT) using Mentor DMA works as follows:
 	- Only mode 0 is used.
 
@@ -626,8 +620,6 @@ void musb_g_tx(struct musb *musb, u8 epnum)
  * Non-Mentor DMA engines can of course work differently.
  */
 
-#endif
-
 /*
  * Context: controller locked, IRQs blocked, endpoint selected
  */
diff --git a/drivers/usb/musb/musb_host.c b/drivers/usb/musb/musb_host.c
index c5a9842..425a6d1 100644
--- a/drivers/usb/musb/musb_host.c
+++ b/drivers/usb/musb/musb_host.c
@@ -1074,8 +1074,6 @@ done:
 }
 
 
-#ifdef CONFIG_USB_INVENTRA_DMA
-
 /* Host side TX (OUT) using Mentor DMA works as follows:
 	submit_urb ->
 		- if queue was empty, Program Endpoint
@@ -1088,8 +1086,6 @@ done:
 			short packets in mode 1.
 */
 
-#endif
-
 /* Service a Tx-Available or dma completion irq for the endpoint */
 void musb_host_tx(struct musb *musb, u8 epnum)
 {
@@ -1331,8 +1327,6 @@ void musb_host_tx(struct musb *musb, u8 epnum)
 }
 
 
-#ifdef CONFIG_USB_INVENTRA_DMA
-
 /* Host side RX (IN) using Mentor DMA works as follows:
 	submit_urb ->
 		- if queue was empty, ProgramEndpoint
@@ -1368,8 +1362,6 @@ void musb_host_tx(struct musb *musb, u8 epnum)
  *	last packet of one URB's transfer.
  */
 
-#endif
-
 /* Schedule next QH from musb->in_bulk and move the current qh to
  * the end; avoids starvation for other endpoints.
  */
-- 
1.7.5.4

