From 6fdc4401d370337d85a90a69b3e79bc235534610 Mon Sep 17 00:00:00 2001
From: Tony Liu <Bo.Liu@windriver.com>
Date: Tue, 18 May 2010 15:26:06 +0800
Subject: [PATCH 6/7] lsi_app3k: SMP secondary core platform infrastructures

Enable SMP kernel prerequisite configs and add secondary cores bootup
routines.

Signed-off-by: Tony Liu <Bo.Liu@windriver.com>
---
 arch/arm/Kconfig                     |    5 +-
 arch/arm/mach-app/Kconfig            |    1 +
 arch/arm/mach-app/Makefile           |    3 +
 arch/arm/mach-app/headsmp.S          |   64 ++++++++++
 arch/arm/mach-app/include/mach/smp.h |   35 ++++++
 arch/arm/mach-app/platsmp.c          |  215 ++++++++++++++++++++++++++++++++++
 6 files changed, 321 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/mach-app/headsmp.S
 create mode 100644 arch/arm/mach-app/include/mach/smp.h
 create mode 100644 arch/arm/mach-app/platsmp.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 0509da7..5437d4d 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1105,10 +1105,11 @@ source "kernel/time/Kconfig"
 config SMP
 	bool "Symmetric Multi-Processing (EXPERIMENTAL)"
 	depends on EXPERIMENTAL && (REALVIEW_EB_ARM11MP || REALVIEW_EB_A9MP ||\
-		 MACH_REALVIEW_PB11MP || MACH_REALVIEW_PBX || ARCH_OMAP4 || ARCH_U8500)
+		 MACH_REALVIEW_PB11MP || MACH_REALVIEW_PBX || ARCH_OMAP4 || ARCH_U8500 ||\
+		ARCH_APP3K)
 	depends on GENERIC_CLOCKEVENTS
 	select USE_GENERIC_SMP_HELPERS
-	select HAVE_ARM_SCU if (ARCH_REALVIEW || ARCH_OMAP4 || ARCH_U8500)
+	select HAVE_ARM_SCU if (ARCH_REALVIEW || ARCH_OMAP4 || ARCH_U8500 || ARCH_APP3K)
 	help
 	  This enables support for systems with more than one CPU. If you have
 	  a system with only one CPU, like most personal computers, say N. If
diff --git a/arch/arm/mach-app/Kconfig b/arch/arm/mach-app/Kconfig
index c958f73..a288a9a 100644
--- a/arch/arm/mach-app/Kconfig
+++ b/arch/arm/mach-app/Kconfig
@@ -19,6 +19,7 @@ endchoice
 config ARCH_APP3K
 	bool "APP3300 family support"
 	depends on ARCH_APPXK
+	select SMP
 
 config MACH_APP33OO_MSBG
 	bool "APP3300 MSBG board"
diff --git a/arch/arm/mach-app/Makefile b/arch/arm/mach-app/Makefile
index 11005fa..30c96e6 100644
--- a/arch/arm/mach-app/Makefile
+++ b/arch/arm/mach-app/Makefile
@@ -4,4 +4,7 @@
 
 obj-y := clock.o irq.o mm.o pll.o timer.o ubootenv.o
 
+obj-$(CONFIG_SMP)			+= platsmp.o headsmp.o
+obj-$(CONFIG_LOCAL_TIMERS)		+= localtimer.o
+
 obj-$(CONFIG_MACH_APP33OO_MSBG) += mach-app3k.o clk-app3k.o
diff --git a/arch/arm/mach-app/headsmp.S b/arch/arm/mach-app/headsmp.S
new file mode 100644
index 0000000..8fa5ea1
--- /dev/null
+++ b/arch/arm/mach-app/headsmp.S
@@ -0,0 +1,64 @@
+/*
+ * linux/arch/arm/mach-app/headsmp.S
+ *
+ * Copyright (c) 2010 Wind River Systems, Inc.
+ * Tony Liu <Bo.Liu@windriver.com>
+ *
+ * Interface functions needed for the SMP. This file is based on arm
+ * realview smp platform.
+ * Copyright (c) 2003 ARM Limited.
+ *
+ * This program is free software,you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/linkage.h>
+#include <linux/init.h>
+
+#ifdef CONFIG_SMP_DEBUG
+#include <mach/hardware.h>
+
+	.macro uart_sendc, ch, rb, ra
+	ldr \rb, =(APP3K_PHYS_UART_BASE)
+
+1001:
+	ldr \ra, [\rb, #0x18]
+	and \ra, \ra, #0x20
+	cmp \ra, #0
+	bne 1001b
+
+	mov \ra, \ch
+	str \ra, [\rb]
+	.endm
+#else
+	.macro uart_sendc, ch, rb, ra
+	.endm
+#endif
+
+	__INIT
+
+ENTRY(app_secondary_startup)
+	mrc p15, 0, r0, c0, c0, 5
+	and r0, r0, #15
+	adr r4, 1f
+	ldmia   r4, {r5, r6}
+	sub r4, r4, r5
+	add r6, r6, r4
+
+pen:
+	ldr r7, [r6]
+	cmp r7, r0
+	bne pen
+
+	uart_sendc #0x70, r2, r3
+	uart_sendc #0x65, r2, r3
+	uart_sendc #0x6e, r2, r3
+	/*
+	 * we've been released from the holding pen: secondary_stack
+	 * should now contain the SVC stack for this core
+	*/
+	b   secondary_startup
+
+1:  .long   .
+    .long   pen_release
diff --git a/arch/arm/mach-app/include/mach/smp.h b/arch/arm/mach-app/include/mach/smp.h
new file mode 100644
index 0000000..12c3675
--- /dev/null
+++ b/arch/arm/mach-app/include/mach/smp.h
@@ -0,0 +1,35 @@
+/*
+ * include/mach/smp.h
+ *
+ * Interface functions needed for the SMP. This file is based on arm
+ * realview smp platform.
+ * Copyright (c) 2003 ARM Limited.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+
+#ifndef __ASM_ARCH_SMP_H
+#define __ASM_ARCH_SMP_H
+
+#include <asm/hardware/gic.h>
+
+#define hard_smp_processor_id()			\
+	({						\
+	 unsigned int cpunum;			\
+	 __asm__("mrc p15, 0, %0, c0, c0, 5"	\
+		 : "=r" (cpunum));		\
+	 cpunum &= 0x0F;				\
+	 })
+
+/*
+ * We use IRQ1 as the IPI
+ */
+static inline void smp_cross_call(const struct cpumask *mask)
+{
+	gic_raise_softirq(mask, 1);
+}
+
+#endif
diff --git a/arch/arm/mach-app/platsmp.c b/arch/arm/mach-app/platsmp.c
new file mode 100644
index 0000000..31dc158
--- /dev/null
+++ b/arch/arm/mach-app/platsmp.c
@@ -0,0 +1,215 @@
+/*
+ * linux/arch/arm/mach-app/platsmp.c
+ *
+ * Copyright (c) 2010 Wind River Systems, Inc.
+ * Tony Liu <Bo.Liu@windriver.com>
+ *
+ * This file is based on arm realview smp platform.
+ * Copyright (C) 2002 ARM Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/smp.h>
+#include <linux/io.h>
+#include <linux/bootmem.h>
+
+#include <asm/cacheflush.h>
+#include <asm/localtimer.h>
+#include <asm/smp_scu.h>
+
+#include <mach/hardware.h>
+#include <mach/common.h>
+
+/* SCU base address */
+static void __iomem *scu_base;
+
+/*
+ * control for which core is the next to come out of the secondary
+ * boot "holding pen"
+ */
+volatile int __cpuinitdata pen_release = -1;
+
+extern unsigned long secondary_boot_pool;
+extern unsigned long secondary_boot_pool_len;
+
+extern void app_secondary_startup(void);
+
+/*
+ * Use SCU config register to count number of cores
+ */
+static inline unsigned int get_core_count(void)
+{
+	if (scu_base)
+		return scu_get_core_count(scu_base);
+
+	return 1;
+}
+
+static DEFINE_SPINLOCK(boot_lock);
+
+void __cpuinit platform_secondary_init(unsigned int cpu)
+{
+	trace_hardirqs_off();
+
+	/*
+	 * If any interrupts are already enabled for the primary
+	 * core (e.g. timer irq), then they will not have been enabled
+	 * for us: do so
+	 */
+	gic_cpu_init(0, gic_cpu_base_addr);
+
+	/*
+	 * let the primary processor know we're out of the
+	 * pen, then head off into the C entry point
+	 */
+	pen_release = -1;
+	smp_wmb();
+
+	/*
+	 * Synchronise with the boot thread.
+	 */
+	spin_lock(&boot_lock);
+	spin_unlock(&boot_lock);
+}
+
+int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
+{
+	unsigned long timeout;
+
+	/*
+	 * set synchronisation state between this boot processor
+	 * and the secondary one
+	 */
+	spin_lock(&boot_lock);
+
+	/*
+	 * The secondary processor is waiting to be released from
+	 * the holding pen - release it, then wait for it to flag
+	 * that it has been released by resetting pen_release.
+	 *
+	 * Note that "pen_release" is the hardware CPU ID, whereas
+	 * "cpu" is Linux's internal ID.
+	 */
+	pen_release = cpu;
+	flush_cache_all();
+	smp_wmb();
+
+	timeout = jiffies + (1 * HZ);
+	while (time_before(jiffies, timeout)) {
+		smp_rmb();
+		if (pen_release == -1)
+			break;
+		udelay(10);
+	}
+
+	/*
+	 * now the secondary core is starting up let it run its
+	 * calibrations, then wait for it to finish.
+	 */
+	spin_unlock(&boot_lock);
+
+	return pen_release != -1 ? -ENOSYS : 0;
+}
+
+static void __init wakeup_secondary(void)
+{
+	unsigned long *secondary_boot_addr;
+	unsigned long *secondary_boot_flag;
+
+	pen_release = -1;
+
+	/* Last word is used for secondary core bootup entry address */
+	secondary_boot_addr = (unsigned long *)phys_to_virt(
+			secondary_boot_pool + secondary_boot_pool_len - 3);
+
+	/*
+	 * The next word to the last is used as secondary
+	 * core start flag
+	 */
+	secondary_boot_flag = (unsigned long *)phys_to_virt(
+			secondary_boot_pool + secondary_boot_pool_len - 7);
+
+	/*
+	 * secondary core does not needs general boot
+	 * routine finished by boot core
+	 */
+	(*secondary_boot_addr) = virt_to_phys(app_secondary_startup);
+
+	/* It's time to free secondary core out of spinning */
+	(*secondary_boot_flag) = 1;
+
+	smp_wmb();
+}
+
+/*
+ * Initialise the CPU possible map early - this describes the CPUs
+ * which may be present or become present in the system.
+ */
+void __init smp_init_cpus(void)
+{
+	unsigned int i, ncores;
+
+	scu_base = (void __iomem *)APP_PMR_BASE;
+
+	ncores = get_core_count();
+
+	for (i = 0; i < ncores; i++)
+		set_cpu_possible(i, true);
+}
+
+void __init smp_prepare_cpus(unsigned int max_cpus)
+{
+	unsigned int ncores = get_core_count();
+	unsigned int cpu = smp_processor_id();
+	int i;
+
+	/* sanity check */
+	if (ncores == 0) {
+		printk(KERN_ERR
+			"LSI APP3K: unexpected core count of 0! Default to 1\n");
+		ncores = 1;
+	}
+
+	if (ncores > NR_CPUS) {
+		printk(KERN_WARNING
+			"LSI APP3K: number of cores (%d) greater than configured "
+			"maximum of %d - clipping\n",
+			ncores, NR_CPUS);
+		ncores = NR_CPUS;
+	}
+	smp_store_cpu_info(cpu);
+
+	/*
+	 * are we trying to boot more cores than exist?
+	 */
+	if (max_cpus > ncores)
+		max_cpus = ncores;
+
+	/*
+	 * Initialise the present map, which describes the set of CPUs
+	 * actually populated at the present time.
+	 */
+	for (i = 0; i < max_cpus; i++)
+		set_cpu_present(i, true);
+
+	if (max_cpus > 1) {
+		/*
+		 * Enable the local timer or broadcast device for the
+		 * boot CPU, but only if we have more than one CPU.
+		 */
+		percpu_timer_setup();
+
+		/*
+		 * Initialise the SCU and wake up the secondary core using
+		 * wakeup_secondary().
+		 */
+		scu_enable(scu_base);
+		wakeup_secondary();
+	}
+}
-- 
1.6.5.2

