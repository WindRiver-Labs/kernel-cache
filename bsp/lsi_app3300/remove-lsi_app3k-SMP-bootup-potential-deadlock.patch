From 0a908843026dbde160a1652965075812b6d243a9 Mon Sep 17 00:00:00 2001
From: Tonyliu <Bo.Liu@windriver.com>
Date: Wed, 28 Jul 2010 15:54:38 +0800
Subject: [PATCH 1/2] remove lsi_app3k SMP bootup potential deadlock

boot_lock initially intends to protect intra cores signal pen_release.
The original implementation in standard kernel is not proper.
The protection range on boot core is too wide and on secondary core has
no effect.

For standard kernel, the improper implementation can not
produce deadlock. Secondary core can obtain the boot_lock after timeout
of boot core waiting which causes longer bootup period.

But for preempt_rt kernel, spin_lock is preemptible. Secondary core may
preempt boot core's boot_lock, then it causes frequent deadlock between
boot core and secondary core.

This patch shrinks boot_lock spin_lock protection only for pen_release
access that breaks potential deadlock.

Signed-off-by: Tonyliu <Bo.Liu@windriver.com>
---
 arch/arm/mach-app/platsmp.c |   14 ++++++--------
 1 files changed, 6 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-app/platsmp.c b/arch/arm/mach-app/platsmp.c
index 31dc158..bfde3aa 100644
--- a/arch/arm/mach-app/platsmp.c
+++ b/arch/arm/mach-app/platsmp.c
@@ -68,14 +68,11 @@ void __cpuinit platform_secondary_init(unsigned int cpu)
 	 * let the primary processor know we're out of the
 	 * pen, then head off into the C entry point
 	 */
-	pen_release = -1;
-	smp_wmb();
-
-	/*
-	 * Synchronise with the boot thread.
-	 */
 	spin_lock(&boot_lock);
+	pen_release = -1;
 	spin_unlock(&boot_lock);
+
+	smp_wmb();
 }
 
 int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
@@ -97,6 +94,9 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 * "cpu" is Linux's internal ID.
 	 */
 	pen_release = cpu;
+
+	spin_unlock(&boot_lock);
+
 	flush_cache_all();
 	smp_wmb();
 
@@ -112,8 +112,6 @@ int __cpuinit boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 * now the secondary core is starting up let it run its
 	 * calibrations, then wait for it to finish.
 	 */
-	spin_unlock(&boot_lock);
-
 	return pen_release != -1 ? -ENOSYS : 0;
 }
 
-- 
1.6.5.2

