From ec4ac5c6d375d3d20662ad0cf5eb37ffcd231ac5 Mon Sep 17 00:00:00 2001
From: Tony Liu <Bo.Liu@windriver.com>
Date: Fri, 21 May 2010 14:33:57 +0800
Subject: [PATCH 7/7] lsi_app3k: enable KGDBoE

Add net poll controller routine to enable KGDBoE for on-chip MAC controller.

Signed-off-by: Tony Liu <Bo.Liu@windriver.com>
---
 drivers/net/arm/appnic.c |   42 +++++++++++++++++++++++++++++++-----------
 1 files changed, 31 insertions(+), 11 deletions(-)

diff --git a/drivers/net/arm/appnic.c b/drivers/net/arm/appnic.c
index 08abc73..14a472a 100644
--- a/drivers/net/arm/appnic.c
+++ b/drivers/net/arm/appnic.c
@@ -131,12 +131,14 @@ static struct timer_list appnic_timer;
 	 local_irq_enable();                       \
 	 ret;                                      \
 	 })
-#define appnic_special_lock(lock)               spin_lock_irq(lock)
-#define appnic_special_unlock(lock)             spin_unlock_irq(lock)
+#define appnic_special_lock(lock, flag) \
+		spin_lock_irqsave(lock, flag)
+#define appnic_special_unlock(lock, flag) \
+		spin_unlock_irqrestore(lock, flag)
 #else
 #define appnic_special_trylock(lock)            (1)
-#define appnic_special_lock(lock)		        do { } while (0)
-#define appnic_special_unlock(lock)	            do { } while (0)
+#define appnic_special_lock(lock, flag)	        do { } while (0)
+#define appnic_special_unlock(lock, flag)            do { } while (0)
 #endif
 
 /*
@@ -1245,8 +1247,9 @@ int appnic_hard_start_xmit(struct sk_buff *skb,
 	int length;
 	int buf_per_desc;
 	int bytes_copied = 0;
+	unsigned long flags;
 
-	appnic_special_lock(&dev->lock);
+	appnic_special_lock(&dev->lock, flags);
 
 	length = skb->len < ETH_ZLEN ? ETH_ZLEN : skb->len;
 	buf_per_desc = dev->tx_buf_sz / dev->tx_num_desc;
@@ -1316,11 +1319,24 @@ int appnic_hard_start_xmit(struct sk_buff *skb,
 	/* free the socket buffer */
 	dev_kfree_skb(skb);
 
-	appnic_special_unlock(&dev->lock);
+	appnic_special_unlock(&dev->lock, flags);
 
 	return 0;
 }
 
+#ifdef CONFIG_NET_POLL_CONTROLLER
+/*
+ * Polling receive - used by netconsole and other diagnostic tools
+ * to allow network i/o with interrupts disabled.
+ */
+static void appnic_poll_controller(struct net_device *dev)
+{
+	disable_irq(dev->irq);
+	appnic_isr(dev->irq, dev);
+	enable_irq(dev->irq);
+}
+#endif
+
 /*
  * This method is called when a packet transmission fails to complete
  * within a resonable period, on the assumption that an interrupt has
@@ -1457,6 +1473,7 @@ static int appnic_get_settings(struct net_device *device,
 			(struct appnic_device_t *)netdev_priv(device);
 	unsigned short ad_value;
 	int speed, duplex;
+	unsigned long flags;
 
 	memset(command, 0, sizeof(struct ethtool_cmd));
 
@@ -1468,12 +1485,12 @@ static int appnic_get_settings(struct net_device *device,
 		  SUPPORTED_100baseT_Full);
 
 	/* Acquire the device lock. */
-	appnic_special_lock(&dev->lock);
+	appnic_special_lock(&dev->lock, flags);
 
 	/* What is currently advertised. */
 	if (0 != phy_read(phy_address, PHY_AUTONEG_ADVERTISE, &ad_value)) {
 		ERROR_PRINT("PHY read failed!");
-		appnic_special_unlock(&dev->lock);
+		appnic_special_unlock(&dev->lock, flags);
 		return -EIO;
 	}
 
@@ -1508,7 +1525,7 @@ static int appnic_get_settings(struct net_device *device,
 	speed = phy_speed(phy_address);
 	if (-1 == speed) {
 		ERROR_PRINT("PHY read failed!");
-		appnic_special_unlock(&dev->lock);
+		appnic_special_unlock(&dev->lock, flags);
 		return -EIO;
 	}
 
@@ -1521,7 +1538,7 @@ static int appnic_get_settings(struct net_device *device,
 	duplex = phy_duplex(phy_address);
 	if (-1 == duplex) {
 		ERROR_PRINT("PHY read failed!");
-		appnic_special_unlock(&dev->lock);
+		appnic_special_unlock(&dev->lock, flags);
 		return -EIO;
 	}
 
@@ -1534,7 +1551,7 @@ static int appnic_get_settings(struct net_device *device,
 	command->autoneg = AUTONEG_ENABLE;
 
 	/* Unlock and return success. */
-	appnic_special_unlock(&dev->lock);
+	appnic_special_unlock(&dev->lock, flags);
 
 	return 0;
 }
@@ -1554,6 +1571,9 @@ static const struct net_device_ops appnic_netdev_ops = {
 	.ndo_do_ioctl   = appnic_do_ioctl,
 	.ndo_set_mac_address    = appnic_set_mac_address,
 	.ndo_tx_timeout         = appnic_tx_timeout,
+#ifdef CONFIG_NET_POLL_CONTROLLER
+	.ndo_poll_controller	= appnic_poll_controller,
+#endif
 };
 
 
-- 
1.6.5.2

