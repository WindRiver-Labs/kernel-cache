From 0f57a68d1746c284b3c4424a41f1df80bf1779a2 Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <Guoqing.Jiang@windriver.com>
Date: Mon, 24 Jan 2011 18:47:27 +0800
Subject: [PATCH] workqueue: add system workqueue for drm subsystem

Refer to below upstream commit, add system_nrt_wq
workqueue which is used by drm subsytem, xserver
can't be kill normally without this workqueue.

d320c03830b17af64e4547075003b1eeb274bc6c
workqueue: s/__create_workqueue()/alloc_workqueue()/, and add system workqueues

Signed-off-by: Guoqing Jiang <Guoqing.Jiang@windriver.com>
---
 include/linux/workqueue.h |    6 ++++++
 kernel/workqueue.c        |    5 ++++-
 2 files changed, 10 insertions(+), 1 deletions(-)

diff --git a/include/linux/workqueue.h b/include/linux/workqueue.h
index ec218ce..8b8ab63 100644
--- a/include/linux/workqueue.h
+++ b/include/linux/workqueue.h
@@ -179,6 +179,12 @@ static inline void destroy_work_on_stack(struct work_struct *work) { }
 #define work_clear_pending(work) \
 	clear_bit(WORK_STRUCT_PENDING, work_data_bits(work))
 
+/*
+ * system_nrt_wq is non-reentrant and guarantees that any given work
+ * item is never executed in parallel by multiple CPUs.  Queue
+ * flushing might take relatively long.
+ */
+extern struct workqueue_struct *system_nrt_wq;
 
 extern struct workqueue_struct *
 __create_workqueue_key(const char *name, int singlethread,
diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index 26b8839..a54bf44 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -722,6 +722,8 @@ int cancel_delayed_work_sync(struct delayed_work *dwork)
 EXPORT_SYMBOL(cancel_delayed_work_sync);
 
 static struct workqueue_struct *keventd_wq __read_mostly;
+struct workqueue_struct *system_nrt_wq __read_mostly;
+EXPORT_SYMBOL_GPL(system_nrt_wq);
 
 /**
  * schedule_work - put work task in global workqueue
@@ -1222,6 +1224,7 @@ void __init init_workqueues(void)
 	cpu_singlethread_map = cpumask_of(singlethread_cpu);
 	hotcpu_notifier(workqueue_cpu_callback, 0);
 	keventd_wq = create_workqueue("events");
-	BUG_ON(!keventd_wq);
+	system_nrt_wq = create_workqueue("events_nrt");
+	BUG_ON(!keventd_wq || !system_nrt_wq);
 	set_workqueue_prio(keventd_wq, SCHED_FIFO, 1, -20);
 }
-- 
1.6.0.3

