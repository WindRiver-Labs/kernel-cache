From 41d51caff7eea53e2b246f96160a0f5b853081f6 Mon Sep 17 00:00:00 2001
From: Tirumalesh Chalamarla <Tirumalesh.Chalamarla@cavium.com>
Date: Wed, 7 Sep 2016 10:45:57 +0530
Subject: [PATCH 03/56] arm64/SMMU: Make sure ITS and SMMU TLBs are in sync

This patch comes from Cavium online SDK OCTEONTX-SDK-6.1.0-PR.

Due to the nature of SMMU implementation in Cavium on a very
rare occasions ITS and SMMU will go out of sync

This patch make sure that will never happen.

Signed-off-by: tirumalesh <tchalamarla@cavium.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/iommu/arm-smmu.c         | 13 +++++++++++++
 drivers/irqchip/irq-gic-common.h |  1 +
 drivers/irqchip/irq-gic-v3-its.c | 21 +++++++++++++++++++++
 kernel/irq/chip.c                |  4 ++++
 4 files changed, 39 insertions(+)

diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index 2db74eb..c801b4b 100644
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -614,6 +614,19 @@ static void arm_smmu_tlb_sync(void *cookie)
 	__arm_smmu_tlb_sync(smmu_domain->smmu);
 }
 
+void cavium_smmu_tlb_sync(struct device *dev)
+{
+	struct arm_smmu_device *smmu;
+	struct arm_smmu_master_cfg *cfg;
+
+	smmu = find_smmu_for_device(dev);
+	if (!smmu)
+		return;
+
+	__arm_smmu_tlb_sync(smmu);
+}
+EXPORT_SYMBOL(cavium_smmu_tlb_sync);
+
 static void arm_smmu_tlb_inv_context(void *cookie)
 {
 	struct arm_smmu_domain *smmu_domain = cookie;
diff --git a/drivers/irqchip/irq-gic-common.h b/drivers/irqchip/irq-gic-common.h
index 205e5fd..c3d35f2 100644
--- a/drivers/irqchip/irq-gic-common.h
+++ b/drivers/irqchip/irq-gic-common.h
@@ -37,5 +37,6 @@ void gic_enable_quirks(u32 iidr, const struct gic_quirk *quirks,
 		void *data);
 
 void gic_set_kvm_info(const struct gic_kvm_info *info);
+void cavium_smmu_tlb_sync(void *iommu);
 
 #endif /* _IRQ_GIC_COMMON_H */
diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index 36b9c28..49b466e 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -108,6 +108,7 @@ struct its_device {
 	struct its_node		*its;
 	struct event_lpi_map	event_map;
 	void			*itt;
+	struct device		*dev;
 	u32			nr_ites;
 	u32			device_id;
 };
@@ -657,10 +658,28 @@ static void its_irq_compose_msi_msg(struct irq_data *d, struct msi_msg *msg)
 	msg->data		= its_get_event_id(d);
 }
 
+/**
+ *  * Due to ASID space collision in Cavium SMMU,
+ *   * we need to make sure SMMU is in sync with ITS translations.
+ *    **/
+static void its_ack_irq(struct irq_data *d)
+{
+	struct its_device *its_dev = irq_data_get_irq_chip_data(d);
+	struct pci_dev *pdev;
+
+	if (!dev_is_pci(its_dev->dev))
+		return;
+
+	pdev = to_pci_dev(its_dev->dev);
+	if (pdev->vendor != 0x177d)
+		cavium_smmu_tlb_sync(its_dev->dev);
+}
+
 static struct irq_chip its_irq_chip = {
 	.name			= "ITS",
 	.irq_mask		= its_mask_irq,
 	.irq_unmask		= its_unmask_irq,
+	.irq_ack		= its_ack_irq,
 	.irq_eoi		= irq_chip_eoi_parent,
 	.irq_set_affinity	= its_set_affinity,
 	.irq_compose_msi_msg	= its_irq_compose_msi_msg,
@@ -1415,6 +1434,8 @@ static int its_msi_prepare(struct irq_domain *domain, struct device *dev,
 	if (!its_dev)
 		return -ENOMEM;
 
+	its_dev->dev =dev;
+
 	pr_debug("ITT %d entries, %d bits\n", nvec, ilog2(nvec));
 out:
 	info->scratchpad[0].ptr = its_dev;
diff --git a/kernel/irq/chip.c b/kernel/irq/chip.c
index 26ba565..9bcdadb 100644
--- a/kernel/irq/chip.c
+++ b/kernel/irq/chip.c
@@ -587,6 +587,10 @@ void handle_fasteoi_irq(struct irq_desc *desc)
 	}
 
 	kstat_incr_irqs_this_cpu(desc);
+
+	if  (chip->irq_ack)
+		chip->irq_ack(&desc->irq_data);
+
 	if (desc->istate & IRQS_ONESHOT)
 		mask_irq(desc);
 
-- 
2.0.2

