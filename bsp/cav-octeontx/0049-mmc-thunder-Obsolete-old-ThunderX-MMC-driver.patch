From 4baba748874a63ccbc728a6c64d698fbcb3ffe71 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Thu, 29 Dec 2016 09:44:29 +0800
Subject: [PATCH 49/56] mmc: thunder: Obsolete old ThunderX MMC driver

This patch comes from Cavium online SDK OCTEONTX-SDK-6.1.0-PR.

The driver does not support multiple slots, duplicates most of the
Octeon code and hard-codes settings that should come from devicetree.
Therefore replace it with a version that corrects this drawbacks.

Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/mmc/host/Kconfig        |   10 -
 drivers/mmc/host/Makefile       |    1 -
 drivers/mmc/host/thunderx-mmc.c | 1135 ---------------------------------------
 drivers/mmc/host/thunderx-mmc.h |  242 ---------
 4 files changed, 1388 deletions(-)
 delete mode 100644 drivers/mmc/host/thunderx-mmc.c
 delete mode 100644 drivers/mmc/host/thunderx-mmc.h

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index 1748ff3..5274f50 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -343,16 +343,6 @@ config MMC_SDHCI_ST
 	  If you have a controller with this interface, say Y or M here.
 	  If unsure, say N.
 
-config MMC_SDHCI_THUNDERX
-	tristate "MMC SD HCI support on Cavium's thunderx SoC"
-	depends on MMC && GPIO_THUNDERX
-	help
-	  This selects the Secure Digital Host Controller Interface in
-	  cavium's Thunderx SoCs.
-
-	  If you have a controller with this interface, say Y or M here.
-	  If unsure, say N.
-
 config MMC_OMAP
 	tristate "TI OMAP Multimedia Card Interface support"
 	depends on ARCH_OMAP
diff --git a/drivers/mmc/host/Makefile b/drivers/mmc/host/Makefile
index 9ed9f37..e2bdaaf 100644
--- a/drivers/mmc/host/Makefile
+++ b/drivers/mmc/host/Makefile
@@ -76,7 +76,6 @@ obj-$(CONFIG_MMC_SDHCI_MSM)		+= sdhci-msm.o
 obj-$(CONFIG_MMC_SDHCI_ST)		+= sdhci-st.o
 obj-$(CONFIG_MMC_SDHCI_MICROCHIP_PIC32)	+= sdhci-pic32.o
 obj-$(CONFIG_MMC_SDHCI_BRCMSTB)		+= sdhci-brcmstb.o
-obj-$(CONFIG_MMC_SDHCI_THUNDERX)	+= thunderx-mmc.o
 
 ifeq ($(CONFIG_CB710_DEBUG),y)
 	CFLAGS-cb710-mmc	+= -DDEBUG
diff --git a/drivers/mmc/host/thunderx-mmc.c b/drivers/mmc/host/thunderx-mmc.c
deleted file mode 100644
index 0587e1c..0000000
--- a/drivers/mmc/host/thunderx-mmc.c
+++ /dev/null
@@ -1,1135 +0,0 @@
-/*
- * Copyright (C) 2016 Cavium, Inc.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of version 2 of the GNU General Public License
- * as published by the Free Software Foundation.
- */
-
-
-#include <linux/module.h>
-#include <linux/pci.h>
-#include <linux/blkdev.h>
-#include <linux/delay.h>
-#include <linux/interrupt.h>
-#include <linux/dma-mapping.h>
-#include <linux/device.h>
-#include <linux/gfp.h>
-#include <linux/of.h>
-
-#include <linux/mmc/card.h>
-#include <linux/mmc/host.h>
-#include <linux/mmc/mmc.h>
-#include <linux/mmc/sd.h>
-#include <linux/gpio.h>
-
-#include "thunderx-mmc.h"
-
-#define DRV_NAME	"thunderx-mmc"
-#define DRV_VERSION	"1.0"
-
-#define PCI_DEVICE_ID_THUNDER_MIO_EMM	0xA010
-
-#define write_csr(addr, val)	writeq_relaxed(val, (void *)(addr))
-#define read_csr(addr)		readq_relaxed((void *)(addr))
-
-static int bb_size = 1 << 22;
-module_param(bb_size, int, S_IRUGO);
-MODULE_PARM_DESC(limit_max_blk,
-		 "Size of DMA linearizing buffer (max transfer size).");
-
-static int ddr = 1;
-module_param(ddr, int, S_IRUGO);
-MODULE_PARM_DESC(ddr,
-		 "enable DoubleDataRate clocking:"
-		 " 0=no, 1=always, 2=at spi-max-frequency/2");
-
-static inline void thunder_mmc_acquire_bus(struct thunder_mmc_host *host)
-{
-	down(&host->mmc_serializer);
-}
-
-static inline void thunder_mmc_release_bus(struct thunder_mmc_host *host)
-{
-		up(&host->mmc_serializer);
-}
-
-struct thunder_mmc_cr_type {
-	u8 ctype;
-	u8 rtype;
-};
-
-static struct thunder_mmc_cr_type thunder_mmc_cr_types[] = {
-	{0, 0},		/* CMD0 */
-	{0, 3},		/* CMD1 */
-	{0, 2},		/* CMD2 */
-	{0, 1},		/* CMD3 */
-	{0, 0},		/* CMD4 */
-	{0, 1},		/* CMD5 */
-	{0, 1},		/* CMD6 */
-	{0, 1},		/* CMD7 */
-	{1, 1},		/* CMD8 */
-	{0, 2},		/* CMD9 */
-	{0, 2},		/* CMD10 */
-	{1, 1},		/* CMD11 */
-	{0, 1},		/* CMD12 */
-	{0, 1},		/* CMD13 */
-	{1, 1},		/* CMD14 */
-	{0, 0},		/* CMD15 */
-	{0, 1},		/* CMD16 */
-	{1, 1},		/* CMD17 */
-	{1, 1},		/* CMD18 */
-	{3, 1},		/* CMD19 */
-	{2, 1},		/* CMD20 */
-	{0, 0},		/* CMD21 */
-	{0, 0},		/* CMD22 */
-	{0, 1},		/* CMD23 */
-	{2, 1},		/* CMD24 */
-	{2, 1},		/* CMD25 */
-	{2, 1},		/* CMD26 */
-	{2, 1},		/* CMD27 */
-	{0, 1},		/* CMD28 */
-	{0, 1},		/* CMD29 */
-	{1, 1},		/* CMD30 */
-	{1, 1},		/* CMD31 */
-	{0, 0},		/* CMD32 */
-	{0, 0},		/* CMD33 */
-	{0, 0},		/* CMD34 */
-	{0, 1},		/* CMD35 */
-	{0, 1},		/* CMD36 */
-	{0, 0},		/* CMD37 */
-	{0, 1},		/* CMD38 */
-	{0, 4},		/* CMD39 */
-	{0, 5},		/* CMD40 */
-	{0, 0},		/* CMD41 */
-	{2, 1},		/* CMD42 */
-	{0, 0},		/* CMD43 */
-	{0, 0},		/* CMD44 */
-	{0, 0},		/* CMD45 */
-	{0, 0},		/* CMD46 */
-	{0, 0},		/* CMD47 */
-	{0, 0},		/* CMD48 */
-	{0, 0},		/* CMD49 */
-	{0, 0},		/* CMD50 */
-	{0, 0},		/* CMD51 */
-	{0, 0},		/* CMD52 */
-	{0, 0},		/* CMD53 */
-	{0, 0},		/* CMD54 */
-	{0, 1},		/* CMD55 */
-	{0xff, 0xff},	/* CMD56 */
-	{0, 0},		/* CMD57 */
-	{0, 0},		/* CMD58 */
-	{0, 0},		/* CMD59 */
-	{0, 0},		/* CMD60 */
-	{0, 0},		/* CMD61 */
-	{0, 0},		/* CMD62 */
-	{0, 0}		/* CMD63 */
-};
-
-struct thunder_mmc_cr_mods {
-	u8 ctype_xor;
-	u8 rtype_xor;
-};
-
-static struct thunder_mmc_cr_mods thunder_mmc_get_cr_mods(struct mmc_command *cmd)
-{
-	struct thunder_mmc_cr_type *cr;
-	u8 desired_ctype, hardware_ctype;
-	u8 desired_rtype, hardware_rtype;
-	struct thunder_mmc_cr_mods r;
-
-	desired_ctype = desired_rtype = 0;
-
-	cr = thunder_mmc_cr_types + (cmd->opcode & 0x3f);
-	hardware_ctype = cr->ctype;
-	hardware_rtype = cr->rtype;
-	if (cmd->opcode == 56) { /* CMD56 GEN_CMD */
-		hardware_ctype = (cmd->arg & 1) ? 1 : 2;
-	}
-
-	switch (mmc_cmd_type(cmd)) {
-	case MMC_CMD_ADTC:
-		desired_ctype = (cmd->data->flags & MMC_DATA_WRITE) ? 2 : 1;
-		break;
-	case MMC_CMD_AC:
-	case MMC_CMD_BC:
-	case MMC_CMD_BCR:
-		desired_ctype = 0;
-		break;
-	}
-
-	switch (mmc_resp_type(cmd)) {
-	case MMC_RSP_NONE:
-		desired_rtype = 0;
-		break;
-	case MMC_RSP_R1:/* MMC_RSP_R5, MMC_RSP_R6, MMC_RSP_R7 */
-	case MMC_RSP_R1B:
-		desired_rtype = 1;
-		break;
-	case MMC_RSP_R2:
-		desired_rtype = 2;
-		break;
-	case MMC_RSP_R3: /* MMC_RSP_R4 */
-		desired_rtype = 3;
-		break;
-	}
-	r.ctype_xor = desired_ctype ^ hardware_ctype;
-	r.rtype_xor = desired_rtype ^ hardware_rtype;
-	return r;
-}
-
-static bool thunder_mmc_switch_val_changed(struct thunder_mmc_slot *slot,
-					  u64 new_val)
-{
-	/* Match BUS_ID, HS_TIMING, BUS_WIDTH, POWER_CLASS, CLK_HI, CLK_LO */
-	u64 m = 0x3001070fffffffffull;
-	return (slot->cached_switch & m) != (new_val & m);
-}
-
-static unsigned int thunder_mmc_timeout_to_wdog(struct thunder_mmc_slot *slot,
-					       unsigned int ns)
-{
-	u64 bt = (u64)slot->clock * (u64)ns;
-	return (unsigned int)(bt / 1000000000);
-}
-
-static int decode_int_status(u64 status)
-{
-	switch (status & 0x7F)
-	{
-	case 1:
-		pr_debug("BUF_DONE\n");
-		break;
-	case 2:
-		pr_debug("CMD_DONE\n");
-		break;
-	case 4:
-		pr_debug("DMA_DONE\n");
-		break;
-	case 8:
-		pr_debug("CMD_ERR\n");
-		break;
-	case 16:
-		pr_debug("DMA_ERR\n");
-		break;
-	case 32:
-		pr_debug("SWITCH_DONE\n");
-		break;
-	case 64:
-		pr_debug("SWITCH_ERR\n");
-		break;
-	default:
-		pr_debug("Not Valid Interrupt status");
-		break;
-	}
-	return 0;
-}
-
-static irqreturn_t thunder_mmc_interrupt(int irq, void *dev_id)
-{
-	struct thunder_mmc_host *host = dev_id;
-	union mio_emm_int emm_int;
-	struct mmc_request	*req;
-	bool host_done;
-	union mio_emm_rsp_sts rsp_sts;
-	unsigned long flags = 0;
-
-	if (host->need_irq_handler_lock)
-		spin_lock_irqsave(&host->irq_handler_lock, flags);
-	emm_int.u64 = read_csr(host->base + MIO_EMM_INT);
-	pr_debug("%s: EMM_INT(r) = 0x%llx\n", __FUNCTION__, emm_int.u64);
-	decode_int_status(emm_int.u64);
-	req = host->current_req;
-	write_csr(host->base + MIO_EMM_INT, emm_int.u64);
-
-	if (!req)
-		goto out;
-
-	rsp_sts.u64 = read_csr(host->base + MIO_EMM_RSP_STS);
-
-	if (host->dma_err_pending) {
-		host->current_req = NULL;
-		host->dma_err_pending = false;
-		req->done(req);
-		host_done = true;
-		goto no_req_done;
-	}
-
-	if (!host->dma_active && emm_int.s.buf_done && req->data) {
-		unsigned int type = (rsp_sts.u64 >> 7) & 3;
-		if (type == 1) {
-			/* Read */
-			int dbuf = rsp_sts.s.dbuf;
-			struct sg_mapping_iter *smi = &host->smi;
-			unsigned int data_len = req->data->blksz * req->data->blocks;
-			unsigned int bytes_xfered;
-			u64 dat = 0;
-			int shift = -1;
-
-			/* Auto inc from offset zero */
-			write_csr(host->base + MIO_EMM_BUF_IDX, (u64)(0x10000 | (dbuf << 6)));
-
-			for (bytes_xfered = 0; bytes_xfered < data_len;) {
-				if (smi->consumed >= smi->length) {
-					if (!sg_miter_next(smi))
-						break;
-					smi->consumed = 0;
-				}
-				if (shift < 0) {
-					dat = read_csr(host->base + MIO_EMM_BUF_DAT);
-					shift = 56;
-				}
-
-				while (smi->consumed < smi->length && shift >= 0) {
-					((u8 *)(smi->addr))[smi->consumed] = (dat >> shift) & 0xff;
-					bytes_xfered++;
-					smi->consumed++;
-					shift -= 8;
-				}
-			}
-			sg_miter_stop(smi);
-			req->data->bytes_xfered = bytes_xfered;
-			pr_debug("%s PIO: bytes read %x\n", __FUNCTION__, bytes_xfered);
-			req->data->error = 0;
-		} else if (type == 2) {
-			/* write */
-			req->data->bytes_xfered = req->data->blksz * req->data->blocks;
-			req->data->error = 0;
-			pr_debug("%s: PIO: bytes wrote:%d\n",
-					__FUNCTION__, req->data->bytes_xfered);
-		}
-	}
-	host_done = emm_int.s.cmd_done || emm_int.s.dma_done ||
-		emm_int.s.cmd_err || emm_int.s.dma_err;
-	if (host_done && req->done) {
-		if (rsp_sts.s.rsp_bad_sts ||
-		    rsp_sts.s.rsp_crc_err ||
-		    rsp_sts.s.rsp_timeout ||
-		    rsp_sts.s.blk_crc_err ||
-		    rsp_sts.s.blk_timeout ||
-		    rsp_sts.s.dbuf_err) {
-			req->cmd->error = -EILSEQ;
-		} else {
-			req->cmd->error = 0;
-		}
-
-		if (host->dma_active && req->data) {
-			req->data->error = 0;
-			req->data->bytes_xfered = req->data->blocks * req->data->blksz;
-			if (!(req->data->flags & MMC_DATA_WRITE) && req->data->sg_len > 1) {
-				size_t r = sg_copy_from_buffer(req->data->sg, req->data->sg_len,
-						   host->linear_buf, req->data->bytes_xfered);
-				WARN_ON(r != req->data->bytes_xfered);
-				pr_debug("%s READ: copy_from_buffer bytes=%d \n",
-						__FUNCTION__, req->data->bytes_xfered);
-			}
-		}
-		if (rsp_sts.s.rsp_val) {
-			u64 rsp_hi;
-			u64 rsp_lo = read_csr(host->base + MIO_EMM_RSP_LO);
-
-			switch (rsp_sts.s.rsp_type) {
-			case 1:
-			case 3:
-				req->cmd->resp[0] = (rsp_lo >> 8) & 0xffffffff;
-				req->cmd->resp[1] = 0;
-				req->cmd->resp[2] = 0;
-				req->cmd->resp[3] = 0;
-				break;
-			case 2:
-				req->cmd->resp[3] = rsp_lo & 0xffffffff;
-				req->cmd->resp[2] = (rsp_lo >> 32) & 0xffffffff;
-				rsp_hi = read_csr(host->base + MIO_EMM_RSP_HI);
-				req->cmd->resp[1] = rsp_hi & 0xffffffff;
-				req->cmd->resp[0] = (rsp_hi >> 32) & 0xffffffff;
-				break;
-			default:
-				pr_debug("thunder_mmc_interrupt unhandled rsp_val %d\n",
-					       rsp_sts.s.rsp_type);
-				break;
-			}
-			pr_debug("%s: cmd resp [0]=%x [1]=%x [2]=%x [3]=%x\n",__FUNCTION__,
-				       req->cmd->resp[0], req->cmd->resp[1],
-				       req->cmd->resp[2], req->cmd->resp[3]);
-		}
-		if (emm_int.s.dma_err && rsp_sts.s.dma_pend) {
-			/* Try to clean up failed DMA */
-			union mio_emm_dma emm_dma;
-			emm_dma.u64 = read_csr(host->base + MIO_EMM_DMA);
-			pr_err("%s: DMA FAILED!!!!!! MIO_EMM_DMA(r) %llx\n",
-					__FUNCTION__,emm_dma.u64);
-			emm_dma.s.dma_val = 1;
-			emm_dma.s.dat_null = 1;
-			emm_dma.s.bus_id = rsp_sts.s.bus_id;
-			write_csr(host->base + MIO_EMM_DMA,
-				       emm_dma.u64);
-			host->dma_err_pending = true;
-			host_done = false;
-			goto no_req_done;
-		}
-
-		host->current_req = NULL;
-		req->done(req);
-	}
-	mb();
-no_req_done:
-	if (host_done)
-		thunder_mmc_release_bus(host);
-out:
-	if (host->need_irq_handler_lock)
-		spin_unlock_irqrestore(&host->irq_handler_lock, flags);
-	return IRQ_RETVAL(emm_int.u64 != 0);
-}
-
-static void thunder_mmc_dma_request(struct mmc_host *mmc,
-				   struct mmc_request *mrq)
-{
-	struct thunder_mmc_slot	*slot;
-	struct thunder_mmc_host	*host;
-	struct mmc_command *cmd;
-	struct mmc_data *data;
-	union mio_emm_int emm_int;
-	union mio_emm_dma emm_dma;
-	union mio_emm_dma_cfg dma_cfg;
-
-	cmd = mrq->cmd;
-	if (mrq->data == NULL || mrq->data->sg == NULL || !mrq->data->sg_len ||
-	    mrq->stop == NULL || mrq->stop->opcode != MMC_STOP_TRANSMISSION) {
-		dev_err(&mmc->card->dev,
-			"Error: thunder_mmc_dma_request no data\n");
-		cmd->error = -EINVAL;
-		if (mrq->done)
-			mrq->done(mrq);
-		return;
-	}
-
-	slot = mmc_priv(mmc);
-	host = slot->host;
-
-	/* Only a single user of the bootbus at a time. */
-	thunder_mmc_acquire_bus(host);
-
-	data = mrq->data;
-
-	if (data->timeout_ns) {
-		write_csr(host->base + MIO_EMM_WDOG,
-			       thunder_mmc_timeout_to_wdog(slot, data->timeout_ns));
-	}
-
-	WARN_ON(host->current_req);
-	host->current_req = mrq;
-
-	host->sg_idx = 0;
-
-	WARN_ON(data->blksz * data->blocks > host->linear_buf_size);
-
-	if ((data->flags & MMC_DATA_WRITE) && data->sg_len > 1) {
-		size_t r = sg_copy_to_buffer(data->sg, data->sg_len,
-			 host->linear_buf, data->blksz * data->blocks);
-		WARN_ON(data->blksz * data->blocks != r);
-		pr_debug("%s WRITE: copy to buffer bytes %d\n",
-				__FUNCTION__, data->blksz * data->blocks);
-	}
-
-	dma_cfg.u64 = 0;
-	dma_cfg.s.en = 1;
-
-	dma_cfg.s.rw = (data->flags & MMC_DATA_WRITE) ? 1 : 0;
-#ifdef __LITTLE_ENDIAN
-	dma_cfg.s.endian = 1;
-#endif
-	dma_cfg.s.size = ((data->blksz * data->blocks) / 8) - 1;
-	if (!host->big_dma_addr) {
-		if (data->sg_len > 1)
-			dma_cfg.s.adr = virt_to_phys(host->linear_buf);
-		else
-			dma_cfg.s.adr = sg_phys(data->sg);
-	}
-	write_csr(host->ndf_base + MIO_EMM_DMA_CFG, dma_cfg.u64);
-	pr_debug("%s:MIO_EMM_DMA_CFG(w): %llx\n",
-			__FUNCTION__, (unsigned long long)dma_cfg.u64);
-
-	if (host->big_dma_addr) {
-		u64 addr;
-		if (data->sg_len > 1)
-			addr = virt_to_phys(host->linear_buf);
-		else
-			addr = sg_phys(data->sg);
-		write_csr(host->ndf_base + MIO_EMM_DMA_ADR, addr);
-		pr_debug("%s: MIO_EMM_DMA_ADR(w): %llx\n",
-				__FUNCTION__, (unsigned long long)addr);
-	}
-
-	emm_dma.u64 = 0;
-	emm_dma.s.bus_id = slot->bus_id;
-	emm_dma.s.dma_val = 1;
-	emm_dma.s.sector = mmc_card_blockaddr(mmc->card) ? 1 : 0;
-	emm_dma.s.rw = (data->flags & MMC_DATA_WRITE) ? 1 : 0;
-	if (mmc_card_mmc(mmc->card) ||
-	    (mmc_card_sd(mmc->card) && (mmc->card->scr.cmds & SD_SCR_CMD23_SUPPORT)))
-		emm_dma.s.multi = 1;
-	emm_dma.s.block_cnt = data->blocks;
-	emm_dma.s.card_addr = cmd->arg;
-
-	emm_int.u64 = 0;
-	emm_int.s.dma_done = 1;
-	emm_int.s.cmd_err = 1;
-	emm_int.s.dma_err = 1;
-	/* Clear the bit. */
-	write_csr(host->base + MIO_EMM_INT, emm_int.u64);
-	write_csr(host->base + MIO_EMM_INT_EN_SET, emm_int.u64);
-	host->dma_active = true;
-
-	if (mmc->card && mmc_card_sd(mmc->card))
-		write_csr(host->base + MIO_EMM_STS_MASK, 0x00b00000ull);
-	else
-		write_csr(host->base + MIO_EMM_STS_MASK, 0xe4f90080ull);
-	pr_debug("%s: MIO_EMM_DMA(w): %llx sector %d\n",
-			__FUNCTION__, emm_dma.u64, emm_dma.s.sector);
-	write_csr(host->base + MIO_EMM_DMA, emm_dma.u64);
-	pr_debug("DMA R/W:%d\n", data->blksz * data->blocks);
-}
-
-
-static void thunder_mmc_request(struct mmc_host *mmc, struct mmc_request *mrq)
-{
-	struct thunder_mmc_slot	*slot;
-	struct thunder_mmc_host	*host;
-	struct mmc_command *cmd;
-	union mio_emm_int emm_int;
-	union mio_emm_cmd emm_cmd;
-	struct thunder_mmc_cr_mods mods;
-
-	cmd = mrq->cmd;
-
-	pr_debug("%s CMD%d\n", __FUNCTION__, cmd->opcode);
-
-	if (cmd->opcode == MMC_READ_MULTIPLE_BLOCK ||
-		cmd->opcode == MMC_WRITE_MULTIPLE_BLOCK ){
-		thunder_mmc_dma_request(mmc, mrq);
-		return;
-	}
-
-	mods = thunder_mmc_get_cr_mods(cmd);
-
-	slot = mmc_priv(mmc);
-	host = slot->host;
-
-	/* Only a single user of the bootbus at a time. */
-	thunder_mmc_acquire_bus(host);
-
-	WARN_ON(host->current_req);
-	host->current_req = mrq;
-
-	emm_int.u64 = 0;
-	emm_int.s.cmd_done = 1;
-	emm_int.s.cmd_err = 1;
-	if (cmd->data) {
-		if (cmd->data->flags & MMC_DATA_READ) {
-			sg_miter_start(&host->smi, mrq->data->sg,
-				       mrq->data->sg_len, SG_MITER_ATOMIC | SG_MITER_TO_SG);
-		} else {
-			struct sg_mapping_iter *smi = &host->smi;
-			unsigned int data_len = mrq->data->blksz * mrq->data->blocks;
-			unsigned int bytes_xfered;
-			u64 dat = 0;
-			int shift = 56;
-			/* Copy data to the xmit buffer before issuing the command */
-			sg_miter_start(smi, mrq->data->sg,
-				       mrq->data->sg_len, SG_MITER_FROM_SG);
-			/* Auto inc from offset zero, dbuf zero */
-			write_csr(host->base + MIO_EMM_BUF_IDX, 0x10000ull);
-			pr_debug("%s: MIO_EMM_BUF_IDX(w) %llx\n", __FUNCTION__, 0x10000ull);
-
-			for (bytes_xfered = 0; bytes_xfered < data_len;) {
-				if (smi->consumed >= smi->length) {
-					if (!sg_miter_next(smi))
-						break;
-					smi->consumed = 0;
-				}
-
-				while (smi->consumed < smi->length && shift >= 0) {
-					dat |= (u64)(((u8 *)(smi->addr))[smi->consumed]) << shift;
-					bytes_xfered++;
-					smi->consumed++;
-					shift -= 8;
-				}
-				if (shift < 0) {
-					write_csr(host->base + MIO_EMM_BUF_DAT, dat);
-					shift = 56;
-					dat = 0;
-				}
-			}
-			sg_miter_stop(smi);
-		}
-		if (cmd->data->timeout_ns) {
-			write_csr(host->base + MIO_EMM_WDOG,
-				       thunder_mmc_timeout_to_wdog(slot, cmd->data->timeout_ns));
-		}
-	} else {
-		write_csr(host->base + MIO_EMM_WDOG,
-			       ((u64)slot->clock * 850ull) / 1000ull);
-
-		pr_debug("%s:MIO_EMM_WDOG(r) %llu\n",__FUNCTION__,
-			       read_csr(host->base + MIO_EMM_WDOG));
-	}
-	/* Clear the bit. */
-	write_csr(host->base + MIO_EMM_INT, emm_int.u64);
-	write_csr(host->base + MIO_EMM_INT_EN_SET, emm_int.u64);
-	host->dma_active = false;
-
-	emm_cmd.u64 = 0;
-	emm_cmd.s.cmd_val = 1;
-	emm_cmd.s.ctype_xor = mods.ctype_xor;
-	emm_cmd.s.rtype_xor = mods.rtype_xor;
-	if (mmc_cmd_type(cmd) == MMC_CMD_ADTC)
-		emm_cmd.s.offset = 64 - ((cmd->data->blksz * cmd->data->blocks) / 8);
-	emm_cmd.s.bus_id = slot->bus_id;
-	emm_cmd.s.cmd_idx = cmd->opcode;
-	emm_cmd.s.arg = cmd->arg;
-	write_csr(host->base + MIO_EMM_STS_MASK, 0);
-	write_csr(host->base + MIO_EMM_CMD, emm_cmd.u64);
-	pr_debug("%s: MIO_EMM_CMD(w): %llx \n", __FUNCTION__, emm_cmd.u64);
-}
-
-static int thunder_mmc_reset_gpio(struct thunder_mmc_slot *slot)
-{
-	union mio_emm_modex emm_modex;
-	int ret;
-
-	/* Errata-26703 */
-	/* Reset the eMMC */
-	emm_modex.u64 = read_csr(slot->host->base + MIO_EMM_MODE(slot->bus_id));
-	while (emm_modex.s.clk_lo != 2500) {
-		write_csr(slot->host->base + MIO_EMM_CFG, 0x0);
-		write_csr(slot->host->base + MIO_EMM_CFG, 1ull << slot->bus_id);
-		emm_modex.u64 = read_csr(slot->host->base + MIO_EMM_MODE(slot->bus_id));
-	}
-
-	mdelay(200);
-
-	if (slot->pwr_gpio >= 0) {
-		ret = gpio_request(slot->pwr_gpio, "mmc_power");
-		if (ret) {
-			dev_err(&slot->host->pdev->dev,
-				"Could not request mmc_power GPIO %d\n",
-				slot->pwr_gpio);
-			return ret;
-		}
-
-		/* Set GPIO_BIT_CFG(8)[PIN_SEL] = GPIO_SW */
-		gpio_direction_output(slot->pwr_gpio, 0);
-		mdelay(1);
-		gpio_set_value_cansleep(slot->pwr_gpio, slot->pwr_gpio_low);
-		mdelay(200);
-		gpio_set_value_cansleep(slot->pwr_gpio, !slot->pwr_gpio_low);
-		mdelay(2);
-	}
-
-	// Enable bus
-	slot->host->emm_cfg |= 1ull << slot->bus_id;
-	write_csr(slot->host->base + MIO_EMM_CFG, slot->host->emm_cfg);
-	pr_debug("%s: MIO_EMM_CFG(w) %llx slot %d\n",
-			__FUNCTION__,slot->host->emm_cfg,slot->bus_id);
-	slot->cached_switch = 0;
-	return 0;
-}
-
-
-static void thunder_mmc_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
-{
-	struct thunder_mmc_slot	*slot;
-	struct thunder_mmc_host	*host;
-	int bus_width;
-	int clock;
-	bool ddr_clock;
-	int hs_timing;
-	int power_class = 10;
-	int clk_period;
-	int timeout = 2000;
-	union mio_emm_switch emm_switch;
-	union mio_emm_rsp_sts emm_sts;
-
-	slot = mmc_priv(mmc);
-	host = slot->host;
-
-	/* Only a single user of the bootbus at a time. */
-	thunder_mmc_acquire_bus(host);
-
-	/*
-	 * Reset the chip on each power off
-	 */
-	if (ios->power_mode == MMC_POWER_OFF)
-		thunder_mmc_reset_gpio(slot);
-
-	switch (ios->bus_width) {
-	case MMC_BUS_WIDTH_8:
-		bus_width = 2;
-		break;
-	case MMC_BUS_WIDTH_4:
-		bus_width = 1;
-		break;
-	case MMC_BUS_WIDTH_1:
-		bus_width = 0;
-		break;
-	default:
-		pr_debug("unknown bus width %d\n", ios->bus_width);
-		bus_width = 0;
-		break;
-	}
-
-	hs_timing = (ios->timing == MMC_TIMING_MMC_HS);
-	ddr_clock = (bus_width && ios->timing >= MMC_TIMING_UHS_DDR50);
-
-	if (ddr_clock) {
-		bus_width |= 4;
-		pr_debug("%s:enabled DDR, bus widht %d\n", __FUNCTION__, bus_width);
-	}
-
-	if (ios->clock) {
-		slot->clock = ios->clock;
-		slot->bus_width = bus_width;
-
-		clock = slot->clock;
-
-		if (clock > MIO_EMM_CLK_MAX)
-			clock = MIO_EMM_CLK_MAX;
-
-		clk_period = slot->sclock/(2 * clock);
-		pr_debug("%s: sclk %lld\n", __FUNCTION__,slot->sclock);
-
-		emm_switch.u64 = 0;
-		emm_switch.s.hs_timing = hs_timing;
-		emm_switch.s.bus_width = bus_width;
-		emm_switch.s.power_class = power_class;
-		emm_switch.s.clk_hi = clk_period;
-		emm_switch.s.clk_lo = clk_period;
-		emm_switch.s.bus_id = slot->bus_id;
-		pr_debug("%s: slot =%d clk_hi %x bus width %d clock %x ddr_clock %d\n"
-				,__FUNCTION__,slot->bus_id,
-				emm_switch.s.clk_hi,ios->bus_width,ios->clock,ddr_clock);
-
-		if (!thunder_mmc_switch_val_changed(slot, emm_switch.u64)) {
-			pr_debug("%s No change from 0x%llx mio_emm_switch, returning.\n",
-				       __FUNCTION__,emm_switch.u64);
-			goto out;
-		}
-
-		pr_debug("Writing 0x%llx to mio_emm_wdog\n",
-			       ((u64)clock * 850ull) / 1000ull);
-		write_csr(host->base + MIO_EMM_WDOG,
-			       ((u64)clock * 850ull) / 1000ull);
-
-		write_csr(host->base + MIO_EMM_SWITCH, emm_switch.u64);
-		slot->cached_switch = emm_switch.u64;
-		pr_debug("%s MIO_EMM_SWITCH(w): 0x%llx \n", __FUNCTION__,emm_switch.u64);
-		do {
-			emm_sts.u64 = read_csr(host->base + MIO_EMM_RSP_STS);
-			if (!emm_sts.s.switch_val){
-				pr_debug("%s SWITCHDONE\n",__FUNCTION__);
-				break;
-			}
-			udelay(100);
-		} while (timeout-- > 0);
-
-		if (timeout <= 0) {
-			pr_err("ERROR !!!!!switch command timed out, status=0x%llx\n",
-				       emm_sts.u64);
-			goto out;
-		}
-	}
-out:
-	thunder_mmc_release_bus(host);
-	return;
-}
-
-static int thunder_mmc_get_ro(struct mmc_host *mmc)
-{
-	/* no ro support*/
-	return -ENOSYS;
-}
-
-static int thunder_mmc_get_cd(struct mmc_host *mmc)
-{
-	/* no hotplug*/
-	return 1;
-}
-
-static const struct mmc_host_ops thunder_mmc_ops = {
-	.request        = thunder_mmc_request,
-	.set_ios        = thunder_mmc_set_ios,
-	.get_ro		= thunder_mmc_get_ro,
-	.get_cd		= thunder_mmc_get_cd,
-};
-
-static void thunder_mmc_set_clock(struct thunder_mmc_slot *slot,
-				 unsigned int clock)
-{
-	struct mmc_host *mmc = slot->mmc;
-	clock = min(clock, mmc->f_max);
-	clock = max(clock, mmc->f_min);
-	slot->clock = clock;
-	pr_debug("%s: clock= %llu\n", __FUNCTION__, slot->clock);
-}
-
-
-static int thunder_mmc_initlowlevel(struct thunder_mmc_slot *slot,
-				   int bus_width)
-{
-	union mio_emm_switch emm_switch;
-	struct thunder_mmc_host *host = slot->host;
-	union mio_emm_rsp_sts emm_sts;
-	int timeout = 2000;
-
-	thunder_mmc_reset_gpio(slot);
-
-	thunder_mmc_set_clock(slot, MIO_EMM_CLK_MIN);
-
-	/* Program initial clock speed and power */
-	emm_switch.u64 = 0;
-	emm_switch.s.power_class = 10;
-	emm_switch.s.clk_hi = (slot->sclock / slot->clock) / 2;
-	emm_switch.s.clk_lo = (slot->sclock / slot->clock) / 2;
-
-	emm_switch.s.bus_id = slot->bus_id;
-	write_csr(host->base + MIO_EMM_SWITCH, emm_switch.u64);
-	do {
-		emm_sts.u64 = read_csr(host->base + MIO_EMM_RSP_STS);
-		if (!emm_sts.s.switch_val) {
-			pr_debug("%s SWITCHDONE\n",__FUNCTION__);
-			break;
-		}
-		udelay(100);
-	} while (timeout-- > 0);
-
-	if (timeout <= 0) {
-		pr_err("%s:ERROR !!!!!switch command timed out, status=0x%llx\n",__FUNCTION__,
-			       emm_sts.u64);
-	}
-
-	slot->cached_switch = emm_switch.u64;
-
-	write_csr(host->base + MIO_EMM_WDOG,
-		       ((u64)slot->clock * 850ull) / 1000ull);
-	write_csr(host->base + MIO_EMM_STS_MASK, 0xe4f90080ull);
-
-	write_csr(host->base + MIO_EMM_RCA, 1);
-	pr_debug("%s: MIO_EMM_SWITCH(w) %llx clk_hi 0x%x slot %d\n",
-			__FUNCTION__,emm_switch.u64, emm_switch.s.clk_hi, slot->bus_id);
-	return 0;
-}
-
-static u64 get_sclk(void)
-{
-	u64 sclk;
-	int ref_clk = MIO_EMM_REF_CLK;
-	void __iomem	*rst_boot_va;
-
-	rst_boot_va = ioremap(RST_BOOT_PA, 0x10);
-	sclk = read_csr(rst_boot_va);
-	sclk = (sclk >> 33) & 0x3f;
-	sclk = sclk * ref_clk;
-
-	pr_debug("SCLK: %lld\n",sclk);
-	return sclk;
-}
-
-static int __init thunder_mmc_init_slot(struct thunder_mmc_host *host, int slot_id,
-					int bus_width, int max_freq,
-					int ro_gpio, int cd_gpio, int pwr_gpio,
-					bool ro_low, bool cd_low, bool power_low,
-					u32 cmd_skew, u32 dat_skew)
-{
-	struct mmc_host *mmc;
-	struct thunder_mmc_slot *slot;
-	int ret;
-
-	/*
-	 * Allocate MMC structue
-	 */
-	mmc = mmc_alloc_host(sizeof(struct thunder_mmc_slot), &host->pdev->dev);
-	if (!mmc) {
-		dev_err(&host->pdev->dev, "alloc host failed\n");
-		return -ENOMEM;
-	}
-
-	slot = mmc_priv(mmc);
-	slot->mmc = mmc;
-	slot->host = host;
-	slot->ro_gpio = ro_gpio;
-	slot->cd_gpio = cd_gpio;
-	slot->pwr_gpio = pwr_gpio;
-	slot->ro_gpio_low = ro_low;
-	slot->cd_gpio_low = cd_low;
-	slot->pwr_gpio_low = power_low;
-
-	/*
-	 * Set up host parameters.
-	 */
-	mmc->ops = &thunder_mmc_ops;
-	mmc->f_min = MIO_EMM_CLK_MIN;
-	mmc->f_max = max_freq;
-	mmc->caps = MMC_CAP_MMC_HIGHSPEED | MMC_CAP_SD_HIGHSPEED |
-		    MMC_CAP_8_BIT_DATA | MMC_CAP_4_BIT_DATA |
-		    MMC_CAP_ERASE;
-	mmc->ocr_avail = MMC_VDD_27_28 | MMC_VDD_28_29 | MMC_VDD_29_30 |
-			 MMC_VDD_30_31 | MMC_VDD_31_32 | MMC_VDD_32_33 |
-			 MMC_VDD_33_34 | MMC_VDD_34_35 | MMC_VDD_35_36;
-
-	/* "1.8v" capability is actually 1.8-or-3.3v */
-	if (ddr)
-		mmc->caps |= MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR;
-
-	mmc->max_segs = 64;
-	mmc->max_seg_size = host->linear_buf_size;
-	mmc->max_req_size = host->linear_buf_size;
-	mmc->max_blk_size = MIO_EMM_BLK_SIZE;
-	mmc->max_blk_count = mmc->max_req_size / MIO_EMM_BLK_SIZE;
-
-	slot->clock = mmc->f_min;
-	slot->sclock = get_sclk();
-
-	slot->bus_width = bus_width;
-	slot->bus_id = slot_id;
-	slot->cached_rca = 1;
-
-	/* Only a single user of the bootbus at a time. */
-	thunder_mmc_acquire_bus(host);
-	host->slot[slot_id] = slot;
-
-	/* Initialize MMC Block. */
-	thunder_mmc_initlowlevel(slot, bus_width);
-
-	thunder_mmc_release_bus(host);
-
-	ret = mmc_add_host(mmc);
-	pr_debug("%s: MMC Host added for slot=%d ret=%d\n", __FUNCTION__, slot_id, ret);
-
-	return ret;
-}
-
-static int thunder_mmc_register_interrupts(struct thunder_mmc_host *mmc_host)
-{
-	int i, ret;
-
-	mmc_host->msix_count = pci_msix_vec_count(mmc_host->pdev);
-
-	mmc_host->mmc_msix = kmalloc((sizeof(struct msix_entry)) * mmc_host->msix_count,
-                                GFP_KERNEL);
-	if (!mmc_host->mmc_msix) {
-                dev_err(&mmc_host->pdev->dev,
-				"Failed to allocate MSI-X entries\n");
-                return -ENOMEM;
-        }
-
-	for (i = 0; i < mmc_host->msix_count; i++) {
-		mmc_host->mmc_msix[i].entry = i;
-		mmc_host->mmc_msix[i].vector = 0;
-	}
-
-	/* Enable MSI-X */
-	ret = pci_enable_msix(mmc_host->pdev,
-			mmc_host->mmc_msix, mmc_host->msix_count);
-	if (ret) {
-		dev_err(&mmc_host->pdev->dev,
-				"Request for #%d msix vectors failed\n",
-				mmc_host->msix_count);
-		return ret;
-	}
-
-	/* register interrupts */
-	for (i = 0; i < mmc_host->msix_count; i++) {
-		ret = request_irq(mmc_host->mmc_msix[i].vector,
-				thunder_mmc_interrupt,
-				0, DRV_NAME, mmc_host);
-		if (ret)
-			goto disable_msix;
-	}
-
-	return 0;
-
-disable_msix:
-	dev_err(&mmc_host->pdev->dev, "register interrupts failed\n");
-	pci_disable_msix(mmc_host->pdev);
-
-	for (i = 0; i < mmc_host->msix_count; i++) {
-		free_irq(mmc_host->mmc_msix[i].vector, mmc_host);
-	}
-
-	return ret;
-}
-
-static int thunder_mmc_probe(struct pci_dev *pdev, const struct pci_device_id *id)
-{
-	int err;
-	uint64_t val;
-	struct device *dev = &pdev->dev;
-	struct thunder_mmc_host *mmc_host;
-	u32 slot = 0;
-	int ro_gpio, cd_gpio, pwr_gpio;
-	bool ro_low, cd_low, pwr_low;
-	u32 bus_width, max_freq, cmd_skew, dat_skew;
-
-	mmc_host = devm_kzalloc(dev, sizeof(struct thunder_mmc_host *), GFP_KERNEL);
-	if (!mmc_host)
-		return -ENOMEM;
-
-	pr_debug("%s:\n", __FUNCTION__);
-	mmc_host->pdev = pdev;
-	pci_set_drvdata(pdev, mmc_host);
-
-	err = pci_enable_device(pdev);
-	if (err) {
-		dev_err(dev, "Failed to enable PCI device: err %d\n", err);
-		pci_set_drvdata(pdev, NULL);
-		goto err;
-	}
-
-	err = pci_request_regions(pdev, DRV_NAME);
-	if (err) {
-		dev_err(dev, "PCI request regions failed: err %d\n", err);
-		goto err_disable_device;
-	}
-
-	mmc_host->base = ioremap(pci_resource_start(pdev, 0),
-			pci_resource_len(pdev, 0));
-	if (!mmc_host->base) {
-		dev_err(dev, "Cannot map PCI resource, aborting\n");
-		err = -ENOMEM;
-		goto err_release_regions;
-	}
-
-	spin_lock_init(&mmc_host->irq_handler_lock);
-	sema_init(&mmc_host->mmc_serializer, 1);
-
-	mmc_host->need_bootbus_lock = false;
-	mmc_host->big_dma_addr = true;
-	mmc_host->need_irq_handler_lock = true;
-
-	mmc_host->last_slot = -1;
-
-	if (bb_size < MIO_EMM_BLK_SIZE || bb_size >= (1 << 24))
-		bb_size = 1 << 22;
-
-	mmc_host->linear_buf_size = bb_size;
-	mmc_host->linear_buf = devm_kzalloc(dev, mmc_host->linear_buf_size, GFP_KERNEL);
-	if(!mmc_host->linear_buf) {
-		dev_err(dev, "Linear buffer allocation failed\n");
-		goto err_unmap;
-	}
-
-	mmc_host->ndf_base = (u64)mmc_host->base;
-
-	/* Clear any pending interrupts that maybe leftover
-	 * from bootloader
-	 */
-	val = readq_relaxed(mmc_host->base + MIO_EMM_INT);
-	writeq_relaxed(0x0, mmc_host->base + MIO_EMM_INT_SET);
-
-	if(thunder_mmc_register_interrupts(mmc_host)) {
-		dev_err(dev, "failed to register MSI-X interrupts\n");
-		goto err_free;
-	}
-
-	/* FIXME: hardcoding values for now */
-	mmc_host->global_pwr_gpio = -1;
-	mmc_host->global_pwr_gpio_low = 0;
-
-	/* FIXME: enabling only for slot 0 for now */
-	for(slot = 0; slot<1; slot++)
-	{
-		bus_width = 8;
-		cmd_skew = 0;
-		dat_skew = 0;
-
-		max_freq = MIO_EMM_CLK_MAX;
-		ro_gpio = -ENOSYS;
-		ro_low = 0;
-		cd_gpio = -ENOSYS;
-		cd_low = 0;
-		pwr_gpio = 8;
-		pwr_low = 0;
-		pr_debug("%s: init slot for Slot=%d ,freq=%d, bwidth=%d \n",
-				__FUNCTION__, slot,max_freq,bus_width);
-		err = thunder_mmc_init_slot(mmc_host, slot, bus_width,
-					    max_freq, ro_gpio, cd_gpio,
-					    pwr_gpio, ro_low, cd_low,
-					    pwr_low, cmd_skew, dat_skew);
-		if(err)
-			goto err_free;
-	}
-
-	pr_debug("%s: done\n", __FUNCTION__);
-	return 0;
-
-err_free:
-	if(mmc_host->linear_buf)
-		devm_kfree(dev, mmc_host->linear_buf);
-err_unmap:
-	iounmap(mmc_host->base);
-err_release_regions:
-	pci_release_regions(pdev);
-err_disable_device:
-	pci_disable_device(pdev);
-	pci_set_drvdata(pdev, NULL);
-err:
-	devm_kfree(dev, mmc_host);
-
-	return err;
-}
-
-static void thunder_mmc_remove(struct pci_dev *pdev)
-{
-	struct thunder_mmc_host *mmc_host = pci_get_drvdata(pdev);
-	int i;
-
-	if(mmc_host) {
-		if(mmc_host->linear_buf)
-			devm_kfree(&pdev->dev, mmc_host->linear_buf);
-		if (mmc_host->base)
-			iounmap(mmc_host->base);
-
-		for (i = 0; i < mmc_host->msix_count; i++)
-			free_irq(mmc_host->mmc_msix[i].vector, mmc_host);
-
-		pci_disable_msix(pdev);
-
-		devm_kfree(&pdev->dev, mmc_host);
-		pci_release_regions(pdev);
-		pci_set_drvdata(pdev, NULL);
-		pci_disable_device(pdev);
-	}
-}
-
-
-static const struct pci_device_id thunder_mmc_id_table[] = {
-	{ PCI_DEVICE(PCI_VENDOR_ID_CAVIUM, PCI_DEVICE_ID_THUNDER_MIO_EMM) },
-	{ 0, }  /* end of table */
-};
-
-MODULE_AUTHOR("Cavium Inc");
-MODULE_DESCRIPTION("Cavium Thunderx eMMC Driver");
-MODULE_LICENSE("GPL v2");
-MODULE_VERSION(DRV_VERSION);
-MODULE_DEVICE_TABLE(pci, thunder_mmc_id_table);
-
-static struct pci_driver thunder_mmc_driver = {
-	.name = DRV_NAME,
-	.id_table = thunder_mmc_id_table,
-	.probe = thunder_mmc_probe,
-	.remove = thunder_mmc_remove,
-};
-
-static int __init thunder_mmc_init_module(void)
-{
-	pr_info("%s, ver %s\n", DRV_NAME, DRV_VERSION);
-	return pci_register_driver(&thunder_mmc_driver);
-}
-
-static void __exit thunder_mmc_cleanup_module(void)
-{
-	pci_unregister_driver(&thunder_mmc_driver);
-}
-
-module_init(thunder_mmc_init_module);
-module_exit(thunder_mmc_cleanup_module);
diff --git a/drivers/mmc/host/thunderx-mmc.h b/drivers/mmc/host/thunderx-mmc.h
deleted file mode 100644
index ea0c599..0000000
--- a/drivers/mmc/host/thunderx-mmc.h
+++ /dev/null
@@ -1,242 +0,0 @@
-/*
- * Copyright (C) 2016 Cavium, Inc.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of version 2 of the GNU General Public License
- * as published by the Free Software Foundation.
- */
-
-
-#define MAX_MMC_SLOTS		2
-
-#define MIO_EMM_DMA_CFG		0x180
-#define MIO_EMM_DMA_ADR		0x188
-
-#define MIO_EMM_CFG		0x2000
-#define MIO_EMM_MODE(a)		(0x2008 + (a * 0x8))
-#define MIO_EMM_SWITCH		0x2048
-#define MIO_EMM_DMA		0x2050
-#define MIO_EMM_CMD		0x2058
-#define MIO_EMM_RSP_STS		0x2060
-#define MIO_EMM_RSP_LO		0x2068
-#define MIO_EMM_RSP_HI		0x2070
-#define MIO_EMM_INT		0x2078
-#define MIO_EMM_INT_SET		0x2080
-#define MIO_EMM_WDOG		0x2088
-#define MIO_EMM_SAMPLE		0x2090
-#define MIO_EMM_STS_MASK	0x2098
-#define MIO_EMM_RCA		0x20a0
-#define MIO_EMM_INT_EN_SET	0x20b0
-#define MIO_EMM_INT_EN_CLR	0x20b8
-#define MIO_EMM_BUF_IDX		0x20e0
-#define MIO_EMM_BUF_DAT		0x20e8
-
-//min-clk 400khz, max-clk 52MHZ and ref-clk 50MHZ
-#define MIO_EMM_REF_CLK		50000000
-#define MIO_EMM_CLK_MIN		400000
-#define MIO_EMM_CLK_MAX		52000000
-#define MIO_EMM_BLK_SIZE	512
-#define RST_BOOT_PA		0x87e006001600ll
-
-struct thunder_mmc_host {
-	struct pci_dev		*pdev;
-	void __iomem	*base;
-	u64		ndf_base;
-	u64		emm_cfg;
-	u64		n_minus_one;  /* thunder II workaround location */
-	int		last_slot;
-
-	struct semaphore	mmc_serializer;
-	struct mmc_request	*current_req;
-	unsigned int		linear_buf_size;
-	void			*linear_buf;
-	struct sg_mapping_iter	smi;
-	int			sg_idx;
-	bool			dma_active;
-
-	int			global_pwr_gpio;
-	bool			global_pwr_gpio_low;
-	bool			dma_err_pending;
-	bool			need_bootbus_lock;
-	bool			big_dma_addr;
-	bool			need_irq_handler_lock;
-	spinlock_t		irq_handler_lock;
-	struct msix_entry	*mmc_msix;
-	unsigned int		msix_count;
-
-	struct thunder_mmc_slot	*slot[MAX_MMC_SLOTS];
-};
-
-struct thunder_mmc_slot {
-	struct mmc_host         *mmc;	/* slot-level mmc_core object */
-	struct thunder_mmc_host	*host;	/* common hw for all 4 slots */
-
-	uint64_t		clock;
-	uint64_t		sclock;
-
-	u64			cached_switch;
-	u64			cached_rca;
-
-	unsigned int		cmd_cnt; /* sample delay */
-	unsigned int		dat_cnt; /* sample delay */
-
-	int			bus_width;
-	int			bus_id;
-	int			ro_gpio;
-	int			cd_gpio;
-	int			pwr_gpio;
-	bool			cd_gpio_low;
-	bool			ro_gpio_low;
-	bool			pwr_gpio_low;
-};
-
-typedef union mio_emm_cfg {
-	uint64_t	u64;
-	struct mio_emm_cfg_s {
-		uint64_t bus_ena	: 4;
-		uint64_t reserved_4_15	: 12;
-		uint64_t reserved_17_63	: 47;
-	} s;
-} mio_emm_cfg_t;
-
-typedef union mio_emm_modex {
-	uint64_t	u64;
-	struct mio_emm_modex_s {
-		uint64_t clk_lo		: 16;
-		uint64_t clk_hi		: 16;
-		uint64_t power_class	: 4;
-		uint64_t reserved_36_39	: 4;
-		uint64_t bus_width	: 3;
-		uint64_t reserved_43_47	: 5;
-		uint64_t hs_timing	: 1;
-		uint64_t reserved_49_63	: 15;
-	} s;
-} mio_emm_modex_t;
-
-typedef union mio_emm_int {
-	uint64_t	u64;
-	struct mio_emm_int_s {
-		uint64_t buf_done	: 1;
-		uint64_t cmd_done	: 1;
-		uint64_t dma_done	: 1;
-		uint64_t cmd_err	: 1;
-		uint64_t dma_err	: 1;
-		uint64_t switch_done	: 1;
-		uint64_t switch_err	: 1;
-		uint64_t reserved_7_63	: 57;
-	} s;
-} mio_emm_int_t;
-
-typedef union mio_emm_dma {
-	uint64_t u64;
-	struct mio_emm_dma_s {
-		uint64_t card_addr	: 32;
-		uint64_t block_cnt	: 16;
-		uint64_t multi		: 1;
-		uint64_t rw		: 1;
-		uint64_t rel_wr		: 1;
-		uint64_t thres		: 6;
-		uint64_t dat_null	: 1;
-		uint64_t sector		: 1;
-		uint64_t dma_val	: 1;
-		uint64_t bus_id		: 2;
-		uint64_t skip_busy	: 1;
-		uint64_t reserved_63_63	: 1;
-	} s;
-} mio_emm_dma_t;
-
-union mio_emm_dma_cfg {
-	uint64_t u64;
-	struct mio_emm_dma_cfg_s {
-		uint64_t adr		: 36;
-		uint64_t size		: 20;
-		uint64_t endian		: 1;
-		uint64_t swap8		: 1;
-		uint64_t swap16		: 1;
-		uint64_t swap32		: 1;
-		uint64_t reserved_60_60	: 1;
-		uint64_t clr		: 1;
-		uint64_t rw		: 1;
-		uint64_t en		: 1;
-	} s;
-} mio_emm_dma_cfg_t;
-
-union mio_emm_cmd {
-	uint64_t u64;
-	struct mio_emm_cmd_s {
-		uint64_t arg		: 32;
-		uint64_t cmd_idx	: 6;
-		uint64_t rtype_xor	: 3;
-		uint64_t ctype_xor	: 2;
-		uint64_t reserved_43_48	: 6;
-		uint64_t offset		: 6;
-		uint64_t dbuf		: 1;
-		uint64_t reserved_56_58	: 3;
-		uint64_t cmd_val	: 1;
-		uint64_t bus_id		: 2;
-		uint64_t skip_busy	: 1;
-		uint64_t reserved_63_63	: 1;
-	} s;
-} mio_emm_cmd_t;
-
-union mio_emm_switch {
-	uint64_t u64;
-	struct mio_emm_switch_s {
-		uint64_t clk_lo		: 16;
-		uint64_t clk_hi		: 16;
-		uint64_t power_class	: 4;
-		uint64_t reserved_36_39	: 4;
-		uint64_t bus_width	: 3;
-		uint64_t reserved_43_47	: 5;
-		uint64_t hs_timing	: 1;
-		uint64_t reserved_49_55	: 7;
-		uint64_t switch_err2	: 1;
-		uint64_t switch_err1	: 1;
-		uint64_t switch_err0	: 1;
-		uint64_t switch_exe	: 1;
-		uint64_t bus_id		: 2;
-		uint64_t reserved_62_63	: 2;
-	} s;
-} mio_emm_switch_t;
-
-union mio_emm_rsp_sts {
-	uint64_t u64;
-	struct mio_emm_rsp_sts_s {
-		uint64_t cmd_done	: 1;
-		uint64_t cmd_idx	: 6;
-		uint64_t cmd_type	: 2;
-		uint64_t rsp_type	: 3;
-		uint64_t rsp_val	: 1;
-		uint64_t rsp_bad_sts	: 1;
-		uint64_t rsp_crc_err	: 1;
-		uint64_t rsp_timeout	: 1;
-		uint64_t stp_val	: 1;
-		uint64_t stp_bad_sts	: 1;
-		uint64_t stp_crc_err	: 1;
-		uint64_t stp_timeout	: 1;
-		uint64_t rsp_busybit	: 1;
-		uint64_t blk_crc_err	: 1;
-		uint64_t blk_timeout	: 1;
-		uint64_t dbuf		: 1;
-		uint64_t reserved_24_27	: 4;
-		uint64_t dbuf_err	: 1;
-		uint64_t reserved_29_54	: 26;
-		uint64_t acc_timeout	: 1;
-		uint64_t dma_pend	: 1;
-		uint64_t dma_val	: 1;
-		uint64_t switch_val	: 1;
-		uint64_t cmd_val	: 1;
-		uint64_t bus_id		: 2;
-		uint64_t reserved_62_63	: 2;
-	} s;
-} mio_emm_rsp_sts_t;
-
-union mio_emm_sample {
-	uint64_t u64;
-	struct mio_emm_sample_s {
-		uint64_t dat_cnt	: 10;
-		uint64_t reserved_10_15	: 6;
-		uint64_t cmd_cnt	: 10;
-		uint64_t reserved_26_63	: 38;
-	} s;
-} mio_emm_sample_t;
-- 
2.0.2

