From bd2389f12af9239e8216e3180517927740a8613a Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Date: Fri, 26 Aug 2016 15:42:53 -0700
Subject: [PATCH 39/56] EDAC: Rework ThunderX support to use the new reporting
 policy

This patch comes from Cavium online SDK OCTEONTX-SDK-6.1.0-PR.

It changes the EDAC driver to decode interrupt registers and report errors
according to the new policy

Signed-off-by: Sergey Temerkhanov <s.temerkhanov@gmail.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/edac/thunderx_edac.c | 586 ++++++++++++++++++++++++++++++++++---------
 1 file changed, 474 insertions(+), 112 deletions(-)

diff --git a/drivers/edac/thunderx_edac.c b/drivers/edac/thunderx_edac.c
index 894c506..df8f5e4 100644
--- a/drivers/edac/thunderx_edac.c
+++ b/drivers/edac/thunderx_edac.c
@@ -23,6 +23,45 @@
 #include "edac_core.h"
 #include "edac_module.h"
 
+#define STRINGIFY(x) #x
+
+enum {
+	ERR_CORRECTED	= 1,
+	ERR_UNCORRECTED	= 2,
+	ERR_UNKNOWN	= 3,
+};
+
+struct error_descr {
+	int	type;
+	u64	mask;
+	char	*descr;
+};
+
+int decode_register(char *str, size_t size,
+		    const struct error_descr *descr,
+		    const uint64_t reg)
+{
+	int ret = 0;
+
+	*str = '\n';
+	str++;
+	size--;
+	*str = '\0';
+
+	while (descr->type && descr->mask && descr->descr) {
+		if (reg & descr->mask) {
+			ret = snprintf(str, size, "\t%s, %s\n",
+					descr->type == ERR_CORRECTED ?
+					"Corrected" : "Uncorrected",
+					descr->descr);
+			str += ret;
+			size -= ret;
+		}
+		descr++;
+	}
+
+	return ret;
+}
 
 #define PCI_DEVICE_ID_THUNDER_LMC 0xa022
 
@@ -45,24 +84,33 @@
 
 #define LMC_INT			0x1F0
 
-#define LMC_INT_MACRAM_DED_ERR	BIT(13)
-#define LMC_INT_MACRAM_SEC_ERR	BIT(12)
 #define LMC_INT_DDR_ERR		BIT(11)
-#define LMC_INT_DLCRAM_DED_ERR	BIT(10)
-#define LMC_INT_DLCRAM_SEC_ERR	BIT(9)
-#define LMC_INT_DED_ERR		(0xf << 5)
-#define LMC_INT_SEC_ERR		(0xf << 1)
+#define LMC_INT_DED_ERR		(0xFUL << 5)
 #define LMC_INT_NXM_WR_MASK	BIT(0)
 
-#define LMC_INT_UNCORR		(LMC_INT_MACRAM_DED_ERR | LMC_INT_DDR_ERR | \
-				 LMC_INT_DLCRAM_DED_ERR | LMC_INT_DED_ERR)
-
-#define LMC_INT_CORR		(LMC_INT_MACRAM_SEC_ERR | \
-				 LMC_INT_DLCRAM_SEC_ERR | LMC_INT_SEC_ERR)
+#define LMC_INT_UE              (LMC_INT_DDR_ERR | LMC_INT_DED_ERR | \
+				 LMC_INT_NXM_WR_MASK)
 
-#define LMC_INT_UNKNOWN		(~0ULL - (LMC_INT_UNCORR | LMC_INT_CORR))
+#define LMC_INT_CE		(0)
 
-#define LMC_INT_EN		0x1E8
+static const struct error_descr lmc_errors[] = {
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = LMC_INT_DDR_ERR,
+		.descr = STRINGIFY(LMC_INT_DDR_ERR),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = LMC_INT_DED_ERR,
+		.descr = STRINGIFY(LMC_INT_DED_ERR),
+	},
+	{
+		.type = ERR_UNCORRECTED,
+		.mask = LMC_INT_NXM_WR_MASK,
+		.descr = STRINGIFY(LMC_INT_NXM_WR_MASK),
+	},
+	{0, 0, NULL},
+};
 
 #define LMC_INT_EN_DDR_ERROR_ALERT_ENA	BIT(5)
 #define LMC_INT_EN_DLCRAM_DED_ERR	BIT(4)
@@ -141,9 +189,9 @@ struct thunderx_lmc {
 	u64 parity_test;
 	u64 node;
 	struct page *mem;
-	char buf[64];
-	char msg[64];
-	char other[64];
+	char buf[PAGE_SIZE];
+	char msg[PAGE_SIZE];
+	char other[PAGE_SIZE];
 };
 
 #define DEBUGFS_STRUCT(_name, _mode, _write, _read)			    \
@@ -376,7 +424,6 @@ static irqreturn_t thunderx_lmc_err_isr(int irq, void *dev_id)
 {
 	struct mem_ctl_info *mci = dev_id;
 	struct thunderx_lmc *lmc = mci->pvt_info;
-	char msg[64], other[64];
 
 	u64 lmc_int, lmc_fadr, lmc_nxm_fadr,
 	    lmc_scram_fadr, lmc_ecc_synd;
@@ -402,34 +449,21 @@ static irqreturn_t thunderx_lmc_err_isr(int irq, void *dev_id)
 	dev_dbg(&lmc->pdev->dev, "LMC_SCRAM_FADR: %016llx\n", lmc_scram_fadr);
 	dev_dbg(&lmc->pdev->dev, "LMC_ECC_SYND: %016llx\n", lmc_ecc_synd);
 
-	snprintf(msg, sizeof(msg),
+	snprintf(lmc->msg, sizeof(lmc->msg),
 		 "DIMM %lld rank %lld bank %lld row %lld col %lld",
 		 LMC_FADR_FDIMM(lmc_fadr), LMC_FADR_FBUNK(lmc_fadr),
 		 LMC_FADR_FBANK(lmc_fadr), LMC_FADR_FROW(lmc_fadr),
 		 LMC_FADR_FCOL(lmc_fadr));
 
-	snprintf(other, sizeof(other),
-		 "%s%s%s%s",
-		 lmc_int & (LMC_INT_DLCRAM_DED_ERR | LMC_INT_DLCRAM_SEC_ERR) ?
-			"DLC " : "",
-		 lmc_int & (LMC_INT_MACRAM_DED_ERR | LMC_INT_MACRAM_SEC_ERR) ?
-			"MAC " : "",
-		 lmc_int & (LMC_INT_DDR_ERR) ?
-			"DDR " : "",
-		 lmc_int & (LMC_INT_UNKNOWN) ?
-			"Unknown" : "");
-
-	if (lmc_int & LMC_INT_CORR)
-		edac_mc_handle_error(HW_EVENT_ERR_CORRECTED, mci, 1, 0, 0, 0,
-				     -1, -1, -1, msg, other);
+	decode_register(lmc->other, sizeof(lmc->other),
+			lmc_errors, lmc_int);
 
-	if (lmc_int & LMC_INT_UNCORR)
+	if (lmc_int & LMC_INT_UE)
 		edac_mc_handle_error(HW_EVENT_ERR_UNCORRECTED, mci, 1, 0, 0, 0,
-				     -1, -1, -1, msg, other);
-
-	if (lmc_int & LMC_INT_UNKNOWN)
-		edac_mc_handle_error(HW_EVENT_ERR_INFO, mci, 1, 0, 0, 0,
-				     -1, -1, -1, msg, other);
+				     -1, -1, -1, lmc->msg, lmc->other);
+	else if (lmc_int & LMC_INT_CE)
+		edac_mc_handle_error(HW_EVENT_ERR_CORRECTED, mci, 1, 0, 0, 0,
+				     -1, -1, -1, lmc->msg, lmc->other);
 
 	return IRQ_HANDLED;
 }
@@ -523,7 +557,7 @@ static int thunderx_lmc_probe(struct pci_dev *pdev,
 
 	mci->mod_name = "thunderx-lmc";
 	mci->mod_ver = "1";
-	mci->ctl_name = "thunderx-lmc-err";
+	mci->ctl_name = "thunderx-lmc";
 	mci->dev_name = dev_name(&pdev->dev);
 	mci->scrub_mode = SCRUB_NONE;
 
@@ -553,7 +587,6 @@ static int thunderx_lmc_probe(struct pci_dev *pdev,
 	lmc_int = readq(lmc->regs + LMC_INT);
 	writeq(lmc_int, lmc->regs + LMC_INT);
 
-	writeq(LMC_INT_EN_ALL, lmc->regs + LMC_INT_EN);
 	writeq(LMC_INT_ENA_ALL, lmc->regs + LMC_INT_ENA_W1S);
 
 	lmc->node = (pci_resource_start(pdev, 0) >> 44) & 0x3;
@@ -580,7 +613,6 @@ static void thunderx_lmc_remove(struct pci_dev *pdev)
 	struct mem_ctl_info *mci = pci_get_drvdata(pdev);
 	struct thunderx_lmc *lmc = mci->pvt_info;
 
-	writeq(0, lmc->regs + LMC_INT_EN);
 	writeq(LMC_INT_ENA_ALL, lmc->regs + LMC_INT_ENA_W1C);
 
 	if (lmc->debugfs)
@@ -645,9 +677,9 @@ static struct edac_dev_sysfs_attribute thunderx_ctl_attrs[] = {
 };
 
 
-/*---------------------- CCPI driver ---------------------------------*/
+/*---------------------- OCX driver ---------------------------------*/
 
-#define PCI_DEVICE_ID_THUNDER_OCX 0xa013
+#define PCI_DEVICE_ID_THUNDER_OCX	0xa013
 
 #define OCX_LINK_INTS		3
 #define OCX_INTS		(OCX_LINK_INTS + 1)
@@ -659,21 +691,203 @@ static struct edac_dev_sysfs_attribute thunderx_ctl_attrs[] = {
 #define OCX_COM_INT_ENA_W1S	0x110
 #define OCX_COM_INT_ENA_W1C	0x118
 
+#define OCX_COM_IO_BADID		BIT(54)
+#define OCX_COM_MEM_BADID		BIT(53)
+#define OCX_COM_COPR_BADID		BIT(52)
+#define OCX_COM_WIN_REQ_BADID		BIT(51)
+#define OCX_COM_WIN_REQ_TOUT		BIT(50)
+#define OCX_COM_RX_LANE			(BIT(24) - 1)
+
+#define OCX_COM_INT_UE			(0)
+
+#define OCX_COM_INT_CE			(OCX_COM_IO_BADID      | \
+					 OCX_COM_MEM_BADID     | \
+					 OCX_COM_COPR_BADID    | \
+					 OCX_COM_WIN_REQ_BADID | \
+					 OCX_COM_WIN_REQ_TOUT)
+
+static const struct error_descr ocx_com_errors[] = {
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_IO_BADID,
+		.descr = STRINGIFY(OCX_COM_IO_BADID),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_MEM_BADID,
+		.descr = STRINGIFY(OCX_COM_MEM_BADID),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_COPR_BADID,
+		.descr = STRINGIFY(OCX_COM_COPR_BADID),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_WIN_REQ_BADID,
+		.descr = STRINGIFY(OCX_COM_WIN_REQ_BADID),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_WIN_REQ_TOUT,
+		.descr = STRINGIFY(OCX_COM_WIN_REQ_TOUT),
+	},
+	{0, 0, NULL},
+};
+
 #define OCX_COM_LINKX_INT(x)		(0x120 + (x) * 8)
 #define OCX_COM_LINKX_INT_W1S(x)	(0x140 + (x) * 8)
 #define OCX_COM_LINKX_INT_ENA_W1S(x)	(0x160 + (x) * 8)
 #define OCX_COM_LINKX_INT_ENA_W1C(x)	(0x180 + (x) * 8)
 
+#define OCX_COM_LINK_BAD_WORD			BIT(13)
+#define OCX_COM_LINK_ALIGN_FAIL			BIT(12)
+#define OCX_COM_LINK_ALIGN_DONE			BIT(11)
+#define OCX_COM_LINK_UP				BIT(10)
+#define OCX_COM_LINK_STOP			BIT(9)
+#define OCX_COM_LINK_BLK_ERR			BIT(8)
+#define OCX_COM_LINK_REINIT			BIT(7)
+#define OCX_COM_LINK_LNK_DATA			BIT(6)
+#define OCX_COM_LINK_RXFIFO_DBE			BIT(5)
+#define OCX_COM_LINK_RXFIFO_SBE			BIT(4)
+#define OCX_COM_LINK_TXFIFO_DBE			BIT(3)
+#define OCX_COM_LINK_TXFIFO_SBE			BIT(2)
+#define OCX_COM_LINK_REPLAY_DBE			BIT(1)
+#define OCX_COM_LINK_REPLAY_SBE			BIT(0)
+
+static const struct error_descr ocx_com_link_errors[] = {
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_LINK_REPLAY_SBE,
+		.descr = STRINGIFY(OCX_COM_LINK_REPLAY_SBE),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_LINK_TXFIFO_SBE,
+		.descr = STRINGIFY(OCX_COM_LINK_TXFIFO_SBE),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_LINK_RXFIFO_SBE,
+		.descr = STRINGIFY(OCX_COM_LINK_RXFIFO_SBE),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_LINK_BLK_ERR,
+		.descr = STRINGIFY(OCX_COM_LINK_BLK_ERR),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_LINK_ALIGN_FAIL,
+		.descr = STRINGIFY(OCX_COM_LINK_ALIGN_FAIL),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_COM_LINK_BAD_WORD,
+		.descr = STRINGIFY(OCX_COM_LINK_BAD_WORD),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = OCX_COM_LINK_REPLAY_DBE,
+		.descr = STRINGIFY(OCX_COM_LINK_REPLAY_DBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = OCX_COM_LINK_TXFIFO_DBE,
+		.descr = STRINGIFY(OCX_COM_LINK_TXFIFO_DBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = OCX_COM_LINK_RXFIFO_DBE,
+		.descr = STRINGIFY(OCX_COM_LINK_RXFIFO_DBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = OCX_COM_LINK_STOP,
+		.descr = STRINGIFY(OCX_COM_LINK_STOP),
+	},
+	{0, 0, NULL},
+};
+
+#define OCX_COM_LINK_INT_UE       (OCX_COM_LINK_REPLAY_DBE | \
+				   OCX_COM_LINK_TXFIFO_DBE | \
+				   OCX_COM_LINK_RXFIFO_DBE | \
+				   OCX_COM_LINK_STOP)
+
+#define OCX_COM_LINK_INT_CE       (OCX_COM_LINK_REPLAY_SBE | \
+				   OCX_COM_LINK_TXFIFO_SBE | \
+				   OCX_COM_LINK_RXFIFO_SBE | \
+				   OCX_COM_LINK_BLK_ERR    | \
+				   OCX_COM_LINK_ALIGN_FAIL | \
+				   OCX_COM_LINK_BAD_WORD)
+
 #define OCX_LNE_INT(x)			(0x8018 + (x) * 0x100)
 #define OCX_LNE_INT_EN(x)		(0x8020 + (x) * 0x100)
 #define OCX_LNE_BAD_CNT(x)		(0x8028 + (x) * 0x100)
 #define OCX_LNE_CFG(x)			(0x8000 + (x) * 0x100)
 #define OCX_LNE_STAT(x, y)		(0x8040 + (x) * 0x100 + (y) * 8)
 
-#define OCX_LNE_CFG_RX_BDRY_LOCK_DIS	BIT(8)
-#define OCX_LNE_CFG_RX_STAT_WRAP_DIS	BIT(2)
-#define OCX_LNE_CFG_RX_STAT_RDCLR	BIT(1)
-#define OCX_LNE_CFG_RX_STAT_ENA		BIT(0)
+#define OCX_LNE_CFG_RX_BDRY_LOCK_DIS		BIT(8)
+#define OCX_LNE_CFG_RX_STAT_WRAP_DIS		BIT(2)
+#define OCX_LNE_CFG_RX_STAT_RDCLR		BIT(1)
+#define OCX_LNE_CFG_RX_STAT_ENA			BIT(0)
+
+
+#define OCX_LANE_BAD_64B67B			BIT(8)
+#define OCX_LANE_DSKEW_FIFO_OVFL		BIT(5)
+#define OCX_LANE_SCRM_SYNC_LOSS			BIT(4)
+#define OCX_LANE_UKWN_CNTL_WORD			BIT(3)
+#define OCX_LANE_CRC32_ERR			BIT(2)
+#define OCX_LANE_BDRY_SYNC_LOSS			BIT(1)
+#define OCX_LANE_SERDES_LOCK_LOSS		BIT(0)
+
+#define OCX_COM_LANE_INT_UE       (0)
+#define OCX_COM_LANE_INT_CE       (OCX_LANE_SERDES_LOCK_LOSS | \
+				   OCX_LANE_BDRY_SYNC_LOSS   | \
+				   OCX_LANE_CRC32_ERR        | \
+				   OCX_LANE_UKWN_CNTL_WORD   | \
+				   OCX_LANE_SCRM_SYNC_LOSS   | \
+				   OCX_LANE_DSKEW_FIFO_OVFL  | \
+				   OCX_LANE_BAD_64B67B)
+
+static const struct error_descr ocx_lane_errors[] = {
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_LANE_SERDES_LOCK_LOSS,
+		.descr = STRINGIFY(OCX_LANE_SERDES_LOCK_LOSS),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_LANE_BDRY_SYNC_LOSS,
+		.descr = STRINGIFY(OCX_LANE_BDRY_SYNC_LOSS),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_LANE_CRC32_ERR,
+		.descr = STRINGIFY(OCX_LANE_CRC32_ERR),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_LANE_UKWN_CNTL_WORD,
+		.descr = STRINGIFY(OCX_LANE_UKWN_CNTL_WORD),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_LANE_SCRM_SYNC_LOSS,
+		.descr = STRINGIFY(OCX_LANE_SCRM_SYNC_LOSS),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_LANE_DSKEW_FIFO_OVFL,
+		.descr = STRINGIFY(OCX_LANE_DSKEW_FIFO_OVFL),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = OCX_LANE_BAD_64B67B,
+		.descr = STRINGIFY(OCX_LANE_BAD_64B67B),
+	},
+	{0, 0, NULL},
+};
 
 #define OCX_LNE_INT_ENA_ALL		(0x3ff - (1 << 7))
 #define OCX_COM_INT_ENA_ALL		((0x1fULL << 50) | 0xffffff)
@@ -690,8 +904,8 @@ struct thunderx_ocx {
 
 	struct dentry *debugfs;
 
-	char buf[80*25];
-	char tmp[64];
+	char buf[PAGE_SIZE];
+	char tmp[PAGE_SIZE];
 
 	struct msix_entry msix_ent[OCX_INTS];
 };
@@ -704,12 +918,17 @@ static irqreturn_t thunderx_ocx_com_isr(int irq, void *irq_id)
 
 	u64 ocx_com_int = readq(ocx->regs + OCX_COM_INT);
 	u64 ocx_lane_int, ocx_lane_stat11;
-	int lane;
+	int ret, lane;
 
-	snprintf(ocx->buf, sizeof(ocx->buf),
-		 "%s: OCX_COM_INT: %016llx",
-		 ocx->edac_dev->ctl_name,
-		 ocx_com_int);
+	writeq(ocx_com_int, ocx->regs + OCX_COM_INT);
+
+	ret = snprintf(ocx->buf, sizeof(ocx->buf),
+		       "%s: OCX_COM_INT: %016llx",
+		       ocx->edac_dev->ctl_name,
+		       ocx_com_int);
+
+	decode_register(ocx->buf + ret, sizeof(ocx->buf) - ret,
+			ocx_com_errors, ocx_com_int);
 
 	for (lane = 0; lane < OCX_RX_LANES; lane++)
 		if (ocx_com_int & BIT(lane)) {
@@ -717,16 +936,20 @@ static irqreturn_t thunderx_ocx_com_isr(int irq, void *irq_id)
 			writeq(ocx_lane_int, ocx->regs + OCX_LNE_INT(lane));
 
 			ocx_lane_stat11 = readq(ocx->regs + OCX_LNE_STAT(lane, 11));
-			snprintf(ocx->tmp, sizeof(ocx->tmp),
-				 "\n\tOCX_LNE_INT[%02d]: %016llx"
-				 " OCX_LNE_STAT11[%02d]: %016llx",
-				 lane, ocx_lane_int, lane, ocx_lane_stat11);
+			ret = snprintf(ocx->tmp, sizeof(ocx->tmp),
+				       "\n\tOCX_LNE_INT[%02d]: %016llx \
+					 OCX_LNE_STAT11[%02d]: %016llx",
+					lane, ocx_lane_int, lane,
+					ocx_lane_stat11);
+			decode_register(ocx->tmp + ret, sizeof(ocx->tmp) - ret,
+					ocx_lane_errors, ocx_lane_int);
 			strcat(ocx->buf, ocx->tmp);
 		}
 
-	writeq(ocx_com_int, ocx->regs + OCX_COM_INT);
-
-	edac_device_handle_ue(ocx->edac_dev, 0, 0, ocx->buf);
+	if (ocx_com_int & OCX_COM_INT_UE)
+		edac_device_handle_ue(ocx->edac_dev, 0, 0, ocx->buf);
+	else if (ocx_com_int & OCX_COM_INT_CE)
+		edac_device_handle_ce(ocx->edac_dev, 0, 0, ocx->buf);
 
 	return IRQ_HANDLED;
 }
@@ -736,20 +959,27 @@ static irqreturn_t thunderx_ocx_lnk_isr(int irq, void *irq_id)
 	struct msix_entry *msix = irq_id;
 	struct thunderx_ocx *ocx = container_of(msix, struct thunderx_ocx,
 						msix_ent[msix->entry]);
+	int ret;
 
 	u64 ocx_com_link_int = readq(ocx->regs +
 				     OCX_COM_LINKX_INT(msix->entry));
 
-	snprintf(ocx->buf, sizeof(ocx->buf),
-		 "%s: OCX_COM_LINK_INT[%d]: %016llx",
-		 ocx->edac_dev->ctl_name,
-		 msix->entry,
-		 ocx_com_link_int);
+	ret = snprintf(ocx->buf, sizeof(ocx->buf),
+		       "%s: OCX_COM_LINK_INT[%d]: %016llx",
+		       ocx->edac_dev->ctl_name,
+		       msix->entry,
+		       ocx_com_link_int);
 
 	writeq(ocx_com_link_int, ocx->regs +
 	       OCX_COM_LINKX_INT(msix->entry));
 
-	edac_device_handle_ue(ocx->edac_dev, 0, 0, ocx->buf);
+	decode_register(ocx->buf + ret, sizeof(ocx->buf) - ret,
+			ocx_com_link_errors, ocx_com_link_int);
+
+	if (ocx_com_link_int & OCX_COM_LINK_INT_UE)
+		edac_device_handle_ue(ocx->edac_dev, 0, 0, ocx->buf);
+	else if (ocx_com_link_int & OCX_COM_LINK_INT_CE)
+		edac_device_handle_ce(ocx->edac_dev, 0, 0, ocx->buf);
 
 	return IRQ_HANDLED;
 }
@@ -868,7 +1098,9 @@ struct debugfs_entry *ocx_devattr[] = {
 	&debugfs_lne18_badcnt,
 	&debugfs_lne19_badcnt,
 	&debugfs_lne20_badcnt,
-
+	&debugfs_lne21_badcnt,
+	&debugfs_lne22_badcnt,
+	&debugfs_lne23_badcnt,
 	&debugfs_com_int,
 };
 
@@ -962,7 +1194,7 @@ static int thunderx_ocx_probe(struct pci_dev *pdev,
 	edac_dev->dev = &pdev->dev;
 	edac_dev->dev_name = dev_name(&pdev->dev);
 	edac_dev->mod_name = "thunderx-ocx";
-	edac_dev->ctl_name = "thunderx-ocx-err";
+	edac_dev->ctl_name = "thunderx-ocx";
 	edac_dev->sysfs_attributes = thunderx_ctl_attrs;
 
 	err = edac_device_add_device(edac_dev);
@@ -1054,49 +1286,120 @@ static struct pci_driver thunderx_ocx_driver = {
 #define L2C_TAD_INT_ENA_W1C	0x40020
 #define L2C_TAD_INT_ENA_W1S	0x40028
 
-#define L2C_TAD_INT_L2DSBE	 BIT(0)
 #define L2C_TAD_INT_L2DDBE	 BIT(1)
 #define L2C_TAD_INT_SBFSBE	 BIT(2)
 #define L2C_TAD_INT_SBFDBE	 BIT(3)
 #define L2C_TAD_INT_FBFSBE	 BIT(4)
 #define L2C_TAD_INT_FBFDBE	 BIT(5)
-#define L2C_TAD_INT_TAGSBE	 BIT(8)
 #define L2C_TAD_INT_TAGDBE	 BIT(9)
-#define L2C_TAD_INT_WRNXM	 BIT(13)
-#define L2C_TAD_INT_RDNXM	 BIT(14)
 #define L2C_TAD_INT_RDDISLMC	 BIT(15)
 #define L2C_TAD_INT_WRDISLMC	 BIT(16)
 #define L2C_TAD_INT_LFBTO	 BIT(17)
+#define L2C_TAD_INT_GSYNCTO	 BIT(18)
 #define L2C_TAD_INT_RTGSBE	 BIT(32)
 #define L2C_TAD_INT_RTGDBE	 BIT(33)
-#define L2C_TAD_INT_RDISOCI	 BIT(34)
-#define L2C_TAD_INT_WRISOCI	 BIT(35)
+#define L2C_TAD_INT_RDDISOCI	 BIT(34)
+#define L2C_TAD_INT_WRDISOCI	 BIT(35)
 
-#define L2C_TAD_INT_ECC		(L2C_TAD_INT_L2DSBE | L2C_TAD_INT_L2DDBE | \
+#define L2C_TAD_INT_ECC		(L2C_TAD_INT_L2DDBE | \
 				 L2C_TAD_INT_SBFSBE | L2C_TAD_INT_SBFDBE | \
 				 L2C_TAD_INT_FBFSBE | L2C_TAD_INT_FBFDBE)
 
-#define L2C_TAD_INT_CE		(L2C_TAD_INT_L2DSBE | L2C_TAD_INT_SBFSBE | \
-				 L2C_TAD_INT_FBFSBE | L2C_TAD_INT_TAGSBE | \
-				 L2C_TAD_INT_RTGSBE)
-
-#define L2C_TAD_INT_UE		(L2C_TAD_INT_L2DDBE | L2C_TAD_INT_SBFDBE | \
-				 L2C_TAD_INT_FBFDBE | L2C_TAD_INT_TAGDBE | \
-				 L2C_TAD_INT_RTGDBE)
-
-#define L2C_TAD_INT_TAG		(L2C_TAD_INT_TAGSBE | L2C_TAD_INT_TAGDBE)
-
-#define L2C_TAD_INT_RTG		(L2C_TAD_INT_RTGSBE | L2C_TAD_INT_RTGDBE)
+#define L2C_TAD_INT_CE          (L2C_TAD_INT_SBFSBE | \
+				 L2C_TAD_INT_FBFSBE)
+
+#define L2C_TAD_INT_UE          (L2C_TAD_INT_L2DDBE | \
+				 L2C_TAD_INT_SBFDBE | \
+				 L2C_TAD_INT_FBFDBE | \
+				 L2C_TAD_INT_TAGDBE | \
+				 L2C_TAD_INT_RTGDBE | \
+				 L2C_TAD_INT_WRDISOCI | \
+				 L2C_TAD_INT_RDDISOCI | \
+				 L2C_TAD_INT_WRDISLMC | \
+				 L2C_TAD_INT_RDDISLMC | \
+				 L2C_TAD_INT_LFBTO    | \
+				 L2C_TAD_INT_GSYNCTO)
+
+static const struct error_descr l2_tad_errors[] = {
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = L2C_TAD_INT_SBFSBE,
+		.descr = STRINGIFY(L2C_TAD_INT_SBFSBE),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = L2C_TAD_INT_FBFSBE,
+		.descr = STRINGIFY(L2C_TAD_INT_FBFSBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_L2DDBE,
+		.descr = STRINGIFY(L2C_TAD_INT_L2DDBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_SBFDBE,
+		.descr = STRINGIFY(L2C_TAD_INT_SBFDBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_FBFDBE,
+		.descr = STRINGIFY(L2C_TAD_INT_FBFDBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_TAGDBE,
+		.descr = STRINGIFY(L2C_TAD_INT_TAGDBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_RTGDBE,
+		.descr = STRINGIFY(L2C_TAD_INT_RTGDBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_WRDISOCI,
+		.descr = STRINGIFY(L2C_TAD_INT_WRDISOCI),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_RDDISOCI,
+		.descr = STRINGIFY(L2C_TAD_INT_RDDISOCI),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_WRDISOCI,
+		.descr = STRINGIFY(L2C_TAD_INT_WRDISLMC),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_RDDISOCI,
+		.descr = STRINGIFY(L2C_TAD_INT_RDDISLMC),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_LFBTO,
+		.descr = STRINGIFY(L2C_TAD_INT_LFBTO),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_TAD_INT_GSYNCTO,
+		.descr = STRINGIFY(L2C_TAD_INT_GSYNCTO),
+	},
+	{0, 0, NULL},
+};
 
-#define L2C_TAD_INT_NXM		(L2C_TAD_INT_WRNXM | L2C_TAD_INT_RDNXM)
 
+#define L2C_TAD_INT_TAG		(L2C_TAD_INT_TAGDBE)
+#define L2C_TAD_INT_RTG		(L2C_TAD_INT_RTGDBE)
+#define L2C_TAD_INT_NXM		(0)
 #define L2C_TAD_INT_DISLMC	(L2C_TAD_INT_WRDISLMC | L2C_TAD_INT_RDDISLMC)
 
-#define L2C_TAD_INT_ISOCI	(L2C_TAD_INT_WRISOCI | L2C_TAD_INT_RDISOCI)
+#define L2C_TAD_INT_DISOCI	(L2C_TAD_INT_WRDISOCI | L2C_TAD_INT_RDDISOCI)
 
 #define L2C_TAD_INT_ENA_ALL	(L2C_TAD_INT_ECC | L2C_TAD_INT_TAG | \
 				 L2C_TAD_INT_RTG | L2C_TAD_INT_NXM | \
-				 L2C_TAD_INT_DISLMC | L2C_TAD_INT_ISOCI | \
+				 L2C_TAD_INT_DISLMC | L2C_TAD_INT_DISOCI | \
 				 L2C_TAD_INT_LFBTO)
 
 #define L2C_TAD_TIMETWO		0x50000
@@ -1126,6 +1429,40 @@ static struct pci_driver thunderx_ocx_driver = {
 #define L2C_CBC_INT_CE		 (L2C_CBC_INT_RSDSBE | L2C_CBC_INT_MIBSBE)
 #define L2C_CBC_INT_UE		 (L2C_CBC_INT_RSDDBE | L2C_CBC_INT_MIBDBE)
 
+static const struct error_descr l2_cbc_errors[] = {
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = L2C_CBC_INT_RSDSBE,
+		.descr = STRINGIFY(L2C_CBC_INT_RSDSBE),
+	},
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = L2C_CBC_INT_MIBSBE,
+		.descr = STRINGIFY(L2C_CBC_INT_MIBSBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_CBC_INT_RSDDBE,
+		.descr = STRINGIFY(L2C_CBC_INT_RSDDBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_CBC_INT_MIBDBE,
+		.descr = STRINGIFY(L2C_CBC_INT_MIBDBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_CBC_INT_IORDDISOCI,
+		.descr = STRINGIFY(L2C_CBC_INT_IORDDISOCI),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_CBC_INT_IOWRDISOCI,
+		.descr = STRINGIFY(L2C_CBC_INT_IOWRDISOCI),
+	},
+	{0, 0, NULL},
+};
+
 #define L2C_CBC_INT_W1S		0x60008
 #define L2C_CBC_INT_ENA_W1C	0x60020
 
@@ -1145,6 +1482,20 @@ static struct pci_driver thunderx_ocx_driver = {
 #define L2C_MCI_INT_VBFSBE	 BIT(0)
 #define L2C_MCI_INT_VBFDBE	 BIT(1)
 
+static const struct error_descr l2_mci_errors[] = {
+	{
+		.type  = ERR_CORRECTED,
+		.mask  = L2C_MCI_INT_VBFSBE,
+		.descr = STRINGIFY(L2C_MCI_INT_VBFSBE),
+	},
+	{
+		.type  = ERR_UNCORRECTED,
+		.mask  = L2C_MCI_INT_VBFDBE,
+		.descr = STRINGIFY(L2C_MCI_INT_VBFDBE),
+	},
+	{0, 0, NULL},
+};
+
 #define L2C_MCI_INT_W1S		0x8
 #define L2C_MCI_INT_ENA_W1C	0x20
 
@@ -1161,7 +1512,7 @@ struct thunderx_l2c {
 
 	struct dentry *debugfs;
 
-	char buf[80];
+	char buf[PAGE_SIZE];
 	int index;
 
 	struct msix_entry msix_ent;
@@ -1176,6 +1527,9 @@ static irqreturn_t thunderx_l2c_tad_isr(int irq, void *irq_id)
 	u64 tad_int = readq(tad->regs + L2C_TAD_INT_W1C);
 	const char *ext_reg = "Status";
 	u64 ext_val = 0;
+	int ret;
+
+	writeq(tad_int, tad->regs + L2C_TAD_INT_W1C);
 
 	if (tad_int & L2C_TAD_INT_ECC) {
 		ext_reg = "TQD_ERR";
@@ -1189,21 +1543,22 @@ static irqreturn_t thunderx_l2c_tad_isr(int irq, void *irq_id)
 	} else if (tad_int & L2C_TAD_INT_LFBTO) {
 		ext_reg = "TIMEOUT";
 		ext_val = readq(tad->regs + L2C_TAD_TIMEOUT);
-	} else if (tad_int & L2C_TAD_INT_ISOCI) {
+	} else if (tad_int & L2C_TAD_INT_DISOCI) {
 		ext_reg = "ERR";
 		ext_val = readq(tad->regs + L2C_TAD_ERR);
 	}
 
-	snprintf(tad->buf, sizeof(tad->buf),
-		 "%s: L2C_TAD_INT: %016llx, %s: %016llx",
-		 tad->edac_dev->ctl_name,
-		 tad_int, ext_reg, ext_val);
+	ret = snprintf(tad->buf, sizeof(tad->buf),
+		       "%s: L2C_TAD_INT: %016llx, %s: %016llx",
+		       tad->edac_dev->ctl_name,
+		       tad_int, ext_reg, ext_val);
 
-	writeq(tad_int, tad->regs + L2C_TAD_INT_W1C);
+	decode_register(tad->buf + ret, sizeof(tad->buf) - ret,
+			l2_tad_errors, tad_int);
 
 	if (tad_int & L2C_TAD_INT_UE)
 		edac_device_handle_ue(tad->edac_dev, 0, 0, tad->buf);
-	else
+	else if (tad_int & L2C_TAD_INT_CE)
 		edac_device_handle_ce(tad->edac_dev, 0, 0, tad->buf);
 
 	return IRQ_HANDLED;
@@ -1218,6 +1573,9 @@ static irqreturn_t thunderx_l2c_cbc_isr(int irq, void *irq_id)
 	u64 cbc_int = readq(cbc->regs + L2C_CBC_INT_W1C);
 	const char *ext_reg = "Status";
 	u64 ext_val = 0;
+	int ret;
+
+	writeq(cbc_int, cbc->regs + L2C_CBC_INT_W1C);
 
 	if (cbc_int & L2C_CBC_INT_RSD) {
 		ext_reg = "RSDERR";
@@ -1230,16 +1588,16 @@ static irqreturn_t thunderx_l2c_cbc_isr(int irq, void *irq_id)
 		ext_val = readq(cbc->regs + L2C_CBC_IODISOCIERR);
 	}
 
-	snprintf(cbc->buf, sizeof(cbc->buf),
-		 "%s: L2C_CBC_INT: %016llx, %s: %016llx",
-		 cbc->edac_dev->ctl_name,
-		 cbc_int, ext_reg, ext_val);
-
-	writeq(cbc_int, cbc->regs + L2C_CBC_INT_W1C);
+	ret = snprintf(cbc->buf, sizeof(cbc->buf),
+		       "%s: L2C_CBC_INT: %016llx, %s: %016llx",
+		       cbc->edac_dev->ctl_name,
+		       cbc_int, ext_reg, ext_val);
+	decode_register(cbc->buf + ret, sizeof(cbc->buf) + ret,
+			l2_cbc_errors, cbc_int);
 
 	if (cbc_int & L2C_CBC_INT_UE)
 		edac_device_handle_ue(cbc->edac_dev, 0, 0, cbc->buf);
-	else
+	else if (cbc_int & L2C_CBC_INT_CE)
 		edac_device_handle_ce(cbc->edac_dev, 0, 0, cbc->buf);
 
 	return IRQ_HANDLED;
@@ -1253,17 +1611,21 @@ static irqreturn_t thunderx_l2c_mci_isr(int irq, void *irq_id)
 
 	u64 mci_int = readq(mci->regs + L2C_MCI_INT_W1C);
 	u64 ext_val = readq(mci->regs + L2C_MCI_ERR);
-
-	snprintf(mci->buf, sizeof(mci->buf),
-		 "%s: L2C_MCI_INT: %016llx, ERR: %016llx",
-		 mci->edac_dev->ctl_name,
-		 mci_int, ext_val);
+	int ret;
 
 	writeq(mci_int, mci->regs + L2C_MCI_INT_W1C);
 
+	ret = snprintf(mci->buf, sizeof(mci->buf),
+		       "%s: L2C_MCI_INT: %016llx, ERR: %016llx",
+		       mci->edac_dev->ctl_name,
+		       mci_int, ext_val);
+
+	decode_register(mci->buf + ret, sizeof(mci->buf) + ret,
+			l2_mci_errors, mci_int);
+
 	if (mci_int & L2C_MCI_INT_VBFSBE)
 		edac_device_handle_ce(mci->edac_dev, 0, 0, mci->buf);
-	else
+	else if (mci_int & L2C_MCI_INT_VBFDBE)
 		edac_device_handle_ue(mci->edac_dev, 0, 0, mci->buf);
 
 	return IRQ_HANDLED;
@@ -1423,7 +1785,7 @@ static int thunderx_l2c_probe(struct pci_dev *pdev,
 	edac_dev->dev = &pdev->dev;
 	edac_dev->dev_name = dev_name(&pdev->dev);
 	edac_dev->mod_name = "thunderx-l2c";
-	edac_dev->ctl_name = "thunderx-l2c-err";
+	edac_dev->ctl_name = "thunderx-l2c";
 	edac_dev->sysfs_attributes = thunderx_ctl_attrs;
 
 	err = edac_device_add_device(edac_dev);
-- 
2.0.2

