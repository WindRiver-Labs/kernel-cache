From cb6ce6b72f1f9acc3ea4a6f531ecc910ff441c8c Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Tue, 6 Apr 2010 14:30:38 +0800
Subject: [PATCH 6/7] Enable eSPI and set 4-bit eSDHC on fsl_p2020rdb board

On fsl_p2020rdb board, the switch SW5[6] is used to select
the width for eSDHC and the highest two bits of pmuxcr is also
used to set eSDHC to 8-bit or 4-bit mode:

SW5[6]=0  the highest two bits of pmuxcr = 01 : 4-bit eSDHC and enable eSPI

SW5[6]=1  the highest two bits of pmuxcr = 10 : 8-bit eSDHC and disable eSPI

By default, the SW5[6] is 0, so this patch is to set the
highest two bits of pmuxcr to 01, and make eSPI and eSDHC work
simultaneously.

Signed-off-by: Andrew Liu <shengping.liu@windriver.com>
---
 arch/powerpc/platforms/85xx/mpc85xx_rdb.c |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/mpc85xx_rdb.c b/arch/powerpc/platforms/85xx/mpc85xx_rdb.c
index 088f30b..ffcae79 100644
--- a/arch/powerpc/platforms/85xx/mpc85xx_rdb.c
+++ b/arch/powerpc/platforms/85xx/mpc85xx_rdb.c
@@ -86,6 +86,8 @@ extern void __init mpc85xx_smp_init(void);
 #endif
 static void __init mpc85xx_rdb_setup_arch(void)
 {
+	void __iomem *immap_pmuxcr;
+
 #ifdef CONFIG_PCI
 	struct device_node *np;
 #endif
@@ -101,6 +103,18 @@ static void __init mpc85xx_rdb_setup_arch(void)
 
 #endif
 
+#define MPC85XX_PMUXCR_OFFSET	0xE0060
+#define MPC85XX_PMUXCR_SDHC_CD	0x40000000
+#define MPC85XX_PMUXCR_SD_DATA	0x80000000
+	immap_pmuxcr = ioremap(get_immrbase() + MPC85XX_PMUXCR_OFFSET, 0x4);
+	if (!immap_pmuxcr)
+		return;
+
+	out_be32(immap_pmuxcr, in_be32(immap_pmuxcr) & ~MPC85XX_PMUXCR_SD_DATA);
+	out_be32(immap_pmuxcr, in_be32(immap_pmuxcr) | MPC85XX_PMUXCR_SDHC_CD);
+
+	iounmap(immap_pmuxcr);
+
 #ifdef CONFIG_SMP
 	mpc85xx_smp_init();
 #endif
-- 
1.6.5.2

