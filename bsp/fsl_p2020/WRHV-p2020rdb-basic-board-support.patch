From d7c59799845befb4cf53ad5b2974ea848dd1b7b0 Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Tue, 26 Oct 2010 16:00:30 +0800
Subject: [PATCH] WRHV: p2020rdb basic board support

Add support for Freescale p2020rdb reference board
running on the Wind River Hypervisor.

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/powerpc/boot/dts/wrhv_p2020rdb.dts        |  546 ++++++++++++++++++++++++
 arch/powerpc/platforms/85xx/Kconfig            |   14 +-
 arch/powerpc/platforms/85xx/Makefile           |    1 +
 arch/powerpc/platforms/85xx/wrhv_mpc85xx_rdb.c |  263 ++++++++++++
 4 files changed, 823 insertions(+), 1 deletions(-)
 create mode 100644 arch/powerpc/boot/dts/wrhv_p2020rdb.dts
 create mode 100644 arch/powerpc/platforms/85xx/wrhv_mpc85xx_rdb.c

diff --git a/arch/powerpc/boot/dts/wrhv_p2020rdb.dts b/arch/powerpc/boot/dts/wrhv_p2020rdb.dts
new file mode 100644
index 0000000..64b620b
--- /dev/null
+++ b/arch/powerpc/boot/dts/wrhv_p2020rdb.dts
@@ -0,0 +1,546 @@
+/*
+ * P2020 RDB Device Tree Source
+ *
+ * Copyright 2009 Freescale Semiconductor Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/dts-v1/;
+/ {
+	model = "fsl,P2020";
+	compatible = "fsl,P2020RDB";
+	#address-cells = <2>;
+	#size-cells = <2>;
+
+	aliases {
+		ethernet0 = &enet0;
+		ethernet1 = &enet1;
+		ethernet2 = &enet2;
+		serial0 = &serial0;
+	};
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		PowerPC,P2020@0 {
+			device_type = "cpu";
+			reg = <0x0>;
+			next-level-cache = <&L2>;
+		};
+
+		PowerPC,P2020@1 {
+			device_type = "cpu";
+			reg = <0x1>;
+			next-level-cache = <&L2>;
+		};
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0 0x0 0 0x10000000>;
+	};
+
+	localbus@f3005000 {
+		#address-cells = <2>;
+		#size-cells = <1>;
+		compatible = "fsl,p2020-elbc", "fsl,elbc", "simple-bus";
+		reg = <0 0xf3005000 0 0x1000>;
+		interrupts = <19 2>;
+		interrupt-parent = <&mpic>;
+		/* NOR and NAND Flashes */
+		ranges = <0x0 0x0 0x0 0xef000000 0x01000000
+			  0x1 0x0 0x0 0xffa00000 0x00040000
+			  0x2 0x0 0x0 0xffb00000 0x00020000>;
+
+		nor@0,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x1000000>;
+			bank-width = <2>;
+			device-width = <1>;
+
+			partition@0 {
+				/* 7M for common use */
+				reg = <0x0 0x00700000>;
+				label = "NOR (RW) Common Use Area 0";
+			};
+
+			partition@700000 {
+				/* This location must not be altered  */
+				/* 512KB for u-boot Bootloader Image */
+				/* 512KB for u-boot Environment Variables */
+				reg = <0x00700000 0x00100000>;
+				label = "NOR (RO) U-Boot Image";
+				read-only;
+			};
+
+			partition@800000 {
+				/* This location must not be altered  */
+				/* 256KB for Vitesse 7385 Switch firmware */
+				reg = <0x00800000 0x00040000>;
+				label = "NOR (RO) Vitesse-7385 Firmware";
+				read-only;
+			};
+
+			partition@840000 {
+				/* 5.75M for common use */
+				reg = <0x00840000 0x005c0000>;
+				label = "NOR (RW) Common Use Area 1";
+			};
+
+			partition@e00000 {
+				/* 2 MB for Hypervisor Bootrom */
+				reg = <0x00e00000 0x00200000>;
+				label = "NOR (RO) Hypervisor Bootrom";
+				read-only;
+			};
+
+		};
+
+		nand@1,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,p2020-fcm-nand",
+				     "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x40000>;
+
+			partition@0 {
+				/* This location must not be altered  */
+				/* 1MB for u-boot Bootloader Image */
+				reg = <0x0 0x00100000>;
+				label = "NAND (RO) U-Boot Image";
+				read-only;
+			};
+
+			partition@100000 {
+				/* 1MB for DTB Image */
+				reg = <0x00100000 0x00100000>;
+				label = "NAND (RO) DTB Image";
+				read-only;
+			};
+
+			partition@200000 {
+				/* 4MB for Linux Kernel Image */
+				reg = <0x00200000 0x00400000>;
+				label = "NAND (RO) Linux Kernel Image";
+				read-only;
+			};
+
+			partition@600000 {
+				/* 4MB for Compressed Root file System Image */
+				reg = <0x00600000 0x00400000>;
+				label = "NAND (RO) Compressed RFS Image";
+				read-only;
+			};
+
+			partition@a00000 {
+				/* 7MB for JFFS2 based Root file System */
+				reg = <0x00a00000 0x00700000>;
+				label = "NAND (RW) JFFS2 Root File System";
+			};
+
+			partition@1100000 {
+				/* 15MB for JFFS2 based Root file System */
+				reg = <0x01100000 0x00f00000>;
+				label = "NAND (RW) Writable User area";
+			};
+		};
+
+		L2switch@2,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "vitesse-7385";
+			reg = <0x2 0x0 0x20000>;
+		};
+
+	};
+
+	soc@f3000000 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		device_type = "soc";
+		compatible = "fsl,p2020-immr", "simple-bus";
+		ranges = <0x0 0 0xf3000000 0x100000>;
+		bus-frequency = <500000000>;		// Filled out by uboot.
+
+		ecm-law@0 {
+			compatible = "fsl,ecm-law";
+			reg = <0x0 0x1000>;
+			fsl,num-laws = <12>;
+		};
+
+		ecm@1000 {
+			compatible = "fsl,p2020-ecm", "fsl,ecm";
+			reg = <0x1000 0x1000>;
+			interrupts = <17 2>;
+			interrupt-parent = <&mpic>;
+		};
+
+		corenet-law {
+			compatible = "fsl,corenet-law";
+			reg = <0x0 0x1000>;
+			fsl,num-laws = <12>;
+			offset = <0x20>;
+			high-base = <0xc08>;
+			law-attrib = <0xc10>;
+		};
+
+		memory-controller@2000 {
+			compatible = "fsl,p2020-memory-controller";
+			reg = <0x2000 0x1000>;
+			interrupt-parent = <&mpic>;
+			interrupts = <18 2>;
+		};
+
+		i2c@3000 {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			cell-index = <0>;
+			compatible = "fsl-i2c";
+			reg = <0x3000 0x100>;
+			interrupts = <43 2>;
+			interrupt-parent = <&mpic>;
+			dfsrr;
+
+			eeprom@50 {
+				compatible = "atmel,24c64";
+				reg = <0x50>;
+			};
+
+			rtc@68 {
+				compatible = "dallas,ds1339";
+				reg = <0x68>;
+			};
+		};
+
+		serial0: serial@4500 {
+			cell-index = <0>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4500 0x100>;
+			clock-frequency = <0>;
+			interrupts = <42 2>;
+			interrupt-parent = <&mpic>;
+		};
+
+		spi@7000 {
+			cell-index = <0>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+			compatible = "fsl,espi";
+			reg = <0x7000 0x1000>;
+			interrupts = <59 0x2>;
+			interrupt-parent = <&mpic>;
+			espi,num-ss-bits = <4>;
+			mode = "cpu";
+
+			fsl_m25p80@0 {
+				#address-cells = <1>;
+				#size-cells = <1>;
+				compatible = "fsl,espi-flash";
+				reg = <0>;
+				linux,modalias = "fsl_m25p80";
+				spi-max-frequency = <40000000>;
+				mode = <0>;
+
+				partition@0 {
+					/* 512KB for u-boot Bootloader Image */
+					reg = <0x0 0x00080000>;
+					label = "SPI (RO) U-Boot Image";
+					read-only;
+				};
+
+				partition@80000 {
+					/* 512KB for DTB Image */
+					reg = <0x00080000 0x00080000>;
+					label = "SPI (RO) DTB Image";
+					read-only;
+				};
+
+				partition@100000 {
+					/* 4MB for Linux Kernel Image */
+					reg = <0x00100000 0x00400000>;
+					label = "SPI (RO) Linux Kernel Image";
+					read-only;
+				};
+
+				partition@500000 {
+					/* 4MB for Compressed RFS Image */
+					reg = <0x00500000 0x00400000>;
+					label = "SPI (RO) Compressed RFS Image";
+					read-only;
+				};
+
+				partition@900000 {
+					/* 7MB for JFFS2 based RFS */
+					reg = <0x00900000 0x00700000>;
+					label = "SPI (RW) JFFS2 RFS";
+				};
+			};
+		};
+
+		dma@c300 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,eloplus-dma";
+			reg = <0xc300 0x4>;
+			ranges = <0x0 0xc100 0x200>;
+			cell-index = <1>;
+			dma-channel@0 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x0 0x80>;
+				cell-index = <0>;
+				interrupt-parent = <&mpic>;
+				interrupts = <76 2>;
+			};
+			dma-channel@80 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x80 0x80>;
+				cell-index = <1>;
+				interrupt-parent = <&mpic>;
+				interrupts = <77 2>;
+			};
+			dma-channel@100 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x100 0x80>;
+				cell-index = <2>;
+				interrupt-parent = <&mpic>;
+				interrupts = <78 2>;
+			};
+			dma-channel@180 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x180 0x80>;
+				cell-index = <3>;
+				interrupt-parent = <&mpic>;
+				interrupts = <79 2>;
+			};
+		};
+
+		L2: l2-cache-controller@20000 {
+			compatible = "fsl,p2020-l2-cache-controller";
+			reg = <0x20000 0x1000>;
+			cache-line-size = <32>;	// 32 bytes
+			cache-size = <0x80000>; // L2,512K
+			interrupt-parent = <&mpic>;
+			interrupts = <16 2>;
+		};
+
+		dma@21300 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,eloplus-dma";
+			reg = <0x21300 0x4>;
+			ranges = <0x0 0x21100 0x200>;
+			cell-index = <0>;
+			dma-channel@0 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x0 0x80>;
+				cell-index = <0>;
+				interrupt-parent = <&mpic>;
+				interrupts = <20 2>;
+			};
+			dma-channel@80 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x80 0x80>;
+				cell-index = <1>;
+				interrupt-parent = <&mpic>;
+				interrupts = <21 2>;
+			};
+			dma-channel@100 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x100 0x80>;
+				cell-index = <2>;
+				interrupt-parent = <&mpic>;
+				interrupts = <22 2>;
+			};
+			dma-channel@180 {
+				compatible = "fsl,eloplus-dma-channel";
+				reg = <0x180 0x80>;
+				cell-index = <3>;
+				interrupt-parent = <&mpic>;
+				interrupts = <23 2>;
+			};
+		};
+
+		usb@22000 {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			compatible = "fsl-usb2-dr";
+			reg = <0x22000 0x1000>;
+			interrupt-parent = <&mpic>;
+			interrupts = <28 0x2>;
+			phy_type = "ulpi";
+		};
+
+		enet0: ethernet@24000 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			cell-index = <0>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x24000 0x1000>;
+			ranges = <0x0 0x24000 0x1000>;
+			local-mac-address = [ 00 0a 1e 00 06 ac ];
+			interrupts = <29 2 30 2 34 2>;
+			interrupt-parent = <&mpic>;
+			fixed-link = <1 1 1000 0 0>;
+			phy-connection-type = "rgmii-id";
+
+			mdio@520 {
+				#address-cells = <1>;
+				#size-cells = <0>;
+				compatible = "fsl,gianfar-mdio";
+				reg = <0x520 0x20>;
+
+				phy0: ethernet-phy@0 {
+					interrupt-parent = <&mpic>;
+					interrupts = <3 1>;
+					reg = <0x0>;
+				};
+				phy1: ethernet-phy@1 {
+					interrupt-parent = <&mpic>;
+					interrupts = <3 1>;
+					reg = <0x1>;
+				};
+			};
+		};
+
+		enet1: ethernet@25000 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			cell-index = <1>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x25000 0x1000>;
+			ranges = <0x0 0x25000 0x1000>;
+			local-mac-address = [ 00 0a 1e 00 06 ad ];
+			interrupts = <35 2 36 2 40 2>;
+			interrupt-parent = <&mpic>;
+			tbi-handle = <&tbi0>;
+			phy-handle = <&phy0>;
+			phy-connection-type = "sgmii";
+
+			mdio@520 {
+				#address-cells = <1>;
+				#size-cells = <0>;
+				compatible = "fsl,gianfar-tbi";
+				reg = <0x520 0x20>;
+
+				tbi0: tbi-phy@11 {
+					reg = <0x11>;
+					device_type = "tbi-phy";
+				};
+			};
+		};
+
+		enet2: ethernet@26000 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			cell-index = <2>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x26000 0x1000>;
+			ranges = <0x0 0x26000 0x1000>;
+			local-mac-address = [ 00 0a 1e 00 06 ae ];
+			interrupts = <31 2 32 2 33 2>;
+			interrupt-parent = <&mpic>;
+			phy-handle = <&phy1>;
+			phy-connection-type = "rgmii-id";
+		};
+
+		sdhci@2e000 {
+			compatible = "fsl,p2020-esdhc", "fsl,esdhc";
+			reg = <0x2e000 0x1000>;
+			interrupts = <72 0x2>;
+			interrupt-parent = <&mpic>;
+			fsl,sdhci-dma-broken;
+			fsl,sdhci-adjust-timeout;
+			fsl,sdhci-ahb2mag-irq-bypass;
+			clock-frequency = <250000000>;
+		};
+
+		crypto@30000 {
+			compatible = "fsl,sec3.0", "fsl,sec2.4", "fsl,sec2.2",
+				     "fsl,sec2.1", "fsl,sec2.0";
+			reg = <0x30000 0x10000>;
+			interrupts = <45 2 58 2>;
+			interrupt-parent = <&mpic>;
+			fsl,num-channels = <4>;
+			fsl,channel-fifo-len = <24>;
+			fsl,exec-units-mask = <0xbfe>;
+			fsl,descriptor-types-mask = <0x3ab0ebf>;
+		};
+
+		mpic: pic@40000 {
+			interrupt-controller;
+			#address-cells = <0>;
+			#interrupt-cells = <2>;
+			reg = <0x40000 0x40000>;
+			compatible = "chrp,open-pic";
+			device_type = "open-pic";
+		};
+
+		msi@41600 {
+			compatible = "fsl,p2020-msi", "fsl,mpic-msi";
+			reg = <0x41600 0x80>;
+			msi-available-ranges = <0 0x100>;
+			interrupts = <
+				0xe0 0
+				0xe1 0
+				0xe2 0
+				0xe3 0
+				0xe4 0
+				0xe5 0
+				0xe6 0
+				0xe7 0>;
+			interrupt-parent = <&mpic>;
+		};
+
+		global-utilities@e0000 {	//global utilities block
+			compatible = "fsl,p2020-guts";
+			reg = <0xe0000 0x1000>;
+			fsl,has-rstcr;
+		};
+	};
+
+	pci1: pcie@f3009000 {
+		compatible = "fsl,mpc8548-pcie";
+		device_type = "pci";
+		target-id = <1>;
+		#interrupt-cells = <1>;
+		#size-cells = <2>;
+		#address-cells = <3>;
+		reg = <0 0xf3009000 0 0x1000>;
+		bus-range = <0 255>;
+		ranges = <0x2000000 0x0 0xa0000000 0 0xa0000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc30000 0x0 0x10000>;
+		clock-frequency = <33333333>;
+		interrupt-parent = <&mpic>;
+		interrupts = <25 2>;
+		pcie@0 {
+			reg = <0x0 0x0 0x0 0x0 0x0>;
+			#size-cells = <2>;
+			#address-cells = <3>;
+			device_type = "pci";
+			ranges = <0x2000000 0x0 0xa0000000
+				  0x2000000 0x0 0xa0000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x100000>;
+		};
+	};
+	chosen {
+		linux,stdout-path = &serial0;
+	};
+};
diff --git a/arch/powerpc/platforms/85xx/Kconfig b/arch/powerpc/platforms/85xx/Kconfig
index 2f8b0fd..14ad263 100644
--- a/arch/powerpc/platforms/85xx/Kconfig
+++ b/arch/powerpc/platforms/85xx/Kconfig
@@ -156,7 +156,19 @@ config P4080_DS
 	select HAS_RAPIDIO
 	help
 	  This option enables support for the P4080 DS board
- 
+
+config WRHV_MPC85xx_RDB
+	bool "Freescale MPC85xx RDB (WRHV)"
+	depends on WRHV
+	select FSL_ULI1575 if PCI
+	select DEFAULT_UIMAGE
+	select WRHV_E500
+	select PARAVIRT_PTE
+	select SWIOTLB
+	help
+	  This option enables support for Freescale MPC85xx RDB
+	  board running under Wind River hypervisor.
+
 config WRHV_E500
 	bool
 
diff --git a/arch/powerpc/platforms/85xx/Makefile b/arch/powerpc/platforms/85xx/Makefile
index 5c3ffc4..0bb73b8 100644
--- a/arch/powerpc/platforms/85xx/Makefile
+++ b/arch/powerpc/platforms/85xx/Makefile
@@ -19,3 +19,4 @@ obj-$(CONFIG_SBC8548)     += sbc8548.o
 obj-$(CONFIG_SOCRATES)    += socrates.o socrates_fpga_pic.o
 obj-$(CONFIG_KSI8560)	  += ksi8560.o
 obj-$(CONFIG_XES_MPC85xx) += xes_mpc85xx.o
+obj-$(CONFIG_WRHV_MPC85xx_RDB) += wrhv_mpc85xx_rdb.o
diff --git a/arch/powerpc/platforms/85xx/wrhv_mpc85xx_rdb.c b/arch/powerpc/platforms/85xx/wrhv_mpc85xx_rdb.c
new file mode 100644
index 0000000..fdfae2a
--- /dev/null
+++ b/arch/powerpc/platforms/85xx/wrhv_mpc85xx_rdb.c
@@ -0,0 +1,263 @@
+/*
+ * MPC85xx RDB Board Setup
+ *
+ * Copyright 2009 Freescale Semiconductor Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/stddef.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/kdev_t.h>
+#include <linux/delay.h>
+#include <linux/seq_file.h>
+#include <linux/interrupt.h>
+#include <linux/of_platform.h>
+#include <linux/lmb.h>
+#include <linux/lmb.h>
+
+#include <asm/system.h>
+#include <asm/time.h>
+#include <asm/machdep.h>
+#include <asm/pci-bridge.h>
+#include <mm/mmu_decl.h>
+#include <asm/prom.h>
+#include <asm/udbg.h>
+#include <asm/mpic.h>
+
+#include <sysdev/fsl_soc.h>
+#include <sysdev/fsl_pci.h>
+
+#include <asm/wrhv.h>
+#include <vbi/vbi.h>
+
+extern struct vb_config *wr_config;
+extern struct vb_status *wr_status;
+extern struct vb_control *wr_control;
+extern int wrhv_set_law_base(int index, unsigned long long addr);
+extern unsigned long long wrhv_get_law_base(int index);
+extern int wrhv_set_law_attr(int index, unsigned int attr);
+extern int wrhv_get_law_attr(int index);
+
+#undef DEBUG
+
+#ifdef DEBUG
+#define DBG(fmt, args...) printk(KERN_ERR "%s: " fmt, __func__, ## args)
+#else
+#define DBG(fmt, args...)
+#endif
+
+
+static void __init wrhv_mpc85xx_rdb_pic_init(void)
+{
+	wrhv_init_irq();
+}
+
+/*
+ * Setup the architecture
+ */
+#ifdef CONFIG_SMP
+extern void __init wrhv_smp_init(void);
+#endif
+
+extern void elbc_law_fixup(void);
+extern int ppc_prepare_law_setup(void);
+
+static int __init elbc_mem_fixup(void)
+{
+/* BR OR values refer to uboot */
+#define CONFIG_FLASH_BR_PRELIM (0xef000000 | 0x1001)
+#define CONFIG_FLASH_OR_PRELIM (0xff000000 | 0x0ff7)
+#define CONFIG_NAND_BR_PRELIM  (0xffa00000 | 0x0c21)
+#define CONFIG_NAND_OR_PRELIM  (0xfff80000 | 0x0396)
+#define CONFIG_VSC7385_BR_PRELIM (0xffb00000 | 0x0801)
+#define CONFIG_VSC7385_OR_PRELIM (0xfffe0000 | 0x09ff)
+
+	struct device_node *dev;
+	u32 elbc_base;
+	u32 attr;
+	dev = of_find_compatible_node(NULL, NULL, "fsl,p2020-elbc");
+	if (!dev) {
+		printk(KERN_INFO "%s: No elbc device node.\n", __func__);
+		return -1;
+	}
+	elbc_base = (u32)of_iomap(dev, 0);
+
+	/* Refer to uboot, setup elbc BR OR registers */
+	out_be32((void __iomem *)(elbc_base), CONFIG_FLASH_BR_PRELIM);
+	out_be32((void __iomem *)(elbc_base + 0x4),
+				  CONFIG_FLASH_OR_PRELIM);
+	out_be32((void __iomem *)(elbc_base + 0x8),
+				  CONFIG_NAND_BR_PRELIM);
+	out_be32((void __iomem *)(elbc_base + 0xc),
+				  CONFIG_NAND_OR_PRELIM);
+	out_be32((void __iomem *)(elbc_base + 0x10),
+				  CONFIG_VSC7385_BR_PRELIM);
+	out_be32((void __iomem *)(elbc_base + 0x14),
+				  CONFIG_VSC7385_OR_PRELIM);
+
+	ppc_prepare_law_setup();
+
+	/* elbc LAW setup. Hypervisor bootrom uses lAW 0 5 and 6 for elbc,
+	 * So here configure the vaules that linux wants.
+	 */
+	attr = (0x1 << 31) | (4 << 20) | (__ilog2(0x01000000) - 1) ;
+	ppc_md.set_law_attr(0, attr);
+	ppc_md.set_law_base(0, 0xef000000);
+	attr = (0x1 << 31) | (4 << 20) | (__ilog2(0x40000) - 1) ;
+	ppc_md.set_law_attr(6, attr);
+	ppc_md.set_law_base(6, 0xffa00000);
+	attr = (0x1 << 31) | (4 << 20) | (__ilog2(0x20000) - 1) ;
+	ppc_md.set_law_attr(5, attr);
+	ppc_md.set_law_base(5, 0xffb00000);
+
+	iounmap((void __iomem *)elbc_base);
+
+	return 0;
+}
+
+static void __init wrhv_mpc85xx_rdb_setup_arch(void)
+{
+	void __iomem *immap_pmuxcr;
+
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
+	if (ppc_md.progress)
+		ppc_md.progress("wrhv_mpc85xx_rdb_setup_arch()", 0);
+
+	get_hv_bsp_server_handle();
+	wrhv_cpu_freq = get_bsp_clock_freq();
+
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci") {
+		if (of_device_is_compatible(np, "fsl,mpc8548-pcie")) {
+			fsl_add_bridge(np, 0);
+			ppc_setup_pci_law(np);
+		}
+	}
+
+#endif
+	elbc_mem_fixup();
+
+#define MPC85XX_PMUXCR_OFFSET	0xE0060
+#define MPC85XX_PMUXCR_SDHC_CD	0x40000000
+#define MPC85XX_PMUXCR_SDHC_WP	0x20000000
+#define MPC85XX_PMUXCR_SD_DATA	0x80000000
+	immap_pmuxcr = ioremap(get_immrbase() + MPC85XX_PMUXCR_OFFSET,
+				 0x4);
+	if (!immap_pmuxcr)
+		return;
+
+	out_be32(immap_pmuxcr,
+		 in_be32(immap_pmuxcr) & ~MPC85XX_PMUXCR_SD_DATA);
+	out_be32(immap_pmuxcr,
+		 in_be32(immap_pmuxcr) | (MPC85XX_PMUXCR_SDHC_CD
+		 | MPC85XX_PMUXCR_SDHC_WP));
+
+	iounmap(immap_pmuxcr);
+
+#ifdef CONFIG_SMP
+	wrhv_smp_init();
+#endif
+
+	printk(KERN_INFO "WRHV MPC85xx RDB board from Freescale Semiconductor\n");
+}
+
+static struct of_device_id __initdata wrhv_mpc85xxrdb_ids[] = {
+	{ .type = "soc", },
+	{ .compatible = "soc", },
+	{ .compatible = "simple-bus", },
+	{ .compatible = "gianfar", },
+	{},
+};
+
+static int __init wrhv_mpc85xxrdb_publish_devices(void)
+{
+	return of_platform_bus_probe(NULL, wrhv_mpc85xxrdb_ids, NULL);
+}
+machine_device_initcall(wrhv_p2020_rdb, wrhv_mpc85xxrdb_publish_devices);
+
+/*
+ * Called very early, device-tree isn't unflattened
+ */
+static int __init wrhv_p2020_rdb_probe(void)
+{
+	unsigned long root = of_get_flat_dt_root();
+
+	/* wr_config should have been initialized in wrhv_init(),
+	* continue to complete the vbi initialization here.
+	*/
+	wrhv_mapping(); /* Map vb_config structure */
+	vbi_init(wr_config);
+
+	strncpy(cmd_line, VBI_BOOTLINE_ADDR_GET(), VB_MAX_BOOTLINE_LENGTH - 1);
+	cmd_line[VB_MAX_BOOTLINE_LENGTH - 1] = 0;
+
+	/* Save command line for /proc/cmdline */
+	strlcpy(boot_command_line, cmd_line, COMMAND_LINE_SIZE);
+
+	if (of_flat_dt_is_compatible(root, "fsl,P2020RDB"))
+		return 1;
+	return 0;
+}
+
+#ifdef CONFIG_HOTPLUG_CPU
+void wrhv_setup_msr_for_ap(VBI_HREG_SET_CMPLX_QUALIFIED *regs)
+{
+	/*
+	 * The MSR value depends on hypervisor's preparation for us.
+	 * Hypervisor just has one tlb entry in TLB0 with TS == 1 for GOS
+	 * when AP starts from entry point of GOS, aka '_start'. So we
+	 * need to have IS and DS to be '1'. Then it is also well known
+	 * that GOS on e500 is running in 'user mode' and interrupts
+	 * are enabled on hardware hence CE | ME | EE.
+	 */
+	regs->vbiRegSet.hreg32.msr =
+		MSR_CE | MSR_EE | MSR_PR | MSR_ME | MSR_IS | MSR_DS;
+}
+#endif
+
+uint32_t wrhv_get_mdio_bus(struct mii_bus *bus, int mii_id)
+{
+	u32 mdio_addr;
+	if (sscanf(bus->id, "mdio@%x", &mdio_addr) != 1) {
+		printk(KERN_INFO "%s: can't get mdio addr.\n", __func__);
+		return 0;
+	}
+
+	return (mdio_addr & 0x3000) >> 12;
+}
+
+define_machine(wrhv_p2020_rdb) {
+	.name			= "P2020 RDB",
+	.probe			= wrhv_p2020_rdb_probe,
+	.setup_arch		= wrhv_mpc85xx_rdb_setup_arch,
+	.init_IRQ		= wrhv_mpc85xx_rdb_pic_init,
+#ifdef CONFIG_PCI
+	.pcibios_fixup_bus	= fsl_pcibios_fixup_bus,
+	.enable_pci_law		= wrhv_enable_pci_law,
+	.set_law_base		= wrhv_set_law_base,
+	.get_law_base		= wrhv_get_law_base,
+	.set_law_attr		= wrhv_set_law_attr,
+	.get_law_attr		= wrhv_get_law_attr,
+#endif
+	.get_irq		= wrhv_vioapic_get_irq,
+	.restart		= wrhv_restart,
+	.calibrate_decr		= wrhv_calibrate_decr,
+	.progress		= udbg_progress,
+	.earlycon_setup		= wrhv_earlycon_setup,
+	.power_save		= wrhv_power_save,
+	.calibrate_decr		= wrhv_calibrate_decr,
+	.progress		= udbg_progress,
+#ifdef CONFIG_HOTPLUG_CPU
+	.cpu_die        = cpu_die,
+#endif
+	.get_mdio_bus		= wrhv_get_mdio_bus,
+};
+
-- 
1.6.5.2

