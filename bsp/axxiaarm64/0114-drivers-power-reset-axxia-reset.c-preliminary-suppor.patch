From d2ce3112798d98543f849c5ebb8734e8c3c75e70 Mon Sep 17 00:00:00 2001
From: Gary McGee <gary.mcgee@intel.com>
Date: Mon, 7 Dec 2015 14:31:25 +0200
Subject: [PATCH 114/131] drivers/power/reset/axxia-reset.c: preliminary
 support for Axxia DDR Retention reset

Signed-off-by: Gary McGee <gary.mcgee@intel.com>
[Original patch is from linux-yocto-4.1 axxia/base branch.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/power/reset/axxia-reset.c | 66 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/drivers/power/reset/axxia-reset.c b/drivers/power/reset/axxia-reset.c
index 502412a..dd5e50f 100644
--- a/drivers/power/reset/axxia-reset.c
+++ b/drivers/power/reset/axxia-reset.c
@@ -22,6 +22,7 @@
 #include <linux/notifier.h>
 #include <linux/of.h>
 #include <linux/platform_device.h>
+#include <linux/proc_fs.h>
 #include <linux/reboot.h>
 #include <linux/regmap.h>
 
@@ -32,6 +33,70 @@
 
 static struct regmap *syscon;
 
+static int ddr_retention_enabled;
+
+#define SYSCON_PHYS_ADDR 0x8002c00000ULL
+
+void
+initiate_retention_reset(void)
+{
+	void __iomem *syscon;
+
+	if (0 == ddr_retention_enabled) {
+		pr_info("DDR Retention Reset is Not Enabled\n");
+		return;
+	}
+
+	syscon = ioremap(SYSCON_PHYS_ADDR, SZ_64K);
+
+	if (WARN_ON(!syscon))
+		return -ENODEV;
+
+	/* set retention reset bit in pscratch */
+	writel(0x00000001, syscon + 0xdc); /* Access Key */
+
+	/* trap into secure monitor to do the reset */
+	machine_restart(NULL);
+}
+EXPORT_SYMBOL(initiate_retention_reset);
+
+static ssize_t
+axxia_ddr_retention_trigger(struct file *file, const char __user *buf,
+			    size_t count, loff_t *ppos)
+{
+	initiate_retention_reset();
+	return 0;
+}
+
+static const struct file_operations axxia_ddr_retention_proc_ops = {
+	.write      = axxia_ddr_retention_trigger,
+	.llseek     = noop_llseek,
+};
+
+void
+axxia_ddr_retention_init(void)
+{
+	/*
+	* this feature is only meaningful on ASIC systems,
+	* but for now we allow it on simulator
+	*/
+
+/*	if (of_find_compatible_node(NULL, NULL, "lsi,axm5500-amarillo")) { */
+	if (1) {
+		/* Create /proc entry. */
+		if (!proc_create("driver/axxia_ddr_retention_reset",
+				S_IWUSR, NULL, &axxia_ddr_retention_proc_ops)) {
+			pr_info("Failed to register DDR retention proc entry\n");
+		} else {
+			ddr_retention_enabled = 1;
+			pr_info("DDR Retention Reset Initialized\n");
+		}
+	} else {
+		pr_info("DDR Retention Reset is Not Available\n");
+	}
+}
+
+
 static int axxia_restart_handler(struct notifier_block *this,
 				 unsigned long mode, void *cmd)
 {
@@ -84,6 +149,7 @@ static struct platform_driver axxia_reset_driver = {
 
 static int __init axxia_reset_init(void)
 {
+	axxia_ddr_retention_init();
 	return platform_driver_register(&axxia_reset_driver);
 }
 device_initcall(axxia_reset_init);
-- 
2.8.1

