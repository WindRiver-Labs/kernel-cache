From 2b0300eec1df3535f197645055d3542ec5dacb03 Mon Sep 17 00:00:00 2001
From: SangeethaRao <sangeetha.rao@intel.com>
Date: Mon, 4 May 2015 17:31:11 -0500
Subject: [PATCH 029/131] drivers/pci/host: Added Axxia X9 PCIe DesignWare
 driver support

Signed-off-by: SangeethaRao <sangeetha.rao@intel.com>
[Original patch is from linux-yocto-4.1 axxia/base branch.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../devicetree/bindings/pci/intel,axxia-pcie.txt   |  35 ++
 arch/arm64/boot/dts/intel/axm56xx-sim.dtsi         | 101 ++--
 drivers/pci/host/Makefile                          |   2 +-
 drivers/pci/host/pcie-axxia.c                      | 656 +++++++++++++++++++++
 drivers/pci/host/pcie-axxia.h                      |  97 +++
 5 files changed, 833 insertions(+), 58 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/pci/intel,axxia-pcie.txt
 create mode 100644 drivers/pci/host/pcie-axxia.c
 create mode 100644 drivers/pci/host/pcie-axxia.h

diff --git a/Documentation/devicetree/bindings/pci/intel,axxia-pcie.txt b/Documentation/devicetree/bindings/pci/intel,axxia-pcie.txt
new file mode 100644
index 0000000..c7dbcac
--- /dev/null
+++ b/Documentation/devicetree/bindings/pci/intel,axxia-pcie.txt
@@ -0,0 +1,35 @@
+* Intel Axxia Designware PCIe interface
+
+Required properties:
+- compatible: should contain "intel,axxia-pcie" to identify the core.
+- reg: Should contain the DBI, AXI GPREG and CC GPREG address space.
+- reg-names: Must be "dbi" for the DBI, "axi_gpreg" for
+	AXI GPREG and "cc_gpreg" for CC GPREG address space.
+- #address-cells: set to <3>
+- #size-cells: set to <2>
+- device_type: set to "pci"
+- ranges: ranges for the PCI config, outbound memory and I/O regions
+- #interrupt-cells: set to <1>
+- num-lanes: number of lanes to use
+
+Example:
+	pci0: pcie@c000000000 {
+		compatible = "intel,axxia-pcie";
+		device_type = "pci";
+		reg = <0xa0 0x02000000 0x00100000 /* dbi */
+			0xa0 0x03000000 0x00008000 /* AXI gpreg */
+			0xa0 0x03008000 0x00008000>; /* CC gpreg */
+		reg-names = "dbi", "axi_gpreg", "cc_gpreg";
+		#interrupt-cells = <1>;
+		#address-cells = <3>;
+		#size-cells = <2>;
+		num-lanes = <1>;
+		ranges = <0x00000000 0x000000c0 0x40000000
+			  0xc0 0x40000000
+			  0x00 0x10000000         /* config space */
+			  0x03000000 0x00000000 0xa0000000
+			  0xc0 0x00000000
+			  0x00 0x40000000>;       /* outbound mem */
+		interrupts = <GIC_SPI 123 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+	};
diff --git a/arch/arm64/boot/dts/intel/axm56xx-sim.dtsi b/arch/arm64/boot/dts/intel/axm56xx-sim.dtsi
index 26a431d..f84b7a8 100644
--- a/arch/arm64/boot/dts/intel/axm56xx-sim.dtsi
+++ b/arch/arm64/boot/dts/intel/axm56xx-sim.dtsi
@@ -222,79 +222,66 @@
 			interrupts = <GIC_SPI 4 IRQ_TYPE_LEVEL_HIGH>;
 			status = "disabled";
 		};
-
-		pci0: pci@c000000000 {
-			compatible = "lsi,plb-pciex";
+		pci0: pcie@c000000000 {
+			compatible = "intel,axxia-pcie";
 			device_type = "pci";
+			reg = <0xa0 0x02000000 0x00100000 /* dbi */
+				0xa0 0x03000000 0x00008000 /* AXI gpreg */
+				0xa0 0x03008000 0x00008000>; /* CC gpreg */
+			reg-names = "dbi", "axi_gpreg", "cc_gpreg";
 			#interrupt-cells = <1>;
-			#size-cells = <2>;
 			#address-cells = <3>;
-			reg = < 0xc0 0x38000000 0x01000000
-				0xa0 0x02000000 0x00008000 >;
-			/* Outbound ranges */
-			/* < <3-cell PCI addr> <2-cell CPU (PLB) addr>
-			<2-cell size> >*/
-			ranges = <0x03000000 0x00000000 0x80000000
+			#size-cells = <2>;
+			num-lanes = <1>;
+			ranges = <0x00000000 0x000000c0 0x40000000
+				0xc0 0x40000000
+				0x00 0x10000000         /* config space */
+				0x03000000 0x00000000 0xa0000000
 				0xc0 0x00000000
-				0x00 0x20000000>;
-			/* Inbound ranges */
-			/* < <3-cell PCI addr> <2-cell CPU addr>
-			<2-cell size> > */
-			dma-ranges = <0x03000000 0x00000000 0x00000000
-				0x00 0x00000000
-				0x00 0x40000000>;
-			interrupts = <GIC_SPI 91 IRQ_TYPE_LEVEL_HIGH>;
+				0x00 0x40000000>;       /* outbound mem */
+			interrupts = <GIC_SPI 123 IRQ_TYPE_LEVEL_HIGH>;
 			status = "disabled";
 		};
-
-		pci1: pci@c800000000 {
-			compatible = "lsi,plb-pciex";
+		pci1: pcie@c800000000 {
+			compatible = "intel,axxia-pcie";
 			device_type = "pci";
+			reg = <0xa0 0x04000000 0x00100000 /* dbi */
+				0xa0 0x05000000 0x00008000 /* AXI gpreg */
+				0xa0 0x05008000 0x00008000>; /* CC gpreg */
+			reg-names = "dbi", "axi_gpreg", "cc_gpreg";
 			#interrupt-cells = <1>;
-			#size-cells = <2>;
 			#address-cells = <3>;
-			reg = < 0xc8 0x38000000 0x01000000
-				0xa0 0x04000000 0x00008000 >;
-			/* Outbound ranges */
-			/* < <3-cell PCI addr> <2-cell CPU (PLB) addr>
-			<2-cell size> >*/
-			ranges = <0x03000000 0x00000000 0xa0000000
-				  0xc8 0x00000000
-				  0x00 0x20000000>;
-			/* Inbound ranges */
-			/* < <3-cell PCI addr> <2-cell CPU addr>
-			<2-cell size> > */
-			dma-ranges = <0x03000000 0x00000000 0x00000000
-				      0x00 0x00000000
-				      0x00 0x40000000>;
-			interrupts = <GIC_SPI 92 IRQ_TYPE_LEVEL_HIGH>;
+			#size-cells = <2>;
+			num-lanes = <1>;
+			ranges = <0x00000000 0x000000c8 0x40000000
+				0xc8 0x40000000
+				0x00 0x10000000         /* config space */
+				0x03000000 0x00000000 0xa0000000
+				0xc8 0x00000000
+				0x00 0x40000000>;       /* outbound mem */
+			interrupts = <GIC_SPI 124 IRQ_TYPE_LEVEL_HIGH>;
 			status = "disabled";
 		};
-
-		pci2: pci@0xd000000000 {
-			compatible = "lsi,plb-pciex";
+		pci2: pcie@d000000000 {
+			compatible = "intel,axxia-pcie";
 			device_type = "pci";
+			reg = <0xa0 0x06000000 0x00100000 /* dbi */
+				0xa0 0x07000000 0x00008000 /* AXI gpreg */
+				0xa0 0x07008000 0x00008000>; /* CC gpreg */
+			reg-names = "dbi", "axi_gpreg", "cc_gpreg";
 			#interrupt-cells = <1>;
-			#size-cells = <2>;
 			#address-cells = <3>;
-			reg = < 0xd0 0x38000000 0x01000000
-				0xa0 0x06000000 0x00008000 >;
-			/* Outbound ranges */
-			/* < <3-cell PCI addr> <2-cell CPU (PLB) addr>
-			<2-cell size> >*/
-			ranges = <0x03000000 0x00000000 0xc0000000
-				  0xd0 0x00000000
-				  0x00 0x20000000>;
-			/* Inbound ranges */
-			/* < <3-cell PCI addr> <2-cell CPU addr>
-			<2-cell size> > */
-			dma-ranges = <0x03000000 0x00000000 0x00000000
-				      0x00 0x00000000
-				      0x00 0x40000000>;
-			interrupts = <GIC_SPI 93 IRQ_TYPE_LEVEL_HIGH>;
+			#size-cells = <2>;
+			num-lanes = <1>;
+			ranges = <0x00000000 0x000000d0 0x40000000
+				0xd0 0x40000000
+				0x00 0x10000000         /* config space */
+				0x03000000 0x00000000 0xa0000000
+				0xd0 0x00000000
+				0x00 0x40000000>;       /* outbound mem */
+			interrupts = <GIC_SPI 125 IRQ_TYPE_LEVEL_HIGH>;
 			status = "disabled";
 		};
-
 		amba {
 			compatible = "arm,amba-bus";
 			#address-cells = <2>;
diff --git a/drivers/pci/host/Makefile b/drivers/pci/host/Makefile
index 5a48870..4066b7b 100644
--- a/drivers/pci/host/Makefile
+++ b/drivers/pci/host/Makefile
@@ -11,7 +11,7 @@ obj-$(CONFIG_PCIE_SPEAR13XX) += pcie-spear13xx.o
 obj-$(CONFIG_PCI_KEYSTONE) += pci-keystone-dw.o pci-keystone.o
 obj-$(CONFIG_PCIE_XILINX) += pcie-xilinx.o
 obj-$(CONFIG_PCI_XGENE) += pci-xgene.o
-obj-$(CONFIG_PCI_AXXIA) += axxia_pci.o
+obj-$(CONFIG_PCI_AXXIA) += pcie-axxia.o
 obj-$(CONFIG_PCI_LAYERSCAPE) += pci-layerscape.o
 obj-$(CONFIG_PCI_VERSATILE) += pci-versatile.o
 obj-$(CONFIG_PCIE_IPROC) += pcie-iproc.o
diff --git a/drivers/pci/host/pcie-axxia.c b/drivers/pci/host/pcie-axxia.c
new file mode 100644
index 0000000..1c0b12c
--- /dev/null
+++ b/drivers/pci/host/pcie-axxia.c
@@ -0,0 +1,656 @@
+/*
+* PCIe host controller driver for Intel's AXXIA X9/LF devices
+*
+* Copyright (C) 2015 Intel Electronics Co., Ltd.
+*		http://www.intel.com
+*
+* Author: Sangeetha Rao <sangeetha.rao@intel.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License version 2 as
+* published by the Free Software Foundation.
+*/
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/platform_device.h>
+#include <linux/resource.h>
+#include <linux/types.h>
+#include <linux/of_address.h>
+#include <linux/of_pci.h>
+
+#include "pcie-axxia.h"
+
+#define PEI_GENERAL_CORE_CTL_REG 0x38
+#define PEI_SII_PWR_MGMT_REG 0xD4
+#define PEI_SII_DBG_0_MON_REG 0xEC
+
+#define PEI_SMLH_LINK_UP (0x1 << 12)
+#define PEI_SMLH_LINK_STATE (0x3f << 4)
+#define PEI_RDLH_LINK_UP (0x1 << 0)
+
+/* Synopsis specific PCIE configuration registers */
+#define PCIE_PORT_LINK_CONTROL          0x710
+#define PORT_LINK_MODE_MASK             (0x3f << 16)
+#define PORT_LINK_MODE_1_LANES          (0x1 << 16)
+#define PORT_LINK_MODE_2_LANES          (0x3 << 16)
+#define PORT_LINK_MODE_4_LANES          (0x7 << 16)
+
+#define PCIE_LINK_WIDTH_SPEED_CONTROL   0x80C
+#define PORT_LOGIC_SPEED_CHANGE         (0x1 << 17)
+#define PORT_LOGIC_LINK_WIDTH_MASK      (0x1ff << 8)
+#define PORT_LOGIC_LINK_WIDTH_1_LANES   (0x1 << 8)
+#define PORT_LOGIC_LINK_WIDTH_2_LANES   (0x2 << 8)
+#define PORT_LOGIC_LINK_WIDTH_4_LANES   (0x4 << 8)
+
+#define PCIE_MSI_ADDR_LO                0x820
+#define PCIE_MSI_ADDR_HI                0x824
+#define PCIE_MSI_INTR0_ENABLE           0x828
+#define PCIE_MSI_INTR0_MASK             0x82C
+#define PCIE_MSI_INTR0_STATUS           0x830
+
+#define PCIE_ATU_VIEWPORT               0x900
+#define PCIE_ATU_REGION_INBOUND         (0x1 << 31)
+#define PCIE_ATU_REGION_OUTBOUND        (0x0 << 31)
+#define PCIE_ATU_REGION_INDEX1          (0x1 << 0)
+#define PCIE_ATU_REGION_INDEX0          (0x0 << 0)
+#define PCIE_ATU_CR1                    0x904
+#define PCIE_ATU_TYPE_MEM               (0x0 << 0)
+#define PCIE_ATU_TYPE_IO                (0x2 << 0)
+#define PCIE_ATU_TYPE_CFG0              (0x4 << 0)
+#define PCIE_ATU_TYPE_CFG1              (0x5 << 0)
+#define PCIE_ATU_CR2                    0x908
+#define PCIE_ATU_ENABLE                 (0x1 << 31)
+#define PCIE_ATU_BAR_MODE_ENABLE        (0x1 << 30)
+#define PCIE_ATU_LOWER_BASE             0x90C
+#define PCIE_ATU_UPPER_BASE             0x910
+#define PCIE_ATU_LIMIT                  0x914
+#define PCIE_ATU_LOWER_TARGET           0x918
+#define PCIE_ATU_BUS(x)                 (((x) & 0xff) << 24)
+#define PCIE_ATU_DEV(x)                 (((x) & 0x1f) << 19)
+#define PCIE_ATU_FUNC(x)                (((x) & 0x7) << 16)
+#define PCIE_ATU_UPPER_TARGET           0x91C
+
+struct axxia_pcie {
+	struct pcie_port	pp;
+};
+
+static unsigned long global_io_offset;
+
+static inline void axxia_pcie_readl_rc(struct pcie_port *pp, u32 reg, u32 *val)
+{
+	*val = readl(pp->dbi_base + reg);
+}
+
+static inline void axxia_pcie_writel_rc(struct pcie_port *pp, u32 val, u32 reg)
+{
+	writel(val, pp->dbi_base + reg);
+}
+
+static inline void axxia_cc_gpreg_writel(struct pcie_port *pp, u32 val, u32 reg)
+{
+	writel(val, pp->cc_gpreg_base + reg);
+}
+
+static inline void axxia_cc_gpreg_readl(struct pcie_port *pp, u32 reg, u32 *val)
+{
+	*val = readl(pp->cc_gpreg_base + reg);
+}
+
+static inline void axxia_axi_gpreg_writel(struct pcie_port *pp, u32 val,
+	u32 reg)
+{
+	writel(val, pp->axi_gpreg_base + reg);
+}
+
+static inline void axxia_axi_gpreg_readl(struct pcie_port *pp, u32 reg,
+	u32 *val)
+{
+	*val = readl(pp->axi_gpreg_base + reg);
+}
+
+int axxia_pcie_cfg_read(void __iomem *addr, int where, int size, u32 *val)
+{
+	*val = readl(addr);
+
+	if (size == 1)
+		*val = (*val >> (8 * (where & 3))) & 0xff;
+	else if (size == 2)
+		*val = (*val >> (8 * (where & 3))) & 0xffff;
+	else if (size != 4)
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+
+	return PCIBIOS_SUCCESSFUL;
+}
+
+int axxia_pcie_cfg_write(void __iomem *addr, int where, int size, u32 val)
+{
+	if (size == 4)
+		writel(val, addr);
+	else if (size == 2)
+		writew(val, addr + (where & 2));
+	else if (size == 1)
+		writeb(val, addr + (where & 3));
+	else
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+
+	return PCIBIOS_SUCCESSFUL;
+}
+
+static int axxia_pcie_rd_own_conf(struct pcie_port *pp, int where,
+	int size, u32 *val)
+{
+	int ret;
+
+	ret = axxia_pcie_cfg_read(pp->dbi_base + (where & ~0x3),
+		where, size, val);
+	return ret;
+}
+
+static int axxia_pcie_wr_own_conf(struct pcie_port *pp, int where,
+	int size, u32 val)
+{
+	int ret;
+
+	ret = axxia_pcie_cfg_write(pp->dbi_base + (where & ~0x3), where,
+		size, val);
+	return ret;
+}
+
+static void axxia_pcie_prog_viewport_cfg0(struct pcie_port *pp, u32 busdev)
+{
+	/* Program viewport 0 : OUTBOUND : CFG0 */
+	axxia_pcie_writel_rc(pp,
+		PCIE_ATU_REGION_OUTBOUND | PCIE_ATU_REGION_INDEX0,
+		PCIE_ATU_VIEWPORT);
+	axxia_pcie_writel_rc(pp, pp->cfg0_base, PCIE_ATU_LOWER_BASE);
+	axxia_pcie_writel_rc(pp, (pp->cfg0_base >> 32), PCIE_ATU_UPPER_BASE);
+	axxia_pcie_writel_rc(pp, pp->cfg0_base + pp->cfg0_size - 1,
+		PCIE_ATU_LIMIT);
+	axxia_pcie_writel_rc(pp, busdev, PCIE_ATU_LOWER_TARGET);
+	axxia_pcie_writel_rc(pp, 0, PCIE_ATU_UPPER_TARGET);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_TYPE_CFG0, PCIE_ATU_CR1);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_ENABLE, PCIE_ATU_CR2);
+}
+
+
+static void axxia_pcie_prog_viewport_cfg1(struct pcie_port *pp, u32 busdev)
+{
+	/* Program viewport 1 : OUTBOUND : CFG1 */
+	axxia_pcie_writel_rc(pp,
+		PCIE_ATU_REGION_OUTBOUND | PCIE_ATU_REGION_INDEX1,
+		PCIE_ATU_VIEWPORT);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_TYPE_CFG1, PCIE_ATU_CR1);
+	axxia_pcie_writel_rc(pp, pp->cfg1_base, PCIE_ATU_LOWER_BASE);
+	axxia_pcie_writel_rc(pp, (pp->cfg1_base >> 32), PCIE_ATU_UPPER_BASE);
+	axxia_pcie_writel_rc(pp, pp->cfg1_base + pp->cfg1_size - 1,
+		PCIE_ATU_LIMIT);
+	axxia_pcie_writel_rc(pp, busdev, PCIE_ATU_LOWER_TARGET);
+	axxia_pcie_writel_rc(pp, 0, PCIE_ATU_UPPER_TARGET);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_ENABLE, PCIE_ATU_CR2);
+}
+
+static void axxia_pcie_prog_viewport_mem_outbound(struct pcie_port *pp)
+{
+	/* Program viewport 0 : OUTBOUND : MEM */
+	axxia_pcie_writel_rc(pp,
+		PCIE_ATU_REGION_OUTBOUND | PCIE_ATU_REGION_INDEX0,
+		PCIE_ATU_VIEWPORT);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_TYPE_MEM, PCIE_ATU_CR1);
+	axxia_pcie_writel_rc(pp, pp->mem_mod_base, PCIE_ATU_LOWER_BASE);
+	axxia_pcie_writel_rc(pp, (pp->mem_mod_base >> 32), PCIE_ATU_UPPER_BASE);
+	axxia_pcie_writel_rc(pp, pp->mem_mod_base + pp->mem_size - 1,
+		PCIE_ATU_LIMIT);
+	axxia_pcie_writel_rc(pp, pp->mem_bus_addr, PCIE_ATU_LOWER_TARGET);
+	axxia_pcie_writel_rc(pp, upper_32_bits(pp->mem_bus_addr),
+		PCIE_ATU_UPPER_TARGET);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_ENABLE, PCIE_ATU_CR2);
+}
+
+
+static void axxia_pcie_prog_viewport_io_outbound(struct pcie_port *pp)
+{
+	/* Program viewport 1 : OUTBOUND : IO */
+	axxia_pcie_writel_rc(pp,
+		PCIE_ATU_REGION_OUTBOUND | PCIE_ATU_REGION_INDEX1,
+		PCIE_ATU_VIEWPORT);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_TYPE_IO, PCIE_ATU_CR1);
+	axxia_pcie_writel_rc(pp, pp->io_mod_base, PCIE_ATU_LOWER_BASE);
+	axxia_pcie_writel_rc(pp, (pp->io_mod_base >> 32), PCIE_ATU_UPPER_BASE);
+	axxia_pcie_writel_rc(pp, pp->io_mod_base + pp->io_size - 1,
+		PCIE_ATU_LIMIT);
+	axxia_pcie_writel_rc(pp, pp->io_bus_addr, PCIE_ATU_LOWER_TARGET);
+	axxia_pcie_writel_rc(pp, upper_32_bits(pp->io_bus_addr),
+		PCIE_ATU_UPPER_TARGET);
+	axxia_pcie_writel_rc(pp, PCIE_ATU_ENABLE, PCIE_ATU_CR2);
+}
+
+
+static int axxia_pcie_rd_other_conf(struct pcie_port *pp, struct pci_bus *bus,
+	u32 devfn, int where, int size, u32 *val)
+{
+	int ret = PCIBIOS_SUCCESSFUL;
+	u32 address, busdev;
+
+	busdev = PCIE_ATU_BUS(bus->number) | PCIE_ATU_DEV(PCI_SLOT(devfn)) |
+		PCIE_ATU_FUNC(PCI_FUNC(devfn));
+	address = where & ~0x3;
+
+	if (bus->parent->number == pp->root_bus_nr) {
+		axxia_pcie_prog_viewport_cfg0(pp, busdev);
+		ret = axxia_pcie_cfg_read(pp->va_cfg0_base + address, where,
+			size, val);
+		axxia_pcie_prog_viewport_mem_outbound(pp);
+	} else {
+		axxia_pcie_prog_viewport_cfg1(pp, busdev);
+		ret = axxia_pcie_cfg_read(pp->va_cfg1_base + address, where,
+			size, val);
+		axxia_pcie_prog_viewport_io_outbound(pp);
+	}
+	return ret;
+}
+
+static int axxia_pcie_wr_other_conf(struct pcie_port *pp, struct pci_bus *bus,
+	u32 devfn, int where, int size, u32 val)
+{
+	int ret = PCIBIOS_SUCCESSFUL;
+	u32 address, busdev;
+
+	busdev = PCIE_ATU_BUS(bus->number) | PCIE_ATU_DEV(PCI_SLOT(devfn)) |
+	PCIE_ATU_FUNC(PCI_FUNC(devfn));
+	address = where & ~0x3;
+
+	if (bus->parent->number == pp->root_bus_nr) {
+		axxia_pcie_prog_viewport_cfg0(pp, busdev);
+		ret = axxia_pcie_cfg_write(pp->va_cfg0_base + address,
+			where, size, val);
+		axxia_pcie_prog_viewport_mem_outbound(pp);
+	} else {
+		axxia_pcie_prog_viewport_cfg1(pp, busdev);
+		ret = axxia_pcie_cfg_write(pp->va_cfg1_base + address,
+			where, size, val);
+		axxia_pcie_prog_viewport_io_outbound(pp);
+	}
+	return ret;
+}
+
+static int axxia_pcie_valid_config(struct pcie_port *pp,
+	struct pci_bus *bus, int dev)
+{
+	/* If there is no link, then there is no device */
+	if (bus->number != pp->root_bus_nr) {
+		if (!axxia_pcie_link_up(pp))
+			return 0;
+	}
+
+	/* access only one slot on each root port */
+	if (bus->number == pp->root_bus_nr && dev > 0)
+		return 0;
+
+	/*
+	 * do not read more than one device on the bus directly attached
+	 * to RC's (Virtual Bridge's) DS side.
+	 */
+	if (bus->primary == pp->root_bus_nr && dev > 0)
+		return 0;
+
+	return 1;
+}
+
+
+/*
+* Read PCI config space
+*/
+static int
+axxia_pciex_read_config(struct pci_bus *bus, unsigned int devfn,
+	int offset, int len, u32 *val) {
+	struct pcie_port *pp = bus->sysdata;
+	int ret;
+
+	if (axxia_pcie_valid_config(pp, bus, PCI_SLOT(devfn)) == 0) {
+		*val = 0xffffffff;
+		return PCIBIOS_DEVICE_NOT_FOUND;
+	}
+
+	if (bus->number != pp->root_bus_nr)
+		ret = axxia_pcie_rd_other_conf(pp, bus, devfn,
+			offset, len, val);
+	else
+		ret = axxia_pcie_rd_own_conf(pp, offset, len, val);
+
+	return ret;
+}
+
+/*
+* Write PCI config space.
+*/
+static int
+axxia_pciex_write_config(struct pci_bus *bus, unsigned int devfn,
+	int offset, int len, u32 val)
+{
+	struct pcie_port *pp = bus->sysdata;
+	int ret;
+
+	if (axxia_pcie_valid_config(pp, bus, PCI_SLOT(devfn)) == 0)
+		return PCIBIOS_DEVICE_NOT_FOUND;
+
+	if (bus->number != pp->root_bus_nr)
+		ret = axxia_pcie_wr_other_conf(pp, bus, devfn,
+			offset, len, val);
+	else
+		ret = axxia_pcie_wr_own_conf(pp, offset, len, val);
+
+	return ret;
+}
+static struct pci_ops axxia_pciex_pci_ops = {
+	.read  = axxia_pciex_read_config,
+	.write = axxia_pciex_write_config,
+};
+
+
+int axxia_pcie_link_up(struct pcie_port *pp)
+{
+	u32 rdlh_lnk, smlh_lnk, smlh_state;
+
+	axxia_cc_gpreg_readl(pp, PEI_SII_PWR_MGMT_REG, &smlh_lnk);
+	axxia_cc_gpreg_readl(pp, PEI_SII_DBG_0_MON_REG, &rdlh_lnk);
+
+	axxia_cc_gpreg_readl(pp, PEI_SII_PWR_MGMT_REG, &smlh_state);
+	smlh_state = (smlh_state & PEI_SMLH_LINK_STATE) >> 4;
+	if (smlh_state != 0xb) {
+		pr_info("smlh_state = 0x%x\n", smlh_state);
+		pr_err("PCIe LINK IS NOT UP\n");
+		return 0;
+	}
+	return 1;
+}
+
+void axxia_pcie_setup_rc(struct pcie_port *pp)
+{
+	u32 val;
+	u32 membase;
+	u32 memlimit;
+
+	/* set the number of lanes */
+	axxia_pcie_readl_rc(pp, PCIE_PORT_LINK_CONTROL, &val);
+	val &= ~PORT_LINK_MODE_MASK;
+	switch (pp->lanes) {
+	case 1:
+		val |= PORT_LINK_MODE_1_LANES;
+	break;
+	case 2:
+		val |= PORT_LINK_MODE_2_LANES;
+	break;
+	case 4:
+		val |= PORT_LINK_MODE_4_LANES;
+	break;
+	}
+	axxia_pcie_writel_rc(pp, val, PCIE_PORT_LINK_CONTROL);
+
+	/* set link width speed control register */
+	axxia_pcie_readl_rc(pp, PCIE_LINK_WIDTH_SPEED_CONTROL, &val);
+	val &= ~PORT_LOGIC_LINK_WIDTH_MASK;
+	switch (pp->lanes) {
+	case 1:
+		val |= PORT_LOGIC_LINK_WIDTH_1_LANES;
+	break;
+	case 2:
+		val |= PORT_LOGIC_LINK_WIDTH_2_LANES;
+	break;
+	case 4:
+		val |= PORT_LOGIC_LINK_WIDTH_4_LANES;
+	break;
+	}
+
+	axxia_pcie_writel_rc(pp, val, PCIE_LINK_WIDTH_SPEED_CONTROL);
+
+	/* setup bus numbers */
+	axxia_pcie_readl_rc(pp, PCI_PRIMARY_BUS, &val);
+	val &= 0xff000000;
+	val |= 0x00010100;
+	axxia_pcie_writel_rc(pp, val, PCI_PRIMARY_BUS);
+
+	/* setup memory base, memory limit */
+	membase = ((u32)pp->mem_base & 0xfff00000) >> 16;
+	memlimit = (pp->mem_size + (u32)pp->mem_base) & 0xfff00000;
+	val = memlimit | membase;
+	axxia_pcie_writel_rc(pp, val, PCI_MEMORY_BASE);
+
+	/* setup command register */
+	axxia_pcie_readl_rc(pp, PCI_COMMAND, &val);
+	val &= 0xffff0000;
+	val |= PCI_COMMAND_IO | PCI_COMMAND_MEMORY |
+		PCI_COMMAND_MASTER | PCI_COMMAND_SERR;
+	axxia_pcie_writel_rc(pp, val, PCI_COMMAND);
+
+	/* LTSSM enable */
+	axxia_cc_gpreg_readl(pp, PEI_GENERAL_CORE_CTL_REG, &val);
+	val |= 0x1;
+	axxia_cc_gpreg_writel(pp, 0x1, PEI_GENERAL_CORE_CTL_REG);
+}
+
+static int axxia_pcie_establish_link(struct pcie_port *pp)
+{
+
+	if (axxia_pcie_link_up(pp)) {
+		dev_err(pp->dev, "Link already up\n");
+		return 0;
+	}
+
+	/* setup root complex */
+	axxia_pcie_setup_rc(pp);
+
+	if (axxia_pcie_link_up(pp))
+		dev_info(pp->dev, "Link up\n");
+
+	return 0;
+}
+
+int __init axxia_pcie_host_init(struct pcie_port *pp)
+{
+	struct device_node *np = pp->dev->of_node;
+	struct platform_device *pdev = to_platform_device(pp->dev);
+	struct of_pci_range range;
+	struct of_pci_range_parser parser;
+	u32 val, na, ns;
+	int ret;
+	struct pci_bus *bus;
+	unsigned long mem_offset;
+	LIST_HEAD(res);
+
+	/* Find the address cell size and the number of cells in order to get
+	 * the untranslated address.
+	 */
+	of_property_read_u32(np, "#address-cells", &na);
+	ns = of_n_size_cells(np);
+
+	if (of_pci_range_parser_init(&parser, np)) {
+		dev_err(pp->dev, "missing ranges property\n");
+		return -EINVAL;
+	}
+
+	/* Get the I/O and memory ranges from DT */
+	for_each_of_pci_range(&parser, &range) {
+		unsigned long restype = range.flags & IORESOURCE_TYPE_BITS;
+
+		if (restype == IORESOURCE_IO) {
+			of_pci_range_to_resource(&range, np, &pp->io);
+			pp->io.name = "I/O";
+			pp->io.start = max_t(resource_size_t,
+				PCIBIOS_MIN_IO,
+				range.pci_addr + global_io_offset);
+			pp->io.end = min_t(resource_size_t,
+				IO_SPACE_LIMIT,
+				range.pci_addr + range.size
+				+ global_io_offset - 1);
+			pp->io_size = resource_size(&pp->io);
+			pp->io_bus_addr = range.pci_addr;
+			pp->io_base = range.cpu_addr;
+
+			/* Find the untranslated IO space address */
+			pp->io_mod_base = of_read_number(parser.range -
+				parser.np + na, ns);
+		}
+		if (restype == IORESOURCE_MEM) {
+			of_pci_range_to_resource(&range, np, &pp->mem);
+			pp->mem.name = "MEM";
+			pp->mem_size = resource_size(&pp->mem);
+			pp->mem_bus_addr = range.pci_addr;
+
+			/* Find the untranslated MEM space address */
+			pp->mem_mod_base = of_read_number(parser.range -
+				parser.np + na, ns);
+			pp->mem_mod_base = pp->mem.start;
+		}
+		if (restype == 0) {
+			of_pci_range_to_resource(&range, np, &pp->cfg);
+			pp->cfg0_size = resource_size(&pp->cfg)/2;
+			pp->cfg1_size = resource_size(&pp->cfg)/2;
+			pp->cfg0_base = pp->cfg.start;
+			pp->cfg1_base = pp->cfg.start + pp->cfg0_size;
+		}
+	}
+
+	ret = of_pci_parse_bus_range(np, &pp->busn);
+	if (ret < 0) {
+		pp->busn.name = np->name;
+		pp->busn.start = 0;
+		pp->busn.end = 0xff;
+		pp->busn.flags = IORESOURCE_BUS;
+		dev_dbg(pp->dev,
+		"failed to parse bus-range property: %d, using default %pR\n",
+			ret, &pp->busn);
+	}
+
+	mem_offset = pp->mem.start - pp->mem_bus_addr;
+	pci_add_resource_offset(&res, &pp->mem, mem_offset);
+	pci_add_resource(&res, &pp->busn);
+	pp->mem_base = pp->mem.start;
+
+	if (!pp->va_cfg0_base) {
+		pp->va_cfg0_base = devm_ioremap(pp->dev, pp->cfg0_base,
+			pp->cfg0_size);
+		if (!pp->va_cfg0_base) {
+			dev_err(pp->dev, "error with ioremap in function\n");
+			return -ENOMEM;
+		}
+	}
+
+	if (!pp->va_cfg1_base) {
+		pp->va_cfg1_base = devm_ioremap(pp->dev, pp->cfg1_base,
+			pp->cfg1_size);
+		if (!pp->va_cfg1_base) {
+			dev_err(pp->dev, "error with ioremap\n");
+			return -ENOMEM;
+		}
+	}
+
+	if (of_property_read_u32(np, "num-lanes", &pp->lanes)) {
+		dev_err(pp->dev, "Failed to parse the number of lanes\n");
+		return -EINVAL;
+	}
+
+
+	axxia_pcie_establish_link(pp);
+
+
+	/* program correct class for RC */
+	axxia_pcie_wr_own_conf(pp, PCI_CLASS_DEVICE, 2, PCI_CLASS_BRIDGE_PCI);
+
+	axxia_pcie_rd_own_conf(pp, PCIE_LINK_WIDTH_SPEED_CONTROL, 4, &val);
+	val |= PORT_LOGIC_SPEED_CHANGE;
+	axxia_pcie_wr_own_conf(pp, PCIE_LINK_WIDTH_SPEED_CONTROL, 4, val);
+
+	bus = pci_create_root_bus(&pdev->dev, 0,
+		&axxia_pciex_pci_ops, pp, &res);
+	if (!bus)
+		return 1;
+
+	pci_scan_child_bus(bus);
+	pci_assign_unassigned_bus_resources(bus);
+	pci_bus_add_devices(bus);
+
+	platform_set_drvdata(pdev, pp);
+
+	return 0;
+}
+
+
+static int __init axxia_pcie_probe(struct platform_device *pdev)
+{
+	struct axxia_pcie *axxia_pcie;
+	struct pcie_port *pp;
+	struct resource *res;
+	int ret;
+
+	axxia_pcie = devm_kzalloc(&pdev->dev, sizeof(*axxia_pcie),
+				GFP_KERNEL);
+	if (!axxia_pcie)
+		return -ENOMEM;
+
+	pp = &axxia_pcie->pp;
+
+	pp->dev = &pdev->dev;
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "dbi");
+	pp->dbi_base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(pp->dbi_base))
+		return PTR_ERR(pp->dbi_base);
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "axi_gpreg");
+	pp->axi_gpreg_base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(pp->axi_gpreg_base))
+		return PTR_ERR(pp->axi_gpreg_base);
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "cc_gpreg");
+	pp->cc_gpreg_base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(pp->cc_gpreg_base))
+		return PTR_ERR(pp->cc_gpreg_base);
+
+	ret = axxia_pcie_host_init(pp);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to initialize host\n");
+		return ret;
+	}
+
+	return 0;
+
+}
+
+static int __exit axxia_pcie_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id axxia_pcie_of_match[] = {
+	{ .compatible = "intel,axxia-pcie", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, axxia_pcie_of_match);
+
+static struct platform_driver axxia_pcie_driver = {
+	.remove		= __exit_p(axxia_pcie_remove),
+	.driver = {
+		.name	= "axxia-pcie",
+		.owner	= THIS_MODULE,
+		.of_match_table = axxia_pcie_of_match,
+	},
+};
+
+/* Axxia PCIe driver does not allow module unload */
+
+static int __init pcie_init(void)
+{
+
+	return platform_driver_probe(&axxia_pcie_driver, axxia_pcie_probe);
+}
+subsys_initcall(pcie_init);
+
+MODULE_AUTHOR("Sangeetha Rao <sangeetha.rao@intel.com>");
+MODULE_DESCRIPTION("Axxia PCIe host controller driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/pci/host/pcie-axxia.h b/drivers/pci/host/pcie-axxia.h
new file mode 100644
index 0000000..4618258
--- /dev/null
+++ b/drivers/pci/host/pcie-axxia.h
@@ -0,0 +1,97 @@
+/*
+ * Axxia PCIe host controller driver
+ *
+ * Copyright (C) 2015 Intel Electronics Co., Ltd.
+ *               http://www.intel.com
+ *
+ * Author: Sangeetha Rao <sangeetha.rao@intel.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef _PCIE_AXXIA_H
+#define _PCIE_AXXIA_H
+
+#if 0
+/*
+ * Maximum number of MSI IRQs can be 256 per controller. But keep
+ * it 32 as of now. Probably we will never need more than 32. If needed,
+ * then increment it in multiple of 32.
+ */
+#define MAX_MSI_IRQS			32
+#define MAX_MSI_CTRLS			(MAX_MSI_IRQS / 32)
+#endif
+
+struct pcie_port {
+	struct device		*dev;
+	u8			root_bus_nr;
+	void __iomem		*dbi_base;
+	void __iomem		*cc_gpreg_base;
+	void __iomem		*axi_gpreg_base;
+	u64			cfg0_base;
+	u64			cfg0_mod_base;
+	void __iomem		*va_cfg0_base;
+	u32			cfg0_size;
+	u64			cfg1_base;
+	u64			cfg1_mod_base;
+	void __iomem		*va_cfg1_base;
+	u32			cfg1_size;
+	u64			io_base;
+	u64			io_mod_base;
+	phys_addr_t		io_bus_addr;
+	u32			io_size;
+	u64			mem_base;
+	u64			mem_mod_base;
+	phys_addr_t		mem_bus_addr;
+	u32			mem_size;
+	struct resource		cfg;
+	struct resource		io;
+	struct resource		mem;
+	struct resource		busn;
+	u32			lanes;
+	struct pcie_host_ops	*ops;
+#if 0
+	int			irq;
+	u32			lanes;
+	struct pcie_host_ops	*ops;
+	int			msi_irq;
+	struct irq_domain	*irq_domain;
+	unsigned long		msi_data;
+	DECLARE_BITMAP(msi_irq_in_use, MAX_MSI_IRQS);
+#endif
+};
+
+struct pcie_host_ops {
+	void (*readl_rc)(struct pcie_port *pp,
+			void __iomem *dbi_base, u32 *val);
+	void (*writel_rc)(struct pcie_port *pp,
+			u32 val, void __iomem *dbi_base);
+	int (*rd_own_conf)(struct pcie_port *pp, int where, int size, u32 *val);
+	int (*wr_own_conf)(struct pcie_port *pp, int where, int size, u32 val);
+	int (*rd_other_conf)(struct pcie_port *pp, struct pci_bus *bus,
+			unsigned int devfn, int where, int size, u32 *val);
+	int (*wr_other_conf)(struct pcie_port *pp, struct pci_bus *bus,
+			unsigned int devfn, int where, int size, u32 val);
+	int (*link_up)(struct pcie_port *pp);
+	void (*host_init)(struct pcie_port *pp);
+	void (*msi_set_irq)(struct pcie_port *pp, int irq);
+	void (*msi_clear_irq)(struct pcie_port *pp, int irq);
+	u32 (*get_msi_addr)(struct pcie_port *pp);
+	u32 (*get_msi_data)(struct pcie_port *pp, int pos);
+	void (*scan_bus)(struct pcie_port *pp);
+	int (*msi_host_init)(struct pcie_port *pp, struct msi_chip *chip);
+};
+
+int axxia_pcie_cfg_read(void __iomem *addr, int where, int size, u32 *val);
+int axxia_pcie_cfg_write(void __iomem *addr, int where, int size, u32 val);
+#if 0
+irqreturn_t dw_handle_msi_irq(struct pcie_port *pp);
+void dw_pcie_msi_init(struct pcie_port *pp);
+#endif
+int axxia_pcie_link_up(struct pcie_port *pp);
+void axxia_pcie_setup_rc(struct pcie_port *pp);
+int axxia_pcie_host_init(struct pcie_port *pp);
+
+#endif /* _PCIE_AXXIA_H */
-- 
2.8.1

