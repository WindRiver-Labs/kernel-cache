From f7e2dc42ff1c78d8a0c5dfda888edd923b717b0e Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Tue, 2 Jun 2015 16:07:37 +0800
Subject: [PATCH] emgd/emgd_fbcon: fix drm crtc timestamp calculation error

The current emgd driver has following error during boot when
configured as below:
1, set the init and kms to 1 in the config_drm [user_config.c]
2, compile the emgd as a built-in driver

Boot time error:
[drm:drm_calc_timestamping_constants] *ERROR* crtc 3: Can't calculate constants, dotclock = 0!

The error occurs after the upstream commit 27641c3f
[drm/vblank: Add support for precise vblank timestamping.],
because the CRTC mode setting procedure needs a display mode
clock value after the commit.

Fix it by providing a display mode clock value when loading
the emged driver.

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c |   59 +++++++++++++++++++++++++++-
 1 files changed, 58 insertions(+), 1 deletions(-)

diff --git a/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c b/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c
index 9a075e3..5968d88 100644
--- a/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c
+++ b/drivers/gpu/drm/emgd/emgd/drm/emgd_fbcon.c
@@ -648,12 +648,17 @@ static int emgd_fbcon_blank(int blank, struct fb_info *info)
  */
 int emgd_fbcon_initial_config(emgd_fbdev_t *emgd_fbdev)
 {
-	int                    err;
+	int                    i, j, err;
 	unsigned long         *dc_assigned;
 	igd_context_t         *context;
 	unsigned short         port_number;
 	emgd_crtc_t           *emgd_crtc;
 	struct drm_crtc       *crtc         = NULL;
+	igd_param_t           *params = NULL;
+	igd_display_params_t  *display_params = NULL;
+	igd_display_info_t    *dtd = NULL;
+	int port_num          = 0;
+	int dot_clock         = -1;
 	igd_display_context_t *primary      = NULL, *secondary = NULL;
 	bool                   mode_set_ret = FALSE;
 	struct drm_device     *dev          = emgd_fbdev->priv->ddev;
@@ -741,7 +746,53 @@ int emgd_fbcon_initial_config(emgd_fbdev_t *emgd_fbdev)
 			emgd_fbdev->priv->fbdev->fix.id);
 	}
 
+	/* Consider module parameter configid when selecting the hal params */
+	if (drm_emgd_configid < 0) {
+                params = config_drm.hal_params[0];
+        } else {
+                params = config_drm.hal_params[drm_emgd_configid-1];
+        }
+
+	/* Select the dot clock from the display port order list.
+	 * The port_order array has default values which can be overriden
+	 * by the module parameter. Use the dot-clock value from the first
+	 * port number specified in the port_order array.
+	 */
+	display_params = params->display_params;
+	for (i = 0; i < IGD_MAX_PORTS; i++) {
+		port_num = params->port_order[i];
+		if (!(port_num >= 0 && port_num < IGD_MAX_PORTS)) {
+			EMGD_ERROR("Display port number %d out of scope,"
+				"fail to set dot-clock for CRTC!\n", port_num);
+			dot_clock = -1;
+			goto set_mode;
+		}
+		for (j = 0; j < IGD_MAX_PORTS; j++) {
+			if (port_num == display_params[j].port_number) {
+				if ((dtd = display_params[j].dtd_list.dtd)) {
+					/* We have got a valid dot-clock from
+					 * the spcified port number, use it.
+					 * Depends on the fact that the display
+					 * ports are not used at the same time.
+					 */
+					dot_clock = dtd->dclk;
+					goto set_mode;
+				} else {
+					EMGD_ERROR("Display port %d "
+					 "has no valid DTD entry\n", port_num);
+					dot_clock = -1;
+					goto set_mode;
+				}
+			}
+		}
+	}
+
+	/* Warn loudly when there is no dot-clock available for use */
+	if (dot_clock < 0) {
+		EMGD_ERROR("No valid dot-clock available for CRTC!\n");
+	}
 
+set_mode:
 	/*******************************************************
 	 * Set Mode for Primary
 	 ******************************************************/
@@ -755,6 +806,9 @@ int emgd_fbcon_initial_config(emgd_fbdev_t *emgd_fbdev)
 			primary_mode.crtc_vdisplay = config_drm.height;
 			primary_mode.vrefresh      = config_drm.refresh;
 
+			if (dot_clock > 0)
+				primary_mode.clock = dot_clock;
+
 			mode_set_ret = drm_crtc_helper_set_mode(crtc,
 								&primary_mode,
 								0, 0,
@@ -784,6 +838,9 @@ int emgd_fbcon_initial_config(emgd_fbdev_t *emgd_fbdev)
 				secondary_mode.crtc_vdisplay = config_drm.height;
 				secondary_mode.vrefresh      = config_drm.refresh;
 
+				if (dot_clock > 0)
+					secondary_mode.clock = dot_clock;
+
 				mode_set_ret = drm_crtc_helper_set_mode(crtc,
 								&secondary_mode,
 								0, 0,
-- 
1.7.5.4

