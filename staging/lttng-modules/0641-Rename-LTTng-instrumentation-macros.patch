From 4139bf015ec62cdd3d5c26978f5c7bac304ed47e Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Tue, 9 Sep 2014 07:48:17 -0400
Subject: [PATCH 641/933] Rename LTTng instrumentation macros

Since LTTng instrumentation macros have a different layout than the
Linux kernel TRACE_EVENT macros, privatize the name.

Here is the mapping:

DECLARE_EVENT_CLASS -> LTTNG_TRACEPOINT_EVENT_CLASS
DEFINE_EVENT -> LTTNG_TRACEPOINT_EVENT_INSTANCE
TRACE_EVENT -> LTTNG_TRACEPOINT_EVENT
TRACE_EVENT_CONDITION -> LTTNG_TRACEPOINT_EVENT_CONDITION
DEFINE_EVENT_CONDITION -> LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION
TRACE_EVENT_MAP -> LTTNG_TRACEPOINT_EVENT_MAP
DEFINE_EVENT_MAP -> LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP

LTTNG_V4L2_TRACEPOINT_EVENT -> LTTNG_TRACEPOINT_EVENT_V4L2
DEFINE_WRITEBACK_WORK_EVENT ->
LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE
DEFINE_WBC_EVENT -> LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE

DEFINE_EVENT_NOARGS -> LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS
TRACE_EVENT_FLAGS -> REMOVE

LTTNG_DECLARE_EVENT_CLASS -> LTTNG_TRACEPOINT_EVENT_CLASS_CODE
LTTNG_DECLARE_EVENT_CLASS_NOARGS ->
LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
LTTNG_TRACE_EVENT -> LTTNG_TRACEPOINT_EVENT_CODE

TRACE_EVENT_MAP_NOARGS -> LTTNG_TRACEPOINT_EVENT_MAP_NOARGS
DECLARE_EVENT_CLASS_NOARGS -> LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS

DEFINE_EVENT_MAP_NOARGS -> LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS

DEFINE_EVENT_PRINT -> LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT
DEFINE_EVENT_PRINT_MAP -> LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP

DEFINE_EVENT_CONDITION_MAP ->
LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION_MAP
TRACE_EVENT_CONDITION_MAP -> LTTNG_TRACEPOINT_EVENT_CONDITION_MAP

TRACE_EVENT_NOARGS -> LTTNG_TRACEPOINT_EVENT_NOARGS
TRACE_EVENT_FN_MAP -> LTTNG_TRACEPOINT_EVENT_FN_MAP
TRACE_EVENT_FN -> LTTNG_TRACEPOINT_EVENT_FN

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../events/lttng-module/arch/x86/kvm/mmutrace.h    |  36 +--
 .../events/lttng-module/arch/x86/kvm/trace.h       |  66 +++---
 .../instrumentation/events/lttng-module/asoc.h     |  56 ++---
 .../instrumentation/events/lttng-module/block.h    |  74 +++---
 .../instrumentation/events/lttng-module/btrfs.h    |  80 +++----
 .../events/lttng-module/compaction.h               |  18 +-
 .../instrumentation/events/lttng-module/ext3.h     |  92 ++++----
 .../instrumentation/events/lttng-module/ext4.h     | 252 ++++++++++-----------
 .../instrumentation/events/lttng-module/gpio.h     |  12 +-
 .../instrumentation/events/lttng-module/irq.h      |  28 +--
 .../instrumentation/events/lttng-module/jbd.h      |  32 +--
 .../instrumentation/events/lttng-module/jbd2.h     |  36 +--
 .../instrumentation/events/lttng-module/kmem.h     |  46 ++--
 .../instrumentation/events/lttng-module/kvm.h      |  40 ++--
 .../instrumentation/events/lttng-module/lock.h     |  26 +--
 .../events/lttng-module/lttng-statedump.h          |  24 +-
 .../instrumentation/events/lttng-module/lttng.h    |  10 +-
 .../instrumentation/events/lttng-module/module.h   |  20 +-
 .../instrumentation/events/lttng-module/napi.h     |  10 +-
 .../instrumentation/events/lttng-module/net.h      |  18 +-
 .../instrumentation/events/lttng-module/power.h    |  42 ++--
 .../instrumentation/events/lttng-module/printk.h   |  14 +-
 .../instrumentation/events/lttng-module/random.h   |  24 +-
 .../instrumentation/events/lttng-module/rcu.h      |  42 ++--
 .../instrumentation/events/lttng-module/regmap.h   |  34 +--
 .../events/lttng-module/regulator.h                |  26 +--
 .../instrumentation/events/lttng-module/rpm.h      |  18 +-
 .../instrumentation/events/lttng-module/sched.h    |  58 ++---
 .../instrumentation/events/lttng-module/scsi.h     |  20 +-
 .../instrumentation/events/lttng-module/signal.h   |  20 +-
 .../instrumentation/events/lttng-module/skb.h      |  14 +-
 .../instrumentation/events/lttng-module/sock.h     |  12 +-
 .../instrumentation/events/lttng-module/sunrpc.h   |  30 +--
 .../instrumentation/events/lttng-module/syscalls.h |  12 +-
 .../instrumentation/events/lttng-module/timer.h    |  36 +--
 .../instrumentation/events/lttng-module/udp.h      |  10 +-
 .../instrumentation/events/lttng-module/v4l2.h     |  16 +-
 .../instrumentation/events/lttng-module/vmscan.h   |  56 ++---
 .../events/lttng-module/workqueue.h                |  28 +--
 .../events/lttng-module/writeback.h                |  77 +++----
 .../headers/arm-32-syscalls-3.4.25_integers.h      |   2 +-
 .../headers/arm-32-syscalls-3.4.25_pointers.h      |   2 +-
 .../headers/mips-32-syscalls-3.13.0_integers.h     |   2 +-
 .../headers/mips-32-syscalls-3.13.0_pointers.h     |   2 +-
 .../headers/mips-32-syscalls-3.5.0_integers.h      |   2 +-
 .../headers/mips-32-syscalls-3.5.0_pointers.h      |   2 +-
 .../headers/mips-64-syscalls-3.5.0_integers.h      |   2 +-
 .../headers/mips-64-syscalls-3.5.0_pointers.h      |   2 +-
 .../headers/powerpc-32-syscalls-3.0.34_integers.h  |   2 +-
 .../headers/powerpc-32-syscalls-3.0.34_pointers.h  |   2 +-
 .../syscalls/headers/syscalls_unknown.h            |  10 +-
 .../headers/x86-32-syscalls-3.1.0-rc6_integers.h   |   2 +-
 .../headers/x86-32-syscalls-3.1.0-rc6_pointers.h   |   2 +-
 .../headers/x86-64-syscalls-3.10.0-rc7_integers.h  |   2 +-
 .../headers/x86-64-syscalls-3.10.0-rc7_pointers.h  |   2 +-
 .../syscalls/lttng-syscalls-generate-headers.sh    |   2 +-
 drivers/staging/lttng/lttng-statedump-impl.c       |   1 +
 drivers/staging/lttng/lttng-syscalls.c             |  60 +++--
 drivers/staging/lttng/probes/define_trace.h        | 119 +++++-----
 drivers/staging/lttng/probes/lttng-events-reset.h  |  19 +-
 drivers/staging/lttng/probes/lttng-events.h        | 211 ++++++++---------
 .../staging/lttng/probes/lttng-tracepoint-event.h  |  72 ++++++
 drivers/staging/lttng/probes/lttng.c               |   1 +
 63 files changed, 1077 insertions(+), 1011 deletions(-)
 create mode 100644 drivers/staging/lttng/probes/lttng-tracepoint-event.h

diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/mmutrace.h b/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/mmutrace.h
index 56ddbab..2b71d44 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/mmutrace.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/mmutrace.h
@@ -1,7 +1,7 @@
-#if !defined(_TRACE_KVMMMU_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_KVMMMU_H
+#if !defined(LTTNG_TRACE_KVMMMU_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_KVMMMU_H
 
-#include <linux/tracepoint.h>
+#include "../../../../../../probes/lttng-tracepoint-event.h"
 #include <linux/ftrace_event.h>
 
 #undef TRACE_SYSTEM
@@ -52,7 +52,7 @@
 /*
  * A pagetable walk has started
  */
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	kvm_mmu_pagetable_walk,
 	TP_PROTO(u64 addr, u32 pferr),
 	TP_ARGS(addr, pferr),
@@ -73,7 +73,7 @@ TRACE_EVENT(
 
 
 /* We just walked a paging element */
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	kvm_mmu_paging_element,
 	TP_PROTO(u64 pte, int level),
 	TP_ARGS(pte, level),
@@ -91,7 +91,7 @@ TRACE_EVENT(
 	TP_printk("pte %llx level %u", __entry->pte, __entry->level)
 )
 
-DECLARE_EVENT_CLASS(kvm_mmu_set_bit_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(kvm_mmu_set_bit_class,
 
 	TP_PROTO(unsigned long table_gfn, unsigned index, unsigned size),
 
@@ -110,7 +110,7 @@ DECLARE_EVENT_CLASS(kvm_mmu_set_bit_class,
 )
 
 /* We set a pte accessed bit */
-DEFINE_EVENT(kvm_mmu_set_bit_class, kvm_mmu_set_accessed_bit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_mmu_set_bit_class, kvm_mmu_set_accessed_bit,
 
 	TP_PROTO(unsigned long table_gfn, unsigned index, unsigned size),
 
@@ -118,14 +118,14 @@ DEFINE_EVENT(kvm_mmu_set_bit_class, kvm_mmu_set_accessed_bit,
 )
 
 /* We set a pte dirty bit */
-DEFINE_EVENT(kvm_mmu_set_bit_class, kvm_mmu_set_dirty_bit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_mmu_set_bit_class, kvm_mmu_set_dirty_bit,
 
 	TP_PROTO(unsigned long table_gfn, unsigned index, unsigned size),
 
 	TP_ARGS(table_gfn, index, size)
 )
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	kvm_mmu_walker_error,
 	TP_PROTO(u32 pferr),
 	TP_ARGS(pferr),
@@ -142,7 +142,7 @@ TRACE_EVENT(
 		  __print_flags(__entry->pferr, "|", kvm_mmu_trace_pferr_flags))
 )
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	kvm_mmu_get_page,
 	TP_PROTO(struct kvm_mmu_page *sp, bool created),
 	TP_ARGS(sp, created),
@@ -161,7 +161,7 @@ TRACE_EVENT(
 		  __entry->created ? "new" : "existing")
 )
 
-DECLARE_EVENT_CLASS(kvm_mmu_page_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(kvm_mmu_page_class,
 
 	TP_PROTO(struct kvm_mmu_page *sp),
 	TP_ARGS(sp),
@@ -177,25 +177,25 @@ DECLARE_EVENT_CLASS(kvm_mmu_page_class,
 	TP_printk("%s", KVM_MMU_PAGE_PRINTK())
 )
 
-DEFINE_EVENT(kvm_mmu_page_class, kvm_mmu_sync_page,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_mmu_page_class, kvm_mmu_sync_page,
 	TP_PROTO(struct kvm_mmu_page *sp),
 
 	TP_ARGS(sp)
 )
 
-DEFINE_EVENT(kvm_mmu_page_class, kvm_mmu_unsync_page,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_mmu_page_class, kvm_mmu_unsync_page,
 	TP_PROTO(struct kvm_mmu_page *sp),
 
 	TP_ARGS(sp)
 )
 
-DEFINE_EVENT(kvm_mmu_page_class, kvm_mmu_prepare_zap_page,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_mmu_page_class, kvm_mmu_prepare_zap_page,
 	TP_PROTO(struct kvm_mmu_page *sp),
 
 	TP_ARGS(sp)
 )
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	mark_mmio_spte,
 	TP_PROTO(u64 *sptep, gfn_t gfn, unsigned access),
 	TP_ARGS(sptep, gfn, access),
@@ -216,7 +216,7 @@ TRACE_EVENT(
 		  __entry->access)
 )
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	handle_mmio_page_fault,
 	TP_PROTO(u64 addr, gfn_t gfn, unsigned access),
 	TP_ARGS(addr, gfn, access),
@@ -240,7 +240,7 @@ TRACE_EVENT(
 #define __spte_satisfied(__spte)				\
 	(__entry->retry && is_writable_pte(__entry->__spte))
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	fast_page_fault,
 	TP_PROTO(struct kvm_vcpu *vcpu, gva_t gva, u32 error_code,
 		 u64 *sptep, u64 old_spte, bool retry),
@@ -274,7 +274,7 @@ TRACE_EVENT(
 		  __spte_satisfied(old_spte), __spte_satisfied(new_spte)
 	)
 )
-#endif /* _TRACE_KVMMMU_H */
+#endif /* LTTNG_TRACE_KVMMMU_H */
 
 #undef TRACE_INCLUDE_PATH
 #define TRACE_INCLUDE_PATH ../instrumentation/events/lttng-module/arch/x86/kvm
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/trace.h b/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/trace.h
index 3c299c5..56b2e09 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/trace.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/arch/x86/kvm/trace.h
@@ -1,7 +1,7 @@
-#if !defined(_TRACE_KVM_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_KVM_H
+#if !defined(LTTNG_TRACE_KVM_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_KVM_H
 
-#include <linux/tracepoint.h>
+#include "../../../../../../probes/lttng-tracepoint-event.h"
 #include <asm/vmx.h>
 #include <asm/svm.h>
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,8,0))
@@ -17,7 +17,7 @@
 /*
  * Tracepoint for guest mode entry.
  */
-TRACE_EVENT(kvm_entry,
+LTTNG_TRACEPOINT_EVENT(kvm_entry,
 	TP_PROTO(unsigned int vcpu_id),
 	TP_ARGS(vcpu_id),
 
@@ -35,7 +35,7 @@ TRACE_EVENT(kvm_entry,
 /*
  * Tracepoint for hypercall.
  */
-TRACE_EVENT(kvm_hypercall,
+LTTNG_TRACEPOINT_EVENT(kvm_hypercall,
 	TP_PROTO(unsigned long nr, unsigned long a0, unsigned long a1,
 		 unsigned long a2, unsigned long a3),
 	TP_ARGS(nr, a0, a1, a2, a3),
@@ -64,7 +64,7 @@ TRACE_EVENT(kvm_hypercall,
 /*
  * Tracepoint for hypercall.
  */
-TRACE_EVENT(kvm_hv_hypercall,
+LTTNG_TRACEPOINT_EVENT(kvm_hv_hypercall,
 	TP_PROTO(__u16 code, bool fast, __u16 rep_cnt, __u16 rep_idx,
 		 __u64 ingpa, __u64 outgpa),
 	TP_ARGS(code, fast, rep_cnt, rep_idx, ingpa, outgpa),
@@ -96,7 +96,7 @@ TRACE_EVENT(kvm_hv_hypercall,
 /*
  * Tracepoint for PIO.
  */
-TRACE_EVENT(kvm_pio,
+LTTNG_TRACEPOINT_EVENT(kvm_pio,
 	TP_PROTO(unsigned int rw, unsigned int port, unsigned int size,
 		 unsigned int count),
 	TP_ARGS(rw, port, size, count),
@@ -123,7 +123,7 @@ TRACE_EVENT(kvm_pio,
 /*
  * Tracepoint for cpuid.
  */
-TRACE_EVENT(kvm_cpuid,
+LTTNG_TRACEPOINT_EVENT(kvm_cpuid,
 	TP_PROTO(unsigned int function, unsigned long rax, unsigned long rbx,
 		 unsigned long rcx, unsigned long rdx),
 	TP_ARGS(function, rax, rbx, rcx, rdx),
@@ -161,7 +161,7 @@ TRACE_EVENT(kvm_cpuid,
 /*
  * Tracepoint for apic access.
  */
-TRACE_EVENT(kvm_apic,
+LTTNG_TRACEPOINT_EVENT(kvm_apic,
 	TP_PROTO(unsigned int rw, unsigned int reg, unsigned int val),
 	TP_ARGS(rw, reg, val),
 
@@ -192,7 +192,7 @@ TRACE_EVENT(kvm_apic,
 /*
  * Tracepoint for kvm guest exit:
  */
-TRACE_EVENT(kvm_exit,
+LTTNG_TRACEPOINT_EVENT(kvm_exit,
 	TP_PROTO(unsigned int exit_reason, struct kvm_vcpu *vcpu, u32 isa, u64 info1, u64 info2),
 	TP_ARGS(exit_reason, vcpu, isa, info1, info2),
 
@@ -224,7 +224,7 @@ TRACE_EVENT(kvm_exit,
 /*
  * Tracepoint for kvm interrupt injection:
  */
-TRACE_EVENT(kvm_inj_virq,
+LTTNG_TRACEPOINT_EVENT(kvm_inj_virq,
 	TP_PROTO(unsigned int irq),
 	TP_ARGS(irq),
 
@@ -249,7 +249,7 @@ TRACE_EVENT(kvm_inj_virq,
 /*
  * Tracepoint for kvm interrupt injection:
  */
-TRACE_EVENT(kvm_inj_exception,
+LTTNG_TRACEPOINT_EVENT(kvm_inj_exception,
 	TP_PROTO(unsigned exception, bool has_error, unsigned error_code),
 	TP_ARGS(exception, has_error, error_code),
 
@@ -274,7 +274,7 @@ TRACE_EVENT(kvm_inj_exception,
 /*
  * Tracepoint for page fault.
  */
-TRACE_EVENT(kvm_page_fault,
+LTTNG_TRACEPOINT_EVENT(kvm_page_fault,
 	TP_PROTO(unsigned long fault_address, unsigned int error_code),
 	TP_ARGS(fault_address, error_code),
 
@@ -295,7 +295,7 @@ TRACE_EVENT(kvm_page_fault,
 /*
  * Tracepoint for guest MSR access.
  */
-TRACE_EVENT(kvm_msr,
+LTTNG_TRACEPOINT_EVENT(kvm_msr,
 	TP_PROTO(unsigned write, u32 ecx, u64 data, bool exception),
 	TP_ARGS(write, ecx, data, exception),
 
@@ -327,7 +327,7 @@ TRACE_EVENT(kvm_msr,
 /*
  * Tracepoint for guest CR access.
  */
-TRACE_EVENT(kvm_cr,
+LTTNG_TRACEPOINT_EVENT(kvm_cr,
 	TP_PROTO(unsigned int rw, unsigned int cr, unsigned long val),
 	TP_ARGS(rw, cr, val),
 
@@ -351,7 +351,7 @@ TRACE_EVENT(kvm_cr,
 #define trace_kvm_cr_read(cr, val)		trace_kvm_cr(0, cr, val)
 #define trace_kvm_cr_write(cr, val)		trace_kvm_cr(1, cr, val)
 
-TRACE_EVENT(kvm_pic_set_irq,
+LTTNG_TRACEPOINT_EVENT(kvm_pic_set_irq,
 	    TP_PROTO(__u8 chip, __u8 pin, __u8 elcr, __u8 imr, bool coalesced),
 	    TP_ARGS(chip, pin, elcr, imr, coalesced),
 
@@ -384,7 +384,7 @@ TRACE_EVENT(kvm_pic_set_irq,
 	{0x2, "all"},			\
 	{0x3, "all-but-self"}
 
-TRACE_EVENT(kvm_apic_ipi,
+LTTNG_TRACEPOINT_EVENT(kvm_apic_ipi,
 	    TP_PROTO(__u32 icr_low, __u32 dest_id),
 	    TP_ARGS(icr_low, dest_id),
 
@@ -409,7 +409,7 @@ TRACE_EVENT(kvm_apic_ipi,
 				   kvm_apic_dst_shorthand))
 )
 
-TRACE_EVENT(kvm_apic_accept_irq,
+LTTNG_TRACEPOINT_EVENT(kvm_apic_accept_irq,
 	    TP_PROTO(__u32 apicid, __u16 dm, __u8 tm, __u8 vec, bool coalesced),
 	    TP_ARGS(apicid, dm, tm, vec, coalesced),
 
@@ -436,7 +436,7 @@ TRACE_EVENT(kvm_apic_accept_irq,
 		  __entry->coalesced ? " (coalesced)" : "")
 )
 
-TRACE_EVENT(kvm_eoi,
+LTTNG_TRACEPOINT_EVENT(kvm_eoi,
 	    TP_PROTO(struct kvm_lapic *apic, int vector),
 	    TP_ARGS(apic, vector),
 
@@ -453,7 +453,7 @@ TRACE_EVENT(kvm_eoi,
 	TP_printk("apicid %x vector %d", __entry->apicid, __entry->vector)
 )
 
-TRACE_EVENT(kvm_pv_eoi,
+LTTNG_TRACEPOINT_EVENT(kvm_pv_eoi,
 	    TP_PROTO(struct kvm_lapic *apic, int vector),
 	    TP_ARGS(apic, vector),
 
@@ -473,7 +473,7 @@ TRACE_EVENT(kvm_pv_eoi,
 /*
  * Tracepoint for nested VMRUN
  */
-TRACE_EVENT(kvm_nested_vmrun,
+LTTNG_TRACEPOINT_EVENT(kvm_nested_vmrun,
 	    TP_PROTO(__u64 rip, __u64 vmcb, __u64 nested_rip, __u32 int_ctl,
 		     __u32 event_inj, bool npt),
 	    TP_ARGS(rip, vmcb, nested_rip, int_ctl, event_inj, npt),
@@ -503,7 +503,7 @@ TRACE_EVENT(kvm_nested_vmrun,
 		__entry->npt ? "on" : "off")
 )
 
-TRACE_EVENT(kvm_nested_intercepts,
+LTTNG_TRACEPOINT_EVENT(kvm_nested_intercepts,
 	    TP_PROTO(__u16 cr_read, __u16 cr_write, __u32 exceptions, __u64 intercept),
 	    TP_ARGS(cr_read, cr_write, exceptions, intercept),
 
@@ -528,7 +528,7 @@ TRACE_EVENT(kvm_nested_intercepts,
 /*
  * Tracepoint for #VMEXIT while nested
  */
-TRACE_EVENT(kvm_nested_vmexit,
+LTTNG_TRACEPOINT_EVENT(kvm_nested_vmexit,
 	    TP_PROTO(__u64 rip, __u32 exit_code,
 		     __u64 exit_info1, __u64 exit_info2,
 		     __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa),
@@ -567,7 +567,7 @@ TRACE_EVENT(kvm_nested_vmexit,
 /*
  * Tracepoint for #VMEXIT reinjected to the guest
  */
-TRACE_EVENT(kvm_nested_vmexit_inject,
+LTTNG_TRACEPOINT_EVENT(kvm_nested_vmexit_inject,
 	    TP_PROTO(__u32 exit_code,
 		     __u64 exit_info1, __u64 exit_info2,
 		     __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa),
@@ -604,7 +604,7 @@ TRACE_EVENT(kvm_nested_vmexit_inject,
 /*
  * Tracepoint for nested #vmexit because of interrupt pending
  */
-TRACE_EVENT(kvm_nested_intr_vmexit,
+LTTNG_TRACEPOINT_EVENT(kvm_nested_intr_vmexit,
 	    TP_PROTO(__u64 rip),
 	    TP_ARGS(rip),
 
@@ -622,7 +622,7 @@ TRACE_EVENT(kvm_nested_intr_vmexit,
 /*
  * Tracepoint for nested #vmexit because of interrupt pending
  */
-TRACE_EVENT(kvm_invlpga,
+LTTNG_TRACEPOINT_EVENT(kvm_invlpga,
 	    TP_PROTO(__u64 rip, int asid, u64 address),
 	    TP_ARGS(rip, asid, address),
 
@@ -645,7 +645,7 @@ TRACE_EVENT(kvm_invlpga,
 /*
  * Tracepoint for nested #vmexit because of interrupt pending
  */
-TRACE_EVENT(kvm_skinit,
+LTTNG_TRACEPOINT_EVENT(kvm_skinit,
 	    TP_PROTO(__u64 rip, __u32 slb),
 	    TP_ARGS(rip, slb),
 
@@ -702,7 +702,7 @@ TRACE_EVENT(kvm_skinit,
 	flags;						\
 	})
 
-TRACE_EVENT(kvm_emulate_insn,
+LTTNG_TRACEPOINT_EVENT(kvm_emulate_insn,
 	TP_PROTO(struct kvm_vcpu *vcpu, __u8 failed),
 	TP_ARGS(vcpu, failed),
 
@@ -759,7 +759,7 @@ TRACE_EVENT(kvm_emulate_insn,
 #define trace_kvm_emulate_insn_start(vcpu) trace_kvm_emulate_insn(vcpu, 0)
 #define trace_kvm_emulate_insn_failed(vcpu) trace_kvm_emulate_insn(vcpu, 1)
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	vcpu_match_mmio,
 	TP_PROTO(gva_t gva, gpa_t gpa, bool write, bool gpa_match),
 	TP_ARGS(gva, gpa, write, gpa_match),
@@ -784,7 +784,7 @@ TRACE_EVENT(
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
-TRACE_EVENT(kvm_write_tsc_offset,
+LTTNG_TRACEPOINT_EVENT(kvm_write_tsc_offset,
 	TP_PROTO(unsigned int vcpu_id, __u64 previous_tsc_offset,
 		 __u64 next_tsc_offset),
 	TP_ARGS(vcpu_id, previous_tsc_offset, next_tsc_offset),
@@ -814,7 +814,7 @@ TRACE_EVENT(kvm_write_tsc_offset,
 	{VCLOCK_TSC,  "tsc"},				\
 	{VCLOCK_HPET, "hpet"}				\
 
-TRACE_EVENT(kvm_update_master_clock,
+LTTNG_TRACEPOINT_EVENT(kvm_update_master_clock,
 	TP_PROTO(bool use_master_clock, unsigned int host_clock, bool offset_matched),
 	TP_ARGS(use_master_clock, host_clock, offset_matched),
 
@@ -836,7 +836,7 @@ TRACE_EVENT(kvm_update_master_clock,
 		  __entry->offset_matched)
 )
 
-TRACE_EVENT(kvm_track_tsc,
+LTTNG_TRACEPOINT_EVENT(kvm_track_tsc,
 	TP_PROTO(unsigned int vcpu_id, unsigned int nr_matched,
 		 unsigned int online_vcpus, bool use_master_clock,
 		 unsigned int host_clock),
@@ -869,7 +869,7 @@ TRACE_EVENT(kvm_track_tsc,
 #endif /* CONFIG_X86_64 */
 #endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(3,8,0) */
 
-#endif /* _TRACE_KVM_H */
+#endif /* LTTNG_TRACE_KVM_H */
 
 #undef TRACE_INCLUDE_PATH
 #define TRACE_INCLUDE_PATH ../instrumentation/events/lttng-module/arch/x86/kvm
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/asoc.h b/drivers/staging/lttng/instrumentation/events/lttng-module/asoc.h
index bf9cf86..4aca115 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/asoc.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/asoc.h
@@ -1,11 +1,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM asoc
 
-#if !defined(_TRACE_ASOC_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_ASOC_H
+#if !defined(LTTNG_TRACE_ASOC_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_ASOC_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/ktime.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
 #define DAPM_DIRECT "(direct)"
@@ -32,7 +32,7 @@ struct snd_soc_dapm_widget;
 /*
  * Log register events
  */
-DECLARE_EVENT_CLASS(snd_soc_reg,
+LTTNG_TRACEPOINT_EVENT_CLASS(snd_soc_reg,
 
 	TP_PROTO(struct snd_soc_codec *codec, unsigned int reg,
 		 unsigned int val),
@@ -58,7 +58,7 @@ DECLARE_EVENT_CLASS(snd_soc_reg,
 		  (unsigned int)__entry->val)
 )
 
-DEFINE_EVENT(snd_soc_reg, snd_soc_reg_write,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_reg, snd_soc_reg_write,
 
 	TP_PROTO(struct snd_soc_codec *codec, unsigned int reg,
 		 unsigned int val),
@@ -67,7 +67,7 @@ DEFINE_EVENT(snd_soc_reg, snd_soc_reg_write,
 
 )
 
-DEFINE_EVENT(snd_soc_reg, snd_soc_reg_read,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_reg, snd_soc_reg_read,
 
 	TP_PROTO(struct snd_soc_codec *codec, unsigned int reg,
 		 unsigned int val),
@@ -77,7 +77,7 @@ DEFINE_EVENT(snd_soc_reg, snd_soc_reg_read,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0))
-DECLARE_EVENT_CLASS(snd_soc_preg,
+LTTNG_TRACEPOINT_EVENT_CLASS(snd_soc_preg,
 
 	TP_PROTO(struct snd_soc_platform *platform, unsigned int reg,
 		 unsigned int val),
@@ -103,7 +103,7 @@ DECLARE_EVENT_CLASS(snd_soc_preg,
 		  (unsigned int)__entry->val)
 )
 
-DEFINE_EVENT(snd_soc_preg, snd_soc_preg_write,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_preg, snd_soc_preg_write,
 
 	TP_PROTO(struct snd_soc_platform *platform, unsigned int reg,
 		 unsigned int val),
@@ -112,7 +112,7 @@ DEFINE_EVENT(snd_soc_preg, snd_soc_preg_write,
 
 )
 
-DEFINE_EVENT(snd_soc_preg, snd_soc_preg_read,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_preg, snd_soc_preg_read,
 
 	TP_PROTO(struct snd_soc_platform *platform, unsigned int reg,
 		 unsigned int val),
@@ -122,7 +122,7 @@ DEFINE_EVENT(snd_soc_preg, snd_soc_preg_read,
 )
 #endif
 
-DECLARE_EVENT_CLASS(snd_soc_card,
+LTTNG_TRACEPOINT_EVENT_CLASS(snd_soc_card,
 
 	TP_PROTO(struct snd_soc_card *card, int val),
 
@@ -141,7 +141,7 @@ DECLARE_EVENT_CLASS(snd_soc_card,
 	TP_printk("card=%s val=%d", __get_str(name), (int)__entry->val)
 )
 
-DEFINE_EVENT(snd_soc_card, snd_soc_bias_level_start,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_card, snd_soc_bias_level_start,
 
 	TP_PROTO(struct snd_soc_card *card, int val),
 
@@ -149,7 +149,7 @@ DEFINE_EVENT(snd_soc_card, snd_soc_bias_level_start,
 
 )
 
-DEFINE_EVENT(snd_soc_card, snd_soc_bias_level_done,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_card, snd_soc_bias_level_done,
 
 	TP_PROTO(struct snd_soc_card *card, int val),
 
@@ -157,7 +157,7 @@ DEFINE_EVENT(snd_soc_card, snd_soc_bias_level_done,
 
 )
 
-DECLARE_EVENT_CLASS(snd_soc_dapm_basic,
+LTTNG_TRACEPOINT_EVENT_CLASS(snd_soc_dapm_basic,
 
 	TP_PROTO(struct snd_soc_card *card),
 
@@ -174,7 +174,7 @@ DECLARE_EVENT_CLASS(snd_soc_dapm_basic,
 	TP_printk("card=%s", __get_str(name))
 )
 
-DEFINE_EVENT(snd_soc_dapm_basic, snd_soc_dapm_start,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_dapm_basic, snd_soc_dapm_start,
 
 	TP_PROTO(struct snd_soc_card *card),
 
@@ -182,7 +182,7 @@ DEFINE_EVENT(snd_soc_dapm_basic, snd_soc_dapm_start,
 
 )
 
-DEFINE_EVENT(snd_soc_dapm_basic, snd_soc_dapm_done,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_dapm_basic, snd_soc_dapm_done,
 
 	TP_PROTO(struct snd_soc_card *card),
 
@@ -190,7 +190,7 @@ DEFINE_EVENT(snd_soc_dapm_basic, snd_soc_dapm_done,
 
 )
 
-DECLARE_EVENT_CLASS(snd_soc_dapm_widget,
+LTTNG_TRACEPOINT_EVENT_CLASS(snd_soc_dapm_widget,
 
 	TP_PROTO(struct snd_soc_dapm_widget *w, int val),
 
@@ -210,7 +210,7 @@ DECLARE_EVENT_CLASS(snd_soc_dapm_widget,
 		  (int)__entry->val)
 )
 
-DEFINE_EVENT(snd_soc_dapm_widget, snd_soc_dapm_widget_power,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_dapm_widget, snd_soc_dapm_widget_power,
 
 	TP_PROTO(struct snd_soc_dapm_widget *w, int val),
 
@@ -218,7 +218,7 @@ DEFINE_EVENT(snd_soc_dapm_widget, snd_soc_dapm_widget_power,
 
 )
 
-DEFINE_EVENT(snd_soc_dapm_widget, snd_soc_dapm_widget_event_start,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_dapm_widget, snd_soc_dapm_widget_event_start,
 
 	TP_PROTO(struct snd_soc_dapm_widget *w, int val),
 
@@ -226,7 +226,7 @@ DEFINE_EVENT(snd_soc_dapm_widget, snd_soc_dapm_widget_event_start,
 
 )
 
-DEFINE_EVENT(snd_soc_dapm_widget, snd_soc_dapm_widget_event_done,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(snd_soc_dapm_widget, snd_soc_dapm_widget_event_done,
 
 	TP_PROTO(struct snd_soc_dapm_widget *w, int val),
 
@@ -235,7 +235,7 @@ DEFINE_EVENT(snd_soc_dapm_widget, snd_soc_dapm_widget_event_done,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
-TRACE_EVENT(snd_soc_dapm_walk_done,
+LTTNG_TRACEPOINT_EVENT(snd_soc_dapm_walk_done,
 
 	TP_PROTO(struct snd_soc_card *card),
 
@@ -262,7 +262,7 @@ TRACE_EVENT(snd_soc_dapm_walk_done,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0))
-TRACE_EVENT(snd_soc_dapm_output_path,
+LTTNG_TRACEPOINT_EVENT(snd_soc_dapm_output_path,
 
 	TP_PROTO(struct snd_soc_dapm_widget *widget,
 		struct snd_soc_dapm_path *path),
@@ -291,7 +291,7 @@ TRACE_EVENT(snd_soc_dapm_output_path,
 		__get_str(wname), __get_str(pname), __get_str(psname))
 )
 
-TRACE_EVENT(snd_soc_dapm_input_path,
+LTTNG_TRACEPOINT_EVENT(snd_soc_dapm_input_path,
 
 	TP_PROTO(struct snd_soc_dapm_widget *widget,
 		struct snd_soc_dapm_path *path),
@@ -320,7 +320,7 @@ TRACE_EVENT(snd_soc_dapm_input_path,
 		__get_str(wname), __get_str(pname), __get_str(psname))
 )
 
-TRACE_EVENT(snd_soc_dapm_connected,
+LTTNG_TRACEPOINT_EVENT(snd_soc_dapm_connected,
 
 	TP_PROTO(int paths, int stream),
 
@@ -341,7 +341,7 @@ TRACE_EVENT(snd_soc_dapm_connected,
 )
 #endif
 
-TRACE_EVENT(snd_soc_jack_irq,
+LTTNG_TRACEPOINT_EVENT(snd_soc_jack_irq,
 
 	TP_PROTO(const char *name),
 
@@ -358,7 +358,7 @@ TRACE_EVENT(snd_soc_jack_irq,
 	TP_printk("%s", __get_str(name))
 )
 
-TRACE_EVENT(snd_soc_jack_report,
+LTTNG_TRACEPOINT_EVENT(snd_soc_jack_report,
 
 	TP_PROTO(struct snd_soc_jack *jack, int mask, int val),
 
@@ -380,7 +380,7 @@ TRACE_EVENT(snd_soc_jack_report,
 		  (int)__entry->mask)
 )
 
-TRACE_EVENT(snd_soc_jack_notify,
+LTTNG_TRACEPOINT_EVENT(snd_soc_jack_notify,
 
 	TP_PROTO(struct snd_soc_jack *jack, int val),
 
@@ -399,7 +399,7 @@ TRACE_EVENT(snd_soc_jack_notify,
 	TP_printk("jack=%s %x", __get_str(name), (int)__entry->val)
 )
 
-TRACE_EVENT(snd_soc_cache_sync,
+LTTNG_TRACEPOINT_EVENT(snd_soc_cache_sync,
 
 	TP_PROTO(struct snd_soc_codec *codec, const char *type,
 		 const char *status),
@@ -424,7 +424,7 @@ TRACE_EVENT(snd_soc_cache_sync,
 		  (int)__entry->id, __get_str(type), __get_str(status))
 )
 
-#endif /* _TRACE_ASOC_H */
+#endif /* LTTNG_TRACE_ASOC_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/block.h b/drivers/staging/lttng/instrumentation/events/lttng-module/block.h
index ad0a363..fb592ad 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/block.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/block.h
@@ -1,12 +1,12 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM block
 
-#if !defined(_TRACE_BLOCK_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_BLOCK_H
+#if !defined(LTTNG_TRACE_BLOCK_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_BLOCK_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/blktrace_api.h>
 #include <linux/blkdev.h>
-#include <linux/tracepoint.h>
 #include <linux/trace_seq.h>
 #include <linux/version.h>
 
@@ -99,7 +99,7 @@ enum {
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
-DECLARE_EVENT_CLASS(block_buffer,
+LTTNG_TRACEPOINT_EVENT_CLASS(block_buffer,
 
 	TP_PROTO(struct buffer_head *bh),
 
@@ -129,7 +129,7 @@ DECLARE_EVENT_CLASS(block_buffer,
  *
  * Called from touch_buffer().
  */
-DEFINE_EVENT(block_buffer, block_touch_buffer,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_buffer, block_touch_buffer,
 
 	TP_PROTO(struct buffer_head *bh),
 
@@ -142,7 +142,7 @@ DEFINE_EVENT(block_buffer, block_touch_buffer,
  *
  * Called from mark_buffer_dirty().
  */
-DEFINE_EVENT(block_buffer, block_dirty_buffer,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_buffer, block_dirty_buffer,
 
 	TP_PROTO(struct buffer_head *bh),
 
@@ -150,7 +150,7 @@ DEFINE_EVENT(block_buffer, block_dirty_buffer,
 )
 #endif
 
-DECLARE_EVENT_CLASS(block_rq_with_error,
+LTTNG_TRACEPOINT_EVENT_CLASS(block_rq_with_error,
 
 	TP_PROTO(struct request_queue *q, struct request *rq),
 
@@ -198,7 +198,7 @@ DECLARE_EVENT_CLASS(block_rq_with_error,
  * can be examined to determine which device and sectors the pending
  * operation would access.
  */
-DEFINE_EVENT(block_rq_with_error, block_rq_abort,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_rq_with_error, block_rq_abort,
 
 	TP_PROTO(struct request_queue *q, struct request *rq),
 
@@ -214,7 +214,7 @@ DEFINE_EVENT(block_rq_with_error, block_rq_abort,
  * @q.  For some reason the request was not completed and needs to be
  * put back in the queue.
  */
-DEFINE_EVENT(block_rq_with_error, block_rq_requeue,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_rq_with_error, block_rq_requeue,
 
 	TP_PROTO(struct request_queue *q, struct request *rq),
 
@@ -239,7 +239,7 @@ DEFINE_EVENT(block_rq_with_error, block_rq_requeue,
  * do for the request. If @rq->bio is non-NULL then there is
  * additional work required to complete the request.
  */
-TRACE_EVENT(block_rq_complete,
+LTTNG_TRACEPOINT_EVENT(block_rq_complete,
 
 	TP_PROTO(struct request_queue *q, struct request *rq,
 		 unsigned int nr_bytes),
@@ -287,7 +287,7 @@ TRACE_EVENT(block_rq_complete,
  * do for the request. If @rq->bio is non-NULL then there is
  * additional work required to complete the request.
  */
-DEFINE_EVENT(block_rq_with_error, block_rq_complete,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_rq_with_error, block_rq_complete,
 
 	TP_PROTO(struct request_queue *q, struct request *rq),
 
@@ -296,7 +296,7 @@ DEFINE_EVENT(block_rq_with_error, block_rq_complete,
 
 #endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)) */
 
-DECLARE_EVENT_CLASS(block_rq,
+LTTNG_TRACEPOINT_EVENT_CLASS(block_rq,
 
 	TP_PROTO(struct request_queue *q, struct request *rq),
 
@@ -350,7 +350,7 @@ DECLARE_EVENT_CLASS(block_rq,
  * be examined to determine which device and sectors the pending
  * operation would access.
  */
-DEFINE_EVENT(block_rq, block_rq_insert,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_rq, block_rq_insert,
 
 	TP_PROTO(struct request_queue *q, struct request *rq),
 
@@ -365,7 +365,7 @@ DEFINE_EVENT(block_rq, block_rq_insert,
  * Called when block operation request @rq from queue @q is sent to a
  * device driver for processing.
  */
-DEFINE_EVENT(block_rq, block_rq_issue,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_rq, block_rq_issue,
 
 	TP_PROTO(struct request_queue *q, struct request *rq),
 
@@ -383,7 +383,7 @@ DEFINE_EVENT(block_rq, block_rq_issue,
  * bounce buffer requires extra copying of data and decreases
  * performance.
  */
-TRACE_EVENT(block_bio_bounce,
+LTTNG_TRACEPOINT_EVENT(block_bio_bounce,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio),
 
@@ -434,7 +434,7 @@ TRACE_EVENT(block_bio_bounce,
  * This tracepoint indicates there is no further work to do on this
  * block IO operation @bio.
  */
-TRACE_EVENT(block_bio_complete,
+LTTNG_TRACEPOINT_EVENT(block_bio_complete,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))
 	TP_PROTO(struct request_queue *q, struct bio *bio, int error),
@@ -482,7 +482,7 @@ TRACE_EVENT(block_bio_complete,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
-DECLARE_EVENT_CLASS(block_bio_merge,
+LTTNG_TRACEPOINT_EVENT_CLASS(block_bio_merge,
 
 	TP_PROTO(struct request_queue *q, struct request *rq, struct bio *bio),
 
@@ -530,7 +530,7 @@ DECLARE_EVENT_CLASS(block_bio_merge,
  * Merging block request @bio to the end of an existing block request
  * in queue @q.
  */
-DEFINE_EVENT(block_bio_merge, block_bio_backmerge,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_bio_merge, block_bio_backmerge,
 
 	TP_PROTO(struct request_queue *q, struct request *rq, struct bio *bio),
 
@@ -545,7 +545,7 @@ DEFINE_EVENT(block_bio_merge, block_bio_backmerge,
  * Merging block IO operation @bio to the beginning of an existing block
  * operation in queue @q.
  */
-DEFINE_EVENT(block_bio_merge, block_bio_frontmerge,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_bio_merge, block_bio_frontmerge,
 
 	TP_PROTO(struct request_queue *q, struct request *rq, struct bio *bio),
 
@@ -559,7 +559,7 @@ DEFINE_EVENT(block_bio_merge, block_bio_frontmerge,
  *
  * About to place the block IO operation @bio into queue @q.
  */
-TRACE_EVENT(block_bio_queue,
+LTTNG_TRACEPOINT_EVENT(block_bio_queue,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio),
 
@@ -598,7 +598,7 @@ TRACE_EVENT(block_bio_queue,
 		  __entry->nr_sector, __entry->comm, __entry->tid)
 )
 #else
-DECLARE_EVENT_CLASS(block_bio,
+LTTNG_TRACEPOINT_EVENT_CLASS(block_bio,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio),
 
@@ -637,7 +637,7 @@ DECLARE_EVENT_CLASS(block_bio,
  * Merging block request @bio to the end of an existing block request
  * in queue @q.
  */
-DEFINE_EVENT(block_bio, block_bio_backmerge,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_bio, block_bio_backmerge,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio),
 
@@ -652,7 +652,7 @@ DEFINE_EVENT(block_bio, block_bio_backmerge,
  * Merging block IO operation @bio to the beginning of an existing block
  * operation in queue @q.
  */
-DEFINE_EVENT(block_bio, block_bio_frontmerge,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_bio, block_bio_frontmerge,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio),
 
@@ -666,7 +666,7 @@ DEFINE_EVENT(block_bio, block_bio_frontmerge,
  *
  * About to place the block IO operation @bio into queue @q.
  */
-DEFINE_EVENT(block_bio, block_bio_queue,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_bio, block_bio_queue,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio),
 
@@ -674,7 +674,7 @@ DEFINE_EVENT(block_bio, block_bio_queue,
 )
 #endif
 
-DECLARE_EVENT_CLASS(block_get_rq,
+LTTNG_TRACEPOINT_EVENT_CLASS(block_get_rq,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio, int rw),
 
@@ -725,7 +725,7 @@ DECLARE_EVENT_CLASS(block_get_rq,
  * A request struct for queue @q has been allocated to handle the
  * block IO operation @bio.
  */
-DEFINE_EVENT(block_get_rq, block_getrq,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_get_rq, block_getrq,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio, int rw),
 
@@ -743,7 +743,7 @@ DEFINE_EVENT(block_get_rq, block_getrq,
  * available.  This tracepoint event is generated each time the
  * process goes to sleep waiting for request struct become available.
  */
-DEFINE_EVENT(block_get_rq, block_sleeprq,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_get_rq, block_sleeprq,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio, int rw),
 
@@ -758,7 +758,7 @@ DEFINE_EVENT(block_get_rq, block_sleeprq,
  * to be sent to the device driver. Instead, accumulate requests in
  * the queue to improve throughput performance of the block device.
  */
-TRACE_EVENT(block_plug,
+LTTNG_TRACEPOINT_EVENT(block_plug,
 
 	TP_PROTO(struct request_queue *q),
 
@@ -777,7 +777,7 @@ TRACE_EVENT(block_plug,
 	TP_printk("[%s] %d", __entry->comm, __entry->tid)
 )
 
-DECLARE_EVENT_CLASS(block_unplug,
+LTTNG_TRACEPOINT_EVENT_CLASS(block_unplug,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
 	TP_PROTO(struct request_queue *q, unsigned int depth, bool explicit),
@@ -817,7 +817,7 @@ DECLARE_EVENT_CLASS(block_unplug,
  * Unplug the request queue @q because a timer expired and allow block
  * operation requests to be sent to the device driver.
  */
-DEFINE_EVENT(block_unplug, block_unplug_timer,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_unplug, block_unplug_timer,
 
 	TP_PROTO(struct request_queue *q),
 
@@ -835,9 +835,9 @@ DEFINE_EVENT(block_unplug, block_unplug_timer,
  * on elements in the request queue.
  */
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
-DEFINE_EVENT(block_unplug, block_unplug,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_unplug, block_unplug,
 #else
-DEFINE_EVENT(block_unplug, block_unplug_io,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(block_unplug, block_unplug_io,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
@@ -862,7 +862,7 @@ DEFINE_EVENT(block_unplug, block_unplug_io,
  * @new_sector. This split may be required due to hardware limitation
  * such as operation crossing device boundaries in a RAID system.
  */
-TRACE_EVENT(block_split,
+LTTNG_TRACEPOINT_EVENT(block_split,
 
 	TP_PROTO(struct request_queue *q, struct bio *bio,
 		 unsigned int new_sector),
@@ -915,9 +915,9 @@ TRACE_EVENT(block_split,
  * raw block device.
  */
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))
-TRACE_EVENT(block_bio_remap,
+LTTNG_TRACEPOINT_EVENT(block_bio_remap,
 #else
-TRACE_EVENT(block_remap,
+LTTNG_TRACEPOINT_EVENT(block_remap,
 #endif
 
 	TP_PROTO(struct request_queue *q, struct bio *bio, dev_t dev,
@@ -973,7 +973,7 @@ TRACE_EVENT(block_remap,
  * operation request @rq holds the current information and @from hold
  * the original sector.
  */
-TRACE_EVENT(block_rq_remap,
+LTTNG_TRACEPOINT_EVENT(block_rq_remap,
 
 	TP_PROTO(struct request_queue *q, struct request *rq, dev_t dev,
 		 sector_t from),
@@ -1011,7 +1011,7 @@ TRACE_EVENT(block_rq_remap,
 #undef __print_rwbs_flags
 #undef blk_fill_rwbs
 
-#endif /* _TRACE_BLOCK_H */
+#endif /* LTTNG_TRACE_BLOCK_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/btrfs.h b/drivers/staging/lttng/instrumentation/events/lttng-module/btrfs.h
index 8ed38d9..63913f2 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/btrfs.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/btrfs.h
@@ -1,11 +1,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM btrfs
 
-#if !defined(_TRACE_BTRFS_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_BTRFS_H
+#if !defined(LTTNG_TRACE_BTRFS_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_BTRFS_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/writeback.h>
-#include <linux/tracepoint.h>
 #include <trace/events/gfpflags.h>
 #include <linux/version.h>
 
@@ -141,7 +141,7 @@ struct extent_state;
 
 #endif
 
-TRACE_EVENT(btrfs_transaction_commit,
+LTTNG_TRACEPOINT_EVENT(btrfs_transaction_commit,
 
 	TP_PROTO(struct btrfs_root *root),
 
@@ -162,7 +162,7 @@ TRACE_EVENT(btrfs_transaction_commit,
 		  (unsigned long long)__entry->generation)
 )
 
-DECLARE_EVENT_CLASS(btrfs__inode,
+LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__inode,
 
 	TP_PROTO(struct inode *inode),
 
@@ -200,21 +200,21 @@ DECLARE_EVENT_CLASS(btrfs__inode,
 		  (unsigned long long)__entry->logged_trans)
 )
 
-DEFINE_EVENT(btrfs__inode, btrfs_inode_new,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__inode, btrfs_inode_new,
 
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode)
 )
 
-DEFINE_EVENT(btrfs__inode, btrfs_inode_request,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__inode, btrfs_inode_request,
 
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode)
 )
 
-DEFINE_EVENT(btrfs__inode, btrfs_inode_evict,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__inode, btrfs_inode_evict,
 
 	TP_PROTO(struct inode *inode),
 
@@ -262,7 +262,7 @@ DEFINE_EVENT(btrfs__inode, btrfs_inode_evict,
 
 #endif
 
-TRACE_EVENT(btrfs_get_extent,
+LTTNG_TRACEPOINT_EVENT(btrfs_get_extent,
 
 	TP_PROTO(struct btrfs_root *root, struct extent_map *map),
 
@@ -348,7 +348,7 @@ TRACE_EVENT(btrfs_get_extent,
 
 #endif
 
-DECLARE_EVENT_CLASS(btrfs__ordered_extent,
+LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__ordered_extent,
 
 	TP_PROTO(struct inode *inode, struct btrfs_ordered_extent *ordered),
 
@@ -396,35 +396,35 @@ DECLARE_EVENT_CLASS(btrfs__ordered_extent,
 		  __entry->compress_type, __entry->refs)
 )
 
-DEFINE_EVENT(btrfs__ordered_extent, btrfs_ordered_extent_add,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__ordered_extent, btrfs_ordered_extent_add,
 
 	TP_PROTO(struct inode *inode, struct btrfs_ordered_extent *ordered),
 
 	TP_ARGS(inode, ordered)
 )
 
-DEFINE_EVENT(btrfs__ordered_extent, btrfs_ordered_extent_remove,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__ordered_extent, btrfs_ordered_extent_remove,
 
 	TP_PROTO(struct inode *inode, struct btrfs_ordered_extent *ordered),
 
 	TP_ARGS(inode, ordered)
 )
 
-DEFINE_EVENT(btrfs__ordered_extent, btrfs_ordered_extent_start,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__ordered_extent, btrfs_ordered_extent_start,
 
 	TP_PROTO(struct inode *inode, struct btrfs_ordered_extent *ordered),
 
 	TP_ARGS(inode, ordered)
 )
 
-DEFINE_EVENT(btrfs__ordered_extent, btrfs_ordered_extent_put,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__ordered_extent, btrfs_ordered_extent_put,
 
 	TP_PROTO(struct inode *inode, struct btrfs_ordered_extent *ordered),
 
 	TP_ARGS(inode, ordered)
 )
 
-DECLARE_EVENT_CLASS(btrfs__writepage,
+LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__writepage,
 
 	TP_PROTO(struct page *page, struct inode *inode,
 		 struct writeback_control *wbc),
@@ -493,7 +493,7 @@ DECLARE_EVENT_CLASS(btrfs__writepage,
 #endif
 )
 
-DEFINE_EVENT(btrfs__writepage, __extent_writepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__writepage, __extent_writepage,
 
 	TP_PROTO(struct page *page, struct inode *inode,
 		 struct writeback_control *wbc),
@@ -501,7 +501,7 @@ DEFINE_EVENT(btrfs__writepage, __extent_writepage,
 	TP_ARGS(page, inode, wbc)
 )
 
-TRACE_EVENT(btrfs_writepage_end_io_hook,
+LTTNG_TRACEPOINT_EVENT(btrfs_writepage_end_io_hook,
 
 	TP_PROTO(struct page *page, u64 start, u64 end, int uptodate),
 
@@ -534,7 +534,7 @@ TRACE_EVENT(btrfs_writepage_end_io_hook,
 		  (unsigned long long)__entry->end, __entry->uptodate)
 )
 
-TRACE_EVENT(btrfs_sync_file,
+LTTNG_TRACEPOINT_EVENT(btrfs_sync_file,
 
 	TP_PROTO(struct file *file, int datasync),
 
@@ -561,7 +561,7 @@ TRACE_EVENT(btrfs_sync_file,
 		  __entry->datasync)
 )
 
-TRACE_EVENT(btrfs_sync_fs,
+LTTNG_TRACEPOINT_EVENT(btrfs_sync_fs,
 
 	TP_PROTO(int wait),
 
@@ -586,7 +586,7 @@ TRACE_EVENT(btrfs_sync_fs,
 		{ BTRFS_UPDATE_DELAYED_HEAD, "UPDATE_DELAYED_HEAD" })
 			
 
-TRACE_EVENT(btrfs_delayed_tree_ref,
+LTTNG_TRACEPOINT_EVENT(btrfs_delayed_tree_ref,
 
 	TP_PROTO(struct btrfs_delayed_ref_node *ref,
 		 struct btrfs_delayed_tree_ref *full_ref,
@@ -642,7 +642,7 @@ TRACE_EVENT(btrfs_delayed_tree_ref,
 #endif
 )
 
-TRACE_EVENT(btrfs_delayed_data_ref,
+LTTNG_TRACEPOINT_EVENT(btrfs_delayed_data_ref,
 
 	TP_PROTO(struct btrfs_delayed_ref_node *ref,
 		 struct btrfs_delayed_data_ref *full_ref,
@@ -702,7 +702,7 @@ TRACE_EVENT(btrfs_delayed_data_ref,
 #endif
 )
 
-TRACE_EVENT(btrfs_delayed_ref_head,
+LTTNG_TRACEPOINT_EVENT(btrfs_delayed_ref_head,
 
 	TP_PROTO(struct btrfs_delayed_ref_node *ref,
 		 struct btrfs_delayed_ref_head *head_ref,
@@ -759,7 +759,7 @@ TRACE_EVENT(btrfs_delayed_ref_head,
 
 #endif
 
-DECLARE_EVENT_CLASS(btrfs__chunk,
+LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__chunk,
 
 	TP_PROTO(struct btrfs_root *root, struct map_lookup *map,
 		 u64 offset, u64 size),
@@ -793,7 +793,7 @@ DECLARE_EVENT_CLASS(btrfs__chunk,
 		  show_chunk_type(__entry->type))
 )
 
-DEFINE_EVENT(btrfs__chunk,  btrfs_chunk_alloc,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__chunk,  btrfs_chunk_alloc,
 
 	TP_PROTO(struct btrfs_root *root, struct map_lookup *map,
 		 u64 offset, u64 size),
@@ -801,7 +801,7 @@ DEFINE_EVENT(btrfs__chunk,  btrfs_chunk_alloc,
 	TP_ARGS(root, map, offset, size)
 )
 
-DEFINE_EVENT(btrfs__chunk,  btrfs_chunk_free,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__chunk,  btrfs_chunk_free,
 
 	TP_PROTO(struct btrfs_root *root, struct map_lookup *map,
 		 u64 offset, u64 size),
@@ -809,7 +809,7 @@ DEFINE_EVENT(btrfs__chunk,  btrfs_chunk_free,
 	TP_ARGS(root, map, offset, size)
 )
 
-TRACE_EVENT(btrfs_cow_block,
+LTTNG_TRACEPOINT_EVENT(btrfs_cow_block,
 
 	TP_PROTO(struct btrfs_root *root, struct extent_buffer *buf,
 		 struct extent_buffer *cow),
@@ -845,7 +845,7 @@ TRACE_EVENT(btrfs_cow_block,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
-TRACE_EVENT(btrfs_space_reservation,
+LTTNG_TRACEPOINT_EVENT(btrfs_space_reservation,
 
 	TP_PROTO(struct btrfs_fs_info *fs_info, char *type, u64 val,
 		 u64 bytes, int reserve),
@@ -874,7 +874,7 @@ TRACE_EVENT(btrfs_space_reservation,
 )
 #endif
 
-DECLARE_EVENT_CLASS(btrfs__reserved_extent,
+LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__reserved_extent,
 
 	TP_PROTO(struct btrfs_root *root, u64 start, u64 len),
 
@@ -898,14 +898,14 @@ DECLARE_EVENT_CLASS(btrfs__reserved_extent,
 		  (unsigned long long)__entry->len)
 )
 
-DEFINE_EVENT(btrfs__reserved_extent,  btrfs_reserved_extent_alloc,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__reserved_extent,  btrfs_reserved_extent_alloc,
 
 	TP_PROTO(struct btrfs_root *root, u64 start, u64 len),
 
 	TP_ARGS(root, start, len)
 )
 
-DEFINE_EVENT(btrfs__reserved_extent,  btrfs_reserved_extent_free,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__reserved_extent,  btrfs_reserved_extent_free,
 
 	TP_PROTO(struct btrfs_root *root, u64 start, u64 len),
 
@@ -913,7 +913,7 @@ DEFINE_EVENT(btrfs__reserved_extent,  btrfs_reserved_extent_free,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
-TRACE_EVENT_MAP(find_free_extent,
+LTTNG_TRACEPOINT_EVENT_MAP(find_free_extent,
 
 	btrfs_find_free_extent,
 
@@ -943,7 +943,7 @@ TRACE_EVENT_MAP(find_free_extent,
 				 BTRFS_GROUP_FLAGS))
 )
 
-DECLARE_EVENT_CLASS(btrfs__reserve_extent,
+LTTNG_TRACEPOINT_EVENT_CLASS(btrfs__reserve_extent,
 
 	TP_PROTO(struct btrfs_root *root,
 		 struct btrfs_block_group_cache *block_group, u64 start,
@@ -975,7 +975,7 @@ DECLARE_EVENT_CLASS(btrfs__reserve_extent,
 		  __entry->start, __entry->len)
 )
 
-DEFINE_EVENT(btrfs__reserve_extent, btrfs_reserve_extent,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__reserve_extent, btrfs_reserve_extent,
 
 	TP_PROTO(struct btrfs_root *root,
 		 struct btrfs_block_group_cache *block_group, u64 start,
@@ -984,7 +984,7 @@ DEFINE_EVENT(btrfs__reserve_extent, btrfs_reserve_extent,
 	TP_ARGS(root, block_group, start, len)
 )
 
-DEFINE_EVENT(btrfs__reserve_extent, btrfs_reserve_extent_cluster,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(btrfs__reserve_extent, btrfs_reserve_extent_cluster,
 
 	TP_PROTO(struct btrfs_root *root,
 		 struct btrfs_block_group_cache *block_group, u64 start,
@@ -993,7 +993,7 @@ DEFINE_EVENT(btrfs__reserve_extent, btrfs_reserve_extent_cluster,
 	TP_ARGS(root, block_group, start, len)
 )
 
-TRACE_EVENT(btrfs_find_cluster,
+LTTNG_TRACEPOINT_EVENT(btrfs_find_cluster,
 
 	TP_PROTO(struct btrfs_block_group_cache *block_group, u64 start,
 		 u64 bytes, u64 empty_size, u64 min_bytes),
@@ -1026,7 +1026,7 @@ TRACE_EVENT(btrfs_find_cluster,
 		  __entry->bytes, __entry->empty_size,  __entry->min_bytes)
 )
 
-TRACE_EVENT(btrfs_failed_cluster_setup,
+LTTNG_TRACEPOINT_EVENT(btrfs_failed_cluster_setup,
 
 	TP_PROTO(struct btrfs_block_group_cache *block_group),
 
@@ -1043,7 +1043,7 @@ TRACE_EVENT(btrfs_failed_cluster_setup,
 	TP_printk("block_group = %Lu", __entry->bg_objectid)
 )
 
-TRACE_EVENT(btrfs_setup_cluster,
+LTTNG_TRACEPOINT_EVENT(btrfs_setup_cluster,
 
 	TP_PROTO(struct btrfs_block_group_cache *block_group,
 		 struct btrfs_free_cluster *cluster, u64 size, int bitmap),
@@ -1079,7 +1079,7 @@ TRACE_EVENT(btrfs_setup_cluster,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
-TRACE_EVENT_MAP(alloc_extent_state,
+LTTNG_TRACEPOINT_EVENT_MAP(alloc_extent_state,
 
 	btrfs_alloc_extent_state,
 
@@ -1103,7 +1103,7 @@ TRACE_EVENT_MAP(alloc_extent_state,
 		  show_gfp_flags(__entry->mask), (void *)__entry->ip)
 )
 
-TRACE_EVENT_MAP(free_extent_state,
+LTTNG_TRACEPOINT_EVENT_MAP(free_extent_state,
 
 	btrfs_free_extent_state,
 
@@ -1126,7 +1126,7 @@ TRACE_EVENT_MAP(free_extent_state,
 )
 #endif
 
-#endif /* _TRACE_BTRFS_H */
+#endif /* LTTNG_TRACE_BTRFS_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/compaction.h b/drivers/staging/lttng/instrumentation/events/lttng-module/compaction.h
index 22024e9e..ee23aa9 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/compaction.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/compaction.h
@@ -1,15 +1,15 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM compaction
 
-#if !defined(_TRACE_COMPACTION_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_COMPACTION_H
+#if !defined(LTTNG_TRACE_COMPACTION_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_COMPACTION_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/types.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 #include <trace/events/gfpflags.h>
 
-DECLARE_EVENT_CLASS(mm_compaction_isolate_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(mm_compaction_isolate_template,
 
 	TP_PROTO(unsigned long nr_scanned,
 		unsigned long nr_taken),
@@ -31,7 +31,7 @@ DECLARE_EVENT_CLASS(mm_compaction_isolate_template,
 		__entry->nr_taken)
 )
 
-DEFINE_EVENT(mm_compaction_isolate_template, mm_compaction_isolate_migratepages,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_compaction_isolate_template, mm_compaction_isolate_migratepages,
 
 	TP_PROTO(unsigned long nr_scanned,
 		unsigned long nr_taken),
@@ -39,7 +39,7 @@ DEFINE_EVENT(mm_compaction_isolate_template, mm_compaction_isolate_migratepages,
 	TP_ARGS(nr_scanned, nr_taken)
 )
 
-DEFINE_EVENT(mm_compaction_isolate_template, mm_compaction_isolate_freepages,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_compaction_isolate_template, mm_compaction_isolate_freepages,
 	TP_PROTO(unsigned long nr_scanned,
 		unsigned long nr_taken),
 
@@ -47,7 +47,7 @@ DEFINE_EVENT(mm_compaction_isolate_template, mm_compaction_isolate_freepages,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0))
-TRACE_EVENT(mm_compaction_migratepages,
+LTTNG_TRACEPOINT_EVENT(mm_compaction_migratepages,
 
 	TP_PROTO(unsigned long nr_all,
 		int migrate_rc,
@@ -88,7 +88,7 @@ TRACE_EVENT(mm_compaction_migratepages,
 		__entry->nr_failed)
 )
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0)) */
-TRACE_EVENT(mm_compaction_migratepages,
+LTTNG_TRACEPOINT_EVENT(mm_compaction_migratepages,
 
 	TP_PROTO(unsigned long nr_migrated,
 		unsigned long nr_failed),
@@ -111,7 +111,7 @@ TRACE_EVENT(mm_compaction_migratepages,
 )
 #endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0)) */
 
-#endif /* _TRACE_COMPACTION_H */
+#endif /* LTTNG_TRACE_COMPACTION_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/ext3.h b/drivers/staging/lttng/instrumentation/events/lttng-module/ext3.h
index 286a1df..0c6cc98 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/ext3.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/ext3.h
@@ -1,13 +1,13 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM ext3
 
-#if !defined(_TRACE_EXT3_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_EXT3_H
+#if !defined(LTTNG_TRACE_EXT3_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_EXT3_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/version.h>
 
-TRACE_EVENT(ext3_free_inode,
+LTTNG_TRACEPOINT_EVENT(ext3_free_inode,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -42,7 +42,7 @@ TRACE_EVENT(ext3_free_inode,
 		  (unsigned long) __entry->blocks)
 )
 
-TRACE_EVENT(ext3_request_inode,
+LTTNG_TRACEPOINT_EVENT(ext3_request_inode,
 	TP_PROTO(struct inode *dir, int mode),
 
 	TP_ARGS(dir, mode),
@@ -64,7 +64,7 @@ TRACE_EVENT(ext3_request_inode,
 		  (unsigned long) __entry->dir, __entry->mode)
 )
 
-TRACE_EVENT(ext3_allocate_inode,
+LTTNG_TRACEPOINT_EVENT(ext3_allocate_inode,
 	TP_PROTO(struct inode *inode, struct inode *dir, int mode),
 
 	TP_ARGS(inode, dir, mode),
@@ -89,7 +89,7 @@ TRACE_EVENT(ext3_allocate_inode,
 		  (unsigned long) __entry->dir, __entry->mode)
 )
 
-TRACE_EVENT(ext3_evict_inode,
+LTTNG_TRACEPOINT_EVENT(ext3_evict_inode,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -111,7 +111,7 @@ TRACE_EVENT(ext3_evict_inode,
 		  (unsigned long) __entry->ino, __entry->nlink)
 )
 
-TRACE_EVENT(ext3_drop_inode,
+LTTNG_TRACEPOINT_EVENT(ext3_drop_inode,
 	TP_PROTO(struct inode *inode, int drop),
 
 	TP_ARGS(inode, drop),
@@ -133,7 +133,7 @@ TRACE_EVENT(ext3_drop_inode,
 		  (unsigned long) __entry->ino, __entry->drop)
 )
 
-TRACE_EVENT(ext3_mark_inode_dirty,
+LTTNG_TRACEPOINT_EVENT(ext3_mark_inode_dirty,
 	TP_PROTO(struct inode *inode, unsigned long IP),
 
 	TP_ARGS(inode, IP),
@@ -155,7 +155,7 @@ TRACE_EVENT(ext3_mark_inode_dirty,
 		  (unsigned long) __entry->ino, (void *)__entry->ip)
 )
 
-TRACE_EVENT(ext3_write_begin,
+LTTNG_TRACEPOINT_EVENT(ext3_write_begin,
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int flags),
 
@@ -184,7 +184,7 @@ TRACE_EVENT(ext3_write_begin,
 		  __entry->flags)
 )
 
-DECLARE_EVENT_CLASS(ext3__write_end,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext3__write_end,
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 			unsigned int copied),
 
@@ -213,7 +213,7 @@ DECLARE_EVENT_CLASS(ext3__write_end,
 		  __entry->copied)
 )
 
-DEFINE_EVENT(ext3__write_end, ext3_ordered_write_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__write_end, ext3_ordered_write_end,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int copied),
@@ -221,7 +221,7 @@ DEFINE_EVENT(ext3__write_end, ext3_ordered_write_end,
 	TP_ARGS(inode, pos, len, copied)
 )
 
-DEFINE_EVENT(ext3__write_end, ext3_writeback_write_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__write_end, ext3_writeback_write_end,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int copied),
@@ -229,7 +229,7 @@ DEFINE_EVENT(ext3__write_end, ext3_writeback_write_end,
 	TP_ARGS(inode, pos, len, copied)
 )
 
-DEFINE_EVENT(ext3__write_end, ext3_journalled_write_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__write_end, ext3_journalled_write_end,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int copied),
@@ -237,7 +237,7 @@ DEFINE_EVENT(ext3__write_end, ext3_journalled_write_end,
 	TP_ARGS(inode, pos, len, copied)
 )
 
-DECLARE_EVENT_CLASS(ext3__page_op,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext3__page_op,
 	TP_PROTO(struct page *page),
 
 	TP_ARGS(page),
@@ -260,35 +260,35 @@ DECLARE_EVENT_CLASS(ext3__page_op,
 		  (unsigned long) __entry->ino, __entry->index)
 )
 
-DEFINE_EVENT(ext3__page_op, ext3_ordered_writepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__page_op, ext3_ordered_writepage,
 
 	TP_PROTO(struct page *page),
 
 	TP_ARGS(page)
 )
 
-DEFINE_EVENT(ext3__page_op, ext3_writeback_writepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__page_op, ext3_writeback_writepage,
 
 	TP_PROTO(struct page *page),
 
 	TP_ARGS(page)
 )
 
-DEFINE_EVENT(ext3__page_op, ext3_journalled_writepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__page_op, ext3_journalled_writepage,
 
 	TP_PROTO(struct page *page),
 
 	TP_ARGS(page)
 )
 
-DEFINE_EVENT(ext3__page_op, ext3_readpage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__page_op, ext3_readpage,
 
 	TP_PROTO(struct page *page),
 
 	TP_ARGS(page)
 )
 
-DEFINE_EVENT(ext3__page_op, ext3_releasepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__page_op, ext3_releasepage,
 
 	TP_PROTO(struct page *page),
 
@@ -297,7 +297,7 @@ DEFINE_EVENT(ext3__page_op, ext3_releasepage,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext3_invalidatepage,
+LTTNG_TRACEPOINT_EVENT(ext3_invalidatepage,
 	TP_PROTO(struct page *page, unsigned int offset, unsigned int length),
 
 	TP_ARGS(page, offset, length),
@@ -327,7 +327,7 @@ TRACE_EVENT(ext3_invalidatepage,
 
 #else
 
-TRACE_EVENT(ext3_invalidatepage,
+LTTNG_TRACEPOINT_EVENT(ext3_invalidatepage,
 	TP_PROTO(struct page *page, unsigned long offset),
 
 	TP_ARGS(page, offset),
@@ -355,7 +355,7 @@ TRACE_EVENT(ext3_invalidatepage,
 
 #endif
 
-TRACE_EVENT(ext3_discard_blocks,
+LTTNG_TRACEPOINT_EVENT(ext3_discard_blocks,
 	TP_PROTO(struct super_block *sb, unsigned long blk,
 			unsigned long count),
 
@@ -379,7 +379,7 @@ TRACE_EVENT(ext3_discard_blocks,
 		  __entry->blk, __entry->count)
 )
 
-TRACE_EVENT(ext3_request_blocks,
+LTTNG_TRACEPOINT_EVENT(ext3_request_blocks,
 	TP_PROTO(struct inode *inode, unsigned long goal,
 		 unsigned long count),
 
@@ -405,7 +405,7 @@ TRACE_EVENT(ext3_request_blocks,
 		  __entry->count, __entry->goal)
 )
 
-TRACE_EVENT(ext3_allocate_blocks,
+LTTNG_TRACEPOINT_EVENT(ext3_allocate_blocks,
 	TP_PROTO(struct inode *inode, unsigned long goal,
 		 unsigned long count, unsigned long block),
 
@@ -434,7 +434,7 @@ TRACE_EVENT(ext3_allocate_blocks,
 		  __entry->goal)
 )
 
-TRACE_EVENT(ext3_free_blocks,
+LTTNG_TRACEPOINT_EVENT(ext3_free_blocks,
 	TP_PROTO(struct inode *inode, unsigned long block,
 		 unsigned long count),
 
@@ -462,7 +462,7 @@ TRACE_EVENT(ext3_free_blocks,
 		  __entry->mode, __entry->block, __entry->count)
 )
 
-TRACE_EVENT(ext3_sync_file_enter,
+LTTNG_TRACEPOINT_EVENT(ext3_sync_file_enter,
 	TP_PROTO(struct file *file, int datasync),
 
 	TP_ARGS(file, datasync),
@@ -487,7 +487,7 @@ TRACE_EVENT(ext3_sync_file_enter,
 		  (unsigned long) __entry->parent, __entry->datasync)
 )
 
-TRACE_EVENT(ext3_sync_file_exit,
+LTTNG_TRACEPOINT_EVENT(ext3_sync_file_exit,
 	TP_PROTO(struct inode *inode, int ret),
 
 	TP_ARGS(inode, ret),
@@ -510,7 +510,7 @@ TRACE_EVENT(ext3_sync_file_exit,
 		  __entry->ret)
 )
 
-TRACE_EVENT(ext3_sync_fs,
+LTTNG_TRACEPOINT_EVENT(ext3_sync_fs,
 	TP_PROTO(struct super_block *sb, int wait),
 
 	TP_ARGS(sb, wait),
@@ -531,7 +531,7 @@ TRACE_EVENT(ext3_sync_fs,
 		  __entry->wait)
 )
 
-TRACE_EVENT(ext3_rsv_window_add,
+LTTNG_TRACEPOINT_EVENT(ext3_rsv_window_add,
 	TP_PROTO(struct super_block *sb,
 		 struct ext3_reserve_window_node *rsv_node),
 
@@ -554,7 +554,7 @@ TRACE_EVENT(ext3_rsv_window_add,
 		  __entry->start, __entry->end)
 )
 
-TRACE_EVENT(ext3_discard_reservation,
+LTTNG_TRACEPOINT_EVENT(ext3_discard_reservation,
 	TP_PROTO(struct inode *inode,
 		 struct ext3_reserve_window_node *rsv_node),
 
@@ -580,7 +580,7 @@ TRACE_EVENT(ext3_discard_reservation,
 		  __entry->end)
 )
 
-TRACE_EVENT(ext3_alloc_new_reservation,
+LTTNG_TRACEPOINT_EVENT(ext3_alloc_new_reservation,
 	TP_PROTO(struct super_block *sb, unsigned long goal),
 
 	TP_ARGS(sb, goal),
@@ -600,7 +600,7 @@ TRACE_EVENT(ext3_alloc_new_reservation,
 		  __entry->goal)
 )
 
-TRACE_EVENT(ext3_reserved,
+LTTNG_TRACEPOINT_EVENT(ext3_reserved,
 	TP_PROTO(struct super_block *sb, unsigned long block,
 		 struct ext3_reserve_window_node *rsv_node),
 
@@ -625,7 +625,7 @@ TRACE_EVENT(ext3_reserved,
 		  __entry->block, __entry->start, __entry->end)
 )
 
-TRACE_EVENT(ext3_forget,
+LTTNG_TRACEPOINT_EVENT(ext3_forget,
 	TP_PROTO(struct inode *inode, int is_metadata, unsigned long block),
 
 	TP_ARGS(inode, is_metadata, block),
@@ -652,7 +652,7 @@ TRACE_EVENT(ext3_forget,
 		  __entry->mode, __entry->is_metadata, __entry->block)
 )
 
-TRACE_EVENT(ext3_read_block_bitmap,
+LTTNG_TRACEPOINT_EVENT(ext3_read_block_bitmap,
 	TP_PROTO(struct super_block *sb, unsigned int group),
 
 	TP_ARGS(sb, group),
@@ -673,7 +673,7 @@ TRACE_EVENT(ext3_read_block_bitmap,
 		  __entry->group)
 )
 
-TRACE_EVENT(ext3_direct_IO_enter,
+LTTNG_TRACEPOINT_EVENT(ext3_direct_IO_enter,
 	TP_PROTO(struct inode *inode, loff_t offset, unsigned long len, int rw),
 
 	TP_ARGS(inode, offset, len, rw),
@@ -701,7 +701,7 @@ TRACE_EVENT(ext3_direct_IO_enter,
 		  __entry->rw)
 )
 
-TRACE_EVENT(ext3_direct_IO_exit,
+LTTNG_TRACEPOINT_EVENT(ext3_direct_IO_exit,
 	TP_PROTO(struct inode *inode, loff_t offset, unsigned long len,
 		 int rw, int ret),
 
@@ -732,7 +732,7 @@ TRACE_EVENT(ext3_direct_IO_exit,
 		  __entry->rw, __entry->ret)
 )
 
-TRACE_EVENT(ext3_unlink_enter,
+LTTNG_TRACEPOINT_EVENT(ext3_unlink_enter,
 	TP_PROTO(struct inode *parent, struct dentry *dentry),
 
 	TP_ARGS(parent, dentry),
@@ -758,7 +758,7 @@ TRACE_EVENT(ext3_unlink_enter,
 		  (unsigned long) __entry->parent)
 )
 
-TRACE_EVENT(ext3_unlink_exit,
+LTTNG_TRACEPOINT_EVENT(ext3_unlink_exit,
 	TP_PROTO(struct dentry *dentry, int ret),
 
 	TP_ARGS(dentry, ret),
@@ -781,7 +781,7 @@ TRACE_EVENT(ext3_unlink_exit,
 		  __entry->ret)
 )
 
-DECLARE_EVENT_CLASS(ext3__truncate,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext3__truncate,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -803,21 +803,21 @@ DECLARE_EVENT_CLASS(ext3__truncate,
 		  (unsigned long) __entry->ino, (unsigned long) __entry->blocks)
 )
 
-DEFINE_EVENT(ext3__truncate, ext3_truncate_enter,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__truncate, ext3_truncate_enter,
 
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode)
 )
 
-DEFINE_EVENT(ext3__truncate, ext3_truncate_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext3__truncate, ext3_truncate_exit,
 
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode)
 )
 
-TRACE_EVENT(ext3_get_blocks_enter,
+LTTNG_TRACEPOINT_EVENT(ext3_get_blocks_enter,
 	TP_PROTO(struct inode *inode, unsigned long lblk,
 		 unsigned long len, int create),
 
@@ -845,7 +845,7 @@ TRACE_EVENT(ext3_get_blocks_enter,
 		  __entry->lblk, __entry->len, __entry->create)
 )
 
-TRACE_EVENT(ext3_get_blocks_exit,
+LTTNG_TRACEPOINT_EVENT(ext3_get_blocks_exit,
 	TP_PROTO(struct inode *inode, unsigned long lblk,
 		 unsigned long pblk, unsigned long len, int ret),
 
@@ -876,7 +876,7 @@ TRACE_EVENT(ext3_get_blocks_exit,
 		  __entry->len, __entry->ret)
 )
 
-TRACE_EVENT(ext3_load_inode,
+LTTNG_TRACEPOINT_EVENT(ext3_load_inode,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -896,7 +896,7 @@ TRACE_EVENT(ext3_load_inode,
 		  (unsigned long) __entry->ino)
 )
 
-#endif /* _TRACE_EXT3_H */
+#endif /* LTTNG_TRACE_EXT3_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/ext4.h b/drivers/staging/lttng/instrumentation/events/lttng-module/ext4.h
index 322c340..6169fef 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/ext4.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/ext4.h
@@ -1,11 +1,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM ext4
 
-#if !defined(_TRACE_EXT4_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_EXT4_H
+#if !defined(LTTNG_TRACE_EXT4_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_EXT4_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/writeback.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
 #ifndef _TRACE_EXT4_DEF_
@@ -28,7 +28,7 @@ struct ext4_extent;
 #define TP_MODE_T	umode_t
 #endif
 
-TRACE_EVENT(ext4_free_inode,
+LTTNG_TRACEPOINT_EVENT(ext4_free_inode,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -62,7 +62,7 @@ TRACE_EVENT(ext4_free_inode,
 		  __entry->uid, __entry->gid, __entry->blocks)
 )
 
-TRACE_EVENT(ext4_request_inode,
+LTTNG_TRACEPOINT_EVENT(ext4_request_inode,
 	TP_PROTO(struct inode *dir, int mode),
 
 	TP_ARGS(dir, mode),
@@ -84,7 +84,7 @@ TRACE_EVENT(ext4_request_inode,
 		  (unsigned long) __entry->dir, __entry->mode)
 )
 
-TRACE_EVENT(ext4_allocate_inode,
+LTTNG_TRACEPOINT_EVENT(ext4_allocate_inode,
 	TP_PROTO(struct inode *inode, struct inode *dir, int mode),
 
 	TP_ARGS(inode, dir, mode),
@@ -110,7 +110,7 @@ TRACE_EVENT(ext4_allocate_inode,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
-TRACE_EVENT(ext4_evict_inode,
+LTTNG_TRACEPOINT_EVENT(ext4_evict_inode,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -132,7 +132,7 @@ TRACE_EVENT(ext4_evict_inode,
 		  (unsigned long) __entry->ino, __entry->nlink)
 )
 
-TRACE_EVENT(ext4_drop_inode,
+LTTNG_TRACEPOINT_EVENT(ext4_drop_inode,
 	TP_PROTO(struct inode *inode, int drop),
 
 	TP_ARGS(inode, drop),
@@ -154,7 +154,7 @@ TRACE_EVENT(ext4_drop_inode,
 		  (unsigned long) __entry->ino, __entry->drop)
 )
 
-TRACE_EVENT(ext4_mark_inode_dirty,
+LTTNG_TRACEPOINT_EVENT(ext4_mark_inode_dirty,
 	TP_PROTO(struct inode *inode, unsigned long IP),
 
 	TP_ARGS(inode, IP),
@@ -176,7 +176,7 @@ TRACE_EVENT(ext4_mark_inode_dirty,
 		  (unsigned long) __entry->ino, (void *)__entry->ip)
 )
 
-TRACE_EVENT(ext4_begin_ordered_truncate,
+LTTNG_TRACEPOINT_EVENT(ext4_begin_ordered_truncate,
 	TP_PROTO(struct inode *inode, loff_t new_size),
 
 	TP_ARGS(inode, new_size),
@@ -200,7 +200,7 @@ TRACE_EVENT(ext4_begin_ordered_truncate,
 )
 #endif
 
-DECLARE_EVENT_CLASS(ext4__write_begin,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__write_begin,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int flags),
@@ -229,7 +229,7 @@ DECLARE_EVENT_CLASS(ext4__write_begin,
 		  __entry->pos, __entry->len, __entry->flags)
 )
 
-DEFINE_EVENT(ext4__write_begin, ext4_write_begin,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__write_begin, ext4_write_begin,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int flags),
@@ -237,7 +237,7 @@ DEFINE_EVENT(ext4__write_begin, ext4_write_begin,
 	TP_ARGS(inode, pos, len, flags)
 )
 
-DEFINE_EVENT(ext4__write_begin, ext4_da_write_begin,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__write_begin, ext4_da_write_begin,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int flags),
@@ -245,7 +245,7 @@ DEFINE_EVENT(ext4__write_begin, ext4_da_write_begin,
 	TP_ARGS(inode, pos, len, flags)
 )
 
-DECLARE_EVENT_CLASS(ext4__write_end,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__write_end,
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 			unsigned int copied),
 
@@ -273,7 +273,7 @@ DECLARE_EVENT_CLASS(ext4__write_end,
 		  __entry->pos, __entry->len, __entry->copied)
 )
 
-DEFINE_EVENT(ext4__write_end, ext4_ordered_write_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__write_end, ext4_ordered_write_end,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int copied),
@@ -281,7 +281,7 @@ DEFINE_EVENT(ext4__write_end, ext4_ordered_write_end,
 	TP_ARGS(inode, pos, len, copied)
 )
 
-DEFINE_EVENT(ext4__write_end, ext4_writeback_write_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__write_end, ext4_writeback_write_end,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int copied),
@@ -289,7 +289,7 @@ DEFINE_EVENT(ext4__write_end, ext4_writeback_write_end,
 	TP_ARGS(inode, pos, len, copied)
 )
 
-DEFINE_EVENT(ext4__write_end, ext4_journalled_write_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__write_end, ext4_journalled_write_end,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int copied),
@@ -297,7 +297,7 @@ DEFINE_EVENT(ext4__write_end, ext4_journalled_write_end,
 	TP_ARGS(inode, pos, len, copied)
 )
 
-DEFINE_EVENT(ext4__write_end, ext4_da_write_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__write_end, ext4_da_write_end,
 
 	TP_PROTO(struct inode *inode, loff_t pos, unsigned int len,
 		 unsigned int copied),
@@ -306,7 +306,7 @@ DEFINE_EVENT(ext4__write_end, ext4_da_write_end,
 )
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,40))
-TRACE_EVENT(ext4_writepage,
+LTTNG_TRACEPOINT_EVENT(ext4_writepage,
 	TP_PROTO(struct inode *inode, struct page *page),
 
 	TP_ARGS(inode, page),
@@ -330,7 +330,7 @@ TRACE_EVENT(ext4_writepage,
 )
 #endif
 
-TRACE_EVENT(ext4_da_writepages,
+LTTNG_TRACEPOINT_EVENT(ext4_da_writepages,
 	TP_PROTO(struct inode *inode, struct writeback_control *wbc),
 
 	TP_ARGS(inode, wbc),
@@ -412,7 +412,7 @@ TRACE_EVENT(ext4_da_writepages,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_da_write_pages,
+LTTNG_TRACEPOINT_EVENT(ext4_da_write_pages,
 	TP_PROTO(struct inode *inode, pgoff_t first_page,
 		 struct writeback_control *wbc),
 
@@ -443,7 +443,7 @@ TRACE_EVENT(ext4_da_write_pages,
 
 #else
 
-TRACE_EVENT(ext4_da_write_pages,
+LTTNG_TRACEPOINT_EVENT(ext4_da_write_pages,
 	TP_PROTO(struct inode *inode, struct mpage_da_data *mpd),
 
 	TP_ARGS(inode, mpd),
@@ -500,7 +500,7 @@ TRACE_EVENT(ext4_da_write_pages,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_da_write_pages_extent,
+LTTNG_TRACEPOINT_EVENT(ext4_da_write_pages_extent,
 	TP_PROTO(struct inode *inode, struct ext4_map_blocks *map),
 
 	TP_ARGS(inode, map),
@@ -529,7 +529,7 @@ TRACE_EVENT(ext4_da_write_pages_extent,
 
 #endif
 
-TRACE_EVENT(ext4_da_writepages_result,
+LTTNG_TRACEPOINT_EVENT(ext4_da_writepages_result,
 	TP_PROTO(struct inode *inode, struct writeback_control *wbc,
 			int ret, int pages_written),
 
@@ -623,7 +623,7 @@ TRACE_EVENT(ext4_da_writepages_result,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
-DECLARE_EVENT_CLASS(ext4__page_op,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__page_op,
 	TP_PROTO(struct page *page),
 
 	TP_ARGS(page),
@@ -648,7 +648,7 @@ DECLARE_EVENT_CLASS(ext4__page_op,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,40))
-DEFINE_EVENT(ext4__page_op, ext4_writepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__page_op, ext4_writepage,
 
 	TP_PROTO(struct page *page),
 
@@ -656,14 +656,14 @@ DEFINE_EVENT(ext4__page_op, ext4_writepage,
 )
 #endif
 
-DEFINE_EVENT(ext4__page_op, ext4_readpage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__page_op, ext4_readpage,
 
 	TP_PROTO(struct page *page),
 
 	TP_ARGS(page)
 )
 
-DEFINE_EVENT(ext4__page_op, ext4_releasepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__page_op, ext4_releasepage,
 
 	TP_PROTO(struct page *page),
 
@@ -672,7 +672,7 @@ DEFINE_EVENT(ext4__page_op, ext4_releasepage,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-DECLARE_EVENT_CLASS(ext4_invalidatepage_op,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4_invalidatepage_op,
 	TP_PROTO(struct page *page, unsigned int offset, unsigned int length),
 
 	TP_ARGS(page, offset, length),
@@ -700,13 +700,13 @@ DECLARE_EVENT_CLASS(ext4_invalidatepage_op,
 		  __entry->offset, __entry->length)
 )
 
-DEFINE_EVENT(ext4_invalidatepage_op, ext4_invalidatepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4_invalidatepage_op, ext4_invalidatepage,
 	TP_PROTO(struct page *page, unsigned int offset, unsigned int length),
 
 	TP_ARGS(page, offset, length)
 )
 
-DEFINE_EVENT(ext4_invalidatepage_op, ext4_journalled_invalidatepage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4_invalidatepage_op, ext4_journalled_invalidatepage,
 	TP_PROTO(struct page *page, unsigned int offset, unsigned int length),
 
 	TP_ARGS(page, offset, length)
@@ -714,7 +714,7 @@ DEFINE_EVENT(ext4_invalidatepage_op, ext4_journalled_invalidatepage,
 
 #else
 
-TRACE_EVENT(ext4_invalidatepage,
+LTTNG_TRACEPOINT_EVENT(ext4_invalidatepage,
 	TP_PROTO(struct page *page, unsigned long offset),
 
 	TP_ARGS(page, offset),
@@ -744,7 +744,7 @@ TRACE_EVENT(ext4_invalidatepage,
 
 #endif
 
-TRACE_EVENT(ext4_discard_blocks,
+LTTNG_TRACEPOINT_EVENT(ext4_discard_blocks,
 	TP_PROTO(struct super_block *sb, unsigned long long blk,
 			unsigned long long count),
 
@@ -768,7 +768,7 @@ TRACE_EVENT(ext4_discard_blocks,
 		  __entry->blk, __entry->count)
 )
 
-DECLARE_EVENT_CLASS(ext4__mb_new_pa,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__mb_new_pa,
 	TP_PROTO(struct ext4_allocation_context *ac,
 		 struct ext4_prealloc_space *pa),
 
@@ -797,7 +797,7 @@ DECLARE_EVENT_CLASS(ext4__mb_new_pa,
 		  __entry->pa_pstart, __entry->pa_len, __entry->pa_lstart)
 )
 
-DEFINE_EVENT(ext4__mb_new_pa, ext4_mb_new_inode_pa,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__mb_new_pa, ext4_mb_new_inode_pa,
 
 	TP_PROTO(struct ext4_allocation_context *ac,
 		 struct ext4_prealloc_space *pa),
@@ -805,7 +805,7 @@ DEFINE_EVENT(ext4__mb_new_pa, ext4_mb_new_inode_pa,
 	TP_ARGS(ac, pa)
 )
 
-DEFINE_EVENT(ext4__mb_new_pa, ext4_mb_new_group_pa,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__mb_new_pa, ext4_mb_new_group_pa,
 
 	TP_PROTO(struct ext4_allocation_context *ac,
 		 struct ext4_prealloc_space *pa),
@@ -813,7 +813,7 @@ DEFINE_EVENT(ext4__mb_new_pa, ext4_mb_new_group_pa,
 	TP_ARGS(ac, pa)
 )
 
-TRACE_EVENT(ext4_mb_release_inode_pa,
+LTTNG_TRACEPOINT_EVENT(ext4_mb_release_inode_pa,
 	TP_PROTO(
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,40))
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
@@ -873,7 +873,7 @@ TRACE_EVENT(ext4_mb_release_inode_pa,
 		  __entry->block, __entry->count)
 )
 
-TRACE_EVENT(ext4_mb_release_group_pa,
+LTTNG_TRACEPOINT_EVENT(ext4_mb_release_group_pa,
 
 #if (LTTNG_KERNEL_RANGE(2,6,40, 3,3,0))
 	TP_PROTO(struct ext4_prealloc_space *pa),
@@ -926,7 +926,7 @@ TRACE_EVENT(ext4_mb_release_group_pa,
 		  __entry->pa_pstart, __entry->pa_len)
 )
 
-TRACE_EVENT(ext4_discard_preallocations,
+LTTNG_TRACEPOINT_EVENT(ext4_discard_preallocations,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -947,7 +947,7 @@ TRACE_EVENT(ext4_discard_preallocations,
 		  (unsigned long) __entry->ino)
 )
 
-TRACE_EVENT(ext4_mb_discard_preallocations,
+LTTNG_TRACEPOINT_EVENT(ext4_mb_discard_preallocations,
 	TP_PROTO(struct super_block *sb, int needed),
 
 	TP_ARGS(sb, needed),
@@ -968,7 +968,7 @@ TRACE_EVENT(ext4_mb_discard_preallocations,
 		  __entry->needed)
 )
 
-TRACE_EVENT(ext4_request_blocks,
+LTTNG_TRACEPOINT_EVENT(ext4_request_blocks,
 	TP_PROTO(struct ext4_allocation_request *ar),
 
 	TP_ARGS(ar),
@@ -1008,7 +1008,7 @@ TRACE_EVENT(ext4_request_blocks,
 		  __entry->pright)
 )
 
-TRACE_EVENT(ext4_allocate_blocks,
+LTTNG_TRACEPOINT_EVENT(ext4_allocate_blocks,
 	TP_PROTO(struct ext4_allocation_request *ar, unsigned long long block),
 
 	TP_ARGS(ar, block),
@@ -1050,7 +1050,7 @@ TRACE_EVENT(ext4_allocate_blocks,
 		  __entry->pleft, __entry->pright)
 )
 
-TRACE_EVENT(ext4_free_blocks,
+LTTNG_TRACEPOINT_EVENT(ext4_free_blocks,
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33))
 	TP_PROTO(struct inode *inode, __u64 block, unsigned long count,
 		 int flags),
@@ -1105,9 +1105,9 @@ TRACE_EVENT(ext4_free_blocks,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
-TRACE_EVENT(ext4_sync_file_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_sync_file_enter,
 #else
-TRACE_EVENT(ext4_sync_file,
+LTTNG_TRACEPOINT_EVENT(ext4_sync_file,
 #endif
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 	TP_PROTO(struct file *file, int datasync),
@@ -1147,7 +1147,7 @@ TRACE_EVENT(ext4_sync_file,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
-TRACE_EVENT(ext4_sync_file_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_sync_file_exit,
 	TP_PROTO(struct inode *inode, int ret),
 
 	TP_ARGS(inode, ret),
@@ -1171,7 +1171,7 @@ TRACE_EVENT(ext4_sync_file_exit,
 )
 #endif
 
-TRACE_EVENT(ext4_sync_fs,
+LTTNG_TRACEPOINT_EVENT(ext4_sync_fs,
 	TP_PROTO(struct super_block *sb, int wait),
 
 	TP_ARGS(sb, wait),
@@ -1192,7 +1192,7 @@ TRACE_EVENT(ext4_sync_fs,
 		  __entry->wait)
 )
 
-TRACE_EVENT(ext4_alloc_da_blocks,
+LTTNG_TRACEPOINT_EVENT(ext4_alloc_da_blocks,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -1217,7 +1217,7 @@ TRACE_EVENT(ext4_alloc_da_blocks,
 		  __entry->data_blocks, __entry->meta_blocks)
 )
 
-TRACE_EVENT(ext4_mballoc_alloc,
+LTTNG_TRACEPOINT_EVENT(ext4_mballoc_alloc,
 	TP_PROTO(struct ext4_allocation_context *ac),
 
 	TP_ARGS(ac),
@@ -1284,7 +1284,7 @@ TRACE_EVENT(ext4_mballoc_alloc,
 		  __entry->buddy ? 1 << __entry->buddy : 0)
 )
 
-TRACE_EVENT(ext4_mballoc_prealloc,
+LTTNG_TRACEPOINT_EVENT(ext4_mballoc_prealloc,
 	TP_PROTO(struct ext4_allocation_context *ac),
 
 	TP_ARGS(ac),
@@ -1324,7 +1324,7 @@ TRACE_EVENT(ext4_mballoc_prealloc,
 		  __entry->result_len, __entry->result_logical)
 )
 
-DECLARE_EVENT_CLASS(ext4__mballoc,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__mballoc,
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
 	TP_PROTO(struct super_block *sb,
 		 struct inode *inode,
@@ -1383,7 +1383,7 @@ DECLARE_EVENT_CLASS(ext4__mballoc,
 	)
 )
 
-DEFINE_EVENT(ext4__mballoc, ext4_mballoc_discard,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__mballoc, ext4_mballoc_discard,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
 	TP_PROTO(struct super_block *sb,
@@ -1400,7 +1400,7 @@ DEFINE_EVENT(ext4__mballoc, ext4_mballoc_discard,
 #endif
 )
 
-DEFINE_EVENT(ext4__mballoc, ext4_mballoc_free,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__mballoc, ext4_mballoc_free,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
 	TP_PROTO(struct super_block *sb,
@@ -1418,7 +1418,7 @@ DEFINE_EVENT(ext4__mballoc, ext4_mballoc_free,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33))
-TRACE_EVENT(ext4_forget,
+LTTNG_TRACEPOINT_EVENT(ext4_forget,
 	TP_PROTO(struct inode *inode, int is_metadata, __u64 block),
 
 	TP_ARGS(inode, is_metadata, block),
@@ -1447,7 +1447,7 @@ TRACE_EVENT(ext4_forget,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,34))
-TRACE_EVENT(ext4_da_update_reserve_space,
+LTTNG_TRACEPOINT_EVENT(ext4_da_update_reserve_space,
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
 	TP_PROTO(struct inode *inode, int used_blocks, int quota_claim),
 
@@ -1511,7 +1511,7 @@ TRACE_EVENT(ext4_da_update_reserve_space,
 #endif
 )
 
-TRACE_EVENT(ext4_da_reserve_space,
+LTTNG_TRACEPOINT_EVENT(ext4_da_reserve_space,
 	TP_PROTO(struct inode *inode, int md_needed),
 
 	TP_ARGS(inode, md_needed),
@@ -1547,7 +1547,7 @@ TRACE_EVENT(ext4_da_reserve_space,
 		  __entry->reserved_meta_blocks)
 )
 
-TRACE_EVENT(ext4_da_release_space,
+LTTNG_TRACEPOINT_EVENT(ext4_da_release_space,
 	TP_PROTO(struct inode *inode, int freed_blocks),
 
 	TP_ARGS(inode, freed_blocks),
@@ -1589,7 +1589,7 @@ TRACE_EVENT(ext4_da_release_space,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
-DECLARE_EVENT_CLASS(ext4__bitmap_load,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__bitmap_load,
 	TP_PROTO(struct super_block *sb, unsigned long group),
 
 	TP_ARGS(sb, group),
@@ -1610,14 +1610,14 @@ DECLARE_EVENT_CLASS(ext4__bitmap_load,
 		  __entry->group)
 )
 
-DEFINE_EVENT(ext4__bitmap_load, ext4_mb_bitmap_load,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__bitmap_load, ext4_mb_bitmap_load,
 
 	TP_PROTO(struct super_block *sb, unsigned long group),
 
 	TP_ARGS(sb, group)
 )
 
-DEFINE_EVENT(ext4__bitmap_load, ext4_mb_buddy_bitmap_load,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__bitmap_load, ext4_mb_buddy_bitmap_load,
 
 	TP_PROTO(struct super_block *sb, unsigned long group),
 
@@ -1626,21 +1626,21 @@ DEFINE_EVENT(ext4__bitmap_load, ext4_mb_buddy_bitmap_load,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
-DEFINE_EVENT(ext4__bitmap_load, ext4_read_block_bitmap_load,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__bitmap_load, ext4_read_block_bitmap_load,
 
 	TP_PROTO(struct super_block *sb, unsigned long group),
 
 	TP_ARGS(sb, group)
 )
 
-DEFINE_EVENT(ext4__bitmap_load, ext4_load_inode_bitmap,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__bitmap_load, ext4_load_inode_bitmap,
 
 	TP_PROTO(struct super_block *sb, unsigned long group),
 
 	TP_ARGS(sb, group)
 )
 
-TRACE_EVENT(ext4_direct_IO_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_direct_IO_enter,
 	TP_PROTO(struct inode *inode, loff_t offset, unsigned long len, int rw),
 
 	TP_ARGS(inode, offset, len, rw),
@@ -1667,7 +1667,7 @@ TRACE_EVENT(ext4_direct_IO_enter,
 		  __entry->pos, __entry->len, __entry->rw)
 )
 
-TRACE_EVENT(ext4_direct_IO_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_direct_IO_exit,
 	TP_PROTO(struct inode *inode, loff_t offset, unsigned long len,
 		 int rw, int ret),
 
@@ -1698,7 +1698,7 @@ TRACE_EVENT(ext4_direct_IO_exit,
 		  __entry->rw, __entry->ret)
 )
 
-TRACE_EVENT(ext4_fallocate_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_fallocate_exit,
 	TP_PROTO(struct inode *inode, loff_t offset,
 		 unsigned int max_blocks, int ret),
 
@@ -1729,7 +1729,7 @@ TRACE_EVENT(ext4_fallocate_exit,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0))
 
-DECLARE_EVENT_CLASS(ext4__fallocate_mode,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__fallocate_mode,
 	TP_PROTO(struct inode *inode, loff_t offset, loff_t len, int mode),
 
 	TP_ARGS(inode, offset, len, mode),
@@ -1757,21 +1757,21 @@ DECLARE_EVENT_CLASS(ext4__fallocate_mode,
 		  show_falloc_mode(__entry->mode))
 )
 
-DEFINE_EVENT(ext4__fallocate_mode, ext4_fallocate_enter,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__fallocate_mode, ext4_fallocate_enter,
 
 	TP_PROTO(struct inode *inode, loff_t offset, loff_t len, int mode),
 
 	TP_ARGS(inode, offset, len, mode)
 )
 
-DEFINE_EVENT(ext4__fallocate_mode, ext4_punch_hole,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__fallocate_mode, ext4_punch_hole,
 
 	TP_PROTO(struct inode *inode, loff_t offset, loff_t len, int mode),
 
 	TP_ARGS(inode, offset, len, mode)
 )
 
-DEFINE_EVENT(ext4__fallocate_mode, ext4_zero_range,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__fallocate_mode, ext4_zero_range,
 
 	TP_PROTO(struct inode *inode, loff_t offset, loff_t len, int mode),
 
@@ -1780,7 +1780,7 @@ DEFINE_EVENT(ext4__fallocate_mode, ext4_zero_range,
 
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)) */
 
-TRACE_EVENT(ext4_fallocate_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_fallocate_enter,
 	TP_PROTO(struct inode *inode, loff_t offset, loff_t len, int mode),
 
 	TP_ARGS(inode, offset, len, mode),
@@ -1809,7 +1809,7 @@ TRACE_EVENT(ext4_fallocate_enter,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_punch_hole,
+LTTNG_TRACEPOINT_EVENT(ext4_punch_hole,
 	TP_PROTO(struct inode *inode, loff_t offset, loff_t len),
 
 	TP_ARGS(inode, offset, len),
@@ -1838,7 +1838,7 @@ TRACE_EVENT(ext4_punch_hole,
 
 #endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)) */
 
-TRACE_EVENT(ext4_unlink_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_unlink_enter,
 	TP_PROTO(struct inode *parent, struct dentry *dentry),
 
 	TP_ARGS(parent, dentry),
@@ -1863,7 +1863,7 @@ TRACE_EVENT(ext4_unlink_enter,
 		  (unsigned long) __entry->parent)
 )
 
-TRACE_EVENT(ext4_unlink_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_unlink_exit,
 	TP_PROTO(struct dentry *dentry, int ret),
 
 	TP_ARGS(dentry, ret),
@@ -1886,7 +1886,7 @@ TRACE_EVENT(ext4_unlink_exit,
 		  __entry->ret)
 )
 
-DECLARE_EVENT_CLASS(ext4__truncate,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__truncate,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -1908,14 +1908,14 @@ DECLARE_EVENT_CLASS(ext4__truncate,
 		  (unsigned long) __entry->ino, __entry->blocks)
 )
 
-DEFINE_EVENT(ext4__truncate, ext4_truncate_enter,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__truncate, ext4_truncate_enter,
 
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode)
 )
 
-DEFINE_EVENT(ext4__truncate, ext4_truncate_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__truncate, ext4_truncate_exit,
 
 	TP_PROTO(struct inode *inode),
 
@@ -1924,7 +1924,7 @@ DEFINE_EVENT(ext4__truncate, ext4_truncate_exit,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
 /* 'ux' is the uninitialized extent. */
-TRACE_EVENT(ext4_ext_convert_to_initialized_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_convert_to_initialized_enter,
 	TP_PROTO(struct inode *inode, struct ext4_map_blocks *map,
 		 struct ext4_extent *ux),
 
@@ -1962,7 +1962,7 @@ TRACE_EVENT(ext4_ext_convert_to_initialized_enter,
  * 'ux' is the uninitialized extent.
  * 'ix' is the initialized extent to which blocks are transferred.
  */
-TRACE_EVENT(ext4_ext_convert_to_initialized_fastpath,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_convert_to_initialized_fastpath,
 	TP_PROTO(struct inode *inode, struct ext4_map_blocks *map,
 		 struct ext4_extent *ux, struct ext4_extent *ix),
 
@@ -2005,7 +2005,7 @@ TRACE_EVENT(ext4_ext_convert_to_initialized_fastpath,
 )
 #endif
 
-DECLARE_EVENT_CLASS(ext4__map_blocks_enter,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__map_blocks_enter,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk,
 		 unsigned int len, unsigned int flags),
 
@@ -2033,14 +2033,14 @@ DECLARE_EVENT_CLASS(ext4__map_blocks_enter,
 		  __entry->lblk, __entry->len, __entry->flags)
 )
 
-DEFINE_EVENT(ext4__map_blocks_enter, ext4_ext_map_blocks_enter,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_enter, ext4_ext_map_blocks_enter,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk,
 		 unsigned len, unsigned flags),
 
 	TP_ARGS(inode, lblk, len, flags)
 )
 
-DEFINE_EVENT(ext4__map_blocks_enter, ext4_ind_map_blocks_enter,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_enter, ext4_ind_map_blocks_enter,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk,
 		 unsigned len, unsigned flags),
 
@@ -2049,7 +2049,7 @@ DEFINE_EVENT(ext4__map_blocks_enter, ext4_ind_map_blocks_enter,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-DECLARE_EVENT_CLASS(ext4__map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__map_blocks_exit,
 	TP_PROTO(struct inode *inode, unsigned flags, struct ext4_map_blocks *map,
 		 int ret),
 
@@ -2085,14 +2085,14 @@ DECLARE_EVENT_CLASS(ext4__map_blocks_exit,
 		  __entry->len, show_mflags(__entry->mflags), __entry->ret)
 )
 
-DEFINE_EVENT(ext4__map_blocks_exit, ext4_ext_map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_exit, ext4_ext_map_blocks_exit,
 	TP_PROTO(struct inode *inode, unsigned flags,
 		 struct ext4_map_blocks *map, int ret),
 
 	TP_ARGS(inode, flags, map, ret)
 )
 
-DEFINE_EVENT(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
 	TP_PROTO(struct inode *inode, unsigned flags,
 		 struct ext4_map_blocks *map, int ret),
 
@@ -2101,7 +2101,7 @@ DEFINE_EVENT(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
 
 #elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,8,0))
 
-DECLARE_EVENT_CLASS(ext4__map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__map_blocks_exit,
 	TP_PROTO(struct inode *inode, struct ext4_map_blocks *map, int ret),
 
 	TP_ARGS(inode, map, ret),
@@ -2133,13 +2133,13 @@ DECLARE_EVENT_CLASS(ext4__map_blocks_exit,
 		  __entry->len, __entry->flags, __entry->ret)
 )
 
-DEFINE_EVENT(ext4__map_blocks_exit, ext4_ext_map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_exit, ext4_ext_map_blocks_exit,
 	TP_PROTO(struct inode *inode, struct ext4_map_blocks *map, int ret),
 
 	TP_ARGS(inode, map, ret)
 )
 
-DEFINE_EVENT(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
 	TP_PROTO(struct inode *inode, struct ext4_map_blocks *map, int ret),
 
 	TP_ARGS(inode, map, ret)
@@ -2147,7 +2147,7 @@ DEFINE_EVENT(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
 
 #else	/* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,8,0)) */
 
-DECLARE_EVENT_CLASS(ext4__map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__map_blocks_exit,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk,
 		 ext4_fsblk_t pblk, unsigned int len, int ret),
 
@@ -2178,14 +2178,14 @@ DECLARE_EVENT_CLASS(ext4__map_blocks_exit,
 		  __entry->len, __entry->ret)
 )
 
-DEFINE_EVENT(ext4__map_blocks_exit, ext4_ext_map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_exit, ext4_ext_map_blocks_exit,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk,
 		 ext4_fsblk_t pblk, unsigned len, int ret),
 
 	TP_ARGS(inode, lblk, pblk, len, ret)
 )
 
-DEFINE_EVENT(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk,
 		 ext4_fsblk_t pblk, unsigned len, int ret),
 
@@ -2194,7 +2194,7 @@ DEFINE_EVENT(ext4__map_blocks_exit, ext4_ind_map_blocks_exit,
 
 #endif	/* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,8,0)) */
 
-TRACE_EVENT(ext4_ext_load_extent,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_load_extent,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk, ext4_fsblk_t pblk),
 
 	TP_ARGS(inode, lblk, pblk),
@@ -2219,7 +2219,7 @@ TRACE_EVENT(ext4_ext_load_extent,
 		  __entry->lblk, __entry->pblk)
 )
 
-TRACE_EVENT(ext4_load_inode,
+LTTNG_TRACEPOINT_EVENT(ext4_load_inode,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -2242,7 +2242,7 @@ TRACE_EVENT(ext4_load_inode,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_journal_start,
+LTTNG_TRACEPOINT_EVENT(ext4_journal_start,
 	TP_PROTO(struct super_block *sb, int blocks, int rsv_blocks,
 		 unsigned long IP),
 
@@ -2267,7 +2267,7 @@ TRACE_EVENT(ext4_journal_start,
 		  __entry->blocks, __entry->rsv_blocks, (void *)__entry->ip)
 )
 
-TRACE_EVENT(ext4_journal_start_reserved,
+LTTNG_TRACEPOINT_EVENT(ext4_journal_start_reserved,
 	TP_PROTO(struct super_block *sb, int blocks, unsigned long IP),
 
 	TP_ARGS(sb, blocks, IP),
@@ -2291,7 +2291,7 @@ TRACE_EVENT(ext4_journal_start_reserved,
 
 #elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0))
 
-TRACE_EVENT(ext4_journal_start,
+LTTNG_TRACEPOINT_EVENT(ext4_journal_start,
 	TP_PROTO(struct super_block *sb, int nblocks, unsigned long IP),
 
 	TP_ARGS(sb, nblocks, IP),
@@ -2313,7 +2313,7 @@ TRACE_EVENT(ext4_journal_start,
 		  __entry->nblocks, (void *)__entry->ip)
 )
 
-DECLARE_EVENT_CLASS(ext4__trim,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__trim,
 	TP_PROTO(struct super_block *sb,
 		 ext4_group_t group,
 		 ext4_grpblk_t start,
@@ -2342,7 +2342,7 @@ DECLARE_EVENT_CLASS(ext4__trim,
 		  __entry->group, __entry->start, __entry->len)
 )
 
-DEFINE_EVENT(ext4__trim, ext4_trim_extent,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__trim, ext4_trim_extent,
 
 	TP_PROTO(struct super_block *sb,
 		 ext4_group_t group,
@@ -2352,7 +2352,7 @@ DEFINE_EVENT(ext4__trim, ext4_trim_extent,
 	TP_ARGS(sb, group, start, len)
 )
 
-DEFINE_EVENT(ext4__trim, ext4_trim_all_free,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__trim, ext4_trim_all_free,
 
 	TP_PROTO(struct super_block *sb,
 		 ext4_group_t group,
@@ -2365,7 +2365,7 @@ DEFINE_EVENT(ext4__trim, ext4_trim_all_free,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
 
-TRACE_EVENT(ext4_ext_handle_uninitialized_extents,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_handle_uninitialized_extents,
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,8,0))
 	TP_PROTO(struct inode *inode, struct ext4_map_blocks *map, int flags,
 		 unsigned int allocated, ext4_fsblk_t newblock),
@@ -2414,7 +2414,7 @@ TRACE_EVENT(ext4_ext_handle_uninitialized_extents,
 		  (unsigned long long) __entry->newblk)
 )
 
-TRACE_EVENT(ext4_get_implied_cluster_alloc_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_get_implied_cluster_alloc_exit,
 	TP_PROTO(struct super_block *sb, struct ext4_map_blocks *map, int ret),
 
 	TP_ARGS(sb, map, ret),
@@ -2443,7 +2443,7 @@ TRACE_EVENT(ext4_get_implied_cluster_alloc_exit,
 		  __entry->len, __entry->flags, __entry->ret)
 )
 
-TRACE_EVENT(ext4_ext_put_in_cache,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_put_in_cache,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk, unsigned int len,
 		 ext4_fsblk_t start),
 
@@ -2473,7 +2473,7 @@ TRACE_EVENT(ext4_ext_put_in_cache,
 		  (unsigned long long) __entry->start)
 )
 
-TRACE_EVENT(ext4_ext_in_cache,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_in_cache,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk, int ret),
 
 	TP_ARGS(inode, lblk, ret),
@@ -2500,7 +2500,7 @@ TRACE_EVENT(ext4_ext_in_cache,
 
 )
 
-TRACE_EVENT(ext4_find_delalloc_range,
+LTTNG_TRACEPOINT_EVENT(ext4_find_delalloc_range,
 	TP_PROTO(struct inode *inode, ext4_lblk_t from, ext4_lblk_t to,
 		int reverse, int found, ext4_lblk_t found_blk),
 
@@ -2535,7 +2535,7 @@ TRACE_EVENT(ext4_find_delalloc_range,
 		  (unsigned) __entry->found_blk)
 )
 
-TRACE_EVENT(ext4_get_reserved_cluster_alloc,
+LTTNG_TRACEPOINT_EVENT(ext4_get_reserved_cluster_alloc,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk, unsigned int len),
 
 	TP_ARGS(inode, lblk, len),
@@ -2561,7 +2561,7 @@ TRACE_EVENT(ext4_get_reserved_cluster_alloc,
 		  __entry->len)
 )
 
-TRACE_EVENT(ext4_ext_show_extent,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_show_extent,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk, ext4_fsblk_t pblk,
 		 unsigned short len),
 
@@ -2593,7 +2593,7 @@ TRACE_EVENT(ext4_ext_show_extent,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_remove_blocks,
+LTTNG_TRACEPOINT_EVENT(ext4_remove_blocks,
 	    TP_PROTO(struct inode *inode, struct ext4_extent *ex,
 		ext4_lblk_t from, ext4_fsblk_t to,
 		long long partial_cluster),
@@ -2636,7 +2636,7 @@ TRACE_EVENT(ext4_remove_blocks,
 
 #else
 
-TRACE_EVENT(ext4_remove_blocks,
+LTTNG_TRACEPOINT_EVENT(ext4_remove_blocks,
 	    TP_PROTO(struct inode *inode, struct ext4_extent *ex,
 		ext4_lblk_t from, ext4_fsblk_t to,
 		ext4_fsblk_t partial_cluster),
@@ -2681,7 +2681,7 @@ TRACE_EVENT(ext4_remove_blocks,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_ext_rm_leaf,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_rm_leaf,
 	TP_PROTO(struct inode *inode, ext4_lblk_t start,
 		 struct ext4_extent *ex,
 		 long long partial_cluster),
@@ -2721,7 +2721,7 @@ TRACE_EVENT(ext4_ext_rm_leaf,
 
 #else
 
-TRACE_EVENT(ext4_ext_rm_leaf,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_rm_leaf,
 	TP_PROTO(struct inode *inode, ext4_lblk_t start,
 		 struct ext4_extent *ex, ext4_fsblk_t partial_cluster),
 
@@ -2760,7 +2760,7 @@ TRACE_EVENT(ext4_ext_rm_leaf,
 
 #endif
 
-TRACE_EVENT(ext4_ext_rm_idx,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_rm_idx,
 	TP_PROTO(struct inode *inode, ext4_fsblk_t pblk),
 
 	TP_ARGS(inode, pblk),
@@ -2785,7 +2785,7 @@ TRACE_EVENT(ext4_ext_rm_idx,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_ext_remove_space,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_remove_space,
 	TP_PROTO(struct inode *inode, ext4_lblk_t start,
 		 ext4_lblk_t end, int depth),
 
@@ -2817,7 +2817,7 @@ TRACE_EVENT(ext4_ext_remove_space,
 
 #else
 
-TRACE_EVENT(ext4_ext_remove_space,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_remove_space,
 	TP_PROTO(struct inode *inode, ext4_lblk_t start, int depth),
 
 	TP_ARGS(inode, start, depth),
@@ -2847,7 +2847,7 @@ TRACE_EVENT(ext4_ext_remove_space,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_ext_remove_space_done,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_remove_space_done,
 	TP_PROTO(struct inode *inode, ext4_lblk_t start, ext4_lblk_t end,
 		 int depth, long long partial, __le16 eh_entries),
 
@@ -2886,7 +2886,7 @@ TRACE_EVENT(ext4_ext_remove_space_done,
 
 #else
 
-TRACE_EVENT(ext4_ext_remove_space_done,
+LTTNG_TRACEPOINT_EVENT(ext4_ext_remove_space_done,
 	TP_PROTO(struct inode *inode, ext4_lblk_t start, int depth,
 		ext4_lblk_t partial, unsigned short eh_entries),
 
@@ -2926,7 +2926,7 @@ TRACE_EVENT(ext4_ext_remove_space_done,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 
-DECLARE_EVENT_CLASS(ext4__es_extent,
+LTTNG_TRACEPOINT_EVENT_CLASS(ext4__es_extent,
 	TP_PROTO(struct inode *inode, struct extent_status *es),
 
 	TP_ARGS(inode, es),
@@ -2956,13 +2956,13 @@ DECLARE_EVENT_CLASS(ext4__es_extent,
 		  __entry->pblk, show_extent_status(__entry->status))
 )
 
-DEFINE_EVENT(ext4__es_extent, ext4_es_insert_extent,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__es_extent, ext4_es_insert_extent,
 	TP_PROTO(struct inode *inode, struct extent_status *es),
 
 	TP_ARGS(inode, es)
 )
 
-DEFINE_EVENT(ext4__es_extent, ext4_es_cache_extent,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(ext4__es_extent, ext4_es_cache_extent,
 	TP_PROTO(struct inode *inode, struct extent_status *es),
 
 	TP_ARGS(inode, es)
@@ -2970,7 +2970,7 @@ DEFINE_EVENT(ext4__es_extent, ext4_es_cache_extent,
 
 #elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 
-TRACE_EVENT(ext4_es_insert_extent,
+LTTNG_TRACEPOINT_EVENT(ext4_es_insert_extent,
 	TP_PROTO(struct inode *inode, struct extent_status *es),
 
 	TP_ARGS(inode, es),
@@ -3000,7 +3000,7 @@ TRACE_EVENT(ext4_es_insert_extent,
 		  __entry->pblk, show_extent_status(__entry->status))
 )
 
-TRACE_EVENT(ext4_es_remove_extent,
+LTTNG_TRACEPOINT_EVENT(ext4_es_remove_extent,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t len),
 
 	TP_ARGS(inode, lblk, len),
@@ -3025,7 +3025,7 @@ TRACE_EVENT(ext4_es_remove_extent,
 		  __entry->lblk, __entry->len)
 )
 
-TRACE_EVENT(ext4_es_find_delayed_extent_range_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_es_find_delayed_extent_range_enter,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk),
 
 	TP_ARGS(inode, lblk),
@@ -3047,7 +3047,7 @@ TRACE_EVENT(ext4_es_find_delayed_extent_range_enter,
 		  (unsigned long) __entry->ino, __entry->lblk)
 )
 
-TRACE_EVENT(ext4_es_find_delayed_extent_range_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_es_find_delayed_extent_range_exit,
 	TP_PROTO(struct inode *inode, struct extent_status *es),
 
 	TP_ARGS(inode, es),
@@ -3077,7 +3077,7 @@ TRACE_EVENT(ext4_es_find_delayed_extent_range_exit,
 		  __entry->pblk, show_extent_status(__entry->status))
 )
 
-TRACE_EVENT(ext4_es_lookup_extent_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_es_lookup_extent_enter,
 	TP_PROTO(struct inode *inode, ext4_lblk_t lblk),
 
 	TP_ARGS(inode, lblk),
@@ -3099,7 +3099,7 @@ TRACE_EVENT(ext4_es_lookup_extent_enter,
 		  (unsigned long) __entry->ino, __entry->lblk)
 )
 
-TRACE_EVENT(ext4_es_lookup_extent_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_es_lookup_extent_exit,
 	TP_PROTO(struct inode *inode, struct extent_status *es,
 		 int found),
 
@@ -3133,7 +3133,7 @@ TRACE_EVENT(ext4_es_lookup_extent_exit,
 		  show_extent_status(__entry->found ? __entry->status : 0))
 )
 
-TRACE_EVENT(ext4_es_shrink_enter,
+LTTNG_TRACEPOINT_EVENT(ext4_es_shrink_enter,
 	TP_PROTO(struct super_block *sb, int nr_to_scan, int cache_cnt),
 
 	TP_ARGS(sb, nr_to_scan, cache_cnt),
@@ -3155,7 +3155,7 @@ TRACE_EVENT(ext4_es_shrink_enter,
 		  __entry->nr_to_scan, __entry->cache_cnt)
 )
 
-TRACE_EVENT(ext4_es_shrink_exit,
+LTTNG_TRACEPOINT_EVENT(ext4_es_shrink_exit,
 	TP_PROTO(struct super_block *sb, int shrunk_nr, int cache_cnt),
 
 	TP_ARGS(sb, shrunk_nr, cache_cnt),
@@ -3179,7 +3179,7 @@ TRACE_EVENT(ext4_es_shrink_exit,
 
 #endif
 
-#endif /* _TRACE_EXT4_H */
+#endif /* LTTNG_TRACE_EXT4_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/gpio.h b/drivers/staging/lttng/instrumentation/events/lttng-module/gpio.h
index a0c5876..6d93d4f 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/gpio.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/gpio.h
@@ -1,12 +1,12 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM gpio
 
-#if !defined(_TRACE_GPIO_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_GPIO_H
+#if !defined(LTTNG_TRACE_GPIO_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_GPIO_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 
-TRACE_EVENT(gpio_direction,
+LTTNG_TRACEPOINT_EVENT(gpio_direction,
 
 	TP_PROTO(unsigned gpio, int in, int err),
 
@@ -28,7 +28,7 @@ TRACE_EVENT(gpio_direction,
 		__entry->in ? "in" : "out", __entry->err)
 )
 
-TRACE_EVENT(gpio_value,
+LTTNG_TRACEPOINT_EVENT(gpio_value,
 
 	TP_PROTO(unsigned gpio, int get, int value),
 
@@ -50,7 +50,7 @@ TRACE_EVENT(gpio_value,
 		__entry->get ? "get" : "set", __entry->value)
 )
 
-#endif /* if !defined(_TRACE_GPIO_H) || defined(TRACE_HEADER_MULTI_READ) */
+#endif /* if !defined(LTTNG_TRACE_GPIO_H) || defined(TRACE_HEADER_MULTI_READ) */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/irq.h b/drivers/staging/lttng/instrumentation/events/lttng-module/irq.h
index e766326..8517414 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/irq.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/irq.h
@@ -1,10 +1,10 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM irq
 
-#if !defined(_TRACE_IRQ_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_IRQ_H
+#if !defined(LTTNG_TRACE_IRQ_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_IRQ_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 
 #ifndef _TRACE_IRQ_DEF_
 #define _TRACE_IRQ_DEF_
@@ -39,7 +39,7 @@ struct softirq_action;
  * conjunction with the irq_handler_exit tracepoint, we can figure
  * out irq handler latencies.
  */
-TRACE_EVENT(irq_handler_entry,
+LTTNG_TRACEPOINT_EVENT(irq_handler_entry,
 
 	TP_PROTO(int irq, struct irqaction *action),
 
@@ -69,7 +69,7 @@ TRACE_EVENT(irq_handler_entry,
  * a shared irq line, or the irq was not handled successfully. Can be used in
  * conjunction with the irq_handler_entry to understand irq handler latencies.
  */
-TRACE_EVENT(irq_handler_exit,
+LTTNG_TRACEPOINT_EVENT(irq_handler_exit,
 
 	TP_PROTO(int irq, struct irqaction *action, int ret),
 
@@ -90,7 +90,7 @@ TRACE_EVENT(irq_handler_exit,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
-DECLARE_EVENT_CLASS(softirq,
+LTTNG_TRACEPOINT_EVENT_CLASS(softirq,
 
 	TP_PROTO(unsigned int vec_nr),
 
@@ -115,7 +115,7 @@ DECLARE_EVENT_CLASS(softirq,
  * When used in combination with the softirq_exit tracepoint
  * we can determine the softirq handler runtine.
  */
-DEFINE_EVENT(softirq, softirq_entry,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(softirq, softirq_entry,
 
 	TP_PROTO(unsigned int vec_nr),
 
@@ -129,7 +129,7 @@ DEFINE_EVENT(softirq, softirq_entry,
  * When used in combination with the softirq_entry tracepoint
  * we can determine the softirq handler runtine.
  */
-DEFINE_EVENT(softirq, softirq_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(softirq, softirq_exit,
 
 	TP_PROTO(unsigned int vec_nr),
 
@@ -143,14 +143,14 @@ DEFINE_EVENT(softirq, softirq_exit,
  * When used in combination with the softirq_entry tracepoint
  * we can determine the softirq raise to run latency.
  */
-DEFINE_EVENT(softirq, softirq_raise,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(softirq, softirq_raise,
 
 	TP_PROTO(unsigned int vec_nr),
 
 	TP_ARGS(vec_nr)
 )
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37)) */
-DECLARE_EVENT_CLASS(softirq,
+LTTNG_TRACEPOINT_EVENT_CLASS(softirq,
 
 	TP_PROTO(struct softirq_action *h, struct softirq_action *vec),
 
@@ -176,7 +176,7 @@ DECLARE_EVENT_CLASS(softirq,
  * When used in combination with the softirq_exit tracepoint
  * we can determine the softirq handler runtine.
  */
-DEFINE_EVENT(softirq, softirq_entry,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(softirq, softirq_entry,
 
 	TP_PROTO(struct softirq_action *h, struct softirq_action *vec),
 
@@ -191,7 +191,7 @@ DEFINE_EVENT(softirq, softirq_entry,
  * When used in combination with the softirq_entry tracepoint
  * we can determine the softirq handler runtine.
  */
-DEFINE_EVENT(softirq, softirq_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(softirq, softirq_exit,
 
 	TP_PROTO(struct softirq_action *h, struct softirq_action *vec),
 
@@ -206,7 +206,7 @@ DEFINE_EVENT(softirq, softirq_exit,
  * When used in combination with the softirq_entry tracepoint
  * we can determine the softirq raise to run latency.
  */
-DEFINE_EVENT(softirq, softirq_raise,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(softirq, softirq_raise,
 
 	TP_PROTO(struct softirq_action *h, struct softirq_action *vec),
 
@@ -214,7 +214,7 @@ DEFINE_EVENT(softirq, softirq_raise,
 )
 #endif /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37)) */
 
-#endif /*  _TRACE_IRQ_H */
+#endif /*  LTTNG_TRACE_IRQ_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/jbd.h b/drivers/staging/lttng/instrumentation/events/lttng-module/jbd.h
index f20eef2..d1da49a 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/jbd.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/jbd.h
@@ -1,14 +1,14 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM jbd
 
-#if !defined(_TRACE_JBD_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_JBD_H
+#if !defined(LTTNG_TRACE_JBD_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_JBD_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/jbd.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
-TRACE_EVENT(jbd_checkpoint,
+LTTNG_TRACEPOINT_EVENT(jbd_checkpoint,
 
 	TP_PROTO(journal_t *journal, int result),
 
@@ -29,7 +29,7 @@ TRACE_EVENT(jbd_checkpoint,
 		  __entry->result)
 )
 
-DECLARE_EVENT_CLASS(jbd_commit,
+LTTNG_TRACEPOINT_EVENT_CLASS(jbd_commit,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
@@ -62,35 +62,35 @@ DECLARE_EVENT_CLASS(jbd_commit,
 #endif
 )
 
-DEFINE_EVENT(jbd_commit, jbd_start_commit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd_commit, jbd_start_commit,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction)
 )
 
-DEFINE_EVENT(jbd_commit, jbd_commit_locking,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd_commit, jbd_commit_locking,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction)
 )
 
-DEFINE_EVENT(jbd_commit, jbd_commit_flushing,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd_commit, jbd_commit_flushing,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction)
 )
 
-DEFINE_EVENT(jbd_commit, jbd_commit_logging,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd_commit, jbd_commit_logging,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction)
 )
 
-TRACE_EVENT(jbd_drop_transaction,
+LTTNG_TRACEPOINT_EVENT(jbd_drop_transaction,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
@@ -123,7 +123,7 @@ TRACE_EVENT(jbd_drop_transaction,
 #endif
 )
 
-TRACE_EVENT(jbd_end_commit,
+LTTNG_TRACEPOINT_EVENT(jbd_end_commit,
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction),
@@ -157,7 +157,7 @@ TRACE_EVENT(jbd_end_commit,
 #endif
 )
 
-TRACE_EVENT(jbd_do_submit_data,
+LTTNG_TRACEPOINT_EVENT(jbd_do_submit_data,
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction),
@@ -189,7 +189,7 @@ TRACE_EVENT(jbd_do_submit_data,
 #endif
 )
 
-TRACE_EVENT(jbd_cleanup_journal_tail,
+LTTNG_TRACEPOINT_EVENT(jbd_cleanup_journal_tail,
 
 	TP_PROTO(journal_t *journal, tid_t first_tid,
 		 unsigned long block_nr, unsigned long freed),
@@ -219,7 +219,7 @@ TRACE_EVENT(jbd_cleanup_journal_tail,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0))
-TRACE_EVENT_MAP(journal_write_superblock,
+LTTNG_TRACEPOINT_EVENT_MAP(journal_write_superblock,
 
 	jbd_journal_write_superblock,
 
@@ -241,7 +241,7 @@ TRACE_EVENT_MAP(journal_write_superblock,
 		  MINOR(__entry->dev), __entry->write_op)
 )
 #else
-TRACE_EVENT(jbd_update_superblock_end,
+LTTNG_TRACEPOINT_EVENT(jbd_update_superblock_end,
 	TP_PROTO(journal_t *journal, int wait),
 
 	TP_ARGS(journal, wait),
@@ -262,7 +262,7 @@ TRACE_EVENT(jbd_update_superblock_end,
 )
 #endif
 
-#endif /* _TRACE_JBD_H */
+#endif /* LTTNG_TRACE_JBD_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/jbd2.h b/drivers/staging/lttng/instrumentation/events/lttng-module/jbd2.h
index 872cf9e..491a15a 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/jbd2.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/jbd2.h
@@ -1,11 +1,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM jbd2
 
-#if !defined(_TRACE_JBD2_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_JBD2_H
+#if !defined(LTTNG_TRACE_JBD2_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_JBD2_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/jbd2.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,32))
@@ -16,7 +16,7 @@ struct transaction_run_stats_s;
 #endif
 #endif
 
-TRACE_EVENT(jbd2_checkpoint,
+LTTNG_TRACEPOINT_EVENT(jbd2_checkpoint,
 
 	TP_PROTO(journal_t *journal, int result),
 
@@ -36,7 +36,7 @@ TRACE_EVENT(jbd2_checkpoint,
 		  MAJOR(__entry->dev), MINOR(__entry->dev), __entry->result)
 )
 
-DECLARE_EVENT_CLASS(jbd2_commit,
+LTTNG_TRACEPOINT_EVENT_CLASS(jbd2_commit,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
@@ -59,28 +59,28 @@ DECLARE_EVENT_CLASS(jbd2_commit,
 		  __entry->transaction, __entry->sync_commit)
 )
 
-DEFINE_EVENT(jbd2_commit, jbd2_start_commit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd2_commit, jbd2_start_commit,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction)
 )
 
-DEFINE_EVENT(jbd2_commit, jbd2_commit_locking,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd2_commit, jbd2_commit_locking,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction)
 )
 
-DEFINE_EVENT(jbd2_commit, jbd2_commit_flushing,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd2_commit, jbd2_commit_flushing,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction)
 )
 
-DEFINE_EVENT(jbd2_commit, jbd2_commit_logging,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd2_commit, jbd2_commit_logging,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
@@ -88,7 +88,7 @@ DEFINE_EVENT(jbd2_commit, jbd2_commit_logging,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
-DEFINE_EVENT(jbd2_commit, jbd2_drop_transaction,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(jbd2_commit, jbd2_drop_transaction,
 
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
@@ -96,7 +96,7 @@ DEFINE_EVENT(jbd2_commit, jbd2_drop_transaction,
 )
 #endif
 
-TRACE_EVENT(jbd2_end_commit,
+LTTNG_TRACEPOINT_EVENT(jbd2_end_commit,
 	TP_PROTO(journal_t *journal, transaction_t *commit_transaction),
 
 	TP_ARGS(journal, commit_transaction),
@@ -120,7 +120,7 @@ TRACE_EVENT(jbd2_end_commit,
 		  __entry->transaction, __entry->sync_commit, __entry->head)
 )
 
-TRACE_EVENT(jbd2_submit_inode_data,
+LTTNG_TRACEPOINT_EVENT(jbd2_submit_inode_data,
 	TP_PROTO(struct inode *inode),
 
 	TP_ARGS(inode),
@@ -141,7 +141,7 @@ TRACE_EVENT(jbd2_submit_inode_data,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,32))
-TRACE_EVENT(jbd2_run_stats,
+LTTNG_TRACEPOINT_EVENT(jbd2_run_stats,
 	TP_PROTO(dev_t dev, unsigned long tid,
 		 struct transaction_run_stats_s *stats),
 
@@ -185,7 +185,7 @@ TRACE_EVENT(jbd2_run_stats,
 		  __entry->blocks_logged)
 )
 
-TRACE_EVENT(jbd2_checkpoint_stats,
+LTTNG_TRACEPOINT_EVENT(jbd2_checkpoint_stats,
 	TP_PROTO(dev_t dev, unsigned long tid,
 		 struct transaction_chp_stats_s *stats),
 
@@ -219,9 +219,9 @@ TRACE_EVENT(jbd2_checkpoint_stats,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,34))
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
-TRACE_EVENT(jbd2_update_log_tail,
+LTTNG_TRACEPOINT_EVENT(jbd2_update_log_tail,
 #else
-TRACE_EVENT(jbd2_cleanup_journal_tail,
+LTTNG_TRACEPOINT_EVENT(jbd2_cleanup_journal_tail,
 #endif
 
 	TP_PROTO(journal_t *journal, tid_t first_tid,
@@ -253,7 +253,7 @@ TRACE_EVENT(jbd2_cleanup_journal_tail,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
-TRACE_EVENT(jbd2_write_superblock,
+LTTNG_TRACEPOINT_EVENT(jbd2_write_superblock,
 
 	TP_PROTO(journal_t *journal, int write_op),
 
@@ -274,7 +274,7 @@ TRACE_EVENT(jbd2_write_superblock,
 )
 #endif
 
-#endif /* _TRACE_JBD2_H */
+#endif /* LTTNG_TRACE_JBD2_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/kmem.h b/drivers/staging/lttng/instrumentation/events/lttng-module/kmem.h
index 2bc70a8..203a19c 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/kmem.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/kmem.h
@@ -1,17 +1,17 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM kmem
 
-#if !defined(_TRACE_KMEM_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_KMEM_H
+#if !defined(LTTNG_TRACE_KMEM_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_KMEM_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/types.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36))
 #include <trace/events/gfpflags.h>
 #endif
 
-DECLARE_EVENT_CLASS(kmem_alloc,
+LTTNG_TRACEPOINT_EVENT_CLASS(kmem_alloc,
 
 	TP_PROTO(unsigned long call_site,
 		 const void *ptr,
@@ -45,7 +45,7 @@ DECLARE_EVENT_CLASS(kmem_alloc,
 		show_gfp_flags(__entry->gfp_flags))
 )
 
-DEFINE_EVENT_MAP(kmem_alloc, kmalloc,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(kmem_alloc, kmalloc,
 
 	kmem_kmalloc,
 
@@ -55,7 +55,7 @@ DEFINE_EVENT_MAP(kmem_alloc, kmalloc,
 	TP_ARGS(call_site, ptr, bytes_req, bytes_alloc, gfp_flags)
 )
 
-DEFINE_EVENT(kmem_alloc, kmem_cache_alloc,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kmem_alloc, kmem_cache_alloc,
 
 	TP_PROTO(unsigned long call_site, const void *ptr,
 		 size_t bytes_req, size_t bytes_alloc, gfp_t gfp_flags),
@@ -63,7 +63,7 @@ DEFINE_EVENT(kmem_alloc, kmem_cache_alloc,
 	TP_ARGS(call_site, ptr, bytes_req, bytes_alloc, gfp_flags)
 )
 
-DECLARE_EVENT_CLASS(kmem_alloc_node,
+LTTNG_TRACEPOINT_EVENT_CLASS(kmem_alloc_node,
 
 	TP_PROTO(unsigned long call_site,
 		 const void *ptr,
@@ -101,7 +101,7 @@ DECLARE_EVENT_CLASS(kmem_alloc_node,
 		__entry->node)
 )
 
-DEFINE_EVENT_MAP(kmem_alloc_node, kmalloc_node,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(kmem_alloc_node, kmalloc_node,
 
 	kmem_kmalloc_node,
 
@@ -112,7 +112,7 @@ DEFINE_EVENT_MAP(kmem_alloc_node, kmalloc_node,
 	TP_ARGS(call_site, ptr, bytes_req, bytes_alloc, gfp_flags, node)
 )
 
-DEFINE_EVENT(kmem_alloc_node, kmem_cache_alloc_node,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kmem_alloc_node, kmem_cache_alloc_node,
 
 	TP_PROTO(unsigned long call_site, const void *ptr,
 		 size_t bytes_req, size_t bytes_alloc,
@@ -121,7 +121,7 @@ DEFINE_EVENT(kmem_alloc_node, kmem_cache_alloc_node,
 	TP_ARGS(call_site, ptr, bytes_req, bytes_alloc, gfp_flags, node)
 )
 
-DECLARE_EVENT_CLASS(kmem_free,
+LTTNG_TRACEPOINT_EVENT_CLASS(kmem_free,
 
 	TP_PROTO(unsigned long call_site, const void *ptr),
 
@@ -140,7 +140,7 @@ DECLARE_EVENT_CLASS(kmem_free,
 	TP_printk("call_site=%lx ptr=%p", __entry->call_site, __entry->ptr)
 )
 
-DEFINE_EVENT_MAP(kmem_free, kfree,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(kmem_free, kfree,
 
 	kmem_kfree,
 
@@ -149,7 +149,7 @@ DEFINE_EVENT_MAP(kmem_free, kfree,
 	TP_ARGS(call_site, ptr)
 )
 
-DEFINE_EVENT(kmem_free, kmem_cache_free,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kmem_free, kmem_cache_free,
 
 	TP_PROTO(unsigned long call_site, const void *ptr),
 
@@ -158,9 +158,9 @@ DEFINE_EVENT(kmem_free, kmem_cache_free,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,32))
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
-TRACE_EVENT(mm_page_free,
+LTTNG_TRACEPOINT_EVENT(mm_page_free,
 #else
-TRACE_EVENT(mm_page_free_direct,
+LTTNG_TRACEPOINT_EVENT(mm_page_free_direct,
 #endif
 
 	TP_PROTO(struct page *page, unsigned int order),
@@ -184,9 +184,9 @@ TRACE_EVENT(mm_page_free_direct,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
-TRACE_EVENT(mm_page_free_batched,
+LTTNG_TRACEPOINT_EVENT(mm_page_free_batched,
 #else
-TRACE_EVENT(mm_pagevec_free,
+LTTNG_TRACEPOINT_EVENT(mm_pagevec_free,
 #endif
 
 	TP_PROTO(struct page *page, int cold),
@@ -209,7 +209,7 @@ TRACE_EVENT(mm_pagevec_free,
 			__entry->cold)
 )
 
-TRACE_EVENT(mm_page_alloc,
+LTTNG_TRACEPOINT_EVENT(mm_page_alloc,
 
 	TP_PROTO(struct page *page, unsigned int order,
 			gfp_t gfp_flags, int migratetype),
@@ -238,7 +238,7 @@ TRACE_EVENT(mm_page_alloc,
 		show_gfp_flags(__entry->gfp_flags))
 )
 
-DECLARE_EVENT_CLASS(mm_page,
+LTTNG_TRACEPOINT_EVENT_CLASS(mm_page,
 
 	TP_PROTO(struct page *page, unsigned int order, int migratetype),
 
@@ -264,14 +264,14 @@ DECLARE_EVENT_CLASS(mm_page,
 		__entry->order == 0)
 )
 
-DEFINE_EVENT(mm_page, mm_page_alloc_zone_locked,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_page, mm_page_alloc_zone_locked,
 
 	TP_PROTO(struct page *page, unsigned int order, int migratetype),
 
 	TP_ARGS(page, order, migratetype)
 )
 
-DEFINE_EVENT_PRINT(mm_page, mm_page_pcpu_drain,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT(mm_page, mm_page_pcpu_drain,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33))
 	TP_PROTO(struct page *page, unsigned int order, int migratetype),
@@ -288,7 +288,7 @@ DEFINE_EVENT_PRINT(mm_page, mm_page_pcpu_drain,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 
-TRACE_EVENT(mm_page_alloc_extfrag,
+LTTNG_TRACEPOINT_EVENT(mm_page_alloc_extfrag,
 
 	TP_PROTO(struct page *page,
 			int alloc_order, int fallback_order,
@@ -332,7 +332,7 @@ TRACE_EVENT(mm_page_alloc_extfrag,
 
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0)) */
 
-TRACE_EVENT(mm_page_alloc_extfrag,
+LTTNG_TRACEPOINT_EVENT(mm_page_alloc_extfrag,
 
 	TP_PROTO(struct page *page,
 			int alloc_order, int fallback_order,
@@ -374,7 +374,7 @@ TRACE_EVENT(mm_page_alloc_extfrag,
 
 #endif
 
-#endif /* _TRACE_KMEM_H */
+#endif /* LTTNG_TRACE_KMEM_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/kvm.h b/drivers/staging/lttng/instrumentation/events/lttng-module/kvm.h
index 99d1788..c0d42e2 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/kvm.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/kvm.h
@@ -1,7 +1,7 @@
-#if !defined(_TRACE_KVM_MAIN_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_KVM_MAIN_H
+#if !defined(LTTNG_TRACE_KVM_MAIN_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_KVM_MAIN_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/version.h>
 
 #undef TRACE_SYSTEM
@@ -42,7 +42,7 @@
 
 #endif
 
-TRACE_EVENT(kvm_userspace_exit,
+LTTNG_TRACEPOINT_EVENT(kvm_userspace_exit,
 	    TP_PROTO(__u32 reason, int errno),
 	    TP_ARGS(reason, errno),
 
@@ -72,7 +72,7 @@ TRACE_EVENT(kvm_userspace_exit,
 #endif
 
 #if defined(__KVM_HAVE_IRQ_LINE)
-TRACE_EVENT(kvm_set_irq,
+LTTNG_TRACEPOINT_EVENT(kvm_set_irq,
 	TP_PROTO(unsigned int gsi, int level, int irq_source_id),
 	TP_ARGS(gsi, level, irq_source_id),
 
@@ -104,7 +104,7 @@ TRACE_EVENT(kvm_set_irq,
 	{0x6, "SIPI"},			\
 	{0x7, "ExtINT"}
 
-TRACE_EVENT(kvm_ioapic_set_irq,
+LTTNG_TRACEPOINT_EVENT(kvm_ioapic_set_irq,
 	    TP_PROTO(__u64 e, int pin, bool coalesced),
 	    TP_ARGS(e, pin, coalesced),
 
@@ -129,7 +129,7 @@ TRACE_EVENT(kvm_ioapic_set_irq,
 		  __entry->coalesced ? " (coalesced)" : "")
 )
 
-TRACE_EVENT(kvm_msi_set_irq,
+LTTNG_TRACEPOINT_EVENT(kvm_msi_set_irq,
 	    TP_PROTO(__u64 address, __u64 data),
 	    TP_ARGS(address, data),
 
@@ -156,7 +156,7 @@ TRACE_EVENT(kvm_msi_set_irq,
 	{KVM_IRQCHIP_PIC_SLAVE,		"PIC slave"},		\
 	{KVM_IRQCHIP_IOAPIC,		"IOAPIC"}
 
-TRACE_EVENT(kvm_ack_irq,
+LTTNG_TRACEPOINT_EVENT(kvm_ack_irq,
 	TP_PROTO(unsigned int irqchip, unsigned int pin),
 	TP_ARGS(irqchip, pin),
 
@@ -188,7 +188,7 @@ TRACE_EVENT(kvm_ack_irq,
 	{ KVM_TRACE_MMIO_READ, "read" }, \
 	{ KVM_TRACE_MMIO_WRITE, "write" }
 
-TRACE_EVENT(kvm_mmio,
+LTTNG_TRACEPOINT_EVENT(kvm_mmio,
 	TP_PROTO(int type, int len, u64 gpa, u64 val),
 	TP_ARGS(type, len, gpa, val),
 
@@ -217,7 +217,7 @@ TRACE_EVENT(kvm_mmio,
 	{0, "unload"},		\
 	{1, "load"}
 
-TRACE_EVENT(kvm_fpu,
+LTTNG_TRACEPOINT_EVENT(kvm_fpu,
 	TP_PROTO(int load),
 	TP_ARGS(load),
 
@@ -232,7 +232,7 @@ TRACE_EVENT(kvm_fpu,
 	TP_printk("%s", __print_symbolic(__entry->load, kvm_fpu_load_symbol))
 )
 
-TRACE_EVENT(kvm_age_page,
+LTTNG_TRACEPOINT_EVENT(kvm_age_page,
 	TP_PROTO(ulong hva, struct kvm_memory_slot *slot, int ref),
 	TP_ARGS(hva, slot, ref),
 
@@ -258,7 +258,7 @@ TRACE_EVENT(kvm_age_page,
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))
 
 #ifdef CONFIG_KVM_ASYNC_PF
-DECLARE_EVENT_CLASS(kvm_async_get_page_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(kvm_async_get_page_class,
 
 	TP_PROTO(u64 gva, u64 gfn),
 
@@ -277,21 +277,21 @@ DECLARE_EVENT_CLASS(kvm_async_get_page_class,
 	TP_printk("gva = %#llx, gfn = %#llx", __entry->gva, __entry->gfn)
 )
 
-DEFINE_EVENT(kvm_async_get_page_class, kvm_try_async_get_page,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_async_get_page_class, kvm_try_async_get_page,
 
 	TP_PROTO(u64 gva, u64 gfn),
 
 	TP_ARGS(gva, gfn)
 )
 
-DEFINE_EVENT(kvm_async_get_page_class, kvm_async_pf_doublefault,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_async_get_page_class, kvm_async_pf_doublefault,
 
 	TP_PROTO(u64 gva, u64 gfn),
 
 	TP_ARGS(gva, gfn)
 )
 
-DECLARE_EVENT_CLASS(kvm_async_pf_nopresent_ready,
+LTTNG_TRACEPOINT_EVENT_CLASS(kvm_async_pf_nopresent_ready,
 
 	TP_PROTO(u64 token, u64 gva),
 
@@ -311,14 +311,14 @@ DECLARE_EVENT_CLASS(kvm_async_pf_nopresent_ready,
 
 )
 
-DEFINE_EVENT(kvm_async_pf_nopresent_ready, kvm_async_pf_not_present,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_async_pf_nopresent_ready, kvm_async_pf_not_present,
 
 	TP_PROTO(u64 token, u64 gva),
 
 	TP_ARGS(token, gva)
 )
 
-DEFINE_EVENT(kvm_async_pf_nopresent_ready, kvm_async_pf_ready,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(kvm_async_pf_nopresent_ready, kvm_async_pf_ready,
 
 	TP_PROTO(u64 token, u64 gva),
 
@@ -327,7 +327,7 @@ DEFINE_EVENT(kvm_async_pf_nopresent_ready, kvm_async_pf_ready,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	kvm_async_pf_completed,
 	TP_PROTO(unsigned long address, u64 gva),
 	TP_ARGS(address, gva),
@@ -348,7 +348,7 @@ TRACE_EVENT(
 
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0)) */
 
-TRACE_EVENT(
+LTTNG_TRACEPOINT_EVENT(
 	kvm_async_pf_completed,
 	TP_PROTO(unsigned long address, struct page *page, u64 gva),
 	TP_ARGS(address, page, gva),
@@ -375,7 +375,7 @@ TRACE_EVENT(
 
 #endif
 
-#endif /* _TRACE_KVM_MAIN_H */
+#endif /* LTTNG_TRACE_KVM_MAIN_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/lock.h b/drivers/staging/lttng/instrumentation/events/lttng-module/lock.h
index 8c1389d..a77e9a8 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/lock.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/lock.h
@@ -7,19 +7,19 @@
 #define TRACE_SYSTEM lockdep
 #define TRACE_INCLUDE_FILE lock
 #if defined(_TRACE_LOCKDEP_H)
-#define _TRACE_LOCK_H
+#define LTTNG_TRACE_LOCK_H
 #endif
 #endif
 
-#if !defined(_TRACE_LOCK_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_LOCK_H
+#if !defined(LTTNG_TRACE_LOCK_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_LOCK_H
 
 #include <linux/lockdep.h>
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 
 #ifdef CONFIG_LOCKDEP
 
-TRACE_EVENT(lock_acquire,
+LTTNG_TRACEPOINT_EVENT(lock_acquire,
 
 	TP_PROTO(struct lockdep_map *lock, unsigned int subclass,
 		int trylock, int read, int check,
@@ -55,7 +55,7 @@ TRACE_EVENT(lock_acquire,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 
-DECLARE_EVENT_CLASS(lock,
+LTTNG_TRACEPOINT_EVENT_CLASS(lock,
 
 	TP_PROTO(struct lockdep_map *lock, unsigned long ip),
 
@@ -74,7 +74,7 @@ DECLARE_EVENT_CLASS(lock,
 	TP_printk("%p %s",  __entry->lockdep_addr, __get_str(name))
 )
 
-DEFINE_EVENT(lock, lock_release,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(lock, lock_release,
 
 	TP_PROTO(struct lockdep_map *lock, unsigned long ip),
 
@@ -83,14 +83,14 @@ DEFINE_EVENT(lock, lock_release,
 
 #ifdef CONFIG_LOCK_STAT
 
-DEFINE_EVENT(lock, lock_contended,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(lock, lock_contended,
 
 	TP_PROTO(struct lockdep_map *lock, unsigned long ip),
 
 	TP_ARGS(lock, ip)
 )
 
-DEFINE_EVENT(lock, lock_acquired,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(lock, lock_acquired,
 
 	TP_PROTO(struct lockdep_map *lock, unsigned long ip),
 
@@ -101,7 +101,7 @@ DEFINE_EVENT(lock, lock_acquired,
 
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35)) */
 
-TRACE_EVENT(lock_release,
+LTTNG_TRACEPOINT_EVENT(lock_release,
 
 	TP_PROTO(struct lockdep_map *lock, int nested, unsigned long ip),
 
@@ -130,7 +130,7 @@ TRACE_EVENT(lock_release,
 
 #ifdef CONFIG_LOCK_STAT
 
-TRACE_EVENT(lock_contended,
+LTTNG_TRACEPOINT_EVENT(lock_contended,
 
 	TP_PROTO(struct lockdep_map *lock, unsigned long ip),
 
@@ -157,7 +157,7 @@ TRACE_EVENT(lock_contended,
 #endif
 )
 
-TRACE_EVENT(lock_acquired,
+LTTNG_TRACEPOINT_EVENT(lock_acquired,
 
 	TP_PROTO(struct lockdep_map *lock, unsigned long ip, s64 waittime),
 
@@ -201,7 +201,7 @@ TRACE_EVENT(lock_acquired,
 
 #endif
 
-#endif /* _TRACE_LOCK_H */
+#endif /* LTTNG_TRACE_LOCK_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/lttng-statedump.h b/drivers/staging/lttng/instrumentation/events/lttng-module/lttng-statedump.h
index 74233ca..985b71c 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/lttng-statedump.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/lttng-statedump.h
@@ -1,15 +1,15 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM lttng_statedump
 
-#if !defined(_TRACE_LTTNG_STATEDUMP_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_LTTNG_STATEDUMP_H
+#if !defined(LTTNG_TRACE_LTTNG_STATEDUMP_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_LTTNG_STATEDUMP_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/nsproxy.h>
 #include <linux/pid_namespace.h>
 #include <linux/types.h>
 
-TRACE_EVENT(lttng_statedump_start,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_start,
 	TP_PROTO(struct lttng_session *session),
 	TP_ARGS(session),
 	TP_STRUCT__entry(
@@ -19,7 +19,7 @@ TRACE_EVENT(lttng_statedump_start,
 	TP_printk("")
 )
 
-TRACE_EVENT(lttng_statedump_end,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_end,
 	TP_PROTO(struct lttng_session *session),
 	TP_ARGS(session),
 	TP_STRUCT__entry(
@@ -29,7 +29,7 @@ TRACE_EVENT(lttng_statedump_end,
 	TP_printk("")
 )
 
-TRACE_EVENT(lttng_statedump_process_state,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_process_state,
 	TP_PROTO(struct lttng_session *session,
 		struct task_struct *p,
 		int type, int mode, int submode, int status,
@@ -86,7 +86,7 @@ TRACE_EVENT(lttng_statedump_process_state,
 	TP_printk("")
 )
 
-TRACE_EVENT(lttng_statedump_file_descriptor,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_file_descriptor,
 	TP_PROTO(struct lttng_session *session,
 		struct task_struct *p, int fd, const char *filename,
 		unsigned int flags, fmode_t fmode),
@@ -108,7 +108,7 @@ TRACE_EVENT(lttng_statedump_file_descriptor,
 	TP_printk("")
 )
 
-TRACE_EVENT(lttng_statedump_vm_map,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_vm_map,
 	TP_PROTO(struct lttng_session *session,
 		struct task_struct *p, struct vm_area_struct *map,
 		unsigned long inode),
@@ -132,7 +132,7 @@ TRACE_EVENT(lttng_statedump_vm_map,
 	TP_printk("")
 )
 
-TRACE_EVENT(lttng_statedump_network_interface,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_network_interface,
 	TP_PROTO(struct lttng_session *session,
 		struct net_device *dev, struct in_ifaddr *ifa),
 	TP_ARGS(session, dev, ifa),
@@ -147,7 +147,7 @@ TRACE_EVENT(lttng_statedump_network_interface,
 	TP_printk("")
 )
 
-TRACE_EVENT(lttng_statedump_block_device,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_block_device,
 	TP_PROTO(struct lttng_session *session,
 		dev_t dev, const char *diskname),
 	TP_ARGS(session, dev, diskname),
@@ -163,7 +163,7 @@ TRACE_EVENT(lttng_statedump_block_device,
 )
 
 /* Called with desc->lock held */
-TRACE_EVENT(lttng_statedump_interrupt,
+LTTNG_TRACEPOINT_EVENT(lttng_statedump_interrupt,
 	TP_PROTO(struct lttng_session *session,
 		unsigned int irq, const char *chip_name,
 		struct irqaction *action),
@@ -181,7 +181,7 @@ TRACE_EVENT(lttng_statedump_interrupt,
 	TP_printk("")
 )
 
-#endif /*  _TRACE_LTTNG_STATEDUMP_H */
+#endif /*  LTTNG_TRACE_LTTNG_STATEDUMP_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/lttng.h b/drivers/staging/lttng/instrumentation/events/lttng-module/lttng.h
index c2ddf8d..cd766d2 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/lttng.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/lttng.h
@@ -1,12 +1,12 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM lttng
 
-#if !defined(_TRACE_LTTNG_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_LTTNG_H
+#if !defined(LTTNG_TRACE_LTTNG_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_LTTNG_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 
-TRACE_EVENT(lttng_logger,
+LTTNG_TRACEPOINT_EVENT(lttng_logger,
 	TP_PROTO(const char __user *text, size_t len),
 	TP_ARGS(text, len),
 	TP_STRUCT__entry(
@@ -18,7 +18,7 @@ TRACE_EVENT(lttng_logger,
 	TP_printk("")
 )
 
-#endif /* _TRACE_LTTNG_H */
+#endif /* LTTNG_TRACE_LTTNG_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/module.h b/drivers/staging/lttng/instrumentation/events/lttng-module/module.h
index c2d1ad7..83d191f 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/module.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/module.h
@@ -11,10 +11,10 @@
 #define TRACE_SYSTEM module
 #endif
 
-#if !defined(_TRACE_MODULE_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_MODULE_H
+#if !defined(LTTNG_TRACE_MODULE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_MODULE_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/version.h>
 
 #ifdef CONFIG_MODULES
@@ -25,7 +25,7 @@ struct module;
 
 #endif
 
-TRACE_EVENT(module_load,
+LTTNG_TRACEPOINT_EVENT(module_load,
 
 	TP_PROTO(struct module *mod),
 
@@ -44,7 +44,7 @@ TRACE_EVENT(module_load,
 	TP_printk("%s %s", __get_str(name), show_module_flags(__entry->taints))
 )
 
-TRACE_EVENT(module_free,
+LTTNG_TRACEPOINT_EVENT(module_free,
 
 	TP_PROTO(struct module *mod),
 
@@ -64,7 +64,7 @@ TRACE_EVENT(module_free,
 #ifdef CONFIG_MODULE_UNLOAD
 /* trace_module_get/put are only used if CONFIG_MODULE_UNLOAD is defined */
 
-DECLARE_EVENT_CLASS(module_refcnt,
+LTTNG_TRACEPOINT_EVENT_CLASS(module_refcnt,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 	TP_PROTO(struct module *mod, unsigned long ip),
@@ -96,7 +96,7 @@ DECLARE_EVENT_CLASS(module_refcnt,
 		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
 )
 
-DEFINE_EVENT(module_refcnt, module_get,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(module_refcnt, module_get,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 	TP_PROTO(struct module *mod, unsigned long ip),
@@ -109,7 +109,7 @@ DEFINE_EVENT(module_refcnt, module_get,
 #endif
 )
 
-DEFINE_EVENT(module_refcnt, module_put,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(module_refcnt, module_put,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 	TP_PROTO(struct module *mod, unsigned long ip),
@@ -123,7 +123,7 @@ DEFINE_EVENT(module_refcnt, module_put,
 )
 #endif /* CONFIG_MODULE_UNLOAD */
 
-TRACE_EVENT(module_request,
+LTTNG_TRACEPOINT_EVENT(module_request,
 
 	TP_PROTO(char *name, bool wait, unsigned long ip),
 
@@ -147,7 +147,7 @@ TRACE_EVENT(module_request,
 
 #endif /* CONFIG_MODULES */
 
-#endif /* _TRACE_MODULE_H */
+#endif /* LTTNG_TRACE_MODULE_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/napi.h b/drivers/staging/lttng/instrumentation/events/lttng-module/napi.h
index 26b10ba..d6df181 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/napi.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/napi.h
@@ -1,16 +1,16 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM napi
 
-#if !defined(_TRACE_NAPI_H_) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_NAPI_H_
+#if !defined(LTTNG_TRACE_NAPI_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_NAPI_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/netdevice.h>
-#include <linux/tracepoint.h>
 #include <linux/ftrace.h>
 
 #define NO_DEV "(no_device)"
 
-TRACE_EVENT(napi_poll,
+LTTNG_TRACEPOINT_EVENT(napi_poll,
 
 	TP_PROTO(struct napi_struct *napi),
 
@@ -32,7 +32,7 @@ TRACE_EVENT(napi_poll,
 
 #undef NO_DEV
 
-#endif /* _TRACE_NAPI_H_ */
+#endif /* LTTNG_TRACE_NAPI_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/net.h b/drivers/staging/lttng/instrumentation/events/lttng-module/net.h
index e552cf7..a6bcecd 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/net.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/net.h
@@ -1,16 +1,16 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM net
 
-#if !defined(_TRACE_NET_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_NET_H
+#if !defined(LTTNG_TRACE_NET_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_NET_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
 #include <linux/ip.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
-TRACE_EVENT(net_dev_xmit,
+LTTNG_TRACEPOINT_EVENT(net_dev_xmit,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,40))
 	TP_PROTO(struct sk_buff *skb,
@@ -57,7 +57,7 @@ TRACE_EVENT(net_dev_xmit,
 		__get_str(name), __entry->skbaddr, __entry->len, __entry->rc)
 )
 
-DECLARE_EVENT_CLASS(net_dev_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(net_dev_template,
 
 	TP_PROTO(struct sk_buff *skb),
 
@@ -79,27 +79,27 @@ DECLARE_EVENT_CLASS(net_dev_template,
 		__get_str(name), __entry->skbaddr, __entry->len)
 )
 
-DEFINE_EVENT(net_dev_template, net_dev_queue,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(net_dev_template, net_dev_queue,
 
 	TP_PROTO(struct sk_buff *skb),
 
 	TP_ARGS(skb)
 )
 
-DEFINE_EVENT(net_dev_template, netif_receive_skb,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(net_dev_template, netif_receive_skb,
 
 	TP_PROTO(struct sk_buff *skb),
 
 	TP_ARGS(skb)
 )
 
-DEFINE_EVENT(net_dev_template, netif_rx,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(net_dev_template, netif_rx,
 
 	TP_PROTO(struct sk_buff *skb),
 
 	TP_ARGS(skb)
 )
-#endif /* _TRACE_NET_H */
+#endif /* LTTNG_TRACE_NET_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/power.h b/drivers/staging/lttng/instrumentation/events/lttng-module/power.h
index f366a63..02a803c 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/power.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/power.h
@@ -1,15 +1,15 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM power
 
-#if !defined(_TRACE_POWER_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_POWER_H
+#if !defined(LTTNG_TRACE_POWER_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_POWER_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/ktime.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))
-DECLARE_EVENT_CLASS(power_cpu,
+LTTNG_TRACEPOINT_EVENT_CLASS(power_cpu,
 
 	TP_PROTO(unsigned int state, unsigned int cpu_id),
 
@@ -29,7 +29,7 @@ DECLARE_EVENT_CLASS(power_cpu,
 		  (unsigned long)__entry->cpu_id)
 )
 
-DEFINE_EVENT_MAP(power_cpu, cpu_idle,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(power_cpu, cpu_idle,
 
 	power_cpu_idle,
 
@@ -45,7 +45,7 @@ DEFINE_EVENT_MAP(power_cpu, cpu_idle,
 #define PWR_EVENT_EXIT -1
 #endif
 
-DEFINE_EVENT_MAP(power_cpu, cpu_frequency,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(power_cpu, cpu_frequency,
 
 	power_cpu_frequency,
 
@@ -54,7 +54,7 @@ DEFINE_EVENT_MAP(power_cpu, cpu_frequency,
 	TP_ARGS(frequency, cpu_id)
 )
 
-TRACE_EVENT_MAP(machine_suspend,
+LTTNG_TRACEPOINT_EVENT_MAP(machine_suspend,
 
 	power_machine_suspend,
 
@@ -75,7 +75,7 @@ TRACE_EVENT_MAP(machine_suspend,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0))
-DECLARE_EVENT_CLASS(power_wakeup_source,
+LTTNG_TRACEPOINT_EVENT_CLASS(power_wakeup_source,
 
 	TP_PROTO(const char *name, unsigned int state),
 
@@ -95,7 +95,7 @@ DECLARE_EVENT_CLASS(power_wakeup_source,
 		(unsigned long)__entry->state)
 )
 
-DEFINE_EVENT_MAP(power_wakeup_source, wakeup_source_activate,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(power_wakeup_source, wakeup_source_activate,
 
 	power_wakeup_source_activate,
 
@@ -104,7 +104,7 @@ DEFINE_EVENT_MAP(power_wakeup_source, wakeup_source_activate,
 	TP_ARGS(name, state)
 )
 
-DEFINE_EVENT_MAP(power_wakeup_source, wakeup_source_deactivate,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(power_wakeup_source, wakeup_source_deactivate,
 
 	power_wakeup_source_deactivate,
 
@@ -126,7 +126,7 @@ DEFINE_EVENT_MAP(power_wakeup_source, wakeup_source_deactivate,
  * The power events are used for cpuidle & suspend (power_start, power_end)
  *  and for cpufreq (power_frequency)
  */
-DECLARE_EVENT_CLASS(power,
+LTTNG_TRACEPOINT_EVENT_CLASS(power,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36))
 	TP_PROTO(unsigned int type, unsigned int state, unsigned int cpu_id),
@@ -163,7 +163,7 @@ DECLARE_EVENT_CLASS(power,
 #endif
 )
 
-DEFINE_EVENT(power, power_start,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(power, power_start,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36))
 	TP_PROTO(unsigned int type, unsigned int state, unsigned int cpu_id),
@@ -176,7 +176,7 @@ DEFINE_EVENT(power, power_start,
 #endif
 )
 
-DEFINE_EVENT(power, power_frequency,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(power, power_frequency,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36))
 	TP_PROTO(unsigned int type, unsigned int state, unsigned int cpu_id),
@@ -189,7 +189,7 @@ DEFINE_EVENT(power, power_frequency,
 #endif
 )
 
-TRACE_EVENT(power_end,
+LTTNG_TRACEPOINT_EVENT(power_end,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36))
 	TP_PROTO(unsigned int cpu_id),
@@ -263,7 +263,7 @@ static inline void trace_power_frequency(u64 type, u64 state, u64 cpuid) {};
  * The clock events are used for clock enable/disable and for
  *  clock rate change
  */
-DECLARE_EVENT_CLASS(power_clock,
+LTTNG_TRACEPOINT_EVENT_CLASS(power_clock,
 
 	TP_PROTO(const char *name, unsigned int state, unsigned int cpu_id),
 
@@ -285,7 +285,7 @@ DECLARE_EVENT_CLASS(power_clock,
 		(unsigned long)__entry->state, (unsigned long)__entry->cpu_id)
 )
 
-DEFINE_EVENT_MAP(power_clock, clock_enable,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(power_clock, clock_enable,
 
 	power_clock_enable,
 
@@ -294,7 +294,7 @@ DEFINE_EVENT_MAP(power_clock, clock_enable,
 	TP_ARGS(name, state, cpu_id)
 )
 
-DEFINE_EVENT_MAP(power_clock, clock_disable,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(power_clock, clock_disable,
 
 	power_clock_disable,
 
@@ -303,7 +303,7 @@ DEFINE_EVENT_MAP(power_clock, clock_disable,
 	TP_ARGS(name, state, cpu_id)
 )
 
-DEFINE_EVENT_MAP(power_clock, clock_set_rate,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(power_clock, clock_set_rate,
 
 	power_clock_set_rate,
 
@@ -315,7 +315,7 @@ DEFINE_EVENT_MAP(power_clock, clock_set_rate,
 /*
  * The power domain events are used for power domains transitions
  */
-DECLARE_EVENT_CLASS(power_domain,
+LTTNG_TRACEPOINT_EVENT_CLASS(power_domain,
 
 	TP_PROTO(const char *name, unsigned int state, unsigned int cpu_id),
 
@@ -337,7 +337,7 @@ DECLARE_EVENT_CLASS(power_domain,
 		(unsigned long)__entry->state, (unsigned long)__entry->cpu_id)
 )
 
-DEFINE_EVENT(power_domain, power_domain_target,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(power_domain, power_domain_target,
 
 	TP_PROTO(const char *name, unsigned int state, unsigned int cpu_id),
 
@@ -345,7 +345,7 @@ DEFINE_EVENT(power_domain, power_domain_target,
 )
 #endif
 
-#endif /* _TRACE_POWER_H */
+#endif /* LTTNG_TRACE_POWER_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/printk.h b/drivers/staging/lttng/instrumentation/events/lttng-module/printk.h
index 9ac55c7..16949c4 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/printk.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/printk.h
@@ -1,15 +1,15 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM printk
 
-#if !defined(_TRACE_PRINTK_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_PRINTK_H
+#if !defined(LTTNG_TRACE_PRINTK_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_PRINTK_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/version.h>
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0))
 
-TRACE_EVENT(console,
+LTTNG_TRACEPOINT_EVENT(console,
 	TP_PROTO(const char *text, size_t len),
 
 	TP_ARGS(text, len),
@@ -27,7 +27,7 @@ TRACE_EVENT(console,
 
 #elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0))
 
-TRACE_EVENT_CONDITION(console,
+LTTNG_TRACEPOINT_EVENT_CONDITION(console,
 	TP_PROTO(const char *log_buf, unsigned start, unsigned end,
 		 unsigned log_buf_len),
 
@@ -48,7 +48,7 @@ TRACE_EVENT_CONDITION(console,
 
 #else /* (LINUX_VERSION_CODE < KERNEL_VERSION(3,5,0)) */
 
-TRACE_EVENT_CONDITION(console,
+LTTNG_TRACEPOINT_EVENT_CONDITION(console,
 	TP_PROTO(const char *log_buf, unsigned start, unsigned end,
 		 unsigned log_buf_len),
 
@@ -77,7 +77,7 @@ TRACE_EVENT_CONDITION(console,
 
 #endif
 
-#endif /* _TRACE_PRINTK_H */
+#endif /* LTTNG_TRACE_PRINTK_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/random.h b/drivers/staging/lttng/instrumentation/events/lttng-module/random.h
index d7bda0d..910ea91 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/random.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/random.h
@@ -1,13 +1,13 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM random
 
-#if !defined(_TRACE_RANDOM_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_RANDOM_H
+#if !defined(LTTNG_TRACE_RANDOM_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_RANDOM_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/writeback.h>
-#include <linux/tracepoint.h>
 
-DECLARE_EVENT_CLASS(random__mix_pool_bytes,
+LTTNG_TRACEPOINT_EVENT_CLASS(random__mix_pool_bytes,
 	TP_PROTO(const char *pool_name, int bytes, unsigned long IP),
 
 	TP_ARGS(pool_name, bytes, IP),
@@ -28,7 +28,7 @@ DECLARE_EVENT_CLASS(random__mix_pool_bytes,
 		  __get_str(pool_name), __entry->bytes, (void *)__entry->IP)
 )
 
-DEFINE_EVENT_MAP(random__mix_pool_bytes, mix_pool_bytes,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(random__mix_pool_bytes, mix_pool_bytes,
 
 	random_mix_pool_bytes,
 
@@ -37,7 +37,7 @@ DEFINE_EVENT_MAP(random__mix_pool_bytes, mix_pool_bytes,
 	TP_ARGS(pool_name, bytes, IP)
 )
 
-DEFINE_EVENT_MAP(random__mix_pool_bytes, mix_pool_bytes_nolock,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(random__mix_pool_bytes, mix_pool_bytes_nolock,
 
 	random_mix_pool_bytes_nolock,
 
@@ -46,7 +46,7 @@ DEFINE_EVENT_MAP(random__mix_pool_bytes, mix_pool_bytes_nolock,
 	TP_ARGS(pool_name, bytes, IP)
 )
 
-TRACE_EVENT_MAP(credit_entropy_bits,
+LTTNG_TRACEPOINT_EVENT_MAP(credit_entropy_bits,
 
 	random_credit_entropy_bits,
 
@@ -77,7 +77,7 @@ TRACE_EVENT_MAP(credit_entropy_bits,
 		  (void *)__entry->IP)
 )
 
-TRACE_EVENT_MAP(get_random_bytes,
+LTTNG_TRACEPOINT_EVENT_MAP(get_random_bytes,
 
 	random_get_random_bytes,
 
@@ -98,7 +98,7 @@ TRACE_EVENT_MAP(get_random_bytes,
 	TP_printk("nbytes %d caller %pF", __entry->nbytes, (void *)__entry->IP)
 )
 
-DECLARE_EVENT_CLASS(random__extract_entropy,
+LTTNG_TRACEPOINT_EVENT_CLASS(random__extract_entropy,
 	TP_PROTO(const char *pool_name, int nbytes, int entropy_count,
 		 unsigned long IP),
 
@@ -124,7 +124,7 @@ DECLARE_EVENT_CLASS(random__extract_entropy,
 )
 
 
-DEFINE_EVENT_MAP(random__extract_entropy, extract_entropy,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(random__extract_entropy, extract_entropy,
 
 	random_extract_entropy,
 
@@ -134,7 +134,7 @@ DEFINE_EVENT_MAP(random__extract_entropy, extract_entropy,
 	TP_ARGS(pool_name, nbytes, entropy_count, IP)
 )
 
-DEFINE_EVENT_MAP(random__extract_entropy, extract_entropy_user,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(random__extract_entropy, extract_entropy_user,
 
 	random_extract_entropy_user,
 
@@ -146,7 +146,7 @@ DEFINE_EVENT_MAP(random__extract_entropy, extract_entropy_user,
 
 
 
-#endif /* _TRACE_RANDOM_H */
+#endif /* LTTNG_TRACE_RANDOM_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/rcu.h b/drivers/staging/lttng/instrumentation/events/lttng-module/rcu.h
index 377d5cd..42b2004 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/rcu.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/rcu.h
@@ -1,10 +1,10 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM rcu
 
-#if !defined(_TRACE_RCU_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_RCU_H
+#if !defined(LTTNG_TRACE_RCU_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_RCU_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/version.h>
 
 /*
@@ -18,7 +18,7 @@
  * An "@" character within "<activity>" is a comment character: Data
  * reduction scripts will ignore the "@" and the remainder of the line.
  */
-TRACE_EVENT(rcu_utilization,
+LTTNG_TRACEPOINT_EVENT(rcu_utilization,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *s),
@@ -52,7 +52,7 @@ TRACE_EVENT(rcu_utilization,
  * and "cpuofl", respectively), and a CPU being kicked for being too
  * long in dyntick-idle mode ("kick").
  */
-TRACE_EVENT(rcu_grace_period,
+LTTNG_TRACEPOINT_EVENT(rcu_grace_period,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, unsigned long gpnum, const char *gpevent),
@@ -85,7 +85,7 @@ TRACE_EVENT(rcu_grace_period,
  * rcu_node structure, and the mask of CPUs that will be waited for.
  * All but the type of RCU are extracted from the rcu_node structure.
  */
-TRACE_EVENT(rcu_grace_period_init,
+LTTNG_TRACEPOINT_EVENT(rcu_grace_period_init,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, unsigned long gpnum, u8 level,
@@ -126,7 +126,7 @@ TRACE_EVENT(rcu_grace_period_init,
  * include SRCU), the grace-period number that the task is blocking
  * (the current or the next), and the task's PID.
  */
-TRACE_EVENT(rcu_preempt_task,
+LTTNG_TRACEPOINT_EVENT(rcu_preempt_task,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, int pid, unsigned long gpnum),
@@ -157,7 +157,7 @@ TRACE_EVENT(rcu_preempt_task,
  * read-side critical section exiting that critical section.  Track the
  * type of RCU (which one day might include SRCU) and the task's PID.
  */
-TRACE_EVENT(rcu_unlock_preempted_task,
+LTTNG_TRACEPOINT_EVENT(rcu_unlock_preempted_task,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, unsigned long gpnum, int pid),
@@ -190,7 +190,7 @@ TRACE_EVENT(rcu_unlock_preempted_task,
  * whether there are any blocked tasks blocking the current grace period.
  * All but the type of RCU are extracted from the rcu_node structure.
  */
-TRACE_EVENT(rcu_quiescent_state_report,
+LTTNG_TRACEPOINT_EVENT(rcu_quiescent_state_report,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, unsigned long gpnum,
@@ -240,7 +240,7 @@ TRACE_EVENT(rcu_quiescent_state_report,
  * or "kick" when kicking a CPU that has been in dyntick-idle mode for
  * too long.
  */
-TRACE_EVENT(rcu_fqs,
+LTTNG_TRACEPOINT_EVENT(rcu_fqs,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, unsigned long gpnum, int cpu, const char *qsevent),
@@ -284,7 +284,7 @@ TRACE_EVENT(rcu_fqs,
  * events use the upper bits of each number, while interrupt-related
  * events use the lower bits.
  */
-TRACE_EVENT(rcu_dyntick,
+LTTNG_TRACEPOINT_EVENT(rcu_dyntick,
 
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
@@ -348,7 +348,7 @@ TRACE_EVENT(rcu_dyntick,
  *	"Demigrate": Timer fired on wrong CPU, woke up correct CPU.
  *	"Cleanup after idle": Idle exited, timer canceled.
  */
-TRACE_EVENT(rcu_prep_idle,
+LTTNG_TRACEPOINT_EVENT(rcu_prep_idle,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *reason),
@@ -377,7 +377,7 @@ TRACE_EVENT(rcu_prep_idle,
  * number of lazy callbacks queued, and the fourth element is the
  * total number of callbacks queued.
  */
-TRACE_EVENT(rcu_callback,
+LTTNG_TRACEPOINT_EVENT(rcu_callback,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, struct rcu_head *rhp, long qlen_lazy,
@@ -434,7 +434,7 @@ TRACE_EVENT(rcu_callback,
  * the fourth argument is the number of lazy callbacks queued, and the
  * fifth argument is the total number of callbacks queued.
  */
-TRACE_EVENT(rcu_kfree_callback,
+LTTNG_TRACEPOINT_EVENT(rcu_kfree_callback,
 
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
@@ -492,7 +492,7 @@ TRACE_EVENT(rcu_kfree_callback,
  * the total number of callbacks queued, and the fourth argument is
  * the current RCU-callback batch limit.
  */
-TRACE_EVENT(rcu_batch_start,
+LTTNG_TRACEPOINT_EVENT(rcu_batch_start,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, long qlen_lazy, long qlen, long blimit),
@@ -553,7 +553,7 @@ TRACE_EVENT(rcu_batch_start,
  * The first argument is the type of RCU, and the second argument is
  * a pointer to the RCU callback itself.
  */
-TRACE_EVENT(rcu_invoke_callback,
+LTTNG_TRACEPOINT_EVENT(rcu_invoke_callback,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, struct rcu_head *rhp),
@@ -586,7 +586,7 @@ TRACE_EVENT(rcu_invoke_callback,
  * is the offset of the callback within the enclosing RCU-protected
  * data structure.
  */
-TRACE_EVENT(rcu_invoke_kfree_callback,
+LTTNG_TRACEPOINT_EVENT(rcu_invoke_kfree_callback,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, struct rcu_head *rhp, unsigned long offset),
@@ -623,7 +623,7 @@ TRACE_EVENT(rcu_invoke_kfree_callback,
  * and the sixth argument (risk) is the return value from
  * rcu_is_callbacks_kthread().
  */
-TRACE_EVENT(rcu_batch_end,
+LTTNG_TRACEPOINT_EVENT(rcu_batch_end,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0))
 	TP_PROTO(const char *rcuname, int callbacks_invoked,
@@ -692,7 +692,7 @@ TRACE_EVENT(rcu_batch_end,
  * of the RCU flavor from rcutorture's viewpoint and the second argument
  * is the callback address.
  */
-TRACE_EVENT(rcu_torture_read,
+LTTNG_TRACEPOINT_EVENT(rcu_torture_read,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcutorturename, struct rcu_head *rhp,
@@ -759,7 +759,7 @@ TRACE_EVENT(rcu_torture_read,
  * The "cpu" argument is the CPU or -1 if meaningless, the "cnt" argument
  * is the count of remaining callbacks, and "done" is the piggybacking count.
  */
-TRACE_EVENT(rcu_barrier,
+LTTNG_TRACEPOINT_EVENT(rcu_barrier,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0))
 	TP_PROTO(const char *rcuname, const char *s, int cpu, int cnt, unsigned long done),
@@ -840,7 +840,7 @@ TRACE_EVENT(rcu_barrier,
 #endif
 #endif /* #else #ifdef CONFIG_RCU_TRACE */
 
-#endif /* _TRACE_RCU_H */
+#endif /* LTTNG_TRACE_RCU_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h b/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h
index df56ac0..87df6a6 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h
@@ -1,11 +1,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM regmap
 
-#if !defined(_TRACE_REGMAP_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_REGMAP_H
+#if !defined(LTTNG_TRACE_REGMAP_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_REGMAP_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/ktime.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
 #ifndef _TRACE_REGMAP_DEF_
@@ -17,7 +17,7 @@ struct regmap;
 /*
  * Log register events
  */
-DECLARE_EVENT_CLASS(regmap_reg,
+LTTNG_TRACEPOINT_EVENT_CLASS(regmap_reg,
 
 	TP_PROTO(struct device *dev, unsigned int reg,
 		 unsigned int val),
@@ -41,7 +41,7 @@ DECLARE_EVENT_CLASS(regmap_reg,
 		  (unsigned int)__entry->val)
 )
 
-DEFINE_EVENT(regmap_reg, regmap_reg_write,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_write,
 
 	TP_PROTO(struct device *dev, unsigned int reg,
 		 unsigned int val),
@@ -50,7 +50,7 @@ DEFINE_EVENT(regmap_reg, regmap_reg_write,
 
 )
 
-DEFINE_EVENT(regmap_reg, regmap_reg_read,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_read,
 
 	TP_PROTO(struct device *dev, unsigned int reg,
 		 unsigned int val),
@@ -60,7 +60,7 @@ DEFINE_EVENT(regmap_reg, regmap_reg_read,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
-DEFINE_EVENT(regmap_reg, regmap_reg_read_cache,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_read_cache,
 
 	TP_PROTO(struct device *dev, unsigned int reg,
 		 unsigned int val),
@@ -70,7 +70,7 @@ DEFINE_EVENT(regmap_reg, regmap_reg_read_cache,
 )
 #endif
 
-DECLARE_EVENT_CLASS(regmap_block,
+LTTNG_TRACEPOINT_EVENT_CLASS(regmap_block,
 
 	TP_PROTO(struct device *dev, unsigned int reg, int count),
 
@@ -93,35 +93,35 @@ DECLARE_EVENT_CLASS(regmap_block,
 		  (int)__entry->count)
 )
 
-DEFINE_EVENT(regmap_block, regmap_hw_read_start,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_read_start,
 
 	TP_PROTO(struct device *dev, unsigned int reg, int count),
 
 	TP_ARGS(dev, reg, count)
 )
 
-DEFINE_EVENT(regmap_block, regmap_hw_read_done,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_read_done,
 
 	TP_PROTO(struct device *dev, unsigned int reg, int count),
 
 	TP_ARGS(dev, reg, count)
 )
 
-DEFINE_EVENT(regmap_block, regmap_hw_write_start,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_write_start,
 
 	TP_PROTO(struct device *dev, unsigned int reg, int count),
 
 	TP_ARGS(dev, reg, count)
 )
 
-DEFINE_EVENT(regmap_block, regmap_hw_write_done,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_write_done,
 
 	TP_PROTO(struct device *dev, unsigned int reg, int count),
 
 	TP_ARGS(dev, reg, count)
 )
 
-TRACE_EVENT(regcache_sync,
+LTTNG_TRACEPOINT_EVENT(regcache_sync,
 
 	TP_PROTO(struct device *dev, const char *type,
 		 const char *status),
@@ -145,7 +145,7 @@ TRACE_EVENT(regcache_sync,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
-DECLARE_EVENT_CLASS(regmap_bool,
+LTTNG_TRACEPOINT_EVENT_CLASS(regmap_bool,
 
 	TP_PROTO(struct device *dev, bool flag),
 
@@ -165,7 +165,7 @@ DECLARE_EVENT_CLASS(regmap_bool,
 		  (int)__entry->flag)
 )
 
-DEFINE_EVENT(regmap_bool, regmap_cache_only,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_bool, regmap_cache_only,
 
 	TP_PROTO(struct device *dev, bool flag),
 
@@ -173,7 +173,7 @@ DEFINE_EVENT(regmap_bool, regmap_cache_only,
 
 )
 
-DEFINE_EVENT(regmap_bool, regmap_cache_bypass,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_bool, regmap_cache_bypass,
 
 	TP_PROTO(struct device *dev, bool flag),
 
@@ -182,7 +182,7 @@ DEFINE_EVENT(regmap_bool, regmap_cache_bypass,
 )
 #endif
 
-#endif /* _TRACE_REGMAP_H */
+#endif /* LTTNG_TRACE_REGMAP_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/regulator.h b/drivers/staging/lttng/instrumentation/events/lttng-module/regulator.h
index bb84c47..a84c24c 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/regulator.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/regulator.h
@@ -1,17 +1,17 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM regulator
 
-#if !defined(_TRACE_REGULATOR_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_REGULATOR_H
+#if !defined(LTTNG_TRACE_REGULATOR_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_REGULATOR_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/ktime.h>
-#include <linux/tracepoint.h>
 
 /*
  * Events which just log themselves and the regulator name for enable/disable
  * type tracking.
  */
-DECLARE_EVENT_CLASS(regulator_basic,
+LTTNG_TRACEPOINT_EVENT_CLASS(regulator_basic,
 
 	TP_PROTO(const char *name),
 
@@ -29,7 +29,7 @@ DECLARE_EVENT_CLASS(regulator_basic,
 
 )
 
-DEFINE_EVENT(regulator_basic, regulator_enable,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regulator_basic, regulator_enable,
 
 	TP_PROTO(const char *name),
 
@@ -37,7 +37,7 @@ DEFINE_EVENT(regulator_basic, regulator_enable,
 
 )
 
-DEFINE_EVENT(regulator_basic, regulator_enable_delay,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regulator_basic, regulator_enable_delay,
 
 	TP_PROTO(const char *name),
 
@@ -45,7 +45,7 @@ DEFINE_EVENT(regulator_basic, regulator_enable_delay,
 
 )
 
-DEFINE_EVENT(regulator_basic, regulator_enable_complete,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regulator_basic, regulator_enable_complete,
 
 	TP_PROTO(const char *name),
 
@@ -53,7 +53,7 @@ DEFINE_EVENT(regulator_basic, regulator_enable_complete,
 
 )
 
-DEFINE_EVENT(regulator_basic, regulator_disable,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regulator_basic, regulator_disable,
 
 	TP_PROTO(const char *name),
 
@@ -61,7 +61,7 @@ DEFINE_EVENT(regulator_basic, regulator_disable,
 
 )
 
-DEFINE_EVENT(regulator_basic, regulator_disable_complete,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regulator_basic, regulator_disable_complete,
 
 	TP_PROTO(const char *name),
 
@@ -73,7 +73,7 @@ DEFINE_EVENT(regulator_basic, regulator_disable_complete,
  * Events that take a range of numerical values, mostly for voltages
  * and so on.
  */
-DECLARE_EVENT_CLASS(regulator_range,
+LTTNG_TRACEPOINT_EVENT_CLASS(regulator_range,
 
 	TP_PROTO(const char *name, int min, int max),
 
@@ -95,7 +95,7 @@ DECLARE_EVENT_CLASS(regulator_range,
 		  (int)__entry->min, (int)__entry->max)
 )
 
-DEFINE_EVENT(regulator_range, regulator_set_voltage,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regulator_range, regulator_set_voltage,
 
 	TP_PROTO(const char *name, int min, int max),
 
@@ -107,7 +107,7 @@ DEFINE_EVENT(regulator_range, regulator_set_voltage,
 /*
  * Events that take a single value, mostly for readback and refcounts.
  */
-DECLARE_EVENT_CLASS(regulator_value,
+LTTNG_TRACEPOINT_EVENT_CLASS(regulator_value,
 
 	TP_PROTO(const char *name, unsigned int val),
 
@@ -127,7 +127,7 @@ DECLARE_EVENT_CLASS(regulator_value,
 		  (int)__entry->val)
 )
 
-DEFINE_EVENT(regulator_value, regulator_set_voltage_complete,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regulator_value, regulator_set_voltage_complete,
 
 	TP_PROTO(const char *name, unsigned int value),
 
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/rpm.h b/drivers/staging/lttng/instrumentation/events/lttng-module/rpm.h
index 16bcad0..2baebc8 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/rpm.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/rpm.h
@@ -2,11 +2,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM rpm
 
-#if !defined(_TRACE_RUNTIME_POWER_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_RUNTIME_POWER_H
+#if !defined(LTTNG_TRACE_RUNTIME_POWER_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_RUNTIME_POWER_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/ktime.h>
-#include <linux/tracepoint.h>
 
 #ifndef _TRACE_RPM_DEF_
 #define _TRACE_RPM_DEF_
@@ -17,7 +17,7 @@ struct device;
  * The rpm_internal events are used for tracing some important
  * runtime pm internal functions.
  */
-DECLARE_EVENT_CLASS(rpm_internal,
+LTTNG_TRACEPOINT_EVENT_CLASS(rpm_internal,
 
 	TP_PROTO(struct device *dev, int flags),
 
@@ -56,26 +56,26 @@ DECLARE_EVENT_CLASS(rpm_internal,
 			__entry->child_count
 		 )
 )
-DEFINE_EVENT(rpm_internal, rpm_suspend,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpm_internal, rpm_suspend,
 
 	TP_PROTO(struct device *dev, int flags),
 
 	TP_ARGS(dev, flags)
 )
-DEFINE_EVENT(rpm_internal, rpm_resume,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpm_internal, rpm_resume,
 
 	TP_PROTO(struct device *dev, int flags),
 
 	TP_ARGS(dev, flags)
 )
-DEFINE_EVENT(rpm_internal, rpm_idle,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpm_internal, rpm_idle,
 
 	TP_PROTO(struct device *dev, int flags),
 
 	TP_ARGS(dev, flags)
 )
 
-TRACE_EVENT(rpm_return_int,
+LTTNG_TRACEPOINT_EVENT(rpm_return_int,
 	TP_PROTO(struct device *dev, unsigned long ip, int ret),
 	TP_ARGS(dev, ip, ret),
 
@@ -95,7 +95,7 @@ TRACE_EVENT(rpm_return_int,
 		__entry->ret)
 )
 
-#endif /* _TRACE_RUNTIME_POWER_H */
+#endif /* LTTNG_TRACE_RUNTIME_POWER_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/sched.h b/drivers/staging/lttng/instrumentation/events/lttng-module/sched.h
index 9e490cf..6b3b033 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/sched.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/sched.h
@@ -1,11 +1,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM sched
 
-#if !defined(_TRACE_SCHED_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_SCHED_H
+#if !defined(LTTNG_TRACE_SCHED_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_SCHED_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/sched.h>
-#include <linux/tracepoint.h>
 #include <linux/binfmts.h>
 #include <linux/version.h>
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
@@ -73,7 +73,7 @@ static inline long __trace_sched_switch_state(struct task_struct *p)
 /*
  * Tracepoint for calling kthread_stop, performed to end a kthread:
  */
-TRACE_EVENT(sched_kthread_stop,
+LTTNG_TRACEPOINT_EVENT(sched_kthread_stop,
 
 	TP_PROTO(struct task_struct *t),
 
@@ -95,7 +95,7 @@ TRACE_EVENT(sched_kthread_stop,
 /*
  * Tracepoint for the return value of the kthread stopping:
  */
-TRACE_EVENT(sched_kthread_stop_ret,
+LTTNG_TRACEPOINT_EVENT(sched_kthread_stop_ret,
 
 	TP_PROTO(int ret),
 
@@ -115,7 +115,7 @@ TRACE_EVENT(sched_kthread_stop_ret,
 /*
  * Tracepoint for waking up a task:
  */
-DECLARE_EVENT_CLASS(sched_wakeup_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(sched_wakeup_template,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 	TP_PROTO(struct task_struct *p, int success),
@@ -165,27 +165,27 @@ DECLARE_EVENT_CLASS(sched_wakeup_template,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 
-DEFINE_EVENT(sched_wakeup_template, sched_wakeup,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_wakeup_template, sched_wakeup,
 	     TP_PROTO(struct task_struct *p, int success),
 	     TP_ARGS(p, success))
 
 /*
  * Tracepoint for waking up a new task:
  */
-DEFINE_EVENT(sched_wakeup_template, sched_wakeup_new,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_wakeup_template, sched_wakeup_new,
 	     TP_PROTO(struct task_struct *p, int success),
 	     TP_ARGS(p, success))
 
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35)) */
 
-DEFINE_EVENT(sched_wakeup_template, sched_wakeup,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_wakeup_template, sched_wakeup,
 	     TP_PROTO(struct rq *rq, struct task_struct *p, int success),
 	     TP_ARGS(rq, p, success))
 
 /*
  * Tracepoint for waking up a new task:
  */
-DEFINE_EVENT(sched_wakeup_template, sched_wakeup_new,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_wakeup_template, sched_wakeup_new,
 	     TP_PROTO(struct rq *rq, struct task_struct *p, int success),
 	     TP_ARGS(rq, p, success))
 
@@ -194,7 +194,7 @@ DEFINE_EVENT(sched_wakeup_template, sched_wakeup_new,
 /*
  * Tracepoint for task switches, performed by the scheduler:
  */
-TRACE_EVENT(sched_switch,
+LTTNG_TRACEPOINT_EVENT(sched_switch,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
 	TP_PROTO(struct task_struct *prev,
@@ -257,7 +257,7 @@ TRACE_EVENT(sched_switch,
 /*
  * Tracepoint for a task being migrated:
  */
-TRACE_EVENT(sched_migrate_task,
+LTTNG_TRACEPOINT_EVENT(sched_migrate_task,
 
 	TP_PROTO(struct task_struct *p, int dest_cpu),
 
@@ -284,7 +284,7 @@ TRACE_EVENT(sched_migrate_task,
 		  __entry->orig_cpu, __entry->dest_cpu)
 )
 
-DECLARE_EVENT_CLASS(sched_process_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(sched_process_template,
 
 	TP_PROTO(struct task_struct *p),
 
@@ -309,7 +309,7 @@ DECLARE_EVENT_CLASS(sched_process_template,
 /*
  * Tracepoint for freeing a task:
  */
-DEFINE_EVENT(sched_process_template, sched_process_free,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_process_template, sched_process_free,
 	     TP_PROTO(struct task_struct *p),
 	     TP_ARGS(p))
 	     
@@ -317,7 +317,7 @@ DEFINE_EVENT(sched_process_template, sched_process_free,
 /*
  * Tracepoint for a task exiting:
  */
-DEFINE_EVENT(sched_process_template, sched_process_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_process_template, sched_process_exit,
 	     TP_PROTO(struct task_struct *p),
 	     TP_ARGS(p))
 
@@ -325,11 +325,11 @@ DEFINE_EVENT(sched_process_template, sched_process_exit,
  * Tracepoint for waiting on task to unschedule:
  */
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35))
-DEFINE_EVENT(sched_process_template, sched_wait_task,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_process_template, sched_wait_task,
 	TP_PROTO(struct task_struct *p),
 	TP_ARGS(p))
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35)) */
-DEFINE_EVENT(sched_process_template, sched_wait_task,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_process_template, sched_wait_task,
 	TP_PROTO(struct rq *rq, struct task_struct *p),
 	TP_ARGS(rq, p))
 #endif /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35)) */
@@ -337,7 +337,7 @@ DEFINE_EVENT(sched_process_template, sched_wait_task,
 /*
  * Tracepoint for a waiting task:
  */
-TRACE_EVENT(sched_process_wait,
+LTTNG_TRACEPOINT_EVENT(sched_process_wait,
 
 	TP_PROTO(struct pid *pid),
 
@@ -367,7 +367,7 @@ TRACE_EVENT(sched_process_wait,
  * == child_pid, while creation of a thread yields to child_tid !=
  * child_pid.
  */
-TRACE_EVENT(sched_process_fork,
+LTTNG_TRACEPOINT_EVENT(sched_process_fork,
 
 	TP_PROTO(struct task_struct *parent, struct task_struct *child),
 
@@ -400,7 +400,7 @@ TRACE_EVENT(sched_process_fork,
 /*
  * Tracepoint for sending a signal:
  */
-TRACE_EVENT(sched_signal_send,
+LTTNG_TRACEPOINT_EVENT(sched_signal_send,
 
 	TP_PROTO(int sig, struct task_struct *p),
 
@@ -427,7 +427,7 @@ TRACE_EVENT(sched_signal_send,
 /*
  * Tracepoint for exec:
  */
-TRACE_EVENT(sched_process_exec,
+LTTNG_TRACEPOINT_EVENT(sched_process_exec,
 
 	TP_PROTO(struct task_struct *p, pid_t old_pid,
 		 struct linux_binprm *bprm),
@@ -456,7 +456,7 @@ TRACE_EVENT(sched_process_exec,
  * XXX the below sched_stat tracepoints only apply to SCHED_OTHER/BATCH/IDLE
  *     adding sched_stat support to SCHED_FIFO/RR would be welcome.
  */
-DECLARE_EVENT_CLASS(sched_stat_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(sched_stat_template,
 
 	TP_PROTO(struct task_struct *tsk, u64 delay),
 
@@ -487,7 +487,7 @@ DECLARE_EVENT_CLASS(sched_stat_template,
  * Tracepoint for accounting wait time (time the task is runnable
  * but not actually running due to scheduler contention).
  */
-DEFINE_EVENT(sched_stat_template, sched_stat_wait,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_stat_template, sched_stat_wait,
 	     TP_PROTO(struct task_struct *tsk, u64 delay),
 	     TP_ARGS(tsk, delay))
 
@@ -495,7 +495,7 @@ DEFINE_EVENT(sched_stat_template, sched_stat_wait,
  * Tracepoint for accounting sleep time (time the task is not runnable,
  * including iowait, see below).
  */
-DEFINE_EVENT(sched_stat_template, sched_stat_sleep,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_stat_template, sched_stat_sleep,
 	     TP_PROTO(struct task_struct *tsk, u64 delay),
 	     TP_ARGS(tsk, delay))
 
@@ -503,7 +503,7 @@ DEFINE_EVENT(sched_stat_template, sched_stat_sleep,
  * Tracepoint for accounting iowait time (time the task is not runnable
  * due to waiting on IO to complete).
  */
-DEFINE_EVENT(sched_stat_template, sched_stat_iowait,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_stat_template, sched_stat_iowait,
 	     TP_PROTO(struct task_struct *tsk, u64 delay),
 	     TP_ARGS(tsk, delay))
 
@@ -511,7 +511,7 @@ DEFINE_EVENT(sched_stat_template, sched_stat_iowait,
 /*
  * Tracepoint for accounting blocked time (time the task is in uninterruptible).
  */
-DEFINE_EVENT(sched_stat_template, sched_stat_blocked,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(sched_stat_template, sched_stat_blocked,
 	     TP_PROTO(struct task_struct *tsk, u64 delay),
 	     TP_ARGS(tsk, delay))
 #endif
@@ -520,7 +520,7 @@ DEFINE_EVENT(sched_stat_template, sched_stat_blocked,
  * Tracepoint for accounting runtime (time the task is executing
  * on a CPU).
  */
-TRACE_EVENT(sched_stat_runtime,
+LTTNG_TRACEPOINT_EVENT(sched_stat_runtime,
 
 	TP_PROTO(struct task_struct *tsk, u64 runtime, u64 vruntime),
 
@@ -558,7 +558,7 @@ TRACE_EVENT(sched_stat_runtime,
  * Tracepoint for showing priority inheritance modifying a tasks
  * priority.
  */
-TRACE_EVENT(sched_pi_setprio,
+LTTNG_TRACEPOINT_EVENT(sched_pi_setprio,
 
 	TP_PROTO(struct task_struct *tsk, int newprio),
 
@@ -584,7 +584,7 @@ TRACE_EVENT(sched_pi_setprio,
 )
 #endif
 
-#endif /* _TRACE_SCHED_H */
+#endif /* LTTNG_TRACE_SCHED_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/scsi.h b/drivers/staging/lttng/instrumentation/events/lttng-module/scsi.h
index 15f0c70..ead6be3 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/scsi.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/scsi.h
@@ -1,12 +1,12 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM scsi
 
-#if !defined(_TRACE_SCSI_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_SCSI_H
+#if !defined(LTTNG_TRACE_SCSI_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_SCSI_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <scsi/scsi_cmnd.h>
 #include <scsi/scsi_host.h>
-#include <linux/tracepoint.h>
 #include <linux/trace_seq.h>
 #include <linux/version.h>
 
@@ -205,7 +205,7 @@ const char *scsi_trace_parse_cdb(struct trace_seq*, unsigned char*, int);
 #define __parse_cdb(cdb, len) scsi_trace_parse_cdb(p, cdb, len)
 #endif
 
-TRACE_EVENT(scsi_dispatch_cmd_start,
+LTTNG_TRACEPOINT_EVENT(scsi_dispatch_cmd_start,
 
 	TP_PROTO(struct scsi_cmnd *cmd),
 
@@ -258,7 +258,7 @@ TRACE_EVENT(scsi_dispatch_cmd_start,
 		  __print_hex(__get_dynamic_array(cmnd), __entry->cmd_len))
 )
 
-TRACE_EVENT(scsi_dispatch_cmd_error,
+LTTNG_TRACEPOINT_EVENT(scsi_dispatch_cmd_error,
 
 	TP_PROTO(struct scsi_cmnd *cmd, int rtn),
 
@@ -314,7 +314,7 @@ TRACE_EVENT(scsi_dispatch_cmd_error,
 		  __entry->rtn)
 )
 
-DECLARE_EVENT_CLASS(scsi_cmd_done_timeout_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(scsi_cmd_done_timeout_template,
 
 	TP_PROTO(struct scsi_cmnd *cmd),
 
@@ -375,15 +375,15 @@ DECLARE_EVENT_CLASS(scsi_cmd_done_timeout_template,
 		  show_statusbyte_name(__entry->result & 0xff))
 )
 
-DEFINE_EVENT(scsi_cmd_done_timeout_template, scsi_dispatch_cmd_done,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(scsi_cmd_done_timeout_template, scsi_dispatch_cmd_done,
 	     TP_PROTO(struct scsi_cmnd *cmd),
 	     TP_ARGS(cmd))
 
-DEFINE_EVENT(scsi_cmd_done_timeout_template, scsi_dispatch_cmd_timeout,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(scsi_cmd_done_timeout_template, scsi_dispatch_cmd_timeout,
 	     TP_PROTO(struct scsi_cmnd *cmd),
 	     TP_ARGS(cmd))
 
-TRACE_EVENT(scsi_eh_wakeup,
+LTTNG_TRACEPOINT_EVENT(scsi_eh_wakeup,
 
 	TP_PROTO(struct Scsi_Host *shost),
 
@@ -400,7 +400,7 @@ TRACE_EVENT(scsi_eh_wakeup,
 	TP_printk("host_no=%u", __entry->host_no)
 )
 
-#endif /*  _TRACE_SCSI_H */
+#endif /*  LTTNG_TRACE_SCSI_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/signal.h b/drivers/staging/lttng/instrumentation/events/lttng-module/signal.h
index a1c904b..d6aabd9 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/signal.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/signal.h
@@ -1,10 +1,10 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM signal
 
-#if !defined(_TRACE_SIGNAL_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_SIGNAL_H
+#if !defined(LTTNG_TRACE_SIGNAL_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_SIGNAL_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/version.h>
 
 #ifndef _TRACE_SIGNAL_DEF
@@ -36,7 +36,7 @@
  * means that si_code is SI_KERNEL.
  */
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,4,0))
-TRACE_EVENT(signal_generate,
+LTTNG_TRACEPOINT_EVENT(signal_generate,
 
 	TP_PROTO(int sig, struct siginfo *info, struct task_struct *task),
 
@@ -62,7 +62,7 @@ TRACE_EVENT(signal_generate,
 		  __entry->comm, __entry->pid)
 )
 #else
-TRACE_EVENT(signal_generate,
+LTTNG_TRACEPOINT_EVENT(signal_generate,
 
 	TP_PROTO(int sig, struct siginfo *info, struct task_struct *task,
 			int group, int result),
@@ -109,7 +109,7 @@ TRACE_EVENT(signal_generate,
  * This means, this can show which signals are actually delivered, but
  * matching generated signals and delivered signals may not be correct.
  */
-TRACE_EVENT(signal_deliver,
+LTTNG_TRACEPOINT_EVENT(signal_deliver,
 
 	TP_PROTO(int sig, struct siginfo *info, struct k_sigaction *ka),
 
@@ -136,7 +136,7 @@ TRACE_EVENT(signal_deliver,
 )
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,4,0))
-DECLARE_EVENT_CLASS(signal_queue_overflow,
+LTTNG_TRACEPOINT_EVENT_CLASS(signal_queue_overflow,
 
 	TP_PROTO(int sig, int group, struct siginfo *info),
 
@@ -170,7 +170,7 @@ DECLARE_EVENT_CLASS(signal_queue_overflow,
  * 'group' is not 0 if the signal will be sent to a process group.
  * 'sig' is always one of RT signals.
  */
-DEFINE_EVENT(signal_queue_overflow, signal_overflow_fail,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(signal_queue_overflow, signal_overflow_fail,
 
 	TP_PROTO(int sig, int group, struct siginfo *info),
 
@@ -188,7 +188,7 @@ DEFINE_EVENT(signal_queue_overflow, signal_overflow_fail,
  * 'group' is not 0 if the signal will be sent to a process group.
  * 'sig' is always one of non-RT signals.
  */
-DEFINE_EVENT(signal_queue_overflow, signal_lose_info,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(signal_queue_overflow, signal_lose_info,
 
 	TP_PROTO(int sig, int group, struct siginfo *info),
 
@@ -196,7 +196,7 @@ DEFINE_EVENT(signal_queue_overflow, signal_lose_info,
 )
 #endif
 
-#endif /* _TRACE_SIGNAL_H */
+#endif /* LTTNG_TRACE_SIGNAL_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/skb.h b/drivers/staging/lttng/instrumentation/events/lttng-module/skb.h
index a257304..106478b 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/skb.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/skb.h
@@ -1,18 +1,18 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM skb
 
-#if !defined(_TRACE_SKB_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_SKB_H
+#if !defined(LTTNG_TRACE_SKB_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_SKB_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
-#include <linux/tracepoint.h>
 #include <linux/version.h>
 
 /*
  * Tracepoint for free an sk_buff:
  */
-TRACE_EVENT_MAP(kfree_skb,
+LTTNG_TRACEPOINT_EVENT_MAP(kfree_skb,
 
 	skb_kfree,
 
@@ -37,7 +37,7 @@ TRACE_EVENT_MAP(kfree_skb,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
-TRACE_EVENT_MAP(consume_skb,
+LTTNG_TRACEPOINT_EVENT_MAP(consume_skb,
 
 	skb_consume,
 
@@ -58,7 +58,7 @@ TRACE_EVENT_MAP(consume_skb,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,32))
-TRACE_EVENT(skb_copy_datagram_iovec,
+LTTNG_TRACEPOINT_EVENT(skb_copy_datagram_iovec,
 
 	TP_PROTO(const struct sk_buff *skb, int len),
 
@@ -78,7 +78,7 @@ TRACE_EVENT(skb_copy_datagram_iovec,
 )
 #endif
 
-#endif /* _TRACE_SKB_H */
+#endif /* LTTNG_TRACE_SKB_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/sock.h b/drivers/staging/lttng/instrumentation/events/lttng-module/sock.h
index 3e3dbc7..3f48fa3 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/sock.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/sock.h
@@ -1,13 +1,13 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM sock
 
-#if !defined(_TRACE_SOCK_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_SOCK_H
+#if !defined(LTTNG_TRACE_SOCK_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_SOCK_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <net/sock.h>
-#include <linux/tracepoint.h>
 
-TRACE_EVENT(sock_rcvqueue_full,
+LTTNG_TRACEPOINT_EVENT(sock_rcvqueue_full,
 
 	TP_PROTO(struct sock *sk, struct sk_buff *skb),
 
@@ -29,7 +29,7 @@ TRACE_EVENT(sock_rcvqueue_full,
 		__entry->rmem_alloc, __entry->truesize, __entry->sk_rcvbuf)
 )
 
-TRACE_EVENT(sock_exceed_buf_limit,
+LTTNG_TRACEPOINT_EVENT(sock_exceed_buf_limit,
 
 	TP_PROTO(struct sock *sk, struct proto *prot, long allocated),
 
@@ -62,7 +62,7 @@ TRACE_EVENT(sock_exceed_buf_limit,
 		__entry->rmem_alloc)
 )
 
-#endif /* _TRACE_SOCK_H */
+#endif /* LTTNG_TRACE_SOCK_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/sunrpc.h b/drivers/staging/lttng/instrumentation/events/lttng-module/sunrpc.h
index 6320668..af9358c 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/sunrpc.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/sunrpc.h
@@ -1,14 +1,14 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM sunrpc
 
-#if !defined(_TRACE_SUNRPC_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_SUNRPC_H
+#if !defined(LTTNG_TRACE_SUNRPC_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_SUNRPC_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/sunrpc/sched.h>
 #include <linux/sunrpc/clnt.h>
-#include <linux/tracepoint.h>
 
-DECLARE_EVENT_CLASS(rpc_task_status,
+LTTNG_TRACEPOINT_EVENT_CLASS(rpc_task_status,
 
 	TP_PROTO(struct rpc_task *task),
 
@@ -29,19 +29,19 @@ DECLARE_EVENT_CLASS(rpc_task_status,
 	TP_printk("task:%p@%p, status %d",__entry->task, __entry->clnt, __entry->status)
 )
 
-DEFINE_EVENT(rpc_task_status, rpc_call_status,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpc_task_status, rpc_call_status,
 	TP_PROTO(struct rpc_task *task),
 
 	TP_ARGS(task)
 )
 
-DEFINE_EVENT(rpc_task_status, rpc_bind_status,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpc_task_status, rpc_bind_status,
 	TP_PROTO(struct rpc_task *task),
 
 	TP_ARGS(task)
 )
 
-TRACE_EVENT(rpc_connect_status,
+LTTNG_TRACEPOINT_EVENT(rpc_connect_status,
 	TP_PROTO(struct rpc_task *task, int status),
 
 	TP_ARGS(task, status),
@@ -61,7 +61,7 @@ TRACE_EVENT(rpc_connect_status,
 	TP_printk("task:%p@%p, status %d",__entry->task, __entry->clnt, __entry->status)
 )
 
-DECLARE_EVENT_CLASS(rpc_task_running,
+LTTNG_TRACEPOINT_EVENT_CLASS(rpc_task_running,
 
 	TP_PROTO(const struct rpc_clnt *clnt, const struct rpc_task *task, const void *action),
 
@@ -95,7 +95,7 @@ DECLARE_EVENT_CLASS(rpc_task_running,
 		)
 )
 
-DEFINE_EVENT(rpc_task_running, rpc_task_begin,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpc_task_running, rpc_task_begin,
 
 	TP_PROTO(const struct rpc_clnt *clnt, const struct rpc_task *task, const void *action),
 
@@ -103,7 +103,7 @@ DEFINE_EVENT(rpc_task_running, rpc_task_begin,
 
 )
 
-DEFINE_EVENT(rpc_task_running, rpc_task_run_action,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpc_task_running, rpc_task_run_action,
 
 	TP_PROTO(const struct rpc_clnt *clnt, const struct rpc_task *task, const void *action),
 
@@ -111,7 +111,7 @@ DEFINE_EVENT(rpc_task_running, rpc_task_run_action,
 
 )
 
-DEFINE_EVENT(rpc_task_running, rpc_task_complete,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpc_task_running, rpc_task_complete,
 
 	TP_PROTO(const struct rpc_clnt *clnt, const struct rpc_task *task, const void *action),
 
@@ -119,7 +119,7 @@ DEFINE_EVENT(rpc_task_running, rpc_task_complete,
 
 )
 
-DECLARE_EVENT_CLASS(rpc_task_queued,
+LTTNG_TRACEPOINT_EVENT_CLASS(rpc_task_queued,
 
 	TP_PROTO(const struct rpc_clnt *clnt, const struct rpc_task *task, const struct rpc_wait_queue *q),
 
@@ -156,7 +156,7 @@ DECLARE_EVENT_CLASS(rpc_task_queued,
 		)
 )
 
-DEFINE_EVENT(rpc_task_queued, rpc_task_sleep,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpc_task_queued, rpc_task_sleep,
 
 	TP_PROTO(const struct rpc_clnt *clnt, const struct rpc_task *task, const struct rpc_wait_queue *q),
 
@@ -164,7 +164,7 @@ DEFINE_EVENT(rpc_task_queued, rpc_task_sleep,
 
 )
 
-DEFINE_EVENT(rpc_task_queued, rpc_task_wakeup,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(rpc_task_queued, rpc_task_wakeup,
 
 	TP_PROTO(const struct rpc_clnt *clnt, const struct rpc_task *task, const struct rpc_wait_queue *q),
 
@@ -172,6 +172,6 @@ DEFINE_EVENT(rpc_task_queued, rpc_task_wakeup,
 
 )
 
-#endif /* _TRACE_SUNRPC_H */
+#endif /* LTTNG_TRACE_SUNRPC_H */
 
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/syscalls.h b/drivers/staging/lttng/instrumentation/events/lttng-module/syscalls.h
index a2bb956..42e93ec 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/syscalls.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/syscalls.h
@@ -2,10 +2,10 @@
 #define TRACE_SYSTEM raw_syscalls
 #define TRACE_INCLUDE_FILE syscalls
 
-#if !defined(_TRACE_EVENTS_SYSCALLS_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_EVENTS_SYSCALLS_H
+#if !defined(LTTNG_TRACE_EVENTS_SYSCALLS_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_EVENTS_SYSCALLS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 
 #ifdef CONFIG_HAVE_SYSCALL_TRACEPOINTS
 
@@ -17,7 +17,7 @@
 
 #endif /* _TRACE_SYSCALLS_DEF_ */
 
-TRACE_EVENT(sys_enter,
+LTTNG_TRACEPOINT_EVENT(sys_enter,
 
 	TP_PROTO(struct pt_regs *regs, long id),
 
@@ -47,7 +47,7 @@ TRACE_EVENT(sys_enter,
 		  __entry->args[3], __entry->args[4], __entry->args[5])
 )
 
-TRACE_EVENT(sys_exit,
+LTTNG_TRACEPOINT_EVENT(sys_exit,
 
 	TP_PROTO(struct pt_regs *regs, long ret),
 
@@ -69,7 +69,7 @@ TRACE_EVENT(sys_exit,
 
 #endif /* CONFIG_HAVE_SYSCALL_TRACEPOINTS */
 
-#endif /* _TRACE_EVENTS_SYSCALLS_H */
+#endif /* LTTNG_TRACE_EVENTS_SYSCALLS_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/timer.h b/drivers/staging/lttng/instrumentation/events/lttng-module/timer.h
index dd27838..8bd67e5 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/timer.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/timer.h
@@ -1,10 +1,10 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM timer
 
-#if !defined(_TRACE_TIMER_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_TIMER_H
+#if !defined(LTTNG_TRACE_TIMER_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_TIMER_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 
 #ifndef _TRACE_TIMER_DEF_
 #define _TRACE_TIMER_DEF_
@@ -15,7 +15,7 @@ struct timer_list;
 
 #endif /* _TRACE_TIMER_DEF_ */
 
-DECLARE_EVENT_CLASS(timer_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(timer_class,
 
 	TP_PROTO(struct timer_list *timer),
 
@@ -36,7 +36,7 @@ DECLARE_EVENT_CLASS(timer_class,
  * timer_init - called when the timer is initialized
  * @timer:	pointer to struct timer_list
  */
-DEFINE_EVENT(timer_class, timer_init,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(timer_class, timer_init,
 
 	TP_PROTO(struct timer_list *timer),
 
@@ -48,7 +48,7 @@ DEFINE_EVENT(timer_class, timer_init,
  * @timer:	pointer to struct timer_list
  * @expires:	the timers expiry time
  */
-TRACE_EVENT(timer_start,
+LTTNG_TRACEPOINT_EVENT(timer_start,
 
 	TP_PROTO(struct timer_list *timer, unsigned long expires),
 
@@ -79,7 +79,7 @@ TRACE_EVENT(timer_start,
  *
  * Allows to determine the timer latency.
  */
-TRACE_EVENT(timer_expire_entry,
+LTTNG_TRACEPOINT_EVENT(timer_expire_entry,
 
 	TP_PROTO(struct timer_list *timer),
 
@@ -110,7 +110,7 @@ TRACE_EVENT(timer_expire_entry,
  * NOTE: Do NOT derefernce timer in TP_fast_assign. The pointer might
  * be invalid. We solely track the pointer.
  */
-DEFINE_EVENT(timer_class, timer_expire_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(timer_class, timer_expire_exit,
 
 	TP_PROTO(struct timer_list *timer),
 
@@ -121,7 +121,7 @@ DEFINE_EVENT(timer_class, timer_expire_exit,
  * timer_cancel - called when the timer is canceled
  * @timer:	pointer to struct timer_list
  */
-DEFINE_EVENT(timer_class, timer_cancel,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(timer_class, timer_cancel,
 
 	TP_PROTO(struct timer_list *timer),
 
@@ -134,7 +134,7 @@ DEFINE_EVENT(timer_class, timer_cancel,
  * @clockid:	the hrtimers clock
  * @mode:	the hrtimers mode
  */
-TRACE_EVENT(hrtimer_init,
+LTTNG_TRACEPOINT_EVENT(hrtimer_init,
 
 	TP_PROTO(struct hrtimer *hrtimer, clockid_t clockid,
 		 enum hrtimer_mode mode),
@@ -164,7 +164,7 @@ TRACE_EVENT(hrtimer_init,
  * hrtimer_start - called when the hrtimer is started
  * @timer: pointer to struct hrtimer
  */
-TRACE_EVENT(hrtimer_start,
+LTTNG_TRACEPOINT_EVENT(hrtimer_start,
 
 	TP_PROTO(struct hrtimer *hrtimer),
 
@@ -200,7 +200,7 @@ TRACE_EVENT(hrtimer_start,
  *
  * Allows to determine the timer latency.
  */
-TRACE_EVENT(hrtimer_expire_entry,
+LTTNG_TRACEPOINT_EVENT(hrtimer_expire_entry,
 
 	TP_PROTO(struct hrtimer *hrtimer, ktime_t *now),
 
@@ -222,7 +222,7 @@ TRACE_EVENT(hrtimer_expire_entry,
 		  (unsigned long long)ktime_to_ns((ktime_t) { .tv64 = __entry->now }))
 )
 
-DECLARE_EVENT_CLASS(hrtimer_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(hrtimer_class,
 
 	TP_PROTO(struct hrtimer *hrtimer),
 
@@ -246,7 +246,7 @@ DECLARE_EVENT_CLASS(hrtimer_class,
  * When used in combination with the hrtimer_expire_entry tracepoint we can
  * determine the runtime of the callback function.
  */
-DEFINE_EVENT(hrtimer_class, hrtimer_expire_exit,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(hrtimer_class, hrtimer_expire_exit,
 
 	TP_PROTO(struct hrtimer *hrtimer),
 
@@ -257,7 +257,7 @@ DEFINE_EVENT(hrtimer_class, hrtimer_expire_exit,
  * hrtimer_cancel - called when the hrtimer is canceled
  * @hrtimer:	pointer to struct hrtimer
  */
-DEFINE_EVENT(hrtimer_class, hrtimer_cancel,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(hrtimer_class, hrtimer_cancel,
 
 	TP_PROTO(struct hrtimer *hrtimer),
 
@@ -271,7 +271,7 @@ DEFINE_EVENT(hrtimer_class, hrtimer_cancel,
  *		zero, otherwise it is started
  * @expires:	the itimers expiry time
  */
-TRACE_EVENT(itimer_state,
+LTTNG_TRACEPOINT_EVENT(itimer_state,
 
 	TP_PROTO(int which, const struct itimerval *const value,
 		 cputime_t expires),
@@ -308,7 +308,7 @@ TRACE_EVENT(itimer_state,
  * @pid:	pid of the process which owns the timer
  * @now:	current time, used to calculate the latency of itimer
  */
-TRACE_EVENT(itimer_expire,
+LTTNG_TRACEPOINT_EVENT(itimer_expire,
 
 	TP_PROTO(int which, struct pid *pid, cputime_t now),
 
@@ -330,7 +330,7 @@ TRACE_EVENT(itimer_expire,
 		  (int) __entry->pid, (unsigned long long)__entry->now)
 )
 
-#endif /*  _TRACE_TIMER_H */
+#endif /*  LTTNG_TRACE_TIMER_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/udp.h b/drivers/staging/lttng/instrumentation/events/lttng-module/udp.h
index a246e84..bcb44d8 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/udp.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/udp.h
@@ -1,13 +1,13 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM udp
 
-#if !defined(_TRACE_UDP_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_UDP_H
+#if !defined(LTTNG_TRACE_UDP_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_UDP_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/udp.h>
-#include <linux/tracepoint.h>
 
-TRACE_EVENT(udp_fail_queue_rcv_skb,
+LTTNG_TRACEPOINT_EVENT(udp_fail_queue_rcv_skb,
 
 	TP_PROTO(int rc, struct sock *sk),
 
@@ -26,7 +26,7 @@ TRACE_EVENT(udp_fail_queue_rcv_skb,
 	TP_printk("rc=%d port=%hu", __entry->rc, __entry->lport)
 )
 
-#endif /* _TRACE_UDP_H */
+#endif /* LTTNG_TRACE_UDP_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/v4l2.h b/drivers/staging/lttng/instrumentation/events/lttng-module/v4l2.h
index edc57c8..03ab58a 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/v4l2.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/v4l2.h
@@ -1,10 +1,10 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM v4l2
 
-#if !defined(_TRACE_V4L2_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_V4L2_H
+#if !defined(LTTNG_TRACE_V4L2_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_V4L2_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 
 #define show_field(field)						\
 	__print_symbolic(field,						\
@@ -52,8 +52,8 @@
 		{ V4L2_TC_USERBITS_USERDEFINED,	"USERBITS_USERDEFINED" }, \
 		{ V4L2_TC_USERBITS_8BITCHARS,	"USERBITS_8BITCHARS" })
 
-#define LTTNG_V4L2_TRACE_EVENT(event_name)				\
-	TRACE_EVENT(event_name,						\
+#define LTTNG_TRACEPOINT_EVENT_V4L2(event_name)				\
+	LTTNG_TRACEPOINT_EVENT(event_name,						\
 		TP_PROTO(int minor, struct v4l2_buffer *buf),		\
 									\
 		TP_ARGS(minor, buf),					\
@@ -134,10 +134,10 @@
 		)							\
 	)
 
-LTTNG_V4L2_TRACE_EVENT(v4l2_dqbuf)
-LTTNG_V4L2_TRACE_EVENT(v4l2_qbuf)
+LTTNG_TRACEPOINT_EVENT_V4L2(v4l2_dqbuf)
+LTTNG_TRACEPOINT_EVENT_V4L2(v4l2_qbuf)
 
-#endif /* if !defined(_TRACE_V4L2_H) || defined(TRACE_HEADER_MULTI_READ) */
+#endif /* if !defined(LTTNG_TRACE_V4L2_H) || defined(TRACE_HEADER_MULTI_READ) */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/vmscan.h b/drivers/staging/lttng/instrumentation/events/lttng-module/vmscan.h
index 0b4aa56..4eadc63 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/vmscan.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/vmscan.h
@@ -1,11 +1,11 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM vmscan
 
-#if !defined(_TRACE_VMSCAN_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_VMSCAN_H
+#if !defined(LTTNG_TRACE_VMSCAN_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_VMSCAN_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/types.h>
-#include <linux/tracepoint.h>
 #include <linux/mm.h>
 #include <linux/memcontrol.h>
 #include <trace/events/gfpflags.h>
@@ -45,7 +45,7 @@ typedef int isolate_mode_t;
 
 #endif
 
-TRACE_EVENT(mm_vmscan_kswapd_sleep,
+LTTNG_TRACEPOINT_EVENT(mm_vmscan_kswapd_sleep,
 
 	TP_PROTO(int nid),
 
@@ -62,7 +62,7 @@ TRACE_EVENT(mm_vmscan_kswapd_sleep,
 	TP_printk("nid=%d", __entry->nid)
 )
 
-TRACE_EVENT(mm_vmscan_kswapd_wake,
+LTTNG_TRACEPOINT_EVENT(mm_vmscan_kswapd_wake,
 
 	TP_PROTO(int nid, int order),
 
@@ -81,7 +81,7 @@ TRACE_EVENT(mm_vmscan_kswapd_wake,
 	TP_printk("nid=%d order=%d", __entry->nid, __entry->order)
 )
 
-TRACE_EVENT(mm_vmscan_wakeup_kswapd,
+LTTNG_TRACEPOINT_EVENT(mm_vmscan_wakeup_kswapd,
 
 	TP_PROTO(int nid, int zid, int order),
 
@@ -105,7 +105,7 @@ TRACE_EVENT(mm_vmscan_wakeup_kswapd,
 		__entry->order)
 )
 
-DECLARE_EVENT_CLASS(mm_vmscan_direct_reclaim_begin_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(mm_vmscan_direct_reclaim_begin_template,
 
 	TP_PROTO(int order, int may_writepage, gfp_t gfp_flags),
 
@@ -129,28 +129,28 @@ DECLARE_EVENT_CLASS(mm_vmscan_direct_reclaim_begin_template,
 		show_gfp_flags(__entry->gfp_flags))
 )
 
-DEFINE_EVENT(mm_vmscan_direct_reclaim_begin_template, mm_vmscan_direct_reclaim_begin,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_direct_reclaim_begin_template, mm_vmscan_direct_reclaim_begin,
 
 	TP_PROTO(int order, int may_writepage, gfp_t gfp_flags),
 
 	TP_ARGS(order, may_writepage, gfp_flags)
 )
 
-DEFINE_EVENT(mm_vmscan_direct_reclaim_begin_template, mm_vmscan_memcg_reclaim_begin,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_direct_reclaim_begin_template, mm_vmscan_memcg_reclaim_begin,
 
 	TP_PROTO(int order, int may_writepage, gfp_t gfp_flags),
 
 	TP_ARGS(order, may_writepage, gfp_flags)
 )
 
-DEFINE_EVENT(mm_vmscan_direct_reclaim_begin_template, mm_vmscan_memcg_softlimit_reclaim_begin,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_direct_reclaim_begin_template, mm_vmscan_memcg_softlimit_reclaim_begin,
 
 	TP_PROTO(int order, int may_writepage, gfp_t gfp_flags),
 
 	TP_ARGS(order, may_writepage, gfp_flags)
 )
 
-DECLARE_EVENT_CLASS(mm_vmscan_direct_reclaim_end_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(mm_vmscan_direct_reclaim_end_template,
 
 	TP_PROTO(unsigned long nr_reclaimed),
 
@@ -167,21 +167,21 @@ DECLARE_EVENT_CLASS(mm_vmscan_direct_reclaim_end_template,
 	TP_printk("nr_reclaimed=%lu", __entry->nr_reclaimed)
 )
 
-DEFINE_EVENT(mm_vmscan_direct_reclaim_end_template, mm_vmscan_direct_reclaim_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_direct_reclaim_end_template, mm_vmscan_direct_reclaim_end,
 
 	TP_PROTO(unsigned long nr_reclaimed),
 
 	TP_ARGS(nr_reclaimed)
 )
 
-DEFINE_EVENT(mm_vmscan_direct_reclaim_end_template, mm_vmscan_memcg_reclaim_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_direct_reclaim_end_template, mm_vmscan_memcg_reclaim_end,
 
 	TP_PROTO(unsigned long nr_reclaimed),
 
 	TP_ARGS(nr_reclaimed)
 )
 
-DEFINE_EVENT(mm_vmscan_direct_reclaim_end_template, mm_vmscan_memcg_softlimit_reclaim_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_direct_reclaim_end_template, mm_vmscan_memcg_softlimit_reclaim_end,
 
 	TP_PROTO(unsigned long nr_reclaimed),
 
@@ -189,7 +189,7 @@ DEFINE_EVENT(mm_vmscan_direct_reclaim_end_template, mm_vmscan_memcg_softlimit_re
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0))
-TRACE_EVENT(mm_shrink_slab_start,
+LTTNG_TRACEPOINT_EVENT(mm_shrink_slab_start,
 	TP_PROTO(struct shrinker *shr, struct shrink_control *sc,
 		long nr_objects_to_shrink, unsigned long pgs_scanned,
 		unsigned long lru_pgs, unsigned long cache_items,
@@ -239,7 +239,7 @@ TRACE_EVENT(mm_shrink_slab_start,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0))
-TRACE_EVENT(mm_shrink_slab_end,
+LTTNG_TRACEPOINT_EVENT(mm_shrink_slab_end,
 	TP_PROTO(struct shrinker *shr, int nid, int shrinker_retval,
 		long unused_scan_cnt, long new_scan_cnt, long total_scan),
 
@@ -276,7 +276,7 @@ TRACE_EVENT(mm_shrink_slab_end,
 		__entry->retval)
 )
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0)) */
-TRACE_EVENT(mm_shrink_slab_end,
+LTTNG_TRACEPOINT_EVENT(mm_shrink_slab_end,
 	TP_PROTO(struct shrinker *shr, int shrinker_retval,
 		long unused_scan_cnt, long new_scan_cnt),
 
@@ -315,7 +315,7 @@ TRACE_EVENT(mm_shrink_slab_end,
 #endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0)) */
 #endif
 
-DECLARE_EVENT_CLASS(mm_vmscan_lru_isolate_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(mm_vmscan_lru_isolate_template,
 
 	TP_PROTO(int order,
 		unsigned long nr_requested,
@@ -410,7 +410,7 @@ DECLARE_EVENT_CLASS(mm_vmscan_lru_isolate_template,
 #endif
 )
 
-DEFINE_EVENT(mm_vmscan_lru_isolate_template, mm_vmscan_lru_isolate,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_lru_isolate_template, mm_vmscan_lru_isolate,
 
 	TP_PROTO(int order,
 		unsigned long nr_requested,
@@ -442,7 +442,7 @@ DEFINE_EVENT(mm_vmscan_lru_isolate_template, mm_vmscan_lru_isolate,
 
 )
 
-DEFINE_EVENT(mm_vmscan_lru_isolate_template, mm_vmscan_memcg_isolate,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(mm_vmscan_lru_isolate_template, mm_vmscan_memcg_isolate,
 
 	TP_PROTO(int order,
 		unsigned long nr_requested,
@@ -473,7 +473,7 @@ DEFINE_EVENT(mm_vmscan_lru_isolate_template, mm_vmscan_memcg_isolate,
 	)
 )
 
-TRACE_EVENT(mm_vmscan_writepage,
+LTTNG_TRACEPOINT_EVENT(mm_vmscan_writepage,
 
 	TP_PROTO(struct page *page,
 		int reclaim_flags),
@@ -497,7 +497,7 @@ TRACE_EVENT(mm_vmscan_writepage,
 )
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
-TRACE_EVENT(mm_vmscan_lru_shrink_inactive,
+LTTNG_TRACEPOINT_EVENT(mm_vmscan_lru_shrink_inactive,
 
 	TP_PROTO(int nid, int zid,
 			unsigned long nr_scanned, unsigned long nr_reclaimed,
@@ -532,7 +532,7 @@ TRACE_EVENT(mm_vmscan_lru_shrink_inactive,
 #endif
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,5,0))
-TRACE_EVENT_MAP(replace_swap_token,
+LTTNG_TRACEPOINT_EVENT_MAP(replace_swap_token,
 
 	mm_vmscan_replace_swap_token,
 
@@ -560,7 +560,7 @@ TRACE_EVENT_MAP(replace_swap_token,
 		  __entry->new_mm, __entry->new_prio)
 )
 
-DECLARE_EVENT_CLASS(mm_vmscan_put_swap_token_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(mm_vmscan_put_swap_token_template,
 	TP_PROTO(struct mm_struct *swap_token_mm),
 
 	TP_ARGS(swap_token_mm),
@@ -576,7 +576,7 @@ DECLARE_EVENT_CLASS(mm_vmscan_put_swap_token_template,
 	TP_printk("token_mm=%p", __entry->swap_token_mm)
 )
 
-DEFINE_EVENT_MAP(mm_vmscan_put_swap_token_template, put_swap_token,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(mm_vmscan_put_swap_token_template, put_swap_token,
 
 	mm_vmscan_put_swap_token,
 
@@ -584,7 +584,7 @@ DEFINE_EVENT_MAP(mm_vmscan_put_swap_token_template, put_swap_token,
 	TP_ARGS(swap_token_mm)
 )
 
-DEFINE_EVENT_CONDITION_MAP(mm_vmscan_put_swap_token_template, disable_swap_token,
+LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION_MAP(mm_vmscan_put_swap_token_template, disable_swap_token,
 
 	mm_vmscan_disable_swap_token,
 
@@ -593,7 +593,7 @@ DEFINE_EVENT_CONDITION_MAP(mm_vmscan_put_swap_token_template, disable_swap_token
 	TP_CONDITION(swap_token_mm != NULL)
 )
 
-TRACE_EVENT_CONDITION_MAP(update_swap_token_priority,
+LTTNG_TRACEPOINT_EVENT_CONDITION_MAP(update_swap_token_priority,
 
 	mm_vmscan_update_swap_token_priority,
 
@@ -627,7 +627,7 @@ TRACE_EVENT_CONDITION_MAP(update_swap_token_priority,
 )
 #endif
 
-#endif /* _TRACE_VMSCAN_H */
+#endif /* LTTNG_TRACE_VMSCAN_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/workqueue.h b/drivers/staging/lttng/instrumentation/events/lttng-module/workqueue.h
index 96aa240..8393a33 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/workqueue.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/workqueue.h
@@ -1,10 +1,10 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM workqueue
 
-#if !defined(_TRACE_WORKQUEUE_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_WORKQUEUE_H
+#if !defined(LTTNG_TRACE_WORKQUEUE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_WORKQUEUE_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/workqueue.h>
 #include <linux/version.h>
 
@@ -18,7 +18,7 @@ struct global_cwq;
 
 #endif
 
-DECLARE_EVENT_CLASS(workqueue_work,
+LTTNG_TRACEPOINT_EVENT_CLASS(workqueue_work,
 
 	TP_PROTO(struct work_struct *work),
 
@@ -46,7 +46,7 @@ DECLARE_EVENT_CLASS(workqueue_work,
  * delayed work is actually queued on a workqueue (ie: once the delay
  * has been reached).
  */
-TRACE_EVENT(workqueue_queue_work,
+LTTNG_TRACEPOINT_EVENT(workqueue_queue_work,
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
 	TP_PROTO(unsigned int req_cpu, struct pool_workqueue *pwq,
@@ -85,7 +85,7 @@ TRACE_EVENT(workqueue_queue_work,
  * which happens immediately after queueing unless @max_active limit
  * is reached.
  */
-DEFINE_EVENT(workqueue_work, workqueue_activate_work,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(workqueue_work, workqueue_activate_work,
 
 	TP_PROTO(struct work_struct *work),
 
@@ -99,7 +99,7 @@ DEFINE_EVENT(workqueue_work, workqueue_activate_work,
  *
  * Allows to track workqueue execution.
  */
-TRACE_EVENT(workqueue_execute_start,
+LTTNG_TRACEPOINT_EVENT(workqueue_execute_start,
 
 	TP_PROTO(struct work_struct *work),
 
@@ -124,7 +124,7 @@ TRACE_EVENT(workqueue_execute_start,
  *
  * Allows to track workqueue execution.
  */
-DEFINE_EVENT(workqueue_work, workqueue_execute_end,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(workqueue_work, workqueue_execute_end,
 
 	TP_PROTO(struct work_struct *work),
 
@@ -133,7 +133,7 @@ DEFINE_EVENT(workqueue_work, workqueue_execute_end,
 
 #else
 
-DECLARE_EVENT_CLASS(workqueue,
+LTTNG_TRACEPOINT_EVENT_CLASS(workqueue,
 
 	TP_PROTO(struct task_struct *wq_thread, struct work_struct *work),
 
@@ -155,14 +155,14 @@ DECLARE_EVENT_CLASS(workqueue,
 		__entry->thread_pid, __entry->func)
 )
 
-DEFINE_EVENT(workqueue, workqueue_insertion,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(workqueue, workqueue_insertion,
 
 	TP_PROTO(struct task_struct *wq_thread, struct work_struct *work),
 
 	TP_ARGS(wq_thread, work)
 )
 
-DEFINE_EVENT(workqueue, workqueue_execution,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(workqueue, workqueue_execution,
 
 	TP_PROTO(struct task_struct *wq_thread, struct work_struct *work),
 
@@ -170,7 +170,7 @@ DEFINE_EVENT(workqueue, workqueue_execution,
 )
 
 /* Trace the creation of one workqueue thread on a cpu */
-TRACE_EVENT(workqueue_creation,
+LTTNG_TRACEPOINT_EVENT(workqueue_creation,
 
 	TP_PROTO(struct task_struct *wq_thread, int cpu),
 
@@ -192,7 +192,7 @@ TRACE_EVENT(workqueue_creation,
 		__entry->thread_pid, __entry->cpu)
 )
 
-TRACE_EVENT(workqueue_destruction,
+LTTNG_TRACEPOINT_EVENT(workqueue_destruction,
 
 	TP_PROTO(struct task_struct *wq_thread),
 
@@ -213,7 +213,7 @@ TRACE_EVENT(workqueue_destruction,
 
 #endif
 
-#endif /*  _TRACE_WORKQUEUE_H */
+#endif /*  LTTNG_TRACE_WORKQUEUE_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/writeback.h b/drivers/staging/lttng/instrumentation/events/lttng-module/writeback.h
index fd9c520..2dca4e4 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/writeback.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/writeback.h
@@ -1,9 +1,10 @@
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM writeback
 
-#if !defined(_TRACE_WRITEBACK_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_WRITEBACK_H
+#if !defined(LTTNG_TRACE_WRITEBACK_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_WRITEBACK_H
 
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/backing-dev.h>
 #include <linux/writeback.h>
 #include <linux/version.h>
@@ -46,7 +47,7 @@ static inline struct backing_dev_info *inode_to_bdi(struct inode *inode)
 		{WB_REASON_FORKER_THREAD,	"forker_thread"}
 #endif
 
-DECLARE_EVENT_CLASS(writeback_work_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(writeback_work_class,
 	TP_PROTO(struct backing_dev_info *bdi, struct wb_writeback_work *work),
 	TP_ARGS(bdi, work),
 	TP_STRUCT__entry(
@@ -60,20 +61,20 @@ DECLARE_EVENT_CLASS(writeback_work_class,
 		  __entry->name
 	)
 )
-#define DEFINE_WRITEBACK_WORK_EVENT(name) \
-DEFINE_EVENT(writeback_work_class, name, \
+#define LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE(name) \
+LTTNG_TRACEPOINT_EVENT_INSTANCE(writeback_work_class, name, \
 	TP_PROTO(struct backing_dev_info *bdi, struct wb_writeback_work *work), \
 	TP_ARGS(bdi, work))
-DEFINE_WRITEBACK_WORK_EVENT(writeback_nothread)
-DEFINE_WRITEBACK_WORK_EVENT(writeback_queue)
-DEFINE_WRITEBACK_WORK_EVENT(writeback_exec)
+LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE(writeback_nothread)
+LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE(writeback_queue)
+LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE(writeback_exec)
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0))
-DEFINE_WRITEBACK_WORK_EVENT(writeback_start)
-DEFINE_WRITEBACK_WORK_EVENT(writeback_written)
-DEFINE_WRITEBACK_WORK_EVENT(writeback_wait)
+LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE(writeback_start)
+LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE(writeback_written)
+LTTNG_TRACEPOINT_EVENT_WRITEBACK_WORK_INSTANCE(writeback_wait)
 #endif
 
-TRACE_EVENT(writeback_pages_written,
+LTTNG_TRACEPOINT_EVENT(writeback_pages_written,
 	TP_PROTO(long pages_written),
 	TP_ARGS(pages_written),
 	TP_STRUCT__entry(
@@ -85,7 +86,7 @@ TRACE_EVENT(writeback_pages_written,
 	TP_printk("%ld", __entry->pages)
 )
 
-DECLARE_EVENT_CLASS(writeback_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(writeback_class,
 	TP_PROTO(struct backing_dev_info *bdi),
 	TP_ARGS(bdi),
 	TP_STRUCT__entry(
@@ -99,12 +100,12 @@ DECLARE_EVENT_CLASS(writeback_class,
 	)
 )
 #define DEFINE_WRITEBACK_EVENT(name) \
-DEFINE_EVENT(writeback_class, name, \
+LTTNG_TRACEPOINT_EVENT_INSTANCE(writeback_class, name, \
 	TP_PROTO(struct backing_dev_info *bdi), \
 	TP_ARGS(bdi))
 
 #define DEFINE_WRITEBACK_EVENT_MAP(name, map) \
-DEFINE_EVENT_MAP(writeback_class, name, map, \
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(writeback_class, name, map, \
 	TP_PROTO(struct backing_dev_info *bdi), \
 	TP_ARGS(bdi))
 
@@ -122,7 +123,7 @@ DEFINE_WRITEBACK_EVENT(writeback_thread_stop)
 DEFINE_WRITEBACK_EVENT_MAP(balance_dirty_start, writeback_balance_dirty_start)
 DEFINE_WRITEBACK_EVENT_MAP(balance_dirty_wait, writeback_balance_dirty_wait)
 
-TRACE_EVENT_MAP(balance_dirty_written,
+LTTNG_TRACEPOINT_EVENT_MAP(balance_dirty_written,
 
 	writeback_balance_dirty_written,
 
@@ -147,7 +148,7 @@ TRACE_EVENT_MAP(balance_dirty_written,
 )
 #endif
 
-DECLARE_EVENT_CLASS(writeback_wbc_class,
+LTTNG_TRACEPOINT_EVENT_CLASS(writeback_wbc_class,
 	TP_PROTO(struct writeback_control *wbc, struct backing_dev_info *bdi),
 	TP_ARGS(wbc, bdi),
 	TP_STRUCT__entry(
@@ -209,22 +210,22 @@ DECLARE_EVENT_CLASS(writeback_wbc_class,
 )
 
 #undef DEFINE_WBC_EVENT
-#define DEFINE_WBC_EVENT(name, map) \
-DEFINE_EVENT_MAP(writeback_wbc_class, name, map, \
+#define LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(name, map) \
+LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(writeback_wbc_class, name, map, \
 	TP_PROTO(struct writeback_control *wbc, struct backing_dev_info *bdi), \
 	TP_ARGS(wbc, bdi))
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
-DEFINE_WBC_EVENT(wbc_writeback_start, writeback_wbc_writeback_start)
-DEFINE_WBC_EVENT(wbc_writeback_written, writeback_wbc_writeback_written)
-DEFINE_WBC_EVENT(wbc_writeback_wait, writeback_wbc_writeback_wait)
-DEFINE_WBC_EVENT(wbc_balance_dirty_start, writeback_wbc_balance_dirty_start)
-DEFINE_WBC_EVENT(wbc_balance_dirty_written, writeback_wbc_balance_dirty_written)
-DEFINE_WBC_EVENT(wbc_balance_dirty_wait, writeback_wbc_balance_dirty_wait)
+LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(wbc_writeback_start, writeback_wbc_writeback_start)
+LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(wbc_writeback_written, writeback_wbc_writeback_written)
+LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(wbc_writeback_wait, writeback_wbc_writeback_wait)
+LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(wbc_balance_dirty_start, writeback_wbc_balance_dirty_start)
+LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(wbc_balance_dirty_written, writeback_wbc_balance_dirty_written)
+LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(wbc_balance_dirty_wait, writeback_wbc_balance_dirty_wait)
 #endif
-DEFINE_WBC_EVENT(wbc_writepage, writeback_wbc_writepage)
+LTTNG_TRACEPOINT_EVENT_WBC_INSTANCE(wbc_writepage, writeback_wbc_writepage)
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0))
-TRACE_EVENT(writeback_queue_io,
+LTTNG_TRACEPOINT_EVENT(writeback_queue_io,
 	TP_PROTO(struct bdi_writeback *wb,
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
 		 struct wb_writeback_work *work,
@@ -271,7 +272,7 @@ TRACE_EVENT(writeback_queue_io,
 #endif
 )
 
-TRACE_EVENT_MAP(global_dirty_state,
+LTTNG_TRACEPOINT_EVENT_MAP(global_dirty_state,
 
 	writeback_global_dirty_state,
 
@@ -324,7 +325,7 @@ TRACE_EVENT_MAP(global_dirty_state,
 
 #define KBps(x)			((x) << (PAGE_SHIFT - 10))
 
-TRACE_EVENT_MAP(bdi_dirty_ratelimit,
+LTTNG_TRACEPOINT_EVENT_MAP(bdi_dirty_ratelimit,
 
 	writeback_bdi_dirty_ratelimit,
 
@@ -369,7 +370,7 @@ TRACE_EVENT_MAP(bdi_dirty_ratelimit,
 	)
 )
 
-TRACE_EVENT_MAP(balance_dirty_pages,
+LTTNG_TRACEPOINT_EVENT_MAP(balance_dirty_pages,
 
 	writeback_balance_dirty_pages,
 
@@ -485,7 +486,7 @@ TRACE_EVENT_MAP(balance_dirty_pages,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0))
-TRACE_EVENT(writeback_sb_inodes_requeue,
+LTTNG_TRACEPOINT_EVENT(writeback_sb_inodes_requeue,
 
 	TP_PROTO(struct inode *inode),
 	TP_ARGS(inode),
@@ -515,7 +516,7 @@ TRACE_EVENT(writeback_sb_inodes_requeue,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
-DECLARE_EVENT_CLASS(writeback_congest_waited_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(writeback_congest_waited_template,
 
 	TP_PROTO(unsigned int usec_timeout, unsigned int usec_delayed),
 
@@ -536,14 +537,14 @@ DECLARE_EVENT_CLASS(writeback_congest_waited_template,
 			__entry->usec_delayed)
 )
 
-DEFINE_EVENT(writeback_congest_waited_template, writeback_congestion_wait,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(writeback_congest_waited_template, writeback_congestion_wait,
 
 	TP_PROTO(unsigned int usec_timeout, unsigned int usec_delayed),
 
 	TP_ARGS(usec_timeout, usec_delayed)
 )
 
-DEFINE_EVENT(writeback_congest_waited_template, writeback_wait_iff_congested,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(writeback_congest_waited_template, writeback_wait_iff_congested,
 
 	TP_PROTO(unsigned int usec_timeout, unsigned int usec_delayed),
 
@@ -552,7 +553,7 @@ DEFINE_EVENT(writeback_congest_waited_template, writeback_wait_iff_congested,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0))
-DECLARE_EVENT_CLASS(writeback_single_inode_template,
+LTTNG_TRACEPOINT_EVENT_CLASS(writeback_single_inode_template,
 
 	TP_PROTO(struct inode *inode,
 		 struct writeback_control *wbc,
@@ -595,7 +596,7 @@ DECLARE_EVENT_CLASS(writeback_single_inode_template,
 )
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,5,0))
-DEFINE_EVENT(writeback_single_inode_template, writeback_single_inode_requeue,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(writeback_single_inode_template, writeback_single_inode_requeue,
 	TP_PROTO(struct inode *inode,
 		struct writeback_control *wbc,
 		unsigned long nr_to_write),
@@ -603,7 +604,7 @@ DEFINE_EVENT(writeback_single_inode_template, writeback_single_inode_requeue,
 )
 #endif
 
-DEFINE_EVENT(writeback_single_inode_template, writeback_single_inode,
+LTTNG_TRACEPOINT_EVENT_INSTANCE(writeback_single_inode_template, writeback_single_inode,
 	TP_PROTO(struct inode *inode,
 		 struct writeback_control *wbc,
 		 unsigned long nr_to_write),
@@ -611,7 +612,7 @@ DEFINE_EVENT(writeback_single_inode_template, writeback_single_inode,
 )
 #endif
 
-#endif /* _TRACE_WRITEBACK_H */
+#endif /* LTTNG_TRACE_WRITEBACK_H */
 
 /* This part must be outside protection */
 #include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_integers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_integers.h
index 9b10e5e..b248851e 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_integers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_integers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_INTEGERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_INTEGERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "arm-32-syscalls-3.4.25_integers_override.h"
 #include "syscalls_integers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_pointers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_pointers.h
index 3a9c146..ce25720 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_pointers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/arm-32-syscalls-3.4.25_pointers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_POINTERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_POINTERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "arm-32-syscalls-3.4.25_pointers_override.h"
 #include "syscalls_pointers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_integers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_integers.h
index 5529d8b..c887483 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_integers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_integers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_INTEGERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_INTEGERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "mips-32-syscalls-3.13.0_integers_override.h"
 #include "syscalls_integers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_pointers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_pointers.h
index a6be13b..838f185 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_pointers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.13.0_pointers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_POINTERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_POINTERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "mips-32-syscalls-3.13.0_pointers_override.h"
 #include "syscalls_pointers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_integers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_integers.h
index da8ed56..b63ac1e4 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_integers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_integers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_INTEGERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_INTEGERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "mips-32-syscalls-3.5.0_integers_override.h"
 #include "syscalls_integers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_pointers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_pointers.h
index db57eb6..605b558 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_pointers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-32-syscalls-3.5.0_pointers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_POINTERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_POINTERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "mips-32-syscalls-3.5.0_pointers_override.h"
 #include "syscalls_pointers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_integers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_integers.h
index a54cddb..28c9dae 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_integers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_integers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_INTEGERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_INTEGERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "mips-64-syscalls-3.5.0_integers_override.h"
 #include "syscalls_integers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_pointers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_pointers.h
index ad65c05..bc7dddc 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_pointers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/mips-64-syscalls-3.5.0_pointers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_POINTERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_POINTERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "mips-64-syscalls-3.5.0_pointers_override.h"
 #include "syscalls_pointers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_integers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_integers.h
index f8ff459..5bf0573 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_integers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_integers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_INTEGERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_INTEGERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "powerpc-32-syscalls-3.0.34_integers_override.h"
 #include "syscalls_integers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_pointers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_pointers.h
index 4244db4..eaabf47 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_pointers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/powerpc-32-syscalls-3.0.34_pointers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_POINTERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_POINTERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "powerpc-32-syscalls-3.0.34_pointers_override.h"
 #include "syscalls_pointers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h b/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h
index a2723c5..115e3e3 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h
@@ -1,7 +1,7 @@
 #if !defined(_TRACE_SYSCALLS_UNKNOWN_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_UNKNOWN_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 
 #define UNKNOWN_SYSCALL_NRARGS	6
@@ -9,7 +9,7 @@
 #undef TP_PROBE_CB
 #define TP_PROBE_CB(_template)          &syscall_entry_probe
 
-TRACE_EVENT(syscall_enter_unknown,
+LTTNG_TRACEPOINT_EVENT(syscall_enter_unknown,
 	TP_PROTO(unsigned int id, unsigned long *args),
 	TP_ARGS(id, args),
 	TP_STRUCT__entry(
@@ -22,7 +22,7 @@ TRACE_EVENT(syscall_enter_unknown,
 	),
 	TP_printk()
 )
-TRACE_EVENT(compat_syscall_enter_unknown,
+LTTNG_TRACEPOINT_EVENT(compat_syscall_enter_unknown,
 	TP_PROTO(unsigned int id, unsigned long *args),
 	TP_ARGS(id, args),
 	TP_STRUCT__entry(
@@ -39,7 +39,7 @@ TRACE_EVENT(compat_syscall_enter_unknown,
 #undef TP_PROBE_CB
 #define TP_PROBE_CB(_template)          &syscall_exit_probe
 
-TRACE_EVENT(syscall_exit_unknown,
+LTTNG_TRACEPOINT_EVENT(syscall_exit_unknown,
 	TP_PROTO(unsigned int id, long ret, unsigned long *args),
 	TP_ARGS(id, ret, args),
 	TP_STRUCT__entry(
@@ -54,7 +54,7 @@ TRACE_EVENT(syscall_exit_unknown,
 	),
 	TP_printk()
 )
-TRACE_EVENT(compat_syscall_exit_unknown,
+LTTNG_TRACEPOINT_EVENT(compat_syscall_exit_unknown,
 	TP_PROTO(unsigned int id, long ret, unsigned long *args),
 	TP_ARGS(id, ret, args),
 	TP_STRUCT__entry(
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_integers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_integers.h
index 2620d23..ba4ba60 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_integers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_integers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_INTEGERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_INTEGERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "x86-32-syscalls-3.1.0-rc6_integers_override.h"
 #include "syscalls_integers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_pointers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_pointers.h
index 23e35ba..c1e8c49 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_pointers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-32-syscalls-3.1.0-rc6_pointers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_POINTERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_POINTERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "x86-32-syscalls-3.1.0-rc6_pointers_override.h"
 #include "syscalls_pointers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_integers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_integers.h
index 2a1ae2c..30832ae 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_integers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_integers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_INTEGERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_INTEGERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "x86-64-syscalls-3.10.0-rc7_integers_override.h"
 #include "syscalls_integers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_pointers.h b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_pointers.h
index 830146f..97bdc89 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_pointers.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/x86-64-syscalls-3.10.0-rc7_pointers.h
@@ -4,7 +4,7 @@
 #if !defined(_TRACE_SYSCALLS_POINTERS_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_POINTERS_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include "x86-64-syscalls-3.10.0-rc7_pointers_override.h"
 #include "syscalls_pointers_override.h"
diff --git a/drivers/staging/lttng/instrumentation/syscalls/lttng-syscalls-generate-headers.sh b/drivers/staging/lttng/instrumentation/syscalls/lttng-syscalls-generate-headers.sh
index a632004..61e29e2 100755
--- a/drivers/staging/lttng/instrumentation/syscalls/lttng-syscalls-generate-headers.sh
+++ b/drivers/staging/lttng/instrumentation/syscalls/lttng-syscalls-generate-headers.sh
@@ -76,7 +76,7 @@ echo \
 #if !defined(_TRACE_SYSCALLS_${CLASSCAP}_H) || defined(TRACE_HEADER_MULTI_READ)
 #define _TRACE_SYSCALLS_${CLASSCAP}_H
 
-#include <linux/tracepoint.h>
+#include "../../../probes/lttng-tracepoint-event.h"
 #include <linux/syscalls.h>
 #include \"${INPUTFILE}_${CLASS}_override.h\"
 #include \"syscalls_${CLASS}_override.h\"
diff --git a/drivers/staging/lttng/lttng-statedump-impl.c b/drivers/staging/lttng/lttng-statedump-impl.c
index e4caa48..864637d 100644
--- a/drivers/staging/lttng/lttng-statedump-impl.c
+++ b/drivers/staging/lttng/lttng-statedump-impl.c
@@ -65,6 +65,7 @@
 #define CREATE_TRACE_POINTS
 #define TRACE_INCLUDE_PATH ../instrumentation/events/lttng-module
 #define TRACE_INCLUDE_FILE lttng-statedump
+#define LTTNG_INSTRUMENTATION
 #include "instrumentation/events/lttng-module/lttng-statedump.h"
 
 DEFINE_TRACE(lttng_statedump_block_device);
diff --git a/drivers/staging/lttng/lttng-syscalls.c b/drivers/staging/lttng/lttng-syscalls.c
index 1840caf..05b369d 100644
--- a/drivers/staging/lttng/lttng-syscalls.c
+++ b/drivers/staging/lttng/lttng-syscalls.c
@@ -73,13 +73,6 @@ struct mmap_arg_struct;
 #endif
 
 /*
- * Take care of NOARGS not supported by mainline.
- */
-#define DECLARE_EVENT_CLASS_NOARGS(name, tstruct, assign, print)
-#define DEFINE_EVENT_NOARGS(template, name)
-#define TRACE_EVENT_NOARGS(name, struct, assign, print)
-
-/*
  * Create LTTng tracepoint probes.
  */
 #define LTTNG_PACKAGE_BUILD
@@ -109,17 +102,17 @@ struct mmap_arg_struct;
 #undef TP_PROBE_CB
 #define TP_PROBE_CB(_template)		&syscall_entry_probe
 #define SC_TRACE_EVENT(_name, _proto, _args, _struct, _assign, _printk)	\
-	TRACE_EVENT(syscall_enter_##_name, PARAMS(_proto), PARAMS(_args),\
+	LTTNG_TRACEPOINT_EVENT(syscall_enter_##_name, PARAMS(_proto), PARAMS(_args), \
 		PARAMS(_struct), PARAMS(_assign), PARAMS(_printk))
 #define SC_LTTNG_TRACE_EVENT(_name, _proto, _args, _locvar, _code, _struct, _assign, _printk) \
-	LTTNG_TRACE_EVENT(syscall_enter_##_name, PARAMS(_proto), PARAMS(_args),\
+	LTTNG_TRACEPOINT_EVENT_CODE(syscall_enter_##_name, PARAMS(_proto), PARAMS(_args),\
 		PARAMS(_locvar), PARAMS(_code),\
 		PARAMS(_struct), PARAMS(_assign), PARAMS(_printk))
 #define SC_DECLARE_EVENT_CLASS_NOARGS(_name, _struct, _assign, _printk)	\
-	DECLARE_EVENT_CLASS_NOARGS(syscall_enter_##_name, PARAMS(_struct), PARAMS(_assign),\
+	LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS(syscall_enter_##_name, PARAMS(_struct), PARAMS(_assign), \
 		PARAMS(_printk))
 #define SC_DEFINE_EVENT_NOARGS(_template, _name)			\
-	DEFINE_EVENT_NOARGS(syscall_enter_##_template, syscall_enter_##_name)
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS(syscall_enter_##_template, syscall_enter_##_name)
 #undef TRACE_SYSTEM
 #define TRACE_SYSTEM syscall_enter_integers
 #define TRACE_INCLUDE_FILE syscalls_integers
@@ -136,25 +129,24 @@ struct mmap_arg_struct;
 #undef SC_DECLARE_EVENT_CLASS_NOARGS
 #undef SC_DEFINE_EVENT_NOARGS
 #undef TP_PROBE_CB
-#undef _TRACE_SYSCALLS_integers_H
-#undef _TRACE_SYSCALLS_pointers_H
-
+#undef _TRACE_SYSCALLS_INTEGERS_H
+#undef _TRACE_SYSCALLS_POINTERS_H
 
 /* Hijack probe callback for compat system call enter */
 #define TP_PROBE_CB(_template)		&syscall_entry_probe
 #define SC_TRACE_EVENT(_name, _proto, _args, _struct, _assign, _printk)	\
-	TRACE_EVENT(compat_syscall_enter_##_name, PARAMS(_proto), PARAMS(_args), \
+	LTTNG_TRACEPOINT_EVENT(compat_syscall_enter_##_name, PARAMS(_proto), PARAMS(_args), \
 		PARAMS(_struct), PARAMS(_assign),			\
 		PARAMS(_printk))
 #define SC_LTTNG_TRACE_EVENT(_name, _proto, _args, _locvar, _code, _struct, _assign, _printk) \
-	LTTNG_TRACE_EVENT(compat_syscall_enter_##_name, PARAMS(_proto), PARAMS(_args),\
+	LTTNG_TRACEPOINT_EVENT_CODE(compat_syscall_enter_##_name, PARAMS(_proto), PARAMS(_args), \
 		PARAMS(_locvar), PARAMS(_code),\
 		PARAMS(_struct), PARAMS(_assign), PARAMS(_printk))
 #define SC_DECLARE_EVENT_CLASS_NOARGS(_name, _struct, _assign, _printk) \
-	DECLARE_EVENT_CLASS_NOARGS(compat_syscall_enter_##_name, PARAMS(_struct), \
+	LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS(compat_syscall_enter_##_name, PARAMS(_struct), \
 		PARAMS(_assign), PARAMS(_printk))
 #define SC_DEFINE_EVENT_NOARGS(_template, _name)			\
-	DEFINE_EVENT_NOARGS(compat_syscall_enter_##_template,		\
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS(compat_syscall_enter_##_template, \
 		compat_syscall_enter_##_name)
 #define TRACE_SYSTEM compat_syscall_enter_integers
 #define TRACE_INCLUDE_FILE compat_syscalls_integers
@@ -171,8 +163,8 @@ struct mmap_arg_struct;
 #undef SC_DECLARE_EVENT_CLASS_NOARGS
 #undef SC_DEFINE_EVENT_NOARGS
 #undef TP_PROBE_CB
-#undef _TRACE_SYSCALLS_integers_H
-#undef _TRACE_SYSCALLS_pointers_H
+#undef _TRACE_SYSCALLS_INTEGERS_H
+#undef _TRACE_SYSCALLS_POINTERS_H
 
 #undef SC_ENTER
 
@@ -190,17 +182,17 @@ struct mmap_arg_struct;
 /* Hijack probe callback for system call exit */
 #define TP_PROBE_CB(_template)		&syscall_exit_probe
 #define SC_TRACE_EVENT(_name, _proto, _args, _struct, _assign, _printk)	\
-	TRACE_EVENT(syscall_exit_##_name, PARAMS(_proto), PARAMS(_args),\
+	LTTNG_TRACEPOINT_EVENT(syscall_exit_##_name, PARAMS(_proto), PARAMS(_args), \
 		PARAMS(_struct), PARAMS(_assign), PARAMS(_printk))
 #define SC_LTTNG_TRACE_EVENT(_name, _proto, _args, _locvar, _code, _struct, _assign, _printk) \
-	LTTNG_TRACE_EVENT(syscall_exit_##_name, PARAMS(_proto), PARAMS(_args),\
-		PARAMS(_locvar), PARAMS(_code),\
+	LTTNG_TRACEPOINT_EVENT_CODE(syscall_exit_##_name, PARAMS(_proto), PARAMS(_args), \
+		PARAMS(_locvar), PARAMS(_code), \
 		PARAMS(_struct), PARAMS(_assign), PARAMS(_printk))
 #define SC_DECLARE_EVENT_CLASS_NOARGS(_name, _struct, _assign, _printk) \
-	DECLARE_EVENT_CLASS_NOARGS(syscall_exit_##_name, PARAMS(_struct), \
+	LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS(syscall_exit_##_name, PARAMS(_struct), \
 		PARAMS(_assign), PARAMS(_printk))
 #define SC_DEFINE_EVENT_NOARGS(_template, _name)			\
-	DEFINE_EVENT_NOARGS(syscall_exit_##_template,			\
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS(syscall_exit_##_template, \
 		syscall_exit_##_name)
 #define TRACE_SYSTEM syscall_exit_integers
 #define TRACE_INCLUDE_FILE syscalls_integers
@@ -217,24 +209,24 @@ struct mmap_arg_struct;
 #undef SC_DECLARE_EVENT_CLASS_NOARGS
 #undef SC_DEFINE_EVENT_NOARGS
 #undef TP_PROBE_CB
-#undef _TRACE_SYSCALLS_integers_H
-#undef _TRACE_SYSCALLS_pointers_H
+#undef _TRACE_SYSCALLS_INTEGERS_H
+#undef _TRACE_SYSCALLS_POINTERS_H
 
 
 /* Hijack probe callback for compat system call exit */
 #define TP_PROBE_CB(_template)		&syscall_exit_probe
 #define SC_TRACE_EVENT(_name, _proto, _args, _struct, _assign, _printk)	\
-	TRACE_EVENT(compat_syscall_exit_##_name, PARAMS(_proto), PARAMS(_args), \
+	LTTNG_TRACEPOINT_EVENT(compat_syscall_exit_##_name, PARAMS(_proto), PARAMS(_args), \
 		PARAMS(_struct), PARAMS(_assign), PARAMS(_printk))
 #define SC_LTTNG_TRACE_EVENT(_name, _proto, _args, _locvar, _code, _struct, _assign, _printk) \
-	LTTNG_TRACE_EVENT(compat_syscall_exit_##_name, PARAMS(_proto), PARAMS(_args),\
-		PARAMS(_locvar), PARAMS(_code),\
+	LTTNG_TRACEPOINT_EVENT_CODE(compat_syscall_exit_##_name, PARAMS(_proto), PARAMS(_args), \
+		PARAMS(_locvar), PARAMS(_code), \
 		PARAMS(_struct), PARAMS(_assign), PARAMS(_printk))
 #define SC_DECLARE_EVENT_CLASS_NOARGS(_name, _struct, _assign, _printk) \
-	DECLARE_EVENT_CLASS_NOARGS(compat_syscall_exit_##_name, PARAMS(_struct), \
+	LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS(compat_syscall_exit_##_name, PARAMS(_struct), \
 		PARAMS(_assign), PARAMS(_printk))
 #define SC_DEFINE_EVENT_NOARGS(_template, _name)			\
-	DEFINE_EVENT_NOARGS(compat_syscall_exit_##_template,		\
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS(compat_syscall_exit_##_template, \
 		compat_syscall_exit_##_name)
 #define TRACE_SYSTEM compat_syscall_exit_integers
 #define TRACE_INCLUDE_FILE compat_syscalls_integers
@@ -251,8 +243,8 @@ struct mmap_arg_struct;
 #undef SC_DECLARE_EVENT_CLASS_NOARGS
 #undef SC_DEFINE_EVENT_NOARGS
 #undef TP_PROBE_CB
-#undef _TRACE_SYSCALLS_integers_H
-#undef _TRACE_SYSCALLS_pointers_H
+#undef _TRACE_SYSCALLS_INTEGERS_H
+#undef _TRACE_SYSCALLS_POINTERS_H
 
 #undef SC_EXIT
 
diff --git a/drivers/staging/lttng/probes/define_trace.h b/drivers/staging/lttng/probes/define_trace.h
index 6e7dae3..606b529 100644
--- a/drivers/staging/lttng/probes/define_trace.h
+++ b/drivers/staging/lttng/probes/define_trace.h
@@ -42,75 +42,70 @@
 #undef CREATE_TRACE_POINTS
 
 #include <linux/stringify.h>
-/*
- * module.h includes tracepoints, and because ftrace.h
- * pulls in module.h:
- *  trace/ftrace.h -> linux/ftrace_event.h -> linux/perf_event.h ->
- *  linux/ftrace.h -> linux/module.h
- * we must include module.h here before we play with any of
- * the TRACE_EVENT() macros, otherwise the tracepoints included
- * by module.h may break the build.
- */
-#include <linux/module.h>
 
-#undef TRACE_EVENT_MAP
-#define TRACE_EVENT_MAP(name, map, proto, args, tstruct, assign, print)
+#undef LTTNG_TRACEPOINT_EVENT_MAP
+#define LTTNG_TRACEPOINT_EVENT_MAP(name, map, proto, args, tstruct, assign, print)
+
+#undef LTTNG_TRACEPOINT_EVENT_MAP_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_MAP_NOARGS(name, map, tstruct, assign, print)
 
-#undef TRACE_EVENT_CONDITION_MAP
-#define TRACE_EVENT_CONDITION_MAP(name, map, proto, args, cond, tstruct, assign, print) \
-	TRACE_EVENT(name,						\
+#undef LTTNG_TRACEPOINT_EVENT_CONDITION_MAP
+#define LTTNG_TRACEPOINT_EVENT_CONDITION_MAP(name, map, proto, args, cond, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT(name,					\
 		PARAMS(proto),						\
 		PARAMS(args),						\
 		PARAMS(tstruct),					\
 		PARAMS(assign),						\
 		PARAMS(print))
 
-#undef TRACE_EVENT_FN_MAP
-#define TRACE_EVENT_FN_MAP(name, map, proto, args, tstruct,		\
+#undef LTTNG_TRACEPOINT_EVENT_FN_MAP
+#define LTTNG_TRACEPOINT_EVENT_FN_MAP(name, map, proto, args, tstruct,	\
 		assign, print, reg, unreg)
 
-#undef DEFINE_EVENT_MAP
-#define DEFINE_EVENT_MAP(template, name, map, proto, args)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(template, name, map, proto, args)
 
-#undef DEFINE_EVENT_PRINT_MAP
-#define DEFINE_EVENT_PRINT_MAP(template, name, map, proto, args, print)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP(template, name, map, proto, args, print)
 
-#undef DEFINE_EVENT_CONDITION_MAP
-#define DEFINE_EVENT_CONDITION_MAP(template, name, map, proto, args, cond) \
-	DEFINE_EVENT(template, name, PARAMS(proto), PARAMS(args))
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION_MAP(template, name, map, proto, args, cond) \
+	LTTNG_TRACEPOINT_EVENT_INSTANCE(template, name, PARAMS(proto), PARAMS(args))
 
+#undef LTTNG_TRACEPOINT_EVENT
+#define LTTNG_TRACEPOINT_EVENT(name, proto, args, tstruct, assign, print)
 
-#undef TRACE_EVENT
-#define TRACE_EVENT(name, proto, args, tstruct, assign, print)
-
-#undef TRACE_EVENT_CONDITION
-#define TRACE_EVENT_CONDITION(name, proto, args, cond, tstruct, assign, print) \
-	TRACE_EVENT(name,						\
+#undef LTTNG_TRACEPOINT_EVENT_CONDITION
+#define LTTNG_TRACEPOINT_EVENT_CONDITION(name, proto, args, cond, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT(name,					\
 		PARAMS(proto),						\
 		PARAMS(args),						\
 		PARAMS(tstruct),					\
 		PARAMS(assign),						\
 		PARAMS(print))
 
-#undef LTTNG_TRACE_EVENT
-#define LTTNG_TRACE_EVENT(name, proto, args, _locvar, _code, tstruct, assign, print)
+#undef LTTNG_TRACEPOINT_EVENT_CODE
+#define LTTNG_TRACEPOINT_EVENT_CODE(name, proto, args, _locvar, _code, tstruct, assign, print)
 
-#undef TRACE_EVENT_FN
-#define TRACE_EVENT_FN(name, proto, args, tstruct,		\
+#undef LTTNG_TRACEPOINT_EVENT_FN
+#define LTTNG_TRACEPOINT_EVENT_FN(name, proto, args, tstruct,		\
 		assign, print, reg, unreg)
 
-#undef DEFINE_EVENT
-#define DEFINE_EVENT(template, name, proto, args)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE(template, name, proto, args)
 
-#undef DEFINE_EVENT_PRINT
-#define DEFINE_EVENT_PRINT(template, name, proto, args, print)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS(template, name)
 
-#undef DEFINE_EVENT_CONDITION
-#define DEFINE_EVENT_CONDITION(template, name, proto, args, cond) \
-	DEFINE_EVENT(template, name, PARAMS(proto), PARAMS(args))
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(template, name, map)
 
-#undef DECLARE_TRACE
-#define DECLARE_TRACE(name, proto, args)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT(template, name, proto, args, print)
+
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION(template, name, proto, args, cond) \
+	LTTNG_TRACEPOINT_EVENT_INSTANCE(template, name, PARAMS(proto), PARAMS(args))
 
 #undef TRACE_INCLUDE
 #undef __TRACE_INCLUDE
@@ -142,24 +137,25 @@
 #include "lttng-events.h"
 #endif
 
-#undef TRACE_EVENT
-#undef TRACE_EVENT_FN
-#undef TRACE_EVENT_CONDITION
-#undef DEFINE_EVENT
-#undef DEFINE_EVENT_PRINT
-#undef DEFINE_EVENT_CONDITION
-#undef TRACE_EVENT_MAP
-#undef TRACE_EVENT_FN_MAP
-#undef TRACE_EVENT_CONDITION_MAP
-#undef DECLARE_EVENT_CLASS
-#undef DEFINE_EVENT_MAP
-#undef DEFINE_EVENT_PRINT_MAP
-#undef DEFINE_EVENT_CONDITION_MAP
+#undef LTTNG_TRACEPOINT_EVENT
+#undef LTTNG_TRACEPOINT_EVENT_FN
+#undef LTTNG_TRACEPOINT_EVENT_CONDITION
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION
+#undef LTTNG_TRACEPOINT_EVENT_MAP
+#undef LTTNG_TRACEPOINT_EVENT_FN_MAP
+#undef LTTNG_TRACEPOINT_EVENT_CONDITION_MAP
+#undef LTTNG_TRACEPOINT_EVENT_CLASS
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION_MAP
+#undef LTTNG_TRACEPOINT_EVENT_CODE
+#undef LTTNG_TRACEPOINT_EVENT_MAP_NOARGS
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS
 #undef TRACE_HEADER_MULTI_READ
 
-#undef LTTNG_TRACE_EVENT
-#define LTTNG_TRACE_EVENT(name, proto, args, _locvar, _code, tstruct, assign, print)
-
 /* Only undef what we defined in this file */
 #ifdef UNDEF_TRACE_INCLUDE_FILE
 # undef TRACE_INCLUDE_FILE
@@ -171,6 +167,11 @@
 # undef UNDEF_TRACE_INCLUDE_PATH
 #endif
 
+/*
+ * We want to re-include lttng-tracepoint-event.h for a following probe.
+ */
+#undef LTTNG_TRACEPOINT_EVENT_H
+
 /* We may be processing more files */
 #define CREATE_TRACE_POINTS
 
diff --git a/drivers/staging/lttng/probes/lttng-events-reset.h b/drivers/staging/lttng/probes/lttng-events-reset.h
index be400fa..085b61c 100644
--- a/drivers/staging/lttng/probes/lttng-events-reset.h
+++ b/drivers/staging/lttng/probes/lttng-events-reset.h
@@ -89,17 +89,14 @@
 #undef TP_printk
 #define TP_printk(args...)
 
-#undef LTTNG_DECLARE_EVENT_CLASS
-#define LTTNG_DECLARE_EVENT_CLASS(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print)
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print)
 
-#undef LTTNG_DECLARE_EVENT_CLASS_NOARGS
-#define LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)
 
-#undef DEFINE_EVENT_MAP
-#define DEFINE_EVENT_MAP(_template, _name, _map, _proto, _args)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(_template, _name, _map, _proto, _args)
 
-#undef DEFINE_EVENT_MAP_NOARGS
-#define DEFINE_EVENT_MAP_NOARGS(_template, _name, _map)
-
-#undef TRACE_EVENT_FLAGS
-#define TRACE_EVENT_FLAGS(name, value)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(_template, _name, _map)
diff --git a/drivers/staging/lttng/probes/lttng-events.h b/drivers/staging/lttng/probes/lttng-events.h
index 62ed636..616850f 100644
--- a/drivers/staging/lttng/probes/lttng-events.h
+++ b/drivers/staging/lttng/probes/lttng-events.h
@@ -36,27 +36,27 @@
  * LTTng name mapping macros. LTTng remaps some of the kernel events to
  * enforce name-spacing.
  */
-#undef TRACE_EVENT_MAP
-#define TRACE_EVENT_MAP(name, map, proto, args, tstruct, assign, print)	\
-	DECLARE_EVENT_CLASS(map,					\
+#undef LTTNG_TRACEPOINT_EVENT_MAP
+#define LTTNG_TRACEPOINT_EVENT_MAP(name, map, proto, args, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT_CLASS(map,				\
 			     PARAMS(proto),				\
 			     PARAMS(args),				\
 			     PARAMS(tstruct),				\
 			     PARAMS(assign),				\
 			     PARAMS(print))				\
-	DEFINE_EVENT_MAP(map, name, map, PARAMS(proto), PARAMS(args))
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(map, name, map, PARAMS(proto), PARAMS(args))
 
-#undef TRACE_EVENT_MAP_NOARGS
-#define TRACE_EVENT_MAP_NOARGS(name, map, tstruct, assign, print)	\
-	DECLARE_EVENT_CLASS_NOARGS(map,					\
+#undef LTTNG_TRACEPOINT_EVENT_MAP_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_MAP_NOARGS(name, map, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS(map,			\
 			     PARAMS(tstruct),				\
 			     PARAMS(assign),				\
 			     PARAMS(print))				\
-	DEFINE_EVENT_MAP_NOARGS(map, name, map)
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(map, name, map)
 
-#undef LTTNG_TRACE_EVENT
-#define LTTNG_TRACE_EVENT(name, proto, args, _locvar, _code, tstruct, assign, print) \
-	LTTNG_DECLARE_EVENT_CLASS(name,					\
+#undef LTTNG_TRACEPOINT_EVENT_CODE
+#define LTTNG_TRACEPOINT_EVENT_CODE(name, proto, args, _locvar, _code, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT_CLASS_CODE(name,				\
 			     PARAMS(proto),				\
 			     PARAMS(args),				\
 			     PARAMS(_locvar),				\
@@ -64,22 +64,23 @@
 			     PARAMS(tstruct),				\
 			     PARAMS(assign),				\
 			     PARAMS(print))				\
-	DEFINE_EVENT_MAP(name, name, name, PARAMS(proto), PARAMS(args))
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(name, name, name, PARAMS(proto), PARAMS(args))
 
-#undef DEFINE_EVENT_PRINT_MAP
-#define DEFINE_EVENT_PRINT_MAP(template, name, map, proto, args, print)	\
-	DEFINE_EVENT_MAP(template, name, map, PARAMS(proto), PARAMS(args))
+
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP(template, name, map, proto, args, print) \
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(template, name, map, PARAMS(proto), PARAMS(args))
 
 /* Callbacks are meaningless to LTTng. */
-#undef TRACE_EVENT_FN_MAP
-#define TRACE_EVENT_FN_MAP(name, map, proto, args, tstruct,		\
+#undef LTTNG_TRACEPOINT_EVENT_FN_MAP
+#define LTTNG_TRACEPOINT_EVENT_FN_MAP(name, map, proto, args, tstruct,	\
 		assign, print, reg, unreg)				\
-	TRACE_EVENT_MAP(name, map, PARAMS(proto), PARAMS(args),		\
-		PARAMS(tstruct), PARAMS(assign), PARAMS(print))		\
+	LTTNG_TRACEPOINT_EVENT_MAP(name, map, PARAMS(proto), PARAMS(args), \
+		PARAMS(tstruct), PARAMS(assign), PARAMS(print))
 
-#undef TRACE_EVENT_CONDITION_MAP
-#define TRACE_EVENT_CONDITION_MAP(name, map, proto, args, cond, tstruct, assign, print) \
-	TRACE_EVENT_MAP(name, map,					\
+#undef LTTNG_TRACEPOINT_EVENT_CONDITION_MAP
+#define LTTNG_TRACEPOINT_EVENT_CONDITION_MAP(name, map, proto, args, cond, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT_MAP(name, map,				\
 		PARAMS(proto),						\
 		PARAMS(args),						\
 		PARAMS(tstruct),					\
@@ -87,54 +88,55 @@
 		PARAMS(print))
 
 /*
- * DECLARE_EVENT_CLASS can be used to add a generic function
- * handlers for events. That is, if all events have the same
- * parameters and just have distinct trace points.
- * Each tracepoint can be defined with DEFINE_EVENT and that
- * will map the DECLARE_EVENT_CLASS to the tracepoint.
+ * LTTNG_TRACEPOINT_EVENT_CLASS can be used to add a generic function
+ * handlers for events. That is, if all events have the same parameters
+ * and just have distinct trace points.  Each tracepoint can be defined
+ * with LTTNG_TRACEPOINT_EVENT_INSTANCE and that will map the
+ * LTTNG_TRACEPOINT_EVENT_CLASS to the tracepoint.
  *
- * TRACE_EVENT is a one to one mapping between tracepoint and template.
+ * LTTNG_TRACEPOINT_EVENT is a one to one mapping between tracepoint and
+ * template.
  */
 
-#undef TRACE_EVENT
-#define TRACE_EVENT(name, proto, args, tstruct, assign, print)	\
-	TRACE_EVENT_MAP(name, name,				\
-			PARAMS(proto),				\
-			PARAMS(args),				\
-			PARAMS(tstruct),			\
-			PARAMS(assign),				\
+#undef LTTNG_TRACEPOINT_EVENT
+#define LTTNG_TRACEPOINT_EVENT(name, proto, args, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT_MAP(name, name,				\
+			PARAMS(proto),					\
+			PARAMS(args),					\
+			PARAMS(tstruct),				\
+			PARAMS(assign),					\
 			PARAMS(print))
 
-#undef TRACE_EVENT_NOARGS
-#define TRACE_EVENT_NOARGS(name, tstruct, assign, print)	\
-	TRACE_EVENT_MAP_NOARGS(name, name,			\
-			PARAMS(tstruct),			\
-			PARAMS(assign),				\
+#undef LTTNG_TRACEPOINT_EVENT_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_NOARGS(name, tstruct, assign, print)	\
+	LTTNG_TRACEPOINT_EVENT_MAP_NOARGS(name, name,			\
+			PARAMS(tstruct),				\
+			PARAMS(assign),					\
 			PARAMS(print))
 
-#undef DEFINE_EVENT_PRINT
-#define DEFINE_EVENT_PRINT(template, name, proto, args, print)	\
-	DEFINE_EVENT_PRINT_MAP(template, name, name,		\
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT(template, name, proto, args, print) \
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP(template, name, name,	\
 			PARAMS(proto), PARAMS(args), PARAMS(print_))
 
-#undef TRACE_EVENT_FN
-#define TRACE_EVENT_FN(name, proto, args, tstruct,			\
+#undef LTTNG_TRACEPOINT_EVENT_FN
+#define LTTNG_TRACEPOINT_EVENT_FN(name, proto, args, tstruct,		\
 		assign, print, reg, unreg)				\
-	TRACE_EVENT_FN_MAP(name, name, PARAMS(proto), PARAMS(args),	\
+	LTTNG_TRACEPOINT_EVENT_FN_MAP(name, name, PARAMS(proto), PARAMS(args), \
 		PARAMS(tstruct), PARAMS(assign), PARAMS(print),		\
 		PARAMS(reg), PARAMS(unreg))				\
 
-#undef DEFINE_EVENT
-#define DEFINE_EVENT(template, name, proto, args)			\
-	DEFINE_EVENT_MAP(template, name, name, PARAMS(proto), PARAMS(args))
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE(template, name, proto, args)	\
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(template, name, name, PARAMS(proto), PARAMS(args))
 
-#undef DEFINE_EVENT_NOARGS
-#define DEFINE_EVENT_NOARGS(template, name)				\
-	DEFINE_EVENT_MAP_NOARGS(template, name, name)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS(template, name)	\
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(template, name, name)
 
-#undef TRACE_EVENT_CONDITION
-#define TRACE_EVENT_CONDITION(name, proto, args, cond, tstruct, assign, print) \
-	TRACE_EVENT_CONDITION_MAP(name, name,				\
+#undef LTTNG_TRACEPOINT_EVENT_CONDITION
+#define LTTNG_TRACEPOINT_EVENT_CONDITION(name, proto, args, cond, tstruct, assign, print) \
+	LTTNG_TRACEPOINT_EVENT_CONDITION_MAP(name, name,		\
 		PARAMS(proto),						\
 		PARAMS(args),						\
 		PARAMS(cond),						\
@@ -142,14 +144,14 @@
 		PARAMS(assign),						\
 		PARAMS(print))
 
-#undef DECLARE_EVENT_CLASS
-#define DECLARE_EVENT_CLASS(_name, _proto, _args, _tstruct, _assign, _print)  \
-	LTTNG_DECLARE_EVENT_CLASS(_name, PARAMS(_proto), PARAMS(_args), , , \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS
+#define LTTNG_TRACEPOINT_EVENT_CLASS(_name, _proto, _args, _tstruct, _assign, _print) \
+	LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, PARAMS(_proto), PARAMS(_args), , , \
 		PARAMS(_tstruct), PARAMS(_assign), PARAMS(_print))
 
-#undef DECLARE_EVENT_CLASS_NOARGS
-#define DECLARE_EVENT_CLASS_NOARGS(_name, _tstruct, _assign, _print)	\
-	LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, , , PARAMS(_tstruct),	\
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_NOARGS(_name, _tstruct, _assign, _print) \
+	LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, , , PARAMS(_tstruct), \
 		PARAMS(_assign), PARAMS(_print))
 
 
@@ -157,8 +159,8 @@
  * Stage 1 of the trace events.
  *
  * Create dummy trace calls for each events, verifying that the LTTng module
- * TRACE_EVENT headers match the kernel arguments. Will be optimized out by the
- * compiler.
+ * instrumentation headers match the kernel arguments. Will be optimized
+ * out by the compiler.
  */
 
 #include "lttng-events-reset.h"	/* Reset all macros within TRACE_EVENT */
@@ -169,12 +171,12 @@
 #undef TP_ARGS
 #define TP_ARGS(args...) args
 
-#undef DEFINE_EVENT_MAP
-#define DEFINE_EVENT_MAP(_template, _name, _map, _proto, _args)		\
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(_template, _name, _map, _proto, _args) \
 void trace_##_name(_proto);
 
-#undef DEFINE_EVENT_MAP_NOARGS
-#define DEFINE_EVENT_MAP_NOARGS(_template, _name, _map)			\
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(_template, _name, _map) \
 void trace_##_name(void *__data);
 
 #include TRACE_INCLUDE(TRACE_INCLUDE_FILE)
@@ -309,15 +311,15 @@ void trace_##_name(void *__data);
 #undef TP_STRUCT__entry
 #define TP_STRUCT__entry(args...) args	/* Only one used in this phase */
 
-#undef LTTNG_DECLARE_EVENT_CLASS_NOARGS
-#define LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
 	static const struct lttng_event_field __event_fields___##_name[] = { \
 		_tstruct						     \
 	};
 
-#undef LTTNG_DECLARE_EVENT_CLASS
-#define LTTNG_DECLARE_EVENT_CLASS(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
-	LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, PARAMS(_tstruct), PARAMS(_assign), \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
+	LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, PARAMS(_tstruct), PARAMS(_assign), \
 			PARAMS(_print))
 
 #include TRACE_INCLUDE(TRACE_INCLUDE_FILE)
@@ -333,12 +335,12 @@ void trace_##_name(void *__data);
 #undef TP_PROTO
 #define TP_PROTO(args...) args
 
-#undef LTTNG_DECLARE_EVENT_CLASS
-#define LTTNG_DECLARE_EVENT_CLASS(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
 static void __event_probe__##_name(void *__data, _proto);
 
-#undef LTTNG_DECLARE_EVENT_CLASS_NOARGS
-#define LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
 static void __event_probe__##_name(void *__data);
 
 #include TRACE_INCLUDE(TRACE_INCLUDE_FILE)
@@ -357,8 +359,8 @@ static void __event_probe__##_name(void *__data);
 #define TP_PROBE_CB(_template)	&__event_probe__##_template
 #endif
 
-#undef DEFINE_EVENT_MAP_NOARGS
-#define DEFINE_EVENT_MAP_NOARGS(_template, _name, _map)			\
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(_template, _name, _map)	\
 static const struct lttng_event_desc __event_desc___##_map = {		\
 	.fields = __event_fields___##_template,		     		\
 	.name = #_map,					     		\
@@ -368,9 +370,9 @@ static const struct lttng_event_desc __event_desc___##_map = {		\
 	.owner = THIS_MODULE,				     		\
 };
 
-#undef DEFINE_EVENT_MAP
-#define DEFINE_EVENT_MAP(_template, _name, _map, _proto, _args)		\
-	DEFINE_EVENT_MAP_NOARGS(_template, _name, _map)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(_template, _name, _map, _proto, _args) \
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(_template, _name, _map)
 
 #include TRACE_INCLUDE(TRACE_INCLUDE_FILE)
 
@@ -385,13 +387,13 @@ static const struct lttng_event_desc __event_desc___##_map = {		\
 
 #include "lttng-events-reset.h"	/* Reset all macros within TRACE_EVENT */
 
-#undef DEFINE_EVENT_MAP_NOARGS
-#define DEFINE_EVENT_MAP_NOARGS(_template, _name, _map)			       \
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(_template, _name, _map) \
 		&__event_desc___##_map,
 
-#undef DEFINE_EVENT_MAP
-#define DEFINE_EVENT_MAP(_template, _name, _map, _proto, _args)		       \
-	DEFINE_EVENT_MAP_NOARGS(_template, _name, _map)
+#undef LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(_template, _name, _map, _proto, _args) \
+	LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(_template, _name, _map)
 
 #define TP_ID1(_token, _system)	_token##_system
 #define TP_ID(_token, _system)	TP_ID1(_token, _system)
@@ -485,8 +487,8 @@ static __used struct lttng_probe_desc TP_ID(__probe_desc___, TRACE_SYSTEM) = {
 #undef TP_locvar
 #define TP_locvar(...)	__VA_ARGS__
 
-#undef LTTNG_DECLARE_EVENT_CLASS
-#define LTTNG_DECLARE_EVENT_CLASS(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print)  \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
 static inline size_t __event_get_size__##_name(size_t *__dynamic_len,	      \
 		void *__tp_locvar, _proto)				      \
 {									      \
@@ -498,8 +500,8 @@ static inline size_t __event_get_size__##_name(size_t *__dynamic_len,	      \
 	return __event_len;						      \
 }
 
-#undef LTTNG_DECLARE_EVENT_CLASS_NOARGS
-#define LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)  \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
 static inline size_t __event_get_size__##_name(size_t *__dynamic_len,	      \
 		void *__tp_locvar)					      \
 {									      \
@@ -555,9 +557,9 @@ static inline size_t __event_get_size__##_name(size_t *__dynamic_len,	      \
 #undef TP_locvar
 #define TP_locvar(...)	__VA_ARGS__
 
-#undef LTTNG_DECLARE_EVENT_CLASS
-#define LTTNG_DECLARE_EVENT_CLASS(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print)  \
-static inline size_t __event_get_align__##_name(void *__tp_locvar, _proto) \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
+static inline size_t __event_get_align__##_name(void *__tp_locvar, _proto)    \
 {									      \
 	size_t __event_align = 1;					      \
 	struct { _locvar } *tp_locvar __attribute__((unused)) = __tp_locvar;  \
@@ -566,8 +568,8 @@ static inline size_t __event_get_align__##_name(void *__tp_locvar, _proto) \
 	return __event_align;						      \
 }
 
-#undef LTTNG_DECLARE_EVENT_CLASS_NOARGS
-#define LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)  \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
 static inline size_t __event_get_align__##_name(void *__tp_locvar)	      \
 {									      \
 	size_t __event_align = 1;					      \
@@ -615,15 +617,15 @@ static inline size_t __event_get_align__##_name(void *__tp_locvar)	      \
 #undef TP_STRUCT__entry
 #define TP_STRUCT__entry(args...) args
 
-#undef LTTNG_DECLARE_EVENT_CLASS_NOARGS
-#define LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)  \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
 struct __event_typemap__##_name {					      \
 	_tstruct							      \
 };
 
-#undef LTTNG_DECLARE_EVENT_CLASS
-#define LTTNG_DECLARE_EVENT_CLASS(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print)  \
-	LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
+	LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)
 
 #include TRACE_INCLUDE(TRACE_INCLUDE_FILE)
 
@@ -824,8 +826,8 @@ __assign_##dest:							\
  * __dynamic_array_enc_ext_2() and tp_memcpy_dyn_2(), which are the
  * worse case, needing 2 entries per field.
  */
-#undef LTTNG_DECLARE_EVENT_CLASS
-#define LTTNG_DECLARE_EVENT_CLASS(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print) \
 static void __event_probe__##_name(void *__data, _proto)		      \
 {									      \
 	struct probe_local_vars { _locvar };				      \
@@ -866,8 +868,8 @@ static void __event_probe__##_name(void *__data, _proto)		      \
 	_assign								      \
 }
 
-#undef LTTNG_DECLARE_EVENT_CLASS_NOARGS
-#define LTTNG_DECLARE_EVENT_CLASS_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
+#undef LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print) \
 static void __event_probe__##_name(void *__data)			      \
 {									      \
 	struct probe_local_vars { _locvar };				      \
@@ -950,4 +952,3 @@ module_exit_eval(__lttng_events_exit__, TRACE_SYSTEM);
 
 #undef TP_PROTO
 #undef TP_ARGS
-#undef TRACE_EVENT_FLAGS
diff --git a/drivers/staging/lttng/probes/lttng-tracepoint-event.h b/drivers/staging/lttng/probes/lttng-tracepoint-event.h
new file mode 100644
index 0000000..c2ecb62
--- /dev/null
+++ b/drivers/staging/lttng/probes/lttng-tracepoint-event.h
@@ -0,0 +1,72 @@
+#ifndef LTTNG_TRACEPOINT_EVENT_H
+#define LTTNG_TRACEPOINT_EVENT_H
+
+/*
+ * lttng-tracepoint-event.h
+ *
+ * Copyright (C) 2014 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; only
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <linux/tracepoint.h>
+
+/*
+ * If code defines LTTNG_INSTRUMENTATION before including the instrumentation
+ * header, generate the instrumentation static inlines. Else, it means
+ * we are a probe for the Linux kernel, and it is the probe responsibility
+ * to have already included the Linux kernel instrumentation header.
+ */
+#ifdef LTTNG_INSTRUMENTATION
+#define _LTTNG_INSTRUMENTATION(...)	__VA_ARGS__
+#else
+#define _LTTNG_INSTRUMENTATION(...)
+#endif
+
+#define LTTNG_TRACEPOINT_EVENT(name, proto, args, struct, assign, print) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_CODE(name, proto, args, _locvar, _code, tstruct, assign, print) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_MAP(name, map, proto, args, tstruct, assign, print) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_FN(name, proto, args, struct, assign, print, reg, unreg) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_FN_MAP(name, map, proto, args, tstruct, assign, print, reg, unreg) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_CONDITION(name, proto, args, cond, struct, assign, print) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_MAP_NOARGS(name, map, struct, assign, print) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE_NOARGS(name))
+
+#define LTTNG_TRACEPOINT_EVENT_CLASS(name, proto, args, tstruct, assign, print)
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE(_name, _proto, _args, _locvar, _code, _tstruct, _assign, _print)
+#define LTTNG_TRACEPOINT_EVENT_CLASS_CODE_NOARGS(_name, _locvar, _code, _tstruct, _assign, _print)
+
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE(template, name, proto, args) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_NOARGS(template, name) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE_NOARGS(name))
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT(template, name, proto, args, print) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_PRINT_MAP(template, name, map, proto, args, print) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_CONDITION(template, name, proto, args, cond) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP(_template, _name, _map, _proto, _args) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE(name, PARAMS(proto), PARAMS(args)))
+#define LTTNG_TRACEPOINT_EVENT_INSTANCE_MAP_NOARGS(_template, _name, _map) \
+	_LTTNG_INSTRUMENTATION(DECLARE_TRACE_NOARGS(name))
+
+#endif /* LTTNG_TRACEPOINT_EVENT_H */
diff --git a/drivers/staging/lttng/probes/lttng.c b/drivers/staging/lttng/probes/lttng.c
index 65f9061..e1033d6 100644
--- a/drivers/staging/lttng/probes/lttng.c
+++ b/drivers/staging/lttng/probes/lttng.c
@@ -36,6 +36,7 @@
 #define CREATE_TRACE_POINTS
 #define TRACE_INCLUDE_PATH ../instrumentation/events/lttng-module
 #define TRACE_INCLUDE_FILE lttng
+#define LTTNG_INSTRUMENTATION
 
 #include "../instrumentation/events/lttng-module/lttng.h"
 
-- 
2.0.2

