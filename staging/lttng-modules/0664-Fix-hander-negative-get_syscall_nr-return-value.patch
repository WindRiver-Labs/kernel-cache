From 90d8771aeb2ae3caa8da136db8a818376e3186c1 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Mon, 29 Sep 2014 13:29:12 -0400
Subject: [PATCH 664/757] Fix: hander negative get_syscall_nr return value

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../instrumentation/syscalls/headers/syscalls_unknown.h  | 16 ++++++++--------
 drivers/staging/lttng/lttng-syscalls.c                   | 14 +++++++-------
 2 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h b/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h
index 6ff640e..7868f85 100644
--- a/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h
+++ b/drivers/staging/lttng/instrumentation/syscalls/headers/syscalls_unknown.h
@@ -10,10 +10,10 @@
 #define TP_PROBE_CB(_template)          &syscall_entry_probe
 
 LTTNG_TRACEPOINT_EVENT(syscall_entry_unknown,
-	TP_PROTO(unsigned int id, unsigned long *args),
+	TP_PROTO(int id, unsigned long *args),
 	TP_ARGS(id, args),
 	TP_STRUCT__entry(
-		__field(unsigned int, id)
+		__field(int, id)
 		__array(unsigned long, args, UNKNOWN_SYSCALL_NRARGS)
 	),
 	TP_fast_assign(
@@ -23,10 +23,10 @@ LTTNG_TRACEPOINT_EVENT(syscall_entry_unknown,
 	TP_printk()
 )
 LTTNG_TRACEPOINT_EVENT(compat_syscall_entry_unknown,
-	TP_PROTO(unsigned int id, unsigned long *args),
+	TP_PROTO(int id, unsigned long *args),
 	TP_ARGS(id, args),
 	TP_STRUCT__entry(
-		__field(unsigned int, id)
+		__field(int, id)
 		__array(unsigned long, args, UNKNOWN_SYSCALL_NRARGS)
 	),
 	TP_fast_assign(
@@ -40,10 +40,10 @@ LTTNG_TRACEPOINT_EVENT(compat_syscall_entry_unknown,
 #define TP_PROBE_CB(_template)          &syscall_exit_probe
 
 LTTNG_TRACEPOINT_EVENT(syscall_exit_unknown,
-	TP_PROTO(unsigned int id, long ret, unsigned long *args),
+	TP_PROTO(int id, long ret, unsigned long *args),
 	TP_ARGS(id, ret, args),
 	TP_STRUCT__entry(
-		__field(unsigned int, id)
+		__field(int, id)
 		__field(long, ret)
 		__array(unsigned long, args, UNKNOWN_SYSCALL_NRARGS)
 	),
@@ -55,10 +55,10 @@ LTTNG_TRACEPOINT_EVENT(syscall_exit_unknown,
 	TP_printk()
 )
 LTTNG_TRACEPOINT_EVENT(compat_syscall_exit_unknown,
-	TP_PROTO(unsigned int id, long ret, unsigned long *args),
+	TP_PROTO(int id, long ret, unsigned long *args),
 	TP_ARGS(id, ret, args),
 	TP_STRUCT__entry(
-		__field(unsigned int, id)
+		__field(int, id)
 		__field(long, ret)
 		__array(unsigned long, args, UNKNOWN_SYSCALL_NRARGS)
 	),
diff --git a/drivers/staging/lttng/lttng-syscalls.c b/drivers/staging/lttng/lttng-syscalls.c
index a4a8ed4..5501997 100644
--- a/drivers/staging/lttng/lttng-syscalls.c
+++ b/drivers/staging/lttng/lttng-syscalls.c
@@ -375,7 +375,7 @@ void syscall_entry_probe(void *__data, struct pt_regs *regs, long id)
 
 		filter = rcu_dereference(chan->sc_filter);
 		if (filter) {
-			if (id >= NR_compat_syscalls
+			if (id < 0 || id >= NR_compat_syscalls
 				|| !test_bit(id, filter->sc_compat)) {
 				/* System call filtered out. */
 				return;
@@ -389,7 +389,7 @@ void syscall_entry_probe(void *__data, struct pt_regs *regs, long id)
 
 		filter = rcu_dereference(chan->sc_filter);
 		if (filter) {
-			if (id >= NR_syscalls
+			if (id < 0 || id >= NR_syscalls
 				|| !test_bit(id, filter->sc)) {
 				/* System call filtered out. */
 				return;
@@ -399,7 +399,7 @@ void syscall_entry_probe(void *__data, struct pt_regs *regs, long id)
 		table_len = ARRAY_SIZE(sc_table);
 		unknown_event = chan->sc_unknown;
 	}
-	if (unlikely(id >= table_len)) {
+	if (unlikely(id < 0 || id >= table_len)) {
 		syscall_entry_unknown(unknown_event, regs, id);
 		return;
 	}
@@ -503,7 +503,7 @@ void syscall_entry_probe(void *__data, struct pt_regs *regs, long id)
 }
 
 static void syscall_exit_unknown(struct lttng_event *event,
-	struct pt_regs *regs, unsigned int id, long ret)
+	struct pt_regs *regs, int id, long ret)
 {
 	unsigned long args[UNKNOWN_SYSCALL_NRARGS];
 
@@ -529,7 +529,7 @@ void syscall_exit_probe(void *__data, struct pt_regs *regs, long ret)
 
 		filter = rcu_dereference(chan->sc_filter);
 		if (filter) {
-			if (id >= NR_compat_syscalls
+			if (id < 0 || id >= NR_compat_syscalls
 				|| !test_bit(id, filter->sc_compat)) {
 				/* System call filtered out. */
 				return;
@@ -543,7 +543,7 @@ void syscall_exit_probe(void *__data, struct pt_regs *regs, long ret)
 
 		filter = rcu_dereference(chan->sc_filter);
 		if (filter) {
-			if (id >= NR_syscalls
+			if (id < 0 || id >= NR_syscalls
 				|| !test_bit(id, filter->sc)) {
 				/* System call filtered out. */
 				return;
@@ -553,7 +553,7 @@ void syscall_exit_probe(void *__data, struct pt_regs *regs, long ret)
 		table_len = ARRAY_SIZE(sc_exit_table);
 		unknown_event = chan->sc_exit_unknown;
 	}
-	if (unlikely(id >= table_len)) {
+	if (unlikely(id < 0 || id >= table_len)) {
 		syscall_exit_unknown(unknown_event, regs, id, ret);
 		return;
 	}
-- 
2.0.2

