From 5e0cb595d8c02c8ba769d6bd742eccba0e711097 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 1 Sep 2016 18:08:15 -0400
Subject: [PATCH 933/933] Fix: handle large number of pages or subbuffers per
 buffer

Do no trigger kernel console warnings when we try to allocate too many
pages, or a too large kmalloc area for page array (within a subbuffer),
or a sub-buffer array (within a buffer).

Use vmalloc/vfree for the "pages" local variable used only during
allocation, which is an array of nr_subbuf * nr_pages_per_subbuf
pointers. This ensures we do not limit the overall buffer size due to
kmalloc limitations.

Fixes #1031

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../lttng/lib/ringbuffer/ring_buffer_backend.c     | 23 +++++++++++++---------
 .../lttng/lib/ringbuffer/ring_buffer_frontend.c    |  6 ++++--
 2 files changed, 18 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/lttng/lib/ringbuffer/ring_buffer_backend.c b/drivers/staging/lttng/lib/ringbuffer/ring_buffer_backend.c
index c7f2fe9..27554a1 100644
--- a/drivers/staging/lttng/lib/ringbuffer/ring_buffer_backend.c
+++ b/drivers/staging/lttng/lib/ringbuffer/ring_buffer_backend.c
@@ -27,6 +27,7 @@
 #include <linux/slab.h>
 #include <linux/cpu.h>
 #include <linux/mm.h>
+#include <linux/vmalloc.h>
 
 #include <wrapper/vmalloc.h>	/* for wrapper_vmalloc_sync_all() */
 #include <wrapper/ringbuffer/config.h>
@@ -64,22 +65,23 @@ int lib_ring_buffer_backend_allocate(const struct lib_ring_buffer_config *config
 		num_subbuf_alloc++;
 	}
 
-	pages = kmalloc_node(ALIGN(sizeof(*pages) * num_pages,
+	pages = vmalloc_node(ALIGN(sizeof(*pages) * num_pages,
 				   1 << INTERNODE_CACHE_SHIFT),
-			GFP_KERNEL, cpu_to_node(max(bufb->cpu, 0)));
+			cpu_to_node(max(bufb->cpu, 0)));
 	if (unlikely(!pages))
 		goto pages_error;
 
 	bufb->array = kmalloc_node(ALIGN(sizeof(*bufb->array)
 					 * num_subbuf_alloc,
 				  1 << INTERNODE_CACHE_SHIFT),
-			GFP_KERNEL, cpu_to_node(max(bufb->cpu, 0)));
+			GFP_KERNEL | __GFP_NOWARN,
+			cpu_to_node(max(bufb->cpu, 0)));
 	if (unlikely(!bufb->array))
 		goto array_error;
 
 	for (i = 0; i < num_pages; i++) {
 		pages[i] = alloc_pages_node(cpu_to_node(max(bufb->cpu, 0)),
-					    GFP_KERNEL | __GFP_ZERO, 0);
+				GFP_KERNEL | __GFP_NOWARN | __GFP_ZERO, 0);
 		if (unlikely(!pages[i]))
 			goto depopulate;
 	}
@@ -93,7 +95,8 @@ int lib_ring_buffer_backend_allocate(const struct lib_ring_buffer_config *config
 				sizeof(struct lib_ring_buffer_backend_page)
 				* num_pages_per_subbuf,
 				1 << INTERNODE_CACHE_SHIFT),
-				GFP_KERNEL, cpu_to_node(max(bufb->cpu, 0)));
+				GFP_KERNEL | __GFP_NOWARN,
+				cpu_to_node(max(bufb->cpu, 0)));
 		if (!bufb->array[i])
 			goto free_array;
 	}
@@ -103,7 +106,8 @@ int lib_ring_buffer_backend_allocate(const struct lib_ring_buffer_config *config
 				sizeof(struct lib_ring_buffer_backend_subbuffer)
 				* num_subbuf,
 				1 << INTERNODE_CACHE_SHIFT),
-				GFP_KERNEL, cpu_to_node(max(bufb->cpu, 0)));
+				GFP_KERNEL | __GFP_NOWARN,
+				cpu_to_node(max(bufb->cpu, 0)));
 	if (unlikely(!bufb->buf_wsb))
 		goto free_array;
 
@@ -122,7 +126,8 @@ int lib_ring_buffer_backend_allocate(const struct lib_ring_buffer_config *config
 				sizeof(struct lib_ring_buffer_backend_counts)
 				* num_subbuf,
 				1 << INTERNODE_CACHE_SHIFT),
-			GFP_KERNEL, cpu_to_node(max(bufb->cpu, 0)));
+			GFP_KERNEL | __GFP_NOWARN,
+			cpu_to_node(max(bufb->cpu, 0)));
 	if (unlikely(!bufb->buf_cnt))
 		goto free_wsb;
 
@@ -145,7 +150,7 @@ int lib_ring_buffer_backend_allocate(const struct lib_ring_buffer_config *config
 	 * will not fault.
 	 */
 	wrapper_vmalloc_sync_all();
-	kfree(pages);
+	vfree(pages);
 	return 0;
 
 free_wsb:
@@ -159,7 +164,7 @@ depopulate:
 		__free_page(pages[i]);
 	kfree(bufb->array);
 array_error:
-	kfree(pages);
+	vfree(pages);
 pages_error:
 	return -ENOMEM;
 }
diff --git a/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c b/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c
index 74af7c6..2ffe991 100644
--- a/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c
+++ b/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c
@@ -206,7 +206,8 @@ int lib_ring_buffer_create(struct lib_ring_buffer *buf,
 		kzalloc_node(ALIGN(sizeof(*buf->commit_hot)
 				   * chan->backend.num_subbuf,
 				   1 << INTERNODE_CACHE_SHIFT),
-			GFP_KERNEL, cpu_to_node(max(cpu, 0)));
+			GFP_KERNEL | __GFP_NOWARN,
+			cpu_to_node(max(cpu, 0)));
 	if (!buf->commit_hot) {
 		ret = -ENOMEM;
 		goto free_chanbuf;
@@ -216,7 +217,8 @@ int lib_ring_buffer_create(struct lib_ring_buffer *buf,
 		kzalloc_node(ALIGN(sizeof(*buf->commit_cold)
 				   * chan->backend.num_subbuf,
 				   1 << INTERNODE_CACHE_SHIFT),
-			GFP_KERNEL, cpu_to_node(max(cpu, 0)));
+			GFP_KERNEL | __GFP_NOWARN,
+			cpu_to_node(max(cpu, 0)));
 	if (!buf->commit_cold) {
 		ret = -ENOMEM;
 		goto free_commit;
-- 
2.0.2

