From dc5ac9eb539c7ce8a5f2de2f2e352eb225f18305 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Fri, 3 Jun 2011 15:59:12 -0400
Subject: [PATCH 168/625] Update perf counter ABI

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Signed-off-by: Jianchuan Wang <jianchuan.wang@windriver.com>
---
 drivers/staging/lttng2/Makefile                    |   4 +
 drivers/staging/lttng2/ltt-debugfs-abi.c           |   6 +-
 drivers/staging/lttng2/ltt-debugfs-abi.h           |   1 +
 drivers/staging/lttng2/ltt-events.h                |   4 +
 .../staging/lttng2/lttng-context-perf-counters.c   | 160 +++++++++++++++++++++
 drivers/staging/lttng2/probes/Makefile             |   4 -
 .../staging/lttng2/probes/lttng-perf-counters.c    | 150 -------------------
 7 files changed, 174 insertions(+), 155 deletions(-)
 create mode 100644 drivers/staging/lttng2/lttng-context-perf-counters.c
 delete mode 100644 drivers/staging/lttng2/probes/lttng-perf-counters.c

diff --git a/drivers/staging/lttng2/Makefile b/drivers/staging/lttng2/Makefile
index fa337a0..dc44fd4 100644
--- a/drivers/staging/lttng2/Makefile
+++ b/drivers/staging/lttng2/Makefile
@@ -15,6 +15,10 @@ ltt-relay-objs :=  ltt-events.o ltt-debugfs-abi.o \
 			lttng-context-pid.o lttng-context-comm.o \
 			lttng-context-prio.o lttng-context-nice.o
 
+ifneq ($(CONFIG_PERF_EVENTS),)
+ltt-relay-objs += lttng-context-perf-counters.o
+endif
+
 obj-m += probes/
 obj-m += lib/
 
diff --git a/drivers/staging/lttng2/ltt-debugfs-abi.c b/drivers/staging/lttng2/ltt-debugfs-abi.c
index e192474..1314c66 100644
--- a/drivers/staging/lttng2/ltt-debugfs-abi.c
+++ b/drivers/staging/lttng2/ltt-debugfs-abi.c
@@ -159,7 +159,11 @@ long lttng_abi_add_context(struct file *file,
 	case LTTNG_KERNEL_CONTEXT_NICE:
 		return lttng_add_nice_to_ctx(ctx);
 	case LTTNG_KERNEL_CONTEXT_PERF_COUNTER:
-		return -ENOSYS;
+		context_param.u.perf_counter.name[LTTNG_SYM_NAME_LEN - 1] = '\0';
+		return lttng_add_perf_counter_to_ctx(context_param.u.perf_counter.type,
+				context_param.u.perf_counter.config,
+				context_param.u.perf_counter.name,
+				ctx);
 	case LTTNG_KERNEL_CONTEXT_COMM:
 		return lttng_add_comm_to_ctx(ctx);
 	default:
diff --git a/drivers/staging/lttng2/ltt-debugfs-abi.h b/drivers/staging/lttng2/ltt-debugfs-abi.h
index d91c52d..87be71b 100644
--- a/drivers/staging/lttng2/ltt-debugfs-abi.h
+++ b/drivers/staging/lttng2/ltt-debugfs-abi.h
@@ -74,6 +74,7 @@ enum lttng_kernel_context_type {
 struct lttng_kernel_perf_counter_ctx {
 	uint32_t type;
 	uint64_t config;
+	char name[LTTNG_SYM_NAME_LEN];
 };
 
 struct lttng_kernel_context {
diff --git a/drivers/staging/lttng2/ltt-events.h b/drivers/staging/lttng2/ltt-events.h
index de6ae0e..6244e8c 100644
--- a/drivers/staging/lttng2/ltt-events.h
+++ b/drivers/staging/lttng2/ltt-events.h
@@ -278,6 +278,10 @@ int lttng_add_pid_to_ctx(struct lttng_ctx **ctx);
 int lttng_add_comm_to_ctx(struct lttng_ctx **ctx);
 int lttng_add_prio_to_ctx(struct lttng_ctx **ctx);
 int lttng_add_nice_to_ctx(struct lttng_ctx **ctx);
+int lttng_add_perf_counter_to_ctx(uint32_t type,
+				  uint64_t config,
+				  const char *name,
+				  struct lttng_ctx **ctx);
 
 #ifdef CONFIG_KPROBES
 int lttng_kprobes_register(const char *name,
diff --git a/drivers/staging/lttng2/lttng-context-perf-counters.c b/drivers/staging/lttng2/lttng-context-perf-counters.c
new file mode 100644
index 0000000..e9a5788
--- /dev/null
+++ b/drivers/staging/lttng2/lttng-context-perf-counters.c
@@ -0,0 +1,160 @@
+/*
+ * (C) Copyright	2009-2011 -
+ * 		Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * LTTng performance monitoring counters (perf-counters) integration module.
+ *
+ * Dual LGPL v2.1/GPL v2 license.
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/perf_event.h>
+#include <linux/list.h>
+#include <linux/string.h>
+#include "ltt-events.h"
+#include "wrapper/ringbuffer/frontend_types.h"
+#include "wrapper/vmalloc.h"
+#include "ltt-tracer.h"
+
+/*
+ * TODO: Add CPU hotplug support.
+ */
+
+static DEFINE_MUTEX(perf_counter_mutex);
+static LIST_HEAD(perf_counter_contexts);
+
+static
+size_t perf_counter_get_size(size_t offset)
+{
+	size_t size = 0;
+
+	size += lib_ring_buffer_align(offset, ltt_alignof(uint64_t));
+	size += sizeof(uint64_t);
+	return size;
+}
+
+static
+void perf_counter_record(struct lttng_ctx_field *field,
+			 struct lib_ring_buffer_ctx *ctx,
+			 struct ltt_channel *chan)
+{
+	struct perf_event *event;
+	uint64_t value;
+
+	event = field->u.perf_counter.e[ctx->cpu];
+	event->pmu->read(event);
+	value = local64_read(&event->count);
+	lib_ring_buffer_align_ctx(ctx, ltt_alignof(value));
+	chan->ops->event_write(ctx, &value, sizeof(value));
+}
+
+static
+void overflow_callback(struct perf_event *event, int nmi,
+		       struct perf_sample_data *data,
+		       struct pt_regs *regs)
+{
+}
+
+static
+void lttng_destroy_perf_counter_field(struct lttng_ctx_field *field)
+{
+	struct perf_event **events = field->u.perf_counter.e;
+	int cpu;
+
+	mutex_lock(&perf_counter_mutex);
+	list_del(&field->u.perf_counter.head);
+	for_each_online_cpu(cpu)
+		perf_event_release_kernel(events[cpu]);
+	mutex_unlock(&perf_counter_mutex);
+	kfree(field->event_field.name);
+	kfree(field->u.perf_counter.attr);
+	kfree(events);
+}
+
+int lttng_add_perf_counter_to_ctx(uint32_t type,
+				  uint64_t config,
+				  const char *name,
+				  struct lttng_ctx **ctx)
+{
+	struct lttng_ctx_field *field;
+	struct perf_event **events;
+	struct perf_event_attr *attr;
+	int ret;
+	int cpu;
+	char *name_alloc;
+
+	events = kzalloc(num_possible_cpus() * sizeof(*events), GFP_KERNEL);
+	if (!events)
+		return -ENOMEM;
+
+	attr = kzalloc(sizeof(*field->u.perf_counter.attr), GFP_KERNEL);
+	if (!attr) {
+		ret = -ENOMEM;
+		goto error_attr;
+	}
+
+	attr->type = type;
+	attr->config = config;
+	attr->size = sizeof(struct perf_event_attr);
+	attr->pinned = 1;
+	attr->disabled = 0;
+
+	mutex_lock(&perf_counter_mutex);
+
+	for_each_online_cpu(cpu) {
+		events[cpu] = perf_event_create_kernel_counter(attr,
+					cpu, NULL, overflow_callback);
+		if (!events[cpu]) {
+			ret = -EINVAL;
+			goto error;
+		}
+	}
+
+	name_alloc = kstrdup(name, GFP_KERNEL);
+	if (!field->event_field.name)
+		goto name_alloc_error;
+
+	field = lttng_append_context(ctx);
+	if (!field) {
+		ret = -ENOMEM;
+		goto error;
+	}
+	field->destroy = lttng_destroy_perf_counter_field;
+
+	field->event_field.name = name_alloc;
+	field->event_field.type.atype = atype_integer;
+	field->event_field.type.u.basic.integer.size = sizeof(unsigned long) * CHAR_BIT;
+	field->event_field.type.u.basic.integer.alignment = ltt_alignof(unsigned long) * CHAR_BIT;
+	field->event_field.type.u.basic.integer.signedness = is_signed_type(unsigned long);
+	field->event_field.type.u.basic.integer.reverse_byte_order = 0;
+	field->event_field.type.u.basic.integer.base = 10;
+	field->event_field.type.u.basic.integer.encoding = lttng_encode_none;
+	field->get_size = perf_counter_get_size;
+	field->record = perf_counter_record;
+	field->u.perf_counter.e = events;
+	field->u.perf_counter.attr = attr;
+
+	list_add(&field->u.perf_counter.head, &perf_counter_contexts);
+	mutex_unlock(&perf_counter_mutex);
+
+	wrapper_vmalloc_sync_all();
+	return 0;
+
+error:
+	kfree(name_alloc);
+name_alloc_error:
+	for_each_online_cpu(cpu) {
+		if (events[cpu])
+			perf_event_release_kernel(events[cpu]);
+	}
+	mutex_unlock(&perf_counter_mutex);
+	kfree(attr);
+error_attr:
+	kfree(events);
+	return ret;
+}
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Mathieu Desnoyers");
+MODULE_DESCRIPTION("Linux Trace Toolkit Perf Support");
diff --git a/drivers/staging/lttng2/probes/Makefile b/drivers/staging/lttng2/probes/Makefile
index 554e6ff..7129e97 100644
--- a/drivers/staging/lttng2/probes/Makefile
+++ b/drivers/staging/lttng2/probes/Makefile
@@ -24,10 +24,6 @@ ifneq ($(CONFIG_DYNAMIC_FTRACE),)
 obj-m += lttng-ftrace.o
 endif
 
-ifneq ($(CONFIG_PERF_EVENTS),)
-obj-m += lttng-perf-counters.o
-endif
-
 endif
 
 else
diff --git a/drivers/staging/lttng2/probes/lttng-perf-counters.c b/drivers/staging/lttng2/probes/lttng-perf-counters.c
deleted file mode 100644
index cb0bdfc..0000000
--- a/drivers/staging/lttng2/probes/lttng-perf-counters.c
+++ /dev/null
@@ -1,150 +0,0 @@
-/*
- * (C) Copyright	2009-2011 -
- * 		Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
- *
- * LTTng performance monitoring counters (perf-counters) integration module.
- *
- * Dual LGPL v2.1/GPL v2 license.
- */
-
-#include <linux/module.h>
-#include <linux/slab.h>
-#include <linux/perf_event.h>
-#include <linux/list.h>
-#include "../ltt-events.h"
-#include "../wrapper/ringbuffer/frontend_types.h"
-#include "../wrapper/vmalloc.h"
-#include "../ltt-tracer.h"
-
-/*
- * TODO: Add CPU hotplug support.
- */
-
-static DEFINE_MUTEX(perf_counter_mutex);
-static LIST_HEAD(perf_counter_contexts);
-
-static
-size_t perf_counter_get_size(size_t offset)
-{
-	size_t size = 0;
-
-	size += lib_ring_buffer_align(offset, ltt_alignof(uint64_t));
-	size += sizeof(uint64_t);
-	return size;
-}
-
-static
-void perf_counter_record(struct lttng_ctx_field *field,
-			 struct lib_ring_buffer_ctx *ctx,
-			 struct ltt_channel *chan)
-{
-	struct perf_event *event;
-	uint64_t value;
-
-	event = field->u.perf_counter.e[ctx->cpu];
-	event->pmu->read(event);
-	value = local64_read(&event->count);
-	lib_ring_buffer_align_ctx(ctx, ltt_alignof(value));
-	chan->ops->event_write(ctx, &value, sizeof(value));
-}
-
-static
-void overflow_callback(struct perf_event *event, int nmi,
-		       struct perf_sample_data *data,
-		       struct pt_regs *regs)
-{
-}
-
-static
-void lttng_destroy_perf_counter_field(struct lttng_ctx_field *field)
-{
-	struct perf_event **events = field->u.perf_counter.e;
-	int cpu;
-
-	mutex_lock(&perf_counter_mutex);
-	list_del(&field->u.perf_counter.head);
-	for_each_online_cpu(cpu)
-		perf_event_release_kernel(events[cpu]);
-	mutex_unlock(&perf_counter_mutex);
-	kfree(field->u.perf_counter.attr);
-	kfree(events);
-}
-
-int lttng_add_perf_counter_to_ctx(uint32_t type,
-				  uint64_t config,
-				  struct lttng_ctx **ctx)
-{
-	struct lttng_ctx_field *field;
-	struct perf_event **events;
-	struct perf_event_attr *attr;
-	int ret;
-	int cpu;
-
-	events = kzalloc(num_possible_cpus() * sizeof(*events), GFP_KERNEL);
-	if (!events)
-		return -ENOMEM;
-
-	attr = kzalloc(sizeof(*field->u.perf_counter.attr), GFP_KERNEL);
-	if (!attr) {
-		ret = -ENOMEM;
-		goto error_attr;
-	}
-
-	attr->type = type;
-	attr->config = config;
-	attr->size = sizeof(struct perf_event_attr);
-	attr->pinned = 1;
-	attr->disabled = 0;
-
-	mutex_lock(&perf_counter_mutex);
-
-	for_each_online_cpu(cpu) {
-		events[cpu] = perf_event_create_kernel_counter(attr,
-					cpu, NULL, overflow_callback);
-		if (!events[cpu]) {
-			ret = -EINVAL;
-			goto error;
-		}
-	}
-
-	field = lttng_append_context(ctx);
-	if (!field) {
-		ret = -ENOMEM;
-		goto error;
-	}
-	field->destroy = lttng_destroy_perf_counter_field;
-
-	field->event_field.name = "dummyname";//TODO: lookup_counter_name(type, config);
-	field->event_field.type.atype = atype_integer;
-	field->event_field.type.u.basic.integer.size = sizeof(unsigned long) * CHAR_BIT;
-	field->event_field.type.u.basic.integer.alignment = ltt_alignof(unsigned long) * CHAR_BIT;
-	field->event_field.type.u.basic.integer.signedness = is_signed_type(unsigned long);
-	field->event_field.type.u.basic.integer.reverse_byte_order = 0;
-	field->event_field.type.u.basic.integer.base = 10;
-	field->event_field.type.u.basic.integer.encoding = lttng_encode_none;
-	field->get_size = perf_counter_get_size;
-	field->record = perf_counter_record;
-	field->u.perf_counter.e = events;
-	field->u.perf_counter.attr = attr;
-
-	list_add(&field->u.perf_counter.head, &perf_counter_contexts);
-	mutex_unlock(&perf_counter_mutex);
-
-	wrapper_vmalloc_sync_all();
-	return 0;
-
-error:
-	for_each_online_cpu(cpu) {
-		if (events[cpu])
-			perf_event_release_kernel(events[cpu]);
-	}
-	mutex_unlock(&perf_counter_mutex);
-	kfree(attr);
-error_attr:
-	kfree(events);
-	return ret;
-}
-
-MODULE_LICENSE("GPL and additional rights");
-MODULE_AUTHOR("Mathieu Desnoyers");
-MODULE_DESCRIPTION("Linux Trace Toolkit Perf Support");
-- 
2.0.2

