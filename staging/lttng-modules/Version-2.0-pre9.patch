From 10c2a133a168abed62357722ad75f33ad8e43402 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 29 Sep 2011 18:52:12 -0400
Subject: [PATCH 325/540] Version 2.0-pre9

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng2/ChangeLog | 65 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 65 insertions(+)

diff --git a/drivers/staging/lttng2/ChangeLog b/drivers/staging/lttng2/ChangeLog
index e37dad7..7c96d29 100644
--- a/drivers/staging/lttng2/ChangeLog
+++ b/drivers/staging/lttng2/ChangeLog
@@ -1,3 +1,68 @@
+2011-09-29 LTTng modules 2.0-pre9
+	* x86 32 syscalls: fix !CONFIG_UID16
+	* Use __string_from_user
+	* Add __string_from_user
+	* Rename "comm" context to "procname"
+	* Fetch "type" name field for mount syscall
+	* Create common override file for all architectures
+	* Shrink stack size usage
+	* Cleanup: remove unused lttng-compat-syscalls.c file
+	* Support detailed compat syscalls on x86_64
+	* Fix syscall table
+	* Add disabled compat syscalls detail (work in progress)
+	* Add config compat support for detailed x86_32 syscalls
+	* Handle newer 3.1+ perf API
+	* Add dummy x86-32 override headers
+	* Bind x86-32 syscall headers
+	* Add x86-32 syscall headers
+	* Add check for KALLSYMS_ALL in syscall extraction script
+	* Automate string extraction for syscalls
+	* Automate syscall filename/pathname extraction
+	* Add exit to ring_buffer_frontend so module is unloadable
+	* Add sys_open filename (x86_64)
+	* Add missing memcpy callback
+	* copy_from_user and memset
+	* Add missing alignment after header write
+	* lib ring buffer: add frontend init as module_init
+	* lib ring buffer frontend: add missing lock initialization
+	* ARM: Set bit 0 for thumb mode in kallsyms_lookup_name returned address (missing file)
+	* ARM: Set bit 0 for thumb mode in kallsyms_lookup_name returned address
+	* Create override for sys_mmap
+	* Rename syscalls -> syscall in LTTng ABI
+	* Use different event name for compat syscalls
+	* Allow trace syscall table override
+	* Add dummy override files
+	* syscall detail: add override capability
+	* Add pointer pretty-print heuristics
+	* Add __field_hex
+	* Rename sys exit errno into ret
+	* Enable detailed syscalls only for native x86_64
+	* Use "unknown" for compat syscalls
+	* Disable x86-64 specific detailed syscalls for now, until we deal with 32-bit compat
+	* Fix syscall exit
+	* Fix sys exit
+	* Only enable detailed syscalls for x86_64 for now
+	* Merge unknown syscall method with extended detail method
+	* Add underscore prefix before event names
+	* Add syscalls pointers detailed syscall tracing
+	* Use perl for regexp
+	* Support generation of syscall probes for those with pointers
+	* Support detailed syscalls with 0 arguments
+	* detailed syscall tracing (work in progress)
+	* Expose /proc/lttng file
+	* Implement detailed syscall event probe
+	* Disable perf build for < 2.6.33 kernels
+	* Syscall detail mode: generate syscall table
+	* block instrumentation: write cmd as hex sequence
+	* lttng-events TRACE_EVENT generator cleanup
+	* block layer instrumentation: fix cmd field
+	* Remove 0 args syscalls for now from type-aware syscall cb generator
+	* Generate trace syscall table macros
+	* Put syscall tracing without arg types back in place
+	* Detailed system call tracing (TRACE_EVENT() generation for integer support)
+	* lttng events probes: don't clash with "ctx" variable name
+	* lib ring buffer must take private pointer copy before decrementing refcount
+
 2011-08-16 LTTng modules 2.0-pre8
 	* Fix metadata buffer wait/wakeup
 
-- 
1.8.4.93.g57e4c17

