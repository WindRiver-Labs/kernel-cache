From 56acf31fdf57a3cedce841b8e7aa1d429bc57354 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Fri, 4 Sep 2015 16:36:22 -0400
Subject: [PATCH 801/933] Implement lttng test module

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../events/lttng-module/lttng-test.h               |  34 +++++
 drivers/staging/lttng/probes/Makefile              |   2 +
 drivers/staging/lttng/probes/lttng-test.c          | 141 +++++++++++++++++++++
 3 files changed, 177 insertions(+)
 create mode 100644 drivers/staging/lttng/instrumentation/events/lttng-module/lttng-test.h
 create mode 100644 drivers/staging/lttng/probes/lttng-test.c

diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/lttng-test.h b/drivers/staging/lttng/instrumentation/events/lttng-module/lttng-test.h
new file mode 100644
index 0000000..5b6f337
--- /dev/null
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/lttng-test.h
@@ -0,0 +1,34 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM lttng_test
+
+#if !defined(LTTNG_TRACE_LTTNG_TEST_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_LTTNG_TEST_H
+
+#include "../../../probes/lttng-tracepoint-event.h"
+#include <linux/types.h>
+#include <linux/version.h>
+
+LTTNG_TRACEPOINT_EVENT(lttng_test_filter_event,
+	TP_PROTO(int anint, int netint, long *values,
+		char *text, size_t textlen,
+		char *etext),
+	TP_ARGS(anint, netint, values, text, textlen, etext),
+	TP_FIELDS(
+		ctf_integer(int, intfield, anint)
+		ctf_integer_hex(int, intfield2, anint)
+		ctf_integer(long, longfield, anint)
+		ctf_integer_network(int, netintfield, netint)
+		ctf_integer_network_hex(int, netintfieldhex, netint)
+		ctf_array(long, arrfield1, values, 3)
+		ctf_array_text(char, arrfield2, text, 10)
+		ctf_sequence(char, seqfield1, text, size_t, textlen)
+		ctf_sequence_text(char, seqfield2, text, size_t, textlen)
+		ctf_string(stringfield, text)
+		ctf_string(stringfield2, etext)
+	)
+)
+
+#endif /*  LTTNG_TRACE_LTTNG_TEST_H */
+
+/* This part must be outside protection */
+#include "../../../probes/define_trace.h"
diff --git a/drivers/staging/lttng/probes/Makefile b/drivers/staging/lttng/probes/Makefile
index cc4c352..9a2558b 100644
--- a/drivers/staging/lttng/probes/Makefile
+++ b/drivers/staging/lttng/probes/Makefile
@@ -258,6 +258,8 @@ endif
 
 endif
 
+obj-m += lttng-test.o
+
 else
 	KERNELDIR ?= /lib/modules/$(shell uname -r)/build
 	PWD := $(shell pwd)
diff --git a/drivers/staging/lttng/probes/lttng-test.c b/drivers/staging/lttng/probes/lttng-test.c
new file mode 100644
index 0000000..2a66f45
--- /dev/null
+++ b/drivers/staging/lttng/probes/lttng-test.c
@@ -0,0 +1,141 @@
+/*
+ * lttng-test.c
+ *
+ * Linux Trace Toolkit Next Generation Test Module
+ *
+ * Copyright 2015 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; only
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/byteorder/generic.h>
+
+#include "../lttng-events.h"
+#include "../lttng-tracer.h"
+#include "../wrapper/tracepoint.h"
+
+#define TP_MODULE_NOAUTOLOAD
+#define LTTNG_PACKAGE_BUILD
+#define CREATE_TRACE_POINTS
+#define TRACE_INCLUDE_PATH ../instrumentation/events/lttng-module
+#define TRACE_INCLUDE_FILE lttng-test
+#define LTTNG_INSTRUMENTATION
+#include "../instrumentation/events/lttng-module/lttng-test.h"
+
+DEFINE_TRACE(lttng_test_filter_event);
+
+#define LTTNG_TEST_FILTER_EVENT_FILE	"lttng-test-filter-event"
+
+#define LTTNG_WRITE_COUNT_MAX	64
+
+static struct proc_dir_entry *lttng_test_filter_event_dentry;
+
+static
+void trace_test_event(unsigned int nr_iter)
+{
+	int i, netint;
+	long values[] = { 1, 2, 3 };
+	char text[10] = "test";
+	char escape[10] = "\\*";
+
+	for (i = 0; i < nr_iter; i++) {
+		netint = htonl(i);
+		trace_lttng_test_filter_event(i, netint, values, text, strlen(text), escape);
+	}
+}
+
+/**
+ * lttng_filter_event_write - trigger a lttng_test_filter_event
+ * @file: file pointer
+ * @user_buf: user string
+ * @count: length to copy
+ *
+ * Return -1 on error, with EFAULT errno. Returns count on success.
+ */
+static
+ssize_t lttng_test_filter_event_write(struct file *file, const char __user *user_buf,
+		    size_t count, loff_t *ppos)
+{
+	unsigned int nr_iter;
+	ssize_t written;
+	int ret;
+
+	/* Get the number of iterations */
+	ret = kstrtouint_from_user(user_buf, count, 10, &nr_iter);
+	if (ret) {
+		written = ret;
+		goto end;
+	}
+	/* Trace the event */
+	trace_test_event(nr_iter);
+	written = count;
+	*ppos += written;
+end:
+	return written;
+}
+
+static const struct file_operations lttng_test_filter_event_operations = {
+	.write = lttng_test_filter_event_write,
+};
+
+static
+int __init lttng_test_init(void)
+{
+	int ret = 0;
+
+	(void) wrapper_lttng_fixup_sig(THIS_MODULE);
+	wrapper_vmalloc_sync_all();
+	lttng_test_filter_event_dentry =
+			proc_create_data(LTTNG_TEST_FILTER_EVENT_FILE,
+				S_IRUGO | S_IWUGO, NULL,
+				&lttng_test_filter_event_operations, NULL);
+	if (!lttng_test_filter_event_dentry) {
+		printk(KERN_ERR "Error creating LTTng test filter file\n");
+		ret = -ENOMEM;
+		goto error;
+	}
+	ret = __lttng_events_init__lttng_test();
+	if (ret)
+		goto error_events;
+	return ret;
+
+error_events:
+	remove_proc_entry(LTTNG_TEST_FILTER_EVENT_FILE, NULL);
+error:
+	return ret;
+}
+
+module_init(lttng_test_init);
+
+static
+void __exit lttng_test_exit(void)
+{
+	__lttng_events_exit__lttng_test();
+	if (lttng_test_filter_event_dentry)
+		remove_proc_entry(LTTNG_TEST_FILTER_EVENT_FILE, NULL);
+}
+
+module_exit(lttng_test_exit);
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Mathieu Desnoyers <mathieu.desnoyers@efficios.com>");
+MODULE_DESCRIPTION("LTTng Test");
+MODULE_VERSION(__stringify(LTTNG_MODULES_MAJOR_VERSION) "."
+	__stringify(LTTNG_MODULES_MINOR_VERSION) "."
+	__stringify(LTTNG_MODULES_PATCHLEVEL_VERSION)
+	LTTNG_MODULES_EXTRAVERSION);
-- 
2.0.2

