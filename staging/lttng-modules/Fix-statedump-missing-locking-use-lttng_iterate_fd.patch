From e3b8ca068efce37a404acbd85b3de8cf45c754ac Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Fri, 25 Jan 2013 12:25:38 -0500
Subject: [PATCH 468/540] Fix: statedump: missing locking, use lttng_iterate_fd

- Take a spinlock around use of dentry->d_name.name.
- Use lttng_iterate_fd wrapper (and thus iterate_fd() from Linux kernels
  from v3.7 and onward).

Suggested-by: Al Viro <viro@ZenIV.linux.org.uk>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng2/Makefile               |  3 +-
 drivers/staging/lttng2/lttng-statedump-impl.c | 50 ++++++++++++++++-----------
 2 files changed, 31 insertions(+), 22 deletions(-)

diff --git a/drivers/staging/lttng2/Makefile b/drivers/staging/lttng2/Makefile
index 4cc8b6b..2da7298 100644
--- a/drivers/staging/lttng2/Makefile
+++ b/drivers/staging/lttng2/Makefile
@@ -23,7 +23,8 @@ lttng-tracer-objs :=  lttng-events.o lttng-abi.o \
 			lttng-context-hostname.o wrapper/random.o
 
 obj-m += lttng-statedump.o
-lttng-statedump-objs := lttng-statedump-impl.o wrapper/irqdesc.o
+lttng-statedump-objs := lttng-statedump-impl.o wrapper/irqdesc.o \
+			wrapper/fdtable.o
 
 ifneq ($(CONFIG_HAVE_SYSCALL_TRACEPOINTS),)
 lttng-tracer-objs += lttng-syscalls.o probes/lttng-probe-user.o
diff --git a/drivers/staging/lttng2/lttng-statedump-impl.c b/drivers/staging/lttng2/lttng-statedump-impl.c
index bbe0a15..04acf6e 100644
--- a/drivers/staging/lttng2/lttng-statedump-impl.c
+++ b/drivers/staging/lttng2/lttng-statedump-impl.c
@@ -49,6 +49,7 @@
 #include "lttng-events.h"
 #include "wrapper/irqdesc.h"
 #include "wrapper/spinlock.h"
+#include "wrapper/fdtable.h"
 
 #ifdef CONFIG_GENERIC_HARDIRQS
 #include <linux/irq.h>
@@ -60,6 +61,12 @@
 #define TRACE_INCLUDE_FILE lttng-statedump
 #include "instrumentation/events/lttng-module/lttng-statedump.h"
 
+struct lttng_fd_ctx {
+	char *page;
+	struct lttng_session *session;
+	struct task_struct *p;
+};
+
 /*
  * Protected by the trace lock.
  */
@@ -141,34 +148,35 @@ int lttng_enumerate_network_ip_interface(struct lttng_session *session)
 }
 #endif /* CONFIG_INET */
 
+static
+int lttng_dump_one_fd(const void *p, struct file *file, unsigned int fd)
+{
+	const struct lttng_fd_ctx *ctx = p;
+	const char *s = d_path(&file->f_path, ctx->page, PAGE_SIZE);
+
+	if (IS_ERR(s)) {
+		struct dentry *dentry = file->f_path.dentry;
+
+		/* Make sure we give at least some info */
+		spin_lock(&dentry->d_lock);
+		trace_lttng_statedump_file_descriptor(ctx->session, ctx->p, fd,
+			dentry->d_name.name);
+		spin_unlock(&dentry->d_lock);
+		goto end;
+	}
+	trace_lttng_statedump_file_descriptor(ctx->session, ctx->p, fd, s);
+end:
+	return 0;
+}
 
 static
 void lttng_enumerate_task_fd(struct lttng_session *session,
 		struct task_struct *p, char *tmp)
 {
-	struct fdtable *fdt;
-	struct file *filp;
-	unsigned int i;
-	const unsigned char *path;
+	struct lttng_fd_ctx ctx = { .page = tmp, .session = session, .p = p };
 
 	task_lock(p);
-	if (!p->files)
-		goto unlock_task;
-	spin_lock(&p->files->file_lock);
-	fdt = files_fdtable(p->files);
-	for (i = 0; i < fdt->max_fds; i++) {
-		filp = fcheck_files(p->files, i);
-		if (!filp)
-			continue;
-		path = d_path(&filp->f_path, tmp, PAGE_SIZE);
-		/* Make sure we give at least some info */
-		trace_lttng_statedump_file_descriptor(session, p, i,
-			IS_ERR(path) ?
-				filp->f_dentry->d_name.name :
-				path);
-	}
-	spin_unlock(&p->files->file_lock);
-unlock_task:
+	lttng_iterate_fd(p->files, 0, lttng_dump_one_fd, &ctx);
 	task_unlock(p);
 }
 
-- 
1.8.4.93.g57e4c17

