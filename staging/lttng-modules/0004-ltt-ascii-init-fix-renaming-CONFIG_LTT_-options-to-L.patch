From 51e5a211509c47baab24c1705f1c27f3bb206094 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Fri, 3 Sep 2010 11:50:13 -0400
Subject: [PATCH 004/757] ltt-ascii init fix, renaming CONFIG_LTT_* options to
 LTT_*

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/Makefile              | 1 +
 drivers/staging/lttng/ltt-ascii.c           | 2 +-
 drivers/staging/lttng/ltt-core.c            | 4 ++++
 drivers/staging/lttng/ltt-relay-lockless.c  | 6 +++---
 drivers/staging/lttng/ltt-relay-lockless.h  | 8 ++++----
 drivers/staging/lttng/ltt-serialize.c       | 2 +-
 drivers/staging/lttng/ltt-type-serializer.c | 2 +-
 7 files changed, 15 insertions(+), 10 deletions(-)

diff --git a/drivers/staging/lttng/Makefile b/drivers/staging/lttng/Makefile
index befc98e..81d8128 100644
--- a/drivers/staging/lttng/Makefile
+++ b/drivers/staging/lttng/Makefile
@@ -26,6 +26,7 @@ endif
 else
 	KERNELDIR ?= /lib/modules/$(shell uname -r)/build
 	PWD := $(shell pwd)
+	CFLAGS = $(EXTCFLAGS)
 
 default:
 	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules
diff --git a/drivers/staging/lttng/ltt-ascii.c b/drivers/staging/lttng/ltt-ascii.c
index ed3c20d..b020fed 100644
--- a/drivers/staging/lttng/ltt-ascii.c
+++ b/drivers/staging/lttng/ltt-ascii.c
@@ -568,7 +568,6 @@ EXPORT_SYMBOL_GPL(ltt_ascii_remove_dir);
 __init int ltt_ascii_init(void)
 {
 	ltt_ascii_dir_dentry = debugfs_create_dir(LTT_ASCII, get_ltt_root());
-	put_ltt_root();
 
 	return ltt_ascii_dir_dentry ? 0 : -EFAULT;
 }
@@ -576,6 +575,7 @@ __init int ltt_ascii_init(void)
 __exit void ltt_ascii_exit(void)
 {
 	debugfs_remove(ltt_ascii_dir_dentry);
+	put_ltt_root();
 }
 
 MODULE_LICENSE("GPL and additional rights");
diff --git a/drivers/staging/lttng/ltt-core.c b/drivers/staging/lttng/ltt-core.c
index 13d517f..1a0424e 100644
--- a/drivers/staging/lttng/ltt-core.c
+++ b/drivers/staging/lttng/ltt-core.c
@@ -106,3 +106,7 @@ void ltt_filter_unregister(void)
 	ltt_run_filter = ltt_run_filter_default;
 }
 EXPORT_SYMBOL_GPL(ltt_filter_unregister);
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Mathieu Desnoyers");
+MODULE_DESCRIPTION("Linux Trace Toolkit Next Generation Tracer Core");
diff --git a/drivers/staging/lttng/ltt-relay-lockless.c b/drivers/staging/lttng/ltt-relay-lockless.c
index 0c4c83c..db4362d 100644
--- a/drivers/staging/lttng/ltt-relay-lockless.c
+++ b/drivers/staging/lttng/ltt-relay-lockless.c
@@ -121,7 +121,7 @@ void ltt_chanbuf_free(struct ltt_chanbuf *buf)
 	struct ltt_chan *chan = container_of(buf->a.chan, struct ltt_chan, a);
 
 	ltt_relay_print_buffer_errors(chan, buf->a.cpu);
-#ifdef CONFIG_LTT_VMCORE
+#ifdef LTT_VMCORE
 	kfree(buf->commit_seq);
 #endif
 	kfree(buf->commit_count);
@@ -157,7 +157,7 @@ int ltt_chanbuf_create(struct ltt_chanbuf *buf, struct ltt_chan_alloc *chana,
 		goto free_chanbuf;
 	}
 
-#ifdef CONFIG_LTT_VMCORE
+#ifdef LTT_VMCORE
 	buf->commit_seq =
 		kzalloc_node(ALIGN(sizeof(*buf->commit_seq) * chan->a.n_sb,
 				   1 << INTERNODE_CACHE_SHIFT),
@@ -208,7 +208,7 @@ int ltt_chanbuf_create(struct ltt_chanbuf *buf, struct ltt_chan_alloc *chana,
 
 	/* Error handling */
 free_init:
-#ifdef CONFIG_LTT_VMCORE
+#ifdef LTT_VMCORE
 	kfree(buf->commit_seq);
 free_commit:
 #endif
diff --git a/drivers/staging/lttng/ltt-relay-lockless.h b/drivers/staging/lttng/ltt-relay-lockless.h
index 62fc515..73c6a3d 100644
--- a/drivers/staging/lttng/ltt-relay-lockless.h
+++ b/drivers/staging/lttng/ltt-relay-lockless.h
@@ -88,7 +88,7 @@ struct ltt_chanbuf {
 					 * Last timestamp written in the buffer.
 					 */
 	/* End of first 32 bytes cacheline */
-#ifdef CONFIG_LTT_VMCORE
+#ifdef LTT_VMCORE
 	local_t *commit_seq;		/* Consecutive commits */
 #endif
 	atomic_long_t active_readers;	/*
@@ -235,7 +235,7 @@ void ltt_reserve_push_reader(struct ltt_chanbuf *buf, struct ltt_chan *chan,
 					      consumed_new) != consumed_old));
 }
 
-#ifdef CONFIG_LTT_VMCORE
+#ifdef LTT_VMCORE
 static __inline__
 void ltt_vmcore_check_deliver(struct ltt_chanbuf *buf, long commit_count,
 			      long idx)
@@ -342,7 +342,7 @@ int ltt_relay_try_reserve(struct ltt_chanbuf *buf, struct ltt_chan *chan,
 
 	*tsc = trace_clock_read64();
 
-#ifdef CONFIG_LTT_VMCORE
+#ifdef LTT_VMCORE
 	prefetch(&buf->commit_count[SUBBUF_INDEX(*o_begin, chan)]);
 	prefetch(&buf->commit_seq[SUBBUF_INDEX(*o_begin, chan)]);
 #else
@@ -452,7 +452,7 @@ void ltt_force_switch(struct ltt_chanbuf *buf, enum force_switch_mode mode)
  * commit count reaches back the reserve offset (module subbuffer size). It is
  * useful for crash dump.
  */
-#ifdef CONFIG_LTT_VMCORE
+#ifdef LTT_VMCORE
 static __inline__
 void ltt_write_commit_counter(struct ltt_chanbuf *buf, struct ltt_chan *chan,
 			      long idx, long buf_offset, long commit_count,
diff --git a/drivers/staging/lttng/ltt-serialize.c b/drivers/staging/lttng/ltt-serialize.c
index 305b3eb..1d5a5df 100644
--- a/drivers/staging/lttng/ltt-serialize.c
+++ b/drivers/staging/lttng/ltt-serialize.c
@@ -902,7 +902,7 @@ void ltt_vtrace(const struct marker *mdata, void *probe_data, void *call_data,
 			continue;
 		if (unlikely(!ltt_run_filter(trace, eID)))
 			continue;
-#ifdef CONFIG_LTT_DEBUG_EVENT_SIZE
+#ifdef LTT_DEBUG_EVENT_SIZE
 		rflags = LTT_RFLAG_ID_SIZE;
 #else
 		if (unlikely(eID >= LTT_FREE_EVENTS))
diff --git a/drivers/staging/lttng/ltt-type-serializer.c b/drivers/staging/lttng/ltt-type-serializer.c
index cb92aee..7d06490 100644
--- a/drivers/staging/lttng/ltt-type-serializer.c
+++ b/drivers/staging/lttng/ltt-type-serializer.c
@@ -58,7 +58,7 @@ void _ltt_specialized_trace(const struct marker *mdata, void *probe_data,
 			continue;
 		if (unlikely(!ltt_run_filter(trace, eID)))
 			continue;
-#ifdef CONFIG_LTT_DEBUG_EVENT_SIZE
+#ifdef LTT_DEBUG_EVENT_SIZE
 		rflags = LTT_RFLAG_ID_SIZE;
 #else
 		if (unlikely(eID >= LTT_FREE_EVENTS))
-- 
2.0.2

