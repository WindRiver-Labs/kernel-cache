From 0c065c6894dba6d1cee5ff76632c03818bb43765 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Sun, 30 Jun 2013 18:49:13 -0400
Subject: [PATCH 513/540] Revert "Cleanup: ring buffer: remove
 lib_ring_buffer_switch_new_end()"

This reverts commit 5fb66f07aae4884426f1706d0281bd242a38c2a7.

The equivalent UST commit of this change broke regression tests of
lttng-tools.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../staging/lttng2/lib/ringbuffer/frontend_api.h   |  8 +++
 .../lttng2/lib/ringbuffer/ring_buffer_frontend.c   | 57 +++++++++++++++++++++-
 2 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/lttng2/lib/ringbuffer/frontend_api.h b/drivers/staging/lttng2/lib/ringbuffer/frontend_api.h
index 1397560..c36ec3d 100644
--- a/drivers/staging/lttng2/lib/ringbuffer/frontend_api.h
+++ b/drivers/staging/lttng2/lib/ringbuffer/frontend_api.h
@@ -125,6 +125,14 @@ int lib_ring_buffer_try_reserve(const struct lib_ring_buffer_config *config,
 	 * boundary. It's safe to write.
 	 */
 	*o_end = *o_begin + ctx->slot_size;
+
+	if (unlikely((subbuf_offset(*o_end, chan)) == 0))
+		/*
+		 * The offset_end will fall at the very beginning of the next
+		 * subbuffer.
+		 */
+		return 1;
+
 	return 0;
 }
 
diff --git a/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_frontend.c b/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_frontend.c
index eaeb571..77f9e8b 100644
--- a/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_frontend.c
+++ b/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_frontend.c
@@ -67,7 +67,8 @@
 struct switch_offsets {
 	unsigned long begin, end, old;
 	size_t pre_header_padding, size;
-	unsigned int switch_new_start:1, switch_old_start:1, switch_old_end:1;
+	unsigned int switch_new_start:1, switch_new_end:1, switch_old_start:1,
+		     switch_old_end:1;
 };
 
 #ifdef CONFIG_NO_HZ
@@ -1349,6 +1350,48 @@ void lib_ring_buffer_switch_new_start(struct lib_ring_buffer *buf,
 }
 
 /*
+ * lib_ring_buffer_switch_new_end: finish switching current subbuffer
+ *
+ * The only remaining threads could be the ones with pending commits. They will
+ * have to do the deliver themselves.
+ */
+static
+void lib_ring_buffer_switch_new_end(struct lib_ring_buffer *buf,
+					    struct channel *chan,
+					    struct switch_offsets *offsets,
+					    u64 tsc)
+{
+	const struct lib_ring_buffer_config *config = &chan->backend.config;
+	unsigned long endidx = subbuf_index(offsets->end - 1, chan);
+	unsigned long commit_count, padding_size, data_size;
+
+	data_size = subbuf_offset(offsets->end - 1, chan) + 1;
+	padding_size = chan->backend.subbuf_size - data_size;
+	subbuffer_set_data_size(config, &buf->backend, endidx, data_size);
+
+	/*
+	 * Order all writes to buffer before the commit count update that will
+	 * determine that the subbuffer is full.
+	 */
+	if (config->ipi == RING_BUFFER_IPI_BARRIER) {
+		/*
+		 * Must write slot data before incrementing commit count.  This
+		 * compiler barrier is upgraded into a smp_mb() by the IPI sent
+		 * by get_subbuf().
+		 */
+		barrier();
+	} else
+		smp_wmb();
+	v_add(config, padding_size, &buf->commit_hot[endidx].cc);
+	commit_count = v_read(config, &buf->commit_hot[endidx].cc);
+	lib_ring_buffer_check_deliver(config, buf, chan, offsets->end - 1,
+				  commit_count, endidx);
+	lib_ring_buffer_write_commit_counter(config, buf, chan, endidx,
+					     offsets->end, commit_count,
+					     padding_size);
+}
+
+/*
  * Returns :
  * 0 if ok
  * !0 if execution must be aborted.
@@ -1541,6 +1584,7 @@ int lib_ring_buffer_try_reserve_slow(struct lib_ring_buffer *buf,
 	offsets->begin = v_read(config, &buf->offset);
 	offsets->old = offsets->begin;
 	offsets->switch_new_start = 0;
+	offsets->switch_new_end = 0;
 	offsets->switch_old_end = 0;
 	offsets->pre_header_padding = 0;
 
@@ -1647,6 +1691,14 @@ int lib_ring_buffer_try_reserve_slow(struct lib_ring_buffer *buf,
 		 */
 	}
 	offsets->end = offsets->begin + offsets->size;
+
+	if (unlikely(subbuf_offset(offsets->end, chan) == 0)) {
+		/*
+		 * The offset_end will fall at the very beginning of the next
+		 * subbuffer.
+		 */
+		offsets->switch_new_end = 1;	/* For offsets->begin */
+	}
 	return 0;
 }
 
@@ -1717,6 +1769,9 @@ int lib_ring_buffer_reserve_slow(struct lib_ring_buffer_ctx *ctx)
 	if (unlikely(offsets.switch_new_start))
 		lib_ring_buffer_switch_new_start(buf, chan, &offsets, ctx->tsc);
 
+	if (unlikely(offsets.switch_new_end))
+		lib_ring_buffer_switch_new_end(buf, chan, &offsets, ctx->tsc);
+
 	ctx->slot_size = offsets.size;
 	ctx->pre_offset = offsets.begin;
 	ctx->buf_offset = offsets.begin + offsets.pre_header_padding;
-- 
1.8.4.93.g57e4c17

