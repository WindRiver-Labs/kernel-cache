From 30fd77cb89e6cb2c8ca3475cfdaf09f7dc9015b3 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Mon, 14 Apr 2014 16:06:35 -0400
Subject: [PATCH 603/625] Cleanup: lib ringbuffer: pagecpy has unsigned
 semantic

Same for lib_ring_buffer_read() orig_len.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Signed-off-by: Jianchuan Wang <jianchuan.wang@windriver.com>
---
 drivers/staging/lttng2/lib/ringbuffer/backend.h             | 9 +++------
 drivers/staging/lttng2/lib/ringbuffer/backend_internal.h    | 6 +++---
 drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c | 9 ++++-----
 3 files changed, 10 insertions(+), 14 deletions(-)

diff --git a/drivers/staging/lttng2/lib/ringbuffer/backend.h b/drivers/staging/lttng2/lib/ringbuffer/backend.h
index b11545c..aadc9c3 100644
--- a/drivers/staging/lttng2/lib/ringbuffer/backend.h
+++ b/drivers/staging/lttng2/lib/ringbuffer/backend.h
@@ -90,9 +90,8 @@ void lib_ring_buffer_write(const struct lib_ring_buffer_config *config,
 {
 	struct lib_ring_buffer_backend *bufb = &ctx->buf->backend;
 	struct channel_backend *chanb = &ctx->chan->backend;
-	size_t sbidx, index;
+	size_t sbidx, index, pagecpy;
 	size_t offset = ctx->buf_offset;
-	ssize_t pagecpy;
 	struct lib_ring_buffer_backend_pages *rpages;
 	unsigned long sb_bindex, id;
 
@@ -138,9 +137,8 @@ void lib_ring_buffer_memset(const struct lib_ring_buffer_config *config,
 
 	struct lib_ring_buffer_backend *bufb = &ctx->buf->backend;
 	struct channel_backend *chanb = &ctx->chan->backend;
-	size_t sbidx, index;
+	size_t sbidx, index, pagecpy;
 	size_t offset = ctx->buf_offset;
-	ssize_t pagecpy;
 	struct lib_ring_buffer_backend_pages *rpages;
 	unsigned long sb_bindex, id;
 
@@ -306,9 +304,8 @@ void lib_ring_buffer_copy_from_user_inatomic(const struct lib_ring_buffer_config
 {
 	struct lib_ring_buffer_backend *bufb = &ctx->buf->backend;
 	struct channel_backend *chanb = &ctx->chan->backend;
-	size_t sbidx, index;
+	size_t sbidx, index, pagecpy;
 	size_t offset = ctx->buf_offset;
-	ssize_t pagecpy;
 	struct lib_ring_buffer_backend_pages *rpages;
 	unsigned long sb_bindex, id;
 	unsigned long ret;
diff --git a/drivers/staging/lttng2/lib/ringbuffer/backend_internal.h b/drivers/staging/lttng2/lib/ringbuffer/backend_internal.h
index 958328a..35b26f7 100644
--- a/drivers/staging/lttng2/lib/ringbuffer/backend_internal.h
+++ b/drivers/staging/lttng2/lib/ringbuffer/backend_internal.h
@@ -52,16 +52,16 @@ void lib_ring_buffer_backend_exit(void);
 
 extern void _lib_ring_buffer_write(struct lib_ring_buffer_backend *bufb,
 				   size_t offset, const void *src, size_t len,
-				   ssize_t pagecpy);
+				   size_t pagecpy);
 extern void _lib_ring_buffer_memset(struct lib_ring_buffer_backend *bufb,
 				    size_t offset, int c, size_t len,
-				    ssize_t pagecpy);
+				    size_t pagecpy);
 extern void _lib_ring_buffer_strcpy(struct lib_ring_buffer_backend *bufb,
 				   size_t offset, const char *src, size_t len,
 				   size_t pagecpy, int pad);
 extern void _lib_ring_buffer_copy_from_user_inatomic(struct lib_ring_buffer_backend *bufb,
 					    size_t offset, const void *src,
-					    size_t len, ssize_t pagecpy);
+					    size_t len, size_t pagecpy);
 extern void _lib_ring_buffer_strcpy_from_user_inatomic(struct lib_ring_buffer_backend *bufb,
 		size_t offset, const char __user *src, size_t len,
 		size_t pagecpy, int pad);
diff --git a/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c b/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c
index 8e1a796..f7ed20d 100644
--- a/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c
+++ b/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c
@@ -478,7 +478,7 @@ void channel_backend_free(struct channel_backend *chanb)
  * @pagecpy : page size copied so far
  */
 void _lib_ring_buffer_write(struct lib_ring_buffer_backend *bufb, size_t offset,
-			    const void *src, size_t len, ssize_t pagecpy)
+			    const void *src, size_t len, size_t pagecpy)
 {
 	struct channel_backend *chanb = &bufb->chan->backend;
 	const struct lib_ring_buffer_config *config = &chanb->config;
@@ -524,7 +524,7 @@ EXPORT_SYMBOL_GPL(_lib_ring_buffer_write);
  */
 void _lib_ring_buffer_memset(struct lib_ring_buffer_backend *bufb,
 			     size_t offset,
-			     int c, size_t len, ssize_t pagecpy)
+			     int c, size_t len, size_t pagecpy)
 {
 	struct channel_backend *chanb = &bufb->chan->backend;
 	const struct lib_ring_buffer_config *config = &chanb->config;
@@ -654,7 +654,7 @@ EXPORT_SYMBOL_GPL(_lib_ring_buffer_strcpy);
 void _lib_ring_buffer_copy_from_user_inatomic(struct lib_ring_buffer_backend *bufb,
 				      size_t offset,
 				      const void __user *src, size_t len,
-				      ssize_t pagecpy)
+				      size_t pagecpy)
 {
 	struct channel_backend *chanb = &bufb->chan->backend;
 	const struct lib_ring_buffer_config *config = &chanb->config;
@@ -795,8 +795,7 @@ size_t lib_ring_buffer_read(struct lib_ring_buffer_backend *bufb, size_t offset,
 {
 	struct channel_backend *chanb = &bufb->chan->backend;
 	const struct lib_ring_buffer_config *config = &chanb->config;
-	size_t index;
-	ssize_t pagecpy, orig_len;
+	size_t index, pagecpy, orig_len;
 	struct lib_ring_buffer_backend_pages *rpages;
 	unsigned long sb_bindex, id;
 
-- 
2.0.2

