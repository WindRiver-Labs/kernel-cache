From dc978eddf741514b9867ca491f8ff3f2443b9c6f Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Sun, 12 Oct 2014 16:56:25 +0200
Subject: [PATCH 676/757] Add atomic.h wrapper for before/after atomic

Linux 3.16 changes the name of before/after atomic functions, and
generates a warning at build time about deprecation of old ones. Create
a wrapper header to handle this.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../lttng/lib/ringbuffer/ring_buffer_frontend.c    |  5 ++-
 drivers/staging/lttng/wrapper/atomic.h             | 51 ++++++++++++++++++++++
 2 files changed, 54 insertions(+), 2 deletions(-)
 create mode 100644 drivers/staging/lttng/wrapper/atomic.h

diff --git a/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c b/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c
index 86d5398..ae0b9e3 100644
--- a/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c
+++ b/drivers/staging/lttng/lib/ringbuffer/ring_buffer_frontend.c
@@ -60,6 +60,7 @@
 #include "../../wrapper/ringbuffer/frontend.h"
 #include "../../wrapper/ringbuffer/iterator.h"
 #include "../../wrapper/ringbuffer/nohz.h"
+#include "../../wrapper/atomic.h"
 
 /*
  * Internal structure representing offsets to use at a sub-buffer switch.
@@ -792,7 +793,7 @@ int lib_ring_buffer_open_read(struct lib_ring_buffer *buf)
 	if (!atomic_long_add_unless(&buf->active_readers, 1, 1))
 		return -EBUSY;
 	kref_get(&chan->ref);
-	smp_mb__after_atomic_inc();
+	lttng_smp_mb__after_atomic();
 	return 0;
 }
 EXPORT_SYMBOL_GPL(lib_ring_buffer_open_read);
@@ -802,7 +803,7 @@ void lib_ring_buffer_release_read(struct lib_ring_buffer *buf)
 	struct channel *chan = buf->backend.chan;
 
 	CHAN_WARN_ON(chan, atomic_long_read(&buf->active_readers) != 1);
-	smp_mb__before_atomic_dec();
+	lttng_smp_mb__before_atomic();
 	atomic_long_dec(&buf->active_readers);
 	kref_put(&chan->ref, channel_release);
 }
diff --git a/drivers/staging/lttng/wrapper/atomic.h b/drivers/staging/lttng/wrapper/atomic.h
new file mode 100644
index 0000000..6a3cd07
--- /dev/null
+++ b/drivers/staging/lttng/wrapper/atomic.h
@@ -0,0 +1,51 @@
+#ifndef _LTTNG_WRAPPER_ATOMIC_H
+#define _LTTNG_WRAPPER_ATOMIC_H
+
+/*
+ * wrapper/atomic.h
+ *
+ * wrapper around linux/atomic.h.
+ *
+ * Copyright (C) 2014 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; only
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <linux/version.h>
+#include <linux/atomic.h>
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0))
+static inline void lttng_smp_mb__before_atomic(void)
+{
+	smp_mb__before_atomic();
+}
+
+static inline void lttng_smp_mb__after_atomic(void)
+{
+	smp_mb__after_atomic();
+}
+#else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0)) */
+static inline void lttng_smp_mb__before_atomic(void)
+{
+	smp_mb__before_atomic_inc();
+}
+
+static inline void lttng_smp_mb__after_atomic(void)
+{
+	smp_mb__after_atomic_inc();
+}
+#endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,16,0)) */
+
+#endif /* _LTTNG_WRAPPER_ATOMIC_H */
-- 
2.0.2

