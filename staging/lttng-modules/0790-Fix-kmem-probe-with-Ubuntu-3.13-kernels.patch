From d700d0907c3615d7d6ee4c3e56a7baba86f51f9e Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Wed, 29 Jul 2015 13:00:04 -0400
Subject: [PATCH 790/933] Fix: kmem probe with Ubuntu 3.13 kernels

Fixes an undefined reference to get_pageblock_flags_mask.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/wrapper/page_alloc.c | 53 +++++++++++++++++++++++++++---
 drivers/staging/lttng/wrapper/page_alloc.h | 36 ++++++++++++++++++--
 2 files changed, 82 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/lttng/wrapper/page_alloc.c b/drivers/staging/lttng/wrapper/page_alloc.c
index d82d897..149bff8 100644
--- a/drivers/staging/lttng/wrapper/page_alloc.c
+++ b/drivers/staging/lttng/wrapper/page_alloc.c
@@ -1,9 +1,10 @@
 /*
  * wrapper/page_alloc.c
  *
- * wrapper around get_pfnblock_flags_mask. Using KALLSYMS to get its address
- * when available, else we need to have a kernel that exports this function to
- * GPL modules.
+ * wrapper around get_pfnblock_flags_mask and Ubuntu
+ * get_pageblock_flags_mask. Using KALLSYMS to get their address when
+ * available, else we need to have a kernel that exports this function
+ * to GPL modules.
  *
  * Copyright (C) 2015 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
  *
@@ -63,8 +64,50 @@ int wrapper_get_pfnblock_flags_mask_init(void)
 	return 0;
 }
 
-#else /* #if defined(CONFIG_KALLSYMS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,2)) */
+#else
 
 #include <linux/pageblock-flags.h>
 
-#endif /* #else #if defined(CONFIG_KALLSYMS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,2)) */
+#endif
+
+#if (defined(CONFIG_KALLSYMS) \
+	&& LTTNG_UBUNTU_KERNEL_RANGE(3,13,11,50, 3,14,0,0))
+
+#include <linux/kallsyms.h>
+#include <linux/mm_types.h>
+#include <linux/module.h>
+#include "kallsyms.h"
+#include "page_alloc.h"
+
+static
+unsigned long (*get_pageblock_flags_mask_sym)(struct page *page,
+		unsigned long end_bitidx,
+		unsigned long mask);
+
+unsigned long wrapper_get_pageblock_flags_mask(struct page *page,
+		unsigned long end_bitidx,
+		unsigned long mask)
+{
+	WARN_ON_ONCE(!get_pageblock_flags_mask_sym);
+	if (get_pageblock_flags_mask_sym) {
+		return get_pageblock_flags_mask_sym(page, end_bitidx, mask);
+	} else {
+		return -ENOSYS;
+	}
+}
+EXPORT_SYMBOL_GPL(wrapper_get_pageblock_flags_mask);
+
+int wrapper_get_pageblock_flags_mask_init(void)
+{
+	get_pageblock_flags_mask_sym =
+		(void *) kallsyms_lookup_funcptr("get_pageblock_flags_mask");
+	if (!get_pageblock_flags_mask_sym)
+		return -1;
+	return 0;
+}
+
+#else
+
+#include <linux/pageblock-flags.h>
+
+#endif
diff --git a/drivers/staging/lttng/wrapper/page_alloc.h b/drivers/staging/lttng/wrapper/page_alloc.h
index 5e84b5c..3c7c1ea 100644
--- a/drivers/staging/lttng/wrapper/page_alloc.h
+++ b/drivers/staging/lttng/wrapper/page_alloc.h
@@ -41,7 +41,7 @@
 
 int wrapper_get_pfnblock_flags_mask_init(void);
 
-#else /* #if defined(CONFIG_KALLSYMS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,2)) */
+#else
 
 #include <linux/mm_types.h>
 
@@ -51,6 +51,38 @@ int wrapper_get_pfnblock_flags_mask_init(void)
 	return 0;
 }
 
-#endif /* else #if defined(CONFIG_KALLSYMS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,2)) */
+#endif
+
+/*
+ * For a specific range of Ubuntu 3.13 kernels, we need to redefine
+ * get_pageblock_flags_mask to our wrapper, because the
+ * get_pageblock_migratetype() macro uses it. This function has been
+ * introduced into mainline within commit
+ * e58469bafd0524e848c3733bc3918d854595e20f, but never actually showed
+ * up in a stable kernel version, since it has been changed by commit
+ * dc4b0caff24d9b2918e9f27bc65499ee63187eba. Since Ubuntu chose to only
+ * backport the former commit but not the latter, we need to do a
+ * special case to cover this.
+ */
+#if (defined(CONFIG_KALLSYMS) \
+	&& LTTNG_UBUNTU_KERNEL_RANGE(3,13,11,50, 3,14,0,0))
+
+#define get_pageblock_flags_mask	wrapper_get_pageblock_flags_mask
+
+#include <linux/mm_types.h>
+
+int wrapper_get_pageblock_flags_mask_init(void);
+
+#else
+
+#include <linux/mm_types.h>
+
+static inline
+int wrapper_get_pageblock_flags_mask_init(void)
+{
+	return 0;
+}
+
+#endif
 
 #endif /* _LTTNG_WRAPPER_PAGE_ALLOC_H */
-- 
2.0.2

