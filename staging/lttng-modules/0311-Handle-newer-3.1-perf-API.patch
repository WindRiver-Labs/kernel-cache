From 67cff0387bc3faa718014595eba2213b6f28a33e Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Tue, 27 Sep 2011 11:52:53 -0400
Subject: [PATCH 311/933] Handle newer 3.1+ perf API

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../staging/lttng/lttng-context-perf-counters.c    | 14 ++++++++--
 drivers/staging/lttng/wrapper/perf.h               | 32 ++++++++++++++++++++++
 2 files changed, 44 insertions(+), 2 deletions(-)
 create mode 100644 drivers/staging/lttng/wrapper/perf.h

diff --git a/drivers/staging/lttng/lttng-context-perf-counters.c b/drivers/staging/lttng/lttng-context-perf-counters.c
index 2f131d6..0b3668a 100644
--- a/drivers/staging/lttng/lttng-context-perf-counters.c
+++ b/drivers/staging/lttng/lttng-context-perf-counters.c
@@ -15,6 +15,7 @@
 #include "ltt-events.h"
 #include "wrapper/ringbuffer/frontend_types.h"
 #include "wrapper/vmalloc.h"
+#include "wrapper/perf.h"
 #include "ltt-tracer.h"
 
 static
@@ -57,12 +58,21 @@ void perf_counter_record(struct lttng_ctx_field *field,
 	chan->ops->event_write(ctx, &value, sizeof(value));
 }
 
+#if defined(CONFIG_PERF_EVENTS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(3,0,99))
+static
+void overflow_callback(struct perf_event *event,
+		       struct perf_sample_data *data,
+		       struct pt_regs *regs)
+{
+}
+#else
 static
 void overflow_callback(struct perf_event *event, int nmi,
 		       struct perf_sample_data *data,
 		       struct pt_regs *regs)
 {
 }
+#endif
 
 static
 void lttng_destroy_perf_counter_field(struct lttng_ctx_field *field)
@@ -114,7 +124,7 @@ int __cpuinit lttng_perf_counter_cpu_hp_callback(struct notifier_block *nb,
 	switch (action) {
 	case CPU_ONLINE:
 	case CPU_ONLINE_FROZEN:
-		pevent = perf_event_create_kernel_counter(attr,
+		pevent = wrapper_perf_event_create_kernel_counter(attr,
 				cpu, NULL, overflow_callback);
 		if (!pevent || IS_ERR(pevent))
 			return NOTIFY_BAD;
@@ -202,7 +212,7 @@ int lttng_add_perf_counter_to_ctx(uint32_t type,
 
 	get_online_cpus();
 	for_each_online_cpu(cpu) {
-		events[cpu] = perf_event_create_kernel_counter(attr,
+		events[cpu] = wrapper_perf_event_create_kernel_counter(attr,
 					cpu, NULL, overflow_callback);
 		if (!events[cpu] || IS_ERR(events[cpu])) {
 			ret = -EINVAL;
diff --git a/drivers/staging/lttng/wrapper/perf.h b/drivers/staging/lttng/wrapper/perf.h
new file mode 100644
index 0000000..9a6dbfc
--- /dev/null
+++ b/drivers/staging/lttng/wrapper/perf.h
@@ -0,0 +1,32 @@
+#ifndef _LTT_WRAPPER_PERF_H
+#define _LTT_WRAPPER_PERF_H
+
+/*
+ * Copyright (C) 2011 Mathieu Desnoyers (mathieu.desnoyers@efficios.com)
+ *
+ * Dual LGPL v2.1/GPL v2 license.
+ */
+
+#include <linux/perf_event.h>
+
+#if defined(CONFIG_PERF_EVENTS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(3,0,99))
+static inline struct perf_event *
+wrapper_perf_event_create_kernel_counter(struct perf_event_attr *attr,
+				int cpu,
+				struct task_struct *task,
+				perf_overflow_handler_t callback)
+{
+	return perf_event_create_kernel_counter(attr, cpu, task, callback, NULL);
+}
+#else
+static inline struct perf_event *
+wrapper_perf_event_create_kernel_counter(struct perf_event_attr *attr,
+				int cpu,
+				struct task_struct *task,
+				perf_overflow_handler_t callback)
+{
+	return perf_event_create_kernel_counter(attr, cpu, task, callback);
+}
+#endif
+
+#endif /* _LTT_WRAPPER_PERF_H */
-- 
2.0.2

