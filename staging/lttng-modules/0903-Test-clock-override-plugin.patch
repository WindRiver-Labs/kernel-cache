From 2a9c9063d014ed1562f9a799ef485403274bbdeb Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Wed, 11 May 2016 10:10:17 -0400
Subject: [PATCH 903/933] Test clock override plugin

Fixes: #939

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/Makefile                     |   1 +
 drivers/staging/lttng/probes/Kbuild                |   2 -
 drivers/staging/lttng/probes/lttng-test.c          | 142 ---------------------
 .../tests/clock-plugin/lttng-clock-plugin-test.c   |  81 ++++++++++++
 drivers/staging/lttng/tests/probes/lttng-test.c    | 142 +++++++++++++++++++++
 5 files changed, 224 insertions(+), 144 deletions(-)
 delete mode 100644 drivers/staging/lttng/probes/lttng-test.c
 create mode 100644 drivers/staging/lttng/tests/clock-plugin/lttng-clock-plugin-test.c
 create mode 100644 drivers/staging/lttng/tests/probes/lttng-test.c

diff --git a/drivers/staging/lttng/Makefile b/drivers/staging/lttng/Makefile
index c0b562a..c2b1213 100644
--- a/drivers/staging/lttng/Makefile
+++ b/drivers/staging/lttng/Makefile
@@ -92,6 +92,7 @@ ifneq ($(KERNELRELEASE),)
 
   obj-$(CONFIG_LTTNG) += probes/
   obj-$(CONFIG_LTTNG) += lib/
+  obj-$(CONFIG_LTTNG) += tests/
 
 else # KERNELRELEASE
 
diff --git a/drivers/staging/lttng/probes/Kbuild b/drivers/staging/lttng/probes/Kbuild
index 90e9805..8ae9a6b 100644
--- a/drivers/staging/lttng/probes/Kbuild
+++ b/drivers/staging/lttng/probes/Kbuild
@@ -261,6 +261,4 @@ ifneq ($(CONFIG_DYNAMIC_FTRACE),)
   obj-$(CONFIG_LTTNG) += lttng-ftrace.o
 endif # CONFIG_DYNAMIC_FTRACE
 
-obj-$(CONFIG_LTTNG) += lttng-test.o
-
 # vim:syntax=make
diff --git a/drivers/staging/lttng/probes/lttng-test.c b/drivers/staging/lttng/probes/lttng-test.c
deleted file mode 100644
index 54be4c7..0000000
--- a/drivers/staging/lttng/probes/lttng-test.c
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * lttng-test.c
- *
- * Linux Trace Toolkit Next Generation Test Module
- *
- * Copyright 2015 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; only
- * version 2.1 of the License.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
- */
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/proc_fs.h>
-#include <linux/byteorder/generic.h>
-
-#include <lttng-events.h>
-#include <lttng-tracer.h>
-#include <wrapper/tracepoint.h>
-#include <wrapper/kstrtox.h>
-
-#define TP_MODULE_NOAUTOLOAD
-#define LTTNG_PACKAGE_BUILD
-#define CREATE_TRACE_POINTS
-#define TRACE_INCLUDE_PATH instrumentation/events/lttng-module
-#define TRACE_INCLUDE_FILE lttng-test
-#define LTTNG_INSTRUMENTATION
-#include <instrumentation/events/lttng-module/lttng-test.h>
-
-DEFINE_TRACE(lttng_test_filter_event);
-
-#define LTTNG_TEST_FILTER_EVENT_FILE	"lttng-test-filter-event"
-
-#define LTTNG_WRITE_COUNT_MAX	64
-
-static struct proc_dir_entry *lttng_test_filter_event_dentry;
-
-static
-void trace_test_event(unsigned int nr_iter)
-{
-	int i, netint;
-	long values[] = { 1, 2, 3 };
-	char text[10] = "test";
-	char escape[10] = "\\*";
-
-	for (i = 0; i < nr_iter; i++) {
-		netint = htonl(i);
-		trace_lttng_test_filter_event(i, netint, values, text, strlen(text), escape);
-	}
-}
-
-/**
- * lttng_filter_event_write - trigger a lttng_test_filter_event
- * @file: file pointer
- * @user_buf: user string
- * @count: length to copy
- *
- * Return -1 on error, with EFAULT errno. Returns count on success.
- */
-static
-ssize_t lttng_test_filter_event_write(struct file *file, const char __user *user_buf,
-		    size_t count, loff_t *ppos)
-{
-	unsigned int nr_iter;
-	ssize_t written;
-	int ret;
-
-	/* Get the number of iterations */
-	ret = lttng_kstrtouint_from_user(user_buf, count, 10, &nr_iter);
-	if (ret) {
-		written = ret;
-		goto end;
-	}
-	/* Trace the event */
-	trace_test_event(nr_iter);
-	written = count;
-	*ppos += written;
-end:
-	return written;
-}
-
-static const struct file_operations lttng_test_filter_event_operations = {
-	.write = lttng_test_filter_event_write,
-};
-
-static
-int __init lttng_test_init(void)
-{
-	int ret = 0;
-
-	(void) wrapper_lttng_fixup_sig(THIS_MODULE);
-	wrapper_vmalloc_sync_all();
-	lttng_test_filter_event_dentry =
-			proc_create_data(LTTNG_TEST_FILTER_EVENT_FILE,
-				S_IRUGO | S_IWUGO, NULL,
-				&lttng_test_filter_event_operations, NULL);
-	if (!lttng_test_filter_event_dentry) {
-		printk(KERN_ERR "Error creating LTTng test filter file\n");
-		ret = -ENOMEM;
-		goto error;
-	}
-	ret = __lttng_events_init__lttng_test();
-	if (ret)
-		goto error_events;
-	return ret;
-
-error_events:
-	remove_proc_entry(LTTNG_TEST_FILTER_EVENT_FILE, NULL);
-error:
-	return ret;
-}
-
-module_init(lttng_test_init);
-
-static
-void __exit lttng_test_exit(void)
-{
-	__lttng_events_exit__lttng_test();
-	if (lttng_test_filter_event_dentry)
-		remove_proc_entry(LTTNG_TEST_FILTER_EVENT_FILE, NULL);
-}
-
-module_exit(lttng_test_exit);
-
-MODULE_LICENSE("GPL and additional rights");
-MODULE_AUTHOR("Mathieu Desnoyers <mathieu.desnoyers@efficios.com>");
-MODULE_DESCRIPTION("LTTng Test");
-MODULE_VERSION(__stringify(LTTNG_MODULES_MAJOR_VERSION) "."
-	__stringify(LTTNG_MODULES_MINOR_VERSION) "."
-	__stringify(LTTNG_MODULES_PATCHLEVEL_VERSION)
-	LTTNG_MODULES_EXTRAVERSION);
diff --git a/drivers/staging/lttng/tests/clock-plugin/lttng-clock-plugin-test.c b/drivers/staging/lttng/tests/clock-plugin/lttng-clock-plugin-test.c
new file mode 100644
index 0000000..f16ea64
--- /dev/null
+++ b/drivers/staging/lttng/tests/clock-plugin/lttng-clock-plugin-test.c
@@ -0,0 +1,81 @@
+/*
+ * lttng-clock-plugin-test.c
+ *
+ * Copyright (C) 2014, 2016 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; only
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <linux/module.h>
+#include <linux/ktime.h>
+#include <linux/hrtimer.h>
+#include <linux/time.h>
+
+#include <lttng-clock.h>	/* From lttng-modules */
+
+static u64 trace_clock_read64_example(void)
+{
+	/* Freeze time. */
+	return 0;
+}
+
+static u64 trace_clock_freq_example(void)
+{
+	return 1000;	/* 1KHz */
+}
+
+static int trace_clock_uuid_example(char *uuid)
+{
+	const char myuuid[] = "83c63deb-7aa4-48fb-abda-946f400d76e6";
+	memcpy(uuid, myuuid, LTTNG_MODULES_UUID_STR_LEN);
+	return 0;
+}
+
+static const char *trace_clock_name_example(void)
+{
+	return "lttng_test_clock_override";
+}
+
+static const char *trace_clock_description_example(void)
+{
+	return "Freeze time with 1KHz for regression test";
+}
+
+static
+struct lttng_trace_clock ltc = {
+	.read64 = trace_clock_read64_example,
+	.freq = trace_clock_freq_example,
+	.uuid = trace_clock_uuid_example,
+	.name = trace_clock_name_example,
+	.description = trace_clock_description_example,
+};
+
+static __init
+int lttng_clock_plugin_init(void)
+{
+	return lttng_clock_register_plugin(&ltc, THIS_MODULE);
+}
+module_init(lttng_clock_plugin_init);
+
+static __exit
+void lttng_clock_plugin_exit(void)
+{
+	lttng_clock_unregister_plugin(&ltc, THIS_MODULE);
+}
+module_exit(lttng_clock_plugin_exit);
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Mathieu Desnoyers <mathieu.desnoyers@efficios.com>");
+MODULE_DESCRIPTION("LTTng Clock Plugin Example");
diff --git a/drivers/staging/lttng/tests/probes/lttng-test.c b/drivers/staging/lttng/tests/probes/lttng-test.c
new file mode 100644
index 0000000..54be4c7
--- /dev/null
+++ b/drivers/staging/lttng/tests/probes/lttng-test.c
@@ -0,0 +1,142 @@
+/*
+ * lttng-test.c
+ *
+ * Linux Trace Toolkit Next Generation Test Module
+ *
+ * Copyright 2015 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; only
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/byteorder/generic.h>
+
+#include <lttng-events.h>
+#include <lttng-tracer.h>
+#include <wrapper/tracepoint.h>
+#include <wrapper/kstrtox.h>
+
+#define TP_MODULE_NOAUTOLOAD
+#define LTTNG_PACKAGE_BUILD
+#define CREATE_TRACE_POINTS
+#define TRACE_INCLUDE_PATH instrumentation/events/lttng-module
+#define TRACE_INCLUDE_FILE lttng-test
+#define LTTNG_INSTRUMENTATION
+#include <instrumentation/events/lttng-module/lttng-test.h>
+
+DEFINE_TRACE(lttng_test_filter_event);
+
+#define LTTNG_TEST_FILTER_EVENT_FILE	"lttng-test-filter-event"
+
+#define LTTNG_WRITE_COUNT_MAX	64
+
+static struct proc_dir_entry *lttng_test_filter_event_dentry;
+
+static
+void trace_test_event(unsigned int nr_iter)
+{
+	int i, netint;
+	long values[] = { 1, 2, 3 };
+	char text[10] = "test";
+	char escape[10] = "\\*";
+
+	for (i = 0; i < nr_iter; i++) {
+		netint = htonl(i);
+		trace_lttng_test_filter_event(i, netint, values, text, strlen(text), escape);
+	}
+}
+
+/**
+ * lttng_filter_event_write - trigger a lttng_test_filter_event
+ * @file: file pointer
+ * @user_buf: user string
+ * @count: length to copy
+ *
+ * Return -1 on error, with EFAULT errno. Returns count on success.
+ */
+static
+ssize_t lttng_test_filter_event_write(struct file *file, const char __user *user_buf,
+		    size_t count, loff_t *ppos)
+{
+	unsigned int nr_iter;
+	ssize_t written;
+	int ret;
+
+	/* Get the number of iterations */
+	ret = lttng_kstrtouint_from_user(user_buf, count, 10, &nr_iter);
+	if (ret) {
+		written = ret;
+		goto end;
+	}
+	/* Trace the event */
+	trace_test_event(nr_iter);
+	written = count;
+	*ppos += written;
+end:
+	return written;
+}
+
+static const struct file_operations lttng_test_filter_event_operations = {
+	.write = lttng_test_filter_event_write,
+};
+
+static
+int __init lttng_test_init(void)
+{
+	int ret = 0;
+
+	(void) wrapper_lttng_fixup_sig(THIS_MODULE);
+	wrapper_vmalloc_sync_all();
+	lttng_test_filter_event_dentry =
+			proc_create_data(LTTNG_TEST_FILTER_EVENT_FILE,
+				S_IRUGO | S_IWUGO, NULL,
+				&lttng_test_filter_event_operations, NULL);
+	if (!lttng_test_filter_event_dentry) {
+		printk(KERN_ERR "Error creating LTTng test filter file\n");
+		ret = -ENOMEM;
+		goto error;
+	}
+	ret = __lttng_events_init__lttng_test();
+	if (ret)
+		goto error_events;
+	return ret;
+
+error_events:
+	remove_proc_entry(LTTNG_TEST_FILTER_EVENT_FILE, NULL);
+error:
+	return ret;
+}
+
+module_init(lttng_test_init);
+
+static
+void __exit lttng_test_exit(void)
+{
+	__lttng_events_exit__lttng_test();
+	if (lttng_test_filter_event_dentry)
+		remove_proc_entry(LTTNG_TEST_FILTER_EVENT_FILE, NULL);
+}
+
+module_exit(lttng_test_exit);
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Mathieu Desnoyers <mathieu.desnoyers@efficios.com>");
+MODULE_DESCRIPTION("LTTng Test");
+MODULE_VERSION(__stringify(LTTNG_MODULES_MAJOR_VERSION) "."
+	__stringify(LTTNG_MODULES_MINOR_VERSION) "."
+	__stringify(LTTNG_MODULES_PATCHLEVEL_VERSION)
+	LTTNG_MODULES_EXTRAVERSION);
-- 
2.0.2

