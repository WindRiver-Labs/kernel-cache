From d232289495d83e2d31736295a1fb2b5d00f74927 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Sat, 17 Sep 2011 10:54:16 -0400
Subject: [PATCH 285/933] Use "unknown" for compat syscalls

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/lttng-syscalls.c | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/lttng/lttng-syscalls.c b/drivers/staging/lttng/lttng-syscalls.c
index 378d9f1..40bf957 100644
--- a/drivers/staging/lttng/lttng-syscalls.c
+++ b/drivers/staging/lttng/lttng-syscalls.c
@@ -10,11 +10,19 @@
 
 #include <linux/module.h>
 #include <linux/slab.h>
+#include <linux/compat.h>
 #include <asm/ptrace.h>
 #include <asm/syscall.h>
 
 #include "ltt-events.h"
 
+#ifndef CONFIG_COMPAT
+static inline int is_compat_task(void)
+{
+	return 0;
+}
+#endif
+
 static void syscall_entry_probe(void *__data, struct pt_regs *regs, long id);
 
 /*
@@ -80,13 +88,18 @@ static void syscall_entry_unknown(struct ltt_channel *chan,
 	__event_probe__sys_unknown(event, id, args);
 }
 
+/*
+ * Currently, given that the kernel syscall metadata extraction only
+ * considers native system calls (not 32-bit compability ones), we
+ * fall-back on the "unknown" system call tracing for 32-bit compat.
+ */
 static void syscall_entry_probe(void *__data, struct pt_regs *regs, long id)
 {
 	struct trace_syscall_entry *entry;
 	struct ltt_channel *chan = __data;
 	struct ltt_event *event;
 
-	if (unlikely(id >= ARRAY_SIZE(sc_table))) {
+	if (unlikely(is_compat_task() || id >= ARRAY_SIZE(sc_table))) {
 		syscall_entry_unknown(chan, regs, id);
 		return;
 	}
-- 
2.0.2

