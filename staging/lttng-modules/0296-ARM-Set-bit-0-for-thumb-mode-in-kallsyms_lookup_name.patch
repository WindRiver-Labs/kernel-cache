From b4dcb636fd292514f67051c74c07f9c50a3ad0cd Mon Sep 17 00:00:00 2001
From: Avik Sil <avik.sil@linaro.org>
Date: Mon, 19 Sep 2011 10:59:59 -0400
Subject: [PATCH 296/757] ARM: Set bit 0 for thumb mode in kallsyms_lookup_name
 returned address

This patch fixes the undefined instruction oops due to execution
of thumb-2 code in ARM mode. The zero bit in the symbol address
returned by kallsyms_lookup_name is not set, leading to switching
to ARM mode that generates oops while executing thumb-2 code. For
detailed discussion, see [1].
[1] http://lists.casi.polymtl.ca/pipermail/ltt-dev/2011-September/005176.html

v1:
        - include wrapper function kallsyms_lookup_funcptr as suggested
        by Dave Martin

Signed-off-by: Avik Sil <avik.sil@linaro.org>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/lttng-context-prio.c | 3 ++-
 drivers/staging/lttng/wrapper/ftrace.h     | 5 +++--
 drivers/staging/lttng/wrapper/splice.c     | 3 ++-
 drivers/staging/lttng/wrapper/vmalloc.h    | 3 ++-
 4 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/drivers/staging/lttng/lttng-context-prio.c b/drivers/staging/lttng/lttng-context-prio.c
index ad1c42f..1ee3a54 100644
--- a/drivers/staging/lttng/lttng-context-prio.c
+++ b/drivers/staging/lttng/lttng-context-prio.c
@@ -13,6 +13,7 @@
 #include "ltt-events.h"
 #include "wrapper/ringbuffer/frontend_types.h"
 #include "wrapper/vmalloc.h"
+#include "wrapper/kallsyms.h"
 #include "ltt-tracer.h"
 
 static
@@ -20,7 +21,7 @@ int (*wrapper_task_prio_sym)(struct task_struct *t);
 
 int wrapper_task_prio_init(void)
 {
-	wrapper_task_prio_sym = (void *) kallsyms_lookup_name("task_prio");
+	wrapper_task_prio_sym = (void *) kallsyms_lookup_funcptr("task_prio");
 	if (!wrapper_task_prio_sym) {
 		printk(KERN_WARNING "LTTng: task_prio symbol lookup failed.\n");
 		return -EINVAL;
diff --git a/drivers/staging/lttng/wrapper/ftrace.h b/drivers/staging/lttng/wrapper/ftrace.h
index 9c18cc5..ace33c5 100644
--- a/drivers/staging/lttng/wrapper/ftrace.h
+++ b/drivers/staging/lttng/wrapper/ftrace.h
@@ -16,6 +16,7 @@
 #ifdef CONFIG_KALLSYMS
 
 #include <linux/kallsyms.h>
+#include "kallsyms.h"
 
 static inline
 int wrapper_register_ftrace_function_probe(char *glob,
@@ -24,7 +25,7 @@ int wrapper_register_ftrace_function_probe(char *glob,
 	int (*register_ftrace_function_probe_sym)(char *glob,
 			struct ftrace_probe_ops *ops, void *data);
 
-	register_ftrace_function_probe_sym = (void *) kallsyms_lookup_name("register_ftrace_function_probe");
+	register_ftrace_function_probe_sym = (void *) kallsyms_lookup_funcptr("register_ftrace_function_probe");
 	if (register_ftrace_function_probe_sym) {
 		return register_ftrace_function_probe_sym(glob, ops, data);
 	} else {
@@ -40,7 +41,7 @@ void wrapper_unregister_ftrace_function_probe(char *glob,
 	void (*unregister_ftrace_function_probe_sym)(char *glob,
 			struct ftrace_probe_ops *ops, void *data);
 
-	unregister_ftrace_function_probe_sym = (void *) kallsyms_lookup_name("unregister_ftrace_function_probe");
+	unregister_ftrace_function_probe_sym = (void *) kallsyms_lookup_funcptr("unregister_ftrace_function_probe");
 	if (unregister_ftrace_function_probe_sym) {
 		unregister_ftrace_function_probe_sym(glob, ops, data);
 	} else {
diff --git a/drivers/staging/lttng/wrapper/splice.c b/drivers/staging/lttng/wrapper/splice.c
index edc499c..ba224ee 100644
--- a/drivers/staging/lttng/wrapper/splice.c
+++ b/drivers/staging/lttng/wrapper/splice.c
@@ -13,6 +13,7 @@
 #include <linux/kallsyms.h>
 #include <linux/fs.h>
 #include <linux/splice.h>
+#include "kallsyms.h"
 
 static
 ssize_t (*splice_to_pipe_sym)(struct pipe_inode_info *pipe,
@@ -22,7 +23,7 @@ ssize_t wrapper_splice_to_pipe(struct pipe_inode_info *pipe,
 			       struct splice_pipe_desc *spd)
 {
 	if (!splice_to_pipe_sym)
-		splice_to_pipe_sym = (void *) kallsyms_lookup_name("splice_to_pipe");
+		splice_to_pipe_sym = (void *) kallsyms_lookup_funcptr("splice_to_pipe"); 
 	if (splice_to_pipe_sym) {
 		return splice_to_pipe_sym(pipe, spd);
 	} else {
diff --git a/drivers/staging/lttng/wrapper/vmalloc.h b/drivers/staging/lttng/wrapper/vmalloc.h
index 7d87855..765f2ad 100644
--- a/drivers/staging/lttng/wrapper/vmalloc.h
+++ b/drivers/staging/lttng/wrapper/vmalloc.h
@@ -14,13 +14,14 @@
 #ifdef CONFIG_KALLSYMS
 
 #include <linux/kallsyms.h>
+#include "kallsyms.h"
 
 static inline
 void wrapper_vmalloc_sync_all(void)
 {
 	void (*vmalloc_sync_all_sym)(void);
 
-	vmalloc_sync_all_sym = (void *) kallsyms_lookup_name("vmalloc_sync_all");
+	vmalloc_sync_all_sym = (void *) kallsyms_lookup_funcptr("vmalloc_sync_all");
 	if (vmalloc_sync_all_sym) {
 		vmalloc_sync_all_sym();
 	} else {
-- 
2.0.2

