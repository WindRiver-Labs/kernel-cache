From ac2427bf2efbda11c4ce44c84b01348010e79b17 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Wed, 11 May 2011 09:24:54 -0400
Subject: [PATCH 064/540] Remove dependency on vmalloc_sync_all symbol

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../lttng2/lib/ringbuffer/ring_buffer_backend.c    |  4 +-
 drivers/staging/lttng2/ltt-debugfs-abi.c           |  4 +-
 drivers/staging/lttng2/ltt-events.c                |  4 +-
 drivers/staging/lttng2/ltt-ring-buffer-client.h    |  4 +-
 drivers/staging/lttng2/probes/lttng-events.h       |  4 +-
 drivers/staging/lttng2/probes/lttng-types.c        |  4 +-
 drivers/staging/lttng2/wrapper/symbols.h           | 43 ++++++++++++++++++++++
 7 files changed, 55 insertions(+), 12 deletions(-)
 create mode 100644 drivers/staging/lttng2/wrapper/symbols.h

diff --git a/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c b/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c
index f9ec3d1..2d272c7 100644
--- a/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c
+++ b/drivers/staging/lttng2/lib/ringbuffer/ring_buffer_backend.c
@@ -6,7 +6,6 @@
  * Dual LGPL v2.1/GPL v2 license.
  */
 
-#include <linux/vmalloc.h>
 #include <linux/stddef.h>
 #include <linux/module.h>
 #include <linux/string.h>
@@ -17,6 +16,7 @@
 #include <linux/cpu.h>
 #include <linux/mm.h>
 
+#include "../../wrapper/symbols.h"	/* for wrapper_vmalloc_sync_all() */
 #include "../../wrapper/ringbuffer/config.h"
 #include "../../wrapper/ringbuffer/backend.h"
 #include "../../wrapper/ringbuffer/frontend.h"
@@ -131,7 +131,7 @@ int lib_ring_buffer_backend_allocate(const struct lib_ring_buffer_config *config
 	 * If kmalloc ever uses vmalloc underneath, make sure the buffer pages
 	 * will not fault.
 	 */
-	vmalloc_sync_all();
+	wrapper_vmalloc_sync_all();
 	kfree(virt);
 	kfree(pages);
 	return 0;
diff --git a/drivers/staging/lttng2/ltt-debugfs-abi.c b/drivers/staging/lttng2/ltt-debugfs-abi.c
index 2f200ed..4319ef3 100644
--- a/drivers/staging/lttng2/ltt-debugfs-abi.c
+++ b/drivers/staging/lttng2/ltt-debugfs-abi.c
@@ -28,7 +28,7 @@
 #include <linux/file.h>
 #include <linux/uaccess.h>
 #include <linux/slab.h>
-#include <linux/vmalloc.h>	/* For vmalloc_sync_all */
+#include "wrapper/symbols.h"	/* for wrapper_vmalloc_sync_all() */
 #include "wrapper/ringbuffer/vfs.h"
 #include "ltt-debugfs-abi.h"
 #include "ltt-events.h"
@@ -538,7 +538,7 @@ int __init ltt_debugfs_abi_init(void)
 {
 	int ret = 0;
 
-	vmalloc_sync_all();
+	wrapper_vmalloc_sync_all();
 	lttng_dentry = debugfs_create_file("lttng", S_IWUSR, NULL, NULL,
 					   &lttng_fops);
 	if (IS_ERR(lttng_dentry) || !lttng_dentry) {
diff --git a/drivers/staging/lttng2/ltt-events.c b/drivers/staging/lttng2/ltt-events.c
index 93638cd..9eb2c2f2 100644
--- a/drivers/staging/lttng2/ltt-events.c
+++ b/drivers/staging/lttng2/ltt-events.c
@@ -11,7 +11,7 @@
 #include <linux/mutex.h>
 #include <linux/sched.h>
 #include <linux/slab.h>
-#include <linux/vmalloc.h>	/* For vmalloc_sync_all */
+#include "wrapper/symbols.h"	/* for wrapper_vmalloc_sync_all() */
 #include "ltt-events.h"
 
 static LIST_HEAD(sessions);
@@ -269,7 +269,7 @@ void ltt_transport_register(struct ltt_transport *transport)
 	 * registered. We deal with this here so we don't have to call
 	 * vmalloc_sync_all() in each module's init.
 	 */
-	vmalloc_sync_all();
+	wrapper_vmalloc_sync_all();
 
 	mutex_lock(&sessions_mutex);
 	list_add_tail(&transport->node, &ltt_transport_list);
diff --git a/drivers/staging/lttng2/ltt-ring-buffer-client.h b/drivers/staging/lttng2/ltt-ring-buffer-client.h
index e889c57..00cac16 100644
--- a/drivers/staging/lttng2/ltt-ring-buffer-client.h
+++ b/drivers/staging/lttng2/ltt-ring-buffer-client.h
@@ -10,7 +10,7 @@
 
 #include <linux/module.h>
 #include <linux/types.h>
-#include <linux/vmalloc.h>	/* for vmalloc_sync_all */
+#include "wrapper/symbols.h"	/* for wrapper_vmalloc_sync_all() */
 #include "wrapper/trace-clock.h"
 #include "ltt-events.h"
 #include "ltt-tracer.h"
@@ -203,7 +203,7 @@ static int __init ltt_ring_buffer_client_init(void)
 	 * This vmalloc sync all also takes care of the lib ring buffer
 	 * vmalloc'd module pages when it is built as a module into LTTng.
 	 */
-	vmalloc_sync_all();
+	wrapper_vmalloc_sync_all();
 	printk(KERN_INFO "LTT : ltt ring buffer client init\n");
 	ltt_transport_register(&ltt_relay_transport);
 	return 0;
diff --git a/drivers/staging/lttng2/probes/lttng-events.h b/drivers/staging/lttng2/probes/lttng-events.h
index 38c61cd..f697ead 100644
--- a/drivers/staging/lttng2/probes/lttng-events.h
+++ b/drivers/staging/lttng2/probes/lttng-events.h
@@ -1,7 +1,7 @@
 #include <lttng.h>
 #include <lttng-types.h>
 #include <linux/debugfs.h>
-#include <linux/vmalloc.h>	/* for vmalloc_sync_all() */
+#include "../wrapper/symbols.h"	/* for wrapper_vmalloc_sync_all() */
 #include "../wrapper/ringbuffer/frontend_types.h"
 #include "../ltt-events.h"
 #include "../ltt-tracer-core.h"
@@ -573,7 +573,7 @@ static int TP_ID(__lttng_events_init__, TRACE_SYSTEM)(void)
 	int ret;
 	int i;
 
-	vmalloc_sync_all();
+	wrapper_vmalloc_sync_all();
 	ret = TP_ID(__lttng_types_init__, TRACE_SYSTEM)();
 	if (ret)
 		return ret;
diff --git a/drivers/staging/lttng2/probes/lttng-types.c b/drivers/staging/lttng2/probes/lttng-types.c
index a4b40cf..7f9d20e 100644
--- a/drivers/staging/lttng2/probes/lttng-types.c
+++ b/drivers/staging/lttng2/probes/lttng-types.c
@@ -11,7 +11,7 @@
 #include <linux/seq_file.h>
 #include <linux/jbd.h>	/* tid_t */
 #include <linux/debugfs.h>
-#include <linux/vmalloc.h>	/* for vmalloc_sync_all */
+#include "../wrapper/symbols.h"	/* for wrapper_vmalloc_sync_all() */
 #include "lttng-types.h"
 
 struct dentry *lttng_types_dentry;
@@ -186,7 +186,7 @@ static int lttng_types_init(void)
 {
 	int ret = 0;
 
-	vmalloc_sync_all();
+	wrapper_vmalloc_sync_all();
 	lttng_types_dentry = debugfs_create_file("lttng-types", S_IWUSR,
 					NULL, NULL, &lttng_types_fops);
 	if (IS_ERR(lttng_types_dentry) || !lttng_types_dentry) {
diff --git a/drivers/staging/lttng2/wrapper/symbols.h b/drivers/staging/lttng2/wrapper/symbols.h
new file mode 100644
index 0000000..523f553
--- /dev/null
+++ b/drivers/staging/lttng2/wrapper/symbols.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2011 Mathieu Desnoyers (mathieu.desnoyers@efficios.com)
+ *
+ * wrapper around vmalloc_sync_all. Using KALLSYMS to get its address when
+ * available, else we need to have a kernel that exports this function to GPL
+ * modules.
+ *
+ * Dual LGPL v2.1/GPL v2 license.
+ */
+
+#ifdef CONFIG_KALLSYMS
+
+#include <linux/kallsyms.h>
+
+static inline
+void wrapper_vmalloc_sync_all(void)
+{
+	void (*vmalloc_sync_all_sym)(void);
+
+	vmalloc_sync_all_sym = (void *) kallsyms_lookup_name("vmalloc_sync_all");
+	if (vmalloc_sync_all_sym) {
+		vmalloc_sync_all_sym();
+	} else {
+#ifdef CONFIG_X86
+		/*
+		 * Only x86 needs vmalloc_sync_all to make sure LTTng does not
+		 * trigger recursive page faults.
+		 */
+		printk(KERN_WARNING "LTTng: vmalloc_sync_all symbol lookup failed.\n");
+		printk(KERN_WARNING "Page fault handler and NMI tracing might trigger faults.\n");
+#endif
+	}
+}
+#else
+
+#include <linux/vmalloc.h>
+
+static inline
+void wrapper_vmalloc_sync_all(void)
+{
+	return vmalloc_sync_all();
+}
+#endif
-- 
1.8.4.93.g57e4c17

