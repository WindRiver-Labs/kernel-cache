From 383ffe20ae681643082785c87ff139c0473ad28a Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Thu, 19 May 2011 00:35:59 -0400
Subject: [PATCH 094/757] Add vmalloc sync all calls in ftrace and kprobes
 modules

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/probes/lttng-ftrace.c  | 5 +++++
 drivers/staging/lttng/probes/lttng-kprobes.c | 9 +++++++++
 2 files changed, 14 insertions(+)

diff --git a/drivers/staging/lttng/probes/lttng-ftrace.c b/drivers/staging/lttng/probes/lttng-ftrace.c
index f219037..27f4e2b 100644
--- a/drivers/staging/lttng/probes/lttng-ftrace.c
+++ b/drivers/staging/lttng/probes/lttng-ftrace.c
@@ -19,6 +19,7 @@
 #include "../ltt-events.h"
 #include "../wrapper/ringbuffer/frontend_types.h"
 #include "../wrapper/ftrace.h"
+#include "../wrapper/vmalloc.h"
 #include "../ltt-tracer.h"
 
 static
@@ -115,6 +116,9 @@ int lttng_ftrace_register(const char *name,
 	if (!event->u.ftrace.symbol_name)
 		goto name_error;
 
+	/* Ensure the memory we just allocated don't trigger page faults */
+	wrapper_vmalloc_sync_all();
+
 	ret = wrapper_register_ftrace_function_probe(event->u.ftrace.symbol_name,
 			&lttng_ftrace_ops, event);
 	if (ret)
@@ -144,6 +148,7 @@ EXPORT_SYMBOL_GPL(lttng_ftrace_unregister);
 /* This module is permanent. */
 int lttng_ftrace_init(void)
 {
+	wrapper_vmalloc_sync_all();
 	return 0;
 }
 module_init(lttng_ftrace_init)
diff --git a/drivers/staging/lttng/probes/lttng-kprobes.c b/drivers/staging/lttng/probes/lttng-kprobes.c
index 9d9fb5b..daef360 100644
--- a/drivers/staging/lttng/probes/lttng-kprobes.c
+++ b/drivers/staging/lttng/probes/lttng-kprobes.c
@@ -12,6 +12,7 @@
 #include <linux/slab.h>
 #include "../ltt-events.h"
 #include "../wrapper/ringbuffer/frontend_types.h"
+#include "../wrapper/vmalloc.h"
 #include "../ltt-tracer.h"
 
 static
@@ -101,6 +102,14 @@ int lttng_kprobes_register(const char *name,
 		event->u.kprobe.symbol_name;
 	event->u.kprobe.kp.offset = offset;
 	event->u.kprobe.kp.addr = (void *) addr;
+
+	/*
+	 * Ensure the memory we just allocated don't trigger page faults.
+	 * Well.. kprobes itself puts the page fault handler on the blacklist,
+	 * but we can never be too careful.
+	 */
+	wrapper_vmalloc_sync_all();
+
 	ret = register_kprobe(&event->u.kprobe.kp);
 	if (ret)
 		goto register_error;
-- 
2.0.2

