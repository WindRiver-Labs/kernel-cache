From e077197fdfba5593ad7df096b6c5bd151613d5fe Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Sat, 16 Jul 2011 13:15:34 -0400
Subject: [PATCH 215/625] Cleanup ltt-tracer.h: drop comments and
 LTT_RESERVE_CRITICAL

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Signed-off-by: Jianchuan Wang <jianchuan.wang@windriver.com>
[Rename patch subject to avoid name conflict]
Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 drivers/staging/lttng2/ltt-tracer.h | 29 -----------------------------
 1 file changed, 29 deletions(-)

diff --git a/drivers/staging/lttng2/ltt-tracer.h b/drivers/staging/lttng2/ltt-tracer.h
index c40fa67..2fbe1bc 100644
--- a/drivers/staging/lttng2/ltt-tracer.h
+++ b/drivers/staging/lttng2/ltt-tracer.h
@@ -35,27 +35,6 @@
 
 /* Number of bytes to log with a read/write event */
 #define LTT_LOG_RW_SIZE			32L
-
-/*
- * Hardcoded event headers
- *
- * event header for a trace with active heartbeat : 27 bits timestamps
- *
- * headers are 32-bits aligned. In order to insure such alignment, a dynamic per
- * trace alignment value must be done.
- *
- * Remember that the C compiler does align each member on the boundary
- * equivalent to their own size.
- *
- * As relay subbuffers are aligned on pages, we are sure that they are 4 and 8
- * bytes aligned, so the buffer header and trace header are aligned.
- *
- * Event headers are aligned depending on the trace alignment option.
- *
- * Note using C structure bitfields for cross-endianness and portability
- * concerns.
- */
-
 #define LTT_MAX_SMALL_SIZE		0xFFFFU
 
 #ifdef RING_BUFFER_ALIGN
@@ -76,14 +55,6 @@
  */
 #define LTTNG_METADATA_TIMEOUT_MSEC	10000
 
-/*
- * Size reserved for high priority events (interrupts, NMI, BH) at the end of a
- * nearly full buffer. User space won't use this last amount of space when in
- * blocking mode. This space also includes the event header that would be
- * written by this user space event.
- */
-#define LTT_RESERVE_CRITICAL		4096
-
 #define LTT_RFLAG_EXTENDED		RING_BUFFER_RFLAG_END
 #define LTT_RFLAG_END			(LTT_RFLAG_EXTENDED << 1)
 
-- 
2.0.2

