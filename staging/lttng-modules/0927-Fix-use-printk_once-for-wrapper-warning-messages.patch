From dbbec1466309dc4f1eff122304f4f505dfc4f00b Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Tue, 30 Aug 2016 18:42:10 -0400
Subject: [PATCH 927/933] Fix: use printk_once() for wrapper warning messages

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/wrapper/ftrace.h      | 4 ++--
 drivers/staging/lttng/wrapper/genhd.h       | 6 +++---
 drivers/staging/lttng/wrapper/irqdesc.c     | 2 +-
 drivers/staging/lttng/wrapper/splice.c      | 2 +-
 drivers/staging/lttng/wrapper/trace-clock.h | 4 ++--
 drivers/staging/lttng/wrapper/tracepoint.h  | 2 +-
 drivers/staging/lttng/wrapper/vmalloc.h     | 4 ++--
 drivers/staging/lttng/wrapper/writeback.h   | 2 +-
 8 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/drivers/staging/lttng/wrapper/ftrace.h b/drivers/staging/lttng/wrapper/ftrace.h
index 6fd1d55..5a96438 100644
--- a/drivers/staging/lttng/wrapper/ftrace.h
+++ b/drivers/staging/lttng/wrapper/ftrace.h
@@ -43,7 +43,7 @@ int wrapper_register_ftrace_function_probe(char *glob,
 	if (register_ftrace_function_probe_sym) {
 		return register_ftrace_function_probe_sym(glob, ops, data);
 	} else {
-		printk(KERN_WARNING "LTTng: register_ftrace_function_probe symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: register_ftrace_function_probe symbol lookup failed.\n");
 		return -EINVAL;
 	}
 }
@@ -59,7 +59,7 @@ void wrapper_unregister_ftrace_function_probe(char *glob,
 	if (unregister_ftrace_function_probe_sym) {
 		unregister_ftrace_function_probe_sym(glob, ops, data);
 	} else {
-		printk(KERN_WARNING "LTTng: unregister_ftrace_function_probe symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: unregister_ftrace_function_probe symbol lookup failed.\n");
 		WARN_ON(1);
 	}
 }
diff --git a/drivers/staging/lttng/wrapper/genhd.h b/drivers/staging/lttng/wrapper/genhd.h
index 4184bd0..70b8d3f 100644
--- a/drivers/staging/lttng/wrapper/genhd.h
+++ b/drivers/staging/lttng/wrapper/genhd.h
@@ -41,7 +41,7 @@ char *wrapper_disk_name(struct gendisk *hd, int partno, char *buf)
 	if (disk_name_sym) {
 		return disk_name_sym(hd, partno, buf);
 	} else {
-		printk(KERN_WARNING "LTTng: disk_name symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: disk_name symbol lookup failed.\n");
 		return NULL;
 	}
 }
@@ -65,7 +65,7 @@ struct class *wrapper_get_block_class(void)
 
 	ptr_block_class = (struct class *) kallsyms_lookup_dataptr("block_class");
 	if (!ptr_block_class) {
-		printk(KERN_WARNING "LTTng: block_class symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: block_class symbol lookup failed.\n");
 		return NULL;
 	}
 	return ptr_block_class;
@@ -78,7 +78,7 @@ struct device_type *wrapper_get_disk_type(void)
 
 	ptr_disk_type = (struct device_type *) kallsyms_lookup_dataptr("disk_type");
 	if (!ptr_disk_type) {
-		printk(KERN_WARNING "LTTng: disk_type symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: disk_type symbol lookup failed.\n");
 		return NULL;
 	}
 	return ptr_disk_type;
diff --git a/drivers/staging/lttng/wrapper/irqdesc.c b/drivers/staging/lttng/wrapper/irqdesc.c
index 6ef86c2..fd3f0c1 100644
--- a/drivers/staging/lttng/wrapper/irqdesc.c
+++ b/drivers/staging/lttng/wrapper/irqdesc.c
@@ -40,7 +40,7 @@ struct irq_desc *wrapper_irq_to_desc(unsigned int irq)
 	if (irq_to_desc_sym) {
 		return irq_to_desc_sym(irq);
 	} else {
-		printk(KERN_WARNING "LTTng: irq_to_desc symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: irq_to_desc symbol lookup failed.\n");
 		return NULL;
 	}
 }
diff --git a/drivers/staging/lttng/wrapper/splice.c b/drivers/staging/lttng/wrapper/splice.c
index 357e1ac..d24ef3d 100644
--- a/drivers/staging/lttng/wrapper/splice.c
+++ b/drivers/staging/lttng/wrapper/splice.c
@@ -41,7 +41,7 @@ ssize_t wrapper_splice_to_pipe(struct pipe_inode_info *pipe,
 	if (splice_to_pipe_sym) {
 		return splice_to_pipe_sym(pipe, spd);
 	} else {
-		printk(KERN_WARNING "LTTng: splice_to_pipe symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: splice_to_pipe symbol lookup failed.\n");
 		return -ENOSYS;
 	}
 }
diff --git a/drivers/staging/lttng/wrapper/trace-clock.h b/drivers/staging/lttng/wrapper/trace-clock.h
index 1d14cb9..3e8780d 100644
--- a/drivers/staging/lttng/wrapper/trace-clock.h
+++ b/drivers/staging/lttng/wrapper/trace-clock.h
@@ -175,13 +175,13 @@ static inline const char *trace_clock_description_monotonic(void)
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,17,0))
 static inline int get_trace_clock(void)
 {
-	printk(KERN_WARNING "LTTng: Using mainline kernel monotonic fast clock, which is NMI-safe.\n");
+	printk_once(KERN_WARNING "LTTng: Using mainline kernel monotonic fast clock, which is NMI-safe.\n");
 	return 0;
 }
 #else /* #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,17,0)) */
 static inline int get_trace_clock(void)
 {
-	printk(KERN_WARNING "LTTng: Using mainline kernel monotonic clock. NMIs will not be traced.\n");
+	printk_once(KERN_WARNING "LTTng: Using mainline kernel monotonic clock. NMIs will not be traced.\n");
 	return 0;
 }
 #endif /* #else #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,17,0)) */
diff --git a/drivers/staging/lttng/wrapper/tracepoint.h b/drivers/staging/lttng/wrapper/tracepoint.h
index 023086e..367cdf4 100644
--- a/drivers/staging/lttng/wrapper/tracepoint.h
+++ b/drivers/staging/lttng/wrapper/tracepoint.h
@@ -82,7 +82,7 @@ int wrapper_tracepoint_module_notify(struct notifier_block *nb,
 	if (tracepoint_module_notify_sym) {
 		return tracepoint_module_notify_sym(nb, val, mod);
 	} else {
-		printk(KERN_WARNING "LTTng: tracepoint_module_notify symbol lookup failed. It probably means you kernel don't need this work-around. Please consider upgrading LTTng modules to make this warning go away.\n");
+		printk_once(KERN_WARNING "LTTng: tracepoint_module_notify symbol lookup failed. It probably means you kernel don't need this work-around. Please consider upgrading LTTng modules to make this warning go away.\n");
 		return -ENOSYS;
 	}
 }
diff --git a/drivers/staging/lttng/wrapper/vmalloc.h b/drivers/staging/lttng/wrapper/vmalloc.h
index dad8d4e..2332439 100644
--- a/drivers/staging/lttng/wrapper/vmalloc.h
+++ b/drivers/staging/lttng/wrapper/vmalloc.h
@@ -44,8 +44,8 @@ void wrapper_vmalloc_sync_all(void)
 		 * Only x86 needs vmalloc_sync_all to make sure LTTng does not
 		 * trigger recursive page faults.
 		 */
-		printk(KERN_WARNING "LTTng: vmalloc_sync_all symbol lookup failed.\n");
-		printk(KERN_WARNING "Page fault handler and NMI tracing might trigger faults.\n");
+		printk_once(KERN_WARNING "LTTng: vmalloc_sync_all symbol lookup failed.\n");
+		printk_once(KERN_WARNING "Page fault handler and NMI tracing might trigger faults.\n");
 #endif
 	}
 }
diff --git a/drivers/staging/lttng/wrapper/writeback.h b/drivers/staging/lttng/wrapper/writeback.h
index 3e8a9f5..cdcbd58 100644
--- a/drivers/staging/lttng/wrapper/writeback.h
+++ b/drivers/staging/lttng/wrapper/writeback.h
@@ -41,7 +41,7 @@ unsigned long wrapper_global_dirty_limit(void)
 	if (global_dirty_limit_sym) {
 		return *global_dirty_limit_sym;
 	} else {
-		printk(KERN_WARNING "LTTng: global_dirty_limit symbol lookup failed.\n");
+		printk_once(KERN_WARNING "LTTng: global_dirty_limit symbol lookup failed.\n");
 		return 0;
 	}
 }
-- 
2.0.2

