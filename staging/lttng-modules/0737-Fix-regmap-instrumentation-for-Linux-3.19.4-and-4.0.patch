From 6cbab8c75a2dab9c6887d029e9409c67a8f31b37 Mon Sep 17 00:00:00 2001
From: Simon Marchi <simon.marchi@polymtl.ca>
Date: Thu, 16 Apr 2015 16:45:09 -0400
Subject: [PATCH 737/933] Fix: regmap instrumentation for Linux 3.19.4 and 4.0

This is necessary after commit c6b570d97c0e77f570bb6b2ed30d372b2b1e9aae
in the kernel.

[ Edit by Mathieu Desnoyers: fix DECLARE_EVENT_CLASS regmap_reg too. ]

Signed-off-by: Simon Marchi <simon.marchi@polymtl.ca>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 .../instrumentation/events/lttng-module/regmap.h   | 139 +++++++++++++++++++--
 1 file changed, 132 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h b/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h
index eef3c6c..358d744 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/regmap.h
@@ -14,6 +14,39 @@ struct device;
 struct regmap;
 #endif
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,4))
+/*
+ * Log register events
+ */
+LTTNG_TRACEPOINT_EVENT_CLASS(regmap_reg,
+
+	TP_PROTO(struct regmap *map, unsigned int reg,
+		 unsigned int val),
+
+	TP_ARGS(map, reg, val),
+
+	TP_FIELDS(
+		ctf_string(name, regmap_name(map))
+		ctf_integer(unsigned int, reg, reg)
+		ctf_integer(unsigned int, val, val)
+	)
+)
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_write,
+
+	TP_PROTO(struct regmap *map, unsigned int reg,
+		 unsigned int val),
+
+	TP_ARGS(map, reg, val)
+)
+
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_read,
+
+	TP_PROTO(struct regmap *map, unsigned int reg,
+		 unsigned int val),
+
+	TP_ARGS(map, reg, val)
+)
+#else
 /*
  * Log register events
  */
@@ -37,7 +70,6 @@ LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_write,
 		 unsigned int val),
 
 	TP_ARGS(dev, reg, val)
-
 )
 
 LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_read,
@@ -46,20 +78,69 @@ LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_read,
 		 unsigned int val),
 
 	TP_ARGS(dev, reg, val)
-
 )
+#endif
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,4))
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_read_cache,
+
+	TP_PROTO(struct regmap *map, unsigned int reg,
+		 unsigned int val),
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
+	TP_ARGS(map, reg, val)
+)
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
 LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_reg, regmap_reg_read_cache,
 
 	TP_PROTO(struct device *dev, unsigned int reg,
 		 unsigned int val),
 
 	TP_ARGS(dev, reg, val)
-
 )
 #endif
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,4))
+LTTNG_TRACEPOINT_EVENT_CLASS(regmap_block,
+
+	TP_PROTO(struct regmap *map, unsigned int reg, int count),
+
+	TP_ARGS(map, reg, count),
+
+	TP_FIELDS(
+		ctf_string(name, regmap_name(map))
+		ctf_integer(unsigned int, reg, reg)
+		ctf_integer(int, count, count)
+	)
+)
+
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_read_start,
+
+	TP_PROTO(struct regmap *map, unsigned int reg, int count),
+
+	TP_ARGS(map, reg, count)
+)
+
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_read_done,
+
+	TP_PROTO(struct regmap *map, unsigned int reg, int count),
+
+	TP_ARGS(map, reg, count)
+)
+
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_write_start,
+
+	TP_PROTO(struct regmap *map, unsigned int reg, int count),
+
+	TP_ARGS(map, reg, count)
+)
+
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_write_done,
+
+	TP_PROTO(struct regmap *map, unsigned int reg, int count),
+
+	TP_ARGS(map, reg, count)
+)
+#else
 LTTNG_TRACEPOINT_EVENT_CLASS(regmap_block,
 
 	TP_PROTO(struct device *dev, unsigned int reg, int count),
@@ -100,7 +181,25 @@ LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_block, regmap_hw_write_done,
 
 	TP_ARGS(dev, reg, count)
 )
+#endif
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,4))
+LTTNG_TRACEPOINT_EVENT_MAP(regcache_sync,
+
+	regmap_regcache_sync,
 
+	TP_PROTO(struct regmap *map, const char *type,
+		 const char *status),
+
+	TP_ARGS(map, type, status),
+
+	TP_FIELDS(
+		ctf_string(name, regmap_name(map))
+		ctf_string(status, status)
+		ctf_string(type, type)
+	)
+)
+#else
 LTTNG_TRACEPOINT_EVENT_MAP(regcache_sync,
 
 	regmap_regcache_sync,
@@ -116,8 +215,36 @@ LTTNG_TRACEPOINT_EVENT_MAP(regcache_sync,
 		ctf_string(type, type)
 	)
 )
+#endif
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,19,4))
+LTTNG_TRACEPOINT_EVENT_CLASS(regmap_bool,
+
+	TP_PROTO(struct regmap *map, bool flag),
+
+	TP_ARGS(map, flag),
+
+	TP_FIELDS(
+		ctf_string(name, regmap_name(map))
+		ctf_integer(int, flag, flag)
+	)
+)
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_bool, regmap_cache_only,
+
+	TP_PROTO(struct regmap *map, bool flag),
+
+	TP_ARGS(map, flag)
+)
+
+LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_bool, regmap_cache_bypass,
+
+	TP_PROTO(struct regmap *map, bool flag),
+
+	TP_ARGS(map, flag)
+
+)
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
 LTTNG_TRACEPOINT_EVENT_CLASS(regmap_bool,
 
 	TP_PROTO(struct device *dev, bool flag),
@@ -135,7 +262,6 @@ LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_bool, regmap_cache_only,
 	TP_PROTO(struct device *dev, bool flag),
 
 	TP_ARGS(dev, flag)
-
 )
 
 LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_bool, regmap_cache_bypass,
@@ -143,7 +269,6 @@ LTTNG_TRACEPOINT_EVENT_INSTANCE(regmap_bool, regmap_cache_bypass,
 	TP_PROTO(struct device *dev, bool flag),
 
 	TP_ARGS(dev, flag)
-
 )
 #endif
 
-- 
2.0.2

