From 9cef40d27c7825cf21189ed7db7dd1b56a815c6b Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Wed, 9 Jan 2013 12:40:55 -0500
Subject: [PATCH 463/625] Fix: statedump hang/too early completion due to logic
 error

The previous "Fix: statedump hang due to incorrect wait/wakeup use" was
not actually fixing the real problem.

The issue is that we should pass the expected condition to wait_event()
rather than its contrary.

This bug has been sitting there for a while. I suspect that a recent
change in the Linux scheduler behavior for newly spawned worker threads
might have contributed to trigger the hang more reliably.

The effects of this bugs are:
- possible hang of the lttng-sessiond (within the kernel) at tracing
  start,
- the statedump end event is traced before all worker threads have
  actually completed, which can confuse LTTng viewer state systems.

Reported-by: Phil Wilshire <sysdcs@gmail.com>
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Signed-off-by: Jianchuan Wang <jianchuan.wang@windriver.com>
---
 drivers/staging/lttng2/lttng-statedump-impl.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/staging/lttng2/lttng-statedump-impl.c b/drivers/staging/lttng2/lttng-statedump-impl.c
index 765fcea..bbe0a15 100644
--- a/drivers/staging/lttng2/lttng-statedump-impl.c
+++ b/drivers/staging/lttng2/lttng-statedump-impl.c
@@ -397,7 +397,7 @@ int do_lttng_statedump(struct lttng_session *session)
 		schedule_delayed_work_on(cpu, &cpu_work[cpu], 0);
 	}
 	/* Wait for all threads to run */
-	wait_event(statedump_wq, (atomic_read(&kernel_threads_to_run) != 0));
+	__wait_event(statedump_wq, (atomic_read(&kernel_threads_to_run) == 0));
 	put_online_cpus();
 	/* Our work is done */
 	printk(KERN_DEBUG "LTT state dump end\n");
-- 
2.0.2

