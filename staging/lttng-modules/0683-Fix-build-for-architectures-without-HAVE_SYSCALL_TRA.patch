From 01aae41d5ebfabd53a243a6035286a700f1f37c4 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Wed, 12 Nov 2014 14:29:47 -0500
Subject: [PATCH 683/933] Fix: build for architectures without
 HAVE_SYSCALL_TRACEPOINTS

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 drivers/staging/lttng/lttng-abi.c      | 37 ---------------------------------
 drivers/staging/lttng/lttng-events.h   | 13 +++++++++---
 drivers/staging/lttng/lttng-syscalls.c | 38 ++++++++++++++++++++++++++++++++++
 3 files changed, 48 insertions(+), 40 deletions(-)

diff --git a/drivers/staging/lttng/lttng-abi.c b/drivers/staging/lttng/lttng-abi.c
index b83ed3d..381a739 100644
--- a/drivers/staging/lttng/lttng-abi.c
+++ b/drivers/staging/lttng/lttng-abi.c
@@ -144,43 +144,6 @@ fd_error:
 }
 
 static
-int lttng_abi_syscall_list(void)
-{
-	struct file *syscall_list_file;
-	int file_fd, ret;
-
-	file_fd = get_unused_fd();
-	if (file_fd < 0) {
-		ret = file_fd;
-		goto fd_error;
-	}
-
-	syscall_list_file = anon_inode_getfile("[lttng_syscall_list]",
-					  &lttng_syscall_list_fops,
-					  NULL, O_RDWR);
-	if (IS_ERR(syscall_list_file)) {
-		ret = PTR_ERR(syscall_list_file);
-		goto file_error;
-	}
-	ret = lttng_syscall_list_fops.open(NULL, syscall_list_file);
-	if (ret < 0)
-		goto open_error;
-	fd_install(file_fd, syscall_list_file);
-	if (file_fd < 0) {
-		ret = file_fd;
-		goto fd_error;
-	}
-	return file_fd;
-
-open_error:
-	fput(syscall_list_file);
-file_error:
-	put_unused_fd(file_fd);
-fd_error:
-	return ret;
-}
-
-static
 void lttng_abi_tracer_version(struct lttng_kernel_tracer_version *v)
 {
 	v->major = LTTNG_MODULES_MAJOR_VERSION;
diff --git a/drivers/staging/lttng/lttng-events.h b/drivers/staging/lttng/lttng-events.h
index a537673..e5cd0ee 100644
--- a/drivers/staging/lttng/lttng-events.h
+++ b/drivers/staging/lttng/lttng-events.h
@@ -407,6 +407,7 @@ int lttng_syscall_filter_disable(struct lttng_channel *chan,
 		const char *name);
 long lttng_channel_syscall_mask(struct lttng_channel *channel,
 		struct lttng_kernel_syscall_mask __user *usyscall_mask);
+int lttng_abi_syscall_list(void);
 #else
 static inline int lttng_syscalls_register(struct lttng_channel *chan, void *filter)
 {
@@ -418,26 +419,32 @@ static inline int lttng_syscalls_unregister(struct lttng_channel *chan)
 	return 0;
 }
 
-static
+static inline
 int lttng_syscall_filter_enable(struct lttng_channel *chan,
 		const char *name)
 {
 	return -ENOSYS;
 }
 
-static
+static inline
 int lttng_syscall_filter_disable(struct lttng_channel *chan,
 		const char *name)
 {
 	return -ENOSYS;
 }
 
-static
+static inline
 long lttng_channel_syscall_mask(struct lttng_channel *channel,
 		struct lttng_kernel_syscall_mask __user *usyscall_mask)
 {
 	return -ENOSYS;
 }
+
+static inline
+int lttng_abi_syscall_list(void)
+{
+	return -ENOSYS;
+}
 #endif
 
 struct lttng_ctx_field *lttng_append_context(struct lttng_ctx **ctx);
diff --git a/drivers/staging/lttng/lttng-syscalls.c b/drivers/staging/lttng/lttng-syscalls.c
index 622da6e..1fc86c8 100644
--- a/drivers/staging/lttng/lttng-syscalls.c
+++ b/drivers/staging/lttng/lttng-syscalls.c
@@ -29,6 +29,8 @@
 #include <linux/in6.h>
 #include <linux/seq_file.h>
 #include <linux/stringify.h>
+#include <linux/file.h>
+#include <linux/anon_inodes.h>
 #include <asm/ptrace.h>
 #include <asm/syscall.h>
 
@@ -1261,3 +1263,39 @@ long lttng_channel_syscall_mask(struct lttng_channel *channel,
 	kfree(tmp_mask);
 	return ret;
 }
+
+int lttng_abi_syscall_list(void)
+{
+	struct file *syscall_list_file;
+	int file_fd, ret;
+
+	file_fd = get_unused_fd();
+	if (file_fd < 0) {
+		ret = file_fd;
+		goto fd_error;
+	}
+
+	syscall_list_file = anon_inode_getfile("[lttng_syscall_list]",
+					  &lttng_syscall_list_fops,
+					  NULL, O_RDWR);
+	if (IS_ERR(syscall_list_file)) {
+		ret = PTR_ERR(syscall_list_file);
+		goto file_error;
+	}
+	ret = lttng_syscall_list_fops.open(NULL, syscall_list_file);
+	if (ret < 0)
+		goto open_error;
+	fd_install(file_fd, syscall_list_file);
+	if (file_fd < 0) {
+		ret = file_fd;
+		goto fd_error;
+	}
+	return file_fd;
+
+open_error:
+	fput(syscall_list_file);
+file_error:
+	put_unused_fd(file_fd);
+fd_error:
+	return ret;
+}
-- 
2.0.2

