From 5a2b48bbecd0ae33b610553a3651e8ac2b7d7d8d Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 12:34:57 -0500
Subject: [PATCH 53/80] vbi_get_guest_dma_addr --> vbi_get_guest_dma_addr

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/include/asm/pv_dma-mapping.h |    4 ++--
 arch/x86/kernel/pci-dma.c                 |    2 +-
 arch/x86/kernel/pci-nommu.c               |    2 +-
 include/asm-x86/dma-mapping.h             |    4 ++--
 include/vbi/vbi.h                         |    2 +-
 kernel/dma-coherent.c                     |    2 +-
 kernel/vbi/paddr.c                        |    6 +++---
 7 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/arch/powerpc/include/asm/pv_dma-mapping.h b/arch/powerpc/include/asm/pv_dma-mapping.h
index 2a6fc4a..3195ef3 100644
--- a/arch/powerpc/include/asm/pv_dma-mapping.h
+++ b/arch/powerpc/include/asm/pv_dma-mapping.h
@@ -37,7 +37,7 @@ static inline void *paravirt_dma_alloc_coherent(struct device *dev, size_t size,
 #endif /* CONFIG_WRHV */
                 memset(ret, 0, size);
 #ifdef CONFIG_WRHV
-                if (vbi_get_guest_dma_addr(ret, &paddr) == 0) {
+                if (vbi_get_guest_dma_addr(ret, &paddr) == 0) {
                         *dma_handle = (dma_addr_t)paddr;
                 } else {
                         free_pages((unsigned long)ret, get_order(size));
@@ -64,7 +64,7 @@ paravirt_dma_map_single(struct device *dev, void *ptr, size_t size,
 
         __dma_sync(ptr, size, direction);
 #ifdef CONFIG_WRHV
-        if (vbi_get_guest_dma_addr(ptr, &paddr) == 0)
+        if (vbi_get_guest_dma_addr(ptr, &paddr) == 0)
                 return (dma_addr_t)paddr;
         else
                 return (dma_addr_t)NULL;
diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c
index 8ed9bfd..1fec06f 100644
--- a/arch/x86/kernel/pci-dma.c
+++ b/arch/x86/kernel/pci-dma.c
@@ -345,7 +345,7 @@ dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle,
 			if (paravirt_enabled()) {
 				u64 paddr;
 
-				if (vbi_get_guest_dma_addr((void *)bus,
+				if (vbi_get_guest_dma_addr((void *)bus,
 							&paddr) == 0)
 					*dma_handle = (dma_addr_t)paddr;
 				else {
diff --git a/arch/x86/kernel/pci-nommu.c b/arch/x86/kernel/pci-nommu.c
index 12ea56a..b00fbbe 100644
--- a/arch/x86/kernel/pci-nommu.c
+++ b/arch/x86/kernel/pci-nommu.c
@@ -74,7 +74,7 @@ static int nommu_map_sg(struct device *hwdev, struct scatterlist *sg,
 			u64 paddr;
 			dma_addr_t addr = sg_phys(s);
 
-			if (vbi_get_guest_dma_addr((void *)addr, &paddr) == 0)
+			if (vbi_get_guest_dma_addr((void *)addr, &paddr) == 0)
 				s->dma_address = (dma_addr_t)paddr;
 			else
 				s->dma_address = -1;
diff --git a/include/asm-x86/dma-mapping.h b/include/asm-x86/dma-mapping.h
index b14b7ab..ee4413d 100644
--- a/include/asm-x86/dma-mapping.h
+++ b/include/asm-x86/dma-mapping.h
@@ -117,7 +117,7 @@ dma_map_single(struct device *hwdev, void *ptr, size_t size,
 #ifdef CONFIG_WRHV
 	if (paravirt_enabled()) {
 		u64 tmp_paddr;
-		if (vbi_get_guest_dma_addr((void *)virt_to_phys(ptr),
+		if (vbi_get_guest_dma_addr((void *)virt_to_phys(ptr),
 						&tmp_paddr) != 0)
 			return -1;
 		else
@@ -247,7 +247,7 @@ static inline dma_addr_t dma_map_page(struct device *dev, struct page *page,
 #ifdef CONFIG_WRHV
 	if (paravirt_enabled()) {
 		u64 tmp_paddr;
-		if (vbi_get_guest_dma_addr((void *)page_to_phys(page),
+		if (vbi_get_guest_dma_addr((void *)page_to_phys(page),
 						 &tmp_paddr) == 0)
 			paddr = (phys_addr_t)tmp_paddr + offset;
 		else
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 43afa05..210afbd 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -533,7 +533,7 @@ extern vbiStatus_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter,
 extern vbiStatus_t vbi_redir_vioapic_irq(vbiIrq_t irq, vbiCore_t tCore);
 extern vbiStatus_t vbi_send_vcore_vioapic_irq (vbiIrq_t irq, vbiCoreSet_t vcoreSet, 
 					  uint32_t options);
-extern vbiStatus_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr,
+extern vbiStatus_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
 extern vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
diff --git a/kernel/dma-coherent.c b/kernel/dma-coherent.c
index 6f12a97..c049dc8 100644
--- a/kernel/dma-coherent.c
+++ b/kernel/dma-coherent.c
@@ -127,7 +127,7 @@ int dma_alloc_from_coherent(struct device *dev, ssize_t size,
 				dma_addr_t addr = mem->device_base
 						  + (page << PAGE_SHIFT);
 
-				if (vbi_get_guest_dma_addr((void *)addr,
+				if (vbi_get_guest_dma_addr((void *)addr,
 							&paddr) == 0)
 					*dma_handle = (dma_addr_t)paddr;
 				else {
diff --git a/kernel/vbi/paddr.c b/kernel/vbi/paddr.c
index 750ce36..161004a 100644
--- a/kernel/vbi/paddr.c
+++ b/kernel/vbi/paddr.c
@@ -17,7 +17,7 @@
 /*
 DESCRIPTION
 These modules provide interfaces to translate the current context's guest
-physical address into the physical machine address. vbi_get_guest_dma_addr is
+physical address into the physical machine address. vbi_get_guest_dma_addr is
 specifically for a guest wanting an address that can be used by a DMA device.
 vbi_guest_phys_to_phys is used to return an absolute physical address to used
 perhaps to communicate with the hypervisor itself maybe buffer pointers.
@@ -44,7 +44,7 @@ vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
 }
 
 /*
- * vbi_get_guest_dma_addr - translate the spcified guest physical to DMA address
+ * vbi_get_guest_dma_addr - translate the spcified guest physical to DMA address
  *
  * This function makes a hypervisor call to translate the specified guest
  * physical address  to a physical address. This may be required for a device
@@ -52,7 +52,7 @@ vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
  * running with > 4GB memory so the phys address is always 64-bit.
  *
  */
-vbiStatus_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr, vbiPhysAddr_t *paddr)
+vbiStatus_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr, vbiPhysAddr_t *paddr)
 {
 	return vbi_hy_ioctl(VBI_HYIOCTL_PADDR, gaddr, paddr, VBI_HYIOCTL_PADDR_DMA, 0);
 }
-- 
1.6.5.2

