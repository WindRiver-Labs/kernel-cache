From d0173ffc2554afe8b32c768acb8455d87bfa84ee Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Thu, 3 Dec 2009 15:24:07 -0500
Subject: [PATCH 41/43] sizeIn/Out --> size_in/out

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |   12 ++++++------
 arch/x86/kernel/vbi/syscalls.S     |   12 ++++++------
 include/vbi/compat.h               |    2 ++
 include/vbi/syscall.h              |    4 ++--
 4 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index a6d1da7..05f17de 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -776,9 +776,9 @@ FUNC_END(vbi_ns_op)
  * the destination buffer that hypervisor must populate with the data read.
  * This routine is used to copy data from a remote VB. It is the user's
  * responsability to ensure that the memory read is accessed orthogonally.  The
- * sizeIn parameter specifies the number of bytes desired to be copied.  The
- * sizeOut parameter indicates the number of bytes successfully copied.  A user
- * may set the sizeOut parameter to zero if the output size is not of interest
+ * size_in parameter specifies the number of bytes desired to be copied.  The
+ * size_out parameter indicates the number of bytes successfully copied.  A user
+ * may set the size_out parameter to zero if the output size is not of interest
  * otherwise to a value different than zero.
  *
  */
@@ -801,10 +801,10 @@ FUNC_END(vbi_vb_read_mem)
  * containing is updated since the instruction cache is not aware of the
  * content in data cache. Therefore flushing the data cache ensures that memory
  * contains the updated data and invalidating the instruction cache ensures
- * that the stale values in the instruction cache is thrown away.  The sizeIn
- * parameter specifies the number of bytes desired to be copied.  The sizeOut
+ * that the stale values in the instruction cache is thrown away.  The size_in
+ * parameter specifies the number of bytes desired to be copied.  The size_out
  * parameter indicates the number of bytes successfully copied.  A user may set
- * the sizeOut parameter to zero if the output size is not of interest
+ * the size_out parameter to zero if the output size is not of interest
  * otherwise to a value different than zero.
  *
  */
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index ca0a9fd..f422ccd 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -541,10 +541,10 @@ vbi_ns_op:
  * instruction cache is not aware of the content in data cache.
  * Therefore flushing the data cache ensures that memory contains the
  * updated data and invalidating the instruction cache ensures that the
- * stale values in the instruction cache is thrown away.  The sizeIn
+ * stale values in the instruction cache is thrown away.  The size_in
  * parameter specifies the number of bytes desired to be copied.  The
- * sizeOut parameter indicates the number of bytes successfully copied.
- * A user may set the sizeOut parameter to zero if the output size is
+ * size_out parameter indicates the number of bytes successfully copied.
+ * A user may set the size_out parameter to zero if the output size is
  * not of interest otherwise to a value different than zero.
  * 
  * RETURNS: returns OK or error number in case of failure
@@ -565,9 +565,9 @@ vbi_vb_write_mem:
  * to read and the destination buffer that hypervisor must populate with
  * the data read. This routine is used to copy data from a remote VB. It
  * is the user's responsability to ensure that the memory read is
- * accessed orthogonally.  The sizeIn parameter specifies the number of
- * bytes desired to be copied.  The sizeOut parameter indicates the
- * number of bytes successfully copied.  A user may set the sizeOut
+ * accessed orthogonally.  The size_in parameter specifies the number of
+ * bytes desired to be copied.  The size_out parameter indicates the
+ * number of bytes successfully copied.  A user may set the size_out
  * parameter to zero if the output size is not of interest otherwise to
  * a value different than zero.
  *
diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index e6c2203..ffb5dd2 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -88,6 +88,8 @@
 #define numInt			num_int
 #define numSm			num_sm
 #define numMem			num_mem
+#define sizeIn			size_in
+#define sizeOut			size_out
 
 #define intPending		irq_pend
 #define resetPC			reset_pc
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 00b280d..f184431 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -73,8 +73,8 @@ struct vbi_mem_ctl
 {
 	VB_ALIGN_FIELD_64 (void *pBuffer, pad1); /* address of target context   */
 	VB_ALIGN_FIELD_64 (void *pAddress, pad2);/* address of calling context  */
-	uint64_t sizeIn;	    /* number of bytes to be read	    */
-	uint64_t sizeOut;	    /* number of bytes successfully read    */
+	uint64_t size_in;	    /* number of bytes to be read	    */
+	uint64_t size_out;	    /* number of bytes successfully read    */
 	uint32_t flags;	    /* data/instruction flush option	    */
 };
 
-- 
1.6.5.2

