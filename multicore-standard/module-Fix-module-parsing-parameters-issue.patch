From 878e61ff67b3e4b918625cecf84c56ae6228c7b5 Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Thu, 29 Oct 2009 17:39:08 +0800
Subject: [PATCH] module: Fix module parsing parameters issue

Replace vmalloc/vfree with kmalloc/kfree for module allocation
and free for PPC since vmalloc can't handle module parameters
correctly with VMMU.
And, flush data cache for module init to avoid random illegal
data address call trace.

Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 arch/powerpc/kernel/module.c |   10 +++++++++-
 kernel/module.c              |   21 ++++++++++++++++++++-
 2 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/kernel/module.c b/arch/powerpc/kernel/module.c
index 3561412..fdc5d3f 100644
--- a/arch/powerpc/kernel/module.c
+++ b/arch/powerpc/kernel/module.c
@@ -30,18 +30,26 @@
 #include "setup.h"
 
 LIST_HEAD(module_bug_list);
-
+extern void flush_dcache_page(struct page *page);
 void *module_alloc(unsigned long size)
 {
 	if (size == 0)
 		return NULL;
+#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+	return kmalloc(size, GFP_KERNEL);
+#else
 	return vmalloc_exec(size);
+#endif
 }
 
 /* Free memory returned from module_alloc */
 void module_free(struct module *mod, void *module_region)
 {
+#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+	kfree(module_region);
+#else
 	vfree(module_region);
+#endif
 	/* FIXME: If module_region == mod->init_region, trim exception
            table entries. */
 }
diff --git a/kernel/module.c b/kernel/module.c
index 4d93125..29c92ff 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -1893,7 +1893,11 @@ static noinline struct module *load_module(void __user *umod,
 	/* Suck in entire file: we'll want most of it. */
 	/* vmalloc barfs on "unusual" numbers.  Check here */
 
+#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+	if (len > 64 * 1024 * 1024 || (hdr = kmalloc(len, GFP_KERNEL)) == NULL)
+#else
 	if (len > 64 * 1024 * 1024 || (hdr = vmalloc(len)) == NULL)
+#endif
 		return ERR_PTR(-ENOMEM);
 	if (copy_from_user(hdr, umod, len) != 0) {
 		err = -EFAULT;
@@ -2274,12 +2278,19 @@ static noinline struct module *load_module(void __user *umod,
 	 * Do it before processing of module parameters, so the module
 	 * can provide parameter accessor functions of its own.
 	 */
-	if (mod->module_init)
+	if (mod->module_init) {
 		flush_icache_range((unsigned long)mod->module_init,
 				   (unsigned long)mod->module_init
 				   + mod->init_size);
+#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+		flush_dcache_page(virt_to_page(mod->module_init));
+#endif
+	}
 	flush_icache_range((unsigned long)mod->module_core,
 			   (unsigned long)mod->module_core + mod->core_size);
+#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+	flush_dcache_page(virt_to_page(mod->module_core));
+#endif
 
 	set_fs(old_fs);
 
@@ -2319,7 +2330,11 @@ static noinline struct module *load_module(void __user *umod,
 					    sechdrs[unwindex].sh_size);
 
 	/* Get rid of temporary copy */
+#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+	kfree(hdr);
+#else
 	vfree(hdr);
+#endif
 
 	trace_kernel_module_load(mod);
 
@@ -2344,7 +2359,11 @@ static noinline struct module *load_module(void __user *umod,
  free_mod:
 	kfree(args);
  free_hdr:
+#if defined(CONFIG_WRHV) && defined(CONFIG_PPC)
+	kfree(hdr);
+#else
 	vfree(hdr);
+#endif
 	return ERR_PTR(err);
 
  truncated:
-- 
1.6.5.2

