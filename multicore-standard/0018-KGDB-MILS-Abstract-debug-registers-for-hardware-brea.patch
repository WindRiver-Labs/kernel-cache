From 63221937522752e1d4158c2f724daa7767050dda Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
Date: Sun, 28 Feb 2010 16:02:34 -0500
Subject: [PATCH] KGDB: [MILS] Abstract debug registers for hardware breakpoints

BookE processors contain advance debug registers.  (dbsr, dbcr, emsr)
Currently the MILS hypervisor does not export these registers
which are needed by KGDB.  Temporarily stub out access to these
registers until support is added.

Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/powerpc/include/asm/arch_vbi.h |   31 +++++++++++++++++++++++++++++++
 arch/powerpc/kernel/vbi/wrhv.c      |   19 +++++++++++++++----
 include/vbi/vdk_interface.h         |   30 ++++++++++++++++++++++++++++++
 3 files changed, 76 insertions(+), 4 deletions(-)

diff --git a/arch/powerpc/include/asm/arch_vbi.h b/arch/powerpc/include/asm/arch_vbi.h
index 738eb53..9a86b88 100644
--- a/arch/powerpc/include/asm/arch_vbi.h
+++ b/arch/powerpc/include/asm/arch_vbi.h
@@ -660,5 +660,36 @@ endIntVcoreLock:
 	lwz reg, LO(wr_vb_status)(reg)
 
 #endif /*_ASMLANGUAGE */
+
+static inline uint32_t get_emsr(void)
+{
+	return VBI_CNTRL_ADDR_GET()->vb_control_regs.emsr;
+}
+
+static inline uint32_t get_dbsr(void)
+{
+	return VBI_CNTRL_ADDR_GET()->vb_control_regs.dbsr;
+}
+
+static inline uint32_t get_dbcr(void)
+{
+	return VBI_CNTRL_ADDR_GET()->vb_control_regs.dbcr0;
+}
+
+static inline void put_emsr(uint32_t reg)
+{
+	VBI_CNTRL_ADDR_GET()->vb_control_regs.emsr = reg;
+}
+
+static inline void put_dbsr(uint32_t reg)
+{
+	VBI_CNTRL_ADDR_GET()->vb_control_regs.dbsr = reg;
+}
+
+static inline void put_dbcr(uint32_t reg)
+{
+	VBI_CNTRL_ADDR_GET()->vb_control_regs.dbcr0 = reg;
+}
+
 #endif /* _ASM_ARCH_VBI_H */
 #endif /* WRHV_MILS */
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 8ef2a5d..9756749 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -109,6 +109,7 @@
 #include <asm/processor.h>
 
 #include <asm/paravirt.h>
+#include <asm/arch_vbi.h>
 
 
 /* powerpc clocksource/clockevent code */
@@ -1061,8 +1062,12 @@ out:
 /* arch/powerpc/kernel/traps.c */
 void __kprobes wrhv_DebugException(struct pt_regs *regs, unsigned long debug_status)
 {
-	debug_status = wr_control->vb_control_regs.dbsr;
-	wr_control->vb_control_regs.emsr &= ~MSR_DE;
+	uint32_t emsr;
+
+	debug_status = get_dbsr();
+	emsr = get_emsr();
+	emsr &= ~MSR_DE;
+	put_emsr(emsr);
 
 	if (debug_status & DBSR_IC) {   /* instruction completion */
 		regs->msr &= ~MSR_DE;
@@ -1110,6 +1115,8 @@ int wrhv_kgdb_arch_handle_exception(int vector, int signo, int err_code,
 	unsigned long addr;
 
 	switch (remcom_in_buffer[0]) {
+		uint32_t dbcr;
+		uint32_t emsr;
 		/*
 		 * sAA..AA   Step one instruction from AA..AA
 		 * This will return an error to gdb ..
@@ -1128,13 +1135,17 @@ int wrhv_kgdb_arch_handle_exception(int vector, int signo, int err_code,
 			 * Set hypervisor DBCR0_IC single step and
 			 * DBCR0_IDM internal debug mode.
 			 */
-			wr_control->vb_control_regs.dbcr0 |= (DBCR0_IC | DBCR0_IDM);
+			dbcr = get_dbcr();
+			dbcr |= (DBCR0_IC | DBCR0_IDM);
+			put_dbcr(dbcr);
 
 			/*
 			 * Set Debug Enable bit in hypervisor's emulated MSR which
 			 * is restored on return from exception
 			 */
-			wr_control->vb_control_regs.emsr |= MSR_DE;
+			emsr = get_emsr();
+			emsr |= MSR_DE;
+			put_emsr(emsr);
 			linux_regs->msr |= MSR_DE;
 			if (!user_mode(linux_regs)) {
 				preempt_disable();
diff --git a/include/vbi/vdk_interface.h b/include/vbi/vdk_interface.h
index 654bdd8..33cfcfd 100644
--- a/include/vbi/vdk_interface.h
+++ b/include/vbi/vdk_interface.h
@@ -613,6 +613,36 @@ static inline int32_t vbi_vb_reset(uint32_t id, int32_t core, uint32_t options)
 {
 	return -1;
 }
+
+static inline uint32_t get_emsr(void)
+{
+	return 0;
+}
+
+static inline uint32_t get_dbsr(void)
+{
+	return 0;
+}
+
+static inline uint32_t get_dbcr(void)
+{
+	return 0;
+}
+
+static inline void put_emsr(uint32_t reg)
+{
+	return;
+}
+
+static inline void put_dbsr(uint32_t reg)
+{
+	return;
+}
+
+static inline void put_dbcr(uint32_t reg)
+{
+	return;
+}
 #endif /*_ASMLANGUAGE */
 #endif  /* _VDK_INTERFACE_H */
 
-- 
1.7.0

