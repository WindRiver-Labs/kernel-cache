From fa9d2affe08ad6aebb78ddb4972f8848341f103b Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 11:02:06 -0500
Subject: [PATCH 47/80] cosmetic cleanup of comments and whitespace

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |    2 +-
 arch/x86/kernel/vbi/syscalls.S     |    4 ++--
 include/asm-x86/sys_vbi.h          |   10 +++++-----
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index 0f90ff8..d3b83ba 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -401,7 +401,7 @@ FUNC_LABEL(vbi_flush_tlb)
 FUNC_END(vbi_flush_tlb)
 
 /*
- * vbi_vcore_irq_unlock - unlock interrupts interrupts for running core
+ * vbi_vcore_irq_unlock - unlock interrupts for running core
  *
  * This routine enables interrupts and makes a fast hypercall if pending
  * interrupts are detected for the calling core. This is a C wrapper function
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index 428868e..9677dd5 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -186,7 +186,7 @@ vbi_ps:
  *
  */
 vbi_vcore_irq_unlock:
-	sti				/* UNLOCK INTERRUPTS */
+	sti				/* unlock interrupts */
 	ret
 
 /*
@@ -201,7 +201,7 @@ vbi_vcore_irq_lock:
     pushf				/* push EFLAGS on stack */
     popl	%eax			/* get EFLAGS in EAX */
     andl	$EFLAGS_IF,%eax		/* mask it with IF bit */
-    cli					/* LOCK INTERRUPTS */
+    cli					/* lock interrupts */
     ret
 
 /*
diff --git a/include/asm-x86/sys_vbi.h b/include/asm-x86/sys_vbi.h
index d9f11e2..790c9aa 100644
--- a/include/asm-x86/sys_vbi.h
+++ b/include/asm-x86/sys_vbi.h
@@ -67,7 +67,7 @@ typedef long ptrdiff_t;
 typedef struct arch_int_stats {
     uint32_t  intDeliverCount;		/* interrupt delivery count	   */
     uint32_t  intAckCount;		/* interrupt acknowledge count	   */
-    } ARCH_INT_STATS;
+} ARCH_INT_STATS;
 
 /* per context architecture specific statistics */
 
@@ -76,7 +76,7 @@ typedef struct arch_stats {
     uint32_t  VMexitUnhandled;		 /* number of unhandled exits	   */
 					 /* interrupt stats		   */
     ARCH_INT_STATS interrupt[X86_MAX_VECTORS];
-    } ARCH_STATS;
+} ARCH_STATS;
 
 /* queued interrupt information */
 
@@ -84,7 +84,7 @@ typedef struct arch_int {
     uint32_t	     intNum;	 	/* interrupt number to deliver	   */
     uint32_t	     errorCode;	 	/* exrror code to push on stack	   */
     struct arch_int *next;		/* pointer to next interrupt	   */
-    } ARCH_INT;
+} ARCH_INT;
 
 /* Guest MMU mode */
 
@@ -93,7 +93,7 @@ typedef enum arch_mmu_mmode
     MMU32,			/* 32-bit MMU				*/
     MMU32_PAE,			/* 32-bit MMU with PAE support		*/
     MMU64			/* 64-bit MMU				*/
-    } ARCH_MMU_MODE;
+} ARCH_MMU_MODE;
 
 /* per context architecture specific information */
 
@@ -169,7 +169,7 @@ typedef struct arch_info {
     uint32_t	  vbiRegsValid;	/* registers values have been set	*/
     VBI_HREG_SET  vbiRegs;	/* register values set by VBI API	*/
 
-    } ARCH_INFO;
+} ARCH_INFO;
 
 /* information for per-core architecture mapping */
 
-- 
1.6.5.2

