From 949215fafb07e69cc252ab084c3326adbacd3999 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Mon, 22 Mar 2010 17:14:52 -0400
Subject: [PATCH] MILS: clean up x86 syscall declarations

There was an instance where VDK_SYS_virtToPhys was declared
and used (instead of VBI_SYS_virtToPhys) and that has been
also fixed.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/x86/kernel/vbi/vdk_syscalls.S |  135 +++++++++++-------------------------
 include/vbi/vdk_syscalls.h         |    2 -
 2 files changed, 40 insertions(+), 97 deletions(-)

diff --git a/arch/x86/kernel/vbi/vdk_syscalls.S b/arch/x86/kernel/vbi/vdk_syscalls.S
index 50ffd81..816b927 100644
--- a/arch/x86/kernel/vbi/vdk_syscalls.S
+++ b/arch/x86/kernel/vbi/vdk_syscalls.S
@@ -25,13 +25,35 @@
 
 #define VBI_STACK_FRAME_SIZE	4
 
-.globl vdk_virt_to_phys
-vdk_virt_to_phys:
-        movl $VDK_SYS_virtToPhys, %eax
-        push $2
-        vmcall
-        addl $VBI_STACK_FRAME_SIZE, %esp
-        ret
+#define vdk_hcall(name, call, args)		\
+.globl name;					\
+name:						\
+	movl $VBI_SYS_##call,%eax;		\
+	push $##args;				\
+	vmcall;					\
+	addl $VBI_STACK_FRAME_SIZE, %esp;	\
+	ret
+
+/*
+ * vdk_virt_to_phys - translate a virtual address to physical
+ */
+vdk_hcall(vdk_virt_to_phys, virtToPhys, 2)
+
+/*
+ *
+ * vbi_int_controller_done - signal completion of processing by virtual int controller
+ *
+ * This system notifies the hypervisor that the virtual interrupt controller
+ * in the virtual board has finished procssing the information in the
+ * virtual interrupt controller registers, and requires a refresh.
+ *
+ */
+vdk_hcall(vbi_int_controller_done, int_controller_done, 0)
+
+/*
+ * The following are MILS extensions that are not present
+ * in the standard VBI 2.0 syscall list.
+ */
 
 /*
  *
@@ -40,13 +62,7 @@ vdk_virt_to_phys:
  * This system call releases the specified buffer(s) from the specified port
  *
  */
-.globl vdk_port_buf_release
-vdk_port_buf_release:
-        movl    $VBI_SYS_portBufRelease,%eax /* system call number */
-        push    $3                           /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_port_buf_release, portBufRelease, 3)
 
 /*
  *
@@ -55,13 +71,7 @@ vdk_port_buf_release:
  * This system call returns the schedule ID given the schedule name
  *
  */
-.globl vdk_schedule_name_to_id
-vdk_schedule_name_to_id:
-        movl    $VBI_SYS_scheduleNameToId,%eax /* system call number */
-        push    $2                           /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_schedule_name_to_id, scheduleNameToId, 2)
 
 /*
  *
@@ -70,26 +80,14 @@ vdk_schedule_name_to_id:
  * This system call sets schedule <name> to current schedule
  *
  */
-.globl vdk_schedule_set
-vdk_schedule_set:
-        movl    $VBI_SYS_scheduleSet,%eax /* system call number */
-        push    $2                           /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_schedule_set, scheduleSet, 2)
 
 /*
  *
  * vdk_sec_audit_event_inject - inject a security Audit event
  *
  */
-.globl vdk_sec_audit_event_inject
-vdk_sec_audit_event_inject:
-        movl    $VBI_SYS_secAuditEventInject,%eax /* system call number */
-        push    $3                                /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_sec_audit_event_inject, secAuditEventInject, 3)
 
 /*
  *
@@ -98,13 +96,7 @@ vdk_sec_audit_event_inject:
  * This system call collects security audit events from a VB log.
  *
  */
-.globl vdk_sec_audit_event_collect
-vdk_sec_audit_event_collect:
-        movl    $VBI_SYS_secAuditEventCollect,%eax /* system call number */
-        push    $3                                 /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_sec_audit_event_collect, secAuditEventCollect, 3)
 
 /*
  *
@@ -113,13 +105,7 @@ vdk_sec_audit_event_collect:
  * This system call forces injection of a Safety Critical event.
  *
  */
-.globl vdk_safe_crit_event_inject
-vdk_safe_crit_event_inject:
-	movl $VBI_SYS_safeCritEventInject, %eax
-	pushl $1
-	vmcall
-	addl $VBI_STACK_FRAME_SIZE, %esp
-	ret
+vdk_hcall(vdk_safe_crit_event_inject, safeCritEventInject, 1)
 
 /*
  *
@@ -128,13 +114,7 @@ vdk_safe_crit_event_inject:
  * This system call collects security audit events from a VB log.
  *
  */
-.globl vdk_safe_crit_event_collect
-vdk_safe_crit_event_collect:
-        movl    $VBI_SYS_safeCritEventCollect,%eax /* system call number */
-        push    $3                                /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_safe_crit_event_collect, safeCritEventCollect, 3)
 
 /*
  *
@@ -143,13 +123,7 @@ vdk_safe_crit_event_collect:
  * This system call sends messages to the specified port
  *
  */
-.globl vdk_port_send
-vdk_port_send:
-        movl    $VBI_SYS_portSend,%eax /* system call number */
-        push    $5                     /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_port_send, portSend, 5)
 
 /*
  *
@@ -158,34 +132,11 @@ vdk_port_send:
  * This system call gets a buffer from the specified port
  *
  */
-.globl vdk_port_get_recv_buf
-vdk_port_get_recv_buf:
-        movl    $VBI_SYS_portGetRecvBuf,%eax /* system call number */
-        push    $2                           /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
-
-/*
- *
- * vdk_int_controller_done - signal completion of processing by virtual int controller
- *
- * This system notifies the hypervisor that the virtual interrupt controller
- * in the virtual board has finished procssing the information in the
- * virtual interrupt controller registers, and requires a refresh.
- *
- */
-.globl vdk_int_controller_done
-vdk_int_controller_done:
-        movl    $VBI_SYS_int_controller_done,%eax /* system call number */
-        push    $0                                /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_port_get_recv_buf, portGetRecvBuf, 2)
 
 /*
  *
- * vdkBspIoctl - bsp ioctl call
+ * vdk_bsp_ioctl - bsp ioctl call
  *
  * This system call interfaces to the Board Support Package
  * I/O drivers etc
@@ -196,11 +147,5 @@ vdk_int_controller_done:
  *       VDK_BSPIOCTL_RESET        /@ Reset HW device     @/
  *
  */
-.globl vdkBspIoctl
-vdkBspIoctl:
-        movl    $VBI_SYS_bspIoctl,%eax          /* system call number */
-        push    $8                              /* number of arguments */
-        vmcall
-        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
-        ret
+vdk_hcall(vdk_bsp_ioctl, bspIoctl, 8)
 
diff --git a/include/vbi/vdk_syscalls.h b/include/vbi/vdk_syscalls.h
index ab95eb5..d752b24 100644
--- a/include/vbi/vdk_syscalls.h
+++ b/include/vbi/vdk_syscalls.h
@@ -231,8 +231,6 @@ have mapped a NULL / no-op to HY_SYSCALL(23) */
 /* Breaks MILS security model */
 #define VBI_SYS_RegsRead_op     VDK_SYS_NULL  /* regs service operation */
 
-#define VDK_SYS_virtToPhys      HY_SYSCALL(1)
-
 /* VTLB operation command and flags (intel-vt specific) */
 #define VBI_VTLB_OP_UPDATE_PMD		0
 #define VBI_VTLB_OP_UPDATE_PTE		0
-- 
1.7.0

