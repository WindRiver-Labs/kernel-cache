From c847e1ac871be5993dccce98749eeb8a152357d2 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 24 Feb 2010 21:06:42 -0500
Subject: [PATCH] MILS shim: clarify demux of VBI vs VDK

Do the demux up at the top of the file, where you can see
it when looking for it.

Other commits have also been folded into here:

MILS shim: remove unused port_type.h file
MILS shim: Remove CONFIG_WRHV_MILS from MILS specific file
MILS shim: Fix incorrectly mapped syscalls
MILS shim: clarify demux of VBI vs VDK in syscalls
MILS vdk: UINT32 --> unsigned long
---
 include/vbi/interface.h     |    9 ++-
 include/vbi/port_type.h     |  129 -------------------------------------------
 include/vbi/syscalls.h      |   10 ++--
 include/vbi/vdk_interface.h |   30 +++++-----
 include/vbi/vdk_syscalls.h  |    8 +--
 5 files changed, 28 insertions(+), 158 deletions(-)
 delete mode 100644 include/vbi/port_type.h

diff --git a/include/vbi/interface.h b/include/vbi/interface.h
index 0e62485..a78e221 100644
--- a/include/vbi/interface.h
+++ b/include/vbi/interface.h
@@ -80,7 +80,10 @@ identity mapped.
 
 */
 
-#if !defined(_VBI_INTERFACE_H) && !defined(CONFIG_WRHV_MILS)
+#ifdef CONFIG_WRHV_MILS
+#include <vbi/vdk_interface.h>
+#else
+#ifndef _VBI_INTERFACE_H
 #define _VBI_INTERFACE_H
 
 #include <vbi/types.h>
@@ -582,7 +585,5 @@ struct vb_config
 };
 
 #endif /*_ASMLANGUAGE */
-
-#else
-#include <vbi/vdk_interface.h>
 #endif  /* _VBI_INTERFACE_H */
+#endif /* ! CONFIG_WRHV_MILS */
diff --git a/include/vbi/port_type.h b/include/vbi/port_type.h
deleted file mode 100644
index ddc60ee..0000000
--- a/include/vbi/port_type.h
+++ /dev/null
@@ -1,129 +0,0 @@
-/* port_type.h - port type header file */
-
-/* Copyright (c) 2009 Wind River Systems, Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
- * See the GNU General Public License for more details.
- *
- */
-
-
-
-#ifndef _VDK_PORT_TYPE_H
-#define _VDK_PORT_TYPE_H
-
-#ifndef	_ASMLANGUAGE
-
-#define  PORT_INFO_MAGIC 168      /* port info magic number */
-#define  PORT_NAME_MAX   32       /* max port name, including EOS */
-
-/* VB XML  tags */
-#define VB_XML_PORT_TAG               "PortsList"
-#define VB_XML_PORT_NAME_TAG          "Port"
-#define VB_XML_PORT_NAME              "Name"
-#define VB_XML_PORT_CHANNEL           "Channel"
-#define VB_XML_PORT_BACKLOG           "BackLog"
-#define VB_XML_PORT_NOTIFICATION      "Notification"
-
-typedef enum                    /* port message queuing  protocol */
-{
-    DISCARD,                    /* discard if  overflow, default protocol */
-    RELIABLE,
-    OVERWRITE_FIRST,
-    OVERWRITE_LAST
-} CHANNEL_PROTO;
-
-typedef enum                    /* port VB notificatiom method */
-{
-    P_NOTIFY_NONE=0,              /* no notification */
-    P_NOTIFY_NON_FULL,            /* sender only, when queue becomes non full */
-    P_NOTIFY_NON_EMPTY=P_NOTIFY_NON_FULL,
-                                /* receiver only, when queue becomes
-                                 * non-empty
-                                 */
-    P_NOTIFY_ALWAYS               /* receiver only, always get notified */
-} PORT_NOTIFY;
-
-typedef enum                      /* message transfer protocol */
-{
-    P_COPY=0,                     /* copy from sender to reciver */
-    P_PAGED,                      /* swap page between sender and recver */
-    P_SECURE_PAGED,               /* swap page, zero the filler */
-    P_PROCTECT_PAGED,             /* MMU rdonly PAGED area still in queue */
-    P_PROTECT_SECURE_PAGED        /* MMU rdonly SECURE_PAGED still in queue */
-} PORT_COPY_PROTO;
-
-
-typedef enum                     /* port state */
-{
-    P_INACTIVE,
-    P_READY,                       /* q length =1, we always use P_FULL */
-    P_FULL,
-    P_EMPTY
-} PORT_STATE;
-
-typedef struct status_entry
-{
-    int      len;                 /* message length */
-    uint64_t tmStamp;             /* time stamp */
-    void  *  msgAddr;             /* message address, if the port is VB
-                                     managed buffer, the address is VB physical
-                                     address, so VB can directly access it.
-                                     otherwise, it is wrhv physicall address
-                                     VB should not touch it.
-                                   */
-} PORT_DATA_ENTRY;
-
-typedef struct portStatus         /* port runtime status */
-{
-    PORT_STATE  state;            /* port current state */
-    u_int        seqno;            /* latest message received, or first message
-                                   * on the sender queue
-                                   */
-    u_int       nMsgs;            /* number of messages in the queue */
-    u_int       head;             /* queue  head index */
-    u_int       tail;             /* queue  tail index */
-    PORT_DATA_ENTRY * dataEntry;  /* port data region */
-} PORT_STATUS;
-
-typedef struct portSendMsg         /* port message structure */
-{
-    void  * buffer;                /* point to the data area */
-    int     len;                   /* size of message to follow */
-} PORT_SEND_MESSAGE_DESC;
-
-typedef struct vbPortReceiveMessageDescriptor
-{
-    void  *  buffer;
-    u_int     bufLen;
-    u_int     msgLen;
-    uint64_t sentMessageTimestamp;
-} PORT_RECEIVE_MESSAGE_DESC;
-
-
-typedef enum                      /* port distribution status */
-{
-    PORT_DIST_OK,                 /* all messages distributed */
-    PORT_DIST_OVERFLOW,           /* overflow happens in at least one of the
-                                   * port */
-    PORT_DIST_PROTO_NOTSUP        /* not supported protocol */
-} PORT_DIST_STATUS;
-
-typedef enum                      /* status queuing on the receiver queue */
-{
-    DESTINATION_NO_SPACE=0,
-    DESTINATION_ACCEPTED,         /* new message accepted */
-    DESTINATION_ACCEPTED_ALREADY  /* destination already dragged the message */
-} DIST_STATUS;
-
-typedef void * PORT_ID;
-
-#endif /* _ASMLANGUAGE */
-
-#endif  /* _VDK_PORT_TYPE_H */
diff --git a/include/vbi/syscalls.h b/include/vbi/syscalls.h
index 33396ff..2117fc0 100644
--- a/include/vbi/syscalls.h
+++ b/include/vbi/syscalls.h
@@ -14,7 +14,10 @@
  *
  */
 
-#if !defined(_VBI_SYSCALLS_H) && !defined(CONFIG_WRHV_MILS)
+#ifdef CONFIG_WRHV_MILS
+#include <vbi/vdk_syscalls.h>
+#else
+#ifndef _VBI_SYSCALLS_H
 #define _VBI_SYSCALLS_H
 
 /*
@@ -311,8 +314,5 @@ typedef uint32_t VBMGMT_HANDLE;
 typedef uint32_t VBI_NS_HANDLE;
 
 #endif	/* _ASMLANGUAGE */
-
-#else
-#include <vbi/vdk_syscalls.h>
-
 #endif	/* _VBI_SYSCALLS_H */
+#endif /* ! CONFIG_WRHV_MILS */
diff --git a/include/vbi/vdk_interface.h b/include/vbi/vdk_interface.h
index bdb5c8f..714b57b 100644
--- a/include/vbi/vdk_interface.h
+++ b/include/vbi/vdk_interface.h
@@ -203,25 +203,25 @@ typedef enum                            /* queuing port protocol     */
 
 typedef struct portConfig
 {
-    UINT32              id;                    /* unique port ID                   */
-    unsigned char     * buf;                   /* port payload buffer vaddr        */
-    UINT32              bufAttr;               /* port payload buffer attribute    */
-    char                name[MAX_NAME_LENGTH]; /* port name                        */
-    UINT32              vbId;                  /* parent vb                        */
-    UINT32              moduleId;              /* parent module                    */
-    UINT32              inChannel;             /* in channel                       */
-    UINT32              outChannel;            /* out channel                      */
-    PORT_DIRECTION_TYPE direction;             /* SOURCE or DESTINATION            */
-    PORT_MODE_TYPE      mode;                  /* QUEUING or SAMPLING              */
-    PORT_PROTOCOL_TYPE  protocol;              /* RECEIVER_DISCARD or SENDER_BLOCK */
-    UINT32              msgSize;               /* max. message size (PAGE_ALIGNED) */
-    UINT32              numMsgs;               /* max. capacity for queuing ports  */
+    unsigned long id;			/* unique port ID                   */
+    unsigned char *buf;			/* port payload buffer vaddr        */
+    unsigned long bufAttr;		/* port payload buffer attribute    */
+    char name[MAX_NAME_LENGTH];		/* port name                        */
+    unsigned long vbId;			/* parent vb                        */
+    unsigned long moduleId;		/* parent module                    */
+    unsigned long inChannel;		/* in channel                       */
+    unsigned long outChannel;		/* out channel                      */
+    PORT_DIRECTION_TYPE direction;	/* SOURCE or DESTINATION            */
+    PORT_MODE_TYPE mode;		/* QUEUING or SAMPLING              */
+    PORT_PROTOCOL_TYPE protocol;	/* RECEIVER_DISCARD or SENDER_BLOCK */
+    unsigned long msgSize;		/* max. message size (PAGE_ALIGNED) */
+    unsigned long numMsgs;		/* max. capacity for queuing ports  */
 } PORT_CONFIG;
 
 typedef struct partPortConfig
 {
-    UINT32              numPorts;
-    PORT_CONFIG         portInfo[];
+    unsigned long numPorts;
+    PORT_CONFIG portInfo[];
 } PART_PORT_CONFIG;
 
 typedef struct portConfig VB_PORT_INFO;
diff --git a/include/vbi/vdk_syscalls.h b/include/vbi/vdk_syscalls.h
index 731e7a7..f199d8b 100644
--- a/include/vbi/vdk_syscalls.h
+++ b/include/vbi/vdk_syscalls.h
@@ -14,9 +14,7 @@
  *
  */
 
-
-
-#if !defined(_VDK_SYSCALLS_H) && defined(CONFIG_WRHV_MILS)
+#ifndef _VDK_SYSCALLS_H
 #define _VDK_SYSCALLS_H
 
 /*
@@ -141,8 +139,8 @@ have mapped a NULL / no-op to HY_SYSCALL(23) */
 /* hypervisor services */
 #define VBI_SYS_hyIoctl          VDK_SYS_NULL  /* hypervisor ioctl */
 #define VBI_SYS_vmContextCreate  VDK_SYS_NULL  /* context create */
-#define VBI_SYS_send             HY_SYSCALL(18)  /* send a messages */
-#define VBI_SYS_receive          HY_SYSCALL(19)  /* receive a messages */
+#define VBI_SYS_send             VDK_SYS_NULL  /* send a message */
+#define VBI_SYS_receive          VDK_SYS_NULL  /* receive a message */
 #define VBI_SYS_reply            VDK_SYS_NULL  /* reply to a messages */
 #define VBI_SYS_panic            HY_SYSCALL(2)  /* halt the system */
 #define VBI_SYS_int              HY_SYSCALL(3)  /* deliver an interrupt */
-- 
1.7.0

