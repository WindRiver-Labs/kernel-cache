From ca0c7803f8f913d0c46fec846bf175b7bffec2b1 Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Sun, 27 Sep 2009 18:00:22 +0800
Subject: [PATCH] x86: fix core syncing issue for kgdb

When connect from gdb client to kgdb which sit on SMP kernel, kgdb
will try to syncing between all cores. So the kgdb_roundup_cpus will
be called(unless the special kgdb parameter was set).

The native version of the function is utilize APIC's function to let
other cores in a SMP system call kgdbwait to syncing.

But we can not make use of apic to notify other cores in guest OS.
So use smp_call_function instead.

Note: according to Jason, the arches that lake of hardware ability
to notify other cores with out IPI may utilize this mechanism. But the
fact that IRQ was enabled before issue smp_call_function will introduce
a chance to hard hang SMP kernel. So set this fix be a workaround other
than perfect fix would be better.

We may enhance the fix when we have more apic support from wrhv later.

Signed-off-by: Liang Li <liang.li@windriver.com>
---
 arch/x86/kernel/kgdb.c |   15 +++++++++++++++
 1 files changed, 15 insertions(+), 0 deletions(-)

diff --git a/arch/x86/kernel/kgdb.c b/arch/x86/kernel/kgdb.c
index 25ca4f5..676a274 100644
--- a/arch/x86/kernel/kgdb.c
+++ b/arch/x86/kernel/kgdb.c
@@ -330,6 +330,15 @@ void kgdb_post_primary_code(struct pt_regs *regs, int e_vector, int err_code)
 }
 
 #ifdef CONFIG_SMP
+
+#ifdef CONFIG_WRHV
+static int kgdb_call_nmi_hook(struct pt_regs *regs)
+{
+       kgdb_nmicallback(raw_smp_processor_id(), regs);
+       return 0;
+}
+#endif
+
 /**
  *	kgdb_roundup_cpus - Get other CPUs into a holding pattern
  *	@flags: Current IRQ state
@@ -348,7 +357,13 @@ void kgdb_post_primary_code(struct pt_regs *regs, int e_vector, int err_code)
  */
 void kgdb_roundup_cpus(unsigned long flags)
 {
+#ifdef CONFIG_WRHV
+	local_irq_enable();
+	smp_call_function(kgdb_call_nmi_hook, NULL, 0);
+	local_irq_disable();
+#else
 	send_IPI_allbutself(APIC_DM_NMI);
+#endif
 }
 #endif
 
-- 
1.6.5.2

