From 8cd600fbbb5c1bd7b78df2bb36a9bec3da0fb3ad Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Thu, 15 Oct 2009 16:33:39 -0400
Subject: [PATCH 16/23] vbi: relocate arch asm.h headers to kernel's arch dirs

arch specific files should never be in non-arch specific dirs.
Farm them out to where they should be, and delete the thing
that was doing the demux in the past.

 renamed:    include/vbi/support/sys/ppc/asm.h -> arch/powerpc/include/asm/vbi.h
 modified:   arch/powerpc/kernel/vbi/syscalls.S
 modified:   arch/x86/kernel/vbi/syscalls.S
 renamed:    include/vbi/support/sys/x86/asm.h -> include/asm-x86/vbi.h
 deleted:    include/vbi/support/asm.h

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/include/asm/vbi.h     |  526 ++++++++++++++++++++++++++++++++++++
 arch/powerpc/kernel/vbi/syscalls.S |    2 +-
 arch/x86/kernel/vbi/syscalls.S     |    2 +-
 include/asm-x86/vbi.h              |  147 ++++++++++
 include/vbi/support/asm.h          |   41 ---
 include/vbi/support/sys/ppc/asm.h  |  526 ------------------------------------
 include/vbi/support/sys/x86/asm.h  |  147 ----------
 7 files changed, 675 insertions(+), 716 deletions(-)
 create mode 100644 arch/powerpc/include/asm/vbi.h
 create mode 100644 include/asm-x86/vbi.h
 delete mode 100644 include/vbi/support/asm.h
 delete mode 100644 include/vbi/support/sys/ppc/asm.h
 delete mode 100644 include/vbi/support/sys/x86/asm.h

diff --git a/arch/powerpc/include/asm/vbi.h b/arch/powerpc/include/asm/vbi.h
new file mode 100644
index 0000000..427de23
--- /dev/null
+++ b/arch/powerpc/include/asm/vbi.h
@@ -0,0 +1,526 @@
+/* sys/ppc/asm.h - PowerPC tool dependent headers */
+
+/* Copyright 2007 Wind River Systems, Inc. */
+/*
+modification history
+--------------------
+01c,15jul09,dtr  Support CPU PPCE500MC.
+01b,23nov07,foo  add spr defines
+01a,03oct07,md   written from VxWorks toolPpc.h version 02c
+*/
+
+#ifndef __INCsysPpcAsmh
+#define __INCsysPpcAsmh
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#if	!defined(_DIAB_TOOL) && !defined(_GNU_TOOL)
+#define	_GNU_TOOL
+#endif
+
+/* PowerPC specific settings */
+#if (CPU==PPCE500MC)
+#define	_PPC_HREG_SIZE		4	/* default register size */
+#define _PPC_TEXT_SEG_ALIGN     8       /* 8 byte text segment alignment */
+#else
+#define	_PPC_HREG_SIZE		4	/* default register size */
+#define _PPC_TEXT_SEG_ALIGN     4       /* 4 byte text segment alignment */
+#endif
+
+/* macros for stack frame */
+
+/*
+SVR4 Stack space allocation:
+
+    Before Dynamic stack allocation
+
+    +----------------------------------+
+    |       Back Chain                 |
+    |----------------------------------|
+    |  Register save areas             |
+    |----------------------------------|
+    |  local,non-static variables      |
+    |----------------------------------|
+    |  parameter lists for callees     | (overloaded parameters with #)
+    |----------------------------------|
+    |      LR save word                |
+    |----------------------------------|
+SP=>|      Back chain                  |
+    +----------------------------------+
+
+    After Dynamic stack allocation
+
+    +----------------------------------+
+    |       Back Chain                 |
+    |----------------------------------|
+    |  Register save areas             |
+    |----------------------------------|
+    |  local,non-static variables      |
+    |----------------------------------|
+    |  Dynamic Allocation Area         | 16 byte stack alignment
+    |----------------------------------|
+    |  parameter lists for callees     |
+    |----------------------------------|
+    |      LR save word                |
+    |----------------------------------|
+SP=>|      Back chain                  |
+    +----------------------------------+ 16 bytes stack alignment
+*/
+
+  /* Stack and Allocation alignment */
+
+/*
+ * While it is possible to use different stack alignments for different
+ * PPC processors, current compilers use 16-byte alignment for all.
+ */
+
+#define _CPU_STACK_ALIGN_SIZE	16	/* stack alignment (for all PPC) */
+#define	_CPU_STACK_ALIGN_SHIFT	4
+
+#if	((CPU == PPC604) || (CPU == PPC85XX) || (CPU == PPCE500MC) || (CPU == PPC970)) /* Altivec, E500 EABI */
+# define _CPU_ALLOC_ALIGN_SIZE	16	/* allocation alignment */
+#elif	(CPU != PPC32)			/* for others, !defined for generic */
+# define _CPU_ALLOC_ALIGN_SIZE	8	/* allocation alignment */
+#endif	/* PPC604|PPC85XX|PPC970 : !PPC32 */
+
+#define	FRAMEBASESZ		16	/* minimum stack frame size */
+
+/*
+*
+* _WRS_ARCH_USER_STACK_FRAME_EXTENSION - creating words on the stack for the 
+*                                        back chain word and the LR register.
+*
+* This macro is used in creating the initial stack frame for an RTP's initial 
+* task. It performs the extra steps of creating words on the stack for the 
+* back chain word and the LR register. Both these locations are set to 0 to 
+* prevent stack traces and debuggers from looking ahead.
+*
+* NOMANUAL
+*/
+
+#define _WRS_ARCH_USER_STACK_FRAME_EXTENSION(sp)			     \
+    do									     \
+	{								     \
+	(sp) -= 2*sizeof(int *);					     \
+	*((int *)(sp)) = (int)0;					     \
+	*((int *)((sp)+4)) = (int)0;					     \
+	} while ((0))
+
+
+#ifdef	_ASMLANGUAGE
+
+/* register definition */
+
+/* common SPR registers */
+
+#ifndef XER
+#define XER 1
+#endif
+#ifndef LR
+#define LR 8
+#endif						
+#ifndef CTR
+#define CTR 9
+#endif
+
+/* volatile registers that are not saved across subroutine calls */
+
+#define p0	r3	/* argument register, volatile */
+#define p1	r4	/* argument register, volatile */
+#define p2	r5	/* argument register, volatile */
+#define p3	r6	/* argument register, volatile */
+#define p4	r7	/* argument register, volatile */
+#define p5	r8	/* argument register, volatile */
+#define p6	r9	/* argument register, volatile */
+#define p7	r10	/* argument register, volatile */
+#define glr0	r0	/* prologs(PO,EABI), epilogs, glink routines(EABI) /
+			 * language specific purpose(SVR4), volatile */
+#define glr1	r11	/* prologs, epilogs, as Pascal environment pointer(EABI)
+			 * language specific purpose (SVR4)
+			 * calls by pointer, as Pascal environment(PO), 
+			 * volatile */
+#define glr2	r12	/* prologs, epilogs, glink routines, calls by 
+			 * pointer(EABI), language specific purpose (SVR4),
+			 * glue code, exception handling (PO), volatile */
+#define retval0	r3	/* return register 0, volatile */
+#define retval1	r4	/* return register 1, volatile */
+
+
+/* non-volatile and dedicated registers saved across subroutine calls */
+
+#define	sp	r1	/* stack pointer, dedicated */
+
+#define t0	r14	/* temporary registers, non-volatile */
+#define t1	r15	/* temporary registers, non-volatile */
+#define t2	r16	/* temporary registers, non-volatile */
+#define t3	r17	/* temporary registers, non-volatile */
+#define t4	r18	/* temporary registers, non-volatile */
+#define t5	r19	/* temporary registers, non-volatile */
+#define t6	r20	/* temporary registers, non-volatile */
+#define t7	r21	/* temporary registers, non-volatile */
+#define t8	r22	/* temporary registers, non-volatile */
+#define t9	r23	/* temporary registers, non-volatile */
+#define t10	r24	/* temporary registers, non-volatile */
+#define t11	r25	/* temporary registers, non-volatile */
+#define t12	r26	/* temporary registers, non-volatile */
+#define t13	r27	/* temporary registers, non-volatile */
+#define t14	r28	/* temporary registers, non-volatile */
+#define t15	r29	/* temporary registers, non-volatile */
+#define t16	r30	/* temporary registers, non-volatile */
+#define t17	r31	/* temporary registers, non-volatile */
+
+#ifdef	_GNU_TOOL
+
+/* GP register names */
+
+#define r0	0
+#define r1	1
+#define r2	2
+#define r3	3
+#define r4	4
+#define r5	5
+#define r6	6
+#define r7	7
+#define r8	8
+#define r9	9
+#define r10	10
+#define r11	11
+#define r12	12
+#define r13	13
+#define r14	14
+#define r15	15
+#define r16	16
+#define r17	17
+#define r18	18
+#define r19	19
+#define r20	20
+#define r21	21
+#define r22	22
+#define r23	23
+#define r24	24
+#define r25	25
+#define r26	26
+#define r27	27
+#define r28	28
+#define r29	29
+#define r30	30
+#define r31	31
+
+#ifdef	_PPC_MSR_FP
+/* FP register names */
+
+#define	fp0	0
+#define	fr0	0
+#define	f0	0
+#define	fp1	1
+#define	fr1	1
+#define	f1	1
+#define	fp2	2
+#define	fr2	2
+#define	f2	2
+#define	fp3	3
+#define	fr3	3
+#define	f3	3
+#define	fp4	4
+#define	fr4	4
+#define	f4	4
+#define	fp5	5
+#define	fr5	5
+#define	f5	5
+#define	fp6	6
+#define	fr6	6
+#define	f6	6
+#define	fp7	7
+#define	fr7	7
+#define	f7	7
+#define	fp8	8
+#define	fr8	8
+#define	f8	8
+#define	fp9	9
+#define	fr9	9
+#define	f9	9
+#define	fp10	10
+#define	fr10	10
+#define	f10	10
+#define	fp11	11
+#define	fr11	11
+#define	f11	11
+#define	fp12	12
+#define	fr12	12
+#define	f12	12
+#define	fp13	13
+#define	fr13	13
+#define	f13	13
+#define	fp14	14
+#define	fr14	14
+#define	f14	14
+#define	fp15	15
+#define	fr15	15
+#define	f15	15
+#define	fp16	16
+#define	fr16	16
+#define	f16	16
+#define	fp17	17
+#define	fr17	17
+#define	f17	17
+#define	fp18	18
+#define	fr18	18
+#define	f18	18
+#define	fp19	19
+#define	fr19	19
+#define	f19	19
+#define	fp20	20
+#define	fr20	20
+#define	f20	20
+#define	fp21	21
+#define	fr21	21
+#define	f21	21
+#define	fp22	22
+#define	fr22	22
+#define	f22	22
+#define	fp23	23
+#define	fr23	23
+#define	f23	23
+#define	fp24	24
+#define	fr24	24
+#define	f24	24
+#define	fp25	25
+#define	fr25	25
+#define	f25	25
+#define	fp26	26
+#define	fr26	26
+#define	f26	26
+#define	fp27	27
+#define	fr27	27
+#define	f27	27
+#define	fp28	28
+#define	fr28	28
+#define	f28	28
+#define	fp29	29
+#define	fr29	29
+#define	f29	29
+#define	fp30	30
+#define	fr30	30
+#define	f30	30
+#define	fp31	31
+#define	fr31	31
+#define	f31	31
+#endif	/* _PPC_MSR_FP */
+
+/* Condition register names */
+
+#define cr0	0
+#define cr1	1
+#define cr2	2
+#define cr3	3
+#define cr4	4
+#define cr5	5
+#define cr6	6
+#define cr7	7
+
+/* Macro for hiadjust and lo */
+
+#define HIADJ(arg)	arg@ha
+#define HI(arg)		arg@h
+#define LO(arg)		arg@l
+
+#ifdef _PPC_MSR_VEC
+
+/* ALTIVEC Vector register names */
+
+#define v0      0
+#define v1      1
+#define v2      2
+#define v3      3
+#define v4      4
+#define v5      5
+#define v6      6
+#define v7      7
+#define v8      8
+#define v9      9
+#define v10     10
+#define v11     11
+#define v12     12
+#define v13     13
+#define v14     14
+#define v15     15
+#define v16     16
+#define v17     17
+#define v18     18
+#define v19     19
+#define v20     20
+#define v21     21
+#define v22     22
+#define v23     23
+#define v24     24
+#define v25     25
+#define v26     26
+#define v27     27
+#define v28     28
+#define v29     29
+#define v30     30
+#define v31     31
+
+#endif /* _PPC_MSR_VEC */
+
+#endif	/* _GNU_TOOL */
+
+#ifdef	_DIAB_TOOL
+
+#ifdef	_PPC_MSR_FP
+/* Diab Data FP register names */
+
+#define	fp0	f0
+#define	fr0	f0
+#define	fp1	f1
+#define	fr1	f1
+#define	fp2	f2
+#define	fr2	f2
+#define	fp3	f3
+#define	fr3	f3
+#define	fp4	f4
+#define	fr4	f4
+#define	fp5	f5
+#define	fr5	f5
+#define	fp6	f6
+#define	fr6	f6
+#define	fp7	f7
+#define	fr7	f7
+#define	fp8	f8
+#define	fr8	f8
+#define	fp9	f9
+#define	fr9	f9
+#define	fp10	f10
+#define	fr10	f10
+#define	fp11	f11
+#define	fr11	f11
+#define	fp12	f12
+#define	fr12	f12
+#define	fp13	f13
+#define	fr13	f13
+#define	fp14	f14
+#define	fr14	f14
+#define	fp15	f15
+#define	fr15	f15
+#define	fp16	f16
+#define	fr16	f16
+#define	fp17	f17
+#define	fr17	f17
+#define	fp18	f18
+#define	fr18	f18
+#define	fp19	f19
+#define	fr19	f19
+#define	fp20	f20
+#define	fr20	f20
+#define	fp21	f21
+#define	fr21	f21
+#define	fp22	f22
+#define	fr22	f22
+#define	fp23	f23
+#define	fr23	f23
+#define	fp24	f24
+#define	fr24	f24
+#define	fp25	f25
+#define	fr25	f25
+#define	fp26	f26
+#define	fr26	f26
+#define	fp27	f27
+#define	fr27	f27
+#define	fp28	f28
+#define	fr28	f28
+#define	fp29	f29
+#define	fr29	f29
+#define	fp30	f30
+#define	fr30	f30
+#define	fp31	f31
+#define	fr31	f31
+#endif	/* _PPC_MSR_FP */
+
+/* Macro for hiadjust and lo */
+
+#define HIADJ(arg)      %hiadj(arg)
+#define HI(arg)		%hi(arg)
+#define LO(arg)      	%lo(arg)
+
+#endif	/* _DIAB_TOOL */
+
+/*
+ * define r2 as VTOC/GOT(EABI), system use(SVR4)/TOC/GOT(PO),dedicated. 
+ * define r13 as CTOC/GOT anchor pointer, dedicated (EABI), non-volatile
+ * register (SVR4, PO) 
+ */
+
+#define FUNC(func)	    func
+#define FUNC_LABEL(func)    func:
+
+#define FUNC_DECL(range, func)
+#define VAR_DECL(var)   var
+#define VAR(var)        var(r0)
+
+/*
+ * These macros are used to declare assembly language symbols that need
+ * to be typed properly(func or data) to be visible to the OMF tool.  
+ * So that the build tool could mark them as an entry point to be linked
+ * by another PD.
+ */
+
+#define GTEXT(sym) FUNC(sym) ;  .type   FUNC(sym),@function
+#define GDATA(sym) VAR_DECL(sym) ;  .type   VAR_DECL(sym),@object
+
+/* Introduced to abstract assembler idiosyncrasies */
+
+#define	FUNC_EXPORT(func)	.globl	GTEXT(func)
+#define	DATA_EXPORT(var)	.globl	GDATA(var)
+#define	FUNC_IMPORT(func)	.extern	FUNC(func)
+#define	DATA_IMPORT(var)	.extern	VAR_DECL(var)
+#define	FUNC_BEGIN(func)	FUNC_LABEL(func)
+#define	FUNC_END(func)		.size	FUNC(func), . - FUNC(func)
+
+/* Macro for beginning a text segment */
+
+#define _WRS_TEXT_SEG_START \
+        .text ; .balign _PPC_TEXT_SEG_ALIGN
+
+#define	FRAMESZ(nregs)	\
+    	  ROUND_UP((FRAMEBASESZ + nregs * _PPC_HREG_SIZE), _STACK_ALIGN_SIZE)
+
+#define	LOADPTR(reg,const32) \
+	  addis reg,r0,HIADJ(const32); addi reg,reg,LO(const32)
+
+#define	LOADVAR(reg,const32) \
+	  addis reg,r0,HIADJ(const32); lwz reg,LO(const32)(reg)
+
+#else	/* _ASMLANGUAGE */
+
+#define _WRS_ASM(x) __asm volatile (x)
+
+/*
+ * Use constant sizes if known (when building for a specific CPU type)
+ * else fetch from a global variable (when building for generic PPC32)
+ */
+
+#ifdef	_CPU_STACK_ALIGN_SIZE
+#define	_STACK_ALIGN_SIZE	_CPU_STACK_ALIGN_SIZE
+#else	/* _CPU_STACK_ALIGN_SIZE */
+#define	_STACK_ALIGN_SIZE	_ppcStackAlignSize
+extern	int	_ppcStackAlignSize;
+#endif	/* _CPU_STACK_ALIGN_SIZE */
+
+#ifdef	_CPU_ALLOC_ALIGN_SIZE
+#define	_ALLOC_ALIGN_SIZE	_CPU_ALLOC_ALIGN_SIZE
+#else	/* _CPU_ALLOC_ALIGN_SIZE */
+#define	_ALLOC_ALIGN_SIZE	_ppcAllocationQuantumSize
+extern	int	_ppcAllocationQuantumSize;
+#endif	/* _CPU_ALLOC_ALIGN_SIZE */
+
+#define	FUNCREF(func)	func
+
+#endif	/* _ASMLANGUAGE */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __INCsysPpcAsmh */
diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index a8fd6a7..fd22b69 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -62,7 +62,7 @@ This file implements the hypervisor system call stubs for the hypervisor.
 
 #ifdef CONFIG_WRHV
 #include <vbi/vbi.h>
-#include <vbi/support/asm.h>
+#include <asm/vbi.h>
 #else
 #include <vbi.h>
 #include <asm.h>
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index eb1f8ef..660b779 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -48,7 +48,7 @@ This file implements the hypervisor system call stubs for the Razor hypervisor.
 
 #ifdef CONFIG_WRHV
 #include <vbi/support/sys/x86/regs.h>
-#include <vbi/support/sys/x86/asm.h>
+#include <asm/vbi.h>
 #include <vbi/syscall.h>
 #else
 #include <x86/regs.h>
diff --git a/include/asm-x86/vbi.h b/include/asm-x86/vbi.h
new file mode 100644
index 0000000..c550441
--- /dev/null
+++ b/include/asm-x86/vbi.h
@@ -0,0 +1,147 @@
+/* sys/x86/asm.h - x86 tool dependent headers */
+
+/*
+ * Copyright 2007-2009 Wind River Systems, Inc.
+ *
+ * The right to copy, distribute, modify or otherwise make use
+ * of this software may be licensed only pursuant to the terms
+ * of an applicable Wind River license agreement.
+ */
+
+/*
+modification history
+--------------------
+01b,06aug09,md   add 64-bit support
+01a,04oct07,md   written from VxWorks asmI86.h version 01n
+*/
+
+#ifndef __INCsysX86Asmh
+#define __INCsysX86Asmh
+
+/*
+ * The following definitions are used for symbol name compatibility.
+ * 
+ * When #if 1, sources are assembled assuming the compiler
+ * you are using does not generate global symbols prefixed by "_".
+ * (e.g. elf/dwarf)
+ * 
+ * When #if 0, sources are assembled assuming the compiler
+ * you are using generates global symbols prefixed by "_".
+ * (e.g. coff/stabs)
+ */
+
+#if	TRUE
+#define FUNC(sym)		sym
+#define FUNC_LABEL(sym)		sym:
+#else
+#define FUNC(sym)		_##sym
+#define FUNC_LABEL(sym)		_##sym:
+#endif
+
+#define VAR(sym)		FUNC(sym)
+
+/*
+ * These macros are used to declare assembly language symbols that need
+ * to be typed properly(func or data) to be visible to the OMF tool.  
+ * So that the build tool could mark them as an entry point to be linked
+ * correctly.  This is an elfism. Use #if 0 for a.out.
+ */
+
+#if	TRUE
+#define GTEXT(sym) FUNC(sym) ;  .type   FUNC(sym),@function
+#define GDATA(sym) FUNC(sym) ;  .type   FUNC(sym),@object
+#else
+#define GTEXT(sym) FUNC(sym)
+#define GDATA(sym) FUNC(sym)
+#endif
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef LP64
+/* x86-64 ABI */
+#define INTARG1_64 %rdi
+#define INTARG2_64 %rsi
+#define INTARG3_64 %rdx
+#define INTARG4_64 %rcx
+#define INTARG5_64 %r8
+#define INTARG6_64 %r9
+
+#define INTARG1_32 %edi
+#define INTARG2_32 %esi
+#define INTARG3_32 %edx
+#define INTARG4_32 %ecx
+#define INTARG5_32 %r8d
+#define INTARG6_32 %r9d
+
+#define INTARG1_16 %di
+#define INTARG2_16 %si
+#define INTARG3_16 %dx
+#define INTARG4_16 %cx
+
+#define INTRET1	%rax
+#define INTRET2	%rdx
+
+/* these should not be used by x86-64 ABI-compliant code */
+#define SP_ARG0		0
+#define SP_ARG1		4
+#define SP_ARG2		8
+#define SP_ARG3		12
+
+#else
+/* fp offsets to arguments */
+
+#define ARG1	8
+#define ARG1W	10
+#define ARG2	12
+#define ARG2W	14
+#define ARG3	16
+#define ARG3W	18
+#define ARG4	20
+#define ARG5	24
+#define ARG6	28
+#define ARG7	32
+#define ARG8	36
+#define ARG9	40
+#define ARG10	44
+#define ARG11	48
+#define ARG12	52
+
+#define DARG1	8		/* double arguments */
+#define	DARG1L	12
+#define DARG2	16
+#define DARG2L	20
+#define DARG3	24
+#define DARG3L	28
+#define DARG4	32
+#define DARG4L	36
+
+/* sp offsets to arguments */
+
+#define SP_ARG0		0
+#define SP_ARG1		4
+#define SP_ARG1W	6
+#define SP_ARG2		8
+#define SP_ARG2W	10
+#define SP_ARG3		12
+#define SP_ARG3W	14
+#define SP_ARG4		16
+#define SP_ARG5		20
+#define SP_ARG6		24
+#define SP_ARG7		28
+#define SP_ARG8		32
+#define SP_ARG9		36
+#define SP_ARG10	40
+#define SP_ARG11	44
+#define SP_ARG12	48
+#endif
+
+#define _WRS_ASM(x) __asm volatile (x)
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __INCsysX86Asmh */
diff --git a/include/vbi/support/asm.h b/include/vbi/support/asm.h
deleted file mode 100644
index 287046f..0000000
--- a/include/vbi/support/asm.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/* asm.h - razor C assembler definitions */
-
-/* Copyright 2007 Wind River Systems, Inc. */
-
-/*
-modification history
---------------------
-01d,15jul09,dtr  Support PPCE500MC cpu.
-01c,17mar09,mpk  OCTEON port from drc
-01b,16jul08,gws  adding ARM cpu
-01a,04oct07,md   written
-*/
-
-#ifndef __INCasmh
-#define __INCasmh
-
-#ifdef CONFIG_WRHV
-#include "sys/cpu_types.h"
-#else
-#include <sys/cpu_types.h>
-#endif /* CONFIG_WRHV */
-
-/* include the appropriate arch specific header file */
-
-#if (CPU == MIPSI64R2)
-# include <sys/mips64/asm.h>
-#elif (CPU == PPC85XX)
-#ifdef CONFIG_WRHV
-# include "sys/ppc/asm.h"
-#else
-# include <sys/ppc/asm.h>
-#endif /* CONFIG_WRHV */
-#elif (CPU == PPCE500MC)
-# include <sys/ppc/asm.h>
-#elif (CPU == PENTIUM)
-# include <sys/x86/asm.h>
-#elif (CPU == ARM1136)
-# include <sys/arm1136/asm.h>
-#endif
-
-#endif  /* __INCasmh */
diff --git a/include/vbi/support/sys/ppc/asm.h b/include/vbi/support/sys/ppc/asm.h
deleted file mode 100644
index 427de23..0000000
--- a/include/vbi/support/sys/ppc/asm.h
+++ /dev/null
@@ -1,526 +0,0 @@
-/* sys/ppc/asm.h - PowerPC tool dependent headers */
-
-/* Copyright 2007 Wind River Systems, Inc. */
-/*
-modification history
---------------------
-01c,15jul09,dtr  Support CPU PPCE500MC.
-01b,23nov07,foo  add spr defines
-01a,03oct07,md   written from VxWorks toolPpc.h version 02c
-*/
-
-#ifndef __INCsysPpcAsmh
-#define __INCsysPpcAsmh
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#if	!defined(_DIAB_TOOL) && !defined(_GNU_TOOL)
-#define	_GNU_TOOL
-#endif
-
-/* PowerPC specific settings */
-#if (CPU==PPCE500MC)
-#define	_PPC_HREG_SIZE		4	/* default register size */
-#define _PPC_TEXT_SEG_ALIGN     8       /* 8 byte text segment alignment */
-#else
-#define	_PPC_HREG_SIZE		4	/* default register size */
-#define _PPC_TEXT_SEG_ALIGN     4       /* 4 byte text segment alignment */
-#endif
-
-/* macros for stack frame */
-
-/*
-SVR4 Stack space allocation:
-
-    Before Dynamic stack allocation
-
-    +----------------------------------+
-    |       Back Chain                 |
-    |----------------------------------|
-    |  Register save areas             |
-    |----------------------------------|
-    |  local,non-static variables      |
-    |----------------------------------|
-    |  parameter lists for callees     | (overloaded parameters with #)
-    |----------------------------------|
-    |      LR save word                |
-    |----------------------------------|
-SP=>|      Back chain                  |
-    +----------------------------------+
-
-    After Dynamic stack allocation
-
-    +----------------------------------+
-    |       Back Chain                 |
-    |----------------------------------|
-    |  Register save areas             |
-    |----------------------------------|
-    |  local,non-static variables      |
-    |----------------------------------|
-    |  Dynamic Allocation Area         | 16 byte stack alignment
-    |----------------------------------|
-    |  parameter lists for callees     |
-    |----------------------------------|
-    |      LR save word                |
-    |----------------------------------|
-SP=>|      Back chain                  |
-    +----------------------------------+ 16 bytes stack alignment
-*/
-
-  /* Stack and Allocation alignment */
-
-/*
- * While it is possible to use different stack alignments for different
- * PPC processors, current compilers use 16-byte alignment for all.
- */
-
-#define _CPU_STACK_ALIGN_SIZE	16	/* stack alignment (for all PPC) */
-#define	_CPU_STACK_ALIGN_SHIFT	4
-
-#if	((CPU == PPC604) || (CPU == PPC85XX) || (CPU == PPCE500MC) || (CPU == PPC970)) /* Altivec, E500 EABI */
-# define _CPU_ALLOC_ALIGN_SIZE	16	/* allocation alignment */
-#elif	(CPU != PPC32)			/* for others, !defined for generic */
-# define _CPU_ALLOC_ALIGN_SIZE	8	/* allocation alignment */
-#endif	/* PPC604|PPC85XX|PPC970 : !PPC32 */
-
-#define	FRAMEBASESZ		16	/* minimum stack frame size */
-
-/*
-*
-* _WRS_ARCH_USER_STACK_FRAME_EXTENSION - creating words on the stack for the 
-*                                        back chain word and the LR register.
-*
-* This macro is used in creating the initial stack frame for an RTP's initial 
-* task. It performs the extra steps of creating words on the stack for the 
-* back chain word and the LR register. Both these locations are set to 0 to 
-* prevent stack traces and debuggers from looking ahead.
-*
-* NOMANUAL
-*/
-
-#define _WRS_ARCH_USER_STACK_FRAME_EXTENSION(sp)			     \
-    do									     \
-	{								     \
-	(sp) -= 2*sizeof(int *);					     \
-	*((int *)(sp)) = (int)0;					     \
-	*((int *)((sp)+4)) = (int)0;					     \
-	} while ((0))
-
-
-#ifdef	_ASMLANGUAGE
-
-/* register definition */
-
-/* common SPR registers */
-
-#ifndef XER
-#define XER 1
-#endif
-#ifndef LR
-#define LR 8
-#endif						
-#ifndef CTR
-#define CTR 9
-#endif
-
-/* volatile registers that are not saved across subroutine calls */
-
-#define p0	r3	/* argument register, volatile */
-#define p1	r4	/* argument register, volatile */
-#define p2	r5	/* argument register, volatile */
-#define p3	r6	/* argument register, volatile */
-#define p4	r7	/* argument register, volatile */
-#define p5	r8	/* argument register, volatile */
-#define p6	r9	/* argument register, volatile */
-#define p7	r10	/* argument register, volatile */
-#define glr0	r0	/* prologs(PO,EABI), epilogs, glink routines(EABI) /
-			 * language specific purpose(SVR4), volatile */
-#define glr1	r11	/* prologs, epilogs, as Pascal environment pointer(EABI)
-			 * language specific purpose (SVR4)
-			 * calls by pointer, as Pascal environment(PO), 
-			 * volatile */
-#define glr2	r12	/* prologs, epilogs, glink routines, calls by 
-			 * pointer(EABI), language specific purpose (SVR4),
-			 * glue code, exception handling (PO), volatile */
-#define retval0	r3	/* return register 0, volatile */
-#define retval1	r4	/* return register 1, volatile */
-
-
-/* non-volatile and dedicated registers saved across subroutine calls */
-
-#define	sp	r1	/* stack pointer, dedicated */
-
-#define t0	r14	/* temporary registers, non-volatile */
-#define t1	r15	/* temporary registers, non-volatile */
-#define t2	r16	/* temporary registers, non-volatile */
-#define t3	r17	/* temporary registers, non-volatile */
-#define t4	r18	/* temporary registers, non-volatile */
-#define t5	r19	/* temporary registers, non-volatile */
-#define t6	r20	/* temporary registers, non-volatile */
-#define t7	r21	/* temporary registers, non-volatile */
-#define t8	r22	/* temporary registers, non-volatile */
-#define t9	r23	/* temporary registers, non-volatile */
-#define t10	r24	/* temporary registers, non-volatile */
-#define t11	r25	/* temporary registers, non-volatile */
-#define t12	r26	/* temporary registers, non-volatile */
-#define t13	r27	/* temporary registers, non-volatile */
-#define t14	r28	/* temporary registers, non-volatile */
-#define t15	r29	/* temporary registers, non-volatile */
-#define t16	r30	/* temporary registers, non-volatile */
-#define t17	r31	/* temporary registers, non-volatile */
-
-#ifdef	_GNU_TOOL
-
-/* GP register names */
-
-#define r0	0
-#define r1	1
-#define r2	2
-#define r3	3
-#define r4	4
-#define r5	5
-#define r6	6
-#define r7	7
-#define r8	8
-#define r9	9
-#define r10	10
-#define r11	11
-#define r12	12
-#define r13	13
-#define r14	14
-#define r15	15
-#define r16	16
-#define r17	17
-#define r18	18
-#define r19	19
-#define r20	20
-#define r21	21
-#define r22	22
-#define r23	23
-#define r24	24
-#define r25	25
-#define r26	26
-#define r27	27
-#define r28	28
-#define r29	29
-#define r30	30
-#define r31	31
-
-#ifdef	_PPC_MSR_FP
-/* FP register names */
-
-#define	fp0	0
-#define	fr0	0
-#define	f0	0
-#define	fp1	1
-#define	fr1	1
-#define	f1	1
-#define	fp2	2
-#define	fr2	2
-#define	f2	2
-#define	fp3	3
-#define	fr3	3
-#define	f3	3
-#define	fp4	4
-#define	fr4	4
-#define	f4	4
-#define	fp5	5
-#define	fr5	5
-#define	f5	5
-#define	fp6	6
-#define	fr6	6
-#define	f6	6
-#define	fp7	7
-#define	fr7	7
-#define	f7	7
-#define	fp8	8
-#define	fr8	8
-#define	f8	8
-#define	fp9	9
-#define	fr9	9
-#define	f9	9
-#define	fp10	10
-#define	fr10	10
-#define	f10	10
-#define	fp11	11
-#define	fr11	11
-#define	f11	11
-#define	fp12	12
-#define	fr12	12
-#define	f12	12
-#define	fp13	13
-#define	fr13	13
-#define	f13	13
-#define	fp14	14
-#define	fr14	14
-#define	f14	14
-#define	fp15	15
-#define	fr15	15
-#define	f15	15
-#define	fp16	16
-#define	fr16	16
-#define	f16	16
-#define	fp17	17
-#define	fr17	17
-#define	f17	17
-#define	fp18	18
-#define	fr18	18
-#define	f18	18
-#define	fp19	19
-#define	fr19	19
-#define	f19	19
-#define	fp20	20
-#define	fr20	20
-#define	f20	20
-#define	fp21	21
-#define	fr21	21
-#define	f21	21
-#define	fp22	22
-#define	fr22	22
-#define	f22	22
-#define	fp23	23
-#define	fr23	23
-#define	f23	23
-#define	fp24	24
-#define	fr24	24
-#define	f24	24
-#define	fp25	25
-#define	fr25	25
-#define	f25	25
-#define	fp26	26
-#define	fr26	26
-#define	f26	26
-#define	fp27	27
-#define	fr27	27
-#define	f27	27
-#define	fp28	28
-#define	fr28	28
-#define	f28	28
-#define	fp29	29
-#define	fr29	29
-#define	f29	29
-#define	fp30	30
-#define	fr30	30
-#define	f30	30
-#define	fp31	31
-#define	fr31	31
-#define	f31	31
-#endif	/* _PPC_MSR_FP */
-
-/* Condition register names */
-
-#define cr0	0
-#define cr1	1
-#define cr2	2
-#define cr3	3
-#define cr4	4
-#define cr5	5
-#define cr6	6
-#define cr7	7
-
-/* Macro for hiadjust and lo */
-
-#define HIADJ(arg)	arg@ha
-#define HI(arg)		arg@h
-#define LO(arg)		arg@l
-
-#ifdef _PPC_MSR_VEC
-
-/* ALTIVEC Vector register names */
-
-#define v0      0
-#define v1      1
-#define v2      2
-#define v3      3
-#define v4      4
-#define v5      5
-#define v6      6
-#define v7      7
-#define v8      8
-#define v9      9
-#define v10     10
-#define v11     11
-#define v12     12
-#define v13     13
-#define v14     14
-#define v15     15
-#define v16     16
-#define v17     17
-#define v18     18
-#define v19     19
-#define v20     20
-#define v21     21
-#define v22     22
-#define v23     23
-#define v24     24
-#define v25     25
-#define v26     26
-#define v27     27
-#define v28     28
-#define v29     29
-#define v30     30
-#define v31     31
-
-#endif /* _PPC_MSR_VEC */
-
-#endif	/* _GNU_TOOL */
-
-#ifdef	_DIAB_TOOL
-
-#ifdef	_PPC_MSR_FP
-/* Diab Data FP register names */
-
-#define	fp0	f0
-#define	fr0	f0
-#define	fp1	f1
-#define	fr1	f1
-#define	fp2	f2
-#define	fr2	f2
-#define	fp3	f3
-#define	fr3	f3
-#define	fp4	f4
-#define	fr4	f4
-#define	fp5	f5
-#define	fr5	f5
-#define	fp6	f6
-#define	fr6	f6
-#define	fp7	f7
-#define	fr7	f7
-#define	fp8	f8
-#define	fr8	f8
-#define	fp9	f9
-#define	fr9	f9
-#define	fp10	f10
-#define	fr10	f10
-#define	fp11	f11
-#define	fr11	f11
-#define	fp12	f12
-#define	fr12	f12
-#define	fp13	f13
-#define	fr13	f13
-#define	fp14	f14
-#define	fr14	f14
-#define	fp15	f15
-#define	fr15	f15
-#define	fp16	f16
-#define	fr16	f16
-#define	fp17	f17
-#define	fr17	f17
-#define	fp18	f18
-#define	fr18	f18
-#define	fp19	f19
-#define	fr19	f19
-#define	fp20	f20
-#define	fr20	f20
-#define	fp21	f21
-#define	fr21	f21
-#define	fp22	f22
-#define	fr22	f22
-#define	fp23	f23
-#define	fr23	f23
-#define	fp24	f24
-#define	fr24	f24
-#define	fp25	f25
-#define	fr25	f25
-#define	fp26	f26
-#define	fr26	f26
-#define	fp27	f27
-#define	fr27	f27
-#define	fp28	f28
-#define	fr28	f28
-#define	fp29	f29
-#define	fr29	f29
-#define	fp30	f30
-#define	fr30	f30
-#define	fp31	f31
-#define	fr31	f31
-#endif	/* _PPC_MSR_FP */
-
-/* Macro for hiadjust and lo */
-
-#define HIADJ(arg)      %hiadj(arg)
-#define HI(arg)		%hi(arg)
-#define LO(arg)      	%lo(arg)
-
-#endif	/* _DIAB_TOOL */
-
-/*
- * define r2 as VTOC/GOT(EABI), system use(SVR4)/TOC/GOT(PO),dedicated. 
- * define r13 as CTOC/GOT anchor pointer, dedicated (EABI), non-volatile
- * register (SVR4, PO) 
- */
-
-#define FUNC(func)	    func
-#define FUNC_LABEL(func)    func:
-
-#define FUNC_DECL(range, func)
-#define VAR_DECL(var)   var
-#define VAR(var)        var(r0)
-
-/*
- * These macros are used to declare assembly language symbols that need
- * to be typed properly(func or data) to be visible to the OMF tool.  
- * So that the build tool could mark them as an entry point to be linked
- * by another PD.
- */
-
-#define GTEXT(sym) FUNC(sym) ;  .type   FUNC(sym),@function
-#define GDATA(sym) VAR_DECL(sym) ;  .type   VAR_DECL(sym),@object
-
-/* Introduced to abstract assembler idiosyncrasies */
-
-#define	FUNC_EXPORT(func)	.globl	GTEXT(func)
-#define	DATA_EXPORT(var)	.globl	GDATA(var)
-#define	FUNC_IMPORT(func)	.extern	FUNC(func)
-#define	DATA_IMPORT(var)	.extern	VAR_DECL(var)
-#define	FUNC_BEGIN(func)	FUNC_LABEL(func)
-#define	FUNC_END(func)		.size	FUNC(func), . - FUNC(func)
-
-/* Macro for beginning a text segment */
-
-#define _WRS_TEXT_SEG_START \
-        .text ; .balign _PPC_TEXT_SEG_ALIGN
-
-#define	FRAMESZ(nregs)	\
-    	  ROUND_UP((FRAMEBASESZ + nregs * _PPC_HREG_SIZE), _STACK_ALIGN_SIZE)
-
-#define	LOADPTR(reg,const32) \
-	  addis reg,r0,HIADJ(const32); addi reg,reg,LO(const32)
-
-#define	LOADVAR(reg,const32) \
-	  addis reg,r0,HIADJ(const32); lwz reg,LO(const32)(reg)
-
-#else	/* _ASMLANGUAGE */
-
-#define _WRS_ASM(x) __asm volatile (x)
-
-/*
- * Use constant sizes if known (when building for a specific CPU type)
- * else fetch from a global variable (when building for generic PPC32)
- */
-
-#ifdef	_CPU_STACK_ALIGN_SIZE
-#define	_STACK_ALIGN_SIZE	_CPU_STACK_ALIGN_SIZE
-#else	/* _CPU_STACK_ALIGN_SIZE */
-#define	_STACK_ALIGN_SIZE	_ppcStackAlignSize
-extern	int	_ppcStackAlignSize;
-#endif	/* _CPU_STACK_ALIGN_SIZE */
-
-#ifdef	_CPU_ALLOC_ALIGN_SIZE
-#define	_ALLOC_ALIGN_SIZE	_CPU_ALLOC_ALIGN_SIZE
-#else	/* _CPU_ALLOC_ALIGN_SIZE */
-#define	_ALLOC_ALIGN_SIZE	_ppcAllocationQuantumSize
-extern	int	_ppcAllocationQuantumSize;
-#endif	/* _CPU_ALLOC_ALIGN_SIZE */
-
-#define	FUNCREF(func)	func
-
-#endif	/* _ASMLANGUAGE */
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* __INCsysPpcAsmh */
diff --git a/include/vbi/support/sys/x86/asm.h b/include/vbi/support/sys/x86/asm.h
deleted file mode 100644
index c550441..0000000
--- a/include/vbi/support/sys/x86/asm.h
+++ /dev/null
@@ -1,147 +0,0 @@
-/* sys/x86/asm.h - x86 tool dependent headers */
-
-/*
- * Copyright 2007-2009 Wind River Systems, Inc.
- *
- * The right to copy, distribute, modify or otherwise make use
- * of this software may be licensed only pursuant to the terms
- * of an applicable Wind River license agreement.
- */
-
-/*
-modification history
---------------------
-01b,06aug09,md   add 64-bit support
-01a,04oct07,md   written from VxWorks asmI86.h version 01n
-*/
-
-#ifndef __INCsysX86Asmh
-#define __INCsysX86Asmh
-
-/*
- * The following definitions are used for symbol name compatibility.
- * 
- * When #if 1, sources are assembled assuming the compiler
- * you are using does not generate global symbols prefixed by "_".
- * (e.g. elf/dwarf)
- * 
- * When #if 0, sources are assembled assuming the compiler
- * you are using generates global symbols prefixed by "_".
- * (e.g. coff/stabs)
- */
-
-#if	TRUE
-#define FUNC(sym)		sym
-#define FUNC_LABEL(sym)		sym:
-#else
-#define FUNC(sym)		_##sym
-#define FUNC_LABEL(sym)		_##sym:
-#endif
-
-#define VAR(sym)		FUNC(sym)
-
-/*
- * These macros are used to declare assembly language symbols that need
- * to be typed properly(func or data) to be visible to the OMF tool.  
- * So that the build tool could mark them as an entry point to be linked
- * correctly.  This is an elfism. Use #if 0 for a.out.
- */
-
-#if	TRUE
-#define GTEXT(sym) FUNC(sym) ;  .type   FUNC(sym),@function
-#define GDATA(sym) FUNC(sym) ;  .type   FUNC(sym),@object
-#else
-#define GTEXT(sym) FUNC(sym)
-#define GDATA(sym) FUNC(sym)
-#endif
-
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#ifdef LP64
-/* x86-64 ABI */
-#define INTARG1_64 %rdi
-#define INTARG2_64 %rsi
-#define INTARG3_64 %rdx
-#define INTARG4_64 %rcx
-#define INTARG5_64 %r8
-#define INTARG6_64 %r9
-
-#define INTARG1_32 %edi
-#define INTARG2_32 %esi
-#define INTARG3_32 %edx
-#define INTARG4_32 %ecx
-#define INTARG5_32 %r8d
-#define INTARG6_32 %r9d
-
-#define INTARG1_16 %di
-#define INTARG2_16 %si
-#define INTARG3_16 %dx
-#define INTARG4_16 %cx
-
-#define INTRET1	%rax
-#define INTRET2	%rdx
-
-/* these should not be used by x86-64 ABI-compliant code */
-#define SP_ARG0		0
-#define SP_ARG1		4
-#define SP_ARG2		8
-#define SP_ARG3		12
-
-#else
-/* fp offsets to arguments */
-
-#define ARG1	8
-#define ARG1W	10
-#define ARG2	12
-#define ARG2W	14
-#define ARG3	16
-#define ARG3W	18
-#define ARG4	20
-#define ARG5	24
-#define ARG6	28
-#define ARG7	32
-#define ARG8	36
-#define ARG9	40
-#define ARG10	44
-#define ARG11	48
-#define ARG12	52
-
-#define DARG1	8		/* double arguments */
-#define	DARG1L	12
-#define DARG2	16
-#define DARG2L	20
-#define DARG3	24
-#define DARG3L	28
-#define DARG4	32
-#define DARG4L	36
-
-/* sp offsets to arguments */
-
-#define SP_ARG0		0
-#define SP_ARG1		4
-#define SP_ARG1W	6
-#define SP_ARG2		8
-#define SP_ARG2W	10
-#define SP_ARG3		12
-#define SP_ARG3W	14
-#define SP_ARG4		16
-#define SP_ARG5		20
-#define SP_ARG6		24
-#define SP_ARG7		28
-#define SP_ARG8		32
-#define SP_ARG9		36
-#define SP_ARG10	40
-#define SP_ARG11	44
-#define SP_ARG12	48
-#endif
-
-#define _WRS_ASM(x) __asm volatile (x)
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* __INCsysX86Asmh */
-- 
1.6.3.3

