From 3b9f7fe98a8bd49dc0eec455c1587dbdeb9df4ca Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 2 Dec 2009 19:27:38 -0500
Subject: [PATCH 26/43] wrhvControl --> wr_control

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/include/asm/reg_wrhv.h       |   16 ++++++++--------
 arch/powerpc/kernel/head_wrhv.S           |    8 ++++----
 arch/powerpc/kernel/vbi/util.c            |    2 +-
 arch/powerpc/kernel/vbi/wrhv.c            |   20 ++++++++++----------
 arch/powerpc/kernel/wrhv_entry_32.S       |   14 +++++++-------
 arch/powerpc/platforms/85xx/wrhv_8572ds.c |    2 +-
 arch/x86/kernel/vbi/wrhv.c                |    2 +-
 include/vbi/compat.h                      |    1 +
 kernel/vbi/lib.c                          |    2 +-
 9 files changed, 34 insertions(+), 33 deletions(-)

diff --git a/arch/powerpc/include/asm/reg_wrhv.h b/arch/powerpc/include/asm/reg_wrhv.h
index a36f2ef..b3c537f 100644
--- a/arch/powerpc/include/asm/reg_wrhv.h
+++ b/arch/powerpc/include/asm/reg_wrhv.h
@@ -60,13 +60,13 @@
 
 #define WRHV_INT_LOCK(tmpr1,tmpr2)                      \
 	li	tmpr2,-1;                               \
-	lis	tmpr1,wrhvControl@ha;                   \
-	lwz	tmpr1,wrhvControl@l(tmpr1);             \
+	lis	tmpr1,wr_control@ha;                   \
+	lwz	tmpr1,wr_control@l(tmpr1);             \
 	stw	tmpr2,VB_CONTROL_INT_DISABLE(tmpr1)
 
 #define WRHV_INT_UNLOCK(tmpr1,tmpr2)                    \
-	lis	tmpr1,wrhvControl@ha;                   \
-	lwz	tmpr1,wrhvControl@l(tmpr1);             \
+	lis	tmpr1,wr_control@ha;                   \
+	lwz	tmpr1,wr_control@l(tmpr1);             \
 	li	tmpr2,0;                                \
 	stw	tmpr2,VB_CONTROL_INT_DISABLE(tmpr1);    \
 	lis	tmpr1,wrhvStatus@ha;                    \
@@ -82,8 +82,8 @@
 1:
 
 #define WRHV_INT_LVL_GET(rd)                            \
-	lis	rd,wrhvControl@ha;                      \
-	lwz	rd,wrhvControl@l(rd);                   \
+	lis	rd,wr_control@ha;                      \
+	lwz	rd,wr_control@l(rd);                   \
 	lwz	rd,VB_CONTROL_INT_DISABLE(rd)
 
 #define WRHV_FIX_MSR(msr,tmpr)                                  \
@@ -104,8 +104,8 @@
 	rlwinm.	tmpr1,msr,0,16,16;      /* test EE bit */       \
 	bne	1f;                     /* IT unlocked? */      \
 	li	tmpr2,-1;                                       \
-1:	lis	tmpr1,wrhvControl@ha;                           \
-	lwz	tmpr1,wrhvControl@l(tmpr1);                     \
+1:	lis	tmpr1,wr_control@ha;                           \
+	lwz	tmpr1,wr_control@l(tmpr1);                     \
 	stw	tmpr2,VB_CONTROL_NEW_INT_DISABLE(tmpr1);        \
 	stw	msr,VB_CONTROL_SRR1(tmpr1);                     \
 	li	tmpr2,1;                                        \
diff --git a/arch/powerpc/kernel/head_wrhv.S b/arch/powerpc/kernel/head_wrhv.S
index fe52654..938b775 100644
--- a/arch/powerpc/kernel/head_wrhv.S
+++ b/arch/powerpc/kernel/head_wrhv.S
@@ -262,8 +262,8 @@ interrupt_base:
 	/* Data Storage Interrupt */
 	START_EXCEPTION(DataStorage)
         /*    only  r3, r4, CR are saved in vbStatus */
-       	lis	r4,wrhvControl@ha
-       	lwz	r4,wrhvControl@l(r4)
+       	lis	r4,wr_control@ha
+       	lwz	r4,wr_control@l(r4)
 	stw	r10,VB_CONTROL_R10(r4)
 	stw	r11,VB_CONTROL_R11(r4)
 	stw	r12,VB_CONTROL_R12(r4)
@@ -387,8 +387,8 @@ interrupt_base:
 	 * The bailout.  Restore registers to pre-exception conditions
 	 * and call the heavyweights to help us out.
 	 */
-       	lis	r11,wrhvControl@ha
-       	lwz	r11,wrhvControl@l(r11)
+       	lis	r11,wr_control@ha
+       	lwz	r11,wr_control@l(r11)
 	lwz     r13,VB_CONTROL_R13(r11)
 	lwz     r12,VB_CONTROL_R12(r11)
 	lwz     r10,VB_CONTROL_R10(r11)
diff --git a/arch/powerpc/kernel/vbi/util.c b/arch/powerpc/kernel/vbi/util.c
index 5f15993..16e2437 100644
--- a/arch/powerpc/kernel/vbi/util.c
+++ b/arch/powerpc/kernel/vbi/util.c
@@ -39,7 +39,7 @@ para-virtualize linux, therefore, may need some tweaks to be generic.
 
 extern struct vb_config *wrhvConfig;
 extern struct vb_status *wrhvStatus;
-extern struct vb_control *wrhvControl;
+extern struct vb_control *wr_control;
 
 /* local */
 
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 064dd3a..c723798 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -117,7 +117,7 @@
 
 static struct vb_config __wrhvConfig;
 struct vb_config *wrhvConfig;		/* TODO kernel relocation friendly ? */
-struct vb_control *wrhvControl;
+struct vb_control *wr_control;
 struct vb_status *wrhvStatus;
 EXPORT_SYMBOL(wrhvConfig);
 
@@ -307,7 +307,7 @@ unsigned int wrhv_vioapic_get_irq(void)
 {
 	unsigned int irq;
 
-	irq = wrhvControl->int_pend;
+	irq = wr_control->int_pend;
 
 #ifdef CONFIG_DEBUG_VIRTUAL_IRQS
 	/* Maybe this is useless for real external interrupt */
@@ -317,7 +317,7 @@ unsigned int wrhv_vioapic_get_irq(void)
 	if (irq == 0xffff)
 		irq = NO_IRQ_IGNORE;
 	else
-		wrhvControl->int_pend = 0xffff;
+		wr_control->int_pend = 0xffff;
 
 	return irq;
 }
@@ -515,8 +515,8 @@ void wrhv_vmmu_restore(void)
 	/*
 	 * called by the end of page fault handling to reinstall the vmmu
 	 */
-	wrhvControl->vmmu0 = wrhvStatus->vmmu0;
-	wrhvControl->vmmu1 = wrhvStatus->vmmu1;
+	wr_control->vmmu0 = wrhvStatus->vmmu0;
+	wr_control->vmmu1 = wrhvStatus->vmmu1;
 	return;
 }
 
@@ -870,8 +870,8 @@ int wrhv_map_page(unsigned long va, phys_addr_t pa, int flags)
 /* arch/powerpc/kernel/traps.c */
 void __kprobes wrhv_DebugException(struct pt_regs *regs, unsigned long debug_status)
 {
-	debug_status = wrhvControl->vb_control_regs.dbsr;
-	wrhvControl->vb_control_regs.emsr &= ~MSR_DE;
+	debug_status = wr_control->vb_control_regs.dbsr;
+	wr_control->vb_control_regs.emsr &= ~MSR_DE;
 
 	if (debug_status & DBSR_IC) {   /* instruction completion */
 		regs->msr &= ~MSR_DE;
@@ -934,13 +934,13 @@ int wrhv_kgdb_arch_handle_exception(int vector, int signo, int err_code,
 			 * Set hypervisor DBCR0_IC single step and
 			 * DBCR0_IDM internal debug mode.
 			 */
-			wrhvControl->vb_control_regs.dbcr0 |= (DBCR0_IC | DBCR0_IDM);
+			wr_control->vb_control_regs.dbcr0 |= (DBCR0_IC | DBCR0_IDM);
 
 			/*
 			 * Set Debug Enable bit in hypervisor's emulated MSR which
 			 * is restored on return from exception
 			 */
-			wrhvControl->vb_control_regs.emsr |= MSR_DE;
+			wr_control->vb_control_regs.emsr |= MSR_DE;
 #else
 			linux_regs->msr |= MSR_SE;
 #endif
@@ -966,7 +966,7 @@ void wrhv_init(void)
 	 * is defined in Hypervisor linux.xml
 	 */
 	wrhvConfig = (struct vb_config *)0xF0000000;
-	wrhvControl = wrhvConfig->vbControl;
+	wr_control = wrhvConfig->vbControl;
 	wrhvStatus = wrhvConfig->vbStatus;
 
 	pv_info.name = "wrhv";
diff --git a/arch/powerpc/kernel/wrhv_entry_32.S b/arch/powerpc/kernel/wrhv_entry_32.S
index 1c060bb..8e550b5 100644
--- a/arch/powerpc/kernel/wrhv_entry_32.S
+++ b/arch/powerpc/kernel/wrhv_entry_32.S
@@ -135,8 +135,8 @@ paravirt_transfer_to_handler_cont:
 	lwz	r11,0(r9)		/* virtual address of handler */
 	lwz	r9,4(r9)		/* where to go when done */
 	mtlr	r9
-	lis	r9,wrhvControl@ha
-	lwz	r9,wrhvControl@l(r9)
+	lis	r9,wr_control@ha
+	lwz	r9,wr_control@l(r9)
 	stw	r11,VB_CONTROL_SRR0(r9)
 	mfcr	r11
 	stw	r11,VB_CONTROL_CR(r9)
@@ -154,7 +154,7 @@ paravirt_transfer_to_handler_cont:
 */
 
 #ifdef VMMU
-        /* restore vmmu from wrhvStatus to wrhvControl */
+        /* restore vmmu from wrhvStatus to wr_control */
 
 	lwz	r11,VB_STATUS_VMMU0(r12)
 	stw	r11,VB_CONTROL_VMMU0(r9)
@@ -271,8 +271,8 @@ END_FTR_SECTION_IFSET(CPU_FTR_NEED_PAIRED_STWCX)
 	lwz	r4,_LINK(r1)
 	lwz	r5,_CCR(r1)
 	mtlr	r4
-	lis	r4,wrhvControl@ha
-	lwz	r4,wrhvControl@l(r4)
+	lis	r4,wr_control@ha
+	lwz	r4,wr_control@l(r4)
 	stw	r5,VB_CONTROL_CR(r4)
 	lwz	r5,GPR0(r1)
 	stw	r5,VB_CONTROL_R0(r4)
@@ -413,8 +413,8 @@ _GLOBAL(paravirt_switch)
 	.globl	paravirt_restore
 paravirt_restore:
 #ifdef	CONFIG_WRHV
-	lis	r4,wrhvControl@ha
-	lwz	r4,wrhvControl@l(r4)
+	lis	r4,wr_control@ha
+	lwz	r4,wr_control@l(r4)
 	lwz	r0,GPR0(r1)
 	stw	r0,VB_CONTROL_R0(r4)
 	lwz	r2,GPR2(r1)
diff --git a/arch/powerpc/platforms/85xx/wrhv_8572ds.c b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
index 6a8048e..f061895 100644
--- a/arch/powerpc/platforms/85xx/wrhv_8572ds.c
+++ b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
@@ -38,7 +38,7 @@
 
 extern struct vb_config *wrhvConfig;
 extern struct vb_status *wrhvStatus;
-extern struct vb_control *wrhvControl;
+extern struct vb_control *wr_control;
 
 static void __init wrhv_85xx_pic_init(void)
 {
diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 06926d8..68e036e 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -42,7 +42,7 @@ struct vb_config __wrhvConfig = { .pid = -1 };
 struct vb_config *_wrhvConfig; /* Pointer passed from hypervisor */
 struct vb_config *wrhvConfig = &__wrhvConfig;
 struct vb_status *wrhvStatus;
-struct vb_control *wrhvControl;
+struct vb_control *wr_control;
 
 #ifdef CONFIG_PCI
 extern struct pci_ops pci_root_ops;
diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index a5d00fb..e9dff53 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -65,6 +65,7 @@
  * struct fields and similar
  */
 #define vbControlRegs		vb_control_regs
+#define wrhvControl		wr_control
 #define wrhvVbStatus		wr_vb_status
 #define wrhvVbControl		wr_vb_control
 #define wrhvVbConfig		wr_vb_config
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index 21574af..701112b 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -95,7 +95,7 @@ kept in the global variable wrhvStatus.
 
 This writable memory area is used by the virtual board to communicate
 information to the hypervisor, where they cannot be passed in a faster manner.
-The address of this area is kept in the global variable wrhvControl.
+The address of this area is kept in the global variable wr_control.
 
 */
 
-- 
1.6.5.2

