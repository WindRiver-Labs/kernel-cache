From 31e1a9867cd6e795fb90b41a95cd1840385c4ccc Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
Date: Sun, 28 Feb 2010 16:02:34 -0500
Subject: [PATCH] KGDB: [MILS] Abstract debug registers for hardware breakpoints

BookE processors contain advance debug registers.  (dbsr, dbcr, emsr)
Currently the MILS hypervisor does not export these registers
which are needed by KGDB.  Temporarily stub out access to these
registers until support is added.

Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/powerpc/include/asm/arch_vbi.h |    1 +
 arch/powerpc/kernel/vbi/wrhv.c      |   82 ++++++++++++++++++++++++++++++++--
 include/vbi/vdk_interface.h         |    1 +
 3 files changed, 79 insertions(+), 5 deletions(-)

diff --git a/arch/powerpc/include/asm/arch_vbi.h b/arch/powerpc/include/asm/arch_vbi.h
index 738eb53..df58d0a 100644
--- a/arch/powerpc/include/asm/arch_vbi.h
+++ b/arch/powerpc/include/asm/arch_vbi.h
@@ -660,5 +660,6 @@ endIntVcoreLock:
 	lwz reg, LO(wr_vb_status)(reg)
 
 #endif /*_ASMLANGUAGE */
+
 #endif /* _ASM_ARCH_VBI_H */
 #endif /* WRHV_MILS */
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index eb9530b..843a09a 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -110,7 +110,6 @@
 
 #include <asm/paravirt.h>
 
-
 /* powerpc clocksource/clockevent code */
 #define HWTIMER_USE_JIFFY 1
 
@@ -146,6 +145,69 @@ int wrhv_earlycon = -1;
 int wrhv_pci_devfn = -1;
 char wrhv_macaddr[6];
 
+#ifdef CONFIG_WRHV_MILS
+static inline uint32_t get_emsr(void)
+{
+	return 0;
+}
+
+static inline uint32_t get_dbsr(void)
+{
+	return 0;
+}
+
+static inline uint32_t get_dbcr(void)
+{
+	return 0;
+}
+
+static inline void put_emsr(uint32_t reg)
+{
+	return;
+}
+
+static inline void put_dbsr(uint32_t reg)
+{
+	return;
+}
+
+static inline void put_dbcr(uint32_t reg)
+{
+	return;
+}
+#else	/* !MILS */
+static inline uint32_t get_emsr(void)
+{
+	return VBI_CNTRL_ADDR_GET()->vb_control_regs.emsr;
+}
+
+static inline uint32_t get_dbsr(void)
+{
+	return VBI_CNTRL_ADDR_GET()->vb_control_regs.dbsr;
+}
+
+static inline uint32_t get_dbcr(void)
+{
+	return VBI_CNTRL_ADDR_GET()->vb_control_regs.dbcr0;
+}
+
+static inline void put_emsr(uint32_t reg)
+{
+	VBI_CNTRL_ADDR_GET()->vb_control_regs.emsr = reg;
+}
+
+static inline void put_dbsr(uint32_t reg)
+{
+	VBI_CNTRL_ADDR_GET()->vb_control_regs.dbsr = reg;
+}
+
+static inline void put_dbcr(uint32_t reg)
+{
+	VBI_CNTRL_ADDR_GET()->vb_control_regs.dbcr0 = reg;
+}
+#endif /* CONFIG_WRHV_MILS */
+
+
 #define WRHV_EARLYCON_SIZE  14  /* sizeof("wrhv_earlycon=") */
 int __init wrhv_earlycon_setup(void)
 {
@@ -1056,8 +1118,12 @@ out:
 /* arch/powerpc/kernel/traps.c */
 void __kprobes wrhv_DebugException(struct pt_regs *regs, unsigned long debug_status)
 {
-	debug_status = wr_control->vb_control_regs.dbsr;
-	wr_control->vb_control_regs.emsr &= ~MSR_DE;
+	uint32_t emsr;
+
+	debug_status = get_dbsr();
+	emsr = get_emsr();
+	emsr &= ~MSR_DE;
+	put_emsr(emsr);
 
 	if (debug_status & DBSR_IC) {   /* instruction completion */
 		regs->msr &= ~MSR_DE;
@@ -1105,6 +1171,8 @@ int wrhv_kgdb_arch_handle_exception(int vector, int signo, int err_code,
 	unsigned long addr;
 
 	switch (remcom_in_buffer[0]) {
+		uint32_t dbcr;
+		uint32_t emsr;
 		/*
 		 * sAA..AA   Step one instruction from AA..AA
 		 * This will return an error to gdb ..
@@ -1123,13 +1191,17 @@ int wrhv_kgdb_arch_handle_exception(int vector, int signo, int err_code,
 			 * Set hypervisor DBCR0_IC single step and
 			 * DBCR0_IDM internal debug mode.
 			 */
-			wr_control->vb_control_regs.dbcr0 |= (DBCR0_IC | DBCR0_IDM);
+			dbcr = get_dbcr();
+			dbcr |= (DBCR0_IC | DBCR0_IDM);
+			put_dbcr(dbcr);
 
 			/*
 			 * Set Debug Enable bit in hypervisor's emulated MSR which
 			 * is restored on return from exception
 			 */
-			wr_control->vb_control_regs.emsr |= MSR_DE;
+			emsr = get_emsr();
+			emsr |= MSR_DE;
+			put_emsr(emsr);
 			linux_regs->msr |= MSR_DE;
 			if (!user_mode(linux_regs)) {
 				preempt_disable();
diff --git a/include/vbi/vdk_interface.h b/include/vbi/vdk_interface.h
index 654bdd8..82e9490 100644
--- a/include/vbi/vdk_interface.h
+++ b/include/vbi/vdk_interface.h
@@ -613,6 +613,7 @@ static inline int32_t vbi_vb_reset(uint32_t id, int32_t core, uint32_t options)
 {
 	return -1;
 }
+
 #endif /*_ASMLANGUAGE */
 #endif  /* _VDK_INTERFACE_H */
 
-- 
1.7.0

