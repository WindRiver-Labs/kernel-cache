From b2e3b69143cbd87c9108bb0ae0a198f3a4f44125 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 12:34:58 -0500
Subject: [PATCH 54/80] vbiGuestPhysToPhysAddr --> vbi_guest_phys_to_phys

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/vbi/vbi.h  |    2 +-
 kernel/vbi/paddr.c |    6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 210afbd..19af7a2 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -535,7 +535,7 @@ extern vbiStatus_t vbiVioapicVcoreIntSend (vbiIrq_t irq, vbiCoreSet_t vcoreSet,
 					  uint32_t options);
 extern vbiStatus_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
-extern vbiStatus_t vbiGuestPhysToPhysAddr(vbiGuestPhysAddr_t gaddr,
+extern vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
 
 extern void vbiVioapicDisplay(void);
diff --git a/kernel/vbi/paddr.c b/kernel/vbi/paddr.c
index 161004a..b0515b3 100644
--- a/kernel/vbi/paddr.c
+++ b/kernel/vbi/paddr.c
@@ -19,7 +19,7 @@ DESCRIPTION
 These modules provide interfaces to translate the current context's guest
 physical address into the physical machine address. vbi_get_guest_dma_addr is
 specifically for a guest wanting an address that can be used by a DMA device.
-vbiGuestPhysToPhysAddr is used to return an absolute physical address to used
+vbi_guest_phys_to_phys is used to return an absolute physical address to used
 perhaps to communicate with the hypervisor itself maybe buffer pointers.
 */
 
@@ -27,7 +27,7 @@ perhaps to communicate with the hypervisor itself maybe buffer pointers.
 #include <vbi/private.h>
 
 /*
- * vbiGuestPhysToPhysAddr - translate the spcified guest physical to physical
+ * vbi_guest_phys_to_phys - translate the spcified guest physical to physical
  *                          address
  *
  * This function makes a hypervisor call to translate the specified guest
@@ -37,7 +37,7 @@ perhaps to communicate with the hypervisor itself maybe buffer pointers.
  * 64-bit.
  *
  */
-vbiStatus_t vbiGuestPhysToPhysAddr(vbiGuestPhysAddr_t gaddr,
+vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
 					vbiPhysAddr_t *paddr)
 {
 	return vbi_hy_ioctl(VBI_HYIOCTL_PADDR, gaddr, paddr, (void*)VBI_HYIOCTL_PADDR_PHYS, 0 );
-- 
1.6.5.2

