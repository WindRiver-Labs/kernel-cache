From 17ea5a0c7b47ce99e3f8103169aabc3343033b49 Mon Sep 17 00:00:00 2001
From: WRS Support <support@windriver.com>
Date: Fri, 2 Oct 2009 16:12:13 -0400
Subject: [PATCH] hypervisor: core kernel changes for hypervisor/guest

This represents changes to existing core kernel files in
order to support linux as a guest OS on WR hypervisor.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
---
 include/linux/interrupt.h    |    2 +-
 init/Kconfig                 |    2 ++
 kernel/Makefile              |    1 +
 kernel/dma-coherent.c        |   23 ++++++++++++++++++++++-

diff --git a/include/linux/interrupt.h b/include/linux/interrupt.h
index 58ff4e7..0c5ca39 100644
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@ -92,7 +92,7 @@ extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
  * places left. So the only effect should be slightly increased
  * irqs-off latencies.
  */
-#ifdef CONFIG_LOCKDEP
+#if defined(CONFIG_LOCKDEP) || defined(CONFIG_PARAVIRT)
 # define local_irq_enable_in_hardirq()	do { } while (0)
 #else
 # define local_irq_enable_in_hardirq()	local_irq_enable()
diff --git a/init/Kconfig b/init/Kconfig
index 182303f..a2cef77 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -18,6 +18,8 @@ config DEFCONFIG_LIST
 
 menu "General setup"
 
+source init/Kconfig.wrhv
+
 config EXPERIMENTAL
 	bool "Prompt for development and/or incomplete code/drivers"
 	---help---
diff --git a/kernel/Makefile b/kernel/Makefile
index 77a91d8..c723c24 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -35,6 +35,7 @@ obj-$(CONFIG_FUTEX) += futex.o
 ifeq ($(CONFIG_COMPAT),y)
 obj-$(CONFIG_FUTEX) += futex_compat.o
 endif
+obj-$(CONFIG_WRHV) += vbi/
 obj-$(CONFIG_RT_MUTEXES) += rtmutex.o
 obj-$(CONFIG_DEBUG_RT_MUTEXES) += rtmutex-debug.o
 obj-$(CONFIG_RT_MUTEX_TESTER) += rtmutex-tester.o
diff --git a/kernel/dma-coherent.c b/kernel/dma-coherent.c
index c1d4d5b..c049dc8 100644
--- a/kernel/dma-coherent.c
+++ b/kernel/dma-coherent.c
@@ -5,6 +5,10 @@
 #include <linux/kernel.h>
 #include <linux/dma-mapping.h>
 
+#ifdef CONFIG_WRHV
+#include <vbi/interface.h>
+#endif
+
 struct dma_coherent_mem {
 	void		*virt_base;
 	u32		device_base;
@@ -116,8 +120,25 @@ int dma_alloc_from_coherent(struct device *dev, ssize_t size,
 		int page = bitmap_find_free_region(mem->bitmap, mem->size,
 						     order);
 		if (page >= 0) {
-			*dma_handle = mem->device_base + (page << PAGE_SHIFT);
 			*ret = mem->virt_base + (page << PAGE_SHIFT);
+#ifdef CONFIG_WRHV
+			if (paravirt_enabled()) {
+				u64 paddr;
+				dma_addr_t addr = mem->device_base
+						  + (page << PAGE_SHIFT);
+
+				if (vbi_get_guest_dma_addr((void *)addr,
+							&paddr) == 0)
+					*dma_handle = (dma_addr_t)paddr;
+				else {
+					bitmap_release_region(mem->bitmap,
+							      mem->size, order);
+					return 0;
+				}
+			} else
+#endif
+			*dma_handle = mem->device_base + (page << PAGE_SHIFT);
+
 			memset(*ret, 0, size);
 		} else if (mem->flags & DMA_MEMORY_EXCLUSIVE)
 			*ret = NULL;
-- 
1.6.5.2

