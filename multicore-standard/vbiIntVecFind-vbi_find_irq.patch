From a33496b26fe6e019a6335589037790e57e5863e4 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 12:35:01 -0500
Subject: [PATCH 58/80] vbiIntVecFind --> vbi_find_irq

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/wrhv.c |   10 +++++-----
 arch/x86/kernel/vbi/wrhv.c     |    4 ++--
 include/vbi/interrupt.h        |    2 +-
 kernel/vbi/interrupt.c         |    6 +++---
 kernel/vbi/io_apic.c           |    2 +-
 5 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 5555ee9..f71e124 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -419,7 +419,7 @@ unsigned int wrhv_irq_of_parse_and_map(struct device_node *dev, int index)
 {
 	int irq;
 
-        irq = vbiIntVecFind(dev->full_name, VB_INPUT_INT);
+        irq = vbi_find_irq(dev->full_name, VB_INPUT_INT);
         if (irq == VBI_INVALID_IRQ)
                 return NO_IRQ;
 
@@ -660,19 +660,19 @@ int __init wrhv_gfar_of_init(void)
                         sprintf(eTsec_err,"etsec%d_err", i+1);
 
                         r[1].name = get_gfar_tx_intr();
-                        vector = vbiIntVecFind(eTsec_tx, VB_INPUT_INT);
+                        vector = vbi_find_irq(eTsec_tx, VB_INPUT_INT);
                         r[1].start = vector;
                         r[1].end = vector;
                         r[1].flags = IORESOURCE_IRQ;
 
                         r[2].name = get_gfar_rx_intr();
-                        vector = vbiIntVecFind(eTsec_rx, VB_INPUT_INT);
+                        vector = vbi_find_irq(eTsec_rx, VB_INPUT_INT);
                         r[2].start = vector;
                         r[2].end = vector;
                         r[2].flags = IORESOURCE_IRQ;
 
                         r[3].name = get_gfar_err_intr();
-                        vector = vbiIntVecFind(eTsec_err, VB_INPUT_INT);
+                        vector = vbi_find_irq(eTsec_err, VB_INPUT_INT);
                         r[3].start = vector;
 			r[3].end = vector;
                         r[3].flags = IORESOURCE_IRQ;
@@ -1028,7 +1028,7 @@ int fsl8572_get_pci_intr_wrhv(struct pci_dev *dev)
 			sprintf(VectorName, "%s", "PCIe2_D");
 			break;
 		}
-		irq = vbiIntVecFind(VectorName, 1);
+		irq = vbi_find_irq(VectorName, 1);
 		break;
 	default:
 		break;
diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 05d9d30..e8b7f7e 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -320,7 +320,7 @@ static void __devinit pci_fixup_wrhv(struct pci_dev *dev)
 	if (!skip_assign_irq) {
 		snprintf(devname, sizeof devname, "pci%s_%x:%x",
 			devclass, dev->bus->number, dev->devfn);
-		irq = vbiIntVecFind(devname, 1);
+		irq = vbi_find_irq(devname, 1);
 		if (irq == VBI_INVALID_IRQ)
 			irq = WRHV_POLL_IRQ;
 	}
@@ -1254,7 +1254,7 @@ void __init wrhv_setup_timer_irq(void)
 {
 #ifdef CONFIG_WRHV_X86_HRTIMERS
 	int irq;
-	irq = vbiIntVecFind(HRTIMER_IRQ_NAME, 1);
+	irq = vbi_find_irq(HRTIMER_IRQ_NAME, 1);
 	if (irq == VBI_INVALID_IRQ) {
 		enable_hrtimer = 0;
 		pv_time_ops.time_init = wrhv_time_init;
diff --git a/include/vbi/interrupt.h b/include/vbi/interrupt.h
index bcf19c7..f8524b7 100644
--- a/include/vbi/interrupt.h
+++ b/include/vbi/interrupt.h
@@ -26,7 +26,7 @@ interrupts configuration data.
 
 #ifndef	_ASMLANGUAGE
 
-extern vbiIrq_t vbiIntVecFind (char * irq_name, int32_t irq_dir);
+extern vbiIrq_t vbi_find_irq (char * irq_name, int32_t irq_dir);
 
 #endif /* _ASMLANGUAGE */
 
diff --git a/kernel/vbi/interrupt.c b/kernel/vbi/interrupt.c
index 072268e..7ed4391 100644
--- a/kernel/vbi/interrupt.c
+++ b/kernel/vbi/interrupt.c
@@ -33,7 +33,7 @@
 #include <linux/module.h>
 
 /*
- * vbiIntVecFind - determine the irq for a specified name
+ * vbi_find_irq - determine the irq for a specified name
  *
  * This function finds the irq number of a named interrupt from  the virtual
  * board configuration information.
@@ -43,7 +43,7 @@
  *
  */
 
-vbiIrq_t vbiIntVecFind(char *irq_name, int32_t irq_dir)
+vbiIrq_t vbi_find_irq(char *irq_name, int32_t irq_dir)
 {
 	struct vb_config *config = VBI_CONFIG_ADDR_GET();
 	struct vb_int_info *info = config->interruptConfiguration;
@@ -63,5 +63,5 @@ vbiIrq_t vbiIntVecFind(char *irq_name, int32_t irq_dir)
 	return VBI_INVALID_IRQ; /* no match */
 }
 
-EXPORT_SYMBOL(vbiIntVecFind);
+EXPORT_SYMBOL(vbi_find_irq);
 
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index f4fd915..0ce08df 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -298,7 +298,7 @@ vbiStatus_t vbiVioapicIntAck(vbiIrq_t irq)
  * The Vector number is not required to be specified in the XML. If not
  * specified the VB manager assignes a vector to an IRQ. The Guest OS can
  * obtain the vector number assigned to an IRQ by calling
- * vbiIntVecFind("VECTOR_NAME").
+ * vbi_find_irq("VECTOR_NAME").
  *
  * The possible values for the filter (second argument) may be:
  *
-- 
1.6.5.2

