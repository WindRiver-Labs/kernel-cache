From 080df4f10ee739275b29f0fcf5b4aa01721f0b3d Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Sat, 10 Oct 2009 12:49:01 +0800
Subject: [PATCH] x86: fix vbiGuestDmaAddrGet issue

For the September 25th and onwards hypervisor releases,
vbiGuestDmaAddrGet requires a guest physical address as
its first parameter, so adjust related x86 code to match
this.

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/x86/kernel/pci-dma.c     |    2 +-
 arch/x86/kernel/pci-nommu.c   |    5 ++---
 include/asm-x86/dma-mapping.h |    6 ++++--
 kernel/dma-coherent.c         |    4 +++-
 4 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c
index de296fe..8ed9bfd 100644
--- a/arch/x86/kernel/pci-dma.c
+++ b/arch/x86/kernel/pci-dma.c
@@ -345,7 +345,7 @@ dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle,
 			if (paravirt_enabled()) {
 				u64 paddr;
 
-				if (vbiGuestDmaAddrGet((void *)memory,
+				if (vbiGuestDmaAddrGet((void *)bus,
 							&paddr) == 0)
 					*dma_handle = (dma_addr_t)paddr;
 				else {
diff --git a/arch/x86/kernel/pci-nommu.c b/arch/x86/kernel/pci-nommu.c
index 2e4bdaa..ea0351c 100644
--- a/arch/x86/kernel/pci-nommu.c
+++ b/arch/x86/kernel/pci-nommu.c
@@ -71,11 +71,10 @@ static int nommu_map_sg(struct device *hwdev, struct scatterlist *sg,
 		BUG_ON(!sg_page(s));
 #ifdef CONFIG_WRHV
 		if (paravirt_enabled()) {
-			struct page *page;
 			u64 paddr;
+			dma_addr_t addr = sg_phys(s);
 
-			page = sg_page(s);
-			if (vbiGuestDmaAddrGet((void *)page, &paddr) == 0)
+			if (vbiGuestDmaAddrGet((void *)addr, &paddr) == 0)
 				s->dma_address = (dma_addr_t)paddr + s->offset;
 			else
 				s->dma_address = -1;
diff --git a/include/asm-x86/dma-mapping.h b/include/asm-x86/dma-mapping.h
index 3432008..b14b7ab 100644
--- a/include/asm-x86/dma-mapping.h
+++ b/include/asm-x86/dma-mapping.h
@@ -117,7 +117,8 @@ dma_map_single(struct device *hwdev, void *ptr, size_t size,
 #ifdef CONFIG_WRHV
 	if (paravirt_enabled()) {
 		u64 tmp_paddr;
-		if (vbiGuestDmaAddrGet((void *)ptr, &tmp_paddr) != 0)
+		if (vbiGuestDmaAddrGet((void *)virt_to_phys(ptr),
+						&tmp_paddr) != 0)
 			return -1;
 		else
 			paddr = (phys_addr_t)tmp_paddr;
@@ -246,7 +247,8 @@ static inline dma_addr_t dma_map_page(struct device *dev, struct page *page,
 #ifdef CONFIG_WRHV
 	if (paravirt_enabled()) {
 		u64 tmp_paddr;
-		if (vbiGuestDmaAddrGet((void *)page_address(page), &tmp_paddr) == 0)
+		if (vbiGuestDmaAddrGet((void *)page_to_phys(page),
+						 &tmp_paddr) == 0)
 			paddr = (phys_addr_t)tmp_paddr + offset;
 		else
 			return -1;
diff --git a/kernel/dma-coherent.c b/kernel/dma-coherent.c
index 6bf332a..6f12a97 100644
--- a/kernel/dma-coherent.c
+++ b/kernel/dma-coherent.c
@@ -124,8 +124,10 @@ int dma_alloc_from_coherent(struct device *dev, ssize_t size,
 #ifdef CONFIG_WRHV
 			if (paravirt_enabled()) {
 				u64 paddr;
+				dma_addr_t addr = mem->device_base
+						  + (page << PAGE_SHIFT);
 
-				if (vbiGuestDmaAddrGet((void *)(*ret),
+				if (vbiGuestDmaAddrGet((void *)addr,
 							&paddr) == 0)
 					*dma_handle = (dma_addr_t)paddr;
 				else {
-- 
1.6.5.2

