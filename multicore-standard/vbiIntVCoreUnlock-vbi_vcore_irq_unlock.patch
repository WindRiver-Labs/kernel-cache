From 409040b9df201cf2a9b4d4306f009fb779f5f89c Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 10:07:22 -0500
Subject: [PATCH 31/80] vbiIntVCoreUnlock --> vbi_vcore_irq_unlock

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |    8 ++++----
 arch/x86/kernel/vbi/syscalls.S     |    6 +++---
 include/vbi/syscall.h              |    2 +-
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index baf3c6a..cb61067 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -48,7 +48,7 @@ FUNC_EXPORT(vbi_panic)
 FUNC_EXPORT(vbi_ps)
 FUNC_EXPORT(vbi_kputs)
 FUNC_EXPORT(vbi_kputc)
-FUNC_EXPORT(vbiIntVCoreUnlock)
+FUNC_EXPORT(vbi_vcore_irq_unlock)
 FUNC_EXPORT(vbiIntVCoreLock)
 FUNC_EXPORT(vbiIntVCoreStateGet)
 FUNC_EXPORT(vbiExcBaseSet)
@@ -401,14 +401,14 @@ FUNC_LABEL(vbi_flush_tlb)
 FUNC_END(vbi_flush_tlb)
 
 /*
- * vbiIntVCoreUnlock - unlock interrupts interrupts for running core
+ * vbi_vcore_irq_unlock - unlock interrupts interrupts for running core
  *
  * This routine enables interrupts and makes a fast hypercall if pending
  * interrupts are detected for the calling core. This is a C wrapper function
  * for the assembly MACRO VBI_INT_VCORE_UNLOCK().
  *
  */
-FUNC_LABEL(vbiIntVCoreUnlock)
+FUNC_LABEL(vbi_vcore_irq_unlock)
 	lis	p0, HIADJ(wrhvVbControl)
 	lwz	p0, LO(wrhvVbControl)(p0)
 	li	p1, 0
@@ -432,7 +432,7 @@ tryAgain:
 	b	tryAgain
 0:
 	blr
-FUNC_END(vbiIntVCoreUnlock)
+FUNC_END(vbi_vcore_irq_unlock)
 
 /*
  *
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index d60adab..329246e 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -40,7 +40,7 @@
 .globl vbi_ps
 .globl vbi_kputs
 .globl vbi_kputc
-.globl vbiIntVCoreUnlock
+.globl vbi_vcore_irq_unlock
 .globl vbiIntVCoreLock
 .globl vbiVbMgmt
 .globl vbiMemAttrSet
@@ -178,14 +178,14 @@ vbi_ps:
 
 
 /*
- * vbiIntVCoreUnlock - Re-enable interrupts in the virtual board
+ * vbi_vcore_irq_unlock - Re-enable interrupts in the virtual board
  *
  * This call re-enables interrupts in the virtual board, and calls the
  * hypervisor if interrupts are pending.  The value level is the value returned
  * by the corresponding 	
  *
  */
-vbiIntVCoreUnlock:
+vbi_vcore_irq_unlock:
 	sti				/* UNLOCK INTERRUPTS */
 	ret
 
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index f736a39..1b42305 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -132,7 +132,7 @@ extern asmlinkage vbiStatus_t  vbiMemAttrGet(void *vaddr, vbiMemAttr_t * attr);
  * START: New APIs introduced for vbi 2.0  
  */
 
-extern asmlinkage vbiStatus_t vbiIntVCoreUnlock(void);
+extern asmlinkage vbiStatus_t vbi_vcore_irq_unlock(void);
 extern asmlinkage vbiIntState_t vbiIntVCoreLock(void);
 extern vbiStatus_t vbi_update_text_cache(void *saddr, size_t size);
 extern vbiStatus_t  vbiExcBaseSet(void * excTblBase);
-- 
1.6.5.2

