From 5fe3a59541b6937088d13cddac03088527cd8aea Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Tue, 17 Nov 2009 15:58:11 -0500
Subject: [PATCH 12/80] vbi: rename vbiVbRegisterRead/Write and vbiVbMemoryRead/Write

for i in `git grep -l vbiVbRegisterRead`  ; do echo $i ; mv $i $i~ ; cat $i~ |sed 's/vbiVbRegisterRead/vbi_vb_read_reg/g' > $i ; done
for i in `git grep -l vbiVbRegisterWrite`  ; do echo $i ; mv $i $i~ ; cat $i~ |sed 's/vbiVbRegisterWrite/vbi_vb_write_reg/g' > $i ; done
for i in `git grep -l vbiVbMemoryRead`  ; do echo $i ; mv $i $i~ ; cat $i~ |sed 's/vbiVbMemoryRead/vbi_vb_read_mem/g' > $i ; done
for i in `git grep -l vbiVbMemoryWrite`  ; do echo $i ; mv $i $i~ ; cat $i~ |sed 's/vbiVbMemoryWrite/vbi_vb_write_mem/g' > $i ; done

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/include/asm/arch_vbi.h |    2 +-
 arch/powerpc/kernel/vbi/syscalls.S  |   34 +++++++++++++++++-----------------
 arch/x86/kernel/vbi/syscalls.S      |   26 +++++++++++++-------------
 include/asm-x86/arch_vbi.h          |    2 +-
 include/vbi/syscall.h               |    8 ++++----
 5 files changed, 36 insertions(+), 36 deletions(-)

diff --git a/arch/powerpc/include/asm/arch_vbi.h b/arch/powerpc/include/asm/arch_vbi.h
index 937e719..ab18d7d 100644
--- a/arch/powerpc/include/asm/arch_vbi.h
+++ b/arch/powerpc/include/asm/arch_vbi.h
@@ -365,7 +365,7 @@ struct vb_arch_stat_regs
 /*
  * VBI_HREG_SET - hardware register set, for read/write
  *
- * Used by vbiVbRegisterRead/vbiVbRegisterWrite to read/write registers in
+ * Used by vbi_vb_read_reg/vbi_vb_write_reg to read/write registers in
  * another VB
  *
  */
diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index 80fcf8e..0806de3 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -29,10 +29,10 @@
 
 FUNC_EXPORT(vbiVcoreIntRed_op)
 FUNC_EXPORT(vbiDebugShellStart)
-FUNC_EXPORT(vbiVbMemoryRead)
-FUNC_EXPORT(vbiVbMemoryWrite)
-FUNC_EXPORT(vbiVbRegisterRead)
-FUNC_EXPORT(vbiVbRegisterWrite)
+FUNC_EXPORT(vbi_vb_read_mem)
+FUNC_EXPORT(vbi_vb_write_mem)
+FUNC_EXPORT(vbi_vb_read_reg)
+FUNC_EXPORT(vbi_vb_write_reg)
 FUNC_EXPORT(vbiIoapicOp)
 FUNC_EXPORT(vbiIoapicIoctl)
 FUNC_EXPORT(vbiHyIoctl)
@@ -755,7 +755,7 @@ FUNC_LABEL(vbiNsOp)
 FUNC_END(vbiNsOp)
 
 /*
- * vbiVbMemoryRead - Read a virtual board's memory
+ * vbi_vb_read_mem - Read a virtual board's memory
  *
  * This routine makes a hypercall to read a remote board's memory. The memory
  * control structure contains information about the target memory to read and
@@ -768,15 +768,15 @@ FUNC_END(vbiNsOp)
  * otherwise to a value different than zero.
  *
  */
-FUNC_LABEL(vbiVbMemoryRead)
+FUNC_LABEL(vbi_vb_read_mem)
 	lis r0, HI(VBI_SYS_memRead_op)
 	ori r0, r0, LO(VBI_SYS_memRead_op)
 	HCALL
 	blr
-FUNC_END(vbiVbMemoryRead)
+FUNC_END(vbi_vb_read_mem)
 
 /*
- * vbiVbMemoryWrite - copy data to a remote board's memory
+ * vbi_vb_write_mem - copy data to a remote board's memory
  *
  * This routine makes a hypercall to copy to a remote board memory. If the
  * VBI_DCACHE_FLUSH is set in the control memory control structure then this
@@ -794,12 +794,12 @@ FUNC_END(vbiVbMemoryRead)
  * otherwise to a value different than zero.
  *
  */
-FUNC_LABEL(vbiVbMemoryWrite)
+FUNC_LABEL(vbi_vb_write_mem)
 	lis r0, HI(VBI_SYS_memWrite_op)
 	ori r0, r0, LO(VBI_SYS_memWrite_op)
 	HCALL
 	blr
-FUNC_END(vbiVbMemoryWrite)
+FUNC_END(vbi_vb_write_mem)
 
 /*
  * vbiIoapicOp - virtual IO APIC operation
@@ -821,36 +821,36 @@ FUNC_LABEL(vbiIoapicOp)
 FUNC_END(vbiIoapicOp)
 
 /*
- * vbiVbRegisterRead - Read a remote core's registers
+ * vbi_vb_read_reg - Read a remote core's registers
  *
  * This routine makes a hypercall to read a remote core's registers. The
  * register control structure contains information about the registers to read
  * and the destination buffers to store them.
  *
  */
-FUNC_LABEL(vbiVbRegisterRead)
+FUNC_LABEL(vbi_vb_read_reg)
 	lis r0, HI(VBI_SYS_RegsRead_op)
 	ori r0, r0, LO(VBI_SYS_RegsRead_op)
 	HCALL
 	blr
-FUNC_END(vbiVbRegisterRead)
+FUNC_END(vbi_vb_read_reg)
 
 /*
- * vbiVbRegisterWrite - write to a remote core's registers
+ * vbi_vb_write_reg - write to a remote core's registers
  *
  * This routine makes a hypercall to write to a remote core's registers. The
  * register control structure contains the set of registers to write.
  * The user must ensure to read first the destination core's registers using
- * vbiVbRegisterRead() then write back the modified set of registers in the
+ * vbi_vb_read_reg() then write back the modified set of registers in the
  * registers control structure.
  *
  */
-FUNC_LABEL(vbiVbRegisterWrite)
+FUNC_LABEL(vbi_vb_write_reg)
 	lis r0, HI(VBI_SYS_RegsWrite_op)
 	ori r0, r0, LO(VBI_SYS_RegsWrite_op)
 	HCALL
 	blr
-FUNC_END(vbiVbRegisterWrite)
+FUNC_END(vbi_vb_write_reg)
 
 /*
  * vbiVcoreIntRed_op - redirect an irq to another vcore
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index ac184a3..25e82d3 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -26,8 +26,8 @@
 
 /* globals */
 .globl vbiDebugShellStart
-.globl vbiVbMemoryWrite
-.globl vbiVbMemoryRead
+.globl vbi_vb_write_mem
+.globl vbi_vb_read_mem
 .globl vbiIoapicOp
 .globl vbiIoapicIoctl
 .globl vbiHyIoctl
@@ -51,8 +51,8 @@
 .globl vbiVbResume
 .globl vbiVbSuspend
 .globl vbiVcoreIntRed_op 
-.globl vbiVbRegisterRead 
-.globl vbiVbRegisterWrite 
+.globl vbi_vb_read_reg 
+.globl vbi_vb_write_reg 
 .globl vbiVtlbOp 
 .text
 .balign 16
@@ -529,7 +529,7 @@ vbiNsOp:
 	ret
 
 /*
- * vbiVbMemoryWrite - copy data to a remote board's memory
+ * vbi_vb_write_mem - copy data to a remote board's memory
  *
  * This routine makes a hypercall to copy to a remote board memory. If
  * the VBI_DCACHE_FLUSH is set in the control memory control structure
@@ -550,7 +550,7 @@ vbiNsOp:
  * RETURNS: returns OK or error number in case of failure
  *
  */
-vbiVbMemoryWrite:
+vbi_vb_write_mem:
 	movl $VBI_SYS_memWrite_op, %eax
 	push $2
 	vmcall
@@ -558,7 +558,7 @@ vbiVbMemoryWrite:
 	ret
 
 /*
- * vbiVbMemoryRead - Read a virtual board's memory
+ * vbi_vb_read_mem - Read a virtual board's memory
  *
  * This routine makes a hypercall to read a remote board's memory. The
  * memory control structure contains information about the target memory
@@ -574,7 +574,7 @@ vbiVbMemoryWrite:
  * RETURNS: returns OK or an error number in case of failure
  *
  */
-vbiVbMemoryRead:
+vbi_vb_read_mem:
 	movl $VBI_SYS_memRead_op, %eax
 	push $2
 	vmcall
@@ -603,7 +603,7 @@ vbiDebugShellStart:
 
 
 /*
- * vbiVbRegisterRead - Read a remote core's registers
+ * vbi_vb_read_reg - Read a remote core's registers
  *
  * This routine makes a hypercall to read a remote core's registers. The
  * register control structure contains information about the registers
@@ -612,7 +612,7 @@ vbiDebugShellStart:
  * RETURNS: returns OK or error number in case of failure
  *
  */
-vbiVbRegisterRead:
+vbi_vb_read_reg:
 	movl $VBI_SYS_RegsRead_op, %eax
 	push $3
 	vmcall
@@ -620,18 +620,18 @@ vbiVbRegisterRead:
 	ret
 
 /*
- * vbiVbRegisterWrite - write to a remote core's registers
+ * vbi_vb_write_reg - write to a remote core's registers
  *
  * This routine makes a hypercall to write to a remote core's registers. The
  * register control structure contains the set of registers to write. 
  * The user must ensure to read first the destination core's registers using
- * vbiVbRegisterRead() then write back the modified set of registers in the 
+ * vbi_vb_read_reg() then write back the modified set of registers in the 
  * registers control structure.
  * 
  * RETURNS: returns OK or error number in case of failure
  *
  */
-vbiVbRegisterWrite:
+vbi_vb_write_reg:
 	movl $VBI_SYS_RegsWrite_op, %eax
 	push $3
 	vmcall
diff --git a/include/asm-x86/arch_vbi.h b/include/asm-x86/arch_vbi.h
index ff3ef14..d145108 100644
--- a/include/asm-x86/arch_vbi.h
+++ b/include/asm-x86/arch_vbi.h
@@ -23,7 +23,7 @@
  *
  * VB_HREG_SET - hardware register set, for read/write
  *
- * Used by vbiVbRegisterRead/vbiVbRegisterWrite to read/write registers in
+ * Used by vbi_vb_read_reg/vbi_vb_write_reg to read/write registers in
  * another VB
  *
  *
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 837683a..acc40d3 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -144,14 +144,14 @@ extern asmlinkage vbiStatus_t vbiVbRestart(vbiVb_t id, vbiCore_t core);
 extern asmlinkage vbiStatus_t vbiVbResume(vbiVb_t id, vbiCore_t core);
 
 /* read remote vb's memory */
-extern asmlinkage vbiStatus_t vbiVbMemoryRead(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
-extern asmlinkage vbiStatus_t vbiVbMemoryWrite(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
+extern asmlinkage vbiStatus_t vbi_vb_read_mem(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
+extern asmlinkage vbiStatus_t vbi_vb_write_mem(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
 extern asmlinkage void vbiDebugShellStart(uint32_t  flags);
 
 /* read remote vb's registers */
-extern asmlinkage vbiStatus_t vbiVbRegisterRead(VBI_HREG_SET *regCtl, 
+extern asmlinkage vbiStatus_t vbi_vb_read_reg(VBI_HREG_SET *regCtl, 
 				       vbiVb_t targetBoard, vbiCore_t core);
-extern asmlinkage vbiStatus_t vbiVbRegisterWrite(VBI_HREG_SET *regCtl, 
+extern asmlinkage vbiStatus_t vbi_vb_write_reg(VBI_HREG_SET *regCtl, 
 					vbiVb_t targetBoard, vbiCore_t core);
 
 /*
-- 
1.6.5.2

