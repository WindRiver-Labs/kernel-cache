From 5f2ee84548eeb4966589b665c7ecedd000aa096e Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Tue, 3 Nov 2009 10:33:41 +0800
Subject: [PATCH] x86: use vbi_send_vcore_vioapic_irq to send ipi

A new vbi vbi_send_vcore_vioapic_irq() is provided by hypervisor,
so re-implement guest os ipi functions by using this new interface
to improve system performance.

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/x86/kernel/vbi/wrhv.c |   43 +++++++++++++------------------------------
 1 files changed, 13 insertions(+), 30 deletions(-)

diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 767f985..96d2f5d 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -66,7 +66,6 @@ static cpumask_t flush_cpumask;
 static struct mm_struct *flush_mm;
 static unsigned long flush_va;
 static DEFINE_SPINLOCK(tlbstate_lock);
-static DEFINE_SPINLOCK(vioapic_lock);
 
 #define VBI_VTLB_OPTIM_OPTION (\
 			 VBI_VTLB_OPTIM_ENABLED |  \
@@ -148,15 +147,10 @@ static int wrhv_set_next_event(unsigned long delta,
 	return 0;
 }
 
-static inline void wrhv_send_ipi(int, int);
+static inline void wrhv_send_IPI_mask(int, cpumask_t);
 static void wrhv_timer_broadcast(cpumask_t mask)
 {
-	int cpu;
-	cpus_and(mask, mask, cpu_online_map);
-
-	for_each_cpu_mask_nr(cpu, mask)
-		wrhv_send_ipi(DUMMY_TIMER_INT, cpu);
-
+	wrhv_send_IPI_mask(DUMMY_TIMER_INT, mask);
 }
 
 struct clock_event_device wrhv_clock_event = {
@@ -602,30 +596,21 @@ static void wrhv_flush_tlb_single(unsigned long addr)
 	__native_flush_tlb_single(addr);
 }
 
-static inline void wrhv_send_ipi(int irq, int coreid)
+
+static inline void wrhv_send_IPI_mask(int irq, cpumask_t mask)
 {
-	int ret;
+	unsigned long coreset = cpus_addr(mask)[0];
 	unsigned long flags;
 
-	spin_lock_irqsave(&vioapic_lock, flags);
-	ret = vbi_redir_vioapic_irq(irq, coreid);
-	if (unlikely(!!ret))
-		printk(KERN_ERR "IPI: redirect to core%d for IPI%d failed. \n", coreid, irq);
-
-	ret = vbi_send_vioapic_irq(irq, VBI_IOAPICSEND_OTHERS, VBI_BOARD_ID_GET());
-	spin_unlock_irqrestore(&vioapic_lock, flags);
-	if (unlikely(!!ret))
-		printk(KERN_ERR "IPI: send IPI%d to core%d failed. \n", irq, coreid);
-
+	local_irq_save(flags);
+	WARN_ON(coreset & ~cpus_addr(cpu_online_map)[0]);
+	vbi_send_vcore_vioapic_irq(irq, coreset, 0);
+	local_irq_restore(flags);
 }
 
 static void wrhv_smp_send_invalidate_tlb_ipi(cpumask_t mask)
 {
-	int cpu;
-	cpus_and(mask, mask, cpu_online_map);
-
-	for_each_cpu_mask_nr(cpu, mask)
-		wrhv_send_ipi(WRHV_IPI_INV_TLB, cpu);
+	wrhv_send_IPI_mask(WRHV_IPI_INV_TLB, mask);
 }
 
 static void wrhv_flush_tlb_others(const cpumask_t *cpumaskp, struct mm_struct *mm,
@@ -1228,19 +1213,17 @@ static void wrhv_smp_send_stop(void)
 
 static void wrhv_smp_send_reschedule(int cpu)
 {
-	wrhv_send_ipi(WRHV_IPI_RESCHED, cpu);
+	wrhv_send_IPI_mask(WRHV_IPI_RESCHED, cpumask_of_cpu(cpu));
 }
 
 static void wrhv_smp_send_call_func_single_ipi(int cpu)
 {
-	wrhv_send_ipi(WRHV_IPI_FUNC_CALL_SINGLE, cpu);
+	wrhv_send_IPI_mask(WRHV_IPI_FUNC_CALL_SINGLE, cpumask_of_cpu(cpu));
 }
 
 static void wrhv_smp_send_call_func_ipi(cpumask_t mask)
 {
-	unsigned int cpu;
-	for_each_cpu_mask_nr(cpu, mask)
-		wrhv_send_ipi(WRHV_IPI_FUNC_CALL, cpu);
+	wrhv_send_IPI_mask(WRHV_IPI_FUNC_CALL, mask);
 }
 
 static const struct smp_ops wrhv_smp_ops __initdata = {
-- 
1.6.5.2

