From f9a8259cbb502cabdefbc231d984cb5821aa3531 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 12:35:00 -0500
Subject: [PATCH 56/80] vbiInit --> vbi_init

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/platforms/85xx/wrhv_8572ds.c |    2 +-
 arch/x86/kernel/vbi/wrhv.c                |    2 +-
 include/vbi/interface.h                   |    8 ++++----
 include/vbi/vbi.h                         |    2 +-
 kernel/vbi/lib.c                          |    8 ++++----
 5 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/wrhv_8572ds.c b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
index 23773ad..fb95008 100644
--- a/arch/powerpc/platforms/85xx/wrhv_8572ds.c
+++ b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
@@ -149,7 +149,7 @@ static int __init wrhv_8572ds_probe(void)
 	 * continue to complete the vbi initialization here.
 	 */
 	wrhv_mapping(); /* Map vb_config structure */
-	vbiInit(wrhvConfig);
+	vbi_init(wrhvConfig);
 
 	strncpy(cmd_line, VBI_BOOTLINE_ADDR_GET(), VB_MAX_BOOTLINE_LENGTH - 1);
 	cmd_line[VB_MAX_BOOTLINE_LENGTH - 1] = 0;
diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 5daa921..05d9d30 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -117,7 +117,7 @@ void __init wrhv_init_IRQ(void)
 	wrhvConfig = (struct vb_config *)fix_to_virt(FIX_WRHV_END);
 		
 	/* Setup the global variables used by the vbi */
-	vbiInit(wrhvConfig);
+	vbi_init(wrhvConfig);
 
 	wrhv_pre_intr_init_hook();
 
diff --git a/include/vbi/interface.h b/include/vbi/interface.h
index c6f9aeb..30ad0b7 100644
--- a/include/vbi/interface.h
+++ b/include/vbi/interface.h
@@ -46,15 +46,15 @@ Hypervisor passes (as parameter) a pointer of the configuration
 structure to the entry function of the virtual core and a boot option
 flag.
 
-The VBI library provides a initialization function vbiInit() to ensures
+The VBI library provides a initialization function vbi_init() to ensures
 that Hypervisor version number is compatible with the VBI library in
 use. If the versions match then the configuration, status and control
 pointers are stored respectively to wrhvVbConfig, wrhvStatus and
 wrhvVbControl.
 
-Therefore a virtual board must always call vbiInit() before accessing
+Therefore a virtual board must always call vbi_init() before accessing
 any data provided by Hypervisor nor send a hypercall to it. Refer to to
-vbiInit() description in the VBI API description document for more
+vbi_init() description in the VBI API description document for more
 information.
 
 Once the VBI library is initialized the virtual board should employ the
@@ -63,7 +63,7 @@ wrhvVbStatus and wrhvVbControl data structures. Accessing these
 structures via the VBI function guaranties source level compatibily
 between VBI versions.
 
-A guest OS should port vbiInit(), the access macros along with the
+A guest OS should port vbi_init(), the access macros along with the
 necessary header files where the data structrures layout is defined.
 
 To be aware: Changing the order of the field this structure may have
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 1cedcd3..97c4fea 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -516,7 +516,7 @@ extern struct vb_config *wrhvVbConfig;
 extern struct vb_status *wrhvVbStatus;
 extern struct vb_control *wrhvVbControl;
 extern int32_t wrhvVbIntNested;
-extern void vbiInit(struct vb_config *config);
+extern void vbi_init(struct vb_config *config);
 extern void vbi_exc_stub(void);
 extern void ASSERT_FN(const char *, const char *, int);
 extern void vbi_idle(uint64_t);
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index 28f3f4e..555e7d3 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -66,7 +66,7 @@ figure 1.1: A simplified overview diagram of a hypervisor system.
                                              guest/hypervisor
                                               speration line
 
-Once the guest starts running it must call vbiInit() with the save parameters
+Once the guest starts running it must call vbi_init() with the save parameters
 passed to it's entry routine which is the base address of the configuration.
 page. This routine retrieves the control and status page page pointers and
 saves them in the corresponding global variables.
@@ -115,7 +115,7 @@ struct vb_status *wrhvVbStatus;	/* The address of the core's Status area */
 int32_t wrhvVbIntNested;	/* Used by VBI IRQ/exception management */
 
 /*
- * vbiInit - Initialize support for vbi library functions
+ * vbi_init - Initialize support for vbi library functions
  *
  * This routine initializes the vbi library
  *
@@ -141,7 +141,7 @@ int32_t wrhvVbIntNested;	/* Used by VBI IRQ/exception management */
  * source level compatible. If additional features that compromise the backward
  * compatibility are required then solution that provides separate libraries
  * should be considered. In case the source level compatibility must be violated
- * in the future then vbiInit() must updated to trap an erroneous configuration
+ * in the future then vbi_init() must updated to trap an erroneous configuration
  * at runtime.
  *
  * VBI versioning mechanism is composed of three fragments.
@@ -182,7 +182,7 @@ int32_t wrhvVbIntNested;	/* Used by VBI IRQ/exception management */
  * major version is fixed.
  *
  */
-void vbiInit(struct vb_config *config)
+void vbi_init(struct vb_config *config)
 {
 	/*
 	 * validate the vbi version; minor and maintenance should be backward
-- 
1.6.5.2

