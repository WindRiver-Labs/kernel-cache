From 642ab1b8a88a732ea83fa54fa43d6c2de9ad2369 Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <[jeremy.mcnicoll@windriver.com]>
Date: Tue, 15 Dec 2009 17:33:35 -0500
Subject: [PATCH 1/2] vdk: Introduce new vdk_virt_to_phys

The network driver needs the VDK's version of virt to phys
in order to map the ring buffer.  At this point in time it
is the only user of vdkVirtToPhys.

There does not exist a direct hypercall mapping between
vbi_hy_ioctl(VBI_HYIOCTL_PADDR,....) and an associated MILS call.
(i.e. calling the IOCTL would result in an error.)

Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/x86/kernel/vbi/Makefile       |    4 ++++
 arch/x86/kernel/vbi/vdk_syscalls.S |   35 +++++++++++++++++++++++++++++++++++
 include/vbi/vdk_interface.h        |    8 ++++++++
 include/vbi/vdk_syscalls.h         |    2 ++
 kernel/vbi/Makefile                |    4 ++--
 5 files changed, 51 insertions(+), 2 deletions(-)
 create mode 100644 arch/x86/kernel/vbi/vdk_syscalls.S

diff --git a/arch/x86/kernel/vbi/Makefile b/arch/x86/kernel/vbi/Makefile
index 79a6269..a25ef58 100644
--- a/arch/x86/kernel/vbi/Makefile
+++ b/arch/x86/kernel/vbi/Makefile
@@ -4,6 +4,10 @@
 
 obj-y		= wrhv.o wrhv_initrd.o syscalls.o
 
+ifeq ($(CONFIG_WRHV_MILS),y)
+obj-y	+= vdk_syscalls.o
+endif
+
 # wrhv embeds an initrd in the vmlinux
 $(obj)/wrhv_initrd.o: FORCE
 	@ $(AS) $(srctree)/$(src)/wrhv_initrd.S -o $@
diff --git a/arch/x86/kernel/vbi/vdk_syscalls.S b/arch/x86/kernel/vbi/vdk_syscalls.S
new file mode 100644
index 0000000..274594b
--- /dev/null
+++ b/arch/x86/kernel/vbi/vdk_syscalls.S
@@ -0,0 +1,35 @@
+/*
+ * vdk_syscalls.S - hypervisor system calls
+ *
+ * Copyright (c) 2009 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ */
+
+#define _ASMLANGUAGE
+
+#include <asm/reg_vbi.h>
+#include <asm/vbi.h>
+#include <vbi/syscall.h>
+
+/* globals */
+.globl vdk_virt_to_phys
+.text
+.balign 16
+
+#define VBI_STACK_FRAME_SIZE	4
+
+vdk_virt_to_phys:
+        movl $VDK_SYS_virtToPhys, %eax
+        push $2
+        vmcall
+        addl $VBI_STACK_FRAME_SIZE, %esp
+        ret
diff --git a/include/vbi/vdk_interface.h b/include/vbi/vdk_interface.h
index 102d2ac..bdb5c8f 100644
--- a/include/vbi/vdk_interface.h
+++ b/include/vbi/vdk_interface.h
@@ -18,6 +18,8 @@
 #if !defined(_VDK_INTERFACE_H) && defined(CONFIG_WRHV_MILS)
 #define _VDK_INTERFACE_H
 
+#include <linux/linkage.h>
+#include <asm/page.h>
 #include <vbi/types.h>
 #include <vbi/arch.h>
 
@@ -532,6 +534,12 @@ static inline int32_t vbi_redir_vioapic_irq(uint32_t irq, int32_t tCore)
 	return 0;
 }
 
+extern asmlinkage int vdk_virt_to_phys (void * pVirtAddr, void *pPaddr);
+
+static inline int32_t vbi_get_guest_dma_addr(void *gaddr, uint64_t *paddr)
+{
+	return vdk_virt_to_phys(__va(gaddr), paddr);
+}
 #endif /*_ASMLANGUAGE */
 #endif  /* _VDK_INTERFACE_H */
 
diff --git a/include/vbi/vdk_syscalls.h b/include/vbi/vdk_syscalls.h
index 8322599..731e7a7 100644
--- a/include/vbi/vdk_syscalls.h
+++ b/include/vbi/vdk_syscalls.h
@@ -204,6 +204,8 @@ have mapped a NULL / no-op to HY_SYSCALL(23) */
 /* Breaks MILS security model */
 #define VBI_SYS_RegsRead_op     VDK_SYS_NULL  /* regs service operation */
 
+#define VDK_SYS_virtToPhys      HY_SYSCALL(1)
+
 /* VTLB operation command and flags (intel-vt specific) */
 #define VBI_VTLB_OP_UPDATE_PMD		0
 #define VBI_VTLB_OP_UPDATE_PTE		0
diff --git a/kernel/vbi/Makefile b/kernel/vbi/Makefile
index 9a042ce..f7ca6fc 100644
--- a/kernel/vbi/Makefile
+++ b/kernel/vbi/Makefile
@@ -1,8 +1,8 @@
 #
 # Makefile for the vbi goodies.
 #
-obj-y := lib.o shmem.o paddr.o version.o msg.o ns.o show.o wrhv.o
+obj-y := lib.o shmem.o version.o msg.o ns.o show.o wrhv.o
 ifeq ($(CONFIG_WRHV_MILS),)
-obj-y += io_apic.o interrupt.o idle.o
+obj-y += io_apic.o interrupt.o idle.o paddr.o
 endif
 
-- 
1.6.5.2

