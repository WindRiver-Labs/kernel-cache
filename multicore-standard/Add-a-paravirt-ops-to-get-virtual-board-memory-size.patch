From a49053845a99bd609bf1f4e45da34c28656966d1 Mon Sep 17 00:00:00 2001
From: Thomas Tai <thomas.tai@windriver.com>
Date: Wed, 21 Oct 2009 14:17:48 -0400
Subject: [PATCH 2/2] Add a paravirt ops to get virtual board memory size

Instead of using memory size from dts, add a paravirt ops
to use wrhvConfig to find the virtual board memory size.
this memory region is then added as the first logical memory
block, lmb. The memory size can be set using RamSize in linux.xml.

Also cleanup due to checkpatch.pl error/warning

Signed-off-by: Thomas Tai <thomas.tai@windriver.com>
---
 arch/powerpc/include/asm/paravirt.h |   37 ++++++++++++++++++++++------------
 arch/powerpc/kernel/paravirt.c      |    9 ++++++++
 arch/powerpc/kernel/prom.c          |   14 +++++++++++-
 arch/powerpc/kernel/vbi/wrhv.c      |   29 +++++++++++++++++++++++++++
 4 files changed, 74 insertions(+), 15 deletions(-)

diff --git a/arch/powerpc/include/asm/paravirt.h b/arch/powerpc/include/asm/paravirt.h
index a8a6fd7..bdb7387 100644
--- a/arch/powerpc/include/asm/paravirt.h
+++ b/arch/powerpc/include/asm/paravirt.h
@@ -2,11 +2,12 @@
 #define __ASM_PARAVIRT_H
 
 #ifdef CONFIG_PARAVIRT
-/* 
- * native functions 
+/*
+ * native functions
  */
 extern void native_do_IRQ(struct pt_regs *regs);
-extern unsigned int native_irq_of_parse_and_map(struct device_node *dev, int index);
+extern unsigned int native_irq_of_parse_and_map(struct device_node *dev,
+						int index);
 extern unsigned int native_get_pvr(void);
 extern void native_timer_interrupt(struct pt_regs * regs);
 extern void __init native_time_init(void);
@@ -17,20 +18,27 @@ extern unsigned long __init native_mmu_mapin_ram(void);
 extern void native_MMU_setup(void);
 extern void __init native_MMU_init(void);
 extern void native_flush_dcache_page(struct page *page);
-extern void native_update_mmu_cache(struct vm_area_struct *vma, unsigned long address,
-				pte_t pte);
+extern void native_update_mmu_cache(struct vm_area_struct *vma,
+				unsigned long address, pte_t pte);
 extern int native_map_page(unsigned long va, phys_addr_t pa, int flags);
-extern int native_kgdb_arch_handle_exception(int vector, int signo, int err_code,
-                               char *remcom_in_buffer, char *remcom_out_buffer,
-                               struct pt_regs *linux_regs);
+extern int native_kgdb_arch_handle_exception(int vector, int signo,
+				int err_code,
+				char *remcom_in_buffer,
+				char *remcom_out_buffer,
+				struct pt_regs *linux_regs);
 extern int __init native_gfar_of_init(void);
-extern void __kprobes native_DebugException(struct pt_regs *regs, unsigned long debug_status);
-extern int paravirt_kgdb_arch_handle_exception(int vector, int signo, int err_code,
-                               char *remcom_in_buffer, char *remcom_out_buffer,
+extern void __kprobes native_DebugException(struct pt_regs *regs,
+				unsigned long debug_status);
+extern int paravirt_kgdb_arch_handle_exception(int vector, int signo,
+				int err_code,
+				char *remcom_in_buffer,
+				char *remcom_out_buffer,
                                struct pt_regs *linux_regs);
+extern int __init native_early_init_dt_scan_memory(unsigned long node,
+				const char *uname, int depth, void *data);
 
 /*
- * paravirtual operations structure 
+ * paravirtual operations structure
  */
 struct pv_time_ops {
 	void (*hw_time_init)(void);
@@ -70,9 +78,12 @@ struct pv_mmu_ops {
 	void (*MMU_setup)(void);
 	void (*MMU_init)(void);
 	void (*flush_dcache_page)(struct page *page);
-	void (*update_mmu_cache)(struct vm_area_struct *vma, 
+	void (*update_mmu_cache)(struct vm_area_struct *vma,
 			unsigned long address, pte_t pte);
 	int (*map_page)(unsigned long va, phys_addr_t pa, int flags);
+	int (*early_init_dt_scan_memory)(unsigned long node,
+			const char *uname, int depth, void *data);
+
 };
 
 extern struct pv_time_ops pv_time_ops;
diff --git a/arch/powerpc/kernel/paravirt.c b/arch/powerpc/kernel/paravirt.c
index 1dd097c..2207368 100644
--- a/arch/powerpc/kernel/paravirt.c
+++ b/arch/powerpc/kernel/paravirt.c
@@ -135,6 +135,8 @@ struct pv_mmu_ops pv_mmu_ops = {
 	.flush_dcache_page = native_flush_dcache_page,
 	.update_mmu_cache = native_update_mmu_cache,
 	.map_page = native_map_page,
+	.early_init_dt_scan_memory =
+		native_early_init_dt_scan_memory,
 };
 
 
@@ -234,6 +236,13 @@ int paravirt_map_page(unsigned long va, phys_addr_t pa, int flags)
 	return	pv_mmu_ops.map_page(va, pa, flags);
 }
 
+int paravirt_early_init_dt_scan_memory(unsigned long node,
+		const char *uname, int depth, void *data)
+{
+       return pv_mmu_ops.early_init_dt_scan_memory(node,
+					uname, depth, data);
+}
+
 extern struct pv_time_ops pv_time_ops;
 extern struct pv_cpu_ops pv_cpu_ops;
 extern struct pv_irq_ops pv_irq_ops;
diff --git a/arch/powerpc/kernel/prom.c b/arch/powerpc/kernel/prom.c
index 09455e1..bfa1d2b 100644
--- a/arch/powerpc/kernel/prom.c
+++ b/arch/powerpc/kernel/prom.c
@@ -958,8 +958,12 @@ static int __init early_init_dt_scan_drconf_memory(unsigned long node)
 #define early_init_dt_scan_drconf_memory(node)	0
 #endif /* CONFIG_PPC_PSERIES */
 
-static int __init early_init_dt_scan_memory(unsigned long node,
-					    const char *uname, int depth, void *data)
+int paravirt_early_init_dt_scan_memory(unsigned long node,
+			const char *uname, int depth, void *data)
+	__attribute__((weak, alias("native_early_init_dt_scan_memory")));
+
+int __init native_early_init_dt_scan_memory(unsigned long node,
+			const char *uname, int depth, void *data)
 {
 	char *type = of_get_flat_dt_prop(node, "device_type", NULL);
 	cell_t *reg, *endp;
@@ -1018,6 +1022,12 @@ static int __init early_init_dt_scan_memory(unsigned long node,
 	return 0;
 }
 
+static int __init early_init_dt_scan_memory(unsigned long node,
+			const char *uname, int depth, void *data)
+{
+       return  paravirt_early_init_dt_scan_memory(node, uname, depth, data);
+}
+
 static void __init early_reserve_mem(void)
 {
 	u64 base, size;
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index 7b020a7..cc5f64f 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -176,6 +176,25 @@ unsigned long __init wrhv_find_end_of_memory(void)
 	return wrhvConfig->physicalMemorySize;
 }
 
+int wrhv_early_init_dt_scan_memory(unsigned long node,
+			const char *uname, int depth, void *data)
+{
+	/* instead of using the memory size from
+	 * device tree, we use RamSize from linux.xml
+	 */
+	u64 base, size;
+	/*
+	 * add the first memory region which is
+	 * from 0x00000000 to end of virtual board memory.
+	 */
+	base = 0x00000000ul;
+	size = wrhv_find_end_of_memory();
+	lmb_add(base, size);
+	memstart_addr = min((u64)memstart_addr, base);
+
+	return 0;
+}
+
 void wrhv_power_save(void)
 {
 	local_irq_enable();
@@ -931,6 +950,13 @@ int wrhv_kgdb_arch_handle_exception(int vector, int signo, int err_code,
 
 void wrhv_init(void)
 {
+	/* initialize wrhvConfig so that we can access
+	 * vbi configuration.
+	 */
+	wrhvConfig = (VB_CONFIG *)0xF0000000;   /* TODO */
+	wrhvControl = wrhvConfig->vbControl;
+	wrhvStatus = wrhvConfig->vbStatus;
+
 	pv_time_ops.hw_time_init = wrhv_hw_time_init;
         pv_time_ops.hw_timer_interrupt = wrhv_hw_timer_interrupt;
         pv_time_ops.hw_clocksource_init = wrhv_hw_clocksource_init;
@@ -953,4 +979,7 @@ void wrhv_init(void)
         pv_mmu_ops.flush_dcache_page = wrhv_flush_dcache_page;
         pv_mmu_ops.update_mmu_cache = wrhv_update_mmu_cache;
         pv_mmu_ops.map_page = wrhv_map_page;
+	pv_mmu_ops.early_init_dt_scan_memory =
+		wrhv_early_init_dt_scan_memory;
+
 }
-- 
1.6.5.rc3

