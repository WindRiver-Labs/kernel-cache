From 86be061e06d62714135f796457883655770fe974 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Mon, 22 Mar 2010 12:51:19 -0400
Subject: [PATCH] MILS: update VDK version of vbi interface

Integrate updates from Keith, which incorporates the splitting
out of the port info structs.

This will be rolled into the MILS shim commit.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/vbi/vdk_interface.h |   80 +++++++++++--------------------------------
 include/vbi/vdk_port.h      |   79 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 99 insertions(+), 60 deletions(-)
 create mode 100644 include/vbi/vdk_port.h

diff --git a/include/vbi/vdk_interface.h b/include/vbi/vdk_interface.h
index 82e9490..021b431 100644
--- a/include/vbi/vdk_interface.h
+++ b/include/vbi/vdk_interface.h
@@ -22,6 +22,7 @@
 #include <asm/page.h>
 #include <vbi/types.h>
 #include <vbi/arch.h>
+#include <vbi/vdk_port.h>
 
 
 /* VB versioning information */
@@ -161,56 +162,6 @@ typedef char VB_WRHV_NAME[VB_MAX_WRHV_NAME_LENGTH];
 #define VB_MAX_EXCEPTION_TYPES	32
 #define MAX_NAME_LENGTH 80
 
-/* Information of port */
-typedef unsigned long UINT32;
-
-typedef enum                           /* port direction type */
-{
-    SOURCE=0,
-    DESTINATION = 1,
-    BOTH = 2,
-} PORT_DIRECTION_TYPE;
-
-typedef enum                           /* port mode type            */
-{
-    QUEUING,
-    SAMPLING
-} PORT_MODE_TYPE;
-
-/* These are not needed by the SK, just need to pass to VB. */
-typedef enum                            /* queuing port protocol     */
-{
-    SENDER_BLOCK,
-    RECEIVER_DISCARD,
-    NOT_APPLICABLE
-} PORT_PROTOCOL_TYPE;
-
-struct portConfig
-{
-    unsigned long id;			/* unique port ID                   */
-    unsigned char *buf;			/* port payload buffer vaddr        */
-    unsigned long bufAttr;		/* port payload buffer attribute    */
-    char name[MAX_NAME_LENGTH];		/* port name                        */
-    unsigned long vbId;			/* parent vb                        */
-    unsigned long moduleId;		/* parent module                    */
-    unsigned long inChannel;		/* in channel                       */
-    unsigned long outChannel;		/* out channel                      */
-    PORT_DIRECTION_TYPE direction;	/* SOURCE or DESTINATION            */
-    PORT_MODE_TYPE mode;		/* QUEUING or SAMPLING              */
-    PORT_PROTOCOL_TYPE protocol;	/* RECEIVER_DISCARD or SENDER_BLOCK */
-    unsigned long msgSize;		/* max. message size (PAGE_ALIGNED) */
-    unsigned long numMsgs;		/* max. capacity for queuing ports  */
-};
-
-struct partPortConfig
-{
-    unsigned long numPorts;
-    struct portConfig portInfo[];
-};
-
-typedef struct portConfig VB_PORT_INFO;
-typedef struct portStatus VB_PORT_STATUS;
-
 struct vb_log_cfg
 {
     signed long recordSize;      /* size of each record entry */
@@ -248,14 +199,14 @@ typedef enum log_type
    LOG_TYPE_SAFETY       = 0x00000104    /* Safety Critical event log: */
 } LOG_TYPE;
 
-typedef struct vb_log_status
+struct vb_log_status
 {
     LOG_STATE   logState;        /* State of log: overrun or not */
     signed long numRecords;      /* number of records in log */
     signed long logOverwrite;    /* overwritten entry */
     signed long numOverwrites;   /* number of overwrites occured */
     signed long lastCollectedVb; /* used by collection VB */
-} VB_LOG_STATUS;
+};
 
 
 /* Status information about one interrupt */
@@ -308,7 +259,7 @@ struct td_status
 /* Do not change the order of these fields */
 struct vb_status
 {
-    unsigned int irq_pend_type; /* 0: Bits indicating which interrupts are pending */
+    unsigned int irq_pend_type; /* 0: Bits indicating which IRQs are pending */
 
     /* reserved field for future use, required for timeStamp alignment */
     unsigned long reserved1; /* 1: */
@@ -340,11 +291,11 @@ struct vb_status
 
     /* Location in vbPhyscial memory of the virtual interrupt controller */
 
-    struct vbInterruptcontroller *vbInterruptController;  /* 10: */
-    VB_PORT_STATUS 		 *portStatus;             /* 11: port status */
+    struct vbInterruptController *vbInterruptController;  /* 10: */
+    struct vb_port_status *portStatus;             /* 11: port status */
 
-    VB_LOG_STATUS secAuditLogStatus; /* 12-16: Security Audit Event log status */
-    VB_LOG_STATUS safetyLogStatus;   /* 17-21: Safety Critical Event log status */
+    struct vb_log_status secAuditLogStatus; /* 12-16: Security Audit Event log status */
+    struct vb_log_status safetyLogStatus;   /* 17-21: Safety Critical Event log status */
     struct td_status tdStatus;       /* 22-25: time donation status */
 #ifdef CONFIG_PPC32
     /* registers saved by hypervisor for all interrupts exceptions
@@ -509,9 +460,11 @@ struct vb_config
     unsigned int  num_mem;     /* Number of memory regions */
     struct vb_mem_info *memoryRegionsConfigAddress; /* configuration info */
 
+#ifdef CONFIG_X86
     /* IO port region for the virtual board */
     unsigned int     numIoPortRgn;     /* number of io port regions */
     struct vb_io_port_info * vbIoPortRgn;      /* IO port Region Info  array*/
+#endif
 
     int           numExc;     /* how many exceptions to forward to VB */
     unsigned int  exceptions [VB_MAX_EXCEPTION_TYPES]; /* forward EXC list */
@@ -525,12 +478,15 @@ struct vb_config
     unsigned int  cacheMode;
 
     unsigned int      numPorts;  /* number of ports defined for the VB */
-    VB_PORT_INFO      *portInfo;  /* port configuration and status */
-
-    unsigned int      irq_pend;  /* filler */
+    struct vbPortInfo *portInfo;  /* port configuration and status */
 
     struct vb_log_cfg secAuditLogCfg;
     struct vb_log_cfg safetyLogCfg;
+
+    char		booter[VB_NAMELEN];	/* The name of the booter */
+    unsigned int	bootAddress;		/* Booter Address */
+    unsigned int	vbElfImage;		/* VB Elf Image */
+
     int               coreId;  /* Just a filler since MILS can only run on 1 core */
     int               corePrivateSize; /* Just another filler */
     void              *corePrivate;  /* filler */
@@ -539,6 +495,10 @@ struct vb_config
 
 };
 
+extern struct vb_config *wr_config;
+extern struct vb_status *wr_status;
+extern struct vb_control *wr_control;
+
 /* IOAPIC and IRQ chip stubs */
 static inline int32_t vbi_send_vcore_vioapic_irq (uint32_t irq,
 	uint32_t vcoreSet, uint32_t options)
diff --git a/include/vbi/vdk_port.h b/include/vbi/vdk_port.h
new file mode 100644
index 0000000..96e225a
--- /dev/null
+++ b/include/vbi/vdk_port.h
@@ -0,0 +1,79 @@
+/* vdk_port.h - port facility header file */
+
+/*
+ * Copyright (c) 2008-2010 Wind River Systems, Inc.
+ *
+ * The right to copy, distribute, modify or otherwise make use
+ * of this software may be licensed only pursuant to the terms
+ * of an applicable Wind River license agreement.
+ */
+
+#ifndef _VDK_PORT_H
+#define _VDK_PORT_H
+
+#ifndef	_ASMLANGUAGE
+
+struct portBufCtrlDesc
+    {
+	unsigned long   startIdx;          /* the location of the first index */
+	unsigned long   numIdx;            /* number of valid indexes         */
+	unsigned long * sBufIdxList;       /* array of SIPC buffer indexes    */
+};
+
+typedef enum                           /* port direction type */ 
+{
+	SOURCE=0,
+	DESTINATION = 1,
+	BOTH = 2,
+} PORT_DIRECTION_TYPE;
+
+typedef enum                           /* port mode type            */ 
+{
+	QUEUING, 
+	SAMPLING
+} PORT_MODE_TYPE;
+
+/* These are not needed by the SK, just need to pass to VB. */
+typedef enum                            /* queuing port protocol     */
+{
+	SENDER_BLOCK,
+	RECEIVER_DISCARD,
+	NOT_APPLICABLE
+} PORT_PROTOCOL_TYPE;
+
+/* PORT queuing status definition */
+/* These defined values should agree with apexType.h for HYPERVISOR. */
+#define PORT_Q_RETRY				3
+#define PORT_Q_AVAILABLE			4
+#define PORT_Q_DEST_UNAVAILABLE			9
+
+struct portStatus				/* port runtime status        */
+{
+	unsigned char *sBuf;			/* SIPC buffer                */
+	unsigned long sBufSize;			/* size of SIPC buffer        */
+	unsigned long seqNum;			/* recv sequence number       */
+	unsigned long *freeSBufIdxBitMap;	/* free SIPC buf idx bit map  */
+	unsigned long *msgLenArray;		/* message length array       */
+	struct portBufCtrlDesc sendDesc;	/* send control descriptor    */
+	struct portBufCtrlDesc recvDesc;	/* recv control descriptor    */
+	struct portBufCtrlDesc relsDesc;	/* release control descriptor */
+};
+
+/* SK access only port information */
+struct portHyInfo
+{
+	unsigned char *sBuf;			/* SIPC buffer               */
+	unsigned long *freeSBufIdxBitMap;	/* free SIPC buf idx bit map */
+	unsigned long *msgLenArray;		/* message length array      */
+	unsigned long *sendSBufIdxList;
+	unsigned long *recvSBufIdxList;
+	unsigned long *relsSBufIdxList;
+};
+
+extern int portSend (unsigned long portId, unsigned long sendCnt, 
+			unsigned long length, unsigned long * returnValue);
+extern int portGetRecvBuf (unsigned long portId, unsigned long bufIdx);
+extern int portBufRelease (unsigned long portId, unsigned long relsCnt);
+
+#endif /* _ASMLANGUAGE */
+#endif /* _VDK_PORT_H */
-- 
1.7.0

