From 87fada56dfdee1ce3ed5202ee60e38ab0a3d28a8 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 14 Oct 2009 20:15:42 -0400
Subject: [PATCH 09/27] vbi/vbiSyscall.h --> vbi/syscall.h

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbiUtil.c |    2 +-
 arch/x86/kernel/vbiSyscalls.S |    4 +-
 include/vbi/private.h         |    2 +-
 include/vbi/syscall.h         |  233 +++++++++++++++++++++++++++++++++++++++++
 include/vbi/vbi.h             |    6 +-
 include/vbi/vbiSyscall.h      |  233 -----------------------------------------
 kernel/vbi/io_apic.c          |    2 +-
 kernel/vbi/paddr.c            |    2 +-
 8 files changed, 242 insertions(+), 242 deletions(-)
 create mode 100644 include/vbi/syscall.h
 delete mode 100644 include/vbi/vbiSyscall.h

diff --git a/arch/powerpc/kernel/vbiUtil.c b/arch/powerpc/kernel/vbiUtil.c
index 7e560ba..14a74f2 100644
--- a/arch/powerpc/kernel/vbiUtil.c
+++ b/arch/powerpc/kernel/vbiUtil.c
@@ -25,7 +25,7 @@ para-virtualize linux, therefore, may need some tweaks to be generic.
 #include <linux/module.h>
 #include <vbi/vbInterface.h>
 #include <vbi/support/sys/vmmu.h>
-#include <vbi/vbiSyscall.h>
+#include <vbi/syscall.h>
 
 
 /* defines */
diff --git a/arch/x86/kernel/vbiSyscalls.S b/arch/x86/kernel/vbiSyscalls.S
index e0271ce..d5f3f33 100644
--- a/arch/x86/kernel/vbiSyscalls.S
+++ b/arch/x86/kernel/vbiSyscalls.S
@@ -49,11 +49,11 @@ This file implements the hypervisor system call stubs for the Razor hypervisor.
 #ifdef CONFIG_WRHV
 #include <vbi/support/sys/x86/regs.h>
 #include <vbi/support/sys/x86/asm.h>
-#include <vbi/vbiSyscall.h>
+#include <vbi/syscall.h>
 #else
 #include <x86/regs.h>
 #include <asm.h>
-#include <vbiSyscall.h>
+#include <vbi/syscall.h>
 #endif /* CONFIG_WRHV */
 
 	/* globals */
diff --git a/include/vbi/private.h b/include/vbi/private.h
index 38520fc..b13f905 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -33,7 +33,7 @@ extern "C" {
 #include <linux/types.h>
 #include <linux/linkage.h>
 #include "syscalls.h"
-#include "vbiSyscall.h"
+#include "vbi/syscall.h"
 #include "vbiTypes.h"
 #else
 #define LINKAGE
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
new file mode 100644
index 0000000..82597d6
--- /dev/null
+++ b/include/vbi/syscall.h
@@ -0,0 +1,233 @@
+/* syscall.h - hypervisor system calls */
+
+/*
+ * Copyright (c) 2007-2009 Wind River Systems, Inc.
+ *
+ * The right to copy, distribute, modify or otherwise make use
+ * of this software may be licensed only pursuant to the terms
+ * of an applicable Wind River license agreement.
+ */
+
+/*
+modification history
+--------------------
+02s,02sep09,mmi  apply patch
+02r,31aug09,mmi  use VBI_HREG_SET instead of VB_HREG_SET
+02q,26aug09,mmi  Fix defect WIND00178030: add vbiKputc proto
+02p,12aug09,dtr  Update vbiHyIoctl API to add additional argument.
+02o,22jul09,mpk  support vbi register read, write
+02n,03jul09,mmi  move vbiNsOp to private header file, add
+		 vbiVbRegRead/Write
+02m,02jul09,mmi  add one more parameter to vbiIoapicIoctl
+02l,23jun09,mmi  add vbi2.0 apis
+02k,11jun09,mmi  update interrupts api protortype
+02j,10jun09,mmi  update hypercall interface according to vbi 2.0 spec
+02i,26feb09,mmi  add vbiNs
+02h,24feb09,mmi  remove duplicate defines already in syscalls.h
+02g,06feb09,mmi  include vbiMsg.h
+02f,19jan09,mmi  update msg API prototypes
+02e,12jan09,dtr  Add driver ioctl calls, remove legacy interrupt defns.
+02d,12dec08,md   rename header files
+02c,05dec08,mes  Removed shelf macros, added vbMgmt macros
+02b,01dec08,md   add VBI_IOAPICIOCTL_SEND options
+02a,21nov08,md   remove port and ED&R syscalls
+01z,20nov08,mmi  adtopt new naming convention
+01y,31oct08,dbt  Added vdkVtlbMmuOp hypercall.
+01x,16jun08,mmi  fix vdkBspIoctl prototype
+01w,19may08,gws  add vIoapicIoctl
+01v,18apr08,md   add extra arg to vdkHyioctl
+01u,11apr08,md   add EOI ioctl
+01t,06mar08,md   add debug shell ioctl
+01s,06dec07,foo  update hw ints
+01r,23nov07,foo  fix prototype, use basic types
+01q,25oct07,foo  updated with new vdk functions
+01p,27sep07,md   added exception profiling fields
+01o,26sep07,md   added profiling statistics and stats ioctl
+01n,10sep07,md   re-number hypervisor system calls
+01m,21aug07,md   added VDK_SYS_ctx_load_vmmu
+01l,05jul07,foo  added bspIoctl calls and defines
+01k,04jun07,md   added ctxctl and mmu system calls
+01j,17may07,ymz  added port syscall.
+01i,28may07,foo  update vdkInt prototype
+01h,18may07,md   add hypervisor ioctl
+01g,20apr07,md   add vmmu system calls
+01f,18apr07,md   renamed to vdk
+01e,10apr07,md   replace kprintf syscall with kputs and kputc
+01d,19mar07,foo  fix macro
+01c,17mar07,foo  modify definitions to all start with HY
+01b,15mar07,md   added interrupt system calls
+01a,09mar07,md   written
+*/
+
+#ifndef __INCvbiSyscallh
+#define __INCvbiSyscallh
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+#ifdef CONFIG_WRHV
+#define LINKAGE asmlinkage
+#include <linux/linkage.h>
+#include "vbiTypes.h"
+#include "vbi/arch.h"
+#include "syscalls.h"
+#else
+#define LINKAGE
+#include <vbi/arch.h>
+#include <syscalls.h>
+#endif /* CONFIG_WRHV */
+
+#ifndef	_ASMLANGUAGE
+
+/* Forward declaration */
+struct vmmuConfig;
+struct VB_ARCH_CONTROL_REGS; 
+
+/* information about incoming message */
+
+typedef struct vbiMsgInfo {
+    vbiCtx_t    id;	/* context id of sender */
+    uint32_t type;	/* message type (msg/event) */
+    size_t   slen;	/* length of sent buffer */
+    size_t   rlen;	/* length of received buffer */
+    uint32_t error;	/* extended error status */
+    time_t   timestamp;	/* time message was sent */
+    uint32_t nmsg;	/* number of queued messages remaining */
+} VBI_MSG_INFO;
+
+/* extended error codes reported in "error" field */
+
+#define	VBI_MSG_ERROR_INTLEVEL  1	/* operation not allowed at interrupt level */
+#define	VBI_MSG_ERROR_BAD_ID    2	/* bad context id specified */
+#define	VBI_MSG_ERROR_ABORTED   3	/* operation aborted */
+#define	VBI_MSG_ERROR_TIMEOUT   4	/* operation timed out */
+#define	VBI_MSG_ERROR_XCALL     5	/* cross call to remote cpu failed */
+
+/* message types as reported in the "type" field */
+
+#define	VBI_MSG_TYPE_REGULAR  1	/* regular message */
+#define	VBI_MSG_TYPE_EVENT    2	/* event message */
+#define	VBI_MSG_TYPE_REPLY    3	/* reply message */
+
+
+/* modifiers for message processing */
+
+typedef struct vbiMsgCtl {
+    uint32_t flags;	/* operation flags */
+    uint32_t ordering;	/* order to receive messages */
+    time_t   timeout;	/* receive timeout */
+} VBI_MSG_CTL;
+
+/* message control flags */
+#define VBI_MSG_CTL_FLAG_RETRY 1
+
+/* memory read/write control structure */
+
+typedef struct vbiMemCtl
+    {
+    void	*pBuffer;	    /* address of target context	    */
+    void	*pAddress;	    /* address of calling context	    */
+    size_t	sizeIn;		    /* number of bytes to be read	    */
+    size_t	sizeOut;	    /* number of bytes successfully read    */
+    uint32_t	flags;	    	    /* data/instruction flush option	    */
+  } VBI_MEM_CTL;
+
+#define VBI_DCACHE_FLUSH 	0x0001
+#define VBI_ICACHE_INV 		0x0002
+
+/* system call prototypes for use within a context */
+
+extern LINKAGE int  vbiHyIoctl (unsigned ioctl, void *arg1, void *arg2, void *arg3, void *arg4);
+extern LINKAGE int  vbiIoapicIoctl (unsigned ioctl, unsigned arg1, unsigned arg2);
+extern LINKAGE int  vbiCtxctl (unsigned operation, unsigned arg1, unsigned arg2);
+extern LINKAGE int32_t vbiVbMgmt (uint32_t cmd, uint32_t boardId, int32_t *outError,
+			  uint32_t flags, void * ctl);
+extern LINKAGE int  vbiVtlbOp (unsigned int op, unsigned long arg1,
+			  unsigned long arg2, unsigned long arg3);
+
+/*******************************************************************************
+ * Modified APIs for VBI 2.0 
+ */
+
+/* Message send	    */
+
+extern LINKAGE vbiStatus_t vbiSend (vbiCtx_t	    id, 
+			    void	    *smsg, 
+			    size_t	    slen, 
+			    void	    *rmsg,
+			    size_t	    rlen, 
+			    VBI_MSG_INFO    *info, 
+			    VBI_MSG_CTL    *ctl);
+/* message receive  */
+
+extern vbiStatus_t vbiReceive (void		*rmsg, 
+			       uint32_t		rlen, 
+			       VBI_MSG_INFO	*info,
+			       VBI_MSG_CTL     *ctl);                                   
+/* message reply */
+
+extern LINKAGE int32_t vbiReply (vbiCtx_t	    id, 
+			 void		    *smsg, 
+			 size_t		    slen, 
+			 VBI_MSG_CTL	    *ctl);
+
+extern LINKAGE vbiStatus_t vbiPanic (const char *msg);
+extern vbiStatus_t vbiDcacheFlush (void *saddr, size_t size);
+extern vbiStatus_t vbiIcacheFlush (void *saddr, size_t size);
+extern LINKAGE vbiStatus_t vbiKputs (const char *s);
+extern LINKAGE vbiStatus_t vbiKputc (int c);
+extern vbiStatus_t vbiVmmuConfig (struct vmmuConfig * config);
+extern vbiStatus_t vbiVmmuEnable (uint32_t  vmmu_num);
+extern vbiStatus_t vbiVmmuDisable (uint32_t vmmu_num);
+extern vbiStatus_t vbiNsRegister (char  *name, uint32_t  revision);
+extern vbiStatus_t vbiNsUnRegister (char *name, uint32_t  revision);
+extern vbiStatus_t vbiNsLookup (char *name, uint32_t  rev, VBI_NS_HANDLE *pHandle);
+extern vbiStatus_t vbiVmmuTlbFlush (struct vmmuConfig * config, void *addr, size_t len);
+
+
+/* Prior to vbi 2.0 these api were vbiMmuAttrSet/Get */
+
+extern LINKAGE vbiStatus_t  vbiMemAttrSet (void *vaddr, size_t len, vbiMemAttr_t attr);
+extern LINKAGE vbiStatus_t  vbiMemAttrGet (void *vaddr, vbiMemAttr_t * attr);
+
+/*******************************************************************************
+ * START: New APIs introduced for vbi 2.0  
+ */
+
+extern LINKAGE vbiStatus_t vbiIntVCoreUnlock (void);
+extern LINKAGE vbiIntState_t vbiIntVCoreLock (void);
+extern vbiStatus_t vbiCacheTextUpdate (void *saddr, size_t size);
+extern vbiStatus_t  vbiExcBaseSet (void * excTblBase);
+
+/* virtual board management API's */
+
+extern LINKAGE vbiStatus_t vbiVbSuspend (vbiVb_t id, vbiCore_t core);
+extern LINKAGE vbiStatus_t vbiVbReset (vbiVb_t id, vbiCore_t core, uint32_t options);
+extern LINKAGE vbiStatus_t vbiVbRestart (vbiVb_t id, vbiCore_t core);
+extern LINKAGE vbiStatus_t vbiVbResume (vbiVb_t id, vbiCore_t core);
+
+/* read remote vb's memory */
+
+extern LINKAGE vbiStatus_t vbiVbMemoryRead (VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
+extern LINKAGE vbiStatus_t vbiVbMemoryWrite (VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
+extern LINKAGE void vbiDebugShellStart (uint32_t  flags);
+
+/* read remote vb's registers */
+
+extern LINKAGE vbiStatus_t vbiVbRegisterRead (VBI_HREG_SET *regCtl, 
+				       vbiVb_t targetBoard, vbiCore_t core);
+extern LINKAGE vbiStatus_t vbiVbRegisterWrite (VBI_HREG_SET *regCtl, 
+					vbiVb_t targetBoard, vbiCore_t core);
+
+/*******************************************************************************
+ * END: New APIs introduced for vbi 2.0  
+ */
+
+
+#endif
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif  /* __INCvbiSyscallh */
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index b308183..f0b3f8d 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -33,7 +33,7 @@ modification history
 01j,23dec08,mmi  fix vbiVioapicIntSend() prototype, added show routines
 01i,19dec08,mmi  add VBI show routine function prototypes
 01h,14dec08,mmi  move printing function prototypes to vbInterface.h
-01g,13dec08,mmi  change vbiSyscalls.h to vbiSyscall.h
+01g,13dec08,mmi  change vbiSyscalls.h to syscall.h
 01f,12dec08,mmi  rename RAZOR to WRHV
 01e,11dec08,mmi  replace razor with wrhv prefix, add access macros, moved
 		 razorvxworks.h contents to this file
@@ -52,7 +52,7 @@ modification history
 #include "vbiVersion.h"
 #include "vbi/arch.h"
 #include "vbInterface.h"
-#include "vbiSyscall.h"
+#include "vbi/syscall.h"
 #include "vbi/interrupt.h"
 #include "vbi/shmem.h"
 #else
@@ -62,7 +62,7 @@ modification history
 #include <vbiVersion.h>
 #include <vbi/arch.h>
 #include <vbInterface.h>
-#include <vbiSyscall.h>
+#include <syscall.h>
 #include <vbi/interrupt.h>
 #include <vbi/shmem.h>
 #endif /* CONFIG_WRHV */
diff --git a/include/vbi/vbiSyscall.h b/include/vbi/vbiSyscall.h
deleted file mode 100644
index 299932b..0000000
--- a/include/vbi/vbiSyscall.h
+++ /dev/null
@@ -1,233 +0,0 @@
-/* vbiSyscall.h - hypervisor system calls */
-
-/*
- * Copyright (c) 2007-2009 Wind River Systems, Inc.
- *
- * The right to copy, distribute, modify or otherwise make use
- * of this software may be licensed only pursuant to the terms
- * of an applicable Wind River license agreement.
- */
-
-/*
-modification history
---------------------
-02s,02sep09,mmi  apply patch
-02r,31aug09,mmi  use VBI_HREG_SET instead of VB_HREG_SET
-02q,26aug09,mmi  Fix defect WIND00178030: add vbiKputc proto
-02p,12aug09,dtr  Update vbiHyIoctl API to add additional argument.
-02o,22jul09,mpk  support vbi register read, write
-02n,03jul09,mmi  move vbiNsOp to private header file, add
-		 vbiVbRegRead/Write
-02m,02jul09,mmi  add one more parameter to vbiIoapicIoctl
-02l,23jun09,mmi  add vbi2.0 apis
-02k,11jun09,mmi  update interrupts api protortype
-02j,10jun09,mmi  update hypercall interface according to vbi 2.0 spec
-02i,26feb09,mmi  add vbiNs
-02h,24feb09,mmi  remove duplicate defines already in syscalls.h
-02g,06feb09,mmi  include vbiMsg.h
-02f,19jan09,mmi  update msg API prototypes
-02e,12jan09,dtr  Add driver ioctl calls, remove legacy interrupt defns.
-02d,12dec08,md   rename header files
-02c,05dec08,mes  Removed shelf macros, added vbMgmt macros
-02b,01dec08,md   add VBI_IOAPICIOCTL_SEND options
-02a,21nov08,md   remove port and ED&R syscalls
-01z,20nov08,mmi  adtopt new naming convention
-01y,31oct08,dbt  Added vdkVtlbMmuOp hypercall.
-01x,16jun08,mmi  fix vdkBspIoctl prototype
-01w,19may08,gws  add vIoapicIoctl
-01v,18apr08,md   add extra arg to vdkHyioctl
-01u,11apr08,md   add EOI ioctl
-01t,06mar08,md   add debug shell ioctl
-01s,06dec07,foo  update hw ints
-01r,23nov07,foo  fix prototype, use basic types
-01q,25oct07,foo  updated with new vdk functions
-01p,27sep07,md   added exception profiling fields
-01o,26sep07,md   added profiling statistics and stats ioctl
-01n,10sep07,md   re-number hypervisor system calls
-01m,21aug07,md   added VDK_SYS_ctx_load_vmmu
-01l,05jul07,foo  added bspIoctl calls and defines
-01k,04jun07,md   added ctxctl and mmu system calls
-01j,17may07,ymz  added port syscall.
-01i,28may07,foo  update vdkInt prototype
-01h,18may07,md   add hypervisor ioctl
-01g,20apr07,md   add vmmu system calls
-01f,18apr07,md   renamed to vdk
-01e,10apr07,md   replace kprintf syscall with kputs and kputc
-01d,19mar07,foo  fix macro
-01c,17mar07,foo  modify definitions to all start with HY
-01b,15mar07,md   added interrupt system calls
-01a,09mar07,md   written
-*/
-
-#ifndef __INCvbiSyscallh
-#define __INCvbiSyscallh
-
-#ifdef __cplusplus
-extern "C" {
-#endif /* __cplusplus */
-
-#ifdef CONFIG_WRHV
-#define LINKAGE asmlinkage
-#include <linux/linkage.h>
-#include "vbiTypes.h"
-#include "vbi/arch.h"
-#include "syscalls.h"
-#else
-#define LINKAGE
-#include <vbi/arch.h>
-#include <syscalls.h>
-#endif /* CONFIG_WRHV */
-
-#ifndef	_ASMLANGUAGE
-
-/* Forward declaration */
-struct vmmuConfig;
-struct VB_ARCH_CONTROL_REGS; 
-
-/* information about incoming message */
-
-typedef struct vbiMsgInfo {
-    vbiCtx_t    id;	/* context id of sender */
-    uint32_t type;	/* message type (msg/event) */
-    size_t   slen;	/* length of sent buffer */
-    size_t   rlen;	/* length of received buffer */
-    uint32_t error;	/* extended error status */
-    time_t   timestamp;	/* time message was sent */
-    uint32_t nmsg;	/* number of queued messages remaining */
-} VBI_MSG_INFO;
-
-/* extended error codes reported in "error" field */
-
-#define	VBI_MSG_ERROR_INTLEVEL  1	/* operation not allowed at interrupt level */
-#define	VBI_MSG_ERROR_BAD_ID    2	/* bad context id specified */
-#define	VBI_MSG_ERROR_ABORTED   3	/* operation aborted */
-#define	VBI_MSG_ERROR_TIMEOUT   4	/* operation timed out */
-#define	VBI_MSG_ERROR_XCALL     5	/* cross call to remote cpu failed */
-
-/* message types as reported in the "type" field */
-
-#define	VBI_MSG_TYPE_REGULAR  1	/* regular message */
-#define	VBI_MSG_TYPE_EVENT    2	/* event message */
-#define	VBI_MSG_TYPE_REPLY    3	/* reply message */
-
-
-/* modifiers for message processing */
-
-typedef struct vbiMsgCtl {
-    uint32_t flags;	/* operation flags */
-    uint32_t ordering;	/* order to receive messages */
-    time_t   timeout;	/* receive timeout */
-} VBI_MSG_CTL;
-
-/* message control flags */
-#define VBI_MSG_CTL_FLAG_RETRY 1
-
-/* memory read/write control structure */
-
-typedef struct vbiMemCtl
-    {
-    void	*pBuffer;	    /* address of target context	    */
-    void	*pAddress;	    /* address of calling context	    */
-    size_t	sizeIn;		    /* number of bytes to be read	    */
-    size_t	sizeOut;	    /* number of bytes successfully read    */
-    uint32_t	flags;	    	    /* data/instruction flush option	    */
-  } VBI_MEM_CTL;
-
-#define VBI_DCACHE_FLUSH 	0x0001
-#define VBI_ICACHE_INV 		0x0002
-
-/* system call prototypes for use within a context */
-
-extern LINKAGE int  vbiHyIoctl (unsigned ioctl, void *arg1, void *arg2, void *arg3, void *arg4);
-extern LINKAGE int  vbiIoapicIoctl (unsigned ioctl, unsigned arg1, unsigned arg2);
-extern LINKAGE int  vbiCtxctl (unsigned operation, unsigned arg1, unsigned arg2);
-extern LINKAGE int32_t vbiVbMgmt (uint32_t cmd, uint32_t boardId, int32_t *outError,
-			  uint32_t flags, void * ctl);
-extern LINKAGE int  vbiVtlbOp (unsigned int op, unsigned long arg1,
-			  unsigned long arg2, unsigned long arg3);
-
-/*******************************************************************************
- * Modified APIs for VBI 2.0 
- */
-
-/* Message send	    */
-
-extern LINKAGE vbiStatus_t vbiSend (vbiCtx_t	    id, 
-			    void	    *smsg, 
-			    size_t	    slen, 
-			    void	    *rmsg,
-			    size_t	    rlen, 
-			    VBI_MSG_INFO    *info, 
-			    VBI_MSG_CTL    *ctl);
-/* message receive  */
-
-extern vbiStatus_t vbiReceive (void		*rmsg, 
-			       uint32_t		rlen, 
-			       VBI_MSG_INFO	*info,
-			       VBI_MSG_CTL     *ctl);                                   
-/* message reply */
-
-extern LINKAGE int32_t vbiReply (vbiCtx_t	    id, 
-			 void		    *smsg, 
-			 size_t		    slen, 
-			 VBI_MSG_CTL	    *ctl);
-
-extern LINKAGE vbiStatus_t vbiPanic (const char *msg);
-extern vbiStatus_t vbiDcacheFlush (void *saddr, size_t size);
-extern vbiStatus_t vbiIcacheFlush (void *saddr, size_t size);
-extern LINKAGE vbiStatus_t vbiKputs (const char *s);
-extern LINKAGE vbiStatus_t vbiKputc (int c);
-extern vbiStatus_t vbiVmmuConfig (struct vmmuConfig * config);
-extern vbiStatus_t vbiVmmuEnable (uint32_t  vmmu_num);
-extern vbiStatus_t vbiVmmuDisable (uint32_t vmmu_num);
-extern vbiStatus_t vbiNsRegister (char  *name, uint32_t  revision);
-extern vbiStatus_t vbiNsUnRegister (char *name, uint32_t  revision);
-extern vbiStatus_t vbiNsLookup (char *name, uint32_t  rev, VBI_NS_HANDLE *pHandle);
-extern vbiStatus_t vbiVmmuTlbFlush (struct vmmuConfig * config, void *addr, size_t len);
-
-
-/* Prior to vbi 2.0 these api were vbiMmuAttrSet/Get */
-
-extern LINKAGE vbiStatus_t  vbiMemAttrSet (void *vaddr, size_t len, vbiMemAttr_t attr);
-extern LINKAGE vbiStatus_t  vbiMemAttrGet (void *vaddr, vbiMemAttr_t * attr);
-
-/*******************************************************************************
- * START: New APIs introduced for vbi 2.0  
- */
-
-extern LINKAGE vbiStatus_t vbiIntVCoreUnlock (void);
-extern LINKAGE vbiIntState_t vbiIntVCoreLock (void);
-extern vbiStatus_t vbiCacheTextUpdate (void *saddr, size_t size);
-extern vbiStatus_t  vbiExcBaseSet (void * excTblBase);
-
-/* virtual board management API's */
-
-extern LINKAGE vbiStatus_t vbiVbSuspend (vbiVb_t id, vbiCore_t core);
-extern LINKAGE vbiStatus_t vbiVbReset (vbiVb_t id, vbiCore_t core, uint32_t options);
-extern LINKAGE vbiStatus_t vbiVbRestart (vbiVb_t id, vbiCore_t core);
-extern LINKAGE vbiStatus_t vbiVbResume (vbiVb_t id, vbiCore_t core);
-
-/* read remote vb's memory */
-
-extern LINKAGE vbiStatus_t vbiVbMemoryRead (VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
-extern LINKAGE vbiStatus_t vbiVbMemoryWrite (VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
-extern LINKAGE void vbiDebugShellStart (uint32_t  flags);
-
-/* read remote vb's registers */
-
-extern LINKAGE vbiStatus_t vbiVbRegisterRead (VBI_HREG_SET *regCtl, 
-				       vbiVb_t targetBoard, vbiCore_t core);
-extern LINKAGE vbiStatus_t vbiVbRegisterWrite (VBI_HREG_SET *regCtl, 
-					vbiVb_t targetBoard, vbiCore_t core);
-
-/*******************************************************************************
- * END: New APIs introduced for vbi 2.0  
- */
-
-
-#endif
-#ifdef __cplusplus
-}
-#endif /* __cplusplus */
-
-#endif  /* __INCvbiSyscallh */
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index da8fa40..c6fc95c 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -21,7 +21,7 @@ modification history
 01h,29mar09,mmi  set MASK properly
 01g,09apr09,mpk  hypervisor 64 bit changes to support mips cavium-octeon bsp
 01f,19mar09,mes  Fixed return values of VBI functions
-01e,24feb09,mmi  include vbiSyscall.h
+01e,24feb09,mmi  include syscall.h
 01d,22dec09,mmi  fix send function proto
 01c,13dec08,mmi  define structures locally
 01b,11dec08,mmi  replace razor with wrhvVb
diff --git a/kernel/vbi/paddr.c b/kernel/vbi/paddr.c
index 5586dff..5fc903a 100644
--- a/kernel/vbi/paddr.c
+++ b/kernel/vbi/paddr.c
@@ -18,7 +18,7 @@ modification history
                  address
 01e,15may09,mmi  fix apigen errors
 01d,23jan09,mmi  fix included header file
-01c,13dec08,mmi  replace vbiSyscalls.h with vbiSyscall.h
+01c,13dec08,mmi  replace vbiSyscalls.h with syscall.h
 01b,19nov08,mmi  introduced the VBI terminology
 01a,18apr08,md   written
 */
-- 
1.6.3.3

