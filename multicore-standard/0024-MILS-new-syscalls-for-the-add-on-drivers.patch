From 70dd233925fdd22ab5067f60eb5b46bc7f16a38c Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Mon, 22 Mar 2010 14:02:13 -0400
Subject: [PATCH] MILS: new syscalls for the add-on drivers

The add on drivers for MILS (built out of tree) will be
making use of these syscalls.

This addition will be rolled into the shim patch upon the
next kernel rebase.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/vbi/vdk_syscalls.h |   55 ++++++++++++++++++++++++++++++++++++++++----
 1 files changed, 50 insertions(+), 5 deletions(-)

diff --git a/include/vbi/vdk_syscalls.h b/include/vbi/vdk_syscalls.h
index b1d840d..ab95eb5 100644
--- a/include/vbi/vdk_syscalls.h
+++ b/include/vbi/vdk_syscalls.h
@@ -17,6 +17,8 @@
 #ifndef _VDK_SYSCALLS_H
 #define _VDK_SYSCALLS_H
 
+#include <linux/linkage.h>
+
 #ifdef __ASSEMBLY__
 #define _ASMLANGUAGE
 
@@ -175,8 +177,15 @@ have mapped a NULL / no-op to HY_SYSCALL(23) */
 #define VBI_SYS_mmu_attr_get    HY_SYSCALL(12)  /* get physical memory attr  */
 
 /* BSP specific interface */
-#define VDK_SYS_bspIoctl        HY_SYSCALL(13)  /* BSP specific opreration   */
-
+#define VBI_SYS_bspIoctl        HY_SYSCALL(13)  /* BSP specific operation   */
+
+/* Calls only used by the MILS specific add-on drivers */
+#define VBI_SYS_secAuditEventInject     HY_SYSCALL(16)
+#define VBI_SYS_secAuditEventCollect    HY_SYSCALL(17)
+#define VBI_SYS_portSend                HY_SYSCALL(18)
+#define VBI_SYS_portGetRecvBuf          HY_SYSCALL(19)
+#define VBI_SYS_portBufRelease          HY_SYSCALL(20)
+ 
 /* vbMgmt services */
 #define VBI_SYS_ctxctl          VDK_SYS_NULL  /* context control operation */
 #define VBI_SYS_vbMgmt          VDK_SYS_NULL
@@ -185,7 +194,7 @@ have mapped a NULL / no-op to HY_SYSCALL(23) */
 /* Not allowed to enable intr in MILS*/
 #define VBI_SYS_vIoapicIoctl    VDK_SYS_NULL
 
-/* Unicorn only */
+/* Currently not implemented in MILS */
 #define VBI_SYS_vbReset         VDK_SYS_NULL  /* reset  vcores        */
 #define VBI_SYS_vbRestart       VDK_SYS_NULL  /* restart vcores       */
 #define VBI_SYS_vbSuspend       VDK_SYS_NULL  /* suspend vcores       */
@@ -196,8 +205,13 @@ have mapped a NULL / no-op to HY_SYSCALL(23) */
 #define VBI_SYS_kputs           HY_SYSCALL(21)  /* print a string to the cons*/
 #define VBI_SYS_kputc           HY_SYSCALL(22)  /* print a char to the cons  */
 #define VBI_SYS_ps              VDK_SYS_NULL    /* process status display    */
-/* This doesn't work on MILS -XXX- Fix ME! */
-#define VBI_SYS_dbgShStart      VDK_SYS_NULL  /* start debug shell         */
+#define VBI_SYS_dbgShStart      VDK_SYS_NULL    /* start debug shell         */
+
+/* Calls only used by the MILS specific add-on drivers */
+#define VBI_SYS_scheduleSet             HY_SYSCALL(25)
+#define VBI_SYS_scheduleNameToId        HY_SYSCALL(26)
+#define VBI_SYS_safeCritEventInject     HY_SYSCALL(27)
+#define VBI_SYS_safeCritEventCollect    HY_SYSCALL(28)
 
 /* VTLB MMU operations */
 #define VBI_SYS_vtlb_op         VDK_SYS_NULL /* VTLB operation */
@@ -412,7 +426,11 @@ extern int vbi_flush_icache (void *saddr, void *eaddr, unsigned size);
 extern int vbi_config_vmmu (struct vmmuConfig * config);
 extern int vbi_enable_vmmu (unsigned vmmu_num);
 extern int vbi_disable_vmmu (unsigned vmmu_num);
+
 extern asmlinkage int vbi_virt_to_phys (void * pVirtAddr, void *pPaddr);
+extern asmlinkage int vbi_int_controller_done(unsigned level);
+extern asmlinkage void vbi_vcore_irq_lock(void);
+extern asmlinkage int32_t vbi_vcore_irq_unlock(void);
 
 static inline int32_t vbi_hy_ioctl(unsigned ioctl, void *arg1, void *arg2, \
 		void *arg3, void *arg4)
@@ -424,6 +442,33 @@ static inline int32_t vbi_hy_ioctl(unsigned ioctl, void *arg1, void *arg2, \
 		return -1;
 }
 
+/*
+ * The following are MILS extensions and not part of the normal
+ * VBI 2.0 syscall set.
+ */
+
+extern asmlinkage int vdk_sec_audit_event_inject(const int eventId,
+                                      const int32_t resource,
+                                      const uint32_t outcome);
+extern asmlinkage int vdk_sec_audit_event_collect(const int32_t numEntriesToGet,
+                                       char *pCollectedRecords,
+                                       int32_t *pNumEntriesRead);
+extern asmlinkage int vdk_safe_crit_event_inject(const char *pRecord);
+extern asmlinkage int vdk_safe_crit_event_collect(int numEntriesToGet,
+                                       char *pCollectedRecords,
+                                       int *pNumEntriesRead);
+extern asmlinkage int vdk_port_send(unsigned long vbPortId, unsigned long sendCnt,
+                         unsigned long length, unsigned long * returnValue);
+extern asmlinkage int vdk_port_get_recv_buf(unsigned long vbPortId, unsigned long bufIdx);
+extern asmlinkage int vdk_port_buf_release(unsigned long vbPortId,
+                                unsigned long relsCnt);
+extern asmlinkage int vdk_schedule_set(const char *name, unsigned long mode);
+extern asmlinkage int vdk_schedule_name_to_id(const char *name,
+                                   unsigned long *scheduleId);
+extern asmlinkage int vdk_bsp_ioctl(unsigned cmd, int p1, int p2, int p3,
+				 int p4, int p5, int p6, int p7);
+
+
 #endif	/* _ASMLANGUAGE */
 
 #endif	/* _VDK_SYSCALLS_H */
-- 
1.7.0

