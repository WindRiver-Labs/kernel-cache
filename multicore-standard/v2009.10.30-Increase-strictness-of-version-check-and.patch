From 48d2762f54c5e37f9674ccb3dc11c14bdb8e968a Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Thu, 5 Nov 2009 20:11:16 -0500
Subject: [PATCH 16/22] v2009.10.30: Increase strictness of version check, and docs

Integrate Halloween update

[cf: 01t,14oct09,mmi  fix version verfication and update docs]

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 kernel/vbi/lib.c |   48 +++++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 47 insertions(+), 1 deletions(-)

diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index eeade37..ffbaa57 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -136,6 +136,51 @@ int32_t wrhvVbIntNested;	/* Used by VBI IRQ/exception management */
  * A good practice would be to map these regions as devices meaning 1-1
  * translation.
  *
+ * The evolution of the vbi library is tracked by the versioning information.
+ * The different versions of the vbi library are guaranteed to be at least
+ * source level compatible. If additional features that compromise the backward
+ * compatibility are required then solution that provides separate libraries
+ * should be considered. In case the source level compatibility must be violated
+ * in the future then vbiInit() must updated to trap an erroneous configuration
+ * at runtime.
+ *
+ * VBI versioning mechanism is composed of three fragments.
+ *
+ * - Major version
+ * - Minor version
+ * - Maintenance version
+ *
+ * Each of these version fragments serves the purpose of tracking a specific
+ * modification of the vbi library.
+ *
+ * The Major version is updated (incremented by one) when the vbi runtime code
+ * modification has the effect of altering the binary compatibility with it's
+ * predecessor. Which means that the VBI lib used in the guest must match the
+ * version that hypervisor kernel was built against in order to be binary
+ * compatible. In otherwords the major version fragments must be identitical
+ * between a guest OS and hypervisor. These type of mods may update the C
+ * structures but conserve the vbi functions signatures. Additional APIs may be
+ * added.
+ *
+ * The Minor version fragment is dedicated for tracking VBI updates that are
+ * carefully done to prevent breaking Guest OS using a older version of the vbi
+ * library. This implies that a Minor version updates must maintain the binary
+ * compatibility between VBI versions. It is important to note that this is
+ * applicable to only to VBI 2.0 or later versions.
+ * This type of updates should not alter the API or structures definitions.
+ * The vbi library may be extended with new API's that are orthogonal with the
+ * existing ones (the current version at any point in time). The existing
+ * structures may be appended with new fields in a fashion not to impact the
+ * current offsets.
+ *
+ * Finally the maintenance version is used for the purpose of fixing bugs on a
+ * specific version of the vbi library. The purpose is to facility the customer
+ * support effort.
+ *
+ * The source compatibility is assured for any version of the VBI lib. Binary
+ * compatibility is guaranteed for the same minor and maint. versions if the
+ * major version is fixed.
+ *
  */
 void vbiInit(struct vb_config *config)
 {
@@ -143,7 +188,8 @@ void vbiInit(struct vb_config *config)
 	 * validate the vbi version; minor and maintenance should be backward
 	 * compatible.
 	 */
-	if (config->major < vbiVersionMajor)
+	if ((config->major != vbiVersionMajor) ||
+					 (config->minor < vbiVersionMinor))
 		vbiPanic("Invalid vbi version");
 
 	wrhvVbConfig = config;
-- 
1.6.5.2

