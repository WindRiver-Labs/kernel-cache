From 580875bbc0e2f79f043d4d665c81300382d3ac82 Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
Date: Fri, 19 Feb 2010 08:01:33 -0500
Subject: [PATCH] [MILS] sbc8548 basic board support

Add support for Wind River SBC8548 with only minimum functionality.
Currently only the serial and network are supported.

The chosen node is needed to enable early console.

Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/powerpc/boot/dts/sbc8548.dts          |    3 +
 arch/powerpc/platforms/85xx/Kconfig        |    7 +
 arch/powerpc/platforms/85xx/Makefile       |    1 +
 arch/powerpc/platforms/85xx/wrhv_sbc8548.c |  171 ++++++++++++++++++++++++++++
 include/vbi/vdk_interface.h                |   10 ++
 5 files changed, 192 insertions(+), 0 deletions(-)
 create mode 100644 arch/powerpc/platforms/85xx/wrhv_sbc8548.c

diff --git a/arch/powerpc/boot/dts/sbc8548.dts b/arch/powerpc/boot/dts/sbc8548.dts
index 333552b..ffafcf2 100644
--- a/arch/powerpc/boot/dts/sbc8548.dts
+++ b/arch/powerpc/boot/dts/sbc8548.dts
@@ -392,4 +392,7 @@
 				  0x0 0x08000000>;
 		};
 	};
+	chosen {
+			linux,stdout-path = &serial0;
+	};
 };
diff --git a/arch/powerpc/platforms/85xx/Kconfig b/arch/powerpc/platforms/85xx/Kconfig
index 978fdf7..bf0217b 100644
--- a/arch/powerpc/platforms/85xx/Kconfig
+++ b/arch/powerpc/platforms/85xx/Kconfig
@@ -122,6 +122,13 @@ config WRHV_8572
 	select FSL_ULI1575 
 	help
 
+config WRHV_SBC8548
+	bool "WindRiver SBC8548 (HV)"
+	depends on WRHV_MILS
+	help
+	  This option enables support for the Wind River SBC8548
+	  Hypervisor enabled board.
+
 endif # MPC85xx
 
 config TQM85xx
diff --git a/arch/powerpc/platforms/85xx/Makefile b/arch/powerpc/platforms/85xx/Makefile
index 3b971e3..813158e 100644
--- a/arch/powerpc/platforms/85xx/Makefile
+++ b/arch/powerpc/platforms/85xx/Makefile
@@ -15,3 +15,4 @@ obj-$(CONFIG_SBC8560)     += sbc8560.o
 obj-$(CONFIG_SBC8548)     += sbc8548.o
 obj-$(CONFIG_KSI8560)	  += ksi8560.o
 obj-$(CONFIG_WRHV_8572)	  += wrhv_8572ds.o
+obj-$(CONFIG_WRHV_SBC8548) += wrhv_sbc8548.o
diff --git a/arch/powerpc/platforms/85xx/wrhv_sbc8548.c b/arch/powerpc/platforms/85xx/wrhv_sbc8548.c
new file mode 100644
index 0000000..f91a3fa
--- /dev/null
+++ b/arch/powerpc/platforms/85xx/wrhv_sbc8548.c
@@ -0,0 +1,171 @@
+/*
+ * Wind River SBC8548 HV setup and early boot code.
+ *
+ * Copyright 2010 Wind River Systems Inc.
+ *
+ * Based largely on the sbc8548 and 8572 support - Copyright 2007
+ * Wind River Systems.
+ *
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/stddef.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/reboot.h>
+#include <linux/pci.h>
+#include <linux/kdev_t.h>
+#include <linux/major.h>
+#include <linux/console.h>
+#include <linux/delay.h>
+#include <linux/seq_file.h>
+#include <linux/initrd.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/fsl_devices.h>
+#include <linux/of_platform.h>
+
+#include <asm/system.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+#include <asm/atomic.h>
+#include <asm/time.h>
+#include <asm/io.h>
+#include <asm/machdep.h>
+#include <asm/ipic.h>
+#include <asm/pci-bridge.h>
+#include <asm/irq.h>
+#include <mm/mmu_decl.h>
+#include <asm/prom.h>
+#include <asm/udbg.h>
+#include <asm/mpic.h>
+#include <asm/wrhv.h>
+
+#include <sysdev/fsl_soc.h>
+#include <sysdev/fsl_pci.h>
+#define CPU_FREQ 33333333 /* WRHV CPU frequency */
+#define PROC_FREQ 50000000 /* CPU Freq */
+#define PROC_DIV 16  /* Time base divisor */
+#define LOOP_PER_JIF 2662400 /* Loops per jiffy */
+
+extern struct vb_config *wr_config;
+extern struct vb_status *wr_status;
+extern struct vb_control *wr_control;
+
+static void __init wrhv_sbc8548_setup_freq(void)
+{
+	wrhv_cpu_freq = CPU_FREQ;
+	ppc_proc_freq = PROC_FREQ;
+	ppc_tb_freq = ppc_proc_freq / PROC_DIV;
+	loops_per_jiffy = LOOP_PER_JIF;
+}
+
+static void __init wrhv_sbc8548_map_config(void)
+{
+	wr_config = (struct vb_config *) 0xf0000000;
+	wr_control = wr_config->vb_control;
+	wr_status = wr_config->vb_status;
+
+	wrhv_mapping(); /* Map VB_CONFIG structure */
+	vbi_init(wr_config);
+
+	strncpy(cmd_line, VBI_BOOTLINE_ADDR_GET(), VB_MAX_BOOTLINE_LENGTH - 1);
+	cmd_line[VB_MAX_BOOTLINE_LENGTH - 1] = 0;
+}
+
+
+#ifndef CONFIG_WRHV_MILS
+static void __init sbc8548_pic_init(void)
+{
+	wrhv_init_irq();
+}
+#endif
+
+/*
+ * Setup the architecture
+ */
+static void __init sbc8548_setup_arch(void)
+{
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
+	if (ppc_md.progress)
+		ppc_md.progress("sbc8548_setup_arch()", 0);
+	wrhv_sbc8548_setup_freq();
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci") {
+		if (of_device_is_compatible(np, "fsl,mpc8540-pci") ||
+		    of_device_is_compatible(np, "fsl,mpc8548-pcie")) {
+			struct resource rsrc;
+			of_address_to_resource(np, 0, &rsrc);
+			if ((rsrc.start & 0xfffff) == 0x8000)
+				fsl_add_bridge(np, 1);
+			else
+				fsl_add_bridge(np, 0);
+		}
+	}
+#endif
+}
+
+static void sbc8548_show_cpuinfo(struct seq_file *m)
+{
+	uint memsize = total_memory;
+
+	seq_printf(m, "Vendor\t\t: Wind River\n");
+	/* Display the amount of memory */
+	seq_printf(m, "Memory\t\t: %d MB\n", memsize / (1024 * 1024));
+}
+
+static struct of_device_id __initdata of_bus_ids[] = {
+	{ .name = "soc", },
+	{ .type = "soc", },
+	{ .compatible = "simple-bus", },
+	{},
+};
+
+static int __init declare_of_platform_devices(void)
+{
+	of_platform_bus_probe(NULL, of_bus_ids, NULL);
+
+	return 0;
+}
+machine_device_initcall(sbc8548, declare_of_platform_devices);
+
+/*
+ * Called very early, device-tree isn't unflattened
+ */
+static int __init sbc8548_probe(void)
+{
+        unsigned long root = of_get_flat_dt_root();
+
+	wrhv_sbc8548_map_config();
+        return of_flat_dt_is_compatible(root, "SBC8548");
+}
+
+define_machine(sbc8548) {
+	.name		= "WRHV_SBC8548",
+	.probe		= sbc8548_probe,
+	.setup_arch	= sbc8548_setup_arch,
+#ifdef CONFIG_WRHV_MILS
+	.init_IRQ	= mils_pic_init,
+	.get_irq	= mils_vioapic_get_irq,
+#else
+	.init_IRQ	= sbc8548_pic_init,
+	.get_irq	= wrhv_vioapic_get_irq,
+	.power_save	= wrhv_power_save,
+	.earlycon_setup = wrhv_earlycon_setup,
+#endif
+	.show_cpuinfo	= sbc8548_show_cpuinfo,
+	.restart	= wrhv_restart,
+#ifdef CONFIG_PCI
+	.pcibios_fixup_bus	= fsl_pcibios_fixup_bus,
+#endif
+	.calibrate_decr = wrhv_calibrate_decr,
+	.progress	= udbg_progress,
+};
diff --git a/include/vbi/vdk_interface.h b/include/vbi/vdk_interface.h
index 714b57b..33d29b5 100644
--- a/include/vbi/vdk_interface.h
+++ b/include/vbi/vdk_interface.h
@@ -513,6 +513,16 @@ static inline int32_t vbi_get_vioapic_vec(uint32_t irq)
 	return 0;
 }
 
+static inline void mils_pic_init(void)
+{
+	return;
+}
+
+static inline unsigned int mils_vioapic_get_irq(void)
+{
+	return 0;
+}
+
 static inline int32_t vbi_unmask_vioapic_irq(uint32_t irq)
 {
 	return 0;
-- 
1.7.0

