From 4662cdf723b6d1d0cf1bc2ab52ac524eff805484 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 12:35:13 -0500
Subject: [PATCH 76/80] vbiVioapicIntUnmask --> vbi_unmask_vioapic_irq

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/x86/kernel/vbi/wrhv.c |   14 +++++++-------
 include/vbi/vbi.h          |    4 ++--
 kernel/vbi/io_apic.c       |    8 ++++----
 kernel/vbi/wrhv.c          |    4 ++--
 4 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 7282994..7bc85e4 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -763,7 +763,7 @@ late_initcall(wrhv_late_init);
 static inline void wrhv_umask_timer_for_vcore(void)
 {
        /* unmask hypervisor-provided timer interrupt for vcore */
-       vbiVioapicIntUnmask(0);
+       vbi_unmask_vioapic_irq(0);
 }
 
 static inline void wrhv_mask_timer_for_vcore(void)
@@ -807,13 +807,13 @@ EXPORT_SYMBOL(wrhv_calibrate_smp_cpus);
 static void inline wrhv_umask_IPIs_for_vcore(void)
 {
 	/* unmask ipi interrupt for vcore */
-	vbiVioapicIntUnmask(WRHV_IPI_RESCHED);
-	vbiVioapicIntUnmask(WRHV_IPI_INV_TLB);
-	vbiVioapicIntUnmask(WRHV_IPI_FUNC_CALL);
-	vbiVioapicIntUnmask(WRHV_IPI_FUNC_CALL_SINGLE);
+	vbi_unmask_vioapic_irq(WRHV_IPI_RESCHED);
+	vbi_unmask_vioapic_irq(WRHV_IPI_INV_TLB);
+	vbi_unmask_vioapic_irq(WRHV_IPI_FUNC_CALL);
+	vbi_unmask_vioapic_irq(WRHV_IPI_FUNC_CALL_SINGLE);
 #ifdef CONFIG_WRHV_X86_HRTIMERS
 	if (enable_hrtimer)
-		vbiVioapicIntUnmask(DUMMY_TIMER_INT);
+		vbi_unmask_vioapic_irq(DUMMY_TIMER_INT);
 #endif
 }
 
@@ -824,7 +824,7 @@ static void x86_wrhv_mask_irq(void *irq)
 
 static void x86_wrhv_unmask_irq(void *irq)
 {
-	vbiVioapicIntUnmask((unsigned int)irq);
+	vbi_unmask_vioapic_irq((unsigned int)irq);
 }
 
 /* Currently all the external interrupts are routed to cpu 0 and
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index c0757bb..0f7467f 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -82,7 +82,7 @@ various data structures.
  * 
  * vbi_mask_vioapic_irq()
  * 
- * vbiVioapicIntUnmask()
+ * vbi_unmask_vioapic_irq()
  *
  */
 #define VBI_VIOAPIC_BASE_GET()		\
@@ -523,7 +523,7 @@ extern void vbi_idle(uint64_t);
 extern void *vbi_get_vioapic_addr(void);
 extern vbiStatus_t vbiVioapicVectorSet(vbiIrq_t irq, vbiVector_t vector); 
 extern vbiVector_t vbiVioapicVectorGet(vbiIrq_t irq);
-extern vbiStatus_t vbiVioapicIntUnmask(vbiIrq_t irq);
+extern vbiStatus_t vbi_unmask_vioapic_irq(vbiIrq_t irq);
 extern vbiStatus_t vbi_mask_vioapic_irq(vbiIrq_t irq);
 extern vbiStatus_t vbi_ack_vioapic_irq(vbiIrq_t irq);
 extern vbiStatus_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter,
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index aefef88..529c426 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -206,7 +206,7 @@ vbiVector_t vbiVioapicVectorGet(vbiIrq_t irq)
 }
 
 /*
- * vbiVioapicIntUnmask - Unmask an irq for a virtual board
+ * vbi_unmask_vioapic_irq - Unmask an irq for a virtual board
  *
  * This routine enables the interrupt vector that matches the specified IRQ at
  * the VIOAPIC redirection table. This routine makes a hypercall in order to
@@ -216,7 +216,7 @@ vbiVector_t vbiVioapicVectorGet(vbiIrq_t irq)
  * specified IRQ directed to the calling virtual Core.
  *
  */
-vbiStatus_t vbiVioapicIntUnmask(vbiIrq_t irq)
+vbiStatus_t vbi_unmask_vioapic_irq(vbiIrq_t irq)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 
@@ -230,7 +230,7 @@ vbiStatus_t vbiVioapicIntUnmask(vbiIrq_t irq)
 
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_UNMASK, irq, 0, 0);
 }
-EXPORT_SYMBOL(vbiVioapicIntUnmask);
+EXPORT_SYMBOL(vbi_unmask_vioapic_irq);
 
 /*
  * vbi_mask_vioapic_irq - Mask an irq
@@ -239,7 +239,7 @@ EXPORT_SYMBOL(vbiVioapicIntUnmask);
  * the VIOAPIC for the running core. The mask bit for the IRQ entry in the
  * VIOAPIC redirection table is set to 1. After calling this function hypervisor
  * will deliver this IRQ only if this IRQ is enabled by calling
- * vbiVioapicIntUnmask().
+ * vbi_unmask_vioapic_irq().
  *
  */
 vbiStatus_t vbi_mask_vioapic_irq(vbiIrq_t irq)
diff --git a/kernel/vbi/wrhv.c b/kernel/vbi/wrhv.c
index ea8e4b8..fd18c9d 100644
--- a/kernel/vbi/wrhv.c
+++ b/kernel/vbi/wrhv.c
@@ -25,7 +25,7 @@
 
 static void wrhv_enable_irq(unsigned int irq)
 {
-	vbiVioapicIntUnmask(irq);
+	vbi_unmask_vioapic_irq(irq);
 }
 
 static void wrhv_disable_irq(unsigned int irq)
@@ -54,7 +54,7 @@ static void wrhv_mask_irq(unsigned int irq)
 static void wrhv_unmask_irq(unsigned int irq)
 {
 	if (irq != 0)
-		vbiVioapicIntUnmask(irq);
+		vbi_unmask_vioapic_irq(irq);
 }
 
 struct irq_chip wrhv_irq_chip = {
-- 
1.6.5.2

