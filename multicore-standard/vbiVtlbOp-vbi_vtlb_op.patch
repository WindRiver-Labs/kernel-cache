From 27763845c6a4cc41938d05b4ea3336558120e53a Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 11:16:52 -0500
Subject: [PATCH 46/80] vbiVtlbOp --> vbi_vtlb_op

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/x86/kernel/vbi/syscalls.S |    6 +++---
 arch/x86/kernel/vbi/wrhv.c     |    6 +++---
 include/vbi/syscall.h          |    2 +-
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index 33f7c1d..428868e 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -53,7 +53,7 @@
 .globl vbi_vcore_irq_redirect 
 .globl vbi_vb_read_reg 
 .globl vbi_vb_write_reg 
-.globl vbiVtlbOp 
+.globl vbi_vtlb_op 
 .text
 .balign 16
 
@@ -652,7 +652,7 @@ vbi_vcore_irq_redirect:
 	ret
 
 /*
- * vbiVtlbOp - execute a specified VTLB operation
+ * vbi_vtlb_op - execute a specified VTLB operation
  *
  * This system call executes the specified VTLB operation. The possible VTLB
  * operations are:
@@ -667,7 +667,7 @@ vbi_vcore_irq_redirect:
  *
  * Returns: OK or ERROR if the VTLB operation has failed
  */
-vbiVtlbOp:
+vbi_vtlb_op:
 	movl $VBI_SYS_vtlb_op, %eax
 	pushl $4
 	vmcall
diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 84f9ce2..5daa921 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -485,7 +485,7 @@ void wrhv_vtlb_op(unsigned int op, unsigned long arg1,
 	int i;
 
 	if (!VTLB_GET_CPU_VAR(is_vtlb_ops_cache_enabled))
-		vbiVtlbOp (op, arg1, arg2, arg3);
+		vbi_vtlb_op(op, arg1, arg2, arg3);
 	else {
 		local_irq_save(flags);
 		i = VTLB_GET_CPU_VAR(vtlb_ctrl).vtlb_ops_ix;
@@ -500,7 +500,7 @@ void wrhv_vtlb_op(unsigned int op, unsigned long arg1,
 		 */
 
 		if (VTLB_GET_CPU_VAR(vtlb_ctrl).vtlb_ops_ix == (VBI_VTLB_OP_MAX_OPS - 1))
-			vbiVtlbOp (VBI_VTLB_OP_FLUSH_OPS, 0, 0, 0);
+			vbi_vtlb_op(VBI_VTLB_OP_FLUSH_OPS, 0, 0, 0);
 		else
 			VTLB_GET_CPU_VAR(vtlb_ctrl).vtlb_ops_ix += 1;
 
@@ -714,7 +714,7 @@ static void wrhv_init_vtlb_per_cpu(void)
 	else
 		VTLB_GET_CPU_VAR(vtlb_ctrl).mode = VBI_VTLB_OPTIM_OPTION;
 
-	vbiVtlbOp(VBI_VTLB_OP_INIT, __pa_symbol(&VTLB_GET_CPU_VAR(vtlb_ctrl)),
+	vbi_vtlb_op(VBI_VTLB_OP_INIT, __pa_symbol(&VTLB_GET_CPU_VAR(vtlb_ctrl)),
 		 0, 0);
 
 	if (VTLB_GET_CPU_VAR(vtlb_ctrl).mode & VBI_VTLB_CR3_CACHE_ENABLED)
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 371ac79..f7e9480 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -91,7 +91,7 @@ extern asmlinkage int vbi_ctx_ctl(unsigned operation, unsigned arg1,
 				unsigned arg2);
 extern asmlinkage int32_t vbi_vb_mgmt(uint32_t cmd, uint32_t boardId,
 				int32_t *outError, uint32_t flags, void * ctl);
-extern asmlinkage int vbiVtlbOp(unsigned int op, unsigned long arg1,
+extern asmlinkage int vbi_vtlb_op(unsigned int op, unsigned long arg1,
 			  	unsigned long arg2, unsigned long arg3);
 
 /*
-- 
1.6.5.2

