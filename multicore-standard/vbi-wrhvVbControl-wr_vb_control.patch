From 888c67ee0feb82ad9b3c31bcd77ff1afc4e850d7 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Tue, 1 Dec 2009 21:27:32 -0500
Subject: [PATCH 03/43] vbi: wrhvVbControl --> wr_vb_control

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/include/asm/arch_vbi.h |   20 ++++++++++----------
 arch/powerpc/kernel/vbi/syscalls.S  |   12 ++++++------
 include/vbi/compat.h                |    1 +
 include/vbi/interface.h             |    4 ++--
 include/vbi/vbi.h                   |    4 ++--
 kernel/vbi/lib.c                    |    6 +++---
 kernel/vbi/wrhv.c                   |    2 +-
 7 files changed, 25 insertions(+), 24 deletions(-)

diff --git a/arch/powerpc/include/asm/arch_vbi.h b/arch/powerpc/include/asm/arch_vbi.h
index 3a8b408..bfd023a 100644
--- a/arch/powerpc/include/asm/arch_vbi.h
+++ b/arch/powerpc/include/asm/arch_vbi.h
@@ -503,7 +503,7 @@ typedef struct
  * VBI_INT_VCORE_LOCK - lock a core's interrupts macro
  *
  * This macro disables the currently running core interrupts and returns the
- * previous interrupts state. The interrupt status field in wrhvVbControl
+ * previous interrupts state. The interrupt status field in wr_vb_control
  * structure at offset VB_CONTROL_INT_DISABLE is set to -1 and the previous
  * interrupts state is loaded to the register passed in as the first argument to
  * this macro.
@@ -513,7 +513,7 @@ typedef struct
  * VBI_INT_VCORE_LOCK (reg0, reg1, reg2)
  * {
  *	load -1 to reg1
- *	load wrhvVbControl address to reg2
+ *	load wr_vb_control address to reg2
  *       read the previous value and store in reg0
  *	Disable interrupts by loading reg1 to VB_CONTROL_INT_DISABLE(reg2)
  * }
@@ -524,8 +524,8 @@ typedef struct
  */
 #define VBI_INT_VCORE_LOCK(reg0, reg1, reg2)		\
 	li reg1, -1;					\
-	lis reg2, HIADJ(wrhvVbControl);			\
-	lwz reg2, LO(wrhvVbControl)(reg2);		\
+	lis reg2, HIADJ(wr_vb_control);			\
+	lwz reg2, LO(wr_vb_control)(reg2);		\
 	lwz reg0, VB_CONTROL_INT_DISABLE(reg2);		\
 	stw reg1, VB_CONTROL_INT_DISABLE(reg2)
 
@@ -547,7 +547,7 @@ typedef struct
  * VBI_INT_VCORE_UNLOCK (reg0, reg1)
  * {
  *	load "0" to reg1
- *	load address of wrhvVbControl in reg0
+ *	load address of wr_vb_control in reg0
  *	store reg1 to VB_CONTROL_INT_DISABLE(reg0)
  *
  * checkstatus:
@@ -561,8 +561,8 @@ typedef struct
  *
  */
 #define VBI_INT_VCORE_UNLOCK(reg0, reg1);			\
-	lis	reg0, HIADJ(wrhvVbControl);			\
-	lwz	reg0, LO(wrhvVbControl)(reg0);			\
+	lis	reg0, HIADJ(wr_vb_control);			\
+	lwz	reg0, LO(wr_vb_control)(reg0);			\
 	li	reg1, 0;					\
 	stw	reg1, VB_CONTROL_INT_DISABLE(reg0);		\
 checkIntVcorePending:						\
@@ -589,7 +589,7 @@ endIntVcoreLock:
  *
  * VBI_INT_VCORE_STATE_GET (reg0)
  * {
- *       Load the interrupt status from wrhvVbControl to reg0
+ *       Load the interrupt status from wr_vb_control to reg0
  * }
  *
  *
@@ -624,8 +624,8 @@ endIntVcoreLock:
  */
 
 #define VBI_CNTRL_ADDR_GET(reg)			\
-	lis reg, HIADJ(wrhvVbControl);		\
-	lwz reg, LO(wrhvVbControl)(reg)
+	lis reg, HIADJ(wr_vb_control);		\
+	lwz reg, LO(wr_vb_control)(reg)
 
 /*
  * VBI_STATUS_ADDR_GET - Get virtual core status structure address
diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index a826257..a6d1da7 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -412,8 +412,8 @@ FUNC_LABEL(vbi_vcore_irq_unlock)
 #ifdef CONFIG_PPC85xx_VT_MODE
 	wrteei	1
 #else
-	lis	p0, HIADJ(wrhvVbControl)
-	lwz	p0, LO(wrhvVbControl)(p0)
+	lis	p0, HIADJ(wr_vb_control)
+	lwz	p0, LO(wr_vb_control)(p0)
 	li	p1, 0
 	stw	p1, VB_CONTROL_INT_DISABLE(p0)
 #endif
@@ -448,8 +448,8 @@ FUNC_LABEL(vbi_vcore_irq_lock)
 	wrteei	0
 #else
 	li	p1, -1
-	lis	p2, HIADJ(wrhvVbControl)
-	lwz	p2, LO(wrhvVbControl)(p2)
+	lis	p2, HIADJ(wr_vb_control)
+	lwz	p2, LO(wr_vb_control)(p2)
 	lwz	p0, VB_CONTROL_INT_DISABLE(p2)
 	stw	p1, VB_CONTROL_INT_DISABLE(p2)
 #endif
@@ -477,8 +477,8 @@ return_disabled:
 	li	r3, -1
 	blr
 #else
-	lis	p2, HIADJ(wrhvVbControl)
-	lwz	p2, LO(wrhvVbControl)(p2)
+	lis	p2, HIADJ(wr_vb_control)
+	lwz	p2, LO(wr_vb_control)(p2)
 	lwz	p0, VB_CONTROL_INT_DISABLE(p2)
 	blr
 #endif
diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index 7de042b..bede073 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -50,6 +50,7 @@
  * struct fields and similar
  */
 #define wrhvVbStatus		wr_vb_status
+#define wrhvVbControl		wr_vb_control
 
 #define memoryAliasSize		mem_alias_size
 #define memoryAliasAddress	mem_alias_addr
diff --git a/include/vbi/interface.h b/include/vbi/interface.h
index 216423e..7e4ceac 100644
--- a/include/vbi/interface.h
+++ b/include/vbi/interface.h
@@ -50,7 +50,7 @@ The VBI library provides a initialization function vbi_init() to ensures
 that Hypervisor version number is compatible with the VBI library in
 use. If the versions match then the configuration, status and control
 pointers are stored respectively to wrhvVbConfig, wrhvStatus and
-wrhvVbControl.
+wr_vb_control.
 
 Therefore a virtual board must always call vbi_init() before accessing
 any data provided by Hypervisor nor send a hypercall to it. Refer to to
@@ -59,7 +59,7 @@ information.
 
 Once the VBI library is initialized the virtual board should employ the
 provided macros in order to access the fieds in wrhVbConfig,
-wr_vb_status and wrhvVbControl data structures. Accessing these
+wr_vb_status and wr_vb_control data structures. Accessing these
 structures via the VBI function guaranties source level compatibily
 between VBI versions.
 
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 035d4f8..4cf8df5 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -43,7 +43,7 @@ various data structures.
  * structure.
  *
  */
-#define VBI_CNTRL_ADDR_GET()        (wrhvVbControl)
+#define VBI_CNTRL_ADDR_GET()        (wr_vb_control)
 
 #define VBI_INT_STATE_GET()             \
         ((VBI_CNTRL_ADDR_GET()->irq_disable) == -1 ? TRUE: FALSE)
@@ -514,7 +514,7 @@ struct vbi_clk_hook
 
 extern struct vb_config *wrhvVbConfig;
 extern struct vb_status *wr_vb_status;
-extern struct vb_control *wrhvVbControl;
+extern struct vb_control *wr_vb_control;
 extern int32_t wrhvVbIntNested;
 extern void vbi_init(struct vb_config *config);
 extern void vbi_exc_stub(void);
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index b705aab..09bf1c6 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -108,7 +108,7 @@ struct vb_config *wrhvVbConfig;	/* The address of the core's Config area
 				 * as the first parameter upon startup */
 EXPORT_SYMBOL(wrhvVbConfig);
 
-struct vb_control *wrhvVbControl;/* The address of the core's Control area */
+struct vb_control *wr_vb_control;/* The address of the core's Control area */
 
 struct vb_status *wr_vb_status;	/* The address of the core's Status area */
 
@@ -129,7 +129,7 @@ int32_t wrhvVbIntNested;	/* Used by VBI IRQ/exception management */
  *
  * Configuration page base address is stored in wrhvVbConfig
  * Status page base address is stored in wr_vb_status
- * Control page base address is stored in wrhvVbControl
+ * Control page base address is stored in wr_vb_control
  *
  * The user must ensure that this memory regions are mapped if the MMU is
  * turn-on.
@@ -193,7 +193,7 @@ void vbi_init(struct vb_config *config)
 		vbi_panic("Invalid vbi version");
 
 	wrhvVbConfig = config;
-	wrhvVbControl = wrhvVbConfig->vbControl;
+	wr_vb_control = wrhvVbConfig->vbControl;
 	wr_vb_status = wrhvVbConfig->vbStatus;
 
 }
diff --git a/kernel/vbi/wrhv.c b/kernel/vbi/wrhv.c
index 4f758d7..43d166d 100644
--- a/kernel/vbi/wrhv.c
+++ b/kernel/vbi/wrhv.c
@@ -22,7 +22,7 @@
 #include <linux/smp.h>
 #include <vbi/vbi.h>
 
-#define VIOAPIC_BASE_ADDR	(&wrhvVbControl->vIoapic)
+#define VIOAPIC_BASE_ADDR	(&wr_vb_control->vIoapic)
 
 static void wrhv_enable_irq(unsigned int irq)
 {
-- 
1.6.5.2

