From 5d203ce9bc8d2285ecf66048884bb02579e9e979 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Mon, 22 Mar 2010 16:30:03 -0400
Subject: [PATCH] MILS: add in new syscalls for x86

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/x86/kernel/vbi/vdk_syscalls.S |  175 +++++++++++++++++++++++++++++++++++-
 1 files changed, 173 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kernel/vbi/vdk_syscalls.S b/arch/x86/kernel/vbi/vdk_syscalls.S
index 274594b..50ffd81 100644
--- a/arch/x86/kernel/vbi/vdk_syscalls.S
+++ b/arch/x86/kernel/vbi/vdk_syscalls.S
@@ -20,16 +20,187 @@
 #include <asm/vbi.h>
 #include <vbi/syscall.h>
 
-/* globals */
-.globl vdk_virt_to_phys
 .text
 .balign 16
 
 #define VBI_STACK_FRAME_SIZE	4
 
+.globl vdk_virt_to_phys
 vdk_virt_to_phys:
         movl $VDK_SYS_virtToPhys, %eax
         push $2
         vmcall
         addl $VBI_STACK_FRAME_SIZE, %esp
         ret
+
+/*
+ *
+ * vdk_port_buf_release - release a buffer from a port
+ *
+ * This system call releases the specified buffer(s) from the specified port
+ *
+ */
+.globl vdk_port_buf_release
+vdk_port_buf_release:
+        movl    $VBI_SYS_portBufRelease,%eax /* system call number */
+        push    $3                           /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_schedule_name_to_id - return the schedule ID of the schedule <name>
+ *
+ * This system call returns the schedule ID given the schedule name
+ *
+ */
+.globl vdk_schedule_name_to_id
+vdk_schedule_name_to_id:
+        movl    $VBI_SYS_scheduleNameToId,%eax /* system call number */
+        push    $2                           /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_schedule_set - set the current schedule to schedule <name>
+ *
+ * This system call sets schedule <name> to current schedule
+ *
+ */
+.globl vdk_schedule_set
+vdk_schedule_set:
+        movl    $VBI_SYS_scheduleSet,%eax /* system call number */
+        push    $2                           /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_sec_audit_event_inject - inject a security Audit event
+ *
+ */
+.globl vdk_sec_audit_event_inject
+vdk_sec_audit_event_inject:
+        movl    $VBI_SYS_secAuditEventInject,%eax /* system call number */
+        push    $3                                /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_sec_audit_event_collect - Collect Security Audit events
+ *
+ * This system call collects security audit events from a VB log.
+ *
+ */
+.globl vdk_sec_audit_event_collect
+vdk_sec_audit_event_collect:
+        movl    $VBI_SYS_secAuditEventCollect,%eax /* system call number */
+        push    $3                                 /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_safe_crit_event_inject - Inject a Safety Critical event
+ *
+ * This system call forces injection of a Safety Critical event.
+ *
+ */
+.globl vdk_safe_crit_event_inject
+vdk_safe_crit_event_inject:
+	movl $VBI_SYS_safeCritEventInject, %eax
+	pushl $1
+	vmcall
+	addl $VBI_STACK_FRAME_SIZE, %esp
+	ret
+
+/*
+ *
+ * vdk_safe_crit_event_collect - Collect Security Audit events
+ *
+ * This system call collects security audit events from a VB log.
+ *
+ */
+.globl vdk_safe_crit_event_collect
+vdk_safe_crit_event_collect:
+        movl    $VBI_SYS_safeCritEventCollect,%eax /* system call number */
+        push    $3                                /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_port_send - send message to a port
+ *
+ * This system call sends messages to the specified port
+ *
+ */
+.globl vdk_port_send
+vdk_port_send:
+        movl    $VBI_SYS_portSend,%eax /* system call number */
+        push    $5                     /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_port_get_recv_buf - receive from a port
+ *
+ * This system call gets a buffer from the specified port
+ *
+ */
+.globl vdk_port_get_recv_buf
+vdk_port_get_recv_buf:
+        movl    $VBI_SYS_portGetRecvBuf,%eax /* system call number */
+        push    $2                           /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdk_int_controller_done - signal completion of processing by virtual int controller
+ *
+ * This system notifies the hypervisor that the virtual interrupt controller
+ * in the virtual board has finished procssing the information in the
+ * virtual interrupt controller registers, and requires a refresh.
+ *
+ */
+.globl vdk_int_controller_done
+vdk_int_controller_done:
+        movl    $VBI_SYS_int_controller_done,%eax /* system call number */
+        push    $0                                /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
+/*
+ *
+ * vdkBspIoctl - bsp ioctl call
+ *
+ * This system call interfaces to the Board Support Package
+ * I/O drivers etc
+ *
+ * Knwon BSP ioctl commands:
+ *       VDK_BSPIOCTL_ENABLE_INT   /@ Enable HW interrupt @/
+ *       VDK_BSPIOCTL_DISABLE_INT  /@ Disable HW interrupt@/
+ *       VDK_BSPIOCTL_RESET        /@ Reset HW device     @/
+ *
+ */
+.globl vdkBspIoctl
+vdkBspIoctl:
+        movl    $VBI_SYS_bspIoctl,%eax          /* system call number */
+        push    $8                              /* number of arguments */
+        vmcall
+        addl    $VBI_STACK_FRAME_SIZE, %esp     /* adjust stack */
+        ret
+
-- 
1.7.0

