From dc7c71bccbc8c5db586557dc478c3fff975d4d9d Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 2 Dec 2009 11:58:26 -0500
Subject: [PATCH 07/43] vbi: vbiIrq_t --> uint32_t

for i in `git grep -l vbiIrq_t` ; do mv $i $i~ ; cat $i~|sed 's/vbiIrq_t/uint32_t/' > $i ; done

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/vbi/compat.h    |    1 +
 include/vbi/interrupt.h |    4 ++--
 include/vbi/private.h   |    4 ++--
 include/vbi/types.h     |    1 -
 include/vbi/vbi.h       |   18 +++++++++---------
 kernel/vbi/interrupt.c  |    2 +-
 kernel/vbi/io_apic.c    |   16 ++++++++--------
 7 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index f0e6465..d2068ab 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -46,6 +46,7 @@
 
 #define VB_TIMESTAMP		uint64_t
 #define vbiStatus_t		int32_t
+#define vbiIrq_t		uint32_t
 
 /*
  * struct fields and similar
diff --git a/include/vbi/interrupt.h b/include/vbi/interrupt.h
index 1cc1440..514d171 100644
--- a/include/vbi/interrupt.h
+++ b/include/vbi/interrupt.h
@@ -27,12 +27,12 @@ interrupts configuration data.
 #ifndef	_ASMLANGUAGE
 
 #ifdef CONFIG_WRHV_MILS
-static inline vbiIrq_t vbi_find_irq(char * irq_name, int32_t irq_dir)
+static inline uint32_t vbi_find_irq(char * irq_name, int32_t irq_dir)
 { 
 	return VBI_INVALID_IRQ;
 }
 #else
-extern vbiIrq_t vbi_find_irq (char * irq_name, int32_t irq_dir);
+extern uint32_t vbi_find_irq(char * irq_name, int32_t irq_dir);
 #endif /* CONFIG_WRHV_MILS */
 #endif /* _ASMLANGUAGE */
 
diff --git a/include/vbi/private.h b/include/vbi/private.h
index 1819c55..1d5c1ac 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -26,10 +26,10 @@
 #ifndef _ASMLANGUAGE
 
 /* private ioapic operator */
-extern asmlinkage int32_t vbi_io_apic_op(uint32_t ioctl, vbiIrq_t irq, uint32_t filter, vbiVb_t vbId);
+extern asmlinkage int32_t vbi_io_apic_op(uint32_t ioctl, uint32_t irq, uint32_t filter, vbiVb_t vbId);
 
 /* private interrupt redirection operator */
-extern asmlinkage int32_t vbi_vcore_irq_redirect(vbiIrq_t irq, vbiCore_t CoreId);
+extern asmlinkage int32_t vbi_vcore_irq_redirect(uint32_t irq, vbiCore_t CoreId);
 
 /* Name service private operator */
 extern asmlinkage int32_t vbi_ns_op(uint32_t op, char* name, uint32_t rev, 
diff --git a/include/vbi/types.h b/include/vbi/types.h
index 446bbb2..5e5b136 100644
--- a/include/vbi/types.h
+++ b/include/vbi/types.h
@@ -42,7 +42,6 @@ typedef void *vbiGuestPhysAddr_t;
 typedef int32_t vbiIntState_t;
 typedef int32_t vbiMemAttr_t;
 typedef int32_t vbiVector_t;
-typedef uint32_t vbiIrq_t;
 typedef uint32_t vbiCoreSet_t;
 
 #endif	/* _ASMLANGUAGE */
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 2e91449..40754a8 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -526,17 +526,17 @@ extern void vbi_exc_stub(void);
 extern void ASSERT_FN(const char *, const char *, int);
 extern void vbi_idle(uint64_t);
 extern void *vbi_get_vioapic_addr(void);
-extern int32_t vbi_set_vioapic_vec(vbiIrq_t irq, vbiVector_t vector); 
-extern vbiVector_t vbi_get_vioapic_vec(vbiIrq_t irq);
-extern int32_t vbi_unmask_vioapic_irq(vbiIrq_t irq);
-extern int32_t vbi_mask_vioapic_irq(vbiIrq_t irq);
-extern int32_t vbi_ack_vioapic_irq(vbiIrq_t irq);
-extern int32_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter,
+extern int32_t vbi_set_vioapic_vec(uint32_t irq, vbiVector_t vector); 
+extern vbiVector_t vbi_get_vioapic_vec(uint32_t irq);
+extern int32_t vbi_unmask_vioapic_irq(uint32_t irq);
+extern int32_t vbi_mask_vioapic_irq(uint32_t irq);
+extern int32_t vbi_ack_vioapic_irq(uint32_t irq);
+extern int32_t vbi_send_vioapic_irq(uint32_t irq, uint32_t filter,
 				      vbiVb_t target);
-extern int32_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter, 
+extern int32_t vbi_send_vioapic_irq(uint32_t irq, uint32_t filter, 
 				     vbiVb_t vb);
-extern int32_t vbi_redir_vioapic_irq(vbiIrq_t irq, vbiCore_t tCore);
-extern int32_t vbi_send_vcore_vioapic_irq (vbiIrq_t irq, vbiCoreSet_t vcoreSet, 
+extern int32_t vbi_redir_vioapic_irq(uint32_t irq, vbiCore_t tCore);
+extern int32_t vbi_send_vcore_vioapic_irq(uint32_t irq, vbiCoreSet_t vcoreSet, 
 					  uint32_t options);
 extern int32_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
diff --git a/kernel/vbi/interrupt.c b/kernel/vbi/interrupt.c
index 7ed4391..ca9e9f7 100644
--- a/kernel/vbi/interrupt.c
+++ b/kernel/vbi/interrupt.c
@@ -43,7 +43,7 @@
  *
  */
 
-vbiIrq_t vbi_find_irq(char *irq_name, int32_t irq_dir)
+uint32_t vbi_find_irq(char *irq_name, int32_t irq_dir)
 {
 	struct vb_config *config = VBI_CONFIG_ADDR_GET();
 	struct vb_int_info *info = config->interruptConfiguration;
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index de5f8c2..f2f9f7e 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -155,7 +155,7 @@ void *vbi_get_vioapic_addr(void)
  * This routine is currently not supported for PPC.
  *
  */
-int32_t vbi_set_vioapic_vec(vbiIrq_t irq, vbiVector_t vector)
+int32_t vbi_set_vioapic_vec(uint32_t irq, vbiVector_t vector)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 
@@ -185,7 +185,7 @@ int32_t vbi_set_vioapic_vec(vbiIrq_t irq, vbiVector_t vector)
  * This routine is currently not supported for PPC
  *
  */
-vbiVector_t vbi_get_vioapic_vec(vbiIrq_t irq)
+vbiVector_t vbi_get_vioapic_vec(uint32_t irq)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 	vbiVector_t vector;
@@ -216,7 +216,7 @@ vbiVector_t vbi_get_vioapic_vec(vbiIrq_t irq)
  * specified IRQ directed to the calling virtual Core.
  *
  */
-int32_t vbi_unmask_vioapic_irq(vbiIrq_t irq)
+int32_t vbi_unmask_vioapic_irq(uint32_t irq)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 
@@ -242,7 +242,7 @@ EXPORT_SYMBOL(vbi_unmask_vioapic_irq);
  * vbi_unmask_vioapic_irq().
  *
  */
-int32_t vbi_mask_vioapic_irq(vbiIrq_t irq)
+int32_t vbi_mask_vioapic_irq(uint32_t irq)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 
@@ -268,7 +268,7 @@ int32_t vbi_mask_vioapic_irq(vbiIrq_t irq)
  * required to be acknowledged.
  *
  */
-int32_t vbi_ack_vioapic_irq(vbiIrq_t irq)
+int32_t vbi_ack_vioapic_irq(uint32_t irq)
 {
 
 	if (irq > VIOAPIC_MAX_REDTABLE_ENTRIES-1)
@@ -318,7 +318,7 @@ int32_t vbi_ack_vioapic_irq(vbiIrq_t irq)
  * VIOAPIC_SEND_NONE	- Ignore this call.
  *
  */
-int32_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter, vbiVb_t target)
+int32_t vbi_send_vioapic_irq(uint32_t irq, uint32_t filter, vbiVb_t target)
 {
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_SEND, irq, filter, target);
 }
@@ -339,7 +339,7 @@ EXPORT_SYMBOL(vbi_send_vioapic_irq);
  * VBI_IOAPICSEND_VCORE_NONE.
  *
  */
-int32_t vbi_send_vcore_vioapic_irq(vbiIrq_t irq, vbiCoreSet_t coreSet,
+int32_t vbi_send_vcore_vioapic_irq(uint32_t irq, vbiCoreSet_t coreSet,
 			uint32_t options)
 {
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_VCORE_SEND, irq, coreSet, options);
@@ -352,7 +352,7 @@ int32_t vbi_send_vcore_vioapic_irq(vbiIrq_t irq, vbiCoreSet_t coreSet,
  * within the same virtual board.
  *
  */
-int32_t vbi_redir_vioapic_irq(vbiIrq_t irq, vbiCore_t core)
+int32_t vbi_redir_vioapic_irq(uint32_t irq, vbiCore_t core)
 {
 	return vbi_vcore_irq_redirect(irq, core);
 }
-- 
1.6.5.2

