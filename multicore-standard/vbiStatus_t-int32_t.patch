From 1da763e5f2869767008e8b09b929874439f73524 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 2 Dec 2009 11:52:09 -0500
Subject: [PATCH 06/43] vbiStatus_t --> int32_t

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/vbi/compat.h  |    1 +
 include/vbi/private.h |    8 +++---
 include/vbi/shmem.h   |    6 ++--
 include/vbi/syscall.h |   52 ++++++++++++++++++++++++------------------------
 include/vbi/types.h   |    1 -
 include/vbi/vbi.h     |   20 +++++++++---------
 kernel/vbi/io_apic.c  |   14 ++++++------
 kernel/vbi/msg.c      |    4 +-
 kernel/vbi/ns.c       |    6 ++--
 kernel/vbi/paddr.c    |    4 +-
 kernel/vbi/shmem.c    |    6 ++--
 11 files changed, 61 insertions(+), 61 deletions(-)

diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index b4fddb2..f0e6465 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -45,6 +45,7 @@
 #define VB_ARCH_STATUS_REGS	struct vb_arch_stat_regs
 
 #define VB_TIMESTAMP		uint64_t
+#define vbiStatus_t		int32_t
 
 /*
  * struct fields and similar
diff --git a/include/vbi/private.h b/include/vbi/private.h
index dfeae33..1819c55 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -26,17 +26,17 @@
 #ifndef _ASMLANGUAGE
 
 /* private ioapic operator */
-extern asmlinkage vbiStatus_t vbi_io_apic_op (uint32_t ioctl, vbiIrq_t irq, uint32_t filter, vbiVb_t vbId);
+extern asmlinkage int32_t vbi_io_apic_op(uint32_t ioctl, vbiIrq_t irq, uint32_t filter, vbiVb_t vbId);
 
 /* private interrupt redirection operator */
-extern asmlinkage vbiStatus_t vbi_vcore_irq_redirect(vbiIrq_t irq, vbiCore_t CoreId);
+extern asmlinkage int32_t vbi_vcore_irq_redirect(vbiIrq_t irq, vbiCore_t CoreId);
 
 /* Name service private operator */
-extern asmlinkage vbiStatus_t vbi_ns_op(uint32_t op, char* name, uint32_t rev, 
+extern asmlinkage int32_t vbi_ns_op(uint32_t op, char* name, uint32_t rev, 
 			VBI_NS_HANDLE *handle);
 
 /* Message receive private operator */
-extern asmlinkage vbiStatus_t vbi_rx_op(void *rmsg, uint32_t rlen, 
+extern asmlinkage int32_t vbi_rx_op(void *rmsg, uint32_t rlen, 
 			VBI_MSG_INFO *info, VBI_MSG_CTL *ctl);                                   
 
 #endif
diff --git a/include/vbi/shmem.h b/include/vbi/shmem.h
index d91d8e7..b273633 100644
--- a/include/vbi/shmem.h
+++ b/include/vbi/shmem.h
@@ -25,14 +25,14 @@ This header file declares the vbi API for managing memory regions
 
 #ifndef	_ASMLANGUAGE
 
-extern vbiStatus_t vbi_find_shmem(int8_t *smName, void **addr,
+extern int32_t vbi_find_shmem(int8_t *smName, void **addr,
 		uint32_t *length, uint32_t *attr);
 
-extern vbiStatus_t vbi_find_mem( int8_t * name, void **addr,       
+extern int32_t vbi_find_mem( int8_t *name, void **addr,       
 		uint32_t *length, uint32_t *attr);
 
 /* find the base address and length of a core's private memory */
-extern vbiStatus_t vbi_find_core_prv_mem (void **addr, size_t *length);  
+extern int32_t vbi_find_core_prv_mem(void **addr, size_t *length);  
 
 #endif /* _ASMLANGUAGE */
 
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 20fcf55..7b1fa5a 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -99,34 +99,34 @@ extern asmlinkage int vbi_vtlb_op(unsigned int op, unsigned long arg1,
  */
 
 /* Message send */
-extern asmlinkage vbiStatus_t vbi_send(vbiCtx_t id, void *smsg, size_t slen, 
+extern asmlinkage int32_t vbi_send(vbiCtx_t id, void *smsg, size_t slen, 
 			    void *rmsg, size_t rlen, VBI_MSG_INFO *info, 
 			    VBI_MSG_CTL *ctl);
 /* message receive */
-extern vbiStatus_t vbi_receive(void *rmsg, uint32_t rlen, VBI_MSG_INFO *info,
+extern int32_t vbi_receive(void *rmsg, uint32_t rlen, VBI_MSG_INFO *info,
 				VBI_MSG_CTL *ctl);
 /* message reply */
 extern asmlinkage int32_t vbi_reply(vbiCtx_t id, void *smsg, size_t slen, 
 				VBI_MSG_CTL *ctl);
 
-extern asmlinkage vbiStatus_t vbi_panic(const char *msg);
-extern vbiStatus_t vbi_flush_dcache(void *saddr, size_t size);
-extern vbiStatus_t vbi_flush_icache(void *saddr, size_t size);
-extern asmlinkage vbiStatus_t vbi_kputs(const char *s);
-extern asmlinkage vbiStatus_t vbi_kputc(int c);
-extern vbiStatus_t vbi_config_vmmu(struct vmmuConfig * config);
-extern vbiStatus_t vbi_enable_vmmu(uint32_t  vmmu_num);
-extern vbiStatus_t vbi_disable_vmmu(uint32_t vmmu_num);
-extern vbiStatus_t vbi_ns_register(char  *name, uint32_t  revision);
-extern vbiStatus_t vbi_ns_unregister(char *name, uint32_t  revision);
-extern vbiStatus_t vbi_ns_lookup(char *name, uint32_t  rev, VBI_NS_HANDLE *pHandle);
-extern vbiStatus_t vbi_tlb_flush_vmmu(struct vmmuConfig * config, void *addr, size_t len);
+extern asmlinkage int32_t vbi_panic(const char *msg);
+extern int32_t vbi_flush_dcache(void *saddr, size_t size);
+extern int32_t vbi_flush_icache(void *saddr, size_t size);
+extern asmlinkage int32_t vbi_kputs(const char *s);
+extern asmlinkage int32_t vbi_kputc(int c);
+extern int32_t vbi_config_vmmu(struct vmmuConfig * config);
+extern int32_t vbi_enable_vmmu(uint32_t  vmmu_num);
+extern int32_t vbi_disable_vmmu(uint32_t vmmu_num);
+extern int32_t vbi_ns_register(char  *name, uint32_t  revision);
+extern int32_t vbi_ns_unregister(char *name, uint32_t  revision);
+extern int32_t vbi_ns_lookup(char *name, uint32_t  rev, VBI_NS_HANDLE *pHandle);
+extern int32_t vbi_tlb_flush_vmmu(struct vmmuConfig * config, void *addr, size_t len);
 
 
 /* Prior to vbi 2.0 these api were vbi_set_mmu_attr/Get */
 
-extern asmlinkage vbiStatus_t  vbi_set_mem_attr(void *vaddr, size_t len, vbiMemAttr_t attr);
-extern asmlinkage vbiStatus_t  vbi_get_mem_attr(void *vaddr, vbiMemAttr_t * attr);
+extern asmlinkage int32_t  vbi_set_mem_attr(void *vaddr, size_t len, vbiMemAttr_t attr);
+extern asmlinkage int32_t  vbi_get_mem_attr(void *vaddr, vbiMemAttr_t * attr);
 
 /*
  * START: New APIs introduced for vbi 2.0  
@@ -134,24 +134,24 @@ extern asmlinkage vbiStatus_t  vbi_get_mem_attr(void *vaddr, vbiMemAttr_t * attr
 
 extern asmlinkage void vbi_vcore_irq_unlock(void);
 extern asmlinkage vbiIntState_t vbi_vcore_irq_lock(void);
-extern vbiStatus_t vbi_update_text_cache(void *saddr, size_t size);
-extern vbiStatus_t  vbi_set_exc_base(void * excTblBase);
+extern int32_t vbi_update_text_cache(void *saddr, size_t size);
+extern int32_t vbi_set_exc_base(void *excTblBase);
 
 /* virtual board management API's */
-extern asmlinkage vbiStatus_t vbi_vb_suspend(vbiVb_t id, vbiCore_t core);
-extern asmlinkage vbiStatus_t vbi_vb_reset(vbiVb_t id, vbiCore_t core, uint32_t options);
-extern asmlinkage vbiStatus_t vbi_vb_restart(vbiVb_t id, vbiCore_t core);
-extern asmlinkage vbiStatus_t vbi_vb_resume(vbiVb_t id, vbiCore_t core);
+extern asmlinkage int32_t vbi_vb_suspend(vbiVb_t id, vbiCore_t core);
+extern asmlinkage int32_t vbi_vb_reset(vbiVb_t id, vbiCore_t core, uint32_t options);
+extern asmlinkage int32_t vbi_vb_restart(vbiVb_t id, vbiCore_t core);
+extern asmlinkage int32_t vbi_vb_resume(vbiVb_t id, vbiCore_t core);
 
 /* read remote vb's memory */
-extern asmlinkage vbiStatus_t vbi_vb_read_mem(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
-extern asmlinkage vbiStatus_t vbi_vb_write_mem(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
+extern asmlinkage int32_t vbi_vb_read_mem(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
+extern asmlinkage int32_t vbi_vb_write_mem(VBI_MEM_CTL *memCtl, vbiVb_t targetBoard);
 extern asmlinkage void vbi_shell_start_debug(uint32_t  flags);
 
 /* read remote vb's registers */
-extern asmlinkage vbiStatus_t vbi_vb_read_reg(VBI_HREG_SET *regCtl, 
+extern asmlinkage int32_t vbi_vb_read_reg(VBI_HREG_SET *regCtl, 
 				       vbiVb_t targetBoard, vbiCore_t core);
-extern asmlinkage vbiStatus_t vbi_vb_write_reg(VBI_HREG_SET *regCtl, 
+extern asmlinkage int32_t vbi_vb_write_reg(VBI_HREG_SET *regCtl, 
 					vbiVb_t targetBoard, vbiCore_t core);
 
 /*
diff --git a/include/vbi/types.h b/include/vbi/types.h
index c112a6a..446bbb2 100644
--- a/include/vbi/types.h
+++ b/include/vbi/types.h
@@ -39,7 +39,6 @@ typedef int32_t vbiCore_t;
 typedef int32_t vbiCtx_t;
 typedef uint64_t vbiPhysAddr_t;
 typedef void *vbiGuestPhysAddr_t;
-typedef int32_t vbiStatus_t;
 typedef int32_t vbiIntState_t;
 typedef int32_t vbiMemAttr_t;
 typedef int32_t vbiVector_t;
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 83a493c..b759136 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -520,21 +520,21 @@ extern void vbi_exc_stub(void);
 extern void ASSERT_FN(const char *, const char *, int);
 extern void vbi_idle(uint64_t);
 extern void *vbi_get_vioapic_addr(void);
-extern vbiStatus_t vbi_set_vioapic_vec(vbiIrq_t irq, vbiVector_t vector); 
+extern int32_t vbi_set_vioapic_vec(vbiIrq_t irq, vbiVector_t vector); 
 extern vbiVector_t vbi_get_vioapic_vec(vbiIrq_t irq);
-extern vbiStatus_t vbi_unmask_vioapic_irq(vbiIrq_t irq);
-extern vbiStatus_t vbi_mask_vioapic_irq(vbiIrq_t irq);
-extern vbiStatus_t vbi_ack_vioapic_irq(vbiIrq_t irq);
-extern vbiStatus_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter,
+extern int32_t vbi_unmask_vioapic_irq(vbiIrq_t irq);
+extern int32_t vbi_mask_vioapic_irq(vbiIrq_t irq);
+extern int32_t vbi_ack_vioapic_irq(vbiIrq_t irq);
+extern int32_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter,
 				      vbiVb_t target);
-extern vbiStatus_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter, 
+extern int32_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter, 
 				     vbiVb_t vb);
-extern vbiStatus_t vbi_redir_vioapic_irq(vbiIrq_t irq, vbiCore_t tCore);
-extern vbiStatus_t vbi_send_vcore_vioapic_irq (vbiIrq_t irq, vbiCoreSet_t vcoreSet, 
+extern int32_t vbi_redir_vioapic_irq(vbiIrq_t irq, vbiCore_t tCore);
+extern int32_t vbi_send_vcore_vioapic_irq (vbiIrq_t irq, vbiCoreSet_t vcoreSet, 
 					  uint32_t options);
-extern vbiStatus_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr,
+extern int32_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
-extern vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
+extern int32_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
 
 extern void vbi_disp_vioapic(void);
diff --git a/kernel/vbi/io_apic.c b/kernel/vbi/io_apic.c
index 31d9bc8..de5f8c2 100644
--- a/kernel/vbi/io_apic.c
+++ b/kernel/vbi/io_apic.c
@@ -155,7 +155,7 @@ void *vbi_get_vioapic_addr(void)
  * This routine is currently not supported for PPC.
  *
  */
-vbiStatus_t vbi_set_vioapic_vec(vbiIrq_t irq, vbiVector_t vector)
+int32_t vbi_set_vioapic_vec(vbiIrq_t irq, vbiVector_t vector)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 
@@ -216,7 +216,7 @@ vbiVector_t vbi_get_vioapic_vec(vbiIrq_t irq)
  * specified IRQ directed to the calling virtual Core.
  *
  */
-vbiStatus_t vbi_unmask_vioapic_irq(vbiIrq_t irq)
+int32_t vbi_unmask_vioapic_irq(vbiIrq_t irq)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 
@@ -242,7 +242,7 @@ EXPORT_SYMBOL(vbi_unmask_vioapic_irq);
  * vbi_unmask_vioapic_irq().
  *
  */
-vbiStatus_t vbi_mask_vioapic_irq(vbiIrq_t irq)
+int32_t vbi_mask_vioapic_irq(vbiIrq_t irq)
 {
 	volatile VIOAPIC *pVioapic = (volatile VIOAPIC *)VBI_VIOAPIC_BASE_GET();
 
@@ -268,7 +268,7 @@ vbiStatus_t vbi_mask_vioapic_irq(vbiIrq_t irq)
  * required to be acknowledged.
  *
  */
-vbiStatus_t vbi_ack_vioapic_irq(vbiIrq_t irq)
+int32_t vbi_ack_vioapic_irq(vbiIrq_t irq)
 {
 
 	if (irq > VIOAPIC_MAX_REDTABLE_ENTRIES-1)
@@ -318,7 +318,7 @@ vbiStatus_t vbi_ack_vioapic_irq(vbiIrq_t irq)
  * VIOAPIC_SEND_NONE	- Ignore this call.
  *
  */
-vbiStatus_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter, vbiVb_t target)
+int32_t vbi_send_vioapic_irq(vbiIrq_t irq, uint32_t filter, vbiVb_t target)
 {
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_SEND, irq, filter, target);
 }
@@ -339,7 +339,7 @@ EXPORT_SYMBOL(vbi_send_vioapic_irq);
  * VBI_IOAPICSEND_VCORE_NONE.
  *
  */
-vbiStatus_t vbi_send_vcore_vioapic_irq(vbiIrq_t irq, vbiCoreSet_t coreSet,
+int32_t vbi_send_vcore_vioapic_irq(vbiIrq_t irq, vbiCoreSet_t coreSet,
 			uint32_t options)
 {
 	return vbi_io_apic_op(VBI_IOAPICIOCTL_VCORE_SEND, irq, coreSet, options);
@@ -352,7 +352,7 @@ vbiStatus_t vbi_send_vcore_vioapic_irq(vbiIrq_t irq, vbiCoreSet_t coreSet,
  * within the same virtual board.
  *
  */
-vbiStatus_t vbi_redir_vioapic_irq(vbiIrq_t irq, vbiCore_t core)
+int32_t vbi_redir_vioapic_irq(vbiIrq_t irq, vbiCore_t core)
 {
 	return vbi_vcore_irq_redirect(irq, core);
 }
diff --git a/kernel/vbi/msg.c b/kernel/vbi/msg.c
index e79f19d..6763b31 100644
--- a/kernel/vbi/msg.c
+++ b/kernel/vbi/msg.c
@@ -32,10 +32,10 @@
  *
  */
 
-vbiStatus_t vbi_receive(void *rmsg, uint32_t rlen, VBI_MSG_INFO *info,
+int32_t vbi_receive(void *rmsg, uint32_t rlen, VBI_MSG_INFO *info,
 			VBI_MSG_CTL *ctl)
 {
-	vbiStatus_t retval;
+	int32_t retval;
 
 	while (1)
 	{
diff --git a/kernel/vbi/ns.c b/kernel/vbi/ns.c
index e329fbd..a592e56 100644
--- a/kernel/vbi/ns.c
+++ b/kernel/vbi/ns.c
@@ -43,7 +43,7 @@ for processing.
  * manager for processing.
  *
  */
-vbiStatus_t vbi_ns_register(char *name, uint32_t revision)
+int32_t vbi_ns_register(char *name, uint32_t revision)
 {
 	if (name == NULL)
 		return -1;
@@ -59,7 +59,7 @@ vbiStatus_t vbi_ns_register(char *name, uint32_t revision)
  * manager for processing.
  *
  */
-vbiStatus_t vbiNsUnregister(char *name, uint32_t revision)
+int32_t vbiNsUnregister(char *name, uint32_t revision)
 {
 	if (name == NULL)
 		return -1;
@@ -75,7 +75,7 @@ vbiStatus_t vbiNsUnregister(char *name, uint32_t revision)
  * formulated and sent off to the name service manager for processing.
  *
  */
-vbiStatus_t vbi_ns_lookup(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
+int32_t vbi_ns_lookup(char *name, uint32_t revision, VBI_NS_HANDLE *handle)
 {
 	if (name == NULL || handle == NULL)
 		return -1;
diff --git a/kernel/vbi/paddr.c b/kernel/vbi/paddr.c
index b0515b3..582bc37 100644
--- a/kernel/vbi/paddr.c
+++ b/kernel/vbi/paddr.c
@@ -37,7 +37,7 @@ perhaps to communicate with the hypervisor itself maybe buffer pointers.
  * 64-bit.
  *
  */
-vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
+int32_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
 					vbiPhysAddr_t *paddr)
 {
 	return vbi_hy_ioctl(VBI_HYIOCTL_PADDR, gaddr, paddr, (void*)VBI_HYIOCTL_PADDR_PHYS, 0 );
@@ -52,7 +52,7 @@ vbiStatus_t vbi_guest_phys_to_phys(vbiGuestPhysAddr_t gaddr,
  * running with > 4GB memory so the phys address is always 64-bit.
  *
  */
-vbiStatus_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr, vbiPhysAddr_t *paddr)
+int32_t vbi_get_guest_dma_addr(vbiGuestPhysAddr_t gaddr, vbiPhysAddr_t *paddr)
 {
 	return vbi_hy_ioctl(VBI_HYIOCTL_PADDR, gaddr, paddr, VBI_HYIOCTL_PADDR_DMA, 0);
 }
diff --git a/kernel/vbi/shmem.c b/kernel/vbi/shmem.c
index 3f932f6..ca5fa8f 100644
--- a/kernel/vbi/shmem.c
+++ b/kernel/vbi/shmem.c
@@ -50,7 +50,7 @@ Alternatively the following macros can be used to obtained similar information
  * arguments.
  *
  */
-vbiStatus_t vbi_find_shmem(int8_t *smName, void **addr,
+int32_t vbi_find_shmem(int8_t *smName, void **addr,
 				uint32_t *length, uint32_t *attr)
 {
 	struct vb_config *config = VBI_CONFIG_ADDR_GET();
@@ -82,7 +82,7 @@ EXPORT_SYMBOL(vbi_find_shmem);
  * arguments.
  *
  */
-vbiStatus_t vbi_find_mem(int8_t *name, void **addr,
+int32_t vbi_find_mem(int8_t *name, void **addr,
 				uint32_t *length, uint32_t *attr)
 {
 	struct vb_config *config = VBI_CONFIG_ADDR_GET();
@@ -110,7 +110,7 @@ vbiStatus_t vbi_find_mem(int8_t *name, void **addr,
  * the running core.
  *
  */
-vbiStatus_t vbi_find_core_prv_mem(void **addr, size_t *length)
+int32_t vbi_find_core_prv_mem(void **addr, size_t *length)
 {
 	*addr = (void *)VBI_VCORE_PRIVMEM_BASE_GET();
 	*length = VBI_VCORE_PRIVMEM_SIZE_GET();
-- 
1.6.5.2

