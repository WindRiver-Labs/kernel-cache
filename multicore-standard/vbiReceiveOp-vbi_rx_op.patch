From 30900906e64f3f9b32870f0188124d22d50f4e11 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 10:07:14 -0500
Subject: [PATCH 21/80] vbiReceiveOp --> vbi_rx_op

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |    8 ++++----
 arch/x86/kernel/vbi/syscalls.S     |    6 +++---
 include/vbi/private.h              |    2 +-
 kernel/vbi/msg.c                   |    2 +-
 4 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index d1588ef..a3a989a 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -38,7 +38,7 @@ FUNC_EXPORT(vbi_io_apic_ioctl)
 FUNC_EXPORT(vbi_hy_ioctl)
 FUNC_EXPORT(vbi_ctx_ctl)
 FUNC_EXPORT(vbi_send)
-FUNC_EXPORT(vbiReceiveOp)
+FUNC_EXPORT(vbi_rx_op)
 FUNC_EXPORT(vbiReply)
 FUNC_EXPORT(vbiIcacheFlush)
 FUNC_EXPORT(vbiDcacheFlush)
@@ -256,18 +256,18 @@ FUNC_LABEL(vbi_send)
 FUNC_END(vbi_send)
 
 /*
- * vbiReceiveOp - Receive a message from another context
+ * vbi_rx_op - Receive a message from another context
  *
  * This routine makes a hypercall and waits for a message to be received from
  * another context. It blocks until a message is received.
  *
  */
-FUNC_LABEL(vbiReceiveOp)
+FUNC_LABEL(vbi_rx_op)
 	lis r0, HI(VBI_SYS_receive)
 	ori r0, r0, LO(VBI_SYS_receive)
 	HCALL
 	blr
-FUNC_END(vbiReceiveOp)
+FUNC_END(vbi_rx_op)
 
 /*
  * vbiReply - Reply to message received from another context
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index 5eb7700..a65a32c 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -33,7 +33,7 @@
 .globl vbi_hy_ioctl
 .globl vbi_ctx_ctl
 .globl vbi_send
-.globl vbiReceiveOp
+.globl vbi_rx_op
 .globl vbiReply
 .globl vbiTlbFlush
 .globl vbiPanic
@@ -76,7 +76,7 @@ vbi_send:
 	ret
 
 /*
- * vbiReceiveOp - Receive a message from another context
+ * vbi_rx_op - Receive a message from another context
  *
  * This routine makes a hypercall and waits for a message to be received from
  * another context. It blocks until a message is received.
@@ -84,7 +84,7 @@ vbi_send:
  * RETURNS: sender context Id or an error number in case of failure
  *
  */
-vbiReceiveOp:
+vbi_rx_op:
 	movl $VBI_SYS_receive,%eax
 	push $4
 	vmcall
diff --git a/include/vbi/private.h b/include/vbi/private.h
index f36162d..abf5366 100644
--- a/include/vbi/private.h
+++ b/include/vbi/private.h
@@ -36,7 +36,7 @@ extern asmlinkage vbiStatus_t vbiNsOp(uint32_t op, char* name, uint32_t rev,
 			VBI_NS_HANDLE *handle);
 
 /* Message receive private operator */
-extern asmlinkage vbiStatus_t vbiReceiveOp(void *rmsg, uint32_t rlen, 
+extern asmlinkage vbiStatus_t vbi_rx_op(void *rmsg, uint32_t rlen, 
 			VBI_MSG_INFO *info, VBI_MSG_CTL *ctl);                                   
 
 #endif
diff --git a/kernel/vbi/msg.c b/kernel/vbi/msg.c
index 9408df6..3ff03f3 100644
--- a/kernel/vbi/msg.c
+++ b/kernel/vbi/msg.c
@@ -39,7 +39,7 @@ vbiStatus_t vbiReceive(void *rmsg, uint32_t rlen, VBI_MSG_INFO *info,
 
 	while (1)
 	{
-		retval = vbiReceiveOp(rmsg, rlen, info, ctl);
+		retval = vbi_rx_op(rmsg, rlen, info, ctl);
 
 		/* if retry flag set, continue */
 		if ((ctl->flags & VBI_MSG_CTL_FLAG_RETRY) != VBI_MSG_CTL_FLAG_RETRY)
-- 
1.6.5.2

