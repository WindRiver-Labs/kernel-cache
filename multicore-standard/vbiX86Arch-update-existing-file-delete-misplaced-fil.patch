From 1a96a31e19d19c5bfef3b9e32b7a856e29a0b7d1 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Thu, 15 Oct 2009 17:45:03 -0400
Subject: [PATCH 21/23] vbiX86Arch: update existing file, delete misplaced file

This file was already moved into an arch specific dir,
but that copy was one rev out of date.  Update it to
make it identical to the latest one, and then remove
the latest one that is still lingering in the non-arch
specific dir.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 include/asm-x86/arch_vbi.h   |  194 ++++++++++++++++++++++++++++++++++++++++++
 include/asm-x86/vbiX86Arch.h |  192 -----------------------------------------
 include/vbi/x86/vbiX86Arch.h |  194 ------------------------------------------
 3 files changed, 194 insertions(+), 386 deletions(-)
 create mode 100644 include/asm-x86/arch_vbi.h
 delete mode 100644 include/asm-x86/vbiX86Arch.h
 delete mode 100644 include/vbi/x86/vbiX86Arch.h

diff --git a/include/asm-x86/arch_vbi.h b/include/asm-x86/arch_vbi.h
new file mode 100644
index 0000000..72421b3
--- /dev/null
+++ b/include/asm-x86/arch_vbi.h
@@ -0,0 +1,194 @@
+/* vbiX86Arch.h - x86 architecture specific definitions */
+
+/* Copyright 2009 Wind River Systems, Inc. */
+
+/*
+modification history
+--------------------
+01i,31aug09,mmi  move VBI_HREG_SET to vbiX86Arch.h
+01h,26aug09,mmi  fix WIND00178026: update file name
+01g,17aug09,md   fix comments
+01f,14aug09,md   update to match hypervisor version
+01e,28jul09,mpk  add hardware register set to vbi
+01d,08jun09,md   add define for maximum number of cores
+01c,25may09,md   add byte order define
+01b,06feb09,mmi  add MAX interrupts definition
+01a,14jan09,mmi  created
+*/
+
+#ifndef __INCvbiX86Archh
+#define __INCvbiX86Archh
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifndef _ASMLANGUAGE
+
+/*******************************************************************************
+*
+* VB_HREG_SET - hardware register set, for read/write
+*
+* Used by vbiVbRegisterRead/vbiVbRegisterWrite to read/write registers in 
+* another VB
+* 
+* SYNOPSIS
+*
+* VB hardware register set C data structure type definition
+*
+*\cs
+*     typedef struct		/@ VB_REG_SET - used for sys_regsRead/Write @/
+*         {
+*         uint32_t  eax;	/@ 00: general register		@/
+*         uint32_t  ebx;	/@ 04: general register		@/
+*         uint32_t  ecx;	/@ 08: general register		@/
+*         uint32_t  edx;	/@ 0C: general register		@/
+*         uint32_t  esi;	/@ 10: general register		@/
+*         uint32_t  edi;	/@ 14: general register		@/
+*         uint32_t  eip;	/@ 18: program counter		@/
+*         uint32_t  ebp;	/@ 1C: frame pointer register	@/
+*         uint32_t  esp;	/@ 20: stack pointer register	@/
+*         uint32_t  eflags;	/@ 24: status register		@/
+*         uint32_t  cr0;	/@ 28: control register 0	@/
+*         uint32_t  cr3;	/@ 2C: control register 3	@/
+*         uint32_t  cr4;	/@ 30: control register 4	@/
+*         uint32_t  idtr;	/@ 34: IDT task register	@/
+*         uint32_t  gdtr;	/@ 38: GDT task register	@/
+*         uint32_t  ldtr;	/@ 3C: LDT task register	@/
+*         uint32_t  cs;		/@ 40: code segment		@/
+*         uint32_t  ss;		/@ 44: stack segment		@/
+*         uint32_t  ds;		/@ 48: data segment		@/
+*         uint32_t  es;		/@ 4C: E segment		@/
+*         uint32_t  fs;		/@ 50: F segment		@/
+*         uint32_t  gs;		/@ 54: G segment		@/
+*         uint32_t  tr;		/@ 58: task register		@/
+*         } VB_HREG_SET;
+*
+*\ce
+* SEE ALSO: NONE
+* 
+*/
+
+typedef struct			/* VBI_REG_SET - used for sys_regsRead/Write */
+    {
+    uint32_t  eax;		/* 00: general register		*/
+    uint32_t  ebx;		/* 04: general register		*/
+    uint32_t  ecx;		/* 08: general register		*/
+    uint32_t  edx;		/* 0C: general register		*/
+    uint32_t  esi;		/* 10: general register		*/
+    uint32_t  edi;		/* 14: general register		*/
+    uint32_t  eip;		/* 18: program counter		*/
+    uint32_t  ebp;		/* 1C: frame pointer register	*/
+    uint32_t  esp;		/* 20: stack pointer register	*/
+    uint32_t  eflags;		/* 24: status register		*/
+    uint32_t  cr0;		/* 28: control register 0	*/
+    uint32_t  cr3;		/* 2C: control register 3	*/
+    uint32_t  cr4;		/* 30: control register 4	*/
+    uint32_t  idtr;		/* 34: IDT task register	*/
+    uint32_t  gdtr;		/* 38: GDT task register	*/
+    uint32_t  ldtr;		/* 3C: LDT task register	*/
+    uint32_t  cs;		/* 40: code segment		*/
+    uint32_t  ss;		/* 44: stack segment		*/
+    uint32_t  ds;		/* 48: data segment		*/
+    uint32_t  es;		/* 4C: E segment		*/
+    uint32_t  fs;		/* 50: F segment		*/
+    uint32_t  gs;		/* 54: G segment		*/
+    uint32_t  tr;		/* 58: task register		*/
+    } VBI_HREG_SET;
+
+#endif /* _ASMLANGUAGE */
+
+/* x86 uses little endian byte ordering */
+
+#define __VBI_BYTE_ORDER __VBI_LITTLE_ENDIAN
+
+#define	VBI_X86_MAX_VECTORS         256	/* maximum number of vectors */
+#define VBI_ARCH_EXC_TABLE_SIZE     32
+#define VBI_ARCH_IRQ_TABLE_SIZE     (VBI_X86_MAX_VECTORS - VBI_ARCH_EXC_TABLE_SIZE)            
+
+#define	VBI_MAX_CORES		    8	/* maximum number of virtual cores */
+
+#define VBI_IN_DIVIDE_ERROR		 0
+#define VBI_IN_DEBUG			 1
+#define VBI_IN_NON_MASKABLE		 2
+#define VBI_IN_BREAKPOINT		 3
+#define VBI_IN_OVERFLOW			 4
+#define VBI_IN_BOUND			 5
+#define VBI_IN_INVALID_OPCODE		 6
+#define VBI_IN_NO_DEVICE		 7
+#define VBI_IN_DOUBLE_FAULT		 8
+#define VBI_IN_CP_OVERRUN		 9
+#define VBI_IN_INVALID_TSS		10
+#define VBI_IN_NO_SEGMENT		11
+#define VBI_IN_STACK_FAULT		12
+#define VBI_IN_PROTECTION_FAULT		13
+#define VBI_IN_PAGE_FAULT		14
+#define VBI_IN_RESERVED			15
+#define VBI_IN_CP_ERROR			16
+#define VBI_IN_ALIGNMENT		17
+#define VBI_IN_MACHINE_CHECK		18
+#define VBI_IN_SIMD			19
+
+/* 19-31 Intel reserved exceptions  */
+
+/* 32-255 user defined exceptions  */
+
+#define VBI_IN_EXT_IRQ_BASE		32	/* local timer interrupt */
+
+#define VBI_IN_EXT_IRQ0			(VBI_IN_EXT_IRQ_BASE + 0)	
+#define VBI_IN_EXT_IRQ1			(VBI_IN_EXT_IRQ_BASE + 1)	
+#define VBI_IN_EXT_IRQ2			(VBI_IN_EXT_IRQ_BASE + 2)	
+#define VBI_IN_EXT_IRQ3 		(VBI_IN_EXT_IRQ_BASE + 3)	
+#define VBI_IN_EXT_IRQ4			(VBI_IN_EXT_IRQ_BASE + 4)	
+#define VBI_IN_EXT_IRQ5			(VBI_IN_EXT_IRQ_BASE + 5)	
+#define VBI_IN_EXT_IRQ6			(VBI_IN_EXT_IRQ_BASE + 6)	
+#define VBI_IN_EXT_IRQ7			(VBI_IN_EXT_IRQ_BASE + 7)	
+#define VBI_IN_EXT_IRQ8			(VBI_IN_EXT_IRQ_BASE + 8)	
+#define VBI_IN_EXT_IRQ9			(VBI_IN_EXT_IRQ_BASE + 9)	
+#define VBI_IN_EXT_IRQ10		(VBI_IN_EXT_IRQ_BASE + 10)	
+#define VBI_IN_EXT_IRQ11		(VBI_IN_EXT_IRQ_BASE + 11)	
+#define VBI_IN_EXT_IRQ12		(VBI_IN_EXT_IRQ_BASE + 12)	
+#define VBI_IN_EXT_IRQ13		(VBI_IN_EXT_IRQ_BASE + 13)	
+#define VBI_IN_EXT_IRQ14		(VBI_IN_EXT_IRQ_BASE + 14)	
+#define VBI_IN_EXT_IRQ15		(VBI_IN_EXT_IRQ_BASE + 15)	
+#define VBI_IN_EXT_IRQ16		(VBI_IN_EXT_IRQ_BASE + 16)	
+#define VBI_IN_EXT_IRQ17		(VBI_IN_EXT_IRQ_BASE + 17)	
+#define VBI_IN_EXT_IRQ18		(VBI_IN_EXT_IRQ_BASE + 18)	
+#define VBI_IN_EXT_IRQ19		(VBI_IN_EXT_IRQ_BASE + 19)	
+#define VBI_IN_EXT_IRQ20		(VBI_IN_EXT_IRQ_BASE + 20)	
+#define VBI_IN_EXT_IRQ21		(VBI_IN_EXT_IRQ_BASE + 21)	
+#define VBI_IN_EXT_IRQ22		(VBI_IN_EXT_IRQ_BASE + 22)	
+#define VBI_IN_EXT_IRQ23		(VBI_IN_EXT_IRQ_BASE + 23)	
+#define VBI_IN_EXT_IRQ24		(VBI_IN_EXT_IRQ_BASE + 24)	
+#define VBI_IN_EXT_IRQ25		(VBI_IN_EXT_IRQ_BASE + 25)	
+#define VBI_IN_EXT_IRQ26		(VBI_IN_EXT_IRQ_BASE + 26)	
+#define VBI_IN_EXT_IRQ27		(VBI_IN_EXT_IRQ_BASE + 27)	
+#define VBI_IN_EXT_IRQ28		(VBI_IN_EXT_IRQ_BASE + 28)	
+#define VBI_IN_EXT_IRQ29		(VBI_IN_EXT_IRQ_BASE + 29)	
+#define VBI_IN_EXT_IRQ30		(VBI_IN_EXT_IRQ_BASE + 30)	
+#define VBI_IN_EXT_IRQ31		(VBI_IN_EXT_IRQ_BASE + 31)	
+#define VBI_IN_EXT_IRQ32		(VBI_IN_EXT_IRQ_BASE + 32)	
+#define VBI_IN_EXT_IRQ33		(VBI_IN_EXT_IRQ_BASE + 33)	
+#define VBI_IN_EXT_IRQ34		(VBI_IN_EXT_IRQ_BASE + 34)	
+#define VBI_IN_EXT_IRQ35		(VBI_IN_EXT_IRQ_BASE + 35)	
+#define VBI_IN_EXT_IRQ36		(VBI_IN_EXT_IRQ_BASE + 36)	
+#define VBI_IN_EXT_IRQ37		(VBI_IN_EXT_IRQ_BASE + 37)	
+#define VBI_IN_EXT_IRQ38		(VBI_IN_EXT_IRQ_BASE + 38)	
+#define VBI_IN_EXT_IRQ39		(VBI_IN_EXT_IRQ_BASE + 39)	
+#define VBI_IN_EXT_IRQ40		(VBI_IN_EXT_IRQ_BASE + 40)	
+#define VBI_IN_EXT_IRQ41		(VBI_IN_EXT_IRQ_BASE + 41)	
+#define VBI_IN_EXT_IRQ42		(VBI_IN_EXT_IRQ_BASE + 42)	
+#define VBI_IN_EXT_IRQ43		(VBI_IN_EXT_IRQ_BASE + 43)	
+#define VBI_IN_EXT_IRQ44		(VBI_IN_EXT_IRQ_BASE + 44)	
+#define VBI_IN_EXT_IRQ45		(VBI_IN_EXT_IRQ_BASE + 45)	
+#define VBI_IN_EXT_IRQ46		(VBI_IN_EXT_IRQ_BASE + 46)	
+#define VBI_IN_EXT_IRQ47		(VBI_IN_EXT_IRQ_BASE + 47)	
+
+/* timer vector */
+
+#define VBI_CLOCK_TIMER_VECTOR		(0)
+#define VBI_IN_APIC_TIMER		(VBI_IN_EXT_IRQ0)    
+#ifdef __cplusplus
+}
+#endif
+#endif /* __INCVbiX86Archh */
diff --git a/include/asm-x86/vbiX86Arch.h b/include/asm-x86/vbiX86Arch.h
deleted file mode 100644
index 4cc6e41..0000000
--- a/include/asm-x86/vbiX86Arch.h
+++ /dev/null
@@ -1,192 +0,0 @@
-/* vbiX86Arch.h - x86 architecture specific definitions */
-
-/* Copyright 2009 Wind River Systems, Inc. */
-
-/*
-modification history
---------------------
-01h,26aug09,mmi  fix WIND00178026: update file name
-01g,17aug09,md   fix comments
-01f,14aug09,md   update to match hypervisor version
-01e,28jul09,mpk  add hardware register set to vbi
-01d,08jun09,md   add define for maximum number of cores
-01c,25may09,md   add byte order define
-01b,06feb09,mmi  add MAX interrupts definition
-01a,14jan09,mmi  created
-*/
-
-#ifndef __INCvbiX86Archh
-#define __INCvbiX86Archh
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#ifndef _ASMLANGUAGE
-
-/*******************************************************************************
-*
-* VB_HREG_SET - hardware register set, for read/write
-*
-* Used by vbiVbRegisterRead/vbiVbRegisterWrite to read/write registers in 
-* another VB
-* 
-* SYNOPSIS
-*
-* VB hardware register set C data structure type definition
-*
-*\cs
-*     typedef struct		/@ VB_REG_SET - used for sys_regsRead/Write @/
-*         {
-*         uint32_t  eax;	/@ 00: general register		@/
-*         uint32_t  ebx;	/@ 04: general register		@/
-*         uint32_t  ecx;	/@ 08: general register		@/
-*         uint32_t  edx;	/@ 0C: general register		@/
-*         uint32_t  esi;	/@ 10: general register		@/
-*         uint32_t  edi;	/@ 14: general register		@/
-*         uint32_t  eip;	/@ 18: program counter		@/
-*         uint32_t  ebp;	/@ 1C: frame pointer register	@/
-*         uint32_t  esp;	/@ 20: stack pointer register	@/
-*         uint32_t  eflags;	/@ 24: status register		@/
-*         uint32_t  cr0;	/@ 28: control register 0	@/
-*         uint32_t  cr3;	/@ 2C: control register 3	@/
-*         uint32_t  cr4;	/@ 30: control register 4	@/
-*         uint32_t  idtr;	/@ 34: IDT task register	@/
-*         uint32_t  gdtr;	/@ 38: GDT task register	@/
-*         uint32_t  ldtr;	/@ 3C: LDT task register	@/
-*         uint32_t  cs;		/@ 40: code segment		@/
-*         uint32_t  ss;		/@ 44: stack segment		@/
-*         uint32_t  ds;		/@ 48: data segment		@/
-*         uint32_t  es;		/@ 4C: E segment		@/
-*         uint32_t  fs;		/@ 50: F segment		@/
-*         uint32_t  gs;		/@ 54: G segment		@/
-*         uint32_t  tr;		/@ 58: task register		@/
-*         } VB_HREG_SET;
-*
-*\ce
-* SEE ALSO: NONE
-* 
-*/
-
-typedef struct			/* VBI_REG_SET - used for sys_regsRead/Write */
-    {
-    uint32_t  eax;		/* 00: general register		*/
-    uint32_t  ebx;		/* 04: general register		*/
-    uint32_t  ecx;		/* 08: general register		*/
-    uint32_t  edx;		/* 0C: general register		*/
-    uint32_t  esi;		/* 10: general register		*/
-    uint32_t  edi;		/* 14: general register		*/
-    uint32_t  eip;		/* 18: program counter		*/
-    uint32_t  ebp;		/* 1C: frame pointer register	*/
-    uint32_t  esp;		/* 20: stack pointer register	*/
-    uint32_t  eflags;		/* 24: status register		*/
-    uint32_t  cr0;		/* 28: control register 0	*/
-    uint32_t  cr3;		/* 2C: control register 3	*/
-    uint32_t  cr4;		/* 30: control register 4	*/
-    uint32_t  idtr;		/* 34: IDT task register	*/
-    uint32_t  gdtr;		/* 38: GDT task register	*/
-    uint32_t  ldtr;		/* 3C: LDT task register	*/
-    uint32_t  cs;		/* 40: code segment		*/
-    uint32_t  ss;		/* 44: stack segment		*/
-    uint32_t  ds;		/* 48: data segment		*/
-    uint32_t  es;		/* 4C: E segment		*/
-    uint32_t  fs;		/* 50: F segment		*/
-    uint32_t  gs;		/* 54: G segment		*/
-    uint32_t  tr;		/* 58: task register		*/
-    } VB_HREG_SET;
-#endif /* _ASMLANGUAGE */
-
-/* x86 uses little endian byte ordering */
-
-#define __VBI_BYTE_ORDER __VBI_LITTLE_ENDIAN
-
-#define	VBI_X86_MAX_VECTORS         256	/* maximum number of vectors */
-#define VBI_ARCH_EXC_TABLE_SIZE     32
-#define VBI_ARCH_IRQ_TABLE_SIZE     (VBI_X86_MAX_VECTORS - VBI_ARCH_EXC_TABLE_SIZE)            
-
-#define	VBI_MAX_CORES		    8	/* maximum number of virtual cores */
-
-#define VBI_IN_DIVIDE_ERROR		 0
-#define VBI_IN_DEBUG			 1
-#define VBI_IN_NON_MASKABLE		 2
-#define VBI_IN_BREAKPOINT		 3
-#define VBI_IN_OVERFLOW			 4
-#define VBI_IN_BOUND			 5
-#define VBI_IN_INVALID_OPCODE		 6
-#define VBI_IN_NO_DEVICE		 7
-#define VBI_IN_DOUBLE_FAULT		 8
-#define VBI_IN_CP_OVERRUN		 9
-#define VBI_IN_INVALID_TSS		10
-#define VBI_IN_NO_SEGMENT		11
-#define VBI_IN_STACK_FAULT		12
-#define VBI_IN_PROTECTION_FAULT		13
-#define VBI_IN_PAGE_FAULT		14
-#define VBI_IN_RESERVED			15
-#define VBI_IN_CP_ERROR			16
-#define VBI_IN_ALIGNMENT		17
-#define VBI_IN_MACHINE_CHECK		18
-#define VBI_IN_SIMD			19
-
-/* 19-31 Intel reserved exceptions  */
-
-/* 32-255 user defined exceptions  */
-
-#define VBI_IN_EXT_IRQ_BASE		32	/* local timer interrupt */
-
-#define VBI_IN_EXT_IRQ0			(VBI_IN_EXT_IRQ_BASE + 0)	
-#define VBI_IN_EXT_IRQ1			(VBI_IN_EXT_IRQ_BASE + 1)	
-#define VBI_IN_EXT_IRQ2			(VBI_IN_EXT_IRQ_BASE + 2)	
-#define VBI_IN_EXT_IRQ3 		(VBI_IN_EXT_IRQ_BASE + 3)	
-#define VBI_IN_EXT_IRQ4			(VBI_IN_EXT_IRQ_BASE + 4)	
-#define VBI_IN_EXT_IRQ5			(VBI_IN_EXT_IRQ_BASE + 5)	
-#define VBI_IN_EXT_IRQ6			(VBI_IN_EXT_IRQ_BASE + 6)	
-#define VBI_IN_EXT_IRQ7			(VBI_IN_EXT_IRQ_BASE + 7)	
-#define VBI_IN_EXT_IRQ8			(VBI_IN_EXT_IRQ_BASE + 8)	
-#define VBI_IN_EXT_IRQ9			(VBI_IN_EXT_IRQ_BASE + 9)	
-#define VBI_IN_EXT_IRQ10		(VBI_IN_EXT_IRQ_BASE + 10)	
-#define VBI_IN_EXT_IRQ11		(VBI_IN_EXT_IRQ_BASE + 11)	
-#define VBI_IN_EXT_IRQ12		(VBI_IN_EXT_IRQ_BASE + 12)	
-#define VBI_IN_EXT_IRQ13		(VBI_IN_EXT_IRQ_BASE + 13)	
-#define VBI_IN_EXT_IRQ14		(VBI_IN_EXT_IRQ_BASE + 14)	
-#define VBI_IN_EXT_IRQ15		(VBI_IN_EXT_IRQ_BASE + 15)	
-#define VBI_IN_EXT_IRQ16		(VBI_IN_EXT_IRQ_BASE + 16)	
-#define VBI_IN_EXT_IRQ17		(VBI_IN_EXT_IRQ_BASE + 17)	
-#define VBI_IN_EXT_IRQ18		(VBI_IN_EXT_IRQ_BASE + 18)	
-#define VBI_IN_EXT_IRQ19		(VBI_IN_EXT_IRQ_BASE + 19)	
-#define VBI_IN_EXT_IRQ20		(VBI_IN_EXT_IRQ_BASE + 20)	
-#define VBI_IN_EXT_IRQ21		(VBI_IN_EXT_IRQ_BASE + 21)	
-#define VBI_IN_EXT_IRQ22		(VBI_IN_EXT_IRQ_BASE + 22)	
-#define VBI_IN_EXT_IRQ23		(VBI_IN_EXT_IRQ_BASE + 23)	
-#define VBI_IN_EXT_IRQ24		(VBI_IN_EXT_IRQ_BASE + 24)	
-#define VBI_IN_EXT_IRQ25		(VBI_IN_EXT_IRQ_BASE + 25)	
-#define VBI_IN_EXT_IRQ26		(VBI_IN_EXT_IRQ_BASE + 26)	
-#define VBI_IN_EXT_IRQ27		(VBI_IN_EXT_IRQ_BASE + 27)	
-#define VBI_IN_EXT_IRQ28		(VBI_IN_EXT_IRQ_BASE + 28)	
-#define VBI_IN_EXT_IRQ29		(VBI_IN_EXT_IRQ_BASE + 29)	
-#define VBI_IN_EXT_IRQ30		(VBI_IN_EXT_IRQ_BASE + 30)	
-#define VBI_IN_EXT_IRQ31		(VBI_IN_EXT_IRQ_BASE + 31)	
-#define VBI_IN_EXT_IRQ32		(VBI_IN_EXT_IRQ_BASE + 32)	
-#define VBI_IN_EXT_IRQ33		(VBI_IN_EXT_IRQ_BASE + 33)	
-#define VBI_IN_EXT_IRQ34		(VBI_IN_EXT_IRQ_BASE + 34)	
-#define VBI_IN_EXT_IRQ35		(VBI_IN_EXT_IRQ_BASE + 35)	
-#define VBI_IN_EXT_IRQ36		(VBI_IN_EXT_IRQ_BASE + 36)	
-#define VBI_IN_EXT_IRQ37		(VBI_IN_EXT_IRQ_BASE + 37)	
-#define VBI_IN_EXT_IRQ38		(VBI_IN_EXT_IRQ_BASE + 38)	
-#define VBI_IN_EXT_IRQ39		(VBI_IN_EXT_IRQ_BASE + 39)	
-#define VBI_IN_EXT_IRQ40		(VBI_IN_EXT_IRQ_BASE + 40)	
-#define VBI_IN_EXT_IRQ41		(VBI_IN_EXT_IRQ_BASE + 41)	
-#define VBI_IN_EXT_IRQ42		(VBI_IN_EXT_IRQ_BASE + 42)	
-#define VBI_IN_EXT_IRQ43		(VBI_IN_EXT_IRQ_BASE + 43)	
-#define VBI_IN_EXT_IRQ44		(VBI_IN_EXT_IRQ_BASE + 44)	
-#define VBI_IN_EXT_IRQ45		(VBI_IN_EXT_IRQ_BASE + 45)	
-#define VBI_IN_EXT_IRQ46		(VBI_IN_EXT_IRQ_BASE + 46)	
-#define VBI_IN_EXT_IRQ47		(VBI_IN_EXT_IRQ_BASE + 47)	
-
-/* timer vector */
-
-#define VBI_CLOCK_TIMER_VECTOR		(0)
-#define VBI_IN_APIC_TIMER		(VBI_IN_EXT_IRQ0)    
-#ifdef __cplusplus
-}
-#endif
-#endif /* __INCVbiX86Archh */
diff --git a/include/vbi/x86/vbiX86Arch.h b/include/vbi/x86/vbiX86Arch.h
deleted file mode 100644
index 72421b3..0000000
--- a/include/vbi/x86/vbiX86Arch.h
+++ /dev/null
@@ -1,194 +0,0 @@
-/* vbiX86Arch.h - x86 architecture specific definitions */
-
-/* Copyright 2009 Wind River Systems, Inc. */
-
-/*
-modification history
---------------------
-01i,31aug09,mmi  move VBI_HREG_SET to vbiX86Arch.h
-01h,26aug09,mmi  fix WIND00178026: update file name
-01g,17aug09,md   fix comments
-01f,14aug09,md   update to match hypervisor version
-01e,28jul09,mpk  add hardware register set to vbi
-01d,08jun09,md   add define for maximum number of cores
-01c,25may09,md   add byte order define
-01b,06feb09,mmi  add MAX interrupts definition
-01a,14jan09,mmi  created
-*/
-
-#ifndef __INCvbiX86Archh
-#define __INCvbiX86Archh
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#ifndef _ASMLANGUAGE
-
-/*******************************************************************************
-*
-* VB_HREG_SET - hardware register set, for read/write
-*
-* Used by vbiVbRegisterRead/vbiVbRegisterWrite to read/write registers in 
-* another VB
-* 
-* SYNOPSIS
-*
-* VB hardware register set C data structure type definition
-*
-*\cs
-*     typedef struct		/@ VB_REG_SET - used for sys_regsRead/Write @/
-*         {
-*         uint32_t  eax;	/@ 00: general register		@/
-*         uint32_t  ebx;	/@ 04: general register		@/
-*         uint32_t  ecx;	/@ 08: general register		@/
-*         uint32_t  edx;	/@ 0C: general register		@/
-*         uint32_t  esi;	/@ 10: general register		@/
-*         uint32_t  edi;	/@ 14: general register		@/
-*         uint32_t  eip;	/@ 18: program counter		@/
-*         uint32_t  ebp;	/@ 1C: frame pointer register	@/
-*         uint32_t  esp;	/@ 20: stack pointer register	@/
-*         uint32_t  eflags;	/@ 24: status register		@/
-*         uint32_t  cr0;	/@ 28: control register 0	@/
-*         uint32_t  cr3;	/@ 2C: control register 3	@/
-*         uint32_t  cr4;	/@ 30: control register 4	@/
-*         uint32_t  idtr;	/@ 34: IDT task register	@/
-*         uint32_t  gdtr;	/@ 38: GDT task register	@/
-*         uint32_t  ldtr;	/@ 3C: LDT task register	@/
-*         uint32_t  cs;		/@ 40: code segment		@/
-*         uint32_t  ss;		/@ 44: stack segment		@/
-*         uint32_t  ds;		/@ 48: data segment		@/
-*         uint32_t  es;		/@ 4C: E segment		@/
-*         uint32_t  fs;		/@ 50: F segment		@/
-*         uint32_t  gs;		/@ 54: G segment		@/
-*         uint32_t  tr;		/@ 58: task register		@/
-*         } VB_HREG_SET;
-*
-*\ce
-* SEE ALSO: NONE
-* 
-*/
-
-typedef struct			/* VBI_REG_SET - used for sys_regsRead/Write */
-    {
-    uint32_t  eax;		/* 00: general register		*/
-    uint32_t  ebx;		/* 04: general register		*/
-    uint32_t  ecx;		/* 08: general register		*/
-    uint32_t  edx;		/* 0C: general register		*/
-    uint32_t  esi;		/* 10: general register		*/
-    uint32_t  edi;		/* 14: general register		*/
-    uint32_t  eip;		/* 18: program counter		*/
-    uint32_t  ebp;		/* 1C: frame pointer register	*/
-    uint32_t  esp;		/* 20: stack pointer register	*/
-    uint32_t  eflags;		/* 24: status register		*/
-    uint32_t  cr0;		/* 28: control register 0	*/
-    uint32_t  cr3;		/* 2C: control register 3	*/
-    uint32_t  cr4;		/* 30: control register 4	*/
-    uint32_t  idtr;		/* 34: IDT task register	*/
-    uint32_t  gdtr;		/* 38: GDT task register	*/
-    uint32_t  ldtr;		/* 3C: LDT task register	*/
-    uint32_t  cs;		/* 40: code segment		*/
-    uint32_t  ss;		/* 44: stack segment		*/
-    uint32_t  ds;		/* 48: data segment		*/
-    uint32_t  es;		/* 4C: E segment		*/
-    uint32_t  fs;		/* 50: F segment		*/
-    uint32_t  gs;		/* 54: G segment		*/
-    uint32_t  tr;		/* 58: task register		*/
-    } VBI_HREG_SET;
-
-#endif /* _ASMLANGUAGE */
-
-/* x86 uses little endian byte ordering */
-
-#define __VBI_BYTE_ORDER __VBI_LITTLE_ENDIAN
-
-#define	VBI_X86_MAX_VECTORS         256	/* maximum number of vectors */
-#define VBI_ARCH_EXC_TABLE_SIZE     32
-#define VBI_ARCH_IRQ_TABLE_SIZE     (VBI_X86_MAX_VECTORS - VBI_ARCH_EXC_TABLE_SIZE)            
-
-#define	VBI_MAX_CORES		    8	/* maximum number of virtual cores */
-
-#define VBI_IN_DIVIDE_ERROR		 0
-#define VBI_IN_DEBUG			 1
-#define VBI_IN_NON_MASKABLE		 2
-#define VBI_IN_BREAKPOINT		 3
-#define VBI_IN_OVERFLOW			 4
-#define VBI_IN_BOUND			 5
-#define VBI_IN_INVALID_OPCODE		 6
-#define VBI_IN_NO_DEVICE		 7
-#define VBI_IN_DOUBLE_FAULT		 8
-#define VBI_IN_CP_OVERRUN		 9
-#define VBI_IN_INVALID_TSS		10
-#define VBI_IN_NO_SEGMENT		11
-#define VBI_IN_STACK_FAULT		12
-#define VBI_IN_PROTECTION_FAULT		13
-#define VBI_IN_PAGE_FAULT		14
-#define VBI_IN_RESERVED			15
-#define VBI_IN_CP_ERROR			16
-#define VBI_IN_ALIGNMENT		17
-#define VBI_IN_MACHINE_CHECK		18
-#define VBI_IN_SIMD			19
-
-/* 19-31 Intel reserved exceptions  */
-
-/* 32-255 user defined exceptions  */
-
-#define VBI_IN_EXT_IRQ_BASE		32	/* local timer interrupt */
-
-#define VBI_IN_EXT_IRQ0			(VBI_IN_EXT_IRQ_BASE + 0)	
-#define VBI_IN_EXT_IRQ1			(VBI_IN_EXT_IRQ_BASE + 1)	
-#define VBI_IN_EXT_IRQ2			(VBI_IN_EXT_IRQ_BASE + 2)	
-#define VBI_IN_EXT_IRQ3 		(VBI_IN_EXT_IRQ_BASE + 3)	
-#define VBI_IN_EXT_IRQ4			(VBI_IN_EXT_IRQ_BASE + 4)	
-#define VBI_IN_EXT_IRQ5			(VBI_IN_EXT_IRQ_BASE + 5)	
-#define VBI_IN_EXT_IRQ6			(VBI_IN_EXT_IRQ_BASE + 6)	
-#define VBI_IN_EXT_IRQ7			(VBI_IN_EXT_IRQ_BASE + 7)	
-#define VBI_IN_EXT_IRQ8			(VBI_IN_EXT_IRQ_BASE + 8)	
-#define VBI_IN_EXT_IRQ9			(VBI_IN_EXT_IRQ_BASE + 9)	
-#define VBI_IN_EXT_IRQ10		(VBI_IN_EXT_IRQ_BASE + 10)	
-#define VBI_IN_EXT_IRQ11		(VBI_IN_EXT_IRQ_BASE + 11)	
-#define VBI_IN_EXT_IRQ12		(VBI_IN_EXT_IRQ_BASE + 12)	
-#define VBI_IN_EXT_IRQ13		(VBI_IN_EXT_IRQ_BASE + 13)	
-#define VBI_IN_EXT_IRQ14		(VBI_IN_EXT_IRQ_BASE + 14)	
-#define VBI_IN_EXT_IRQ15		(VBI_IN_EXT_IRQ_BASE + 15)	
-#define VBI_IN_EXT_IRQ16		(VBI_IN_EXT_IRQ_BASE + 16)	
-#define VBI_IN_EXT_IRQ17		(VBI_IN_EXT_IRQ_BASE + 17)	
-#define VBI_IN_EXT_IRQ18		(VBI_IN_EXT_IRQ_BASE + 18)	
-#define VBI_IN_EXT_IRQ19		(VBI_IN_EXT_IRQ_BASE + 19)	
-#define VBI_IN_EXT_IRQ20		(VBI_IN_EXT_IRQ_BASE + 20)	
-#define VBI_IN_EXT_IRQ21		(VBI_IN_EXT_IRQ_BASE + 21)	
-#define VBI_IN_EXT_IRQ22		(VBI_IN_EXT_IRQ_BASE + 22)	
-#define VBI_IN_EXT_IRQ23		(VBI_IN_EXT_IRQ_BASE + 23)	
-#define VBI_IN_EXT_IRQ24		(VBI_IN_EXT_IRQ_BASE + 24)	
-#define VBI_IN_EXT_IRQ25		(VBI_IN_EXT_IRQ_BASE + 25)	
-#define VBI_IN_EXT_IRQ26		(VBI_IN_EXT_IRQ_BASE + 26)	
-#define VBI_IN_EXT_IRQ27		(VBI_IN_EXT_IRQ_BASE + 27)	
-#define VBI_IN_EXT_IRQ28		(VBI_IN_EXT_IRQ_BASE + 28)	
-#define VBI_IN_EXT_IRQ29		(VBI_IN_EXT_IRQ_BASE + 29)	
-#define VBI_IN_EXT_IRQ30		(VBI_IN_EXT_IRQ_BASE + 30)	
-#define VBI_IN_EXT_IRQ31		(VBI_IN_EXT_IRQ_BASE + 31)	
-#define VBI_IN_EXT_IRQ32		(VBI_IN_EXT_IRQ_BASE + 32)	
-#define VBI_IN_EXT_IRQ33		(VBI_IN_EXT_IRQ_BASE + 33)	
-#define VBI_IN_EXT_IRQ34		(VBI_IN_EXT_IRQ_BASE + 34)	
-#define VBI_IN_EXT_IRQ35		(VBI_IN_EXT_IRQ_BASE + 35)	
-#define VBI_IN_EXT_IRQ36		(VBI_IN_EXT_IRQ_BASE + 36)	
-#define VBI_IN_EXT_IRQ37		(VBI_IN_EXT_IRQ_BASE + 37)	
-#define VBI_IN_EXT_IRQ38		(VBI_IN_EXT_IRQ_BASE + 38)	
-#define VBI_IN_EXT_IRQ39		(VBI_IN_EXT_IRQ_BASE + 39)	
-#define VBI_IN_EXT_IRQ40		(VBI_IN_EXT_IRQ_BASE + 40)	
-#define VBI_IN_EXT_IRQ41		(VBI_IN_EXT_IRQ_BASE + 41)	
-#define VBI_IN_EXT_IRQ42		(VBI_IN_EXT_IRQ_BASE + 42)	
-#define VBI_IN_EXT_IRQ43		(VBI_IN_EXT_IRQ_BASE + 43)	
-#define VBI_IN_EXT_IRQ44		(VBI_IN_EXT_IRQ_BASE + 44)	
-#define VBI_IN_EXT_IRQ45		(VBI_IN_EXT_IRQ_BASE + 45)	
-#define VBI_IN_EXT_IRQ46		(VBI_IN_EXT_IRQ_BASE + 46)	
-#define VBI_IN_EXT_IRQ47		(VBI_IN_EXT_IRQ_BASE + 47)	
-
-/* timer vector */
-
-#define VBI_CLOCK_TIMER_VECTOR		(0)
-#define VBI_IN_APIC_TIMER		(VBI_IN_EXT_IRQ0)    
-#ifdef __cplusplus
-}
-#endif
-#endif /* __INCVbiX86Archh */
-- 
1.6.3.3

