From b78756a68e06b0f1b78f1f674a0dc6688d139adf Mon Sep 17 00:00:00 2001
From: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
Date: Thu, 25 Feb 2010 20:49:29 -0500
Subject: [PATCH] Guest physical address support

In order to provide support to the guests for virt to phys
the proper vdk/vbi call is needed as well as providing the
right address size to the callee.

The standard hypervisor expects a 64bit physical address
this is not the case for the MILS hypervisor.

Signed-off-by: Jeremy McNicoll <jeremy.mcnicoll@windriver.com>
---
 arch/powerpc/include/asm/pv_dma-mapping.h     |    4 ++
 arch/powerpc/include/asm/vdk_pv_dma-mapping.h |   63 +++++++++++++++++++++++++
 include/vbi/vdk_syscalls.h                    |   12 ++++-
 3 files changed, 78 insertions(+), 1 deletions(-)
 create mode 100644 arch/powerpc/include/asm/vdk_pv_dma-mapping.h

diff --git a/arch/powerpc/include/asm/pv_dma-mapping.h b/arch/powerpc/include/asm/pv_dma-mapping.h
index 3195ef3..352d891 100644
--- a/arch/powerpc/include/asm/pv_dma-mapping.h
+++ b/arch/powerpc/include/asm/pv_dma-mapping.h
@@ -1,3 +1,6 @@
+#ifdef CONFIG_WRHV_MILS
+#include <asm/vdk_pv_dma-mapping.h>
+#else
 #ifndef _ASM_PV_DMA_MAPPING_H
 #define _ASM_PV_DMA_MAPPING_H
 
@@ -76,3 +79,4 @@ paravirt_dma_map_single(struct device *dev, void *ptr, size_t size,
 #endif /* CONFIG_WRHV */
 
 #endif	/* _ASM_PV_DMA_MAPPING_H */
+#endif /* CONFIG_WRHV_MILS */
diff --git a/arch/powerpc/include/asm/vdk_pv_dma-mapping.h b/arch/powerpc/include/asm/vdk_pv_dma-mapping.h
new file mode 100644
index 0000000..469d24a
--- /dev/null
+++ b/arch/powerpc/include/asm/vdk_pv_dma-mapping.h
@@ -0,0 +1,63 @@
+#ifndef _ASM_PV_DMA_MAPPING_H
+#define _ASM_PV_DMA_MAPPING_H
+
+/* default native inline */
+#define dma_alloc_coherent	native_dma_alloc_coherent
+#define dma_map_single		native_dma_map_single
+
+/* redefine hypervisor specific inline */
+#undef dma_alloc_coherent
+#undef dma_map_single
+
+#define dma_alloc_coherent	paravirt_dma_alloc_coherent
+#define dma_map_single		paravirt_dma_map_single
+
+#include <vbi/vbi.h>
+
+static inline void *paravirt_dma_alloc_coherent(struct device *dev, size_t size,
+			dma_addr_t * dma_handle,
+			gfp_t gfp)
+{
+#ifdef CONFIG_NOT_COHERENT_CACHE
+	return __dma_alloc_coherent(size, dma_handle, gfp);
+#else
+	void *ret;
+	/* ignore region specifiers */
+	gfp &= ~(__GFP_DMA | __GFP_HIGHMEM);
+
+	if (dev == NULL || dev->coherent_dma_mask < 0xffffffff)
+		gfp |= GFP_DMA;
+
+	ret = (void *)__get_free_pages(gfp, get_order(size));
+
+	if (ret != NULL) {
+		void *paddr;
+		memset(ret, 0, size);
+		if (vbi_get_guest_dma_addr(ret,(void *) &paddr) == 0) {
+			*dma_handle = (dma_addr_t)paddr;
+		} else {
+			free_pages((unsigned long)ret, get_order(size));
+			ret = NULL;
+		}
+	}
+
+	return ret;
+#endif
+
+}
+
+static inline dma_addr_t
+paravirt_dma_map_single(struct device *dev, void *ptr, size_t size,
+	enum dma_data_direction direction)
+{
+	void *paddr;
+	BUG_ON(direction == DMA_NONE);
+
+	__dma_sync(ptr, size, direction);
+	if (vbi_get_guest_dma_addr(ptr,(void *) &paddr) == 0)
+		return (dma_addr_t)paddr;
+	else
+		return (dma_addr_t)NULL;
+
+}
+#endif	/* _ASM_PV_DMA_MAPPING_H */
diff --git a/include/vbi/vdk_syscalls.h b/include/vbi/vdk_syscalls.h
index 80693b1..b1d840d 100644
--- a/include/vbi/vdk_syscalls.h
+++ b/include/vbi/vdk_syscalls.h
@@ -412,7 +412,17 @@ extern int vbi_flush_icache (void *saddr, void *eaddr, unsigned size);
 extern int vbi_config_vmmu (struct vmmuConfig * config);
 extern int vbi_enable_vmmu (unsigned vmmu_num);
 extern int vbi_disable_vmmu (unsigned vmmu_num);
-extern int vbi_virt_to_phys (void * pVirtAddr, void *pPaddr);
+extern asmlinkage int vbi_virt_to_phys (void * pVirtAddr, void *pPaddr);
+
+static inline int32_t vbi_hy_ioctl(unsigned ioctl, void *arg1, void *arg2, \
+		void *arg3, void *arg4)
+{
+	if(ioctl == VBI_HYIOCTL_PADDR) {
+		return vbi_virt_to_phys(arg1, (void *)arg2);
+	}
+	else
+		return -1;
+}
 
 #endif	/* _ASMLANGUAGE */
 
-- 
1.7.0

