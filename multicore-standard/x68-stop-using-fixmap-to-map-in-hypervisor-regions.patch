From 963aaba709d0e45f2256d5be6ea66bcbbbea4f69 Mon Sep 17 00:00:00 2001
From: Jim Somerville <Jim.Somerville@windriver.com>
Date: Wed, 9 Dec 2009 12:47:14 -0800
Subject: [PATCH] x68: stop using fixmap to map in hypervisor regions

Instead use reservetop on the bootargs to set aside memory
space at the top of the address map.  Then map in the
hypervisor global regions directly.  This effectively
results in the exact same mapping as before, except that
we won't be interfering with a customer's potential use
of the fixmap mechanism.  This also removes one of our
hypervisor hooks, which is a good thing.

Signed-off-by: Zwane Mwaikambo <Zwane.Mwaikambo@windriver.com>
Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
---
 arch/x86/kernel/vbi/wrhv.c  |   42 +++++++++++++++++++++++++++++++-----------
 include/asm-x86/fixmap_32.h |    4 ----
 2 files changed, 31 insertions(+), 15 deletions(-)

diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index c687982..432df57 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -22,7 +22,6 @@
 #include <asm/paravirt.h>
 #include <asm/processor.h>
 #include <asm/wrhv.h>
-#include <asm/fixmap.h>
 #include <asm/pgtable.h>
 #include <asm/tlbflush.h>
 #include <do_timer.h>
@@ -36,6 +35,8 @@
 //#define WRHV_DEBUG_MSR	1
 #define WRHV_USE_XMLCONFIG	1
 #define WRHV_POLL_IRQ		7
+#define WRHV_RESERVED_PAGES	16
+#define WRHV_RESERVED_TOP	(WRHV_RESERVED_PAGES * PAGE_SIZE)
 
 /* Copied over during early bootstrap */
 struct vb_config __wr_config = { .pid = -1 };
@@ -90,35 +91,53 @@ static void wrhv_pre_intr_init_hook(void)
 }
 
 void wrhv_setup_timer_irq(void);
+
+static void __wrhv_map_page(unsigned long vaddr, unsigned long paddr,
+				pgprot_t prot) {
+	pte_t pte = pfn_pte(paddr >> PAGE_SHIFT, prot);
+	set_pte_vaddr(vaddr, pte);
+}
+
 void __init wrhv_init_IRQ(void)
 {
 	int i;
+	unsigned long addr;
 
-	/* This maps in hypervisor config/status/control space.
+	/* The following code maps in hypervisor config/status/control space.
 	   It has to be carefully crafted to be an identity mapping.  We ask
 	   for this space to be supplied to us from the hypervisor at
 	   address 0xffff0000 in the virtual board xml, and we essentially
-	   setup FIX_WRHV_END to be 16, representing 16 4K pages from the
+	   setup WRHV_RESERVED_PAGES to be 16, representing 16 4K pages from the
 	   end of address space.  This gives us the address 0xffff0000 in Linux
 	   which we need for a virt=phys aka identity mapping.  Why do we
 	   need this to be identity mapped?  Because this block of memory
 	   space is supplied by the hypervisor outside of Linux control, and
 	   it contains pointers to places within itself.  We really don't want
 	   to have to hunt down and modify all those pointers at run time to
-	   be a different (virtual) address.
+	   be a different (virtual) address.  And finally we tell Linux
+	   through the reservetop bootarg to actually move down the end of
+	   memory by the size in bytes represented by WRHV_RESERVED_PAGES
+	   so we don't interfere with Linux's fixmap facility.
+
+	   The numbers mentioned above are examples, but do reflect reality
+	   as of time of writing.  Please check your constants and do not
+	   rely on the numbers in the above paragraph.
 	*/
 	   
-	for (i=0; i<(FIX_WRHV_END - FIX_WRHV_START); i++) {
-		__set_fixmap(FIX_WRHV_END - i,
-			 (unsigned long)_wr_config+(i*PAGE_SIZE), PAGE_KERNEL);
-	}
+	addr = (unsigned long)_wr_config;
+	for (i = 0; i < WRHV_RESERVED_PAGES; addr += PAGE_SIZE, i++)
+		__wrhv_map_page(addr, addr, PAGE_KERNEL);
 
 	/* We no longer need to use the vbconfig copy, map it straight in */
-	wr_config = (struct vb_config *)fix_to_virt(FIX_WRHV_END);
+	wr_config = _wr_config;
 		
 	/* Setup the global variables used by the vbi */
 	vbi_init(wr_config);
 
+	/* Now that critical hypervisor global regions are mapped in,
+	   proceed with doing the actual interrupt initialization work.
+	*/
+
 	wrhv_pre_intr_init_hook();
 
 	for (i = 0; i < (NR_VECTORS - FIRST_EXTERNAL_VECTOR); i++) {
@@ -399,8 +418,9 @@ void wrhv_boot_config(void)
 	/* Use the config space copy here, since we haven't mapped in the
 	   actual hypervisor config/status/control space yet */
         snprintf(boot_command_line, COMMAND_LINE_SIZE,
-		"retain_initrd pci=conf1 idle=wrhv mem=nopentium serialnumber nolapic nomce nosep memmap=exactmap memmap=%dK@0 %s",
-		wr_config->phys_mem_size / 1024, wr_config->bootLine);
+		"retain_initrd pci=conf1 idle=wrhv mem=nopentium serialnumber nolapic nomce nosep memmap=exactmap memmap=%dK@0 reservetop=%d %s",
+		wr_config->phys_mem_size / 1024, (int)WRHV_RESERVED_TOP,
+		wr_config->bootLine);
 #endif
 }
 
diff --git a/include/asm-x86/fixmap_32.h b/include/asm-x86/fixmap_32.h
index f067f6e..f1ac2b2 100644
--- a/include/asm-x86/fixmap_32.h
+++ b/include/asm-x86/fixmap_32.h
@@ -53,10 +53,6 @@ extern unsigned long __FIXADDR_TOP;
  */
 enum fixed_addresses {
 	FIX_HOLE,
-#ifdef CONFIG_WRHV
-	FIX_WRHV_START,
-	FIX_WRHV_END = FIX_WRHV_START+15-1, /* Allow room to map hyp structs */
-#endif
 	FIX_VDSO,
 	FIX_DBGP_BASE,
 	FIX_EARLYCON_MEM_BASE,
-- 
1.6.5.2

