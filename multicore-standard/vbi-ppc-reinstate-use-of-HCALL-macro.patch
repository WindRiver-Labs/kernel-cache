From 92e48f963ab9a67197c64a05988a609566b60c0a Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 4 Nov 2009 14:07:46 -0500
Subject: [PATCH 01/22] vbi ppc: reinstate use of HCALL macro

After reviewing the original vbi reference, it was clear
that HCALL was introduced to override all syscalls with
one single syscall.  Restore it to match what is in the
reference implementation so that things are more in place
if VT support on PPC 85xx happens.

[cf: 02k,09sep09,dtr  Add guest mode hypercall instruction for e500mc]

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |   80 +++++++++++++++++++----------------
 1 files changed, 43 insertions(+), 37 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index db4ea85..d473f25 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -19,6 +19,12 @@
 #include <vbi/vbi.h>
 #include <asm/vbi.h>
 
+#ifdef CONFIG_PPC85xx_VT_MODE	/* not currently implemented */
+#define HCALL sc 1
+#else
+#define HCALL sc
+#endif
+
 /* globals */
 
 FUNC_EXPORT(vbiVcoreIntRed_op)
@@ -108,7 +114,7 @@ _WRS_TEXT_SEG_START
 FUNC_LABEL(vbiVbMgmt)
         lis r0, HI(VBI_SYS_vbMgmt)
         ori r0, r0, LO(VBI_SYS_vbMgmt)
-        sc
+        HCALL
         blr
 FUNC_END(vbiVbMgmt)
 
@@ -134,7 +140,7 @@ FUNC_END(vbiVbMgmt)
 FUNC_LABEL(vbiVbSuspend)
         lis r0, HI(VBI_SYS_vbSuspend)
         ori r0, r0, LO(VBI_SYS_vbSuspend)
-        sc
+        HCALL
         blr
 FUNC_END(vbiVbSuspend)
 
@@ -180,7 +186,7 @@ FUNC_END(vbiVbSuspend)
 FUNC_LABEL(vbiVbReset)
         lis r0, HI(VBI_SYS_vbReset)
         ori r0, r0, LO(VBI_SYS_vbReset)
-        sc
+        HCALL
         blr
 FUNC_END(vbiVbReset)
 
@@ -204,7 +210,7 @@ FUNC_END(vbiVbReset)
 FUNC_LABEL(vbiVbRestart)
         lis r0, HI(VBI_SYS_vbRestart)
         ori r0, r0, LO(VBI_SYS_vbRestart)
-        sc
+        HCALL
         blr
 FUNC_END(vbiVbRestart)
 
@@ -228,7 +234,7 @@ FUNC_END(vbiVbRestart)
 FUNC_LABEL(vbiVbResume)
         lis r0, HI(VBI_SYS_vbResume)
         ori r0, r0, LO(VBI_SYS_vbResume)
-        sc
+        HCALL
         blr
 FUNC_END(vbiVbResume)
 
@@ -244,7 +250,7 @@ FUNC_END(vbiVbResume)
 FUNC_LABEL(vbiSend)
 	lis r0, HI(VBI_SYS_send)
 	ori r0, r0, LO(VBI_SYS_send)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiSend)
 
@@ -258,7 +264,7 @@ FUNC_END(vbiSend)
 FUNC_LABEL(vbiReceiveOp)
 	lis r0, HI(VBI_SYS_receive)
 	ori r0, r0, LO(VBI_SYS_receive)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiReceiveOp)
 
@@ -274,7 +280,7 @@ FUNC_END(vbiReceiveOp)
 FUNC_LABEL(vbiReply)
 	lis r0, HI(VBI_SYS_reply)
 	ori r0, r0, LO(VBI_SYS_reply)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiReply)
 
@@ -289,7 +295,7 @@ FUNC_END(vbiReply)
 FUNC_LABEL(vbiKputs)
 	lis r0, HI(VBI_SYS_kputs)
 	ori r0, r0, LO(VBI_SYS_kputs)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiKputs)
 
@@ -304,7 +310,7 @@ FUNC_END(vbiKputs)
 FUNC_LABEL(vbiKputc)
 	lis r0, HI(VBI_SYS_kputc)
 	ori r0, r0, LO(VBI_SYS_kputc)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiKputc)
 
@@ -323,7 +329,7 @@ FUNC_END(vbiKputc)
 FUNC_LABEL(vbiPanic)
 	lis r0, HI(VBI_SYS_panic)
 	ori r0, r0, LO(VBI_SYS_panic)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiPanic)
 
@@ -346,7 +352,7 @@ FUNC_LABEL(vbiDebugShellStart)
 
 	lis r0, HI(VBI_SYS_dbgShStart)
 	ori r0, r0, LO(VBI_SYS_dbgShStart)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiDebugShellStart)
 
@@ -361,7 +367,7 @@ FUNC_END(vbiDebugShellStart)
 FUNC_LABEL(vbiIcacheFlush)
 	lis r0, HI(VBI_SYS_icache_flush)
 	ori r0, r0, LO(VBI_SYS_icache_flush)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiIcacheFlush)
 
@@ -375,7 +381,7 @@ FUNC_END(vbiIcacheFlush)
 FUNC_LABEL(vbiDcacheFlush)
 	lis r0, HI(VBI_SYS_dcache_flush)
 	ori r0, r0, LO(VBI_SYS_dcache_flush)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiDcacheFlush)
 
@@ -389,7 +395,7 @@ FUNC_END(vbiDcacheFlush)
 FUNC_LABEL(vbiTlbFlush)
 	lis r0, HI(VBI_SYS_tlb_flush)
 	ori r0, r0, LO(VBI_SYS_tlb_flush)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiTlbFlush)
 
@@ -418,7 +424,7 @@ tryAgain:
 
 	lis r0, HI(VBI_SYS_int_enable)
 	ori r0, r0, LO(VBI_SYS_int_enable)
-	sc
+	HCALL
 	b	tryAgain
 0:
 	blr
@@ -485,7 +491,7 @@ FUNC_LABEL(vbiExcBaseSet)
 	/* set the hypercall number */
 	lis r0, HI(VBI_SYS_hyIoctl)
 	ori r0, r0, LO(VBI_SYS_hyIoctl)
-	sc
+	HCALL
 	blr
 baseAlignError:
 	li r3, VBI_EXCBASE_SET_ERROR
@@ -518,7 +524,7 @@ FUNC_LABEL(vbiExcOffsetsSet)
 	/* set the hypercall number */
 	lis r0, HI(VBI_SYS_hyIoctl)
 	ori r0, r0, LO(VBI_SYS_hyIoctl)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiExcOffsetsSet)
 
@@ -539,7 +545,7 @@ FUNC_LABEL(vbiExcOffsetsGet)
 	/* set the hypercall number */
 	lis r0, HI(VBI_SYS_hyIoctl)
 	ori r0, r0, LO(VBI_SYS_hyIoctl)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiExcOffsetsGet)
 
@@ -553,7 +559,7 @@ FUNC_END(vbiExcOffsetsGet)
 FUNC_LABEL(vbiCacheTextUpdate)
 	lis r0, HI(VBI_SYS_cache_text_update)
 	ori r0, r0, LO(VBI_SYS_cache_text_update)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiCacheTextUpdate)
 
@@ -566,7 +572,7 @@ FUNC_END(vbiCacheTextUpdate)
 FUNC_LABEL(vbiVmmuConfig)
 	lis r0, HI(VBI_SYS_vmmu_config)
 	ori r0, r0, LO(VBI_SYS_vmmu_config)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVmmuConfig)
 
@@ -579,7 +585,7 @@ FUNC_END(vbiVmmuConfig)
 FUNC_LABEL(vbiVmmuEnable)
 	lis r0, HI(VBI_SYS_vmmu_enable)
 	ori r0, r0, LO(VBI_SYS_vmmu_enable)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVmmuEnable)
 
@@ -592,7 +598,7 @@ FUNC_END(vbiVmmuEnable)
 FUNC_LABEL(vbiVmmuDisable)
 	lis r0, HI(VBI_SYS_vmmu_disable)
 	ori r0, r0, LO(VBI_SYS_vmmu_disable)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVmmuDisable)
 
@@ -607,7 +613,7 @@ FUNC_END(vbiVmmuDisable)
 FUNC_LABEL(vbiVmmuTlbLoad)
 	lis r0, HI(VBI_SYS_vmmu_tlbload)
 	ori r0, r0, LO(VBI_SYS_vmmu_tlbload)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVmmuTlbLoad)
 
@@ -623,7 +629,7 @@ FUNC_END(vbiVmmuTlbLoad)
 FUNC_LABEL(vbiVmmuTlbFlush)
 	lis r0, HI(VBI_SYS_vmmu_tlbflush)
 	ori r0, r0, LO(VBI_SYS_vmmu_tlbflush)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVmmuTlbFlush)
 
@@ -646,7 +652,7 @@ FUNC_END(vbiVmmuTlbFlush)
 FUNC_LABEL(vbiHyIoctl)
 	lis r0, HI(VBI_SYS_hyIoctl)
 	ori r0, r0, LO(VBI_SYS_hyIoctl)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiHyIoctl)
 
@@ -664,7 +670,7 @@ FUNC_END(vbiHyIoctl)
 FUNC_LABEL(vbiCtxctl)
 	lis r0, HI(VBI_SYS_ctxctl)
 	ori r0, r0, LO(VBI_SYS_ctxctl)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiCtxctl)
 
@@ -683,7 +689,7 @@ FUNC_END(vbiCtxctl)
 FUNC_LABEL(vbiMemAttrSet)
 	lis r0, HI(VBI_SYS_mmu_attr_set)
 	ori r0, r0, LO(VBI_SYS_mmu_attr_set)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiMemAttrSet)
 
@@ -699,7 +705,7 @@ FUNC_END(vbiMemAttrSet)
 FUNC_LABEL(vbiMemAttrGet)
 	lis r0, HI(VBI_SYS_mmu_attr_get)
 	ori r0, r0, LO(VBI_SYS_mmu_attr_get)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiMemAttrGet)
 
@@ -718,7 +724,7 @@ FUNC_END(vbiMemAttrGet)
 FUNC_LABEL(vbiIoapicIoctl)
 	lis r0, HI(VBI_SYS_vIoapicIoctl)
 	ori r0, r0, LO(VBI_SYS_vIoapicIoctl)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiIoapicIoctl)
 
@@ -737,7 +743,7 @@ FUNC_END(vbiIoapicIoctl)
 FUNC_LABEL(vbiNsOp)
 	lis r0, HI(VBI_SYS_ns_op)
 	ori r0, r0, LO(VBI_SYS_ns_op)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiNsOp)
 
@@ -758,7 +764,7 @@ FUNC_END(vbiNsOp)
 FUNC_LABEL(vbiVbMemoryRead)
 	lis r0, HI(VBI_SYS_memRead_op)
 	ori r0, r0, LO(VBI_SYS_memRead_op)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVbMemoryRead)
 
@@ -784,7 +790,7 @@ FUNC_END(vbiVbMemoryRead)
 FUNC_LABEL(vbiVbMemoryWrite)
 	lis r0, HI(VBI_SYS_memWrite_op)
 	ori r0, r0, LO(VBI_SYS_memWrite_op)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVbMemoryWrite)
 
@@ -803,7 +809,7 @@ FUNC_END(vbiVbMemoryWrite)
 FUNC_LABEL(vbiIoapicOp)
 	lis r0, HI(VBI_SYS_vIoapicIoctl)
 	ori r0, r0, LO(VBI_SYS_vIoapicIoctl)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiIoapicOp)
 
@@ -818,7 +824,7 @@ FUNC_END(vbiIoapicOp)
 FUNC_LABEL(vbiVbRegisterRead)
 	lis r0, HI(VBI_SYS_RegsRead_op)
 	ori r0, r0, LO(VBI_SYS_RegsRead_op)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVbRegisterRead)
 
@@ -835,7 +841,7 @@ FUNC_END(vbiVbRegisterRead)
 FUNC_LABEL(vbiVbRegisterWrite)
 	lis r0, HI(VBI_SYS_RegsWrite_op)
 	ori r0, r0, LO(VBI_SYS_RegsWrite_op)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVbRegisterWrite)
 
@@ -845,6 +851,6 @@ FUNC_END(vbiVbRegisterWrite)
 FUNC_LABEL(vbiVcoreIntRed_op)
 	lis r0, HI(VBI_SYS_intRedirect)
 	ori r0, r0, LO(VBI_SYS_intRedirect)
-	sc
+	HCALL
 	blr
 FUNC_END(vbiVcoreIntRed_op)
-- 
1.6.5.2

