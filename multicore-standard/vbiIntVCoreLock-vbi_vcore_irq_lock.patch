From 32a9c928a64c29f6a7f9c9f371a3e8a7f39c8455 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 18 Nov 2009 10:07:23 -0500
Subject: [PATCH 32/80] vbiIntVCoreLock --> vbi_vcore_irq_lock

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/syscalls.S |    8 ++++----
 arch/x86/kernel/vbi/syscalls.S     |    6 +++---
 include/vbi/syscall.h              |    2 +-
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/syscalls.S b/arch/powerpc/kernel/vbi/syscalls.S
index cb61067..d8f7a50 100644
--- a/arch/powerpc/kernel/vbi/syscalls.S
+++ b/arch/powerpc/kernel/vbi/syscalls.S
@@ -49,7 +49,7 @@ FUNC_EXPORT(vbi_ps)
 FUNC_EXPORT(vbi_kputs)
 FUNC_EXPORT(vbi_kputc)
 FUNC_EXPORT(vbi_vcore_irq_unlock)
-FUNC_EXPORT(vbiIntVCoreLock)
+FUNC_EXPORT(vbi_vcore_irq_lock)
 FUNC_EXPORT(vbiIntVCoreStateGet)
 FUNC_EXPORT(vbiExcBaseSet)
 FUNC_EXPORT(vbiExcOffsetsSet)
@@ -436,14 +436,14 @@ FUNC_END(vbi_vcore_irq_unlock)
 
 /*
  *
- * vbiIntVCoreLock - lock interrupts
+ * vbi_vcore_irq_lock - lock interrupts
  *
  * This routine locks interrupts for the calling core. This is a C wrapper
  * function for VBI_INT_VCORE_LOCK() assembly macro. It locks interrupts returns
  * and returns the previous state of interrupts.
  *
  */
-FUNC_LABEL(vbiIntVCoreLock)
+FUNC_LABEL(vbi_vcore_irq_lock)
 	li	p1, -1
 #ifdef CONFIG_PPC85xx_VT_MODE
 	writeei	0
@@ -453,7 +453,7 @@ FUNC_LABEL(vbiIntVCoreLock)
 	lwz	p0, VB_CONTROL_INT_DISABLE(p2)
 	stw	p1, VB_CONTROL_INT_DISABLE(p2)
 	blr
-FUNC_END(vbiIntVCoreLock)
+FUNC_END(vbi_vcore_irq_lock)
 
 /*
  *
diff --git a/arch/x86/kernel/vbi/syscalls.S b/arch/x86/kernel/vbi/syscalls.S
index 329246e..dcd1f91 100644
--- a/arch/x86/kernel/vbi/syscalls.S
+++ b/arch/x86/kernel/vbi/syscalls.S
@@ -41,7 +41,7 @@
 .globl vbi_kputs
 .globl vbi_kputc
 .globl vbi_vcore_irq_unlock
-.globl vbiIntVCoreLock
+.globl vbi_vcore_irq_lock
 .globl vbiVbMgmt
 .globl vbiMemAttrSet
 .globl vbiMemAttrGet
@@ -190,14 +190,14 @@ vbi_vcore_irq_unlock:
 	ret
 
 /*
- * vbiIntVCoreLock - Disable interrupts in the virtual core
+ * vbi_vcore_irq_lock - Disable interrupts in the virtual core
  *
  * This call disables interrupts in the virtual board.
  *
  * Returns: the old value of the interrupt disable 
  *
  */
-vbiIntVCoreLock:
+vbi_vcore_irq_lock:
     pushf				/* push EFLAGS on stack */
     popl	%eax			/* get EFLAGS in EAX */
     andl	$EFLAGS_IF,%eax		/* mask it with IF bit */
diff --git a/include/vbi/syscall.h b/include/vbi/syscall.h
index 1b42305..02dbee6 100644
--- a/include/vbi/syscall.h
+++ b/include/vbi/syscall.h
@@ -133,7 +133,7 @@ extern asmlinkage vbiStatus_t  vbiMemAttrGet(void *vaddr, vbiMemAttr_t * attr);
  */
 
 extern asmlinkage vbiStatus_t vbi_vcore_irq_unlock(void);
-extern asmlinkage vbiIntState_t vbiIntVCoreLock(void);
+extern asmlinkage vbiIntState_t vbi_vcore_irq_lock(void);
 extern vbiStatus_t vbi_update_text_cache(void *saddr, size_t size);
 extern vbiStatus_t  vbiExcBaseSet(void * excTblBase);
 
-- 
1.6.5.2

