From eed20313e9614fb6dbf1f73cb19a5bd7a795e71e Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Thu, 29 Oct 2009 15:30:27 -0400
Subject: [PATCH 04/26] vbi: global typedef removal VB_CONFIG, VB_STATUS, etc.

Use of typedef in linux is strongly frowned upon. Strip
it from some of the major VBI structs as a starting point.
The following mapping has been made:

 VB_CONTROL     struct vb_control
 VB_CONFIG      struct vb_config
 VB_STATUS      struct vb_status

 VB_INT_INFO    struct vb_int_info
 VB_MEM_INFO    struct vb_mem_info
 VB_SM_INFO     struct vb_sm_info

 VBI_CLK_HOOK_INFO      struct vbi_clk_hook
 VBI_CLK_HOOK_INFO_PTR  struct vbi_clk_hook *

The old crap can still be used via include <vbi/compat.h>

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/powerpc/kernel/vbi/show.c            |    4 +-
 arch/powerpc/kernel/vbi/util.c            |   20 +++++------
 arch/powerpc/kernel/vbi/wrhv.c            |   12 +++---
 arch/powerpc/platforms/85xx/wrhv_8572ds.c |    8 ++--
 arch/x86/kernel/asm-offsets_32.c          |    2 +-
 arch/x86/kernel/vbi/wrhv.c                |   12 +++---
 include/vbi/compat.h                      |   15 ++++++++
 include/vbi/interface.h                   |   57 +++++++++++++----------------
 include/vbi/vbi.h                         |   25 ++++++-------
 kernel/vbi/interrupt.c                    |    4 +-
 kernel/vbi/lib.c                          |   13 +++----
 kernel/vbi/shmem.c                        |    8 ++--
 kernel/vbi/show.c                         |   18 +++++-----
 13 files changed, 101 insertions(+), 97 deletions(-)

diff --git a/arch/powerpc/kernel/vbi/show.c b/arch/powerpc/kernel/vbi/show.c
index c57c1b4..c0724eb 100644
--- a/arch/powerpc/kernel/vbi/show.c
+++ b/arch/powerpc/kernel/vbi/show.c
@@ -27,7 +27,7 @@
 
 void vbiStsRegsDisplay(void)
 {
-    VB_STATUS *p = VBI_STATUS_ADDR_GET();
+    struct vb_status *p = VBI_STATUS_ADDR_GET();
 
 #if CPU == PPC85XX /* don't know how to handle cpu variant */
     VB_PRINTF ("  srr0/srr1:          0x%08x 0x%08x\n", 
@@ -73,7 +73,7 @@ void vbiStsRegsDisplay(void)
 
 void vbiCtrlRegsDisplay(void)
 {
-    VB_CONTROL * p = VBI_CNTRL_ADDR_GET();
+    struct vb_control *p = VBI_CNTRL_ADDR_GET();
 
 #if CPU == PPC85XX /* don't know how to handler cpu variant */
     VB_PRINTF ("  srr0/srr1:           0x%08x 0x%08x\n", 
diff --git a/arch/powerpc/kernel/vbi/util.c b/arch/powerpc/kernel/vbi/util.c
index 5bccef5..d3ef0ca 100644
--- a/arch/powerpc/kernel/vbi/util.c
+++ b/arch/powerpc/kernel/vbi/util.c
@@ -37,9 +37,9 @@ para-virtualize linux, therefore, may need some tweaks to be generic.
  * MMU. For paravirualized linux, it is initialized in plaform_init().
  */
 
-extern VB_CONFIG *wrhvConfig;
-extern VB_STATUS *wrhvStatus;
-extern VB_CONTROL *wrhvControl;
+extern struct vb_config *wrhvConfig;
+extern struct vb_status *wrhvStatus;
+extern struct vb_control *wrhvControl;
 
 /* local */
 
@@ -49,21 +49,19 @@ extern void vmmuPageTableDisplay(VMMU_LEVEL_1_DESC *l1, int vmmuon);
 
 /* forward declarations */
 
+/*
+ * vb_memsize_get should not be called before wrhvConfig is initialized
+ */
 unsigned int vb_memsize_get(void)
 {
-	if ((VB_CONFIG *) - 1 == wrhvConfig) {
-		/* vb_memsize_get should not be called before wrhvConfig is init,
-		 * REALLY
-		 */
+	if (wrhvConfig == (struct vb_config *)(-1)) 
 		return 0;
-	}
-
 	return VBI_MEM_SIZE_GET();
 }
 
 unsigned int vb_context_get(void)
 {
-	if ((VB_CONFIG *) - 1 == wrhvConfig)
+	if (wrhvConfig == (struct vb_config *)(-1))
 		return 0xdeadbee0;
 	return VBI_CONTEXT_ID_GET();
 }
@@ -95,7 +93,7 @@ int vb_context_mmu_on(int pid,	/* context id */
 {
 	static VMMU_CONFIG vmmu_cfg;
 
-	if ((VB_CONFIG *) - 1 == wrhvConfig || NULL == pgtable || pagesize <= 0)
+	if (wrhvConfig == (struct vb_config *)(- 1) || pgtable == NULL || pagesize <= 0)
 		return -1;
 
 	vmmu_cfg.addr = (VMMU_LEVEL_1_DESC *) pgtable;
diff --git a/arch/powerpc/kernel/vbi/wrhv.c b/arch/powerpc/kernel/vbi/wrhv.c
index ffbbce1..8a6a997 100644
--- a/arch/powerpc/kernel/vbi/wrhv.c
+++ b/arch/powerpc/kernel/vbi/wrhv.c
@@ -115,10 +115,10 @@
 #include <linux/clocksource.h>
 #include <linux/hwtimer.h>
 
-static VB_CONFIG __wrhvConfig;
-VB_CONFIG *wrhvConfig;  /* TODO kernel relocation friendly ? */
-VB_CONTROL *wrhvControl;
-VB_STATUS *wrhvStatus;
+static struct vb_config __wrhvConfig;
+struct vb_config *wrhvConfig;		/* TODO kernel relocation friendly ? */
+struct vb_control *wrhvControl;
+struct vb_status *wrhvStatus;
 EXPORT_SYMBOL(wrhvConfig);
 
 void wrhv_mapping(void);
@@ -172,7 +172,7 @@ void wrhv_mapping(void)
 	/* map in vbConfig address */
 
 	/*
-         * WRHV VB_CONFIG should really add a length field for each
+         * WRHV vb_config should really add a length field for each
 	 * of the objected we mapped.  As the sizes are WRHV
 	 * implementation AND worse, configuration dependent.
 	 *
@@ -958,7 +958,7 @@ void wrhv_init(void)
 	 * vbi configuration. The vbi configuration space
 	 * is defined in Hypervisor linux.xml
 	 */
-	wrhvConfig = (VB_CONFIG *)0xF0000000;
+	wrhvConfig = (struct vb_config *)0xF0000000;
 	wrhvControl = wrhvConfig->vbControl;
 	wrhvStatus = wrhvConfig->vbStatus;
 
diff --git a/arch/powerpc/platforms/85xx/wrhv_8572ds.c b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
index 0330af7..abf30a7 100644
--- a/arch/powerpc/platforms/85xx/wrhv_8572ds.c
+++ b/arch/powerpc/platforms/85xx/wrhv_8572ds.c
@@ -36,9 +36,9 @@
 #include <asm/udbg.h>
 #include <asm/wrhv.h>
 
-extern VB_CONFIG	*wrhvConfig;
-extern VB_STATUS	*wrhvStatus;
-extern VB_CONTROL	*wrhvControl;
+extern struct vb_config *wrhvConfig;
+extern struct vb_status *wrhvStatus;
+extern struct vb_control *wrhvControl;
 
 static void __init wrhv_sbc85xx_pic_init(void)
 {
@@ -148,7 +148,7 @@ static int __init wrhv_8572ds_probe(void)
 	/* wrhvConfig should have been initialized in wrhv_init(),
 	 * continue to complete the vbi initialization here.
 	 */
-	wrhv_mapping(); /* Map VB_CONFIG structure */
+	wrhv_mapping(); /* Map vb_config structure */
 	vbiInit(wrhvConfig);
 
 	strncpy(cmd_line, VBI_BOOTLINE_ADDR_GET(), VB_MAX_BOOTLINE_LENGTH - 1);
diff --git a/arch/x86/kernel/asm-offsets_32.c b/arch/x86/kernel/asm-offsets_32.c
index b5d6370..f630804 100644
--- a/arch/x86/kernel/asm-offsets_32.c
+++ b/arch/x86/kernel/asm-offsets_32.c
@@ -122,7 +122,7 @@ void foo(void)
 
 #ifdef CONFIG_WRHV
 	BLANK();
-	DEFINE(WRHV_VB_CONFIG_SIZE, sizeof(VB_CONFIG));
+	DEFINE(WRHV_VB_CONFIG_SIZE, sizeof(struct vb_config));
 #endif
 
 #ifdef CONFIG_XEN
diff --git a/arch/x86/kernel/vbi/wrhv.c b/arch/x86/kernel/vbi/wrhv.c
index 03b82cc..429473e 100644
--- a/arch/x86/kernel/vbi/wrhv.c
+++ b/arch/x86/kernel/vbi/wrhv.c
@@ -46,11 +46,11 @@
 #define WRHV_POLL_IRQ		7
 
 /* Copied over during early bootstrap */
-VB_CONFIG __wrhvConfig = { .pid = -1 };
-VB_CONFIG *_wrhvConfig; /* Pointer passed from hypervisor */
-VB_CONFIG *wrhvConfig = &__wrhvConfig;
-VB_STATUS *wrhvStatus;
-VB_CONTROL *wrhvControl;
+struct vb_config __wrhvConfig = { .pid = -1 };
+struct vb_config *_wrhvConfig; /* Pointer passed from hypervisor */
+struct vb_config *wrhvConfig = &__wrhvConfig;
+struct vb_status *wrhvStatus;
+struct vb_control *wrhvControl;
 
 #ifdef CONFIG_PCI
 extern struct pci_ops pci_root_ops;
@@ -121,7 +121,7 @@ void __init wrhv_init_IRQ(void)
 	}
 
 	/* We no longer need to use the vbconfig copy, map it straight in */
-	wrhvConfig = (VB_CONFIG *)fix_to_virt(FIX_WRHV_END);
+	wrhvConfig = (struct vb_config *)fix_to_virt(FIX_WRHV_END);
 		
 	/* Setup the global variables used by the vbi */
 	vbiInit(wrhvConfig);
diff --git a/include/vbi/compat.h b/include/vbi/compat.h
index db1279d..89a9b32 100644
--- a/include/vbi/compat.h
+++ b/include/vbi/compat.h
@@ -28,4 +28,19 @@
 
 #include <vbi/vbi.h>
 
+/*
+ * These were particularly confusing, since there are similarly named
+ * macros used to map the bits within these structs.  Eeech.
+ */
+#define VB_CONTROL	struct vb_control
+#define VB_CONFIG	struct vb_config
+#define VB_STATUS	struct vb_status
+
+#define VB_INT_INFO	struct vb_int_info
+#define VB_MEM_INFO	struct vb_mem_info
+#define VB_SM_INFO	struct vb_sm_info
+
+#define VBI_CLK_HOOK_INFO	struct vbi_clk_hook
+#define VBI_CLK_HOOK_INFO_PTR	struct vbi_clk_hook *
+
 #endif  /* _VBI_COMPAT_H */
diff --git a/include/vbi/interface.h b/include/vbi/interface.h
index ca04d24..a62f817 100644
--- a/include/vbi/interface.h
+++ b/include/vbi/interface.h
@@ -179,7 +179,7 @@ typedef uint64_t VB_TIMESTAMP;
 #define VB_STATUS_INT_PENDING_INT	1	/* Interrupt controller */
 #define VB_STATUS_INT_PENDING_TICK	2	/* Tick interrupt */
 
-/* Assembler offsets for VB_STATUS */
+/* Assembler offsets for vb_status */
 #if !defined(_WRHV_ARCH_HAS_STATUS_REGS)
 #define VB_STATUS_REG_STRUCT_END	0
 #endif
@@ -201,7 +201,7 @@ typedef uint64_t VB_TIMESTAMP;
 #define VB_STATUS_VMMU1_HIGH		((4*8) + VB_STATUS_REG_STRUCT_END)
 #endif /* __VBI_BYTE_ORDER */
 
-/* Assembler offsets for VB_CONFIG */
+/* Assembler offsets for vb_config */
 #if (__VBI_BYTE_ORDER == __VBI_BIG_ENDIAN)
 #define VB_CONFIG_VBSTATUS		(((2+0) * 8) + 4)
 #define VB_CONFIG_VBCONTROL		(((2+1) * 8) + 4)
@@ -235,9 +235,9 @@ typedef uint64_t VB_TIMESTAMP;
 #ifndef	_ASMLANGUAGE
 
 /*
- * VB_CONTROL - Virtual board cores control structure
+ * vb_control - Virtual board cores control structure
  *
- * VB_CONTROL is a data type that defines a virtual core's control structure.
+ * vb_control is a data type that defines a virtual core's control structure.
  * This is called the control structure because a core uses to modify it's
  * state. The code running in the context of a virtual core puts the desired
  * setting in this control and passes to Hypervisor via Hypercall mechanism.
@@ -313,7 +313,7 @@ typedef uint64_t VB_TIMESTAMP;
  *
  */
 
-typedef struct vbControl
+struct vb_control
 {
 
 #ifdef  _WRHV_ARCH_HAS_CTRL_REGS	
@@ -336,13 +336,13 @@ typedef struct vbControl
 
 	uint32_t intPending;		/* actual virtual interrupt pending */
 
-} VB_CONTROL;
+};
 
 
 /*
- * VB_STATUS - Virtual board's core status structure
+ * vb_status - Virtual board's core status structure
  *
- * VB_STATUS is a C data type structure that provides the definition of
+ * vb_status is a C data type structure that provides the definition of
  * an area where the state of a given core is posted by Hypervisor
  * before a virtual core is scheduled to run. The fields of this
  * structure are architecture agnostic.  A pointer is provided to
@@ -402,7 +402,7 @@ typedef struct vbControl
  *
  */
 
-typedef struct vbStatus {
+struct vb_status {
 
 #ifdef _WRHV_ARCH_HAS_STATUS_REGS
 	VB_ARCH_STATUS_REGS  vbStatusRegs;
@@ -446,26 +446,19 @@ typedef struct vbStatus {
 
 	uint32_t sim;	
 
-} VB_STATUS;
-
-/*
- * Virtual board status page
- *
- * Read only page used to provide static configuration to the Virtual Board
- *
- */
+};
 
 /* Configuration information for interrupts */
-typedef struct vbIntInfo
+struct vb_int_info
 {
 	VB_WRHV_NAME intName;	/* the name of this interrupt */
 	uint16_t intDirection;	/* interrupt direction: INPUT_INT, OUTPUT_INT */
 	uint16_t intNumber;	/* the local VB interrupt number */
 	uint32_t intCore;	/* the receiving core for this incomming int */
-} VB_INT_INFO;
+};
 
 /* Information about a shared memory region */
-typedef struct vbSmInfo
+struct vb_sm_info
 {
 	VB_WRHV_NAME name;	/* the name of the shared memory region */
 				/* the vbphysical address of the region */
@@ -475,10 +468,10 @@ typedef struct vbSmInfo
 	uint32_t type;		/* shared memory type field */
 				/* id's of connected boards */
 	VB_ALIGN_FIELD_64 (void *boardIds, pad2);
-} VB_SM_INFO;
+};
 
 /* Information for the memory map info */
-typedef struct vbMemInfo
+struct vb_mem_info
 {
 	VB_WRHV_NAME name;	/* the name of the memory region */
 				/* the vbphysical address of the region */
@@ -486,7 +479,7 @@ typedef struct vbMemInfo
 	uint32_t length;	/* the length in bytes of the region */
 	uint32_t attr;		/* the MMU attributes of the region */
 	VB_WRHV_NAME type;		/* the type of the region */
-} VB_MEM_INFO;
+};
 
 
 /*
@@ -494,7 +487,7 @@ typedef struct vbMemInfo
  * the Virtual Board itself.  The address of this structure is passed as the
  * first parameter to the virtual board when it is started at its entry point.
  */
-typedef struct vbConfig
+struct vb_config
 {
 
 	/*
@@ -511,19 +504,19 @@ typedef struct vbConfig
 	 */
 
 	/* read-only status information */
-	VB_ALIGN_FIELD_64 (VB_STATUS *vbStatus, pad1);
+	VB_ALIGN_FIELD_64 (struct vb_status *vbStatus, pad1);
 
 	/* read-write control information */
-	VB_ALIGN_FIELD_64 (VB_CONTROL *vbControl, pad2);
+	VB_ALIGN_FIELD_64 (struct vb_control *vbControl, pad2);
 
 	/* shared memory information (memory map) */
-	VB_ALIGN_FIELD_64 (VB_SM_INFO *sharedMemoryRegionsConfigAddress, pad3);
+	VB_ALIGN_FIELD_64 (struct vb_sm_info *sharedMemoryRegionsConfigAddress, pad3);
 
 	/* memory regions information (memory map) */
-	VB_ALIGN_FIELD_64 (VB_MEM_INFO *memoryRegionsConfigAddress, pad4);
+	VB_ALIGN_FIELD_64 (struct vb_mem_info *memoryRegionsConfigAddress, pad4);
 
 	/* information about incoming and outgoing interrupt connections */
-	VB_ALIGN_FIELD_64 (VB_INT_INFO *interruptConfiguration, pad5);
+	VB_ALIGN_FIELD_64 (struct vb_int_info *interruptConfiguration, pad5);
 
 	/*
 	 *  general board specific configuration information
@@ -599,10 +592,10 @@ typedef struct vbConfig
 	/* direct function call interface table */
 
 #if defined (_WRHV_ARCH_HAS_VB_SYSTBL)
-	VB_ALIGN_FIELD_64 (VB_SYSCALL *vbSyscallTable, pad9);
-	VB_ALIGN_FIELD_64 (VB_SYSCALL_STUB2 *vbSyscallStub2, pad10);
+	VB_ALIGN_FIELD_64 (struct vb_syscall *vbSyscallTable, pad9);
+	VB_ALIGN_FIELD_64 (struct vb_syscall_stub2 *vbSyscallStub2, pad10);
 #endif
-} VB_CONFIG;
+};
 
 #endif /*_ASMLANGUAGE */
 #endif  /* _VBI_INTERFACE_H */
diff --git a/include/vbi/vbi.h b/include/vbi/vbi.h
index 4519505..0284233 100644
--- a/include/vbi/vbi.h
+++ b/include/vbi/vbi.h
@@ -498,26 +498,25 @@ various data structures.
 
 #define VBI_PANIC(vector, halt)					\
 {								\
-	VB_PRINTF ("core%d: unhandled exception: 0x%x\n",	\
+	VB_PRINTF("core%d: unhandled exception: 0x%x\n",	\
 		wrhvVbConfig->coreId, vector);			\
 	if (halt)						\
         	vbiPanic("unhandled exception");		\
 }							 
 
-/* typedefs */
-typedef struct vbiClkHook
+struct vbi_clk_hook
 {
 	void (*rtn)(void *pArg);
 	void * pArg;
-} VBI_CLK_HOOK_INFO, * VBI_CLK_HOOK_INFO_PTR;
+};
 
 /* externs */
 
-extern VB_CONFIG *wrhvVbConfig;
-extern VB_STATUS *wrhvVbStatus;
-extern VB_CONTROL *wrhvVbControl;
+extern struct vb_config *wrhvVbConfig;
+extern struct vb_status *wrhvVbStatus;
+extern struct vb_control *wrhvVbControl;
 extern int32_t wrhvVbIntNested;
-extern void vbiInit(VB_CONFIG *config);
+extern void vbiInit(struct vb_config *config);
 extern void vbiExcStub(void);
 extern void ASSERT_FN(const char *, const char *, int);
 extern void vbiIdle(uint64_t);
@@ -539,11 +538,11 @@ extern vbiStatus_t vbiGuestPhysToPhysAddr(vbiGuestPhysAddr_t gaddr,
 				vbiPhysAddr_t  *paddr);
 
 extern void vbiVioapicDisplay(void);
-extern void vbiSharedMemoryShow(VB_CONFIG *config);
-extern void vbiStatusShow(VB_STATUS *p);
-extern void vbiControlShow(VB_CONTROL *p);
-extern void vbiConfigShow(VB_CONFIG *p);
-extern void vbiMemoryShow(VB_CONFIG *config);
+extern void vbiSharedMemoryShow(struct vb_config *config);
+extern void vbiStatusShow(struct vb_status *p);
+extern void vbiControlShow(struct vb_control *p);
+extern void vbiConfigShow(struct vb_config *p);
+extern void vbiMemoryShow(struct vb_config *config);
 extern void vbiStsRegsDisplay(void);
 extern void vbiCtrlRegsDisplay(void);
 
diff --git a/kernel/vbi/interrupt.c b/kernel/vbi/interrupt.c
index c538284..7a030ed 100644
--- a/kernel/vbi/interrupt.c
+++ b/kernel/vbi/interrupt.c
@@ -45,8 +45,8 @@
 
 vbiIrq_t vbiIntVecFind(char *intName, int32_t intDirection)
 {
-	VB_CONFIG *config = VBI_CONFIG_ADDR_GET();
-	VB_INT_INFO *info = config->interruptConfiguration;
+	struct vb_config *config = VBI_CONFIG_ADDR_GET();
+	struct vb_int_info *info = config->interruptConfiguration;
 	int32_t num  = config->numInts;
 	int32_t i;
 
diff --git a/kernel/vbi/lib.c b/kernel/vbi/lib.c
index 301324b..12d9820 100644
--- a/kernel/vbi/lib.c
+++ b/kernel/vbi/lib.c
@@ -105,15 +105,14 @@ wrhvControl.
 #include <linux/module.h>
 #include <vbi/vbi.h>
 
-VB_CONFIG *wrhvVbConfig;  /* The address of the core's Config area
-                            * This value is passed to the virtual board
-                            * as the first parameter upon startup
-                            */
+struct vb_config *wrhvVbConfig;	/* The address of the core's Config area
+				 * This value is passed to the virtual board
+				 * as the first parameter upon startup */
 EXPORT_SYMBOL(wrhvVbConfig);
 
-VB_CONTROL *wrhvVbControl; /* The address of the core's Control area */
+struct vb_control *wrhvVbControl; /* The address of the core's Control area */
 
-VB_STATUS *wrhvVbStatus;  /* The address of the core's Status area */
+struct vb_status *wrhvVbStatus;  /* The address of the core's Status area */
 
 int32_t wrhvVbIntNested; /* Used by VBI interrupt/exception management */
 
@@ -142,7 +141,7 @@ int32_t wrhvVbIntNested; /* Used by VBI interrupt/exception management */
 *
 */
 
-void vbiInit(VB_CONFIG *config)
+void vbiInit(struct vb_config *config)
 {
 
     /*
diff --git a/kernel/vbi/shmem.c b/kernel/vbi/shmem.c
index 9ea9cae..9e4ae03 100644
--- a/kernel/vbi/shmem.c
+++ b/kernel/vbi/shmem.c
@@ -53,8 +53,8 @@ Alternatively the following macros can be used to obtained similar information
 vbiStatus_t vbiShmemRegionFind(int8_t *smName, void **addr,
 				 uint32_t *length, uint32_t *attr)
 {
-	VB_CONFIG *config = VBI_CONFIG_ADDR_GET();
-	VB_SM_INFO *info = config->sharedMemoryRegionsConfigAddress;
+	struct vb_config *config = VBI_CONFIG_ADDR_GET();
+	struct vb_sm_info *info = config->sharedMemoryRegionsConfigAddress;
 	int32_t num = config->numSm;
 	int32_t i;
 
@@ -88,8 +88,8 @@ EXPORT_SYMBOL(vbiShmemRegionFind);
 vbiStatus_t vbiMemRegionFind(int8_t *name, void **addr,
 				 uint32_t *length, uint32_t *attr)
 {
-	VB_CONFIG *config = VBI_CONFIG_ADDR_GET();
-	VB_MEM_INFO *info = config->memoryRegionsConfigAddress;
+	struct vb_config *config = VBI_CONFIG_ADDR_GET();
+	struct vb_mem_info *info = config->memoryRegionsConfigAddress;
 	int32_t num  = config->numMem;
 	int32_t i;
 
diff --git a/kernel/vbi/show.c b/kernel/vbi/show.c
index 141cbf7..4a08562 100644
--- a/kernel/vbi/show.c
+++ b/kernel/vbi/show.c
@@ -35,9 +35,9 @@ control and configuration data structures.
  *
  */
 
-void vbiSharedMemoryShow(VB_CONFIG *config)
+void vbiSharedMemoryShow(struct vb_config *config)
 {
-	VB_SM_INFO *p = config->sharedMemoryRegionsConfigAddress;
+	struct vb_sm_info *p = config->sharedMemoryRegionsConfigAddress;
 	int numSm = config->numSm;
 	void *pState = config->sharedMemoryRegionsStateAddress;
 	int i;
@@ -64,9 +64,9 @@ void vbiSharedMemoryShow(VB_CONFIG *config)
  * RETURNS: returns OK or errno in case of failure
  *
  */
-void vbiMemoryShow(VB_CONFIG *config)
+void vbiMemoryShow(struct vb_config *config)
 {
-	VB_MEM_INFO *p = config->memoryRegionsConfigAddress;
+	struct vb_mem_info *p = config->memoryRegionsConfigAddress;
 	int numSm = config->numMem;
 	int i;
 
@@ -89,9 +89,9 @@ void vbiMemoryShow(VB_CONFIG *config)
  * board and displays the information on hypervisor console.
  *
  */
-static void vbiInterruptsShow(VB_CONFIG *config)
+static void vbiInterruptsShow(struct vb_config *config)
 {
-	VB_INT_INFO * p = config->interruptConfiguration;
+	struct vb_int_info *p = config->interruptConfiguration;
 	int numInt = config->numInts;
 	int i;
 
@@ -113,7 +113,7 @@ static void vbiInterruptsShow(VB_CONFIG *config)
  * This routine displays information in the status structure for a given board.
  *
  */
-void vbiStatusShow(VB_STATUS *p)
+void vbiStatusShow(struct vb_status *p)
 {
 	VB_PRINTF("VB status: 0x%x\n", p);
 
@@ -131,7 +131,7 @@ void vbiStatusShow(VB_STATUS *p)
  * This routine displays information in the control structure for a given board.
  *
  */
-void vbiControlShow(VB_CONTROL *p)
+void vbiControlShow(struct vb_control *p)
 {
 	int i;
 
@@ -158,7 +158,7 @@ void vbiControlShow(VB_CONTROL *p)
  *
  */
 
-void vbiConfigShow(VB_CONFIG *p)
+void vbiConfigShow(struct vb_config *p)
 {
 	VB_PRINTF("VB config data: 0x%x\n", p);
 
-- 
1.6.5.2

