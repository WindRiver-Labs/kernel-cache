From c0bce28275503e945399e074cdf5c0045396e539 Mon Sep 17 00:00:00 2001
From: Ihar Hrachyshka <ihrachys@redhat.com>
Date: Thu, 18 May 2017 12:41:21 -0700
Subject: [PATCH 4/4] arp: always override existing neigh entries with
 gratuitous ARP

commit 7d472a59c0e5ec117220a05de6b370447fb6cb66 upstream

Currently, when arp_accept is 1, we always override existing neigh
entries with incoming gratuitous ARP replies. Otherwise, we override
them only if new replies satisfy _locktime_ conditional (packets arrive
not earlier than _locktime_ seconds since the last update to the neigh
entry).

The idea behind locktime is to pick the very first (=> close) reply
received in a unicast burst when ARP proxies are used. This helps to
avoid ARP thrashing where Linux would switch back and forth from one
proxy to another.

This logic has nothing to do with gratuitous ARP replies that are
generally not aligned in time when multiple IP address carriers send
them into network.

This patch enforces overriding of existing neigh entries by all incoming
gratuitous ARP packets, irrespective of their time of arrival. This will
make the kernel honour all incoming gratuitous ARP packets.

Signed-off-by: Ihar Hrachyshka <ihrachys@redhat.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

(cherry-picked from 7d472a59c0e5ec117220a05de6b370447fb6cb66)

refer to commit 30bbaa19500559d7625c65632195413f639b3b97 upstream
refer to commit 6fd05633bdafc0ae6ec0d55e61af10780d4d3530 upstream

inet_addr_type() and arp_is_garp() is the old interface,use them
to judge whether it is gratuitous ARP here.

Signed-off-by: Jibin Xu <jibin.xu@windriver.com>
---
 net/ipv4/arp.c |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/net/ipv4/arp.c b/net/ipv4/arp.c
index b2eb8c7..a96fcd6 100644
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@ -912,13 +912,17 @@ static int arp_process(struct sk_buff *skb)
 
 	n = __neigh_lookup(&arp_tbl, &sip, dev, 0);
 
+	if (n || IN_DEV_ARP_ACCEPT(in_dev)) {
+ 		addr_type = inet_addr_type(net, sip);
+		is_garp = arp_is_garp(dev, addr_type, arp->ar_op,
+				      sip, tip, sha, tha);
+	}
+
 	if (IN_DEV_ARP_ACCEPT(in_dev)) {
 		/* Unsolicited ARP is not accepted by default.
 		   It is possible, that this option should be enabled for some
 		   devices (strip is candidate)
 		 */
-		is_garp = arp_is_garp(dev, addr_type, arp->ar_op,
-				      sip, tip, sha, tha);
 		if (n == NULL &&
 		    ((arp->ar_op == htons(ARPOP_REPLY)  &&
 		      inet_addr_type(net, sip) == RTN_UNICAST) || is_garp))
-- 
1.7.5.4

