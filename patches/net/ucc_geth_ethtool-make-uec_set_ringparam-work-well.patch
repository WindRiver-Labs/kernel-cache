From 802b2754f9b81a6f5d255a12b2d47d07d637e72f Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Wed, 9 Jun 2010 16:10:48 +0800
Subject: [PATCH] ucc_geth_ethtool: make uec_set_ringparam work well.

Add assertion of critical condtion value to make sure
uec_set_ringparam work well.

Signed-off-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/net/ucc_geth.h         |    6 +++---
 drivers/net/ucc_geth_ethtool.c |   20 ++++++++++++++------
 2 files changed, 17 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ucc_geth.h b/drivers/net/ucc_geth.h
index 47ac71e..45ddc4d 100644
--- a/drivers/net/ucc_geth.h
+++ b/drivers/net/ucc_geth.h
@@ -901,13 +901,13 @@ struct ucc_geth_hardware_statistics {
 #define UCC_GETH_TX_VTAG_TABLE_ENTRY_MAX        8
 #define UCC_GETH_RX_BD_RING_SIZE_MIN            8
 #define UCC_GETH_TX_BD_RING_SIZE_MIN            2
-#define UCC_GETH_BD_RING_SIZE_MAX		0xffff
+#define UCC_GETH_BD_RING_SIZE_MAX		0x200
 
 #define UCC_GETH_SIZE_OF_BD                     QE_SIZEOF_BD
 
 /* Driver definitions */
-#define TX_BD_RING_LEN                          0x10
-#define RX_BD_RING_LEN                          0x10
+#define TX_BD_RING_LEN                          0x200
+#define RX_BD_RING_LEN                          0x200
 #define UCC_GETH_DEV_WEIGHT                     TX_BD_RING_LEN
 
 #define TX_RING_MOD_MASK(size)                  (size-1)
diff --git a/drivers/net/ucc_geth_ethtool.c b/drivers/net/ucc_geth_ethtool.c
index cfbbfee..702b536 100644
--- a/drivers/net/ucc_geth_ethtool.c
+++ b/drivers/net/ucc_geth_ethtool.c
@@ -243,9 +243,11 @@ uec_set_ringparam(struct net_device *netdev,
 	struct ucc_geth_info *ug_info = ugeth->ug_info;
 	int queue = 0, ret = 0;
 
-	if (ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN) {
-		printk("%s: RxBD ring size must be no smaller than %d.\n",
-			       	netdev->name, UCC_GETH_RX_BD_RING_SIZE_MIN);
+	if (ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN || 
+		ring->rx_pending > UCC_GETH_BD_RING_SIZE_MAX) {
+		printk("%s: RxBD ring size must be in the range:[%d, %d].\n",
+		       	netdev->name, UCC_GETH_RX_BD_RING_SIZE_MIN,
+			UCC_GETH_BD_RING_SIZE_MAX);
 		return -EINVAL;
 	}
 	if (ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT) {
@@ -253,9 +255,15 @@ uec_set_ringparam(struct net_device *netdev,
 			netdev->name, UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT);
 		return -EINVAL;
 	}
-	if (ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN) {
-		printk("%s: TxBD ring size must be no smaller than %d.\n",
-				netdev->name, UCC_GETH_TX_BD_RING_SIZE_MIN);
+	if (ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN || 
+		ring->tx_pending > UCC_GETH_BD_RING_SIZE_MAX ) {
+		printk("%s:  TxBD ring size must be in the range:[%d, %d].\n",
+				netdev->name, UCC_GETH_TX_BD_RING_SIZE_MIN,
+				UCC_GETH_BD_RING_SIZE_MAX);
+		return -EINVAL;
+	}
+	if (!is_power_of_2(ring->tx_pending)) {
+		printk("%s: Ring sizes must be a power of 2\n",netdev->name);
 		return -EINVAL;
 	}
 
-- 
1.6.0.4

