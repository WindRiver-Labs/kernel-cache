From 041e891381d1463c34b7894b95eddef98499eb9f Mon Sep 17 00:00:00 2001
From: Willem de Bruijn <willemb@google.com>
Date: Wed, 14 Nov 2018 17:35:48 +0800
Subject: [PATCH 1/2] packet: in packet_do_bind, test fanout with bind_lock
 held

commit 4971613c1639d8e5f102c4e797c3bf8f83a5a69e upstream

Once a socket has po->fanout set, it remains a member of the group
until it is destroyed. The prot_hook must be constant and identical
across sockets in the group.

If fanout_add races with packet_do_bind between the test of po->fanout
and taking the lock, the bind call may make type or dev inconsistent
with that of the fanout group.

Hold po->bind_lock when testing po->fanout to avoid this race.

I had to introduce artificial delay (local_bh_enable) to actually
observe the race.

Fixes: dc99f600698d ("packet: Add fanout support.")
Signed-off-by: Willem de Bruijn <willemb@google.com>
Reviewed-by: Eric Dumazet <edumazet@google.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 net/packet/af_packet.c |    8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 48f9048..232028b 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2671,16 +2671,16 @@ static int packet_do_bind(struct sock *sk, struct net_device *dev, __be16 proto)
 	__be16 proto_curr;
 	bool need_rehook;
 
+	lock_sock(sk);
+	spin_lock(&po->bind_lock);
+
 	if (po->fanout) {
 		if (dev)
 			dev_put(dev);
 
-		return -EINVAL;
+		goto out_unlock;
 	}
 
-	lock_sock(sk);
-	spin_lock(&po->bind_lock);
-
 	proto_curr = po->prot_hook.type;
 	dev_curr = po->prot_hook.dev;
 
-- 
1.7.9.5

