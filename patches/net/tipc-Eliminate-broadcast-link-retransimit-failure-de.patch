From ee607676db71503253265e112ed0c9dbd5cc900b Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Fri, 30 May 2014 10:42:03 +0800
Subject: [PATCH] tipc: Eliminate broadcast link retransimit failure deadlock
 problem

Prevents deadlock from occurring during broadcast link retransmit
failure recovery. The problem arises if the thread handling the
broadcast link retransmit request takes the broadcast link lock
at the start of processing and then takes the node lock for the
requesting node once retransmission failure is declared; if another
thread simultaneously attempts to acknowledge receipt of broadcast
messages from that node -- meaning it first takes the node lock for
the node and then takes the broadcast link lock -- deadlock occurs.

Deadlock path:
CPU 1: tipc_recv_msg()->tipc_bclink_recv_pkt()->spin_lock_bh(&bc_lock)
       ->bclink_retransmit_pkt()->tipc_link_retransmit()->link_retransmit_failure()
       -> tipc_node_lock(n_ptr)
CPU 2: tipc_recv_msg()->tipc_node_lock(n_ptr)->tipc_bclink_acknowledge()
       -> spin_lock_bh(&bc_lock)

Deadlock is now prevented by relocating the code that prints out
state information about the retransmit failure to a different thread
of control that already takes the node lock safely; this eliminates
the need for the first thread to take the node lock.

Signed-off-by: Ying Xue <ying.xue@windriver.com>
Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 net/tipc/link.c |   21 ++++++++-------------
 1 files changed, 8 insertions(+), 13 deletions(-)

diff --git a/net/tipc/link.c b/net/tipc/link.c
index b4b9b30..a30d8ec 100644
--- a/net/tipc/link.c
+++ b/net/tipc/link.c
@@ -1456,6 +1456,14 @@ static void link_reset_all(unsigned long addr)
 
 	tipc_node_lock(n_ptr);
 
+	info("Broadcast link info for %s\n", addr_string);
+	info("Supportable: %d,  ", n_ptr->bclink.supportable);
+	info("Supported: %d,  ", n_ptr->bclink.supported);
+	info("Acked: %u\n", n_ptr->bclink.acked);
+	info("Last in: %u,  ", n_ptr->bclink.last_in);
+	info("Oos state: %u,  ", n_ptr->bclink.oos_state);
+	info("Last sent: %u\n", n_ptr->bclink.last_sent);
+
 	warn("Resetting all links to %s\n",
 	     tipc_addr_string_fill(addr_string, n_ptr->addr));
 
@@ -1489,28 +1497,15 @@ static void link_retransmit_failure(struct tipc_link *l_ptr,
 		/* Handle failure on broadcast link */
 
 		struct tipc_node *n_ptr;
-		char addr_string[16];
 
 		info("Msg seq number: %u,  ", msg_seqno(msg));
 		info("Outstanding acks: %lu\n",
 		     (unsigned long) TIPC_SKB_CB(buf)->handle);
 
 		n_ptr = tipc_bclink_retransmit_to();
-		tipc_node_lock(n_ptr);
-
-		tipc_addr_string_fill(addr_string, n_ptr->addr);
-		info("Broadcast link info for %s\n", addr_string);
-		info("Supportable: %d,  ", n_ptr->bclink.supportable);
-		info("Supported: %d,  ", n_ptr->bclink.supported);
-		info("Acked: %u\n", n_ptr->bclink.acked);
-		info("Last in: %u,  ", n_ptr->bclink.last_in);
-		info("Oos state: %u,  ", n_ptr->bclink.oos_state);
-		info("Last sent: %u\n", n_ptr->bclink.last_sent);
 
 		tipc_k_signal((Handler)link_reset_all, (unsigned long)n_ptr->addr);
 
-		tipc_node_unlock(n_ptr);
-
 		l_ptr->stale_count = 0;
 	}
 }
-- 
1.7.5.4

