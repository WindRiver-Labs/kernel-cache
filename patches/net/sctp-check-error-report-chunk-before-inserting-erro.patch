From 45cabb47db4600f123c9b96095c51fe68b6098f3 Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Mon, 26 Apr 2010 09:56:33 +0800
Subject: [PATCH] sctp: check error report chunk before inserting error info

For some well designed attack packages, SCTP will create too many error info
that make the error report chunk overflow thus cause a kernel panic. Add a
space check to avoid it.

Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 net/sctp/sm_make_chunk.c |   27 ++++++++++++++++++++++-----
 1 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/net/sctp/sm_make_chunk.c b/net/sctp/sm_make_chunk.c
index e2c1801..2257fe2 100644
--- a/net/sctp/sm_make_chunk.c
+++ b/net/sctp/sm_make_chunk.c
@@ -80,6 +80,15 @@ static int sctp_process_param(struct sctp_association *asoc,
 static void *sctp_addto_param(struct sctp_chunk *chunk, int len,
 			      const void *data);
 
+/* Check the chunk if it can hold an error report with err_len bytes */
+static inline int sctp_verify_errp_space(struct sctp_chunk *chunk, int err_len)
+{
+	int len = ntohs(chunk->chunk_hdr->length);
+
+	len = (WORD_ROUND(len) - len) + sizeof(sctp_errhdr_t) + err_len;
+	return (len <= chunk->skb->end - chunk->skb->tail);
+}
+
 /* What was the inbound interface for this chunk? */
 int sctp_chunk_iif(const struct sctp_chunk *chunk)
 {
@@ -1953,6 +1962,7 @@ static sctp_ierror_t sctp_process_unk_param(const struct sctp_association *asoc,
 					    struct sctp_chunk **errp)
 {
 	int retval = SCTP_IERROR_NO_ERROR;
+	int len;
 
 	switch (param.p->type & SCTP_PARAM_ACTION_MASK) {
 	case SCTP_PARAM_ACTION_DISCARD:
@@ -1964,6 +1974,7 @@ static sctp_ierror_t sctp_process_unk_param(const struct sctp_association *asoc,
 		retval =  SCTP_IERROR_ERROR;
 		/* Fall through */
 	case SCTP_PARAM_ACTION_SKIP_ERR:
+		len = ntohs(param.p->length);
 		/* Make an ERROR chunk, preparing enough room for
 		 * returning multiple unknown parameters.
 		 */
@@ -1972,11 +1983,17 @@ static sctp_ierror_t sctp_process_unk_param(const struct sctp_association *asoc,
 					ntohs(chunk->chunk_hdr->length));
 
 		if (*errp) {
-			sctp_init_cause(*errp, SCTP_ERROR_UNKNOWN_PARAM,
-					WORD_ROUND(ntohs(param.p->length)));
-			sctp_addto_chunk(*errp,
-					WORD_ROUND(ntohs(param.p->length)),
-					param.v);
+			/* Check to see if the errp chunk has enough space to
+			 * report the ERROR param. */
+			if (!sctp_verify_errp_space(*errp, WORD_ROUND(len))) {
+				SCTP_DEBUG_PRINTK("errp doesn't have enough "
+					"space to report error param %d, "
+					"discard it.\n", param.p->type);
+				break;
+			}
+			sctp_init_cause(*errp, SCTP_ERROR_UNKNOWN_PARAM, 
+					WORD_ROUND(len));
+			sctp_addto_chunk(*errp,	WORD_ROUND(len), param.v);
 		} else {
 			/* If there is no memory for generating the ERROR
 			 * report as specified, an ABORT will be triggered
-- 
1.6.0.4

