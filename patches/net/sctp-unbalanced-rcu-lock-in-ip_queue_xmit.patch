From 95ac2b37a75840ed4be16b8e67ec9d51a8ed28d6 Mon Sep 17 00:00:00 2001
From: yanjun.zhu <yanjun.zhu@windriver.com>
Date: Thu, 21 Aug 2014 18:04:29 +0800
Subject: [PATCH 2/2] sctp: unbalanced rcu lock in ip_queue_xmit()

commit 8663707a797e6a473c32cf08eb7597543bbdae79 from 2.6.32 linux-stable
at git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git

The bug was introduced in 2.6.32.61 by commit b8710128e201 ("inet: add RCU
protection to inet->opt") (it's a backport of upstream commit f6d8bd051c39).

In SCTP case, packet is already routed, hence we jump to the label
'packet_routed', but without rcu_read_lock(). After this label,
rcu_read_unlock() is called unconditionally.

Spotted-by: Guo Fengtian <fengtian.guo@6wind.com>
Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Signed-off-by: Willy Tarreau <w@1wt.eu>
[yanjun: bug also introduced into 2.6.34.15, via backport of
same, in commit 01f69c1211fdcbcb6f7f5624234499264687b258.]
Signed-off-by: yanjun.zhu <yanjun.zhu@windriver.com>
---
 net/ipv4/ip_output.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index 248e9f7..8d6ce80 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -323,13 +323,13 @@ int ip_queue_xmit(struct sk_buff *skb, int ipfragok)
 	/* Skip all of this if the packet is already routed,
 	 * f.e. by something like SCTP.
 	 */
+	rcu_read_lock();
 	rt = skb_rtable(skb);
 	if (rt != NULL)
 		goto packet_routed;
 
 	/* Make sure we can route this packet. */
 	rt = (struct rtable *)__sk_dst_check(sk, 0);
-	rcu_read_lock();
 	inet_opt = rcu_dereference(inet->inet_opt);
 	if (rt == NULL) {
 		__be32 daddr;
-- 
1.7.0

