From 172c0812d60ceb249ef54b45b01a212884697c55 Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Mon, 18 Feb 2013 09:18:49 +0800
Subject: [PATCH] net/ipv4: Hash timewait sock into TIMEWAIT chain before removing it from established chain

Partially back port from upstream commit 3ab5aee7fe84
(net: Convert TCP & DCCP hash tables to use RCU / hlist_nulls).

The above commit not only converts the hash tables to use RCU but also fixes
a bug which causes kernel panic as below in timewait sock insertion/removal
operations, the bug fix is necessary for the current kernel while the RCU
specific codes are not.

Unhandled kernel unaligned access[#1]:
Cpu 0
$ 0   : 0000000000000000 ffffffff8149b520 a8000000bccfd788 a8000000f42b31e0
$ 4   : ffffffff81125bbc fffffffffc440008 ffffffff813fa0ec 6b6b6b6b6b6b6bad
$ 8   : 0000000010108ce3 00000000f6adfc82 0000000000000020 1200000001801200
$12   : 0000000010108ce1 000000001000001e 000000000000000c 0000000000000000
$16   : a8000000f42b31c0 a8000000cdc28c80 ffffff0000000000 a8000000bccfd770
$20   : a80000041f903e30 0000000000000006 0000000000000000 0000000000000000
$24   : 0000000000000020 c0000000000bf7d8
$28   : a8000000f42b0000 a8000000f42b3190 00000000032803e3 ffffffff811257b8
Hi    : 0000000000000000
Lo    : 0000000000000d08
epc   : ffffffff81125be0 do_ade+0x470/0x720     Not tainted
ra    : ffffffff811257b8 do_ade+0x48/0x720
Status: 10108ce3    KX SX UX KERNEL EXL IE
Cause : 00800014
BadVA : 6b6b6b6b6b6b6bad
PrId  : 000d030b
Modules linked in: mv_sata sd_mod scsi_mod ehife ehifi iptable_filter rtc_ctrl ip_tables xt_multiport x_tables linux_bcm_core linux_kernel_bde cavium_l2module cavium_ethernet vhs 8021q max6654_ctrl eeprom_ctrl i2c_octeon_twsi i2c_dev i2c_core master_active_ctrl reset_ctrl dup_ctrl led_ctrl im_ctrl epld_info_ctrl env_ctrl cpld_ctrl dm_multipath sctp ipv6
Process xinetd (pid: 487, threadinfo=a8000000f42b0000, task=a8000000f62c8aa0)
Stack : a8000000bccfd770 a8000000cdc28c80 a8000000ff800d08 a8000000bccfd770
        ffffffff8111b700 a8000000f6adfc98 c0000000001a6df8 0000000000000000
        c0000000001a9380 0000000000000000 a8000000beea2c98 a8000000f9cde600
        0000000000000000 ffffffff8157b980 6b6b6b6b6b6b6ba5 a8000000d5d0f768
        a8000000bccfd788 a8000000d5d0f780 ffffffff8157b980 a80000041f900000
        a8000000ff800000 00000000f6adfc82 0000000000000020 1200000001801200
        0000000000000018 ffffffff812f76e0 000000000000000c 0000000000000000
        a8000000bccfd770 a8000000cdc28c80 a8000000ff800d08 a8000000bccfd770
        a80000041f903e30 0000000000000006 0000000000000000 0000000000000000
        0000000000000020 c0000000000bf7d8 0000000000000000 0000000000000020
        ...
Call BackTrace:
[<ffffffff81125be0>] do_ade+0x470/0x720
[<ffffffff8111b700>] ret_from_exception+0x0/0x8
[<ffffffff813fa0ec>] __inet_twsk_hashdance+0xb4/0x208
[<ffffffff81416150>] tcp_time_wait+0x2e8/0x4e0
[<ffffffff814058ec>] tcp_fin+0x25c/0x340
[<ffffffff81407184>] tcp_data_queue+0xa94/0xe18
[<ffffffff8140845c>] tcp_rcv_state_process+0x71c/0x1330
[<ffffffff814117dc>] tcp_v4_do_rcv+0xcc/0x4d8
[<ffffffff814152f8>] tcp_v4_rcv+0xd20/0xe18
[<ffffffff813edc08>] ip_local_deliver+0x210/0x4e8
[<ffffffff813ed640>] ip_rcv+0x450/0x808
[<ffffffff813c0c44>] netif_receive_skb+0x624/0xb40
[<ffffffff813c387c>] process_backlog+0x104/0x238
[<ffffffff813c3ea8>] net_rx_action+0x138/0x2f0
[<ffffffff8115b050>] __do_softirq+0x210/0x330
[<ffffffff8115b1f0>] do_softirq+0x80/0x88
[<ffffffff81105ee8>] plat_irq_dispatch+0x108/0x270
[<ffffffff8111b708>] ret_from_irq+0x0/0x4
[<ffffffff813fd62c>] tcp_poll+0x2c/0x200
[<ffffffff811e0894>] do_select+0x2ec/0x5f8
[<ffffffff811e0db8>] core_sys_select+0x218/0x350
[<ffffffff811e1354>] SyS_select+0x9c/0x250
[<ffffffff811285f4>] syscall_trace_entry+0x78/0x98
Code: 000318f8  0070182d  dc620030 <b0e20000> b4e20007  24020000  14400010  0000882d  084496bf
Kernel panic - not syncing: Fatal exception in interrupt

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 net/ipv4/inet_timewait_sock.c |   14 +++++++++-----
 1 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/net/ipv4/inet_timewait_sock.c b/net/ipv4/inet_timewait_sock.c
index 743f011..ec9276c 100644
--- a/net/ipv4/inet_timewait_sock.c
+++ b/net/ipv4/inet_timewait_sock.c
@@ -92,14 +92,18 @@ void __inet_twsk_hashdance(struct inet_timewait_sock *tw, struct sock *sk,
 
 	write_lock(lock);
 
-	/* Step 2: Remove SK from established hash. */
+	/*
+	 * Step 2: Hash TW into TIMEWAIT chain.
+	 * Should be done before removing sk from established chain
+	 * because readers are lockless and search established first.
+	 */
+	atomic_inc(&tw->tw_refcnt);
+	inet_twsk_add_node(tw, &ehead->twchain);
+
+	/* Step 3: Remove SK from established hash. */
 	if (__sk_del_node_init(sk))
 		sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
 
-	/* Step 3: Hash TW into TIMEWAIT chain. */
-	inet_twsk_add_node(tw, &ehead->twchain);
-	atomic_inc(&tw->tw_refcnt);
-
 	write_unlock(lock);
 }
 
-- 
1.7.0.2

