From d322e73855aa910c3e04eea4dfc46d91dd2c16cd Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Wed, 21 Dec 2011 17:14:11 +0800
Subject: [PATCH 2/4] net: Audit drivers to identify those needing IFF_TX_SKB_SHARING cleared

commit 550fd08c2cebad61c548def135f67aba284c6162 upstream

After the last patch, We are left in a state in which only drivers calling
ether_setup have IFF_TX_SKB_SHARING set (we assume that drivers touching real
hardware call ether_setup for their net_devices and don't hold any state in
their skbs.  There are a handful of drivers that violate this assumption of
course, and need to be fixed up.  This patch identifies those drivers, and marks
them as not being able to support the safe transmission of skbs by clearning the
IFF_TX_SKB_SHARING flag in priv_flags

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
CC: Karsten Keil <isdn@linux-pingi.de>
CC: "David S. Miller" <davem@davemloft.net>
CC: Jay Vosburgh <fubar@us.ibm.com>
CC: Andy Gospodarek <andy@greyhouse.net>
CC: Patrick McHardy <kaber@trash.net>
CC: Krzysztof Halasa <khc@pm.waw.pl>
CC: "John W. Linville" <linville@tuxdriver.com>
CC: Greg Kroah-Hartman <gregkh@suse.de>
CC: Marcel Holtmann <marcel@holtmann.org>
CC: Johannes Berg <johannes@sipsolutions.net>
Signed-off-by: David S. Miller <davem@davemloft.net>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/isdn/i4l/isdn_net.c               |    2 ++
 drivers/net/bonding/bond_main.c           |    3 +++
 drivers/net/ifb.c                         |    1 +
 drivers/net/macvlan.c                     |    1 +
 drivers/net/tun.c                         |    1 +
 drivers/net/veth.c                        |    2 ++
 drivers/net/wan/hdlc_fr.c                 |    5 +++--
 drivers/net/wireless/airo.c               |    1 +
 drivers/net/wireless/hostap/hostap_main.c |    1 +
 net/8021q/vlan_dev.c                      |    1 +
 net/bluetooth/bnep/netdev.c               |    1 +
 net/mac80211/main.c                       |    1 +
 12 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/drivers/isdn/i4l/isdn_net.c b/drivers/isdn/i4l/isdn_net.c
index bb904a0..fcfa860 100644
--- a/drivers/isdn/i4l/isdn_net.c
+++ b/drivers/isdn/i4l/isdn_net.c
@@ -2520,6 +2520,8 @@ static void _isdn_setup(struct net_device *dev)
 	isdn_net_local *lp = dev->priv;
 
 	dev->flags = IFF_NOARP | IFF_POINTOPOINT;
+	/* isdn prepends a header in the tx path, can't share skbs */
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 	lp->p_encap = ISDN_NET_ENCAP_RAWIP;
 	lp->magic = ISDN_NET_MAGIC;
 	lp->last = lp;
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index bac4eaa..0fd8d70 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -5074,6 +5074,7 @@ int bond_create(char *name, struct bond_params *params)
 
 	bond_dev = alloc_netdev(sizeof(struct bonding), name ? name : "",
 				ether_setup);
+
 	if (!bond_dev) {
 		printk(KERN_ERR DRV_NAME
 		       ": %s: eek! can't alloc netdev!\n",
@@ -5088,6 +5089,8 @@ int bond_create(char *name, struct bond_params *params)
 			goto out_netdev;
 	}
 
+	bond_dev->priv_flags &= ~IFF_TX_SKB_SHARING;
+
 	/* bond_init() must be called after dev_alloc_name() (for the
 	 * /proc files), but before register_netdevice(), because we
 	 * need to set function pointers.
diff --git a/drivers/net/ifb.c b/drivers/net/ifb.c
index e4fbefc..dd06b1d 100644
--- a/drivers/net/ifb.c
+++ b/drivers/net/ifb.c
@@ -151,6 +151,7 @@ static void ifb_setup(struct net_device *dev)
 	dev->change_mtu = NULL;
 	dev->flags |= IFF_NOARP;
 	dev->flags &= ~IFF_MULTICAST;
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 	random_ether_addr(dev->dev_addr);
 }
 
diff --git a/drivers/net/macvlan.c b/drivers/net/macvlan.c
index 1aa0388..b0d1ef6 100644
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@ -344,6 +344,7 @@ static void macvlan_setup(struct net_device *dev)
 {
 	ether_setup(dev);
 
+	dev->priv_flags	       &= ~IFF_TX_SKB_SHARING;
 	dev->init		= macvlan_init;
 	dev->open		= macvlan_open;
 	dev->stop		= macvlan_stop;
diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index f00fcb5..4344687 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -333,6 +333,7 @@ static void tun_net_init(struct net_device *dev)
 	case TUN_TAP_DEV:
 		/* Ethernet TAP Device */
 		ether_setup(dev);
+		dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 		dev->change_mtu         = tun_net_change_mtu;
 		dev->set_multicast_list = tun_net_mclist;
 
diff --git a/drivers/net/veth.c b/drivers/net/veth.c
index 31cd817..5d5a4ae 100644
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@ -271,6 +271,8 @@ static void veth_setup(struct net_device *dev)
 {
 	ether_setup(dev);
 
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
+
 	dev->hard_start_xmit = veth_xmit;
 	dev->get_stats = veth_get_stats;
 	dev->open = veth_open;
diff --git a/drivers/net/wan/hdlc_fr.c b/drivers/net/wan/hdlc_fr.c
index d3d5055..66ec93a 100644
--- a/drivers/net/wan/hdlc_fr.c
+++ b/drivers/net/wan/hdlc_fr.c
@@ -1086,9 +1086,10 @@ static int fr_add_pvc(struct net_device *frad, unsigned int dlci, int type)
 
 	used = pvc_is_used(pvc);
 
-	if (type == ARPHRD_ETHER)
+	if (type == ARPHRD_ETHER) {
 		dev = alloc_netdev(0, "pvceth%d", ether_setup);
-	else
+		dev->priv_flags &= ~IFF_TX_SKB_SHARING;
+	} else
 		dev = alloc_netdev(0, "pvc%d", pvc_setup);
 
 	if (!dev) {
diff --git a/drivers/net/wireless/airo.c b/drivers/net/wireless/airo.c
index b5cd850..4586dcd 100644
--- a/drivers/net/wireless/airo.c
+++ b/drivers/net/wireless/airo.c
@@ -2805,6 +2805,7 @@ static struct net_device *_init_airo_card( unsigned short irq, int port,
 	dev->stop = &airo_close;
 	dev->irq = irq;
 	dev->base_addr = port;
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 
 	SET_NETDEV_DEV(dev, dmdev);
 
diff --git a/drivers/net/wireless/hostap/hostap_main.c b/drivers/net/wireless/hostap/hostap_main.c
index 756ab56..337e0bc 100644
--- a/drivers/net/wireless/hostap/hostap_main.c
+++ b/drivers/net/wireless/hostap/hostap_main.c
@@ -851,6 +851,7 @@ void hostap_setup_dev(struct net_device *dev, local_info_t *local,
 
 	iface = netdev_priv(dev);
 	ether_setup(dev);
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 
 	/* kernel callbacks */
 	dev->get_stats = hostap_get_stats;
diff --git a/net/8021q/vlan_dev.c b/net/8021q/vlan_dev.c
index ba5803c..21a0b5d 100644
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@ -681,6 +681,7 @@ void vlan_setup(struct net_device *dev)
 	ether_setup(dev);
 
 	dev->priv_flags		|= IFF_802_1Q_VLAN;
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 	dev->tx_queue_len	= 0;
 
 	dev->change_mtu		= vlan_dev_change_mtu;
diff --git a/net/bluetooth/bnep/netdev.c b/net/bluetooth/bnep/netdev.c
index d9fa0ab..e5f1af1 100644
--- a/net/bluetooth/bnep/netdev.c
+++ b/net/bluetooth/bnep/netdev.c
@@ -229,6 +229,7 @@ void bnep_net_setup(struct net_device *dev)
 	dev->addr_len = ETH_ALEN;
 
 	ether_setup(dev);
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 
 	dev->open            = bnep_net_open;
 	dev->stop            = bnep_net_close;
diff --git a/net/mac80211/main.c b/net/mac80211/main.c
index aa5a191..7fa4cf5 100644
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -968,6 +968,7 @@ static const struct header_ops ieee80211_header_ops = {
 void ieee80211_if_setup(struct net_device *dev)
 {
 	ether_setup(dev);
+	dev->priv_flags &= ~IFF_TX_SKB_SHARING;
 	dev->hard_start_xmit = ieee80211_subif_start_xmit;
 	dev->wireless_handlers = &ieee80211_iw_handler_def;
 	dev->set_multicast_list = ieee80211_set_multicast_list;
-- 
1.7.0.4

