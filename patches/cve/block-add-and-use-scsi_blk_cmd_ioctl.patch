From 7e64e7d24aa63a9810d94ba0d215a02a60fb999c Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Mon, 15 Apr 2013 15:50:29 +0800
Subject: [PATCH 4/6] block: add and use scsi_blk_cmd_ioctl

commit 577ebb374c78314ac4617242f509e2f5e7156649 upstream

Introduce a wrapper around scsi_cmd_ioctl that takes a block device.

The function will then be enhanced to detect partition block devices
and, in that case, subject the ioctls to whitelisting.

Cc: linux-scsi@vger.kernel.org
Cc: Jens Axboe <axboe@kernel.dk>
Cc: James Bottomley <JBottomley@parallels.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 block/scsi_ioctl.c         |    7 +++++++
 drivers/block/cciss.c      |    7 +++----
 drivers/block/ub.c         |    4 ++--
 drivers/block/virtio_blk.c |    7 ++++---
 drivers/cdrom/cdrom.c      |    4 ++--
 drivers/ide/ide-floppy.c   |    2 +-
 drivers/scsi/sd.c          |    2 +-
 include/linux/blkdev.h     |    2 ++
 8 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/block/scsi_ioctl.c b/block/scsi_ioctl.c
index 66559ac..4e12c96 100644
--- a/block/scsi_ioctl.c
+++ b/block/scsi_ioctl.c
@@ -648,3 +648,10 @@ int scsi_cmd_ioctl(struct request_queue *q, struct gendisk *bd_disk, fmode_t mod
 }
 
 EXPORT_SYMBOL(scsi_cmd_ioctl);
+
+int scsi_cmd_blk_ioctl(struct block_device *bd, fmode_t mode,
+		       unsigned int cmd, void __user *arg)
+{
+	return scsi_cmd_ioctl(bd->bd_disk->queue, bd->bd_disk, mode, cmd, arg);
+}
+EXPORT_SYMBOL(scsi_cmd_blk_ioctl);
diff --git a/drivers/block/cciss.c b/drivers/block/cciss.c
index e9924fd..0689f8e 100644
--- a/drivers/block/cciss.c
+++ b/drivers/block/cciss.c
@@ -1225,7 +1225,7 @@ static int cciss_ioctl(struct inode *inode, struct file *filep,
 			return status;
 		}
 
-	/* scsi_cmd_ioctl handles these, below, though some are not */
+	/* scsi_cmd_blk_ioctl handles these, below, though some are not */
 	/* very meaningful for cciss.  SG_IO is the main one people want. */
 
 	case SG_GET_VERSION_NUM:
@@ -1236,10 +1236,9 @@ static int cciss_ioctl(struct inode *inode, struct file *filep,
 	case SG_EMULATED_HOST:
 	case SG_IO:
 	case SCSI_IOCTL_SEND_COMMAND:
-		return scsi_cmd_ioctl(disk->queue, disk,
-				      filep ? filep->f_mode : 0, cmd, argp);
+		return scsi_cmd_blk_ioctl(bdev, filep ? filep->f_mode : 0, cmd, argp);
 
-	/* scsi_cmd_ioctl would normally handle these, below, but */
+	/* scsi_cmd_blk_ioctl would normally handle these, below, but */
 	/* they aren't a good fit for cciss, as CD-ROMs are */
 	/* not supported, and we don't have any bus/target/lun */
 	/* which we present to the kernel. */
diff --git a/drivers/block/ub.c b/drivers/block/ub.c
index 5fe06f7..c5e69ba 100644
--- a/drivers/block/ub.c
+++ b/drivers/block/ub.c
@@ -1729,10 +1729,10 @@ static int ub_bd_release(struct inode *inode, struct file *filp)
 static int ub_bd_ioctl(struct inode *inode, struct file *filp,
     unsigned int cmd, unsigned long arg)
 {
-	struct gendisk *disk = inode->i_bdev->bd_disk;
+	struct block_device *bdev = inode->i_bdev;
 	void __user *usermem = (void __user *) arg;
 
-	return scsi_cmd_ioctl(disk->queue, disk, filp ? filp->f_mode : 0, cmd, usermem);
+	return scsi_cmd_blk_ioctl(bdev, filp ? filp->f_mode : 0, cmd, usermem);
 }
 
 /*
diff --git a/drivers/block/virtio_blk.c b/drivers/block/virtio_blk.c
index 0438c21..f3ee16c 100644
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -149,9 +149,10 @@ static void do_virtblk_request(struct request_queue *q)
 static int virtblk_ioctl(struct inode *inode, struct file *filp,
 			 unsigned cmd, unsigned long data)
 {
-	return scsi_cmd_ioctl(inode->i_bdev->bd_disk->queue,
-			      inode->i_bdev->bd_disk, filp->f_mode, cmd,
-			      (void __user *)data);
+	struct block_device *bdev = inode->i_bdev;
+
+	return scsi_cmd_blk_ioctl(bdev, filp->f_mode,
+				  cmd, (void __user *)data);
 }
 
 /* We provide getgeo only to please some old bootloader/partitioning tools */
diff --git a/drivers/cdrom/cdrom.c b/drivers/cdrom/cdrom.c
index 8827da6..71566e1 100644
--- a/drivers/cdrom/cdrom.c
+++ b/drivers/cdrom/cdrom.c
@@ -2667,12 +2667,12 @@ int cdrom_ioctl(struct file * file, struct cdrom_device_info *cdi,
 {
 	void __user *argp = (void __user *)arg;
 	int ret;
-	struct gendisk *disk = ip->i_bdev->bd_disk;
+	struct block_device *bdev = ip->i_bdev;
 
 	/*
 	 * Try the generic SCSI command ioctl's first.
 	 */
-	ret = scsi_cmd_ioctl(disk->queue, disk, file ? file->f_mode : 0, cmd, argp);
+	ret = scsi_cmd_blk_ioctl(bdev, file ? file->f_mode : 0, cmd, argp);
 	if (ret != -ENOTTY)
 		return ret;
 
diff --git a/drivers/ide/ide-floppy.c b/drivers/ide/ide-floppy.c
index 4aa9391..19c3163 100644
--- a/drivers/ide/ide-floppy.c
+++ b/drivers/ide/ide-floppy.c
@@ -1337,7 +1337,7 @@ static int idefloppy_ioctl(struct inode *inode, struct file *file,
 	 * and CDROM_SEND_PACKET (legacy) ioctls
 	 */
 	if (cmd != CDROM_SEND_PACKET && cmd != SCSI_IOCTL_SEND_COMMAND)
-		err = scsi_cmd_ioctl(bdev->bd_disk->queue, bdev->bd_disk,
+		err = scsi_cmd_blk_ioctl(bdev,
 				file ? file->f_mode : 0, cmd, argp);
 	else
 		err = -ENOTTY;
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index e80d155..0806627 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -769,7 +769,7 @@ static int sd_ioctl(struct inode * inode, struct file * filp,
 		case SCSI_IOCTL_GET_BUS_NUMBER:
 			return scsi_ioctl(sdp, cmd, p);
 		default:
-			error = scsi_cmd_ioctl(disk->queue, disk,
+			error = scsi_cmd_blk_ioctl(bdev,
 					filp ? filp->f_mode : 0, cmd, p);
 			if (error != -ENOTTY)
 				return error;
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index c690dc0..9954793 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -669,6 +669,8 @@ extern void blk_plug_device(struct request_queue *);
 extern void blk_plug_device_unlocked(struct request_queue *);
 extern int blk_remove_plug(struct request_queue *);
 extern void blk_recount_segments(struct request_queue *, struct bio *);
+extern int scsi_cmd_blk_ioctl(struct block_device *, fmode_t,
+			      unsigned int, void __user *);
 extern int scsi_cmd_ioctl(struct request_queue *, struct gendisk *, fmode_t,
 			  unsigned int, void __user *);
 extern int sg_scsi_ioctl(struct request_queue *, struct gendisk *, fmode_t,
-- 
1.7.5.4

