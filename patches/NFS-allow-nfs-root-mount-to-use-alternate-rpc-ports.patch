From d72a6c89b3021445b796685bba6fbd59eafdc1a9 Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Wed, 7 Jan 2009 00:59:33 -0500
Subject: [PATCH 1/2] NFS: allow nfs root mount to use alternate rpc ports

Allow an nfs root mount to use alternate RPC ports for mountd and nfsd.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
[forward port to 2.6.33+]
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>

---
 fs/nfs/client.c           |   10 ++++++++++
 fs/nfs/internal.h         |    4 ++--
 fs/nfs/mount_clnt.c       |    3 ++-
 fs/nfs/nfsroot.c          |   19 +++++++++++++++----
 fs/nfs/super.c            |    6 +++++-
 include/linux/nfs_fs_sb.h |    2 ++
 include/linux/nfs_mount.h |    4 +++-
 7 files changed, 39 insertions(+), 9 deletions(-)

diff --git a/fs/nfs/client.c b/fs/nfs/client.c
index ee77713..7bdf9e5 100644
--- a/fs/nfs/client.c
+++ b/fs/nfs/client.c
@@ -104,6 +104,7 @@ struct nfs_client_initdata {
 	const struct nfs_rpc_ops *rpc_ops;
 	int proto;
 	u32 minorversion;
+	int nfs_prog;
 };
 
 /*
@@ -122,6 +123,7 @@ static struct nfs_client *nfs_alloc_client(const struct nfs_client_initdata *cl_
 		goto error_0;
 
 	clp->rpc_ops = cl_init->rpc_ops;
+	clp->nfs_prog = cl_init->nfs_prog;
 
 	atomic_set(&clp->cl_count, 1);
 	clp->cl_cons_state = NFS_CS_INITING;
@@ -447,6 +449,9 @@ static struct nfs_client *nfs_match_client(const struct nfs_client_initdata *dat
 		/* Match nfsv4 minorversion */
 		if (clp->cl_minorversion != data->minorversion)
 			continue;
+		if (clp->nfs_prog != data->nfs_prog)
+			continue;
+
 		/* Match the full socket address */
 		if (!nfs_sockaddr_cmp(sap, clap))
 			continue;
@@ -617,6 +622,10 @@ static int nfs_create_rpc_client(struct nfs_client *clp,
 	if (!IS_ERR(clp->cl_rpcclient))
 		return 0;
 
+	if (clp->nfs_prog)
+		nfs_program.number = clp->nfs_prog;
+	else
+		nfs_program.number = NFS_PROGRAM;
 	clnt = rpc_create(&args);
 	if (IS_ERR(clnt)) {
 		dprintk("%s: cannot create RPC client. Error = %ld\n",
@@ -785,6 +794,7 @@ static int nfs_init_server(struct nfs_server *server,
 		.addrlen = data->nfs_server.addrlen,
 		.rpc_ops = &nfs_v2_clientops,
 		.proto = data->nfs_server.protocol,
+		.nfs_prog = data->nfs_prog,
 	};
 	struct rpc_timeout timeparms;
 	struct nfs_client *clp;
diff --git a/fs/nfs/internal.h b/fs/nfs/internal.h
index 29e464d..36fd1dc 100644
--- a/fs/nfs/internal.h
+++ b/fs/nfs/internal.h
@@ -71,6 +71,7 @@ struct nfs_parsed_mount_data {
 	int			timeo, retrans;
 	int			acregmin, acregmax,
 				acdirmin, acdirmax;
+	int			nfs_prog;
 	int			namlen;
 	unsigned int		options;
 	unsigned int		bsize;
@@ -80,7 +81,6 @@ struct nfs_parsed_mount_data {
 	unsigned int		version;
 	unsigned int		minorversion;
 	char			*fscache_uniq;
-
 	struct {
 		struct sockaddr_storage	address;
 		size_t			addrlen;
@@ -116,7 +116,7 @@ struct nfs_mount_request {
 	rpc_authflavor_t	*auth_flavs;
 };
 
-extern int nfs_mount(struct nfs_mount_request *info);
+extern int nfs_mount(struct nfs_mount_request *info, int prog);
 extern void nfs_umount(const struct nfs_mount_request *info);
 
 /* client.c */
diff --git a/fs/nfs/mount_clnt.c b/fs/nfs/mount_clnt.c
index 0adefc4..ffd0c39 100644
--- a/fs/nfs/mount_clnt.c
+++ b/fs/nfs/mount_clnt.c
@@ -141,7 +141,7 @@ struct mnt_fhstatus {
  *
  * Uses default timeout parameters specified by underlying transport.
  */
-int nfs_mount(struct nfs_mount_request *info)
+int nfs_mount(struct nfs_mount_request *info, int m_prog)
 {
 	struct mountres	result = {
 		.fh		= info->fh,
@@ -171,6 +171,7 @@ int nfs_mount(struct nfs_mount_request *info)
 	if (info->noresvport)
 		args.flags |= RPC_CLNT_CREATE_NONPRIVPORT;
 
+	mnt_program.number = m_prog;
 	mnt_clnt = rpc_create(&args);
 	if (IS_ERR(mnt_clnt))
 		goto out_clnt_err;
diff --git a/fs/nfs/nfsroot.c b/fs/nfs/nfsroot.c
index 8c55b27..6cfcacd 100644
--- a/fs/nfs/nfsroot.c
+++ b/fs/nfs/nfsroot.c
@@ -122,7 +122,8 @@ static int mount_port __initdata = 0;		/* Mount daemon port number */
 enum {
 	/* Options that take integer arguments */
 	Opt_port, Opt_rsize, Opt_wsize, Opt_timeo, Opt_retrans, Opt_acregmin,
-	Opt_acregmax, Opt_acdirmin, Opt_acdirmax,
+	Opt_acregmax, Opt_acdirmin, Opt_acdirmax, Opt_mountprog,
+	Opt_nfsprog,
 	/* Options that take no arguments */
 	Opt_soft, Opt_hard, Opt_intr,
 	Opt_nointr, Opt_posix, Opt_noposix, Opt_cto, Opt_nocto, Opt_ac, 
@@ -142,6 +143,8 @@ static const match_table_t tokens __initconst = {
 	{Opt_acregmax, "acregmax=%u"},
 	{Opt_acdirmin, "acdirmin=%u"},
 	{Opt_acdirmax, "acdirmax=%u"},
+	{Opt_mountprog, "mountprog=%u"},
+	{Opt_nfsprog, "nfsprog=%u"},
 	{Opt_soft, "soft"},
 	{Opt_hard, "hard"},
 	{Opt_intr, "intr"},
@@ -224,6 +227,12 @@ static int __init root_nfs_parse(char *name, char *buf)
 			case Opt_acdirmax:
 				nfs_data.acdirmax = option;
 				break;
+			case Opt_mountprog:
+				nfs_data.mount_prog = option;
+				break;
+			case Opt_nfsprog:
+				nfs_data.nfs_prog = option;
+				break;
 			case Opt_soft:
 				nfs_data.flags |= NFS_MOUNT_SOFT;
 				break;
@@ -304,6 +313,8 @@ static int __init root_nfs_name(char *name)
 	nfs_data.acregmax = NFS_DEF_ACREGMAX;
 	nfs_data.acdirmin = NFS_DEF_ACDIRMIN;
 	nfs_data.acdirmax = NFS_DEF_ACDIRMAX;
+	nfs_data.nfs_prog = NFS_PROGRAM;
+	nfs_data.mount_prog = NFS_MNT_PROGRAM;
 	strcpy(buf, NFS_ROOT);
 
 	/* Process options received from the remote server */
@@ -460,7 +471,7 @@ static int __init root_nfs_ports(void)
 	proto = (nfs_data.flags & NFS_MOUNT_TCP) ? IPPROTO_TCP : IPPROTO_UDP;
 
 	if (nfs_port < 0) {
-		if ((port = root_nfs_getport(NFS_PROGRAM, nfsd_ver, proto)) < 0) {
+		if ((port = root_nfs_getport(nfs_data.nfs_prog, nfsd_ver, proto)) < 0) {
 			printk(KERN_ERR "Root-NFS: Unable to get nfsd port "
 					"number from server, using default\n");
 			port = nfsd_port;
@@ -470,7 +481,7 @@ static int __init root_nfs_ports(void)
 			"as nfsd port\n", port);
 	}
 
-	if ((port = root_nfs_getport(NFS_MNT_PROGRAM, mountd_ver, proto)) < 0) {
+	if ((port = root_nfs_getport(nfs_data.mount_prog, mountd_ver, proto)) < 0) {
 		printk(KERN_ERR "Root-NFS: Unable to get mountd port "
 				"number from server, using default\n");
 		port = mountd_port;
@@ -505,7 +516,7 @@ static int __init root_nfs_get_handle(void)
 	int status;
 
 	set_sockaddr(&sin, servaddr, htons(mount_port));
-	status = nfs_mount(&request);
+	status = nfs_mount(&request, nfs_data.mount_prog);
 	if (status < 0)
 		printk(KERN_ERR "Root-NFS: Server returned error %d "
 				"while mounting %s\n", status, nfs_export_path);
diff --git a/fs/nfs/super.c b/fs/nfs/super.c
index ce907ef..e7c77a1 100644
--- a/fs/nfs/super.c
+++ b/fs/nfs/super.c
@@ -1544,7 +1544,7 @@ static int nfs_try_mount(struct nfs_parsed_mount_data *args,
 	 * Now ask the mount server to map our export path
 	 * to a file handle.
 	 */
-	status = nfs_mount(&request);
+	status = nfs_mount(&request,NFS_MNT_PROGRAM);
 	if (status != 0) {
 		dfprintk(MOUNT, "NFS: unable to mount server %s, error %d\n",
 				request.hostname, status);
@@ -1717,6 +1717,7 @@ static int nfs_validate_mount_data(void *options,
 {
 	struct nfs_mount_data *data = (struct nfs_mount_data *)options;
 	struct sockaddr *sap = (struct sockaddr *)&args->nfs_server.address;
+	args->nfs_prog		= NFS_PROGRAM;
 
 	if (data == NULL)
 		goto out_no_data;
@@ -1736,6 +1737,8 @@ static int nfs_validate_mount_data(void *options,
 			goto out_no_sec;
 	case 5:
 		memset(data->context, 0, sizeof(data->context));
+	case 7:
+		args->nfs_prog = (data->version >= 7) ? data->nfs_prog : NFS_PROGRAM;
 	case 6:
 		if (data->flags & NFS_MOUNT_VER3) {
 			if (data->root.size > NFS3_FHSIZE || data->root.size == 0)
@@ -2436,6 +2439,7 @@ static int nfs4_validate_mount_data(void *options,
 
 	if (data == NULL)
 		goto out_no_data;
+	args->nfs_prog		= NFS_PROGRAM;
 
 	switch (data->version) {
 	case 1:
diff --git a/include/linux/nfs_fs_sb.h b/include/linux/nfs_fs_sb.h
index 34fc6be..246fde7 100644
--- a/include/linux/nfs_fs_sb.h
+++ b/include/linux/nfs_fs_sb.h
@@ -71,6 +71,8 @@ struct nfs_client {
 	 */
 	char			cl_ipaddr[48];
 	unsigned char		cl_id_uniquifier;
+	int			nfs_prog;
+
 	int		     (* cl_call_sync)(struct nfs_server *server,
 					      struct rpc_message *msg,
 					      struct nfs4_sequence_args *args,
diff --git a/include/linux/nfs_mount.h b/include/linux/nfs_mount.h
index 4499016..86beb0c 100644
--- a/include/linux/nfs_mount.h
+++ b/include/linux/nfs_mount.h
@@ -20,7 +20,7 @@
  * mount-to-kernel version compatibility.  Some of these aren't used yet
  * but here they are anyway.
  */
-#define NFS_MOUNT_VERSION	6
+#define NFS_MOUNT_VERSION	7
 #define NFS_MAX_CONTEXT_LEN	256
 
 struct nfs_mount_data {
@@ -43,6 +43,8 @@ struct nfs_mount_data {
 	struct nfs3_fh	root;			/* 4 */
 	int		pseudoflavor;		/* 5 */
 	char		context[NFS_MAX_CONTEXT_LEN + 1];	/* 6 */
+	int		nfs_prog; /* 7 */
+	int		mount_prog; /* 7 */
 };
 
 /* bits in the flags field visible to user space */
-- 
1.6.5.2

