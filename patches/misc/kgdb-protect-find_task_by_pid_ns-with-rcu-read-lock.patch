From d906adffe00c9e7bade45595fcf07ac70996eb65 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Thu, 21 Aug 2014 15:27:51 +0800
Subject: [PATCH] kgdb: protect find_task_by_pid_ns() with rcu read lock

The function find_task_by_pid_ns() must be called under
rcu_read_lock(). Otherwise we would get the following call trace:
  kernel/pid.c:448 find_task_by_pid_ns() needs rcu_read_lock() protection!
  other info that might help us debug this:
  rcu_scheduler_active = 1, debug_locks = 0
  2 locks held by sh/632:
   #0:  (dbg_master_lock){......}, at: [<c00bbf44>] kgdb_handle_exception+0x2d0/0x7c0
   #1:  (dbg_slave_lock){..-...}, at: [<c00bc218>] kgdb_handle_exception+0x5a4/0x7c0

  stack backtrace:
  CPU: 0 PID: 632 Comm: sh Not tainted 3.10.38-ltsi-WR6.0.0.0_standard #8
  [<c0016398>] (unwind_backtrace+0x0/0x100) from [<c0012adc>] (show_stack+0x20/0x24)
  [<c0012adc>] (show_stack+0x20/0x24) from [<c0718ca8>] (dump_stack+0x24/0x28)
  [<c0718ca8>] (dump_stack+0x24/0x28) from [<c0098148>] (lockdep_rcu_suspicious+0xf0/0x104)
  [<c0098148>] (lockdep_rcu_suspicious+0xf0/0x104) from [<c006a924>] (find_task_by_pid_ns+0x8c/0xa8)
  [<c006a924>] (find_task_by_pid_ns+0x8c/0xa8) from [<c00bc994>] (getthread.isra.4+0x3c/0x90)
  [<c00bc994>] (getthread.isra.4+0x3c/0x90) from [<c00bdddc>] (gdb_serial_stub+0xf00/0x11d8)
  [<c00bdddc>] (gdb_serial_stub+0xf00/0x11d8) from [<c00bc198>] (kgdb_handle_exception+0x524/0x7c0)
  [<c00bc198>] (kgdb_handle_exception+0x524/0x7c0) from [<c0015608>] (kgdb_brk_fn+0x58/0xa4)
  [<c0015608>] (kgdb_brk_fn+0x58/0xa4) from [<c00082f8>] (do_undefinstr+0xf8/0x1b8)
  [<c00082f8>] (do_undefinstr+0xf8/0x1b8) from [<c071f5b0>] (__und_svc_finish+0x0/0x30)
  Exception stack(0xecc85f08 to 0xecc85f50)
  5f00:                   01200011 00000000 00000000 00000000 b6fb43f8 00000000
  5f20: b6fb4390 00000078 c000e648 ecc84000 00000000 ecc85fa4 b6fb43f8 ecc85f90
  5f40: c0041ab8 c0041594 800d0013 ffffffff
  [<c071f5b0>] (__und_svc_finish+0x0/0x30) from [<c0041594>] (do_fork+0x0/0x448)

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 kernel/debug/gdbstub.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/kernel/debug/gdbstub.c b/kernel/debug/gdbstub.c
index 19d9a57..26e2c29 100644
--- a/kernel/debug/gdbstub.c
+++ b/kernel/debug/gdbstub.c
@@ -431,6 +431,8 @@ static void int_to_threadref(unsigned char *id, int value)
 
 static struct task_struct *getthread(struct pt_regs *regs, int tid)
 {
+	struct task_struct *tsk;
+
 	/*
 	 * Non-positive TIDs are remapped to the cpu shadow information
 	 */
@@ -453,7 +455,10 @@ static struct task_struct *getthread(struct pt_regs *regs, int tid)
 	 * but is nicely RCU locked - hence is a pretty resilient
 	 * thing to use:
 	 */
-	return find_task_by_pid_ns(tid, &init_pid_ns);
+	rcu_read_lock();
+	tsk = find_task_by_pid_ns(tid, &init_pid_ns);
+	rcu_read_unlock();
+	return tsk;
 }
 
 
-- 
2.0.2

