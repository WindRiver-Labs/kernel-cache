From 7e806eba303019655c6c5854621e1aaf5b712a60 Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Sat, 8 Jun 2013 11:03:20 +0200
Subject: [PATCH 411/628] net: xilinx_emacps: Clean up
 xemacps_descriptor_init().

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit d96c43a73952e6256c2f4131b7b9c52f9c44a671

Improve some details in xemacps_descriptor_init():

* Initialize tx_skb, rx_skb, rx_bd, tx_bd; these are used by
  xemacps_descriptor_free() which is called in case of an error.

* Add subtitles for readability.

* Omit memset(); there is no need for it since we have to loop through
  the BD lists anyway.

* Set the WRAP bits directly in the main loops, simplifying the code.

* Clear bits [1:0] in cur_p->addr for Rx BDs.

* Remove the redundant loop which clears the NEW bit of the Rx BDs.

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   57 +++++++++++++++------------
 1 files changed, 32 insertions(+), 25 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 7e5c74d..06a9c77 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1483,6 +1483,12 @@ static int xemacps_descriptor_init(struct net_local *lp)
 	u32 new_skb_baddr;
 	u32 i;
 	struct xemacps_bd *cur_p;
+	u32 regval;
+
+	lp->tx_skb = NULL;
+	lp->rx_skb = NULL;
+	lp->rx_bd = NULL;
+	lp->tx_bd = NULL;
 
 	/* Reset the indexes which are used for accessing the BDs */
 	lp->tx_bd_ci = 0;
@@ -1498,6 +1504,10 @@ static int xemacps_descriptor_init(struct net_local *lp)
 	if (!lp->rx_skb)
 		goto err_out;
 
+	/*
+	 * Set up RX buffer descriptors.
+	 */
+
 	size = XEMACPS_RECV_BD_CNT * sizeof(struct xemacps_bd);
 	lp->rx_bd = dma_alloc_coherent(&lp->pdev->dev, size,
 			&lp->rx_bd_dma, GFP_KERNEL);
@@ -1506,11 +1516,10 @@ static int xemacps_descriptor_init(struct net_local *lp)
 	dev_dbg(&lp->pdev->dev, "RX ring %d bytes at 0x%x mapped %p\n",
 			size, lp->rx_bd_dma, lp->rx_bd);
 
-	memset(lp->rx_bd, 0, sizeof(*lp->rx_bd) * XEMACPS_RECV_BD_CNT);
 	for (i = 0; i < XEMACPS_RECV_BD_CNT; i++) {
 		cur_p = &lp->rx_bd[i];
-		new_skb = netdev_alloc_skb(lp->ndev, XEMACPS_RX_BUF_SIZE);
 
+		new_skb = netdev_alloc_skb(lp->ndev, XEMACPS_RX_BUF_SIZE);
 		if (new_skb == NULL) {
 			dev_err(&lp->ndev->dev, "alloc_skb error %d\n", i);
 			goto err_out;
@@ -1521,17 +1530,23 @@ static int xemacps_descriptor_init(struct net_local *lp)
 							new_skb->data,
 							XEMACPS_RX_BUF_SIZE,
 							DMA_FROM_DEVICE);
-		cur_p->addr = (cur_p->addr & ~XEMACPS_RXBUF_ADD_MASK)
-					| (new_skb_baddr);
+
+		/* set wrap bit for last BD */
+		regval = (new_skb_baddr & XEMACPS_RXBUF_ADD_MASK);
+		if (i == XEMACPS_RECV_BD_CNT - 1)
+			regval |= XEMACPS_RXBUF_WRAP_MASK;
+		cur_p->addr = regval;
+		cur_p->ctrl = 0;
+		wmb();
+
 		lp->rx_skb[i].skb = new_skb;
 		lp->rx_skb[i].mapping = new_skb_baddr;
 		lp->rx_skb[i].len = XEMACPS_RX_BUF_SIZE;
-		wmb();
 	}
-	cur_p = &lp->rx_bd[XEMACPS_RECV_BD_CNT - 1];
-	/* wrap bit set for last BD, bdptr is moved to last here */
-	cur_p->ctrl = 0;
-	cur_p->addr |= XEMACPS_RXBUF_WRAP_MASK;
+
+	/*
+	 * Set up TX buffer descriptors.
+	 */
 
 	size = XEMACPS_SEND_BD_CNT * sizeof(struct xemacps_bd);
 	lp->tx_bd = dma_alloc_coherent(&lp->pdev->dev, size,
@@ -1541,25 +1556,19 @@ static int xemacps_descriptor_init(struct net_local *lp)
 	dev_dbg(&lp->pdev->dev, "TX ring %d bytes at 0x%x mapped %p\n",
 			size, lp->tx_bd_dma, lp->tx_bd);
 
-	memset(lp->tx_bd, 0, sizeof(*lp->tx_bd) * XEMACPS_SEND_BD_CNT);
 	for (i = 0; i < XEMACPS_SEND_BD_CNT; i++) {
 		cur_p = &lp->tx_bd[i];
-		cur_p->ctrl = XEMACPS_TXBUF_USED_MASK;
-	}
-	cur_p = &lp->tx_bd[XEMACPS_SEND_BD_CNT - 1];
-	/* wrap bit set for last BD, bdptr is moved to last here */
-	cur_p->ctrl = (XEMACPS_TXBUF_WRAP_MASK | XEMACPS_TXBUF_USED_MASK);
-	lp->tx_bd_freecnt = XEMACPS_SEND_BD_CNT;
-
-
-	for (i = 0; i < XEMACPS_RECV_BD_CNT; i++) {
-		cur_p = &lp->rx_bd[i];
-		cur_p->ctrl = 0;
-		/* Assign ownership back to hardware */
-		cur_p->addr &= (~XEMACPS_RXBUF_NEW_MASK);
+		/* set wrap bit for last BD */
+		cur_p->addr = 0;
+		regval = XEMACPS_TXBUF_USED_MASK;
+		if (i == XEMACPS_SEND_BD_CNT - 1)
+			regval |= XEMACPS_TXBUF_WRAP_MASK;
+		cur_p->ctrl = regval;
 	}
 	wmb();
 
+	lp->tx_bd_freecnt = XEMACPS_SEND_BD_CNT;
+
 	dev_dbg(&lp->pdev->dev,
 		"lp->tx_bd %p lp->tx_bd_dma %p lp->tx_skb %p\n",
 		lp->tx_bd, (void *)lp->tx_bd_dma, lp->tx_skb);
@@ -1574,8 +1583,6 @@ err_out:
 	return -ENOMEM;
 }
 
-
-
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
 /*
  * Initialize the GEM Time Stamp Unit
-- 
1.7.5.4

