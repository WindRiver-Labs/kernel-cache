From 1101e1bd9cc19ee830f46d58ec2cfbd7b7eab26d Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Sat, 11 May 2013 11:10:41 +0200
Subject: [PATCH 397/628] xilinx_emacps: Don't check TXSR_TXCOMPL in
 xemacps_tx_poll()

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 30cbd71925cd2b805a33db1333a541520f0727d6

It doesn't really make sense to stop in xemacps_tx_poll() when
TXSR_TXCOMPL is not set. The logic works the other way round: When a
buffer becomes ready after reading TXSR, there is no reason why we
shouldn't process it. This is similar to xemacps_rx_poll() where
RXSR_FRAMERX isn't checked either.

We do stop when no buffers are available, though. In this case, skip
netif_start_queue() because nothing has changed.

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   13 +++++--------
 1 files changed, 5 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 20dc13a..e296b5b 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1258,13 +1258,6 @@ static void xemacps_tx_poll(unsigned long data)
 	if (regval & (XEMACPS_TXSR_HRESPNOK_MASK | XEMACPS_TXSR_BUFEXH_MASK))
 		dev_err(&lp->pdev->dev, "TX error 0x%x\n", regval);
 
-	/* This may happen when a buffer becomes complete
-	 * between reading the ISR and scanning the descriptors.
-	 * Nothing to worry about.
-	 */
-	if (!(regval & XEMACPS_TXSR_TXCOMPL_MASK))
-		goto tx_poll_out;
-
 	cur_i = lp->tx_bd_ci;
 	cur_p = &lp->tx_bd[cur_i];
 	while (bdcount < XEMACPS_SEND_BD_CNT) {
@@ -1294,6 +1287,9 @@ static void xemacps_tx_poll(unsigned long data)
 	}
 	numbdstofree = bdcount - bdpartialcount;
 	lp->tx_bd_freecnt += numbdstofree;
+	if (!numbdstofree)
+		goto tx_poll_out;
+
 	cur_p = &lp->tx_bd[lp->tx_bd_ci];
 	while (numbdstofree) {
 		rp = &lp->tx_skb[lp->tx_bd_ci];
@@ -1345,9 +1341,10 @@ static void xemacps_tx_poll(unsigned long data)
 	}
 	wmb();
 
-tx_poll_out:
 	if (netif_queue_stopped(ndev))
 		netif_start_queue(ndev);
+
+tx_poll_out:
 	spin_unlock(&lp->tx_lock);
 }
 
-- 
1.7.5.4

