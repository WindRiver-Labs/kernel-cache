From d804e7a3a092d61e4726f86a8c4defad3c9dfdca Mon Sep 17 00:00:00 2001
From: Srikanth Thokala <srikanth.thokala@xilinx.com>
Date: Fri, 7 Jun 2013 20:44:15 +0530
Subject: [PATCH 008/628] zynq: pcie: Removed static irq allocation

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 0bec56c81b8c4968eab33416b9e214a90e2f3241

This patch removes static allocation of MSI IRQs.

Signed-off-by: Srikanth Thokala <sthokal@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 arch/arm/mach-zynq/xaxipcie-msi.c |   51 +++++++++++++++++++++++++++++++-----
 arch/arm/mach-zynq/xaxipcie.c     |   21 ++++++++++++---
 2 files changed, 61 insertions(+), 11 deletions(-)

diff --git a/arch/arm/mach-zynq/xaxipcie-msi.c b/arch/arm/mach-zynq/xaxipcie-msi.c
index 1d45a96..a0cb0e8 100644
--- a/arch/arm/mach-zynq/xaxipcie-msi.c
+++ b/arch/arm/mach-zynq/xaxipcie-msi.c
@@ -25,13 +25,16 @@
 
 #include <linux/msi.h>
 #include <linux/irq.h>
-#include "common.h"
+#include <linux/irqdomain.h>
+#include <linux/module.h>
 
-#define XILINX_NUM_MSI_IRQS	127
+#define XILINX_NUM_MSI_IRQS	128
 
 static DECLARE_BITMAP(msi_irq_in_use, XILINX_NUM_MSI_IRQS);
 
-extern unsigned long xaxipcie_msg_addr;
+static unsigned long xaxipcie_msg_addr;
+static struct irq_domain *xaxipcie_irq_domain;
+static int xaxipcie_msi_irq_base;
 
 /* Dynamic irq allocate and deallocation */
 
@@ -49,9 +52,7 @@ int create_irq(void)
 again:
 	pos = find_first_zero_bit(msi_irq_in_use, XILINX_NUM_MSI_IRQS);
 
-	irq = IRQ_XILINX_MSI_0 + pos;
-	if (irq > NR_IRQS)
-		return -ENOSPC;
+	irq = irq_find_mapping(xaxipcie_irq_domain, pos);
 
 	/* test_and_set_bit operates on 32-bits at a time */
 	if (test_and_set_bit(pos, msi_irq_in_use))
@@ -73,7 +74,7 @@ again:
 */
 void destroy_irq(unsigned int irq)
 {
-	int pos = irq - IRQ_XILINX_MSI_0;
+	int pos = irq - xaxipcie_msi_irq_base;
 
 	dynamic_irq_cleanup(irq);
 
@@ -147,3 +148,39 @@ int arch_setup_msi_irq(struct pci_dev *pdev, struct msi_desc *desc)
 
 	return 0;
 }
+
+
+/**
+ * xaxipcie_alloc_msi_irqdescs - allocate msi irq descs
+ * @node: Pointer to device node structure
+ * @msg_addr: PCIe MSI message address
+ *
+ * @return: Allocated MSI IRQ Base/ error
+ *
+ * @note: This function is called when xaxipcie_init_port() is called
+ */
+int xaxipcie_alloc_msi_irqdescs(struct device_node *node,
+					unsigned long msg_addr)
+{
+	/* Store the PCIe MSI message address */
+	xaxipcie_msg_addr = msg_addr;
+
+	/* Allocate MSI IRQ descriptors */
+	xaxipcie_msi_irq_base = irq_alloc_descs(-1, 0,
+					XILINX_NUM_MSI_IRQS, 0);
+
+	if (xaxipcie_msi_irq_base < 0)
+		return -ENODEV;
+
+	/* Register IRQ domain */
+	xaxipcie_irq_domain = irq_domain_add_legacy(node,
+				XILINX_NUM_MSI_IRQS,
+				xaxipcie_msi_irq_base,
+				0, &irq_domain_simple_ops, NULL);
+
+	if (!xaxipcie_irq_domain)
+		return -ENOMEM;
+
+	return xaxipcie_msi_irq_base;
+}
+EXPORT_SYMBOL(xaxipcie_alloc_msi_irqdescs);
diff --git a/arch/arm/mach-zynq/xaxipcie.c b/arch/arm/mach-zynq/xaxipcie.c
index 81bfc5d..7fc3421 100644
--- a/arch/arm/mach-zynq/xaxipcie.c
+++ b/arch/arm/mach-zynq/xaxipcie.c
@@ -39,10 +39,9 @@
 #include <linux/interrupt.h>
 #include <linux/slab.h>
 #include <linux/sizes.h>
-
+#include <linux/irqdomain.h>
 #include <linux/pci.h>
 #include <asm/mach/pci.h>
-#include "common.h"
 
 /* Register definitions */
 #define PCIE_CFG_CMD			0x00000004
@@ -179,7 +178,10 @@ static int last_bus_on_record;
 static resource_size_t isa_mem_base;
 
 #ifdef CONFIG_PCI_MSI
-unsigned long xaxipcie_msg_addr;
+static int xaxipcie_msi_irq_base;
+
+int xaxipcie_alloc_msi_irqdescs(struct device_node *node,
+				unsigned long msg_addr);
 #endif
 
 /**
@@ -743,7 +745,7 @@ static irqreturn_t xaxi_pcie_intr_handler(int irq, void *data)
 			port->base_addr_remap + XAXIPCIE_REG_RPIFR1);
 #ifdef CONFIG_PCI_MSI
 		/* Handle MSI Interrupt */
-		if (msi_data >= IRQ_XILINX_MSI_0)
+		if (msi_data >= xaxipcie_msi_irq_base)
 			generic_handle_irq(msi_data);
 #endif
 	}
@@ -794,6 +796,9 @@ static int xaxi_pcie_init_port(struct xaxi_pcie_port *port)
 	u32 val = 0;
 	void __iomem *base_addr_remap = NULL;
 	int err = 0;
+#ifdef CONFIG_PCI_MSI
+	unsigned long xaxipcie_msg_addr;
+#endif
 
 	base_addr_remap = ioremap(port->reg_base, port->reg_len);
 	if (!base_addr_remap)
@@ -815,6 +820,14 @@ static int xaxi_pcie_init_port(struct xaxi_pcie_port *port)
 
 	writel(xaxipcie_msg_addr, port->base_addr_remap +
 				XAXIPCIE_REG_MSIBASE2);
+
+	xaxipcie_msi_irq_base = xaxipcie_alloc_msi_irqdescs(port->node,
+					xaxipcie_msg_addr);
+	if (xaxipcie_msi_irq_base < 0) {
+		pr_err("%s: Couldn't allocate MSI IRQ numbers\n",
+					 __func__);
+		return -ENODEV;
+	}
 #endif
 
 	/* make sure link is up */
-- 
1.7.5.4

