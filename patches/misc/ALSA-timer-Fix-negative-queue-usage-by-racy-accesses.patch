From 55e2fcd002e3df05229900a2644923bbc0c1949f Mon Sep 17 00:00:00 2001
From: Takashi Iwai <tiwai@suse.de>
Date: Mon, 4 Jul 2016 14:02:15 +0200
Subject: [PATCH 1/4] ALSA: timer: Fix negative queue usage by racy accesses

[ Upstream commit 3fa6993fef634e05d200d141a85df0b044572364 ]

The user timer tu->qused counter may go to a negative value when
multiple concurrent reads are performed since both the check and the
decrement of tu->qused are done in two individual locked contexts.
This results in bogus read outs, and the endless loop in the
user-space side.

The fix is to move the decrement of the tu->qused counter into the
same spinlock context as the zero-check of the counter.

Cc: <stable@vger.kernel.org>
Signed-off-by: Takashi Iwai <tiwai@suse.de>
Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
[lz: backport from https://git.kernel.org/pub/scm/linux/kernel/git/stable/
linux-stable.git/commit/sound/core/timer.c?h=linux-4.1.y&id=1dd148a1b9beb04150bbd6deae2518b73bbe937c]
Signed-off-by: Li Zhou <li.zhou@windriver.com>
---
 sound/core/timer.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/sound/core/timer.c b/sound/core/timer.c
index c17d1df..ada7a6e 100644
--- a/sound/core/timer.c
+++ b/sound/core/timer.c
@@ -1964,6 +1964,7 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 
 		qhead = tu->qhead++;
 		tu->qhead %= tu->queue_size;
+		tu->qused--;
 		spin_unlock_irq(&tu->qlock);
 
 		if (tu->tread) {
@@ -1977,7 +1978,6 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 		}
 
 		spin_lock_irq(&tu->qlock);
-		tu->qused--;
 		if (err < 0)
 			goto _error;
 		result += unit;
-- 
1.7.5.4

