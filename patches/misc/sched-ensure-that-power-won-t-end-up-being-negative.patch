From ae7e13e1aa445db25d3f30c70860e2cc792d0815 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Wed, 17 Jul 2013 10:00:18 +0800
Subject: [PATCH] sched: ensure that power won't end up being negative

Backport based on upstream commit aa483808516ca5cacfa0e5849691f64fec25828e
(sched: Remove irq time from available CPU power).

The total variable in scale_rt_power() can be smaller than rq->rt_avg.
If this happens, the scheduler thinks that the cpu still has remaining
capacity and will fork new tasks on that cpu. In reality, the cpu
is heavily loaded and new tasks will start slowly and compete for cpu
resources.

To fix this, we can test and ensure that the calculation is always
zero or more.

Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 kernel/sched_fair.c |    8 +++++++-
 1 files changed, 7 insertions(+), 1 deletions(-)

diff --git a/kernel/sched_fair.c b/kernel/sched_fair.c
index 1777ab7..cbe71cf 100644
--- a/kernel/sched_fair.c
+++ b/kernel/sched_fair.c
@@ -2345,7 +2345,13 @@ unsigned long scale_rt_power(int cpu)
 	u64 total, available;
 
 	total = sched_avg_period() + (rq->clock - rq->age_stamp);
-	available = total - rq->rt_avg;
+
+	if (unlikely(total < rq->rt_avg)) {
+		/* Ensures that power won't end up being negative */
+		available = 0;
+	} else {
+		available = total - rq->rt_avg;
+	}
 
 	if (unlikely((s64)total < SCHED_LOAD_SCALE))
 		total = SCHED_LOAD_SCALE;
-- 
1.7.0

