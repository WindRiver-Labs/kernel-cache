From 17b965d945c717fb599689e8083327473b5d987a Mon Sep 17 00:00:00 2001
From: Michal Simek <monstr@monstr.eu>
Date: Fri, 19 Oct 2012 11:31:53 +0200
Subject: [PATCH 086/628] watchdog: xilinx_wdtps: Coding style cleanup

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 58c461fb4cbc75ed913162151da5742d3c5aaf64

Signed-off-by: Michal Simek <monstr@monstr.eu>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/watchdog/xilinx_wdtps.c |   22 +++++++++++-----------
 1 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/watchdog/xilinx_wdtps.c b/drivers/watchdog/xilinx_wdtps.c
index 0cc2d12..2c8edb5 100644
--- a/drivers/watchdog/xilinx_wdtps.c
+++ b/drivers/watchdog/xilinx_wdtps.c
@@ -112,7 +112,7 @@ static struct watchdog_info xwdtps_info = {
  *
  * Read the contents of the ZMR register, clear the WDEN bit
  * in the register and set the access key for successful write.
- **/
+ */
 static int xwdtps_stop(struct watchdog_device *wdd)
 {
 	spin_lock(&wdt->io_lock);
@@ -126,7 +126,7 @@ static int xwdtps_stop(struct watchdog_device *wdd)
  * xwdtps_reload -  Reload the watchdog timer (i.e. pat the watchdog).
  *
  * Write the restart key value (0x00001999) to the restart register.
- **/
+ */
 static int xwdtps_reload(struct watchdog_device *wdd)
 {
 	spin_lock(&wdt->io_lock);
@@ -148,7 +148,7 @@ static int xwdtps_reload(struct watchdog_device *wdd)
  * Sets the WDT (WDEN bit) and either the Reset signal(RSTEN bit)
  * or Interrupt signal(IRQEN) with a specified cycles and the access
  * key to write to ZMR Register.
- **/
+ */
 static int xwdtps_start(struct watchdog_device *wdd)
 {
 	unsigned int data = 0;
@@ -200,7 +200,7 @@ static int xwdtps_start(struct watchdog_device *wdd)
  * Update the watchdog_device timeout with new value which is used when
  * xwdtps_start is called.
  * Returns 0 on success.
- **/
+ */
 static int xwdtps_settimeout(struct watchdog_device *wdd, unsigned int new_time)
 {
 	wdd->timeout = new_time;
@@ -216,7 +216,7 @@ static int xwdtps_settimeout(struct watchdog_device *wdd, unsigned int new_time)
  * The handler is invoked when the watchdog times out and a
  * reset on timeout has not been enabled.
  * Returns IRQ_HANDLED
- **/
+ */
 static irqreturn_t xwdtps_irq_handler(int irq, void *dev_id)
 {
 	struct platform_device *pdev = dev_id;
@@ -253,7 +253,7 @@ static struct watchdog_device xwdtps_device = {
  * because we need to disable the WDT before system goes down as WDT might
  * reset on the next boot.
  * Returns NOTIFY_DONE.
- **/
+ */
 static int xwdtps_notify_sys(struct notifier_block *this, unsigned long code,
 			      void *unused)
 {
@@ -277,7 +277,7 @@ static struct notifier_block xwdtps_notifier = {
  *
  * It does all the memory allocation and registration for the device.
  * Returns 0 on success, negative error otherwise.
- **/
+ */
 static int __init xwdtps_probe(struct platform_device *pdev)
 {
 	struct resource *regs;
@@ -404,7 +404,7 @@ err_free:
  * Unregister the device after releasing the resources.
  * Stop is allowed only when nowayout is disabled.
  * Returns 0 on success, otherwise negative error.
- **/
+ */
 static int __exit xwdtps_remove(struct platform_device *pdev)
 {
 	int res = 0;
@@ -432,7 +432,7 @@ static int __exit xwdtps_remove(struct platform_device *pdev)
  *
  * @pdev: handle to the platform structure.
  *
- **/
+ */
 static void xwdtps_shutdown(struct platform_device *pdev)
 {
 	/* Stop the device */
@@ -447,7 +447,7 @@ static void xwdtps_shutdown(struct platform_device *pdev)
  * @message: message to the device.
  *
  * Returns 0 always.
- **/
+ */
 static int xwdtps_suspend(struct platform_device *pdev, pm_message_t message)
 {
 	/* Stop the device */
@@ -461,7 +461,7 @@ static int xwdtps_suspend(struct platform_device *pdev, pm_message_t message)
  * @pdev: handle to the platform structure.
  *
  * Returns 0 always.
- **/
+ */
 static int xwdtps_resume(struct platform_device *pdev)
 {
 	/* Start the device */
-- 
1.7.5.4

