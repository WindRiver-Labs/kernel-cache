From 87e80c5f2b90e4a9d55bb652abb25468c48cacee Mon Sep 17 00:00:00 2001
From: Michal Simek <michal.simek@xilinx.com>
Date: Fri, 15 Mar 2013 18:39:09 +0100
Subject: [PATCH 529/628] usb: xilinx: Merge commit 'v3.8' into master-next

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 068160c0 Merge commit 'v3.8' into master-next

Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_udc.c       |   10 +++++-----
 drivers/usb/gadget/xilinx_usbps_udc.c |   19 ++++++++++---------
 drivers/usb/host/ehci-xilinx-usbps.c  |   22 ++++++++++++++++++++++
 drivers/usb/host/xusbps-dr-of.c       |   19 +++++++++----------
 4 files changed, 46 insertions(+), 24 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_udc.c b/drivers/usb/gadget/xilinx_udc.c
index feb0a98..79b47f3 100644
--- a/drivers/usb/gadget/xilinx_udc.c
+++ b/drivers/usb/gadget/xilinx_udc.c
@@ -40,7 +40,7 @@
 
 
  /* Match table for of_platform binding */
-static const struct of_device_id usb_of_match[] __devinitdata = {
+static const struct of_device_id usb_of_match[] = {
 	{.compatible = "xlnx,xps-usb2-device-4.00.a",},
 	{ /* end of list */ },
 };
@@ -2314,7 +2314,7 @@ static int xudc_init(struct device *dev, struct resource *regs_res,
  * returns: 0 for success and error value on failure
  *
  **/
-static int __devexit xudc_remove(struct platform_device *pdev)
+static int xudc_remove(struct platform_device *pdev)
 {
 
 	struct xusb_udc *udc = platform_get_drvdata(pdev);
@@ -2353,7 +2353,7 @@ static void xusb_release(struct device *dev)
  * returns: 0 for success and error value on failure
  *
  **/
-static int __devinit
+static int
 usb_of_probe(struct platform_device *op)
 {
 	struct device_node *np = op->dev.of_node;
@@ -2396,7 +2396,7 @@ usb_of_probe(struct platform_device *op)
  * returns: 0 for success and error value on failure
  *
  **/
-static int __devexit usb_of_remove(struct platform_device *pdev)
+static int usb_of_remove(struct platform_device *pdev)
 {
 	return xudc_remove(pdev);
 }
@@ -2408,7 +2408,7 @@ static struct platform_driver usb_of_driver = {
 		.of_match_table = usb_of_match,
 	},
 	.probe = usb_of_probe,
-	.remove = __devexit_p(usb_of_remove),
+	.remove = usb_of_remove,
 };
 
 module_platform_driver(usb_of_driver);
diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index 8462b78..de9d7ae 100644
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -841,7 +841,7 @@ static int xusbps_ep_enable(struct usb_ep *_ep,
 	if (!udc->driver || (udc->gadget.speed == USB_SPEED_UNKNOWN))
 		return -ESHUTDOWN;
 
-	max = le16_to_cpu(desc->wMaxPacketSize);
+	max = usb_endpoint_maxp(desc);
 
 	/* Disable automatic zlp generation.  Driver is reponsible to indicate
 	 * explicitly through req->req.zero.  This is needed to enable multi-td
@@ -939,6 +939,7 @@ static int xusbps_ep_disable(struct usb_ep *_ep)
 	nuke(ep, -ESHUTDOWN);
 
 	ep->desc = NULL;
+	ep->ep.desc = NULL;
 	ep->stopped = 1;
 	spin_unlock_irqrestore(&udc->lock, flags);
 
@@ -1609,7 +1610,7 @@ static int xusbps_udc_stop_peripheral(struct usb_phy *otg)
  * Called by initialization code of gadget drivers
 *----------------------------------------------------------------*/
 static int xusbps_start(struct usb_gadget_driver *driver,
-		int (*bind)(struct usb_gadget *))
+		int (*bind)(struct usb_gadget *, struct usb_gadget_driver *))
 {
 	int retval = -ENODEV;
 	unsigned long flags = 0;
@@ -1617,8 +1618,7 @@ static int xusbps_start(struct usb_gadget_driver *driver,
 	if (!udc_controller)
 		return -ENODEV;
 
-	if (!driver || (driver->max_speed != USB_SPEED_FULL
-				&& driver->max_speed != USB_SPEED_HIGH)
+	if (!driver || (driver->max_speed < USB_SPEED_HIGH)
 			|| !bind || !driver->disconnect || !driver->setup)
 		return -EINVAL;
 
@@ -1632,10 +1632,11 @@ static int xusbps_start(struct usb_gadget_driver *driver,
 	/* hook up the driver */
 	udc_controller->driver = driver;
 	udc_controller->gadget.dev.driver = &driver->driver;
+	udc_controller->gadget.speed = driver->max_speed;
 	spin_unlock_irqrestore(&udc_controller->lock, flags);
 
 	/* bind udc driver to gadget driver */
-	retval = bind(&udc_controller->gadget);
+	retval = bind(&udc_controller->gadget, driver);
 	if (retval) {
 		VDBG("bind to %s --> %d", driver->driver.name, retval);
 		udc_controller->gadget.dev.driver = NULL;
@@ -2715,7 +2716,7 @@ static void xusbps_udc_release(struct device *dev)
  * init resource for globle controller
  * Return the udc handle on success or NULL on failure
  ------------------------------------------------------------------*/
-static int __devinit struct_udc_setup(struct xusbps_udc *udc,
+static int struct_udc_setup(struct xusbps_udc *udc,
 		struct platform_device *pdev)
 {
 	struct xusbps_usb2_platform_data *pdata;
@@ -2769,7 +2770,7 @@ static int __devinit struct_udc_setup(struct xusbps_udc *udc,
  * ep0out is not used so do nothing here
  * ep0in should be taken care
  *--------------------------------------------------------------*/
-static int __devinit struct_ep_setup(struct xusbps_udc *udc,
+static int struct_ep_setup(struct xusbps_udc *udc,
 				unsigned char index, char *name, int link)
 {
 	struct xusbps_ep *ep = &udc->eps[index];
@@ -2802,7 +2803,7 @@ static int __devinit struct_ep_setup(struct xusbps_udc *udc,
  * all intialization operations implemented here except enabling usb_intr reg
  * board setup should have been done in the platform code
  */
-static int __devinit xusbps_udc_probe(struct platform_device *pdev)
+static int xusbps_udc_probe(struct platform_device *pdev)
 {
 	int ret = -ENODEV;
 	unsigned int i;
@@ -3048,7 +3049,7 @@ static const struct dev_pm_ops xusbps_udc_dev_pm_ops = {
 
 static struct platform_driver udc_driver = {
 	.probe   = xusbps_udc_probe,
-	.remove  = __exit_p(xusbps_udc_remove),
+	.remove  = xusbps_udc_remove,
 	/* these suspend and resume are not usb suspend and resume */
 	.driver  = {
 		.name = (char *)driver_name,
diff --git a/drivers/usb/host/ehci-xilinx-usbps.c b/drivers/usb/host/ehci-xilinx-usbps.c
index 5bfbbbb..d3efaad 100644
--- a/drivers/usb/host/ehci-xilinx-usbps.c
+++ b/drivers/usb/host/ehci-xilinx-usbps.c
@@ -327,6 +327,28 @@ static void ehci_xusbps_usb_setup(struct ehci_hcd *ehci)
 	}
 }
 
+/*
+ * FIXME USB: EHCI: remove ehci_port_power() routine
+ *(sha1: c73cee717e7d5da0698acb720ad1219646fe4f46)
+ */
+static void ehci_port_power (struct ehci_hcd *ehci, int is_on)
+{
+	unsigned port;
+
+	if (!HCS_PPC (ehci->hcs_params))
+		return;
+
+	ehci_dbg (ehci, "...power%s ports...\n", is_on ? "up" : "down");
+	for (port = HCS_N_PORTS (ehci->hcs_params); port > 0; )
+		(void) ehci_hub_control(ehci_to_hcd(ehci),
+				is_on ? SetPortFeature : ClearPortFeature,
+				USB_PORT_FEAT_POWER,
+				port--, NULL, 0);
+	/* Flush those writes */
+	ehci_readl(ehci, &ehci->regs->command);
+	msleep(20);
+}
+
 /* called after powerup, by probe or system-pm "wakeup" */
 static int ehci_xusbps_reinit(struct ehci_hcd *ehci)
 {
diff --git a/drivers/usb/host/xusbps-dr-of.c b/drivers/usb/host/xusbps-dr-of.c
index 7dec770..c75e23e 100644
--- a/drivers/usb/host/xusbps-dr-of.c
+++ b/drivers/usb/host/xusbps-dr-of.c
@@ -44,7 +44,7 @@ struct xusbps_host_data {
 	struct clk *clk;
 };
 
-static struct xusbps_dev_data dr_mode_data[] __devinitdata = {
+static struct xusbps_dev_data dr_mode_data[] = {
 	{
 		.dr_mode = "host",
 		.drivers = { "xusbps-ehci", NULL, NULL, },
@@ -62,7 +62,7 @@ static struct xusbps_dev_data dr_mode_data[] __devinitdata = {
 	},
 };
 
-static struct xusbps_dev_data * __devinit get_dr_mode_data(
+static struct xusbps_dev_data * get_dr_mode_data(
 		struct device_node *np)
 {
 	const unsigned char *prop;
@@ -80,8 +80,7 @@ static struct xusbps_dev_data * __devinit get_dr_mode_data(
 	return &dr_mode_data[0]; /* mode not specified, use host */
 }
 
-static enum xusbps_usb2_phy_modes __devinit determine_usb_phy(const char
-					*phy_type)
+static enum xusbps_usb2_phy_modes determine_usb_phy(const char *phy_type)
 {
 	if (!phy_type)
 		return XUSBPS_USB2_PHY_NONE;
@@ -97,7 +96,7 @@ static enum xusbps_usb2_phy_modes __devinit determine_usb_phy(const char
 	return XUSBPS_USB2_PHY_NONE;
 }
 
-static struct platform_device * __devinit xusbps_device_register(
+static struct platform_device * xusbps_device_register(
 					struct platform_device *ofdev,
 					struct xusbps_usb2_platform_data *pdata,
 					const char *name, int id)
@@ -146,7 +145,7 @@ error:
 	return ERR_PTR(retval);
 }
 
-static int __devinit xusbps_dr_of_probe(struct platform_device *ofdev)
+static int xusbps_dr_of_probe(struct platform_device *ofdev)
 {
 	struct device_node *np = ofdev->dev.of_node;
 	struct platform_device *usb_dev;
@@ -179,7 +178,7 @@ static int __devinit xusbps_dr_of_probe(struct platform_device *ofdev)
 
 	if (!request_mem_region(res->start, res->end - res->start + 1,
 						ofdev->name)) {
-		dev_dbg(&ofdev->dev, "Controller already in use\n");
+		dev_err(&ofdev->dev, "Controller already in use\n");
 		return -EBUSY;
 	}
 
@@ -264,13 +263,13 @@ err_free:
 	return ret;
 }
 
-static int __devexit __unregister_subdev(struct device *dev, void *d)
+static int __unregister_subdev(struct device *dev, void *d)
 {
 	platform_device_unregister(to_platform_device(dev));
 	return 0;
 }
 
-static int __devexit xusbps_dr_of_remove(struct platform_device *ofdev)
+static int xusbps_dr_of_remove(struct platform_device *ofdev)
 {
 	struct resource *res;
 	struct xusbps_host_data *hdata = platform_get_drvdata(ofdev);
@@ -327,7 +326,7 @@ static struct platform_driver xusbps_dr_driver = {
 		.pm = &xusbps_pm_ops,
 	},
 	.probe	= xusbps_dr_of_probe,
-	.remove	= __devexit_p(xusbps_dr_of_remove),
+	.remove	= xusbps_dr_of_remove,
 };
 
 module_platform_driver(xusbps_dr_driver);
-- 
1.7.5.4

