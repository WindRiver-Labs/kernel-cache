From 55507931c948b8b50617a5f13e4dfc254eaec13f Mon Sep 17 00:00:00 2001
From: yadi.hu@windriver.com <yadi.hu@windriver.com>
Date: Tue, 5 Aug 2014 17:27:46 +0800
Subject: [PATCH] ptrace: restore state transitions between STOPPED and TRACED
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fix a error in f41a33a52d2f34bc463de720d44c81f13245df3a
(“ptrace: ensure arch_ptrace/ptrace_request can never race
with SIGKILL - linux – CVE-2013-0871”)

this commit wrongly deletes a lines of code in ptrace.c, which
are necessary for maintaining state transitions between STOPPED
and TRACED.

Signed-off-by: Hu <yadi.hu@windriver.com>
---
 kernel/ptrace.c |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index 9388d26..68a6af1 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -131,7 +131,15 @@ int ptrace_check_attach(struct task_struct *child, int kill)
 		/*
 		 * child->sighand can't be NULL, release_task()
 		 * does ptrace_unlink() before __exit_signal().
-		 */
+		*/
+		spin_lock_irq(&child->sighand->siglock);
+		if (task_is_stopped(child)){
+			child->state = TASK_TRACED;
+		}
+		else if (!task_is_traced(child) && !kill){
+			ret = -ESRCH;
+		}
+		spin_unlock_irq(&child->sighand->siglock);
 		if (kill || ptrace_freeze_traced(child))
 			ret = 0;
 	}
-- 
1.7.0

