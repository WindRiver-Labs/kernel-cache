From 1501e074045b9afc588ba664e4b849174143cea8 Mon Sep 17 00:00:00 2001
From: "J. R. Okajima" <hooanon05g@gmail.com>
Date: Mon, 15 Feb 2016 15:42:10 +0900
Subject: [PATCH] aufs: security bugfix, test mnt_ns in open(2) for fuse
 branch

commit 01070dabac932a102816ab366fd4ea5a584c2baf from
https://github.com/sfjro/aufs4-standalone.git aufs4.0

Under a special condition, an executable on a malicious FUSE branch could
escalate its privilege via aufs. In order to prevent this, here adds a
test about mnt_ns into open(2) for FUSE branch only.

(How can I describe the security detail before the issue will be opened
on the coordinated release date (CRD)?)

Reported-by: halfdog <me@halfdog.net>
Signed-off-by: J. R. Okajima <hooanon05g@gmail.com>
(cherry picked from commit aae4cfb36c5a2a4643785438face14619fec482e)
Signed-off-by: Qi Hou <qi.hou@windriver.com>

Conflicts:
	fs/aufs/dir.c
---
 fs/aufs/dir.c    |    5 +++++
 fs/aufs/f_op.c   |    6 +++++-
 fs/aufs/module.c |    1 +
 fs/aufs/module.h |    1 +
 fs/aufs/vfsub.c  |   18 ++++++++++++++++++
 fs/aufs/vfsub.h  |    5 +++++
 6 files changed, 35 insertions(+), 1 deletions(-)

diff --git a/fs/aufs/dir.c b/fs/aufs/dir.c
index 568ea0a..38c5ac5 100644
--- a/fs/aufs/dir.c
+++ b/fs/aufs/dir.c
@@ -149,10 +149,12 @@ static int do_open_dir(struct file *file, int flags)
 	int err;
 	aufs_bindex_t bindex, btail;
 	struct dentry *dentry, *h_dentry;
+	struct vfsmount *mnt;
 	struct file *h_file;
 
 	FiMustWriteLock(file);
 
+	mnt = file->f_path.mnt;
 	dentry = file->f_dentry;
 	err = au_alive_dir(dentry);
 	if (unlikely(err))
@@ -168,6 +170,9 @@ static int do_open_dir(struct file *file, int flags)
 		if (!h_dentry)
 			continue;
 
+		err = vfsub_test_mntns(mnt, h_dentry->d_sb);
+		if (unlikely(err))
+			break;
 		h_file = au_h_open(dentry, bindex, flags, file);
 		if (IS_ERR(h_file)) {
 			err = PTR_ERR(h_file);
diff --git a/fs/aufs/f_op.c b/fs/aufs/f_op.c
index 400a0cd..8e56663 100644
--- a/fs/aufs/f_op.c
+++ b/fs/aufs/f_op.c
@@ -31,7 +31,7 @@ int au_do_open_nondir(struct file *file, int flags)
 	int err;
 	aufs_bindex_t bindex;
 	struct file *h_file;
-	struct dentry *dentry;
+	struct dentry *dentry, *h_dentry;
 	struct au_finfo *finfo;
 
 	FiMustWriteLock(file);
@@ -45,6 +45,10 @@ int au_do_open_nondir(struct file *file, int flags)
 	memset(&finfo->fi_htop, 0, sizeof(finfo->fi_htop));
 	atomic_set(&finfo->fi_mmapped, 0);
 	bindex = au_dbstart(dentry);
+	h_dentry = au_h_dptr(dentry, bindex);
+	err = vfsub_test_mntns(file->f_path.mnt, h_dentry->d_sb);
+	if (unlikely(err))
+		goto out;
 	h_file = au_h_open(dentry, bindex, flags, file);
 	if (IS_ERR(h_file))
 		err = PTR_ERR(h_file);
diff --git a/fs/aufs/module.c b/fs/aufs/module.c
index 3930f56..ebc5de2 100644
--- a/fs/aufs/module.c
+++ b/fs/aufs/module.c
@@ -109,6 +109,7 @@ MODULE_ALIAS_FS(AUFS_NAME);
 int sysaufs_brs = 1;
 MODULE_PARM_DESC(brs, "use <sysfs>/fs/aufs/si_*/brN");
 module_param_named(brs, sysaufs_brs, int, S_IRUGO);
+bool au_userns;
 
 /* ---------------------------------------------------------------------- */
 
diff --git a/fs/aufs/module.h b/fs/aufs/module.h
index 52bf472..5858107 100644
--- a/fs/aufs/module.h
+++ b/fs/aufs/module.h
@@ -32,6 +32,7 @@ struct seq_file;
 
 /* module parameters */
 extern int sysaufs_brs;
+extern bool au_userns;
 
 /* ---------------------------------------------------------------------- */
 
diff --git a/fs/aufs/vfsub.c b/fs/aufs/vfsub.c
index 917d374..ca13661 100644
--- a/fs/aufs/vfsub.c
+++ b/fs/aufs/vfsub.c
@@ -22,10 +22,28 @@
 
 #include <linux/ima.h>
 #include <linux/namei.h>
+#include <linux/nsproxy.h>
 #include <linux/security.h>
 #include <linux/splice.h>
+#include "../fs/mount.h"
 #include "aufs.h"
 
+#ifdef CONFIG_AUFS_BR_FUSE
+int vfsub_test_mntns(struct vfsmount *mnt, struct super_block *h_sb)
+{
+	struct nsproxy *ns;
+
+	if (!au_test_fuse(h_sb) || !au_userns)
+		return 0;
+
+	ns = current->nsproxy;
+	/* no {get,put}_nsproxy(ns) */
+	return real_mount(mnt)->mnt_ns == ns->mnt_ns ? 0 : -EACCES;
+}
+#endif
+
+/* ---------------------------------------------------------------------- */
+
 int vfsub_update_h_iattr(struct path *h_path, int *did)
 {
 	int err;
diff --git a/fs/aufs/vfsub.h b/fs/aufs/vfsub.h
index 5a50a62..c24b681 100644
--- a/fs/aufs/vfsub.h
+++ b/fs/aufs/vfsub.h
@@ -100,6 +100,11 @@ static inline void vfsub_dead_dir(struct inode *inode)
 	inode->i_flags |= S_DEAD;
 	clear_nlink(inode);
 }
+#ifdef CONFIG_AUFS_BR_FUSE
+int vfsub_test_mntns(struct vfsmount *mnt, struct super_block *h_sb);
+#else
+AuStubInt0(vfsub_test_mntns, struct vfsmount *mnt, struct super_block *h_sb);
+#endif
 
 /* ---------------------------------------------------------------------- */
 
-- 
1.7.5.4

