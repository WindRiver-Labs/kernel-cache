From 921bd05fff1d946b3793cf4c53c2b2c3be260644 Mon Sep 17 00:00:00 2001
From: Suneel <suneelg@xilinx.com>
Date: Fri, 25 May 2012 20:25:58 +0530
Subject: [PATCH 213/628] Xilinx: ARM: SPI: Fix read issue for large data

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit ca0882ead368be0e751cc602548e6611e6021904

Usage of data memory barrier ensures that the
data read is completed before the status read
is initiated while reading large amounts of
data.

Signed-off-by: Suneel <suneelg@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/spi/spi-xilinx-ps.c |   15 ++++++++-------
 1 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/drivers/spi/spi-xilinx-ps.c b/drivers/spi/spi-xilinx-ps.c
index 4ec3997..472b8cb 100644
--- a/drivers/spi/spi-xilinx-ps.c
+++ b/drivers/spi/spi-xilinx-ps.c
@@ -329,7 +329,6 @@ static irqreturn_t xspips_irq(int irq, void *dev_id)
 {
 	struct xspips *xspi = dev_id;
 	u32 intr_status;
-	u8 fifo_count = 128; /* fifo depth */
 
 	intr_status = xspips_read(xspi->regs + XSPIPS_ISR_OFFSET);
 	xspips_write(xspi->regs + XSPIPS_ISR_OFFSET, intr_status);
@@ -349,15 +348,17 @@ static irqreturn_t xspips_irq(int irq, void *dev_id)
 			u8 data;
 
 			data = xspips_read(xspi->regs + XSPIPS_RXD_OFFSET);
-			if ((xspi->rxbuf) && (fifo_count))
+			if (xspi->rxbuf)
 				*xspi->rxbuf++ = data;
 
-			/* Fixing the loop count to fifo depth as
-			 * there is issue with h/w where the status register
-			 * is not updated quick enough.
-			 * Need to revisit after h/w fix.
+			/* Data memory barrier is placed here to ensure that
+			 * data read operation is completed before the status
+			 * read is initiated. Without dmb, there are chances
+			 * that data and status reads will appear at the SPI
+			 * peripheral back-to-back which results in an
+			 * incorrect status read.
 			 */
-			--fifo_count;
+			dmb();
 		}
 
 		if (xspi->remaining_bytes) {
-- 
1.7.5.4

