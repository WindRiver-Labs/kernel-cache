From 616689a381e4073f33e1c8888a5e74eada1767f9 Mon Sep 17 00:00:00 2001
From: Suneel <suneelg@xilinx.com>
Date: Thu, 15 Mar 2012 11:19:50 +0530
Subject: [PATCH 210/628] Xilinx: ARM: SPI: Workaround for SPI H/w issue

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit fab78402afadbda35e91cc069db93d524e5e48f2

Temp fix to overcome the h/w issue with SPI status
register which is not updated quick enough.
Need to revert when h/w issue is fixed.

Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/spi/spi-xilinx-ps.c |   15 ++++++++-------
 1 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/drivers/spi/spi-xilinx-ps.c b/drivers/spi/spi-xilinx-ps.c
index d95a252..31061be 100644
--- a/drivers/spi/spi-xilinx-ps.c
+++ b/drivers/spi/spi-xilinx-ps.c
@@ -329,6 +329,7 @@ static irqreturn_t xspips_irq(int irq, void *dev_id)
 {
 	struct xspips *xspi = dev_id;
 	u32 intr_status;
+	u8 fifo_count = 128; /* fifo depth */
 
 	intr_status = xspips_read(xspi->regs + XSPIPS_ISR_OFFSET);
 	xspips_write(xspi->regs + XSPIPS_ISR_OFFSET, intr_status);
@@ -348,15 +349,15 @@ static irqreturn_t xspips_irq(int irq, void *dev_id)
 			u8 data;
 
 			data = xspips_read(xspi->regs + XSPIPS_RXD_OFFSET);
-			if (xspi->rxbuf) {
+			if ((xspi->rxbuf) && (fifo_count))
 				*xspi->rxbuf++ = data;
 
-				/* Hack for now, seeing issues with h/w where
-				 * the status register is not updated quick 
-				 * enough, yes this is not efficient
-				 */		
-				udelay(1);
-			}
+			/* Fixing the loop count to fifo depth as
+			 * there is issue with h/w where the status register
+			 * is not updated quick enough.
+			 * Need to revisit after h/w fix.
+			 */
+			--fifo_count;
 		}
 
 		if (xspi->remaining_bytes) {
-- 
1.7.5.4

