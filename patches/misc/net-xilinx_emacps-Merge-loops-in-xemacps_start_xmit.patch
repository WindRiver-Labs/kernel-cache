From 3737bcb3bcc29cf8318829a888a3f5d97cda5472 Mon Sep 17 00:00:00 2001
From: Thomas Betker <thomas.betker@rohde-schwarz.com>
Date: Sat, 8 Jun 2013 11:03:18 +0200
Subject: [PATCH 409/628] net: xilinx_emacps: Merge loops in
 xemacps_start_xmit().

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 654cd444f65c4df0331612a27ce1e8cdeceacc70

In xemacps_start_xmit(), merge the loop for clearing the USED bits back
into the main loop; this simplifies the code and makes it more readable.

This is a supplement to the commit "xilinx_emacps: Fix the bug for
fragmented packets" on Apr 26, 2013.

Signed-off-by: Thomas Betker <thomas.betker@rohde-schwarz.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   51 +++++++-------------------
 1 files changed, 14 insertions(+), 37 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 0cadd98..f16a16e 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -2007,21 +2007,22 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	skb_frag_t *frag;
 	struct xemacps_bd *cur_p;
 	unsigned long flags;
-	int bd_tail;
-	int temp_bd_index;
+	u32 bd_tail;
 
 	nr_frags = skb_shinfo(skb)->nr_frags + 1;
 	spin_lock_bh(&lp->tx_lock);
 
-	cur_p = &(lp->tx_bd[lp->tx_bd_tail]);
 	if (nr_frags >= lp->tx_bd_freecnt) {
 		netif_stop_queue(ndev); /* stop send queue */
 		spin_unlock_bh(&lp->tx_lock);
 		return NETDEV_TX_BUSY;
 	}
+
+	bd_tail = lp->tx_bd_tail;
+	cur_p = &lp->tx_bd[bd_tail];
 	lp->tx_bd_freecnt -= nr_frags;
 	frag = &skb_shinfo(skb)->frags[0];
-	bd_tail = lp->tx_bd_tail;
+
 	for (i = 0; i < nr_frags; i++) {
 		if (i == 0) {
 			len = skb_headlen(skb);
@@ -2041,15 +2042,14 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 		lp->tx_skb[lp->tx_bd_tail].len = len;
 		cur_p->addr = mapping;
 
-		/* Preserve only critical status bits.  Packet is NOT to be
-		 * committed to hardware at this time. This ensures that
-		 * the Used bit will still be set. The clearing of Used bits
-		 * happen in a loop after this loop.
-		 */
+		/* preserve critical status bits */
 		regval = cur_p->ctrl;
 		regval &= (XEMACPS_TXBUF_USED_MASK | XEMACPS_TXBUF_WRAP_MASK);
 		/* update length field */
 		regval |= ((regval & ~XEMACPS_TXBUF_LEN_MASK) | len);
+		/* commit second to last buffer to hardware */
+		if (i != 0)
+			regval &= ~XEMACPS_TXBUF_USED_MASK;
 		/* last fragment of this packet? */
 		if (i == (nr_frags - 1))
 			regval |= XEMACPS_TXBUF_LAST_MASK;
@@ -2057,41 +2057,18 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 
 		lp->tx_bd_tail++;
 		lp->tx_bd_tail = lp->tx_bd_tail % XEMACPS_SEND_BD_CNT;
-
 		cur_p = &(lp->tx_bd[lp->tx_bd_tail]);
 	}
+	wmb();
 
-	/* Remember the bd index for the first bd in the bd chain allocated
-	 * for the fragments. The Used bit for the 1st BD will need to be
-	 * updated last.
-	 */
-	temp_bd_index = bd_tail;
-	bd_tail++;
-	bd_tail = bd_tail % XEMACPS_SEND_BD_CNT;
-	cur_p = &(lp->tx_bd[bd_tail]);
-	/* Clear the used bits for the BDs for a packet that consists of
-	 *  multiple BDs. For single BD packets, this loop will not execute.
-	 *  For multiple BD packets, the Used bit updates will happen for
-	 * all BDs except the 1st BD in the BD chain allocated for the packet.
-	 */
-	for (i = 1; i < nr_frags; i++) {
-		regval = cur_p->ctrl;
-		regval &= ~XEMACPS_TXBUF_USED_MASK;
-		cur_p->ctrl = regval;
-		bd_tail++;
-		bd_tail = bd_tail % XEMACPS_SEND_BD_CNT;
-		cur_p = &(lp->tx_bd[bd_tail]);
-	}
-	/* Clear the Used bit. For single BD packets, the clearing of
-	 * Used bit happens here. For multi-BD packets, the clearing of
-	 * the Used bit of the 1st BD happens here.
-	 */
-	cur_p = &(lp->tx_bd[temp_bd_index]);
+	/* commit first buffer to hardware -- do this after
+	 * committing the other buffers to avoid an underrun */
+	cur_p = &lp->tx_bd[bd_tail];
 	regval = cur_p->ctrl;
 	regval &= ~XEMACPS_TXBUF_USED_MASK;
 	cur_p->ctrl = regval;
-
 	wmb();
+
 	spin_lock_irqsave(&lp->nwctrlreg_lock, flags);
 	regval = xemacps_read(lp->baseaddr, XEMACPS_NWCTRL_OFFSET);
 	xemacps_write(lp->baseaddr, XEMACPS_NWCTRL_OFFSET,
-- 
1.7.5.4

