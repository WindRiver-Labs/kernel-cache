From 65c39af3ea170845fb40fd682ed89c170995c967 Mon Sep 17 00:00:00 2001
From: John Linn <john.linn@xilinx.com>
Date: Mon, 25 Jun 2012 16:55:03 -0700
Subject: [PATCH 474/628] Xilinx: ARM: USB: Fix compile issues for 3.5 kernel

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 5706d4f2927d6ab26666a7fe0d630dff2fdc6f83

These issues were not taken care of during the merge
since they were more intrusive.

Signed-off-by: John Linn <john.linn@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_usbps_udc.c |   24 ++++++++++++------------
 drivers/usb/host/ehci-xilinx-usbps.c  |   14 +++++++-------
 include/linux/usb/xilinx_usbps_otg.h  |   12 ++++++------
 3 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index b7d0048..cf3c32b 100755
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -1318,7 +1318,7 @@ static void setup_received_irq(struct xusbps_udc *udc,
 			else if (setup->bRequest == USB_DEVICE_B_HNP_ENABLE) {
 				udc->gadget.b_hnp_enable = 1;
 #ifdef	CONFIG_USB_XUSBPS_OTG
-				if (!udc->xotg->otg.default_a)
+				if (!udc->xotg->otg.otg->default_a)
 					udc->xotg->hsm.b_hnp_enable = 1;
 #endif
 			} else if (setup->bRequest == USB_DEVICE_A_HNP_SUPPORT)
@@ -1601,7 +1601,7 @@ static void suspend_irq(struct xusbps_udc *udc)
 
 #ifdef	CONFIG_USB_XUSBPS_OTG
 	if (gadget_is_otg(&udc->gadget)) {
-		if (udc->xotg->otg.default_a) {
+		if (udc->xotg->otg.otg->default_a) {
 			udc->xotg->hsm.b_bus_suspend = 1;
 			/* notify transceiver the state changes */
 			if (spin_trylock(&udc->xotg->wq_lock)) {
@@ -1720,7 +1720,7 @@ static irqreturn_t xusbps_udc_irq(int irq, void *_udc)
 #ifdef CONFIG_USB_XUSBPS_OTG
 	if (gadget_is_otg(&udc->gadget)) {
 		/* A-device */
-		if (udc->transceiver->default_a &&
+		if (udc->transceiver->otg->default_a &&
 			(udc->transceiver->state != OTG_STATE_A_PERIPHERAL))
 			return IRQ_NONE;
 		/* B-device */
@@ -1811,9 +1811,9 @@ static irqreturn_t xusbps_udc_irq(int irq, void *_udc)
 /*----------------------------------------------------------------
  * OTG Related changes
  *--------------------------------------------------------------*/
-static int xusbps_udc_start_peripheral(struct otg_transceiver  *otg)
+static int xusbps_udc_start_peripheral(struct usb_phy  *otg)
 {
-	struct usb_gadget	*gadget = otg->gadget;
+	struct usb_gadget	*gadget = otg->otg->gadget;
 	struct xusbps_udc *udc = container_of(gadget, struct xusbps_udc,
 						gadget);
 	unsigned long flags = 0;
@@ -1821,7 +1821,7 @@ static int xusbps_udc_start_peripheral(struct otg_transceiver  *otg)
 
 	spin_lock_irqsave(&udc->lock, flags);
 
-	if (!otg->default_a) {
+	if (!otg->otg->default_a) {
 		dr_controller_setup(udc);
 		reset_queues(udc);
 	} else {
@@ -1842,16 +1842,16 @@ static int xusbps_udc_start_peripheral(struct otg_transceiver  *otg)
 	return 0;
 }
 
-static int xusbps_udc_stop_peripheral(struct otg_transceiver  *otg)
+static int xusbps_udc_stop_peripheral(struct usb_phy *otg)
 {
-	struct usb_gadget	*gadget = otg->gadget;
+	struct usb_gadget	*gadget = otg->otg->gadget;
 	struct xusbps_udc *udc = container_of(gadget, struct xusbps_udc,
 						gadget);
 
 	dr_controller_stop(udc);
 
 	/* refer to USB OTG 6.6.2.3 b_hnp_en is cleared */
-	if (!udc->xotg->otg.default_a)
+	if (!udc->xotg->otg.otg->default_a)
 		udc->xotg->hsm.b_hnp_enable = 0;
 
 	return 0;
@@ -1898,7 +1898,7 @@ int xusbps_start(struct usb_gadget_driver *driver,
 	}
 #ifdef CONFIG_USB_XUSBPS_OTG
 	if (gadget_is_otg(&udc_controller->gadget)) {
-		retval = otg_set_peripheral(udc_controller->transceiver,
+		retval = otg_set_peripheral(udc_controller->transceiver->otg,
 				&udc_controller->gadget);
 		if (retval < 0) {
 			VDBG("can't bind to otg transceiver\n");
@@ -1913,7 +1913,7 @@ int xusbps_start(struct usb_gadget_driver *driver,
 		udc_controller->xotg->stop_peripheral =
 					xusbps_udc_stop_peripheral;
 
-		if (!udc_controller->transceiver->default_a &&
+		if (!udc_controller->transceiver->otg->default_a &&
 					udc_controller->stopped &&
 				udc_controller->xotg->hsm.b_sess_vld) {
 			dr_controller_setup(udc_controller);
@@ -1964,7 +1964,7 @@ int xusbps_stop(struct usb_gadget_driver *driver)
 		return -EINVAL;
 
 	if (udc_controller->transceiver)
-		otg_set_peripheral(udc_controller->transceiver, NULL);
+		otg_set_peripheral(udc_controller->transceiver->otg, NULL);
 
 	/* stop DR, disable intr */
 	dr_controller_stop(udc_controller);
diff --git a/drivers/usb/host/ehci-xilinx-usbps.c b/drivers/usb/host/ehci-xilinx-usbps.c
index d0bfcfb..47ae1de 100755
--- a/drivers/usb/host/ehci-xilinx-usbps.c
+++ b/drivers/usb/host/ehci-xilinx-usbps.c
@@ -47,7 +47,7 @@ static int ehci_xusbps_update_device(struct usb_hcd *hcd, struct usb_device
 		/* HNP test device */
 		if ((le16_to_cpu(udev->descriptor.idVendor) == 0x1a0a &&
 			le16_to_cpu(udev->descriptor.idProduct) == 0xbadd)) {
-			if (xotg->otg.default_a == 1)
+			if (xotg->otg.otg->default_a == 1)
 				xotg->hsm.b_conn = 1;
 			else
 				xotg->hsm.a_conn = 1;
@@ -69,12 +69,12 @@ static void ehci_xusbps_start_hnp(struct ehci_hcd *ehci)
 	ehci_writel(ehci, portsc, &ehci->regs->port_status[port]);
 	local_irq_restore(flags);
 
-	otg_start_hnp(ehci->transceiver);
+	otg_start_hnp(ehci->transceiver->otg);
 }
 
-static int ehci_xusbps_otg_start_host(struct otg_transceiver  *otg)
+static int ehci_xusbps_otg_start_host(struct usb_phy *otg)
 {
-	struct usb_hcd		*hcd = bus_to_hcd(otg->host);
+	struct usb_hcd		*hcd = bus_to_hcd(otg->otg->host);
 	struct xusbps_otg *xotg =
 			xceiv_to_xotg(hcd_to_ehci(hcd)->transceiver);
 
@@ -82,9 +82,9 @@ static int ehci_xusbps_otg_start_host(struct otg_transceiver  *otg)
 	return 0;
 }
 
-static int ehci_xusbps_otg_stop_host(struct otg_transceiver  *otg)
+static int ehci_xusbps_otg_stop_host(struct usb_phy *otg)
 {
-	struct usb_hcd		*hcd = bus_to_hcd(otg->host);
+	struct usb_hcd		*hcd = bus_to_hcd(otg->otg->host);
 
 	usb_remove_hcd(hcd);
 	return 0;
@@ -166,7 +166,7 @@ static int usb_hcd_xusbps_probe(const struct hc_driver *driver,
 	ehci = hcd_to_ehci(hcd);
 	if (pdata->otg) {
 		ehci->transceiver = pdata->otg;
-		retval = otg_set_host(ehci->transceiver,
+		retval = otg_set_host(ehci->transceiver->otg,
 				&ehci_to_hcd(ehci)->self);
 		if (retval)
 			return retval;
diff --git a/include/linux/usb/xilinx_usbps_otg.h b/include/linux/usb/xilinx_usbps_otg.h
index fdb3ec6..9b1aaf6 100644
--- a/include/linux/usb/xilinx_usbps_otg.h
+++ b/include/linux/usb/xilinx_usbps_otg.h
@@ -165,7 +165,7 @@ struct otg_hsm {
 };
 
 struct xusbps_otg {
-	struct otg_transceiver	otg;
+	struct usb_phy		otg;
 
 	struct otg_hsm		hsm;
 
@@ -179,12 +179,12 @@ struct xusbps_otg {
 	struct atomic_notifier_head	otg_notifier;
 
 	/* start/stop USB Host function */
-	int	(*start_host)(struct otg_transceiver *otg);
-	int	(*stop_host)(struct otg_transceiver *otg);
+	int	(*start_host)(struct usb_phy *otg);
+	int	(*stop_host)(struct usb_phy *otg);
 
 	/* start/stop USB Peripheral function */
-	int	(*start_peripheral)(struct otg_transceiver *otg);
-	int	(*stop_peripheral)(struct otg_transceiver *otg);
+	int	(*start_peripheral)(struct usb_phy *otg);
+	int	(*stop_peripheral)(struct usb_phy *otg);
 
 	struct device			*dev;
 
@@ -201,7 +201,7 @@ struct xusbps_otg {
 };
 
 static inline
-struct xusbps_otg *xceiv_to_xotg(struct otg_transceiver *otg)
+struct xusbps_otg *xceiv_to_xotg(struct usb_phy *otg)
 {
 	return container_of(otg, struct xusbps_otg, otg);
 }
-- 
1.7.5.4

