From 0564e3b2ae8f883738cf68f6685585a4a9d36d11 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Mon, 10 Dec 2012 13:55:46 -0800
Subject: [PATCH 497/628] usb: xilinxps_udc: Use dev_err when possbile

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 48f0c390687f0ac369b5b299ddd153355b1fd028

In places where it is possible the custom ERR macro is replaced
with dev_err.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Acked-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_usbps_udc.c |   12 ++++++------
 1 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index e2044c8..6a939da 100644
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -2629,7 +2629,7 @@ static int __devinit struct_udc_setup(struct xusbps_udc *udc,
 
 	udc->eps = kzalloc(sizeof(struct xusbps_ep) * udc->max_ep, GFP_KERNEL);
 	if (!udc->eps) {
-		ERR("malloc xusbps_ep failed\n");
+		dev_err(&pdev->dev, "malloc xusbps_ep failed\n");
 		return -1;
 	}
 
@@ -2644,7 +2644,7 @@ static int __devinit struct_udc_setup(struct xusbps_udc *udc,
 	udc->ep_qh = dma_alloc_coherent(&pdev->dev, size,
 					&udc->ep_qh_dma, GFP_KERNEL);
 	if (!udc->ep_qh) {
-		ERR("malloc QHs for udc failed\n");
+		dev_err(&pdev->dev, "malloc QHs for udc failed\n");
 		kfree(udc->eps);
 		return -1;
 	}
@@ -2726,7 +2726,7 @@ static int __devinit xusbps_udc_probe(struct platform_device *pdev)
 
 	udc_controller = kzalloc(sizeof(struct xusbps_udc), GFP_KERNEL);
 	if (udc_controller == NULL) {
-		ERR("malloc udc failed\n");
+		dev_err(&pdev->dev, "malloc udc failed\n");
 		return -ENOMEM;
 	}
 
@@ -2753,7 +2753,7 @@ static int __devinit xusbps_udc_probe(struct platform_device *pdev)
 	/* Read Device Controller Capability Parameters register */
 	dccparams = xusbps_readl(&dr_regs->dccparams);
 	if (!(dccparams & DCCPARAMS_DC)) {
-		ERR("This SOC doesn't support device role\n");
+		dev_err(&pdev->dev, "This SOC doesn't support device role\n");
 		ret = -ENODEV;
 		goto err_iounmap;
 	}
@@ -2770,14 +2770,14 @@ static int __devinit xusbps_udc_probe(struct platform_device *pdev)
 	ret = request_irq(udc_controller->irq, xusbps_udc_irq, IRQF_SHARED,
 			driver_name, udc_controller);
 	if (ret != 0) {
-		ERR("cannot request irq %d err %d\n",
+		dev_err(&pdev->dev, "cannot request irq %d err %d\n",
 				udc_controller->irq, ret);
 		goto err_iounmap;
 	}
 
 	/* Initialize the udc structure including QH member and other member */
 	if (struct_udc_setup(udc_controller, pdev)) {
-		ERR("Can't initialize udc data structure\n");
+		dev_err(&pdev->dev, "Can't initialize udc data structure\n");
 		ret = -ENOMEM;
 		goto err_free_irq;
 	}
-- 
1.7.5.4

