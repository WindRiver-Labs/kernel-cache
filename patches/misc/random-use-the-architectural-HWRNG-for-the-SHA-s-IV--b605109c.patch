From 009c76d0eeaa92caa1c5397ec4c0a3f88bc0f93c Mon Sep 17 00:00:00 2001
From: Theodore Ts'o <tytso@mit.edu>
Date: Wed, 25 Nov 2015 19:00:54 +0800
Subject: [PATCH 3/3] random: use the architectural HWRNG for the SHA's IV in
 extract_buf()

commit 46884442fc5bb81a896f7245bd850fde9b435509 upstream

To help assuage the fears of those who think the NSA can introduce a
massive hack into the instruction decode and out of order execution
engine in the CPU without hundreds of Intel engineers knowing about
it (only one of which woud need to have the conscience and courage of
Edward Snowden to spill the beans to the public), use the HWRNG to
initialize the SHA starting value, instead of xor'ing it in
afterwards.

Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
Signed-off-by: yzhu1 <yzhu1@windriver.com>
---
 drivers/char/random.c |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/char/random.c b/drivers/char/random.c
index 13b874c..2a448c1 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -1000,17 +1000,17 @@ static void extract_buf(struct entropy_store *r, __u8 *out)
 
 	/*
 	 * If we have a architectural hardware random number
-	 * generator, mix that in, too.
+	 * generator, use it for SHA's initial vector 
 	 */
+	sha_init(hash.w);
 	for (i = 0; i < LONGS(20); i++) {
 		unsigned long v;
 		if (!arch_get_random_long(&v))
 			break;
-		hash.l[i] ^= v;
+		hash.l[i] = v;
 	}
 
 	/* Generate a hash across the pool, 16 words (512 bits) at a time */
-	sha_init(hash.w);
 	spin_lock_irqsave(&r->lock, flags);
 	for (i = 0; i < r->poolinfo->poolwords; i += 16)
 		sha_transform(hash.w, (__u8 *)(r->pool + i), workspace);
-- 
1.7.5.4

