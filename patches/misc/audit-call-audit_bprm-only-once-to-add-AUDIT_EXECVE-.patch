From d1b4ec481ca67789265fc833ba978dad5fd64590 Mon Sep 17 00:00:00 2001
From: Alexandru Moise <alexandru.moise@windriver.com>
Date: Tue, 20 Dec 2016 14:59:58 +0200
Subject: [PATCH 4/5] audit: call audit_bprm() only once to add AUDIT_EXECVE
 information

commit 9410d228a4cf434305306746bb799fb7acdd8648 upstream

Move the audit_bprm() call from search_binary_handler() to
exec_binprm().  This allows us to get rid of the mm member of
struct audit_aux_data_execve since bprm->mm will equal current->mm.

This also mitigates the issue that ->argc could be modified by the
load_binary() call in search_binary_handler().

audit_bprm() was being called to add an AUDIT_EXECVE record to the audit
context every time search_binary_handler() was recursively called.  Only
one reference is necessary.

Reported-by: Oleg Nesterov <onestero@redhat.com>
Cc: Eric Paris <eparis@redhat.com>
Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
Signed-off-by: Eric Paris <eparis@redhat.com>
[am: adapted the patch to solve context issues]
Signed-off-by: Alexandru Moise <alexandru.moise@windriver.com>
---
 fs/exec.c             |    5 +----
 include/linux/audit.h |    5 ++---
 kernel/auditsc.c      |    5 -----
 3 files changed, 3 insertions(+), 12 deletions(-)

diff --git a/fs/exec.c b/fs/exec.c
index a5cc769..645734f 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1416,10 +1416,6 @@ int search_binary_handler(struct linux_binprm *bprm,struct pt_regs *regs)
 	if (retval)
 		return retval;
 
-	retval = audit_bprm(bprm);
-	if (retval)
-		return retval;
-
 	/* Need to fetch pid before load_binary changes it */
 	old_pid = current->pid;
 	rcu_read_lock();
@@ -1441,6 +1437,7 @@ int search_binary_handler(struct linux_binprm *bprm,struct pt_regs *regs)
 			bprm->recursion_depth = depth;
 			if (retval >= 0) {
 				if (depth == 0) {
+					audit_bprm(bprm);
 					trace_sched_process_exec(current, old_pid, bprm);
 					ptrace_event(PTRACE_EVENT_EXEC, old_vpid);
 				}
diff --git a/include/linux/audit.h b/include/linux/audit.h
index 42fd474..8cfdd88 100644
--- a/include/linux/audit.h
+++ b/include/linux/audit.h
@@ -559,11 +559,10 @@ static inline void audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid
 	if (unlikely(!audit_dummy_context()))
 		__audit_ipc_set_perm(qbytes, uid, gid, mode);
 }
-static inline int audit_bprm(struct linux_binprm *bprm)
+static inline void audit_bprm(struct linux_binprm *bprm)
 {
 	if (unlikely(!audit_dummy_context()))
 		__audit_bprm(bprm);
-	return 0;
 }
 static inline void audit_socketcall(int nargs, unsigned long *args)
 {
@@ -641,7 +640,7 @@ extern int audit_signals;
 #define audit_log_task_context(b) do { ; } while (0)
 #define audit_ipc_obj(i) ((void)0)
 #define audit_ipc_set_perm(q,u,g,m) ((void)0)
-#define audit_bprm(p) ({ 0; })
+#define audit_bprm(p) ((void)0)
 #define audit_socketcall(n,a) ((void)0)
 #define audit_fd_pair(n,a) ((void)0)
 #define audit_sockaddr(len, addr) ({ 0; })
diff --git a/kernel/auditsc.c b/kernel/auditsc.c
index 6e690c6..0e70825 100644
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@ -257,7 +257,6 @@ struct audit_context {
 		} mmap;
 		struct {
 			int                     argc;
-			struct mm_struct        *mm;
 		} execve;
 	};
 	int fds[2];
@@ -1367,9 +1366,6 @@ static void audit_log_execve_info(struct audit_context *context,
 	const char __user *p;
 	char *buf;
 
-	if (context->execve.mm != current->mm)
-		return; /* execve failed, no additional info */
-
 	p = (const char __user *)current->mm->arg_start;
 
 	audit_log_format(*ab, "argc=%d", context->execve.argc);
@@ -2454,7 +2450,6 @@ void __audit_bprm(struct linux_binprm *bprm)
 
 	context->type = AUDIT_EXECVE;
 	context->execve.argc = bprm->argc;
-	context->execve.mm = bprm->mm;
 }
 
 
-- 
1.7.5.4

