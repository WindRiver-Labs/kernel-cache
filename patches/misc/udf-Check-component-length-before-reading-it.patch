From 73a363da449a2520a5c2206ae8f2b0935134442c Mon Sep 17 00:00:00 2001
From: Li Zhou <li.zhou@windriver.com>
Date: Thu, 24 Sep 2015 15:24:32 +0800
Subject: [PATCH] udf: Check component length before reading it

commit e237ec37ec154564f8690c5bd1795339955eeef9 upstream

Check that length specified in a component of a symlink fits in the
input buffer we are reading. Also properly ignore component length for
component types that do not use it. Otherwise we read memory after end
of buffer for corrupted udf image.

Reported-by: Carl Henrik Lunde <chlunde@ping.uio.no>
CC: stable@vger.kernel.org
Signed-off-by: Jan Kara <jack@suse.cz>
[lz: adapted the patch to solve context issues - CVE-2014-9730
Because this patch contains changing function udf_pc_to_char to return
int, have to pull the related part from another upstream commit:
0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14]
Signed-off-by: Li Zhou <li.zhou@windriver.com>
---
 fs/udf/symlink.c |   17 +++++++++++++----
 1 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/fs/udf/symlink.c b/fs/udf/symlink.c
index d89f324..c0a8c06 100644
--- a/fs/udf/symlink.c
+++ b/fs/udf/symlink.c
@@ -30,7 +30,7 @@
 #include <linux/buffer_head.h>
 #include "udf_i.h"
 
-static void udf_pc_to_char(struct super_block *sb, unsigned char *from,
+static int udf_pc_to_char(struct super_block *sb, unsigned char *from,
 			   int fromlen, unsigned char *to)
 {
 	struct pathComponent *pc;
@@ -39,14 +39,17 @@ static void udf_pc_to_char(struct super_block *sb, unsigned char *from,
 
 	while (elen < fromlen) {
 		pc = (struct pathComponent *)(from + elen);
+		elen += sizeof(struct pathComponent);
 		switch (pc->componentType) {
 		case 1:
 			/*
 			 * Symlink points to some place which should be agreed
  			 * upon between originator and receiver of the media. Ignore.
 			 */
-			if (pc->lengthComponentIdent > 0)
+			if (pc->lengthComponentIdent > 0) {
+				elen += pc->lengthComponentIdent;
 				break;
+			}
 			/* Fall through */
 		case 2:
 			p = to;
@@ -62,17 +65,21 @@ static void udf_pc_to_char(struct super_block *sb, unsigned char *from,
 			/* that would be . - just ignore */
 			break;
 		case 5:
+			elen += pc->lengthComponentIdent;
+			if (elen > fromlen)
+				return -EIO;
 			p += udf_get_filename(sb, pc->componentIdent, p,
 					      pc->lengthComponentIdent);
 			*p++ = '/';
 			break;
 		}
-		elen += sizeof(struct pathComponent) + pc->lengthComponentIdent;
 	}
 	if (p > to + 1)
 		p[-1] = '\0';
 	else
 		p[0] = '\0';
+
+	return 0;
 }
 
 static int udf_symlink_filler(struct file *file, struct page *page)
@@ -108,8 +115,10 @@ static int udf_symlink_filler(struct file *file, struct page *page)
 		symlink = bh->b_data;
 	}
 
-	udf_pc_to_char(inode->i_sb, symlink, inode->i_size, p);
+	err = udf_pc_to_char(inode->i_sb, symlink, inode->i_size, p);
 	brelse(bh);
+	if (err)
+		goto out_unlock_inode;
 
 	up_read(&iinfo->i_data_sem);
 	SetPageUptodate(page);
-- 
1.7.5.4

