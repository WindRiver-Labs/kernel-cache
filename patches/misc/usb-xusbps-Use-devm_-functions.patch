From d0b84babdd4eef52e3fb2dddb4308dd53e7f9e60 Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaiah.choudary.kalluri@xilinx.com>
Date: Tue, 24 Sep 2013 14:16:11 +0530
Subject: [PATCH 567/628] usb: xusbps: Use devm_ functions

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 71e9a4867fcb67359ef3e59311e6a3a0b443ae0c

Simplified the probe and release functions using devm_ functions

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_usbps_udc.c |    9 ++----
 drivers/usb/host/ehci-xilinx-usbps.c  |    5 +---
 drivers/usb/host/xusbps-dr-of.c       |   46 +++++++-------------------------
 drivers/usb/phy/phy-zynq-usb.c        |   22 +++++----------
 4 files changed, 21 insertions(+), 61 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index 9ef1cd1..bf27621 100644
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -420,7 +420,6 @@ static void xusbps_udc_clk_release(struct platform_device *pdev)
 	struct xusbps_usb2_platform_data *pdata = pdev->dev.platform_data;
 
 	clk_disable_unprepare(pdata->clk);
-	clk_put(pdata->clk);
 }
 
 
@@ -2811,8 +2810,8 @@ static int xusbps_udc_probe(struct platform_device *pdev)
 		goto err_iounmap;
 	}
 
-	ret = request_irq(udc_controller->irq, xusbps_udc_irq, IRQF_SHARED,
-			driver_name, udc_controller);
+	ret = devm_request_irq(&pdev->dev, udc_controller->irq, xusbps_udc_irq,
+				IRQF_SHARED, driver_name, udc_controller);
 	if (ret != 0) {
 		dev_err(&pdev->dev, "cannot request irq %d err %d\n",
 				udc_controller->irq, ret);
@@ -2823,7 +2822,7 @@ static int xusbps_udc_probe(struct platform_device *pdev)
 	if (struct_udc_setup(udc_controller, pdev)) {
 		dev_err(&pdev->dev, "Can't initialize udc data structure\n");
 		ret = -ENOMEM;
-		goto err_free_irq;
+		goto err_iounmap;
 	}
 
 	/* initialize usb hw reg except for regs for EP,
@@ -2896,8 +2895,6 @@ err_del_udc:
 	dma_pool_destroy(udc_controller->td_pool);
 err_unregister:
 	device_unregister(&udc_controller->gadget.dev);
-err_free_irq:
-	free_irq(udc_controller->irq, udc_controller);
 err_iounmap:
 	xusbps_udc_clk_release(pdev);
 err_kfree:
diff --git a/drivers/usb/host/ehci-xilinx-usbps.c b/drivers/usb/host/ehci-xilinx-usbps.c
index 40398dc..571c88e 100644
--- a/drivers/usb/host/ehci-xilinx-usbps.c
+++ b/drivers/usb/host/ehci-xilinx-usbps.c
@@ -171,7 +171,7 @@ static int usb_hcd_xusbps_probe(const struct hc_driver *driver,
 	retval = clk_prepare_enable(pdata->clk);
 	if (retval) {
 		dev_err(&pdev->dev, "Unable to enable APER clock.\n");
-		goto err_out_clk_put;
+		goto err2;
 	}
 
 	pdata->clk_rate_change_nb.notifier_call = xusbps_ehci_clk_notifier_cb;
@@ -228,8 +228,6 @@ static int usb_hcd_xusbps_probe(const struct hc_driver *driver,
 err_out_clk_unreg_notif:
 	clk_notifier_unregister(pdata->clk, &pdata->clk_rate_change_nb);
 	clk_disable_unprepare(pdata->clk);
-err_out_clk_put:
-	clk_put(pdata->clk);
 err2:
 	usb_put_hcd(hcd);
 err1:
@@ -267,7 +265,6 @@ static void usb_hcd_xusbps_remove(struct usb_hcd *hcd,
 	usb_put_hcd(hcd);
 	clk_notifier_unregister(pdata->clk, &pdata->clk_rate_change_nb);
 	clk_disable_unprepare(pdata->clk);
-	clk_put(pdata->clk);
 }
 
 static void ehci_xusbps_setup_phy(struct ehci_hcd *ehci,
diff --git a/drivers/usb/host/xusbps-dr-of.c b/drivers/usb/host/xusbps-dr-of.c
index ff08696..eba7d96 100644
--- a/drivers/usb/host/xusbps-dr-of.c
+++ b/drivers/usb/host/xusbps-dr-of.c
@@ -161,31 +161,18 @@ static int xusbps_dr_of_probe(struct platform_device *ofdev)
 	memset(pdata, 0, sizeof(data));
 
 	res = platform_get_resource(ofdev, IORESOURCE_IRQ, 0);
-	if (!res) {
+	if (IS_ERR(res)) {
 		dev_err(&ofdev->dev,
 			"IRQ not found\n");
-		return -ENODEV;
+		return PTR_ERR(res);
 	}
 	pdata->irq = res->start;
 
 	res = platform_get_resource(ofdev, IORESOURCE_MEM, 0);
-	if (!res) {
-		dev_err(&ofdev->dev,
-			"Register base not found");
-		return -ENODEV;
-	}
-
-	if (!request_mem_region(res->start, res->end - res->start + 1,
-						ofdev->name)) {
-		dev_err(&ofdev->dev, "Controller already in use\n");
-		return -EBUSY;
-	}
-
-	pdata->regs = ioremap(res->start, res->end - res->start + 1);
-	if (!pdata->regs) {
+	pdata->regs = devm_ioremap_resource(&ofdev->dev, res);
+	if (IS_ERR(pdata->regs)) {
 		dev_err(&ofdev->dev, "unable to iomap registers\n");
-		release_mem_region(res->start, resource_size(res));
-		return -EFAULT;
+		return PTR_ERR(pdata->regs);
 	}
 
 	dev_data = get_dr_mode_data(np);
@@ -194,24 +181,21 @@ static int xusbps_dr_of_probe(struct platform_device *ofdev)
 	prop = of_get_property(np, "phy_type", NULL);
 	pdata->phy_mode = determine_usb_phy(prop);
 
-	hdata = kmalloc(sizeof(*hdata), GFP_KERNEL);
-	if (!hdata) {
-		dev_err(&ofdev->dev, "cannot allocate memory\n");
+	hdata = devm_kzalloc(&ofdev->dev, sizeof(*hdata), GFP_KERNEL);
+	if (!hdata)
 		return -ENOMEM;
-	}
 	platform_set_drvdata(ofdev, hdata);
 
-	hdata->clk = clk_get(&ofdev->dev, NULL);
+	hdata->clk = devm_clk_get(&ofdev->dev, NULL);
 	if (IS_ERR(hdata->clk)) {
 		dev_err(&ofdev->dev, "input clock not found.\n");
-		ret = PTR_ERR(hdata->clk);
-		goto err_free;
+		return PTR_ERR(hdata->clk);
 	}
 
 	ret = clk_prepare_enable(hdata->clk);
 	if (ret) {
 		dev_err(&ofdev->dev, "Unable to enable APER clock.\n");
-		goto err_out_clk_put;
+		return ret;
 	}
 
 	pdata->clk = hdata->clk;
@@ -253,10 +237,6 @@ static int xusbps_dr_of_probe(struct platform_device *ofdev)
 
 err_out_clk_disable:
 	clk_disable_unprepare(hdata->clk);
-err_out_clk_put:
-	clk_put(hdata->clk);
-err_free:
-	kfree(hdata);
 
 	return ret;
 }
@@ -269,16 +249,10 @@ static int __unregister_subdev(struct device *dev, void *d)
 
 static int xusbps_dr_of_remove(struct platform_device *ofdev)
 {
-	struct resource *res;
 	struct xusbps_host_data *hdata = platform_get_drvdata(ofdev);
 
-	res = platform_get_resource(ofdev, IORESOURCE_MEM, 0);
-	release_mem_region(res->start, resource_size(res));
-
 	device_for_each_child(&ofdev->dev, NULL, __unregister_subdev);
 	clk_disable_unprepare(hdata->clk);
-	clk_put(hdata->clk);
-	kfree(hdata);
 	return 0;
 }
 
diff --git a/drivers/usb/phy/phy-zynq-usb.c b/drivers/usb/phy/phy-zynq-usb.c
index 24812d5..8b2514f 100644
--- a/drivers/usb/phy/phy-zynq-usb.c
+++ b/drivers/usb/phy/phy-zynq-usb.c
@@ -1937,17 +1937,12 @@ static int xusbps_otg_remove(struct platform_device *pdev)
 	/* disable OTGSC interrupt as OTGSC doesn't change in reset */
 	writel(0, xotg->base + CI_OTGSC);
 
-	if (xotg->irq)
-		free_irq(xotg->irq, xotg);
-
 	usb_remove_phy(&xotg->otg);
 	sysfs_remove_group(&pdev->dev.kobj, &debug_dev_attr_group);
 	device_remove_file(&pdev->dev, &dev_attr_hsm);
 	device_remove_file(&pdev->dev, &dev_attr_registers);
 	clk_notifier_unregister(xotg->clk, &xotg->clk_rate_change_nb);
 	clk_disable_unprepare(xotg->clk);
-	clk_put(xotg->clk);
-	kfree(xotg);
 
 	return 0;
 }
@@ -1966,7 +1961,7 @@ static int xusbps_otg_probe(struct platform_device *pdev)
 
 	dev_dbg(&pdev->dev, "\notg controller is detected.\n");
 
-	xotg = kzalloc(sizeof *xotg, GFP_KERNEL);
+	xotg = devm_kzalloc(&pdev->dev, sizeof *xotg, GFP_KERNEL);
 	if (xotg == NULL)
 		return -ENOMEM;
 
@@ -1975,11 +1970,9 @@ static int xusbps_otg_probe(struct platform_device *pdev)
 	/* Setup ulpi phy for OTG */
 	xotg->ulpi = pdata->ulpi;
 
-	xotg->otg.otg = kzalloc(sizeof(struct usb_otg), GFP_KERNEL);
-	if (!xotg->otg.otg) {
-		kfree(xotg);
+	xotg->otg.otg = devm_kzalloc(sizeof(struct usb_otg), GFP_KERNEL);
+	if (!xotg->otg.otg)
 		return -ENOMEM;
-	}
 
 	xotg->base = pdata->regs;
 	xotg->irq = pdata->irq;
@@ -2000,7 +1993,7 @@ static int xusbps_otg_probe(struct platform_device *pdev)
 	retval = clk_prepare_enable(xotg->clk);
 	if (retval) {
 		dev_err(&pdev->dev, "Unable to enable APER clock.\n");
-		goto err_out_clk_put;
+		goto err;
 	}
 
 	xotg->clk_rate_change_nb.notifier_call = xusbps_otg_clk_notifier_cb;
@@ -2045,8 +2038,9 @@ static int xusbps_otg_probe(struct platform_device *pdev)
 	usb_register_notify((struct notifier_block *)
 					&xotg->xotg_notifier.notifier_call);
 
-	if (request_irq(xotg->irq, otg_irq, IRQF_SHARED,
-				driver_name, xotg) != 0) {
+	retval = devm_request_irq(&pdev->dev, xotg->irq, otg_irq, IRQF_SHARED,
+				driver_name, xotg);
+	if (retval) {
 		dev_dbg(xotg->dev, "request interrupt %d failed\n", xotg->irq);
 		retval = -EBUSY;
 		goto err_out_clk_disable;
@@ -2085,8 +2079,6 @@ static int xusbps_otg_probe(struct platform_device *pdev)
 err_out_clk_disable:
 	clk_notifier_unregister(xotg->clk, &xotg->clk_rate_change_nb);
 	clk_disable_unprepare(xotg->clk);
-err_out_clk_put:
-	clk_put(xotg->clk);
 err:
 	xusbps_otg_remove(pdev);
 
-- 
1.7.5.4

