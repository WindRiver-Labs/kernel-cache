From b95a542c81a7a95f438027cdb70d78567a33d38e Mon Sep 17 00:00:00 2001
From: Phillip Lougher <phillip@squashfs.org.uk>
Date: Wed, 13 Nov 2013 02:56:26 +0000
Subject: [PATCH] Squashfs: Refactor decompressor interface and code

commit 9508c6b90b3f57ecea4e7a896cf8325400fc0c6e upstream

The decompressor interface and code was written from
the point of view of single-threaded operation.  In doing
so it mixed a lot of single-threaded implementation specific
aspects into the decompressor code and elsewhere which makes it
difficult to seamlessly support multiple different decompressor
implementations.

This patch does the following:

1.  It removes compressor_options parsing from the decompressor
    init() function.  This allows the decompressor init() function
    to be dynamically called to instantiate multiple decompressors,
    without the compressor options needing to be read and parsed each
    time.

2.  It moves threading and all sleeping operations out of the
    decompressors.  In doing so, it makes the decompressors
    non-blocking wrappers which only deal with interfacing with
    the decompressor implementation.

3. It splits decompressor.[ch] into decompressor generic functions
   in decompressor.[ch], and moves the single threaded
   decompressor implementation into decompressor_single.c.

The result of this patch is Squashfs should now be able to
support multiple decompressors by adding new decompressor_xxx.c
files with specialised implementations of the functions in
decompressor_single.c

Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
Reviewed-by: Minchan Kim <minchan@kernel.org>
[
The patch fixes the following dead lock which is hard to reproduce,
it was obsered on the preempt_rt kernel with high system load.

squashfs_cache_get
	spin_lock(&cache->lock);
	while (1)
		if (n == cache->entries)
			entry->pending = 1;
			spin_unlock(&cache->lock);	P1
			squashfs_read_data()
			spin_lock(&cache->lock);	P2
			entry->pending = 0;
		if (entry->pending)
			spin_unlock(&cache->lock);
			wait_event(entry->wait_queue, !entry->pending);	P3

There is a race window between P1 and P2 in the above code snippet, a page
fault handler preemptes the squashfs_cache_get in this dead lock scenario and
has got the cache->lock successfully between P1 and P2, and then blocks on
entry->wait_queue at P3, because of the preemption the current I/O initiated
by the squashfs_read_data() could not complete anymore and the page fault
handler blocks forever on the queue since nobody wakes it up.

Backtrace when the dead lock occurs:

INFO: task sh:22005 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sh              D 00000080c893fba8     0 22005  21975 0x00000000
Call Trace:
[c0000002f973ae30] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f973aec0] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f973afb0] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f973b030] [c0000000009ddc60] .io_schedule+0x70/0xb0
[c0000002f973b0b0] [c0000000002003d8] .sleep_on_buffer+0x18/0x30
[c0000002f973b120] [c0000000009dc5b4] .__wait_on_bit+0xf4/0x170
[c0000002f973b1c0] [c0000000009dc6bc] .out_of_line_wait_on_bit+0x8c/0xb0
[c0000002f973b290] [c000000000200630] .__wait_on_buffer+0x40/0x60
[c0000002f973b310] [c0000000002fd9c0] .zlib_uncompress+0x1c0/0x340
[c0000002f973b400] [c0000000002f8fe4] .squashfs_read_data+0x284/0x630
[c0000002f973b4f0] [c0000000002f954c] .squashfs_cache_get+0x1bc/0x4b0
[c0000002f973b5d0] [c0000000002fad38] .squashfs_readpage+0xc8/0x950
[c0000002f973b710] [c00000000015e670] .__do_page_cache_readahead+0x330/0x350
[c0000002f973b830] [c00000000015eae4] .ondemand_readahead+0x194/0x320
[c0000002f973b8e0] [c0000000001512f8] .generic_file_aio_read+0x578/0x790
[c0000002f973ba20] [c0000000001bdd6c] .do_sync_read+0x9c/0x110
[c0000002f973bb70] [c0000000001be6d8] .vfs_read+0xc8/0x1e0
[c0000002f973bc00] [c0000000001c707c] .kernel_read+0x5c/0x90
[c0000002f973bcb0] [c0000000001c9470] .do_execve_common.isra.21+0x4f0/0x660
[c0000002f973bd90] [c0000000001c9a48] .SyS_execve+0x58/0x90
[c0000002f973be30] [c000000000000624] syscall_exit+0x0/0x8c
INFO: task sh:22006 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sh              D 00000080c893fba8     0 22006  21975 0x00000000
Call Trace:
[c0000002f30aaed0] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f30aaf60] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f30ab050] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f30ab0d0] [c0000000009def08] .__rt_mutex_slowlock+0xa8/0x17c
[c0000002f30ab180] [c0000000009df41c] .rt_mutex_slowlock+0xcc/0x2c0
[c0000002f30ab290] [c0000000009dfc10] ._mutex_lock+0x20/0x40
[c0000002f30ab310] [c0000000002fd890] .zlib_uncompress+0x90/0x340
[c0000002f30ab400] [c0000000002f8fe4] .squashfs_read_data+0x284/0x630
[c0000002f30ab4f0] [c0000000002f954c] .squashfs_cache_get+0x1bc/0x4b0
[c0000002f30ab5d0] [c0000000002fb45c] .squashfs_readpage+0x7ec/0x950
[c0000002f30ab710] [c00000000015e670] .__do_page_cache_readahead+0x330/0x350
[c0000002f30ab830] [c00000000015eae4] .ondemand_readahead+0x194/0x320
[c0000002f30ab8e0] [c0000000001512f8] .generic_file_aio_read+0x578/0x790
[c0000002f30aba20] [c0000000001bdd6c] .do_sync_read+0x9c/0x110
[c0000002f30abb70] [c0000000001be6d8] .vfs_read+0xc8/0x1e0
[c0000002f30abc00] [c0000000001c707c] .kernel_read+0x5c/0x90
[c0000002f30abcb0] [c0000000001c9470] .do_execve_common.isra.21+0x4f0/0x660
[c0000002f30abd90] [c0000000001c9a48] .SyS_execve+0x58/0x90
[c0000002f30abe30] [c000000000000624] syscall_exit+0x0/0x8c
INFO: task sh:22007 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sh              D 00000080c893fba8     0 22007  21975 0x00000000
Call Trace:
[c0000002f52832f0] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f5283380] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f5283470] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f52834f0] [c0000000002f9794] .squashfs_cache_get+0x404/0x4b0
[c0000002f52835d0] [c0000000002fb45c] .squashfs_readpage+0x7ec/0x950
[c0000002f5283710] [c00000000015e670] .__do_page_cache_readahead+0x330/0x350
[c0000002f5283830] [c00000000015eae4] .ondemand_readahead+0x194/0x320
[c0000002f52838e0] [c0000000001512f8] .generic_file_aio_read+0x578/0x790
[c0000002f5283a20] [c0000000001bdd6c] .do_sync_read+0x9c/0x110
[c0000002f5283b70] [c0000000001be6d8] .vfs_read+0xc8/0x1e0
[c0000002f5283c00] [c0000000001c707c] .kernel_read+0x5c/0x90
[c0000002f5283cb0] [c0000000001c9470] .do_execve_common.isra.21+0x4f0/0x660
[c0000002f5283d90] [c0000000001c9a48] .SyS_execve+0x58/0x90
[c0000002f5283e30] [c000000000000624] syscall_exit+0x0/0x8c
INFO: task sh:22013 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sh              D 00000080c893fba8     0 22013  21426 0x00000000
Call Trace:
[c0000002f93aeed0] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f93aef60] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f93af050] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f93af0d0] [c0000000009def08] .__rt_mutex_slowlock+0xa8/0x17c
[c0000002f93af180] [c0000000009df41c] .rt_mutex_slowlock+0xcc/0x2c0
[c0000002f93af290] [c0000000009dfc10] ._mutex_lock+0x20/0x40
[c0000002f93af310] [c0000000002fd890] .zlib_uncompress+0x90/0x340
[c0000002f93af400] [c0000000002f8fe4] .squashfs_read_data+0x284/0x630
[c0000002f93af4f0] [c0000000002f954c] .squashfs_cache_get+0x1bc/0x4b0
[c0000002f93af5d0] [c0000000002fad38] .squashfs_readpage+0xc8/0x950
[c0000002f93af710] [c00000000015e670] .__do_page_cache_readahead+0x330/0x350
[c0000002f93af830] [c00000000015eae4] .ondemand_readahead+0x194/0x320
[c0000002f93af8e0] [c0000000001512f8] .generic_file_aio_read+0x578/0x790
[c0000002f93afa20] [c0000000001bdd6c] .do_sync_read+0x9c/0x110
[c0000002f93afb70] [c0000000001be6d8] .vfs_read+0xc8/0x1e0
[c0000002f93afc00] [c0000000001c707c] .kernel_read+0x5c/0x90
[c0000002f93afcb0] [c0000000001c9470] .do_execve_common.isra.21+0x4f0/0x660
[c0000002f93afd90] [c0000000001c9a48] .SyS_execve+0x58/0x90
[c0000002f93afe30] [c000000000000624] syscall_exit+0x0/0x8c
INFO: task sh:22016 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sh              D 00000080c8825384     0 22016  22014 0x00000000
Call Trace:
[c0000002f37f7420] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f37f74b0] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f37f75a0] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f37f7620] [c0000000002f9794] .squashfs_cache_get+0x404/0x4b0
[c0000002f37f7700] [c0000000002fb45c] .squashfs_readpage+0x7ec/0x950
[c0000002f37f7840] [c00000000015e670] .__do_page_cache_readahead+0x330/0x350
[c0000002f37f7960] [c00000000015f0b4] .ra_submit+0x44/0x60
[c0000002f37f79f0] [c0000000001521a8] .filemap_fault+0x3c8/0x4c0
[c0000002f37f7ad0] [c00000000017d464] .__do_fault+0xc4/0x6f0
[c0000002f37f7bd0] [c00000000018028c] .handle_pte_fault+0xcc/0xa10
[c0000002f37f7cc0] [c000000000183684] .handle_mm_fault+0x174/0x2d0
[c0000002f37f7d70] [c00000000002d2a8] .do_page_fault+0x468/0x6b0
[c0000002f37f7e30] [c00000000001e3d8] storage_fault_common+0x20/0x44
INFO: task sh:22017 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sh              D 00000080c8825384     0 22017  22015 0x00000000
Call Trace:
[c0000002f375f420] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f375f4b0] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f375f5a0] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f375f620] [c0000000002f9794] .squashfs_cache_get+0x404/0x4b0
[c0000002f375f700] [c0000000002fb45c] .squashfs_readpage+0x7ec/0x950
[c0000002f375f840] [c00000000015e670] .__do_page_cache_readahead+0x330/0x350
[c0000002f375f960] [c00000000015f0b4] .ra_submit+0x44/0x60
[c0000002f375f9f0] [c0000000001521a8] .filemap_fault+0x3c8/0x4c0
[c0000002f375fad0] [c00000000017d464] .__do_fault+0xc4/0x6f0
[c0000002f375fbd0] [c00000000018028c] .handle_pte_fault+0xcc/0xa10
[c0000002f375fcc0] [c000000000183684] .handle_mm_fault+0x174/0x2d0
[c0000002f375fd70] [c00000000002d2a8] .do_page_fault+0x468/0x6b0
[c0000002f375fe30] [c00000000001e3d8] storage_fault_common+0x20/0x44
INFO: task sleep:22018 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sleep           D 00000080c8840168     0 22018   1517 0x00000000
Call Trace:
[c0000002f5d73000] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f5d73090] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f5d73180] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f5d73200] [c0000000009def08] .__rt_mutex_slowlock+0xa8/0x17c
[c0000002f5d732b0] [c0000000009df41c] .rt_mutex_slowlock+0xcc/0x2c0
[c0000002f5d733c0] [c0000000009dfc10] ._mutex_lock+0x20/0x40
[c0000002f5d73440] [c0000000002fd890] .zlib_uncompress+0x90/0x340
[c0000002f5d73530] [c0000000002f8fe4] .squashfs_read_data+0x284/0x630
[c0000002f5d73620] [c0000000002f954c] .squashfs_cache_get+0x1bc/0x4b0
[c0000002f5d73700] [c0000000002fad38] .squashfs_readpage+0xc8/0x950
[c0000002f5d73840] [c00000000015e670] .__do_page_cache_readahead+0x330/0x350
[c0000002f5d73960] [c00000000015f0b4] .ra_submit+0x44/0x60
[c0000002f5d739f0] [c0000000001521a8] .filemap_fault+0x3c8/0x4c0
[c0000002f5d73ad0] [c00000000017d464] .__do_fault+0xc4/0x6f0
[c0000002f5d73bd0] [c00000000018028c] .handle_pte_fault+0xcc/0xa10
[c0000002f5d73cc0] [c000000000183684] .handle_mm_fault+0x174/0x2d0
[c0000002f5d73d70] [c00000000002d2a8] .do_page_fault+0x468/0x6b0
[c0000002f5d73e30] [c00000000001e3d8] storage_fault_common+0x20/0x44
INFO: task sh:22019 blocked for more than 120 seconds.
"echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
sh              D 00000080c8825384     0 22019   1525 0x00000000
Call Trace:
[c0000002f958b250] [0000000000000011] 0x11 (unreliable)
[c0000002f958b420] [c000000000009d2c] .__switch_to+0xfc/0x1c0
[c0000002f958b4b0] [c0000000009dd7d4] .__schedule+0x354/0x6a0
[c0000002f958b5a0] [c0000000009ddb64] .schedule+0x44/0xd0
[c0000002f958b620] [c0000000002f9794] .squashfs_cache_get+0x404/0x4b0
[c0000002f958b700] [c0000000002fb45c] .squashfs_readpage+0x7ec/0x950
---
 fs/squashfs/Makefile              |    2 +-
 fs/squashfs/block.c               |    8 +++-
 fs/squashfs/decompressor.c        |   47 +++++++++++++------
 fs/squashfs/decompressor.h        |   21 +++------
 fs/squashfs/decompressor_single.c |   86 +++++++++++++++++++++++++++++++++++
 fs/squashfs/lzo_wrapper.c         |   24 ++--------
 fs/squashfs/squashfs.h            |    9 +++-
 fs/squashfs/squashfs_fs_sb.h      |    3 +-
 fs/squashfs/super.c               |   10 ++--
 fs/squashfs/xz_wrapper.c          |   89 ++++++++++++++++++++----------------
 fs/squashfs/zlib_wrapper.c        |   50 ++++++--------------
 11 files changed, 216 insertions(+), 133 deletions(-)
 create mode 100644 fs/squashfs/decompressor_single.c

diff --git a/fs/squashfs/Makefile b/fs/squashfs/Makefile
index 110b047..c223c84 100644
--- a/fs/squashfs/Makefile
+++ b/fs/squashfs/Makefile
@@ -4,7 +4,7 @@
 
 obj-$(CONFIG_SQUASHFS) += squashfs.o
 squashfs-y += block.o cache.o dir.o export.o file.o fragment.o id.o inode.o
-squashfs-y += namei.o super.o symlink.o decompressor.o
+squashfs-y += namei.o super.o symlink.o decompressor.o decompressor_single.o
 squashfs-$(CONFIG_SQUASHFS_XATTR) += xattr.o xattr_id.o
 squashfs-$(CONFIG_SQUASHFS_LZO) += lzo_wrapper.o
 squashfs-$(CONFIG_SQUASHFS_XZ) += xz_wrapper.o
diff --git a/fs/squashfs/block.c b/fs/squashfs/block.c
index fb50652..05946a0 100644
--- a/fs/squashfs/block.c
+++ b/fs/squashfs/block.c
@@ -93,7 +93,7 @@ int squashfs_read_data(struct super_block *sb, void **buffer, u64 index,
 	struct buffer_head **bh;
 	int offset = index & ((1 << msblk->devblksize_log2) - 1);
 	u64 cur_index = index >> msblk->devblksize_log2;
-	int bytes, compressed, b = 0, k = 0, page = 0, avail;
+	int bytes, compressed, b = 0, k = 0, page = 0, avail, i;
 
 	bh = kcalloc(((srclength + msblk->devblksize - 1)
 		>> msblk->devblksize_log2) + 1, sizeof(*bh), GFP_KERNEL);
@@ -158,6 +158,12 @@ int squashfs_read_data(struct super_block *sb, void **buffer, u64 index,
 		ll_rw_block(READ, b - 1, bh + 1);
 	}
 
+	for (i = 0; i < b; i++) {
+		wait_on_buffer(bh[i]);
+		if (!buffer_uptodate(bh[i]))
+			goto block_release;
+	}
+
 	if (compressed) {
 		length = squashfs_decompress(msblk, buffer, bh, b, offset,
 			 length, srclength, pages);
diff --git a/fs/squashfs/decompressor.c b/fs/squashfs/decompressor.c
index 3f6271d..234291f 100644
--- a/fs/squashfs/decompressor.c
+++ b/fs/squashfs/decompressor.c
@@ -37,29 +37,29 @@
  */
 
 static const struct squashfs_decompressor squashfs_lzma_unsupported_comp_ops = {
-	NULL, NULL, NULL, LZMA_COMPRESSION, "lzma", 0
+	NULL, NULL, NULL, NULL, LZMA_COMPRESSION, "lzma", 0
 };
 
 #ifndef CONFIG_SQUASHFS_LZO
 static const struct squashfs_decompressor squashfs_lzo_comp_ops = {
-	NULL, NULL, NULL, LZO_COMPRESSION, "lzo", 0
+	NULL, NULL, NULL, NULL, LZO_COMPRESSION, "lzo", 0
 };
 #endif
 
 #ifndef CONFIG_SQUASHFS_XZ
 static const struct squashfs_decompressor squashfs_xz_comp_ops = {
-	NULL, NULL, NULL, XZ_COMPRESSION, "xz", 0
+	NULL, NULL, NULL, NULL, XZ_COMPRESSION, "xz", 0
 };
 #endif
 
 #ifndef CONFIG_SQUASHFS_ZLIB
 static const struct squashfs_decompressor squashfs_zlib_comp_ops = {
-	NULL, NULL, NULL, ZLIB_COMPRESSION, "zlib", 0
+	NULL, NULL, NULL, NULL, ZLIB_COMPRESSION, "zlib", 0
 };
 #endif
 
 static const struct squashfs_decompressor squashfs_unknown_comp_ops = {
-	NULL, NULL, NULL, 0, "unknown", 0
+	NULL, NULL, NULL, NULL, 0, "unknown", 0
 };
 
 static const struct squashfs_decompressor *decompressor[] = {
@@ -83,10 +83,10 @@ const struct squashfs_decompressor *squashfs_lookup_decompressor(int id)
 }
 
 
-void *squashfs_decompressor_init(struct super_block *sb, unsigned short flags)
+static void *get_comp_opts(struct super_block *sb, unsigned short flags)
 {
 	struct squashfs_sb_info *msblk = sb->s_fs_info;
-	void *strm, *buffer = NULL;
+	void *buffer = NULL, *comp_opts;
 	int length = 0;
 
 	/*
@@ -94,23 +94,40 @@ void *squashfs_decompressor_init(struct super_block *sb, unsigned short flags)
 	 */
 	if (SQUASHFS_COMP_OPTS(flags)) {
 		buffer = kmalloc(PAGE_CACHE_SIZE, GFP_KERNEL);
-		if (buffer == NULL)
-			return ERR_PTR(-ENOMEM);
+		if (buffer == NULL) {
+			comp_opts = ERR_PTR(-ENOMEM);
+			goto out;
+		}
 
 		length = squashfs_read_data(sb, &buffer,
 			sizeof(struct squashfs_super_block), 0, NULL,
-			PAGE_CACHE_SIZE, 1);
+				PAGE_CACHE_SIZE, 1);
 
 		if (length < 0) {
-			strm = ERR_PTR(length);
-			goto finished;
+			comp_opts = ERR_PTR(length);
+			goto out;
 		}
 	}
 
-	strm = msblk->decompressor->init(msblk, buffer, length);
+	comp_opts = squashfs_comp_opts(msblk, buffer, length);
 
-finished:
+out:
 	kfree(buffer);
+	return comp_opts;
+}
+
+
+void *squashfs_decompressor_setup(struct super_block *sb, unsigned short flags)
+{
+	struct squashfs_sb_info *msblk = sb->s_fs_info;
+	void *stream, *comp_opts = get_comp_opts(sb, flags);
+
+	if (IS_ERR(comp_opts))
+		return comp_opts;
+
+	stream = squashfs_decompressor_create(msblk, comp_opts);
+	if (IS_ERR(stream))
+		kfree(comp_opts);
 
-	return strm;
+	return stream;
 }
diff --git a/fs/squashfs/decompressor.h b/fs/squashfs/decompressor.h
index 330073e..6cdb20a 100644
--- a/fs/squashfs/decompressor.h
+++ b/fs/squashfs/decompressor.h
@@ -24,28 +24,21 @@
  */
 
 struct squashfs_decompressor {
-	void	*(*init)(struct squashfs_sb_info *, void *, int);
+	void	*(*init)(struct squashfs_sb_info *, void *);
+	void	*(*comp_opts)(struct squashfs_sb_info *, void *, int);
 	void	(*free)(void *);
-	int	(*decompress)(struct squashfs_sb_info *, void **,
+	int	(*decompress)(struct squashfs_sb_info *, void *, void **,
 		struct buffer_head **, int, int, int, int, int);
 	int	id;
 	char	*name;
 	int	supported;
 };
 
-static inline void squashfs_decompressor_free(struct squashfs_sb_info *msblk,
-	void *s)
+static inline void *squashfs_comp_opts(struct squashfs_sb_info *msblk,
+							void *buff, int length)
 {
-	if (msblk->decompressor)
-		msblk->decompressor->free(s);
-}
-
-static inline int squashfs_decompress(struct squashfs_sb_info *msblk,
-	void **buffer, struct buffer_head **bh, int b, int offset, int length,
-	int srclength, int pages)
-{
-	return msblk->decompressor->decompress(msblk, buffer, bh, b, offset,
-		length, srclength, pages);
+	return msblk->decompressor->comp_opts ?
+		msblk->decompressor->comp_opts(msblk, buff, length) : NULL;
 }
 
 #ifdef CONFIG_SQUASHFS_XZ
diff --git a/fs/squashfs/decompressor_single.c b/fs/squashfs/decompressor_single.c
new file mode 100644
index 0000000..f857cf6
--- /dev/null
+++ b/fs/squashfs/decompressor_single.c
@@ -0,0 +1,86 @@
+/*
+ * Copyright (c) 2013
+ * Phillip Lougher <phillip@squashfs.org.uk>
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2. See
+ * the COPYING file in the top-level directory.
+ */
+
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/buffer_head.h>
+
+#include "squashfs_fs.h"
+#include "squashfs_fs_sb.h"
+#include "decompressor.h"
+#include "squashfs.h"
+
+/*
+ * This file implements single-threaded decompression in the
+ * decompressor framework
+ */
+
+struct squashfs_stream {
+	void		*stream;
+	struct mutex	mutex;
+};
+
+void *squashfs_decompressor_create(struct squashfs_sb_info *msblk,
+						void *comp_opts)
+{
+	struct squashfs_stream *stream;
+	int err = -ENOMEM;
+
+	stream = kmalloc(sizeof(*stream), GFP_KERNEL);
+	if (stream == NULL)
+		goto out;
+
+	stream->stream = msblk->decompressor->init(msblk, comp_opts);
+	if (IS_ERR(stream->stream)) {
+		err = PTR_ERR(stream->stream);
+		goto out;
+	}
+
+	kfree(comp_opts);
+	mutex_init(&stream->mutex);
+	return stream;
+
+out:
+	kfree(stream);
+	return ERR_PTR(err);
+}
+
+void squashfs_decompressor_destroy(struct squashfs_sb_info *msblk)
+{
+	struct squashfs_stream *stream = msblk->stream;
+
+	if (stream) {
+		msblk->decompressor->free(stream->stream);
+		kfree(stream);
+	}
+}
+
+int squashfs_decompress(struct squashfs_sb_info *msblk,
+	void **buffer, struct buffer_head **bh, int b, int offset, int length,
+	int srclength, int pages)
+{
+	int res;
+	struct squashfs_stream *stream = msblk->stream;
+
+	mutex_lock(&stream->mutex);
+	res = msblk->decompressor->decompress(msblk, stream->stream, buffer,
+		bh, b, offset, length, srclength, pages);
+	mutex_unlock(&stream->mutex);
+
+	if (res < 0)
+		ERROR("%s decompression failed, data probably corrupt\n",
+			msblk->decompressor->name);
+
+	return res;
+}
+
+int squashfs_max_decompressors(void)
+{
+	return 1;
+}
diff --git a/fs/squashfs/lzo_wrapper.c b/fs/squashfs/lzo_wrapper.c
index 00f4dfc..75c3b57 100644
--- a/fs/squashfs/lzo_wrapper.c
+++ b/fs/squashfs/lzo_wrapper.c
@@ -37,7 +37,7 @@ struct squashfs_lzo {
 	void	*output;
 };
 
-static void *lzo_init(struct squashfs_sb_info *msblk, void *buff, int len)
+static void *lzo_init(struct squashfs_sb_info *msblk, void *buff)
 {
 	int block_size = max_t(int, msblk->block_size, SQUASHFS_METADATA_SIZE);
 
@@ -74,22 +74,16 @@ static void lzo_free(void *strm)
 }
 
 
-static int lzo_uncompress(struct squashfs_sb_info *msblk, void **buffer,
-	struct buffer_head **bh, int b, int offset, int length, int srclength,
-	int pages)
+static int lzo_uncompress(struct squashfs_sb_info *msblk, void *strm,
+	void **buffer, struct buffer_head **bh, int b, int offset, int length,
+	int srclength, int pages)
 {
-	struct squashfs_lzo *stream = msblk->stream;
+	struct squashfs_lzo *stream = strm;
 	void *buff = stream->input;
 	int avail, i, bytes = length, res;
 	size_t out_len = srclength;
 
-	mutex_lock(&msblk->read_data_mutex);
-
 	for (i = 0; i < b; i++) {
-		wait_on_buffer(bh[i]);
-		if (!buffer_uptodate(bh[i]))
-			goto block_release;
-
 		avail = min(bytes, msblk->devblksize - offset);
 		memcpy(buff, bh[i]->b_data + offset, avail);
 		buff += avail;
@@ -111,17 +105,9 @@ static int lzo_uncompress(struct squashfs_sb_info *msblk, void **buffer,
 		bytes -= avail;
 	}
 
-	mutex_unlock(&msblk->read_data_mutex);
 	return res;
 
-block_release:
-	for (; i < b; i++)
-		put_bh(bh[i]);
-
 failed:
-	mutex_unlock(&msblk->read_data_mutex);
-
-	ERROR("lzo decompression failed, data probably corrupt\n");
 	return -EIO;
 }
 
diff --git a/fs/squashfs/squashfs.h b/fs/squashfs/squashfs.h
index d126651..2e2751d 100644
--- a/fs/squashfs/squashfs.h
+++ b/fs/squashfs/squashfs.h
@@ -48,7 +48,14 @@ extern void *squashfs_read_table(struct super_block *, u64, int);
 
 /* decompressor.c */
 extern const struct squashfs_decompressor *squashfs_lookup_decompressor(int);
-extern void *squashfs_decompressor_init(struct super_block *, unsigned short);
+extern void *squashfs_decompressor_setup(struct super_block *, unsigned short);
+
+/* decompressor_xxx.c */
+extern void *squashfs_decompressor_create(struct squashfs_sb_info *, void *);
+extern void squashfs_decompressor_destroy(struct squashfs_sb_info *);
+extern int squashfs_decompress(struct squashfs_sb_info *, void **,
+	struct buffer_head **, int, int, int, int, int);
+extern int squashfs_max_decompressors(void);
 
 /* export.c */
 extern __le64 *squashfs_read_inode_lookup_table(struct super_block *, u64, u64,
diff --git a/fs/squashfs/squashfs_fs_sb.h b/fs/squashfs/squashfs_fs_sb.h
index 52934a2..9cdcf41 100644
--- a/fs/squashfs/squashfs_fs_sb.h
+++ b/fs/squashfs/squashfs_fs_sb.h
@@ -63,10 +63,9 @@ struct squashfs_sb_info {
 	__le64					*id_table;
 	__le64					*fragment_index;
 	__le64					*xattr_id_table;
-	struct mutex				read_data_mutex;
 	struct mutex				meta_index_mutex;
 	struct meta_index			*meta_index;
-	void					*stream;
+	struct squashfs_stream			*stream;
 	__le64					*inode_lookup_table;
 	u64					inode_table;
 	u64					directory_table;
diff --git a/fs/squashfs/super.c b/fs/squashfs/super.c
index 60553a9..202df63 100644
--- a/fs/squashfs/super.c
+++ b/fs/squashfs/super.c
@@ -98,7 +98,6 @@ static int squashfs_fill_super(struct super_block *sb, void *data, int silent)
 	msblk->devblksize = sb_min_blocksize(sb, SQUASHFS_DEVBLK_SIZE);
 	msblk->devblksize_log2 = ffz(~msblk->devblksize);
 
-	mutex_init(&msblk->read_data_mutex);
 	mutex_init(&msblk->meta_index_mutex);
 
 	/*
@@ -206,13 +205,14 @@ static int squashfs_fill_super(struct super_block *sb, void *data, int silent)
 		goto failed_mount;
 
 	/* Allocate read_page block */
-	msblk->read_page = squashfs_cache_init("data", 1, msblk->block_size);
+	msblk->read_page = squashfs_cache_init("data",
+		squashfs_max_decompressors(), msblk->block_size);
 	if (msblk->read_page == NULL) {
 		ERROR("Failed to allocate read_page block\n");
 		goto failed_mount;
 	}
 
-	msblk->stream = squashfs_decompressor_init(sb, flags);
+	msblk->stream = squashfs_decompressor_setup(sb, flags);
 	if (IS_ERR(msblk->stream)) {
 		err = PTR_ERR(msblk->stream);
 		msblk->stream = NULL;
@@ -336,7 +336,7 @@ failed_mount:
 	squashfs_cache_delete(msblk->block_cache);
 	squashfs_cache_delete(msblk->fragment_cache);
 	squashfs_cache_delete(msblk->read_page);
-	squashfs_decompressor_free(msblk, msblk->stream);
+	squashfs_decompressor_destroy(msblk);
 	kfree(msblk->inode_lookup_table);
 	kfree(msblk->fragment_index);
 	kfree(msblk->id_table);
@@ -383,7 +383,7 @@ static void squashfs_put_super(struct super_block *sb)
 		squashfs_cache_delete(sbi->block_cache);
 		squashfs_cache_delete(sbi->fragment_cache);
 		squashfs_cache_delete(sbi->read_page);
-		squashfs_decompressor_free(sbi, sbi->stream);
+		squashfs_decompressor_destroy(sbi);
 		kfree(sbi->id_table);
 		kfree(sbi->fragment_index);
 		kfree(sbi->meta_index);
diff --git a/fs/squashfs/xz_wrapper.c b/fs/squashfs/xz_wrapper.c
index 1760b7d1..5d1d07c 100644
--- a/fs/squashfs/xz_wrapper.c
+++ b/fs/squashfs/xz_wrapper.c
@@ -38,38 +38,63 @@ struct squashfs_xz {
 	struct xz_buf buf;
 };
 
-struct comp_opts {
+struct disk_comp_opts {
 	__le32 dictionary_size;
 	__le32 flags;
 };
 
-static void *squashfs_xz_init(struct squashfs_sb_info *msblk, void *buff,
-	int len)
+struct comp_opts {
+	int dict_size;
+};
+
+static void *squashfs_xz_comp_opts(struct squashfs_sb_info *msblk,
+	void *buff, int len)
 {
-	struct comp_opts *comp_opts = buff;
-	struct squashfs_xz *stream;
-	int dict_size = msblk->block_size;
-	int err, n;
+	struct disk_comp_opts *comp_opts = buff;
+	struct comp_opts *opts;
+	int err = 0, n;
+
+	opts = kmalloc(sizeof(*opts), GFP_KERNEL);
+	if (opts == NULL) {
+		err = -ENOMEM;
+		goto out2;
+	}
 
 	if (comp_opts) {
 		/* check compressor options are the expected length */
 		if (len < sizeof(*comp_opts)) {
 			err = -EIO;
-			goto failed;
+			goto out;
 		}
 
-		dict_size = le32_to_cpu(comp_opts->dictionary_size);
+		opts->dict_size = le32_to_cpu(comp_opts->dictionary_size);
 
 		/* the dictionary size should be 2^n or 2^n+2^(n+1) */
-		n = ffs(dict_size) - 1;
-		if (dict_size != (1 << n) && dict_size != (1 << n) +
+		n = ffs(opts->dict_size) - 1;
+		if (opts->dict_size != (1 << n) && opts->dict_size != (1 << n) +
 						(1 << (n + 1))) {
 			err = -EIO;
-			goto failed;
+			goto out;
 		}
-	}
+	} else
+		/* use defaults */
+		opts->dict_size = max_t(int, msblk->block_size,
+							SQUASHFS_METADATA_SIZE);
 
-	dict_size = max_t(int, dict_size, SQUASHFS_METADATA_SIZE);
+	return opts;
+
+out:
+	kfree(opts);
+out2:
+	return ERR_PTR(err);
+}
+
+
+static void *squashfs_xz_init(struct squashfs_sb_info *msblk, void *buff)
+{
+	struct comp_opts *comp_opts = buff;
+	struct squashfs_xz *stream;
+	int err;
 
 	stream = kmalloc(sizeof(*stream), GFP_KERNEL);
 	if (stream == NULL) {
@@ -77,7 +102,7 @@ static void *squashfs_xz_init(struct squashfs_sb_info *msblk, void *buff,
 		goto failed;
 	}
 
-	stream->state = xz_dec_init(XZ_PREALLOC, dict_size);
+	stream->state = xz_dec_init(XZ_PREALLOC, comp_opts->dict_size);
 	if (stream->state == NULL) {
 		kfree(stream);
 		err = -ENOMEM;
@@ -103,15 +128,13 @@ static void squashfs_xz_free(void *strm)
 }
 
 
-static int squashfs_xz_uncompress(struct squashfs_sb_info *msblk, void **buffer,
-	struct buffer_head **bh, int b, int offset, int length, int srclength,
-	int pages)
+static int squashfs_xz_uncompress(struct squashfs_sb_info *msblk, void *strm,
+	void **buffer, struct buffer_head **bh, int b, int offset, int length,
+	int srclength, int pages)
 {
 	enum xz_ret xz_err;
 	int avail, total = 0, k = 0, page = 0;
-	struct squashfs_xz *stream = msblk->stream;
-
-	mutex_lock(&msblk->read_data_mutex);
+	struct squashfs_xz *stream = strm;
 
 	xz_dec_reset(stream->state);
 	stream->buf.in_pos = 0;
@@ -124,10 +147,6 @@ static int squashfs_xz_uncompress(struct squashfs_sb_info *msblk, void **buffer,
 		if (stream->buf.in_pos == stream->buf.in_size && k < b) {
 			avail = min(length, msblk->devblksize - offset);
 			length -= avail;
-			wait_on_buffer(bh[k]);
-			if (!buffer_uptodate(bh[k]))
-				goto release_mutex;
-
 			stream->buf.in = bh[k]->b_data + offset;
 			stream->buf.in_size = avail;
 			stream->buf.in_pos = 0;
@@ -147,23 +166,12 @@ static int squashfs_xz_uncompress(struct squashfs_sb_info *msblk, void **buffer,
 			put_bh(bh[k++]);
 	} while (xz_err == XZ_OK);
 
-	if (xz_err != XZ_STREAM_END) {
-		ERROR("xz_dec_run error, data probably corrupt\n");
-		goto release_mutex;
-	}
-
-	if (k < b) {
-		ERROR("xz_uncompress error, input remaining\n");
-		goto release_mutex;
-	}
-
-	total += stream->buf.out_pos;
-	mutex_unlock(&msblk->read_data_mutex);
-	return total;
+	if (xz_err != XZ_STREAM_END || k < b)
+		goto out;
 
-release_mutex:
-	mutex_unlock(&msblk->read_data_mutex);
+	return total + stream->buf.out_pos;
 
+out:
 	for (; k < b; k++)
 		put_bh(bh[k]);
 
@@ -172,6 +180,7 @@ release_mutex:
 
 const struct squashfs_decompressor squashfs_xz_comp_ops = {
 	.init = squashfs_xz_init,
+	.comp_opts = squashfs_xz_comp_opts,
 	.free = squashfs_xz_free,
 	.decompress = squashfs_xz_uncompress,
 	.id = XZ_COMPRESSION,
diff --git a/fs/squashfs/zlib_wrapper.c b/fs/squashfs/zlib_wrapper.c
index 55d918f..bb04902 100644
--- a/fs/squashfs/zlib_wrapper.c
+++ b/fs/squashfs/zlib_wrapper.c
@@ -33,7 +33,7 @@
 #include "squashfs.h"
 #include "decompressor.h"
 
-static void *zlib_init(struct squashfs_sb_info *dummy, void *buff, int len)
+static void *zlib_init(struct squashfs_sb_info *dummy, void *buff)
 {
 	z_stream *stream = kmalloc(sizeof(z_stream), GFP_KERNEL);
 	if (stream == NULL)
@@ -61,15 +61,13 @@ static void zlib_free(void *strm)
 }
 
 
-static int zlib_uncompress(struct squashfs_sb_info *msblk, void **buffer,
-	struct buffer_head **bh, int b, int offset, int length, int srclength,
-	int pages)
+static int zlib_uncompress(struct squashfs_sb_info *msblk, void *strm,
+	void **buffer, struct buffer_head **bh, int b, int offset, int length,
+	int srclength, int pages)
 {
 	int zlib_err, zlib_init = 0;
 	int k = 0, page = 0;
-	z_stream *stream = msblk->stream;
-
-	mutex_lock(&msblk->read_data_mutex);
+	z_stream *stream = strm;
 
 	stream->avail_out = 0;
 	stream->avail_in = 0;
@@ -78,10 +76,6 @@ static int zlib_uncompress(struct squashfs_sb_info *msblk, void **buffer,
 		if (stream->avail_in == 0 && k < b) {
 			int avail = min(length, msblk->devblksize - offset);
 			length -= avail;
-			wait_on_buffer(bh[k]);
-			if (!buffer_uptodate(bh[k]))
-				goto release_mutex;
-
 			stream->next_in = bh[k]->b_data + offset;
 			stream->avail_in = avail;
 			offset = 0;
@@ -94,12 +88,8 @@ static int zlib_uncompress(struct squashfs_sb_info *msblk, void **buffer,
 
 		if (!zlib_init) {
 			zlib_err = zlib_inflateInit(stream);
-			if (zlib_err != Z_OK) {
-				ERROR("zlib_inflateInit returned unexpected "
-					"result 0x%x, srclength %d\n",
-					zlib_err, srclength);
-				goto release_mutex;
-			}
+			if (zlib_err != Z_OK)
+				goto out;
 			zlib_init = 1;
 		}
 
@@ -109,29 +99,19 @@ static int zlib_uncompress(struct squashfs_sb_info *msblk, void **buffer,
 			put_bh(bh[k++]);
 	} while (zlib_err == Z_OK);
 
-	if (zlib_err != Z_STREAM_END) {
-		ERROR("zlib_inflate error, data probably corrupt\n");
-		goto release_mutex;
-	}
+	if (zlib_err != Z_STREAM_END)
+		goto out;
 
 	zlib_err = zlib_inflateEnd(stream);
-	if (zlib_err != Z_OK) {
-		ERROR("zlib_inflate error, data probably corrupt\n");
-		goto release_mutex;
-	}
-
-	if (k < b) {
-		ERROR("zlib_uncompress error, data remaining\n");
-		goto release_mutex;
-	}
+	if (zlib_err != Z_OK)
+		goto out;
 
-	length = stream->total_out;
-	mutex_unlock(&msblk->read_data_mutex);
-	return length;
+	if (k < b)
+		goto out;
 
-release_mutex:
-	mutex_unlock(&msblk->read_data_mutex);
+	return stream->total_out;
 
+out:
 	for (; k < b; k++)
 		put_bh(bh[k]);
 
-- 
1.7.5.4

