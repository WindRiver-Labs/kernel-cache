From adb526fab389e2b9fa4a2d1890eac59473c2b6ab Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Tue, 9 Oct 2012 14:24:56 +0800
Subject: [PATCH] sched,rt: fix isolated CPUs leaving root_task_group indefinitely throttled

Root task group bandwidth replenishment must service all CPUs regardless of
where it was last started.

This patch not merged into mainline since cpuisol planed to be removed. But
there do be a bug and need to be fixed. While in the same thread, Peter
introduced another solution that just disable realtime throttling on isolated
CPUs. Details as: https://lkml.org/lkml/2012/4/14/85 . But realtime throttling
is an important safety breaker that should not been disabled on any CPU, thus
we choose Mike's patch at last.

Signed-off-by: Mike Galbraith <efault@gmx.de>
Integrated-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 kernel/sched_rt.c |   10 ++++++++++
 1 files changed, 10 insertions(+), 0 deletions(-)

diff --git a/kernel/sched_rt.c b/kernel/sched_rt.c
index c671742..afd7e1c 100644
--- a/kernel/sched_rt.c
+++ b/kernel/sched_rt.c
@@ -525,6 +525,16 @@ static int do_sched_rt_period_timer(struct rt_bandwidth *rt_b, int overrun)
 		return 1;
 
 	span = sched_rt_period_mask();
+#ifdef CONFIG_RT_GROUP_SCHED
+	/*
+	 * Isolated CPUs out of the root task group should also
+	 * whether they are isolcpus or were isolated via cpusets, lest
+	 * the timer run on a CPU which does not service all runqueues,
+	 * potentially leaving other CPUs indefinitely throttled.
+	 */
+	if (rt_b == &root_task_group.rt_bandwidth)
+		span = cpu_online_mask;
+#endif
 	for_each_cpu(i, span) {
 		int enqueue = 0;
 		struct rt_rq *rt_rq = sched_rt_period_rt_rq(rt_b, i);
-- 
1.7.0

