From c4e20fbc71183aa9345885191ac5b8f1127a0c38 Mon Sep 17 00:00:00 2001
From: Catalin Enache <catalin.enache@windriver.com>
Date: Tue, 6 Mar 2018 21:18:08 +0200
Subject: [PATCH] bpf/verifier: Fix states_equal() comparison of pointer and
 UNKNOWN

commit 37435f7e80ef9adc32a69013c18f135e3f434244 upstream
commit taken from:
https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/commit/?id=37435f7e80ef9adc32a69013c18f135e3f434244

An UNKNOWN_VALUE is not supposed to be derived from a pointer, unless
pointer leaks are allowed.  Therefore, states_equal() must not treat
a state with a pointer in a register as "equal" to a state with an
UNKNOWN_VALUE in that register.

This was fixed differently upstream, but the code around here was
largely rewritten in 4.14 by commit f1174f77b50c "bpf/verifier: rework
value tracking".  The bug can be detected by the bpf/verifier sub-test
"pointer/scalar confusion in state equality check (way 1)".

Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
Cc: Edward Cree <ecree@solarflare.com>
Cc: Jann Horn <jannh@google.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
CE: added and adapted __is_pointer_value() function
Signed-off-by: Catalin Enache <catalin.enache@windriver.com>
[OP: adjusted context for kernel version 4.1]
Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
---
 kernel/bpf/verifier.c |   19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c
index 25f6130..b112f83 100644
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -1396,6 +1396,22 @@ err_free:
 	return ret;
 }
 
+static bool __is_pointer_value(bool allow_ptr_leaks,
+			       const struct bpf_reg_state *reg)
+{
+	if (capable(CAP_SYS_ADMIN))
+		return false;
+
+	switch (reg->type) {
+	case UNKNOWN_VALUE:
+	case CONST_IMM:
+		return false;
+	default:
+		return true;
+	}
+}
+
+
 /* compare two verifier states
  *
  * all states stored in state_list are known to be valid, since
@@ -1431,7 +1447,8 @@ static bool states_equal(struct bpf_verifier_state *old, struct bpf_verifier_sta
 			   sizeof(old->regs[0])) != 0) {
 			if (old->regs[i].type == NOT_INIT ||
 			    (old->regs[i].type == UNKNOWN_VALUE &&
-			     cur->regs[i].type != NOT_INIT))
+			     cur->regs[i].type != NOT_INIT &&
+			     !__is_pointer_value(false, &cur->regs[i])))
 				continue;
 			return false;
 		}
-- 
1.7.9.5

