From 637ad3243385a7f7adcfdc219d550aa6fb14d552 Mon Sep 17 00:00:00 2001
From: Rui Wang <rui.wang@windriver.com>
Date: Wed, 12 Dec 2018 05:23:25 +0000
Subject: [PATCH 1/2] Revert "sched/core: Enable might_sleep() and
 smp_processor_id() checks early"

This reverts commit a8a60c655f41da7313f5884010597a9666a9b1e4.

That commit enables might_sleep() and smp_processor_id() checks
right when the scheduler starts working, which is used to find
kernel bug while fixing issue LIN9-6907. But this feature needs
a new system state: SYSTEM_SCHEDULING. And after the new state
was introduced, a regression related to iommu was found. We
finally figure out that we need more patches to make kernel
adjust to the new state, which will be too big for this kind of
issue. So it would be more appropriate to revert the patch.

Signed-off-by: Rui Wang <rui.wang@windriver.com>
---
 init/main.c            |   10 ----------
 kernel/sched/core.c    |    4 +---
 lib/smp_processor_id.c |    2 +-
 3 files changed, 2 insertions(+), 14 deletions(-)

diff --git a/init/main.c b/init/main.c
index 5db757d..a297fbd 100644
--- a/init/main.c
+++ b/init/main.c
@@ -408,16 +408,6 @@ static noinline void __ref rest_init(void)
 	rcu_read_lock();
 	kthreadd_task = find_task_by_pid_ns(pid, &init_pid_ns);
 	rcu_read_unlock();
-
-	/*
-	 * Enable might_sleep() and smp_processor_id() checks.
-	 * They cannot be enabled earlier because with CONFIG_PRREMPT=y
-	 * kernel_thread() would trigger might_sleep() splats. With
-	 * CONFIG_PREEMPT_VOLUNTARY=y the init task might have scheduled
-	 * already, but it's stuck on the kthreadd_done completion.
-	 */
-	system_state = SYSTEM_SCHEDULING;
-
 	complete(&kthreadd_done);
 
 	/*
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 676c6b58..44817c6 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -7596,10 +7596,8 @@ void ___might_sleep(const char *file, int line, int preempt_offset)
 	rcu_sleep_check(); /* WARN_ON_ONCE() by default, no rate limit reqd. */
 	if ((preempt_count_equals(preempt_offset) && !irqs_disabled() &&
 	     !is_idle_task(current)) ||
-	    system_state == SYSTEM_BOOTING || system_state > SYSTEM_RUNNING ||
-	    oops_in_progress)
+	    system_state != SYSTEM_RUNNING || oops_in_progress)
 		return;
-
 	if (time_before(jiffies, prev_jiffy + HZ) && prev_jiffy)
 		return;
 	prev_jiffy = jiffies;
diff --git a/lib/smp_processor_id.c b/lib/smp_processor_id.c
index fef44de..1afec32 100644
--- a/lib/smp_processor_id.c
+++ b/lib/smp_processor_id.c
@@ -28,7 +28,7 @@ notrace static unsigned int check_preemption_disabled(const char *what1,
 	/*
 	 * It is valid to assume CPU-locality during early bootup:
 	 */
-	if (system_state < SYSTEM_SCHEDULING)
+	if (system_state != SYSTEM_RUNNING)
 		goto out;
 
 	/*
-- 
1.7.9.5

