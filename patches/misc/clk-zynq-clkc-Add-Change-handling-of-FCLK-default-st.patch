From 751ffd5d7508c11971335e76e84743bd9df17cd7 Mon Sep 17 00:00:00 2001
From: Liming Wang <liming.wang@windriver.com>
Date: Fri, 21 Mar 2014 18:08:40 +0800
Subject: [PATCH 026/628] clk/zynq/clkc: Add Change handling of FCLK default
 state

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 48461c50 clk: zynq: Change handling of FCLK default state

To accomodate soft IP which is not using the FCLKs through the CCF FCLKs
are handled the following way:

If an FCLK is not enabled by bootloaders, that FCLK will be disabled in
Linux. Drivers can enable and control it through the CCF as usual.

If an FCLK is enabled by bootloaders AND the corresponding bit in the
'fclk-enable' DT property is set, that FCLK will be enabled by the clkc,
resulting in an off by one reference count for that clock.

The default value for 'fclk-enable' is '0xf' (all FCLK's enabled by the
bootloader are enabled through the clkc.

Longer term it is intended to port all clock users to use the CCF and
change the 'fclk-enable' default to '0'.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
[only take code of setting default value of 'fclk-enable' to '0xf']
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/clk/zynq/clkc.c |    6 ++++--
 1 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/drivers/clk/zynq/clkc.c b/drivers/clk/zynq/clkc.c
index 139d3ca..75fc995 100644
--- a/drivers/clk/zynq/clkc.c
+++ b/drivers/clk/zynq/clkc.c
@@ -280,8 +280,6 @@ static void __init zynq_clk_setup(struct device_node *np)
 	periph_parents[2] = clk_output_name[armpll];
 	periph_parents[3] = clk_output_name[ddrpll];
 
-	of_property_read_u32(np, "fclk-enable", &fclk_enable);
-
 	/* ps_clk */
 	ret = of_property_read_u32(np, "ps-clk-frequency", &tmp);
 	if (ret) {
@@ -291,6 +289,10 @@ static void __init zynq_clk_setup(struct device_node *np)
 	ps_clk = clk_register_fixed_rate(NULL, "ps_clk", NULL, CLK_IS_ROOT,
 			tmp);
 
+	ret = of_property_read_u32(np, "fclk-enable", &fclk_enable);
+	if (ret)
+		fclk_enable = 0xf;
+
 	/* PLLs */
 	clk = clk_register_zynq_pll("armpll_int", "ps_clk", SLCR_ARMPLL_CTRL,
 			SLCR_PLL_STATUS, 0, &armpll_lock);
-- 
1.7.5.4

