From d7080527875088b3561a2c28ace988e995dd38f1 Mon Sep 17 00:00:00 2001
From: Punnaiah Choudary Kalluri <punnaiah.choudary.kalluri@xilinx.com>
Date: Wed, 18 Sep 2013 09:45:14 +0530
Subject: [PATCH 547/628] usb: xilinxps_udc: Fixed compilation error

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 9fb8d25f98553a7a46d07a3a9db450f958076132

Don't use create_proc_read_entry() as that is deprecated, but rather use
proc_create_data() and seq_file instead

Signed-off-by: Punnaiah Choudary Kalluri <punnaia@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_usbps_udc.c |  123 +++++++++++----------------------
 1 files changed, 40 insertions(+), 83 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index 0113c42..9ef1cd1 100644
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -2438,60 +2438,43 @@ static irqreturn_t xusbps_udc_irq(int irq, void *_udc)
 
 static const char proc_filename[] = "driver/xusbps_udc";
 
-static int xusbps_proc_read(char *page, char **start, off_t off, int count,
-		int *eof, void *_dev)
+static int xusbps_proc_read(struct seq_file *m, void *v)
 {
-	char *buf = page;
-	char *next = buf;
-	unsigned size = count;
 	unsigned long flags;
-	int t, i;
+	int i;
 	u32 tmp_reg;
 	struct xusbps_ep *ep = NULL;
 	struct xusbps_req *req;
-
 	struct xusbps_udc *udc = udc_controller;
-	if (off != 0)
-		return 0;
 
 	spin_lock_irqsave(&udc->lock, flags);
 
 	/* ------basic driver information ---- */
-	t = scnprintf(next, size,
-			DRIVER_DESC "\n"
+	seq_printf(m, DRIVER_DESC "\n"
 			"%s version: %s\n"
 			"Gadget driver: %s\n\n",
 			driver_name, DRIVER_VERSION,
 			udc->driver ? udc->driver->driver.name : "(none)");
-	size -= t;
-	next += t;
 
 	/* ------ DR Registers ----- */
 	tmp_reg = xusbps_readl(&dr_regs->usbcmd);
-	t = scnprintf(next, size,
-			"USBCMD reg:\n"
+	seq_printf(m, "USBCMD reg:\n"
 			"SetupTW: %d\n"
 			"Run/Stop: %s\n\n",
 			(tmp_reg & USB_CMD_SUTW) ? 1 : 0,
 			(tmp_reg & USB_CMD_RUN_STOP) ? "Run" : "Stop");
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->usbsts);
-	t = scnprintf(next, size,
-			"USB Status Reg:\n"
+	seq_printf(m, "USB Status Reg:\n"
 			"Dr Suspend: %d Reset Received: %d System Error: %s "
 			"USB Error Interrupt: %s\n\n",
 			(tmp_reg & USB_STS_SUSPEND) ? 1 : 0,
 			(tmp_reg & USB_STS_RESET) ? 1 : 0,
 			(tmp_reg & USB_STS_SYS_ERR) ? "Err" : "Normal",
 			(tmp_reg & USB_STS_ERR) ? "Err detected" : "No err");
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->usbintr);
-	t = scnprintf(next, size,
-			"USB Intrrupt Enable Reg:\n"
+	seq_printf(m, "USB Intrrupt Enable Reg:\n"
 			"Sleep Enable: %d SOF Received Enable: %d "
 			"Reset Enable: %d\n"
 			"System Error Enable: %d "
@@ -2504,34 +2487,22 @@ static int xusbps_proc_read(char *page, char **start, off_t off, int count,
 			(tmp_reg & USB_INTR_PTC_DETECT_EN) ? 1 : 0,
 			(tmp_reg & USB_INTR_ERR_INT_EN) ? 1 : 0,
 			(tmp_reg & USB_INTR_INT_EN) ? 1 : 0);
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->frindex);
-	t = scnprintf(next, size,
-			"USB Frame Index Reg: Frame Number is 0x%x\n\n",
+	seq_printf(m, "USB Frame Index Reg: Frame Number is 0x%x\n\n",
 			(tmp_reg & USB_FRINDEX_MASKS));
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->deviceaddr);
-	t = scnprintf(next, size,
-			"USB Device Address Reg: Device Addr is 0x%x\n\n",
+	seq_printf(m, "USB Device Address Reg: Device Addr is 0x%x\n\n",
 			(tmp_reg & USB_DEVICE_ADDRESS_MASK));
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->endpointlistaddr);
-	t = scnprintf(next, size,
-			"USB Endpoint List Address Reg: "
+	seq_printf(m, "USB Endpoint List Address Reg: "
 			"Device Addr is 0x%x\n\n",
 			(tmp_reg & USB_EP_LIST_ADDRESS_MASK));
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->portsc1);
-	t = scnprintf(next, size,
-		"USB Port Status&Control Reg:\n"
+	seq_printf(m, "USB Port Status&Control Reg:\n"
 		"Port Transceiver Type : %s Port Speed: %s\n"
 		"PHY Low Power Suspend: %s Port Reset: %s "
 		"Port Suspend Mode: %s\n"
@@ -2569,20 +2540,15 @@ static int xusbps_proc_read(char *page, char **start, off_t off, int count,
 		(tmp_reg & PORTSCX_PORT_RESET) ? "In Reset" :
 		"Not in Reset",
 		(tmp_reg & PORTSCX_PORT_SUSPEND) ? "In " : "Not in",
-		(tmp_reg & PORTSCX_OVER_CURRENT_CHG) ? "Dected" :
-		"No",
+		(tmp_reg & PORTSCX_OVER_CURRENT_CHG) ? "Dected" : "No",
 		(tmp_reg & PORTSCX_PORT_EN_DIS_CHANGE) ? "Disable" :
 		"Not change",
-		(tmp_reg & PORTSCX_PORT_ENABLE) ? "Enable" :
-		"Not correct",
+		(tmp_reg & PORTSCX_PORT_ENABLE) ? "Enable" : "Not correct",
 		(tmp_reg & PORTSCX_CURRENT_CONNECT_STATUS) ?
 		"Attached" : "Not-Att");
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->usbmode);
-	t = scnprintf(next, size,
-			"USB Mode Reg: Controller Mode is: %s\n\n", ({
+	seq_printf(m, "USB Mode Reg: Controller Mode is: %s\n\n", ({
 				char *s;
 				switch (tmp_reg & USB_MODE_CTRL_MODE_HOST) {
 				case USB_MODE_CTRL_MODE_IDLE:
@@ -2596,75 +2562,52 @@ static int xusbps_proc_read(char *page, char **start, off_t off, int count,
 				}
 				s;
 			}));
-	size -= t;
-	next += t;
 
 	tmp_reg = xusbps_readl(&dr_regs->endptsetupstat);
-	t = scnprintf(next, size,
-			"Endpoint Setup Status Reg: SETUP on ep 0x%x\n\n",
+	seq_printf(m, "Endpoint Setup Status Reg: SETUP on ep 0x%x\n\n",
 			(tmp_reg & EP_SETUP_STATUS_MASK));
-	size -= t;
-	next += t;
 
 	for (i = 0; i < udc->max_ep / 2; i++) {
 		tmp_reg = xusbps_readl(&dr_regs->endptctrl[i]);
-		t = scnprintf(next, size, "EP Ctrl Reg [0x%x]: = [0x%x]\n",
+		seq_printf(m, "EP Ctrl Reg [0x%x]: = [0x%x]\n",
 				i, tmp_reg);
-		size -= t;
-		next += t;
 	}
 	tmp_reg = xusbps_readl(&dr_regs->endpointprime);
-	t = scnprintf(next, size, "EP Prime Reg = [0x%x]\n\n", tmp_reg);
-	size -= t;
-	next += t;
+	seq_printf(m, "EP Prime Reg = [0x%x]\n\n", tmp_reg);
 
 	/* ------xusbps_udc, xusbps_ep, xusbps_request structure information
 	 * ----- */
 	ep = &udc->eps[0];
-	t = scnprintf(next, size, "For %s Maxpkt is 0x%x index is 0x%x\n",
+	seq_printf(m, "For %s Maxpkt is 0x%x index is 0x%x\n",
 			ep->ep.name, ep_maxpacket(ep), ep_index(ep));
-	size -= t;
-	next += t;
 
 	if (list_empty(&ep->queue)) {
-		t = scnprintf(next, size, "its req queue is empty\n\n");
-		size -= t;
-		next += t;
+		seq_puts(m, "its req queue is empty\n\n");
 	} else {
 		list_for_each_entry(req, &ep->queue, queue) {
-			t = scnprintf(next, size,
+			seq_printf(m,
 				"req %p actual 0x%x length 0x%x buf %p\n",
 				&req->req, req->req.actual,
 				req->req.length, req->req.buf);
-			size -= t;
-			next += t;
 		}
 	}
 	/* other gadget->eplist ep */
 	list_for_each_entry(ep, &udc->gadget.ep_list, ep.ep_list) {
 		if (ep->ep.desc) {
-			t = scnprintf(next, size,
-					"\nFor %s Maxpkt is 0x%x "
+			seq_printf(m, "\nFor %s Maxpkt is 0x%x "
 					"index is 0x%x\n",
 					ep->ep.name, ep_maxpacket(ep),
 					ep_index(ep));
-			size -= t;
-			next += t;
 
 			if (list_empty(&ep->queue)) {
-				t = scnprintf(next, size,
-						"its req queue is empty\n\n");
-				size -= t;
-				next += t;
+				seq_puts(m, "its req queue is empty\n\n");
 			} else {
 				list_for_each_entry(req, &ep->queue, queue) {
-					t = scnprintf(next, size,
+					seq_printf(m,
 						"req %p actual 0x%x length "
 						"0x%x  buf %p\n",
 						&req->req, req->req.actual,
 						req->req.length, req->req.buf);
-					size -= t;
-					next += t;
 					} /* end for each_entry of ep req */
 				}	/* end for else */
 			}	/* end for if(ep->queue) */
@@ -2672,12 +2615,26 @@ static int xusbps_proc_read(char *page, char **start, off_t off, int count,
 
 	spin_unlock_irqrestore(&udc->lock, flags);
 
-	*eof = 1;
-	return count - size;
+	return 0;
+}
+
+/*
+ * seq_file wrappers for procfile show routines.
+ */
+static int xusbps_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, xusbps_proc_read, NULL);
 }
 
-#define create_proc_file()	create_proc_read_entry(proc_filename, \
-				0, NULL, xusbps_proc_read, NULL)
+static const struct file_operations proc_xusbps_fops = {
+	.open		= xusbps_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= seq_release,
+};
+
+#define create_proc_file()	proc_create(proc_filename, \
+					0, NULL, &proc_xusbps_fops)
 
 #define remove_proc_file()	remove_proc_entry(proc_filename, NULL)
 
-- 
1.7.5.4

