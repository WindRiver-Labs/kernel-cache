From 5a056d89da3fcecb93ae362b31274e51e3dfd0af Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Wed, 18 Aug 2010 20:21:08 -0700
Subject: [PATCH] [audit] fix kernel panic due to invalid syscall

A program making a syscall with an invalid syscall number can cause kernel
panic. The audit code uses a hash table with syscall number used to index
hash table, but it only handles up to 2048 entries. Therefore, with a large
syscall number, an invalid bucket in the hash table is accessed, and the kernel
panics or sometimes just hangs(which is worse). To fix the problem, just add
the range check for syscall number. Additionally, we need a NR_syscalls macro
for arm and mips under cgl configuration, because the check is placed at
common area and other architectures all have NR_syscalls.

Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 arch/arm/include/asm/unistd.h  |    1 +
 arch/mips/include/asm/unistd.h |    3 +++
 kernel/auditsc.c               |    3 +++
 3 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/arch/arm/include/asm/unistd.h b/arch/arm/include/asm/unistd.h
index b32c36c..6e19de7 100644
--- a/arch/arm/include/asm/unistd.h
+++ b/arch/arm/include/asm/unistd.h
@@ -394,6 +394,7 @@
 #define __NR_recvmmsg			(__NR_SYSCALL_BASE+365)
 
 #define __NR_syscall_max 366
+#define NR_syscalls (__NR_syscall_max + 1)
 
 /*
  * The following SWIs are ARM private.
diff --git a/arch/mips/include/asm/unistd.h b/arch/mips/include/asm/unistd.h
index baa318a..27c333d 100644
--- a/arch/mips/include/asm/unistd.h
+++ b/arch/mips/include/asm/unistd.h
@@ -1054,5 +1054,8 @@
  */
 #define cond_syscall(x) asm(".weak\t" #x "\n" #x "\t=\tsys_ni_syscall")
 
+#define NR_syscalls			__NR_Linux_syscalls
+
+
 #endif /* __KERNEL__ */
 #endif /* _ASM_UNISTD_H */
diff --git a/kernel/auditsc.c b/kernel/auditsc.c
index 3828ad5..6d6ed04 100644
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@ -1578,6 +1578,9 @@ void audit_syscall_entry(int arch, int major,
 	struct audit_context *context = tsk->audit_context;
 	enum audit_state     state;
 
+	if (unlikely(major >= NR_syscalls || major < 0))
+		return;
+
 	if (unlikely(!context))
 		return;
 
-- 
1.6.5.2

