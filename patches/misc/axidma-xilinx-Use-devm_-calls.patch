From 1113776c7e62bb57566248e7d9860feee3540760 Mon Sep 17 00:00:00 2001
From: Srikanth Thokala <srikanth.thokala@xilinx.com>
Date: Wed, 18 Sep 2013 17:27:23 +0530
Subject: [PATCH 114/628] axidma: xilinx: Use devm_* calls

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit f3477bd8645434a6af424b07bca0203be5e0678e

Updated driver to use devm_* calls

Signed-off-by: Srikanth Thokala <sthokal@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/dma/xilinx/xilinx_axidma.c |   47 ++++++++++++-----------------------
 1 files changed, 16 insertions(+), 31 deletions(-)

diff --git a/drivers/dma/xilinx/xilinx_axidma.c b/drivers/dma/xilinx/xilinx_axidma.c
index 716ac21..7e79d44 100644
--- a/drivers/dma/xilinx/xilinx_axidma.c
+++ b/drivers/dma/xilinx/xilinx_axidma.c
@@ -948,7 +948,6 @@ static void xilinx_dma_chan_remove(struct xilinx_dma_chan *chan)
 {
 	irq_dispose_mapping(chan->irq);
 	list_del(&chan->common.device_node);
-	kfree(chan);
 }
 
 /*
@@ -966,11 +965,10 @@ static int xilinx_dma_chan_probe(struct xilinx_dma_device *xdev,
 	u32 width = 0, device_id = 0;
 
 	/* alloc channel */
-	chan = kzalloc(sizeof(*chan), GFP_KERNEL);
+	chan = devm_kzalloc(xdev->dev, sizeof(*chan), GFP_KERNEL);
 	if (!chan) {
 		dev_err(xdev->dev, "no free memory for DMA channels!\n");
-		err = -ENOMEM;
-		goto out_return;
+		return -ENOMEM;
 	}
 
 	chan->feature = feature;
@@ -1037,9 +1035,10 @@ static int xilinx_dma_chan_probe(struct xilinx_dma_device *xdev,
 	tasklet_init(&chan->tasklet, dma_do_tasklet, (unsigned long)chan);
 
 	/* Initialize the channel */
-	if (dma_init(chan)) {
+	err = dma_init(chan);
+	if (err) {
 		dev_err(xdev->dev, "Reset channel failed\n");
-		goto out_free_chan;
+		return err;
 	}
 
 
@@ -1051,11 +1050,13 @@ static int xilinx_dma_chan_probe(struct xilinx_dma_device *xdev,
 
 	/* find the IRQ line, if it exists in the device tree */
 	chan->irq = irq_of_parse_and_map(node, 0);
-	err = request_irq(chan->irq, dma_intr_handler, IRQF_SHARED,
+	err = devm_request_irq(xdev->dev, chan->irq, dma_intr_handler,
+				IRQF_SHARED,
 				"xilinx-dma-controller", chan);
 	if (err) {
 		dev_err(xdev->dev, "unable to request IRQ\n");
-		goto out_free_irq;
+		irq_dispose_mapping(chan->irq);
+		return err;
 	}
 
 	/* Add the channel to DMA device channel list */
@@ -1063,29 +1064,22 @@ static int xilinx_dma_chan_probe(struct xilinx_dma_device *xdev,
 	xdev->common.chancnt++;
 
 	return 0;
-
-out_free_irq:
-	irq_dispose_mapping(chan->irq);
-out_free_chan:
-	kfree(chan);
-out_return:
-	return err;
 }
 
 static int xilinx_dma_of_probe(struct platform_device *pdev)
 {
 	struct xilinx_dma_device *xdev;
 	struct device_node *child, *node;
-	int err;
 	const __be32 *value;
+	struct resource *res;
 
 	dev_info(&pdev->dev, "Probing xilinx axi dma engine\n");
 
-	xdev = kzalloc(sizeof(struct xilinx_dma_device), GFP_KERNEL);
+	xdev = devm_kzalloc(&pdev->dev, sizeof(struct xilinx_dma_device),
+				GFP_KERNEL);
 	if (!xdev) {
 		dev_err(&pdev->dev, "Not enough memory for device\n");
-		err = -ENOMEM;
-		goto out_return;
+		return -ENOMEM;
 	}
 
 	xdev->dev = &(pdev->dev);
@@ -1095,11 +1089,11 @@ static int xilinx_dma_of_probe(struct platform_device *pdev)
 	xdev->feature = 0;
 
 	/* iomap registers */
-	xdev->regs = of_iomap(node, 0);
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	xdev->regs = devm_ioremap_resource(&pdev->dev, res);
 	if (!xdev->regs) {
 		dev_err(&pdev->dev, "unable to iomap registers\n");
-		err = -ENOMEM;
-		goto out_free_xdev;
+		return -ENOMEM;
 	}
 
 	/*
@@ -1141,12 +1135,6 @@ static int xilinx_dma_of_probe(struct platform_device *pdev)
 	dma_async_device_register(&xdev->common);
 
 	return 0;
-
-out_free_xdev:
-	kfree(xdev);
-
-out_return:
-	return err;
 }
 
 static int xilinx_dma_of_remove(struct platform_device *pdev)
@@ -1162,9 +1150,6 @@ static int xilinx_dma_of_remove(struct platform_device *pdev)
 			xilinx_dma_chan_remove(xdev->chan[i]);
 	}
 
-	iounmap(xdev->regs);
-	kfree(xdev);
-
 	return 0;
 }
 
-- 
1.7.5.4

