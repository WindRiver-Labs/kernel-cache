From f3d572a46a2f9b3ed17cfd52dccaf16f119b3cbe Mon Sep 17 00:00:00 2001
From: Chao Yu <yuchao0@huawei.com>
Date: Fri, 22 Jun 2018 14:27:50 +0800
Subject: [PATCH] f2fs: fix race condition in between free nid
 allocator/initializer

commit 30a61ddf8117c26ac5b295e1233eaa9629a94ca3 upstream

In below concurrent case, allocated nid can be loaded into free nid cache
and be allocated again.

Thread A                            Thread B
- f2fs_create
 - f2fs_new_inode
  - alloc_nid
   - __insert_nid_to_list(ALLOC_NID_LIST)
                                    - f2fs_balance_fs_bg
                                     - build_free_nids
                                      - __build_free_nids
                                       - scan_nat_page
                                        - add_free_nid
                                         - __lookup_nat_cache
 - f2fs_add_link
  - init_inode_metadata
   - new_inode_page
    - new_node_page
     - set_node_addr
 - alloc_nid_done
  - __remove_nid_from_list(ALLOC_NID_LIST)
                                         - __insert_nid_to_list(FREE_NID_LIST)

This patch makes nat cache lookup and free nid list operation being atomical
to avoid this race condition.

Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
Signed-off-by: Chao Yu <yuchao0@huawei.com>
Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
[Change or drop some codes to apply it into our tree.]
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 fs/f2fs/node.c |   74 +++++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 55 insertions(+), 19 deletions(-)

diff --git a/fs/f2fs/node.c b/fs/f2fs/node.c
index 8ab0cf1..1c48b1c 100644
--- a/fs/f2fs/node.c
+++ b/fs/f2fs/node.c
@@ -1413,9 +1413,11 @@ static void __del_from_free_nid_list(struct f2fs_nm_info *nm_i,
 static int add_free_nid(struct f2fs_sb_info *sbi, nid_t nid, bool build)
 {
 	struct f2fs_nm_info *nm_i = NM_I(sbi);
-	struct free_nid *i;
+	struct free_nid *i, *e;
 	struct nat_entry *ne;
 	bool allocated = false;
+	int err = -EINVAL;
+	int ret = 0;
 
 	if (!available_free_memory(sbi, FREE_NIDS))
 		return -1;
@@ -1424,40 +1426,74 @@ static int add_free_nid(struct f2fs_sb_info *sbi, nid_t nid, bool build)
 	if (unlikely(nid == 0))
 		return 0;
 
+	i = f2fs_kmem_cache_alloc(free_nid_slab, GFP_NOFS);
+	i->nid = nid;
+	i->state = NID_NEW;
+
+	if (radix_tree_preload(GFP_NOFS)) {
+		goto err;
+	}
+
+	spin_lock(&nm_i->free_nid_list_lock);
+
 	if (build) {
-		/* do not add allocated nids */
+		/*
+		 *   Thread A             Thread B
+		 *  - f2fs_create
+		 *   - f2fs_new_inode
+		 *    - alloc_nid
+		 *     - __insert_nid_to_list(ALLOC_NID_LIST)
+		 *                     - f2fs_balance_fs_bg
+		 *                      - build_free_nids
+		 *                       - __build_free_nids
+		 *                        - scan_nat_page
+		 *                         - add_free_nid
+		 *                          - __lookup_nat_cache
+		 *  - f2fs_add_link
+		 *   - init_inode_metadata
+		 *    - new_inode_page
+		 *     - new_node_page
+		 *      - set_node_addr
+		 *  - alloc_nid_done
+		 *   - __remove_nid_from_list(ALLOC_NID_LIST)
+		 *                         - __insert_nid_to_list(FREE_NID_LIST)
+		 */
 		down_read(&nm_i->nat_tree_lock);
 		ne = __lookup_nat_cache(nm_i, nid);
-		if (ne &&
-			(!get_nat_flag(ne, IS_CHECKPOINTED) ||
+		if (ne && (!get_nat_flag(ne, IS_CHECKPOINTED) ||
 				nat_get_blkaddr(ne) != NULL_ADDR))
 			allocated = true;
 		up_read(&nm_i->nat_tree_lock);
 		if (allocated)
-			return 0;
-	}
-
-	i = f2fs_kmem_cache_alloc(free_nid_slab, GFP_NOFS);
-	i->nid = nid;
-	i->state = NID_NEW;
+			goto err_out;
 
-	if (radix_tree_preload(GFP_NOFS)) {
-		kmem_cache_free(free_nid_slab, i);
-		return 0;
+		e = __lookup_free_nid_list(nm_i, nid);
+		if (e) {
+			if (e->state == NID_NEW)
+				ret = 1;
+			goto err_out;
+		}
 	}
 
-	spin_lock(&nm_i->free_nid_list_lock);
 	if (radix_tree_insert(&nm_i->free_nid_root, i->nid, i)) {
-		spin_unlock(&nm_i->free_nid_list_lock);
-		radix_tree_preload_end();
-		kmem_cache_free(free_nid_slab, i);
-		return 0;
+		goto err_out;
 	}
+
+	ret = 1;
+	err = 0;
+
 	list_add_tail(&i->list, &nm_i->free_nid_list);
 	nm_i->fcnt++;
+
+err_out:
 	spin_unlock(&nm_i->free_nid_list_lock);
 	radix_tree_preload_end();
-	return 1;
+
+err:
+	if (err)
+		kmem_cache_free(free_nid_slab, i);
+
+	return ret;
 }
 
 static void remove_free_nid(struct f2fs_nm_info *nm_i, nid_t nid)
-- 
1.7.9.5

