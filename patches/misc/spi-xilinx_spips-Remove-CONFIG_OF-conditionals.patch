From 5e9199832dbcf25e5cd0b39e45d6e772bb2722a7 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Fri, 16 Nov 2012 18:17:35 -0800
Subject: [PATCH 217/628] spi: xilinx_spips: Remove CONFIG_OF conditionals

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit e3c0572743c105af7f4bd656022dd21bdf1c2404

CONFIG_OF is mandatory for the Zynq platform. For this reason
all conditional compiling regarding this option can be removed.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/spi/Kconfig         |    1 +
 drivers/spi/spi-xilinx-ps.c |   27 +--------------------------
 2 files changed, 2 insertions(+), 26 deletions(-)

diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index 09b54a1..b9c1311 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -488,6 +488,7 @@ config SPI_XILINX_PS_QSPI
 
 config SPI_XILINX_PS_SPI
 	tristate "Xilinx PS SPI controller"
+	depends on ARCH_ZYNQ
 	depends on SPI_MASTER && EXPERIMENTAL
 	help
 	  This selects the PS SPI controller master driver from the Xilinx.
diff --git a/drivers/spi/spi-xilinx-ps.c b/drivers/spi/spi-xilinx-ps.c
index 472b8cb..756ce28 100644
--- a/drivers/spi/spi-xilinx-ps.c
+++ b/drivers/spi/spi-xilinx-ps.c
@@ -644,11 +644,7 @@ static int __devinit xspips_probe(struct platform_device *dev)
 	struct spi_master *master;
 	struct xspips *xspi;
 	struct resource *r;
-#ifdef CONFIG_OF
 	const unsigned int *prop;
-#else
-	struct xspi_platform_data *platform_info;
-#endif
 
 	master = spi_alloc_master(&dev->dev, sizeof(struct xspips));
 	if (master == NULL)
@@ -658,14 +654,6 @@ static int __devinit xspips_probe(struct platform_device *dev)
 	master->dev.of_node = dev->dev.of_node;
 	platform_set_drvdata(dev, master);
 
-#ifndef CONFIG_OF
-	platform_info = dev->dev.platform_data;
-	if (platform_info == NULL) {
-		ret = -ENODEV;
-		dev_err(&dev->dev, "platform data not available\n");
-		goto put_master;
-	}
-#endif
 	r = platform_get_resource(dev, IORESOURCE_MEM, 0);
 	if (r == NULL) {
 		ret = -ENODEV;
@@ -706,7 +694,6 @@ static int __devinit xspips_probe(struct platform_device *dev)
 
 	init_completion(&xspi->done);
 
-#ifdef CONFIG_OF
 	prop = of_get_property(dev->dev.of_node, "bus-num", NULL);
 	if (prop)
 		master->bus_num = be32_to_cpup(prop);
@@ -724,14 +711,9 @@ static int __devinit xspips_probe(struct platform_device *dev)
 		dev_err(&dev->dev, "couldn't determine num-chip-select\n");
 		goto free_irq;
 	}
-#else
-	master->bus_num = platform_info->bus_num;
-	master->num_chipselect = platform_info->num_chipselect;
-#endif
 	master->setup = xspips_setup;
 	master->transfer = xspips_transfer;
 
-#ifdef CONFIG_OF
 	prop = of_get_property(dev->dev.of_node, "speed-hz", NULL);
 	if (prop) {
 		xspi->input_clk_hz = be32_to_cpup(prop);
@@ -741,10 +723,7 @@ static int __devinit xspips_probe(struct platform_device *dev)
 		dev_err(&dev->dev, "couldn't determine speed-hz\n");
 		goto free_irq;
 	}
-#else
-	xspi->input_clk_hz = platform_info->speed_hz;
-	xspi->speed_hz = platform_info->speed_hz / 2;
-#endif
+
 	xspi->dev_busy = 0;
 
 	INIT_LIST_HEAD(&xspi->queue);
@@ -897,15 +876,11 @@ static int xspips_resume(struct platform_device *dev)
 /* Work with hotplug and coldplug */
 MODULE_ALIAS("platform:" XSPIPS_NAME);
 
-#ifdef CONFIG_OF
 static struct of_device_id xspips_of_match[] __devinitdata = {
 	{ .compatible = "xlnx,ps7-spi-1.00.a", },
 	{ /* end of table */}
 };
 MODULE_DEVICE_TABLE(of, xspips_of_match);
-#else
-#define xspips_of_match NULL
-#endif /* CONFIG_OF */
 
 /*
  * xspips_driver - This structure defines the SPI subsystem platform driver
-- 
1.7.5.4

