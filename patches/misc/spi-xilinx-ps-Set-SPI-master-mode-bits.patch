From a0eec9f8a2eebfe788d48544c669a2429ac68d8e Mon Sep 17 00:00:00 2001
From: Lars-Peter Clausen <lars@metafoo.de>
Date: Tue, 26 Feb 2013 14:06:14 +0100
Subject: [PATCH 237/628] spi: xilinx-ps: Set SPI master mode bits

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 34f34ca54c41857498ec33c7775fbc84896704e5

Properly setup master->mode_bits to the supported modes of the device. The SPI
core will check if a master can support the mode requested by a SPI slave
device. If mode_bits is not initialized the core will error out on all modes but
SPI_MODE_0.

Also get rid of the mode superfluous checks in xspips_setup_transfer() and
xspips_setup(). The SPI core will take care of making sure that this master can
support the salve device.

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/spi/spi-xilinx-ps.c |   17 ++---------------
 1 files changed, 2 insertions(+), 15 deletions(-)

diff --git a/drivers/spi/spi-xilinx-ps.c b/drivers/spi/spi-xilinx-ps.c
index 6db9496..71a6294 100644
--- a/drivers/spi/spi-xilinx-ps.c
+++ b/drivers/spi/spi-xilinx-ps.c
@@ -80,11 +80,6 @@
 #define XSPIPS_ER_ENABLE_MASK	0x00000001 /* SPI Enable Bit Mask */
 
 /*
- * The spi->mode bits understood by this driver
- */
-#define MODEBITS		(SPI_CPOL | SPI_CPHA)
-
-/*
  * Definitions for the status of queue
  */
 #define XSPIPS_QUEUE_STOPPED	0
@@ -226,12 +221,6 @@ static int xspips_setup_transfer(struct spi_device *spi,
 			transfer->bits_per_word : spi->bits_per_word;
 	req_hz = (transfer) ? transfer->speed_hz : spi->max_speed_hz;
 
-	if (spi->mode & ~MODEBITS) {
-		dev_err(&spi->dev, "%s, unsupported mode bits %x\n",
-			__func__, spi->mode & ~MODEBITS);
-		return -EINVAL;
-	}
-
 	if (bits_per_word != 8) {
 		dev_err(&spi->dev, "%s, unsupported bits per word %x\n",
 			__func__, spi->bits_per_word);
@@ -268,7 +257,7 @@ static int xspips_setup_transfer(struct spi_device *spi,
 	spin_unlock_irqrestore(&xspi->ctrl_reg_lock, flags);
 
 	dev_dbg(&spi->dev, "%s, mode %d, %u bits/w, %u clock speed\n",
-		__func__, spi->mode & MODEBITS, spi->bits_per_word,
+		__func__, spi->mode, spi->bits_per_word,
 		xspi->speed_hz);
 
 	return 0;
@@ -285,9 +274,6 @@ static int xspips_setup_transfer(struct spi_device *spi,
  **/
 static int xspips_setup(struct spi_device *spi)
 {
-	if ((spi->mode & SPI_LSB_FIRST) != 0)
-		return -EINVAL;
-
 	if (!spi->max_speed_hz)
 		return -EINVAL;
 
@@ -775,6 +761,7 @@ static int __devinit xspips_probe(struct platform_device *dev)
 	}
 	master->setup = xspips_setup;
 	master->transfer = xspips_transfer;
+	master->mode_bits = SPI_CPOL | SPI_CPHA;
 
 	xspi->speed_hz = clk_get_rate(xspi->devclk) / 2;
 
-- 
1.7.5.4

