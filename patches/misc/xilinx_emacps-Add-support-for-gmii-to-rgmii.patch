From 3686c89ee93a00cd700fc3a3a8091948887d4b33 Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Wed, 3 Apr 2013 23:06:59 +0530
Subject: [PATCH 375/628] xilinx_emacps: Add support for gmii to rgmii

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 4abdc1f7d3b3e52d9d7dacf7946ea48c03ee4a5a

This patch adds support for the gmii to rgmii converter IP in the PL.
This Xilinx IP appears on the mdio interface along with the regular PHY.
It possesses a PHY address to be accessible on the mdio bus. The IP appears
in the device tree under the mdio node. This patch reads the mdio node
and on finding the presence of this converter takes appropriate
action assuming it as a dummy PHY. After the regular PHY autoneg, the
driver writes the spped/duplex settings to the appropriate register
in the dummy PHY to ensure proper gmii to rgmii conversion.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   49 +++++++++++++++++++++++++-
 1 files changed, 47 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index 8a7c19e..96ffb55 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -463,6 +463,12 @@ MDC_DIV_64, MDC_DIV_96, MDC_DIV_128, MDC_DIV_224 };
 #define XEMACPS_RXBUF_ADD_MASK		0xFFFFFFFC /* Mask for address */
 
 #define XEAMCPS_GEN_PURPOSE_TIMER_LOAD	100 /* timeout value is msecs */
+
+#define XEMACPS_GMII2RGMII_SPEED1000_FD		0x140
+#define XEMACPS_GMII2RGMII_SPEED100_FD		0x2100
+#define XEMACPS_GMII2RGMII_SPEED10_FD		0x100
+#define XEMACPS_GMII2RGMII_REG_NUM			0x10
+
 #define BOARD_TYPE_ZYNQ			0x01
 #define BOARD_TYPE_PEEP			0x02
 
@@ -500,6 +506,7 @@ struct net_local {
 	struct notifier_block clk_rate_change_nb;
 
 	struct device_node *phy_node;
+	struct device_node *gmii2rgmii_phy_node;
 	struct ring_info *tx_skb;
 	struct ring_info *rx_skb;
 
@@ -536,6 +543,7 @@ struct net_local {
 
 	struct mii_bus *mii_bus;
 	struct phy_device *phy_dev;
+	struct phy_device *gmii2rgmii_phy_dev;
 	phy_interface_t phy_interface;
 	unsigned int link;
 	unsigned int speed;
@@ -703,6 +711,7 @@ static void xemacps_adjust_link(struct net_device *ndev)
 {
 	struct net_local *lp = netdev_priv(ndev);
 	struct phy_device *phydev = lp->phy_dev;
+	struct phy_device *gmii2rgmii_phydev = lp->gmii2rgmii_phy_dev;
 	int status_change = 0;
 	u32 regval;
 
@@ -738,7 +747,24 @@ static void xemacps_adjust_link(struct net_device *ndev)
 			}
 
 			xemacps_write(lp->baseaddr, XEMACPS_NWCFG_OFFSET,
-				regval);
+			regval);
+
+			if (regval & XEMACPS_NWCFG_1000_MASK) {
+				xemacps_mdio_write(lp->mii_bus,
+				gmii2rgmii_phydev->addr,
+				XEMACPS_GMII2RGMII_REG_NUM,
+				XEMACPS_GMII2RGMII_SPEED1000_FD);
+			} else if (regval & XEMACPS_NWCFG_100_MASK) {
+				xemacps_mdio_write(lp->mii_bus,
+				gmii2rgmii_phydev->addr,
+				XEMACPS_GMII2RGMII_REG_NUM,
+				XEMACPS_GMII2RGMII_SPEED100_FD);
+			} else {
+				xemacps_mdio_write(lp->mii_bus,
+				gmii2rgmii_phydev->addr,
+				XEMACPS_GMII2RGMII_REG_NUM,
+				XEMACPS_GMII2RGMII_SPEED10_FD);
+			}
 
 			lp->speed = phydev->speed;
 			lp->duplex = phydev->duplex;
@@ -840,6 +866,20 @@ static int xemacps_mii_probe(struct net_device *ndev)
 	dev_dbg(&lp->pdev->dev, "attach [%s] phy driver\n",
 			lp->phy_dev->drv->name);
 
+	if (lp->gmii2rgmii_phy_node) {
+		phydev = of_phy_connect(lp->ndev,
+					lp->gmii2rgmii_phy_node,
+					NULL,
+					0, 0);
+		if (!phydev) {
+			dev_err(&lp->pdev->dev, "%s: no gmii to rgmii converter found\n",
+			ndev->name);
+			return -1;
+		}
+	}
+
+	lp->gmii2rgmii_phy_dev = phydev;
+
 	return 0;
 }
 
@@ -1871,7 +1911,10 @@ static int xemacps_close(struct net_device *ndev)
 	if (lp->phy_dev) {
 		if (lp->board_type == BOARD_TYPE_ZYNQ)
 			phy_disconnect(lp->phy_dev);
-		}
+	}
+	if (lp->gmii2rgmii_phy_node)
+		phy_disconnect(lp->gmii2rgmii_phy_dev);
+
 	xemacps_descriptor_free(lp);
 
 	pm_runtime_put(&lp->pdev->dev);
@@ -2684,6 +2727,8 @@ static int xemacps_probe(struct platform_device *pdev)
 
 	lp->phy_node = of_parse_phandle(lp->pdev->dev.of_node,
 						"phy-handle", 0);
+	lp->gmii2rgmii_phy_node = of_parse_phandle(lp->pdev->dev.of_node,
+						"gmii2rgmii-phy-handle", 0);
 	rc = of_get_phy_mode(lp->pdev->dev.of_node);
 	if (rc < 0) {
 		dev_err(&lp->pdev->dev, "error in getting phy i/f\n");
-- 
1.7.5.4

