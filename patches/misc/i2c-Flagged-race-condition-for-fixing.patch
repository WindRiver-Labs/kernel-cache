From 8e63203b8b7cbff1c068b7ccf5a4bba6628a9dc1 Mon Sep 17 00:00:00 2001
From: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Date: Wed, 7 Nov 2012 10:31:58 +1000
Subject: [PATCH 301/628] i2c: Flagged race condition for fixing.

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 2c261ea0c32f96ff6c7648c22bfb951597efc213

The I2C controller read-modify-writes the XFER_SIZE register when the DATA
interrupt occurs. If my understanding of the hardware operation is correct, the
hardware is still recieving data at this time so this register is not stable
at this point. The read modify write will update the new value based on some
arithmetic done on the old value which will cause the hardware to try and read
an extra byte.

This bug is a freak occurance, so you cant replicate it (at least on real
hardware), but with a large volume of I2C transfers with a busy kernel you will
get a non trivial MTTF.

See comments added to code.

Signed-off-by: Peter Crosthwaite <peter.crosthwaite@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/i2c/busses/i2c-xilinx_ps.c |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/drivers/i2c/busses/i2c-xilinx_ps.c b/drivers/i2c/busses/i2c-xilinx_ps.c
index 98956af..e4df3f5 100644
--- a/drivers/i2c/busses/i2c-xilinx_ps.c
+++ b/drivers/i2c/busses/i2c-xilinx_ps.c
@@ -187,6 +187,10 @@ static irqreturn_t xi2cps_isr(int irq, void *ptr)
 		 * Calculate received bytes and update the receive count.
 		 */
 		if ((id->recv_count) > XI2CPS_FIFO_DEPTH) {
+			/* FIXME: snapshotting this value is a race condition as
+			 * the hardware is still recieving bytes at this time.
+			 * The number of bytes recieved (N) is read here ....
+			 */
 			bytes_to_recv = (XI2CPS_FIFO_DEPTH + 1) -
 				xi2cps_readreg(XI2CPS_XFER_SIZE_OFFSET);
 			id->recv_count -= bytes_to_recv;
@@ -196,10 +200,20 @@ static irqreturn_t xi2cps_isr(int irq, void *ptr)
 		 * count is less than FIFO size then clear hold bit if there
 		 * are no further messages to be processed
 		 */
+			/* ... but supposed one more byte is read by the
+			 * hardware by this time ....
+			 */
 			if (id->recv_count > XI2CPS_FIFO_DEPTH)
 				xi2cps_writereg(XI2CPS_FIFO_DEPTH + 1,
 						XI2CPS_XFER_SIZE_OFFSET);
 			else {
+				/* Then the number bytes still to recv (M) is
+				 * updated based on old value of tx XFER_SIZE.
+				 * Hardware will recieve a total of N + M or
+				 * N + M + 1 bytes depending on whether or not
+				 * the hardware gets an extra byte between the
+				 * snapshot and here.
+				 */
 				xi2cps_writereg(id->recv_count,
 						XI2CPS_XFER_SIZE_OFFSET);
 				if (id->bus_hold_flag == 0)
-- 
1.7.5.4

