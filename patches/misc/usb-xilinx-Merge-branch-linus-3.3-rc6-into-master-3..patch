From 6c2e74c3f9d00bcc2c25ec3d1b24f4b5cad89693 Mon Sep 17 00:00:00 2001
From: John Linn <john.linn@xilinx.com>
Date: Tue, 20 Mar 2012 10:12:06 -0700
Subject: [PATCH 471/628] usb: xilinx: Merge branch 'linus-3.3-rc6' into
 master-3.3-rc6

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 7c377cf6 Merge branch 'linus-3.3-rc6' into master-3.3-rc6

Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_usbps_udc.c |   32 +++++++++++++++++++++++---------
 drivers/usb/host/xusbps-dr-of.c       |    3 +++
 2 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index 32d8dd0..becd05b 100755
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -7,7 +7,7 @@
  * to support Xilinx PS USB controller.
  *
  * This program is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 as published by
+ * under the terms of the GNU General Public License version 2 as published bydrive
  * the Free Software Foundation; either version 2 of the License, or (at your
  * option) any later version.
  *
@@ -1118,6 +1118,10 @@ static int xusbps_pullup(struct usb_gadget *gadget, int is_on)
 	return 0;
 }
 
+static int xusbps_start(struct usb_gadget_driver *driver,
+		int (*bind)(struct usb_gadget *));
+static int xusbps_stop(struct usb_gadget_driver *driver);
+
 /* defined in gadget.h */
 static struct usb_gadget_ops xusbps_gadget_ops = {
 	.get_frame = xusbps_get_frame,
@@ -1126,6 +1130,8 @@ static struct usb_gadget_ops xusbps_gadget_ops = {
 	.vbus_session = xusbps_vbus_session,
 	.vbus_draw = xusbps_vbus_draw,
 	.pullup = xusbps_pullup,
+	.start = xusbps_start,
+	.stop = xusbps_stop,
 };
 
 /* Set protocol stall on ep0, protocol stall will automatically be cleared
@@ -1856,7 +1862,7 @@ static int xusbps_udc_stop_peripheral(struct otg_transceiver  *otg)
  * Hook to gadget drivers
  * Called by initialization code of gadget drivers
 *----------------------------------------------------------------*/
-int usb_gadget_probe_driver(struct usb_gadget_driver *driver,
+int xusbps_start(struct usb_gadget_driver *driver,
 		int (*bind)(struct usb_gadget *))
 {
 	int retval = -ENODEV;
@@ -1865,8 +1871,8 @@ int usb_gadget_probe_driver(struct usb_gadget_driver *driver,
 	if (!udc_controller)
 		return -ENODEV;
 
-	if (!driver || (driver->speed != USB_SPEED_FULL
-				&& driver->speed != USB_SPEED_HIGH)
+	if (!driver || (driver->max_speed != USB_SPEED_FULL
+				&& driver->max_speed != USB_SPEED_HIGH)
 			|| !bind || !driver->disconnect || !driver->setup)
 		return -EINVAL;
 
@@ -1943,10 +1949,10 @@ out:
 		       retval);
 	return retval;
 }
-EXPORT_SYMBOL(usb_gadget_probe_driver);
+EXPORT_SYMBOL(xusbps_start);
 
 /* Disconnect from gadget driver */
-int usb_gadget_unregister_driver(struct usb_gadget_driver *driver)
+int xusbps_stop(struct usb_gadget_driver *driver)
 {
 	struct xusbps_ep *loop_ep;
 	unsigned long flags;
@@ -1992,7 +1998,7 @@ int usb_gadget_unregister_driver(struct usb_gadget_driver *driver)
 	       driver->driver.name);
 	return 0;
 }
-EXPORT_SYMBOL(usb_gadget_unregister_driver);
+EXPORT_SYMBOL(xusbps_stop);
 
 /*-------------------------------------------------------------------------
 		PROC File System Support
@@ -2447,10 +2453,9 @@ static int __init xusbps_udc_probe(struct platform_device *pdev)
 
 	/* Setup gadget structure */
 	udc_controller->gadget.ops = &xusbps_gadget_ops;
-	udc_controller->gadget.is_dualspeed = 1;
+	udc_controller->gadget.max_speed = USB_SPEED_HIGH;
 	udc_controller->gadget.ep0 = &udc_controller->eps[0].ep;
 	INIT_LIST_HEAD(&udc_controller->gadget.ep_list);
-	udc_controller->gadget.speed = USB_SPEED_UNKNOWN;
 	udc_controller->gadget.name = driver_name;
 #ifdef CONFIG_USB_XUSBPS_OTG
 	udc_controller->gadget.is_otg = (pdata->otg != 0);
@@ -2494,9 +2499,16 @@ static int __init xusbps_udc_probe(struct platform_device *pdev)
 		ret = -ENOMEM;
 		goto err_unregister;
 	}
+
+	ret = usb_add_gadget_udc(&pdev->dev, &udc_controller->gadget);
+	if (ret)
+		goto err_del_udc;
+
 	create_proc_file();
 	return 0;
 
+err_del_udc:
+	dma_pool_destroy(udc_controller->td_pool);
 err_unregister:
 	device_unregister(&udc_controller->gadget.dev);
 err_free_irq:
@@ -2518,6 +2530,8 @@ static int __exit xusbps_udc_remove(struct platform_device *pdev)
 
 	if (!udc_controller)
 		return -ENODEV;
+
+	usb_del_gadget_udc(&udc_controller->gadget);
 	udc_controller->done = &done;
 
 	xusbps_udc_clk_release();
diff --git a/drivers/usb/host/xusbps-dr-of.c b/drivers/usb/host/xusbps-dr-of.c
index 9a4d57e..efda09a 100644
--- a/drivers/usb/host/xusbps-dr-of.c
+++ b/drivers/usb/host/xusbps-dr-of.c
@@ -25,6 +25,9 @@
 #include <linux/io.h>
 #include <linux/of_platform.h>
 #include <linux/clk.h>
+#include <linux/string.h>
+#include <linux/export.h>
+#include <linux/module.h>
 
 static u64 dma_mask = 0xFFFFFFF0;
 
-- 
1.7.5.4

