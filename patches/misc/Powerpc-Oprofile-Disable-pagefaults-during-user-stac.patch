From 49f26177b7aa281ff33001517692c1156c19f8af Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Tue, 4 Mar 2014 06:40:02 +0000
Subject: [PATCH] Powerpc/Oprofile:Disable pagefaults during user stack read

A page fault occurred during reading user stack in oprofile backtrace
would lead following calltrace, for the kernel in an interrupt disabled
context:

WARNING: at linux/kernel/smp.c:382
Modules linked in:
CPU: 4 PID: 1454 Comm: main_test.sh Not tainted 3.10.19-WR6.0.0.3_cgl #2
task: c0000000f6ab60c0 ti: c0000000f6fcc000 task.ti: c0000000f6fcc000
NIP: c0000000000d7294 LR: c0000000000d71a0 CTR: c00000000012a840
REGS: c0000000f6fcf040 TRAP: 0700 Not tainted
MSR: 0000000080021000 <CE,ME> CR: 48222442 XER: 00000000
SOFTE: 0

GPR00: c0000000000d71a0 c0000000f6fcf2c0 c000000000fda780 0000000000000004
GPR04: c000000000f15bb8 c0000000f6fcf410 0000000000000001 0000000000000000
GPR08: c000000000ffa780 0000000000000001 c000000000eba780 0000000000000000
GPR12: 0000000088222448 c00000000ffff000 000000001012f788 000000000fff16d0
GPR16: 0000000000000000 0000000000000018 0000000000000001 00000000ffc8e560
GPR20: c0000000f6fcf410 c000000000f15bb8 c0000000f684da10 c0000000f746e900
GPR24: c0000000f74793f0 0000000000000028 0000000000000000 0000000000000000
GPR28: c0000000f746ec10 00000000ffc8f270 c000000000fe7730 0000000000000004
NIP [c0000000000d7294] .smp_call_function_many+0x154/0x420
LR [c0000000000d71a0] .smp_call_function_many+0x60/0x420
Call Trace:
[c0000000f6fcf2c0] [c0000000000d71a0] .smp_call_function_many+0x60/0x420 (unreliable)
[c0000000f6fcf3a0] [c00000000002fee0] .__flush_tlb_page+0x120/0x1a0
[c0000000f6fcf460] [c00000000002dff8] .ptep_set_access_flags+0xb8/0x180
[c0000000f6fcf500] [c0000000001a2170] .handle_pte_fault+0x300/0xa00
[c0000000f6fcf5e0] [c000000000b4a91c] .do_page_fault+0x46c/0x860
[c0000000f6fcf810] [c00000000001ce90] storage_fault_common+0x20/0x44
    Exception: 301 at .op_powerpc_backtrace+0x130/0x240
    LR = .op_powerpc_backtrace+0x154/0x240
[c0000000f6fcfbc0] [c0000000009aa050] .oprofile_add_ext_sample+0xf0/0x120
[c0000000f6fcfc70] [c0000000009adc54] .fsl_emb_handle_interrupt+0x254/0x2d0
[c0000000f6fcfd30] [c0000000009ad084] .op_handle_interrupt+0x44/0x60
[c0000000f6fcfdb0] [c000000000016174] .performance_monitor_exception+0x74/0x90

To prevent this, we need disable pagefaults during reading user stack in oprofile
backtrace.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 arch/powerpc/oprofile/backtrace.c |    6 ++++--
 1 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/oprofile/backtrace.c b/arch/powerpc/oprofile/backtrace.c
index f75301f..cae8ee7 100644
--- a/arch/powerpc/oprofile/backtrace.c
+++ b/arch/powerpc/oprofile/backtrace.c
@@ -10,7 +10,7 @@
 #include <linux/oprofile.h>
 #include <linux/sched.h>
 #include <asm/processor.h>
-#include <asm/uaccess.h>
+#include <linux/uaccess.h>
 #include <asm/compat.h>
 
 #define STACK_SP(STACK)		*(STACK)
@@ -104,6 +104,7 @@ void op_powerpc_backtrace(struct pt_regs * const regs, unsigned int depth)
 			first_frame = 0;
 		}
 	} else {
+		pagefault_disable();
 #ifdef CONFIG_PPC64
 		if (!is_32bit_task()) {
 			while (depth--) {
@@ -112,7 +113,7 @@ void op_powerpc_backtrace(struct pt_regs * const regs, unsigned int depth)
 					break;
 				first_frame = 0;
 			}
-
+			pagefault_enable();
 			return;
 		}
 #endif
@@ -123,5 +124,6 @@ void op_powerpc_backtrace(struct pt_regs * const regs, unsigned int depth)
 				break;
 			first_frame = 0;
 		}
+		pagefault_enable();
 	}
 }
-- 
1.7.5.4

