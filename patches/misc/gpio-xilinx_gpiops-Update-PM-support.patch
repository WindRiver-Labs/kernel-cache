From 660736c4ba56f0b6a6a74f3d26ea586251b7ff67 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Thu, 8 Nov 2012 18:32:53 -0800
Subject: [PATCH 332/628] gpio: xilinx_gpiops: Update PM support

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 937c54329a8072dab07df8dc9c78b9f68c937a9f

- The PM state of the device was incorrectly initialized to be
active in the probe function.
- Use the sync variants of the pm_runtime_(get|put) functions.
- Provide different functions for PM_SLEEP and PM_RUNTIME

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Acked: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/gpio/gpio-xilinxps.c |   51 ++++++++++++++++++++++++++++++++----------
 1 files changed, 39 insertions(+), 12 deletions(-)

diff --git a/drivers/gpio/gpio-xilinxps.c b/drivers/gpio/gpio-xilinxps.c
index 787b816..eb20c06 100644
--- a/drivers/gpio/gpio-xilinxps.c
+++ b/drivers/gpio/gpio-xilinxps.c
@@ -432,7 +432,7 @@ void xgpiops_irqhandler(unsigned int irq, struct irq_desc *desc)
 	chip->irq_unmask(irq_data);
 }
 
-#if defined(CONFIG_PM) && defined(CONFIG_COMMON_CLK)
+#if defined(CONFIG_PM_SLEEP) && defined(CONFIG_COMMON_CLK)
 static int xgpiops_suspend(struct device *_dev)
 {
 	struct platform_device *pdev = container_of(_dev,
@@ -455,8 +455,31 @@ static int xgpiops_resume(struct device *_dev)
 
 	return 0;
 }
+#endif
+
+#if defined(CONFIG_PM_RUNTIME) && defined(CONFIG_COMMON_CLK)
+static int xgpiops_runtime_suspend(struct device *_dev)
+{
+	struct platform_device *pdev = container_of(_dev,
+			struct platform_device, dev);
+	struct xgpiops *gpio = platform_get_drvdata(pdev);
+
+	clk_disable(gpio->clk);
+
+	return 0;
+}
+
+static int xgpiops_runtime_resume(struct device *_dev)
+{
+	struct platform_device *pdev = container_of(_dev,
+			struct platform_device, dev);
+	struct xgpiops *gpio = platform_get_drvdata(pdev);
+
+	return clk_enable(gpio->clk);
+
+	return 0;
+}
 
-#ifdef CONFIG_PM_RUNTIME
 static int xgpiops_idle(struct device *dev)
 {
 	return pm_schedule_suspend(dev, 1);
@@ -464,29 +487,31 @@ static int xgpiops_idle(struct device *dev)
 
 static int xgpiops_request(struct gpio_chip *chip, unsigned offset)
 {
-	return pm_runtime_get(chip->dev);
+	return pm_runtime_get_sync(chip->dev);
 }
 
 static void xgpiops_free(struct gpio_chip *chip, unsigned offset)
 {
-	pm_runtime_put(chip->dev);
+	pm_runtime_put_sync(chip->dev);
 }
 
-static UNIVERSAL_DEV_PM_OPS(xgpiops_dev_pm_ops, xgpiops_suspend, xgpiops_resume,
-		xgpiops_idle);
 #else /* ! CONFIG_PM_RUNTIME */
-static SIMPLE_DEV_PM_OPS(xgpiops_dev_pm_ops, xgpiops_suspend, xgpiops_resume);
 #define xgpiops_request	NULL
 #define xgpiops_free	NULL
 #endif /* ! CONFIG_PM_RUNTIME */
 
+#if (defined(CONFIG_PM_RUNTIME) || defined(CONFIG_PM_SLEEP)) && \
+	defined(CONFIG_COMMON_CLK)
+static const struct dev_pm_ops xgpiops_dev_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(xgpiops_suspend, xgpiops_resume)
+	SET_RUNTIME_PM_OPS(xgpiops_runtime_suspend, xgpiops_runtime_resume,
+			xgpiops_idle)
+};
 #define XGPIOPS_PM	(&xgpiops_dev_pm_ops)
 
-#else /*! CONFIG_PM && ! CONFIG_COMMON_CLK */
+#else /*! CONFIG_PM_RUNTIME || ! CONFIG_PM_SLEEP */
 #define XGPIOPS_PM	NULL
-#define xgpiops_request	NULL
-#define xgpiops_free	NULL
-#endif /*! CONFIG_PM && ! CONFIG_COMMON_CLK */
+#endif /*! CONFIG_PM_RUNTIME || ! CONFIG_COMMON_SLEEP */
 
 /**
  * xgpiops_probe - Initialization method for a xgpiops device
@@ -606,7 +631,9 @@ static int __init xgpiops_probe(struct platform_device *pdev)
 	irq_set_handler_data(irq_num, (void *)(XGPIOPS_IRQBASE));
 	irq_set_chained_handler(irq_num, xgpiops_irqhandler);
 
-	pm_runtime_set_active(&pdev->dev);
+#ifdef CONFIG_COMMON_CLK
+	clk_disable(gpio->clk);
+#endif
 	pm_runtime_enable(&pdev->dev);
 
 	return 0;
-- 
1.7.5.4

