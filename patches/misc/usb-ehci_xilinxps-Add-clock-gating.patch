From 13feb50be169f2ac95bfc95f865d91ac304d8ac9 Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Mon, 10 Dec 2012 13:55:55 -0800
Subject: [PATCH 505/628] usb: ehci_xilinxps: Add clock gating

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 8582ffab9ebd06e07d9805c05cd0d6768c4168b5

Clock management using the common clock framework is added.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/host/ehci-xilinx-usbps.c |   74 +++++++++++++++++++++++++++++++---
 1 files changed, 68 insertions(+), 6 deletions(-)

diff --git a/drivers/usb/host/ehci-xilinx-usbps.c b/drivers/usb/host/ehci-xilinx-usbps.c
index 1de5d9c..d5bfb24 100644
--- a/drivers/usb/host/ehci-xilinx-usbps.c
+++ b/drivers/usb/host/ehci-xilinx-usbps.c
@@ -16,6 +16,7 @@
  * Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+#include <linux/clk.h>
 #include <linux/kernel.h>
 #include <linux/types.h>
 #include <linux/delay.h>
@@ -91,6 +92,25 @@ static int ehci_xusbps_otg_stop_host(struct usb_phy *otg)
 }
 #endif
 
+static int xusbps_ehci_clk_notifier_cb(struct notifier_block *nb,
+		unsigned long event, void *data)
+{
+
+	switch (event) {
+	case PRE_RATE_CHANGE:
+		/* if a rate change is announced we need to check whether we can
+		 * maintain the current frequency by changing the clock
+		 * dividers.
+		 */
+		/* fall through */
+	case POST_RATE_CHANGE:
+		return NOTIFY_OK;
+	case ABORT_RATE_CHANGE:
+	default:
+		return NOTIFY_DONE;
+	}
+}
+
 /* configure so an HC device and id are always provided */
 /* always called with process context; sleeping is OK */
 
@@ -154,12 +174,35 @@ static int usb_hcd_xusbps_probe(const struct hc_driver *driver,
 
 	if (pdata->otg)
 		hcd->self.otg_port = 1;
+
+	if (pdata->irq == 53)
+		pdata->clk = clk_get_sys("USB0_APER", NULL);
+	else
+		pdata->clk = clk_get_sys("USB1_APER", NULL);
+	if (IS_ERR(pdata->clk)) {
+		dev_err(&pdev->dev, "APER clock not found.\n");
+		retval = PTR_ERR(pdata->clk);
+		goto err2;
+	}
+
+	retval = clk_prepare_enable(pdata->clk);
+	if (retval) {
+		dev_err(&pdev->dev, "Unable to enable APER clock.\n");
+		goto err_out_clk_put;
+	}
+
+	pdata->clk_rate_change_nb.notifier_call = xusbps_ehci_clk_notifier_cb;
+	pdata->clk_rate_change_nb.next = NULL;
+	if (clk_notifier_register(pdata->clk, &pdata->clk_rate_change_nb))
+		dev_warn(&pdev->dev, "Unable to register clock notifier.\n");
+
+
 	/*
 	 * do platform specific init: check the clock, grab/config pins, etc.
 	 */
 	if (pdata->init && pdata->init(pdev)) {
 		retval = -ENODEV;
-		goto err2;
+		goto err_out_clk_unreg_notif;
 	}
 
 #ifdef CONFIG_USB_XUSBPS_OTG
@@ -169,7 +212,7 @@ static int usb_hcd_xusbps_probe(const struct hc_driver *driver,
 		retval = otg_set_host(hcd->phy->otg,
 				&ehci_to_hcd(ehci)->self);
 		if (retval)
-			return retval;
+			goto err_out_clk_unreg_notif;
 		xotg = xceiv_to_xotg(hcd->phy);
 		ehci->start_hnp = ehci_xusbps_start_hnp;
 		xotg->start_host = ehci_xusbps_otg_start_host;
@@ -178,8 +221,8 @@ static int usb_hcd_xusbps_probe(const struct hc_driver *driver,
 		xusbps_update_transceiver();
 	} else {
 		retval = usb_add_hcd(hcd, irq, IRQF_DISABLED | IRQF_SHARED);
-		if (retval != 0)
-			goto err2;
+		if (retval)
+			goto err_out_clk_unreg_notif;
 
 		/*
 		 * Enable vbus on ULPI - zedboard requirement
@@ -191,11 +234,16 @@ static int usb_hcd_xusbps_probe(const struct hc_driver *driver,
 #else
 	/* Don't need to set host mode here. It will be done by tdi_reset() */
 	retval = usb_add_hcd(hcd, irq, IRQF_DISABLED | IRQF_SHARED);
-	if (retval != 0)
-		goto err2;
+	if (retval)
+		goto err_out_clk_unreg_notif;
 #endif
 	return retval;
 
+err_out_clk_unreg_notif:
+	clk_notifier_unregister(pdata->clk, &pdata->clk_rate_change_nb);
+	clk_disable_unprepare(pdata->clk);
+err_out_clk_put:
+	clk_put(pdata->clk);
 err2:
 	usb_put_hcd(hcd);
 err1:
@@ -231,6 +279,9 @@ static void usb_hcd_xusbps_remove(struct usb_hcd *hcd,
 	if (pdata->exit)
 		pdata->exit(pdev);
 	usb_put_hcd(hcd);
+	clk_notifier_unregister(pdata->clk, &pdata->clk_rate_change_nb);
+	clk_disable_unprepare(pdata->clk);
+	clk_put(pdata->clk);
 }
 
 static void ehci_xusbps_setup_phy(struct ehci_hcd *ehci,
@@ -351,10 +402,13 @@ void ehci_xusbps_shutdown(struct usb_hcd *hcd)
 static int ehci_xusbps_drv_suspend(struct device *dev)
 {
 	struct usb_hcd *hcd = dev_get_drvdata(dev);
+	struct xusbps_usb2_platform_data *pdata = dev->platform_data;
 
 	ehci_prepare_ports_for_controller_suspend(hcd_to_ehci(hcd),
 			device_may_wakeup(dev));
 
+	clk_disable(pdata->clk);
+
 	return 0;
 }
 
@@ -362,6 +416,14 @@ static int ehci_xusbps_drv_resume(struct device *dev)
 {
 	struct usb_hcd *hcd = dev_get_drvdata(dev);
 	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
+	struct xusbps_usb2_platform_data *pdata = dev->platform_data;
+	int ret;
+
+	ret = clk_enable(pdata->clk);
+	if (ret) {
+		dev_err(dev, "cannot enable clock. resume failed\n");
+		return ret;
+	}
 
 	ehci_prepare_ports_for_controller_resume(ehci);
 
-- 
1.7.5.4

