From 3cdd9b1b679da350537dcb5e574445a3add8dd2d Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Wed, 10 Oct 2012 10:51:26 +0800
Subject: [PATCH 3/3] ARM: sched_clock: use original mult of clocksource for calculating clock value

The sched_clock should use mult_orig of clocksource to calculate the clock
value instead of using NTP adjusted mult of clocksource, otherwise the
sched_clock would provide backwarding clock value instead of monotonically
increasing one on certain workloads after the time is adjusted by NTP.

All the architectures should have distinct concept of time, one is for kernel
internal monotonically increasing time from system boot like the sched_clock()
provides, another one is maintained by timekeeping code, which is counted from
UNIX EPOC but it might not be monotonic because it might be adjusted by ntp if
there is drift between local time and time of ntp server.

Architectures beside ARM/OMAP and MIPS/CAVIUM_OCTEON do not depend on
clocksource->mult/shift to provide sched_clock but by other means, at least
not depend on ntp adjusted mult value, so they are immune to this sort of
problem. In the latest upstream kernel the mult/shift value is separated in
two parts, clocksource and timekeeper respectively.

The system time go backwards under certain workload and in some occasions the
softlockup warning is triggered because the interval between time value sampled
by the softlockup is greater than 1sec, the sched_clock() in ARM/MIPS use ntp
adjusted mult, the cycles -> nanoseconds is also influenced and occurs crazy
time value leap on these architectures.

The timekeeper patch is huge for back porting so just pick the part of it here.

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 arch/arm/plat-omap/common.c |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/arch/arm/plat-omap/common.c b/arch/arm/plat-omap/common.c
index f4dff42..06cade5 100644
--- a/arch/arm/plat-omap/common.c
+++ b/arch/arm/plat-omap/common.c
@@ -204,7 +204,8 @@ static struct clocksource clocksource_32k = {
  */
 unsigned long long omap_32k_ticks_to_nsecs(unsigned long ticks_32k)
 {
-	return cyc2ns(&clocksource_32k, ticks_32k);
+	return clocksource_cyc2ns(ticks_32k, clocksource_32k.mult_orig,
+					clocksource_32k.shift);
 }
 
 /*
-- 
1.7.3.5

