From 815c89a8665d7a2f11f80c5a23433c648a13c754 Mon Sep 17 00:00:00 2001
From: Srikanth Thokala <srikanth.thokala@xilinx.com>
Date: Tue, 14 May 2013 17:24:52 +0530
Subject: [PATCH 452/628] net: ethernet: axienet: Removed checkpatch
 errors/warnings

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 860fd3d0e481a504be352954b5a746fbecb0bbba

Removed checkpatch.pl errors and warnings.

Signed-off-by: Srikanth Thokala <sthokal@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_axienet_main.c |   32 +++++++++++---------
 drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c |   12 ++++---
 2 files changed, 25 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
index 9300a83..fb6da1e 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_main.c
@@ -206,8 +206,8 @@ static int axienet_dma_bd_init(struct net_device *ndev)
 					 &lp->tx_bd_p,
 					 GFP_KERNEL);
 	if (!lp->tx_bd_v) {
-		dev_err(&ndev->dev, "unable to allocate DMA Tx buffer "
-			"descriptors");
+		dev_err(&ndev->dev,
+			"unable to allocate DMA Tx buffer descriptors");
 		goto out;
 	}
 
@@ -216,8 +216,8 @@ static int axienet_dma_bd_init(struct net_device *ndev)
 					 &lp->rx_bd_p,
 					 GFP_KERNEL);
 	if (!lp->rx_bd_v) {
-		dev_err(&ndev->dev, "unable to allocate DMA Rx buffer "
-			"descriptors");
+		dev_err(&ndev->dev,
+			"unable to allocate DMA Rx buffer descriptors");
 		goto out;
 	}
 
@@ -456,8 +456,8 @@ static void __axienet_device_reset(struct axienet_local *lp,
 	while (axienet_dma_in32(lp, offset) & XAXIDMA_CR_RESET_MASK) {
 		udelay(1);
 		if (--timeout == 0) {
-			dev_err(dev, "axienet_device_reset DMA "
-				"reset timeout!\n");
+			dev_err(dev,
+				"axienet_device_reset DMA reset timeout!\n");
 			break;
 		}
 	}
@@ -496,7 +496,8 @@ static void axienet_device_reset(struct net_device *ndev)
 	}
 
 	if (axienet_dma_bd_init(ndev)) {
-		dev_err(&ndev->dev, "axienet_device_reset descriptor "
+		dev_err(&ndev->dev,
+			"axienet_device_reset descriptor "
 			"allocation failed\n");
 	}
 
@@ -563,7 +564,8 @@ static void axienet_adjust_link(struct net_device *ndev)
 				emmc_reg |= XAE_EMMC_LINKSPD_10;
 				break;
 			default:
-				dev_err(&ndev->dev, "Speed other than 10, 100 "
+				dev_err(&ndev->dev,
+					"Speed other than 10, 100 "
 					"or 1Gbps is not supported\n");
 				break;
 			}
@@ -572,8 +574,8 @@ static void axienet_adjust_link(struct net_device *ndev)
 			lp->last_link = link_state;
 			phy_print_status(phy);
 		} else {
-			dev_err(&ndev->dev, "Error setting Axi Ethernet "
-				"mac speed\n");
+			dev_err(&ndev->dev,
+				"Error setting Axi Ethernet mac speed\n");
 		}
 	}
 }
@@ -1269,8 +1271,9 @@ axienet_ethtools_set_pauseparam(struct net_device *ndev,
 	struct axienet_local *lp = netdev_priv(ndev);
 
 	if (netif_running(ndev)) {
-		printk(KERN_ERR	"%s: Please stop netif before applying "
-		       "configruation\n", ndev->name);
+		dev_err(&ndev->dev,
+			"%s: Please stop netif before applying configuration\n",
+			ndev->name);
 		return -EFAULT;
 	}
 
@@ -1326,8 +1329,9 @@ static int axienet_ethtools_set_coalesce(struct net_device *ndev,
 	struct axienet_local *lp = netdev_priv(ndev);
 
 	if (netif_running(ndev)) {
-		printk(KERN_ERR	"%s: Please stop netif before applying "
-		       "configruation\n", ndev->name);
+		dev_err(&ndev->dev,
+			"%s: Please stop netif before applying configuration\n",
+			ndev->name);
 		return -EFAULT;
 	}
 
diff --git a/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c b/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c
index fc7e5ba..7ec9cab 100644
--- a/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c
+++ b/drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c
@@ -174,8 +174,9 @@ int axienet_mdio_setup(struct axienet_local *lp, struct device_node *np)
 		property_p = (uint32_t *)of_get_property(npp,
 						"clock-frequency", NULL);
 		if (!property_p) {
-			dev_warn(lp->dev, "Could not find clock ethernet " \
-						      "controller property.");
+			dev_warn(lp->dev,
+				"Could not find clock ethernet "
+				"controller property.");
 			dev_warn(lp->dev,
 				 "Setting MDIO clock divisor to default %d\n",
 							DEFAULT_CLOCK_DIVISOR);
@@ -191,9 +192,10 @@ int axienet_mdio_setup(struct axienet_local *lp, struct device_node *np)
 			 * above 2.5 MHz */
 			if (host_clock % (MAX_MDIO_FREQ * 2))
 				clk_div++;
-			dev_dbg(lp->dev, "Setting MDIO clock divisor to %u " \
-						"based on %u Hz host clock.\n",
-						clk_div, host_clock);
+			dev_dbg(lp->dev,
+				"Setting MDIO clock divisor to %u "
+				"based on %u Hz host clock.\n",
+				clk_div, host_clock);
 		}
 	}
 
-- 
1.7.5.4

