From 961a6553ed010004c69b9e56e7b69240e72c1af6 Mon Sep 17 00:00:00 2001
From: Jianchuan Wang <jianchuan.wang@windriver.com>
Date: Thu, 4 Dec 2014 16:20:35 +0800
Subject: [PATCH] NFS: ensure that get_expiry return value is non negative

exportfs will fail after the system time is changed to "19700101",
with the nfs client side failing to mount the directory and hanging
forever. Likely this:

  # date -s "19700101"
  Thu Jan  1 00:00:00 GMT 1970
  # exportfs -arv
  exporting *:/tmp/nfsserver
  exportfs: /tmp/nfsserver does not support NFS export

This is a regression caused by commit c5b29f885 ("sunrpc: use seconds since boot
in expiry cache"), after this commit, the return value (rv - boot.tv_sec) of
get_expiry maybe overflow and cause that cache_is_expired return true when the rv
is a large number (e.g. INT_MAX) and return value of getboottime is a negative value.

when executing the exportfs command, it will call ip_map_parse to
create the auth_domain, add it to auth_domain_table and relative to
cache_detail->hash_table, but it will still remove the auth_domain from
auth_domain_table by cache_flush in the end of the ip_map_parse if
cache_is_expired return true.

after that,calling svc_export_parse (called by sys_write) return -ENOENT because
the auth_domain is removed.

For those, we need revise the return value of the get_expiry by calling
get_monotonic_boottime to replace the getboottime, because it uses
a relative time, not absolute time in the here.

Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
Signed-off-by: Jianchuan Wang <jianchuan.wang@windriver.com>
---
 include/linux/sunrpc/cache.h |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/include/linux/sunrpc/cache.h b/include/linux/sunrpc/cache.h
index 437ddb6..53a6dee 100644
--- a/include/linux/sunrpc/cache.h
+++ b/include/linux/sunrpc/cache.h
@@ -157,7 +157,7 @@ struct cache_deferred_req {
 static inline time_t seconds_since_boot(void)
 {
 	struct timespec boot;
-	getboottime(&boot);
+	get_monotonic_boottime(&boot);
 	return get_seconds() - boot.tv_sec;
 }
 
@@ -291,7 +291,7 @@ static inline time_t get_expiry(char **bpp)
 		return 0;
 	if (rv < 0)
 		return 0;
-	getboottime(&boot);
+	get_monotonic_boottime(&boot);
 	return rv - boot.tv_sec;
 }
 
-- 
1.7.5.4

