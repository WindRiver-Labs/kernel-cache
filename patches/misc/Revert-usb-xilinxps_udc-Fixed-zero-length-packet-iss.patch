From 71a544b9b97da7e52ff1c71d43f46a8349937576 Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveen.mamindlapalli@xilinx.com>
Date: Wed, 1 May 2013 21:10:23 +0530
Subject: [PATCH 538/628] Revert "usb: xilinxps_udc: Fixed zero length packet
 issue with control endpoint."

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 814cfa136a8f4c7c3d7161f62e157d9557429329

This reverts commit 17fb76b1b2b976bc5411dbbdfc5243530922e3d2.

This patch doesn't handle the case where the number of bytes to send on control
endpoint is same as wLength and multiple of ep max pkt size. In this case the
device expects a zero length IN data packet which is not correct. The device should
actually move to status phase.

Signed-off-by: Naveen Mamindlapalli <naveenm@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_usbps_udc.c |   16 ++--------------
 1 files changed, 2 insertions(+), 14 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index f127fbb..38cd054 100644
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -806,12 +806,8 @@ static void ep0_setup(struct xusbps_udc *udc)
 {
 	/* the intialization of an ep includes: fields in QH, Regs,
 	 * xusbps_ep struct */
-	/*
-	 * For control OUT endpoint, don't need to wait for zlp from host
-	 * (see usb 2.0 spec, section 5.5.3)
-	 */
 	struct_ep_qh_setup(udc, 0, USB_RECV, USB_ENDPOINT_XFER_CONTROL,
-			USB_MAX_CTRL_PAYLOAD, 1, 0);
+			USB_MAX_CTRL_PAYLOAD, 0, 0);
 	struct_ep_qh_setup(udc, 0, USB_SEND, USB_ENDPOINT_XFER_CONTROL,
 			USB_MAX_CTRL_PAYLOAD, 0, 0);
 	dr_ep_setup(0, USB_RECV, USB_ENDPOINT_XFER_CONTROL);
@@ -1103,15 +1099,7 @@ static struct ep_td_struct *xusbps_build_dtd(struct xusbps_req *req, unsigned
 
 	/* zlp is needed if req->req.zero is set */
 	if (req->req.zero) {
-		/*
-		 * There is no need for a separate zlp dtd for control IN
-		 * endpoint. The ZLT bit in dQH takes care.
-		 */
-		if ((ep_index(req->ep) == 0) &&
-				(req->req.length == req->req.actual) &&
-				!(req->req.length % req->ep->ep.maxpacket))
-			*is_last = 1;
-		else if (*length == 0 || (*length % req->ep->ep.maxpacket) != 0)
+		if (*length == 0 || (*length % req->ep->ep.maxpacket) != 0)
 			*is_last = 1;
 		else
 			*is_last = 0;
-- 
1.7.5.4

