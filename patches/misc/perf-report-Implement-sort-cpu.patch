From d0e0c6a0f0f050480243239867d7fb0247d4acc4 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Fri, 2 Aug 2013 17:23:46 +0800
Subject: [PATCH 19/19] perf report: Implement --sort cpu

Backport based on upstream commit f60f359383edf2a0ec3aa32cf8be98ad815bdf65
(perf report: Implement --sort cpu).

In a shared multi-core environment, users want to analyze why their
program was slow. In particular, if the code ran slower only on certain
CPUs due to interference from other programs or kernel threads, the user
should be able to notice that.

Sample usage:

perf record -f -a -- sleep 3
perf report --sort cpu,comm

Workload:

program is running on 16 CPUs
Experiencing interference from an antagonist only on 4 CPUs.

  Samples: 106218177676 cycles

  Overhead  CPU          Command
  ........  ...  ...............

     6.25%  2            program
     6.24%  6            program
     6.24%  11           program
     6.24%  5            program
     6.24%  9            program
     6.24%  10           program
     6.23%  15           program
     6.23%  7            program
     6.23%  3            program
     6.23%  14           program
     6.22%  1            program
     6.20%  13           program
     3.17%  12           program
     3.15%  8            program
     3.14%  0            program
     3.13%  4            program
     3.11%  4         antagonist
     3.11%  0         antagonist
     3.10%  8         antagonist
     3.07%  12        antagonist

Compare to the original fix, changes include:
- Change the name of fields for sort_cpu struct.
- Remove the forward declaration for hist_entry__cpu_snprintf.
- Change the definition of hist_entry__cpu_snprintf so as to
  meet 2.6.34 kernel's need.
- Add declaration for hist_entry__cpu_snprintf in sort.h header file.

Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 tools/perf/builtin-record.c |    3 +++
 tools/perf/util/event.c     |    1 +
 tools/perf/util/hist.c      |    1 +
 tools/perf/util/sort.c      |   27 ++++++++++++++++++++++++++-
 tools/perf/util/sort.h      |    8 +++++++-
 tools/perf/util/symbol.h    |    3 ++-
 6 files changed, 40 insertions(+), 3 deletions(-)

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 67bf2b6..7e67003 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -285,6 +285,9 @@ static void create_counter(int counter, int cpu, pid_t pid)
 	if (sample_time)
 		attr->sample_type	|= PERF_SAMPLE_TIME;
 
+	if (system_wide)
+		attr->sample_type	|= PERF_SAMPLE_CPU;
+
 	if (raw_samples) {
 		attr->sample_type	|= PERF_SAMPLE_TIME;
 		attr->sample_type	|= PERF_SAMPLE_RAW;
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index cd39c10..67376a3 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -760,6 +760,7 @@ int event__preprocess_sample(const event_t *self, struct perf_session *session,
 		    al->map ? al->map->dso->long_name :
 			al->level == 'H' ? "[hypervisor]" : "<not found>");
 	al->sym = NULL;
+	al->cpu = data->cpu;
 
 	if (al->map) {
 		if (symbol_conf.dso_list &&
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index c7efceb..4c1b85e 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -58,6 +58,7 @@ struct hist_entry *__hists__add_entry(struct hists *self,
 		.thread	= al->thread,
 		.map	= al->map,
 		.sym	= al->sym,
+		.cpu    = al->cpu,
 		.ip	= al->addr,
 		.level	= al->level,
 		.count	= count,
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index cb0f327..048514c 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -13,6 +13,7 @@ enum sort_type	sort__first_dimension;
 unsigned int dsos__col_width;
 unsigned int comms__col_width;
 unsigned int threads__col_width;
+unsigned int cpus__col_width;
 static unsigned int parent_symbol__col_width;
 char * field_sep;
 
@@ -53,6 +54,13 @@ struct sort_entry sort_parent = {
 	.width	= &parent_symbol__col_width,
 };
 
+struct sort_entry sort_cpu = {
+	.header      = "CPU",
+	.cmp         = sort__cpu_cmp,
+	.print	     = hist_entry__cpu_snprintf,
+	.width       = &cpus__col_width,
+};
+
 struct sort_dimension {
 	const char		*name;
 	struct sort_entry	*entry;
@@ -65,8 +73,9 @@ static struct sort_dimension sort_dimensions[] = {
 	{ .name = "dso",	.entry = &sort_dso,	},
 	{ .name = "symbol",	.entry = &sort_sym,	},
 	{ .name = "parent",	.entry = &sort_parent,	},
+	{ .name = "cpu",        .entry = &sort_cpu,     },
 };
-
+ 
 int64_t cmp_null(void *l, void *r)
 {
 	if (!l && !r)
@@ -238,6 +247,20 @@ sort__parent_print(FILE *fp, struct hist_entry *self, unsigned int width)
 			      self->parent ? self->parent->name : "[other]");
 }
 
+/* --sort cpu */
+
+int64_t
+sort__cpu_cmp(struct hist_entry *left, struct hist_entry *right)
+{
+	return right->cpu - left->cpu;
+}
+
+size_t
+hist_entry__cpu_snprintf( FILE *fp, struct hist_entry *self, unsigned int width)
+{
+	return repsep_fprintf(fp, "%-*d", width, self->cpu);
+}
+
 int sort_dimension__add(const char *tok)
 {
 	unsigned int i;
@@ -278,6 +301,8 @@ int sort_dimension__add(const char *tok)
 				sort__first_dimension = SORT_SYM;
 			else if (!strcmp(sd->name, "parent"))
 				sort__first_dimension = SORT_PARENT;
+			else if (!strcmp(sd->name, "cpu"))
+				sort__first_dimension = SORT_CPU;
 		}
 
 		list_add_tail(&sd->entry->list, &hist_entry__sort_list);
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index e2ea881..4220221 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -39,6 +39,7 @@ extern struct sort_entry sort_parent;
 extern unsigned int dsos__col_width;
 extern unsigned int comms__col_width;
 extern unsigned int threads__col_width;
+extern unsigned int cpus__col_width;
 extern enum sort_type sort__first_dimension;
 
 struct hist_entry {
@@ -52,6 +53,7 @@ struct hist_entry {
 	struct map		*map;
 	struct symbol		*sym;
 	u64			ip;
+	s32			cpu;
 	char			level;
 	struct symbol	  *parent;
 	union {
@@ -67,7 +69,8 @@ enum sort_type {
 	SORT_COMM,
 	SORT_DSO,
 	SORT_SYM,
-	SORT_PARENT
+	SORT_PARENT,
+	SORT_CPU,
 };
 
 /*
@@ -103,7 +106,10 @@ extern int64_t sort__comm_collapse(struct hist_entry *, struct hist_entry *);
 extern int64_t sort__dso_cmp(struct hist_entry *, struct hist_entry *);
 extern int64_t sort__sym_cmp(struct hist_entry *, struct hist_entry *);
 extern int64_t sort__parent_cmp(struct hist_entry *, struct hist_entry *);
+int64_t sort__cpu_cmp(struct hist_entry *left, struct hist_entry *right);
 extern size_t sort__parent_print(FILE *, struct hist_entry *, unsigned int);
+extern size_t hist_entry__cpu_snprintf(FILE *fp, struct hist_entry *self,
+				       unsigned int width);
 extern int sort_dimension__add(const char *);
 void sort_entry__setup_elide(struct sort_entry *self, struct strlist *list,
 			     const char *list_name, FILE *fp);
diff --git a/tools/perf/util/symbol.h b/tools/perf/util/symbol.h
index a939186..bad0c9a 100644
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@ -100,7 +100,8 @@ struct addr_location {
 	u64	      addr;
 	char	      level;
 	bool	      filtered;
-	unsigned int  cpumode;
+	u8	      cpumode;
+	s32	      cpu;
 };
 
 enum dso_kernel_type {
-- 
1.7.0

