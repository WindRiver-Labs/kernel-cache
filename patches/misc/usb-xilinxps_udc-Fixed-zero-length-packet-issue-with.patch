From c121338309f443dcb069a26cec322b87a4227e92 Mon Sep 17 00:00:00 2001
From: Naveen Mamindlapalli <naveen.mamindlapalli@xilinx.com>
Date: Mon, 25 Mar 2013 17:05:19 +0530
Subject: [PATCH 534/628] usb: xilinxps_udc: Fixed zero length packet issue
 with control endpoint.

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 17fb76b1b2b976bc5411dbbdfc5243530922e3d2

Fixed sending a separate zero length packet for control IN endpoint. The
ZLT bit in dQH takes care of it. Configured control OUT endpoint not to
wait for zero length packet from the host controller. See USB 2.0 section
5.5.3 for more details.

Signed-off-by: Naveen Mamindlapalli <naveenm@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/gadget/xilinx_usbps_udc.c |   16 ++++++++++++++--
 1 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/gadget/xilinx_usbps_udc.c b/drivers/usb/gadget/xilinx_usbps_udc.c
index 38cd054..f127fbb 100644
--- a/drivers/usb/gadget/xilinx_usbps_udc.c
+++ b/drivers/usb/gadget/xilinx_usbps_udc.c
@@ -806,8 +806,12 @@ static void ep0_setup(struct xusbps_udc *udc)
 {
 	/* the intialization of an ep includes: fields in QH, Regs,
 	 * xusbps_ep struct */
+	/*
+	 * For control OUT endpoint, don't need to wait for zlp from host
+	 * (see usb 2.0 spec, section 5.5.3)
+	 */
 	struct_ep_qh_setup(udc, 0, USB_RECV, USB_ENDPOINT_XFER_CONTROL,
-			USB_MAX_CTRL_PAYLOAD, 0, 0);
+			USB_MAX_CTRL_PAYLOAD, 1, 0);
 	struct_ep_qh_setup(udc, 0, USB_SEND, USB_ENDPOINT_XFER_CONTROL,
 			USB_MAX_CTRL_PAYLOAD, 0, 0);
 	dr_ep_setup(0, USB_RECV, USB_ENDPOINT_XFER_CONTROL);
@@ -1099,7 +1103,15 @@ static struct ep_td_struct *xusbps_build_dtd(struct xusbps_req *req, unsigned
 
 	/* zlp is needed if req->req.zero is set */
 	if (req->req.zero) {
-		if (*length == 0 || (*length % req->ep->ep.maxpacket) != 0)
+		/*
+		 * There is no need for a separate zlp dtd for control IN
+		 * endpoint. The ZLT bit in dQH takes care.
+		 */
+		if ((ep_index(req->ep) == 0) &&
+				(req->req.length == req->req.actual) &&
+				!(req->req.length % req->ep->ep.maxpacket))
+			*is_last = 1;
+		else if (*length == 0 || (*length % req->ep->ep.maxpacket) != 0)
 			*is_last = 1;
 		else
 			*is_last = 0;
-- 
1.7.5.4

