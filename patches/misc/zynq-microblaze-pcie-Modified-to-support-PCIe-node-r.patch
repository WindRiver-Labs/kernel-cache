From d58614d6b49823744e2988e0a5326565e5cde01d Mon Sep 17 00:00:00 2001
From: Srikanth Thokala <srikanth.thokala@xilinx.com>
Date: Tue, 11 Dec 2012 18:51:57 +0530
Subject: [PATCH 004/628] zynq/microblaze: pcie: Modified to support PCIe node
 ranges property

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 04d9378881401e71f83b8b4fea0abd71d33b4052

There is a change in ranges property of PCIe node in device-tree, for which
the driver needs support. This commit fix this.

Signed-off-by: Srikanth Thokala <sthokal@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 .../devicetree/bindings/pci/xilinx-axipcie.txt     |   26 +++++++++++++-------
 arch/arm/mach-zynq/xaxipcie.c                      |   12 +++------
 2 files changed, 21 insertions(+), 17 deletions(-)

diff --git a/Documentation/devicetree/bindings/pci/xilinx-axipcie.txt b/Documentation/devicetree/bindings/pci/xilinx-axipcie.txt
index e87725d..edefc0c 100644
--- a/Documentation/devicetree/bindings/pci/xilinx-axipcie.txt
+++ b/Documentation/devicetree/bindings/pci/xilinx-axipcie.txt
@@ -5,6 +5,8 @@ Required properties:
 	reg: Should contain AXI PCIe registers location and length.
 	interrupts: Should contain AXI PCIe interrupts.
 	ranges: These are the parameters for each PCIe bar implemented within the IP
+	The ranges property is <<child address> <parent address> <size>>.
+	The parent address #address-cells is taken from the parent node.
 	xlnx, include-rc: Root Port (=1) or End Point(=0)
 	xlnx,axibar2pciebar-0: Translates address from AXI to PCIe
 	xlnx,pciebar2axibar-0: Translates address from PCIe to AXI
@@ -12,12 +14,18 @@ Required properties:
 Example:
 ++++++++
 
-	pci_express: axi-pcie@50000000 {
-		compatible = "xlnx,axi-pcie-1.05.a";
-		interrupts = < 0 52 4 >;
-		ranges = < 0x00000002 0x00000000 0x60000000 0x60000000 0x00000000 0x00000000 0x10000000 >;
-		reg = < 0x50000000 0x10000000 >;
-		xlnx,include-rc = <0x1>;
-		xlnx,axibar2pciebar-0 = <0x60000000>;
-		xlnx,pciebar2axibar-0 = <0x0>;
-	};
+	ps7_axi_interconnect_0: axi@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		pci_express: axi-pcie@50000000 {
+			#address-cells = <3>;
+			#size-cells = <2>;
+			compatible = "xlnx,axi-pcie-1.05.a";
+			interrupts = < 0 52 4 >;
+			ranges = < 0x02000000 0 0x60000000 0x60000000 0 0x10000000 >;
+			reg = < 0x50000000 0x10000000 >;
+			xlnx,include-rc = <0x1>;
+			xlnx,axibar2pciebar-0 = <0x60000000>;
+			xlnx,pciebar2axibar-0 = <0x0>;
+		};
+ 	};
diff --git a/arch/arm/mach-zynq/xaxipcie.c b/arch/arm/mach-zynq/xaxipcie.c
index baf1444..447a613 100644
--- a/arch/arm/mach-zynq/xaxipcie.c
+++ b/arch/arm/mach-zynq/xaxipcie.c
@@ -372,7 +372,7 @@ void __devinit xaxi_pcie_set_bridge_resource(struct xaxi_pcie_port *port)
 	u32 val = 0;
 
 	while ((rlen -= np * 4) >= 0) {
-		pci_space = ranges[0];
+		pci_space = be32_to_cpup(ranges);
 		pci_addr = of_read_number(ranges + 1, 2);
 		size = of_read_number(ranges + port->pna + 3, 2);
 
@@ -503,7 +503,7 @@ void __devinit xaxi_pcie_process_bridge_OF_ranges(
 	pr_debug("Parsing ranges property...\n");
 	while ((rlen -= np * 4) >= 0) {
 		/* Read next ranges element */
-		pci_space = ranges[0];
+		pci_space = be32_to_cpup(ranges);
 		pci_addr = of_read_number(ranges + 1, 2);
 		cpu_addr = of_translate_address(node, ranges + 3);
 		size = of_read_number(ranges + pna + 3, 2);
@@ -525,7 +525,7 @@ void __devinit xaxi_pcie_process_bridge_OF_ranges(
 		/* Now consume following elements while they are contiguous */
 		for (; rlen >= np * sizeof(u32);
 			ranges += np, rlen -= np * 4) {
-			if (ranges[0] != pci_space)
+			if (be32_to_cpup(ranges) != pci_space)
 				break;
 			pci_next = of_read_number(ranges + 1, 2);
 			cpu_next = of_translate_address(node, ranges + 3);
@@ -983,11 +983,7 @@ int __devinit xaxi_pcie_get_of_config(struct device_node *node,
 		return -ENODEV;
 
 	/* The address cells of PCIe node */
-	value = (u32 *) of_get_property(node, "#address-cells", NULL);
-	if (value)
-		info->address_cells = be32_to_cpup(value);
-	else
-		return -ENODEV;
+	info->address_cells = of_n_addr_cells(node);
 
 	/* Get ranges property */
 	value = (u32 *) of_get_property(node, "ranges", &rlen);
-- 
1.7.5.4

