From 0b0d56f0a8b00bc4c47b76b17d9bf254e9950d43 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Fri, 22 Feb 2013 13:51:17 +0800
Subject: [PATCH] MIPS: fix access_ok()

Current access_ok() will fail even if the address range is
valid when it reaches to the end of TASK_SIZE.
For example: addr = 0xfffffffff0; size = 16;
the real address range it want to access is 0xfffffffff0~0xfffffffff;
but addr + size = 0x10000000000 which we will not and can't access.
In current realization of access_ok(), the high bit will be 1
thus access_ok() indicates the operation is not allowed.

The bug is found in old kerenl(before vdso is realized) in
following typical call trace:
sys_mount()
  copy_mount_options()
    exact_copy_from_user()
When the parameter 'from' for exact_copy_from_user() residents in
the last page of the task's virtual address, such as stack.

Signed-off-by: Yong Zhang <yong.zhang@windriver.com>
---
 include/asm-mips/uaccess.h |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/include/asm-mips/uaccess.h b/include/asm-mips/uaccess.h
index 0fdbec0..b2b9eda 100644
--- a/include/asm-mips/uaccess.h
+++ b/include/asm-mips/uaccess.h
@@ -113,8 +113,11 @@
 	unsigned long __mask = mask;							\
 	unsigned long __ok;								\
 											\
-	__ok = (signed long)(__mask & (__addr | (__addr + __size) |			\
-		__ua_size(__size)));							\
+	if (likely(size != 0))								\
+		__ok = (signed long)(__mask & (__addr | (__addr + __size - 1) |		\
+			__ua_size(__size)));						\
+	else										\
+		__ok = 0;								\
 	__ok == 0;									\
 })
 
-- 
1.7.0

