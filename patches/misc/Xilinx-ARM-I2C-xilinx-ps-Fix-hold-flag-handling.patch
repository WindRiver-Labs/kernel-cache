From bc7e20f41085fe5211b93a4150243556db8025ba Mon Sep 17 00:00:00 2001
From: John Linn <john.linn@xilinx.com>
Date: Thu, 22 Mar 2012 20:45:40 -0700
Subject: [PATCH 293/628] Xilinx: ARM: I2C: xilinx-ps: Fix hold flag handling

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 5b7ad7f19ccf090259aae0d3ac9660dfe5188733

Set the hold flag whenever there is more data to send and clear it when sending
the last message. Otherwise STOP-START condintions will be generated instead of
a RESTART condition when sending multiple messages at once.

This was a patch from Lars that wouldn't apply so I manually added the change.

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/i2c/busses/i2c-xilinx_ps.c |   14 +++++++++-----
 1 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/drivers/i2c/busses/i2c-xilinx_ps.c b/drivers/i2c/busses/i2c-xilinx_ps.c
index cb6a1d1..b6ef769 100644
--- a/drivers/i2c/busses/i2c-xilinx_ps.c
+++ b/drivers/i2c/busses/i2c-xilinx_ps.c
@@ -285,8 +285,10 @@ static void xi2cps_mrecv(struct xi2cps *id)
 	ctrl_reg = xi2cps_readreg(XI2CPS_CR_OFFSET);
 	ctrl_reg |= (XI2CPS_CR_RW_MASK | XI2CPS_CR_CLR_FIFO_MASK);
 
-	if (id->recv_count > XI2CPS_FIFO_DEPTH)
+	if (id->recv_count > XI2CPS_FIFO_DEPTH || id->bus_hold_flag)
 		ctrl_reg |= XI2CPS_CR_HOLD_BUS_MASK;
+	else
+		ctrl_reg &= ~XI2CPS_CR_HOLD_BUS_MASK;
 
 	xi2cps_writereg(ctrl_reg, XI2CPS_CR_OFFSET);
 	xi2cps_writereg((id->p_msg->addr & XI2CPS_ADDR_MASK),
@@ -331,8 +333,10 @@ static void xi2cps_msend(struct xi2cps *id)
 	ctrl_reg &= ~XI2CPS_CR_RW_MASK;
 	ctrl_reg |= XI2CPS_CR_CLR_FIFO_MASK;
 
-	if ((id->send_count) > XI2CPS_FIFO_DEPTH)
+	if ((id->send_count) > XI2CPS_FIFO_DEPTH || id->bus_hold_flag)
 		ctrl_reg |= XI2CPS_CR_HOLD_BUS_MASK;
+	else
+		ctrl_reg &= ~XI2CPS_CR_HOLD_BUS_MASK;
 	xi2cps_writereg(ctrl_reg, XI2CPS_CR_OFFSET);
 
 	/*
@@ -398,13 +402,13 @@ static int xi2cps_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 	}
 
 	/*
-	 * Set the flag to zero when multiple messages are to be
+	 * Set the flag to one when multiple messages are to be
 	 * processed with a repeated start.
 	 */
 	if (num > 1)
-		id->bus_hold_flag = 0;
-	else
 		id->bus_hold_flag = 1;
+	else
+		id->bus_hold_flag = 0;
 
 	/* Process the msg one by one */
 	for (count = 0; count < num; count++, msgs++) {
-- 
1.7.5.4

