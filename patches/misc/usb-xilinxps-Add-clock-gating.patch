From ffe68f70268e2df3e1d48a93b7170375fda6d64e Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Mon, 10 Dec 2012 13:55:54 -0800
Subject: [PATCH 504/628] usb: xilinxps: Add clock gating

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit b29c9554ff926f9972271b0277c68c3c1c13257e

Clock management using the common clock framework is added.

Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/usb/host/xusbps-dr-of.c |   50 +++++++++++++++++++++++++++++++++++++-
 1 files changed, 48 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/host/xusbps-dr-of.c b/drivers/usb/host/xusbps-dr-of.c
index 83cb59e..1e0fe0e 100644
--- a/drivers/usb/host/xusbps-dr-of.c
+++ b/drivers/usb/host/xusbps-dr-of.c
@@ -25,6 +25,7 @@
 #include <linux/err.h>
 #include <linux/io.h>
 #include <linux/of_platform.h>
+#include <linux/slab.h>
 #include <linux/string.h>
 #include <linux/clk.h>
 #include <linux/usb/ulpi.h>
@@ -39,6 +40,10 @@ struct xusbps_dev_data {
 	enum xusbps_usb2_operating_modes op_mode;	/* operating mode */
 };
 
+struct xusbps_host_data {
+	struct clk *clk;
+};
+
 static struct xusbps_dev_data dr_mode_data[] __devinitdata = {
 	{
 		.dr_mode = "host",
@@ -56,6 +61,7 @@ static struct xusbps_dev_data dr_mode_data[] __devinitdata = {
 		.op_mode = XUSBPS_USB2_DR_DEVICE,
 	},
 };
+
 static struct xusbps_dev_data * __devinit get_dr_mode_data(
 		struct device_node *np)
 {
@@ -145,10 +151,12 @@ static int __devinit xusbps_dr_of_probe(struct platform_device *ofdev)
 	struct platform_device *usb_dev;
 	struct xusbps_usb2_platform_data data, *pdata;
 	struct xusbps_dev_data *dev_data;
+	struct xusbps_host_data *hdata;
 	const unsigned char *prop;
 	static unsigned int idx;
 	struct resource *res;
 	int i, phy_init;
+	int ret;
 
 	pdata = &data;
 	memset(pdata, 0, sizeof(data));
@@ -187,6 +195,29 @@ static int __devinit xusbps_dr_of_probe(struct platform_device *ofdev)
 	prop = of_get_property(np, "phy_type", NULL);
 	pdata->phy_mode = determine_usb_phy(prop);
 
+	hdata = kmalloc(sizeof(*hdata), GFP_KERNEL);
+	if (!hdata) {
+		dev_err(&ofdev->dev, "cannot allocate memory\n");
+		return -ENOMEM;
+	}
+	platform_set_drvdata(ofdev, hdata);
+
+	if (pdata->irq == 53)
+		hdata->clk = clk_get_sys("USB0_APER", NULL);
+	else
+		hdata->clk = clk_get_sys("USB1_APER", NULL);
+	if (IS_ERR(hdata->clk)) {
+		dev_err(&ofdev->dev, "APER clock not found.\n");
+		ret = PTR_ERR(hdata->clk);
+		goto err_free;
+	}
+
+	ret = clk_prepare_enable(hdata->clk);
+	if (ret) {
+		dev_err(&ofdev->dev, "Unable to enable APER clock.\n");
+		goto err_out_clk_put;
+	}
+
 	/* If ULPI phy type, set it up */
 	if (pdata->phy_mode == XUSBPS_USB2_PHY_ULPI) {
 		pdata->ulpi = otg_ulpi_create(&ulpi_viewport_access_ops,
@@ -198,7 +229,8 @@ static int __devinit xusbps_dr_of_probe(struct platform_device *ofdev)
 		phy_init = usb_phy_init(pdata->ulpi);
 		if (phy_init) {
 			pr_info("Unable to init transceiver, missing?\n");
-			return -ENODEV;
+			ret = -ENODEV;
+			goto err_out_clk_disable;
 		}
 	}
 
@@ -209,11 +241,21 @@ static int __devinit xusbps_dr_of_probe(struct platform_device *ofdev)
 					dev_data->drivers[i], idx);
 		if (IS_ERR(usb_dev)) {
 			dev_err(&ofdev->dev, "Can't register usb device\n");
-			return PTR_ERR(usb_dev);
+			ret = PTR_ERR(usb_dev);
+			goto err_out_clk_disable;
 		}
 	}
 	idx++;
 	return 0;
+
+err_out_clk_disable:
+	clk_disable_unprepare(hdata->clk);
+err_out_clk_put:
+	clk_put(hdata->clk);
+err_free:
+	kfree(hdata);
+
+	return ret;
 }
 
 static int __devexit __unregister_subdev(struct device *dev, void *d)
@@ -225,11 +267,15 @@ static int __devexit __unregister_subdev(struct device *dev, void *d)
 static int __devexit xusbps_dr_of_remove(struct platform_device *ofdev)
 {
 	struct resource *res;
+	struct xusbps_host_data *hdata = platform_get_drvdata(ofdev);
 
 	res = platform_get_resource(ofdev, IORESOURCE_MEM, 0);
 	release_mem_region(res->start, resource_size(res));
 
 	device_for_each_child(&ofdev->dev, NULL, __unregister_subdev);
+	clk_disable_unprepare(hdata->clk);
+	clk_put(hdata->clk);
+	kfree(hdata);
 	return 0;
 }
 
-- 
1.7.5.4

