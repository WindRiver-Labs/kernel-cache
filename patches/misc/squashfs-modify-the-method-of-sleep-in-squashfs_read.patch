From fd9631074f52234a85c8d39fe4fa485446e97864 Mon Sep 17 00:00:00 2001
From: Jianchao Wang <jianchao.wang@windriver.com>
Date: Mon, 21 Nov 2016 06:45:55 +0000
Subject: [PATCH] squashfs: modify the method of sleep in squashfs_read_data
 from TASK_UNINTERRUPTIBLE to TASK_KILLABLE

A squashfs is mounted from a squashfs image exported on a nfs. When the link to
nfs server is losing, the tasks who are waiting for the data from squashfs will
fall into D state and cannot be killed. To fix this issue, introduce the
TASK_KILLABLE into squashfs.

TASK_KILLABLE sleep allow to be interrupted by fatal signal. Mofify the method
of sleep in squashfs_read_data from TASK_UNINTERRUPTIBLE to TASK_KILLABLE, so
the task who read from the squashfs could be killed by fatal signal when
neccesary. When squashfs_read_data is interrupted by fatal signal, the read
operation end and return error, some log will be printed to indicate that the
operation is interrupted by fatal signal.

Signed-off-by: Jianchao Wang <jianchao.wang@windriver.com>
Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
---
 fs/squashfs/block.c |   28 +++++++++++++++++++++++++++-
 1 files changed, 27 insertions(+), 1 deletions(-)

diff --git a/fs/squashfs/block.c b/fs/squashfs/block.c
index 0cea9b9..7280e12 100644
--- a/fs/squashfs/block.c
+++ b/fs/squashfs/block.c
@@ -38,6 +38,26 @@
 #include "decompressor.h"
 #include "page_actor.h"
 
+
+static int squashfs_sleep_on_buffer(void *word)
+{
+	io_schedule();
+	return fatal_signal_pending(current) ? -EINTR : 0;
+}
+/* Wait on the buffer head until the buffer comes unlocked or a SIGKILL
+ * If a task is waken up by a SIGKILL, the buffer should be not uptodate,
+ * so squashfs_read_data() will return ERROR.
+ * */
+static int squashfs_wait_on_buffer_killable(struct buffer_head *bh)
+{
+	int ret = 0;
+
+	might_sleep();
+	if (buffer_locked(bh))
+		ret = wait_on_bit(&bh->b_state, BH_Lock, squashfs_sleep_on_buffer, 
+				TASK_KILLABLE);
+	return ret;
+}
 /*
  * Read the metadata block length, this is stored in the first two
  * bytes of the metadata block.
@@ -160,7 +180,13 @@ int squashfs_read_data(struct super_block *sb, u64 index, int length,
 	}
 
 	for (i = 0; i < b; i++) {
-		wait_on_buffer(bh[i]);
+		if (unlikely(squashfs_wait_on_buffer_killable(bh[i]))) {
+			/* If the read operation has been interrupted by SIGKILL,
+			 * no matter whether the bh has been uptodate, ignore it.
+			 */
+			ERROR("squashfs_read_data interrupted by SIGKILL\n");
+			goto block_release;
+		}
 		if (!buffer_uptodate(bh[i]))
 			goto block_release;
 	}
-- 
1.7.5.4

