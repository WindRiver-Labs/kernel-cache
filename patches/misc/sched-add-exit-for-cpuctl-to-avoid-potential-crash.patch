From 85c5879c6bd18435d75442ad1f0a33a1a4b8d1f6 Mon Sep 17 00:00:00 2001
From: Zumeng Chen <zumeng.chen@windriver.com>
Date: Thu, 18 Nov 2010 06:56:46 -0800
Subject: [PATCH] sched: add exit for cpuctl to avoid potential crash

If tsk is not in &rq->cfs, exit function should dequeue it from
tsk->se->cfs_rq and enqueue into &rq->cfs. This can avoid the
potential NULL pointer reference to tsk->se->cfs_rq in tick or
pick_next_task.

For example, when a process grouped in some cpu controller was killed
by signal, so do_exit will be called to halt the process. If do_exit
is pending before running into schedule(), and tsk->se->parent is
kfreed due to destory of the cpu controller by rmdir. Then kernel
will crash as follows shown when do_exit waken again:

BUG: unable to handle kernel NULL pointer dereference at 00000008
IP: [<c11eb2c3>] rb_insert_color+0x23/0x110
*pde = 00000000
Oops: 0000 [#1] PREEMPT
LTT NESTING LEVEL : 0
last sysfs file: /sys/kernel/uevent_seqnum

Pid: 669, comm: czm.sh Not tainted 2.6.34.6 #44 /Latitude D610
EIP: 0060:[<c11eb2c3>] EFLAGS: 00010046 CPU: 0
EIP is at rb_insert_color+0x23/0x110
EAX: 00000000 EBX: de5aa1f8 ECX: dc814f34 EDX: c15d27e8
ESI: 00000000 EDI: ddb78d08 EBP: ddbf3e78 ESP: ddbf3e60
 DS: 007b ES: 007b FS: 0000 GS: 0033 SS: 0068
Process czm.sh (pid: 669, ti=ddbf2000 task=de5aa000 task.ti=ddbf2000)
Stack:
 c152f26c c15d27e8 c15ca498 de5aa1f8 dc814f34 ddb78d08 ddbf3ed0 c1020cb3
<0> c152f26c ddb78d00 de5aa1f8 de5aa02c ddb14060 00000000 00000002 00124cc2
<0> 00000000 00000034 2f5d8c0c df3ad2ec c15d27e8 00000000 dc814f2c d0a273f4
Call Trace:
 [<c1020cb3>] ? __enqueue_entity+0xd3/0x2e0
 [<c102365b>] ? enqueue_entity+0x6b/0xc0
 [<c10236f6>] ? enqueue_task_fair+0x46/0x80
 [<c101d9a9>] ? enqueue_task+0x39/0x50
 [<c101dafa>] ? activate_task+0x2a/0x40
 [<c1027d86>] ? wake_up_new_task+0x56/0x120
 [<c1044a7d>] ? __task_pid_nr_ns+0x5d/0xc0
 [<c102b7da>] ? do_fork+0xda/0x380
 [<c1081eed>] ? call_rcu_sched+0xd/0x10
 [<c1081ef8>] ? call_rcu+0x8/0x10
 [<c10090ff>] ? sys_clone+0x2f/0x40
 [<c1002ded>] ? ptregs_clone+0x15/0x28
 [<c1480321>] ? system_call_done+0x0/0x4
EIP: [<c11eb2c3>] rb_insert_color+0x23/0x110 SS:ESP 0068:ddbf3e60

To enable KMEMLEAK and TRACER can reproduce the crash above in
ltp-full/testcases/kernel/controllers/cpuctl_fj, which will
block do_exit more easily.

Reported-by: Haotian Zhang <haotian.zhang@windriver.com>
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 kernel/sched.c |   40 ++++++++++++++++++++++++++++++++++++++++
 1 files changed, 40 insertions(+), 0 deletions(-)

diff --git a/kernel/sched.c b/kernel/sched.c
index 2f88979..28d38bd 100644
--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -8746,6 +8746,45 @@ cpu_cgroup_attach(struct cgroup_subsys *ss, struct cgroup *cgrp,
 	}
 }
 
+/*
+ * If tsk is not in &rq->cfs, exit function should dequeue
+ * it from tsk->se->cfs_rq and enqueue into &rq->cfs,which
+ * can avoid the potential NULL pointer reference to
+ * tsk->se->cfs_rq in pick_next_task or tick.
+ */
+static void
+cpu_cgroup_exit(struct cgroup_subsys *ss, struct task_struct *tsk)
+{
+	unsigned long flags;
+	struct rq *rq;
+
+	rq = task_rq_lock(tsk, &flags);
+
+	if (tsk->se.cfs_rq != &rq->cfs) {
+		update_rq_clock(rq);
+		dequeue_task(rq, tsk, 0);
+		tsk->sched_class->put_prev_task(rq, tsk);
+
+#ifdef CONFIG_FAIR_GROUP_SCHED
+		tsk->se.cfs_rq = &rq->cfs;
+		tsk->se.parent = NULL;
+#endif
+
+#ifdef CONFIG_RT_GROUP_SCHED
+		tsk->rt.rt_rq  = &rq->rt;
+		tsk->rt.parent = NULL;
+#endif
+
+		if (tsk->sched_class->task_move_group)
+			tsk->sched_class->task_move_group(tsk, 1);
+
+		tsk->sched_class->set_curr_task(rq);
+		enqueue_task(rq, tsk, 0, false);
+	}
+
+	task_rq_unlock(rq, &flags);
+}
+
 #ifdef CONFIG_FAIR_GROUP_SCHED
 static int cpu_shares_write_u64(struct cgroup *cgrp, struct cftype *cftype,
 				u64 shareval)
@@ -8818,6 +8857,7 @@ struct cgroup_subsys cpu_cgroup_subsys = {
 	.destroy	= cpu_cgroup_destroy,
 	.can_attach	= cpu_cgroup_can_attach,
 	.attach		= cpu_cgroup_attach,
+	.exit		= cpu_cgroup_exit,
 	.populate	= cpu_cgroup_populate,
 	.subsys_id	= cpu_cgroup_subsys_id,
 	.early_init	= 1,
-- 
1.6.5.2

