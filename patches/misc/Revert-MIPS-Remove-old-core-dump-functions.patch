From c7fdd331b0aa84d9fc2a2555c2abf988e17b52ff Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Mon, 16 Nov 2015 16:35:03 +0800
Subject: [PATCH] Revert "MIPS: Remove old core dump functions"

This reverts commit 30852ad0039b ("MIPS: Remove old core dump functions").

crash_save_cpu() calls elf_core_copy_kernel_regs(), so we need
ELF_CORE_COPY_REGS, else MIPS system would hang during kdump as below:

Kernel bug detected[#2]:
CPU: 2 PID: 520 Comm: sh Tainted: G      D
task: 800000004b729c00 ti: 800000004b7dc000 task.ti: 800000004b7dc000
$ 0   : 0000000000000000 0000000000000010 800000004b7df600 ffffffff80af7420
$ 4   : 800000004b7df7e0 0000000000000000 0000000000000000 0000000000000000
$ 8   : ffff800000000000 0000000000000001 293d666666666666 6666383032623565
$12   : 0000000000000020 ffffffff805b950c 000000000000000e 0000000000000000
$16   : ffffffff80bb0000 0000000000000000 ffffffff80b90000 ffffffff80a11968
$20   : 800000004c2ade80 0000000000000001 0000000000030002 800000004c2adee8
$24   : 800000004b7df7b0 ffffffff801015c0
$28   : 800000004b7dc000 800000004b7df600 ffffffff80d80000 ffffffff802008bc
Hi    : 0000000000000009
Lo    : 652e82f53d5951d6
epc   : ffffffff802008bc crash_save_cpu+0x64/0x68
ra    : ffffffff802008bc crash_save_cpu+0x64/0x68
Status: 30009ce2	KX SX UX KERNEL EXL
Cause : 40808024
PrId  : 000d9500 (Cavium Octeon III)
Modules linked in:
Process sh (pid: 520, threadinfo=800000004b7dc000, task=800000004b729c00,
tls=0000000077d83490)
Stack : 0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  0000000000000000 0000000000000000 0000000000000000 0000000000000000
	  ...
Call Trace:
[<ffffffff802008bc>] crash_save_cpu+0x64/0x68
[<ffffffff8016b4a8>] default_machine_crash_shutdown+0x48/0x100
[<ffffffff80200a10>] crash_kexec+0x68/0xa8
[<ffffffff808c9d5c>] panic+0xdc/0x224
[<ffffffff80158d90>] die+0x128/0x138
[<ffffffff808d3a5c>] __do_page_fault+0x59c/0x5b0
[<ffffffff80152364>] resume_userspace_check+0x0/0x10
[<ffffffff80614870>] sysrq_handle_crash+0x20/0x28
[<ffffffff8061536c>] __handle_sysrq+0x14c/0x1f8
[<ffffffff806159e8>] write_sysrq_trigger+0x58/0x78
[<ffffffff8033ae24>] proc_reg_write+0x74/0xa8
[<ffffffff802d2124>] vfs_write+0xa4/0x1e8
[<ffffffff802d2c3c>] SyS_write+0x64/0xe8
[<ffffffff80169080>] handle_sys+0x120/0x148

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/mips/include/asm/elf.h      | 17 +++++++++++++
 arch/mips/kernel/binfmt_elfo32.c | 33 ++++++++++++++++++++++++
 arch/mips/kernel/process.c       | 55 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 105 insertions(+)

diff --git a/arch/mips/include/asm/elf.h b/arch/mips/include/asm/elf.h
index f19e890..f66fa2d 100644
--- a/arch/mips/include/asm/elf.h
+++ b/arch/mips/include/asm/elf.h
@@ -375,6 +375,23 @@ do {									\
 
 #endif /* CONFIG_64BIT */
 
+struct pt_regs;
+struct task_struct;
+
+extern void elf_dump_regs(elf_greg_t *, struct pt_regs *regs);
+extern int dump_task_regs(struct task_struct *, elf_gregset_t *);
+extern int dump_task_fpu(struct task_struct *, elf_fpregset_t *);
+
+#ifndef ELF_CORE_COPY_REGS
+#define ELF_CORE_COPY_REGS(elf_regs, regs)			\
+	elf_dump_regs((elf_greg_t *)&(elf_regs), regs);
+#endif
+#ifndef ELF_CORE_COPY_TASK_REGS
+#define ELF_CORE_COPY_TASK_REGS(tsk, elf_regs) dump_task_regs(tsk, elf_regs)
+#endif
+#define ELF_CORE_COPY_FPREGS(tsk, elf_fpregs)			\
+	dump_task_fpu(tsk, elf_fpregs)
+
 #define CORE_DUMP_USE_REGSET
 #define ELF_EXEC_PAGESIZE	PAGE_SIZE
 
diff --git a/arch/mips/kernel/binfmt_elfo32.c b/arch/mips/kernel/binfmt_elfo32.c
index 9287678..087e768 100644
--- a/arch/mips/kernel/binfmt_elfo32.c
+++ b/arch/mips/kernel/binfmt_elfo32.c
@@ -71,6 +71,17 @@ typedef elf_fpreg_t elf_fpregset_t[ELF_NFPREG];
 #define ELF_ET_DYN_BASE		(TASK32_SIZE / 3 * 2)
 
 #include <asm/processor.h>
+#include <asm/reg.h>
+
+/* These MUST be defined before elf.h gets included */
+extern void elf32_core_copy_regs(elf_gregset_t grp, struct pt_regs *regs);
+#define ELF_CORE_COPY_REGS(_dest, _regs) elf32_core_copy_regs(_dest, _regs);
+#define ELF_CORE_COPY_TASK_REGS(_tsk, _dest)				\
+({									\
+	int __res = 1;							\
+	elf32_core_copy_regs(*(_dest), task_pt_regs(_tsk));		\
+	__res;								\
+})
 
 #include <linux/module.h>
 #include <linux/elfcore.h>
@@ -129,6 +140,28 @@ jiffies_to_compat_timeval(unsigned long jiffies, struct compat_timeval *value)
 	value->tv_usec = rem / NSEC_PER_USEC;
 }
 
+void elf32_core_copy_regs(elf_gregset_t grp, struct pt_regs *regs)
+{
+	int i;
+
+	for (i = 0; i < MIPS32_EF_R0; i++)
+		grp[i] = 0;
+	grp[MIPS32_EF_R0] = 0;
+	for (i = 1; i <= 31; i++)
+		grp[MIPS32_EF_R0 + i] = (elf_greg_t) regs->regs[i];
+	grp[MIPS32_EF_R26] = 0;
+	grp[MIPS32_EF_R27] = 0;
+	grp[MIPS32_EF_LO] = (elf_greg_t) regs->lo;
+	grp[MIPS32_EF_HI] = (elf_greg_t) regs->hi;
+	grp[MIPS32_EF_CP0_EPC] = (elf_greg_t) regs->cp0_epc;
+	grp[MIPS32_EF_CP0_BADVADDR] = (elf_greg_t) regs->cp0_badvaddr;
+	grp[MIPS32_EF_CP0_STATUS] = (elf_greg_t) regs->cp0_status;
+	grp[MIPS32_EF_CP0_CAUSE] = (elf_greg_t) regs->cp0_cause;
+#ifdef MIPS32_EF_UNUSED0
+	grp[MIPS32_EF_UNUSED0] = 0;
+#endif
+}
+
 MODULE_DESCRIPTION("Binary format loader for compatibility with o32 Linux/MIPS binaries");
 MODULE_AUTHOR("Ralf Baechle (ralf@linux-mips.org)");
 
diff --git a/arch/mips/kernel/process.c b/arch/mips/kernel/process.c
index f2975d4..7d8bab9 100644
--- a/arch/mips/kernel/process.c
+++ b/arch/mips/kernel/process.c
@@ -175,6 +175,61 @@ int copy_thread(unsigned long clone_flags, unsigned long usp,
 	return 0;
 }
 
+/* Fill in the fpu structure for a core dump.. */
+int dump_fpu(struct pt_regs *regs, elf_fpregset_t *r)
+{
+	int i;
+
+	for (i = 0; i < NUM_FPU_REGS; i++)
+		memcpy(&r[i], &current->thread.fpu.fpr[i], sizeof(*r));
+
+	memcpy(&r[NUM_FPU_REGS], &current->thread.fpu.fcr31,
+	       sizeof(current->thread.fpu.fcr31));
+
+	return 1;
+}
+
+void elf_dump_regs(elf_greg_t *gp, struct pt_regs *regs)
+{
+	int i;
+
+	for (i = 0; i < EF_R0; i++)
+		gp[i] = 0;
+	gp[EF_R0] = 0;
+	for (i = 1; i <= 31; i++)
+		gp[EF_R0 + i] = regs->regs[i];
+	gp[EF_R26] = 0;
+	gp[EF_R27] = 0;
+	gp[EF_LO] = regs->lo;
+	gp[EF_HI] = regs->hi;
+	gp[EF_CP0_EPC] = regs->cp0_epc;
+	gp[EF_CP0_BADVADDR] = regs->cp0_badvaddr;
+	gp[EF_CP0_STATUS] = regs->cp0_status;
+	gp[EF_CP0_CAUSE] = regs->cp0_cause;
+#ifdef EF_UNUSED0
+	gp[EF_UNUSED0] = 0;
+#endif
+}
+
+int dump_task_regs(struct task_struct *tsk, elf_gregset_t *regs)
+{
+	elf_dump_regs(*regs, task_pt_regs(tsk));
+	return 1;
+}
+
+int dump_task_fpu(struct task_struct *t, elf_fpregset_t *fpr)
+{
+	int i;
+
+	for (i = 0; i < NUM_FPU_REGS; i++)
+		memcpy(&fpr[i], &t->thread.fpu.fpr[i], sizeof(*fpr));
+
+	memcpy(&fpr[NUM_FPU_REGS], &t->thread.fpu.fcr31,
+	       sizeof(t->thread.fpu.fcr31));
+
+	return 1;
+}
+
 #ifdef CONFIG_CC_STACKPROTECTOR
 #include <linux/stackprotector.h>
 unsigned long __stack_chk_guard __read_mostly;
-- 
2.0.2

