From e3fe39cbc16f1f43c3f57a626630b5227095651a Mon Sep 17 00:00:00 2001
From: John Linn <john.linn@xilinx.com>
Date: Thu, 12 Apr 2012 14:21:14 -0700
Subject: [PATCH 295/628] Xilinx: ARM: I2C: repeated start correction
 continuation

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit b4b262a0aa3073b3c8e5910e92bcf79b118064d8

This patch continues the fix for repeated start that
was in the previous commit.  The previous commit was
not complete.

This patch is based on a patch from Suneel but was
converted to be incremental.

Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/i2c/busses/i2c-xilinx_ps.c |   10 +++++++---
 1 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/drivers/i2c/busses/i2c-xilinx_ps.c b/drivers/i2c/busses/i2c-xilinx_ps.c
index 391f5da..8b3af00 100644
--- a/drivers/i2c/busses/i2c-xilinx_ps.c
+++ b/drivers/i2c/busses/i2c-xilinx_ps.c
@@ -293,6 +293,7 @@ static void xi2cps_mrecv(struct xi2cps *id)
 	 * Set the slave address in address register.
 	 * Check for the message size against FIFO depth and set the
 	 * HOLD bus bit if it is more than FIFO depth.
+	 * Clear the interrupts in interrupt status register.
 	 */
 	ctrl_reg = xi2cps_readreg(XI2CPS_CR_OFFSET);
 	ctrl_reg |= (XI2CPS_CR_RW_MASK | XI2CPS_CR_CLR_FIFO_MASK);
@@ -345,6 +346,7 @@ static void xi2cps_msend(struct xi2cps *id)
 	unsigned int avail_bytes;
 	unsigned int bytes_to_send;
 	unsigned int ctrl_reg;
+	unsigned int isr_status;
 
 	id->p_recv_buf = NULL;
 	id->p_send_buf = id->p_msg->buf;
@@ -355,17 +357,19 @@ static void xi2cps_msend(struct xi2cps *id)
 	 * Set the slave address in address register.
 	 * Check for the message size against FIFO depth and set the
 	 * HOLD bus bit if it is more than FIFO depth.
+	 * Clear the interrupts in interrupt status register.
 	 */
 	ctrl_reg = xi2cps_readreg(XI2CPS_CR_OFFSET);
 	ctrl_reg &= ~XI2CPS_CR_RW_MASK;
 	ctrl_reg |= XI2CPS_CR_CLR_FIFO_MASK;
 
-	if ((id->send_count) > XI2CPS_FIFO_DEPTH || id->bus_hold_flag)
+	if ((id->send_count) > XI2CPS_FIFO_DEPTH)
 		ctrl_reg |= XI2CPS_CR_HOLD_BUS_MASK;
-	else
-		ctrl_reg &= ~XI2CPS_CR_HOLD_BUS_MASK;
 	xi2cps_writereg(ctrl_reg, XI2CPS_CR_OFFSET);
 
+	isr_status = xi2cps_readreg(XI2CPS_ISR_OFFSET);
+	xi2cps_writereg(isr_status, XI2CPS_ISR_OFFSET);
+
 	/*
 	 * Calculate the space available in FIFO. Check the message length
 	 * against the space available, and fill the FIFO accordingly.
-- 
1.7.5.4

