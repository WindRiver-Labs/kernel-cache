From 3a6a3792226afdafb48b76ceba9dff59d360b604 Mon Sep 17 00:00:00 2001
From: Jun Zhang <jun.zhang@windriver.com>
Date: Wed, 6 Mar 2019 19:16:20 +0800
Subject: [PATCH] x86: fix the issue that enter into an infinite loop when
 execute syscall seccomp in kernel version 4.1.21.

commit 885f82bfbc6fefb6664ea27965c3ab9ac4194b8c upstream.
commit acdf4971010ee1f01b7e8986a9ef11b8c88b85c8 v3.16.63.

Issue:
On the cpu with feature X86_FEATURE_SSBD and X86_BUG_SPEC_STORE_BYPASS,
when a process execute syscall seccomp, it will enter into an infinite
loop in kernel. The cpu usage is very high.

root cause:
On the cpu with feature X86_FEATURE_SSBD and X86_BUG_SPEC_STORE_BYPASS,
When a process execute syscall seccomp, it will set _TIF_SSBD in the
thread flag of the task.
In the path of syscall seccomp return from kernel, it will check the
thread flag of the task to find whether there are important things to
do. Because there are no work to do with the _TIF_SSBD and the _TIF_SSBD
is not be excluded, it will enter into an infinite loop.

solution:
Exclude _TIF_SSBD from _TIF_WORK_MASK and _TIF_ALLWORK_MASK. Becuase the
system compares the thread flag of the task with  _TIF_WORK_MASK and
_TIF_ALLWORK_MASK, exclude _TIF_SSBD can resolve this issue.
This solution comes from commit acdf4971010ee1f01b7e8986a9ef11b8c88b85c8
v3.16.63. Our code of the syscall returns is the same as v3.16.63. The
code of the syscall returns in v4.4.147 does not has this issue.

Signed-off-by: Jun Zhang <jun.zhang@windriver.com>
Signed-off-by: Jiping Ma <jiping.ma2@windriver.com>
---
 arch/x86/include/asm/thread_info.h |    6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/arch/x86/include/asm/thread_info.h b/arch/x86/include/asm/thread_info.h
index 22e356e..9eefbe9 100644
--- a/arch/x86/include/asm/thread_info.h
+++ b/arch/x86/include/asm/thread_info.h
@@ -151,12 +151,12 @@ struct thread_info {
 #define _TIF_WORK_MASK							\
 	(0x0000FFFF &							\
 	 ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|			\
-	   _TIF_SINGLESTEP|_TIF_SECCOMP|_TIF_SYSCALL_EMU))
+           _TIF_SINGLESTEP|_TIF_SECCOMP|_TIF_SYSCALL_EMU|_TIF_SSBD))
 
 /* work to do on any return to user space */
 #define _TIF_ALLWORK_MASK						\
-	((0x0000FFFF & ~_TIF_SECCOMP) | _TIF_SYSCALL_TRACEPOINT |	\
-	_TIF_NOHZ)
+	((0x0000FFFF & ~(_TIF_SSBD|_TIF_SECCOMP)) |			\
+	 _TIF_SYSCALL_TRACEPOINT | _TIF_NOHZ)
 
 /* Only used for 64 bit */
 #define _TIF_DO_NOTIFY_MASK						\
-- 
1.7.9.5

