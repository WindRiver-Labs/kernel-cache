From d005242505ee92522399e3532c3da9f7b843575f Mon Sep 17 00:00:00 2001
From: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date: Mon, 9 Sep 2013 13:22:51 -0700
Subject: [PATCH 272/628] spi: xspips: Call clk_get_rate() outside of critical
 section

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 249d3aed4f11e5473108bfe4148484fffadc066c

clk_get_rate() is called in a critical section. Since clk_get_rate()
acquires a mutex, which can sleep the following kernel BUG message is
triggered under certain circumstances in combination with cpufreq:

  Switching to clocksource ttc_clocksource
  Switching to clocksource jiffies
  Switching to clocksource ttc_clocksource
  BUG: scheduling while atomic: kworker/u4:0/6/0x00000002
  Modules linked in:
  CPU: 1 PID: 6 Comm: kworker/u4:0 Not tainted 3.10.0-xilinx-14894-g8dbdc6f #293
  Workqueue: e0006000.ps7-spi xspips_work_queue
  [<c0014520>] (unwind_backtrace+0x0/0x11c) from [<c0011624>] (show_stack+0x10/0x14)
  [<c0011624>] (show_stack+0x10/0x14) from [<c03c3730>] (__schedule_bug+0x48/0x60)
  [<c03c3730>] (__schedule_bug+0x48/0x60) from [<c03c7610>] (__schedule+0x70/0x510)
  [<c03c7610>] (__schedule+0x70/0x510) from [<c03c7e88>] (schedule_preempt_disabled+0x24/0x34)
  [<c03c7e88>] (schedule_preempt_disabled+0x24/0x34) from [<c03c6c28>] (__mutex_lock_slowpath+0x1a4/0x22c)
  [<c03c6c28>] (__mutex_lock_slowpath+0x1a4/0x22c) from [<c03c6ce0>] (mutex_lock+0x30/0x48)
  [<c03c6ce0>] (mutex_lock+0x30/0x48) from [<c0316c58>] (clk_prepare_lock+0x48/0xe4)
  [<c0316c58>] (clk_prepare_lock+0x48/0xe4) from [<c0317ee8>] (clk_get_rate+0xc/0x44)
  [<c0317ee8>] (clk_get_rate+0xc/0x44) from [<c029a704>] (xspips_setup_transfer+0xc4/0x168)
  [<c029a704>] (xspips_setup_transfer+0xc4/0x168) from [<c029ad3c>] (xspips_work_queue+0x9c/0x280)
  [<c029ad3c>] (xspips_work_queue+0x9c/0x280) from [<c0037120>] (process_one_work+0x200/0x33c)
  [<c0037120>] (process_one_work+0x200/0x33c) from [<c0037700>] (worker_thread+0x204/0x348)
  [<c0037700>] (worker_thread+0x204/0x348) from [<c003c590>] (kthread+0xa0/0xb0)
  [<c003c590>] (kthread+0xa0/0xb0) from [<c000e658>] (ret_from_fork+0x14/0x3c)

Fix this issue by moving the call to clk_get_rate() out of the critical
section.

Reported-by: Matthias Auchmann <m.auchmann@artech.at>
Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/spi/spi-xilinx-ps.c |    9 +++++----
 1 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/drivers/spi/spi-xilinx-ps.c b/drivers/spi/spi-xilinx-ps.c
index f408469..6ca26ab 100644
--- a/drivers/spi/spi-xilinx-ps.c
+++ b/drivers/spi/spi-xilinx-ps.c
@@ -215,7 +215,7 @@ static int xspips_setup_transfer(struct spi_device *spi,
 	u32 ctrl_reg;
 	u32 req_hz;
 	u32 baud_rate_val;
-	unsigned long flags;
+	unsigned long flags, frequency;
 
 	bits_per_word = (transfer) ?
 			transfer->bits_per_word : spi->bits_per_word;
@@ -227,6 +227,8 @@ static int xspips_setup_transfer(struct spi_device *spi,
 		return -EINVAL;
 	}
 
+	frequency = clk_get_rate(xspi->devclk);
+
 	spin_lock_irqsave(&xspi->ctrl_reg_lock, flags);
 
 	xspips_write(xspi->regs + XSPIPS_ER_OFFSET, ~XSPIPS_ER_ENABLE_MASK);
@@ -242,15 +244,14 @@ static int xspips_setup_transfer(struct spi_device *spi,
 	/* Set the clock frequency */
 	if (xspi->speed_hz != req_hz) {
 		baud_rate_val = 0;
-		while ((baud_rate_val < 8) && (clk_get_rate(xspi->devclk) /
+		while ((baud_rate_val < 8) && (frequency /
 					(2 << baud_rate_val)) > req_hz)
 			baud_rate_val++;
 
 		ctrl_reg &= 0xFFFFFFC7;
 		ctrl_reg |= (baud_rate_val << 3);
 
-		xspi->speed_hz =
-			(clk_get_rate(xspi->devclk) / (2 << baud_rate_val));
+		xspi->speed_hz = (frequency / (2 << baud_rate_val));
 	}
 
 	xspips_write(xspi->regs + XSPIPS_CR_OFFSET, ctrl_reg);
-- 
1.7.5.4

