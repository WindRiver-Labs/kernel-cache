From c5614f6aafa82b2e2b4059f0ec1e92a8fd211926 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Tue, 23 Dec 2014 06:56:34 +0000
Subject: [PATCH] ARM: arch_timer: improve the resolution as sched_clock

Now sched_clock_mult is calculated by (NSEC_PER_SEC/arch_timer_rate),
this is not accurate enough, because for example:
if there is a timer with frequence 256MHz, we can get ns per cycle
for this frequence is about 3.9ns. But we can only get 3ns.
The resolusion loses about (3.9-3)/3.9 = 23% and it isn't acceptable.

The most noticeable bad thing is that if we run a task with
100% cpu occupied, we can only get about 76% cpu load for
that task in 'top'.

So introduce sched_clock_shift to improve the resolution like
clocks_calc_mult_shift() is doing.

Signed-off-by: Yong Zhang <yong.zhang@windriver.com>
---
 arch/arm/kernel/arch_timer.c |   13 +++++++++----
 1 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/arch/arm/kernel/arch_timer.c b/arch/arm/kernel/arch_timer.c
index 59dcdce..1f4c260 100644
--- a/arch/arm/kernel/arch_timer.c
+++ b/arch/arm/kernel/arch_timer.c
@@ -23,10 +23,12 @@ static unsigned long arch_timer_read_counter_long(void)
 }
 
 static u32 sched_clock_mult __read_mostly;
+static u32 sched_clock_shift __read_mostly;
 
 static unsigned long long notrace arch_timer_sched_clock(void)
 {
-	return arch_timer_read_counter() * sched_clock_mult;
+	return (arch_timer_read_counter() * sched_clock_mult) >>
+					sched_clock_shift;
 }
 
 static struct delay_timer arch_delay_timer;
@@ -42,17 +44,20 @@ static void __init arch_timer_delay_timer_register(void)
 int __init arch_timer_arch_init(void)
 {
         u32 arch_timer_rate = arch_timer_get_rate();
+	/* 56 bits minimum, so we assume worst case rollover */
+	u64 max_cyc = (1ULL << 56) - 1;
 
 	if (arch_timer_rate == 0)
 		return -ENXIO;
 
 	arch_timer_delay_timer_register();
 
-	/* Cache the sched_clock multiplier to save a divide in the hot path. */
-	sched_clock_mult = NSEC_PER_SEC / arch_timer_rate;
+	clocks_calc_mult_shift(&sched_clock_mult, &sched_clock_shift,
+				arch_timer_rate, NSEC_PER_SEC,
+				do_div(max_cyc, arch_timer_rate));
 	sched_clock_func = arch_timer_sched_clock;
 	pr_info("sched_clock: ARM arch timer >56 bits at %ukHz, resolution %uns\n",
-		arch_timer_rate / 1000, sched_clock_mult);
+		arch_timer_rate / 1000, sched_clock_mult>>sched_clock_shift);
 
 	return 0;
 }
-- 
1.7.5.4

