From 3b6bc77d461006ad969d08846bfa332affc0218c Mon Sep 17 00:00:00 2001
From: Anirudha Sarangi <anirudh@xilinx.com>
Date: Wed, 3 Apr 2013 23:07:02 +0530
Subject: [PATCH 378/628] xilinx_emacps: Fixes bug in skb handling for
 fragmented packets

git://github.com/Xilinx/linux-xlnx.git xilinx-v14.7
commit 6a0bedad60e2bca8d9b50bf81b9895e29e31a6d7

The existing driver has a bug related to skb handling for fragmented
Tx packets. This patch fixes it.

Signed-off-by: Anirudha Sarangi <anirudh@xilinx.com>
Signed-off-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/net/ethernet/xilinx/xilinx_emacps.c |   16 ++++++++++------
 1 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/xilinx/xilinx_emacps.c b/drivers/net/ethernet/xilinx/xilinx_emacps.c
index dbc1448..1a0db68 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emacps.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emacps.c
@@ -1271,6 +1271,7 @@ static void xemacps_tx_poll(unsigned long data)
 	struct net_local *lp = netdev_priv(ndev);
 	u32 regval;
 	u32 len = 0;
+	u32 leninbd = 0;
 	unsigned int bdcount = 0;
 	unsigned int bdpartialcount = 0;
 	unsigned int sop = 0;
@@ -1326,8 +1327,8 @@ static void xemacps_tx_poll(unsigned long data)
 		rp = &lp->tx_skb[lp->tx_bd_ci];
 		skb = rp->skb;
 
-		BUG_ON(skb == NULL);
-		len += skb->len;
+		leninbd = cur_p->ctrl & XEMACPS_TXBUF_LEN_MASK;
+		len += leninbd;
 
 #ifdef CONFIG_XILINX_PS_EMAC_HWTSTAMP
 		if ((lp->hwtstamp_config.tx_type == HWTSTAMP_TX_ON) &&
@@ -1348,10 +1349,11 @@ static void xemacps_tx_poll(unsigned long data)
 		}
 #endif /* CONFIG_XILINX_PS_EMAC_HWTSTAMP */
 
-		dma_unmap_single(&lp->pdev->dev, rp->mapping, skb->len,
+		dma_unmap_single(&lp->pdev->dev, rp->mapping, leninbd,
 			DMA_TO_DEVICE);
+		if (skb != NULL)
+			dev_kfree_skb(skb);
 		rp->skb = NULL;
-		dev_kfree_skb(skb);
 		/* log tx completed packets and bytes, errors logs
 		 * are in other error counters.
 		 */
@@ -2052,9 +2054,11 @@ static int xemacps_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 			frag++;
 		}
 
-		lp->tx_skb[lp->tx_bd_tail].skb = skb;
+		if (i == 0)
+			lp->tx_skb[lp->tx_bd_tail].skb = skb;
+		else
+			lp->tx_skb[lp->tx_bd_tail].skb = NULL;
 		lp->tx_skb[lp->tx_bd_tail].mapping = mapping;
-
 		cur_p->addr = mapping;
 
 		/* Preserve only critical status bits.  Packet is NOT to be
-- 
1.7.5.4

