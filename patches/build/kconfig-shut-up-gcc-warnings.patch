From b84af554be11008a3c8a5bd59b73a9daf720007c Mon Sep 17 00:00:00 2001
Message-Id: <b84af554be11008a3c8a5bd59b73a9daf720007c.1232224208.git.paul.gortmaker@windriver.com>
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Sat, 17 Jan 2009 14:54:05 -0500
Subject: [PATCH] kconfig: shut up stupid gcc warnings.
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 8bit

Newer host compilers will complain with a handfull of the following:

scripts/kconfig/conf.c: In function ‘conf_askvalue’:
scripts/kconfig/conf.c:104: warning: ignoring return value of ‘fgets’,
declared with attribute warn_unused_result

scripts/kconfig/expr.c: In function ‘expr_print_file_helper’:
scripts/kconfig/expr.c:1090: warning: ignoring return value of ‘fwrite’,
declared with attribute warn_unused_result

...so smack it with a piece of firewood until it stops twitching.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 scripts/kconfig/conf.c     |    6 ++++--
 scripts/kconfig/confdata.c |    7 ++++---
 scripts/kconfig/expr.c     |    3 ++-
 3 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/scripts/kconfig/conf.c b/scripts/kconfig/conf.c
index 3e1057f..aa8a3f0 100644
--- a/scripts/kconfig/conf.c
+++ b/scripts/kconfig/conf.c
@@ -77,6 +77,7 @@ static void check_stdin(void)
 static int conf_askvalue(struct symbol *sym, const char *def)
 {
 	enum symbol_type type = sym_get_type(sym);
+	char *c;
 
 	if (!sym_has_value(sym))
 		printf(_("(NEW) "));
@@ -101,7 +102,7 @@ static int conf_askvalue(struct symbol *sym, const char *def)
 		check_stdin();
 	case ask_all:
 		fflush(stdout);
-		fgets(line, 128, stdin);
+		c = fgets(line, 128, stdin);
 		return 1;
 	default:
 		break;
@@ -258,6 +259,7 @@ static int conf_choice(struct menu *menu)
 
 	while (1) {
 		int cnt, def;
+		char *c;
 
 		printf("%*s%s\n", indent - 1, "", _(menu_get_prompt(menu)));
 		def_sym = sym_get_choice_value(sym);
@@ -303,7 +305,7 @@ static int conf_choice(struct menu *menu)
 			check_stdin();
 		case ask_all:
 			fflush(stdout);
-			fgets(line, 128, stdin);
+			c = fgets(line, 128, stdin);
 			strip(line);
 			if (line[0] == '?') {
 				printf("\n%s\n", get_help(menu));
diff --git a/scripts/kconfig/confdata.c b/scripts/kconfig/confdata.c
index b91cf24..0392d29 100644
--- a/scripts/kconfig/confdata.c
+++ b/scripts/kconfig/confdata.c
@@ -498,7 +498,8 @@ int conf_write(const char *name)
 				while (1) {
 					l = strcspn(str, "\"\\");
 					if (l) {
-						fwrite(str, l, 1, out);
+						int w;
+						w = fwrite(str, l, 1, out);
 						str += l;
 					}
 					if (!*str)
@@ -736,8 +737,8 @@ int conf_write_autoconf(void)
 			while (1) {
 				l = strcspn(str, "\"\\");
 				if (l) {
-					fwrite(str, l, 1, out);
-					fwrite(str, l, 1, out_h);
+					int w = fwrite(str, l, 1, out);
+					w = fwrite(str, l, 1, out_h);
 					str += l;
 				}
 				if (!*str)
diff --git a/scripts/kconfig/expr.c b/scripts/kconfig/expr.c
index 579ece4..a2da391 100644
--- a/scripts/kconfig/expr.c
+++ b/scripts/kconfig/expr.c
@@ -1087,7 +1087,8 @@ void expr_print(struct expr *e, void (*fn)(void *, struct symbol *, const char *
 
 static void expr_print_file_helper(void *data, struct symbol *sym, const char *str)
 {
-	fwrite(str, strlen(str), 1, data);
+	int w;
+	w = fwrite(str, strlen(str), 1, data);
 }
 
 void expr_fprint(struct expr *e, FILE *out)
-- 
1.6.0.4

