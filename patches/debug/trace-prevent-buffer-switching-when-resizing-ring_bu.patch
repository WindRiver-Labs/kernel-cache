From 905103b0820a98eb1285a70f3184ddc10a5335e5 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Fri, 22 Nov 2013 17:37:02 +0800
Subject: [PATCH] trace:prevent buffer switching when resizing ring_buffer

When ring_buffer_swap_cpu(tr->max_buffer.buffer,
tr->trace_buffer.buffer) is executed between resizing tr->trace_buffer
and resizing tr->max_buffer in __tracing_resize_ring_buffer()),
it will triggered following calltrace:

WARNING: at linux/kernel/trace/trace.c:1014 update_max_tr_single+0x1b8/0x1c8()
Modules linked in: ext4 crc16 jbd2 loop
CPU: 2 PID: 1975 Comm: ftrace_buffer_s Not tainted 3.10.17-rt11-WR6.0.0.0_preempt-rt #1
Stack : 0000000000000000 0000000000000057 0000000000000000 0000000000000000
  0000000000000004 0000000000000000 ffffffffc1a90000 0000000000000000
  0000000000000000 ffffffffc1e90000 0000000000000002 0000000000000057
  c0000000f4f3f7b8 ffffffffc10755fc 0000000000000000 0000000000000000
  0000000000000000 0000000000000000 ffffffffc1e70000 ffffffffc1e70000
  ffffffffc18f9310 ffffffffc1a77cb7 ffffffffc1e711e8 c0000000f48234a0
  00000000000007b7 0000000000000002 ffffffffc1a40000 0000000000989680
  c0000000f4f3f838 c0000000f4f3f748 c0000000f4f3f860 ffffffffc107248c
  c0000000f4f3f898 ffffffffc104ded4 c0000000f4823150 ffffffffc18f9310
  0000000000000002 ffffffffc1048a70 0000000000000000 0000000000000000
  ...
Call Trace:
 [<ffffffffc1048a70>] show_stack+0xd8/0xf8
 [<ffffffffc107248c>] warn_slowpath_common+0x8c/0xe0
 [<ffffffffc111afa0>] update_max_tr_single+0x1b8/0x1c8
 [<ffffffffc17db61c>] check_critical_timing+0x1b4/0x1c8
 [<ffffffffc1125de8>] trace_preempt_on+0x160/0x180
 [<ffffffffc17e896c>] sub_preempt_count+0x94/0x130
 [<ffffffffc104ded4>] return_to_handler+0x0/0x2c

We invoke tracing_stop() in tracing_resize_ring_buffer() to prevent
buffer switching when resizing ring buffer.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 kernel/trace/trace.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index 7113672..e6c7d8d 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -3848,6 +3848,7 @@ static ssize_t tracing_resize_ring_buffer(struct trace_array *tr,
 
 	mutex_lock(&trace_types_lock);
 
+	tracing_stop();
 	if (cpu_id != RING_BUFFER_ALL_CPUS) {
 		/* make sure, this cpu is enabled in the mask */
 		if (!cpumask_test_cpu(cpu_id, tracing_buffer_mask)) {
@@ -3861,6 +3862,7 @@ static ssize_t tracing_resize_ring_buffer(struct trace_array *tr,
 		ret = -ENOMEM;
 
 out:
+	tracing_start();
 	mutex_unlock(&trace_types_lock);
 
 	return ret;
-- 
2.0.2

