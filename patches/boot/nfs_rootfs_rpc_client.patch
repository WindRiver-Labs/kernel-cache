From a84353eeaad2f80a11a900004d5173e71c95a0ec Mon Sep 17 00:00:00 2001
From: auto commit <unknown@unknown>
Date: Tue, 10 Jun 2008 23:28:02 -0400
Subject: [PATCH] 200474b5ad774c3bfab078dfe4df3d873932d514

---
 fs/nfs/client.c           |   10 ++++++++--
 fs/nfs/mount_clnt.c       |    4 +++-
 fs/nfs/nfsroot.c          |   19 +++++++++++++++----
 fs/nfs/super.c            |    2 ++
 include/linux/nfs_fs.h    |    2 +-
 include/linux/nfs_mount.h |    4 +++-
 6 files changed, 32 insertions(+), 9 deletions(-)

diff --git a/fs/nfs/client.c b/fs/nfs/client.c
index f2a092c..c92f7a8 100644
--- a/fs/nfs/client.c
+++ b/fs/nfs/client.c
@@ -466,6 +466,7 @@ static void nfs_init_timeout_values(struct rpc_timeout *to, int proto,
  */
 static int nfs_create_rpc_client(struct nfs_client *clp,
 				 const struct rpc_timeout *timeparms,
+				 unsigned int nfs_prog,
 				 rpc_authflavor_t flavor,
 				 int flags)
 {
@@ -485,6 +486,7 @@ static int nfs_create_rpc_client(struct nfs_client *clp,
 	if (!IS_ERR(clp->cl_rpcclient))
 		return 0;
 
+	nfs_program.number = nfs_prog;
 	clnt = rpc_create(&args);
 	if (IS_ERR(clnt)) {
 		dprintk("%s: cannot create RPC client. Error = %ld\n",
@@ -609,7 +611,10 @@ static int nfs_init_client(struct nfs_client *clp,
 			   const struct nfs_parsed_mount_data *data)
 {
 	int error;
+	int nfs_prog = NFS_PROGRAM;
 
+	if (data->mount_server.version >= 7)
+		nfs_prog = data->mount_server.program;
 	if (clp->cl_cons_state == NFS_CS_READY) {
 		/* the client is already initialised */
 		dprintk("<-- nfs_init_client() = 0 [already %p]\n", clp);
@@ -620,7 +625,8 @@ static int nfs_init_client(struct nfs_client *clp,
 	 * Create a client RPC handle for doing FSSTAT with UNIX auth only
 	 * - RFC 2623, sec 2.3.2
 	 */
-	error = nfs_create_rpc_client(clp, timeparms, RPC_AUTH_UNIX, 0);
+	error = nfs_create_rpc_client(clp, timeparms, nfs_prog, RPC_AUTH_UNIX, 0);
+
 	if (error < 0)
 		goto error;
 	nfs_mark_client_ready(clp, NFS_CS_READY);
@@ -976,7 +982,7 @@ static int nfs4_init_client(struct nfs_client *clp,
 	/* Check NFS protocol revision and initialize RPC op vector */
 	clp->rpc_ops = &nfs_v4_clientops;
 
-	error = nfs_create_rpc_client(clp, timeparms, authflavour,
+	error = nfs_create_rpc_client(clp, timeparms, NFS_PROGRAM, authflavour,
 					RPC_CLNT_CREATE_DISCRTRY);
 	if (error < 0)
 		goto error;
diff --git a/fs/nfs/mount_clnt.c b/fs/nfs/mount_clnt.c
index 49c7cd0..820449f 100644
--- a/fs/nfs/mount_clnt.c
+++ b/fs/nfs/mount_clnt.c
@@ -34,12 +34,13 @@ struct mnt_fhstatus {
  * @path: pointer to string containing export path to mount
  * @version: mount version to use for this request
  * @protocol: transport protocol to use for thie request
+ * @mount_prog: rpc program number to use for the request
  * @fh: pointer to location to place returned file handle
  *
  * Uses default timeout parameters specified by underlying transport.
  */
 int nfs_mount(struct sockaddr *addr, size_t len, char *hostname, char *path,
-	      int version, int protocol, struct nfs_fh *fh)
+	      int version, int protocol, int mount_prog, struct nfs_fh *fh)
 {
 	struct mnt_fhstatus	result = {
 		.fh		= fh
@@ -64,6 +65,7 @@ int nfs_mount(struct sockaddr *addr, size_t len, char *hostname, char *path,
 	dprintk("NFS: sending MNT request for %s:%s\n",
 		(hostname ? hostname : "server"), path);
 
+	mnt_program.number = mount_prog;
 	mnt_clnt = rpc_create(&args);
 	if (IS_ERR(mnt_clnt))
 		goto out_clnt_err;
diff --git a/fs/nfs/nfsroot.c b/fs/nfs/nfsroot.c
index 531379d..e76eca9 100644
--- a/fs/nfs/nfsroot.c
+++ b/fs/nfs/nfsroot.c
@@ -119,7 +119,8 @@ static int mount_port __initdata = 0;		/* Mount daemon port number */
 enum {
 	/* Options that take integer arguments */
 	Opt_port, Opt_rsize, Opt_wsize, Opt_timeo, Opt_retrans, Opt_acregmin,
-	Opt_acregmax, Opt_acdirmin, Opt_acdirmax,
+	Opt_acregmax, Opt_acdirmin, Opt_acdirmax, Opt_mountprog,
+	Opt_nfsprog,
 	/* Options that take no arguments */
 	Opt_soft, Opt_hard, Opt_intr,
 	Opt_nointr, Opt_posix, Opt_noposix, Opt_cto, Opt_nocto, Opt_ac, 
@@ -139,6 +140,8 @@ static match_table_t __initdata tokens = {
 	{Opt_acregmax, "acregmax=%u"},
 	{Opt_acdirmin, "acdirmin=%u"},
 	{Opt_acdirmax, "acdirmax=%u"},
+	{Opt_mountprog, "mountprog=%u"},
+	{Opt_nfsprog, "nfsprog=%u"},
 	{Opt_soft, "soft"},
 	{Opt_hard, "hard"},
 	{Opt_intr, "intr"},
@@ -221,6 +224,12 @@ static int __init root_nfs_parse(char *name, char *buf)
 			case Opt_acdirmax:
 				nfs_data.acdirmax = option;
 				break;
+			case Opt_mountprog:
+				nfs_data.mount_prog = option;
+				break;
+			case Opt_nfsprog:
+				nfs_data.nfs_prog = option;
+				break;
 			case Opt_soft:
 				nfs_data.flags |= NFS_MOUNT_SOFT;
 				break;
@@ -301,6 +310,8 @@ static int __init root_nfs_name(char *name)
 	nfs_data.acregmax = 60;
 	nfs_data.acdirmin = 30;
 	nfs_data.acdirmax = 60;
+	nfs_data.nfs_prog = NFS_PROGRAM;
+	nfs_data.mount_prog = NFS_MNT_PROGRAM;
 	strcpy(buf, NFS_ROOT);
 
 	/* Process options received from the remote server */
@@ -457,7 +468,7 @@ static int __init root_nfs_ports(void)
 	proto = (nfs_data.flags & NFS_MOUNT_TCP) ? IPPROTO_TCP : IPPROTO_UDP;
 
 	if (nfs_port < 0) {
-		if ((port = root_nfs_getport(NFS_PROGRAM, nfsd_ver, proto)) < 0) {
+		if ((port = root_nfs_getport(nfs_data.nfs_prog, nfsd_ver, proto)) < 0) {
 			printk(KERN_ERR "Root-NFS: Unable to get nfsd port "
 					"number from server, using default\n");
 			port = nfsd_port;
@@ -467,7 +478,7 @@ static int __init root_nfs_ports(void)
 			"as nfsd port\n", port);
 	}
 
-	if ((port = root_nfs_getport(NFS_MNT_PROGRAM, mountd_ver, proto)) < 0) {
+	if ((port = root_nfs_getport(nfs_data.mount_prog, mountd_ver, proto)) < 0) {
 		printk(KERN_ERR "Root-NFS: Unable to get mountd port "
 				"number from server, using default\n");
 		port = mountd_port;
@@ -495,7 +506,7 @@ static int __init root_nfs_get_handle(void)
 
 	set_sockaddr(&sin, servaddr, htons(mount_port));
 	status = nfs_mount((struct sockaddr *) &sin, sizeof(sin), NULL,
-			   nfs_path, version, protocol, &fh);
+			   nfs_path, version, protocol, nfs_data.mount_prog, &fh);
 	if (status < 0)
 		printk(KERN_ERR "Root-NFS: Server returned error %d "
 				"while mounting %s\n", status, nfs_path);
diff --git a/fs/nfs/super.c b/fs/nfs/super.c
index 2a4a024..e88c131 100644
--- a/fs/nfs/super.c
+++ b/fs/nfs/super.c
@@ -1184,6 +1184,7 @@ static int nfs_try_mount(struct nfs_parsed_mount_data *args,
 			   args->nfs_server.export_path,
 			   args->mount_server.version,
 			   args->mount_server.protocol,
+			   args->mount_server.program,
 			   root_fh);
 	if (status == 0)
 		return 0;
@@ -1251,6 +1252,7 @@ static int nfs_validate_mount_data(void *options,
 	case 5:
 		memset(data->context, 0, sizeof(data->context));
 	case 6:
+	case 7:
 		if (data->flags & NFS_MOUNT_VER3)
 			mntfh->size = data->root.size;
 		else
diff --git a/include/linux/nfs_fs.h b/include/linux/nfs_fs.h
index 27d6a8d..071e9a8 100644
--- a/include/linux/nfs_fs.h
+++ b/include/linux/nfs_fs.h
@@ -528,7 +528,7 @@ static inline void nfs3_forget_cached_acls(struct inode *inode)
  * linux/fs/mount_clnt.c
  */
 extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,
-		      int, int, struct nfs_fh *);
+		      int, int, int, struct nfs_fh *);
 
 /*
  * inline functions
diff --git a/include/linux/nfs_mount.h b/include/linux/nfs_mount.h
index df7c6b7..b330dbd 100644
--- a/include/linux/nfs_mount.h
+++ b/include/linux/nfs_mount.h
@@ -20,7 +20,7 @@
  * mount-to-kernel version compatibility.  Some of these aren't used yet
  * but here they are anyway.
  */
-#define NFS_MOUNT_VERSION	6
+#define NFS_MOUNT_VERSION	7
 #define NFS_MAX_CONTEXT_LEN	256
 
 struct nfs_mount_data {
@@ -43,6 +43,8 @@ struct nfs_mount_data {
 	struct nfs3_fh	root;			/* 4 */
 	int		pseudoflavor;		/* 5 */
 	char		context[NFS_MAX_CONTEXT_LEN + 1];	/* 6 */
+	int		nfs_prog; /* 7 */
+	int		mount_prog; /* 7 */
 };
 
 /* bits in the flags field */
-- 
1.5.5.1

