From 854fca0c0b5c1f09473a34ff3e87f5d8c3f59c1b Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Tue, 9 Aug 2011 19:23:13 +0800
Subject: [PATCH 31/47] Gianfar : Changes for offloading packets to ASF

Callback hooks added to offload packets to offload engine.

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
0029-Gianfar-Changes-in-for-offloading-packets-to-ASF.patch.

Signed-off-by: Rajan Gupta <rajan.gupta@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/net/gianfar.c |   45 +++++++++++++++++++++++++++++++++++++++++++++
 drivers/net/gianfar.h |   26 ++++++++++++++++++++++++++
 2 files changed, 71 insertions(+), 0 deletions(-)

diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index 0d14306..573ddad 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -100,6 +100,16 @@
 #include "gianfar.h"
 #include "fsl_pq_mdio.h"
 
+#ifdef CONFIG_AS_FASTPATH
+#include <linux/sched.h>
+
+devfp_hook_t	devfp_rx_hook;
+EXPORT_SYMBOL(devfp_rx_hook);
+
+devfp_hook_t	devfp_tx_hook;
+EXPORT_SYMBOL(devfp_tx_hook);
+#endif
+
 #define TX_TIMEOUT      (1*HZ)
 #undef BRIEF_GFAR_ERRORS
 #undef VERBOSE_GFAR_ERRORS
@@ -2882,6 +2892,11 @@ static int gfar_start_xmit(struct sk_buff *skb, struct net_device *dev)
 	unsigned long flags;
 	unsigned int nr_frags, length;
 
+#ifdef CONFIG_AS_FASTPATH
+	if (devfp_tx_hook && (skb->pkt_type != PACKET_FASTROUTE))
+		if (devfp_tx_hook(skb, dev) == AS_FP_STOLEN)
+			return 0;
+#endif
 
 	/*
 	 * TOE=1 frames larger than 2500 bytes may see excess delays
@@ -3657,6 +3672,36 @@ static int gfar_process_frame(struct net_device *dev, struct sk_buff *skb,
 	if (priv->rx_csum_enable)
 		gfar_rx_checksum(skb, fcb);
 
+#ifdef CONFIG_AS_FASTPATH
+	if (devfp_rx_hook) {
+		int drop = 0;
+
+		if (priv->vlgrp && (fcb->flags & RXFCB_VLN)) {
+			struct net_device *vlan_dev = NULL;
+
+			vlan_dev = vlan_group_get_device(priv->vlgrp,
+					fcb->vlctl & VLAN_VID_MASK);
+
+			if (vlan_dev) {
+				skb->vlan_tci = fcb->vlctl;
+				skb->dev = vlan_dev;
+			} else {
+				drop = 1;
+			}
+		} else {
+			skb->dev = dev;
+		}
+
+		if (drop) {
+			dev_kfree_skb_any(skb);
+			return 0;
+		}
+
+		if (devfp_rx_hook(skb, dev) == AS_FP_STOLEN)
+			return 0;
+	}
+#endif
+
 	/* Tell the skb what kind of packet this is */
 	skb->protocol = eth_type_trans(skb, dev);
 
diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index 225bba0..26143e7 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -93,6 +93,32 @@ extern const char gfar_driver_version[];
 #define DEFAULT_RX_RING_SIZE	256
 #define DEFAULT_WK_RING_SIZE	16
 
+#ifdef CONFIG_AS_FASTPATH
+#define AS_FP_PROCEED	1
+#define AS_FP_STOLEN	2
+
+typedef	int (*devfp_hook_t)(struct sk_buff *skb, struct net_device *dev);
+extern devfp_hook_t	devfp_rx_hook;
+extern devfp_hook_t	devfp_tx_hook;
+
+/* Overwrite the Rx/Tx Hooks pointers
+ * if already configured. */
+static inline int devfp_register_rx_hook(devfp_hook_t hook)
+{
+	local_bh_disable();
+	devfp_rx_hook = hook;
+	local_bh_enable();
+	return 0;
+}
+
+static inline int devfp_register_tx_hook(devfp_hook_t hook)
+{
+	local_bh_disable();
+	devfp_tx_hook = hook;
+	local_bh_enable();
+	return 0;
+}
+#endif
 
 #define GFAR_TX_MAX_RING_SIZE   65536
 #define GFAR_MIN_RING_SIZE	4
-- 
1.7.0.2

