From b18284a72fb903b0f7be14480d211553465f1c5a Mon Sep 17 00:00:00 2001
From: chunguang yang <chunguang.yang@windriver.com>
Date: Tue, 8 Dec 2015 09:28:19 +0000
Subject: [PATCH] PM / QOS: Fix kmemleak issue

qos's resume_latency is assigned the notifiers while
latency_tolerance assigned null in dev_pm_qos_constraints_allocate
function. notifiers is a member of struct pm_qos_constraints,
the resume latency and latency_tolerance are instances of
pm_qos_contraints.the following kmemleak will popup when
hotplug usb device:

unreferenced object 0xffff880a087c6c00 (size 64):
  comm "kworker/0:1", pid 293, jiffies 4294670820 (age 14951.405s)
  hex dump (first 32 bytes):
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
  backtrace:
    [<ffffffff81adf608>] kmemleak_alloc+0x28/0x50
    [<ffffffff81182fca>] kmem_cache_alloc_trace+0x23a/0x2b0
    [<ffffffff8160e28d>] dev_pm_qos_constraints_allocate+0x4d/0x140
    [<ffffffff8160e520>] __dev_pm_qos_add_request+0x1a0/0x1b0
    [<ffffffff8160e569>] dev_pm_qos_add_request+0x39/0x60
    [<ffffffff8177aa5f>] usb_hub_create_port_device+0x14f/0x390
    [<ffffffff8176754f>] hub_probe+0x78f/0x9f0
    [<ffffffff817704ce>] usb_probe_interface+0x1ae/0x2a0
    [<ffffffff81605b81>] driver_probe_device+0x181/0x310
    [<ffffffff81605d4b>] __device_attach+0x3b/0x40
    [<ffffffff81603ae3>] bus_for_each_drv+0x63/0xa0
    [<ffffffff816059a8>] device_attach+0x98/0xc0
    [<ffffffff81604ea0>] bus_probe_device+0xb0/0xe0
    [<ffffffff81602ad9>] device_add+0x3e9/0x660
    [<ffffffff8176e2fd>] usb_set_configuration+0x51d/0x8e0
    [<ffffffff8177926e>] generic_probe+0x2e/0x90

The constraints_destroy function assigns the variable c first to
resume_latency, then to latency_tolerance. so it frees nothing.
To fix this issue, assign the variable c to the correct object.
Signed-off-by: chunguang yang <chunguang.yang@windriver.com>
---
 drivers/base/power/qos.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drivers/base/power/qos.c b/drivers/base/power/qos.c
index e56d538..8b8120d 100644
--- a/drivers/base/power/qos.c
+++ b/drivers/base/power/qos.c
@@ -281,6 +281,8 @@ void dev_pm_qos_constraints_destroy(struct device *dev)
 	dev->power.qos = ERR_PTR(-ENODEV);
 	spin_unlock_irq(&dev->power.lock);
 
+	c = &qos->resume_latency;
+
 	kfree(c->notifiers);
 	kfree(qos);
 
-- 
2.0.2

