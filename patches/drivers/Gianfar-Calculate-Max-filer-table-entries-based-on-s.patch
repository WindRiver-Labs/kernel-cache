From 9ddd3ec7970199de584eefd6ab5d2279ad298c41 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Tue, 9 Aug 2011 19:23:16 +0800
Subject: [PATCH 34/47] Gianfar: Calculate Max filer table entries based on system clock

Number of entries in filer table is configured according to the system clock.

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
0013-Gianfar-Calculate-Max-filer-table-entries-based-on-s.patch.

Signed-off-by: Akhil Goyal <akhil.goyal@freescale.com>
Signed-off-by: Li Yang <leoli@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/net/gianfar.c         |   58 ++++++++++++++++++++++++++++++++++++++--
 drivers/net/gianfar.h         |    6 ++--
 drivers/net/gianfar_ethtool.c |   39 ++++++++++++++++++++-------
 drivers/net/gianfar_sysfs.c   |   15 ++++++++++-
 4 files changed, 101 insertions(+), 17 deletions(-)

diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index b171ac7..10d3de6 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -749,6 +749,9 @@ static int gfar_of_init(struct of_device *ofdev, struct net_device **pdev)
 	const u32 *stash_idx;
 	unsigned int num_tx_qs, num_rx_qs;
 	u32 *tx_queues, *rx_queues;
+	u32 *busFreq;
+	u32 etsec_clk;
+	u32 max_filer_rules;
 
 	if (!np || !of_device_is_available(np))
 		return -ENODEV;
@@ -783,6 +786,33 @@ static int gfar_of_init(struct of_device *ofdev, struct net_device **pdev)
 	priv->node = ofdev->node;
 	priv->ndev = dev;
 
+	busFreq = (u32 *)of_get_property
+			(of_get_parent(np), "bus-frequency", NULL);
+	if (busFreq) {
+		/* etsec_clk is CCB/2 */
+		etsec_clk = *busFreq/2;
+		/* Divide by 1000000 to get freq in MHz */
+		etsec_clk /= 1000000;
+		/*
+		 * eTSEC searches the table at a rate of two entries every
+		 * eTSEC clock cycle, so for the worst case all 256 entries
+		 * can be searched in the time taken to receive a 64-byte
+		 * Ethernet frame which comes out to be 672 ns at 1Gbps rate
+		 * including inter frame gap and preamble.
+		 * Hence max_filer_rules = etsec_clk * reception time for one
+		 * packet * 2. Divide by 1000 to match the units.
+		 */
+		max_filer_rules = etsec_clk * 672 * 2 / 1000;
+		if (max_filer_rules > MAX_FILER_IDX)
+			priv->max_filer_rules = MAX_FILER_IDX;
+		else
+			priv->max_filer_rules = max_filer_rules;
+	} else {
+		printk(KERN_INFO "Bus Frequency not found in DTS, "
+				"setting max_filer_rules to %d\n",
+				MAX_FILER_IDX);
+		priv->max_filer_rules = MAX_FILER_IDX;
+	}
 	dev->num_tx_queues = num_tx_qs;
 	dev->real_num_tx_queues = num_tx_qs;
 	priv->num_tx_queues = num_tx_qs;
@@ -1008,10 +1038,26 @@ static u32 cluster_entry_per_class(struct gfar_private *priv, u32 rqfar,
 static void gfar_init_filer_table(struct gfar_private *priv)
 {
 	int i = 0x0;
-	u32 rqfar = MAX_FILER_IDX;
+	u32 rqfar = priv->max_filer_rules;
 	u32 rqfcr = 0x0;
 	u32 rqfpr = FPR_FILER_MASK;
 
+	if (!priv->ftp_rqfpr) {
+		priv->ftp_rqfpr = kmalloc((priv->max_filer_rules + 1)*sizeof
+					(u32), GFP_KERNEL);
+		if (!priv->ftp_rqfpr) {
+			pr_err("Could not allocate ftp_rqfpr\n");
+			goto out;
+		}
+	}
+	if (!priv->ftp_rqfcr) {
+		priv->ftp_rqfcr = kmalloc((priv->max_filer_rules + 1)*sizeof
+					(u32), GFP_KERNEL);
+		if (!priv->ftp_rqfcr) {
+			pr_err("Could not allocate ftp_rqfcr\n");
+			goto out;
+		}
+	}
 	/* Default rule */
 	rqfcr = RQFCR_CMP_MATCH;
 	priv->ftp_rqfcr[rqfar] = rqfcr;
@@ -1038,6 +1084,10 @@ static void gfar_init_filer_table(struct gfar_private *priv)
 
 	/* Program the RIR0 reg with the required distribution */
 	priv->gfargrp[0].regs->rir0 = DEFAULT_RIR0;
+
+out:
+	kfree(priv->ftp_rqfcr);
+	kfree(priv->ftp_rqfpr);
 }
 
 static void gfar_detect_errata(struct gfar_private *priv)
@@ -1465,8 +1515,10 @@ static int gfar_remove(struct of_device *ofdev)
 
 	unregister_netdev(priv->ndev);
 	unmap_group_regs(priv);
-	free_netdev(priv->ndev);
 
+	kfree(priv->ftp_rqfpr);
+	kfree(priv->ftp_rqfcr);
+	free_netdev(priv->ndev);
 	return 0;
 }
 
@@ -1529,7 +1581,7 @@ static void gfar_config_filer_table(struct net_device *dev)
 
 	lock_rx_qs(priv);
 
-	for(i = 0; i <= MAX_FILER_IDX; i++)
+	for (i = 0; i <= priv->max_filer_rules; i++)
 		gfar_write_filer(priv, i, rqfcr, rqfpr);
 
 	/* ARP request filer, filling the packet to queue #1 */
diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index 4d325d1..bf51f21 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -1321,9 +1321,9 @@ struct gfar_private {
 
 	u8 ip_addr[4];
 	int wol_opts;
-
-	unsigned int ftp_rqfpr[MAX_FILER_IDX + 1];
-	unsigned int ftp_rqfcr[MAX_FILER_IDX + 1];
+	u32 max_filer_rules;
+	u32 *ftp_rqfpr;
+	u32 *ftp_rqfcr;
 
 	/* Network Statistics */
 	struct gfar_extra_stats extra_stats;
diff --git a/drivers/net/gianfar_ethtool.c b/drivers/net/gianfar_ethtool.c
index 6a61f59..b488e6e 100644
--- a/drivers/net/gianfar_ethtool.c
+++ b/drivers/net/gianfar_ethtool.c
@@ -859,7 +859,7 @@ static void ethflow_to_filer_rules(struct gfar_private *priv, u64 ethflow,
 static void gfar_dump_filer_table(struct gfar_private *priv)
 {
 	u32 fcr, fpr, far;
-	for (far = 0; far <= MAX_FILER_IDX; far++) {
+	for (far = 0; far <= priv->max_filer_rules; far++) {
 		gfar_read_filer(priv, far, &fcr, &fpr);
 		if (fcr != RQFCR_CMP_NOMATCH)
 			printk(KERN_INFO"[%d] fcr %x, fpr %x\n", far, fcr, fpr);
@@ -870,10 +870,22 @@ static int gfar_ethflow_to_filer_table(struct gfar_private *priv, u64 ethflow, u
 {
 	unsigned int last_rule_idx = priv->cur_filer_idx;
 	unsigned int cmp_rqfpr;
-	unsigned int local_rqfpr[MAX_FILER_IDX + 1];
-	unsigned int local_rqfcr[MAX_FILER_IDX + 1];
+	u32 *local_rqfpr = NULL, *local_rqfcr = NULL;
 	int i = 0x0, k = 0x0;
-	int j = MAX_FILER_IDX, l = 0x0;
+	int j = priv->max_filer_rules, l = 0x0;
+
+	local_rqfpr = kmalloc((priv->max_filer_rules + 1)*sizeof
+				(u32), GFP_KERNEL);
+	if (!local_rqfpr) {
+		pr_err("Could not allocate local_rqfpr\n");
+		goto out;
+	}
+	local_rqfcr = kmalloc((priv->max_filer_rules + 1)*sizeof
+				(u32), GFP_KERNEL);
+	if (!local_rqfcr) {
+		pr_err("Could not allocate local_rqfcr\n");
+		goto out;
+	}
 
 	switch (class) {
 	case TCP_V4_FLOW:
@@ -898,10 +910,10 @@ static int gfar_ethflow_to_filer_table(struct gfar_private *priv, u64 ethflow, u
 		break;
 	default:
 		printk(KERN_ERR "Right now this class is not supported\n");
-		return 0;
+		goto out;
 	}
 
-	for (i = 0; i < MAX_FILER_IDX + 1; i++) {
+	for (i = 0; i < priv->max_filer_rules + 1; i++) {
 		local_rqfpr[j] = priv->ftp_rqfpr[i];
 		local_rqfcr[j] = priv->ftp_rqfcr[i];
 		j--;
@@ -911,16 +923,16 @@ static int gfar_ethflow_to_filer_table(struct gfar_private *priv, u64 ethflow, u
 			break;
 	}
 
-	if (i == MAX_FILER_IDX + 1) {
+	if (i == priv->max_filer_rules + 1) {
 		printk(KERN_ERR "No parse rule found, ");
 		printk(KERN_ERR "can't create hash rules\n");
-		return 0;
+		goto out;
 	}
 
 	/* If a match was found, then it begins the starting of a cluster rule
 	 * if it was already programmed, we need to overwrite these rules
 	 */
-	for (l = i+1; l < MAX_FILER_IDX; l++) {
+	for (l = i+1; l < priv->max_filer_rules; l++) {
 		if ((priv->ftp_rqfcr[l] & RQFCR_CLE) &&
 			!(priv->ftp_rqfcr[l] & RQFCR_AND)) {
 			priv->ftp_rqfcr[l] = RQFCR_CLE | RQFCR_CMP_EXACT |
@@ -946,7 +958,7 @@ static int gfar_ethflow_to_filer_table(struct gfar_private *priv, u64 ethflow, u
 
 	ethflow_to_filer_rules(priv, ethflow, class);
 	/* Write back the popped out rules again */
-	for (k = j+1; k < MAX_FILER_IDX; k++) {
+	for (k = j+1; k < priv->max_filer_rules; k++) {
 		priv->ftp_rqfpr[priv->cur_filer_idx] = local_rqfpr[k];
 		priv->ftp_rqfcr[priv->cur_filer_idx] = local_rqfcr[k];
 		gfar_write_filer(priv, priv->cur_filer_idx,
@@ -955,8 +967,15 @@ static int gfar_ethflow_to_filer_table(struct gfar_private *priv, u64 ethflow, u
 			break;
 		priv->cur_filer_idx = priv->cur_filer_idx - 1;
 	}
+	kfree(local_rqfpr);
+	kfree(local_rqfcr);
 
 	return 1;
+
+out:
+	kfree(local_rqfpr);
+	kfree(local_rqfcr);
+	return 0;
 }
 
 static int gfar_set_hash_opts(struct gfar_private *priv, struct ethtool_rxnfc *cmd)
diff --git a/drivers/net/gianfar_sysfs.c b/drivers/net/gianfar_sysfs.c
index 64f4094..3e47e20 100644
--- a/drivers/net/gianfar_sysfs.c
+++ b/drivers/net/gianfar_sysfs.c
@@ -10,7 +10,7 @@
  * Maintainer: Kumar Gala (galak@kernel.crashing.org)
  * Modifier: Sandeep Gopalpet <sandeep.kumar@freescale.com>
  *
- * Copyright 2002-2009 Freescale Semiconductor, Inc.
+ * Copyright 2002-2011 Freescale Semiconductor, Inc.
  *
  * This program is free software; you can redistribute  it and/or modify it
  * under  the terms of  the GNU General  Public License as published by the
@@ -319,6 +319,18 @@ static ssize_t gfar_set_fifo_starve_off(struct device *dev,
 static DEVICE_ATTR(fifo_starve_off, 0644, gfar_show_fifo_starve_off,
 		   gfar_set_fifo_starve_off);
 
+static ssize_t gfar_show_max_filer_rules(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	struct gfar_private *priv = netdev_priv(to_net_dev(dev));
+
+	return sprintf(buf, "%d\n", priv->max_filer_rules);
+}
+
+static DEVICE_ATTR(max_filer_rules, 0444, gfar_show_max_filer_rules,
+				NULL);
+
 void gfar_init_sysfs(struct net_device *dev)
 {
 	struct gfar_private *priv = netdev_priv(dev);
@@ -336,6 +348,7 @@ void gfar_init_sysfs(struct net_device *dev)
 	rc |= device_create_file(&dev->dev, &dev_attr_fifo_threshold);
 	rc |= device_create_file(&dev->dev, &dev_attr_fifo_starve);
 	rc |= device_create_file(&dev->dev, &dev_attr_fifo_starve_off);
+	rc |= device_create_file(&dev->dev, &dev_attr_max_filer_rules);
 	if (rc)
 		dev_err(&dev->dev, "Error creating gianfar sysfs files.\n");
 }
-- 
1.7.0.2

