From 49211065ca3781077bf7a243aa9be994cff5c1b7 Mon Sep 17 00:00:00 2001
From: Yue Tao <Yue.Tao@windriver.com>
Date: Fri, 30 May 2014 14:20:30 +0800
Subject: [PATCH] block: Abstract out bvec iterator (continue)

upstream commit 4f024f3797c43cb4b73cd2c50cec728842d0e49e has
Abstract out bvec iterator, so this patch use the new iterator
to replace the old one.

Signed-off-by: Yue Tao <Yue.Tao@windriver.com>
---
 arch/xtensa/platforms/iss/simdisk.c                |    2 +-
 drivers/md/bcache/btree.c                          |   14 +++---
 .../instrumentation/events/lttng-module/block.h    |   46 ++++++++++----------
 .../lttng/instrumentation/events/mainline/block.h  |   32 +++++++-------
 .../instrumentation/events/lttng-module/block.h    |   46 ++++++++++----------
 .../lttng2/instrumentation/events/mainline/block.h |   32 +++++++-------
 fs/btrfs/volumes.c                                 |    4 +-
 7 files changed, 88 insertions(+), 88 deletions(-)

diff --git a/arch/xtensa/platforms/iss/simdisk.c b/arch/xtensa/platforms/iss/simdisk.c
index c0edb35..1abf45a 100644
--- a/arch/xtensa/platforms/iss/simdisk.c
+++ b/arch/xtensa/platforms/iss/simdisk.c
@@ -105,7 +105,7 @@ static int simdisk_xfer_bio(struct simdisk *dev, struct bio *bio)
 {
 	int i;
 	struct bio_vec *bvec;
-	sector_t sector = bio->bi_sector;
+	sector_t sector = bio->bi_iter.bi_sector;
 
 	bio_for_each_segment(bvec, bio, i) {
 		char *buffer = __bio_kmap_atomic(bio, i, KM_USER0);
diff --git a/drivers/md/bcache/btree.c b/drivers/md/bcache/btree.c
index 31b49ff..f280198 100644
--- a/drivers/md/bcache/btree.c
+++ b/drivers/md/bcache/btree.c
@@ -2192,11 +2192,11 @@ static int submit_partial_cache_miss(struct btree *b, struct btree_op *op,
 		unsigned sectors = INT_MAX;
 
 		if (KEY_INODE(k) == op->inode) {
-			if (KEY_START(k) <= bio->bi_sector)
+			if (KEY_START(k) <= bio->bi_iter.bi_sector)
 				break;
 
 			sectors = min_t(uint64_t, sectors,
-					KEY_START(k) - bio->bi_sector);
+					KEY_START(k) - bio->bi_iter.bi_sector);
 		}
 
 		ret = s->d->cache_miss(b, s, bio, sectors);
@@ -2228,12 +2228,12 @@ static int submit_partial_cache_hit(struct btree *b, struct btree_op *op,
 
 	while (!op->lookup_done &&
 	       KEY_INODE(k) == op->inode &&
-	       bio->bi_sector < KEY_OFFSET(k)) {
+	       bio->bi_iter.bi_sector < KEY_OFFSET(k)) {
 		struct bkey *bio_key;
 		sector_t sector = PTR_OFFSET(k, ptr) +
-			(bio->bi_sector - KEY_START(k));
+			(bio->bi_iter.bi_sector - KEY_START(k));
 		unsigned sectors = min_t(uint64_t, INT_MAX,
-					 KEY_OFFSET(k) - bio->bi_sector);
+					 KEY_OFFSET(k) - bio->bi_iter.bi_sector);
 
 		n = bch_bio_split(bio, sectors, GFP_NOIO, s->d->bio_split);
 		if (!n)
@@ -2276,10 +2276,10 @@ int bch_btree_search_recurse(struct btree *b, struct btree_op *op)
 	int ret = 0;
 	struct bkey *k;
 	struct btree_iter iter;
-	bch_btree_iter_init(b, &iter, &KEY(op->inode, bio->bi_sector, 0));
+	bch_btree_iter_init(b, &iter, &KEY(op->inode, bio->bi_iter.bi_sector, 0));
 
 	pr_debug("at %s searching for %u:%llu", pbtree(b), op->inode,
-		 (uint64_t) bio->bi_sector);
+		 (uint64_t) bio->bi_iter.bi_sector);
 
 	do {
 		k = bch_btree_iter_next_filter(&iter, b, bch_ptr_bad);
diff --git a/drivers/staging/lttng/instrumentation/events/lttng-module/block.h b/drivers/staging/lttng/instrumentation/events/lttng-module/block.h
index f3b8bff..1786881 100644
--- a/drivers/staging/lttng/instrumentation/events/lttng-module/block.h
+++ b/drivers/staging/lttng/instrumentation/events/lttng-module/block.h
@@ -341,9 +341,9 @@ TRACE_EVENT(block_bio_bounce,
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev ?
 					  bio->bi_bdev->bd_dev : 0)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -385,14 +385,14 @@ TRACE_EVENT(block_bio_complete,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))
 		tp_assign(error, error)
 #else
 		tp_assign(error, 0)
 #endif
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 	),
 
 	TP_printk("%d,%d %s %llu + %u [%d]",
@@ -419,9 +419,9 @@ DECLARE_EVENT_CLASS(block_bio_merge,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -485,9 +485,9 @@ TRACE_EVENT(block_bio_queue,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -513,9 +513,9 @@ DECLARE_EVENT_CLASS(block_bio,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev ? bio->bi_bdev->bd_dev : 0)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -587,10 +587,10 @@ DECLARE_EVENT_CLASS(block_get_rq,
 
 	TP_fast_assign(
 		tp_assign(dev, bio ? bio->bi_bdev->bd_dev : 0)
-		tp_assign(sector, bio ? bio->bi_sector : 0)
-		tp_assign(nr_sector, bio ? bio->bi_size >> 9 : 0)
+		tp_assign(sector, bio ? bio->bi_iter.bi_sector : 0)
+		tp_assign(nr_sector, bio ? bio->bi_iter.bi_size >> 9 : 0)
 		blk_fill_rwbs(rwbs, bio ? bio->bi_rw : 0,
-			      bio ? bio->bi_size >> 9 : 0)
+			      bio ? bio->bi_iter.bi_size >> 9 : 0)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
         ),
 
@@ -759,9 +759,9 @@ TRACE_EVENT(block_split,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
+		tp_assign(sector, bio->bi_iter.bi_sector)
 		tp_assign(new_sector, new_sector)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -805,11 +805,11 @@ TRACE_EVENT(block_remap,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
 		tp_assign(old_dev, dev)
 		tp_assign(old_sector, from)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 	),
 
 	TP_printk("%d,%d %s %llu + %u <- (%d,%d) %llu",
diff --git a/drivers/staging/lttng/instrumentation/events/mainline/block.h b/drivers/staging/lttng/instrumentation/events/mainline/block.h
index 05c5e61..81509bf 100644
--- a/drivers/staging/lttng/instrumentation/events/mainline/block.h
+++ b/drivers/staging/lttng/instrumentation/events/mainline/block.h
@@ -192,9 +192,9 @@ TRACE_EVENT(block_bio_bounce,
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev ?
 					  bio->bi_bdev->bd_dev : 0;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
 	),
 
@@ -229,10 +229,10 @@ TRACE_EVENT(block_bio_complete,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
 		__entry->error		= error;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 	),
 
 	TP_printk("%d,%d %s %llu + %u [%d]",
@@ -257,9 +257,9 @@ DECLARE_EVENT_CLASS(block_bio,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
 	),
 
@@ -329,8 +329,8 @@ DECLARE_EVENT_CLASS(block_get_rq,
 
 	TP_fast_assign(
 		__entry->dev		= bio ? bio->bi_bdev->bd_dev : 0;
-		__entry->sector		= bio ? bio->bi_sector : 0;
-		__entry->nr_sector	= bio ? bio->bi_size >> 9 : 0;
+		__entry->sector		= bio ? bio->bi_iter.bi_sector : 0;
+		__entry->nr_sector	= bio ? bio->bi_iter.bi_size >> 9 : 0;
 		blk_fill_rwbs(__entry->rwbs,
 			      bio ? bio->bi_rw : 0, __entry->nr_sector);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
@@ -464,9 +464,9 @@ TRACE_EVENT(block_split,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
+		__entry->sector		= bio->bi_iter.bi_sector;
 		__entry->new_sector	= new_sector;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
 	),
 
@@ -505,11 +505,11 @@ TRACE_EVENT(block_bio_remap,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
 		__entry->old_dev	= dev;
 		__entry->old_sector	= from;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 	),
 
 	TP_printk("%d,%d %s %llu + %u <- (%d,%d) %llu",
diff --git a/drivers/staging/lttng2/instrumentation/events/lttng-module/block.h b/drivers/staging/lttng2/instrumentation/events/lttng-module/block.h
index f3b8bff..1786881 100644
--- a/drivers/staging/lttng2/instrumentation/events/lttng-module/block.h
+++ b/drivers/staging/lttng2/instrumentation/events/lttng-module/block.h
@@ -341,9 +341,9 @@ TRACE_EVENT(block_bio_bounce,
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev ?
 					  bio->bi_bdev->bd_dev : 0)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -385,14 +385,14 @@ TRACE_EVENT(block_bio_complete,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))
 		tp_assign(error, error)
 #else
 		tp_assign(error, 0)
 #endif
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 	),
 
 	TP_printk("%d,%d %s %llu + %u [%d]",
@@ -419,9 +419,9 @@ DECLARE_EVENT_CLASS(block_bio_merge,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -485,9 +485,9 @@ TRACE_EVENT(block_bio_queue,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -513,9 +513,9 @@ DECLARE_EVENT_CLASS(block_bio,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev ? bio->bi_bdev->bd_dev : 0)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -587,10 +587,10 @@ DECLARE_EVENT_CLASS(block_get_rq,
 
 	TP_fast_assign(
 		tp_assign(dev, bio ? bio->bi_bdev->bd_dev : 0)
-		tp_assign(sector, bio ? bio->bi_sector : 0)
-		tp_assign(nr_sector, bio ? bio->bi_size >> 9 : 0)
+		tp_assign(sector, bio ? bio->bi_iter.bi_sector : 0)
+		tp_assign(nr_sector, bio ? bio->bi_iter.bi_size >> 9 : 0)
 		blk_fill_rwbs(rwbs, bio ? bio->bi_rw : 0,
-			      bio ? bio->bi_size >> 9 : 0)
+			      bio ? bio->bi_iter.bi_size >> 9 : 0)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
         ),
 
@@ -759,9 +759,9 @@ TRACE_EVENT(block_split,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
+		tp_assign(sector, bio->bi_iter.bi_sector)
 		tp_assign(new_sector, new_sector)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 		tp_memcpy(comm, current->comm, TASK_COMM_LEN)
 	),
 
@@ -805,11 +805,11 @@ TRACE_EVENT(block_remap,
 
 	TP_fast_assign(
 		tp_assign(dev, bio->bi_bdev->bd_dev)
-		tp_assign(sector, bio->bi_sector)
-		tp_assign(nr_sector, bio->bi_size >> 9)
+		tp_assign(sector, bio->bi_iter.bi_sector)
+		tp_assign(nr_sector, bio->bi_iter.bi_size >> 9)
 		tp_assign(old_dev, dev)
 		tp_assign(old_sector, from)
-		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_size)
+		blk_fill_rwbs(rwbs, bio->bi_rw, bio->bi_iter.bi_size)
 	),
 
 	TP_printk("%d,%d %s %llu + %u <- (%d,%d) %llu",
diff --git a/drivers/staging/lttng2/instrumentation/events/mainline/block.h b/drivers/staging/lttng2/instrumentation/events/mainline/block.h
index 05c5e61..81509bf 100644
--- a/drivers/staging/lttng2/instrumentation/events/mainline/block.h
+++ b/drivers/staging/lttng2/instrumentation/events/mainline/block.h
@@ -192,9 +192,9 @@ TRACE_EVENT(block_bio_bounce,
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev ?
 					  bio->bi_bdev->bd_dev : 0;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
 	),
 
@@ -229,10 +229,10 @@ TRACE_EVENT(block_bio_complete,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
 		__entry->error		= error;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 	),
 
 	TP_printk("%d,%d %s %llu + %u [%d]",
@@ -257,9 +257,9 @@ DECLARE_EVENT_CLASS(block_bio,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
 	),
 
@@ -329,8 +329,8 @@ DECLARE_EVENT_CLASS(block_get_rq,
 
 	TP_fast_assign(
 		__entry->dev		= bio ? bio->bi_bdev->bd_dev : 0;
-		__entry->sector		= bio ? bio->bi_sector : 0;
-		__entry->nr_sector	= bio ? bio->bi_size >> 9 : 0;
+		__entry->sector		= bio ? bio->bi_iter.bi_sector : 0;
+		__entry->nr_sector	= bio ? bio->bi_iter.bi_size >> 9 : 0;
 		blk_fill_rwbs(__entry->rwbs,
 			      bio ? bio->bi_rw : 0, __entry->nr_sector);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
@@ -464,9 +464,9 @@ TRACE_EVENT(block_split,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
+		__entry->sector		= bio->bi_iter.bi_sector;
 		__entry->new_sector	= new_sector;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 		memcpy(__entry->comm, current->comm, TASK_COMM_LEN);
 	),
 
@@ -505,11 +505,11 @@ TRACE_EVENT(block_bio_remap,
 
 	TP_fast_assign(
 		__entry->dev		= bio->bi_bdev->bd_dev;
-		__entry->sector		= bio->bi_sector;
-		__entry->nr_sector	= bio->bi_size >> 9;
+		__entry->sector		= bio->bi_iter.bi_sector;
+		__entry->nr_sector	= bio->bi_iter.bi_size >> 9;
 		__entry->old_dev	= dev;
 		__entry->old_sector	= from;
-		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);
+		blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_iter.bi_size);
 	),
 
 	TP_printk("%d,%d %s %llu + %u <- (%d,%d) %llu",
diff --git a/fs/btrfs/volumes.c b/fs/btrfs/volumes.c
index c9412d3..f5258bd 100644
--- a/fs/btrfs/volumes.c
+++ b/fs/btrfs/volumes.c
@@ -5196,8 +5196,8 @@ static void submit_stripe_bio(struct btrfs_root *root, struct btrfs_bio *bbio,
 		name = rcu_dereference(dev->name);
 		pr_debug("btrfs_map_bio: rw %d, sector=%llu, dev=%lu "
 			 "(%s id %llu), size=%u\n", rw,
-			 (u64)bio->bi_sector, (u_long)dev->bdev->bd_dev,
-			 name->str, dev->devid, bio->bi_size);
+			 (u64)bio->bi_iter.bi_sector, (u_long)dev->bdev->bd_dev,
+			 name->str, dev->devid, bio->bi_iter.bi_size);
 		rcu_read_unlock();
 	}
 #endif
-- 
1.7.5.4

