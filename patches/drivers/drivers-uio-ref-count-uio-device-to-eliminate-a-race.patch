From ac409f6f08abdf88ab2e29e81f06fe6b8dacc709 Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Thu, 19 Nov 2015 14:04:48 +0800
Subject: [PATCH] drivers/uio: ref-count uio device to eliminate a race
 condition

A use-after-free bug can be triggered by removing uio driver module
while there are active references to the uio device handle,

This patch fixes the bug by ref-counting the uio device so
that the users of the driver resources are coordinate with each
other with respect to the resource reclamation, in this way the
driver resources are freed by the last user instead of uio driver
module only.

Reproducing the bug:
modprobe uio_pci_generic
echo "8086 100e" > /sys/bus/pci/drivers/uio_pci_generic/new_id
echo -n 0000:00:04.0 > /sys/bus/pci/drivers/e1000/unbind
echo -n 0000:00:04.0 > /sys/bus/pci/drivers/uio_pci_generic/bind
open and hold the /dev/uio0 for 5 seconds at background
sleep 1
echo 1 > /sys/devices/pci0000:00/0000:00:04.0/remove

The kernel crash when the /dev/uio0 is released:
general protection fault: 0000 [#1] PREEMPT SMP
Modules linked in: uio_pci_generic uio
CPU: 1 PID: 703 Comm: xxx
task: ffff880272679710 ti: ffff8802728be000 task.ti: ffff8802728be000
RIP: 0010:[<ffffffff8109df18>] [<ffffffff8109df18>] module_put+0x28/0x100
RSP: 0018:ffff8802728bfc38 EFLAGS: 00010213
RAX: ffff880274a9c230 RBX: ffff8802727b97c0 RCX: 0000000000000000
RDX: 0000000000000000 RSI: ffff880272f03d00 RDI: 0000000000000001
RBP: ffff8802728bfc50 R08: 0000000000000000 R09: 0000000000000000
R10: ffff880272fe19a8 R11: ffff880272f03d10 R12: ffff880272d2bea0
R13: 0000000000000000 R14: ffff880272fe19a8 R15: ffff880272e0f120
FS: 0000000000000000(0000) GS:ffff88027fc40000(0000) knlGS:0000000000000000
CS: 0010 DS: 002b ES: 002b CR0: 0000000080050033
CR2: 000000001db7b828 CR3: 0000000272aae000 CR4: 00000000001007e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
Stack:
ffff8802727b97c0 ffff880272d2be40 0000000000000000 ffff8802728bfc78
ffffffffa007e510 ffff880272f03d00 0000000000000010 ffff88027400cc00
ffff8802728bfcc0 ffffffff81162ba4 ffff880272fe19a8 ffff880272f03d10
Call Trace:
[<ffffffffa007e510>] uio_release+0x40/0x60 [uio]
[<ffffffff81162ba4>] __fput+0xa4/0x230
[<ffffffff81162dee>] ____fput+0xe/0x10
[<ffffffff810600b4>] task_work_run+0xc4/0xe0
[<ffffffff81043efa>] do_exit+0x2aa/0xa80
[<ffffffff8104fec3>] ? __sigqueue_free.part.14+0x33/0x40
[<ffffffff8104474f>] do_group_exit+0x3f/0xa0
[<ffffffff81052d11>] get_signal_to_deliver+0x251/0x640
[<ffffffff810023d8>] do_signal+0x48/0xa30
[<ffffffff8186695c>] ? __schedule+0x3dc/0xa00
[<ffffffff8108d2ae>] ? getrawmonotonic+0x2e/0xb0
[<ffffffff81002e2f>] do_notify_resume+0x6f/0x80
[<ffffffff81868cb7>] retint_signal+0x41/0x7a
Code: 00 00 00 0f 1f 44 00 00 55 48 85 ff 48 89 e5 41 55 41 54 49 89 fc 53 74 4e bf 01 00 00 00 e8 50 e0 7c 00 49 8b 84 24 48 02 00 00 <65> 48 ff 40 08 8b 05 65 fc e2 00 4c 8b 6d 08 85 c0 75 30 41 83
RIP [<ffffffff8109df18>] module_put+0x28/0x100
RSP <ffff8802728bfc38>
---[ end trace e67d2b768d4ba374 ]---

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 drivers/uio/uio.c |   41 ++++++++++++++++++++++++++++++++---------
 1 files changed, 32 insertions(+), 9 deletions(-)

diff --git a/drivers/uio/uio.c b/drivers/uio/uio.c
index 2d57a00..21239a5 100644
--- a/drivers/uio/uio.c
+++ b/drivers/uio/uio.c
@@ -39,6 +39,7 @@ struct uio_device {
 	struct uio_info		*info;
 	struct kobject		*map_dir;
 	struct kobject		*portio_dir;
+	struct kref		kref;
 };
 
 static int uio_major;
@@ -59,6 +60,8 @@ struct uio_map {
 };
 #define to_map(map) container_of(map, struct uio_map, kobj)
 
+static void uio_free_dev(struct kref *kref);
+
 static ssize_t map_name_show(struct uio_mem *mem, char *buf)
 {
 	if (unlikely(!mem->name))
@@ -272,6 +275,8 @@ static int uio_dev_add_attributes(struct uio_device *idev)
 	struct uio_port *port;
 	struct uio_portio *portio;
 
+	kref_get(&idev->kref);
+
 	for (mi = 0; mi < MAX_UIO_MAPS; mi++) {
 		mem = &idev->info->mem[mi];
 		if (mem->size == 0)
@@ -338,6 +343,7 @@ err_map:
 		map = mem->map;
 		kobject_put(&map->kobj);
 	}
+	kref_put(&idev->kref, uio_free_dev);
 	kobject_put(idev->map_dir);
 	dev_err(idev->dev, "error creating sysfs files (%d)\n", ret);
 	return ret;
@@ -364,6 +370,8 @@ static void uio_dev_del_attributes(struct uio_device *idev)
 		kobject_put(&port->portio->kobj);
 	}
 	kobject_put(idev->portio_dir);
+
+	kref_put(&idev->kref, uio_free_dev);
 }
 
 static int uio_get_minor(struct uio_device *idev)
@@ -454,6 +462,8 @@ static int uio_open(struct inode *inode, struct file *filep)
 	listener->event_count = atomic_read(&idev->event);
 	filep->private_data = listener;
 
+	kref_get(&idev->kref);
+
 	if (idev->info->open) {
 		ret = idev->info->open(idev->info, inode);
 		if (ret)
@@ -462,6 +472,7 @@ static int uio_open(struct inode *inode, struct file *filep)
 	return 0;
 
 err_infoopen:
+	kref_put(&idev->kref, uio_free_dev);
 	kfree(listener);
 
 err_alloc_listener:
@@ -490,6 +501,8 @@ static int uio_release(struct inode *inode, struct file *filep)
 
 	module_put(idev->owner);
 	kfree(listener);
+	kref_put(&idev->kref, uio_free_dev);
+
 	return ret;
 }
 
@@ -845,6 +858,8 @@ int __uio_register_device(struct module *owner,
 		goto err_device_create;
 	}
 
+	kref_init(&idev->kref);
+
 	ret = uio_dev_add_attributes(idev);
 	if (ret)
 		goto err_uio_dev_add_attributes;
@@ -873,6 +888,22 @@ err_kzalloc:
 }
 EXPORT_SYMBOL_GPL(__uio_register_device);
 
+static void uio_free_dev(struct kref *kref)
+{
+	struct uio_device *idev = container_of(kref, struct uio_device, kref);
+	struct uio_info *info = idev->info;
+
+	uio_free_minor(idev);
+
+	if (info->irq && (info->irq != UIO_IRQ_CUSTOM))
+		free_irq(info->irq, idev);
+
+	uio_dev_del_attributes(idev);
+
+	device_destroy(&uio_class, MKDEV(uio_major, idev->minor));
+	kfree(idev);
+}
+
 /**
  * uio_unregister_device - unregister a industrial IO device
  * @info:	UIO device capabilities
@@ -887,15 +918,7 @@ void uio_unregister_device(struct uio_info *info)
 
 	idev = info->uio_dev;
 
-	uio_free_minor(idev);
-
-	if (info->irq && (info->irq != UIO_IRQ_CUSTOM))
-		free_irq(info->irq, idev);
-
-	uio_dev_del_attributes(idev);
-
-	device_destroy(&uio_class, MKDEV(uio_major, idev->minor));
-	kfree(idev);
+	kref_put(&idev->kref, uio_free_dev);
 
 	return;
 }
-- 
1.7.5.4

