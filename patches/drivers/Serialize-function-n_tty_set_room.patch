From fc65051866173f0f16e6f9ed1ebc5d1646cabb11 Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Fri, 18 Jan 2013 11:09:56 +0800
Subject: [PATCH] Serialize function n_tty_set_room

Without serialization, preemption on this function may
cause the read_cnt and receive_room are both set to
zero. This will block both producer and consumer of the
read_buf. Serialize it with a new created spinlock.

Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 drivers/char/n_tty.c  |   11 ++++++++---
 drivers/char/tty_io.c |    1 +
 include/linux/tty.h   |    1 +
 3 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/drivers/char/n_tty.c b/drivers/char/n_tty.c
index 708c2b1..51bbf71 100644
--- a/drivers/char/n_tty.c
+++ b/drivers/char/n_tty.c
@@ -93,13 +93,17 @@ static inline int tty_put_user(struct tty_struct *tty, unsigned char x,
  *
  *	Called by the driver to find out how much data it is
  *	permitted to feed to the line discipline without any being lost
- *	and thus to manage flow control. Not serialized. Answers for the
- *	"instant".
+ *	and thus to manage flow control.
  */
 
 static void n_tty_set_room(struct tty_struct *tty)
 {
-	int	left = N_TTY_BUF_SIZE - tty->read_cnt - 1;
+	unsigned long flags;
+	int	left;
+
+	spin_lock_irqsave(&tty->receive_room_lock, flags);
+
+	left = N_TTY_BUF_SIZE - tty->read_cnt - 1;
 
 	/*
 	 * If we are doing input canonicalization, and there are no
@@ -110,6 +114,7 @@ static void n_tty_set_room(struct tty_struct *tty)
 	if (left <= 0)
 		left = tty->icanon && !tty->canon_data;
 	tty->receive_room = left;
+	spin_unlock_irqrestore(&tty->receive_room_lock, flags);
 }
 
 static void put_tty_queue_nolock(unsigned char c, struct tty_struct *tty)
diff --git a/drivers/char/tty_io.c b/drivers/char/tty_io.c
index 6a24a26..25bd7d4 100644
--- a/drivers/char/tty_io.c
+++ b/drivers/char/tty_io.c
@@ -3407,6 +3407,7 @@ static void initialize_tty_struct(struct tty_struct *tty)
 	mutex_init(&tty->atomic_write_lock);
 	spin_lock_init(&tty->read_lock);
 	spin_lock_init(&tty->ctrl_lock);
+	spin_lock_init(&tty->receive_room_lock);
 	INIT_LIST_HEAD(&tty->tty_files);
 	INIT_WORK(&tty->SAK_work, do_SAK_work);
 }
diff --git a/include/linux/tty.h b/include/linux/tty.h
index 2a22500..3b471cf 100644
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@ -272,6 +272,7 @@ struct tty_struct {
 	/* If the tty has a pending do_SAK, queue it here - akpm */
 	struct work_struct SAK_work;
 	struct tty_port *port;
+	spinlock_t receive_room_lock;
 };
 
 /* tty magic number */
-- 
1.7.0

