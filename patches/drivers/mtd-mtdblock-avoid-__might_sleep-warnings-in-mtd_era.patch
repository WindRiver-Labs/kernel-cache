From 869babb9e27eaee092a22eb23c0237a33ff928c4 Mon Sep 17 00:00:00 2001
From: Li Zhou <li.zhou@windriver.com>
Date: Fri, 15 Sep 2017 11:37:24 +0800
Subject: [PATCH] mtd: mtdblock: avoid __might_sleep warnings in mtd_erase

In the erase_write function of mtdblock.c,
"set_current_state(TASK_INTERRUPTIBLE)" before calling mtd_erase will
cause below  warning:

do not call blocking ops when !TASK_RUNNING; state=1 set at [<ffffff80085810e0>] erase_write+0x0/0x160
------------[ cut here ]------------
WARNING: CPU: 3 PID: 323 at .../kernel/sched/core.c:7586 __might_sleep+0x8c/0x98
......
Call trace:
......
[<ffffff80080c8054>] __might_sleep+0x8c/0x98
[<ffffff800882cd5c>] mutex_lock+0x2c/0x80
[<ffffff800858ea94>] spi_nor_lock_and_prep+0x2c/0xa8
[<ffffff800858f5d0>] spi_nor_erase+0x50/0x230
[<ffffff800857da38>] part_erase+0x40/0x78
[<ffffff800857a300>] mtd_erase+0x60/0xa0
[<ffffff8008581198>] erase_write+0xb8/0x160
[<ffffff8008581288>] write_cached_data+0x48/0x60
[<ffffff800858135c>] mtdblock_release+0x2c/0x70
[<ffffff8008580d3c>] blktrans_release+0x9c/0xd8
[<ffffff80082435ac>] __blkdev_put+0x29c/0x318
[<ffffff80082439fc>] blkdev_put+0x54/0x150
[<ffffff8008243b24>] blkdev_close+0x2c/0x40
[<ffffff8008203a58>] __fput+0xa8/0x1e8
[<ffffff8008203c38>] ____fput+0x20/0x30
[<ffffff80080bd76c>] task_work_run+0xdc/0x110
[<ffffff8008089824>] do_notify_resume+0x8c/0x98
[<ffffff80080835e8>] work_pending+0x10/0x14

Here change from function schedule to wait_woken to avoid this issue.

set_current_state(TASK_INTERRUPTIBLE) is called before mtd_erase.
In mtd_erase, mutex_lock is called by spi_nor_erase.
So above warning is got. The reason is:
In mutex_lock, blocking primitives will set (and therefore destroy)
current->state. Since it will exit with TASK_RUNNING, we should make
sure we enter with it, otherwise we will destroy state.

We can't move set_current_state(TASK_INTERRUPTIBLE) to be after mtd_erase
to solve this issue, because wake_up is called by spi_nor_erase in
mtd_erase. If neither TASK_INTERRUPTIBLE nor TASK_UNINTERRUPTIBLE is set,
nothing will be done by this wake_up. Then schedule() is called next,
it will always wait there and never return.

If use wait_woken and DEFINE_WAIT_FUNC(wait, woken_wake_function)
instead, TASK_INTERRUPTIBLE can be set when calling wait_woken
(after mtd_erase). A special flag (WQ_FLAG_WOKEN) is to be used in
the flags field of the wait queue entry. If wake_up happens in
mtd_erase, woken_wake_function will be called, and this flag will
be set. Next wait_woken() sees that flag, it knows that the wakeup
already occurred and doesn't block. Otherwise, the wakeup has not
occurred, so wait_woken() can safely call schedule() to wait.
Thus the warning is avoid and there is no functional change.

Signed-off-by: Li Zhou <li.zhou@windriver.com>
---
 drivers/mtd/mtdblock.c |    6 ++----
 1 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/drivers/mtd/mtdblock.c b/drivers/mtd/mtdblock.c
index bb4c14f..8ef6a88 100644
--- a/drivers/mtd/mtdblock.c
+++ b/drivers/mtd/mtdblock.c
@@ -65,7 +65,7 @@ static int erase_write (struct mtd_info *mtd, unsigned long pos,
 			int len, const char *buf)
 {
 	struct erase_info erase;
-	DECLARE_WAITQUEUE(wait, current);
+	DEFINE_WAIT_FUNC(wait, woken_wake_function);
 	wait_queue_head_t wait_q;
 	size_t retlen;
 	int ret;
@@ -81,12 +81,10 @@ static int erase_write (struct mtd_info *mtd, unsigned long pos,
 	erase.len = len;
 	erase.priv = (u_long)&wait_q;
 
-	set_current_state(TASK_INTERRUPTIBLE);
 	add_wait_queue(&wait_q, &wait);
 
 	ret = mtd_erase(mtd, &erase);
 	if (ret) {
-		set_current_state(TASK_RUNNING);
 		remove_wait_queue(&wait_q, &wait);
 		printk (KERN_WARNING "mtdblock: erase of region [0x%lx, 0x%x] "
 				     "on \"%s\" failed\n",
@@ -94,7 +92,7 @@ static int erase_write (struct mtd_info *mtd, unsigned long pos,
 		return ret;
 	}
 
-	schedule();  /* Wait for erase to finish. */
+	wait_woken(&wait, TASK_INTERRUPTIBLE, MAX_SCHEDULE_TIMEOUT);
 	remove_wait_queue(&wait_q, &wait);
 
 	/*
-- 
1.7.5.4

