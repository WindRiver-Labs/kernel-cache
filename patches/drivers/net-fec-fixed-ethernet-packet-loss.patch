From 419ec49bc8e902c22acd0329975545d0526da0a8 Mon Sep 17 00:00:00 2001
From: Wenlin Kang <wenlin.kang@windriver.com>
Date: Fri, 9 Jan 2015 10:41:22 +0800
Subject: [PATCH] net: fec: fixed ethernet packet loss

The cause is that instruction reording occurs during the memory accesses
between the follow codes line:

bdp->cbd_bufaddr = dma_map_single(&fep->pdev->dev, bufaddr,
                FEC_ENET_TX_FRSIZE, DMA_TO_DEVICE);
status |= (BD_ENET_TX_READY | BD_ENET_TX_INTR
                | BD_ENET_TX_LAST | BD_ENET_TX_TC);
bdp->cbd_sc = status;

The result of reording is that the assignment for bdp->cbd_sc got executed
before the assignment for bdp->cbd_bufaddr.

Under unloaded scenarios, the FEC is asleep and gets woken up by the
FEC_X_DES_ACTIVE, it then sees TX_READY and latches the address and
length. It seems the time taken to wake up the FEC and check TX_READY
is longer than the load/store unit takes to get all of the values
flushed to memory. In loaded scenarios, the FEC never goes to sleep
and keeps moving along the TX ring, and the FEC is able to see a valid
TX_READY and latch address from main memory before the load/store unit
gets the address out to memory based on this reordering.

The detail information about this issue, please see:
https://community.freescale.com/message/464992#464992,
and the patch also references above the link.

Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 drivers/net/ethernet/freescale/fec.c |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fec.c b/drivers/net/ethernet/freescale/fec.c
index 1203207..bcb3f7b 100644
--- a/drivers/net/ethernet/freescale/fec.c
+++ b/drivers/net/ethernet/freescale/fec.c
@@ -351,6 +351,7 @@ fec_enet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	 */
 	status |= (BD_ENET_TX_READY | BD_ENET_TX_INTR
 			| BD_ENET_TX_LAST | BD_ENET_TX_TC);
+	dmb();
 	bdp->cbd_sc = status;
 
 	/* Trigger transmission start */
-- 
1.7.5.4

