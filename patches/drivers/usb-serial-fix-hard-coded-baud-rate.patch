From 00d9e8eb5c4cf1da8c117817f392bde217b982df Mon Sep 17 00:00:00 2001
From: Nam Ninh <nam.ninh@windriver.com>
Date: Mon, 8 Sep 2014 15:54:09 -0400
Subject: [PATCH] usb-serial: fix hard-coded baud rate

Some targets with USB serial console boots up with the baudrate specified
in boot command line. However, near the end of the boot, this baudrate is
changed to the hard-coded baudrate in the usb serial driver causing junk
characters output and useless console. This only happens with targets having
differrent baudrate from the hard-coded baudrate (9600 bps). The only way
to restore the console is to ssh to the target and restore the command line
baudrate with the command "stty -F /dev/ttyUSB0 <baud>".

Initially, the kernel uses the general console driver (console.c) with the
right baudrate in the boot command line. Later on, it switches to specific
USB serial driver /dev/ttyUSBx in usb-serial.c where the baudrate is hard-coded
to 9600 bps. Therefore, we see junk characters at the end of the boot process
after it switches to /dev/ttyUSBx.

Signed-off-by: Nam Ninh <nam.ninh@windriver.com>

diff --git a/drivers/usb/serial/console.c b/drivers/usb/serial/console.c
index 5f3bcd31e204..6e4f872ab368 100644
--- a/drivers/usb/serial/console.c
+++ b/drivers/usb/serial/console.c
@@ -28,6 +28,26 @@ struct usbcons_info {
 	struct usb_serial_port	*port;
 };
 
+struct baud_rates {
+	unsigned int rate;
+	unsigned int cflag;
+};
+
+static const struct baud_rates baud_rates[] = {
+	{ 921600, B921600 },
+	{ 460800, B460800 },
+	{ 230400, B230400 },
+	{ 115200, B115200 },
+	{  57600, B57600  },
+	{  38400, B38400  },
+	{  19200, B19200  },
+	{   9600, B9600   },
+	{   4800, B4800   },
+	{   2400, B2400   },
+	{   1200, B1200   },
+	{      0, B9600   }
+};
+
 static struct usbcons_info usbcons_info;
 static struct console usbcons;
 
@@ -61,6 +81,7 @@ static int usb_console_setup(struct console *co, char *options)
 	int parity = 'n';
 	int doflow = 0;
 	int cflag = CREAD | HUPCL | CLOCAL;
+	int i;
 	char *s;
 	struct usb_serial *serial;
 	struct usb_serial_port *port;
@@ -85,6 +106,15 @@ static int usb_console_setup(struct console *co, char *options)
 	if (baud == 0)
 		baud = 9600;
 
+	/* Overwrite the default baudrate setting in usb-serial.c */
+	for (i = 0; baud_rates[i].rate; i++)
+		if (baud_rates[i].rate <= baud)
+			break;
+	usb_serial_tty_driver->init_termios.c_cflag = baud_rates[i].cflag | CS8
+							| CREAD | HUPCL | CLOCAL;
+	usb_serial_tty_driver->init_termios.c_ispeed = baud;
+	usb_serial_tty_driver->init_termios.c_ospeed = baud;
+
 	switch (bits) {
 	case 7:
 		cflag |= CS7;
diff --git a/drivers/usb/serial/usb-serial.c b/drivers/usb/serial/usb-serial.c
index c1032d42b9d5..14d2464a28dd 100644
--- a/drivers/usb/serial/usb-serial.c
+++ b/drivers/usb/serial/usb-serial.c
@@ -1249,10 +1249,19 @@ static int __init usb_serial_init(void)
 	usb_serial_tty_driver->flags = TTY_DRIVER_REAL_RAW |
 						TTY_DRIVER_DYNAMIC_DEV;
 	usb_serial_tty_driver->init_termios = tty_std_termios;
-	usb_serial_tty_driver->init_termios.c_cflag = B9600 | CS8 | CREAD
-							| HUPCL | CLOCAL;
-	usb_serial_tty_driver->init_termios.c_ispeed = 9600;
-	usb_serial_tty_driver->init_termios.c_ospeed = 9600;
+	/*
+	 * If the baudrate from the command line is set in usb/serial/console.c
+	 * when the console configuration option is turned on, there's no need
+	 * to set the default here. Ideally, the baudrate from the command line
+	 * should be set it here. However, currently the only way to get
+	 * the baudrate from the command line is in usb/serial/console.c.
+	 */
+	if (usb_serial_tty_driver->init_termios.c_cflag == 0) {
+		usb_serial_tty_driver->init_termios.c_cflag = B9600 | CS8 | CREAD
+								| HUPCL | CLOCAL;
+		usb_serial_tty_driver->init_termios.c_ispeed = 9600;
+		usb_serial_tty_driver->init_termios.c_ospeed = 9600;
+	}
 	tty_set_operations(usb_serial_tty_driver, &serial_ops);
 	result = tty_register_driver(usb_serial_tty_driver);
 	if (result) {
-- 
2.0.1

