From 745d40ff3366f6ea63de6898fbd4c8f7f7bac921 Mon Sep 17 00:00:00 2001
From: Jian Liu <jian.liu@windriver.com>
Date: Tue, 29 Apr 2014 11:25:50 +0800
Subject: [PATCH] System hangs by BUG_ON() in the brd driver caused by a small race in brd_lookup_page()

commit dfd20b2b174d3a9b258ea3b7a35ead33576587b1 upstream

The index on the page must be set before it is inserted in the
radix tree.  Otherwise there is a small race which can occur
during lookup where the page can be found with the incorrect
index.  This will trigger the BUG_ON() in brd_lookup_page().

Signed-off-by: Andrew Morton <akpm@linux-foundation.org>,
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Jian Liu <jian.liu@windriver.com>
---
 drivers/block/brd.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/block/brd.c b/drivers/block/brd.c
index 8358a22..83ac158 100644
--- a/drivers/block/brd.c
+++ b/drivers/block/brd.c
@@ -119,13 +119,13 @@ static struct page *brd_insert_page(struct brd_device *brd, sector_t sector)
 
 	spin_lock(&brd->brd_lock);
 	idx = sector >> PAGE_SECTORS_SHIFT;
+	page->index = idx;
 	if (radix_tree_insert(&brd->brd_pages, idx, page)) {
 		__free_page(page);
 		page = radix_tree_lookup(&brd->brd_pages, idx);
 		BUG_ON(!page);
 		BUG_ON(page->index != idx);
-	} else
-		page->index = idx;
+	}
 	spin_unlock(&brd->brd_lock);
 
 	radix_tree_preload_end();
-- 
1.7.0

