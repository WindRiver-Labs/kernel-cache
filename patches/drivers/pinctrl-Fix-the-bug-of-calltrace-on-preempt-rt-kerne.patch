From d505502972ceae5bd7dab8f85ae4e83903b8980b Mon Sep 17 00:00:00 2001
From: fli <fupan.li@windriver.com>
Date: Wed, 13 Nov 2013 02:23:48 +0000
Subject: [PATCH] pinctrl: Fix the bug of calltrace on preempt-rt kernel

change the spinlock to raw_spinlock to avoid the following calltrace
on preempt-rt kernel.

[  302.792385] BUG: sleeping function called from invalid context at kernel/rtmutex.c:659
[  302.792387] in_atomic(): 1, irqs_disabled(): 1, pid: 2152, name: runtest.sh
[  302.792398] Preemption disabled at:[<ffffffff810c1f82>] __irq_get_desc_lock+0x52/0x90

[  302.792404] CPU: 0 PID: 2152 Comm: runtest.sh Tainted: G           O 3.10.10-rt3-preempt-rt #1
[  302.792406] Hardware name: Intel Corp. VALLEYVIEW B0 PLATFORM/NOTEBOOK, BIOS BYTICRB1.X64.P056.R43.1309162108 09/16/2013
[  302.792411]  ffffc90000552130 ffff880075065ca8 ffffffff81898589 ffff880075065cc0
[  302.792414]  ffffffff81070e41 ffff8800779b8ad0 ffff880075065cd8 ffffffff8189e570
[  302.792418]  ffff8800779b8ad0 ffff880075065d00 ffffffff813a3bf6 ffff880075375600
[  302.792419] Call Trace:
[  302.792427]  [<ffffffff81898589>] dump_stack+0x19/0x1b
[  302.792432]  [<ffffffff81070e41>] __might_sleep+0xf1/0x170
[  302.792436]  [<ffffffff8189e570>] rt_spin_lock+0x20/0x50
[  302.792442]  [<ffffffff813a3bf6>] byt_irq_type+0x56/0xb0
[  302.792446]  [<ffffffff810c3c00>] __irq_set_trigger+0x70/0x170
[  302.792451]  [<ffffffff810c4fd4>] irq_set_irq_type+0x44/0x80
[  302.792454]  [<ffffffff813a3b91>] byt_gpio_irq_map+0x41/0x50
[  302.792458]  [<ffffffff810c756d>] irq_domain_associate_many+0xfd/0x200
[  302.792462]  [<ffffffff810c7a86>] irq_create_mapping+0x86/0x150
[  302.792466]  [<ffffffff813a3dd7>] byt_gpio_to_irq+0x17/0x20
[  302.792469]  [<ffffffff813a45b0>] gpiod_to_irq+0x40/0x50
[  302.792473]  [<ffffffff813a4de6>] gpiod_export+0x136/0x200
[  302.792477]  [<ffffffff813a7518>] export_store+0x58/0xe0
[  302.792482]  [<ffffffff814d50fb>] class_attr_store+0x1b/0x30
[  302.792487]  [<ffffffff811c3d61>] sysfs_write_file+0xe1/0x160
[  302.792492]  [<ffffffff81159a69>] vfs_write+0xb9/0x1c0
[  302.792495]  [<ffffffff8115a389>] SyS_write+0x49/0xa0
[  302.792499]  [<ffffffff8189f8c6>] system_call_fastpath+0x1a/0x1f

Signed-off-by: fli <fupan.li@windriver.com>
Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 drivers/pinctrl/pinctrl-baytrail.c |   24 ++++++++++++------------
 1 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/pinctrl/pinctrl-baytrail.c b/drivers/pinctrl/pinctrl-baytrail.c
index 7cd4b61..15bc2dd 100644
--- a/drivers/pinctrl/pinctrl-baytrail.c
+++ b/drivers/pinctrl/pinctrl-baytrail.c
@@ -129,7 +129,7 @@ struct byt_gpio {
 	struct gpio_chip		chip;
 	struct irq_domain		*domain;
 	struct platform_device		*pdev;
-	spinlock_t			lock;
+	raw_spinlock_t			lock;
 	void __iomem			*reg_base;
 	struct pinctrl_gpio_range	*range;
 };
@@ -219,7 +219,7 @@ static int byt_irq_type(struct irq_data *d, unsigned type)
 	if (offset >= vg->chip.ngpio)
 		return -EINVAL;
 
-	spin_lock_irqsave(&vg->lock, flags);
+	raw_spin_lock_irqsave(&vg->lock, flags);
 	value = readl(reg);
 
 	/* For level trigges the BYT_TRIG_POS and BYT_TRIG_NEG bits
@@ -244,7 +244,7 @@ static int byt_irq_type(struct irq_data *d, unsigned type)
 	}
 	writel(value, reg);
 
-	spin_unlock_irqrestore(&vg->lock, flags);
+	raw_spin_unlock_irqrestore(&vg->lock, flags);
 
 	return 0;
 }
@@ -262,7 +262,7 @@ static void byt_gpio_set(struct gpio_chip *chip, unsigned offset, int value)
 	unsigned long flags;
 	u32 old_val;
 
-	spin_lock_irqsave(&vg->lock, flags);
+	raw_spin_lock_irqsave(&vg->lock, flags);
 
 	old_val = readl(reg);
 
@@ -271,7 +271,7 @@ static void byt_gpio_set(struct gpio_chip *chip, unsigned offset, int value)
 	else
 		writel(old_val & ~BYT_LEVEL, reg);
 
-	spin_unlock_irqrestore(&vg->lock, flags);
+	raw_spin_unlock_irqrestore(&vg->lock, flags);
 }
 
 static int byt_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
@@ -281,13 +281,13 @@ static int byt_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
 	unsigned long flags;
 	u32 value;
 
-	spin_lock_irqsave(&vg->lock, flags);
+	raw_spin_lock_irqsave(&vg->lock, flags);
 
 	value = readl(reg) | BYT_DIR_MASK;
 	value &= ~BYT_INPUT_EN;		/* active low */
 	writel(value, reg);
 
-	spin_unlock_irqrestore(&vg->lock, flags);
+	raw_spin_unlock_irqrestore(&vg->lock, flags);
 
 	return 0;
 }
@@ -300,7 +300,7 @@ static int byt_gpio_direction_output(struct gpio_chip *chip,
 	unsigned long flags;
 	u32 reg_val;
 
-	spin_lock_irqsave(&vg->lock, flags);
+	raw_spin_lock_irqsave(&vg->lock, flags);
 
 	reg_val = readl(reg) | BYT_DIR_MASK;
 	reg_val &= ~(BYT_OUTPUT_EN | BYT_INPUT_EN);
@@ -310,7 +310,7 @@ static int byt_gpio_direction_output(struct gpio_chip *chip,
 	else
 		writel(reg_val & ~BYT_LEVEL, reg);
 
-	spin_unlock_irqrestore(&vg->lock, flags);
+	raw_spin_unlock_irqrestore(&vg->lock, flags);
 
 	return 0;
 }
@@ -322,7 +322,7 @@ static void byt_gpio_dbg_show(struct seq_file *s, struct gpio_chip *chip)
 	unsigned long flags;
 	u32 conf0, val, offs;
 
-	spin_lock_irqsave(&vg->lock, flags);
+	raw_spin_lock_irqsave(&vg->lock, flags);
 
 	for (i = 0; i < vg->chip.ngpio; i++) {
 		const char *label;
@@ -347,7 +347,7 @@ static void byt_gpio_dbg_show(struct seq_file *s, struct gpio_chip *chip)
 			   conf0 & BYT_TRIG_POS ? " rise" : "",
 			   conf0 & BYT_TRIG_LVL ? " level" : "");
 	}
-	spin_unlock_irqrestore(&vg->lock, flags);
+	raw_spin_unlock_irqrestore(&vg->lock, flags);
 }
 
 static int byt_gpio_to_irq(struct gpio_chip *chip, unsigned offset)
@@ -553,7 +553,7 @@ static int byt_gpio_probe(struct platform_device *pdev)
 	if (IS_ERR(vg->reg_base))
 		return PTR_ERR(vg->reg_base);
 
-	spin_lock_init(&vg->lock);
+	raw_spin_lock_init(&vg->lock);
 
 	gc = &vg->chip;
 	gc->label = dev_name(&pdev->dev);
-- 
1.7.5.4

