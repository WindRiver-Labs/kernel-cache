From 89de524557d07f5312a83d7ea5905559694ed83d Mon Sep 17 00:00:00 2001
From: chunguang yang <chunguang.yang@windriver.com>
Date: Wed, 21 Oct 2015 00:45:38 -0400
Subject: [PATCH 4/5] scsi/hpsa: fix build error for scsi_adjust_queue_depth

when building, the following error will appear:
drivers/scsi/hpsa.c:2005:4: error: implicit declaration of
function 'scsi_adjust_queue_depth' [-Werror=implicit-function-declaration]
    scsi_adjust_queue_depth(sdev, scsi_get_tag_type(sdev),

commit 7c0a0229bda26478f1fb15a2fa444b7ed3eac541
hpsa: correct change_queue_depth
this commit change scsi_adjust_queue_depth to scsi_change_queue_depth.
Signed-off-by: chunguang yang <chunguang.yang@windriver.com>
---
 drivers/scsi/hpsa.c | 39 +++++++++++----------------------------
 1 file changed, 11 insertions(+), 28 deletions(-)

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index 04513c2..8b02173 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -287,8 +287,7 @@ DECLARE_QUEUECOMMAND(hpsa_scsi_queue_command);
 static void hpsa_scan_start(struct Scsi_Host *);
 static int hpsa_scan_finished(struct Scsi_Host *sh,
 	unsigned long elapsed_time);
-DECLARE_CHANGE_QUEUE_DEPTH(hpsa_change_queue_depth);
-
+static int hpsa_change_queue_depth(struct scsi_device *sdev, int qdepth);
 static int hpsa_eh_device_reset_handler(struct scsi_cmnd *scsicmd);
 static int hpsa_eh_abort_handler(struct scsi_cmnd *scsicmd);
 static int hpsa_slave_alloc(struct scsi_device *sdev);
@@ -2002,8 +2001,7 @@ static int hpsa_slave_alloc(struct scsi_device *sdev)
 	if (sd && (sd->expose_state & HPSA_SCSI_ADD)) {
 		sdev->hostdata = sd;
 		if (sd->queue_depth)
-			scsi_adjust_queue_depth(sdev, scsi_get_tag_type(sdev),
-				sd->queue_depth);
+			scsi_change_queue_depth(sdev, sd->queue_depth);
 		atomic_set(&sd->ioaccel_cmds_out, 0);
 	} else if (sd) {
 		sdev->hostdata = NULL;
@@ -5398,34 +5396,19 @@ static int hpsa_scan_finished(struct Scsi_Host *sh,
 	return finished;
 }
 
-/* scsi host template change_queue_depth function */
-DECLARE_CHANGE_QUEUE_DEPTH(hpsa_change_queue_depth)
+static int hpsa_change_queue_depth(struct scsi_device *sdev, int qdepth)
 {
-	int reason = -1;
-
-	SET_QUEUE_DEPTH_REASON(reason); /* This sets reason */
-
-	if (reason == SCSI_QDEPTH_DEFAULT || reason == SCSI_QDEPTH_RAMP_UP) {
-		struct hpsa_scsi_dev_t *logical_drive = sdev->hostdata;
-
-		if (!logical_drive)
-			return -ENODEV;
+       struct ctlr_info *h = sdev_to_hba(sdev);
 
-		if (qdepth < 1)
-			qdepth = 1;
-		else if (qdepth > logical_drive->queue_depth)
-			qdepth = logical_drive->queue_depth;
-
-		scsi_adjust_queue_depth(sdev, scsi_get_tag_type(sdev), qdepth);
-	} else if (reason == SCSI_QDEPTH_QFULL)
-		scsi_track_queue_full(sdev, qdepth);
-	else
-		return -ENOTSUPP;
-
-	return sdev->queue_depth;
+       if (qdepth < 1)
+               qdepth = 1;
+       else
+               if (qdepth > h->nr_cmds)
+                       qdepth = h->nr_cmds;
+       scsi_change_queue_depth(sdev, qdepth);
+       return sdev->queue_depth;
 }
 
-
 static void hpsa_unregister_scsi(struct ctlr_info *h)
 {
 	/* we are being forcibly unloaded, and may not refuse. */
-- 
2.0.2

