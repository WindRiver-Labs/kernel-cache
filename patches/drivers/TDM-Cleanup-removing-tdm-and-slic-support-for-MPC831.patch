From 3ad3691a7ed8d9e7a1f1661ff75bcf403457e426 Mon Sep 17 00:00:00 2001
From: Rajesh Gumasta <rajesh.gumasta@freescale.com>
Date: Thu, 8 Jul 2010 14:48:25 +0530
Subject: [PATCH 4/5] TDM:Cleanup-removing tdm and slic support for MPC8315RDB

Signed-off-by: Rajesh Gumasta <rajesh.gumasta@freescale.com>

[Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso.]

Integrated-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/tdm/device/tdm_fsl_starlite.c |   24 -------------
 drivers/tdm/line_ctrl/slic_zarlink.c  |   61 +++++---------------------------
 2 files changed, 10 insertions(+), 75 deletions(-)

diff --git a/drivers/tdm/device/tdm_fsl_starlite.c b/drivers/tdm/device/tdm_fsl_starlite.c
index f032e3f..3dd78d0 100644
--- a/drivers/tdm/device/tdm_fsl_starlite.c
+++ b/drivers/tdm/device/tdm_fsl_starlite.c
@@ -357,28 +357,6 @@ static int tdm_fsl_starlite_reg_init(struct tdm_priv *priv)
 {
 	int i;
 	phys_addr_t base = get_immrbase();
-
-#ifdef CONFIG_MPC831x_RDB
-	__be32 __iomem *psccr;
-	__be32 __iomem *psicr;
-
-	psccr = ioremap(base + SCCR_OFFSET, 4);
-	if (!psccr)
-		return -1;
-	/* CSB:TDM clk =1 */
-	clrsetbits_be32(psccr, SCCR_TDM_MASK, TDM_CM_01);
-	iounmap(psccr);
-
-	psicr = ioremap(base + SICRL_OFFSET, 4);
-	if (!psicr)
-		return -1;
-	/* enable TDM in SICR */
-	clrbits32(psicr, SICRL_TDM_MASK);
-	iounmap(psicr);
-
-#endif
-
-#ifdef CONFIG_MPC85xx_RDB
 	__be32 __iomem *pmuxcr;
 
 	pmuxcr = ioremap(base + PMUXCR_OFFSET, 4);
@@ -387,8 +365,6 @@ static int tdm_fsl_starlite_reg_init(struct tdm_priv *priv)
 
 	out_be32(pmuxcr, in_be32(pmuxcr) | PMUXCR_TDM_ENABLE);
 	iounmap(pmuxcr);
-#endif
-
 
 	/* channel/group round robin */
 	out_be32(&priv->dmac_regs->dmacr, DMACR_ERGA | DMACR_ERCA);
diff --git a/drivers/tdm/line_ctrl/slic_zarlink.c b/drivers/tdm/line_ctrl/slic_zarlink.c
index e3ef2d4..23b8bc5 100644
--- a/drivers/tdm/line_ctrl/slic_zarlink.c
+++ b/drivers/tdm/line_ctrl/slic_zarlink.c
@@ -49,13 +49,7 @@
 #define DRV_DESC "FREESCALE DEVELOPED ZARLINK SLIC DRIVER"
 #define DRV_NAME "legerity"
 
-#ifdef CONFIG_MPC831x_RDB
-#define NUM_OF_SLICS 1
-#endif
-
-#ifdef CONFIG_MPC85xx_RDB
-#define NUM_OF_SLICS 2
-#endif
+#define MAX_NUM_OF_SLICS 10
 
 #define TESTING_PRODUCT_CODE
 
@@ -65,7 +59,7 @@ struct spi_transfer t;
 struct slic_channel {
 	unsigned int ch1_rx_slot, ch1_tx_slot, ch2_rx_slot, ch2_tx_slot;
 };
-struct slic_channel slic_ch[NUM_OF_SLICS];
+struct slic_channel slic_ch[MAX_NUM_OF_SLICS];
 static int num_slics;
 
 /** \brief      Driver's license
@@ -248,22 +242,6 @@ static int slic_init_configure(unsigned char device_handle,
 	len = 0x01;
 	slic_cmd(device_handle, CHANNEL1, WRITE_CONVERTER_CFG, len, &temp3[0]);
 
-#ifdef CONFIG_MPC831x_RDB
-	/* Set Switching Paramenters as for Le88221 */
-	temp3[0] = 0x2;
-	temp3[1] = 0x4;
-	temp3[2] = 0x84;
-	len = 0x03;
-	slic_cmd(device_handle, CHANNEL1, WRITE_SWITCH_REGULATOR_PARAMS, len,
-			&temp3[0]);
-
-	temp3[0] = 0x01;
-	len = 0x01;
-	slic_cmd(device_handle, CHANNEL1, WRITE_SWITCH_REGULATOR_CTRL, len,
-			&temp3[0]);
-#endif
-
-#ifdef CONFIG_MPC85xx_RDB
 	/* Set Switching Paramenters as for Le88266
 	 * 1. BSI[1:0] = 00b (sense pin VBL is SWVSY, VBH is SWVSZ)
 	 * 2. SWFS[1:0] = 00b (setting frequency as 384kHz in high power mode)
@@ -285,7 +263,7 @@ static int slic_init_configure(unsigned char device_handle,
 	len = 0x01;
 	slic_cmd(device_handle, CHANNEL1, WRITE_SWITCH_REGULATOR_CTRL, len,
 			&temp3[0]);
-#endif
+
 	/* Wait 20ms before switching from low power to high power */
 	mdelay(20);
 
@@ -325,22 +303,6 @@ static int slic_init_configure(unsigned char device_handle,
 	len = 0x01;
 	slic_cmd(device_handle, CHANNEL1, WRITE_CONVERTER_CFG, len, &temp3[0]);
 
-#ifdef CONFIG_MPC831x_RDB
-	/* Set Switching Paramenters as for Le88221 */
-	temp3[0] = 0x80;
-	temp3[1] = 0x11;
-	temp3[2] = 0x80;
-	len = 0x03;
-	slic_cmd(device_handle, CHANNEL1, WRITE_SWITCH_REGULATOR_PARAMS, len,
-			&temp3[0]);
-
-	temp3[0] = 0xf;
-	len = 0x01;
-	slic_cmd(device_handle, CHANNEL1, WRITE_SWITCH_REGULATOR_CTRL, len,
-			&temp3[0]);
-#endif
-
-#ifdef CONFIG_MPC85xx_RDB
 	/* Set Switching Paramenters as for Le88266
 	 * 1. BSI[1:0] = 00b (sense pin VBL is SWVSY, VBH is SWVSZ)
 	 * 2. SWFS[1:0] = 00b (setting frequency as 384kHz in high power mode)
@@ -362,7 +324,7 @@ static int slic_init_configure(unsigned char device_handle,
 	len = 0x01;
 	slic_cmd(device_handle, CHANNEL1, WRITE_SWITCH_REGULATOR_CTRL, len,
 			&temp3[0]);
-#endif
+
 	/* Setting the channel specific parameters */
 	for (channel_id = CHANNEL1; channel_id <= CHANNEL2; channel_id++) {
 
@@ -674,22 +636,19 @@ static int slic_probe(struct spi_device *spi)
 	spi->mode = 0;
 	spi->mode |= SPI_CPHA | SPI_CPOL;
 
-	/* Initialize the SLIC */
-#ifdef CONFIG_MPC831x_RDB
-	slic_ch[num_slics].ch1_tx_slot = 0;
-	slic_ch[num_slics].ch1_rx_slot = 0;
-	slic_ch[num_slics].ch2_tx_slot = 2;
-	slic_ch[num_slics].ch2_rx_slot = 2;
-#endif
+	if (num_slics >= MAX_NUM_OF_SLICS) {
+		printk(KERN_ERR "Exceeded the max number of slics\n");
+		return ret;
+	}
 
-#ifdef CONFIG_MPC85xx_RDB
+	/* Initialize the SLIC */
 	configure_spi_pdata(spi);
 	data = spi->dev.platform_data;
 	slic_ch[num_slics].ch1_tx_slot = data->ch1_tx_slot;
 	slic_ch[num_slics].ch1_rx_slot = data->ch1_rx_slot;
 	slic_ch[num_slics].ch2_tx_slot = data->ch2_tx_slot;
 	slic_ch[num_slics].ch2_rx_slot = data->ch2_rx_slot;
-#endif
+
 	device_handle = 0x0;
 	ret = slic_init_configure(device_handle, spi, num_slics);
 	if (ret == 0) {
-- 
1.7.0.4

