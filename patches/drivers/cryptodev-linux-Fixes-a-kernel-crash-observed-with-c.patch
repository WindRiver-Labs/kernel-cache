From 7dbb19af2de37531a0175e0ce2d8cd20969e688e Mon Sep 17 00:00:00 2001
From: Jiping Ma <jiping.ma2@windriver.com>
Date: Wed, 16 May 2018 02:08:31 +0000
Subject: [PATCH 2/2] cryptodev-linux: Fixes a kernel crash observed with
 cipher-gcm test.

The crypto API for AEAD ciphers changed in recent kernels so that
associated data is now part of both source and destination scatter
gathers. The source, destination and associated data buffers need
to be stiched accordingly for the operations to succeed.

Upstream-Status: Backported

commit a705360197260d28535746ae98c461ba2cfb7a9e

Signed-off-by: Jiping Ma <jiping.ma2@windriver.com>
---
 drivers/staging/crypto/cryptodev/authenc.c |   55 +++++++++++++++++++++++-----
 1 files changed, 46 insertions(+), 9 deletions(-)

diff --git a/drivers/staging/crypto/cryptodev/authenc.c b/drivers/staging/crypto/cryptodev/authenc.c
index 28eb0f9..692951f 100644
--- a/drivers/staging/crypto/cryptodev/authenc.c
+++ b/drivers/staging/crypto/cryptodev/authenc.c
@@ -688,12 +688,20 @@ free_auth_buf:
 
 static int crypto_auth_zc_aead(struct csession *ses_ptr, struct kernel_crypt_auth_op *kcaop)
 {
-	struct scatterlist *dst_sg, *auth_sg, *src_sg;
+	struct scatterlist *dst_sg;
+	struct scatterlist *src_sg;
 	struct crypt_auth_op *caop = &kcaop->caop;
 	unsigned char *auth_buf = NULL;
-	struct scatterlist tmp;
 	int ret;
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 2, 0))
+	struct scatterlist tmp;
+	struct scatterlist *auth_sg;
+#else
+	struct scatterlist auth1[2];
+	struct scatterlist auth2[2];
+#endif
+
 	if (unlikely(ses_ptr->cdata.init == 0 ||
 		(ses_ptr->cdata.stream == 0 && ses_ptr->cdata.aead == 0))) {
 		derr(0, "Only stream and AEAD ciphers are allowed for authenc");
@@ -711,11 +719,19 @@ static int crypto_auth_zc_aead(struct csession *ses_ptr, struct kernel_crypt_aut
 		return -ENOMEM;
 	}
 
+	ret = get_userbuf(ses_ptr, caop->src, caop->len, caop->dst, kcaop->dst_len,
+			kcaop->task, kcaop->mm, &src_sg, &dst_sg);
+	if (unlikely(ret)) {
+		derr(1, "get_userbuf(): Error getting user pages.");
+		goto free_auth_buf;
+	}
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 2, 0))
 	if (caop->auth_src && caop->auth_len > 0) {
 		if (unlikely(copy_from_user(auth_buf, caop->auth_src, caop->auth_len))) {
 			derr(1, "unable to copy auth data from userspace.");
 			ret = -EFAULT;
-			goto free_auth_buf;
+			goto free_pages;
 		}
 
 		sg_init_one(&tmp, auth_buf, caop->auth_len);
@@ -724,16 +740,37 @@ static int crypto_auth_zc_aead(struct csession *ses_ptr, struct kernel_crypt_aut
 		auth_sg = NULL;
 	}
 
-	ret = get_userbuf(ses_ptr, caop->src, caop->len, caop->dst, kcaop->dst_len,
-			kcaop->task, kcaop->mm, &src_sg, &dst_sg);
-	if (unlikely(ret)) {
-		derr(1, "get_userbuf(): Error getting user pages.");
-		goto free_auth_buf;
+	ret = auth_n_crypt(ses_ptr, kcaop, auth_sg, caop->auth_len,
+			src_sg, dst_sg, caop->len);
+#else
+	if (caop->auth_src && caop->auth_len > 0) {
+		if (unlikely(copy_from_user(auth_buf, caop->auth_src, caop->auth_len))) {
+			derr(1, "unable to copy auth data from userspace.");
+			ret = -EFAULT;
+			goto free_pages;
+		}
+
+		sg_init_table(auth1, 2);
+		sg_set_buf(auth1, auth_buf, caop->auth_len);
+		sg_chain(auth1, 2, src_sg);
+
+		if (src_sg == dst_sg) {
+			src_sg = auth1;
+			dst_sg = auth1;
+		} else {
+			sg_init_table(auth2, 2);
+			sg_set_buf(auth2, auth_buf, caop->auth_len);
+			sg_chain(auth2, 2, dst_sg);
+			src_sg = auth1;
+			dst_sg = auth2;
+		}
 	}
 
-	ret = auth_n_crypt(ses_ptr, kcaop, auth_sg, caop->auth_len,
+	ret = auth_n_crypt(ses_ptr, kcaop, NULL, caop->auth_len,
 			src_sg, dst_sg, caop->len);
+#endif
 
+free_pages:
 	release_user_pages(ses_ptr);
 
 free_auth_buf:
-- 
1.7.5.4

