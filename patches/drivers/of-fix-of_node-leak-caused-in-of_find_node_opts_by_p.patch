From 3f80b930902e852dfab1874ea640ddb0e7509f97 Mon Sep 17 00:00:00 2001
From: Qi Hou <qi.hou@windriver.com>
Date: Fri, 13 Jan 2017 09:56:28 +0800
Subject: [PATCH 2/4] of: fix of_node leak caused in of_find_node_opts_by_path

During stepping down the tree, parent node is gotten first and its refcount is
increased with of_node_get() in __of_get_next_child(). Since it just being used
as step node, its refcount must be decreased with of_node_put() after traversing
its child nodes.

Or, its refcount will never be descreased to ZERO, then it will never be freed,
as well as other related memory blocks.

To fix this, decrease refcount of parent with of_node_put() after
__of_find_node_by_path().

Signed-off-by: Qi Hou <qi.hou@windriver.com>
---
 drivers/of/base.c |    6 ++++--
 1 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/drivers/of/base.c b/drivers/of/base.c
index 20f0b00..132244e 100644
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@ -779,7 +779,7 @@ static struct device_node *__of_find_node_by_path(struct device_node *parent,
  */
 struct device_node *of_find_node_opts_by_path(const char *path, const char **opts)
 {
-	struct device_node *np = NULL;
+	struct device_node *np = NULL, *npp = NULL;
 	struct property *pp;
 	unsigned long flags;
 	const char *separator = strchr(path, ':');
@@ -820,7 +820,9 @@ struct device_node *of_find_node_opts_by_path(const char *path, const char **opt
 		np = of_node_get(of_root);
 	while (np && *path == '/') {
 		path++; /* Increment past '/' delimiter */
-		np = __of_find_node_by_path(np, path);
+		npp = np;
+		np = __of_find_node_by_path(npp, path);
+		of_node_put(npp);
 		path = strchrnul(path, '/');
 		if (separator && separator < path)
 			break;
-- 
1.7.5.4

