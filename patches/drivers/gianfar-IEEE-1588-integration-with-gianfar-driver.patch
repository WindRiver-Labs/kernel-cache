From aeeacf90da9ba593f28e0858db192bfe09b3b3d2 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Tue, 9 Aug 2011 19:22:46 +0800
Subject: [PATCH 04/47] gianfar: IEEE 1588 integration with gianfar driver

This patch integrates the IEEE 1588 ioctls with the gianfar
driver.

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
linux-2.6.35-qoriq-gianfar-IEEE-1588-integration-with-gian.patch.

Signed-off-by: Sandeep Gopalpet <sandeep.kumar@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/net/Kconfig   |   18 ++++++
 drivers/net/Makefile  |    3 +-
 drivers/net/gianfar.c |   81 ++++++++++++++++++++++++++--
 drivers/net/gianfar.h |  141 +++++++++++++++++++++++++++++++++++++++++++++++--
 4 files changed, 233 insertions(+), 10 deletions(-)

diff --git a/drivers/net/Kconfig b/drivers/net/Kconfig
index 9c793c7..4d41360 100644
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -2413,6 +2413,24 @@ config GIANFAR_L2SRAM
 	help
 	  This option supports BD alloc in L2SRAM.
 
+config 1588_MUX_eTSEC1
+	bool "Selecting 1588 signals over eTSEC1 signals"
+	depends on GIANFAR
+	default n
+	help
+	  This option switches ON 1588 signals over eth1.
+	  Eth1 will not work if this is selected.
+	  This is needed when user want to use external clock, PPn signals etc
+
+config 1588_MUX_eTSEC2
+	bool "Selecting 1588 signals over eTSEC2 signals"
+	depends on GIANFAR
+	default n
+	help
+	  This option switches ON 1588 signals over eth1.
+	  Eth2 will not work if this is selected.
+	  This is needed when user want to use external clock, PPn signals etc
+
 config UCC_GETH
 	tristate "Freescale QE Gigabit Ethernet"
 	depends on QUICC_ENGINE
diff --git a/drivers/net/Makefile b/drivers/net/Makefile
index dd0eda6..8dd55bc 100644
--- a/drivers/net/Makefile
+++ b/drivers/net/Makefile
@@ -36,7 +36,8 @@ obj-$(CONFIG_VMXNET3) += vmxnet3/
 
 gianfar_driver-objs := gianfar.o \
 		gianfar_ethtool.o \
-		gianfar_sysfs.o
+		gianfar_sysfs.o \
+		gianfar_1588.o
 
 obj-$(CONFIG_UCC_GETH) += ucc_geth_driver.o
 ucc_geth_driver-objs := ucc_geth.o ucc_geth_ethtool.o
diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index b7a1363..f937314 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -468,6 +468,19 @@ static void gfar_init_mac(struct net_device *ndev)
 		rctrl |= RCTRL_PADDING(priv->padding);
 	}
 
+	if (priv->ptimer_present) {
+
+		/* Enable Filer and Rx Packet Parsing capability of eTSEC */
+		/* Set Filer Table */
+		gfar_1588_start(ndev);
+		if (priv->device_flags & FSL_GIANFAR_DEV_HAS_PADDING)
+			rctrl &= RCTRL_PAL_MASK;
+		/* Enable Filer for Rx Queue */
+		rctrl |= RCTRL_PRSDEP_INIT |
+			RCTRL_TS_ENABLE | RCTRL_PADDING(8);
+		priv->padding = 0x8;
+	}
+
 	/* keep vlan related bits if it's enabled */
 	if (priv->vlgrp) {
 		rctrl |= RCTRL_VLEX | RCTRL_PRSDEP_INIT;
@@ -687,11 +700,13 @@ static int gfar_of_init(struct of_device *ofdev, struct net_device **pdev)
 	const char *model;
 	const char *ctype;
 	const void *mac_addr;
-	int err = 0, i;
+	int err = 0, i, ret = 0;
 	struct net_device *dev = NULL;
 	struct gfar_private *priv = NULL;
 	struct device_node *np = ofdev->node;
 	struct device_node *child = NULL;
+	struct device_node *timer_node;
+	const phandle *timer_handle;
 	const u32 *stash;
 	const u32 *stash_len;
 	const u32 *stash_idx;
@@ -809,6 +824,22 @@ static int gfar_of_init(struct of_device *ofdev, struct net_device **pdev)
 	if (stash_len || stash_idx)
 		priv->device_flags |= FSL_GIANFAR_DEV_HAS_BUF_STASHING;
 
+	/* Handle IEEE1588 node */
+	timer_handle = of_get_property(np, "ptimer-handle", NULL);
+	if (timer_handle) {
+		timer_node = of_find_node_by_phandle(*timer_handle);
+		if (timer_node) {
+			ret = of_address_to_resource(timer_node, 0,
+					&priv->timer_resource);
+			if (!ret) {
+				priv->ptimer_present = 1;
+				printk(KERN_INFO "IEEE1588: ptp-timer device"
+						"present in the system\n");
+			}
+		}
+	} else
+		printk(KERN_INFO "IEEE1588: disable on the system.\n");
+
 	mac_addr = of_get_mac_address(np);
 	if (mac_addr)
 		memcpy(dev->dev_addr, mac_addr, MAC_ADDR_LEN);
@@ -865,6 +896,7 @@ err_grp_init:
 static int gfar_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 {
 	struct gfar_private *priv = netdev_priv(dev);
+	int retVal = 0;
 
 	if (!netif_running(dev))
 		return -EINVAL;
@@ -872,7 +904,13 @@ static int gfar_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 	if (!priv->phydev)
 		return -ENODEV;
 
-	return phy_mii_ioctl(priv->phydev, if_mii(rq), cmd);
+	if ((cmd >= PTP_GET_RX_TIMESTAMP_SYNC) &&
+			(cmd <= PTP_CLEANUP_TIMESTAMP_BUFFERS))
+		retVal = gfar_ioctl_1588(dev, rq, cmd);
+	else
+		retVal = phy_mii_ioctl(priv->phydev, if_mii(rq), cmd);
+
+	return retVal;
 }
 
 static unsigned int reverse_bitmap(unsigned int bit_map, unsigned int max_qs)
@@ -1008,6 +1046,16 @@ static int gfar_probe(struct of_device *ofdev,
 	priv->node = ofdev->node;
 	SET_NETDEV_DEV(dev, &ofdev->dev);
 
+	if (priv->ptimer_present) {
+		err = gfar_ptp_init(priv);
+		if (err) {
+			priv->ptimer_present = 0;
+			printk(KERN_ERR "IEEE1588: ptp-timer init failed\n");
+		}
+		pmuxcr_guts_write();
+		printk(KERN_INFO "IEEE1588: ptp-timer initialized\n");
+	}
+
 	spin_lock_init(&priv->bflock);
 	INIT_WORK(&priv->reset_task, gfar_reset_task);
 
@@ -1104,7 +1152,7 @@ static int gfar_probe(struct of_device *ofdev,
 	else
 		priv->padding = 0;
 
-	if (dev->features & NETIF_F_IP_CSUM)
+	if (dev->features & NETIF_F_IP_CSUM  || priv->ptimer_present)
 		dev->hard_header_len += GMAC_FCB_LEN;
 
 	/* Program the isrg regs only if number of grps > 1 */
@@ -1258,6 +1306,8 @@ static int gfar_probe(struct of_device *ofdev,
 	return 0;
 
 register_fail:
+	if (priv->ptimer_present)
+		gfar_ptp_cleanup(priv);
 	unmap_group_regs(priv);
 	free_tx_pointers(priv);
 	free_rx_pointers(priv);
@@ -1975,6 +2025,9 @@ void stop_gfar(struct net_device *dev)
 	unlock_tx_qs(priv);
 	local_irq_restore(flags);
 
+	if (priv->ptimer_present)
+		gfar_1588_stop(dev);
+
 	/* Free the IRQs */
 	if (priv->device_flags & FSL_GIANFAR_DEV_HAS_MULTI_INTR) {
 		for (i = 0; i < priv->num_grps; i++)
@@ -2497,6 +2550,16 @@ static int gfar_start_xmit(struct sk_buff *skb, struct net_device *dev)
 		gfar_tx_vlan(skb, fcb);
 	}
 
+	if (priv->ptimer_present) {
+		/* Enable ptp flag so that Tx time stamping happens */
+		if (gfar_ptp_do_txstamp(skb)) {
+			if (fcb == NULL)
+				fcb = gfar_add_fcb(skb);
+			fcb->ptp = 0x01;
+			lstatus |= BD_LFLAG(TXBD_TOE);
+		}
+	}
+
 	/* setup the TxBD length and buffer pointer for the first BD */
 	txbdp_start->bufPtr = dma_map_single(&priv->ofdev->dev, skb->data,
 			skb_headlen(skb), DMA_TO_DEVICE);
@@ -3040,6 +3103,11 @@ static int gfar_process_frame(struct net_device *dev, struct sk_buff *skb,
 		skb_pull(skb, amount_pull);
 	}
 
+	if (priv->ptimer_present) {
+		gfar_ptp_store_rxstamp(dev, skb);
+		skb_pull(skb, 8);
+	}
+
 	if (priv->rx_csum_enable)
 		gfar_rx_checksum(skb, fcb);
 
@@ -3076,8 +3144,11 @@ int gfar_clean_rx_ring(struct gfar_priv_rx_q *rx_queue, int rx_work_limit)
 	bdp = rx_queue->cur_rx;
 	base = rx_queue->rx_bd_base;
 
-	amount_pull = (gfar_uses_fcb(priv) ? GMAC_FCB_LEN : 0) +
-		priv->padding;
+	if (priv->ptimer_present)
+		amount_pull = (gfar_uses_fcb(priv) ? GMAC_FCB_LEN : 0);
+	else
+		amount_pull = (gfar_uses_fcb(priv) ? GMAC_FCB_LEN : 0) +
+				priv->padding;
 
 	while (!((bdp->status & RXBD_EMPTY) || (--rx_work_limit < 0))) {
 		struct sk_buff *newskb;
diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index dad301c..0464ce7 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -114,6 +114,37 @@ extern const char gfar_driver_version[];
 #define DEFAULT_STASH_LENGTH	96
 #define DEFAULT_STASH_INDEX	0
 
+#define PTP_GET_RX_TIMESTAMP_SYNC	SIOCDEVPRIVATE
+#define PTP_GET_RX_TIMESTAMP_DEL_REQ	(SIOCDEVPRIVATE + 1)
+#define PTP_GET_RX_TIMESTAMP_FOLLOWUP	(SIOCDEVPRIVATE + 2)
+#define PTP_GET_RX_TIMESTAMP_DEL_RESP	(SIOCDEVPRIVATE + 3)
+#define PTP_GET_TX_TIMESTAMP		(SIOCDEVPRIVATE + 4)
+#define PTP_SET_CNT			(SIOCDEVPRIVATE + 5)
+#define PTP_GET_CNT			(SIOCDEVPRIVATE + 6)
+#define PTP_SET_FIPER_ALARM		(SIOCDEVPRIVATE + 7)
+#define PTP_ADJ_ADDEND			(SIOCDEVPRIVATE + 9)
+#define PTP_GET_ADDEND			(SIOCDEVPRIVATE + 10)
+#define PTP_GET_RX_TIMESTAMP_PDELAY_REQ	(SIOCDEVPRIVATE + 11)
+#define PTP_GET_RX_TIMESTAMP_PDELAY_RESP	(SIOCDEVPRIVATE + 12)
+#define PTP_CLEANUP_TIMESTAMP_BUFFERS	(SIOCDEVPRIVATE + 13)
+#define DEFAULT_PTP_RX_BUF_SZ		2000
+#define GFAR_PTP_CTRL_SYNC		0x0
+#define GFAR_PTP_CTRL_DEL_REQ		0x1
+#define GFAR_PTP_CTRL_FOLLOWUP		0x2
+#define GFAR_PTP_CTRL_DEL_RESP		0x3
+#define GFAR_PTP_CTRL_ALL_OTHER		0x5
+#define GFAR_PTP_MSG_TYPE_PDREQ		0x02
+#define GFAR_PTP_MSG_TYPE_PDRESP	0x03
+#define GFAR_PTP_DOMAIN_DLFT		0xe0000181
+#define GFAR_PTP_PKT_TYPE_OFFS		0x1f
+#define GFAR_PTP_PROTOCOL_OFFS		0x20
+#define GFAR_PTP_MULTI_ADDR_OFFS	0x26
+#define GFAR_PTP_PORT_OFFS		0x2A
+#define GFAR_PTP_MSG_TYPE_OFFS		0x32
+#define GFAR_PTP_SEQ_ID_OFFS		0x50
+#define GFAR_PTP_CTRL_OFFS		0x52
+#define GFAR_PACKET_TYPE_UDP		0x11
+
 /* The number of Exact Match registers */
 #define GFAR_EM_NUM	15
 
@@ -278,6 +309,8 @@ extern const char gfar_driver_version[];
 
 #define next_bd(bdp, base, ring_size) skip_bd(bdp, 1, base, ring_size)
 
+#define RCTRL_TS_ENABLE		0x01000000
+#define RCTRL_PADB_SIZE		(0x8 << 16)
 #define RCTRL_PAL_MASK		0x001f0000
 #define RCTRL_VLEX		0x00002000
 #define RCTRL_FILREN		0x00001000
@@ -547,6 +580,24 @@ extern const char gfar_driver_version[];
 #define RXFCB_PERR_MASK		0x000c
 #define RXFCB_PERR_BADL3	0x0008
 
+/* 1588 Module Registers bits */
+#define TMR_CTRL_ENABLE		0x00000004
+#define TMR_CTRL_RTC_CLK	0x00000003
+#define TMR_CTRL_EXT_CLK	0x00000000
+#define TMR_CTRL_SYS_CLK	0x00000001
+#define TMR_CTRL_TCLK_PRD	0x000A0000
+#define TMR_OSC_FREQ		166000000
+#define TMR_ADD_VAL		CONFIG_GFAR_PTP_TMR_ADD
+#define TMR_CTRL_TCLK_MASK	0x03ff0000
+#define TMR_PTPD_MAX_FREQ	0x80000
+#define TMR_CTRL_FIPER_START	0x10000000
+#define TMR_FIPER1		1000000000
+/*Alarm to traigger at 15sec boundary */
+#define TMR_ALARM1_L	0xD964B800
+#define TMR_ALARM1_H	0x00000045
+#define TMR_PRSC	0x2
+#define TMR_SEC		1000000000
+
 #define GFAR_INT_NAME_MAX	IFNAMSIZ + 4
 
 #define GIANFAR_WOL_MAGIC       (1 << 5)
@@ -565,7 +616,7 @@ struct txbd8
 
 struct txfcb {
 	u8	flags;
-	u8	reserved;
+	u8	ptp;	/* Least significant bit for enabling Tx Timestamping */
 	u8	l4os;	/* Level 4 Header Offset */
 	u8	l3os; 	/* Level 3 Header Offset */
 	u16	phcs;	/* Pseudo-header Checksum */
@@ -680,6 +731,41 @@ struct gfar_stats {
 	u64 rmon[GFAR_RMON_LEN];
 };
 
+/* IEEE-1588 Timer Controller Registers */
+struct gfar_regs_1588 {
+	u32	tmr_ctrl;	/* 0x.e00 - Timer Control Register */
+	u32	tmr_tevent;	/* 0x.e04 - Timer stamp event register */
+	u32	tmr_temask;	/* 0x.e08 - Timer event mask register */
+	u32	tmr_pevent;	/* 0x.e0c - Timer stamp event register */
+	u32	tmr_pemask;	/* 0x.e10 - Timer event mask register */
+	u32	tmr_stat;	/* 0x.e14 - Timer stamp status register */
+	u32	tmr_cnt_h;	/* 0x.e18 - Timer counter high register */
+	u32	tmr_cnt_l;	/* 0x.e1c - Timer counter low register */
+	u32	tmr_add;	/* 0x.e20 - Timer dirft compensation*/
+					/*addend register */
+	u32	tmr_acc;	/* 0x.e24 - Timer accumulator register */
+	u32	tmr_prsc;	/* 0x.e28 - Timer prescale register */
+	u8	res24a[4];	/* 0x.e2c - 0x.e2f reserved */
+	u32	tmr_off_h;	/* 0x.e30 - Timer offset high register */
+	u32	tmr_off_l;	/* 0x.e34 - Timer offset low register */
+	u8	res24b[8];	/* 0x.e38 - 0x.e3f reserved */
+	u32	tmr_alarm1_h;	/* 0x.e40 - Timer alarm 1 high register */
+	u32	tmr_alarm1_l;	/* 0x.e44 - Timer alarm 1 low register */
+	u32	tmr_alarm2_h;	/* 0x.e48 - Timer alarm 2 high register */
+	u32	tmr_alarm2_l;	/* 0x.e4c - Timer alarm 2 low register */
+	u8	res24c[48];	/* 0x.e50 - 0x.e7f reserved */
+	u32	tmr_fiper1;	/* 0x.e80 - Timer fixed period register 1 */
+	u32	tmr_fiper2;	/* 0x.e84 - Timer fixed period register 2 */
+	u32	tmr_fiper3;	/* 0x.e88 - Timer fixed period register 3 */
+	u8	res24d[20];	/* 0x.e8c - 0x.ebf reserved */
+	u32	tmr_etts1_h;	/* 0x.ea0 - Timer stamp high of*/
+					/*general purpose external trigger 1*/
+	u32	tmr_etts1_l;	/* 0x.ea4 - Timer stamp low of*/
+					/*general purpose external trigger 1*/
+	u32	tmr_etts2_h;	/* 0x.ea8 - Timer stamp high of*/
+					/*general purpose external trigger 2 */
+	u32	tmr_etts2_l;	/* 0x.eac - Timer stamp low of*/
+};
 
 struct gfar {
 	u32	tsec_id;	/* 0x.000 - Controller ID register */
@@ -753,7 +839,15 @@ struct gfar {
 	u32	tbase6;		/* 0x.234 - TxBD Base Address of ring 6 */
 	u8	res10g[4];
 	u32	tbase7;		/* 0x.23c - TxBD Base Address of ring 7 */
-	u8	res10[192];
+	u8	res10h[64];
+	u32	tmr_txts1_id;	/* 0x.280 Tx time stamp identification*/
+	u32	tmr_txts2_id;	/* 0x.284 Tx time stamp Identification*/
+	u8	res10i[56];
+	u32	tmr_txts1_h;	/* 0x.2c0 Tx time stamp high*/
+	u32	tmr_txts1_l;	/* 0x.2c4 Tx Time Stamp low*/
+	u32	tmr_txts2_h;	/* 0x.2c8 Tx time stamp high*/
+	u32	tmr_txts2_l;	/*0x.2cc  Tx Time Stamp low */
+	u8	res10j[48];
 	u32	rctrl;		/* 0x.300 - Receive Control Register */
 	u32	rstat;		/* 0x.304 - Receive Status Register */
 	u8	res12[8];
@@ -804,7 +898,10 @@ struct gfar {
 	u32	rbase6;		/* 0x.434 - RxBD base address of ring 6 */
 	u8	res17g[4];
 	u32	rbase7;		/* 0x.43c - RxBD base address of ring 7 */
-	u8	res17[192];
+	u8	res17h[128];
+	u32	tmr_rxts_h;	/* 0x.4c0 Rx Time Stamp high*/
+	u32	tmr_rxts_l;	/* 0x.4c4 Rx Time Stamp low */
+	u8	res17i[56];
 	u32	maccfg1;	/* 0x.500 - MAC Configuration 1 Register */
 	u32	maccfg2;	/* 0x.504 - MAC Configuration 2 Register */
 	u32	ipgifg;		/* 0x.508 - Inter Packet Gap/Inter Frame Gap Register */
@@ -873,7 +970,8 @@ struct gfar {
 	u8	res23c[248];
 	u32	attr;		/* 0x.bf8 - Attributes Register */
 	u32	attreli;	/* 0x.bfc - Attributes Extract Length and Extract Index Register */
-	u8	res24[688];
+	u8	res24[512];
+	struct gfar_regs_1588 regs_1588;
 	u32	isrg0;		/* 0x.eb0 - Interrupt steering group 0 register */
 	u32	isrg1;		/* 0x.eb4 - Interrupt steering group 1 register */
 	u32	isrg2;		/* 0x.eb8 - Interrupt steering group 2 register */
@@ -899,6 +997,24 @@ struct gfar {
 	u8	res27[208];
 };
 
+/* Structure for PTP Time Stamp */
+struct gfar_ptp_time {
+	u32	high;
+	u32	low;
+};
+
+struct gfar_ptp_data_t {
+	int	key;
+	struct	gfar_ptp_time	item;
+};
+
+struct gfar_ptp_circular_t {
+	int	front;
+	int	end;
+	int	size;
+	struct	gfar_ptp_data_t *data_buf;
+};
+
 /* Flags related to gianfar device features */
 #define FSL_GIANFAR_DEV_HAS_GIGABIT		0x00000001
 #define FSL_GIANFAR_DEV_HAS_COALESCE		0x00000002
@@ -1151,6 +1267,15 @@ struct gfar_private {
 
 	/* Network Statistics */
 	struct gfar_extra_stats extra_stats;
+	struct gfar_ptp_circular_t rx_time_sync;
+	struct gfar_ptp_circular_t rx_time_del_req;
+
+	/* 1588 stuff */
+	struct gfar_ptp_circular_t rx_time_pdel_req;
+	struct gfar_ptp_circular_t rx_time_pdel_resp;
+	struct gfar_regs_1588 __iomem *ptimer;
+	struct resource timer_resource;
+	uint32_t ptimer_present;
 };
 
 extern unsigned int ftp_rqfpr[MAX_FILER_IDX + 1];
@@ -1202,6 +1327,14 @@ extern irqreturn_t gfar_receive(int irq, void *dev_id);
 extern int startup_gfar(struct net_device *dev);
 extern void stop_gfar(struct net_device *dev);
 extern void gfar_halt(struct net_device *dev);
+extern void gfar_1588_start(struct net_device *dev);
+extern void gfar_1588_stop(struct net_device *dev);
+extern int gfar_ptp_init(struct gfar_private *priv);
+extern void gfar_ptp_cleanup(struct gfar_private *priv);
+extern int gfar_ptp_do_txstamp(struct sk_buff *skb);
+extern void pmuxcr_guts_write(void);
+extern void gfar_ptp_store_rxstamp(struct net_device *dev, struct sk_buff *skb);
+extern int gfar_ioctl_1588(struct net_device *dev, struct ifreq *ifr, int cmd);
 extern void gfar_phy_test(struct mii_bus *bus, struct phy_device *phydev,
 		int enable, u32 regnum, u32 read);
 extern void gfar_configure_coalescing(struct gfar_private *priv,
-- 
1.7.0.2

