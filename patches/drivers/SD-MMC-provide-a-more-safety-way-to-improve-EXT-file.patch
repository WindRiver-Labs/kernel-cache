From 9ffd6bf11b191f7e4eb518adc354822d0c0487b8 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Tue, 12 Jul 2011 13:03:51 +0800
Subject: [PATCH 34/47] SD/MMC: provide a more safety way to improve EXT filesystem performance

Postpone the time of updating metadata to device node until file data writing
complete. Sequential blocks of writing will reach a better performance.
Only support EXT filesystem, the optimized code will be invalid except
EXT2/3/4 (filesystem magic is 0xEF53).

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
0116-SD-MMC-provide-a-more-safety-way-to-improve-EXT-file.patch.

Signed-off-by: Qiang Liu <b32616@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 fs/Kconfig          |    7 ++++---
 fs/fs-writeback.c   |   27 +++++++++++++++++++++++++++
 mm/page-writeback.c |    7 -------
 3 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/fs/Kconfig b/fs/Kconfig
index 99a3202..41421a6 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -60,9 +60,10 @@ config OPTIMIZE_SD_PERFORMANCE
 	depends on EXT2_FS || EXT4_FS
 	default n
 	help
-	  This option allows you to improve I/O storage performance, optimized
-	  writeback via avoiding to write the metadata of device node, required
-	  filesystems like ext2 and ext4 call. Other filesystems are not validated.
+	  This option allows you to improve EXT filesystem I/O performance,
+	  optimized writeback via postpone the time of updating metadata,
+	  required filesystems like EXT call. Other filesystems are not
+	  validated.
 
 source "fs/notify/Kconfig"
 
diff --git a/fs/fs-writeback.c b/fs/fs-writeback.c
index 6474657..3bd89df 100644
--- a/fs/fs-writeback.c
+++ b/fs/fs-writeback.c
@@ -26,6 +26,7 @@
 #include <linux/blkdev.h>
 #include <linux/backing-dev.h>
 #include <linux/buffer_head.h>
+#include <linux/magic.h>
 #include "internal.h"
 
 #define inode_to_bdi(inode)	((inode)->i_mapping->backing_dev_info)
@@ -676,6 +677,7 @@ static void writeback_inodes_wb(struct bdi_writeback *wb,
 		queue_io(wb, wbc->older_than_this);
 
 	while (!list_empty(&wb->b_io)) {
+		struct inode *inode_tmp;
 		struct inode *inode = list_entry(wb->b_io.prev,
 						 struct inode, i_list);
 		struct super_block *sb = inode->i_sb;
@@ -693,6 +695,31 @@ static void writeback_inodes_wb(struct bdi_writeback *wb,
 			requeue_io(inode);
 			continue;
 		}
+
+#ifdef CONFIG_OPTIMIZE_SD_PERFORMANCE
+		if (!strcmp(inode->i_sb->s_id, "bdev") &&
+				!inode->used_for_format &&
+				(wbc->sync_mode == WB_SYNC_NONE)) {
+			list_for_each_entry(inode_tmp, &wb->b_io, i_list)
+				if (!imajor(inode_tmp) &&
+					(inode_tmp->i_data.backing_dev_info ==
+					 inode->i_data.backing_dev_info) &&
+					(inode_tmp->i_sb->s_magic ==
+						EXT2_SUPER_MAGIC)) {
+					list_move(&inode->i_list, &wb->b_dirty);
+					continue;
+				}
+			list_for_each_entry(inode_tmp, &wb->b_more_io, i_list)
+				if (!imajor(inode_tmp) &&
+					(inode_tmp->i_data.backing_dev_info ==
+					 inode->i_data.backing_dev_info) &&
+					(inode_tmp->i_sb->s_magic ==
+						EXT2_SUPER_MAGIC)) {
+					list_move(&inode->i_list, &wb->b_dirty);
+					continue;
+				}
+		}
+#endif
 		ret = writeback_sb_inodes(sb, wb, wbc);
 
 		if (state == SB_PINNED)
diff --git a/mm/page-writeback.c b/mm/page-writeback.c
index 91f9c88..2777164 100644
--- a/mm/page-writeback.c
+++ b/mm/page-writeback.c
@@ -1013,13 +1013,6 @@ int do_writepages(struct address_space *mapping, struct writeback_control *wbc)
 {
 	int ret;
 
-#ifdef CONFIG_OPTIMIZE_SD_PERFORMANCE
-	/* no need to write device if the operation is not used to format device */
-	if (imajor(mapping->host) &&
-			(wbc->sync_mode == WB_SYNC_NONE) &&
-			!mapping->host->used_for_format)
-		return 0;
-#endif
 	if (wbc->nr_to_write <= 0)
 		return 0;
 	if (mapping->a_ops->writepages)
-- 
1.7.0.4

