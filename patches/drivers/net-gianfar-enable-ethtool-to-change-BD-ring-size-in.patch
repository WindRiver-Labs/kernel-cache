From b082abfb9bf0f01a502eab4918618c645654174f Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Tue, 9 Aug 2011 19:23:08 +0800
Subject: [PATCH 26/47] net/gianfar: enable ethtool to change BD ring size in large range

Remove the original limitation of 256 maximum and add check for
minimum value.  Also add fail safe measure when the BD ring is
set too large to allocate memory.

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
linux-2.6.35-qoriq-net-gianfar-enable-ethtool-to-change-BD.patch.

Signed-off-by: Li Yang <leoli@freescale.com>
Signed-off-by: Jiajun Wu <b06378@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/net/gianfar.h         |    4 ++--
 drivers/net/gianfar_ethtool.c |   29 ++++++++++++++++++++++++-----
 2 files changed, 26 insertions(+), 7 deletions(-)

diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index 333a7e3..bcdf5c0 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -93,8 +93,8 @@ extern const char gfar_driver_version[];
 #define DEFAULT_WK_RING_SIZE	16
 
 
-#define GFAR_RX_MAX_RING_SIZE   256
-#define GFAR_TX_MAX_RING_SIZE   256
+#define GFAR_TX_MAX_RING_SIZE   65536
+#define GFAR_MIN_RING_SIZE	4
 
 #define GFAR_MAX_FIFO_THRESHOLD 511
 #define GFAR_MAX_FIFO_STARVE	511
diff --git a/drivers/net/gianfar_ethtool.c b/drivers/net/gianfar_ethtool.c
index 49b2a19..ba538d1 100644
--- a/drivers/net/gianfar_ethtool.c
+++ b/drivers/net/gianfar_ethtool.c
@@ -439,9 +439,9 @@ static void gfar_gringparam(struct net_device *dev, struct ethtool_ringparam *rv
 	tx_queue = priv->tx_queue[0];
 	rx_queue = priv->rx_queue[0];
 
-	rvals->rx_max_pending = GFAR_RX_MAX_RING_SIZE;
-	rvals->rx_mini_max_pending = GFAR_RX_MAX_RING_SIZE;
-	rvals->rx_jumbo_max_pending = GFAR_RX_MAX_RING_SIZE;
+	rvals->rx_max_pending = 0;
+	rvals->rx_mini_max_pending = 0;
+	rvals->rx_jumbo_max_pending = 0;
 	rvals->tx_max_pending = GFAR_TX_MAX_RING_SIZE;
 
 	/* Values changeable by the user.  The valid values are
@@ -460,9 +460,11 @@ static void gfar_gringparam(struct net_device *dev, struct ethtool_ringparam *rv
 static int gfar_sringparam(struct net_device *dev, struct ethtool_ringparam *rvals)
 {
 	struct gfar_private *priv = netdev_priv(dev);
+	unsigned int old_tx_ringparam[MAX_TX_QS];
+	unsigned int old_rx_ringparam[MAX_RX_QS];
 	int err = 0, i = 0;
 
-	if (rvals->rx_pending > GFAR_RX_MAX_RING_SIZE)
+	if (rvals->rx_pending < GFAR_MIN_RING_SIZE)
 		return -EINVAL;
 
 	if (!is_power_of_2(rvals->rx_pending)) {
@@ -471,6 +473,8 @@ static int gfar_sringparam(struct net_device *dev, struct ethtool_ringparam *rva
 		return -EINVAL;
 	}
 
+	if (rvals->rx_pending < GFAR_MIN_RING_SIZE)
+		return -EINVAL;
 	if (rvals->tx_pending > GFAR_TX_MAX_RING_SIZE)
 		return -EINVAL;
 
@@ -506,9 +510,12 @@ static int gfar_sringparam(struct net_device *dev, struct ethtool_ringparam *rva
 
 	/* Change the size */
 	for (i = 0; i < priv->num_rx_queues; i++) {
+		old_rx_ringparam[i] = priv->rx_queue[i]->rx_ring_size;
+		old_tx_ringparam[i] = priv->tx_queue[i]->tx_ring_size;
 		priv->rx_queue[i]->rx_ring_size = rvals->rx_pending;
 		priv->tx_queue[i]->tx_ring_size = rvals->tx_pending;
-		priv->tx_queue[i]->num_txbdfree = priv->tx_queue[i]->tx_ring_size;
+		priv->tx_queue[i]->num_txbdfree = priv->tx_queue[i]->
+							tx_ring_size;
 	}
 
 	/* Rebuild the rings with the new size */
@@ -516,6 +523,18 @@ static int gfar_sringparam(struct net_device *dev, struct ethtool_ringparam *rva
 		err = startup_gfar(dev);
 		netif_tx_wake_all_queues(dev);
 	}
+	/* fallback to original setting */
+	if (err) {
+		for (i = 0; i < priv->num_rx_queues; i++) {
+			priv->rx_queue[i]->rx_ring_size = old_rx_ringparam[i];
+			priv->tx_queue[i]->tx_ring_size = old_tx_ringparam[i];
+			priv->tx_queue[i]->num_txbdfree =
+				priv->tx_queue[i]->tx_ring_size;
+		}
+		BUG_ON(startup_gfar(dev));
+		netif_tx_wake_all_queues(dev);
+	}
+
 	return err;
 }
 
-- 
1.7.0.2

