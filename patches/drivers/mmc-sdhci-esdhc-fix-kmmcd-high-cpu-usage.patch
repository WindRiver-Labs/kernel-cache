From 12278259c5fca6e01cf48df672efec23982b9c2d Mon Sep 17 00:00:00 2001
From: Junxiao Bi <junxiao.bi@windriver.com>
Date: Fri, 20 Jan 2012 15:23:17 +0800
Subject: [PATCH] mmc: sdhci-esdhc: fix kmmcd high cpu usage

esdhc_set_clock() can be invoked in a context when a spin lock is holded,
as this function is invoked every 1 second, mdelay(100) will cause high
cpu usage. This delay is to wait hardware clock working. So we move it
out of the sleep-not-allowed context and use msleep() to replace it.
For mmc_go_idle(), it is invoked in a sleep-allowed context, using msleep
to replace mmc_delay can also lower the cpu usage.

Signed-off-by: Junxiao Bi <junxiao.bi@windriver.com>
---
 drivers/mmc/core/mmc_ops.c        |    6 +++---
 drivers/mmc/host/sdhci-of-esdhc.c |    1 -
 drivers/mmc/host/sdhci.c          |   12 ++++++++++++
 3 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/drivers/mmc/core/mmc_ops.c b/drivers/mmc/core/mmc_ops.c
index 326447c..53761c6 100644
--- a/drivers/mmc/core/mmc_ops.c
+++ b/drivers/mmc/core/mmc_ops.c
@@ -110,7 +110,7 @@ int mmc_go_idle(struct mmc_host *host)
 	 */
 	if (!mmc_host_is_spi(host)) {
 		mmc_set_chip_select(host, MMC_CS_HIGH);
-		mmc_delay(1);
+		msleep(1);
 	}
 
 	memset(&cmd, 0, sizeof(struct mmc_command));
@@ -121,11 +121,11 @@ int mmc_go_idle(struct mmc_host *host)
 
 	err = mmc_wait_for_cmd(host, &cmd, 0);
 
-	mmc_delay(1);
+	msleep(1);
 
 	if (!mmc_host_is_spi(host)) {
 		mmc_set_chip_select(host, MMC_CS_DONTCARE);
-		mmc_delay(1);
+		msleep(1);
 	}
 
 	host->use_spi_crc = 0;
diff --git a/drivers/mmc/host/sdhci-of-esdhc.c b/drivers/mmc/host/sdhci-of-esdhc.c
index 9d4ec86..aba912b 100644
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@ -104,7 +104,6 @@ static void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
 	setbits32(host->ioaddr + ESDHC_SYSTEM_CONTROL, ESDHC_CLOCK_IPGEN |
 		  ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN |
 		  div << ESDHC_DIVIDER_SHIFT | pre_div << ESDHC_PREDIV_SHIFT);
-	mdelay(100);
 out:
 	host->clock = clock;
 }
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index fc715c3..3c50fd9 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -1266,6 +1266,18 @@ static void sdhci_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 out:
 	mmiowb();
 	spin_unlock_irqrestore(&host->lock, flags);
+#ifdef CONFIG_MMC_SDHCI_OF_ESDHC
+	/*
+	 * For esdhc MMC controller, in sdhci_set_clock(), the driver
+	 * needs to wait 100ms for hardward clock working. As sdhci_set_clock()
+	 * is invoked with a spin lock holded, so it uses mdelay() to delay,
+	 * this causes the high cpu usage. We remove the mdelay() out of sleep-not-allowed
+	 * area and use msleep() to delay for a low cpu usage.
+         */
+	if (!(host->flags & SDHCI_DEVICE_DEAD) && ios->clock) {
+		msleep(100);
+	}
+#endif
 }
 
 static int sdhci_get_ro(struct mmc_host *mmc)
-- 
1.7.0.4

