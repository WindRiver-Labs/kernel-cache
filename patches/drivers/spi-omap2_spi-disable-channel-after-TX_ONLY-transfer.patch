From 19fca5fb2c13bb2f89368775f028ddedebb03219 Mon Sep 17 00:00:00 2001
From: Wang Hui <Hui.Wang@windriver.com>
Date: Tue, 13 Jul 2010 20:53:19 -0700
Subject: [PATCH] spi/omap2_spi: disable channel after TX_ONLY transfer in PIO mode

In TX_ONLY transfer, the SPI controller can also receive data
simultaneously and saves them in rx register. After the TX_ONLY
transfer, the rx register will hold random data received during
last tx transaction.

If the next transfer is RX_ONLY, this random data has
the possibility to affect this transfer like this:

  If the spi controller is changed from TX_ONLY to RX_ONLY mode,
  The random data makes the rx register full imediately and
  triggers a dummy write (in SPI RX_ONLY transfer, we need a dummy
  write to trigger the first transaction).

  So the first data received in RX_ONLY transfer will be that
  random data instead of something meaningfug.

We can avoid this by a Disable/reenable toggle of the spi channel
after the TX_ONLY transfer, since it purges the rx register.

Signed-off-by: Wang Hui <Hui.Wang@windriver.com>
---
 drivers/spi/omap2_mcspi.c |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/drivers/spi/omap2_mcspi.c b/drivers/spi/omap2_mcspi.c
index e0de0d0..eae914f 100644
--- a/drivers/spi/omap2_mcspi.c
+++ b/drivers/spi/omap2_mcspi.c
@@ -566,6 +566,13 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 		} else if (mcspi_wait_for_reg_bit(chstat_reg,
 				OMAP2_MCSPI_CHSTAT_EOT) < 0)
 			dev_err(&spi->dev, "EOT timed out\n");
+
+		/* disable chan to purge rx datas received in TX_ONLY transfer,
+		 * otherwise these rx datas will affect the direct following
+		 * RX_ONLY transfer.
+		 */
+		omap2_mcspi_set_enable(spi, 0);
+		omap2_mcspi_set_enable(spi, 1);
 	}
 out:
 	return count - c;
-- 
1.6.5.2

