From 603d1a72e91ff2938cc6d827916ec854b647821b Mon Sep 17 00:00:00 2001
From: Li Zhou <li.zhou@windriver.com>
Date: Fri, 9 Feb 2018 14:15:35 +0800
Subject: [PATCH] uio: delete attribute ref

1.what is the bug:
The previous commit
<drivers/uio: ref-count uio device to eliminate a race condition>
caused a kernel crash/bug when hot-removing a DPDK interface because it
failed to free IRQ due to the non-zero ref count in uio_unregister_device,
which is called by the igb_uio driver when a DPDK NIC is removed.

2.root cause of the bug:
The following two functions are not symmetrical.
"uio_unregister_device and __uio_register_device."

int __uio_register_device(struct module *owner,
                          struct device *parent,
                          struct uio_info *info)
{
        ......
        kref_init(&idev->kref); ===>kref + 1 = 1

        ret = uio_dev_add_attributes(idev); ====> kref + 1 =2
        ......
}

void uio_unregister_device(struct uio_info *info)
{
        struct uio_device *idev;

        if (!info || !info->uio_dev)
                return;

        idev = info->uio_dev;

        kref_put(&idev->kref, uio_free_dev); ====> kref -1 = 1

        return;
}

Because uio_dev_del_attributes (kref_put for uio_dev_add_attributes) is
called in the final resource release function uio_free_dev, it can
never be called.

3.method of the solving bug
The operation on the kref is unnecessary in function
uio_dev_add_attributes and uio_dev_del_attributes.
Removing them can fix this problem.

Signed-off-by: Huaiqing Wang <huaiqing.wang@windriver.com>
Signed-off-by: Li Zhou <li.zhou@windriver.com>
---
 drivers/uio/uio.c |    3 ---
 1 files changed, 0 insertions(+), 3 deletions(-)

diff --git a/drivers/uio/uio.c b/drivers/uio/uio.c
index 21239a5..c0a97e1 100644
--- a/drivers/uio/uio.c
+++ b/drivers/uio/uio.c
@@ -275,7 +275,6 @@ static int uio_dev_add_attributes(struct uio_device *idev)
 	struct uio_port *port;
 	struct uio_portio *portio;
 
-	kref_get(&idev->kref);
 
 	for (mi = 0; mi < MAX_UIO_MAPS; mi++) {
 		mem = &idev->info->mem[mi];
@@ -343,7 +342,6 @@ err_map:
 		map = mem->map;
 		kobject_put(&map->kobj);
 	}
-	kref_put(&idev->kref, uio_free_dev);
 	kobject_put(idev->map_dir);
 	dev_err(idev->dev, "error creating sysfs files (%d)\n", ret);
 	return ret;
@@ -371,7 +369,6 @@ static void uio_dev_del_attributes(struct uio_device *idev)
 	}
 	kobject_put(idev->portio_dir);
 
-	kref_put(&idev->kref, uio_free_dev);
 }
 
 static int uio_get_minor(struct uio_device *idev)
-- 
1.7.5.4

