From ac1783e3f10bea93a2c68a094074c417a3e6bfe9 Mon Sep 17 00:00:00 2001
From: Haijun Zhang <Haijun.Zhang@freescale.com>
Date: Mon, 14 Oct 2013 16:37:38 +0800
Subject: [PATCH 3/3] esdhc: Workaround for eSDHC clock glitch issue

A-003980: SDHC: Glitch is generated on the card clock with software reset or
clock divider change
Description: A glitch may occur on the SDHC card clock when the software sets
the RSTA bit (software reset) in the system control register. It can also be
generated by setting the clock divider value. The glitch produced can cause
the external card to switch to an unknown state. The occurrence is not
deterministic.
Workaround:
A simple workaround is to disable the SD card clock before the software reset,
and enable it when the module resumes normal operation.
The Host and the SD card are in a master-slave relationship. The Host provides
clock and control transfer across the interface. Therefore, any existing
operation is discarded when the Host controller is reset.
The recommended flow is as follows:
1. Software disable bit[3], SDCLKEN, of the System Control Register
2. Trigger software reset and/or set clock divider
3. Check bit[3], SDSTB, of the Present State Register for stable clock
4. Enable bit[3], SDCLKEN, of the System Control Register
Using the above method, the eSDHC cannot send command or transfer data when

there is a glitch in the clock line, and the glitch does not cause any issue.
Signed-off-by: Haijun Zhang <haijun.zhang@freescale.com>
Change-Id: I1d8c3757ffdab73aff92cf1f0a6b89f82d11acfe
Reviewed-on: http://git.am.freescale.net:8181/4357
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Xie Xiaobo-R63061 <X.Xie@freescale.com>
Reviewed-by: Rivera Jose-B46482 <German.Rivera@freescale.com>
[Original patch taken from QorIQ-SDK-V1.5-SOURCE-20131219-yocto.iso
 Change SDHCI_QUIRK2_DISABLE_CLOCK_BEFORE_RESET to (1<<8) to port 3.10
 kernel]
Signed-off-by: Bin Jiang <bin.jiang@windriver.com>
[ add "fsl,p1020-esdhc" for device compatibility checking]

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 drivers/mmc/host/sdhci-of-core.c  |    5 ++++
 drivers/mmc/host/sdhci-of-esdhc.c |   44 ++++++++++++++++++++++++++++++++----
 drivers/mmc/host/sdhci.h          |    4 ++-
 3 files changed, 47 insertions(+), 6 deletions(-)

diff --git a/drivers/mmc/host/sdhci-of-core.c b/drivers/mmc/host/sdhci-of-core.c
index a632376..cf84e9a 100644
--- a/drivers/mmc/host/sdhci-of-core.c
+++ b/drivers/mmc/host/sdhci-of-core.c
@@ -204,6 +204,11 @@ static int __devinit sdhci_of_probe(struct of_device *ofdev,
 		of_device_is_compatible(np, "fsl,p3041-esdhc"))
 		host->quirks |= SDHCI_QUIRK2_BROKEN_RESET_ALL;
 
+	if (of_device_is_compatible(np, "fsl,p1020-esdhc")) {
+		host->quirks |= SDHCI_QUIRK2_BROKEN_RESET_ALL;
+		host->quirks |= SDHCI_QUIRK2_DISABLE_CLOCK_BEFORE_RESET;
+	}
+
 	clk = of_get_property(np, "clock-frequency", &size);
 	if (clk && size == sizeof(*clk) && *clk)
 		of_host->clock = *clk;
diff --git a/drivers/mmc/host/sdhci-of-esdhc.c b/drivers/mmc/host/sdhci-of-esdhc.c
index d744dba..8c87636 100644
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@ -25,11 +25,14 @@
 
 #define ESDHC_DMA_SYSCTL	0x40c
 #define ESDHC_DMA_SNOOP		0x00000040
+#define ESDHCI_PRESENT_STATE	0x24
+#define ESDHC_CLK_STABLE	0x00000008
 
 #define ESDHC_SYSTEM_CONTROL	0x2c
 #define ESDHC_CLOCK_MASK	0x0000fff0
 #define ESDHC_PREDIV_SHIFT	8
 #define ESDHC_DIVIDER_SHIFT	4
+#define ESDHC_CLOCK_CRDEN	0x00000008
 #define ESDHC_CLOCK_PEREN	0x00000004
 #define ESDHC_CLOCK_HCKEN	0x00000002
 #define ESDHC_CLOCK_IPGEN	0x00000001
@@ -91,9 +94,11 @@ static void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
 {
 	int pre_div = 2;
 	int div = 1;
+	u32 timeout;
 
 	clrbits32(host->ioaddr + ESDHC_SYSTEM_CONTROL, ESDHC_CLOCK_IPGEN |
-		  ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN | ESDHC_CLOCK_MASK);
+		ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN | ESDHC_CLOCK_MASK |
+		ESDHC_CLOCK_CRDEN);
 
 	if (clock == 0)
 		goto out;
@@ -113,6 +118,23 @@ static void esdhc_set_clock(struct sdhci_host *host, unsigned int clock)
 	setbits32(host->ioaddr + ESDHC_SYSTEM_CONTROL, ESDHC_CLOCK_IPGEN |
 		  ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN |
 		  div << ESDHC_DIVIDER_SHIFT | pre_div << ESDHC_PREDIV_SHIFT);
+
+	/* Wait max 20 ms */
+	timeout = 20;
+	while (!(sdhci_readl(host, ESDHCI_PRESENT_STATE) & ESDHC_CLK_STABLE)) {
+		if (timeout == 0) {
+			pr_err("%s: Internal clock never stabilised.\n",
+					mmc_hostname(host->mmc));
+			return;
+		}
+		timeout--;
+		mdelay(1);
+	}
+
+	setbits32(host->ioaddr + ESDHC_SYSTEM_CONTROL, ESDHC_CLOCK_IPGEN |
+		ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN | ESDHC_CLOCK_CRDEN |
+		div << ESDHC_DIVIDER_SHIFT | pre_div << ESDHC_PREDIV_SHIFT);
+
 out:
 	host->clock = clock;
 }
@@ -140,14 +162,26 @@ static unsigned int esdhc_get_min_clock(struct sdhci_host *host)
 static u32 clock;
 static void esdhc_of_platform_reset_enter(struct sdhci_host *host, u8 mask)
 {
-	if (host->quirks & SDHCI_QUIRK2_BROKEN_RESET_ALL)
-		clock = host->clock;
+	if ((host->quirks & SDHCI_QUIRK2_DISABLE_CLOCK_BEFORE_RESET) &&
+			(mask & SDHCI_RESET_ALL)) {
+		u16 clk;
+
+		clk = esdhc_readw(host, SDHCI_CLOCK_CONTROL);
+		clk &= ~ESDHC_CLOCK_CRDEN;
+		esdhc_writew(host, clk, SDHCI_CLOCK_CONTROL);
+	}
 }
 
 static void esdhc_of_platform_reset_exit(struct sdhci_host *host, u8 mask)
 {
-	if (host->quirks & SDHCI_QUIRK2_BROKEN_RESET_ALL)
-		host->clock = clock;
+	if ((host->quirks & SDHCI_QUIRK2_DISABLE_CLOCK_BEFORE_RESET) &&
+			(mask & SDHCI_RESET_ALL)) {
+		u16 clk;
+
+		clk = esdhc_readw(host, SDHCI_CLOCK_CONTROL);
+		clk |= ESDHC_CLOCK_CRDEN;
+		esdhc_writew(host, clk, SDHCI_CLOCK_CONTROL);
+	}
 }
 
 struct sdhci_of_data sdhci_esdhc = {
diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
index 68121a6..c79fc96 100644
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@ -262,7 +262,9 @@ struct sdhci_host {
 #define SDHCI_QUIRK_QORIQ_PROCTL_WEIRD			(1<<29)
 
 /* Controller can't perform reset all successfully */
-#define SDHCI_QUIRK2_BROKEN_RESET_ALL                  (1<<4)
+#define SDHCI_QUIRK2_BROKEN_RESET_ALL			(1<<4)
+/* Controller need to disable clock before reset all */
+#define SDHCI_QUIRK2_DISABLE_CLOCK_BEFORE_RESET	(1<<8)
 
 	int			irq;		/* Device IRQ */
 	void __iomem *		ioaddr;		/* Mapped address */
-- 
1.7.5.4

