From bbfd0df5c8758b146fc413fd8ec281fb05610933 Mon Sep 17 00:00:00 2001
From: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
Date: Tue, 3 Mar 2015 10:52:05 +0100
Subject: [PATCH 2/2] usb: gadget: printer: enqueue printer's response for
 setup request

commit eb132ccbdec5df46e29c9814adf76075ce83576b upstream

when usb printer repluged into host pc, host pc will dump the following
errors.
[20200.276077] usb 5-3: new high-speed USB device number 12 using ehci_hcd
[20215.388098] usb 5-3: device descriptor read/64, error -110
[20215.628093] usb 5-3: device descriptor read/64, error -71
[20215.844120] usb 5-3: new high-speed USB device number 13 using ehci_hcd
[20215.980082] usb 5-3: device descriptor read/64, error -71
[20216.220305] usb 5-3: device descriptor read/64, error -71

Function-specific setup requests should be handled in such a way, that
apart from filling in the data buffer, the requests are also actually
enqueued: if function-specific setup is called from composte_setup(),
the "usb_ep_queue()" block of code in composite_setup() is skipped.

The printer function lacks this part and it results in e.g. get device id
requests failing: the host expects some response, the device prepares it
but does not equeue it for sending to the host, so the host finally asserts
timeout.

This patch adds enqueueing the prepared responses.

Cc: <stable@vger.kernel.org> # v3.4+
Fixes: 2e87edf49227: "usb: gadget: make g_printer use composite"
Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
Signed-off-by: Felipe Balbi <balbi@ti.com>
Signed-off-by: chunguang yang <chunguang.yang@windriver.com>
---
 drivers/usb/gadget/printer.c |    9 +++++++++
 1 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/drivers/usb/gadget/printer.c b/drivers/usb/gadget/printer.c
index 5d4f05d..2db3dd7 100644
--- a/drivers/usb/gadget/printer.c
+++ b/drivers/usb/gadget/printer.c
@@ -980,6 +980,15 @@ unknown:
 		break;
 	}
 	/* host either stalls (value < 0) or reports success */
+	if (value >= 0) {
+		req->length = value;
+		req->zero = value < wLength;
+		value = usb_ep_queue(cdev->gadget->ep0, req, GFP_ATOMIC);
+		if (value < 0) {
+			ERROR(dev, "%s:%d Error!\n", __func__, __LINE__);
+			req->status = 0;
+		}
+	}
 	return value;
 }
 
-- 
1.7.5.4

