From f66a7aeba86af674bfa115e6f158e900f494074f Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Mon, 11 Jul 2011 15:56:08 +0800
Subject: [PATCH 17/47] talitos: Avoid the race condition of descriptor recycling queue

In order to avoid potential race condition of talitos's descriptor
recycling queue, must sync queue operation between normal alloc/free
method and softirq handler.

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
0008-talitos-Avoid-the-race-condition-of-descriptor-recyc.patch.

Signed-off-by: Liu Shuo <b35362@freescale.com>
Signed-off-by: Li Yang <leoli@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/crypto/talitos.c |   25 +++++++++++++++++++++++--
 1 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/drivers/crypto/talitos.c b/drivers/crypto/talitos.c
index f26fa0f..d6545da 100644
--- a/drivers/crypto/talitos.c
+++ b/drivers/crypto/talitos.c
@@ -201,21 +201,39 @@ struct talitos_edesc {
 struct talitos_edesc *crypto_edesc_alloc(int len, int flags,
 					struct talitos_private *priv)
 {
+	int check;
+	struct talitos_edesc *ret;
 	u32 smp_processor_id = smp_processor_id();
+	check = in_softirq();
+
+	if (!check)
+		local_bh_disable();
+
 	u32 current_edesc = priv->curr_edesc[smp_processor_id];
 	if (unlikely(current_edesc == 0)) {
-		return kmem_cache_alloc(priv->netcrypto_cache,
+		ret = kmem_cache_alloc(priv->netcrypto_cache,
 					GFP_KERNEL | flags);
 	} else {
 		priv->curr_edesc[smp_processor_id] = current_edesc - 1;
-		return priv->edesc_rec_queue[smp_processor_id]
+		ret = priv->edesc_rec_queue[smp_processor_id]
 					[current_edesc - 1];
 	}
+
+	if (!check)
+		local_bh_enable();
+
+	return ret;
 }
 void crypto_edesc_free(struct talitos_edesc *edesc,
 			struct talitos_private *priv)
 {
+	int check;
 	u32 smp_processor_id = smp_processor_id();
+	check = in_softirq();
+
+	if (!check)
+		local_bh_disable();
+
 	u32 current_edesc = priv->curr_edesc[smp_processor_id];
 	if (unlikely(current_edesc == (MAX_IPSEC_RECYCLE_DESC - 1))) {
 		kmem_cache_free(priv->netcrypto_cache, edesc);
@@ -224,6 +242,9 @@ void crypto_edesc_free(struct talitos_edesc *edesc,
 								edesc;
 		priv->curr_edesc[smp_processor_id] = current_edesc + 1;
 	}
+
+	if (!check)
+		local_bh_enable();
 }
 
 static inline unsigned int get_chan_remap(struct talitos_private *priv)
-- 
1.7.0.4

