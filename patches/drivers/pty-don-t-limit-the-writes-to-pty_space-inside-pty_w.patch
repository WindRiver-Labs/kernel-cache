From 15ab9adb04515e0c61bbdcc623247cdf503fccf3 Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Fri, 19 Oct 2012 10:04:23 +0800
Subject: [PATCH] pty: don't limit the writes to 'pty_space()' inside 'pty_write()'

commit ac89a9174d from upstream

The whole write-room thing is something that is up to the _caller_ to
worry about, not the pty layer itself.  The total buffer space will
still be limited by the buffering routines themselves, so there is no
advantage or need in having pty_write() artificially limit the size
somehow.

And what happened was that the caller (the n_tty line discipline, in
this case) may have verified that there is room for 2 bytes to be
written (for NL -> CRNL expansion), and it used to then do those writes
as two single-byte writes.  And if the first byte written (CR) then
caused a new tty buffer to be allocated, pty_space() may have returned
zero when trying to write the second byte (LF), and then incorrectly
failed the write - leading to a lost newline character.

This should finally fix

    http://bugzilla.kernel.org/show_bug.cgi?id=14015

Reported-by: Mikael Pettersson <mikpe@it.uu.se>
Acked-by: Alan Cox <alan@lxorguk.ukuu.org.uk>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Integrated-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 drivers/char/pty.c |    6 +-----
 1 files changed, 1 insertions(+), 5 deletions(-)

diff --git a/drivers/char/pty.c b/drivers/char/pty.c
index 6d205f7..8386a77 100644
--- a/drivers/char/pty.c
+++ b/drivers/char/pty.c
@@ -108,17 +108,13 @@ static int pty_space(struct tty_struct *to)
  *     end of the link as if we were an IRQ handler receiving stuff for
  *     the other side of the pty/tty pair.
  */
-static int pty_write(struct tty_struct * tty, const unsigned char *buf, int count)
+static int pty_write(struct tty_struct * tty, const unsigned char *buf, int c)
 {
 	struct tty_struct *to = tty->link;
-	int	c;
 
 	if (tty->stopped)
 		return 0;
 
-       c = pty_space(to);
-       if (c > count)
-               c = count;
        if (c > 0) {
                /* Stuff the data into the input queue of the other end */
                c = tty_insert_flip_string(to, buf, c);
-- 
1.7.0

