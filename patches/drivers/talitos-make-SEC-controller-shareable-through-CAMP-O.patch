From 4c19546b374ed9b1459d00a619208f2b5b62fcd6 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Tue, 28 Jun 2011 14:18:44 +0800
Subject: [PATCH 03/47] talitos: make SEC controller shareable through CAMP OSes

Make use of the channel remapping mechanism to enable OSes on CAMP system
to use the Security Engine block at the same time.

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
linux-2.6.35-qoriq-talitos-make-SEC-controller-shareable-t.patch

Signed-off-by: Li Yang <leoli@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/crypto/talitos.c |  178 ++++++++++++++++++++++++++++++----------------
 1 files changed, 116 insertions(+), 62 deletions(-)

diff --git a/drivers/crypto/talitos.c b/drivers/crypto/talitos.c
index 77091d2..d7da3b4 100644
--- a/drivers/crypto/talitos.c
+++ b/drivers/crypto/talitos.c
@@ -114,8 +114,9 @@ struct talitos_private {
 	struct device *dev;
 	struct of_device *ofdev;
 	void __iomem *reg;
-	int irq_0;
-	int irq_1;
+	int irq[MAX_GROUPS];
+	int dual;
+	int secondary;
 
 	/* SEC version geometry (from device tree node) */
 	unsigned int num_channels;
@@ -189,6 +190,27 @@ static inline unsigned int get_chan_remap(struct talitos_private *priv)
 	return priv->chan_remap;
 }
 
+static inline int is_channel_alt(int ch, struct talitos_private *priv)
+{
+	return ((1 << (priv->num_channels - ch - 1)) & get_chan_remap(priv));
+}
+
+static inline int is_channel_used(int ch, struct talitos_private *priv)
+{
+	if (priv->dual)
+		return 1;
+
+	if (priv->secondary)
+		return is_channel_alt(ch, priv);
+	else
+		return !is_channel_alt(ch, priv);
+}
+
+static inline int get_grp_id(struct talitos_private *priv)
+{
+	return priv->dual ? smp_processor_id() : priv->secondary;
+}
+
 static void to_talitos_ptr(struct talitos_ptr *talitos_ptr, dma_addr_t dma_addr)
 {
 	talitos_ptr->ptr = cpu_to_be32(lower_32_bits(dma_addr));
@@ -336,20 +358,21 @@ static int talitos_submit(struct device *dev, struct talitos_desc *desc,
 	struct talitos_private *priv = dev_get_drvdata(dev);
 	struct talitos_request *request;
 	u8 ch;
-	u8 smp_processor_id = smp_processor_id();
+	int grp_id = get_grp_id(priv);
+
 	u8 head, last_chan, total_chan;
-	if (priv->core_num_chan[smp_processor_id] > 0) {
-		total_chan = priv->core_num_chan[smp_processor_id];
-		last_chan = priv->last_chan[smp_processor_id];
+	if (priv->core_num_chan[grp_id] > 0) {
+		total_chan = priv->core_num_chan[grp_id];
+		last_chan = priv->last_chan[grp_id];
 		/* select done notification */
 		desc->hdr |= DESC_HDR_DONE_NOTIFY;
 
 		if (last_chan <  total_chan) {
-			ch = priv->core_chan_no[smp_processor_id][last_chan];
-			priv->last_chan[smp_processor_id]++;
+			ch = priv->core_chan_no[grp_id][last_chan];
+			priv->last_chan[grp_id]++;
 		} else {
-			ch = priv->core_chan_no[smp_processor_id][0];
-			priv->last_chan[smp_processor_id] = 1;
+			ch = priv->core_chan_no[grp_id][0];
+			priv->last_chan[grp_id] = 1;
 		}
 		if (priv->chan[ch].submit_count != 0)
 			++priv->chan[ch].submit_count;
@@ -443,22 +466,22 @@ static int flush_channel(struct talitos_channel *chan, int error,
  */
 static int talitos_done(struct napi_struct *napi, int budget)
 {
-	u8 smp_processor_id = smp_processor_id();
 	struct device *dev = &napi->dev->dev;
 	struct talitos_private *priv = dev_get_drvdata(dev);
 	u8 ch, num_chan;
 	u8 budget_per_channel = 0, work_done = 0, ret = 1;
-	
-	if (priv->core_num_chan[smp_processor_id] > 0) {
-		num_chan =  priv->core_num_chan[smp_processor_id];
+	int grp_id = get_grp_id(priv);
+
+	if (priv->core_num_chan[grp_id] > 0) {
+		num_chan =  priv->core_num_chan[grp_id];	
 		budget_per_channel = budget/num_chan;
 		for (ch = 0; ch < num_chan; ch++)
 			work_done += flush_channel(priv->chan +
-					priv->core_chan_no[smp_processor_id][ch]
+					priv->core_chan_no[grp_id][ch]
 					, 0, 0, budget_per_channel);
 		if (work_done < budget) {
 			napi_complete(per_cpu_ptr(priv->done_task,
-						smp_processor_id));
+						smp_processor_id()));
 			/* At this point, all completed channels have been
 			 * processed.
 			 * Unmask done intrpts for channels completed later on.
@@ -652,14 +675,15 @@ static void talitos_error(void *data, u32 isr, u32 isr_lo)
 {
 	struct talitos_private *priv = data;
 	u8 i = 0;
-	u8 smp_processor_id = smp_processor_id();
-	if (priv->core_num_chan[smp_processor_id] > 0)
-		for (i = 0; i < priv->core_num_chan[smp_processor_id]; i++) {
+	int grp_id = get_grp_id(priv);
+
+	if (priv->core_num_chan[grp_id] > 0)
+		for (i = 0; i < priv->core_num_chan[grp_id]; i++) {
 			if (isr & (1 <<
-				((priv->core_chan_no[smp_processor_id][i] << 1)
+				((priv->core_chan_no[grp_id][i] << 1)
 				+ 1)))
 				handle_error(priv->chan +
-					priv->core_chan_no[smp_processor_id][i],
+					priv->core_chan_no[grp_id][i],
 					isr, isr_lo);
                }
 }
@@ -669,13 +693,13 @@ static irqreturn_t talitos_interrupt(int irq, void *data)
 	struct talitos_private *priv = data;
 	u32 isr, isr_lo, isr_ack = 0;
 	u32 intr_mask = 0, isr_ack1 = 0;
-	u16 smp_processor_id = smp_processor_id();
+	int grp_id = get_grp_id(priv);
 	isr = in_be32(priv->reg + TALITOS_ISR);
 	isr_lo = in_be32(priv->reg + TALITOS_ISR_LO);
 
-	if (priv->core_num_chan[smp_processor_id] > 0) {
-		intr_mask = priv->chan_imr[smp_processor_id];
-		isr_ack = 0xffffff00 | priv->chan_isr[smp_processor_id];
+	if (priv->core_num_chan[grp_id] > 0) {
+		intr_mask = priv->chan_imr[grp_id];
+		isr_ack = 0xffffff00 | priv->chan_isr[grp_id];
 		isr = isr & isr_ack;
 		/* Acknowledge interrupt */
 		out_be32(priv->reg + TALITOS_ICR, isr);
@@ -691,10 +715,10 @@ static irqreturn_t talitos_interrupt(int irq, void *data)
 				/* Schdeule  respective napi */
 				if (napi_schedule_prep(
 					per_cpu_ptr(priv->done_task,
-						smp_processor_id)))
+						smp_processor_id())))
 					__napi_schedule(
 						per_cpu_ptr(priv->done_task,
-						smp_processor_id));
+						smp_processor_id()));
 			}
 		}
 	} else {
@@ -1840,14 +1864,14 @@ static int talitos_remove(struct of_device *ofdev)
 
 	kfree(priv->chan);
 
-	if (priv->irq_1 != NO_IRQ) {
-		free_irq(priv->irq_1, dev);
-		irq_dispose_mapping(priv->irq_1);
+	if (priv->irq[1] != NO_IRQ) {
+		free_irq(priv->irq[1], dev);
+		irq_dispose_mapping(priv->irq[1]);
 	}
 
-	if (priv->irq_0 != NO_IRQ) {
-		free_irq(priv->irq_0, dev);
-		irq_dispose_mapping(priv->irq_0);
+	if (priv->irq[0] != NO_IRQ) {
+		free_irq(priv->irq[0], dev);
+		irq_dispose_mapping(priv->irq[0]);
 	}
 
 	for_each_possible_cpu(i) {
@@ -1914,8 +1938,9 @@ static int talitos_probe(struct of_device *ofdev,
 	struct device_node *np = ofdev->node;
 	struct talitos_private *priv;
 	const unsigned int *prop;
+	const char *name;
 	int i, err;
-	u8 smp_processor_id;
+	int grp_id;
 
 	priv = kzalloc(sizeof(struct talitos_private), GFP_KERNEL);
 	if (!priv)
@@ -1941,21 +1966,46 @@ static int talitos_probe(struct of_device *ofdev,
 
 	INIT_LIST_HEAD(&priv->alg_list);
 
-	priv->irq_0 = irq_of_parse_and_map(np, 0);
+	name = of_get_property(np, "fsl,multi-host-mode", NULL);
+	if (!name || !strcmp(name, "primary")) {
+		priv->dual = 0;
+		priv->secondary = 0;
+	} else if (!strcmp(name, "secondary")) {
+		priv->dual = 0;
+		priv->secondary = 1;
+	} else if (!strcmp(name, "dual")) {
+		if (nr_cpu_ids != 2) {
+			dev_err(dev, "can't work in dual host mode with CPU "
+					"number not equal to 2\n");
+			err = -EINVAL;
+			goto err_out;
+		}
+		priv->dual = 1;
+		priv->secondary = 0;
+	} else {
+		dev_err(dev, "invalid multi-host-mode in device tree node\n");
+		err = -EINVAL;
+		goto err_out;
+	}
+
+	if (priv->secondary)
+		priv->irq[0] = irq_of_parse_and_map(np, 1);
+	else
+		priv->irq[0] = irq_of_parse_and_map(np, 0);
 
-	if (priv->irq_0 == NO_IRQ) {
-		dev_err(dev, "failed to map irq_0\n");
+	if (priv->irq[0] == NO_IRQ) {
+		dev_err(dev, "failed to map irq[0]\n");
 		err = -EINVAL;
 		goto err_out;
 	}
 
 	/* get the irq line */
-	err = request_irq(priv->irq_0, talitos_interrupt, 0,
+	err = request_irq(priv->irq[0], talitos_interrupt, 0,
 			dev_driver_string(dev), priv);
 	if (err) {
-		dev_err(dev, "failed to request irq_0 %d\n", priv->irq_0);
-		irq_dispose_mapping(priv->irq_0);
-		priv->irq_0 = NO_IRQ;
+		dev_err(dev, "failed to request irq[0] %d\n", priv->irq[0]);
+		irq_dispose_mapping(priv->irq[0]);
+		priv->irq[0] = NO_IRQ;
 		goto err_out;
 	}
 
@@ -1996,33 +2046,32 @@ static int talitos_probe(struct of_device *ofdev,
 		if (prop)
 			priv->chan_remap = *prop;
 		update_chanmap(priv, priv->chan_remap);
-		if (priv->chan_remap) {
-			priv->irq_1 = irq_of_parse_and_map(np, 1);
+		if (priv->chan_remap && priv->dual) {
+			priv->irq[1] = irq_of_parse_and_map(np, 1);
 
-			if (priv->irq_1 == NO_IRQ) {
-				dev_err(dev, "failed to map irq_1\n");
+			if (priv->irq[1] == NO_IRQ) {
+				dev_err(dev, "failed to map irq[1]\n");
 				err = -EINVAL;
 				goto err_out;
 			}
-			/* get the irq_1 line */
-			err = request_irq(priv->irq_1, talitos_interrupt, 0,
+			/* get the irq[1] line */
+			err = request_irq(priv->irq[1], talitos_interrupt, 0,
 					dev_driver_string(dev), priv);
 			if (err) {
-				dev_err(dev, "failed to request irq_1 %d\n",
-					priv->irq_1);
-				irq_dispose_mapping(priv->irq_1);
-				priv->irq_1 = NO_IRQ;
+				dev_err(dev, "failed to request irq[1] %d\n",
+					priv->irq[1]);
+				irq_dispose_mapping(priv->irq[1]);
+				priv->irq[1] = NO_IRQ;
 				goto err_out;
 			}
 		}
 	}
-	for (smp_processor_id = 0; smp_processor_id < NR_CPUS;
-				smp_processor_id++) {
-		for (i = 0; i < priv->core_num_chan[smp_processor_id]; i++) {
-			priv->chan_isr[smp_processor_id] +=
-			MAP_ARRAY(priv->core_chan_no[smp_processor_id][i]);
-			priv->chan_imr[smp_processor_id] +=
-			MAP_ARRAY_DONE(priv->core_chan_no[smp_processor_id][i]);
+	for (grp_id = 0; grp_id < MAX_GROUPS; grp_id++) {
+		for (i = 0; i < priv->core_num_chan[grp_id]; i++) {
+			priv->chan_isr[grp_id] +=
+			MAP_ARRAY(priv->core_chan_no[grp_id][i]);
+			priv->chan_imr[grp_id] +=
+			MAP_ARRAY_DONE(priv->core_chan_no[grp_id][i]);
 		}
 	}
 	if (of_device_is_compatible(np, "fsl,sec2.1"))
@@ -2046,6 +2095,9 @@ static int talitos_probe(struct of_device *ofdev,
 	priv->fifo_len = roundup_pow_of_two(priv->chfifo_len);
 
 	for (i = 0; i < priv->num_channels; i++) {
+		/* save memory, remove if dynamic channel map is used */
+		if (!is_channel_used(i, priv))
+			continue;
 		priv->chan[i].fifo = kzalloc(sizeof(struct talitos_request) *
 					     priv->fifo_len, GFP_KERNEL);
 		if (!priv->chan[i].fifo) {
@@ -2062,10 +2114,12 @@ static int talitos_probe(struct of_device *ofdev,
 	dma_set_mask(dev, DMA_BIT_MASK(36));
 
 	/* reset and initialize the h/w */
-	err = init_device(dev);
-	if (err) {
-		dev_err(dev, "failed to initialize device\n");
-		goto err_out;
+	if (!priv->secondary) {
+		err = init_device(dev);
+		if (err) {
+			dev_err(dev, "failed to initialize device\n");
+			goto err_out;
+		}
 	}
 
 	/* register the RNG, if available */
-- 
1.7.0.4

