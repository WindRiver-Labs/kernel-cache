From 7a76a6956094689a55e0b71bfd2d482bb68ef4de Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Fri, 1 Jul 2011 10:00:04 +0800
Subject: [PATCH 27/47] watchdog: add CONFIG_WATCHDOG_NOWAYOUT support to PowerPC Book-E watchdog driver

Normally, the watchdog is disabled when dev/watchdog is closed, but if
CONFIG_WATCHDOG_NOWAYOUT is defined, then it means that the watchdog should
remain enabled.  So we should disable it only if CONFIG_WATCHDOG_NOWAYOUT is
not defined.

Also ensure that /dev/watchdog is only opened by one process at a time.  That
way, a second process can't accidentally disable the watchdog while the first
process has it open.  There shouldn't be any need for more than one process to
open /dev/watchdog anyway.

Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso
linux-2.6.35-qoriq-watchdog-add-CONFIG_WATCHDOG_NOWAYOUT-s.patch.

Signed-off-by: Timur Tabi <timur@freescale.com>
Acked-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>
Signed-off-by: Li Yang <leoli@freescale.com>
Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 drivers/watchdog/booke_wdt.c |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/drivers/watchdog/booke_wdt.c b/drivers/watchdog/booke_wdt.c
index 585e321..769f899 100644
--- a/drivers/watchdog/booke_wdt.c
+++ b/drivers/watchdog/booke_wdt.c
@@ -52,6 +52,9 @@ u32 booke_wdt_period = WDT_PERIOD_DEFAULT;
 
 static DEFINE_SPINLOCK(booke_wdt_lock);
 
+/* wdt_is_active stores wether or not the /dev/watchdog device is opened */
+static unsigned long wdt_is_active;
+
 /* For the specified period, determine the number of seconds
  * corresponding to the reset time.  There will be a watchdog
  * exception at approximately 3/5 of this time.
@@ -127,9 +130,18 @@ static int booke_wdt_release(struct inode *inode, struct file *file)
 {
 	spin_lock(&booke_wdt_lock);
 	if (booke_wdt_enabled == 1) {
+#ifndef CONFIG_WATCHDOG_NOWAYOUT
+		/* Normally, the watchdog is disabled when /dev/watchdog is closed, but
+		 * if CONFIG_WATCHDOG_NOWAYOUT is defined, then it means that the
+		 * watchdog should remain enabled.  So we disable it only if
+		 * CONFIG_WATCHDOG_NOWAYOUT is not defined.
+		 */
 		booke_wdt_enabled = 0;
 		on_each_cpu(__booke_wdt_disable, NULL, 0);
 		printk(KERN_INFO "PowerPC Book-E Watchdog Timer Disabled\n");
+#endif
+
+		clear_bit(0, &wdt_is_active);
 	}
 	spin_unlock(&booke_wdt_lock);
 }
@@ -200,6 +212,10 @@ static long booke_wdt_ioctl(struct file *file,
 
 static int booke_wdt_open(struct inode *inode, struct file *file)
 {
+	/* /dev/watchdog can only be opened once */
+	if (test_and_set_bit(0, &wdt_is_active))
+		return -EBUSY;
+
 	spin_lock(&booke_wdt_lock);
 	if (booke_wdt_enabled == 0) {
 		booke_wdt_enabled = 1;
-- 
1.7.0.4

