From 57e4e1bd81abfa862ad108fd348ba763a64d19be Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Thu, 24 Sep 2009 19:11:59 +0900
Subject: [PATCH 14/16] net: nec_candy: Use netdev_priv helper

Use netdev_priv() instead of dev->priv to access to the netdev->priv.
Netdev_priv() wraps the calculation of netdev->priv's offset, and is
also more flexible than netdev->priv.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 drivers/net/nec_candy.c |   68 +++++++++++++++++++++++-----------------------
 1 files changed, 34 insertions(+), 34 deletions(-)

diff --git a/drivers/net/nec_candy.c b/drivers/net/nec_candy.c
index a0591ad..0fdc8da 100644
--- a/drivers/net/nec_candy.c
+++ b/drivers/net/nec_candy.c
@@ -147,7 +147,7 @@ static unsigned int last_tx_buff_desc;
 static void
 mdio_write(struct net_device *dev, int phy_id, int location, int val)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	/* wait for busy */
@@ -165,7 +165,7 @@ mdio_write(struct net_device *dev, int phy_id, int location, int val)
 static int
 mdio_read(struct net_device *dev, int phy_id, int location)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	/* wait for busy */
@@ -188,7 +188,7 @@ mdio_read(struct net_device *dev, int phy_id, int location)
 static void
 candy_set_media_speed(struct net_device *dev)
 {
-	struct candy_private *pp = dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	struct nec_candy_platform_data *pdata = pp->dev->platform_data;
 	int lpa, advertise, media, reg;
 	ulong ccr;
@@ -449,7 +449,7 @@ err_out_gregs:
 static int
 candy_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 {
-	struct candy_private *pp = dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	struct mii_ioctl_data *mii = (struct mii_ioctl_data *)&rq->ifr_data;
 	int rc;
 
@@ -465,7 +465,7 @@ candy_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 static void
 set_mac_addr(struct net_device *dev, u_char *addr)
 {
-	candy_regs *p = ((struct candy_private *)dev->priv)->regs;
+	candy_regs *p = ((struct candy_private *)netdev_priv(dev))->regs;
 
 	candy_out(p->lsa2, (addr[0] << 8 | addr[1]) & LSA2_MASK);
 	candy_out(p->lsa1,
@@ -475,7 +475,7 @@ set_mac_addr(struct net_device *dev, u_char *addr)
 static void
 candy_filter_init(struct net_device *dev)
 {
-	candy_regs *p = ((struct candy_private *)dev->priv)->regs;
+	candy_regs *p = ((struct candy_private *)netdev_priv(dev))->regs;
 
 	/* don't call while processing error recovery */
 
@@ -495,7 +495,7 @@ candy_filter_init(struct net_device *dev)
 static void
 candy_hw_init(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	struct nec_candy_platform_data *pdata = pp->dev->platform_data;
 	candy_regs *p = pp->regs;
 	unsigned int temp;
@@ -628,7 +628,7 @@ candy_hw_init(struct net_device *dev)
 static void
 candy_down(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	DEBUG_VERBOSE(printk(KERN_DEBUG "candy_down() invoked.\n"));
@@ -651,7 +651,7 @@ candy_down(struct net_device *dev)
 static void
 candy_up(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	DEBUG_VERBOSE(printk(KERN_DEBUG "candy_up() invoked.\n"));
@@ -677,7 +677,7 @@ candy_up(struct net_device *dev)
 static void
 candy_set_filter(struct net_device *dev, int on)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 	struct dev_mc_list *mclist = dev->mc_list;
 	unsigned long ht[2];
@@ -709,7 +709,7 @@ candy_set_filter(struct net_device *dev, int on)
 static void
 candy_error_recover(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	spin_lock(&pp->lock);
@@ -745,7 +745,7 @@ candy_error_recover(struct net_device *dev)
 static void
 tx_stall_recover(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	last_tx_err_status = pp->tx_ring[pp->tx_head].status;
@@ -781,7 +781,7 @@ tx_stall_recover(struct net_device *dev)
 static void
 candy_init_rings(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	int i;
 
 	DEBUG_VERBOSE(printk(KERN_DEBUG "candy_init_rings() invoked.\n"));
@@ -865,7 +865,7 @@ candy_check_intr(ulong isr)
 static void
 reclaim_one_rx_desc(struct net_device *dev, char *buf)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 	struct candy_desc *dp = &pp->rx_ring[pp->rx_head];
 
@@ -890,7 +890,7 @@ reclaim_one_rx_desc(struct net_device *dev, char *buf)
 static void
 restart_rx_hw(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	if (netif_msg_rx_status(pp))
@@ -905,7 +905,7 @@ restart_rx_hw(struct net_device *dev)
 static void
 handle_rx_error(struct net_device *dev, struct candy_desc *dp, ulong isr)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 
 	if (netif_msg_rx_err(pp))
 		printk(KERN_DEBUG "%s: rx_err, rx_ring[%d] error,"
@@ -922,7 +922,7 @@ handle_rx_error(struct net_device *dev, struct candy_desc *dp, ulong isr)
 
 static int candy_napi_rx(struct net_device *dev, int budget)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 	struct candy_desc *dp = &pp->rx_ring[pp->rx_head];
 	struct sk_buff *rxskb, *newskb;
@@ -1033,7 +1033,7 @@ static int candy_napi_poll(struct napi_struct *napi, int budget)
 static void
 candy_rx(struct net_device *dev, ulong isr)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 	struct candy_desc *dp = &pp->rx_ring[pp->rx_head];
 	int pkt_len, rnod;
@@ -1185,7 +1185,7 @@ append_one_tx_desc(struct net_device *dev,
 		   ushort status,
 		   ushort size, ulong pointer, struct sk_buff *skb)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	struct candy_desc *dp = &pp->tx_ring[pp->tx_tail];
 #ifdef WORKAROUND_E10_VR4133
 	int i, shift = pointer % 4;
@@ -1226,7 +1226,7 @@ append_one_tx_desc(struct net_device *dev,
 static void
 reclaim_one_tx_desc(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	struct candy_desc *dp = &pp->tx_ring[pp->tx_head];
 
 	dp->status = 0;
@@ -1247,7 +1247,7 @@ reclaim_one_tx_desc(struct net_device *dev)
 static void
 restart_tx_hw(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	append_one_tx_desc(dev, 0, 0, 0, NULL);
@@ -1268,7 +1268,7 @@ restart_tx_hw(struct net_device *dev)
 static void
 handle_tx_error(struct net_device *dev, struct candy_desc *dp, ulong isr)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 
 	if (netif_msg_tx_err(pp))
 		printk(KERN_DEBUG "%s: tx err, tx_ring[%d] error, "
@@ -1287,7 +1287,7 @@ handle_tx_error(struct net_device *dev, struct candy_desc *dp, ulong isr)
 static void
 candy_tx_done(struct net_device *dev, ulong isr)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	struct candy_desc *dp;
 
 	if (netif_msg_tx_done(pp))
@@ -1353,7 +1353,7 @@ candy_tx_done(struct net_device *dev, ulong isr)
 static void
 candy_update_stats(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 
 	/* some stats we get from hardware, while the rest we do
@@ -1401,7 +1401,7 @@ static irqreturn_t
 candy_interrupt(int irq, void *dev_instance)
 {
 	struct net_device *dev = (struct net_device *)dev_instance;
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 	ulong isr;
 
@@ -1457,7 +1457,7 @@ static void
 candy_get_phy_status(struct net_device *dev, int *duplex, int *linkup,
 		     int *speed)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	u16 reg;
 
 	reg = mdio_read(pp->mii_if.dev, pp->mii_if.phy_id, MII_BMCR);
@@ -1507,7 +1507,7 @@ static void
 candy_poll_mii(unsigned long data)
 {
 	struct net_device *dev = (struct net_device *)data;
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	int phy_duplex, mac_duplex;
 	int phy_carrier, netif_carrier;
 	int phy_speed, mac_speed;
@@ -1553,7 +1553,7 @@ candy_poll_mii(unsigned long data)
 static int
 candy_open(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	int retval;
 
 	if (netif_msg_ifup(pp))
@@ -1591,7 +1591,7 @@ candy_open(struct net_device *dev)
 static int
 candy_close(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 
 	if (netif_msg_ifdown(pp))
 		printk(KERN_DEBUG "%s: disabling interface\n", dev->name);
@@ -1628,7 +1628,7 @@ candy_close(struct net_device *dev)
 static int
 candy_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	ulong flags;
 
 	if (netif_msg_tx_queued(pp))
@@ -1685,7 +1685,7 @@ candy_xmit(struct sk_buff *skb, struct net_device *dev)
 static struct net_device_stats *
 candy_get_stats(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	unsigned long flags;
 
 	if (netif_device_present(dev)) {
@@ -1699,7 +1699,7 @@ candy_get_stats(struct net_device *dev)
 static void
 candy_set_rx_mode(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 	candy_regs *p = pp->regs;
 	ulong val;
 
@@ -1730,7 +1730,7 @@ candy_set_rx_mode(struct net_device *dev)
 static void
 candy_tx_timeout(struct net_device *dev)
 {
-	struct candy_private *pp = (struct candy_private *)dev->priv;
+	struct candy_private *pp = netdev_priv(dev);
 
 	printk(KERN_ERR "%s : tx_timeout.\n", dev->name);
 	printk(KERN_ERR "Last Tx Err Status = 0x%04x\n", last_tx_err_status);
@@ -1817,7 +1817,7 @@ static int nec_candy_probe(struct device *dev)
 #endif
 
 	/* init private data */
-	pp = (struct candy_private *)ndev->priv;
+	pp = netdev_priv(ndev);
 	p = pp->regs = (candy_regs *)ndev->base_addr;
 	pp->dev = dev;
 
-- 
1.6.3.3

