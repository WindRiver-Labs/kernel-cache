From 79b4aafe3a2c0e397854d4a1136ef32a092476f2 Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Tue, 28 Apr 2009 14:14:27 +0900
Subject: [PATCH] net: nec_candy: Reset tx descriptor status before re-starting tx

At candy_error_recover or tx_stall_recover, certain error indicator(s)
has been set in 'status' field of the tx descriptor.

When re-starting transmission *after* those tx error handlings, we need
to reset tx descriptor status (clear error indicator(s)), then do MEMSYNC
in order to reflect the updated status onto the memory.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 drivers/net/nec_candy.c |   16 +++++++++++++++-
 1 files changed, 15 insertions(+), 1 deletions(-)

diff --git a/drivers/net/nec_candy.c b/drivers/net/nec_candy.c
index b85d975..d254c85 100644
--- a/drivers/net/nec_candy.c
+++ b/drivers/net/nec_candy.c
@@ -725,7 +725,17 @@ candy_error_recover(struct net_device *dev)
 
 	netif_wake_queue(dev);
 
-	/* restart transmitting */
+	/*
+	 * restart transmitting - Once tx hardware got stalled, certain
+	 * error indicator(s) has been set in the tx descriptor's status
+	 * field.
+	 *
+	 * We need to reset/clear the status field, so that the hardware
+	 * can properly process tx descriptors.  We also need a MEMSYNC
+	 * in order to reflect the updated status onto the memory.
+	 */
+	pp->tx_ring[pp->tx_head].status = LAST | DB_LP;
+	MEMSYNC(pp->tx_ring);
 	candy_out(p->txdp, CPHYSADDR(&pp->tx_ring[pp->tx_head]));
 
 	spin_unlock(&pp->lock);
@@ -744,6 +754,10 @@ tx_stall_recover(struct net_device *dev)
 	last_tx_err_status = pp->tx_ring[pp->tx_head].status;
 	last_tx_buff_desc = (unsigned int)&pp->tx_ring[pp->tx_head];
 
+	/* Reset status before re-starting transmission */
+	pp->tx_ring[pp->tx_head].status = LAST | DB_LP;
+	MEMSYNC(pp->tx_ring);
+
 #ifdef WORKAROUND_E8_TX_STALL
 	/* E-8 bug only happens when receiving is on */
 	if ((candy_in(p->macc1) & SRXEN) && (candy_in(p->rxcfg) & RXE)) {
-- 
1.6.0.4

