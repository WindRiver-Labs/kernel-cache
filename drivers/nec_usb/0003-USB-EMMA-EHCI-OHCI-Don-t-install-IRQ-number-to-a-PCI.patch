From 6fd834ca762fe3ecf1273fb5a2ec104c4f416022 Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Mon, 7 Sep 2009 09:26:52 +0900
Subject: [PATCH 03/12] USB: EMMA EHCI/OHCI: Don't install IRQ number to a PCI config register

The IRQ num from platform_get_irq_byname() is one of the port-dependent
resources, and doesn't fit to the PCI configuration standard.  From a
technical standpoint, it makes no sense to install it to the PCI config
space.

As for EMMA SoC's built-in USB HCs, interrupt lines are internally wired
up to the BHIF interrupt controller, and there's nothing to be cofigured.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 drivers/usb/host/ehci-emma.c |    9 ---------
 drivers/usb/host/ohci-emma.c |    9 ---------
 2 files changed, 0 insertions(+), 18 deletions(-)

diff --git a/drivers/usb/host/ehci-emma.c b/drivers/usb/host/ehci-emma.c
index fa0673d..2b441bb 100644
--- a/drivers/usb/host/ehci-emma.c
+++ b/drivers/usb/host/ehci-emma.c
@@ -38,21 +38,12 @@
 static void emma_pseudo_pci_init(struct platform_device *pdev)
 {
 	struct resource *res;
-	int		irq;
-	u32		d;
 
 	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ehci_mem");
-	irq = platform_get_irq_byname(pdev, "ehci_irq");
 
 	/* PCI BAR */
 	writel(CPHYSADDR(res->start), (void *)(PCI_CONFIG + 0x10));
 
-	/* PCI interrupt line */
-	d = readl((void *)(PCI_CONFIG + 0x3c));
-	d &= ~0xff;
-	d |= irq;
-	writel(d, (void *)(PCI_CONFIG + 0x3c));
-
 	/* PCI command status */
 	writel(PCI_CMD_MASTER_ENABLE | PCI_CMD_MEM_ENABLE,
 	       (void *)(PCI_CONFIG + 0x4));
diff --git a/drivers/usb/host/ohci-emma.c b/drivers/usb/host/ohci-emma.c
index 77ad987..841f13c 100644
--- a/drivers/usb/host/ohci-emma.c
+++ b/drivers/usb/host/ohci-emma.c
@@ -37,21 +37,12 @@
 static void emma_pseudo_pci_init(struct platform_device *pdev)
 {
 	struct resource *res;
-	int		irq;
-	u32		d;
 
 	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ohci_mem");
-	irq = platform_get_irq_byname(pdev, "ohci_irq");
 
 	/* PCI BAR */
 	writel(CPHYSADDR(res->start), (void *)(PCI_CONFIG + 0x10));
 
-	/* PCI interrupt line */
-	d = readl((void *)(PCI_CONFIG + 0x3c));
-	d &= ~0xff;
-	d |= irq;
-	writel(d, (void *)(PCI_CONFIG + 0x3c));
-
 	/* PCI command status */
 	writel(PCI_CMD_MASTER_ENABLE | PCI_CMD_MEM_ENABLE,
 	       (void *)(PCI_CONFIG + 0x4));
-- 
1.6.3.3

