From b420bbd905d349ce4e7b8730daec4f3e32672f36 Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Mon, 7 Sep 2009 09:27:48 +0900
Subject: [PATCH 05/12] USB: EMMA EHCI/OHCI: Misc cleanups and fixes on platform_get_resource

* Use platform_get_resource() instead of platform_get_resource_byname(),
  as it's in a minority in USB HC drivers.
* Use dev_err() helper which will print dev_name() at the same time.
* Do not 'goto' on error.  We have nothing left to be cleaned up here.
* Use resource_size() helper.

Note that we won't test a returned value after platform_get_resource()
in emma_pseudo_pci_init() as we've already finished that job in
usb_[eo]hci_emma_probe().

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 drivers/usb/host/ehci-emma.c |   12 +++++-------
 drivers/usb/host/ohci-emma.c |   12 +++++-------
 2 files changed, 10 insertions(+), 14 deletions(-)

diff --git a/drivers/usb/host/ehci-emma.c b/drivers/usb/host/ehci-emma.c
index d5d75f7..c2a9330 100644
--- a/drivers/usb/host/ehci-emma.c
+++ b/drivers/usb/host/ehci-emma.c
@@ -39,7 +39,7 @@ static void emma_pseudo_pci_init(struct platform_device *pdev)
 {
 	struct resource *res;
 
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ehci_mem");
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 
 	/* PCI BAR */
 	writel(CPHYSADDR(res->start), (void *)(PCI_CONFIG + 0x10));
@@ -84,12 +84,10 @@ int usb_ehci_emma_probe(const struct hc_driver *driver,
 	struct resource *res;
 	int irq, ret;
 
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ehci_mem");
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
-		pr_debug("Found HC with no register addr.  Check %s setup!\n",
-			 pdev->dev.bus_id);
-		ret = -ENODEV;
-		goto err1;
+		dev_err(&pdev->dev, "Found HC with no register addr!\n");
+		return -ENODEV;
 	}
 
 	irq = platform_get_irq(pdev, 0);
@@ -102,7 +100,7 @@ int usb_ehci_emma_probe(const struct hc_driver *driver,
 	if (!hcd)
 		return -ENOMEM;
 	hcd->rsrc_start = (u64)res->start;
-	hcd->rsrc_len = (u64)(res->end - res->start + 1);
+	hcd->rsrc_len = (u64)resource_size(res);
 
 	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len, hcd_name)) {
 		pr_debug("request_mem_region failed\n");
diff --git a/drivers/usb/host/ohci-emma.c b/drivers/usb/host/ohci-emma.c
index efb8b0d..3872dd2 100644
--- a/drivers/usb/host/ohci-emma.c
+++ b/drivers/usb/host/ohci-emma.c
@@ -38,7 +38,7 @@ static void emma_pseudo_pci_init(struct platform_device *pdev)
 {
 	struct resource *res;
 
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ohci_mem");
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 
 	/* PCI BAR */
 	writel(CPHYSADDR(res->start), (void *)(PCI_CONFIG + 0x10));
@@ -82,12 +82,10 @@ int usb_hcd_emma_probe(const struct hc_driver *driver,
 	struct usb_hcd	*hcd;
 	int irq, ret;
 
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ohci_mem");
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
-		pr_debug("Found HC with no register addr.  Check %s setup!\n",
-			 pdev->dev.bus_id);
-		ret = -ENODEV;
-		goto err1;
+		dev_err(&pdev->dev, "Found HC with no register addr!\n");
+		return -ENODEV;
 	}
 
 	irq = platform_get_irq(pdev, 0);
@@ -100,7 +98,7 @@ int usb_hcd_emma_probe(const struct hc_driver *driver,
 	if (!hcd)
 		return -ENOMEM;
 	hcd->rsrc_start = (u64)res->start;
-	hcd->rsrc_len = (u64)(res->end - res->start + 1);
+	hcd->rsrc_len = (u64)resource_size(res);
 
 	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len, hcd_name)) {
 		pr_debug("request_mem_region failed\n");
-- 
1.6.3.3

