From bfadcfd1bc4d1c87a70cd0f6e8287e3669e5dd25 Mon Sep 17 00:00:00 2001
From: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
Date: Mon, 7 Sep 2009 09:28:13 +0900
Subject: [PATCH 06/12] USB: EMMA EHCI/OHCI: Use physical addresses for built-in USB HC resources

We used to expect that platform resources for built-in USB HCs are
available in CKSEG1 virtual address segment instead of physical one,
which led to a less portable driver.

With this patch, however, we assume that resource addresses would be
treated in physical address space, hence we need to do ioremap() prior
to accessing to USB HC operational registers.

Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi@necel.com>
---
 drivers/usb/host/ehci-emma.c |   12 ++++++++++--
 drivers/usb/host/ohci-emma.c |   12 ++++++++++--
 2 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/host/ehci-emma.c b/drivers/usb/host/ehci-emma.c
index c2a9330..1fae7eb 100644
--- a/drivers/usb/host/ehci-emma.c
+++ b/drivers/usb/host/ehci-emma.c
@@ -42,7 +42,7 @@ static void emma_pseudo_pci_init(struct platform_device *pdev)
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 
 	/* PCI BAR */
-	writel(CPHYSADDR(res->start), (void *)(PCI_CONFIG + 0x10));
+	writel(res->start, (void *)(PCI_CONFIG + 0x10));
 
 	/* PCI command status */
 	writel(PCI_CMD_MASTER_ENABLE | PCI_CMD_MEM_ENABLE,
@@ -108,7 +108,12 @@ int usb_ehci_emma_probe(const struct hc_driver *driver,
 		goto err1;
 	}
 
-	hcd->regs = (void __iomem *)((u32)hcd->rsrc_start);
+	hcd->regs = ioremap(hcd->rsrc_start, hcd->rsrc_len);
+	if (!hcd->regs) {
+		dev_err(&pdev->dev, "ioremap failed\n");
+		ret = -ENOMEM;
+		goto err2;
+	}
 
 	emma_start_ehc(pdev);
 
@@ -126,6 +131,8 @@ int usb_ehci_emma_probe(const struct hc_driver *driver,
 
  err4:
 	emma_stop_ehc(pdev);
+	iounmap(hcd->regs);
+ err2:
 	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
  err1:
 	usb_put_hcd(hcd);
@@ -150,6 +157,7 @@ void usb_ehci_emma_remove(struct usb_hcd *hcd, struct platform_device *dev)
 {
 	usb_remove_hcd(hcd);
 	emma_stop_ehc(dev);
+	iounmap(hcd->regs);
 	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
 	usb_put_hcd(hcd);
 }
diff --git a/drivers/usb/host/ohci-emma.c b/drivers/usb/host/ohci-emma.c
index 3872dd2..93da50e 100644
--- a/drivers/usb/host/ohci-emma.c
+++ b/drivers/usb/host/ohci-emma.c
@@ -41,7 +41,7 @@ static void emma_pseudo_pci_init(struct platform_device *pdev)
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 
 	/* PCI BAR */
-	writel(CPHYSADDR(res->start), (void *)(PCI_CONFIG + 0x10));
+	writel(res->start, (void *)(PCI_CONFIG + 0x10));
 
 	/* PCI command status */
 	writel(PCI_CMD_MASTER_ENABLE | PCI_CMD_MEM_ENABLE,
@@ -106,7 +106,12 @@ int usb_hcd_emma_probe(const struct hc_driver *driver,
 		goto err1;
 	}
 
-	hcd->regs = (void __iomem *)((u32)hcd->rsrc_start);
+	hcd->regs = ioremap(hcd->rsrc_start, hcd->rsrc_len);
+	if (!hcd->regs) {
+		dev_err(&pdev->dev, "ioremap failed\n");
+		ret = -ENOMEM;
+		goto err2;
+	}
 
 	emma_start_hc(pdev);
 	ohci_hcd_init(hcd_to_ohci(hcd));
@@ -119,6 +124,8 @@ int usb_hcd_emma_probe(const struct hc_driver *driver,
 
  err4:
 	emma_stop_hc(pdev);
+	iounmap(hcd->regs);
+ err2:
 	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
  err1:
 	usb_put_hcd(hcd);
@@ -143,6 +150,7 @@ void usb_hcd_emma_remove(struct usb_hcd *hcd, struct platform_device *pdev)
 {
 	usb_remove_hcd(hcd);
 	emma_stop_hc(pdev);
+	iounmap(hcd->regs);
 	release_mem_region(hcd->rsrc_start, hcd->rsrc_len);
 	usb_put_hcd(hcd);
 }
-- 
1.6.3.3

