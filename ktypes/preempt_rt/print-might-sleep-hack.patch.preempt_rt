Temporary HACK!!!!

PREEMPT_RT suffers from the on going problem of running
printk in atomic operations.  It is very advantageous to do so
but with PREEMPT_RT making spin_locks sleep, it can also be
devastating.

This patch does not solve the problem of printk sleeping in
an atomic operation. This patch just makes printk not report
that it is. Of course if printk does report that it's sleeping
in an atomic operation, then that printing of the report will
also print a report, and you go into recursive hell.

We need to really sit down and solve the real issue here.

---
 include/linux/sched.h |   13 +++++++++++++
 kernel/printk.c       |    5 ++++-
 kernel/rtmutex.c      |    4 +++-
 3 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 9baed6f..27e70d3 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1437,6 +1437,13 @@ struct task_struct {
 	int latency_record_count;
 	struct latency_record latency_record[LT_SAVECOUNT];
 #endif
+#ifdef CONFIG_PREEMPT_RT
+	/*
+	 * Temporary hack, until we find a solution to
+	 * handle printk in atomic operations.
+	 */
+	int in_printk;
+#endif
 #ifdef CONFIG_INTERPEAK
 	unsigned short  vr;  /* Virtual router */
         void *proc;
@@ -1455,6 +1462,12 @@ struct task_struct {
 #endif
 };
 
+#ifdef CONFIG_PREEMPT_RT
+# define set_printk_might_sleep(x) do { current->in_printk = x; } while(0)
+#else
+# define set_printk_might_sleep(x) do { } while(0)
+#endif
+
 /*
  * Priority of a process goes from 0..MAX_PRIO-1, valid RT
  * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH
diff --git a/kernel/printk.c b/kernel/printk.c
index 2904690..eb7c4f1 100644
--- a/kernel/printk.c
+++ b/kernel/printk.c
@@ -445,8 +445,11 @@ static void __call_console_drivers(unsigned start, unsigned end)
 	for (con = console_drivers; con; con = con->next) {
 		if ((con->flags & CON_ENABLED) && con->write &&
 				(cpu_online(raw_smp_processor_id()) ||
-				(con->flags & CON_ANYTIME)))
+				 (con->flags & CON_ANYTIME))) {
+			set_printk_might_sleep(1);
 			con->write(con, &LOG_BUF(start), end - start);
+			set_printk_might_sleep(0);
+		}
 	}
 }
 
diff --git a/kernel/rtmutex.c b/kernel/rtmutex.c
index 341f8bb..2943fcc 100644
--- a/kernel/rtmutex.c
+++ b/kernel/rtmutex.c
@@ -633,7 +633,9 @@ static inline void
 rt_spin_lock_fastlock(struct rt_mutex *lock,
 		void  (*slowfn)(struct rt_mutex *lock))
 {
-	might_sleep();
+	/* Temporary HACK! */
+	if (!current->in_printk)
+		might_sleep();
 
 	if (likely(rt_mutex_cmpxchg(lock, NULL, current)))
 		rt_mutex_deadlock_account_lock(lock, current);
