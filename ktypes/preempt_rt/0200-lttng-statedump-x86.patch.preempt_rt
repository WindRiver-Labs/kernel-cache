From 08eb7efb201d00f7d5fd52b71e6f0f592396938e Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date: Thu, 30 Oct 2008 23:27:35 -0400
Subject: [PATCH] lttng-statedump-x86

lttng statedump x86

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
---
 arch/x86/Kconfig             |    1 +
 arch/x86/kernel/syscall_64.c |   17 +++++++++++++++++
 arch/x86/kernel/traps_32.c   |   33 +++++++++++++++++++++++++++++++++
 arch/x86/kernel/traps_64.c   |   15 +++++++++++++++
 include/linux/ltt-tracer.h   |   15 +++++++++++++++
 kernel/softirq.c             |   16 ++++++++++++++++
 ltt/Kconfig                  |    3 +++
 ltt/ltt-statedump.c          |    3 +++
 8 files changed, 103 insertions(+), 0 deletions(-)

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index ff52f69..61daa9f 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -28,6 +28,7 @@ config X86
 	select HAVE_KRETPROBES
 	select HAVE_TRACE_CLOCK
 	select HAVE_UNSTABLE_TSC
+	select HAVE_LTT_DUMP_TABLES
 	select HAVE_DYNAMIC_FTRACE
 	select HAVE_FTRACE
 	select HAVE_KVM if ((X86_32 && !X86_VOYAGER && !X86_VISWS && !X86_NUMAQ) || X86_64)
diff --git a/arch/x86/kernel/syscall_64.c b/arch/x86/kernel/syscall_64.c
index 170d43c..97cf8d9 100644
--- a/arch/x86/kernel/syscall_64.c
+++ b/arch/x86/kernel/syscall_64.c
@@ -1,8 +1,11 @@
 /* System call table for x86-64. */
 
 #include <linux/linkage.h>
+#include <linux/module.h>
 #include <linux/sys.h>
 #include <linux/cache.h>
+#include <linux/marker.h>
+#include <linux/kallsyms.h>
 #include <asm/asm-offsets.h>
 
 #define __NO_STUBS
@@ -27,3 +30,17 @@ const sys_call_ptr_t sys_call_table[__NR_syscall_max+1] = {
 	[0 ... __NR_syscall_max] = &sys_ni_syscall,
 #include <asm/unistd_64.h>
 };
+
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < __NR_syscall_max + 1; i++) {
+		sprint_symbol(namebuf, (unsigned long)sys_call_table[i]);
+		__trace_mark(0, statedump_sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void*)sys_call_table[i], namebuf);
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_sys_call_table);
diff --git a/arch/x86/kernel/traps_32.c b/arch/x86/kernel/traps_32.c
index 026f83e..f293a78 100644
--- a/arch/x86/kernel/traps_32.c
+++ b/arch/x86/kernel/traps_32.c
@@ -62,6 +62,7 @@
 #include <asm/smp.h>
 #include <asm/io.h>
 #include <asm/traps.h>
+#include <asm/unistd.h>
 
 #include "mach_traps.h"
 
@@ -73,6 +74,9 @@ asmlinkage int system_call(void);
 /* Do we ignore FPU interrupts ? */
 char ignore_fpu_irq;
 
+extern unsigned long sys_call_table[];
+extern unsigned long syscall_table_size;
+
 /*
  * The IDT has to be page-aligned to simplify the Pentium
  * F0 0F bug workaround.. We have a special link segment
@@ -81,6 +85,21 @@ char ignore_fpu_irq;
 gate_desc idt_table[256]
 	__attribute__((__section__(".data.idt"))) = { { { { 0, 0 } } }, };
 
+void ltt_dump_idt_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < IDT_ENTRIES; i++) {
+		unsigned long address = gate_offset(idt_table[i]);
+		sprint_symbol(namebuf, address);
+		__trace_mark(0, statedump_idt_table, call_data,
+			"irq %d address %p symbol %s",
+			i, (void *)address, namebuf);
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_idt_table);
+
 int panic_on_unrecovered_nmi;
 int kstack_depth_to_print = 24;
 static unsigned int code_bytes = 64;
@@ -1172,6 +1191,20 @@ unsigned long patch_espfix_desc(unsigned long uesp, unsigned long kesp)
 	return new_kesp;
 }
 
+void ltt_dump_sys_call_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < NR_syscalls; i++) {
+		sprint_symbol(namebuf, sys_call_table[i]);
+		__trace_mark(0, statedump_sys_call_table, call_data,
+			"id %d address %p symbol %s",
+			i, (void*)sys_call_table[i], namebuf);
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_sys_call_table);
+
 /*
  * 'math_state_restore()' saves the current math information in the
  * old math state array, and gets the new ones from the current task
diff --git a/arch/x86/kernel/traps_64.c b/arch/x86/kernel/traps_64.c
index 31f302b..8291bf4 100644
--- a/arch/x86/kernel/traps_64.c
+++ b/arch/x86/kernel/traps_64.c
@@ -1139,6 +1139,21 @@ asmlinkage void __attribute__((weak)) mce_threshold_interrupt(void)
 {
 }
 
+void ltt_dump_idt_table(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < IDT_ENTRIES; i++) {
+		unsigned long address = gate_offset(idt_table[i]);
+		sprint_symbol(namebuf, address);
+		__trace_mark(0, statedump_idt_table, call_data,
+			"irq %d address %p symbol %s",
+			i, (void *)address, namebuf);
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_idt_table);
+
 /*
  * 'math_state_restore()' saves the current math information in the
  * old math state array, and gets the new ones from the current task
diff --git a/include/linux/ltt-tracer.h b/include/linux/ltt-tracer.h
index 8dc6e78..277d42f 100644
--- a/include/linux/ltt-tracer.h
+++ b/include/linux/ltt-tracer.h
@@ -724,6 +724,21 @@ extern void probe_id_defrag(void);
 void ltt_lock_traces(void);
 void ltt_unlock_traces(void);
 
+extern void ltt_dump_softirq_vec(void *call_data);
+
+#ifdef CONFIG_HAVE_LTT_DUMP_TABLES
+extern void ltt_dump_sys_call_table(void *call_data);
+extern void ltt_dump_idt_table(void *call_data);
+#else
+static inline void ltt_dump_sys_call_table(void *call_data)
+{
+}
+
+static inline void ltt_dump_idt_table(void *call_data)
+{
+}
+#endif
+
 /* Relay IOCTL */
 
 /* Get the next sub buffer that can be read. */
diff --git a/kernel/softirq.c b/kernel/softirq.c
index e730b90..4f10e5b 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -28,6 +28,8 @@
 #include <linux/kthread.h>
 #include <linux/rcupdate.h>
 #include <linux/smp.h>
+#include <linux/marker.h>
+#include <linux/kallsyms.h>
 #include <linux/tick.h>
 #include <trace/irq.h>
 
@@ -67,6 +69,20 @@ struct softirqdata {
 #endif
 };
 
+void ltt_dump_softirq_vec(void *call_data)
+{
+	int i;
+	char namebuf[KSYM_NAME_LEN];
+
+	for (i = 0; i < 32; i++) {
+		sprint_symbol(namebuf, (unsigned long)softirq_vec[i].action);
+		__trace_mark(0, statedump_softirq_vec, call_data,
+			"id %d address %p symbol %s",
+			i, softirq_vec[i].action, namebuf);
+	}
+}
+EXPORT_SYMBOL_GPL(ltt_dump_softirq_vec);
+
 static DEFINE_PER_CPU(struct softirqdata [MAX_SOFTIRQ], ksoftirqd);
 
 #ifdef CONFIG_PREEMPT_SOFTIRQS
diff --git a/ltt/Kconfig b/ltt/Kconfig
index a17f3b5..6180b86 100644
--- a/ltt/Kconfig
+++ b/ltt/Kconfig
@@ -37,6 +37,9 @@ config LTT_TRACEPROBES
 	  loaded and format the information collected by the tracepoints with
 	  the Markers.
 
+config HAVE_LTT_DUMP_TABLES
+	def_bool n
+
 config LTT_RELAY_ALLOC
 	def_bool n
 
diff --git a/ltt/ltt-statedump.c b/ltt/ltt-statedump.c
index 02f5b35..a387078 100644
--- a/ltt/ltt-statedump.c
+++ b/ltt/ltt-statedump.c
@@ -330,6 +330,9 @@ static int do_ltt_statedump(struct ltt_probe_private_data *call_data)
 	list_interrupts(call_data);
 	ltt_enumerate_network_ip_interface(call_data);
 	ltt_dump_swap_files(call_data);
+	ltt_dump_sys_call_table(call_data);
+	ltt_dump_softirq_vec(call_data);
+	ltt_dump_idt_table(call_data);
 
 	/*
 	 * Fire off a work queue on each CPU. Their sole purpose in life
-- 
1.5.5.1

