From f5495d90eaf417c9b5131685a3613cd1993f4950 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Wed, 2 Mar 2011 10:57:57 -0500
Subject: [PATCH] page_alloc: fix delayed zone_pcp locking in free_hot_cold_page

In 33-rt from tip, the init of pset/pcp was done as below:

        pset = get_zone_pcp(zone, &flags, &this_cpu);
        pcp = &pset->pcp;
        migratetype = get_pageblock_migratetype(page);
        set_page_private(page, migratetype);

i.e. before dealing with migratetype.  Relocate it so that
it is consistent with the above and not delayed.

This is important, since the locking (via &flags) is done at the
point of calling get_zone_pcp.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 mm/page_alloc.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 6b25fca..f2cc766 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -1268,6 +1268,8 @@ void free_hot_cold_page(struct page *page, int cold)
 	arch_free_page(page, 0);
 	kernel_map_pages(page, 1, 0);
 
+	pset = get_zone_pcp(zone, &flags, &this_cpu);
+	pcp = &pset->pcp;
 	migratetype = get_pageblock_migratetype(page);
 	set_page_private(page, migratetype);
 	if (unlikely(wasMlocked))
@@ -1289,8 +1291,6 @@ void free_hot_cold_page(struct page *page, int cold)
 		migratetype = MIGRATE_MOVABLE;
 	}
 
-	pset = get_zone_pcp(zone, &flags, &this_cpu);
-	pcp = &pset->pcp;
 	if (cold)
 		list_add_tail(&page->lru, &pcp->lists[migratetype]);
 	else
-- 
1.7.4

