From 27aceb7ff7a5f20131e1c7a83f5a6449f3acb291 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Sat, 19 Feb 2011 14:11:22 -0500
Subject: [PATCH] netfilter: fix incorrect upstream revert by giant rt patch

Bundled into "preempt-rt: -rt20 applied to 2.6.34 -standard" was
an accidental revert of RCU annotations that were created in
upstream changeset:

   commit a898def29e4119bc01ebe7ca97423181f4c0ea2d
   Author: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
   Date:   Mon Feb 22 17:04:49 2010 -0800

    net: Add checking to rcu_dereference() primitives

Restore the bh annotations that should have never been deleted.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 net/core/filter.c |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/net/core/filter.c b/net/core/filter.c
index c372857..2bc5376 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -87,7 +87,7 @@ int sk_filter(struct sock *sk, struct sk_buff *skb)
 		return err;
 
 	rcu_read_lock_bh();
-	filter = rcu_dereference(sk->sk_filter);
+	filter = rcu_dereference_bh(sk->sk_filter);
 	if (filter) {
 		unsigned int pkt_len = sk_run_filter(skb, filter->insns,
 				filter->len);
@@ -521,7 +521,7 @@ int sk_attach_filter(struct sock_fprog *fprog, struct sock *sk)
 	}
 
 	rcu_read_lock_bh();
-	old_fp = rcu_dereference(sk->sk_filter);
+	old_fp = rcu_dereference_bh(sk->sk_filter);
 	rcu_assign_pointer(sk->sk_filter, fp);
 	rcu_read_unlock_bh();
 
@@ -537,7 +537,7 @@ int sk_detach_filter(struct sock *sk)
 	struct sk_filter *filter;
 
 	rcu_read_lock_bh();
-	filter = rcu_dereference(sk->sk_filter);
+	filter = rcu_dereference_bh(sk->sk_filter);
 	if (filter) {
 		rcu_assign_pointer(sk->sk_filter, NULL);
 		sk_filter_uncharge(sk, filter);
-- 
1.7.4

