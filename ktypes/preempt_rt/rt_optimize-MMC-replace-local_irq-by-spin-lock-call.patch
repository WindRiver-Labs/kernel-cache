From 1996c4ff7d79f7f7edb02df3db9121f068ca8bd4 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Tue, 3 Aug 2010 20:14:52 +0800
Subject: [PATCH] rt_optimize: MMC replace local_irq by spin lock call

Signed-off-by: Herve Patriarche <herve.patriarche@windriver.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/mmc/card/queue.c |   10 ++++++----
 drivers/mmc/host/sdhci.c |   27 ++++++++++++++-------------
 2 files changed, 20 insertions(+), 17 deletions(-)

diff --git a/drivers/mmc/card/queue.c b/drivers/mmc/card/queue.c
index 1551230..15c09eb 100644
--- a/drivers/mmc/card/queue.c
+++ b/drivers/mmc/card/queue.c
@@ -329,6 +329,7 @@ unsigned int mmc_queue_map_sg(struct mmc_queue *mq)
 void mmc_queue_bounce_pre(struct mmc_queue *mq)
 {
 	unsigned long flags;
+	struct request_queue *q = mq->queue;
 
 	if (!mq->bounce_buf)
 		return;
@@ -336,10 +337,10 @@ void mmc_queue_bounce_pre(struct mmc_queue *mq)
 	if (rq_data_dir(mq->req) != WRITE)
 		return;
 
-	local_irq_save(flags);
+	spin_lock_irqsave(q->queue_lock, flags);
 	sg_copy_to_buffer(mq->bounce_sg, mq->bounce_sg_len,
 		mq->bounce_buf, mq->sg[0].length);
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(q->queue_lock, flags);
 }
 
 /*
@@ -349,6 +350,7 @@ void mmc_queue_bounce_pre(struct mmc_queue *mq)
 void mmc_queue_bounce_post(struct mmc_queue *mq)
 {
 	unsigned long flags;
+	struct request_queue *q = mq->queue;
 
 	if (!mq->bounce_buf)
 		return;
@@ -356,9 +358,9 @@ void mmc_queue_bounce_post(struct mmc_queue *mq)
 	if (rq_data_dir(mq->req) != READ)
 		return;
 
-	local_irq_save(flags);
+	spin_lock_irqsave(q->queue_lock, flags);
 	sg_copy_from_buffer(mq->bounce_sg, mq->bounce_sg_len,
 		mq->bounce_buf, mq->sg[0].length);
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(q->queue_lock, flags);
 }
 
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 9d4fdfa..81a60ed 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -257,7 +257,7 @@ static void sdhci_read_block_pio(struct sdhci_host *host)
 	blksize = host->data->blksz;
 	chunk = 0;
 
-	local_irq_save(flags);
+	spin_lock_irqsave(&host->lock, flags);
 
 	while (blksize) {
 		if (!sg_miter_next(&host->sg_miter))
@@ -287,7 +287,7 @@ static void sdhci_read_block_pio(struct sdhci_host *host)
 
 	sg_miter_stop(&host->sg_miter);
 
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&host->lock, flags);
 }
 
 static void sdhci_write_block_pio(struct sdhci_host *host)
@@ -303,7 +303,7 @@ static void sdhci_write_block_pio(struct sdhci_host *host)
 	chunk = 0;
 	scratch = 0;
 
-	local_irq_save(flags);
+	spin_lock_irqsave(&host->lock, flags);
 
 	while (blksize) {
 		if (!sg_miter_next(&host->sg_miter))
@@ -332,8 +332,7 @@ static void sdhci_write_block_pio(struct sdhci_host *host)
 	}
 
 	sg_miter_stop(&host->sg_miter);
-
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&host->lock, flags);
 }
 
 static void sdhci_transfer_pio(struct sdhci_host *host)
@@ -376,16 +375,18 @@ static void sdhci_transfer_pio(struct sdhci_host *host)
 	DBG("PIO transfer complete.\n");
 }
 
-static char *sdhci_kmap_atomic(struct scatterlist *sg, unsigned long *flags)
+static char *sdhci_kmap_atomic(struct sdhci_host *host, struct scatterlist *sg,
+				 unsigned long *flags)
 {
-	local_irq_save(*flags);
+	spin_lock_irqsave(&host->lock, *flags);
 	return kmap_atomic(sg_page(sg), KM_BIO_SRC_IRQ) + sg->offset;
 }
 
-static void sdhci_kunmap_atomic(void *buffer, unsigned long *flags)
+static void sdhci_kunmap_atomic(struct sdhci_host *host, void *buffer,
+				unsigned long *flags)
 {
 	kunmap_atomic(buffer, KM_BIO_SRC_IRQ);
-	local_irq_restore(*flags);
+	spin_unlock_irqrestore(&host->lock, *flags);
 }
 
 static void sdhci_set_adma_desc(u8 *desc, u32 addr, int len, unsigned cmd)
@@ -463,10 +464,10 @@ static int sdhci_adma_table_pre(struct sdhci_host *host,
 		offset = (4 - (addr & 0x3)) & 0x3;
 		if (offset) {
 			if (data->flags & MMC_DATA_WRITE) {
-				buffer = sdhci_kmap_atomic(sg, &flags);
+				buffer = sdhci_kmap_atomic(host, sg, &flags);
 				WARN_ON(((long)buffer & PAGE_MASK) > (PAGE_SIZE - 3));
 				memcpy(align, buffer, offset);
-				sdhci_kunmap_atomic(buffer, &flags);
+				sdhci_kunmap_atomic(host, buffer, &flags);
 			}
 
 			/* tran, valid */
@@ -561,10 +562,10 @@ static void sdhci_adma_table_post(struct sdhci_host *host,
 			if (sg_dma_address(sg) & 0x3) {
 				size = 4 - (sg_dma_address(sg) & 0x3);
 
-				buffer = sdhci_kmap_atomic(sg, &flags);
+				buffer = sdhci_kmap_atomic(host, sg, &flags);
 				WARN_ON(((long)buffer & PAGE_MASK) > (PAGE_SIZE - 3));
 				memcpy(buffer, align, size);
-				sdhci_kunmap_atomic(buffer, &flags);
+				sdhci_kunmap_atomic(host, buffer, &flags);
 
 				align += 4;
 			}
-- 
1.6.5.2

