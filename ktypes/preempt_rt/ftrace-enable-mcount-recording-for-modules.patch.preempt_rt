From 79a4c8caf26f9e93f93713404f7d17ffc22b6f04 Mon Sep 17 00:00:00 2001
From: Steven Rostedt <rostedt@goodmis.org>
Date: Thu, 14 Aug 2008 15:45:09 -0400
Subject: [PATCH] ftrace: enable mcount recording for modules

This patch enables the loading of the __mcount_section of modules and
changing all the callers of mcount into nops.

The modification is done before the init_module function is called, so
again, we do not need to use kstop_machine to make these changes.

Signed-off-by: Steven Rostedt <srostedt@redhat.com>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Integrated-by: Liming Wang <liming.wang@windriver.com>
---
 include/linux/ftrace.h |    3 +++
 kernel/module.c        |   14 ++++++++++++++
 kernel/trace/ftrace.c  |    5 +++++
 3 files changed, 22 insertions(+), 0 deletions(-)

diff --git a/include/linux/ftrace.h b/include/linux/ftrace.h
index 12ae3ba..c3dfcdd 100644
--- a/include/linux/ftrace.h
+++ b/include/linux/ftrace.h
@@ -289,8 +289,11 @@ DEFINE_TRACE(event_program_event,
 
 #ifdef CONFIG_FTRACE_MCOUNT_RECORD
 extern void ftrace_init(void);
+extern void ftrace_init_module(unsigned long *start, unsigned long *end);
 #else
 static inline void ftrace_init(void) { }
+static inline void
+ftrace_init_module(unsigned long *start, unsigned long *end) { }
 #endif
 
 #endif /* _LINUX_FTRACE_H */
diff --git a/kernel/module.c b/kernel/module.c
index 4b9b124..e78fccf 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -49,6 +49,7 @@
 #include <asm/sections.h>
 #include <linux/tracepoint.h>
 #include <trace/kernel.h>
+#include <linux/ftrace.h>
 
 #if 0
 #define DEBUGP printk
@@ -1866,9 +1867,13 @@ static noinline struct module *load_module(void __user *umod,
 	unsigned int markersstringsindex;
 	unsigned int tracepointsindex;
 	unsigned int tracepointsstringsindex;
+
 	unsigned int verboseindex;
 	struct mod_debug *iter;
 	unsigned long value;
+
+	unsigned int mcountindex;
+
 	struct module *mod;
 	long err = 0;
 	void *percpu = NULL, *ptr = NULL; /* Stops spurious gcc warning */
@@ -2166,6 +2171,9 @@ static noinline struct module *load_module(void __user *umod,
 					"__tracepoints_strings");
 	verboseindex = find_sec(hdr, sechdrs, secstrings, "__verbose");
 
+	mcountindex = find_sec(hdr, sechdrs, secstrings,
+			       "__mcount_loc");
+
 	/* Now do relocations. */
 	for (i = 1; i < hdr->e_shnum; i++) {
 		const char *strtab = (char *)sechdrs[strindex].sh_addr;
@@ -2239,6 +2247,12 @@ static noinline struct module *load_module(void __user *umod,
 				iter->flag_names, iter->hash, iter->hash2);
 	}
 #endif
+
+	if (mcountindex) {
+		void *mseg = (void *)sechdrs[mcountindex].sh_addr;
+		ftrace_init_module(mseg, mseg + sechdrs[mcountindex].sh_size);
+	}
+
 	err = module_finalize(hdr, sechdrs, mod);
 	if (err < 0)
 		goto cleanup;
diff --git a/kernel/trace/ftrace.c b/kernel/trace/ftrace.c
index f50b0e3..98309c6 100644
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@ -1640,6 +1640,11 @@ static int ftrace_convert_nops(unsigned long *start,
 	return 0;
 }
 
+void ftrace_init_module(unsigned long *start, unsigned long *end)
+{
+	ftrace_convert_nops(start, end);
+}
+
 extern unsigned long __start_mcount_loc[];
 extern unsigned long __stop_mcount_loc[];
 
-- 
1.6.0.3

