From 0714177809f882158d5fce99dd7afd0794704e82 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Sun, 20 Mar 2011 11:32:45 -0400
Subject: [PATCH] ring buffer: fix accidental revert contained in rt20 merge

The original rt20 giant patch implicitly reverted the missing
lock fix from the v2.6.33..v2.6.34 dev cycle:

 commit 292f60c0c4ab44aa2d589ba03c12e64a3b3c5e38
 Author: Julia Lawall <julia@diku.dk>

    ring-buffer: Add missing unlock

Restore the proper lock unwind sequence, otherwise the fcn. can
exit holding a lock.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/kernel/trace/ring_buffer.c b/kernel/trace/ring_buffer.c
index ee46a81..4055691 100644
--- a/kernel/trace/ring_buffer.c
+++ b/kernel/trace/ring_buffer.c
@@ -1211,18 +1211,19 @@ rb_remove_pages(struct ring_buffer_per_cpu *cpu_buffer, unsigned nr_pages)
 
 	for (i = 0; i < nr_pages; i++) {
 		if (RB_WARN_ON(cpu_buffer, list_empty(cpu_buffer->pages)))
-			return;
+			goto out;
 		p = cpu_buffer->pages->next;
 		bpage = list_entry(p, struct buffer_page, list);
 		list_del(&bpage->list);
 		list_add(&bpage->list, &tofree);
 	}
 	if (RB_WARN_ON(cpu_buffer, list_empty(cpu_buffer->pages)))
-		return;
+		goto out;
 
 	rb_reset_cpu(cpu_buffer);
 	rb_check_pages(cpu_buffer);
 
+out:
 	raw_spin_unlock_irq(&cpu_buffer->reader_lock);
 
 	list_for_each_entry_safe(bpage, tmp, &tofree, list) {
-- 
1.7.4

