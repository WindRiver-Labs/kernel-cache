From 9f175842b39b1dc55bc4f476fa3a6193be8c3ce7 Mon Sep 17 00:00:00 2001
From: Wu Zhangjin <zhangjin.wu@windriver.com>
Date: Mon, 26 Jul 2010 01:11:18 -0700
Subject: [PATCH 1/2] lttng: Revert "notifier-atomic-call-chain-notrace"

This reverts commit notifier-atomic-call-chain-notrace.

The original idea of the commit is marking the rcu_read_lock/unlock() as
notrace, but it introduced the preemption disabling for it called
rcu_read_lock/unlock_sched_notrace(), but disabling preemption is not necessary
and will introduce latency and also potential "BUG: sleeping function called
from invalid context".

To mark the rcu_read_lock/unlock() as notrace directly is not easier, for it
has lots of callees, we can not simply mark all of them as notrace, but as we
know, notrace means stop the tracing, so, we get the key to this problem: just
call tracing_stop() and tracing_start() to do the job instead of marking them
with notrace. A new patch will include the solution.

Signed-off-by: Wu Zhangjin <zhangjin.wu@windriver.com>
---
 kernel/notifier.c |    7 ++++---
 1 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/kernel/notifier.c b/kernel/notifier.c
index b0cf66b..0230f2e 100644
--- a/kernel/notifier.c
+++ b/kernel/notifier.c
@@ -149,7 +149,7 @@ int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
 	spin_lock_irqsave(&nh->lock, flags);
 	ret = notifier_chain_unregister(&nh->head, n);
 	spin_unlock_irqrestore(&nh->lock, flags);
-	synchronize_sched();
+	synchronize_rcu();
 	return ret;
 }
 EXPORT_SYMBOL_GPL(atomic_notifier_chain_unregister);
@@ -179,9 +179,10 @@ int __kprobes __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 {
 	int ret;
 
-	rcu_read_lock_sched_notrace();
+	rcu_read_lock();
 	ret = notifier_call_chain(&nh->head, val, v, nr_to_call, nr_calls);
-	rcu_read_unlock_sched_notrace();
+	rcu_read_unlock();
+
 	return ret;
 }
 EXPORT_SYMBOL_GPL(__atomic_notifier_call_chain);
-- 
1.6.5.2

