From e7c67d6f6021d52f6d103a096e32d3f2889f9143 Mon Sep 17 00:00:00 2001
From: Tonyliu <Bo.Liu@windriver.com>
Date: Thu, 29 Jul 2010 12:14:13 +0800
Subject: [PATCH 4/4] preempt_rt: tune warn check

The warning check conditions are no longer valid in preempt_rt, tweak
it to NONRT for avoiding annoying call trace.

Signed-off-by: Tonyliu <Bo.Liu@windriver.com>
---
 kernel/sched.c |    4 ++--
 kernel/smp.c   |    4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/kernel/sched.c b/kernel/sched.c
index 5cedce4..df47978 100644
--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -2511,8 +2511,8 @@ static int try_to_wake_up(struct task_struct *p, unsigned int state,
 	 * will try and migrate the task, hence the rq should match the
 	 * cpu we just moved it to.
 	 */
-	WARN_ON(task_cpu(p) != cpu);
-	WARN_ON(!(p->state & TASK_WAKING));
+	WARN_ON_NONRT(task_cpu(p) != cpu);
+	WARN_ON_NONRT(!(p->state & TASK_WAKING));
 
 #ifdef CONFIG_SCHEDSTATS
 	schedstat_inc(rq, ttwu_count);
diff --git a/kernel/smp.c b/kernel/smp.c
index 3fc6973..068602c 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -289,7 +289,7 @@ int smp_call_function_single(int cpu, void (*func) (void *info), void *info,
 	 * send smp call function interrupt to this cpu and as such deadlocks
 	 * can't happen.
 	 */
-	WARN_ON_ONCE(cpu_online(this_cpu) && irqs_disabled()
+	WARN_ON_ONCE_NONRT(cpu_online(this_cpu) && irqs_disabled()
 		     && !oops_in_progress);
 
 	if (cpu == this_cpu) {
@@ -417,7 +417,7 @@ void smp_call_function_many(const struct cpumask *mask,
 	 * send smp call function interrupt to this cpu and as such deadlocks
 	 * can't happen.
 	 */
-	WARN_ON_ONCE(cpu_online(this_cpu) && irqs_disabled()
+	WARN_ON_ONCE_NONRT(cpu_online(this_cpu) && irqs_disabled()
 		     && !oops_in_progress);
 
 	/* So, what's a CPU they want? Ignoring this one. */
-- 
1.6.5.2

