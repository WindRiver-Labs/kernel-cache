From a7b707c223aab442baf6b28b265cf6e0b10519dc Mon Sep 17 00:00:00 2001
From: Thomas Gleixner <tglx@linutronix.de>
Date: Thu, 25 Oct 2012 10:32:35 +0100
Subject: [PATCH] mm: Enable SLUB for RT

commit 513c2ca39bbefecfacf20c29275284f033ccb053 upstream
https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git/log/?h=linux-4.11.y-rt

Fix the following traces:
BUG: sleeping function called from invalid context at tmp/work-shared/intel-x86-64/kernel-source/kernel/locking/rtmutex.c:995
in_atomic(): 0, irqs_disabled(): 1, pid: 1, name: swapper/0
CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.8.28-rt10-WR9.0.0.17_ovp #1
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
 0000000000000000 ffff88013a15f3f8 ffffffff814426ed 0000000000000000
 ffff88013a188000 ffff88013a15f418 ffffffff81088ef9 ffff88013fc959a0
 0000000000000001 ffff88013a15f430 ffffffff81b3a9f0 ffff88013fc959a0
Call Trace:
 [<ffffffff814426ed>] dump_stack+0x4f/0x72
 [<ffffffff81088ef9>] ___might_sleep+0xf9/0x150
 [<ffffffff81b3a9f0>] rt_spin_lock+0x20/0x50
 [<ffffffff81152342>] get_page_from_freelist+0x692/0xcf0
 [<ffffffff8119e7fa>] ? alloc_page_interleave+0x8a/0x90
 [<ffffffff81152e4d>] __alloc_pages_nodemask+0x10d/0xe10
 [<ffffffff8145ee27>] ? debug_smp_processor_id+0x17/0x20
 [<ffffffff8145ee27>] ? debug_smp_processor_id+0x17/0x20
 [<ffffffff810629a6>] ? unpin_current_cpu+0x16/0x70
 [<ffffffff81088c92>] ? migrate_enable+0x82/0x150
 [<ffffffff8119e7b3>] alloc_page_interleave+0x43/0x90
 [<ffffffff8119ed23>] alloc_pages_current+0x113/0x150
 [<ffffffff811a7111>] new_slab+0x341/0x5d0
 [<ffffffff811a94e4>] ___slab_alloc+0x424/0x700
...

This issue is specific to the OVP9 kernel.

This is a patch from LIN9-6907, which should have been integrated in the
OVP9 branch as well.

[Make SLUB RT aware by converting locks to raw and using free lists to
move the freeing out of the lock held region.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Rui Wang <rui.wang@windriver.com>]

[OP: adjusted context for kernel version 4.8]
Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
---
 mm/slub.c |   15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/mm/slub.c b/mm/slub.c
index 5e5b701..af47eb4 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -1537,17 +1537,14 @@ static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
 	void *start, *p;
 	int idx, order;
 	bool shuffle;
-	bool enableirqs = false;
 
 	flags &= gfp_allowed_mask;
 
-	if (gfpflags_allow_blocking(flags))
-		enableirqs = true;
 #ifdef CONFIG_PREEMPT_RT_FULL
-	if (system_state == SYSTEM_RUNNING)
-		enableirqs = true;
+	if (system_state > SYSTEM_BOOTING)
+#else
+	if (gfpflags_allow_blocking(flags))
 #endif
-	if (enableirqs)
 		local_irq_enable();
 
 	flags |= s->allocflags;
@@ -1622,7 +1619,11 @@ static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)
 	page->frozen = 1;
 
 out:
-	if (enableirqs)
+#ifdef CONFIG_PREEMPT_RT_FULL
+	if (system_state > SYSTEM_BOOTING)
+#else
+	if (gfpflags_allow_blocking(flags))
+#endif
 		local_irq_disable();
 	if (!page)
 		return NULL;
-- 
1.7.9.5

