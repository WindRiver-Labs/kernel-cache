From 04ebb38576cbf841b2508a5a966d302ce8d52411 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Mon, 9 Jun 2014 13:45:52 -0400
Subject: [PATCH] vhost: integrate v1.6.0 eventfd_link support from dpdk

Taken from v1.6.0 at git://dpdk.org/dpdk ; put it into the
tree for increased convenience and ease of use.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

diff --git a/drivers/vhost/Kconfig b/drivers/vhost/Kconfig
index e4e2fd1b5107..897248f55c9e 100644
--- a/drivers/vhost/Kconfig
+++ b/drivers/vhost/Kconfig
@@ -9,3 +9,10 @@ config VHOST_NET
 	  To compile this driver as a module, choose M here: the module will
 	  be called vhost_net.
 
+config VHOST_EVENTFD_LINK
+	tristate "DPDK v1.6 eventfd link support"
+	depends on NET && EVENTFD && EXPERIMENTAL
+	---help---
+	  This kernel module is a direct import of the DPDK 1.6 event link
+	  support at git://dpdk.org/dpdk on the 1.6.0 branch.  If enabled
+	  as a module it will create eventfd_link.ko
diff --git a/drivers/vhost/Makefile b/drivers/vhost/Makefile
index 72dd02050bb9..8928a177cf4f 100644
--- a/drivers/vhost/Makefile
+++ b/drivers/vhost/Makefile
@@ -1,2 +1,3 @@
 obj-$(CONFIG_VHOST_NET) += vhost_net.o
 vhost_net-y := vhost.o net.o
+obj-$(CONFIG_VHOST_EVENTFD_LINK) += eventfd_link.o
diff --git a/drivers/vhost/eventfd_link.c b/drivers/vhost/eventfd_link.c
new file mode 100644
index 000000000000..f7975fad9119
--- /dev/null
+++ b/drivers/vhost/eventfd_link.c
@@ -0,0 +1,205 @@
+/*-
+ *  * GPL LICENSE SUMMARY
+ *  * 
+ *  *   Copyright(c) 2010-2014 Intel Corporation. All rights reserved.
+ *  * 
+ *  *   This program is free software; you can redistribute it and/or modify
+ *  *   it under the terms of version 2 of the GNU General Public License as
+ *  *   published by the Free Software Foundation.
+ *  * 
+ *  *   This program is distributed in the hope that it will be useful, but
+ *  *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  *   General Public License for more details.
+ *  * 
+ *  *   You should have received a copy of the GNU General Public License
+ *  *   along with this program; if not, write to the Free Software
+ *  *   Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  *   The full GNU General Public License is included in this distribution
+ *  *   in the file called LICENSE.GPL.
+ *  * 
+ *  *   Contact Information:
+ *  *   Intel Corporation
+ *   */
+
+#include <linux/eventfd.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/rcupdate.h>
+#include <linux/file.h>
+#include <linux/slab.h>
+#include <linux/fs.h>
+#include <linux/mmu_context.h>
+#include <linux/sched.h>
+#include <asm/mmu_context.h>
+#include <linux/fdtable.h>
+
+#include "eventfd_link.h"
+
+
+/*
+ * get_files_struct is copied from fs/file.c
+ */
+struct files_struct *
+get_files_struct (struct task_struct *task)
+{
+	struct files_struct *files;
+
+	task_lock (task);
+	files = task->files;
+	if (files)
+		atomic_inc (&files->count);
+	task_unlock (task);
+
+	return files;
+}
+
+/*
+ * put_files_struct is extracted from fs/file.c
+ */
+void
+put_files_struct (struct files_struct *files)
+{
+	if (atomic_dec_and_test (&files->count))
+	{
+		BUG ();
+	}
+}
+
+
+static long
+eventfd_link_ioctl (struct file *f, unsigned int ioctl, unsigned long arg)
+{
+	void __user *argp = (void __user *) arg;
+	struct task_struct *task_target = NULL;
+	struct file *file;
+	struct files_struct *files;
+	struct fdtable *fdt;
+	struct eventfd_copy eventfd_copy;
+
+	switch (ioctl)
+	{
+		case EVENTFD_COPY:
+			if (copy_from_user (&eventfd_copy, argp, sizeof (struct eventfd_copy)))
+				return -EFAULT;
+
+			/*
+			 * Find the task struct for the target pid
+			 */
+			task_target =
+				pid_task (find_vpid (eventfd_copy.target_pid), PIDTYPE_PID);
+			if (task_target == NULL)
+			{
+				printk (KERN_DEBUG "Failed to get mem ctx for target pid\n");
+				return -EFAULT;
+			}
+
+			files = get_files_struct (current);
+			if (files == NULL)
+			{
+				printk (KERN_DEBUG "Failed to get files struct\n");
+				return -EFAULT;
+			}
+
+			rcu_read_lock ();
+			file = fcheck_files (files, eventfd_copy.source_fd);
+			if (file)
+			{
+				if (file->f_mode & FMODE_PATH
+						|| !atomic_long_inc_not_zero (&file->f_count))
+					file = NULL;
+			}
+			rcu_read_unlock ();
+			put_files_struct (files);
+
+			if (file == NULL)
+			{
+				printk (KERN_DEBUG "Failed to get file from source pid\n");
+				return 0;
+			}
+
+			/*
+			 * Release the existing eventfd in the source process
+			 */
+			spin_lock (&files->file_lock);
+			filp_close (file, files);
+			fdt = files_fdtable (files);
+			fdt->fd[eventfd_copy.source_fd] = NULL;
+			spin_unlock (&files->file_lock);
+
+			/*
+			 * Find the file struct associated with the target fd.
+			 */
+
+			files = get_files_struct (task_target);
+			if (files == NULL)
+			{
+				printk (KERN_DEBUG "Failed to get files struct\n");
+				return -EFAULT;
+			}
+
+			rcu_read_lock ();
+			file = fcheck_files (files, eventfd_copy.target_fd);
+			if (file)
+			{
+				if (file->f_mode & FMODE_PATH
+						|| !atomic_long_inc_not_zero (&file->f_count))
+					file = NULL;
+			}
+			rcu_read_unlock ();
+			put_files_struct (files);
+
+			if (file == NULL)
+			{
+				printk (KERN_DEBUG "Failed to get file from target pid\n");
+				return 0;
+			}
+
+
+			/*
+			 * Install the file struct from the target process into the
+			 * file desciptor of the source process,
+			 */
+
+			fd_install (eventfd_copy.source_fd, file);
+
+			return 0;
+
+		default:
+			return -ENOIOCTLCMD;
+	}
+}
+
+static const struct file_operations eventfd_link_fops = {
+	.owner = THIS_MODULE,
+	.unlocked_ioctl = eventfd_link_ioctl,
+};
+
+
+static struct miscdevice eventfd_link_misc = {
+	.name = "eventfd-link",
+	.fops = &eventfd_link_fops,
+};
+
+static int __init
+eventfd_link_init (void)
+{
+	return misc_register (&eventfd_link_misc);
+}
+
+module_init (eventfd_link_init);
+
+static void __exit
+eventfd_link_exit (void)
+{
+	misc_deregister (&eventfd_link_misc);
+}
+
+module_exit (eventfd_link_exit);
+
+MODULE_VERSION ("0.0.1");
+MODULE_LICENSE ("GPL v2");
+MODULE_AUTHOR ("Anthony Fee");
+MODULE_DESCRIPTION ("Link eventfd");
+MODULE_ALIAS ("devname:eventfd-link");
diff --git a/drivers/vhost/eventfd_link.h b/drivers/vhost/eventfd_link.h
new file mode 100644
index 000000000000..f33c2f8ee6e7
--- /dev/null
+++ b/drivers/vhost/eventfd_link.h
@@ -0,0 +1,79 @@
+/*-
+ *  * This file is provided under a dual BSD/GPLv2 license.  When using or
+ *  *   redistributing this file, you may do so under either license.
+ *  * 
+ *  *   GPL LICENSE SUMMARY
+ *  * 
+ *  *   Copyright(c) 2010-2014 Intel Corporation. All rights reserved.
+ *  * 
+ *  *   This program is free software; you can redistribute it and/or modify
+ *  *   it under the terms of version 2 of the GNU General Public License as
+ *  *   published by the Free Software Foundation.
+ *  * 
+ *  *   This program is distributed in the hope that it will be useful, but
+ *  *   WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  *   General Public License for more details.
+ *  * 
+ *  *   You should have received a copy of the GNU General Public License
+ *  *   along with this program; if not, write to the Free Software
+ *  *   Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  *   The full GNU General Public License is included in this distribution
+ *  *   in the file called LICENSE.GPL.
+ *  * 
+ *  *   Contact Information:
+ *  *   Intel Corporation
+ *  * 
+ *  *   BSD LICENSE
+ *  * 
+ *  *   Copyright(c) 2010-2014 Intel Corporation. All rights reserved.
+ *  *   All rights reserved.
+ *  * 
+ *  *   Redistribution and use in source and binary forms, with or without
+ *  *   modification, are permitted provided that the following conditions
+ *  *   are met:
+ *  * 
+ *  *     * Redistributions of source code must retain the above copyright
+ *  *       notice, this list of conditions and the following disclaimer.
+ *  *     * Redistributions in binary form must reproduce the above copyright
+ *  *       notice, this list of conditions and the following disclaimer in
+ *  *       the documentation and/or other materials provided with the
+ *  *       distribution.
+ *  *     * Neither the name of Intel Corporation nor the names of its
+ *  *       contributors may be used to endorse or promote products derived
+ *  *       from this software without specific prior written permission.
+ *  * 
+ *  *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ *  *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ *  *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ *  *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ *  *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ *  *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ *  *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ *  *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ *  *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *  * 
+ *   */
+
+#ifndef _EVENTFD_LINK_H_
+#define _EVENTFD_LINK_H_
+
+/*
+ *	ioctl to copy an fd entry in calling process to an fd in a target process
+ */
+#define EVENTFD_COPY 1
+
+/*
+ *	arguements for the EVENTFD_COPY ioctl
+ */
+struct eventfd_copy {
+	// fd in the target pid
+    unsigned target_fd;
+	// fd in the calling pid
+    unsigned source_fd;
+	// pid of the target pid
+    pid_t target_pid;
+};
+#endif /* _EVENTFD_LINK_H_ */
-- 
1.9.3

