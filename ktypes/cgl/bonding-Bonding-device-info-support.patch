From 459031b682ce03f500876a6484bb05f4d2ecd6f2 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Fri, 19 Mar 2010 00:29:00 -0700
Subject: [PATCH 4/8] bonding: Bonding device info support

This provides the physical device the packet came in from
for a bonded ethernet device. (as ancillary data)

Signed-off-by: Liming Wang <liming.wang@windriver.com>
Integrated-by: Yong Zhang <yong.zhang@windriver.com>
Signed-off-by: Joe MacDonald <joe.macdonald@windriver.com>
Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 drivers/net/Kconfig    |    9 +++++++++
 include/linux/skbuff.h |    4 ++++
 net/8021q/vlan_core.c  |    3 +++
 net/core/dev.c         |    4 ++++
 net/packet/af_packet.c |   11 +++++++++++
 5 files changed, 31 insertions(+), 0 deletions(-)

diff --git a/drivers/net/Kconfig b/drivers/net/Kconfig
index 3835321..2a84ef8 100644
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -52,6 +52,15 @@ config BONDING
 	  To compile this driver as a module, choose M here: the module
 	  will be called bonding.
 
+config BONDING_DEVINFO
+	default n
+	bool "Bonding driver device info support"
+	depends on BONDING
+	---help---
+	  This provides the physical device the packet came in from
+	  for a bonded ethernet device. (as ancillary data)
+
+
 config DUMMY
 	tristate "Dummy net driver support"
 	---help---
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index eaf6027..ac43587 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -413,6 +413,10 @@ struct sk_buff {
 	struct sock		*sk;
 	struct net_device	*dev;
 
+#ifdef CONFIG_BONDING_DEVINFO
+	struct net_device	*real_dev;
+#endif
+
 	/*
 	 * This is the control buffer. It is free to use for every
 	 * layer. Please put your private variables there. If you
diff --git a/net/8021q/vlan_core.c b/net/8021q/vlan_core.c
index 4a78c4d..4512cad 100644
--- a/net/8021q/vlan_core.c
+++ b/net/8021q/vlan_core.c
@@ -21,6 +21,9 @@ bool vlan_do_receive(struct sk_buff **skbp)
 	if (unlikely(!skb))
 		return false;
 
+#ifdef CONFIG_BONDING_DEVINFO
+	skb->real_dev = skb->dev;
+#endif
 	skb->dev = vlan_dev;
 	if (skb->pkt_type == PACKET_OTHERHOST) {
 		/* Our lower layer thinks this is not local, let's make sure.
diff --git a/net/core/dev.c b/net/core/dev.c
index 7ddbb31..c5c7e30 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3525,6 +3525,10 @@ ncls:
 
 	/* deliver only exact match when indicated */
 	null_or_dev = deliver_exact ? skb->dev : NULL;
+#ifdef CONFIG_BONDING_DEVINFO
+	if (!null_or_dev)
+		skb->real_dev = skb->dev;
+#endif
 
 	type = skb->protocol;
 	list_for_each_entry_rcu(ptype,
diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index a6895ab..d29dd80 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2696,6 +2696,9 @@ static int packet_recvmsg(struct kiocb *iocb, struct socket *sock,
 	int copied, err;
 	struct sockaddr_ll *sll;
 	int vnet_hdr_len = 0;
+#ifdef CONFIG_BONDING_DEVINFO
+	int index = 0;
+#endif
 
 	err = -EINVAL;
 	if (flags & ~(MSG_PEEK|MSG_DONTWAIT|MSG_TRUNC|MSG_CMSG_COMPAT|MSG_ERRQUEUE))
@@ -2805,6 +2808,14 @@ static int packet_recvmsg(struct kiocb *iocb, struct socket *sock,
 
 	sock_recv_ts_and_drops(msg, sk, skb);
 
+#ifdef CONFIG_BONDING_DEVINFO
+	if (msg->msg_controllen == 16 && msg->msg_control != NULL &&
+	    ((struct cmsghdr *)msg->msg_control)->cmsg_type == IP_PKTINFO) {
+		if (skb->real_dev)
+			index = skb->real_dev->ifindex;
+		put_cmsg(msg, SOL_SOCKET, IP_PKTINFO, sizeof(int), &index);
+	}
+#endif
 	if (msg->msg_name)
 		memcpy(msg->msg_name, &PACKET_SKB_CB(skb)->sa,
 		       msg->msg_namelen);
-- 
1.7.5.4

