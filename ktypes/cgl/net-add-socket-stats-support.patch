From 882987455db798e0fb02a2cba5f16ad49f06c7c6 Mon Sep 17 00:00:00 2001
From: He Zhe <zhe.he@windriver.com>
Date: Tue, 23 Dec 2014 16:54:49 +0800
Subject: [PATCH 05/10] net: add socket stats support

Datagram sockets will be able to retrieve and or reset counters
for both the number of packets received in total as well as the
number of packets dropped due to buffer overflow through ioctl
command SIOCGSOCKSTATS and SIOCZEROSOCKSTATS.

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 include/net/sock.h           | 52 ++++++++++++++++++++++++++++++++++++++++++++
 include/uapi/linux/sockios.h |  4 ++++
 net/Kconfig                  | 11 ++++++++++
 net/core/sock.c              |  4 ++++
 net/socket.c                 | 25 +++++++++++++++++++++
 5 files changed, 96 insertions(+)

diff --git a/include/net/sock.h b/include/net/sock.h
index c26eab9..178f3e5 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -90,6 +90,55 @@ void SOCK_DEBUG(const struct sock *sk, const char *msg, ...)
 }
 #endif
 
+/* per-socket statistics.  received is the total number of skbuffs received
+ * on that socket.  dropped_no_mem is the number of packets dropped due
+ * to a lack of space on the socket receive buffer.
+ *
+ * Note:  The lock only protects the reader from another cpu trying to zero
+ * the data.  There is still a race between the counts being updated and the
+ * counts being zeroed.  We don't worry about that.
+ */
+typedef struct {
+	__u64	received;
+	__u32	dropped_no_mem;
+} socket_stats;
+
+typedef struct {
+	socket_stats data;
+	spinlock_t lock;
+} socket_stats_struct;
+
+#ifdef CONFIG_DGRAM_SOCKSTATS
+#define inc_dgram_stats_received(sk)					\
+	do {sk->stats.data.received++; } while (0)
+#define inc_dgram_stats_dropped(sk)					\
+	do {sk->stats.data.dropped_no_mem++; } while (0)
+#define init_dgram_stats(sk)						\
+do {									\
+	(sk)->stats.data.dropped_no_mem = 0;				\
+	(sk)->stats.data.received = 0;					\
+	spin_lock_init(&(sk)->stats.lock);				\
+} while (0)
+#define zero_dgram_stats(sk)						\
+do {									\
+	spin_lock(&(sk)->stats.lock);					\
+	(sk)->stats.data.dropped_no_mem = 0;				\
+	(sk)->stats.data.received = 0;					\
+	spin_unlock(&(sk)->stats.lock);					\
+} while (0)
+#define copy_dgram_stats(tostats, sk)					\
+do {									\
+	spin_lock(&(sk)->stats.lock);					\
+	(tostats)->dropped_no_mem = (sk)->stats.data.dropped_no_mem;	\
+	(tostats)->received = (sk)->stats.data.received;		\
+	spin_unlock(&(sk)->stats.lock);					\
+} while	(0)
+#else
+#define inc_dgram_stats_received(sk)
+#define inc_dgram_stats_dropped(sk)
+#define init_dgram_stats(sk)
+#endif
+
 /* This is the per-socket lock.  The spinlock provides a synchronization
  * between user contexts and software interrupt processing, whereas the
  * mini-semaphore synchronizes multiple users amongst themselves.
@@ -446,6 +495,9 @@ struct sock {
 	void                    (*sk_destruct)(struct sock *sk);
 	struct sock_reuseport __rcu	*sk_reuseport_cb;
 	struct rcu_head		sk_rcu;
+#ifdef CONFIG_DGRAM_SOCKSTATS
+	socket_stats_struct			stats;
+#endif
 };
 
 #define __sk_user_data(sk) ((*((void __rcu **)&(sk)->sk_user_data)))
diff --git a/include/uapi/linux/sockios.h b/include/uapi/linux/sockios.h
index 8e7890b..aa7925d 100644
--- a/include/uapi/linux/sockios.h
+++ b/include/uapi/linux/sockios.h
@@ -128,6 +128,10 @@
 #define SIOCSHWTSTAMP	0x89b0		/* set and get config		*/
 #define SIOCGHWTSTAMP	0x89b1		/* get config			*/
 
+/* per-socket statistics manipulation */
+#define SIOCGSOCKSTATS     0x89c0  /* get the per-socket statistics */
+#define SIOCZEROSOCKSTATS  0x89c1  /* zero the per-socket statistics */
+
 /* Device private ioctl calls */
 
 /*
diff --git a/net/Kconfig b/net/Kconfig
index c2cdbce..b8662b0 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -58,6 +58,17 @@ source "net/unix/Kconfig"
 source "net/xfrm/Kconfig"
 source "net/iucv/Kconfig"
 
+config DGRAM_SOCKSTATS
+   bool "Datagram socket statistics"
+   default n
+   help
+     If you say Y here, datagram sockets will be able to retrieve and
+     or reset counters for both the number of packets received in total
+     as well as the number of packets dropped due to buffer overflow.
+     See code for data structures.
+
+     If unsure, say N.
+
 config INET
 	bool "TCP/IP networking"
 	select CRYPTO
diff --git a/net/core/sock.c b/net/core/sock.c
index 10acacc..44c0835 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -410,9 +410,11 @@ int __sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
 	unsigned long flags;
 	struct sk_buff_head *list = &sk->sk_receive_queue;
 
+	inc_dgram_stats_received(sk);
 	if (atomic_read(&sk->sk_rmem_alloc) >= sk->sk_rcvbuf) {
 		atomic_inc(&sk->sk_drops);
 		trace_sock_rcvqueue_full(sk, skb);
+		inc_dgram_stats_dropped(sk);
 		return -ENOMEM;
 	}
 
@@ -2075,6 +2077,8 @@ static void __release_sock(struct sock *sk)
 		spin_lock_bh(&sk->sk_lock.slock);
 	}
 
+	init_dgram_stats(sk);
+
 	/*
 	 * Doing the zeroing here guarantee we can not loop forever
 	 * while a wild producer attempts to flood us.
diff --git a/net/socket.c b/net/socket.c
index 03bc2c2..3a39c08 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -948,6 +948,27 @@ static long sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 				err = dlci_ioctl_hook(cmd, argp);
 			mutex_unlock(&dlci_ioctl_mutex);
 			break;
+
+#ifdef CONFIG_DGRAM_SOCKSTATS
+		case SIOCGSOCKSTATS:
+			{
+				socket_stats stats;
+				err = -EINVAL;
+				if (!sock->sk)
+					break;
+				copy_dgram_stats(&stats, sock->sk);
+				err = copy_to_user(argp, &stats,
+						sizeof(stats));
+				break;
+			}
+		case SIOCZEROSOCKSTATS:
+			err = -EINVAL;
+			if (!sock->sk)
+				break;
+			zero_dgram_stats(sock->sk);
+			err = 0;
+			break;
+#endif
 		default:
 			err = sock_do_ioctl(net, sock, cmd, arg);
 			break;
@@ -3098,6 +3119,10 @@ static int compat_sock_ioctl_trans(struct file *file, struct socket *sock,
 	case SIOCSIFVLAN:
 	case SIOCADDDLCI:
 	case SIOCDELDLCI:
+#ifdef CONFIG_DGRAM_SOCKSTATS
+	case SIOCGSOCKSTATS:
+	case SIOCZEROSOCKSTATS:
+#endif
 		return sock_ioctl(file, cmd, arg);
 
 	case SIOCGIFFLAGS:
-- 
2.0.2

