From da81cf18a108ae32ac6b297d64e3c1d93ddcbd33 Mon Sep 17 00:00:00 2001
From: Hong H. Pham <hong.pham@windriver.com>
Date: Thu, 6 Nov 2008 22:38:29 -0500
Subject: [PATCH] ecgl sparc gethrtime

SPARCv9 and SPARC64 implementation of gethrtime(), which is used by some
ECGL features.

Signed-off-by: Hong H. Pham <hong.pham@windriver.com>
---
 arch/sparc/include/asm/timex_32.h |   23 +++++++++++++++++++++++
 arch/sparc/include/asm/timex_64.h |   15 +++++++++++++++
 2 files changed, 38 insertions(+), 0 deletions(-)

diff --git a/arch/sparc/include/asm/timex_32.h b/arch/sparc/include/asm/timex_32.h
index b6ccdb0..7605ea3 100644
--- a/arch/sparc/include/asm/timex_32.h
+++ b/arch/sparc/include/asm/timex_32.h
@@ -7,9 +7,32 @@
 #define _ASMsparc_TIMEX_H
 
 #define CLOCK_TICK_RATE	1193180 /* Underlying HZ */
 
 /* XXX Maybe do something better at some point... -DaveM */
 typedef unsigned long cycles_t;
 #define get_cycles()	(0)
 
+
+/*
+ * Various ECGL features use gethrtime() as a generic way to get a 64-bit
+ * timestamp.  The tick register is only available for SPARCv8 or better.
+ */
+static inline unsigned long long gethrtime(void)
+{
+	union {
+		unsigned long long value;
+		struct {
+			unsigned long high;
+			unsigned long low;
+		} __attribute__((packed));
+	} ret;
+
+	__asm__ __volatile__("rd        %%tick, %%o2\n\t"
+	                     "srlx      %%o2, 32, %0\n\t"
+	                     "sra       %%o2,  0, %1\n\t"
+	                     : "=r" (ret.high), "=r" (ret.low) : : "%o2");
+
+	return ret.value & ~(1ULL << 63);
+}
+
 #endif
diff --git a/arch/sparc/include/asm/timex_64.h b/arch/sparc/include/asm/timex_64.h
index 032c8ca..749e35b 100644
--- a/arch/sparc/include/asm/timex_64.h
+++ b/arch/sparc/include/asm/timex_64.h
@@ -28,9 +28,24 @@ extern unsigned long tb_ticks_per_usec;
 
 static inline cycles_t get_cycles_rate(void)
 {
 	return tb_ticks_per_usec * 1000000UL;
 }
 
 #define ARCH_HAS_READ_CURRENT_TIMER
 
+/*
+ * Various ECGL features use gethrtime() as a generic way to get a 64-bit
+ * timestamp.
+ */
+static inline unsigned long gethrtime(void)
+{
+	unsigned long ret;
+
+	__asm__ __volatile__("rd        %%tick, %0\n\t"
+	                     "mov       %0, %0"
+	                     : "=r" (ret));
+
+	return ret & ~(1UL << 63);
+}
+
 #endif
-- 
1.5.5.1

