From 1bf44b23629c598be00cdf09dfdcb9e895a30c66 Mon Sep 17 00:00:00 2001
From: He Zhe <zhe.he@windriver.com>
Date: Tue, 23 Dec 2014 17:06:49 +0800
Subject: [PATCH 06/10] net: tracking high water mark for per-device transmit
 queue

Enabling this option will enable tracking the high water mark for
the per-device transmit queues.  The high water mark of the queue
will be exported via /proc/net/dev if procfs is enabled.

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 include/net/sch_generic.h |   28 ++++++++++++++++++++++++++++
 net/Kconfig               |   10 ++++++++++
 net/core/net-procfs.c     |   13 +++++++++----
 net/sched/sch_generic.c   |    4 ++--
 4 files changed, 49 insertions(+), 6 deletions(-)

diff --git a/include/net/sch_generic.h b/include/net/sch_generic.h
index 080b657..0b36e2c 100644
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@ -16,6 +16,33 @@ struct qdisc_walker;
 struct tcf_walker;
 struct module;
 
+
+#ifdef CONFIG_QDISC_STATS
+#define HIGHQLEN_DECL u32 highqlen;
+#define check_highqlen(qdisc)              \
+do {                           \
+   unsigned int qlen = qdisc->q.qlen;      \
+   if (qlen > qdisc->highqlen)         \
+       qdisc->highqlen = qlen;         \
+} while (0)
+
+#define dev_seq_printf_qdisc_stuff(seq, dev)       \
+do {                           \
+   if (netdev_get_tx_queue(dev, 0)->qdisc)     \
+       seq_printf(seq, "%10u",         \
+       netdev_get_tx_queue(dev, 0)->qdisc->highqlen); \
+} while (0)
+#define dev_seq_show_qdisc_stuff(seq)          \
+   do {seq_puts(seq, " qdhighmark"); } while (0)
+#else
+#define HIGHQLEN_DECL
+#define check_highqlen(qdisc)
+#define dev_seq_printf_qdisc_stuff(seq, dev)
+#define dev_seq_show_qdisc_stuff(seq)
+#endif
+#define qdisc_incr_qlen(qdisc)             \
+do {qdisc->q.qlen++; check_highqlen(qdisc); } while (0)
+
 struct qdisc_rate_table {
 	struct tc_ratespec rate;
 	u32		data[256];
@@ -79,6 +106,7 @@ struct Qdisc {
 	 * and it will live until better solution will be invented.
 	 */
 	struct Qdisc		*__parent;
+	HIGHQLEN_DECL
 	struct netdev_queue	*dev_queue;
 
 	struct gnet_stats_rate_est64	rate_est;
diff --git a/net/Kconfig b/net/Kconfig
index 8bd6e7a..39e5d7c 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -52,6 +52,16 @@ source "net/unix/Kconfig"
 source "net/xfrm/Kconfig"
 source "net/iucv/Kconfig"
 
+config QDISC_STATS
+	default n
+	bool "Qdisc statistics reporting"
+	help
+	  Enabling this option will enable tracking the high water mark for
+	  the per-device transmit queues.  The high water mark of the queue
+	  will be exported via /proc/net/dev if procfs is enabled.
+
+	  Say Y if you want this additional tracking.
+
 config DGRAM_SOCKSTATS
    bool "Datagram socket statistics"
    default n
diff --git a/net/core/net-procfs.c b/net/core/net-procfs.c
index 2bf8329..769b47d 100644
--- a/net/core/net-procfs.c
+++ b/net/core/net-procfs.c
@@ -2,6 +2,7 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include <net/wext.h>
+#include <net/sch_generic.h>
 
 #define BUCKET_SPACE (32 - NETDEV_HASHBITS - 1)
 
@@ -80,7 +81,7 @@ static void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)
 	const struct rtnl_link_stats64 *stats = dev_get_stats(dev, &temp);
 
 	seq_printf(seq, "%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu "
-		   "%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu\n",
+		   "%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu",
 		   dev->name, stats->rx_bytes, stats->rx_packets,
 		   stats->rx_errors,
 		   stats->rx_dropped + stats->rx_missed_errors,
@@ -96,6 +97,8 @@ static void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)
 		    stats->tx_window_errors +
 		    stats->tx_heartbeat_errors,
 		   stats->tx_compressed);
+		dev_seq_printf_qdisc_stuff(seq, dev);
+		seq_printf(seq, "\n");
 }
 
 /*
@@ -104,13 +107,15 @@ static void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)
  */
 static int dev_seq_show(struct seq_file *seq, void *v)
 {
-	if (v == SEQ_START_TOKEN)
+	if (v == SEQ_START_TOKEN) {
 		seq_puts(seq, "Inter-|   Receive                            "
 			      "                    |  Transmit\n"
 			      " face |bytes    packets errs drop fifo frame "
 			      "compressed multicast|bytes    packets errs "
-			      "drop fifo colls carrier compressed\n");
-	else
+			      "drop fifo colls carrier compressed");
+		dev_seq_show_qdisc_stuff(seq);
+		seq_puts(seq, "\n");
+	} else
 		dev_seq_printf_stats(seq, v);
 	return 0;
 }
diff --git a/net/sched/sch_generic.c b/net/sched/sch_generic.c
index b453270..b6fdb8f 100644
--- a/net/sched/sch_generic.c
+++ b/net/sched/sch_generic.c
@@ -49,7 +49,7 @@ static inline int dev_requeue_skb(struct sk_buff *skb, struct Qdisc *q)
 {
 	q->gso_skb = skb;
 	q->qstats.requeues++;
-	q->q.qlen++;	/* it's still part of the queue */
+	qdisc_incr_qlen(q);	/* it's still part of the queue */
 	__netif_schedule(q);
 
 	return 0;
@@ -485,7 +485,7 @@ static int pfifo_fast_enqueue(struct sk_buff *skb, struct Qdisc *qdisc)
 		struct sk_buff_head *list = band2list(priv, band);
 
 		priv->bitmap |= (1 << band);
-		qdisc->q.qlen++;
+		qdisc_incr_qlen(qdisc);
 		return __qdisc_enqueue_tail(skb, qdisc, list);
 	}
 
-- 
1.7.5.4

