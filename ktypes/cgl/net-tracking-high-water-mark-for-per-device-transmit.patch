From 45900b80b51b57c1c45ebcc07f9fcc5daa324c58 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Sun, 18 Apr 2010 21:34:44 -0700
Subject: [PATCH 2/2] net: tracking high water mark for per-device transmit queue

Enabling this option will enable tracking the high water mark for
the per-device transmit queues.  The high water mark of the queue
will be exported via /proc/net/dev if procfs is enabled.

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: MacDonald, Joe <Joe.MacDonald@windriver.com>
Integrated-by: Yong Zhang <yong.zhang@windriver.com>
---
 include/net/sch_generic.h |   27 +++++++++++++++++++++++++++
 net/Kconfig               |    9 +++++++++
 net/core/dev.c            |   12 ++++++++----
 net/sched/sch_generic.c   |    4 ++--
 4 files changed, 46 insertions(+), 6 deletions(-)

diff --git a/include/net/sch_generic.h b/include/net/sch_generic.h
index 67dc08e..af43855 100644
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@ -15,6 +15,32 @@ struct qdisc_walker;
 struct tcf_walker;
 struct module;
 
+#ifdef CONFIG_QDISC_STATS
+#define HIGHQLEN_DECL u32 highqlen;
+#define check_highqlen(qdisc)				\
+do {							\
+	unsigned int qlen = qdisc->q.qlen;		\
+	if (qlen > qdisc->highqlen)			\
+		qdisc->highqlen = qlen;			\
+} while (0)
+
+#define dev_seq_printf_qdisc_stuff(seq, dev)		\
+do {							\
+	if (netdev_get_tx_queue(dev, 0)->qdisc)		\
+		seq_printf(seq, "%10u",			\
+		netdev_get_tx_queue(dev, 0)->qdisc->highqlen); \
+} while (0)
+#define dev_seq_show_qdisc_stuff(seq)			\
+	do {seq_puts(seq, " qdhighmark"); } while (0)
+#else
+#define HIGHQLEN_DECL
+#define check_highqlen(qdisc)
+#define dev_seq_printf_qdisc_stuff(seq, dev)
+#define dev_seq_show_qdisc_stuff(seq)
+#endif
+#define qdisc_incr_qlen(qdisc)				\
+do {qdisc->q.qlen++; check_highqlen(qdisc); } while (0)
+
 struct qdisc_rate_table {
 	struct tc_ratespec rate;
 	u32		data[256];
@@ -62,6 +88,7 @@ struct Qdisc {
 	 * and it will live until better solution will be invented.
 	 */
 	struct Qdisc		*__parent;
+	HIGHQLEN_DECL
 	struct netdev_queue	*dev_queue;
 	struct Qdisc		*next_sched;
 
diff --git a/net/Kconfig b/net/Kconfig
index 041c35e..7348d03 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -50,6 +50,15 @@ source "net/unix/Kconfig"
 source "net/xfrm/Kconfig"
 source "net/iucv/Kconfig"
 
+config QDISC_STATS
+	bool "Qdisc statistics reporting"
+	help
+	  Enabling this option will enable tracking the high water mark for
+	  the per-device transmit queues.  The high water mark of the queue
+	  will be exported via /proc/net/dev if procfs is enabled.
+
+	  Say Y if you want this additional tracking.
+
 config INET
 	bool "TCP/IP networking"
 	---help---
diff --git a/net/core/dev.c b/net/core/dev.c
index 08fa5a0..054fd26 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3267,7 +3267,7 @@ static void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)
 	const struct net_device_stats *stats = dev_get_stats(dev);
 
 	seq_printf(seq, "%6s: %7lu %7lu %4lu %4lu %4lu %5lu %10lu %9lu "
-		   "%8lu %7lu %4lu %4lu %4lu %5lu %7lu %10lu\n",
+		   "%8lu %7lu %4lu %4lu %4lu %5lu %7lu %10lu",
 		   dev->name, stats->rx_bytes, stats->rx_packets,
 		   stats->rx_errors,
 		   stats->rx_dropped + stats->rx_missed_errors,
@@ -3283,6 +3283,8 @@ static void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)
 		    stats->tx_window_errors +
 		    stats->tx_heartbeat_errors,
 		   stats->tx_compressed);
+	dev_seq_printf_qdisc_stuff(seq, dev);
+	seq_printf(seq, "\n");
 }
 
 /*
@@ -3291,13 +3293,15 @@ static void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)
  */
 static int dev_seq_show(struct seq_file *seq, void *v)
 {
-	if (v == SEQ_START_TOKEN)
+	if (v == SEQ_START_TOKEN) {
 		seq_puts(seq, "Inter-|   Receive                            "
 			      "                    |  Transmit\n"
 			      " face |bytes    packets errs drop fifo frame "
 			      "compressed multicast|bytes    packets errs "
-			      "drop fifo colls carrier compressed\n");
-	else
+			      "drop fifo colls carrier compressed");
+		dev_seq_show_qdisc_stuff(seq);
+		seq_puts(seq, "\n");
+	} else
 		dev_seq_printf_stats(seq, v);
 	return 0;
 }
diff --git a/net/sched/sch_generic.c b/net/sched/sch_generic.c
index ff4dd53..beb805e 100644
--- a/net/sched/sch_generic.c
+++ b/net/sched/sch_generic.c
@@ -42,7 +42,7 @@ static inline int dev_requeue_skb(struct sk_buff *skb, struct Qdisc *q)
 {
 	q->gso_skb = skb;
 	q->qstats.requeues++;
-	q->q.qlen++;	/* it's still part of the queue */
+	qdisc_incr_qlen(q);	/* it's still part of the queue */
 	__netif_schedule(q);
 
 	return 0;
@@ -433,7 +433,7 @@ static int pfifo_fast_enqueue(struct sk_buff *skb, struct Qdisc* qdisc)
 		struct sk_buff_head *list = band2list(priv, band);
 
 		priv->bitmap |= (1 << band);
-		qdisc->q.qlen++;
+		qdisc_incr_qlen(qdisc);
 		return __qdisc_enqueue_tail(skb, qdisc, list);
 	}
 
-- 
1.6.5.2

