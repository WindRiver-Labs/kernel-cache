From 127172d081d884774a4f43dac50dffb3d009ca11 Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Thu, 24 Jul 2008 14:52:50 +0800
Subject: [PATCH] Bonding device info support

This provides the physical device the packet came in from
for a bonded ethernet device. (as ancillary data)

Signed-off-by: Liming Wang <liming.wang@windriver.com>
Integrated-by: Yongli he   <yongli.he@windriver.com>
---
 drivers/net/Kconfig    |    7 +++++++
 include/linux/skbuff.h |    3 +++
 net/8021q/vlan_core.c  |    3 +++
 net/core/dev.c         |    6 +++++-
 net/packet/af_packet.c |   11 +++++++++++
 5 files changed, 29 insertions(+), 1 deletions(-)

diff --git a/drivers/net/Kconfig b/drivers/net/Kconfig
index 2b4bbc4..c4c2b7a 100644
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -90,6 +90,13 @@ config MACVLAN
 	  To compile this driver as a module, choose M here: the module
 	  will be called macvlan.
 
+config BONDING_DEVINFO
+	bool "Bonding driver device info support"
+	depends on BONDING
+	---help---
+	  This provides the physical device the packet came in from
+	  for a bonded ethernet device. (as ancillary data)
+
 config EQUALIZER
 	tristate "EQL (serial line load balancing) support"
 	---help---
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 2dc3307..7a17bad 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -260,6 +260,9 @@ struct sk_buff {
 	ktime_t			tstamp;
 	struct net_device	*dev;
 
+#ifdef CONFIG_BONDING_DEVINFO
+	struct net_device	*real_dev;
+#endif
 	union {
 		struct  dst_entry	*dst;
 		struct  rtable		*rtable;
diff --git a/net/8021q/vlan_core.c b/net/8021q/vlan_core.c
index 44e4a5f..9a0823a 100644
--- a/net/8021q/vlan_core.c
+++ b/net/8021q/vlan_core.c
@@ -25,6 +25,9 @@ int __vlan_hwaccel_rx(struct sk_buff *skb, struct vlan_group *grp,
 
 	skb->iif = skb->dev->ifindex;
 	__vlan_hwaccel_put_tag(skb, vlan_tci);
+#ifdef CONFIG_BONDING_DEVINFO
+	skb->real_dev = skb->dev;
+#endif
 	cb->dev = vlan_group_get_device(grp, vlan_tci & VLAN_VID_MASK);
 
 	return (polling ? netif_receive_skb(skb) : netif_rx(skb));
diff --git a/net/core/dev.c b/net/core/dev.c
index 474399d..3dbe0f5 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2340,8 +2340,12 @@ int netif_receive_skb(struct sk_buff *skb)
 	if (orig_dev->master) {
 		if (skb_bond_should_drop(skb))
 			null_or_orig = orig_dev; /* deliver only exact match */
-		else
+		else {
+#ifdef CONFIG_BONDING_DEVINFO
+			skb->real_dev = skb->dev;
+#endif
 			skb->dev = orig_dev->master;
+		}
 	}
 
 	per_cpu(netdev_rx_stat, raw_smp_processor_id()).total++;
diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 7863b69..95d6242 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -1106,6 +1106,9 @@ static int packet_recvmsg(struct kiocb *iocb, struct socket *sock,
 	struct sk_buff *skb;
 	int copied, err;
 	struct sockaddr_ll *sll;
+#ifdef CONFIG_BONDING_DEVINFO
+	int index = 0;
+#endif
 
 	err = -EINVAL;
 	if (flags & ~(MSG_PEEK|MSG_DONTWAIT|MSG_TRUNC|MSG_CMSG_COMPAT))
@@ -1166,6 +1169,14 @@ static int packet_recvmsg(struct kiocb *iocb, struct socket *sock,
 
 	sock_recv_timestamp(msg, sk, skb);
 
+#ifdef CONFIG_BONDING_DEVINFO
+	if (msg->msg_controllen == 16 && msg->msg_control != NULL &&
+	    ((struct cmsghdr *)msg->msg_control)->cmsg_type == IP_PKTINFO) {
+		if (skb->real_dev)
+			index = skb->real_dev->ifindex;
+		put_cmsg(msg, SOL_SOCKET, IP_PKTINFO, sizeof(int), &index);
+	}
+#endif
 	if (msg->msg_name)
 		memcpy(msg->msg_name, &PACKET_SKB_CB(skb)->sa,
 		       msg->msg_namelen);
-- 
1.7.0.4

