From 8367cf0149f02fe39ca5df776e7cd8b8134bdc30 Mon Sep 17 00:00:00 2001
From: He Zhe <zhe.he@windriver.com>
Date: Tue, 23 Dec 2014 16:25:48 +0800
Subject: [PATCH 02/10] md: RAID1 instrumentation

raid1 mirror index instrumentation:

Instrument raid1_end_write_request to detect out-of-bounds array access.

raid1 bio instrumentation:

Should the for loop in raid1_end_write_request not terminate properly and
should we end up with an invalid index of the mirror device, this
instrumentation will trigger and dump all involved struct bio's, the
r1bio_t, and the mddev.

Two software RAID1 arrays were created with two partitions each. One VLM
volume was created that spanned both arrays. The printk were added to the
normal code path so that they were hit on every invocation of
raid1_end_write_request.

Signed-off-by: Jason HU <yongqi.hu@windriver.com>

2cbbca5e7 "md: discard PRINT_RAID_DEBUG ioctl" removes functions that are
used by the original commit.
Add them back.

Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 drivers/md/Kconfig |   10 ++++
 drivers/md/md.c    |  132 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 drivers/md/md.h    |    7 +++
 drivers/md/raid1.c |  132 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 281 insertions(+), 0 deletions(-)

diff --git a/drivers/md/Kconfig b/drivers/md/Kconfig
index edcf4ab..162e672 100644
--- a/drivers/md/Kconfig
+++ b/drivers/md/Kconfig
@@ -100,6 +100,16 @@ config MD_RAID1
 
 	  If unsure, say Y.
 
+config MD_RAID1_INSTRUMENTATION
+    bool "Support for RAID1 instrumentation"
+    default n
+    depends on MD_RAID1
+    ---help---
+      Enables for RAID1 out-of-bounds array access detection and
+      for RAID1 bio instrumentation.
+
+      If unsure, say N.
+
 config MD_RAID10
 	tristate "RAID-10 (mirrored striping) mode"
 	depends on BLK_DEV_MD
diff --git a/drivers/md/md.c b/drivers/md/md.c
index 78c1f77..9d5fc41 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -67,6 +67,8 @@ static void autostart_arrays(int part);
 static LIST_HEAD(pers_list);
 static DEFINE_SPINLOCK(pers_lock);
 
+void md_print_devices(void);
+
 struct md_cluster_operations *md_cluster_ops;
 EXPORT_SYMBOL(md_cluster_ops);
 struct module *md_cluster_mod;
@@ -2193,6 +2195,136 @@ static void export_array(struct mddev *mddev)
 	mddev->major_version = 0;
 }
 
+static void print_desc(mdp_disk_t *desc)
+{
+	printk(" DISK<N:%d,(%d,%d),R:%d,S:%d>\n", desc->number,
+		desc->major,desc->minor,desc->raid_disk,desc->state);
+}
+
+static void print_sb_90(mdp_super_t *sb)
+{
+	int i;
+
+	printk(KERN_INFO
+		"md:  SB: (V:%d.%d.%d) ID:<%08x.%08x.%08x.%08x> CT:%08x\n",
+		sb->major_version, sb->minor_version, sb->patch_version,
+		sb->set_uuid0, sb->set_uuid1, sb->set_uuid2, sb->set_uuid3,
+		sb->ctime);
+	printk(KERN_INFO "md:     L%d S%08d ND:%d RD:%d md%d LO:%d CS:%d\n",
+		sb->level, sb->size, sb->nr_disks, sb->raid_disks,
+		sb->md_minor, sb->layout, sb->chunk_size);
+	printk(KERN_INFO "md:     UT:%08x ST:%d AD:%d WD:%d"
+		" FD:%d SD:%d CSUM:%08x E:%08lx\n",
+		sb->utime, sb->state, sb->active_disks, sb->working_disks,
+		sb->failed_disks, sb->spare_disks,
+		sb->sb_csum, (unsigned long)sb->events_lo);
+
+	printk(KERN_INFO);
+	for (i = 0; i < MD_SB_DISKS; i++) {
+		mdp_disk_t *desc;
+
+		desc = sb->disks + i;
+		if (desc->number || desc->major || desc->minor ||
+		    desc->raid_disk || (desc->state && (desc->state != 4))) {
+			printk("     D %2d: ", i);
+			print_desc(desc);
+		}
+	}
+	printk(KERN_INFO "md:     THIS: ");
+	print_desc(&sb->this_disk);
+}
+
+static void print_sb_1(struct mdp_superblock_1 *sb)
+{
+	__u8 *uuid;
+
+	uuid = sb->set_uuid;
+	printk(KERN_INFO
+	       "md:  SB: (V:%u) (F:0x%08x) Array-ID:<%pU>\n"
+	       "md:    Name: \"%s\" CT:%llu\n",
+		le32_to_cpu(sb->major_version),
+		le32_to_cpu(sb->feature_map),
+		uuid,
+		sb->set_name,
+		(unsigned long long)le64_to_cpu(sb->ctime)
+		       & MD_SUPERBLOCK_1_TIME_SEC_MASK);
+
+	uuid = sb->device_uuid;
+	printk(KERN_INFO
+	       "md:       L%u SZ%llu RD:%u LO:%u CS:%u DO:%llu DS:%llu SO:%llu"
+			" RO:%llu\n"
+	       "md:     Dev:%08x UUID: %pU\n"
+	       "md:       (F:0x%08x) UT:%llu Events:%llu ResyncOffset:%llu CSUM:0x%08x\n"
+	       "md:         (MaxDev:%u) \n",
+		le32_to_cpu(sb->level),
+		(unsigned long long)le64_to_cpu(sb->size),
+		le32_to_cpu(sb->raid_disks),
+		le32_to_cpu(sb->layout),
+		le32_to_cpu(sb->chunksize),
+		(unsigned long long)le64_to_cpu(sb->data_offset),
+		(unsigned long long)le64_to_cpu(sb->data_size),
+		(unsigned long long)le64_to_cpu(sb->super_offset),
+		(unsigned long long)le64_to_cpu(sb->recovery_offset),
+		le32_to_cpu(sb->dev_number),
+		uuid,
+		sb->devflags,
+		(unsigned long long)le64_to_cpu(sb->utime) & MD_SUPERBLOCK_1_TIME_SEC_MASK,
+		(unsigned long long)le64_to_cpu(sb->events),
+		(unsigned long long)le64_to_cpu(sb->resync_offset),
+		le32_to_cpu(sb->sb_csum),
+		le32_to_cpu(sb->max_dev)
+		);
+}
+
+static void print_rdev(struct md_rdev *rdev, int major_version)
+{
+	char b[BDEVNAME_SIZE];
+	printk(KERN_INFO "md: rdev %s, Sect:%08llu F:%d S:%d DN:%u\n",
+	       bdevname(rdev->bdev, b), (unsigned long long)rdev->sectors,
+	       test_bit(Faulty, &rdev->flags), test_bit(In_sync, &rdev->flags),
+	       rdev->desc_nr);
+	if (rdev->sb_loaded) {
+		printk(KERN_INFO "md: rdev superblock (MJ:%d):\n", major_version);
+		switch (major_version) {
+		case 0:
+			print_sb_90(page_address(rdev->sb_page));
+			break;
+		case 1:
+			print_sb_1(page_address(rdev->sb_page));
+			break;
+		}
+	} else
+		printk(KERN_INFO "md: no rdev superblock!\n");
+}
+
+void md_print_devices(void)
+{
+	struct list_head *tmp;
+	struct md_rdev *rdev;
+	struct mddev *mddev;
+	char b[BDEVNAME_SIZE];
+
+	printk("\n");
+	printk("md:	**********************************\n");
+	printk("md:	* <COMPLETE RAID STATE PRINTOUT> *\n");
+	printk("md:	**********************************\n");
+	for_each_mddev(mddev, tmp) {
+
+		if (mddev->bitmap)
+			bitmap_print_sb(mddev->bitmap);
+		else
+			printk("%s: ", mdname(mddev));
+		rdev_for_each(rdev, mddev)
+			printk("<%s>", bdevname(rdev->bdev,b));
+		printk("\n");
+
+		rdev_for_each(rdev, mddev)
+			print_rdev(rdev, mddev->major_version);
+	}
+	printk("md:	**********************************\n");
+	printk("\n");
+}
+
 static void sync_sbs(struct mddev *mddev, int nospares)
 {
 	/* Update each superblock (in-memory image), but
diff --git a/drivers/md/md.h b/drivers/md/md.h
index 4046a6c..7da7b99 100644
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@ -679,6 +679,13 @@ static inline int mddev_check_plugged(struct mddev *mddev)
 				   sizeof(struct blk_plug_cb));
 }
 
+extern void md_print_devices(void);
+
+#define MD_BUG(x...) { \
+    printk("md: bug in file %s, line %d\n", __FILE__, __LINE__);    \
+    md_print_devices(); \
+}
+
 static inline void rdev_dec_pending(struct md_rdev *rdev, struct mddev *mddev)
 {
 	int faulty = test_bit(Faulty, &rdev->flags);
diff --git a/drivers/md/raid1.c b/drivers/md/raid1.c
index bff6c1c..3da8e32 100644
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -41,6 +41,14 @@
 #include "raid1.h"
 #include "bitmap.h"
 
+#ifdef CONFIG_PANIC_LOGS
+extern void kcore_logon(int reboot);
+extern void kcore_logoff(void);
+#else
+#define kcore_logon(reboot) do { } while(0)
+#define kcore_logoff() do { } while(0)
+#endif /* CONFIG_PANIC_LOGS */
+
 /*
  * Number of guaranteed r1bios in case of extreme VM load:
  */
@@ -293,6 +301,98 @@ static inline void update_head_pos(int disk, struct r1bio *r1_bio)
 		r1_bio->sector + (r1_bio->sectors);
 }
 
+#ifdef CONFIG_MD_RAID1_INSTRUMENTATION
+
+#define indent_printk(indentation_level, format_string, ...) \
+	printk(KERN_DEBUG "%*s" format_string, indent_level, " ", ##__VA_ARGS__)
+
+#define MAX_DUMP_BIO_RECURSION 32
+
+#define printk_struct_field(field_name, format_specifier) \
+	indent_printk(indent_level, "" # field_name \
+			": " # format_specifier \
+			"\n", field_name)
+
+void dump_bio_iter(struct bio *bio, int indent_level)
+{
+	if (!bio) {
+		printk(KERN_DEBUG "not printing bio: it's NULL\n");
+		return;
+	}
+
+	if (indent_level == MAX_DUMP_BIO_RECURSION) {
+		printk(KERN_DEBUG "hit recursion limit. aborting.\n");
+		return;
+	}
+
+	indent_printk(indent_level, "struct bio: %p\n", bio);
+	printk_struct_field(bio->bi_iter.bi_sector, %ld);
+	printk_struct_field(bio->bi_next, %p);
+	printk_struct_field(bio->bi_bdev, %p);
+	printk_struct_field(bio->bi_flags, %lu);
+	printk_struct_field(bio->bi_rw, %lu);
+	printk_struct_field(bio->bi_vcnt, %d);
+	printk_struct_field(bio->bi_iter.bi_idx, %d);
+	printk_struct_field(bio->bi_phys_segments, %d);
+	printk_struct_field(bio->bi_iter.bi_size, %d);
+	printk_struct_field(bio->bi_max_vecs, %d);
+
+	printk_struct_field(bio->bi_io_vec, %p);
+	if (!bio->bi_io_vec) {
+		printk(KERN_DEBUG "not printing bio_vec: it's NULL\n");
+	} else {
+		int i;
+		for (i = 0; i < bio->bi_vcnt; i++) {
+			indent_printk(indent_level, "i: %d\n", i);
+			printk_struct_field(bio->bi_io_vec[i].bv_page, %p);
+			printk_struct_field(bio->bi_io_vec[i].bv_len, %d);
+			printk_struct_field(bio->bi_io_vec[i].bv_offset, %d);
+		}
+	}
+	printk_struct_field(bio->bi_end_io, %p);
+	printk_struct_field(atomic_read(&bio->bi_cnt), %d);
+	printk_struct_field(bio->bi_private, %p);
+
+	if (bio->bi_next && (bio->bi_next != bio)) {
+		dump_bio_iter(bio->bi_next, indent_level + 1);
+	}
+}
+
+void dump_bio(struct bio *bio) { dump_bio_iter(bio, 0); }
+
+void dump_r1bio_t(struct r1bio *r1_bio, int raid_disks)
+{
+	int i;
+	int indent_level = 0;
+
+	if (!r1_bio) {
+		printk(KERN_DEBUG "not printing r1_bio: it's NULL\n");
+		return;
+	}
+
+	printk_struct_field(atomic_read(&r1_bio->remaining), %d);
+	printk_struct_field(r1_bio->state, %ld);
+	printk_struct_field(r1_bio->read_disk, %d);
+	for (i = 0; i < raid_disks; i++) {
+		printk(KERN_DEBUG "contents of r1_bio->bios[%d]:\n", i);
+		dump_bio(r1_bio->bios[i]);
+	}
+	printk_struct_field(r1_bio->master_bio, %p);
+	dump_bio(r1_bio->master_bio);
+}
+
+void dump_mddev_t(struct mddev *mddev)
+{
+	int indent_level = 0;
+
+	if (!mddev) {
+		printk(KERN_DEBUG "not printing mddev: it's NULL\n");
+		return;
+	}
+	printk_struct_field(mddev->ro, %d\n);
+}
+#endif
+
 /*
  * Find the disk number which triggered given bio
  */
@@ -306,6 +406,38 @@ static int find_bio_disk(struct r1bio *r1_bio, struct bio *bio)
 		if (r1_bio->bios[mirror] == bio)
 			break;
 
+#ifdef CONFIG_MD_RAID1_INSTRUMENTATION
+    /*
+     * There's a chance that the above loop will not find a matching index
+     * of the mirror associated with the passed in struct bio *bio. We
+     * would then end up with (mirror == conf->raid_disks) thus accessing
+     * an out-of-bounds value of the zero-based r1_bio->bios[] array.
+     */
+    if (unlikely(mirror >= conf->raid_disks)) {
+        int cpu = get_cpu();
+#ifdef CONFIG_PANIC_LOGS
+        kcore_logon(0);
+#endif
+        printk(KERN_DEBUG "raid1.c: (CPU %d) None of the bio's in the "
+                "bios array matched the passed in bio struct. "
+                "[mirror=%d,conf->raid_disks=%d]\n", cpu,
+                mirror, conf->raid_disks);
+        MD_BUG();
+
+        printk(KERN_DEBUG "contents of passed in bio:\n");
+        dump_bio(bio);
+        printk(KERN_DEBUG "partial contents of r1_bio:\n");
+        dump_r1bio_t(r1_bio, conf->raid_disks);
+        printk(KERN_DEBUG "partial contents of r1_bio->mddev:\n");
+        dump_mddev_t(r1_bio->mddev);
+
+        put_cpu();
+#ifdef CONFIG_PANIC_LOGS
+        kcore_logoff();
+#endif
+    }
+#endif
+
 	BUG_ON(mirror == raid_disks * 2);
 	update_head_pos(mirror, r1_bio);
 
-- 
1.7.5.4

