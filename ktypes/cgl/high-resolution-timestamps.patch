From 3211acb90705d7dd6cb8cb0e9bd7f6ecba2e1108 Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Wed, 3 Sep 2008 11:32:34 +0800
Subject: [PATCH] high resolution timestamps

add high resolution timestamp surport for i386 and powerpc.

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: MacDonald, Joe <Joe.MacDonald@windriver.com>
---
 arch/powerpc/include/asm/tbr_common.h |   53 +++++++++++++++++++++++++++++++++
 arch/powerpc/include/asm/time.h       |   30 +-----------------
 arch/powerpc/include/asm/timex.h      |   33 ++++++++++++++++++++
 arch/powerpc/kernel/time.c            |    7 ++++-
 arch/x86/mach-default/setup.c         |    3 ++
 include/asm-x86/timex.h               |    4 ++
 include/linux/mm_types.h              |    1 +
 include/linux/sysctl.h                |    2 +-
 include/linux/time.h                  |    1 +
 kernel/sysctl.c                       |    8 +++++
 kernel/time.c                         |    2 +
 11 files changed, 114 insertions(+), 30 deletions(-)
 create mode 100644 arch/powerpc/include/asm/tbr_common.h

diff --git a/arch/powerpc/include/asm/tbr_common.h b/arch/powerpc/include/asm/tbr_common.h
new file mode 100644
index 0000000..333754e
--- /dev/null
+++ b/arch/powerpc/include/asm/tbr_common.h
@@ -0,0 +1,53 @@
+/* 
+ * arch/powerpc/include/asm/tbr_common.h, High Resolution timestamp surport
+ * 
+ * Copyright (c) 2006-2008 Wind River Systems, Inc. 
+ * 
+ * This program is free software; you can redistribute it and/or modify 
+ * it under the terms of the GNU General Public License version 2 as 
+ * published by the Free Software Foundation. 
+ * 
+ * This program is distributed in the hope that it will be useful, 
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of 
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
+ * See the GNU General Public License for more details. 
+ * 
+ * You should have received a copy of the GNU General Public License 
+ * along with this program; if not, write to the Free Software 
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
+ * 
+*/
+#ifndef TBRCOMMON
+#define TBRCOMMON
+
+#ifdef CONFIG_PPC64
+
+/* For compatibility, get_tbl() is defined as get_tb() on ppc64 */
+#define get_tbl		get_tb
+
+#else
+
+static inline unsigned long get_tbl(void)
+{
+#if defined(CONFIG_403GCX)
+	unsigned long tbl;
+	asm volatile("mfspr %0, 0x3dd" : "=r" (tbl));
+	return tbl;
+#else
+	return mftbl();
+#endif
+}
+
+static inline unsigned int get_tbu(void)
+{
+#ifdef CONFIG_403GCX
+	unsigned int tbu;
+	asm volatile("mfspr %0, 0x3dc" : "=r" (tbu));
+	return tbu;
+#else
+	return mftbu();
+#endif
+}
+#endif /* !CONFIG_PPC64 */
+
+#endif
diff --git a/arch/powerpc/include/asm/time.h b/arch/powerpc/include/asm/time.h
index febd581..7acefe7 100644
--- a/arch/powerpc/include/asm/time.h
+++ b/arch/powerpc/include/asm/time.h
@@ -24,6 +24,8 @@
 #include <asm/iseries/hv_call.h>
 #endif
 
+#include <asm/tbr_common.h>
+
 /* time.c */
 extern unsigned long tb_ticks_per_jiffy;
 extern unsigned long tb_ticks_per_usec;
@@ -81,35 +83,7 @@ struct div_result {
 #define __USE_RTC()	0
 #endif
 
-#ifdef CONFIG_PPC64
-
-/* For compatibility, get_tbl() is defined as get_tb() on ppc64 */
-#define get_tbl		get_tb
-
-#else
 
-static inline unsigned long get_tbl(void)
-{
-#if defined(CONFIG_403GCX)
-	unsigned long tbl;
-	asm volatile("mfspr %0, 0x3dd" : "=r" (tbl));
-	return tbl;
-#else
-	return mftbl();
-#endif
-}
-
-static inline unsigned int get_tbu(void)
-{
-#ifdef CONFIG_403GCX
-	unsigned int tbu;
-	asm volatile("mfspr %0, 0x3dc" : "=r" (tbu));
-	return tbu;
-#else
-	return mftbu();
-#endif
-}
-#endif /* !CONFIG_PPC64 */
 
 static inline unsigned int get_rtcl(void)
 {
diff --git a/arch/powerpc/include/asm/timex.h b/arch/powerpc/include/asm/timex.h
index 76895c2..910f30d 100644
--- a/arch/powerpc/include/asm/timex.h
+++ b/arch/powerpc/include/asm/timex.h
@@ -1,6 +1,39 @@
 #ifndef _ASM_POWERPC_TIMEX_H
 #define _ASM_POWERPC_TIMEX_H
 
+#include <asm/tbr_common.h>
+
+#ifdef CONFIG_PPC64
+static inline unsigned long long gethrtime(void)
+{
+    return mftb();
+}
+#else
+/* Not sure how else to get a 64-bit value 32 bits at a time without
+ * having to do shifting.  There's probably some nice way to do it
+ * with assembly, but I don't know it.
+ */
+#define SUPPORT_HRTIME
+static inline unsigned long long gethrtime(void)
+{
+	union {
+		struct {
+			unsigned long high;
+			unsigned long low;
+		} words;
+		unsigned long long tbr;
+	} ts;
+	unsigned long high;
+
+	do {
+		high = get_tbu();
+		ts.words.low = get_tbl();
+		ts.words.high = get_tbu();
+	} while(high != ts.words.high);
+	return ts.tbr;
+}
+#endif
+
 #ifdef __KERNEL__
 
 /*
diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 0c9b3b8..2595001 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -73,6 +73,8 @@
 #include <asm/iseries/hv_call_xm.h>
 #endif
 
+
+
 /* powerpc clocksource/clockevent code */
 
 #include <linux/clockchips.h>
@@ -795,7 +797,10 @@ void __init generic_calibrate_decr(void)
 
 		printk(KERN_ERR "WARNING: Estimating processor frequency "
 				"(not found)\n");
-	}
+        }
+
+        /* set the high res time frequency. */
+	hrt_khz = (tb_ticks_per_jiffy * HZ) / 1000;
 
 #if defined(CONFIG_BOOKE) || defined(CONFIG_40x)
 	/* Clear any pending timer interrupts */
diff --git a/arch/x86/mach-default/setup.c b/arch/x86/mach-default/setup.c
index ec64776..24e3cfc 100644
--- a/arch/x86/mach-default/setup.c
+++ b/arch/x86/mach-default/setup.c
@@ -134,6 +134,9 @@ void __init time_init_hook(void)
 
 	irq0.mask = cpumask_of_cpu(0);
 	setup_irq(0, &irq0);
+	
+	/* for ncgl hrt frequency export */
+	hrt_khz = cpu_khz;
 }
 
 #ifdef CONFIG_MCA
diff --git a/include/asm-x86/timex.h b/include/asm-x86/timex.h
index 43e5a78..4981aec 100644
--- a/include/asm-x86/timex.h
+++ b/include/asm-x86/timex.h
@@ -16,4 +16,8 @@
 
 #define ARCH_HAS_READ_CURRENT_TIMER
 
+/* ncgl exports gethrtime() as a generic way to get a 64-bit timestamp. */
+#define SUPPORT_HRTIME
+#define gethrtime() get_cycles()
+
 #endif
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index a57935f..3b2fe3f 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -95,6 +95,7 @@ struct page {
 #ifdef CONFIG_CGROUP_PAGE
 	unsigned long page_cgroup;
 #endif
+
 };
 
 /*
diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index 1f30a7b..bf83aa7 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -4,7 +4,6 @@
  * Begun 24 March 1995, Stephen Tweedie
  *
  ****************************************************************
- ****************************************************************
  **
  **  WARNING:
  **  The values in this file are exported to user space via 
@@ -166,6 +165,7 @@ enum
 	KERN_PANIC_ON_NMI=76, /* int: whether we will panic on an unrecovered */
 	KERN_DISABLE_HISTORY_BUFFER=77, /* int: disable the logging to exception and scheduler history buffers */
 	KERN_NMI_TOGGLE=78,	/* NMI on/off */
+    	KERN_HRT_KHZ=79,        /* int: high res time frequency in khz */
 
 #ifdef CONFIG_GRKERNSEC
 	KERN_GRSECURITY=98,	/* grsecurity */
diff --git a/include/linux/time.h b/include/linux/time.h
index 08a3e4a..28a17a8 100644
--- a/include/linux/time.h
+++ b/include/linux/time.h
@@ -100,6 +100,7 @@ extern int update_persistent_clock(struct timespec now);
 extern int no_sync_cmos_clock __read_mostly;
 void timekeeping_init(void);
 extern int timekeeping_suspended;
+extern int hrt_khz;
 
 unsigned long get_seconds(void);
 struct timespec current_kernel_time(void);
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index d098b85..adcd79f 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -267,6 +267,14 @@ static struct ctl_table root_table[] = {
 		.proc_handler   = &proc_dointvec,
 	},
 #endif
+	{
+		.ctl_name	= KERN_HRT_KHZ,
+		.procname	= "hrt-khz",
+		.data		= &hrt_khz,
+		.maxlen		= sizeof(int),
+		.mode		= 0444,
+		.proc_handler	= &proc_dointvec,
+	},
 /*
  * NOTE: do not add new entries to this table unless you have read
  * Documentation/sysctl/ctl_unnumbered.txt
diff --git a/kernel/time.c b/kernel/time.c
index c59c423..30f14c5 100644
--- a/kernel/time.c
+++ b/kernel/time.c
@@ -44,6 +44,8 @@
 
 #include "timeconst.h"
 
+int hrt_khz = -1; /* set by arch-specific code, exported via /proc */
+
 /*
  * The timezone where the local system is located.  Used as a default by some
  * programs who obtain this value by using gettimeofday.
-- 
1.6.0.3

