From 41dd3a7da134db707caafc750413f8fe8b89f77b Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Wed, 30 Jul 2008 10:08:36 +0800
Subject: [PATCH] Software watchdog dynamic minor device number

Enables software watchdog minor number to be allocated dynamically.
This is enables with the kenrel parameter dynamic_dev (0|1)

Signed-off-by: Liming Wang <liming.wang@windriver.com>
Integrated-by: Yongli he   <yongli.he@windriver.com>
---
 drivers/watchdog/Kconfig   |    7 +++++++
 drivers/watchdog/softdog.c |   29 +++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+), 0 deletions(-)

diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index fb9abfe..7b6788f 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -55,6 +55,13 @@ config SOFT_WATCHDOG
 	  To compile this driver as a module, choose M here: the
 	  module will be called softdog.
 
+config SOFT_WATCHDOG_DYNDEV
+	bool "Software watchdog dynamic minor device number"
+	depends on SOFT_WATCHDOG
+	help
+	  Enables software watchdog minor number to be allocated
+	  dynamically. This is enables with the kenrel parameter dynamic_dev (0|1).
+
 # ALPHA Architecture
 
 # ARM Architecture
diff --git a/drivers/watchdog/softdog.c b/drivers/watchdog/softdog.c
index 9c36949..a5bf14b 100644
--- a/drivers/watchdog/softdog.c
+++ b/drivers/watchdog/softdog.c
@@ -70,6 +70,13 @@ static int soft_noboot = 0;
 module_param(soft_noboot, int, 0);
 MODULE_PARM_DESC(soft_noboot, "Softdog action, set to 1 to ignore reboots, 0 to reboot (default depends on ONLY_TESTING)");
 
+#ifdef CONFIG_SOFT_WATCHDOG_DYNDEV
+static int dynamic_dev = 0;
+
+module_param(dynamic_dev, int, 0);
+MODULE_PARM_DESC(dynamic_dev, "Watchdog minor number is allocated dynamically");
+#endif
+
 /*
  *	Our timer
  */
@@ -258,6 +265,14 @@ static struct miscdevice softdog_miscdev = {
 	.fops		= &softdog_fops,
 };
 
+#ifdef CONFIG_SOFT_WATCHDOG_DYNDEV
+static struct miscdevice softdog_dynamic_miscdev = {
+	.minor		= MISC_DYNAMIC_MINOR,
+	.name		= "softdog",
+	.fops		= &softdog_fops,
+};
+#endif
+
 static struct notifier_block softdog_notifier = {
 	.notifier_call	= softdog_notify_sys,
 };
@@ -282,7 +297,14 @@ static int __init watchdog_init(void)
 		return ret;
 	}
 
+#ifdef CONFIG_SOFT_WATCHDOG_DYNDEV
+	if (dynamic_dev)
+		ret = misc_register(&softdog_dynamic_miscdev);
+	else
+		ret = misc_register(&softdog_miscdev);
+#else	
 	ret = misc_register(&softdog_miscdev);
+#endif
 	if (ret) {
 		printk (KERN_ERR PFX "cannot register miscdev on minor=%d (err=%d)\n",
 			WATCHDOG_MINOR, ret);
@@ -297,7 +319,14 @@ static int __init watchdog_init(void)
 
 static void __exit watchdog_exit(void)
 {
+#ifdef CONFIG_SOFT_WATCHDOG_DYNDEV
+	if (dynamic_dev)
+		misc_deregister(&softdog_dynamic_miscdev);
+	else
+		misc_deregister(&softdog_miscdev);
+#else	
 	misc_deregister(&softdog_miscdev);
+#endif
 	unregister_reboot_notifier(&softdog_notifier);
 }
 
-- 
1.5.5.1

