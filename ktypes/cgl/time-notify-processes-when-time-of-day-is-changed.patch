From 4d8747cca805d3b49f68f6daee2a49db9732dbea Mon Sep 17 00:00:00 2001
From: He Zhe <zhe.he@windriver.com>
Date: Mon, 12 Jan 2015 16:08:47 +0800
Subject: [PATCH 09/10] time: notify processes when time of day is changed

Enabling this will allow apps to register to be sent a signal
whenever the time of day on the system has changed (due to someone
calling settimeofday(), for instance).

This is exposed to userspace via /proc/notify_settime_signal

Signed-off-by: Peter Seebach <peter.seebach@windriver.com>
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 fs/exec.c                 |    4 ++
 include/linux/init_task.h |    8 +++
 include/linux/sched.h     |    3 +
 include/linux/time.h      |    4 ++
 init/Kconfig              |   10 ++++
 kernel/Makefile           |    1 +
 kernel/notify_settime.c   |  113 +++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 143 insertions(+), 0 deletions(-)
 create mode 100644 kernel/notify_settime.c

diff --git a/fs/exec.c b/fs/exec.c
index 1977c2a..a294d15 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1593,6 +1593,10 @@ static int do_execveat_common(int fd, struct filename *filename,
 	free_bprm(bprm);
 	kfree(pathbuf);
 	putname(filename);
+#ifdef CONFIG_NOTIFY_SETTIME
+	/* there's got to be a better place for this!  */
+	current->settime_sig = 0;
+#endif
 	if (displaced)
 		put_files_struct(displaced);
 	return retval;
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index 1ce3fa4..18a6cbe 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -77,6 +77,13 @@ extern struct nsproxy init_nsproxy;
 	.signalfd_wqh	= __WAIT_QUEUE_HEAD_INITIALIZER(sighand.signalfd_wqh),	\
 }
 
+#ifdef CONFIG_NOTIFY_SETTIME
+#define INIT_NOTIFY_SETTIME(tsk)\
+	.settime_sig    = 0,
+#else
+#define INIT_NOTIFY_SETTIME(tsk)
+#endif
+
 extern struct group_info init_groups;
 
 #define INIT_STRUCT_PID {						\
@@ -268,6 +275,7 @@ extern struct task_group root_task_group;
 	INIT_VTIME(tsk)							\
 	INIT_NUMA_BALANCING(tsk)					\
 	INIT_KASAN(tsk)							\
+	INIT_NOTIFY_SETTIME(tsk)					\
 }
 
 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 5b9467a..75bb947 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1731,6 +1731,9 @@ struct task_struct {
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
 	unsigned long	task_state_change;
 #endif
+#ifdef CONFIG_NOTIFY_SETTIME
+	int settime_sig;                /* notify_settime() signal */
+#endif
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
diff --git a/include/linux/time.h b/include/linux/time.h
index beebe3a..453ee47 100644
--- a/include/linux/time.h
+++ b/include/linux/time.h
@@ -150,6 +150,10 @@ extern unsigned int alarm_setitimer(unsigned int seconds);
 
 extern long do_utimes(int dfd, const char __user *filename, struct timespec *times, int flags);
 
+#ifdef CONFIG_NOTIFY_SETTIME
+extern void do_notify_timechange(void);
+#endif
+
 struct tms;
 extern void do_sys_times(struct tms *);
 
diff --git a/init/Kconfig b/init/Kconfig
index 1efd236..bf8e3a6 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1823,6 +1823,16 @@ config TRACEPOINTS
 
 source "arch/Kconfig"
 
+config NOTIFY_SETTIME
+	bool "Notify processes when time of day is changed"
+	default y
+	help
+	  Enabling this will allow apps to register to be sent a signal
+	  whenever the time of day on the system has changed (due to someone
+	  calling settimeofday(), for instance).
+
+	  This is exposed to userspace via /proc/notify_settime_signal
+
 endmenu		# General setup
 
 config HAVE_GENERIC_DMA_COHERENT
diff --git a/kernel/Makefile b/kernel/Makefile
index d2d437c..feaa3ba 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -91,6 +91,7 @@ obj-$(CONFIG_IRQ_WORK) += irq_work.o
 obj-$(CONFIG_CPU_PM) += cpu_pm.o
 obj-$(CONFIG_BPF) += bpf/
 obj-$(CONFIG_SIGEXIT) += death_notify.o
+obj-$(CONFIG_NOTIFY_SETTIME) += notify_settime.o
 
 obj-$(CONFIG_PERF_EVENTS) += events/
 
diff --git a/kernel/notify_settime.c b/kernel/notify_settime.c
new file mode 100644
index 0000000..56e8579
--- /dev/null
+++ b/kernel/notify_settime.c
@@ -0,0 +1,113 @@
+/*
+ *  Notify processes whenever the time is modified via settimeofday.
+ *  Copyright (C) 2006-2007 Wind River Systems, Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/sched.h>
+#include <linux/errno.h>
+#include <linux/signal.h>
+#include <linux/stat.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/uaccess.h>
+
+/*
+ * Called when the time is modified below with settimeofday in order
+ * to notify all of the tasks that requested notification.
+ */
+void do_notify_timechange(void)
+{
+	struct task_struct *p;
+
+	read_lock(&tasklist_lock);
+	for_each_process(p) {
+		if (p->settime_sig)
+			group_send_sig_info(p->settime_sig, SEND_SIG_PRIV, p);
+	}
+	read_unlock(&tasklist_lock);
+}
+
+/*
+ * Set a signal to be delivered to the calling process whenever
+ * time of day is changed. A signal value of zero indicates that
+ * no signal should be sent.  On success, the call returns the
+ * old value of the signal.  A return value of -1 indicates an error.
+ */
+static int do_notify_settime(int sig)
+{
+	int ret = -EINVAL;
+
+	if ((sig > 0) && (sig <= _NSIG)) {
+		ret = current->settime_sig;
+		current->settime_sig = sig;
+	}
+
+	return ret;
+}
+
+#ifdef CONFIG_PROC_FS
+#define NOTIFY_SETTIME_PROCFS_NAME "notify_settime_signal"
+
+static int notify_settime_signal_show(struct seq_file *m, void *v )
+{
+	seq_printf(m, "%d\n", current->settime_sig);
+	return 0;
+}
+
+static int notify_settime_signal_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, notify_settime_signal_show, PDE_DATA(inode));
+}
+
+static int notify_settime_signal_proc_write(struct file *file,
+					const char __user *buffer,
+				       size_t count, loff_t *pos)
+{
+	char str[16];
+	int sig = 0;
+
+	if (count > sizeof(str)-1)
+		return -EINVAL;
+
+	memset(str, 0, sizeof(str));
+	if (copy_from_user(str, buffer, count))
+		return -EFAULT;
+
+	sscanf(str, "%d", &sig);
+	return do_notify_settime(sig);
+}
+
+static const struct file_operations notify_settime_signal_proc_fops = {
+	.open		= notify_settime_signal_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= notify_settime_signal_proc_write,
+};
+
+static int __init notify_settime_init(void)
+{
+	int ret = 0;
+
+	proc_create(NOTIFY_SETTIME_PROCFS_NAME,
+		    S_IFREG | S_IRUGO | S_IWUSR, NULL,
+		    &notify_settime_signal_proc_fops);
+
+	return ret;
+}
+device_initcall(notify_settime_init);
+#endif
-- 
1.7.5.4

