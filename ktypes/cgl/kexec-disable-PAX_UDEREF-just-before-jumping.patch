From a37a8c1ea3f6dad3132d5be6f074799d33cbd879 Mon Sep 17 00:00:00 2001
From: Greg Moffatt <greg.moffatt@windriver.com>
Date: Fri,  9 Apr 2010 10:55:05 -0400
Subject: [PATCH] kexec: disable PAX_UDEREF just before jumping

For CGL 32-bit kernels on the x86, PAX enables the configuration
option PAX_MEMORY_UDEREF.  By doing this any attempts to kexec from
this kernel will fail due to a GPF during the last moments before
jumping to the new kernel.  The GPF is caused by kexec.  The last
step before jumping to the new kernel is to reset all the segment
registers and invalidate the GDT.  With PAX_MEMORY_UDEREF enabled
this triggers a GPF on the kernel.

To rectify this the underlying functionality of PAX_MEMORY_UDEREF is
disabled just before jumping to the new kernel.  The PAX_MEMORY_UDEREF
can be dynamically disabled on the kernel commandline (see the
pax_nouderef commandline option).  To disable UDEREF kexec emulates
the functionality of the commandline handler just before the step
where kexec invalidates the GDT and jumps to the new kernel (see
the function setup_pax_nouderef() ).  The value of 0x00cf9300 used
to reset the GDT to it's non-UDEREF comes from the FULL_SEGMENT
constant defined in the file include/asm-x86/lguest.h.  This constant
is used to initialize the GDT.

Signed-off-by: Greg Moffatt <greg.moffatt@windriver.com>
---
 arch/x86/kernel/machine_kexec_32.c |   25 +++++++++++++++++++++++++
 1 files changed, 25 insertions(+), 0 deletions(-)

diff --git a/arch/x86/kernel/machine_kexec_32.c b/arch/x86/kernel/machine_kexec_32.c
index 33431c2..7fb19d5 100644
--- a/arch/x86/kernel/machine_kexec_32.c
+++ b/arch/x86/kernel/machine_kexec_32.c
@@ -121,6 +121,12 @@ void machine_kexec(struct kimage *image)
 				       unsigned long start_address,
 				       unsigned int has_pae,
 				       unsigned int preserve_context);
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	unsigned int cpu;
+#ifdef CONFIG_PAX_KERNEXEC
+	unsigned long cr0;
+#endif
+#endif
 
 #ifdef CONFIG_KEXEC_JUMP
 	if (kexec_image->preserve_context)
@@ -164,6 +170,25 @@ void machine_kexec(struct kimage *image)
 	page_list[VA_PTE_1] = (unsigned long)kexec_pte1;
 	page_list[PA_SWAP_PAGE] = (page_to_pfn(image->swap_page) << PAGE_SHIFT);
 
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	/* revert the GDT to it's non-PAX configuration before invalidating
+	 * the GDT.  This is based on the function setup_pax_nouderef() that
+	 * is used to disable UDEREF via the "pax_nouderef" kernel option */
+#ifdef CONFIG_PAX_KERNEXEC
+	pax_open_kernel(cr0);
+#endif
+
+	/* for each CPU revert it's GDT to the original non-PAX setting
+	 * which comes from the FULL_SEGMENT constant defined in the file
+	 * include/asm-x86/lguest.h and is used for initializing the GDT */
+	for_each_online_cpu(cpu)
+		get_cpu_gdt_table(cpu)[GDT_ENTRY_KERNEL_DS].b = 0x00cf9300;
+
+#ifdef CONFIG_PAX_KERNEXEC
+	pax_close_kernel(cr0);
+#endif
+#endif
+
 	/* The segment registers are funny things, they have both a
 	 * visible and an invisible part.  Whenever the visible part is
 	 * set to a specific selector, the invisible part is loaded
-- 
1.6.2


