From bacf22664e95c6a25a2b4bddbb04d87e3209abc6 Mon Sep 17 00:00:00 2001
From: Jason HU <yongqi.hu@windriver.com>
Date: Tue, 25 May 2010 13:45:29 +0800
Subject: [PATCH 5/5] nested alt sigstack

Allow apps to call sigaltstack from a signal handler already
running with an alternate stack. To enable nested sigaltstack
calls, specify SS_ALLOW_NESTED in addition to whatever flags
you were going to use in the "ss" parameter to the sigaltstack()
syscall.

Signed-off-by: Yongli He <yongli.he@windriver.com>
Signed-off-by: Jason HU <yongqi.hu@windriver.com>
---
 arch/powerpc/include/asm/signal.h |    1 +
 arch/sparc/include/asm/signal.h   |    1 +
 arch/x86/include/asm/signal.h     |    1 +
 init/Kconfig                      |   10 ++++++++++
 kernel/signal.c                   |   10 +++++++++-
 5 files changed, 22 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/include/asm/signal.h b/arch/powerpc/include/asm/signal.h
index 3eb13be..f022fa1 100644
--- a/arch/powerpc/include/asm/signal.h
+++ b/arch/powerpc/include/asm/signal.h
@@ -90,6 +90,7 @@ typedef struct {
  */
 #define SS_ONSTACK	1
 #define SS_DISABLE	2
+#define SS_ALLOW_NESTED 0x4000
 
 #define MINSIGSTKSZ	2048
 #define SIGSTKSZ	8192
diff --git a/arch/sparc/include/asm/signal.h b/arch/sparc/include/asm/signal.h
index e49b828..6e8847e 100644
--- a/arch/sparc/include/asm/signal.h
+++ b/arch/sparc/include/asm/signal.h
@@ -158,6 +158,7 @@ struct sigstack {
 #define SS_ONSTACK	1
 #define SS_DISABLE	2
 
+#define SS_ALLOW_NESTED 0x4000
 #define MINSIGSTKSZ	4096
 #define SIGSTKSZ	16384
 
diff --git a/arch/x86/include/asm/signal.h b/arch/x86/include/asm/signal.h
index 598457c..6623c22 100644
--- a/arch/x86/include/asm/signal.h
+++ b/arch/x86/include/asm/signal.h
@@ -113,6 +113,7 @@ typedef unsigned long sigset_t;
  */
 #define SS_ONSTACK	1
 #define SS_DISABLE	2
+#define SS_ALLOW_NESTED 0x4000
 
 #define MINSIGSTKSZ	2048
 #define SIGSTKSZ	8192
diff --git a/init/Kconfig b/init/Kconfig
index fd13dcb..a27ebfc 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1254,6 +1254,16 @@ config MEMMON_SWAP_SUPPORT
 	  This slows down dirty page scanning significantly, so only enable if
 	  actually needed.
 
+config NEST_ALTSTACK
+	bool "Enable nested sigaltstack manipulations"
+	default y
+	help
+	  Enabling this will allow apps to call sigaltstack from a signal
+	  handler already running with an alternate stack.  To enable nested
+	  sigaltstack calls, specify SS_ALLOW_NESTED in addition to whatever
+	  flags you were going to use in the "ss" parameter to the sigaltstack()
+	  syscall.
+
 endmenu		# General setup
 
 config HAVE_GENERIC_DMA_COHERENT
diff --git a/kernel/signal.c b/kernel/signal.c
index b8a67d3..b0a155c 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -2506,6 +2506,7 @@ do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long s
 {
 	stack_t oss;
 	int error;
+	int allow_nested = 0;
 
 	oss.ss_sp = (void __user *) current->sas_ss_sp;
 	oss.ss_size = current->sas_ss_size;
@@ -2525,8 +2526,15 @@ do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long s
 		if (error)
 			goto out;
 
+#ifdef CONFIG_NEST_ALTSTACK
+		if (ss_flags & SS_ALLOW_NESTED) {
+			allow_nested = 1;
+			ss_flags &= ~SS_ALLOW_NESTED;
+		}
+#endif
+
 		error = -EPERM;
-		if (on_sig_stack(sp))
+		if (on_sig_stack(sp) && !allow_nested)
 			goto out;
 
 		error = -EINVAL;
-- 
1.7.0

