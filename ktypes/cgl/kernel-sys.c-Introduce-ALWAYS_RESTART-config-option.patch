From 278c092681595a7f095f897b9c1d12e4a944435e Mon Sep 17 00:00:00 2001
From: Yang Shi <yang.shi@windriver.com>
Date: Thu, 9 Jan 2014 08:37:14 -0800
Subject: [PATCH 1/8] kernel/sys.c: Introduce ALWAYS_RESTART config option

If enabled, Force the system to restart instead of halt or power
off.

Signed-off-by: Liming Wang <liming.wang@windriver.com>
Integrated-by: Yong Zhang <yong.zhang@windriver.com>
Signed-off-by: Joe MacDonald <joe.macdonald@windriver.com>
Signed-off-by: Yang Shi <yang.shi@windriver.com>
---
 init/Kconfig   |    9 +++++++++
 kernel/panic.c |    3 +++
 kernel/sys.c   |   12 ++++++++++++
 3 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/init/Kconfig b/init/Kconfig
index 0b5d0c8..79addfc 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1529,6 +1529,15 @@ config VM_EVENT_COUNTERS
 	  on EXPERT systems.  /proc/vmstat will only show page counts
 	  if VM event counters are disabled.
 
+config ALWAYS_RESTART
+	default n
+	bool "Force the system to restart instead of halt or power off"
+	help
+	  This effectively disables the ability for the system to halt.  Instead a
+	  restart will happen under any circumstances.  This is mostly of use to
+	  systems that need to come back up immediately regardless of the reason it
+	  went down (eg. unattended systems in remote locations).
+
 config SLUB_DEBUG
 	default y
 	bool "Enable SLUB debugging support" if EXPERT
diff --git a/kernel/panic.c b/kernel/panic.c
index 167ec09..86459c4 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -171,6 +171,9 @@ void panic(const char *fmt, ...)
 		disabled_wait(caller);
 	}
 #endif
+#ifdef CONFIG_ALWAYS_RESTART
+	machine_restart(NULL);
+#endif
 	local_irq_enable();
 	for (i = 0; ; i += PANIC_TIMER_STEP) {
 		touch_softlockup_watchdog();
diff --git a/kernel/sys.c b/kernel/sys.c
index 2bbd9a7..1bf9c88 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -425,9 +425,15 @@ void kernel_halt(void)
 	kernel_shutdown_prepare(SYSTEM_HALT);
 	migrate_to_reboot_cpu();
 	syscore_shutdown();
+#ifdef CONFIG_ALWAYS_RESTART
+	printk(KERN_EMERG "System restarting.\n");
+	kmsg_dump(KMSG_DUMP_RESTART);
+	machine_restart(NULL);
+#else
 	printk(KERN_EMERG "System halted.\n");
 	kmsg_dump(KMSG_DUMP_HALT);
 	machine_halt();
+#endif
 }
 
 EXPORT_SYMBOL_GPL(kernel_halt);
@@ -444,9 +450,15 @@ void kernel_power_off(void)
 		pm_power_off_prepare();
 	migrate_to_reboot_cpu();
 	syscore_shutdown();
+#ifdef CONFIG_ALWAYS_RESTART
+	printk(KERN_EMERG "System now powering down, restarting.\n");
+	kmsg_dump(KMSG_DUMP_RESTART);
+	machine_restart(NULL);
+#else
 	printk(KERN_EMERG "Power down.\n");
 	kmsg_dump(KMSG_DUMP_POWEROFF);
 	machine_power_off();
+#endif
 }
 EXPORT_SYMBOL_GPL(kernel_power_off);
 
-- 
1.7.5.4

