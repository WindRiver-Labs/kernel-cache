From f0cc4f03aceaca946d7461544c2118bf985ff8a3 Mon Sep 17 00:00:00 2001
From: He Zhe <zhe.he@windriver.com>
Date: Tue, 23 Dec 2014 16:05:50 +0800
Subject: [PATCH 01/10] kernel/sys.c: Introduce ALWAYS_RESTART config option

If enabled, Force the system to restart instead of halt or power
off.

Signed-off-by: Liming Wang <liming.wang@windriver.com>
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 init/Kconfig    |  9 +++++++++
 kernel/panic.c  |  3 +++
 kernel/reboot.c | 12 ++++++++++++
 3 files changed, 24 insertions(+)

diff --git a/init/Kconfig b/init/Kconfig
index 77d6d5f..3950cfb 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1756,6 +1756,15 @@ config VM_EVENT_COUNTERS
 	  on EXPERT systems.  /proc/vmstat will only show page counts
 	  if VM event counters are disabled.
 
+config ALWAYS_RESTART
+	default n
+	bool "Force the system to restart instead of halt or power off"
+	help
+	  This effectively disables the ability for the system to halt.  Instead a
+	  restart will happen under any circumstances.  This is mostly of use to
+	  systems that need to come back up immediately regardless of the reason it
+	  went down (eg. unattended systems in remote locations).
+
 config SLUB_DEBUG
 	default y
 	bool "Enable SLUB debugging support" if EXPERT
diff --git a/kernel/panic.c b/kernel/panic.c
index ca8cea1..7a3e98e 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -252,6 +252,9 @@ void panic(const char *fmt, ...)
 	}
 #endif
 	pr_emerg("---[ end Kernel panic - not syncing: %s\n", buf);
+#ifdef CONFIG_ALWAYS_RESTART
+	machine_restart(NULL);
+#endif
 	local_irq_enable();
 	for (i = 0; ; i += PANIC_TIMER_STEP) {
 		touch_softlockup_watchdog();
diff --git a/kernel/reboot.c b/kernel/reboot.c
index bd30a97..c8f5f2e 100644
--- a/kernel/reboot.c
+++ b/kernel/reboot.c
@@ -243,9 +243,15 @@ void kernel_halt(void)
 	kernel_shutdown_prepare(SYSTEM_HALT);
 	migrate_to_reboot_cpu();
 	syscore_shutdown();
+#ifdef CONFIG_ALWAYS_RESTART
+	pr_emerg("System restarting.\n");
+	kmsg_dump(KMSG_DUMP_RESTART);
+	machine_restart(NULL);
+#else
 	pr_emerg("System halted\n");
 	kmsg_dump(KMSG_DUMP_HALT);
 	machine_halt();
+#endif
 }
 EXPORT_SYMBOL_GPL(kernel_halt);
 
@@ -261,9 +267,15 @@ void kernel_power_off(void)
 		pm_power_off_prepare();
 	migrate_to_reboot_cpu();
 	syscore_shutdown();
+#ifdef CONFIG_ALWAYS_RESTART
+	pr_emerg("System now powering down, restarting.\n");
+	kmsg_dump(KMSG_DUMP_RESTART);
+	machine_restart(NULL);
+#else
 	pr_emerg("Power down\n");
 	kmsg_dump(KMSG_DUMP_POWEROFF);
 	machine_power_off();
+#endif
 }
 EXPORT_SYMBOL_GPL(kernel_power_off);
 
-- 
2.0.2

