From 5eba1ff743ce27e37599aef42ce178990e95ab58 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Mon, 19 Apr 2010 02:02:13 -0700
Subject: [PATCH 1/2] time: export high resolution timestamps

Add gethrtime() as a generic way to get a 64-bit timestamp.
The timestamp is set by arch-specific code and exported via
/proc. Current architecture support is powerpc and x86.

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: MacDonald, Joe <Joe.MacDonald@windriver.com>
Integrated-by: Yong Zhang <yong.zhang@windriver.com>
---
 arch/powerpc/include/asm/tbr_common.h |   52 +++++++++++++++++++++++++++++++++
 arch/powerpc/include/asm/time.h       |   30 +-----------------
 arch/powerpc/include/asm/timex.h      |   33 +++++++++++++++++++++
 arch/powerpc/kernel/time.c            |    3 ++
 arch/x86/include/asm/timex.h          |    6 ++++
 arch/x86/kernel/tsc.c                 |    3 ++
 include/linux/sysctl.h                |    1 +
 include/linux/time.h                  |    1 +
 kernel/sysctl.c                       |    7 ++++
 kernel/sysctl_binary.c                |    1 +
 kernel/time.c                         |    2 +
 11 files changed, 111 insertions(+), 28 deletions(-)
 create mode 100644 arch/powerpc/include/asm/tbr_common.h

diff --git a/arch/powerpc/include/asm/tbr_common.h b/arch/powerpc/include/asm/tbr_common.h
new file mode 100644
index 0000000..ad71913
--- /dev/null
+++ b/arch/powerpc/include/asm/tbr_common.h
@@ -0,0 +1,52 @@
+/*
+ * arch/powerpc/include/asm/tbr_common.h, High Resolution timestamp surport
+ *
+ * Copyright (c) 2006-2010 Wind River Systems, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+#ifndef _TBR_COMMON_H
+#define _TBR_COMMON_H
+
+#ifdef CONFIG_PPC64
+
+/* For compatibility, get_tbl() is defined as get_tb() on ppc64 */
+#define get_tbl		get_tb
+
+#else
+
+static inline unsigned long get_tbl(void)
+{
+#if defined(CONFIG_403GCX)
+	unsigned long tbl;
+	asm volatile("mfspr %0, 0x3dd" : "=r" (tbl));
+	return tbl;
+#else
+	return mftbl();
+#endif
+}
+
+static inline unsigned int get_tbu(void)
+{
+#ifdef CONFIG_403GCX
+	unsigned int tbu;
+	asm volatile("mfspr %0, 0x3dc" : "=r" (tbu));
+	return tbu;
+#else
+	return mftbu();
+#endif
+}
+#endif /* !CONFIG_PPC64 */
+
+#endif
diff --git a/arch/powerpc/include/asm/time.h b/arch/powerpc/include/asm/time.h
index 27ccb76..e681d08 100644
--- a/arch/powerpc/include/asm/time.h
+++ b/arch/powerpc/include/asm/time.h
@@ -24,6 +24,8 @@
 #include <asm/iseries/hv_call.h>
 #endif
 
+#include <asm/tbr_common.h>
+
 /* time.c */
 extern unsigned long tb_ticks_per_jiffy;
 extern unsigned long tb_ticks_per_usec;
@@ -61,35 +63,7 @@ struct div_result {
 #define __USE_RTC()	0
 #endif
 
-#ifdef CONFIG_PPC64
-
-/* For compatibility, get_tbl() is defined as get_tb() on ppc64 */
-#define get_tbl		get_tb
-
-#else
 
-static inline unsigned long get_tbl(void)
-{
-#if defined(CONFIG_403GCX)
-	unsigned long tbl;
-	asm volatile("mfspr %0, 0x3dd" : "=r" (tbl));
-	return tbl;
-#else
-	return mftbl();
-#endif
-}
-
-static inline unsigned int get_tbu(void)
-{
-#ifdef CONFIG_403GCX
-	unsigned int tbu;
-	asm volatile("mfspr %0, 0x3dc" : "=r" (tbu));
-	return tbu;
-#else
-	return mftbu();
-#endif
-}
-#endif /* !CONFIG_PPC64 */
 
 static inline unsigned int get_rtcl(void)
 {
diff --git a/arch/powerpc/include/asm/timex.h b/arch/powerpc/include/asm/timex.h
index c55e14f..934ebc9 100644
--- a/arch/powerpc/include/asm/timex.h
+++ b/arch/powerpc/include/asm/timex.h
@@ -1,6 +1,39 @@
 #ifndef _ASM_POWERPC_TIMEX_H
 #define _ASM_POWERPC_TIMEX_H
 
+#include <asm/tbr_common.h>
+
+#ifdef CONFIG_PPC64
+static inline unsigned long long gethrtime(void)
+{
+    return mftb();
+}
+#else
+/* Not sure how else to get a 64-bit value 32 bits at a time without
+ * having to do shifting.  There's probably some nice way to do it
+ * with assembly, but I don't know it.
+ */
+#define SUPPORT_HRTIME
+static inline unsigned long long gethrtime(void)
+{
+	union {
+		struct {
+			unsigned long high;
+			unsigned long low;
+		} words;
+		unsigned long long tbr;
+	} ts;
+	unsigned long high;
+
+	do {
+		high = get_tbu();
+		ts.words.low = get_tbl();
+		ts.words.high = get_tbu();
+	} while (high != ts.words.high);
+	return ts.tbr;
+}
+#endif
+
 #ifdef __KERNEL__
 
 /*
diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 1b16b9a..54eab4c 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -997,6 +997,9 @@ void __init time_init(void)
 	calc_cputime_factors();
 	setup_cputime_one_jiffy();
 
+	/* set the high res time frequency. */
+	hrt_khz = (tb_ticks_per_jiffy * HZ) / 1000;
+
 	/*
 	 * Calculate the length of each tick in ns.  It will not be
 	 * exactly 1e9/HZ unless ppc_tb_freq is divisible by HZ.
diff --git a/arch/x86/include/asm/timex.h b/arch/x86/include/asm/timex.h
index 1375cfc..4a300fe 100644
--- a/arch/x86/include/asm/timex.h
+++ b/arch/x86/include/asm/timex.h
@@ -9,4 +9,10 @@
 
 #define ARCH_HAS_READ_CURRENT_TIMER
 
+/* ecgl features use gethrtime() as a generic way to get a
+ * 64-bit timestamp.
+ */
+#define SUPPORT_HRTIME
+#define gethrtime() get_cycles()
+
 #endif /* _ASM_X86_TIMEX_H */
diff --git a/arch/x86/kernel/tsc.c b/arch/x86/kernel/tsc.c
index 9faf91a..2355de4 100644
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@ -937,6 +937,9 @@ void __init tsc_init(void)
 			(unsigned long)cpu_khz / 1000,
 			(unsigned long)cpu_khz % 1000);
 
+	/* for hrt frequency export */
+	hrt_khz = cpu_khz;
+
 	/*
 	 * Secondary CPUs do not run through tsc_init(), so set up
 	 * all the scale factors for all CPUs, assuming the same
diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index 476ad5f..1535d7d 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -155,6 +155,7 @@ enum
 	KERN_PANIC_ON_NMI=76, /* int: whether we will panic on an unrecovered */
 	KERN_NMI_TOGGLE=77, /* int: NMI on/off */
 	KERN_NMI_WATCHDOG_THRESH=78, /* int: nmi watchdog timedout threshold */
+	KERN_HRT_KHZ=79, /* int: high res time frequency in khz */
 };
 
 
diff --git a/include/linux/time.h b/include/linux/time.h
index 14e96fe..262fddf 100644
--- a/include/linux/time.h
+++ b/include/linux/time.h
@@ -107,6 +107,7 @@ extern int update_persistent_clock(struct timespec now);
 extern int no_sync_cmos_clock __read_mostly;
 void timekeeping_init(void);
 extern int timekeeping_suspended;
+extern int hrt_khz;
 
 unsigned long get_seconds(void);
 struct timespec current_kernel_time(void);
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 6f61ee5..477b212 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -951,6 +951,13 @@ static struct ctl_table kern_table[] = {
 		.proc_handler	= proc_dointvec,
 	},
 #endif
+	{
+		.procname	= "hrt-khz",
+		.data		= &hrt_khz,
+		.maxlen		= sizeof(int),
+		.mode		= 0444,
+		.proc_handler	= proc_dointvec,
+	},
 /*
  * NOTE: do not add new entries to this table unless you have read
  * Documentation/sysctl/ctl_unnumbered.txt
diff --git a/kernel/sysctl_binary.c b/kernel/sysctl_binary.c
index 416adaf..3f3aaf2 100644
--- a/kernel/sysctl_binary.c
+++ b/kernel/sysctl_binary.c
@@ -139,6 +139,7 @@ static const struct bin_table bin_kern_table[] = {
 	{ CTL_INT,	KERN_PANIC_ON_NMI,		"panic_on_unrecovered_nmi" },
 	{ CTL_INT,	KERN_NMI_TOGGLE,		"nmi_enabled" },
 	{ CTL_INT,	KERN_NMI_WATCHDOG_THRESH,	"nmi_watchdog_thresh" },
+	{ CTL_INT,	KERN_HRT_KHZ,			"hrt-khz" },
 	{}
 };
 
diff --git a/kernel/time.c b/kernel/time.c
index 656dccf..5d8fa42 100644
--- a/kernel/time.c
+++ b/kernel/time.c
@@ -43,6 +43,8 @@
 
 #include "timeconst.h"
 
+int hrt_khz = -1; /* set by arch-specific code, exported via /proc */
+
 /*
  * The timezone where the local system is located.  Used as a default by some
  * programs who obtain this value by using gettimeofday.
-- 
1.6.5.2

