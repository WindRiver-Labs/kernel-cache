From 28a06b647b1818221f4b15523a730248e1d0bb89 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Thu, 23 Jan 2014 16:54:26 +0800
Subject: [PATCH 4/4] cpu: make clear_tasks_mm_cpumask() lockless when
 iterating each thread

Because the caller of the function is running offline and
in atomic context, it's not possible to acquire task lock.

It's confirmed that getting rid of the lock is safe due to
the same reason as above. The reader of mm_cpumask() will
not mess up because:
There are three kinds of callers of mm_cpumask():
1) switch_mm(); this will not mess up with
   clear_tasks_mm_cpumask() because the two will not run at
   the same time.
2) tlb flush; this will not be affected by
   clear_tasks_mm_cpumask() because clear_tasks_mm_cpumask()
   is called when cpu is offline and the mechanism behind
   tlb flush (which is on_each_cpu) will exclude the
   offlined cpu.
3) others that checks if the current cpu is in mm_cpumask(),
   this doesn't matter because this only happens on the current
   cpu but clear_tasks_mm_cpumask() is called after everything is
   done.

Signed-off-by: Yong Zhang <yong.zhang@windriver.com>
---
 kernel/cpu.c |   16 +++++++---------
 1 files changed, 7 insertions(+), 9 deletions(-)

diff --git a/kernel/cpu.c b/kernel/cpu.c
index db1c046..38fa172 100644
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@ -444,6 +444,7 @@ EXPORT_SYMBOL(unregister_cpu_notifier);
 void clear_tasks_mm_cpumask(int cpu)
 {
 	struct task_struct *p;
+	struct task_struct *t;
 
 	/*
 	 * This function is called after the cpu is taken down and marked
@@ -453,15 +454,12 @@ void clear_tasks_mm_cpumask(int cpu)
 	 * full-fledged tasklist_lock.
 	 */
 	rcu_read_lock();
-	for_each_process(p) {
-		struct task_struct *t;
-
-		t = find_lock_task_mm(p);
-		if (!t)
-			continue;
-		cpumask_clear_cpu(cpu, mm_cpumask(t->mm));
-		task_unlock(t);
-	}
+	do_each_thread(p, t) {
+		if (likely(t->mm)) {
+			cpumask_clear_cpu(cpu, mm_cpumask(t->mm));
+			break;
+		}
+	} while_each_thread(p, t);
 	rcu_read_unlock();
 }
 
-- 
1.7.5.4

