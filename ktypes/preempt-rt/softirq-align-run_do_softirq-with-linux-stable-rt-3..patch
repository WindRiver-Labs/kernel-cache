From 1fba8f95b01629c121eb480b163310ecfc85e413 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Mon, 2 Feb 2015 15:43:10 +0800
Subject: [PATCH] softirq: align run_do_softirq with linux-stable-rt 3.4
 branch

commit 96c66e7a993a7bf630523a12d48b59636dbae617 ("softirq: Split softirq
locks") was originally taken from commit 448fc1cab4fa056d60477ee4aac5
in linux-stable-rt.git -- which was based on a 3.8-rt kernel.

If we look at that original linux-stable-rt commit, we see it adds
a run_ksoftirqd() near the top of the patch and removes the existing
run_ksoftirqd() near the bottom of the patch.  However 96c66e7a993a
has no such removal, and so duplicate run_ksoftirqd functions result.
This happens only when RT_FULL is not enabled.

However, if we look at linux-stable-rt v3.4-rt-features branch, we
see that the 3.4.x version of that commit, in commit 3424406bd15ace
does not lead off with the same added definition of run_ksoftirqd
and its helper function ksoftirqd_softirq_pending.  And of course
nor is there the removal at the end of the patch.  Instead only
the helper function is added further down in the patch.

Here we align this 3.4.x based kernel with the linux-stable-rt
v3.4-rt-features version of softirq.c in respect to this difference.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
---
 kernel/softirq.c |   23 +++++------------------
 1 files changed, 5 insertions(+), 18 deletions(-)

diff --git a/kernel/softirq.c b/kernel/softirq.c
index 55525c3..50df00c 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -213,11 +213,6 @@ static void handle_softirq(unsigned int vec_nr, int cpu, int need_rcu_bh_qs)
 }
 
 #ifndef CONFIG_PREEMPT_RT_FULL
-static inline int ksoftirqd_softirq_pending(void)
-{
-	return local_softirq_pending();
-}
-
 static void handle_pending_softirqs(u32 pending, int cpu, int need_rcu_bh_qs)
 {
 	unsigned int vec_nr;
@@ -230,19 +225,6 @@ static void handle_pending_softirqs(u32 pending, int cpu, int need_rcu_bh_qs)
 	local_irq_disable();
 }
 
-static void run_ksoftirqd(unsigned int cpu)
-{
-	local_irq_disable();
-	if (ksoftirqd_softirq_pending()) {
-		__do_softirq();
-		rcu_note_context_switch(cpu);
-		local_irq_enable();
-		cond_resched();
-		return;
-	}
-	local_irq_enable();
-}
-
 /*
  * preempt_count and SOFTIRQ_OFFSET usage:
  * - preempt_count is changed by SOFTIRQ_OFFSET on entering or leaving
@@ -486,6 +468,11 @@ static inline void _local_bh_enable_nort(void) { _local_bh_enable(); }
 static inline void ksoftirqd_set_sched_params(void) { }
 static inline void ksoftirqd_clr_sched_params(void) { }
 
+static inline int ksoftirqd_softirq_pending(void)
+{
+	return local_softirq_pending();
+}
+
 #else /* !PREEMPT_RT_FULL */
 
 /*
-- 
1.7.5.4

