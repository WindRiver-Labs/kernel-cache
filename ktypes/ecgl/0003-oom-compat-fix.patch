From 74ba65ae72cff19c2847e6ab4ab2e2a35f6d04a4 Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Wed, 3 Sep 2008 10:59:42 +0800
Subject: [PATCH] Improve handling of invalid OOM protect arguments.

It was possible to get unitialized results returned from
getrlimit/setrlimit calls with OOM_MAXVM flags if passed invalid options
and the limits had not been previously set.  This also corrects a minor
race condition in getrlimit where the structure to be filled out with
OOM_MAXVM data was copied from userspace, it would occasionally cause no
data to be returned.

Signed-off-by: Yongli he   <yongli.he@windriver.com>
Signed-off-by: MacDonald, Joe <Joe.MacDonald@windriver.com>
---
 kernel/compat.c      |    4 ++++
 kernel/oom-protect.c |    8 +-------
 kernel/sys.c         |   29 +++++++++++++++++++++--------
 3 files changed, 26 insertions(+), 15 deletions(-)

diff --git a/kernel/compat.c b/kernel/compat.c
index 32c254a..590c584 100644
--- a/kernel/compat.c
+++ b/kernel/compat.c
@@ -273,6 +273,10 @@ asmlinkage long compat_sys_old_getrlimit(unsigned int resource,
 	int ret;
 	mm_segment_t old_fs = get_fs();
 
+#ifdef CONFIG_OOM_PROTECT
+   if (resource == RLIMIT_OOM_MAXVM)
+      printk(KERN_CRIT "OOM_PROTECT:fatal in %s:%d\n",__FILE__,__LINE__);
+#endif /* CONFIG_OOM_PROTECT */
 	set_fs(KERNEL_DS);
 	ret = sys_old_getrlimit(resource, &r);
 	set_fs(old_fs);
diff --git a/kernel/oom-protect.c b/kernel/oom-protect.c
index 6528170..5d3817e 100644
--- a/kernel/oom-protect.c
+++ b/kernel/oom-protect.c
@@ -45,15 +45,10 @@ int do_oom_protect(unsigned long arg)
 	ret = -EINVAL;
 	task_lock(p);
 	if (!p->mm)
-	{
-		printk(KERN_EMERG "do_oom_protect():!p->mm\n");
 		goto task_unlock_out;
-	}
 
 	switch (args.cmd) {
 		case SET_OOM_PROTECT:
-			printk(KERN_EMERG "do_oom_protect():SET_OOM_PROTECT\n");
-
 			if (p->mm->oom_protect_bytes > args.max_vm_bytes)
 			{
 				/* The standard setrlimit() code seems to choose to barf if you
@@ -67,8 +62,6 @@ int do_oom_protect(unsigned long arg)
 			break;
 
 		case QUERY_OOM_PROTECT:
-			printk(KERN_EMERG "do_oom_protect():QUERY_OOM_PROTECT\n");
-
 			args.max_vm_bytes = p->mm->oom_protect_bytes;
 
 			if (copy_to_user((struct set_oom_protect_info __user *) arg,
@@ -81,6 +74,7 @@ int do_oom_protect(unsigned long arg)
 			break;
 
 		default:
+			printk(KERN_WARNING "do_oom_protect: args.cmd: %d\n",args.cmd);
 			ret = -EINVAL;
 			break;
 	}
diff --git a/kernel/sys.c b/kernel/sys.c
index 3f18fde..3a4ef5d 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -1423,12 +1423,15 @@ asmlinkage long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim)
 		/* Some special handling is required for the OOM protection
 		 * information since it passes structures, not integers */
 		if (resource == RLIMIT_OOM_MAXVM) {
-			struct set_oom_protect_info limit;
-			if(copy_from_user(&value, rlim, sizeof(*rlim)))
-				return -EFAULT;
-			if (!do_oom_protect(value.rlim_cur))
-				return copy_to_user(rlim, &value,
-						    sizeof(*rlim))?-EFAULT:0;
+			task_lock(current->group_leader);
+			value = current->signal->rlim[resource];
+			task_unlock(current->group_leader);
+
+			if (!do_oom_protect(value.rlim_cur)) {
+				return copy_to_user(rlim, &value.rlim_cur,
+						    sizeof(rlim))?-EFAULT:0;
+			}
+
 		}
 #endif /* CONFIG_OOM_PROTECT */
 		task_lock(current->group_leader);
@@ -1450,6 +1453,14 @@ asmlinkage long sys_old_getrlimit(unsigned int resource, struct rlimit __user *r
 	if (resource >= RLIM_NLIMITS)
 		return -EINVAL;
 
+#ifdef CONFIG_OOM_PROTECT
+	/* jjmac: (2006.12.15)
+	 * Never seen this happen, but if it does, we need to know about it */
+	if (resource == RLIMIT_OOM_MAXVM) {
+		printk(KERN_CRIT "OOM_PROTECT:fatal in %s:%d\n",__FILE__,__LINE__);
+	}
+#endif
+
 	task_lock(current->group_leader);
 	x = current->signal->rlim[resource];
 	task_unlock(current->group_leader);
@@ -1480,8 +1491,10 @@ asmlinkage long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim)
 	if (resource == RLIMIT_OOM_MAXVM) {
 		/* Special handling for the OOM-protection bits, where the
 		 * rlim_max and rlim_cur values are pointers to structures. */
-		printk(KERN_EMERG "OOM_MAXVM limit set.\n");
-		return do_oom_protect(new_rlim.rlim_max);
+		retval = do_oom_protect(new_rlim.rlim_max);
+		if (!retval)
+			current->signal->rlim[resource].rlim_cur = new_rlim.rlim_max;
+		return retval;
 	}
 #endif /* CONFIG_OOM_PROTECT */
 
-- 
1.5.5.1

