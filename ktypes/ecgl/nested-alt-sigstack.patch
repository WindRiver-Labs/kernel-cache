From b76cc68c5c1c59ad25c03a16ef4bb55937039873 Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Fri, 26 Dec 2008 15:59:45 +0800
Subject: [PATCH] nested alt sigstack

allow apps to call sigaltstack from a signal handler already
running with an alternate stack

Signed-off-by: Yongli He <yongli.he@windriver.com>
---
 arch/powerpc/include/asm/signal.h |    1 +
 include/asm-x86/signal.h          |    1 +
 arch/sparc/include/asm/signal_64.h |    1 +
 init/Kconfig                      |   10 ++++++++++
 kernel/signal.c                   |   10 +++++++++-
 5 files changed, 22 insertions(+), 1 deletions(-)

diff --git a/arch/powerpc/include/asm/signal.h b/arch/powerpc/include/asm/signal.h
index a7360cd..2830e28 100644
--- a/arch/powerpc/include/asm/signal.h
+++ b/arch/powerpc/include/asm/signal.h
@@ -90,6 +90,7 @@ typedef struct {
  */
 #define SS_ONSTACK	1
 #define SS_DISABLE	2
+#define SS_ALLOW_NESTED 0x4000
 
 #define MINSIGSTKSZ	2048
 #define SIGSTKSZ	8192
diff --git a/include/asm-x86/signal.h b/include/asm-x86/signal.h
index 6dac493..985ecac 100644
--- a/include/asm-x86/signal.h
+++ b/include/asm-x86/signal.h
@@ -113,6 +113,7 @@ typedef unsigned long sigset_t;
  */
 #define SS_ONSTACK	1
 #define SS_DISABLE	2
+#define SS_ALLOW_NESTED 0x4000
 
 #define MINSIGSTKSZ	2048
 #define SIGSTKSZ	8192
diff --git a/arch/sparc/include/asm/signal_64.h b/arch/sparc/include/asm/signal_64.h
index ab1509a..289307b 100644
--- a/arch/sparc/include/asm/signal_64.h
+++ b/arch/sparc/include/asm/signal_64.h
@@ -153,6 +153,7 @@ struct sigstack {
 #define SS_ONSTACK	1
 #define SS_DISABLE	2
 
+#define SS_ALLOW_NESTED 0x4000
 #define MINSIGSTKSZ	4096
 #define SIGSTKSZ	16384
 
diff --git a/init/Kconfig b/init/Kconfig
index 2cd43b6..1e1e3fb 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1032,6 +1032,16 @@ config OOM_PROTECT
           the process is using less than the specified amount of virtual
           memory.  This is accomplished through a call to setrlimit().
 
+config NEST_ALTSTACK
+	bool "Enable nested sigaltstack manipulations"
+	default y
+	help
+	  Enabling this will allow apps to call sigaltstack from a signal
+	  handler already running with an alternate stack.  To enable nested
+	  sigaltstack calls, specify SS_ALLOW_NESTED in addition to whatever
+	  flags you were going to use in the "ss" parameter to the sigaltstack()
+	  syscall.
+
 endmenu		# General setup
 
 config HAVE_GENERIC_DMA_COHERENT
diff --git a/kernel/signal.c b/kernel/signal.c
index 21eabf1..0253a78 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -2394,6 +2394,7 @@ do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long s
 {
 	stack_t oss;
 	int error;
+	int allow_nested = 0;
 
 	if (uoss) {
 		oss.ss_sp = (void __user *) current->sas_ss_sp;
@@ -2413,8 +2414,15 @@ do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long s
 		    || __get_user(ss_size, &uss->ss_size))
 			goto out;
 
+#ifdef CONFIG_NEST_ALTSTACK
+		if (ss_flags & SS_ALLOW_NESTED) {
+			allow_nested = 1;
+			ss_flags &= ~SS_ALLOW_NESTED;
+		}
+#endif
+
 		error = -EPERM;
-		if (on_sig_stack(sp))
+		if (on_sig_stack(sp) && !allow_nested)
 			goto out;
 
 		error = -EINVAL;
-- 
1.6.0.2.GIT

