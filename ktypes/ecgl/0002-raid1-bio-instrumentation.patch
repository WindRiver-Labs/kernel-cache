From 830bcca3521390b7a1c1a032c61fde40cc697cd9 Mon Sep 17 00:00:00 2001
From: Yongli He <yongli.he@windriver.com>
Date: Thu, 4 Sep 2008 14:50:41 +0800
Subject: [PATCH] raid1 bio instrumentation

Should the for loop in raid1_end_write_request not terminate properly and
should we end up with an invalid index of the mirror device, this
instrumentation will trigger and dump all involved struct bio's, the
r1bio_t, and the mddev.

Two software RAID1 arrays were created with two partitions each. One VLM
volume was created that spanned both arrays. The printk were added to the
normal code path so that they were hit on every invocation of
raid1_end_write_request.

Signed-off-by: Chris Eineke  <chris.eineke@windriver.com>
Integrated-by: Yongli he   <yongli.he@windriver.com>
---
 drivers/md/raid1.c |  105 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 105 insertions(+), 0 deletions(-)

diff --git a/drivers/md/raid1.c b/drivers/md/raid1.c
index 747597b..d1b47dc 100644
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -255,6 +255,103 @@ static inline void update_head_pos(int disk, r1bio_t *r1_bio)
 		r1_bio->sector + (r1_bio->sectors);
 }
 
+#if RAID1_INSTRUMENTATION
+
+#define indent_printk(indentation_level, format_string, ...) \
+	printk(KERN_DEBUG "%*s" format_string, indent_level, " ", ##__VA_ARGS__)
+
+#define MAX_DUMP_BIO_RECURSION 32
+
+#define printk_struct_field(field_name, format_specifier) \
+	indent_printk(indent_level, "" # field_name \
+			": " # format_specifier \
+			"\n", field_name)
+
+void dump_bio_iter(struct bio *bio, int indent_level)
+{
+	if (!bio) {
+		printk(KERN_DEBUG "not printing bio: it's NULL\n");
+		return;
+	}
+
+	if (indent_level == MAX_DUMP_BIO_RECURSION) {
+		printk(KERN_DEBUG "hit recursion limit. aborting.\n");
+		return;
+	}
+
+	indent_printk(indent_level, "struct bio: %p\n", bio);
+	printk_struct_field(bio->bi_sector, %ld);
+	printk_struct_field(bio->bi_next, %p);
+	printk_struct_field(bio->bi_bdev, %p);
+	printk_struct_field(bio->bi_flags, %lu);
+	printk_struct_field(bio->bi_rw, %lu);
+	printk_struct_field(bio->bi_vcnt, %d);
+	printk_struct_field(bio->bi_idx, %d);
+	printk_struct_field(bio->bi_phys_segments, %d);
+	printk_struct_field(bio->bi_hw_segments, %d);
+	printk_struct_field(bio->bi_size, %d);
+	printk_struct_field(bio->bi_hw_front_size, %d);
+	printk_struct_field(bio->bi_hw_back_size, %d);
+	printk_struct_field(bio->bi_max_vecs, %d);
+
+	printk_struct_field(bio->bi_io_vec, %p);
+	if (!bio->bi_io_vec) {
+		printk(KERN_DEBUG "not printing bio_vec: it's NULL\n");
+	} else {
+		int i;
+		for (i = 0; i < bio->bi_vcnt; i++) {
+			indent_printk(indent_level, "i: %d\n", i);
+			printk_struct_field(bio->bi_io_vec[i].bv_page, %p);
+			printk_struct_field(bio->bi_io_vec[i].bv_len, %d);
+			printk_struct_field(bio->bi_io_vec[i].bv_offset, %d);
+		}
+	}
+	printk_struct_field(bio->bi_end_io, %p);
+	printk_struct_field(atomic_read(&bio->bi_cnt), %d);
+	printk_struct_field(bio->bi_private, %p);
+	printk_struct_field(bio->bi_destructor, %p);
+
+	if (bio->bi_next && (bio->bi_next != bio)) {
+		dump_bio_iter(bio->bi_next, indent_level + 1);
+	}
+}
+
+void dump_bio(struct bio *bio) { dump_bio_iter(bio, 0); }
+
+void dump_r1bio_t(r1bio_t *r1_bio, int raid_disks)
+{
+	int i;
+	int indent_level = 0;
+
+	if (!r1_bio) {
+		printk(KERN_DEBUG "not printing r1_bio: it's NULL\n");
+		return;
+	}
+
+	printk_struct_field(atomic_read(&r1_bio->remaining), %d);
+	printk_struct_field(r1_bio->state, %ld);
+	printk_struct_field(r1_bio->read_disk, %d);
+	for (i = 0; i < raid_disks; i++) {
+		printk(KERN_DEBUG "contents of r1_bio->bios[%d]:\n", i);
+		dump_bio(r1_bio->bios[i]);
+	}
+	printk_struct_field(r1_bio->master_bio, %p);
+	dump_bio(r1_bio->master_bio);
+}
+
+void dump_mddev_t(mddev_t* mddev)
+{
+	int indent_level = 0;
+
+	if (!mddev) {
+		printk(KERN_DEBUG "not printing mddev: it's NULL\n");
+		return;
+	}
+	printk_struct_field(mddev->ro, %d\n);
+}
+
+#endif
+
 static void raid1_end_read_request(struct bio *bio, int error)
 {
 	int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
@@ -328,6 +425,14 @@ static void raid1_end_write_request(struct bio *bio, int error)
 				"[mirror=%d,conf->raid_disks=%d]\n", cpu,
 				mirror, conf->raid_disks);
 		MD_BUG();
+
+		printk(KERN_DEBUG "contents of passed in bio:\n");
+		dump_bio(bio);
+		printk(KERN_DEBUG "partial contents of r1_bio:\n");
+		dump_r1bio_t(r1_bio, raid_disks);
+		printk(KERN_DEBUG "partial contents of r1_bio->mddev:\n");
+		dump_mddev_t(r1_bio->mddev);
+
 		put_cpu();
 		kcore_logoff();
 	}
-- 
1.5.5.1

