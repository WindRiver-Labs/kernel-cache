From 189741566a5c3beb36f2045aed052cd9203d09fa Mon Sep 17 00:00:00 2001
From: Lans Zhang <jia.zhang@windriver.com>
Date: Thu, 19 Aug 2010 12:50:43 +0800
Subject: [PATCH] fix kernel panic due to invalid syscall

[audit] fix kernel panic due to invalid syscall

A program making a syscall with an invalid syscall number can cause kernel
panic. The audit code uses a hash table with syscall number used to index
hash table, but it only handles up to 2048 entries. Therefore, with a large
syscall number, an invalid bucket in the hash table is accessed, and the kernel
panics or sometimes just hangs(which is worse). To fix the problem, just add
the range check for syscall number. Additionally, we need a NR_syscalls macro
for sparc, because the check is placed at common area and other architectures
all have NR_syscalls. Also, mips need it as well due to AUDITSYSCALL enabled
under cgl configuration.

Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
---
 arch/sparc/include/asm/unistd_32.h |    1 +
 arch/sparc/include/asm/unistd_64.h |    1 +
 include/asm-mips/unistd.h          |    2 ++
 kernel/auditsc.c                   |    3 +++
 4 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/arch/sparc/include/asm/unistd_32.h b/arch/sparc/include/asm/unistd_32.h
index ef924f4..9e1140c 100644
--- a/arch/sparc/include/asm/unistd_32.h
+++ b/arch/sparc/include/asm/unistd_32.h
@@ -342,6 +342,7 @@
 #define __NR_trace		324
 
 #define NR_SYSCALLS		325
+#define NR_syscalls        NR_SYSCALLS
 
 /* Sparc 32-bit only has the "setresuid32", "getresuid32" variants,
  * it never had the plain ones and there is no value to adding those
diff --git a/arch/sparc/include/asm/unistd_64.h b/arch/sparc/include/asm/unistd_64.h
index bd830d8..d1cbef0 100644
--- a/arch/sparc/include/asm/unistd_64.h
+++ b/arch/sparc/include/asm/unistd_64.h
@@ -344,6 +344,7 @@
 #define __NR_trace		324
 
 #define NR_SYSCALLS		325
+#define NR_syscalls        NR_SYSCALLS
 
 #ifdef __KERNEL__
 #define __ARCH_WANT_IPC_PARSE_VERSION
diff --git a/include/asm-mips/unistd.h b/include/asm-mips/unistd.h
index a73e153..84c6b54 100644
--- a/include/asm-mips/unistd.h
+++ b/include/asm-mips/unistd.h
@@ -1033,5 +1033,7 @@
  */
 #define cond_syscall(x) asm(".weak\t" #x "\n" #x "\t=\tsys_ni_syscall")
 
+#define NR_syscalls    __NR_Linux_syscalls
+
 #endif /* __KERNEL__ */
 #endif /* _ASM_UNISTD_H */
diff --git a/kernel/auditsc.c b/kernel/auditsc.c
index 59cedfb..a981d34 100644
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@ -1484,6 +1484,9 @@ void audit_syscall_entry(int arch, int major,
 	struct audit_context *context = tsk->audit_context;
 	enum audit_state     state;
 
+	if (unlikely(major >= NR_syscalls || major < 0))
+		return;
+
 	if (unlikely(!context))
 		return;
 
-- 
1.7.0.4

