From 6f379918159c12874598636c66424ec1ca1086b5 Mon Sep 17 00:00:00 2001
From: Liang Li <liang.li@windriver.com>
Date: Mon, 18 Jul 2011 17:39:21 +0800
Subject: [PATCH 2/3] wrhv: x86: syscall wireups for x86 WR guest support

These x86 specific additions represent additions that are
not part of the reference VBI implementation.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>
Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
Signed-off-by: Liang Li <liang.li@windriver.com>
---
 arch/x86/include/asm/unistd_32.h   |   10 +++++++++-
 arch/x86/include/asm/unistd_64.h   |   11 +++++++++++
 arch/x86/kernel/syscall_table_32.S |    3 +++
 3 files changed, 23 insertions(+), 1 deletions(-)

diff --git a/arch/x86/include/asm/unistd_32.h b/arch/x86/include/asm/unistd_32.h
index 6b8c575..489e7f5 100644
--- a/arch/x86/include/asm/unistd_32.h
+++ b/arch/x86/include/asm/unistd_32.h
@@ -344,10 +344,18 @@
 #define __NR_perf_event_open	336
 #define __NR_recvmmsg		337
 #define __NR_revokeat		338
+#define __NR_vbi_mem		339
+#define __NR_vbi_activate_vb	340
+#define __NR_vbi_control	341
+#define VBI_MEM_READ		0x0010
+#define VBI_MEM_WRITE		0x0100
+#define SYS_VBI_VB_SUSPEND	0x10001
+#define SYS_VBI_VB_RESUME	0x20002
+#define SYS_VBI_VB_RESTART	0x40004
 
 #ifdef __KERNEL__
 
-#define NR_syscalls 339
+#define NR_syscalls 342
 
 #define __ARCH_WANT_IPC_PARSE_VERSION
 #define __ARCH_WANT_OLD_READDIR
diff --git a/arch/x86/include/asm/unistd_64.h b/arch/x86/include/asm/unistd_64.h
index ff4307b..0491dda 100644
--- a/arch/x86/include/asm/unistd_64.h
+++ b/arch/x86/include/asm/unistd_64.h
@@ -663,6 +663,17 @@ __SYSCALL(__NR_rt_tgsigqueueinfo, sys_rt_tgsigqueueinfo)
 __SYSCALL(__NR_perf_event_open, sys_perf_event_open)
 #define __NR_recvmmsg				299
 __SYSCALL(__NR_recvmmsg, sys_recvmmsg)
+#define __NR_vbi_mem				300
+__SYSCALL(__NR_vbi_mem, sys_vbi_mem)
+#define __NR_vbi_activate_vb			301
+__SYSCALL(__NR_vbi_activate_vb, sys_vbi_activate_vb)
+#define __NR_vbi_control			302
+__SYSCALL(__NR_vbi_control, sys_vbi_control)
+#define VBI_MEM_READ           0x0010
+#define VBI_MEM_WRITE          0x0100
+#define SYS_VBI_VB_SUSPEND	0x10001
+#define SYS_VBI_VB_RESUME	0x20002
+#define SYS_VBI_VB_RESTART	0x40004
 
 #ifndef __NO_STUBS
 #define __ARCH_WANT_OLD_READDIR
diff --git a/arch/x86/kernel/syscall_table_32.S b/arch/x86/kernel/syscall_table_32.S
index d79676a..358b1aa 100644
--- a/arch/x86/kernel/syscall_table_32.S
+++ b/arch/x86/kernel/syscall_table_32.S
@@ -338,3 +338,6 @@ ENTRY(sys_call_table)
 	.long sys_perf_event_open
 	.long sys_recvmmsg
 	.long sys_revokeat
+	.long sys_vbi_mem		/* 339 */
+	.long sys_vbi_activate_vb	/* 340 */
+	.long sys_vbi_control		/* 341 */
-- 
1.7.0.4

