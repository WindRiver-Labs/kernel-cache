From bcbea29a8fc4fe914b1b52814bd8ff7d75fca900 Mon Sep 17 00:00:00 2001
From: Weixing Shi <Weixing.Shi@windriver.com>
Date: Fri, 22 Aug 2008 15:22:12 +0800
Subject: malta uhci quirks: make allowance for slow 4k(e)c

This works around an unexpected IRQ #255 seen during initial USB host
mass storage device initialization and access.
* wait up to 50us for HCRESET to clear, a slow 4kc needs a longer time.
* leave FSBR enabled so that a slow 4kec/24kec will not be overwhelmed.

Signed-off-by: <weixing.shil@windriver.com> Weixing Shi
Signed-off-by: <bruce.ashfield@windriver.com> Bruce Ashfield
---
 drivers/usb/host/pci-quirks.c |   13 +++++++++++--
 drivers/usb/host/uhci-q.c     |    4 +++-
 2 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/host/pci-quirks.c b/drivers/usb/host/pci-quirks.c
index ae6e70e..5ef25db 100644
--- a/drivers/usb/host/pci-quirks.c
+++ b/drivers/usb/host/pci-quirks.c
@@ -58,6 +58,9 @@
  */
 void uhci_reset_hc(struct pci_dev *pdev, unsigned long base)
 {
+#ifdef CONFIG_MIPS_MALTA
+	int timeout = 10;
+#endif
 	/* Turn off PIRQ enable and SMI enable.  (This also turns off the
 	 * BIOS's USB Legacy Support.)  Turn off all the R/WC bits too.
 	 */
@@ -71,9 +74,15 @@ void uhci_reset_hc(struct pci_dev *pdev, unsigned long base)
 	outw(UHCI_USBCMD_HCRESET, base + UHCI_USBCMD);
 	mb();
 	udelay(5);
-	if (inw(base + UHCI_USBCMD) & UHCI_USBCMD_HCRESET)
-		dev_warn(&pdev->dev, "HCRESET not completed yet!\n");
 
+#ifdef CONFIG_MIPS_MALTA
+	while (inw(base + UHCI_USBCMD) & UHCI_USBCMD_HCRESET) {
+	        if (--timeout < 0) {
+        		dev_warn(&pdev->dev, "HCRESET timed out!\n"); break;
+        	}
+       		udelay(5);
+	}
+#endif
 	/* Just to be safe, disable interrupt requests and
 	 * make sure the controller is stopped.
 	 */
diff --git a/drivers/usb/host/uhci-q.c b/drivers/usb/host/uhci-q.c
index db64593..5ff1a6f 100644
--- a/drivers/usb/host/uhci-q.c
+++ b/drivers/usb/host/uhci-q.c
@@ -71,7 +71,9 @@ static void uhci_fsbr_off(struct uhci_hcd *uhci)
 static void uhci_add_fsbr(struct uhci_hcd *uhci, struct urb *urb)
 {
 	struct urb_priv *urbp = urb->hcpriv;
-
+#ifdef CONFIG_MIPS_MALTA
+       return;
+#endif
 	if (!(urb->transfer_flags & URB_NO_FSBR))
 		urbp->fsbr = 1;
 }
-- 
1.5.5.1

