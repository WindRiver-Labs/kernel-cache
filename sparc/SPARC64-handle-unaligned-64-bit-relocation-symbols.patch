From f589375041474ec919ec15544cfe25b567da2b62 Mon Sep 17 00:00:00 2001
From: Hong H. Pham <hong.pham@windriver.com>
Date: Wed, 5 Nov 2008 14:41:15 -0500
Subject: [PATCH] SPARC64 handle unaligned 64 bit relocation symbols

Handle unaligned 64 bit symbols when loading kernel modules.

Chaning the "unsigned int" members to "unsigned long" in struct __imv
in arch/sparc/include/asm/immediate.h changed the alignment requirements.
The linker changed the __imv relocation type from R_SPARC_UA32 to R_SPARC_UA64
to reflect the alignment requirement for a 64 bit long.

Signed-off-by: Hong H. Pham <hong.pham@windriver.com>
---
 arch/sparc/include/asm/elf_64.h |    1 +
 arch/sparc64/kernel/module.c    |    1 +
 2 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/arch/sparc/include/asm/elf_64.h b/arch/sparc/include/asm/elf_64.h
index cdc8f6d..fa40dfc 100644
--- a/arch/sparc/include/asm/elf_64.h
+++ b/arch/sparc/include/asm/elf_64.h
@@ -52,16 +52,17 @@
 #define R_SPARC_11		31
 #define R_SPARC_64		32
 #define R_SPARC_OLO10		33
 #define R_SPARC_WDISP16		40
 #define R_SPARC_WDISP19		41
 #define R_SPARC_7		43
 #define R_SPARC_5		44
 #define R_SPARC_6		45
+#define R_SPARC_UA64		54
 
 /* Bits present in AT_HWCAP, primarily for Sparc32.  */
 
 #define HWCAP_SPARC_FLUSH       1    /* CPU supports flush instruction. */
 #define HWCAP_SPARC_STBAR       2
 #define HWCAP_SPARC_SWAP        4
 #define HWCAP_SPARC_MULDIV      8
 #define HWCAP_SPARC_V9		16
diff --git a/arch/sparc64/kernel/module.c b/arch/sparc64/kernel/module.c
index 5bcbc1b..72c30b9 100644
--- a/arch/sparc64/kernel/module.c
+++ b/arch/sparc64/kernel/module.c
@@ -120,16 +120,17 @@ int apply_relocate_add(Elf64_Shdr *sechdrs,
 		/* This is the symbol it is referring to.  Note that all
 		   undefined symbols have been resolved.  */
 		sym = (Elf64_Sym *)sechdrs[symindex].sh_addr
 			+ ELF64_R_SYM(rel[i].r_info);
 		v = sym->st_value + rel[i].r_addend;
 
 		switch (ELF64_R_TYPE(rel[i].r_info) & 0xff) {
 		case R_SPARC_64:
+		case R_SPARC_UA64:
 			location[0] = v >> 56;
 			location[1] = v >> 48;
 			location[2] = v >> 40;
 			location[3] = v >> 32;
 			location[4] = v >> 24;
 			location[5] = v >> 16;
 			location[6] = v >>  8;
 			location[7] = v >>  0;
-- 
1.5.5.1

