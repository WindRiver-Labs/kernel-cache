In the course of investigating a GCC test failure on SPARC I found it 
appears it may be caused by buggy emulation of the pdist instruction in 
the SPARC64 kernel.  The emulation code uses RS1(insn) for both source 
registers rs1 and rs2, which is obviously wrong and leads to the 
instruction doing nothing (the observed problem), and further inspection 
of the code shows that RS1 uses a shift of 24 and RD a shift of 25, which 
clearly cannot both be right; examining SPARC documentation indicates the 
correct shift for RS1 is 14.

If you agree with this analysis, could you send me a SPARC kernel binary 
with this patch applied?  (The patch is against the last version of kernel 
sources you sent us for kernel headers, but the file in question hasn't 
changed upstream since 2006.)  The kernel we currently have is

Linux version 2.6.26-WR2.0zz_standard (vtran@zion) (gcc version 4.1.2 
(Wind River Linux Sourcery G++ 4.1-112)) #2 SMP PREEMPT Tue Jul 29 
11:52:16 EDT 2008

and if there will be other changes beyond this patch it would probably be 
best to send us kernel module binaries as well.

If this patch does indeed prove to fix the problem when I do testing with 
the updated kernel binary, I'll send it upstream, and let you know so you 
can make sure it goes in the WRS Linux kernel sources until you're using 
an upstream version with it in.

Index: arch/sparc64/kernel/visemul.c
===================================================================
--- a/arch/sparc64/kernel/visemul.c	(revision 217997)
+++ b/arch/sparc64/kernel/visemul.c	(working copy)
@@ -131,7 +131,7 @@
 #define VIS_OPF_SHIFT	5
 #define VIS_OPF_MASK	(0x1ff << VIS_OPF_SHIFT)
 
-#define RS1(INSN)	(((INSN) >> 24) & 0x1f)
+#define RS1(INSN)	(((INSN) >> 14) & 0x1f)
 #define RS2(INSN)	(((INSN) >>  0) & 0x1f)
 #define RD(INSN)	(((INSN) >> 25) & 0x1f)
 
@@ -445,7 +445,7 @@
 	unsigned long i;
 
 	rs1 = fpd_regval(f, RS1(insn));
-	rs2 = fpd_regval(f, RS1(insn));
+	rs2 = fpd_regval(f, RS2(insn));
 	rd = fpd_regaddr(f, RD(insn));
 
 	rd_val = *rd;

-- 
Joseph S. Myers
joseph@codesourcery.com
