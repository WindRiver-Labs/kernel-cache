From 6d6f92eb0c26eabf7a8716e282252abdddebb108 Mon Sep 17 00:00:00 2001
From: Josh Wu <josh.wu@atmel.com>
Date: Wed, 13 Jun 2012 17:28:40 +0800
Subject: input: at91: add dt support for atmel touch screen adc controller.

Signed-off-by: Josh Wu <josh.wu@atmel.com>
---
 drivers/input/touchscreen/atmel_tsadcc.c | 86 ++++++++++++++++++++++++++++++--
 1 file changed, 82 insertions(+), 4 deletions(-)

diff --git a/drivers/input/touchscreen/atmel_tsadcc.c b/drivers/input/touchscreen/atmel_tsadcc.c
index 397d17a..021f87e 100644
--- a/drivers/input/touchscreen/atmel_tsadcc.c
+++ b/drivers/input/touchscreen/atmel_tsadcc.c
@@ -40,6 +40,8 @@ struct atmel_tsadcc {
 	unsigned int		prev_absx;
 	unsigned int		prev_absy;
 	unsigned int		prev_absz;
+
+	struct at91_tsadcc_data board;
 };
 
 static void __iomem		*tsc_base;
@@ -62,7 +64,7 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 {
 	struct atmel_tsadcc	*ts_dev = (struct atmel_tsadcc *)dev;
 	struct input_dev	*input_dev = ts_dev->input;
-	struct at91_tsadcc_data *pdata = input_dev->dev.parent->platform_data;
+	struct at91_tsadcc_data *pdata = &ts_dev->board;
 
 	unsigned int status;
 	unsigned int reg;
@@ -172,6 +174,63 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 	return IRQ_HANDLED;
 }
 
+#if defined(CONFIG_OF)
+static int __devinit atmel_of_init_tsadcc(struct device_node *np,
+				struct at91_tsadcc_data *pdata,
+				struct platform_device *pdev)
+{
+	u32 val;
+
+	if (of_property_read_u32(np, "atmel,tsadcc_clock", &val) == 0)
+		pdata->adc_clock = val;
+
+	if (of_property_read_u32(np, "atmel,filtering_average", &val) == 0) {
+		if (val > 0x03) {
+			dev_err(&pdev->dev, "invalid touch average setting, 0x%02x\n",
+				val);
+			return -EINVAL;
+		}
+		pdata->filtering_average = (u8)val;
+	}
+
+	if (of_property_read_u32(np, "atmel,pendet_debounce", &val) == 0) {
+		if (val > 0x0f) {
+			dev_err(&pdev->dev, "invalid pen detect debounce, 0x%02x\n",
+				val);
+			return -EINVAL;
+		}
+		pdata->pendet_debounce = (u8)val;
+	}
+
+	if (of_property_read_u32(np, "atmel,pendet_sensitivity", &val) == 0) {
+		if (val > 0x03) {
+			dev_err(&pdev->dev, "invalid pen detective sensitivity setting, 0x%02x\n",
+				val);
+			return -EINVAL;
+		}
+		pdata->pendet_sensitivity = (u8)val;
+	}
+
+	if (of_property_read_u32(np, "atmel,ts_sample_hold_time", &val) == 0) {
+		if (val > 0x0f) {
+			dev_err(&pdev->dev, "invalid ts sample hold time, 0x%02x\n",
+				val);
+			return -EINVAL;
+		}
+		pdata->ts_sample_hold_time = (u8)val;
+	}
+
+	return 0;
+}
+#else
+static int __devinit atmel_of_init_tsadcc(struct device_node *np,
+				struct at91_tsadcc_data *pdata,
+				struct platform_device *pdev)
+{
+	return -EINVAL;
+}
+#endif
+
 /*
  * The functions for inserting/removing us as a module.
  */
@@ -181,7 +240,7 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 	struct atmel_tsadcc	*ts_dev;
 	struct input_dev	*input_dev;
 	struct resource		*res;
-	struct at91_tsadcc_data *pdata = pdev->dev.platform_data;
+	struct at91_tsadcc_data *pdata;
 	int		err = 0;
 	unsigned int	prsc;
 	unsigned int	reg;
@@ -199,6 +258,7 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 	platform_set_drvdata(pdev, ts_dev);
+	pdata = &ts_dev->board;
 
 	input_dev = input_allocate_device();
 	if (!input_dev) {
@@ -264,8 +324,16 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 	prsc = clk_get_rate(ts_dev->clk);
 	dev_info(&pdev->dev, "Master clock is set at: %d Hz\n", prsc);
 
-	if (!pdata)
-		goto err_fail;
+	if (pdev->dev.of_node) {
+		err = atmel_of_init_tsadcc(pdev->dev.of_node, pdata, pdev);
+		if (err)
+			goto err_fail;
+	} else {
+		if (!pdev->dev.platform_data)
+			goto err_fail;
+		else
+			memcpy(pdata, pdev->dev.platform_data, sizeof(*pdata));
+	}
 
 	if (!pdata->adc_clock)
 		pdata->adc_clock = ADC_DEFAULT_CLOCK;
@@ -374,11 +442,21 @@ static int __devexit atmel_tsadcc_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#if defined(CONFIG_OF)
+static const struct of_device_id atmel_tsaddcc_dt_ids[] = {
+	{ .compatible = "atmel,at91sam9x5-tsadcc"},
+	{ /* sentinel */ }
+}
+
+MODULE_DEVICE_TABLE(of, atmel_tsaddcc_dt_ids);
+#endif
+
 static struct platform_driver atmel_tsadcc_driver = {
 	.probe		= atmel_tsadcc_probe,
 	.remove		= __devexit_p(atmel_tsadcc_remove),
 	.driver		= {
 		.name	= "atmel_tsadcc",
+		.of_match_table = of_match_ptr(atmel_tsaddcc_dt_ids),
 	},
 };
 module_platform_driver(atmel_tsadcc_driver);
-- 
1.8.0.197.g5a90748

