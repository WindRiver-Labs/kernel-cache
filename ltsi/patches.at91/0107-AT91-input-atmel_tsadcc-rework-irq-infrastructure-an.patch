From 385b5e2f9342fcf20ad97d4bf788e5e60635d542 Mon Sep 17 00:00:00 2001
From: Nicolas Ferre <nicolas.ferre@atmel.com>
Date: Thu, 16 Jun 2011 19:24:04 +0200
Subject: AT91/input: atmel_tsadcc: rework irq infrastructure and parameters

Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
---
 drivers/input/touchscreen/atmel_tsadcc.c | 70 ++++++++++++++++++--------------
 1 file changed, 40 insertions(+), 30 deletions(-)

diff --git a/drivers/input/touchscreen/atmel_tsadcc.c b/drivers/input/touchscreen/atmel_tsadcc.c
index 20154ba..397d17a 100644
--- a/drivers/input/touchscreen/atmel_tsadcc.c
+++ b/drivers/input/touchscreen/atmel_tsadcc.c
@@ -30,6 +30,7 @@
 #define cpu_has_9x5_adc() (cpu_is_at91sam9x5())
 
 #define ADC_DEFAULT_CLOCK	100000
+#define ZTHRESHOLD		3200
 
 struct atmel_tsadcc {
 	struct input_dev	*input;
@@ -39,7 +40,6 @@ struct atmel_tsadcc {
 	unsigned int		prev_absx;
 	unsigned int		prev_absy;
 	unsigned int		prev_absz;
-	unsigned char		bufferedmeasure;
 };
 
 static void __iomem		*tsc_base;
@@ -62,6 +62,7 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 {
 	struct atmel_tsadcc	*ts_dev = (struct atmel_tsadcc *)dev;
 	struct input_dev	*input_dev = ts_dev->input;
+	struct at91_tsadcc_data *pdata = input_dev->dev.parent->platform_data;
 
 	unsigned int status;
 	unsigned int reg;
@@ -76,7 +77,7 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 		/* Contact lost */
 		if (cpu_has_9x5_adc()) {
 			/* 9X5 using TSMR to set PENDBC time */
-			reg = atmel_tsadcc_read(ATMEL_TSADCC_TSMR) | ATMEL_TSADCC_PENDBC;
+			reg = atmel_tsadcc_read(ATMEL_TSADCC_TSMR) | ((pdata->pendet_debounce << 28) & ATMEL_TSADCC_PENDBC);
 			atmel_tsadcc_write(ATMEL_TSADCC_TSMR, reg);
 		} else {
 			reg = atmel_tsadcc_read(ATMEL_TSADCC_MR) | ATMEL_TSADCC_PENDBC;
@@ -88,7 +89,6 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 		atmel_tsadcc_write(ATMEL_TSADCC_IER, ATMEL_TSADCC_PENCNT);
 
 		input_report_key(input_dev, BTN_TOUCH, 0);
-		ts_dev->bufferedmeasure = 0;
 		input_sync(input_dev);
 
 	} else if (status & ATMEL_TSADCC_PENCNT) {
@@ -118,27 +118,20 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 	} else if ((status & ATMEL_TSADCC_CONVERSION_END) == ATMEL_TSADCC_CONVERSION_END) {
 		/* Conversion finished */
 
-		if (ts_dev->bufferedmeasure) {
-			/* Last measurement is always discarded, since it can
-			 * be erroneous.
-			 * Always report previous measurement */
-			dev_dbg(&input_dev->dev,
-					"x = %d, y = %d, pressure = %d\n",
-					ts_dev->prev_absx, ts_dev->prev_absy,
-					ts_dev->prev_absz);
-			input_report_abs(input_dev, ABS_X, ts_dev->prev_absx);
-			input_report_abs(input_dev, ABS_Y, ts_dev->prev_absy);
-			input_report_key(input_dev, BTN_TOUCH, 1);
-			if (cpu_has_9x5_adc())
-				input_report_abs(input_dev, ABS_PRESSURE, ts_dev->prev_absz);
-			input_sync(input_dev);
-		} else
-			ts_dev->bufferedmeasure = 1;
-
-		/* Now make new measurement */
+		/* make new measurement */
 		if (cpu_has_9x5_adc()) {
-			ts_dev->prev_absx = atmel_tsadcc_read(ATMEL_TSADCC_XPOSR) & 0xffff;
-			ts_dev->prev_absy = atmel_tsadcc_read(ATMEL_TSADCC_YPOSR) & 0xffff;
+			unsigned int xscale, yscale;
+
+			/* calculate position */
+			reg = atmel_tsadcc_read(ATMEL_TSADCC_XPOSR);
+			ts_dev->prev_absx = (reg & ATMEL_TSADCC_XPOS) << 10;
+			xscale = (reg & ATMEL_TSADCC_XSCALE) >> 16;
+			ts_dev->prev_absx /= xscale ? xscale: 1;
+
+			reg = atmel_tsadcc_read(ATMEL_TSADCC_YPOSR);
+			ts_dev->prev_absy = (reg & ATMEL_TSADCC_YPOS) << 10;
+			yscale = (reg & ATMEL_TSADCC_YSCALE) >> 16;
+			ts_dev->prev_absy /= yscale ? yscale: 1 << 10;
 
 			/* calculate the pressure */
 			reg = atmel_tsadcc_read(ATMEL_TSADCC_PRESSR);
@@ -157,6 +150,23 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 			ts_dev->prev_absy = atmel_tsadcc_read(ATMEL_TSADCC_CDR1) << 10;
 			ts_dev->prev_absy /= atmel_tsadcc_read(ATMEL_TSADCC_CDR0);
 		}
+
+		/* report measurement to input layer */
+		if (ts_dev->prev_absz < ZTHRESHOLD) {
+			dev_dbg(&input_dev->dev,
+					"x = %d, y = %d, pressure = %d\n",
+					ts_dev->prev_absx, ts_dev->prev_absy,
+					ts_dev->prev_absz);
+			input_report_abs(input_dev, ABS_X, ts_dev->prev_absx);
+			input_report_abs(input_dev, ABS_Y, ts_dev->prev_absy);
+			if (cpu_has_9x5_adc())
+				input_report_abs(input_dev, ABS_PRESSURE, ts_dev->prev_absz);
+			input_report_key(input_dev, BTN_TOUCH, 1);
+			input_sync(input_dev);
+		} else {
+			dev_dbg(&input_dev->dev,
+					"pressure too low: not reporting\n");
+		}
 	}
 
 	return IRQ_HANDLED;
@@ -233,7 +243,6 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 	}
 
 	ts_dev->input = input_dev;
-	ts_dev->bufferedmeasure = 0;
 
 	snprintf(ts_dev->phys, sizeof(ts_dev->phys),
 		 "%s/input0", dev_name(&pdev->dev));
@@ -275,10 +284,10 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 	dev_info(&pdev->dev, "Prescaler is set at: %d\n", prsc);
 
 	if (cpu_has_9x5_adc()) {
-		reg = 	((0x01 << 5) & ATMEL_TSADCC_SLEEP)	|	/* Sleep Mode */
-			((0x01 << 6) & ATMEL_TSADCC_FWUP)	|	/* Fast Wake Up */
+		reg = 	((0x00 << 5) & ATMEL_TSADCC_SLEEP)	|	/* no Sleep Mode */
+			((0x00 << 6) & ATMEL_TSADCC_FWUP)	|	/* no Fast Wake Up needed */
 			(prsc << 8)				|
-			((0x8 << 16) & ATMEL_TSADCC_STARTUP)	|
+			((0x4 << 16) & ATMEL_TSADCC_STARTUP)	|
 			((pdata->ts_sample_hold_time << 24) & ATMEL_TSADCC_TRACKTIM);
 	} else {
 		reg = ATMEL_TSADCC_TSAMOD_TS_ONLY_MODE		|
@@ -296,10 +305,10 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 	if (cpu_has_9x5_adc()) {
 		atmel_tsadcc_write(ATMEL_TSADCC_TSMR,
 					ATMEL_TSADCC_TSMODE_4WIRE_PRESS	|
-					(pdata->filtering_average << 4)	|	/* Touchscreen average */
+					((pdata->filtering_average << 4) & ATMEL_TSADCC_TSAV) |	/* Touchscreen average */
 					ATMEL_TSADCC_NOTSDMA		|
 					ATMEL_TSADCC_PENDET_ENA		|
-					(pdata->pendet_debounce << 28)	|
+					((pdata->pendet_debounce << 28) & ATMEL_TSADCC_PENDBC) |
 					(0x3 << 8));				/* Touchscreen freq */
 	} else {
 		atmel_tsadcc_write(ATMEL_TSADCC_TSR,
@@ -312,7 +321,8 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 	 * option only available on ES2 and higher
 	 */
 	if (cpu_has_9x5_adc()) {
-		atmel_tsadcc_write(ATMEL_TSADCC_ACR, pdata->pendet_sensitivity);
+		if (pdata->pendet_sensitivity <= ATMEL_TSADCC_PENDET_SENSITIVITY)
+			atmel_tsadcc_write(ATMEL_TSADCC_ACR, pdata->pendet_sensitivity);
 	}
 
 	atmel_tsadcc_read(ATMEL_TSADCC_SR);
-- 
1.8.0.197.g5a90748

