From 647050060bff19f002e3c0aef95410ab0915dfe1 Mon Sep 17 00:00:00 2001
From: Ludovic Desroches <ludovic.desroches@atmel.com>
Date: Tue, 5 Apr 2011 17:30:03 +0200
Subject: input: atmel_tsadcc: enable touchscreen averaging and add fast wake
 up

Enable the touchscreen average to improve the resulting events. For this
to work the trigger period needs to be reduced.

This puts a field into at91_tsadcc_data to allow platforms to specify
the number of conversions to average over.

XXX: should the trigger period passed by the platform, too, as this
depends on the number of conversions?
XXX: seperate fast wake up into a seperate patch? What does it?
XXX: don't use bare constants

Signed-off-by: Ludovic Desroches <ludovic.desroches@atmel.com>
---
 drivers/input/touchscreen/atmel_tsadcc.c | 14 ++++++++------
 drivers/input/touchscreen/atmel_tsadcc.h |  1 +
 2 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/input/touchscreen/atmel_tsadcc.c b/drivers/input/touchscreen/atmel_tsadcc.c
index b6a1630..48faecb 100644
--- a/drivers/input/touchscreen/atmel_tsadcc.c
+++ b/drivers/input/touchscreen/atmel_tsadcc.c
@@ -96,7 +96,7 @@ static irqreturn_t atmel_tsadcc_interrupt(int irq, void *dev)
 		atmel_tsadcc_write(ATMEL_TSADCC_IER,
 				   ATMEL_TSADCC_CONVERSION_END | ATMEL_TSADCC_NOCNT);
 		atmel_tsadcc_write(ATMEL_TSADCC_TRGR,
-				   ATMEL_TSADCC_TRGMOD_PERIOD | (0x0FFF << 16));
+				   ATMEL_TSADCC_TRGMOD_PERIOD | (0x00D0 << 16));
 
 	} else if ((status & ATMEL_TSADCC_CONVERSION_END) == ATMEL_TSADCC_CONVERSION_END) {
 		/* Conversion finished */
@@ -259,6 +259,7 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 
 	if (cpu_has_9x5_adc()) {
 		reg = 	((0x01 << 5) & ATMEL_TSADCC_SLEEP)	|	/* Sleep Mode */
+			((0x01 << 6) & ATMEL_TSADCC_FWUP)	|	/* Fast Wake Up */
 			(prsc << 8)				|
 			((0x8 << 16) & ATMEL_TSADCC_STARTUP)	|
 			((pdata->ts_sample_hold_time << 24) & ATMEL_TSADCC_TRACKTIM);
@@ -277,11 +278,12 @@ static int __devinit atmel_tsadcc_probe(struct platform_device *pdev)
 
 	if (cpu_has_9x5_adc()) {
 		atmel_tsadcc_write(ATMEL_TSADCC_TSMR,
-					ATMEL_TSADCC_TSMODE_4WIRE_PRESS		|
-					ATMEL_TSADCC_NOTSDMA			|
-					ATMEL_TSADCC_PENDET_ENA			|
-					(pdata->pendet_debounce << 28)		|
-					(0x0 << 8));
+					ATMEL_TSADCC_TSMODE_4WIRE_PRESS	|
+					(pdata->filtering_average << 4)	|	/* Touchscreen average */
+					ATMEL_TSADCC_NOTSDMA		|
+					ATMEL_TSADCC_PENDET_ENA		|
+					(pdata->pendet_debounce << 28)	|
+					(0x3 << 8));				/* Touchscreen freq */
 	} else {
 		atmel_tsadcc_write(ATMEL_TSADCC_TSR,
 			(pdata->ts_sample_hold_time << 24) & ATMEL_TSADCC_TSSHTIM);
diff --git a/drivers/input/touchscreen/atmel_tsadcc.h b/drivers/input/touchscreen/atmel_tsadcc.h
index 231497e..572770a 100644
--- a/drivers/input/touchscreen/atmel_tsadcc.h
+++ b/drivers/input/touchscreen/atmel_tsadcc.h
@@ -34,6 +34,7 @@
 #define	  ATMEL_TSADCC_LOWRES	(1    <<  4)	/* Resolution selection */
 #define	  ATMEL_TSADCC_SLEEP	(1    <<  5)	/* Sleep mode */
 #define	  ATMEL_TSADCC_PENDET	(1    <<  6)	/* Pen Detect selection */
+#define   ATMEL_TSADCC_FWUP	(1    <<  6)	/* Fast Wake Up selection (5series) */
 #define	  ATMEL_TSADCC_PRES	(1    <<  7)	/* Pressure Measurement Selection */
 #define	  ATMEL_TSADCC_PRESCAL	(0x3f <<  8)	/* Prescalar Rate Selection */
 #define	  ATMEL_TSADCC_EPRESCAL	(0xff <<  8)	/* Prescalar Rate Selection (Extended) */
-- 
1.8.0.197.g5a90748

