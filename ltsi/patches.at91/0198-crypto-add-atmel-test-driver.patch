From 6cfecc127971e728597592ccfaafc2527cdf2d1a Mon Sep 17 00:00:00 2001
From: Nicolas Royer <nicolas@eukrea.com>
Date: Mon, 17 Sep 2012 18:26:07 +0200
Subject: crypto: add atmel-test driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Nicolas Royer <nicolas@eukrea.com>
Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
Acked-by: Eric Bénard <eric@eukrea.com>
Tested-by: Eric Bénard <eric@eukrea.com>
---
 drivers/crypto/Kconfig      |  12 ++
 drivers/crypto/Makefile     |   1 +
 drivers/crypto/atmel-test.c | 444 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 457 insertions(+)
 create mode 100644 drivers/crypto/atmel-test.c

diff --git a/drivers/crypto/Kconfig b/drivers/crypto/Kconfig
index 2339add..7a356fe 100644
--- a/drivers/crypto/Kconfig
+++ b/drivers/crypto/Kconfig
@@ -343,4 +343,16 @@ config CRYPTO_DEV_ATMEL_SHA
 	  To compile this driver as a module, choose M here: the module
 	  will be called atmel-sha.
 
+config CRYPTO_DEV_ATMEL_TEST
+	tristate "TEST MODULE"
+	depends on ARCH_AT91
+	select CRYPTO_SHA1
+	select CRYPTO_SHA256
+	help
+	  Some Atmel processors have SHA1/SHA256/TDES/AES hw accelerator.
+	  Select this if you want to test SHA1/SHA256/TDES/AES drivers.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called atmel-test.
+
 endif # CRYPTO_HW
diff --git a/drivers/crypto/Makefile b/drivers/crypto/Makefile
index d355c25..bbe005b 100644
--- a/drivers/crypto/Makefile
+++ b/drivers/crypto/Makefile
@@ -17,3 +17,4 @@ obj-$(CONFIG_CRYPTO_DEV_TEGRA_AES) += tegra-aes.o
 obj-$(CONFIG_CRYPTO_DEV_ATMEL_AES) += atmel-aes.o
 obj-$(CONFIG_CRYPTO_DEV_ATMEL_TDES) += atmel-tdes.o
 obj-$(CONFIG_CRYPTO_DEV_ATMEL_SHA) += atmel-sha.o
+obj-$(CONFIG_CRYPTO_DEV_ATMEL_TEST) += atmel-test.o
diff --git a/drivers/crypto/atmel-test.c b/drivers/crypto/atmel-test.c
new file mode 100644
index 0000000..4a23db5
--- /dev/null
+++ b/drivers/crypto/atmel-test.c
@@ -0,0 +1,444 @@
+/*
+ * Cryptographic API.
+ *
+ * ATMEL SHA1/SHA256/TDES/AES HW acceleration test.
+ *
+ * Author: Nicolas Royer - Eukréa Electromatique
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as published
+ * by the Free Software Foundation.
+ *
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/crypto.h>
+#include <linux/err.h>
+#include <linux/scatterlist.h>
+#include <linux/gfp.h>
+#include <crypto/hash.h>
+
+static char *pattern64 =
+	"\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
+	"\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
+	"\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
+	"\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
+	"\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
+	"\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
+	"\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
+	"\xad\x2b\x41\x7b\xe6\x6c\x37\x10";
+
+static char *key32 =
+	"\x60\x3d\xeb\x10\x15\xca\x71\xbe"
+	"\x2b\x73\xae\xf0\x85\x7d\x77\x81"
+	"\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
+	"\x2d\x98\x10\xa3\x09\x14\xdf\xf4";
+
+static char *iv16 =
+	"\x56\x2e\x17\x99\x6d\x09\x3d\x28"
+	"\xdd\xb3\xba\x69\x5a\x2e\x6f\x58";
+
+#define SHA1_MSG_LEN	20
+#define SHA256_MSG_LEN	32
+static char sha_out_buf[SHA256_MSG_LEN];
+
+#define TVMEMSIZE	4
+static char *tvmem[TVMEMSIZE];
+
+
+static void hexdump(unsigned char *buf, unsigned int len)
+{
+	print_hex_dump(KERN_CONT, "", DUMP_PREFIX_OFFSET,
+			16, 1,
+			buf, len, false);
+}
+
+struct hmac_sha_result {
+	struct completion completion;
+	int err;
+};
+
+static void hmac_sha_complete(struct crypto_async_request *req, int err)
+{
+	struct hmac_sha_result *r = req->data;
+	if (err == -EINPROGRESS)
+		return;
+	r->err = err;
+	complete(&r->completion);
+}
+
+static inline int do_one_ahash_op(struct ahash_request *req, int ret)
+{
+	if (ret == -EINPROGRESS || ret == -EBUSY) {
+		struct hmac_sha_result *tr = req->base.data;
+
+		ret = wait_for_completion_interruptible(&tr->completion);
+		if (!ret)
+			ret = tr->err;
+		INIT_COMPLETION(tr->completion);
+	}
+	return ret;
+}
+
+static int hmac_sha_update(const char *algo, char *data_in, size_t dlen,
+			char *hash_out, size_t outlen)
+{
+	int rc = 0;
+	struct crypto_ahash *tfm;
+	struct scatterlist sg[TVMEMSIZE];
+	struct ahash_request *req;
+	struct hmac_sha_result tresult;
+	int i, j;
+
+	/* Set hash output to 0 initially */
+	memset(hash_out, 0, outlen);
+
+	init_completion(&tresult.completion);
+	tfm = crypto_alloc_ahash(algo, 0, 0);
+	if (IS_ERR(tfm)) {
+			printk(KERN_ERR "crypto_alloc_ahash failed\n");
+			rc = PTR_ERR(tfm);
+			goto err_tfm;
+	}
+	req = ahash_request_alloc(tfm, GFP_KERNEL);
+	if (!req) {
+			printk(KERN_ERR "failed to allocate request\n");
+			rc = -ENOMEM;
+			goto err_req;
+	}
+	if (crypto_ahash_digestsize(tfm) > outlen) {
+			printk(KERN_ERR "tfm size > result buffer\n");
+			rc = -EINVAL;
+			goto err_req;
+	}
+	ahash_request_set_callback(req, CRYPTO_TFM_REQ_MAY_BACKLOG,
+			hmac_sha_complete, &tresult);
+
+	sg_init_table(sg, TVMEMSIZE);
+
+	i = 0;
+	j = dlen;
+
+	while (j > PAGE_SIZE) {
+		sg_set_buf(sg + i, tvmem[i], PAGE_SIZE);
+		memcpy(tvmem[i], data_in + i * PAGE_SIZE, PAGE_SIZE);
+		i++;
+		j -= PAGE_SIZE;
+	}
+	sg_set_buf(sg + i, tvmem[i], j);
+	memcpy(tvmem[i], data_in + i * PAGE_SIZE, j);
+
+	crypto_ahash_clear_flags(tfm, -0);
+	ahash_request_set_crypt(req, sg, hash_out, dlen);
+	rc = crypto_ahash_init(req);
+	rc = do_one_ahash_op(req, crypto_ahash_update(req));
+	if (rc)
+		goto out;
+
+	rc = do_one_ahash_op(req, crypto_ahash_final(req));
+
+out:
+	ahash_request_free(req);
+err_req:
+	crypto_free_ahash(tfm);
+err_tfm:
+	return rc;
+}
+
+static int hmac_sha_digest(const char *algo, char *data_in, size_t dlen,
+			char *hash_out, size_t outlen)
+{
+	int rc = 0;
+	struct crypto_ahash *tfm;
+	struct scatterlist sg;
+	struct ahash_request *req;
+	struct hmac_sha_result tresult;
+
+	/* Set hash output to 0 initially */
+	memset(hash_out, 0, outlen);
+
+	init_completion(&tresult.completion);
+	tfm = crypto_alloc_ahash(algo, 0, 0);
+	if (IS_ERR(tfm)) {
+			printk(KERN_ERR "crypto_alloc_ahash failed\n");
+			rc = PTR_ERR(tfm);
+			goto err_tfm;
+	}
+	req = ahash_request_alloc(tfm, GFP_KERNEL);
+	if (!req) {
+			printk(KERN_ERR "failed to allocate request\n");
+			rc = -ENOMEM;
+			goto err_req;
+	}
+	if (crypto_ahash_digestsize(tfm) > outlen) {
+			printk(KERN_ERR "tfm size > result buffer\n");
+			rc = -EINVAL;
+			goto err_req;
+	}
+	ahash_request_set_callback(req, CRYPTO_TFM_REQ_MAY_BACKLOG,
+			hmac_sha_complete, &tresult);
+
+	sg_init_one(&sg, data_in, dlen);
+
+	crypto_ahash_clear_flags(tfm, -0);
+	ahash_request_set_crypt(req, &sg, hash_out, dlen);
+	rc = do_one_ahash_op(req, crypto_ahash_digest(req));
+
+	ahash_request_free(req);
+err_req:
+	crypto_free_ahash(tfm);
+err_tfm:
+	return rc;
+}
+
+struct tcrypt_result {
+	struct completion completion;
+	int err;
+};
+
+static void tcrypt_complete(struct crypto_async_request *req, int err)
+{
+	struct tcrypt_result *res = req->data;
+
+	if (err == -EINPROGRESS)
+		return;
+
+	res->err = err;
+	complete(&res->completion);
+}
+
+static inline int do_one_acipher_op(struct ablkcipher_request *req, int ret)
+{
+	if (ret == -EINPROGRESS || ret == -EBUSY) {
+		struct tcrypt_result *tr = req->base.data;
+
+		ret = wait_for_completion_interruptible(&tr->completion);
+		if (!ret)
+			ret = tr->err;
+			INIT_COMPLETION(tr->completion);
+		}
+	return ret;
+}
+
+static int test_acipher(const char *algo, int enc, char *data_in,
+		char *data_out, size_t data_len, char *key, int keysize)
+		{
+	struct crypto_ablkcipher *tfm;
+	struct tcrypt_result tresult;
+	struct ablkcipher_request *req;
+	struct scatterlist sg[TVMEMSIZE];
+	unsigned int ret, i, j, iv_len;
+	char iv[128];
+
+	ret = -EAGAIN;
+
+	init_completion(&tresult.completion);
+
+	tfm = crypto_alloc_ablkcipher(algo, 0, 0);
+	if (IS_ERR(tfm)) {
+		printk(KERN_ERR "failed to load transform for %s: %ld\n",
+			algo, PTR_ERR(tfm));
+		return ret;
+	}
+
+	req = ablkcipher_request_alloc(tfm, GFP_KERNEL);
+	if (!req) {
+		printk(KERN_ERR "tcrypt: skcipher: Failed to allocate request for %s\n",
+			algo);
+		goto out;
+	}
+
+	ablkcipher_request_set_callback(req, CRYPTO_TFM_REQ_MAY_BACKLOG,
+					tcrypt_complete, &tresult);
+
+	crypto_ablkcipher_clear_flags(tfm, ~0);
+
+	ret = crypto_ablkcipher_setkey(tfm, key, keysize);
+	if (ret) {
+		printk(KERN_ERR "setkey() failed flags=%x\n",
+			crypto_ablkcipher_get_flags(tfm));
+		goto out_free_req;
+	}
+
+	printk(KERN_INFO "KEY:\n");
+	hexdump(key, keysize);
+
+	sg_init_table(sg, TVMEMSIZE);
+
+	i = 0;
+	j = data_len;
+
+	while (j > PAGE_SIZE) {
+		sg_set_buf(sg + i, tvmem[i], PAGE_SIZE);
+		memcpy(tvmem[i], data_in + i * PAGE_SIZE, PAGE_SIZE);
+		i++;
+		j -= PAGE_SIZE;
+	}
+	sg_set_buf(sg + i, tvmem[i], j);
+	memcpy(tvmem[i], data_in + i * PAGE_SIZE, j);
+
+	iv_len = crypto_ablkcipher_ivsize(tfm);
+	memcpy(iv, iv16, iv_len);
+
+	printk(KERN_INFO "IV:\n");
+	hexdump(iv, iv_len);
+
+	ablkcipher_request_set_crypt(req, sg, sg, data_len, iv);
+
+	printk(KERN_INFO "IN:\n");
+	hexdump(data_in, data_len);
+
+	if (enc)
+		ret = do_one_acipher_op(req, crypto_ablkcipher_encrypt(req));
+	else
+		ret = do_one_acipher_op(req, crypto_ablkcipher_decrypt(req));
+
+	if (ret)
+		printk(KERN_ERR "failed flags=%x\n",
+			crypto_ablkcipher_get_flags(tfm));
+	else {
+		i = 0;
+		j = data_len;
+		while (j > PAGE_SIZE) {
+			memcpy(data_out + i * PAGE_SIZE, tvmem[i], PAGE_SIZE);
+			i++;
+			j -= PAGE_SIZE;
+		}
+		memcpy(data_out + i * PAGE_SIZE, tvmem[i], j);
+
+		printk(KERN_INFO "OUT:\n");
+		hexdump(data_out, data_len);
+	}
+
+out_free_req:
+	ablkcipher_request_free(req);
+out:
+	crypto_free_ablkcipher(tfm);
+
+	return ret;
+}
+
+static int mode = 10;
+module_param_named(mode, mode, int,
+		   S_IRUGO | S_IWUSR | S_IWGRP);
+
+static int keylen = 8;
+module_param_named(keylen, keylen, int,
+		   S_IRUGO | S_IWUSR | S_IWGRP);
+
+static int dlen = 64;
+module_param_named(dlen, dlen, int,
+		   S_IRUGO | S_IWUSR | S_IWGRP);
+
+char *ahash_algs[] = {"sha1", "sha256"};
+
+char *acipher_algs[] = {
+	"ecb(des)", "cbc(des)", "cfb(des)", "cfb32(des)",
+	"cfb16(des)", "cfb8(des)", "ofb(des)", "ecb(des3_ede)",
+	"cbc(des3_ede)", "cfb(des3_ede)", "cfb32(des3_ede)", "cfb16(des3_ede)",
+	"cfb8(des3_ede)", "ofb(des3_ede)", "ecb(aes)", "cbc(aes)",
+	"ofb(aes)", "cfb(aes)", "cfb64(aes)", "cfb32(aes)",
+	"cfb16(aes)", "cfb8(aes)", "ctr(aes)"};
+
+static int __init init_main(void)
+{
+	unsigned int i;
+	char *buf_in;
+	char *buf_out;
+	char *buf_res;
+
+	if ((dlen <= 0) || (dlen > TVMEMSIZE*PAGE_SIZE)) {
+		printk(KERN_ERR " 0 < dlen <= %i\n",
+			(int) (TVMEMSIZE*PAGE_SIZE));
+		return -EAGAIN;
+	}
+
+	for (i = 0; i < TVMEMSIZE; i++) {
+		tvmem[i] = (void *)__get_free_page(GFP_KERNEL);
+		if (!tvmem[i])
+			goto err_free_tv;
+	}
+
+	buf_in = kzalloc(dlen, GFP_KERNEL);
+	if (!buf_in)
+		goto err_buf_in_alloc;
+	buf_out = kzalloc(dlen, GFP_KERNEL);
+	if (!buf_out)
+		goto err_buf_out_alloc;
+	buf_res = kzalloc(dlen, GFP_KERNEL);
+	if (!buf_res)
+		goto err_buf_res_alloc;
+
+	if (dlen > 64) {
+		memcpy(buf_in, pattern64, 64);
+		memset(buf_in+64, 0xFF, dlen-64);
+	} else
+		memcpy(buf_in, pattern64, dlen);
+
+	if (mode < 10) {
+		if (mode >= ARRAY_SIZE(ahash_algs)) {
+			printk(KERN_ERR "mode must be < %d or > 10\n",
+				ARRAY_SIZE(ahash_algs));
+			goto exit;
+		}
+		printk(KERN_INFO "\n%s digest_req\n", ahash_algs[mode]);
+		hmac_sha_digest(ahash_algs[mode], buf_in, dlen, sha_out_buf,
+			mode ? SHA256_MSG_LEN : SHA1_MSG_LEN);
+		hexdump(sha_out_buf, mode ? SHA256_MSG_LEN : SHA1_MSG_LEN);
+
+		printk(KERN_INFO "\n%s update_req\n", ahash_algs[mode]);
+		hmac_sha_update(ahash_algs[mode], buf_in, dlen, sha_out_buf,
+			mode ? SHA256_MSG_LEN : SHA1_MSG_LEN);
+		hexdump(sha_out_buf, mode ? SHA256_MSG_LEN : SHA1_MSG_LEN);
+	} else {
+		mode -= 10;
+
+		if (mode >= ARRAY_SIZE(acipher_algs)) {
+			printk(KERN_ERR "mode must be < %d\n",
+				ARRAY_SIZE(acipher_algs) + 10);
+			goto exit;
+		}
+
+		printk(KERN_INFO "\n%s encrypt\n", acipher_algs[mode]);
+		if (test_acipher(acipher_algs[mode], 1, buf_in, buf_out,
+				dlen, key32, keylen))
+			goto exit;
+
+		printk(KERN_INFO "\n%s decrypt\n", acipher_algs[mode]);
+		if (test_acipher(acipher_algs[mode], 0, buf_out, buf_res,
+				dlen, key32, keylen))
+			goto exit;
+
+		if (memcmp(buf_in, buf_res, dlen))
+			printk(KERN_INFO "\n%s test failed\n\n",
+				acipher_algs[mode]);
+		else
+			printk(KERN_INFO "\n%s test OK\n\n",
+				acipher_algs[mode]);
+	}
+
+exit:
+	kfree(buf_res);
+err_buf_res_alloc:
+	kfree(buf_out);
+err_buf_out_alloc:
+	kfree(buf_in);
+err_buf_in_alloc:
+err_free_tv:
+	for (i = 0; i < TVMEMSIZE && tvmem[i]; i++)
+		free_page((unsigned long)tvmem[i]);
+
+	return -EAGAIN;
+}
+
+static void __exit cleanup_main(void)
+{
+}
+
+module_init(init_main);
+module_exit(cleanup_main);
+
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Nicolas Royer - Eukréa Electromatique");
+MODULE_DESCRIPTION("Atmel HW crypto test");
-- 
1.8.0.197.g5a90748

