From e21c824bce9438f80a402e4ac4b8b1f017964138 Mon Sep 17 00:00:00 2001
From: Nicolas Ferre <nicolas.ferre@atmel.com>
Date: Wed, 20 Jun 2012 18:05:56 +0200
Subject: MMC: atmel-mci: add device tree property for configuration

Configuration option is now handled by the "dma" device tree property
that links to the corresponding DMA controller.

Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
---
 drivers/mmc/host/atmel-mci.c |   82 +++++++++++++++++++++++++++++++++++++++----
 1 file changed, 75 insertions(+), 7 deletions(-)

--- a/drivers/mmc/host/atmel-mci.c
+++ b/drivers/mmc/host/atmel-mci.c
@@ -513,12 +513,65 @@ static const struct of_device_id atmci_d
 
 MODULE_DEVICE_TABLE(of, atmci_dt_ids);
 
+static int atmci_dma_of_init(struct device_node *np,
+			     struct at_dma_slave *atslave)
+{
+	struct of_phandle_args  dma_spec;
+	struct device_node	*dmac_np;
+	struct platform_device	*dmac_pdev;
+	const __be32		*nbcells;
+	int			ret;
+
+	ret = of_parse_phandle_with_args(np, "dma", "#dma-cells", 0, &dma_spec);
+	if (ret || !dma_spec.np) {
+		pr_err("%s: can't parse dma property (%d)\n", np->full_name, ret);
+		goto err0;
+	}
+	dmac_np = dma_spec.np;
+
+	/* check property format */
+	nbcells = of_get_property(dmac_np, "#dma-cells", NULL);
+	if (!nbcells) {
+		pr_err("%s: #dma-cells property is required\n", np->full_name);
+		ret = -EINVAL;
+		goto err1;
+	}
+
+	if (dma_spec.args_count != be32_to_cpup(nbcells)
+	 || dma_spec.args_count != 1) {
+		pr_err("%s: wrong #dma-cells for %s\n",
+		       np->full_name, dmac_np->full_name);
+		ret = -EINVAL;
+		goto err1;
+	}
+
+	/* retreive DMA controller information */
+	dmac_pdev = of_find_device_by_node(dmac_np);
+	if (!dmac_pdev) {
+		pr_err("%s: unable to find pdev from DMA controller\n",
+		       dmac_np->full_name);
+		ret = -EINVAL;
+		goto err1;
+	}
+
+	/* now fill in the at_dma_slave structure */
+	atslave->dma_dev = &dmac_pdev->dev;
+	atslave->cfg = dma_spec.args[0];
+
+err1:
+	of_node_put(dma_spec.np);
+err0:
+	pr_debug("%s exited with status %d\n", __func__, ret);
+	return ret;
+}
+
 static struct mci_platform_data __devinit*
 atmci_of_init(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
 	struct device_node *cnp;
 	struct mci_platform_data *pdata;
+	struct at_dma_slave	 *atslave;
 	u32 slot_id;
 
 	if (!np) {
@@ -532,6 +585,24 @@ atmci_of_init(struct platform_device *pd
 		return ERR_PTR(-ENOMEM);
 	}
 
+	pdata->dma_slave = devm_kzalloc(&pdev->dev,
+					sizeof(*(pdata->dma_slave)),
+					GFP_KERNEL);
+	if (!pdata->dma_slave) {
+		dev_err(&pdev->dev, "could not allocate memory for dma_slave\n");
+		devm_kfree(&pdev->dev, pdata);
+		return ERR_PTR(-ENOMEM);
+	}
+	atslave = &pdata->dma_slave->sdata;
+
+	/* retrive DMA configuration first */
+	if (atmci_dma_of_init(np, atslave)) {
+		dev_err(&pdev->dev, "could not find DMA parameters\n");
+		devm_kfree(&pdev->dev, pdata->dma_slave);
+		devm_kfree(&pdev->dev, pdata);
+		return ERR_PTR(-EINVAL);
+	}
+
 	for_each_child_of_node(np, cnp) {
 		if (of_property_read_u32(cnp, "reg", &slot_id)) {
 			dev_warn(&pdev->dev, "reg property is missing for %s\n",
@@ -2259,16 +2330,13 @@ static bool atmci_filter(struct dma_chan
 	}
 }
 
-static bool atmci_configure_dma(struct atmel_mci *host)
+static bool atmci_configure_dma(struct atmel_mci *host,
+				struct mci_platform_data *pdata)
 {
-	struct mci_platform_data	*pdata;
-
 	if (host == NULL)
 		return false;
 
-	pdata = host->pdev->dev.platform_data;
-
-	if (pdata && find_slave_dev(pdata->dma_slave)) {
+	if (pdata && pdata->dma_slave && find_slave_dev(pdata->dma_slave)) {
 		dma_cap_mask_t mask;
 
 		/* Try to grab a DMA channel */
@@ -2420,7 +2488,7 @@ static int __init atmci_probe(struct pla
 
 	/* Get MCI capabilities and set operations according to it */
 	atmci_get_cap(host);
-	if (host->caps.has_dma && atmci_configure_dma(host)) {
+	if (host->caps.has_dma && atmci_configure_dma(host, pdata)) {
 		host->prepare_data = &atmci_prepare_data_dma;
 		host->submit_data = &atmci_submit_data_dma;
 		host->stop_transfer = &atmci_stop_transfer_dma;
