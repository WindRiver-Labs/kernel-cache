==============================================================================
How to receive target kernel printk messages from a remote host via netconsole
==============================================================================

The kernel module 'netconsole' enables us to receive the printk messages of
the target Linux kernel from a remote Linux host over UDP, which allowes the
debugging of problem where disk logging fails and serial consoles are
impractical, and also allowes to verify the NET_POLL_CONTROLLER API of
an ethernet driver.

The netconsole can be used either built-in or as a loadable module.
As a built-in, netconsole initializes immediately after NIC cards,
and will bring up the specified interface as soon as possible.
While this doesn't allow capture of early kernel panics, it does capture
most of the boot process.

For the flexibility factor, here I recommend that netconsoe is built
as a loadable module.

It takes a string configuration parameter "netconsole" in the
following format:

 netconsole=[src-port]@[src-ip]/[<dev>],[tgt-port]@<tgt-ip>/[tgt-macaddr]

 where
	src-port	source port for UDP packets (defaults to 6665)
	src-ip		source IP to use (IP address of the target board)
	dev		network interface that netconsole is based on.
			(eth0 by default.)
	tgt-port	port for logging agent (6666)
	tgt-ip		IP address for logging agent, that is, the IP address
			of your host Linux machine
	tgt-macaddr	ethernet MAC address for logging agent,
			by default, broadcast is used.

Examples:

 linux netconsole=4444@10.0.0.1/eth1,9353@10.0.0.2/12:34:56:78:9a:bc

  or

 insmod netconsole netconsole=@/,@10.0.0.2/

The remote host can run either 'netcat -u -l -p <port>' or syslogd.

-------------
Usage Example
-------------

At first, on your target board, load the kernel module 'netconsole' with the
following module argument. Here is the command:

 modprobe netconsole netconsole=@/eth1,100000@128.224.162.138/00:12:3F:06:39:C7

Here the string "netconsole=@/eth1,100000@128.224.162.138/00:12:3F:06:39:C7"
is the module argument. Its meaning is:

 src-port:	use the default port 6665 as the port for UDP packets
 src-ip:	use the current ipaddr of the specified network interface
 eth1:		netconsole is based on eth1
 tgt-port:	The port 100000 is used on your Linux host machine
 tgt-ip:	The ipaddr of your Linux host machine is 128.224.162.138
 tgt-macaddr:	The mac-addr of the network interface, which has the ipaddr
		128.224.162.138, is 00:12:3F:06:39:C7

If you can see the following log message on your target Linux system,
it will imply that netconsole is successfully loaded:

root@sbcpq2:/> tail /var/log/messages
Mar  7 08:50:20 sbcpq2 kernel: netconsole: local port 6665
Mar  7 08:50:20 sbcpq2 kernel: netconsole: interface eth1
Mar  7 08:50:20 sbcpq2 kernel: netconsole: remote port 34464
Mar  7 08:50:20 sbcpq2 kernel: netconsole: remote IP 128.224.162.138
Mar  7 08:50:20 sbcpq2 kernel: netconsole: remote ethernet address 00:12:3f:06:39:c7
Mar  7 08:50:20 sbcpq2 kernel: netconsole: local IP 128.224.162.200
Mar  7 08:50:20 sbcpq2 kernel: netconsole: network logging started

OK, now we can use 'netcat' command in your Linux host workstation to receive
all the kernel log messages from the target board:

rzhan@mark:/work> netcat -u -l -p 100000

Then, in the target board, you can insert a kernel module (e.g. hello.ko),
which is deliberately designed to panic in the module initialization routine.
Therefore, you should receive all panic Oops messages from your Linux host:

rzhan@mark:/work> netcat -u -l -p 100000
Oops: kernel access of bad area, sig: 11 [#1]
PREEMPT
NIP: C0235FD0 LR: D100F028 CTR: C0235F74
REGS: cf3edee0 TRAP: 0300   Not tainted  (2.6.20-WR2.0zz_cgl)
MSR: 00001032 <ME,IR,DR>  CR: 24002028  XER: 00000000
DAR: 00000004, DSISR: 22000000
TASK = c058b420[1194] 'insmod' THREAD: cf3ec000
GPR00: CF3EDFAC CF3EDF90 C058B420 D100F6C0 000003E8 00000000 00008124 00000000
GPR08: C04F2B18 00000000 D1011804 C0235F74 22002082 1008FECC 00000000 CF0C8A60
GPR16: D102A9E7 C0239AEC D100F520 D102AB10 0000001F 00000124 C02A0000 D101B000
GPR24: 00000000 C003F3D0 00000528 00000021 00000021 000003E8 00009032 CF3EC000
NIP [C0235FD0] sleep_on_timeout+0x5c/0x114
LR [D100F028] hello_loop+0x28/0x38 [hello]
Call Trace:
[CF3EDF90] [C0239AEC] 0xc0239aec (unreliable)
[CF3EDFD0] [D100F028] hello_loop+0x28/0x38 [hello]
[CF3EDFF0] [C00065D8] original_kernel_thread+0x44/0x60
Instruction dump:
90020000 7c9d2378 7fc000a6 57c0045e 7c000124 543f0024 813f000c 39290001
913f000c 81230000 3801001c 90030000 <90090004> 9121001c 90610020 813f000c
note: insmod[1194] exited with preempt_count 1
Hello module is destroyed
