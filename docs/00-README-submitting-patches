1.0 Overview
------------

This is meant as an overview of understanding how the kernel will be
managed in 3.0 with git.  If you work on BSPs, or kernel patches of
any kind, you really should read this.

Git, by nature wants to track things as they progress
chronologically.  There is no real feature separation - changes
associated with one feature will be mixed in with another.  But our
product needs to present to the world, a git tree that contains a
snapshot of the final version of each patch, grouped together with
all the other patches of that feature, rather than containing all the
internal development history that led up to that final patch
data/sequence.  (in the context of the above discussion, you can
consider a BSP a "feature".)

To achieve this, we will have a backing store (also provided by git)
that will track the changes to all the files/patches, in much the
same way we store patches in CVS in the past.  The patches will be
pulled from this backing store to build up a git tree with all the
kernel features and BSPs of each kernel type present.  This will be
done automatically, and the plan is to publish a nightly version of
this tree internally at some point for convenience.

 ** most people should not be concerned with the backing store **

This forward facing git tree will be built from the latest versions
of the patches in the backing store, and due to the nature of git, it
will be rebuilt from the ground up whenever any significant changes
to the core backing store patches have occurred.  This rebuilding
will take place right up until the final product is sent off for
packaging onto DVDs.  

IMPORTANT: Note that this rebuilding/rebasing means that you can't
simply do a git-pull within a generated tree to get the updates that
are present in a newer generated tree.  This is a fundamental
property of git.
 

2.0 **What this means to people working on the kernel and BSPs**
-----------------------------------------------------------------

At this point in time, you don't have to worry about where and how to
put patches in this backing store.  Instead, you will use git to
clone a tree that has been generated from the backing store, and you
will do your work against that.


  ** To repeat, work against the generated tree, not against
     the store of patches that build the tree **

The rule of thumb is that if you are working on kernel source, or
anything that is normally found in a kernel.org git repository
you should be working against the generated tree. If you are 
working against something that is NOT part of kernel.org 
(i.e. scc, kernel config fragments), then you do work against
the backing store (kernel-*-cache). Working agains the backing
store means that you would generate git diffs from that directory
and not from the generated kernel.

If you aren't sure where you should generate a patch, ask. This
is a new process so won't be familiar to most people.


2.1 How to get a patch into the kernel
---------------------------------------

When you are done your work, you will send out the patches for
review.  The review will be the normal process, and have patches that
are created by "git-format-patch" so that they can be easily applied
by anyone.  Once they pass review, they will be integrated by someone
on the kernel team who is aware of where in the backing store to put
the patches.  

  ** At the moment this person will be Bruce.

If the generated tree that you've been working on has changed a lot
since you did your original clone, you may be asked to rebase your
changes onto a newer version of the generated tree.  There will be
tools to assist with this -- i.e.  kgit-rebase.

If you are assigned to working on a kernel issue or BSP, you will be
given more details on the locations and usage of the generated tree.
This message is meant as more of an overview so folks are kept in the
loop and have a chance to get used to the idea of how things will
unfold.

2.2 Example Workflow - kernel changes
--------------------------------------

  1) clone a kernel

    git clone <path to generated tree> <kernel layer>/git/default_kernel

  2) build a working tree
    
     cd build
     make linux.config

  3) make your changes ...

     vi
     make linux.compile
     ... etc

  4) commit your changes locally

     Note: Follow the patching rules and good git commit practices.

     git commit <file list>
     <enter proper header>

   5) send patches for inclusion

      <pull request>

         or
 
      # assumes patches are on top of master
      git-format-patch -o foo -n --thread master

      # Examples of actual sends to lists, for a single patch and a lump of 10.

      git-send-email --to bruce.ashfield@windriver.com --cc \
      eng-linuxkernel-futures@windriver.com \
      --smtp-server  smtp.wrs.com
      foo/0001-powerpc-reduce-code-duplication-in-legacy_serial-add-UART-parent-types.txt


      git-send-email --compose --subject '[PATCH 0/10] Support for \
      sbc834x/8548/8560 Wind River Boards' --to bruce.ashfield@windriver.com  \
      --smtp-server  smtp.wrs.com ../8xxx-send
