edge exported / managed via git
-------------------------------

The purpose of this document is to describe the properties of the kernel
layer and git repository to allow the export of the Wind River kernel in a
repository based format.

This export is to meet the requirements of customers who, For a variety of
reasons, do not want work primarily with patches. Additionally, open source
contributions and continual up revs are facilitated by this arrangement.

1) The properties of the kernel layer (edge) are:

  o patch series -> git repository conversion.
     - History and commit blobs are created

  o git -> patch series conversion
     - fully formed feature divided patch series are created
     - division of patches into features is only as good as the git
       commits. Incremental submissions will show up as incremental
       patches and are of little use for reconstructing and grouping
       an entire feature.

  o git repositories can be used as patch sources, either
    directly or via the previously mentioned conversion(s).
     - cloning of the repository is not done by the build system.
     - the build system imports an already cloned repository as 
       a shared source
     - imports a particular tag or 'master'

  o the existing organization of clearly separated features from
    the underlying upstream sources, layered to produce a final
    kernel is maintained. A single, fully patched source tree 
    will not be delivered.

  o tracks every major tag of the kernel.org tree
     - optional, self managed, 'master' tree import
 
  o contains patches from:
     - Wind River stable kernels
     - new kernel specific features
     - existing and new BSP support

  o could be maintained completely in git or patch based but the
    existing (1.x, 2.0) delivery mechanism is maintained.
     - git is unlikely to have the flexibility to manage the tree
       the way we need it. So internal management will probably 
       be patch based, with git export and git import.

  o multiple incompatible feature streams must be maintained and
    the flexibility of the existing patch selection and substitution
    mechanisms are maintained.

  o kernel configuration fragments are updated with each major
    kernel revision. * this is currently out of date *

2) The properties of the git repository are:

  o history is partially preserved. no guarantee of permanent history
    being maintained. Since direct submissions from this repository
    to upstream sources are intended.
     - depending on the mechanism used to do block replacement and
       update of features, history may become cluttered and will be
       dropped.

  o the repository is generated from a series of patches. history
    is automatically generated from the contents of the patches.
     - both short and long log.

  o commits are grouped by feature and then subdivided to the 
    individual patches. 

  o incremental commits are avoided, multiple changes to a single
    file are maintained inside of their feature. Updates that belong
    as part of a lower layer feature, require upper level commits 
    to be removed, the feature updated (history changed) and the 
    upper layer features redone (or remerged as the case may be)
      - i.e. pop commits, update, push commits, rebase superset
             git trees. 


3) Git commands of interest:

  o git-clone : --shared --bare
  o git-remote: tag a remote (could be on same box) tree to track                
  o git-rebase: used to manage the enhanced kernel types and do
                automatic fix propagation.
                Merge strategy TBD, this impacts the history of the 
                resulting tree.               
  o git-pull/git-fetch: update the tree.
                        --no-commit: for dry-run support
                        --strategy: merge strategy
                        --tags
  o git-branch: create or delete branches
                <start-point> should be a tag in the standard kernel.
                branch @ a start point for enhanced kernels
  o git-checkout: point a tree at a particular tag.
  o push/pop commands: used to pop fixes to block update a feature
               --no-commit to prevent a commit being done and history
               tracking all the revert(s).
  o git-format-patch:
  o git-rev-list:    
  o git-ls-files:          
  o git-commit --amend: 
