From 6fd0b7ffad3f2c7a2c8ccf5dcb036f1251975e3d Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Fri, 27 Nov 2015 05:11:04 -0500
Subject: [PATCH] mips: Disable preemption before invoking current_cpu_data

On mips, current_cpu_data & cpu_has_fpu defined as follow:
arch/mips/include/asm/cpu-info.h:

arch/mips/include/asm/cpu-features.h:

When invoking current_cpu_data or cpu_has_fpu, smp_processor_id()
triggers preemption check.

Disable preemption before invoking current_cpu_data in
mips_set_process_fp_mode()to prevent following calltrace:

BUG: using smp_processor_id() in preemptible [00000000] code: ld.so.1/2079
caller is mips_set_process_fp_mode+0x224/0x3e0
CPU: 27 PID: 2079 Comm: ld.so.1 Not tainted 4.1.12-WR8.0.0.0_standard #1
Stack : ffffffff80cc0000 ffffffff80ce0000 ffffffff80b70000 ffffffff80ce0000
  ffffffff809e76c0 ffffffff80ce0000 000000000000001b ffffffff80acb420
  ffffffff80acb420 ffffffff80ca6810 0000000000000000 ffffffff801ca454
  0000000000000048 000000000000001b ffffffff80b70000 ffffffff801cad40
  0000000000000000 ffffffff80cc0000 0000000000000000 ffffffff80cbd378
  ffffffff801cb130 ffffffff80ca6830 ffffffff809e7898 000000000000001b
  000000000000081f ffffffff80cbd378 0000000055cf4ee8 0000000055cf4ee8
  000000007ffb0e20 80000003f83fbbc0 80000003f83fbce8 ffffffff8089b5fc
  ffffffff80ad0a07 ffffffff809ddaa0 80000003f79ba880 ffffffff801cbec4
  0000000000000211 ffffffff80158550 000000000000001b 000000000000081f
  ...
Call Trace:
[<ffffffff80158550>] show_stack+0xe8/0x108
[<ffffffff8089b5fc>] dump_stack+0x8c/0xd8
[<ffffffff8058e4c0>] check_preemption_disabled+0x110/0x118
[<ffffffff80154ab4>] mips_set_process_fp_mode+0x224/0x3e0
[<ffffffff80192624>] SyS_prctl+0x3c4/0x4c0
[<ffffffff801689a0>] handle_sys+0x120/0x148

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 arch/mips/kernel/process.c | 16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/arch/mips/kernel/process.c b/arch/mips/kernel/process.c
index 7d8bab9..c5f752a 100644
--- a/arch/mips/kernel/process.c
+++ b/arch/mips/kernel/process.c
@@ -648,15 +648,25 @@ int mips_set_process_fp_mode(struct task_struct *task, unsigned int value)
 		return -EOPNOTSUPP;
 
 	/* Avoid inadvertently triggering emulation */
+	preempt_disable();
 	if ((value & PR_FP_MODE_FR) && cpu_has_fpu &&
-	    !(current_cpu_data.fpu_id & MIPS_FPIR_F64))
+	    !(current_cpu_data.fpu_id & MIPS_FPIR_F64)) {
+		preempt_enable();
 		return -EOPNOTSUPP;
-	if ((value & PR_FP_MODE_FRE) && cpu_has_fpu && !cpu_has_fre)
+	}
+
+	if ((value & PR_FP_MODE_FRE) && cpu_has_fpu && !cpu_has_fre) {
+		preempt_enable();
 		return -EOPNOTSUPP;
+	}
 
 	/* FR = 0 not supported in MIPS R6 */
-	if (!(value & PR_FP_MODE_FR) && cpu_has_fpu && cpu_has_mips_r6)
+	if (!(value & PR_FP_MODE_FR) && cpu_has_fpu && cpu_has_mips_r6) {
+		preempt_enable();
 		return -EOPNOTSUPP;
+	}
+
+	preempt_enable();
 
 	/* Save FP & vector context, then disable FPU & MSA */
 	if (task->signal == current->signal)
-- 
2.0.2

