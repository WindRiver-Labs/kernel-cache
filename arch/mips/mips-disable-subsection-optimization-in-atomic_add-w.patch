From bb71cddb49577213ccd8fa828ceb7c9481166440 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Sun, 15 Aug 2010 14:00:14 -0400
Subject: [PATCH] mips: disable subsection optimization in atomic_add when profiling

The current implementation of atomic_add uses .subsection
directives to move the unlikely condition out of line, in
a similar way that spinlocks do.  But there is an assumption
that the out of line code won't be moved more than 128k away.

Normally we are building with --ffunction-sections, so this isn't
a concern.  But gcc will forcibly disable this option with profiling
enabled, even if you hard code it in the Makefile, e.g:

linux/fs/ocfs2/alloc.c:1: warning: -ffunction-sections disabled; it makes profiling impossible

and on big files like alloc.c with sizes like this:

ocfs2$size alloc.o
   text	   data	    bss	    dec	    hex	filename
 137304	    400	      0	 137704	  219e8	alloc.o
ocfs2$

you break the 128k limit and get these errors

{standard input}: Assembler messages:
{standard input}:871: Error: Branch out of range

which trace back to atomic_add().  The use of subsection in
atomic_add() isn't necessarily a significant optimization, see:

	http://www.spinics.net/lists/mips/msg34820.html

and so disabling it when CONFIG_PROFILING is enabled allows things to
build without failing.  There isn't a hard 1:1 mapping between
CONFIG_PROFILING and the use of "gcc -p ..." but CONFIG_PROFILING is
largely unused, and the use of it here for this seeems to make sense.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 arch/mips/include/asm/atomic.h |   53 +++++++++++++++++++++++++---------------
 1 files changed, 33 insertions(+), 20 deletions(-)

diff --git a/arch/mips/include/asm/atomic.h b/arch/mips/include/asm/atomic.h
index 519197e..a0f190a 100644
--- a/arch/mips/include/asm/atomic.h
+++ b/arch/mips/include/asm/atomic.h
@@ -24,6 +24,19 @@
 #define ATOMIC_INIT(i)    { (i) }
 
 /*
+ * The use of subsections for out of line code assumes that either all of
+ * your text jumps fit in 128kB, or that you are using --function-sections
+ * But you cant use that with profiling; gcc explicitly forbids it.
+ */
+#ifdef CONFIG_FUNCTION_TRACER
+#define SUBSECTION_START
+#define SUBSECTION_END
+#else
+#define SUBSECTION_START	"	.subsection 2		\n"
+#define SUBSECTION_END		"	.previous		\n"
+#endif
+
+/*
  * atomic_read - read atomic variable
  * @v: pointer of type atomic_t
  *
@@ -70,9 +83,9 @@ static __inline__ void atomic_add(int i, atomic_t * v)
 		"	addu	%0, %2					\n"
 		"	sc	%0, %1					\n"
 		"	beqz	%0, 2f					\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
@@ -115,9 +128,9 @@ static __inline__ void atomic_sub(int i, atomic_t * v)
 		"	subu	%0, %2					\n"
 		"	sc	%0, %1					\n"
 		"	beqz	%0, 2f					\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
@@ -163,9 +176,9 @@ static __inline__ int atomic_add_return(int i, atomic_t * v)
 		"	sc	%0, %2					\n"
 		"	beqz	%0, 2f					\n"
 		"	addu	%0, %1, %3				\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (result), "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter)
@@ -215,9 +228,9 @@ static __inline__ int atomic_sub_return(int i, atomic_t * v)
 		"	sc	%0, %2					\n"
 		"	beqz	%0, 2f					\n"
 		"	subu	%0, %1, %3				\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (result), "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter)
@@ -282,9 +295,9 @@ static __inline__ int atomic_sub_if_positive(int i, atomic_t * v)
 		"	beqz	%0, 2f					\n"
 		"	 subu	%0, %1, %3				\n"
 		"	.set	reorder					\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"1:							\n"
 		"	.set	mips0					\n"
 		: "=&r" (result), "=&r" (temp), "=m" (v->counter)
@@ -449,9 +462,9 @@ static __inline__ void atomic64_add(long i, atomic64_t * v)
 		"	addu	%0, %2					\n"
 		"	scd	%0, %1					\n"
 		"	beqz	%0, 2f					\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
@@ -494,9 +507,9 @@ static __inline__ void atomic64_sub(long i, atomic64_t * v)
 		"	subu	%0, %2					\n"
 		"	scd	%0, %1					\n"
 		"	beqz	%0, 2f					\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter));
@@ -542,9 +555,9 @@ static __inline__ long atomic64_add_return(long i, atomic64_t * v)
 		"	scd	%0, %2					\n"
 		"	beqz	%0, 2f					\n"
 		"	addu	%0, %1, %3				\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (result), "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter)
@@ -594,9 +607,9 @@ static __inline__ long atomic64_sub_return(long i, atomic64_t * v)
 		"	scd	%0, %2					\n"
 		"	beqz	%0, 2f					\n"
 		"	subu	%0, %1, %3				\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"	.set	mips0					\n"
 		: "=&r" (result), "=&r" (temp), "=m" (v->counter)
 		: "Ir" (i), "m" (v->counter)
@@ -661,9 +674,9 @@ static __inline__ long atomic64_sub_if_positive(long i, atomic64_t * v)
 		"	beqz	%0, 2f					\n"
 		"	 dsubu	%0, %1, %3				\n"
 		"	.set	reorder					\n"
-		"	.subsection 2					\n"
+		SUBSECTION_START
 		"2:	b	1b					\n"
-		"	.previous					\n"
+		SUBSECTION_END
 		"1:							\n"
 		"	.set	mips0					\n"
 		: "=&r" (result), "=&r" (temp), "=m" (v->counter)
-- 
1.6.5.2

