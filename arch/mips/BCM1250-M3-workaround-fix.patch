From aab2d166d450860b1684daea02cd0868571581e2 Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Mon, 12 Apr 2010 15:30:52 +0800
Subject: [PATCH] BCM1250 M3 workaround fix

The two similar upstream IDs from
git://git.kernel.org/pub/scm/linux/kernel/git/ralf/linux.git
as follows:
  68fddf63633a0e1a6b68a816ece352f3c21af700
  9c6befe8c744fa2f03cab36dead503c77950c3b8

Original M3 workaround code in tlb refill handler for
BCM1250 uncorrectly handles the kseg2 area address
(0xFFFFFFFFC0000000 and above), and causes soft hang
when kernel loads modules.

Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/mips/include/asm/uasm.h |    3 +-
 arch/mips/mm/tlbex.c         |   47 ++++++++++++++++++-----------------------
 2 files changed, 23 insertions(+), 27 deletions(-)

diff --git a/arch/mips/include/asm/uasm.h b/arch/mips/include/asm/uasm.h
index 697e40c..7b6667e 100644
--- a/arch/mips/include/asm/uasm.h
+++ b/arch/mips/include/asm/uasm.h
@@ -4,7 +4,7 @@
  * for more details.
  *
  * Copyright (C) 2004, 2005, 2006, 2008  Thiemo Seufer
- * Copyright (C) 2005  Maciej W. Rozycki
+ * Copyright (C) 2005, 2008  Maciej W. Rozycki
  * Copyright (C) 2006  Ralf Baechle (ralf@linux-mips.org)
  */
 
@@ -83,6 +83,7 @@ Ip_u1s2(_lui);
 Ip_u2s3u1(_lw);
 Ip_u1u2u3(_mfc0);
 Ip_u1u2u3(_mtc0);
+Ip_u3u1u2(_or);
 Ip_u2u1u3(_ori);
 Ip_u3u1u2(_or);
 Ip_u2s3u1(_pref);
diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c
index bdb39c3..d0edba0 100644
--- a/arch/mips/mm/tlbex.c
+++ b/arch/mips/mm/tlbex.c
@@ -230,6 +230,23 @@ static void __cpuinit build_r3000_tlb_refill_handler(void)
 static u32 final_handler[64] __cpuinitdata;
 
 /*
+ * To avoid the BCM1250 M3 erratum check whether EntryHi is consistent
+ * with BadVAddr and return for the exception to retrigger if not.
+ */
+static void __cpuinit build_bcm1250_m3_war(u32 **p, struct uasm_reloc **r)
+{
+	uasm_i_dmfc0(p, K0, C0_BADVADDR);
+	uasm_i_dmfc0(p, K1, C0_ENTRYHI);
+	uasm_i_xor(p, K0, K0, K1);
+	uasm_i_dsll(p, K1, K0, 20);
+	uasm_i_dsrl32(p, K1, K1, (20 + PAGE_SHIFT + 1) - 32);
+	uasm_i_dsrl32(p, K0, K0, 30);
+	uasm_i_or(p, K0, K0, K1);
+	uasm_il_bnez(p, r, K0, label_leave);
+	/* No need for uasm_i_nop */
+}
+
+/*
  * Hazards
  *
  * From the IDT errata for the QED RM5230 (Nevada), processor revision 1.0:
@@ -855,19 +872,8 @@ static void __cpuinit build_r4000_tlb_refill_handler(void)
 	/*
 	 * create the plain linear handler
 	 */
-	if (bcm1250_m3_war()) {
-		unsigned int segbits = 44;
-
-		uasm_i_dmfc0(&p, K0, C0_BADVADDR);
-		uasm_i_dmfc0(&p, K1, C0_ENTRYHI);
-		uasm_i_xor(&p, K0, K0, K1);
-		uasm_i_dsrl_safe(&p, K1, K0, 62);
-		uasm_i_dsrl_safe(&p, K0, K0, 12 + 1);
-		uasm_i_dsll_safe(&p, K0, K0, 64 + 12 + 1 - segbits);
-		uasm_i_or(&p, K0, K0, K1);
-		uasm_il_bnez(&p, &r, K0, label_leave);
-		/* No need for uasm_i_nop */
-	}
+	if (bcm1250_m3_war())
+		build_bcm1250_m3_war(&p, &r);
 
 #ifdef CONFIG_64BIT
 	build_get_pmde64(&p, &l, &r, K0, K1); /* get pmd in K1 */
@@ -1375,19 +1381,8 @@ static void __cpuinit build_r4000_tlb_load_handler(void)
 	memset(labels, 0, sizeof(labels));
 	memset(relocs, 0, sizeof(relocs));
 
-	if (bcm1250_m3_war()) {
-		unsigned int segbits = 44;
-
-		uasm_i_dmfc0(&p, K0, C0_BADVADDR);
-		uasm_i_dmfc0(&p, K1, C0_ENTRYHI);
-		uasm_i_xor(&p, K0, K0, K1);
-		uasm_i_dsrl_safe(&p, K1, K0, 62);
-		uasm_i_dsrl_safe(&p, K0, K0, 12 + 1);
-		uasm_i_dsll_safe(&p, K0, K0, 64 + 12 + 1 - segbits);
-		uasm_i_or(&p, K0, K0, K1);
-		uasm_il_bnez(&p, &r, K0, label_leave);
-		/* No need for uasm_i_nop */
-	}
+	if (bcm1250_m3_war())
+		build_bcm1250_m3_war(&p, &r);
 
 	build_r4000_tlbchange_handler_head(&p, &l, &r, K0, K1);
 	build_pte_present(&p, &r, K0, K1, label_nopage_tlbl);
-- 
1.6.0.3

