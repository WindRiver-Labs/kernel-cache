From cf7c4e32a9bee3d0fb94e0b21a5ca3e5384a266a Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Mon, 29 Nov 2010 17:24:25 +0800
Subject: [PATCH 01/13] PowerPC:fsl_elbc_nand: Hard-code the FBAR/FPAR split.

The hardware has separate registers for block and page-within-block,
but the division between the two has no apparent relation to the
actual erase block size of the NAND chip. So we should use hard-code
to fill FBAR & FPAR registers.

chip->phys_erase_shift and chip->page_shift were calculated from
information read from NAND flash chip (drivers/mtd/nand/nand_base.c
nand_get_flash_type()), and the values are used by nand layer as
properties of NAND flash chip.

For the elbc_fcm nand driver, it need divide the page_addr to fill
FBAR & FPAR register, the rule to fill register is defined by the
register definition. Freescale set 5 bit for small page and 6 bit for
large page in FPAR, kernel use FPAR_SP_PI (0x00007C00) and FPAR_LP_PI
(0x0003F000) to describe this.

So there is no relationship between chip->phys_erase_shift and
chip->page_shift and FBAR & FPAR, we need add marco in fsl_lbc.h
corresponding FPAR_SP_PI & FPAR_LP_PI for kernel use to fill FBAR
register.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 arch/powerpc/include/asm/fsl_lbc.h |    2 ++
 drivers/mtd/nand/fsl_elbc_nand.c   |    5 ++---
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/arch/powerpc/include/asm/fsl_lbc.h b/arch/powerpc/include/asm/fsl_lbc.h
index 576aedd..0b838ac 100644
--- a/arch/powerpc/include/asm/fsl_lbc.h
+++ b/arch/powerpc/include/asm/fsl_lbc.h
@@ -222,6 +222,8 @@ struct fsl_lbc_regs {
 #define FCR_CMD3_SHIFT        0
 	__be32 fbar;            /**< Flash Block Address Register */
 #define FBAR_BLK     0x00FFFFFF
+#define FBAR_SP_BAR_SHIFT		5
+#define FBAR_LP_BAR_SHIFT		6
 	__be32 fpar;            /**< Flash Page Address Register */
 #define FPAR_SP_PI   0x00007C00
 #define FPAR_SP_PI_SHIFT     10
diff --git a/drivers/mtd/nand/fsl_elbc_nand.c b/drivers/mtd/nand/fsl_elbc_nand.c
index 93e9d2d..0bb799b 100644
--- a/drivers/mtd/nand/fsl_elbc_nand.c
+++ b/drivers/mtd/nand/fsl_elbc_nand.c
@@ -156,15 +156,14 @@ static void set_addr(struct mtd_info *mtd, int column, int page_addr, int oob)
 
 	elbc_fcm_ctrl->page = page_addr;
 
-	out_be32(&lbc->fbar,
-	         page_addr >> (chip->phys_erase_shift - chip->page_shift));
-
 	if (priv->page_size) {
+		out_be32(&lbc->fbar, page_addr >> FBAR_LP_BAR_SHIFT);
 		out_be32(&lbc->fpar,
 		         ((page_addr << FPAR_LP_PI_SHIFT) & FPAR_LP_PI) |
 		         (oob ? FPAR_LP_MS : 0) | column);
 		buf_num = (page_addr & 1) << 2;
 	} else {
+		out_be32(&lbc->fbar, page_addr >> FBAR_SP_BAR_SHIFT);
 		out_be32(&lbc->fpar,
 		         ((page_addr << FPAR_SP_PI_SHIFT) & FPAR_SP_PI) |
 		         (oob ? FPAR_SP_MS : 0) | column);
-- 
1.6.5.2

