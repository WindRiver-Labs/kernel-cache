From 009b0a7bc72fd157a0894152e7aa5862236cb89e Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Fri, 2 Nov 2012 15:56:17 +0800
Subject: [PATCH] powerpc/vdso: Remove redundant locking in update_vsyscall_tz()

Locking is not only unnecessary because the vdso code copies the data
unprotected in __kernel_gettimeofday() but also erroneous because updating
the tb_update_count is not atomic and introduces a hard to reproduce race
condition between update_vsyscall() and update_vsyscall_tz(), which further
causes user space process to loop forever in vdso code.

The below scenario describes the race condition,
x==0    Boot CPU            		other CPU
	proc_P: x==0
	    timer interrupt
		update_vsyscall:
x==1		    x++;sync		settimeofday
					    update_vsyscall_tz
x==2                    			x++;sync
x==3        	    sync;x++
                        			sync;x++
	proc_P: x==3 (loops until x becomes even)

Because the ++(vdso_data->tb_update_count) would be implemented as three
separate instructions and not atomic on powerpc.

A similar change was made for x86 in commit 6c260d58634
("x86: vdso: Remove bogus locking in update_vsyscall_tz")

Signed-off-by: Shan Hai <shan.hai@windriver.com>
---
 arch/powerpc/kernel/time.c |    5 -----
 1 files changed, 0 insertions(+), 5 deletions(-)

diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 629965d..14cf912 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -929,13 +929,8 @@ void update_vsyscall(struct timespec *wall_time, struct clocksource *clock,
 
 void update_vsyscall_tz(void)
 {
-	/* Make userspace gettimeofday spin until we're done. */
-	++vdso_data->tb_update_count;
-	smp_mb();
 	vdso_data->tz_minuteswest = sys_tz.tz_minuteswest;
 	vdso_data->tz_dsttime = sys_tz.tz_dsttime;
-	smp_mb();
-	++vdso_data->tb_update_count;
 }
 
 void paravirt_clocksource_init(void)
-- 
1.7.0

