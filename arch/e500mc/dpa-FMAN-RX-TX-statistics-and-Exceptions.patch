From f8143dcefcc167b5723e9393217752327ced1d74 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Wed, 4 Aug 2010 15:20:41 +0800
Subject: [PATCH 160/252] dpa:FMAN RX/TX statistics and Exceptions.

It is from FSL vendor SDK 2.x.

Solution for BUG 5096 - B2.1 branch
  Add support for Tx/Rx statistics only for the
  ports associated with a mac interface. For all
  other ports show an warning to the user.

Solution for BUG 5155 - B2.1 branch
  Disable MAC exceptions; this should be handle
  in the MAC module. Initialize the modules before
   the exceptions settings.

It is from patch in FSL SDK 2.1:
  kernel-2.6.30-dpa-FMAN-RX-TX-statistics-and-Exceptions.patch from

Signed-off-by: Andrei Pistirica <sorin.pistirica@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c |  218 ++++++++++++--------
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h |    1 -
 2 files changed, 136 insertions(+), 83 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
index d4e0a56..a995e0f 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
@@ -239,6 +239,95 @@ static int fm_pcd_proc_dump_stats(char *buffer, char **start, off_t offset,
     return numOfWrittenChars;
 }
 
+static void fm_tx_port_proc_dump_stats(t_Handle *h_ProcBuff,
+				t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
+{
+	t_LnxWrpFmDev *p_LnxWrpFmDev = (
+			t_LnxWrpFmDev *)p_LnxWrpFmPortDev->h_LnxWrpFmDev;
+	ProcBuff_Write(*h_ProcBuff, "\tFM %d TX Port %d counters:\n"
+#ifdef PERFORMANCE_COUNTERS
+	/* TODO: Initialize the performance counters from userspace... */
+		"e_FM_PORT_COUNTERS_CYCLE=%d\n"
+		"e_FM_PORT_COUNTERS_TASK_UTIL=%d\n"
+		"e_FM_PORT_COUNTERS_QUEUE_UTIL=%d\n"
+		"e_FM_PORT_COUNTERS_DMA_UTIL=%d\n"
+             	"e_FM_PORT_COUNTERS_FIFO_UTIL=%d\n"
+#endif
+		"e_FM_PORT_COUNTERS_FRAME=%d\n"
+		"e_FM_PORT_COUNTERS_DISCARD_FRAME=%d\n"
+		"e_FM_PORT_COUNTERS_DEALLOC_BUF=%d\n"
+		"e_FM_PORT_COUNTERS_LENGTH_ERR=%d\n"
+		"e_FM_PORT_COUNTERS_UNSUPPRTED_FORMAT=%d\n"
+		"e_FM_PORT_COUNTERS_DEQ_TOTAL=%d\n"
+		"e_FM_PORT_COUNTERS_ENQ_TOTAL=%d\n"
+		"e_FM_PORT_COUNTERS_DEQ_FROM_DEFAULT=%d\n"
+		"e_FM_PORT_COUNTERS_DEQ_CONFIRM=%d\n",
+		p_LnxWrpFmDev->id,
+		p_LnxWrpFmPortDev->id,
+#ifdef PERFORMANCE_COUNTERS
+	/* TODO: Initialize the performance counters from userspace... */
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_CYCLE),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_TASK_UTIL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_QUEUE_UTIL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DMA_UTIL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_FIFO_UTIL),
+#endif
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_FRAME),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DISCARD_FRAME),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEALLOC_BUF),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_LENGTH_ERR),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_UNSUPPRTED_FORMAT),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEQ_TOTAL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_ENQ_TOTAL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEQ_FROM_DEFAULT),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEQ_CONFIRM));
+}
+
+static void fm_rx_port_proc_dump_stats(t_Handle *h_ProcBuff,t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
+{
+    t_LnxWrpFmDev *p_LnxWrpFmDev = (t_LnxWrpFmDev *)p_LnxWrpFmPortDev->h_LnxWrpFmDev;
+
+    ProcBuff_Write(*h_ProcBuff,
+            "\tFM %d RX Port %d counters:\n"
+#ifdef PERFORMANCE_COUNTERS
+		/* TODO: Initialize the performance counters from userspace... */
+		"e_FM_PORT_COUNTERS_CYCLE=%d\n"
+		"e_FM_PORT_COUNTERS_TASK_UTIL=%d\n"
+		"e_FM_PORT_COUNTERS_QUEUE_UTIL=%d\n"
+		"e_FM_PORT_COUNTERS_DMA_UTIL=%d\n"
+		"e_FM_PORT_COUNTERS_FIFO_UTIL=%d\n"
+			"e_FM_PORT_COUNTERS_RX_PAUSE_ACTIVATION=%d\n"
+#endif
+		"e_FM_PORT_COUNTERS_FRAME=%d\n"
+		"e_FM_PORT_COUNTERS_DISCARD_FRAME=%d\n"
+		"e_FM_PORT_COUNTERS_DEALLOC_BUF=%d\n"
+		"e_FM_PORT_COUNTERS_RX_BAD_FRAME=%d\n"
+		"e_FM_PORT_COUNTERS_RX_LARGE_FRAME=%d\n"
+		"e_FM_PORT_COUNTERS_RX_OUT_OF_BUFFERS_DISCARD=%d\n"
+		"e_FM_PORT_COUNTERS_RX_FILTER_FRAME=%d\n"
+		"e_FM_PORT_COUNTERS_RX_LIST_DMA_ERR=%d\n"
+		"e_FM_PORT_COUNTERS_ENQ_TOTAL=%d\n",
+		p_LnxWrpFmDev->id,
+		p_LnxWrpFmPortDev->id,
+#ifdef PERFORMANCE_COUNTERS
+	/* TODO: Initialize the performance counters from userspace... */
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_CYCLE),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_TASK_UTIL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_QUEUE_UTIL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DMA_UTIL),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_FIFO_UTIL),
+#endif
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_FRAME),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DISCARD_FRAME),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEALLOC_BUF),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_BAD_FRAME),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_LARGE_FRAME),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_OUT_OF_BUFFERS_DISCARD),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_FILTER_FRAME),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_LIST_DMA_ERR),
+	FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_ENQ_TOTAL));
+}
+
 static int fm_port_proc_dump_stats(char *buffer, char **start, off_t offset,
                                    int length, int *eof, void *data)
 {
@@ -248,11 +337,12 @@ static int fm_port_proc_dump_stats(char *buffer, char **start, off_t offset,
     unsigned long               flags;
     int                         numOfWrittenChars;
 
-    if (!p_LnxWrpFmPortDev)
+    if (!p_LnxWrpFmPortDev || !p_LnxWrpFmPortDev->h_Dev)
     {
         REPORT_ERROR(MINOR, E_INVALID_STATE, ("FM-Port not initialized!"));
         return 0;
     }
+
     p_LnxWrpFmDev = (t_LnxWrpFmDev *)p_LnxWrpFmPortDev->h_LnxWrpFmDev;
     if (!p_LnxWrpFmDev->active || !p_LnxWrpFmDev->h_Dev)
     {
@@ -261,58 +351,25 @@ static int fm_port_proc_dump_stats(char *buffer, char **start, off_t offset,
     }
 
     local_irq_save(flags);
-    ProcBuff_Write (h_ProcBuff,
-             "\tFM %d %s Port %d counters:\n"
-             "e_FM_PORT_COUNTERS_CYCLE=%d\n"
-             "e_FM_PORT_COUNTERS_TASK_UTIL=%d\n"
-             "e_FM_PORT_COUNTERS_QUEUE_UTIL=%d\n"
-             "e_FM_PORT_COUNTERS_DMA_UTIL=%d\n"
-             "e_FM_PORT_COUNTERS_FIFO_UTIL=%d\n"
-             "e_FM_PORT_COUNTERS_RX_PAUSE_ACTIVATION=%d\n"
-             "e_FM_PORT_COUNTERS_FRAME=%d\n"
-             "e_FM_PORT_COUNTERS_DISCARD_FRAME=%d\n"
-             "e_FM_PORT_COUNTERS_DEALLOC_BUF=%d\n"
-             "e_FM_PORT_COUNTERS_RX_BAD_FRAME=%d\n"
-             "e_FM_PORT_COUNTERS_RX_LARGE_FRAME=%d\n"
-             "e_FM_PORT_COUNTERS_RX_OUT_OF_BUFFERS_DISCARD=%d\n"
-             "e_FM_PORT_COUNTERS_RX_FILTER_FRAME=%d\n"
-             "e_FM_PORT_COUNTERS_RX_LIST_DMA_ERR=%d\n"
-             "e_FM_PORT_COUNTERS_WRED_DISCARD=%d\n"
-             "e_FM_PORT_COUNTERS_LENGTH_ERR=%d\n"
-             "e_FM_PORT_COUNTERS_UNSUPPRTED_FORMAT=%d\n"
-             "e_FM_PORT_COUNTERS_DEQ_TOTAL=%d\n"
-             "e_FM_PORT_COUNTERS_ENQ_TOTAL=%d\n"
-             "e_FM_PORT_COUNTERS_DEQ_FROM_DEFAULT=%d\n"
-             "e_FM_PORT_COUNTERS_DEQ_CONFIRM =%d\n",
-             p_LnxWrpFmDev->id,
-             /*(oh ? "OH" : (rx ? "RX" : "TX"))*/"unknown",
-             p_LnxWrpFmPortDev->id,
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_CYCLE),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_TASK_UTIL),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_QUEUE_UTIL),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DMA_UTIL),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_FIFO_UTIL),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_PAUSE_ACTIVATION),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_FRAME),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DISCARD_FRAME),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEALLOC_BUF),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_BAD_FRAME),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_LARGE_FRAME),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_OUT_OF_BUFFERS_DISCARD),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_FILTER_FRAME),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_RX_LIST_DMA_ERR),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_WRED_DISCARD),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_LENGTH_ERR),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_UNSUPPRTED_FORMAT),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEQ_TOTAL),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_ENQ_TOTAL),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEQ_FROM_DEFAULT),
-             FM_PORT_GetCounter(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_COUNTERS_DEQ_CONFIRM)
-             );
+
+    switch(p_LnxWrpFmPortDev->settings.param.portType){
+    case e_FM_PORT_TYPE_RX:
+    case e_FM_PORT_TYPE_RX_10G :
+        fm_rx_port_proc_dump_stats(&h_ProcBuff,p_LnxWrpFmPortDev);
+        break;
+    case e_FM_PORT_TYPE_TX:
+    case e_FM_PORT_TYPE_TX_10G:
+        fm_tx_port_proc_dump_stats(&h_ProcBuff,p_LnxWrpFmPortDev);
+        break;
+    default:
+        REPORT_ERROR(MINOR, E_INVALID_STATE, ("Unsupported statistics !"));
+        break;
+    };
 
     numOfWrittenChars = ProcBuff_GetNumOfWrittenChars(h_ProcBuff);
-    ProcBuff_Free(h_ProcBuff);
+
     local_irq_restore(flags);
+    ProcBuff_Free(h_ProcBuff);
 
     return numOfWrittenChars;
 }
@@ -1298,7 +1355,10 @@ static t_Error InitFmPcdDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
                                                        LNXWRP_FM_NUM_OF_SHARED_PROFILES))!= E_OK)
             RETURN_ERROR(MAJOR, err, NO_MSG);
 
-        if (p_LnxWrpFmDev->err_irq != 0) {
+	if((err = FM_PCD_Init(p_LnxWrpFmDev->h_PcdDev))!= E_OK)
+            RETURN_ERROR(MAJOR, err, NO_MSG);
+
+        if (p_LnxWrpFmDev->err_irq == 0) {
             FM_PCD_SetException(p_LnxWrpFmDev->h_PcdDev,e_FM_PCD_KG_EXCEPTION_DOUBLE_ECC,FALSE);
             FM_PCD_SetException(p_LnxWrpFmDev->h_PcdDev,e_FM_PCD_KG_EXCEPTION_KEYSIZE_OVERFLOW,FALSE);
             FM_PCD_SetException(p_LnxWrpFmDev->h_PcdDev,e_FM_PCD_PLCR_EXCEPTION_INIT_ENTRY_ERROR,FALSE);
@@ -1307,9 +1367,6 @@ static t_Error InitFmPcdDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
             FM_PCD_SetException(p_LnxWrpFmDev->h_PcdDev,e_FM_PCD_PRS_EXCEPTION_ILLEGAL_ACCESS,FALSE);
             FM_PCD_SetException(p_LnxWrpFmDev->h_PcdDev,e_FM_PCD_PRS_EXCEPTION_PORT_ILLEGAL_ACCESS,FALSE);
         }
-
-        if((err = FM_PCD_Init(p_LnxWrpFmDev->h_PcdDev))!= E_OK)
-            RETURN_ERROR(MAJOR, err, NO_MSG);
     }
 
     return E_OK;
@@ -1348,7 +1405,10 @@ static t_Error InitFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
     if (FM_ConfigResetOnInit(p_LnxWrpFmDev->h_Dev, TRUE) != E_OK)
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
 
-    if (p_LnxWrpFmDev->err_irq != 0) {
+    if (FM_Init(p_LnxWrpFmDev->h_Dev) != E_OK)
+        RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
+
+    if (p_LnxWrpFmDev->err_irq == 0) {
         FM_SetException(p_LnxWrpFmDev->h_Dev, e_FM_EX_DMA_BUS_ERROR,FALSE);
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_DMA_READ_ECC,FALSE);
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_DMA_SYSTEM_WRITE_ECC,FALSE);
@@ -1357,7 +1417,8 @@ static t_Error InitFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_FPM_SINGLE_ECC,FALSE);
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_FPM_DOUBLE_ECC,FALSE);
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_IRAM_ECC,FALSE);
-        FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_MURAM_ECC,FALSE);
+	/* TODO: FmDisableRamsEcc assert for ramsEccOwners.
+	 * FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_MURAM_ECC,FALSE);*/
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_QMI_DOUBLE_ECC,FALSE);
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_QMI_DEQ_FROM_UNKNOWN_PORTID,FALSE);
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_BMI_LIST_RAM_ECC,FALSE);
@@ -1365,10 +1426,6 @@ static t_Error InitFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
         FM_SetException(p_LnxWrpFmDev->h_Dev,e_FM_EX_BMI_STATISTICS_RAM_ECC, FALSE);
     }
 
-    if (FM_Init(p_LnxWrpFmDev->h_Dev) != E_OK)
-        RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
-
-//    return InitFmPcdDev(p_LnxWrpFmDev);
     return E_OK;
 }
 
@@ -1500,7 +1557,7 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
 
     int                 i = 0;
 
-    if (!p_LnxWrpFmPortDev->active || p_LnxWrpFmPortDev->initialized)
+    if (!p_LnxWrpFmPortDev->active || p_LnxWrpFmPortDev->h_Dev)
         return E_INVALID_STATE;
 
     if ((p_LnxWrpFmPortDev->h_Dev = FM_PORT_Config(&p_LnxWrpFmPortDev->settings.param)) == NULL)
@@ -1515,22 +1572,6 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
         if ((errCode = FM_PORT_ConfigDeqPrefetchOption(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_DEQ_FULL_PREFETCH)) != E_OK)
              RETURN_ERROR(MAJOR, errCode, NO_MSG);
     }
-
-    if (((t_LnxWrpFmDev *)p_LnxWrpFmPortDev->h_LnxWrpFmDev)->err_irq != 0) {
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_MDIO_SCAN_EVENTMDIO,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_MDIO_CMD_CMPL,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_REM_FAULT,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_LOC_FAULT,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_1TX_ECC_ER,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_TX_FIFO_UNFL,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_TX_FIFO_OVFL,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_TX_ER,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_FIFO_OVFL,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_ECC_ER,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_JAB_FRM,FALSE);
-        FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_OVRSZ_FRM,FALSE);
-    }
-
     /* Call the driver's advanced configuration routines, if requested:
        Compare the function pointer of each entry to the available routines,
        and invoke the matching routine with proper casting of arguments. */
@@ -1549,14 +1590,27 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
     if (FM_PORT_Init(p_LnxWrpFmPortDev->h_Dev) != E_OK)
         RETURN_ERROR(MAJOR, E_INVALID_STATE, NO_MSG);
 
-    FM_PORT_Disable(p_LnxWrpFmPortDev->h_Dev);
+/* TODO: Implement f_FM_MAC_SetException...
+	if (((t_LnxWrpFmDev *)p_LnxWrpFmPortDev->h_LnxWrpFmDev)->err_irq == 0) {
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_MDIO_SCAN_EVENTMDIO,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_MDIO_CMD_CMPL,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_REM_FAULT,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_LOC_FAULT,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_1TX_ECC_ER,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_TX_FIFO_UNFL,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_TX_FIFO_OVFL,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_TX_ER,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_FIFO_OVFL,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_ECC_ER,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_JAB_FRM,FALSE);
+	FM_MAC_SetException(p_LnxWrpFmPortDev->h_Dev, e_FM_MAC_EX_10G_RX_OVRSZ_FRM,FALSE);
+    }
+*/
 
     if ((p_LnxWrpFmPortDev->defPcd != e_NO_PCD) &&
         (InitFmPort3TupleDefPcd(p_LnxWrpFmPortDev) != E_OK))
         RETURN_ERROR(MAJOR, E_INVALID_STATE, NO_MSG);
 
-    p_LnxWrpFmPortDev->initialized = TRUE;
-
     return E_OK;
 }
 
@@ -1665,8 +1719,8 @@ static int fm_open(struct inode *inode, struct file *file)
             return -EINVAL;
 
         /* if trying to open port, check if it initialized */
-        if (!p_LnxWrpFmPortDev->initialized)
-            return -ENODEV;
+	if (!p_LnxWrpFmPortDev->h_Dev)
+		return -ENODEV;
 
         p_LnxWrpFmPortDev = (t_LnxWrpFmPortDev *)fm_port_bind(p_LnxWrpFmPortDev->dev);
         file->private_data = p_LnxWrpFmPortDev;
diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
index 244bb22..e259c0b 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
@@ -74,7 +74,6 @@ typedef struct {
     int                         minor;
     char                        name[20];
     bool                        active;
-    bool                        initialized;
     uint64_t                    baseAddr;
     uint32_t                    memSize;
     t_WrpFmPortDevSettings      settings;
-- 
1.6.5.2

