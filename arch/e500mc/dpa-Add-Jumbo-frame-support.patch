From 97b666e81ab8af6ea808036d4d21b2a7d314f428 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Wed, 18 Aug 2010 11:04:39 +0800
Subject: [PATCH 170/252] dpa: Add Jumbo frame support

From FSL vendor SDK 2.x.

We add support for changing the MTU for the device.  Instead
of changing the MAXFRM setting every time we change the MTU
(there are errata associated with changing that), we set the
FM up to accept frames up to 9600 bytes, and then we modify
the driver to drop any frame longer than the current MTU.

Signed-off-by: Andy Fleming <afleming@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/net/dpa/NetCommSw/Peripherals/FM/fm.h      |    2 +-
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c |   21 ++++++++++++++++++++
 drivers/net/dpa/dpa.c                              |   15 ++++++++++++-
 drivers/net/dpa/mac-api.c                          |    9 ++++++++
 4 files changed, 44 insertions(+), 3 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/fm.h b/drivers/net/dpa/NetCommSw/Peripherals/FM/fm.h
index c701d8b..8e66b12 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/fm.h
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/fm.h
@@ -117,7 +117,7 @@
                                             FM_EX_IRAM_ECC                  |\
                                             FM_EX_NURAM_ECC                 )
 #define DEFAULT_totalNumOfTasks             96
-#define DEFAULT_totalFifoSize               (128*KILOBYTE)
+#define DEFAULT_totalFifoSize               (132*KILOBYTE)
 #define DEFAULT_maxNumOfOpenDmas            24
 #define DEFAULT_eccEnable                   FALSE
 #define DEFAULT_dispLimit                   16
diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
index a995e0f..7f31cd7 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
@@ -1572,6 +1572,27 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
         if ((errCode = FM_PORT_ConfigDeqPrefetchOption(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_DEQ_FULL_PREFETCH)) != E_OK)
              RETURN_ERROR(MAJOR, errCode, NO_MSG);
     }
+
+	{
+		t_FmPortRsrc    portRsrc;
+		t_Error         errCode;
+
+		if (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX_10G)
+			portRsrc.num = 21504;
+		else if (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_RX_10G)
+			portRsrc.num = 23040;
+		else if (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX)
+			portRsrc.num = 10752;
+		else if (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_RX)
+			portRsrc.num = 11520;
+		else /* Offline-Parsing port */
+			portRsrc.num = 10752;
+
+		portRsrc.extra = 0;
+
+		if ((errCode = FM_PORT_ConfigSizeOfFifo(p_LnxWrpFmPortDev->h_Dev, &portRsrc)) != E_OK)
+		     RETURN_ERROR(MAJOR, errCode, NO_MSG);
+	}
     /* Call the driver's advanced configuration routines, if requested:
        Compare the function pointer of each entry to the available routines,
        and invoke the matching routine with proper casting of arguments. */
diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index 7ebc7c9..d0e2527 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -124,7 +124,7 @@ struct dpa_bp {
 
 static const size_t dpa_bp_size[] __devinitconst = {
 	/* Keep these sorted */
- 	DPA_BP_SIZE(1536)
+	DPA_BP_SIZE(9600)
 };
 
 static struct dpa_bp *dpa_bp_array[64];
@@ -803,6 +803,13 @@ dpa_get_stats(struct net_device *net_dev)
 	return &net_dev->stats;
 }
 
+static int dpa_change_mtu(struct net_device *net_dev, int new_mtu)
+{
+	net_dev->mtu = new_mtu;
+
+	return 0;
+}
+
 static void __cold dpa_change_rx_flags(struct net_device *net_dev, int flags)
 {
 	int			 _errno;
@@ -932,7 +939,10 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 
 	skb = NULL;
 	size = dpa_fd_length(&dpa_fd->fd);
-
+	if (size > net_dev->mtu) {
+		net_dev->stats.rx_dropped++;
+		goto _return_dpa_fd_release;
+	}
 	if (skb == NULL) {
 		skb = __netdev_alloc_skb(net_dev,
 				DPA_BP_HEAD + NET_IP_ALIGN + size, GFP_ATOMIC);
@@ -1625,6 +1635,7 @@ static const struct net_device_ops dpa_netdev_ops = {
 	.ndo_set_mac_address = eth_mac_addr,
 	.ndo_validate_addr = eth_validate_addr,
 	.ndo_select_queue = dpa_select_queue,
+	.ndo_change_mtu = dpa_change_mtu,
 };
 
 static int __devinit __cold __attribute__((nonnull))
diff --git a/drivers/net/dpa/mac-api.c b/drivers/net/dpa/mac-api.c
index e8b0c87..7619bf0 100644
--- a/drivers/net/dpa/mac-api.c
+++ b/drivers/net/dpa/mac-api.c
@@ -134,6 +134,15 @@ static int __devinit __cold init(struct mac_device *mac_dev)
 		goto _return;
 	}
 
+	err = FM_MAC_ConfigMaxFrameLength(priv->mac, 9600);
+	_errno = -GET_ERROR_TYPE(err);
+	if (unlikely(_errno < 0)) {
+		cpu_dev_err(mac_dev->dev,
+		"%s:%hu:%s(): FM_MAC_ConfigMaxFrameLength() = 0x%08x\n",
+		 __file__, __LINE__, __func__, err);
+	goto _return_fm_mac_free;
+	}
+
 	err = FM_MAC_ConfigPadAndCrc(priv->mac, true);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0)) {
-- 
1.6.5.2

