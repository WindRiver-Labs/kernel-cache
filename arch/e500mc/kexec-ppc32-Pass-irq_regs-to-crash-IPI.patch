From f24eff7dcbc453e0730d0ec8151b4f655252af7e Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Tue, 21 Sep 2010 11:24:00 -0400
Subject: [PATCH 167/233] kexec/ppc32: Pass irq_regs to crash IPI

kexec handling of crash kernel uses IPIs to signal the other CPUs
that they should stop executing whatever they were doing. It's
possible that the IPI implementation uses doorbell interrupts. If
that is the case, the irq_regs are not passed to the IPI handler,
causing a possible dereference of a NULL pointer.

Add passing of irq_regs, similar to what do_IRQ() implements.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
[context adjustment]
Integrated-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/powerpc/kernel/dbell.c |   21 ++++++++++++++++++---
 arch/powerpc/kernel/smp.c   |    2 +-
 2 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/arch/powerpc/kernel/dbell.c b/arch/powerpc/kernel/dbell.c
index f7b5188..3360392 100644
--- a/arch/powerpc/kernel/dbell.c
+++ b/arch/powerpc/kernel/dbell.c
@@ -62,6 +62,7 @@ void doorbell_message_pass(int target, int msg)
 	}
 }
 
+extern void (*crash_ipi_function_ptr)(struct pt_regs *);
 void doorbell_exception(struct pt_regs *regs)
 {
 	struct pt_regs *old_regs = set_irq_regs(regs);
@@ -73,10 +74,24 @@ void doorbell_exception(struct pt_regs *regs)
 	if (!info->messages || (num_online_cpus() < 2))
 		goto out;
 
-	for (msg = 0; msg < 4; msg++)
-		if (test_and_clear_bit(msg, &info->messages))
+	for (msg = 0; msg < 4; msg++) {
+		if (test_and_clear_bit(msg, &info->messages)) {
+			/* crash kernel needs regs */
+			if (PPC_MSG_DEBUGGER_BREAK == msg) {
+				if (crash_ipi_function_ptr) {
+					struct pt_regs *old_regs;
+					old_regs = set_irq_regs(regs);
+					smp_message_recv(msg);
+					/* We should *NEVER* hit this, but
+					 * for the sake of symmetry, handle
+					 * this case. */
+					set_irq_regs(old_regs);
+					continue;
+				}
+			}
 			smp_message_recv(msg);
-
+		}
+	}
 out:
 	set_irq_regs(old_regs);
 }
diff --git a/arch/powerpc/kernel/smp.c b/arch/powerpc/kernel/smp.c
index a91b203..fda290c 100644
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@ -75,7 +75,7 @@ volatile unsigned int cpu_callin_map[NR_CPUS];
 
 int smt_enabled_at_boot = 1;
 
-static void (*crash_ipi_function_ptr)(struct pt_regs *) = NULL;
+void (*crash_ipi_function_ptr)(struct pt_regs *) = NULL;
 
 #ifdef CONFIG_PPC64
 void __devinit smp_generic_kick_cpu(int nr)
-- 
1.7.0.4

