From 94299ad460287e0a2a48628baa92fddece47a2af Mon Sep 17 00:00:00 2001
From: Benjamin Walsh <benjamin.walsh@windriver.com>
Date: Tue, 21 Sep 2010 11:24:00 -0400
Subject: [PATCH 246/252] kexec/ppc32: Pass irq_regs to crash IPI

kexec handling of crash kernel uses IPIs to signal the other CPUs
that they should stop executing whatever they were doing. It's
possible that the IPI implementation uses doorbell interrupts. If
that is the case, the irq_regs are not passed to the IPI handler,
causing a possible dereference of a NULL pointer.

Add passing of irq_regs, similar to what do_IRQ() implements.

Signed-off-by: Benjamin Walsh <benjamin.walsh@windriver.com>
---
 arch/powerpc/kernel/smp.c   |    2 +-
 arch/powerpc/kernel/traps.c |   20 ++++++++++++++++++--
 2 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/arch/powerpc/kernel/smp.c b/arch/powerpc/kernel/smp.c
index 3a8c805..fea7291 100644
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@ -75,7 +75,7 @@ volatile unsigned int cpu_callin_map[NR_CPUS];
 
 int smt_enabled_at_boot = 1;
 
-static void (*crash_ipi_function_ptr)(struct pt_regs *) = NULL;
+void (*crash_ipi_function_ptr)(struct pt_regs *) = NULL;
 
 #ifdef CONFIG_PPC64
 void __devinit smp_generic_kick_cpu(int nr)
diff --git a/arch/powerpc/kernel/traps.c b/arch/powerpc/kernel/traps.c
index 9eb16ae..2aac754 100644
--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -1342,6 +1342,7 @@ void vsx_assist_exception(struct pt_regs *regs)
 
 #ifdef CONFIG_FSL_BOOKE
 
+extern void (*crash_ipi_function_ptr)(struct pt_regs *);
 void doorbell_exception(struct pt_regs *regs)
 {
 #ifdef CONFIG_SMP
@@ -1351,9 +1352,24 @@ void doorbell_exception(struct pt_regs *regs)
 	if (num_online_cpus() < 2)
 		return;
 
-	for (msg = 0; msg < 4; msg++)
-		if (test_and_clear_bit(msg, &dbell_smp_message[cpu]))
+	for (msg = 0; msg < 4; msg++) {
+		if (test_and_clear_bit(msg, &dbell_smp_message[cpu])) {
+			/* crash kernel needs regs */
+			if (PPC_MSG_DEBUGGER_BREAK == msg) {
+				if (crash_ipi_function_ptr) {
+					struct pt_regs *old_regs;
+					old_regs = set_irq_regs(regs);
+					smp_message_recv(msg);
+					/* We should *NEVER* hit this, but
+					 * for the sake of symmetry, handle
+					 * this case. */
+					set_irq_regs(old_regs);
+					continue;
+				}
+			}
 			smp_message_recv(msg);
+		}
+	}
 #else
 	printk(KERN_WARNING "Received doorbell on non-smp system\n");
 #endif
-- 
1.6.5.2

