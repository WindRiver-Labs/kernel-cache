From e711f9d8906059d3a1ae057b1dd71fea43a2df4a Mon Sep 17 00:00:00 2001
From: Shlomi Gridish <gridish@freescale.com>
Date: Wed, 9 Dec 2009 16:19:06 +0200
Subject: [PATCH 084/252] Netcomm:Try to increase FMan 10G ports performance

Added write/read optimization, pipeline depth increased etc.

Signed-off-by: Shlomi Gridish <gridish@freescale.com>
[Applied FSL SDK 2.0.3 patch
"kernel-2.6.30--Netcomm-Try-to-increase-FMan-10G-ports-performance.patch"]
Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c |   49 +++++++++++++++++--
 1 files changed, 43 insertions(+), 6 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
index 81ab7e4..4ecc5e8 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
@@ -638,7 +638,8 @@ typedef _Packed struct {
     t_Plr   *p_Plr;
     t_Ppids *p_Ppids;
     int     i;
-    uint8_t physPortId[] = {0x8,0x9,0xa,0xb,0x10};
+    uint8_t physRxPortId[] = {0x8,0x9,0xa,0xb,0x10};
+    uint8_t physOhPortId[] = {0x1,0x2,0x3,0x4,0x5, 0x6, 0x7};
 
     p_Plr = CAST_UINT64_TO_POINTER_TYPE(t_Plr, (p_LnxWrpFmDev->fmBaseAddr+FM_DMA_PLR_OFFSET));
 #ifdef MODULE
@@ -655,7 +656,17 @@ typedef _Packed struct {
 
     for (i=0; i<FM_MAX_NUM_OF_RX_PORTS; i++)
         p_LnxWrpFmDev->rxPorts[i].settings.param.specificParams.rxParams.rxPartitionId =
-            p_Ppids->fmbm_ppid[physPortId[i]-1];
+            p_Ppids->fmbm_ppid[physRxPortId[i]-1];
+
+#ifdef FM_OP_PARTITION_ERRATA
+    for (i=0; i<FM_MAX_NUM_OF_OH_PORTS; i++)
+    {
+        if (i == 0)
+            continue;
+        p_LnxWrpFmDev->opPorts[i-1].settings.param.specificParams.nonRxParams.opPartitionId =
+            p_Ppids->fmbm_ppid[physOhPortId[i]-1];
+    }
+#endif  /* FM_OP_PARTITION_ERRATA */
 
     return E_OK;
 }
@@ -1340,6 +1351,16 @@ static t_Error InitFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
 #endif /* BUP_FM_HALT_SIG_ERRATA */
 
+    {
+        t_FmDmaEmergency    emergency;
+
+        emergency.emergencyBusSelect = FM_DMA_MURAM_READ_EMERGENCY | FM_DMA_MURAM_WRITE_EMERGENCY | FM_DMA_EXT_BUS_EMERGENCY;
+        emergency.emergencyLevel = e_FM_DMA_EM_SOS;
+
+        if (FM_ConfigDmaAidMode(p_LnxWrpFmDev->h_Dev, e_FM_DMA_AID_OUT_TNUM) != E_OK)
+            RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
+    }
+
     if (FM_Init(p_LnxWrpFmDev->h_Dev) != E_OK)
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM"));
 
@@ -1487,15 +1508,31 @@ static t_Error InitFmPortDev(t_LnxWrpFmPortDev *p_LnxWrpFmPortDev)
     if ((p_LnxWrpFmPortDev->h_Dev = FM_PORT_Config(&p_LnxWrpFmPortDev->settings.param)) == NULL)
         RETURN_ERROR(MAJOR, E_INVALID_HANDLE, ("FM-port"));
 
-    if (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_RX_10G)
+    if ((p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_RX_10G) ||
+        (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_RX))
+    {
+        t_Error         errCode;
+        if ((errCode = FM_PORT_ConfigDmaWriteOptimize(p_LnxWrpFmPortDev->h_Dev, TRUE)) != E_OK)
+             RETURN_ERROR(MAJOR, errCode, NO_MSG);
+    }
+    else if ((p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX_10G) ||
+             (p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX))
     {
         t_FmPortRsrc    portRsrc;
         t_Error         errCode;
 
-        portRsrc.num = 24;
-        portRsrc.extra = 8;
+        portRsrc.num = 6;
+        portRsrc.extra = 6;
 
-        if ((errCode = FM_PORT_ConfigNumOfTasks(p_LnxWrpFmPortDev->h_Dev, &portRsrc)) != E_OK)
+        if ((p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX_10G) &&
+            (errCode = FM_PORT_ConfigNumOfOpenDmas(p_LnxWrpFmPortDev->h_Dev, &portRsrc)) != E_OK)
+             RETURN_ERROR(MAJOR, errCode, NO_MSG);
+        if ((errCode = FM_PORT_ConfigDeqHighPriority(p_LnxWrpFmPortDev->h_Dev, TRUE)) != E_OK)
+             RETURN_ERROR(MAJOR, errCode, NO_MSG);
+        if ((errCode = FM_PORT_ConfigDeqPrefetchOption(p_LnxWrpFmPortDev->h_Dev, e_FM_PORT_DEQ_FULL_PREFETCH)) != E_OK)
+             RETURN_ERROR(MAJOR, errCode, NO_MSG);
+        if ((p_LnxWrpFmPortDev->settings.param.portType == e_FM_PORT_TYPE_TX_10G) &&
+            (errCode = FM_PORT_ConfigTxFifoDeqPipelineDepth(p_LnxWrpFmPortDev->h_Dev, 8)) != E_OK)
              RETURN_ERROR(MAJOR, errCode, NO_MSG);
     }
 
-- 
1.6.5.2

