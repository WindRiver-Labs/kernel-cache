From 5a93ccc46ddc439ba756667c27077df36c325cab Mon Sep 17 00:00:00 2001
From: Becky Bruce <beckyb@kernel.crashing.org>
Date: Fri, 22 Apr 2011 16:48:26 -0500
Subject: [PATCH 029/233] fs/hugetlbfs/inode.c: Fix pgoff alignment checking

Extracted from vendor drop QorIQ-DPAA-SDK-V1-20110609-systembuilder.iso
0182-fs-hugetlbfs-inode.c-Fix-pgoff-alignment-checking.patch

The statement:

vma->vm_pgoff & ~(huge_page_mask(h) >> PAGE_SHIFT)

is bogus as an alignment check on 32-bit powerpc. This
causes us to "&" the pgoff with something that looks like
this (for a 4M hugepage): 0xfff0_03ff. Instead, flip the
page size mask and then shift that, giving you 0x0000_03ff.

Signed-off-by: Becky Bruce <beckyb@kernel.crashing.org>
Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
---
 fs/hugetlbfs/inode.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c
index a0bbd3d..66853f7 100644
--- a/fs/hugetlbfs/inode.c
+++ b/fs/hugetlbfs/inode.c
@@ -93,7 +93,7 @@ static int hugetlbfs_file_mmap(struct file *file, struct vm_area_struct *vma)
 	vma->vm_flags |= VM_HUGETLB | VM_RESERVED;
 	vma->vm_ops = &hugetlb_vm_ops;
 
-	if (vma->vm_pgoff & ~(huge_page_mask(h) >> PAGE_SHIFT))
+	if (vma->vm_pgoff & (~huge_page_mask(h) >> PAGE_SHIFT))
 		return -EINVAL;
 
 	vma_len = (loff_t)(vma->vm_end - vma->vm_start);
-- 
1.7.0.4

