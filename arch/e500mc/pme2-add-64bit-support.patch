From 844ff6f0e97cc29ca2221498f9d813f81687f427 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 21 Apr 2010 15:23:17 +0800
Subject: [PATCH 118/252] pme2: add 64bit support

When we enable "Large physical address support" in kernel config,
the dma_addr_t will change to u64. This will trigger several BUG_ON
in pme2 driver. So add the support for 64bit dma_addr_t and remove
these BUG_ON.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/match/pme2_ctrl.c |    8 ++++++--
 drivers/match/pme2_low.c  |    5 +----
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/drivers/match/pme2_ctrl.c b/drivers/match/pme2_ctrl.c
index 46faa6d..e4bb213 100644
--- a/drivers/match/pme2_ctrl.c
+++ b/drivers/match/pme2_ctrl.c
@@ -104,11 +104,14 @@ static __init int parse_mem_property(struct device_node *node, const char *name,
 	pr_info("pme: Using %s property '%s'\n", node->full_name, name);
 	/* Props are 64-bit, but dma_addr_t is (currently) 32-bit */
 	BUG_ON(sizeof(*addr) != 4);
-	if(pint[0] || pint[2]) {
+	if(pint[2]) {
 		pr_err("pme: Invalid number of dt properties\n");
 		return -EINVAL;
 	}
 	*addr = pint[1];
+#ifdef CONFIG_PHYS_64BIT
+	*addr |= (u64)pint[0] << 32;
+#endif
 	if((u64)*addr & (align - 1)) {
 		pr_err("pme: Invalid alignment, address %016llx\n",(u64)*addr);
 		return -EINVAL;
@@ -353,8 +356,9 @@ static int __devinit of_fsl_pme_probe(struct of_device *ofdev,
 		clkfreq = *value;
 	pme_out(global_pme, SFRCC, clkfreq/1000000);
 
-	BUG_ON(sizeof(dxe_a) != 4);
+	pme_out(global_pme, PDSRBAH, (u32)((u64)dxe_a >> 32));
 	pme_out(global_pme, PDSRBAL, (u32)dxe_a);
+	pme_out(global_pme, SCBARH, (u32)((u64)sre_a >> 32));
 	pme_out(global_pme, SCBARL, (u32)sre_a);
 	/* Maximum allocated index into the PDSR table available to the DXE
 	 * Rev 2.0: Max 0xF_FFFC
diff --git a/drivers/match/pme2_low.c b/drivers/match/pme2_low.c
index d03dce1..feeccb3 100644
--- a/drivers/match/pme2_low.c
+++ b/drivers/match/pme2_low.c
@@ -190,10 +190,7 @@ void pme_initfq(struct qm_mcc_initfq *initfq, struct pme_hw_flow *flow, u8 qos,
 		dma_addr_t fcp;
 		fcp = flow_map((struct pme_flow *)flow);
 		pme_a->mode = pme_mode_flow;
-		/* TODO: this is to catch >32-bit physical address
-		 * configurations. */
-		BUG_ON(sizeof(dma_addr_t) > 4);
-		pme_a->flow_hi = 0;
+		pme_a->flow_hi = (u32)((u64)fcp >> 32);
 		pme_a->flow_lo = fcp;
 	} else {
 		pme_a->mode = pme_mode_direct;
-- 
1.6.5.2

