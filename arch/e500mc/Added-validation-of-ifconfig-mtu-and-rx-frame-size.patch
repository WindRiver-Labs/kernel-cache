From 0ba5888887a977cafcf11ee308a6e8ccf5762516 Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Tue, 17 Aug 2010 16:16:03 +0800
Subject: [PATCH 171/252] Added validation of ifconfig mtu and rx frame size.

From FSL vendor SDK 2.x.

Validating user input from 'ifconfig mtu'.
Checking Rx frame size against the defined mtu.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/net/dpa/dpa.c     |   41 +++++++++++++++++++++++++++++++++++++----
 drivers/net/dpa/mac-api.c |    2 +-
 drivers/net/dpa/mac.h     |    3 +++
 3 files changed, 41 insertions(+), 5 deletions(-)

diff --git a/drivers/net/dpa/dpa.c b/drivers/net/dpa/dpa.c
index d0e2527..1a54f1c 100644
--- a/drivers/net/dpa/dpa.c
+++ b/drivers/net/dpa/dpa.c
@@ -38,6 +38,7 @@
 #include <linux/io.h>
 #include <linux/etherdevice.h>
 #include <linux/if_arp.h>	/* arp_hdr_len() */
+#include <linux/if_vlan.h>	/* VLAN_HLEN */
 #include <linux/icmp.h>		/* struct icmphdr */
 #include <linux/ip.h>		/* struct iphdr */
 #include <linux/udp.h>		/* struct udphdr */
@@ -124,7 +125,7 @@ struct dpa_bp {
 
 static const size_t dpa_bp_size[] __devinitconst = {
 	/* Keep these sorted */
-	DPA_BP_SIZE(9600)
+	DPA_BP_SIZE(FSL_FMAN_PHY_MAXFRM)
 };
 
 static struct dpa_bp *dpa_bp_array[64];
@@ -803,10 +804,34 @@ dpa_get_stats(struct net_device *net_dev)
 	return &net_dev->stats;
 }
 
-static int dpa_change_mtu(struct net_device *net_dev, int new_mtu)
+static int __cold dpa_change_mtu(struct net_device *net_dev, int new_mtu)
 {
+	const struct dpa_priv_s	*priv;
+	const int max_mtu =
+		FSL_FMAN_PHY_MAXFRM - (VLAN_ETH_HLEN + ETH_FCS_LEN);
+	const int min_mtu = 64;
+
+	priv = netdev_priv(net_dev);
+
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+
+	/* Make sure we don't exceed the Ethernet controller's MAXFRM */
+	if (new_mtu < min_mtu || new_mtu > max_mtu) {
+		if (netif_msg_drv(priv))
+			cpu_netdev_err(net_dev,
+				"%s:%hu:%s():"
+				"Invalid L3 mtu %d "
+				"(must be between %d and %d).\n",
+				__file__, __LINE__, __func__,
+				new_mtu, min_mtu, max_mtu);
+		return -EINVAL;
+	}
 	net_dev->mtu = new_mtu;
 
+	if (netif_msg_drv(priv))
+		cpu_netdev_dbg(net_dev, "-> %s:%s()\n", __file__, __func__);
+
 	return 0;
 }
 
@@ -939,10 +964,18 @@ static void __hot _dpa_rx(struct net_device		*net_dev,
 
 	skb = NULL;
 	size = dpa_fd_length(&dpa_fd->fd);
-	if (size > net_dev->mtu) {
-		net_dev->stats.rx_dropped++;
+
+	/* FMan has stripped off the FCS from the frame, don't count it in.
+	 *
+	 * Because we don't know whether this is an ETH or VLAN frame,
+	 * we'll restrict the VLAN frame's L3 PDU rather than letting a
+	 * larger ETH frame slip through and risk a buffer overflow.
+	 */
+	if (size - ETH_HLEN > net_dev->mtu) {
+		percpu_priv->stats.rx_dropped++;
 		goto _return_dpa_fd_release;
 	}
+
 	if (skb == NULL) {
 		skb = __netdev_alloc_skb(net_dev,
 				DPA_BP_HEAD + NET_IP_ALIGN + size, GFP_ATOMIC);
diff --git a/drivers/net/dpa/mac-api.c b/drivers/net/dpa/mac-api.c
index 7619bf0..2389ce5 100644
--- a/drivers/net/dpa/mac-api.c
+++ b/drivers/net/dpa/mac-api.c
@@ -134,7 +134,7 @@ static int __devinit __cold init(struct mac_device *mac_dev)
 		goto _return;
 	}
 
-	err = FM_MAC_ConfigMaxFrameLength(priv->mac, 9600);
+	err = FM_MAC_ConfigMaxFrameLength(priv->mac, FSL_FMAN_PHY_MAXFRM);
 	_errno = -GET_ERROR_TYPE(err);
 	if (unlikely(_errno < 0)) {
 		cpu_dev_err(mac_dev->dev,
diff --git a/drivers/net/dpa/mac.h b/drivers/net/dpa/mac.h
index 9747e36..1d38d07 100644
--- a/drivers/net/dpa/mac.h
+++ b/drivers/net/dpa/mac.h
@@ -38,6 +38,9 @@
 
 #include "fsl_fman.h"		/* struct port_device */
 
+/* max frame size (to accomodate jumbo frames) */
+#define FSL_FMAN_PHY_MAXFRM	9600
+
 enum {DTSEC, XGMAC};
 
 struct mac_device {
-- 
1.6.5.2

