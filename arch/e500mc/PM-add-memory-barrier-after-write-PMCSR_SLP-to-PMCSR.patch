From 2e2ffbc90b515089a6503db613fa0a803c25ede3 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Fri, 30 Sep 2011 09:59:28 +0800
Subject: [PATCH] PM: add memory barrier after write PMCSR_SLP to PMCSR register

After execute sleep/wakeup for a substantial many times(nearly 200 times),
the hardware can't enter into sleep state, from the LED for sleep indicator
we can see that write PMCSR_SLP to PMCSR register failed, so the kernel is
already at suspend state while the hardware is not at sleep state.
But the reason why it is not execute successfully is unknown.

Add a msync after write PMCSR_SLP to PMCSR register can resolve the problem.
The msync instruction ensures that all instructions preceding the msync
have completed before msync completes and that no subsequent instructions
are initiated until after the msync completes, and although it adds overhead
to the sleep phase, it is insignificant and poses no issues to the system.

Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 arch/powerpc/sysdev/fsl_pmc.c |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/sysdev/fsl_pmc.c b/arch/powerpc/sysdev/fsl_pmc.c
index 5b78087..d9b11ea 100644
--- a/arch/powerpc/sysdev/fsl_pmc.c
+++ b/arch/powerpc/sysdev/fsl_pmc.c
@@ -126,6 +126,7 @@ static int pmc_suspend_enter(suspend_state_t state)
 		local_irq_disable();
 
 		setbits32(&pmc_regs->pmcsr, PMCSR_SLP);
+		asm volatile ("msync" ::: "memory");
 
 		/* At this point, the CPU is asleep. */
 		/* Upon resume, wait for SLP bit to be clear. */
-- 
1.7.0.4

