From 4ae03992890ccdb7bcc8ecac3d16524ad03137d5 Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Mon, 27 Jun 2011 13:49:05 +0800
Subject: [PATCH 231/233] PowerPC: Add PM support for spi_fsl_espi driver

Add suspend & resume to spi_fsl_espi driver. The driver would save espi
registes while suspend, and restore the registers while resume.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 drivers/spi/spi_fsl_espi.c |   56 ++++++++++++++++++++++++++++++++++---------
 drivers/spi/spi_fsl_lib.h  |   26 ++++++++++++++++++++
 drivers/spi/spi_fsl_spi.c  |   11 --------
 3 files changed, 70 insertions(+), 23 deletions(-)

diff --git a/drivers/spi/spi_fsl_espi.c b/drivers/spi/spi_fsl_espi.c
index 90d4cce..d3da32f 100644
--- a/drivers/spi/spi_fsl_espi.c
+++ b/drivers/spi/spi_fsl_espi.c
@@ -23,18 +23,6 @@
 
 #include "spi_fsl_lib.h"
 
-/* eSPI Controller registers */
-struct fsl_espi_reg {
-	__be32 mode;		/* 0x000 - eSPI mode register */
-	__be32 event;		/* 0x004 - eSPI event register */
-	__be32 mask;		/* 0x008 - eSPI mask register */
-	__be32 command;		/* 0x00c - eSPI command register */
-	__be32 transmit;	/* 0x010 - eSPI transmit FIFO access register*/
-	__be32 receive;		/* 0x014 - eSPI receive FIFO access register*/
-	u8 res[8];		/* 0x018 - 0x01c reserved */
-	__be32 csmode[4];	/* 0x020 - 0x02c eSPI cs mode register */
-};
-
 /* eSPI Controller mode register definitions */
 #define SPMODE_ENABLE		(1 << 31)
 #define SPMODE_LOOP		(1 << 30)
@@ -616,6 +604,46 @@ static int __devexit of_fsl_espi_remove(struct of_device *ofdev)
 	return 0;
 }
 
+#ifdef CONFIG_SUSPEND
+/* save espi registers */
+static int fsl_espi_suspend(struct of_device *ofdev, pm_message_t state)
+{
+	struct mpc8xxx_spi *fsl_espi;
+	struct spi_master *master;
+	int i;
+	master = platform_get_drvdata(ofdev);
+	fsl_espi = spi_master_get_devdata(master);
+
+	fsl_espi->espi_save_regs.mode = in_be32(&fsl_espi->espi_base->mode);
+	fsl_espi->espi_save_regs.event = in_be32(&fsl_espi->espi_base->event);
+	fsl_espi->espi_save_regs.mask = in_be32(&fsl_espi->espi_base->mask);
+	for (i = 0; i < 4; i++)
+		fsl_espi->espi_save_regs.csmode[i] =
+			in_be32(&fsl_espi->espi_base->csmode[i]);
+
+	return 0;
+}
+
+/* restore espi registers */
+static int fsl_espi_resume(struct of_device *ofdev)
+{
+	struct mpc8xxx_spi *fsl_espi;
+	struct spi_master *master;
+	int i;
+	master = platform_get_drvdata(ofdev);
+	fsl_espi = spi_master_get_devdata(master);
+
+	out_be32(&fsl_espi->espi_base->mode, fsl_espi->espi_save_regs.mode);
+	out_be32(&fsl_espi->espi_base->event, fsl_espi->espi_save_regs.event);
+	out_be32(&fsl_espi->espi_base->mask, fsl_espi->espi_save_regs.mask);
+	for (i = 0; i < 4; i++)
+		out_be32(&fsl_espi->espi_base->csmode[i],
+			fsl_espi->espi_save_regs.csmode[i]);
+
+	return 0;
+}
+#endif
+
 static const struct of_device_id of_fsl_espi_match[] = {
 	{ .compatible = "fsl,mpc8536-espi" },
 	{}
@@ -627,6 +655,10 @@ static struct of_platform_driver of_fsl_espi_driver = {
 	.match_table	= of_fsl_espi_match,
 	.probe		= of_fsl_espi_probe,
 	.remove		= __devexit_p(of_fsl_espi_remove),
+#ifdef CONFIG_SUSPEND
+	.suspend     = fsl_espi_suspend,
+	.resume      = fsl_espi_resume,
+#endif
 };
 
 static int __init fsl_espi_init(void)
diff --git a/drivers/spi/spi_fsl_lib.h b/drivers/spi/spi_fsl_lib.h
index 3cd099a..b5beda8 100644
--- a/drivers/spi/spi_fsl_lib.h
+++ b/drivers/spi/spi_fsl_lib.h
@@ -20,6 +20,29 @@
 
 #include <asm/io.h>
 
+/* SPI Controller registers */
+struct fsl_spi_reg {
+	u8 res1[0x20];
+	__be32 mode;
+	__be32 event;
+	__be32 mask;
+	__be32 command;
+	__be32 transmit;
+	__be32 receive;
+};
+
+/* eSPI Controller registers */
+struct fsl_espi_reg {
+	__be32 mode;		/* 0x000 - eSPI mode register */
+	__be32 event;		/* 0x004 - eSPI event register */
+	__be32 mask;		/* 0x008 - eSPI mask register */
+	__be32 command;		/* 0x00c - eSPI command register */
+	__be32 transmit;	/* 0x010 - eSPI transmit FIFO access register*/
+	__be32 receive;		/* 0x014 - eSPI receive FIFO access register*/
+	u8 res[8];		/* 0x018 - 0x01c reserved */
+	__be32 csmode[4];	/* 0x020 - 0x02c eSPI cs mode register */
+};
+
 /* SPI/eSPI Controller driver's private data. */
 struct mpc8xxx_spi {
 	struct device *dev;
@@ -73,6 +96,9 @@ struct mpc8xxx_spi {
 	spinlock_t lock;
 
 	struct completion done;
+#ifdef CONFIG_SUSPEND
+	struct fsl_espi_reg	espi_save_regs;
+#endif
 };
 
 struct spi_mpc8xxx_cs {
diff --git a/drivers/spi/spi_fsl_spi.c b/drivers/spi/spi_fsl_spi.c
index f0d115e..90ff4d3 100644
--- a/drivers/spi/spi_fsl_spi.c
+++ b/drivers/spi/spi_fsl_spi.c
@@ -41,17 +41,6 @@
 
 #include "spi_fsl_lib.h"
 
-/* SPI Controller registers */
-struct fsl_spi_reg {
-	u8 res1[0x20];
-	__be32 mode;
-	__be32 event;
-	__be32 mask;
-	__be32 command;
-	__be32 transmit;
-	__be32 receive;
-};
-
 /* CPM1 and CPM2 are mutually exclusive. */
 #ifdef CONFIG_CPM1
 #include <asm/cpm1.h>
-- 
1.7.0.4

