From 7f64f34b8d4fa3f200920135448a421b383aaf26 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Wed, 13 Apr 2011 10:03:46 +0800
Subject: [PATCH] Q/BMAN: set IRQF_NOBALANCING for the portal irq handler

The Q/BMAN portal is bound to a specific cpu. It make no sense
to migrate the portal irq to orther cpu when a cpu is down. And the
portal irq handler also doesn't support reentry. That mean we can't
handle two portal irq on a single cpu. So set the portal irq with
IQF_NOBALANCING flag to avoid irq migration or setting affinity
by userspace.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/hwalloc/bman_high.c |    3 ++-
 drivers/hwqueue/qman_high.c |    3 ++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/drivers/hwalloc/bman_high.c b/drivers/hwalloc/bman_high.c
index 75c844d..aa5a9bd 100644
--- a/drivers/hwalloc/bman_high.c
+++ b/drivers/hwalloc/bman_high.c
@@ -229,7 +229,8 @@ int bman_create_affine_portal(const struct bm_portal_config *config,
 	bm_isr_status_clear(__p, 0xffffffff);
 #ifdef CONFIG_FSL_BMAN_HAVE_IRQ
 	snprintf(portal->irqname, MAX_IRQNAME, IRQNAME, config->cpu);
-	if (request_irq(config->irq, portal_isr, 0, portal->irqname, portal)) {
+	if (request_irq(config->irq, portal_isr, IRQF_NOBALANCING,
+				 portal->irqname, portal)) {
 		pr_err("request_irq() failed\n");
 		goto fail_irq;
 	}
diff --git a/drivers/hwqueue/qman_high.c b/drivers/hwqueue/qman_high.c
index 9046ed2..30f0109 100644
--- a/drivers/hwqueue/qman_high.c
+++ b/drivers/hwqueue/qman_high.c
@@ -393,7 +393,8 @@ int qman_create_affine_portal(const struct qm_portal_config *config, u32 flags,
 	qm_isr_status_clear(__p, 0xffffffff);
 #ifdef CONFIG_FSL_QMAN_HAVE_IRQ
 	snprintf(portal->irqname, MAX_IRQNAME, IRQNAME, config->cpu);
-	if (request_irq(config->irq, portal_isr, 0, portal->irqname, portal)) {
+	if (request_irq(config->irq, portal_isr, IRQF_NOBALANCING,
+					portal->irqname, portal)) {
 		pr_err("request_irq() failed\n");
 		goto fail_irq;
 	}
-- 
1.6.5.2

