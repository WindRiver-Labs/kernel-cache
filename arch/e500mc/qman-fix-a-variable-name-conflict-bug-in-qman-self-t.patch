From d5268aee624eebb706e93489a7576c123bd79b57 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Mon, 30 Aug 2010 01:21:22 -0700
Subject: [PATCH 142/252] qman: fix a variable name conflict bug in qman self test module

We already define a static percpu variable hp_cpu. But in both
create_per_cpu_handlers/destroy_per_cpu_handlers function we
also define a local variable hp_cpu. So in get_cpu_var(hp_cpu)
the local variable is used instead of the static variable, and
then return the wrong value. Replace the local hp_cpu with p
to fix this bug.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/hwqueue/qman_test_hotpotato.c |   18 +++++++++---------
 1 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/drivers/hwqueue/qman_test_hotpotato.c b/drivers/hwqueue/qman_test_hotpotato.c
index f727570..874bdfc 100644
--- a/drivers/hwqueue/qman_test_hotpotato.c
+++ b/drivers/hwqueue/qman_test_hotpotato.c
@@ -229,23 +229,23 @@ static enum qman_cb_dqrr_result special_dqrr(struct qman_portal *portal,
 static void create_per_cpu_handlers(void *ignore)
 {
 	struct hp_handler *handler;
-	struct hp_cpu *hp_cpu = &get_cpu_var(hp_cpu);
+	struct hp_cpu *p = &get_cpu_var(hp_cpu);
 	int loop;
 
-	hp_cpu->processor_id = smp_processor_id();
+	p->processor_id = smp_processor_id();
 	spin_lock(&hp_lock);
-	list_add_tail(&hp_cpu->node, &hp_cpu_list);
+	list_add_tail(&p->node, &hp_cpu_list);
 	hp_cpu_list_length++;
 	spin_unlock(&hp_lock);
-	INIT_LIST_HEAD(&hp_cpu->handlers);
+	INIT_LIST_HEAD(&p->handlers);
 	for (loop = 0; loop < HP_PER_CPU; loop++) {
 		handler = kmem_cache_alloc(hp_handler_slab, GFP_KERNEL);
 		if (!handler)
 			panic("kmem_cache_alloc() failed");
-		handler->processor_id = hp_cpu->processor_id;
+		handler->processor_id = p->processor_id;
 		handler->addr = frame_dma;
 		handler->frame_ptr = frame_ptr;
-		list_add_tail(&handler->node, &hp_cpu->handlers);
+		list_add_tail(&handler->node, &p->handlers);
 	}
 	put_cpu_var(hp_cpu);
 }
@@ -253,12 +253,12 @@ static void create_per_cpu_handlers(void *ignore)
 static void destroy_per_cpu_handlers(void *ignore)
 {
 	struct list_head *loop, *tmp;
-	struct hp_cpu *hp_cpu = &get_cpu_var(hp_cpu);
+	struct hp_cpu *p = &get_cpu_var(hp_cpu);
 
 	spin_lock(&hp_lock);
-	list_del(&hp_cpu->node);
+	list_del(&p->node);
 	spin_unlock(&hp_lock);
-	list_for_each_safe(loop, tmp, &hp_cpu->handlers) {
+	list_for_each_safe(loop, tmp, &p->handlers) {
 		u32 flags;
 		struct hp_handler *handler = list_entry(loop, struct hp_handler,
 							node);
-- 
1.6.5.2

