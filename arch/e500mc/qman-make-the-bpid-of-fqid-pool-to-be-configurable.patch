From 005edcd0f21a9fc5c93612176f70793dc9441aa6 Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Thu, 30 Jun 2011 12:53:26 +0800
Subject: [PATCH 221/233] qman: make the bpid of fqid pool to be configurable

By default we use bpid 0 as the bman pool for fqid alloc.
But in sAMP when two linux are running at the same time,
there will be a conflict. So we add a new property
"qman-fqalloc-bpid" for qman device node in order to
configure the bpid of fqid pool.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_driver.c  |   13 +++++++++++--
 drivers/staging/fsl_qbman/qman_fqalloc.c |    5 +++--
 drivers/staging/fsl_qbman/qman_private.h |    2 +-
 3 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_driver.c b/drivers/staging/fsl_qbman/qman_driver.c
index 4828eda..3612a7c 100644
--- a/drivers/staging/fsl_qbman/qman_driver.c
+++ b/drivers/staging/fsl_qbman/qman_driver.c
@@ -483,7 +483,7 @@ static __init int qman_init(void)
 	struct device_node *dn;
 	struct qm_portal_config *pcfg;
 	struct qman_portal *sharing_portal = NULL;
-	int loop, ret, use_bpid0 = 1, recovery_mode = 0, sharing_cpu = -1;
+	int loop, ret, bpid = 0, use_bpid0 = 1, recovery_mode = 0, sharing_cpu = -1;
 	LIST_HEAD(cfg_list);
 
 	for_each_compatible_node(dn, NULL, "fsl,qman") {
@@ -575,7 +575,16 @@ static __init int qman_init(void)
 		qman_modify_cgr(&cgr, QMAN_CGR_FLAG_USE_INIT, NULL);
 	}
 #ifdef CONFIG_FSL_QMAN_FQALLOCATOR
-	ret = fqalloc_init(use_bpid0);
+	dn = of_find_compatible_node(NULL, NULL, "fsl,qman");
+	if (dn) {
+		const uint32_t *prop;
+		int len;
+
+		prop = of_get_property(dn, "fsl,qman-fqalloc-bpid", &len);
+		if (prop)
+			bpid = *prop;
+	}
+	ret = fqalloc_init(use_bpid0, bpid);
 	if (ret)
 		return ret;
 #endif
diff --git a/drivers/staging/fsl_qbman/qman_fqalloc.c b/drivers/staging/fsl_qbman/qman_fqalloc.c
index 032ae92..b94cd42 100644
--- a/drivers/staging/fsl_qbman/qman_fqalloc.c
+++ b/drivers/staging/fsl_qbman/qman_fqalloc.c
@@ -43,12 +43,13 @@
 static int use_bman;
 
 static struct bman_pool *fq_pool;
-static const struct bman_pool_params fq_pool_params;
+static struct bman_pool_params fq_pool_params;
 
-__init int fqalloc_init(int __use_bman)
+__init int fqalloc_init(int __use_bman, u32 bpid)
 {
 	use_bman = __use_bman;
 	if (use_bman) {
+		fq_pool_params.bpid = bpid;
 		fq_pool = bman_new_pool(&fq_pool_params);
 		if (!fq_pool)
 			return -ENOMEM;
diff --git a/drivers/staging/fsl_qbman/qman_private.h b/drivers/staging/fsl_qbman/qman_private.h
index 4c69c25..966eb18 100644
--- a/drivers/staging/fsl_qbman/qman_private.h
+++ b/drivers/staging/fsl_qbman/qman_private.h
@@ -143,7 +143,7 @@ struct qm_portal_config {
 
 /* Hooks for driver initialisation */
 #ifdef CONFIG_FSL_QMAN_FQALLOCATOR
-__init int fqalloc_init(int use_bman);
+__init int fqalloc_init(int use_bman, u32 bpid);
 #endif
 
 /* Revision info (for errata and feature handling) */
-- 
1.7.0.4

