From 2fe90e97396134569546437ad284d5139ae5e97c Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Thu, 30 Jun 2011 10:31:08 +0800
Subject: [PATCH 215/233] Initialize key member of lockdep_map with static object.

When turns on kernel option: CONFIG_PROVE_LOCKING, to every lock,
must initialize the key member of lockdep_map to identify it.

COMPLETION_INITIALIZER doesn't do it, can invoke init_waitqueue_head to do it.

Can remove the following call trace:
"
the code is fine but needs lockdep annotation.
turning off the locking correctness validator

[ebca9c90] [c0007394] show_stack+0x44/0x160 (unreliable)
[ebca9cc0] [c007cb8c] __lock_acquire+0x11dc/0x17cc
[ebca9d70] [c007d204] lock_acquire+0x88/0x124
[ebca9db0] [c05310f0] _raw_spin_lock_irq+0x4c/0x68
[ebca9dd0] [c052dce8] wait_for_common+0x30/0x1b0
[ebca9e10] [c0452670] init_affine_portal+0xa0/0x10c
[ebca9e60] [c06ea8ec] fsl_qman_portal_init+0x554/0x56c
[ebca9ef0] [c06eabb8] qman_init+0x2b4/0x394
[ebca9f50] [c0001cc4] do_one_initcall+0x3c/0x1e4
[ebca9f80] [c06c6394] kernel_init+0x1a0/0x278
[ebca9ff0] [c00106ac] original_kernel_thread+0x4c/0x68
"

Signed-off-by: Andrew Liu <shengping.liu@windriver.com>
[rebase it onto QorIQ-DPAA-SDK-V1-20110609-systembuilder.iso]
Integrated-by: Weiwei Wang <weiwei.wang@windriver.com>
[remove C90 declaration warning]
Integrated-by: Michel Thebeau <michel.thebeau@windriver.com>
---
 drivers/staging/fsl_qbman/bman_driver.c |    4 +++-
 drivers/staging/fsl_qbman/qman_driver.c |    4 +++-
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_driver.c b/drivers/staging/fsl_qbman/bman_driver.c
index b382a2a..8af3f6a 100644
--- a/drivers/staging/fsl_qbman/bman_driver.c
+++ b/drivers/staging/fsl_qbman/bman_driver.c
@@ -190,6 +190,7 @@ static __init struct bman_portal *init_affine_portal(
 					int cpu, struct bman_portal *redirect,
 					int recovery_mode, int is_shared)
 {
+	struct task_struct *k = NULL;
 	struct affine_portal_data data = {
 		.done = COMPLETION_INITIALIZER_ONSTACK(data.done),
 		.pconfig = pconfig,
@@ -199,7 +200,8 @@ static __init struct bman_portal *init_affine_portal(
 		.is_shared = is_shared,
 		.portal = NULL
 	};
-	struct task_struct *k = kthread_create(thread_init_affine_portal, &data,
+	init_waitqueue_head(&data.done.wait);
+	k = kthread_create(thread_init_affine_portal, &data,
 		"bman_affine%d", cpu);
 	int ret;
 	if (IS_ERR(k)) {
diff --git a/drivers/staging/fsl_qbman/qman_driver.c b/drivers/staging/fsl_qbman/qman_driver.c
index fbd1727..bbd8958 100644
--- a/drivers/staging/fsl_qbman/qman_driver.c
+++ b/drivers/staging/fsl_qbman/qman_driver.c
@@ -210,6 +210,7 @@ static __init struct qman_portal *init_affine_portal(
 					int cpu, struct qman_portal *redirect,
 					int recovery_mode, int is_shared)
 {
+	struct task_struct *k = NULL;
 	struct affine_portal_data data = {
 		.done = COMPLETION_INITIALIZER_ONSTACK(data.done),
 		.pconfig = pconfig,
@@ -219,7 +220,8 @@ static __init struct qman_portal *init_affine_portal(
 		.is_shared = is_shared,
 		.portal = NULL
 	};
-	struct task_struct *k = kthread_create(thread_init_affine_portal, &data,
+	init_waitqueue_head(&data.done.wait);
+	k = kthread_create(thread_init_affine_portal, &data,
 		"qman_affine%d", cpu);
 	int ret;
 	if (IS_ERR(k)) {
-- 
1.7.0.4

