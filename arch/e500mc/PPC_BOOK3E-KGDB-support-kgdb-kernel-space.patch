From 67d8cd209476d95ebe44802bbcd3509e7a66a4bd Mon Sep 17 00:00:00 2001
From: Tiejun Chen <tiejun.chen@windriver.com>
Date: Tue, 13 Sep 2011 17:59:15 +0800
Subject: [PATCH] PPC_BOOK3E/KGDB: support kgdb kernel space

For PPC_BOOK3E current debug exception can't support kgdb kernel
space since we can't quite save properly an interrupted kernel
state yet. So we have to initial specific dbg_kstack to avoid
overwriting other thing.

Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
---
 arch/powerpc/kernel/exceptions-64e.S |    4 ++++
 arch/powerpc/kernel/paca.c           |    9 +++++++++
 2 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index d19acde..5eaa795 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -490,11 +490,15 @@ kernel_dbg_exc:
 	rfdi
 
 	/* Normal debug exception */
+#ifndef CONFIG_PPC_BOOK3E
 	/* XXX We only handle coming from userspace for now since we can't
 	 *     quite save properly an interrupted kernel state yet
 	 */
 1:	andi.	r14,r11,MSR_PR;		/* check for userspace again */
 	beq	kernel_dbg_exc;		/* if from kernel mode */
+#else
+1:
+#endif
 
 	/* Now we mash up things to make it look like we are coming on a
 	 * normal exception
diff --git a/arch/powerpc/kernel/paca.c b/arch/powerpc/kernel/paca.c
index 8f492ff..3cf0a3c 100644
--- a/arch/powerpc/kernel/paca.c
+++ b/arch/powerpc/kernel/paca.c
@@ -80,6 +80,12 @@ EXPORT_SYMBOL(paca);
 
 struct paca_struct boot_paca;
 
+void *debug_kstack;
+static void allocate_dbg_kstack(unsigned long limit)
+{
+	debug_kstack = __va(lmb_alloc_base(STACK_INT_FRAME_SIZE, PAGE_SIZE, limit));
+}
+
 void __init initialise_paca(struct paca_struct *new_paca, int cpu)
 {
        /* The TOC register (GPR2) points 32kB into the TOC, so that 64kB
@@ -91,6 +97,7 @@ void __init initialise_paca(struct paca_struct *new_paca, int cpu)
 	new_paca->lppaca_ptr = &lppaca[cpu];
 #else
 	new_paca->kernel_pgd = swapper_pg_dir;
+	new_paca->dbg_kstack = debug_kstack;
 #endif
 	new_paca->lock_token = 0x8000;
 	new_paca->paca_index = cpu;
@@ -139,6 +146,8 @@ void __init allocate_pacas(void)
 	printk(KERN_DEBUG "Allocated %u bytes for %d pacas at %p\n",
 		paca_size, nr_cpus, paca);
 
+	allocate_dbg_kstack(limit);
+
 	/* Can't use for_each_*_cpu, as they aren't functional yet */
 	for (cpu = 0; cpu < nr_cpus; cpu++)
 		initialise_paca(&paca[cpu], cpu);
-- 
1.7.0.4

