From 763f7d38e4db63cd8ea00fdabdb84867478d7ef9 Mon Sep 17 00:00:00 2001
From: Scott Wood <scottwood@freescale.com>
Date: Wed, 10 Aug 2011 12:08:58 +0800
Subject: [PATCH 2/2] powerpc/e500mc: Add support for the wait instruction in e500_idle

commit ebf714ff37561331eb39963945d80bfc2a59e00f upstream

e500mc cannot doze or nap due to an erratum (as well as having a
different mechanism than previous e500), but it has a "wait" instruction
that is similar to doze.

On 64-bit, due to the soft-irq-disable mechanism, the existing
book3e_idle should be used instead.

Signed-off-by: Vakul Garg <vakul@freescale.com>
Signed-off-by: Scott Wood <scottwood@freescale.com>
Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
[context adjustment, and add sbcp4080.c fix]
Integrated-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/powerpc/kernel/idle_e500.S        |   12 ++++++++++++
 arch/powerpc/platforms/85xx/p3041_ds.c |    3 +--
 arch/powerpc/platforms/85xx/p4080_ds.c |    1 +
 arch/powerpc/platforms/85xx/p5020_ds.c |    7 +++++--
 arch/powerpc/platforms/85xx/sbcp4080.c |    3 +--
 5 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/arch/powerpc/kernel/idle_e500.S b/arch/powerpc/kernel/idle_e500.S
index 47a1a98..3e2b95c 100644
--- a/arch/powerpc/kernel/idle_e500.S
+++ b/arch/powerpc/kernel/idle_e500.S
@@ -26,6 +26,17 @@ _GLOBAL(e500_idle)
 	ori	r4,r4,_TLF_NAPPING	/* so when we take an exception */
 	stw	r4,TI_LOCAL_FLAGS(r3)	/* it will return to our caller */
 
+#ifdef CONFIG_E500MC
+	wrteei	1
+1:	wait
+
+	/*
+	 * Guard against spurious wakeups (e.g. from a hypervisor) --
+	 * any real interrupt will cause us to return to LR due to
+	 * _TLF_NAPPING.
+	 */
+	b	1b
+#else
 	/* Check if we can nap or doze, put HID0 mask in r3 */
 	lis	r3,0
 BEGIN_FTR_SECTION
@@ -72,6 +83,7 @@ END_FTR_SECTION_IFSET(CPU_FTR_L2CSR|CPU_FTR_CAN_NAP)
 	mtmsr	r7
 	isync
 2:	b	2b
+#endif /* !E500MC */
 
 /*
  * Return from NAP/DOZE mode, restore some CPU specific registers,
diff --git a/arch/powerpc/platforms/85xx/p3041_ds.c b/arch/powerpc/platforms/85xx/p3041_ds.c
index 089623a..50083c8 100644
--- a/arch/powerpc/platforms/85xx/p3041_ds.c
+++ b/arch/powerpc/platforms/85xx/p3041_ds.c
@@ -67,8 +67,7 @@ define_machine(p3041_ds) {
 	.restart		= fsl_rstcr_restart,
 	.calibrate_decr		= generic_calibrate_decr,
 	.progress		= udbg_progress,
-	.idle_loop		= cpu_idle_simple,
-	.power_save		= ppc_wait,
+	.power_save		= e500_idle,
 	.init_early		= corenet_ds_init_early,
 };
 
diff --git a/arch/powerpc/platforms/85xx/p4080_ds.c b/arch/powerpc/platforms/85xx/p4080_ds.c
index 65039bc..0d19cce 100644
--- a/arch/powerpc/platforms/85xx/p4080_ds.c
+++ b/arch/powerpc/platforms/85xx/p4080_ds.c
@@ -67,6 +67,7 @@ define_machine(p4080_ds) {
 	.restart		= fsl_rstcr_restart,
 	.calibrate_decr		= generic_calibrate_decr,
 	.progress		= udbg_progress,
+	.power_save		= e500_idle,
 	.init_early		= corenet_ds_init_early,
 };
 
diff --git a/arch/powerpc/platforms/85xx/p5020_ds.c b/arch/powerpc/platforms/85xx/p5020_ds.c
index 912fdfb..6d5b88a 100644
--- a/arch/powerpc/platforms/85xx/p5020_ds.c
+++ b/arch/powerpc/platforms/85xx/p5020_ds.c
@@ -72,8 +72,11 @@ define_machine(p5020_ds) {
 	.restart		= fsl_rstcr_restart,
 	.calibrate_decr		= generic_calibrate_decr,
 	.progress		= udbg_progress,
-	.idle_loop		= cpu_idle_simple,
-	.power_save		= ppc_wait,
+#ifdef CONFIG_PPC64
+	.power_save		= book3e_idle,
+#else
+	.power_save		= e500_idle,
+#endif
 	.init_early		= corenet_ds_init_early,
 };
 
diff --git a/arch/powerpc/platforms/85xx/sbcp4080.c b/arch/powerpc/platforms/85xx/sbcp4080.c
index 0bf1967..77e759b 100644
--- a/arch/powerpc/platforms/85xx/sbcp4080.c
+++ b/arch/powerpc/platforms/85xx/sbcp4080.c
@@ -58,8 +58,7 @@ define_machine(sbcp4080) {
 	.restart		= fsl_rstcr_restart,
 	.calibrate_decr		= generic_calibrate_decr,
 	.progress		= udbg_progress,
-	.idle_loop		= cpu_idle_simple,
-	.power_save		= ppc_wait,
+	.power_save		= e500_idle,
 	.init_early		= corenet_ds_init_early,
 };
 
-- 
1.7.0.2

