From 1f5162550f7843602ee720dbd2f12f1b72393e7d Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Mon, 22 Apr 2013 10:57:47 +0800
Subject: [PATCH] powerpc/e500: work around erratum A-006184

Erratum A-006184 says that a hang can happen under certain
circumstances when taking an exception.  The erratum workaround
gives the use of a watchdog as an option, to get unstuck if a hang
does occur.

Signed-off-by: Scott Wood <scottwood@freescale.com>
Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 arch/powerpc/kernel/exceptions-64e.S   |    9 +++++++
 arch/powerpc/kernel/head_fsl_booke.S   |   10 +++++++-
 arch/powerpc/kernel/idle.c             |    3 ++
 arch/powerpc/kernel/time.c             |   11 ++++++++
 arch/powerpc/platforms/Kconfig.cputype |   42 ++++++++++++++++++++++++++++++++
 drivers/watchdog/Kconfig               |    2 +-
 6 files changed, 75 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index 6b34a79..9cd907d 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -379,6 +379,14 @@ interrupt_end_book3e:
 	MASKABLE_EXCEPTION(0x980, fixed_interval, .unknown_exception, ACK_FIT)
 
 /* Watchdog Timer Interrupt */
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+	START_EXCEPTION(watchdog)
+	mtspr	SPRN_SPRG_CRIT_SCRATCH, r3
+	lis	r3, TSR_WIS@h
+	mtspr	SPRN_TSR, r3
+	mfspr	r3, SPRN_SPRG_CRIT_SCRATCH
+	rfci
+#else
 	START_EXCEPTION(watchdog);
 	CRIT_EXCEPTION_PROLOG(0x9f0, PROLOG_ADDITION_NONE)
 //	EXCEPTION_COMMON(0x9f0, PACA_EXCRIT, INTS_DISABLE_ALL)
@@ -388,6 +396,7 @@ interrupt_end_book3e:
 //	bl	.unknown_exception
 //	b	ret_from_crit_except
 	b	.
+#endif
 
 /* System Call Interrupt */
 	START_EXCEPTION(system_call)
diff --git a/arch/powerpc/kernel/head_fsl_booke.S b/arch/powerpc/kernel/head_fsl_booke.S
index 5eac89d..95b54dc 100644
--- a/arch/powerpc/kernel/head_fsl_booke.S
+++ b/arch/powerpc/kernel/head_fsl_booke.S
@@ -563,7 +563,15 @@ interrupt_base:
 	EXCEPTION(0x3100, FixedIntervalTimer, unknown_exception, EXC_XFER_EE)
 
 	/* Watchdog Timer Interrupt */
-#ifdef CONFIG_BOOKE_WDT
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+	START_EXCEPTION(WatchdogTimer)
+	mtspr	SPRN_SPRG_WSCRATCH_CRIT, r3
+	lis	r3, TSR_WIS@h
+	mtspr	SPRN_TSR, r3
+	/* use WSCRATCH to avoid any potential problems with KVM paravirt */
+	mfspr	r3, SPRN_SPRG_WSCRATCH_CRIT
+	rfci
+#elif defined(CONFIG_BOOKE_WDT)
 	CRITICAL_EXCEPTION(0x3200, WatchdogTimer, WatchdogException)
 #else
 	CRITICAL_EXCEPTION(0x3200, WatchdogTimer, unknown_exception)
diff --git a/arch/powerpc/kernel/idle.c b/arch/powerpc/kernel/idle.c
index 049dda6..66671b5 100644
--- a/arch/powerpc/kernel/idle.c
+++ b/arch/powerpc/kernel/idle.c
@@ -94,6 +94,9 @@ void cpu_idle(void)
 		HMT_medium();
 		ppc64_runlatch_on();
 		tick_nohz_restart_sched_tick();
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+		mtspr(SPRN_TSR, TSR_ENW);
+#endif
 		if (cpu_should_die())
 			cpu_die();
 		preempt_enable_no_resched();
diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 14cf912..b7ce1f0 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -614,6 +614,9 @@ void paravirt_timer_interrupt(struct pt_regs *regs)
 
 void timer_interrupt(struct pt_regs *regs)
 {
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+	mtspr(SPRN_TSR, TSR_ENW);
+#endif
 	paravirt_timer_interrupt(regs);
 }
 
@@ -803,7 +806,15 @@ void start_cpu_decrementer(void)
 	mtspr(SPRN_TSR, TSR_ENW | TSR_WIS | TSR_DIS | TSR_FIS);
 
 	/* Enable decrementer interrupt */
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+#define WDTP(x)	((((x)&0x3)<<30)|(((x)&0x3c)<<15))
+	{
+		u32 period = WDTP(CONFIG_FSL_ERRATUM_A_006184_PERIOD);
+		mtspr(SPRN_TCR, TCR_DIE | TCR_WIE | period);
+	}
+#else
 	mtspr(SPRN_TCR, TCR_DIE);
+#endif
 #endif /* defined(CONFIG_BOOKE) || defined(CONFIG_40x) */
 }
 
diff --git a/arch/powerpc/platforms/Kconfig.cputype b/arch/powerpc/platforms/Kconfig.cputype
index 7612806..1461232 100644
--- a/arch/powerpc/platforms/Kconfig.cputype
+++ b/arch/powerpc/platforms/Kconfig.cputype
@@ -354,4 +354,46 @@ config NOT_COHERENT_CACHE
 config CHECK_CACHE_COHERENCY
 	bool
 
+config FSL_ERRATUM_A_006184
+	bool "Work around erratum A-006184"
+	help
+	  Define this to work around erratum A-006184 ("Simultaneous
+	  Instruction L1 MMU miss (due to eviction) and interrupt
+	  servicing can cause a core hang").  This erratum affects
+	  e500v1, e500v2, e500mc, and e5500.  The workaround will
+	  cause a watchdog interrupt to occur periodically.  It will
+	  not avoid the hang described by the erratum, but it will
+	  recover from it when the next watchdog interrupt expires.
+
+	  The normal watchdog functionality cannot be used when this
+	  workaround is enabled.
+
+	  If you are running Linux as the guest of a hypervisor, you
+	  should enable this (or a similar workaround) in the host
+	  instead.
+
+	  Note that it is believed that it is unlikely that the hang
+	  will be encountered in normal Linux operation.  Running KVM
+	  or using hugetlbfs could increase the chance of seeing the
+	  hang.
+config FSL_ERRATUM_A_006184_PERIOD
+	int "Watchdog period for A-006184 workaround"
+	range 32 52
+	depends on FSL_ERRATUM_A_006184
+	default 43
+	help
+	  This is the watchdog period to be used for the A-006184
+	  workaround.  The watchdog will fire whenever the bit selected
+	  transitions from 0 to 1 in the time base.  The bits are
+	  numbered with 0 starting at the most-signficant end --
+	  larger numbers give a more frequent period.
+
+	  The period must be set longer than the non-idle decrementer
+	  period, to ensure that the watchdog interrupt only actually
+	  happens when stuck -- but the longer the period, the worse the
+	  latency will be if a hang does occur.  Long decrementer
+	  timeouts when idle due to CONFIG_NO_HZ should not be a problem,
+	  since when idle we will always have just executed from the main
+	  kernel mapping, so it should not be absent from the L1 I-MMU.
+
 endmenu
diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index 480a6c7..22412f1 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -922,7 +922,7 @@ config PIKA_WDT
 
 config BOOKE_WDT
 	bool "PowerPC Book-E Watchdog Timer"
-	depends on BOOKE || 4xx
+	depends on (BOOKE || 4xx) && !FSL_ERRATUM_A_00618
 	---help---
 	  Please see Documentation/watchdog/watchdog-api.txt for
 	  more information.
-- 
1.7.5.4

