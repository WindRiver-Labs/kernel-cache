From 25e791fbf16fbb548a2b1ec6009d61a6d8d67102 Mon Sep 17 00:00:00 2001
From: Xufeng Zhang <xufeng.zhang@windriver.com>
Date: Fri, 30 Mar 2012 14:33:05 +0800
Subject: [PATCH] ppc/pm: Make mpc85xx_enter_deep_sleep() compatible with both 32-bit and 36-bit modes

After FSL NON-DPAA SDK 1.0 update, mpc85xx_enter_deep_sleep() definition
has changed, ccsrbar input parameter has been casted to 64-bit so as to
make assembly code compatible with both 32-bit and 36-bit address space.
However, the implementation for mpc85xx_enter_deep_sleep() in
suspend-asm.S has not been updated accordingly, so this makes p1022ds
can't works normally in deep sleep mode.
The main changes include:
1). Update mpc85xx_enter_deep_sleep() to make it compatible
    with both 32-bit and 36-bit address space.
2). Remove the useless mpc85xx_enter_sleep().

[Extracted from vendor drop QorIQ-NONDPAA-SDK-V1-20110429_ltib.iso:
linux-2.6.35-qoriq-Add-36-bit-support-for-deep-sleep.patch]

Integrated-by: Xufeng Zhang <xufeng.zhang@windriver.com>
---
 arch/powerpc/platforms/85xx/suspend-asm.S |  131 ++++++++++-------------------
 1 files changed, 44 insertions(+), 87 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/suspend-asm.S b/arch/powerpc/platforms/85xx/suspend-asm.S
index 16a4053..f69d9cb 100644
--- a/arch/powerpc/platforms/85xx/suspend-asm.S
+++ b/arch/powerpc/platforms/85xx/suspend-asm.S
@@ -3,7 +3,7 @@
  *
  * Author: Scott Wood <scottwood@freescale.com>
  *
- * Copyright (C) 2006-2010 Freescale Semiconductor, Inc. All rights reserved.
+ * Copyright (C) 2006-2011 Freescale Semiconductor, Inc. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 as published
@@ -42,9 +42,9 @@
 	.align	5
 mpc85xx_sleep_save_area:
 	.space	STATE_SAVE_SIZE
-ccsrbase_hi:
+ccsrbase_low:
 	.long	0
-ccsrbase:
+ccsrbase_high:
 	.long	0
 powmgtreq:
 	.long	0
@@ -53,27 +53,20 @@ powmgtreq:
 	.align	12
 
 	/*
-	 * r3 = physical address of CCSR
-	 * r4 = JOG or deep sleep request
+	 * r3 = high word of physical address of CCSR
+	 * r4 = low word of physical address of CCSR
+	 * r5 = JOG or deep sleep request
 	 *      JOG-0x00200000, deep sleep-0x00100000
 	 */
 _GLOBAL(mpc85xx_enter_deep_sleep)
-#ifdef CONFIG_PHYS_64BIT
-	lis	r6, ccsrbase_hi@ha
-	stw	r3, ccsrbase_hi@l(r6)
-
-	lis	r6, ccsrbase@ha
-	stw	r4, ccsrbase@l(r6)
+	lis	r6, ccsrbase_low@ha
+	stw	r4, ccsrbase_low@l(r6)
+	lis	r6, ccsrbase_high@ha
+	stw	r3, ccsrbase_high@l(r6)
 
 	lis	r6, powmgtreq@ha
 	stw	r5, powmgtreq@l(r6)
-#else
-	lis	r6, ccsrbase@ha
-	stw	r3, ccsrbase@l(r6)
 
-	lis	r6, powmgtreq@ha
-	stw	r4, powmgtreq@l(r6)
-#endif
 	lis	r10, mpc85xx_sleep_save_area@h
 	ori	r10, r10, mpc85xx_sleep_save_area@l
 
@@ -215,30 +208,30 @@ _GLOBAL(mpc85xx_enter_deep_sleep)
 	stw	r4, SS_TB+0(r10)
 	stw	r5, SS_TB+4(r10)
 
-	lis	r4, ccsrbase@ha
-	lwz	r3, ccsrbase@l(r4)
+	lis	r5, ccsrbase_low@ha
+	lwz	r4, ccsrbase_low@l(r5)
+	lis	r5, ccsrbase_high@ha
+	lwz	r3, ccsrbase_high@l(r5)
 
 	/* Disable machine checks and critical exceptions */
-	mfmsr	r4
-	rlwinm	r4, r4, 0, ~MSR_CE
-	rlwinm	r4, r4, 0, ~MSR_ME
-	mtmsr	r4
+	mfmsr	r5
+	rlwinm	r5, r5, 0, ~MSR_CE
+	rlwinm	r5, r5, 0, ~MSR_ME
+	mtmsr	r5
 	isync
 
 	/* Use TLB1[15] to map the CCSR at 0xf0000000 */
-	lis	r4, 0x100f
-	mtspr	SPRN_MAS0, r4
-	lis	r4, 0xc000
-	ori	r4, r4, 0x0500
-	mtspr	SPRN_MAS1, r4
-	lis	r4, 0xf000
-	ori	r4, r4, 0x000a
-	mtspr	SPRN_MAS2, r4
-	rlwinm	r4, r3, 0, 0xfffff000
-	ori	r4, r4, 0x0005
-	mtspr	SPRN_MAS3, r4
-	lis	r4, ccsrbase_hi@ha
-	lwz	r3, ccsrbase_hi@l(r4)
+	lis	r5, 0x100f
+	mtspr	SPRN_MAS0, r5
+	lis	r5, 0xc000
+	ori	r5, r5, 0x0500
+	mtspr	SPRN_MAS1, r5
+	lis	r5, 0xf000
+	ori	r5, r5, 0x000a
+	mtspr	SPRN_MAS2, r5
+	rlwinm	r5, r4, 0, 0xfffff000
+	ori	r5, r5, 0x0005
+	mtspr	SPRN_MAS3, r5
 	mtspr	SPRN_MAS7, r3
 	isync
 	tlbwe
@@ -321,12 +314,6 @@ _GLOBAL(mpc85xx_enter_deep_sleep)
 2:	mfspr	r4, SPRN_PIR
 	andi.	r4, r4, 1
 99:	bne	99b
-#ifdef CONFIG_PHYS_64BIT
-	/* for 36-bit addressing */
-	lis	r6, 0x8000		/* enable machine check */
-	ori	r6,r6,0x0080		/* enable MAS7 updates */
-	mtspr	SPRN_HID0,r6
-#endif
 
 	/* Establish a temporary 64MB 0->0 mapping in TLB1[1]. */
 	lis	r4, 0x1001
@@ -379,23 +366,23 @@ mpc85xx_deep_resume:
 	isync
 
 	/* Access the ccsrbase address with TLB1[0] */
-	lis	r4, ccsrbase@ha
-	lwz	r3, ccsrbase@l(r4)
+	lis	r5, ccsrbase_low@ha
+	lwz	r4, ccsrbase_low@l(r5)
+	lis	r5, ccsrbase_high@ha
+	lwz	r3, ccsrbase_high@l(r5)
 
 	/* Use TLB1[15] to map the CCSR at 0xf0000000 */
-	lis	r4, 0x100f
-	mtspr	SPRN_MAS0, r4
-	lis	r4, 0xc000
-	ori	r4, r4, 0x0500
-	mtspr	SPRN_MAS1, r4
-	lis	r4, 0xf000
-	ori	r4, r4, 0x000a
-	mtspr	SPRN_MAS2, r4
-	rlwinm	r4, r3, 0, 0xfffff000
-	ori	r4, r4, 0x0005
-	mtspr	SPRN_MAS3, r4
-	lis	r4, ccsrbase_hi@ha
-	lwz	r3, ccsrbase_hi@l(r4)
+	lis	r5, 0x100f
+	mtspr	SPRN_MAS0, r5
+	lis	r5, 0xc000
+	ori	r5, r5, 0x0500
+	mtspr	SPRN_MAS1, r5
+	lis	r5, 0xf000
+	ori	r5, r5, 0x000a
+	mtspr	SPRN_MAS2, r5
+	rlwinm	r5, r4, 0, 0xfffff000
+	ori	r5, r5, 0x0005
+	mtspr	SPRN_MAS3, r5
 	mtspr	SPRN_MAS7, r3
 	isync
 	tlbwe
@@ -619,36 +606,6 @@ mpc85xx_deep_resume:
 
 	blr
 
-	/* r3 = virtual address of POWMGTCSR */
-_GLOBAL(mpc85xx_enter_sleep)
-	mr	r0, r3
-	mflr	r10
-	bl	flush_dcache_L1		/* flush L1 d-cache */
-	mtlr	r10
-	mr	r3, r0
-
-	/* Set sleep bit in POWMGTCSR */
-	lis	r4, 0x0042
-	stw	r4, 0(r3)
-
-	mftb	r5
-1:	/* spin until either we enter sleep, or the sleep process is
-	 * aborted due to a pending wakeup event.  Wait some time between
-	 * accesses, so we don't flood the bus and prevent the pmc from
-	 * detecting an idle system.
-	 */
-
-	mftb	r4
-	subf	r7, r5, r4
-	cmpwi	r7, 1000
-	blt	1b
-	mr	r5, r4
-
-	lwz	r6, 0(r3)
-	andis.	r6, r6, 0x0002
-	bne	1b
-
-	blr
 
 _GLOBAL(mpc85xx_cpu_down)
        stwu    r1,-16(r1)
-- 
1.7.0.4

