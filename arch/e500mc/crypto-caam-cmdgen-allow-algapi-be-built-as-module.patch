From 78433fef9cd8f583078e470a60c58f3a281584fb Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Fri, 10 Sep 2010 10:25:59 +0800
Subject: [PATCH 182/252] crypto: caam - cmdgen: allow algapi be built as module

Patch taken from FSL vendor SDK 2.1.

This fixes building error when it is built as a module.

Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/crypto/caam/dcl/cmdgen.c |   24 ++++++++++++++++++++++++
 1 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/drivers/crypto/caam/dcl/cmdgen.c b/drivers/crypto/caam/dcl/cmdgen.c
index 3eb89c5..16b0ca7 100644
--- a/drivers/crypto/caam/dcl/cmdgen.c
+++ b/drivers/crypto/caam/dcl/cmdgen.c
@@ -87,6 +87,7 @@ u_int32_t *cmd_insert_shared_hdr(u_int32_t *descwd, u_int8_t startidx,
 
 	return descwd + 1;
 }
+EXPORT_SYMBOL(cmd_insert_shared_hdr);
 
 /**
  * cmd_insert_hdr()
@@ -156,6 +157,7 @@ u_int32_t *cmd_insert_hdr(u_int32_t *descwd, u_int8_t startidx,
 
 	return descwd + 1;
 }
+EXPORT_SYMBOL(cmd_insert_hdr);
 
 /**
  * cmd_insert_key()
@@ -281,6 +283,7 @@ u_int32_t *cmd_insert_key(u_int32_t *descwd, u_int8_t *key, u_int32_t keylen,
 		*nextwd++ = (u_int32_t)key;
 	return nextwd;
 }
+EXPORT_SYMBOL(cmd_insert_key);
 
 /**
  * cmd_insert_seq_key()
@@ -380,6 +383,7 @@ u_int32_t *cmd_insert_seq_key(u_int32_t *descwd, u_int32_t keylen,
 
 	return nextwd;
 }
+EXPORT_SYMBOL(cmd_insert_seq_key);
 
 /**
  * cmd_insert_proto_op_ipsec()
@@ -510,6 +514,7 @@ u_int32_t *cmd_insert_proto_op_ipsec(u_int32_t *descwd, u_int8_t cipheralg,
 
 	return descwd++;
 }
+EXPORT_SYMBOL(cmd_insert_proto_op_ipsec);
 
 /**
  * Insert a 802.16 WiMAX protocol OP instruction. These can only be
@@ -534,6 +539,7 @@ u_int32_t *cmd_insert_proto_op_wimax(u_int32_t *descwd, u_int8_t mode,
 
 	return descwd++;
 }
+EXPORT_SYMBOL(cmd_insert_proto_op_wimax);
 
 /**
  * Insert a 802.11 WiFi protocol OP instruction
@@ -553,6 +559,7 @@ u_int32_t *cmd_insert_proto_op_wifi(u_int32_t *descwd, enum protdir dir)
 
 	return descwd++;
 }
+EXPORT_SYMBOL(cmd_insert_proto_op_wifi);
 
 /**
  * Insert a MacSec protocol OP instruction
@@ -572,6 +579,7 @@ u_int32_t *cmd_insert_proto_op_macsec(u_int32_t *descwd, enum protdir dir)
 
 	return descwd++;
 }
+EXPORT_SYMBOL(cmd_insert_proto_op_macsec);
 
 /**
  * Insert a unidirectional protocol OP instruction
@@ -595,6 +603,7 @@ u_int32_t *cmd_insert_proto_op_unidir(u_int32_t *descwd, u_int32_t protid,
 
 	return descwd++;
 }
+EXPORT_SYMBOL(cmd_insert_proto_op_unidir);
 
 /**
  * cmd_insert_alg_op()
@@ -635,6 +644,7 @@ u_int32_t *cmd_insert_alg_op(u_int32_t *descwd, u_int32_t optype,
 
 	return ++descwd;
 }
+EXPORT_SYMBOL(cmd_insert_alg_op);
 
 /**
  * cmd_insert_pkha_op()
@@ -655,6 +665,7 @@ u_int32_t *cmd_insert_pkha_op(u_int32_t *descwd, u_int32_t pkmode)
 
 	return ++descwd;
 }
+EXPORT_SYMBOL(cmd_insert_pkha_op);
 
 /*
  * FIXME: the following two functions are functionally identical
@@ -693,6 +704,7 @@ u_int32_t *cmd_insert_seq_in_ptr(u_int32_t *descwd, void *ptr, u_int32_t len,
 
 	return descwd + 2;
 }
+EXPORT_SYMBOL(cmd_insert_seq_in_ptr);
 
 /**
  * cmd_insert_seq_out_ptr()
@@ -727,6 +739,7 @@ u_int32_t *cmd_insert_seq_out_ptr(u_int32_t *descwd, void *ptr, u_int32_t len,
 
 	return descwd + 2;
 }
+EXPORT_SYMBOL(cmd_insert_seq_out_ptr);
 
 /**
  * cmd_insert_load()
@@ -794,6 +807,7 @@ u_int32_t *cmd_insert_load(u_int32_t *descwd, void *data,
 
 	return descwd;
 }
+EXPORT_SYMBOL(cmd_insert_load);
 
 /**
  * cmd_insert_seq_load()
@@ -827,6 +841,7 @@ u_int32_t *cmd_insert_seq_load(u_int32_t *descwd, u_int32_t class_access,
 
 	return descwd + 1;
 }
+EXPORT_SYMBOL(cmd_insert_seq_load);
 
 /**
  * cmd_insert_fifo_load()
@@ -888,6 +903,7 @@ u_int32_t *cmd_insert_fifo_load(u_int32_t *descwd, void *data, u_int32_t len,
 
 	return descwd;
 }
+EXPORT_SYMBOL(cmd_insert_fifo_load);
 
 /**
  * cmd_insert_seq_fifo_load()
@@ -922,6 +938,7 @@ u_int32_t *cmd_insert_seq_fifo_load(u_int32_t *descwd, u_int32_t class_access,
 
 	return descwd + 1;
 }
+EXPORT_SYMBOL(cmd_insert_seq_fifo_load);
 
 /**
  * cmd_insert_store()
@@ -977,6 +994,7 @@ u_int32_t *cmd_insert_store(u_int32_t *descwd, void *data,
 
 	return descwd;
 }
+EXPORT_SYMBOL(cmd_insert_store);
 
 /**
  * cmd_insert_seq_store()
@@ -1012,6 +1030,7 @@ u_int32_t *cmd_insert_seq_store(u_int32_t *descwd, u_int32_t class_access,
 
 	return descwd + 1;
 }
+EXPORT_SYMBOL(cmd_insert_seq_store);
 
 /**
  * cmd_insert_fifo_store()
@@ -1073,6 +1092,7 @@ u_int32_t *cmd_insert_fifo_store(u_int32_t *descwd, void *data, u_int32_t len,
 
 	return descwd;
 }
+EXPORT_SYMBOL(cmd_insert_fifo_store);
 
 /**
  * cmd_insert_seq_fifo_store()
@@ -1111,6 +1131,7 @@ u_int32_t *cmd_insert_seq_fifo_store(u_int32_t *descwd, u_int32_t class_access,
 
 	return descwd + 1;
 }
+EXPORT_SYMBOL(cmd_insert_seq_fifo_store);
 
 /**
  * cmd_insert_jump()
@@ -1151,6 +1172,7 @@ u_int32_t *cmd_insert_jump(u_int32_t *descwd, u_int32_t jtype,
 
 	return descwd;
 }
+EXPORT_SYMBOL(cmd_insert_jump);
 
 /**
  * cmd_insert_math()
@@ -1211,6 +1233,7 @@ u_int32_t *cmd_insert_math(u_int32_t *descwd, u_int32_t func,
 
 	return descwd;
 }
+EXPORT_SYMBOL(cmd_insert_math);
 
 /**
  * cmd_insert_move()
@@ -1245,3 +1268,4 @@ u_int32_t *cmd_insert_move(u_int32_t *descwd, u_int32_t waitcomp,
 
 	return descwd;
 }
+EXPORT_SYMBOL(cmd_insert_move);
-- 
1.6.5.2

