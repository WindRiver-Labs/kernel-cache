From d52591a33239bce95f967f493298c9c0160c9965 Mon Sep 17 00:00:00 2001
From: Shlomi Gridish <gridish@freescale.com>
Date: Fri, 7 Aug 2009 16:15:36 +0300
Subject: [PATCH 025/252] FMD5.3 Fixing BUG #3940

Signed-off-by: Shlomi Gridish <gridish@freescale.com>
[Cleanly applied the FSL SDK 2.0.3 patch:
"0001-FMD5.3.patch"]
Integrated-by: Yuri Nedel <Yuri.Nedel@windriver.com>
---
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c |   95 ++++++++++++++++----
 .../kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h |    1 +
 2 files changed, 79 insertions(+), 17 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
index a865162..07aaf94 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.c
@@ -241,8 +241,6 @@ static struct qman_fq * FqAlloc(t_LnxWrpFmDev   *p_LnxWrpFmDev,
         flags &= ~QMAN_FQ_FLAG_DYNAMIC_FQID;
     }
 
-    DBG(TRACE, ("fqid %d, flags 0x%08x, channel %d, wq %d",fqid,flags,channel,wq));
-
     if (qman_create_fq(fqid, flags, &p_FmtFq->fq_base)) {
         REPORT_ERROR(MAJOR, E_NO_MEMORY, ("FQ obj - qman_new_fq!!!"));
         XX_Free(p_FmtFq);
@@ -264,6 +262,8 @@ static struct qman_fq * FqAlloc(t_LnxWrpFmDev   *p_LnxWrpFmDev,
         }
     }
 
+    DBG(TRACE, ("fqid %d, flags 0x%08x, channel %d, wq %d",qman_fq_fqid(fq),flags,channel,wq));
+
     return fq;
 }
 
@@ -281,7 +281,7 @@ static t_Error QmEnqueueCB (t_Handle h_Arg, uint32_t fqid, void *p_Fd)
     if (_errno)
         RETURN_ERROR(MINOR, E_INVALID_STATE, NO_MSG);
 
-    while (hcFrmRcv && timeout--)
+    while (hcFrmRcv && --timeout)
     {
         udelay(1);
         cpu_relax();
@@ -475,7 +475,7 @@ static struct qe_firmware *FindFmanMicrocode(void)
 static t_LnxWrpFmDev * ReadFmDevTreeNode (struct of_device *of_dev)
 {
     t_LnxWrpFmDev       *p_LnxWrpFmDev;
-    struct device_node  *fm_node, *dev_node;
+    struct device_node  *fm_node, *dev_node, *dpa_node;
     struct of_device_id name;
     struct resource     res;
     const uint32_t      *uint32_prop;
@@ -597,6 +597,73 @@ static t_LnxWrpFmDev * ReadFmDevTreeNode (struct of_device *of_dev)
             p_LnxWrpFmDev->defPcd = e_NO_PCD;
     }
 
+    of_node_put(fm_node);
+
+    memset(&name, 0, sizeof(struct of_device_id));
+    BUG_ON(strlen("fsl,dpa-ethernet") >= sizeof(name.compatible));
+    strcpy(name.compatible, "fsl,dpa-ethernet");
+    for_each_matching_node(dpa_node, &name) {
+        struct device_node  *mac_node;
+        const phandle       *phandle_prop;
+
+        phandle_prop = (typeof(phandle_prop))of_get_property(dpa_node, "fsl,fman-mac", &lenp);
+        if (phandle_prop == NULL) {
+            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, fsl,fman-mac) failed", dpa_node->full_name));
+            return NULL;
+        }
+
+        BUG_ON(lenp != sizeof(phandle));
+
+        mac_node = of_find_node_by_phandle(*phandle_prop);
+        if (unlikely(mac_node == NULL)) {
+            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_find_node_by_phandle() failed"));
+            return NULL;
+        }
+
+        fm_node = of_get_parent(mac_node);
+        if (unlikely(fm_node == NULL)) {
+            REPORT_ERROR(MAJOR, E_NO_DEVICE, ("of_get_parent() = %d", _errno));
+            return NULL;
+        }
+
+        uint32_prop = (uint32_t *)of_get_property(fm_node, "cell-index", &lenp);
+        if (unlikely(uint32_prop == NULL)) {
+            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) failed", fm_node->full_name));
+            return NULL;
+        }
+        BUG_ON(lenp != sizeof(uint32_t));
+
+        if (*uint32_prop == p_LnxWrpFmDev->id) {
+            phandle_prop = (typeof(phandle_prop))of_get_property(dpa_node, "fsl,qman-channel", &lenp);
+            if (unlikely(phandle_prop == NULL)) {
+                REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, fsl,qman-channel) failed", dpa_node->full_name));
+                return NULL;
+            }
+            BUG_ON(lenp != sizeof(phandle));
+
+            dev_node = of_find_node_by_phandle(*phandle_prop);
+            if (unlikely(dev_node == NULL)) {
+                REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_find_node_by_phandle() failed"));
+                return NULL;
+            }
+
+            uint32_prop = (typeof(uint32_prop))of_get_property(dev_node, "fsl,qman-channel-id", &lenp);
+            if (unlikely(uint32_prop == NULL)) {
+                REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, fsl,qman-channel-id) failed", dev_node->full_name));
+                of_node_put(dev_node);
+                return NULL;
+            }
+            of_node_put(dev_node);
+            BUG_ON(lenp != sizeof(uint32_t));
+            p_LnxWrpFmDev->hcCh = *uint32_prop;
+            break;
+        }
+
+        of_node_put(mac_node);
+        of_node_put(fm_node);
+    }
+
+    /* Loading the fman-controller code */
     if (p_LnxWrpFmDev->ccActive) {
         struct qe_firmware *fw = FindFmanMicrocode();
 
@@ -616,8 +683,6 @@ static t_LnxWrpFmDev * ReadFmDevTreeNode (struct of_device *of_dev)
 
     p_LnxWrpFmDev->active = TRUE;
 
-    of_node_put(fm_node);
-
     return p_LnxWrpFmDev;
 }
 
@@ -644,15 +709,13 @@ static t_LnxWrpFmPortDev * ReadFmPortDevTreeNode (struct of_device *of_dev)
 
     uint32_prop = (uint32_t *)of_get_property(port_node, "cell-index", &lenp);
     if (unlikely(uint32_prop == NULL)) {
-        REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) "
-                                              "failed", port_node->full_name));
+        REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) failed", port_node->full_name));
         return NULL;
     }
     BUG_ON(lenp != sizeof(uint32_t));
     if (of_device_is_compatible(port_node, "fsl,fman-port-oh")) {
         if (unlikely(*uint32_prop >= FM_MAX_NUM_OF_OP_PORTS+1)) {
-            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) "
-                                                  "failed", port_node->full_name));
+            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) failed", port_node->full_name));
             return NULL;
         }
 
@@ -680,8 +743,7 @@ static t_LnxWrpFmPortDev * ReadFmPortDevTreeNode (struct of_device *of_dev)
     else if (of_device_is_compatible(port_node, "fsl,fman-port-1g-tx") ||
              of_device_is_compatible(port_node, "fsl,fman-port-10g-tx")) {
         if (unlikely(*uint32_prop >= FM_MAX_NUM_OF_TX_PORTS)) {
-            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) "
-                                                  "failed", port_node->full_name));
+            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) failed", port_node->full_name));
             return NULL;
         }
         if (of_device_is_compatible(port_node, "fsl,fman-port-10g-tx"))
@@ -708,8 +770,7 @@ static t_LnxWrpFmPortDev * ReadFmPortDevTreeNode (struct of_device *of_dev)
     else if (of_device_is_compatible(port_node, "fsl,fman-port-1g-rx") ||
              of_device_is_compatible(port_node, "fsl,fman-port-10g-rx")) {
         if (unlikely(*uint32_prop >= FM_MAX_NUM_OF_RX_PORTS)) {
-            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) "
-                                                  "failed", port_node->full_name));
+            REPORT_ERROR(MAJOR, E_INVALID_VALUE, ("of_get_property(%s, cell-index) failed", port_node->full_name));
             return NULL;
         }
         if (of_device_is_compatible(port_node, "fsl,fman-port-10g-rx"))
@@ -816,7 +877,7 @@ static t_Error ConfigureFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
 
     _errno = can_request_irq(p_LnxWrpFmDev->irq1, 0);
     if (unlikely(_errno < 0))
-        DBG(WARNING, ("can_request_irq() = %d", _errno));
+        RETURN_ERROR(MAJOR, E_INVALID_STATE, ("can_request_irq() = %d", _errno));
     _errno = devm_request_irq(p_LnxWrpFmDev->dev, p_LnxWrpFmDev->irq1, fm_irq, 0, "fman", p_LnxWrpFmDev);
     if (unlikely(_errno < 0))
         RETURN_ERROR(MAJOR, E_INVALID_STATE, ("request_irq(%d) = %d", p_LnxWrpFmDev->irq1, _errno));
@@ -915,13 +976,13 @@ static t_Error InitFmPcdDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
             FqAlloc(p_LnxWrpFmDev,
                     0,
                     QMAN_FQ_FLAG_NO_ENQUEUE,
-                    0,
+                    p_LnxWrpFmDev->hcCh,
                     7);
         p_LnxWrpFmDev->hc_tx_err_fq  =
             FqAlloc(p_LnxWrpFmDev,
                     0,
                     QMAN_FQ_FLAG_NO_ENQUEUE,
-                    0,
+                    p_LnxWrpFmDev->hcCh,
                     7);
 
         fmPcdParams.hc.portBaseAddr = p_LnxWrpFmPortDev->baseAddr;
diff --git a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
index 4742d75..975fe3f 100644
--- a/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
+++ b/drivers/net/dpa/NetCommSw/user/env/linux/kernel/2.6/wrappers/Peripherals/FM/lnxwrp_fm.h
@@ -125,6 +125,7 @@ typedef struct {
     t_WrpFmDevSettings          fmDevSettings;
     t_WrpFmPcdDevSettings       fmPcdDevSettings;
     t_Handle                    h_Dev;
+    uint16_t                    hcCh;
 
     t_Handle                    h_MuramDev;
     t_Handle                    h_PcdDev;
-- 
1.6.5.2

