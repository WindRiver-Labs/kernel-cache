From eb77c7f3f892dbbd9288138ff4fc5adac899c9f7 Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Wed, 29 Jun 2011 13:40:29 +0800
Subject: [PATCH 199/233] fman: introduce fman_init_early function

We can't reset B/QMAN in dump kernel. So we just free all
the B/Qman resources before booting the dump kernel. Since we
also need to shutdown FMAN before we free these resources,
introduce fman_init_early function for kexec to register
a crash shutdown hooks to do this.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
[rebase it onto QorIQ-DPAA-SDK-V1-20110609-systembuilder.iso]
Integrated-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 arch/powerpc/platforms/85xx/corenet_ds.c           |    6 +++
 .../src/wrappers/Peripherals/FM/lnxwrp_fm.c        |   35 ++++++++++++++++++++
 2 files changed, 41 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/platforms/85xx/corenet_ds.c b/arch/powerpc/platforms/85xx/corenet_ds.c
index 5adbee3..9fbca86 100644
--- a/arch/powerpc/platforms/85xx/corenet_ds.c
+++ b/arch/powerpc/platforms/85xx/corenet_ds.c
@@ -169,6 +169,9 @@ int __init declare_of_platform_devices(void)
 /* Early setup is required for large chunks of contiguous (and coarsely-aligned)
  * memory. The following shoe-horns Qman/Bman "init_early" calls into the
  * platform setup to let them parse their CCSR nodes early on. */
+#ifdef CONFIG_FSL_FMAN
+void __init fman_init_early(void);
+#endif
 #ifdef CONFIG_FSL_QMAN_CONFIG
 void __init qman_init_early(void);
 #endif
@@ -181,6 +184,9 @@ void __init pme2_init_early(void);
 
 __init void corenet_ds_init_early(void)
 {
+#ifdef CONFIG_FSL_FMAN
+	fman_init_early();
+#endif
 #ifdef CONFIG_FSL_QMAN_CONFIG
 	qman_init_early();
 #endif
diff --git a/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c b/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c
index 52be651..2bd8738 100644
--- a/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c
+++ b/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c
@@ -63,6 +63,7 @@
 #include <asm/qe.h>        /* For struct qe_firmware */
 #include <sysdev/fsl_soc.h>
 #include <linux/stat.h>	   /* For file access mask */
+#include <asm/kexec.h>
 
 /* NetCommSw Headers --------------- */
 #include "std_ext.h"
@@ -3072,3 +3073,37 @@ void fm_mutex_unlock(void)
 }
 EXPORT_SYMBOL(fm_mutex_unlock);
 
+#ifdef CONFIG_KEXEC
+static int fm_crash_shutdown(struct device *dev, void *data)
+{
+	struct of_platform_driver *drv = data;
+	struct of_device *of_dev = to_of_device(dev);
+	t_LnxWrpFmDev   *p;
+
+	if (dev->driver != &drv->driver)
+		return 0;
+
+	p = dev_get_drvdata(&of_dev->dev);
+
+	if (!p->active)
+		return 0;
+
+	if (p->h_Dev)
+		FM_Free(p->h_Dev);
+
+	return 0;
+}
+
+static void fm_crash_shutdown_all(void)
+{
+	bus_for_each_dev(&of_platform_bus_type, NULL,
+			&fm_driver, fm_crash_shutdown);
+}
+
+void __init fman_init_early(void)
+{
+	crash_shutdown_register(&fm_crash_shutdown_all);
+}
+#else
+void __init fman_init_early(void) {}
+#endif
-- 
1.7.0.4

