From e8b0494941e3fe71239c94c356497690e0b206c2 Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Fri, 1 Jul 2011 14:15:18 +0800
Subject: [PATCH 223/233] fsl_qbman: fix bug warning in preempt_rt

In preempt_rt kernel, following warning info is reported:
BUG: sleeping function called from invalid context at kernel/rtmutex.c:707
pcnt: 1 0 in_atomic(): 1, irqs_disabled(): 0, pid: 22, name: sirq-net-rx/1
Call Trace:
[ebd05b80] [c0007c20] show_stack+0x44/0x160 (unreliable)
[ebd05bb0] [c00350a8] __might_sleep+0xe4/0x108
[ebd05bc0] [c05f5d08] __rt_spin_lock+0x38/0xb4
[ebd05bd0] [c05f5ff8] rt_read_lock+0x28/0x48
[ebd05be0] [c05ae558] fib_table_lookup+0x2c/0x108
[ebd05c10] [c05af5a4] fib4_rule_action+0x7c/0x8c
[ebd05c30] [c0559fd0] fib_rules_lookup+0x120/0x18c
[ebd05c60] [c05af6b0] fib_lookup+0x34/0x50
[ebd05c80] [c056db58] ip_route_input_slow+0x128/0xac8
[ebd05d30] [c056e564] ip_route_input+0x6c/0x6cc
[ebd05d80] [c059c400] arp_process+0x390/0x6e8
[ebd05e10] [c054443c] netif_receive_skb+0x3d8/0x538
[ebd05e50] [c0476418] ingress_rx_default_dqrr+0x17c/0x3a8
[ebd05e80] [c051fe58] qman_poll_dqrr+0x1f8/0x28c
[ebd05eb0] [c0477a94] dpaa_eth_poll+0x24/0x98
[ebd05ed0] [c0544910] net_rx_action+0xec/0x2fc
[ebd05f30] [c0050614] run_ksoftirqd+0x19c/0x2c0
[ebd05fa0] [c006a00c] kthread+0x78/0x7c
[ebd05ff0] [c00111cc] original_kernel_thread+0x4c/0x68

preempt needs to be enabled before calling ingress_rx_default_dqrr

Signed-off-by: Andrew Liu <shengping.liu@windriver.com>
[rebase it onto QorIQ-DPAA-SDK-V1-20110609-systembuilder.iso]
Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index be85234..bec9358 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -1098,7 +1098,13 @@ int qman_poll_dqrr(unsigned int limit)
 #endif
 	{
 		BUG_ON(p->irq_sources & QM_PIRQ_DQRI);
+#ifdef CONFIG_PREEMPT_RT
+		put_cpu();
+#endif
 		ret = __poll_portal_fast(p, limit);
+#ifdef CONFIG_PREEMPT_RT
+		get_cpu();
+#endif
 	}
 	put_affine_portal();
 	return ret;
-- 
1.7.0.4

