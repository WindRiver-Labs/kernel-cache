From e5dcffafe2a4b4a5fe0eb6e3e2166deda7e8e92f Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Wed, 4 Aug 2010 15:36:08 +0800
Subject: [PATCH 163/252] qman: make it easier to use static initialisation.

It is from FSL vendor SDK 2.x.

Because of unions in "struct qm_fd", static initialisation
is very difficult. This change adds untyped versions of the
FD format, moves the "opaque" field to the top of the union
(untagged static initialisation of a union assigns values
to the first field of a union), and adds two macros for
declaring FDs.

A similar change is made to allow static initialisation of
"struct qm_fqd" fields for tail-drop, which is convenient
for use with qman_init_fq().
This is achieved by removing the opaque version of td_thresh
from the union, which makes sense anyway as it might otherwise
be misinterpreted as a threshold value which it is *not*
(it's a exp+mantissa representation).

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 include/linux/fsl_qman.h |   45 +++++++++++++++++++++++++++++++++------------
 1 files changed, 33 insertions(+), 12 deletions(-)

diff --git a/include/linux/fsl_qman.h b/include/linux/fsl_qman.h
index 29aa49a..602e786 100644
--- a/include/linux/fsl_qman.h
+++ b/include/linux/fsl_qman.h
@@ -557,6 +557,13 @@ enum qm_fd_format {
 	qm_fd_compound = QM_FD_FORMAT_COMPOUND
 };
 
+/* Capitalised versions are un-typed but can be used in static expressions */
+#define QM_FD_CONTIG   0
+#define QM_FD_CONTIG_BIG QM_FD_FORMAT_LONG
+#define QM_FD_SG       QM_FD_FORMAT_SG
+#define QM_FD_SG_BIG   (QM_FD_FORMAT_SG | QM_FD_FORMAT_LONG)
+#define QM_FD_COMPOUND QM_FD_FORMAT_COMPOUND
+
 /* See 1.5.1.1: "Frame Descriptor (FD)" */
 struct qm_fd {
 	u8 dd:2;	/* dynamic debug */
@@ -568,7 +575,9 @@ struct qm_fd {
 	u32 addr_lo;	/* low 32-bits of 40-bit address */
 	/* The 'format' field indicates the interpretation of the remaining 29
 	 * bits of the 32-bit word. For packing reasons, it is duplicated in the
-	 * other union elements. */
+	 * other union elements. Note, union'd structs are difficult to use with
+	 * static initialisation under gcc, in which case use the "opaque" form
+	 * with one of the macros. */
 	union {
 		/* If 'format' is _contig or _sg, 20b length and 9b offset */
 		struct {
@@ -576,6 +585,9 @@ struct qm_fd {
 			u16 offset:9;
 			u32 length20:20;
 		} __packed;
+		/* For easier/faster copying of this part of the fd (eg. from a
+		 * DQRR entry to an EQCR entry) copy 'opaque' */
+		u32 opaque;
 		/* If 'format' is _contig_big or _sg_big, 29b length */
 		struct {
 			enum qm_fd_format _format1:3;
@@ -586,9 +598,6 @@ struct qm_fd {
 			enum qm_fd_format _format2:3;
 			u32 cong_weight:29;
 		} __packed;
-		/* For easier/faster copying of this part of the fd (eg. from a
-		 * DQRR entry to an EQCR entry) copy 'opaque' */
-		u32 opaque;
 	} __packed;
 	union {
 		u32 cmd;
@@ -598,6 +607,21 @@ struct qm_fd {
 #define QM_FD_DD_NULL		0x00
 #define QM_FD_PID_MASK		0x3f
 
+/* For static initialisation of FDs (which is complicated by the use of unions
+ * in "struct qm_fd"), use the following macros. Note that;
+ * - 'dd', 'pid' and 'bpid' are ignored because there's no static initialisation
+ *   use-case),
+ * - use capitalised QM_FD_*** formats for static initialisation.
+ */
+#define QM_FD_FMT_20(cmd, addr_hi, addr_lo, fmt, off, len) \
+	{ 0, 0, 0, addr_hi, addr_lo, \
+	{ (((fmt)&0x7) << 29) | (((off)&0x1ff) << 20) | ((len)&0xfffff) }, \
+	{ cmd } }
+#define QM_FD_FMT_29(cmd, addr_hi, addr_lo, fmt, len) \
+	{ 0, 0, 0, addr_hi, addr_lo, \
+	{ (((fmt)&0x7) << 29) | ((len)&0x1ffffff) }, \
+	{ cmd } }
+
 /* See 2.2.1.3 Multi-Core Datapath Acceleration Architecture */
 struct qm_sg_entry {
 	u8 __reserved1[3];
@@ -748,14 +772,11 @@ struct qm_fqd {
 	};
 	u16 __reserved2:1;
 	u16 ics_cred:15;
-	union {
-		u16 td_thresh;
-		struct {
-			u16 __reserved1:3;
-			u16 exp:5;
-			u16 mant:8;
-		} __packed td;
-	};
+	struct {
+		u16 __reserved1:3;
+		u16 exp:5;
+		u16 mant:8;
+	} __packed td;
 	u32 context_b;
 	union {
 		/* Treat it as 64-bit opaque */
-- 
1.6.5.2

