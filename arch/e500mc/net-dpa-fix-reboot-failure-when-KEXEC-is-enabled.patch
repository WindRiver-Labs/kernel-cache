From 2891e69d793adfb23c1da3a54f20623d87355ffb Mon Sep 17 00:00:00 2001
From: Weiwei Wang <weiwei.wang@windriver.com>
Date: Tue, 5 Jul 2011 20:39:52 +0800
Subject: [PATCH 225/233] net/dpa: fix reboot failure when KEXEC is enabled.

reboot will fail when CONFIG_KEXEC is enabled:
BUG: spinlock lockup on CPU#5, reboot/883, eb616d80
Call Trace:
[ea835c90] [c0007d84] show_stack+0x44/0x160 (unreliable)
[ea835cc0] [c0389788] do_raw_spin_lock+0x16c/0x174
[ea835cf0] [c064505c] _raw_spin_lock_irqsave+0x58/0x70
[ea835d10] [c04b5244] XX_LockIntrSpinlock+0x10/0x20
[ea835d20] [c0475840] FmPcdLock+0x14/0x24
[ea835d30] [c0467cf0] FmPcdKgFreeSchemes+0x34/0x2b8
[ea835d50] [c046da3c] KgFree+0x19c/0x334
[ea835da0] [c0476fa8] FM_PCD_Free+0x5c/0x204
[ea835dc0] [c04ac0e0] FreeFmDev+0x30/0xb8
[ea835dd0] [c04ac180] fm_shutdown+0x18/0x2c
[ea835de0] [c0558114] of_platform_device_shutdown+0x30/0x40
[ea835df0] [c03eb5ec] device_shutdown+0x40/0xc8
[ea835e00] [c0066930] kernel_restart_prepare+0x30/0x44
[ea835e10] [c0066994] kernel_restart+0x18/0x74
[ea835e20] [c0066b74] sys_reboot+0x17c/0x220
[ea835f40] [c0011ac0] ret_from_syscall+0x0/0x4
Exception: c00 at 0xff5b798
LR = 0x10001298

Function KgFree will finally try to acquire spin lock
p_FmPcd->h_Spinlock, but this lock has been free before KgFree
is called by FM_PCD_Free, eventually cause a lockup. To fix it,
move spin lock free operation to the end of function FM_PCD_Free.

Signed-off-by: Weiwei Wang <weiwei.wang@windriver.com>
---
 .../net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c  |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c b/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c
index 5f21db6..ed42c13 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/Pcd/fm_pcd.c
@@ -740,9 +740,6 @@ t_Error FM_PCD_Free(t_Handle h_FmPcd)
     if(p_FmPcd->enabled)
         FM_PCD_Disable(p_FmPcd);
 
-    if (p_FmPcd->h_Spinlock)
-        XX_FreeSpinlock(p_FmPcd->h_Spinlock);
-
     if(p_FmPcd->p_FmPcdDriverParam)
     {
         XX_Free(p_FmPcd->p_FmPcdDriverParam);
@@ -782,6 +779,9 @@ t_Error FM_PCD_Free(t_Handle h_FmPcd)
 
     FmUnregisterPcd(p_FmPcd->h_Fm);
 
+    if (p_FmPcd->h_Spinlock)
+        XX_FreeSpinlock(p_FmPcd->h_Spinlock);
+
     XX_Free(p_FmPcd);
     return E_OK;
 }
-- 
1.7.0.4

