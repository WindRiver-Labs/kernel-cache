From 8ddbb78a08ec667c60e6ae6cb32c585a3c5748b8 Mon Sep 17 00:00:00 2001
From: Kim Phillips <kim.phillips@freescale.com>
Date: Wed, 2 Mar 2011 12:37:38 -0600
Subject: [PATCH 097/233] crypto: caam - backport of_device vs. platform_device changes

Extracted from vendor drop QorIQ-DPAA-SDK-V1-20110609-systembuilder.iso
0010-crypto-caam-backport-of_device-vs.-platform_device-c.patch

for 2.6.34 kernel

Signed-off-by: Kim Phillips <kim.phillips@freescale.com>
---
 drivers/crypto/caam/caamalg.c |   16 ++++++++--------
 drivers/crypto/caam/ctrl.c    |   23 ++++++++++-------------
 drivers/crypto/caam/intern.h  |    6 +++++-
 drivers/crypto/caam/jr.c      |   12 ++++++------
 drivers/crypto/caam/jr.h      |    2 +-
 5 files changed, 30 insertions(+), 29 deletions(-)

diff --git a/drivers/crypto/caam/caamalg.c b/drivers/crypto/caam/caamalg.c
index 245cfe4..6840e3b 100644
--- a/drivers/crypto/caam/caamalg.c
+++ b/drivers/crypto/caam/caamalg.c
@@ -1011,7 +1011,7 @@ static void __exit caam_algapi_exit(void)
 {
 
 	struct device_node *dev_node;
-	struct platform_device *pdev;
+	struct of_device *of_dev;
 	struct device *ctrldev;
 	struct caam_drv_private *priv;
 	struct caam_crypto_alg *t_alg, *n;
@@ -1021,11 +1021,11 @@ static void __exit caam_algapi_exit(void)
 	if (!dev_node)
 		return;
 
-	pdev = of_find_device_by_node(dev_node);
-	if (!pdev)
+	of_dev = of_find_device_by_node(dev_node);
+	if (!of_dev)
 		return;
 
-	ctrldev = &pdev->dev;
+	ctrldev = &of_dev->dev;
 	of_node_put(dev_node);
 	priv = dev_get_drvdata(ctrldev);
 
@@ -1086,7 +1086,7 @@ static struct caam_crypto_alg *caam_alg_alloc(struct device *ctrldev,
 static int __init caam_algapi_init(void)
 {
 	struct device_node *dev_node;
-	struct platform_device *pdev;
+	struct of_device *of_dev;
 	struct device *ctrldev, **jrdev;
 	struct caam_drv_private *priv;
 	int i = 0, err = 0;
@@ -1095,11 +1095,11 @@ static int __init caam_algapi_init(void)
 	if (!dev_node)
 		return -ENODEV;
 
-	pdev = of_find_device_by_node(dev_node);
-	if (!pdev)
+	of_dev = of_find_device_by_node(dev_node);
+	if (!of_dev)
 		return -ENODEV;
 
-	ctrldev = &pdev->dev;
+	ctrldev = &of_dev->dev;
 	priv = dev_get_drvdata(ctrldev);
 	of_node_put(dev_node);
 
diff --git a/drivers/crypto/caam/ctrl.c b/drivers/crypto/caam/ctrl.c
index 59aae4e..48fa36c 100644
--- a/drivers/crypto/caam/ctrl.c
+++ b/drivers/crypto/caam/ctrl.c
@@ -10,7 +10,7 @@
 #include "intern.h"
 #include "jr.h"
 
-static int caam_remove(struct platform_device *pdev)
+static int caam_remove(struct of_device *ofdev)
 {
 	struct device *ctrldev;
 	struct caam_drv_private *ctrlpriv;
@@ -18,7 +18,7 @@ static int caam_remove(struct platform_device *pdev)
 	struct caam_full __iomem *topregs;
 	int ring, ret = 0;
 
-	ctrldev = &pdev->dev;
+	ctrldev = &ofdev->dev;
 	ctrlpriv = dev_get_drvdata(ctrldev);
 	topregs = (struct caam_full __iomem *)ctrlpriv->ctrl;
 
@@ -44,7 +44,7 @@ static int caam_remove(struct platform_device *pdev)
 }
 
 /* Probe routine for CAAM top (controller) level */
-static int caam_probe(struct platform_device *pdev,
+static int caam_probe(struct of_device *ofdev,
 		      const struct of_device_id *devmatch)
 {
 	int d, ring, rspec;
@@ -61,10 +61,10 @@ static int caam_probe(struct platform_device *pdev,
 	if (!ctrlpriv)
 		return -ENOMEM;
 
-	dev = &pdev->dev;
+	dev = &ofdev->dev;
 	dev_set_drvdata(dev, ctrlpriv);
-	ctrlpriv->pdev = pdev;
-	nprop = pdev->dev.of_node;
+	ctrlpriv->ofdev = ofdev;
+	nprop = ofdev->node;
 
 	/* Get configuration properties from device tree */
 	/* First, get register page */
@@ -119,7 +119,7 @@ static int caam_probe(struct platform_device *pdev,
 	ring = 0;
 	ctrlpriv->total_jobrs = 0;
 	for_each_compatible_node(np, NULL, "fsl,sec-v4.0-job-ring") {
-		caam_jr_probe(pdev, np, ring);
+		caam_jr_probe(ofdev, np, ring);
 		ctrlpriv->total_jobrs++;
 		ring++;
 	}
@@ -136,7 +136,7 @@ static int caam_probe(struct platform_device *pdev,
 	/* If no QI and no rings specified, quit and go home */
 	if ((!ctrlpriv->qi_present) && (!ctrlpriv->total_jobrs)) {
 		dev_err(dev, "no queues configured, terminating\n");
-		caam_remove(pdev);
+		caam_remove(ofdev);
 		return -ENOMEM;
 	}
 
@@ -243,11 +243,8 @@ static struct of_device_id caam_match[] = {
 MODULE_DEVICE_TABLE(of, caam_match);
 
 static struct of_platform_driver caam_driver = {
-	.driver = {
-		.name = "caam",
-		.owner = THIS_MODULE,
-		.of_match_table = caam_match,
-	},
+	.name        = "caam",
+	.match_table = caam_match,
 	.probe       = caam_probe,
 	.remove      = __devexit_p(caam_remove),
 };
diff --git a/drivers/crypto/caam/intern.h b/drivers/crypto/caam/intern.h
index a34be01..116e663 100644
--- a/drivers/crypto/caam/intern.h
+++ b/drivers/crypto/caam/intern.h
@@ -68,7 +68,11 @@ struct caam_drv_private {
 	struct device *dev;
 	struct device **jrdev; /* Alloc'ed array per sub-device */
 	spinlock_t jr_alloc_lock;
-	struct platform_device *pdev;
+#ifdef CONFIG_OF
+	struct of_device *ofdev;
+#else
+	/* Non-OF-specific defs */
+#endif
 
 	/* Physical-presence section */
 	struct caam_ctrl *ctrl; /* controller region */
diff --git a/drivers/crypto/caam/jr.c b/drivers/crypto/caam/jr.c
index 340fa32..eb2b858 100644
--- a/drivers/crypto/caam/jr.c
+++ b/drivers/crypto/caam/jr.c
@@ -460,17 +460,17 @@ int caam_jr_shutdown(struct device *dev)
  * Probe routine for each detected JobR subsystem. It assumes that
  * property detection was picked up externally.
  */
-int caam_jr_probe(struct platform_device *pdev, struct device_node *np,
+int caam_jr_probe(struct of_device *ofdev, struct device_node *np,
 		  int ring)
 {
 	struct device *ctrldev, *jrdev;
-	struct platform_device *jr_pdev;
+	struct of_device *jr_ofdev;
 	struct caam_drv_private *ctrlpriv;
 	struct caam_drv_private_jr *jrpriv;
 	u32 *jroffset;
 	int error;
 
-	ctrldev = &pdev->dev;
+	ctrldev = &ofdev->dev;
 	ctrlpriv = dev_get_drvdata(ctrldev);
 
 	jrpriv = kmalloc(sizeof(struct caam_drv_private_jr),
@@ -494,12 +494,12 @@ int caam_jr_probe(struct platform_device *pdev, struct device_node *np,
 							 + *jroffset);
 
 	/* Build a local dev for each detected queue */
-	jr_pdev = of_platform_device_create(np, NULL, ctrldev);
-	if (jr_pdev == NULL) {
+	jr_ofdev = of_platform_device_create(np, NULL, ctrldev);
+	if (jr_ofdev == NULL) {
 		kfree(jrpriv);
 		return -EINVAL;
 	}
-	jrdev = &jr_pdev->dev;
+	jrdev = &jr_ofdev->dev;
 	dev_set_drvdata(jrdev, jrpriv);
 	ctrlpriv->jrdev[ring] = jrdev;
 
diff --git a/drivers/crypto/caam/jr.h b/drivers/crypto/caam/jr.h
index c23df39..b862f03 100644
--- a/drivers/crypto/caam/jr.h
+++ b/drivers/crypto/caam/jr.h
@@ -15,7 +15,7 @@ int caam_jr_enqueue(struct device *dev, u32 *desc,
 				void *areq),
 		    void *areq);
 
-extern int caam_jr_probe(struct platform_device *pdev, struct device_node *np,
+extern int caam_jr_probe(struct of_device *ofdev, struct device_node *np,
 			 int ring);
 extern int caam_jr_shutdown(struct device *dev);
 #endif /* JR_H */
-- 
1.7.0.4

