From 9d89ba6f58cd214f0a2d3bc963679d50b11df7f1 Mon Sep 17 00:00:00 2001
From: Zhang Xiao <xiao.zhang@windriver.com>
Date: Wed, 4 Jun 2014 17:21:37 +0800
Subject: [PATCH] powerpc/fsl_rio: fix machine check handler

Some machine check error caused by rapid I/O should be handled by rapid I/O
specified process firstly. While in case of the rapid I/O not enabled, the
machine check handler should just ignore the related checking and turn back
to normal process. The original process make a mistake that when rapid I/O
was disabled, the machine check handler do nothing but just return an
"recoverable" flag.

Fix this issue with the style of upstream commit cce1f106c6.

Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 arch/powerpc/include/asm/rio.h |    5 +++++
 arch/powerpc/kernel/traps.c    |    8 ++++++--
 include/linux/rio.h            |    1 -
 3 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/arch/powerpc/include/asm/rio.h b/arch/powerpc/include/asm/rio.h
index 0018bf8..086d405 100644
--- a/arch/powerpc/include/asm/rio.h
+++ b/arch/powerpc/include/asm/rio.h
@@ -14,5 +14,10 @@
 #define ASM_PPC_RIO_H
 
 extern void platform_rio_init(void);
+#ifdef CONFIG_RAPIDIO
+extern int fsl_rio_mcheck_exception(struct pt_regs *); 
+#else
+static inline int fsl_rio_mcheck_exception(struct pt_regs *regs) {return 0; }
+#endif 
 
 #endif				/* ASM_PPC_RIO_H */
diff --git a/arch/powerpc/kernel/traps.c b/arch/powerpc/kernel/traps.c
index f833b42..a7748d9 100644
--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -59,6 +59,7 @@
 #include <asm/kexec.h>
 #include <asm/ppc-opcode.h>
 #include <asm/hw_irq.h>
+#include <asm/rio.h>
 #include <linux/rio.h>
 
 #if defined(CONFIG_DEBUGGER) || defined(CONFIG_KEXEC)
@@ -404,9 +405,7 @@ int machine_check_e500mc(struct pt_regs *regs)
 	int recoverable = 1;
 
 	if (reason & MCSR_LD) {
-#ifdef CONFIG_RAPIDIO
 		recoverable = fsl_rio_mcheck_exception(regs);
-#endif
 		if (recoverable == 1)
 			goto silent_out;
         }
@@ -493,6 +492,11 @@ int machine_check_e500(struct pt_regs *regs)
 {
 	unsigned long reason = get_mc_reason(regs);
 
+	if (reason & MCSR_BUS_RBERR) {
+		if (fsl_rio_mcheck_exception(regs))
+			return 1;
+	}
+
 	printk("Machine check in kernel mode.\n");
 	printk("Caused by (from MCSR=%lx): ", reason);
 
diff --git a/include/linux/rio.h b/include/linux/rio.h
index 81c7b13..dc0c755 100644
--- a/include/linux/rio.h
+++ b/include/linux/rio.h
@@ -330,6 +330,5 @@ extern int rio_open_inb_mbox(struct rio_mport *, void *, int, int);
 extern void rio_close_inb_mbox(struct rio_mport *, int);
 extern int rio_open_outb_mbox(struct rio_mport *, void *, int, int);
 extern void rio_close_outb_mbox(struct rio_mport *, int);
-extern int fsl_rio_mcheck_exception(struct pt_regs *);
 
 #endif				/* LINUX_RIO_H */
-- 
1.7.0

