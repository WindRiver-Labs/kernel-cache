From 2b1bd394e6dc508ccdb2083911e2ebe445e1114c Mon Sep 17 00:00:00 2001
From: Andrew Liu <shengping.liu@windriver.com>
Date: Mon, 9 Aug 2010 18:43:08 +0800
Subject: [PATCH 177/252] qman: avoid "unused" variable warnings.

From FSL vendor SDK 2.x.

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>
Integrated-by: Andrew Liu <shengping.liu@windriver.com>
---
 drivers/hwqueue/qman_low.c |  155 +++++++++++++++++++------------------------
 1 files changed, 69 insertions(+), 86 deletions(-)

diff --git a/drivers/hwqueue/qman_low.c b/drivers/hwqueue/qman_low.c
index a2d278c..c9e8920 100644
--- a/drivers/hwqueue/qman_low.c
+++ b/drivers/hwqueue/qman_low.c
@@ -135,11 +135,6 @@ static inline u8 cyc_diff(u8 ringsize, u8 first, u8 last)
 /* ---------------- */
 /* --- EQCR API --- */
 
-/* It's safer to code in terms of the 'eqcr' object than the 'portal' object,
- * because the latter runs the risk of copy-n-paste errors from other code where
- * we could manipulate some other structure within 'portal'. */
-#define EQCR_API_START()	register struct qm_eqcr *eqcr = &portal->eqcr
-
 /* Bit-wise logic to wrap a ring pointer by clearing the "carry bit" */
 #define EQCR_CARRYCLEAR(p) \
 	(void *)((unsigned long)(p) & (~(unsigned long)(QM_EQCR_SIZE << 6)))
@@ -165,7 +160,10 @@ static inline void EQCR_INC(struct qm_eqcr *eqcr)
 int qm_eqcr_init(struct qm_portal *portal, enum qm_eqcr_pmode pmode,
 		__maybe_unused enum qm_eqcr_cmode cmode)
 {
-	EQCR_API_START();
+	/* This use of 'register', as well as all other occurances, is because
+	 * it has been observed to generate much faster code with gcc than is
+	 * otherwise the case. */
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	u32 cfg;
 	u8 pi;
 
@@ -195,7 +193,7 @@ EXPORT_SYMBOL(qm_eqcr_init);
 
 void qm_eqcr_finish(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	u8 pi = qm_in(EQCR_PI_CINH) & (QM_EQCR_SIZE - 1);
 	u8 ci = qm_in(EQCR_CI_CINH) & (QM_EQCR_SIZE - 1);
 
@@ -212,7 +210,7 @@ EXPORT_SYMBOL(qm_eqcr_finish);
 
 struct qm_eqcr_entry *qm_eqcr_start(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	QM_ASSERT(!eqcr->busy);
 	if (!eqcr->available)
 		return NULL;
@@ -226,7 +224,7 @@ EXPORT_SYMBOL(qm_eqcr_start);
 
 void qm_eqcr_abort(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	__maybe_unused register struct qm_eqcr *eqcr = &portal->eqcr;
 	QM_ASSERT(eqcr->busy);
 #ifdef CONFIG_FSL_QMAN_CHECKING
 	eqcr->busy = 0;
@@ -236,7 +234,7 @@ EXPORT_SYMBOL(qm_eqcr_abort);
 
 struct qm_eqcr_entry *qm_eqcr_pend_and_next(struct qm_portal *portal, u8 myverb)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	QM_ASSERT(eqcr->busy);
 	QM_ASSERT(eqcr->pmode != qm_eqcr_pvb);
 	if (eqcr->available == 1)
@@ -280,7 +278,7 @@ static inline void eqcr_fd_fixup(struct qm_eqcr_entry *eq)
 
 void qm_eqcr_pci_commit(struct qm_portal *portal, u8 myverb)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	EQCR_COMMIT_CHECKS(eqcr);
 	QM_ASSERT(eqcr->pmode == qm_eqcr_pci);
 	eqcr_fd_fixup(eqcr->cursor);
@@ -298,7 +296,7 @@ EXPORT_SYMBOL(qm_eqcr_pci_commit);
 
 void qm_eqcr_pce_prefetch(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	 __maybe_unused register struct qm_eqcr *eqcr = &portal->eqcr;
 	QM_ASSERT(eqcr->pmode == qm_eqcr_pce);
 	qm_cl_invalidate(EQCR_PI);
 	qm_cl_touch_rw(EQCR_PI);
@@ -307,7 +305,7 @@ EXPORT_SYMBOL(qm_eqcr_pce_prefetch);
 
 void qm_eqcr_pce_commit(struct qm_portal *portal, u8 myverb)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	EQCR_COMMIT_CHECKS(eqcr);
 	QM_ASSERT(eqcr->pmode == qm_eqcr_pce);
 	eqcr_fd_fixup(eqcr->cursor);
@@ -325,7 +323,7 @@ EXPORT_SYMBOL(qm_eqcr_pce_commit);
 
 void qm_eqcr_pvb_commit(struct qm_portal *portal, u8 myverb)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	struct qm_eqcr_entry *eqcursor;
 	EQCR_COMMIT_CHECKS(eqcr);
 	QM_ASSERT(eqcr->pmode == qm_eqcr_pvb);
@@ -344,7 +342,7 @@ EXPORT_SYMBOL(qm_eqcr_pvb_commit);
 
 u8 qm_eqcr_cci_update(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	u8 diff, old_ci = eqcr->ci;
 	QM_ASSERT(eqcr->cmode == qm_eqcr_cci);
 	eqcr->ci = qm_in(EQCR_CI_CINH) & (QM_EQCR_SIZE - 1);
@@ -356,7 +354,7 @@ EXPORT_SYMBOL(qm_eqcr_cci_update);
 
 void qm_eqcr_cce_prefetch(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	__maybe_unused register struct qm_eqcr *eqcr = &portal->eqcr;
 	QM_ASSERT(eqcr->cmode == qm_eqcr_cce);
 	qm_cl_touch_ro(EQCR_CI);
 }
@@ -364,7 +362,7 @@ EXPORT_SYMBOL(qm_eqcr_cce_prefetch);
 
 u8 qm_eqcr_cce_update(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	u8 diff, old_ci = eqcr->ci;
 	QM_ASSERT(eqcr->cmode == qm_eqcr_cce);
 	eqcr->ci = qm_cl_in(EQCR_CI) & (QM_EQCR_SIZE - 1);
@@ -377,14 +375,14 @@ EXPORT_SYMBOL(qm_eqcr_cce_update);
 
 u8 qm_eqcr_get_ithresh(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	return eqcr->ithresh;
 }
 EXPORT_SYMBOL(qm_eqcr_get_ithresh);
 
 void qm_eqcr_set_ithresh(struct qm_portal *portal, u8 ithresh)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	eqcr->ithresh = ithresh;
 	qm_out(EQCR_ITR, ithresh);
 }
@@ -392,14 +390,14 @@ EXPORT_SYMBOL(qm_eqcr_set_ithresh);
 
 u8 qm_eqcr_get_avail(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	return eqcr->available;
 }
 EXPORT_SYMBOL(qm_eqcr_get_avail);
 
 u8 qm_eqcr_get_fill(struct qm_portal *portal)
 {
-	EQCR_API_START();
+	register struct qm_eqcr *eqcr = &portal->eqcr;
 	return QM_EQCR_SIZE - 1 - eqcr->available;
 }
 EXPORT_SYMBOL(qm_eqcr_get_fill);
@@ -414,11 +412,6 @@ EXPORT_SYMBOL(qm_eqcr_get_fill);
  * - consider moving other parameters to pointer if it could help (ci)
  */
 
-/* It's safer to code in terms of the 'dqrr' object than the 'portal' object,
- * because the latter runs the risk of copy-n-paste errors from other code where
- * we could manipulate some other structure within 'portal'. */
-#define DQRR_API_START()	register struct qm_dqrr *dqrr = &portal->dqrr
-
 #define DQRR_CARRYCLEAR(p) \
 	(void *)((unsigned long)(p) & (~(unsigned long)(QM_DQRR_SIZE << 6)))
 
@@ -437,7 +430,7 @@ int qm_dqrr_init(struct qm_portal *portal, enum qm_dqrr_dmode dmode,
 		enum qm_dqrr_cmode cmode, u8 max_fill,
 		int stash_ring, int stash_data)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	const struct qm_portal_config *config = qm_portal_config(portal);
 	u32 cfg;
 
@@ -484,7 +477,7 @@ EXPORT_SYMBOL(qm_dqrr_init);
 
 void qm_dqrr_finish(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	if (dqrr->ci != DQRR_PTR2IDX(dqrr->cursor))
 		pr_crit("Ignoring completed DQRR entries\n");
 	__qm_portal_unbind(portal, QM_BIND_DQRR);
@@ -493,7 +486,7 @@ EXPORT_SYMBOL(qm_dqrr_finish);
 
 void qm_dqrr_current_prefetch(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	/* If ring entries get stashed, don't invalidate/prefetch */
 	QM_ASSERT(!(dqrr->flags & QM_DQRR_FLAG_RE));
 	dcbt_ro(dqrr->cursor);
@@ -502,7 +495,7 @@ EXPORT_SYMBOL(qm_dqrr_current_prefetch);
 
 struct qm_dqrr_entry *qm_dqrr_current(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	if (!dqrr->fill)
 		return NULL;
 	return dqrr->cursor;
@@ -511,14 +504,14 @@ EXPORT_SYMBOL(qm_dqrr_current);
 
 u8 qm_dqrr_cursor(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	return DQRR_PTR2IDX(dqrr->cursor);
 }
 EXPORT_SYMBOL(qm_dqrr_cursor);
 
 u8 qm_dqrr_next(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->fill);
 	dqrr->cursor = DQRR_INC(dqrr->cursor);
 	return --dqrr->fill;
@@ -527,7 +520,7 @@ EXPORT_SYMBOL(qm_dqrr_next);
 
 u8 qm_dqrr_pci_update(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	u8 diff, old_pi = dqrr->pi;
 	QM_ASSERT(dqrr->pmode == qm_dqrr_pci);
 	dqrr->pi = qm_in(DQRR_PI_CINH) & (QM_DQRR_SIZE - 1);
@@ -539,7 +532,7 @@ EXPORT_SYMBOL(qm_dqrr_pci_update);
 
 void qm_dqrr_pce_prefetch(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->pmode == qm_dqrr_pce);
 	qm_cl_invalidate(DQRR_PI);
 	qm_cl_touch_ro(DQRR_PI);
@@ -548,7 +541,7 @@ EXPORT_SYMBOL(qm_dqrr_pce_prefetch);
 
 u8 qm_dqrr_pce_update(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	u8 diff, old_pi = dqrr->pi;
 	QM_ASSERT(dqrr->pmode == qm_dqrr_pce);
 	dqrr->pi = qm_cl_in(DQRR_PI) & (QM_DQRR_SIZE - 1);
@@ -560,7 +553,7 @@ EXPORT_SYMBOL(qm_dqrr_pce_update);
 
 void qm_dqrr_pvb_prefetch(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->pmode == qm_dqrr_pvb);
 	QM_ASSERT(!(dqrr->flags & QM_DQRR_FLAG_RE));
 	dcbi(ptr_OR(dqrr->ring, qm_cl(dqrr->pi)));
@@ -570,7 +563,7 @@ EXPORT_SYMBOL(qm_dqrr_pvb_prefetch);
 
 u8 qm_dqrr_pvb_update(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	struct qm_dqrr_entry *res = ptr_OR(dqrr->ring, qm_cl(dqrr->pi));
 	QM_ASSERT(dqrr->pmode == qm_dqrr_pvb);
 	if ((res->verb & QM_DQRR_VERB_VBIT) == dqrr->vbit) {
@@ -586,7 +579,7 @@ EXPORT_SYMBOL(qm_dqrr_pvb_update);
 
 void qm_dqrr_cci_consume(struct qm_portal *portal, u8 num)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cci);
 	dqrr->ci = (dqrr->ci + num) & (QM_DQRR_SIZE - 1);
 	qm_out(DQRR_CI_CINH, dqrr->ci);
@@ -595,7 +588,7 @@ EXPORT_SYMBOL(qm_dqrr_cci_consume);
 
 void qm_dqrr_cci_consume_to_current(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cci);
 	dqrr->ci = DQRR_PTR2IDX(dqrr->cursor);
 	qm_out(DQRR_CI_CINH, dqrr->ci);
@@ -604,7 +597,7 @@ EXPORT_SYMBOL(qm_dqrr_cci_consume_to_current);
 
 void qm_dqrr_cce_prefetch(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cce);
 	qm_cl_invalidate(DQRR_CI);
 	qm_cl_touch_rw(DQRR_CI);
@@ -613,7 +606,7 @@ EXPORT_SYMBOL(qm_dqrr_cce_prefetch);
 
 void qm_dqrr_cce_consume(struct qm_portal *portal, u8 num)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cce);
 	dqrr->ci = (dqrr->ci + num) & (QM_DQRR_SIZE - 1);
 	qm_cl_out(DQRR_CI, dqrr->ci);
@@ -622,7 +615,7 @@ EXPORT_SYMBOL(qm_dqrr_cce_consume);
 
 void qm_dqrr_cce_consume_to_current(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cce);
 	dqrr->ci = DQRR_PTR2IDX(dqrr->cursor);
 	qm_cl_out(DQRR_CI, dqrr->ci);
@@ -631,7 +624,7 @@ EXPORT_SYMBOL(qm_dqrr_cce_consume_to_current);
 
 void qm_dqrr_cdc_consume_1(struct qm_portal *portal, u8 idx, int park)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cdc);
 	QM_ASSERT(idx < QM_DQRR_SIZE);
 	qm_out(DQRR_DCAP, (0 << 8) |	/* S */
@@ -643,7 +636,7 @@ EXPORT_SYMBOL(qm_dqrr_cdc_consume_1);
 void qm_dqrr_cdc_consume_1ptr(struct qm_portal *portal, struct qm_dqrr_entry *dq,
 				int park)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	u8 idx = DQRR_PTR2IDX(dq);
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cdc);
 	QM_ASSERT((dqrr->ring + idx) == dq);
@@ -656,7 +649,7 @@ EXPORT_SYMBOL(qm_dqrr_cdc_consume_1ptr);
 
 void qm_dqrr_cdc_consume_n(struct qm_portal *portal, u16 bitmask)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cdc);
 	qm_out(DQRR_DCAP, (1 << 8) |		/* DQRR_DCAP::S */
 		((u32)bitmask << 16));		/* DQRR_DCAP::DCAP_CI */
@@ -665,7 +658,7 @@ EXPORT_SYMBOL(qm_dqrr_cdc_consume_n);
 
 u8 qm_dqrr_cdc_cci(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cdc);
 	return qm_in(DQRR_CI_CINH) & (QM_DQRR_SIZE - 1);
 }
@@ -673,7 +666,7 @@ EXPORT_SYMBOL(qm_dqrr_cdc_cci);
 
 void qm_dqrr_cdc_cce_prefetch(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cdc);
 	qm_cl_invalidate(DQRR_CI);
 	qm_cl_touch_ro(DQRR_CI);
@@ -682,7 +675,7 @@ EXPORT_SYMBOL(qm_dqrr_cdc_cce_prefetch);
 
 u8 qm_dqrr_cdc_cce(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode == qm_dqrr_cdc);
 	return qm_cl_in(DQRR_CI) & (QM_DQRR_SIZE - 1);
 }
@@ -690,7 +683,7 @@ EXPORT_SYMBOL(qm_dqrr_cdc_cce);
 
 u8 qm_dqrr_get_ci(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode != qm_dqrr_cdc);
 	return dqrr->ci;
 }
@@ -698,7 +691,7 @@ EXPORT_SYMBOL(qm_dqrr_get_ci);
 
 void qm_dqrr_park(struct qm_portal *portal, u8 idx)
 {
-	DQRR_API_START();
+	__maybe_unused register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode != qm_dqrr_cdc);
 	qm_out(DQRR_DCAP, (0 << 8) |		/* S */
 		(1 << 6) |			/* PK */
@@ -708,7 +701,7 @@ EXPORT_SYMBOL(qm_dqrr_park);
 
 void qm_dqrr_park_ci(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	QM_ASSERT(dqrr->cmode != qm_dqrr_cdc);
 	qm_out(DQRR_DCAP, (0 << 8) |		/* S */
 		(1 << 6) |			/* PK */
@@ -754,7 +747,7 @@ EXPORT_SYMBOL(qm_dqrr_pdqcr_get);
 
 u8 qm_dqrr_get_ithresh(struct qm_portal *portal)
 {
-	DQRR_API_START();
+	register struct qm_dqrr *dqrr = &portal->dqrr;
 	return dqrr->ithresh;
 }
 EXPORT_SYMBOL(qm_dqrr_get_ithresh);
@@ -782,11 +775,6 @@ EXPORT_SYMBOL(qm_dqrr_set_maxfill);
 /* -------------- */
 /* --- MR API --- */
 
-/* It's safer to code in terms of the 'mr' object than the 'portal' object,
- * because the latter runs the risk of copy-n-paste errors from other code where
- * we could manipulate some other structure within 'portal'. */
-#define MR_API_START()		register struct qm_mr *mr = &portal->mr
-
 #define MR_CARRYCLEAR(p) \
 	(void *)((unsigned long)(p) & (~(unsigned long)(QM_MR_SIZE << 6)))
 
@@ -803,7 +791,7 @@ static inline struct qm_mr_entry *MR_INC(struct qm_mr_entry *e)
 int qm_mr_init(struct qm_portal *portal, enum qm_mr_pmode pmode,
 		enum qm_mr_cmode cmode)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	u32 cfg;
 
 #ifdef CONFIG_FSL_QMAN_BUG_AND_FEATURE_REV1
@@ -840,7 +828,7 @@ EXPORT_SYMBOL(qm_mr_init);
 
 void qm_mr_finish(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	if (mr->ci != MR_PTR2IDX(mr->cursor))
 		pr_crit("Ignoring completed MR entries\n");
 	__qm_portal_unbind(portal, QM_BIND_MR);
@@ -849,14 +837,14 @@ EXPORT_SYMBOL(qm_mr_finish);
 
 void qm_mr_current_prefetch(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	dcbt_ro(mr->cursor);
 }
 EXPORT_SYMBOL(qm_mr_current_prefetch);
 
 struct qm_mr_entry *qm_mr_current(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	if (!mr->fill)
 		return NULL;
 	return mr->cursor;
@@ -865,14 +853,14 @@ EXPORT_SYMBOL(qm_mr_current);
 
 u8 qm_mr_cursor(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	return MR_PTR2IDX(mr->cursor);
 }
 EXPORT_SYMBOL(qm_mr_cursor);
 
 u8 qm_mr_next(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->fill);
 	mr->cursor = MR_INC(mr->cursor);
 	return --mr->fill;
@@ -881,7 +869,7 @@ EXPORT_SYMBOL(qm_mr_next);
 
 u8 qm_mr_pci_update(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	u8 diff, old_pi = mr->pi;
 	QM_ASSERT(mr->pmode == qm_mr_pci);
 	mr->pi = qm_in(MR_PI_CINH);
@@ -893,7 +881,7 @@ EXPORT_SYMBOL(qm_mr_pci_update);
 
 void qm_mr_pce_prefetch(struct qm_portal *portal)
 {
-	MR_API_START();
+	__maybe_unused register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->pmode == qm_mr_pce);
 	qm_cl_invalidate(MR_PI);
 	qm_cl_touch_ro(MR_PI);
@@ -902,7 +890,7 @@ EXPORT_SYMBOL(qm_mr_pce_prefetch);
 
 u8 qm_mr_pce_update(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	u8 diff, old_pi = mr->pi;
 	QM_ASSERT(mr->pmode == qm_mr_pce);
 	mr->pi = qm_cl_in(MR_PI) & (QM_MR_SIZE - 1);
@@ -914,7 +902,7 @@ EXPORT_SYMBOL(qm_mr_pce_update);
 
 void qm_mr_pvb_prefetch(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->pmode == qm_mr_pvb);
 	dcbi(ptr_OR(mr->ring, qm_cl(mr->pi)));
 	dcbt_ro(ptr_OR(mr->ring, qm_cl(mr->pi)));
@@ -923,7 +911,7 @@ EXPORT_SYMBOL(qm_mr_pvb_prefetch);
 
 u8 qm_mr_pvb_update(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	struct qm_mr_entry *res = ptr_OR(mr->ring, qm_cl(mr->pi));
 	QM_ASSERT(mr->pmode == qm_mr_pvb);
 	if ((res->verb & QM_MR_VERB_VBIT) == mr->vbit) {
@@ -952,7 +940,7 @@ EXPORT_SYMBOL(qm_mr_pvb_update);
 
 void qm_mr_cci_consume(struct qm_portal *portal, u8 num)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->cmode == qm_mr_cci);
 	mr->ci = (mr->ci + num) & (QM_MR_SIZE - 1);
 	qm_out(MR_CI_CINH, mr->ci);
@@ -961,7 +949,7 @@ EXPORT_SYMBOL(qm_mr_cci_consume);
 
 void qm_mr_cci_consume_to_current(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->cmode == qm_mr_cci);
 	mr->ci = MR_PTR2IDX(mr->cursor);
 	qm_out(MR_CI_CINH, mr->ci);
@@ -970,7 +958,7 @@ EXPORT_SYMBOL(qm_mr_cci_consume_to_current);
 
 void qm_mr_cce_prefetch(struct qm_portal *portal)
 {
-	MR_API_START();
+	__maybe_unused register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->cmode == qm_mr_cce);
 	qm_cl_invalidate(MR_CI);
 	qm_cl_touch_rw(MR_CI);
@@ -979,7 +967,7 @@ EXPORT_SYMBOL(qm_mr_cce_prefetch);
 
 void qm_mr_cce_consume(struct qm_portal *portal, u8 num)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->cmode == qm_mr_cce);
 	mr->ci = (mr->ci + num) & (QM_MR_SIZE - 1);
 	qm_cl_out(MR_CI, mr->ci);
@@ -988,7 +976,7 @@ EXPORT_SYMBOL(qm_mr_cce_consume);
 
 void qm_mr_cce_consume_to_current(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	QM_ASSERT(mr->cmode == qm_mr_cce);
 	mr->ci = MR_PTR2IDX(mr->cursor);
 	qm_cl_out(MR_CI, mr->ci);
@@ -997,14 +985,14 @@ EXPORT_SYMBOL(qm_mr_cce_consume_to_current);
 
 u8 qm_mr_get_ci(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	return mr->ci;
 }
 EXPORT_SYMBOL(qm_mr_get_ci);
 
 u8 qm_mr_get_ithresh(struct qm_portal *portal)
 {
-	MR_API_START();
+	register struct qm_mr *mr = &portal->mr;
 	return mr->ithresh;
 }
 EXPORT_SYMBOL(qm_mr_get_ithresh);
@@ -1019,14 +1007,9 @@ EXPORT_SYMBOL(qm_mr_set_ithresh);
 /* ------------------------------ */
 /* --- Management command API --- */
 
-/* It's safer to code in terms of the 'mc' object than the 'portal' object,
- * because the latter runs the risk of copy-n-paste errors from other code where
- * we could manipulate some other structure within 'portal'. */
-#define MC_API_START()		register struct qm_mc *mc = &portal->mc
-
 int qm_mc_init(struct qm_portal *portal)
 {
-	MC_API_START();
+	register struct qm_mc *mc = &portal->mc;
 	if (__qm_portal_bind(portal, QM_BIND_MC))
 		return -EBUSY;
 	mc->cr = ptr_OR(portal->addr.addr_ce, CL_CR);
@@ -1043,7 +1026,7 @@ EXPORT_SYMBOL(qm_mc_init);
 
 void qm_mc_finish(struct qm_portal *portal)
 {
-	MC_API_START();
+	__maybe_unused register struct qm_mc *mc = &portal->mc;
 	QM_ASSERT(mc->state == mc_idle);
 #ifdef CONFIG_FSL_QMAN_CHECKING
 	if (mc->state != mc_idle)
@@ -1055,7 +1038,7 @@ EXPORT_SYMBOL(qm_mc_finish);
 
 struct qm_mc_command *qm_mc_start(struct qm_portal *portal)
 {
-	MC_API_START();
+	register struct qm_mc *mc = &portal->mc;
 	QM_ASSERT(mc->state == mc_idle);
 #ifdef CONFIG_FSL_QMAN_CHECKING
 	mc->state = mc_user;
@@ -1067,7 +1050,7 @@ EXPORT_SYMBOL(qm_mc_start);
 
 void qm_mc_abort(struct qm_portal *portal)
 {
-	MC_API_START();
+	__maybe_unused register struct qm_mc *mc = &portal->mc;
 	QM_ASSERT(mc->state == mc_user);
 #ifdef CONFIG_FSL_QMAN_CHECKING
 	mc->state = mc_idle;
@@ -1077,7 +1060,7 @@ EXPORT_SYMBOL(qm_mc_abort);
 
 void qm_mc_commit(struct qm_portal *portal, u8 myverb)
 {
-	MC_API_START();
+	register struct qm_mc *mc = &portal->mc;
 	struct qm_mc_result *rr = mc->rr + mc->rridx;
 	QM_ASSERT(mc->state == mc_user);
 	dcbi(rr);
@@ -1130,7 +1113,7 @@ EXPORT_SYMBOL(qm_mc_commit);
 
 struct qm_mc_result *qm_mc_result(struct qm_portal *portal)
 {
-	MC_API_START();
+	register struct qm_mc *mc = &portal->mc;
 	struct qm_mc_result *rr = mc->rr + mc->rridx;
 	QM_ASSERT(mc->state == mc_hw);
 	/* The inactive response register's verb byte always returns zero until
-- 
1.6.5.2

