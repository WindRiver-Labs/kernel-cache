From 82122f165a72d1cb8000930cac54f75abb78fdae Mon Sep 17 00:00:00 2001
From: Roy Zang <tie-fei.zang@freescale.com>
Date: Sun, 13 Jun 2010 15:08:37 +0800
Subject: [PATCH 146/233] esdhc: Add ESDHC weird register and timeout workaround

Extracted from QorIQ-DPAA-SDK-V1-20110609-systembuilder.iso
0117-esdhc-Add-ESDHC-weird-register-and-timeout-workaroun.patch

P4080 ESDHC errata 1, 9, 11, 12 induces weird register and timeout
This patch adds the workaround for these errata.

Signed-off-by: Roy Zang <tie-fei.zang@freescale.com>
Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
---
 drivers/mmc/host/sdhci-of-core.c |    6 ++++++
 drivers/mmc/host/sdhci.c         |   33 +++++++++++++++++++++++++++++++++
 drivers/mmc/host/sdhci.h         |    4 ++++
 3 files changed, 43 insertions(+), 0 deletions(-)

diff --git a/drivers/mmc/host/sdhci-of-core.c b/drivers/mmc/host/sdhci-of-core.c
index c7bd95c..71ba386 100644
--- a/drivers/mmc/host/sdhci-of-core.c
+++ b/drivers/mmc/host/sdhci-of-core.c
@@ -166,6 +166,12 @@ static int __devinit sdhci_of_probe(struct of_device *ofdev,
 	if (sdhci_of_wp_inverted(np))
 		host->quirks |= SDHCI_QUIRK_INVERTED_WRITE_PROTECT;
 
+	if (of_device_is_compatible(np, "fsl,p4080-esdhc")) {
+		host->quirks |= SDHCI_QUIRK_QORIQ_REG_WEIRD |
+			SDHCI_QUIRK_QORIQ_TIMEOUT_WEIRD;
+		host->quirks &= ~SDHCI_QUIRK_INVERTED_WRITE_PROTECT;
+	}
+
 	clk = of_get_property(np, "clock-frequency", &size);
 	if (clk && size == sizeof(*clk) && *clk)
 		of_host->clock = *clk;
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 79a21ba..c63ba1f 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -173,6 +173,16 @@ static void sdhci_reset(struct sdhci_host *host, u8 mask)
 
 	if (host->quirks & SDHCI_QUIRK_RESTORE_IRQS_AFTER_RESET)
 		sdhci_clear_set_irqs(host, SDHCI_INT_ALL_MASK, ier);
+
+	/* Add P4080 ESDHC9 errata workaround.
+	 * Reset value of WML register should be 0x02100210
+	 * Only need on Rev1 silicon
+	 */
+#define ESDHC_WML	0x44
+	if (host->quirks & SDHCI_QUIRK_QORIQ_REG_WEIRD)
+		if ((mfspr(SPRN_SVR) & 0xff) == 0x10)
+			sdhci_writel(host, 0x02100210, ESDHC_WML);
+
 }
 
 static void sdhci_set_ios(struct mmc_host *mmc, struct mmc_ios *ios);
@@ -621,6 +631,17 @@ static u8 sdhci_calc_timeout(struct sdhci_host *host, struct mmc_data *data)
 		count = 0xE;
 	}
 
+	/* Add p4080 ESDHC11 workaround. Only need on Rev1 silicon */
+	if (host->quirks & SDHCI_QUIRK_QORIQ_TIMEOUT_WEIRD)
+		if ((mfspr(SPRN_SVR) & 0xff) == 0x10) {
+			if (count == 4)
+				count = 5;
+			if (count == 8)
+				count = 9;
+			if (count == 12)
+				count = 13;
+		}
+
 	return count;
 }
 
@@ -777,6 +798,15 @@ static void sdhci_prepare_data(struct sdhci_host *host, struct mmc_data *data)
 		sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
 	}
 
+	/* The default value of DMAS bits of Protocol Control Register is not
+	 * correct. clear these two bits to use simple DMA */
+#define  ESDHCI_CTRL_DMAS_MASK		0xFFFFFCFF
+	if (host->quirks & SDHCI_QUIRK_QORIQ_REG_WEIRD) {
+		ctrl = sdhci_readl(host, SDHCI_HOST_CONTROL);
+		ctrl = ctrl & ESDHCI_CTRL_DMAS_MASK;
+		sdhci_writel(host, ctrl, SDHCI_HOST_CONTROL);
+	}
+
 	if (!(host->flags & SDHCI_REQ_USE_DMA)) {
 		int flags;
 
@@ -1698,6 +1728,9 @@ int sdhci_add_host(struct sdhci_host *host)
 
 	caps = sdhci_readl(host, SDHCI_CAPABILITIES);
 
+	 /* Workaround for P4080 ESDHC12 errata */
+	caps &= ~(SDHCI_CAN_VDD_180 | SDHCI_CAN_VDD_330);
+
 	if (host->quirks & SDHCI_QUIRK_FORCE_DMA)
 		host->flags |= SDHCI_USE_SDMA;
 	else if (!(caps & SDHCI_CAN_DO_SDMA))
diff --git a/drivers/mmc/host/sdhci.h b/drivers/mmc/host/sdhci.h
index 658eda7..2ef89b2 100644
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@ -248,6 +248,10 @@ struct sdhci_host {
 #define SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK		(1<<24)
 /* Controller uses Auto CMD12 command to stop the transfer */
 #define SDHCI_QUIRK_MULTIBLOCK_READ_ACMD12		(1<<25)
+/* Controller has weird bit setting for some registers due to errata */
+#define SDHCI_QUIRK_QORIQ_REG_WEIRD			(1<<26)
+/* Controller has time out errata */
+#define SDHCI_QUIRK_QORIQ_TIMEOUT_WEIRD			(1<<27)
 
 	int			irq;		/* Device IRQ */
 	void __iomem *		ioaddr;		/* Mapped address */
-- 
1.7.0.4

