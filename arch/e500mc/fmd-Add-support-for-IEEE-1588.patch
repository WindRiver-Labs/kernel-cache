From 4df5a6a0ecb64262c806594f38181ad983e52772 Mon Sep 17 00:00:00 2001
From: Mingkai Hu <Mingkai.hu@freescale.com>
Date: Tue, 10 May 2011 10:06:11 +0800
Subject: [PATCH 106/233] fmd: Add support for IEEE 1588

Extracted from vendor drop QorIQ-DPAA-SDK-V1-20110609-systembuilder.iso
0134-fmd-Add-support-for-IEEE-1588.patch

1. Change the Nominal frequency to 100MHz, or else the clock can't
   converge successfully.
2. Add support to control the passTimeStamp setting.
3. Add support to handle the timer drift compensation addend.

Signed-off-by: Mingkai Hu <Mingkai.hu@freescale.com>
---
 .../net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.c  |   28 ++++++++++++++++++++
 .../net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.h  |    2 +
 .../net/dpa/NetCommSw/inc/Peripherals/fm_rtc_ext.h |    6 ++++
 .../src/inc/wrappers/Peripherals/fsl_fman.h        |    3 ++
 .../src/wrappers/Peripherals/FM/lnxwrp_fm.c        |   13 +++++++++
 5 files changed, 52 insertions(+), 0 deletions(-)

diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.c b/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.c
index c970570..89a93bd 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.c
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.c
@@ -316,6 +316,7 @@ t_Error FM_RTC_Init(t_Handle h_FmRtc)
          * (p_Rtc->srcClkFreqMhz*1000000))/ 1/(p_Rtc->clockPeriodNanoSec * 1000000000) */
         freqCompensation = DIV_CEIL(ACCUMULATOR_OVERFLOW * 1000, p_Rtc->clockPeriodNanoSec * p_Rtc->srcClkFreqMhz);
         WRITE_UINT32(p_MemMap->tmr_add, freqCompensation);
+        p_Rtc->freqCompensation = freqCompensation;
     }
     /* check the legality of the relation between source and destination clocks */
     /* should be larger than 1.0001 */
@@ -808,6 +809,33 @@ t_Error FM_RTC_SetCurrentTime(t_Handle h_FmRtc, uint64_t ts)
     return E_OK;
 }
 
+/*****************************************************************************/
+t_Error FM_RTC_GetFreqCompensation(t_Handle h_FmRtc, uint32_t *p_Compensation)
+{
+    t_FmRtc     *p_Rtc = (t_FmRtc *)h_FmRtc;
+
+    SANITY_CHECK_RETURN_ERROR(p_Rtc, E_INVALID_HANDLE);
+    SANITY_CHECK_RETURN_ERROR(!p_Rtc->p_RtcDriverParam, E_INVALID_STATE);
+
+    *p_Compensation = p_Rtc->freqCompensation;
+
+    return E_OK;
+}
+
+/*****************************************************************************/
+t_Error FM_RTC_SetFreqCompensation(t_Handle h_FmRtc, uint32_t freqCompensation)
+{
+    t_FmRtc     *p_Rtc = (t_FmRtc *)h_FmRtc;
+    t_FmRtcMemMap *p_MemMap = (t_FmRtcMemMap *)p_Rtc->p_MemMap;
+
+    SANITY_CHECK_RETURN_ERROR(p_Rtc, E_INVALID_HANDLE);
+    SANITY_CHECK_RETURN_ERROR(!p_Rtc->p_RtcDriverParam, E_INVALID_STATE);
+
+    WRITE_UINT32(p_MemMap->tmr_add, freqCompensation);
+
+    return E_OK;
+}
+
 /* ........................................................................... */
 
 #if (defined(DEBUG_ERRORS) && (DEBUG_ERRORS > 0))
diff --git a/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.h b/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.h
index eb8046c..c768ce5 100644
--- a/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.h
+++ b/drivers/net/dpa/NetCommSw/Peripherals/FM/Rtc/fm_rtc.h
@@ -174,6 +174,7 @@ typedef struct t_FmRtcDriverParam
     uint32_t                eventsMask;
     bool                    bypass; /**< Indicates if frequency compensation is bypassed */
     bool                    pulseRealign;
+    uint32_t                freqCompensation;
     e_FmRtcAlarmPolarity    alarmPolarity[FM_RTC_NUM_OF_ALARMS];
     e_FmRtcTriggerPolarity  triggerPolarity[FM_RTC_NUM_OF_EXT_TRIGGERS];
 } t_FmRtcDriverParam;
@@ -211,6 +212,7 @@ typedef struct t_FmRtc
     t_FmRtcPeriodicPulse    periodicPulseParams[FM_RTC_NUM_OF_PERIODIC_PULSES];
     t_FmRtcExternalTrigger  externalTriggerParams[FM_RTC_NUM_OF_EXT_TRIGGERS];
     t_FmRtcDriverParam      *p_RtcDriverParam;  /**< RTC Driver parameters (for Init phase) */
+    uint32_t                freqCompensation;
 } t_FmRtc;
 
 
diff --git a/drivers/net/dpa/NetCommSw/inc/Peripherals/fm_rtc_ext.h b/drivers/net/dpa/NetCommSw/inc/Peripherals/fm_rtc_ext.h
index 8590184..edff98c 100644
--- a/drivers/net/dpa/NetCommSw/inc/Peripherals/fm_rtc_ext.h
+++ b/drivers/net/dpa/NetCommSw/inc/Peripherals/fm_rtc_ext.h
@@ -541,6 +541,12 @@ t_Error FM_RTC_GetCurrentTime(t_Handle h_FmRtc, uint64_t *p_Ts);
 *//***************************************************************************/
 t_Error FM_RTC_SetCurrentTime(t_Handle h_FmRtc, uint64_t ts);
 
+/*****************************************************************************/
+t_Error FM_RTC_GetFreqCompensation(t_Handle h_FmRtc, uint32_t *p_Compensation);
+
+/*****************************************************************************/
+t_Error FM_RTC_SetFreqCompensation(t_Handle h_FmRtc, uint32_t freqCompensation);
+
 #if (defined(DEBUG_ERRORS) && (DEBUG_ERRORS > 0))
 /**************************************************************************//**
  @Function      FM_RTC_DumpRegs
diff --git a/drivers/net/dpa/NetCommSw/src/inc/wrappers/Peripherals/fsl_fman.h b/drivers/net/dpa/NetCommSw/src/inc/wrappers/Peripherals/fsl_fman.h
index bd86e64..5707987 100644
--- a/drivers/net/dpa/NetCommSw/src/inc/wrappers/Peripherals/fsl_fman.h
+++ b/drivers/net/dpa/NetCommSw/src/inc/wrappers/Peripherals/fsl_fman.h
@@ -106,6 +106,7 @@ struct fm_port_rx_params {
     uint16_t                    priv_data_size;     /**< Area that user may save for his own need (E.g. save the SKB) */
     bool                        parse_results;      /**< Whether to have the parser-results in the Received buffer */
     bool                        hash_results;       /**< Whether to have the hash-results in the Received buffer */
+    bool                        time_stamp;         /**< Whether to have the time-stamp in the Received buffer */
 };
 
 /**************************************************************************//**
@@ -119,6 +120,7 @@ struct fm_port_non_rx_params {
     uint16_t                priv_data_size;     /**< Area that user may save for his own need (E.g. save the SKB) */
     bool                    parse_results;      /**< Whether to put the parser-results in the Transmitted buffer */
     bool                    hash_results;       /**< Whether to have the hash-results in the Received buffer */
+    bool                    time_stamp;         /**< Whether to have the time-stamp in the Received buffer */
 };
 
 
@@ -147,6 +149,7 @@ struct fm * fm_bind (struct device *fm_dev);
 void fm_unbind(struct fm *fm);
 
 void * fm_get_handle(struct fm *fm);
+void * fm_get_rtc_handle(struct fm *fm);
 struct resource * fm_get_mem_region(struct fm *fm);
 
 /**************************************************************************//**
diff --git a/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c b/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c
index 87e887f..0ef2f16 100644
--- a/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c
+++ b/drivers/net/dpa/NetCommSw/src/wrappers/Peripherals/FM/lnxwrp_fm.c
@@ -2054,6 +2054,9 @@ static t_Error InitFmDev(t_LnxWrpFmDev  *p_LnxWrpFmDev)
         if(!(p_LnxWrpFmDev->h_RtcDev = FM_RTC_Config(&fmRtcParam)))
             RETURN_ERROR(MAJOR, E_INVALID_HANDLE, ("FM-RTC"));
 
+	if (FM_RTC_ConfigPeriod(p_LnxWrpFmDev->h_RtcDev, 10) != E_OK)
+	    RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM-RTC"));
+
         if (FM_RTC_Init(p_LnxWrpFmDev->h_RtcDev) != E_OK)
             RETURN_ERROR(MAJOR, E_INVALID_STATE, ("FM-RTC"));
     }
@@ -2920,6 +2923,14 @@ void * fm_get_handle(struct fm *fm)
 }
 EXPORT_SYMBOL(fm_get_handle);
 
+void * fm_get_rtc_handle(struct fm *fm)
+{
+    t_LnxWrpFmDev       *p_LnxWrpFmDev = (t_LnxWrpFmDev*)fm;
+
+    return (void *)p_LnxWrpFmDev->h_RtcDev;
+}
+EXPORT_SYMBOL(fm_get_rtc_handle);
+
 struct fm_port * fm_port_bind (struct device *fm_port_dev)
 {
     return (struct fm_port *)(dev_get_drvdata(get_device(fm_port_dev)));
@@ -2969,6 +2980,7 @@ void fm_set_rx_port_params(struct fm_port *port, struct fm_port_rx_params *param
     p_LnxWrpFmPortDev->buffPrefixContent.privDataSize     = params->priv_data_size;
     p_LnxWrpFmPortDev->buffPrefixContent.passPrsResult    = params->parse_results;
     p_LnxWrpFmPortDev->buffPrefixContent.passHashResult   = params->hash_results;
+    p_LnxWrpFmPortDev->buffPrefixContent.passTimeStamp    = params->time_stamp;
 
     ADD_ADV_CONFIG_START(p_LnxWrpFmPortDev->settings.advConfig, FM_MAX_NUM_OF_ADV_SETTINGS)
 
@@ -2999,6 +3011,7 @@ void fm_set_tx_port_params(struct fm_port *port, struct fm_port_non_rx_params *p
     p_LnxWrpFmPortDev->buffPrefixContent.privDataSize     = params->priv_data_size;
     p_LnxWrpFmPortDev->buffPrefixContent.passPrsResult    = params->parse_results;
     p_LnxWrpFmPortDev->buffPrefixContent.passHashResult   = params->hash_results;
+    p_LnxWrpFmPortDev->buffPrefixContent.passTimeStamp    = params->time_stamp;
 
     ADD_ADV_CONFIG_START(p_LnxWrpFmPortDev->settings.advConfig, FM_MAX_NUM_OF_ADV_SETTINGS)
 
-- 
1.7.0.4

