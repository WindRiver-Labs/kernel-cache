From 5792bad7534e07c557ecdd3e94a197a1519a4909 Mon Sep 17 00:00:00 2001
From: Zhong Hongbo <hongbo.zhong@windriver.com>
Date: Wed, 28 Nov 2012 19:40:34 +0800
Subject: [PATCH 60/62] FEC: Fix kernel dump about eth0

Source: Extract from vendor-drop package, L3.0.15_12.04.01_ER_source.tar.gz
(May,2012).

Kernel dump when do wifi stress test with suspend and resume as below:
	eth0: tx queue full!.
	remove wake up source irq 103
	PM: resume of devices complete after 348.934 msecs
	Restarting tasks ... done.
	------------[ cut here ]------------
	linux/net/sched/sch_generic.c:256 dev_watchdog+0x3e4/0x3f4()
	NETDEV WATCHDOG: eth0 (fec): transmit queue 0 timed out
	Modules linked in: jbd2 ext4 fat vfat minix
	[<800174e8>] (unwind_backtrace+0x0/0x104) from [<80653d88>] (dump_stack+0x20/0x24)
	[<80653d88>] (dump_stack+0x20/0x24) from [<80032e20>] (warn_slowpath_common+0x64/0x74)
	[<80032e20>] (warn_slowpath_common+0x64/0x74) from [<80032eec>] (warn_slowpath_fmt+0x40/0x48)
	[<80032eec>] (warn_slowpath_fmt+0x40/0x48) from [<8057058c>] (dev_watchdog+0x3e4/0x3f4)
	[<8057058c>] (dev_watchdog+0x3e4/0x3f4) from [<80044198>] (run_timer_softirq+0x15c/0x404)
	[<80044198>] (run_timer_softirq+0x15c/0x404) from [<8003a9b8>] (__do_softirq+0x124/0x2b4)
	[<8003a9b8>] (__do_softirq+0x124/0x2b4) from [<8003b0ac>] (irq_exit+0xc4/0xe4)
	[<8003b0ac>] (irq_exit+0xc4/0xe4) from [<8000f748>] (handle_IRQ+0x6c/0xbc)
	[<8000f748>] (handle_IRQ+0x6c/0xbc) from [<800084d8>] (gic_handle_irq+0x38/0x68)
	[<800084d8>] (gic_handle_irq+0x38/0x68) from [<8065ebc4>] (__irq_svc+0x44/0x78)
	Exception stack(0x8091bf28 to 0x8091bf70)
	bf20:                   00000000 00000000 00000000 8093804c 8091a000 8098a248
	bf40: 8066744c 8093cab8 809371e0 412fc09a 00000000 8091bf7c 8091bf70 8091bf70
	bf60: 8000fadc 8000fae0 60000013 ffffffff
	[<8065ebc4>] (__irq_svc+0x44/0x78) from [<8000fae0>] (default_idle+0x44/0x48)
	[<8000fae0>] (default_idle+0x44/0x48) from [<8000fdf4>] (cpu_idle+0xac/0x11c)
	[<8000fdf4>] (cpu_idle+0xac/0x11c) from [<80648fa4>] (rest_init+0x90/0x94)
	[<80648fa4>] (rest_init+0x90/0x94) from [<808778d0>] (start_kernel+0x344/0x350)
	---[ end trace 45c7febe2b67be65 ]---
	nfs: server 128.224.158.206 not responding, still trying
	nfs: server 128.224.158.206 not responding, still trying

But ethernet and system are still alive. Sometimes, this issue will cause the system
to hang with: "nfs ... responding, still trying".

The root cause is tx buffer descriptors are not cleaned when
ethernet is resumed.

Signed-off-by: Zhong Hongbo <hongbo.zhong@windriver.com>
---
 drivers/net/ethernet/freescale/fec.c |   40 +++++++++++++++++++++++-----------
 1 file changed, 27 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/freescale/fec.c b/drivers/net/ethernet/freescale/fec.c
index 28d605a..4fcba48 100644
--- a/drivers/net/ethernet/freescale/fec.c
+++ b/drivers/net/ethernet/freescale/fec.c
@@ -376,6 +376,28 @@ fec_enet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 	return NETDEV_TX_OK;
 }
 
+/* Init TX buffer descriptors
+ */
+static void fec_enet_txbd_init(struct net_device *dev)
+{
+	struct fec_enet_private *fep = netdev_priv(dev);
+	struct bufdesc *bdp;
+	int i;
+
+	/* ...and the same for transmit */
+	bdp = fep->tx_bd_base;
+	for (i = 0; i < TX_RING_SIZE; i++) {
+
+		/* Initialize the BD for every fragment in the page. */
+		bdp->cbd_sc = 0;
+		bdp++;
+	}
+
+	/* Set the last buffer to wrap */
+	bdp--;
+	bdp->cbd_sc |= BD_SC_WRAP;
+}
+
 /* This function is called to start or restart the FEC during a link
  * change.  This only happens when switching between half and full
  * duplex.
@@ -424,6 +446,9 @@ fec_restart(struct net_device *ndev, int duplex)
 	writel((unsigned long)fep->bd_dma + sizeof(struct bufdesc) * RX_RING_SIZE,
 			fep->hwp + FEC_X_DES_START);
 
+	/* Reinit transmit descriptors */
+	fec_enet_txbd_init(ndev);
+
 	fep->dirty_tx = fep->cur_tx = fep->tx_bd_base;
 	fep->cur_rx = fep->rx_bd_base;
 
@@ -1482,19 +1507,8 @@ static int fec_enet_init(struct net_device *ndev)
 	bdp--;
 	bdp->cbd_sc |= BD_SC_WRAP;
 
-	/* ...and the same for transmit */
-	bdp = fep->tx_bd_base;
-	for (i = 0; i < TX_RING_SIZE; i++) {
-
-		/* Initialize the BD for every fragment in the page. */
-		bdp->cbd_sc = 0;
-		bdp->cbd_bufaddr = 0;
-		bdp++;
-	}
-
-	/* Set the last buffer to wrap */
-	bdp--;
-	bdp->cbd_sc |= BD_SC_WRAP;
+	/* Init transmit descriptors */
+	fec_enet_txbd_init(ndev);
 
 	fec_restart(ndev, 0);
 
-- 
1.7.9.7

