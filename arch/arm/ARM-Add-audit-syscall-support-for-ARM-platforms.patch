From 0eaeaa50bb4b304c869d5b0b94323ee4b66c8e09 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Thu, 29 Apr 2010 01:49:13 -0700
Subject: [PATCH] ARM: Add audit syscall support for ARM platforms

ARM doesn't currently provide support for audit.
To implement audit support for ARM, we must:
    1. define TIF_SYSCALL_AUDIT for ARM's thread_info
    2. call audit_syscall_entry/audit_syscall_exit properly.

The work was implemented as directed from:
http://www.mail-archive.com/linux-audit@redhat.com/msg02523.html

To fully use this functionality, the userspace package audit needs to
have arm support added.

The work is based on Amy Fong <Amy.Fong@windriver.com> and  Yong Zhang
<yong.zhang@windriver.com>. Modified by Pierce Liu to rearrange the
ptrace_notify() and audit_syscall_exit() calling order in
syscall_trace().

Signed-off-by: Amy Fong <Amy.Fong@windriver.com>
Signed-off-by: Pierce Liu <pingfan.liu@windriver.com>
Integrated-by: Yong Zhang <yong.zhang@windriver.com>
---
 arch/arm/Kconfig                   |    4 ++
 arch/arm/include/asm/thread_info.h |    2 +
 arch/arm/kernel/Makefile           |    3 +
 arch/arm/kernel/audit.c            |   77 ++++++++++++++++++++++++++++++++++++
 arch/arm/kernel/compat_audit.c     |   43 ++++++++++++++++++++
 arch/arm/kernel/entry-common.S     |    4 +-
 arch/arm/kernel/ptrace.c           |   24 +++++++++++
 init/Kconfig                       |    2 +-
 8 files changed, 156 insertions(+), 3 deletions(-)
 create mode 100644 arch/arm/kernel/audit.c
 create mode 100644 arch/arm/kernel/compat_audit.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 32f8a0b..d0b3a5e 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -92,6 +92,10 @@ config GENERIC_HARDIRQS
 	bool
 	default y
 
+config AUDIT_ARCH
+	bool
+	default y
+
 config STACKTRACE_SUPPORT
 	bool
 	default y
diff --git a/arch/arm/include/asm/thread_info.h b/arch/arm/include/asm/thread_info.h
index 60d6249..7fe8224 100644
--- a/arch/arm/include/asm/thread_info.h
+++ b/arch/arm/include/asm/thread_info.h
@@ -139,6 +139,7 @@ extern void vfp_flush_hwstate(struct thread_info *);
 #define TIF_SIGPENDING		0
 #define TIF_NEED_RESCHED	1
 #define TIF_NOTIFY_RESUME	2	/* callback before returning to user */
+#define TIF_SYSCALL_AUDIT	4	/* syscall auditing active */
 #define TIF_KERNEL_TRACE	7
 #define TIF_SYSCALL_TRACE	8
 #define TIF_POLLING_NRFLAG	16
@@ -151,6 +152,7 @@ extern void vfp_flush_hwstate(struct thread_info *);
 #define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)
 #define _TIF_NOTIFY_RESUME	(1 << TIF_NOTIFY_RESUME)
 #define _TIF_KERNEL_TRACE	(1 << TIF_KERNEL_TRACE)
+#define _TIF_SYSCALL_AUDIT	(1 << TIF_SYSCALL_AUDIT)
 #define _TIF_SYSCALL_TRACE	(1 << TIF_SYSCALL_TRACE)
 #define _TIF_POLLING_NRFLAG	(1 << TIF_POLLING_NRFLAG)
 #define _TIF_USING_IWMMXT	(1 << TIF_USING_IWMMXT)
diff --git a/arch/arm/kernel/Makefile b/arch/arm/kernel/Makefile
index 26d302c..2ca40f0 100644
--- a/arch/arm/kernel/Makefile
+++ b/arch/arm/kernel/Makefile
@@ -60,3 +60,6 @@ obj-$(CONFIG_DEBUG_LL)	+= debug.o
 obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o
 
 extra-y := $(head-y) init_task.o vmlinux.lds
+
+obj-$(CONFIG_AUDIT)		+= audit.o
+compat-obj-$(CONFIG_AUDIT)	+= compat_audit.o
diff --git a/arch/arm/kernel/audit.c b/arch/arm/kernel/audit.c
new file mode 100644
index 0000000..e06704d
--- /dev/null
+++ b/arch/arm/kernel/audit.c
@@ -0,0 +1,77 @@
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/audit.h>
+#include <asm/unistd.h>
+
+static unsigned dir_class[] = {
+#include <asm-generic/audit_dir_write.h>
+~0U
+};
+
+static unsigned read_class[] = {
+#include <asm-generic/audit_read.h>
+~0U
+};
+
+static unsigned write_class[] = {
+#include <asm-generic/audit_write.h>
+~0U
+};
+
+static unsigned chattr_class[] = {
+#include <asm-generic/audit_change_attr.h>
+~0U
+};
+
+static unsigned signal_class[] = {
+#include <asm-generic/audit_signal.h>
+~0U
+};
+
+int audit_classify_arch(int arch)
+{
+#ifdef CONFIG_COMPAT
+	if (arch == AUDIT_ARCH_ARM)
+		return 1;
+#endif
+	return 0;
+}
+
+int audit_classify_syscall(int abi, unsigned syscall)
+{
+#ifdef CONFIG_COMPAT
+	if (abi == AUDIT_ARCH_ARM)
+		return arm_classify_syscall(syscall);
+#endif
+	switch (syscall) {
+	case __NR_open:
+		return 2;
+	case __NR_openat:
+		return 3;
+	case __NR_socketcall:
+		return 4;
+	case __NR_execve:
+		return 5;
+	default:
+		return 0;
+	}
+}
+
+static int __init audit_classes_init(void)
+{
+#ifdef CONFIG_COMPAT
+	audit_register_class(AUDIT_CLASS_WRITE_32, arm_write_class);
+	audit_register_class(AUDIT_CLASS_READ_32, arm_read_class);
+	audit_register_class(AUDIT_CLASS_DIR_WRITE_32, arm_dir_class);
+	audit_register_class(AUDIT_CLASS_CHATTR_32, arm_chattr_class);
+	audit_register_class(AUDIT_CLASS_SIGNAL_32, arm_signal_class);
+#endif
+	audit_register_class(AUDIT_CLASS_WRITE, write_class);
+	audit_register_class(AUDIT_CLASS_READ, read_class);
+	audit_register_class(AUDIT_CLASS_DIR_WRITE, dir_class);
+	audit_register_class(AUDIT_CLASS_CHATTR, chattr_class);
+	audit_register_class(AUDIT_CLASS_SIGNAL, signal_class);
+	return 0;
+}
+
+device_initcall(audit_classes_init);
diff --git a/arch/arm/kernel/compat_audit.c b/arch/arm/kernel/compat_audit.c
new file mode 100644
index 0000000..23be378
--- /dev/null
+++ b/arch/arm/kernel/compat_audit.c
@@ -0,0 +1,43 @@
+#include <asm/unistd.h>
+#include "audit.h"
+
+unsigned arm_dir_class[] = {
+#include <asm-generic/audit_dir_write.h>
+~0U
+};
+
+unsigned arm_chattr_class[] = {
+#include <asm-generic/audit_change_attr.h>
+~0U
+};
+
+unsigned arm_write_class[] = {
+#include <asm-generic/audit_write.h>
+~0U
+};
+
+unsigned arm_read_class[] = {
+#include <asm-generic/audit_read.h>
+~0U
+};
+
+unsigned arm_signal_class[] = {
+#include <asm-generic/audit_signal.h>
+~0U
+};
+
+int arm_classify_syscall(unsigned syscall)
+{
+	switch (syscall) {
+	case __NR_open:
+		return 2;
+	case __NR_openat:
+		return 3;
+	case __NR_socketcall:
+		return 4;
+	case __NR_execve:
+		return 5;
+	default:
+		return 1;
+	}
+}
diff --git a/arch/arm/kernel/entry-common.S b/arch/arm/kernel/entry-common.S
index 3fb145c..fda8ed1 100644
--- a/arch/arm/kernel/entry-common.S
+++ b/arch/arm/kernel/entry-common.S
@@ -79,7 +79,7 @@ ENTRY(ret_from_fork)
 	get_thread_info tsk
 	ldr	r1, [tsk, #TI_FLAGS]		@ check for syscall tracing
 	mov	why, #1
-	tst	r1, #_TIF_SYSCALL_TRACE | _TIF_KERNEL_TRACE
+	tst	r1, #_TIF_SYSCALL_TRACE | _TIF_KERNEL_TRACE | _TIF_SYSCALL_AUDIT
 	beq	ret_slow_syscall		@ are we tracing syscalls?
 	mov	r1, sp
 	mov	r0, #1				@ trace exit [IP = 1]
@@ -277,7 +277,7 @@ ENTRY(vector_swi)
 #endif
 
 	stmdb	sp!, {r4, r5}			@ push fifth and sixth args
-	tst	ip, #_TIF_SYSCALL_TRACE | _TIF_KERNEL_TRACE
+	tst	ip, #_TIF_SYSCALL_TRACE | _TIF_KERNEL_TRACE | _TIF_SYSCALL_AUDIT
 	bne	__sys_trace			@ are we tracing syscalls?
 
 	cmp	scno, #NR_syscalls		@ check upper syscall limit
diff --git a/arch/arm/kernel/ptrace.c b/arch/arm/kernel/ptrace.c
index 8c03240..85d0af9 100644
--- a/arch/arm/kernel/ptrace.c
+++ b/arch/arm/kernel/ptrace.c
@@ -21,6 +21,7 @@
 #include <linux/marker.h>
 #include <linux/kallsyms.h>
 #include <linux/signal.h>
+#include <linux/audit.h>
 #include <linux/uaccess.h>
 #include <trace/syscall.h>
 
@@ -858,6 +859,15 @@ long arch_ptrace(struct task_struct *child, long request, long addr, long data)
 	return ret;
 }
 
+static inline int audit_arch(void)
+{
+#ifdef __ARMEB__
+	return AUDIT_ARCH_ARMEB;
+#else
+	return AUDIT_ARCH_ARM;
+#endif
+}
+
 asmlinkage int syscall_trace(int why, struct pt_regs *regs, int scno)
 {
 	unsigned long ip;
@@ -867,6 +877,20 @@ asmlinkage int syscall_trace(int why, struct pt_regs *regs, int scno)
 	else
 		trace_syscall_exit(regs->ARM_r0);
 
+	/* do the secure computing check first */
+	if (!why)
+		secure_computing(scno);
+
+	if (unlikely(current->audit_context)) {
+		/* why == 0, enter; why == 1, exit */
+		if (!why)
+			audit_syscall_entry(audit_arch(), scno,
+					    regs->ARM_r0, regs->ARM_r1,
+					    regs->ARM_r2, regs->ARM_r3);
+		else
+			audit_syscall_exit(AUDITSC_RESULT(regs->ARM_r0), regs->ARM_r0);
+	}
+
 	if (!test_thread_flag(TIF_SYSCALL_TRACE))
 		return scno;
 	if (!(current->ptrace & PT_PTRACED))
diff --git a/init/Kconfig b/init/Kconfig
index 0dfb6a3..57141c0 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -307,7 +307,7 @@ config AUDIT
 
 config AUDITSYSCALL
 	bool "Enable system-call auditing support"
-	depends on AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH)
+	depends on AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH || ARM)
 	default y if SECURITY_SELINUX
 	help
 	  Enable low-overhead system-call auditing infrastructure that
-- 
1.6.5.2

