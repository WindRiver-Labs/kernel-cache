From 69ad06f77f19c027ca5132dc7c7511cf6fc55259 Mon Sep 17 00:00:00 2001
From: Liming Wang <liming.wang@windriver.com>
Date: Thu, 28 Jun 2012 16:54:18 +0800
Subject: [PATCH 12/28] ata/ahci_platform: Add support for enabling/disabling
 clock.

Imported from git://git.stlinux.com/spear/linux-2.6.git
commit 9e5f1a4f8d6146bb99be94fdddeef1ee84e894e1

On many architectures, drivers are supposed to enable/disable functional clock
of device. This patch adds support for clock enabling/disabling in
ahci_platform.c.

Signed-off-by: Viresh Kumar <viresh.kumar@st.com>
Integrated-by: Liming Wang <liming.wang@windriver.com>
---
 drivers/ata/ahci.h          |    3 +++
 drivers/ata/ahci_platform.c |   36 +++++++++++++++++++++++++++++++-----
 2 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/drivers/ata/ahci.h b/drivers/ata/ahci.h
index c2594dd..bb26d5c 100644
--- a/drivers/ata/ahci.h
+++ b/drivers/ata/ahci.h
@@ -302,6 +302,9 @@ struct ahci_host_priv {
 	u32 			em_loc; /* enclosure management location */
 	u32			em_buf_sz;	/* EM buffer size in byte */
 	u32			em_msg_type;	/* EM message type */
+#ifdef CONFIG_HAVE_CLK
+	struct clk *clk;        /* clk structure, only if HAVE_CLK is defined */
+#endif
 };
 
 extern int ahci_ignore_sss;
diff --git a/drivers/ata/ahci_platform.c b/drivers/ata/ahci_platform.c
index 9e419e1..9bde1fe 100644
--- a/drivers/ata/ahci_platform.c
+++ b/drivers/ata/ahci_platform.c
@@ -12,6 +12,7 @@
  * any later version.
  */
 
+#include <linux/clk.h>
 #include <linux/kernel.h>
 #include <linux/gfp.h>
 #include <linux/module.h>
@@ -116,6 +117,19 @@ static int __init ahci_probe(struct platform_device *pdev)
 		dev_err(dev, "can't map %pR\n", mem);
 		return -ENOMEM;
 	}
+#ifdef CONFIG_HAVE_CLK
+	hpriv->clk = clk_get(dev, NULL);
+	if (IS_ERR(hpriv->clk)) {
+		dev_err(dev, "Clock not found\n");
+		return PTR_ERR(hpriv->clk);
+	}
+
+	rc = clk_enable(hpriv->clk);
+	if (rc) {
+		dev_err(dev, "clock enable failed");
+		goto free_clk;
+	}
+#endif
 
 	/*
 	 * Some platforms might need to prepare for mmio region access,
@@ -126,7 +140,7 @@ static int __init ahci_probe(struct platform_device *pdev)
 	if (pdata && pdata->init) {
 		rc = pdata->init(dev, hpriv->mmio);
 		if (rc)
-			return rc;
+			goto disable_clk;
 	}
 
 	ahci_save_initial_config(dev, hpriv,
@@ -152,7 +166,7 @@ static int __init ahci_probe(struct platform_device *pdev)
 	host = ata_host_alloc_pinfo(dev, ppi, n_ports);
 	if (!host) {
 		rc = -ENOMEM;
-		goto err0;
+		goto pdata_exit;
 	}
 
 	host->private_data = hpriv;
@@ -182,7 +196,7 @@ static int __init ahci_probe(struct platform_device *pdev)
 
 	rc = ahci_reset_controller(host);
 	if (rc)
-		goto err0;
+		goto pdata_exit;
 
 	ahci_init_controller(host);
 	ahci_print_info(host, "platform");
@@ -190,12 +204,18 @@ static int __init ahci_probe(struct platform_device *pdev)
 	rc = ata_host_activate(host, irq, ahci_interrupt, IRQF_SHARED,
 			       &ahci_platform_sht);
 	if (rc)
-		goto err0;
+		goto pdata_exit;
 
 	return 0;
-err0:
+pdata_exit:
 	if (pdata && pdata->exit)
 		pdata->exit(dev);
+disable_clk:
+#ifdef CONFIG_HAVE_CLK
+	clk_disable(hpriv->clk);
+free_clk:
+	clk_put(hpriv->clk);
+#endif
 	return rc;
 }
 
@@ -204,12 +224,18 @@ static int __devexit ahci_remove(struct platform_device *pdev)
 	struct device *dev = &pdev->dev;
 	struct ahci_platform_data *pdata = dev_get_platdata(dev);
 	struct ata_host *host = dev_get_drvdata(dev);
+	struct ahci_host_priv *hpriv = host->private_data;
 
 	ata_host_detach(host);
 
 	if (pdata && pdata->exit)
 		pdata->exit(dev);
 
+#ifdef CONFIG_HAVE_CLK
+	clk_disable(hpriv->clk);
+	clk_put(hpriv->clk);
+#endif
+
 	return 0;
 }
 
-- 
1.7.9.7

