From 83c576471bfff76e1b137b999ad3e1e2982e2c1a Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <Guoqing.Jiang@windriver.com>
Date: Fri, 1 Apr 2011 17:53:30 +0800
Subject: [PATCH 17/21] TI 816x: add OMAP Dual-Mode Timers support

Add OMAP Dual-Mode Timers support for ti 816x.

This patch refers to below commit in arago git tree.
git://arago-project.org/git/projects/linux-omap3.git

e1ea60 ti816x: Initial support for TI8168
af0617 ti816x: Prepare for multi-omap configuration
dc9fa4 ti816x: cleanups

Integrated-by: Guoqing Jiang <Guoqing.Jiang@windriver.com>
---
 arch/arm/plat-omap/dmtimer.c |   97 ++++++++++++++++++++++++++++++++++++------
 1 files changed, 84 insertions(+), 13 deletions(-)

diff --git a/arch/arm/plat-omap/dmtimer.c b/arch/arm/plat-omap/dmtimer.c
index 4d99dfb..920bbfd 100644
--- a/arch/arm/plat-omap/dmtimer.c
+++ b/arch/arm/plat-omap/dmtimer.c
@@ -45,10 +45,6 @@
 #define _OMAP_TIMER_ID_OFFSET		0x00
 #define _OMAP_TIMER_OCP_CFG_OFFSET	0x10
 #define _OMAP_TIMER_SYS_STAT_OFFSET	0x14
-#define _OMAP_TIMER_STAT_OFFSET		0x18
-#define _OMAP_TIMER_INT_EN_OFFSET	0x1c
-#define _OMAP_TIMER_WAKEUP_EN_OFFSET	0x20
-#define _OMAP_TIMER_CTRL_OFFSET		0x24
 #define		OMAP_TIMER_CTRL_GPOCFG		(1 << 14)
 #define		OMAP_TIMER_CTRL_CAPTMODE	(1 << 13)
 #define		OMAP_TIMER_CTRL_PT		(1 << 12)
@@ -62,10 +58,6 @@
 #define		OMAP_TIMER_CTRL_POSTED		(1 << 2)
 #define		OMAP_TIMER_CTRL_AR		(1 << 1) /* auto-reload enable */
 #define		OMAP_TIMER_CTRL_ST		(1 << 0) /* start timer */
-#define _OMAP_TIMER_COUNTER_OFFSET	0x28
-#define _OMAP_TIMER_LOAD_OFFSET		0x2c
-#define _OMAP_TIMER_TRIGGER_OFFSET	0x30
-#define _OMAP_TIMER_WRITE_PEND_OFFSET	0x34
 #define		WP_NONE			0	/* no write pending bit */
 #define		WP_TCLR			(1 << 0)
 #define		WP_TCRR			(1 << 1)
@@ -77,16 +69,40 @@
 #define		WP_TCVR			(1 << 7)
 #define		WP_TOCR			(1 << 8)
 #define		WP_TOWR			(1 << 9)
-#define _OMAP_TIMER_MATCH_OFFSET	0x38
-#define _OMAP_TIMER_CAPTURE_OFFSET	0x3c
-#define _OMAP_TIMER_IF_CTRL_OFFSET	0x40
-#define _OMAP_TIMER_CAPTURE2_OFFSET		0x44	/* TCAR2, 34xx only */
 #define _OMAP_TIMER_TICK_POS_OFFSET		0x48	/* TPIR, 34xx only */
 #define _OMAP_TIMER_TICK_NEG_OFFSET		0x4c	/* TNIR, 34xx only */
 #define _OMAP_TIMER_TICK_COUNT_OFFSET		0x50	/* TCVR, 34xx only */
 #define _OMAP_TIMER_TICK_INT_MASK_SET_OFFSET	0x54	/* TOCR, 34xx only */
 #define _OMAP_TIMER_TICK_INT_MASK_COUNT_OFFSET	0x58	/* TOWR, 34xx only */
 
+#ifdef CONFIG_ARCH_TI816X
+#define _OMAP_TIMER_STAT_OFFSET		0x28
+#define _OMAP_TIMER_INT_EN_OFFSET	0x2c
+#define _OMAP_TIMER_WAKEUP_EN_OFFSET	0x34
+#define _OMAP_TIMER_CTRL_OFFSET		0x38
+#define _OMAP_TIMER_COUNTER_OFFSET	0x3c
+#define _OMAP_TIMER_LOAD_OFFSET		0x40
+#define _OMAP_TIMER_TRIGGER_OFFSET	0x44
+#define _OMAP_TIMER_WRITE_PEND_OFFSET	0x48
+#define _OMAP_TIMER_MATCH_OFFSET	0x4c
+#define _OMAP_TIMER_CAPTURE_OFFSET	0x50
+#define _OMAP_TIMER_IF_CTRL_OFFSET	0x54
+#define _OMAP_TIMER_CAPTURE2_OFFSET	0x58
+#else
+#define _OMAP_TIMER_STAT_OFFSET		0x18
+#define _OMAP_TIMER_INT_EN_OFFSET	0x1c
+#define _OMAP_TIMER_WAKEUP_EN_OFFSET	0x20
+#define _OMAP_TIMER_CTRL_OFFSET		0x24
+#define _OMAP_TIMER_COUNTER_OFFSET	0x28
+#define _OMAP_TIMER_LOAD_OFFSET		0x2c
+#define _OMAP_TIMER_TRIGGER_OFFSET	0x30
+#define _OMAP_TIMER_WRITE_PEND_OFFSET	0x34
+#define _OMAP_TIMER_MATCH_OFFSET	0x38
+#define _OMAP_TIMER_CAPTURE_OFFSET	0x3c
+#define _OMAP_TIMER_IF_CTRL_OFFSET	0x40
+#define _OMAP_TIMER_CAPTURE2_OFFSET	0x44	/* TCAR2, 34xx only */
+#endif
+
 /* register offsets with the write pending bit encoded */
 #define	WPSHIFT					16
 
@@ -150,6 +166,18 @@
 #define OMAP_TIMER_TICK_INT_MASK_COUNT_REG				\
 		(_OMAP_TIMER_TICK_INT_MASK_COUNT_OFFSET | (WP_TOWR << WPSHIFT))
 
+/* ti816x only */
+#define _OMAP_TIMER_IRQ_EOI_OFFSET		0x20
+#define OMAP_TIMER_IRQ_EOI_REG		(_OMAP_TIMER_IRQ_EOI_OFFSET \
+							| (WP_NONE << WPSHIFT))
+#define _OMAP_TIMER_IRQSTATUS_RAW_OFFSET	0x24
+#define OMAP_TIMER_IRQSTATUS_RAW_REG	(_OMAP_TIMER_IRQSTATUS_RAW_OFFSET \
+							| (WP_NONE << WPSHIFT))
+#define _OMAP_TIMER_IRQSTATUS_CLR_OFFSET	0x30
+#define OMAP_TIMER_IRQSTATUS_CLR_REG	(_OMAP_TIMER_IRQSTATUS_CLR_OFFSET \
+							| (WP_NONE << WPSHIFT))
+/* ti816x only */
+
 struct omap_dm_timer {
 	unsigned long phys_base;
 	int irq;
@@ -278,9 +306,37 @@ static const int omap4_dm_timer_count = ARRAY_SIZE(omap4_dm_timers);
 #define omap4_dm_source_clocks		NULL
 #endif	/* CONFIG_ARCH_OMAP4 */
 
+#ifdef CONFIG_ARCH_TI816X
+static struct omap_dm_timer ti816x_dm_timers[] = {
+	{ .phys_base = 0x4802C000, .irq = TI816X_IRQ_GPT1, .reserved = 1 },
+	{ .phys_base = 0x4802E000, .irq = TI816X_IRQ_GPT2 },
+	{ .phys_base = 0x48040000, .irq = TI816X_IRQ_GPT3 },
+	{ .phys_base = 0x48042000, .irq = TI816X_IRQ_GPT4 },
+	{ .phys_base = 0x48044000, .irq = TI816X_IRQ_GPT5 },
+	{ .phys_base = 0x48046000, .irq = TI816X_IRQ_GPT6 },
+	{ .phys_base = 0x48048000, .irq = TI816X_IRQ_GPT7 },
+	{ .phys_base = 0x4804A000, .irq = TI816X_IRQ_GPT8 },
+};
+static const char *ti816x_dm_source_names[] __initdata = {
+	"sys_clkin_ck",
+	"sys_clk18_ck",
+	"tclkin_ck",
+	NULL
+};
+static struct clk *ti816x_dm_source_clocks[3];
+static const int ti816x_dm_timer_count = ARRAY_SIZE(ti816x_dm_timers);
+
+#else
+#define ti816x_dm_timers		NULL
+#define ti816x_dm_timer_count		0
+#define ti816x_dm_source_names		NULL
+#define ti816x_dm_source_clocks		NULL
+#endif	/* CONFIG_ARCH_TI816X */
+
 static struct omap_dm_timer *dm_timers;
 static const char **dm_source_names;
 static struct clk **dm_source_clocks;
+u32 *dm_regs;
 
 static spinlock_t dm_timer_lock;
 
@@ -314,12 +370,22 @@ static void omap_dm_timer_write_reg(struct omap_dm_timer *timer, u32 reg,
 	writel(value, timer->io_base + (reg & 0xff));
 }
 
+static inline int is_reset_done(struct omap_dm_timer *timer)
+{
+	if (!cpu_is_ti816x())
+		return ((omap_dm_timer_read_reg(timer,
+			OMAP_TIMER_SYS_STAT_REG) & 1) == 1);
+	else
+		return ((omap_dm_timer_read_reg(timer,
+			OMAP_TIMER_OCP_CFG_REG) & 1) == 0);
+}
+
 static void omap_dm_timer_wait_for_reset(struct omap_dm_timer *timer)
 {
 	int c;
 
 	c = 0;
-	while (!(omap_dm_timer_read_reg(timer, OMAP_TIMER_SYS_STAT_REG) & 1)) {
+	while (!is_reset_done(timer)) {
 		c++;
 		if (c > 100000) {
 			printk(KERN_ERR "Timer failed to reset\n");
@@ -762,6 +828,11 @@ int __init omap_dm_timer_init(void)
 		dm_timer_count = omap4_dm_timer_count;
 		dm_source_names = omap4_dm_source_names;
 		dm_source_clocks = omap4_dm_source_clocks;
+	} else if (cpu_is_ti816x()) {
+		dm_timers = ti816x_dm_timers;
+		dm_timer_count = ti816x_dm_timer_count;
+		dm_source_names = ti816x_dm_source_names;
+		dm_source_clocks = ti816x_dm_source_clocks;
 	}
 
 	if (cpu_class_is_omap2())
-- 
1.7.0.2

