From 9a81706d978cdbf1060e3c706e40c6073b33f4b3 Mon Sep 17 00:00:00 2001
From: Mike Leach <mike.leach@linaro.org>
Date: Fri, 12 Aug 2016 12:39:00 -0600
Subject: [PATCH 58/59] cs-etm: Update to perf cs-etm decode for OpenCSD v0.4
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Original patch taken from: https://github.com/Linaro/OpenCSD.git

OpenCSD v0.4 provides a more scaleable and generic API for decoder
creation. This patch fixes the cs-etm-decoder in perf report to use
the new API.

Removes the deprecated protocol specific C API function calls used to
create decoders, replacing them with the general create by protocol name
Â API introduced in OpenCSD v0.4

Fix typename move from C API to more global ocsd_ API types.

Signed-off-by: Mike Leach <mike.leach@linaro.org>
Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
Signed-off-by: Jianchuan Wang <jianchuan.wang@windriver.com>
---
 tools/perf/util/cs-etm-decoder/cs-etm-decoder.c |   30 +++++++++++++++++-----
 1 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
index ef36f02..e4c929e 100644
--- a/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
+++ b/tools/perf/util/cs-etm-decoder/cs-etm-decoder.c
@@ -253,6 +253,7 @@ static int cs_etm_decoder__create_etmv4i_packet_printer(struct cs_etm_decoder_pa
 {
         ocsd_etmv4_cfg trace_config;
         int ret = 0;
+	unsigned char CSID; /* CSID extracted from the config data */
 
         if (d_params->packet_printer == NULL) 
                 return -1;
@@ -264,11 +265,20 @@ static int cs_etm_decoder__create_etmv4i_packet_printer(struct cs_etm_decoder_pa
 
         decoder->packet_printer = d_params->packet_printer;
 
-        ret = ocsd_dt_create_etmv4i_pkt_proc(decoder->dcd_tree,
-                                              &trace_config,
-                                              cs_etm_decoder__etmv4i_packet_printer,
-                                              decoder);
+	ret = ocsd_dt_create_decoder(decoder->dcd_tree,
+				     OCSD_BUILTIN_DCD_ETMV4I,
+				     OCSD_CREATE_FLG_PACKET_PROC,
+				     (void *)&trace_config,
+				     &CSID);
 
+	if (ret != 0)
+		return -1;
+
+	ret = ocsd_dt_attach_packet_callback(decoder->dcd_tree,
+					  CSID,
+					  OCSD_C_API_CB_PKT_SINK,
+					  cs_etm_decoder__etmv4i_packet_printer,
+					  decoder);
         return ret;
 }
 
@@ -277,6 +287,8 @@ static int cs_etm_decoder__create_etmv4i_packet_decoder(struct cs_etm_decoder_pa
 {
         ocsd_etmv4_cfg trace_config;
         int ret = 0;
+	unsigned char CSID; /* CSID extracted from the config data */
+
         decoder->packet_printer = d_params->packet_printer;
 
         ret = cs_etm_decoder__gen_etmv4_config(t_params,&trace_config);
@@ -284,9 +296,13 @@ static int cs_etm_decoder__create_etmv4i_packet_decoder(struct cs_etm_decoder_pa
         if (ret != 0)
                 return -1;
 
-        ret = ocsd_dt_create_etmv4i_decoder(decoder->dcd_tree,&trace_config);
+	ret = ocsd_dt_create_decoder(decoder->dcd_tree,
+				     OCSD_BUILTIN_DCD_ETMV4I,
+				     OCSD_CREATE_FLG_FULL_DECODER,
+				     (void *)&trace_config,
+				     &CSID);
 
-        if (ret != OCSD_OK) 
+	if (ret != 0)
                 return -1;
 
         ret = ocsd_dt_set_gen_elem_outfn(decoder->dcd_tree,
@@ -312,7 +328,7 @@ int cs_etm_decoder__add_mem_access_cb(struct cs_etm_decoder *decoder, uint64_t a
 int cs_etm_decoder__add_bin_file(struct cs_etm_decoder *decoder, uint64_t offset, uint64_t address, uint64_t len, const char *fname)
 {
         int err = 0;
-        file_mem_region_t region;
+	ocsd_file_mem_region_t region;
 
         (void) len;
         if (NULL == decoder)
-- 
1.7.5.4

