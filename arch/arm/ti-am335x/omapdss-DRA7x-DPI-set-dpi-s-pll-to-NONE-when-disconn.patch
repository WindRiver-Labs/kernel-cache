From a66341e639d135e4c9a133f469f48f8f17897e60 Mon Sep 17 00:00:00 2001
From: Archit Taneja <archit@ti.com>
Date: Mon, 21 Oct 2013 11:14:09 +0530
Subject: [PATCH 0547/1115] omapdss: DRA7x DPI: set dpi's pll to NONE when
 disconnecting

We assign a dpll to a DPI interface when we connect it to an overlay manager.
However, we unassign the dpll when we disable DPI. This causes the DPI driver
to not use the dpll the next time it's enabled.

Unassigning the dpll in disconnect() rather than disable() prevents this.

Signed-off-by: Archit Taneja <archit@ti.com>
(cherry picked from commit 63aa5e782e5cd5862b05f73ca6e7afea6470a980)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/video/omap2/dss/dra7xx_dpi.c |   18 ++++++++++--------
 1 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/video/omap2/dss/dra7xx_dpi.c b/drivers/video/omap2/dss/dra7xx_dpi.c
index 8ca4520..098a87b 100644
--- a/drivers/video/omap2/dss/dra7xx_dpi.c
+++ b/drivers/video/omap2/dss/dra7xx_dpi.c
@@ -84,7 +84,7 @@ struct dpi_clk_calc_ctx {
 
 	/* outputs */
 	struct dss_dpll_cinfo dpll_cinfo;
-	struct dss_clock_info dss_cinfo;
+	unsigned long long fck;
 	struct dispc_clock_info dispc_cinfo;
 };
 
@@ -149,12 +149,11 @@ static bool dpi_calc_pll_cb(int regn, int regm, unsigned long fint,
 			dpi_calc_hsdiv_cb, ctx);
 }
 
-static bool dpi_calc_dss_cb(int fckd, unsigned long fck, void *data)
+static bool dpi_calc_dss_cb(unsigned long fck, void *data)
 {
 	struct dpi_clk_calc_ctx *ctx = data;
 
-	ctx->dss_cinfo.fck = fck;
-	ctx->dss_cinfo.fck_div = fckd;
+	ctx->fck = fck;
 
 	return dispc_div_calc(fck, ctx->pck_min, ctx->pck_max,
 			dpi_calc_dispc_cb, ctx);
@@ -203,7 +202,7 @@ static bool dpi_dss_clk_calc(unsigned long pck, struct dpi_clk_calc_ctx *ctx)
 			ctx->pck_min = 0;
 		ctx->pck_max = pck + 1000 * i * i * i;
 
-		ok = dss_div_calc(ctx->pck_min, dpi_calc_dss_cb, ctx);
+		ok = dss_div_calc(pck, ctx->pck_min, dpi_calc_dss_cb, ctx);
 		if (ok)
 			return ok;
 	}
@@ -248,13 +247,13 @@ static int dpi_set_dispc_clk(struct dpi_data *dpi, unsigned long pck_req,
 	if (!ok)
 		return -EINVAL;
 
-	r = dss_set_clock_div(&ctx.dss_cinfo);
+	r = dss_set_fck_rate(ctx.fck);
 	if (r)
 		return r;
 
 	dpi->mgr_config.clock_info = ctx.dispc_cinfo;
 
-	*fck = ctx.dss_cinfo.fck;
+	*fck = ctx.fck;
 	*lck_div = ctx.dispc_cinfo.lck_div;
 	*pck_div = ctx.dispc_cinfo.pck_div;
 
@@ -379,7 +378,6 @@ static void dra7xx_dpi_display_disable(struct omap_dss_device *dssdev)
 	if (dpi->dpll != DSS_DPLL_NONE) {
 		dss_use_dpll_lcd(dssdev->dispc_channel, false);
 		dss_dpll_disable(dpi->dpll);
-		dpi->dpll = DSS_DPLL_NONE;
 	}
 
 	dispc_runtime_put();
@@ -471,11 +469,15 @@ static int dra7xx_dpi_connect(struct omap_dss_device *dssdev,
 static void dra7xx_dpi_disconnect(struct omap_dss_device *dssdev,
 		struct omap_dss_device *dst)
 {
+	struct dpi_data *dpi = dev_get_drvdata(dssdev->dev);
+
 	WARN_ON(dst != dssdev->dst);
 
 	if (dst != dssdev->dst)
 		return;
 
+	dpi->dpll = DSS_DPLL_NONE;
+
 	omapdss_output_unset_device(dssdev);
 
 	if (dssdev->manager)
-- 
1.7.5.4

