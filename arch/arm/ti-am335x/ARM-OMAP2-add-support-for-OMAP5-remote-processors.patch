From eec79b3ecc0f2886f1c2d038d18d4ad779c2294c Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Mon, 7 May 2012 01:27:15 -0500
Subject: [PATCH 0690/1115] ARM: OMAP2+: add support for OMAP5 remote
 processors

Support has been added to enable the remoteproc device
registration for OMAP5. OMAP5, like OMAP4, also has two
processor subsystems - DSP and IPU. The IPU subsystem
though has dual Cortex-M4 processors instead of the
dual Cortex-M3 processors in OMAP4, but otherwise has
almost the same features.

The support includes adding a common function for reserving
CMA pools with the OMAP5 SoC identifier. The OMAP5 support
reuses the same data structures as that of OMAP4, and an
adjustment has been made only for DMTimers 5 and 6. These
timers are capable of PWM functionality also in OMAP5, and
the logic is adjusted (at runtime to avoid creating separate
static data structures for OMAP5) so that the timers can be
successfully acquired for the DSP sub-system.

Signed-off-by: Suman Anna <s-anna@ti.com>
(cherry picked from commit f14c1d562454cbca37cbe2924ce16c7ccc649e32)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 arch/arm/mach-omap2/board-generic.c           |    2 +-
 arch/arm/mach-omap2/common.c                  |    6 ++++++
 arch/arm/mach-omap2/common.h                  |    1 +
 arch/arm/mach-omap2/remoteproc.c              |    5 +++--
 drivers/remoteproc/Kconfig                    |   10 +++++-----
 include/linux/platform_data/remoteproc-omap.h |    1 +
 6 files changed, 17 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-omap2/board-generic.c b/arch/arm/mach-omap2/board-generic.c
index 2491e6a..2404e76 100644
--- a/arch/arm/mach-omap2/board-generic.c
+++ b/arch/arm/mach-omap2/board-generic.c
@@ -204,7 +204,7 @@ static const char *omap5_boards_compat[] __initdata = {
 };
 
 DT_MACHINE_START(OMAP5_DT, "Generic OMAP5 (Flattened Device Tree)")
-	.reserve	= omap_reserve,
+	.reserve	= omap5_reserve,
 	.smp		= smp_ops(omap4_smp_ops),
 	.map_io		= omap5_map_io,
 	.init_early	= omap5_init_early,
diff --git a/arch/arm/mach-omap2/common.c b/arch/arm/mach-omap2/common.c
index 58cf4bd..16a2355 100644
--- a/arch/arm/mach-omap2/common.c
+++ b/arch/arm/mach-omap2/common.c
@@ -39,6 +39,12 @@ void __init omap4_reserve(void)
 	omap_reserve();
 }
 
+void __init omap5_reserve(void)
+{
+	omap_rproc_reserve_cma(RPROC_CMA_OMAP5);
+	omap_reserve();
+}
+
 void __init omap_reserve(void)
 {
 	omap_dsp_reserve_sdram_memblock();
diff --git a/arch/arm/mach-omap2/common.h b/arch/arm/mach-omap2/common.h
index e9f03ed..d3705ad 100644
--- a/arch/arm/mach-omap2/common.h
+++ b/arch/arm/mach-omap2/common.h
@@ -334,6 +334,7 @@ struct omap2_hsmmc_info;
 extern int omap4_twl6030_hsmmc_init(struct omap2_hsmmc_info *controllers);
 
 extern void omap4_reserve(void);
+extern void omap5_reserve(void);
 extern void omap_reserve(void);
 
 extern void am33xx_reserve(void);
diff --git a/arch/arm/mach-omap2/remoteproc.c b/arch/arm/mach-omap2/remoteproc.c
index bc08eb3..c4cdf22 100644
--- a/arch/arm/mach-omap2/remoteproc.c
+++ b/arch/arm/mach-omap2/remoteproc.c
@@ -389,7 +389,8 @@ void __init omap_rproc_reserve_cma(int platform_type)
 	int rproc_size = 0;
 	int i, ret;
 
-	if (platform_type == RPROC_CMA_OMAP4) {
+	if ((platform_type == RPROC_CMA_OMAP4) ||
+	    (platform_type == RPROC_CMA_OMAP5)) {
 		rproc_pdev_data = omap4_rproc_pdev_data;
 		rproc_size = ARRAY_SIZE(omap4_rproc_pdev_data);
 	} else {
@@ -431,7 +432,7 @@ static int __init omap_rproc_init(void)
 	struct omap_device *od;
 	int i, ret = 0, oh_count;
 
-	if (!cpu_is_omap44xx())
+	if (!cpu_is_omap44xx() && !soc_is_omap54xx())
 		return 0;
 
 	for (i = 0; i < ARRAY_SIZE(omap4_rproc_pdev_data); i++) {
diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index b61fee7..3421fbb 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -20,8 +20,8 @@ config OMAP_REMOTEPROC
 	select OMAP2PLUS_MBOX
 	select RPMSG
 	help
-	  Support for OMAP's remote processors (dual Cortex-M3
-	  and DSP on OMAP4) via the remote processor framework.
+	  Support for OMAP's remote processors (dual Cortex-M3/M4
+	  and DSP) via the remote processor framework.
 
 	  Currently only supported on OMAP4.
 
@@ -37,9 +37,9 @@ config OMAP_REMOTEPROC_IPU
 	help
 	  Say Y here if you want to enable OMAP's IPU remote processor.
 
-	  This option controls only the dual Cortex-M3 processor sub-system.
-	  You would want to say y here usually, as this is the sub-system
-	  where typically video & imaging codec control s/w is offloaded.
+	  This option controls only the dual Cortex-M3/M4 processor sub-system.
+	  You would want to say y here usually, as this is the sub-system where
+	  typically video & imaging codec control s/w is offloaded.
 
 	  It's safe to say n here if you're not interested in multimedia
 	  offloading (by IPU) or just want a bare minimum kernel.
diff --git a/include/linux/platform_data/remoteproc-omap.h b/include/linux/platform_data/remoteproc-omap.h
index 7855b5f..007b210 100644
--- a/include/linux/platform_data/remoteproc-omap.h
+++ b/include/linux/platform_data/remoteproc-omap.h
@@ -79,5 +79,6 @@ static inline void __init omap_rproc_reserve_cma(int platform_type)
  * the appropriate SoC-specific CMA memory size and locations.
  */
 #define RPROC_CMA_OMAP4		1
+#define RPROC_CMA_OMAP5		2
 
 #endif /* _PLAT_REMOTEPROC_H */
-- 
1.7.5.4

