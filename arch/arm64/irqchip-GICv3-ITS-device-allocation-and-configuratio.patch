From e65f147d81bcd64c680b01337cb39258d194fdad Mon Sep 17 00:00:00 2001
From: Marc Zyngier <marc.zyngier@arm.com>
Date: Mon, 24 Nov 2014 14:35:15 +0000
Subject: [PATCH 018/132] irqchip: GICv3: ITS: device allocation and
 configuration

commit 84a6a2e7fc18dae444c5c88cc6af8878552867a5 upstream

The ITS has a notion of "device" that can write to it in order to
generate an interrupt.

Conversly, the driver maintains a per-ITS list of devices, together
with their configuration information, and uses this to configure
the HW.

Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
Link: https://lkml.kernel.org/r/1416839720-18400-9-git-send-email-marc.zyngier@arm.com
Signed-off-by: Jason Cooper <jason@lakedaemon.net>
[irq-gic files are different from mainline, so this patch
 is not same as upstream.]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/irqchip/irq-gic-v3-its.c |   30 ++++++++++++++----------------
 1 files changed, 14 insertions(+), 16 deletions(-)

diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index 25b1ee6..9449918 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -1079,37 +1079,37 @@ static struct its_device *its_find_device(struct its_node *its, u32 dev_id)
 }
 
 static struct its_device *its_create_device(struct its_node *its, u32 dev_id,
-					    int itt_size)
+					    int nvecs)
 {
 	struct its_device *dev;
+	unsigned long *lpi_map;
 	void *itt;
-	int nr_ites;
+	int lpi_base;
+	int nr_lpis;
 	int cpu;
 	int sz;
 
 	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
-	/*
-	 * At least one bit of EventID is being used, hence a minimum
-	 * of two entries. No, the architecture doesn't let you
-	 * express an ITT with a single entry.
-	 */
-	nr_ites = max(2UL, roundup_pow_of_two(itt_size));
-	sz = nr_ites * its->ite_size;
+	sz = nvecs * its->ite_size;
 	sz = max(sz, ITS_ITT_ALIGN) + ITS_ITT_ALIGN - 1;
 	itt = kmalloc(sz, GFP_KERNEL);
+	lpi_map = its_lpi_alloc_chunks(nvecs, &lpi_base, &nr_lpis);
 
-	if (!dev || !itt) {
+	if (!dev || !itt || !lpi_map) {
 		kfree(dev);
 		kfree(itt);
+		kfree(lpi_map);
 		return NULL;
 	}
 
 	dev->its = its;
 	dev->itt = itt;
-	dev->nr_ites = nr_ites;
+	dev->nr_ites = nvecs;
+	dev->lpi_map = lpi_map;
+	dev->lpi_base = lpi_base;
+	dev->nr_lpis = nr_lpis;
 	dev->device_id = dev_id;
 	INIT_LIST_HEAD(&dev->entry);
-	INIT_LIST_HEAD(&dev->hwirq_list);
 
 	raw_spin_lock(&its->lock);
 	list_add(&dev->entry, &its->its_device_list);
@@ -1127,11 +1127,9 @@ static struct its_device *its_create_device(struct its_node *its, u32 dev_id,
 
 static void its_free_device(struct its_device *its_dev)
 {
-	unsigned long flags;
-
-	raw_spin_lock_irqsave(&its_dev->its->lock, flags);
+	raw_spin_lock(&its_dev->its->lock);
 	list_del(&its_dev->entry);
-	raw_spin_unlock_irqrestore(&its_dev->its->lock, flags);
+	raw_spin_unlock(&its_dev->its->lock);
 	kfree(its_dev->itt);
 	kfree(its_dev);
 }
-- 
1.7.5.4

