From 70dcb8b7cce6b35964e97cb08db469de6cd8bc70 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Wed, 15 Jul 2015 07:33:56 +0000
Subject: [PATCH 14/23] irqchip: GICv3: ITS: tables allocators

commit 1ac19ca6bf97392a3a631551bac223893d24d21f upsteam

The interrupt translation is driven by a set of tables (device,
ITT, and collection) to be in the end delivered to a CPU. Also,
the redistributors rely on a couple of tables (configuration, and
pending) to deliver the interrupts to the CPUs.

This patch adds the required allocators for these tables.

Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
Link: https://lkml.kernel.org/r/1416839720-18400-8-git-send-email-marc.zyngier@arm.com
Signed-off-by: Jason Cooper <jason@lakedaemon.net>
[Lu: We picked a similar patch from ricc tree, this patch adds missing
part for drivers/irqchip/irq-gic-v3-its.c]
Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/irqchip/irq-gic-v3-its.c |   20 ++++++++++----------
 1 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index f3bc84c..4cc1233 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -923,12 +923,12 @@ static int its_alloc_tables(struct its_node *its)
 
 	for (i = 0; i < GITS_BASER_NR_REGS; i++) {
 		u64 val = readq_relaxed(its->base + GITS_BASER + i * 8);
+		u64 type = GITS_BASER_TYPE(val);
+		u64 entry_size = GITS_BASER_ENTRY_SIZE(val);
 		u64 tmp;
-		int type = (val >> 56) & 7;
-		int entry_size = ((val >> 48) & 0xff) + 1;
 		void *base;
 
-		if (!type)
+		if (type == GITS_BASER_TYPE_NONE)
 			continue;
 
 		/* We're lazy and only allocate a single page for now */
@@ -941,11 +941,11 @@ static int its_alloc_tables(struct its_node *its)
 		its->tables[i] = base;
 
 retry_baser:
-		val = (virt_to_phys(base) 		|
-		       ((u64)type << 56)		|
-		       ((u64)(entry_size - 1) << 48)	|
-		       GITS_BASER_WaWb			|
-		       shr				|
+		val = (virt_to_phys(base) 				 |
+		       (type << GITS_BASER_TYPE_SHIFT)			 |
+		       ((entry_size - 1) << GITS_BASER_ENTRY_SIZE_SHIFT) |
+		       GITS_BASER_WaWb					 |
+		       shr						 |
 		       GITS_BASER_VALID);
 
 		switch (psz) {
@@ -976,7 +976,7 @@ retry_baser:
 			goto retry_baser;
 		}
 
-		if ((val ^ tmp) & (3 << 8)) {
+		if ((val ^ tmp) & GITS_BASER_PAGE_SIZE_MASK) {
 			/*
 			 * Page size didn't stick. Let's try a smaller
 			 * size and retry. If we reach 4K, then
@@ -1004,7 +1004,7 @@ retry_baser:
 			(int)PAGE_SIZE / entry_size,
 			its_base_type_string[type],
 			(unsigned long)virt_to_phys(base),
-			psz / 1024, (int)shr >> 10);
+			psz / SZ_1K, (int)shr >> GITS_BASER_SHAREABILITY_SHIFT);
 	}
 
 	return 0;
-- 
1.7.5.4

