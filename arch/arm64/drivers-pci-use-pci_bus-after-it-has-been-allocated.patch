From 7f6d659ab503004700cbd46922c2675edc99ea99 Mon Sep 17 00:00:00 2001
From: Yanjiang Jin <yanjiang.jin@windriver.com>
Date: Fri, 24 Jul 2015 11:56:48 +0800
Subject: [PATCH 3/3] drivers: pci: use pci_bus after it has been allocated

This is to avoid the below compile warnings:

drivers/pci/probe.c: warning: 'b' is used uninitialized in this function [-Wuninitialized]
drivers/pci/probe.c: warning: 'bridge' may be used uninitialized in this function

Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/pci/probe.c |   26 ++++++++++++--------------
 1 files changed, 12 insertions(+), 14 deletions(-)

diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index 242c7f0..f1a0270 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -1737,13 +1737,6 @@ struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
 	char bus_addr[64];
 	char *fmt;
 
-	bridge = pci_alloc_host_bridge(b);
-	if (!bridge)
-		return NULL;
-
-	bridge->dev.parent = parent;
-	bridge->dev.release = pci_release_host_bridge_dev;
-
 	b = pci_alloc_bus(NULL);
 	if (!b)
 		goto err_out;
@@ -1756,19 +1749,26 @@ struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
 	if (b2) {
 		/* If we already got to this bus through a different bridge, ignore it */
 		dev_dbg(&b2->dev, "bus already known\n");
-		goto err_bus_out;
+		goto err_out;
 	}
 
-	bridge->bus = b;
+	bridge = pci_alloc_host_bridge(b);
+	if (!bridge)
+		goto err_out;
+
+	bridge->dev.parent = parent;
+	bridge->dev.release = pci_release_host_bridge_dev;
 	dev_set_name(&bridge->dev, "pci%04x:%02x", pci_domain_nr(b), bus);
 	error = pcibios_root_bridge_prepare(bridge);
-	if (error)
+	if (error) {
+		kfree(bridge);
 		goto err_out;
+	}
 
 	error = device_register(&bridge->dev);
 	if (error) {
 		put_device(&bridge->dev);
-		goto err_bus_out;
+		goto err_out;
 	}
 	b->bridge = get_device(&bridge->dev);
 	device_enable_async_suspend(b->bridge);
@@ -1825,10 +1825,8 @@ struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
 class_dev_reg_err:
 	put_device(&bridge->dev);
 	device_unregister(&bridge->dev);
-err_bus_out:
-	kfree(b);
 err_out:
-	kfree(bridge);
+	kfree(b);
 	return NULL;
 }
 
-- 
1.7.5.4

