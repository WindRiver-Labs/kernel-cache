From 256f017e52d6e52b8d58038153f4e7c09f2deede Mon Sep 17 00:00:00 2001
From: Sunil Goutham <sgoutham@cavium.com>
Date: Thu, 19 Jun 2014 15:10:10 +0530
Subject: [PATCH 418/430] AHCI: Added MSIX interrupt support to SATA PCI
 driver

This commit comes from:
  git://git.kernel.org/pub/scm/linux/kernel/git/rric/linux.git

Signed-off-by: Sunil Goutham <sgoutham@cavium.com>
Signed-off-by: Robert Richter <rrichter@cavium.com>
(cherry picked from commit a9c2d0eeb30b9927df718e4a64e516271a0556c0)
Signed-off-by: Zumeng Chen <zumeng.chen@windriver.com>
---
 drivers/ata/ahci.c |   44 +++++++++++++++++++++++++++++++++++++++++---
 drivers/ata/ahci.h |    3 +++
 2 files changed, 44 insertions(+), 3 deletions(-)

diff --git a/drivers/ata/ahci.c b/drivers/ata/ahci.c
index f0f8ae1..983c669 100644
--- a/drivers/ata/ahci.c
+++ b/drivers/ata/ahci.c
@@ -52,6 +52,7 @@
 
 enum {
 	AHCI_PCI_BAR_STA2X11	= 0,
+	AHCI_PCI_BAR_CAVIUM	= 0,
 	AHCI_PCI_BAR_ENMOTUS	= 2,
 	AHCI_PCI_BAR_STANDARD	= 5,
 };
@@ -72,6 +73,7 @@ enum board_ids {
 	board_ahci_sb600,
 	board_ahci_sb700,	/* for SB700 and SB800 */
 	board_ahci_vt8251,
+	board_ahci_cavium,
 
 	/* aliases */
 	board_ahci_mcp_linux	= board_ahci_mcp65,
@@ -196,6 +198,13 @@ static const struct ata_port_info ahci_port_info[] = {
 		.udma_mask	= ATA_UDMA6,
 		.port_ops	= &ahci_vt8251_ops,
 	},
+	[board_ahci_cavium] = {
+		AHCI_HFLAGS	(AHCI_HFLAG_MSIX | AHCI_HFLAG_NO_MSI),
+		.flags		= AHCI_FLAG_COMMON,
+		.pio_mask	= ATA_PIO4,
+		.udma_mask	= ATA_UDMA6,
+		.port_ops	= &ahci_ops,
+	},
 };
 
 static const struct pci_device_id ahci_pci_tbl[] = {
@@ -483,6 +492,10 @@ static const struct pci_device_id ahci_pci_tbl[] = {
 	/* Enmotus */
 	{ PCI_DEVICE(0x1c44, 0x8000), board_ahci },
 
+	/* Cavium */
+	{ PCI_DEVICE(0x177d, 0xa01c),
+	  .driver_data = board_ahci_cavium },
+
 	/* Generic, PCI class code for AHCI */
 	{ PCI_ANY_ID, PCI_ANY_ID, PCI_ANY_ID, PCI_ANY_ID,
 	  PCI_CLASS_STORAGE_SATA_AHCI, 0xffffff, board_ahci },
@@ -1192,8 +1205,27 @@ static inline void ahci_gtf_filter_workaround(struct ata_host *host)
 static int ahci_init_interrupts(struct pci_dev *pdev, unsigned int n_ports,
 				struct ahci_host_priv *hpriv)
 {
-	int rc, nvec;
+	int rc, nvec, vec;
+
+	if (!(hpriv->flags & AHCI_HFLAG_MSIX))
+		goto msi;
+
+	nvec = pci_msix_vec_count(pdev);
+	if (!nvec)
+		goto msi;
+	hpriv->msix_entries = kcalloc(nvec, sizeof(struct msix_entry),
+			                                   GFP_KERNEL);
+	for (vec = 0; vec < nvec; vec++)
+                hpriv->msix_entries[vec].entry = vec;
+
+	rc = pci_enable_msix(pdev, hpriv->msix_entries, nvec);
+	if (rc < 0)
+		goto msi;
+	
+	pdev->irq = hpriv->msix_entries[0].vector;
+	return nvec;
 
+msi:
 	if (hpriv->flags & AHCI_HFLAG_NO_MSI)
 		goto intx;
 
@@ -1338,8 +1370,10 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	if (pdev->vendor == PCI_VENDOR_ID_STMICRO && pdev->device == 0xCC06)
 		ahci_pci_bar = AHCI_PCI_BAR_STA2X11;
 	else if (pdev->vendor == 0x1c44 && pdev->device == 0x8000)
-		ahci_pci_bar = AHCI_PCI_BAR_ENMOTUS;
-
+		ahci_pci_bar = AHCI_PCI_BAR_ENMOTUS; 
+	else if (pdev->vendor == 0x177d && pdev->device == 0xa01c)
+		ahci_pci_bar = AHCI_PCI_BAR_CAVIUM;
+ 
 	/* acquire resources */
 	rc = pcim_enable_device(pdev);
 	if (rc)
@@ -1452,6 +1486,10 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	if (n_msis > 1)
 		hpriv->flags |= AHCI_HFLAG_MULTI_MSI;
 
+	/* Cavium Thunder doesn't have per port MSI-X irq */
+	if (board_id == board_ahci_cavium)
+		hpriv->flags &= ~AHCI_HFLAG_MULTI_MSI;
+
 	host = ata_host_alloc_pinfo(&pdev->dev, ppi, n_ports);
 	if (!host)
 		return -ENOMEM;
diff --git a/drivers/ata/ahci.h b/drivers/ata/ahci.h
index 05882e4..59734ed 100644
--- a/drivers/ata/ahci.h
+++ b/drivers/ata/ahci.h
@@ -39,6 +39,7 @@
 #include <linux/libata.h>
 #include <linux/phy/phy.h>
 #include <linux/regulator/consumer.h>
+#include <linux/pci.h>
 
 /* Enclosure Management Control */
 #define EM_CTRL_MSG_TYPE              0x000f0000
@@ -238,6 +239,7 @@ enum {
 	AHCI_HFLAG_MULTI_MSI		= (1 << 16), /* multiple PCI MSIs */
 	AHCI_HFLAG_NO_DEVSLP		= (1 << 17), /* no device sleep */
 	AHCI_HFLAG_NO_FBS		= (1 << 18), /* no FBS */
+	AHCI_HFLAG_MSIX			= (1 << 19), /* PCI MSIX  */
 
 	/* ap->flags bits */
 
@@ -331,6 +333,7 @@ struct ahci_host_priv {
 	struct clk		*clks[AHCI_MAX_CLKS]; /* Optional */
 	struct regulator	*target_pwr;	/* Optional */
 	struct phy		*phy;		/* If platform uses phy */
+	struct msix_entry  	*msix_entries;
 	void			*plat_data;	/* Other platform data */
 	/*
 	 * Optional ahci_start_engine override, if not set this gets set to the
-- 
1.7.5.4

