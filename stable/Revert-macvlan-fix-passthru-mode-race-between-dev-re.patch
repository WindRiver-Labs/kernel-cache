From 71c9ed4d9325abfef22f7815aa1937afe7f4b6e8 Mon Sep 17 00:00:00 2001
From: Paul Gortmaker <paul.gortmaker@windriver.com>
Date: Fri, 27 Sep 2013 09:18:30 -0400
Subject: [PATCH] Revert "macvlan: fix passthru mode race between dev removal
 and rx path"

This reverts commit f2f17ef7c7a9ac2a9ed1160c768c67d2cf86b8d5.

It also contained RCU changes for which we would rather apply the
original RCU commit in order to get them, vs. bundling them with
a drivers/net patch.

Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
---
 drivers/net/macvlan.c   |  7 +++----
 include/linux/rculist.h | 17 -----------------
 2 files changed, 3 insertions(+), 21 deletions(-)

diff --git a/drivers/net/macvlan.c b/drivers/net/macvlan.c
index 7160523..956a5ed 100644
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@ -205,8 +205,7 @@ static rx_handler_result_t macvlan_handle_frame(struct sk_buff **pskb)
 	}
 
 	if (port->passthru)
-		vlan = list_first_or_null_rcu(&port->vlans,
-					      struct macvlan_dev, list);
+		vlan = list_first_entry(&port->vlans, struct macvlan_dev, list);
 	else
 		vlan = macvlan_hash_lookup(port, eth->h_dest);
 	if (vlan == NULL)
@@ -725,7 +724,7 @@ int macvlan_common_newlink(struct net *src_net, struct net_device *dev,
 	if (err < 0)
 		goto destroy_port;
 
-	list_add_tail_rcu(&vlan->list, &port->vlans);
+	list_add_tail(&vlan->list, &port->vlans);
 	netif_stacked_transfer_operstate(lowerdev, dev);
 
 	return 0;
@@ -751,7 +750,7 @@ void macvlan_dellink(struct net_device *dev, struct list_head *head)
 {
 	struct macvlan_dev *vlan = netdev_priv(dev);
 
-	list_del_rcu(&vlan->list);
+	list_del(&vlan->list);
 	unregister_netdevice_queue(dev, head);
 }
 EXPORT_SYMBOL_GPL(macvlan_dellink);
diff --git a/include/linux/rculist.h b/include/linux/rculist.h
index 6f95e24..d079290 100644
--- a/include/linux/rculist.h
+++ b/include/linux/rculist.h
@@ -242,23 +242,6 @@ static inline void list_splice_init_rcu(struct list_head *list,
 	list_entry_rcu((ptr)->next, type, member)
 
 /**
- * list_first_or_null_rcu - get the first element from a list
- * @ptr:        the list head to take the element from.
- * @type:       the type of the struct this is embedded in.
- * @member:     the name of the list_struct within the struct.
- *
- * Note that if the list is empty, it returns NULL.
- *
- * This primitive may safely run concurrently with the _rcu list-mutation
- * primitives such as list_add_rcu() as long as it's guarded by rcu_read_lock().
- */
-#define list_first_or_null_rcu(ptr, type, member) \
-	({struct list_head *__ptr = (ptr); \
-	  struct list_head __rcu *__next = list_next_rcu(__ptr); \
-	  likely(__ptr != __next) ? container_of(__next, type, member) : NULL; \
-	})
-
-/**
  * list_for_each_entry_rcu	-	iterate over rcu list of given type
  * @pos:	the type * to use as a loop cursor.
  * @head:	the head for your list.
-- 
1.8.3.1

