From 2ea809a0166ee578bf3fbf342ae3927cf256a020 Mon Sep 17 00:00:00 2001
From: Tonyliu <Bo.Liu@windriver.com>
Date: Thu, 5 Nov 2009 17:53:31 +0800
Subject: [PATCH 9/9] PM: add suspend/resume for DaVinci EMAC

Add suspend/resume methods for PM.

Signed-off-by: Tonyliu <Bo.Liu@windriver.com>
---
 drivers/net/davinci_emac.c |   40 ++++++++++++++++++++++++++++++++++++++++
 1 files changed, 40 insertions(+), 0 deletions(-)

diff --git a/drivers/net/davinci_emac.c b/drivers/net/davinci_emac.c
index edcf504..544a427 100644
--- a/drivers/net/davinci_emac.c
+++ b/drivers/net/davinci_emac.c
@@ -2795,6 +2795,44 @@ static int __devexit davinci_emac_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM
+static int davinci_emac_suspend(struct platform_device *pdev,
+		pm_message_t state)
+{
+	struct net_device *ndev = platform_get_drvdata(pdev);
+
+	/*Idle/Disabled state This mode stops the clocks going to
+	 * the peripheral, and prevents all the register accesses
+	 */
+	if (netif_running(ndev)) {
+		netif_device_detach(ndev);
+		clk_disable(emac_clk);
+	}
+
+	return 0;
+}
+
+static int davinci_emac_resume(struct platform_device *pdev)
+{
+	struct net_device *ndev = platform_get_drvdata(pdev);
+
+	/*After reenabling the peripheral from this idle state,
+	 * all the registers values prior to setting into the disabled
+	 * state are restored, and data transmission can proceed.
+	 * No reinitialization is required
+	 */
+	if (netif_running(ndev)) {
+		clk_enable(emac_clk);
+		netif_device_attach(ndev);
+	}
+
+	return 0;
+}
+#else
+#define davinci_emac_suspend    NULL
+#define davinci_emac_resume     NULL
+#endif
+
 /**
  * davinci_emac_driver: EMAC platform driver structure
  *
@@ -2808,6 +2846,8 @@ static struct platform_driver davinci_emac_driver = {
 	},
 	.probe = davinci_emac_probe,
 	.remove = __devexit_p(davinci_emac_remove),
+	.suspend = davinci_emac_suspend,
+	.resume = davinci_emac_resume,
 };
 
 /**
-- 
1.6.5.2

