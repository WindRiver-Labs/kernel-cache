Prevent prefetch optimization for ARM

Some ARM kernels have been experiencing bugs/boot issues due
to optimization. In particular, code such as "prefetch(next)" in a
loop, causes the compiler to conclude that next can never be a
NULL pointer (because it got dereferenced), and thus optimize the
loop's test into while(1).

A more complete reference is at:

http://mirror.celinuxforum.org/gitstat/sendmail.php?mail=nico@cam.org&commit=02828845dda5ccf921ab2557c6ca17b6e7fc70e2

Because the constraint to the inline asm used in the prefetch() macro
is a memory operand, gcc assumes that the asm code does dereference the
pointer and the delete-null-pointer-checks optimization kicks in.
Inspection of generated assembly for the above example shows that
bar() is indeed called unconditionally without any test on the value
of x.

Of course in the prefetch case there is no real dereference and it
cannot be assumed that a null pointer would have been caught at that
point. This causes kernel oopses with constructs like
hlist_for_each_entry() where the list's 'next' content is prefetched
before the pointer is tested against NULL, and only when gcc feels
like applying this optimization which doesn't happen all the time
with more complex code.

It appears that the way to prevent delete-null-pointer-checks
optimization to occur in this case is to make prefetch() into a static
inline function instead of a macro. At least this is what is done on
x86_64 where a similar inline asm memory operand is used (I presume
they would have seen the same problem if it didn't work) and resulting
code for the above example confirms that.

An alternative would consist of replacing the memory operand by a
register operand containing the pointer, and use the addressing mode
explicitly in the asm template. But that would be less optimal than an
offsettable memory reference.

Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>

diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index 8f3dfca..8083a74 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -30,6 +30,7 @@ endif
 ifeq ($(CONFIG_FRAME_POINTER),y)
 KBUILD_CFLAGS	+=-fno-omit-frame-pointer -mapcs -mno-sched-prolog
 endif
+KBUILD_CFLAGS	+=-fno-delete-null-pointer-checks
 
 ifeq ($(CONFIG_CPU_BIG_ENDIAN),y)
 KBUILD_CPPFLAGS	+= -mbig-endian

