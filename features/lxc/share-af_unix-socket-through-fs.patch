From cd44ade2c8b89e3ffe2e1fff3c9761da05b889d6 Mon Sep 17 00:00:00 2001
From: Daniel Lezcano <daniel.lezcano@free.fr>
Date: Fri, 15 Jul 2011 10:26:59 -0400
Subject: [PATCH 2/2] share af_unix socket through fs

This patch allows to connect to a socket belonging to another
network namespace but visible via the file system.
The 'host' network namespace has to allow another network
namespace to use its sockets via sysctl:

echo 1 > /proc/sys/net/unix/share_via_fs

Signed-off-by: Daniel Lezcano <daniel.lezcano@free.fr>
---
 include/linux/sysctl.h     |    1 +
 include/net/netns/unix.h   |    1 +
 net/unix/af_unix.c         |    4 +++-
 net/unix/sysctl_net_unix.c |    8 ++++++++
 4 files changed, 13 insertions(+), 1 deletions(-)

diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index 321a4d6..57f609f 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -288,6 +288,7 @@ enum
 	NET_UNIX_DESTROY_DELAY=1,
 	NET_UNIX_DELETE_DELAY=2,
 	NET_UNIX_MAX_DGRAM_QLEN=3,
+	NET_UNIX_SHARE_VIA_FS=4,
 };
 
 /* /proc/sys/net/netfilter */
diff --git a/include/net/netns/unix.h b/include/net/netns/unix.h
index 284649d..6b76a56 100644
--- a/include/net/netns/unix.h
+++ b/include/net/netns/unix.h
@@ -7,6 +7,7 @@
 struct ctl_table_header;
 struct netns_unix {
 	int			sysctl_max_dgram_qlen;
+	bool                    sysctl_share_via_fs;
 	struct ctl_table_header	*ctl;
 };
 
diff --git a/net/unix/af_unix.c b/net/unix/af_unix.c
index 207a119..fbe1442 100644
--- a/net/unix/af_unix.c
+++ b/net/unix/af_unix.c
@@ -292,7 +292,8 @@ static struct sock *unix_find_socket_byinode(struct net *net, struct inode *i)
 		    &unix_socket_table[i->i_ino & (UNIX_HASH_SIZE - 1)]) {
 		struct dentry *dentry = unix_sk(s)->dentry;
 
-		if (!net_eq(sock_net(s), net))
+		if (!sock_net(s)->unx.sysctl_share_via_fs &&
+		    !net_eq(sock_net(s), net))
 			continue;
 
 		if (dentry && dentry->d_inode == i) {
@@ -2265,6 +2266,7 @@ static int __net_init unix_net_init(struct net *net)
 	int error = -ENOMEM;
 
 	net->unx.sysctl_max_dgram_qlen = 10;
+	net->unx.sysctl_share_via_fs = false;
 	if (unix_sysctl_register(net))
 		goto out;
 
diff --git a/net/unix/sysctl_net_unix.c b/net/unix/sysctl_net_unix.c
index 397cffe..3f6c66a 100644
--- a/net/unix/sysctl_net_unix.c
+++ b/net/unix/sysctl_net_unix.c
@@ -23,6 +23,13 @@ static ctl_table unix_table[] = {
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec
 	},
+	{
+		.procname	= "share_via_fs",
+		.data		= &init_net.unx.sysctl_share_via_fs,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec
+	},
 	{ }
 };
 
@@ -41,6 +48,7 @@ int __net_init unix_sysctl_register(struct net *net)
 		goto err_alloc;
 
 	table[0].data = &net->unx.sysctl_max_dgram_qlen;
+	table[1].data = &net->unx.sysctl_share_via_fs;
 	net->unx.ctl = register_net_sysctl_table(net, unix_path, table);
 	if (net->unx.ctl == NULL)
 		goto err_reg;
-- 
1.7.0.4

