From 5880de9f9abdef8471f3e1168f0174573be8acd6 Mon Sep 17 00:00:00 2001
From: Bai Ping <ping.bai@nxp.com>
Date: Wed, 23 Dec 2015 16:52:57 +0800
Subject: [PATCH 1268/1691] MLK-12072 thermal: imx: enable tempmon finish bit
 check on imx7d TO1.1

commit 5880de9f9abdef8471f3e1168f0174573be8acd6 from
git://git.freescale.com/imx/linux-2.6-imx.git imx_4.1.15_1.0.0_ga

On i.MX7D TO1.0, the finish bit in tempmon module used for verify
the temp value is broken, so it can NOT be used for checking the temp
value. On TO1.1, this issue has been fixed, so we can use this bit
to verify if the temp value is valid.

Signed-off-by: Bai Ping <ping.bai@nxp.com>
---
 drivers/thermal/imx_thermal.c | 27 ++++++++++++++++++---------
 1 file changed, 18 insertions(+), 9 deletions(-)

diff --git a/drivers/thermal/imx_thermal.c b/drivers/thermal/imx_thermal.c
index 5cb0882..055cf0b 100644
--- a/drivers/thermal/imx_thermal.c
+++ b/drivers/thermal/imx_thermal.c
@@ -60,6 +60,7 @@
 
 #define OCOTP_MEM0			0x0480
 /* i.MX7D specific */
+#define IMX7_ANADIG_DIGPROG			0x800
 #define IMX7_TEMPSENSE0				0X300
 #define IMX7_TEMPSENSE0_PANIC_ALARM_SHIFT	18
 #define IMX7_TEMPSENSE0_PANIC_ALARM_MASK	(0x1ff << 18)
@@ -234,6 +235,7 @@ struct imx_thermal_data {
 };
 
 static struct imx_thermal_data *imx_thermal_data;
+static int skip_finish_check;
 
 static void imx_set_panic_temp(struct imx_thermal_data *data,
 			       int panic_temp)
@@ -307,13 +309,13 @@ static int imx_get_temp(struct thermal_zone_device *tz, unsigned long *temp)
 	 * to complete a measurement.
 	 */
 	if (wait) {
-
-		/* On i.MX7, according to the design team, the finished bit can
-		 * only keep 1us after the measured data available. It is hard
-		 * for software to polling this bit. So wait for 20ms to make
-		 * sure the measured data is valid.
+		/*
+		 * On i.MX7 TO1.0, the finish bit can only keep 1us after
+		 * the measured data available. It is hard for software to
+		 * polling this bit. So wait for 20ms to make sure the
+		 * measured data is valid.
 		 */
-		if (data->socdata->version == TEMPMON_IMX7)
+		if (data->socdata->version == TEMPMON_IMX7 && skip_finish_check)
 			msleep(20);
 		 else
 			usleep_range(20, 50);
@@ -328,8 +330,7 @@ static int imx_get_temp(struct thermal_zone_device *tz, unsigned long *temp)
 		clk_disable_unprepare(data->thermal_clk);
 	}
 
-	if (data->socdata->version != TEMPMON_IMX7 &&
-	   ((val & soc_data->temp_valid_mask) == 0)) {
+	if (!skip_finish_check && ((val & soc_data->temp_valid_mask) == 0)) {
 		dev_dbg(&tz->device, "temp measurement never finished\n");
 		mutex_unlock(&data->mutex);
 		return -EAGAIN;
@@ -718,7 +719,7 @@ static int imx_thermal_probe(struct platform_device *pdev)
 	struct imx_thermal_data *data;
 	struct regmap *map;
 	int measure_freq;
-	int ret;
+	int ret, revision;
 
 	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
 	if (!data)
@@ -759,6 +760,14 @@ static int imx_thermal_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	/*
+	 * for i.MX7D TO1.0, finish bit is not available, check the
+	 * SOC revision to skip checking the finish bit status.
+	 */
+	regmap_read(map, IMX7_ANADIG_DIGPROG, &revision);
+	if ((revision & 0xff) == 0x10)
+		skip_finish_check = 1;
+
 	/* Make sure sensor is in known good state for measurements */
 	regmap_write(map, data->socdata->sensor_ctrl + REG_CLR,
 		     data->socdata->power_down_mask);
-- 
1.9.1

