From 1f6b80b720571fa1a7ac541b5d2f66c42ded89a3 Mon Sep 17 00:00:00 2001
From: Wang Quanyang <quanyang.wang@windriver.com>
Date: Wed, 5 Apr 2017 16:17:00 +0800
Subject: [PATCH] mxc IPUv3: device: Change ipu_task_entry split_lock to
 spinlock

Change ipu_task_entry lock to spinlock, since the lock is
used in wait_event_timeout() via sp_task_check_done. This
caused a warning report as below.

WARNING: CPU: 0 PID: 62 at /kernel-source/kernel/sched/core.c:7843 __might_sleep+0x98/0xa8
do not call blocking ops when !TASK_RUNNING; state=2 set at [<80171068>] prepare_to_wait_event+0xbc/0xfc
Modules linked in: twofish_generic twofish_common camellia_generic serpent_generic blowfish_generic blowfish_common cast5_generic cast_common cmac sha512_generic af_key ov5640_camera_mipi_int ov5640_camera_int iwlwifi cfg80211 softdog
CPU: 0 PID: 62 Comm: ipu2_task Not tainted 4.8.20-rt10-WR9.0.0.5_preempt-rt #1
Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
[<80112804>] (unwind_backtrace) from [<8010c670>] (show_stack+0x20/0x24)
[<8010c670>] (show_stack) from [<804f6450>] (dump_stack+0x78/0x94)
[<804f6450>] (dump_stack) from [<8012f5f4>] (__warn+0xf0/0x110)
[<8012f5f4>] (__warn) from [<8012f65c>] (warn_slowpath_fmt+0x48/0x50)
[<8012f65c>] (warn_slowpath_fmt) from [<80157224>] (__might_sleep+0x98/0xa8)
[<80157224>] (__might_sleep) from [<809acf64>] (rt_mutex_lock+0x2c/0x88)
[<809acf64>] (rt_mutex_lock) from [<809aebec>] (_mutex_lock+0x18/0x1c)
[<809aebec>] (_mutex_lock) from [<807c495c>] (ipu_task_thread+0x72c/0xbd8)
[<807c495c>] (ipu_task_thread) from [<8014f790>] (kthread+0xf4/0x108)
[<8014f790>] (kthread) from [<801075e0>] (ret_from_fork+0x14/0x34)

Signed-off-by: Wang Quanyang <quanyang.wang@windriver.com>
---
 drivers/mxc/ipu3/ipu_device.c |   24 ++++++++++++------------
 1 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/mxc/ipu3/ipu_device.c b/drivers/mxc/ipu3/ipu_device.c
index c6cfc97..144d34bb 100644
--- a/drivers/mxc/ipu3/ipu_device.c
+++ b/drivers/mxc/ipu3/ipu_device.c
@@ -285,7 +285,7 @@ struct ipu_task_entry {
 	u8	ipu_id;
 	u8	task_in_list;
 	u8	split_done;
-	struct mutex split_lock;
+	spinlock_t split_lock;
 	struct mutex vdic_lock;
 	wait_queue_head_t split_waitq;
 
@@ -1508,10 +1508,10 @@ static inline int sp_task_check_done(struct ipu_split_task *sp_task,
 	int i;
 	int ret = 0;
 	struct ipu_task_entry *tsk;
-	struct mutex *lock = &parent->split_lock;
+	spinlock_t *lock = &parent->split_lock;
 
 	*idx = -EINVAL;
-	mutex_lock(lock);
+	spin_lock(lock);
 	for (i = 0; i < num; i++) {
 		tsk = sp_task[i].child_task;
 		if (tsk && tsk->split_done) {
@@ -1522,7 +1522,7 @@ static inline int sp_task_check_done(struct ipu_split_task *sp_task,
 	}
 
 out:
-	mutex_unlock(lock);
+	spin_unlock(lock);
 	return ret;
 }
 
@@ -1718,12 +1718,12 @@ static int queue_split_task(struct ipu_task_entry *t,
 	int ret = 0;
 	int i, j;
 	struct ipu_task_entry *tsk = NULL;
-	struct mutex *lock = &t->split_lock;
+	spinlock_t *lock = &t->split_lock;
 	struct mutex *vdic_lock = &t->vdic_lock;
 
 	dev_dbg(t->dev, "Split task 0x%p, no-0x%x, size:%d\n",
 			 t, t->task_no, size);
-	mutex_init(lock);
+	spin_lock_init(lock);
 	mutex_init(vdic_lock);
 	init_waitqueue_head(&t->split_waitq);
 	INIT_LIST_HEAD(&t->split_list);
@@ -3036,7 +3036,7 @@ static void get_res_do_task(struct ipu_task_entry *t)
 {
 	uint32_t	found;
 	uint32_t	split_child;
-	struct mutex	*lock;
+	spinlock_t	*lock;
 
 	found = get_vdoa_ipu_res(t);
 	if (!found) {
@@ -3063,9 +3063,9 @@ static void get_res_do_task(struct ipu_task_entry *t)
 	split_child = need_split(t) && t->parent;
 	if (split_child) {
 		lock = &t->parent->split_lock;
-		mutex_lock(lock);
+		spin_lock(lock);
 		t->split_done = 1;
-		mutex_unlock(lock);
+		spin_unlock(lock);
 		wake_up(&t->parent->split_waitq);
 	}
 
@@ -3079,7 +3079,7 @@ static void wait_split_task_complete(struct ipu_task_entry *parent,
 	int ret = 0, rc;
 	int j, idx = -1;
 	unsigned long flags;
-	struct mutex *lock = &parent->split_lock;
+	spinlock_t *lock = &parent->split_lock;
 	int k, busy_vf, busy_pp;
 	struct ipu_soc *ipu;
 	DECLARE_PERF_VAR;
@@ -3104,13 +3104,13 @@ static void wait_split_task_complete(struct ipu_task_entry *parent,
 				continue;
 			}
 			tsk = sp_task[idx].child_task;
-			mutex_lock(lock);
+			spin_lock(lock);
 			if (!tsk->split_done || !tsk->ipu)
 				dev_err(tsk->dev,
 				"ERR:no-0x%x,split not done:%d/null ipu:0x%p\n",
 				 tsk->task_no, tsk->split_done, tsk->ipu);
 			tsk->split_done = 0;
-			mutex_unlock(lock);
+			spin_unlock(lock);
 
 			dev_dbg(tsk->dev,
 				"[0x%p] no-0x%x sp_tsk[%d] done,state:%d.\n",
-- 
1.7.5.4

