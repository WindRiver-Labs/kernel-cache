From eb869b7d7bc59182babd9a953bc278715504cf4e Mon Sep 17 00:00:00 2001
From: Robin Gong <b38343@freescale.com>
Date: Fri, 7 Aug 2015 13:10:28 +0800
Subject: [PATCH 0464/1691] MLK-11358-5: dma: imx-sdma: add overide cyclic
 callback for virtual dma

commit eb869b7d7bc59182babd9a953bc278715504cf4e from
git://git.freescale.com/imx/linux-2.6-imx.git imx_4.1.15_1.0.0_ga

In some high loading case, some BDs done interrupt may not be handled timely
because of high loading, for example:
1).No.1 BD done interrupt pending.
2).No.2 BD done interrupt trigged, and be handled in time.
3).found No.1 and No.2 bds finished, set BD_DONE to prepare for next time.
4).call vchan_cyclic_callback twice to tasklet_schedule(). But unfortunately,
  only one tasklet can be scheduled one time. And SDMA interrupt will never be
  trigged again for No.2 or No.1 BD. That means one callback loss.

To fix the above case, extend override callback in virt dma framework, so that
sdma driver can do some specific job before every callback:
1).No.1 BD done interrupt pending.
2).No.2 BD done interrupt trigged, and be handled in time.
3).call vchan_cyclic_callback to tasklet_schedule().
4) vchan_complete() call overide_callback
5) found No.1 BD done, set BD_DONE  and call desc->vd.tx.callback
6) found No.2 BD done, set BD_DONE  and call desc->vd.tx.callback, no callback
  missed here.

Signed-off-by: Robin Gong <b38343@freescale.com>
---
 drivers/dma/imx-sdma.c | 19 ++++++++++++-------
 drivers/dma/virt-dma.c |  8 ++++++--
 drivers/dma/virt-dma.h |  3 +++
 3 files changed, 21 insertions(+), 9 deletions(-)

diff --git a/drivers/dma/imx-sdma.c b/drivers/dma/imx-sdma.c
index b6f2af4..5b8cc0a 100644
--- a/drivers/dma/imx-sdma.c
+++ b/drivers/dma/imx-sdma.c
@@ -740,13 +740,16 @@ static void sdma_event_disable(struct sdma_channel *sdmac, unsigned int event)
 static void sdma_handle_channel_loop(struct sdma_channel *sdmac)
 {
 	struct sdma_buffer_descriptor *bd;
-	struct sdma_desc *desc = sdmac->desc;
+	struct sdma_desc *desc;
+	unsigned long flags;
 
 	/*
 	 * loop mode. Iterate over descriptors, re-setup them and
 	 * call callback function.
 	 */
-	while (1) {
+	spin_lock_irqsave(&sdmac->vc.lock, flags);
+	while (sdmac->desc) {
+		desc = sdmac->desc;
 		bd = &desc->bd[desc->buf_tail];
 
 		if (bd->mode.status & BD_DONE)
@@ -764,8 +767,11 @@ static void sdma_handle_channel_loop(struct sdma_channel *sdmac)
 			bd->mode.count = desc->des_count;
 		}
 
-		vchan_cyclic_callback(&desc->vd);
+		spin_unlock_irqrestore(&sdmac->vc.lock, flags);
+		desc->vd.tx.callback(desc->vd.tx.callback_param);
+		spin_lock_irqsave(&sdmac->vc.lock, flags);
 	}
+	spin_unlock_irqrestore(&sdmac->vc.lock, flags);
 }
 
 static void mxc_sdma_handle_channel_normal(struct sdma_channel *sdmac)
@@ -813,10 +819,7 @@ static irqreturn_t sdma_int_handler(int irq, void *dev_id)
 		desc = sdmac->desc;
 		if (desc) {
 			if (sdmac->flags & IMX_DMA_SG_LOOP) {
-				if (sdmac->peripheral_type == IMX_DMATYPE_HDMI)
-					vchan_cyclic_callback(&desc->vd);
-				else
-					sdma_handle_channel_loop(sdmac);
+				vchan_cyclic_callback(&desc->vd);
 			} else {
 				mxc_sdma_handle_channel_normal(sdmac);
 				vchan_cookie_complete(&desc->vd);
@@ -1635,6 +1638,8 @@ static struct dma_async_tx_descriptor *sdma_prep_dma_cyclic(
 		return vchan_tx_prep(&sdmac->vc, &desc->vd, flags);
 
 	desc->buf_tail = 0;
+	desc->vd.overide_callback = (void *)sdma_handle_channel_loop;
+	desc->vd.overide_param = sdmac;
 
 	if (period_len > SDMA_BD_MAX_CNT) {
 		dev_err(sdma->dev, "SDMA channel %d: maximum period size exceeded: %zu > %d\n",
diff --git a/drivers/dma/virt-dma.c b/drivers/dma/virt-dma.c
index 6f80432..0541ed8 100644
--- a/drivers/dma/virt-dma.c
+++ b/drivers/dma/virt-dma.c
@@ -74,8 +74,12 @@ static void vchan_complete(unsigned long arg)
 	}
 	spin_unlock_irq(&vc->lock);
 
-	if (cb)
-		cb(cb_data);
+	if (cb) {
+		if (vd->overide_callback)
+			vd->overide_callback(vd->overide_param);
+		else
+			cb(cb_data);
+	}
 
 	while (!list_empty(&head)) {
 		vd = list_first_entry(&head, struct virt_dma_desc, node);
diff --git a/drivers/dma/virt-dma.h b/drivers/dma/virt-dma.h
index 181b952..d429e63 100644
--- a/drivers/dma/virt-dma.h
+++ b/drivers/dma/virt-dma.h
@@ -19,6 +19,9 @@ struct virt_dma_desc {
 	struct dma_async_tx_descriptor tx;
 	/* protected by vc.lock */
 	struct list_head node;
+
+	void (*overide_callback) (void *overide_param);
+	void *overide_param;
 };
 
 struct virt_dma_chan {
-- 
1.9.1

