From 0af42ed1baf82afc0b39c794716ae17172848684 Mon Sep 17 00:00:00 2001
From: Adrian Alonso <aalonso@freescale.com>
Date: Tue, 2 Jun 2015 15:08:52 -0500
Subject: [PATCH 1505/1691] MLK-11020: arm: imx: caam: imx7d caam_aclk clock
 dependency

commit 0af42ed1baf82afc0b39c794716ae17172848684 from
git://git.freescale.com/imx/linux-2.6-imx.git imx_4.1.15_1.0.0_ga

* Add caam_aclk clock root dependency, imx7d caam
  ip module needs caam_aclk and caam_ipg clock signals
  to operate add additional clock signal.

Signed-off-by: Adrian Alonso <aalonso@freescale.com>
Signed-off-by: Dan Douglass <dan.douglass@freescale.com>
---
 drivers/crypto/caam/ctrl.c | 51 ++++++++++++++++++++++------------------------
 1 file changed, 24 insertions(+), 27 deletions(-)

diff --git a/drivers/crypto/caam/ctrl.c b/drivers/crypto/caam/ctrl.c
index 3de23f5..c811674 100644
--- a/drivers/crypto/caam/ctrl.c
+++ b/drivers/crypto/caam/ctrl.c
@@ -307,10 +307,10 @@ static int caam_remove(struct platform_device *pdev)
 #ifdef CONFIG_ARM
 	/* shut clocks off before finalizing shutdown */
 	clk_disable_unprepare(ctrlpriv->caam_ipg);
-	/* imx7d only has one caam clock */
+	clk_disable_unprepare(ctrlpriv->caam_aclk);
+	/* imx7d only has two caam clock */
 	if (!(of_find_compatible_node(NULL, NULL, "fsl,imx7d-caam"))) {
 		clk_disable_unprepare(ctrlpriv->caam_mem);
-		clk_disable_unprepare(ctrlpriv->caam_aclk);
 		clk_disable_unprepare(ctrlpriv->caam_emi_slow);
 	}
 #endif
@@ -427,7 +427,6 @@ static int caam_probe(struct platform_device *pdev)
 	struct device_node *nprop, *np;
 	struct caam_ctrl __iomem *ctrl;
 	struct caam_drv_private *ctrlpriv;
-	struct clk *clk;
 #ifdef CONFIG_DEBUG_FS
 	struct caam_perfmon *perfmon;
 #endif
@@ -451,7 +451,7 @@ static int caam_probe(struct platform_device *pdev)
 	if (ctrl == NULL) {
 		dev_err(dev, "caam: of_iomap() failed\n");
 		ret = -ENOMEM;
-		goto disable_caam_emi_slow;
+		goto iounmap_ctrl;
 	}
 
 	caam_little_end = !(bool)(rd_reg32(&ctrl->perfmon.status) &
@@ -499,21 +499,30 @@ static int caam_probe(struct platform_device *pdev)
 			"can't identify CAAM ipg clk: %d\n", ret);
 		return -ENODEV;
 	}
-	ret = clk_prepare(ctrlpriv->caam_ipg);
-	if (ret < 0) {
-		dev_err(&pdev->dev, "can't prepare CAAM ipg clock: %d\n", ret);
-		return -ENODEV;
-	}
-	ret = clk_enable(ctrlpriv->caam_ipg);
+	ret = clk_prepare_enable(ctrlpriv->caam_ipg);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "can't enable CAAM ipg clock: %d\n", ret);
 		return -ENODEV;
 	}
-
 	pr_debug("%s caam_ipg clock:%d\n", __func__,
 			 (int)clk_get_rate(ctrlpriv->caam_ipg));
 
-	/* imx7d only has one caam clock */
+	ctrlpriv->caam_aclk = devm_clk_get(&ctrlpriv->pdev->dev, "caam_aclk");
+	if (IS_ERR(ctrlpriv->caam_aclk)) {
+		ret = PTR_ERR(ctrlpriv->caam_aclk);
+		dev_err(&ctrlpriv->pdev->dev,
+			"can't identify CAAM aclk clk: %d\n", ret);
+			goto disable_caam_ipg;
+	}
+	ret = clk_prepare_enable(ctrlpriv->caam_aclk);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "can't enable CAAM aclk clock: %d\n", ret);
+			goto disable_caam_ipg;
+	}
+	pr_debug("%s caam_aclk clock:%d\n", __func__,
+			(int)clk_get_rate(ctrlpriv->caam_aclk));
+
+	/* imx7d only has two caam clock */
 	if (!(of_find_compatible_node(NULL, NULL, "fsl,imx7d-caam"))) {
 		ctrlpriv->caam_mem = devm_clk_get(&ctrlpriv->pdev->dev,
 						  "caam_mem");
@@ -522,55 +531,33 @@ static int caam_probe(struct platform_device *pdev)
 			dev_err(&ctrlpriv->pdev->dev,
 					"can't identify CAAM secure mem clk: %d\n",
 					ret);
-			return -ENODEV;
+			goto disable_caam_aclk;
 		}
-		ret = clk_prepare(ctrlpriv->caam_mem);
-		if (ret < 0) {
-			dev_err(&pdev->dev, "can't prepare CAAM secure mem clock: %d\n",
-					ret);
-			return -ENODEV;
-		}
-		ret = clk_enable(ctrlpriv->caam_mem);
+		ret = clk_prepare_enable(ctrlpriv->caam_mem);
 		if (ret < 0) {
 			dev_err(&pdev->dev, "can't enable CAAM secure mem clock: %d\n",
 					ret);
-			return -ENODEV;
+			goto disable_caam_aclk;
 		}
 		pr_debug("%s caam_mem clock:%d\n", __func__,
 				 (int)clk_get_rate(ctrlpriv->caam_mem));
-		ctrlpriv->caam_aclk = devm_clk_get(&ctrlpriv->pdev->dev,
-						   "caam_aclk");
-		if (IS_ERR(ctrlpriv->caam_aclk)) {
-			ret = PTR_ERR(ctrlpriv->caam_aclk);
-			dev_err(&ctrlpriv->pdev->dev,
-					"can't identify CAAM aclk clk: %d\n",
-					ret);
-			return -ENODEV;
-		}
-		ret = clk_prepare(ctrlpriv->caam_aclk);
-		if (ret < 0) {
-			dev_err(&pdev->dev,
-					"can't prepare CAAM aclk clock: %d\n",
-					ret);
-			return -ENODEV;
-		}
-		ret = clk_enable(ctrlpriv->caam_aclk);
-		if (ret < 0) {
-			dev_err(&pdev->dev, "can't enable CAAM aclk clock: %d\n",
-					ret);
-			return -ENODEV;
-		}
-		pr_debug("%s caam_aclk clock:%d\n", __func__,
-				 (int)clk_get_rate(ctrlpriv->caam_aclk));
+
 		if (!(of_find_compatible_node(NULL, NULL, "fsl,imx6ul-caam"))) {
 			ctrlpriv->caam_emi_slow = devm_clk_get(&ctrlpriv->pdev->dev,
 							       "caam_emi_slow");
+			if (IS_ERR(ctrlpriv->caam_emi_slow)) {
+				ret = PTR_ERR(ctrlpriv->caam_emi_slow);
+				dev_err(&ctrlpriv->pdev->dev,
+						"can't identify CAAM secure emi slow clk: %d\n",
+						ret);
+				goto disable_caam_mem;
+			}
 			ret = clk_prepare_enable(ctrlpriv->caam_emi_slow);
 			if (ret < 0) {
 				dev_err(&pdev->dev,
 					"can'to prepare CAAM emi slow clock: %d\n",
 					ret);
-				return -ENODEV;
+				goto disable_caam_mem;
 			}
 		}
 	}
@@ -650,7 +637,7 @@ static int caam_probe(struct platform_device *pdev)
 					sizeof(*ctrlpriv->jrpdev), GFP_KERNEL);
 	if (ctrlpriv->jrpdev == NULL) {
 		ret = -ENOMEM;
-		goto iounmap_ctrl;
+		goto disable_caam_emi_slow;
 	}
 
 	ring = 0;
@@ -866,16 +853,16 @@ static int caam_probe(struct platform_device *pdev)
 
 caam_remove:
 	caam_remove(pdev);
-iounmap_ctrl:
-	iounmap(ctrl);
 disable_caam_emi_slow:
 	clk_disable_unprepare(ctrlpriv->caam_emi_slow);
-disable_caam_aclk:
-	clk_disable_unprepare(ctrlpriv->caam_aclk);
 disable_caam_mem:
 	clk_disable_unprepare(ctrlpriv->caam_mem);
+disable_caam_aclk:
+	clk_disable_unprepare(ctrlpriv->caam_aclk);
 disable_caam_ipg:
 	clk_disable_unprepare(ctrlpriv->caam_ipg);
+iounmap_ctrl:
+	iounmap(ctrl);
 	return ret;
 }
 
-- 
1.9.1

