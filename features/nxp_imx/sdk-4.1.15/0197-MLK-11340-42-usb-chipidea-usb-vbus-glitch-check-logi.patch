From 7d05fa49c2651decdc3eb3606a4a0efa2b6a180a Mon Sep 17 00:00:00 2001
From: Li Jun <B47624@freescale.com>
Date: Wed, 10 Sep 2014 17:49:33 +0800
Subject: [PATCH 0197/1691] MLK-11340-42 usb: chipidea: usb vbus glitch check
 logic change

commit 7d05fa49c2651decdc3eb3606a4a0efa2b6a180a from
git://git.freescale.com/imx/linux-2.6-imx.git imx_4.1.15_1.0.0_ga

This patch changes the vbus glitch check to cover usb otg certification
case, so the possible cases of vbus rise:
- USB vbus can reach AVV(4.4v), valid vbus.
- USB vbus keeps above BSV(0.8v) but lower than AVV(4.4v) for
  more than 300ms, we think it's valid vbus event, this can meet
  usb otg certificataion case(B device can do connection in 1s when
  vbus is 4.0v).
- USB vbus cannot be kept above BSV(0.8v) for more than 300ms,
  it's a vbus glitch.
In case of vbus drop: if the vbus on flag is not set, it's a vbus glitch,
otherwise it's a valid vbus drop event.

Acked-by: Peter Chen <peter.chen@freescale.com>
Signed-off-by: Li Jun <b47624@freescale.com>
(cherry picked from commit de5ab444839b6d1492d697256ea2b8a1dcaffc62)
(cherry picked from commit 83788415169cfa1555dd348a9ff03deb66b08bad)
---
 drivers/usb/chipidea/otg.c     | 36 ++++++++++++++++++++----------------
 drivers/usb/chipidea/otg_fsm.c |  4 +++-
 2 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/drivers/usb/chipidea/otg.c b/drivers/usb/chipidea/otg.c
index 7b9e417..78fbf02 100644
--- a/drivers/usb/chipidea/otg.c
+++ b/drivers/usb/chipidea/otg.c
@@ -57,22 +57,27 @@ enum ci_role ci_otg_role(struct ci_hdrc *ci)
 	return role;
 }
 
-#define CI_VBUS_CONNECT_TIMEOUT_MS 500
+/*
+ * Handling vbus glitch
+ * We only need to consider glitch for without usb connection,
+ * With usb connection, we consider it as real disconnection.
+ *
+ * If the vbus can't be kept above B session valid for timeout value,
+ * we think it is a vbus glitch, otherwise it's a valid vbus.
+ */
+#define CI_VBUS_CONNECT_TIMEOUT_MS 300
 static int ci_is_vbus_glitch(struct ci_hdrc *ci)
 {
-	/*
-	 * Handling vbus glitch
-	 *
-	 * We only need to consider glitch for without usb connection,
-	 * With usb connection, we consider it as real disconnection.
-	 *
-	 * If the vbus can't higher than AVV in timeout value, we think
-	 * it is a vbus glitch
-	 */
-	if (hw_wait_reg(ci, OP_OTGSC, OTGSC_AVV, OTGSC_AVV,
-			CI_VBUS_CONNECT_TIMEOUT_MS)) {
-		dev_warn(ci->dev, "there is a vbus glitch\n");
-		return 1;
+	int i;
+
+	for (i = 0; i < CI_VBUS_CONNECT_TIMEOUT_MS/20; i++) {
+		if (hw_read_otgsc(ci, OTGSC_AVV)) {
+			return 0;
+		} else if (!hw_read_otgsc(ci, OTGSC_BSV)) {
+			dev_warn(ci->dev, "there is a vbus glitch\n");
+			return 1;
+		}
+		msleep(20);
 	}
 
 	return 0;
@@ -141,8 +146,7 @@ static void ci_handle_vbus_glitch(struct ci_hdrc *ci)
 			valid_vbus_change = true;
 		}
 	} else {
-		if (ci->vbus_active || (ci_otg_is_fsm_mode(ci) &&
-						ci->fsm.b_sess_vld))
+		if (ci->vbus_active && !ci_otg_is_fsm_mode(ci))
 			valid_vbus_change = true;
 	}
 
diff --git a/drivers/usb/chipidea/otg_fsm.c b/drivers/usb/chipidea/otg_fsm.c
index e3886cd..7309640 100644
--- a/drivers/usb/chipidea/otg_fsm.c
+++ b/drivers/usb/chipidea/otg_fsm.c
@@ -800,13 +800,15 @@ irqreturn_t ci_otg_fsm_irq(struct ci_hdrc *ci)
 			}
 		} else if (otg_int_src & OTGSC_BSVIS) {
 			hw_write_otgsc(ci, OTGSC_BSVIS, OTGSC_BSVIS);
-			ci->vbus_glitch_check_event = true;
 			if (!(otgsc & OTGSC_BSV) && fsm->b_sess_vld) {
+				ci->b_sess_valid_event = true;
 				fsm->b_sess_vld = 0;
 				if (fsm->id)
 					ci_otg_add_timer(ci, B_SSEND_SRP);
 				if (fsm->b_bus_req)
 					fsm->b_bus_req = 0;
+			} else {
+				ci->vbus_glitch_check_event = true;
 			}
 		} else if (otg_int_src & OTGSC_AVVIS) {
 			hw_write_otgsc(ci, OTGSC_AVVIS, OTGSC_AVVIS);
-- 
1.9.1

