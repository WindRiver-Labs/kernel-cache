From 79cfe5501a246c2cb7ed69424bbeec5a804aa9c7 Mon Sep 17 00:00:00 2001
From: Yong Zhang <yong.zhang@windriver.com>
Date: Tue, 6 Apr 2010 18:35:28 -0700
Subject: [PATCH 09/11] time: notify processes when time of day is changed

Enabling this will allow apps to register to be sent a signal
whenever the time of day on the system has changed (due to someone
calling settimeofday(), for instance).

This is exposed to userspace via /proc/notify_settime_signal

Signed-off-by: Peter Seebach <peter.seebach@windriver.com>
Integrated-by: Yong Zhang <yong.zhang@windriver.com>
Signed-off-by: Joe MacDonald <joe.macdonald@windriver.com>
---
 fs/exec.c                 |    4 ++
 include/linux/init_task.h |    8 ++++
 include/linux/sched.h     |    3 ++
 include/linux/time.h      |    4 ++
 init/Kconfig              |   10 +++++
 kernel/Makefile           |    1 +
 kernel/hrtimer.c          |   18 ++++++++
 kernel/notify_settime.c   |  104 +++++++++++++++++++++++++++++++++++++++++++++
 8 files changed, 152 insertions(+)
 create mode 100644 kernel/notify_settime.c

diff --git a/fs/exec.c b/fs/exec.c
index e9bea7a..8e55e6a 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1689,6 +1689,10 @@ static int do_execve_common(const char *filename,
 	current->in_execve = 0;
 	acct_update_integrals(current);
 	free_bprm(bprm);
+#ifdef CONFIG_NOTIFY_SETTIME
+	/* there's got to be a better place for this!  */
+	current->settime_sig = 0;
+#endif
 	if (displaced)
 		put_files_struct(displaced);
 	return retval;
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index 39501b2..2588514 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -72,6 +72,13 @@ extern struct nsproxy init_nsproxy;
 #define INIT_SIGEXIT(tsk)
 #endif
 
+#ifdef CONFIG_NOTIFY_SETTIME
+#define INIT_NOTIFY_SETTIME \
+	.settime_sig    = 0,
+#else
+#define INIT_NOTIFY_SETTIME
+#endif
+
 extern struct group_info init_groups;
 
 #define INIT_STRUCT_PID {						\
@@ -216,6 +223,7 @@ extern struct cred init_cred;
 	INIT_TRACE_RECURSION						\
 	INIT_TASK_RCU_PREEMPT(tsk)					\
 	INIT_CPUSET_SEQ							\
+	INIT_NOTIFY_SETTIME						\
 }
 
 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 1256f20..120fc42 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1671,6 +1671,9 @@ struct task_struct {
 	struct uprobe_task *utask;
 	int uprobe_srcu_id;
 #endif
+#ifdef CONFIG_NOTIFY_SETTIME
+	int settime_sig;                /* notify_settime() signal */
+#endif
 };
 
 #define MF_PAX_PAGEEXEC		0x01000000	/* Paging based non-executable pages */
diff --git a/include/linux/time.h b/include/linux/time.h
index eb685e2..ee111d0 100644
--- a/include/linux/time.h
+++ b/include/linux/time.h
@@ -172,6 +172,10 @@ extern int timekeeping_inject_offset(struct timespec *ts);
 
 struct timespec __get_wall_to_monotonic(void); /* does not take xtime_lock */
 
+#ifdef CONFIG_NOTIFY_SETTIME
+extern void do_notify_timechange(void);
+#endif
+
 struct tms;
 extern void do_sys_times(struct tms *);
 
diff --git a/init/Kconfig b/init/Kconfig
index f29ff5b..ccacff2 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1436,6 +1436,16 @@ source "arch/Kconfig"
 config HAVE_LTT_DUMP_TABLES
 	def_bool n
 
+config NOTIFY_SETTIME
+	bool "Notify processes when time of day is changed"
+	default y
+	help
+	  Enabling this will allow apps to register to be sent a signal
+	  whenever the time of day on the system has changed (due to someone
+	  calling settimeofday(), for instance).
+
+	  This is exposed to userspace via /proc/notify_settime_signal
+
 endmenu		# General setup
 
 config HAVE_GENERIC_DMA_COHERENT
diff --git a/kernel/Makefile b/kernel/Makefile
index c04fc8d..760c1eb 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -106,6 +106,7 @@ obj-$(CONFIG_TRACEPOINTS) += trace/
 obj-$(CONFIG_IRQ_WORK) += irq_work.o
 obj-$(CONFIG_CPU_PM) += cpu_pm.o
 obj-$(CONFIG_SIGEXIT) += death_notify.o
+obj-$(CONFIG_NOTIFY_SETTIME) += notify_settime.o
 
 obj-$(CONFIG_PERF_EVENTS) += events/
 
diff --git a/kernel/hrtimer.c b/kernel/hrtimer.c
index 25b6648..cfa283c 100644
--- a/kernel/hrtimer.c
+++ b/kernel/hrtimer.c
@@ -729,6 +729,20 @@ void clock_was_set_delayed(void)
 
 #else
 
+#ifdef CONFIG_NOTIFY_SETTIME
+/*
+ * Clock realtime was set
+ *
+ * Change the offset of the realtime clock vs. the monotonic
+ * clock.  In the absence of high-res timers, that applies only
+ * with CONFIG_NOTIFY_SETTIME.
+ */
+void clock_was_set(void)
+{
+	/* Notify any userspace apps that were interested in the change */
+	do_notify_timechange();
+}
+#endif
 static inline int hrtimer_hres_active(void) { return 0; }
 static inline int hrtimer_is_hres_enabled(void) { return 0; }
 static inline int hrtimer_switch_to_hres(void) { return 0; }
@@ -762,6 +776,10 @@ void clock_was_set(void)
 	/* Retrigger the CPU local events everywhere */
 	on_each_cpu(retrigger_next_event, NULL, 1);
 #endif
+#ifdef CONFIG_NOTIFY_SETTIME
+	/* Notify any userspace apps that were interested in the change */
+	do_notify_timechange();
+#endif
 	timerfd_clock_was_set();
 }
 
diff --git a/kernel/notify_settime.c b/kernel/notify_settime.c
new file mode 100644
index 0000000..2866dcd
--- /dev/null
+++ b/kernel/notify_settime.c
@@ -0,0 +1,104 @@
+/*
+ *  Notify processes whenever the time is modified via settimeofday.
+ *  Copyright (C) 2006-2007 Wind River Systems, Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/sched.h>
+#include <linux/errno.h>
+#include <linux/signal.h>
+#include <linux/stat.h>
+#include <linux/proc_fs.h>
+#include <linux/uaccess.h>
+
+/*
+ * Called when the time is modified below with settimeofday in order
+ * to notify all of the tasks that requested notification.
+ */
+void do_notify_timechange(void)
+{
+	struct task_struct *p;
+
+	read_lock(&tasklist_lock);
+	for_each_process(p) {
+		if (p->settime_sig)
+			group_send_sig_info(p->settime_sig, SEND_SIG_PRIV, p);
+	}
+	read_unlock(&tasklist_lock);
+}
+
+/*
+ * Set a signal to be delivered to the calling process whenever
+ * time of day is changed. A signal value of zero indicates that
+ * no signal should be sent.  On success, the call returns the
+ * old value of the signal.  A return value of -1 indicates an error.
+ */
+static int do_notify_settime(int sig)
+{
+	int ret = -EINVAL;
+
+	if ((sig > 0) && (sig <= _NSIG)) {
+		ret = current->settime_sig;
+		current->settime_sig = sig;
+	}
+	return ret;
+}
+
+#ifdef CONFIG_PROC_FS
+#define NOTIFY_SETTIME_PROCFS_NAME "notify_settime_signal"
+
+static int show_notify_settime_signal(char *page, char **start, off_t offset,
+				      int count, int *eof, void *data)
+{
+	return snprintf(page, count, "%d\n", current->settime_sig);
+}
+
+static int store_notify_settime_signal(struct file *file,
+					const char __user *buffer,
+				       unsigned long count, void *data)
+{
+	char str[16];
+	int sig = 0;
+
+	if (count > sizeof(str)-1)
+		return -EINVAL;
+
+	memset(str, 0, sizeof(str));
+	if (copy_from_user(str, buffer, count))
+		return -EFAULT;
+
+	sscanf(str, "%d", &sig);
+	return do_notify_settime(sig);
+}
+
+static int __init notify_settime_init(void)
+{
+	struct proc_dir_entry *e;
+	int ret = 0;
+
+	e = create_proc_entry(NOTIFY_SETTIME_PROCFS_NAME,
+			      S_IFREG | S_IRUGO | S_IWUSR, NULL);
+	if (e) {
+		e->read_proc = show_notify_settime_signal;
+		e->write_proc = store_notify_settime_signal;
+		e->data = NULL;
+	} else {
+		ret = -ENOMEM;
+	}
+	return ret;
+}
+device_initcall(notify_settime_init);
+#endif
-- 
1.7.9.7

