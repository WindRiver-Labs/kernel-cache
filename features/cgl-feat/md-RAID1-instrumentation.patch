From 5b344fc55f8436135ebd9db959475b0c52ba949d Mon Sep 17 00:00:00 2001
From: Jason HU <yongqi.hu@windriver.com>
Date: Tue, 25 May 2010 13:44:29 +0800
Subject: [PATCH 02/11] md: RAID1 instrumentation

raid1 mirror index instrumentation:

Instrument raid1_end_write_request to detect out-of-bounds array access.

raid1 bio instrumentation:

Should the for loop in raid1_end_write_request not terminate properly and
should we end up with an invalid index of the mirror device, this
instrumentation will trigger and dump all involved struct bio's, the
r1bio_t, and the mddev.

Two software RAID1 arrays were created with two partitions each. One VLM
volume was created that spanned both arrays. The printk were added to the
normal code path so that they were hit on every invocation of
raid1_end_write_request.

Signed-off-by: Jason HU <yongqi.hu@windriver.com>
Signed-off-by: Joe MacDonald <joe.macdonald@windriver.com>
---
 drivers/md/Kconfig |   10 ++++
 drivers/md/md.c    |    4 +-
 drivers/md/md.h    |    7 +++
 drivers/md/raid1.c |  134 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 153 insertions(+), 2 deletions(-)

diff --git a/drivers/md/Kconfig b/drivers/md/Kconfig
index 10f122a..f4100cb 100644
--- a/drivers/md/Kconfig
+++ b/drivers/md/Kconfig
@@ -99,6 +99,16 @@ config MD_RAID1
 
 	  If unsure, say Y.
 
+config MD_RAID1_INSTRUMENTATION
+	bool "Support for RAID1 instrumentation"
+   default n
+	depends on MD_RAID1
+	---help---
+	  Enables for RAID1 out-of-bounds array access detection and
+	  for RAID1 bio instrumentation.
+
+	  If unsure, say N.
+
 config MD_RAID10
 	tristate "RAID-10 (mirrored striping) mode"
 	depends on BLK_DEV_MD
diff --git a/drivers/md/md.c b/drivers/md/md.c
index 362b519..302887c 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -66,7 +66,7 @@ static void autostart_arrays(int part);
 static LIST_HEAD(pers_list);
 static DEFINE_SPINLOCK(pers_lock);
 
-static void md_print_devices(void);
+void md_print_devices(void);
 
 static DECLARE_WAIT_QUEUE_HEAD(resync_wait);
 static struct workqueue_struct *md_wq;
@@ -2292,7 +2292,7 @@ static void print_rdev(struct md_rdev *rdev, int major_version)
 		printk(KERN_INFO "md: no rdev superblock!\n");
 }
 
-static void md_print_devices(void)
+void md_print_devices(void)
 {
 	struct list_head *tmp;
 	struct md_rdev *rdev;
diff --git a/drivers/md/md.h b/drivers/md/md.h
index 9639970..43e98a1 100644
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@ -624,4 +624,11 @@ extern struct bio *bio_alloc_mddev(gfp_t gfp_mask, int nr_iovecs,
 				   struct mddev *mddev);
 extern int mddev_check_plugged(struct mddev *mddev);
 extern void md_trim_bio(struct bio *bio, int offset, int size);
+extern void md_print_devices(void);
+
+#define MD_BUG(x...) {	\
+	printk("md: bug in file %s, line %d\n", __FILE__, __LINE__);	\
+	md_print_devices();	\
+	}
+
 #endif /* _MD_MD_H */
diff --git a/drivers/md/raid1.c b/drivers/md/raid1.c
index c4801f9..f04d0f1 100644
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -41,6 +41,14 @@
 #include "raid1.h"
 #include "bitmap.h"
 
+#ifdef CONFIG_PANIC_LOGS
+extern void kcore_logon(int reboot);
+extern void kcore_logoff(void);
+#else
+#define kcore_logon(reboot) do { } while(0)
+#define kcore_logoff() do { } while(0)
+#endif /* CONFIG_PANIC_LOGS */
+
 /*
  * Number of guaranteed r1bios in case of extreme VM load:
  */
@@ -271,6 +279,100 @@ static inline void update_head_pos(int disk, struct r1bio *r1_bio)
 		r1_bio->sector + (r1_bio->sectors);
 }
 
+#ifdef CONFIG_MD_RAID1_INSTRUMENTATION
+
+#define indent_printk(indentation_level, format_string, ...) \
+	printk(KERN_DEBUG "%*s" format_string, indent_level, " ", ##__VA_ARGS__)
+
+#define MAX_DUMP_BIO_RECURSION 32
+
+#define printk_struct_field(field_name, format_specifier) \
+	indent_printk(indent_level, "" # field_name \
+			": " # format_specifier \
+			"\n", field_name)
+
+void dump_bio_iter(struct bio *bio, int indent_level)
+{
+	if (!bio) {
+		printk(KERN_DEBUG "not printing bio: it's NULL\n");
+		return;
+	}
+
+	if (indent_level == MAX_DUMP_BIO_RECURSION) {
+		printk(KERN_DEBUG "hit recursion limit. aborting.\n");
+		return;
+	}
+
+	indent_printk(indent_level, "struct bio: %p\n", bio);
+	printk_struct_field(bio->bi_sector, %ld);
+	printk_struct_field(bio->bi_next, %p);
+	printk_struct_field(bio->bi_bdev, %p);
+	printk_struct_field(bio->bi_flags, %lu);
+	printk_struct_field(bio->bi_rw, %lu);
+	printk_struct_field(bio->bi_vcnt, %d);
+	printk_struct_field(bio->bi_idx, %d);
+	printk_struct_field(bio->bi_phys_segments, %d);
+	printk_struct_field(bio->bi_size, %d);
+	printk_struct_field(bio->bi_max_vecs, %d);
+
+	printk_struct_field(bio->bi_io_vec, %p);
+	if (!bio->bi_io_vec) {
+		printk(KERN_DEBUG "not printing bio_vec: it's NULL\n");
+	} else {
+		int i;
+		for (i = 0; i < bio->bi_vcnt; i++) {
+			indent_printk(indent_level, "i: %d\n", i);
+			printk_struct_field(bio->bi_io_vec[i].bv_page, %p);
+			printk_struct_field(bio->bi_io_vec[i].bv_len, %d);
+			printk_struct_field(bio->bi_io_vec[i].bv_offset, %d);
+		}
+	}
+	printk_struct_field(bio->bi_end_io, %p);
+	printk_struct_field(atomic_read(&bio->bi_cnt), %d);
+	printk_struct_field(bio->bi_private, %p);
+	printk_struct_field(bio->bi_destructor, %p);
+
+	if (bio->bi_next && (bio->bi_next != bio)) {
+		dump_bio_iter(bio->bi_next, indent_level + 1);
+	}
+}
+
+void dump_bio(struct bio *bio) { dump_bio_iter(bio, 0); }
+
+void dump_r1bio_t(struct r1bio *r1_bio, int raid_disks)
+{
+	int i;
+	int indent_level = 0;
+
+	if (!r1_bio) {
+		printk(KERN_DEBUG "not printing r1_bio: it's NULL\n");
+		return;
+	}
+
+	printk_struct_field(atomic_read(&r1_bio->remaining), %d);
+	printk_struct_field(r1_bio->state, %ld);
+	printk_struct_field(r1_bio->read_disk, %d);
+	for (i = 0; i < raid_disks; i++) {
+		printk(KERN_DEBUG "contents of r1_bio->bios[%d]:\n", i);
+		dump_bio(r1_bio->bios[i]);
+	}
+	printk_struct_field(r1_bio->master_bio, %p);
+	dump_bio(r1_bio->master_bio);
+}
+
+void dump_mddev_t(struct mddev *mddev)
+{
+	int indent_level = 0;
+
+	if (!mddev) {
+		printk(KERN_DEBUG "not printing mddev: it's NULL\n");
+		return;
+	}
+	printk_struct_field(mddev->ro, %d\n);
+}
+
+#endif
+
 /*
  * Find the disk number which triggered given bio
  */
@@ -284,6 +386,38 @@ static int find_bio_disk(struct r1bio *r1_bio, struct bio *bio)
 		if (r1_bio->bios[mirror] == bio)
 			break;
 
+#ifdef CONFIG_MD_RAID1_INSTRUMENTATION
+	/*
+	 * There's a chance that the above loop will not find a matching index
+	 * of the mirror associated with the passed in struct bio *bio. We
+	 * would then end up with (mirror == conf->raid_disks) thus accessing
+	 * an out-of-bounds value of the zero-based r1_bio->bios[] array.
+	 */
+	if (unlikely(mirror >= conf->raid_disks)) {
+		int cpu = get_cpu();
+#ifdef CONFIG_PANIC_LOGS
+		kcore_logon(0);
+#endif
+		printk(KERN_DEBUG "raid1.c: (CPU %d) None of the bio's in the "
+				"bios array matched the passed in bio struct. "
+				"[mirror=%d,conf->raid_disks=%d]\n", cpu,
+				mirror, conf->raid_disks);
+		MD_BUG();
+
+		printk(KERN_DEBUG "contents of passed in bio:\n");
+		dump_bio(bio);
+		printk(KERN_DEBUG "partial contents of r1_bio:\n");
+		dump_r1bio_t(r1_bio, conf->raid_disks);
+		printk(KERN_DEBUG "partial contents of r1_bio->mddev:\n");
+		dump_mddev_t(r1_bio->mddev);
+
+		put_cpu();
+#ifdef CONFIG_PANIC_LOGS
+		kcore_logoff();
+#endif
+	}
+#endif
+
 	BUG_ON(mirror == raid_disks * 2);
 	update_head_pos(mirror, r1_bio);
 
-- 
1.7.9.7

