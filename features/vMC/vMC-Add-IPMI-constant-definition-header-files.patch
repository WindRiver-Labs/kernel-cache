From c57c16ffa773c1d58d8e52b5dadfd7af1958dfd5 Mon Sep 17 00:00:00 2001
From: Jason HU <yongqi.hu@windriver.com>
Date: Thu, 6 May 2010 23:31:19 -0700
Subject: [PATCH 1/5] vMC: Add IPMI constant definition header files

Add header files defining constants from the IPMI specification.
These are required by vMC.  Definitions in ipmi_bits.h are also
used by kernel drivers calling the vMC Kernel API.

Signed-off-by: Matt Wagantall <matthew.wagantall@windriver.com>
Integrated-by: Jason HU <yongqi.hu@windriver.com>
---
 drivers/char/ipmi/ipmi_msgbits.h |  319 ++++++++++++++++++++++++++
 include/linux/ipmi_bits.h        |  461 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 780 insertions(+), 0 deletions(-)
 create mode 100644 drivers/char/ipmi/ipmi_msgbits.h
 create mode 100644 include/linux/ipmi_bits.h

diff --git a/drivers/char/ipmi/ipmi_msgbits.h b/drivers/char/ipmi/ipmi_msgbits.h
new file mode 100644
index 0000000..1279c83
--- /dev/null
+++ b/drivers/char/ipmi/ipmi_msgbits.h
@@ -0,0 +1,319 @@
+/*
+ * ipmi_msgbits.h
+ *
+ * MontaVista IPMI interface, values used for messages.
+ *
+ * Author: MontaVista Software, Inc.
+ *         Corey Minyard <minyard@mvista.com>
+ *         source@mvista.com
+ *
+ * Copyright 2002,2003 MontaVista Software Inc.
+ *
+ *  This program is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public License
+ *  as published by the Free Software Foundation; either version 2 of
+ *  the License, or (at your option) any later version.
+ *
+ *
+ *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+ *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this program; if not, write to the Free
+ *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#ifndef _IPMI_MSGBITS_H
+#define _IPMI_MSGBITS_H
+
+#define MAX_IPMI_DATA_SIZE 36
+
+/*
+ * IPMI commands
+ */
+
+/* Chassis netfn (0x00) */
+#define IPMI_GET_CHASSIS_CAPABILITIES_CMD	0x00
+#define IPMI_GET_CHASSIS_STATUS_CMD		0x01
+#define IPMI_CHASSIS_CONTROL_CMD		0x02
+#define IPMI_CHASSIS_RESET_CMD			0x03
+#define IPMI_CHASSIS_IDENTIFY_CMD		0x04
+#define IPMI_SET_CHASSIS_CAPABILITIES_CMD	0x05
+#define IPMI_SET_POWER_RESTORE_POLICY_CMD	0x06
+#define IPMI_GET_SYSTEM_RESTART_CAUSE_CMD	0x07
+#define IPMI_SET_SYSTEM_BOOT_OPTIONS_CMD	0x08
+#define IPMI_GET_SYSTEM_BOOT_OPTIONS_CMD	0x09
+
+#define IPMI_GET_POH_COUNTER_CMD		0x0f
+
+/* Bridge netfn (0x00) */
+#define IPMI_GET_BRIDGE_STATE_CMD		0x00
+#define IPMI_SET_BRIDGE_STATE_CMD		0x01
+#define IPMI_GET_ICMB_ADDRESS_CMD		0x02
+#define IPMI_SET_ICMB_ADDRESS_CMD		0x03
+#define IPMI_SET_BRIDGE_PROXY_ADDRESS_CMD	0x04
+#define IPMI_GET_BRIDGE_STATISTICS_CMD		0x05
+#define IPMI_GET_ICMB_CAPABILITIES_CMD		0x06
+
+#define IPMI_CLEAR_BRIDGE_STATISTICS_CMD	0x08
+#define IPMI_GET_BRIDGE_PROXY_ADDRESS_CMD	0x09
+#define IPMI_GET_ICMB_CONNECTOR_INFO_CMD	0x0a
+#define IPMI_SET_ICMB_CONNECTOR_INFO_CMD	0x0b
+#define IPMI_SEND_ICMB_CONNECTION_ID_CMD	0x0c
+
+#define IPMI_PREPARE_FOR_DISCOVERY_CMD		0x10
+#define IPMI_GET_ADDRESSES_CMD			0x11
+#define IPMI_SET_DISCOVERED_CMD			0x12
+#define IPMI_GET_CHASSIS_DEVICE_ID_CMD		0x13
+#define IPMI_SET_CHASSIS_DEVICE_ID_CMD		0x14
+
+#define IPMI_BRIDGE_REQUEST_CMD			0x20
+#define IPMI_BRIDGE_MESSAGE_CMD			0x21
+
+#define IPMI_GET_EVENT_COUNT_CMD		0x30
+#define IPMI_SET_EVENT_DESTINATION_CMD		0x31
+#define IPMI_SET_EVENT_RECEPTION_STATE_CMD	0x32
+#define IPMI_SEND_ICMB_EVENT_MESSAGE_CMD	0x33
+#define IPMI_GET_EVENT_DESTIATION_CMD		0x34
+#define IPMI_GET_EVENT_RECEPTION_STATE_CMD	0x35
+
+#define IPMI_ERROR_REPORT_CMD			0xff
+
+/* Sensor/Event netfn (0x04) */
+#define IPMI_SET_EVENT_RECEIVER_CMD		0x00
+#define IPMI_GET_EVENT_RECEIVER_CMD		0x01
+#define IPMI_PLATFORM_EVENT_CMD			0x02
+
+#define IPMI_GET_PEF_CAPABILITIES_CMD		0x10
+#define IPMI_ARM_PEF_POSTPONE_TIMER_CMD		0x11
+#define IPMI_SET_PEF_CONFIG_PARMS_CMD		0x12
+#define IPMI_GET_PEF_CONFIG_PARMS_CMD		0x13
+#define IPMI_SET_LAST_PROCESSED_EVENT_ID_CMD	0x14
+#define IPMI_GET_LAST_PROCESSED_EVENT_ID_CMD	0x15
+#define IPMI_ALERT_IMMEDIATE_CMD		0x16
+#define IPMI_PET_ACKNOWLEDGE_CMD		0x17
+
+#define IPMI_GET_DEVICE_SDR_INFO_CMD		0x20
+#define IPMI_GET_DEVICE_SDR_CMD			0x21
+#define IPMI_RESERVE_DEVICE_SDR_REPOSITORY_CMD	0x22
+#define IPMI_GET_SENSOR_READING_FACTORS_CMD	0x23
+#define IPMI_SET_SENSOR_HYSTERESIS_CMD		0x24
+#define IPMI_GET_SENSOR_HYSTERESIS_CMD		0x25
+#define IPMI_SET_SENSOR_THRESHOLD_CMD		0x26
+#define IPMI_GET_SENSOR_THRESHOLD_CMD		0x27
+#define IPMI_SET_SENSOR_EVENT_ENABLE_CMD	0x28
+#define IPMI_GET_SENSOR_EVENT_ENABLE_CMD	0x29
+#define IPMI_REARM_SENSOR_EVENTS_CMD		0x2a
+#define IPMI_GET_SENSOR_EVENT_STATUS_CMD	0x2b
+#define IPMI_GET_SENSOR_READING_CMD		0x2d
+#define IPMI_SET_SENSOR_TYPE_CMD		0x2e
+#define IPMI_GET_SENSOR_TYPE_CMD		0x2f
+
+/* App netfn (0x06) */
+#define IPMI_GET_DEVICE_ID_CMD			0x01
+#define IPMI_BROADCAST_GET_DEVICE_ID_CMD	0x01
+#define IPMI_COLD_RESET_CMD			0x02
+#define IPMI_WARM_RESET_CMD			0x03
+#define IPMI_GET_SELF_TEST_RESULTS_CMD		0x04
+#define IPMI_MANUFACTURING_TEST_ON_CMD		0x05
+#define IPMI_SET_ACPI_POWER_STATE_CMD		0x06
+#define IPMI_GET_ACPI_POWER_STATE_CMD		0x07
+#define IPMI_GET_DEVICE_GUID_CMD		0x08
+#define IPMI_RESET_WATCHDOG_TIMER_CMD		0x22
+#define IPMI_SET_WATCHDOG_TIMER_CMD		0x24
+#define IPMI_GET_WATCHDOG_TIMER_CMD		0x25
+#define IPMI_SET_BMC_GLOBAL_ENABLES_CMD		0x2e
+#define IPMI_GET_BMC_GLOBAL_ENABLES_CMD		0x2f
+#define IPMI_CLEAR_MSG_FLAGS_CMD		0x30
+#define IPMI_GET_MSG_FLAGS_CMD			0x31
+#define IPMI_ENABLE_MESSAGE_CHANNEL_RCV_CMD	0x32
+#define IPMI_GET_MSG_CMD			0x33
+#define IPMI_SEND_MSG_CMD			0x34
+#define IPMI_READ_EVENT_MSG_BUFFER_CMD		0x35
+#define IPMI_GET_BT_INTERFACE_CAPABILITIES_CMD	0x36
+#define IPMI_GET_SYSTEM_GUID_CMD		0x37
+#define IPMI_GET_CHANNEL_AUTH_CAPABILITIES_CMD	0x38
+#define IPMI_GET_SESSION_CHALLENGE_CMD		0x39
+#define IPMI_ACTIVATE_SESSION_CMD		0x3a
+#define IPMI_SET_SESSION_PRIVILEGE_CMD		0x3b
+#define IPMI_CLOSE_SESSION_CMD			0x3c
+#define IPMI_GET_SESSION_INFO_CMD		0x3d
+
+#define IPMI_GET_AUTHCODE_CMD			0x3f
+#define IPMI_SET_CHANNEL_ACCESS_CMD		0x40
+#define IPMI_GET_CHANNEL_ACCESS_CMD		0x41
+#define IPMI_GET_CHANNEL_INFO_CMD		0x42
+#define IPMI_SET_USER_ACCESS_CMD		0x43
+#define IPMI_GET_USER_ACCESS_CMD		0x44
+#define IPMI_SET_USER_NAME_CMD			0x45
+#define IPMI_GET_USER_NAME_CMD			0x46
+#define IPMI_SET_USER_PASSWORD_CMD		0x47
+#define IPMI_ACTIVATE_PAYLOAD_CMD		0x48
+#define IPMI_DEACTIVATE_PAYLOAD_CMD		0x49
+#define IPMI_GET_PAYLOAD_ACTIVATION_STATUS_CMD	0x4a
+#define IPMI_GET_PAYLOAD_INSTANCE_INFO_CMD	0x4b
+#define IPMI_SET_USER_PAYLOAD_ACCESS_CMD	0x4c
+#define IPMI_GET_USER_PAYLOAD_ACCESS_CMD	0x4d
+#define IPMI_GET_CHANNEL_PAYLOAD_SUPPORT_CMD	0x4e
+#define IPMI_GET_CHANNEL_PAYLOAD_VERSION_CMD	0x4f
+#define IPMI_GET_CHANNEL_OEM_PAYLOAD_INFO_CMD	0x50
+
+#define IPMI_MASTER_READ_WRITE_CMD		0x52
+
+#define IPMI_GET_CHANNEL_CIPHER_SUITES_CMD	0x54
+#define IPMI_SUSPEND_RESUME_PAYLOAD_ENCRYPTION_CMD 0x55
+#define IPMI_SET_CHANNEL_SECURITY_KEY_CMD	0x56
+#define IPMI_GET_SYSTEM_INTERFACE_CAPABILITIES_CMD 0x57
+
+
+/* Storage netfn (0x0a) */
+#define IPMI_GET_FRU_INVENTORY_AREA_INFO_CMD	0x10
+#define IPMI_READ_FRU_DATA_CMD			0x11
+#define IPMI_WRITE_FRU_DATA_CMD			0x12
+
+#define IPMI_GET_SDR_REPOSITORY_INFO_CMD	0x20
+#define IPMI_GET_SDR_REPOSITORY_ALLOC_INFO_CMD	0x21
+#define IPMI_RESERVE_SDR_REPOSITORY_CMD		0x22
+#define IPMI_GET_SDR_CMD			0x23
+#define IPMI_ADD_SDR_CMD			0x24
+#define IPMI_PARTIAL_ADD_SDR_CMD		0x25
+#define IPMI_DELETE_SDR_CMD			0x26
+#define IPMI_CLEAR_SDR_REPOSITORY_CMD		0x27
+#define IPMI_GET_SDR_REPOSITORY_TIME_CMD	0x28
+#define IPMI_SET_SDR_REPOSITORY_TIME_CMD	0x29
+#define IPMI_ENTER_SDR_REPOSITORY_UPDATE_CMD	0x2a
+#define IPMI_EXIT_SDR_REPOSITORY_UPDATE_CMD	0x2b
+#define IPMI_RUN_INITIALIZATION_AGENT_CMD	0x2c
+
+#define IPMI_GET_SEL_INFO_CMD			0x40
+#define IPMI_GET_SEL_ALLOCATION_INFO_CMD	0x41
+#define IPMI_RESERVE_SEL_CMD			0x42
+#define IPMI_GET_SEL_ENTRY_CMD			0x43
+#define IPMI_ADD_SEL_ENTRY_CMD			0x44
+#define IPMI_PARTIAL_ADD_SEL_ENTRY_CMD		0x45
+#define IPMI_DELETE_SEL_ENTRY_CMD		0x46
+#define IPMI_CLEAR_SEL_CMD			0x47
+#define IPMI_GET_SEL_TIME_CMD			0x48
+#define IPMI_SET_SEL_TIME_CMD			0x49
+#define IPMI_GET_AUXILIARY_LOG_STATUS_CMD	0x5a
+#define IPMI_SET_AUXILIARY_LOG_STATUS_CMD	0x5b
+
+/* Transport netfn (0x0c) */
+#define IPMI_SET_LAN_CONFIG_PARMS_CMD		0x01
+#define IPMI_GET_LAN_CONFIG_PARMS_CMD		0x02
+#define IPMI_SUSPEND_BMC_ARPS_CMD		0x03
+#define IPMI_GET_IP_UDP_RMCP_STATS_CMD		0x04
+
+#define IPMI_SET_SERIAL_MODEM_CONFIG_CMD	0x10
+#define IPMI_GET_SERIAL_MODEM_CONFIG_CMD	0x11
+#define IPMI_SET_SERIAL_MODEM_MUX_CMD		0x12
+#define IPMI_GET_TAP_RESPONSE_CODES_CMD		0x13
+#define IPMI_SET_PPP_UDP_PROXY_XMIT_DATA_CMD	0x14
+#define IPMI_GET_PPP_UDP_PROXY_XMIT_DATA_CMD	0x15
+#define IPMI_SEND_PPP_UDP_PROXY_PACKET_CMD	0x16
+#define IPMI_GET_PPP_UDP_PROXY_RECV_DATA_CMD	0x17
+#define IPMI_SERIAL_MODEM_CONN_ACTIVE_CMD	0x18
+#define IPMI_CALLBACK_CMD			0x19
+#define IPMI_SET_USER_CALLBACK_OPTIONS_CMD	0x1a
+#define IPMI_GET_USER_CALLBACK_OPTIONS_CMD	0x1b
+
+#define IPMI_SOL_ACTIVATING_CMD			0x20
+#define IPMI_SET_SOL_CONFIGURATION_PARAMETERS	0x21
+#define IPMI_GET_SOL_CONFIGURATION_PARAMETERS	0x22
+
+/*
+ * NetFNs
+ */
+#define IPMI_CHASSIS_NETFN		0x00
+#define IPMI_BRIDGE_NETFN		0x02
+#define IPMI_SENSOR_EVENT_NETFN		0x04
+#define IPMI_APP_NETFN			0x06
+#define IPMI_FIRMWARE_NETFN		0x08
+#define IPMI_STORAGE_NETFN		0x0a
+#define IPMI_TRANSPORT_NETFN		0x0c
+#define IPMI_GROUP_EXTENSION_NETFN	0x2c
+#define IPMI_OEM_GROUP_NETFN		0x2e
+
+/*
+ * Completion codes for IPMI.
+ */
+#define IPMI_NODE_BUSY_CC			0xC0
+#define IPMI_INVALID_CMD_CC			0xC1
+#define IPMI_COMMAND_INVALID_FOR_LUN_CC		0xC2
+#define IPMI_TIMEOUT_CC				0xC3
+#define IPMI_OUT_OF_SPACE_CC			0xC4
+#define IPMI_INVALID_RESERVATION_CC		0xC5
+#define IPMI_REQUEST_DATA_TRUNCATED_CC		0xC6
+#define IPMI_REQUEST_DATA_LENGTH_INVALID_CC	0xC7
+#define IPMI_REQUESTED_DATA_LENGTH_EXCEEDED_CC	0xC8
+#define IPMI_PARAMETER_OUT_OF_RANGE_CC		0xC9
+#define IPMI_CANNOT_RETURN_REQ_LENGTH_CC	0xCA
+#define IPMI_NOT_PRESENT_CC			0xCB
+#define IPMI_INVALID_DATA_FIELD_CC		0xCC
+#define IPMI_COMMAND_ILLEGAL_FOR_SENSOR_CC	0xCD
+#define IPMI_COULD_NOT_PROVIDE_RESPONSE_CC	0xCE
+#define IPMI_CANNOT_EXEC_DUPLICATE_REQUEST_CC	0xCF
+#define IPMI_REPOSITORY_IN_UPDATE_MODE_CC	0xD0
+#define IPMI_DEVICE_IN_FIRMWARE_UPDATE_CC	0xD1
+#define IPMI_BMC_INIT_IN_PROGRESS_CC		0xD2
+#define IPMI_DESTINATION_UNAVAILABLE_CC		0xD3
+#define IPMI_INSUFFICIENT_PRIVILEGE_CC		0xD4
+#define IPMI_NOT_SUPPORTED_IN_PRESENT_STATE_CC	0xD5
+#define IPMI_UNKNOWN_ERR_CC			0xff
+
+/*
+ * Other IPMI constants
+ */
+#define IPMI_ASSERTION				0
+#define IPMI_DEASSERTION			1
+#define IPMI_EVENT_READING_TYPE_THRESHOLD			0x01
+#define IPMI_EVENT_READING_TYPE_DISCRETE_USAGE			0x02
+#define IPMI_EVENT_READING_TYPE_DISCRETE_STATE			0x03
+#define IPMI_EVENT_READING_TYPE_DISCRETE_PREDICTIVE_FAILURE	0x04
+#define IPMI_EVENT_READING_TYPE_DISCRETE_LIMIT_EXCEEDED		0x05
+#define IPMI_EVENT_READING_TYPE_DISCRETE_PERFORMANCE_MET	0x06
+#define IPMI_EVENT_READING_TYPE_DISCRETE_SEVERITY		0x07
+#define IPMI_EVENT_READING_TYPE_DISCRETE_DEVICE_PRESENCE	0x08
+#define IPMI_EVENT_READING_TYPE_DISCRETE_DEVICE_ENABLE		0x09
+#define IPMI_EVENT_READING_TYPE_DISCRETE_AVAILABILITY		0x0a
+#define IPMI_EVENT_READING_TYPE_DISCRETE_REDUNDANCY		0x0b
+#define IPMI_EVENT_READING_TYPE_DISCRETE_ACPI_POWER		0x0c
+#define IPMI_EVENT_READING_TYPE_SENSOR_SPECIFIC			0x6f
+/* The Group Extension defined for PICMG. */
+#define IPMI_PICMG_GRP_EXT		0
+
+/* PICMG Commands */
+#define IPMI_PICMG_CMD_GET_PROPERTIES			0x00
+#define IPMI_PICMG_CMD_GET_ADDRESS_INFO			0x01
+#define IPMI_PICMG_CMD_GET_SHELF_ADDRESS_INFO		0x02
+#define IPMI_PICMG_CMD_SET_SHELF_ADDRESS_INFO		0x03
+#define IPMI_PICMG_CMD_FRU_CONTROL			0x04
+#define IPMI_PICMG_CMD_GET_FRU_LED_PROPERTIES		0x05
+#define IPMI_PICMG_CMD_GET_LED_COLOR_CAPABILITIES	0x06
+#define IPMI_PICMG_CMD_SET_FRU_LED_STATE		0x07
+#define IPMI_PICMG_CMD_GET_FRU_LED_STATE		0x08
+#define IPMI_PICMG_CMD_SET_IPMB_STATE			0x09
+#define IPMI_PICMG_CMD_SET_FRU_ACTIVATION_POLICY	0x0a
+#define IPMI_PICMG_CMD_GET_FRU_ACTIVATION_POLICY	0x0b
+#define IPMI_PICMG_CMD_SET_FRU_ACTIVATION		0x0c
+#define IPMI_PICMG_CMD_GET_DEVICE_LOCATOR_RECORD	0x0d
+#define IPMI_PICMG_CMD_SET_PORT_STATE			0x0e
+#define IPMI_PICMG_CMD_GET_PORT_STATE			0x0f
+#define IPMI_PICMG_CMD_COMPUTE_POWER_PROPERTIES		0x10
+#define IPMI_PICMG_CMD_SET_POWER_LEVEL			0x11
+#define IPMI_PICMG_CMD_GET_POWER_LEVEL			0x12
+#define IPMI_PICMG_CMD_RENEGOTIATE_POWER		0x13
+#define IPMI_PICMG_CMD_GET_FAN_SPEED_PROPERTIES		0x14
+#define IPMI_PICMG_CMD_SET_FAN_LEVEL			0x15
+#define IPMI_PICMG_CMD_GET_FAN_LEVEL			0x16
+#define IPMI_PICMG_CMD_BUSED_RESOURCE			0x17
+
+#endif /* _IPMI_MSGBITS_H */
diff --git a/include/linux/ipmi_bits.h b/include/linux/ipmi_bits.h
new file mode 100644
index 0000000..c4ffebf
--- /dev/null
+++ b/include/linux/ipmi_bits.h
@@ -0,0 +1,461 @@
+/*
+ * ipmi_bits.h
+ *
+ * MontaVista IPMI interface, various values.
+ *
+ * Author: MontaVista Software, Inc.
+ *         Corey Minyard <minyard@mvista.com>
+ *         source@mvista.com
+ *
+ * Copyright 2002,2003 MontaVista Software Inc.
+ *
+ *  This program is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public License
+ *  as published by the Free Software Foundation; either version 2 of
+ *  the License, or (at your option) any later version.
+ *
+ *
+ *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+ *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this program; if not, write to the Free
+ *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#ifndef _IPMI_BITS_H
+#define _IPMI_BITS_H
+
+#include <linux/limits.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* Used in various operations to tell what has happened to a sensor,
+   control, entity, or whatever. */
+enum ipmi_update_e { IPMI_ADDED, IPMI_DELETED, IPMI_CHANGED };
+const char *ipmi_update_e_string(enum ipmi_update_e val);
+
+/*
+ * When dealing with strings, they can be unicode or ASCII, and some
+ * can be binary.
+ */
+enum ipmi_str_type_e {
+  IPMI_ASCII_STR	= 0,
+  IPMI_UNICODE_STR	= 1,
+  IPMI_BINARY_STR	= 2,
+};
+
+/* Used to tell if some value is present.  */
+enum ipmi_value_present_e { IPMI_NO_VALUES_PRESENT,
+			    IPMI_RAW_VALUE_PRESENT,
+			    IPMI_BOTH_VALUES_PRESENT };
+
+/*
+ * Sensor bits
+ */
+
+/* Note that a sensor with a settable hysteresis value can also be
+   read, but a fixed value cannot be read (it's in the SDR). */
+#define IPMI_HYSTERESIS_SUPPORT_NONE		0
+#define IPMI_HYSTERESIS_SUPPORT_READABLE	1
+#define IPMI_HYSTERESIS_SUPPORT_SETTABLE	2
+#define IPMI_HYSTERESIS_SUPPORT_FIXED		3
+const char *ipmi_get_hysteresis_support_string(unsigned int val);
+
+#define IPMI_THRESHOLD_ACCESS_SUPPORT_NONE	0
+#define IPMI_THRESHOLD_ACCESS_SUPPORT_READABLE	1
+#define IPMI_THRESHOLD_ACCESS_SUPPORT_SETTABLE	2
+#define IPMI_THRESHOLD_ACCESS_SUPPORT_FIXED	3
+const char *ipmi_get_threshold_access_support_string(unsigned int val);
+
+#define IPMI_EVENT_SUPPORT_PER_STATE		0
+#define IPMI_EVENT_SUPPORT_ENTIRE_SENSOR	1
+#define IPMI_EVENT_SUPPORT_GLOBAL_ENABLE	2
+#define IPMI_EVENT_SUPPORT_NONE			3
+const char *ipmi_get_event_support_string(unsigned int val);
+
+
+#define IPMI_SENSOR_TYPE_TEMPERATURE			0x01
+#define IPMI_SENSOR_TYPE_VOLTAGE			0x02
+#define IPMI_SENSOR_TYPE_CURRENT			0x03
+#define IPMI_SENSOR_TYPE_FAN				0x04
+#define IPMI_SENSOR_TYPE_PHYSICAL_SECURITY		0x05
+#define IPMI_SENSOR_TYPE_PLATFORM_SECURITY		0x06
+#define IPMI_SENSOR_TYPE_PROCESSOR			0x07
+#define IPMI_SENSOR_TYPE_POWER_SUPPLY			0x08
+#define IPMI_SENSOR_TYPE_POWER_UNIT			0x09
+#define IPMI_SENSOR_TYPE_COOLING_DEVICE			0x0a
+#define IPMI_SENSOR_TYPE_OTHER_UNITS_BASED_SENSOR	0x0b
+#define IPMI_SENSOR_TYPE_MEMORY				0x0c
+#define IPMI_SENSOR_TYPE_DRIVE_SLOT			0x0d
+#define IPMI_SENSOR_TYPE_POWER_MEMORY_RESIZE		0x0e
+#define IPMI_SENSOR_TYPE_SYSTEM_FIRMWARE_PROGRESS	0x0f
+#define IPMI_SENSOR_TYPE_EVENT_LOGGING_DISABLED		0x10
+#define IPMI_SENSOR_TYPE_WATCHDOG_1			0x11
+#define IPMI_SENSOR_TYPE_SYSTEM_EVENT			0x12
+#define IPMI_SENSOR_TYPE_CRITICAL_INTERRUPT		0x13
+#define IPMI_SENSOR_TYPE_BUTTON				0x14
+#define IPMI_SENSOR_TYPE_MODULE_BOARD			0x15
+#define IPMI_SENSOR_TYPE_MICROCONTROLLER_COPROCESSOR	0x16
+#define IPMI_SENSOR_TYPE_ADD_IN_CARD			0x17
+#define IPMI_SENSOR_TYPE_CHASSIS			0x18
+#define IPMI_SENSOR_TYPE_CHIP_SET			0x19
+#define IPMI_SENSOR_TYPE_OTHER_FRU			0x1a
+#define IPMI_SENSOR_TYPE_CABLE_INTERCONNECT		0x1b
+#define IPMI_SENSOR_TYPE_TERMINATOR			0x1c
+#define IPMI_SENSOR_TYPE_SYSTEM_BOOT_INITIATED		0x1d
+#define IPMI_SENSOR_TYPE_BOOT_ERROR			0x1e
+#define IPMI_SENSOR_TYPE_OS_BOOT			0x1f
+#define IPMI_SENSOR_TYPE_OS_CRITICAL_STOP		0x20
+#define IPMI_SENSOR_TYPE_SLOT_CONNECTOR			0x21
+#define IPMI_SENSOR_TYPE_SYSTEM_ACPI_POWER_STATE	0x22
+#define IPMI_SENSOR_TYPE_WATCHDOG_2			0x23
+#define IPMI_SENSOR_TYPE_PLATFORM_ALERT			0x24
+#define IPMI_SENSOR_TYPE_ENTITY_PRESENCE		0x25
+#define IPMI_SENSOR_TYPE_MONITOR_ASIC_IC		0x26
+#define IPMI_SENSOR_TYPE_LAN				0x27
+#define IPMI_SENSOR_TYPE_MANAGEMENT_SUBSYSTEM_HEALTH	0x28
+#define IPMI_SENSOR_TYPE_BATTERY			0x29
+const char *ipmi_get_sensor_type_string(unsigned int val);
+
+#define IPMI_EVENT_READING_TYPE_THRESHOLD			0x01
+#define IPMI_EVENT_READING_TYPE_DISCRETE_USAGE			0x02
+#define IPMI_EVENT_READING_TYPE_DISCRETE_STATE			0x03
+#define IPMI_EVENT_READING_TYPE_DISCRETE_PREDICTIVE_FAILURE	0x04
+#define IPMI_EVENT_READING_TYPE_DISCRETE_LIMIT_EXCEEDED		0x05
+#define IPMI_EVENT_READING_TYPE_DISCRETE_PERFORMANCE_MET	0x06
+#define IPMI_EVENT_READING_TYPE_DISCRETE_SEVERITY		0x07
+#define IPMI_EVENT_READING_TYPE_DISCRETE_DEVICE_PRESENCE	0x08
+#define IPMI_EVENT_READING_TYPE_DISCRETE_DEVICE_ENABLE		0x09
+#define IPMI_EVENT_READING_TYPE_DISCRETE_AVAILABILITY		0x0a
+#define IPMI_EVENT_READING_TYPE_DISCRETE_REDUNDANCY		0x0b
+#define IPMI_EVENT_READING_TYPE_DISCRETE_ACPI_POWER		0x0c
+#define IPMI_EVENT_READING_TYPE_SENSOR_SPECIFIC			0x6f
+const char *ipmi_get_event_reading_type_string(unsigned int val);
+
+#define IPMI_SENSOR_DIRECTION_UNSPECIFIED	0
+#define IPMI_SENSOR_DIRECTION_INPUT		1
+#define IPMI_SENSOR_DIRECTION_OUTPUT		2
+const char *ipmi_get_sensor_direction_string(unsigned int val);
+
+const char *ipmi_get_reading_name(unsigned int event_reading_type,
+				  unsigned int sensor_type,
+				  unsigned int val);
+
+#define IPMI_ANALOG_DATA_FORMAT_UNSIGNED   0
+#define IPMI_ANALOG_DATA_FORMAT_1_COMPL    1
+#define IPMI_ANALOG_DATA_FORMAT_2_COMPL    2
+#define IPMI_ANALOG_DATA_FORMAT_NOT_ANALOG 3
+
+enum ipmi_rate_unit_e {
+    IPMI_RATE_UNIT_NONE = 0,
+    IPMI_RATE_UNIT_PER_US,
+    IPMI_RATE_UNIT_PER_MS,
+    IPMI_RATE_UNIT_PER_SEC,
+    IPMI_RATE_UNIT_MIN,
+    IPMI_RATE_UNIT_HOUR,
+    IPMI_RATE_UNIT_DAY,
+};
+const char *ipmi_get_rate_unit_string(enum ipmi_rate_unit_e val);
+
+enum ipmi_unit_type_e {
+    IPMI_UNIT_TYPE_UNSPECIFIED = 0,
+    IPMI_UNIT_TYPE_DEGREES_C,
+    IPMI_UNIT_TYPE_DEGREES_F,
+    IPMI_UNIT_TYPE_DEGREES_K,
+    IPMI_UNIT_TYPE_VOLTS,
+    IPMI_UNIT_TYPE_AMPS,
+    IPMI_UNIT_TYPE_WATTS,
+    IPMI_UNIT_TYPE_JOULES,
+    IPMI_UNIT_TYPE_COULOMBS,
+    IPMI_UNIT_TYPE_VA,
+    IPMI_UNIT_TYPE_NITS = 10,
+    IPMI_UNIT_TYPE_LUMENS,
+    IPMI_UNIT_TYPE_LUX,
+    IPMI_UNIT_TYPE_CANDELA,
+    IPMI_UNIT_TYPE_KPA,
+    IPMI_UNIT_TYPE_PSI,
+    IPMI_UNIT_TYPE_NEWTONS,
+    IPMI_UNIT_TYPE_CFM,
+    IPMI_UNIT_TYPE_RPM,
+    IPMI_UNIT_TYPE_HZ,
+    IPMI_UNIT_TYPE_USECONDS = 20,
+    IPMI_UNIT_TYPE_MSECONDS,
+    IPMI_UNIT_TYPE_SECONDS,
+    IPMI_UNIT_TYPE_MINUTE,
+    IPMI_UNIT_TYPE_HOUR,
+    IPMI_UNIT_TYPE_DAY,
+    IPMI_UNIT_TYPE_WEEK,
+    IPMI_UNIT_TYPE_MIL,
+    IPMI_UNIT_TYPE_INCHES,
+    IPMI_UNIT_TYPE_FEET,
+    IPMI_UNIT_TYPE_CUBIC_INCHS = 30,
+    IPMI_UNIT_TYPE_CUBIC_FEET,
+    IPMI_UNIT_TYPE_MILLIMETERS,
+    IPMI_UNIT_TYPE_CENTIMETERS,
+    IPMI_UNIT_TYPE_METERS,
+    IPMI_UNIT_TYPE_CUBIC_CENTIMETERS,
+    IPMI_UNIT_TYPE_CUBIC_METERS,
+    IPMI_UNIT_TYPE_LITERS,
+    IPMI_UNIT_TYPE_FL_OZ,
+    IPMI_UNIT_TYPE_RADIANS,
+    IPMI_UNIT_TYPE_SERADIANS = 40,
+    IPMI_UNIT_TYPE_REVOLUTIONS,
+    IPMI_UNIT_TYPE_CYCLES,
+    IPMI_UNIT_TYPE_GRAVITIES,
+    IPMI_UNIT_TYPE_OUNCES,
+    IPMI_UNIT_TYPE_POUNDS,
+    IPMI_UNIT_TYPE_FOOT_POUNDS,
+    IPMI_UNIT_TYPE_OUNCE_INCHES,
+    IPMI_UNIT_TYPE_GAUSS,
+    IPMI_UNIT_TYPE_GILBERTS,
+    IPMI_UNIT_TYPE_HENRIES = 50,
+    IPMI_UNIT_TYPE_MHENRIES,
+    IPMI_UNIT_TYPE_FARADS,
+    IPMI_UNIT_TYPE_UFARADS,
+    IPMI_UNIT_TYPE_OHMS,
+    IPMI_UNIT_TYPE_SIEMENS,
+    IPMI_UNIT_TYPE_MOLES,
+    IPMI_UNIT_TYPE_BECQUERELS,
+    IPMI_UNIT_TYPE_PPM,
+    IPMI_UNIT_TYPE_reserved1,
+    IPMI_UNIT_TYPE_DECIBELS = 60,
+    IPMI_UNIT_TYPE_DbA,
+    IPMI_UNIT_TYPE_DbC,
+    IPMI_UNIT_TYPE_GRAYS,
+    IPMI_UNIT_TYPE_SIEVERTS,
+    IPMI_UNIT_TYPE_COLOR_TEMP_DEG_K,
+    IPMI_UNIT_TYPE_BITS,
+    IPMI_UNIT_TYPE_KBITS,
+    IPMI_UNIT_TYPE_MBITS,
+    IPMI_UNIT_TYPE_GBITS,
+    IPMI_UNIT_TYPE_BYTES = 70,
+    IPMI_UNIT_TYPE_KBYTES,
+    IPMI_UNIT_TYPE_MBYTES,
+    IPMI_UNIT_TYPE_GBYTES,
+    IPMI_UNIT_TYPE_WORDS,
+    IPMI_UNIT_TYPE_DWORDS,
+    IPMI_UNIT_TYPE_QWORDS,
+    IPMI_UNIT_TYPE_LINES,
+    IPMI_UNIT_TYPE_HITS,
+    IPMI_UNIT_TYPE_MISSES,
+    IPMI_UNIT_TYPE_RETRIES = 80,
+    IPMI_UNIT_TYPE_RESETS,
+    IPMI_UNIT_TYPE_OVERRUNS,
+    IPMI_UNIT_TYPE_UNDERRUNS,
+    IPMI_UNIT_TYPE_COLLISIONS,
+    IPMI_UNIT_TYPE_PACKETS,
+    IPMI_UNIT_TYPE_MESSAGES,
+    IPMI_UNIT_TYPE_CHARACTERS,
+    IPMI_UNIT_TYPE_ERRORS,
+    IPMI_UNIT_TYPE_CORRECTABLE_ERRORS,
+    IPMI_UNIT_TYPE_UNCORRECTABLE_ERRORS = 90,
+    IPMI_UNIT_TYPE_FATAL_ERRORS,
+    IPMI_UNIT_TYPE_GRAMS,
+};
+const char *ipmi_get_unit_type_string(enum ipmi_unit_type_e val);
+
+enum ipmi_modifier_unit_use_e {
+    IPMI_MODIFIER_UNIT_NONE = 0,
+    IPMI_MODIFIER_UNIT_BASE_DIV_MOD,
+    IPMI_MODIFIER_UNIT_BASE_MULT_MOD,
+};
+
+#define IPMI_LINEARIZATION_LINEAR	0
+#define IPMI_LINEARIZATION_LN		1
+#define IPMI_LINEARIZATION_LOG10	2
+#define IPMI_LINEARIZATION_LOG2		3
+#define IPMI_LINEARIZATION_E		4
+#define IPMI_LINEARIZATION_EXP10	5
+#define IPMI_LINEARIZATION_EXP2		6
+#define IPMI_LINEARIZATION_1_OVER_X	7
+#define IPMI_LINEARIZATION_SQR		8
+#define IPMI_LINEARIZATION_CUBE		9
+#define IPMI_LINEARIZATION_SQRT		10
+#define IPMI_LINEARIZATION_1_OVER_CUBE	11
+#define IPMI_LINEARIZATION_NONLINEAR	0x70
+
+/* Event types and directions for sensors. */
+enum ipmi_thresh_e {
+    IPMI_LOWER_NON_CRITICAL = 0,
+    IPMI_LOWER_CRITICAL,
+    IPMI_LOWER_NON_RECOVERABLE,
+    IPMI_UPPER_NON_CRITICAL,
+    IPMI_UPPER_CRITICAL,
+    IPMI_UPPER_NON_RECOVERABLE
+};
+const char *ipmi_get_threshold_string(enum ipmi_thresh_e val);
+
+enum ipmi_event_value_dir_e {
+    IPMI_GOING_LOW = 0,
+    IPMI_GOING_HIGH
+};
+const char *ipmi_get_value_dir_string(enum ipmi_event_value_dir_e val);
+
+enum ipmi_event_dir_e {
+    IPMI_ASSERTION = 0,
+    IPMI_DEASSERTION
+};
+const char *ipmi_get_event_dir_string(enum ipmi_event_dir_e val);
+
+/* Global init field for MC device locator SDR. */
+#define IPMI_GLOBAL_INIT_ENABLE_EVENT_MSG_GENERATION 0
+#define IPMI_GLOBAL_INIT_DISABLE_EVENT_MSG_GENERATION 1
+#define IPMI_GLOBAL_INIT_DO_NOT_INIT 2
+
+/*
+ * Entity IDs
+ */
+#define IPMI_ENTITY_ID_UNSPECIFIED			0
+#define IPMI_ENTITY_ID_OTHER				1
+#define IPMI_ENTITY_ID_UNKOWN				2
+#define IPMI_ENTITY_ID_PROCESSOR			3
+#define IPMI_ENTITY_ID_DISK				4
+#define IPMI_ENTITY_ID_PERIPHERAL			5
+#define IPMI_ENTITY_ID_SYSTEM_MANAGEMENT_MODULE		6
+#define IPMI_ENTITY_ID_SYSTEM_BOARD			7
+#define IPMI_ENTITY_ID_MEMORY_MODULE			8
+#define IPMI_ENTITY_ID_PROCESSOR_MODULE			9
+#define IPMI_ENTITY_ID_POWER_SUPPLY			10
+#define IPMI_ENTITY_ID_ADD_IN_CARD			11
+#define IPMI_ENTITY_ID_FRONT_PANEL_BOARD		12
+#define IPMI_ENTITY_ID_BACK_PANEL_BOARD			13
+#define IPMI_ENTITY_ID_POWER_SYSTEM_BOARD		14
+#define IPMI_ENTITY_ID_DRIVE_BACKPLANE			15
+#define IPMI_ENTITY_ID_SYSTEM_INTERNAL_EXPANSION_BOARD	16
+#define IPMI_ENTITY_ID_OTHER_SYSTEM_BOARD		17
+#define IPMI_ENTITY_ID_PROCESSOR_BOARD			18
+#define IPMI_ENTITY_ID_POWER_UNIT			19
+#define IPMI_ENTITY_ID_POWER_MODULE			20
+#define IPMI_ENTITY_ID_POWER_MANAGEMENT_BOARD		21
+#define IPMI_ENTITY_ID_CHASSIS_BACK_PANEL_BOARD		22
+#define IPMI_ENTITY_ID_SYSTEM_CHASSIS			23
+#define IPMI_ENTITY_ID_SUB_CHASSIS			24
+#define IPMI_ENTITY_ID_OTHER_CHASSIS_BOARD		25
+#define IPMI_ENTITY_ID_DISK_DRIVE_BAY			26
+#define IPMI_ENTITY_ID_PERIPHERAL_BAY			27
+#define IPMI_ENTITY_ID_DEVICE_BAY			28
+#define IPMI_ENTITY_ID_FAN_COOLING			29
+#define IPMI_ENTITY_ID_COOLING_UNIT			30
+#define IPMI_ENTITY_ID_CABLE_INTERCONNECT		31
+#define IPMI_ENTITY_ID_MEMORY_DEVICE			32
+#define IPMI_ENTITY_ID_SYSTEM_MANAGEMENT_SOFTWARE	33
+#define IPMI_ENTITY_ID_BIOS				34
+#define IPMI_ENTITY_ID_OPERATING_SYSTEM			35
+#define IPMI_ENTITY_ID_SYSTEM_BUS			36
+#define IPMI_ENTITY_ID_GROUP				37
+#define IPMI_ENTITY_ID_REMOTE_MGMT_COMM_DEVICE		38
+#define IPMI_ENTITY_ID_EXTERNAL_ENVIRONMENT		39
+#define IPMI_ENTITY_ID_BATTERY				40
+#define IPMI_ENTITY_ID_PROCESSING_BLADE			41
+#define IPMI_ENTITY_ID_CONNECTIVITY_SWITCH		42
+#define IPMI_ENTITY_ID_PROCESSOR_MEMORY_MODULE		43
+#define IPMI_ENTITY_ID_IO_MODULE			44
+#define IPMI_ENTITY_ID_PROCESSOR_IO_MODULE		45
+#define IPMI_ENTITY_ID_MGMT_CONTROLLER_FIRMWARE		46
+#define IPMI_ENTITY_ID_IPMI_CHANNEL			47
+#define IPMI_ENTITY_ID_PCI_BUS				48
+#define IPMI_ENTITY_ID_PCI_EXPRESS_BUS			49
+#define IPMI_ENTITY_ID_SCSI_BUS				50
+#define IPMI_ENTITY_ID_SATA_SAS_BUS			51
+#define IPMI_ENTITY_ID_PROCESSOR_FRONT_SIDE_BUS		52
+const char *ipmi_get_entity_id_string(unsigned int val);
+
+
+/*
+ * Control types.
+ */
+#define IPMI_CONTROL_LIGHT		1
+#define IPMI_CONTROL_RELAY		2
+#define IPMI_CONTROL_DISPLAY		3
+#define IPMI_CONTROL_ALARM		4
+#define IPMI_CONTROL_RESET		5
+#define IPMI_CONTROL_POWER		6
+#define IPMI_CONTROL_FAN_SPEED		7
+#define IPMI_CONTROL_IDENTIFIER		8
+#define IPMI_CONTROL_ONE_SHOT_RESET	9
+#define IPMI_CONTROL_OUTPUT		10
+#define IPMI_CONTROL_ONE_SHOT_OUTPUT	11
+const char *ipmi_get_control_type_string(unsigned int val);
+
+#define IPMI_CONTROL_COLOR_BLACK	0
+#define IPMI_CONTROL_COLOR_WHITE	1
+#define IPMI_CONTROL_COLOR_RED		2
+#define IPMI_CONTROL_COLOR_GREEN	3
+#define IPMI_CONTROL_COLOR_BLUE		4
+#define IPMI_CONTROL_COLOR_YELLOW	5
+#define IPMI_CONTROL_COLOR_ORANGE	6
+const char *ipmi_get_color_string(unsigned int val);
+
+
+/*
+ * chassis types from FRUs
+ */
+#define IPMI_FRU_CT_OTHER                  1
+#define IPMI_FRU_CT_UNKNOWN                2
+#define IPMI_FRU_CT_DESKTOP                3
+#define IPMI_FRU_CT_LOW_PROFILE_DESKTOP    4
+#define IPMI_FRU_CT_PIZZA_BOX              5
+#define IPMI_FRU_CT_MINI_TOWER             6
+#define IPMI_FRU_CT_TOWER                  7
+#define IPMI_FRU_CT_PORTABLE               8
+#define IPMI_FRU_CT_LAPTOP                 9
+#define IPMI_FRU_CT_NOTEBOOK              10
+#define IPMI_FRU_CT_HANDHELD              11
+#define IPMI_FRU_CT_DOCKING_STATION       12
+#define IPMI_FRU_CT_ALL_IN_ONE            13
+#define IPMI_FRU_CT_SUB_NOTEBOOK          14
+#define IPMI_FRU_CT_SPACE_SAVING          15
+#define IPMI_FRU_CT_LUNCH_BOX             16
+#define IPMI_FRU_CT_MAIN_SERVER_CHASSIS   17
+#define IPMI_FRU_CT_EXPANSION_CHASSIS     18
+#define IPMI_FRU_CT_SUB_CHASSIS           19
+#define IPMI_FRU_CT_BUS_EXPANSION_CHASSIS 20
+#define IPMI_FRU_CT_PERIPERAL_CHASSIS     21
+#define IPMI_FRU_CT_RAID_CHASSIS          22
+#define IPMI_FRU_CT_RACK_MOUNT_CHASSIS    23
+
+
+/*
+ * Various SDR values
+ */
+#define IPMI_SDR_FULL_SENSOR_RECORD		0x01
+#define IPMI_SDR_COMPACT_SENSOR_RECORD		0x02
+#define IPMI_SDR_ENITY_ASSOCIATION_RECORD	0x08
+#define IPMI_SDR_DR_ENITY_ASSOCIATION_RECORD	0x09
+#define IPMI_SDR_GENERIC_DEVICE_LOCATOR_RECORD	0x10
+#define IPMI_SDR_FRU_DEVICE_LOCATOR_RECORD	0x11
+#define IPMI_SDR_MC_DEVICE_LOCATOR_RECORD	0x12
+#define IPMI_SDR_MC_CONFIRMATION_RECORD		0x13
+#define IPMI_SDR_MC_BMC_MESSAGE_CHANNEL_RECORD	0x14
+
+/*
+ * Misc values
+ */
+#define IPMI_EVENT_HANDLED     0
+#define IPMI_EVENT_NOT_HANDLED 1
+
+#define IPMI_TIMEOUT_NOW	0
+#define IPMI_TIMEOUT_FOREVER	LONG_MAX
+
+/* Used when setting data that can be volatile or non-volatile. */
+enum ipmi_set_dest_e {
+    IPMI_SET_DEST_NON_VOLATILE = 1,
+    IPMI_SET_DEST_VOLATILE = 2
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _IPMI_BITS_H */
-- 
1.6.5.2

