Received: from ALA-MAIL03.corp.ad.wrs.com ([147.11.57.144]) by ala-mail09.corp.ad.wrs.com with Microsoft SMTPSVC(6.0.3790.3959);
	 Sat, 7 Feb 2009 00:55:57 -0800
Received: from mail.wrs.com ([147.11.1.11]) by ALA-MAIL03.corp.ad.wrs.com with Microsoft SMTPSVC(6.0.3790.1830);
	 Sat, 7 Feb 2009 00:55:56 -0800
Received: from majordomo.wrs.com (majordomo [147.11.1.8])
	by mail.wrs.com (8.13.6/8.13.6) with ESMTP id n178tu0e019986
	for <eng-linuxprod-runtime-x@mail.wrs.com>; Sat, 7 Feb 2009 00:55:56 -0800 (PST)
Received: (from mdomo@localhost)
	by majordomo.wrs.com (8.9.3+Sun/8.9.3) id AAA08684
	for eng-linuxprod-runtime-x; Sat, 7 Feb 2009 00:54:21 -0800 (PST)
X-Authentication-Warning: majordomo.wrs.com: mdomo set sender to owner-eng-linuxprod-runtime@windriver.com using -f
From: Harry Ciao <qingtao.cao@windriver.com>
To: rob.woolley@windriver.com, bruce.ashfield@windriver.com
Cc: eng-linuxprod-runtime@windriver.com, eng-linuxprod-cgl@windriver.com
Subject: [v0 F101 WIND00143671 PATCH 1/1] EDAC: MV64x60 edac_dev_idx & edac_pci_idx allocated by core
Date: Sat,  7 Feb 2009 16:51:55 +0800
Message-Id: <1233996715-22914-3-git-send-email-qingtao.cao@windriver.com>
X-Mailer: git-send-email 1.5.6.2
In-Reply-To: <1233996715-22914-2-git-send-email-qingtao.cao@windriver.com>
References: <1233996715-22914-1-git-send-email-qingtao.cao@windriver.com>
 <1233996715-22914-2-git-send-email-qingtao.cao@windriver.com>
X-OriginalArrivalTime: 07 Feb 2009 08:55:54.0254 (UTC) FILETIME=[E25DCAE0:01C98901]
Sender: owner-eng-linuxprod-runtime@windriver.com
Precedence: bulk
Reply-To: Harry Ciao <qingtao.cao@windriver.com>
Return-Path: owner-eng-linuxprod-runtime@windriver.com

Now that EDAC core has been able to take care of allocating indexes
for both edac_device_ctl_info and edac_pci_ctl_info structures, 
any EDAC driver should stop using its own local index variable.

Signed-off-by: Harry Ciao <qingtao.cao@windriver.com>
---
 drivers/edac/mv64x60_edac.c |   22 +++++++++++++---------
 1 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/drivers/edac/mv64x60_edac.c b/drivers/edac/mv64x60_edac.c
index 9ca3da5..4bd2865 100644
--- a/drivers/edac/mv64x60_edac.c
+++ b/drivers/edac/mv64x60_edac.c
@@ -31,8 +31,6 @@
 #endif
 
 static const char *mv64x60_ctl_name = "MV64x60";
-static int edac_dev_idx;
-static int edac_pci_idx;
 static int edac_mc_idx;
 
 #ifdef CONFIG_EDAC_VMC
@@ -228,7 +226,7 @@ static int __devinit mv64x60_pci_err_probe(struct platform_device *pdev)
 	if (edac_op_state == EDAC_OPSTATE_POLL)
 		pci->edac_check = mv64x60_pci_check;
 
-	pdata->edac_idx = edac_pci_idx++;
+	pdata->edac_idx = edac_pci_alloc_index();
 
 	r = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!r) {
@@ -400,6 +398,7 @@ static int __devinit mv64x60_sram_err_probe(struct platform_device *pdev)
 	struct mv64x60_sram_pdata *pdata;
 	struct resource *r;
 	int res = 0;
+	int edac_dev_idx = edac_device_alloc_index();
 
 	if (!devres_open_group(&pdev->dev, mv64x60_sram_err_probe, GFP_KERNEL))
 		return -ENOMEM;
@@ -456,7 +455,7 @@ static int __devinit mv64x60_sram_err_probe(struct platform_device *pdev)
 	if (edac_op_state == EDAC_OPSTATE_POLL)
 		edac_dev->edac_check = mv64x60_sram_check;
 
-	pdata->edac_idx = edac_dev_idx++;
+	pdata->edac_idx = edac_dev_idx;
 
 	if (edac_device_add_device(edac_dev) > 0) {
 		debugf3("%s(): failed edac_device_add_device()\n", __func__);
@@ -583,6 +582,7 @@ static int __devinit mv64x60_cpu_err_probe(struct platform_device *pdev)
 	struct resource *r;
 	struct mv64x60_cpu_pdata *pdata;
 	int res = 0;
+	int edac_dev_idx = edac_device_alloc_index();
 
 	if (!devres_open_group(&pdev->dev, mv64x60_cpu_err_probe, GFP_KERNEL))
 		return -ENOMEM;
@@ -666,7 +666,7 @@ static int __devinit mv64x60_cpu_err_probe(struct platform_device *pdev)
 	if (edac_op_state == EDAC_OPSTATE_POLL)
 		edac_dev->edac_check = mv64x60_cpu_check;
 
-	pdata->edac_idx = edac_dev_idx++;
+	pdata->edac_idx = edac_dev_idx;
 
 	if (edac_device_add_device(edac_dev) > 0) {
 		debugf3("%s(): failed edac_device_add_device()\n", __func__);
@@ -1048,6 +1048,7 @@ static int __devinit mv64x60_device_err_probe(struct platform_device *pdev)
 	struct resource *r;
 	struct mv64x60_device_pdata *pdata;
 	int res = 0;
+	int edac_dev_idx = edac_device_alloc_index();
 
 	if (!devres_open_group(&pdev->dev, mv64x60_device_err_probe, GFP_KERNEL))
 		return -ENOMEM;
@@ -1106,7 +1107,7 @@ static int __devinit mv64x60_device_err_probe(struct platform_device *pdev)
 	if (edac_op_state == EDAC_OPSTATE_POLL)
 		edac_dev->edac_check = mv64x60_device_check;
 
-	pdata->edac_idx = edac_dev_idx++;
+	pdata->edac_idx = edac_dev_idx;
 
 	if (edac_device_add_device(edac_dev) > 0) {
 		debugf3("%s(): failed edac_device_add_device()\n", __func__);
@@ -1214,6 +1215,7 @@ static int __devinit mv64x60_comm_err_probe(struct platform_device *pdev)
 	struct resource *r;
 	struct mv64x60_comm_pdata *pdata;
 	int res = 0;
+	int edac_dev_idx = edac_device_alloc_index();
 
 	if (!devres_open_group(&pdev->dev, mv64x60_comm_err_probe, GFP_KERNEL))
 		return -ENOMEM;
@@ -1273,7 +1275,7 @@ static int __devinit mv64x60_comm_err_probe(struct platform_device *pdev)
 	if (edac_op_state == EDAC_OPSTATE_POLL)
 		edac_dev->edac_check = mv64x60_comm_check;
 
-	pdata->edac_idx = edac_dev_idx++;
+	pdata->edac_idx = edac_dev_idx;
 
 	if (edac_device_add_device(edac_dev) > 0) {
 		debugf3("%s(): failed edac_device_add_device()\n", __func__);
@@ -1387,6 +1389,7 @@ static int __devinit mv64x60_eth_err_probe(struct platform_device *pdev)
 	struct resource *r;
 	struct mv64x60_eth_pdata *pdata;
 	int res = 0;
+	int edac_dev_idx = edac_device_alloc_index();
 
 	if (!devres_open_group(&pdev->dev, mv64x60_eth_err_probe, GFP_KERNEL))
 		return -ENOMEM;
@@ -1446,7 +1449,7 @@ static int __devinit mv64x60_eth_err_probe(struct platform_device *pdev)
 	if (edac_op_state == EDAC_OPSTATE_POLL)
 		edac_dev->edac_check = mv64x60_eth_check;
 
-	pdata->edac_idx = edac_dev_idx++;
+	pdata->edac_idx = edac_dev_idx;
 
 	if (edac_device_add_device(edac_dev) > 0) {
 		debugf3("%s(): failed edac_device_add_device()\n", __func__);
@@ -1560,6 +1563,7 @@ static int __devinit mv64x60_dma_err_probe(struct platform_device *pdev)
 	struct resource *r;
 	struct mv64x60_dma_pdata *pdata;
 	int res = 0;
+	int edac_dev_idx = edac_device_alloc_index();
 
 	if (!devres_open_group(&pdev->dev, mv64x60_dma_err_probe, GFP_KERNEL))
 		return -ENOMEM;
@@ -1619,7 +1623,7 @@ static int __devinit mv64x60_dma_err_probe(struct platform_device *pdev)
 	if (edac_op_state == EDAC_OPSTATE_POLL)
 		edac_dev->edac_check = mv64x60_dma_check;
 
-	pdata->edac_idx = edac_dev_idx++;
+	pdata->edac_idx = edac_dev_idx;
 
 	if (edac_device_add_device(edac_dev) > 0) {
 		debugf3("%s(): failed edac_device_add_device()\n", __func__);
-- 
1.5.6.2

