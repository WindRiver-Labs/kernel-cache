From 6aa53383139f794843ab6d855ac47e406306abd0 Mon Sep 17 00:00:00 2001
From: Matt Wagantall <matthew.wagantall@windriver.com>
Date: Sat, 8 Nov 2008 17:57:05 -0500
Subject: [PATCH] EDAC: Add support for vMC containment handlers

Extended EDAC vMC wrappers to allow the registration and triggering
of vMC containment handlers.  Containment handlers are callbacks
triggered by the assertion of appropriately configured vMC sensors.
This framework allows for the creation of custom containment
handlers.

Signed-off-by: Matt Wagantall <matthew.wagantall@windriver.com>
---
 drivers/edac/Makefile               |    2 +-
 drivers/edac/edac_module.c          |   10 ++++++
 drivers/edac/edac_vmc.h             |   10 ++++++
 drivers/edac/edac_vmc_containment.c |   62 +++++++++++++++++++++++++++++++++++
 4 files changed, 83 insertions(+), 1 deletions(-)
 create mode 100644 drivers/edac/edac_vmc_containment.c

diff --git a/drivers/edac/Makefile b/drivers/edac/Makefile
index cd46ce3..9bfd0da 100644
--- a/drivers/edac/Makefile
+++ b/drivers/edac/Makefile
@@ -18,7 +18,7 @@ edac_core-objs	+= edac_pci.o edac_pci_sysfs.o
 endif
 
 ifdef CONFIG_EDAC_VMC
-edac_core-objs	+= edac_vmc.o
+edac_core-objs	+= edac_vmc.o edac_vmc_containment.o
 endif
 
 obj-$(CONFIG_EDAC_AMD76X)		+= amd76x_edac.o
diff --git a/drivers/edac/edac_module.c b/drivers/edac/edac_module.c
index 506072e..0022bd9 100644
--- a/drivers/edac/edac_module.c
+++ b/drivers/edac/edac_module.c
@@ -14,6 +14,7 @@
 
 #ifdef CONFIG_EDAC_VMC
 #include <linux/vmc.h>
+#include "edac_vmc.h"
 #endif
 
 #define EDAC_VERSION "Ver: 2.1.0 " __DATE__
@@ -186,6 +187,11 @@ static int __init edac_init(void)
 		goto workq_fail;
 	}
 
+#ifdef CONFIG_EDAC_VMC
+	/* register vMC containment handlers */
+	vmc_register_containment();
+#endif
+
 	return 0;
 
 	/* Error teardown stack */
@@ -207,6 +213,10 @@ static void __exit edac_exit(void)
 {
 	debugf0("%s() exit started\n", __func__);
 
+#ifdef CONFIG_EDAC_VMC
+	/* unregister vMC containment handlers */
+	vmc_unregister_containment();
+#endif
 
 	/* tear down the various subsystems */
 	edac_workqueue_teardown();
diff --git a/drivers/edac/edac_vmc.h b/drivers/edac/edac_vmc.h
index 852f6c8..77167c0 100644
--- a/drivers/edac/edac_vmc.h
+++ b/drivers/edac/edac_vmc.h
@@ -155,4 +155,14 @@ int vmc_report_fault(int sensor_id, int sensor_lun, int action, int value,
  * Sensor IDs are statically assigned in *_edac_vmc.h chipset header files */
 void vmc_sensor_uninit(int sensor_id, int sensor_lun);
 
+
+/* Register vMC Containment Handlers
+ *   A matching containment handler will only be called on a sensor event if,
+ *   at sensor initialization, containment is enabled for that sensor. */
+void vmc_register_containment(void);
+
+
+/* Unregister all vMC containment handlers */
+void vmc_unregister_containment(void);
+
 #endif	/* _EDAC_VMC_H_ */
diff --git a/drivers/edac/edac_vmc_containment.c b/drivers/edac/edac_vmc_containment.c
new file mode 100644
index 0000000..55d0b7f
--- /dev/null
+++ b/drivers/edac/edac_vmc_containment.c
@@ -0,0 +1,62 @@
+/*
+ * edac_vmc_h.c, vMC Containment handlers and registration functions
+ *
+ * Copyright (c) 2008 Wind River Systems, Inc.
+ *
+ * Author: Matt Wagantall <matthew.wagantall@windriver.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ */
+
+#include <linux/vmc.h>
+#include <linux/reboot.h>
+
+#include "edac_vmc.h"
+
+/*
+ * Define containment handlers here:
+ */
+
+/* vMC containment hander for non-recoverable faults */
+static void containment_handler_restart(void)
+{
+	kernel_restart(NULL);
+}
+
+/* Register vMC Containment Handlers
+ *   A matching containment handler will only be called on a sensor event if,
+ *   at sensor initialization, containment is enabled for that sensor. */
+void vmc_register_containment(void)
+{
+	/* register restart containment handler for non-recoverable faults */
+	vMC_register_containment_handler(containment_handler_restart,
+				 SEVERITY_UPPER_NON_RECOVERABLE_GOING_HIGH);
+	vMC_register_containment_handler(containment_handler_restart,
+				 SEVERITY_LOWER_NON_RECOVERABLE_GOING_LOW);
+}
+
+/* Unregister all vMC containment handlers */
+void vmc_unregister_containment(void)
+{
+	int severity;
+
+	/* unregister all vMC containment handlers */
+	for (severity = SEVERITY_LOWER_NON_RECOVERABLE_GOING_LOW;
+	     severity <= SEVERITY_UPPER_NON_RECOVERABLE_GOING_HIGH;
+	     ++severity) {
+		vMC_register_containment_handler(NULL, severity);
+	}
+}
+
-- 
1.6.0.90.g436ed

