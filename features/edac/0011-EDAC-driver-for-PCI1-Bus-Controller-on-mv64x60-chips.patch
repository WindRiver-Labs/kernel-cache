From 0e2849838d8cb1bb0c9e67844b19098036a9edfd Mon Sep 17 00:00:00 2001
From: Rob Woolley <rob.woolley@windriver.com>
Date: Sat, 8 Nov 2008 13:20:18 -0500
Subject: [PATCH] EDAC driver for PCI1 Bus Controller on mv64x60 chipset

Add the EDAC driver for PCI1 Bus Controller on mv64x60 chipset.  Also
replaces the hard-coding of the name of a device's private structure with
that of platform device structure.

Signed-off-by: Harry Ciao <qingtao.cao@windriver.com>
Reviewed-by: Rob Woolley <rob.woolley@windriver.com>
---
 arch/powerpc/boot/dts/prpmc2800.dts |    9 ++++++++-
 drivers/edac/mv64x60_edac.c         |   32 +++++++++++++++++++++++---------
 2 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/arch/powerpc/boot/dts/prpmc2800.dts b/arch/powerpc/boot/dts/prpmc2800.dts
index 1ee6ff4..7791b01 100644
--- a/arch/powerpc/boot/dts/prpmc2800.dts
+++ b/arch/powerpc/boot/dts/prpmc2800.dts
@@ -281,12 +281,19 @@
 		};
 
 		pci-error@1d40 {
-			compatible = "marvell,mv64360-pci-error";
+			compatible = "marvell,mv64360-pci0-error";
 			reg = <0x1d40 0x40 0xc28 0x4>;
 			interrupts = <12>;
 			interrupt-parent = <&PIC>;
 		};
 
+		pci-error@1dc0 {
+			compatible = "marvell,mv64360-pci1-error";
+			reg = <0x1dc0 0x40 0xca8 0x4>;
+			interrupts = <16>;
+			interrupt-parent = <&PIC>;
+		};
+
 		mem-ctrl@1400 {
 			compatible = "marvell,mv64360-mem-ctrl";
 			reg = <0x1400 0x60>;
diff --git a/drivers/edac/mv64x60_edac.c b/drivers/edac/mv64x60_edac.c
index 083ce8d..14922dd 100644
--- a/drivers/edac/mv64x60_edac.c
+++ b/drivers/edac/mv64x60_edac.c
@@ -117,7 +117,7 @@ static int __devinit mv64x60_pci_err_probe(struct platform_device *pdev)
 	pdata = pci->pvt_info;
 
 	pdata->pci_hose = pdev->id;
-	pdata->name = "mpc85xx_pci_err";
+	pdata->name = pdev->name;
 	pdata->irq = NO_IRQ;
 	platform_set_drvdata(pdev, pci);
 	pci->dev = &pdev->dev;
@@ -219,11 +219,19 @@ static int mv64x60_pci_err_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static struct platform_driver mv64x60_pci_err_driver = {
+static struct platform_driver mv64x60_pci0_err_driver = {
 	.probe = mv64x60_pci_err_probe,
 	.remove = __devexit_p(mv64x60_pci_err_remove),
 	.driver = {
-		   .name = "mv64x60_pci_err",
+		   .name = "mv64x60_pci0_err",
+	}
+};
+
+static struct platform_driver mv64x60_pci1_err_driver = {
+	.probe = mv64x60_pci_err_probe,
+	.remove = __devexit_p(mv64x60_pci_err_remove),
+	.driver = {
+		   .name = "mv64x60_pci1_err",
 	}
 };
 
@@ -290,7 +298,7 @@ static int __devinit mv64x60_sram_err_probe(struct platform_device *pdev)
 	}
 
 	pdata = edac_dev->pvt_info;
-	pdata->name = "mv64x60_sram_err";
+	pdata->name = pdev->name;
 	pdata->irq = NO_IRQ;
 	edac_dev->dev = &pdev->dev;
 	platform_set_drvdata(pdev, edac_dev);
@@ -458,7 +466,7 @@ static int __devinit mv64x60_cpu_err_probe(struct platform_device *pdev)
 	}
 
 	pdata = edac_dev->pvt_info;
-	pdata->name = "mv64x60_cpu_err";
+	pdata->name = pdev->name;
 	pdata->irq = NO_IRQ;
 	edac_dev->dev = &pdev->dev;
 	platform_set_drvdata(pdev, edac_dev);
@@ -711,7 +719,7 @@ static int __devinit mv64x60_mc_err_probe(struct platform_device *pdev)
 	pdata = mci->pvt_info;
 	mci->dev = &pdev->dev;
 	platform_set_drvdata(pdev, mci);
-	pdata->name = "mv64x60_mc_err";
+	pdata->name = pdev->name;
 	pdata->irq = NO_IRQ;
 	mci->dev_name = pdev->dev.bus_id;
 	pdata->edac_idx = edac_mc_idx++;
@@ -862,10 +870,15 @@ static int __init mv64x60_edac_init(void)
 			"SRAM err failed to register\n");
 
 #ifdef CONFIG_PCI
-	ret = platform_driver_register(&mv64x60_pci_err_driver);
+	ret = platform_driver_register(&mv64x60_pci0_err_driver);
+	if (ret)
+		printk(KERN_WARNING EDAC_MOD_STR
+			"PCI0 err failed to register\n");
+
+	ret = platform_driver_register(&mv64x60_pci1_err_driver);
 	if (ret)
 		printk(KERN_WARNING EDAC_MOD_STR
-			"PCI err failed to register\n");
+			"PCI1 err failed to register\n");
 #endif
 
 	return ret;
@@ -875,7 +888,8 @@ module_init(mv64x60_edac_init);
 static void __exit mv64x60_edac_exit(void)
 {
 #ifdef CONFIG_PCI
-	platform_driver_unregister(&mv64x60_pci_err_driver);
+	platform_driver_unregister(&mv64x60_pci0_err_driver);
+	platform_driver_unregister(&mv64x60_pci1_err_driver);
 #endif
 	platform_driver_unregister(&mv64x60_sram_err_driver);
 	platform_driver_unregister(&mv64x60_cpu_err_driver);
-- 
1.6.0.90.g436ed

