From 6f98ef7ca40ff840e220b8a4396ee3cd52f4bccc Mon Sep 17 00:00:00 2001
From: Rob Woolley <rob.woolley@windriver.com>
Date: Sat, 8 Nov 2008 13:20:20 -0500
Subject: [PATCH] Bit definitions for MV64X60 PCI SERR Mask Register

This patch adds bits definitions for MV64X60 PCI SERR Mask Register, to make
it easier for us to enable new bits in the future.

Meanwhile, this patch fixes a bug with MV64X60_PCIx_ERR_MASK_VAL - it should
at least contain the bits defined in MV64X60_PCI_PE_MASK, so that the PCI
Parity Error could have a chance to generate interrupt sigal.

Last, it adds the "constant" attribute to the type of the name of a device's
private structure, to comply with that of platform_device.name.

Signed-off-by: Harry Ciao <qingtao.cao@windriver.com>
[rob.woolley@windriver.com: Modified comments to MV64X60_PCIx_ERR_MASK_VAL]
Reviewed-by: Rob Woolley <rob.woolley@windriver.com>
---
 drivers/edac/mv64x60_edac.h |   59 ++++++++++++++++++++++++++++++++----------
 1 files changed, 45 insertions(+), 14 deletions(-)

diff --git a/drivers/edac/mv64x60_edac.h b/drivers/edac/mv64x60_edac.h
index e042e2d..587a86c 100644
--- a/drivers/edac/mv64x60_edac.h
+++ b/drivers/edac/mv64x60_edac.h
@@ -54,12 +54,6 @@
 #define MV64X60_SDRAM_ECC		0x40000
 
 #ifdef CONFIG_PCI
-/*
- * Bit 0 of MV64x60_PCIx_ERR_MASK does not exist on the 64360 and because of
- * errata FEr-#11 and FEr-##16 for the 64460, it should be 0 on that chip as
- * well.  IOW, don't set bit 0.
- */
-#define MV64X60_PCIx_ERR_MASK_VAL	0x00a50c24
 
 /* Register offsets from PCIx error address low register */
 #define MV64X60_PCI_ERROR_ADDR_LO	0x00
@@ -69,20 +63,57 @@
 #define MV64X60_PCI_ERROR_CAUSE		0x18
 #define MV64X60_PCI_ERROR_MASK		0x1c
 
-#define MV64X60_PCI_ERR_SWrPerr		0x0002
-#define MV64X60_PCI_ERR_SRdPerr		0x0004
-#define	MV64X60_PCI_ERR_MWrPerr		0x0020
-#define MV64X60_PCI_ERR_MRdPerr		0x0040
+				     /* 0x00000001, reserved */
+#define MV64X60_PCI_ERR_SWrPerr		0x00000002
+#define MV64X60_PCI_ERR_SRdPerr		0x00000004
+				     /* 0x00000008, reserved */
+#define MV64X60_PCI_ERR_MIOErr		0x00000010
+#define	MV64X60_PCI_ERR_MWrPerr		0x00000020
+#define MV64X60_PCI_ERR_MRdPerr		0x00000040
+#define MV64X60_PCI_ERR_MCTabort	0x00000080
+#define MV64X60_PCI_ERR_MMabort		0x00000100
+#define MV64X60_PCI_ERR_MTabort		0x00000200
+#define MV64X60_PCI_ERR_MDis		0x00000400
+#define MV64X60_PCI_ERR_MRetry		0x00000800
+#define MV64X60_PCI_ERR_MDiscard	0x00001000
+#define MV64X60_PCI_ERR_MUnExp		0x00002000
+#define MV64X60_PCI_ERR_MErrMsg		0x00004000
+				     /* 0x00008000, reserved */
+#define MV64X60_PCI_ERR_SCMabort	0x00010000
+#define MV64X60_PCI_ERR_STabort		0x00020000
+#define MV64X60_PCI_ERR_SCTabort	0x00040000
+				     /* 0x00080000, reserved */
+#define MV64X60_PCI_ERR_SRdBuf		0x00100000
+#define MV64X60_PCI_ERR_Arb		0x00200000
+#define MV64X60_PCI_ERR_SRetry		0x00400000
+#define MV64X60_PCI_ERR_SCDestRd	0x00800000
 
+/*
+ * bits relevant to PCI Parity Error,
+ * all the rest would be handled in a Non-Parity-Err way
+ */
 #define MV64X60_PCI_PE_MASK	(MV64X60_PCI_ERR_SWrPerr | \
 				MV64X60_PCI_ERR_SRdPerr | \
 				MV64X60_PCI_ERR_MWrPerr | \
 				MV64X60_PCI_ERR_MRdPerr)
 
+/*
+ * Bit 0 of MV64x60_PCIx_ERR_MASK does not exist on the 64360 and because of
+ * errata FEr-#11 and FEr-##16 for the 64460, it should be 0 on that chip as
+ * well.  IOW, don't set bit 0.
+ */
+#define MV64X60_PCIx_ERR_MASK_VAL	(MV64X60_PCI_PE_MASK | \
+					MV64X60_PCI_ERR_MDis | \
+					MV64X60_PCI_ERR_MRetry | \
+					MV64X60_PCI_ERR_SCMabort | \
+					MV64X60_PCI_ERR_SCTabort | \
+					MV64X60_PCI_ERR_Arb | \
+					MV64X60_PCI_ERR_SCDestRd)
+
 struct mv64x60_pci_pdata {
 	int pci_hose;
 	void __iomem *pci_vbase;
-	char *name;
+	const char *name;
 	int irq;
 	int edac_idx;
 };
@@ -92,21 +123,21 @@ struct mv64x60_pci_pdata {
 struct mv64x60_mc_pdata {
 	void __iomem *mc_vbase;
 	int total_mem;
-	char *name;
+	const char *name;
 	int irq;
 	int edac_idx;
 };
 
 struct mv64x60_cpu_pdata {
 	void __iomem *cpu_vbase[2];
-	char *name;
+	const char *name;
 	int irq;
 	int edac_idx;
 };
 
 struct mv64x60_sram_pdata {
 	void __iomem *sram_vbase;
-	char *name;
+	const char *name;
 	int irq;
 	int edac_idx;
 };
-- 
1.6.0.90.g436ed

