From 76ea0136a81958600d9e853e2c9dde5cecdada82 Mon Sep 17 00:00:00 2001
From: Jason HU <yongqi.hu@windriver.com>
Date: Tue, 27 Apr 2010 23:24:46 -0700
Subject: [PATCH] EDAC: dump CPU registers if error was checked by IRQ

Expanded information was provided when an EDAC IRQ occurs by
dumping the value of CPU registers.

Signed-off-by: Jason HU <yongqi.hu@windriver.com>
---
 arch/powerpc/kernel/process.c |    4 ++++
 arch/x86/kernel/process.c     |    4 ++++
 drivers/edac/Kconfig          |    8 ++++++++
 drivers/edac/e7xxx_edac.c     |   20 ++++++++++++++++++++
 drivers/edac/mpc85xx_edac.c   |   28 ++++++++++++++++++++++++++++
 5 files changed, 64 insertions(+), 0 deletions(-)

diff --git a/arch/powerpc/kernel/process.c b/arch/powerpc/kernel/process.c
index 49f58eb..05c8afe 100644
--- a/arch/powerpc/kernel/process.c
+++ b/arch/powerpc/kernel/process.c
@@ -650,6 +650,10 @@ void show_regs(struct pt_regs * regs)
 		show_instructions(regs);
 }
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+EXPORT_SYMBOL(show_regs);
+#endif
+
 void exit_thread(void)
 {
 	discard_lazy_cpu_state();
diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c
index 940efff..b750dbc 100644
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@ -103,6 +103,10 @@ void show_regs(struct pt_regs *regs)
 		   regs->bp);
 }
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+EXPORT_SYMBOL(show_regs);
+#endif
+
 void show_regs_common(void)
 {
 	const char *board, *product;
diff --git a/drivers/edac/Kconfig b/drivers/edac/Kconfig
index 55c9c59..9f89bd5 100644
--- a/drivers/edac/Kconfig
+++ b/drivers/edac/Kconfig
@@ -260,4 +260,12 @@ config EDAC_CPC925
 	  a companion chip to the PowerPC 970 family of
 	  processors.
 
+config EDAC_DUMP_IRQ_REGS
+	bool 'dump CPU registers if error was checked by IRQ'
+	default n
+	depends on EDAC_E7XXX || EDAC_MPC85XX
+	help
+	 Expanded information was provided when an EDAC IRQ occurs by
+	 dumping the value of CPU registers.
+
 endif # EDAC
diff --git a/drivers/edac/e7xxx_edac.c b/drivers/edac/e7xxx_edac.c
index d4c3167..2fea555 100644
--- a/drivers/edac/e7xxx_edac.c
+++ b/drivers/edac/e7xxx_edac.c
@@ -35,6 +35,11 @@
 #include <linux/spinlock.h>
 #include "edac_core.h"
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+#include <asm/irq_regs.h>
+#include <linux/sched.h>
+#endif
+
 #define	E7XXX_REVISION " Ver: 2.0.2 " __DATE__
 #define	EDAC_MOD_STR	"e7xxx_edac"
 
@@ -345,6 +350,14 @@ static void e7501_hiX_err_check(struct edac_device_ctl_info *edac_dev)
 		pci_write_config_byte(dev_info->dev, E7501_HI_ERROR_REPORT_NERR, nerr);
 
 	edac_device_handle_ue(edac_dev, 0, 0, edac_dev->ctl_name);
+
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+	if (edac_op_state == EDAC_OPSTATE_NMI && (ferr || nerr)) {
+		struct pt_regs *regs = get_irq_regs();
+		if (regs)
+			show_regs(regs);
+	}
+#endif
 }
 static struct e7xxx_dev_info e7501_devs[] = {
 	/* The first element must be the memory controller device */
@@ -645,6 +658,13 @@ static int e7xxx_process_error_info(struct mem_ctl_info *mci,
 			process_sysbus_error(mci, info);
 	}
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+	if (edac_op_state == EDAC_OPSTATE_NMI && error_found) {
+		struct pt_regs *regs = get_irq_regs();
+		if (regs)
+			show_regs(regs);
+	}
+#endif
 	return error_found;
 }
 
diff --git a/drivers/edac/mpc85xx_edac.c b/drivers/edac/mpc85xx_edac.c
index 4471647..04f9c96 100644
--- a/drivers/edac/mpc85xx_edac.c
+++ b/drivers/edac/mpc85xx_edac.c
@@ -25,6 +25,10 @@
 #include "edac_core.h"
 #include "mpc85xx_edac.h"
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+#include <asm/irq_regs.h>
+#include <linux/sched.h>
+#endif
 static int edac_dev_idx;
 #ifdef CONFIG_PCI
 static int edac_pci_idx;
@@ -197,6 +201,14 @@ static irqreturn_t mpc85xx_pci_isr(int irq, void *dev_id)
 
 	mpc85xx_pci_check(pci);
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+	{
+		struct pt_regs *regs = get_irq_regs();
+		if (regs)
+			show_regs(regs);
+	}
+#endif
+
 	return IRQ_HANDLED;
 }
 
@@ -501,6 +513,14 @@ static irqreturn_t mpc85xx_l2_isr(int irq, void *dev_id)
 
 	mpc85xx_l2_check(edac_dev);
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+	{
+		struct pt_regs *regs = get_irq_regs();
+		if (regs)
+			show_regs(regs);
+	}
+#endif
+
 	return IRQ_HANDLED;
 }
 
@@ -877,6 +897,14 @@ static irqreturn_t mpc85xx_mc_isr(int irq, void *dev_id)
 
 	mpc85xx_mc_check(mci);
 
+#ifdef CONFIG_EDAC_DUMP_IRQ_REGS
+	{
+		struct pt_regs *regs = get_irq_regs();
+		if (regs)
+			show_regs(regs);
+	}
+#endif
+
 	return IRQ_HANDLED;
 }
 
-- 
1.6.5.2

