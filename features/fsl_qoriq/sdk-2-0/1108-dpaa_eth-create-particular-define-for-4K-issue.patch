From e33690e142a0f0c090e822ee258ecb319448f602 Mon Sep 17 00:00:00 2001
From: Marian-Cristian Rotariu <marian.rotariu@freescale.com>
Date: Tue, 27 Oct 2015 17:02:40 +0200
Subject: [PATCH 1108/1383] dpaa_eth: create particular define for 4K issue

Signed-off-by: Marian-Cristian Rotariu <marian.rotariu@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h    | 13 +++++++++++--
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c |  2 +-
 2 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
index 056ac827..1d9a292 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
@@ -661,11 +661,20 @@ static inline void _dpa_bp_free_pf(void *addr)
 	put_page(virt_to_head_page(addr));
 }
 
-#ifdef CONFIG_ARM64
+/* TODO: LS1043A SoC has a HW issue regarding FMan DMA transactions; The issue
+ * manifests itself at high traffic rates when frames exceed 4K memory
+ * boundaries; For the moment, we use a SW workaround to avoid frames larger
+ * than 4K or that exceed 4K alignements.
+ */
+#ifdef CONFIG_ARCH_FSL_LS1043A
+#define DPAA_LS1043A_DMA_4K_ISSUE	1
+#endif
+
+#ifdef DPAA_LS1043A_DMA_4K_ISSUE 
 #define HAS_DMA_ISSUE(start, size) \
 	(((u64)(start) ^ ((u64)(start) + (u64)(size))) & ~0xFFF)
 
 #define BOUNDARY_4K(start, size) (((u64)(start) + (u64)(size)) & ~0xFFF)
-#endif
+#endif  /* DPAA_LS1043A_DMA_4K_ISSUE  */
 
 #endif	/* __DPA_H */
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index 4ea0001..4c92424 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -96,7 +96,7 @@ static int _dpa_bp_add_8_bufs(const struct dpa_bp *dpa_bp)
 		 * We only need enough space to store a pointer, but allocate
 		 * an entire cacheline for performance reasons.
 		 */
-#ifdef CONFIG_ARM64
+#ifdef DPAA_LS1043A_DMA_4K_ISSUE
 		new_buf	= page_address(alloc_page(GFP_ATOMIC));
 #else
 		new_buf = netdev_alloc_frag(SMP_CACHE_BYTES + DPA_BP_RAW_SIZE);
-- 
2.8.1

