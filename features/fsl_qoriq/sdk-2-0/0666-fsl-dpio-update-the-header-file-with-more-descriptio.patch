From 169b274ae72ebb489fbc99f3802e21366c2dfb89 Mon Sep 17 00:00:00 2001
From: Haiying Wang <Haiying.wang@freescale.com>
Date: Tue, 10 Nov 2015 13:59:31 -0500
Subject: [PATCH 0666/1383] fsl-dpio: update the header file with more
 description in comments

plus fix some typos.

Signed-off-by: Haiying Wang <Haiying.wang@freescale.com>
Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/include/fsl_dpaa2_fd.h | 43 ++++++++++++++++++++++++++-
 drivers/staging/fsl-mc/include/fsl_dpaa2_io.h | 29 ++++++++++++++----
 2 files changed, 65 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/fsl-mc/include/fsl_dpaa2_fd.h b/drivers/staging/fsl-mc/include/fsl_dpaa2_fd.h
index bf478e4..4da18a2 100644
--- a/drivers/staging/fsl-mc/include/fsl_dpaa2_fd.h
+++ b/drivers/staging/fsl-mc/include/fsl_dpaa2_fd.h
@@ -33,6 +33,15 @@
 
 /**
  * struct dpaa2_fd - Place-holder for FDs.
+ * @words: for easier/faster copying the whole FD structure.
+ * @addr_lo: the lower 32 bits of the address in FD.
+ * @addr_hi: the upper 32 bits of the address in FD.
+ * @len: the length field in FD.
+ * @bpid_offset: represent the bpid and offset fields in FD
+ * @frc: frame context
+ * @ctrl: the 32bit control bits including dd, sc,... va, err.
+ * @flc_lo: the lower 32bit of flow context.
+ * @flc_hi: the upper 32bits of flow context.
  *
  * We represent it via the simplest form that we need for now. Different
  * overlays may be needed to support different options, etc. (It is impractical
@@ -77,7 +86,7 @@ enum dpaa2_fd_format {
  * dpaa2_fd_get_addr() - get the addr field of frame descriptor
  * @fd: the given frame descriptor.
  *
- * Return the address in the frame descritpor.
+ * Return the address in the frame descriptor.
  */
 static inline dma_addr_t dpaa2_fd_get_addr(const struct dpaa2_fd *fd)
 {
@@ -234,6 +243,10 @@ static inline void dpaa2_fd_set_bpid(struct dpaa2_fd *fd, uint16_t bpid)
 
 /**
  * struct dpaa2_sg_entry - the scatter-gathering structure
+ * @addr_lo: the lower 32bit of address
+ * @addr_hi: the upper 32bit of address
+ * @len: the length in this sg entry.
+ * @bpid_ofset: offset in the MS 16 bits, BPID in the LS 16 bits.
  */
 struct dpaa2_sg_entry {
 	u32 addr_lo;
@@ -396,6 +409,11 @@ static inline void dpaa2_sg_set_final(struct dpaa2_sg_entry *sg, bool final)
  * hardware and cpu
  */
 #ifdef __BIG_ENDIAN
+/**
+ * dpaa2_sg_cpu_to_le() - convert scatter gather entry from native cpu
+ * format little endian format.
+ * @sg: the given scatter gather entry.
+ */
 static inline void dpaa2_sg_cpu_to_le(struct dpaa2_sg_entry *sg)
 {
 	uint32_t *p = (uint32_t *)sg;
@@ -405,6 +423,11 @@ static inline void dpaa2_sg_cpu_to_le(struct dpaa2_sg_entry *sg)
 		cpu_to_le32s(p++);
 }
 
+/**
+ * dpaa2_sg_le_to_cpu() - convert scatter gather entry from little endian
+ * format to native cpu format.
+ * @sg: the given scatter gather entry.
+ */
 static inline void dpaa2_sg_le_to_cpu(struct dpaa2_sg_entry *sg)
 {
 	uint32_t *p = (uint32_t *)sg;
@@ -421,6 +444,14 @@ static inline void dpaa2_sg_le_to_cpu(struct dpaa2_sg_entry *sg)
 
 /**
  * struct dpaa2_fl_entry - structure for frame list entry.
+ * @addr_lo: the lower 32bit of address
+ * @addr_hi: the upper 32bit of address
+ * @len: the length in this sg entry.
+ * @bpid_ofset: offset in the MS 16 bits, BPID in the LS 16 bits.
+ * @frc: frame context
+ * @ctrl: the 32bit control bits including dd, sc,... va, err.
+ * @flc_lo: the lower 32bit of flow context.
+ * @flc_hi: the upper 32bits of flow context.
  *
  * Frame List Entry (FLE)
  * Identical to dpaa2_fd.simple layout, but some bits are different
@@ -584,6 +615,8 @@ static inline void dpaa2_fl_set_final(struct dpaa2_fl_entry *fle, bool final)
 
 /**
  * struct dpaa2_dq - the qman result structure
+ * @dont_manipulate_directly: the 16 32bit data to represent the whole
+ * possible qman dequeue result.
  *
  * When frames are dequeued, the FDs show up inside "dequeue" result structures
  * (if at all, not all dequeue results contain valid FDs). This structure type
@@ -596,13 +629,21 @@ struct dpaa2_dq {
 };
 
 /* Parsing frame dequeue results */
+/* FQ empty */
 #define DPAA2_DQ_STAT_FQEMPTY       0x80
+/* FQ held active */
 #define DPAA2_DQ_STAT_HELDACTIVE    0x40
+/* FQ force eligible */
 #define DPAA2_DQ_STAT_FORCEELIGIBLE 0x20
+/* Valid frame */
 #define DPAA2_DQ_STAT_VALIDFRAME    0x10
+/* FQ ODP enable */
 #define DPAA2_DQ_STAT_ODPVALID      0x04
+/* Volatile dequeue */
 #define DPAA2_DQ_STAT_VOLATILE      0x02
+/* volatile dequeue command is expired */
 #define DPAA2_DQ_STAT_EXPIRED       0x01
+
 /**
  * dpaa2_dq_flags() - Get the stat field of dequeue response
  */
diff --git a/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h b/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h
index cfa0fc6..636e8f8 100644
--- a/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h
+++ b/drivers/staging/fsl-mc/include/fsl_dpaa2_io.h
@@ -42,6 +42,15 @@ struct dpaa2_io_store;
 
 /**
  * struct dpaa2_io_desc - The DPIO descriptor.
+ * @receives_notifications: Use notificaton mode.
+ * @has_irq: use irq-based proessing.
+ * @will_poll: use poll processing.
+ * @has_8prio: set for channel with 8 priority WQs.
+ * @cpu: the cpu index that at least interrupt handlers will execute on.
+ * @stash_affinity: the stash affinity for this portal favour 'cpu'
+ * @regs_cena: the cache enabled regs.
+ * @regs_cinh: the cache inhibited regs.
+ * @dpio_id: The dpio index.
  *
  * Describe the attributes and features of the DPIO object.
  */
@@ -229,6 +238,16 @@ int dpaa2_io_service_has_nonaffine(struct dpaa2_io *s);
 
 /**
  * struct dpaa2_io_notification_ctx - The DPIO notification context structure.
+ * @cb: the callback to be invoked when the notification arrives.
+ * @is_cdan: Zero/FALSE for FQDAN, non-zero/TRUE for CDAN.
+ * @id: FQID or channel ID, needed for rearm.
+ * @desired_cpu: the cpu on which the notifications will show up.
+ * @actual_cpu: the cpu the notification actually shows up.
+ * @migration_cb: callback function used for migration.
+ * @dpio_id: the dpio index.
+ * @qman64: the 64-bit context value shows up in the FQDAN/CDAN.
+ * @node: the list node.
+ * @dpio_private: the dpio object internal to dpio_service.
  *
  * When a FQDAN/CDAN registration is made (eg. by DPNI/DPCON/DPAI code), a
  * context of the following type is used. The caller can embed it within a
@@ -237,11 +256,9 @@ int dpaa2_io_service_has_nonaffine(struct dpaa2_io *s);
  * notification context as a parameter).
  */
 struct dpaa2_io_notification_ctx {
-	/* the callback to be invoked when the notification arrives */
 	void (*cb)(struct dpaa2_io_notification_ctx *);
-	/* Zero/FALSE for FQDAN, non-zero/TRUE for CDAN */
 	int is_cdan;
-	uint32_t id; /* FQID or channel ID, needed for rearm */
+	uint32_t id;
 	/* This specifies which cpu the user wants notifications to show up on
 	 * (ie. to execute 'cb'). If notification-handling on that cpu is not
 	 * available at the time of notification registration, the registration
@@ -283,7 +300,7 @@ struct dpaa2_io_notification_ctx {
  * dpaa2_io_service_register() - Prepare for servicing of FQDAN or CDAN
  * notifications on the given DPIO service.
  * @service: the given DPIO service.
- * @ctx: the notificaiton context.
+ * @ctx: the notification context.
  *
  * The MC command to attach the caller's DPNI/DPCON/DPAI device to a
  * DPIO object is performed after this function is called. In that way, (a) the
@@ -302,7 +319,7 @@ int dpaa2_io_service_register(struct dpaa2_io *service,
 /**
  * dpaa2_io_service_deregister - The opposite of 'register'.
  * @service: the given DPIO service.
- * @ctx: the notificaiton context.
+ * @ctx: the notification context.
  *
  * Note that 'register' should be called *before*
  * making the MC call to attach the notification-producing device to the
@@ -318,7 +335,7 @@ int dpaa2_io_service_deregister(struct dpaa2_io *service,
 /**
  * dpaa2_io_service_rearm() - Rearm the notification for the given DPIO service.
  * @service: the given DPIO service.
- * @ctx: the notificaiton context.
+ * @ctx: the notification context.
  *
  * Once a FQDAN/CDAN has been produced, the corresponding FQ/channel is
  * considered "disarmed". Ie. the user can issue pull dequeue operations on that
-- 
2.8.1

