From 34df1a89f62c6efedeb518bc9e9fa381902255de Mon Sep 17 00:00:00 2001
From: Haiying Wang <Haiying.wang@freescale.com>
Date: Thu, 10 Dec 2015 10:40:07 -0500
Subject: [PATCH 0673/1383] fsl/dpio/qbman: Use qman version to determin dqrr
 size

Signed-off-by: Haiying Wang <Haiying.wang@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.c  | 12 ++++++++----
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.h  |  1 +
 drivers/staging/fsl-mc/bus/dpio/qbman_private.h |  4 ++++
 drivers/staging/fsl-mc/bus/dpio/qbman_sys.h     | 16 +++++++++-------
 4 files changed, 22 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
index 5aeae79..6c5638b 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
@@ -55,7 +55,7 @@
 #define QBMAN_CENA_SWP_VDQCR   0x780
 
 /* Reverse mapping of QBMAN_CENA_SWP_DQRR() */
-#define QBMAN_IDX_FROM_DQRR(p) (((unsigned long)p & 0xff) >> 6)
+#define QBMAN_IDX_FROM_DQRR(p) (((unsigned long)p & 0x1ff) >> 6)
 
 /* QBMan FQ management command codes */
 #define QBMAN_FQ_SCHEDULE	0x48
@@ -137,7 +137,11 @@ struct qbman_swp *qbman_swp_init(const struct qbman_swp_desc *d)
 #ifdef WORKAROUND_DQRR_RESET_BUG
 	p->dqrr.reset_bug = 1;
 #endif
-	ret = qbman_swp_sys_init(&p->sys, d);
+	if ((p->desc->qman_version & 0xFFFF0000) < QMAN_REV_4100)
+		p->dqrr.dqrr_size = 4;
+	else
+		p->dqrr.dqrr_size = 8;
+	ret = qbman_swp_sys_init(&p->sys, d, p->dqrr.dqrr_size);
 	if (ret) {
 		kfree(p);
 		pr_err("qbman_swp_sys_init() failed %d\n", ret);
@@ -637,7 +641,7 @@ const struct dpaa2_dq *qbman_swp_dqrr_next(struct qbman_swp *s)
 		 * (which increments one at a time), rather than on pi (which
 		 * can burst and wrap-around between our snapshots of it).
 		 */
-		if (s->dqrr.next_idx == (QBMAN_DQRR_SIZE - 1)) {
+		if (s->dqrr.next_idx == (s->dqrr.dqrr_size - 1)) {
 			pr_debug("DEBUG: next_idx=%d, pi=%d, clear reset bug\n",
 				s->dqrr.next_idx, pi);
 			s->dqrr.reset_bug = 0;
@@ -666,7 +670,7 @@ const struct dpaa2_dq *qbman_swp_dqrr_next(struct qbman_swp *s)
 	/* There's something there. Move "next_idx" attention to the next ring
 	 * entry (and prefetch it) before returning what we found. */
 	s->dqrr.next_idx++;
-	s->dqrr.next_idx &= QBMAN_DQRR_SIZE - 1; /* Wrap around at 4 */
+	s->dqrr.next_idx &= s->dqrr.dqrr_size - 1; /* Wrap around */
 	/* TODO: it's possible to do all this without conditionals, optimise it
 	 * later. */
 	if (!s->dqrr.next_idx)
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
index b3985f1..65ebf3f 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.h
@@ -94,6 +94,7 @@ struct qbman_swp {
 	struct {
 		uint32_t next_idx;
 		uint32_t valid_bit;
+		uint8_t dqrr_size;
 #ifdef WORKAROUND_DQRR_RESET_BUG
 		int reset_bug;
 #endif
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_private.h b/drivers/staging/fsl-mc/bus/dpio/qbman_private.h
index d874bca..e376b80 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_private.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_private.h
@@ -47,6 +47,10 @@
 
 #include "qbman_sys_decl.h"
 
+#define QMAN_REV_4000   0x04000000
+#define QMAN_REV_4100   0x04010000
+#define QMAN_REV_4101   0x04010001
+
 /* When things go wrong, it is a convenient trick to insert a few FOO()
  * statements in the code to trace progress. TODO: remove this once we are
  * hacking the code less actively.
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h b/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h
index 40d3d47..4849212 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h
@@ -259,16 +259,18 @@ static inline uint32_t qbman_set_swp_cfg(uint8_t max_fill, uint8_t wn,
 {
 	uint32_t reg;
 
-	reg = e32_uint8_t(20, 3, max_fill) | e32_uint8_t(16, 3, est) |
-		e32_uint8_t(12, 2, rpm) | e32_uint8_t(10, 2, dcm) |
-		e32_uint8_t(8, 2, epm) | e32_int(5, 1, sd) |
-		e32_int(4, 1, sp) | e32_int(3, 1, se) | e32_int(2, 1, dp) |
-		e32_int(1, 1, de) | e32_int(0, 1, ep) |	e32_uint8_t(14, 1, wn);
+	reg = e32_uint8_t(20, (uint32_t)(3 + (max_fill >> 3)), max_fill) |
+		e32_uint8_t(16, 3, est) | e32_uint8_t(12, 2, rpm) |
+		e32_uint8_t(10, 2, dcm) | e32_uint8_t(8, 2, epm) |
+		e32_int(5, 1, sd) | e32_int(4, 1, sp) | e32_int(3, 1, se) |
+		e32_int(2, 1, dp) | e32_int(1, 1, de) | e32_int(0, 1, ep) |
+		e32_uint8_t(14, 1, wn);
 	return reg;
 }
 
 static inline int qbman_swp_sys_init(struct qbman_swp_sys *s,
-				     const struct qbman_swp_desc *d)
+				     const struct qbman_swp_desc *d,
+				     uint8_t dqrr_size)
 {
 	uint32_t reg;
 
@@ -288,7 +290,7 @@ static inline int qbman_swp_sys_init(struct qbman_swp_sys *s,
 	reg = qbman_cinh_read(s, QBMAN_CINH_SWP_CFG);
 	BUG_ON(reg);
 #endif
-	reg = qbman_set_swp_cfg(4, 0, 0, 3, 2, 3, 0, 1, 0, 1, 0, 0);
+	reg = qbman_set_swp_cfg(dqrr_size, 0, 0, 3, 2, 3, 0, 1, 0, 1, 0, 0);
 	qbman_cinh_write(s, QBMAN_CINH_SWP_CFG, reg);
 	reg = qbman_cinh_read(s, QBMAN_CINH_SWP_CFG);
 	if (!reg) {
-- 
2.8.1

