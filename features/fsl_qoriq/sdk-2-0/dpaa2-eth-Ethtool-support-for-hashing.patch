From 42234dc69c7a25eb9df0236ed03d3de743c6d25b Mon Sep 17 00:00:00 2001
From: Alex Marginean <alexandru.marginean@freescale.com>
Date: Thu, 14 May 2015 14:13:40 +0300
Subject: [PATCH 0687/1429] dpaa2-eth: Ethtool support for hashing

Only one set of header fields is supported for all protocols, the driver
silently replaces previous configuration regardless of user selected
protocol.
Following fields are supported:
	L2DA
	VLAN tag
	L3 proto
	IP SA
	IP DA
	L4 bytes 0 & 1 [TCP/UDP src port]
	L4 bytes 2 & 3 [TCP/UDP dst port]

Signed-off-by: Alex Marginean <alexandru.marginean@freescale.com>

Change-Id: I97c9dac1b842fe6bc7115e40c08c42f67dee8c9c
Reviewed-on: http://git.am.freescale.net:8181/37260
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c     |   83 +---------
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h     |   13 ++
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c |  169 +++++++++++++++++++-
 3 files changed, 184 insertions(+), 81 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
index 9d3cea1..9c363aa 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
@@ -1602,11 +1602,7 @@ static int ldpaa_dpni_bind(struct ldpaa_eth_priv *priv)
 {
 	struct net_device *net_dev = priv->net_dev;
 	struct device *dev = net_dev->dev.parent;
-	struct dpni_rx_tc_dist_cfg dist_cfg;
-	struct dpkg_profile_cfg key_cfg;
 	struct dpni_pools_cfg pools_params;
-	void *dist_mem;
-	dma_addr_t dist_dma_mem;
 	int err = 0;
 	int i;
 
@@ -1619,79 +1615,11 @@ static int ldpaa_dpni_bind(struct ldpaa_eth_priv *priv)
 		return err;
 	}
 
-	memset(&dist_cfg, 0, sizeof(dist_cfg));
-
-	/* MC does nasty things to the dist_size value that we provide, but
-	 * doesn't offer any getter function for the value they compute and
-	 * subsequently use.
-	 * So we basically must provide the desired value minus one, and account
-	 * for the roundup to the next power of two that's done inside MC.
-	 */
-	dist_cfg.dist_size = num_possible_cpus() - 1;
-	dist_cfg.dist_mode = DPNI_DIST_MODE_HASH;
-
-	memset(&key_cfg, 0, sizeof(key_cfg));
-	key_cfg.num_extracts = 4;
-	/* IP source address */
-	key_cfg.extracts[0].type = DPKG_EXTRACT_FROM_HDR;
-	key_cfg.extracts[0].extract.from_hdr.prot = NET_PROT_IP;
-	key_cfg.extracts[0].extract.from_hdr.type = DPKG_FULL_FIELD;
-	key_cfg.extracts[0].extract.from_hdr.field = NH_FLD_IP_SRC;
-	key_cfg.extracts[0].num_of_byte_masks = 0;
-	/* IP destination address */
-	key_cfg.extracts[1].type = DPKG_EXTRACT_FROM_HDR;
-	key_cfg.extracts[1].extract.from_hdr.prot = NET_PROT_IP;
-	key_cfg.extracts[1].extract.from_hdr.type = DPKG_FULL_FIELD;
-	key_cfg.extracts[1].extract.from_hdr.field = NH_FLD_IP_DST;
-	key_cfg.extracts[1].num_of_byte_masks = 0;
-	/* UDP source port */
-	key_cfg.extracts[2].type = DPKG_EXTRACT_FROM_HDR;
-	key_cfg.extracts[2].extract.from_hdr.prot = NET_PROT_UDP;
-	key_cfg.extracts[2].extract.from_hdr.type = DPKG_FULL_FIELD;
-	key_cfg.extracts[2].extract.from_hdr.field = NH_FLD_UDP_PORT_SRC;
-	key_cfg.extracts[2].num_of_byte_masks = 0;
-	/* UDP destination port */
-	key_cfg.extracts[3].type = DPKG_EXTRACT_FROM_HDR;
-	key_cfg.extracts[3].extract.from_hdr.prot = NET_PROT_UDP;
-	key_cfg.extracts[3].extract.from_hdr.type = DPKG_FULL_FIELD;
-	key_cfg.extracts[3].extract.from_hdr.field = NH_FLD_UDP_PORT_DST;
-	key_cfg.extracts[3].num_of_byte_masks = 0;
-	/* Note: The above key works well for TCP also, as MC translates
-	 * the UDP extract field values to generic L4 source/destination ports
+	/* have the interface implicitly distribute traffic based on supported
+	 * header fields
 	 */
-
-	dist_mem = kzalloc(256, GFP_KERNEL);
-	if (unlikely(!dist_mem)) {
-		netdev_err(priv->net_dev, "kzalloc() failed\n");
-		return -ENOMEM;
-	}
-
-	/* The function writes into dist_mem, so we must call it before
-	 * dma-mapping the buffer.
-	 */
-	err = dpni_prepare_key_cfg(&key_cfg, dist_mem);
-	if (unlikely(err)) {
-		dev_err(dev, "dpni_prepare_key_cfg error %d", err);
-		goto err_key_cfg;
-	}
-
-	/* Prepare for setting the rx dist */
-	dist_dma_mem = dma_map_single(dev, dist_mem, 256, DMA_BIDIRECTIONAL);
-	if (unlikely(dma_mapping_error(dev, dist_dma_mem))) {
-		netdev_err(priv->net_dev, "DMA mapping failed\n");
-		err = -ENOMEM;
-		goto err_map;
-	}
-	dist_cfg.key_cfg_iova = dist_dma_mem;
-
-	err = dpni_set_rx_tc_dist(priv->mc_io, priv->mc_token, 0, &dist_cfg);
-
-	/* Regardless of return status, we can now unmap and free the IOVA */
-	dma_unmap_single(dev, dist_dma_mem, 256, DMA_BIDIRECTIONAL);
-	kfree(dist_mem);
-
+	err = ldpaa_set_hash(net_dev, LDPAA_RXH_SUPPORTED);
 	if (unlikely(err)) {
-		netdev_err(priv->net_dev, "dpni_set_rx_tc_dist() failed\n");
 		return err;
 	}
 
@@ -1712,11 +1640,6 @@ static int ldpaa_dpni_bind(struct ldpaa_eth_priv *priv)
 	}
 
 	return 0;
-
-err_map:
-err_key_cfg:
-	kfree(dist_mem);
-	return err;
 }
 
 static int ldpaa_eth_alloc_rings(struct ldpaa_eth_priv *priv)
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
index 2ee6feb..339d4f5 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
@@ -259,8 +259,21 @@ struct ldpaa_eth_priv {
 
 	struct dpni_link_state link_state;
 	struct task_struct *poll_thread;
+
+	/* enabled ethtool hashing bits */
+	u64 rx_hash_fields;
 };
 
+/* default Rx hash options, set during probing */
+#define LDPAA_RXH_SUPPORTED	(RXH_L2DA | RXH_VLAN | RXH_L3_PROTO \
+				| RXH_IP_SRC | RXH_IP_DST | RXH_L4_B_0_1 \
+				| RXH_L4_B_2_3)
+
 extern const struct ethtool_ops ldpaa_ethtool_ops;
 
+/* Set RX hash options
+ * flags is a combination of RXH_ bits
+ */
+int ldpaa_set_hash(struct net_device *net_dev, u64 flags);
+
 #endif	/* __LDPAA_H */
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
index f8aba9c..4fa972d 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
@@ -1,4 +1,4 @@
-/* Copyright 2014 Freescale Semiconductor Inc.
+/* Copyright 2014-2015 Freescale Semiconductor Inc.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -32,6 +32,9 @@
 #include "../../fsl-mc/include/dpni.h"	/* DPNI_LINK_OPT_* */
 #include "ldpaa_eth.h"
 
+/* size of DMA memory used to pass configuration to classifier, in bytes */
+#define LDPAA_CLASSIFIER_DMA_SIZE 256
+
 /* To be kept in sync with 'enum dpni_counter' */
 char ldpaa_ethtool_stats[][ETH_GSTRING_LEN] = {
 	"rx frames",
@@ -245,6 +248,168 @@ static void ldpaa_get_ethtool_stats(struct net_device *net_dev,
 #endif
 }
 
+static const struct ldpaa_hash_fields {
+	u64 rxnfc_field;
+	enum net_prot cls_prot;
+	int cls_field;
+} ldpaa_hash_fields[] = {
+	{
+		.rxnfc_field = RXH_L2DA,
+		.cls_prot = NET_PROT_ETH,
+		.cls_field = NH_FLD_ETH_DA,
+	}, {
+		.rxnfc_field = RXH_VLAN,
+		.cls_prot = NET_PROT_VLAN,
+		.cls_field = NH_FLD_VLAN_TCI,
+	}, {
+		.rxnfc_field = RXH_L3_PROTO,
+		.cls_prot = NET_PROT_IP,
+		.cls_field = NH_FLD_IP_PROTO,
+	}, {
+		/* following fields apply both to IPv4 and IPv6 */
+		.rxnfc_field = RXH_IP_SRC,
+		.cls_prot = NET_PROT_IP,
+		.cls_field = NH_FLD_IP_SRC,
+	}, {
+		.rxnfc_field = RXH_IP_DST,
+		.cls_prot = NET_PROT_IP,
+		.cls_field = NH_FLD_IP_DST,
+	}, {
+		/* Using UDP ports, this is functionally equivalent to raw
+		 * byte pairs from L4 header.
+		 */
+		.rxnfc_field = RXH_L4_B_0_1,
+		.cls_prot = NET_PROT_UDP,
+		.cls_field = NH_FLD_UDP_PORT_SRC,
+	}, {
+		.rxnfc_field = RXH_L4_B_2_3,
+		.cls_prot = NET_PROT_UDP,
+		.cls_field = NH_FLD_UDP_PORT_DST,
+	},
+};
+
+int ldpaa_set_hash(struct net_device *net_dev, u64 flags)
+{
+	struct ldpaa_eth_priv *priv = netdev_priv(net_dev);
+	struct dpkg_profile_cfg cls_cfg;
+	struct dpni_rx_tc_dist_cfg dist_cfg;
+	u8 *dma_mem;
+	u64 enabled_flags = 0;
+	int i;
+	int err = 0;
+
+	if (flags & ~LDPAA_RXH_SUPPORTED) {
+		/* RXH_DISCARD is not supported */
+		netdev_err(net_dev,
+			   "unsupported option selected, supported options are: mvtsdfn\n");
+		return -EOPNOTSUPP;
+	}
+
+	memset(&cls_cfg, 0, sizeof(cls_cfg));
+
+	for (i = 0; i < ARRAY_SIZE(ldpaa_hash_fields); i++) {
+		if (flags & ldpaa_hash_fields[i].rxnfc_field) {
+			struct dpkg_extract *key =
+				&cls_cfg.extracts[cls_cfg.num_extracts];
+
+			if (cls_cfg.num_extracts >= DPKG_MAX_NUM_OF_EXTRACTS) {
+				netdev_err(net_dev,
+					"error adding key extraction rule, too many rules?\n");
+				return -E2BIG;
+			}
+
+			key->type = DPKG_EXTRACT_FROM_HDR;
+			key->extract.from_hdr.prot =
+				ldpaa_hash_fields[i].cls_prot;
+			key->extract.from_hdr.type = DPKG_FULL_FIELD;
+			key->extract.from_hdr.field =
+				ldpaa_hash_fields[i].cls_field;
+			cls_cfg.num_extracts++;
+
+			enabled_flags |= ldpaa_hash_fields[i].rxnfc_field;
+		}
+	}
+
+	dma_mem =  kzalloc(LDPAA_CLASSIFIER_DMA_SIZE, GFP_DMA | GFP_KERNEL);
+
+	err = dpni_prepare_key_cfg(&cls_cfg, dma_mem);
+	if (unlikely(err)) {
+		dev_err(net_dev->dev.parent,
+			"dpni_prepare_key_cfg error %d", err);
+		return err;
+	}
+
+	memset(&dist_cfg, 0, sizeof(dist_cfg));
+
+	/* Prepare for setting the rx dist */
+	dist_cfg.key_cfg_iova = dma_map_single(net_dev->dev.parent, dma_mem,
+					       LDPAA_CLASSIFIER_DMA_SIZE,
+					       DMA_TO_DEVICE);
+	if (unlikely(dma_mapping_error(net_dev->dev.parent,
+				       dist_cfg.key_cfg_iova))) {
+		netdev_err(net_dev, "DMA mapping failed\n");
+		return -ENOMEM;
+	}
+
+	/* TODO: should be # of device queues */
+	dist_cfg.dist_size = num_possible_cpus() - 1;
+	dist_cfg.dist_mode = DPNI_DIST_MODE_HASH;
+
+	err = dpni_set_rx_tc_dist(priv->mc_io, priv->mc_token, 0, &dist_cfg);
+	dma_unmap_single(net_dev->dev.parent, dist_cfg.key_cfg_iova,
+			 LDPAA_CLASSIFIER_DMA_SIZE, DMA_TO_DEVICE);
+	kfree(dma_mem);
+	if (unlikely(err)) {
+		netdev_err(net_dev, "dpni_set_rx_tc_dist() error %d\n", err);
+		return err;
+	}
+
+	priv->rx_hash_fields = enabled_flags;
+
+	return 0;
+}
+
+
+static int ldpaa_set_rxnfc(struct net_device *net_dev,
+			   struct ethtool_rxnfc *rxnfc)
+{
+	int err = 0;
+
+	switch (rxnfc->cmd) {
+	case ETHTOOL_SRXFH:
+		/* we purposely ignore cmd->flow_type for now, because the
+		 * classifier only supports a single set of fields for all
+		 * protocols
+		 */
+		err = ldpaa_set_hash(net_dev, rxnfc->data);
+		break;
+	default:
+		err = -EOPNOTSUPP;
+	}
+
+	return err;
+}
+
+static int ldpaa_get_rxnfc(struct net_device *net_dev,
+			   struct ethtool_rxnfc *rxnfc, u32 *rule_locs)
+{
+	struct ldpaa_eth_priv *priv = netdev_priv(net_dev);
+
+	switch (rxnfc->cmd) {
+	case ETHTOOL_GRXFH:
+		/* we purposely ignore cmd->flow_type for now, because the
+		 * classifier only supports a single set of fields for all
+		 * protocols
+		 */
+		rxnfc->data = priv->rx_hash_fields;
+		break;
+	default:
+		return -EOPNOTSUPP;
+	}
+
+	return 0;
+}
+
 const struct ethtool_ops ldpaa_ethtool_ops = {
 	.get_drvinfo = ldpaa_get_drvinfo,
 	.get_msglevel = ldpaa_get_msglevel,
@@ -255,4 +420,6 @@ const struct ethtool_ops ldpaa_ethtool_ops = {
 	.get_sset_count = ldpaa_get_sset_count,
 	.get_ethtool_stats = ldpaa_get_ethtool_stats,
 	.get_strings = ldpaa_get_strings,
+	.get_rxnfc = ldpaa_get_rxnfc,
+	.set_rxnfc = ldpaa_set_rxnfc,
 };
-- 
1.7.5.4

