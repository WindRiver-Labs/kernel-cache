From b0fe8619ec1fdd2747183e22b50fd75488354a7c Mon Sep 17 00:00:00 2001
From: Alex Porosanu <alexandru.porosanu@nxp.com>
Date: Fri, 6 May 2016 10:41:14 +0300
Subject: [PATCH 1351/1383] dpaa_eth: refactor FQs initialization

All dpaa_ethernet drivers (macless, shared, generic) share the same
FQ initalization metholodogy: iterate through the list of interface FQs
and attempt to initialize them. This can be refactored into one common
function.

Signed-off-by: Alex Porosanu <alexandru.porosanu@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c |  9 +++-----
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.c  | 17 +++++++++++++++
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.h  |  1 +
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_macless.c | 25 ++++++++++------------
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_shared.c  |  9 +++-----
 5 files changed, 35 insertions(+), 26 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
index 507858f..bc219c3 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
@@ -884,7 +884,6 @@ dpaa_eth_priv_probe(struct platform_device *_of_dev)
 	struct device *dev;
 	struct device_node *dpa_node;
 	struct dpa_bp *dpa_bp;
-	struct dpa_fq *dpa_fq, *tmp;
 	size_t count = 1;
 	struct net_device *net_dev = NULL;
 	struct dpa_priv_s *priv = NULL;
@@ -1026,11 +1025,9 @@ dpaa_eth_priv_probe(struct platform_device *_of_dev)
 	}
 
 	/* Add the FQs to the interface, and make them active */
-	list_for_each_entry_safe(dpa_fq, tmp, &priv->dpa_fq_list, list) {
-		err = dpa_fq_init(dpa_fq, false);
-		if (err < 0)
-			goto fq_alloc_failed;
-	}
+	err = dpa_fqs_init(dev,  &priv->dpa_fq_list, false);
+	if (err < 0)
+		goto fq_alloc_failed;
 
 	priv->buf_layout = buf_layout;
 	priv->tx_headroom = dpa_get_headroom(&priv->buf_layout[TX]);
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
index 2f8870c..f753d44 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
@@ -1474,6 +1474,23 @@ dpa_fq_free(struct device *dev, struct list_head *list)
 }
 EXPORT_SYMBOL(dpa_fq_free);
 
+int dpa_fqs_init(struct device *dev, struct list_head *list, bool td_enable)
+{
+	int  _errno, __errno;
+	struct dpa_fq	*dpa_fq, *tmp;
+
+	_errno = 0;
+	list_for_each_entry_safe(dpa_fq, tmp, list, list) {
+		__errno = dpa_fq_init(dpa_fq, td_enable);
+		if (unlikely(__errno < 0) && _errno >= 0) {
+			_errno = __errno;
+			break;
+		}
+	}
+
+	return _errno;
+}
+EXPORT_SYMBOL(dpa_fqs_init);
 static void
 dpaa_eth_init_tx_port(struct fm_port *port, struct dpa_fq *errq,
 		struct dpa_fq *defq, struct dpa_buffer_layout_s *buf_layout)
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
index 306ea4c..3cf6ce3 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
@@ -194,6 +194,7 @@ int dpaa_eth_cgr_init(struct dpa_priv_s *priv);
 void dpa_fq_setup(struct dpa_priv_s *priv, const struct dpa_fq_cbs_t *fq_cbs,
 		struct fm_port *tx_port);
 int dpa_fq_init(struct dpa_fq *dpa_fq, bool td_enable);
+int dpa_fqs_init(struct device *dev, struct list_head *list, bool td_enable);
 int __cold __attribute__((nonnull))
 dpa_fq_free(struct device *dev, struct list_head *list);
 void dpaa_eth_init_ports(struct mac_device *mac_dev,
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_macless.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_macless.c
index 393de9b..e0faecc 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_macless.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_macless.c
@@ -306,7 +306,6 @@ static int dpaa_eth_macless_probe(struct platform_device *_of_dev)
 	struct device *dev;
 	struct device_node *dpa_node;
 	struct dpa_bp *dpa_bp;
-	struct dpa_fq *dpa_fq, *tmp;
 	size_t count;
 	struct net_device *net_dev = NULL;
 	struct dpa_priv_s *priv = NULL;
@@ -408,19 +407,17 @@ static int dpaa_eth_macless_probe(struct platform_device *_of_dev)
 	dpa_fq_setup(priv, &shared_fq_cbs, NULL);
 
 	/* Add the FQs to the interface, and make them active */
-	list_for_each_entry_safe(dpa_fq, tmp, &priv->dpa_fq_list, list) {
-		/* For MAC-less devices we only get here for RX frame queues
-		 * initialization, which are the TX queues of the other
-		 * partition.
-		 * It is safe to rely on one partition to set the FQ taildrop
-		 * threshold for the TX queues of the other partition
-		 * because the ERN notifications will be received by the
-		 * partition doing qman_enqueue.
-		 */
-		err = dpa_fq_init(dpa_fq, true);
-		if (err < 0)
-			goto fq_alloc_failed;
-	}
+	/* For MAC-less devices we only get here for RX frame queues
+	 * initialization, which are the TX queues of the other
+	 * partition.
+	 * It is safe to rely on one partition to set the FQ taildrop
+	 * threshold for the TX queues of the other partition
+	 * because the ERN notifications will be received by the
+	 * partition doing qman_enqueue.
+	 */
+	err = dpa_fqs_init(dev,  &priv->dpa_fq_list, true);
+	if (err < 0)
+		goto fq_alloc_failed;
 
 	priv->tx_headroom = DPA_DEFAULT_TX_HEADROOM;
 
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_shared.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_shared.c
index da50dc4..f7fc4bf 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_shared.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_shared.c
@@ -682,7 +682,6 @@ dpaa_eth_shared_probe(struct platform_device *_of_dev)
 	struct device *dev;
 	struct device_node *dpa_node;
 	struct dpa_bp *dpa_bp;
-	struct dpa_fq *dpa_fq, *tmp;
 	size_t count;
 	struct net_device *net_dev = NULL;
 	struct dpa_priv_s *priv = NULL;
@@ -797,11 +796,9 @@ dpaa_eth_shared_probe(struct platform_device *_of_dev)
 	}
 
 	/* Add the FQs to the interface, and make them active */
-	list_for_each_entry_safe(dpa_fq, tmp, &priv->dpa_fq_list, list) {
-		err = dpa_fq_init(dpa_fq, false);
-		if (err < 0)
-			goto fq_alloc_failed;
-	}
+	err = dpa_fqs_init(dev,  &priv->dpa_fq_list, false);
+	if (err < 0)
+		goto fq_alloc_failed;
 
 	priv->buf_layout = buf_layout;
 	priv->tx_headroom =
-- 
2.8.1

