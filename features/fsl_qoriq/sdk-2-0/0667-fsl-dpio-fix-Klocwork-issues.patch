From c7c9c3a6e4e32497c53ad97ee9207124c50110a5 Mon Sep 17 00:00:00 2001
From: Haiying Wang <Haiying.wang@freescale.com>
Date: Wed, 11 Nov 2015 16:34:34 -0500
Subject: [PATCH 0667/1383] fsl-dpio: fix Klocwork issues.

Signed-off-by: Haiying Wang <Haiying.wang@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/dpio_service.c  | 10 +++++-----
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.c  |  2 +-
 drivers/staging/fsl-mc/bus/dpio/qbman_private.h |  2 +-
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
index 4f62f9d..8b5f722 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio_service.c
@@ -472,7 +472,7 @@ int dpaa2_io_service_register(struct dpaa2_io *d,
 	if (ctx->is_cdan)
 		/* Enable the generation of CDAN notifications */
 		qbman_swp_CDAN_set_context_enable(d->object.swp,
-						  ctx->id,
+						  (uint16_t)ctx->id,
 						  ctx->qman64);
 	return 0;
 }
@@ -489,7 +489,7 @@ int dpaa2_io_service_deregister(struct dpaa2_io *service,
 	BUG_ON((service != d) && (service != d->object.service));
 	if (ctx->is_cdan)
 		qbman_swp_CDAN_disable(d->object.swp,
-				       ctx->id);
+				       (uint16_t)ctx->id);
 	spin_lock_irqsave(&d->object.lock_notifications, irqflags);
 	list_del(&ctx->node);
 	spin_unlock_irqrestore(&d->object.lock_notifications, irqflags);
@@ -508,7 +508,7 @@ int dpaa2_io_service_rearm(struct dpaa2_io *d,
 		return -ENODEV;
 	spin_lock_irqsave(&d->object.lock_mgmt_cmd, irqflags);
 	if (ctx->is_cdan)
-		err = qbman_swp_CDAN_enable(d->object.swp, ctx->id);
+		err = qbman_swp_CDAN_enable(d->object.swp, (uint16_t)ctx->id);
 	else
 		err = qbman_swp_fq_schedule(d->object.swp, ctx->id);
 	spin_unlock_irqrestore(&d->object.lock_mgmt_cmd, irqflags);
@@ -565,7 +565,7 @@ int dpaa2_io_service_pull_fq(struct dpaa2_io *d, uint32_t fqid,
 
 	qbman_pull_desc_clear(&pd);
 	qbman_pull_desc_set_storage(&pd, s->vaddr, s->paddr, 1);
-	qbman_pull_desc_set_numframes(&pd, s->max);
+	qbman_pull_desc_set_numframes(&pd, (uint8_t)s->max);
 	qbman_pull_desc_set_fq(&pd, fqid);
 	d = _service_select(d);
 	if (!d)
@@ -586,7 +586,7 @@ int dpaa2_io_service_pull_channel(struct dpaa2_io *d, uint32_t channelid,
 
 	qbman_pull_desc_clear(&pd);
 	qbman_pull_desc_set_storage(&pd, s->vaddr, s->paddr, 1);
-	qbman_pull_desc_set_numframes(&pd, s->max);
+	qbman_pull_desc_set_numframes(&pd, (uint8_t)s->max);
 	qbman_pull_desc_set_channel(&pd, channelid, qbman_pull_type_active);
 	d = _service_select(d);
 	if (!d)
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
index 584265d..5aeae79 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
@@ -459,7 +459,7 @@ void qbman_swp_push_set(struct qbman_swp *s, uint8_t channel_idx, int enable)
 	qb_attr_code_encode(&code, &s->sdq, !!enable);
 	/* Read make the complete src map.  If no channels are enabled
 	   the SDQCR must be 0 or else QMan will assert errors */
-	dqsrc = qb_attr_code_decode(&code_sdqcr_dqsrc, &s->sdq);
+	dqsrc = (uint16_t)qb_attr_code_decode(&code_sdqcr_dqsrc, &s->sdq);
 	if (dqsrc != 0)
 		qbman_cinh_write(&s->sys, QBMAN_CINH_SWP_SDQCR, s->sdq);
 	else
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_private.h b/drivers/staging/fsl-mc/bus/dpio/qbman_private.h
index a75b9de..d874bca 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_private.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_private.h
@@ -63,7 +63,7 @@
  */
 #define DBG_POLL_START(loopvar) (loopvar = 10)
 #define DBG_POLL_CHECK(loopvar) \
-	do {if (!(loopvar--)) BUG_ON(NULL == "DBG_POLL_CHECK"); } while (0)
+	do {if (!(loopvar--)) BUG_ON(1); } while (0)
 
 /* For CCSR or portal-CINH registers that contain fields at arbitrary offsets
  * and widths, these macro-generated encode/decode/isolate/remove inlines can
-- 
2.8.1

