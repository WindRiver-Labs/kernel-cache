From 2f42d08a3929355698864c8b8e0aa58d12491bef Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Mon, 26 Oct 2015 23:24:47 +0200
Subject: [PATCH 0756/1429] dpaa-eth: Integrate Flib version 0.7.1.2

Although API-compatible with 0.7.1.1, there are some ABI changes
that warrant a new integration.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/dpkg.h     |   10 +++++-----
 drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h |   10 ++++++++--
 drivers/staging/fsl-dpaa2/ethernet/dpni.h     |   10 +++-------
 3 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpkg.h b/drivers/staging/fsl-dpaa2/ethernet/dpkg.h
index d920446..f6945d9 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpkg.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpkg.h
@@ -123,12 +123,12 @@ struct dpkg_extract {
 		 */
 
 		struct {
-			enum net_prot prot;
+			enum net_prot		prot;
 			enum dpkg_extract_from_hdr_type type;
-			uint32_t field;
-			uint8_t size;
-			uint8_t offset;
-			uint8_t hdr_index;
+			uint32_t		field;
+			uint8_t			size;
+			uint8_t			offset;
+			uint8_t			hdr_index;
 		} from_hdr;
 		/**
 		 * struct from_data - Used when 'type = DPKG_EXTRACT_FROM_DATA'
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h b/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h
index 8d2b25d..ca74700 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpni-cmd.h
@@ -620,6 +620,8 @@ do { \
 	MC_CMD_OP(cmd, 0, 44, 1,  int,	    cfg->l4_chksum_gen);\
 	MC_CMD_OP(cmd, 0, 45, 1,  int,	    \
 		cfg->conf_err_cfg.use_default_queue);\
+	MC_CMD_OP(cmd, 0, 46, 1,  int,      \
+			cfg->conf_err_cfg.queue_cfg.order_preservation_en);\
 	MC_CMD_OP(cmd, 0, 48, 16, uint16_t, flow_id);\
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, \
 		cfg->conf_err_cfg.queue_cfg.user_ctx);\
@@ -650,6 +652,8 @@ do { \
 	MC_RSP_OP(cmd, 0, 44, 1,  int,	    attr->l4_chksum_gen);\
 	MC_RSP_OP(cmd, 0, 45, 1,  int,	    \
 			attr->conf_err_attr.use_default_queue);\
+	MC_RSP_OP(cmd, 0, 46, 1,  int,      \
+			attr->conf_err_attr.queue_attr.order_preservation_en);\
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, \
 			attr->conf_err_attr.queue_attr.user_ctx);\
 	MC_RSP_OP(cmd, 2, 32, 32, uint32_t, \
@@ -689,7 +693,7 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, int,      attr->dest_cfg.dest_id); \
 	MC_RSP_OP(cmd, 0, 32, 8,  uint8_t,  attr->dest_cfg.priority);\
 	MC_RSP_OP(cmd, 0, 40, 2,  enum dpni_dest, attr->dest_cfg.dest_type); \
-	MC_CMD_OP(cmd, 0, 42, 1,  int,      attr->order_preservation_en);\
+	MC_RSP_OP(cmd, 0, 42, 1,  int,      attr->order_preservation_en);\
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, attr->user_ctx); \
 	MC_RSP_OP(cmd, 2, 32, 32, uint32_t, attr->fqid); \
 	MC_RSP_OP(cmd, 3, 0,  4,  enum dpni_flc_type, attr->flc_cfg.flc_type); \
@@ -725,7 +729,7 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, int,      attr->dest_cfg.dest_id); \
 	MC_RSP_OP(cmd, 0, 32, 8,  uint8_t,  attr->dest_cfg.priority);\
 	MC_RSP_OP(cmd, 0, 40, 2,  enum dpni_dest, attr->dest_cfg.dest_type);\
-	MC_CMD_OP(cmd, 0, 42, 1,  int,      attr->order_preservation_en);\
+	MC_RSP_OP(cmd, 0, 42, 1,  int,      attr->order_preservation_en);\
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, attr->user_ctx); \
 	MC_RSP_OP(cmd, 2, 32, 32, uint32_t, attr->fqid); \
 	MC_RSP_OP(cmd, 3, 0,  4,  enum dpni_flc_type, attr->flc_cfg.flc_type); \
@@ -743,6 +747,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  32, int,      cfg->dest_cfg.dest_id); \
 	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  cfg->dest_cfg.priority);\
 	MC_CMD_OP(cmd, 0, 40, 2,  enum dpni_dest, cfg->dest_cfg.dest_type);\
+	MC_CMD_OP(cmd, 0, 42, 1,  int,      cfg->order_preservation_en);\
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, cfg->user_ctx); \
 	MC_CMD_OP(cmd, 2, 0,  32, uint32_t, cfg->options); \
 } while (0)
@@ -753,6 +758,7 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, int,      attr->dest_cfg.dest_id); \
 	MC_RSP_OP(cmd, 0, 32, 8,  uint8_t,  attr->dest_cfg.priority);\
 	MC_RSP_OP(cmd, 0, 40, 2,  enum dpni_dest, attr->dest_cfg.dest_type);\
+	MC_RSP_OP(cmd, 0, 42, 1,  int,      attr->order_preservation_en);\
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, attr->user_ctx); \
 	MC_RSP_OP(cmd, 2, 32, 32, uint32_t, attr->fqid); \
 } while (0)
diff --git a/drivers/staging/fsl-dpaa2/ethernet/dpni.h b/drivers/staging/fsl-dpaa2/ethernet/dpni.h
index 58f0026..caafe7a 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/dpni.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/dpni.h
@@ -177,8 +177,6 @@ struct dpni_cfg {
 	 * @max_tcs: Maximum number of traffic classes (for both Tx and Rx);
 	 *		'0' will e treated as '1'
 	 * @max_dist_per_tc: Maximum distribution size per Rx traffic class;
-	 *			Must be set to the required value minus 1;
-	 *			i.e. 0->1, 1->2, ... ,255->256;
 	 *			Non-power-of-2 values are rounded up to the next
 	 *			power-of-2 value as hardware demands it
 	 * @max_unicast_filters: Maximum number of unicast filters;
@@ -205,7 +203,7 @@ struct dpni_cfg {
 		enum net_prot		start_hdr;
 		uint8_t		max_senders;
 		uint8_t		max_tcs;
-		uint8_t			max_dist_per_tc[DPNI_MAX_TC];
+		uint8_t		max_dist_per_tc[DPNI_MAX_TC];
 		uint8_t		max_unicast_filters;
 		uint8_t		max_multicast_filters;
 		uint8_t			max_vlan_filters;
@@ -1390,10 +1388,8 @@ int dpni_prepare_key_cfg(struct dpkg_profile_cfg	*cfg,
 
 /**
  * struct dpni_rx_tc_dist_cfg - Rx traffic class distribution configuration
- * @dist_size: Set the distribution size; Must be set to the required value
- *		minus 1, for example: 0->1, 1->2, ... ,255->256;
- *		Non-power-of-2 values are rounded up to the next power-of-2
- *		value as HW demands it
+ * @dist_size: Set the distribution size; Non-power-of-2 values are rounded
+ *	up to the next power-of-2 value as HW demands it
  * @dist_mode: Distribution mode
  * @key_cfg_iova: I/O virtual address of 256 bytes DMA-able memory filled with
  *		the extractions to be used for the distribution key by calling
-- 
1.7.5.4

