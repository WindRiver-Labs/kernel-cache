From b52aca8d76a535d341b8255e4e9c8fa5495cce95 Mon Sep 17 00:00:00 2001
From: Roy Pledge <roy.pledge@nxp.com>
Date: Tue, 15 Mar 2016 17:19:48 -0400
Subject: [PATCH 1201/1383] fsl_usdpaa: Use CMA to allocate USDPAA memory

Change USDPAA driver to get memory using the contiguous memory
allocator(CMA) Linux subsytem. USDPAA memory must now be specifed
in the device tree (i.e.):

	reserved-memory {
		#address-cells = <2>;
		#size-cells = <2>;
		ranges;

		usdpaa_mem: usdpaa_mem {
			compatible = "fsl,usdpaa-mem";
			size = <0 0x10000000>;
			alignment = <0 0x10000000>;
		};
	};

Signed-off-by: Roy Pledge <roy.pledge@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/fsl_usdpaa.c | 36 +++++++++++++++++++++++-----------
 1 file changed, 25 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fsl_qbman/fsl_usdpaa.c b/drivers/staging/fsl_qbman/fsl_usdpaa.c
index 9386402..69305d2 100644
--- a/drivers/staging/fsl_qbman/fsl_usdpaa.c
+++ b/drivers/staging/fsl_qbman/fsl_usdpaa.c
@@ -17,6 +17,7 @@
 #include <linux/memblock.h>
 #include <linux/slab.h>
 #include <linux/mman.h>
+#include <linux/of_reserved_mem.h>
 
 #ifndef CONFIG_ARM64
 #include <mm/mmu_decl.h>
@@ -30,6 +31,8 @@
 /* Physical address range of the memory reservation, exported for mm/mem.c */
 static u64 phys_start;
 static u64 phys_size;
+static u64 arg_phys_size;
+
 /* PFN versions of the above */
 static unsigned long pfn_start;
 static unsigned long pfn_size;
@@ -40,7 +43,7 @@ static DEFINE_SPINLOCK(mem_lock);
 
 /* The range of TLB1 indices */
 static unsigned int first_tlb;
-static unsigned int num_tlb;
+static unsigned int num_tlb = 1;
 static unsigned int current_tlb; /* loops around for fault handling */
 
 /* Memory reservation is represented as a list of 'mem_fragment's, some of which
@@ -1848,9 +1851,11 @@ static struct miscdevice usdpaa_miscdev = {
  * format "usdpaa_mem=<x>,<y>" is used, then <y> will be interpreted as the
  * number of TLB1 entries to reserve (default is 1). If there are more mappings
  * than there are TLB1 entries, fault-handling will occur. */
+
 static __init int usdpaa_mem(char *arg)
 {
-	phys_size = memparse(arg, &arg);
+	pr_warn("uspdaa_mem argument is depracated\n");
+	arg_phys_size = memparse(arg, &arg);
 	num_tlb = 1;
 	if (*arg == ',') {
 		unsigned long ul;
@@ -1865,23 +1870,32 @@ static __init int usdpaa_mem(char *arg)
 }
 early_param("usdpaa_mem", usdpaa_mem);
 
+static int usdpaa_mem_init(struct reserved_mem *rmem)
+{
+	phys_start = rmem->base;
+	phys_size = rmem->size;
+
+	WARN_ON(!(phys_start && phys_size));
+
+	return 0;
+}
+RESERVEDMEM_OF_DECLARE(usdpaa_mem_init, "fsl,usdpaa-mem", usdpaa_mem_init);
+
 __init int fsl_usdpaa_init_early(void)
 {
-	if (!phys_size) {
-		pr_info("No USDPAA memory, no 'usdpaa_mem' bootarg\n");
+	if (!phys_size || !phys_start) {
+		pr_info("No USDPAA memory, no 'fsl,usdpaa-mem' in device-tree\n");
 		return 0;
 	}
 	if (phys_size % PAGE_SIZE) {
-		pr_err("'usdpaa_mem' bootarg must be a multiple of page size\n");
+		pr_err("'fsl,usdpaa-mem' size must be a multiple of page size\n");
 		phys_size = 0;
 		return 0;
 	}
-	phys_start = __memblock_alloc_base(phys_size,
-					   largest_page_size(phys_size),
-					   MEMBLOCK_ALLOC_ACCESSIBLE);
-	if (!phys_start) {
-		pr_err("Failed to reserve USDPAA region (sz:%llx)\n",
-		       phys_size);
+	if (arg_phys_size && phys_size != arg_phys_size) {
+		pr_err("'usdpaa_mem argument size (0x%x) does not match device tree size (0x%x)\n",
+		       arg_phys_size, phys_size);
+		phys_size = 0;
 		return 0;
 	}
 	pfn_start = phys_start >> PAGE_SHIFT;
-- 
2.8.1

