From 716eec81c7b9449d45f9e0813bf4d3b29ceea85e Mon Sep 17 00:00:00 2001
From: Murali K <muralik@freescale.com>
Date: Wed, 3 Feb 2016 15:21:03 +0530
Subject: [PATCH 1056/1429] ls2-console: updates w.r.t MC version 9.0.3

* adjusted code to handle MC's way of maintaining offsets (buf_start and last_byte) in log header.
* fix the size of MC log buffer to ~3MB, though it is mentioned as ~16MB in log header.

Signed-off-by: Murali K <muralik@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/soc/fsl/ls2-console/ls2-console.c |   30 +++++++++++++++++++++-------
 1 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/drivers/soc/fsl/ls2-console/ls2-console.c b/drivers/soc/fsl/ls2-console/ls2-console.c
index f3585e8..eb51c67 100644
--- a/drivers/soc/fsl/ls2-console/ls2-console.c
+++ b/drivers/soc/fsl/ls2-console/ls2-console.c
@@ -42,11 +42,15 @@
 
 #define MC_BASE_ADDR 0x83c0000000
 
-#define MC_BUFFER_OFFSET 0x01400000
-#define MC_BUFFER_SIZE (1024*1024*3)
+#define MC_BUFFER_OFFSET 0x01000000
+#define MC_BUFFER_SIZE (1024*1024*16)
+#define MC_OFFSET_DELTA (MC_BUFFER_OFFSET)
+#define MC_FIXED_LOG_BUF_SIZE (3*1024*1024-64)
 
 #define AIOP_BUFFER_OFFSET 0x06000000
 #define AIOP_BUFFER_SIZE (1024*1024*16)
+#define AIOP_OFFSET_DELTA (0)
+#define AIOP_FIXED_LOG_BUF_SIZE (0)
 
 struct log_header {
 	char magic_word[8]; /* magic word */
@@ -73,6 +77,7 @@ struct console_data {
 	char *end_addr; /* End of buffer */
 	char *end_of_data; /* Current end of data */
 	char *cur_ptr; /* Last data sent to console */
+	uint32_t offset_delta;
 };
 
 #define LAST_BYTE(a) ((a) & ~(LOG_HEADER_FLAG_BUFFER_WRAPAROUND))
@@ -80,7 +85,8 @@ struct console_data {
 static inline void __adjust_end(struct console_data *cd)
 {
 	cd->end_of_data = cd->map_addr
-				+ LAST_BYTE(le32_to_cpu(cd->hdr->last_byte));
+				+ LAST_BYTE(le32_to_cpu(cd->hdr->last_byte))
+				- cd->offset_delta;
 }
 
 static inline void adjust_end(struct console_data *cd)
@@ -92,7 +98,8 @@ static inline void adjust_end(struct console_data *cd)
 
 static int fsl_ls2_generic_console_open(struct inode *node, struct file *fp,
 				u64 offset, u64 size,
-				uint8_t *emagic, uint8_t magic_len)
+				uint8_t *emagic, uint8_t magic_len,
+				u32 offset_delta, u32 fixed_buf_size)
 {
 	struct console_data *cd;
 	uint8_t *magic;
@@ -105,6 +112,7 @@ static int fsl_ls2_generic_console_open(struct inode *node, struct file *fp,
 	cd->map_addr = ioremap(MC_BASE_ADDR + offset, size);
 
 	cd->hdr = (struct log_header *) cd->map_addr;
+	invalidate(cd->hdr);
 
 	magic = cd->hdr->magic_word;
 	if (memcmp(magic, emagic, magic_len)) {
@@ -120,8 +128,12 @@ static int fsl_ls2_generic_console_open(struct inode *node, struct file *fp,
 		return -EIO;
 	}
 
-	cd->start_addr = cd->map_addr + le32_to_cpu(cd->hdr->buf_start);
-	cd->end_addr = cd->start_addr + le32_to_cpu(cd->hdr->buf_length);
+	cd->offset_delta = offset_delta;
+	cd->start_addr = cd->map_addr + le32_to_cpu(cd->hdr->buf_start) - cd->offset_delta;
+	if(fixed_buf_size)
+		cd->end_addr = cd->start_addr + fixed_buf_size;
+	else
+		cd->end_addr = cd->start_addr + le32_to_cpu(cd->hdr->buf_length);
 
 	wrapped = le32_to_cpu(cd->hdr->last_byte)
 			 & LOG_HEADER_FLAG_BUFFER_WRAPAROUND;
@@ -141,7 +153,8 @@ static int fsl_ls2_mc_console_open(struct inode *node, struct file *fp)
 
 	return fsl_ls2_generic_console_open(node, fp,
 			MC_BUFFER_OFFSET, MC_BUFFER_SIZE,
-			magic_word, sizeof(magic_word));
+			magic_word, sizeof(magic_word),
+			MC_OFFSET_DELTA, MC_FIXED_LOG_BUF_SIZE);
 }
 
 static int fsl_ls2_aiop_console_open(struct inode *node, struct file *fp)
@@ -150,7 +163,8 @@ static int fsl_ls2_aiop_console_open(struct inode *node, struct file *fp)
 
 	return fsl_ls2_generic_console_open(node, fp,
 			AIOP_BUFFER_OFFSET, AIOP_BUFFER_SIZE,
-			magic_word, sizeof(magic_word));
+			magic_word, sizeof(magic_word),
+			AIOP_OFFSET_DELTA, AIOP_FIXED_LOG_BUF_SIZE);
 }
 
 static int fsl_ls2_console_close(struct inode *node, struct file *fp)
-- 
1.7.5.4

