From f802c01df89bd0fd30de417c08d822ce63a518ef Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@freescale.com>
Date: Mon, 7 Dec 2015 18:37:17 +0200
Subject: [PATCH 0877/1429] crypto: dpaa2-caam - update dpseci binary
 interface to v3.1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add MC 0.8 dpseci flibs.

Signed-off-by: Horia GeantÄƒ <horia.geanta@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/dpaa2-caam/dpseci.c         |   50 +++++++++-
 drivers/crypto/dpaa2-caam/fsl_dpseci.h     |  146 +++++++++++++++++++++++++---
 drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h |   49 +++++++++-
 3 files changed, 225 insertions(+), 20 deletions(-)

diff --git a/drivers/crypto/dpaa2-caam/dpseci.c b/drivers/crypto/dpaa2-caam/dpseci.c
index 0a85f41..69ba555 100644
--- a/drivers/crypto/dpaa2-caam/dpseci.c
+++ b/drivers/crypto/dpaa2-caam/dpseci.c
@@ -329,7 +329,7 @@ int dpseci_get_irq_status(struct fsl_mc_io *mc_io,
 	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_GET_IRQ_STATUS,
 					  cmd_flags,
 					  token);
-	DPSECI_CMD_GET_IRQ_STATUS(cmd, irq_index);
+	DPSECI_CMD_GET_IRQ_STATUS(cmd, irq_index, *status);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -453,3 +453,51 @@ int dpseci_get_tx_queue(struct fsl_mc_io *mc_io,
 
 	return 0;
 }
+
+int dpseci_get_sec_attr(struct fsl_mc_io		*mc_io,
+			uint32_t			cmd_flags,
+			uint16_t			token,
+			struct dpseci_sec_attr *attr)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_GET_SEC_ATTR,
+					  cmd_flags,
+					  token);
+
+	/* send command to mc*/
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	/* retrieve response parameters */
+	DPSECI_RSP_GET_SEC_ATTR(cmd, attr);
+
+	return 0;
+}
+
+int dpseci_get_sec_counters(struct fsl_mc_io		*mc_io,
+			    uint32_t			cmd_flags,
+		uint16_t			token,
+		struct dpseci_sec_counters *counters)
+{
+	struct mc_command cmd = { 0 };
+	int err;
+
+	/* prepare command */
+	cmd.header = mc_encode_cmd_header(DPSECI_CMDID_GET_SEC_COUNTERS,
+					  cmd_flags,
+					  token);
+
+	/* send command to mc*/
+	err = mc_send_command(mc_io, &cmd);
+	if (err)
+		return err;
+
+	/* retrieve response parameters */
+	DPSECI_RSP_GET_SEC_COUNTERS(cmd, counters);
+
+	return 0;
+}
diff --git a/drivers/crypto/dpaa2-caam/fsl_dpseci.h b/drivers/crypto/dpaa2-caam/fsl_dpseci.h
index ef2ec3f..47d3c52 100644
--- a/drivers/crypto/dpaa2-caam/fsl_dpseci.h
+++ b/drivers/crypto/dpaa2-caam/fsl_dpseci.h
@@ -38,12 +38,18 @@
 
 struct fsl_mc_io;
 
-/* General DPSECI macros */
+/**
+ * General DPSECI macros
+ */
 
-/* Maximum number of Tx/Rx priorities per DPSECI object */
+/**
+ * Maximum number of Tx/Rx priorities per DPSECI object
+ */
 #define DPSECI_PRIO_NUM		8
 
-/* All queues considered; see dpseci_set_rx_queue() */
+/**
+ * All queues considered; see dpseci_set_rx_queue()
+ */
 #define DPSECI_ALL_QUEUES	(uint8_t)(-1)
 
 /**
@@ -85,9 +91,9 @@ int dpseci_close(struct fsl_mc_io	*mc_io,
 
 /**
  * struct dpseci_cfg - Structure representing DPSECI configuration
- *	@num_tx_queues: num of queues towards the SEC
- *	@num_rx_queues: num of queues back from the SEC
- *  @priorities: Priorities for the SEC hardware processing;
+ * @num_tx_queues: num of queues towards the SEC
+ * @num_rx_queues: num of queues back from the SEC
+ * @priorities: Priorities for the SEC hardware processing;
  *		each place in the array is the priority of the tx queue
  *		towards the SEC,
  *		valid priorities are configured with values 1-8;
@@ -191,16 +197,16 @@ int dpseci_reset(struct fsl_mc_io	*mc_io,
  * struct dpseci_irq_cfg - IRQ configuration
  * @addr:	Address that must be written to signal a message-based interrupt
  * @val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @irq_num: A user defined number associated with this IRQ
  */
 struct dpseci_irq_cfg {
 	     uint64_t		addr;
 	     uint32_t		val;
-	     int		user_irq_id;
+	     int		irq_num;
 };
 
 /**
- * dpseci_set_irq() - Set IRQ information for the DPSECI to trigger an interrupt.
+ * dpseci_set_irq() - Set IRQ information for the DPSECI to trigger an interrupt
  * @mc_io:	Pointer to MC portal's I/O object
  * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
  * @token:	Token of DPSECI object
@@ -281,7 +287,7 @@ int dpseci_get_irq_enable(struct fsl_mc_io	*mc_io,
  * @mask:		event mask to trigger interrupt;
  *				each bit:
  *					0 = ignore event
- *					1 = consider event for asserting irq
+ *					1 = consider event for asserting IRQ
  *
  * Every interrupt can have up to 32 causes and the interrupt model supports
  * masking/unmasking each cause independently
@@ -418,15 +424,23 @@ struct dpseci_dest_cfg {
 	uint8_t		priority;
 };
 
-/* DPSECI queue modification options */
+/**
+ * DPSECI queue modification options
+ */
 
-/* Select to modify the user's context associated with the queue */
+/**
+ * Select to modify the user's context associated with the queue
+ */
 #define DPSECI_QUEUE_OPT_USER_CTX	0x00000001
 
-/* Select to modify the queue's destination */
+/**
+ * Select to modify the queue's destination
+ */
 #define DPSECI_QUEUE_OPT_DEST		0x00000002
 
-/* Select to modify the queue's order preservation */
+/**
+ * Select to modify the queue's order preservation
+ */
 #define DPSECI_QUEUE_OPT_ORDER_PRESERVATION    0x00000004
 
 /**
@@ -526,4 +540,108 @@ int dpseci_get_tx_queue(struct fsl_mc_io		*mc_io,
 			uint8_t				queue,
 			struct dpseci_tx_queue_attr	*attr);
 
+/**
+ * struct dpseci_sec_attr - Structure representing attributes of the SEC
+ *			hardware accelerator
+ * @ip_id:	ID for SEC.
+ * @major_rev: Major revision number for SEC.
+ * @minor_rev: Minor revision number for SEC.
+ * @era: SEC Era.
+ * @deco_num: The number of copies of the DECO that are implemented in
+ * this version of SEC.
+ * @zuc_auth_acc_num: The number of copies of ZUCA that are implemented
+ * in this version of SEC.
+ * @zuc_enc_acc_num: The number of copies of ZUCE that are implemented
+ * in this version of SEC.
+ * @snow_f8_acc_num: The number of copies of the SNOW-f8 module that are
+ * implemented in this version of SEC.
+ * @snow_f9_acc_num: The number of copies of the SNOW-f9 module that are
+ * implemented in this version of SEC.
+ * @crc_acc_num: The number of copies of the CRC module that are implemented
+ * in this version of SEC.
+ * @pk_acc_num:  The number of copies of the Public Key module that are
+ * implemented in this version of SEC.
+ * @kasumi_acc_num: The number of copies of the Kasumi module that are
+ * implemented in this version of SEC.
+ * @rng_acc_num: The number of copies of the Random Number Generator that are
+ * implemented in this version of SEC.
+ * @md_acc_num: The number of copies of the MDHA (Hashing module) that are
+ * implemented in this version of SEC.
+ * @arc4_acc_num: The number of copies of the ARC4 module that are implemented
+ * in this version of SEC.
+ * @des_acc_num: The number of copies of the DES module that are implemented
+ * in this version of SEC.
+ * @aes_acc_num: The number of copies of the AES module that are implemented
+ * in this version of SEC.
+ */
+
+struct dpseci_sec_attr {
+	uint16_t	ip_id;
+	uint8_t	major_rev;
+	uint8_t	minor_rev;
+	uint8_t     era;
+	uint8_t     deco_num;
+	uint8_t     zuc_auth_acc_num;
+	uint8_t     zuc_enc_acc_num;
+	uint8_t     snow_f8_acc_num;
+	uint8_t     snow_f9_acc_num;
+	uint8_t     crc_acc_num;
+	uint8_t     pk_acc_num;
+	uint8_t     kasumi_acc_num;
+	uint8_t     rng_acc_num;
+	uint8_t     md_acc_num;
+	uint8_t     arc4_acc_num;
+	uint8_t     des_acc_num;
+	uint8_t     aes_acc_num;
+};
+
+/**
+ * dpseci_get_sec_attr() - Retrieve SEC accelerator attributes.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSECI object
+ * @attr:	Returned SEC attributes
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dpseci_get_sec_attr(struct fsl_mc_io		*mc_io,
+			uint32_t			cmd_flags,
+			uint16_t			token,
+			struct dpseci_sec_attr *attr);
+
+/**
+ * struct dpseci_sec_counters - Structure representing global SEC counters and
+ *				not per dpseci counters
+ * @dequeued_requests:	Number of Requests Dequeued
+ * @ob_enc_requests:	Number of Outbound Encrypt Requests
+ * @ib_dec_requests:	Number of Inbound Decrypt Requests
+ * @ob_enc_bytes:		Number of Outbound Bytes Encrypted
+ * @ob_prot_bytes:		Number of Outbound Bytes Protected
+ * @ib_dec_bytes:		Number of Inbound Bytes Decrypted
+ * @ib_valid_bytes:		Number of Inbound Bytes Validated
+ */
+struct dpseci_sec_counters {
+	uint64_t	dequeued_requests;
+	uint64_t	ob_enc_requests;
+	uint64_t	ib_dec_requests;
+	uint64_t	ob_enc_bytes;
+	uint64_t	ob_prot_bytes;
+	uint64_t	ib_dec_bytes;
+	uint64_t	ib_valid_bytes;
+};
+
+/**
+ * dpseci_get_sec_counters() - Retrieve SEC accelerator counters.
+ * @mc_io:	Pointer to MC portal's I/O object
+ * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
+ * @token:	Token of DPSECI object
+ * @counters:	Returned SEC counters
+ *
+ * Return:	'0' on Success; Error code otherwise.
+ */
+int dpseci_get_sec_counters(struct fsl_mc_io		*mc_io,
+			    uint32_t			cmd_flags,
+		uint16_t			token,
+		struct dpseci_sec_counters *counters);
+
 #endif /* __FSL_DPSECI_H */
diff --git a/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h b/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h
index 0c085c1..28afa18 100644
--- a/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h
+++ b/drivers/crypto/dpaa2-caam/fsl_dpseci_cmd.h
@@ -34,7 +34,7 @@
 
 /* DPSECI Version */
 #define DPSECI_VER_MAJOR				3
-#define DPSECI_VER_MINOR				0
+#define DPSECI_VER_MINOR				1
 
 /* Command IDs */
 #define DPSECI_CMDID_CLOSE				0x800
@@ -60,6 +60,8 @@
 #define DPSECI_CMDID_SET_RX_QUEUE			0x194
 #define DPSECI_CMDID_GET_RX_QUEUE			0x196
 #define DPSECI_CMDID_GET_TX_QUEUE			0x197
+#define DPSECI_CMDID_GET_SEC_ATTR			0x198
+#define DPSECI_CMDID_GET_SEC_COUNTERS			0x199
 
 /*                cmd, param, offset, width, type, arg_name */
 #define DPSECI_CMD_OPEN(cmd, dpseci_id) \
@@ -90,7 +92,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  irq_index);\
 	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, irq_cfg->val);\
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
+	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -102,7 +104,7 @@ do { \
 do { \
 	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
+	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
 	MC_RSP_OP(cmd, 2, 32, 32, int,	    type); \
 } while (0)
 
@@ -137,8 +139,11 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, mask)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPSECI_CMD_GET_IRQ_STATUS(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
+#define DPSECI_CMD_GET_IRQ_STATUS(cmd, irq_index, status) \
+do { \
+	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, status);\
+	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
+} while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
 #define DPSECI_RSP_GET_IRQ_STATUS(cmd, status) \
@@ -199,4 +204,38 @@ do { \
 	MC_RSP_OP(cmd, 1, 0,  32, uint32_t,  attr->priority);\
 } while (0)
 
+/*                cmd, param, offset, width, type, arg_name */
+#define DPSECI_RSP_GET_SEC_ATTR(cmd, attr) \
+do { \
+	MC_RSP_OP(cmd, 0,  0, 16, uint16_t,  attr->ip_id);\
+	MC_RSP_OP(cmd, 0, 16,  8,  uint8_t,  attr->major_rev);\
+	MC_RSP_OP(cmd, 0, 24,  8,  uint8_t,  attr->minor_rev);\
+	MC_RSP_OP(cmd, 0, 32,  8,  uint8_t,  attr->era);\
+	MC_RSP_OP(cmd, 1,  0,  8,  uint8_t,  attr->deco_num);\
+	MC_RSP_OP(cmd, 1,  8,  8,  uint8_t,  attr->zuc_auth_acc_num);\
+	MC_RSP_OP(cmd, 1, 16,  8,  uint8_t,  attr->zuc_enc_acc_num);\
+	MC_RSP_OP(cmd, 1, 32,  8,  uint8_t,  attr->snow_f8_acc_num);\
+	MC_RSP_OP(cmd, 1, 40,  8,  uint8_t,  attr->snow_f9_acc_num);\
+	MC_RSP_OP(cmd, 1, 48,  8,  uint8_t,  attr->crc_acc_num);\
+	MC_RSP_OP(cmd, 2,  0,  8,  uint8_t,  attr->pk_acc_num);\
+	MC_RSP_OP(cmd, 2,  8,  8,  uint8_t,  attr->kasumi_acc_num);\
+	MC_RSP_OP(cmd, 2, 16,  8,  uint8_t,  attr->rng_acc_num);\
+	MC_RSP_OP(cmd, 2, 32,  8,  uint8_t,  attr->md_acc_num);\
+	MC_RSP_OP(cmd, 2, 40,  8,  uint8_t,  attr->arc4_acc_num);\
+	MC_RSP_OP(cmd, 2, 48,  8,  uint8_t,  attr->des_acc_num);\
+	MC_RSP_OP(cmd, 2, 56,  8,  uint8_t,  attr->aes_acc_num);\
+} while (0)
+
+/*                cmd, param, offset, width, type, arg_name */
+#define DPSECI_RSP_GET_SEC_COUNTERS(cmd, counters) \
+do { \
+	MC_RSP_OP(cmd, 0,  0, 64, uint64_t,  counters->dequeued_requests);\
+	MC_RSP_OP(cmd, 1,  0, 64, uint64_t,  counters->ob_enc_requests);\
+	MC_RSP_OP(cmd, 2,  0, 64, uint64_t,  counters->ib_dec_requests);\
+	MC_RSP_OP(cmd, 3,  0, 64, uint64_t,  counters->ob_enc_bytes);\
+	MC_RSP_OP(cmd, 4,  0, 64, uint64_t,  counters->ob_prot_bytes);\
+	MC_RSP_OP(cmd, 5,  0, 64, uint64_t,  counters->ib_dec_bytes);\
+	MC_RSP_OP(cmd, 6,  0, 64, uint64_t,  counters->ib_valid_bytes);\
+} while (0)
+
 #endif /* _FSL_DPSECI_CMD_H */
-- 
1.7.5.4

