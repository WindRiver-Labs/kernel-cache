From 39c1bc2f709d96824fc4d4269e85178e87ec14cf Mon Sep 17 00:00:00 2001
From: Haiying Wang <Haiying.Wang@freescale.com>
Date: Thu, 23 Apr 2015 14:41:18 -0400
Subject: [PATCH 0635/1383] dpio/qbman: add APIs to parse BPSCN and CGCU

BPSCN and CGCU are notifications which can only be written to memory.
We need to consider the host endianness while parsing these notification.
Also modify the check of FQRN/CSCN_MEM with the same consideration.

Signed-off-by: Haiying Wang <Haiying.Wang@freescale.com>
Change-Id: I572e0aa126107aed40e1ce326d5df7956882a939
Reviewed-on: http://git.am.freescale.net:8181/35536
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Roy Pledge <roy.pledge@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h |  25 ++++-
 drivers/staging/fsl-mc/bus/dpio/qbman_portal.c     | 120 ++++++++++++++++++---
 drivers/staging/fsl-mc/bus/dpio/qbman_sys.h        |   6 ++
 drivers/staging/fsl-mc/bus/dpio/qbman_sys_decl.h   |   6 ++
 4 files changed, 143 insertions(+), 14 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h b/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
index c52527f..104736b 100644
--- a/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
+++ b/drivers/staging/fsl-mc/bus/dpio/fsl_qbman_portal.h
@@ -208,6 +208,9 @@ int qbman_result_is_FQPN(const struct ldpaa_dq *); /* Park */
 uint8_t qbman_result_SCN_state(const struct ldpaa_dq *);
 uint32_t qbman_result_SCN_rid(const struct ldpaa_dq *);
 uint64_t qbman_result_SCN_ctx(const struct ldpaa_dq *);
+uint8_t qbman_result_SCN_state_in_mem(const struct ldpaa_dq *);
+uint32_t qbman_result_SCN_rid_in_mem(const struct ldpaa_dq *);
+
 /* Type-specific "resource IDs". Mainly for illustration purposes, though it
  * also gives the appropriate type widths. */
 #define qbman_result_FQDAN_fqid(dq) qbman_result_SCN_rid(dq)
@@ -216,8 +219,26 @@ uint64_t qbman_result_SCN_ctx(const struct ldpaa_dq *);
 #define qbman_result_FQPN_fqid(dq) qbman_result_SCN_rid(dq)
 #define qbman_result_CDAN_cid(dq) ((uint16_t)qbman_result_SCN_rid(dq))
 #define qbman_result_CSCN_cgid(dq) ((uint16_t)qbman_result_SCN_rid(dq))
-#define qbman_result_CGCU_cgid(dq) ((uint16_t)qbman_result_SCN_rid(dq))
-#define qbman_result_BPSCN_bpid(dq) ((uint16_t)qbman_result_SCN_rid(dq))
+
+/* Parsing BPSCN */
+uint16_t qbman_result_bpscn_bpid(const struct ldpaa_dq *);
+/* Check BPSCN to see whether there are free buffers in the pool.
+ */
+int qbman_result_bpscn_has_free_bufs(const struct ldpaa_dq *);
+/* Check BPSCN to see whether the buffer pool is depleted.
+ */
+int qbman_result_bpscn_is_depleted(const struct ldpaa_dq *);
+/* Check BPSCN to see whether the buffer pool is surplus or not.
+ */
+int qbman_result_bpscn_is_surplus(const struct ldpaa_dq *);
+/* Get the BPSCN CTX from BPSCN message */
+uint64_t qbman_result_bpscn_ctx(const struct ldpaa_dq *);
+
+/* Parsing CGCU */
+/* Check CGCU resouce id, i.e. cgid */
+uint16_t qbman_result_cgcu_cgid(const struct ldpaa_dq *);
+/* Get the I_CNT from CGCU */
+uint64_t qbman_result_cgcu_icnt(const struct ldpaa_dq *);
 
 	/************/
 	/* Enqueues */
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
index 349b3dc..1ab28b0 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_portal.c
@@ -766,9 +766,12 @@ int qbman_result_has_new_result(struct qbman_swp *s,
 EXPORT_SYMBOL(qbman_result_has_new_result);
 
 /********************************/
-/* Categorising dequeue entries */
+/* Categorising qbman_result */
 /********************************/
 
+static struct qb_attr_code code_result_in_mem =
+			QB_CODE(0, QBMAN_RESULT_VERB_OFFSET_IN_MEM, 7);
+
 static inline int __qbman_result_is_x(const struct ldpaa_dq *dq, uint32_t x)
 {
 	const uint32_t *p = qb_cl(dq);
@@ -777,6 +780,15 @@ static inline int __qbman_result_is_x(const struct ldpaa_dq *dq, uint32_t x)
 	return response_verb == x;
 }
 
+static inline int __qbman_result_is_x_in_mem(const struct ldpaa_dq *dq,
+					     uint32_t x)
+{
+	const uint32_t *p = qb_cl(dq);
+	uint32_t response_verb = qb_attr_code_decode(&code_result_in_mem, p);
+
+	return (response_verb == x);
+}
+
 int qbman_result_is_DQ(const struct ldpaa_dq *dq)
 {
 	return __qbman_result_is_x(dq, QBMAN_RESULT_DQ);
@@ -797,32 +809,32 @@ EXPORT_SYMBOL(qbman_result_is_CDAN);
 
 int qbman_result_is_CSCN(const struct ldpaa_dq *dq)
 {
-	return __qbman_result_is_x(dq, QBMAN_RESULT_CSCN_MEM) ||
+	return __qbman_result_is_x_in_mem(dq, QBMAN_RESULT_CSCN_MEM) ||
 		__qbman_result_is_x(dq, QBMAN_RESULT_CSCN_WQ);
 }
 EXPORT_SYMBOL(qbman_result_is_CSCN);
 
 int qbman_result_is_BPSCN(const struct ldpaa_dq *dq)
 {
-	return __qbman_result_is_x(dq, QBMAN_RESULT_BPSCN);
+	return __qbman_result_is_x_in_mem(dq, QBMAN_RESULT_BPSCN);
 }
 EXPORT_SYMBOL(qbman_result_is_BPSCN);
 
 int qbman_result_is_CGCU(const struct ldpaa_dq *dq)
 {
-	return __qbman_result_is_x(dq, QBMAN_RESULT_CGCU);
+	return __qbman_result_is_x_in_mem(dq, QBMAN_RESULT_CGCU);
 }
 EXPORT_SYMBOL(qbman_result_is_CGCU);
 
 int qbman_result_is_FQRN(const struct ldpaa_dq *dq)
 {
-	return __qbman_result_is_x(dq, QBMAN_RESULT_FQRN);
+	return __qbman_result_is_x_in_mem(dq, QBMAN_RESULT_FQRN);
 }
 EXPORT_SYMBOL(qbman_result_is_FQRN);
 
 int qbman_result_is_FQRNI(const struct ldpaa_dq *dq)
 {
-	return __qbman_result_is_x(dq, QBMAN_RESULT_FQRNI);
+	return __qbman_result_is_x_in_mem(dq, QBMAN_RESULT_FQRNI);
 }
 EXPORT_SYMBOL(qbman_result_is_FQRNI);
 
@@ -908,32 +920,116 @@ EXPORT_SYMBOL(ldpaa_dq_fd);
 
 static struct qb_attr_code code_scn_state = QB_CODE(0, 16, 8);
 static struct qb_attr_code code_scn_rid = QB_CODE(1, 0, 24);
+static struct qb_attr_code code_scn_state_in_mem =
+			QB_CODE(0, SCN_STATE_OFFSET_IN_MEM, 8);
+static struct qb_attr_code code_scn_rid_in_mem =
+			QB_CODE(1, SCN_RID_OFFSET_IN_MEM, 24);
 static struct qb_attr_code code_scn_ctx_lo = QB_CODE(2, 0, 32);
 
-uint8_t qbman_result_SCN_state(const struct ldpaa_dq *dq)
+uint8_t qbman_result_SCN_state(const struct ldpaa_dq *scn)
 {
-	const uint32_t *p = qb_cl(dq);
+	const uint32_t *p = qb_cl(scn);
 
 	return (uint8_t)qb_attr_code_decode(&code_scn_state, p);
 }
 EXPORT_SYMBOL(qbman_result_SCN_state);
 
-uint32_t qbman_result_SCN_rid(const struct ldpaa_dq *dq)
+uint32_t qbman_result_SCN_rid(const struct ldpaa_dq *scn)
 {
-	const uint32_t *p = qb_cl(dq);
+	const uint32_t *p = qb_cl(scn);
 
 	return qb_attr_code_decode(&code_scn_rid, p);
 }
 EXPORT_SYMBOL(qbman_result_SCN_rid);
 
-uint64_t qbman_result_SCN_ctx(const struct ldpaa_dq *dq)
+uint64_t qbman_result_SCN_ctx(const struct ldpaa_dq *scn)
 {
-	const uint64_t *p = (uint64_t *)qb_cl(dq);
+	const uint64_t *p = (uint64_t *)qb_cl(scn);
 
 	return qb_attr_code_decode_64(&code_scn_ctx_lo, p);
 }
 EXPORT_SYMBOL(qbman_result_SCN_ctx);
 
+uint8_t qbman_result_SCN_state_in_mem(const struct ldpaa_dq *scn)
+{
+	const uint32_t *p = qb_cl(scn);
+
+	return (uint8_t)qb_attr_code_decode(&code_scn_state_in_mem, p);
+}
+EXPORT_SYMBOL(qbman_result_SCN_state_in_mem);
+
+uint32_t qbman_result_SCN_rid_in_mem(const struct ldpaa_dq *scn)
+{
+	const uint32_t *p = qb_cl(scn);
+	uint32_t result_rid;
+
+	result_rid = qb_attr_code_decode(&code_scn_rid_in_mem, p);
+	return make_le24(result_rid);
+}
+EXPORT_SYMBOL(qbman_result_SCN_rid_in_mem);
+
+/*****************/
+/* Parsing BPSCN */
+/*****************/
+uint16_t qbman_result_bpscn_bpid(const struct ldpaa_dq *scn)
+{
+	return (uint16_t)qbman_result_SCN_rid_in_mem(scn) & 0x3FFF;
+}
+EXPORT_SYMBOL(qbman_result_bpscn_bpid);
+
+int qbman_result_bpscn_has_free_bufs(const struct ldpaa_dq *scn)
+{
+	return !(int)(qbman_result_SCN_state_in_mem(scn) & 0x1);
+}
+EXPORT_SYMBOL(qbman_result_bpscn_has_free_bufs);
+
+int qbman_result_bpscn_is_depleted(const struct ldpaa_dq *scn)
+{
+	return (int)(qbman_result_SCN_state_in_mem(scn) & 0x2);
+}
+EXPORT_SYMBOL(qbman_result_bpscn_is_depleted);
+
+int qbman_result_bpscn_is_surplus(const struct ldpaa_dq *scn)
+{
+	return (int)(qbman_result_SCN_state_in_mem(scn) & 0x4);
+}
+EXPORT_SYMBOL(qbman_result_bpscn_is_surplus);
+
+uint64_t qbman_result_bpscn_ctx(const struct ldpaa_dq *scn)
+{
+	uint64_t ctx;
+	uint32_t ctx_hi, ctx_lo;
+
+	ctx = qbman_result_SCN_ctx(scn);
+	ctx_hi = upper32(ctx);
+	ctx_lo = lower32(ctx);
+	return ((uint64_t)make_le32(ctx_hi) << 32 |
+	       (uint64_t)make_le32(ctx_lo));
+}
+EXPORT_SYMBOL(qbman_result_bpscn_ctx);
+
+/*****************/
+/* Parsing CGCU  */
+/*****************/
+uint16_t qbman_result_cgcu_cgid(const struct ldpaa_dq *scn)
+{
+	return (uint16_t)qbman_result_SCN_rid_in_mem(scn) & 0xFFFF;
+}
+EXPORT_SYMBOL(qbman_result_cgcu_cgid);
+
+uint64_t qbman_result_cgcu_icnt(const struct ldpaa_dq *scn)
+{
+	uint64_t ctx;
+	uint32_t ctx_hi, ctx_lo;
+
+	ctx = qbman_result_SCN_ctx(scn);
+	ctx_hi = upper32(ctx);
+	ctx_lo = lower32(ctx);
+	return ((uint64_t)(make_le32(ctx_hi) & 0xFF) << 32) |
+		       (uint64_t)make_le32(ctx_lo);
+}
+EXPORT_SYMBOL(qbman_result_cgcu_icnt);
+
 /******************/
 /* Buffer release */
 /******************/
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h b/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h
index 84d9b1e..f634f80 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_sys.h
@@ -109,8 +109,14 @@ static inline uint32_t make_le32(uint32_t val)
 	return ((val & 0xff) << 24) | ((val & 0xff00) << 8) |
 		((val & 0xff0000) >> 8) | ((val & 0xff000000) >> 24);
 }
+static inline uint32_t make_le24(uint32_t val)
+{
+	return (((val & 0xff) << 16) | (val & 0xff00) |
+		((val & 0xff0000) >> 16));
+}
 #else
 #define make_le32(val) (val)
+#define make_le24(val) (val)
 #endif
 static inline void make_le32_n(uint32_t *val, unsigned int num)
 {
diff --git a/drivers/staging/fsl-mc/bus/dpio/qbman_sys_decl.h b/drivers/staging/fsl-mc/bus/dpio/qbman_sys_decl.h
index 4cef852..de1f0c4 100644
--- a/drivers/staging/fsl-mc/bus/dpio/qbman_sys_decl.h
+++ b/drivers/staging/fsl-mc/bus/dpio/qbman_sys_decl.h
@@ -54,8 +54,14 @@
  * very quickly. It's an exception, and this symbol is used for that case. */
 #if defined(__BIG_ENDIAN)
 #define DQRR_TOK_OFFSET 0
+#define QBMAN_RESULT_VERB_OFFSET_IN_MEM 24
+#define SCN_STATE_OFFSET_IN_MEM 8
+#define SCN_RID_OFFSET_IN_MEM 8
 #else
 #define DQRR_TOK_OFFSET 24
+#define QBMAN_RESULT_VERB_OFFSET_IN_MEM 0
+#define SCN_STATE_OFFSET_IN_MEM 16
+#define SCN_RID_OFFSET_IN_MEM 0
 #endif
 
 /* Similarly-named functions */
-- 
2.8.1

