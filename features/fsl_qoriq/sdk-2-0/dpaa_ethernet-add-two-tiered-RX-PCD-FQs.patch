From 5522fa8d28d4a82e28c287758a9c333c10f4f0ed Mon Sep 17 00:00:00 2001
From: Alex Porosanu <alexandru.porosanu@nxp.com>
Date: Wed, 27 Apr 2016 17:27:31 +0300
Subject: [PATCH 1337/1429] dpaa_ethernet: add two-tiered RX PCD FQs

In order to prioritize one type of RX traffic over
some other RX traffic, one can use a different range
of RX FQs for distributing the higher priority traffic
to the CPU cores.
This is very useful f.i. in back2back scenarios
used in IPSec applications.
For this to happen, it's needed to use a different range
of FQs for the high priority traffic such as existing
use-cases are not affected. This in turn requires increasing
the number of FQ IDs in the system. Furthermore, for
taking advantage of this mechanism, the corresponding XML
files also require updates.

Signed-off-by: Alex Porosanu <alexandru.porosanu@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h |   11 +++++-
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.c  |   43 ++++++++++++++++----
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_sysfs.c   |    3 +
 3 files changed, 48 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
index 71b5441..75295e2 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
@@ -132,9 +132,14 @@ struct dpa_buffer_layout_s {
 #define FMAN_PCD_TESTS_MAX_NUM_RANGES	20
 #endif
 
+#define DPAA_ETH_FQ_DELTA	0x10000
+
 #define DPAA_ETH_PCD_FQ_BASE(device_addr) \
 	(((device_addr) & 0x1fffff) >> 6)
 
+#define DPAA_ETH_PCD_FQ_HI_PRIO_BASE(device_addr) \
+	(DPAA_ETH_FQ_DELTA + DPAA_ETH_PCD_FQ_BASE(device_addr))
+
 /* Largest value that the FQD's OAL field can hold.
  * This is DPAA-1.x specific.
  * TODO: This rather belongs in fsl_qman.h
@@ -227,6 +232,7 @@ enum dpa_fq_type {
 	FQ_TYPE_TX_CONFIRM,     /* Tx default Conf FQ (actually an Rx FQ) */
 	FQ_TYPE_TX_CONF_MQ,     /* Tx conf FQs (one for each Tx FQ) */
 	FQ_TYPE_TX_ERROR,       /* Tx Error FQs (these are actually Rx FQs) */
+	FQ_TYPE_RX_PCD_HI_PRIO, /* User-defined high-priority PCDs */
 };
 
 struct dpa_fq {
@@ -618,13 +624,16 @@ static inline void _dpa_assign_wq(struct dpa_fq *fq)
 		break;
 	case FQ_TYPE_RX_DEFAULT:
 	case FQ_TYPE_TX:
-	case FQ_TYPE_RX_PCD:
 		fq->wq = 3;
 		break;
 	case FQ_TYPE_RX_ERROR:
 	case FQ_TYPE_TX_ERROR:
+	case FQ_TYPE_RX_PCD_HI_PRIO:
 		fq->wq = 2;
 		break;
+	case FQ_TYPE_RX_PCD:
+		fq->wq = 5;
+		break;
 	default:
 		WARN(1, "Invalid FQ type %d for FQID %d!\n",
 		       fq->fq_type, fq->fqid);
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
index 03a40ac..2f8870c 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
@@ -902,7 +902,12 @@ struct dpa_fq *dpa_fq_alloc(struct device *dev,
 
 	for (i = 0; i < fq_count; i++) {
 		dpa_fq[i].fq_type = fq_type;
-		dpa_fq[i].fqid = fq_start ? fq_start + i : 0;
+		if (fq_type == FQ_TYPE_RX_PCD_HI_PRIO)
+			dpa_fq[i].fqid = fq_start ?
+					 DPAA_ETH_FQ_DELTA + fq_start + i : 0;
+		else
+			dpa_fq[i].fqid = fq_start ? fq_start + i : 0;
+
 		list_add_tail(&dpa_fq[i].list, list);
 	}
 
@@ -1000,11 +1005,21 @@ int dpa_fq_probe_mac(struct device *dev, struct list_head *list,
 				port_fqs->tx_defq = &dpa_fq[0];
 			break;
 		default:
-			/* all subsequent queues are either RX PCD or Tx */
-			if (!dpa_fq_alloc(dev, fqids[i].start,
-					  fqids[i].count, list, ptype == RX ?
-					   FQ_TYPE_RX_PCD : FQ_TYPE_TX))
-				goto fq_alloc_failed;
+			/* all subsequent queues are either RX* PCD or Tx */
+			if (ptype == RX) {
+				if (!dpa_fq_alloc(dev, fqids[i].start,
+						  fqids[i].count, list,
+						  FQ_TYPE_RX_PCD) ||
+				    !dpa_fq_alloc(dev, fqids[i].start,
+						  fqids[i].count, list,
+						  FQ_TYPE_RX_PCD_HI_PRIO))
+					goto fq_alloc_failed;
+			} else {
+				if (!dpa_fq_alloc(dev, fqids[i].start,
+						  fqids[i].count, list,
+						  FQ_TYPE_TX))
+					goto fq_alloc_failed;
+			}
 			break;
 		}
 	}
@@ -1168,7 +1183,7 @@ void dpa_fq_setup(struct dpa_priv_s *priv, const struct dpa_fq_cbs_t *fq_cbs,
 	struct dpa_fq *fq;
 	uint16_t portals[NR_CPUS];
 	int cpu, portal_cnt = 0, num_portals = 0;
-	uint32_t pcd_fqid;
+	uint32_t pcd_fqid, pcd_fqid_hi_prio;
 	const cpumask_t *affine_cpus = qman_affine_cpus();
 	int egress_cnt = 0, conf_cnt = 0;
 
@@ -1181,6 +1196,8 @@ void dpa_fq_setup(struct dpa_priv_s *priv, const struct dpa_fq_cbs_t *fq_cbs,
 
 	pcd_fqid = (priv->mac_dev) ?
 		DPAA_ETH_PCD_FQ_BASE(priv->mac_dev->res->start) : 0;
+	pcd_fqid_hi_prio = (priv->mac_dev) ?
+		DPAA_ETH_PCD_FQ_HI_PRIO_BASE(priv->mac_dev->res->start) : 0;
 
 	/* Initialize each FQ in the list */
 	list_for_each_entry(fq, &priv->dpa_fq_list, list) {
@@ -1202,6 +1219,15 @@ void dpa_fq_setup(struct dpa_priv_s *priv, const struct dpa_fq_cbs_t *fq_cbs,
 			fq->channel = portals[portal_cnt];
 			portal_cnt = (portal_cnt + 1) % num_portals;
 			break;
+		case FQ_TYPE_RX_PCD_HI_PRIO:
+			/* For MACless we can't have dynamic Hi Pri Rx queues */
+			BUG_ON(!priv->mac_dev && !fq->fqid);
+			dpa_setup_ingress(priv, fq, &fq_cbs->rx_defq);
+			if (!fq->fqid)
+				fq->fqid = pcd_fqid_hi_prio++;
+			fq->channel = portals[portal_cnt];
+			portal_cnt = (portal_cnt + 1) % num_portals;
+			break;
 		case FQ_TYPE_TX:
 			dpa_setup_egress(priv, fq, tx_port,
 					 &fq_cbs->egress_ern);
@@ -1353,7 +1379,8 @@ int dpa_fq_init(struct dpa_fq *dpa_fq, bool td_enable)
 		if (priv->use_ingress_cgr &&
 				(dpa_fq->fq_type == FQ_TYPE_RX_DEFAULT ||
 				 dpa_fq->fq_type == FQ_TYPE_RX_ERROR ||
-				 dpa_fq->fq_type == FQ_TYPE_RX_PCD)) {
+				 dpa_fq->fq_type == FQ_TYPE_RX_PCD ||
+				 dpa_fq->fq_type == FQ_TYPE_RX_PCD_HI_PRIO)) {
 			initfq.we_mask |= QM_INITFQ_WE_CGID;
 			initfq.fqd.fq_ctrl |= QM_FQCTRL_CGE;
 			initfq.fqd.cgid = (uint8_t)priv->ingress_cgr.cgrid;
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sysfs.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sysfs.c
index 95fa461..3542d0b 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sysfs.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sysfs.c
@@ -102,6 +102,9 @@ static ssize_t dpaa_eth_show_fqids(struct device *dev,
 		case FQ_TYPE_TX:
 			str = "Tx";
 			break;
+		case FQ_TYPE_RX_PCD_HI_PRIO:
+			str ="Rx PCD High Priority";
+			break;
 		default:
 			str = "Unknown";
 		}
-- 
1.7.5.4

