From 37364125911564980d31521c91594dc2e890dee7 Mon Sep 17 00:00:00 2001
From: Scott Wood <scottwood@freescale.com>
Date: Sat, 2 Mar 2013 08:50:33 +0000
Subject: [PATCH 0962/1383] powerpc/e500: work around erratum A-006184

Erratum A-006184 says that a hang can happen under certain
circumstances when taking an exception.  The erratum workaround
gives the use of a watchdog as an option, to get unstuck if a hang
does occur.

Signed-off-by: Scott Wood <scottwood@freescale.com>
Change-Id: Ib63bea70bb2ad7ea4cee9b96ec4f7aefc21ea3b3
Reviewed-on: http://git.am.freescale.net:8181/1113
Tested-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
Reviewed-by: Fleming Andrew-AFLEMING <AFLEMING@freescale.com>
(cherry picked from commit 4099f70e94789731c3a20f89be058cfb2bfed836)
Signed-off-by: Scott Wood <scott.wood@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 arch/powerpc/kernel/exceptions-64e.S   |  9 ++++++++
 arch/powerpc/kernel/head_fsl_booke.S   | 10 +++++++-
 arch/powerpc/kernel/idle.c             |  3 +++
 arch/powerpc/kernel/time.c             | 11 +++++++++
 arch/powerpc/platforms/Kconfig.cputype | 42 ++++++++++++++++++++++++++++++++++
 drivers/watchdog/Kconfig               |  2 +-
 6 files changed, 75 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index 3e68d1c..3230dff 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -683,6 +683,14 @@ END_FTR_SECTION_IFSET(CPU_FTR_ALTIVEC)
 			   fixed_interval, unknown_exception, ACK_FIT)
 
 /* Watchdog Timer Interrupt */
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+	START_EXCEPTION(watchdog)
+	mtspr	SPRN_SPRG_CRIT_SCRATCH, r3
+	lis	r3, TSR_WIS@h
+	mtspr	SPRN_TSR, r3
+	mfspr	r3, SPRN_SPRG_CRIT_SCRATCH
+	rfci
+#else
 	START_EXCEPTION(watchdog);
 	CRIT_EXCEPTION_PROLOG(0x9f0, BOOKE_INTERRUPT_WATCHDOG,
 			      PROLOG_ADDITION_NONE)
@@ -697,6 +705,7 @@ END_FTR_SECTION_IFSET(CPU_FTR_ALTIVEC)
 	bl	unknown_exception
 #endif
 	b	ret_from_crit_except
+#endif
 
 /* System Call Interrupt */
 	START_EXCEPTION(system_call)
diff --git a/arch/powerpc/kernel/head_fsl_booke.S b/arch/powerpc/kernel/head_fsl_booke.S
index 709bc50..077b6ba 100644
--- a/arch/powerpc/kernel/head_fsl_booke.S
+++ b/arch/powerpc/kernel/head_fsl_booke.S
@@ -430,7 +430,15 @@ interrupt_base:
 		  unknown_exception, EXC_XFER_EE)
 
 	/* Watchdog Timer Interrupt */
-#ifdef CONFIG_BOOKE_WDT
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+	START_EXCEPTION(WatchdogTimer)
+	mtspr	SPRN_SPRG_WSCRATCH_CRIT, r3
+	lis	r3, TSR_WIS@h
+	mtspr	SPRN_TSR, r3
+	/* use WSCRATCH to avoid any potential problems with KVM paravirt */
+	mfspr	r3, SPRN_SPRG_WSCRATCH_CRIT
+	rfci
+#elif defined(CONFIG_BOOKE_WDT)
 	CRITICAL_EXCEPTION(0x3200, WATCHDOG, WatchdogTimer, WatchdogException)
 #else
 	CRITICAL_EXCEPTION(0x3200, WATCHDOG, WatchdogTimer, unknown_exception)
diff --git a/arch/powerpc/kernel/idle.c b/arch/powerpc/kernel/idle.c
index d7216c9..2d7cf86 100644
--- a/arch/powerpc/kernel/idle.c
+++ b/arch/powerpc/kernel/idle.c
@@ -75,6 +75,9 @@ void arch_cpu_idle(void)
 		HMT_very_low();
 	}
 
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+	mtspr(SPRN_TSR, TSR_ENW);
+#endif
 	HMT_medium();
 	ppc64_runlatch_on();
 }
diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 56f4484..5560457 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -530,6 +530,9 @@ void timer_interrupt(struct pt_regs * regs)
 	struct pt_regs *old_regs;
 	u64 *next_tb = this_cpu_ptr(&decrementers_next_tb);
 
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+	mtspr(SPRN_TSR, TSR_ENW);
+#endif
 	/* Ensure a positive value is written to the decrementer, or else
 	 * some CPUs will continue to take decrementer exceptions.
 	 */
@@ -689,7 +692,15 @@ static void start_cpu_decrementer(void)
 	mtspr(SPRN_TSR, TSR_ENW | TSR_WIS | TSR_DIS | TSR_FIS);
 
 	/* Enable decrementer interrupt */
+#ifdef CONFIG_FSL_ERRATUM_A_006184
+#define WDTP(x)		((((x)&0x3)<<30)|(((x)&0x3c)<<15))
+	{
+		u32 period = WDTP(CONFIG_FSL_ERRATUM_A_006184_PERIOD);
+		mtspr(SPRN_TCR, TCR_DIE | TCR_WIE | period);
+	}
+#else
 	mtspr(SPRN_TCR, TCR_DIE);
+#endif
 #endif /* defined(CONFIG_BOOKE) || defined(CONFIG_40x) */
 }
 
diff --git a/arch/powerpc/platforms/Kconfig.cputype b/arch/powerpc/platforms/Kconfig.cputype
index 6a0f491..bc8eed5 100644
--- a/arch/powerpc/platforms/Kconfig.cputype
+++ b/arch/powerpc/platforms/Kconfig.cputype
@@ -178,6 +178,48 @@ config PPC_E500MC
 	  such as e5500/e6500), and must be disabled for running on
 	  e500v1 or e500v2.
 
+config FSL_ERRATUM_A_006184
+	bool "Work around erratum A-006184"
+	help
+	  Define this to work around erratum A-006184 ("Simultaneous
+	  Instruction L1 MMU miss (due to eviction) and interrupt
+	  servicing can cause a core hang").  This erratum affects
+	  e500v1, e500v2, e500mc, and e5500.  The workaround will
+	  cause a watchdog interrupt to occur periodically.  It will
+	  not avoid the hang described by the erratum, but it will
+	  recover from it when the next watchdog interrupt expires.
+
+	  The normal watchdog functionality cannot be used when this
+	  workaround is enabled.
+
+	  If you are running Linux as the guest of a hypervisor, you
+	  should enable this (or a similar workaround) in the host
+	  instead.
+
+	  Note that it is believed that it is unlikely that the hang
+	  will be encountered in normal Linux operation.  Running KVM
+	  or using hugetlbfs could increase the chance of seeing the
+	  hang.
+
+config FSL_ERRATUM_A_006184_PERIOD
+	int "Watchdog period for A-006184 workaround"
+	range 32 52
+	default 43
+	help
+	  This is the watchdog period to be used for the A-006184
+	  workaround.  The watchdog will fire whenever the bit selected
+	  transitions from 0 to 1 in the time base.  The bits are
+	  numbered with 0 starting at the most-signficant end --
+	  larger numbers give a more frequent period.
+
+	  The period must be set longer than the non-idle decrementer
+	  period, to ensure that the watchdog interrupt only actually
+	  happens when stuck -- but the longer the period, the worse the
+	  latency will be if a hang does occur.  Long decrementer
+	  timeouts when idle due to CONFIG_NO_HZ should not be a problem,
+	  since when idle we will always have just executed from the main
+	  kernel mapping, so it should not be absent from the L1 I-MMU.
+
 config PPC_FPU
 	bool
 	default y if PPC64
diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index 020fb8a..68ac833 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -1315,7 +1315,7 @@ config PIKA_WDT
 
 config BOOKE_WDT
 	tristate "PowerPC Book-E Watchdog Timer"
-	depends on BOOKE || 4xx
+	depends on (BOOKE || 4xx) && !FSL_ERRATUM_A_006184
 	select WATCHDOG_CORE
 	---help---
 	  Watchdog driver for PowerPC Book-E chips, such as the Freescale
-- 
2.8.1

