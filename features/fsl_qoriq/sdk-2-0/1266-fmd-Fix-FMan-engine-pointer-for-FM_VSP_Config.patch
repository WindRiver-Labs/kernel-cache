From 13bf64e4f9e48473d1af84480638386b4b58fea1 Mon Sep 17 00:00:00 2001
From: Marian Chereji <marian.chereji@nxp.com>
Date: Tue, 29 Mar 2016 11:37:00 +0300
Subject: [PATCH 1266/1383] fmd: Fix FMan engine pointer for FM_VSP_Config

In compatibility mode (32bit applications working with 64bit kernel),
when calling the FM_VSP_Config function there is a problem when
assigning the pointer to the FMan engine control block. Basically,
the application will send the VSP configuration call to the proper
FMan engine device file (let it be FMan #0 or FMan #1 device file).
The address to this engine is not available in user space hence
translating it from the application parameters is useless. The only
thing the application CAN send is the NUMBER of the FMan engine, but
never its address. This address should basically be recovered directly
from the device file the FM_VSP_Config call came from, in the same
way it is done for non-compatibility mode (32bit applications working
with 32bit kernel or 64bit applications working with 64bit kernel).

Signed-off-by: Marian Chereji <marian.chereji@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm.c | 2 +-
 .../ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm_compat.c  | 3 ---
 2 files changed, 1 insertion(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm.c b/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm.c
index 7a7f237..f75c286 100644
--- a/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm.c
+++ b/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm.c
@@ -3198,10 +3198,10 @@ invalid_port_id:
                 RETURN_ERROR(MINOR, E_WRITE_FAILED, NO_MSG);
         {
             uint8_t portId = param.port_params.port_id;
-            param.p_fm = p_LnxWrpFmDev->h_Dev;
             param.liodn_offset =
                 p_LnxWrpFmDev->rxPorts[portId].settings.param.specificParams.rxParams.liodnOffset;
         }
+        param.p_fm = p_LnxWrpFmDev->h_Dev;
         param.id = FM_VSP_Config((t_FmVspParams *)&param);
 
 #if defined(CONFIG_COMPAT)
diff --git a/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm_compat.c b/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm_compat.c
index 5e5243c..322ae9e 100644
--- a/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm_compat.c
+++ b/drivers/net/ethernet/freescale/sdk_fman/src/wrapper/lnxwrp_ioctls_fm_compat.c
@@ -1201,17 +1201,14 @@ void compat_copy_fm_vsp_params(
 
     if (compat == COMPAT_US_TO_K)
     {
-        param->p_fm = compat_pcd_id2ptr(compat_param->p_fm);
         memcpy(&param->ext_buf_pools, &compat_param->ext_buf_pools, sizeof(ioc_fm_ext_pools));
         param->liodn_offset = compat_param->liodn_offset;
         param->port_params.port_id = compat_param->port_params.port_id;
         param->port_params.port_type = compat_param->port_params.port_type;
         param->relative_profile_id = compat_param->relative_profile_id;
-        param->id = compat_pcd_id2ptr(compat_param->id);
     }
     else
     {
-        compat_param->p_fm = compat_pcd_ptr2id(param->p_fm);
         memcpy(&compat_param->ext_buf_pools, &param->ext_buf_pools, sizeof(ioc_fm_ext_pools));
         compat_param->liodn_offset = param->liodn_offset;
         compat_param->port_params.port_id = param->port_params.port_id;
-- 
2.8.1

