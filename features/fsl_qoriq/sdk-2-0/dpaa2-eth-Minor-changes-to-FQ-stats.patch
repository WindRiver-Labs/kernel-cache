From 4f46a5c679e8a4e8a350ba4df6c9cce201369a82 Mon Sep 17 00:00:00 2001
From: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Date: Fri, 5 Jun 2015 16:38:54 +0300
Subject: [PATCH 0704/1429] dpaa2-eth: Minor changes to FQ stats

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@freescale.com>
Change-Id: I0ced0e7b2eee28599cdea79094336c0d44f0d32b
Reviewed-on: http://git.am.freescale.net:8181/38319
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c     |   18 +------------
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h     |    8 ++----
 drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c |   25 +++++++++++++++++--
 3 files changed, 27 insertions(+), 24 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
index 7b5a80e..d3c71e6 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.c
@@ -752,7 +752,7 @@ static inline int __ldpaa_eth_pull_fq(struct ldpaa_eth_fq *fq)
 	if (unlikely(err))
 		netdev_err(priv->net_dev, "dpaa_io_service_pull err %d", err);
 
-	fq->stats.rx_portal_busy += dequeues;
+	fq->stats.dequeue_portal_busy += dequeues;
 	return err;
 }
 
@@ -1167,21 +1167,7 @@ static void ldpaa_eth_fqdan_cb(struct dpaa_io_notification_ctx *ctx)
 	struct ldpaa_eth_fq *fq = container_of(ctx, struct ldpaa_eth_fq, nctx);
 
 	/* Update NAPI statistics */
-	switch (fq->type) {
-	case LDPAA_RX_FQ:
-		fq->stats.rx_fqdan++;
-		break;
-	case LDPAA_TX_CONF_FQ:
-		fq->stats.tx_conf_fqdan++;
-		break;
-#ifdef CONFIG_FSL_DPAA2_ETH_USE_ERR_QUEUE
-	case LDPAA_RX_ERR_FQ:
-		/* For now, we don't collect FQDAN stats on the error queue */
-		break;
-#endif
-	default:
-		WARN_ONCE(1, "Unknown FQ type: %d!", fq->type);
-	}
+	fq->stats.fqdan++;
 
 	napi_schedule(&fq->napi);
 }
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
index 4b2df73..fef6f3a 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_eth.h
@@ -187,11 +187,9 @@ struct ldpaa_eth_stats {
 /* Per-FQ statistics */
 struct ldpaa_eth_fq_stats {
 	/* Volatile dequeues retried due to portal busy */
-	__u64	rx_portal_busy;
-	/* Number of FQDANs from Rx queues; useful to estimate avg NAPI len */
-	__u64	rx_fqdan;
-	/* Number of FQDANs from Tx Conf queues */
-	__u64	tx_conf_fqdan;
+	__u64	dequeue_portal_busy;
+	/* Number of FQDANs from queues; useful to estimate avg NAPI len */
+	__u64	fqdan;
 };
 
 struct ldpaa_eth_ring {
diff --git a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
index 39cd5fe..d324034 100644
--- a/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
+++ b/drivers/staging/fsl-dpaa2/ethernet/ldpaa_ethtool.c
@@ -66,6 +66,7 @@ char ldpaa_ethtool_extras[][ETH_GSTRING_LEN] = {
 
 	/* How many times we had to retry the volatile dequeue command */
 	"rx portal busy",
+	"tx conf portal_busy",
 	"rx fqdan",
 	"tx conf fqdan",
 #ifdef CONFIG_FSL_QBMAN_DEBUG
@@ -194,6 +195,8 @@ static void ldpaa_get_ethtool_stats(struct net_device *net_dev,
 	uint32_t bcnt_rx_total = 0, bcnt_tx_total = 0;
 	uint32_t buf_cnt;
 #endif
+	uint64_t txconf_fqdan = 0, rx_fqdan = 0;
+	uint64_t rx_portal_busy = 0, txconf_portal_busy = 0;
 	struct ldpaa_eth_priv *priv = netdev_priv(net_dev);
 	struct ldpaa_eth_stats *extras;
 	struct ldpaa_eth_fq_stats *fq_stats;
@@ -220,10 +223,26 @@ static void ldpaa_get_ethtool_stats(struct net_device *net_dev,
 
 	for (j = 0; j < priv->num_fqs; j++) {
 		fq_stats = &priv->fq[j].stats;
-		for (k = 0; k < sizeof(*fq_stats) / sizeof(__u64); k++)
-			*((__u64 *)data + i + k) += *((__u64 *)fq_stats + k);
+
+		switch (priv->fq[j].type) {
+		case LDPAA_TX_CONF_FQ:
+			txconf_fqdan += fq_stats->fqdan;
+			txconf_portal_busy += fq_stats->dequeue_portal_busy;
+			break;
+		case LDPAA_RX_FQ:
+			rx_fqdan += fq_stats->fqdan;
+			rx_portal_busy += fq_stats->dequeue_portal_busy;
+			break;
+		default:
+			break;
+		}
 	}
-	i += k;
+
+	*(data + i++) = rx_portal_busy;
+	*(data + i++) = txconf_portal_busy;
+	*(data + i++) = rx_fqdan;
+	*(data + i++) = txconf_fqdan;
+
 
 #ifdef CONFIG_FSL_QBMAN_DEBUG
 	for (j = 0; j < priv->num_fqs; j++) {
-- 
1.7.5.4

