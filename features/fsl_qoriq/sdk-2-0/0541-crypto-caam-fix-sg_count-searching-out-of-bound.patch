From 963ba8217f387142a07f221f7f93af2381e544da Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Wed, 20 Jan 2016 12:06:55 +0200
Subject: [PATCH 0541/1383] crypto: caam - fix sg_count searching out of bound
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This is a squash of the following commits:
de408515f48a026e7a6abf5cdf6fc06505baaa8c "crypto: caam - fix sg_count searching out of bound"
0de60bc90aaadc0fbde2ec755d6b37775f7e124e "crypto: caam: fix sg_count searching out of bound" (*)
(*) partially squashed (only sg_sw_sec4.h)

In case sg_count is provided with a buffer length greater than
what is in the scatterlist, it will oops.
Stop the count of nents when sg is NULL.

Signed-off-by: Horia GeantÄƒ <horia.geanta@nxp.com>
Signed-off-by: Cristian Stoica <cristian.stoica@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/caam/sg_sw_sec4.h | 19 +++++++++++++++----
 1 file changed, 15 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/caam/sg_sw_sec4.h b/drivers/crypto/caam/sg_sw_sec4.h
index 31312b8..c90794f 100644
--- a/drivers/crypto/caam/sg_sw_sec4.h
+++ b/drivers/crypto/caam/sg_sw_sec4.h
@@ -32,7 +32,10 @@ static inline struct sec4_sg_entry *
 sg_to_sec4_sg(struct scatterlist *sg, int sg_count,
 	      struct sec4_sg_entry *sec4_sg_ptr, u32 offset)
 {
-	while (sg_count) {
+	if (!sg)
+		return NULL;
+
+	while (sg_count && sg) {
 		dma_to_sec4_sg_one(sec4_sg_ptr, sg_dma_address(sg),
 				   sg_dma_len(sg), offset);
 		sec4_sg_ptr++;
@@ -50,6 +53,8 @@ static inline void sg_to_sec4_sg_last(struct scatterlist *sg, int sg_count,
 				      struct sec4_sg_entry *sec4_sg_ptr,
 				      u32 offset)
 {
+	if (!sg)
+		return;
 	sec4_sg_ptr = sg_to_sec4_sg(sg, sg_count, sec4_sg_ptr, offset);
 	sec4_sg_ptr->len |= SEC4_SG_LEN_FIN;
 }
@@ -61,7 +66,7 @@ static inline int __sg_count(struct scatterlist *sg_list, int nbytes,
 	struct scatterlist *sg = sg_list;
 	int sg_nents = 0;
 
-	while (nbytes > 0) {
+	while (nbytes > 0 && sg) {
 		sg_nents++;
 		nbytes -= sg->length;
 		if (!sg_is_last(sg) && (sg + 1)->length == 0)
@@ -88,6 +93,9 @@ static inline void dma_unmap_sg_chained(
 	struct device *dev, struct scatterlist *sg, unsigned int nents,
 	enum dma_data_direction dir, bool chained)
 {
+	if (!sg || !nents)
+		return;
+
 	if (unlikely(chained)) {
 		int i;
 		struct scatterlist *tsg = sg;
@@ -96,7 +104,7 @@ static inline void dma_unmap_sg_chained(
 		 * Use a local copy of the sg pointer to avoid moving the
 		 * head of the list pointed to by sg as we walk the list.
 		 */
-		for (i = 0; i < nents; i++) {
+		for (i = 0; i < nents && tsg; i++) {
 			dma_unmap_sg(dev, tsg, 1, dir);
 			tsg = sg_next(tsg);
 		}
@@ -109,6 +117,9 @@ static inline int dma_map_sg_chained(
 	struct device *dev, struct scatterlist *sg, unsigned int nents,
 	enum dma_data_direction dir, bool chained)
 {
+	if (!sg || !nents)
+		return 0;
+
 	if (unlikely(chained)) {
 		int i;
 		struct scatterlist *tsg = sg;
@@ -117,7 +128,7 @@ static inline int dma_map_sg_chained(
 		 * Use a local copy of the sg pointer to avoid moving the
 		 * head of the list pointed to by sg as we walk the list.
 		 */
-		for (i = 0; i < nents; i++) {
+		for (i = 0; i < nents && tsg; i++) {
 			if (!dma_map_sg(dev, tsg, 1, dir)) {
 				dma_unmap_sg_chained(dev, sg, i, dir,
 						     chained);
-- 
2.8.1

