From 82b72a801241e0f39c1e5b8886756c898a7099e3 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Mon, 18 May 2015 12:55:19 +0300
Subject: [PATCH 0811/1429] fsl-dpaa2: mac: Fix "dpmac netdevs" probing

Fixup code under DPAA2_MAC_NETDEVS to probe again. In particular, remove
the temporary addition of "fixed.c" in the mac/ folder.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Change-Id: Iea6768f3c5cd9b2de2c8421c03ecebf155b9792b
Reviewed-on: http://git.am.freescale.net:8181/37673
Reviewed-by: Ruxandra Ioana Radulescu <ruxandra.radulescu@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
Tested-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/mac/Kconfig  |    9 -
 drivers/staging/fsl-dpaa2/mac/Makefile |    1 -
 drivers/staging/fsl-dpaa2/mac/fixed.c  |  362 --------------------------------
 drivers/staging/fsl-dpaa2/mac/mac.c    |   69 ++----
 4 files changed, 22 insertions(+), 419 deletions(-)
 delete mode 100644 drivers/staging/fsl-dpaa2/mac/fixed.c

diff --git a/drivers/staging/fsl-dpaa2/mac/Kconfig b/drivers/staging/fsl-dpaa2/mac/Kconfig
index af7d83e..a967db1 100644
--- a/drivers/staging/fsl-dpaa2/mac/Kconfig
+++ b/drivers/staging/fsl-dpaa2/mac/Kconfig
@@ -20,12 +20,3 @@ config FSL_DPAA2_MAC_NETDEVS
 	.
 	Leave disabled if unsure.
 
-config FSL_DPAA2_FIXED_PHY_HACK
-	bool "Hack for fixed links, to remove in v3.18"
-	default y
-	depends on FSL_DPAA2_MAC
-	---help---
-	Temporary hack to allow registration of a fixed PHY without a device
-	tree node and actual fixed-link property or child node.
-	Plan is to remove this in kernel 3.18, it includes an updated API which
-	should make this work.
diff --git a/drivers/staging/fsl-dpaa2/mac/Makefile b/drivers/staging/fsl-dpaa2/mac/Makefile
index 271ce0c..bda9410 100644
--- a/drivers/staging/fsl-dpaa2/mac/Makefile
+++ b/drivers/staging/fsl-dpaa2/mac/Makefile
@@ -1,5 +1,4 @@
 
-obj-$(CONFIG_FSL_DPAA2_FIXED_PHY_HACK) += fixed.o
 obj-$(CONFIG_FSL_DPAA2_MAC) += dpaa2-mac.o
 
 dpaa2-mac-objs := mac.o dpmac.o
diff --git a/drivers/staging/fsl-dpaa2/mac/fixed.c b/drivers/staging/fsl-dpaa2/mac/fixed.c
deleted file mode 100644
index dec6cd3..0000000
--- a/drivers/staging/fsl-dpaa2/mac/fixed.c
+++ /dev/null
@@ -1,362 +0,0 @@
-/*
- * Fixed MDIO bus (MDIO bus emulation with fixed PHYs)
- *
- * Author: Vitaly Bordug <vbordug@ru.mvista.com>
- *         Anton Vorontsov <avorontsov@ru.mvista.com>
- *
- * Copyright (c) 2006-2007 MontaVista Software, Inc.
- *
- * This program is free software; you can redistribute  it and/or modify it
- * under  the terms of  the GNU General  Public License as published by the
- * Free Software Foundation;  either version 2 of the  License, or (at your
- * option) any later version.
- */
-
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/platform_device.h>
-#include <linux/list.h>
-#include <linux/mii.h>
-#include <linux/phy.h>
-#include <linux/phy_fixed.h>
-#include <linux/err.h>
-#include <linux/slab.h>
-#include <linux/of.h>
-
-#define MII_REGS_NUM 29
-
-struct fixed_mdio_bus {
-	int irqs[PHY_MAX_ADDR];
-	struct mii_bus *mii_bus;
-	struct list_head phys;
-};
-
-struct fixed_phy {
-	int addr;
-	u16 regs[MII_REGS_NUM];
-	struct phy_device *phydev;
-	struct fixed_phy_status status;
-
-	int (*link_update)(struct net_device *, struct fixed_phy_status *);
-	struct list_head node;
-};
-
-static struct platform_device *pdev;
-static struct fixed_mdio_bus platform_fmb = {
-	.phys = LIST_HEAD_INIT(platform_fmb.phys),
-};
-
-static int fixed_phy_update_regs(struct fixed_phy *fp)
-{
-	u16 bmsr = BMSR_ANEGCAPABLE |
-		   BMSR_ESTATEN | BMSR_100FULL | BMSR_10FULL |
-		   BMSR_100HALF | BMSR_10HALF;
-	u16 bmcr = 0;
-	u16 lpagb = 0;
-	u16 lpa = 0;
-
-	if (fp->status.duplex) {
-		bmcr |= BMCR_FULLDPLX;
-
-		switch (fp->status.speed) {
-		case 1000:
-			bmcr |= BMCR_SPEED1000;
-			lpagb |= LPA_1000FULL;
-			break;
-		case 100:
-			bmcr |= BMCR_SPEED100;
-			lpa |= LPA_100FULL;
-			break;
-		case 10:
-			lpa |= LPA_10FULL;
-			break;
-		default:
-			pr_warn("fixed phy: unknown speed\n");
-			return -EINVAL;
-		}
-	} else {
-		switch (fp->status.speed) {
-		case 1000:
-			bmcr |= BMCR_SPEED1000;
-			lpagb |= LPA_1000HALF;
-			break;
-		case 100:
-			bmcr |= BMCR_SPEED100;
-			lpa |= LPA_100HALF;
-			break;
-		case 10:
-			lpa |= LPA_10HALF;
-			break;
-		default:
-			pr_warn("fixed phy: unknown speed\n");
-			return -EINVAL;
-		}
-	}
-
-	if (fp->status.link)
-		bmsr |= BMSR_LSTATUS | BMSR_ANEGCOMPLETE;
-
-	if (fp->status.pause)
-		lpa |= LPA_PAUSE_CAP;
-
-	if (fp->status.asym_pause)
-		lpa |= LPA_PAUSE_ASYM;
-
-	fp->regs[MII_PHYSID1] = 0;
-	fp->regs[MII_PHYSID2] = 0;
-
-	fp->regs[MII_BMSR] = bmsr;
-	fp->regs[MII_BMCR] = bmcr;
-	fp->regs[MII_LPA] = lpa;
-	fp->regs[MII_STAT1000] = lpagb;
-
-	fp->regs[MII_ESTATUS] = ESTATUS_1000_TFULL | ESTATUS_1000_THALF;
-
-	return 0;
-}
-
-static void fixed_phy_fix_speed(struct fixed_phy *fp, int reg_num, u16 val)
-{
-	if (reg_num != MII_BMCR)
-		return;
-
-	if (val & BMCR_ANENABLE)
-		/* this only works with aneg disabled */
-		return;
-
-	if (val & BMCR_SPEED1000)
-		fp->status.speed = 1000;
-	else if (val & BMCR_SPEED100)
-		fp->status.speed = 100;
-	else
-		fp->status.speed = 10;
-
-	if (val & BMCR_FULLDPLX)
-		fp->status.duplex = 1;
-	else
-		fp->status.duplex = 0;
-}
-
-
-static int fixed_mdio_read(struct mii_bus *bus, int phy_addr, int reg_num)
-{
-	struct fixed_mdio_bus *fmb = bus->priv;
-	struct fixed_phy *fp;
-
-	if (reg_num >= MII_REGS_NUM)
-		return -1;
-
-	list_for_each_entry(fp, &fmb->phys, node) {
-		if (fp->addr == phy_addr) {
-			/* Issue callback if user registered it. */
-			if (fp->link_update) {
-				fp->link_update(fp->phydev->attached_dev,
-						&fp->status);
-				fixed_phy_update_regs(fp);
-			}
-			return fp->regs[reg_num];
-		}
-	}
-
-	return 0xFFFF;
-}
-
-static int fixed_mdio_write(struct mii_bus *bus, int phy_addr, int reg_num,
-			    u16 val)
-{
-	struct fixed_mdio_bus *fmb = bus->priv;
-	struct fixed_phy *fp;
-
-	if (reg_num >= MII_REGS_NUM)
-		return 0;
-
-	list_for_each_entry(fp, &fmb->phys, node) {
-		if (fp->addr == phy_addr) {
-			fixed_phy_fix_speed(fp, reg_num, val);
-			fixed_phy_update_regs(fp);
-		}
-	}
-
-	return 0;
-}
-
-/* If something weird is required to be done with link/speed,
- * network driver is able to assign a function to implement this.
- * May be useful for PHY's that need to be software-driven.
- */
-int fixed_phy_set_link_update2(struct phy_device *phydev,
-			       int (*link_update)(struct net_device *,
-						  struct fixed_phy_status *))
-{
-	struct fixed_mdio_bus *fmb = &platform_fmb;
-	struct fixed_phy *fp;
-
-	if (!link_update || !phydev || !phydev->bus)
-		return -EINVAL;
-
-	list_for_each_entry(fp, &fmb->phys, node) {
-		if (fp->addr == phydev->addr) {
-			fp->link_update = link_update;
-			fp->phydev = phydev;
-			return 0;
-		}
-	}
-
-	return -ENOENT;
-}
-EXPORT_SYMBOL_GPL(fixed_phy_set_link_update2);
-
-int fixed_phy_add2(unsigned int irq, int phy_addr,
-		   struct fixed_phy_status *status)
-{
-	int ret;
-	struct fixed_mdio_bus *fmb = &platform_fmb;
-	struct fixed_phy *fp;
-
-	fp = kzalloc(sizeof(*fp), GFP_KERNEL);
-	if (!fp)
-		return -ENOMEM;
-
-	memset(fp->regs, 0xFF,  sizeof(fp->regs[0]) * MII_REGS_NUM);
-
-	fmb->irqs[phy_addr] = irq;
-
-	fp->addr = phy_addr;
-	fp->status = *status;
-
-	ret = fixed_phy_update_regs(fp);
-	if (ret)
-		goto err_regs;
-
-	list_add_tail(&fp->node, &fmb->phys);
-
-	return 0;
-
-err_regs:
-	kfree(fp);
-	return ret;
-}
-EXPORT_SYMBOL_GPL(fixed_phy_add2);
-
-void fixed_phy_del2(int phy_addr)
-{
-	struct fixed_mdio_bus *fmb = &platform_fmb;
-	struct fixed_phy *fp, *tmp;
-
-	list_for_each_entry_safe(fp, tmp, &fmb->phys, node) {
-		if (fp->addr == phy_addr) {
-			list_del(&fp->node);
-			kfree(fp);
-			return;
-		}
-	}
-}
-EXPORT_SYMBOL_GPL(fixed_phy_del2);
-
-static int phy_fixed_addr;
-static DEFINE_SPINLOCK(phy_fixed_addr_lock);
-
-struct phy_device *fixed_phy_register2(unsigned int irq,
-				       struct fixed_phy_status *status,
-				       struct device_node *np)
-{
-	struct fixed_mdio_bus *fmb = &platform_fmb;
-	struct phy_device *phy;
-	int phy_addr;
-	int ret;
-
-	/* Get the next available PHY address, up to PHY_MAX_ADDR */
-	spin_lock(&phy_fixed_addr_lock);
-	if (phy_fixed_addr == PHY_MAX_ADDR) {
-		spin_unlock(&phy_fixed_addr_lock);
-		return 0;
-	}
-	phy_addr = phy_fixed_addr++;
-	spin_unlock(&phy_fixed_addr_lock);
-
-	ret = fixed_phy_add2(PHY_POLL, phy_addr, status);
-	if (ret < 0)
-		return 0;
-
-	phy = get_phy_device(fmb->mii_bus, phy_addr, false);
-	if (!phy || IS_ERR(phy)) {
-		fixed_phy_del(phy_addr);
-		return 0;
-	}
-
-	of_node_get(np);
-	phy->dev.of_node = np;
-
-	ret = phy_device_register(phy);
-	if (ret) {
-		phy_device_free(phy);
-		of_node_put(np);
-		fixed_phy_del(phy_addr);
-		return 0;
-	}
-
-	return phy;
-}
-
-static int __init fixed_mdio_bus_init(void)
-{
-	struct fixed_mdio_bus *fmb = &platform_fmb;
-	int ret;
-
-	pr_warn("Loaded Fixed MDIO module (DPAA2 hack)!\n");
-
-	pdev = platform_device_register_simple("Fixed MDIO bus (DPAA2)",
-					       0, NULL, 0);
-	if (IS_ERR(pdev)) {
-		ret = PTR_ERR(pdev);
-		goto err_pdev;
-	}
-
-	fmb->mii_bus = mdiobus_alloc();
-	if (fmb->mii_bus == NULL) {
-		ret = -ENOMEM;
-		goto err_mdiobus_reg;
-	}
-
-	snprintf(fmb->mii_bus->id, MII_BUS_ID_SIZE, "fixed-2");
-	fmb->mii_bus->name = "Fixed MDIO Bus (DPAA2)";
-	fmb->mii_bus->priv = fmb;
-	fmb->mii_bus->parent = &pdev->dev;
-	fmb->mii_bus->read = &fixed_mdio_read;
-	fmb->mii_bus->write = &fixed_mdio_write;
-	fmb->mii_bus->irq = fmb->irqs;
-
-	ret = mdiobus_register(fmb->mii_bus);
-	if (ret)
-		goto err_mdiobus_alloc;
-
-	return 0;
-
-err_mdiobus_alloc:
-	mdiobus_free(fmb->mii_bus);
-err_mdiobus_reg:
-	platform_device_unregister(pdev);
-err_pdev:
-	return ret;
-}
-module_init(fixed_mdio_bus_init);
-
-static void __exit fixed_mdio_bus_exit(void)
-{
-	struct fixed_mdio_bus *fmb = &platform_fmb;
-	struct fixed_phy *fp, *tmp;
-
-	mdiobus_unregister(fmb->mii_bus);
-	mdiobus_free(fmb->mii_bus);
-	platform_device_unregister(pdev);
-
-	list_for_each_entry_safe(fp, tmp, &fmb->phys, node) {
-		list_del(&fp->node);
-		kfree(fp);
-	}
-}
-module_exit(fixed_mdio_bus_exit);
-
-MODULE_DESCRIPTION("Fixed MDIO bus (MDIO bus emulation with fixed PHYs) - DPAA2 hack");
-MODULE_AUTHOR("Vitaly Bordug");
-MODULE_LICENSE("GPL");
diff --git a/drivers/staging/fsl-dpaa2/mac/mac.c b/drivers/staging/fsl-dpaa2/mac/mac.c
index f34e456..15dd9f7 100644
--- a/drivers/staging/fsl-dpaa2/mac/mac.c
+++ b/drivers/staging/fsl-dpaa2/mac/mac.c
@@ -53,15 +53,15 @@
 
 
 /* use different err functions if the driver registers phyX netdevs */
-#ifdef FSL_DPAA2_MAC_NETDEVS
+#ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
 #define ppx_err(netdev, ...)  netdev_err(netdev, __VA_ARGS__)
 #define ppx_warn(netdev, ...) netdev_err(netdev, __VA_ARGS__)
 #define ppx_info(netdev, ...) netdev_err(netdev, __VA_ARGS__)
-#else /* FSL_DPAA2_MAC_NETDEVS */
+#else /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 #define ppx_err(netdev, ...)  dev_err(&netdev->dev, __VA_ARGS__)
 #define ppx_warn(netdev, ...) dev_err(&netdev->dev, __VA_ARGS__)
 #define ppx_info(netdev, ...) dev_err(&netdev->dev, __VA_ARGS__)
-#endif /* FSL_DPAA2_MAC_NETDEVS */
+#endif /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 
 struct phy_device *fixed_phy_register2(unsigned int irq,
 				       struct fixed_phy_status *status,
@@ -107,7 +107,7 @@ static phy_interface_t ppx_eth_iface_mode[] __maybe_unused =  {
 
 static void ppx_link_changed(struct net_device *netdev);
 
-#ifdef FSL_DPAA2_MAC_NETDEVS
+#ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
 static netdev_tx_t ppx_dropframe(struct sk_buff *skb, struct net_device *dev);
 static int ppx_open(struct net_device *netdev);
 static int ppx_stop(struct net_device *netdev);
@@ -321,36 +321,7 @@ static int ppx_ethtool_get_sset_count(struct net_device *dev, int sset)
 		return -EOPNOTSUPP;
 	}
 }
-#endif /* FSL_DPAA2_MAC_NETDEVS */
-
-#ifdef CONFIG_FSL_DPAA2_FIXED_PHY_HACK
-static struct phy_device *ppx_register_fixed_link(struct net_device *netdev)
-{
-	struct fixed_phy_status status = {
-		.link = 1,
-		.speed = 100,
-		.duplex = 0,
-	};
-	struct phy_device *phy;
-	int err;
-
-	phy = fixed_phy_register2(PHY_POLL, &status, NULL);
-	if (!phy)
-		return NULL;
-	/* disable aneg to let the user fake speeds */
-	phy->autoneg = 0;
-
-	/* TODO: interface mode */
-	err = phy_connect_direct(netdev, phy, &ppx_link_changed,
-				 PHY_INTERFACE_MODE_NA);
-	if (err) {
-		ppx_err(netdev, "phy_connect_direct err %d\n", err);
-		return NULL;
-	}
-
-	return phy;
-}
-#endif /* CONFIG_FSL_DPAA2_FIXED_PHY_HACK */
+#endif /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 
 static void ppx_link_changed(struct net_device *netdev)
 {
@@ -558,7 +529,8 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 
 	dev_set_drvdata(dev, priv);
 
-	err = fsl_mc_portal_allocate(mc_dev, 0, &mc_dev->mc_io);
+	err = fsl_mc_portal_allocate(mc_dev, FSL_MC_IO_ATOMIC_CONTEXT_PORTAL,
+				     &mc_dev->mc_io);
 	if (err) {
 		dev_err(dev, "fsl_mc_portal_allocate err %d\n", err);
 		goto err_free_netdev;
@@ -592,7 +564,7 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 	if (err)
 		goto err_close;
 
-#ifdef FSL_DPAA2_MAC_NETDEVS
+#ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
 	/* OPTIONAL, register netdev just to make it visible to the user */
 	netdev->netdev_ops = &ppx_ndo;
 	netdev->ethtool_ops = &ppx_ethtool_ops;
@@ -605,7 +577,7 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 		dev_err(dev, "register_netdev error %d\n", err);
 		goto err_free_irq;
 	}
-#endif /* FSL_DPAA2_MAC_NETDEVS */
+#endif /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 
 	/* try to connect to the PHY */
 	/* phy_node = of_find_node_by_phandle(priv->attr.phy_id); */
@@ -625,7 +597,6 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 			goto err_no_phy;
 		}
 	}
-	pr_info("dpmac %d -> phy %d (%s)\n", priv->attr.id, phy_cnt, phy_name);
 	phy_cnt++;
 /*
 	if (priv->attr.eth_if <
@@ -653,26 +624,30 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 	dev_info(dev, "found a PHY!\n");
 
 err_no_phy:
-#ifdef CONFIG_FSL_DPAA2_FIXED_PHY_HACK
 	if (!netdev->phydev) {
+		struct fixed_phy_status status = {
+			.link = 1,
+			.speed = 1000,
+			.duplex = 1,
+		};
+
 		/* try to register a fixed link phy */
-		netdev->phydev = ppx_register_fixed_link(netdev);
-		if (!netdev->phydev) {
+		netdev->phydev = fixed_phy_register(PHY_POLL, &status, NULL);
+		if (!netdev->phydev || IS_ERR(netdev->phydev)) {
 			dev_err(dev, "error trying to register fixed PHY!\n");
 			err = -EFAULT;
 			goto err_free_irq;
 		}
-		dev_info(dev, "registered fixed PHY!\n");
+		dev_info(dev, "Registered fixed PHY %d (%s) connected to DPMAC %d\n",
+			 phy_cnt, phy_name, priv->attr.id);
 	}
 
-#endif /* CONFIG_FSL_DPAA2_FIXED_PHY_HACK */
-
 	/* start PHY state machine */
-#ifdef FSL_DPAA2_MAC_NETDEVS
+#ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
 	ppx_open(netdev);
-#else /* FSL_DPAA2_MAC_NETDEVS */
+#else /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 	phy_start(netdev->phydev);
-#endif /* FSL_DPAA2_MAC_NETDEVS */
+#endif /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
 	return 0;
 
 err_free_irq:
-- 
1.7.5.4

