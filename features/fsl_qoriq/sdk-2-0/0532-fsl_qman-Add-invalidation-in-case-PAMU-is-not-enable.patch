From 5c658f8694e67661d65b1b16ccf2ab1fd33f80d4 Mon Sep 17 00:00:00 2001
From: Roy Pledge <Roy.Pledge@freescale.com>
Date: Thu, 14 Jan 2016 16:20:41 -0500
Subject: [PATCH 0532/1383] fsl_qman: Add invalidation in case PAMU is not
 enabled

Signed-off-by: Roy Pledge <Roy.Pledge@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/qman_high.c | 9 +++++++--
 drivers/staging/fsl_qbman/qman_low.h  | 9 +++++++++
 2 files changed, 16 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fsl_qbman/qman_high.c b/drivers/staging/fsl_qbman/qman_high.c
index c50828b..580adb0 100644
--- a/drivers/staging/fsl_qbman/qman_high.c
+++ b/drivers/staging/fsl_qbman/qman_high.c
@@ -416,8 +416,13 @@ struct qman_portal *qman_create_portal(
 
 	__p = &portal->p;
 
-	portal->use_eqcr_ci_stashing = ((qman_ip_rev >= QMAN_REV30) ?
-								1 : 0);
+#ifdef CONFIG_FSL_PAMU
+        /* PAMU is required for stashing */
+        portal->use_eqcr_ci_stashing = ((qman_ip_rev >= QMAN_REV30) ?
+                                                                1 : 0);
+#else
+        portal->use_eqcr_ci_stashing = 0;
+#endif
 
 	/* prep the low-level portal struct with the mapped addresses from the
 	 * config, everything that follows depends on it and "config" is more
diff --git a/drivers/staging/fsl_qbman/qman_low.h b/drivers/staging/fsl_qbman/qman_low.h
index 407a82c..6ac7ecd 100644
--- a/drivers/staging/fsl_qbman/qman_low.h
+++ b/drivers/staging/fsl_qbman/qman_low.h
@@ -694,6 +694,15 @@ static inline void qm_dqrr_pvb_update(struct qm_portal *portal)
 	register struct qm_dqrr *dqrr = &portal->dqrr;
 	const struct qm_dqrr_entry *res = qm_cl(dqrr->ring, dqrr->pi);
 	DPA_ASSERT(dqrr->pmode == qm_dqrr_pvb);
+#ifndef CONFIG_FSL_PAMU
+        /*
+         * If PAMU is not available we need to invalidate the cache.
+         * When PAMU is available the cache is updated by stash
+         */
+	dcbi(res);
+	dcbt_ro(res);
+#endif
+
 	/* when accessing 'verb', use __raw_readb() to ensure that compiler
 	 * inlining doesn't try to optimise out "excess reads". */
 	if ((__raw_readb(&res->verb) & QM_DQRR_VERB_VBIT) == dqrr->vbit) {
-- 
2.8.1

