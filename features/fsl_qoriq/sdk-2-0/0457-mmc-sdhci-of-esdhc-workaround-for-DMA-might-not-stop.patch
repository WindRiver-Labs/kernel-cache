From daecc4cf0eae6c518eb9362ea917855117dd09c7 Mon Sep 17 00:00:00 2001
From: Yangbo Lu <yangbo.lu@nxp.com>
Date: Tue, 12 Jan 2016 17:20:50 +0800
Subject: [PATCH 0457/1383] mmc: sdhci-of-esdhc: workaround for DMA might not
 stop when error occurs

A-004388: eSDHC DMA might not stop if error occurs on system transaction

Description: eSDHC DMA(SDMA/ADMA) might not stop if an error occurs in
the last system transaction. It may continue initiating additional
transactions until software reset for data/all is issued during error
recovery. There is not any data corruption to the SD data. The
IRQSTAT[DMAE] is set when the erratum occurs. The only conditions under
which issues occur are the following:
1. SDMA - For SD Write , the error occurs in the last system transaction.
No issue for SD read.
2. ADMA
a. Block count is enabled: For SD write, the error occurs in the last
system transaction. There is no issue for SD read when block count is
enabled.
b. Block count is disabled: Block count is designated by the ADMA
descriptor table, and the error occurs in the last system transaction
when ADMA is executing last descriptor line of table.

Impact: eSDHC may initiate additional system transactions. There is no
data integrity issue for case 1 and 2a described below. For case 2b,
system data might be corrupted.

Workaround: Set eSDHC_SYSCTL[RSTD] when IRQSTAT[DMAE] is set. For cases
2a and 2b above, add an extra descriptor line with zero data next to the
last descriptor line.

Signed-off-by: Haijun Zhang <Haijun.Zhang@freescale.com>
Signed-off-by: Jerry Huang <Chang-Ming.Huang@freescale.com>
Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/mmc/host/sdhci-of-esdhc.c | 95 +++++++++++++++++++++++++++++++++++----
 1 file changed, 86 insertions(+), 9 deletions(-)

diff --git a/drivers/mmc/host/sdhci-of-esdhc.c b/drivers/mmc/host/sdhci-of-esdhc.c
index 417527d..ac8eb2e 100644
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@ -375,19 +375,96 @@ static void esdhc_of_adma_workaround(struct sdhci_host *host, u32 intmask)
 	applicable = (intmask & SDHCI_INT_DATA_END) &&
 		     (intmask & SDHCI_INT_BLK_GAP) &&
 		     (esdhc->vendor_ver == VENDOR_V_23);
-	if (!applicable)
+	if (applicable) {
+
+		sdhci_reset(host, SDHCI_RESET_DATA);
+		host->data->error = 0;
+		dmastart = sg_dma_address(host->data->sg);
+		dmanow = dmastart + host->data->bytes_xfered;
+		/*
+		 * Force update to the next DMA block boundary.
+		 */
+		dmanow = (dmanow & ~(SDHCI_DEFAULT_BOUNDARY_SIZE - 1)) +
+			SDHCI_DEFAULT_BOUNDARY_SIZE;
+		host->data->bytes_xfered = dmanow - dmastart;
+		sdhci_writel(host, dmanow, SDHCI_DMA_ADDRESS);
+
 		return;
+	}
 
-	host->data->error = 0;
-	dmastart = sg_dma_address(host->data->sg);
-	dmanow = dmastart + host->data->bytes_xfered;
 	/*
-	 * Force update to the next DMA block boundary.
+	 * Check for A-004388: eSDHC DMA might not stop if error
+	 * occurs on system transaction
+	 * Impact list:
+	 * T4240-4160-R1.0 B4860-4420-R1.0-R2.0 P1010-1014-R1.0
+	 * P3041-R1.0-R2.0-R1.1 P2041-2040-R1.0-R1.1-R2.0
+	 * P5020-5010-R2.0-R1.0 P5040-5021-R2.0-R2.1
 	 */
-	dmanow = (dmanow & ~(SDHCI_DEFAULT_BOUNDARY_SIZE - 1)) +
-		SDHCI_DEFAULT_BOUNDARY_SIZE;
-	host->data->bytes_xfered = dmanow - dmastart;
-	sdhci_writel(host, dmanow, SDHCI_DMA_ADDRESS);
+	if (!(((esdhc->soc_ver == SVR_T4240) && (esdhc->soc_rev == 0x10)) ||
+		((esdhc->soc_ver == SVR_T4160) && (esdhc->soc_rev == 0x10)) ||
+		((esdhc->soc_ver == SVR_B4860) && (esdhc->soc_rev == 0x10)) ||
+		((esdhc->soc_ver == SVR_B4860) && (esdhc->soc_rev == 0x20)) ||
+		((esdhc->soc_ver == SVR_B4420) && (esdhc->soc_rev == 0x10)) ||
+		((esdhc->soc_ver == SVR_B4420) && (esdhc->soc_rev == 0x20)) ||
+		((esdhc->soc_ver == SVR_P1010) && (esdhc->soc_rev == 0x10)) ||
+		((esdhc->soc_ver == SVR_P1014) && (esdhc->soc_rev == 0x10)) ||
+		((esdhc->soc_ver == SVR_P3041) && (esdhc->soc_rev <= 0x20)) ||
+		((esdhc->soc_ver == SVR_P2041) && (esdhc->soc_rev <= 0x20)) ||
+		((esdhc->soc_ver == SVR_P2040) && (esdhc->soc_rev <= 0x20)) ||
+		((esdhc->soc_ver == SVR_P5020) && (esdhc->soc_rev <= 0x20)) ||
+		((esdhc->soc_ver == SVR_P5010) && (esdhc->soc_rev <= 0x20)) ||
+		((esdhc->soc_ver == SVR_P5040) && (esdhc->soc_rev <= 0x21)) ||
+		((esdhc->soc_ver == SVR_P5021) && (esdhc->soc_rev <= 0x21))))
+		return;
+
+	sdhci_reset(host, SDHCI_RESET_DATA);
+
+	if (host->flags & SDHCI_USE_ADMA) {
+		u32 mod, i, offset;
+		u8 *desc;
+		dma_addr_t addr;
+		struct scatterlist *sg;
+		__le32 *dataddr;
+		__le32 *cmdlen;
+
+		/*
+		 * If block count was enabled, in case read transfer there
+		 * is no data was corrupted
+		 */
+		mod = sdhci_readl(host, SDHCI_TRANSFER_MODE);
+		if ((mod & SDHCI_TRNS_BLK_CNT_EN) &&
+				(host->data->flags & MMC_DATA_READ))
+			host->data->error = 0;
+
+		BUG_ON(!host->data);
+		desc = host->adma_table;
+		for_each_sg(host->data->sg, sg, host->sg_count, i) {
+			addr = sg_dma_address(sg);
+			offset = (4 - (addr & 0x3)) & 0x3;
+			if (offset)
+				desc += 8;
+			desc += 8;
+		}
+
+		/*
+		 * Add an extra zero descriptor next to the
+		 * terminating descriptor.
+		 */
+		desc += 8;
+		WARN_ON((desc - (u8 *)(host->adma_table)) > (128 * 2 + 1) * 4);
+
+		dataddr = (__le32 __force *)(desc + 4);
+		cmdlen = (__le32 __force *)desc;
+
+		cmdlen[0] = cpu_to_le32(0);
+		dataddr[0] = cpu_to_le32(0);
+	}
+
+	if ((host->flags & SDHCI_USE_SDMA) &&
+			(host->data->flags & MMC_DATA_READ))
+		host->data->error = 0;
+
+	return;
 }
 
 static int esdhc_of_enable_dma(struct sdhci_host *host)
-- 
2.8.1

