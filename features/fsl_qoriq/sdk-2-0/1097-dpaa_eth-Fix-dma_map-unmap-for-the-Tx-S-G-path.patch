From 14e891eee560f9a4c24683f376346d05daec1452 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Thu, 18 Jun 2015 16:03:28 +0300
Subject: [PATCH 1097/1383] dpaa_eth: Fix dma_map/unmap for the Tx S/G path

Signed-off-by: Madalin Bucur <madalin.bucur@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 .../net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c  | 28 +++++++++++-----------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index bab3bfc..64a270e 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -223,13 +223,14 @@ struct sk_buff *_dpa_cleanup_tx_fd(const struct dpa_priv_s *priv,
 	int nr_frags;
 	int sg_len;
 
-	dma_unmap_single(dpa_bp->dev, addr, dpa_bp->size, dma_dir);
-
 	/* retrieve skb back pointer */
 	DPA_READ_SKB_PTR(skb, skbh, phys_to_virt(addr), 0);
-	nr_frags = skb_shinfo(skb)->nr_frags;
 
-	if (fd->format == qm_fd_sg) {
+	if (unlikely(fd->format == qm_fd_sg)) {
+		nr_frags = skb_shinfo(skb)->nr_frags;
+		dma_unmap_single(dpa_bp->dev, addr, dpa_fd_offset(fd) +
+				 sizeof(struct qm_sg_entry) * (1 + nr_frags),
+				 dma_dir);
 		/* The sgt buffer has been allocated with netdev_alloc_frag(),
 		 * it's from lowmem.
 		 */
@@ -269,9 +270,10 @@ struct sk_buff *_dpa_cleanup_tx_fd(const struct dpa_priv_s *priv,
 
 		/* Free the page frag that we allocated on Tx */
 		put_page(virt_to_head_page(sgt));
-	}
+	} else {
+		dma_unmap_single(dpa_bp->dev, addr,
+				 skb_tail_pointer(skb) - (u8 *)skbh, dma_dir);
 #ifdef CONFIG_FSL_DPAA_TS
-	else {
 		/* get the timestamp for non-SG frames */
 #ifdef CONFIG_FSL_DPAA_1588
 		if (priv->tsu && priv->tsu->valid &&
@@ -285,8 +287,8 @@ struct sk_buff *_dpa_cleanup_tx_fd(const struct dpa_priv_s *priv,
 			dpa_get_ts(priv, TX, &shhwtstamps, (void *)skbh);
 			skb_tstamp_tx(skb, &shhwtstamps);
 		}
-	}
 #endif
+	}
 
 	return skb;
 }
@@ -711,7 +713,7 @@ int __hot skb_to_contig_fd(struct dpa_priv_s *priv,
 
 	/* Map the entire buffer size that may be seen by FMan, but no more */
 	addr = dma_map_single(dpa_bp->dev, skbh,
-			skb_end_pointer(skb) - buffer_start, dma_dir);
+			skb_tail_pointer(skb) - buffer_start, dma_dir);
 	if (unlikely(dma_mapping_error(dpa_bp->dev, addr))) {
 		if (netif_msg_tx_err(priv) && net_ratelimit())
 			netdev_err(net_dev, "dma_map_single() failed\n");
@@ -825,14 +827,12 @@ int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 	fd->offset = priv->tx_headroom;
 
 	/* DMA map the SGT page */
-	buffer_start = (void *)sgt - dpa_fd_offset(fd);
-	/* Can't write at "negative" offset in buffer_start, because this skb
-	 * may not have been allocated by us.
-	 */
+	buffer_start = (void *)sgt - priv->tx_headroom;
 	DPA_WRITE_SKB_PTR(skb, skbh, buffer_start, 0);
 
-	addr = dma_map_single(dpa_bp->dev, buffer_start,
-		skb_end_pointer(skb) - (unsigned char *)buffer_start, dma_dir);
+	addr = dma_map_single(dpa_bp->dev, buffer_start, priv->tx_headroom +
+			      sizeof(struct qm_sg_entry) * (1 + nr_frags),
+			      dma_dir);
 	if (unlikely(dma_mapping_error(dpa_bp->dev, addr))) {
 		dev_err(dpa_bp->dev, "DMA mapping failed");
 		err = -EINVAL;
-- 
2.8.1

