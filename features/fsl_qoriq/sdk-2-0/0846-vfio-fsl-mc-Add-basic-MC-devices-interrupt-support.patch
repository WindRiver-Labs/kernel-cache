From 50c95f85f88194ad7367864eb29cc16445fe4c5e Mon Sep 17 00:00:00 2001
From: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Date: Wed, 22 Jul 2015 15:51:50 +0530
Subject: [PATCH 0846/1383] vfio fsl-mc: Add basic MC devices interrupt support

This patch add fsl mc devices interrupt support. Interrupts
can now be configured using VFIO APIs and configured eventfd
will be raised when interrupt happens.

With this patch following device interrupts are supported:
 - dprc
 - dpmcp
 - dpio
 - dpni
 - dpbp

Signed-off-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/vfio/fsl-mc/Makefile              |   2 +-
 drivers/vfio/fsl-mc/vfio_fsl_mc.c         | 208 +++++++++--
 drivers/vfio/fsl-mc/vfio_fsl_mc_intr.c    | 586 ++++++++++++++++++++++++++++++
 drivers/vfio/fsl-mc/vfio_fsl_mc_private.h |  21 ++
 4 files changed, 795 insertions(+), 22 deletions(-)
 create mode 100644 drivers/vfio/fsl-mc/vfio_fsl_mc_intr.c

diff --git a/drivers/vfio/fsl-mc/Makefile b/drivers/vfio/fsl-mc/Makefile
index 6f2b806..2aca75a 100644
--- a/drivers/vfio/fsl-mc/Makefile
+++ b/drivers/vfio/fsl-mc/Makefile
@@ -1,2 +1,2 @@
 vfio-fsl_mc-y := vfio_fsl_mc.o
-obj-$(CONFIG_VFIO_FSL_MC) += vfio_fsl_mc.o
+obj-$(CONFIG_VFIO_FSL_MC) += vfio_fsl_mc.o vfio_fsl_mc_intr.o
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc.c b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
index bb531d1..18f263c 100644
--- a/drivers/vfio/fsl-mc/vfio_fsl_mc.c
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc.c
@@ -27,6 +27,7 @@
 
 #include "vfio_fsl_mc_private.h"
 struct fsl_mc_io *vfio_mc_io = NULL;
+struct fsl_mc_io *vfio_atomic_mc_io = NULL;
 
 static DEFINE_MUTEX(driver_lock);
 
@@ -45,6 +46,10 @@ static bool vfio_validate_mmap_addr(struct vfio_fsl_mc_device *vdev,
 	if ((addr + size) < addr)
 		return false;
 
+	/* Hack to allow mmap GITS_TRANSLATOR Register Page */
+	if (addr == 0x6030000)
+		return true;
+
 	for (idx = 0; idx < mc_dev->obj_desc.region_count; idx++) {
 		region_addr = mc_dev->regions[idx].start;
 		region_size = mc_dev->regions[idx].end -
@@ -125,14 +130,84 @@ static long vfio_fsl_mc_ioctl(void *device_data,
 	}
 	case VFIO_DEVICE_GET_IRQ_INFO:
 	{
-		dev_err(dev, "VFIO: SET_IRQS not implemented\n");
-		return -EINVAL;
+		struct vfio_irq_info info;
+
+		minsz = offsetofend(struct vfio_irq_info, count);
+		if (copy_from_user(&info, (void __user *)arg, minsz))
+			return -EFAULT;
+
+		if (info.argsz < minsz)
+			return -EINVAL;
+
+		if (info.index >= mc_dev->obj_desc.irq_count)
+			return -EINVAL;
+
+		if (vdev->mc_irqs[info.index].irq_initialized) {
+			info.flags = vdev->mc_irqs[info.index].flags;
+			info.count = vdev->mc_irqs[info.index].count;
+		} else {
+			/*
+			 * If IRQs are not initialized then these can not
+			 * be configuted and used by user-space/
+			 */
+			info.flags = 0;
+			info.count = 0;
+		}
+
+		return copy_to_user((void __user *)arg, &info, minsz);
 	}
 	case VFIO_DEVICE_SET_IRQS:
 	{
-		dev_err(dev, "VFIO: SET_IRQS not implemented\n");
-		return -EINVAL;
+		struct vfio_irq_set hdr;
+		u8 *data = NULL;
+		int ret = 0;
+
+		minsz = offsetofend(struct vfio_irq_set, count);
+
+		if (copy_from_user(&hdr, (void __user *)arg, minsz))
+			return -EFAULT;
+
+		if (hdr.argsz < minsz)
+			return -EINVAL;
+
+		if (hdr.index >= mc_dev->obj_desc.irq_count)
+			return -EINVAL;
+
+		if (hdr.start != 0 || hdr.count > 1)
+			return -EINVAL;
+
+		if (hdr.count == 0 &&
+		    (!(hdr.flags & VFIO_IRQ_SET_DATA_NONE) ||
+		    !(hdr.flags & VFIO_IRQ_SET_ACTION_TRIGGER)))
+			return -EINVAL;
+
+		if (hdr.flags & ~(VFIO_IRQ_SET_DATA_TYPE_MASK |
+				  VFIO_IRQ_SET_ACTION_TYPE_MASK))
+			return -EINVAL;
+
+		if (!(hdr.flags & VFIO_IRQ_SET_DATA_NONE)) {
+			size_t size;
 
+			if (hdr.flags & VFIO_IRQ_SET_DATA_BOOL)
+				size = sizeof(uint8_t);
+			else if (hdr.flags & VFIO_IRQ_SET_DATA_EVENTFD)
+				size = sizeof(int32_t);
+			else
+				return -EINVAL;
+
+			if (hdr.argsz - minsz < hdr.count * size)
+				return -EINVAL;
+
+			data = memdup_user((void __user *)(arg + minsz),
+					   hdr.count * size);
+			if (IS_ERR(data))
+				return PTR_ERR(data);
+		}
+
+		ret = vfio_fsl_mc_set_irqs_ioctl(vdev, hdr.flags,
+						 hdr.index, hdr.start,
+						 hdr.count, data);
+		return ret;
 	}
 	case VFIO_DEVICE_RESET:
 	{
@@ -227,6 +302,8 @@ static void vfio_fsl_mc_release(void *device_data)
 	if (strcmp(mc_dev->obj_desc.type, "dprc") == 0)
 		dprc_reset_container(mc_dev->mc_io, 0, mc_dev->mc_handle,
 				     mc_dev->obj_desc.id);
+	else
+		vfio_fsl_mc_unconfigure_irqs(vdev);
 
 	mutex_unlock(&driver_lock);
 
@@ -259,8 +336,14 @@ static const struct vfio_device_ops vfio_fsl_mc_ops = {
 
 static int vfio_fsl_mc_device_remove(struct device *dev, void *data)
 {
+	struct fsl_mc_device *mc_dev;
 	WARN_ON(dev == NULL);
-	fsl_mc_device_remove(to_fsl_mc_device(dev));
+
+	mc_dev = to_fsl_mc_device(dev);
+	WARN_ON(mc_dev == NULL);
+		return -ENODEV;
+
+	fsl_mc_device_remove(mc_dev);
 	return 0;
 }
 
@@ -271,7 +354,7 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 	struct device *dev = &mc_dev->dev;
 	struct fsl_mc_bus *mc_bus;
 	unsigned int irq_count;
-	int ret;
+	int ret, i;
 
 	dev_info(dev, "Binding with vfio-fsl_mc driver\n");
 
@@ -303,56 +386,118 @@ static int vfio_fsl_mc_probe(struct fsl_mc_device *mc_dev)
 				&mc_dev->mc_handle);
 		if (ret) {
 			dev_err(dev, "dprc_open() failed: error = %d\n", ret);
-			goto err;
+			goto free_vfio_device;
 		}
 
+		/* Initialize resource pool */
+		dprc_init_all_resource_pools(mc_dev);
+
 		mc_bus = to_fsl_mc_bus(mc_dev);
 		mutex_init(&mc_bus->scan_mutex);
+
+		mc_bus->atomic_mc_io = vfio_atomic_mc_io;
+		ret = dprc_open(mc_bus->atomic_mc_io, 0, mc_dev->obj_desc.id,
+				&mc_bus->atomic_dprc_handle);
+		if (ret < 0) {
+			dev_err(dev, "fail to open dprc with atomic io (%d)\n", ret);
+			goto clean_resource_pool;
+		}
+
+		if (fsl_mc_interrupts_supported() && !mc_bus->irq_resources) {
+			irq_count = FSL_MC_IRQ_POOL_MAX_EXTRA_IRQS;
+			ret = fsl_mc_populate_irq_pool(mc_bus, irq_count);
+			if (ret < 0) {
+				dev_err(dev, "%s: Failed to init irq-pool\n",
+				__func__);
+				goto free_open_dprc;
+			}
+		}
+
 		mutex_lock(&mc_bus->scan_mutex);
 		ret = dprc_scan_objects(mc_dev, mc_dev->driver_override,
 					&irq_count);
 		mutex_unlock(&mc_bus->scan_mutex);
 		if (ret) {
 			dev_err(dev, "dprc_scan_objects() fails (%d)\n", ret);
-			dprc_close(mc_dev->mc_io,
-				   0,
-				   mc_dev->mc_handle);
-			goto err;
+			goto clean_irq_pool;
 		}
 
 		ret = vfio_add_group_dev(dev, &vfio_fsl_mc_ops, vdev);
 		if (ret) {
 			dev_err(dev, "%s: Failed to add to vfio group\n",
 				__func__);
-			device_for_each_child(&mc_dev->dev, NULL,
-					      vfio_fsl_mc_device_remove);
-			dprc_close(mc_dev->mc_io,
-				   0,
-				   mc_dev->mc_handle);
-			goto err;
+			goto dprc_clean_scan_objects;
+		}
+
+		ret = vfio_fsl_mc_init_irqs(vdev);
+		if (ret) {
+			dev_err(dev, "%s: Failed to setup irqs\n",
+				__func__);
+			vfio_del_group_dev(dev);
+			goto dprc_clean_scan_objects;
+		}
+
+		for (i = 0; i < mc_dev->obj_desc.irq_count; i++) {
+			ret = vfio_fsl_mc_configure_irq(vdev, i);
+			if (ret) {
+				dev_err(dev, "Fails (%d) to config irq\n", ret);
+				vfio_del_group_dev(dev);
+				goto dprc_clean_irqs;
+			}
 		}
 	} else {
 		vdev->mc_dev = mc_dev;
 
+		/* Use New Allocated MC Portal (DPMCP object) */
+		mc_dev->mc_io = vfio_mc_io;
+
 		ret = vfio_add_group_dev(dev, &vfio_fsl_mc_ops, vdev);
 		if (ret) {
 			dev_err(dev, "%s: Failed to add to vfio group\n",
 				__func__);
-			goto err;
+			goto free_vfio_device;
+		}
+
+		if (mc_dev->obj_desc.irq_count) {
+			ret = vfio_fsl_mc_init_irqs(vdev);
+			if (ret) {
+				dev_err(dev, "%s: Failed to setup irqs\n",
+					__func__);
+				vfio_del_group_dev(dev);
+				goto free_vfio_device;
+			}
 		}
 	}
 
 	return 0;
 
-err:
-	iommu_group_put(group);
+dprc_clean_irqs:
+	vfio_fsl_mc_free_irqs(vdev);
+
+dprc_clean_scan_objects:
+	fsl_mc_cleanup_irq_pool(mc_bus);
+	device_for_each_child(&mc_dev->dev, NULL, vfio_fsl_mc_device_remove);
+
+clean_irq_pool:
+	fsl_mc_cleanup_irq_pool(mc_bus);
+
+free_open_dprc:
+	dprc_close(vfio_atomic_mc_io, 0, mc_dev->mc_handle);
+
+clean_resource_pool:
+	dprc_cleanup_all_resource_pools(mc_dev);
+	dprc_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
+
+free_vfio_device:
 	kfree(vdev);
+	iommu_group_put(group);
 	return ret;
 }
 
 static int vfio_fsl_mc_remove(struct fsl_mc_device *mc_dev)
 {
 	struct vfio_fsl_mc_device *vdev;
+	struct fsl_mc_bus *mc_bus;
 	int ret;
 
 	dev_info(&mc_dev->dev, "Un-binding with vfio-fsl-mc driver\n");
@@ -366,6 +511,13 @@ static int vfio_fsl_mc_remove(struct fsl_mc_device *mc_dev)
 		device_for_each_child(&mc_dev->dev, NULL,
 				      vfio_fsl_mc_device_remove);
 
+		vfio_fsl_mc_free_irqs(vdev);
+		dprc_cleanup_all_resource_pools(mc_dev);
+		mc_bus = to_fsl_mc_bus(mc_dev);
+
+		if (fsl_mc_interrupts_supported())
+			fsl_mc_cleanup_irq_pool(mc_bus);
+
 		ret = dprc_close(mc_dev->mc_io,
 				 0,
 				 mc_dev->mc_handle);
@@ -373,7 +525,8 @@ static int vfio_fsl_mc_remove(struct fsl_mc_device *mc_dev)
 			dev_err(&mc_dev->dev, "dprc_close() fails: error %d\n",
 				ret);
 		}
-	}
+	} else
+		vfio_fsl_mc_free_irqs(vdev);
 
 	iommu_group_put(mc_dev->dev.iommu_group);
 	kfree(vdev);
@@ -418,6 +571,13 @@ static int __init vfio_fsl_mc_driver_init(void)
 	if (err < 0)
 		return err;
 
+	/* Allocate a new MC portal (DPMCP object) */
+	err = fsl_mc_portal_allocate(root_mc_dev,
+				     FSL_MC_IO_ATOMIC_CONTEXT_PORTAL,
+				     &vfio_atomic_mc_io);
+	if (err < 0)
+		goto err;
+
 	err = fsl_mc_driver_register(&vfio_fsl_mc_driver);
 	if (err < 0)
 		goto err;
@@ -427,12 +587,18 @@ err:
 	if (vfio_mc_io)
 		fsl_mc_portal_free(vfio_mc_io);
 
+	if (vfio_atomic_mc_io)
+		fsl_mc_portal_free(vfio_atomic_mc_io);
+
+	vfio_atomic_mc_io = NULL;
+	vfio_mc_io = NULL;
 	return err;
 }
 
 static void __exit vfio_fsl_mc_driver_exit(void)
 {
 	fsl_mc_portal_free(vfio_mc_io);
+	fsl_mc_portal_free(vfio_atomic_mc_io);
 	fsl_mc_driver_unregister(&vfio_fsl_mc_driver);
 }
 
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc_intr.c b/drivers/vfio/fsl-mc/vfio_fsl_mc_intr.c
new file mode 100644
index 0000000..bc60e86
--- /dev/null
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc_intr.c
@@ -0,0 +1,586 @@
+/*
+ * Freescale Management Complex (MC) device passthrough using VFIO
+ *
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ * Author: Bharat Bhushan <bharat.bhushan@freescale.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/device.h>
+#include <linux/eventfd.h>
+#include <linux/interrupt.h>
+#include <linux/uaccess.h>
+#include <linux/iommu.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/vfio.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include "../../staging/fsl-mc/include/mc.h"
+#include "../../staging/fsl-mc/include/mc-sys.h"
+#include "../../staging/fsl-mc/include/mc-private.h"
+#include "../../staging/fsl-mc/include/dpbp.h"
+#include <linux/fs.h>
+
+#include "vfio_fsl_mc_private.h"
+#include "../../drivers/staging/fsl-mc/bus/dpio/fsl_dpio.h"
+#include "../../drivers/staging/fsl-dpaa2/ethernet/dpni.h"
+#include "../../drivers/staging/fsl-mc/bus/dpmcp.h"
+
+struct vfio_irq_cfg {
+	uint64_t	paddr;
+	uint32_t	val;
+	int		user_irq_id;
+};
+
+static int vfio_fsl_mc_set_irq_enable(struct fsl_mc_device *mc_dev,
+				      uint8_t irq_index, uint8_t enable)
+{
+	struct device *dev = &mc_dev->dev;
+	char buf[20];
+	char *device_type;
+	char *str = buf;
+
+	strcpy(str, dev_name(dev));
+	device_type = strsep(&str, ".");
+	if (!device_type)
+		return -EINVAL;
+
+	if (strncmp(device_type, "dprc", 4) == 0) {
+		return dprc_set_irq_enable(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					   irq_index, enable);
+	} else if (strncmp(device_type, "dpmcp", 5) == 0) {
+		return dpmcp_set_irq_enable(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					    irq_index, enable);
+	} else if (strncmp(device_type, "dpni", 4) == 0) {
+		return dpni_set_irq_enable(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					   irq_index, enable);
+	} else if (strncmp(device_type, "dpbp", 4) == 0) {
+		return dpbp_set_irq_enable(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					   irq_index, enable);
+	} else if (strncmp(device_type, "dpci", 4) == 0)
+		/* Workaround till we have flib available */
+		return 0;
+	else if (strncmp(device_type, "dpio", 4) == 0)
+		return 0;
+
+	return -ENODEV;
+}
+
+static int vfio_fsl_mc_clear_irq_status(struct fsl_mc_device *mc_dev,
+					uint8_t irq_index, uint32_t status)
+{
+	struct device *dev = &mc_dev->dev;
+	char buf[20];
+	char *device_type;
+	char *str = buf;
+
+	strcpy(str, dev_name(dev));
+	device_type = strsep(&str, ".");
+	if (!device_type)
+		return -EINVAL;
+
+	if (strncmp(device_type, "dprc", 4) == 0) {
+		return dprc_clear_irq_status(mc_dev->mc_io, 0,
+					     mc_dev->mc_handle,
+					     irq_index, status);
+	} else if (strncmp(device_type, "dpmcp", 5) == 0) {
+		return dpmcp_clear_irq_status(mc_dev->mc_io, 0,
+					      mc_dev->mc_handle,
+					      irq_index, status);
+	} else if (strncmp(device_type, "dpni", 4) == 0) {
+		return dpni_clear_irq_status(mc_dev->mc_io, 0,
+					     mc_dev->mc_handle,
+					     irq_index, status);
+	} else if (strncmp(device_type, "dpbp", 4) == 0) {
+		return dpbp_clear_irq_status(mc_dev->mc_io, 0,
+					     mc_dev->mc_handle,
+					     irq_index, status);
+	} else if (strncmp(device_type, "dpci", 4) == 0)
+		/* Workaround till we have flib available */
+		return 0;
+	else if (strncmp(device_type, "dpio", 4) == 0)
+		return 0;
+
+	return -ENODEV;
+}
+
+static int vfio_fsl_mc_set_irq_mask(struct fsl_mc_device *mc_dev,
+				    uint8_t irq_index, uint32_t mask)
+{
+	struct device *dev = &mc_dev->dev;
+	char buf[20];
+	char *device_type;
+	char *str = buf;
+
+	strcpy(str, dev_name(dev));
+	device_type = strsep(&str, ".");
+	if (!device_type)
+		return -EINVAL;
+
+	if (strncmp(device_type, "dprc", 4) == 0) {
+		return dprc_set_irq_mask(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					irq_index, mask);
+	} else if (strncmp(device_type, "dpmcp", 5) == 0) {
+		return dpmcp_set_irq_mask(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					irq_index, mask);
+	} else if (strncmp(device_type, "dpni", 4) == 0) {
+		return dpni_set_irq_mask(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					irq_index, mask);
+	} else if (strncmp(device_type, "dpbp", 4) == 0) {
+		return dpbp_set_irq_mask(mc_dev->mc_io, 0, mc_dev->mc_handle,
+					irq_index, mask);
+	} else if (strncmp(device_type, "dpci", 4) == 0)
+		/* Workaround till we have flib available */
+		return 0;
+	else if (strncmp(device_type, "dpio", 4) == 0)
+		return 0;
+
+	return -ENODEV;
+}
+
+int vfio_fsl_mc_get_handle(struct fsl_mc_device *mc_dev)
+{
+	struct device *dev = &mc_dev->dev;
+	char buf[20];
+	char *device_type;
+	char *str = buf;
+	int ret;
+
+	strcpy(str, dev_name(dev));
+	device_type = strsep(&str, ".");
+	if (!device_type)
+		return -EINVAL;
+
+	if (strncmp(device_type, "dpio", 4) == 0) {
+		ret = dpio_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
+				&mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpio_open() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpni", 4) == 0) {
+		ret = dpni_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
+				&mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpni_open() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpbp", 4) == 0) {
+		ret = dpbp_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
+				&mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpbp_open() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpmcp", 5) == 0) {
+		ret = dpmcp_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
+				&mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpbp_open() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpci", 4) == 0)
+		return 0;
+
+	return -EINVAL;
+}
+
+int vfio_fsl_mc_put_handle(struct fsl_mc_device *mc_dev)
+{
+	struct device *dev = &mc_dev->dev;
+	char buf[20];
+	char *device_type;
+	char *str = buf;
+	int ret;
+
+	strcpy(str, dev_name(dev));
+	device_type = strsep(&str, ".");
+	if (!device_type)
+		return -EINVAL;
+
+	if (strncmp(device_type, "dpio", 4) == 0) {
+		ret = dpio_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpio_close() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpni", 4) == 0) {
+		ret = dpni_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpni_close() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpbp", 4) == 0) {
+		ret = dpbp_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpbp_close() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpmcp", 5) == 0) {
+		ret = dpmcp_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
+		if (ret) {
+			dev_err(dev, "dpbp_close() fails with error %d\n", ret);
+			return ret;
+		}
+		return 0;
+	}
+
+	if (strncmp(device_type, "dpci", 4) == 0)
+		return 0;
+
+	return -EINVAL;
+}
+
+static int vfio_fsl_mc_disable_irq(struct fsl_mc_device *mc_dev, int irq_num)
+
+{
+	int error = 0;
+
+	/*
+	 * Disable generation of interrupt irq_num
+	 */
+	error = vfio_fsl_mc_set_irq_enable(mc_dev, irq_num, 0);
+	if (error < 0) {
+		dev_err(&mc_dev->dev, "set_irq_enable() failed: %d\n", error);
+		return error;
+	}
+
+	/*
+	 * Disable all interrupt causes for interrupt irq_num:
+	 */
+	error = vfio_fsl_mc_set_irq_mask(mc_dev, irq_num, 0);
+	if (error < 0) {
+		dev_err(&mc_dev->dev,
+			"mc_set_irq_mask() failed: %d\n", error);
+		return error;
+	}
+
+	/*
+	 * Clear any leftover interrupt irq_num:
+	 */
+	error = vfio_fsl_mc_clear_irq_status(mc_dev, irq_num, ~0x0U);
+	if (error < 0) {
+		dev_err(&mc_dev->dev,
+			"mc_clear_irq_status() failed: %d\n",
+			error);
+		return error;
+	}
+	return error;
+}
+
+static irqreturn_t vfio_threaded_irq_handler(int irq_num, void *arg)
+{
+	struct vfio_fsl_mc_device *vdev;
+	int i;
+	int hw_irq_num;
+	struct eventfd_ctx *trigger;
+
+	vdev = (struct vfio_fsl_mc_device *)arg;
+	for (i = 0; i < vdev->mc_dev->obj_desc.irq_count; i++) {
+		hw_irq_num = vdev->mc_irqs[i].hw_irq_num;
+		if (irq_num == hw_irq_num) {
+			trigger = vdev->mc_irqs[i].trigger;
+			if (trigger) {
+				eventfd_signal(trigger, 1);
+				break;
+			}
+		}
+	}
+
+	return IRQ_HANDLED;
+}
+
+int vfio_fsl_mc_configure_irq(struct vfio_fsl_mc_device *vdev,
+			      int irq_index)
+{
+	int error;
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	struct fsl_mc_device_irq *irq = mc_dev->irqs[irq_index];
+	struct vfio_fsl_mc_irq *mc_irq = &vdev->mc_irqs[irq_index];
+
+	if (WARN_ON(!mc_irq->irq_initialized))
+		return -EOPNOTSUPP;
+
+	if (WARN_ON(mc_irq->irq_configured))
+		return -EINVAL;
+
+	error = request_threaded_irq(irq->irq_number, NULL,
+				     vfio_threaded_irq_handler,
+				     IRQF_NO_SUSPEND | IRQF_ONESHOT,
+				     "VFIO Handler",
+				     vdev);
+	if (error < 0) {
+		dev_err(&mc_dev->dev,
+			"devm_request_threaded_irq() failed: %d\n",
+			error);
+		return error;
+	}
+
+	mc_irq->hw_irq_num = mc_dev->irqs[irq_index]->irq_number;
+	mc_irq->irq_configured = true;
+	return 0;
+}
+
+static void vfio_fsl_mc_unconfigure_irq(struct vfio_fsl_mc_device *vdev,
+				       int irq_index)
+{
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	struct fsl_mc_device_irq *irq = mc_dev->irqs[irq_index];
+
+	if (!vdev->mc_irqs[irq_index].irq_configured)
+		return;
+
+	free_irq(irq->irq_number, vdev);
+	vdev->mc_irqs[irq_index].irq_configured = false;
+}
+
+static int vfio_fsl_mc_setup_irqs(struct fsl_mc_device *mc_dev)
+{
+	int ret;
+	int irq_count = mc_dev->obj_desc.irq_count;
+	int i;
+
+	/* Allocate IRQs */
+	ret = fsl_mc_allocate_irqs(mc_dev);
+	if  (ret)
+		return ret;
+
+	/* Disable IRQs */
+	for (i = 0; i < irq_count; i++) {
+		ret = vfio_fsl_mc_disable_irq(mc_dev, i);
+		if  (ret)
+			goto free_irq;
+	}
+
+	return 0;
+
+free_irq:
+	fsl_mc_free_irqs(mc_dev);
+	return ret;
+}
+
+int vfio_fsl_mc_init_irqs(struct vfio_fsl_mc_device *vdev)
+{
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	struct device *dev = &mc_dev->dev;
+	int irq_count = mc_dev->obj_desc.irq_count;
+	struct vfio_fsl_mc_irq *mc_irq;
+	int ret, i;
+
+	mc_irq = kcalloc(irq_count, sizeof(*mc_irq), GFP_KERNEL);
+	if (mc_irq == NULL)
+		return -ENOMEM;
+
+	/* Open the device except dprc */
+	if (strncmp(vdev->mc_dev->obj_desc.type, "dprc", 10)) {
+		ret = vfio_fsl_mc_get_handle(mc_dev);
+		if (ret) {
+			kfree(mc_irq);
+			dev_err(dev, "Fails to get mc-handle (err %d)\n", ret);
+			return ret;
+		}
+	}
+
+	ret = vfio_fsl_mc_setup_irqs(mc_dev);
+	if (ret) {
+		kfree(mc_irq);
+		dev_err(dev, "vfio_fsl_mc_setup_irqs Fails  %d\n", ret);
+		goto free_device_handle;
+	}
+
+	for (i = 0; i < irq_count; i++) {
+		mc_irq[i].count = 1;
+		mc_irq[i].flags = VFIO_IRQ_INFO_EVENTFD |
+					VFIO_IRQ_INFO_MASKABLE;
+		mc_irq[i].irq_initialized = true;
+	}
+
+	vdev->mc_irqs = mc_irq;
+
+free_device_handle:
+	if (strncmp(vdev->mc_dev->obj_desc.type, "dprc", 10))
+		vfio_fsl_mc_put_handle(mc_dev);
+
+	return 0;
+}
+
+int vfio_fsl_mc_unconfigure_irqs(struct vfio_fsl_mc_device *vdev)
+{
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	int i;
+
+	for (i = 0; i < mc_dev->obj_desc.irq_count; i++) {
+		if (!vdev->mc_irqs[i].irq_initialized)
+			continue;
+
+		vfio_fsl_mc_unconfigure_irq(vdev, i);
+	}
+	return 0;
+}
+
+/* Free All IRQs for the given MC object */
+void vfio_fsl_mc_free_irqs(struct vfio_fsl_mc_device *vdev)
+{
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+
+	vfio_fsl_mc_unconfigure_irqs(vdev);
+	fsl_mc_free_irqs(mc_dev);
+
+	kfree(vdev->mc_irqs);
+}
+
+static int vfio_fsl_mc_irq_mask(struct vfio_fsl_mc_device *vdev,
+				    unsigned index, unsigned start,
+				    unsigned count, uint32_t flags, void *data,
+				    uint32_t mask)
+{
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	uint8_t arr;
+
+	if (start != 0 || count != 1)
+		return -EINVAL;
+
+	switch (flags & VFIO_IRQ_SET_DATA_TYPE_MASK) {
+	case VFIO_IRQ_SET_DATA_BOOL:
+		arr = *(uint8_t *) data;
+		if (arr != 0x1)
+			return -EINVAL;
+
+	case VFIO_IRQ_SET_DATA_NONE:
+		return vfio_fsl_mc_set_irq_mask(mc_dev, index, 0);
+	case VFIO_IRQ_SET_DATA_EVENTFD:
+		return -ENOTTY; /* To be Implemented */
+
+	default:
+		return -ENOTTY;
+	}
+
+	return 0;
+}
+
+static int vfio_fsl_mc_config_irq_signal(struct vfio_fsl_mc_device *vdev,
+					 int irq_index, int32_t fd)
+{
+	struct eventfd_ctx *trigger;
+	struct vfio_fsl_mc_irq *mc_irq = &vdev->mc_irqs[irq_index];
+	int ret;
+
+	if (vdev->mc_irqs[irq_index].trigger) {
+		eventfd_ctx_put(vdev->mc_irqs[irq_index].trigger);
+		vdev->mc_irqs[irq_index].trigger = NULL;
+	}
+
+	if (fd < 0)
+		return 0;
+
+	trigger = eventfd_ctx_fdget(fd);
+	if (IS_ERR(trigger))
+		return PTR_ERR(trigger);
+
+	/* If IRQ not configured the configure */
+	if (!mc_irq->irq_configured) {
+		ret = vfio_fsl_mc_configure_irq(vdev, irq_index);
+		if (ret) {
+			eventfd_ctx_put(trigger);
+			return ret;
+		}
+	}
+
+	vdev->mc_irqs[irq_index].trigger = trigger;
+	return 0;
+}
+
+static int vfio_fsl_mc_set_irq_trigger(struct vfio_fsl_mc_device *vdev,
+				    unsigned index, unsigned start,
+				    unsigned count, uint32_t flags, void *data)
+{
+	struct fsl_mc_device *mc_dev = vdev->mc_dev;
+	int32_t fd;
+	int ret;
+
+	/* If count = 0 and DATA_NONE, disable interrupt */
+	if (!count && (flags & VFIO_IRQ_SET_DATA_NONE)) {
+		/* Open the device except dprc */
+		if (strncmp(vdev->mc_dev->obj_desc.type, "dprc", 10)) {
+			ret = vfio_fsl_mc_get_handle(mc_dev);
+			if (ret)
+				return ret;
+		}
+
+		/*
+		 * Disable generation of interrupt i:
+		 */
+		ret = vfio_fsl_mc_disable_irq(mc_dev, index);
+
+		/* Close the open handle */
+		if (strncmp(vdev->mc_dev->obj_desc.type, "dprc", 10))
+			vfio_fsl_mc_put_handle(mc_dev);
+
+		return ret;
+	}
+
+	if (flags & VFIO_IRQ_SET_DATA_BOOL)
+		fd = *(int8_t *)data;
+	else if (flags & VFIO_IRQ_SET_DATA_EVENTFD)
+		fd = *(int32_t *)data;
+	else
+		return -EINVAL;
+
+	if (start != 0 || count != 1)
+		return -EINVAL;
+
+	return vfio_fsl_mc_config_irq_signal(vdev, index, fd);
+}
+
+int vfio_fsl_mc_set_irqs_ioctl(struct vfio_fsl_mc_device *vdev,
+			       uint32_t flags, unsigned index, unsigned start,
+			       unsigned count, void *data)
+{
+	int ret = -ENOTTY;
+
+	switch (flags & VFIO_IRQ_SET_ACTION_TYPE_MASK) {
+	case VFIO_IRQ_SET_ACTION_MASK:
+		/* mask all sources */
+		ret = vfio_fsl_mc_irq_mask(vdev, index, start,
+					       count, flags, data, 0);
+		break;
+	case VFIO_IRQ_SET_ACTION_UNMASK:
+		/* unmask all sources */
+		ret = vfio_fsl_mc_irq_mask(vdev, index, start,
+					       count, flags, data, ~0);
+		break;
+	case VFIO_IRQ_SET_ACTION_TRIGGER:
+		ret = vfio_fsl_mc_set_irq_trigger(vdev, index, start,
+						  count, flags, data);
+		break;
+	}
+
+	return ret;
+}
diff --git a/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h b/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
index d630c15..df83f36 100644
--- a/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
+++ b/drivers/vfio/fsl-mc/vfio_fsl_mc_private.h
@@ -14,9 +14,30 @@
 #ifndef VFIO_FSL_MC_PRIVATE_H
 #define VFIO_FSL_MC_PRIVATE_H
 
+struct vfio_fsl_mc_irq {
+	struct eventfd_ctx	*trigger;
+	unsigned int		hw_irq_num;
+	u32			flags;
+	u32			count;
+	bool			irq_initialized;
+	bool			irq_configured;
+};
+
 struct vfio_fsl_mc_device {
 	struct fsl_mc_device	*mc_dev;
 	int			refcnt;
+	struct vfio_fsl_mc_irq	*mc_irqs;
 };
 
+int vfio_fsl_mc_init_irqs(struct vfio_fsl_mc_device *vdev);
+
+void vfio_fsl_mc_free_irqs(struct vfio_fsl_mc_device *vdev);
+
+int vfio_fsl_mc_configure_irq(struct vfio_fsl_mc_device *vdev, int irq_idx);
+
+int vfio_fsl_mc_unconfigure_irqs(struct vfio_fsl_mc_device *vdev);
+
+int vfio_fsl_mc_set_irqs_ioctl(struct vfio_fsl_mc_device *vdev,
+			       uint32_t flags, unsigned index, unsigned start,
+			       unsigned count, void *data);
 #endif /* VFIO_PCI_PRIVATE_H */
-- 
2.8.1

