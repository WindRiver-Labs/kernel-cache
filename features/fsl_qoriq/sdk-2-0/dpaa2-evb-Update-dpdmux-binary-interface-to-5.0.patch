From fad071bed6250a81328802f19157f162db5b1d6c Mon Sep 17 00:00:00 2001
From: Razvan Stefanescu <razvan.stefanescu@freescale.com>
Date: Mon, 14 Dec 2015 15:50:08 +0200
Subject: [PATCH 0923/1429] dpaa2-evb: Update dpdmux binary interface to 5.0

This corresponds to MC release 0.8.0.

Signed-off-by: Razvan Stefanescu <razvan.stefanescu@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h |   32 ++++--------
 drivers/staging/fsl-dpaa2/evb/dpdmux.c     |   44 +---------------
 drivers/staging/fsl-dpaa2/evb/dpdmux.h     |   80 ++++++++-------------------
 3 files changed, 35 insertions(+), 121 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h b/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h
index 6630585..0a5cf17 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux-cmd.h
@@ -33,8 +33,8 @@
 #define _FSL_DPDMUX_CMD_H
 
 /* DPDMUX Version */
-#define DPDMUX_VER_MAJOR				4
-#define DPDMUX_VER_MINOR				1
+#define DPDMUX_VER_MAJOR				5
+#define DPDMUX_VER_MINOR				0
 
 /* Command IDs */
 #define DPDMUX_CMDID_CLOSE				0x800
@@ -58,12 +58,11 @@
 #define DPDMUX_CMDID_CLEAR_IRQ_STATUS			0x017
 
 #define DPDMUX_CMDID_UL_SET_MAX_FRAME_LENGTH		0x0a1
-#define DPDMUX_CMDID_SET_DEFAULT_IF			0x0a2
+
 #define DPDMUX_CMDID_UL_RESET_COUNTERS			0x0a3
 
 #define DPDMUX_CMDID_IF_SET_ACCEPTED_FRAMES		0x0a7
 #define DPDMUX_CMDID_IF_GET_ATTR			0x0a8
-#define DPDMUX_CMDID_GET_DEFAULT_IF			0x0a9
 
 #define DPDMUX_CMDID_IF_ADD_L2_RULE			0x0b0
 #define DPDMUX_CMDID_IF_REMOVE_L2_RULE			0x0b1
@@ -81,7 +80,6 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  enum dpdmux_method, cfg->method);\
 	MC_CMD_OP(cmd, 0, 8,  8,  enum dpdmux_manip, cfg->manip);\
 	MC_CMD_OP(cmd, 0, 16, 16, uint16_t, cfg->num_ifs);\
-	MC_CMD_OP(cmd, 0, 32, 32, int,	    cfg->control_if);\
 	MC_CMD_OP(cmd, 1, 0,  16, uint16_t, cfg->adv.max_dmat_entries);\
 	MC_CMD_OP(cmd, 1, 16, 16, uint16_t, cfg->adv.max_mc_groups);\
 	MC_CMD_OP(cmd, 1, 32, 16, uint16_t, cfg->adv.max_vlan_ids);\
@@ -98,7 +96,7 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  8,  uint8_t,  irq_index);\
 	MC_CMD_OP(cmd, 0, 32, 32, uint32_t, irq_cfg->val);\
 	MC_CMD_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr);\
-	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
+	MC_CMD_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
 } while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
@@ -110,7 +108,7 @@ do { \
 do { \
 	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, irq_cfg->val); \
 	MC_RSP_OP(cmd, 1, 0,  64, uint64_t, irq_cfg->addr); \
-	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->user_irq_id); \
+	MC_RSP_OP(cmd, 2, 0,  32, int,	    irq_cfg->irq_num); \
 	MC_RSP_OP(cmd, 2, 32, 32, int,	    type); \
 } while (0)
 
@@ -145,8 +143,11 @@ do { \
 	MC_RSP_OP(cmd, 0, 0,  32, uint32_t, mask)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPDMUX_CMD_GET_IRQ_STATUS(cmd, irq_index) \
-	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index)
+#define DPDMUX_CMD_GET_IRQ_STATUS(cmd, irq_index, status) \
+do { \
+	MC_CMD_OP(cmd, 0, 0,  32, uint32_t, status);\
+	MC_CMD_OP(cmd, 0, 32, 8,  uint8_t,  irq_index);\
+} while (0)
 
 /*                cmd, param, offset, width, type, arg_name */
 #define DPDMUX_RSP_GET_IRQ_STATUS(cmd, status) \
@@ -165,7 +166,6 @@ do { \
 	MC_RSP_OP(cmd, 0, 8,  8,  enum dpdmux_manip, attr->manip);\
 	MC_RSP_OP(cmd, 0, 16, 16, uint16_t, attr->num_ifs);\
 	MC_RSP_OP(cmd, 0, 32, 16, uint16_t, attr->mem_size);\
-	MC_RSP_OP(cmd, 1, 0,  32, int,	    attr->control_if);\
 	MC_RSP_OP(cmd, 2, 0,  32, int,	    attr->id);\
 	MC_RSP_OP(cmd, 3, 0,  64, uint64_t, attr->options);\
 	MC_RSP_OP(cmd, 4, 0,  16, uint16_t, attr->version.major);\
@@ -177,17 +177,6 @@ do { \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, max_frame_length)
 
 /*                cmd, param, offset, width, type, arg_name */
-#define DPDMUX_CMD_SET_DEFAULT_IF(cmd, if_id, no_default_if) \
-do { \
-	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
-	MC_CMD_OP(cmd, 0, 16, 1,  int,	    no_default_if);\
-} while (0)
-
-/*                cmd, param, offset, width, type, arg_name */
-#define DPDMUX_RSP_GET_DEFAULT_IF(cmd, if_id) \
-	MC_RSP_OP(cmd, 0, 0,  16, uint16_t, if_id)
-
-/*                cmd, param, offset, width, type, arg_name */
 #define DPDMUX_CMD_IF_SET_ACCEPTED_FRAMES(cmd, if_id, cfg) \
 do { \
 	MC_CMD_OP(cmd, 0, 0,  16, uint16_t, if_id);\
@@ -206,7 +195,6 @@ do { \
 	MC_RSP_OP(cmd, 0, 56, 4,  enum dpdmux_accepted_frames_type, \
 					    attr->accept_frame_type);\
 	MC_RSP_OP(cmd, 0, 24,  1, int,	    attr->enabled);\
-	MC_RSP_OP(cmd, 0, 25,  1, int,	    attr->is_default);\
 	MC_RSP_OP(cmd, 1, 0,  32, uint32_t, attr->rate);\
 } while (0)
 
diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.c b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
index 757de0d..f323049 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.c
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.c
@@ -328,7 +328,7 @@ int dpdmux_get_irq_status(struct fsl_mc_io *mc_io,
 	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_GET_IRQ_STATUS,
 					  cmd_flags,
 					  token);
-	DPDMUX_CMD_GET_IRQ_STATUS(cmd, irq_index);
+	DPDMUX_CMD_GET_IRQ_STATUS(cmd, irq_index, *status);
 
 	/* send command to mc*/
 	err = mc_send_command(mc_io, &cmd);
@@ -400,48 +400,6 @@ int dpdmux_ul_set_max_frame_length(struct fsl_mc_io *mc_io,
 	return mc_send_command(mc_io, &cmd);
 }
 
-int dpdmux_set_default_if(struct fsl_mc_io *mc_io,
-			  uint32_t cmd_flags,
-			  uint16_t token,
-			  uint16_t if_id,
-			  int no_default_if)
-{
-	struct mc_command cmd = { 0 };
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_SET_DEFAULT_IF,
-					  cmd_flags,
-					  token);
-	DPDMUX_CMD_SET_DEFAULT_IF(cmd, if_id, no_default_if);
-
-	/* send command to mc*/
-	return mc_send_command(mc_io, &cmd);
-}
-
-int dpdmux_get_default_if(struct fsl_mc_io *mc_io,
-			  uint32_t cmd_flags,
-			  uint16_t token,
-			  uint16_t *if_id)
-{
-	struct mc_command cmd = { 0 };
-	int err;
-
-	/* prepare command */
-	cmd.header = mc_encode_cmd_header(DPDMUX_CMDID_GET_DEFAULT_IF,
-						  cmd_flags,
-						  token);
-
-	/* send command to mc*/
-	err = mc_send_command(mc_io, &cmd);
-	if (err)
-		return err;
-
-	/* retrieve response parameters */
-	DPDMUX_RSP_GET_DEFAULT_IF(cmd, *if_id);
-
-	return 0;
-}
-
 int dpdmux_ul_reset_counters(struct fsl_mc_io *mc_io,
 			     uint32_t cmd_flags,
 			     uint16_t token)
diff --git a/drivers/staging/fsl-dpaa2/evb/dpdmux.h b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
index 1916ae0..6bad79f 100644
--- a/drivers/staging/fsl-dpaa2/evb/dpdmux.h
+++ b/drivers/staging/fsl-dpaa2/evb/dpdmux.h
@@ -77,17 +77,21 @@ int dpdmux_close(struct fsl_mc_io	*mc_io,
 		 uint32_t		cmd_flags,
 		 uint16_t		token);
 
-/*!
- * @name DPDMUX general options
+/**
+ * DPDMUX general options
+ */
+
+/**
+ * Enable bridging between internal interfaces
  */
 #define DPDMUX_OPT_BRIDGE_EN		0x0000000000000002ULL
-/*!< Enable bridging between internal interfaces */
-/* @} */
 
 #define DPDMUX_IRQ_INDEX_IF			0x0000
 #define DPDMUX_IRQ_INDEX		0x0001
 
-/*!< IRQ event - Indicates that the link state changed */
+/**
+ * IRQ event - Indicates that the link state changed
+ */
 #define DPDMUX_IRQ_EVENT_LINK_CHANGED	0x0001
 
 /**
@@ -120,7 +124,6 @@ enum dpdmux_method {
  * struct dpdmux_cfg - DPDMUX configuration parameters
  * @method: Defines the operation method for the DPDMUX address table
  * @manip: Required manipulation operation
- * @control_if: The initial control interface
  * @num_ifs: Number of interfaces (excluding the uplink interface)
  * @adv: Advanced parameters; default is all zeros;
  *	 use this structure to change default settings
@@ -128,7 +131,6 @@ enum dpdmux_method {
 struct dpdmux_cfg {
 	enum dpdmux_method	method;
 	enum dpdmux_manip	manip;
-	int			control_if;
 	uint16_t		num_ifs;
 	/**
 	 * struct adv - Advanced parameters
@@ -242,12 +244,12 @@ int dpdmux_reset(struct fsl_mc_io	*mc_io,
  * struct dpdmux_irq_cfg - IRQ configuration
  * @addr:	Address that must be written to signal a message-based interrupt
  * @val:	Value to write into irq_addr address
- * @user_irq_id: A user defined number associated with this IRQ
+ * @irq_num: A user defined number associated with this IRQ
  */
 struct dpdmux_irq_cfg {
 	     uint64_t		addr;
 	     uint32_t		val;
-	     int		user_irq_id;
+	     int		irq_num;
 };
 
 /**
@@ -331,7 +333,7 @@ int dpdmux_get_irq_enable(struct fsl_mc_io	*mc_io,
  * @mask:	event mask to trigger interrupt;
  *		each bit:
  *			0 = ignore event
- *			1 = consider event for asserting irq
+ *			1 = consider event for asserting IRQ
  *
  * Every interrupt can have up to 32 causes and the interrupt model supports
  * masking/unmasking each cause independently
@@ -408,7 +410,6 @@ int dpdmux_clear_irq_status(struct fsl_mc_io	*mc_io,
  * @manip: DPDMUX manipulation type
  * @num_ifs: Number of interfaces (excluding the uplink interface)
  * @mem_size: DPDMUX frame storage memory size
- * @control_if: Control interface ID
  */
 struct dpdmux_attr {
 	int			id;
@@ -426,7 +427,6 @@ struct dpdmux_attr {
 	enum dpdmux_manip	manip;
 	uint16_t		num_ifs;
 	uint16_t		mem_size;
-	int			control_if;
 };
 
 /**
@@ -458,44 +458,6 @@ int dpdmux_ul_set_max_frame_length(struct fsl_mc_io	*mc_io,
 				   uint16_t		max_frame_length);
 
 /**
- * dpdmux_set_default_if() - Set the interface to be the default interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @if_id:	Interface ID (0 for uplink, or 1-num_ifs);
- *		Ignored if 'no_default_if = 1'
- * @no_default_if: Set to '1' to clear default interface setting -
- *		   consequently, frames with no match in the
- *		   Demux address table are dropped;
- *
- * Default interface is selected when the frame does not match
- * any entry in the Demux address table. This function can also
- * clear the default interface selection by passing 'set = 0'.
- *
- * Return:	'0' on Success; Error code otherwise.
- */
-int dpdmux_set_default_if(struct fsl_mc_io	*mc_io,
-			  uint32_t		cmd_flags,
-			  uint16_t		token,
-			  uint16_t		if_id,
-			  int			no_default_if);
-
-/**
- * dpdmux_get_default_if() - Get the default interface
- * @mc_io:	Pointer to MC portal's I/O object
- * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'
- * @token:	Token of DPDMUX object
- * @if_id:	Returns default interface ID (0 for uplink,
- *		or 1-num_ifs);
- *
- * Return:	'0' on Success; Error code otherwise.
- */
-int dpdmux_get_default_if(struct fsl_mc_io	*mc_io,
-			  uint32_t		cmd_flags,
-			  uint16_t		token,
-			  uint16_t		*if_id);
-
-/**
  * enum dpdmux_counter_type - Counter types
  * @DPDMUX_CNT_ING_FRAME: Counts ingress frames
  * @DPDMUX_CNT_ING_BYTE: Counts ingress bytes
@@ -588,13 +550,11 @@ int dpdmux_if_set_accepted_frames(struct fsl_mc_io		      *mc_io,
  * @rate: Configured interface rate (in bits per second)
  * @enabled: Indicates if interface is enabled
  * @accept_frame_type: Indicates type of accepted frames for the interface
- * @is_default: Indicates if configured as default interface
  */
 struct dpdmux_if_attr {
 	uint32_t				rate;
 	int					enabled;
 	enum dpdmux_accepted_frames_type	accept_frame_type;
-	int					is_default;
 };
 
 /**
@@ -691,13 +651,21 @@ int dpdmux_ul_reset_counters(struct fsl_mc_io	*mc_io,
 			     uint32_t		cmd_flags,
 			     uint16_t		token);
 
-/* Enable auto-negotiation */
+/**
+ * Enable auto-negotiation
+ */
 #define DPDMUX_LINK_OPT_AUTONEG		0x0000000000000001ULL
-/* Enable half-duplex mode */
+/**
+ * Enable half-duplex mode
+ */
 #define DPDMUX_LINK_OPT_HALF_DUPLEX	0x0000000000000002ULL
-/* Enable pause frames */
+/**
+ * Enable pause frames
+ */
 #define DPDMUX_LINK_OPT_PAUSE		0x0000000000000004ULL
-/* Enable a-symmetric pause frames */
+/**
+ * Enable a-symmetric pause frames
+ */
 #define DPDMUX_LINK_OPT_ASYM_PAUSE	0x0000000000000008ULL
 
 /**
-- 
1.7.5.4

