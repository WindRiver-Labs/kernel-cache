From b44b933db1fbc35ee8fd091d1023848bd50c5e5e Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@freescale.com>
Date: Tue, 25 Aug 2015 11:52:56 +0300
Subject: [PATCH 0918/1383] dpaa_eth: Move exported counters from debugfs into
 ethtool stats

Signed-off-by: Ioana Ciornei <ioana.ciornei@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/Makefile   |   2 +-
 .../net/ethernet/freescale/sdk_dpaa/dpaa_debugfs.c | 211 +--------------------
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c |  12 +-
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h |   3 -
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.c  |  12 +-
 .../net/ethernet/freescale/sdk_dpaa/dpaa_ethtool.c | 188 +++++++++++++++++-
 6 files changed, 202 insertions(+), 226 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/Makefile b/drivers/net/ethernet/freescale/sdk_dpaa/Makefile
index 7d11df6..acb7415 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/Makefile
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/Makefile
@@ -12,7 +12,7 @@ obj-$(CONFIG_FSL_SDK_DPAA_ETH) += fsl_mac.o fsl_dpa.o
 obj-$(CONFIG_PTP_1588_CLOCK_DPAA) += dpaa_ptp.o
 
 fsl_dpa-objs += dpaa_ethtool.o dpaa_eth_sysfs.o dpaa_eth.o dpaa_eth_sg.o dpaa_eth_common.o
-ifeq ($(CONFIG_FSL_DPAA_ETH_DEBUGFS),y)
+ifeq ($(CONFIG_FSL_DPAA_DBG_LOOP),y)
 fsl_dpa-objs += dpaa_debugfs.o
 endif
 ifeq ($(CONFIG_FSL_DPAA_1588),y)
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_debugfs.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_debugfs.c
index cb070f5..25d9f5f 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_debugfs.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_debugfs.c
@@ -38,23 +38,12 @@
 #define DPA_DEBUGFS_DESCRIPTION "FSL DPAA Ethernet debugfs entries"
 #define DPA_ETH_DEBUGFS_ROOT "fsl_dpa"
 
-static int __cold dpa_debugfs_open(struct inode *inode, struct file *file);
+static struct dentry *dpa_debugfs_root;
 
-#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 static int __cold dpa_debugfs_loop_open(struct inode *inode, struct file *file);
 static ssize_t dpa_loop_write(struct file *f,
 	const char __user *buf, size_t count, loff_t *off);
-#endif
 
-static struct dentry *dpa_debugfs_root;
-static const struct file_operations dpa_debugfs_fops = {
-	.open		= dpa_debugfs_open,
-	.read		= seq_read,
-	.llseek		= seq_lseek,
-	.release	= single_release,
-};
-
-#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 static const struct file_operations dpa_debugfs_lp_fops = {
 	.open		= dpa_debugfs_loop_open,
 	.write		= dpa_loop_write,
@@ -62,165 +51,7 @@ static const struct file_operations dpa_debugfs_lp_fops = {
 	.llseek		= seq_lseek,
 	.release	= single_release,
 };
-#endif
-
-static int dpa_debugfs_show(struct seq_file *file, void *offset)
-{
-	int				 i;
-	struct dpa_priv_s		*priv;
-	struct dpa_percpu_priv_s	*percpu_priv, total;
-	struct dpa_bp *dpa_bp;
-	unsigned int dpa_bp_count = 0;
-	unsigned int count_total = 0;
-	struct qm_mcr_querycgr query_cgr;
-
-	BUG_ON(offset == NULL);
-
-	priv = netdev_priv((struct net_device *)file->private);
-
-	dpa_bp = priv->dpa_bp;
-
-	memset(&total, 0, sizeof(total));
-
-	/* "Standard" counters */
-	seq_printf(file, "\nDPA counters for %s:\n", priv->net_dev->name);
-	seq_puts(file, "CPU           irqs        rx        tx   recycle   ");
-	seq_puts(file, "confirm     tx sg    tx err    rx err   bp count\n");
-
-
-	for_each_online_cpu(i) {
-		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
-
-		if (dpa_bp->percpu_count)
-			dpa_bp_count = *(per_cpu_ptr(dpa_bp->percpu_count, i));
-
-		total.in_interrupt += percpu_priv->in_interrupt;
-		total.stats.rx_packets += percpu_priv->stats.rx_packets;
-		total.stats.tx_packets += percpu_priv->stats.tx_packets;
-		total.tx_returned += percpu_priv->tx_returned;
-		total.tx_confirm += percpu_priv->tx_confirm;
-		total.tx_frag_skbuffs += percpu_priv->tx_frag_skbuffs;
-		total.stats.tx_errors += percpu_priv->stats.tx_errors;
-		total.stats.rx_errors += percpu_priv->stats.rx_errors;
-		count_total += dpa_bp_count;
-
-		seq_printf(file, "     %hu  %8llu  %8llu  %8llu  %8llu  ",
-				i,
-				percpu_priv->in_interrupt,
-				percpu_priv->stats.rx_packets,
-				percpu_priv->stats.tx_packets,
-				percpu_priv->tx_returned);
-		seq_printf(file, "%8llu  %8llu  %8llu  %8llu     %8d\n",
-				percpu_priv->tx_confirm,
-				percpu_priv->tx_frag_skbuffs,
-				percpu_priv->stats.tx_errors,
-				percpu_priv->stats.rx_errors,
-				dpa_bp_count);
-	}
-	seq_printf(file, "Total     %8llu  %8llu  %8llu  %8llu  ",
-			total.in_interrupt,
-			total.stats.rx_packets,
-			total.stats.tx_packets,
-			total.tx_returned);
-	seq_printf(file, "%8llu  %8llu  %8llu  %8llu     %8d\n",
-			total.tx_confirm,
-			total.tx_frag_skbuffs,
-			total.stats.tx_errors,
-			total.stats.rx_errors,
-			count_total);
-
-	/* Congestion stats */
-	seq_puts(file, "\nDevice congestion stats:\n");
-	seq_printf(file, "Device has been congested for %d ms.\n",
-		jiffies_to_msecs(priv->cgr_data.congested_jiffies));
-
-	if (qman_query_cgr(&priv->cgr_data.cgr, &query_cgr) != 0) {
-		seq_printf(file, "CGR id %d - failed to query values\n",
-			   priv->cgr_data.cgr.cgrid);
-	} else {
-		seq_printf(file, "CGR id %d avg count: %llu\n",
-			   priv->cgr_data.cgr.cgrid,
-			   qm_mcr_querycgr_a_get64(&query_cgr));
-		seq_printf(file, "Device entered congestion %u times. ",
-			   priv->cgr_data.cgr_congested_count);
-		seq_printf(file, "Current congestion state is: %s.\n",
-			   query_cgr.cgr.cs ? "congested" : "not congested");
-		/* Reset congestion stats (like QMan CGR API does) */
-		priv->cgr_data.congested_jiffies = 0;
-		priv->cgr_data.cgr_congested_count = 0;
-	}
-
-	/* Rx Errors demultiplexing */
-	seq_puts(file, "\nDPA RX Errors:\nCPU        dma err  phys err");
-	seq_puts(file, "  size err   hdr err  csum err\n");
-	for_each_online_cpu(i) {
-		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
-
-		total.rx_errors.dme += percpu_priv->rx_errors.dme;
-		total.rx_errors.fpe += percpu_priv->rx_errors.fpe;
-		total.rx_errors.fse += percpu_priv->rx_errors.fse;
-		total.rx_errors.phe += percpu_priv->rx_errors.phe;
-		total.rx_errors.cse += percpu_priv->rx_errors.cse;
-
-		seq_printf(file, "     %hu  %8llu  %8llu  ",
-				i,
-				percpu_priv->rx_errors.dme,
-				percpu_priv->rx_errors.fpe);
-		seq_printf(file, "%8llu  %8llu  %8llu\n",
-				percpu_priv->rx_errors.fse,
-				percpu_priv->rx_errors.phe,
-				percpu_priv->rx_errors.cse);
-	}
-	seq_printf(file, "Total     %8llu  %8llu  %8llu  %8llu  %8llu\n",
-			total.rx_errors.dme,
-			total.rx_errors.fpe,
-			total.rx_errors.fse,
-			total.rx_errors.phe,
-			total.rx_errors.cse);
-
-	/* ERN demultiplexing */
-	seq_puts(file, "\nDPA ERN counters:\n  CPU     cg_td      wred  ");
-	seq_puts(file, "err_cond   early_w    late_w     fq_td    fq_ret");
-	seq_puts(file, "     orp_z\n");
-	for_each_online_cpu(i) {
-		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
-
-		total.ern_cnt.cg_tdrop += percpu_priv->ern_cnt.cg_tdrop;
-		total.ern_cnt.wred += percpu_priv->ern_cnt.wred;
-		total.ern_cnt.err_cond += percpu_priv->ern_cnt.err_cond;
-		total.ern_cnt.early_window += percpu_priv->ern_cnt.early_window;
-		total.ern_cnt.late_window += percpu_priv->ern_cnt.late_window;
-		total.ern_cnt.fq_tdrop += percpu_priv->ern_cnt.fq_tdrop;
-		total.ern_cnt.fq_retired += percpu_priv->ern_cnt.fq_retired;
-		total.ern_cnt.orp_zero += percpu_priv->ern_cnt.orp_zero;
-
-		seq_printf(file, "  %hu  %8llu  %8llu  %8llu  %8llu  ",
-			i,
-			percpu_priv->ern_cnt.cg_tdrop,
-			percpu_priv->ern_cnt.wred,
-			percpu_priv->ern_cnt.err_cond,
-			percpu_priv->ern_cnt.early_window);
-		seq_printf(file, "%8llu  %8llu  %8llu  %8llu\n",
-			percpu_priv->ern_cnt.late_window,
-			percpu_priv->ern_cnt.fq_tdrop,
-			percpu_priv->ern_cnt.fq_retired,
-			percpu_priv->ern_cnt.orp_zero);
-	}
-	seq_printf(file, "Total  %8llu  %8llu  %8llu  %8llu  ",
-		total.ern_cnt.cg_tdrop,
-		total.ern_cnt.wred,
-		total.ern_cnt.err_cond,
-		total.ern_cnt.early_window);
-	seq_printf(file, "%8llu  %8llu  %8llu  %8llu\n",
-		total.ern_cnt.late_window,
-		total.ern_cnt.fq_tdrop,
-		total.ern_cnt.fq_retired,
-		total.ern_cnt.orp_zero);
-
-	return 0;
-}
 
-#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 static int dpa_debugfs_loop_show(struct seq_file *file, void *offset)
 {
 	struct dpa_priv_s *priv;
@@ -286,32 +117,13 @@ static int __cold dpa_debugfs_loop_open(struct inode *inode, struct file *file)
 
 	return _errno;
 }
-#endif /* CONFIG_FSL_DPAA_DBG_LOOP */
 
-static int __cold dpa_debugfs_open(struct inode *inode, struct file *file)
-{
-	int			 _errno;
-	const struct net_device	*net_dev;
-
-	_errno = single_open(file, dpa_debugfs_show, inode->i_private);
-	if (unlikely(_errno < 0)) {
-		net_dev = (struct net_device *)inode->i_private;
-
-		if (netif_msg_drv((struct dpa_priv_s *)netdev_priv(net_dev)))
-			netdev_err(net_dev, "single_open() = %d\n",
-					_errno);
-	}
-	return _errno;
-}
 
 int dpa_netdev_debugfs_create(struct net_device *net_dev)
 {
 	struct dpa_priv_s *priv = netdev_priv(net_dev);
 	static int cnt;
-	char debugfs_file_name[100];
-#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 	char loop_file_name[100];
-#endif
 
 	if (unlikely(dpa_debugfs_root == NULL)) {
 		pr_err(KBUILD_MODNAME ": %s:%hu:%s(): \t%s\n",
@@ -320,22 +132,7 @@ int dpa_netdev_debugfs_create(struct net_device *net_dev)
 		return -ENOMEM;
 	}
 
-	snprintf(debugfs_file_name, 100, "eth%d", ++cnt);
-	priv->debugfs_file = debugfs_create_file(debugfs_file_name,
-							 S_IRUGO,
-							 dpa_debugfs_root,
-							 net_dev,
-							 &dpa_debugfs_fops);
-	if (unlikely(priv->debugfs_file == NULL)) {
-		netdev_err(net_dev, "debugfs_create_file(%s/%s)",
-				dpa_debugfs_root->d_iname,
-				debugfs_file_name);
-
-		return -ENOMEM;
-	}
-
-#ifdef CONFIG_FSL_DPAA_DBG_LOOP
-	sprintf(loop_file_name, "eth%d_loop", cnt);
+	sprintf(loop_file_name, "eth%d_loop", ++cnt);
 	priv->debugfs_loop_file = debugfs_create_file(loop_file_name,
 							 S_IRUGO,
 							 dpa_debugfs_root,
@@ -348,7 +145,6 @@ int dpa_netdev_debugfs_create(struct net_device *net_dev)
 
 		return -ENOMEM;
 	}
-#endif
 	return 0;
 }
 
@@ -356,10 +152,7 @@ void dpa_netdev_debugfs_remove(struct net_device *net_dev)
 {
 	struct dpa_priv_s *priv = netdev_priv(net_dev);
 
-	debugfs_remove(priv->debugfs_file);
-#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 	debugfs_remove(priv->debugfs_loop_file);
-#endif
 }
 
 int __init dpa_debugfs_module_init(void)
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
index 92e697e..1192645 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
@@ -65,9 +65,9 @@
 #include "mac.h"
 #include "dpaa_eth.h"
 #include "dpaa_eth_common.h"
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUGFS
+#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 #include "dpaa_debugfs.h"
-#endif /* CONFIG_FSL_DPAA_ETH_DEBUGFS */
+#endif /* CONFIG_FSL_DPAA_DBG_LOOP */
 
 /* CREATE_TRACE_POINTS only needs to be defined once. Other dpa files
  * using trace events only need to #include <trace/events/sched.h>
@@ -1133,9 +1133,9 @@ static int __init __cold dpa_load(void)
 
 	pr_info(DPA_DESCRIPTION "\n");
 
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUGFS
+#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 	dpa_debugfs_module_init();
-#endif /* CONFIG_FSL_DPAA_ETH_DEBUGFS */
+#endif /* CONFIG_FSL_DPAA_DBG_LOOP */
 
 	/* initialise dpaa_eth mirror values */
 	dpa_rx_extra_headroom = fm_get_rx_extra_headroom();
@@ -1167,9 +1167,9 @@ static void __exit __cold dpa_unload(void)
 
 	platform_driver_unregister(&dpa_driver);
 
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUGFS
+#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 	dpa_debugfs_module_exit();
-#endif /* CONFIG_FSL_DPAA_ETH_DEBUGFS */
+#endif /* CONFIG_FSL_DPAA_DBG_LOOP */
 
 	/* Only one channel is used and needs to be relased after all
 	 * interfaces are removed
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
index b5c1bf8..f3b6ddd 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
@@ -346,9 +346,6 @@ struct dpa_priv_s {
 	uint16_t		 channel;	/* "fsl,qman-channel-id" */
 	struct list_head	 dpa_fq_list;
 
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUGFS
-	struct dentry		*debugfs_file;
-#endif /* CONFIG_FSL_DPAA_ETH_DEBUGFS */
 #ifdef CONFIG_FSL_DPAA_DBG_LOOP
 	struct dentry		*debugfs_loop_file;
 #endif
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
index 7b05389..6e390b5 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
@@ -47,9 +47,9 @@
 #ifdef CONFIG_FSL_DPAA_1588
 #include "dpaa_1588.h"
 #endif
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUGFS
+#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 #include "dpaa_debugfs.h"
-#endif /* CONFIG_FSL_DPAA_ETH_DEBUGFS */
+#endif /* CONFIG_FSL_DPAA_DBG_LOOP */
 #include "mac.h"
 
 /* DPAA platforms benefit from hardware-assisted queue management */
@@ -131,14 +131,14 @@ int dpa_netdev_init(struct net_device *net_dev,
 		return err;
 	}
 
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUGFS
+#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 	/* create debugfs entry for this net_device */
 	err = dpa_netdev_debugfs_create(net_dev);
 	if (err) {
 		unregister_netdev(net_dev);
 		return err;
 	}
-#endif /* CONFIG_FSL_DPAA_ETH_DEBUGFS */
+#endif /* CONFIG_FSL_DPAA_DBG_LOOP */
 
 	return 0;
 }
@@ -523,10 +523,10 @@ int __cold dpa_remove(struct platform_device *of_dev)
 	if (priv->buf_layout)
 		devm_kfree(dev, priv->buf_layout);
 
-#ifdef CONFIG_FSL_DPAA_ETH_DEBUGFS
+#ifdef CONFIG_FSL_DPAA_DBG_LOOP
 	/* remove debugfs entry for this net_device */
 	dpa_netdev_debugfs_remove(net_dev);
-#endif /* CONFIG_FSL_DPAA_ETH_DEBUGFS */
+#endif /* CONFIG_FSL_DPAA_DBG_LOOP */
 
 #ifdef CONFIG_FSL_DPAA_1588
 	if (priv->tsu && priv->tsu->valid)
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_ethtool.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_ethtool.c
index bb1cc71..f0ca8b8 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_ethtool.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_ethtool.c
@@ -44,6 +44,45 @@
 #include "mac.h"                /* struct mac_device */
 #include "dpaa_eth_common.h"
 
+static const char dpa_stats_percpu[][ETH_GSTRING_LEN] = {
+	"interrupts",
+	"rx packets",
+	"tx packets",
+	"tx returned",
+	"tx confirm",
+	"tx S/G",
+	"tx error",
+	"rx error",
+	"bp count"
+};
+
+static char dpa_stats_global[][ETH_GSTRING_LEN] = {
+	/* dpa rx errors */
+	"rx dma error",
+	"rx frame physical error",
+	"rx frame size error",
+	"rx header error",
+	"rx csum error",
+
+	/* demultiplexing errors */
+	"qman cg_tdrop",
+	"qman wred",
+	"qman error cond",
+	"qman early window",
+	"qman late window",
+	"qman fq tdrop",
+	"qman fq retired",
+	"qman orp disabled",
+
+	/* congestion related stats */
+	"congestion time (ms)",
+	"entered congestion",
+	"congested (0/1)"
+};
+
+#define DPA_STATS_PERCPU_LEN ARRAY_SIZE(dpa_stats_percpu)
+#define DPA_STATS_GLOBAL_LEN ARRAY_SIZE(dpa_stats_global)
+
 static int __cold dpa_get_settings(struct net_device *net_dev,
 		struct ethtool_cmd *et_cmd)
 {
@@ -333,6 +372,151 @@ static int dpa_set_eee(struct net_device *net_dev, struct ethtool_eee *et_eee)
 	return phy_ethtool_set_eee(priv->mac_dev->phy_dev, et_eee);
 }
 
+static int dpa_get_sset_count(struct net_device *net_dev, int type)
+{
+	unsigned int total_stats, num_stats;
+
+	num_stats   = num_online_cpus() + 1;
+	total_stats = num_stats * DPA_STATS_PERCPU_LEN + DPA_STATS_GLOBAL_LEN;
+
+	switch (type) {
+	case ETH_SS_STATS:
+		return total_stats;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static void copy_stats(struct dpa_percpu_priv_s *percpu_priv, int num_cpus,
+			int crr_cpu, u64 bp_count, u64 *data)
+{
+	int num_stat_values = num_cpus + 1;
+	int crr_stat = 0;
+
+	/* update current CPU's stats and also add them to the total values */
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->in_interrupt;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->in_interrupt;
+
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->stats.rx_packets;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->stats.rx_packets;
+
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->stats.tx_packets;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->stats.tx_packets;
+
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->tx_returned;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->tx_returned;
+
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->tx_confirm;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->tx_confirm;
+
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->tx_frag_skbuffs;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->tx_frag_skbuffs;
+
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->stats.tx_errors;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->stats.tx_errors;
+
+	data[crr_stat * num_stat_values + crr_cpu] = percpu_priv->stats.rx_errors;
+	data[crr_stat++ * num_stat_values + num_cpus] += percpu_priv->stats.rx_errors;
+
+	data[crr_stat * num_stat_values + crr_cpu] = bp_count;
+	data[crr_stat++ * num_stat_values + num_cpus] += bp_count;
+}
+
+static void dpa_get_ethtool_stats(struct net_device *net_dev,
+		struct ethtool_stats *stats, u64 *data)
+{
+	u64 bp_count, cg_time, cg_num, cg_status;
+	struct dpa_percpu_priv_s *percpu_priv;
+	struct qm_mcr_querycgr query_cgr;
+	struct dpa_rx_errors rx_errors;
+	struct dpa_ern_cnt ern_cnt;
+	struct dpa_priv_s *priv;
+	unsigned int num_cpus, offset;
+	struct dpa_bp *dpa_bp;
+	int total_stats, i;
+
+	total_stats = dpa_get_sset_count(net_dev, ETH_SS_STATS);
+	priv     = netdev_priv(net_dev);
+	dpa_bp   = priv->dpa_bp;
+	num_cpus = num_online_cpus();
+	bp_count = 0;
+
+	memset(&rx_errors, 0, sizeof(struct dpa_rx_errors));
+	memset(&ern_cnt, 0, sizeof(struct dpa_ern_cnt));
+	memset(data, 0, total_stats * sizeof(u64));
+
+	for_each_online_cpu(i) {
+		percpu_priv = per_cpu_ptr(priv->percpu_priv, i);
+
+		if (dpa_bp->percpu_count)
+			bp_count = *(per_cpu_ptr(dpa_bp->percpu_count, i));
+
+		rx_errors.dme += percpu_priv->rx_errors.dme;
+		rx_errors.fpe += percpu_priv->rx_errors.fpe;
+		rx_errors.fse += percpu_priv->rx_errors.fse;
+		rx_errors.phe += percpu_priv->rx_errors.phe;
+		rx_errors.cse += percpu_priv->rx_errors.cse;
+
+		ern_cnt.cg_tdrop     += percpu_priv->ern_cnt.cg_tdrop;
+		ern_cnt.wred         += percpu_priv->ern_cnt.wred;
+		ern_cnt.err_cond     += percpu_priv->ern_cnt.err_cond;
+		ern_cnt.early_window += percpu_priv->ern_cnt.early_window;
+		ern_cnt.late_window  += percpu_priv->ern_cnt.late_window;
+		ern_cnt.fq_tdrop     += percpu_priv->ern_cnt.fq_tdrop;
+		ern_cnt.fq_retired   += percpu_priv->ern_cnt.fq_retired;
+		ern_cnt.orp_zero     += percpu_priv->ern_cnt.orp_zero;
+
+		copy_stats(percpu_priv, num_cpus, i, bp_count, data);
+	}
+
+	offset = (num_cpus + 1) * DPA_STATS_PERCPU_LEN;
+	memcpy(data + offset, &rx_errors, sizeof(struct dpa_rx_errors));
+
+	offset += sizeof(struct dpa_rx_errors) / sizeof(u64);
+	memcpy(data + offset, &ern_cnt, sizeof(struct dpa_ern_cnt));
+
+	/* gather congestion related counters */
+	cg_num    = 0;
+	cg_status = 0;
+	cg_time   = jiffies_to_msecs(priv->cgr_data.congested_jiffies);
+	if (qman_query_cgr(&priv->cgr_data.cgr, &query_cgr) == 0) {
+		cg_num    = priv->cgr_data.cgr_congested_count;
+		cg_status = query_cgr.cgr.cs;
+
+		/* reset congestion stats (like QMan API does */
+		priv->cgr_data.congested_jiffies   = 0;
+		priv->cgr_data.cgr_congested_count = 0;
+	}
+
+	offset += sizeof(struct dpa_ern_cnt) / sizeof(u64);
+	data[offset++] = cg_time;
+	data[offset++] = cg_num;
+	data[offset++] = cg_status;
+}
+
+static void dpa_get_strings(struct net_device *net_dev, u32 stringset, u8 *data)
+{
+	unsigned int i, j, num_cpus, size;
+	char stat_string_cpu[ETH_GSTRING_LEN];
+	u8 *strings;
+
+	strings   = data;
+	num_cpus  = num_online_cpus();
+	size      = DPA_STATS_GLOBAL_LEN * ETH_GSTRING_LEN;
+
+	for (i = 0; i < DPA_STATS_PERCPU_LEN; i++) {
+		for (j = 0; j < num_cpus; j++) {
+			snprintf(stat_string_cpu, ETH_GSTRING_LEN, "%s [CPU %d]", dpa_stats_percpu[i], j);
+			memcpy(strings, stat_string_cpu, ETH_GSTRING_LEN);
+			strings += ETH_GSTRING_LEN;
+		}
+		snprintf(stat_string_cpu, ETH_GSTRING_LEN, "%s [TOTAL]", dpa_stats_percpu[i]);
+		memcpy(strings, stat_string_cpu, ETH_GSTRING_LEN);
+		strings += ETH_GSTRING_LEN;
+	}
+	memcpy(strings, dpa_stats_global, size);
+}
+
 const struct ethtool_ops dpa_ethtool_ops = {
 	.get_settings = dpa_get_settings,
 	.set_settings = dpa_set_settings,
@@ -343,10 +527,12 @@ const struct ethtool_ops dpa_ethtool_ops = {
 	.get_pauseparam = dpa_get_pauseparam,
 	.set_pauseparam = dpa_set_pauseparam,
 	.self_test = NULL, /* TODO invoke the cold-boot unit-test? */
-	.get_ethtool_stats = NULL, /* TODO other stats, currently in debugfs */
 	.get_link = ethtool_op_get_link,
 	.get_eee = dpa_get_eee,
 	.set_eee = dpa_set_eee,
+	.get_sset_count = dpa_get_sset_count,
+	.get_ethtool_stats = dpa_get_ethtool_stats,
+	.get_strings = dpa_get_strings,
 #ifdef CONFIG_PM
 	.get_wol = dpa_get_wol,
 	.set_wol = dpa_set_wol,
-- 
2.8.1

