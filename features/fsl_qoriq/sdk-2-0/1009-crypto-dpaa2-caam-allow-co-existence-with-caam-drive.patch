From 18d631a5438b8af20309a101a17b83547040dddc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Horia=20Geant=C4=83?= <horia.geanta@nxp.com>
Date: Mon, 15 Feb 2016 13:56:29 +0200
Subject: [PATCH 1009/1383] crypto: dpaa2-caam - allow co-existence with caam
 driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fix the compilation errors that arise when compiling
both caam and dpaa2-caam.

Signed-off-by: Horia GeantÄƒ <horia.geanta@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/crypto/dpaa2-caam/dpaa2-caam.c | 28 ++++++++++++++--------------
 drivers/crypto/dpaa2-caam/error.c      |  4 ++--
 drivers/crypto/dpaa2-caam/error.h      |  2 +-
 3 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/drivers/crypto/dpaa2-caam/dpaa2-caam.c b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
index 787b736..9b408d9 100644
--- a/drivers/crypto/dpaa2-caam/dpaa2-caam.c
+++ b/drivers/crypto/dpaa2-caam/dpaa2-caam.c
@@ -593,7 +593,7 @@ struct split_key_result {
 	struct device *dev;
 };
 
-void split_key_done(void *cbk_ctx, u32 err)
+static void split_key_done(void *cbk_ctx, u32 err)
 {
 	struct split_key_result *res = cbk_ctx;
 
@@ -602,15 +602,15 @@ void split_key_done(void *cbk_ctx, u32 err)
 #endif
 
 	if (err)
-		caam_jr_strstatus(res->dev, err);
+		dpaa2_caam_jr_strstatus(res->dev, err);
 
 	res->err = err;
 	complete(&res->completion);
 }
 
-int gen_split_key(struct device *dev, u8 *key_out, int split_key_len,
-		  int split_key_pad_len, const u8 *key_in, u32 keylen,
-		  u32 alg_op)
+static int gen_split_key(struct device *dev, u8 *key_out, int split_key_len,
+			 int split_key_pad_len, const u8 *key_in, u32 keylen,
+			 u32 alg_op)
 {
 	struct caam_request *req_ctx;
 	u32 *desc;
@@ -1993,7 +1993,7 @@ static void aead_encrypt_done(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 	aead_unmap(ctx->priv->dev, edesc, req);
 
@@ -2036,7 +2036,7 @@ static void aead_decrypt_done(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 	aead_unmap(ctx->priv->dev, edesc, req);
 
@@ -2182,7 +2182,7 @@ static void ablkcipher_encrypt_done(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 #ifdef DEBUG
 	print_hex_dump(KERN_ERR, "dstiv  @"__stringify(__LINE__)": ",
@@ -2214,7 +2214,7 @@ static void ablkcipher_decrypt_done(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 #ifdef DEBUG
 	print_hex_dump(KERN_ERR, "dstiv  @"__stringify(__LINE__)": ",
@@ -3578,7 +3578,7 @@ static void ahash_done(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 	ahash_unmap(ctx->priv->dev, edesc, req, digestsize);
 	qi_cache_free(edesc);
@@ -3611,7 +3611,7 @@ static void ahash_done_bi(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 	ahash_unmap_ctx(ctx->priv->dev, edesc, req, ctx->ctx_len,
 			DMA_BIDIRECTIONAL);
@@ -3645,7 +3645,7 @@ static void ahash_done_ctx_src(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 	ahash_unmap_ctx(ctx->priv->dev, edesc, req, digestsize, DMA_TO_DEVICE);
 	qi_cache_free(edesc);
@@ -3678,7 +3678,7 @@ static void ahash_done_ctx_dst(void *cbk_ctx, u32 err)
 #endif
 
 	if (unlikely(err))
-		caam_jr_strstatus(ctx->priv->dev, err);
+		dpaa2_caam_jr_strstatus(ctx->priv->dev, err);
 
 	ahash_unmap_ctx(ctx->priv->dev, edesc, req, ctx->ctx_len,
 			DMA_FROM_DEVICE);
@@ -4922,7 +4922,7 @@ static void dpaa2_caam_process_fd(struct dpaa2_caam_priv *priv,
 	err = dpaa2_fd_get_frc(fd);
 	if (err) {
 		dev_err(priv->dev, "FD[FRC] err = %x\n", err);
-		caam_jr_strstatus(priv->dev, err);
+		dpaa2_caam_jr_strstatus(priv->dev, err);
 		return;
 	}
 
diff --git a/drivers/crypto/dpaa2-caam/error.c b/drivers/crypto/dpaa2-caam/error.c
index 9e6ea15..9548416 100644
--- a/drivers/crypto/dpaa2-caam/error.c
+++ b/drivers/crypto/dpaa2-caam/error.c
@@ -301,7 +301,7 @@ static void report_cond_code_status(struct device *jrdev, const u32 status,
 		status, error, __func__);
 }
 
-void caam_jr_strstatus(struct device *jrdev, u32 status)
+void dpaa2_caam_jr_strstatus(struct device *jrdev, u32 status)
 {
 	static const struct stat_src {
 		void (*report_ssed)(struct device *jrdev, const u32 status,
@@ -339,4 +339,4 @@ void caam_jr_strstatus(struct device *jrdev, u32 status)
 	else
 		dev_err(jrdev, "%d: unknown error source\n", ssrc);
 }
-EXPORT_SYMBOL(caam_jr_strstatus);
+EXPORT_SYMBOL(dpaa2_caam_jr_strstatus);
diff --git a/drivers/crypto/dpaa2-caam/error.h b/drivers/crypto/dpaa2-caam/error.h
index b06bfd7..537b6d4 100644
--- a/drivers/crypto/dpaa2-caam/error.h
+++ b/drivers/crypto/dpaa2-caam/error.h
@@ -32,5 +32,5 @@
 #ifndef CAAM_ERROR_H
 #define CAAM_ERROR_H
 #define CAAM_ERROR_STR_MAX 302
-void caam_jr_strstatus(struct device *jrdev, u32 status);
+void dpaa2_caam_jr_strstatus(struct device *jrdev, u32 status);
 #endif /* CAAM_ERROR_H */
-- 
2.8.1

