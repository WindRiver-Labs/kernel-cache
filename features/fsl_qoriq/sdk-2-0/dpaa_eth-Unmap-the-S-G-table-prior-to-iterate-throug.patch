From 26a12fbe1162e12298ff3c59fdf12c5139c67281 Mon Sep 17 00:00:00 2001
From: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Date: Thu, 9 Jul 2015 18:06:01 +0300
Subject: [PATCH 0938/1429] dpaa_eth: Unmap the S/G table prior to iterate
 through the fragments

The S/G table must be unmapped before walking through the fragments
and releasing them back into the buffer pool.
Remap the S/G table after seeding of the fragments has finished and
put the S/G table's associated buffer back into the buffer pool.

Also use dma_sync_single_for_cpu to access the parse results area
otherwise a dma_map_single is required and the frame descriptor
updated.

memset the bm_buffer structures prior to use otherwise we risk
sending garbage to the Bman driver.

Signed-off-by: Cristian Sovaiala <cristian.sovaiala@freescale.com>
Change-Id: I99e445bda0602f064e6745ad6cea17f5b8db8897
Reviewed-on: http://git.am.freescale.net:8181/39551
Reviewed-by: Madalin-Cristian Bucur <madalin.bucur@freescale.com>
Tested-by: Madalin-Cristian Bucur <madalin.bucur@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c |    3 +-
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.c  |   35 ++++++++++++++-----
 2 files changed, 28 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
index 1192645..6ec6e7a 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
@@ -232,7 +232,8 @@ dpa_csum_validation(const struct dpa_priv_s	*priv,
 	if (unlikely(!frm))
 		return;
 
-	dma_unmap_single(dpa_bp->dev, addr, dpa_bp->size, DMA_BIDIRECTIONAL);
+	dma_sync_single_for_cpu(dpa_bp->dev, addr, DPA_RX_PRIV_DATA_SIZE +
+				DPA_PARSE_RESULTS_SIZE, DMA_BIDIRECTIONAL);
 
 	parse_result = (fm_prs_result_t *)(frm + DPA_RX_PRIV_DATA_SIZE);
 
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
index 6e390b5..43e2e27 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
@@ -1533,6 +1533,8 @@ void dpa_release_sgt(struct qm_sg_entry *sgt)
 	struct bm_buffer bmb[DPA_BUFF_RELEASE_MAX];
 	uint8_t i = 0, j;
 
+	memset(bmb, 0, DPA_BUFF_RELEASE_MAX * sizeof(struct bm_buffer));
+
 	do {
 		dpa_bp = dpa_bpid2pool(sgt[i].bpid);
 		DPA_BUG_ON(!dpa_bp);
@@ -1544,6 +1546,7 @@ void dpa_release_sgt(struct qm_sg_entry *sgt)
 			bmb[j].hi       = sgt[i].addr_hi;
 			bmb[j].lo       = be32_to_cpu(sgt[i].addr_lo);
 
+
 			j++; i++;
 		} while (j < ARRAY_SIZE(bmb) &&
 				!sgt[i-1].final &&
@@ -1558,22 +1561,36 @@ EXPORT_SYMBOL(dpa_release_sgt);
 void __attribute__((nonnull))
 dpa_fd_release(const struct net_device *net_dev, const struct qm_fd *fd)
 {
-	struct qm_sg_entry		*sgt;
-	struct dpa_bp			*_dpa_bp;
-	struct bm_buffer		 _bmb;
+	struct qm_sg_entry	*sgt;
+	struct dpa_bp		*dpa_bp;
+	struct bm_buffer	bmb;
+	dma_addr_t		addr;
+	void			*vaddr;
 
-	_bmb.hi	= fd->addr_hi;
-	_bmb.lo	= fd->addr_lo;
+	memset(&bmb, 0, sizeof(struct bm_buffer));
+	bm_buffer_set64(&bmb, fd->addr);
 
-	_dpa_bp = dpa_bpid2pool(fd->bpid);
-	DPA_BUG_ON(!_dpa_bp);
+	dpa_bp = dpa_bpid2pool(fd->bpid);
+	DPA_BUG_ON(!dpa_bp);
 
 	if (fd->format == qm_fd_sg) {
-		sgt = (phys_to_virt(bm_buf_addr(&_bmb)) + dpa_fd_offset(fd));
+		vaddr = phys_to_virt(fd->addr);
+		sgt = vaddr + dpa_fd_offset(fd);
+
+		dma_unmap_single(dpa_bp->dev, qm_fd_addr(fd), dpa_bp->size,
+				 DMA_BIDIRECTIONAL);
+
 		dpa_release_sgt(sgt);
+		addr = dma_map_single(dpa_bp->dev, vaddr, dpa_bp->size,
+				      DMA_BIDIRECTIONAL);
+		if (unlikely(dma_mapping_error(dpa_bp->dev, addr))) {
+			dev_err(dpa_bp->dev, "DMA mapping failed");
+			return;
+		}
+		bm_buffer_set64(&bmb, addr);
 	}
 
-	while (bman_release(_dpa_bp->pool, &_bmb, 1, 0))
+	while (bman_release(dpa_bp->pool, &bmb, 1, 0))
 		cpu_relax();
 }
 EXPORT_SYMBOL(dpa_fd_release);
-- 
1.7.5.4

