From 8897354549e50989f387695ffe9987c23385ed05 Mon Sep 17 00:00:00 2001
From: Razvan Stefanescu <razvan.stefanescu@freescale.com>
Date: Wed, 17 Feb 2016 16:28:04 +0200
Subject: [PATCH 1020/1383] dpaa2-ethsw: Fix interrupt handling

Mask only the events handled by the driver - DPSW_IRQ_EVENT_LINK_CHANGED.

Use clear-on-read mechanism for the interrupt status and avoid calling
dpsw_clear_irq_status(). Status contains the events handled (only link
state change for the moment) and masks the first 16-bits, as they are used
to store the interface ID that generated the event.

Signed-off-by: Razvan Stefanescu <razvan.stefanescu@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/ethsw/switch.c | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/ethsw/switch.c b/drivers/staging/fsl-dpaa2/ethsw/switch.c
index f873da4..0a9c35e 100644
--- a/drivers/staging/fsl-dpaa2/ethsw/switch.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/switch.c
@@ -1263,7 +1263,9 @@ static irqreturn_t _ethsw_irq0_handler_thread(int irq_num, void *arg)
 	struct fsl_mc_io *io = priv->mc_io;
 	uint16_t token = priv->dpsw_handle;
 	int irq_index = DPSW_IRQ_INDEX_IF;
-	uint32_t status = 0, clear = 0;
+
+	/* Mask the events and the if_id reserved bits to be cleared on read */
+	uint32_t status = DPSW_IRQ_EVENT_LINK_CHANGED | 0xFFFF0000;
 	int err;
 
 	/* Sanity check */
@@ -1275,24 +1277,22 @@ static irqreturn_t _ethsw_irq0_handler_thread(int irq_num, void *arg)
 	err = dpsw_get_irq_status(io, 0, token, irq_index, &status);
 	if (unlikely(err)) {
 		netdev_err(netdev, "Can't get irq status (err %d)", err);
-		clear = 0xffffffff;
+
+		err = dpsw_clear_irq_status(io, 0, token, irq_index,
+					    0xFFFFFFFF);
+		if (unlikely(err))
+			netdev_err(netdev, "Can't clear irq status (err %d)",
+				   err);
 		goto out;
 	}
 
-	/* FIXME clear irq status */
-
 	if (status & DPSW_IRQ_EVENT_LINK_CHANGED) {
-		clear |= DPSW_IRQ_EVENT_LINK_CHANGED;
-
 		err = ethsw_links_state_update(priv);
 		if (unlikely(err))
 			goto out;
 	}
-out:
-	err = dpsw_clear_irq_status(io, 0, token, irq_index, clear);
-	if (unlikely(err))
-		netdev_err(netdev, "Can't clear irq status (err %d)", err);
 
+out:
 	return IRQ_HANDLED;
 }
 
@@ -1304,7 +1304,7 @@ static int ethsw_setup_irqs(struct fsl_mc_device *sw_dev)
 	int err = 0;
 	struct fsl_mc_device_irq *irq;
 	const int irq_index = DPSW_IRQ_INDEX_IF;
-	uint32_t mask = ~0x0u;	/* FIXME: unmask handled irqs */
+	uint32_t mask = DPSW_IRQ_EVENT_LINK_CHANGED;
 
 	err = fsl_mc_allocate_irqs(sw_dev);
 	if (unlikely(err)) {
-- 
2.8.1

