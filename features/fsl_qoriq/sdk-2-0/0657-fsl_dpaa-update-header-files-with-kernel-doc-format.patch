From 752bf59cc24ae76003373adb2c7fda8791be463e Mon Sep 17 00:00:00 2001
From: Haiying Wang <Haiying.wang@freescale.com>
Date: Thu, 5 Nov 2015 11:51:40 -0500
Subject: [PATCH 0657/1383] fsl_dpaa: update header files with kernel-doc
 format

Signed-off-by: Haiying Wang <Haiying.wang@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/include/fsl_dpaa_fd.h | 213 ++++++++++++++--
 drivers/staging/fsl-mc/include/fsl_dpaa_io.h | 353 +++++++++++++++++++++------
 2 files changed, 478 insertions(+), 88 deletions(-)

diff --git a/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h b/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h
index c9692a2..9a7c7de 100644
--- a/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h
+++ b/drivers/staging/fsl-mc/include/fsl_dpaa_fd.h
@@ -31,11 +31,15 @@
 #ifndef __FSL_DPAA_FD_H
 #define __FSL_DPAA_FD_H
 
-/* Place-holder for FDs, we represent it via the simplest form that we need for
- * now. Different overlays may be needed to support different options, etc. (It
- * is impractical to define One True Struct, because the resulting encoding
- * routines (lots of read-modify-writes) would be worst-case performance whether
- * or not circumstances required them.) */
+/**
+ * struct dpaa_fd - Place-holder for FDs.
+ *
+ * We represent it via the simplest form that we need for now. Different
+ * overlays may be needed to support different options, etc. (It is impractical
+ * to define One True Struct, because the resulting encoding routines (lots of
+ * read-modify-writes) would be worst-case performance whether or not
+ * circumstances required them.)
+ */
 struct dpaa_fd {
 	union {
 		u32 words[8];
@@ -61,44 +65,90 @@ enum dpaa_fd_format {
 	dpaa_fd_sg
 };
 
+/**
+ * ldpaa_fd_get_addr() - get the addr field of frame descriptor
+ * @fd: the given frame descriptor.
+ *
+ * Return the address in the frame descritpor.
+ */
 static inline dma_addr_t ldpaa_fd_get_addr(const struct dpaa_fd *fd)
 {
 	return (dma_addr_t)((((uint64_t)fd->simple.addr_hi) << 32)
 				+ fd->simple.addr_lo);
 }
 
+/**
+ * ldpaa_fd_set_addr() - Set the addr field of frame descriptor
+ * @fd: the given frame descriptor.
+ * @addr: the address needs to be set in frame descriptor.
+ */
 static inline void ldpaa_fd_set_addr(struct dpaa_fd *fd, dma_addr_t addr)
 {
 	fd->simple.addr_hi = upper_32_bits(addr);
 	fd->simple.addr_lo = lower_32_bits(addr);
 }
 
+/**
+ * ldpaa_fd_get_len() - Get the length in the frame descriptor
+ * @fd: the given frame descriptor.
+ *
+ * Return the length field in the frame descriptor.
+ */
 static inline u32 ldpaa_fd_get_len(const struct dpaa_fd *fd)
 {
 	return fd->simple.len;
 }
 
+/**
+ * ldpaa_fd_set_len() - Set the length field of frame descriptor
+ * @fd: the given frame descriptor.
+ * @len: the length needs to be set in frame descriptor.
+ */
 static inline void ldpaa_fd_set_len(struct dpaa_fd *fd, u32 len)
 {
 	fd->simple.len = len;
 }
 
+/**
+ * ldpaa_fd_get_offset() - Get the offset field in the frame descriptor
+ * @fd: the given frame descriptor.
+ *
+ * Return the offset.
+ */
 static inline uint16_t ldpaa_fd_get_offset(const struct dpaa_fd *fd)
 {
 	return (uint16_t)(fd->simple.bpid_offset >> 16) & 0x0FFF;
 }
 
+/**
+ * ldpaa_fd_set_offset() - Set the offset field of frame descriptor
+ *
+ * @fd: the given frame descriptor.
+ * @offset: the offset needs to be set in frame descriptor.
+ */
 static inline void ldpaa_fd_set_offset(struct dpaa_fd *fd, uint16_t offset)
 {
 	fd->simple.bpid_offset &= 0xF000FFFF;
 	fd->simple.bpid_offset |= (u32)offset << 16;
 }
 
+/**
+ * ldpaa_fd_get_format() - Get the format field in the frame descriptor
+ * @fd: the given frame descriptor.
+ *
+ * Return the format.
+ */
 static inline enum dpaa_fd_format ldpaa_fd_get_format(const struct dpaa_fd *fd)
 {
 	return (enum dpaa_fd_format)((fd->simple.bpid_offset >> 28) & 0x3);
 }
 
+/**
+ * ldpaa_fd_set_format() - Set the format field of frame descriptor
+ *
+ * @fd: the given frame descriptor.
+ * @format: the format needs to be set in frame descriptor.
+ */
 static inline void ldpaa_fd_set_format(struct dpaa_fd *fd,
 				       enum dpaa_fd_format format)
 {
@@ -106,18 +156,32 @@ static inline void ldpaa_fd_set_format(struct dpaa_fd *fd,
 	fd->simple.bpid_offset |= (u32)format << 28;
 }
 
+/**
+ * ldpaa_fd_get_bpid() - Get the bpid field in the frame descriptor
+ * @fd: the given frame descriptor.
+ *
+ * Return the bpid.
+ */
 static inline uint16_t ldpaa_fd_get_bpid(const struct dpaa_fd *fd)
 {
 	return (uint16_t)(fd->simple.bpid_offset & 0xFFFF);
 }
 
+/**
+ * ldpaa_fd_set_bpid() - Set the bpid field of frame descriptor
+ *
+ * @fd: the given frame descriptor.
+ * @bpid: the bpid needs to be set in frame descriptor.
+ */
 static inline void ldpaa_fd_set_bpid(struct dpaa_fd *fd, uint16_t bpid)
 {
 	fd->simple.bpid_offset &= 0xFFFF0000;
 	fd->simple.bpid_offset |= (u32)bpid;
 }
 
-/* Scatter gather entry */
+/**
+ * struct dpaa_sg_entry - the scatter-gathering structure
+ */
 struct dpaa_sg_entry {
 	u32 addr_lo;
 	u32 addr_hi;
@@ -138,23 +202,40 @@ enum dpaa_sg_format {
  * called before the SGE contents are accessed by the core (on Rx),
  * respectively before the SG table is sent to hardware (on Tx)
  */
+
+/**
+ * ldpaa_sg_get_addr() - Get the address from SG entry
+ * @sg: the given scatter-gathering object.
+ *
+ * Return the address.
+ */
 static inline dma_addr_t ldpaa_sg_get_addr(const struct dpaa_sg_entry *sg)
 {
 	return (dma_addr_t)((((u64)sg->addr_hi) << 32) + sg->addr_lo);
 }
 
+/**
+ * ldpaa_sg_set_addr() - Set the address in SG entry
+ * @sg: the given scatter-gathering object.
+ * @addr: the address to be set.
+ */
 static inline void ldpaa_sg_set_addr(struct dpaa_sg_entry *sg, dma_addr_t addr)
 {
 	sg->addr_hi = upper_32_bits(addr);
 	sg->addr_lo = lower_32_bits(addr);
 }
 
-
 static inline bool ldpaa_sg_short_len(const struct dpaa_sg_entry *sg)
 {
 	return (sg->bpid_offset >> 30) & 0x1;
 }
 
+/**
+ * ldpaa_sg_get_len() - Get the length in SG entry
+ * @sg: the given scatter-gathering object.
+ *
+ * Return the length.
+ */
 static inline u32 ldpaa_sg_get_len(const struct dpaa_sg_entry *sg)
 {
 	if (ldpaa_sg_short_len(sg))
@@ -162,16 +243,32 @@ static inline u32 ldpaa_sg_get_len(const struct dpaa_sg_entry *sg)
 	return sg->len;
 }
 
+/**
+ * ldpaa_sg_set_len() - Set the length in SG entry
+ * @sg: the given scatter-gathering object.
+ * @len: the length to be set.
+ */
 static inline void ldpaa_sg_set_len(struct dpaa_sg_entry *sg, u32 len)
 {
 	sg->len = len;
 }
 
+/**
+ * ldpaa_sg_get_offset() - Get the offset in SG entry
+ * @sg: the given scatter-gathering object.
+ *
+ * Return the offset.
+ */
 static inline u16 ldpaa_sg_get_offset(const struct dpaa_sg_entry *sg)
 {
 	return (u16)(sg->bpid_offset >> 16) & 0x0FFF;
 }
 
+/**
+ * ldpaa_sg_set_offset() - Set the offset in SG entry
+ * @sg: the given scatter-gathering object.
+ * @offset: the offset to be set.
+ */
 static inline void ldpaa_sg_set_offset(struct dpaa_sg_entry *sg,
 				       u16 offset)
 {
@@ -179,12 +276,23 @@ static inline void ldpaa_sg_set_offset(struct dpaa_sg_entry *sg,
 	sg->bpid_offset |= (u32)offset << 16;
 }
 
+/**
+ * ldpaa_sg_get_format() - Get the SG format in SG entry
+ * @sg: the given scatter-gathering object.
+ *
+ * Return the format.
+ */
 static inline enum dpaa_sg_format
 	ldpaa_sg_get_format(const struct dpaa_sg_entry *sg)
 {
 	return (enum dpaa_sg_format)((sg->bpid_offset >> 28) & 0x3);
 }
 
+/**
+ * ldpaa_sg_set_format() - Set the SG format in SG entry
+ * @sg: the given scatter-gathering object.
+ * @format: the format to be set.
+ */
 static inline void ldpaa_sg_set_format(struct dpaa_sg_entry *sg,
 				       enum dpaa_sg_format format)
 {
@@ -192,22 +300,44 @@ static inline void ldpaa_sg_set_format(struct dpaa_sg_entry *sg,
 	sg->bpid_offset |= (u32)format << 28;
 }
 
+/**
+ * ldpaa_sg_get_bpid() - Get the buffer pool id in SG entry
+ * @sg: the given scatter-gathering object.
+ *
+ * Return the bpid.
+ */
 static inline u16 ldpaa_sg_get_bpid(const struct dpaa_sg_entry *sg)
 {
 	return (u16)(sg->bpid_offset & 0x3FFF);
 }
 
+/**
+ * ldpaa_sg_set_bpid() - Set the buffer pool id in SG entry
+ * @sg: the given scatter-gathering object.
+ * @bpid: the bpid to be set.
+ */
 static inline void ldpaa_sg_set_bpid(struct dpaa_sg_entry *sg, u16 bpid)
 {
 	sg->bpid_offset &= 0xFFFFC000;
 	sg->bpid_offset |= (u32)bpid;
 }
 
+/**
+ * ldpaa_sg_is_final() - Check final bit in SG entry
+ * @sg: the given scatter-gathering object.
+ *
+ * Return bool.
+ */
 static inline bool ldpaa_sg_is_final(const struct dpaa_sg_entry *sg)
 {
 	return !!(sg->bpid_offset >> 31);
 }
 
+/**
+ * ldpaa_sg_set_final() - Set the final bit in SG entry
+ * @sg: the given scatter-gathering object.
+ * @final: the final boolean to be set.
+ */
 static inline void ldpaa_sg_set_final(struct dpaa_sg_entry *sg, bool final)
 {
 	sg->bpid_offset &= 0x7FFFFFFF;
@@ -242,12 +372,15 @@ static inline void ldpaa_sg_le_to_cpu(struct dpaa_sg_entry *sg)
 #define ldpaa_sg_le_to_cpu(sg)
 #endif /* __BIG_ENDIAN */
 
-
-/* When frames are dequeued, the FDs show up inside "dequeue" result structures
+/**
+ * struct ldpaa_dq - the qman result structure
+ *
+ * When frames are dequeued, the FDs show up inside "dequeue" result structures
  * (if at all, not all dequeue results contain valid FDs). This structure type
  * is intentionally defined without internal detail, and the only reason it
  * isn't declared opaquely (without size) is to allow the user to provide
- * suitably-sized (and aligned) memory for these entries. */
+ * suitably-sized (and aligned) memory for these entries.
+ */
 struct ldpaa_dq {
 	uint32_t dont_manipulate_directly[16];
 };
@@ -260,26 +393,78 @@ struct ldpaa_dq {
 #define LDPAA_DQ_STAT_ODPVALID      0x04
 #define LDPAA_DQ_STAT_VOLATILE      0x02
 #define LDPAA_DQ_STAT_EXPIRED       0x01
+/**
+ * ldpaa_dq_flags() - Get the stat field of dequeue response
+ */
 uint32_t ldpaa_dq_flags(const struct ldpaa_dq *);
+
+/**
+ * ldpaa_dq_is_pull() - Check whether the dq response is from a pull
+ * command.
+ * @dq: the dequeue result.
+ *
+ * Return 1 for volatile(pull) dequeue, 0 for static dequeue.
+ */
 static inline int ldpaa_dq_is_pull(const struct ldpaa_dq *dq)
 {
 	return (int)(ldpaa_dq_flags(dq) & LDPAA_DQ_STAT_VOLATILE);
 }
+
+/**
+ * ldpaa_dq_is_pull_complete() - Check whether the pull command is completed.
+ * @dq: the dequeue result.
+ *
+ * Return boolean.
+ */
 static inline int ldpaa_dq_is_pull_complete(
 					const struct ldpaa_dq *dq)
 {
 	return (int)(ldpaa_dq_flags(dq) & LDPAA_DQ_STAT_EXPIRED);
 }
-/* seqnum/odpid are valid only if VALIDFRAME and ODPVALID flags are TRUE */
+
+/**
+ * ldpaa_dq_seqnum() - Get the seqnum field in dequeue response
+ * seqnum is valid only if VALIDFRAME flag is TRUE
+ *
+ * Return seqnum.
+ */
 uint16_t ldpaa_dq_seqnum(const struct ldpaa_dq *);
+/**
+ * ldpaa_dq_odpid() - Get the seqnum field in dequeue response
+ * odpid is valid only if ODPVAILD flag is TRUE.
+ *
+ * Return odpid.
+ */
 uint16_t ldpaa_dq_odpid(const struct ldpaa_dq *);
+/**
+ * ldpaa_dq_fqid() - Get the fqid in dequeue response
+ *
+ * Return fqid.
+ */
 uint32_t ldpaa_dq_fqid(const struct ldpaa_dq *);
+/**
+ * ldpaa_dq_byte_count() - Get the byte count in dequeue response
+ *
+ * Return the byte count remaining in the FQ.
+ */
 uint32_t ldpaa_dq_byte_count(const struct ldpaa_dq *);
+/**
+ * ldpaa_dq_frame_count() - Get the frame count in dequeue response
+ *
+ * Return the frame count remaining in the FQ.
+ */
 uint32_t ldpaa_dq_frame_count(const struct ldpaa_dq *);
-uint32_t ldpaa_dq_fqd_ctx_hi(const struct ldpaa_dq *);
-uint32_t ldpaa_dq_fqd_ctx_lo(const struct ldpaa_dq *);
+/**
+ * ldpaa_dq_fd_ctx() - Get the frame queue context in dequeue response
+ *
+ * Return the frame queue context.
+ */
 uint64_t ldpaa_dq_fqd_ctx(const struct ldpaa_dq *dq);
-/* get the Frame Descriptor */
+/**
+ * ldpaa_dq_fd() - Get the frame descriptor in dequeue response
+ *
+ * Return the frame descriptor.
+ */
 const struct dpaa_fd *ldpaa_dq_fd(const struct ldpaa_dq *);
 
 #endif /* __FSL_DPAA_FD_H */
diff --git a/drivers/staging/fsl-mc/include/fsl_dpaa_io.h b/drivers/staging/fsl-mc/include/fsl_dpaa_io.h
index 5803b02..2bc2e5d 100644
--- a/drivers/staging/fsl-mc/include/fsl_dpaa_io.h
+++ b/drivers/staging/fsl-mc/include/fsl_dpaa_io.h
@@ -40,6 +40,11 @@ struct dpaa_io_store;
 /* DPIO Service management */
 /***************************/
 
+/**
+ * struct dpaa_io_desc - The DPIO descriptor.
+ *
+ * Describe the attributes and features of the DPIO object.
+ */
 struct dpaa_io_desc {
 	/* non-zero iff the DPIO has a channel */
 	int receives_notifications;
@@ -70,80 +75,162 @@ struct dpaa_io_desc {
 	int dpio_id;
 };
 
-/* Activates a "struct dpaa_io" corresponding to the given config of an actual
+/**
+ * dpaa_io_create() - create a dpaa_io object.
+ * @desc: the dpaa_io descriptor
+ *
+ * Activates a "struct dpaa_io" corresponding to the given config of an actual
  * DPIO object. This handle can be used on it's own (like a one-portal "DPIO
  * service") or later be added to a service-type "struct dpaa_io" object. Note,
  * the information required on 'cfg' is copied so the caller is free to do as
- * they wish with the input parameter upon return. */
+ * they wish with the input parameter upon return.
+ *
+ * Return a valid dpaa_io object for success, or NULL for failure.
+ */
 struct dpaa_io *dpaa_io_create(const struct dpaa_io_desc *desc);
 
-/* Create an (initially empty) DPIO service. */
+/**
+ * dpaa_io_create_service() -  Create an (initially empty) DPIO service.
+ *
+ * Return a valid dpaa_io object for success, or NULL for failure.
+ */
 struct dpaa_io *dpaa_io_create_service(void);
 
-/* Or use the driver's own global (and initially empty) DPIO service. This
- * increments the reference count, so don't forget to use dpaa_io_down() for
- * each time this function is called. */
+/**
+ * dpaa_io_default_service() - Use the driver's own global (and initially
+ * empty) DPIO service.
+ *
+ * This increments the reference count, so don't forget to use dpaa_io_down()
+ * for each time this function is called.
+ *
+ * Return a valid dpaa_io object for success, or NULL for failure.
+ */
 struct dpaa_io *dpaa_io_default_service(void);
 
-/* The "struct dpaa_io" type can represent an individual DPIO object (as
+/**
+ * dpaa_io_down() - release the dpaa_io object.
+ * @d: the dpaa_io object to be released.
+ *
+ * The "struct dpaa_io" type can represent an individual DPIO object (as
  * described by "struct dpaa_io_desc") or an instance of a "DPIO service", which
  * can be used to group/encapsulate multiple DPIO objects. In all cases, each
- * handle obtained should be released using this function. */
-void dpaa_io_down(struct dpaa_io *);
-
-/* Add the given DPIO object to the given DPIO service. 'service' must have been
- * created by dpaa_io_create_service() and 'obj' must have been created by
- * dpaa_io_create(). This increments the reference count on the object that
- * 'obj' refers to, so the user could call dpaa_io_down(obj) after this and the
- * object will persist within the service (and will be destroyed when the
- * service is destroyed). */
+ * handle obtained should be released using this function.
+ */
+void dpaa_io_down(struct dpaa_io *d);
+
+/**
+ * dpaa_io_service_add() - Add the given DPIO object to the given DPIO service.
+ * @service: the given DPIO service.
+ * @obj: the given DPIO object.
+ *
+ * 'service' must have been created by dpaa_io_create_service() and 'obj'
+ * must have been created by dpaa_io_create(). This increments the reference
+ * count on the object that 'obj' refers to, so the user could call
+ * dpaa_io_down(obj) after this and the object will persist within the service
+ * (and will be destroyed when the service is destroyed).
+ *
+ * Return 0 for success, or -EINVAL for failure.
+ */
 int dpaa_io_service_add(struct dpaa_io *service, struct dpaa_io *obj);
 
-/* This function will return failure if the given dpaa_io struct represents a
+/**
+ * dpaa_io_get_descriptor() - Get the DPIO descriptor of the given DPIO object.
+ * @obj: the given DPIO object.
+ * @desc: the returned DPIO descriptor.
+ *
+ * This function will return failure if the given dpaa_io struct represents a
  * service rather than an individual DPIO object, otherwise it returns zero and
- * the given 'cfg' structure is filled in. */
+ * the given 'cfg' structure is filled in.
+ *
+ * Return 0 for success, or -EINVAL for failure.
+ */
 int dpaa_io_get_descriptor(struct dpaa_io *obj, struct dpaa_io_desc *desc);
 
-/* Process any notifications and h/w-initiated events that are polling-driven.
- * Obligatory for DPIO objects that have dpaa_io_desc::will_poll non-zero. */
-int dpaa_io_poll(struct dpaa_io *);
+/**
+ * dpaa_io_poll() -  Process any notifications and h/w-initiated events that
+ * are polling-driven.
+ * @obj: the given DPIO object.
+ *
+ * Obligatory for DPIO objects that have dpaa_io_desc::will_poll non-zero.
+ *
+ * Return 0 for success, or -EINVAL for failure.
+ */
+int dpaa_io_poll(struct dpaa_io *obj);
 
-/* Process any notifications and h/w-initiated events that are irq-driven.
- * Obligatory for DPIO objects that have dpaa_io_desc::has_irq non-zero. */
-int dpaa_io_preirq(struct dpaa_io *);
-int dpaa_io_irq(struct dpaa_io *);
+/**
+ * dpaa_io_irq() - Process any notifications and h/w-initiated events that are
+ * irq-driven.
+ * @obj: the given DPIO object.
+ *
+ * Obligatory for DPIO objects that have dpaa_io_desc::has_irq non-zero.
+ *
+ * Return IRQ_HANDLED for success, or -EINVAL for failure.
+ */
+int dpaa_io_irq(struct dpaa_io *obj);
 
-/* If a polling application is going to stop polling for a period of time and
+/**
+ * dpaa_io_pause_poll() - Used to stop polling.
+ * @obj: the given DPIO object.
+ *
+ * If a polling application is going to stop polling for a period of time and
  * supports interrupt processing, it can call this function to convert all
- * processing to IRQ. (Eg. when sleeping.) */
-int dpaa_io_pause_poll(struct dpaa_io *);
+ * processing to IRQ. (Eg. when sleeping.)
+ *
+ * Return -EINVAL.
+ */
+int dpaa_io_pause_poll(struct dpaa_io *obj);
 
-/* And likewise, when polling will resume; */
-int dpaa_io_resume_poll(struct dpaa_io *);
+/**
+ * dpaa_io_resume_poll() - Resume polling
+ * @obj: the given DPIO object.
+ *
+ * Return -EINVAL.
+ */
+int dpaa_io_resume_poll(struct dpaa_io *obj);
 
-/* Get a mask of cpus that the DPIO service can receive notifications on. Note
- * that this is a run-time snapshot. If things like cpu-hotplug are supported in
- * the target system, then an attempt to register notifications for a cpu that
- * appears present in the given mask might fail if that cpu has gone offline in
- * the mean time. */
-void dpaa_io_service_notifications(struct dpaa_io *, cpumask_t *mask);
+/**
+ * dpaa_io_service_notifications() - Get a mask of cpus that the DPIO service
+ * can receive notifications on.
+ * @s: the given DPIO object.
+ * @mask: the mask of cpus.
+ *
+ * Note that this is a run-time snapshot. If things like cpu-hotplug are
+ * supported in the target system, then an attempt to register notifications
+ * for a cpu that appears present in the given mask might fail if that cpu has
+ * gone offline in the mean time.
+ */
+void dpaa_io_service_notifications(struct dpaa_io *s, cpumask_t *mask);
 
-/* Get a mask of cpus that the DPIO service has stash affinity to. */
-void dpaa_io_service_stashing(struct dpaa_io *, cpumask_t *mask);
+/**
+ * dpaa_io_service_stashing - Get a mask of cpus that the DPIO service has stash
+ * affinity to.
+ * @s: the given DPIO object.
+ * @mask: the mask of cpus.
+ */
+void dpaa_io_service_stashing(struct dpaa_io *s, cpumask_t *mask);
 
-/* Return a boolean, whether or not the DPIO service has resources that have no
+/**
+ * dpaa_io_service_nonaffine() - Check the DPIO service's cpu affinity
+ * for stashing.
+ * @s: the given DPIO object.
+ *
+ * Return a boolean, whether or not the DPIO service has resources that have no
  * particular cpu affinity for stashing. (Useful to know if you wish to operate
  * on CPUs that the service has no affinity to, you would choose to use
  * resources that are neutral, rather than affine to a different CPU.) Unlike
  * other service-specific APIs, this one doesn't return an error if it is passed
- * a non-service object. So don't do it. */
-int dpaa_io_service_has_nonaffine(struct dpaa_io *);
+ * a non-service object. So don't do it.
+ */
+int dpaa_io_service_has_nonaffine(struct dpaa_io *s);
 
 /*************************/
 /* Notification handling */
 /*************************/
 
-/* When a FQDAN/CDAN registration is made (eg. by DPNI/DPCON/DPAI code), a
+/**
+ * struct dpaa_io_notification_ctx - The DPIO notification context structure.
+ *
+ * When a FQDAN/CDAN registration is made (eg. by DPNI/DPCON/DPAI code), a
  * context of the following type is used. The caller can embed it within a
  * larger structure in order to add state that is tracked along with the
  * notification (this may be useful when callbacks are invoked that pass this
@@ -192,39 +279,73 @@ struct dpaa_io_notification_ctx {
 	void *dpio_private;
 };
 
-/* Prepare for servicing of FQDAN or CDAN notifications on the given DPIO
- * service. The MC command to attach the caller's DPNI/DPCON/DPAI device to a
+/**
+ * dpaa_io_service_register() - Prepare for servicing of FQDAN or CDAN
+ * notifications on the given DPIO service.
+ * @service: the given DPIO service.
+ * @ctx: the notificaiton context.
+ *
+ * The MC command to attach the caller's DPNI/DPCON/DPAI device to a
  * DPIO object is performed after this function is called. In that way, (a) the
  * DPIO service is "ready" to handle a notification arrival (which might happen
  * before the "attach" command to MC has returned control of execution back to
  * the caller), and (b) the DPIO service can provide back to the caller the
  * 'dpio_id' and 'qman64' parameters that it should pass along in the MC command
  * in order for the DPNI/DPCON/DPAI resources to be configured to produce the
- * right notification fields to the DPIO service. */
+ * right notification fields to the DPIO service.
+ *
+ * Return 0 for success, or -ENODEV for failure.
+ */
 int dpaa_io_service_register(struct dpaa_io *service,
 			     struct dpaa_io_notification_ctx *ctx);
 
-/* The opposite of 'register'. Whereas 'register' should be called *before*
+/**
+ * dpaa_io_service_deregister - The opposite of 'register'.
+ * @service: the given DPIO service.
+ * @ctx: the notificaiton context.
+ *
+ * Note that 'register' should be called *before*
  * making the MC call to attach the notification-producing device to the
  * notification-handling DPIO service, the 'unregister' function should be
  * called *after* making the MC call to detach the notification-producing
- * device. */
+ * device.
+ *
+ * Return 0 for success.
+ */
 int dpaa_io_service_deregister(struct dpaa_io *service,
 			       struct dpaa_io_notification_ctx *ctx);
 
-/* Once a FQDAN/CDAN has been produced, the corresponding FQ/channel is
+/**
+ * dpaa_io_service_rearm() - Rearm the notification for the given DPIO service.
+ * @service: the given DPIO service.
+ * @ctx: the notificaiton context.
+ *
+ * Once a FQDAN/CDAN has been produced, the corresponding FQ/channel is
  * considered "disarmed". Ie. the user can issue pull dequeue operations on that
  * traffic source for as long as it likes. Eventually it may wish to "rearm"
  * that source to allow it to produce another FQDAN/CDAN, that's what this
- * function achieves. */
+ * function achieves.
+ *
+ * Return 0 for success, or -ENODEV if no service available, -EBUSY/-EIO for not
+ * being able to implement the rearm the notifiaton due to setting CDAN or
+ * scheduling fq.
+ */
 int dpaa_io_service_rearm(struct dpaa_io *service,
 			  struct dpaa_io_notification_ctx *ctx);
 
-/* Like 'dpaa_io_service_get_persistent()' (see below), except that the returned
+/**
+ * dpaa_io_from_registration() - Get the DPIO object from the given notification
+ * context.
+ * @ctx: the given notifiation context.
+ * @ret: the returned DPIO object.
+ *
+ * Like 'dpaa_io_service_get_persistent()' (see below), except that the returned
  * handle is not selected based on a 'cpu' argument, but is the same DPIO object
  * that the given notification context is registered against. The returned
  * handle carries a reference count, so a corresponding dpaa_io_down() would be
  * required when the reference is no longer needed.
+ *
+ * Return 0 for success, or -EINVAL for failure.
  */
 int dpaa_io_from_registration(struct dpaa_io_notification_ctx *ctx,
 			      struct dpaa_io **ret);
@@ -233,7 +354,14 @@ int dpaa_io_from_registration(struct dpaa_io_notification_ctx *ctx,
 /* General usage of DPIO services */
 /**********************************/
 
-/* The various DPIO interfaces can accept a "struct dpaa_io" handle that refers
+/**
+ * dpaa_io_service_get_persistent() - Get the DPIO resource from the given
+ * notification context and cpu.
+ * @ctx: the given notifiation context.
+ * @cpu: the cpu that the DPIO resource has stashing affinity to.
+ * @ret: the returned DPIO resource.
+ *
+ * The various DPIO interfaces can accept a "struct dpaa_io" handle that refers
  * to an individual DPIO object or to a whole service. In the latter case, an
  * internal choice is made for each operation. This function supports the former
  * case, by selecting an individual DPIO object *from* the service in order for
@@ -241,7 +369,10 @@ int dpaa_io_from_registration(struct dpaa_io_notification_ctx *ctx,
  * also carries a reference count, so a corresponding dpaa_io_down() would be
  * required when the reference is no longer needed. Note, a parameter of -1 for
  * 'cpu' will select a DPIO resource that has no particular stashing affinity to
- * any cpu (eg. one that stashes to platform cache). */
+ * any cpu (eg. one that stashes to platform cache).
+ *
+ * Return 0 for success, or -ENODEV for failure.
+ */
 int dpaa_io_service_get_persistent(struct dpaa_io *service, int cpu,
 				   struct dpaa_io **ret);
 
@@ -249,23 +380,44 @@ int dpaa_io_service_get_persistent(struct dpaa_io *service, int cpu,
 /* Pull dequeues */
 /*****************/
 
-/* To support DCA/order-preservation, it will be necessary to support an
+/**
+ * dpaa_io_service_pull_fq()
+ * dpaa_io_service_pull_channel() - pull dequeue functions from fq or channel.
+ * @d: the given DPIO service.
+ * @fqid: the given frame queue id.
+ * @channelid: the given channel id.
+ * @s: the dpaa_io_store object for the result.
+ *
+ * To support DCA/order-preservation, it will be necessary to support an
  * alternative form, because they must ultimately dequeue to DQRR rather than a
  * user-supplied dpaa_io_store. Furthermore, those dequeue results will
  * "complete" using a caller-provided callback (from DQRR processing) rather
  * than the caller explicitly looking at their dpaa_io_store for results. Eg.
  * the alternative form will likely take a callback parameter rather than a
- * store parameter. Ignoring it for now to keep the picture clearer. */
-int dpaa_io_service_pull_fq(struct dpaa_io *, uint32_t fqid,
-			    struct dpaa_io_store *);
-int dpaa_io_service_pull_channel(struct dpaa_io *, uint32_t channelid,
-				 struct dpaa_io_store *);
+ * store parameter. Ignoring it for now to keep the picture clearer.
+ *
+ * Return 0 for success, or error code for failure.
+ */
+int dpaa_io_service_pull_fq(struct dpaa_io *d, uint32_t fqid,
+			    struct dpaa_io_store *s);
+int dpaa_io_service_pull_channel(struct dpaa_io *d, uint32_t channelid,
+				 struct dpaa_io_store *s);
 
 /************/
 /* Enqueues */
 /************/
 
-/* This definition bypasses some features that are not expected to be priority-1
+/**
+ * dpaa_io_service_enqueue_fq()
+ * dpaa_io_service_enqueue_qd() - The enqueue functions to FQ or QD
+ * @d: the given DPIO service.
+ * @fqid: the given frame queue id.
+ * @qdid: the given queuing destination id.
+ * @prio: the given queuing priority.
+ * @qdbin: the given queuing destination bin.
+ * @fd: the frame descriptor which is enqueued.
+ *
+ * This definition bypasses some features that are not expected to be priority-1
  * features, and may not be needed at all via current assumptions (QBMan's
  * feature set is wider than the MC object model is intendeding to support,
  * initially at least). Plus, keeping them out (for now) keeps the API view
@@ -274,11 +426,14 @@ int dpaa_io_service_pull_channel(struct dpaa_io *, uint32_t channelid,
  *  - ORP
  *  - DCA/order-preservation (see note in "pull dequeues")
  *  - enqueue consumption interrupts
+ *
+ * Return 0 for successful enqueue, or -EBUSY if the enqueue ring is not ready,
+ * or -ENODEV if there is no dpio service.
  */
-int dpaa_io_service_enqueue_fq(struct dpaa_io *,
+int dpaa_io_service_enqueue_fq(struct dpaa_io *d,
 			       uint32_t fqid,
 			       const struct dpaa_fd *fd);
-int dpaa_io_service_enqueue_qd(struct dpaa_io *,
+int dpaa_io_service_enqueue_qd(struct dpaa_io *d,
 			       uint32_t qdid, uint8_t prio, uint16_t qdbin,
 			       const struct dpaa_fd *fd);
 
@@ -286,16 +441,31 @@ int dpaa_io_service_enqueue_qd(struct dpaa_io *,
 /* Buffer handling */
 /*******************/
 
-/* Release buffers to a buffer pool */
-int dpaa_io_service_release(struct dpaa_io *,
+/**
+ * dpaa_io_service_release() - Release buffers to a buffer pool.
+ * @d: the given DPIO object.
+ * @bpid: the buffer pool id.
+ * @buffers: the buffers to be released.
+ * @num_buffers: the number of the buffers to be released.
+ *
+ * Return 0 for success, and negative error code for failure.
+ */
+int dpaa_io_service_release(struct dpaa_io *d,
 			    uint32_t bpid,
 			    const uint64_t *buffers,
 			    unsigned int num_buffers);
 
-/* Acquire buffers from a buffer pool, returns a negative error code if the
- * command failed, otherwise it returns the number of buffers acquired, which
- * may be less than the number requested. Eg. if the buffer pool is empty, this
- * will return zero. */
+/**
+ * dpaa_io_service_acquire() - Acquire buffers from a buffer pool.
+ * @d: the given DPIO object.
+ * @bpid: the buffer pool id.
+ * @buffers: the buffer addresses for acquired buffers.
+ * @num_buffers: the expected number of the buffers to acquire.
+ *
+ * Return a negative error code if the command failed, otherwise it returns
+ * the number of buffers acquired, which may be less than the number requested.
+ * Eg. if the buffer pool is empty, this will return zero.
+ */
 int dpaa_io_service_acquire(struct dpaa_io *,
 			    uint32_t bpid,
 			    uint64_t *buffers,
@@ -312,18 +482,34 @@ int dpaa_io_service_acquire(struct dpaa_io *,
  * clearing/rewriting of those memory locations between uses.
  */
 
-/* Constructor/destructor - max_frames must be <= 16. The user provides the
+/**
+ * dpaa_io_store_create()
+ * dpaa_io_store_destroy() - Create/destroy the dma memory storage for dequeue
+ * result.
+ * @max_frames: the maximum number of dequeued result for frames, must be <= 16.
+ * @dev: the device to allow mapping/unmapping the DMAable region.
+ * @s: the storage memory to be destroyed.
+ *
+ * Constructor/destructor - max_frames must be <= 16. The user provides the
  * device struct to allow mapping/unmapping of the DMAable region. Area for
  * storage will be allocated during create. The size of this storage is
  * "max_frames*sizeof(struct ldpaa_dq)". The 'dpaa_io_store' returned is a
  * wrapper structure allocated within the DPIO code, which owns and manages
  * allocated store.
+ *
+ * Return dpaa_io_store struct for successfuly created storage memory, or NULL
+ * if not getting the stroage for dequeue result in create API.
  */
 struct dpaa_io_store *dpaa_io_store_create(unsigned int max_frames,
 					   struct device *dev);
-void dpaa_io_store_destroy(struct dpaa_io_store *);
+void dpaa_io_store_destroy(struct dpaa_io_store *s);
 
-/* Once dpaa_io_store has been passed to a function that performs dequeues to
+/**
+ * dpaa_io_store_next() - Determine when the next dequeue result is available.
+ * @s: the dpaa_io_store object.
+ * @is_last: indicate whether this is the last frame in the pull command.
+ *
+ * Once dpaa_io_store has been passed to a function that performs dequeues to
  * it, like dpaa_ni_rx(), this function can be used to determine when the next
  * frame result is available. Once this function returns non-NULL, a subsequent
  * call to it will try to find the *next* dequeue result.
@@ -332,17 +518,36 @@ void dpaa_io_store_destroy(struct dpaa_io_store *);
  * was empty, then this function will return NULL rather than expect the caller
  * to always check for this on his own side. As such, "is_last" can be used to
  * differentiate between "end-of-empty-dequeue" and "still-waiting".
+ *
+ * Return dequeue result for a valid dequeue result, or NULL for empty dequeue.
  */
-struct ldpaa_dq *dpaa_io_store_next(struct dpaa_io_store *, int *is_last);
+struct ldpaa_dq *dpaa_io_store_next(struct dpaa_io_store *s, int *is_last);
 
 #ifdef CONFIG_FSL_QBMAN_DEBUG
-/* Knowing the FQ count at run-time can be useful in debugging situations.
+/**
+ * dpaa_io_query_fq_count() - Get the frame and byte count for a given fq.
+ * @d: the given DPIO object.
+ * @fqid: the id of frame queue to be queried.
+ * @fcnt: the queried frame count.
+ * @bcnt: the queried byte count.
+ *
+ * Knowing the FQ count at run-time can be useful in debugging situations.
  * The instantaneous frame- and byte-count are hereby returned.
+ *
+ * Return 0 for a successful query, and negative error code if query fails.
  */
-int dpaa_io_query_fq_count(struct dpaa_io *s, uint32_t fqid,
+int dpaa_io_query_fq_count(struct dpaa_io *d, uint32_t fqid,
 			   uint32_t *fcnt, uint32_t *bcnt);
 
-/* Query the number of buffers currenty in a buffer pool */
+/**
+ * dpaa_io_query_bp_count() - Query the number of buffers currenty in a
+ * buffer pool.
+ * @d: the given DPIO object.
+ * @bpid: the index of buffer pool to be queried.
+ * @num: the queried number of buffers in the buffer pool.
+ *
+ * Return 0 for a sucessful query, and negative error code if query fails.
+ */
 int dpaa_io_query_bp_count(struct dpaa_io *d, uint32_t bpid,
 			   uint32_t *num);
 #endif
-- 
2.8.1

