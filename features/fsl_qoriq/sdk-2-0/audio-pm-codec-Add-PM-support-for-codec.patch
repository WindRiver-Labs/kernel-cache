From 030cdfcc5e6fb2ffa420b627d7568c2b8f3ed251 Mon Sep 17 00:00:00 2001
From: Alison Wang <b18965@freescale.com>
Date: Fri, 26 Feb 2016 11:05:20 +0800
Subject: [PATCH 1075/1429] audio: pm: codec: Add PM support for codec

As codec SGTL5000 will be reset during deep sleep, PM support
needs to be added.

Signed-off-by: Alison Wang <alison.wang@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 sound/soc/codecs/sgtl5000.c |   56 +++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 56 insertions(+), 0 deletions(-)

diff --git a/sound/soc/codecs/sgtl5000.c b/sound/soc/codecs/sgtl5000.c
index 3a29c0a..7919f66 100644
--- a/sound/soc/codecs/sgtl5000.c
+++ b/sound/soc/codecs/sgtl5000.c
@@ -1554,6 +1554,61 @@ static const struct i2c_device_id sgtl5000_id[] = {
 
 MODULE_DEVICE_TABLE(i2c, sgtl5000_id);
 
+#ifdef CONFIG_PM
+static int sgtl5000_pm_suspend(struct device *dev)
+{
+	struct sgtl5000_priv *sgtl5000 = dev_get_drvdata(dev);
+
+	regcache_cache_only(sgtl5000->regmap, true);
+
+	regulator_bulk_disable(ARRAY_SIZE(sgtl5000->supplies),
+			       sgtl5000->supplies);
+	return 0;
+}
+
+static int sgtl5000_pm_resume(struct device *dev)
+{
+	struct sgtl5000_priv *sgtl5000 = dev_get_drvdata(dev);
+	int ret;
+	u32 reg;
+
+	ret = regulator_bulk_enable(ARRAY_SIZE(sgtl5000->supplies),
+				    sgtl5000->supplies);
+	if (ret)
+		return ret;
+
+	regcache_cache_only(sgtl5000->regmap, false);
+	regcache_sync(sgtl5000->regmap);
+
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_ANA_CTRL,
+		     SGTL5000_HP_ZCD_EN |
+		     SGTL5000_ADC_ZCD_EN);
+
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_ANA_HP_CTRL, 0x4040);
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_DAC_VOL, 0x6c6c);
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_ANA_ADC_CTRL, 0xf0cc);
+	udelay(1000);
+
+	/* Workaround to rewrite these registers again */
+	regmap_read(sgtl5000->regmap, SGTL5000_CHIP_PLL_CTRL, &reg);
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_PLL_CTRL, reg);
+	regmap_read(sgtl5000->regmap, SGTL5000_CHIP_CLK_TOP_CTRL, &reg);
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_CLK_TOP_CTRL, reg);
+
+	regmap_read(sgtl5000->regmap, SGTL5000_CHIP_ANA_POWER, &reg);
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_ANA_POWER, reg);
+	regmap_read(sgtl5000->regmap, SGTL5000_CHIP_CLK_CTRL, &reg);
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_CLK_CTRL, reg);
+	udelay(1000);
+	regmap_read(sgtl5000->regmap, SGTL5000_CHIP_I2S_CTRL, &reg);
+	regmap_write(sgtl5000->regmap, SGTL5000_CHIP_I2S_CTRL, reg);
+
+	return 0;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(sgtl5000_pm, sgtl5000_pm_suspend, sgtl5000_pm_resume);
+
 static const struct of_device_id sgtl5000_dt_ids[] = {
 	{ .compatible = "fsl,sgtl5000", },
 	{ /* sentinel */ }
@@ -1565,6 +1620,7 @@ static struct i2c_driver sgtl5000_i2c_driver = {
 		   .name = "sgtl5000",
 		   .owner = THIS_MODULE,
 		   .of_match_table = sgtl5000_dt_ids,
+		   .pm = &sgtl5000_pm,
 		   },
 	.probe = sgtl5000_i2c_probe,
 	.remove = sgtl5000_i2c_remove,
-- 
1.7.5.4

