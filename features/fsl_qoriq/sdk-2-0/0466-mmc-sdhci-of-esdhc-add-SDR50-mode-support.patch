From e94c37fdec3a12055233f052eb66ce47ca20f6c7 Mon Sep 17 00:00:00 2001
From: Yangbo Lu <yangbo.lu@nxp.com>
Date: Wed, 27 Jan 2016 18:14:12 +0800
Subject: [PATCH 0466/1383] mmc: sdhci-of-esdhc: add SDR50 mode support

Add SDR50 mode support for Freescale SD/MMC legacy adapter
card. To switch signal voltage for this kind adapter card,
it's needed to configure a global utilities register
SCFG_SDHCIOVSELCR and SDHC_VS signal. This patch also fixes
two issues below.
1. The eSDHC has a different Present State Register with standard
SD host controller of SD spec. Fix this.
2. According to SD spec, it's needed to set bus width once the
signal voltage is switched to 1.8v. Add bus width setting to fix
it.

Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/mmc/core/sd.c             |  9 ++++++++
 drivers/mmc/host/sdhci-esdhc.h    |  2 ++
 drivers/mmc/host/sdhci-of-esdhc.c | 48 ++++++++++++++++++++++++++++++++++++++-
 3 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/drivers/mmc/core/sd.c b/drivers/mmc/core/sd.c
index b61ad22..b569b74 100644
--- a/drivers/mmc/core/sd.c
+++ b/drivers/mmc/core/sd.c
@@ -949,6 +949,15 @@ static int mmc_sd_init_card(struct mmc_host *host, u32 ocr,
 			goto free_card;
 	}
 
+	/* If the signal voltage was switched to 1.8v,
+	 * it's needed to set 4bit width for card and host.
+	 */
+	if (host->ios.signal_voltage == MMC_SIGNAL_VOLTAGE_180) {
+		if (mmc_app_set_bus_width(card, MMC_BUS_WIDTH_4))
+			goto free_card;
+		mmc_set_bus_width(card->host, MMC_BUS_WIDTH_4);
+	}
+
 	err = mmc_sd_setup_card(host, card, oldcard != NULL);
 	if (err)
 		goto free_card;
diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index 3c68dd9..da705af 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -38,6 +38,8 @@
 
 #define ESDHC_PRESENT_STATE	0x24
 #define ESDHC_CLOCK_STABLE	0x00000008
+#define ESDHC_DLSL_MASK		0x0f000000
+#define ESDHC_CLSL_MASK		0x00800000
 
 #define ESDHC_CAPABILITIES_1		0x114
 #define ESDHC_SPEED_MODE_MASK		0x00000007
diff --git a/drivers/mmc/host/sdhci-of-esdhc.c b/drivers/mmc/host/sdhci-of-esdhc.c
index c9e5f0d..7633c91 100644
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@ -18,6 +18,7 @@
 #include <linux/of.h>
 #include <linux/delay.h>
 #include <linux/module.h>
+#include <linux/of_address.h>
 #include <linux/fsl/svr.h>
 #include <linux/fsl/guts.h>
 #include <linux/mmc/host.h>
@@ -36,6 +37,8 @@
 #define ESDHC_ADAPTER_TYPE_SD		0x6	/* SD Card Rev2.0 3.0 */
 #define ESDHC_NO_ADAPTER		0x7	/* No Card is Present*/
 
+static void esdhc_clock_control(struct sdhci_host *host, bool enable);
+
 struct sdhci_esdhc {
 	u8 vendor_ver;
 	u8 spec_ver;
@@ -65,6 +68,8 @@ static u32 esdhc_readl_fixup(struct sdhci_host *host,
 {
 	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
 	struct sdhci_esdhc *esdhc = pltfm_host->priv;
+	u32 clsl;
+	u32 dlsl;
 	u32 ret;
 
 	/*
@@ -88,6 +93,14 @@ static u32 esdhc_readl_fixup(struct sdhci_host *host,
 			if (value & ESDHC_SPEED_MODE_SDR104)
 				host->mmc->caps2 |= MMC_CAP2_HS200;
 			break;
+		case ESDHC_ADAPTER_TYPE_SDMMC_LEGACY:
+			if (value & ESDHC_SPEED_MODE_MASK) {
+				/* If it exists UHS-I support, enable SDR50 */
+				host->mmc->caps |= (MMC_CAP_UHS_SDR50 |
+						    MMC_CAP_UHS_SDR25 |
+						    MMC_CAP_UHS_SDR12);
+			}
+			break;
 		case ESDHC_ADAPTER_TYPE_EMMC44:
 			if (value & ESDHC_SPEED_MODE_DDR50) {
 				ret = value & ESDHC_SPEED_MODE_DDR50_SEL;
@@ -101,6 +114,14 @@ static u32 esdhc_readl_fixup(struct sdhci_host *host,
 		return ret;
 	}
 
+	if (spec_reg == SDHCI_PRESENT_STATE) {
+		clsl = value & ESDHC_CLSL_MASK;
+		dlsl = value & ESDHC_DLSL_MASK;
+		ret = value &
+		      (~((ESDHC_CLSL_MASK << 1) | (ESDHC_DLSL_MASK >> 4)));
+		ret = value | ((clsl << 1) | (dlsl >> 4));
+		return ret;
+	}
 	ret = value;
 	return ret;
 }
@@ -555,8 +576,10 @@ static void esdhc_of_set_clock(struct sdhci_host *host, unsigned int clock)
 
 	host->mmc->actual_clock = 0;
 
-	if (clock == 0)
+	if (clock == 0) {
+		esdhc_clock_control(host, false);
 		return;
+	}
 
 	/* Workaround to start pre_div at 2 for VNN < VENDOR_V_23 */
 	if (esdhc->vendor_ver < VENDOR_V_23)
@@ -812,9 +835,20 @@ static void esdhc_set_uhs_signaling(struct sdhci_host *host, unsigned int uhs)
 		sdhci_writew(host, ctrl_2, SDHCI_HOST_CONTROL2);
 }
 
+static const struct of_device_id scfg_device_ids[] = {
+	{ .compatible = "fsl,t1040-scfg", },
+	{}
+};
+#define SCFG_SDHCIOVSELCR	0x408
+#define SDHCIOVSELCR_TGLEN	0x80000000
+#define SDHCIOVSELCR_SDHC_VS	0x00000001
+
 void esdhc_signal_voltage_switch(struct sdhci_host *host,
 				 unsigned char signal_voltage)
 {
+	struct device_node *scfg_node;
+	void __iomem *scfg_base = NULL;
+	u32 scfg_sdhciovselcr;
 	u32 val;
 
 	val = sdhci_readl(host, ESDHC_PROCTL);
@@ -825,6 +859,18 @@ void esdhc_signal_voltage_switch(struct sdhci_host *host,
 		sdhci_writel(host, val, ESDHC_PROCTL);
 		break;
 	case MMC_SIGNAL_VOLTAGE_180:
+		scfg_node = of_find_matching_node(NULL, scfg_device_ids);
+		if (scfg_node) {
+			scfg_base = of_iomap(scfg_node, 0);
+			of_node_put(scfg_node);
+		}
+		if (scfg_base) {
+			scfg_sdhciovselcr = SDHCIOVSELCR_TGLEN |
+					    SDHCIOVSELCR_SDHC_VS;
+			iowrite32be(scfg_sdhciovselcr,
+				scfg_base + SCFG_SDHCIOVSELCR);
+			iounmap(scfg_base);
+		}
 		val |= ESDHC_VOLT_SEL;
 		sdhci_writel(host, val, ESDHC_PROCTL);
 		break;
-- 
2.8.1

