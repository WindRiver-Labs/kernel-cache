From defbd00ab9cb7dca98d7351cf94c9696016c7045 Mon Sep 17 00:00:00 2001
From: Ahmed Mansour <Ahmed.Mansour@freescale.com>
Date: Wed, 16 Mar 2016 10:16:28 -0400
Subject: [PATCH 1218/1429] bman: fix stockpile logic

Array overruns had been observed in the stockpile logic, and upon
further examination the code appears poorly structured in addition to
being buggy (mea culpa).

Signed-off-by: Geoff Thorpe <Geoff.Thorpe@freescale.com>

Signed-off-by: Ahmed Mansour <Ahmed.Mansour@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl_qbman/bman_high.c |  137 ++++++++++++++++++++-------------
 1 files changed, 84 insertions(+), 53 deletions(-)

diff --git a/drivers/staging/fsl_qbman/bman_high.c b/drivers/staging/fsl_qbman/bman_high.c
index 2ece0f3..254987f 100644
--- a/drivers/staging/fsl_qbman/bman_high.c
+++ b/drivers/staging/fsl_qbman/bman_high.c
@@ -895,7 +895,7 @@ static inline int __bman_release(struct bman_pool *pool,
 int bman_release(struct bman_pool *pool, const struct bm_buffer *bufs, u8 num,
 			u32 flags)
 {
-	int ret = 0;
+	int ret;
 #ifdef CONFIG_FSL_DPA_CHECKING
 	if (!num || (num > 8))
 		return -EINVAL;
@@ -911,38 +911,50 @@ int bman_release(struct bman_pool *pool, const struct bm_buffer *bufs, u8 num,
 		panic("only one instance of bman_released/acquired allowed");
 	}
 #endif
-	/* This needs some explanation. Adding the given buffers may take the
-	 * stockpile over the threshold, but in fact the stockpile may already
-	 * *be* over the threshold if a previous release-to-hw attempt had
-	 * failed. So we have 3 cases to cover;
-	 *   1. we add to the stockpile and don't hit the threshold,
-	 *   2. we add to the stockpile, hit the threshold and release-to-hw,
-	 *   3. we have to release-to-hw before adding to the stockpile
-	 *      (not enough room in the stockpile for case 2).
-	 * Our constraints on thresholds guarantee that in case 3, there must be
-	 * at least 8 bufs already in the stockpile, so all release-to-hw ops
-	 * are for 8 bufs. Despite all this, the API must indicate whether the
-	 * given buffers were taken off the caller's hands, irrespective of
-	 * whether a release-to-hw was attempted. */
-	while (num) {
-		/* Add buffers to stockpile if they fit */
-		if ((pool->sp_fill + num) < BMAN_STOCKPILE_SZ) {
-			copy_words(pool->sp + pool->sp_fill, bufs,
-				sizeof(struct bm_buffer) * num);
-			pool->sp_fill += num;
-			num = 0; /* --> will return success no matter what */
+	/* Two movements of buffers are possible, and can occur in either order.
+	 * A: moving buffers from the caller to the stockpile.
+	 * B: moving buffers from the stockpile to hardware.
+	 * Order 1: if there is already enough space in the stockpile for A
+	 * then we want to do A first, and only do B if we trigger the
+	 * stockpile-high threshold.
+	 * Order 2: if there is not enough space in the stockpile for A, then
+	 * we want to do B first, then do A if B had succeeded. However in this
+	 * case B is dependent on how many buffers the user needs to release,
+	 * not the stockpile-high threshold.
+	 * Due to the different handling of B between the two cases, putting A
+	 * and B in a while() loop would require quite obscure logic, so handle
+	 * the different sequences explicitly. */
+	if ((pool->sp_fill + num) <= BMAN_STOCKPILE_SZ) {
+		/* Order 1: do A */
+		copy_words(pool->sp + pool->sp_fill, bufs,
+			   sizeof(struct bm_buffer) * num);
+		pool->sp_fill += num;
+		/* do B relative to STOCKPILE_HIGH */
+		while (pool->sp_fill >= BMAN_STOCKPILE_HIGH) {
+			ret = __bman_release(pool,
+					     pool->sp + (pool->sp_fill - 8), 8,
+					     flags);
+			if (ret >= 0)
+				pool->sp_fill -= 8;
 		}
-		/* Do hw op if hitting the high-water threshold */
-		if ((pool->sp_fill + num) >= BMAN_STOCKPILE_HIGH) {
+	} else {
+		/* Order 2: do B relative to 'num' */
+		do {
 			ret = __bman_release(pool,
-				pool->sp + (pool->sp_fill - 8), 8, flags);
-			if (ret) {
-				ret = (num ? ret : 0);
+					     pool->sp + (pool->sp_fill - 8), 8,
+					     flags);
+			if (ret < 0)
+				/* failure */
 				goto release_done;
-			}
 			pool->sp_fill -= 8;
-		}
+		} while ((pool->sp_fill + num) > BMAN_STOCKPILE_SZ);
+		/* do A */
+		copy_words(pool->sp + pool->sp_fill, bufs,
+			   sizeof(struct bm_buffer) * num);
+		pool->sp_fill += num;
 	}
+	/* success */
+	ret = 0;
 release_done:
 #ifdef CONFIG_FSL_DPA_CHECKING
 	atomic_inc(&pool->in_use);
@@ -983,7 +995,7 @@ static inline int __bman_acquire(struct bman_pool *pool, struct bm_buffer *bufs,
 int bman_acquire(struct bman_pool *pool, struct bm_buffer *bufs, u8 num,
 			u32 flags)
 {
-	int ret = 0;
+	int ret;
 #ifdef CONFIG_FSL_DPA_CHECKING
 	if (!num || (num > 8))
 		return -EINVAL;
@@ -999,33 +1011,52 @@ int bman_acquire(struct bman_pool *pool, struct bm_buffer *bufs, u8 num,
 		panic("only one instance of bman_released/acquired allowed");
 	}
 #endif
-	/* Only need a h/w op if we'll hit the low-water thresh */
-	if (!(flags & BMAN_ACQUIRE_FLAG_STOCKPILE) &&
-			(pool->sp_fill <= (BMAN_STOCKPILE_LOW + num))) {
-		/* refill stockpile with max amount, but if max amount
-		 * isn't available, try amount the user wants */
-		int bufcount = 8;
-		ret = __bman_acquire(pool, pool->sp + pool->sp_fill, bufcount);
-		if (ret < 0 && bufcount != num) {
-			bufcount = num;
-			/* Maybe buffer pool has less than 8 */
-			ret = __bman_acquire(pool, pool->sp + pool->sp_fill,
-						bufcount);
+	/* Two movements of buffers are possible, and can occur in either order.
+	 * A: moving buffers from stockpile to the caller.
+	 * B: moving buffers from hardware to the stockpile.
+	 * Order 1: if there are already enough buffers in the stockpile for A
+	 * then we want to do A first, and only do B if we trigger the
+	 * stockpile-low threshold.
+	 * Order 2: if there are not enough buffers in the stockpile for A,
+	 * then we want to do B first, then do A if B had succeeded. However in
+	 * this case B is dependent on how many buffers the user needs, not the
+	 * stockpile-low threshold.
+	 * Due to the different handling of B between the two cases, putting A
+	 * and B in a while() loop would require quite obscure logic, so handle
+	 * the different sequences explicitly. */
+	if (num <= pool->sp_fill) {
+		/* Order 1: do A */
+		copy_words(bufs, pool->sp + (pool->sp_fill - num),
+			   sizeof(struct bm_buffer) * num);
+		pool->sp_fill -= num;
+		/* do B relative to STOCKPILE_LOW */
+		while (pool->sp_fill <= BMAN_STOCKPILE_LOW) {
+			ret = __bman_acquire(pool, pool->sp + pool->sp_fill, 8);
+			if (ret < 0)
+				ret = __bman_acquire(pool,
+						pool->sp + pool->sp_fill, 1);
+			if (ret < 0)
+				break;
+			pool->sp_fill += ret;
 		}
-		if (ret < 0)
-			goto hw_starved;
-		DPA_ASSERT(ret == bufcount);
-		pool->sp_fill += bufcount;
 	} else {
-hw_starved:
-		if (pool->sp_fill < num) {
-			ret = -ENOMEM;
-			goto acquire_done;
-		}
+		/* Order 2: do B relative to 'num' */
+		do {
+			ret = __bman_acquire(pool, pool->sp + pool->sp_fill, 8);
+			if (ret < 0)
+				ret = __bman_acquire(pool,
+						pool->sp + pool->sp_fill, 1);
+			if (ret < 0)
+				/* failure */
+				goto acquire_done;
+			pool->sp_fill += ret;
+		} while (pool->sp_fill < num);
+		/* do A */
+		copy_words(bufs, pool->sp + (pool->sp_fill - num),
+			   sizeof(struct bm_buffer) * num);
+		pool->sp_fill -= num;
 	}
-	copy_words(bufs, pool->sp + (pool->sp_fill - num),
-		sizeof(struct bm_buffer) * num);
-	pool->sp_fill -= num;
+	/* success */
 	ret = num;
 acquire_done:
 #ifdef CONFIG_FSL_DPA_CHECKING
-- 
1.7.5.4

