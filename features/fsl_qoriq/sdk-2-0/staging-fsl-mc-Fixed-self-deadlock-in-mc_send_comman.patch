From 58291b6903f5fbdd128b479c31f8bf3e1e2b8b2d Mon Sep 17 00:00:00 2001
From: "J. German Rivera" <German.Rivera@freescale.com>
Date: Tue, 7 Jul 2015 23:48:12 -0500
Subject: [PATCH 0497/1429] staging: fsl-mc: Fixed self-deadlock in
 mc_send_command()

If mc_send_command() is invoked with an atomic DPMCP from
non-atomic context a self-deadlock can happen if this
mc_send_command() call is interrupted by an IRQ handler
that calls mc_send_conmmand() with the same atomic DPMCP.
This is the case of the dpmcp_close() call in
fsl_mc_io_unset_dpmcp() (non-atomic context) and the
dpmcp_clear_irq_status() call in the dpmcp_irq0_handler()
ISR.

Signed-off-by: J. German Rivera <German.Rivera@freescale.com>
Change-Id: Ic00349d5d875e87c1f17d6782d324a77ac0fb357
Reviewed-on: http://git.am.freescale.net:8181/39386
Tested-by: Review Code-CDREVIEW <CDREVIEW@freescale.com>
Reviewed-by: Stuart Yoder <stuart.yoder@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-mc/bus/mc-sys.c |    5 +++--
 1 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/mc-sys.c b/drivers/staging/fsl-mc/bus/mc-sys.c
index b50a752..8c4c993 100644
--- a/drivers/staging/fsl-mc/bus/mc-sys.c
+++ b/drivers/staging/fsl-mc/bus/mc-sys.c
@@ -754,6 +754,7 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 {
 	int error;
 	enum mc_cmd_status status;
+	unsigned long irq_flags = 0;
 	bool dpmcp_completion_intr_disabled =
 		(MC_CMD_HDR_READ_FLAGS(cmd->header) & MC_CMD_FLAG_INTR_DIS);
 
@@ -763,7 +764,7 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 		return -EINVAL;
 
 	if (mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)
-		spin_lock(&mc_io->spinlock);
+		spin_lock_irqsave(&mc_io->spinlock, irq_flags);
 	else
 		mutex_lock(&mc_io->mutex);
 
@@ -801,7 +802,7 @@ int mc_send_command(struct fsl_mc_io *mc_io, struct mc_command *cmd)
 
 common_exit:
 	if (mc_io->flags & FSL_MC_IO_ATOMIC_CONTEXT_PORTAL)
-		spin_unlock(&mc_io->spinlock);
+		spin_unlock_irqrestore(&mc_io->spinlock, irq_flags);
 	else
 		mutex_unlock(&mc_io->mutex);
 
-- 
1.7.5.4

