From ed4dfbe74b154f7b5a423c46141889737a9e7869 Mon Sep 17 00:00:00 2001
From: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
Date: Wed, 28 Oct 2015 18:09:33 +0200
Subject: [PATCH 0821/1429] fsl-dpaa2: mac: Fix error paths at probe

Merge error condition checks. Add error codes to the early exit paths.
Fix swapped goto labels.

Signed-off-by: Bogdan Hamciuc <bogdan.hamciuc@freescale.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/staging/fsl-dpaa2/mac/mac.c |   32 +++++++++++++++-----------------
 1 files changed, 15 insertions(+), 17 deletions(-)

diff --git a/drivers/staging/fsl-dpaa2/mac/mac.c b/drivers/staging/fsl-dpaa2/mac/mac.c
index 3595df9..e30f4ab 100644
--- a/drivers/staging/fsl-dpaa2/mac/mac.c
+++ b/drivers/staging/fsl-dpaa2/mac/mac.c
@@ -607,25 +607,17 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 
 	err = fsl_mc_portal_allocate(mc_dev, FSL_MC_IO_ATOMIC_CONTEXT_PORTAL,
 				     &mc_dev->mc_io);
-	if (err) {
-		dev_err(dev, "fsl_mc_portal_allocate err %d\n", err);
-		goto err_free_netdev;
-	}
-	if (!mc_dev->mc_io) {
-		dev_err(dev,
-			"fsl_mc_portal_allocate returned null handle but no error\n");
+	if (err || !mc_dev->mc_io) {
+		dev_err(dev, "fsl_mc_portal_allocate error: %d\n", err);
+		err = -ENODEV;
 		goto err_free_netdev;
 	}
 
 	err = dpmac_open(mc_dev->mc_io, 0, mc_dev->obj_desc.id,
 			 &mc_dev->mc_handle);
-	if (err) {
-		dev_err(dev, "dpmac_open err %d\n", err);
-		goto err_free_mcp;
-	}
-	if (!mc_dev->mc_handle) {
-		dev_err(dev, "dpmac_open returned null handle but no error\n");
-		err = -EFAULT;
+	if (err || !mc_dev->mc_handle) {
+		dev_err(dev, "dpmac_open error: %d\n", err);
+		err = -ENODEV;
 		goto err_free_mcp;
 	}
 
@@ -633,6 +625,7 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 				   mc_dev->mc_handle, &priv->attr);
 	if (err) {
 		dev_err(dev, "dpmac_get_attributes err %d\n", err);
+		err = -EINVAL;
 		goto err_close;
 	}
 
@@ -640,12 +633,15 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 	dpmac_node = ppx_lookup_node(dev, priv->attr.id);
 	if (!dpmac_node) {
 		dev_err(dev, "No dpmac@%d subnode found.\n", priv->attr.id);
+		err = -ENODEV;
 		goto err_close;
 	}
 
 	err = ppx_setup_irqs(mc_dev);
-	if (err)
+	if (err) {
+		err = -EFAULT;
 		goto err_close;
+	}
 
 #ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
 	/* OPTIONAL, register netdev just to make it visible to the user */
@@ -658,6 +654,7 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 	err = register_netdev(priv->netdev);
 	if (err < 0) {
 		dev_err(dev, "register_netdev error %d\n", err);
+		err = -ENODEV;
 		goto err_free_irq;
 	}
 #endif /* CONFIG_FSL_DPAA2_MAC_NETDEVS */
@@ -683,6 +680,7 @@ ppx_probe(struct fsl_mc_device *mc_dev)
 	if (!phy_node) {
 		if (!phy_node) {
 			dev_err(dev, "dpmac node has no phy-handle property\n");
+			err = -ENODEV;
 			goto err_no_phy;
 		}
 	}
@@ -713,7 +711,7 @@ probe_fixed_link:
 		if (!netdev->phydev || IS_ERR(netdev->phydev)) {
 			dev_err(dev, "error trying to register fixed PHY\n");
 			err = -EFAULT;
-			goto err_free_irq;
+			goto err_no_phy;
 		}
 		dev_info(dev, "Registered fixed PHY.\n");
 	}
@@ -730,8 +728,8 @@ err_defer:
 err_no_phy:
 #ifdef CONFIG_FSL_DPAA2_MAC_NETDEVS
 	unregister_netdev(netdev);
-#endif
 err_free_irq:
+#endif
 	ppx_teardown_irqs(mc_dev);
 err_close:
 	dpmac_close(mc_dev->mc_io, 0, mc_dev->mc_handle);
-- 
1.7.5.4

