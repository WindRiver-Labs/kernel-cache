From f27c8d418c76ed3b0c5c182f58bbd194c865d8f0 Mon Sep 17 00:00:00 2001
From: Liu Gang <Gang.Liu@nxp.com>
Date: Mon, 25 Apr 2016 20:16:20 +0800
Subject: [PATCH 1318/1429] layerscape/pci: Reconfigure PCI controllers after
 suspend/resume process

When PCI resumes from suspending, the ATU and some registers should be
reconfigured to make the controller work well.

Signed-off-by: Liu Gang <Gang.Liu@nxp.com>
[Original patch taken from QorIQ-SDK-V2.0-20160527-yocto]
Signed-off-by: Yanjiang Jin <yanjiang.jin@windriver.com>
---
 drivers/pci/host/pci-layerscape.c  |   16 +++++++++-------
 drivers/pci/host/pcie-designware.c |    7 +++++++
 2 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/drivers/pci/host/pci-layerscape.c b/drivers/pci/host/pci-layerscape.c
index d491b0f..8806372 100644
--- a/drivers/pci/host/pci-layerscape.c
+++ b/drivers/pci/host/pci-layerscape.c
@@ -426,6 +426,11 @@ static int ls_pcie_host_pme_init(struct ls_pcie *pcie,
 
 	pp = &pcie->pp;
 
+	if (dw_pcie_link_up(&pcie->pp))
+		pcie->in_slot = true;
+	else
+		pcie->in_slot = false;
+
 	pcie->pme_irq = platform_get_irq_byname(pdev, "pme");
 	if (pcie->pme_irq < 0) {
 		dev_err(&pdev->dev,
@@ -462,11 +467,6 @@ static int ls_pcie_host_pme_init(struct ls_pcie *pcie,
 	val |= PCIE_PEX_RCR_PMEIE;
 	iowrite16(val, pcie->dbi + PCIE_PEX_RCR);
 
-	if (dw_pcie_link_up(&pcie->pp))
-		pcie->in_slot = true;
-	else
-		pcie->in_slot = false;
-
 	return 0;
 }
 
@@ -590,12 +590,14 @@ static int ls_pcie_pm_do_resume(struct ls_pcie *pcie)
 	u32 state;
 	int i = 0;
 	u16 val;
-
-	ls_pcie_host_init(&pcie->pp);
+	struct pcie_port *pp = &pcie->pp;
 
 	if (!pcie->in_slot)
 		return 0;
 
+	dw_pcie_setup_rc(pp);
+	ls_pcie_host_init(pp);
+
 	/* Put RC in D0 */
 	val = ioread16(pcie->dbi + PCIE_PM_SCR);
 	val &= PCIE_PM_SCR_PMEPS_D0;
diff --git a/drivers/pci/host/pcie-designware.c b/drivers/pci/host/pcie-designware.c
index c028174..0ffc190 100644
--- a/drivers/pci/host/pcie-designware.c
+++ b/drivers/pci/host/pcie-designware.c
@@ -494,6 +494,13 @@ void dw_pcie_setup_rc(struct pcie_port *pp)
 	u32 membase;
 	u32 memlimit;
 
+	dw_pcie_prog_outbound_atu(pp, PCIE_ATU_REGION_INDEX0,
+				  PCIE_ATU_TYPE_IO, pp->io_base,
+				  pp->io_bus_addr, pp->io_size);
+	dw_pcie_prog_outbound_atu(pp, PCIE_ATU_REGION_INDEX1,
+				  PCIE_ATU_TYPE_MEM, pp->mem_base,
+				  pp->mem_bus_addr, pp->mem_size);
+
 	/* set the number of lanes */
 	dw_pcie_readl_rc(pp, PCIE_PORT_LINK_CONTROL, &val);
 	val &= ~PORT_LINK_MODE_MASK;
-- 
1.7.5.4

